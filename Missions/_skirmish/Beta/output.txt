// export MissionStart ; starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RevealFogArea ( 1 , BetaArea ) ;
  11: LD_INT 1
  13: PPUSH
  14: LD_INT 8
  16: PPUSH
  17: CALL_OW 332
// GameType ;
  21: CALL 5228 0 0
// SetBName ( BetaA , beta ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_STRING beta
  30: PPUSH
  31: CALL_OW 500
// SetBName ( BetaB , beta ) ;
  35: LD_INT 3
  37: PPUSH
  38: LD_STRING beta
  40: PPUSH
  41: CALL_OW 500
// PrepareHeroes ;
  45: CALL 2391 0 0
// PrepareBeta ;
  49: CALL 2780 0 0
// InGameOn ;
  53: CALL_OW 8
// CenterNowOnUnits ( Brighton ) ;
  57: LD_EXP 8
  61: PPUSH
  62: CALL_OW 87
// ComMoveXY ( Megan , 50 , 42 ) ;
  66: LD_EXP 10
  70: PPUSH
  71: LD_INT 50
  73: PPUSH
  74: LD_INT 42
  76: PPUSH
  77: CALL_OW 111
// repeat wait ( 0 0$1 ) until GetDistUnits ( Megan , Brighton ) < 3 ;
  81: LD_INT 35
  83: PPUSH
  84: CALL_OW 67
  88: LD_EXP 10
  92: PPUSH
  93: LD_EXP 8
  97: PPUSH
  98: CALL_OW 296
 102: PUSH
 103: LD_INT 3
 105: LESS
 106: IFFALSE 81
// ComTurnUnit ( Megan , Brighton ) ;
 108: LD_EXP 10
 112: PPUSH
 113: LD_EXP 8
 117: PPUSH
 118: CALL_OW 119
// Say ( Megan , DMegan-1a ) ;
 122: LD_EXP 10
 126: PPUSH
 127: LD_STRING DMegan-1a
 129: PPUSH
 130: CALL_OW 88
// wait ( 0 0$0.3 ) ;
 134: LD_INT 10
 136: PPUSH
 137: CALL_OW 67
// ComTurnUnit ( Brighton , Megan ) ;
 141: LD_EXP 8
 145: PPUSH
 146: LD_EXP 10
 150: PPUSH
 151: CALL_OW 119
// Say ( Brighton , DBrighton-1a ) ;
 155: LD_EXP 8
 159: PPUSH
 160: LD_STRING DBrighton-1a
 162: PPUSH
 163: CALL_OW 88
// Say ( Megan , DMegan-2a ) ;
 167: LD_EXP 10
 171: PPUSH
 172: LD_STRING DMegan-2a
 174: PPUSH
 175: CALL_OW 88
// Say ( Brighton , DBrighton-2a ) ;
 179: LD_EXP 8
 183: PPUSH
 184: LD_STRING DBrighton-2a
 186: PPUSH
 187: CALL_OW 88
// Say ( Megan , DMegan-3a ) ;
 191: LD_EXP 10
 195: PPUSH
 196: LD_STRING DMegan-3a
 198: PPUSH
 199: CALL_OW 88
// Say ( Brighton , DBrighton-3a ) ;
 203: LD_EXP 8
 207: PPUSH
 208: LD_STRING DBrighton-3a
 210: PPUSH
 211: CALL_OW 88
// Say ( Megan , DMegan-4a ) ;
 215: LD_EXP 10
 219: PPUSH
 220: LD_STRING DMegan-4a
 222: PPUSH
 223: CALL_OW 88
// ComMoveXY ( Megan , 40 , 37 ) ;
 227: LD_EXP 10
 231: PPUSH
 232: LD_INT 40
 234: PPUSH
 235: LD_INT 37
 237: PPUSH
 238: CALL_OW 111
// AddComTurnUnit ( Megan , Brighton ) ;
 242: LD_EXP 10
 246: PPUSH
 247: LD_EXP 8
 251: PPUSH
 252: CALL_OW 179
// ComMoveXY ( Palmer , 50 , 42 ) ;
 256: LD_EXP 9
 260: PPUSH
 261: LD_INT 50
 263: PPUSH
 264: LD_INT 42
 266: PPUSH
 267: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 271: LD_INT 35
 273: PPUSH
 274: CALL_OW 67
// until GetDistUnits ( Brighton , Palmer ) < 6 ;
 278: LD_EXP 8
 282: PPUSH
 283: LD_EXP 9
 287: PPUSH
 288: CALL_OW 296
 292: PUSH
 293: LD_INT 6
 295: LESS
 296: IFFALSE 271
// ComTurnUnit ( Brighton , Palmer ) ;
 298: LD_EXP 8
 302: PPUSH
 303: LD_EXP 9
 307: PPUSH
 308: CALL_OW 119
// ComTurnUnit ( Palmer , Brighton ) ;
 312: LD_EXP 9
 316: PPUSH
 317: LD_EXP 8
 321: PPUSH
 322: CALL_OW 119
// Say ( Megan , DMegan-5a ) ;
 326: LD_EXP 10
 330: PPUSH
 331: LD_STRING DMegan-5a
 333: PPUSH
 334: CALL_OW 88
// Say ( Palmer , DPalmer-1 ) ;
 338: LD_EXP 9
 342: PPUSH
 343: LD_STRING DPalmer-1
 345: PPUSH
 346: CALL_OW 88
// Say ( Brighton , DBrighton-1 ) ;
 350: LD_EXP 8
 354: PPUSH
 355: LD_STRING DBrighton-1
 357: PPUSH
 358: CALL_OW 88
// Say ( Palmer , DPalmer-2 ) ;
 362: LD_EXP 9
 366: PPUSH
 367: LD_STRING DPalmer-2
 369: PPUSH
 370: CALL_OW 88
// Say ( Brighton , DBrighton-2 ) ;
 374: LD_EXP 8
 378: PPUSH
 379: LD_STRING DBrighton-2
 381: PPUSH
 382: CALL_OW 88
// Say ( Palmer , DPalmer-3 ) ;
 386: LD_EXP 9
 390: PPUSH
 391: LD_STRING DPalmer-3
 393: PPUSH
 394: CALL_OW 88
// Say ( Brighton , DBrighton-3 ) ;
 398: LD_EXP 8
 402: PPUSH
 403: LD_STRING DBrighton-3
 405: PPUSH
 406: CALL_OW 88
// Say ( Palmer , DPalmer-4 ) ;
 410: LD_EXP 9
 414: PPUSH
 415: LD_STRING DPalmer-4
 417: PPUSH
 418: CALL_OW 88
// ComEnterUnit ( Palmer , AmTower ) ;
 422: LD_EXP 9
 426: PPUSH
 427: LD_INT 6
 429: PPUSH
 430: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
 434: LD_INT 35
 436: PPUSH
 437: CALL_OW 67
// until IsInUnit ( Palmer ) = AmTower ;
 441: LD_EXP 9
 445: PPUSH
 446: CALL_OW 310
 450: PUSH
 451: LD_INT 6
 453: EQUAL
 454: IFFALSE 434
// SayRadio ( Palmer , DPalmer-5 ) ;
 456: LD_EXP 9
 460: PPUSH
 461: LD_STRING DPalmer-5
 463: PPUSH
 464: CALL_OW 94
// ComMoveXY ( Brighton , 59 , 36 ) ;
 468: LD_EXP 8
 472: PPUSH
 473: LD_INT 59
 475: PPUSH
 476: LD_INT 36
 478: PPUSH
 479: CALL_OW 111
// ComMoveXY ( Megan , 60 , 35 ) ;
 483: LD_EXP 10
 487: PPUSH
 488: LD_INT 60
 490: PPUSH
 491: LD_INT 35
 493: PPUSH
 494: CALL_OW 111
// ComMoveXY ( Palmer , 60 , 34 ) ;
 498: LD_EXP 9
 502: PPUSH
 503: LD_INT 60
 505: PPUSH
 506: LD_INT 34
 508: PPUSH
 509: CALL_OW 111
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 513: LD_EXP 8
 517: PPUSH
 518: LD_INT 99
 520: PPUSH
 521: LD_INT 37
 523: PPUSH
 524: CALL_OW 178
// AddComTurnUnit ( Megan , Brighton ) ;
 528: LD_EXP 10
 532: PPUSH
 533: LD_EXP 8
 537: PPUSH
 538: CALL_OW 179
// AddComTurnUnit ( Palmer , Brighton ) ;
 542: LD_EXP 9
 546: PPUSH
 547: LD_EXP 8
 551: PPUSH
 552: CALL_OW 179
// CenterOnXY ( 64 , 40 ) ;
 556: LD_INT 64
 558: PPUSH
 559: LD_INT 40
 561: PPUSH
 562: CALL_OW 84
// ComMeeting ( BetaSquad , SpotArea ) ;
 566: LD_EXP 11
 570: PPUSH
 571: LD_INT 13
 573: PPUSH
 574: CALL 10947 0 2
// wait ( 0 0$30 ) ;
 578: LD_INT 1050
 580: PPUSH
 581: CALL_OW 67
// Say ( Brighton , DBrighton-4 ) ;
 585: LD_EXP 8
 589: PPUSH
 590: LD_STRING DBrighton-4
 592: PPUSH
 593: CALL_OW 88
// Say ( Brighton , DBrighton-5 ) ;
 597: LD_EXP 8
 601: PPUSH
 602: LD_STRING DBrighton-5
 604: PPUSH
 605: CALL_OW 88
// AddComTurnUnit ( Brighton , Megan ) ;
 609: LD_EXP 8
 613: PPUSH
 614: LD_EXP 10
 618: PPUSH
 619: CALL_OW 179
// Say ( Brighton , DBrighton-6 ) ;
 623: LD_EXP 8
 627: PPUSH
 628: LD_STRING DBrighton-6
 630: PPUSH
 631: CALL_OW 88
// Say ( Megan , DMegan-1 ) ;
 635: LD_EXP 10
 639: PPUSH
 640: LD_STRING DMegan-1
 642: PPUSH
 643: CALL_OW 88
// Say ( Brighton , DBrighton-7 ) ;
 647: LD_EXP 8
 651: PPUSH
 652: LD_STRING DBrighton-7
 654: PPUSH
 655: CALL_OW 88
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 659: LD_EXP 8
 663: PPUSH
 664: LD_INT 99
 666: PPUSH
 667: LD_INT 37
 669: PPUSH
 670: CALL_OW 178
// Say ( Brighton , DBrighton-8 ) ;
 674: LD_EXP 8
 678: PPUSH
 679: LD_STRING DBrighton-8
 681: PPUSH
 682: CALL_OW 88
// ChangeMissionObjectives ( C1 ) ;
 686: LD_STRING C1
 688: PPUSH
 689: CALL_OW 337
// InGameOff ;
 693: CALL_OW 9
// SaveForQuickRestart ;
 697: CALL_OW 22
// MissionStart := true ;
 701: LD_ADDR_EXP 1
 705: PUSH
 706: LD_INT 1
 708: ST_TO_ADDR
// music_nat := 1 ;
 709: LD_ADDR_OWVAR 71
 713: PUSH
 714: LD_INT 1
 716: ST_TO_ADDR
// end ;
 717: END
// export ArmadaArrived , FirstAssaultRepelled ; export RuSpeaker ; every 0 0$1 trigger MissionStart do var tmp , i ;
 718: LD_EXP 1
 722: IFFALSE 1917
 724: GO 726
 726: DISABLE
 727: LD_INT 0
 729: PPUSH
 730: PPUSH
// begin wait ( ruArrival ) ;
 731: LD_EXP 41
 735: PPUSH
 736: CALL_OW 67
// PrepareRUArmada ;
 740: CALL 3362 0 0
// wait ( 0 0$3 ) ;
 744: LD_INT 105
 746: PPUSH
 747: CALL_OW 67
// tmp := AreaToList ( RUArrivalParkingArea , 0 ) ;
 751: LD_ADDR_VAR 0 1
 755: PUSH
 756: LD_INT 15
 758: PPUSH
 759: LD_INT 0
 761: PPUSH
 762: CALL_OW 517
 766: ST_TO_ADDR
// for i = 1 to RUArmada do
 767: LD_ADDR_VAR 0 2
 771: PUSH
 772: DOUBLE
 773: LD_INT 1
 775: DEC
 776: ST_TO_ADDR
 777: LD_EXP 16
 781: PUSH
 782: FOR_TO
 783: IFFALSE 832
// ComMoveXY ( RUArmada [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
 785: LD_EXP 16
 789: PUSH
 790: LD_VAR 0 2
 794: ARRAY
 795: PPUSH
 796: LD_VAR 0 1
 800: PUSH
 801: LD_INT 1
 803: ARRAY
 804: PUSH
 805: LD_VAR 0 2
 809: ARRAY
 810: PPUSH
 811: LD_VAR 0 1
 815: PUSH
 816: LD_INT 2
 818: ARRAY
 819: PUSH
 820: LD_VAR 0 2
 824: ARRAY
 825: PPUSH
 826: CALL_OW 111
 830: GO 782
 832: POP
 833: POP
// ArmadaArrived := true ;
 834: LD_ADDR_EXP 2
 838: PUSH
 839: LD_INT 1
 841: ST_TO_ADDR
// Say ( Palmer , DPalmer-A1 ) ;
 842: LD_EXP 9
 846: PPUSH
 847: LD_STRING DPalmer-A1
 849: PPUSH
 850: CALL_OW 88
// Say ( Brighton , DBrighton-A1 ) ;
 854: LD_EXP 8
 858: PPUSH
 859: LD_STRING DBrighton-A1
 861: PPUSH
 862: CALL_OW 88
// wait ( 0 0$20 ) ;
 866: LD_INT 700
 868: PPUSH
 869: CALL_OW 67
// PrepareRUBase ;
 873: CALL 4087 0 0
// PrepareRUBase_v2 ;
 877: CALL 4503 0 0
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
 881: LD_ADDR_EXP 52
 885: PUSH
 886: LD_EXP 52
 890: PPUSH
 891: LD_INT 1
 893: PPUSH
 894: LD_INT 22
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PPUSH
 904: CALL_OW 69
 908: PPUSH
 909: CALL_OW 1
 913: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , RU_SecondPersonnel ) ;
 914: LD_ADDR_EXP 52
 918: PUSH
 919: LD_EXP 52
 923: PPUSH
 924: LD_INT 2
 926: PPUSH
 927: LD_EXP 35
 931: PPUSH
 932: CALL_OW 1
 936: ST_TO_ADDR
// MC_Start ( ) ;
 937: CALL 56263 0 0
// wait ( 0 0$30 ) ;
 941: LD_INT 1050
 943: PPUSH
 944: CALL_OW 67
// PrepareRUBulldozers ;
 948: CALL 3974 0 0
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
 952: LD_EXP 17
 956: PUSH
 957: LD_INT 1
 959: ARRAY
 960: PPUSH
 961: LD_INT 9
 963: PPUSH
 964: CALL 10804 0 2
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
 968: LD_EXP 17
 972: PUSH
 973: LD_INT 2
 975: ARRAY
 976: PPUSH
 977: LD_INT 11
 979: PPUSH
 980: CALL 10804 0 2
// DoNotAttack ( 1 , Bulldozers [ 1 ] ) ;
 984: LD_INT 1
 986: PPUSH
 987: LD_EXP 17
 991: PUSH
 992: LD_INT 1
 994: ARRAY
 995: PPUSH
 996: CALL_OW 471
// DoNotAttack ( 1 , Bulldozers [ 2 ] ) ;
1000: LD_INT 1
1002: PPUSH
1003: LD_EXP 17
1007: PUSH
1008: LD_INT 2
1010: ARRAY
1011: PPUSH
1012: CALL_OW 471
// wait ( 0 0$30 ) ;
1016: LD_INT 1050
1018: PPUSH
1019: CALL_OW 67
// InGameOn ;
1023: CALL_OW 8
// PlaceSeeing ( 95 , 93 , 1 , - 30 ) ;
1027: LD_INT 95
1029: PPUSH
1030: LD_INT 93
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_INT 30
1038: NEG
1039: PPUSH
1040: CALL_OW 330
// ComMoveXY ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) , 63 , 39 ) ;
1044: LD_INT 10
1046: PPUSH
1047: LD_INT 22
1049: PUSH
1050: LD_INT 1
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: PPUSH
1057: CALL_OW 70
1061: PPUSH
1062: LD_INT 63
1064: PPUSH
1065: LD_INT 39
1067: PPUSH
1068: CALL_OW 111
// CenterOnXY ( 95 , 93 ) ;
1072: LD_INT 95
1074: PPUSH
1075: LD_INT 93
1077: PPUSH
1078: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
1082: LD_INT 35
1084: PPUSH
1085: CALL_OW 67
// if not HasTask ( Bulldozers [ 1 ] ) then
1089: LD_EXP 17
1093: PUSH
1094: LD_INT 1
1096: ARRAY
1097: PPUSH
1098: CALL_OW 314
1102: NOT
1103: IFFALSE 1121
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
1105: LD_EXP 17
1109: PUSH
1110: LD_INT 1
1112: ARRAY
1113: PPUSH
1114: LD_INT 9
1116: PPUSH
1117: CALL 10804 0 2
// if not HasTask ( Bulldozers [ 2 ] ) then
1121: LD_EXP 17
1125: PUSH
1126: LD_INT 2
1128: ARRAY
1129: PPUSH
1130: CALL_OW 314
1134: NOT
1135: IFFALSE 1153
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
1137: LD_EXP 17
1141: PUSH
1142: LD_INT 2
1144: ARRAY
1145: PPUSH
1146: LD_INT 11
1148: PPUSH
1149: CALL 10804 0 2
// until ListEnvironmentArea ( BulldozerArea ) < 2 or ListEnvironmentArea ( BulldozerArea2 ) < 2 or IsDead ( Bulldozers [ 1 ] ) ;
1153: LD_INT 9
1155: PPUSH
1156: CALL_OW 353
1160: PUSH
1161: LD_INT 2
1163: LESS
1164: PUSH
1165: LD_INT 11
1167: PPUSH
1168: CALL_OW 353
1172: PUSH
1173: LD_INT 2
1175: LESS
1176: OR
1177: PUSH
1178: LD_EXP 17
1182: PUSH
1183: LD_INT 1
1185: ARRAY
1186: PPUSH
1187: CALL_OW 301
1191: OR
1192: IFFALSE 1082
// if UnitFilter ( Bulldozers , [ f_ok ] ) then
1194: LD_EXP 17
1198: PPUSH
1199: LD_INT 50
1201: PUSH
1202: EMPTY
1203: LIST
1204: PPUSH
1205: CALL_OW 72
1209: IFFALSE 1262
// begin wait ( 0 0$10 ) ;
1211: LD_INT 350
1213: PPUSH
1214: CALL_OW 67
// ComMoveXY ( Bulldozers , 120 , 131 ) ;
1218: LD_EXP 17
1222: PPUSH
1223: LD_INT 120
1225: PPUSH
1226: LD_INT 131
1228: PPUSH
1229: CALL_OW 111
// for i in Bulldozers do
1233: LD_ADDR_VAR 0 2
1237: PUSH
1238: LD_EXP 17
1242: PUSH
1243: FOR_IN
1244: IFFALSE 1260
// NormalAttack ( 1 , i ) ;
1246: LD_INT 1
1248: PPUSH
1249: LD_VAR 0 2
1253: PPUSH
1254: CALL_OW 472
1258: GO 1243
1260: POP
1261: POP
// end ; wait ( 0 0$10 ) ;
1262: LD_INT 350
1264: PPUSH
1265: CALL_OW 67
// RemoveSeeing ( 95 , 93 , 1 ) ;
1269: LD_INT 95
1271: PPUSH
1272: LD_INT 93
1274: PPUSH
1275: LD_INT 1
1277: PPUSH
1278: CALL_OW 331
// Say ( Yashin , DDeath-Yas-1 ) ;
1282: LD_EXP 12
1286: PPUSH
1287: LD_STRING DDeath-Yas-1
1289: PPUSH
1290: CALL_OW 88
// SayEffect ( DRuSol-A1 ) ;
1294: LD_STRING DRuSol-A1
1296: PPUSH
1297: CALL_OW 96
// wait ( 0 0$2 ) ;
1301: LD_INT 70
1303: PPUSH
1304: CALL_OW 67
// InGameOff ;
1308: CALL_OW 9
// ComMoveXY ( RUArmada , 66 , 40 ) ;
1312: LD_EXP 16
1316: PPUSH
1317: LD_INT 66
1319: PPUSH
1320: LD_INT 40
1322: PPUSH
1323: CALL_OW 111
// wait ( 0 0$2 ) ;
1327: LD_INT 70
1329: PPUSH
1330: CALL_OW 67
// Say ( Gaydar , DDeath-Gay-2 ) ;
1334: LD_EXP 14
1338: PPUSH
1339: LD_STRING DDeath-Gay-2
1341: PPUSH
1342: CALL_OW 88
// wait ( 0 0$20 ) ;
1346: LD_INT 700
1348: PPUSH
1349: CALL_OW 67
// AssaultStarted := true ;
1353: LD_ADDR_EXP 7
1357: PUSH
1358: LD_INT 1
1360: ST_TO_ADDR
// Say ( Popov , DDeath-Pop-1 ) ;
1361: LD_EXP 13
1365: PPUSH
1366: LD_STRING DDeath-Pop-1
1368: PPUSH
1369: CALL_OW 88
// Say ( Gaydar , DDeath-Gay-1 ) ;
1373: LD_EXP 14
1377: PPUSH
1378: LD_STRING DDeath-Gay-1
1380: PPUSH
1381: CALL_OW 88
// wait ( 0 0$5 ) ;
1385: LD_INT 175
1387: PPUSH
1388: CALL_OW 67
// Say ( Sevi , DDeath-Vse-1 ) ;
1392: LD_EXP 15
1396: PPUSH
1397: LD_STRING DDeath-Vse-1
1399: PPUSH
1400: CALL_OW 88
// PriorityAttack ( 6 , BetaA ) ;
1404: LD_INT 6
1406: PPUSH
1407: LD_INT 1
1409: PPUSH
1410: CALL_OW 470
// PriorityAttack ( 6 , BetaB ) ;
1414: LD_INT 6
1416: PPUSH
1417: LD_INT 3
1419: PPUSH
1420: CALL_OW 470
// repeat for i in RuArmada do
1424: LD_ADDR_VAR 0 2
1428: PUSH
1429: LD_EXP 16
1433: PUSH
1434: FOR_IN
1435: IFFALSE 1485
// if not HasTask ( i ) then
1437: LD_VAR 0 2
1441: PPUSH
1442: CALL_OW 314
1446: NOT
1447: IFFALSE 1483
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
1449: LD_VAR 0 2
1453: PPUSH
1454: LD_INT 22
1456: PUSH
1457: LD_INT 1
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PPUSH
1464: CALL_OW 69
1468: PPUSH
1469: LD_VAR 0 2
1473: PPUSH
1474: CALL_OW 74
1478: PPUSH
1479: CALL_OW 115
1483: GO 1434
1485: POP
1486: POP
// wait ( 0 0$1 ) until FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_type , unit_human ] ] ) < 10 and IsDead ( Yashin ) and IsDead ( Popov ) and IsDead ( Gaydar ) and IsDead ( Sevi ) ;
1487: LD_INT 35
1489: PPUSH
1490: CALL_OW 67
1494: LD_INT 1
1496: PUSH
1497: LD_INT 22
1499: PUSH
1500: LD_INT 6
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: PUSH
1507: LD_INT 21
1509: PUSH
1510: LD_INT 1
1512: PUSH
1513: EMPTY
1514: LIST
1515: LIST
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: LD_INT 10
1529: LESS
1530: PUSH
1531: LD_EXP 12
1535: PPUSH
1536: CALL_OW 301
1540: AND
1541: PUSH
1542: LD_EXP 13
1546: PPUSH
1547: CALL_OW 301
1551: AND
1552: PUSH
1553: LD_EXP 14
1557: PPUSH
1558: CALL_OW 301
1562: AND
1563: PUSH
1564: LD_EXP 15
1568: PPUSH
1569: CALL_OW 301
1573: AND
1574: IFFALSE 1424
// AssaultStarted := false ;
1576: LD_ADDR_EXP 7
1580: PUSH
1581: LD_INT 0
1583: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ f_side , 6 ] ) , 120 , 131 ) ;
1584: LD_INT 22
1586: PUSH
1587: LD_INT 6
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: PPUSH
1594: CALL_OW 69
1598: PPUSH
1599: LD_INT 120
1601: PPUSH
1602: LD_INT 131
1604: PPUSH
1605: CALL_OW 111
// RuSpeaker := FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_sex , sex_male ] , [ f_type , unit_human ] , [ f_lives , 500 ] ] ) ;
1609: LD_ADDR_EXP 4
1613: PUSH
1614: LD_INT 1
1616: PUSH
1617: LD_INT 22
1619: PUSH
1620: LD_INT 6
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 26
1629: PUSH
1630: LD_INT 1
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PUSH
1637: LD_INT 21
1639: PUSH
1640: LD_INT 1
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: PUSH
1647: LD_INT 24
1649: PUSH
1650: LD_INT 500
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: PPUSH
1664: CALL_OW 69
1668: ST_TO_ADDR
// if RuSpeaker then
1669: LD_EXP 4
1673: IFFALSE 1691
// Say ( RuSpeaker [ 1 ] , DRuSol-A2 ) ;
1675: LD_EXP 4
1679: PUSH
1680: LD_INT 1
1682: ARRAY
1683: PPUSH
1684: LD_STRING DRuSol-A2
1686: PPUSH
1687: CALL_OW 88
// wait ( 0 0$30 ) ;
1691: LD_INT 1050
1693: PPUSH
1694: CALL_OW 67
// DialogueOn ;
1698: CALL_OW 6
// Say ( Brighton , DBrighton-B1 ) ;
1702: LD_EXP 8
1706: PPUSH
1707: LD_STRING DBrighton-B1
1709: PPUSH
1710: CALL_OW 88
// Say ( Palmer , DPalmer-B1 ) ;
1714: LD_EXP 9
1718: PPUSH
1719: LD_STRING DPalmer-B1
1721: PPUSH
1722: CALL_OW 88
// Say ( Brighton , DBrighton-B2 ) ;
1726: LD_EXP 8
1730: PPUSH
1731: LD_STRING DBrighton-B2
1733: PPUSH
1734: CALL_OW 88
// SayRadio ( Burlak , DBurlak-B1 ) ;
1738: LD_EXP 18
1742: PPUSH
1743: LD_STRING DBurlak-B1
1745: PPUSH
1746: CALL_OW 94
// Say ( Brighton , DBrighton-B3 ) ;
1750: LD_EXP 8
1754: PPUSH
1755: LD_STRING DBrighton-B3
1757: PPUSH
1758: CALL_OW 88
// Say ( Palmer , DPalmer-B2 ) ;
1762: LD_EXP 9
1766: PPUSH
1767: LD_STRING DPalmer-B2
1769: PPUSH
1770: CALL_OW 88
// Say ( Brighton , DBrighton-B4 ) ;
1774: LD_EXP 8
1778: PPUSH
1779: LD_STRING DBrighton-B4
1781: PPUSH
1782: CALL_OW 88
// Say ( Brighton , DBrighton-B5 ) ;
1786: LD_EXP 8
1790: PPUSH
1791: LD_STRING DBrighton-B5
1793: PPUSH
1794: CALL_OW 88
// DialogueOff ;
1798: CALL_OW 7
// ChangeMissionObjectives ( C2 ) ;
1802: LD_STRING C2
1804: PPUSH
1805: CALL_OW 337
// FirstAssaultRepelled := true ;
1809: LD_ADDR_EXP 3
1813: PUSH
1814: LD_INT 1
1816: ST_TO_ADDR
// RemoveUnit ( Bulldozers [ 1 ] ) ;
1817: LD_EXP 17
1821: PUSH
1822: LD_INT 1
1824: ARRAY
1825: PPUSH
1826: CALL_OW 64
// RemoveUnit ( Bulldozers [ 2 ] ) ;
1830: LD_EXP 17
1834: PUSH
1835: LD_INT 2
1837: ARRAY
1838: PPUSH
1839: CALL_OW 64
// AddComExitVehicle ( FilterAllUnits ( [ f_side , 6 ] ) ) ;
1843: LD_INT 22
1845: PUSH
1846: LD_INT 6
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PPUSH
1853: CALL_OW 69
1857: PPUSH
1858: CALL_OW 181
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
1862: LD_INT 22
1864: PUSH
1865: LD_INT 6
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PPUSH
1872: CALL_OW 69
1876: PPUSH
1877: LD_INT 3
1879: PPUSH
1880: CALL_OW 235
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
1884: LD_ADDR_EXP 52
1888: PUSH
1889: LD_EXP 52
1893: PPUSH
1894: LD_INT 1
1896: PPUSH
1897: LD_INT 22
1899: PUSH
1900: LD_INT 3
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: PPUSH
1907: CALL_OW 69
1911: PPUSH
1912: CALL_OW 1
1916: ST_TO_ADDR
// end ;
1917: PPOPN 2
1919: END
// every 0 0$1 trigger FirstAssaultRepelled and jmmArrival > 0 0$00 do
1920: LD_EXP 3
1924: PUSH
1925: LD_EXP 40
1929: PUSH
1930: LD_INT 0
1932: GREATER
1933: AND
1934: IFFALSE 1954
1936: GO 1938
1938: DISABLE
// begin enable ;
1939: ENABLE
// jmmArrival := jmmArrival - 0 0$01 ;
1940: LD_ADDR_EXP 40
1944: PUSH
1945: LD_EXP 40
1949: PUSH
1950: LD_INT 35
1952: MINUS
1953: ST_TO_ADDR
// end ;
1954: END
// export JMM_Arrived ; every 0 0$1 trigger jmmArrival = 0 0$00 do
1955: LD_EXP 40
1959: PUSH
1960: LD_INT 0
1962: EQUAL
1963: IFFALSE 2069
1965: GO 1967
1967: DISABLE
// begin JMMReinforcement ;
1968: CALL 4831 0 0
// DialogueOn ;
1972: CALL_OW 6
// CenterOnUnits ( JMM ) ;
1976: LD_EXP 36
1980: PPUSH
1981: CALL_OW 85
// Say ( JMM , DJMM-F1 ) ;
1985: LD_EXP 36
1989: PPUSH
1990: LD_STRING DJMM-F1
1992: PPUSH
1993: CALL_OW 88
// if RussiansDefeated then
1997: LD_EXP 42
2001: IFFALSE 2027
// begin AddMedal ( Russians , 1 ) ;
2003: LD_STRING Russians
2005: PPUSH
2006: LD_INT 1
2008: PPUSH
2009: CALL_OW 101
// Say ( Brighton , DBrighton-F1a ) ;
2013: LD_EXP 8
2017: PPUSH
2018: LD_STRING DBrighton-F1a
2020: PPUSH
2021: CALL_OW 88
// end else
2025: GO 2057
// begin AddMedal ( Russians , - 1 ) ;
2027: LD_STRING Russians
2029: PPUSH
2030: LD_INT 1
2032: NEG
2033: PPUSH
2034: CALL_OW 101
// Say ( Brighton , DBrighton-F1 ) ;
2038: LD_EXP 8
2042: PPUSH
2043: LD_STRING DBrighton-F1
2045: PPUSH
2046: CALL_OW 88
// ChangeMissionObjectives ( C3 ) ;
2050: LD_STRING C3
2052: PPUSH
2053: CALL_OW 337
// end ; DialogueOff ;
2057: CALL_OW 7
// JMM_Arrived := true ;
2061: LD_ADDR_EXP 5
2065: PUSH
2066: LD_INT 1
2068: ST_TO_ADDR
// end ;
2069: END
// every 0 0$1 trigger JMM_Arrived and See ( 1 , Burlak ) do
2070: LD_EXP 5
2074: PUSH
2075: LD_INT 1
2077: PPUSH
2078: LD_EXP 18
2082: PPUSH
2083: CALL_OW 292
2087: AND
2088: IFFALSE 2117
2090: GO 2092
2092: DISABLE
// begin Say ( Burlak , DBurlak ) ;
2093: LD_EXP 18
2097: PPUSH
2098: LD_STRING DBurlak
2100: PPUSH
2101: CALL_OW 88
// Say ( JMM , DJMM ) ;
2105: LD_EXP 36
2109: PPUSH
2110: LD_STRING DJMM
2112: PPUSH
2113: CALL_OW 88
// end ;
2117: END
// export LaserBuilt ; every 0 0$1 trigger FilterAllUnits ( [ f_and , [ f_side , 1 ] , [ f_or , [ f_weapon , us_laser ] , [ f_bweapon , us_laser ] ] ] ) > 1 do
2118: LD_INT 1
2120: PUSH
2121: LD_INT 22
2123: PUSH
2124: LD_INT 1
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: PUSH
2131: LD_INT 2
2133: PUSH
2134: LD_INT 34
2136: PUSH
2137: LD_INT 9
2139: PUSH
2140: EMPTY
2141: LIST
2142: LIST
2143: PUSH
2144: LD_INT 35
2146: PUSH
2147: LD_INT 9
2149: PUSH
2150: EMPTY
2151: LIST
2152: LIST
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: LIST
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: LIST
2163: PPUSH
2164: CALL_OW 69
2168: PUSH
2169: LD_INT 1
2171: GREATER
2172: IFFALSE 2185
2174: GO 2176
2176: DISABLE
// begin LaserBuilt := true ;
2177: LD_ADDR_EXP 6
2181: PUSH
2182: LD_INT 1
2184: ST_TO_ADDR
// end ;
2185: END
// export AssaultStarted ; every 0 0$1 trigger AssaultStarted and See ( 6 , NearestUnitToUnit ( FilterAllUnits ( [ f_and , [ [ f_side , 1 ] , [ f_bweapon , us_laser ] ] ] ) , IsInUnit ( Sevi ) ) ) do
2186: LD_EXP 7
2190: PUSH
2191: LD_INT 6
2193: PPUSH
2194: LD_INT 1
2196: PUSH
2197: LD_INT 22
2199: PUSH
2200: LD_INT 1
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: PUSH
2207: LD_INT 35
2209: PUSH
2210: LD_INT 9
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: PPUSH
2225: CALL_OW 69
2229: PPUSH
2230: LD_EXP 15
2234: PPUSH
2235: CALL_OW 310
2239: PPUSH
2240: CALL_OW 74
2244: PPUSH
2245: CALL_OW 292
2249: AND
2250: IFFALSE 2286
2252: GO 2254
2254: DISABLE
// begin wait ( 0 0$5 ) ;
2255: LD_INT 175
2257: PPUSH
2258: CALL_OW 67
// Say ( Sevi , DDeath-Vse-2 ) ;
2262: LD_EXP 15
2266: PPUSH
2267: LD_STRING DDeath-Vse-2
2269: PPUSH
2270: CALL_OW 88
// Say ( Yashin , DDeath-Yas-2 ) ;
2274: LD_EXP 12
2278: PPUSH
2279: LD_STRING DDeath-Yas-2
2281: PPUSH
2282: CALL_OW 88
// end ;
2286: END
// every 0 0$1 trigger AssaultStarted do
2287: LD_EXP 7
2291: IFFALSE 2315
2293: GO 2295
2295: DISABLE
// begin wait ( 0 0$20 ) ;
2296: LD_INT 700
2298: PPUSH
2299: CALL_OW 67
// Say ( Popov , DDeath-Pop-2 ) ;
2303: LD_EXP 13
2307: PPUSH
2308: LD_STRING DDeath-Pop-2
2310: PPUSH
2311: CALL_OW 88
// end ;
2315: END
// every 0 0$1 trigger MissionStart do
2316: LD_EXP 1
2320: IFFALSE 2362
2322: GO 2324
2324: DISABLE
// begin wait ( rand ( 0 0$50 , 2 2$20 ) ) ;
2325: LD_INT 1750
2327: PPUSH
2328: LD_INT 4900
2330: PPUSH
2331: CALL_OW 12
2335: PPUSH
2336: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
2340: LD_INT 2
2342: PPUSH
2343: LD_INT 5
2345: PPUSH
2346: CALL_OW 12
2350: PPUSH
2351: LD_INT 12
2353: PPUSH
2354: LD_INT 1
2356: PPUSH
2357: CALL_OW 55
// enable ;
2361: ENABLE
// end ;
2362: END
// every 0 0$1 trigger MissionStart do
2363: LD_EXP 1
2367: IFFALSE 2390
2369: GO 2371
2371: DISABLE
// begin enable ;
2372: ENABLE
// display_Strings := [ #tick , tick ] ;
2373: LD_ADDR_OWVAR 47
2377: PUSH
2378: LD_STRING #tick
2380: PUSH
2381: LD_OWVAR 1
2385: PUSH
2386: EMPTY
2387: LIST
2388: LIST
2389: ST_TO_ADDR
// end ; end_of_file
2390: END
// export Brighton , Palmer , Megan ; export BetaSquad ; export function PrepareHeroes ; begin
2391: LD_INT 0
2393: PPUSH
// uc_side := 1 ;
2394: LD_ADDR_OWVAR 20
2398: PUSH
2399: LD_INT 1
2401: ST_TO_ADDR
// hc_class = class_soldier ;
2402: LD_ADDR_OWVAR 28
2406: PUSH
2407: LD_INT 1
2409: ST_TO_ADDR
// uc_nation := nation_american ;
2410: LD_ADDR_OWVAR 21
2414: PUSH
2415: LD_INT 1
2417: ST_TO_ADDR
// hc_sex = sex_male ;
2418: LD_ADDR_OWVAR 27
2422: PUSH
2423: LD_INT 1
2425: ST_TO_ADDR
// hc_importance = 110 ;
2426: LD_ADDR_OWVAR 32
2430: PUSH
2431: LD_INT 110
2433: ST_TO_ADDR
// hc_basic_skills = [ 5 , 4 , 5 , 3 ] ;
2434: LD_ADDR_OWVAR 30
2438: PUSH
2439: LD_INT 5
2441: PUSH
2442: LD_INT 4
2444: PUSH
2445: LD_INT 5
2447: PUSH
2448: LD_INT 3
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: LIST
2455: LIST
2456: ST_TO_ADDR
// hc_skills = [ 9 , 6 , 7 , 6 ] ;
2457: LD_ADDR_OWVAR 31
2461: PUSH
2462: LD_INT 9
2464: PUSH
2465: LD_INT 6
2467: PUSH
2468: LD_INT 7
2470: PUSH
2471: LD_INT 6
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: LIST
2478: LIST
2479: ST_TO_ADDR
// hc_attr = [ 12 , 10 ] ;
2480: LD_ADDR_OWVAR 29
2484: PUSH
2485: LD_INT 12
2487: PUSH
2488: LD_INT 10
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: ST_TO_ADDR
// hc_name := Gerard Brighton ;
2495: LD_ADDR_OWVAR 26
2499: PUSH
2500: LD_STRING Gerard Brighton
2502: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2503: LD_ADDR_OWVAR 33
2507: PUSH
2508: LD_STRING Beta_Skirmish
2510: ST_TO_ADDR
// hc_face_number := 1 ;
2511: LD_ADDR_OWVAR 34
2515: PUSH
2516: LD_INT 1
2518: ST_TO_ADDR
// Brighton := CreateHuman ;
2519: LD_ADDR_EXP 8
2523: PUSH
2524: CALL_OW 44
2528: ST_TO_ADDR
// uc_nation := nation_american ;
2529: LD_ADDR_OWVAR 21
2533: PUSH
2534: LD_INT 1
2536: ST_TO_ADDR
// hc_importance = 80 ;
2537: LD_ADDR_OWVAR 32
2541: PUSH
2542: LD_INT 80
2544: ST_TO_ADDR
// hc_sex = sex_male ;
2545: LD_ADDR_OWVAR 27
2549: PUSH
2550: LD_INT 1
2552: ST_TO_ADDR
// hc_basic_skills = [ 5 , 5 , 3 , 1 ] ;
2553: LD_ADDR_OWVAR 30
2557: PUSH
2558: LD_INT 5
2560: PUSH
2561: LD_INT 5
2563: PUSH
2564: LD_INT 3
2566: PUSH
2567: LD_INT 1
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: ST_TO_ADDR
// hc_skills = [ 7 , 6 , 5 , 3 ] ;
2576: LD_ADDR_OWVAR 31
2580: PUSH
2581: LD_INT 7
2583: PUSH
2584: LD_INT 6
2586: PUSH
2587: LD_INT 5
2589: PUSH
2590: LD_INT 3
2592: PUSH
2593: EMPTY
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2599: LD_ADDR_OWVAR 29
2603: PUSH
2604: LD_INT 10
2606: PUSH
2607: LD_INT 10
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: ST_TO_ADDR
// hc_name := Brian Palmer ;
2614: LD_ADDR_OWVAR 26
2618: PUSH
2619: LD_STRING Brian Palmer
2621: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2622: LD_ADDR_OWVAR 33
2626: PUSH
2627: LD_STRING Beta_Skirmish
2629: ST_TO_ADDR
// hc_face_number := 3 ;
2630: LD_ADDR_OWVAR 34
2634: PUSH
2635: LD_INT 3
2637: ST_TO_ADDR
// Palmer := CreateHuman ;
2638: LD_ADDR_EXP 9
2642: PUSH
2643: CALL_OW 44
2647: ST_TO_ADDR
// hc_class = class_scientistic ;
2648: LD_ADDR_OWVAR 28
2652: PUSH
2653: LD_INT 4
2655: ST_TO_ADDR
// uc_nation := nation_american ;
2656: LD_ADDR_OWVAR 21
2660: PUSH
2661: LD_INT 1
2663: ST_TO_ADDR
// hc_importance = 70 ;
2664: LD_ADDR_OWVAR 32
2668: PUSH
2669: LD_INT 70
2671: ST_TO_ADDR
// hc_sex = sex_female ;
2672: LD_ADDR_OWVAR 27
2676: PUSH
2677: LD_INT 2
2679: ST_TO_ADDR
// hc_basic_skills = [ 3 , 2 , 4 , 6 ] ;
2680: LD_ADDR_OWVAR 30
2684: PUSH
2685: LD_INT 3
2687: PUSH
2688: LD_INT 2
2690: PUSH
2691: LD_INT 4
2693: PUSH
2694: LD_INT 6
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: ST_TO_ADDR
// hc_skills = [ 4 , 2 , 5 , 8 ] ;
2703: LD_ADDR_OWVAR 31
2707: PUSH
2708: LD_INT 4
2710: PUSH
2711: LD_INT 2
2713: PUSH
2714: LD_INT 5
2716: PUSH
2717: LD_INT 8
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: LIST
2724: LIST
2725: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2726: LD_ADDR_OWVAR 29
2730: PUSH
2731: LD_INT 10
2733: PUSH
2734: LD_INT 10
2736: PUSH
2737: EMPTY
2738: LIST
2739: LIST
2740: ST_TO_ADDR
// hc_name := Megan Armitage ;
2741: LD_ADDR_OWVAR 26
2745: PUSH
2746: LD_STRING Megan Armitage
2748: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2749: LD_ADDR_OWVAR 33
2753: PUSH
2754: LD_STRING Beta_Skirmish
2756: ST_TO_ADDR
// hc_face_number := 4 ;
2757: LD_ADDR_OWVAR 34
2761: PUSH
2762: LD_INT 4
2764: ST_TO_ADDR
// Megan := CreateHuman ;
2765: LD_ADDR_EXP 10
2769: PUSH
2770: CALL_OW 44
2774: ST_TO_ADDR
// end ;
2775: LD_VAR 0 1
2779: RET
// export function PrepareBeta ; var i , filter , un , soldiers ; begin
2780: LD_INT 0
2782: PPUSH
2783: PPUSH
2784: PPUSH
2785: PPUSH
2786: PPUSH
// uc_side := 1 ;
2787: LD_ADDR_OWVAR 20
2791: PUSH
2792: LD_INT 1
2794: ST_TO_ADDR
// uc_nation := nation_american ;
2795: LD_ADDR_OWVAR 21
2799: PUSH
2800: LD_INT 1
2802: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
2803: LD_ADDR_VAR 0 2
2807: PUSH
2808: LD_INT 22
2810: PUSH
2811: LD_INT 1
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: PUSH
2818: LD_INT 30
2820: PUSH
2821: LD_INT 32
2823: PUSH
2824: EMPTY
2825: LIST
2826: LIST
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PPUSH
2832: CALL_OW 69
2836: PUSH
2837: FOR_IN
2838: IFFALSE 2893
// PlaceWeaponTurret ( i , [ us_machine_gun , us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun , us_gatling_gun ] [ rand ( 1 , 7 ) ] ) ;
2840: LD_VAR 0 2
2844: PPUSH
2845: LD_INT 2
2847: PUSH
2848: LD_INT 3
2850: PUSH
2851: LD_INT 4
2853: PUSH
2854: LD_INT 5
2856: PUSH
2857: LD_INT 11
2859: PUSH
2860: LD_INT 3
2862: PUSH
2863: LD_INT 4
2865: PUSH
2866: EMPTY
2867: LIST
2868: LIST
2869: LIST
2870: LIST
2871: LIST
2872: LIST
2873: LIST
2874: PUSH
2875: LD_INT 1
2877: PPUSH
2878: LD_INT 7
2880: PPUSH
2881: CALL_OW 12
2885: ARRAY
2886: PPUSH
2887: CALL_OW 431
2891: GO 2837
2893: POP
2894: POP
// hc_name :=  ;
2895: LD_ADDR_OWVAR 26
2899: PUSH
2900: LD_STRING 
2902: ST_TO_ADDR
// hc_gallery :=  ;
2903: LD_ADDR_OWVAR 33
2907: PUSH
2908: LD_STRING 
2910: ST_TO_ADDR
// for i = 1 to [ 6 , 5 , 5 ] [ Difficulty ] do
2911: LD_ADDR_VAR 0 2
2915: PUSH
2916: DOUBLE
2917: LD_INT 1
2919: DEC
2920: ST_TO_ADDR
2921: LD_INT 6
2923: PUSH
2924: LD_INT 5
2926: PUSH
2927: LD_INT 5
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: PUSH
2935: LD_OWVAR 67
2939: ARRAY
2940: PUSH
2941: FOR_TO
2942: IFFALSE 3000
// begin PrepareSoldier ( 1 , game_skill ) ;
2944: LD_INT 1
2946: PPUSH
2947: LD_EXP 38
2951: PPUSH
2952: CALL_OW 381
// un := CreateHuman ;
2956: LD_ADDR_VAR 0 4
2960: PUSH
2961: CALL_OW 44
2965: ST_TO_ADDR
// filter := filter ^ un ;
2966: LD_ADDR_VAR 0 3
2970: PUSH
2971: LD_VAR 0 3
2975: PUSH
2976: LD_VAR 0 4
2980: ADD
2981: ST_TO_ADDR
// soldiers := soldiers ^ un ;
2982: LD_ADDR_VAR 0 5
2986: PUSH
2987: LD_VAR 0 5
2991: PUSH
2992: LD_VAR 0 4
2996: ADD
2997: ST_TO_ADDR
// end ;
2998: GO 2941
3000: POP
3001: POP
// for i = 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3002: LD_ADDR_VAR 0 2
3006: PUSH
3007: DOUBLE
3008: LD_INT 1
3010: DEC
3011: ST_TO_ADDR
3012: LD_INT 3
3014: PUSH
3015: LD_INT 2
3017: PUSH
3018: LD_INT 2
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: LIST
3025: PUSH
3026: LD_OWVAR 67
3030: ARRAY
3031: PUSH
3032: FOR_TO
3033: IFFALSE 3087
// begin PrepareEngineer ( 0 , game_skill ) ;
3035: LD_INT 0
3037: PPUSH
3038: LD_EXP 38
3042: PPUSH
3043: CALL_OW 382
// un := CreateHuman ;
3047: LD_ADDR_VAR 0 4
3051: PUSH
3052: CALL_OW 44
3056: ST_TO_ADDR
// filter := filter ^ un ;
3057: LD_ADDR_VAR 0 3
3061: PUSH
3062: LD_VAR 0 3
3066: PUSH
3067: LD_VAR 0 4
3071: ADD
3072: ST_TO_ADDR
// PlaceHumanInUnit ( un , BetaB ) ;
3073: LD_VAR 0 4
3077: PPUSH
3078: LD_INT 3
3080: PPUSH
3081: CALL_OW 52
// end ;
3085: GO 3032
3087: POP
3088: POP
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
3089: LD_ADDR_VAR 0 2
3093: PUSH
3094: DOUBLE
3095: LD_INT 1
3097: DEC
3098: ST_TO_ADDR
3099: LD_INT 4
3101: PUSH
3102: LD_INT 3
3104: PUSH
3105: LD_INT 3
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: LIST
3112: PUSH
3113: LD_OWVAR 67
3117: ARRAY
3118: PUSH
3119: FOR_TO
3120: IFFALSE 3174
// begin PrepareMechanic ( 0 , game_skill ) ;
3122: LD_INT 0
3124: PPUSH
3125: LD_EXP 38
3129: PPUSH
3130: CALL_OW 383
// un := CreateHuman ;
3134: LD_ADDR_VAR 0 4
3138: PUSH
3139: CALL_OW 44
3143: ST_TO_ADDR
// filter := filter ^ un ;
3144: LD_ADDR_VAR 0 3
3148: PUSH
3149: LD_VAR 0 3
3153: PUSH
3154: LD_VAR 0 4
3158: ADD
3159: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmFac ) ;
3160: LD_VAR 0 4
3164: PPUSH
3165: LD_INT 8
3167: PPUSH
3168: CALL_OW 52
// end ;
3172: GO 3119
3174: POP
3175: POP
// for i = 1 to 2 do
3176: LD_ADDR_VAR 0 2
3180: PUSH
3181: DOUBLE
3182: LD_INT 1
3184: DEC
3185: ST_TO_ADDR
3186: LD_INT 2
3188: PUSH
3189: FOR_TO
3190: IFFALSE 3244
// begin PrepareScientist ( 0 , game_skill ) ;
3192: LD_INT 0
3194: PPUSH
3195: LD_EXP 38
3199: PPUSH
3200: CALL_OW 384
// un := CreateHuman ;
3204: LD_ADDR_VAR 0 4
3208: PUSH
3209: CALL_OW 44
3213: ST_TO_ADDR
// filter := filter ^ un ;
3214: LD_ADDR_VAR 0 3
3218: PUSH
3219: LD_VAR 0 3
3223: PUSH
3224: LD_VAR 0 4
3228: ADD
3229: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmLab ) ;
3230: LD_VAR 0 4
3234: PPUSH
3235: LD_INT 14
3237: PPUSH
3238: CALL_OW 52
// end ;
3242: GO 3189
3244: POP
3245: POP
// for i = 1 to soldiers do
3246: LD_ADDR_VAR 0 2
3250: PUSH
3251: DOUBLE
3252: LD_INT 1
3254: DEC
3255: ST_TO_ADDR
3256: LD_VAR 0 5
3260: PUSH
3261: FOR_TO
3262: IFFALSE 3287
// PlaceUnitArea ( soldiers [ i ] , spawn_area , false ) ;
3264: LD_VAR 0 5
3268: PUSH
3269: LD_VAR 0 2
3273: ARRAY
3274: PPUSH
3275: LD_INT 1
3277: PPUSH
3278: LD_INT 0
3280: PPUSH
3281: CALL_OW 49
3285: GO 3261
3287: POP
3288: POP
// PlaceUnitXY ( Brighton , 51 , 43 , false ) ;
3289: LD_EXP 8
3293: PPUSH
3294: LD_INT 51
3296: PPUSH
3297: LD_INT 43
3299: PPUSH
3300: LD_INT 0
3302: PPUSH
3303: CALL_OW 48
// PlaceUnitXY ( Palmer , 55 , 58 , false ) ;
3307: LD_EXP 9
3311: PPUSH
3312: LD_INT 55
3314: PPUSH
3315: LD_INT 58
3317: PPUSH
3318: LD_INT 0
3320: PPUSH
3321: CALL_OW 48
// PlaceUnitXY ( Megan , 39 , 36 , false ) ;
3325: LD_EXP 10
3329: PPUSH
3330: LD_INT 39
3332: PPUSH
3333: LD_INT 36
3335: PPUSH
3336: LD_INT 0
3338: PPUSH
3339: CALL_OW 48
// BetaSquad := filter diff 0 ;
3343: LD_ADDR_EXP 11
3347: PUSH
3348: LD_VAR 0 3
3352: PUSH
3353: LD_INT 0
3355: DIFF
3356: ST_TO_ADDR
// end ;
3357: LD_VAR 0 1
3361: RET
// export Yashin , Popov , Gaydar , Sevi ; export RUArmada ; export function PrepareRUArmada ; var i , vehicle , soldiers , un , vehs ; begin
3362: LD_INT 0
3364: PPUSH
3365: PPUSH
3366: PPUSH
3367: PPUSH
3368: PPUSH
3369: PPUSH
// uc_side := 6 ;
3370: LD_ADDR_OWVAR 20
3374: PUSH
3375: LD_INT 6
3377: ST_TO_ADDR
// uc_nation := nation_russian ;
3378: LD_ADDR_OWVAR 21
3382: PUSH
3383: LD_INT 3
3385: ST_TO_ADDR
// soldiers := [ ] ;
3386: LD_ADDR_VAR 0 4
3390: PUSH
3391: EMPTY
3392: ST_TO_ADDR
// vehs := [ ] ;
3393: LD_ADDR_VAR 0 6
3397: PUSH
3398: EMPTY
3399: ST_TO_ADDR
// RUArmada := [ ] ;
3400: LD_ADDR_EXP 16
3404: PUSH
3405: EMPTY
3406: ST_TO_ADDR
// Yashin := NewCharacter ( Yashin ) ;
3407: LD_ADDR_EXP 12
3411: PUSH
3412: LD_STRING Yashin
3414: PPUSH
3415: CALL_OW 25
3419: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
3420: LD_ADDR_EXP 13
3424: PUSH
3425: LD_STRING Popov
3427: PPUSH
3428: CALL_OW 25
3432: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
3433: LD_ADDR_EXP 14
3437: PUSH
3438: LD_STRING Gaydar
3440: PPUSH
3441: CALL_OW 25
3445: ST_TO_ADDR
// Sevi := NewCharacter ( Vsevolod ) ;
3446: LD_ADDR_EXP 15
3450: PUSH
3451: LD_STRING Vsevolod
3453: PPUSH
3454: CALL_OW 25
3458: ST_TO_ADDR
// for i = 1 to 16 do
3459: LD_ADDR_VAR 0 2
3463: PUSH
3464: DOUBLE
3465: LD_INT 1
3467: DEC
3468: ST_TO_ADDR
3469: LD_INT 16
3471: PUSH
3472: FOR_TO
3473: IFFALSE 3515
// begin PrepareSoldier ( 0 , game_eskill ) ;
3475: LD_INT 0
3477: PPUSH
3478: LD_EXP 39
3482: PPUSH
3483: CALL_OW 381
// un := CreateHuman ;
3487: LD_ADDR_VAR 0 5
3491: PUSH
3492: CALL_OW 44
3496: ST_TO_ADDR
// soldiers := soldiers ^ un ;
3497: LD_ADDR_VAR 0 4
3501: PUSH
3502: LD_VAR 0 4
3506: PUSH
3507: LD_VAR 0 5
3511: ADD
3512: ST_TO_ADDR
// end ;
3513: GO 3472
3515: POP
3516: POP
// soldiers := Yashin ^ Popov ^ Gaydar ^ Sevi ^ soldiers ;
3517: LD_ADDR_VAR 0 4
3521: PUSH
3522: LD_EXP 12
3526: PUSH
3527: LD_EXP 13
3531: ADD
3532: PUSH
3533: LD_EXP 14
3537: ADD
3538: PUSH
3539: LD_EXP 15
3543: ADD
3544: PUSH
3545: LD_VAR 0 4
3549: ADD
3550: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_heavy_gun , 100 ) ;
3551: LD_INT 24
3553: PPUSH
3554: LD_INT 3
3556: PPUSH
3557: LD_INT 1
3559: PPUSH
3560: LD_INT 46
3562: PPUSH
3563: LD_INT 100
3565: PPUSH
3566: CALL 18060 0 5
// for i = 1 to 8 do
3570: LD_ADDR_VAR 0 2
3574: PUSH
3575: DOUBLE
3576: LD_INT 1
3578: DEC
3579: ST_TO_ADDR
3580: LD_INT 8
3582: PUSH
3583: FOR_TO
3584: IFFALSE 3667
// begin vehicle := CreateVehicle ;
3586: LD_ADDR_VAR 0 3
3590: PUSH
3591: CALL_OW 45
3595: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3596: LD_VAR 0 4
3600: PUSH
3601: LD_INT 1
3603: ARRAY
3604: PPUSH
3605: LD_VAR 0 3
3609: PPUSH
3610: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3614: LD_ADDR_VAR 0 4
3618: PUSH
3619: LD_VAR 0 4
3623: PUSH
3624: LD_VAR 0 4
3628: PUSH
3629: LD_INT 1
3631: ARRAY
3632: DIFF
3633: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3634: LD_VAR 0 3
3638: PPUSH
3639: LD_INT 5
3641: PPUSH
3642: LD_INT 0
3644: PPUSH
3645: CALL_OW 49
// vehs := vehs ^ vehicle ;
3649: LD_ADDR_VAR 0 6
3653: PUSH
3654: LD_VAR 0 6
3658: PUSH
3659: LD_VAR 0 3
3663: ADD
3664: ST_TO_ADDR
// end ;
3665: GO 3583
3667: POP
3668: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
3669: LD_INT 24
3671: PPUSH
3672: LD_INT 3
3674: PPUSH
3675: LD_INT 1
3677: PPUSH
3678: LD_INT 43
3680: PPUSH
3681: LD_INT 100
3683: PPUSH
3684: CALL 18060 0 5
// for i = 1 to 8 do
3688: LD_ADDR_VAR 0 2
3692: PUSH
3693: DOUBLE
3694: LD_INT 1
3696: DEC
3697: ST_TO_ADDR
3698: LD_INT 8
3700: PUSH
3701: FOR_TO
3702: IFFALSE 3785
// begin vehicle := CreateVehicle ;
3704: LD_ADDR_VAR 0 3
3708: PUSH
3709: CALL_OW 45
3713: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3714: LD_VAR 0 4
3718: PUSH
3719: LD_INT 1
3721: ARRAY
3722: PPUSH
3723: LD_VAR 0 3
3727: PPUSH
3728: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3732: LD_ADDR_VAR 0 4
3736: PUSH
3737: LD_VAR 0 4
3741: PUSH
3742: LD_VAR 0 4
3746: PUSH
3747: LD_INT 1
3749: ARRAY
3750: DIFF
3751: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3752: LD_VAR 0 3
3756: PPUSH
3757: LD_INT 5
3759: PPUSH
3760: LD_INT 0
3762: PPUSH
3763: CALL_OW 49
// vehs := vehs ^ vehicle ;
3767: LD_ADDR_VAR 0 6
3771: PUSH
3772: LD_VAR 0 6
3776: PUSH
3777: LD_VAR 0 3
3781: ADD
3782: ST_TO_ADDR
// end ;
3783: GO 3701
3785: POP
3786: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gun , 100 ) ;
3787: LD_INT 22
3789: PPUSH
3790: LD_INT 3
3792: PPUSH
3793: LD_INT 1
3795: PPUSH
3796: LD_INT 44
3798: PPUSH
3799: LD_INT 100
3801: PPUSH
3802: CALL 18060 0 5
// for i = 1 to 4 do
3806: LD_ADDR_VAR 0 2
3810: PUSH
3811: DOUBLE
3812: LD_INT 1
3814: DEC
3815: ST_TO_ADDR
3816: LD_INT 4
3818: PUSH
3819: FOR_TO
3820: IFFALSE 3903
// begin vehicle := CreateVehicle ;
3822: LD_ADDR_VAR 0 3
3826: PUSH
3827: CALL_OW 45
3831: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3832: LD_VAR 0 4
3836: PUSH
3837: LD_INT 1
3839: ARRAY
3840: PPUSH
3841: LD_VAR 0 3
3845: PPUSH
3846: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3850: LD_ADDR_VAR 0 4
3854: PUSH
3855: LD_VAR 0 4
3859: PUSH
3860: LD_VAR 0 4
3864: PUSH
3865: LD_INT 1
3867: ARRAY
3868: DIFF
3869: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3870: LD_VAR 0 3
3874: PPUSH
3875: LD_INT 5
3877: PPUSH
3878: LD_INT 0
3880: PPUSH
3881: CALL_OW 49
// vehs := vehs ^ vehicle ;
3885: LD_ADDR_VAR 0 6
3889: PUSH
3890: LD_VAR 0 6
3894: PUSH
3895: LD_VAR 0 3
3899: ADD
3900: ST_TO_ADDR
// end ;
3901: GO 3819
3903: POP
3904: POP
// RUArmada := vehs ;
3905: LD_ADDR_EXP 16
3909: PUSH
3910: LD_VAR 0 6
3914: ST_TO_ADDR
// SetMark ( [ IsInUnit ( Yashin ) , IsInUnit ( Popov ) , IsInUnit ( Gaydar ) , IsInUnit ( Sevi ) ] , - 6 ) ;
3915: LD_EXP 12
3919: PPUSH
3920: CALL_OW 310
3924: PUSH
3925: LD_EXP 13
3929: PPUSH
3930: CALL_OW 310
3934: PUSH
3935: LD_EXP 14
3939: PPUSH
3940: CALL_OW 310
3944: PUSH
3945: LD_EXP 15
3949: PPUSH
3950: CALL_OW 310
3954: PUSH
3955: EMPTY
3956: LIST
3957: LIST
3958: LIST
3959: LIST
3960: PPUSH
3961: LD_INT 6
3963: NEG
3964: PPUSH
3965: CALL_OW 242
// end ;
3969: LD_VAR 0 1
3973: RET
// export Bulldozers ; export function PrepareRUBulldozers ; var i , vehicle ; begin
3974: LD_INT 0
3976: PPUSH
3977: PPUSH
3978: PPUSH
// uc_side := 6 ;
3979: LD_ADDR_OWVAR 20
3983: PUSH
3984: LD_INT 6
3986: ST_TO_ADDR
// uc_nation := nation_russian ;
3987: LD_ADDR_OWVAR 21
3991: PUSH
3992: LD_INT 3
3994: ST_TO_ADDR
// Bulldozers := [ ] ;
3995: LD_ADDR_EXP 17
3999: PUSH
4000: EMPTY
4001: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
4002: LD_INT 24
4004: PPUSH
4005: LD_INT 3
4007: PPUSH
4008: LD_INT 3
4010: PPUSH
4011: LD_INT 53
4013: PPUSH
4014: LD_INT 100
4016: PPUSH
4017: CALL 18060 0 5
// for i = 1 to 2 do
4021: LD_ADDR_VAR 0 2
4025: PUSH
4026: DOUBLE
4027: LD_INT 1
4029: DEC
4030: ST_TO_ADDR
4031: LD_INT 2
4033: PUSH
4034: FOR_TO
4035: IFFALSE 4080
// begin vehicle := CreateVehicle ;
4037: LD_ADDR_VAR 0 3
4041: PUSH
4042: CALL_OW 45
4046: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4047: LD_VAR 0 3
4051: PPUSH
4052: LD_INT 5
4054: PPUSH
4055: LD_INT 0
4057: PPUSH
4058: CALL_OW 49
// Bulldozers := Bulldozers ^ vehicle ;
4062: LD_ADDR_EXP 17
4066: PUSH
4067: LD_EXP 17
4071: PUSH
4072: LD_VAR 0 3
4076: ADD
4077: ST_TO_ADDR
// end ;
4078: GO 4034
4080: POP
4081: POP
// end ;
4082: LD_VAR 0 1
4086: RET
// export Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ; export function PrepareRUBase ; var i , filter , un ; begin
4087: LD_INT 0
4089: PPUSH
4090: PPUSH
4091: PPUSH
4092: PPUSH
// uc_side := 3 ;
4093: LD_ADDR_OWVAR 20
4097: PUSH
4098: LD_INT 3
4100: ST_TO_ADDR
// uc_nation := nation_russian ;
4101: LD_ADDR_OWVAR 21
4105: PUSH
4106: LD_INT 3
4108: ST_TO_ADDR
// hc_name :=  ;
4109: LD_ADDR_OWVAR 26
4113: PUSH
4114: LD_STRING 
4116: ST_TO_ADDR
// hc_gallery :=  ;
4117: LD_ADDR_OWVAR 33
4121: PUSH
4122: LD_STRING 
4124: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
4125: LD_ADDR_EXP 18
4129: PUSH
4130: LD_STRING Burlak
4132: PPUSH
4133: CALL_OW 25
4137: ST_TO_ADDR
// Gleb := NewCharacter ( Gleb ) ;
4138: LD_ADDR_EXP 19
4142: PUSH
4143: LD_STRING Gleb
4145: PPUSH
4146: CALL_OW 25
4150: ST_TO_ADDR
// Furmanov := NewCharacter ( Furmanov ) ;
4151: LD_ADDR_EXP 20
4155: PUSH
4156: LD_STRING Furmanov
4158: PPUSH
4159: CALL_OW 25
4163: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
4164: LD_ADDR_EXP 21
4168: PUSH
4169: LD_STRING Titov
4171: PPUSH
4172: CALL_OW 25
4176: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
4177: LD_ADDR_EXP 22
4181: PUSH
4182: LD_STRING Scholtze
4184: PPUSH
4185: CALL_OW 25
4189: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
4190: LD_ADDR_EXP 23
4194: PUSH
4195: LD_STRING Dolgov
4197: PPUSH
4198: CALL_OW 25
4202: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
4203: LD_ADDR_EXP 24
4207: PUSH
4208: LD_STRING Kapitsova
4210: PPUSH
4211: CALL_OW 25
4215: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
4216: LD_ADDR_EXP 25
4220: PUSH
4221: LD_STRING Karamazov
4223: PPUSH
4224: CALL_OW 25
4228: ST_TO_ADDR
// Kirlenkova := NewCharacter ( Kirlenkova ) ;
4229: LD_ADDR_EXP 26
4233: PUSH
4234: LD_STRING Kirlenkova
4236: PPUSH
4237: CALL_OW 25
4241: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
4242: LD_ADDR_EXP 27
4246: PUSH
4247: LD_STRING Kovalyuk
4249: PPUSH
4250: CALL_OW 25
4254: ST_TO_ADDR
// Kozlov := NewCharacter ( Kozlov ) ;
4255: LD_ADDR_EXP 28
4259: PUSH
4260: LD_STRING Kozlov
4262: PPUSH
4263: CALL_OW 25
4267: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
4268: LD_ADDR_EXP 29
4272: PUSH
4273: LD_STRING Kuzmov
4275: PPUSH
4276: CALL_OW 25
4280: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
4281: LD_ADDR_EXP 30
4285: PUSH
4286: LD_STRING Lipshchin
4288: PPUSH
4289: CALL_OW 25
4293: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
4294: LD_ADDR_EXP 31
4298: PUSH
4299: LD_STRING Oblukov
4301: PPUSH
4302: CALL_OW 25
4306: ST_TO_ADDR
// Xavier2 := NewCharacter ( Xavier2 ) ;
4307: LD_ADDR_EXP 32
4311: PUSH
4312: LD_STRING Xavier2
4314: PPUSH
4315: CALL_OW 25
4319: ST_TO_ADDR
// Gnyevko := NewCharacter ( Gnyevko ) ;
4320: LD_ADDR_EXP 33
4324: PUSH
4325: LD_STRING Gnyevko
4327: PPUSH
4328: CALL_OW 25
4332: ST_TO_ADDR
// Belkov := NewCharacter ( Belkov ) ;
4333: LD_ADDR_EXP 34
4337: PUSH
4338: LD_STRING Belkov
4340: PPUSH
4341: CALL_OW 25
4345: ST_TO_ADDR
// filter := [ Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ] ;
4346: LD_ADDR_VAR 0 3
4350: PUSH
4351: LD_EXP 18
4355: PUSH
4356: LD_EXP 19
4360: PUSH
4361: LD_EXP 20
4365: PUSH
4366: LD_EXP 21
4370: PUSH
4371: LD_EXP 22
4375: PUSH
4376: LD_EXP 23
4380: PUSH
4381: LD_EXP 24
4385: PUSH
4386: LD_EXP 25
4390: PUSH
4391: LD_EXP 26
4395: PUSH
4396: LD_EXP 27
4400: PUSH
4401: LD_EXP 28
4405: PUSH
4406: LD_EXP 29
4410: PUSH
4411: LD_EXP 30
4415: PUSH
4416: LD_EXP 31
4420: PUSH
4421: LD_EXP 32
4425: PUSH
4426: LD_EXP 33
4430: PUSH
4431: LD_EXP 34
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: LIST
4453: LIST
4454: ST_TO_ADDR
// for i = 1 to filter do
4455: LD_ADDR_VAR 0 2
4459: PUSH
4460: DOUBLE
4461: LD_INT 1
4463: DEC
4464: ST_TO_ADDR
4465: LD_VAR 0 3
4469: PUSH
4470: FOR_TO
4471: IFFALSE 4496
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4473: LD_VAR 0 3
4477: PUSH
4478: LD_VAR 0 2
4482: ARRAY
4483: PPUSH
4484: LD_INT 6
4486: PPUSH
4487: LD_INT 0
4489: PPUSH
4490: CALL_OW 49
4494: GO 4470
4496: POP
4497: POP
// end ;
4498: LD_VAR 0 1
4502: RET
// export RU_SecondPersonnel ; export function PrepareRUBase_v2 ; var i , filter , un ; begin
4503: LD_INT 0
4505: PPUSH
4506: PPUSH
4507: PPUSH
4508: PPUSH
// uc_side := 3 ;
4509: LD_ADDR_OWVAR 20
4513: PUSH
4514: LD_INT 3
4516: ST_TO_ADDR
// uc_nation := nation_russian ;
4517: LD_ADDR_OWVAR 21
4521: PUSH
4522: LD_INT 3
4524: ST_TO_ADDR
// hc_name :=  ;
4525: LD_ADDR_OWVAR 26
4529: PUSH
4530: LD_STRING 
4532: ST_TO_ADDR
// hc_gallery :=  ;
4533: LD_ADDR_OWVAR 33
4537: PUSH
4538: LD_STRING 
4540: ST_TO_ADDR
// for i = 1 to 8 do
4541: LD_ADDR_VAR 0 2
4545: PUSH
4546: DOUBLE
4547: LD_INT 1
4549: DEC
4550: ST_TO_ADDR
4551: LD_INT 8
4553: PUSH
4554: FOR_TO
4555: IFFALSE 4597
// begin PrepareSoldier ( 0 , game_eskill ) ;
4557: LD_INT 0
4559: PPUSH
4560: LD_EXP 39
4564: PPUSH
4565: CALL_OW 381
// un := CreateHuman ;
4569: LD_ADDR_VAR 0 4
4573: PUSH
4574: CALL_OW 44
4578: ST_TO_ADDR
// filter := filter ^ un ;
4579: LD_ADDR_VAR 0 3
4583: PUSH
4584: LD_VAR 0 3
4588: PUSH
4589: LD_VAR 0 4
4593: ADD
4594: ST_TO_ADDR
// end ;
4595: GO 4554
4597: POP
4598: POP
// for i = 1 to 4 do
4599: LD_ADDR_VAR 0 2
4603: PUSH
4604: DOUBLE
4605: LD_INT 1
4607: DEC
4608: ST_TO_ADDR
4609: LD_INT 4
4611: PUSH
4612: FOR_TO
4613: IFFALSE 4655
// begin PrepareEngineer ( 0 , game_eskill ) ;
4615: LD_INT 0
4617: PPUSH
4618: LD_EXP 39
4622: PPUSH
4623: CALL_OW 382
// un := CreateHuman ;
4627: LD_ADDR_VAR 0 4
4631: PUSH
4632: CALL_OW 44
4636: ST_TO_ADDR
// filter := filter ^ un ;
4637: LD_ADDR_VAR 0 3
4641: PUSH
4642: LD_VAR 0 3
4646: PUSH
4647: LD_VAR 0 4
4651: ADD
4652: ST_TO_ADDR
// end ;
4653: GO 4612
4655: POP
4656: POP
// for i = 1 to 6 do
4657: LD_ADDR_VAR 0 2
4661: PUSH
4662: DOUBLE
4663: LD_INT 1
4665: DEC
4666: ST_TO_ADDR
4667: LD_INT 6
4669: PUSH
4670: FOR_TO
4671: IFFALSE 4713
// begin PrepareMechanic ( 0 , game_eskill ) ;
4673: LD_INT 0
4675: PPUSH
4676: LD_EXP 39
4680: PPUSH
4681: CALL_OW 383
// un := CreateHuman ;
4685: LD_ADDR_VAR 0 4
4689: PUSH
4690: CALL_OW 44
4694: ST_TO_ADDR
// filter := filter ^ un ;
4695: LD_ADDR_VAR 0 3
4699: PUSH
4700: LD_VAR 0 3
4704: PUSH
4705: LD_VAR 0 4
4709: ADD
4710: ST_TO_ADDR
// end ;
4711: GO 4670
4713: POP
4714: POP
// for i = 1 to 4 do
4715: LD_ADDR_VAR 0 2
4719: PUSH
4720: DOUBLE
4721: LD_INT 1
4723: DEC
4724: ST_TO_ADDR
4725: LD_INT 4
4727: PUSH
4728: FOR_TO
4729: IFFALSE 4771
// begin PrepareScientist ( 0 , game_eskill ) ;
4731: LD_INT 0
4733: PPUSH
4734: LD_EXP 39
4738: PPUSH
4739: CALL_OW 384
// un := CreateHuman ;
4743: LD_ADDR_VAR 0 4
4747: PUSH
4748: CALL_OW 44
4752: ST_TO_ADDR
// filter := filter ^ un ;
4753: LD_ADDR_VAR 0 3
4757: PUSH
4758: LD_VAR 0 3
4762: PUSH
4763: LD_VAR 0 4
4767: ADD
4768: ST_TO_ADDR
// end ;
4769: GO 4728
4771: POP
4772: POP
// for i = 1 to filter do
4773: LD_ADDR_VAR 0 2
4777: PUSH
4778: DOUBLE
4779: LD_INT 1
4781: DEC
4782: ST_TO_ADDR
4783: LD_VAR 0 3
4787: PUSH
4788: FOR_TO
4789: IFFALSE 4814
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4791: LD_VAR 0 3
4795: PUSH
4796: LD_VAR 0 2
4800: ARRAY
4801: PPUSH
4802: LD_INT 6
4804: PPUSH
4805: LD_INT 0
4807: PPUSH
4808: CALL_OW 49
4812: GO 4788
4814: POP
4815: POP
// RU_SecondPersonnel := filter ;
4816: LD_ADDR_EXP 35
4820: PUSH
4821: LD_VAR 0 3
4825: ST_TO_ADDR
// end ;
4826: LD_VAR 0 1
4830: RET
// export JMM ; export function JMMReinforcement ; var i , soldiers , un , vehs , vehicle , mechs ; begin
4831: LD_INT 0
4833: PPUSH
4834: PPUSH
4835: PPUSH
4836: PPUSH
4837: PPUSH
4838: PPUSH
4839: PPUSH
// uc_side := 1 ;
4840: LD_ADDR_OWVAR 20
4844: PUSH
4845: LD_INT 1
4847: ST_TO_ADDR
// uc_nation := nation_american ;
4848: LD_ADDR_OWVAR 21
4852: PUSH
4853: LD_INT 1
4855: ST_TO_ADDR
// JMM := NewCharacter ( JMM ) ;
4856: LD_ADDR_EXP 36
4860: PUSH
4861: LD_STRING JMM
4863: PPUSH
4864: CALL_OW 25
4868: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
4869: LD_EXP 36
4873: PPUSH
4874: LD_INT 1
4876: PPUSH
4877: CALL_OW 233
// PlaceUnitArea ( JMM , JMMArrivalArea , false ) ;
4881: LD_EXP 36
4885: PPUSH
4886: LD_INT 7
4888: PPUSH
4889: LD_INT 0
4891: PPUSH
4892: CALL_OW 49
// mechs := [ ] ;
4896: LD_ADDR_VAR 0 7
4900: PUSH
4901: EMPTY
4902: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
4903: LD_ADDR_VAR 0 2
4907: PUSH
4908: DOUBLE
4909: LD_INT 1
4911: DEC
4912: ST_TO_ADDR
4913: LD_INT 4
4915: PUSH
4916: LD_INT 3
4918: PUSH
4919: LD_INT 3
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: LIST
4926: PUSH
4927: LD_OWVAR 67
4931: ARRAY
4932: PUSH
4933: FOR_TO
4934: IFFALSE 4995
// begin PrepareSoldier ( 0 , game_skill + 1 ) ;
4936: LD_INT 0
4938: PPUSH
4939: LD_EXP 38
4943: PUSH
4944: LD_INT 1
4946: PLUS
4947: PPUSH
4948: CALL_OW 381
// un := CreateHuman ;
4952: LD_ADDR_VAR 0 4
4956: PUSH
4957: CALL_OW 44
4961: ST_TO_ADDR
// soldiers := soldiers ^ un ;
4962: LD_ADDR_VAR 0 3
4966: PUSH
4967: LD_VAR 0 3
4971: PUSH
4972: LD_VAR 0 4
4976: ADD
4977: ST_TO_ADDR
// PlaceUnitArea ( un , JMMArrivalArea , false ) ;
4978: LD_VAR 0 4
4982: PPUSH
4983: LD_INT 7
4985: PPUSH
4986: LD_INT 0
4988: PPUSH
4989: CALL_OW 49
// end ;
4993: GO 4933
4995: POP
4996: POP
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
4997: LD_ADDR_VAR 0 2
5001: PUSH
5002: DOUBLE
5003: LD_INT 1
5005: DEC
5006: ST_TO_ADDR
5007: LD_INT 7
5009: PUSH
5010: LD_INT 6
5012: PUSH
5013: LD_INT 4
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: LIST
5020: PUSH
5021: LD_OWVAR 67
5025: ARRAY
5026: PUSH
5027: FOR_TO
5028: IFFALSE 5074
// begin PrepareMechanic ( 0 , game_skill + 1 ) ;
5030: LD_INT 0
5032: PPUSH
5033: LD_EXP 38
5037: PUSH
5038: LD_INT 1
5040: PLUS
5041: PPUSH
5042: CALL_OW 383
// un := CreateHuman ;
5046: LD_ADDR_VAR 0 4
5050: PUSH
5051: CALL_OW 44
5055: ST_TO_ADDR
// mechs := mechs ^ un ;
5056: LD_ADDR_VAR 0 7
5060: PUSH
5061: LD_VAR 0 7
5065: PUSH
5066: LD_VAR 0 4
5070: ADD
5071: ST_TO_ADDR
// end ;
5072: GO 5027
5074: POP
5075: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_double_gun , 100 ) ;
5076: LD_INT 3
5078: PPUSH
5079: LD_INT 3
5081: PPUSH
5082: LD_INT 1
5084: PPUSH
5085: LD_INT 5
5087: PPUSH
5088: LD_INT 100
5090: PPUSH
5091: CALL 18060 0 5
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
5095: LD_ADDR_VAR 0 2
5099: PUSH
5100: DOUBLE
5101: LD_INT 1
5103: DEC
5104: ST_TO_ADDR
5105: LD_INT 7
5107: PUSH
5108: LD_INT 6
5110: PUSH
5111: LD_INT 4
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: LIST
5118: PUSH
5119: LD_OWVAR 67
5123: ARRAY
5124: PUSH
5125: FOR_TO
5126: IFFALSE 5221
// begin vehicle := CreateVehicle ;
5128: LD_ADDR_VAR 0 6
5132: PUSH
5133: CALL_OW 45
5137: ST_TO_ADDR
// PlaceHumanInUnit ( mechs [ 1 ] , vehicle ) ;
5138: LD_VAR 0 7
5142: PUSH
5143: LD_INT 1
5145: ARRAY
5146: PPUSH
5147: LD_VAR 0 6
5151: PPUSH
5152: CALL_OW 52
// mechs := mechs diff mechs [ 1 ] ;
5156: LD_ADDR_VAR 0 7
5160: PUSH
5161: LD_VAR 0 7
5165: PUSH
5166: LD_VAR 0 7
5170: PUSH
5171: LD_INT 1
5173: ARRAY
5174: DIFF
5175: ST_TO_ADDR
// SetDir ( vehicle , 1 ) ;
5176: LD_VAR 0 6
5180: PPUSH
5181: LD_INT 1
5183: PPUSH
5184: CALL_OW 233
// PlaceUnitArea ( vehicle , JMMArrivalArea , false ) ;
5188: LD_VAR 0 6
5192: PPUSH
5193: LD_INT 7
5195: PPUSH
5196: LD_INT 0
5198: PPUSH
5199: CALL_OW 49
// vehs := vehs ^ vehicle ;
5203: LD_ADDR_VAR 0 5
5207: PUSH
5208: LD_VAR 0 5
5212: PUSH
5213: LD_VAR 0 6
5217: ADD
5218: ST_TO_ADDR
// end ;
5219: GO 5125
5221: POP
5222: POP
// end ; end_of_file
5223: LD_VAR 0 1
5227: RET
// export game_diff ; export game_skill , game_eskill ; export jmmArrival , ruArrival ; export function GameType ; begin
5228: LD_INT 0
5230: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
5231: LD_ADDR_OWVAR 67
5235: PUSH
5236: LD_INT 0
5238: PPUSH
5239: CALL_OW 426
5243: ST_TO_ADDR
// game_diff := Difficulty ;
5244: LD_ADDR_EXP 37
5248: PUSH
5249: LD_OWVAR 67
5253: ST_TO_ADDR
// game_skill := [ 7 , 6 , 6 ] [ game_diff ] ;
5254: LD_ADDR_EXP 38
5258: PUSH
5259: LD_INT 7
5261: PUSH
5262: LD_INT 6
5264: PUSH
5265: LD_INT 6
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: LIST
5272: PUSH
5273: LD_EXP 37
5277: ARRAY
5278: ST_TO_ADDR
// game_eskill := [ 6 , 7 , 8 ] [ game_diff ] ;
5279: LD_ADDR_EXP 39
5283: PUSH
5284: LD_INT 6
5286: PUSH
5287: LD_INT 7
5289: PUSH
5290: LD_INT 8
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: LIST
5297: PUSH
5298: LD_EXP 37
5302: ARRAY
5303: ST_TO_ADDR
// ruArrival := [ 3 3$00 , 2 2$30 , 2 2$00 ] [ game_diff ] ;
5304: LD_ADDR_EXP 41
5308: PUSH
5309: LD_INT 6300
5311: PUSH
5312: LD_INT 5250
5314: PUSH
5315: LD_INT 4200
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: LIST
5322: PUSH
5323: LD_EXP 37
5327: ARRAY
5328: ST_TO_ADDR
// jmmArrival := [ 35 35$00 , 45 45$00 , 55 55$00 ] [ game_diff ] ;
5329: LD_ADDR_EXP 40
5333: PUSH
5334: LD_INT 73500
5336: PUSH
5337: LD_INT 94500
5339: PUSH
5340: LD_INT 115500
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: LIST
5347: PUSH
5348: LD_EXP 37
5352: ARRAY
5353: ST_TO_ADDR
// end ; end_of_file
5354: LD_VAR 0 1
5358: RET
// export function CustomEvent ( event ) ; begin
5359: LD_INT 0
5361: PPUSH
// end ;
5362: LD_VAR 0 2
5366: RET
// export function CustomInitMacro ( ) ; begin
5367: LD_INT 0
5369: PPUSH
// MC_SetScanArea ( 1 , RU_Base_Area ) ;
5370: LD_INT 1
5372: PPUSH
5373: LD_INT 3
5375: PPUSH
5376: CALL 79007 0 2
// MC_SetParkingArea ( 1 , RU_Base_Parking ) ;
5380: LD_INT 1
5382: PPUSH
5383: LD_INT 4
5385: PPUSH
5386: CALL 78951 0 2
// MC_SetDepositsXY ( 1 , [ [ 136 , 130 , 0 ] , [ 145 , 123 , 0 ] , ] ) ;
5390: LD_INT 1
5392: PPUSH
5393: LD_INT 136
5395: PUSH
5396: LD_INT 130
5398: PUSH
5399: LD_INT 0
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: LIST
5406: PUSH
5407: LD_INT 145
5409: PUSH
5410: LD_INT 123
5412: PUSH
5413: LD_INT 0
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: LIST
5420: PUSH
5421: EMPTY
5422: LIST
5423: LIST
5424: PPUSH
5425: CALL 78010 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5429: LD_INT 1
5431: PPUSH
5432: LD_INT 43
5434: PUSH
5435: LD_INT 46
5437: PUSH
5438: LD_INT 45
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: LIST
5445: PPUSH
5446: CALL 78839 0 2
// MC_SetCratesArea ( 1 , RU_Base_Area ) ;
5450: LD_INT 1
5452: PPUSH
5453: LD_INT 3
5455: PPUSH
5456: CALL 78521 0 2
// MC_SetTame ( 1 , RU_Base_Area ) ;
5460: LD_INT 1
5462: PPUSH
5463: LD_INT 3
5465: PPUSH
5466: CALL 78252 0 2
// MC_SetDefenderLimit ( 1 , 8 ) ;
5470: LD_INT 1
5472: PPUSH
5473: LD_INT 8
5475: PPUSH
5476: CALL 77871 0 2
// MC_SetProduceList ( 1 , [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] ] ) ;
5480: LD_INT 1
5482: PPUSH
5483: LD_INT 22
5485: PUSH
5486: LD_INT 1
5488: PUSH
5489: LD_INT 3
5491: PUSH
5492: LD_INT 43
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: PUSH
5501: LD_INT 22
5503: PUSH
5504: LD_INT 1
5506: PUSH
5507: LD_INT 3
5509: PUSH
5510: LD_INT 44
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: PUSH
5519: LD_INT 22
5521: PUSH
5522: LD_INT 1
5524: PUSH
5525: LD_INT 3
5527: PUSH
5528: LD_INT 45
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: PUSH
5537: LD_INT 24
5539: PUSH
5540: LD_INT 1
5542: PUSH
5543: LD_INT 3
5545: PUSH
5546: LD_INT 43
5548: PUSH
5549: EMPTY
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: PUSH
5555: LD_INT 24
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: LD_INT 3
5563: PUSH
5564: LD_INT 43
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: PUSH
5573: LD_INT 24
5575: PUSH
5576: LD_INT 1
5578: PUSH
5579: LD_INT 3
5581: PUSH
5582: LD_INT 46
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: PUSH
5591: LD_INT 22
5593: PUSH
5594: LD_INT 1
5596: PUSH
5597: LD_INT 3
5599: PUSH
5600: LD_INT 43
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: PUSH
5609: LD_INT 22
5611: PUSH
5612: LD_INT 1
5614: PUSH
5615: LD_INT 3
5617: PUSH
5618: LD_INT 44
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: PPUSH
5637: CALL 77686 0 2
// MC_SetBuildingList ( 1 , [ [ b_depot , 127 , 125 , 5 ] , [ b_lab , 124 , 132 , 0 ] , [ b_oil_mine , 136 , 130 , 1 ] , [ b_armoury , 118 , 114 , 2 ] , [ b_oil_mine , 145 , 123 , 1 ] , [ b_oil_power , 150 , 135 , 1 ] , [ b_oil_power , 140 , 134 , 2 ] , [ b_oil_power , 137 , 121 , 5 ] , [ b_workshop , 155 , 130 , 0 ] , [ b_bunker , 155 , 130 , 0 ] , [ b_bunker , 130 , 114 , 3 ] , [ b_bunker , 142 , 115 , 3 ] , [ b_bunker , 153 , 120 , 3 ] , ] ) ;
5641: LD_INT 1
5643: PPUSH
5644: LD_INT 0
5646: PUSH
5647: LD_INT 127
5649: PUSH
5650: LD_INT 125
5652: PUSH
5653: LD_INT 5
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: LIST
5660: LIST
5661: PUSH
5662: LD_INT 6
5664: PUSH
5665: LD_INT 124
5667: PUSH
5668: LD_INT 132
5670: PUSH
5671: LD_INT 0
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: PUSH
5680: LD_INT 29
5682: PUSH
5683: LD_INT 136
5685: PUSH
5686: LD_INT 130
5688: PUSH
5689: LD_INT 1
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: PUSH
5698: LD_INT 4
5700: PUSH
5701: LD_INT 118
5703: PUSH
5704: LD_INT 114
5706: PUSH
5707: LD_INT 2
5709: PUSH
5710: EMPTY
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: PUSH
5716: LD_INT 29
5718: PUSH
5719: LD_INT 145
5721: PUSH
5722: LD_INT 123
5724: PUSH
5725: LD_INT 1
5727: PUSH
5728: EMPTY
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: PUSH
5734: LD_INT 26
5736: PUSH
5737: LD_INT 150
5739: PUSH
5740: LD_INT 135
5742: PUSH
5743: LD_INT 1
5745: PUSH
5746: EMPTY
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: PUSH
5752: LD_INT 26
5754: PUSH
5755: LD_INT 140
5757: PUSH
5758: LD_INT 134
5760: PUSH
5761: LD_INT 2
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: PUSH
5770: LD_INT 26
5772: PUSH
5773: LD_INT 137
5775: PUSH
5776: LD_INT 121
5778: PUSH
5779: LD_INT 5
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: LIST
5786: LIST
5787: PUSH
5788: LD_INT 2
5790: PUSH
5791: LD_INT 155
5793: PUSH
5794: LD_INT 130
5796: PUSH
5797: LD_INT 0
5799: PUSH
5800: EMPTY
5801: LIST
5802: LIST
5803: LIST
5804: LIST
5805: PUSH
5806: LD_INT 32
5808: PUSH
5809: LD_INT 155
5811: PUSH
5812: LD_INT 130
5814: PUSH
5815: LD_INT 0
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: PUSH
5824: LD_INT 32
5826: PUSH
5827: LD_INT 130
5829: PUSH
5830: LD_INT 114
5832: PUSH
5833: LD_INT 3
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: LIST
5840: LIST
5841: PUSH
5842: LD_INT 32
5844: PUSH
5845: LD_INT 142
5847: PUSH
5848: LD_INT 115
5850: PUSH
5851: LD_INT 3
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: PUSH
5860: LD_INT 32
5862: PUSH
5863: LD_INT 153
5865: PUSH
5866: LD_INT 120
5868: PUSH
5869: LD_INT 3
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: PPUSH
5893: CALL 77578 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_computer ] ) ;
5897: LD_INT 1
5899: PPUSH
5900: LD_INT 10
5902: PUSH
5903: LD_INT 12
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PPUSH
5910: CALL 78428 0 2
// MC_SetFactoryExtension ( 1 , 155 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
5914: LD_INT 1
5916: PPUSH
5917: LD_INT 155
5919: PPUSH
5920: LD_INT 130
5922: PPUSH
5923: LD_INT 0
5925: PPUSH
5926: LD_INT 24
5928: PUSH
5929: LD_INT 16
5931: PUSH
5932: LD_INT 17
5934: PUSH
5935: LD_INT 18
5937: PUSH
5938: LD_INT 21
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: PPUSH
5948: CALL 78633 0 5
// MC_SetScanArea ( 2 , RU_Base_Area ) ;
5952: LD_INT 2
5954: PPUSH
5955: LD_INT 3
5957: PPUSH
5958: CALL 79007 0 2
// MC_SetParkingArea ( 2 , RU_Base_Parking ) ;
5962: LD_INT 2
5964: PPUSH
5965: LD_INT 4
5967: PPUSH
5968: CALL 78951 0 2
// MC_SetDepositsXY ( 2 , [ [ 84 , 125 , 1 ] , ] ) ;
5972: LD_INT 2
5974: PPUSH
5975: LD_INT 84
5977: PUSH
5978: LD_INT 125
5980: PUSH
5981: LD_INT 1
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: LIST
5988: PUSH
5989: EMPTY
5990: LIST
5991: PPUSH
5992: CALL 78010 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5996: LD_INT 2
5998: PPUSH
5999: LD_INT 43
6001: PUSH
6002: LD_INT 46
6004: PUSH
6005: LD_INT 45
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: LIST
6012: PPUSH
6013: CALL 78839 0 2
// MC_SetCratesArea ( 2 , RU_Base_Area ) ;
6017: LD_INT 2
6019: PPUSH
6020: LD_INT 3
6022: PPUSH
6023: CALL 78521 0 2
// MC_SetTame ( 2 , RU_Base_Area ) ;
6027: LD_INT 2
6029: PPUSH
6030: LD_INT 3
6032: PPUSH
6033: CALL 78252 0 2
// MC_SetDefenderLimit ( 2 , 8 ) ;
6037: LD_INT 2
6039: PPUSH
6040: LD_INT 8
6042: PPUSH
6043: CALL 77871 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] ] ) ;
6047: LD_INT 2
6049: PPUSH
6050: LD_INT 22
6052: PUSH
6053: LD_INT 3
6055: PUSH
6056: LD_INT 3
6058: PUSH
6059: LD_INT 43
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: LIST
6066: LIST
6067: PUSH
6068: LD_INT 22
6070: PUSH
6071: LD_INT 3
6073: PUSH
6074: LD_INT 3
6076: PUSH
6077: LD_INT 44
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: PUSH
6086: LD_INT 22
6088: PUSH
6089: LD_INT 3
6091: PUSH
6092: LD_INT 3
6094: PUSH
6095: LD_INT 45
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: PUSH
6104: LD_INT 24
6106: PUSH
6107: LD_INT 3
6109: PUSH
6110: LD_INT 3
6112: PUSH
6113: LD_INT 43
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: PUSH
6122: LD_INT 24
6124: PUSH
6125: LD_INT 3
6127: PUSH
6128: LD_INT 3
6130: PUSH
6131: LD_INT 43
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: PUSH
6140: LD_INT 24
6142: PUSH
6143: LD_INT 3
6145: PUSH
6146: LD_INT 3
6148: PUSH
6149: LD_INT 46
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 22
6160: PUSH
6161: LD_INT 3
6163: PUSH
6164: LD_INT 3
6166: PUSH
6167: LD_INT 43
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 22
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: LD_INT 3
6184: PUSH
6185: LD_INT 44
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: PPUSH
6204: CALL 77686 0 2
// MC_SetBuildingList ( 2 , [ [ b_depot , 96 , 125 , 0 ] , [ b_lab , 74 , 122 , 1 ] , [ b_siberite_mine , 84 , 125 , 1 ] , [ b_siberite_power , 86 , 128 , 1 ] , [ b_siberite_power , 85 , 130 , 2 ] , [ b_siberite_power , 88 , 132 , 5 ] , [ b_workshop , 106 , 130 , 0 ] , [ b_armoury , 99 , 114 , 3 ] , [ b_bunker , 72 , 112 , 2 ] , [ b_bunker , 78 , 110 , 3 ] , [ b_bunker , 84 , 110 , 2 ] , [ b_bunker , 105 , 117 , 3 ] , ] ) ;
6208: LD_INT 2
6210: PPUSH
6211: LD_INT 0
6213: PUSH
6214: LD_INT 96
6216: PUSH
6217: LD_INT 125
6219: PUSH
6220: LD_INT 0
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: PUSH
6229: LD_INT 6
6231: PUSH
6232: LD_INT 74
6234: PUSH
6235: LD_INT 122
6237: PUSH
6238: LD_INT 1
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: PUSH
6247: LD_INT 30
6249: PUSH
6250: LD_INT 84
6252: PUSH
6253: LD_INT 125
6255: PUSH
6256: LD_INT 1
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: PUSH
6265: LD_INT 28
6267: PUSH
6268: LD_INT 86
6270: PUSH
6271: LD_INT 128
6273: PUSH
6274: LD_INT 1
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: PUSH
6283: LD_INT 28
6285: PUSH
6286: LD_INT 85
6288: PUSH
6289: LD_INT 130
6291: PUSH
6292: LD_INT 2
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: PUSH
6301: LD_INT 28
6303: PUSH
6304: LD_INT 88
6306: PUSH
6307: LD_INT 132
6309: PUSH
6310: LD_INT 5
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 2
6321: PUSH
6322: LD_INT 106
6324: PUSH
6325: LD_INT 130
6327: PUSH
6328: LD_INT 0
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: PUSH
6337: LD_INT 4
6339: PUSH
6340: LD_INT 99
6342: PUSH
6343: LD_INT 114
6345: PUSH
6346: LD_INT 3
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: PUSH
6355: LD_INT 32
6357: PUSH
6358: LD_INT 72
6360: PUSH
6361: LD_INT 112
6363: PUSH
6364: LD_INT 2
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: PUSH
6373: LD_INT 32
6375: PUSH
6376: LD_INT 78
6378: PUSH
6379: LD_INT 110
6381: PUSH
6382: LD_INT 3
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 32
6393: PUSH
6394: LD_INT 84
6396: PUSH
6397: LD_INT 110
6399: PUSH
6400: LD_INT 2
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: PUSH
6409: LD_INT 32
6411: PUSH
6412: LD_INT 105
6414: PUSH
6415: LD_INT 117
6417: PUSH
6418: LD_INT 3
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: PPUSH
6441: CALL 77578 0 2
// MC_SetLabKind ( 2 , [ b_lab_spacetime , b_lab_siberium ] ) ;
6445: LD_INT 2
6447: PPUSH
6448: LD_INT 14
6450: PUSH
6451: LD_INT 11
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: PPUSH
6458: CALL 78428 0 2
// MC_SetFactoryExtension ( 2 , 106 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
6462: LD_INT 2
6464: PPUSH
6465: LD_INT 106
6467: PPUSH
6468: LD_INT 130
6470: PPUSH
6471: LD_INT 0
6473: PPUSH
6474: LD_INT 24
6476: PUSH
6477: LD_INT 16
6479: PUSH
6480: LD_INT 17
6482: PUSH
6483: LD_INT 18
6485: PUSH
6486: LD_INT 21
6488: PUSH
6489: EMPTY
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: PPUSH
6496: CALL 78633 0 5
// end ;
6500: LD_VAR 0 1
6504: RET
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
6505: LD_INT 22
6507: PUSH
6508: LD_INT 3
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PUSH
6515: LD_INT 30
6517: PUSH
6518: LD_INT 3
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: PPUSH
6529: CALL_OW 69
6533: IFFALSE 7389
6535: GO 6537
6537: DISABLE
6538: LD_INT 0
6540: PPUSH
6541: PPUSH
6542: PPUSH
6543: PPUSH
6544: PPUSH
6545: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
6546: LD_INT 6300
6548: PUSH
6549: LD_INT 4200
6551: PUSH
6552: LD_INT 2100
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: LIST
6559: PUSH
6560: LD_OWVAR 67
6564: ARRAY
6565: PPUSH
6566: CALL_OW 67
// base := 2 ;
6570: LD_ADDR_VAR 0 2
6574: PUSH
6575: LD_INT 2
6577: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
6578: LD_INT 22
6580: PUSH
6581: LD_INT 3
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: LD_INT 30
6590: PUSH
6591: LD_INT 3
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PPUSH
6602: CALL_OW 69
6606: NOT
6607: IFFALSE 6611
// continue ;
6609: GO 6546
// case Rand ( 1 , 3 ) of 1 :
6611: LD_INT 1
6613: PPUSH
6614: LD_INT 3
6616: PPUSH
6617: CALL_OW 12
6621: PUSH
6622: LD_INT 1
6624: DOUBLE
6625: EQUAL
6626: IFTRUE 6630
6628: GO 6806
6630: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6631: LD_ADDR_VAR 0 3
6635: PUSH
6636: LD_INT 22
6638: PUSH
6639: LD_INT 3
6641: PUSH
6642: LD_INT 3
6644: PUSH
6645: LD_INT 43
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: PUSH
6654: LD_INT 24
6656: PUSH
6657: LD_INT 3
6659: PUSH
6660: LD_INT 3
6662: PUSH
6663: LD_INT 46
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: PUSH
6672: LD_INT 24
6674: PUSH
6675: LD_INT 3
6677: PUSH
6678: LD_INT 3
6680: PUSH
6681: LD_INT 43
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: PUSH
6690: LD_INT 24
6692: PUSH
6693: LD_INT 3
6695: PUSH
6696: LD_INT 3
6698: PUSH
6699: LD_INT 46
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 22
6710: PUSH
6711: LD_INT 3
6713: PUSH
6714: LD_INT 3
6716: PUSH
6717: LD_INT 45
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: PUSH
6726: LD_INT 22
6728: PUSH
6729: LD_INT 3
6731: PUSH
6732: LD_INT 3
6734: PUSH
6735: LD_INT 43
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: PUSH
6744: LD_INT 24
6746: PUSH
6747: LD_INT 3
6749: PUSH
6750: LD_INT 3
6752: PUSH
6753: LD_INT 46
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: PUSH
6762: LD_INT 22
6764: PUSH
6765: LD_INT 3
6767: PUSH
6768: LD_INT 3
6770: PUSH
6771: LD_INT 45
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6790: LD_VAR 0 2
6794: PPUSH
6795: LD_VAR 0 3
6799: PPUSH
6800: CALL 77734 0 2
// end ; 2 :
6804: GO 7137
6806: LD_INT 2
6808: DOUBLE
6809: EQUAL
6810: IFTRUE 6814
6812: GO 6952
6814: POP
// begin tmp := [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6815: LD_ADDR_VAR 0 3
6819: PUSH
6820: LD_INT 24
6822: PUSH
6823: LD_INT 3
6825: PUSH
6826: LD_INT 3
6828: PUSH
6829: LD_INT 43
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: PUSH
6838: LD_INT 24
6840: PUSH
6841: LD_INT 3
6843: PUSH
6844: LD_INT 3
6846: PUSH
6847: LD_INT 46
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: PUSH
6856: LD_INT 24
6858: PUSH
6859: LD_INT 3
6861: PUSH
6862: LD_INT 3
6864: PUSH
6865: LD_INT 43
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 24
6876: PUSH
6877: LD_INT 3
6879: PUSH
6880: LD_INT 3
6882: PUSH
6883: LD_INT 46
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: PUSH
6892: LD_INT 22
6894: PUSH
6895: LD_INT 3
6897: PUSH
6898: LD_INT 3
6900: PUSH
6901: LD_INT 45
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: PUSH
6910: LD_INT 22
6912: PUSH
6913: LD_INT 3
6915: PUSH
6916: LD_INT 3
6918: PUSH
6919: LD_INT 45
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6936: LD_VAR 0 2
6940: PPUSH
6941: LD_VAR 0 3
6945: PPUSH
6946: CALL 77734 0 2
// end ; 3 :
6950: GO 7137
6952: LD_INT 3
6954: DOUBLE
6955: EQUAL
6956: IFTRUE 6960
6958: GO 7136
6960: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6961: LD_ADDR_VAR 0 3
6965: PUSH
6966: LD_INT 22
6968: PUSH
6969: LD_INT 3
6971: PUSH
6972: LD_INT 3
6974: PUSH
6975: LD_INT 43
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 24
6986: PUSH
6987: LD_INT 3
6989: PUSH
6990: LD_INT 3
6992: PUSH
6993: LD_INT 46
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: PUSH
7002: LD_INT 22
7004: PUSH
7005: LD_INT 3
7007: PUSH
7008: LD_INT 3
7010: PUSH
7011: LD_INT 43
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: PUSH
7020: LD_INT 24
7022: PUSH
7023: LD_INT 3
7025: PUSH
7026: LD_INT 3
7028: PUSH
7029: LD_INT 46
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: PUSH
7038: LD_INT 22
7040: PUSH
7041: LD_INT 3
7043: PUSH
7044: LD_INT 3
7046: PUSH
7047: LD_INT 45
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: PUSH
7056: LD_INT 22
7058: PUSH
7059: LD_INT 3
7061: PUSH
7062: LD_INT 3
7064: PUSH
7065: LD_INT 43
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: PUSH
7074: LD_INT 24
7076: PUSH
7077: LD_INT 3
7079: PUSH
7080: LD_INT 3
7082: PUSH
7083: LD_INT 46
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: PUSH
7092: LD_INT 22
7094: PUSH
7095: LD_INT 3
7097: PUSH
7098: LD_INT 3
7100: PUSH
7101: LD_INT 45
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7120: LD_VAR 0 2
7124: PPUSH
7125: LD_VAR 0 3
7129: PPUSH
7130: CALL 77734 0 2
// end ; end ;
7134: GO 7137
7136: POP
// repeat wait ( 0 0$1 ) ;
7137: LD_INT 35
7139: PPUSH
7140: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
7144: LD_VAR 0 2
7148: PPUSH
7149: CALL 78082 0 1
7153: PUSH
7154: LD_INT 0
7156: EQUAL
7157: IFFALSE 7137
// wait ( 0 0$30 ) ;
7159: LD_INT 1050
7161: PPUSH
7162: CALL_OW 67
// _target := [ [ 86 , 77 ] , [ 63 , 38 ] ] ;
7166: LD_ADDR_VAR 0 5
7170: PUSH
7171: LD_INT 86
7173: PUSH
7174: LD_INT 77
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PUSH
7181: LD_INT 63
7183: PUSH
7184: LD_INT 38
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
7195: LD_ADDR_VAR 0 4
7199: PUSH
7200: LD_INT 0
7202: PUSH
7203: LD_INT 0
7205: PUSH
7206: LD_INT 0
7208: PUSH
7209: LD_INT 1
7211: PUSH
7212: LD_INT 0
7214: PUSH
7215: LD_INT 0
7217: PUSH
7218: LD_INT 0
7220: PUSH
7221: LD_INT 0
7223: PUSH
7224: LD_INT 1
7226: PUSH
7227: LD_INT 0
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
7242: LD_ADDR_VAR 0 6
7246: PUSH
7247: LD_EXP 71
7251: PUSH
7252: LD_VAR 0 2
7256: ARRAY
7257: PUSH
7258: LD_EXP 74
7262: PUSH
7263: LD_VAR 0 2
7267: ARRAY
7268: DIFF
7269: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
7270: LD_ADDR_EXP 71
7274: PUSH
7275: LD_EXP 71
7279: PPUSH
7280: LD_VAR 0 2
7284: PPUSH
7285: LD_EXP 71
7289: PUSH
7290: LD_VAR 0 2
7294: ARRAY
7295: PUSH
7296: LD_VAR 0 6
7300: DIFF
7301: PPUSH
7302: CALL_OW 1
7306: ST_TO_ADDR
// if not attackers then
7307: LD_VAR 0 6
7311: NOT
7312: IFFALSE 7316
// continue ;
7314: GO 6546
// repeat wait ( 0 0$1 ) ;
7316: LD_INT 35
7318: PPUSH
7319: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
7323: LD_VAR 0 6
7327: PPUSH
7328: LD_INT 60
7330: PUSH
7331: EMPTY
7332: LIST
7333: PPUSH
7334: CALL_OW 72
7338: NOT
7339: IFFALSE 7316
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
7341: LD_VAR 0 2
7345: PPUSH
7346: LD_VAR 0 6
7350: PPUSH
7351: LD_VAR 0 5
7355: PPUSH
7356: LD_VAR 0 4
7360: PPUSH
7361: CALL 77919 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
7365: LD_EXP 52
7369: PUSH
7370: LD_VAR 0 2
7374: ARRAY
7375: PPUSH
7376: LD_INT 50
7378: PUSH
7379: EMPTY
7380: LIST
7381: PPUSH
7382: CALL_OW 72
7386: NOT
7387: IFFALSE 6546
// end ;
7389: PPOPN 6
7391: END
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
7392: LD_INT 22
7394: PUSH
7395: LD_INT 3
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 30
7404: PUSH
7405: LD_INT 3
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PPUSH
7416: CALL_OW 69
7420: IFFALSE 8317
7422: GO 7424
7424: DISABLE
7425: LD_INT 0
7427: PPUSH
7428: PPUSH
7429: PPUSH
7430: PPUSH
7431: PPUSH
7432: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
7433: LD_INT 6300
7435: PUSH
7436: LD_INT 4200
7438: PUSH
7439: LD_INT 2100
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: LIST
7446: PUSH
7447: LD_OWVAR 67
7451: ARRAY
7452: PPUSH
7453: CALL_OW 67
// base := 1 ;
7457: LD_ADDR_VAR 0 2
7461: PUSH
7462: LD_INT 1
7464: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
7465: LD_INT 22
7467: PUSH
7468: LD_INT 3
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: LD_INT 30
7477: PUSH
7478: LD_INT 3
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PPUSH
7489: CALL_OW 69
7493: NOT
7494: IFFALSE 7498
// continue ;
7496: GO 7433
// case Rand ( 1 , 3 ) of 1 :
7498: LD_INT 1
7500: PPUSH
7501: LD_INT 3
7503: PPUSH
7504: CALL_OW 12
7508: PUSH
7509: LD_INT 1
7511: DOUBLE
7512: EQUAL
7513: IFTRUE 7517
7515: GO 7693
7517: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7518: LD_ADDR_VAR 0 3
7522: PUSH
7523: LD_INT 22
7525: PUSH
7526: LD_INT 1
7528: PUSH
7529: LD_INT 3
7531: PUSH
7532: LD_INT 43
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: PUSH
7541: LD_INT 24
7543: PUSH
7544: LD_INT 1
7546: PUSH
7547: LD_INT 3
7549: PUSH
7550: LD_INT 46
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: PUSH
7559: LD_INT 24
7561: PUSH
7562: LD_INT 1
7564: PUSH
7565: LD_INT 3
7567: PUSH
7568: LD_INT 43
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 24
7579: PUSH
7580: LD_INT 1
7582: PUSH
7583: LD_INT 3
7585: PUSH
7586: LD_INT 46
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: PUSH
7595: LD_INT 22
7597: PUSH
7598: LD_INT 1
7600: PUSH
7601: LD_INT 3
7603: PUSH
7604: LD_INT 45
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: PUSH
7613: LD_INT 22
7615: PUSH
7616: LD_INT 1
7618: PUSH
7619: LD_INT 3
7621: PUSH
7622: LD_INT 43
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 24
7633: PUSH
7634: LD_INT 1
7636: PUSH
7637: LD_INT 3
7639: PUSH
7640: LD_INT 46
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: PUSH
7649: LD_INT 22
7651: PUSH
7652: LD_INT 1
7654: PUSH
7655: LD_INT 3
7657: PUSH
7658: LD_INT 45
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7677: LD_VAR 0 2
7681: PPUSH
7682: LD_VAR 0 3
7686: PPUSH
7687: CALL 77734 0 2
// end ; 2 :
7691: GO 8062
7693: LD_INT 2
7695: DOUBLE
7696: EQUAL
7697: IFTRUE 7701
7699: GO 7877
7701: POP
// begin tmp := [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7702: LD_ADDR_VAR 0 3
7706: PUSH
7707: LD_INT 24
7709: PUSH
7710: LD_INT 1
7712: PUSH
7713: LD_INT 3
7715: PUSH
7716: LD_INT 43
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: PUSH
7725: LD_INT 24
7727: PUSH
7728: LD_INT 1
7730: PUSH
7731: LD_INT 3
7733: PUSH
7734: LD_INT 46
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: PUSH
7743: LD_INT 24
7745: PUSH
7746: LD_INT 1
7748: PUSH
7749: LD_INT 3
7751: PUSH
7752: LD_INT 43
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 24
7763: PUSH
7764: LD_INT 1
7766: PUSH
7767: LD_INT 3
7769: PUSH
7770: LD_INT 46
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: PUSH
7779: LD_INT 22
7781: PUSH
7782: LD_INT 1
7784: PUSH
7785: LD_INT 3
7787: PUSH
7788: LD_INT 45
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: PUSH
7797: LD_INT 22
7799: PUSH
7800: LD_INT 1
7802: PUSH
7803: LD_INT 3
7805: PUSH
7806: LD_INT 45
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: PUSH
7815: LD_INT 22
7817: PUSH
7818: LD_INT 1
7820: PUSH
7821: LD_INT 3
7823: PUSH
7824: LD_INT 45
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: PUSH
7833: LD_INT 22
7835: PUSH
7836: LD_INT 1
7838: PUSH
7839: LD_INT 3
7841: PUSH
7842: LD_INT 45
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7861: LD_VAR 0 2
7865: PPUSH
7866: LD_VAR 0 3
7870: PPUSH
7871: CALL 77734 0 2
// end ; 3 :
7875: GO 8062
7877: LD_INT 3
7879: DOUBLE
7880: EQUAL
7881: IFTRUE 7885
7883: GO 8061
7885: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7886: LD_ADDR_VAR 0 3
7890: PUSH
7891: LD_INT 22
7893: PUSH
7894: LD_INT 1
7896: PUSH
7897: LD_INT 3
7899: PUSH
7900: LD_INT 43
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: PUSH
7909: LD_INT 24
7911: PUSH
7912: LD_INT 1
7914: PUSH
7915: LD_INT 3
7917: PUSH
7918: LD_INT 46
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: PUSH
7927: LD_INT 22
7929: PUSH
7930: LD_INT 1
7932: PUSH
7933: LD_INT 3
7935: PUSH
7936: LD_INT 43
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: PUSH
7945: LD_INT 24
7947: PUSH
7948: LD_INT 1
7950: PUSH
7951: LD_INT 3
7953: PUSH
7954: LD_INT 46
7956: PUSH
7957: EMPTY
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: PUSH
7963: LD_INT 22
7965: PUSH
7966: LD_INT 1
7968: PUSH
7969: LD_INT 3
7971: PUSH
7972: LD_INT 45
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 22
7983: PUSH
7984: LD_INT 1
7986: PUSH
7987: LD_INT 3
7989: PUSH
7990: LD_INT 43
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: PUSH
7999: LD_INT 24
8001: PUSH
8002: LD_INT 1
8004: PUSH
8005: LD_INT 3
8007: PUSH
8008: LD_INT 46
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: PUSH
8017: LD_INT 22
8019: PUSH
8020: LD_INT 1
8022: PUSH
8023: LD_INT 3
8025: PUSH
8026: LD_INT 45
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
8045: LD_VAR 0 2
8049: PPUSH
8050: LD_VAR 0 3
8054: PPUSH
8055: CALL 77734 0 2
// end ; end ;
8059: GO 8062
8061: POP
// repeat wait ( 0 0$1 ) ;
8062: LD_INT 35
8064: PPUSH
8065: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 8 ;
8069: LD_VAR 0 2
8073: PPUSH
8074: LD_INT 1
8076: PPUSH
8077: CALL 79152 0 2
8081: PUSH
8082: LD_INT 8
8084: GREATEREQUAL
8085: IFFALSE 8062
// wait ( 0 0$30 ) ;
8087: LD_INT 1050
8089: PPUSH
8090: CALL_OW 67
// _target := [ [ 144 , 65 ] , [ 63 , 38 ] ] ;
8094: LD_ADDR_VAR 0 5
8098: PUSH
8099: LD_INT 144
8101: PUSH
8102: LD_INT 65
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: PUSH
8109: LD_INT 63
8111: PUSH
8112: LD_INT 38
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
8123: LD_ADDR_VAR 0 4
8127: PUSH
8128: LD_INT 0
8130: PUSH
8131: LD_INT 0
8133: PUSH
8134: LD_INT 0
8136: PUSH
8137: LD_INT 1
8139: PUSH
8140: LD_INT 0
8142: PUSH
8143: LD_INT 0
8145: PUSH
8146: LD_INT 0
8148: PUSH
8149: LD_INT 0
8151: PUSH
8152: LD_INT 1
8154: PUSH
8155: LD_INT 0
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
8170: LD_ADDR_VAR 0 6
8174: PUSH
8175: LD_EXP 71
8179: PUSH
8180: LD_VAR 0 2
8184: ARRAY
8185: PUSH
8186: LD_EXP 74
8190: PUSH
8191: LD_VAR 0 2
8195: ARRAY
8196: DIFF
8197: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
8198: LD_ADDR_EXP 71
8202: PUSH
8203: LD_EXP 71
8207: PPUSH
8208: LD_VAR 0 2
8212: PPUSH
8213: LD_EXP 71
8217: PUSH
8218: LD_VAR 0 2
8222: ARRAY
8223: PUSH
8224: LD_VAR 0 6
8228: DIFF
8229: PPUSH
8230: CALL_OW 1
8234: ST_TO_ADDR
// if not attackers then
8235: LD_VAR 0 6
8239: NOT
8240: IFFALSE 8244
// continue ;
8242: GO 7433
// repeat wait ( 0 0$1 ) ;
8244: LD_INT 35
8246: PPUSH
8247: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
8251: LD_VAR 0 6
8255: PPUSH
8256: LD_INT 60
8258: PUSH
8259: EMPTY
8260: LIST
8261: PPUSH
8262: CALL_OW 72
8266: NOT
8267: IFFALSE 8244
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
8269: LD_VAR 0 2
8273: PPUSH
8274: LD_VAR 0 6
8278: PPUSH
8279: LD_VAR 0 5
8283: PPUSH
8284: LD_VAR 0 4
8288: PPUSH
8289: CALL 77919 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
8293: LD_EXP 52
8297: PUSH
8298: LD_VAR 0 2
8302: ARRAY
8303: PPUSH
8304: LD_INT 50
8306: PUSH
8307: EMPTY
8308: LIST
8309: PPUSH
8310: CALL_OW 72
8314: NOT
8315: IFFALSE 7433
// end ;
8317: PPOPN 6
8319: END
// export RussiansDefeated ; every 0 0$1 trigger FirstAssaultRepelled and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
8320: LD_EXP 3
8324: PUSH
8325: LD_INT 22
8327: PUSH
8328: LD_INT 3
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: PUSH
8335: LD_INT 21
8337: PUSH
8338: LD_INT 1
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PPUSH
8349: CALL_OW 69
8353: PUSH
8354: LD_INT 0
8356: EQUAL
8357: AND
8358: IFFALSE 8371
8360: GO 8362
8362: DISABLE
// begin RussiansDefeated := true ;
8363: LD_ADDR_EXP 42
8367: PUSH
8368: LD_INT 1
8370: ST_TO_ADDR
// end ;
8371: END
// every 0 0$1 trigger FirstAssaultRepelled and not JMM_Arrived do var i , un , filter , soldiers , bazookas , vehs , vehicle , medics , squad , attackers , _target , flags ;
8372: LD_EXP 3
8376: PUSH
8377: LD_EXP 5
8381: NOT
8382: AND
8383: IFFALSE 9356
8385: GO 8387
8387: DISABLE
8388: LD_INT 0
8390: PPUSH
8391: PPUSH
8392: PPUSH
8393: PPUSH
8394: PPUSH
8395: PPUSH
8396: PPUSH
8397: PPUSH
8398: PPUSH
8399: PPUSH
8400: PPUSH
8401: PPUSH
// begin wait ( [ Rand ( 5 5$00 , 6 6$30 ) , Rand ( 4 4$30 , 5 5$30 ) , Rand ( 4 4$00 , 5 5$00 ) ] [ Difficulty ] ) ;
8402: LD_INT 10500
8404: PPUSH
8405: LD_INT 13650
8407: PPUSH
8408: CALL_OW 12
8412: PUSH
8413: LD_INT 9450
8415: PPUSH
8416: LD_INT 11550
8418: PPUSH
8419: CALL_OW 12
8423: PUSH
8424: LD_INT 8400
8426: PPUSH
8427: LD_INT 10500
8429: PPUSH
8430: CALL_OW 12
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: LIST
8439: PUSH
8440: LD_OWVAR 67
8444: ARRAY
8445: PPUSH
8446: CALL_OW 67
// filter := [ ] ;
8450: LD_ADDR_VAR 0 3
8454: PUSH
8455: EMPTY
8456: ST_TO_ADDR
// soldiers := [ Rand ( 2 , 3 ) , Rand ( 3 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
8457: LD_ADDR_VAR 0 4
8461: PUSH
8462: LD_INT 2
8464: PPUSH
8465: LD_INT 3
8467: PPUSH
8468: CALL_OW 12
8472: PUSH
8473: LD_INT 3
8475: PPUSH
8476: LD_INT 4
8478: PPUSH
8479: CALL_OW 12
8483: PUSH
8484: LD_INT 3
8486: PPUSH
8487: LD_INT 5
8489: PPUSH
8490: CALL_OW 12
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: LIST
8499: PUSH
8500: LD_OWVAR 67
8504: ARRAY
8505: ST_TO_ADDR
// bazookas := [ 1 , Rand ( 1 , 2 ) , Rand ( 2 , 3 ) ] [ Difficulty ] ;
8506: LD_ADDR_VAR 0 5
8510: PUSH
8511: LD_INT 1
8513: PUSH
8514: LD_INT 1
8516: PPUSH
8517: LD_INT 2
8519: PPUSH
8520: CALL_OW 12
8524: PUSH
8525: LD_INT 2
8527: PPUSH
8528: LD_INT 3
8530: PPUSH
8531: CALL_OW 12
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: LIST
8540: PUSH
8541: LD_OWVAR 67
8545: ARRAY
8546: ST_TO_ADDR
// vehs := [ Rand ( 2 , 3 ) , Rand ( 2 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
8547: LD_ADDR_VAR 0 6
8551: PUSH
8552: LD_INT 2
8554: PPUSH
8555: LD_INT 3
8557: PPUSH
8558: CALL_OW 12
8562: PUSH
8563: LD_INT 2
8565: PPUSH
8566: LD_INT 4
8568: PPUSH
8569: CALL_OW 12
8573: PUSH
8574: LD_INT 3
8576: PPUSH
8577: LD_INT 5
8579: PPUSH
8580: CALL_OW 12
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: LIST
8589: PUSH
8590: LD_OWVAR 67
8594: ARRAY
8595: ST_TO_ADDR
// medics := [ 1 , 2 , 2 ] [ Difficulty ] ;
8596: LD_ADDR_VAR 0 8
8600: PUSH
8601: LD_INT 1
8603: PUSH
8604: LD_INT 2
8606: PUSH
8607: LD_INT 2
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: LIST
8614: PUSH
8615: LD_OWVAR 67
8619: ARRAY
8620: ST_TO_ADDR
// uc_side := 3 ;
8621: LD_ADDR_OWVAR 20
8625: PUSH
8626: LD_INT 3
8628: ST_TO_ADDR
// uc_nation := nation_russian ;
8629: LD_ADDR_OWVAR 21
8633: PUSH
8634: LD_INT 3
8636: ST_TO_ADDR
// for i = 1 to soldiers do
8637: LD_ADDR_VAR 0 1
8641: PUSH
8642: DOUBLE
8643: LD_INT 1
8645: DEC
8646: ST_TO_ADDR
8647: LD_VAR 0 4
8651: PUSH
8652: FOR_TO
8653: IFFALSE 8695
// begin PrepareSoldier ( 0 , game_eskill ) ;
8655: LD_INT 0
8657: PPUSH
8658: LD_EXP 39
8662: PPUSH
8663: CALL_OW 381
// un := CreateHuman ;
8667: LD_ADDR_VAR 0 2
8671: PUSH
8672: CALL_OW 44
8676: ST_TO_ADDR
// filter := filter ^ un ;
8677: LD_ADDR_VAR 0 3
8681: PUSH
8682: LD_VAR 0 3
8686: PUSH
8687: LD_VAR 0 2
8691: ADD
8692: ST_TO_ADDR
// end ;
8693: GO 8652
8695: POP
8696: POP
// for i = 1 to bazookas do
8697: LD_ADDR_VAR 0 1
8701: PUSH
8702: DOUBLE
8703: LD_INT 1
8705: DEC
8706: ST_TO_ADDR
8707: LD_VAR 0 5
8711: PUSH
8712: FOR_TO
8713: IFFALSE 8763
// begin PrepareSoldier ( 0 , game_eskill ) ;
8715: LD_INT 0
8717: PPUSH
8718: LD_EXP 39
8722: PPUSH
8723: CALL_OW 381
// hc_class := class_bazooker ;
8727: LD_ADDR_OWVAR 28
8731: PUSH
8732: LD_INT 9
8734: ST_TO_ADDR
// un := CreateHuman ;
8735: LD_ADDR_VAR 0 2
8739: PUSH
8740: CALL_OW 44
8744: ST_TO_ADDR
// filter := filter ^ un ;
8745: LD_ADDR_VAR 0 3
8749: PUSH
8750: LD_VAR 0 3
8754: PUSH
8755: LD_VAR 0 2
8759: ADD
8760: ST_TO_ADDR
// end ;
8761: GO 8712
8763: POP
8764: POP
// for i = 1 to medics do
8765: LD_ADDR_VAR 0 1
8769: PUSH
8770: DOUBLE
8771: LD_INT 1
8773: DEC
8774: ST_TO_ADDR
8775: LD_VAR 0 8
8779: PUSH
8780: FOR_TO
8781: IFFALSE 8823
// begin PrepareScientist ( 0 , game_eskill ) ;
8783: LD_INT 0
8785: PPUSH
8786: LD_EXP 39
8790: PPUSH
8791: CALL_OW 384
// un := CreateHuman ;
8795: LD_ADDR_VAR 0 2
8799: PUSH
8800: CALL_OW 44
8804: ST_TO_ADDR
// filter := filter ^ un ;
8805: LD_ADDR_VAR 0 3
8809: PUSH
8810: LD_VAR 0 3
8814: PUSH
8815: LD_VAR 0 2
8819: ADD
8820: ST_TO_ADDR
// end ;
8821: GO 8780
8823: POP
8824: POP
// for i = 1 to vehs do
8825: LD_ADDR_VAR 0 1
8829: PUSH
8830: DOUBLE
8831: LD_INT 1
8833: DEC
8834: ST_TO_ADDR
8835: LD_VAR 0 6
8839: PUSH
8840: FOR_TO
8841: IFFALSE 9033
// begin case Rand ( 1 , 5 ) of 1 :
8843: LD_INT 1
8845: PPUSH
8846: LD_INT 5
8848: PPUSH
8849: CALL_OW 12
8853: PUSH
8854: LD_INT 1
8856: DOUBLE
8857: EQUAL
8858: IFTRUE 8862
8860: GO 8884
8862: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 2 :
8863: LD_INT 22
8865: PPUSH
8866: LD_INT 3
8868: PPUSH
8869: LD_INT 3
8871: PPUSH
8872: LD_INT 43
8874: PPUSH
8875: LD_INT 100
8877: PPUSH
8878: CALL 18060 0 5
8882: GO 9005
8884: LD_INT 2
8886: DOUBLE
8887: EQUAL
8888: IFTRUE 8892
8890: GO 8914
8892: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gun , 100 ) ; 3 :
8893: LD_INT 22
8895: PPUSH
8896: LD_INT 3
8898: PPUSH
8899: LD_INT 3
8901: PPUSH
8902: LD_INT 44
8904: PPUSH
8905: LD_INT 100
8907: PPUSH
8908: CALL 18060 0 5
8912: GO 9005
8914: LD_INT 3
8916: DOUBLE
8917: EQUAL
8918: IFTRUE 8922
8920: GO 8944
8922: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher , 100 ) ; 4 :
8923: LD_INT 22
8925: PPUSH
8926: LD_INT 3
8928: PPUSH
8929: LD_INT 3
8931: PPUSH
8932: LD_INT 45
8934: PPUSH
8935: LD_INT 100
8937: PPUSH
8938: CALL 18060 0 5
8942: GO 9005
8944: LD_INT 4
8946: DOUBLE
8947: EQUAL
8948: IFTRUE 8952
8950: GO 8974
8952: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 5 :
8953: LD_INT 24
8955: PPUSH
8956: LD_INT 3
8958: PPUSH
8959: LD_INT 3
8961: PPUSH
8962: LD_INT 43
8964: PPUSH
8965: LD_INT 100
8967: PPUSH
8968: CALL 18060 0 5
8972: GO 9005
8974: LD_INT 5
8976: DOUBLE
8977: EQUAL
8978: IFTRUE 8982
8980: GO 9004
8982: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun , 100 ) ; end ;
8983: LD_INT 24
8985: PPUSH
8986: LD_INT 3
8988: PPUSH
8989: LD_INT 3
8991: PPUSH
8992: LD_INT 46
8994: PPUSH
8995: LD_INT 100
8997: PPUSH
8998: CALL 18060 0 5
9002: GO 9005
9004: POP
// vehicle := CreateVehicle ;
9005: LD_ADDR_VAR 0 7
9009: PUSH
9010: CALL_OW 45
9014: ST_TO_ADDR
// filter := filter ^ vehicle ;
9015: LD_ADDR_VAR 0 3
9019: PUSH
9020: LD_VAR 0 3
9024: PUSH
9025: LD_VAR 0 7
9029: ADD
9030: ST_TO_ADDR
// end ;
9031: GO 8840
9033: POP
9034: POP
// for i = 1 to filter do
9035: LD_ADDR_VAR 0 1
9039: PUSH
9040: DOUBLE
9041: LD_INT 1
9043: DEC
9044: ST_TO_ADDR
9045: LD_VAR 0 3
9049: PUSH
9050: FOR_TO
9051: IFFALSE 9076
// PlaceUnitArea ( filter [ i ] , RUAttackSpawn1 , false ) ;
9053: LD_VAR 0 3
9057: PUSH
9058: LD_VAR 0 1
9062: ARRAY
9063: PPUSH
9064: LD_INT 14
9066: PPUSH
9067: LD_INT 0
9069: PPUSH
9070: CALL_OW 49
9074: GO 9050
9076: POP
9077: POP
// case Rand ( 1 , 3 ) of 1 :
9078: LD_INT 1
9080: PPUSH
9081: LD_INT 3
9083: PPUSH
9084: CALL_OW 12
9088: PUSH
9089: LD_INT 1
9091: DOUBLE
9092: EQUAL
9093: IFTRUE 9097
9095: GO 9151
9097: POP
// _target := [ [ 165 , 114 ] , [ 104 , 108 ] , [ 86 , 77 ] , [ 63 , 38 ] ] ; 2 :
9098: LD_ADDR_VAR 0 11
9102: PUSH
9103: LD_INT 165
9105: PUSH
9106: LD_INT 114
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: PUSH
9113: LD_INT 104
9115: PUSH
9116: LD_INT 108
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: PUSH
9123: LD_INT 86
9125: PUSH
9126: LD_INT 77
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PUSH
9133: LD_INT 63
9135: PUSH
9136: LD_INT 38
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: ST_TO_ADDR
9149: GO 9276
9151: LD_INT 2
9153: DOUBLE
9154: EQUAL
9155: IFTRUE 9159
9157: GO 9213
9159: POP
// _target := [ [ 165 , 114 ] , [ 146 , 71 ] , [ 112 , 41 ] , [ 63 , 38 ] ] ; 3 :
9160: LD_ADDR_VAR 0 11
9164: PUSH
9165: LD_INT 165
9167: PUSH
9168: LD_INT 114
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PUSH
9175: LD_INT 146
9177: PUSH
9178: LD_INT 71
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: PUSH
9185: LD_INT 112
9187: PUSH
9188: LD_INT 41
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: PUSH
9195: LD_INT 63
9197: PUSH
9198: LD_INT 38
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: ST_TO_ADDR
9211: GO 9276
9213: LD_INT 3
9215: DOUBLE
9216: EQUAL
9217: IFTRUE 9221
9219: GO 9275
9221: POP
// _target := [ [ 165 , 114 ] , [ 63 , 99 ] , [ 55 , 77 ] , [ 63 , 38 ] ] ; end ;
9222: LD_ADDR_VAR 0 11
9226: PUSH
9227: LD_INT 165
9229: PUSH
9230: LD_INT 114
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: PUSH
9237: LD_INT 63
9239: PUSH
9240: LD_INT 99
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: PUSH
9247: LD_INT 55
9249: PUSH
9250: LD_INT 77
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PUSH
9257: LD_INT 63
9259: PUSH
9260: LD_INT 38
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: ST_TO_ADDR
9273: GO 9276
9275: POP
// attackers := filter ;
9276: LD_ADDR_VAR 0 10
9280: PUSH
9281: LD_VAR 0 3
9285: ST_TO_ADDR
// flags := [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ;
9286: LD_ADDR_VAR 0 12
9290: PUSH
9291: LD_INT 0
9293: PUSH
9294: LD_INT 1
9296: PUSH
9297: LD_INT 0
9299: PUSH
9300: LD_INT 1
9302: PUSH
9303: LD_INT 1
9305: PUSH
9306: LD_INT 0
9308: PUSH
9309: LD_INT 0
9311: PUSH
9312: LD_INT 0
9314: PUSH
9315: LD_INT 1
9317: PUSH
9318: LD_INT 1
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: ST_TO_ADDR
// MC_PrepareAttack ( 1 , attackers , _target , flags ) ;
9333: LD_INT 1
9335: PPUSH
9336: LD_VAR 0 10
9340: PPUSH
9341: LD_VAR 0 11
9345: PPUSH
9346: LD_VAR 0 12
9350: PPUSH
9351: CALL 77919 0 4
// enable ;
9355: ENABLE
// end ;
9356: PPOPN 12
9358: END
// every 0 0$1 do var i , tmp ;
9359: GO 9361
9361: DISABLE
9362: LD_INT 0
9364: PPUSH
9365: PPUSH
// begin enable ;
9366: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
9367: LD_ADDR_VAR 0 2
9371: PUSH
9372: LD_INT 3
9374: PUSH
9375: LD_INT 22
9377: PUSH
9378: LD_INT 1
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 32
9391: PUSH
9392: LD_INT 1
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: PPUSH
9403: CALL_OW 69
9407: ST_TO_ADDR
// if tmp then
9408: LD_VAR 0 2
9412: IFFALSE 9458
// for i in tmp do
9414: LD_ADDR_VAR 0 1
9418: PUSH
9419: LD_VAR 0 2
9423: PUSH
9424: FOR_IN
9425: IFFALSE 9456
// if GetFuel ( i ) < 3 then
9427: LD_VAR 0 1
9431: PPUSH
9432: CALL_OW 261
9436: PUSH
9437: LD_INT 3
9439: LESS
9440: IFFALSE 9454
// SetFuel ( i , 3 ) ;
9442: LD_VAR 0 1
9446: PPUSH
9447: LD_INT 3
9449: PPUSH
9450: CALL_OW 240
9454: GO 9424
9456: POP
9457: POP
// end ;
9458: PPOPN 2
9460: END
// every 0 0$1 trigger FilterUnitsInArea ( RU_Base_Area , [ f_side , 1 ] ) or FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) do var i , veh , tmp ;
9461: LD_INT 3
9463: PPUSH
9464: LD_INT 22
9466: PUSH
9467: LD_INT 1
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: PPUSH
9474: CALL_OW 70
9478: PUSH
9479: LD_INT 10
9481: PPUSH
9482: LD_INT 22
9484: PUSH
9485: LD_INT 1
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: PPUSH
9492: CALL_OW 70
9496: OR
9497: IFFALSE 9763
9499: GO 9501
9501: DISABLE
9502: LD_INT 0
9504: PPUSH
9505: PPUSH
9506: PPUSH
// begin tmp := [ ] ;
9507: LD_ADDR_VAR 0 3
9511: PUSH
9512: EMPTY
9513: ST_TO_ADDR
// for i := 1 to 18 do
9514: LD_ADDR_VAR 0 1
9518: PUSH
9519: DOUBLE
9520: LD_INT 1
9522: DEC
9523: ST_TO_ADDR
9524: LD_INT 18
9526: PUSH
9527: FOR_TO
9528: IFFALSE 9667
// begin uc_side := 3 ;
9530: LD_ADDR_OWVAR 20
9534: PUSH
9535: LD_INT 3
9537: ST_TO_ADDR
// uc_nation := 3 ;
9538: LD_ADDR_OWVAR 21
9542: PUSH
9543: LD_INT 3
9545: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_siberite , control_computer , [ ru_heavy_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] , 100 ) ;
9546: LD_INT 23
9548: PPUSH
9549: LD_INT 3
9551: PPUSH
9552: LD_INT 3
9554: PPUSH
9555: LD_INT 46
9557: PUSH
9558: LD_INT 43
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: PUSH
9565: LD_INT 1
9567: PPUSH
9568: LD_INT 2
9570: PPUSH
9571: CALL_OW 12
9575: ARRAY
9576: PPUSH
9577: LD_INT 100
9579: PPUSH
9580: CALL 18060 0 5
// veh := CreateVehicle ;
9584: LD_ADDR_VAR 0 2
9588: PUSH
9589: CALL_OW 45
9593: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9594: LD_VAR 0 2
9598: PPUSH
9599: LD_INT 5
9601: PPUSH
9602: CALL_OW 233
// PlaceUnitXYR ( veh , 199 , 135 , 3 , false ) ;
9606: LD_VAR 0 2
9610: PPUSH
9611: LD_INT 199
9613: PPUSH
9614: LD_INT 135
9616: PPUSH
9617: LD_INT 3
9619: PPUSH
9620: LD_INT 0
9622: PPUSH
9623: CALL_OW 50
// tmp := tmp ^ veh ;
9627: LD_ADDR_VAR 0 3
9631: PUSH
9632: LD_VAR 0 3
9636: PUSH
9637: LD_VAR 0 2
9641: ADD
9642: ST_TO_ADDR
// ComMoveXY ( veh , 173 , 118 ) ;
9643: LD_VAR 0 2
9647: PPUSH
9648: LD_INT 173
9650: PPUSH
9651: LD_INT 118
9653: PPUSH
9654: CALL_OW 111
// wait ( 0 0$2 ) ;
9658: LD_INT 70
9660: PPUSH
9661: CALL_OW 67
// end ;
9665: GO 9527
9667: POP
9668: POP
// repeat wait ( 0 0$1 ) ;
9669: LD_INT 35
9671: PPUSH
9672: CALL_OW 67
// for i in tmp do
9676: LD_ADDR_VAR 0 1
9680: PUSH
9681: LD_VAR 0 3
9685: PUSH
9686: FOR_IN
9687: IFFALSE 9754
// if IsDead ( i ) then
9689: LD_VAR 0 1
9693: PPUSH
9694: CALL_OW 301
9698: IFFALSE 9718
// tmp := tmp diff i else
9700: LD_ADDR_VAR 0 3
9704: PUSH
9705: LD_VAR 0 3
9709: PUSH
9710: LD_VAR 0 1
9714: DIFF
9715: ST_TO_ADDR
9716: GO 9752
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
9718: LD_VAR 0 1
9722: PPUSH
9723: LD_INT 22
9725: PUSH
9726: LD_INT 1
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PPUSH
9733: CALL_OW 69
9737: PPUSH
9738: LD_VAR 0 1
9742: PPUSH
9743: CALL_OW 74
9747: PPUSH
9748: CALL_OW 115
9752: GO 9686
9754: POP
9755: POP
// until not tmp ;
9756: LD_VAR 0 3
9760: NOT
9761: IFFALSE 9669
// end ; end_of_file
9763: PPOPN 3
9765: END
// export Losses ; on UnitDestroyed ( un ) do begin if un = Brighton then
9766: LD_VAR 0 1
9770: PUSH
9771: LD_EXP 8
9775: EQUAL
9776: IFFALSE 9792
// begin wait ( 0 0$1 ) ;
9778: LD_INT 35
9780: PPUSH
9781: CALL_OW 67
// YouLost ( Brighton ) ;
9785: LD_STRING Brighton
9787: PPUSH
9788: CALL_OW 104
// end ; if un = JMM then
9792: LD_VAR 0 1
9796: PUSH
9797: LD_EXP 36
9801: EQUAL
9802: IFFALSE 9818
// begin wait ( 0 0$1 ) ;
9804: LD_INT 35
9806: PPUSH
9807: CALL_OW 67
// YouLost ( JMM ) ;
9811: LD_STRING JMM
9813: PPUSH
9814: CALL_OW 104
// end ; if un = Megan then
9818: LD_VAR 0 1
9822: PUSH
9823: LD_EXP 10
9827: EQUAL
9828: IFFALSE 9842
// begin Say ( Brighton , DBrighton-MeganDeath ) ;
9830: LD_EXP 8
9834: PPUSH
9835: LD_STRING DBrighton-MeganDeath
9837: PPUSH
9838: CALL_OW 88
// end ; if un = Palmer then
9842: LD_VAR 0 1
9846: PUSH
9847: LD_EXP 9
9851: EQUAL
9852: IFFALSE 9866
// begin Say ( Brighton , DBrighton-PalmerDeath ) ;
9854: LD_EXP 8
9858: PPUSH
9859: LD_STRING DBrighton-PalmerDeath
9861: PPUSH
9862: CALL_OW 88
// end ; if un = Burlak then
9866: LD_VAR 0 1
9870: PUSH
9871: LD_EXP 18
9875: EQUAL
9876: IFFALSE 9908
// begin if JMM_Arrived then
9878: LD_EXP 5
9882: IFFALSE 9896
// Say ( JMM , DJMM-BurlakDead ) ;
9884: LD_EXP 36
9888: PPUSH
9889: LD_STRING DJMM-BurlakDead
9891: PPUSH
9892: CALL_OW 88
// Say ( Palmer , DSol-BurlakDead ) ;
9896: LD_EXP 9
9900: PPUSH
9901: LD_STRING DSol-BurlakDead
9903: PPUSH
9904: CALL_OW 88
// end ; if un = BetaA or un = BetaB then
9908: LD_VAR 0 1
9912: PUSH
9913: LD_INT 1
9915: EQUAL
9916: PUSH
9917: LD_VAR 0 1
9921: PUSH
9922: LD_INT 3
9924: EQUAL
9925: OR
9926: IFFALSE 9942
// begin wait ( 0 0$1 ) ;
9928: LD_INT 35
9930: PPUSH
9931: CALL_OW 67
// YouLost ( Depot ) ;
9935: LD_STRING Depot
9937: PPUSH
9938: CALL_OW 104
// end ; if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
9942: LD_VAR 0 1
9946: PPUSH
9947: CALL_OW 255
9951: PUSH
9952: LD_INT 1
9954: EQUAL
9955: PUSH
9956: LD_VAR 0 1
9960: PPUSH
9961: CALL_OW 247
9965: PUSH
9966: LD_INT 1
9968: EQUAL
9969: AND
9970: IFFALSE 9986
// Losses := Losses + 1 ;
9972: LD_ADDR_EXP 43
9976: PUSH
9977: LD_EXP 43
9981: PUSH
9982: LD_INT 1
9984: PLUS
9985: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
9986: LD_VAR 0 1
9990: PPUSH
9991: CALL 81126 0 1
// end ;
9995: PPOPN 1
9997: END
// on UnitGoesToRed ( un ) do begin if un = Yashin then
9998: LD_VAR 0 1
10002: PUSH
10003: LD_EXP 12
10007: EQUAL
10008: IFFALSE 10022
// ForceSay ( Yashin , DDeath-Yas-3 ) ;
10010: LD_EXP 12
10014: PPUSH
10015: LD_STRING DDeath-Yas-3
10017: PPUSH
10018: CALL_OW 91
// if un = Popov then
10022: LD_VAR 0 1
10026: PUSH
10027: LD_EXP 13
10031: EQUAL
10032: IFFALSE 10046
// ForceSay ( Popov , DDeath-Pop-3 ) ;
10034: LD_EXP 13
10038: PPUSH
10039: LD_STRING DDeath-Pop-3
10041: PPUSH
10042: CALL_OW 91
// if un = Gaydar then
10046: LD_VAR 0 1
10050: PUSH
10051: LD_EXP 14
10055: EQUAL
10056: IFFALSE 10070
// ForceSay ( Gaydar , DDeath-Gay-3 ) ;
10058: LD_EXP 14
10062: PPUSH
10063: LD_STRING DDeath-Gay-3
10065: PPUSH
10066: CALL_OW 91
// if un = Sevi then
10070: LD_VAR 0 1
10074: PUSH
10075: LD_EXP 15
10079: EQUAL
10080: IFFALSE 10094
// ForceSay ( Sevi , DDeath-Vse-3 ) ;
10082: LD_EXP 15
10086: PPUSH
10087: LD_STRING DDeath-Vse-3
10089: PPUSH
10090: CALL_OW 91
// end ;
10094: PPOPN 1
10096: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_laser then
10097: LD_VAR 0 1
10101: PUSH
10102: LD_INT 10
10104: EQUAL
10105: IFFALSE 10143
// begin Say ( Brighton , DBrighton-C1 ) ;
10107: LD_EXP 8
10111: PPUSH
10112: LD_STRING DBrighton-C1
10114: PPUSH
10115: CALL_OW 88
// Say ( Megan , DMegan-C1 ) ;
10119: LD_EXP 10
10123: PPUSH
10124: LD_STRING DMegan-C1
10126: PPUSH
10127: CALL_OW 88
// Say ( Brighton , DBrighton-C2 ) ;
10131: LD_EXP 8
10135: PPUSH
10136: LD_STRING DBrighton-C2
10138: PPUSH
10139: CALL_OW 88
// end ; MCE_ResearchComplete ( tech , lab ) ;
10143: LD_VAR 0 1
10147: PPUSH
10148: LD_VAR 0 2
10152: PPUSH
10153: CALL 80822 0 2
// end ;
10157: PPOPN 2
10159: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
10160: LD_VAR 0 1
10164: PPUSH
10165: LD_VAR 0 2
10169: PPUSH
10170: CALL 83326 0 2
// end ;
10174: PPOPN 2
10176: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
10177: LD_VAR 0 1
10181: PPUSH
10182: CALL 82394 0 1
// end ;
10186: PPOPN 1
10188: END
// export RUFirstDepot ; on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 then
10189: LD_VAR 0 1
10193: PPUSH
10194: CALL_OW 266
10198: PUSH
10199: LD_INT 0
10201: EQUAL
10202: PUSH
10203: LD_VAR 0 1
10207: PPUSH
10208: CALL_OW 255
10212: PUSH
10213: LD_INT 3
10215: EQUAL
10216: AND
10217: IFFALSE 10279
// begin SetResourceType ( GetBase ( b ) , mat_cans , 10000 ) ;
10219: LD_VAR 0 1
10223: PPUSH
10224: CALL_OW 274
10228: PPUSH
10229: LD_INT 1
10231: PPUSH
10232: LD_INT 10000
10234: PPUSH
10235: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
10239: LD_VAR 0 1
10243: PPUSH
10244: CALL_OW 274
10248: PPUSH
10249: LD_INT 2
10251: PPUSH
10252: LD_INT 250
10254: PPUSH
10255: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 100 ) ;
10259: LD_VAR 0 1
10263: PPUSH
10264: CALL_OW 274
10268: PPUSH
10269: LD_INT 3
10271: PPUSH
10272: LD_INT 100
10274: PPUSH
10275: CALL_OW 277
// end ; MCE_BuildingComplete ( b ) ;
10279: LD_VAR 0 1
10283: PPUSH
10284: CALL 82635 0 1
// end ;
10288: PPOPN 1
10290: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
10291: LD_VAR 0 1
10295: PPUSH
10296: LD_VAR 0 2
10300: PPUSH
10301: LD_VAR 0 3
10305: PPUSH
10306: LD_VAR 0 4
10310: PPUSH
10311: LD_VAR 0 5
10315: PPUSH
10316: CALL 80442 0 5
// end ;
10320: PPOPN 5
10322: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
10323: LD_VAR 0 1
10327: PPUSH
10328: LD_VAR 0 2
10332: PPUSH
10333: CALL 80038 0 2
// end ;
10337: PPOPN 2
10339: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
10340: LD_VAR 0 1
10344: PPUSH
10345: LD_VAR 0 2
10349: PPUSH
10350: LD_VAR 0 3
10354: PPUSH
10355: LD_VAR 0 4
10359: PPUSH
10360: CALL 79876 0 4
// end ;
10364: PPOPN 4
10366: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
10367: LD_VAR 0 1
10371: PPUSH
10372: LD_VAR 0 2
10376: PPUSH
10377: LD_VAR 0 3
10381: PPUSH
10382: CALL 79651 0 3
// end ;
10386: PPOPN 3
10388: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
10389: LD_VAR 0 1
10393: PPUSH
10394: LD_VAR 0 2
10398: PPUSH
10399: CALL 79536 0 2
// end ;
10403: PPOPN 2
10405: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
10406: LD_VAR 0 1
10410: PPUSH
10411: LD_VAR 0 2
10415: PPUSH
10416: CALL 83587 0 2
// end ;
10420: PPOPN 2
10422: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin if GetSide ( driver ) = 6 then
10423: LD_VAR 0 1
10427: PPUSH
10428: CALL_OW 255
10432: PUSH
10433: LD_INT 6
10435: EQUAL
10436: IFFALSE 10566
// begin if driver in [ Yashin , Sevi , Gaydar , Popov ] then
10438: LD_VAR 0 1
10442: PUSH
10443: LD_EXP 12
10447: PUSH
10448: LD_EXP 15
10452: PUSH
10453: LD_EXP 14
10457: PUSH
10458: LD_EXP 13
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: IN
10469: IFFALSE 10473
// exit ;
10471: GO 10590
// if AssaultStarted then
10473: LD_EXP 7
10477: IFFALSE 10551
// case Rand ( 1 , 4 ) of 1 .. 3 :
10479: LD_INT 1
10481: PPUSH
10482: LD_INT 4
10484: PPUSH
10485: CALL_OW 12
10489: PUSH
10490: LD_INT 1
10492: DOUBLE
10493: GREATEREQUAL
10494: IFFALSE 10502
10496: LD_INT 3
10498: DOUBLE
10499: LESSEQUAL
10500: IFTRUE 10504
10502: GO 10522
10504: POP
// ComAgressiveMove ( driver , 67 , 37 ) ; 4 :
10505: LD_VAR 0 1
10509: PPUSH
10510: LD_INT 67
10512: PPUSH
10513: LD_INT 37
10515: PPUSH
10516: CALL_OW 114
10520: GO 10549
10522: LD_INT 4
10524: DOUBLE
10525: EQUAL
10526: IFTRUE 10530
10528: GO 10548
10530: POP
// ComMoveXY ( driver , 120 , 131 ) ; end else
10531: LD_VAR 0 1
10535: PPUSH
10536: LD_INT 120
10538: PPUSH
10539: LD_INT 131
10541: PPUSH
10542: CALL_OW 111
10546: GO 10549
10548: POP
10549: GO 10566
// ComMoveXY ( driver , 120 , 131 ) ;
10551: LD_VAR 0 1
10555: PPUSH
10556: LD_INT 120
10558: PPUSH
10559: LD_INT 131
10561: PPUSH
10562: CALL_OW 111
// end ; MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
10566: LD_VAR 0 1
10570: PPUSH
10571: LD_VAR 0 2
10575: PPUSH
10576: LD_VAR 0 3
10580: PPUSH
10581: LD_VAR 0 4
10585: PPUSH
10586: CALL 83803 0 4
// end ;
10590: PPOPN 4
10592: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
10593: LD_VAR 0 1
10597: PPUSH
10598: LD_VAR 0 2
10602: PPUSH
10603: CALL 79345 0 2
// end ;
10607: PPOPN 2
10609: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10610: LD_VAR 0 1
10614: PPUSH
10615: CALL 84042 0 1
// end ; end_of_file
10619: PPOPN 1
10621: END
// every 0 0$1 trigger JMM_Arrived and RussiansDefeated do
10622: LD_EXP 5
10626: PUSH
10627: LD_EXP 42
10631: AND
10632: IFFALSE 10803
10634: GO 10636
10636: DISABLE
// begin wait ( 0 0$2 ) ;
10637: LD_INT 70
10639: PPUSH
10640: CALL_OW 67
// Say ( Brighton , DBrighton-G1 ) ;
10644: LD_EXP 8
10648: PPUSH
10649: LD_STRING DBrighton-G1
10651: PPUSH
10652: CALL_OW 88
// if Losses < 1 then
10656: LD_EXP 43
10660: PUSH
10661: LD_INT 1
10663: LESS
10664: IFFALSE 10678
// AddMedal ( Losses , 1 ) else
10666: LD_STRING Losses
10668: PPUSH
10669: LD_INT 1
10671: PPUSH
10672: CALL_OW 101
10676: GO 10711
// if Losses < 5 then
10678: LD_EXP 43
10682: PUSH
10683: LD_INT 5
10685: LESS
10686: IFFALSE 10700
// AddMedal ( Losses , 2 ) else
10688: LD_STRING Losses
10690: PPUSH
10691: LD_INT 2
10693: PPUSH
10694: CALL_OW 101
10698: GO 10711
// AddMedal ( Losses , - 1 ) ;
10700: LD_STRING Losses
10702: PPUSH
10703: LD_INT 1
10705: NEG
10706: PPUSH
10707: CALL_OW 101
// if LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
10711: LD_EXP 6
10715: PUSH
10716: LD_INT 10
10718: PPUSH
10719: LD_INT 1
10721: PPUSH
10722: CALL_OW 321
10726: PUSH
10727: LD_INT 2
10729: EQUAL
10730: AND
10731: IFFALSE 10745
// AddMedal ( Laser , 1 ) else
10733: LD_STRING Laser
10735: PPUSH
10736: LD_INT 1
10738: PPUSH
10739: CALL_OW 101
10743: GO 10792
// if not LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
10745: LD_EXP 6
10749: NOT
10750: PUSH
10751: LD_INT 10
10753: PPUSH
10754: LD_INT 1
10756: PPUSH
10757: CALL_OW 321
10761: PUSH
10762: LD_INT 2
10764: EQUAL
10765: AND
10766: IFFALSE 10781
// AddMedal ( Laser , - 1 ) else
10768: LD_STRING Laser
10770: PPUSH
10771: LD_INT 1
10773: NEG
10774: PPUSH
10775: CALL_OW 101
10779: GO 10792
// AddMedal ( Laser , - 2 ) ;
10781: LD_STRING Laser
10783: PPUSH
10784: LD_INT 2
10786: NEG
10787: PPUSH
10788: CALL_OW 101
// GiveMedals ( BaseMain ) ;
10792: LD_STRING BaseMain
10794: PPUSH
10795: CALL_OW 102
// YouWin ;
10799: CALL_OW 103
// end ; end_of_file
10803: END
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
10804: LD_INT 0
10806: PPUSH
10807: PPUSH
// area = ListEnvironmentArea ( area ) ;
10808: LD_ADDR_VAR 0 2
10812: PUSH
10813: LD_VAR 0 2
10817: PPUSH
10818: CALL_OW 353
10822: ST_TO_ADDR
// if bulldozer > 0 then
10823: LD_VAR 0 1
10827: PUSH
10828: LD_INT 0
10830: GREATER
10831: IFFALSE 10942
// for i = area downto 1 do
10833: LD_ADDR_VAR 0 4
10837: PUSH
10838: DOUBLE
10839: LD_VAR 0 2
10843: INC
10844: ST_TO_ADDR
10845: LD_INT 1
10847: PUSH
10848: FOR_DOWNTO
10849: IFFALSE 10940
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
10851: LD_VAR 0 2
10855: PUSH
10856: LD_VAR 0 4
10860: ARRAY
10861: PUSH
10862: LD_INT 1
10864: ARRAY
10865: PPUSH
10866: LD_VAR 0 2
10870: PUSH
10871: LD_VAR 0 4
10875: ARRAY
10876: PUSH
10877: LD_INT 2
10879: ARRAY
10880: PPUSH
10881: CALL_OW 351
10885: IFFALSE 10938
// if not HasTask ( bulldozer ) then
10887: LD_VAR 0 1
10891: PPUSH
10892: CALL_OW 314
10896: NOT
10897: IFFALSE 10938
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
10899: LD_VAR 0 1
10903: PPUSH
10904: LD_VAR 0 2
10908: PUSH
10909: LD_VAR 0 4
10913: ARRAY
10914: PUSH
10915: LD_INT 1
10917: ARRAY
10918: PPUSH
10919: LD_VAR 0 2
10923: PUSH
10924: LD_VAR 0 4
10928: ARRAY
10929: PUSH
10930: LD_INT 2
10932: ARRAY
10933: PPUSH
10934: CALL_OW 171
10938: GO 10848
10940: POP
10941: POP
// end ;
10942: LD_VAR 0 3
10946: RET
// export function ComMeeting ( team , area ) ; var i , tmp ; begin
10947: LD_INT 0
10949: PPUSH
10950: PPUSH
10951: PPUSH
// tmp := AreaToList ( area , 0 ) ;
10952: LD_ADDR_VAR 0 5
10956: PUSH
10957: LD_VAR 0 2
10961: PPUSH
10962: LD_INT 0
10964: PPUSH
10965: CALL_OW 517
10969: ST_TO_ADDR
// for i = 1 to team do
10970: LD_ADDR_VAR 0 4
10974: PUSH
10975: DOUBLE
10976: LD_INT 1
10978: DEC
10979: ST_TO_ADDR
10980: LD_VAR 0 1
10984: PUSH
10985: FOR_TO
10986: IFFALSE 11087
// begin if IsInUnit ( team [ i ] ) then
10988: LD_VAR 0 1
10992: PUSH
10993: LD_VAR 0 4
10997: ARRAY
10998: PPUSH
10999: CALL_OW 310
11003: IFFALSE 11020
// ComExitBuilding ( team [ i ] ) ;
11005: LD_VAR 0 1
11009: PUSH
11010: LD_VAR 0 4
11014: ARRAY
11015: PPUSH
11016: CALL_OW 122
// AddComMoveXY ( team [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
11020: LD_VAR 0 1
11024: PUSH
11025: LD_VAR 0 4
11029: ARRAY
11030: PPUSH
11031: LD_VAR 0 5
11035: PUSH
11036: LD_INT 1
11038: ARRAY
11039: PUSH
11040: LD_VAR 0 4
11044: ARRAY
11045: PPUSH
11046: LD_VAR 0 5
11050: PUSH
11051: LD_INT 2
11053: ARRAY
11054: PUSH
11055: LD_VAR 0 4
11059: ARRAY
11060: PPUSH
11061: CALL_OW 171
// AddComTurnUnit ( team [ i ] , Brighton ) ;
11065: LD_VAR 0 1
11069: PUSH
11070: LD_VAR 0 4
11074: ARRAY
11075: PPUSH
11076: LD_EXP 8
11080: PPUSH
11081: CALL_OW 179
// end ;
11085: GO 10985
11087: POP
11088: POP
// end ; end_of_file
11089: LD_VAR 0 3
11093: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
11094: LD_INT 0
11096: PPUSH
11097: PPUSH
// if exist_mode then
11098: LD_VAR 0 2
11102: IFFALSE 11127
// unit := CreateCharacter ( prefix & ident ) else
11104: LD_ADDR_VAR 0 5
11108: PUSH
11109: LD_VAR 0 3
11113: PUSH
11114: LD_VAR 0 1
11118: STR
11119: PPUSH
11120: CALL_OW 34
11124: ST_TO_ADDR
11125: GO 11142
// unit := NewCharacter ( ident ) ;
11127: LD_ADDR_VAR 0 5
11131: PUSH
11132: LD_VAR 0 1
11136: PPUSH
11137: CALL_OW 25
11141: ST_TO_ADDR
// result := unit ;
11142: LD_ADDR_VAR 0 4
11146: PUSH
11147: LD_VAR 0 5
11151: ST_TO_ADDR
// end ;
11152: LD_VAR 0 4
11156: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
11157: LD_INT 0
11159: PPUSH
11160: PPUSH
// if not side or not nation then
11161: LD_VAR 0 1
11165: NOT
11166: PUSH
11167: LD_VAR 0 2
11171: NOT
11172: OR
11173: IFFALSE 11177
// exit ;
11175: GO 11821
// case nation of nation_american :
11177: LD_VAR 0 2
11181: PUSH
11182: LD_INT 1
11184: DOUBLE
11185: EQUAL
11186: IFTRUE 11190
11188: GO 11364
11190: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
11191: LD_ADDR_VAR 0 4
11195: PUSH
11196: LD_INT 35
11198: PUSH
11199: LD_INT 45
11201: PUSH
11202: LD_INT 46
11204: PUSH
11205: LD_INT 47
11207: PUSH
11208: LD_INT 1
11210: PUSH
11211: LD_INT 2
11213: PUSH
11214: LD_INT 6
11216: PUSH
11217: LD_INT 15
11219: PUSH
11220: LD_INT 16
11222: PUSH
11223: LD_INT 7
11225: PUSH
11226: LD_INT 12
11228: PUSH
11229: LD_INT 13
11231: PUSH
11232: LD_INT 10
11234: PUSH
11235: LD_INT 14
11237: PUSH
11238: LD_INT 20
11240: PUSH
11241: LD_INT 21
11243: PUSH
11244: LD_INT 22
11246: PUSH
11247: LD_INT 25
11249: PUSH
11250: LD_INT 32
11252: PUSH
11253: LD_INT 27
11255: PUSH
11256: LD_INT 36
11258: PUSH
11259: LD_INT 69
11261: PUSH
11262: LD_INT 39
11264: PUSH
11265: LD_INT 34
11267: PUSH
11268: LD_INT 40
11270: PUSH
11271: LD_INT 48
11273: PUSH
11274: LD_INT 49
11276: PUSH
11277: LD_INT 50
11279: PUSH
11280: LD_INT 51
11282: PUSH
11283: LD_INT 52
11285: PUSH
11286: LD_INT 53
11288: PUSH
11289: LD_INT 54
11291: PUSH
11292: LD_INT 55
11294: PUSH
11295: LD_INT 56
11297: PUSH
11298: LD_INT 57
11300: PUSH
11301: LD_INT 58
11303: PUSH
11304: LD_INT 59
11306: PUSH
11307: LD_INT 60
11309: PUSH
11310: LD_INT 61
11312: PUSH
11313: LD_INT 62
11315: PUSH
11316: LD_INT 80
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: ST_TO_ADDR
11362: GO 11745
11364: LD_INT 2
11366: DOUBLE
11367: EQUAL
11368: IFTRUE 11372
11370: GO 11554
11372: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 ] ; nation_russian :
11373: LD_ADDR_VAR 0 4
11377: PUSH
11378: LD_INT 35
11380: PUSH
11381: LD_INT 45
11383: PUSH
11384: LD_INT 46
11386: PUSH
11387: LD_INT 47
11389: PUSH
11390: LD_INT 70
11392: PUSH
11393: LD_INT 1
11395: PUSH
11396: LD_INT 11
11398: PUSH
11399: LD_INT 3
11401: PUSH
11402: LD_INT 4
11404: PUSH
11405: LD_INT 5
11407: PUSH
11408: LD_INT 6
11410: PUSH
11411: LD_INT 15
11413: PUSH
11414: LD_INT 18
11416: PUSH
11417: LD_INT 7
11419: PUSH
11420: LD_INT 17
11422: PUSH
11423: LD_INT 8
11425: PUSH
11426: LD_INT 20
11428: PUSH
11429: LD_INT 21
11431: PUSH
11432: LD_INT 22
11434: PUSH
11435: LD_INT 72
11437: PUSH
11438: LD_INT 26
11440: PUSH
11441: LD_INT 69
11443: PUSH
11444: LD_INT 39
11446: PUSH
11447: LD_INT 40
11449: PUSH
11450: LD_INT 41
11452: PUSH
11453: LD_INT 42
11455: PUSH
11456: LD_INT 43
11458: PUSH
11459: LD_INT 48
11461: PUSH
11462: LD_INT 49
11464: PUSH
11465: LD_INT 50
11467: PUSH
11468: LD_INT 51
11470: PUSH
11471: LD_INT 52
11473: PUSH
11474: LD_INT 53
11476: PUSH
11477: LD_INT 54
11479: PUSH
11480: LD_INT 55
11482: PUSH
11483: LD_INT 56
11485: PUSH
11486: LD_INT 60
11488: PUSH
11489: LD_INT 61
11491: PUSH
11492: LD_INT 62
11494: PUSH
11495: LD_INT 66
11497: PUSH
11498: LD_INT 67
11500: PUSH
11501: LD_INT 68
11503: PUSH
11504: LD_INT 81
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: ST_TO_ADDR
11552: GO 11745
11554: LD_INT 3
11556: DOUBLE
11557: EQUAL
11558: IFTRUE 11562
11560: GO 11744
11562: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
11563: LD_ADDR_VAR 0 4
11567: PUSH
11568: LD_INT 46
11570: PUSH
11571: LD_INT 47
11573: PUSH
11574: LD_INT 1
11576: PUSH
11577: LD_INT 2
11579: PUSH
11580: LD_INT 11
11582: PUSH
11583: LD_INT 9
11585: PUSH
11586: LD_INT 20
11588: PUSH
11589: LD_INT 19
11591: PUSH
11592: LD_INT 21
11594: PUSH
11595: LD_INT 24
11597: PUSH
11598: LD_INT 22
11600: PUSH
11601: LD_INT 25
11603: PUSH
11604: LD_INT 28
11606: PUSH
11607: LD_INT 29
11609: PUSH
11610: LD_INT 30
11612: PUSH
11613: LD_INT 31
11615: PUSH
11616: LD_INT 37
11618: PUSH
11619: LD_INT 38
11621: PUSH
11622: LD_INT 32
11624: PUSH
11625: LD_INT 27
11627: PUSH
11628: LD_INT 33
11630: PUSH
11631: LD_INT 69
11633: PUSH
11634: LD_INT 39
11636: PUSH
11637: LD_INT 34
11639: PUSH
11640: LD_INT 40
11642: PUSH
11643: LD_INT 71
11645: PUSH
11646: LD_INT 23
11648: PUSH
11649: LD_INT 44
11651: PUSH
11652: LD_INT 48
11654: PUSH
11655: LD_INT 49
11657: PUSH
11658: LD_INT 50
11660: PUSH
11661: LD_INT 51
11663: PUSH
11664: LD_INT 52
11666: PUSH
11667: LD_INT 53
11669: PUSH
11670: LD_INT 54
11672: PUSH
11673: LD_INT 55
11675: PUSH
11676: LD_INT 56
11678: PUSH
11679: LD_INT 57
11681: PUSH
11682: LD_INT 58
11684: PUSH
11685: LD_INT 59
11687: PUSH
11688: LD_INT 63
11690: PUSH
11691: LD_INT 64
11693: PUSH
11694: LD_INT 65
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: ST_TO_ADDR
11742: GO 11745
11744: POP
// if state > - 1 and state < 3 then
11745: LD_VAR 0 3
11749: PUSH
11750: LD_INT 1
11752: NEG
11753: GREATER
11754: PUSH
11755: LD_VAR 0 3
11759: PUSH
11760: LD_INT 3
11762: LESS
11763: AND
11764: IFFALSE 11821
// for i in result do
11766: LD_ADDR_VAR 0 5
11770: PUSH
11771: LD_VAR 0 4
11775: PUSH
11776: FOR_IN
11777: IFFALSE 11819
// if GetTech ( i , side ) <> state then
11779: LD_VAR 0 5
11783: PPUSH
11784: LD_VAR 0 1
11788: PPUSH
11789: CALL_OW 321
11793: PUSH
11794: LD_VAR 0 3
11798: NONEQUAL
11799: IFFALSE 11817
// result := result diff i ;
11801: LD_ADDR_VAR 0 4
11805: PUSH
11806: LD_VAR 0 4
11810: PUSH
11811: LD_VAR 0 5
11815: DIFF
11816: ST_TO_ADDR
11817: GO 11776
11819: POP
11820: POP
// end ;
11821: LD_VAR 0 4
11825: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11826: LD_INT 0
11828: PPUSH
11829: PPUSH
11830: PPUSH
// result := true ;
11831: LD_ADDR_VAR 0 3
11835: PUSH
11836: LD_INT 1
11838: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11839: LD_ADDR_VAR 0 5
11843: PUSH
11844: LD_VAR 0 2
11848: PPUSH
11849: CALL_OW 480
11853: ST_TO_ADDR
// if not tmp then
11854: LD_VAR 0 5
11858: NOT
11859: IFFALSE 11863
// exit ;
11861: GO 11912
// for i in tmp do
11863: LD_ADDR_VAR 0 4
11867: PUSH
11868: LD_VAR 0 5
11872: PUSH
11873: FOR_IN
11874: IFFALSE 11910
// if GetTech ( i , side ) <> state_researched then
11876: LD_VAR 0 4
11880: PPUSH
11881: LD_VAR 0 1
11885: PPUSH
11886: CALL_OW 321
11890: PUSH
11891: LD_INT 2
11893: NONEQUAL
11894: IFFALSE 11908
// begin result := false ;
11896: LD_ADDR_VAR 0 3
11900: PUSH
11901: LD_INT 0
11903: ST_TO_ADDR
// exit ;
11904: POP
11905: POP
11906: GO 11912
// end ;
11908: GO 11873
11910: POP
11911: POP
// end ;
11912: LD_VAR 0 3
11916: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11917: LD_INT 0
11919: PPUSH
11920: PPUSH
11921: PPUSH
11922: PPUSH
11923: PPUSH
11924: PPUSH
11925: PPUSH
11926: PPUSH
11927: PPUSH
11928: PPUSH
11929: PPUSH
11930: PPUSH
11931: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11932: LD_VAR 0 1
11936: NOT
11937: PUSH
11938: LD_VAR 0 1
11942: PPUSH
11943: CALL_OW 257
11947: PUSH
11948: LD_INT 9
11950: NONEQUAL
11951: OR
11952: IFFALSE 11956
// exit ;
11954: GO 12529
// side := GetSide ( unit ) ;
11956: LD_ADDR_VAR 0 9
11960: PUSH
11961: LD_VAR 0 1
11965: PPUSH
11966: CALL_OW 255
11970: ST_TO_ADDR
// tech_space := tech_spacanom ;
11971: LD_ADDR_VAR 0 12
11975: PUSH
11976: LD_INT 29
11978: ST_TO_ADDR
// tech_time := tech_taurad ;
11979: LD_ADDR_VAR 0 13
11983: PUSH
11984: LD_INT 28
11986: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11987: LD_ADDR_VAR 0 11
11991: PUSH
11992: LD_VAR 0 1
11996: PPUSH
11997: CALL_OW 310
12001: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
12002: LD_VAR 0 11
12006: PPUSH
12007: CALL_OW 247
12011: PUSH
12012: LD_INT 2
12014: EQUAL
12015: IFFALSE 12019
// exit ;
12017: GO 12529
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12019: LD_ADDR_VAR 0 8
12023: PUSH
12024: LD_INT 81
12026: PUSH
12027: LD_VAR 0 9
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: PUSH
12036: LD_INT 3
12038: PUSH
12039: LD_INT 21
12041: PUSH
12042: LD_INT 3
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: PPUSH
12057: CALL_OW 69
12061: ST_TO_ADDR
// if not tmp then
12062: LD_VAR 0 8
12066: NOT
12067: IFFALSE 12071
// exit ;
12069: GO 12529
// if in_unit then
12071: LD_VAR 0 11
12075: IFFALSE 12099
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
12077: LD_ADDR_VAR 0 10
12081: PUSH
12082: LD_VAR 0 8
12086: PPUSH
12087: LD_VAR 0 11
12091: PPUSH
12092: CALL_OW 74
12096: ST_TO_ADDR
12097: GO 12119
// enemy := NearestUnitToUnit ( tmp , unit ) ;
12099: LD_ADDR_VAR 0 10
12103: PUSH
12104: LD_VAR 0 8
12108: PPUSH
12109: LD_VAR 0 1
12113: PPUSH
12114: CALL_OW 74
12118: ST_TO_ADDR
// if not enemy then
12119: LD_VAR 0 10
12123: NOT
12124: IFFALSE 12128
// exit ;
12126: GO 12529
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
12128: LD_VAR 0 11
12132: PUSH
12133: LD_VAR 0 11
12137: PPUSH
12138: LD_VAR 0 10
12142: PPUSH
12143: CALL_OW 296
12147: PUSH
12148: LD_INT 13
12150: GREATER
12151: AND
12152: PUSH
12153: LD_VAR 0 1
12157: PPUSH
12158: LD_VAR 0 10
12162: PPUSH
12163: CALL_OW 296
12167: PUSH
12168: LD_INT 12
12170: GREATER
12171: OR
12172: IFFALSE 12176
// exit ;
12174: GO 12529
// missile := [ 1 ] ;
12176: LD_ADDR_VAR 0 14
12180: PUSH
12181: LD_INT 1
12183: PUSH
12184: EMPTY
12185: LIST
12186: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12187: LD_VAR 0 9
12191: PPUSH
12192: LD_VAR 0 12
12196: PPUSH
12197: CALL_OW 325
12201: IFFALSE 12230
// missile := Insert ( missile , missile + 1 , 2 ) ;
12203: LD_ADDR_VAR 0 14
12207: PUSH
12208: LD_VAR 0 14
12212: PPUSH
12213: LD_VAR 0 14
12217: PUSH
12218: LD_INT 1
12220: PLUS
12221: PPUSH
12222: LD_INT 2
12224: PPUSH
12225: CALL_OW 2
12229: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12230: LD_VAR 0 9
12234: PPUSH
12235: LD_VAR 0 13
12239: PPUSH
12240: CALL_OW 325
12244: PUSH
12245: LD_VAR 0 10
12249: PPUSH
12250: CALL_OW 255
12254: PPUSH
12255: LD_VAR 0 13
12259: PPUSH
12260: CALL_OW 325
12264: NOT
12265: AND
12266: IFFALSE 12295
// missile := Insert ( missile , missile + 1 , 3 ) ;
12268: LD_ADDR_VAR 0 14
12272: PUSH
12273: LD_VAR 0 14
12277: PPUSH
12278: LD_VAR 0 14
12282: PUSH
12283: LD_INT 1
12285: PLUS
12286: PPUSH
12287: LD_INT 3
12289: PPUSH
12290: CALL_OW 2
12294: ST_TO_ADDR
// if missile < 2 then
12295: LD_VAR 0 14
12299: PUSH
12300: LD_INT 2
12302: LESS
12303: IFFALSE 12307
// exit ;
12305: GO 12529
// x := GetX ( enemy ) ;
12307: LD_ADDR_VAR 0 4
12311: PUSH
12312: LD_VAR 0 10
12316: PPUSH
12317: CALL_OW 250
12321: ST_TO_ADDR
// y := GetY ( enemy ) ;
12322: LD_ADDR_VAR 0 5
12326: PUSH
12327: LD_VAR 0 10
12331: PPUSH
12332: CALL_OW 251
12336: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12337: LD_ADDR_VAR 0 6
12341: PUSH
12342: LD_VAR 0 4
12346: PUSH
12347: LD_INT 1
12349: NEG
12350: PPUSH
12351: LD_INT 1
12353: PPUSH
12354: CALL_OW 12
12358: PLUS
12359: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12360: LD_ADDR_VAR 0 7
12364: PUSH
12365: LD_VAR 0 5
12369: PUSH
12370: LD_INT 1
12372: NEG
12373: PPUSH
12374: LD_INT 1
12376: PPUSH
12377: CALL_OW 12
12381: PLUS
12382: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12383: LD_VAR 0 6
12387: PPUSH
12388: LD_VAR 0 7
12392: PPUSH
12393: CALL_OW 488
12397: NOT
12398: IFFALSE 12420
// begin _x := x ;
12400: LD_ADDR_VAR 0 6
12404: PUSH
12405: LD_VAR 0 4
12409: ST_TO_ADDR
// _y := y ;
12410: LD_ADDR_VAR 0 7
12414: PUSH
12415: LD_VAR 0 5
12419: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12420: LD_ADDR_VAR 0 3
12424: PUSH
12425: LD_INT 1
12427: PPUSH
12428: LD_VAR 0 14
12432: PPUSH
12433: CALL_OW 12
12437: ST_TO_ADDR
// case i of 1 :
12438: LD_VAR 0 3
12442: PUSH
12443: LD_INT 1
12445: DOUBLE
12446: EQUAL
12447: IFTRUE 12451
12449: GO 12468
12451: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12452: LD_VAR 0 1
12456: PPUSH
12457: LD_VAR 0 10
12461: PPUSH
12462: CALL_OW 115
12466: GO 12529
12468: LD_INT 2
12470: DOUBLE
12471: EQUAL
12472: IFTRUE 12476
12474: GO 12498
12476: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12477: LD_VAR 0 1
12481: PPUSH
12482: LD_VAR 0 6
12486: PPUSH
12487: LD_VAR 0 7
12491: PPUSH
12492: CALL_OW 153
12496: GO 12529
12498: LD_INT 3
12500: DOUBLE
12501: EQUAL
12502: IFTRUE 12506
12504: GO 12528
12506: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12507: LD_VAR 0 1
12511: PPUSH
12512: LD_VAR 0 6
12516: PPUSH
12517: LD_VAR 0 7
12521: PPUSH
12522: CALL_OW 154
12526: GO 12529
12528: POP
// end ;
12529: LD_VAR 0 2
12533: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
12534: LD_INT 0
12536: PPUSH
12537: PPUSH
12538: PPUSH
12539: PPUSH
12540: PPUSH
12541: PPUSH
// if not unit or not building then
12542: LD_VAR 0 1
12546: NOT
12547: PUSH
12548: LD_VAR 0 2
12552: NOT
12553: OR
12554: IFFALSE 12558
// exit ;
12556: GO 12716
// x := GetX ( building ) ;
12558: LD_ADDR_VAR 0 5
12562: PUSH
12563: LD_VAR 0 2
12567: PPUSH
12568: CALL_OW 250
12572: ST_TO_ADDR
// y := GetY ( building ) ;
12573: LD_ADDR_VAR 0 6
12577: PUSH
12578: LD_VAR 0 2
12582: PPUSH
12583: CALL_OW 251
12587: ST_TO_ADDR
// for i = 0 to 5 do
12588: LD_ADDR_VAR 0 4
12592: PUSH
12593: DOUBLE
12594: LD_INT 0
12596: DEC
12597: ST_TO_ADDR
12598: LD_INT 5
12600: PUSH
12601: FOR_TO
12602: IFFALSE 12714
// begin _x := ShiftX ( x , i , 3 ) ;
12604: LD_ADDR_VAR 0 7
12608: PUSH
12609: LD_VAR 0 5
12613: PPUSH
12614: LD_VAR 0 4
12618: PPUSH
12619: LD_INT 3
12621: PPUSH
12622: CALL_OW 272
12626: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
12627: LD_ADDR_VAR 0 8
12631: PUSH
12632: LD_VAR 0 6
12636: PPUSH
12637: LD_VAR 0 4
12641: PPUSH
12642: LD_INT 3
12644: PPUSH
12645: CALL_OW 273
12649: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12650: LD_VAR 0 7
12654: PPUSH
12655: LD_VAR 0 8
12659: PPUSH
12660: CALL_OW 488
12664: NOT
12665: IFFALSE 12669
// continue ;
12667: GO 12601
// if HexInfo ( _x , _y ) = 0 then
12669: LD_VAR 0 7
12673: PPUSH
12674: LD_VAR 0 8
12678: PPUSH
12679: CALL_OW 428
12683: PUSH
12684: LD_INT 0
12686: EQUAL
12687: IFFALSE 12712
// begin ComMoveXY ( unit , _x , _y ) ;
12689: LD_VAR 0 1
12693: PPUSH
12694: LD_VAR 0 7
12698: PPUSH
12699: LD_VAR 0 8
12703: PPUSH
12704: CALL_OW 111
// exit ;
12708: POP
12709: POP
12710: GO 12716
// end ; end ;
12712: GO 12601
12714: POP
12715: POP
// end ;
12716: LD_VAR 0 3
12720: RET
// export function ScanBase ( side , base_area ) ; begin
12721: LD_INT 0
12723: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12724: LD_ADDR_VAR 0 3
12728: PUSH
12729: LD_VAR 0 2
12733: PPUSH
12734: LD_INT 81
12736: PUSH
12737: LD_VAR 0 1
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: PPUSH
12746: CALL_OW 70
12750: ST_TO_ADDR
// end ;
12751: LD_VAR 0 3
12755: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
12756: LD_INT 0
12758: PPUSH
12759: PPUSH
12760: PPUSH
12761: PPUSH
12762: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
12763: LD_VAR 0 1
12767: NOT
12768: PUSH
12769: LD_EXP 52
12773: PUSH
12774: LD_VAR 0 1
12778: ARRAY
12779: NOT
12780: OR
12781: PUSH
12782: LD_VAR 0 2
12786: NOT
12787: OR
12788: PUSH
12789: LD_VAR 0 3
12793: NOT
12794: OR
12795: IFFALSE 12799
// exit ;
12797: GO 13312
// side := mc_sides [ base ] ;
12799: LD_ADDR_VAR 0 6
12803: PUSH
12804: LD_EXP 78
12808: PUSH
12809: LD_VAR 0 1
12813: ARRAY
12814: ST_TO_ADDR
// if not side then
12815: LD_VAR 0 6
12819: NOT
12820: IFFALSE 12824
// exit ;
12822: GO 13312
// for i in solds do
12824: LD_ADDR_VAR 0 7
12828: PUSH
12829: LD_VAR 0 2
12833: PUSH
12834: FOR_IN
12835: IFFALSE 12896
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
12837: LD_VAR 0 7
12841: PPUSH
12842: CALL_OW 310
12846: PPUSH
12847: CALL_OW 266
12851: PUSH
12852: LD_INT 32
12854: PUSH
12855: LD_INT 31
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: IN
12862: IFFALSE 12882
// solds := solds diff i else
12864: LD_ADDR_VAR 0 2
12868: PUSH
12869: LD_VAR 0 2
12873: PUSH
12874: LD_VAR 0 7
12878: DIFF
12879: ST_TO_ADDR
12880: GO 12894
// SetTag ( i , 18 ) ;
12882: LD_VAR 0 7
12886: PPUSH
12887: LD_INT 18
12889: PPUSH
12890: CALL_OW 109
12894: GO 12834
12896: POP
12897: POP
// if not solds then
12898: LD_VAR 0 2
12902: NOT
12903: IFFALSE 12907
// exit ;
12905: GO 13312
// repeat wait ( 0 0$1 ) ;
12907: LD_INT 35
12909: PPUSH
12910: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
12914: LD_ADDR_VAR 0 5
12918: PUSH
12919: LD_VAR 0 6
12923: PPUSH
12924: LD_VAR 0 3
12928: PPUSH
12929: CALL 12721 0 2
12933: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
12934: LD_EXP 52
12938: PUSH
12939: LD_VAR 0 1
12943: ARRAY
12944: NOT
12945: PUSH
12946: LD_EXP 52
12950: PUSH
12951: LD_VAR 0 1
12955: ARRAY
12956: PUSH
12957: EMPTY
12958: EQUAL
12959: OR
12960: IFFALSE 12997
// begin for i in solds do
12962: LD_ADDR_VAR 0 7
12966: PUSH
12967: LD_VAR 0 2
12971: PUSH
12972: FOR_IN
12973: IFFALSE 12986
// ComStop ( i ) ;
12975: LD_VAR 0 7
12979: PPUSH
12980: CALL_OW 141
12984: GO 12972
12986: POP
12987: POP
// solds := [ ] ;
12988: LD_ADDR_VAR 0 2
12992: PUSH
12993: EMPTY
12994: ST_TO_ADDR
// exit ;
12995: GO 13312
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
12997: LD_VAR 0 5
13001: NOT
13002: PUSH
13003: LD_VAR 0 5
13007: PUSH
13008: LD_INT 3
13010: GREATER
13011: OR
13012: PUSH
13013: LD_EXP 74
13017: PUSH
13018: LD_VAR 0 1
13022: ARRAY
13023: OR
13024: IFFALSE 13065
// begin for i in solds do
13026: LD_ADDR_VAR 0 7
13030: PUSH
13031: LD_VAR 0 2
13035: PUSH
13036: FOR_IN
13037: IFFALSE 13061
// if HasTask ( i ) then
13039: LD_VAR 0 7
13043: PPUSH
13044: CALL_OW 314
13048: IFFALSE 13059
// ComStop ( i ) ;
13050: LD_VAR 0 7
13054: PPUSH
13055: CALL_OW 141
13059: GO 13036
13061: POP
13062: POP
// break ;
13063: GO 13300
// end ; for i in solds do
13065: LD_ADDR_VAR 0 7
13069: PUSH
13070: LD_VAR 0 2
13074: PUSH
13075: FOR_IN
13076: IFFALSE 13292
// begin if IsInUnit ( i ) then
13078: LD_VAR 0 7
13082: PPUSH
13083: CALL_OW 310
13087: IFFALSE 13098
// ComExitBuilding ( i ) ;
13089: LD_VAR 0 7
13093: PPUSH
13094: CALL_OW 122
// if GetLives ( i ) > 333 then
13098: LD_VAR 0 7
13102: PPUSH
13103: CALL_OW 256
13107: PUSH
13108: LD_INT 333
13110: GREATER
13111: IFFALSE 13139
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
13113: LD_VAR 0 7
13117: PPUSH
13118: LD_VAR 0 5
13122: PPUSH
13123: LD_VAR 0 7
13127: PPUSH
13128: CALL_OW 74
13132: PPUSH
13133: CALL_OW 115
13137: GO 13290
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
13139: LD_ADDR_VAR 0 8
13143: PUSH
13144: LD_EXP 52
13148: PUSH
13149: LD_VAR 0 1
13153: ARRAY
13154: PPUSH
13155: LD_INT 2
13157: PUSH
13158: LD_INT 30
13160: PUSH
13161: LD_INT 0
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: LD_INT 30
13170: PUSH
13171: LD_INT 1
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 30
13180: PUSH
13181: LD_INT 6
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: PPUSH
13194: CALL_OW 72
13198: PPUSH
13199: LD_VAR 0 7
13203: PPUSH
13204: CALL_OW 74
13208: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
13209: LD_VAR 0 7
13213: PPUSH
13214: LD_VAR 0 8
13218: PPUSH
13219: CALL_OW 250
13223: PPUSH
13224: LD_INT 3
13226: PPUSH
13227: LD_INT 5
13229: PPUSH
13230: CALL_OW 272
13234: PPUSH
13235: LD_VAR 0 8
13239: PPUSH
13240: CALL_OW 251
13244: PPUSH
13245: LD_INT 3
13247: PPUSH
13248: LD_INT 5
13250: PPUSH
13251: CALL_OW 273
13255: PPUSH
13256: CALL_OW 111
// SetTag ( i , 0 ) ;
13260: LD_VAR 0 7
13264: PPUSH
13265: LD_INT 0
13267: PPUSH
13268: CALL_OW 109
// solds := solds diff i ;
13272: LD_ADDR_VAR 0 2
13276: PUSH
13277: LD_VAR 0 2
13281: PUSH
13282: LD_VAR 0 7
13286: DIFF
13287: ST_TO_ADDR
// continue ;
13288: GO 13075
// end ; end ;
13290: GO 13075
13292: POP
13293: POP
// until solds ;
13294: LD_VAR 0 2
13298: IFFALSE 12907
// MC_Reset ( base , 18 ) ;
13300: LD_VAR 0 1
13304: PPUSH
13305: LD_INT 18
13307: PPUSH
13308: CALL 58229 0 2
// end ;
13312: LD_VAR 0 4
13316: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
13317: LD_INT 0
13319: PPUSH
13320: PPUSH
13321: PPUSH
13322: PPUSH
13323: PPUSH
13324: PPUSH
13325: PPUSH
13326: PPUSH
13327: PPUSH
13328: PPUSH
13329: PPUSH
13330: PPUSH
13331: PPUSH
13332: PPUSH
13333: PPUSH
13334: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
13335: LD_ADDR_VAR 0 12
13339: PUSH
13340: LD_EXP 52
13344: PUSH
13345: LD_VAR 0 1
13349: ARRAY
13350: PPUSH
13351: LD_INT 25
13353: PUSH
13354: LD_INT 3
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PPUSH
13361: CALL_OW 72
13365: ST_TO_ADDR
// if mc_remote_driver [ base ] then
13366: LD_EXP 92
13370: PUSH
13371: LD_VAR 0 1
13375: ARRAY
13376: IFFALSE 13400
// mechs := mechs diff mc_remote_driver [ base ] ;
13378: LD_ADDR_VAR 0 12
13382: PUSH
13383: LD_VAR 0 12
13387: PUSH
13388: LD_EXP 92
13392: PUSH
13393: LD_VAR 0 1
13397: ARRAY
13398: DIFF
13399: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
13400: LD_ADDR_VAR 0 8
13404: PUSH
13405: LD_EXP 52
13409: PUSH
13410: LD_VAR 0 1
13414: ARRAY
13415: PPUSH
13416: LD_INT 2
13418: PUSH
13419: LD_INT 25
13421: PUSH
13422: LD_INT 1
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: PUSH
13429: LD_INT 25
13431: PUSH
13432: LD_INT 5
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PUSH
13439: LD_INT 25
13441: PUSH
13442: LD_INT 8
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: LD_INT 25
13451: PUSH
13452: LD_INT 9
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: PPUSH
13466: CALL_OW 72
13470: ST_TO_ADDR
// if not defenders and not solds then
13471: LD_VAR 0 2
13475: NOT
13476: PUSH
13477: LD_VAR 0 8
13481: NOT
13482: AND
13483: IFFALSE 13487
// exit ;
13485: GO 15013
// depot_under_attack := false ;
13487: LD_ADDR_VAR 0 16
13491: PUSH
13492: LD_INT 0
13494: ST_TO_ADDR
// sold_defenders := [ ] ;
13495: LD_ADDR_VAR 0 17
13499: PUSH
13500: EMPTY
13501: ST_TO_ADDR
// if mechs then
13502: LD_VAR 0 12
13506: IFFALSE 13635
// for i in defenders do
13508: LD_ADDR_VAR 0 5
13512: PUSH
13513: LD_VAR 0 2
13517: PUSH
13518: FOR_IN
13519: IFFALSE 13633
// begin SetTag ( i , 20 ) ;
13521: LD_VAR 0 5
13525: PPUSH
13526: LD_INT 20
13528: PPUSH
13529: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
13533: LD_VAR 0 5
13537: PPUSH
13538: CALL_OW 263
13542: PUSH
13543: LD_INT 1
13545: EQUAL
13546: PUSH
13547: LD_VAR 0 5
13551: PPUSH
13552: CALL_OW 311
13556: NOT
13557: AND
13558: PUSH
13559: LD_VAR 0 12
13563: AND
13564: IFFALSE 13631
// begin un := mechs [ 1 ] ;
13566: LD_ADDR_VAR 0 10
13570: PUSH
13571: LD_VAR 0 12
13575: PUSH
13576: LD_INT 1
13578: ARRAY
13579: ST_TO_ADDR
// ComExitBuilding ( un ) ;
13580: LD_VAR 0 10
13584: PPUSH
13585: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
13589: LD_VAR 0 10
13593: PPUSH
13594: LD_VAR 0 5
13598: PPUSH
13599: CALL_OW 180
// SetTag ( un , 19 ) ;
13603: LD_VAR 0 10
13607: PPUSH
13608: LD_INT 19
13610: PPUSH
13611: CALL_OW 109
// mechs := mechs diff un ;
13615: LD_ADDR_VAR 0 12
13619: PUSH
13620: LD_VAR 0 12
13624: PUSH
13625: LD_VAR 0 10
13629: DIFF
13630: ST_TO_ADDR
// end ; end ;
13631: GO 13518
13633: POP
13634: POP
// if solds then
13635: LD_VAR 0 8
13639: IFFALSE 13698
// for i in solds do
13641: LD_ADDR_VAR 0 5
13645: PUSH
13646: LD_VAR 0 8
13650: PUSH
13651: FOR_IN
13652: IFFALSE 13696
// if not GetTag ( i ) then
13654: LD_VAR 0 5
13658: PPUSH
13659: CALL_OW 110
13663: NOT
13664: IFFALSE 13694
// begin defenders := defenders union i ;
13666: LD_ADDR_VAR 0 2
13670: PUSH
13671: LD_VAR 0 2
13675: PUSH
13676: LD_VAR 0 5
13680: UNION
13681: ST_TO_ADDR
// SetTag ( i , 18 ) ;
13682: LD_VAR 0 5
13686: PPUSH
13687: LD_INT 18
13689: PPUSH
13690: CALL_OW 109
// end ;
13694: GO 13651
13696: POP
13697: POP
// repeat wait ( 0 0$1 ) ;
13698: LD_INT 35
13700: PPUSH
13701: CALL_OW 67
// enemy := mc_scan [ base ] ;
13705: LD_ADDR_VAR 0 3
13709: PUSH
13710: LD_EXP 75
13714: PUSH
13715: LD_VAR 0 1
13719: ARRAY
13720: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
13721: LD_EXP 52
13725: PUSH
13726: LD_VAR 0 1
13730: ARRAY
13731: NOT
13732: PUSH
13733: LD_EXP 52
13737: PUSH
13738: LD_VAR 0 1
13742: ARRAY
13743: PUSH
13744: EMPTY
13745: EQUAL
13746: OR
13747: IFFALSE 13784
// begin for i in defenders do
13749: LD_ADDR_VAR 0 5
13753: PUSH
13754: LD_VAR 0 2
13758: PUSH
13759: FOR_IN
13760: IFFALSE 13773
// ComStop ( i ) ;
13762: LD_VAR 0 5
13766: PPUSH
13767: CALL_OW 141
13771: GO 13759
13773: POP
13774: POP
// defenders := [ ] ;
13775: LD_ADDR_VAR 0 2
13779: PUSH
13780: EMPTY
13781: ST_TO_ADDR
// exit ;
13782: GO 15013
// end ; for i in defenders do
13784: LD_ADDR_VAR 0 5
13788: PUSH
13789: LD_VAR 0 2
13793: PUSH
13794: FOR_IN
13795: IFFALSE 14525
// begin e := NearestUnitToUnit ( enemy , i ) ;
13797: LD_ADDR_VAR 0 13
13801: PUSH
13802: LD_VAR 0 3
13806: PPUSH
13807: LD_VAR 0 5
13811: PPUSH
13812: CALL_OW 74
13816: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
13817: LD_ADDR_VAR 0 16
13821: PUSH
13822: LD_EXP 52
13826: PUSH
13827: LD_VAR 0 1
13831: ARRAY
13832: PPUSH
13833: LD_INT 2
13835: PUSH
13836: LD_INT 30
13838: PUSH
13839: LD_INT 0
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: PUSH
13846: LD_INT 30
13848: PUSH
13849: LD_INT 1
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: LIST
13860: PPUSH
13861: CALL_OW 72
13865: NOT
13866: PUSH
13867: LD_EXP 52
13871: PUSH
13872: LD_VAR 0 1
13876: ARRAY
13877: PPUSH
13878: LD_INT 2
13880: PUSH
13881: LD_INT 30
13883: PUSH
13884: LD_INT 0
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 30
13893: PUSH
13894: LD_INT 1
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: LIST
13905: PPUSH
13906: CALL_OW 72
13910: PPUSH
13911: CALL_OW 256
13915: PUSH
13916: LD_INT 600
13918: LESS
13919: OR
13920: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
13921: LD_VAR 0 5
13925: PPUSH
13926: CALL_OW 247
13930: PUSH
13931: LD_INT 2
13933: DOUBLE
13934: EQUAL
13935: IFTRUE 13939
13937: GO 14231
13939: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
13940: LD_VAR 0 5
13944: PPUSH
13945: CALL_OW 256
13949: PUSH
13950: LD_INT 650
13952: GREATER
13953: PUSH
13954: LD_VAR 0 5
13958: PPUSH
13959: LD_VAR 0 13
13963: PPUSH
13964: CALL_OW 296
13968: PUSH
13969: LD_INT 40
13971: LESS
13972: PUSH
13973: LD_VAR 0 13
13977: PPUSH
13978: LD_EXP 77
13982: PUSH
13983: LD_VAR 0 1
13987: ARRAY
13988: PPUSH
13989: CALL_OW 308
13993: OR
13994: AND
13995: IFFALSE 14013
// ComAttackUnit ( i , e ) else
13997: LD_VAR 0 5
14001: PPUSH
14002: LD_VAR 0 13
14006: PPUSH
14007: CALL_OW 115
14011: GO 14114
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
14013: LD_VAR 0 13
14017: PPUSH
14018: LD_EXP 77
14022: PUSH
14023: LD_VAR 0 1
14027: ARRAY
14028: PPUSH
14029: CALL_OW 308
14033: NOT
14034: PUSH
14035: LD_VAR 0 5
14039: PPUSH
14040: LD_VAR 0 13
14044: PPUSH
14045: CALL_OW 296
14049: PUSH
14050: LD_INT 40
14052: GREATEREQUAL
14053: AND
14054: PUSH
14055: LD_VAR 0 5
14059: PPUSH
14060: CALL_OW 256
14064: PUSH
14065: LD_INT 650
14067: LESSEQUAL
14068: OR
14069: PUSH
14070: LD_VAR 0 5
14074: PPUSH
14075: LD_EXP 76
14079: PUSH
14080: LD_VAR 0 1
14084: ARRAY
14085: PPUSH
14086: CALL_OW 308
14090: NOT
14091: AND
14092: IFFALSE 14114
// ComMoveToArea ( i , mc_parking [ base ] ) ;
14094: LD_VAR 0 5
14098: PPUSH
14099: LD_EXP 76
14103: PUSH
14104: LD_VAR 0 1
14108: ARRAY
14109: PPUSH
14110: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
14114: LD_VAR 0 5
14118: PPUSH
14119: CALL_OW 256
14123: PUSH
14124: LD_INT 998
14126: LESS
14127: PUSH
14128: LD_VAR 0 5
14132: PPUSH
14133: CALL_OW 263
14137: PUSH
14138: LD_INT 1
14140: EQUAL
14141: AND
14142: PUSH
14143: LD_VAR 0 5
14147: PPUSH
14148: CALL_OW 311
14152: AND
14153: PUSH
14154: LD_VAR 0 5
14158: PPUSH
14159: LD_EXP 76
14163: PUSH
14164: LD_VAR 0 1
14168: ARRAY
14169: PPUSH
14170: CALL_OW 308
14174: AND
14175: IFFALSE 14229
// begin mech := IsDrivenBy ( i ) ;
14177: LD_ADDR_VAR 0 9
14181: PUSH
14182: LD_VAR 0 5
14186: PPUSH
14187: CALL_OW 311
14191: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
14192: LD_VAR 0 9
14196: PPUSH
14197: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
14201: LD_VAR 0 9
14205: PPUSH
14206: LD_VAR 0 5
14210: PPUSH
14211: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
14215: LD_VAR 0 9
14219: PPUSH
14220: LD_VAR 0 5
14224: PPUSH
14225: CALL_OW 180
// end ; end ; unit_human :
14229: GO 14496
14231: LD_INT 1
14233: DOUBLE
14234: EQUAL
14235: IFTRUE 14239
14237: GO 14495
14239: POP
// begin b := IsInUnit ( i ) ;
14240: LD_ADDR_VAR 0 18
14244: PUSH
14245: LD_VAR 0 5
14249: PPUSH
14250: CALL_OW 310
14254: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
14255: LD_ADDR_VAR 0 19
14259: PUSH
14260: LD_VAR 0 18
14264: NOT
14265: PUSH
14266: LD_VAR 0 18
14270: PPUSH
14271: CALL_OW 266
14275: PUSH
14276: LD_INT 32
14278: PUSH
14279: LD_INT 31
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: IN
14286: OR
14287: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
14288: LD_VAR 0 16
14292: PUSH
14293: LD_VAR 0 2
14297: PPUSH
14298: LD_INT 21
14300: PUSH
14301: LD_INT 2
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: PPUSH
14308: CALL_OW 72
14312: PUSH
14313: LD_INT 1
14315: LESSEQUAL
14316: OR
14317: PUSH
14318: LD_VAR 0 19
14322: AND
14323: PUSH
14324: LD_VAR 0 5
14328: PUSH
14329: LD_VAR 0 17
14333: IN
14334: NOT
14335: AND
14336: IFFALSE 14429
// begin if b then
14338: LD_VAR 0 18
14342: IFFALSE 14391
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
14344: LD_VAR 0 18
14348: PPUSH
14349: LD_VAR 0 3
14353: PPUSH
14354: LD_VAR 0 18
14358: PPUSH
14359: CALL_OW 74
14363: PPUSH
14364: CALL_OW 296
14368: PUSH
14369: LD_INT 10
14371: LESS
14372: PUSH
14373: LD_VAR 0 18
14377: PPUSH
14378: CALL_OW 461
14382: PUSH
14383: LD_INT 7
14385: NONEQUAL
14386: AND
14387: IFFALSE 14391
// continue ;
14389: GO 13794
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
14391: LD_ADDR_VAR 0 17
14395: PUSH
14396: LD_VAR 0 17
14400: PPUSH
14401: LD_VAR 0 17
14405: PUSH
14406: LD_INT 1
14408: PLUS
14409: PPUSH
14410: LD_VAR 0 5
14414: PPUSH
14415: CALL_OW 1
14419: ST_TO_ADDR
// ComExitBuilding ( i ) ;
14420: LD_VAR 0 5
14424: PPUSH
14425: CALL_OW 122
// end ; if sold_defenders then
14429: LD_VAR 0 17
14433: IFFALSE 14493
// if i in sold_defenders then
14435: LD_VAR 0 5
14439: PUSH
14440: LD_VAR 0 17
14444: IN
14445: IFFALSE 14493
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
14447: LD_VAR 0 5
14451: PPUSH
14452: CALL_OW 314
14456: NOT
14457: PUSH
14458: LD_VAR 0 5
14462: PPUSH
14463: LD_VAR 0 13
14467: PPUSH
14468: CALL_OW 296
14472: PUSH
14473: LD_INT 30
14475: LESS
14476: AND
14477: IFFALSE 14493
// ComAttackUnit ( i , e ) ;
14479: LD_VAR 0 5
14483: PPUSH
14484: LD_VAR 0 13
14488: PPUSH
14489: CALL_OW 115
// end ; end ; end ;
14493: GO 14496
14495: POP
// if IsDead ( i ) then
14496: LD_VAR 0 5
14500: PPUSH
14501: CALL_OW 301
14505: IFFALSE 14523
// defenders := defenders diff i ;
14507: LD_ADDR_VAR 0 2
14511: PUSH
14512: LD_VAR 0 2
14516: PUSH
14517: LD_VAR 0 5
14521: DIFF
14522: ST_TO_ADDR
// end ;
14523: GO 13794
14525: POP
14526: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
14527: LD_VAR 0 3
14531: NOT
14532: PUSH
14533: LD_VAR 0 2
14537: NOT
14538: OR
14539: PUSH
14540: LD_EXP 52
14544: PUSH
14545: LD_VAR 0 1
14549: ARRAY
14550: NOT
14551: OR
14552: IFFALSE 13698
// MC_Reset ( base , 18 ) ;
14554: LD_VAR 0 1
14558: PPUSH
14559: LD_INT 18
14561: PPUSH
14562: CALL 58229 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
14566: LD_ADDR_VAR 0 2
14570: PUSH
14571: LD_VAR 0 2
14575: PUSH
14576: LD_VAR 0 2
14580: PPUSH
14581: LD_INT 2
14583: PUSH
14584: LD_INT 25
14586: PUSH
14587: LD_INT 1
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: PUSH
14594: LD_INT 25
14596: PUSH
14597: LD_INT 5
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: PUSH
14604: LD_INT 25
14606: PUSH
14607: LD_INT 8
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: PUSH
14614: LD_INT 25
14616: PUSH
14617: LD_INT 9
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: PPUSH
14631: CALL_OW 72
14635: DIFF
14636: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
14637: LD_VAR 0 3
14641: NOT
14642: PUSH
14643: LD_VAR 0 2
14647: PPUSH
14648: LD_INT 21
14650: PUSH
14651: LD_INT 2
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: PPUSH
14658: CALL_OW 72
14662: AND
14663: IFFALSE 15001
// begin tmp := FilterByTag ( defenders , 19 ) ;
14665: LD_ADDR_VAR 0 11
14669: PUSH
14670: LD_VAR 0 2
14674: PPUSH
14675: LD_INT 19
14677: PPUSH
14678: CALL 51442 0 2
14682: ST_TO_ADDR
// if tmp then
14683: LD_VAR 0 11
14687: IFFALSE 14757
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
14689: LD_ADDR_VAR 0 11
14693: PUSH
14694: LD_VAR 0 11
14698: PPUSH
14699: LD_INT 25
14701: PUSH
14702: LD_INT 3
14704: PUSH
14705: EMPTY
14706: LIST
14707: LIST
14708: PPUSH
14709: CALL_OW 72
14713: ST_TO_ADDR
// if tmp then
14714: LD_VAR 0 11
14718: IFFALSE 14757
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
14720: LD_ADDR_EXP 64
14724: PUSH
14725: LD_EXP 64
14729: PPUSH
14730: LD_VAR 0 1
14734: PPUSH
14735: LD_EXP 64
14739: PUSH
14740: LD_VAR 0 1
14744: ARRAY
14745: PUSH
14746: LD_VAR 0 11
14750: UNION
14751: PPUSH
14752: CALL_OW 1
14756: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
14757: LD_VAR 0 1
14761: PPUSH
14762: LD_INT 19
14764: PPUSH
14765: CALL 58229 0 2
// repeat wait ( 0 0$1 ) ;
14769: LD_INT 35
14771: PPUSH
14772: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
14776: LD_EXP 52
14780: PUSH
14781: LD_VAR 0 1
14785: ARRAY
14786: NOT
14787: PUSH
14788: LD_EXP 52
14792: PUSH
14793: LD_VAR 0 1
14797: ARRAY
14798: PUSH
14799: EMPTY
14800: EQUAL
14801: OR
14802: IFFALSE 14839
// begin for i in defenders do
14804: LD_ADDR_VAR 0 5
14808: PUSH
14809: LD_VAR 0 2
14813: PUSH
14814: FOR_IN
14815: IFFALSE 14828
// ComStop ( i ) ;
14817: LD_VAR 0 5
14821: PPUSH
14822: CALL_OW 141
14826: GO 14814
14828: POP
14829: POP
// defenders := [ ] ;
14830: LD_ADDR_VAR 0 2
14834: PUSH
14835: EMPTY
14836: ST_TO_ADDR
// exit ;
14837: GO 15013
// end ; for i in defenders do
14839: LD_ADDR_VAR 0 5
14843: PUSH
14844: LD_VAR 0 2
14848: PUSH
14849: FOR_IN
14850: IFFALSE 14939
// begin if not IsInArea ( i , mc_parking [ base ] ) then
14852: LD_VAR 0 5
14856: PPUSH
14857: LD_EXP 76
14861: PUSH
14862: LD_VAR 0 1
14866: ARRAY
14867: PPUSH
14868: CALL_OW 308
14872: NOT
14873: IFFALSE 14897
// ComMoveToArea ( i , mc_parking [ base ] ) else
14875: LD_VAR 0 5
14879: PPUSH
14880: LD_EXP 76
14884: PUSH
14885: LD_VAR 0 1
14889: ARRAY
14890: PPUSH
14891: CALL_OW 113
14895: GO 14937
// if GetControl ( i ) = control_manual then
14897: LD_VAR 0 5
14901: PPUSH
14902: CALL_OW 263
14906: PUSH
14907: LD_INT 1
14909: EQUAL
14910: IFFALSE 14937
// if IsDrivenBy ( i ) then
14912: LD_VAR 0 5
14916: PPUSH
14917: CALL_OW 311
14921: IFFALSE 14937
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
14923: LD_VAR 0 5
14927: PPUSH
14928: CALL_OW 311
14932: PPUSH
14933: CALL_OW 121
// end ;
14937: GO 14849
14939: POP
14940: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
14941: LD_VAR 0 2
14945: PPUSH
14946: LD_INT 95
14948: PUSH
14949: LD_EXP 76
14953: PUSH
14954: LD_VAR 0 1
14958: ARRAY
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: PPUSH
14964: CALL_OW 72
14968: PUSH
14969: LD_VAR 0 2
14973: EQUAL
14974: PUSH
14975: LD_EXP 75
14979: PUSH
14980: LD_VAR 0 1
14984: ARRAY
14985: OR
14986: PUSH
14987: LD_EXP 52
14991: PUSH
14992: LD_VAR 0 1
14996: ARRAY
14997: NOT
14998: OR
14999: IFFALSE 14769
// end ; MC_Reset ( base , 20 ) ;
15001: LD_VAR 0 1
15005: PPUSH
15006: LD_INT 20
15008: PPUSH
15009: CALL 58229 0 2
// end ;
15013: LD_VAR 0 4
15017: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
15018: LD_INT 0
15020: PPUSH
15021: PPUSH
15022: PPUSH
15023: PPUSH
// result := false ;
15024: LD_ADDR_VAR 0 2
15028: PUSH
15029: LD_INT 0
15031: ST_TO_ADDR
// side := GetSide ( unit ) ;
15032: LD_ADDR_VAR 0 3
15036: PUSH
15037: LD_VAR 0 1
15041: PPUSH
15042: CALL_OW 255
15046: ST_TO_ADDR
// nat := GetNation ( unit ) ;
15047: LD_ADDR_VAR 0 4
15051: PUSH
15052: LD_VAR 0 1
15056: PPUSH
15057: CALL_OW 248
15061: ST_TO_ADDR
// case nat of 1 :
15062: LD_VAR 0 4
15066: PUSH
15067: LD_INT 1
15069: DOUBLE
15070: EQUAL
15071: IFTRUE 15075
15073: GO 15086
15075: POP
// tech := tech_lassight ; 2 :
15076: LD_ADDR_VAR 0 5
15080: PUSH
15081: LD_INT 12
15083: ST_TO_ADDR
15084: GO 15125
15086: LD_INT 2
15088: DOUBLE
15089: EQUAL
15090: IFTRUE 15094
15092: GO 15105
15094: POP
// tech := tech_mortar ; 3 :
15095: LD_ADDR_VAR 0 5
15099: PUSH
15100: LD_INT 41
15102: ST_TO_ADDR
15103: GO 15125
15105: LD_INT 3
15107: DOUBLE
15108: EQUAL
15109: IFTRUE 15113
15111: GO 15124
15113: POP
// tech := tech_bazooka ; end ;
15114: LD_ADDR_VAR 0 5
15118: PUSH
15119: LD_INT 44
15121: ST_TO_ADDR
15122: GO 15125
15124: POP
// if Researched ( side , tech ) then
15125: LD_VAR 0 3
15129: PPUSH
15130: LD_VAR 0 5
15134: PPUSH
15135: CALL_OW 325
15139: IFFALSE 15166
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
15141: LD_ADDR_VAR 0 2
15145: PUSH
15146: LD_INT 5
15148: PUSH
15149: LD_INT 8
15151: PUSH
15152: LD_INT 9
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: LIST
15159: PUSH
15160: LD_VAR 0 4
15164: ARRAY
15165: ST_TO_ADDR
// end ;
15166: LD_VAR 0 2
15170: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
15171: LD_INT 0
15173: PPUSH
15174: PPUSH
15175: PPUSH
// if not mines then
15176: LD_VAR 0 2
15180: NOT
15181: IFFALSE 15185
// exit ;
15183: GO 15329
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15185: LD_ADDR_VAR 0 5
15189: PUSH
15190: LD_INT 81
15192: PUSH
15193: LD_VAR 0 1
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: PUSH
15202: LD_INT 3
15204: PUSH
15205: LD_INT 21
15207: PUSH
15208: LD_INT 3
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PUSH
15219: EMPTY
15220: LIST
15221: LIST
15222: PPUSH
15223: CALL_OW 69
15227: ST_TO_ADDR
// for i in mines do
15228: LD_ADDR_VAR 0 4
15232: PUSH
15233: LD_VAR 0 2
15237: PUSH
15238: FOR_IN
15239: IFFALSE 15327
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
15241: LD_VAR 0 4
15245: PUSH
15246: LD_INT 1
15248: ARRAY
15249: PPUSH
15250: LD_VAR 0 4
15254: PUSH
15255: LD_INT 2
15257: ARRAY
15258: PPUSH
15259: CALL_OW 458
15263: NOT
15264: IFFALSE 15268
// continue ;
15266: GO 15238
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
15268: LD_VAR 0 4
15272: PUSH
15273: LD_INT 1
15275: ARRAY
15276: PPUSH
15277: LD_VAR 0 4
15281: PUSH
15282: LD_INT 2
15284: ARRAY
15285: PPUSH
15286: CALL_OW 428
15290: PUSH
15291: LD_VAR 0 5
15295: IN
15296: IFFALSE 15325
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
15298: LD_VAR 0 4
15302: PUSH
15303: LD_INT 1
15305: ARRAY
15306: PPUSH
15307: LD_VAR 0 4
15311: PUSH
15312: LD_INT 2
15314: ARRAY
15315: PPUSH
15316: LD_VAR 0 1
15320: PPUSH
15321: CALL_OW 456
// end ;
15325: GO 15238
15327: POP
15328: POP
// end ;
15329: LD_VAR 0 3
15333: RET
// export function Count ( array ) ; var i ; begin
15334: LD_INT 0
15336: PPUSH
15337: PPUSH
// result := 0 ;
15338: LD_ADDR_VAR 0 2
15342: PUSH
15343: LD_INT 0
15345: ST_TO_ADDR
// for i in array do
15346: LD_ADDR_VAR 0 3
15350: PUSH
15351: LD_VAR 0 1
15355: PUSH
15356: FOR_IN
15357: IFFALSE 15381
// if i then
15359: LD_VAR 0 3
15363: IFFALSE 15379
// result := result + 1 ;
15365: LD_ADDR_VAR 0 2
15369: PUSH
15370: LD_VAR 0 2
15374: PUSH
15375: LD_INT 1
15377: PLUS
15378: ST_TO_ADDR
15379: GO 15356
15381: POP
15382: POP
// end ;
15383: LD_VAR 0 2
15387: RET
// export function IsEmpty ( building ) ; begin
15388: LD_INT 0
15390: PPUSH
// if not building then
15391: LD_VAR 0 1
15395: NOT
15396: IFFALSE 15400
// exit ;
15398: GO 15443
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
15400: LD_ADDR_VAR 0 2
15404: PUSH
15405: LD_VAR 0 1
15409: PUSH
15410: LD_INT 22
15412: PUSH
15413: LD_VAR 0 1
15417: PPUSH
15418: CALL_OW 255
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: PUSH
15427: LD_INT 58
15429: PUSH
15430: EMPTY
15431: LIST
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: PPUSH
15437: CALL_OW 69
15441: IN
15442: ST_TO_ADDR
// end ;
15443: LD_VAR 0 2
15447: RET
// export function IsNotFull ( building ) ; begin
15448: LD_INT 0
15450: PPUSH
// if not building then
15451: LD_VAR 0 1
15455: NOT
15456: IFFALSE 15460
// exit ;
15458: GO 15479
// result := UnitsInside ( building ) < 6 ;
15460: LD_ADDR_VAR 0 2
15464: PUSH
15465: LD_VAR 0 1
15469: PPUSH
15470: CALL_OW 313
15474: PUSH
15475: LD_INT 6
15477: LESS
15478: ST_TO_ADDR
// end ;
15479: LD_VAR 0 2
15483: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
15484: LD_INT 0
15486: PPUSH
15487: PPUSH
15488: PPUSH
15489: PPUSH
// tmp := [ ] ;
15490: LD_ADDR_VAR 0 3
15494: PUSH
15495: EMPTY
15496: ST_TO_ADDR
// list := [ ] ;
15497: LD_ADDR_VAR 0 5
15501: PUSH
15502: EMPTY
15503: ST_TO_ADDR
// for i = 16 to 25 do
15504: LD_ADDR_VAR 0 4
15508: PUSH
15509: DOUBLE
15510: LD_INT 16
15512: DEC
15513: ST_TO_ADDR
15514: LD_INT 25
15516: PUSH
15517: FOR_TO
15518: IFFALSE 15591
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
15520: LD_ADDR_VAR 0 3
15524: PUSH
15525: LD_VAR 0 3
15529: PUSH
15530: LD_INT 22
15532: PUSH
15533: LD_VAR 0 1
15537: PPUSH
15538: CALL_OW 255
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: PUSH
15547: LD_INT 91
15549: PUSH
15550: LD_VAR 0 1
15554: PUSH
15555: LD_INT 6
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: LIST
15562: PUSH
15563: LD_INT 30
15565: PUSH
15566: LD_VAR 0 4
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: LIST
15579: PUSH
15580: EMPTY
15581: LIST
15582: PPUSH
15583: CALL_OW 69
15587: ADD
15588: ST_TO_ADDR
15589: GO 15517
15591: POP
15592: POP
// for i = 1 to tmp do
15593: LD_ADDR_VAR 0 4
15597: PUSH
15598: DOUBLE
15599: LD_INT 1
15601: DEC
15602: ST_TO_ADDR
15603: LD_VAR 0 3
15607: PUSH
15608: FOR_TO
15609: IFFALSE 15697
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
15611: LD_ADDR_VAR 0 5
15615: PUSH
15616: LD_VAR 0 5
15620: PUSH
15621: LD_VAR 0 3
15625: PUSH
15626: LD_VAR 0 4
15630: ARRAY
15631: PPUSH
15632: CALL_OW 266
15636: PUSH
15637: LD_VAR 0 3
15641: PUSH
15642: LD_VAR 0 4
15646: ARRAY
15647: PPUSH
15648: CALL_OW 250
15652: PUSH
15653: LD_VAR 0 3
15657: PUSH
15658: LD_VAR 0 4
15662: ARRAY
15663: PPUSH
15664: CALL_OW 251
15668: PUSH
15669: LD_VAR 0 3
15673: PUSH
15674: LD_VAR 0 4
15678: ARRAY
15679: PPUSH
15680: CALL_OW 254
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: PUSH
15691: EMPTY
15692: LIST
15693: ADD
15694: ST_TO_ADDR
15695: GO 15608
15697: POP
15698: POP
// result := list ;
15699: LD_ADDR_VAR 0 2
15703: PUSH
15704: LD_VAR 0 5
15708: ST_TO_ADDR
// end ;
15709: LD_VAR 0 2
15713: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
15714: LD_INT 0
15716: PPUSH
15717: PPUSH
15718: PPUSH
15719: PPUSH
15720: PPUSH
15721: PPUSH
15722: PPUSH
// if not factory then
15723: LD_VAR 0 1
15727: NOT
15728: IFFALSE 15732
// exit ;
15730: GO 16325
// if control = control_apeman then
15732: LD_VAR 0 4
15736: PUSH
15737: LD_INT 5
15739: EQUAL
15740: IFFALSE 15849
// begin tmp := UnitsInside ( factory ) ;
15742: LD_ADDR_VAR 0 8
15746: PUSH
15747: LD_VAR 0 1
15751: PPUSH
15752: CALL_OW 313
15756: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
15757: LD_VAR 0 8
15761: PPUSH
15762: LD_INT 25
15764: PUSH
15765: LD_INT 12
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: PPUSH
15772: CALL_OW 72
15776: NOT
15777: IFFALSE 15787
// control := control_manual ;
15779: LD_ADDR_VAR 0 4
15783: PUSH
15784: LD_INT 1
15786: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
15787: LD_ADDR_VAR 0 8
15791: PUSH
15792: LD_VAR 0 1
15796: PPUSH
15797: CALL 15484 0 1
15801: ST_TO_ADDR
// if tmp then
15802: LD_VAR 0 8
15806: IFFALSE 15849
// begin for i in tmp do
15808: LD_ADDR_VAR 0 7
15812: PUSH
15813: LD_VAR 0 8
15817: PUSH
15818: FOR_IN
15819: IFFALSE 15847
// if i [ 1 ] = b_ext_radio then
15821: LD_VAR 0 7
15825: PUSH
15826: LD_INT 1
15828: ARRAY
15829: PUSH
15830: LD_INT 22
15832: EQUAL
15833: IFFALSE 15845
// begin control := control_remote ;
15835: LD_ADDR_VAR 0 4
15839: PUSH
15840: LD_INT 2
15842: ST_TO_ADDR
// break ;
15843: GO 15847
// end ;
15845: GO 15818
15847: POP
15848: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15849: LD_VAR 0 1
15853: PPUSH
15854: LD_VAR 0 2
15858: PPUSH
15859: LD_VAR 0 3
15863: PPUSH
15864: LD_VAR 0 4
15868: PPUSH
15869: LD_VAR 0 5
15873: PPUSH
15874: CALL_OW 448
15878: IFFALSE 15913
// begin result := [ chassis , engine , control , weapon ] ;
15880: LD_ADDR_VAR 0 6
15884: PUSH
15885: LD_VAR 0 2
15889: PUSH
15890: LD_VAR 0 3
15894: PUSH
15895: LD_VAR 0 4
15899: PUSH
15900: LD_VAR 0 5
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: ST_TO_ADDR
// exit ;
15911: GO 16325
// end ; _chassis := AvailableChassisList ( factory ) ;
15913: LD_ADDR_VAR 0 9
15917: PUSH
15918: LD_VAR 0 1
15922: PPUSH
15923: CALL_OW 475
15927: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
15928: LD_ADDR_VAR 0 11
15932: PUSH
15933: LD_VAR 0 1
15937: PPUSH
15938: CALL_OW 476
15942: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
15943: LD_ADDR_VAR 0 12
15947: PUSH
15948: LD_VAR 0 1
15952: PPUSH
15953: CALL_OW 477
15957: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
15958: LD_ADDR_VAR 0 10
15962: PUSH
15963: LD_VAR 0 1
15967: PPUSH
15968: CALL_OW 478
15972: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
15973: LD_VAR 0 9
15977: NOT
15978: PUSH
15979: LD_VAR 0 11
15983: NOT
15984: OR
15985: PUSH
15986: LD_VAR 0 12
15990: NOT
15991: OR
15992: PUSH
15993: LD_VAR 0 10
15997: NOT
15998: OR
15999: IFFALSE 16034
// begin result := [ chassis , engine , control , weapon ] ;
16001: LD_ADDR_VAR 0 6
16005: PUSH
16006: LD_VAR 0 2
16010: PUSH
16011: LD_VAR 0 3
16015: PUSH
16016: LD_VAR 0 4
16020: PUSH
16021: LD_VAR 0 5
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: ST_TO_ADDR
// exit ;
16032: GO 16325
// end ; if not chassis in _chassis then
16034: LD_VAR 0 2
16038: PUSH
16039: LD_VAR 0 9
16043: IN
16044: NOT
16045: IFFALSE 16071
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
16047: LD_ADDR_VAR 0 2
16051: PUSH
16052: LD_VAR 0 9
16056: PUSH
16057: LD_INT 1
16059: PPUSH
16060: LD_VAR 0 9
16064: PPUSH
16065: CALL_OW 12
16069: ARRAY
16070: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
16071: LD_VAR 0 2
16075: PPUSH
16076: LD_VAR 0 3
16080: PPUSH
16081: CALL 16330 0 2
16085: NOT
16086: IFFALSE 16145
// repeat engine := _engine [ 1 ] ;
16088: LD_ADDR_VAR 0 3
16092: PUSH
16093: LD_VAR 0 11
16097: PUSH
16098: LD_INT 1
16100: ARRAY
16101: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
16102: LD_ADDR_VAR 0 11
16106: PUSH
16107: LD_VAR 0 11
16111: PPUSH
16112: LD_INT 1
16114: PPUSH
16115: CALL_OW 3
16119: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
16120: LD_VAR 0 2
16124: PPUSH
16125: LD_VAR 0 3
16129: PPUSH
16130: CALL 16330 0 2
16134: PUSH
16135: LD_VAR 0 11
16139: PUSH
16140: EMPTY
16141: EQUAL
16142: OR
16143: IFFALSE 16088
// if not control in _control then
16145: LD_VAR 0 4
16149: PUSH
16150: LD_VAR 0 12
16154: IN
16155: NOT
16156: IFFALSE 16182
// control := _control [ rand ( 1 , _control ) ] ;
16158: LD_ADDR_VAR 0 4
16162: PUSH
16163: LD_VAR 0 12
16167: PUSH
16168: LD_INT 1
16170: PPUSH
16171: LD_VAR 0 12
16175: PPUSH
16176: CALL_OW 12
16180: ARRAY
16181: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
16182: LD_VAR 0 2
16186: PPUSH
16187: LD_VAR 0 5
16191: PPUSH
16192: CALL 16550 0 2
16196: NOT
16197: IFFALSE 16256
// repeat weapon := _weapon [ 1 ] ;
16199: LD_ADDR_VAR 0 5
16203: PUSH
16204: LD_VAR 0 10
16208: PUSH
16209: LD_INT 1
16211: ARRAY
16212: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
16213: LD_ADDR_VAR 0 10
16217: PUSH
16218: LD_VAR 0 10
16222: PPUSH
16223: LD_INT 1
16225: PPUSH
16226: CALL_OW 3
16230: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
16231: LD_VAR 0 2
16235: PPUSH
16236: LD_VAR 0 5
16240: PPUSH
16241: CALL 16550 0 2
16245: PUSH
16246: LD_VAR 0 10
16250: PUSH
16251: EMPTY
16252: EQUAL
16253: OR
16254: IFFALSE 16199
// result := [ ] ;
16256: LD_ADDR_VAR 0 6
16260: PUSH
16261: EMPTY
16262: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16263: LD_VAR 0 1
16267: PPUSH
16268: LD_VAR 0 2
16272: PPUSH
16273: LD_VAR 0 3
16277: PPUSH
16278: LD_VAR 0 4
16282: PPUSH
16283: LD_VAR 0 5
16287: PPUSH
16288: CALL_OW 448
16292: IFFALSE 16325
// result := [ chassis , engine , control , weapon ] ;
16294: LD_ADDR_VAR 0 6
16298: PUSH
16299: LD_VAR 0 2
16303: PUSH
16304: LD_VAR 0 3
16308: PUSH
16309: LD_VAR 0 4
16313: PUSH
16314: LD_VAR 0 5
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: ST_TO_ADDR
// end ;
16325: LD_VAR 0 6
16329: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
16330: LD_INT 0
16332: PPUSH
// if not chassis or not engine then
16333: LD_VAR 0 1
16337: NOT
16338: PUSH
16339: LD_VAR 0 2
16343: NOT
16344: OR
16345: IFFALSE 16349
// exit ;
16347: GO 16545
// case engine of engine_solar :
16349: LD_VAR 0 2
16353: PUSH
16354: LD_INT 2
16356: DOUBLE
16357: EQUAL
16358: IFTRUE 16362
16360: GO 16400
16362: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
16363: LD_ADDR_VAR 0 3
16367: PUSH
16368: LD_INT 11
16370: PUSH
16371: LD_INT 12
16373: PUSH
16374: LD_INT 13
16376: PUSH
16377: LD_INT 14
16379: PUSH
16380: LD_INT 1
16382: PUSH
16383: LD_INT 2
16385: PUSH
16386: LD_INT 3
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: ST_TO_ADDR
16398: GO 16529
16400: LD_INT 1
16402: DOUBLE
16403: EQUAL
16404: IFTRUE 16408
16406: GO 16470
16408: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
16409: LD_ADDR_VAR 0 3
16413: PUSH
16414: LD_INT 11
16416: PUSH
16417: LD_INT 12
16419: PUSH
16420: LD_INT 13
16422: PUSH
16423: LD_INT 14
16425: PUSH
16426: LD_INT 1
16428: PUSH
16429: LD_INT 2
16431: PUSH
16432: LD_INT 3
16434: PUSH
16435: LD_INT 4
16437: PUSH
16438: LD_INT 5
16440: PUSH
16441: LD_INT 21
16443: PUSH
16444: LD_INT 23
16446: PUSH
16447: LD_INT 22
16449: PUSH
16450: LD_INT 24
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: ST_TO_ADDR
16468: GO 16529
16470: LD_INT 3
16472: DOUBLE
16473: EQUAL
16474: IFTRUE 16478
16476: GO 16528
16478: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16479: LD_ADDR_VAR 0 3
16483: PUSH
16484: LD_INT 13
16486: PUSH
16487: LD_INT 14
16489: PUSH
16490: LD_INT 2
16492: PUSH
16493: LD_INT 3
16495: PUSH
16496: LD_INT 4
16498: PUSH
16499: LD_INT 5
16501: PUSH
16502: LD_INT 21
16504: PUSH
16505: LD_INT 22
16507: PUSH
16508: LD_INT 23
16510: PUSH
16511: LD_INT 24
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: ST_TO_ADDR
16526: GO 16529
16528: POP
// result := ( chassis in result ) ;
16529: LD_ADDR_VAR 0 3
16533: PUSH
16534: LD_VAR 0 1
16538: PUSH
16539: LD_VAR 0 3
16543: IN
16544: ST_TO_ADDR
// end ;
16545: LD_VAR 0 3
16549: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
16550: LD_INT 0
16552: PPUSH
// if not chassis or not weapon then
16553: LD_VAR 0 1
16557: NOT
16558: PUSH
16559: LD_VAR 0 2
16563: NOT
16564: OR
16565: IFFALSE 16569
// exit ;
16567: GO 17595
// case weapon of us_machine_gun :
16569: LD_VAR 0 2
16573: PUSH
16574: LD_INT 2
16576: DOUBLE
16577: EQUAL
16578: IFTRUE 16582
16580: GO 16612
16582: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
16583: LD_ADDR_VAR 0 3
16587: PUSH
16588: LD_INT 1
16590: PUSH
16591: LD_INT 2
16593: PUSH
16594: LD_INT 3
16596: PUSH
16597: LD_INT 4
16599: PUSH
16600: LD_INT 5
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: ST_TO_ADDR
16610: GO 17579
16612: LD_INT 3
16614: DOUBLE
16615: EQUAL
16616: IFTRUE 16620
16618: GO 16650
16620: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
16621: LD_ADDR_VAR 0 3
16625: PUSH
16626: LD_INT 1
16628: PUSH
16629: LD_INT 2
16631: PUSH
16632: LD_INT 3
16634: PUSH
16635: LD_INT 4
16637: PUSH
16638: LD_INT 5
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: ST_TO_ADDR
16648: GO 17579
16650: LD_INT 11
16652: DOUBLE
16653: EQUAL
16654: IFTRUE 16658
16656: GO 16688
16658: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
16659: LD_ADDR_VAR 0 3
16663: PUSH
16664: LD_INT 1
16666: PUSH
16667: LD_INT 2
16669: PUSH
16670: LD_INT 3
16672: PUSH
16673: LD_INT 4
16675: PUSH
16676: LD_INT 5
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: ST_TO_ADDR
16686: GO 17579
16688: LD_INT 4
16690: DOUBLE
16691: EQUAL
16692: IFTRUE 16696
16694: GO 16722
16696: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
16697: LD_ADDR_VAR 0 3
16701: PUSH
16702: LD_INT 2
16704: PUSH
16705: LD_INT 3
16707: PUSH
16708: LD_INT 4
16710: PUSH
16711: LD_INT 5
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: ST_TO_ADDR
16720: GO 17579
16722: LD_INT 5
16724: DOUBLE
16725: EQUAL
16726: IFTRUE 16730
16728: GO 16756
16730: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
16731: LD_ADDR_VAR 0 3
16735: PUSH
16736: LD_INT 2
16738: PUSH
16739: LD_INT 3
16741: PUSH
16742: LD_INT 4
16744: PUSH
16745: LD_INT 5
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: ST_TO_ADDR
16754: GO 17579
16756: LD_INT 9
16758: DOUBLE
16759: EQUAL
16760: IFTRUE 16764
16762: GO 16790
16764: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
16765: LD_ADDR_VAR 0 3
16769: PUSH
16770: LD_INT 2
16772: PUSH
16773: LD_INT 3
16775: PUSH
16776: LD_INT 4
16778: PUSH
16779: LD_INT 5
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: ST_TO_ADDR
16788: GO 17579
16790: LD_INT 7
16792: DOUBLE
16793: EQUAL
16794: IFTRUE 16798
16796: GO 16824
16798: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
16799: LD_ADDR_VAR 0 3
16803: PUSH
16804: LD_INT 2
16806: PUSH
16807: LD_INT 3
16809: PUSH
16810: LD_INT 4
16812: PUSH
16813: LD_INT 5
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: ST_TO_ADDR
16822: GO 17579
16824: LD_INT 12
16826: DOUBLE
16827: EQUAL
16828: IFTRUE 16832
16830: GO 16858
16832: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
16833: LD_ADDR_VAR 0 3
16837: PUSH
16838: LD_INT 2
16840: PUSH
16841: LD_INT 3
16843: PUSH
16844: LD_INT 4
16846: PUSH
16847: LD_INT 5
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: ST_TO_ADDR
16856: GO 17579
16858: LD_INT 13
16860: DOUBLE
16861: EQUAL
16862: IFTRUE 16866
16864: GO 16892
16866: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
16867: LD_ADDR_VAR 0 3
16871: PUSH
16872: LD_INT 2
16874: PUSH
16875: LD_INT 3
16877: PUSH
16878: LD_INT 4
16880: PUSH
16881: LD_INT 5
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: ST_TO_ADDR
16890: GO 17579
16892: LD_INT 14
16894: DOUBLE
16895: EQUAL
16896: IFTRUE 16900
16898: GO 16918
16900: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
16901: LD_ADDR_VAR 0 3
16905: PUSH
16906: LD_INT 4
16908: PUSH
16909: LD_INT 5
16911: PUSH
16912: EMPTY
16913: LIST
16914: LIST
16915: ST_TO_ADDR
16916: GO 17579
16918: LD_INT 6
16920: DOUBLE
16921: EQUAL
16922: IFTRUE 16926
16924: GO 16944
16926: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
16927: LD_ADDR_VAR 0 3
16931: PUSH
16932: LD_INT 4
16934: PUSH
16935: LD_INT 5
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: ST_TO_ADDR
16942: GO 17579
16944: LD_INT 10
16946: DOUBLE
16947: EQUAL
16948: IFTRUE 16952
16950: GO 16970
16952: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
16953: LD_ADDR_VAR 0 3
16957: PUSH
16958: LD_INT 4
16960: PUSH
16961: LD_INT 5
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: ST_TO_ADDR
16968: GO 17579
16970: LD_INT 22
16972: DOUBLE
16973: EQUAL
16974: IFTRUE 16978
16976: GO 17004
16978: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
16979: LD_ADDR_VAR 0 3
16983: PUSH
16984: LD_INT 11
16986: PUSH
16987: LD_INT 12
16989: PUSH
16990: LD_INT 13
16992: PUSH
16993: LD_INT 14
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: ST_TO_ADDR
17002: GO 17579
17004: LD_INT 23
17006: DOUBLE
17007: EQUAL
17008: IFTRUE 17012
17010: GO 17038
17012: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
17013: LD_ADDR_VAR 0 3
17017: PUSH
17018: LD_INT 11
17020: PUSH
17021: LD_INT 12
17023: PUSH
17024: LD_INT 13
17026: PUSH
17027: LD_INT 14
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: ST_TO_ADDR
17036: GO 17579
17038: LD_INT 24
17040: DOUBLE
17041: EQUAL
17042: IFTRUE 17046
17044: GO 17072
17046: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
17047: LD_ADDR_VAR 0 3
17051: PUSH
17052: LD_INT 11
17054: PUSH
17055: LD_INT 12
17057: PUSH
17058: LD_INT 13
17060: PUSH
17061: LD_INT 14
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: ST_TO_ADDR
17070: GO 17579
17072: LD_INT 30
17074: DOUBLE
17075: EQUAL
17076: IFTRUE 17080
17078: GO 17106
17080: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
17081: LD_ADDR_VAR 0 3
17085: PUSH
17086: LD_INT 11
17088: PUSH
17089: LD_INT 12
17091: PUSH
17092: LD_INT 13
17094: PUSH
17095: LD_INT 14
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: ST_TO_ADDR
17104: GO 17579
17106: LD_INT 25
17108: DOUBLE
17109: EQUAL
17110: IFTRUE 17114
17112: GO 17132
17114: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
17115: LD_ADDR_VAR 0 3
17119: PUSH
17120: LD_INT 13
17122: PUSH
17123: LD_INT 14
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: ST_TO_ADDR
17130: GO 17579
17132: LD_INT 27
17134: DOUBLE
17135: EQUAL
17136: IFTRUE 17140
17138: GO 17158
17140: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
17141: LD_ADDR_VAR 0 3
17145: PUSH
17146: LD_INT 13
17148: PUSH
17149: LD_INT 14
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: ST_TO_ADDR
17156: GO 17579
17158: LD_INT 28
17160: DOUBLE
17161: EQUAL
17162: IFTRUE 17166
17164: GO 17184
17166: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
17167: LD_ADDR_VAR 0 3
17171: PUSH
17172: LD_INT 13
17174: PUSH
17175: LD_INT 14
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: ST_TO_ADDR
17182: GO 17579
17184: LD_INT 29
17186: DOUBLE
17187: EQUAL
17188: IFTRUE 17192
17190: GO 17210
17192: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
17193: LD_ADDR_VAR 0 3
17197: PUSH
17198: LD_INT 13
17200: PUSH
17201: LD_INT 14
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: ST_TO_ADDR
17208: GO 17579
17210: LD_INT 31
17212: DOUBLE
17213: EQUAL
17214: IFTRUE 17218
17216: GO 17236
17218: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
17219: LD_ADDR_VAR 0 3
17223: PUSH
17224: LD_INT 13
17226: PUSH
17227: LD_INT 14
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: ST_TO_ADDR
17234: GO 17579
17236: LD_INT 26
17238: DOUBLE
17239: EQUAL
17240: IFTRUE 17244
17242: GO 17262
17244: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
17245: LD_ADDR_VAR 0 3
17249: PUSH
17250: LD_INT 13
17252: PUSH
17253: LD_INT 14
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: ST_TO_ADDR
17260: GO 17579
17262: LD_INT 42
17264: DOUBLE
17265: EQUAL
17266: IFTRUE 17270
17268: GO 17296
17270: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
17271: LD_ADDR_VAR 0 3
17275: PUSH
17276: LD_INT 21
17278: PUSH
17279: LD_INT 22
17281: PUSH
17282: LD_INT 23
17284: PUSH
17285: LD_INT 24
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: ST_TO_ADDR
17294: GO 17579
17296: LD_INT 43
17298: DOUBLE
17299: EQUAL
17300: IFTRUE 17304
17302: GO 17330
17304: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
17305: LD_ADDR_VAR 0 3
17309: PUSH
17310: LD_INT 21
17312: PUSH
17313: LD_INT 22
17315: PUSH
17316: LD_INT 23
17318: PUSH
17319: LD_INT 24
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: ST_TO_ADDR
17328: GO 17579
17330: LD_INT 44
17332: DOUBLE
17333: EQUAL
17334: IFTRUE 17338
17336: GO 17364
17338: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
17339: LD_ADDR_VAR 0 3
17343: PUSH
17344: LD_INT 21
17346: PUSH
17347: LD_INT 22
17349: PUSH
17350: LD_INT 23
17352: PUSH
17353: LD_INT 24
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: ST_TO_ADDR
17362: GO 17579
17364: LD_INT 45
17366: DOUBLE
17367: EQUAL
17368: IFTRUE 17372
17370: GO 17398
17372: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
17373: LD_ADDR_VAR 0 3
17377: PUSH
17378: LD_INT 21
17380: PUSH
17381: LD_INT 22
17383: PUSH
17384: LD_INT 23
17386: PUSH
17387: LD_INT 24
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: ST_TO_ADDR
17396: GO 17579
17398: LD_INT 49
17400: DOUBLE
17401: EQUAL
17402: IFTRUE 17406
17404: GO 17432
17406: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
17407: LD_ADDR_VAR 0 3
17411: PUSH
17412: LD_INT 21
17414: PUSH
17415: LD_INT 22
17417: PUSH
17418: LD_INT 23
17420: PUSH
17421: LD_INT 24
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: ST_TO_ADDR
17430: GO 17579
17432: LD_INT 51
17434: DOUBLE
17435: EQUAL
17436: IFTRUE 17440
17438: GO 17466
17440: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
17441: LD_ADDR_VAR 0 3
17445: PUSH
17446: LD_INT 21
17448: PUSH
17449: LD_INT 22
17451: PUSH
17452: LD_INT 23
17454: PUSH
17455: LD_INT 24
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: ST_TO_ADDR
17464: GO 17579
17466: LD_INT 52
17468: DOUBLE
17469: EQUAL
17470: IFTRUE 17474
17472: GO 17500
17474: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
17475: LD_ADDR_VAR 0 3
17479: PUSH
17480: LD_INT 21
17482: PUSH
17483: LD_INT 22
17485: PUSH
17486: LD_INT 23
17488: PUSH
17489: LD_INT 24
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: ST_TO_ADDR
17498: GO 17579
17500: LD_INT 53
17502: DOUBLE
17503: EQUAL
17504: IFTRUE 17508
17506: GO 17526
17508: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
17509: LD_ADDR_VAR 0 3
17513: PUSH
17514: LD_INT 23
17516: PUSH
17517: LD_INT 24
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: ST_TO_ADDR
17524: GO 17579
17526: LD_INT 46
17528: DOUBLE
17529: EQUAL
17530: IFTRUE 17534
17532: GO 17552
17534: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
17535: LD_ADDR_VAR 0 3
17539: PUSH
17540: LD_INT 23
17542: PUSH
17543: LD_INT 24
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: ST_TO_ADDR
17550: GO 17579
17552: LD_INT 47
17554: DOUBLE
17555: EQUAL
17556: IFTRUE 17560
17558: GO 17578
17560: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17561: LD_ADDR_VAR 0 3
17565: PUSH
17566: LD_INT 23
17568: PUSH
17569: LD_INT 24
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: ST_TO_ADDR
17576: GO 17579
17578: POP
// result := ( chassis in result ) ;
17579: LD_ADDR_VAR 0 3
17583: PUSH
17584: LD_VAR 0 1
17588: PUSH
17589: LD_VAR 0 3
17593: IN
17594: ST_TO_ADDR
// end ;
17595: LD_VAR 0 3
17599: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
17600: LD_INT 0
17602: PPUSH
17603: PPUSH
17604: PPUSH
17605: PPUSH
17606: PPUSH
17607: PPUSH
17608: PPUSH
// result := array ;
17609: LD_ADDR_VAR 0 5
17613: PUSH
17614: LD_VAR 0 1
17618: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
17619: LD_VAR 0 1
17623: NOT
17624: PUSH
17625: LD_VAR 0 2
17629: NOT
17630: OR
17631: PUSH
17632: LD_VAR 0 3
17636: NOT
17637: OR
17638: PUSH
17639: LD_VAR 0 2
17643: PUSH
17644: LD_VAR 0 1
17648: GREATER
17649: OR
17650: PUSH
17651: LD_VAR 0 3
17655: PUSH
17656: LD_VAR 0 1
17660: GREATER
17661: OR
17662: IFFALSE 17666
// exit ;
17664: GO 17962
// if direction then
17666: LD_VAR 0 4
17670: IFFALSE 17734
// begin d := 1 ;
17672: LD_ADDR_VAR 0 9
17676: PUSH
17677: LD_INT 1
17679: ST_TO_ADDR
// if i_from > i_to then
17680: LD_VAR 0 2
17684: PUSH
17685: LD_VAR 0 3
17689: GREATER
17690: IFFALSE 17716
// length := ( array - i_from ) + i_to else
17692: LD_ADDR_VAR 0 11
17696: PUSH
17697: LD_VAR 0 1
17701: PUSH
17702: LD_VAR 0 2
17706: MINUS
17707: PUSH
17708: LD_VAR 0 3
17712: PLUS
17713: ST_TO_ADDR
17714: GO 17732
// length := i_to - i_from ;
17716: LD_ADDR_VAR 0 11
17720: PUSH
17721: LD_VAR 0 3
17725: PUSH
17726: LD_VAR 0 2
17730: MINUS
17731: ST_TO_ADDR
// end else
17732: GO 17795
// begin d := - 1 ;
17734: LD_ADDR_VAR 0 9
17738: PUSH
17739: LD_INT 1
17741: NEG
17742: ST_TO_ADDR
// if i_from > i_to then
17743: LD_VAR 0 2
17747: PUSH
17748: LD_VAR 0 3
17752: GREATER
17753: IFFALSE 17773
// length := i_from - i_to else
17755: LD_ADDR_VAR 0 11
17759: PUSH
17760: LD_VAR 0 2
17764: PUSH
17765: LD_VAR 0 3
17769: MINUS
17770: ST_TO_ADDR
17771: GO 17795
// length := ( array - i_to ) + i_from ;
17773: LD_ADDR_VAR 0 11
17777: PUSH
17778: LD_VAR 0 1
17782: PUSH
17783: LD_VAR 0 3
17787: MINUS
17788: PUSH
17789: LD_VAR 0 2
17793: PLUS
17794: ST_TO_ADDR
// end ; if not length then
17795: LD_VAR 0 11
17799: NOT
17800: IFFALSE 17804
// exit ;
17802: GO 17962
// tmp := array ;
17804: LD_ADDR_VAR 0 10
17808: PUSH
17809: LD_VAR 0 1
17813: ST_TO_ADDR
// for i = 1 to length do
17814: LD_ADDR_VAR 0 6
17818: PUSH
17819: DOUBLE
17820: LD_INT 1
17822: DEC
17823: ST_TO_ADDR
17824: LD_VAR 0 11
17828: PUSH
17829: FOR_TO
17830: IFFALSE 17950
// begin for j = 1 to array do
17832: LD_ADDR_VAR 0 7
17836: PUSH
17837: DOUBLE
17838: LD_INT 1
17840: DEC
17841: ST_TO_ADDR
17842: LD_VAR 0 1
17846: PUSH
17847: FOR_TO
17848: IFFALSE 17936
// begin k := j + d ;
17850: LD_ADDR_VAR 0 8
17854: PUSH
17855: LD_VAR 0 7
17859: PUSH
17860: LD_VAR 0 9
17864: PLUS
17865: ST_TO_ADDR
// if k > array then
17866: LD_VAR 0 8
17870: PUSH
17871: LD_VAR 0 1
17875: GREATER
17876: IFFALSE 17886
// k := 1 ;
17878: LD_ADDR_VAR 0 8
17882: PUSH
17883: LD_INT 1
17885: ST_TO_ADDR
// if not k then
17886: LD_VAR 0 8
17890: NOT
17891: IFFALSE 17903
// k := array ;
17893: LD_ADDR_VAR 0 8
17897: PUSH
17898: LD_VAR 0 1
17902: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
17903: LD_ADDR_VAR 0 10
17907: PUSH
17908: LD_VAR 0 10
17912: PPUSH
17913: LD_VAR 0 8
17917: PPUSH
17918: LD_VAR 0 1
17922: PUSH
17923: LD_VAR 0 7
17927: ARRAY
17928: PPUSH
17929: CALL_OW 1
17933: ST_TO_ADDR
// end ;
17934: GO 17847
17936: POP
17937: POP
// array := tmp ;
17938: LD_ADDR_VAR 0 1
17942: PUSH
17943: LD_VAR 0 10
17947: ST_TO_ADDR
// end ;
17948: GO 17829
17950: POP
17951: POP
// result := array ;
17952: LD_ADDR_VAR 0 5
17956: PUSH
17957: LD_VAR 0 1
17961: ST_TO_ADDR
// end ;
17962: LD_VAR 0 5
17966: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
17967: LD_INT 0
17969: PPUSH
17970: PPUSH
// result := 0 ;
17971: LD_ADDR_VAR 0 3
17975: PUSH
17976: LD_INT 0
17978: ST_TO_ADDR
// if not array or not value in array then
17979: LD_VAR 0 1
17983: NOT
17984: PUSH
17985: LD_VAR 0 2
17989: PUSH
17990: LD_VAR 0 1
17994: IN
17995: NOT
17996: OR
17997: IFFALSE 18001
// exit ;
17999: GO 18055
// for i = 1 to array do
18001: LD_ADDR_VAR 0 4
18005: PUSH
18006: DOUBLE
18007: LD_INT 1
18009: DEC
18010: ST_TO_ADDR
18011: LD_VAR 0 1
18015: PUSH
18016: FOR_TO
18017: IFFALSE 18053
// if value = array [ i ] then
18019: LD_VAR 0 2
18023: PUSH
18024: LD_VAR 0 1
18028: PUSH
18029: LD_VAR 0 4
18033: ARRAY
18034: EQUAL
18035: IFFALSE 18051
// begin result := i ;
18037: LD_ADDR_VAR 0 3
18041: PUSH
18042: LD_VAR 0 4
18046: ST_TO_ADDR
// exit ;
18047: POP
18048: POP
18049: GO 18055
// end ;
18051: GO 18016
18053: POP
18054: POP
// end ;
18055: LD_VAR 0 3
18059: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
18060: LD_INT 0
18062: PPUSH
// vc_chassis := chassis ;
18063: LD_ADDR_OWVAR 37
18067: PUSH
18068: LD_VAR 0 1
18072: ST_TO_ADDR
// vc_engine := engine ;
18073: LD_ADDR_OWVAR 39
18077: PUSH
18078: LD_VAR 0 2
18082: ST_TO_ADDR
// vc_control := control ;
18083: LD_ADDR_OWVAR 38
18087: PUSH
18088: LD_VAR 0 3
18092: ST_TO_ADDR
// vc_weapon := weapon ;
18093: LD_ADDR_OWVAR 40
18097: PUSH
18098: LD_VAR 0 4
18102: ST_TO_ADDR
// vc_fuel_battery := fuel ;
18103: LD_ADDR_OWVAR 41
18107: PUSH
18108: LD_VAR 0 5
18112: ST_TO_ADDR
// end ;
18113: LD_VAR 0 6
18117: RET
// export function WantPlant ( unit ) ; var task ; begin
18118: LD_INT 0
18120: PPUSH
18121: PPUSH
// result := false ;
18122: LD_ADDR_VAR 0 2
18126: PUSH
18127: LD_INT 0
18129: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
18130: LD_ADDR_VAR 0 3
18134: PUSH
18135: LD_VAR 0 1
18139: PPUSH
18140: CALL_OW 437
18144: ST_TO_ADDR
// if task then
18145: LD_VAR 0 3
18149: IFFALSE 18177
// if task [ 1 ] [ 1 ] = p then
18151: LD_VAR 0 3
18155: PUSH
18156: LD_INT 1
18158: ARRAY
18159: PUSH
18160: LD_INT 1
18162: ARRAY
18163: PUSH
18164: LD_STRING p
18166: EQUAL
18167: IFFALSE 18177
// result := true ;
18169: LD_ADDR_VAR 0 2
18173: PUSH
18174: LD_INT 1
18176: ST_TO_ADDR
// end ;
18177: LD_VAR 0 2
18181: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
18182: LD_INT 0
18184: PPUSH
18185: PPUSH
18186: PPUSH
18187: PPUSH
// if pos < 1 then
18188: LD_VAR 0 2
18192: PUSH
18193: LD_INT 1
18195: LESS
18196: IFFALSE 18200
// exit ;
18198: GO 18503
// if pos = 1 then
18200: LD_VAR 0 2
18204: PUSH
18205: LD_INT 1
18207: EQUAL
18208: IFFALSE 18241
// result := Replace ( arr , pos [ 1 ] , value ) else
18210: LD_ADDR_VAR 0 4
18214: PUSH
18215: LD_VAR 0 1
18219: PPUSH
18220: LD_VAR 0 2
18224: PUSH
18225: LD_INT 1
18227: ARRAY
18228: PPUSH
18229: LD_VAR 0 3
18233: PPUSH
18234: CALL_OW 1
18238: ST_TO_ADDR
18239: GO 18503
// begin tmp := arr ;
18241: LD_ADDR_VAR 0 6
18245: PUSH
18246: LD_VAR 0 1
18250: ST_TO_ADDR
// s_arr := [ tmp ] ;
18251: LD_ADDR_VAR 0 7
18255: PUSH
18256: LD_VAR 0 6
18260: PUSH
18261: EMPTY
18262: LIST
18263: ST_TO_ADDR
// for i = 1 to pos - 1 do
18264: LD_ADDR_VAR 0 5
18268: PUSH
18269: DOUBLE
18270: LD_INT 1
18272: DEC
18273: ST_TO_ADDR
18274: LD_VAR 0 2
18278: PUSH
18279: LD_INT 1
18281: MINUS
18282: PUSH
18283: FOR_TO
18284: IFFALSE 18329
// begin tmp := tmp [ pos [ i ] ] ;
18286: LD_ADDR_VAR 0 6
18290: PUSH
18291: LD_VAR 0 6
18295: PUSH
18296: LD_VAR 0 2
18300: PUSH
18301: LD_VAR 0 5
18305: ARRAY
18306: ARRAY
18307: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
18308: LD_ADDR_VAR 0 7
18312: PUSH
18313: LD_VAR 0 7
18317: PUSH
18318: LD_VAR 0 6
18322: PUSH
18323: EMPTY
18324: LIST
18325: ADD
18326: ST_TO_ADDR
// end ;
18327: GO 18283
18329: POP
18330: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
18331: LD_ADDR_VAR 0 6
18335: PUSH
18336: LD_VAR 0 6
18340: PPUSH
18341: LD_VAR 0 2
18345: PUSH
18346: LD_VAR 0 2
18350: ARRAY
18351: PPUSH
18352: LD_VAR 0 3
18356: PPUSH
18357: CALL_OW 1
18361: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
18362: LD_ADDR_VAR 0 7
18366: PUSH
18367: LD_VAR 0 7
18371: PPUSH
18372: LD_VAR 0 7
18376: PPUSH
18377: LD_VAR 0 6
18381: PPUSH
18382: CALL_OW 1
18386: ST_TO_ADDR
// for i = s_arr downto 2 do
18387: LD_ADDR_VAR 0 5
18391: PUSH
18392: DOUBLE
18393: LD_VAR 0 7
18397: INC
18398: ST_TO_ADDR
18399: LD_INT 2
18401: PUSH
18402: FOR_DOWNTO
18403: IFFALSE 18487
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
18405: LD_ADDR_VAR 0 6
18409: PUSH
18410: LD_VAR 0 7
18414: PUSH
18415: LD_VAR 0 5
18419: PUSH
18420: LD_INT 1
18422: MINUS
18423: ARRAY
18424: PPUSH
18425: LD_VAR 0 2
18429: PUSH
18430: LD_VAR 0 5
18434: PUSH
18435: LD_INT 1
18437: MINUS
18438: ARRAY
18439: PPUSH
18440: LD_VAR 0 7
18444: PUSH
18445: LD_VAR 0 5
18449: ARRAY
18450: PPUSH
18451: CALL_OW 1
18455: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
18456: LD_ADDR_VAR 0 7
18460: PUSH
18461: LD_VAR 0 7
18465: PPUSH
18466: LD_VAR 0 5
18470: PUSH
18471: LD_INT 1
18473: MINUS
18474: PPUSH
18475: LD_VAR 0 6
18479: PPUSH
18480: CALL_OW 1
18484: ST_TO_ADDR
// end ;
18485: GO 18402
18487: POP
18488: POP
// result := s_arr [ 1 ] ;
18489: LD_ADDR_VAR 0 4
18493: PUSH
18494: LD_VAR 0 7
18498: PUSH
18499: LD_INT 1
18501: ARRAY
18502: ST_TO_ADDR
// end ; end ;
18503: LD_VAR 0 4
18507: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
18508: LD_INT 0
18510: PPUSH
18511: PPUSH
// if not list then
18512: LD_VAR 0 1
18516: NOT
18517: IFFALSE 18521
// exit ;
18519: GO 18612
// i := list [ pos1 ] ;
18521: LD_ADDR_VAR 0 5
18525: PUSH
18526: LD_VAR 0 1
18530: PUSH
18531: LD_VAR 0 2
18535: ARRAY
18536: ST_TO_ADDR
// if not i then
18537: LD_VAR 0 5
18541: NOT
18542: IFFALSE 18546
// exit ;
18544: GO 18612
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
18546: LD_ADDR_VAR 0 1
18550: PUSH
18551: LD_VAR 0 1
18555: PPUSH
18556: LD_VAR 0 2
18560: PPUSH
18561: LD_VAR 0 1
18565: PUSH
18566: LD_VAR 0 3
18570: ARRAY
18571: PPUSH
18572: CALL_OW 1
18576: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
18577: LD_ADDR_VAR 0 1
18581: PUSH
18582: LD_VAR 0 1
18586: PPUSH
18587: LD_VAR 0 3
18591: PPUSH
18592: LD_VAR 0 5
18596: PPUSH
18597: CALL_OW 1
18601: ST_TO_ADDR
// result := list ;
18602: LD_ADDR_VAR 0 4
18606: PUSH
18607: LD_VAR 0 1
18611: ST_TO_ADDR
// end ;
18612: LD_VAR 0 4
18616: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
18617: LD_INT 0
18619: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
18620: LD_ADDR_VAR 0 5
18624: PUSH
18625: LD_VAR 0 1
18629: PPUSH
18630: CALL_OW 250
18634: PPUSH
18635: LD_VAR 0 1
18639: PPUSH
18640: CALL_OW 251
18644: PPUSH
18645: LD_VAR 0 2
18649: PPUSH
18650: LD_VAR 0 3
18654: PPUSH
18655: LD_VAR 0 4
18659: PPUSH
18660: CALL 18670 0 5
18664: ST_TO_ADDR
// end ;
18665: LD_VAR 0 5
18669: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
18670: LD_INT 0
18672: PPUSH
18673: PPUSH
18674: PPUSH
18675: PPUSH
// if not list then
18676: LD_VAR 0 3
18680: NOT
18681: IFFALSE 18685
// exit ;
18683: GO 19073
// result := [ ] ;
18685: LD_ADDR_VAR 0 6
18689: PUSH
18690: EMPTY
18691: ST_TO_ADDR
// for i in list do
18692: LD_ADDR_VAR 0 7
18696: PUSH
18697: LD_VAR 0 3
18701: PUSH
18702: FOR_IN
18703: IFFALSE 18905
// begin tmp := GetDistUnitXY ( i , x , y ) ;
18705: LD_ADDR_VAR 0 9
18709: PUSH
18710: LD_VAR 0 7
18714: PPUSH
18715: LD_VAR 0 1
18719: PPUSH
18720: LD_VAR 0 2
18724: PPUSH
18725: CALL_OW 297
18729: ST_TO_ADDR
// if not result then
18730: LD_VAR 0 6
18734: NOT
18735: IFFALSE 18761
// result := [ [ i , tmp ] ] else
18737: LD_ADDR_VAR 0 6
18741: PUSH
18742: LD_VAR 0 7
18746: PUSH
18747: LD_VAR 0 9
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PUSH
18756: EMPTY
18757: LIST
18758: ST_TO_ADDR
18759: GO 18903
// begin if result [ result ] [ 2 ] < tmp then
18761: LD_VAR 0 6
18765: PUSH
18766: LD_VAR 0 6
18770: ARRAY
18771: PUSH
18772: LD_INT 2
18774: ARRAY
18775: PUSH
18776: LD_VAR 0 9
18780: LESS
18781: IFFALSE 18823
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
18783: LD_ADDR_VAR 0 6
18787: PUSH
18788: LD_VAR 0 6
18792: PPUSH
18793: LD_VAR 0 6
18797: PUSH
18798: LD_INT 1
18800: PLUS
18801: PPUSH
18802: LD_VAR 0 7
18806: PUSH
18807: LD_VAR 0 9
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PPUSH
18816: CALL_OW 2
18820: ST_TO_ADDR
18821: GO 18903
// for j = 1 to result do
18823: LD_ADDR_VAR 0 8
18827: PUSH
18828: DOUBLE
18829: LD_INT 1
18831: DEC
18832: ST_TO_ADDR
18833: LD_VAR 0 6
18837: PUSH
18838: FOR_TO
18839: IFFALSE 18901
// begin if tmp < result [ j ] [ 2 ] then
18841: LD_VAR 0 9
18845: PUSH
18846: LD_VAR 0 6
18850: PUSH
18851: LD_VAR 0 8
18855: ARRAY
18856: PUSH
18857: LD_INT 2
18859: ARRAY
18860: LESS
18861: IFFALSE 18899
// begin result := Insert ( result , j , [ i , tmp ] ) ;
18863: LD_ADDR_VAR 0 6
18867: PUSH
18868: LD_VAR 0 6
18872: PPUSH
18873: LD_VAR 0 8
18877: PPUSH
18878: LD_VAR 0 7
18882: PUSH
18883: LD_VAR 0 9
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PPUSH
18892: CALL_OW 2
18896: ST_TO_ADDR
// break ;
18897: GO 18901
// end ; end ;
18899: GO 18838
18901: POP
18902: POP
// end ; end ;
18903: GO 18702
18905: POP
18906: POP
// if result and not asc then
18907: LD_VAR 0 6
18911: PUSH
18912: LD_VAR 0 4
18916: NOT
18917: AND
18918: IFFALSE 18993
// begin tmp := result ;
18920: LD_ADDR_VAR 0 9
18924: PUSH
18925: LD_VAR 0 6
18929: ST_TO_ADDR
// for i = tmp downto 1 do
18930: LD_ADDR_VAR 0 7
18934: PUSH
18935: DOUBLE
18936: LD_VAR 0 9
18940: INC
18941: ST_TO_ADDR
18942: LD_INT 1
18944: PUSH
18945: FOR_DOWNTO
18946: IFFALSE 18991
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
18948: LD_ADDR_VAR 0 6
18952: PUSH
18953: LD_VAR 0 6
18957: PPUSH
18958: LD_VAR 0 9
18962: PUSH
18963: LD_VAR 0 7
18967: MINUS
18968: PUSH
18969: LD_INT 1
18971: PLUS
18972: PPUSH
18973: LD_VAR 0 9
18977: PUSH
18978: LD_VAR 0 7
18982: ARRAY
18983: PPUSH
18984: CALL_OW 1
18988: ST_TO_ADDR
18989: GO 18945
18991: POP
18992: POP
// end ; tmp := [ ] ;
18993: LD_ADDR_VAR 0 9
18997: PUSH
18998: EMPTY
18999: ST_TO_ADDR
// if mode then
19000: LD_VAR 0 5
19004: IFFALSE 19073
// begin for i = 1 to result do
19006: LD_ADDR_VAR 0 7
19010: PUSH
19011: DOUBLE
19012: LD_INT 1
19014: DEC
19015: ST_TO_ADDR
19016: LD_VAR 0 6
19020: PUSH
19021: FOR_TO
19022: IFFALSE 19061
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
19024: LD_ADDR_VAR 0 9
19028: PUSH
19029: LD_VAR 0 9
19033: PPUSH
19034: LD_VAR 0 7
19038: PPUSH
19039: LD_VAR 0 6
19043: PUSH
19044: LD_VAR 0 7
19048: ARRAY
19049: PUSH
19050: LD_INT 1
19052: ARRAY
19053: PPUSH
19054: CALL_OW 1
19058: ST_TO_ADDR
19059: GO 19021
19061: POP
19062: POP
// result := tmp ;
19063: LD_ADDR_VAR 0 6
19067: PUSH
19068: LD_VAR 0 9
19072: ST_TO_ADDR
// end ; end ;
19073: LD_VAR 0 6
19077: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
19078: LD_INT 0
19080: PPUSH
19081: PPUSH
19082: PPUSH
19083: PPUSH
19084: PPUSH
19085: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
19086: LD_ADDR_VAR 0 5
19090: PUSH
19091: LD_INT 0
19093: PUSH
19094: LD_INT 0
19096: PUSH
19097: LD_INT 0
19099: PUSH
19100: EMPTY
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: ST_TO_ADDR
// if not x or not y then
19108: LD_VAR 0 2
19112: NOT
19113: PUSH
19114: LD_VAR 0 3
19118: NOT
19119: OR
19120: IFFALSE 19124
// exit ;
19122: GO 20770
// if not range then
19124: LD_VAR 0 4
19128: NOT
19129: IFFALSE 19139
// range := 10 ;
19131: LD_ADDR_VAR 0 4
19135: PUSH
19136: LD_INT 10
19138: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19139: LD_ADDR_VAR 0 8
19143: PUSH
19144: LD_INT 81
19146: PUSH
19147: LD_VAR 0 1
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 92
19158: PUSH
19159: LD_VAR 0 2
19163: PUSH
19164: LD_VAR 0 3
19168: PUSH
19169: LD_VAR 0 4
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 3
19182: PUSH
19183: LD_INT 21
19185: PUSH
19186: LD_INT 3
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: LIST
19201: PPUSH
19202: CALL_OW 69
19206: ST_TO_ADDR
// if not tmp then
19207: LD_VAR 0 8
19211: NOT
19212: IFFALSE 19216
// exit ;
19214: GO 20770
// for i in tmp do
19216: LD_ADDR_VAR 0 6
19220: PUSH
19221: LD_VAR 0 8
19225: PUSH
19226: FOR_IN
19227: IFFALSE 20745
// begin points := [ 0 , 0 , 0 ] ;
19229: LD_ADDR_VAR 0 9
19233: PUSH
19234: LD_INT 0
19236: PUSH
19237: LD_INT 0
19239: PUSH
19240: LD_INT 0
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: LIST
19247: ST_TO_ADDR
// bpoints := 1 ;
19248: LD_ADDR_VAR 0 10
19252: PUSH
19253: LD_INT 1
19255: ST_TO_ADDR
// case GetType ( i ) of unit_human :
19256: LD_VAR 0 6
19260: PPUSH
19261: CALL_OW 247
19265: PUSH
19266: LD_INT 1
19268: DOUBLE
19269: EQUAL
19270: IFTRUE 19274
19272: GO 19852
19274: POP
// begin if GetClass ( i ) = 1 then
19275: LD_VAR 0 6
19279: PPUSH
19280: CALL_OW 257
19284: PUSH
19285: LD_INT 1
19287: EQUAL
19288: IFFALSE 19309
// points := [ 10 , 5 , 3 ] ;
19290: LD_ADDR_VAR 0 9
19294: PUSH
19295: LD_INT 10
19297: PUSH
19298: LD_INT 5
19300: PUSH
19301: LD_INT 3
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: LIST
19308: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
19309: LD_VAR 0 6
19313: PPUSH
19314: CALL_OW 257
19318: PUSH
19319: LD_INT 2
19321: PUSH
19322: LD_INT 3
19324: PUSH
19325: LD_INT 4
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: IN
19333: IFFALSE 19354
// points := [ 3 , 2 , 1 ] ;
19335: LD_ADDR_VAR 0 9
19339: PUSH
19340: LD_INT 3
19342: PUSH
19343: LD_INT 2
19345: PUSH
19346: LD_INT 1
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: LIST
19353: ST_TO_ADDR
// if GetClass ( i ) = 5 then
19354: LD_VAR 0 6
19358: PPUSH
19359: CALL_OW 257
19363: PUSH
19364: LD_INT 5
19366: EQUAL
19367: IFFALSE 19388
// points := [ 130 , 5 , 2 ] ;
19369: LD_ADDR_VAR 0 9
19373: PUSH
19374: LD_INT 130
19376: PUSH
19377: LD_INT 5
19379: PUSH
19380: LD_INT 2
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: LIST
19387: ST_TO_ADDR
// if GetClass ( i ) = 8 then
19388: LD_VAR 0 6
19392: PPUSH
19393: CALL_OW 257
19397: PUSH
19398: LD_INT 8
19400: EQUAL
19401: IFFALSE 19422
// points := [ 35 , 35 , 30 ] ;
19403: LD_ADDR_VAR 0 9
19407: PUSH
19408: LD_INT 35
19410: PUSH
19411: LD_INT 35
19413: PUSH
19414: LD_INT 30
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: LIST
19421: ST_TO_ADDR
// if GetClass ( i ) = 9 then
19422: LD_VAR 0 6
19426: PPUSH
19427: CALL_OW 257
19431: PUSH
19432: LD_INT 9
19434: EQUAL
19435: IFFALSE 19456
// points := [ 20 , 55 , 40 ] ;
19437: LD_ADDR_VAR 0 9
19441: PUSH
19442: LD_INT 20
19444: PUSH
19445: LD_INT 55
19447: PUSH
19448: LD_INT 40
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: LIST
19455: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
19456: LD_VAR 0 6
19460: PPUSH
19461: CALL_OW 257
19465: PUSH
19466: LD_INT 12
19468: PUSH
19469: LD_INT 16
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: IN
19476: IFFALSE 19497
// points := [ 5 , 3 , 2 ] ;
19478: LD_ADDR_VAR 0 9
19482: PUSH
19483: LD_INT 5
19485: PUSH
19486: LD_INT 3
19488: PUSH
19489: LD_INT 2
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: LIST
19496: ST_TO_ADDR
// if GetClass ( i ) = 17 then
19497: LD_VAR 0 6
19501: PPUSH
19502: CALL_OW 257
19506: PUSH
19507: LD_INT 17
19509: EQUAL
19510: IFFALSE 19531
// points := [ 100 , 50 , 75 ] ;
19512: LD_ADDR_VAR 0 9
19516: PUSH
19517: LD_INT 100
19519: PUSH
19520: LD_INT 50
19522: PUSH
19523: LD_INT 75
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: LIST
19530: ST_TO_ADDR
// if GetClass ( i ) = 15 then
19531: LD_VAR 0 6
19535: PPUSH
19536: CALL_OW 257
19540: PUSH
19541: LD_INT 15
19543: EQUAL
19544: IFFALSE 19565
// points := [ 10 , 5 , 3 ] ;
19546: LD_ADDR_VAR 0 9
19550: PUSH
19551: LD_INT 10
19553: PUSH
19554: LD_INT 5
19556: PUSH
19557: LD_INT 3
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: LIST
19564: ST_TO_ADDR
// if GetClass ( i ) = 14 then
19565: LD_VAR 0 6
19569: PPUSH
19570: CALL_OW 257
19574: PUSH
19575: LD_INT 14
19577: EQUAL
19578: IFFALSE 19599
// points := [ 10 , 0 , 0 ] ;
19580: LD_ADDR_VAR 0 9
19584: PUSH
19585: LD_INT 10
19587: PUSH
19588: LD_INT 0
19590: PUSH
19591: LD_INT 0
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: LIST
19598: ST_TO_ADDR
// if GetClass ( i ) = 11 then
19599: LD_VAR 0 6
19603: PPUSH
19604: CALL_OW 257
19608: PUSH
19609: LD_INT 11
19611: EQUAL
19612: IFFALSE 19633
// points := [ 30 , 10 , 5 ] ;
19614: LD_ADDR_VAR 0 9
19618: PUSH
19619: LD_INT 30
19621: PUSH
19622: LD_INT 10
19624: PUSH
19625: LD_INT 5
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: LIST
19632: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
19633: LD_VAR 0 1
19637: PPUSH
19638: LD_INT 5
19640: PPUSH
19641: CALL_OW 321
19645: PUSH
19646: LD_INT 2
19648: EQUAL
19649: IFFALSE 19666
// bpoints := bpoints * 1.8 ;
19651: LD_ADDR_VAR 0 10
19655: PUSH
19656: LD_VAR 0 10
19660: PUSH
19661: LD_REAL  1.80000000000000E+0000
19664: MUL
19665: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
19666: LD_VAR 0 6
19670: PPUSH
19671: CALL_OW 257
19675: PUSH
19676: LD_INT 1
19678: PUSH
19679: LD_INT 2
19681: PUSH
19682: LD_INT 3
19684: PUSH
19685: LD_INT 4
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: IN
19694: PUSH
19695: LD_VAR 0 1
19699: PPUSH
19700: LD_INT 51
19702: PPUSH
19703: CALL_OW 321
19707: PUSH
19708: LD_INT 2
19710: EQUAL
19711: AND
19712: IFFALSE 19729
// bpoints := bpoints * 1.2 ;
19714: LD_ADDR_VAR 0 10
19718: PUSH
19719: LD_VAR 0 10
19723: PUSH
19724: LD_REAL  1.20000000000000E+0000
19727: MUL
19728: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
19729: LD_VAR 0 6
19733: PPUSH
19734: CALL_OW 257
19738: PUSH
19739: LD_INT 5
19741: PUSH
19742: LD_INT 7
19744: PUSH
19745: LD_INT 9
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: LIST
19752: IN
19753: PUSH
19754: LD_VAR 0 1
19758: PPUSH
19759: LD_INT 52
19761: PPUSH
19762: CALL_OW 321
19766: PUSH
19767: LD_INT 2
19769: EQUAL
19770: AND
19771: IFFALSE 19788
// bpoints := bpoints * 1.5 ;
19773: LD_ADDR_VAR 0 10
19777: PUSH
19778: LD_VAR 0 10
19782: PUSH
19783: LD_REAL  1.50000000000000E+0000
19786: MUL
19787: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
19788: LD_VAR 0 1
19792: PPUSH
19793: LD_INT 66
19795: PPUSH
19796: CALL_OW 321
19800: PUSH
19801: LD_INT 2
19803: EQUAL
19804: IFFALSE 19821
// bpoints := bpoints * 1.1 ;
19806: LD_ADDR_VAR 0 10
19810: PUSH
19811: LD_VAR 0 10
19815: PUSH
19816: LD_REAL  1.10000000000000E+0000
19819: MUL
19820: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
19821: LD_ADDR_VAR 0 10
19825: PUSH
19826: LD_VAR 0 10
19830: PUSH
19831: LD_VAR 0 6
19835: PPUSH
19836: LD_INT 1
19838: PPUSH
19839: CALL_OW 259
19843: PUSH
19844: LD_REAL  1.15000000000000E+0000
19847: MUL
19848: MUL
19849: ST_TO_ADDR
// end ; unit_vehicle :
19850: GO 20674
19852: LD_INT 2
19854: DOUBLE
19855: EQUAL
19856: IFTRUE 19860
19858: GO 20662
19860: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
19861: LD_VAR 0 6
19865: PPUSH
19866: CALL_OW 264
19870: PUSH
19871: LD_INT 2
19873: PUSH
19874: LD_INT 42
19876: PUSH
19877: LD_INT 24
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: LIST
19884: IN
19885: IFFALSE 19906
// points := [ 25 , 5 , 3 ] ;
19887: LD_ADDR_VAR 0 9
19891: PUSH
19892: LD_INT 25
19894: PUSH
19895: LD_INT 5
19897: PUSH
19898: LD_INT 3
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: LIST
19905: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
19906: LD_VAR 0 6
19910: PPUSH
19911: CALL_OW 264
19915: PUSH
19916: LD_INT 4
19918: PUSH
19919: LD_INT 43
19921: PUSH
19922: LD_INT 25
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: LIST
19929: IN
19930: IFFALSE 19951
// points := [ 40 , 15 , 5 ] ;
19932: LD_ADDR_VAR 0 9
19936: PUSH
19937: LD_INT 40
19939: PUSH
19940: LD_INT 15
19942: PUSH
19943: LD_INT 5
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: LIST
19950: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
19951: LD_VAR 0 6
19955: PPUSH
19956: CALL_OW 264
19960: PUSH
19961: LD_INT 3
19963: PUSH
19964: LD_INT 23
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: IN
19971: IFFALSE 19992
// points := [ 7 , 25 , 8 ] ;
19973: LD_ADDR_VAR 0 9
19977: PUSH
19978: LD_INT 7
19980: PUSH
19981: LD_INT 25
19983: PUSH
19984: LD_INT 8
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: LIST
19991: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
19992: LD_VAR 0 6
19996: PPUSH
19997: CALL_OW 264
20001: PUSH
20002: LD_INT 5
20004: PUSH
20005: LD_INT 27
20007: PUSH
20008: LD_INT 44
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: LIST
20015: IN
20016: IFFALSE 20037
// points := [ 14 , 50 , 16 ] ;
20018: LD_ADDR_VAR 0 9
20022: PUSH
20023: LD_INT 14
20025: PUSH
20026: LD_INT 50
20028: PUSH
20029: LD_INT 16
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: LIST
20036: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
20037: LD_VAR 0 6
20041: PPUSH
20042: CALL_OW 264
20046: PUSH
20047: LD_INT 6
20049: PUSH
20050: LD_INT 46
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: IN
20057: IFFALSE 20078
// points := [ 32 , 120 , 70 ] ;
20059: LD_ADDR_VAR 0 9
20063: PUSH
20064: LD_INT 32
20066: PUSH
20067: LD_INT 120
20069: PUSH
20070: LD_INT 70
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: LIST
20077: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
20078: LD_VAR 0 6
20082: PPUSH
20083: CALL_OW 264
20087: PUSH
20088: LD_INT 7
20090: PUSH
20091: LD_INT 28
20093: PUSH
20094: LD_INT 45
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: LIST
20101: IN
20102: IFFALSE 20123
// points := [ 35 , 20 , 45 ] ;
20104: LD_ADDR_VAR 0 9
20108: PUSH
20109: LD_INT 35
20111: PUSH
20112: LD_INT 20
20114: PUSH
20115: LD_INT 45
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: LIST
20122: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
20123: LD_VAR 0 6
20127: PPUSH
20128: CALL_OW 264
20132: PUSH
20133: LD_INT 47
20135: PUSH
20136: EMPTY
20137: LIST
20138: IN
20139: IFFALSE 20160
// points := [ 67 , 45 , 75 ] ;
20141: LD_ADDR_VAR 0 9
20145: PUSH
20146: LD_INT 67
20148: PUSH
20149: LD_INT 45
20151: PUSH
20152: LD_INT 75
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: LIST
20159: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
20160: LD_VAR 0 6
20164: PPUSH
20165: CALL_OW 264
20169: PUSH
20170: LD_INT 26
20172: PUSH
20173: EMPTY
20174: LIST
20175: IN
20176: IFFALSE 20197
// points := [ 120 , 30 , 80 ] ;
20178: LD_ADDR_VAR 0 9
20182: PUSH
20183: LD_INT 120
20185: PUSH
20186: LD_INT 30
20188: PUSH
20189: LD_INT 80
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: LIST
20196: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
20197: LD_VAR 0 6
20201: PPUSH
20202: CALL_OW 264
20206: PUSH
20207: LD_INT 22
20209: PUSH
20210: EMPTY
20211: LIST
20212: IN
20213: IFFALSE 20234
// points := [ 40 , 1 , 1 ] ;
20215: LD_ADDR_VAR 0 9
20219: PUSH
20220: LD_INT 40
20222: PUSH
20223: LD_INT 1
20225: PUSH
20226: LD_INT 1
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: LIST
20233: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
20234: LD_VAR 0 6
20238: PPUSH
20239: CALL_OW 264
20243: PUSH
20244: LD_INT 29
20246: PUSH
20247: EMPTY
20248: LIST
20249: IN
20250: IFFALSE 20271
// points := [ 70 , 200 , 400 ] ;
20252: LD_ADDR_VAR 0 9
20256: PUSH
20257: LD_INT 70
20259: PUSH
20260: LD_INT 200
20262: PUSH
20263: LD_INT 400
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: LIST
20270: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
20271: LD_VAR 0 6
20275: PPUSH
20276: CALL_OW 264
20280: PUSH
20281: LD_INT 14
20283: PUSH
20284: LD_INT 53
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: IN
20291: IFFALSE 20312
// points := [ 40 , 10 , 20 ] ;
20293: LD_ADDR_VAR 0 9
20297: PUSH
20298: LD_INT 40
20300: PUSH
20301: LD_INT 10
20303: PUSH
20304: LD_INT 20
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: LIST
20311: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
20312: LD_VAR 0 6
20316: PPUSH
20317: CALL_OW 264
20321: PUSH
20322: LD_INT 9
20324: PUSH
20325: EMPTY
20326: LIST
20327: IN
20328: IFFALSE 20349
// points := [ 5 , 70 , 20 ] ;
20330: LD_ADDR_VAR 0 9
20334: PUSH
20335: LD_INT 5
20337: PUSH
20338: LD_INT 70
20340: PUSH
20341: LD_INT 20
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: LIST
20348: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
20349: LD_VAR 0 6
20353: PPUSH
20354: CALL_OW 264
20358: PUSH
20359: LD_INT 10
20361: PUSH
20362: EMPTY
20363: LIST
20364: IN
20365: IFFALSE 20386
// points := [ 35 , 110 , 70 ] ;
20367: LD_ADDR_VAR 0 9
20371: PUSH
20372: LD_INT 35
20374: PUSH
20375: LD_INT 110
20377: PUSH
20378: LD_INT 70
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: LIST
20385: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
20386: LD_VAR 0 6
20390: PPUSH
20391: CALL_OW 265
20395: PUSH
20396: LD_INT 25
20398: EQUAL
20399: IFFALSE 20420
// points := [ 80 , 65 , 100 ] ;
20401: LD_ADDR_VAR 0 9
20405: PUSH
20406: LD_INT 80
20408: PUSH
20409: LD_INT 65
20411: PUSH
20412: LD_INT 100
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: LIST
20419: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
20420: LD_VAR 0 6
20424: PPUSH
20425: CALL_OW 263
20429: PUSH
20430: LD_INT 1
20432: EQUAL
20433: IFFALSE 20468
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
20435: LD_ADDR_VAR 0 10
20439: PUSH
20440: LD_VAR 0 10
20444: PUSH
20445: LD_VAR 0 6
20449: PPUSH
20450: CALL_OW 311
20454: PPUSH
20455: LD_INT 3
20457: PPUSH
20458: CALL_OW 259
20462: PUSH
20463: LD_INT 4
20465: MUL
20466: MUL
20467: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
20468: LD_VAR 0 6
20472: PPUSH
20473: CALL_OW 263
20477: PUSH
20478: LD_INT 2
20480: EQUAL
20481: IFFALSE 20532
// begin j := IsControledBy ( i ) ;
20483: LD_ADDR_VAR 0 7
20487: PUSH
20488: LD_VAR 0 6
20492: PPUSH
20493: CALL_OW 312
20497: ST_TO_ADDR
// if j then
20498: LD_VAR 0 7
20502: IFFALSE 20532
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
20504: LD_ADDR_VAR 0 10
20508: PUSH
20509: LD_VAR 0 10
20513: PUSH
20514: LD_VAR 0 7
20518: PPUSH
20519: LD_INT 3
20521: PPUSH
20522: CALL_OW 259
20526: PUSH
20527: LD_INT 3
20529: MUL
20530: MUL
20531: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
20532: LD_VAR 0 6
20536: PPUSH
20537: CALL_OW 264
20541: PUSH
20542: LD_INT 5
20544: PUSH
20545: LD_INT 6
20547: PUSH
20548: LD_INT 46
20550: PUSH
20551: LD_INT 44
20553: PUSH
20554: LD_INT 47
20556: PUSH
20557: LD_INT 45
20559: PUSH
20560: LD_INT 28
20562: PUSH
20563: LD_INT 7
20565: PUSH
20566: LD_INT 27
20568: PUSH
20569: LD_INT 29
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: IN
20584: PUSH
20585: LD_VAR 0 1
20589: PPUSH
20590: LD_INT 52
20592: PPUSH
20593: CALL_OW 321
20597: PUSH
20598: LD_INT 2
20600: EQUAL
20601: AND
20602: IFFALSE 20619
// bpoints := bpoints * 1.2 ;
20604: LD_ADDR_VAR 0 10
20608: PUSH
20609: LD_VAR 0 10
20613: PUSH
20614: LD_REAL  1.20000000000000E+0000
20617: MUL
20618: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
20619: LD_VAR 0 6
20623: PPUSH
20624: CALL_OW 264
20628: PUSH
20629: LD_INT 6
20631: PUSH
20632: LD_INT 46
20634: PUSH
20635: LD_INT 47
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: LIST
20642: IN
20643: IFFALSE 20660
// bpoints := bpoints * 1.2 ;
20645: LD_ADDR_VAR 0 10
20649: PUSH
20650: LD_VAR 0 10
20654: PUSH
20655: LD_REAL  1.20000000000000E+0000
20658: MUL
20659: ST_TO_ADDR
// end ; unit_building :
20660: GO 20674
20662: LD_INT 3
20664: DOUBLE
20665: EQUAL
20666: IFTRUE 20670
20668: GO 20673
20670: POP
// ; end ;
20671: GO 20674
20673: POP
// for j = 1 to 3 do
20674: LD_ADDR_VAR 0 7
20678: PUSH
20679: DOUBLE
20680: LD_INT 1
20682: DEC
20683: ST_TO_ADDR
20684: LD_INT 3
20686: PUSH
20687: FOR_TO
20688: IFFALSE 20741
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
20690: LD_ADDR_VAR 0 5
20694: PUSH
20695: LD_VAR 0 5
20699: PPUSH
20700: LD_VAR 0 7
20704: PPUSH
20705: LD_VAR 0 5
20709: PUSH
20710: LD_VAR 0 7
20714: ARRAY
20715: PUSH
20716: LD_VAR 0 9
20720: PUSH
20721: LD_VAR 0 7
20725: ARRAY
20726: PUSH
20727: LD_VAR 0 10
20731: MUL
20732: PLUS
20733: PPUSH
20734: CALL_OW 1
20738: ST_TO_ADDR
20739: GO 20687
20741: POP
20742: POP
// end ;
20743: GO 19226
20745: POP
20746: POP
// result := Replace ( result , 4 , tmp ) ;
20747: LD_ADDR_VAR 0 5
20751: PUSH
20752: LD_VAR 0 5
20756: PPUSH
20757: LD_INT 4
20759: PPUSH
20760: LD_VAR 0 8
20764: PPUSH
20765: CALL_OW 1
20769: ST_TO_ADDR
// end ;
20770: LD_VAR 0 5
20774: RET
// export function DangerAtRange ( unit , range ) ; begin
20775: LD_INT 0
20777: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
20778: LD_ADDR_VAR 0 3
20782: PUSH
20783: LD_VAR 0 1
20787: PPUSH
20788: CALL_OW 255
20792: PPUSH
20793: LD_VAR 0 1
20797: PPUSH
20798: CALL_OW 250
20802: PPUSH
20803: LD_VAR 0 1
20807: PPUSH
20808: CALL_OW 251
20812: PPUSH
20813: LD_VAR 0 2
20817: PPUSH
20818: CALL 19078 0 4
20822: ST_TO_ADDR
// end ;
20823: LD_VAR 0 3
20827: RET
// export function DangerInArea ( side , area ) ; begin
20828: LD_INT 0
20830: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
20831: LD_ADDR_VAR 0 3
20835: PUSH
20836: LD_VAR 0 2
20840: PPUSH
20841: LD_INT 81
20843: PUSH
20844: LD_VAR 0 1
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PPUSH
20853: CALL_OW 70
20857: ST_TO_ADDR
// end ;
20858: LD_VAR 0 3
20862: RET
// export function IsExtension ( b ) ; begin
20863: LD_INT 0
20865: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
20866: LD_ADDR_VAR 0 2
20870: PUSH
20871: LD_VAR 0 1
20875: PUSH
20876: LD_INT 23
20878: PUSH
20879: LD_INT 20
20881: PUSH
20882: LD_INT 22
20884: PUSH
20885: LD_INT 17
20887: PUSH
20888: LD_INT 24
20890: PUSH
20891: LD_INT 21
20893: PUSH
20894: LD_INT 19
20896: PUSH
20897: LD_INT 16
20899: PUSH
20900: LD_INT 25
20902: PUSH
20903: LD_INT 18
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: IN
20918: ST_TO_ADDR
// end ;
20919: LD_VAR 0 2
20923: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
20924: LD_INT 0
20926: PPUSH
20927: PPUSH
20928: PPUSH
// result := [ ] ;
20929: LD_ADDR_VAR 0 3
20933: PUSH
20934: EMPTY
20935: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
20936: LD_ADDR_VAR 0 4
20940: PUSH
20941: LD_VAR 0 2
20945: PPUSH
20946: LD_INT 21
20948: PUSH
20949: LD_INT 3
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: PPUSH
20956: CALL_OW 70
20960: ST_TO_ADDR
// if not tmp then
20961: LD_VAR 0 4
20965: NOT
20966: IFFALSE 20970
// exit ;
20968: GO 21028
// for i in tmp do
20970: LD_ADDR_VAR 0 5
20974: PUSH
20975: LD_VAR 0 4
20979: PUSH
20980: FOR_IN
20981: IFFALSE 21016
// if GetBase ( i ) <> base then
20983: LD_VAR 0 5
20987: PPUSH
20988: CALL_OW 274
20992: PUSH
20993: LD_VAR 0 1
20997: NONEQUAL
20998: IFFALSE 21014
// ComLinkToBase ( base , i ) ;
21000: LD_VAR 0 1
21004: PPUSH
21005: LD_VAR 0 5
21009: PPUSH
21010: CALL_OW 169
21014: GO 20980
21016: POP
21017: POP
// result := tmp ;
21018: LD_ADDR_VAR 0 3
21022: PUSH
21023: LD_VAR 0 4
21027: ST_TO_ADDR
// end ;
21028: LD_VAR 0 3
21032: RET
// export function ComComplete ( unit , b ) ; var i ; begin
21033: LD_INT 0
21035: PPUSH
21036: PPUSH
// if BuildingStatus ( b ) = bs_build then
21037: LD_VAR 0 2
21041: PPUSH
21042: CALL_OW 461
21046: PUSH
21047: LD_INT 1
21049: EQUAL
21050: IFFALSE 21110
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
21052: LD_VAR 0 1
21056: PPUSH
21057: LD_STRING h
21059: PUSH
21060: LD_VAR 0 2
21064: PPUSH
21065: CALL_OW 250
21069: PUSH
21070: LD_VAR 0 2
21074: PPUSH
21075: CALL_OW 251
21079: PUSH
21080: LD_VAR 0 2
21084: PUSH
21085: LD_INT 0
21087: PUSH
21088: LD_INT 0
21090: PUSH
21091: LD_INT 0
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: PUSH
21103: EMPTY
21104: LIST
21105: PPUSH
21106: CALL_OW 446
// end ;
21110: LD_VAR 0 3
21114: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
21115: LD_INT 0
21117: PPUSH
21118: PPUSH
21119: PPUSH
21120: PPUSH
21121: PPUSH
21122: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
21123: LD_VAR 0 1
21127: NOT
21128: PUSH
21129: LD_VAR 0 1
21133: PPUSH
21134: CALL_OW 263
21138: PUSH
21139: LD_INT 2
21141: EQUAL
21142: NOT
21143: OR
21144: IFFALSE 21148
// exit ;
21146: GO 21464
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
21148: LD_ADDR_VAR 0 6
21152: PUSH
21153: LD_INT 22
21155: PUSH
21156: LD_VAR 0 1
21160: PPUSH
21161: CALL_OW 255
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 2
21172: PUSH
21173: LD_INT 30
21175: PUSH
21176: LD_INT 36
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 34
21185: PUSH
21186: LD_INT 31
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: LIST
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PPUSH
21202: CALL_OW 69
21206: ST_TO_ADDR
// if not tmp then
21207: LD_VAR 0 6
21211: NOT
21212: IFFALSE 21216
// exit ;
21214: GO 21464
// result := [ ] ;
21216: LD_ADDR_VAR 0 2
21220: PUSH
21221: EMPTY
21222: ST_TO_ADDR
// for i in tmp do
21223: LD_ADDR_VAR 0 3
21227: PUSH
21228: LD_VAR 0 6
21232: PUSH
21233: FOR_IN
21234: IFFALSE 21305
// begin t := UnitsInside ( i ) ;
21236: LD_ADDR_VAR 0 4
21240: PUSH
21241: LD_VAR 0 3
21245: PPUSH
21246: CALL_OW 313
21250: ST_TO_ADDR
// if t then
21251: LD_VAR 0 4
21255: IFFALSE 21303
// for j in t do
21257: LD_ADDR_VAR 0 7
21261: PUSH
21262: LD_VAR 0 4
21266: PUSH
21267: FOR_IN
21268: IFFALSE 21301
// result := Insert ( result , result + 1 , j ) ;
21270: LD_ADDR_VAR 0 2
21274: PUSH
21275: LD_VAR 0 2
21279: PPUSH
21280: LD_VAR 0 2
21284: PUSH
21285: LD_INT 1
21287: PLUS
21288: PPUSH
21289: LD_VAR 0 7
21293: PPUSH
21294: CALL_OW 2
21298: ST_TO_ADDR
21299: GO 21267
21301: POP
21302: POP
// end ;
21303: GO 21233
21305: POP
21306: POP
// if not result then
21307: LD_VAR 0 2
21311: NOT
21312: IFFALSE 21316
// exit ;
21314: GO 21464
// mech := result [ 1 ] ;
21316: LD_ADDR_VAR 0 5
21320: PUSH
21321: LD_VAR 0 2
21325: PUSH
21326: LD_INT 1
21328: ARRAY
21329: ST_TO_ADDR
// if result > 1 then
21330: LD_VAR 0 2
21334: PUSH
21335: LD_INT 1
21337: GREATER
21338: IFFALSE 21450
// for i = 2 to result do
21340: LD_ADDR_VAR 0 3
21344: PUSH
21345: DOUBLE
21346: LD_INT 2
21348: DEC
21349: ST_TO_ADDR
21350: LD_VAR 0 2
21354: PUSH
21355: FOR_TO
21356: IFFALSE 21448
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
21358: LD_ADDR_VAR 0 4
21362: PUSH
21363: LD_VAR 0 2
21367: PUSH
21368: LD_VAR 0 3
21372: ARRAY
21373: PPUSH
21374: LD_INT 3
21376: PPUSH
21377: CALL_OW 259
21381: PUSH
21382: LD_VAR 0 2
21386: PUSH
21387: LD_VAR 0 3
21391: ARRAY
21392: PPUSH
21393: CALL_OW 432
21397: MINUS
21398: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
21399: LD_VAR 0 4
21403: PUSH
21404: LD_VAR 0 5
21408: PPUSH
21409: LD_INT 3
21411: PPUSH
21412: CALL_OW 259
21416: PUSH
21417: LD_VAR 0 5
21421: PPUSH
21422: CALL_OW 432
21426: MINUS
21427: GREATEREQUAL
21428: IFFALSE 21446
// mech := result [ i ] ;
21430: LD_ADDR_VAR 0 5
21434: PUSH
21435: LD_VAR 0 2
21439: PUSH
21440: LD_VAR 0 3
21444: ARRAY
21445: ST_TO_ADDR
// end ;
21446: GO 21355
21448: POP
21449: POP
// ComLinkTo ( vehicle , mech ) ;
21450: LD_VAR 0 1
21454: PPUSH
21455: LD_VAR 0 5
21459: PPUSH
21460: CALL_OW 135
// end ;
21464: LD_VAR 0 2
21468: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
21469: LD_INT 0
21471: PPUSH
21472: PPUSH
21473: PPUSH
21474: PPUSH
21475: PPUSH
21476: PPUSH
21477: PPUSH
21478: PPUSH
21479: PPUSH
21480: PPUSH
21481: PPUSH
21482: PPUSH
21483: PPUSH
// result := [ ] ;
21484: LD_ADDR_VAR 0 7
21488: PUSH
21489: EMPTY
21490: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
21491: LD_VAR 0 1
21495: PPUSH
21496: CALL_OW 266
21500: PUSH
21501: LD_INT 0
21503: PUSH
21504: LD_INT 1
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: IN
21511: NOT
21512: IFFALSE 21516
// exit ;
21514: GO 23147
// if name then
21516: LD_VAR 0 3
21520: IFFALSE 21536
// SetBName ( base_dep , name ) ;
21522: LD_VAR 0 1
21526: PPUSH
21527: LD_VAR 0 3
21531: PPUSH
21532: CALL_OW 500
// base := GetBase ( base_dep ) ;
21536: LD_ADDR_VAR 0 15
21540: PUSH
21541: LD_VAR 0 1
21545: PPUSH
21546: CALL_OW 274
21550: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
21551: LD_ADDR_VAR 0 16
21555: PUSH
21556: LD_VAR 0 1
21560: PPUSH
21561: CALL_OW 255
21565: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
21566: LD_ADDR_VAR 0 17
21570: PUSH
21571: LD_VAR 0 1
21575: PPUSH
21576: CALL_OW 248
21580: ST_TO_ADDR
// if sources then
21581: LD_VAR 0 5
21585: IFFALSE 21632
// for i = 1 to 3 do
21587: LD_ADDR_VAR 0 8
21591: PUSH
21592: DOUBLE
21593: LD_INT 1
21595: DEC
21596: ST_TO_ADDR
21597: LD_INT 3
21599: PUSH
21600: FOR_TO
21601: IFFALSE 21630
// AddResourceType ( base , i , sources [ i ] ) ;
21603: LD_VAR 0 15
21607: PPUSH
21608: LD_VAR 0 8
21612: PPUSH
21613: LD_VAR 0 5
21617: PUSH
21618: LD_VAR 0 8
21622: ARRAY
21623: PPUSH
21624: CALL_OW 276
21628: GO 21600
21630: POP
21631: POP
// buildings := GetBaseBuildings ( base , area ) ;
21632: LD_ADDR_VAR 0 18
21636: PUSH
21637: LD_VAR 0 15
21641: PPUSH
21642: LD_VAR 0 2
21646: PPUSH
21647: CALL 20924 0 2
21651: ST_TO_ADDR
// InitHc ;
21652: CALL_OW 19
// InitUc ;
21656: CALL_OW 18
// uc_side := side ;
21660: LD_ADDR_OWVAR 20
21664: PUSH
21665: LD_VAR 0 16
21669: ST_TO_ADDR
// uc_nation := nation ;
21670: LD_ADDR_OWVAR 21
21674: PUSH
21675: LD_VAR 0 17
21679: ST_TO_ADDR
// if buildings then
21680: LD_VAR 0 18
21684: IFFALSE 23006
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
21686: LD_ADDR_VAR 0 19
21690: PUSH
21691: LD_VAR 0 18
21695: PPUSH
21696: LD_INT 2
21698: PUSH
21699: LD_INT 30
21701: PUSH
21702: LD_INT 29
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 30
21711: PUSH
21712: LD_INT 30
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: LIST
21723: PPUSH
21724: CALL_OW 72
21728: ST_TO_ADDR
// if tmp then
21729: LD_VAR 0 19
21733: IFFALSE 21781
// for i in tmp do
21735: LD_ADDR_VAR 0 8
21739: PUSH
21740: LD_VAR 0 19
21744: PUSH
21745: FOR_IN
21746: IFFALSE 21779
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
21748: LD_VAR 0 8
21752: PPUSH
21753: CALL_OW 250
21757: PPUSH
21758: LD_VAR 0 8
21762: PPUSH
21763: CALL_OW 251
21767: PPUSH
21768: LD_VAR 0 16
21772: PPUSH
21773: CALL_OW 441
21777: GO 21745
21779: POP
21780: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
21781: LD_VAR 0 18
21785: PPUSH
21786: LD_INT 2
21788: PUSH
21789: LD_INT 30
21791: PUSH
21792: LD_INT 32
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 30
21801: PUSH
21802: LD_INT 33
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: LIST
21813: PPUSH
21814: CALL_OW 72
21818: IFFALSE 21906
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
21820: LD_ADDR_VAR 0 8
21824: PUSH
21825: LD_VAR 0 18
21829: PPUSH
21830: LD_INT 2
21832: PUSH
21833: LD_INT 30
21835: PUSH
21836: LD_INT 32
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PUSH
21843: LD_INT 30
21845: PUSH
21846: LD_INT 33
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: LIST
21857: PPUSH
21858: CALL_OW 72
21862: PUSH
21863: FOR_IN
21864: IFFALSE 21904
// begin if not GetBWeapon ( i ) then
21866: LD_VAR 0 8
21870: PPUSH
21871: CALL_OW 269
21875: NOT
21876: IFFALSE 21902
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
21878: LD_VAR 0 8
21882: PPUSH
21883: LD_VAR 0 8
21887: PPUSH
21888: LD_VAR 0 2
21892: PPUSH
21893: CALL 23152 0 2
21897: PPUSH
21898: CALL_OW 431
// end ;
21902: GO 21863
21904: POP
21905: POP
// end ; for i = 1 to personel do
21906: LD_ADDR_VAR 0 8
21910: PUSH
21911: DOUBLE
21912: LD_INT 1
21914: DEC
21915: ST_TO_ADDR
21916: LD_VAR 0 6
21920: PUSH
21921: FOR_TO
21922: IFFALSE 22986
// begin if i > 4 then
21924: LD_VAR 0 8
21928: PUSH
21929: LD_INT 4
21931: GREATER
21932: IFFALSE 21936
// break ;
21934: GO 22986
// case i of 1 :
21936: LD_VAR 0 8
21940: PUSH
21941: LD_INT 1
21943: DOUBLE
21944: EQUAL
21945: IFTRUE 21949
21947: GO 22029
21949: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
21950: LD_ADDR_VAR 0 12
21954: PUSH
21955: LD_VAR 0 18
21959: PPUSH
21960: LD_INT 22
21962: PUSH
21963: LD_VAR 0 16
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 58
21974: PUSH
21975: EMPTY
21976: LIST
21977: PUSH
21978: LD_INT 2
21980: PUSH
21981: LD_INT 30
21983: PUSH
21984: LD_INT 32
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PUSH
21991: LD_INT 30
21993: PUSH
21994: LD_INT 4
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 30
22003: PUSH
22004: LD_INT 5
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: LIST
22021: PPUSH
22022: CALL_OW 72
22026: ST_TO_ADDR
22027: GO 22251
22029: LD_INT 2
22031: DOUBLE
22032: EQUAL
22033: IFTRUE 22037
22035: GO 22099
22037: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
22038: LD_ADDR_VAR 0 12
22042: PUSH
22043: LD_VAR 0 18
22047: PPUSH
22048: LD_INT 22
22050: PUSH
22051: LD_VAR 0 16
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: LD_INT 2
22062: PUSH
22063: LD_INT 30
22065: PUSH
22066: LD_INT 0
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 30
22075: PUSH
22076: LD_INT 1
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: LIST
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PPUSH
22092: CALL_OW 72
22096: ST_TO_ADDR
22097: GO 22251
22099: LD_INT 3
22101: DOUBLE
22102: EQUAL
22103: IFTRUE 22107
22105: GO 22169
22107: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
22108: LD_ADDR_VAR 0 12
22112: PUSH
22113: LD_VAR 0 18
22117: PPUSH
22118: LD_INT 22
22120: PUSH
22121: LD_VAR 0 16
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PUSH
22130: LD_INT 2
22132: PUSH
22133: LD_INT 30
22135: PUSH
22136: LD_INT 2
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PUSH
22143: LD_INT 30
22145: PUSH
22146: LD_INT 3
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: LIST
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PPUSH
22162: CALL_OW 72
22166: ST_TO_ADDR
22167: GO 22251
22169: LD_INT 4
22171: DOUBLE
22172: EQUAL
22173: IFTRUE 22177
22175: GO 22250
22177: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
22178: LD_ADDR_VAR 0 12
22182: PUSH
22183: LD_VAR 0 18
22187: PPUSH
22188: LD_INT 22
22190: PUSH
22191: LD_VAR 0 16
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PUSH
22200: LD_INT 2
22202: PUSH
22203: LD_INT 30
22205: PUSH
22206: LD_INT 6
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 30
22215: PUSH
22216: LD_INT 7
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 30
22225: PUSH
22226: LD_INT 8
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PPUSH
22243: CALL_OW 72
22247: ST_TO_ADDR
22248: GO 22251
22250: POP
// if i = 1 then
22251: LD_VAR 0 8
22255: PUSH
22256: LD_INT 1
22258: EQUAL
22259: IFFALSE 22370
// begin tmp := [ ] ;
22261: LD_ADDR_VAR 0 19
22265: PUSH
22266: EMPTY
22267: ST_TO_ADDR
// for j in f do
22268: LD_ADDR_VAR 0 9
22272: PUSH
22273: LD_VAR 0 12
22277: PUSH
22278: FOR_IN
22279: IFFALSE 22352
// if GetBType ( j ) = b_bunker then
22281: LD_VAR 0 9
22285: PPUSH
22286: CALL_OW 266
22290: PUSH
22291: LD_INT 32
22293: EQUAL
22294: IFFALSE 22321
// tmp := Insert ( tmp , 1 , j ) else
22296: LD_ADDR_VAR 0 19
22300: PUSH
22301: LD_VAR 0 19
22305: PPUSH
22306: LD_INT 1
22308: PPUSH
22309: LD_VAR 0 9
22313: PPUSH
22314: CALL_OW 2
22318: ST_TO_ADDR
22319: GO 22350
// tmp := Insert ( tmp , tmp + 1 , j ) ;
22321: LD_ADDR_VAR 0 19
22325: PUSH
22326: LD_VAR 0 19
22330: PPUSH
22331: LD_VAR 0 19
22335: PUSH
22336: LD_INT 1
22338: PLUS
22339: PPUSH
22340: LD_VAR 0 9
22344: PPUSH
22345: CALL_OW 2
22349: ST_TO_ADDR
22350: GO 22278
22352: POP
22353: POP
// if tmp then
22354: LD_VAR 0 19
22358: IFFALSE 22370
// f := tmp ;
22360: LD_ADDR_VAR 0 12
22364: PUSH
22365: LD_VAR 0 19
22369: ST_TO_ADDR
// end ; x := personel [ i ] ;
22370: LD_ADDR_VAR 0 13
22374: PUSH
22375: LD_VAR 0 6
22379: PUSH
22380: LD_VAR 0 8
22384: ARRAY
22385: ST_TO_ADDR
// if x = - 1 then
22386: LD_VAR 0 13
22390: PUSH
22391: LD_INT 1
22393: NEG
22394: EQUAL
22395: IFFALSE 22604
// begin for j in f do
22397: LD_ADDR_VAR 0 9
22401: PUSH
22402: LD_VAR 0 12
22406: PUSH
22407: FOR_IN
22408: IFFALSE 22600
// repeat InitHc ;
22410: CALL_OW 19
// if GetBType ( j ) = b_barracks then
22414: LD_VAR 0 9
22418: PPUSH
22419: CALL_OW 266
22423: PUSH
22424: LD_INT 5
22426: EQUAL
22427: IFFALSE 22497
// begin if UnitsInside ( j ) < 3 then
22429: LD_VAR 0 9
22433: PPUSH
22434: CALL_OW 313
22438: PUSH
22439: LD_INT 3
22441: LESS
22442: IFFALSE 22478
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22444: LD_INT 0
22446: PPUSH
22447: LD_INT 5
22449: PUSH
22450: LD_INT 8
22452: PUSH
22453: LD_INT 9
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: LIST
22460: PUSH
22461: LD_VAR 0 17
22465: ARRAY
22466: PPUSH
22467: LD_VAR 0 4
22471: PPUSH
22472: CALL_OW 380
22476: GO 22495
// PrepareHuman ( false , i , skill ) ;
22478: LD_INT 0
22480: PPUSH
22481: LD_VAR 0 8
22485: PPUSH
22486: LD_VAR 0 4
22490: PPUSH
22491: CALL_OW 380
// end else
22495: GO 22514
// PrepareHuman ( false , i , skill ) ;
22497: LD_INT 0
22499: PPUSH
22500: LD_VAR 0 8
22504: PPUSH
22505: LD_VAR 0 4
22509: PPUSH
22510: CALL_OW 380
// un := CreateHuman ;
22514: LD_ADDR_VAR 0 14
22518: PUSH
22519: CALL_OW 44
22523: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22524: LD_ADDR_VAR 0 7
22528: PUSH
22529: LD_VAR 0 7
22533: PPUSH
22534: LD_INT 1
22536: PPUSH
22537: LD_VAR 0 14
22541: PPUSH
22542: CALL_OW 2
22546: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
22547: LD_VAR 0 14
22551: PPUSH
22552: LD_VAR 0 9
22556: PPUSH
22557: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
22561: LD_VAR 0 9
22565: PPUSH
22566: CALL_OW 313
22570: PUSH
22571: LD_INT 6
22573: EQUAL
22574: PUSH
22575: LD_VAR 0 9
22579: PPUSH
22580: CALL_OW 266
22584: PUSH
22585: LD_INT 32
22587: PUSH
22588: LD_INT 31
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: IN
22595: OR
22596: IFFALSE 22410
22598: GO 22407
22600: POP
22601: POP
// end else
22602: GO 22984
// for j = 1 to x do
22604: LD_ADDR_VAR 0 9
22608: PUSH
22609: DOUBLE
22610: LD_INT 1
22612: DEC
22613: ST_TO_ADDR
22614: LD_VAR 0 13
22618: PUSH
22619: FOR_TO
22620: IFFALSE 22982
// begin InitHc ;
22622: CALL_OW 19
// if not f then
22626: LD_VAR 0 12
22630: NOT
22631: IFFALSE 22720
// begin PrepareHuman ( false , i , skill ) ;
22633: LD_INT 0
22635: PPUSH
22636: LD_VAR 0 8
22640: PPUSH
22641: LD_VAR 0 4
22645: PPUSH
22646: CALL_OW 380
// un := CreateHuman ;
22650: LD_ADDR_VAR 0 14
22654: PUSH
22655: CALL_OW 44
22659: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22660: LD_ADDR_VAR 0 7
22664: PUSH
22665: LD_VAR 0 7
22669: PPUSH
22670: LD_INT 1
22672: PPUSH
22673: LD_VAR 0 14
22677: PPUSH
22678: CALL_OW 2
22682: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22683: LD_VAR 0 14
22687: PPUSH
22688: LD_VAR 0 1
22692: PPUSH
22693: CALL_OW 250
22697: PPUSH
22698: LD_VAR 0 1
22702: PPUSH
22703: CALL_OW 251
22707: PPUSH
22708: LD_INT 10
22710: PPUSH
22711: LD_INT 0
22713: PPUSH
22714: CALL_OW 50
// continue ;
22718: GO 22619
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
22720: LD_VAR 0 12
22724: PUSH
22725: LD_INT 1
22727: ARRAY
22728: PPUSH
22729: CALL_OW 313
22733: PUSH
22734: LD_VAR 0 12
22738: PUSH
22739: LD_INT 1
22741: ARRAY
22742: PPUSH
22743: CALL_OW 266
22747: PUSH
22748: LD_INT 32
22750: PUSH
22751: LD_INT 31
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: IN
22758: AND
22759: PUSH
22760: LD_VAR 0 12
22764: PUSH
22765: LD_INT 1
22767: ARRAY
22768: PPUSH
22769: CALL_OW 313
22773: PUSH
22774: LD_INT 6
22776: EQUAL
22777: OR
22778: IFFALSE 22798
// f := Delete ( f , 1 ) ;
22780: LD_ADDR_VAR 0 12
22784: PUSH
22785: LD_VAR 0 12
22789: PPUSH
22790: LD_INT 1
22792: PPUSH
22793: CALL_OW 3
22797: ST_TO_ADDR
// if not f then
22798: LD_VAR 0 12
22802: NOT
22803: IFFALSE 22821
// begin x := x + 2 ;
22805: LD_ADDR_VAR 0 13
22809: PUSH
22810: LD_VAR 0 13
22814: PUSH
22815: LD_INT 2
22817: PLUS
22818: ST_TO_ADDR
// continue ;
22819: GO 22619
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
22821: LD_VAR 0 12
22825: PUSH
22826: LD_INT 1
22828: ARRAY
22829: PPUSH
22830: CALL_OW 266
22834: PUSH
22835: LD_INT 5
22837: EQUAL
22838: IFFALSE 22912
// begin if UnitsInside ( f [ 1 ] ) < 3 then
22840: LD_VAR 0 12
22844: PUSH
22845: LD_INT 1
22847: ARRAY
22848: PPUSH
22849: CALL_OW 313
22853: PUSH
22854: LD_INT 3
22856: LESS
22857: IFFALSE 22893
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22859: LD_INT 0
22861: PPUSH
22862: LD_INT 5
22864: PUSH
22865: LD_INT 8
22867: PUSH
22868: LD_INT 9
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: LIST
22875: PUSH
22876: LD_VAR 0 17
22880: ARRAY
22881: PPUSH
22882: LD_VAR 0 4
22886: PPUSH
22887: CALL_OW 380
22891: GO 22910
// PrepareHuman ( false , i , skill ) ;
22893: LD_INT 0
22895: PPUSH
22896: LD_VAR 0 8
22900: PPUSH
22901: LD_VAR 0 4
22905: PPUSH
22906: CALL_OW 380
// end else
22910: GO 22929
// PrepareHuman ( false , i , skill ) ;
22912: LD_INT 0
22914: PPUSH
22915: LD_VAR 0 8
22919: PPUSH
22920: LD_VAR 0 4
22924: PPUSH
22925: CALL_OW 380
// un := CreateHuman ;
22929: LD_ADDR_VAR 0 14
22933: PUSH
22934: CALL_OW 44
22938: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22939: LD_ADDR_VAR 0 7
22943: PUSH
22944: LD_VAR 0 7
22948: PPUSH
22949: LD_INT 1
22951: PPUSH
22952: LD_VAR 0 14
22956: PPUSH
22957: CALL_OW 2
22961: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
22962: LD_VAR 0 14
22966: PPUSH
22967: LD_VAR 0 12
22971: PUSH
22972: LD_INT 1
22974: ARRAY
22975: PPUSH
22976: CALL_OW 52
// end ;
22980: GO 22619
22982: POP
22983: POP
// end ;
22984: GO 21921
22986: POP
22987: POP
// result := result ^ buildings ;
22988: LD_ADDR_VAR 0 7
22992: PUSH
22993: LD_VAR 0 7
22997: PUSH
22998: LD_VAR 0 18
23002: ADD
23003: ST_TO_ADDR
// end else
23004: GO 23147
// begin for i = 1 to personel do
23006: LD_ADDR_VAR 0 8
23010: PUSH
23011: DOUBLE
23012: LD_INT 1
23014: DEC
23015: ST_TO_ADDR
23016: LD_VAR 0 6
23020: PUSH
23021: FOR_TO
23022: IFFALSE 23145
// begin if i > 4 then
23024: LD_VAR 0 8
23028: PUSH
23029: LD_INT 4
23031: GREATER
23032: IFFALSE 23036
// break ;
23034: GO 23145
// x := personel [ i ] ;
23036: LD_ADDR_VAR 0 13
23040: PUSH
23041: LD_VAR 0 6
23045: PUSH
23046: LD_VAR 0 8
23050: ARRAY
23051: ST_TO_ADDR
// if x = - 1 then
23052: LD_VAR 0 13
23056: PUSH
23057: LD_INT 1
23059: NEG
23060: EQUAL
23061: IFFALSE 23065
// continue ;
23063: GO 23021
// PrepareHuman ( false , i , skill ) ;
23065: LD_INT 0
23067: PPUSH
23068: LD_VAR 0 8
23072: PPUSH
23073: LD_VAR 0 4
23077: PPUSH
23078: CALL_OW 380
// un := CreateHuman ;
23082: LD_ADDR_VAR 0 14
23086: PUSH
23087: CALL_OW 44
23091: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23092: LD_VAR 0 14
23096: PPUSH
23097: LD_VAR 0 1
23101: PPUSH
23102: CALL_OW 250
23106: PPUSH
23107: LD_VAR 0 1
23111: PPUSH
23112: CALL_OW 251
23116: PPUSH
23117: LD_INT 10
23119: PPUSH
23120: LD_INT 0
23122: PPUSH
23123: CALL_OW 50
// result := result ^ un ;
23127: LD_ADDR_VAR 0 7
23131: PUSH
23132: LD_VAR 0 7
23136: PUSH
23137: LD_VAR 0 14
23141: ADD
23142: ST_TO_ADDR
// end ;
23143: GO 23021
23145: POP
23146: POP
// end ; end ;
23147: LD_VAR 0 7
23151: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
23152: LD_INT 0
23154: PPUSH
23155: PPUSH
23156: PPUSH
23157: PPUSH
23158: PPUSH
23159: PPUSH
23160: PPUSH
23161: PPUSH
23162: PPUSH
23163: PPUSH
23164: PPUSH
23165: PPUSH
23166: PPUSH
23167: PPUSH
23168: PPUSH
23169: PPUSH
// result := false ;
23170: LD_ADDR_VAR 0 3
23174: PUSH
23175: LD_INT 0
23177: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
23178: LD_VAR 0 1
23182: NOT
23183: PUSH
23184: LD_VAR 0 1
23188: PPUSH
23189: CALL_OW 266
23193: PUSH
23194: LD_INT 32
23196: PUSH
23197: LD_INT 33
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: IN
23204: NOT
23205: OR
23206: IFFALSE 23210
// exit ;
23208: GO 24346
// nat := GetNation ( tower ) ;
23210: LD_ADDR_VAR 0 12
23214: PUSH
23215: LD_VAR 0 1
23219: PPUSH
23220: CALL_OW 248
23224: ST_TO_ADDR
// side := GetSide ( tower ) ;
23225: LD_ADDR_VAR 0 16
23229: PUSH
23230: LD_VAR 0 1
23234: PPUSH
23235: CALL_OW 255
23239: ST_TO_ADDR
// x := GetX ( tower ) ;
23240: LD_ADDR_VAR 0 10
23244: PUSH
23245: LD_VAR 0 1
23249: PPUSH
23250: CALL_OW 250
23254: ST_TO_ADDR
// y := GetY ( tower ) ;
23255: LD_ADDR_VAR 0 11
23259: PUSH
23260: LD_VAR 0 1
23264: PPUSH
23265: CALL_OW 251
23269: ST_TO_ADDR
// if not x or not y then
23270: LD_VAR 0 10
23274: NOT
23275: PUSH
23276: LD_VAR 0 11
23280: NOT
23281: OR
23282: IFFALSE 23286
// exit ;
23284: GO 24346
// weapon := 0 ;
23286: LD_ADDR_VAR 0 18
23290: PUSH
23291: LD_INT 0
23293: ST_TO_ADDR
// fac_list := [ ] ;
23294: LD_ADDR_VAR 0 17
23298: PUSH
23299: EMPTY
23300: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
23301: LD_ADDR_VAR 0 6
23305: PUSH
23306: LD_VAR 0 1
23310: PPUSH
23311: CALL_OW 274
23315: PPUSH
23316: LD_VAR 0 2
23320: PPUSH
23321: CALL 20924 0 2
23325: PPUSH
23326: LD_INT 30
23328: PUSH
23329: LD_INT 3
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PPUSH
23336: CALL_OW 72
23340: ST_TO_ADDR
// if not factories then
23341: LD_VAR 0 6
23345: NOT
23346: IFFALSE 23350
// exit ;
23348: GO 24346
// for i in factories do
23350: LD_ADDR_VAR 0 8
23354: PUSH
23355: LD_VAR 0 6
23359: PUSH
23360: FOR_IN
23361: IFFALSE 23386
// fac_list := fac_list union AvailableWeaponList ( i ) ;
23363: LD_ADDR_VAR 0 17
23367: PUSH
23368: LD_VAR 0 17
23372: PUSH
23373: LD_VAR 0 8
23377: PPUSH
23378: CALL_OW 478
23382: UNION
23383: ST_TO_ADDR
23384: GO 23360
23386: POP
23387: POP
// if not fac_list then
23388: LD_VAR 0 17
23392: NOT
23393: IFFALSE 23397
// exit ;
23395: GO 24346
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
23397: LD_ADDR_VAR 0 5
23401: PUSH
23402: LD_INT 4
23404: PUSH
23405: LD_INT 5
23407: PUSH
23408: LD_INT 9
23410: PUSH
23411: LD_INT 10
23413: PUSH
23414: LD_INT 6
23416: PUSH
23417: LD_INT 7
23419: PUSH
23420: LD_INT 11
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: PUSH
23432: LD_INT 27
23434: PUSH
23435: LD_INT 28
23437: PUSH
23438: LD_INT 26
23440: PUSH
23441: LD_INT 30
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 43
23452: PUSH
23453: LD_INT 44
23455: PUSH
23456: LD_INT 46
23458: PUSH
23459: LD_INT 45
23461: PUSH
23462: LD_INT 47
23464: PUSH
23465: LD_INT 49
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: LIST
23480: PUSH
23481: LD_VAR 0 12
23485: ARRAY
23486: ST_TO_ADDR
// for i in list do
23487: LD_ADDR_VAR 0 8
23491: PUSH
23492: LD_VAR 0 5
23496: PUSH
23497: FOR_IN
23498: IFFALSE 23531
// if not i in fac_list then
23500: LD_VAR 0 8
23504: PUSH
23505: LD_VAR 0 17
23509: IN
23510: NOT
23511: IFFALSE 23529
// list := list diff i ;
23513: LD_ADDR_VAR 0 5
23517: PUSH
23518: LD_VAR 0 5
23522: PUSH
23523: LD_VAR 0 8
23527: DIFF
23528: ST_TO_ADDR
23529: GO 23497
23531: POP
23532: POP
// if not list then
23533: LD_VAR 0 5
23537: NOT
23538: IFFALSE 23542
// exit ;
23540: GO 24346
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
23542: LD_VAR 0 12
23546: PUSH
23547: LD_INT 3
23549: EQUAL
23550: PUSH
23551: LD_INT 49
23553: PUSH
23554: LD_VAR 0 5
23558: IN
23559: AND
23560: PUSH
23561: LD_INT 31
23563: PPUSH
23564: LD_VAR 0 16
23568: PPUSH
23569: CALL_OW 321
23573: PUSH
23574: LD_INT 2
23576: EQUAL
23577: AND
23578: IFFALSE 23638
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
23580: LD_INT 22
23582: PUSH
23583: LD_VAR 0 16
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: PUSH
23592: LD_INT 35
23594: PUSH
23595: LD_INT 49
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PUSH
23602: LD_INT 91
23604: PUSH
23605: LD_VAR 0 1
23609: PUSH
23610: LD_INT 10
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: LIST
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: LIST
23622: PPUSH
23623: CALL_OW 69
23627: NOT
23628: IFFALSE 23638
// weapon := ru_time_lapser ;
23630: LD_ADDR_VAR 0 18
23634: PUSH
23635: LD_INT 49
23637: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
23638: LD_VAR 0 12
23642: PUSH
23643: LD_INT 1
23645: PUSH
23646: LD_INT 2
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: IN
23653: PUSH
23654: LD_INT 11
23656: PUSH
23657: LD_VAR 0 5
23661: IN
23662: PUSH
23663: LD_INT 30
23665: PUSH
23666: LD_VAR 0 5
23670: IN
23671: OR
23672: AND
23673: PUSH
23674: LD_INT 6
23676: PPUSH
23677: LD_VAR 0 16
23681: PPUSH
23682: CALL_OW 321
23686: PUSH
23687: LD_INT 2
23689: EQUAL
23690: AND
23691: IFFALSE 23856
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
23693: LD_INT 22
23695: PUSH
23696: LD_VAR 0 16
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 2
23707: PUSH
23708: LD_INT 35
23710: PUSH
23711: LD_INT 11
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 35
23720: PUSH
23721: LD_INT 30
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: LIST
23732: PUSH
23733: LD_INT 91
23735: PUSH
23736: LD_VAR 0 1
23740: PUSH
23741: LD_INT 18
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: LIST
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: LIST
23753: PPUSH
23754: CALL_OW 69
23758: NOT
23759: PUSH
23760: LD_INT 22
23762: PUSH
23763: LD_VAR 0 16
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 2
23774: PUSH
23775: LD_INT 30
23777: PUSH
23778: LD_INT 32
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PUSH
23785: LD_INT 30
23787: PUSH
23788: LD_INT 33
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: LIST
23799: PUSH
23800: LD_INT 91
23802: PUSH
23803: LD_VAR 0 1
23807: PUSH
23808: LD_INT 12
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: LIST
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: LIST
23820: PUSH
23821: EMPTY
23822: LIST
23823: PPUSH
23824: CALL_OW 69
23828: PUSH
23829: LD_INT 2
23831: GREATER
23832: AND
23833: IFFALSE 23856
// weapon := [ us_radar , ar_radar ] [ nat ] ;
23835: LD_ADDR_VAR 0 18
23839: PUSH
23840: LD_INT 11
23842: PUSH
23843: LD_INT 30
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_VAR 0 12
23854: ARRAY
23855: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
23856: LD_VAR 0 18
23860: NOT
23861: PUSH
23862: LD_INT 40
23864: PPUSH
23865: LD_VAR 0 16
23869: PPUSH
23870: CALL_OW 321
23874: PUSH
23875: LD_INT 2
23877: EQUAL
23878: AND
23879: PUSH
23880: LD_INT 7
23882: PUSH
23883: LD_VAR 0 5
23887: IN
23888: PUSH
23889: LD_INT 28
23891: PUSH
23892: LD_VAR 0 5
23896: IN
23897: OR
23898: PUSH
23899: LD_INT 45
23901: PUSH
23902: LD_VAR 0 5
23906: IN
23907: OR
23908: AND
23909: IFFALSE 24163
// begin hex := GetHexInfo ( x , y ) ;
23911: LD_ADDR_VAR 0 4
23915: PUSH
23916: LD_VAR 0 10
23920: PPUSH
23921: LD_VAR 0 11
23925: PPUSH
23926: CALL_OW 546
23930: ST_TO_ADDR
// if hex [ 1 ] then
23931: LD_VAR 0 4
23935: PUSH
23936: LD_INT 1
23938: ARRAY
23939: IFFALSE 23943
// exit ;
23941: GO 24346
// height := hex [ 2 ] ;
23943: LD_ADDR_VAR 0 15
23947: PUSH
23948: LD_VAR 0 4
23952: PUSH
23953: LD_INT 2
23955: ARRAY
23956: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
23957: LD_ADDR_VAR 0 14
23961: PUSH
23962: LD_INT 0
23964: PUSH
23965: LD_INT 2
23967: PUSH
23968: LD_INT 3
23970: PUSH
23971: LD_INT 5
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: ST_TO_ADDR
// for i in tmp do
23980: LD_ADDR_VAR 0 8
23984: PUSH
23985: LD_VAR 0 14
23989: PUSH
23990: FOR_IN
23991: IFFALSE 24161
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
23993: LD_ADDR_VAR 0 9
23997: PUSH
23998: LD_VAR 0 10
24002: PPUSH
24003: LD_VAR 0 8
24007: PPUSH
24008: LD_INT 5
24010: PPUSH
24011: CALL_OW 272
24015: PUSH
24016: LD_VAR 0 11
24020: PPUSH
24021: LD_VAR 0 8
24025: PPUSH
24026: LD_INT 5
24028: PPUSH
24029: CALL_OW 273
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
24038: LD_VAR 0 9
24042: PUSH
24043: LD_INT 1
24045: ARRAY
24046: PPUSH
24047: LD_VAR 0 9
24051: PUSH
24052: LD_INT 2
24054: ARRAY
24055: PPUSH
24056: CALL_OW 488
24060: IFFALSE 24159
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
24062: LD_ADDR_VAR 0 4
24066: PUSH
24067: LD_VAR 0 9
24071: PUSH
24072: LD_INT 1
24074: ARRAY
24075: PPUSH
24076: LD_VAR 0 9
24080: PUSH
24081: LD_INT 2
24083: ARRAY
24084: PPUSH
24085: CALL_OW 546
24089: ST_TO_ADDR
// if hex [ 1 ] then
24090: LD_VAR 0 4
24094: PUSH
24095: LD_INT 1
24097: ARRAY
24098: IFFALSE 24102
// continue ;
24100: GO 23990
// h := hex [ 2 ] ;
24102: LD_ADDR_VAR 0 13
24106: PUSH
24107: LD_VAR 0 4
24111: PUSH
24112: LD_INT 2
24114: ARRAY
24115: ST_TO_ADDR
// if h + 7 < height then
24116: LD_VAR 0 13
24120: PUSH
24121: LD_INT 7
24123: PLUS
24124: PUSH
24125: LD_VAR 0 15
24129: LESS
24130: IFFALSE 24159
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
24132: LD_ADDR_VAR 0 18
24136: PUSH
24137: LD_INT 7
24139: PUSH
24140: LD_INT 28
24142: PUSH
24143: LD_INT 45
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: LIST
24150: PUSH
24151: LD_VAR 0 12
24155: ARRAY
24156: ST_TO_ADDR
// break ;
24157: GO 24161
// end ; end ; end ;
24159: GO 23990
24161: POP
24162: POP
// end ; if not weapon then
24163: LD_VAR 0 18
24167: NOT
24168: IFFALSE 24228
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
24170: LD_ADDR_VAR 0 5
24174: PUSH
24175: LD_VAR 0 5
24179: PUSH
24180: LD_INT 11
24182: PUSH
24183: LD_INT 30
24185: PUSH
24186: LD_INT 49
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: LIST
24193: DIFF
24194: ST_TO_ADDR
// if not list then
24195: LD_VAR 0 5
24199: NOT
24200: IFFALSE 24204
// exit ;
24202: GO 24346
// weapon := list [ rand ( 1 , list ) ] ;
24204: LD_ADDR_VAR 0 18
24208: PUSH
24209: LD_VAR 0 5
24213: PUSH
24214: LD_INT 1
24216: PPUSH
24217: LD_VAR 0 5
24221: PPUSH
24222: CALL_OW 12
24226: ARRAY
24227: ST_TO_ADDR
// end ; if weapon then
24228: LD_VAR 0 18
24232: IFFALSE 24346
// begin tmp := CostOfWeapon ( weapon ) ;
24234: LD_ADDR_VAR 0 14
24238: PUSH
24239: LD_VAR 0 18
24243: PPUSH
24244: CALL_OW 451
24248: ST_TO_ADDR
// j := GetBase ( tower ) ;
24249: LD_ADDR_VAR 0 9
24253: PUSH
24254: LD_VAR 0 1
24258: PPUSH
24259: CALL_OW 274
24263: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
24264: LD_VAR 0 9
24268: PPUSH
24269: LD_INT 1
24271: PPUSH
24272: CALL_OW 275
24276: PUSH
24277: LD_VAR 0 14
24281: PUSH
24282: LD_INT 1
24284: ARRAY
24285: GREATEREQUAL
24286: PUSH
24287: LD_VAR 0 9
24291: PPUSH
24292: LD_INT 2
24294: PPUSH
24295: CALL_OW 275
24299: PUSH
24300: LD_VAR 0 14
24304: PUSH
24305: LD_INT 2
24307: ARRAY
24308: GREATEREQUAL
24309: AND
24310: PUSH
24311: LD_VAR 0 9
24315: PPUSH
24316: LD_INT 3
24318: PPUSH
24319: CALL_OW 275
24323: PUSH
24324: LD_VAR 0 14
24328: PUSH
24329: LD_INT 3
24331: ARRAY
24332: GREATEREQUAL
24333: AND
24334: IFFALSE 24346
// result := weapon ;
24336: LD_ADDR_VAR 0 3
24340: PUSH
24341: LD_VAR 0 18
24345: ST_TO_ADDR
// end ; end ;
24346: LD_VAR 0 3
24350: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
24351: LD_INT 0
24353: PPUSH
24354: PPUSH
// result := true ;
24355: LD_ADDR_VAR 0 3
24359: PUSH
24360: LD_INT 1
24362: ST_TO_ADDR
// if array1 = array2 then
24363: LD_VAR 0 1
24367: PUSH
24368: LD_VAR 0 2
24372: EQUAL
24373: IFFALSE 24433
// begin for i = 1 to array1 do
24375: LD_ADDR_VAR 0 4
24379: PUSH
24380: DOUBLE
24381: LD_INT 1
24383: DEC
24384: ST_TO_ADDR
24385: LD_VAR 0 1
24389: PUSH
24390: FOR_TO
24391: IFFALSE 24429
// if array1 [ i ] <> array2 [ i ] then
24393: LD_VAR 0 1
24397: PUSH
24398: LD_VAR 0 4
24402: ARRAY
24403: PUSH
24404: LD_VAR 0 2
24408: PUSH
24409: LD_VAR 0 4
24413: ARRAY
24414: NONEQUAL
24415: IFFALSE 24427
// begin result := false ;
24417: LD_ADDR_VAR 0 3
24421: PUSH
24422: LD_INT 0
24424: ST_TO_ADDR
// break ;
24425: GO 24429
// end ;
24427: GO 24390
24429: POP
24430: POP
// end else
24431: GO 24441
// result := false ;
24433: LD_ADDR_VAR 0 3
24437: PUSH
24438: LD_INT 0
24440: ST_TO_ADDR
// end ;
24441: LD_VAR 0 3
24445: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
24446: LD_INT 0
24448: PPUSH
24449: PPUSH
24450: PPUSH
// pom := GetBase ( fac ) ;
24451: LD_ADDR_VAR 0 5
24455: PUSH
24456: LD_VAR 0 1
24460: PPUSH
24461: CALL_OW 274
24465: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
24466: LD_ADDR_VAR 0 4
24470: PUSH
24471: LD_VAR 0 2
24475: PUSH
24476: LD_INT 1
24478: ARRAY
24479: PPUSH
24480: LD_VAR 0 2
24484: PUSH
24485: LD_INT 2
24487: ARRAY
24488: PPUSH
24489: LD_VAR 0 2
24493: PUSH
24494: LD_INT 3
24496: ARRAY
24497: PPUSH
24498: LD_VAR 0 2
24502: PUSH
24503: LD_INT 4
24505: ARRAY
24506: PPUSH
24507: CALL_OW 449
24511: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24512: LD_ADDR_VAR 0 3
24516: PUSH
24517: LD_VAR 0 5
24521: PPUSH
24522: LD_INT 1
24524: PPUSH
24525: CALL_OW 275
24529: PUSH
24530: LD_VAR 0 4
24534: PUSH
24535: LD_INT 1
24537: ARRAY
24538: GREATEREQUAL
24539: PUSH
24540: LD_VAR 0 5
24544: PPUSH
24545: LD_INT 2
24547: PPUSH
24548: CALL_OW 275
24552: PUSH
24553: LD_VAR 0 4
24557: PUSH
24558: LD_INT 2
24560: ARRAY
24561: GREATEREQUAL
24562: AND
24563: PUSH
24564: LD_VAR 0 5
24568: PPUSH
24569: LD_INT 3
24571: PPUSH
24572: CALL_OW 275
24576: PUSH
24577: LD_VAR 0 4
24581: PUSH
24582: LD_INT 3
24584: ARRAY
24585: GREATEREQUAL
24586: AND
24587: ST_TO_ADDR
// end ;
24588: LD_VAR 0 3
24592: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
24593: LD_INT 0
24595: PPUSH
24596: PPUSH
24597: PPUSH
24598: PPUSH
// pom := GetBase ( building ) ;
24599: LD_ADDR_VAR 0 3
24603: PUSH
24604: LD_VAR 0 1
24608: PPUSH
24609: CALL_OW 274
24613: ST_TO_ADDR
// if not pom then
24614: LD_VAR 0 3
24618: NOT
24619: IFFALSE 24623
// exit ;
24621: GO 24793
// btype := GetBType ( building ) ;
24623: LD_ADDR_VAR 0 5
24627: PUSH
24628: LD_VAR 0 1
24632: PPUSH
24633: CALL_OW 266
24637: ST_TO_ADDR
// if btype = b_armoury then
24638: LD_VAR 0 5
24642: PUSH
24643: LD_INT 4
24645: EQUAL
24646: IFFALSE 24656
// btype := b_barracks ;
24648: LD_ADDR_VAR 0 5
24652: PUSH
24653: LD_INT 5
24655: ST_TO_ADDR
// if btype = b_depot then
24656: LD_VAR 0 5
24660: PUSH
24661: LD_INT 0
24663: EQUAL
24664: IFFALSE 24674
// btype := b_warehouse ;
24666: LD_ADDR_VAR 0 5
24670: PUSH
24671: LD_INT 1
24673: ST_TO_ADDR
// if btype = b_workshop then
24674: LD_VAR 0 5
24678: PUSH
24679: LD_INT 2
24681: EQUAL
24682: IFFALSE 24692
// btype := b_factory ;
24684: LD_ADDR_VAR 0 5
24688: PUSH
24689: LD_INT 3
24691: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24692: LD_ADDR_VAR 0 4
24696: PUSH
24697: LD_VAR 0 5
24701: PPUSH
24702: LD_VAR 0 1
24706: PPUSH
24707: CALL_OW 248
24711: PPUSH
24712: CALL_OW 450
24716: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24717: LD_ADDR_VAR 0 2
24721: PUSH
24722: LD_VAR 0 3
24726: PPUSH
24727: LD_INT 1
24729: PPUSH
24730: CALL_OW 275
24734: PUSH
24735: LD_VAR 0 4
24739: PUSH
24740: LD_INT 1
24742: ARRAY
24743: GREATEREQUAL
24744: PUSH
24745: LD_VAR 0 3
24749: PPUSH
24750: LD_INT 2
24752: PPUSH
24753: CALL_OW 275
24757: PUSH
24758: LD_VAR 0 4
24762: PUSH
24763: LD_INT 2
24765: ARRAY
24766: GREATEREQUAL
24767: AND
24768: PUSH
24769: LD_VAR 0 3
24773: PPUSH
24774: LD_INT 3
24776: PPUSH
24777: CALL_OW 275
24781: PUSH
24782: LD_VAR 0 4
24786: PUSH
24787: LD_INT 3
24789: ARRAY
24790: GREATEREQUAL
24791: AND
24792: ST_TO_ADDR
// end ;
24793: LD_VAR 0 2
24797: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
24798: LD_INT 0
24800: PPUSH
24801: PPUSH
24802: PPUSH
// pom := GetBase ( building ) ;
24803: LD_ADDR_VAR 0 4
24807: PUSH
24808: LD_VAR 0 1
24812: PPUSH
24813: CALL_OW 274
24817: ST_TO_ADDR
// if not pom then
24818: LD_VAR 0 4
24822: NOT
24823: IFFALSE 24827
// exit ;
24825: GO 24928
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24827: LD_ADDR_VAR 0 5
24831: PUSH
24832: LD_VAR 0 2
24836: PPUSH
24837: LD_VAR 0 1
24841: PPUSH
24842: CALL_OW 248
24846: PPUSH
24847: CALL_OW 450
24851: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24852: LD_ADDR_VAR 0 3
24856: PUSH
24857: LD_VAR 0 4
24861: PPUSH
24862: LD_INT 1
24864: PPUSH
24865: CALL_OW 275
24869: PUSH
24870: LD_VAR 0 5
24874: PUSH
24875: LD_INT 1
24877: ARRAY
24878: GREATEREQUAL
24879: PUSH
24880: LD_VAR 0 4
24884: PPUSH
24885: LD_INT 2
24887: PPUSH
24888: CALL_OW 275
24892: PUSH
24893: LD_VAR 0 5
24897: PUSH
24898: LD_INT 2
24900: ARRAY
24901: GREATEREQUAL
24902: AND
24903: PUSH
24904: LD_VAR 0 4
24908: PPUSH
24909: LD_INT 3
24911: PPUSH
24912: CALL_OW 275
24916: PUSH
24917: LD_VAR 0 5
24921: PUSH
24922: LD_INT 3
24924: ARRAY
24925: GREATEREQUAL
24926: AND
24927: ST_TO_ADDR
// end ;
24928: LD_VAR 0 3
24932: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
24933: LD_INT 0
24935: PPUSH
24936: PPUSH
24937: PPUSH
24938: PPUSH
24939: PPUSH
24940: PPUSH
24941: PPUSH
24942: PPUSH
24943: PPUSH
24944: PPUSH
// result := false ;
24945: LD_ADDR_VAR 0 6
24949: PUSH
24950: LD_INT 0
24952: ST_TO_ADDR
// if not base or not btype or not x or not y then
24953: LD_VAR 0 1
24957: NOT
24958: PUSH
24959: LD_VAR 0 2
24963: NOT
24964: OR
24965: PUSH
24966: LD_VAR 0 3
24970: NOT
24971: OR
24972: PUSH
24973: LD_VAR 0 4
24977: NOT
24978: OR
24979: IFFALSE 24983
// exit ;
24981: GO 25592
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
24983: LD_ADDR_VAR 0 12
24987: PUSH
24988: LD_VAR 0 2
24992: PPUSH
24993: LD_VAR 0 3
24997: PPUSH
24998: LD_VAR 0 4
25002: PPUSH
25003: LD_VAR 0 5
25007: PPUSH
25008: LD_VAR 0 1
25012: PUSH
25013: LD_INT 1
25015: ARRAY
25016: PPUSH
25017: CALL_OW 248
25021: PPUSH
25022: LD_INT 0
25024: PPUSH
25025: CALL 26429 0 6
25029: ST_TO_ADDR
// if not hexes then
25030: LD_VAR 0 12
25034: NOT
25035: IFFALSE 25039
// exit ;
25037: GO 25592
// for i = 1 to hexes do
25039: LD_ADDR_VAR 0 7
25043: PUSH
25044: DOUBLE
25045: LD_INT 1
25047: DEC
25048: ST_TO_ADDR
25049: LD_VAR 0 12
25053: PUSH
25054: FOR_TO
25055: IFFALSE 25590
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25057: LD_ADDR_VAR 0 11
25061: PUSH
25062: LD_VAR 0 12
25066: PUSH
25067: LD_VAR 0 7
25071: ARRAY
25072: PUSH
25073: LD_INT 1
25075: ARRAY
25076: PPUSH
25077: LD_VAR 0 12
25081: PUSH
25082: LD_VAR 0 7
25086: ARRAY
25087: PUSH
25088: LD_INT 2
25090: ARRAY
25091: PPUSH
25092: CALL_OW 428
25096: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
25097: LD_VAR 0 12
25101: PUSH
25102: LD_VAR 0 7
25106: ARRAY
25107: PUSH
25108: LD_INT 1
25110: ARRAY
25111: PPUSH
25112: LD_VAR 0 12
25116: PUSH
25117: LD_VAR 0 7
25121: ARRAY
25122: PUSH
25123: LD_INT 2
25125: ARRAY
25126: PPUSH
25127: CALL_OW 351
25131: PUSH
25132: LD_VAR 0 12
25136: PUSH
25137: LD_VAR 0 7
25141: ARRAY
25142: PUSH
25143: LD_INT 1
25145: ARRAY
25146: PPUSH
25147: LD_VAR 0 12
25151: PUSH
25152: LD_VAR 0 7
25156: ARRAY
25157: PUSH
25158: LD_INT 2
25160: ARRAY
25161: PPUSH
25162: CALL_OW 488
25166: NOT
25167: OR
25168: PUSH
25169: LD_VAR 0 11
25173: PPUSH
25174: CALL_OW 247
25178: PUSH
25179: LD_INT 3
25181: EQUAL
25182: OR
25183: IFFALSE 25189
// exit ;
25185: POP
25186: POP
25187: GO 25592
// if not tmp or not tmp in base then
25189: LD_VAR 0 11
25193: NOT
25194: PUSH
25195: LD_VAR 0 11
25199: PUSH
25200: LD_VAR 0 1
25204: IN
25205: NOT
25206: OR
25207: IFFALSE 25211
// continue ;
25209: GO 25054
// result := true ;
25211: LD_ADDR_VAR 0 6
25215: PUSH
25216: LD_INT 1
25218: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25219: LD_ADDR_VAR 0 15
25223: PUSH
25224: LD_VAR 0 1
25228: PPUSH
25229: LD_INT 22
25231: PUSH
25232: LD_VAR 0 11
25236: PPUSH
25237: CALL_OW 255
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: LD_INT 2
25248: PUSH
25249: LD_INT 30
25251: PUSH
25252: LD_INT 0
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 30
25261: PUSH
25262: LD_INT 1
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: LIST
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PPUSH
25278: CALL_OW 72
25282: ST_TO_ADDR
// if dep then
25283: LD_VAR 0 15
25287: IFFALSE 25423
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
25289: LD_ADDR_VAR 0 14
25293: PUSH
25294: LD_VAR 0 15
25298: PUSH
25299: LD_INT 1
25301: ARRAY
25302: PPUSH
25303: CALL_OW 250
25307: PPUSH
25308: LD_VAR 0 15
25312: PUSH
25313: LD_INT 1
25315: ARRAY
25316: PPUSH
25317: CALL_OW 254
25321: PPUSH
25322: LD_INT 5
25324: PPUSH
25325: CALL_OW 272
25329: PUSH
25330: LD_VAR 0 15
25334: PUSH
25335: LD_INT 1
25337: ARRAY
25338: PPUSH
25339: CALL_OW 251
25343: PPUSH
25344: LD_VAR 0 15
25348: PUSH
25349: LD_INT 1
25351: ARRAY
25352: PPUSH
25353: CALL_OW 254
25357: PPUSH
25358: LD_INT 5
25360: PPUSH
25361: CALL_OW 273
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
25370: LD_VAR 0 14
25374: PUSH
25375: LD_INT 1
25377: ARRAY
25378: PPUSH
25379: LD_VAR 0 14
25383: PUSH
25384: LD_INT 2
25386: ARRAY
25387: PPUSH
25388: CALL_OW 488
25392: IFFALSE 25423
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
25394: LD_VAR 0 11
25398: PPUSH
25399: LD_VAR 0 14
25403: PUSH
25404: LD_INT 1
25406: ARRAY
25407: PPUSH
25408: LD_VAR 0 14
25412: PUSH
25413: LD_INT 2
25415: ARRAY
25416: PPUSH
25417: CALL_OW 111
// continue ;
25421: GO 25054
// end ; end ; r := GetDir ( tmp ) ;
25423: LD_ADDR_VAR 0 13
25427: PUSH
25428: LD_VAR 0 11
25432: PPUSH
25433: CALL_OW 254
25437: ST_TO_ADDR
// if r = 5 then
25438: LD_VAR 0 13
25442: PUSH
25443: LD_INT 5
25445: EQUAL
25446: IFFALSE 25456
// r := 0 ;
25448: LD_ADDR_VAR 0 13
25452: PUSH
25453: LD_INT 0
25455: ST_TO_ADDR
// for j = r to 5 do
25456: LD_ADDR_VAR 0 8
25460: PUSH
25461: DOUBLE
25462: LD_VAR 0 13
25466: DEC
25467: ST_TO_ADDR
25468: LD_INT 5
25470: PUSH
25471: FOR_TO
25472: IFFALSE 25586
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
25474: LD_ADDR_VAR 0 9
25478: PUSH
25479: LD_VAR 0 11
25483: PPUSH
25484: CALL_OW 250
25488: PPUSH
25489: LD_VAR 0 8
25493: PPUSH
25494: LD_INT 2
25496: PPUSH
25497: CALL_OW 272
25501: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
25502: LD_ADDR_VAR 0 10
25506: PUSH
25507: LD_VAR 0 11
25511: PPUSH
25512: CALL_OW 251
25516: PPUSH
25517: LD_VAR 0 8
25521: PPUSH
25522: LD_INT 2
25524: PPUSH
25525: CALL_OW 273
25529: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
25530: LD_VAR 0 9
25534: PPUSH
25535: LD_VAR 0 10
25539: PPUSH
25540: CALL_OW 488
25544: PUSH
25545: LD_VAR 0 9
25549: PPUSH
25550: LD_VAR 0 10
25554: PPUSH
25555: CALL_OW 428
25559: NOT
25560: AND
25561: IFFALSE 25584
// begin ComMoveXY ( tmp , _x , _y ) ;
25563: LD_VAR 0 11
25567: PPUSH
25568: LD_VAR 0 9
25572: PPUSH
25573: LD_VAR 0 10
25577: PPUSH
25578: CALL_OW 111
// break ;
25582: GO 25586
// end ; end ;
25584: GO 25471
25586: POP
25587: POP
// end ;
25588: GO 25054
25590: POP
25591: POP
// end ;
25592: LD_VAR 0 6
25596: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
25597: LD_INT 0
25599: PPUSH
25600: PPUSH
25601: PPUSH
25602: PPUSH
25603: PPUSH
25604: PPUSH
25605: PPUSH
25606: PPUSH
25607: PPUSH
25608: PPUSH
// result := false ;
25609: LD_ADDR_VAR 0 6
25613: PUSH
25614: LD_INT 0
25616: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25617: LD_VAR 0 1
25621: NOT
25622: PUSH
25623: LD_VAR 0 1
25627: PPUSH
25628: CALL_OW 266
25632: PUSH
25633: LD_INT 0
25635: PUSH
25636: LD_INT 1
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: IN
25643: NOT
25644: OR
25645: PUSH
25646: LD_VAR 0 2
25650: NOT
25651: OR
25652: PUSH
25653: LD_VAR 0 5
25657: PUSH
25658: LD_INT 0
25660: PUSH
25661: LD_INT 1
25663: PUSH
25664: LD_INT 2
25666: PUSH
25667: LD_INT 3
25669: PUSH
25670: LD_INT 4
25672: PUSH
25673: LD_INT 5
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: IN
25684: NOT
25685: OR
25686: PUSH
25687: LD_VAR 0 3
25691: PPUSH
25692: LD_VAR 0 4
25696: PPUSH
25697: CALL_OW 488
25701: NOT
25702: OR
25703: IFFALSE 25707
// exit ;
25705: GO 26424
// pom := GetBase ( depot ) ;
25707: LD_ADDR_VAR 0 10
25711: PUSH
25712: LD_VAR 0 1
25716: PPUSH
25717: CALL_OW 274
25721: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
25722: LD_ADDR_VAR 0 11
25726: PUSH
25727: LD_VAR 0 2
25731: PPUSH
25732: LD_VAR 0 1
25736: PPUSH
25737: CALL_OW 248
25741: PPUSH
25742: CALL_OW 450
25746: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
25747: LD_VAR 0 10
25751: PPUSH
25752: LD_INT 1
25754: PPUSH
25755: CALL_OW 275
25759: PUSH
25760: LD_VAR 0 11
25764: PUSH
25765: LD_INT 1
25767: ARRAY
25768: GREATEREQUAL
25769: PUSH
25770: LD_VAR 0 10
25774: PPUSH
25775: LD_INT 2
25777: PPUSH
25778: CALL_OW 275
25782: PUSH
25783: LD_VAR 0 11
25787: PUSH
25788: LD_INT 2
25790: ARRAY
25791: GREATEREQUAL
25792: AND
25793: PUSH
25794: LD_VAR 0 10
25798: PPUSH
25799: LD_INT 3
25801: PPUSH
25802: CALL_OW 275
25806: PUSH
25807: LD_VAR 0 11
25811: PUSH
25812: LD_INT 3
25814: ARRAY
25815: GREATEREQUAL
25816: AND
25817: NOT
25818: IFFALSE 25822
// exit ;
25820: GO 26424
// if GetBType ( depot ) = b_depot then
25822: LD_VAR 0 1
25826: PPUSH
25827: CALL_OW 266
25831: PUSH
25832: LD_INT 0
25834: EQUAL
25835: IFFALSE 25847
// dist := 28 else
25837: LD_ADDR_VAR 0 14
25841: PUSH
25842: LD_INT 28
25844: ST_TO_ADDR
25845: GO 25855
// dist := 36 ;
25847: LD_ADDR_VAR 0 14
25851: PUSH
25852: LD_INT 36
25854: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
25855: LD_VAR 0 1
25859: PPUSH
25860: LD_VAR 0 3
25864: PPUSH
25865: LD_VAR 0 4
25869: PPUSH
25870: CALL_OW 297
25874: PUSH
25875: LD_VAR 0 14
25879: GREATER
25880: IFFALSE 25884
// exit ;
25882: GO 26424
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
25884: LD_ADDR_VAR 0 12
25888: PUSH
25889: LD_VAR 0 2
25893: PPUSH
25894: LD_VAR 0 3
25898: PPUSH
25899: LD_VAR 0 4
25903: PPUSH
25904: LD_VAR 0 5
25908: PPUSH
25909: LD_VAR 0 1
25913: PPUSH
25914: CALL_OW 248
25918: PPUSH
25919: LD_INT 0
25921: PPUSH
25922: CALL 26429 0 6
25926: ST_TO_ADDR
// if not hexes then
25927: LD_VAR 0 12
25931: NOT
25932: IFFALSE 25936
// exit ;
25934: GO 26424
// hex := GetHexInfo ( x , y ) ;
25936: LD_ADDR_VAR 0 15
25940: PUSH
25941: LD_VAR 0 3
25945: PPUSH
25946: LD_VAR 0 4
25950: PPUSH
25951: CALL_OW 546
25955: ST_TO_ADDR
// if hex [ 1 ] then
25956: LD_VAR 0 15
25960: PUSH
25961: LD_INT 1
25963: ARRAY
25964: IFFALSE 25968
// exit ;
25966: GO 26424
// height := hex [ 2 ] ;
25968: LD_ADDR_VAR 0 13
25972: PUSH
25973: LD_VAR 0 15
25977: PUSH
25978: LD_INT 2
25980: ARRAY
25981: ST_TO_ADDR
// for i = 1 to hexes do
25982: LD_ADDR_VAR 0 7
25986: PUSH
25987: DOUBLE
25988: LD_INT 1
25990: DEC
25991: ST_TO_ADDR
25992: LD_VAR 0 12
25996: PUSH
25997: FOR_TO
25998: IFFALSE 26328
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
26000: LD_VAR 0 12
26004: PUSH
26005: LD_VAR 0 7
26009: ARRAY
26010: PUSH
26011: LD_INT 1
26013: ARRAY
26014: PPUSH
26015: LD_VAR 0 12
26019: PUSH
26020: LD_VAR 0 7
26024: ARRAY
26025: PUSH
26026: LD_INT 2
26028: ARRAY
26029: PPUSH
26030: CALL_OW 488
26034: NOT
26035: PUSH
26036: LD_VAR 0 12
26040: PUSH
26041: LD_VAR 0 7
26045: ARRAY
26046: PUSH
26047: LD_INT 1
26049: ARRAY
26050: PPUSH
26051: LD_VAR 0 12
26055: PUSH
26056: LD_VAR 0 7
26060: ARRAY
26061: PUSH
26062: LD_INT 2
26064: ARRAY
26065: PPUSH
26066: CALL_OW 428
26070: PUSH
26071: LD_INT 0
26073: GREATER
26074: OR
26075: PUSH
26076: LD_VAR 0 12
26080: PUSH
26081: LD_VAR 0 7
26085: ARRAY
26086: PUSH
26087: LD_INT 1
26089: ARRAY
26090: PPUSH
26091: LD_VAR 0 12
26095: PUSH
26096: LD_VAR 0 7
26100: ARRAY
26101: PUSH
26102: LD_INT 2
26104: ARRAY
26105: PPUSH
26106: CALL_OW 351
26110: OR
26111: IFFALSE 26117
// exit ;
26113: POP
26114: POP
26115: GO 26424
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26117: LD_ADDR_VAR 0 8
26121: PUSH
26122: LD_VAR 0 12
26126: PUSH
26127: LD_VAR 0 7
26131: ARRAY
26132: PUSH
26133: LD_INT 1
26135: ARRAY
26136: PPUSH
26137: LD_VAR 0 12
26141: PUSH
26142: LD_VAR 0 7
26146: ARRAY
26147: PUSH
26148: LD_INT 2
26150: ARRAY
26151: PPUSH
26152: CALL_OW 546
26156: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
26157: LD_VAR 0 8
26161: PUSH
26162: LD_INT 1
26164: ARRAY
26165: PUSH
26166: LD_VAR 0 8
26170: PUSH
26171: LD_INT 2
26173: ARRAY
26174: PUSH
26175: LD_VAR 0 13
26179: PUSH
26180: LD_INT 2
26182: PLUS
26183: GREATER
26184: OR
26185: PUSH
26186: LD_VAR 0 8
26190: PUSH
26191: LD_INT 2
26193: ARRAY
26194: PUSH
26195: LD_VAR 0 13
26199: PUSH
26200: LD_INT 2
26202: MINUS
26203: LESS
26204: OR
26205: PUSH
26206: LD_VAR 0 8
26210: PUSH
26211: LD_INT 3
26213: ARRAY
26214: PUSH
26215: LD_INT 0
26217: PUSH
26218: LD_INT 8
26220: PUSH
26221: LD_INT 9
26223: PUSH
26224: LD_INT 10
26226: PUSH
26227: LD_INT 11
26229: PUSH
26230: LD_INT 12
26232: PUSH
26233: LD_INT 13
26235: PUSH
26236: LD_INT 16
26238: PUSH
26239: LD_INT 17
26241: PUSH
26242: LD_INT 18
26244: PUSH
26245: LD_INT 19
26247: PUSH
26248: LD_INT 20
26250: PUSH
26251: LD_INT 21
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: IN
26269: NOT
26270: OR
26271: PUSH
26272: LD_VAR 0 8
26276: PUSH
26277: LD_INT 5
26279: ARRAY
26280: NOT
26281: OR
26282: PUSH
26283: LD_VAR 0 8
26287: PUSH
26288: LD_INT 6
26290: ARRAY
26291: PUSH
26292: LD_INT 1
26294: PUSH
26295: LD_INT 2
26297: PUSH
26298: LD_INT 7
26300: PUSH
26301: LD_INT 9
26303: PUSH
26304: LD_INT 10
26306: PUSH
26307: LD_INT 11
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: IN
26318: NOT
26319: OR
26320: IFFALSE 26326
// exit ;
26322: POP
26323: POP
26324: GO 26424
// end ;
26326: GO 25997
26328: POP
26329: POP
// side := GetSide ( depot ) ;
26330: LD_ADDR_VAR 0 9
26334: PUSH
26335: LD_VAR 0 1
26339: PPUSH
26340: CALL_OW 255
26344: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
26345: LD_VAR 0 9
26349: PPUSH
26350: LD_VAR 0 3
26354: PPUSH
26355: LD_VAR 0 4
26359: PPUSH
26360: LD_INT 20
26362: PPUSH
26363: CALL 19078 0 4
26367: PUSH
26368: LD_INT 4
26370: ARRAY
26371: IFFALSE 26375
// exit ;
26373: GO 26424
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
26375: LD_VAR 0 2
26379: PUSH
26380: LD_INT 29
26382: PUSH
26383: LD_INT 30
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: IN
26390: PUSH
26391: LD_VAR 0 3
26395: PPUSH
26396: LD_VAR 0 4
26400: PPUSH
26401: LD_VAR 0 9
26405: PPUSH
26406: CALL_OW 440
26410: NOT
26411: AND
26412: IFFALSE 26416
// exit ;
26414: GO 26424
// result := true ;
26416: LD_ADDR_VAR 0 6
26420: PUSH
26421: LD_INT 1
26423: ST_TO_ADDR
// end ;
26424: LD_VAR 0 6
26428: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
26429: LD_INT 0
26431: PPUSH
26432: PPUSH
26433: PPUSH
26434: PPUSH
26435: PPUSH
26436: PPUSH
26437: PPUSH
26438: PPUSH
26439: PPUSH
26440: PPUSH
26441: PPUSH
26442: PPUSH
26443: PPUSH
26444: PPUSH
26445: PPUSH
26446: PPUSH
26447: PPUSH
26448: PPUSH
26449: PPUSH
26450: PPUSH
26451: PPUSH
26452: PPUSH
26453: PPUSH
26454: PPUSH
26455: PPUSH
26456: PPUSH
26457: PPUSH
26458: PPUSH
26459: PPUSH
26460: PPUSH
26461: PPUSH
26462: PPUSH
26463: PPUSH
26464: PPUSH
26465: PPUSH
26466: PPUSH
26467: PPUSH
26468: PPUSH
26469: PPUSH
26470: PPUSH
26471: PPUSH
26472: PPUSH
26473: PPUSH
26474: PPUSH
26475: PPUSH
26476: PPUSH
26477: PPUSH
26478: PPUSH
26479: PPUSH
26480: PPUSH
26481: PPUSH
26482: PPUSH
26483: PPUSH
26484: PPUSH
26485: PPUSH
26486: PPUSH
26487: PPUSH
26488: PPUSH
// result = [ ] ;
26489: LD_ADDR_VAR 0 7
26493: PUSH
26494: EMPTY
26495: ST_TO_ADDR
// temp_list = [ ] ;
26496: LD_ADDR_VAR 0 9
26500: PUSH
26501: EMPTY
26502: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26503: LD_VAR 0 4
26507: PUSH
26508: LD_INT 0
26510: PUSH
26511: LD_INT 1
26513: PUSH
26514: LD_INT 2
26516: PUSH
26517: LD_INT 3
26519: PUSH
26520: LD_INT 4
26522: PUSH
26523: LD_INT 5
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: IN
26534: NOT
26535: PUSH
26536: LD_VAR 0 1
26540: PUSH
26541: LD_INT 0
26543: PUSH
26544: LD_INT 1
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: IN
26551: PUSH
26552: LD_VAR 0 5
26556: PUSH
26557: LD_INT 1
26559: PUSH
26560: LD_INT 2
26562: PUSH
26563: LD_INT 3
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: LIST
26570: IN
26571: NOT
26572: AND
26573: OR
26574: IFFALSE 26578
// exit ;
26576: GO 44969
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26578: LD_VAR 0 1
26582: PUSH
26583: LD_INT 6
26585: PUSH
26586: LD_INT 7
26588: PUSH
26589: LD_INT 8
26591: PUSH
26592: LD_INT 13
26594: PUSH
26595: LD_INT 12
26597: PUSH
26598: LD_INT 15
26600: PUSH
26601: LD_INT 11
26603: PUSH
26604: LD_INT 14
26606: PUSH
26607: LD_INT 10
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: IN
26621: IFFALSE 26631
// btype = b_lab ;
26623: LD_ADDR_VAR 0 1
26627: PUSH
26628: LD_INT 6
26630: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26631: LD_VAR 0 6
26635: PUSH
26636: LD_INT 0
26638: PUSH
26639: LD_INT 1
26641: PUSH
26642: LD_INT 2
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: LIST
26649: IN
26650: NOT
26651: PUSH
26652: LD_VAR 0 1
26656: PUSH
26657: LD_INT 0
26659: PUSH
26660: LD_INT 1
26662: PUSH
26663: LD_INT 2
26665: PUSH
26666: LD_INT 3
26668: PUSH
26669: LD_INT 6
26671: PUSH
26672: LD_INT 36
26674: PUSH
26675: LD_INT 4
26677: PUSH
26678: LD_INT 5
26680: PUSH
26681: LD_INT 31
26683: PUSH
26684: LD_INT 32
26686: PUSH
26687: LD_INT 33
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: IN
26703: NOT
26704: PUSH
26705: LD_VAR 0 6
26709: PUSH
26710: LD_INT 1
26712: EQUAL
26713: AND
26714: OR
26715: PUSH
26716: LD_VAR 0 1
26720: PUSH
26721: LD_INT 2
26723: PUSH
26724: LD_INT 3
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: IN
26731: NOT
26732: PUSH
26733: LD_VAR 0 6
26737: PUSH
26738: LD_INT 2
26740: EQUAL
26741: AND
26742: OR
26743: IFFALSE 26753
// mode = 0 ;
26745: LD_ADDR_VAR 0 6
26749: PUSH
26750: LD_INT 0
26752: ST_TO_ADDR
// case mode of 0 :
26753: LD_VAR 0 6
26757: PUSH
26758: LD_INT 0
26760: DOUBLE
26761: EQUAL
26762: IFTRUE 26766
26764: GO 38219
26766: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26767: LD_ADDR_VAR 0 11
26771: PUSH
26772: LD_INT 0
26774: PUSH
26775: LD_INT 0
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: LD_INT 0
26784: PUSH
26785: LD_INT 1
26787: NEG
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 1
26795: PUSH
26796: LD_INT 0
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 1
26805: PUSH
26806: LD_INT 1
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 0
26815: PUSH
26816: LD_INT 1
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 1
26825: NEG
26826: PUSH
26827: LD_INT 0
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 1
26836: NEG
26837: PUSH
26838: LD_INT 1
26840: NEG
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 1
26848: NEG
26849: PUSH
26850: LD_INT 2
26852: NEG
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 0
26860: PUSH
26861: LD_INT 2
26863: NEG
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 1
26871: PUSH
26872: LD_INT 1
26874: NEG
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 1
26882: PUSH
26883: LD_INT 2
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PUSH
26890: LD_INT 0
26892: PUSH
26893: LD_INT 2
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 1
26902: NEG
26903: PUSH
26904: LD_INT 1
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 1
26913: PUSH
26914: LD_INT 3
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 0
26923: PUSH
26924: LD_INT 3
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 1
26933: NEG
26934: PUSH
26935: LD_INT 2
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26960: LD_ADDR_VAR 0 12
26964: PUSH
26965: LD_INT 0
26967: PUSH
26968: LD_INT 0
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: LD_INT 0
26977: PUSH
26978: LD_INT 1
26980: NEG
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: LD_INT 1
26988: PUSH
26989: LD_INT 0
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PUSH
26996: LD_INT 1
26998: PUSH
26999: LD_INT 1
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 0
27008: PUSH
27009: LD_INT 1
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 1
27018: NEG
27019: PUSH
27020: LD_INT 0
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 1
27029: NEG
27030: PUSH
27031: LD_INT 1
27033: NEG
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 1
27041: PUSH
27042: LD_INT 1
27044: NEG
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 2
27052: PUSH
27053: LD_INT 0
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: LD_INT 2
27062: PUSH
27063: LD_INT 1
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 1
27072: NEG
27073: PUSH
27074: LD_INT 1
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: LD_INT 2
27083: NEG
27084: PUSH
27085: LD_INT 0
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 2
27094: NEG
27095: PUSH
27096: LD_INT 1
27098: NEG
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: LD_INT 2
27106: NEG
27107: PUSH
27108: LD_INT 1
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 3
27117: NEG
27118: PUSH
27119: LD_INT 0
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 3
27128: NEG
27129: PUSH
27130: LD_INT 1
27132: NEG
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27156: LD_ADDR_VAR 0 13
27160: PUSH
27161: LD_INT 0
27163: PUSH
27164: LD_INT 0
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 0
27173: PUSH
27174: LD_INT 1
27176: NEG
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 1
27184: PUSH
27185: LD_INT 0
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 1
27194: PUSH
27195: LD_INT 1
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 0
27204: PUSH
27205: LD_INT 1
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 1
27214: NEG
27215: PUSH
27216: LD_INT 0
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 1
27225: NEG
27226: PUSH
27227: LD_INT 1
27229: NEG
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 1
27237: NEG
27238: PUSH
27239: LD_INT 2
27241: NEG
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 2
27249: PUSH
27250: LD_INT 1
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 2
27259: PUSH
27260: LD_INT 2
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 1
27269: PUSH
27270: LD_INT 2
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 2
27279: NEG
27280: PUSH
27281: LD_INT 1
27283: NEG
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 2
27291: NEG
27292: PUSH
27293: LD_INT 2
27295: NEG
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 2
27303: NEG
27304: PUSH
27305: LD_INT 3
27307: NEG
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 3
27315: NEG
27316: PUSH
27317: LD_INT 2
27319: NEG
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 3
27327: NEG
27328: PUSH
27329: LD_INT 3
27331: NEG
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27355: LD_ADDR_VAR 0 14
27359: PUSH
27360: LD_INT 0
27362: PUSH
27363: LD_INT 0
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: LD_INT 1
27375: NEG
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 1
27383: PUSH
27384: LD_INT 0
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 1
27393: PUSH
27394: LD_INT 1
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 0
27403: PUSH
27404: LD_INT 1
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 1
27413: NEG
27414: PUSH
27415: LD_INT 0
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 1
27424: NEG
27425: PUSH
27426: LD_INT 1
27428: NEG
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: LD_INT 1
27436: NEG
27437: PUSH
27438: LD_INT 2
27440: NEG
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: LD_INT 0
27448: PUSH
27449: LD_INT 2
27451: NEG
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 1
27459: PUSH
27460: LD_INT 1
27462: NEG
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 1
27470: PUSH
27471: LD_INT 2
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: LD_INT 2
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 1
27490: NEG
27491: PUSH
27492: LD_INT 1
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 1
27501: NEG
27502: PUSH
27503: LD_INT 3
27505: NEG
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 0
27513: PUSH
27514: LD_INT 3
27516: NEG
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: PUSH
27522: LD_INT 1
27524: PUSH
27525: LD_INT 2
27527: NEG
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27551: LD_ADDR_VAR 0 15
27555: PUSH
27556: LD_INT 0
27558: PUSH
27559: LD_INT 0
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 0
27568: PUSH
27569: LD_INT 1
27571: NEG
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 1
27579: PUSH
27580: LD_INT 0
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 1
27589: PUSH
27590: LD_INT 1
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 0
27599: PUSH
27600: LD_INT 1
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 1
27609: NEG
27610: PUSH
27611: LD_INT 0
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 1
27620: NEG
27621: PUSH
27622: LD_INT 1
27624: NEG
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 1
27632: PUSH
27633: LD_INT 1
27635: NEG
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 2
27643: PUSH
27644: LD_INT 0
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 2
27653: PUSH
27654: LD_INT 1
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 1
27663: NEG
27664: PUSH
27665: LD_INT 1
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 2
27674: NEG
27675: PUSH
27676: LD_INT 0
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 2
27685: NEG
27686: PUSH
27687: LD_INT 1
27689: NEG
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 2
27697: PUSH
27698: LD_INT 1
27700: NEG
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 3
27708: PUSH
27709: LD_INT 0
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 3
27718: PUSH
27719: LD_INT 1
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27744: LD_ADDR_VAR 0 16
27748: PUSH
27749: LD_INT 0
27751: PUSH
27752: LD_INT 0
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 0
27761: PUSH
27762: LD_INT 1
27764: NEG
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: PUSH
27770: LD_INT 1
27772: PUSH
27773: LD_INT 0
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 1
27782: PUSH
27783: LD_INT 1
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 0
27792: PUSH
27793: LD_INT 1
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: LD_INT 1
27802: NEG
27803: PUSH
27804: LD_INT 0
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 1
27813: NEG
27814: PUSH
27815: LD_INT 1
27817: NEG
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: LD_INT 1
27825: NEG
27826: PUSH
27827: LD_INT 2
27829: NEG
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 2
27837: PUSH
27838: LD_INT 1
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 2
27847: PUSH
27848: LD_INT 2
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 1
27857: PUSH
27858: LD_INT 2
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 2
27867: NEG
27868: PUSH
27869: LD_INT 1
27871: NEG
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PUSH
27877: LD_INT 2
27879: NEG
27880: PUSH
27881: LD_INT 2
27883: NEG
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 3
27891: PUSH
27892: LD_INT 2
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 3
27901: PUSH
27902: LD_INT 3
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 2
27911: PUSH
27912: LD_INT 3
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27937: LD_ADDR_VAR 0 17
27941: PUSH
27942: LD_INT 0
27944: PUSH
27945: LD_INT 0
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 0
27954: PUSH
27955: LD_INT 1
27957: NEG
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 1
27965: PUSH
27966: LD_INT 0
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 1
27975: PUSH
27976: LD_INT 1
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 0
27985: PUSH
27986: LD_INT 1
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 1
27995: NEG
27996: PUSH
27997: LD_INT 0
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: LD_INT 1
28006: NEG
28007: PUSH
28008: LD_INT 1
28010: NEG
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 1
28018: NEG
28019: PUSH
28020: LD_INT 2
28022: NEG
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 0
28030: PUSH
28031: LD_INT 2
28033: NEG
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 1
28041: PUSH
28042: LD_INT 1
28044: NEG
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 2
28052: PUSH
28053: LD_INT 0
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 2
28062: PUSH
28063: LD_INT 1
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 2
28072: PUSH
28073: LD_INT 2
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 1
28082: PUSH
28083: LD_INT 2
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 0
28092: PUSH
28093: LD_INT 2
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 1
28102: NEG
28103: PUSH
28104: LD_INT 1
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 2
28113: NEG
28114: PUSH
28115: LD_INT 0
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 2
28124: NEG
28125: PUSH
28126: LD_INT 1
28128: NEG
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 2
28136: NEG
28137: PUSH
28138: LD_INT 2
28140: NEG
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28167: LD_ADDR_VAR 0 18
28171: PUSH
28172: LD_INT 0
28174: PUSH
28175: LD_INT 0
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 0
28184: PUSH
28185: LD_INT 1
28187: NEG
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 1
28195: PUSH
28196: LD_INT 0
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 1
28205: PUSH
28206: LD_INT 1
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 0
28215: PUSH
28216: LD_INT 1
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 1
28225: NEG
28226: PUSH
28227: LD_INT 0
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 1
28236: NEG
28237: PUSH
28238: LD_INT 1
28240: NEG
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: LD_INT 1
28248: NEG
28249: PUSH
28250: LD_INT 2
28252: NEG
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 0
28260: PUSH
28261: LD_INT 2
28263: NEG
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 1
28271: PUSH
28272: LD_INT 1
28274: NEG
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 2
28282: PUSH
28283: LD_INT 0
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 2
28292: PUSH
28293: LD_INT 1
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 2
28302: PUSH
28303: LD_INT 2
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: LD_INT 1
28312: PUSH
28313: LD_INT 2
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 0
28322: PUSH
28323: LD_INT 2
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 1
28332: NEG
28333: PUSH
28334: LD_INT 1
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 2
28343: NEG
28344: PUSH
28345: LD_INT 0
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 2
28354: NEG
28355: PUSH
28356: LD_INT 1
28358: NEG
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 2
28366: NEG
28367: PUSH
28368: LD_INT 2
28370: NEG
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28397: LD_ADDR_VAR 0 19
28401: PUSH
28402: LD_INT 0
28404: PUSH
28405: LD_INT 0
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 0
28414: PUSH
28415: LD_INT 1
28417: NEG
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 1
28425: PUSH
28426: LD_INT 0
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 1
28435: PUSH
28436: LD_INT 1
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 0
28445: PUSH
28446: LD_INT 1
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 1
28455: NEG
28456: PUSH
28457: LD_INT 0
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: LD_INT 1
28466: NEG
28467: PUSH
28468: LD_INT 1
28470: NEG
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 1
28478: NEG
28479: PUSH
28480: LD_INT 2
28482: NEG
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 0
28490: PUSH
28491: LD_INT 2
28493: NEG
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 1
28501: PUSH
28502: LD_INT 1
28504: NEG
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 2
28512: PUSH
28513: LD_INT 0
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 2
28522: PUSH
28523: LD_INT 1
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 2
28532: PUSH
28533: LD_INT 2
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 1
28542: PUSH
28543: LD_INT 2
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: LD_INT 2
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 1
28562: NEG
28563: PUSH
28564: LD_INT 1
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 2
28573: NEG
28574: PUSH
28575: LD_INT 0
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 2
28584: NEG
28585: PUSH
28586: LD_INT 1
28588: NEG
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 2
28596: NEG
28597: PUSH
28598: LD_INT 2
28600: NEG
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28627: LD_ADDR_VAR 0 20
28631: PUSH
28632: LD_INT 0
28634: PUSH
28635: LD_INT 0
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 0
28644: PUSH
28645: LD_INT 1
28647: NEG
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 1
28655: PUSH
28656: LD_INT 0
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: PUSH
28663: LD_INT 1
28665: PUSH
28666: LD_INT 1
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 0
28675: PUSH
28676: LD_INT 1
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PUSH
28683: LD_INT 1
28685: NEG
28686: PUSH
28687: LD_INT 0
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: LD_INT 1
28696: NEG
28697: PUSH
28698: LD_INT 1
28700: NEG
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: LD_INT 1
28708: NEG
28709: PUSH
28710: LD_INT 2
28712: NEG
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 0
28720: PUSH
28721: LD_INT 2
28723: NEG
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 1
28731: PUSH
28732: LD_INT 1
28734: NEG
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 2
28742: PUSH
28743: LD_INT 0
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 2
28752: PUSH
28753: LD_INT 1
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 2
28762: PUSH
28763: LD_INT 2
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 1
28772: PUSH
28773: LD_INT 2
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 0
28782: PUSH
28783: LD_INT 2
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 1
28792: NEG
28793: PUSH
28794: LD_INT 1
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 2
28803: NEG
28804: PUSH
28805: LD_INT 0
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 2
28814: NEG
28815: PUSH
28816: LD_INT 1
28818: NEG
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 2
28826: NEG
28827: PUSH
28828: LD_INT 2
28830: NEG
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28857: LD_ADDR_VAR 0 21
28861: PUSH
28862: LD_INT 0
28864: PUSH
28865: LD_INT 0
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 0
28874: PUSH
28875: LD_INT 1
28877: NEG
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: LD_INT 1
28885: PUSH
28886: LD_INT 0
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 1
28895: PUSH
28896: LD_INT 1
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 0
28905: PUSH
28906: LD_INT 1
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 1
28915: NEG
28916: PUSH
28917: LD_INT 0
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 1
28926: NEG
28927: PUSH
28928: LD_INT 1
28930: NEG
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 1
28938: NEG
28939: PUSH
28940: LD_INT 2
28942: NEG
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 0
28950: PUSH
28951: LD_INT 2
28953: NEG
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 1
28961: PUSH
28962: LD_INT 1
28964: NEG
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 2
28972: PUSH
28973: LD_INT 0
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 2
28982: PUSH
28983: LD_INT 1
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 2
28992: PUSH
28993: LD_INT 2
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 1
29002: PUSH
29003: LD_INT 2
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 0
29012: PUSH
29013: LD_INT 2
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 1
29022: NEG
29023: PUSH
29024: LD_INT 1
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 2
29033: NEG
29034: PUSH
29035: LD_INT 0
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 2
29044: NEG
29045: PUSH
29046: LD_INT 1
29048: NEG
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 2
29056: NEG
29057: PUSH
29058: LD_INT 2
29060: NEG
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29087: LD_ADDR_VAR 0 22
29091: PUSH
29092: LD_INT 0
29094: PUSH
29095: LD_INT 0
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 0
29104: PUSH
29105: LD_INT 1
29107: NEG
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 1
29115: PUSH
29116: LD_INT 0
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: LD_INT 1
29125: PUSH
29126: LD_INT 1
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 0
29135: PUSH
29136: LD_INT 1
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 1
29145: NEG
29146: PUSH
29147: LD_INT 0
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 1
29156: NEG
29157: PUSH
29158: LD_INT 1
29160: NEG
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 1
29168: NEG
29169: PUSH
29170: LD_INT 2
29172: NEG
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 0
29180: PUSH
29181: LD_INT 2
29183: NEG
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 1
29191: PUSH
29192: LD_INT 1
29194: NEG
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 2
29202: PUSH
29203: LD_INT 0
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 2
29212: PUSH
29213: LD_INT 1
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 2
29222: PUSH
29223: LD_INT 2
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 1
29232: PUSH
29233: LD_INT 2
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 0
29242: PUSH
29243: LD_INT 2
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 1
29252: NEG
29253: PUSH
29254: LD_INT 1
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 2
29263: NEG
29264: PUSH
29265: LD_INT 0
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 2
29274: NEG
29275: PUSH
29276: LD_INT 1
29278: NEG
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 2
29286: NEG
29287: PUSH
29288: LD_INT 2
29290: NEG
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29317: LD_ADDR_VAR 0 23
29321: PUSH
29322: LD_INT 0
29324: PUSH
29325: LD_INT 0
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 0
29334: PUSH
29335: LD_INT 1
29337: NEG
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 1
29345: PUSH
29346: LD_INT 0
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 1
29355: PUSH
29356: LD_INT 1
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 0
29365: PUSH
29366: LD_INT 1
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 1
29375: NEG
29376: PUSH
29377: LD_INT 0
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 1
29386: NEG
29387: PUSH
29388: LD_INT 1
29390: NEG
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 1
29398: NEG
29399: PUSH
29400: LD_INT 2
29402: NEG
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 0
29410: PUSH
29411: LD_INT 2
29413: NEG
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 1
29421: PUSH
29422: LD_INT 1
29424: NEG
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 2
29432: PUSH
29433: LD_INT 0
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 2
29442: PUSH
29443: LD_INT 1
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 2
29452: PUSH
29453: LD_INT 2
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 1
29462: PUSH
29463: LD_INT 2
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 0
29472: PUSH
29473: LD_INT 2
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 1
29482: NEG
29483: PUSH
29484: LD_INT 1
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 2
29493: NEG
29494: PUSH
29495: LD_INT 0
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: LD_INT 2
29504: NEG
29505: PUSH
29506: LD_INT 1
29508: NEG
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 2
29516: NEG
29517: PUSH
29518: LD_INT 2
29520: NEG
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: LD_INT 2
29528: NEG
29529: PUSH
29530: LD_INT 3
29532: NEG
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: LD_INT 1
29540: NEG
29541: PUSH
29542: LD_INT 3
29544: NEG
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: LD_INT 1
29552: PUSH
29553: LD_INT 2
29555: NEG
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 2
29563: PUSH
29564: LD_INT 1
29566: NEG
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29597: LD_ADDR_VAR 0 24
29601: PUSH
29602: LD_INT 0
29604: PUSH
29605: LD_INT 0
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 0
29614: PUSH
29615: LD_INT 1
29617: NEG
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 1
29625: PUSH
29626: LD_INT 0
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 1
29635: PUSH
29636: LD_INT 1
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 0
29645: PUSH
29646: LD_INT 1
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 1
29655: NEG
29656: PUSH
29657: LD_INT 0
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 1
29666: NEG
29667: PUSH
29668: LD_INT 1
29670: NEG
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: LD_INT 1
29678: NEG
29679: PUSH
29680: LD_INT 2
29682: NEG
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 0
29690: PUSH
29691: LD_INT 2
29693: NEG
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 1
29701: PUSH
29702: LD_INT 1
29704: NEG
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 2
29712: PUSH
29713: LD_INT 0
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 2
29722: PUSH
29723: LD_INT 1
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 2
29732: PUSH
29733: LD_INT 2
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 1
29742: PUSH
29743: LD_INT 2
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 0
29752: PUSH
29753: LD_INT 2
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 1
29762: NEG
29763: PUSH
29764: LD_INT 1
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 2
29773: NEG
29774: PUSH
29775: LD_INT 0
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 2
29784: NEG
29785: PUSH
29786: LD_INT 1
29788: NEG
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 2
29796: NEG
29797: PUSH
29798: LD_INT 2
29800: NEG
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 1
29808: PUSH
29809: LD_INT 2
29811: NEG
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 2
29819: PUSH
29820: LD_INT 1
29822: NEG
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 3
29830: PUSH
29831: LD_INT 1
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 3
29840: PUSH
29841: LD_INT 2
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
29873: LD_ADDR_VAR 0 25
29877: PUSH
29878: LD_INT 0
29880: PUSH
29881: LD_INT 0
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 0
29890: PUSH
29891: LD_INT 1
29893: NEG
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 1
29901: PUSH
29902: LD_INT 0
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 1
29911: PUSH
29912: LD_INT 1
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 0
29921: PUSH
29922: LD_INT 1
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 1
29931: NEG
29932: PUSH
29933: LD_INT 0
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 1
29942: NEG
29943: PUSH
29944: LD_INT 1
29946: NEG
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 1
29954: NEG
29955: PUSH
29956: LD_INT 2
29958: NEG
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 0
29966: PUSH
29967: LD_INT 2
29969: NEG
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 1
29977: PUSH
29978: LD_INT 1
29980: NEG
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 2
29988: PUSH
29989: LD_INT 0
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 2
29998: PUSH
29999: LD_INT 1
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 2
30008: PUSH
30009: LD_INT 2
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 1
30018: PUSH
30019: LD_INT 2
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 0
30028: PUSH
30029: LD_INT 2
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 1
30038: NEG
30039: PUSH
30040: LD_INT 1
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 2
30049: NEG
30050: PUSH
30051: LD_INT 0
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 2
30060: NEG
30061: PUSH
30062: LD_INT 1
30064: NEG
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 2
30072: NEG
30073: PUSH
30074: LD_INT 2
30076: NEG
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 3
30084: PUSH
30085: LD_INT 1
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 3
30094: PUSH
30095: LD_INT 2
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 2
30104: PUSH
30105: LD_INT 3
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 1
30114: PUSH
30115: LD_INT 3
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30147: LD_ADDR_VAR 0 26
30151: PUSH
30152: LD_INT 0
30154: PUSH
30155: LD_INT 0
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 0
30164: PUSH
30165: LD_INT 1
30167: NEG
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 1
30175: PUSH
30176: LD_INT 0
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 1
30185: PUSH
30186: LD_INT 1
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 0
30195: PUSH
30196: LD_INT 1
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 1
30205: NEG
30206: PUSH
30207: LD_INT 0
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 1
30216: NEG
30217: PUSH
30218: LD_INT 1
30220: NEG
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 1
30228: NEG
30229: PUSH
30230: LD_INT 2
30232: NEG
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 0
30240: PUSH
30241: LD_INT 2
30243: NEG
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 1
30251: PUSH
30252: LD_INT 1
30254: NEG
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 2
30262: PUSH
30263: LD_INT 0
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 2
30272: PUSH
30273: LD_INT 1
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 2
30282: PUSH
30283: LD_INT 2
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 1
30292: PUSH
30293: LD_INT 2
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 0
30302: PUSH
30303: LD_INT 2
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 1
30312: NEG
30313: PUSH
30314: LD_INT 1
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 2
30323: NEG
30324: PUSH
30325: LD_INT 0
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 2
30334: NEG
30335: PUSH
30336: LD_INT 1
30338: NEG
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 2
30346: NEG
30347: PUSH
30348: LD_INT 2
30350: NEG
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 2
30358: PUSH
30359: LD_INT 3
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 1
30368: PUSH
30369: LD_INT 3
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 1
30378: NEG
30379: PUSH
30380: LD_INT 2
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 2
30389: NEG
30390: PUSH
30391: LD_INT 1
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30423: LD_ADDR_VAR 0 27
30427: PUSH
30428: LD_INT 0
30430: PUSH
30431: LD_INT 0
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 0
30440: PUSH
30441: LD_INT 1
30443: NEG
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 1
30451: PUSH
30452: LD_INT 0
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 1
30461: PUSH
30462: LD_INT 1
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 0
30471: PUSH
30472: LD_INT 1
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 1
30481: NEG
30482: PUSH
30483: LD_INT 0
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 1
30492: NEG
30493: PUSH
30494: LD_INT 1
30496: NEG
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 1
30504: NEG
30505: PUSH
30506: LD_INT 2
30508: NEG
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 0
30516: PUSH
30517: LD_INT 2
30519: NEG
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 1
30527: PUSH
30528: LD_INT 1
30530: NEG
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 2
30538: PUSH
30539: LD_INT 0
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 2
30548: PUSH
30549: LD_INT 1
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 2
30558: PUSH
30559: LD_INT 2
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 1
30568: PUSH
30569: LD_INT 2
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 0
30578: PUSH
30579: LD_INT 2
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 1
30588: NEG
30589: PUSH
30590: LD_INT 1
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 2
30599: NEG
30600: PUSH
30601: LD_INT 0
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 2
30610: NEG
30611: PUSH
30612: LD_INT 1
30614: NEG
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 2
30622: NEG
30623: PUSH
30624: LD_INT 2
30626: NEG
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 1
30634: NEG
30635: PUSH
30636: LD_INT 2
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 2
30645: NEG
30646: PUSH
30647: LD_INT 1
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 3
30656: NEG
30657: PUSH
30658: LD_INT 1
30660: NEG
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 3
30668: NEG
30669: PUSH
30670: LD_INT 2
30672: NEG
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30703: LD_ADDR_VAR 0 28
30707: PUSH
30708: LD_INT 0
30710: PUSH
30711: LD_INT 0
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 0
30720: PUSH
30721: LD_INT 1
30723: NEG
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: LD_INT 1
30731: PUSH
30732: LD_INT 0
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 1
30741: PUSH
30742: LD_INT 1
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 0
30751: PUSH
30752: LD_INT 1
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 1
30761: NEG
30762: PUSH
30763: LD_INT 0
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 1
30772: NEG
30773: PUSH
30774: LD_INT 1
30776: NEG
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 1
30784: NEG
30785: PUSH
30786: LD_INT 2
30788: NEG
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: LD_INT 0
30796: PUSH
30797: LD_INT 2
30799: NEG
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 1
30807: PUSH
30808: LD_INT 1
30810: NEG
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 2
30818: PUSH
30819: LD_INT 0
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 2
30828: PUSH
30829: LD_INT 1
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 2
30838: PUSH
30839: LD_INT 2
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 1
30848: PUSH
30849: LD_INT 2
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 0
30858: PUSH
30859: LD_INT 2
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: LD_INT 1
30868: NEG
30869: PUSH
30870: LD_INT 1
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 2
30879: NEG
30880: PUSH
30881: LD_INT 0
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 2
30890: NEG
30891: PUSH
30892: LD_INT 1
30894: NEG
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 2
30902: NEG
30903: PUSH
30904: LD_INT 2
30906: NEG
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 2
30914: NEG
30915: PUSH
30916: LD_INT 3
30918: NEG
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 1
30926: NEG
30927: PUSH
30928: LD_INT 3
30930: NEG
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 3
30938: NEG
30939: PUSH
30940: LD_INT 1
30942: NEG
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 3
30950: NEG
30951: PUSH
30952: LD_INT 2
30954: NEG
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30985: LD_ADDR_VAR 0 29
30989: PUSH
30990: LD_INT 0
30992: PUSH
30993: LD_INT 0
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 0
31002: PUSH
31003: LD_INT 1
31005: NEG
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 1
31013: PUSH
31014: LD_INT 0
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 1
31023: PUSH
31024: LD_INT 1
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: LD_INT 0
31033: PUSH
31034: LD_INT 1
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 1
31043: NEG
31044: PUSH
31045: LD_INT 0
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 1
31054: NEG
31055: PUSH
31056: LD_INT 1
31058: NEG
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 1
31066: NEG
31067: PUSH
31068: LD_INT 2
31070: NEG
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 0
31078: PUSH
31079: LD_INT 2
31081: NEG
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 1
31089: PUSH
31090: LD_INT 1
31092: NEG
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 2
31100: PUSH
31101: LD_INT 0
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 2
31110: PUSH
31111: LD_INT 1
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 1
31120: PUSH
31121: LD_INT 2
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 0
31130: PUSH
31131: LD_INT 2
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 1
31140: NEG
31141: PUSH
31142: LD_INT 1
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 2
31151: NEG
31152: PUSH
31153: LD_INT 1
31155: NEG
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 2
31163: NEG
31164: PUSH
31165: LD_INT 2
31167: NEG
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 2
31175: NEG
31176: PUSH
31177: LD_INT 3
31179: NEG
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 2
31187: PUSH
31188: LD_INT 1
31190: NEG
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 3
31198: PUSH
31199: LD_INT 1
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 1
31208: PUSH
31209: LD_INT 3
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 1
31218: NEG
31219: PUSH
31220: LD_INT 2
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 3
31229: NEG
31230: PUSH
31231: LD_INT 2
31233: NEG
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31264: LD_ADDR_VAR 0 30
31268: PUSH
31269: LD_INT 0
31271: PUSH
31272: LD_INT 0
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 0
31281: PUSH
31282: LD_INT 1
31284: NEG
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 1
31292: PUSH
31293: LD_INT 0
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 1
31302: PUSH
31303: LD_INT 1
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 0
31312: PUSH
31313: LD_INT 1
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 1
31322: NEG
31323: PUSH
31324: LD_INT 0
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 1
31333: NEG
31334: PUSH
31335: LD_INT 1
31337: NEG
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 1
31345: NEG
31346: PUSH
31347: LD_INT 2
31349: NEG
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 0
31357: PUSH
31358: LD_INT 2
31360: NEG
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 1
31368: PUSH
31369: LD_INT 1
31371: NEG
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 2
31379: PUSH
31380: LD_INT 0
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 2
31389: PUSH
31390: LD_INT 1
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 2
31399: PUSH
31400: LD_INT 2
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 1
31409: PUSH
31410: LD_INT 2
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 1
31419: NEG
31420: PUSH
31421: LD_INT 1
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 2
31430: NEG
31431: PUSH
31432: LD_INT 0
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 2
31441: NEG
31442: PUSH
31443: LD_INT 1
31445: NEG
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 1
31453: NEG
31454: PUSH
31455: LD_INT 3
31457: NEG
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 1
31465: PUSH
31466: LD_INT 2
31468: NEG
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 3
31476: PUSH
31477: LD_INT 2
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 2
31486: PUSH
31487: LD_INT 3
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 2
31496: NEG
31497: PUSH
31498: LD_INT 1
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 3
31507: NEG
31508: PUSH
31509: LD_INT 1
31511: NEG
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31542: LD_ADDR_VAR 0 31
31546: PUSH
31547: LD_INT 0
31549: PUSH
31550: LD_INT 0
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 0
31559: PUSH
31560: LD_INT 1
31562: NEG
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 1
31570: PUSH
31571: LD_INT 0
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 1
31580: PUSH
31581: LD_INT 1
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: LD_INT 0
31590: PUSH
31591: LD_INT 1
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 1
31600: NEG
31601: PUSH
31602: LD_INT 0
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 1
31611: NEG
31612: PUSH
31613: LD_INT 1
31615: NEG
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 1
31623: NEG
31624: PUSH
31625: LD_INT 2
31627: NEG
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 1
31635: PUSH
31636: LD_INT 1
31638: NEG
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 2
31646: PUSH
31647: LD_INT 0
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 2
31656: PUSH
31657: LD_INT 1
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 2
31666: PUSH
31667: LD_INT 2
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 1
31676: PUSH
31677: LD_INT 2
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 0
31686: PUSH
31687: LD_INT 2
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 1
31696: NEG
31697: PUSH
31698: LD_INT 1
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 2
31707: NEG
31708: PUSH
31709: LD_INT 1
31711: NEG
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 2
31719: NEG
31720: PUSH
31721: LD_INT 2
31723: NEG
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 2
31731: NEG
31732: PUSH
31733: LD_INT 3
31735: NEG
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 2
31743: PUSH
31744: LD_INT 1
31746: NEG
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 3
31754: PUSH
31755: LD_INT 1
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 1
31764: PUSH
31765: LD_INT 3
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 1
31774: NEG
31775: PUSH
31776: LD_INT 2
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 3
31785: NEG
31786: PUSH
31787: LD_INT 2
31789: NEG
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31820: LD_ADDR_VAR 0 32
31824: PUSH
31825: LD_INT 0
31827: PUSH
31828: LD_INT 0
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 0
31837: PUSH
31838: LD_INT 1
31840: NEG
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 1
31848: PUSH
31849: LD_INT 0
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 1
31858: PUSH
31859: LD_INT 1
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 0
31868: PUSH
31869: LD_INT 1
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 1
31878: NEG
31879: PUSH
31880: LD_INT 0
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 1
31889: NEG
31890: PUSH
31891: LD_INT 1
31893: NEG
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 1
31901: NEG
31902: PUSH
31903: LD_INT 2
31905: NEG
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 0
31913: PUSH
31914: LD_INT 2
31916: NEG
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 1
31924: PUSH
31925: LD_INT 1
31927: NEG
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 2
31935: PUSH
31936: LD_INT 1
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 2
31945: PUSH
31946: LD_INT 2
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 1
31955: PUSH
31956: LD_INT 2
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 0
31965: PUSH
31966: LD_INT 2
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 1
31975: NEG
31976: PUSH
31977: LD_INT 1
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 2
31986: NEG
31987: PUSH
31988: LD_INT 0
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 2
31997: NEG
31998: PUSH
31999: LD_INT 1
32001: NEG
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 1
32009: NEG
32010: PUSH
32011: LD_INT 3
32013: NEG
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 1
32021: PUSH
32022: LD_INT 2
32024: NEG
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: LD_INT 3
32032: PUSH
32033: LD_INT 2
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 2
32042: PUSH
32043: LD_INT 3
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 2
32052: NEG
32053: PUSH
32054: LD_INT 1
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 3
32063: NEG
32064: PUSH
32065: LD_INT 1
32067: NEG
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32098: LD_ADDR_VAR 0 33
32102: PUSH
32103: LD_INT 0
32105: PUSH
32106: LD_INT 0
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 0
32115: PUSH
32116: LD_INT 1
32118: NEG
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 1
32126: PUSH
32127: LD_INT 0
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 1
32136: PUSH
32137: LD_INT 1
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 0
32146: PUSH
32147: LD_INT 1
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 1
32156: NEG
32157: PUSH
32158: LD_INT 0
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 1
32167: NEG
32168: PUSH
32169: LD_INT 1
32171: NEG
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 1
32179: NEG
32180: PUSH
32181: LD_INT 2
32183: NEG
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 1
32191: PUSH
32192: LD_INT 1
32194: NEG
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 2
32202: PUSH
32203: LD_INT 0
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 2
32212: PUSH
32213: LD_INT 1
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 1
32222: PUSH
32223: LD_INT 2
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 0
32232: PUSH
32233: LD_INT 2
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 1
32242: NEG
32243: PUSH
32244: LD_INT 1
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 2
32253: NEG
32254: PUSH
32255: LD_INT 0
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 2
32264: NEG
32265: PUSH
32266: LD_INT 1
32268: NEG
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 2
32276: NEG
32277: PUSH
32278: LD_INT 2
32280: NEG
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 2
32288: NEG
32289: PUSH
32290: LD_INT 3
32292: NEG
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 2
32300: PUSH
32301: LD_INT 1
32303: NEG
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 3
32311: PUSH
32312: LD_INT 1
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 1
32321: PUSH
32322: LD_INT 3
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 1
32331: NEG
32332: PUSH
32333: LD_INT 2
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 3
32342: NEG
32343: PUSH
32344: LD_INT 2
32346: NEG
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32377: LD_ADDR_VAR 0 34
32381: PUSH
32382: LD_INT 0
32384: PUSH
32385: LD_INT 0
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 0
32394: PUSH
32395: LD_INT 1
32397: NEG
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 1
32405: PUSH
32406: LD_INT 0
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 1
32415: PUSH
32416: LD_INT 1
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 0
32425: PUSH
32426: LD_INT 1
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 1
32435: NEG
32436: PUSH
32437: LD_INT 0
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 1
32446: NEG
32447: PUSH
32448: LD_INT 1
32450: NEG
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 1
32458: NEG
32459: PUSH
32460: LD_INT 2
32462: NEG
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 0
32470: PUSH
32471: LD_INT 2
32473: NEG
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 1
32481: PUSH
32482: LD_INT 1
32484: NEG
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 2
32492: PUSH
32493: LD_INT 1
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 2
32502: PUSH
32503: LD_INT 2
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 1
32512: PUSH
32513: LD_INT 2
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 1
32522: NEG
32523: PUSH
32524: LD_INT 1
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 2
32533: NEG
32534: PUSH
32535: LD_INT 0
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 2
32544: NEG
32545: PUSH
32546: LD_INT 1
32548: NEG
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 2
32556: NEG
32557: PUSH
32558: LD_INT 2
32560: NEG
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 1
32568: NEG
32569: PUSH
32570: LD_INT 3
32572: NEG
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 1
32580: PUSH
32581: LD_INT 2
32583: NEG
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 3
32591: PUSH
32592: LD_INT 2
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 2
32601: PUSH
32602: LD_INT 3
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 2
32611: NEG
32612: PUSH
32613: LD_INT 1
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 3
32622: NEG
32623: PUSH
32624: LD_INT 1
32626: NEG
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32657: LD_ADDR_VAR 0 35
32661: PUSH
32662: LD_INT 0
32664: PUSH
32665: LD_INT 0
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 0
32674: PUSH
32675: LD_INT 1
32677: NEG
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 1
32685: PUSH
32686: LD_INT 0
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 1
32695: PUSH
32696: LD_INT 1
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 0
32705: PUSH
32706: LD_INT 1
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 1
32715: NEG
32716: PUSH
32717: LD_INT 0
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 1
32726: NEG
32727: PUSH
32728: LD_INT 1
32730: NEG
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 2
32738: PUSH
32739: LD_INT 1
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 2
32748: NEG
32749: PUSH
32750: LD_INT 1
32752: NEG
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32769: LD_ADDR_VAR 0 36
32773: PUSH
32774: LD_INT 0
32776: PUSH
32777: LD_INT 0
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 0
32786: PUSH
32787: LD_INT 1
32789: NEG
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 1
32797: PUSH
32798: LD_INT 0
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 1
32807: PUSH
32808: LD_INT 1
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 0
32817: PUSH
32818: LD_INT 1
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 1
32827: NEG
32828: PUSH
32829: LD_INT 0
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PUSH
32836: LD_INT 1
32838: NEG
32839: PUSH
32840: LD_INT 1
32842: NEG
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 1
32850: NEG
32851: PUSH
32852: LD_INT 2
32854: NEG
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 1
32862: PUSH
32863: LD_INT 2
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32881: LD_ADDR_VAR 0 37
32885: PUSH
32886: LD_INT 0
32888: PUSH
32889: LD_INT 0
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 0
32898: PUSH
32899: LD_INT 1
32901: NEG
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 1
32909: PUSH
32910: LD_INT 0
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 1
32919: PUSH
32920: LD_INT 1
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 0
32929: PUSH
32930: LD_INT 1
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 1
32939: NEG
32940: PUSH
32941: LD_INT 0
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 1
32950: NEG
32951: PUSH
32952: LD_INT 1
32954: NEG
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 1
32962: PUSH
32963: LD_INT 1
32965: NEG
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 1
32973: NEG
32974: PUSH
32975: LD_INT 1
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32993: LD_ADDR_VAR 0 38
32997: PUSH
32998: LD_INT 0
33000: PUSH
33001: LD_INT 0
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 0
33010: PUSH
33011: LD_INT 1
33013: NEG
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 1
33021: PUSH
33022: LD_INT 0
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 1
33031: PUSH
33032: LD_INT 1
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 0
33041: PUSH
33042: LD_INT 1
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 1
33051: NEG
33052: PUSH
33053: LD_INT 0
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 1
33062: NEG
33063: PUSH
33064: LD_INT 1
33066: NEG
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 2
33074: PUSH
33075: LD_INT 1
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 2
33084: NEG
33085: PUSH
33086: LD_INT 1
33088: NEG
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33105: LD_ADDR_VAR 0 39
33109: PUSH
33110: LD_INT 0
33112: PUSH
33113: LD_INT 0
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 0
33122: PUSH
33123: LD_INT 1
33125: NEG
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 1
33133: PUSH
33134: LD_INT 0
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 1
33143: PUSH
33144: LD_INT 1
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 0
33153: PUSH
33154: LD_INT 1
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 1
33163: NEG
33164: PUSH
33165: LD_INT 0
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 1
33174: NEG
33175: PUSH
33176: LD_INT 1
33178: NEG
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 1
33186: NEG
33187: PUSH
33188: LD_INT 2
33190: NEG
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 1
33198: PUSH
33199: LD_INT 2
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33217: LD_ADDR_VAR 0 40
33221: PUSH
33222: LD_INT 0
33224: PUSH
33225: LD_INT 0
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 0
33234: PUSH
33235: LD_INT 1
33237: NEG
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 1
33245: PUSH
33246: LD_INT 0
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 1
33255: PUSH
33256: LD_INT 1
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 0
33265: PUSH
33266: LD_INT 1
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 1
33275: NEG
33276: PUSH
33277: LD_INT 0
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 1
33286: NEG
33287: PUSH
33288: LD_INT 1
33290: NEG
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 1
33298: PUSH
33299: LD_INT 1
33301: NEG
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 1
33309: NEG
33310: PUSH
33311: LD_INT 1
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33329: LD_ADDR_VAR 0 41
33333: PUSH
33334: LD_INT 0
33336: PUSH
33337: LD_INT 0
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 0
33346: PUSH
33347: LD_INT 1
33349: NEG
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 1
33357: PUSH
33358: LD_INT 0
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 1
33367: PUSH
33368: LD_INT 1
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 0
33377: PUSH
33378: LD_INT 1
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 1
33387: NEG
33388: PUSH
33389: LD_INT 0
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 1
33398: NEG
33399: PUSH
33400: LD_INT 1
33402: NEG
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 1
33410: NEG
33411: PUSH
33412: LD_INT 2
33414: NEG
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 1
33422: PUSH
33423: LD_INT 1
33425: NEG
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 2
33433: PUSH
33434: LD_INT 0
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 2
33443: PUSH
33444: LD_INT 1
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 2
33453: PUSH
33454: LD_INT 2
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 1
33463: PUSH
33464: LD_INT 2
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 1
33473: NEG
33474: PUSH
33475: LD_INT 1
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 2
33484: NEG
33485: PUSH
33486: LD_INT 0
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 2
33495: NEG
33496: PUSH
33497: LD_INT 1
33499: NEG
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 2
33507: NEG
33508: PUSH
33509: LD_INT 2
33511: NEG
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: LD_INT 2
33519: NEG
33520: PUSH
33521: LD_INT 3
33523: NEG
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 2
33531: PUSH
33532: LD_INT 1
33534: NEG
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 3
33542: PUSH
33543: LD_INT 0
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 3
33552: PUSH
33553: LD_INT 1
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 3
33562: PUSH
33563: LD_INT 2
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 3
33572: PUSH
33573: LD_INT 3
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 2
33582: PUSH
33583: LD_INT 3
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 2
33592: NEG
33593: PUSH
33594: LD_INT 1
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 3
33603: NEG
33604: PUSH
33605: LD_INT 0
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 3
33614: NEG
33615: PUSH
33616: LD_INT 1
33618: NEG
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 3
33626: NEG
33627: PUSH
33628: LD_INT 2
33630: NEG
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 3
33638: NEG
33639: PUSH
33640: LD_INT 3
33642: NEG
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33679: LD_ADDR_VAR 0 42
33683: PUSH
33684: LD_INT 0
33686: PUSH
33687: LD_INT 0
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 0
33696: PUSH
33697: LD_INT 1
33699: NEG
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 1
33707: PUSH
33708: LD_INT 0
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 1
33717: PUSH
33718: LD_INT 1
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 0
33727: PUSH
33728: LD_INT 1
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 1
33737: NEG
33738: PUSH
33739: LD_INT 0
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 1
33748: NEG
33749: PUSH
33750: LD_INT 1
33752: NEG
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 1
33760: NEG
33761: PUSH
33762: LD_INT 2
33764: NEG
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 0
33772: PUSH
33773: LD_INT 2
33775: NEG
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 1
33783: PUSH
33784: LD_INT 1
33786: NEG
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 2
33794: PUSH
33795: LD_INT 1
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 2
33804: PUSH
33805: LD_INT 2
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 1
33814: PUSH
33815: LD_INT 2
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 0
33824: PUSH
33825: LD_INT 2
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 1
33834: NEG
33835: PUSH
33836: LD_INT 1
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 2
33845: NEG
33846: PUSH
33847: LD_INT 1
33849: NEG
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 2
33857: NEG
33858: PUSH
33859: LD_INT 2
33861: NEG
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 2
33869: NEG
33870: PUSH
33871: LD_INT 3
33873: NEG
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 1
33881: NEG
33882: PUSH
33883: LD_INT 3
33885: NEG
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 0
33893: PUSH
33894: LD_INT 3
33896: NEG
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 1
33904: PUSH
33905: LD_INT 2
33907: NEG
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 3
33915: PUSH
33916: LD_INT 2
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 3
33925: PUSH
33926: LD_INT 3
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 2
33935: PUSH
33936: LD_INT 3
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 1
33945: PUSH
33946: LD_INT 3
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 0
33955: PUSH
33956: LD_INT 3
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 1
33965: NEG
33966: PUSH
33967: LD_INT 2
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 3
33976: NEG
33977: PUSH
33978: LD_INT 2
33980: NEG
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PUSH
33986: LD_INT 3
33988: NEG
33989: PUSH
33990: LD_INT 3
33992: NEG
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34029: LD_ADDR_VAR 0 43
34033: PUSH
34034: LD_INT 0
34036: PUSH
34037: LD_INT 0
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 0
34046: PUSH
34047: LD_INT 1
34049: NEG
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 1
34057: PUSH
34058: LD_INT 0
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 1
34067: PUSH
34068: LD_INT 1
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 0
34077: PUSH
34078: LD_INT 1
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 1
34087: NEG
34088: PUSH
34089: LD_INT 0
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 1
34098: NEG
34099: PUSH
34100: LD_INT 1
34102: NEG
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 1
34110: NEG
34111: PUSH
34112: LD_INT 2
34114: NEG
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 0
34122: PUSH
34123: LD_INT 2
34125: NEG
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 1
34133: PUSH
34134: LD_INT 1
34136: NEG
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 2
34144: PUSH
34145: LD_INT 0
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 2
34154: PUSH
34155: LD_INT 1
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 1
34164: PUSH
34165: LD_INT 2
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 0
34174: PUSH
34175: LD_INT 2
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 1
34184: NEG
34185: PUSH
34186: LD_INT 1
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 2
34195: NEG
34196: PUSH
34197: LD_INT 0
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 2
34206: NEG
34207: PUSH
34208: LD_INT 1
34210: NEG
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 1
34218: NEG
34219: PUSH
34220: LD_INT 3
34222: NEG
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 0
34230: PUSH
34231: LD_INT 3
34233: NEG
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: PUSH
34239: LD_INT 1
34241: PUSH
34242: LD_INT 2
34244: NEG
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 2
34252: PUSH
34253: LD_INT 1
34255: NEG
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 3
34263: PUSH
34264: LD_INT 0
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 3
34273: PUSH
34274: LD_INT 1
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 1
34283: PUSH
34284: LD_INT 3
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 0
34293: PUSH
34294: LD_INT 3
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 1
34303: NEG
34304: PUSH
34305: LD_INT 2
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 2
34314: NEG
34315: PUSH
34316: LD_INT 1
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 3
34325: NEG
34326: PUSH
34327: LD_INT 0
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 3
34336: NEG
34337: PUSH
34338: LD_INT 1
34340: NEG
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34377: LD_ADDR_VAR 0 44
34381: PUSH
34382: LD_INT 0
34384: PUSH
34385: LD_INT 0
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 0
34394: PUSH
34395: LD_INT 1
34397: NEG
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 1
34405: PUSH
34406: LD_INT 0
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 1
34415: PUSH
34416: LD_INT 1
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 0
34425: PUSH
34426: LD_INT 1
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 1
34435: NEG
34436: PUSH
34437: LD_INT 0
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 1
34446: NEG
34447: PUSH
34448: LD_INT 1
34450: NEG
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 1
34458: NEG
34459: PUSH
34460: LD_INT 2
34462: NEG
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 1
34470: PUSH
34471: LD_INT 1
34473: NEG
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 2
34481: PUSH
34482: LD_INT 0
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 2
34491: PUSH
34492: LD_INT 1
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 2
34501: PUSH
34502: LD_INT 2
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 1
34511: PUSH
34512: LD_INT 2
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 1
34521: NEG
34522: PUSH
34523: LD_INT 1
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 2
34532: NEG
34533: PUSH
34534: LD_INT 0
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 2
34543: NEG
34544: PUSH
34545: LD_INT 1
34547: NEG
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: PUSH
34553: LD_INT 2
34555: NEG
34556: PUSH
34557: LD_INT 2
34559: NEG
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 2
34567: NEG
34568: PUSH
34569: LD_INT 3
34571: NEG
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 2
34579: PUSH
34580: LD_INT 1
34582: NEG
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 3
34590: PUSH
34591: LD_INT 0
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 3
34600: PUSH
34601: LD_INT 1
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 3
34610: PUSH
34611: LD_INT 2
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 3
34620: PUSH
34621: LD_INT 3
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 2
34630: PUSH
34631: LD_INT 3
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 2
34640: NEG
34641: PUSH
34642: LD_INT 1
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 3
34651: NEG
34652: PUSH
34653: LD_INT 0
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 3
34662: NEG
34663: PUSH
34664: LD_INT 1
34666: NEG
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 3
34674: NEG
34675: PUSH
34676: LD_INT 2
34678: NEG
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 3
34686: NEG
34687: PUSH
34688: LD_INT 3
34690: NEG
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34727: LD_ADDR_VAR 0 45
34731: PUSH
34732: LD_INT 0
34734: PUSH
34735: LD_INT 0
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: LD_INT 0
34744: PUSH
34745: LD_INT 1
34747: NEG
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 1
34755: PUSH
34756: LD_INT 0
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 1
34765: PUSH
34766: LD_INT 1
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 0
34775: PUSH
34776: LD_INT 1
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 1
34785: NEG
34786: PUSH
34787: LD_INT 0
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 1
34796: NEG
34797: PUSH
34798: LD_INT 1
34800: NEG
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 1
34808: NEG
34809: PUSH
34810: LD_INT 2
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 0
34820: PUSH
34821: LD_INT 2
34823: NEG
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 1
34831: PUSH
34832: LD_INT 1
34834: NEG
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 2
34842: PUSH
34843: LD_INT 1
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 2
34852: PUSH
34853: LD_INT 2
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: PUSH
34860: LD_INT 1
34862: PUSH
34863: LD_INT 2
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 0
34872: PUSH
34873: LD_INT 2
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PUSH
34880: LD_INT 1
34882: NEG
34883: PUSH
34884: LD_INT 1
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 2
34893: NEG
34894: PUSH
34895: LD_INT 1
34897: NEG
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 2
34905: NEG
34906: PUSH
34907: LD_INT 2
34909: NEG
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 2
34917: NEG
34918: PUSH
34919: LD_INT 3
34921: NEG
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 1
34929: NEG
34930: PUSH
34931: LD_INT 3
34933: NEG
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 0
34941: PUSH
34942: LD_INT 3
34944: NEG
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 1
34952: PUSH
34953: LD_INT 2
34955: NEG
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 3
34963: PUSH
34964: LD_INT 2
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 3
34973: PUSH
34974: LD_INT 3
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 2
34983: PUSH
34984: LD_INT 3
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 1
34993: PUSH
34994: LD_INT 3
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 0
35003: PUSH
35004: LD_INT 3
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 1
35013: NEG
35014: PUSH
35015: LD_INT 2
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 3
35024: NEG
35025: PUSH
35026: LD_INT 2
35028: NEG
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 3
35036: NEG
35037: PUSH
35038: LD_INT 3
35040: NEG
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35077: LD_ADDR_VAR 0 46
35081: PUSH
35082: LD_INT 0
35084: PUSH
35085: LD_INT 0
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 0
35094: PUSH
35095: LD_INT 1
35097: NEG
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 1
35105: PUSH
35106: LD_INT 0
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 1
35115: PUSH
35116: LD_INT 1
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 0
35125: PUSH
35126: LD_INT 1
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 1
35135: NEG
35136: PUSH
35137: LD_INT 0
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 1
35146: NEG
35147: PUSH
35148: LD_INT 1
35150: NEG
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 1
35158: NEG
35159: PUSH
35160: LD_INT 2
35162: NEG
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 0
35170: PUSH
35171: LD_INT 2
35173: NEG
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 1
35181: PUSH
35182: LD_INT 1
35184: NEG
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 2
35192: PUSH
35193: LD_INT 0
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 2
35202: PUSH
35203: LD_INT 1
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 1
35212: PUSH
35213: LD_INT 2
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 0
35222: PUSH
35223: LD_INT 2
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 1
35232: NEG
35233: PUSH
35234: LD_INT 1
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 2
35243: NEG
35244: PUSH
35245: LD_INT 0
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 2
35254: NEG
35255: PUSH
35256: LD_INT 1
35258: NEG
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 1
35266: NEG
35267: PUSH
35268: LD_INT 3
35270: NEG
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 0
35278: PUSH
35279: LD_INT 3
35281: NEG
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 1
35289: PUSH
35290: LD_INT 2
35292: NEG
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 2
35300: PUSH
35301: LD_INT 1
35303: NEG
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 3
35311: PUSH
35312: LD_INT 0
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 3
35321: PUSH
35322: LD_INT 1
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 1
35331: PUSH
35332: LD_INT 3
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 0
35341: PUSH
35342: LD_INT 3
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 1
35351: NEG
35352: PUSH
35353: LD_INT 2
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 2
35362: NEG
35363: PUSH
35364: LD_INT 1
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 3
35373: NEG
35374: PUSH
35375: LD_INT 0
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 3
35384: NEG
35385: PUSH
35386: LD_INT 1
35388: NEG
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35425: LD_ADDR_VAR 0 47
35429: PUSH
35430: LD_INT 0
35432: PUSH
35433: LD_INT 0
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 0
35442: PUSH
35443: LD_INT 1
35445: NEG
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 1
35453: PUSH
35454: LD_INT 0
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 1
35463: PUSH
35464: LD_INT 1
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 0
35473: PUSH
35474: LD_INT 1
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 1
35483: NEG
35484: PUSH
35485: LD_INT 0
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 1
35494: NEG
35495: PUSH
35496: LD_INT 1
35498: NEG
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 1
35506: NEG
35507: PUSH
35508: LD_INT 2
35510: NEG
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 0
35518: PUSH
35519: LD_INT 2
35521: NEG
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 1
35529: PUSH
35530: LD_INT 1
35532: NEG
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 2
35540: NEG
35541: PUSH
35542: LD_INT 1
35544: NEG
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 2
35552: NEG
35553: PUSH
35554: LD_INT 2
35556: NEG
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35576: LD_ADDR_VAR 0 48
35580: PUSH
35581: LD_INT 0
35583: PUSH
35584: LD_INT 0
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 0
35593: PUSH
35594: LD_INT 1
35596: NEG
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: LD_INT 1
35604: PUSH
35605: LD_INT 0
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 1
35614: PUSH
35615: LD_INT 1
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 0
35624: PUSH
35625: LD_INT 1
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 1
35634: NEG
35635: PUSH
35636: LD_INT 0
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 1
35645: NEG
35646: PUSH
35647: LD_INT 1
35649: NEG
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 1
35657: NEG
35658: PUSH
35659: LD_INT 2
35661: NEG
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 0
35669: PUSH
35670: LD_INT 2
35672: NEG
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 1
35680: PUSH
35681: LD_INT 1
35683: NEG
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: LD_INT 2
35691: PUSH
35692: LD_INT 0
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 2
35701: PUSH
35702: LD_INT 1
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35723: LD_ADDR_VAR 0 49
35727: PUSH
35728: LD_INT 0
35730: PUSH
35731: LD_INT 0
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: LD_INT 1
35743: NEG
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 1
35751: PUSH
35752: LD_INT 0
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 1
35761: PUSH
35762: LD_INT 1
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 0
35771: PUSH
35772: LD_INT 1
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 1
35781: NEG
35782: PUSH
35783: LD_INT 0
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 1
35792: NEG
35793: PUSH
35794: LD_INT 1
35796: NEG
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 1
35804: PUSH
35805: LD_INT 1
35807: NEG
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 2
35815: PUSH
35816: LD_INT 0
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 2
35825: PUSH
35826: LD_INT 1
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 2
35835: PUSH
35836: LD_INT 2
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 1
35845: PUSH
35846: LD_INT 2
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35867: LD_ADDR_VAR 0 50
35871: PUSH
35872: LD_INT 0
35874: PUSH
35875: LD_INT 0
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 0
35884: PUSH
35885: LD_INT 1
35887: NEG
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 1
35895: PUSH
35896: LD_INT 0
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 1
35905: PUSH
35906: LD_INT 1
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 0
35915: PUSH
35916: LD_INT 1
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 1
35925: NEG
35926: PUSH
35927: LD_INT 0
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 1
35936: NEG
35937: PUSH
35938: LD_INT 1
35940: NEG
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 2
35948: PUSH
35949: LD_INT 1
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 2
35958: PUSH
35959: LD_INT 2
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 1
35968: PUSH
35969: LD_INT 2
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 0
35978: PUSH
35979: LD_INT 2
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 1
35988: NEG
35989: PUSH
35990: LD_INT 1
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36011: LD_ADDR_VAR 0 51
36015: PUSH
36016: LD_INT 0
36018: PUSH
36019: LD_INT 0
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 0
36028: PUSH
36029: LD_INT 1
36031: NEG
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 1
36039: PUSH
36040: LD_INT 0
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 1
36049: PUSH
36050: LD_INT 1
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 0
36059: PUSH
36060: LD_INT 1
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 1
36069: NEG
36070: PUSH
36071: LD_INT 0
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 1
36080: NEG
36081: PUSH
36082: LD_INT 1
36084: NEG
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 1
36092: PUSH
36093: LD_INT 2
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 0
36102: PUSH
36103: LD_INT 2
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 1
36112: NEG
36113: PUSH
36114: LD_INT 1
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 2
36123: NEG
36124: PUSH
36125: LD_INT 0
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 2
36134: NEG
36135: PUSH
36136: LD_INT 1
36138: NEG
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36158: LD_ADDR_VAR 0 52
36162: PUSH
36163: LD_INT 0
36165: PUSH
36166: LD_INT 0
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 0
36175: PUSH
36176: LD_INT 1
36178: NEG
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 1
36186: PUSH
36187: LD_INT 0
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 1
36196: PUSH
36197: LD_INT 1
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 0
36206: PUSH
36207: LD_INT 1
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 1
36216: NEG
36217: PUSH
36218: LD_INT 0
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 1
36227: NEG
36228: PUSH
36229: LD_INT 1
36231: NEG
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 1
36239: NEG
36240: PUSH
36241: LD_INT 2
36243: NEG
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 1
36251: NEG
36252: PUSH
36253: LD_INT 1
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 2
36262: NEG
36263: PUSH
36264: LD_INT 0
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 2
36273: NEG
36274: PUSH
36275: LD_INT 1
36277: NEG
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 2
36285: NEG
36286: PUSH
36287: LD_INT 2
36289: NEG
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36309: LD_ADDR_VAR 0 53
36313: PUSH
36314: LD_INT 0
36316: PUSH
36317: LD_INT 0
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 0
36326: PUSH
36327: LD_INT 1
36329: NEG
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 1
36337: PUSH
36338: LD_INT 0
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 1
36347: PUSH
36348: LD_INT 1
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 1
36367: NEG
36368: PUSH
36369: LD_INT 0
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 1
36378: NEG
36379: PUSH
36380: LD_INT 1
36382: NEG
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 1
36390: NEG
36391: PUSH
36392: LD_INT 2
36394: NEG
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 0
36402: PUSH
36403: LD_INT 2
36405: NEG
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 1
36413: PUSH
36414: LD_INT 1
36416: NEG
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 2
36424: PUSH
36425: LD_INT 0
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 2
36434: PUSH
36435: LD_INT 1
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 2
36444: PUSH
36445: LD_INT 2
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 1
36454: PUSH
36455: LD_INT 2
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 0
36464: PUSH
36465: LD_INT 2
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 1
36474: NEG
36475: PUSH
36476: LD_INT 1
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 2
36485: NEG
36486: PUSH
36487: LD_INT 0
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 2
36496: NEG
36497: PUSH
36498: LD_INT 1
36500: NEG
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 2
36508: NEG
36509: PUSH
36510: LD_INT 2
36512: NEG
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36539: LD_ADDR_VAR 0 54
36543: PUSH
36544: LD_INT 0
36546: PUSH
36547: LD_INT 0
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 0
36556: PUSH
36557: LD_INT 1
36559: NEG
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 1
36567: PUSH
36568: LD_INT 0
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 1
36577: PUSH
36578: LD_INT 1
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 0
36587: PUSH
36588: LD_INT 1
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 1
36597: NEG
36598: PUSH
36599: LD_INT 0
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 1
36608: NEG
36609: PUSH
36610: LD_INT 1
36612: NEG
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 1
36620: NEG
36621: PUSH
36622: LD_INT 2
36624: NEG
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 0
36632: PUSH
36633: LD_INT 2
36635: NEG
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 1
36643: PUSH
36644: LD_INT 1
36646: NEG
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 2
36654: PUSH
36655: LD_INT 0
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 2
36664: PUSH
36665: LD_INT 1
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 2
36674: PUSH
36675: LD_INT 2
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 1
36684: PUSH
36685: LD_INT 2
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 0
36694: PUSH
36695: LD_INT 2
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 1
36704: NEG
36705: PUSH
36706: LD_INT 1
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 2
36715: NEG
36716: PUSH
36717: LD_INT 0
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 2
36726: NEG
36727: PUSH
36728: LD_INT 1
36730: NEG
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 2
36738: NEG
36739: PUSH
36740: LD_INT 2
36742: NEG
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36769: LD_ADDR_VAR 0 55
36773: PUSH
36774: LD_INT 0
36776: PUSH
36777: LD_INT 0
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 0
36786: PUSH
36787: LD_INT 1
36789: NEG
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 1
36797: PUSH
36798: LD_INT 0
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 1
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 0
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 1
36827: NEG
36828: PUSH
36829: LD_INT 0
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: LD_INT 1
36842: NEG
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 1
36850: NEG
36851: PUSH
36852: LD_INT 2
36854: NEG
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 0
36862: PUSH
36863: LD_INT 2
36865: NEG
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 1
36873: PUSH
36874: LD_INT 1
36876: NEG
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 2
36884: PUSH
36885: LD_INT 0
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 2
36894: PUSH
36895: LD_INT 1
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 2
36904: PUSH
36905: LD_INT 2
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 1
36914: PUSH
36915: LD_INT 2
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 0
36924: PUSH
36925: LD_INT 2
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 1
36934: NEG
36935: PUSH
36936: LD_INT 1
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 2
36945: NEG
36946: PUSH
36947: LD_INT 0
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 2
36956: NEG
36957: PUSH
36958: LD_INT 1
36960: NEG
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 2
36968: NEG
36969: PUSH
36970: LD_INT 2
36972: NEG
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36999: LD_ADDR_VAR 0 56
37003: PUSH
37004: LD_INT 0
37006: PUSH
37007: LD_INT 0
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 0
37016: PUSH
37017: LD_INT 1
37019: NEG
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 1
37027: PUSH
37028: LD_INT 0
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 1
37037: PUSH
37038: LD_INT 1
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 0
37047: PUSH
37048: LD_INT 1
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 1
37057: NEG
37058: PUSH
37059: LD_INT 0
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 1
37068: NEG
37069: PUSH
37070: LD_INT 1
37072: NEG
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: PUSH
37078: LD_INT 1
37080: NEG
37081: PUSH
37082: LD_INT 2
37084: NEG
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 0
37092: PUSH
37093: LD_INT 2
37095: NEG
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 1
37103: PUSH
37104: LD_INT 1
37106: NEG
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 2
37114: PUSH
37115: LD_INT 0
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 2
37124: PUSH
37125: LD_INT 1
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 2
37134: PUSH
37135: LD_INT 2
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 1
37144: PUSH
37145: LD_INT 2
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: LD_INT 2
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 1
37164: NEG
37165: PUSH
37166: LD_INT 1
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 2
37175: NEG
37176: PUSH
37177: LD_INT 0
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 2
37186: NEG
37187: PUSH
37188: LD_INT 1
37190: NEG
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 2
37198: NEG
37199: PUSH
37200: LD_INT 2
37202: NEG
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37229: LD_ADDR_VAR 0 57
37233: PUSH
37234: LD_INT 0
37236: PUSH
37237: LD_INT 0
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 0
37246: PUSH
37247: LD_INT 1
37249: NEG
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 1
37257: PUSH
37258: LD_INT 0
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 1
37267: PUSH
37268: LD_INT 1
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 0
37277: PUSH
37278: LD_INT 1
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 1
37287: NEG
37288: PUSH
37289: LD_INT 0
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: LD_INT 1
37298: NEG
37299: PUSH
37300: LD_INT 1
37302: NEG
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 1
37310: NEG
37311: PUSH
37312: LD_INT 2
37314: NEG
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 0
37322: PUSH
37323: LD_INT 2
37325: NEG
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 1
37333: PUSH
37334: LD_INT 1
37336: NEG
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 2
37344: PUSH
37345: LD_INT 0
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 2
37354: PUSH
37355: LD_INT 1
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 2
37364: PUSH
37365: LD_INT 2
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 1
37374: PUSH
37375: LD_INT 2
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 0
37384: PUSH
37385: LD_INT 2
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 1
37394: NEG
37395: PUSH
37396: LD_INT 1
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 2
37405: NEG
37406: PUSH
37407: LD_INT 0
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 2
37416: NEG
37417: PUSH
37418: LD_INT 1
37420: NEG
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 2
37428: NEG
37429: PUSH
37430: LD_INT 2
37432: NEG
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37459: LD_ADDR_VAR 0 58
37463: PUSH
37464: LD_INT 0
37466: PUSH
37467: LD_INT 0
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 0
37476: PUSH
37477: LD_INT 1
37479: NEG
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: LD_INT 0
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 1
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 0
37507: PUSH
37508: LD_INT 1
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 1
37517: NEG
37518: PUSH
37519: LD_INT 0
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 1
37528: NEG
37529: PUSH
37530: LD_INT 1
37532: NEG
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 1
37540: NEG
37541: PUSH
37542: LD_INT 2
37544: NEG
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 0
37552: PUSH
37553: LD_INT 2
37555: NEG
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 1
37563: PUSH
37564: LD_INT 1
37566: NEG
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 2
37574: PUSH
37575: LD_INT 0
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 2
37584: PUSH
37585: LD_INT 1
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 2
37594: PUSH
37595: LD_INT 2
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 1
37604: PUSH
37605: LD_INT 2
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 0
37614: PUSH
37615: LD_INT 2
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 1
37624: NEG
37625: PUSH
37626: LD_INT 1
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 2
37635: NEG
37636: PUSH
37637: LD_INT 0
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 2
37646: NEG
37647: PUSH
37648: LD_INT 1
37650: NEG
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 2
37658: NEG
37659: PUSH
37660: LD_INT 2
37662: NEG
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37689: LD_ADDR_VAR 0 59
37693: PUSH
37694: LD_INT 0
37696: PUSH
37697: LD_INT 0
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 0
37706: PUSH
37707: LD_INT 1
37709: NEG
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 1
37717: PUSH
37718: LD_INT 0
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 1
37727: PUSH
37728: LD_INT 1
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 0
37737: PUSH
37738: LD_INT 1
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 1
37747: NEG
37748: PUSH
37749: LD_INT 0
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 1
37758: NEG
37759: PUSH
37760: LD_INT 1
37762: NEG
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37777: LD_ADDR_VAR 0 60
37781: PUSH
37782: LD_INT 0
37784: PUSH
37785: LD_INT 0
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 0
37794: PUSH
37795: LD_INT 1
37797: NEG
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 1
37805: PUSH
37806: LD_INT 0
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 1
37815: PUSH
37816: LD_INT 1
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 0
37825: PUSH
37826: LD_INT 1
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 1
37835: NEG
37836: PUSH
37837: LD_INT 0
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 1
37846: NEG
37847: PUSH
37848: LD_INT 1
37850: NEG
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37865: LD_ADDR_VAR 0 61
37869: PUSH
37870: LD_INT 0
37872: PUSH
37873: LD_INT 0
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 0
37882: PUSH
37883: LD_INT 1
37885: NEG
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 1
37893: PUSH
37894: LD_INT 0
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 1
37903: PUSH
37904: LD_INT 1
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: LD_INT 1
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 1
37923: NEG
37924: PUSH
37925: LD_INT 0
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 1
37934: NEG
37935: PUSH
37936: LD_INT 1
37938: NEG
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37953: LD_ADDR_VAR 0 62
37957: PUSH
37958: LD_INT 0
37960: PUSH
37961: LD_INT 0
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 0
37970: PUSH
37971: LD_INT 1
37973: NEG
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 1
37981: PUSH
37982: LD_INT 0
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 1
37991: PUSH
37992: LD_INT 1
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 0
38001: PUSH
38002: LD_INT 1
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 1
38011: NEG
38012: PUSH
38013: LD_INT 0
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 1
38022: NEG
38023: PUSH
38024: LD_INT 1
38026: NEG
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38041: LD_ADDR_VAR 0 63
38045: PUSH
38046: LD_INT 0
38048: PUSH
38049: LD_INT 0
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 0
38058: PUSH
38059: LD_INT 1
38061: NEG
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 1
38069: PUSH
38070: LD_INT 0
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 1
38079: PUSH
38080: LD_INT 1
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 0
38089: PUSH
38090: LD_INT 1
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 1
38099: NEG
38100: PUSH
38101: LD_INT 0
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PUSH
38108: LD_INT 1
38110: NEG
38111: PUSH
38112: LD_INT 1
38114: NEG
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38129: LD_ADDR_VAR 0 64
38133: PUSH
38134: LD_INT 0
38136: PUSH
38137: LD_INT 0
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 0
38146: PUSH
38147: LD_INT 1
38149: NEG
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 1
38157: PUSH
38158: LD_INT 0
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 1
38167: PUSH
38168: LD_INT 1
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 0
38177: PUSH
38178: LD_INT 1
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 1
38187: NEG
38188: PUSH
38189: LD_INT 0
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 1
38198: NEG
38199: PUSH
38200: LD_INT 1
38202: NEG
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: ST_TO_ADDR
// end ; 1 :
38217: GO 44114
38219: LD_INT 1
38221: DOUBLE
38222: EQUAL
38223: IFTRUE 38227
38225: GO 40850
38227: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38228: LD_ADDR_VAR 0 11
38232: PUSH
38233: LD_INT 1
38235: NEG
38236: PUSH
38237: LD_INT 3
38239: NEG
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 0
38247: PUSH
38248: LD_INT 3
38250: NEG
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 1
38258: PUSH
38259: LD_INT 2
38261: NEG
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: LIST
38271: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38272: LD_ADDR_VAR 0 12
38276: PUSH
38277: LD_INT 2
38279: PUSH
38280: LD_INT 1
38282: NEG
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 3
38290: PUSH
38291: LD_INT 0
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 3
38300: PUSH
38301: LD_INT 1
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: LIST
38312: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38313: LD_ADDR_VAR 0 13
38317: PUSH
38318: LD_INT 3
38320: PUSH
38321: LD_INT 2
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 3
38330: PUSH
38331: LD_INT 3
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 2
38340: PUSH
38341: LD_INT 3
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: LIST
38352: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38353: LD_ADDR_VAR 0 14
38357: PUSH
38358: LD_INT 1
38360: PUSH
38361: LD_INT 3
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 0
38370: PUSH
38371: LD_INT 3
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 1
38380: NEG
38381: PUSH
38382: LD_INT 2
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: LIST
38393: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38394: LD_ADDR_VAR 0 15
38398: PUSH
38399: LD_INT 2
38401: NEG
38402: PUSH
38403: LD_INT 1
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 3
38412: NEG
38413: PUSH
38414: LD_INT 0
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 3
38423: NEG
38424: PUSH
38425: LD_INT 1
38427: NEG
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: LIST
38437: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38438: LD_ADDR_VAR 0 16
38442: PUSH
38443: LD_INT 2
38445: NEG
38446: PUSH
38447: LD_INT 3
38449: NEG
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 3
38457: NEG
38458: PUSH
38459: LD_INT 2
38461: NEG
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 3
38469: NEG
38470: PUSH
38471: LD_INT 3
38473: NEG
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: LIST
38483: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38484: LD_ADDR_VAR 0 17
38488: PUSH
38489: LD_INT 1
38491: NEG
38492: PUSH
38493: LD_INT 3
38495: NEG
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 0
38503: PUSH
38504: LD_INT 3
38506: NEG
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 1
38514: PUSH
38515: LD_INT 2
38517: NEG
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: LIST
38527: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38528: LD_ADDR_VAR 0 18
38532: PUSH
38533: LD_INT 2
38535: PUSH
38536: LD_INT 1
38538: NEG
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 3
38546: PUSH
38547: LD_INT 0
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 3
38556: PUSH
38557: LD_INT 1
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: LIST
38568: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38569: LD_ADDR_VAR 0 19
38573: PUSH
38574: LD_INT 3
38576: PUSH
38577: LD_INT 2
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 3
38586: PUSH
38587: LD_INT 3
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 2
38596: PUSH
38597: LD_INT 3
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: LIST
38608: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38609: LD_ADDR_VAR 0 20
38613: PUSH
38614: LD_INT 1
38616: PUSH
38617: LD_INT 3
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 0
38626: PUSH
38627: LD_INT 3
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 1
38636: NEG
38637: PUSH
38638: LD_INT 2
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: LIST
38649: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38650: LD_ADDR_VAR 0 21
38654: PUSH
38655: LD_INT 2
38657: NEG
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 3
38668: NEG
38669: PUSH
38670: LD_INT 0
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 3
38679: NEG
38680: PUSH
38681: LD_INT 1
38683: NEG
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: LIST
38693: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38694: LD_ADDR_VAR 0 22
38698: PUSH
38699: LD_INT 2
38701: NEG
38702: PUSH
38703: LD_INT 3
38705: NEG
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 3
38713: NEG
38714: PUSH
38715: LD_INT 2
38717: NEG
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 3
38725: NEG
38726: PUSH
38727: LD_INT 3
38729: NEG
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: LIST
38739: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
38740: LD_ADDR_VAR 0 23
38744: PUSH
38745: LD_INT 0
38747: PUSH
38748: LD_INT 3
38750: NEG
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 1
38758: NEG
38759: PUSH
38760: LD_INT 4
38762: NEG
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 1
38770: PUSH
38771: LD_INT 3
38773: NEG
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: LIST
38783: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
38784: LD_ADDR_VAR 0 24
38788: PUSH
38789: LD_INT 3
38791: PUSH
38792: LD_INT 0
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 3
38801: PUSH
38802: LD_INT 1
38804: NEG
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 4
38812: PUSH
38813: LD_INT 1
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: LIST
38824: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
38825: LD_ADDR_VAR 0 25
38829: PUSH
38830: LD_INT 3
38832: PUSH
38833: LD_INT 3
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 4
38842: PUSH
38843: LD_INT 3
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 3
38852: PUSH
38853: LD_INT 4
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: LIST
38864: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
38865: LD_ADDR_VAR 0 26
38869: PUSH
38870: LD_INT 0
38872: PUSH
38873: LD_INT 3
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 1
38882: PUSH
38883: LD_INT 4
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: PUSH
38890: LD_INT 1
38892: NEG
38893: PUSH
38894: LD_INT 3
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: LIST
38905: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
38906: LD_ADDR_VAR 0 27
38910: PUSH
38911: LD_INT 3
38913: NEG
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 3
38924: NEG
38925: PUSH
38926: LD_INT 1
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 4
38935: NEG
38936: PUSH
38937: LD_INT 1
38939: NEG
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: LIST
38949: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
38950: LD_ADDR_VAR 0 28
38954: PUSH
38955: LD_INT 3
38957: NEG
38958: PUSH
38959: LD_INT 3
38961: NEG
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 3
38969: NEG
38970: PUSH
38971: LD_INT 4
38973: NEG
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 4
38981: NEG
38982: PUSH
38983: LD_INT 3
38985: NEG
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: LIST
38995: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
38996: LD_ADDR_VAR 0 29
39000: PUSH
39001: LD_INT 1
39003: NEG
39004: PUSH
39005: LD_INT 3
39007: NEG
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 0
39015: PUSH
39016: LD_INT 3
39018: NEG
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 1
39026: PUSH
39027: LD_INT 2
39029: NEG
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 1
39037: NEG
39038: PUSH
39039: LD_INT 4
39041: NEG
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 0
39049: PUSH
39050: LD_INT 4
39052: NEG
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: LD_INT 3
39063: NEG
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 1
39071: NEG
39072: PUSH
39073: LD_INT 5
39075: NEG
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: LD_INT 0
39083: PUSH
39084: LD_INT 5
39086: NEG
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 1
39094: PUSH
39095: LD_INT 4
39097: NEG
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 1
39105: NEG
39106: PUSH
39107: LD_INT 6
39109: NEG
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 0
39117: PUSH
39118: LD_INT 6
39120: NEG
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 1
39128: PUSH
39129: LD_INT 5
39131: NEG
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
39151: LD_ADDR_VAR 0 30
39155: PUSH
39156: LD_INT 2
39158: PUSH
39159: LD_INT 1
39161: NEG
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 3
39169: PUSH
39170: LD_INT 0
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 3
39179: PUSH
39180: LD_INT 1
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 3
39189: PUSH
39190: LD_INT 1
39192: NEG
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 4
39200: PUSH
39201: LD_INT 0
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 4
39210: PUSH
39211: LD_INT 1
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 4
39220: PUSH
39221: LD_INT 1
39223: NEG
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 5
39231: PUSH
39232: LD_INT 0
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: PUSH
39239: LD_INT 5
39241: PUSH
39242: LD_INT 1
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 5
39251: PUSH
39252: LD_INT 1
39254: NEG
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 6
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 6
39272: PUSH
39273: LD_INT 1
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
39294: LD_ADDR_VAR 0 31
39298: PUSH
39299: LD_INT 3
39301: PUSH
39302: LD_INT 2
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 3
39311: PUSH
39312: LD_INT 3
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 2
39321: PUSH
39322: LD_INT 3
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 4
39331: PUSH
39332: LD_INT 3
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 4
39341: PUSH
39342: LD_INT 4
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 3
39351: PUSH
39352: LD_INT 4
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 5
39361: PUSH
39362: LD_INT 4
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 5
39371: PUSH
39372: LD_INT 5
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 4
39381: PUSH
39382: LD_INT 5
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 6
39391: PUSH
39392: LD_INT 5
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 6
39401: PUSH
39402: LD_INT 6
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 5
39411: PUSH
39412: LD_INT 6
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
39433: LD_ADDR_VAR 0 32
39437: PUSH
39438: LD_INT 1
39440: PUSH
39441: LD_INT 3
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 0
39450: PUSH
39451: LD_INT 3
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 1
39460: NEG
39461: PUSH
39462: LD_INT 2
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 1
39471: PUSH
39472: LD_INT 4
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 0
39481: PUSH
39482: LD_INT 4
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 1
39491: NEG
39492: PUSH
39493: LD_INT 3
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 1
39502: PUSH
39503: LD_INT 5
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 0
39512: PUSH
39513: LD_INT 5
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 1
39522: NEG
39523: PUSH
39524: LD_INT 4
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 1
39533: PUSH
39534: LD_INT 6
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 0
39543: PUSH
39544: LD_INT 6
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 1
39553: NEG
39554: PUSH
39555: LD_INT 5
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39576: LD_ADDR_VAR 0 33
39580: PUSH
39581: LD_INT 2
39583: NEG
39584: PUSH
39585: LD_INT 1
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 3
39594: NEG
39595: PUSH
39596: LD_INT 0
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 3
39605: NEG
39606: PUSH
39607: LD_INT 1
39609: NEG
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 3
39617: NEG
39618: PUSH
39619: LD_INT 1
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 4
39628: NEG
39629: PUSH
39630: LD_INT 0
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 4
39639: NEG
39640: PUSH
39641: LD_INT 1
39643: NEG
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 4
39651: NEG
39652: PUSH
39653: LD_INT 1
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 5
39662: NEG
39663: PUSH
39664: LD_INT 0
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 5
39673: NEG
39674: PUSH
39675: LD_INT 1
39677: NEG
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 5
39685: NEG
39686: PUSH
39687: LD_INT 1
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 6
39696: NEG
39697: PUSH
39698: LD_INT 0
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 6
39707: NEG
39708: PUSH
39709: LD_INT 1
39711: NEG
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
39731: LD_ADDR_VAR 0 34
39735: PUSH
39736: LD_INT 2
39738: NEG
39739: PUSH
39740: LD_INT 3
39742: NEG
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 3
39750: NEG
39751: PUSH
39752: LD_INT 2
39754: NEG
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 3
39762: NEG
39763: PUSH
39764: LD_INT 3
39766: NEG
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 3
39774: NEG
39775: PUSH
39776: LD_INT 4
39778: NEG
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 4
39786: NEG
39787: PUSH
39788: LD_INT 3
39790: NEG
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 4
39798: NEG
39799: PUSH
39800: LD_INT 4
39802: NEG
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 4
39810: NEG
39811: PUSH
39812: LD_INT 5
39814: NEG
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 5
39822: NEG
39823: PUSH
39824: LD_INT 4
39826: NEG
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 5
39834: NEG
39835: PUSH
39836: LD_INT 5
39838: NEG
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 5
39846: NEG
39847: PUSH
39848: LD_INT 6
39850: NEG
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 6
39858: NEG
39859: PUSH
39860: LD_INT 5
39862: NEG
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 6
39870: NEG
39871: PUSH
39872: LD_INT 6
39874: NEG
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
39894: LD_ADDR_VAR 0 41
39898: PUSH
39899: LD_INT 0
39901: PUSH
39902: LD_INT 2
39904: NEG
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 1
39912: NEG
39913: PUSH
39914: LD_INT 3
39916: NEG
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 1
39924: PUSH
39925: LD_INT 2
39927: NEG
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: LIST
39937: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
39938: LD_ADDR_VAR 0 42
39942: PUSH
39943: LD_INT 2
39945: PUSH
39946: LD_INT 0
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 2
39955: PUSH
39956: LD_INT 1
39958: NEG
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 3
39966: PUSH
39967: LD_INT 1
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: LIST
39978: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
39979: LD_ADDR_VAR 0 43
39983: PUSH
39984: LD_INT 2
39986: PUSH
39987: LD_INT 2
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 3
39996: PUSH
39997: LD_INT 2
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 2
40006: PUSH
40007: LD_INT 3
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: LIST
40018: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
40019: LD_ADDR_VAR 0 44
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: LD_INT 2
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 1
40036: PUSH
40037: LD_INT 3
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 1
40046: NEG
40047: PUSH
40048: LD_INT 2
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: LIST
40059: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40060: LD_ADDR_VAR 0 45
40064: PUSH
40065: LD_INT 2
40067: NEG
40068: PUSH
40069: LD_INT 0
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 2
40078: NEG
40079: PUSH
40080: LD_INT 1
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 3
40089: NEG
40090: PUSH
40091: LD_INT 1
40093: NEG
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: LIST
40103: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
40104: LD_ADDR_VAR 0 46
40108: PUSH
40109: LD_INT 2
40111: NEG
40112: PUSH
40113: LD_INT 2
40115: NEG
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 2
40123: NEG
40124: PUSH
40125: LD_INT 3
40127: NEG
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 3
40135: NEG
40136: PUSH
40137: LD_INT 2
40139: NEG
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: LIST
40149: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
40150: LD_ADDR_VAR 0 47
40154: PUSH
40155: LD_INT 2
40157: NEG
40158: PUSH
40159: LD_INT 3
40161: NEG
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 1
40169: NEG
40170: PUSH
40171: LD_INT 3
40173: NEG
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40183: LD_ADDR_VAR 0 48
40187: PUSH
40188: LD_INT 1
40190: PUSH
40191: LD_INT 2
40193: NEG
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 2
40201: PUSH
40202: LD_INT 1
40204: NEG
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
40214: LD_ADDR_VAR 0 49
40218: PUSH
40219: LD_INT 3
40221: PUSH
40222: LD_INT 1
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 3
40231: PUSH
40232: LD_INT 2
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
40243: LD_ADDR_VAR 0 50
40247: PUSH
40248: LD_INT 2
40250: PUSH
40251: LD_INT 3
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 1
40260: PUSH
40261: LD_INT 3
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40272: LD_ADDR_VAR 0 51
40276: PUSH
40277: LD_INT 1
40279: NEG
40280: PUSH
40281: LD_INT 2
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 2
40290: NEG
40291: PUSH
40292: LD_INT 1
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40303: LD_ADDR_VAR 0 52
40307: PUSH
40308: LD_INT 3
40310: NEG
40311: PUSH
40312: LD_INT 1
40314: NEG
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 3
40322: NEG
40323: PUSH
40324: LD_INT 2
40326: NEG
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40336: LD_ADDR_VAR 0 53
40340: PUSH
40341: LD_INT 1
40343: NEG
40344: PUSH
40345: LD_INT 3
40347: NEG
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 0
40355: PUSH
40356: LD_INT 3
40358: NEG
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 1
40366: PUSH
40367: LD_INT 2
40369: NEG
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: LIST
40379: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40380: LD_ADDR_VAR 0 54
40384: PUSH
40385: LD_INT 2
40387: PUSH
40388: LD_INT 1
40390: NEG
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 3
40398: PUSH
40399: LD_INT 0
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 3
40408: PUSH
40409: LD_INT 1
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: LIST
40420: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40421: LD_ADDR_VAR 0 55
40425: PUSH
40426: LD_INT 3
40428: PUSH
40429: LD_INT 2
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 3
40438: PUSH
40439: LD_INT 3
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 2
40448: PUSH
40449: LD_INT 3
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: LIST
40460: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40461: LD_ADDR_VAR 0 56
40465: PUSH
40466: LD_INT 1
40468: PUSH
40469: LD_INT 3
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: LD_INT 3
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 1
40488: NEG
40489: PUSH
40490: LD_INT 2
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: LIST
40501: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40502: LD_ADDR_VAR 0 57
40506: PUSH
40507: LD_INT 2
40509: NEG
40510: PUSH
40511: LD_INT 1
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 3
40520: NEG
40521: PUSH
40522: LD_INT 0
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 3
40531: NEG
40532: PUSH
40533: LD_INT 1
40535: NEG
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: LIST
40545: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40546: LD_ADDR_VAR 0 58
40550: PUSH
40551: LD_INT 2
40553: NEG
40554: PUSH
40555: LD_INT 3
40557: NEG
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 3
40565: NEG
40566: PUSH
40567: LD_INT 2
40569: NEG
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 3
40577: NEG
40578: PUSH
40579: LD_INT 3
40581: NEG
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: LIST
40591: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40592: LD_ADDR_VAR 0 59
40596: PUSH
40597: LD_INT 1
40599: NEG
40600: PUSH
40601: LD_INT 2
40603: NEG
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: LD_INT 2
40614: NEG
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 1
40622: PUSH
40623: LD_INT 1
40625: NEG
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: LIST
40635: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40636: LD_ADDR_VAR 0 60
40640: PUSH
40641: LD_INT 1
40643: PUSH
40644: LD_INT 1
40646: NEG
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 2
40654: PUSH
40655: LD_INT 0
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 2
40664: PUSH
40665: LD_INT 1
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: LIST
40676: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40677: LD_ADDR_VAR 0 61
40681: PUSH
40682: LD_INT 2
40684: PUSH
40685: LD_INT 1
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 2
40694: PUSH
40695: LD_INT 2
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 1
40704: PUSH
40705: LD_INT 2
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: LIST
40716: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40717: LD_ADDR_VAR 0 62
40721: PUSH
40722: LD_INT 1
40724: PUSH
40725: LD_INT 2
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 0
40734: PUSH
40735: LD_INT 2
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 1
40744: NEG
40745: PUSH
40746: LD_INT 1
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: LIST
40757: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40758: LD_ADDR_VAR 0 63
40762: PUSH
40763: LD_INT 1
40765: NEG
40766: PUSH
40767: LD_INT 1
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 2
40776: NEG
40777: PUSH
40778: LD_INT 0
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 2
40787: NEG
40788: PUSH
40789: LD_INT 1
40791: NEG
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: LIST
40801: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40802: LD_ADDR_VAR 0 64
40806: PUSH
40807: LD_INT 1
40809: NEG
40810: PUSH
40811: LD_INT 2
40813: NEG
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 2
40821: NEG
40822: PUSH
40823: LD_INT 1
40825: NEG
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 2
40833: NEG
40834: PUSH
40835: LD_INT 2
40837: NEG
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: LIST
40847: ST_TO_ADDR
// end ; 2 :
40848: GO 44114
40850: LD_INT 2
40852: DOUBLE
40853: EQUAL
40854: IFTRUE 40858
40856: GO 44113
40858: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
40859: LD_ADDR_VAR 0 29
40863: PUSH
40864: LD_INT 4
40866: PUSH
40867: LD_INT 0
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 4
40876: PUSH
40877: LD_INT 1
40879: NEG
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 5
40887: PUSH
40888: LD_INT 0
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 5
40897: PUSH
40898: LD_INT 1
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 4
40907: PUSH
40908: LD_INT 1
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 3
40917: PUSH
40918: LD_INT 0
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 3
40927: PUSH
40928: LD_INT 1
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 3
40938: PUSH
40939: LD_INT 2
40941: NEG
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 5
40949: PUSH
40950: LD_INT 2
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 3
40959: PUSH
40960: LD_INT 3
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 3
40969: PUSH
40970: LD_INT 2
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 4
40979: PUSH
40980: LD_INT 3
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 4
40989: PUSH
40990: LD_INT 4
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 3
40999: PUSH
41000: LD_INT 4
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 2
41009: PUSH
41010: LD_INT 3
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 2
41019: PUSH
41020: LD_INT 2
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 4
41029: PUSH
41030: LD_INT 2
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 2
41039: PUSH
41040: LD_INT 4
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 0
41049: PUSH
41050: LD_INT 4
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 0
41059: PUSH
41060: LD_INT 3
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 1
41069: PUSH
41070: LD_INT 4
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 1
41079: PUSH
41080: LD_INT 5
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 0
41089: PUSH
41090: LD_INT 5
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 1
41099: NEG
41100: PUSH
41101: LD_INT 4
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 1
41110: NEG
41111: PUSH
41112: LD_INT 3
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 2
41121: PUSH
41122: LD_INT 5
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 2
41131: NEG
41132: PUSH
41133: LD_INT 3
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 3
41142: NEG
41143: PUSH
41144: LD_INT 0
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 3
41153: NEG
41154: PUSH
41155: LD_INT 1
41157: NEG
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 2
41165: NEG
41166: PUSH
41167: LD_INT 0
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 2
41176: NEG
41177: PUSH
41178: LD_INT 1
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 3
41187: NEG
41188: PUSH
41189: LD_INT 1
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 4
41198: NEG
41199: PUSH
41200: LD_INT 0
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 4
41209: NEG
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 4
41221: NEG
41222: PUSH
41223: LD_INT 2
41225: NEG
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 2
41233: NEG
41234: PUSH
41235: LD_INT 2
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 4
41244: NEG
41245: PUSH
41246: LD_INT 4
41248: NEG
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 4
41256: NEG
41257: PUSH
41258: LD_INT 5
41260: NEG
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 3
41268: NEG
41269: PUSH
41270: LD_INT 4
41272: NEG
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 3
41280: NEG
41281: PUSH
41282: LD_INT 3
41284: NEG
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 4
41292: NEG
41293: PUSH
41294: LD_INT 3
41296: NEG
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 5
41304: NEG
41305: PUSH
41306: LD_INT 4
41308: NEG
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 5
41316: NEG
41317: PUSH
41318: LD_INT 5
41320: NEG
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 3
41328: NEG
41329: PUSH
41330: LD_INT 5
41332: NEG
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 5
41340: NEG
41341: PUSH
41342: LD_INT 3
41344: NEG
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
41397: LD_ADDR_VAR 0 30
41401: PUSH
41402: LD_INT 4
41404: PUSH
41405: LD_INT 4
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 4
41414: PUSH
41415: LD_INT 3
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 5
41424: PUSH
41425: LD_INT 4
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 5
41434: PUSH
41435: LD_INT 5
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 4
41444: PUSH
41445: LD_INT 5
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 3
41454: PUSH
41455: LD_INT 4
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 3
41464: PUSH
41465: LD_INT 3
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 5
41474: PUSH
41475: LD_INT 3
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 3
41484: PUSH
41485: LD_INT 5
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 0
41494: PUSH
41495: LD_INT 3
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 0
41504: PUSH
41505: LD_INT 2
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 1
41514: PUSH
41515: LD_INT 3
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 1
41524: PUSH
41525: LD_INT 4
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 0
41534: PUSH
41535: LD_INT 4
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: PUSH
41546: LD_INT 3
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: LD_INT 2
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 2
41566: PUSH
41567: LD_INT 4
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 2
41576: NEG
41577: PUSH
41578: LD_INT 2
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 4
41587: NEG
41588: PUSH
41589: LD_INT 0
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 4
41598: NEG
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 3
41610: NEG
41611: PUSH
41612: LD_INT 0
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 3
41621: NEG
41622: PUSH
41623: LD_INT 1
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 4
41632: NEG
41633: PUSH
41634: LD_INT 1
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 5
41643: NEG
41644: PUSH
41645: LD_INT 0
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 5
41654: NEG
41655: PUSH
41656: LD_INT 1
41658: NEG
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 5
41666: NEG
41667: PUSH
41668: LD_INT 2
41670: NEG
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 3
41678: NEG
41679: PUSH
41680: LD_INT 2
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 3
41689: NEG
41690: PUSH
41691: LD_INT 3
41693: NEG
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 3
41701: NEG
41702: PUSH
41703: LD_INT 4
41705: NEG
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 2
41713: NEG
41714: PUSH
41715: LD_INT 3
41717: NEG
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 2
41725: NEG
41726: PUSH
41727: LD_INT 2
41729: NEG
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 3
41737: NEG
41738: PUSH
41739: LD_INT 2
41741: NEG
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 4
41749: NEG
41750: PUSH
41751: LD_INT 3
41753: NEG
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 4
41761: NEG
41762: PUSH
41763: LD_INT 4
41765: NEG
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 2
41773: NEG
41774: PUSH
41775: LD_INT 4
41777: NEG
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 4
41785: NEG
41786: PUSH
41787: LD_INT 2
41789: NEG
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: LD_INT 4
41800: NEG
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: LD_INT 5
41811: NEG
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 1
41819: PUSH
41820: LD_INT 4
41822: NEG
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 1
41830: PUSH
41831: LD_INT 3
41833: NEG
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 0
41841: PUSH
41842: LD_INT 3
41844: NEG
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 1
41852: NEG
41853: PUSH
41854: LD_INT 4
41856: NEG
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 1
41864: NEG
41865: PUSH
41866: LD_INT 5
41868: NEG
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 2
41876: PUSH
41877: LD_INT 3
41879: NEG
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 2
41887: NEG
41888: PUSH
41889: LD_INT 5
41891: NEG
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
41944: LD_ADDR_VAR 0 31
41948: PUSH
41949: LD_INT 0
41951: PUSH
41952: LD_INT 4
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 0
41961: PUSH
41962: LD_INT 3
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 1
41971: PUSH
41972: LD_INT 4
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 1
41981: PUSH
41982: LD_INT 5
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: LD_INT 5
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 1
42001: NEG
42002: PUSH
42003: LD_INT 4
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 1
42012: NEG
42013: PUSH
42014: LD_INT 3
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 2
42023: PUSH
42024: LD_INT 5
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 2
42033: NEG
42034: PUSH
42035: LD_INT 3
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 3
42044: NEG
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 3
42055: NEG
42056: PUSH
42057: LD_INT 1
42059: NEG
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 2
42067: NEG
42068: PUSH
42069: LD_INT 0
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 2
42078: NEG
42079: PUSH
42080: LD_INT 1
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 3
42089: NEG
42090: PUSH
42091: LD_INT 1
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 4
42100: NEG
42101: PUSH
42102: LD_INT 0
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 4
42111: NEG
42112: PUSH
42113: LD_INT 1
42115: NEG
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 4
42123: NEG
42124: PUSH
42125: LD_INT 2
42127: NEG
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 2
42135: NEG
42136: PUSH
42137: LD_INT 2
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 4
42146: NEG
42147: PUSH
42148: LD_INT 4
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 4
42158: NEG
42159: PUSH
42160: LD_INT 5
42162: NEG
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 3
42170: NEG
42171: PUSH
42172: LD_INT 4
42174: NEG
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 3
42182: NEG
42183: PUSH
42184: LD_INT 3
42186: NEG
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 4
42194: NEG
42195: PUSH
42196: LD_INT 3
42198: NEG
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 5
42206: NEG
42207: PUSH
42208: LD_INT 4
42210: NEG
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 5
42218: NEG
42219: PUSH
42220: LD_INT 5
42222: NEG
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 3
42230: NEG
42231: PUSH
42232: LD_INT 5
42234: NEG
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 5
42242: NEG
42243: PUSH
42244: LD_INT 3
42246: NEG
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 0
42254: PUSH
42255: LD_INT 3
42257: NEG
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 0
42265: PUSH
42266: LD_INT 4
42268: NEG
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 1
42276: PUSH
42277: LD_INT 3
42279: NEG
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 1
42287: PUSH
42288: LD_INT 2
42290: NEG
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 0
42298: PUSH
42299: LD_INT 2
42301: NEG
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 1
42309: NEG
42310: PUSH
42311: LD_INT 3
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 1
42321: NEG
42322: PUSH
42323: LD_INT 4
42325: NEG
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 2
42333: PUSH
42334: LD_INT 2
42336: NEG
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 2
42344: NEG
42345: PUSH
42346: LD_INT 4
42348: NEG
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 4
42356: PUSH
42357: LD_INT 0
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 4
42366: PUSH
42367: LD_INT 1
42369: NEG
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 5
42377: PUSH
42378: LD_INT 0
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 5
42387: PUSH
42388: LD_INT 1
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 4
42397: PUSH
42398: LD_INT 1
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 3
42407: PUSH
42408: LD_INT 0
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 3
42417: PUSH
42418: LD_INT 1
42420: NEG
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 3
42428: PUSH
42429: LD_INT 2
42431: NEG
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 5
42439: PUSH
42440: LD_INT 2
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42494: LD_ADDR_VAR 0 32
42498: PUSH
42499: LD_INT 4
42501: NEG
42502: PUSH
42503: LD_INT 0
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 4
42512: NEG
42513: PUSH
42514: LD_INT 1
42516: NEG
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 3
42524: NEG
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 3
42535: NEG
42536: PUSH
42537: LD_INT 1
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 4
42546: NEG
42547: PUSH
42548: LD_INT 1
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 5
42557: NEG
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 5
42568: NEG
42569: PUSH
42570: LD_INT 1
42572: NEG
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 5
42580: NEG
42581: PUSH
42582: LD_INT 2
42584: NEG
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 3
42592: NEG
42593: PUSH
42594: LD_INT 2
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 3
42603: NEG
42604: PUSH
42605: LD_INT 3
42607: NEG
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 3
42615: NEG
42616: PUSH
42617: LD_INT 4
42619: NEG
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 2
42627: NEG
42628: PUSH
42629: LD_INT 3
42631: NEG
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 2
42639: NEG
42640: PUSH
42641: LD_INT 2
42643: NEG
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 3
42651: NEG
42652: PUSH
42653: LD_INT 2
42655: NEG
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 4
42663: NEG
42664: PUSH
42665: LD_INT 3
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 4
42675: NEG
42676: PUSH
42677: LD_INT 4
42679: NEG
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 2
42687: NEG
42688: PUSH
42689: LD_INT 4
42691: NEG
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 4
42699: NEG
42700: PUSH
42701: LD_INT 2
42703: NEG
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 0
42711: PUSH
42712: LD_INT 4
42714: NEG
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: LD_INT 5
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 1
42733: PUSH
42734: LD_INT 4
42736: NEG
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 1
42744: PUSH
42745: LD_INT 3
42747: NEG
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 0
42755: PUSH
42756: LD_INT 3
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 1
42766: NEG
42767: PUSH
42768: LD_INT 4
42770: NEG
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 1
42778: NEG
42779: PUSH
42780: LD_INT 5
42782: NEG
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 2
42790: PUSH
42791: LD_INT 3
42793: NEG
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 2
42801: NEG
42802: PUSH
42803: LD_INT 5
42805: NEG
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 3
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 3
42823: PUSH
42824: LD_INT 1
42826: NEG
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 4
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 4
42844: PUSH
42845: LD_INT 1
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 3
42854: PUSH
42855: LD_INT 1
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 2
42864: PUSH
42865: LD_INT 0
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 2
42874: PUSH
42875: LD_INT 1
42877: NEG
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 2
42885: PUSH
42886: LD_INT 2
42888: NEG
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 4
42896: PUSH
42897: LD_INT 2
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 4
42906: PUSH
42907: LD_INT 4
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 4
42916: PUSH
42917: LD_INT 3
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 5
42926: PUSH
42927: LD_INT 4
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 5
42936: PUSH
42937: LD_INT 5
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 4
42946: PUSH
42947: LD_INT 5
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 3
42956: PUSH
42957: LD_INT 4
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 3
42966: PUSH
42967: LD_INT 3
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 5
42976: PUSH
42977: LD_INT 3
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 3
42986: PUSH
42987: LD_INT 5
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
43041: LD_ADDR_VAR 0 33
43045: PUSH
43046: LD_INT 4
43048: NEG
43049: PUSH
43050: LD_INT 4
43052: NEG
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 4
43060: NEG
43061: PUSH
43062: LD_INT 5
43064: NEG
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 3
43072: NEG
43073: PUSH
43074: LD_INT 4
43076: NEG
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 3
43084: NEG
43085: PUSH
43086: LD_INT 3
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 4
43096: NEG
43097: PUSH
43098: LD_INT 3
43100: NEG
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 5
43108: NEG
43109: PUSH
43110: LD_INT 4
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 5
43120: NEG
43121: PUSH
43122: LD_INT 5
43124: NEG
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 3
43132: NEG
43133: PUSH
43134: LD_INT 5
43136: NEG
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 5
43144: NEG
43145: PUSH
43146: LD_INT 3
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 0
43156: PUSH
43157: LD_INT 3
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 0
43167: PUSH
43168: LD_INT 4
43170: NEG
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 1
43178: PUSH
43179: LD_INT 3
43181: NEG
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 1
43189: PUSH
43190: LD_INT 2
43192: NEG
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 0
43200: PUSH
43201: LD_INT 2
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 1
43211: NEG
43212: PUSH
43213: LD_INT 3
43215: NEG
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 1
43223: NEG
43224: PUSH
43225: LD_INT 4
43227: NEG
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 2
43235: PUSH
43236: LD_INT 2
43238: NEG
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 2
43246: NEG
43247: PUSH
43248: LD_INT 4
43250: NEG
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 4
43258: PUSH
43259: LD_INT 0
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 4
43268: PUSH
43269: LD_INT 1
43271: NEG
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 5
43279: PUSH
43280: LD_INT 0
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 5
43289: PUSH
43290: LD_INT 1
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 4
43299: PUSH
43300: LD_INT 1
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 3
43309: PUSH
43310: LD_INT 0
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 3
43319: PUSH
43320: LD_INT 1
43322: NEG
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 3
43330: PUSH
43331: LD_INT 2
43333: NEG
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 5
43341: PUSH
43342: LD_INT 2
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 3
43351: PUSH
43352: LD_INT 3
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 3
43361: PUSH
43362: LD_INT 2
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 4
43371: PUSH
43372: LD_INT 3
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 4
43381: PUSH
43382: LD_INT 4
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 3
43391: PUSH
43392: LD_INT 4
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 2
43401: PUSH
43402: LD_INT 3
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 2
43411: PUSH
43412: LD_INT 2
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 4
43421: PUSH
43422: LD_INT 2
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 2
43431: PUSH
43432: LD_INT 4
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: LD_INT 4
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 0
43451: PUSH
43452: LD_INT 3
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 1
43461: PUSH
43462: LD_INT 4
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 1
43471: PUSH
43472: LD_INT 5
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 0
43481: PUSH
43482: LD_INT 5
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 1
43491: NEG
43492: PUSH
43493: LD_INT 4
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 1
43502: NEG
43503: PUSH
43504: LD_INT 3
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 2
43513: PUSH
43514: LD_INT 5
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 2
43523: NEG
43524: PUSH
43525: LD_INT 3
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43579: LD_ADDR_VAR 0 34
43583: PUSH
43584: LD_INT 0
43586: PUSH
43587: LD_INT 4
43589: NEG
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: LD_INT 5
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 1
43608: PUSH
43609: LD_INT 4
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: LD_INT 3
43622: NEG
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 0
43630: PUSH
43631: LD_INT 3
43633: NEG
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: LD_INT 4
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 1
43653: NEG
43654: PUSH
43655: LD_INT 5
43657: NEG
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 2
43665: PUSH
43666: LD_INT 3
43668: NEG
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 2
43676: NEG
43677: PUSH
43678: LD_INT 5
43680: NEG
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 3
43688: PUSH
43689: LD_INT 0
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 3
43698: PUSH
43699: LD_INT 1
43701: NEG
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 4
43709: PUSH
43710: LD_INT 0
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 4
43719: PUSH
43720: LD_INT 1
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 3
43729: PUSH
43730: LD_INT 1
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 2
43739: PUSH
43740: LD_INT 0
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 2
43749: PUSH
43750: LD_INT 1
43752: NEG
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 2
43760: PUSH
43761: LD_INT 2
43763: NEG
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 4
43771: PUSH
43772: LD_INT 2
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 4
43781: PUSH
43782: LD_INT 4
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 4
43791: PUSH
43792: LD_INT 3
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 5
43801: PUSH
43802: LD_INT 4
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 5
43811: PUSH
43812: LD_INT 5
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 4
43821: PUSH
43822: LD_INT 5
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 3
43831: PUSH
43832: LD_INT 4
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 3
43841: PUSH
43842: LD_INT 3
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 5
43851: PUSH
43852: LD_INT 3
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 3
43861: PUSH
43862: LD_INT 5
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: LD_INT 3
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 0
43881: PUSH
43882: LD_INT 2
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 1
43891: PUSH
43892: LD_INT 3
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 1
43901: PUSH
43902: LD_INT 4
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 0
43911: PUSH
43912: LD_INT 4
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 1
43921: NEG
43922: PUSH
43923: LD_INT 3
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 1
43932: NEG
43933: PUSH
43934: LD_INT 2
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 2
43943: PUSH
43944: LD_INT 4
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 2
43953: NEG
43954: PUSH
43955: LD_INT 2
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 4
43964: NEG
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 4
43975: NEG
43976: PUSH
43977: LD_INT 1
43979: NEG
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 3
43987: NEG
43988: PUSH
43989: LD_INT 0
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 3
43998: NEG
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 4
44009: NEG
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 5
44020: NEG
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 5
44031: NEG
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 5
44043: NEG
44044: PUSH
44045: LD_INT 2
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 3
44055: NEG
44056: PUSH
44057: LD_INT 2
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: ST_TO_ADDR
// end ; end ;
44111: GO 44114
44113: POP
// case btype of b_depot , b_warehouse :
44114: LD_VAR 0 1
44118: PUSH
44119: LD_INT 0
44121: DOUBLE
44122: EQUAL
44123: IFTRUE 44133
44125: LD_INT 1
44127: DOUBLE
44128: EQUAL
44129: IFTRUE 44133
44131: GO 44334
44133: POP
// case nation of nation_american :
44134: LD_VAR 0 5
44138: PUSH
44139: LD_INT 1
44141: DOUBLE
44142: EQUAL
44143: IFTRUE 44147
44145: GO 44203
44147: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
44148: LD_ADDR_VAR 0 9
44152: PUSH
44153: LD_VAR 0 11
44157: PUSH
44158: LD_VAR 0 12
44162: PUSH
44163: LD_VAR 0 13
44167: PUSH
44168: LD_VAR 0 14
44172: PUSH
44173: LD_VAR 0 15
44177: PUSH
44178: LD_VAR 0 16
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: PUSH
44191: LD_VAR 0 4
44195: PUSH
44196: LD_INT 1
44198: PLUS
44199: ARRAY
44200: ST_TO_ADDR
44201: GO 44332
44203: LD_INT 2
44205: DOUBLE
44206: EQUAL
44207: IFTRUE 44211
44209: GO 44267
44211: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
44212: LD_ADDR_VAR 0 9
44216: PUSH
44217: LD_VAR 0 17
44221: PUSH
44222: LD_VAR 0 18
44226: PUSH
44227: LD_VAR 0 19
44231: PUSH
44232: LD_VAR 0 20
44236: PUSH
44237: LD_VAR 0 21
44241: PUSH
44242: LD_VAR 0 22
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: PUSH
44255: LD_VAR 0 4
44259: PUSH
44260: LD_INT 1
44262: PLUS
44263: ARRAY
44264: ST_TO_ADDR
44265: GO 44332
44267: LD_INT 3
44269: DOUBLE
44270: EQUAL
44271: IFTRUE 44275
44273: GO 44331
44275: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
44276: LD_ADDR_VAR 0 9
44280: PUSH
44281: LD_VAR 0 23
44285: PUSH
44286: LD_VAR 0 24
44290: PUSH
44291: LD_VAR 0 25
44295: PUSH
44296: LD_VAR 0 26
44300: PUSH
44301: LD_VAR 0 27
44305: PUSH
44306: LD_VAR 0 28
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: PUSH
44319: LD_VAR 0 4
44323: PUSH
44324: LD_INT 1
44326: PLUS
44327: ARRAY
44328: ST_TO_ADDR
44329: GO 44332
44331: POP
44332: GO 44887
44334: LD_INT 2
44336: DOUBLE
44337: EQUAL
44338: IFTRUE 44348
44340: LD_INT 3
44342: DOUBLE
44343: EQUAL
44344: IFTRUE 44348
44346: GO 44404
44348: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
44349: LD_ADDR_VAR 0 9
44353: PUSH
44354: LD_VAR 0 29
44358: PUSH
44359: LD_VAR 0 30
44363: PUSH
44364: LD_VAR 0 31
44368: PUSH
44369: LD_VAR 0 32
44373: PUSH
44374: LD_VAR 0 33
44378: PUSH
44379: LD_VAR 0 34
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: PUSH
44392: LD_VAR 0 4
44396: PUSH
44397: LD_INT 1
44399: PLUS
44400: ARRAY
44401: ST_TO_ADDR
44402: GO 44887
44404: LD_INT 16
44406: DOUBLE
44407: EQUAL
44408: IFTRUE 44466
44410: LD_INT 17
44412: DOUBLE
44413: EQUAL
44414: IFTRUE 44466
44416: LD_INT 18
44418: DOUBLE
44419: EQUAL
44420: IFTRUE 44466
44422: LD_INT 19
44424: DOUBLE
44425: EQUAL
44426: IFTRUE 44466
44428: LD_INT 22
44430: DOUBLE
44431: EQUAL
44432: IFTRUE 44466
44434: LD_INT 20
44436: DOUBLE
44437: EQUAL
44438: IFTRUE 44466
44440: LD_INT 21
44442: DOUBLE
44443: EQUAL
44444: IFTRUE 44466
44446: LD_INT 23
44448: DOUBLE
44449: EQUAL
44450: IFTRUE 44466
44452: LD_INT 24
44454: DOUBLE
44455: EQUAL
44456: IFTRUE 44466
44458: LD_INT 25
44460: DOUBLE
44461: EQUAL
44462: IFTRUE 44466
44464: GO 44522
44466: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
44467: LD_ADDR_VAR 0 9
44471: PUSH
44472: LD_VAR 0 35
44476: PUSH
44477: LD_VAR 0 36
44481: PUSH
44482: LD_VAR 0 37
44486: PUSH
44487: LD_VAR 0 38
44491: PUSH
44492: LD_VAR 0 39
44496: PUSH
44497: LD_VAR 0 40
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: PUSH
44510: LD_VAR 0 4
44514: PUSH
44515: LD_INT 1
44517: PLUS
44518: ARRAY
44519: ST_TO_ADDR
44520: GO 44887
44522: LD_INT 6
44524: DOUBLE
44525: EQUAL
44526: IFTRUE 44578
44528: LD_INT 7
44530: DOUBLE
44531: EQUAL
44532: IFTRUE 44578
44534: LD_INT 8
44536: DOUBLE
44537: EQUAL
44538: IFTRUE 44578
44540: LD_INT 13
44542: DOUBLE
44543: EQUAL
44544: IFTRUE 44578
44546: LD_INT 12
44548: DOUBLE
44549: EQUAL
44550: IFTRUE 44578
44552: LD_INT 15
44554: DOUBLE
44555: EQUAL
44556: IFTRUE 44578
44558: LD_INT 11
44560: DOUBLE
44561: EQUAL
44562: IFTRUE 44578
44564: LD_INT 14
44566: DOUBLE
44567: EQUAL
44568: IFTRUE 44578
44570: LD_INT 10
44572: DOUBLE
44573: EQUAL
44574: IFTRUE 44578
44576: GO 44634
44578: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
44579: LD_ADDR_VAR 0 9
44583: PUSH
44584: LD_VAR 0 41
44588: PUSH
44589: LD_VAR 0 42
44593: PUSH
44594: LD_VAR 0 43
44598: PUSH
44599: LD_VAR 0 44
44603: PUSH
44604: LD_VAR 0 45
44608: PUSH
44609: LD_VAR 0 46
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: PUSH
44622: LD_VAR 0 4
44626: PUSH
44627: LD_INT 1
44629: PLUS
44630: ARRAY
44631: ST_TO_ADDR
44632: GO 44887
44634: LD_INT 36
44636: DOUBLE
44637: EQUAL
44638: IFTRUE 44642
44640: GO 44698
44642: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44643: LD_ADDR_VAR 0 9
44647: PUSH
44648: LD_VAR 0 47
44652: PUSH
44653: LD_VAR 0 48
44657: PUSH
44658: LD_VAR 0 49
44662: PUSH
44663: LD_VAR 0 50
44667: PUSH
44668: LD_VAR 0 51
44672: PUSH
44673: LD_VAR 0 52
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: PUSH
44686: LD_VAR 0 4
44690: PUSH
44691: LD_INT 1
44693: PLUS
44694: ARRAY
44695: ST_TO_ADDR
44696: GO 44887
44698: LD_INT 4
44700: DOUBLE
44701: EQUAL
44702: IFTRUE 44724
44704: LD_INT 5
44706: DOUBLE
44707: EQUAL
44708: IFTRUE 44724
44710: LD_INT 34
44712: DOUBLE
44713: EQUAL
44714: IFTRUE 44724
44716: LD_INT 37
44718: DOUBLE
44719: EQUAL
44720: IFTRUE 44724
44722: GO 44780
44724: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
44725: LD_ADDR_VAR 0 9
44729: PUSH
44730: LD_VAR 0 53
44734: PUSH
44735: LD_VAR 0 54
44739: PUSH
44740: LD_VAR 0 55
44744: PUSH
44745: LD_VAR 0 56
44749: PUSH
44750: LD_VAR 0 57
44754: PUSH
44755: LD_VAR 0 58
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: PUSH
44768: LD_VAR 0 4
44772: PUSH
44773: LD_INT 1
44775: PLUS
44776: ARRAY
44777: ST_TO_ADDR
44778: GO 44887
44780: LD_INT 31
44782: DOUBLE
44783: EQUAL
44784: IFTRUE 44830
44786: LD_INT 32
44788: DOUBLE
44789: EQUAL
44790: IFTRUE 44830
44792: LD_INT 33
44794: DOUBLE
44795: EQUAL
44796: IFTRUE 44830
44798: LD_INT 27
44800: DOUBLE
44801: EQUAL
44802: IFTRUE 44830
44804: LD_INT 26
44806: DOUBLE
44807: EQUAL
44808: IFTRUE 44830
44810: LD_INT 28
44812: DOUBLE
44813: EQUAL
44814: IFTRUE 44830
44816: LD_INT 29
44818: DOUBLE
44819: EQUAL
44820: IFTRUE 44830
44822: LD_INT 30
44824: DOUBLE
44825: EQUAL
44826: IFTRUE 44830
44828: GO 44886
44830: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
44831: LD_ADDR_VAR 0 9
44835: PUSH
44836: LD_VAR 0 59
44840: PUSH
44841: LD_VAR 0 60
44845: PUSH
44846: LD_VAR 0 61
44850: PUSH
44851: LD_VAR 0 62
44855: PUSH
44856: LD_VAR 0 63
44860: PUSH
44861: LD_VAR 0 64
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: PUSH
44874: LD_VAR 0 4
44878: PUSH
44879: LD_INT 1
44881: PLUS
44882: ARRAY
44883: ST_TO_ADDR
44884: GO 44887
44886: POP
// temp_list2 = [ ] ;
44887: LD_ADDR_VAR 0 10
44891: PUSH
44892: EMPTY
44893: ST_TO_ADDR
// for i in temp_list do
44894: LD_ADDR_VAR 0 8
44898: PUSH
44899: LD_VAR 0 9
44903: PUSH
44904: FOR_IN
44905: IFFALSE 44957
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
44907: LD_ADDR_VAR 0 10
44911: PUSH
44912: LD_VAR 0 10
44916: PUSH
44917: LD_VAR 0 8
44921: PUSH
44922: LD_INT 1
44924: ARRAY
44925: PUSH
44926: LD_VAR 0 2
44930: PLUS
44931: PUSH
44932: LD_VAR 0 8
44936: PUSH
44937: LD_INT 2
44939: ARRAY
44940: PUSH
44941: LD_VAR 0 3
44945: PLUS
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: EMPTY
44952: LIST
44953: ADD
44954: ST_TO_ADDR
44955: GO 44904
44957: POP
44958: POP
// result = temp_list2 ;
44959: LD_ADDR_VAR 0 7
44963: PUSH
44964: LD_VAR 0 10
44968: ST_TO_ADDR
// end ;
44969: LD_VAR 0 7
44973: RET
// export function EnemyInRange ( unit , dist ) ; begin
44974: LD_INT 0
44976: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
44977: LD_ADDR_VAR 0 3
44981: PUSH
44982: LD_VAR 0 1
44986: PPUSH
44987: CALL_OW 255
44991: PPUSH
44992: LD_VAR 0 1
44996: PPUSH
44997: CALL_OW 250
45001: PPUSH
45002: LD_VAR 0 1
45006: PPUSH
45007: CALL_OW 251
45011: PPUSH
45012: LD_VAR 0 2
45016: PPUSH
45017: CALL 19078 0 4
45021: PUSH
45022: LD_INT 4
45024: ARRAY
45025: ST_TO_ADDR
// end ;
45026: LD_VAR 0 3
45030: RET
// export function PlayerSeeMe ( unit ) ; begin
45031: LD_INT 0
45033: PPUSH
// result := See ( your_side , unit ) ;
45034: LD_ADDR_VAR 0 2
45038: PUSH
45039: LD_OWVAR 2
45043: PPUSH
45044: LD_VAR 0 1
45048: PPUSH
45049: CALL_OW 292
45053: ST_TO_ADDR
// end ;
45054: LD_VAR 0 2
45058: RET
// export function ReverseDir ( unit ) ; begin
45059: LD_INT 0
45061: PPUSH
// if not unit then
45062: LD_VAR 0 1
45066: NOT
45067: IFFALSE 45071
// exit ;
45069: GO 45117
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
45071: LD_ADDR_VAR 0 2
45075: PUSH
45076: LD_INT 3
45078: PUSH
45079: LD_INT 4
45081: PUSH
45082: LD_INT 5
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: LD_INT 1
45090: PUSH
45091: LD_INT 2
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: PUSH
45102: LD_VAR 0 1
45106: PPUSH
45107: CALL_OW 254
45111: PUSH
45112: LD_INT 1
45114: PLUS
45115: ARRAY
45116: ST_TO_ADDR
// end ;
45117: LD_VAR 0 2
45121: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
45122: LD_INT 0
45124: PPUSH
45125: PPUSH
45126: PPUSH
45127: PPUSH
45128: PPUSH
// if not hexes then
45129: LD_VAR 0 2
45133: NOT
45134: IFFALSE 45138
// exit ;
45136: GO 45286
// dist := 9999 ;
45138: LD_ADDR_VAR 0 5
45142: PUSH
45143: LD_INT 9999
45145: ST_TO_ADDR
// for i = 1 to hexes do
45146: LD_ADDR_VAR 0 4
45150: PUSH
45151: DOUBLE
45152: LD_INT 1
45154: DEC
45155: ST_TO_ADDR
45156: LD_VAR 0 2
45160: PUSH
45161: FOR_TO
45162: IFFALSE 45274
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
45164: LD_VAR 0 1
45168: PPUSH
45169: LD_VAR 0 2
45173: PUSH
45174: LD_VAR 0 4
45178: ARRAY
45179: PUSH
45180: LD_INT 1
45182: ARRAY
45183: PPUSH
45184: LD_VAR 0 2
45188: PUSH
45189: LD_VAR 0 4
45193: ARRAY
45194: PUSH
45195: LD_INT 2
45197: ARRAY
45198: PPUSH
45199: CALL_OW 297
45203: PUSH
45204: LD_VAR 0 5
45208: LESS
45209: IFFALSE 45272
// begin hex := hexes [ i ] ;
45211: LD_ADDR_VAR 0 7
45215: PUSH
45216: LD_VAR 0 2
45220: PUSH
45221: LD_VAR 0 4
45225: ARRAY
45226: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45227: LD_ADDR_VAR 0 5
45231: PUSH
45232: LD_VAR 0 1
45236: PPUSH
45237: LD_VAR 0 2
45241: PUSH
45242: LD_VAR 0 4
45246: ARRAY
45247: PUSH
45248: LD_INT 1
45250: ARRAY
45251: PPUSH
45252: LD_VAR 0 2
45256: PUSH
45257: LD_VAR 0 4
45261: ARRAY
45262: PUSH
45263: LD_INT 2
45265: ARRAY
45266: PPUSH
45267: CALL_OW 297
45271: ST_TO_ADDR
// end ; end ;
45272: GO 45161
45274: POP
45275: POP
// result := hex ;
45276: LD_ADDR_VAR 0 3
45280: PUSH
45281: LD_VAR 0 7
45285: ST_TO_ADDR
// end ;
45286: LD_VAR 0 3
45290: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
45291: LD_INT 0
45293: PPUSH
45294: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
45295: LD_VAR 0 1
45299: NOT
45300: PUSH
45301: LD_VAR 0 1
45305: PUSH
45306: LD_INT 21
45308: PUSH
45309: LD_INT 2
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 23
45318: PUSH
45319: LD_INT 2
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PPUSH
45330: CALL_OW 69
45334: IN
45335: NOT
45336: OR
45337: IFFALSE 45341
// exit ;
45339: GO 45388
// for i = 1 to 3 do
45341: LD_ADDR_VAR 0 3
45345: PUSH
45346: DOUBLE
45347: LD_INT 1
45349: DEC
45350: ST_TO_ADDR
45351: LD_INT 3
45353: PUSH
45354: FOR_TO
45355: IFFALSE 45386
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
45357: LD_VAR 0 1
45361: PPUSH
45362: CALL_OW 250
45366: PPUSH
45367: LD_VAR 0 1
45371: PPUSH
45372: CALL_OW 251
45376: PPUSH
45377: LD_INT 1
45379: PPUSH
45380: CALL_OW 453
45384: GO 45354
45386: POP
45387: POP
// end ;
45388: LD_VAR 0 2
45392: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
45393: LD_INT 0
45395: PPUSH
45396: PPUSH
45397: PPUSH
45398: PPUSH
45399: PPUSH
45400: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
45401: LD_VAR 0 1
45405: NOT
45406: PUSH
45407: LD_VAR 0 2
45411: NOT
45412: OR
45413: PUSH
45414: LD_VAR 0 1
45418: PPUSH
45419: CALL_OW 314
45423: OR
45424: IFFALSE 45428
// exit ;
45426: GO 45869
// x := GetX ( enemy_unit ) ;
45428: LD_ADDR_VAR 0 7
45432: PUSH
45433: LD_VAR 0 2
45437: PPUSH
45438: CALL_OW 250
45442: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
45443: LD_ADDR_VAR 0 8
45447: PUSH
45448: LD_VAR 0 2
45452: PPUSH
45453: CALL_OW 251
45457: ST_TO_ADDR
// if not x or not y then
45458: LD_VAR 0 7
45462: NOT
45463: PUSH
45464: LD_VAR 0 8
45468: NOT
45469: OR
45470: IFFALSE 45474
// exit ;
45472: GO 45869
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45474: LD_ADDR_VAR 0 6
45478: PUSH
45479: LD_VAR 0 7
45483: PPUSH
45484: LD_INT 0
45486: PPUSH
45487: LD_INT 4
45489: PPUSH
45490: CALL_OW 272
45494: PUSH
45495: LD_VAR 0 8
45499: PPUSH
45500: LD_INT 0
45502: PPUSH
45503: LD_INT 4
45505: PPUSH
45506: CALL_OW 273
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_VAR 0 7
45519: PPUSH
45520: LD_INT 1
45522: PPUSH
45523: LD_INT 4
45525: PPUSH
45526: CALL_OW 272
45530: PUSH
45531: LD_VAR 0 8
45535: PPUSH
45536: LD_INT 1
45538: PPUSH
45539: LD_INT 4
45541: PPUSH
45542: CALL_OW 273
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_VAR 0 7
45555: PPUSH
45556: LD_INT 2
45558: PPUSH
45559: LD_INT 4
45561: PPUSH
45562: CALL_OW 272
45566: PUSH
45567: LD_VAR 0 8
45571: PPUSH
45572: LD_INT 2
45574: PPUSH
45575: LD_INT 4
45577: PPUSH
45578: CALL_OW 273
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_VAR 0 7
45591: PPUSH
45592: LD_INT 3
45594: PPUSH
45595: LD_INT 4
45597: PPUSH
45598: CALL_OW 272
45602: PUSH
45603: LD_VAR 0 8
45607: PPUSH
45608: LD_INT 3
45610: PPUSH
45611: LD_INT 4
45613: PPUSH
45614: CALL_OW 273
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_VAR 0 7
45627: PPUSH
45628: LD_INT 4
45630: PPUSH
45631: LD_INT 4
45633: PPUSH
45634: CALL_OW 272
45638: PUSH
45639: LD_VAR 0 8
45643: PPUSH
45644: LD_INT 4
45646: PPUSH
45647: LD_INT 4
45649: PPUSH
45650: CALL_OW 273
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_VAR 0 7
45663: PPUSH
45664: LD_INT 5
45666: PPUSH
45667: LD_INT 4
45669: PPUSH
45670: CALL_OW 272
45674: PUSH
45675: LD_VAR 0 8
45679: PPUSH
45680: LD_INT 5
45682: PPUSH
45683: LD_INT 4
45685: PPUSH
45686: CALL_OW 273
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: ST_TO_ADDR
// for i = tmp downto 1 do
45703: LD_ADDR_VAR 0 4
45707: PUSH
45708: DOUBLE
45709: LD_VAR 0 6
45713: INC
45714: ST_TO_ADDR
45715: LD_INT 1
45717: PUSH
45718: FOR_DOWNTO
45719: IFFALSE 45820
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
45721: LD_VAR 0 6
45725: PUSH
45726: LD_VAR 0 4
45730: ARRAY
45731: PUSH
45732: LD_INT 1
45734: ARRAY
45735: PPUSH
45736: LD_VAR 0 6
45740: PUSH
45741: LD_VAR 0 4
45745: ARRAY
45746: PUSH
45747: LD_INT 2
45749: ARRAY
45750: PPUSH
45751: CALL_OW 488
45755: NOT
45756: PUSH
45757: LD_VAR 0 6
45761: PUSH
45762: LD_VAR 0 4
45766: ARRAY
45767: PUSH
45768: LD_INT 1
45770: ARRAY
45771: PPUSH
45772: LD_VAR 0 6
45776: PUSH
45777: LD_VAR 0 4
45781: ARRAY
45782: PUSH
45783: LD_INT 2
45785: ARRAY
45786: PPUSH
45787: CALL_OW 428
45791: PUSH
45792: LD_INT 0
45794: NONEQUAL
45795: OR
45796: IFFALSE 45818
// tmp := Delete ( tmp , i ) ;
45798: LD_ADDR_VAR 0 6
45802: PUSH
45803: LD_VAR 0 6
45807: PPUSH
45808: LD_VAR 0 4
45812: PPUSH
45813: CALL_OW 3
45817: ST_TO_ADDR
45818: GO 45718
45820: POP
45821: POP
// j := GetClosestHex ( unit , tmp ) ;
45822: LD_ADDR_VAR 0 5
45826: PUSH
45827: LD_VAR 0 1
45831: PPUSH
45832: LD_VAR 0 6
45836: PPUSH
45837: CALL 45122 0 2
45841: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
45842: LD_VAR 0 1
45846: PPUSH
45847: LD_VAR 0 5
45851: PUSH
45852: LD_INT 1
45854: ARRAY
45855: PPUSH
45856: LD_VAR 0 5
45860: PUSH
45861: LD_INT 2
45863: ARRAY
45864: PPUSH
45865: CALL_OW 111
// end ;
45869: LD_VAR 0 3
45873: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
45874: LD_INT 0
45876: PPUSH
45877: PPUSH
45878: PPUSH
// uc_side = 0 ;
45879: LD_ADDR_OWVAR 20
45883: PUSH
45884: LD_INT 0
45886: ST_TO_ADDR
// uc_nation = 0 ;
45887: LD_ADDR_OWVAR 21
45891: PUSH
45892: LD_INT 0
45894: ST_TO_ADDR
// InitHc ;
45895: CALL_OW 19
// InitVc ;
45899: CALL_OW 20
// if mastodonts then
45903: LD_VAR 0 6
45907: IFFALSE 45974
// for i = 1 to mastodonts do
45909: LD_ADDR_VAR 0 11
45913: PUSH
45914: DOUBLE
45915: LD_INT 1
45917: DEC
45918: ST_TO_ADDR
45919: LD_VAR 0 6
45923: PUSH
45924: FOR_TO
45925: IFFALSE 45972
// begin vc_chassis := 31 ;
45927: LD_ADDR_OWVAR 37
45931: PUSH
45932: LD_INT 31
45934: ST_TO_ADDR
// vc_control := control_rider ;
45935: LD_ADDR_OWVAR 38
45939: PUSH
45940: LD_INT 4
45942: ST_TO_ADDR
// animal := CreateVehicle ;
45943: LD_ADDR_VAR 0 12
45947: PUSH
45948: CALL_OW 45
45952: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45953: LD_VAR 0 12
45957: PPUSH
45958: LD_VAR 0 8
45962: PPUSH
45963: LD_INT 0
45965: PPUSH
45966: CALL 52719 0 3
// end ;
45970: GO 45924
45972: POP
45973: POP
// if horses then
45974: LD_VAR 0 5
45978: IFFALSE 46045
// for i = 1 to horses do
45980: LD_ADDR_VAR 0 11
45984: PUSH
45985: DOUBLE
45986: LD_INT 1
45988: DEC
45989: ST_TO_ADDR
45990: LD_VAR 0 5
45994: PUSH
45995: FOR_TO
45996: IFFALSE 46043
// begin hc_class := 21 ;
45998: LD_ADDR_OWVAR 28
46002: PUSH
46003: LD_INT 21
46005: ST_TO_ADDR
// hc_gallery :=  ;
46006: LD_ADDR_OWVAR 33
46010: PUSH
46011: LD_STRING 
46013: ST_TO_ADDR
// animal := CreateHuman ;
46014: LD_ADDR_VAR 0 12
46018: PUSH
46019: CALL_OW 44
46023: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46024: LD_VAR 0 12
46028: PPUSH
46029: LD_VAR 0 8
46033: PPUSH
46034: LD_INT 0
46036: PPUSH
46037: CALL 52719 0 3
// end ;
46041: GO 45995
46043: POP
46044: POP
// if birds then
46045: LD_VAR 0 1
46049: IFFALSE 46116
// for i = 1 to birds do
46051: LD_ADDR_VAR 0 11
46055: PUSH
46056: DOUBLE
46057: LD_INT 1
46059: DEC
46060: ST_TO_ADDR
46061: LD_VAR 0 1
46065: PUSH
46066: FOR_TO
46067: IFFALSE 46114
// begin hc_class = 18 ;
46069: LD_ADDR_OWVAR 28
46073: PUSH
46074: LD_INT 18
46076: ST_TO_ADDR
// hc_gallery =  ;
46077: LD_ADDR_OWVAR 33
46081: PUSH
46082: LD_STRING 
46084: ST_TO_ADDR
// animal := CreateHuman ;
46085: LD_ADDR_VAR 0 12
46089: PUSH
46090: CALL_OW 44
46094: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46095: LD_VAR 0 12
46099: PPUSH
46100: LD_VAR 0 8
46104: PPUSH
46105: LD_INT 0
46107: PPUSH
46108: CALL 52719 0 3
// end ;
46112: GO 46066
46114: POP
46115: POP
// if tigers then
46116: LD_VAR 0 2
46120: IFFALSE 46204
// for i = 1 to tigers do
46122: LD_ADDR_VAR 0 11
46126: PUSH
46127: DOUBLE
46128: LD_INT 1
46130: DEC
46131: ST_TO_ADDR
46132: LD_VAR 0 2
46136: PUSH
46137: FOR_TO
46138: IFFALSE 46202
// begin hc_class = class_tiger ;
46140: LD_ADDR_OWVAR 28
46144: PUSH
46145: LD_INT 14
46147: ST_TO_ADDR
// hc_gallery =  ;
46148: LD_ADDR_OWVAR 33
46152: PUSH
46153: LD_STRING 
46155: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46156: LD_ADDR_OWVAR 35
46160: PUSH
46161: LD_INT 7
46163: NEG
46164: PPUSH
46165: LD_INT 7
46167: PPUSH
46168: CALL_OW 12
46172: ST_TO_ADDR
// animal := CreateHuman ;
46173: LD_ADDR_VAR 0 12
46177: PUSH
46178: CALL_OW 44
46182: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46183: LD_VAR 0 12
46187: PPUSH
46188: LD_VAR 0 8
46192: PPUSH
46193: LD_INT 0
46195: PPUSH
46196: CALL 52719 0 3
// end ;
46200: GO 46137
46202: POP
46203: POP
// if apemans then
46204: LD_VAR 0 3
46208: IFFALSE 46331
// for i = 1 to apemans do
46210: LD_ADDR_VAR 0 11
46214: PUSH
46215: DOUBLE
46216: LD_INT 1
46218: DEC
46219: ST_TO_ADDR
46220: LD_VAR 0 3
46224: PUSH
46225: FOR_TO
46226: IFFALSE 46329
// begin hc_class = class_apeman ;
46228: LD_ADDR_OWVAR 28
46232: PUSH
46233: LD_INT 12
46235: ST_TO_ADDR
// hc_gallery =  ;
46236: LD_ADDR_OWVAR 33
46240: PUSH
46241: LD_STRING 
46243: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
46244: LD_ADDR_OWVAR 35
46248: PUSH
46249: LD_INT 5
46251: NEG
46252: PPUSH
46253: LD_INT 5
46255: PPUSH
46256: CALL_OW 12
46260: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46261: LD_ADDR_OWVAR 31
46265: PUSH
46266: LD_INT 1
46268: PPUSH
46269: LD_INT 3
46271: PPUSH
46272: CALL_OW 12
46276: PUSH
46277: LD_INT 1
46279: PPUSH
46280: LD_INT 3
46282: PPUSH
46283: CALL_OW 12
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: ST_TO_ADDR
// animal := CreateHuman ;
46300: LD_ADDR_VAR 0 12
46304: PUSH
46305: CALL_OW 44
46309: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46310: LD_VAR 0 12
46314: PPUSH
46315: LD_VAR 0 8
46319: PPUSH
46320: LD_INT 0
46322: PPUSH
46323: CALL 52719 0 3
// end ;
46327: GO 46225
46329: POP
46330: POP
// if enchidnas then
46331: LD_VAR 0 4
46335: IFFALSE 46402
// for i = 1 to enchidnas do
46337: LD_ADDR_VAR 0 11
46341: PUSH
46342: DOUBLE
46343: LD_INT 1
46345: DEC
46346: ST_TO_ADDR
46347: LD_VAR 0 4
46351: PUSH
46352: FOR_TO
46353: IFFALSE 46400
// begin hc_class = 13 ;
46355: LD_ADDR_OWVAR 28
46359: PUSH
46360: LD_INT 13
46362: ST_TO_ADDR
// hc_gallery =  ;
46363: LD_ADDR_OWVAR 33
46367: PUSH
46368: LD_STRING 
46370: ST_TO_ADDR
// animal := CreateHuman ;
46371: LD_ADDR_VAR 0 12
46375: PUSH
46376: CALL_OW 44
46380: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46381: LD_VAR 0 12
46385: PPUSH
46386: LD_VAR 0 8
46390: PPUSH
46391: LD_INT 0
46393: PPUSH
46394: CALL 52719 0 3
// end ;
46398: GO 46352
46400: POP
46401: POP
// if fishes then
46402: LD_VAR 0 7
46406: IFFALSE 46473
// for i = 1 to fishes do
46408: LD_ADDR_VAR 0 11
46412: PUSH
46413: DOUBLE
46414: LD_INT 1
46416: DEC
46417: ST_TO_ADDR
46418: LD_VAR 0 7
46422: PUSH
46423: FOR_TO
46424: IFFALSE 46471
// begin hc_class = 20 ;
46426: LD_ADDR_OWVAR 28
46430: PUSH
46431: LD_INT 20
46433: ST_TO_ADDR
// hc_gallery =  ;
46434: LD_ADDR_OWVAR 33
46438: PUSH
46439: LD_STRING 
46441: ST_TO_ADDR
// animal := CreateHuman ;
46442: LD_ADDR_VAR 0 12
46446: PUSH
46447: CALL_OW 44
46451: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46452: LD_VAR 0 12
46456: PPUSH
46457: LD_VAR 0 9
46461: PPUSH
46462: LD_INT 0
46464: PPUSH
46465: CALL 52719 0 3
// end ;
46469: GO 46423
46471: POP
46472: POP
// end ;
46473: LD_VAR 0 10
46477: RET
// export function WantHeal ( sci , unit ) ; begin
46478: LD_INT 0
46480: PPUSH
// if GetTaskList ( sci ) > 0 then
46481: LD_VAR 0 1
46485: PPUSH
46486: CALL_OW 437
46490: PUSH
46491: LD_INT 0
46493: GREATER
46494: IFFALSE 46564
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46496: LD_VAR 0 1
46500: PPUSH
46501: CALL_OW 437
46505: PUSH
46506: LD_INT 1
46508: ARRAY
46509: PUSH
46510: LD_INT 1
46512: ARRAY
46513: PUSH
46514: LD_STRING l
46516: EQUAL
46517: PUSH
46518: LD_VAR 0 1
46522: PPUSH
46523: CALL_OW 437
46527: PUSH
46528: LD_INT 1
46530: ARRAY
46531: PUSH
46532: LD_INT 4
46534: ARRAY
46535: PUSH
46536: LD_VAR 0 2
46540: EQUAL
46541: AND
46542: IFFALSE 46554
// result := true else
46544: LD_ADDR_VAR 0 3
46548: PUSH
46549: LD_INT 1
46551: ST_TO_ADDR
46552: GO 46562
// result := false ;
46554: LD_ADDR_VAR 0 3
46558: PUSH
46559: LD_INT 0
46561: ST_TO_ADDR
// end else
46562: GO 46572
// result := false ;
46564: LD_ADDR_VAR 0 3
46568: PUSH
46569: LD_INT 0
46571: ST_TO_ADDR
// end ;
46572: LD_VAR 0 3
46576: RET
// export function HealTarget ( sci ) ; begin
46577: LD_INT 0
46579: PPUSH
// if not sci then
46580: LD_VAR 0 1
46584: NOT
46585: IFFALSE 46589
// exit ;
46587: GO 46654
// result := 0 ;
46589: LD_ADDR_VAR 0 2
46593: PUSH
46594: LD_INT 0
46596: ST_TO_ADDR
// if GetTaskList ( sci ) then
46597: LD_VAR 0 1
46601: PPUSH
46602: CALL_OW 437
46606: IFFALSE 46654
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46608: LD_VAR 0 1
46612: PPUSH
46613: CALL_OW 437
46617: PUSH
46618: LD_INT 1
46620: ARRAY
46621: PUSH
46622: LD_INT 1
46624: ARRAY
46625: PUSH
46626: LD_STRING l
46628: EQUAL
46629: IFFALSE 46654
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46631: LD_ADDR_VAR 0 2
46635: PUSH
46636: LD_VAR 0 1
46640: PPUSH
46641: CALL_OW 437
46645: PUSH
46646: LD_INT 1
46648: ARRAY
46649: PUSH
46650: LD_INT 4
46652: ARRAY
46653: ST_TO_ADDR
// end ;
46654: LD_VAR 0 2
46658: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
46659: LD_INT 0
46661: PPUSH
46662: PPUSH
46663: PPUSH
46664: PPUSH
46665: PPUSH
46666: PPUSH
46667: PPUSH
46668: PPUSH
46669: PPUSH
46670: PPUSH
46671: PPUSH
46672: PPUSH
46673: PPUSH
46674: PPUSH
46675: PPUSH
46676: PPUSH
46677: PPUSH
46678: PPUSH
46679: PPUSH
46680: PPUSH
46681: PPUSH
46682: PPUSH
46683: PPUSH
46684: PPUSH
46685: PPUSH
46686: PPUSH
46687: PPUSH
46688: PPUSH
46689: PPUSH
46690: PPUSH
46691: PPUSH
46692: PPUSH
46693: PPUSH
46694: PPUSH
// if not list then
46695: LD_VAR 0 1
46699: NOT
46700: IFFALSE 46704
// exit ;
46702: GO 51330
// base := list [ 1 ] ;
46704: LD_ADDR_VAR 0 3
46708: PUSH
46709: LD_VAR 0 1
46713: PUSH
46714: LD_INT 1
46716: ARRAY
46717: ST_TO_ADDR
// group := list [ 2 ] ;
46718: LD_ADDR_VAR 0 4
46722: PUSH
46723: LD_VAR 0 1
46727: PUSH
46728: LD_INT 2
46730: ARRAY
46731: ST_TO_ADDR
// path := list [ 3 ] ;
46732: LD_ADDR_VAR 0 5
46736: PUSH
46737: LD_VAR 0 1
46741: PUSH
46742: LD_INT 3
46744: ARRAY
46745: ST_TO_ADDR
// flags := list [ 4 ] ;
46746: LD_ADDR_VAR 0 6
46750: PUSH
46751: LD_VAR 0 1
46755: PUSH
46756: LD_INT 4
46758: ARRAY
46759: ST_TO_ADDR
// mined := [ ] ;
46760: LD_ADDR_VAR 0 27
46764: PUSH
46765: EMPTY
46766: ST_TO_ADDR
// bombed := [ ] ;
46767: LD_ADDR_VAR 0 28
46771: PUSH
46772: EMPTY
46773: ST_TO_ADDR
// healers := [ ] ;
46774: LD_ADDR_VAR 0 31
46778: PUSH
46779: EMPTY
46780: ST_TO_ADDR
// to_heal := [ ] ;
46781: LD_ADDR_VAR 0 30
46785: PUSH
46786: EMPTY
46787: ST_TO_ADDR
// repairs := [ ] ;
46788: LD_ADDR_VAR 0 33
46792: PUSH
46793: EMPTY
46794: ST_TO_ADDR
// to_repair := [ ] ;
46795: LD_ADDR_VAR 0 32
46799: PUSH
46800: EMPTY
46801: ST_TO_ADDR
// if not group or not path then
46802: LD_VAR 0 4
46806: NOT
46807: PUSH
46808: LD_VAR 0 5
46812: NOT
46813: OR
46814: IFFALSE 46818
// exit ;
46816: GO 51330
// side := GetSide ( group [ 1 ] ) ;
46818: LD_ADDR_VAR 0 35
46822: PUSH
46823: LD_VAR 0 4
46827: PUSH
46828: LD_INT 1
46830: ARRAY
46831: PPUSH
46832: CALL_OW 255
46836: ST_TO_ADDR
// if flags then
46837: LD_VAR 0 6
46841: IFFALSE 46985
// begin f_ignore_area := flags [ 1 ] ;
46843: LD_ADDR_VAR 0 17
46847: PUSH
46848: LD_VAR 0 6
46852: PUSH
46853: LD_INT 1
46855: ARRAY
46856: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
46857: LD_ADDR_VAR 0 18
46861: PUSH
46862: LD_VAR 0 6
46866: PUSH
46867: LD_INT 2
46869: ARRAY
46870: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
46871: LD_ADDR_VAR 0 19
46875: PUSH
46876: LD_VAR 0 6
46880: PUSH
46881: LD_INT 3
46883: ARRAY
46884: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
46885: LD_ADDR_VAR 0 20
46889: PUSH
46890: LD_VAR 0 6
46894: PUSH
46895: LD_INT 4
46897: ARRAY
46898: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
46899: LD_ADDR_VAR 0 21
46903: PUSH
46904: LD_VAR 0 6
46908: PUSH
46909: LD_INT 5
46911: ARRAY
46912: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
46913: LD_ADDR_VAR 0 22
46917: PUSH
46918: LD_VAR 0 6
46922: PUSH
46923: LD_INT 6
46925: ARRAY
46926: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
46927: LD_ADDR_VAR 0 23
46931: PUSH
46932: LD_VAR 0 6
46936: PUSH
46937: LD_INT 7
46939: ARRAY
46940: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
46941: LD_ADDR_VAR 0 24
46945: PUSH
46946: LD_VAR 0 6
46950: PUSH
46951: LD_INT 8
46953: ARRAY
46954: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
46955: LD_ADDR_VAR 0 25
46959: PUSH
46960: LD_VAR 0 6
46964: PUSH
46965: LD_INT 9
46967: ARRAY
46968: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
46969: LD_ADDR_VAR 0 26
46973: PUSH
46974: LD_VAR 0 6
46978: PUSH
46979: LD_INT 10
46981: ARRAY
46982: ST_TO_ADDR
// end else
46983: GO 47065
// begin f_ignore_area := false ;
46985: LD_ADDR_VAR 0 17
46989: PUSH
46990: LD_INT 0
46992: ST_TO_ADDR
// f_capture := false ;
46993: LD_ADDR_VAR 0 18
46997: PUSH
46998: LD_INT 0
47000: ST_TO_ADDR
// f_ignore_civ := false ;
47001: LD_ADDR_VAR 0 19
47005: PUSH
47006: LD_INT 0
47008: ST_TO_ADDR
// f_murder := false ;
47009: LD_ADDR_VAR 0 20
47013: PUSH
47014: LD_INT 0
47016: ST_TO_ADDR
// f_mines := false ;
47017: LD_ADDR_VAR 0 21
47021: PUSH
47022: LD_INT 0
47024: ST_TO_ADDR
// f_repair := false ;
47025: LD_ADDR_VAR 0 22
47029: PUSH
47030: LD_INT 0
47032: ST_TO_ADDR
// f_heal := false ;
47033: LD_ADDR_VAR 0 23
47037: PUSH
47038: LD_INT 0
47040: ST_TO_ADDR
// f_spacetime := false ;
47041: LD_ADDR_VAR 0 24
47045: PUSH
47046: LD_INT 0
47048: ST_TO_ADDR
// f_attack_depot := false ;
47049: LD_ADDR_VAR 0 25
47053: PUSH
47054: LD_INT 0
47056: ST_TO_ADDR
// f_crawl := false ;
47057: LD_ADDR_VAR 0 26
47061: PUSH
47062: LD_INT 0
47064: ST_TO_ADDR
// end ; if f_heal then
47065: LD_VAR 0 23
47069: IFFALSE 47096
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
47071: LD_ADDR_VAR 0 31
47075: PUSH
47076: LD_VAR 0 4
47080: PPUSH
47081: LD_INT 25
47083: PUSH
47084: LD_INT 4
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PPUSH
47091: CALL_OW 72
47095: ST_TO_ADDR
// if f_repair then
47096: LD_VAR 0 22
47100: IFFALSE 47127
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
47102: LD_ADDR_VAR 0 33
47106: PUSH
47107: LD_VAR 0 4
47111: PPUSH
47112: LD_INT 25
47114: PUSH
47115: LD_INT 3
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PPUSH
47122: CALL_OW 72
47126: ST_TO_ADDR
// units_path := [ ] ;
47127: LD_ADDR_VAR 0 16
47131: PUSH
47132: EMPTY
47133: ST_TO_ADDR
// for i = 1 to group do
47134: LD_ADDR_VAR 0 7
47138: PUSH
47139: DOUBLE
47140: LD_INT 1
47142: DEC
47143: ST_TO_ADDR
47144: LD_VAR 0 4
47148: PUSH
47149: FOR_TO
47150: IFFALSE 47179
// units_path := Replace ( units_path , i , path ) ;
47152: LD_ADDR_VAR 0 16
47156: PUSH
47157: LD_VAR 0 16
47161: PPUSH
47162: LD_VAR 0 7
47166: PPUSH
47167: LD_VAR 0 5
47171: PPUSH
47172: CALL_OW 1
47176: ST_TO_ADDR
47177: GO 47149
47179: POP
47180: POP
// repeat for i = group downto 1 do
47181: LD_ADDR_VAR 0 7
47185: PUSH
47186: DOUBLE
47187: LD_VAR 0 4
47191: INC
47192: ST_TO_ADDR
47193: LD_INT 1
47195: PUSH
47196: FOR_DOWNTO
47197: IFFALSE 51293
// begin wait ( 5 ) ;
47199: LD_INT 5
47201: PPUSH
47202: CALL_OW 67
// tmp := [ ] ;
47206: LD_ADDR_VAR 0 14
47210: PUSH
47211: EMPTY
47212: ST_TO_ADDR
// attacking := false ;
47213: LD_ADDR_VAR 0 29
47217: PUSH
47218: LD_INT 0
47220: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
47221: LD_VAR 0 4
47225: PUSH
47226: LD_VAR 0 7
47230: ARRAY
47231: PPUSH
47232: CALL_OW 301
47236: PUSH
47237: LD_VAR 0 4
47241: PUSH
47242: LD_VAR 0 7
47246: ARRAY
47247: NOT
47248: OR
47249: IFFALSE 47358
// begin if GetType ( group [ i ] ) = unit_human then
47251: LD_VAR 0 4
47255: PUSH
47256: LD_VAR 0 7
47260: ARRAY
47261: PPUSH
47262: CALL_OW 247
47266: PUSH
47267: LD_INT 1
47269: EQUAL
47270: IFFALSE 47316
// begin to_heal := to_heal diff group [ i ] ;
47272: LD_ADDR_VAR 0 30
47276: PUSH
47277: LD_VAR 0 30
47281: PUSH
47282: LD_VAR 0 4
47286: PUSH
47287: LD_VAR 0 7
47291: ARRAY
47292: DIFF
47293: ST_TO_ADDR
// healers := healers diff group [ i ] ;
47294: LD_ADDR_VAR 0 31
47298: PUSH
47299: LD_VAR 0 31
47303: PUSH
47304: LD_VAR 0 4
47308: PUSH
47309: LD_VAR 0 7
47313: ARRAY
47314: DIFF
47315: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
47316: LD_ADDR_VAR 0 4
47320: PUSH
47321: LD_VAR 0 4
47325: PPUSH
47326: LD_VAR 0 7
47330: PPUSH
47331: CALL_OW 3
47335: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
47336: LD_ADDR_VAR 0 16
47340: PUSH
47341: LD_VAR 0 16
47345: PPUSH
47346: LD_VAR 0 7
47350: PPUSH
47351: CALL_OW 3
47355: ST_TO_ADDR
// continue ;
47356: GO 47196
// end ; if f_repair then
47358: LD_VAR 0 22
47362: IFFALSE 47851
// begin if GetType ( group [ i ] ) = unit_vehicle then
47364: LD_VAR 0 4
47368: PUSH
47369: LD_VAR 0 7
47373: ARRAY
47374: PPUSH
47375: CALL_OW 247
47379: PUSH
47380: LD_INT 2
47382: EQUAL
47383: IFFALSE 47573
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
47385: LD_VAR 0 4
47389: PUSH
47390: LD_VAR 0 7
47394: ARRAY
47395: PPUSH
47396: CALL_OW 256
47400: PUSH
47401: LD_INT 700
47403: LESS
47404: PUSH
47405: LD_VAR 0 4
47409: PUSH
47410: LD_VAR 0 7
47414: ARRAY
47415: PUSH
47416: LD_VAR 0 32
47420: IN
47421: NOT
47422: AND
47423: IFFALSE 47447
// to_repair := to_repair union group [ i ] ;
47425: LD_ADDR_VAR 0 32
47429: PUSH
47430: LD_VAR 0 32
47434: PUSH
47435: LD_VAR 0 4
47439: PUSH
47440: LD_VAR 0 7
47444: ARRAY
47445: UNION
47446: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
47447: LD_VAR 0 4
47451: PUSH
47452: LD_VAR 0 7
47456: ARRAY
47457: PPUSH
47458: CALL_OW 256
47462: PUSH
47463: LD_INT 1000
47465: EQUAL
47466: PUSH
47467: LD_VAR 0 4
47471: PUSH
47472: LD_VAR 0 7
47476: ARRAY
47477: PUSH
47478: LD_VAR 0 32
47482: IN
47483: AND
47484: IFFALSE 47508
// to_repair := to_repair diff group [ i ] ;
47486: LD_ADDR_VAR 0 32
47490: PUSH
47491: LD_VAR 0 32
47495: PUSH
47496: LD_VAR 0 4
47500: PUSH
47501: LD_VAR 0 7
47505: ARRAY
47506: DIFF
47507: ST_TO_ADDR
// if group [ i ] in to_repair then
47508: LD_VAR 0 4
47512: PUSH
47513: LD_VAR 0 7
47517: ARRAY
47518: PUSH
47519: LD_VAR 0 32
47523: IN
47524: IFFALSE 47571
// begin if not IsInArea ( group [ i ] , f_repair ) then
47526: LD_VAR 0 4
47530: PUSH
47531: LD_VAR 0 7
47535: ARRAY
47536: PPUSH
47537: LD_VAR 0 22
47541: PPUSH
47542: CALL_OW 308
47546: NOT
47547: IFFALSE 47569
// ComMoveToArea ( group [ i ] , f_repair ) ;
47549: LD_VAR 0 4
47553: PUSH
47554: LD_VAR 0 7
47558: ARRAY
47559: PPUSH
47560: LD_VAR 0 22
47564: PPUSH
47565: CALL_OW 113
// continue ;
47569: GO 47196
// end ; end else
47571: GO 47851
// if group [ i ] in repairs then
47573: LD_VAR 0 4
47577: PUSH
47578: LD_VAR 0 7
47582: ARRAY
47583: PUSH
47584: LD_VAR 0 33
47588: IN
47589: IFFALSE 47851
// begin if IsInUnit ( group [ i ] ) then
47591: LD_VAR 0 4
47595: PUSH
47596: LD_VAR 0 7
47600: ARRAY
47601: PPUSH
47602: CALL_OW 310
47606: IFFALSE 47674
// begin z := IsInUnit ( group [ i ] ) ;
47608: LD_ADDR_VAR 0 13
47612: PUSH
47613: LD_VAR 0 4
47617: PUSH
47618: LD_VAR 0 7
47622: ARRAY
47623: PPUSH
47624: CALL_OW 310
47628: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
47629: LD_VAR 0 13
47633: PUSH
47634: LD_VAR 0 32
47638: IN
47639: PUSH
47640: LD_VAR 0 13
47644: PPUSH
47645: LD_VAR 0 22
47649: PPUSH
47650: CALL_OW 308
47654: AND
47655: IFFALSE 47672
// ComExitVehicle ( group [ i ] ) ;
47657: LD_VAR 0 4
47661: PUSH
47662: LD_VAR 0 7
47666: ARRAY
47667: PPUSH
47668: CALL_OW 121
// end else
47672: GO 47851
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
47674: LD_ADDR_VAR 0 13
47678: PUSH
47679: LD_VAR 0 4
47683: PPUSH
47684: LD_INT 95
47686: PUSH
47687: LD_VAR 0 22
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 58
47698: PUSH
47699: EMPTY
47700: LIST
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PPUSH
47706: CALL_OW 72
47710: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
47711: LD_VAR 0 4
47715: PUSH
47716: LD_VAR 0 7
47720: ARRAY
47721: PPUSH
47722: CALL_OW 314
47726: NOT
47727: IFFALSE 47849
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
47729: LD_ADDR_VAR 0 10
47733: PUSH
47734: LD_VAR 0 13
47738: PPUSH
47739: LD_VAR 0 4
47743: PUSH
47744: LD_VAR 0 7
47748: ARRAY
47749: PPUSH
47750: CALL_OW 74
47754: ST_TO_ADDR
// if not x then
47755: LD_VAR 0 10
47759: NOT
47760: IFFALSE 47764
// continue ;
47762: GO 47196
// if GetLives ( x ) < 1000 then
47764: LD_VAR 0 10
47768: PPUSH
47769: CALL_OW 256
47773: PUSH
47774: LD_INT 1000
47776: LESS
47777: IFFALSE 47801
// ComRepairVehicle ( group [ i ] , x ) else
47779: LD_VAR 0 4
47783: PUSH
47784: LD_VAR 0 7
47788: ARRAY
47789: PPUSH
47790: LD_VAR 0 10
47794: PPUSH
47795: CALL_OW 129
47799: GO 47849
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
47801: LD_VAR 0 23
47805: PUSH
47806: LD_VAR 0 4
47810: PUSH
47811: LD_VAR 0 7
47815: ARRAY
47816: PPUSH
47817: CALL_OW 256
47821: PUSH
47822: LD_INT 1000
47824: LESS
47825: AND
47826: NOT
47827: IFFALSE 47849
// ComEnterUnit ( group [ i ] , x ) ;
47829: LD_VAR 0 4
47833: PUSH
47834: LD_VAR 0 7
47838: ARRAY
47839: PPUSH
47840: LD_VAR 0 10
47844: PPUSH
47845: CALL_OW 120
// end ; continue ;
47849: GO 47196
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
47851: LD_VAR 0 23
47855: PUSH
47856: LD_VAR 0 4
47860: PUSH
47861: LD_VAR 0 7
47865: ARRAY
47866: PPUSH
47867: CALL_OW 247
47871: PUSH
47872: LD_INT 1
47874: EQUAL
47875: AND
47876: IFFALSE 48354
// begin if group [ i ] in healers then
47878: LD_VAR 0 4
47882: PUSH
47883: LD_VAR 0 7
47887: ARRAY
47888: PUSH
47889: LD_VAR 0 31
47893: IN
47894: IFFALSE 48167
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
47896: LD_VAR 0 4
47900: PUSH
47901: LD_VAR 0 7
47905: ARRAY
47906: PPUSH
47907: LD_VAR 0 23
47911: PPUSH
47912: CALL_OW 308
47916: NOT
47917: PUSH
47918: LD_VAR 0 4
47922: PUSH
47923: LD_VAR 0 7
47927: ARRAY
47928: PPUSH
47929: CALL_OW 314
47933: NOT
47934: AND
47935: IFFALSE 47959
// ComMoveToArea ( group [ i ] , f_heal ) else
47937: LD_VAR 0 4
47941: PUSH
47942: LD_VAR 0 7
47946: ARRAY
47947: PPUSH
47948: LD_VAR 0 23
47952: PPUSH
47953: CALL_OW 113
47957: GO 48165
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
47959: LD_VAR 0 4
47963: PUSH
47964: LD_VAR 0 7
47968: ARRAY
47969: PPUSH
47970: CALL 46577 0 1
47974: PPUSH
47975: CALL_OW 256
47979: PUSH
47980: LD_INT 1000
47982: EQUAL
47983: IFFALSE 48002
// ComStop ( group [ i ] ) else
47985: LD_VAR 0 4
47989: PUSH
47990: LD_VAR 0 7
47994: ARRAY
47995: PPUSH
47996: CALL_OW 141
48000: GO 48165
// if not HasTask ( group [ i ] ) and to_heal then
48002: LD_VAR 0 4
48006: PUSH
48007: LD_VAR 0 7
48011: ARRAY
48012: PPUSH
48013: CALL_OW 314
48017: NOT
48018: PUSH
48019: LD_VAR 0 30
48023: AND
48024: IFFALSE 48165
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
48026: LD_ADDR_VAR 0 13
48030: PUSH
48031: LD_VAR 0 30
48035: PPUSH
48036: LD_INT 3
48038: PUSH
48039: LD_INT 54
48041: PUSH
48042: EMPTY
48043: LIST
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PPUSH
48049: CALL_OW 72
48053: PPUSH
48054: LD_VAR 0 4
48058: PUSH
48059: LD_VAR 0 7
48063: ARRAY
48064: PPUSH
48065: CALL_OW 74
48069: ST_TO_ADDR
// if z then
48070: LD_VAR 0 13
48074: IFFALSE 48165
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
48076: LD_INT 91
48078: PUSH
48079: LD_VAR 0 13
48083: PUSH
48084: LD_INT 10
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 81
48094: PUSH
48095: LD_VAR 0 13
48099: PPUSH
48100: CALL_OW 255
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PPUSH
48113: CALL_OW 69
48117: PUSH
48118: LD_INT 0
48120: EQUAL
48121: IFFALSE 48145
// ComHeal ( group [ i ] , z ) else
48123: LD_VAR 0 4
48127: PUSH
48128: LD_VAR 0 7
48132: ARRAY
48133: PPUSH
48134: LD_VAR 0 13
48138: PPUSH
48139: CALL_OW 128
48143: GO 48165
// ComMoveToArea ( group [ i ] , f_heal ) ;
48145: LD_VAR 0 4
48149: PUSH
48150: LD_VAR 0 7
48154: ARRAY
48155: PPUSH
48156: LD_VAR 0 23
48160: PPUSH
48161: CALL_OW 113
// end ; continue ;
48165: GO 47196
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
48167: LD_VAR 0 4
48171: PUSH
48172: LD_VAR 0 7
48176: ARRAY
48177: PPUSH
48178: CALL_OW 256
48182: PUSH
48183: LD_INT 700
48185: LESS
48186: PUSH
48187: LD_VAR 0 4
48191: PUSH
48192: LD_VAR 0 7
48196: ARRAY
48197: PUSH
48198: LD_VAR 0 30
48202: IN
48203: NOT
48204: AND
48205: IFFALSE 48229
// to_heal := to_heal union group [ i ] ;
48207: LD_ADDR_VAR 0 30
48211: PUSH
48212: LD_VAR 0 30
48216: PUSH
48217: LD_VAR 0 4
48221: PUSH
48222: LD_VAR 0 7
48226: ARRAY
48227: UNION
48228: ST_TO_ADDR
// if group [ i ] in to_heal then
48229: LD_VAR 0 4
48233: PUSH
48234: LD_VAR 0 7
48238: ARRAY
48239: PUSH
48240: LD_VAR 0 30
48244: IN
48245: IFFALSE 48354
// begin if GetLives ( group [ i ] ) = 1000 then
48247: LD_VAR 0 4
48251: PUSH
48252: LD_VAR 0 7
48256: ARRAY
48257: PPUSH
48258: CALL_OW 256
48262: PUSH
48263: LD_INT 1000
48265: EQUAL
48266: IFFALSE 48292
// to_heal := to_heal diff group [ i ] else
48268: LD_ADDR_VAR 0 30
48272: PUSH
48273: LD_VAR 0 30
48277: PUSH
48278: LD_VAR 0 4
48282: PUSH
48283: LD_VAR 0 7
48287: ARRAY
48288: DIFF
48289: ST_TO_ADDR
48290: GO 48354
// begin if not IsInArea ( group [ i ] , to_heal ) then
48292: LD_VAR 0 4
48296: PUSH
48297: LD_VAR 0 7
48301: ARRAY
48302: PPUSH
48303: LD_VAR 0 30
48307: PPUSH
48308: CALL_OW 308
48312: NOT
48313: IFFALSE 48337
// ComMoveToArea ( group [ i ] , f_heal ) else
48315: LD_VAR 0 4
48319: PUSH
48320: LD_VAR 0 7
48324: ARRAY
48325: PPUSH
48326: LD_VAR 0 23
48330: PPUSH
48331: CALL_OW 113
48335: GO 48352
// ComHold ( group [ i ] ) ;
48337: LD_VAR 0 4
48341: PUSH
48342: LD_VAR 0 7
48346: ARRAY
48347: PPUSH
48348: CALL_OW 140
// continue ;
48352: GO 47196
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
48354: LD_VAR 0 4
48358: PUSH
48359: LD_VAR 0 7
48363: ARRAY
48364: PPUSH
48365: LD_INT 10
48367: PPUSH
48368: CALL 44974 0 2
48372: NOT
48373: PUSH
48374: LD_VAR 0 16
48378: PUSH
48379: LD_VAR 0 7
48383: ARRAY
48384: PUSH
48385: EMPTY
48386: EQUAL
48387: NOT
48388: AND
48389: IFFALSE 48655
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
48391: LD_VAR 0 4
48395: PUSH
48396: LD_VAR 0 7
48400: ARRAY
48401: PPUSH
48402: CALL_OW 262
48406: PUSH
48407: LD_INT 1
48409: PUSH
48410: LD_INT 2
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: IN
48417: IFFALSE 48458
// if GetFuel ( group [ i ] ) < 10 then
48419: LD_VAR 0 4
48423: PUSH
48424: LD_VAR 0 7
48428: ARRAY
48429: PPUSH
48430: CALL_OW 261
48434: PUSH
48435: LD_INT 10
48437: LESS
48438: IFFALSE 48458
// SetFuel ( group [ i ] , 12 ) ;
48440: LD_VAR 0 4
48444: PUSH
48445: LD_VAR 0 7
48449: ARRAY
48450: PPUSH
48451: LD_INT 12
48453: PPUSH
48454: CALL_OW 240
// if units_path [ i ] then
48458: LD_VAR 0 16
48462: PUSH
48463: LD_VAR 0 7
48467: ARRAY
48468: IFFALSE 48653
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
48470: LD_VAR 0 4
48474: PUSH
48475: LD_VAR 0 7
48479: ARRAY
48480: PPUSH
48481: LD_VAR 0 16
48485: PUSH
48486: LD_VAR 0 7
48490: ARRAY
48491: PUSH
48492: LD_INT 1
48494: ARRAY
48495: PUSH
48496: LD_INT 1
48498: ARRAY
48499: PPUSH
48500: LD_VAR 0 16
48504: PUSH
48505: LD_VAR 0 7
48509: ARRAY
48510: PUSH
48511: LD_INT 1
48513: ARRAY
48514: PUSH
48515: LD_INT 2
48517: ARRAY
48518: PPUSH
48519: CALL_OW 297
48523: PUSH
48524: LD_INT 6
48526: GREATER
48527: IFFALSE 48602
// begin if not HasTask ( group [ i ] ) then
48529: LD_VAR 0 4
48533: PUSH
48534: LD_VAR 0 7
48538: ARRAY
48539: PPUSH
48540: CALL_OW 314
48544: NOT
48545: IFFALSE 48600
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
48547: LD_VAR 0 4
48551: PUSH
48552: LD_VAR 0 7
48556: ARRAY
48557: PPUSH
48558: LD_VAR 0 16
48562: PUSH
48563: LD_VAR 0 7
48567: ARRAY
48568: PUSH
48569: LD_INT 1
48571: ARRAY
48572: PUSH
48573: LD_INT 1
48575: ARRAY
48576: PPUSH
48577: LD_VAR 0 16
48581: PUSH
48582: LD_VAR 0 7
48586: ARRAY
48587: PUSH
48588: LD_INT 1
48590: ARRAY
48591: PUSH
48592: LD_INT 2
48594: ARRAY
48595: PPUSH
48596: CALL_OW 114
// end else
48600: GO 48653
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
48602: LD_ADDR_VAR 0 15
48606: PUSH
48607: LD_VAR 0 16
48611: PUSH
48612: LD_VAR 0 7
48616: ARRAY
48617: PPUSH
48618: LD_INT 1
48620: PPUSH
48621: CALL_OW 3
48625: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
48626: LD_ADDR_VAR 0 16
48630: PUSH
48631: LD_VAR 0 16
48635: PPUSH
48636: LD_VAR 0 7
48640: PPUSH
48641: LD_VAR 0 15
48645: PPUSH
48646: CALL_OW 1
48650: ST_TO_ADDR
// continue ;
48651: GO 47196
// end ; end ; end else
48653: GO 51291
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
48655: LD_ADDR_VAR 0 14
48659: PUSH
48660: LD_INT 81
48662: PUSH
48663: LD_VAR 0 4
48667: PUSH
48668: LD_VAR 0 7
48672: ARRAY
48673: PPUSH
48674: CALL_OW 255
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PPUSH
48683: CALL_OW 69
48687: ST_TO_ADDR
// if not tmp then
48688: LD_VAR 0 14
48692: NOT
48693: IFFALSE 48697
// continue ;
48695: GO 47196
// if f_ignore_area then
48697: LD_VAR 0 17
48701: IFFALSE 48789
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
48703: LD_ADDR_VAR 0 15
48707: PUSH
48708: LD_VAR 0 14
48712: PPUSH
48713: LD_INT 3
48715: PUSH
48716: LD_INT 92
48718: PUSH
48719: LD_VAR 0 17
48723: PUSH
48724: LD_INT 1
48726: ARRAY
48727: PUSH
48728: LD_VAR 0 17
48732: PUSH
48733: LD_INT 2
48735: ARRAY
48736: PUSH
48737: LD_VAR 0 17
48741: PUSH
48742: LD_INT 3
48744: ARRAY
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PPUSH
48756: CALL_OW 72
48760: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
48761: LD_VAR 0 14
48765: PUSH
48766: LD_VAR 0 15
48770: DIFF
48771: IFFALSE 48789
// tmp := tmp diff tmp2 ;
48773: LD_ADDR_VAR 0 14
48777: PUSH
48778: LD_VAR 0 14
48782: PUSH
48783: LD_VAR 0 15
48787: DIFF
48788: ST_TO_ADDR
// end ; if not f_murder then
48789: LD_VAR 0 20
48793: NOT
48794: IFFALSE 48852
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
48796: LD_ADDR_VAR 0 15
48800: PUSH
48801: LD_VAR 0 14
48805: PPUSH
48806: LD_INT 3
48808: PUSH
48809: LD_INT 50
48811: PUSH
48812: EMPTY
48813: LIST
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PPUSH
48819: CALL_OW 72
48823: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
48824: LD_VAR 0 14
48828: PUSH
48829: LD_VAR 0 15
48833: DIFF
48834: IFFALSE 48852
// tmp := tmp diff tmp2 ;
48836: LD_ADDR_VAR 0 14
48840: PUSH
48841: LD_VAR 0 14
48845: PUSH
48846: LD_VAR 0 15
48850: DIFF
48851: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
48852: LD_ADDR_VAR 0 14
48856: PUSH
48857: LD_VAR 0 4
48861: PUSH
48862: LD_VAR 0 7
48866: ARRAY
48867: PPUSH
48868: LD_VAR 0 14
48872: PPUSH
48873: LD_INT 1
48875: PPUSH
48876: LD_INT 1
48878: PPUSH
48879: CALL 18617 0 4
48883: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
48884: LD_VAR 0 4
48888: PUSH
48889: LD_VAR 0 7
48893: ARRAY
48894: PPUSH
48895: CALL_OW 257
48899: PUSH
48900: LD_INT 1
48902: EQUAL
48903: IFFALSE 49351
// begin if WantPlant ( group [ i ] ) then
48905: LD_VAR 0 4
48909: PUSH
48910: LD_VAR 0 7
48914: ARRAY
48915: PPUSH
48916: CALL 18118 0 1
48920: IFFALSE 48924
// continue ;
48922: GO 47196
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
48924: LD_VAR 0 18
48928: PUSH
48929: LD_VAR 0 4
48933: PUSH
48934: LD_VAR 0 7
48938: ARRAY
48939: PPUSH
48940: CALL_OW 310
48944: NOT
48945: AND
48946: PUSH
48947: LD_VAR 0 14
48951: PUSH
48952: LD_INT 1
48954: ARRAY
48955: PUSH
48956: LD_VAR 0 14
48960: PPUSH
48961: LD_INT 21
48963: PUSH
48964: LD_INT 2
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 58
48973: PUSH
48974: EMPTY
48975: LIST
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PPUSH
48981: CALL_OW 72
48985: IN
48986: AND
48987: IFFALSE 49023
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
48989: LD_VAR 0 4
48993: PUSH
48994: LD_VAR 0 7
48998: ARRAY
48999: PPUSH
49000: LD_VAR 0 14
49004: PUSH
49005: LD_INT 1
49007: ARRAY
49008: PPUSH
49009: CALL_OW 120
// attacking := true ;
49013: LD_ADDR_VAR 0 29
49017: PUSH
49018: LD_INT 1
49020: ST_TO_ADDR
// continue ;
49021: GO 47196
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
49023: LD_VAR 0 26
49027: PUSH
49028: LD_VAR 0 4
49032: PUSH
49033: LD_VAR 0 7
49037: ARRAY
49038: PPUSH
49039: CALL_OW 257
49043: PUSH
49044: LD_INT 1
49046: EQUAL
49047: AND
49048: PUSH
49049: LD_VAR 0 4
49053: PUSH
49054: LD_VAR 0 7
49058: ARRAY
49059: PPUSH
49060: CALL_OW 256
49064: PUSH
49065: LD_INT 800
49067: LESS
49068: AND
49069: PUSH
49070: LD_VAR 0 4
49074: PUSH
49075: LD_VAR 0 7
49079: ARRAY
49080: PPUSH
49081: CALL_OW 318
49085: NOT
49086: AND
49087: IFFALSE 49104
// ComCrawl ( group [ i ] ) ;
49089: LD_VAR 0 4
49093: PUSH
49094: LD_VAR 0 7
49098: ARRAY
49099: PPUSH
49100: CALL_OW 137
// if f_mines then
49104: LD_VAR 0 21
49108: IFFALSE 49351
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
49110: LD_VAR 0 14
49114: PUSH
49115: LD_INT 1
49117: ARRAY
49118: PPUSH
49119: CALL_OW 247
49123: PUSH
49124: LD_INT 3
49126: EQUAL
49127: PUSH
49128: LD_VAR 0 14
49132: PUSH
49133: LD_INT 1
49135: ARRAY
49136: PUSH
49137: LD_VAR 0 27
49141: IN
49142: NOT
49143: AND
49144: IFFALSE 49351
// begin x := GetX ( tmp [ 1 ] ) ;
49146: LD_ADDR_VAR 0 10
49150: PUSH
49151: LD_VAR 0 14
49155: PUSH
49156: LD_INT 1
49158: ARRAY
49159: PPUSH
49160: CALL_OW 250
49164: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
49165: LD_ADDR_VAR 0 11
49169: PUSH
49170: LD_VAR 0 14
49174: PUSH
49175: LD_INT 1
49177: ARRAY
49178: PPUSH
49179: CALL_OW 251
49183: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
49184: LD_ADDR_VAR 0 12
49188: PUSH
49189: LD_VAR 0 4
49193: PUSH
49194: LD_VAR 0 7
49198: ARRAY
49199: PPUSH
49200: CALL 45059 0 1
49204: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
49205: LD_VAR 0 4
49209: PUSH
49210: LD_VAR 0 7
49214: ARRAY
49215: PPUSH
49216: LD_VAR 0 10
49220: PPUSH
49221: LD_VAR 0 11
49225: PPUSH
49226: LD_VAR 0 14
49230: PUSH
49231: LD_INT 1
49233: ARRAY
49234: PPUSH
49235: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
49239: LD_VAR 0 4
49243: PUSH
49244: LD_VAR 0 7
49248: ARRAY
49249: PPUSH
49250: LD_VAR 0 10
49254: PPUSH
49255: LD_VAR 0 12
49259: PPUSH
49260: LD_INT 7
49262: PPUSH
49263: CALL_OW 272
49267: PPUSH
49268: LD_VAR 0 11
49272: PPUSH
49273: LD_VAR 0 12
49277: PPUSH
49278: LD_INT 7
49280: PPUSH
49281: CALL_OW 273
49285: PPUSH
49286: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
49290: LD_VAR 0 4
49294: PUSH
49295: LD_VAR 0 7
49299: ARRAY
49300: PPUSH
49301: LD_INT 71
49303: PPUSH
49304: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
49308: LD_ADDR_VAR 0 27
49312: PUSH
49313: LD_VAR 0 27
49317: PPUSH
49318: LD_VAR 0 27
49322: PUSH
49323: LD_INT 1
49325: PLUS
49326: PPUSH
49327: LD_VAR 0 14
49331: PUSH
49332: LD_INT 1
49334: ARRAY
49335: PPUSH
49336: CALL_OW 1
49340: ST_TO_ADDR
// attacking := true ;
49341: LD_ADDR_VAR 0 29
49345: PUSH
49346: LD_INT 1
49348: ST_TO_ADDR
// continue ;
49349: GO 47196
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
49351: LD_VAR 0 4
49355: PUSH
49356: LD_VAR 0 7
49360: ARRAY
49361: PPUSH
49362: CALL_OW 257
49366: PUSH
49367: LD_INT 17
49369: EQUAL
49370: PUSH
49371: LD_VAR 0 4
49375: PUSH
49376: LD_VAR 0 7
49380: ARRAY
49381: PPUSH
49382: CALL_OW 110
49386: PUSH
49387: LD_INT 71
49389: EQUAL
49390: NOT
49391: AND
49392: IFFALSE 49538
// begin attacking := false ;
49394: LD_ADDR_VAR 0 29
49398: PUSH
49399: LD_INT 0
49401: ST_TO_ADDR
// k := 5 ;
49402: LD_ADDR_VAR 0 9
49406: PUSH
49407: LD_INT 5
49409: ST_TO_ADDR
// if tmp < k then
49410: LD_VAR 0 14
49414: PUSH
49415: LD_VAR 0 9
49419: LESS
49420: IFFALSE 49432
// k := tmp ;
49422: LD_ADDR_VAR 0 9
49426: PUSH
49427: LD_VAR 0 14
49431: ST_TO_ADDR
// for j = 1 to k do
49432: LD_ADDR_VAR 0 8
49436: PUSH
49437: DOUBLE
49438: LD_INT 1
49440: DEC
49441: ST_TO_ADDR
49442: LD_VAR 0 9
49446: PUSH
49447: FOR_TO
49448: IFFALSE 49536
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
49450: LD_VAR 0 14
49454: PUSH
49455: LD_VAR 0 8
49459: ARRAY
49460: PUSH
49461: LD_VAR 0 14
49465: PPUSH
49466: LD_INT 58
49468: PUSH
49469: EMPTY
49470: LIST
49471: PPUSH
49472: CALL_OW 72
49476: IN
49477: NOT
49478: IFFALSE 49534
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
49480: LD_VAR 0 4
49484: PUSH
49485: LD_VAR 0 7
49489: ARRAY
49490: PPUSH
49491: LD_VAR 0 14
49495: PUSH
49496: LD_VAR 0 8
49500: ARRAY
49501: PPUSH
49502: CALL_OW 115
// attacking := true ;
49506: LD_ADDR_VAR 0 29
49510: PUSH
49511: LD_INT 1
49513: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
49514: LD_VAR 0 4
49518: PUSH
49519: LD_VAR 0 7
49523: ARRAY
49524: PPUSH
49525: LD_INT 71
49527: PPUSH
49528: CALL_OW 109
// continue ;
49532: GO 49447
// end ; end ;
49534: GO 49447
49536: POP
49537: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
49538: LD_VAR 0 4
49542: PUSH
49543: LD_VAR 0 7
49547: ARRAY
49548: PPUSH
49549: CALL_OW 257
49553: PUSH
49554: LD_INT 8
49556: EQUAL
49557: PUSH
49558: LD_VAR 0 4
49562: PUSH
49563: LD_VAR 0 7
49567: ARRAY
49568: PPUSH
49569: CALL_OW 264
49573: PUSH
49574: LD_INT 28
49576: PUSH
49577: LD_INT 45
49579: PUSH
49580: LD_INT 7
49582: PUSH
49583: LD_INT 47
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: IN
49592: OR
49593: IFFALSE 49823
// begin attacking := false ;
49595: LD_ADDR_VAR 0 29
49599: PUSH
49600: LD_INT 0
49602: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
49603: LD_VAR 0 14
49607: PUSH
49608: LD_INT 1
49610: ARRAY
49611: PPUSH
49612: CALL_OW 266
49616: PUSH
49617: LD_INT 32
49619: PUSH
49620: LD_INT 31
49622: PUSH
49623: LD_INT 33
49625: PUSH
49626: LD_INT 4
49628: PUSH
49629: LD_INT 5
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: IN
49639: IFFALSE 49823
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
49641: LD_ADDR_VAR 0 9
49645: PUSH
49646: LD_VAR 0 14
49650: PUSH
49651: LD_INT 1
49653: ARRAY
49654: PPUSH
49655: CALL_OW 266
49659: PPUSH
49660: LD_VAR 0 14
49664: PUSH
49665: LD_INT 1
49667: ARRAY
49668: PPUSH
49669: CALL_OW 250
49673: PPUSH
49674: LD_VAR 0 14
49678: PUSH
49679: LD_INT 1
49681: ARRAY
49682: PPUSH
49683: CALL_OW 251
49687: PPUSH
49688: LD_VAR 0 14
49692: PUSH
49693: LD_INT 1
49695: ARRAY
49696: PPUSH
49697: CALL_OW 254
49701: PPUSH
49702: LD_VAR 0 14
49706: PUSH
49707: LD_INT 1
49709: ARRAY
49710: PPUSH
49711: CALL_OW 248
49715: PPUSH
49716: LD_INT 0
49718: PPUSH
49719: CALL 26429 0 6
49723: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
49724: LD_ADDR_VAR 0 8
49728: PUSH
49729: LD_VAR 0 4
49733: PUSH
49734: LD_VAR 0 7
49738: ARRAY
49739: PPUSH
49740: LD_VAR 0 9
49744: PPUSH
49745: CALL 45122 0 2
49749: ST_TO_ADDR
// if j then
49750: LD_VAR 0 8
49754: IFFALSE 49823
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49756: LD_VAR 0 8
49760: PUSH
49761: LD_INT 1
49763: ARRAY
49764: PPUSH
49765: LD_VAR 0 8
49769: PUSH
49770: LD_INT 2
49772: ARRAY
49773: PPUSH
49774: CALL_OW 488
49778: IFFALSE 49823
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
49780: LD_VAR 0 4
49784: PUSH
49785: LD_VAR 0 7
49789: ARRAY
49790: PPUSH
49791: LD_VAR 0 8
49795: PUSH
49796: LD_INT 1
49798: ARRAY
49799: PPUSH
49800: LD_VAR 0 8
49804: PUSH
49805: LD_INT 2
49807: ARRAY
49808: PPUSH
49809: CALL_OW 116
// attacking := true ;
49813: LD_ADDR_VAR 0 29
49817: PUSH
49818: LD_INT 1
49820: ST_TO_ADDR
// continue ;
49821: GO 47196
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
49823: LD_VAR 0 4
49827: PUSH
49828: LD_VAR 0 7
49832: ARRAY
49833: PPUSH
49834: CALL_OW 265
49838: PUSH
49839: LD_INT 11
49841: EQUAL
49842: IFFALSE 50120
// begin k := 10 ;
49844: LD_ADDR_VAR 0 9
49848: PUSH
49849: LD_INT 10
49851: ST_TO_ADDR
// x := 0 ;
49852: LD_ADDR_VAR 0 10
49856: PUSH
49857: LD_INT 0
49859: ST_TO_ADDR
// if tmp < k then
49860: LD_VAR 0 14
49864: PUSH
49865: LD_VAR 0 9
49869: LESS
49870: IFFALSE 49882
// k := tmp ;
49872: LD_ADDR_VAR 0 9
49876: PUSH
49877: LD_VAR 0 14
49881: ST_TO_ADDR
// for j = k downto 1 do
49882: LD_ADDR_VAR 0 8
49886: PUSH
49887: DOUBLE
49888: LD_VAR 0 9
49892: INC
49893: ST_TO_ADDR
49894: LD_INT 1
49896: PUSH
49897: FOR_DOWNTO
49898: IFFALSE 49973
// begin if GetType ( tmp [ j ] ) = unit_human then
49900: LD_VAR 0 14
49904: PUSH
49905: LD_VAR 0 8
49909: ARRAY
49910: PPUSH
49911: CALL_OW 247
49915: PUSH
49916: LD_INT 1
49918: EQUAL
49919: IFFALSE 49971
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
49921: LD_VAR 0 4
49925: PUSH
49926: LD_VAR 0 7
49930: ARRAY
49931: PPUSH
49932: LD_VAR 0 14
49936: PUSH
49937: LD_VAR 0 8
49941: ARRAY
49942: PPUSH
49943: CALL 45393 0 2
// x := tmp [ j ] ;
49947: LD_ADDR_VAR 0 10
49951: PUSH
49952: LD_VAR 0 14
49956: PUSH
49957: LD_VAR 0 8
49961: ARRAY
49962: ST_TO_ADDR
// attacking := true ;
49963: LD_ADDR_VAR 0 29
49967: PUSH
49968: LD_INT 1
49970: ST_TO_ADDR
// end ; end ;
49971: GO 49897
49973: POP
49974: POP
// if not x then
49975: LD_VAR 0 10
49979: NOT
49980: IFFALSE 50120
// begin attacking := true ;
49982: LD_ADDR_VAR 0 29
49986: PUSH
49987: LD_INT 1
49989: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
49990: LD_VAR 0 4
49994: PUSH
49995: LD_VAR 0 7
49999: ARRAY
50000: PPUSH
50001: CALL_OW 250
50005: PPUSH
50006: LD_VAR 0 4
50010: PUSH
50011: LD_VAR 0 7
50015: ARRAY
50016: PPUSH
50017: CALL_OW 251
50021: PPUSH
50022: CALL_OW 546
50026: PUSH
50027: LD_INT 2
50029: ARRAY
50030: PUSH
50031: LD_VAR 0 14
50035: PUSH
50036: LD_INT 1
50038: ARRAY
50039: PPUSH
50040: CALL_OW 250
50044: PPUSH
50045: LD_VAR 0 14
50049: PUSH
50050: LD_INT 1
50052: ARRAY
50053: PPUSH
50054: CALL_OW 251
50058: PPUSH
50059: CALL_OW 546
50063: PUSH
50064: LD_INT 2
50066: ARRAY
50067: EQUAL
50068: IFFALSE 50096
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
50070: LD_VAR 0 4
50074: PUSH
50075: LD_VAR 0 7
50079: ARRAY
50080: PPUSH
50081: LD_VAR 0 14
50085: PUSH
50086: LD_INT 1
50088: ARRAY
50089: PPUSH
50090: CALL 45393 0 2
50094: GO 50120
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
50096: LD_VAR 0 4
50100: PUSH
50101: LD_VAR 0 7
50105: ARRAY
50106: PPUSH
50107: LD_VAR 0 14
50111: PUSH
50112: LD_INT 1
50114: ARRAY
50115: PPUSH
50116: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
50120: LD_VAR 0 4
50124: PUSH
50125: LD_VAR 0 7
50129: ARRAY
50130: PPUSH
50131: CALL_OW 264
50135: PUSH
50136: LD_INT 29
50138: EQUAL
50139: IFFALSE 50505
// begin if WantsToAttack ( group [ i ] ) in bombed then
50141: LD_VAR 0 4
50145: PUSH
50146: LD_VAR 0 7
50150: ARRAY
50151: PPUSH
50152: CALL_OW 319
50156: PUSH
50157: LD_VAR 0 28
50161: IN
50162: IFFALSE 50166
// continue ;
50164: GO 47196
// k := 8 ;
50166: LD_ADDR_VAR 0 9
50170: PUSH
50171: LD_INT 8
50173: ST_TO_ADDR
// x := 0 ;
50174: LD_ADDR_VAR 0 10
50178: PUSH
50179: LD_INT 0
50181: ST_TO_ADDR
// if tmp < k then
50182: LD_VAR 0 14
50186: PUSH
50187: LD_VAR 0 9
50191: LESS
50192: IFFALSE 50204
// k := tmp ;
50194: LD_ADDR_VAR 0 9
50198: PUSH
50199: LD_VAR 0 14
50203: ST_TO_ADDR
// for j = 1 to k do
50204: LD_ADDR_VAR 0 8
50208: PUSH
50209: DOUBLE
50210: LD_INT 1
50212: DEC
50213: ST_TO_ADDR
50214: LD_VAR 0 9
50218: PUSH
50219: FOR_TO
50220: IFFALSE 50352
// begin if GetType ( tmp [ j ] ) = unit_building then
50222: LD_VAR 0 14
50226: PUSH
50227: LD_VAR 0 8
50231: ARRAY
50232: PPUSH
50233: CALL_OW 247
50237: PUSH
50238: LD_INT 3
50240: EQUAL
50241: IFFALSE 50350
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
50243: LD_VAR 0 14
50247: PUSH
50248: LD_VAR 0 8
50252: ARRAY
50253: PUSH
50254: LD_VAR 0 28
50258: IN
50259: NOT
50260: PUSH
50261: LD_VAR 0 14
50265: PUSH
50266: LD_VAR 0 8
50270: ARRAY
50271: PPUSH
50272: CALL_OW 313
50276: AND
50277: IFFALSE 50350
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
50279: LD_VAR 0 4
50283: PUSH
50284: LD_VAR 0 7
50288: ARRAY
50289: PPUSH
50290: LD_VAR 0 14
50294: PUSH
50295: LD_VAR 0 8
50299: ARRAY
50300: PPUSH
50301: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
50305: LD_ADDR_VAR 0 28
50309: PUSH
50310: LD_VAR 0 28
50314: PPUSH
50315: LD_VAR 0 28
50319: PUSH
50320: LD_INT 1
50322: PLUS
50323: PPUSH
50324: LD_VAR 0 14
50328: PUSH
50329: LD_VAR 0 8
50333: ARRAY
50334: PPUSH
50335: CALL_OW 1
50339: ST_TO_ADDR
// attacking := true ;
50340: LD_ADDR_VAR 0 29
50344: PUSH
50345: LD_INT 1
50347: ST_TO_ADDR
// break ;
50348: GO 50352
// end ; end ;
50350: GO 50219
50352: POP
50353: POP
// if not attacking and f_attack_depot then
50354: LD_VAR 0 29
50358: NOT
50359: PUSH
50360: LD_VAR 0 25
50364: AND
50365: IFFALSE 50460
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
50367: LD_ADDR_VAR 0 13
50371: PUSH
50372: LD_VAR 0 14
50376: PPUSH
50377: LD_INT 2
50379: PUSH
50380: LD_INT 30
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 30
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: LIST
50404: PPUSH
50405: CALL_OW 72
50409: ST_TO_ADDR
// if z then
50410: LD_VAR 0 13
50414: IFFALSE 50460
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
50416: LD_VAR 0 4
50420: PUSH
50421: LD_VAR 0 7
50425: ARRAY
50426: PPUSH
50427: LD_VAR 0 13
50431: PPUSH
50432: LD_VAR 0 4
50436: PUSH
50437: LD_VAR 0 7
50441: ARRAY
50442: PPUSH
50443: CALL_OW 74
50447: PPUSH
50448: CALL_OW 115
// attacking := true ;
50452: LD_ADDR_VAR 0 29
50456: PUSH
50457: LD_INT 1
50459: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
50460: LD_VAR 0 4
50464: PUSH
50465: LD_VAR 0 7
50469: ARRAY
50470: PPUSH
50471: CALL_OW 256
50475: PUSH
50476: LD_INT 500
50478: LESS
50479: IFFALSE 50505
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
50481: LD_VAR 0 4
50485: PUSH
50486: LD_VAR 0 7
50490: ARRAY
50491: PPUSH
50492: LD_VAR 0 14
50496: PUSH
50497: LD_INT 1
50499: ARRAY
50500: PPUSH
50501: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
50505: LD_VAR 0 4
50509: PUSH
50510: LD_VAR 0 7
50514: ARRAY
50515: PPUSH
50516: CALL_OW 264
50520: PUSH
50521: LD_INT 49
50523: EQUAL
50524: IFFALSE 50645
// begin if not HasTask ( group [ i ] ) then
50526: LD_VAR 0 4
50530: PUSH
50531: LD_VAR 0 7
50535: ARRAY
50536: PPUSH
50537: CALL_OW 314
50541: NOT
50542: IFFALSE 50645
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
50544: LD_ADDR_VAR 0 9
50548: PUSH
50549: LD_INT 81
50551: PUSH
50552: LD_VAR 0 4
50556: PUSH
50557: LD_VAR 0 7
50561: ARRAY
50562: PPUSH
50563: CALL_OW 255
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PPUSH
50572: CALL_OW 69
50576: PPUSH
50577: LD_VAR 0 4
50581: PUSH
50582: LD_VAR 0 7
50586: ARRAY
50587: PPUSH
50588: CALL_OW 74
50592: ST_TO_ADDR
// if k then
50593: LD_VAR 0 9
50597: IFFALSE 50645
// if GetDistUnits ( group [ i ] , k ) > 10 then
50599: LD_VAR 0 4
50603: PUSH
50604: LD_VAR 0 7
50608: ARRAY
50609: PPUSH
50610: LD_VAR 0 9
50614: PPUSH
50615: CALL_OW 296
50619: PUSH
50620: LD_INT 10
50622: GREATER
50623: IFFALSE 50645
// ComMoveUnit ( group [ i ] , k ) ;
50625: LD_VAR 0 4
50629: PUSH
50630: LD_VAR 0 7
50634: ARRAY
50635: PPUSH
50636: LD_VAR 0 9
50640: PPUSH
50641: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50645: LD_VAR 0 4
50649: PUSH
50650: LD_VAR 0 7
50654: ARRAY
50655: PPUSH
50656: CALL_OW 256
50660: PUSH
50661: LD_INT 250
50663: LESS
50664: PUSH
50665: LD_VAR 0 4
50669: PUSH
50670: LD_VAR 0 7
50674: ARRAY
50675: PUSH
50676: LD_INT 21
50678: PUSH
50679: LD_INT 2
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 23
50688: PUSH
50689: LD_INT 2
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PPUSH
50700: CALL_OW 69
50704: IN
50705: AND
50706: IFFALSE 50831
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
50708: LD_ADDR_VAR 0 9
50712: PUSH
50713: LD_OWVAR 3
50717: PUSH
50718: LD_VAR 0 4
50722: PUSH
50723: LD_VAR 0 7
50727: ARRAY
50728: DIFF
50729: PPUSH
50730: LD_VAR 0 4
50734: PUSH
50735: LD_VAR 0 7
50739: ARRAY
50740: PPUSH
50741: CALL_OW 74
50745: ST_TO_ADDR
// if not k then
50746: LD_VAR 0 9
50750: NOT
50751: IFFALSE 50755
// continue ;
50753: GO 47196
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
50755: LD_VAR 0 9
50759: PUSH
50760: LD_INT 81
50762: PUSH
50763: LD_VAR 0 4
50767: PUSH
50768: LD_VAR 0 7
50772: ARRAY
50773: PPUSH
50774: CALL_OW 255
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PPUSH
50783: CALL_OW 69
50787: IN
50788: PUSH
50789: LD_VAR 0 9
50793: PPUSH
50794: LD_VAR 0 4
50798: PUSH
50799: LD_VAR 0 7
50803: ARRAY
50804: PPUSH
50805: CALL_OW 296
50809: PUSH
50810: LD_INT 5
50812: LESS
50813: AND
50814: IFFALSE 50831
// ComAutodestruct ( group [ i ] ) ;
50816: LD_VAR 0 4
50820: PUSH
50821: LD_VAR 0 7
50825: ARRAY
50826: PPUSH
50827: CALL 45291 0 1
// end ; if f_attack_depot then
50831: LD_VAR 0 25
50835: IFFALSE 50947
// begin k := 6 ;
50837: LD_ADDR_VAR 0 9
50841: PUSH
50842: LD_INT 6
50844: ST_TO_ADDR
// if tmp < k then
50845: LD_VAR 0 14
50849: PUSH
50850: LD_VAR 0 9
50854: LESS
50855: IFFALSE 50867
// k := tmp ;
50857: LD_ADDR_VAR 0 9
50861: PUSH
50862: LD_VAR 0 14
50866: ST_TO_ADDR
// for j = 1 to k do
50867: LD_ADDR_VAR 0 8
50871: PUSH
50872: DOUBLE
50873: LD_INT 1
50875: DEC
50876: ST_TO_ADDR
50877: LD_VAR 0 9
50881: PUSH
50882: FOR_TO
50883: IFFALSE 50945
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
50885: LD_VAR 0 8
50889: PPUSH
50890: CALL_OW 266
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: IN
50905: IFFALSE 50943
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
50907: LD_VAR 0 4
50911: PUSH
50912: LD_VAR 0 7
50916: ARRAY
50917: PPUSH
50918: LD_VAR 0 14
50922: PUSH
50923: LD_VAR 0 8
50927: ARRAY
50928: PPUSH
50929: CALL_OW 115
// attacking := true ;
50933: LD_ADDR_VAR 0 29
50937: PUSH
50938: LD_INT 1
50940: ST_TO_ADDR
// break ;
50941: GO 50945
// end ;
50943: GO 50882
50945: POP
50946: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
50947: LD_VAR 0 4
50951: PUSH
50952: LD_VAR 0 7
50956: ARRAY
50957: PPUSH
50958: CALL_OW 302
50962: PUSH
50963: LD_VAR 0 29
50967: NOT
50968: AND
50969: IFFALSE 51291
// begin if GetTag ( group [ i ] ) = 71 then
50971: LD_VAR 0 4
50975: PUSH
50976: LD_VAR 0 7
50980: ARRAY
50981: PPUSH
50982: CALL_OW 110
50986: PUSH
50987: LD_INT 71
50989: EQUAL
50990: IFFALSE 51031
// begin if HasTask ( group [ i ] ) then
50992: LD_VAR 0 4
50996: PUSH
50997: LD_VAR 0 7
51001: ARRAY
51002: PPUSH
51003: CALL_OW 314
51007: IFFALSE 51013
// continue else
51009: GO 47196
51011: GO 51031
// SetTag ( group [ i ] , 0 ) ;
51013: LD_VAR 0 4
51017: PUSH
51018: LD_VAR 0 7
51022: ARRAY
51023: PPUSH
51024: LD_INT 0
51026: PPUSH
51027: CALL_OW 109
// end ; k := 8 ;
51031: LD_ADDR_VAR 0 9
51035: PUSH
51036: LD_INT 8
51038: ST_TO_ADDR
// x := 0 ;
51039: LD_ADDR_VAR 0 10
51043: PUSH
51044: LD_INT 0
51046: ST_TO_ADDR
// if tmp < k then
51047: LD_VAR 0 14
51051: PUSH
51052: LD_VAR 0 9
51056: LESS
51057: IFFALSE 51069
// k := tmp ;
51059: LD_ADDR_VAR 0 9
51063: PUSH
51064: LD_VAR 0 14
51068: ST_TO_ADDR
// for j = 1 to k do
51069: LD_ADDR_VAR 0 8
51073: PUSH
51074: DOUBLE
51075: LD_INT 1
51077: DEC
51078: ST_TO_ADDR
51079: LD_VAR 0 9
51083: PUSH
51084: FOR_TO
51085: IFFALSE 51183
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
51087: LD_VAR 0 14
51091: PUSH
51092: LD_VAR 0 8
51096: ARRAY
51097: PPUSH
51098: CALL_OW 247
51102: PUSH
51103: LD_INT 1
51105: EQUAL
51106: PUSH
51107: LD_VAR 0 14
51111: PUSH
51112: LD_VAR 0 8
51116: ARRAY
51117: PPUSH
51118: CALL_OW 256
51122: PUSH
51123: LD_INT 250
51125: LESS
51126: PUSH
51127: LD_VAR 0 20
51131: AND
51132: PUSH
51133: LD_VAR 0 20
51137: NOT
51138: PUSH
51139: LD_VAR 0 14
51143: PUSH
51144: LD_VAR 0 8
51148: ARRAY
51149: PPUSH
51150: CALL_OW 256
51154: PUSH
51155: LD_INT 250
51157: GREATEREQUAL
51158: AND
51159: OR
51160: AND
51161: IFFALSE 51181
// begin x := tmp [ j ] ;
51163: LD_ADDR_VAR 0 10
51167: PUSH
51168: LD_VAR 0 14
51172: PUSH
51173: LD_VAR 0 8
51177: ARRAY
51178: ST_TO_ADDR
// break ;
51179: GO 51183
// end ;
51181: GO 51084
51183: POP
51184: POP
// if x then
51185: LD_VAR 0 10
51189: IFFALSE 51213
// ComAttackUnit ( group [ i ] , x ) else
51191: LD_VAR 0 4
51195: PUSH
51196: LD_VAR 0 7
51200: ARRAY
51201: PPUSH
51202: LD_VAR 0 10
51206: PPUSH
51207: CALL_OW 115
51211: GO 51237
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
51213: LD_VAR 0 4
51217: PUSH
51218: LD_VAR 0 7
51222: ARRAY
51223: PPUSH
51224: LD_VAR 0 14
51228: PUSH
51229: LD_INT 1
51231: ARRAY
51232: PPUSH
51233: CALL_OW 115
// if not HasTask ( group [ i ] ) then
51237: LD_VAR 0 4
51241: PUSH
51242: LD_VAR 0 7
51246: ARRAY
51247: PPUSH
51248: CALL_OW 314
51252: NOT
51253: IFFALSE 51291
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
51255: LD_VAR 0 4
51259: PUSH
51260: LD_VAR 0 7
51264: ARRAY
51265: PPUSH
51266: LD_VAR 0 14
51270: PPUSH
51271: LD_VAR 0 4
51275: PUSH
51276: LD_VAR 0 7
51280: ARRAY
51281: PPUSH
51282: CALL_OW 74
51286: PPUSH
51287: CALL_OW 115
// end ; end ; end ;
51291: GO 47196
51293: POP
51294: POP
// wait ( 0 0$1 ) ;
51295: LD_INT 35
51297: PPUSH
51298: CALL_OW 67
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
51302: LD_VAR 0 4
51306: PUSH
51307: EMPTY
51308: EQUAL
51309: PUSH
51310: LD_INT 81
51312: PUSH
51313: LD_VAR 0 35
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PPUSH
51322: CALL_OW 69
51326: NOT
51327: OR
51328: IFFALSE 47181
// end ;
51330: LD_VAR 0 2
51334: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51335: LD_INT 0
51337: PPUSH
51338: PPUSH
51339: PPUSH
51340: PPUSH
// if not base_units then
51341: LD_VAR 0 1
51345: NOT
51346: IFFALSE 51350
// exit ;
51348: GO 51437
// result := false ;
51350: LD_ADDR_VAR 0 2
51354: PUSH
51355: LD_INT 0
51357: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51358: LD_ADDR_VAR 0 5
51362: PUSH
51363: LD_VAR 0 1
51367: PPUSH
51368: LD_INT 21
51370: PUSH
51371: LD_INT 3
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PPUSH
51378: CALL_OW 72
51382: ST_TO_ADDR
// if not tmp then
51383: LD_VAR 0 5
51387: NOT
51388: IFFALSE 51392
// exit ;
51390: GO 51437
// for i in tmp do
51392: LD_ADDR_VAR 0 3
51396: PUSH
51397: LD_VAR 0 5
51401: PUSH
51402: FOR_IN
51403: IFFALSE 51435
// begin result := EnemyInRange ( i , 22 ) ;
51405: LD_ADDR_VAR 0 2
51409: PUSH
51410: LD_VAR 0 3
51414: PPUSH
51415: LD_INT 22
51417: PPUSH
51418: CALL 44974 0 2
51422: ST_TO_ADDR
// if result then
51423: LD_VAR 0 2
51427: IFFALSE 51433
// exit ;
51429: POP
51430: POP
51431: GO 51437
// end ;
51433: GO 51402
51435: POP
51436: POP
// end ;
51437: LD_VAR 0 2
51441: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
51442: LD_INT 0
51444: PPUSH
51445: PPUSH
// if not units then
51446: LD_VAR 0 1
51450: NOT
51451: IFFALSE 51455
// exit ;
51453: GO 51525
// result := [ ] ;
51455: LD_ADDR_VAR 0 3
51459: PUSH
51460: EMPTY
51461: ST_TO_ADDR
// for i in units do
51462: LD_ADDR_VAR 0 4
51466: PUSH
51467: LD_VAR 0 1
51471: PUSH
51472: FOR_IN
51473: IFFALSE 51523
// if GetTag ( i ) = tag then
51475: LD_VAR 0 4
51479: PPUSH
51480: CALL_OW 110
51484: PUSH
51485: LD_VAR 0 2
51489: EQUAL
51490: IFFALSE 51521
// result := Insert ( result , result + 1 , i ) ;
51492: LD_ADDR_VAR 0 3
51496: PUSH
51497: LD_VAR 0 3
51501: PPUSH
51502: LD_VAR 0 3
51506: PUSH
51507: LD_INT 1
51509: PLUS
51510: PPUSH
51511: LD_VAR 0 4
51515: PPUSH
51516: CALL_OW 2
51520: ST_TO_ADDR
51521: GO 51472
51523: POP
51524: POP
// end ;
51525: LD_VAR 0 3
51529: RET
// export function IsDriver ( un ) ; begin
51530: LD_INT 0
51532: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51533: LD_ADDR_VAR 0 2
51537: PUSH
51538: LD_VAR 0 1
51542: PUSH
51543: LD_INT 55
51545: PUSH
51546: EMPTY
51547: LIST
51548: PPUSH
51549: CALL_OW 69
51553: IN
51554: ST_TO_ADDR
// end ;
51555: LD_VAR 0 2
51559: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51560: LD_INT 0
51562: PPUSH
51563: PPUSH
// list := [ ] ;
51564: LD_ADDR_VAR 0 5
51568: PUSH
51569: EMPTY
51570: ST_TO_ADDR
// case d of 0 :
51571: LD_VAR 0 3
51575: PUSH
51576: LD_INT 0
51578: DOUBLE
51579: EQUAL
51580: IFTRUE 51584
51582: GO 51717
51584: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51585: LD_ADDR_VAR 0 5
51589: PUSH
51590: LD_VAR 0 1
51594: PUSH
51595: LD_INT 4
51597: MINUS
51598: PUSH
51599: LD_VAR 0 2
51603: PUSH
51604: LD_INT 4
51606: MINUS
51607: PUSH
51608: LD_INT 2
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: LIST
51615: PUSH
51616: LD_VAR 0 1
51620: PUSH
51621: LD_INT 3
51623: MINUS
51624: PUSH
51625: LD_VAR 0 2
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: LIST
51637: PUSH
51638: LD_VAR 0 1
51642: PUSH
51643: LD_INT 4
51645: PLUS
51646: PUSH
51647: LD_VAR 0 2
51651: PUSH
51652: LD_INT 4
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: LIST
51659: PUSH
51660: LD_VAR 0 1
51664: PUSH
51665: LD_INT 3
51667: PLUS
51668: PUSH
51669: LD_VAR 0 2
51673: PUSH
51674: LD_INT 3
51676: PLUS
51677: PUSH
51678: LD_INT 5
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: LIST
51685: PUSH
51686: LD_VAR 0 1
51690: PUSH
51691: LD_VAR 0 2
51695: PUSH
51696: LD_INT 4
51698: PLUS
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: LIST
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: ST_TO_ADDR
// end ; 1 :
51715: GO 52415
51717: LD_INT 1
51719: DOUBLE
51720: EQUAL
51721: IFTRUE 51725
51723: GO 51858
51725: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51726: LD_ADDR_VAR 0 5
51730: PUSH
51731: LD_VAR 0 1
51735: PUSH
51736: LD_VAR 0 2
51740: PUSH
51741: LD_INT 4
51743: MINUS
51744: PUSH
51745: LD_INT 3
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: LIST
51752: PUSH
51753: LD_VAR 0 1
51757: PUSH
51758: LD_INT 3
51760: MINUS
51761: PUSH
51762: LD_VAR 0 2
51766: PUSH
51767: LD_INT 3
51769: MINUS
51770: PUSH
51771: LD_INT 2
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: LIST
51778: PUSH
51779: LD_VAR 0 1
51783: PUSH
51784: LD_INT 4
51786: MINUS
51787: PUSH
51788: LD_VAR 0 2
51792: PUSH
51793: LD_INT 1
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: LIST
51800: PUSH
51801: LD_VAR 0 1
51805: PUSH
51806: LD_VAR 0 2
51810: PUSH
51811: LD_INT 3
51813: PLUS
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: LIST
51822: PUSH
51823: LD_VAR 0 1
51827: PUSH
51828: LD_INT 4
51830: PLUS
51831: PUSH
51832: LD_VAR 0 2
51836: PUSH
51837: LD_INT 4
51839: PLUS
51840: PUSH
51841: LD_INT 5
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: LIST
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: ST_TO_ADDR
// end ; 2 :
51856: GO 52415
51858: LD_INT 2
51860: DOUBLE
51861: EQUAL
51862: IFTRUE 51866
51864: GO 51995
51866: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51867: LD_ADDR_VAR 0 5
51871: PUSH
51872: LD_VAR 0 1
51876: PUSH
51877: LD_VAR 0 2
51881: PUSH
51882: LD_INT 3
51884: MINUS
51885: PUSH
51886: LD_INT 3
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: LIST
51893: PUSH
51894: LD_VAR 0 1
51898: PUSH
51899: LD_INT 4
51901: PLUS
51902: PUSH
51903: LD_VAR 0 2
51907: PUSH
51908: LD_INT 4
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: LIST
51915: PUSH
51916: LD_VAR 0 1
51920: PUSH
51921: LD_VAR 0 2
51925: PUSH
51926: LD_INT 4
51928: PLUS
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: LIST
51937: PUSH
51938: LD_VAR 0 1
51942: PUSH
51943: LD_INT 3
51945: MINUS
51946: PUSH
51947: LD_VAR 0 2
51951: PUSH
51952: LD_INT 1
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: LIST
51959: PUSH
51960: LD_VAR 0 1
51964: PUSH
51965: LD_INT 4
51967: MINUS
51968: PUSH
51969: LD_VAR 0 2
51973: PUSH
51974: LD_INT 4
51976: MINUS
51977: PUSH
51978: LD_INT 2
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: LIST
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: ST_TO_ADDR
// end ; 3 :
51993: GO 52415
51995: LD_INT 3
51997: DOUBLE
51998: EQUAL
51999: IFTRUE 52003
52001: GO 52136
52003: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52004: LD_ADDR_VAR 0 5
52008: PUSH
52009: LD_VAR 0 1
52013: PUSH
52014: LD_INT 3
52016: PLUS
52017: PUSH
52018: LD_VAR 0 2
52022: PUSH
52023: LD_INT 4
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: LIST
52030: PUSH
52031: LD_VAR 0 1
52035: PUSH
52036: LD_INT 4
52038: PLUS
52039: PUSH
52040: LD_VAR 0 2
52044: PUSH
52045: LD_INT 4
52047: PLUS
52048: PUSH
52049: LD_INT 5
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: LIST
52056: PUSH
52057: LD_VAR 0 1
52061: PUSH
52062: LD_INT 4
52064: MINUS
52065: PUSH
52066: LD_VAR 0 2
52070: PUSH
52071: LD_INT 1
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: LIST
52078: PUSH
52079: LD_VAR 0 1
52083: PUSH
52084: LD_VAR 0 2
52088: PUSH
52089: LD_INT 4
52091: MINUS
52092: PUSH
52093: LD_INT 3
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: LIST
52100: PUSH
52101: LD_VAR 0 1
52105: PUSH
52106: LD_INT 3
52108: MINUS
52109: PUSH
52110: LD_VAR 0 2
52114: PUSH
52115: LD_INT 3
52117: MINUS
52118: PUSH
52119: LD_INT 2
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: LIST
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: ST_TO_ADDR
// end ; 4 :
52134: GO 52415
52136: LD_INT 4
52138: DOUBLE
52139: EQUAL
52140: IFTRUE 52144
52142: GO 52277
52144: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52145: LD_ADDR_VAR 0 5
52149: PUSH
52150: LD_VAR 0 1
52154: PUSH
52155: LD_VAR 0 2
52159: PUSH
52160: LD_INT 4
52162: PLUS
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: LIST
52171: PUSH
52172: LD_VAR 0 1
52176: PUSH
52177: LD_INT 3
52179: PLUS
52180: PUSH
52181: LD_VAR 0 2
52185: PUSH
52186: LD_INT 3
52188: PLUS
52189: PUSH
52190: LD_INT 5
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: LIST
52197: PUSH
52198: LD_VAR 0 1
52202: PUSH
52203: LD_INT 4
52205: PLUS
52206: PUSH
52207: LD_VAR 0 2
52211: PUSH
52212: LD_INT 4
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: LIST
52219: PUSH
52220: LD_VAR 0 1
52224: PUSH
52225: LD_VAR 0 2
52229: PUSH
52230: LD_INT 3
52232: MINUS
52233: PUSH
52234: LD_INT 3
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: LIST
52241: PUSH
52242: LD_VAR 0 1
52246: PUSH
52247: LD_INT 4
52249: MINUS
52250: PUSH
52251: LD_VAR 0 2
52255: PUSH
52256: LD_INT 4
52258: MINUS
52259: PUSH
52260: LD_INT 2
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: LIST
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: ST_TO_ADDR
// end ; 5 :
52275: GO 52415
52277: LD_INT 5
52279: DOUBLE
52280: EQUAL
52281: IFTRUE 52285
52283: GO 52414
52285: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52286: LD_ADDR_VAR 0 5
52290: PUSH
52291: LD_VAR 0 1
52295: PUSH
52296: LD_INT 4
52298: MINUS
52299: PUSH
52300: LD_VAR 0 2
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: LIST
52312: PUSH
52313: LD_VAR 0 1
52317: PUSH
52318: LD_VAR 0 2
52322: PUSH
52323: LD_INT 4
52325: MINUS
52326: PUSH
52327: LD_INT 3
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: LIST
52334: PUSH
52335: LD_VAR 0 1
52339: PUSH
52340: LD_INT 4
52342: PLUS
52343: PUSH
52344: LD_VAR 0 2
52348: PUSH
52349: LD_INT 4
52351: PLUS
52352: PUSH
52353: LD_INT 5
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: LIST
52360: PUSH
52361: LD_VAR 0 1
52365: PUSH
52366: LD_INT 3
52368: PLUS
52369: PUSH
52370: LD_VAR 0 2
52374: PUSH
52375: LD_INT 4
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: LIST
52382: PUSH
52383: LD_VAR 0 1
52387: PUSH
52388: LD_VAR 0 2
52392: PUSH
52393: LD_INT 3
52395: PLUS
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: LIST
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: ST_TO_ADDR
// end ; end ;
52412: GO 52415
52414: POP
// result := list ;
52415: LD_ADDR_VAR 0 4
52419: PUSH
52420: LD_VAR 0 5
52424: ST_TO_ADDR
// end ;
52425: LD_VAR 0 4
52429: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52430: LD_INT 0
52432: PPUSH
52433: PPUSH
52434: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52435: LD_VAR 0 1
52439: NOT
52440: PUSH
52441: LD_VAR 0 2
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: LD_INT 2
52451: PUSH
52452: LD_INT 3
52454: PUSH
52455: LD_INT 4
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: IN
52464: NOT
52465: OR
52466: IFFALSE 52470
// exit ;
52468: GO 52562
// tmp := [ ] ;
52470: LD_ADDR_VAR 0 5
52474: PUSH
52475: EMPTY
52476: ST_TO_ADDR
// for i in units do
52477: LD_ADDR_VAR 0 4
52481: PUSH
52482: LD_VAR 0 1
52486: PUSH
52487: FOR_IN
52488: IFFALSE 52531
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
52490: LD_ADDR_VAR 0 5
52494: PUSH
52495: LD_VAR 0 5
52499: PPUSH
52500: LD_VAR 0 5
52504: PUSH
52505: LD_INT 1
52507: PLUS
52508: PPUSH
52509: LD_VAR 0 4
52513: PPUSH
52514: LD_VAR 0 2
52518: PPUSH
52519: CALL_OW 259
52523: PPUSH
52524: CALL_OW 2
52528: ST_TO_ADDR
52529: GO 52487
52531: POP
52532: POP
// if not tmp then
52533: LD_VAR 0 5
52537: NOT
52538: IFFALSE 52542
// exit ;
52540: GO 52562
// result := SortListByListDesc ( units , tmp ) ;
52542: LD_ADDR_VAR 0 3
52546: PUSH
52547: LD_VAR 0 1
52551: PPUSH
52552: LD_VAR 0 5
52556: PPUSH
52557: CALL_OW 77
52561: ST_TO_ADDR
// end ;
52562: LD_VAR 0 3
52566: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52567: LD_INT 0
52569: PPUSH
52570: PPUSH
52571: PPUSH
// x := GetX ( building ) ;
52572: LD_ADDR_VAR 0 4
52576: PUSH
52577: LD_VAR 0 2
52581: PPUSH
52582: CALL_OW 250
52586: ST_TO_ADDR
// y := GetY ( building ) ;
52587: LD_ADDR_VAR 0 5
52591: PUSH
52592: LD_VAR 0 2
52596: PPUSH
52597: CALL_OW 251
52601: ST_TO_ADDR
// if GetTaskList ( unit ) then
52602: LD_VAR 0 1
52606: PPUSH
52607: CALL_OW 437
52611: IFFALSE 52706
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52613: LD_STRING e
52615: PUSH
52616: LD_VAR 0 1
52620: PPUSH
52621: CALL_OW 437
52625: PUSH
52626: LD_INT 1
52628: ARRAY
52629: PUSH
52630: LD_INT 1
52632: ARRAY
52633: EQUAL
52634: PUSH
52635: LD_VAR 0 4
52639: PUSH
52640: LD_VAR 0 1
52644: PPUSH
52645: CALL_OW 437
52649: PUSH
52650: LD_INT 1
52652: ARRAY
52653: PUSH
52654: LD_INT 2
52656: ARRAY
52657: EQUAL
52658: AND
52659: PUSH
52660: LD_VAR 0 5
52664: PUSH
52665: LD_VAR 0 1
52669: PPUSH
52670: CALL_OW 437
52674: PUSH
52675: LD_INT 1
52677: ARRAY
52678: PUSH
52679: LD_INT 3
52681: ARRAY
52682: EQUAL
52683: AND
52684: IFFALSE 52696
// result := true else
52686: LD_ADDR_VAR 0 3
52690: PUSH
52691: LD_INT 1
52693: ST_TO_ADDR
52694: GO 52704
// result := false ;
52696: LD_ADDR_VAR 0 3
52700: PUSH
52701: LD_INT 0
52703: ST_TO_ADDR
// end else
52704: GO 52714
// result := false ;
52706: LD_ADDR_VAR 0 3
52710: PUSH
52711: LD_INT 0
52713: ST_TO_ADDR
// end ;
52714: LD_VAR 0 3
52718: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52719: LD_INT 0
52721: PPUSH
52722: PPUSH
52723: PPUSH
52724: PPUSH
// if not unit or not area then
52725: LD_VAR 0 1
52729: NOT
52730: PUSH
52731: LD_VAR 0 2
52735: NOT
52736: OR
52737: IFFALSE 52741
// exit ;
52739: GO 52905
// tmp := AreaToList ( area , i ) ;
52741: LD_ADDR_VAR 0 6
52745: PUSH
52746: LD_VAR 0 2
52750: PPUSH
52751: LD_VAR 0 5
52755: PPUSH
52756: CALL_OW 517
52760: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52761: LD_ADDR_VAR 0 5
52765: PUSH
52766: DOUBLE
52767: LD_INT 1
52769: DEC
52770: ST_TO_ADDR
52771: LD_VAR 0 6
52775: PUSH
52776: LD_INT 1
52778: ARRAY
52779: PUSH
52780: FOR_TO
52781: IFFALSE 52903
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52783: LD_ADDR_VAR 0 7
52787: PUSH
52788: LD_VAR 0 6
52792: PUSH
52793: LD_INT 1
52795: ARRAY
52796: PUSH
52797: LD_VAR 0 5
52801: ARRAY
52802: PUSH
52803: LD_VAR 0 6
52807: PUSH
52808: LD_INT 2
52810: ARRAY
52811: PUSH
52812: LD_VAR 0 5
52816: ARRAY
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
52822: LD_VAR 0 7
52826: PUSH
52827: LD_INT 1
52829: ARRAY
52830: PPUSH
52831: LD_VAR 0 7
52835: PUSH
52836: LD_INT 2
52838: ARRAY
52839: PPUSH
52840: CALL_OW 428
52844: PUSH
52845: LD_INT 0
52847: EQUAL
52848: IFFALSE 52901
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52850: LD_VAR 0 1
52854: PPUSH
52855: LD_VAR 0 7
52859: PUSH
52860: LD_INT 1
52862: ARRAY
52863: PPUSH
52864: LD_VAR 0 7
52868: PUSH
52869: LD_INT 2
52871: ARRAY
52872: PPUSH
52873: LD_VAR 0 3
52877: PPUSH
52878: CALL_OW 48
// result := IsPlaced ( unit ) ;
52882: LD_ADDR_VAR 0 4
52886: PUSH
52887: LD_VAR 0 1
52891: PPUSH
52892: CALL_OW 305
52896: ST_TO_ADDR
// exit ;
52897: POP
52898: POP
52899: GO 52905
// end ; end ;
52901: GO 52780
52903: POP
52904: POP
// end ;
52905: LD_VAR 0 4
52909: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52910: LD_INT 0
52912: PPUSH
52913: PPUSH
52914: PPUSH
// if not side or side > 8 then
52915: LD_VAR 0 1
52919: NOT
52920: PUSH
52921: LD_VAR 0 1
52925: PUSH
52926: LD_INT 8
52928: GREATER
52929: OR
52930: IFFALSE 52934
// exit ;
52932: GO 53121
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52934: LD_ADDR_VAR 0 4
52938: PUSH
52939: LD_INT 22
52941: PUSH
52942: LD_VAR 0 1
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 21
52953: PUSH
52954: LD_INT 3
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PPUSH
52965: CALL_OW 69
52969: ST_TO_ADDR
// if not tmp then
52970: LD_VAR 0 4
52974: NOT
52975: IFFALSE 52979
// exit ;
52977: GO 53121
// enable_addtolog := true ;
52979: LD_ADDR_OWVAR 81
52983: PUSH
52984: LD_INT 1
52986: ST_TO_ADDR
// AddToLog ( [ ) ;
52987: LD_STRING [
52989: PPUSH
52990: CALL_OW 561
// for i in tmp do
52994: LD_ADDR_VAR 0 3
52998: PUSH
52999: LD_VAR 0 4
53003: PUSH
53004: FOR_IN
53005: IFFALSE 53112
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53007: LD_STRING [
53009: PUSH
53010: LD_VAR 0 3
53014: PPUSH
53015: CALL_OW 266
53019: STR
53020: PUSH
53021: LD_STRING , 
53023: STR
53024: PUSH
53025: LD_VAR 0 3
53029: PPUSH
53030: CALL_OW 250
53034: STR
53035: PUSH
53036: LD_STRING , 
53038: STR
53039: PUSH
53040: LD_VAR 0 3
53044: PPUSH
53045: CALL_OW 251
53049: STR
53050: PUSH
53051: LD_STRING , 
53053: STR
53054: PUSH
53055: LD_VAR 0 3
53059: PPUSH
53060: CALL_OW 254
53064: STR
53065: PUSH
53066: LD_STRING , 
53068: STR
53069: PUSH
53070: LD_VAR 0 3
53074: PPUSH
53075: LD_INT 1
53077: PPUSH
53078: CALL_OW 268
53082: STR
53083: PUSH
53084: LD_STRING , 
53086: STR
53087: PUSH
53088: LD_VAR 0 3
53092: PPUSH
53093: LD_INT 2
53095: PPUSH
53096: CALL_OW 268
53100: STR
53101: PUSH
53102: LD_STRING ],
53104: STR
53105: PPUSH
53106: CALL_OW 561
// end ;
53110: GO 53004
53112: POP
53113: POP
// AddToLog ( ]; ) ;
53114: LD_STRING ];
53116: PPUSH
53117: CALL_OW 561
// end ;
53121: LD_VAR 0 2
53125: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53126: LD_INT 0
53128: PPUSH
53129: PPUSH
53130: PPUSH
53131: PPUSH
53132: PPUSH
// if not area or not rate or not max then
53133: LD_VAR 0 1
53137: NOT
53138: PUSH
53139: LD_VAR 0 2
53143: NOT
53144: OR
53145: PUSH
53146: LD_VAR 0 4
53150: NOT
53151: OR
53152: IFFALSE 53156
// exit ;
53154: GO 53348
// while 1 do
53156: LD_INT 1
53158: IFFALSE 53348
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53160: LD_ADDR_VAR 0 9
53164: PUSH
53165: LD_VAR 0 1
53169: PPUSH
53170: LD_INT 1
53172: PPUSH
53173: CALL_OW 287
53177: PUSH
53178: LD_INT 10
53180: MUL
53181: ST_TO_ADDR
// r := rate / 10 ;
53182: LD_ADDR_VAR 0 7
53186: PUSH
53187: LD_VAR 0 2
53191: PUSH
53192: LD_INT 10
53194: DIVREAL
53195: ST_TO_ADDR
// time := 1 1$00 ;
53196: LD_ADDR_VAR 0 8
53200: PUSH
53201: LD_INT 2100
53203: ST_TO_ADDR
// if amount < min then
53204: LD_VAR 0 9
53208: PUSH
53209: LD_VAR 0 3
53213: LESS
53214: IFFALSE 53232
// r := r * 2 else
53216: LD_ADDR_VAR 0 7
53220: PUSH
53221: LD_VAR 0 7
53225: PUSH
53226: LD_INT 2
53228: MUL
53229: ST_TO_ADDR
53230: GO 53258
// if amount > max then
53232: LD_VAR 0 9
53236: PUSH
53237: LD_VAR 0 4
53241: GREATER
53242: IFFALSE 53258
// r := r / 2 ;
53244: LD_ADDR_VAR 0 7
53248: PUSH
53249: LD_VAR 0 7
53253: PUSH
53254: LD_INT 2
53256: DIVREAL
53257: ST_TO_ADDR
// time := time / r ;
53258: LD_ADDR_VAR 0 8
53262: PUSH
53263: LD_VAR 0 8
53267: PUSH
53268: LD_VAR 0 7
53272: DIVREAL
53273: ST_TO_ADDR
// if time < 0 then
53274: LD_VAR 0 8
53278: PUSH
53279: LD_INT 0
53281: LESS
53282: IFFALSE 53299
// time := time * - 1 ;
53284: LD_ADDR_VAR 0 8
53288: PUSH
53289: LD_VAR 0 8
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: MUL
53298: ST_TO_ADDR
// wait ( time ) ;
53299: LD_VAR 0 8
53303: PPUSH
53304: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
53308: LD_INT 35
53310: PPUSH
53311: LD_INT 875
53313: PPUSH
53314: CALL_OW 12
53318: PPUSH
53319: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53323: LD_INT 1
53325: PPUSH
53326: LD_INT 5
53328: PPUSH
53329: CALL_OW 12
53333: PPUSH
53334: LD_VAR 0 1
53338: PPUSH
53339: LD_INT 1
53341: PPUSH
53342: CALL_OW 55
// end ;
53346: GO 53156
// end ;
53348: LD_VAR 0 5
53352: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53353: LD_INT 0
53355: PPUSH
53356: PPUSH
53357: PPUSH
53358: PPUSH
53359: PPUSH
53360: PPUSH
53361: PPUSH
53362: PPUSH
// if not turrets or not factories then
53363: LD_VAR 0 1
53367: NOT
53368: PUSH
53369: LD_VAR 0 2
53373: NOT
53374: OR
53375: IFFALSE 53379
// exit ;
53377: GO 53686
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53379: LD_ADDR_VAR 0 10
53383: PUSH
53384: LD_INT 5
53386: PUSH
53387: LD_INT 6
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 2
53396: PUSH
53397: LD_INT 4
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 3
53406: PUSH
53407: LD_INT 5
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 24
53421: PUSH
53422: LD_INT 25
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 23
53431: PUSH
53432: LD_INT 27
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 42
53445: PUSH
53446: LD_INT 43
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 44
53455: PUSH
53456: LD_INT 46
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 45
53465: PUSH
53466: LD_INT 47
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: LIST
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: LIST
53482: ST_TO_ADDR
// result := [ ] ;
53483: LD_ADDR_VAR 0 3
53487: PUSH
53488: EMPTY
53489: ST_TO_ADDR
// for i in turrets do
53490: LD_ADDR_VAR 0 4
53494: PUSH
53495: LD_VAR 0 1
53499: PUSH
53500: FOR_IN
53501: IFFALSE 53684
// begin nat := GetNation ( i ) ;
53503: LD_ADDR_VAR 0 7
53507: PUSH
53508: LD_VAR 0 4
53512: PPUSH
53513: CALL_OW 248
53517: ST_TO_ADDR
// weapon := 0 ;
53518: LD_ADDR_VAR 0 8
53522: PUSH
53523: LD_INT 0
53525: ST_TO_ADDR
// if not nat then
53526: LD_VAR 0 7
53530: NOT
53531: IFFALSE 53535
// continue ;
53533: GO 53500
// for j in list [ nat ] do
53535: LD_ADDR_VAR 0 5
53539: PUSH
53540: LD_VAR 0 10
53544: PUSH
53545: LD_VAR 0 7
53549: ARRAY
53550: PUSH
53551: FOR_IN
53552: IFFALSE 53593
// if GetBWeapon ( i ) = j [ 1 ] then
53554: LD_VAR 0 4
53558: PPUSH
53559: CALL_OW 269
53563: PUSH
53564: LD_VAR 0 5
53568: PUSH
53569: LD_INT 1
53571: ARRAY
53572: EQUAL
53573: IFFALSE 53591
// begin weapon := j [ 2 ] ;
53575: LD_ADDR_VAR 0 8
53579: PUSH
53580: LD_VAR 0 5
53584: PUSH
53585: LD_INT 2
53587: ARRAY
53588: ST_TO_ADDR
// break ;
53589: GO 53593
// end ;
53591: GO 53551
53593: POP
53594: POP
// if not weapon then
53595: LD_VAR 0 8
53599: NOT
53600: IFFALSE 53604
// continue ;
53602: GO 53500
// for k in factories do
53604: LD_ADDR_VAR 0 6
53608: PUSH
53609: LD_VAR 0 2
53613: PUSH
53614: FOR_IN
53615: IFFALSE 53680
// begin weapons := AvailableWeaponList ( k ) ;
53617: LD_ADDR_VAR 0 9
53621: PUSH
53622: LD_VAR 0 6
53626: PPUSH
53627: CALL_OW 478
53631: ST_TO_ADDR
// if not weapons then
53632: LD_VAR 0 9
53636: NOT
53637: IFFALSE 53641
// continue ;
53639: GO 53614
// if weapon in weapons then
53641: LD_VAR 0 8
53645: PUSH
53646: LD_VAR 0 9
53650: IN
53651: IFFALSE 53678
// begin result := [ i , weapon ] ;
53653: LD_ADDR_VAR 0 3
53657: PUSH
53658: LD_VAR 0 4
53662: PUSH
53663: LD_VAR 0 8
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: ST_TO_ADDR
// exit ;
53672: POP
53673: POP
53674: POP
53675: POP
53676: GO 53686
// end ; end ;
53678: GO 53614
53680: POP
53681: POP
// end ;
53682: GO 53500
53684: POP
53685: POP
// end ;
53686: LD_VAR 0 3
53690: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53691: LD_INT 0
53693: PPUSH
// if not side or side > 8 then
53694: LD_VAR 0 3
53698: NOT
53699: PUSH
53700: LD_VAR 0 3
53704: PUSH
53705: LD_INT 8
53707: GREATER
53708: OR
53709: IFFALSE 53713
// exit ;
53711: GO 53772
// if not range then
53713: LD_VAR 0 4
53717: NOT
53718: IFFALSE 53729
// range := - 12 ;
53720: LD_ADDR_VAR 0 4
53724: PUSH
53725: LD_INT 12
53727: NEG
53728: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53729: LD_VAR 0 1
53733: PPUSH
53734: LD_VAR 0 2
53738: PPUSH
53739: LD_VAR 0 3
53743: PPUSH
53744: LD_VAR 0 4
53748: PPUSH
53749: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53753: LD_VAR 0 1
53757: PPUSH
53758: LD_VAR 0 2
53762: PPUSH
53763: LD_VAR 0 3
53767: PPUSH
53768: CALL_OW 331
// end ;
53772: LD_VAR 0 5
53776: RET
// export function Video ( mode ) ; begin
53777: LD_INT 0
53779: PPUSH
// ingame_video = mode ;
53780: LD_ADDR_OWVAR 52
53784: PUSH
53785: LD_VAR 0 1
53789: ST_TO_ADDR
// interface_hidden = mode ;
53790: LD_ADDR_OWVAR 54
53794: PUSH
53795: LD_VAR 0 1
53799: ST_TO_ADDR
// end ;
53800: LD_VAR 0 2
53804: RET
// export function Join ( array , element ) ; begin
53805: LD_INT 0
53807: PPUSH
// result := array ^ element ;
53808: LD_ADDR_VAR 0 3
53812: PUSH
53813: LD_VAR 0 1
53817: PUSH
53818: LD_VAR 0 2
53822: ADD
53823: ST_TO_ADDR
// end ;
53824: LD_VAR 0 3
53828: RET
// export function JoinUnion ( array , element ) ; begin
53829: LD_INT 0
53831: PPUSH
// result := array union element ;
53832: LD_ADDR_VAR 0 3
53836: PUSH
53837: LD_VAR 0 1
53841: PUSH
53842: LD_VAR 0 2
53846: UNION
53847: ST_TO_ADDR
// end ;
53848: LD_VAR 0 3
53852: RET
// export function GetBehemoths ( side ) ; begin
53853: LD_INT 0
53855: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
53856: LD_ADDR_VAR 0 2
53860: PUSH
53861: LD_INT 22
53863: PUSH
53864: LD_VAR 0 1
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 31
53875: PUSH
53876: LD_INT 25
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PPUSH
53887: CALL_OW 69
53891: ST_TO_ADDR
// end ;
53892: LD_VAR 0 2
53896: RET
// export function Shuffle ( array ) ; var i , index ; begin
53897: LD_INT 0
53899: PPUSH
53900: PPUSH
53901: PPUSH
// result := [ ] ;
53902: LD_ADDR_VAR 0 2
53906: PUSH
53907: EMPTY
53908: ST_TO_ADDR
// if not array then
53909: LD_VAR 0 1
53913: NOT
53914: IFFALSE 53918
// exit ;
53916: GO 54017
// Randomize ;
53918: CALL_OW 10
// for i = array downto 1 do
53922: LD_ADDR_VAR 0 3
53926: PUSH
53927: DOUBLE
53928: LD_VAR 0 1
53932: INC
53933: ST_TO_ADDR
53934: LD_INT 1
53936: PUSH
53937: FOR_DOWNTO
53938: IFFALSE 54015
// begin index := rand ( 1 , array ) ;
53940: LD_ADDR_VAR 0 4
53944: PUSH
53945: LD_INT 1
53947: PPUSH
53948: LD_VAR 0 1
53952: PPUSH
53953: CALL_OW 12
53957: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53958: LD_ADDR_VAR 0 2
53962: PUSH
53963: LD_VAR 0 2
53967: PPUSH
53968: LD_VAR 0 2
53972: PUSH
53973: LD_INT 1
53975: PLUS
53976: PPUSH
53977: LD_VAR 0 1
53981: PUSH
53982: LD_VAR 0 4
53986: ARRAY
53987: PPUSH
53988: CALL_OW 2
53992: ST_TO_ADDR
// array := Delete ( array , index ) ;
53993: LD_ADDR_VAR 0 1
53997: PUSH
53998: LD_VAR 0 1
54002: PPUSH
54003: LD_VAR 0 4
54007: PPUSH
54008: CALL_OW 3
54012: ST_TO_ADDR
// end ;
54013: GO 53937
54015: POP
54016: POP
// end ;
54017: LD_VAR 0 2
54021: RET
// export function GetBaseMaterials ( base ) ; begin
54022: LD_INT 0
54024: PPUSH
// result := [ 0 , 0 , 0 ] ;
54025: LD_ADDR_VAR 0 2
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: LD_INT 0
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: LIST
54043: ST_TO_ADDR
// if not base then
54044: LD_VAR 0 1
54048: NOT
54049: IFFALSE 54053
// exit ;
54051: GO 54102
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54053: LD_ADDR_VAR 0 2
54057: PUSH
54058: LD_VAR 0 1
54062: PPUSH
54063: LD_INT 1
54065: PPUSH
54066: CALL_OW 275
54070: PUSH
54071: LD_VAR 0 1
54075: PPUSH
54076: LD_INT 2
54078: PPUSH
54079: CALL_OW 275
54083: PUSH
54084: LD_VAR 0 1
54088: PPUSH
54089: LD_INT 3
54091: PPUSH
54092: CALL_OW 275
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: LIST
54101: ST_TO_ADDR
// end ; end_of_file
54102: LD_VAR 0 2
54106: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
54107: GO 54109
54109: DISABLE
// begin ru_radar := 98 ;
54110: LD_ADDR_EXP 45
54114: PUSH
54115: LD_INT 98
54117: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
54118: LD_ADDR_EXP 46
54122: PUSH
54123: LD_INT 89
54125: ST_TO_ADDR
// us_hack := 99 ;
54126: LD_ADDR_EXP 47
54130: PUSH
54131: LD_INT 99
54133: ST_TO_ADDR
// us_artillery := 97 ;
54134: LD_ADDR_EXP 48
54138: PUSH
54139: LD_INT 97
54141: ST_TO_ADDR
// ar_bio_bomb := 91 ;
54142: LD_ADDR_EXP 49
54146: PUSH
54147: LD_INT 91
54149: ST_TO_ADDR
// end ; end_of_file
54150: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
54151: LD_INT 0
54153: PPUSH
54154: PPUSH
// skirmish := false ;
54155: LD_ADDR_EXP 50
54159: PUSH
54160: LD_INT 0
54162: ST_TO_ADDR
// debug_mc := false ;
54163: LD_ADDR_EXP 51
54167: PUSH
54168: LD_INT 0
54170: ST_TO_ADDR
// mc_bases := [ ] ;
54171: LD_ADDR_EXP 52
54175: PUSH
54176: EMPTY
54177: ST_TO_ADDR
// mc_sides := [ ] ;
54178: LD_ADDR_EXP 78
54182: PUSH
54183: EMPTY
54184: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
54185: LD_ADDR_EXP 53
54189: PUSH
54190: EMPTY
54191: ST_TO_ADDR
// mc_building_repairs := [ ] ;
54192: LD_ADDR_EXP 54
54196: PUSH
54197: EMPTY
54198: ST_TO_ADDR
// mc_need_heal := [ ] ;
54199: LD_ADDR_EXP 55
54203: PUSH
54204: EMPTY
54205: ST_TO_ADDR
// mc_healers := [ ] ;
54206: LD_ADDR_EXP 56
54210: PUSH
54211: EMPTY
54212: ST_TO_ADDR
// mc_build_list := [ ] ;
54213: LD_ADDR_EXP 57
54217: PUSH
54218: EMPTY
54219: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
54220: LD_ADDR_EXP 84
54224: PUSH
54225: EMPTY
54226: ST_TO_ADDR
// mc_builders := [ ] ;
54227: LD_ADDR_EXP 58
54231: PUSH
54232: EMPTY
54233: ST_TO_ADDR
// mc_construct_list := [ ] ;
54234: LD_ADDR_EXP 59
54238: PUSH
54239: EMPTY
54240: ST_TO_ADDR
// mc_turret_list := [ ] ;
54241: LD_ADDR_EXP 60
54245: PUSH
54246: EMPTY
54247: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
54248: LD_ADDR_EXP 61
54252: PUSH
54253: EMPTY
54254: ST_TO_ADDR
// mc_miners := [ ] ;
54255: LD_ADDR_EXP 66
54259: PUSH
54260: EMPTY
54261: ST_TO_ADDR
// mc_mines := [ ] ;
54262: LD_ADDR_EXP 65
54266: PUSH
54267: EMPTY
54268: ST_TO_ADDR
// mc_minefields := [ ] ;
54269: LD_ADDR_EXP 67
54273: PUSH
54274: EMPTY
54275: ST_TO_ADDR
// mc_crates := [ ] ;
54276: LD_ADDR_EXP 68
54280: PUSH
54281: EMPTY
54282: ST_TO_ADDR
// mc_crates_collector := [ ] ;
54283: LD_ADDR_EXP 69
54287: PUSH
54288: EMPTY
54289: ST_TO_ADDR
// mc_crates_area := [ ] ;
54290: LD_ADDR_EXP 70
54294: PUSH
54295: EMPTY
54296: ST_TO_ADDR
// mc_vehicles := [ ] ;
54297: LD_ADDR_EXP 71
54301: PUSH
54302: EMPTY
54303: ST_TO_ADDR
// mc_attack := [ ] ;
54304: LD_ADDR_EXP 72
54308: PUSH
54309: EMPTY
54310: ST_TO_ADDR
// mc_produce := [ ] ;
54311: LD_ADDR_EXP 73
54315: PUSH
54316: EMPTY
54317: ST_TO_ADDR
// mc_defender := [ ] ;
54318: LD_ADDR_EXP 74
54322: PUSH
54323: EMPTY
54324: ST_TO_ADDR
// mc_parking := [ ] ;
54325: LD_ADDR_EXP 76
54329: PUSH
54330: EMPTY
54331: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
54332: LD_ADDR_EXP 62
54336: PUSH
54337: EMPTY
54338: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
54339: LD_ADDR_EXP 64
54343: PUSH
54344: EMPTY
54345: ST_TO_ADDR
// mc_scan := [ ] ;
54346: LD_ADDR_EXP 75
54350: PUSH
54351: EMPTY
54352: ST_TO_ADDR
// mc_scan_area := [ ] ;
54353: LD_ADDR_EXP 77
54357: PUSH
54358: EMPTY
54359: ST_TO_ADDR
// mc_tech := [ ] ;
54360: LD_ADDR_EXP 79
54364: PUSH
54365: EMPTY
54366: ST_TO_ADDR
// mc_class := [ ] ;
54367: LD_ADDR_EXP 93
54371: PUSH
54372: EMPTY
54373: ST_TO_ADDR
// mc_class_case_use := [ ] ;
54374: LD_ADDR_EXP 94
54378: PUSH
54379: EMPTY
54380: ST_TO_ADDR
// end ;
54381: LD_VAR 0 1
54385: RET
// export function MC_Kill ( base ) ; begin
54386: LD_INT 0
54388: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
54389: LD_ADDR_EXP 52
54393: PUSH
54394: LD_EXP 52
54398: PPUSH
54399: LD_VAR 0 1
54403: PPUSH
54404: EMPTY
54405: PPUSH
54406: CALL_OW 1
54410: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
54411: LD_ADDR_EXP 53
54415: PUSH
54416: LD_EXP 53
54420: PPUSH
54421: LD_VAR 0 1
54425: PPUSH
54426: EMPTY
54427: PPUSH
54428: CALL_OW 1
54432: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
54433: LD_ADDR_EXP 54
54437: PUSH
54438: LD_EXP 54
54442: PPUSH
54443: LD_VAR 0 1
54447: PPUSH
54448: EMPTY
54449: PPUSH
54450: CALL_OW 1
54454: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
54455: LD_ADDR_EXP 55
54459: PUSH
54460: LD_EXP 55
54464: PPUSH
54465: LD_VAR 0 1
54469: PPUSH
54470: EMPTY
54471: PPUSH
54472: CALL_OW 1
54476: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
54477: LD_ADDR_EXP 56
54481: PUSH
54482: LD_EXP 56
54486: PPUSH
54487: LD_VAR 0 1
54491: PPUSH
54492: EMPTY
54493: PPUSH
54494: CALL_OW 1
54498: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
54499: LD_ADDR_EXP 57
54503: PUSH
54504: LD_EXP 57
54508: PPUSH
54509: LD_VAR 0 1
54513: PPUSH
54514: EMPTY
54515: PPUSH
54516: CALL_OW 1
54520: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
54521: LD_ADDR_EXP 58
54525: PUSH
54526: LD_EXP 58
54530: PPUSH
54531: LD_VAR 0 1
54535: PPUSH
54536: EMPTY
54537: PPUSH
54538: CALL_OW 1
54542: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
54543: LD_ADDR_EXP 59
54547: PUSH
54548: LD_EXP 59
54552: PPUSH
54553: LD_VAR 0 1
54557: PPUSH
54558: EMPTY
54559: PPUSH
54560: CALL_OW 1
54564: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
54565: LD_ADDR_EXP 60
54569: PUSH
54570: LD_EXP 60
54574: PPUSH
54575: LD_VAR 0 1
54579: PPUSH
54580: EMPTY
54581: PPUSH
54582: CALL_OW 1
54586: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
54587: LD_ADDR_EXP 61
54591: PUSH
54592: LD_EXP 61
54596: PPUSH
54597: LD_VAR 0 1
54601: PPUSH
54602: EMPTY
54603: PPUSH
54604: CALL_OW 1
54608: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
54609: LD_ADDR_EXP 62
54613: PUSH
54614: LD_EXP 62
54618: PPUSH
54619: LD_VAR 0 1
54623: PPUSH
54624: EMPTY
54625: PPUSH
54626: CALL_OW 1
54630: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
54631: LD_ADDR_EXP 63
54635: PUSH
54636: LD_EXP 63
54640: PPUSH
54641: LD_VAR 0 1
54645: PPUSH
54646: LD_INT 0
54648: PPUSH
54649: CALL_OW 1
54653: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
54654: LD_ADDR_EXP 64
54658: PUSH
54659: LD_EXP 64
54663: PPUSH
54664: LD_VAR 0 1
54668: PPUSH
54669: EMPTY
54670: PPUSH
54671: CALL_OW 1
54675: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
54676: LD_ADDR_EXP 65
54680: PUSH
54681: LD_EXP 65
54685: PPUSH
54686: LD_VAR 0 1
54690: PPUSH
54691: EMPTY
54692: PPUSH
54693: CALL_OW 1
54697: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
54698: LD_ADDR_EXP 66
54702: PUSH
54703: LD_EXP 66
54707: PPUSH
54708: LD_VAR 0 1
54712: PPUSH
54713: EMPTY
54714: PPUSH
54715: CALL_OW 1
54719: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
54720: LD_ADDR_EXP 67
54724: PUSH
54725: LD_EXP 67
54729: PPUSH
54730: LD_VAR 0 1
54734: PPUSH
54735: EMPTY
54736: PPUSH
54737: CALL_OW 1
54741: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
54742: LD_ADDR_EXP 68
54746: PUSH
54747: LD_EXP 68
54751: PPUSH
54752: LD_VAR 0 1
54756: PPUSH
54757: EMPTY
54758: PPUSH
54759: CALL_OW 1
54763: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
54764: LD_ADDR_EXP 69
54768: PUSH
54769: LD_EXP 69
54773: PPUSH
54774: LD_VAR 0 1
54778: PPUSH
54779: EMPTY
54780: PPUSH
54781: CALL_OW 1
54785: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
54786: LD_ADDR_EXP 70
54790: PUSH
54791: LD_EXP 70
54795: PPUSH
54796: LD_VAR 0 1
54800: PPUSH
54801: EMPTY
54802: PPUSH
54803: CALL_OW 1
54807: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
54808: LD_ADDR_EXP 71
54812: PUSH
54813: LD_EXP 71
54817: PPUSH
54818: LD_VAR 0 1
54822: PPUSH
54823: EMPTY
54824: PPUSH
54825: CALL_OW 1
54829: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
54830: LD_ADDR_EXP 72
54834: PUSH
54835: LD_EXP 72
54839: PPUSH
54840: LD_VAR 0 1
54844: PPUSH
54845: EMPTY
54846: PPUSH
54847: CALL_OW 1
54851: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
54852: LD_ADDR_EXP 73
54856: PUSH
54857: LD_EXP 73
54861: PPUSH
54862: LD_VAR 0 1
54866: PPUSH
54867: EMPTY
54868: PPUSH
54869: CALL_OW 1
54873: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
54874: LD_ADDR_EXP 74
54878: PUSH
54879: LD_EXP 74
54883: PPUSH
54884: LD_VAR 0 1
54888: PPUSH
54889: EMPTY
54890: PPUSH
54891: CALL_OW 1
54895: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
54896: LD_ADDR_EXP 75
54900: PUSH
54901: LD_EXP 75
54905: PPUSH
54906: LD_VAR 0 1
54910: PPUSH
54911: EMPTY
54912: PPUSH
54913: CALL_OW 1
54917: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
54918: LD_ADDR_EXP 76
54922: PUSH
54923: LD_EXP 76
54927: PPUSH
54928: LD_VAR 0 1
54932: PPUSH
54933: EMPTY
54934: PPUSH
54935: CALL_OW 1
54939: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
54940: LD_ADDR_EXP 77
54944: PUSH
54945: LD_EXP 77
54949: PPUSH
54950: LD_VAR 0 1
54954: PPUSH
54955: EMPTY
54956: PPUSH
54957: CALL_OW 1
54961: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
54962: LD_ADDR_EXP 79
54966: PUSH
54967: LD_EXP 79
54971: PPUSH
54972: LD_VAR 0 1
54976: PPUSH
54977: EMPTY
54978: PPUSH
54979: CALL_OW 1
54983: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
54984: LD_ADDR_EXP 81
54988: PUSH
54989: LD_EXP 81
54993: PPUSH
54994: LD_VAR 0 1
54998: PPUSH
54999: EMPTY
55000: PPUSH
55001: CALL_OW 1
55005: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
55006: LD_ADDR_EXP 82
55010: PUSH
55011: LD_EXP 82
55015: PPUSH
55016: LD_VAR 0 1
55020: PPUSH
55021: EMPTY
55022: PPUSH
55023: CALL_OW 1
55027: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
55028: LD_ADDR_EXP 83
55032: PUSH
55033: LD_EXP 83
55037: PPUSH
55038: LD_VAR 0 1
55042: PPUSH
55043: EMPTY
55044: PPUSH
55045: CALL_OW 1
55049: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
55050: LD_ADDR_EXP 84
55054: PUSH
55055: LD_EXP 84
55059: PPUSH
55060: LD_VAR 0 1
55064: PPUSH
55065: EMPTY
55066: PPUSH
55067: CALL_OW 1
55071: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
55072: LD_ADDR_EXP 85
55076: PUSH
55077: LD_EXP 85
55081: PPUSH
55082: LD_VAR 0 1
55086: PPUSH
55087: EMPTY
55088: PPUSH
55089: CALL_OW 1
55093: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
55094: LD_ADDR_EXP 86
55098: PUSH
55099: LD_EXP 86
55103: PPUSH
55104: LD_VAR 0 1
55108: PPUSH
55109: EMPTY
55110: PPUSH
55111: CALL_OW 1
55115: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
55116: LD_ADDR_EXP 87
55120: PUSH
55121: LD_EXP 87
55125: PPUSH
55126: LD_VAR 0 1
55130: PPUSH
55131: EMPTY
55132: PPUSH
55133: CALL_OW 1
55137: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
55138: LD_ADDR_EXP 88
55142: PUSH
55143: LD_EXP 88
55147: PPUSH
55148: LD_VAR 0 1
55152: PPUSH
55153: EMPTY
55154: PPUSH
55155: CALL_OW 1
55159: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
55160: LD_ADDR_EXP 89
55164: PUSH
55165: LD_EXP 89
55169: PPUSH
55170: LD_VAR 0 1
55174: PPUSH
55175: EMPTY
55176: PPUSH
55177: CALL_OW 1
55181: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
55182: LD_ADDR_EXP 90
55186: PUSH
55187: LD_EXP 90
55191: PPUSH
55192: LD_VAR 0 1
55196: PPUSH
55197: EMPTY
55198: PPUSH
55199: CALL_OW 1
55203: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
55204: LD_ADDR_EXP 91
55208: PUSH
55209: LD_EXP 91
55213: PPUSH
55214: LD_VAR 0 1
55218: PPUSH
55219: EMPTY
55220: PPUSH
55221: CALL_OW 1
55225: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
55226: LD_ADDR_EXP 92
55230: PUSH
55231: LD_EXP 92
55235: PPUSH
55236: LD_VAR 0 1
55240: PPUSH
55241: EMPTY
55242: PPUSH
55243: CALL_OW 1
55247: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
55248: LD_ADDR_EXP 93
55252: PUSH
55253: LD_EXP 93
55257: PPUSH
55258: LD_VAR 0 1
55262: PPUSH
55263: EMPTY
55264: PPUSH
55265: CALL_OW 1
55269: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
55270: LD_ADDR_EXP 94
55274: PUSH
55275: LD_EXP 94
55279: PPUSH
55280: LD_VAR 0 1
55284: PPUSH
55285: LD_INT 0
55287: PPUSH
55288: CALL_OW 1
55292: ST_TO_ADDR
// end ;
55293: LD_VAR 0 2
55297: RET
// export function MC_Add ( side , units ) ; var base ; begin
55298: LD_INT 0
55300: PPUSH
55301: PPUSH
// base := mc_bases + 1 ;
55302: LD_ADDR_VAR 0 4
55306: PUSH
55307: LD_EXP 52
55311: PUSH
55312: LD_INT 1
55314: PLUS
55315: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
55316: LD_ADDR_EXP 78
55320: PUSH
55321: LD_EXP 78
55325: PPUSH
55326: LD_VAR 0 4
55330: PPUSH
55331: LD_VAR 0 1
55335: PPUSH
55336: CALL_OW 1
55340: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
55341: LD_ADDR_EXP 52
55345: PUSH
55346: LD_EXP 52
55350: PPUSH
55351: LD_VAR 0 4
55355: PPUSH
55356: LD_VAR 0 2
55360: PPUSH
55361: CALL_OW 1
55365: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
55366: LD_ADDR_EXP 53
55370: PUSH
55371: LD_EXP 53
55375: PPUSH
55376: LD_VAR 0 4
55380: PPUSH
55381: EMPTY
55382: PPUSH
55383: CALL_OW 1
55387: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
55388: LD_ADDR_EXP 54
55392: PUSH
55393: LD_EXP 54
55397: PPUSH
55398: LD_VAR 0 4
55402: PPUSH
55403: EMPTY
55404: PPUSH
55405: CALL_OW 1
55409: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
55410: LD_ADDR_EXP 55
55414: PUSH
55415: LD_EXP 55
55419: PPUSH
55420: LD_VAR 0 4
55424: PPUSH
55425: EMPTY
55426: PPUSH
55427: CALL_OW 1
55431: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
55432: LD_ADDR_EXP 56
55436: PUSH
55437: LD_EXP 56
55441: PPUSH
55442: LD_VAR 0 4
55446: PPUSH
55447: EMPTY
55448: PPUSH
55449: CALL_OW 1
55453: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
55454: LD_ADDR_EXP 57
55458: PUSH
55459: LD_EXP 57
55463: PPUSH
55464: LD_VAR 0 4
55468: PPUSH
55469: EMPTY
55470: PPUSH
55471: CALL_OW 1
55475: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
55476: LD_ADDR_EXP 58
55480: PUSH
55481: LD_EXP 58
55485: PPUSH
55486: LD_VAR 0 4
55490: PPUSH
55491: EMPTY
55492: PPUSH
55493: CALL_OW 1
55497: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
55498: LD_ADDR_EXP 59
55502: PUSH
55503: LD_EXP 59
55507: PPUSH
55508: LD_VAR 0 4
55512: PPUSH
55513: EMPTY
55514: PPUSH
55515: CALL_OW 1
55519: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
55520: LD_ADDR_EXP 60
55524: PUSH
55525: LD_EXP 60
55529: PPUSH
55530: LD_VAR 0 4
55534: PPUSH
55535: EMPTY
55536: PPUSH
55537: CALL_OW 1
55541: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
55542: LD_ADDR_EXP 61
55546: PUSH
55547: LD_EXP 61
55551: PPUSH
55552: LD_VAR 0 4
55556: PPUSH
55557: EMPTY
55558: PPUSH
55559: CALL_OW 1
55563: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
55564: LD_ADDR_EXP 62
55568: PUSH
55569: LD_EXP 62
55573: PPUSH
55574: LD_VAR 0 4
55578: PPUSH
55579: EMPTY
55580: PPUSH
55581: CALL_OW 1
55585: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
55586: LD_ADDR_EXP 63
55590: PUSH
55591: LD_EXP 63
55595: PPUSH
55596: LD_VAR 0 4
55600: PPUSH
55601: LD_INT 0
55603: PPUSH
55604: CALL_OW 1
55608: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
55609: LD_ADDR_EXP 64
55613: PUSH
55614: LD_EXP 64
55618: PPUSH
55619: LD_VAR 0 4
55623: PPUSH
55624: EMPTY
55625: PPUSH
55626: CALL_OW 1
55630: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
55631: LD_ADDR_EXP 65
55635: PUSH
55636: LD_EXP 65
55640: PPUSH
55641: LD_VAR 0 4
55645: PPUSH
55646: EMPTY
55647: PPUSH
55648: CALL_OW 1
55652: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
55653: LD_ADDR_EXP 66
55657: PUSH
55658: LD_EXP 66
55662: PPUSH
55663: LD_VAR 0 4
55667: PPUSH
55668: EMPTY
55669: PPUSH
55670: CALL_OW 1
55674: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
55675: LD_ADDR_EXP 67
55679: PUSH
55680: LD_EXP 67
55684: PPUSH
55685: LD_VAR 0 4
55689: PPUSH
55690: EMPTY
55691: PPUSH
55692: CALL_OW 1
55696: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
55697: LD_ADDR_EXP 68
55701: PUSH
55702: LD_EXP 68
55706: PPUSH
55707: LD_VAR 0 4
55711: PPUSH
55712: EMPTY
55713: PPUSH
55714: CALL_OW 1
55718: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
55719: LD_ADDR_EXP 69
55723: PUSH
55724: LD_EXP 69
55728: PPUSH
55729: LD_VAR 0 4
55733: PPUSH
55734: EMPTY
55735: PPUSH
55736: CALL_OW 1
55740: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
55741: LD_ADDR_EXP 70
55745: PUSH
55746: LD_EXP 70
55750: PPUSH
55751: LD_VAR 0 4
55755: PPUSH
55756: EMPTY
55757: PPUSH
55758: CALL_OW 1
55762: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
55763: LD_ADDR_EXP 71
55767: PUSH
55768: LD_EXP 71
55772: PPUSH
55773: LD_VAR 0 4
55777: PPUSH
55778: EMPTY
55779: PPUSH
55780: CALL_OW 1
55784: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
55785: LD_ADDR_EXP 72
55789: PUSH
55790: LD_EXP 72
55794: PPUSH
55795: LD_VAR 0 4
55799: PPUSH
55800: EMPTY
55801: PPUSH
55802: CALL_OW 1
55806: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
55807: LD_ADDR_EXP 73
55811: PUSH
55812: LD_EXP 73
55816: PPUSH
55817: LD_VAR 0 4
55821: PPUSH
55822: EMPTY
55823: PPUSH
55824: CALL_OW 1
55828: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
55829: LD_ADDR_EXP 74
55833: PUSH
55834: LD_EXP 74
55838: PPUSH
55839: LD_VAR 0 4
55843: PPUSH
55844: EMPTY
55845: PPUSH
55846: CALL_OW 1
55850: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
55851: LD_ADDR_EXP 75
55855: PUSH
55856: LD_EXP 75
55860: PPUSH
55861: LD_VAR 0 4
55865: PPUSH
55866: EMPTY
55867: PPUSH
55868: CALL_OW 1
55872: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
55873: LD_ADDR_EXP 76
55877: PUSH
55878: LD_EXP 76
55882: PPUSH
55883: LD_VAR 0 4
55887: PPUSH
55888: EMPTY
55889: PPUSH
55890: CALL_OW 1
55894: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
55895: LD_ADDR_EXP 77
55899: PUSH
55900: LD_EXP 77
55904: PPUSH
55905: LD_VAR 0 4
55909: PPUSH
55910: EMPTY
55911: PPUSH
55912: CALL_OW 1
55916: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
55917: LD_ADDR_EXP 79
55921: PUSH
55922: LD_EXP 79
55926: PPUSH
55927: LD_VAR 0 4
55931: PPUSH
55932: EMPTY
55933: PPUSH
55934: CALL_OW 1
55938: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
55939: LD_ADDR_EXP 81
55943: PUSH
55944: LD_EXP 81
55948: PPUSH
55949: LD_VAR 0 4
55953: PPUSH
55954: EMPTY
55955: PPUSH
55956: CALL_OW 1
55960: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
55961: LD_ADDR_EXP 82
55965: PUSH
55966: LD_EXP 82
55970: PPUSH
55971: LD_VAR 0 4
55975: PPUSH
55976: EMPTY
55977: PPUSH
55978: CALL_OW 1
55982: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
55983: LD_ADDR_EXP 83
55987: PUSH
55988: LD_EXP 83
55992: PPUSH
55993: LD_VAR 0 4
55997: PPUSH
55998: EMPTY
55999: PPUSH
56000: CALL_OW 1
56004: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
56005: LD_ADDR_EXP 84
56009: PUSH
56010: LD_EXP 84
56014: PPUSH
56015: LD_VAR 0 4
56019: PPUSH
56020: EMPTY
56021: PPUSH
56022: CALL_OW 1
56026: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
56027: LD_ADDR_EXP 85
56031: PUSH
56032: LD_EXP 85
56036: PPUSH
56037: LD_VAR 0 4
56041: PPUSH
56042: EMPTY
56043: PPUSH
56044: CALL_OW 1
56048: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
56049: LD_ADDR_EXP 86
56053: PUSH
56054: LD_EXP 86
56058: PPUSH
56059: LD_VAR 0 4
56063: PPUSH
56064: EMPTY
56065: PPUSH
56066: CALL_OW 1
56070: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
56071: LD_ADDR_EXP 87
56075: PUSH
56076: LD_EXP 87
56080: PPUSH
56081: LD_VAR 0 4
56085: PPUSH
56086: EMPTY
56087: PPUSH
56088: CALL_OW 1
56092: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
56093: LD_ADDR_EXP 88
56097: PUSH
56098: LD_EXP 88
56102: PPUSH
56103: LD_VAR 0 4
56107: PPUSH
56108: EMPTY
56109: PPUSH
56110: CALL_OW 1
56114: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
56115: LD_ADDR_EXP 89
56119: PUSH
56120: LD_EXP 89
56124: PPUSH
56125: LD_VAR 0 4
56129: PPUSH
56130: EMPTY
56131: PPUSH
56132: CALL_OW 1
56136: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
56137: LD_ADDR_EXP 90
56141: PUSH
56142: LD_EXP 90
56146: PPUSH
56147: LD_VAR 0 4
56151: PPUSH
56152: EMPTY
56153: PPUSH
56154: CALL_OW 1
56158: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
56159: LD_ADDR_EXP 91
56163: PUSH
56164: LD_EXP 91
56168: PPUSH
56169: LD_VAR 0 4
56173: PPUSH
56174: EMPTY
56175: PPUSH
56176: CALL_OW 1
56180: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
56181: LD_ADDR_EXP 92
56185: PUSH
56186: LD_EXP 92
56190: PPUSH
56191: LD_VAR 0 4
56195: PPUSH
56196: EMPTY
56197: PPUSH
56198: CALL_OW 1
56202: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
56203: LD_ADDR_EXP 93
56207: PUSH
56208: LD_EXP 93
56212: PPUSH
56213: LD_VAR 0 4
56217: PPUSH
56218: EMPTY
56219: PPUSH
56220: CALL_OW 1
56224: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
56225: LD_ADDR_EXP 94
56229: PUSH
56230: LD_EXP 94
56234: PPUSH
56235: LD_VAR 0 4
56239: PPUSH
56240: LD_INT 0
56242: PPUSH
56243: CALL_OW 1
56247: ST_TO_ADDR
// result := base ;
56248: LD_ADDR_VAR 0 3
56252: PUSH
56253: LD_VAR 0 4
56257: ST_TO_ADDR
// end ;
56258: LD_VAR 0 3
56262: RET
// export function MC_Start ( ) ; var i ; begin
56263: LD_INT 0
56265: PPUSH
56266: PPUSH
// for i = 1 to mc_bases do
56267: LD_ADDR_VAR 0 2
56271: PUSH
56272: DOUBLE
56273: LD_INT 1
56275: DEC
56276: ST_TO_ADDR
56277: LD_EXP 52
56281: PUSH
56282: FOR_TO
56283: IFFALSE 57360
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
56285: LD_ADDR_EXP 52
56289: PUSH
56290: LD_EXP 52
56294: PPUSH
56295: LD_VAR 0 2
56299: PPUSH
56300: LD_EXP 52
56304: PUSH
56305: LD_VAR 0 2
56309: ARRAY
56310: PUSH
56311: LD_INT 0
56313: DIFF
56314: PPUSH
56315: CALL_OW 1
56319: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
56320: LD_ADDR_EXP 53
56324: PUSH
56325: LD_EXP 53
56329: PPUSH
56330: LD_VAR 0 2
56334: PPUSH
56335: EMPTY
56336: PPUSH
56337: CALL_OW 1
56341: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
56342: LD_ADDR_EXP 54
56346: PUSH
56347: LD_EXP 54
56351: PPUSH
56352: LD_VAR 0 2
56356: PPUSH
56357: EMPTY
56358: PPUSH
56359: CALL_OW 1
56363: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
56364: LD_ADDR_EXP 55
56368: PUSH
56369: LD_EXP 55
56373: PPUSH
56374: LD_VAR 0 2
56378: PPUSH
56379: EMPTY
56380: PPUSH
56381: CALL_OW 1
56385: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
56386: LD_ADDR_EXP 56
56390: PUSH
56391: LD_EXP 56
56395: PPUSH
56396: LD_VAR 0 2
56400: PPUSH
56401: EMPTY
56402: PUSH
56403: EMPTY
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PPUSH
56409: CALL_OW 1
56413: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
56414: LD_ADDR_EXP 57
56418: PUSH
56419: LD_EXP 57
56423: PPUSH
56424: LD_VAR 0 2
56428: PPUSH
56429: EMPTY
56430: PPUSH
56431: CALL_OW 1
56435: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
56436: LD_ADDR_EXP 84
56440: PUSH
56441: LD_EXP 84
56445: PPUSH
56446: LD_VAR 0 2
56450: PPUSH
56451: EMPTY
56452: PPUSH
56453: CALL_OW 1
56457: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
56458: LD_ADDR_EXP 58
56462: PUSH
56463: LD_EXP 58
56467: PPUSH
56468: LD_VAR 0 2
56472: PPUSH
56473: EMPTY
56474: PPUSH
56475: CALL_OW 1
56479: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
56480: LD_ADDR_EXP 59
56484: PUSH
56485: LD_EXP 59
56489: PPUSH
56490: LD_VAR 0 2
56494: PPUSH
56495: EMPTY
56496: PPUSH
56497: CALL_OW 1
56501: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
56502: LD_ADDR_EXP 60
56506: PUSH
56507: LD_EXP 60
56511: PPUSH
56512: LD_VAR 0 2
56516: PPUSH
56517: LD_EXP 52
56521: PUSH
56522: LD_VAR 0 2
56526: ARRAY
56527: PPUSH
56528: LD_INT 2
56530: PUSH
56531: LD_INT 30
56533: PUSH
56534: LD_INT 32
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 30
56543: PUSH
56544: LD_INT 33
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: LIST
56555: PPUSH
56556: CALL_OW 72
56560: PPUSH
56561: CALL_OW 1
56565: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
56566: LD_ADDR_EXP 61
56570: PUSH
56571: LD_EXP 61
56575: PPUSH
56576: LD_VAR 0 2
56580: PPUSH
56581: LD_EXP 52
56585: PUSH
56586: LD_VAR 0 2
56590: ARRAY
56591: PPUSH
56592: LD_INT 2
56594: PUSH
56595: LD_INT 30
56597: PUSH
56598: LD_INT 32
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 30
56607: PUSH
56608: LD_INT 31
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 58
56622: PUSH
56623: EMPTY
56624: LIST
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PPUSH
56630: CALL_OW 72
56634: PPUSH
56635: CALL_OW 1
56639: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
56640: LD_ADDR_EXP 62
56644: PUSH
56645: LD_EXP 62
56649: PPUSH
56650: LD_VAR 0 2
56654: PPUSH
56655: EMPTY
56656: PPUSH
56657: CALL_OW 1
56661: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
56662: LD_ADDR_EXP 66
56666: PUSH
56667: LD_EXP 66
56671: PPUSH
56672: LD_VAR 0 2
56676: PPUSH
56677: EMPTY
56678: PPUSH
56679: CALL_OW 1
56683: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
56684: LD_ADDR_EXP 65
56688: PUSH
56689: LD_EXP 65
56693: PPUSH
56694: LD_VAR 0 2
56698: PPUSH
56699: EMPTY
56700: PPUSH
56701: CALL_OW 1
56705: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
56706: LD_ADDR_EXP 67
56710: PUSH
56711: LD_EXP 67
56715: PPUSH
56716: LD_VAR 0 2
56720: PPUSH
56721: EMPTY
56722: PPUSH
56723: CALL_OW 1
56727: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
56728: LD_ADDR_EXP 68
56732: PUSH
56733: LD_EXP 68
56737: PPUSH
56738: LD_VAR 0 2
56742: PPUSH
56743: EMPTY
56744: PPUSH
56745: CALL_OW 1
56749: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
56750: LD_ADDR_EXP 69
56754: PUSH
56755: LD_EXP 69
56759: PPUSH
56760: LD_VAR 0 2
56764: PPUSH
56765: EMPTY
56766: PPUSH
56767: CALL_OW 1
56771: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
56772: LD_ADDR_EXP 70
56776: PUSH
56777: LD_EXP 70
56781: PPUSH
56782: LD_VAR 0 2
56786: PPUSH
56787: EMPTY
56788: PPUSH
56789: CALL_OW 1
56793: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
56794: LD_ADDR_EXP 71
56798: PUSH
56799: LD_EXP 71
56803: PPUSH
56804: LD_VAR 0 2
56808: PPUSH
56809: EMPTY
56810: PPUSH
56811: CALL_OW 1
56815: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
56816: LD_ADDR_EXP 72
56820: PUSH
56821: LD_EXP 72
56825: PPUSH
56826: LD_VAR 0 2
56830: PPUSH
56831: EMPTY
56832: PPUSH
56833: CALL_OW 1
56837: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
56838: LD_ADDR_EXP 73
56842: PUSH
56843: LD_EXP 73
56847: PPUSH
56848: LD_VAR 0 2
56852: PPUSH
56853: EMPTY
56854: PPUSH
56855: CALL_OW 1
56859: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
56860: LD_ADDR_EXP 74
56864: PUSH
56865: LD_EXP 74
56869: PPUSH
56870: LD_VAR 0 2
56874: PPUSH
56875: EMPTY
56876: PPUSH
56877: CALL_OW 1
56881: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
56882: LD_ADDR_EXP 63
56886: PUSH
56887: LD_EXP 63
56891: PPUSH
56892: LD_VAR 0 2
56896: PPUSH
56897: LD_INT 0
56899: PPUSH
56900: CALL_OW 1
56904: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
56905: LD_ADDR_EXP 76
56909: PUSH
56910: LD_EXP 76
56914: PPUSH
56915: LD_VAR 0 2
56919: PPUSH
56920: LD_INT 0
56922: PPUSH
56923: CALL_OW 1
56927: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
56928: LD_ADDR_EXP 64
56932: PUSH
56933: LD_EXP 64
56937: PPUSH
56938: LD_VAR 0 2
56942: PPUSH
56943: EMPTY
56944: PPUSH
56945: CALL_OW 1
56949: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
56950: LD_ADDR_EXP 75
56954: PUSH
56955: LD_EXP 75
56959: PPUSH
56960: LD_VAR 0 2
56964: PPUSH
56965: LD_INT 0
56967: PPUSH
56968: CALL_OW 1
56972: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
56973: LD_ADDR_EXP 77
56977: PUSH
56978: LD_EXP 77
56982: PPUSH
56983: LD_VAR 0 2
56987: PPUSH
56988: EMPTY
56989: PPUSH
56990: CALL_OW 1
56994: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
56995: LD_ADDR_EXP 80
56999: PUSH
57000: LD_EXP 80
57004: PPUSH
57005: LD_VAR 0 2
57009: PPUSH
57010: LD_INT 0
57012: PPUSH
57013: CALL_OW 1
57017: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
57018: LD_ADDR_EXP 81
57022: PUSH
57023: LD_EXP 81
57027: PPUSH
57028: LD_VAR 0 2
57032: PPUSH
57033: EMPTY
57034: PPUSH
57035: CALL_OW 1
57039: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
57040: LD_ADDR_EXP 82
57044: PUSH
57045: LD_EXP 82
57049: PPUSH
57050: LD_VAR 0 2
57054: PPUSH
57055: EMPTY
57056: PPUSH
57057: CALL_OW 1
57061: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
57062: LD_ADDR_EXP 83
57066: PUSH
57067: LD_EXP 83
57071: PPUSH
57072: LD_VAR 0 2
57076: PPUSH
57077: EMPTY
57078: PPUSH
57079: CALL_OW 1
57083: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
57084: LD_ADDR_EXP 85
57088: PUSH
57089: LD_EXP 85
57093: PPUSH
57094: LD_VAR 0 2
57098: PPUSH
57099: LD_EXP 52
57103: PUSH
57104: LD_VAR 0 2
57108: ARRAY
57109: PPUSH
57110: LD_INT 2
57112: PUSH
57113: LD_INT 30
57115: PUSH
57116: LD_INT 6
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 30
57125: PUSH
57126: LD_INT 7
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 30
57135: PUSH
57136: LD_INT 8
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: PPUSH
57149: CALL_OW 72
57153: PPUSH
57154: CALL_OW 1
57158: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
57159: LD_ADDR_EXP 86
57163: PUSH
57164: LD_EXP 86
57168: PPUSH
57169: LD_VAR 0 2
57173: PPUSH
57174: EMPTY
57175: PPUSH
57176: CALL_OW 1
57180: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
57181: LD_ADDR_EXP 87
57185: PUSH
57186: LD_EXP 87
57190: PPUSH
57191: LD_VAR 0 2
57195: PPUSH
57196: EMPTY
57197: PPUSH
57198: CALL_OW 1
57202: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
57203: LD_ADDR_EXP 88
57207: PUSH
57208: LD_EXP 88
57212: PPUSH
57213: LD_VAR 0 2
57217: PPUSH
57218: EMPTY
57219: PPUSH
57220: CALL_OW 1
57224: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
57225: LD_ADDR_EXP 89
57229: PUSH
57230: LD_EXP 89
57234: PPUSH
57235: LD_VAR 0 2
57239: PPUSH
57240: EMPTY
57241: PPUSH
57242: CALL_OW 1
57246: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
57247: LD_ADDR_EXP 90
57251: PUSH
57252: LD_EXP 90
57256: PPUSH
57257: LD_VAR 0 2
57261: PPUSH
57262: EMPTY
57263: PPUSH
57264: CALL_OW 1
57268: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
57269: LD_ADDR_EXP 91
57273: PUSH
57274: LD_EXP 91
57278: PPUSH
57279: LD_VAR 0 2
57283: PPUSH
57284: EMPTY
57285: PPUSH
57286: CALL_OW 1
57290: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
57291: LD_ADDR_EXP 92
57295: PUSH
57296: LD_EXP 92
57300: PPUSH
57301: LD_VAR 0 2
57305: PPUSH
57306: EMPTY
57307: PPUSH
57308: CALL_OW 1
57312: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
57313: LD_ADDR_EXP 93
57317: PUSH
57318: LD_EXP 93
57322: PPUSH
57323: LD_VAR 0 2
57327: PPUSH
57328: EMPTY
57329: PPUSH
57330: CALL_OW 1
57334: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
57335: LD_ADDR_EXP 94
57339: PUSH
57340: LD_EXP 94
57344: PPUSH
57345: LD_VAR 0 2
57349: PPUSH
57350: LD_INT 0
57352: PPUSH
57353: CALL_OW 1
57357: ST_TO_ADDR
// end ;
57358: GO 56282
57360: POP
57361: POP
// MC_InitSides ( ) ;
57362: CALL 57648 0 0
// MC_InitResearch ( ) ;
57366: CALL 57387 0 0
// CustomInitMacro ( ) ;
57370: CALL 5367 0 0
// skirmish := true ;
57374: LD_ADDR_EXP 50
57378: PUSH
57379: LD_INT 1
57381: ST_TO_ADDR
// end ;
57382: LD_VAR 0 1
57386: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
57387: LD_INT 0
57389: PPUSH
57390: PPUSH
57391: PPUSH
57392: PPUSH
57393: PPUSH
57394: PPUSH
// if not mc_bases then
57395: LD_EXP 52
57399: NOT
57400: IFFALSE 57404
// exit ;
57402: GO 57643
// for i = 1 to 8 do
57404: LD_ADDR_VAR 0 2
57408: PUSH
57409: DOUBLE
57410: LD_INT 1
57412: DEC
57413: ST_TO_ADDR
57414: LD_INT 8
57416: PUSH
57417: FOR_TO
57418: IFFALSE 57444
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
57420: LD_ADDR_EXP 79
57424: PUSH
57425: LD_EXP 79
57429: PPUSH
57430: LD_VAR 0 2
57434: PPUSH
57435: EMPTY
57436: PPUSH
57437: CALL_OW 1
57441: ST_TO_ADDR
57442: GO 57417
57444: POP
57445: POP
// tmp := [ ] ;
57446: LD_ADDR_VAR 0 5
57450: PUSH
57451: EMPTY
57452: ST_TO_ADDR
// for i = 1 to mc_sides do
57453: LD_ADDR_VAR 0 2
57457: PUSH
57458: DOUBLE
57459: LD_INT 1
57461: DEC
57462: ST_TO_ADDR
57463: LD_EXP 78
57467: PUSH
57468: FOR_TO
57469: IFFALSE 57527
// if not mc_sides [ i ] in tmp then
57471: LD_EXP 78
57475: PUSH
57476: LD_VAR 0 2
57480: ARRAY
57481: PUSH
57482: LD_VAR 0 5
57486: IN
57487: NOT
57488: IFFALSE 57525
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
57490: LD_ADDR_VAR 0 5
57494: PUSH
57495: LD_VAR 0 5
57499: PPUSH
57500: LD_VAR 0 5
57504: PUSH
57505: LD_INT 1
57507: PLUS
57508: PPUSH
57509: LD_EXP 78
57513: PUSH
57514: LD_VAR 0 2
57518: ARRAY
57519: PPUSH
57520: CALL_OW 2
57524: ST_TO_ADDR
57525: GO 57468
57527: POP
57528: POP
// if not tmp then
57529: LD_VAR 0 5
57533: NOT
57534: IFFALSE 57538
// exit ;
57536: GO 57643
// for j in tmp do
57538: LD_ADDR_VAR 0 3
57542: PUSH
57543: LD_VAR 0 5
57547: PUSH
57548: FOR_IN
57549: IFFALSE 57641
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
57551: LD_ADDR_VAR 0 6
57555: PUSH
57556: LD_INT 22
57558: PUSH
57559: LD_VAR 0 3
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PPUSH
57568: CALL_OW 69
57572: ST_TO_ADDR
// if not un then
57573: LD_VAR 0 6
57577: NOT
57578: IFFALSE 57582
// continue ;
57580: GO 57548
// nation := GetNation ( un [ 1 ] ) ;
57582: LD_ADDR_VAR 0 4
57586: PUSH
57587: LD_VAR 0 6
57591: PUSH
57592: LD_INT 1
57594: ARRAY
57595: PPUSH
57596: CALL_OW 248
57600: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
57601: LD_ADDR_EXP 79
57605: PUSH
57606: LD_EXP 79
57610: PPUSH
57611: LD_VAR 0 3
57615: PPUSH
57616: LD_VAR 0 3
57620: PPUSH
57621: LD_VAR 0 4
57625: PPUSH
57626: LD_INT 1
57628: PPUSH
57629: CALL 11157 0 3
57633: PPUSH
57634: CALL_OW 1
57638: ST_TO_ADDR
// end ;
57639: GO 57548
57641: POP
57642: POP
// end ;
57643: LD_VAR 0 1
57647: RET
// export function MC_InitSides ( ) ; var i ; begin
57648: LD_INT 0
57650: PPUSH
57651: PPUSH
// if not mc_bases then
57652: LD_EXP 52
57656: NOT
57657: IFFALSE 57661
// exit ;
57659: GO 57735
// for i = 1 to mc_bases do
57661: LD_ADDR_VAR 0 2
57665: PUSH
57666: DOUBLE
57667: LD_INT 1
57669: DEC
57670: ST_TO_ADDR
57671: LD_EXP 52
57675: PUSH
57676: FOR_TO
57677: IFFALSE 57733
// if mc_bases [ i ] then
57679: LD_EXP 52
57683: PUSH
57684: LD_VAR 0 2
57688: ARRAY
57689: IFFALSE 57731
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
57691: LD_ADDR_EXP 78
57695: PUSH
57696: LD_EXP 78
57700: PPUSH
57701: LD_VAR 0 2
57705: PPUSH
57706: LD_EXP 52
57710: PUSH
57711: LD_VAR 0 2
57715: ARRAY
57716: PUSH
57717: LD_INT 1
57719: ARRAY
57720: PPUSH
57721: CALL_OW 255
57725: PPUSH
57726: CALL_OW 1
57730: ST_TO_ADDR
57731: GO 57676
57733: POP
57734: POP
// end ;
57735: LD_VAR 0 1
57739: RET
// every 0 0$01 trigger skirmish do
57740: LD_EXP 50
57744: IFFALSE 57898
57746: GO 57748
57748: DISABLE
// begin enable ;
57749: ENABLE
// MC_CheckBuildings ( ) ;
57750: CALL 62396 0 0
// MC_CheckPeopleLife ( ) ;
57754: CALL 62521 0 0
// RaiseSailEvent ( 100 ) ;
57758: LD_INT 100
57760: PPUSH
57761: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
57765: LD_INT 103
57767: PPUSH
57768: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
57772: LD_INT 104
57774: PPUSH
57775: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
57779: LD_INT 105
57781: PPUSH
57782: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
57786: LD_INT 106
57788: PPUSH
57789: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
57793: LD_INT 107
57795: PPUSH
57796: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
57800: LD_INT 108
57802: PPUSH
57803: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
57807: LD_INT 109
57809: PPUSH
57810: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
57814: LD_INT 110
57816: PPUSH
57817: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
57821: LD_INT 111
57823: PPUSH
57824: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
57828: LD_INT 112
57830: PPUSH
57831: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
57835: LD_INT 113
57837: PPUSH
57838: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
57842: LD_INT 120
57844: PPUSH
57845: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
57849: LD_INT 121
57851: PPUSH
57852: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
57856: LD_INT 122
57858: PPUSH
57859: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
57863: LD_INT 123
57865: PPUSH
57866: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
57870: LD_INT 124
57872: PPUSH
57873: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
57877: LD_INT 125
57879: PPUSH
57880: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
57884: LD_INT 126
57886: PPUSH
57887: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
57891: LD_INT 200
57893: PPUSH
57894: CALL_OW 427
// end ;
57898: END
// on SailEvent ( event ) do begin if event < 100 then
57899: LD_VAR 0 1
57903: PUSH
57904: LD_INT 100
57906: LESS
57907: IFFALSE 57918
// CustomEvent ( event ) ;
57909: LD_VAR 0 1
57913: PPUSH
57914: CALL 5359 0 1
// if event = 100 then
57918: LD_VAR 0 1
57922: PUSH
57923: LD_INT 100
57925: EQUAL
57926: IFFALSE 57932
// MC_ClassManager ( ) ;
57928: CALL 58324 0 0
// if event = 101 then
57932: LD_VAR 0 1
57936: PUSH
57937: LD_INT 101
57939: EQUAL
57940: IFFALSE 57946
// MC_RepairBuildings ( ) ;
57942: CALL 63117 0 0
// if event = 102 then
57946: LD_VAR 0 1
57950: PUSH
57951: LD_INT 102
57953: EQUAL
57954: IFFALSE 57960
// MC_Heal ( ) ;
57956: CALL 63849 0 0
// if event = 103 then
57960: LD_VAR 0 1
57964: PUSH
57965: LD_INT 103
57967: EQUAL
57968: IFFALSE 57974
// MC_Build ( ) ;
57970: CALL 64271 0 0
// if event = 104 then
57974: LD_VAR 0 1
57978: PUSH
57979: LD_INT 104
57981: EQUAL
57982: IFFALSE 57988
// MC_TurretWeapon ( ) ;
57984: CALL 65884 0 0
// if event = 105 then
57988: LD_VAR 0 1
57992: PUSH
57993: LD_INT 105
57995: EQUAL
57996: IFFALSE 58002
// MC_BuildUpgrade ( ) ;
57998: CALL 65435 0 0
// if event = 106 then
58002: LD_VAR 0 1
58006: PUSH
58007: LD_INT 106
58009: EQUAL
58010: IFFALSE 58016
// MC_PlantMines ( ) ;
58012: CALL 66314 0 0
// if event = 107 then
58016: LD_VAR 0 1
58020: PUSH
58021: LD_INT 107
58023: EQUAL
58024: IFFALSE 58030
// MC_CollectCrates ( ) ;
58026: CALL 67348 0 0
// if event = 108 then
58030: LD_VAR 0 1
58034: PUSH
58035: LD_INT 108
58037: EQUAL
58038: IFFALSE 58044
// MC_LinkRemoteControl ( ) ;
58040: CALL 69124 0 0
// if event = 109 then
58044: LD_VAR 0 1
58048: PUSH
58049: LD_INT 109
58051: EQUAL
58052: IFFALSE 58058
// MC_ProduceVehicle ( ) ;
58054: CALL 69305 0 0
// if event = 110 then
58058: LD_VAR 0 1
58062: PUSH
58063: LD_INT 110
58065: EQUAL
58066: IFFALSE 58072
// MC_SendAttack ( ) ;
58068: CALL 69771 0 0
// if event = 111 then
58072: LD_VAR 0 1
58076: PUSH
58077: LD_INT 111
58079: EQUAL
58080: IFFALSE 58086
// MC_Defend ( ) ;
58082: CALL 69879 0 0
// if event = 112 then
58086: LD_VAR 0 1
58090: PUSH
58091: LD_INT 112
58093: EQUAL
58094: IFFALSE 58100
// MC_Research ( ) ;
58096: CALL 70484 0 0
// if event = 113 then
58100: LD_VAR 0 1
58104: PUSH
58105: LD_INT 113
58107: EQUAL
58108: IFFALSE 58114
// MC_MinesTrigger ( ) ;
58110: CALL 71598 0 0
// if event = 120 then
58114: LD_VAR 0 1
58118: PUSH
58119: LD_INT 120
58121: EQUAL
58122: IFFALSE 58128
// MC_RepairVehicle ( ) ;
58124: CALL 71697 0 0
// if event = 121 then
58128: LD_VAR 0 1
58132: PUSH
58133: LD_INT 121
58135: EQUAL
58136: IFFALSE 58142
// MC_TameApe ( ) ;
58138: CALL 72427 0 0
// if event = 122 then
58142: LD_VAR 0 1
58146: PUSH
58147: LD_INT 122
58149: EQUAL
58150: IFFALSE 58156
// MC_ChangeApeClass ( ) ;
58152: CALL 73256 0 0
// if event = 123 then
58156: LD_VAR 0 1
58160: PUSH
58161: LD_INT 123
58163: EQUAL
58164: IFFALSE 58170
// MC_Bazooka ( ) ;
58166: CALL 73906 0 0
// if event = 124 then
58170: LD_VAR 0 1
58174: PUSH
58175: LD_INT 124
58177: EQUAL
58178: IFFALSE 58184
// MC_TeleportExit ( ) ;
58180: CALL 74104 0 0
// if event = 125 then
58184: LD_VAR 0 1
58188: PUSH
58189: LD_INT 125
58191: EQUAL
58192: IFFALSE 58198
// MC_Deposits ( ) ;
58194: CALL 74751 0 0
// if event = 126 then
58198: LD_VAR 0 1
58202: PUSH
58203: LD_INT 126
58205: EQUAL
58206: IFFALSE 58212
// MC_RemoteDriver ( ) ;
58208: CALL 75376 0 0
// if event = 200 then
58212: LD_VAR 0 1
58216: PUSH
58217: LD_INT 200
58219: EQUAL
58220: IFFALSE 58226
// MC_Idle ( ) ;
58222: CALL 77109 0 0
// end ;
58226: PPOPN 1
58228: END
// export function MC_Reset ( base , tag ) ; var i ; begin
58229: LD_INT 0
58231: PPUSH
58232: PPUSH
// if not mc_bases [ base ] or not tag then
58233: LD_EXP 52
58237: PUSH
58238: LD_VAR 0 1
58242: ARRAY
58243: NOT
58244: PUSH
58245: LD_VAR 0 2
58249: NOT
58250: OR
58251: IFFALSE 58255
// exit ;
58253: GO 58319
// for i in mc_bases [ base ] union mc_ape [ base ] do
58255: LD_ADDR_VAR 0 4
58259: PUSH
58260: LD_EXP 52
58264: PUSH
58265: LD_VAR 0 1
58269: ARRAY
58270: PUSH
58271: LD_EXP 81
58275: PUSH
58276: LD_VAR 0 1
58280: ARRAY
58281: UNION
58282: PUSH
58283: FOR_IN
58284: IFFALSE 58317
// if GetTag ( i ) = tag then
58286: LD_VAR 0 4
58290: PPUSH
58291: CALL_OW 110
58295: PUSH
58296: LD_VAR 0 2
58300: EQUAL
58301: IFFALSE 58315
// SetTag ( i , 0 ) ;
58303: LD_VAR 0 4
58307: PPUSH
58308: LD_INT 0
58310: PPUSH
58311: CALL_OW 109
58315: GO 58283
58317: POP
58318: POP
// end ;
58319: LD_VAR 0 3
58323: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
58324: LD_INT 0
58326: PPUSH
58327: PPUSH
58328: PPUSH
58329: PPUSH
58330: PPUSH
58331: PPUSH
58332: PPUSH
58333: PPUSH
// if not mc_bases then
58334: LD_EXP 52
58338: NOT
58339: IFFALSE 58343
// exit ;
58341: GO 58801
// for i = 1 to mc_bases do
58343: LD_ADDR_VAR 0 2
58347: PUSH
58348: DOUBLE
58349: LD_INT 1
58351: DEC
58352: ST_TO_ADDR
58353: LD_EXP 52
58357: PUSH
58358: FOR_TO
58359: IFFALSE 58799
// begin tmp := MC_ClassCheckReq ( i ) ;
58361: LD_ADDR_VAR 0 4
58365: PUSH
58366: LD_VAR 0 2
58370: PPUSH
58371: CALL 58806 0 1
58375: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
58376: LD_ADDR_EXP 93
58380: PUSH
58381: LD_EXP 93
58385: PPUSH
58386: LD_VAR 0 2
58390: PPUSH
58391: LD_VAR 0 4
58395: PPUSH
58396: CALL_OW 1
58400: ST_TO_ADDR
// if not tmp then
58401: LD_VAR 0 4
58405: NOT
58406: IFFALSE 58410
// continue ;
58408: GO 58358
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
58410: LD_ADDR_VAR 0 6
58414: PUSH
58415: LD_EXP 52
58419: PUSH
58420: LD_VAR 0 2
58424: ARRAY
58425: PPUSH
58426: LD_INT 2
58428: PUSH
58429: LD_INT 30
58431: PUSH
58432: LD_INT 4
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 30
58441: PUSH
58442: LD_INT 5
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: LIST
58453: PPUSH
58454: CALL_OW 72
58458: PUSH
58459: LD_EXP 52
58463: PUSH
58464: LD_VAR 0 2
58468: ARRAY
58469: PPUSH
58470: LD_INT 2
58472: PUSH
58473: LD_INT 30
58475: PUSH
58476: LD_INT 0
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 30
58485: PUSH
58486: LD_INT 1
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: LIST
58497: PPUSH
58498: CALL_OW 72
58502: PUSH
58503: LD_EXP 52
58507: PUSH
58508: LD_VAR 0 2
58512: ARRAY
58513: PPUSH
58514: LD_INT 30
58516: PUSH
58517: LD_INT 3
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PPUSH
58524: CALL_OW 72
58528: PUSH
58529: LD_EXP 52
58533: PUSH
58534: LD_VAR 0 2
58538: ARRAY
58539: PPUSH
58540: LD_INT 2
58542: PUSH
58543: LD_INT 30
58545: PUSH
58546: LD_INT 6
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 30
58555: PUSH
58556: LD_INT 7
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 30
58565: PUSH
58566: LD_INT 8
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: PPUSH
58579: CALL_OW 72
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: ST_TO_ADDR
// for j = 1 to 4 do
58590: LD_ADDR_VAR 0 3
58594: PUSH
58595: DOUBLE
58596: LD_INT 1
58598: DEC
58599: ST_TO_ADDR
58600: LD_INT 4
58602: PUSH
58603: FOR_TO
58604: IFFALSE 58795
// begin if not tmp [ j ] then
58606: LD_VAR 0 4
58610: PUSH
58611: LD_VAR 0 3
58615: ARRAY
58616: NOT
58617: IFFALSE 58621
// continue ;
58619: GO 58603
// for p in tmp [ j ] do
58621: LD_ADDR_VAR 0 5
58625: PUSH
58626: LD_VAR 0 4
58630: PUSH
58631: LD_VAR 0 3
58635: ARRAY
58636: PUSH
58637: FOR_IN
58638: IFFALSE 58791
// begin if not b [ j ] then
58640: LD_VAR 0 6
58644: PUSH
58645: LD_VAR 0 3
58649: ARRAY
58650: NOT
58651: IFFALSE 58655
// break ;
58653: GO 58791
// e := 0 ;
58655: LD_ADDR_VAR 0 7
58659: PUSH
58660: LD_INT 0
58662: ST_TO_ADDR
// for k in b [ j ] do
58663: LD_ADDR_VAR 0 8
58667: PUSH
58668: LD_VAR 0 6
58672: PUSH
58673: LD_VAR 0 3
58677: ARRAY
58678: PUSH
58679: FOR_IN
58680: IFFALSE 58707
// if IsNotFull ( k ) then
58682: LD_VAR 0 8
58686: PPUSH
58687: CALL 15448 0 1
58691: IFFALSE 58705
// begin e := k ;
58693: LD_ADDR_VAR 0 7
58697: PUSH
58698: LD_VAR 0 8
58702: ST_TO_ADDR
// break ;
58703: GO 58707
// end ;
58705: GO 58679
58707: POP
58708: POP
// if e and not UnitGoingToBuilding ( p , e ) then
58709: LD_VAR 0 7
58713: PUSH
58714: LD_VAR 0 5
58718: PPUSH
58719: LD_VAR 0 7
58723: PPUSH
58724: CALL 52567 0 2
58728: NOT
58729: AND
58730: IFFALSE 58789
// begin if IsInUnit ( p ) then
58732: LD_VAR 0 5
58736: PPUSH
58737: CALL_OW 310
58741: IFFALSE 58752
// ComExitBuilding ( p ) ;
58743: LD_VAR 0 5
58747: PPUSH
58748: CALL_OW 122
// ComEnterUnit ( p , e ) ;
58752: LD_VAR 0 5
58756: PPUSH
58757: LD_VAR 0 7
58761: PPUSH
58762: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
58766: LD_VAR 0 5
58770: PPUSH
58771: LD_VAR 0 3
58775: PPUSH
58776: CALL_OW 183
// AddComExitBuilding ( p ) ;
58780: LD_VAR 0 5
58784: PPUSH
58785: CALL_OW 182
// end ; end ;
58789: GO 58637
58791: POP
58792: POP
// end ;
58793: GO 58603
58795: POP
58796: POP
// end ;
58797: GO 58358
58799: POP
58800: POP
// end ;
58801: LD_VAR 0 1
58805: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
58806: LD_INT 0
58808: PPUSH
58809: PPUSH
58810: PPUSH
58811: PPUSH
58812: PPUSH
58813: PPUSH
58814: PPUSH
58815: PPUSH
58816: PPUSH
58817: PPUSH
58818: PPUSH
58819: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
58820: LD_VAR 0 1
58824: NOT
58825: PUSH
58826: LD_EXP 52
58830: PUSH
58831: LD_VAR 0 1
58835: ARRAY
58836: NOT
58837: OR
58838: PUSH
58839: LD_EXP 52
58843: PUSH
58844: LD_VAR 0 1
58848: ARRAY
58849: PPUSH
58850: LD_INT 2
58852: PUSH
58853: LD_INT 30
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 30
58865: PUSH
58866: LD_INT 1
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: LIST
58877: PPUSH
58878: CALL_OW 72
58882: NOT
58883: OR
58884: IFFALSE 58888
// exit ;
58886: GO 62391
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
58888: LD_ADDR_VAR 0 4
58892: PUSH
58893: LD_EXP 52
58897: PUSH
58898: LD_VAR 0 1
58902: ARRAY
58903: PPUSH
58904: LD_INT 2
58906: PUSH
58907: LD_INT 25
58909: PUSH
58910: LD_INT 1
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 25
58919: PUSH
58920: LD_INT 2
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 25
58929: PUSH
58930: LD_INT 3
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 25
58939: PUSH
58940: LD_INT 4
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 25
58949: PUSH
58950: LD_INT 5
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 25
58959: PUSH
58960: LD_INT 8
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 25
58969: PUSH
58970: LD_INT 9
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: PPUSH
58987: CALL_OW 72
58991: ST_TO_ADDR
// if not tmp then
58992: LD_VAR 0 4
58996: NOT
58997: IFFALSE 59001
// exit ;
58999: GO 62391
// for i in tmp do
59001: LD_ADDR_VAR 0 3
59005: PUSH
59006: LD_VAR 0 4
59010: PUSH
59011: FOR_IN
59012: IFFALSE 59043
// if GetTag ( i ) then
59014: LD_VAR 0 3
59018: PPUSH
59019: CALL_OW 110
59023: IFFALSE 59041
// tmp := tmp diff i ;
59025: LD_ADDR_VAR 0 4
59029: PUSH
59030: LD_VAR 0 4
59034: PUSH
59035: LD_VAR 0 3
59039: DIFF
59040: ST_TO_ADDR
59041: GO 59011
59043: POP
59044: POP
// if not tmp then
59045: LD_VAR 0 4
59049: NOT
59050: IFFALSE 59054
// exit ;
59052: GO 62391
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
59054: LD_ADDR_VAR 0 5
59058: PUSH
59059: LD_EXP 52
59063: PUSH
59064: LD_VAR 0 1
59068: ARRAY
59069: PPUSH
59070: LD_INT 2
59072: PUSH
59073: LD_INT 25
59075: PUSH
59076: LD_INT 1
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 25
59085: PUSH
59086: LD_INT 5
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 25
59095: PUSH
59096: LD_INT 8
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 25
59105: PUSH
59106: LD_INT 9
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: PPUSH
59120: CALL_OW 72
59124: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
59125: LD_ADDR_VAR 0 6
59129: PUSH
59130: LD_EXP 52
59134: PUSH
59135: LD_VAR 0 1
59139: ARRAY
59140: PPUSH
59141: LD_INT 25
59143: PUSH
59144: LD_INT 2
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PPUSH
59151: CALL_OW 72
59155: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
59156: LD_ADDR_VAR 0 7
59160: PUSH
59161: LD_EXP 52
59165: PUSH
59166: LD_VAR 0 1
59170: ARRAY
59171: PPUSH
59172: LD_INT 25
59174: PUSH
59175: LD_INT 3
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PPUSH
59182: CALL_OW 72
59186: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
59187: LD_ADDR_VAR 0 8
59191: PUSH
59192: LD_EXP 52
59196: PUSH
59197: LD_VAR 0 1
59201: ARRAY
59202: PPUSH
59203: LD_INT 25
59205: PUSH
59206: LD_INT 4
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 24
59215: PUSH
59216: LD_INT 251
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PPUSH
59227: CALL_OW 72
59231: ST_TO_ADDR
// if mc_scan [ base ] then
59232: LD_EXP 75
59236: PUSH
59237: LD_VAR 0 1
59241: ARRAY
59242: IFFALSE 59703
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
59244: LD_ADDR_EXP 94
59248: PUSH
59249: LD_EXP 94
59253: PPUSH
59254: LD_VAR 0 1
59258: PPUSH
59259: LD_INT 4
59261: PPUSH
59262: CALL_OW 1
59266: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
59267: LD_ADDR_VAR 0 12
59271: PUSH
59272: LD_EXP 52
59276: PUSH
59277: LD_VAR 0 1
59281: ARRAY
59282: PPUSH
59283: LD_INT 2
59285: PUSH
59286: LD_INT 30
59288: PUSH
59289: LD_INT 4
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 30
59298: PUSH
59299: LD_INT 5
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: LIST
59310: PPUSH
59311: CALL_OW 72
59315: ST_TO_ADDR
// if not b then
59316: LD_VAR 0 12
59320: NOT
59321: IFFALSE 59325
// exit ;
59323: GO 62391
// p := [ ] ;
59325: LD_ADDR_VAR 0 11
59329: PUSH
59330: EMPTY
59331: ST_TO_ADDR
// if sci >= 2 then
59332: LD_VAR 0 8
59336: PUSH
59337: LD_INT 2
59339: GREATEREQUAL
59340: IFFALSE 59371
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
59342: LD_ADDR_VAR 0 8
59346: PUSH
59347: LD_VAR 0 8
59351: PUSH
59352: LD_INT 1
59354: ARRAY
59355: PUSH
59356: LD_VAR 0 8
59360: PUSH
59361: LD_INT 2
59363: ARRAY
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: ST_TO_ADDR
59369: GO 59432
// if sci = 1 then
59371: LD_VAR 0 8
59375: PUSH
59376: LD_INT 1
59378: EQUAL
59379: IFFALSE 59400
// sci := [ sci [ 1 ] ] else
59381: LD_ADDR_VAR 0 8
59385: PUSH
59386: LD_VAR 0 8
59390: PUSH
59391: LD_INT 1
59393: ARRAY
59394: PUSH
59395: EMPTY
59396: LIST
59397: ST_TO_ADDR
59398: GO 59432
// if sci = 0 then
59400: LD_VAR 0 8
59404: PUSH
59405: LD_INT 0
59407: EQUAL
59408: IFFALSE 59432
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
59410: LD_ADDR_VAR 0 11
59414: PUSH
59415: LD_VAR 0 4
59419: PPUSH
59420: LD_INT 4
59422: PPUSH
59423: CALL 52430 0 2
59427: PUSH
59428: LD_INT 1
59430: ARRAY
59431: ST_TO_ADDR
// if eng > 4 then
59432: LD_VAR 0 6
59436: PUSH
59437: LD_INT 4
59439: GREATER
59440: IFFALSE 59486
// for i = eng downto 4 do
59442: LD_ADDR_VAR 0 3
59446: PUSH
59447: DOUBLE
59448: LD_VAR 0 6
59452: INC
59453: ST_TO_ADDR
59454: LD_INT 4
59456: PUSH
59457: FOR_DOWNTO
59458: IFFALSE 59484
// eng := eng diff eng [ i ] ;
59460: LD_ADDR_VAR 0 6
59464: PUSH
59465: LD_VAR 0 6
59469: PUSH
59470: LD_VAR 0 6
59474: PUSH
59475: LD_VAR 0 3
59479: ARRAY
59480: DIFF
59481: ST_TO_ADDR
59482: GO 59457
59484: POP
59485: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
59486: LD_ADDR_VAR 0 4
59490: PUSH
59491: LD_VAR 0 4
59495: PUSH
59496: LD_VAR 0 5
59500: PUSH
59501: LD_VAR 0 6
59505: UNION
59506: PUSH
59507: LD_VAR 0 7
59511: UNION
59512: PUSH
59513: LD_VAR 0 8
59517: UNION
59518: DIFF
59519: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
59520: LD_ADDR_VAR 0 13
59524: PUSH
59525: LD_EXP 52
59529: PUSH
59530: LD_VAR 0 1
59534: ARRAY
59535: PPUSH
59536: LD_INT 2
59538: PUSH
59539: LD_INT 30
59541: PUSH
59542: LD_INT 32
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 30
59551: PUSH
59552: LD_INT 31
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: LIST
59563: PPUSH
59564: CALL_OW 72
59568: PUSH
59569: LD_EXP 52
59573: PUSH
59574: LD_VAR 0 1
59578: ARRAY
59579: PPUSH
59580: LD_INT 2
59582: PUSH
59583: LD_INT 30
59585: PUSH
59586: LD_INT 4
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 30
59595: PUSH
59596: LD_INT 5
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: LIST
59607: PPUSH
59608: CALL_OW 72
59612: PUSH
59613: LD_INT 6
59615: MUL
59616: PLUS
59617: ST_TO_ADDR
// if bcount < tmp then
59618: LD_VAR 0 13
59622: PUSH
59623: LD_VAR 0 4
59627: LESS
59628: IFFALSE 59674
// for i = tmp downto bcount do
59630: LD_ADDR_VAR 0 3
59634: PUSH
59635: DOUBLE
59636: LD_VAR 0 4
59640: INC
59641: ST_TO_ADDR
59642: LD_VAR 0 13
59646: PUSH
59647: FOR_DOWNTO
59648: IFFALSE 59672
// tmp := Delete ( tmp , tmp ) ;
59650: LD_ADDR_VAR 0 4
59654: PUSH
59655: LD_VAR 0 4
59659: PPUSH
59660: LD_VAR 0 4
59664: PPUSH
59665: CALL_OW 3
59669: ST_TO_ADDR
59670: GO 59647
59672: POP
59673: POP
// result := [ tmp , 0 , 0 , p ] ;
59674: LD_ADDR_VAR 0 2
59678: PUSH
59679: LD_VAR 0 4
59683: PUSH
59684: LD_INT 0
59686: PUSH
59687: LD_INT 0
59689: PUSH
59690: LD_VAR 0 11
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: ST_TO_ADDR
// exit ;
59701: GO 62391
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
59703: LD_EXP 52
59707: PUSH
59708: LD_VAR 0 1
59712: ARRAY
59713: PPUSH
59714: LD_INT 2
59716: PUSH
59717: LD_INT 30
59719: PUSH
59720: LD_INT 6
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 30
59729: PUSH
59730: LD_INT 7
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 30
59739: PUSH
59740: LD_INT 8
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: PPUSH
59753: CALL_OW 72
59757: NOT
59758: PUSH
59759: LD_EXP 52
59763: PUSH
59764: LD_VAR 0 1
59768: ARRAY
59769: PPUSH
59770: LD_INT 30
59772: PUSH
59773: LD_INT 3
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PPUSH
59780: CALL_OW 72
59784: NOT
59785: AND
59786: IFFALSE 59858
// begin if eng = tmp then
59788: LD_VAR 0 6
59792: PUSH
59793: LD_VAR 0 4
59797: EQUAL
59798: IFFALSE 59802
// exit ;
59800: GO 62391
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
59802: LD_ADDR_EXP 94
59806: PUSH
59807: LD_EXP 94
59811: PPUSH
59812: LD_VAR 0 1
59816: PPUSH
59817: LD_INT 1
59819: PPUSH
59820: CALL_OW 1
59824: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
59825: LD_ADDR_VAR 0 2
59829: PUSH
59830: LD_INT 0
59832: PUSH
59833: LD_VAR 0 4
59837: PUSH
59838: LD_VAR 0 6
59842: DIFF
59843: PUSH
59844: LD_INT 0
59846: PUSH
59847: LD_INT 0
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: ST_TO_ADDR
// exit ;
59856: GO 62391
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
59858: LD_EXP 79
59862: PUSH
59863: LD_EXP 78
59867: PUSH
59868: LD_VAR 0 1
59872: ARRAY
59873: ARRAY
59874: PUSH
59875: LD_EXP 52
59879: PUSH
59880: LD_VAR 0 1
59884: ARRAY
59885: PPUSH
59886: LD_INT 2
59888: PUSH
59889: LD_INT 30
59891: PUSH
59892: LD_INT 6
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 30
59901: PUSH
59902: LD_INT 7
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 30
59911: PUSH
59912: LD_INT 8
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: PPUSH
59925: CALL_OW 72
59929: AND
59930: PUSH
59931: LD_EXP 52
59935: PUSH
59936: LD_VAR 0 1
59940: ARRAY
59941: PPUSH
59942: LD_INT 30
59944: PUSH
59945: LD_INT 3
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PPUSH
59952: CALL_OW 72
59956: NOT
59957: AND
59958: IFFALSE 60172
// begin if sci >= 6 then
59960: LD_VAR 0 8
59964: PUSH
59965: LD_INT 6
59967: GREATEREQUAL
59968: IFFALSE 59972
// exit ;
59970: GO 62391
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
59972: LD_ADDR_EXP 94
59976: PUSH
59977: LD_EXP 94
59981: PPUSH
59982: LD_VAR 0 1
59986: PPUSH
59987: LD_INT 2
59989: PPUSH
59990: CALL_OW 1
59994: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
59995: LD_ADDR_VAR 0 9
59999: PUSH
60000: LD_VAR 0 4
60004: PUSH
60005: LD_VAR 0 8
60009: DIFF
60010: PPUSH
60011: LD_INT 4
60013: PPUSH
60014: CALL 52430 0 2
60018: ST_TO_ADDR
// p := [ ] ;
60019: LD_ADDR_VAR 0 11
60023: PUSH
60024: EMPTY
60025: ST_TO_ADDR
// if sci < 6 and sort > 6 then
60026: LD_VAR 0 8
60030: PUSH
60031: LD_INT 6
60033: LESS
60034: PUSH
60035: LD_VAR 0 9
60039: PUSH
60040: LD_INT 6
60042: GREATER
60043: AND
60044: IFFALSE 60125
// begin for i = 1 to 6 - sci do
60046: LD_ADDR_VAR 0 3
60050: PUSH
60051: DOUBLE
60052: LD_INT 1
60054: DEC
60055: ST_TO_ADDR
60056: LD_INT 6
60058: PUSH
60059: LD_VAR 0 8
60063: MINUS
60064: PUSH
60065: FOR_TO
60066: IFFALSE 60121
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
60068: LD_ADDR_VAR 0 11
60072: PUSH
60073: LD_VAR 0 11
60077: PPUSH
60078: LD_VAR 0 11
60082: PUSH
60083: LD_INT 1
60085: PLUS
60086: PPUSH
60087: LD_VAR 0 9
60091: PUSH
60092: LD_INT 1
60094: ARRAY
60095: PPUSH
60096: CALL_OW 2
60100: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
60101: LD_ADDR_VAR 0 9
60105: PUSH
60106: LD_VAR 0 9
60110: PPUSH
60111: LD_INT 1
60113: PPUSH
60114: CALL_OW 3
60118: ST_TO_ADDR
// end ;
60119: GO 60065
60121: POP
60122: POP
// end else
60123: GO 60145
// if sort then
60125: LD_VAR 0 9
60129: IFFALSE 60145
// p := sort [ 1 ] ;
60131: LD_ADDR_VAR 0 11
60135: PUSH
60136: LD_VAR 0 9
60140: PUSH
60141: LD_INT 1
60143: ARRAY
60144: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
60145: LD_ADDR_VAR 0 2
60149: PUSH
60150: LD_INT 0
60152: PUSH
60153: LD_INT 0
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: LD_VAR 0 11
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: ST_TO_ADDR
// exit ;
60170: GO 62391
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
60172: LD_EXP 79
60176: PUSH
60177: LD_EXP 78
60181: PUSH
60182: LD_VAR 0 1
60186: ARRAY
60187: ARRAY
60188: PUSH
60189: LD_EXP 52
60193: PUSH
60194: LD_VAR 0 1
60198: ARRAY
60199: PPUSH
60200: LD_INT 2
60202: PUSH
60203: LD_INT 30
60205: PUSH
60206: LD_INT 6
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 30
60215: PUSH
60216: LD_INT 7
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 30
60225: PUSH
60226: LD_INT 8
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: PPUSH
60239: CALL_OW 72
60243: AND
60244: PUSH
60245: LD_EXP 52
60249: PUSH
60250: LD_VAR 0 1
60254: ARRAY
60255: PPUSH
60256: LD_INT 30
60258: PUSH
60259: LD_INT 3
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PPUSH
60266: CALL_OW 72
60270: AND
60271: IFFALSE 61005
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
60273: LD_ADDR_EXP 94
60277: PUSH
60278: LD_EXP 94
60282: PPUSH
60283: LD_VAR 0 1
60287: PPUSH
60288: LD_INT 3
60290: PPUSH
60291: CALL_OW 1
60295: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
60296: LD_ADDR_VAR 0 2
60300: PUSH
60301: LD_INT 0
60303: PUSH
60304: LD_INT 0
60306: PUSH
60307: LD_INT 0
60309: PUSH
60310: LD_INT 0
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: ST_TO_ADDR
// if not eng then
60319: LD_VAR 0 6
60323: NOT
60324: IFFALSE 60387
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
60326: LD_ADDR_VAR 0 11
60330: PUSH
60331: LD_VAR 0 4
60335: PPUSH
60336: LD_INT 2
60338: PPUSH
60339: CALL 52430 0 2
60343: PUSH
60344: LD_INT 1
60346: ARRAY
60347: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
60348: LD_ADDR_VAR 0 2
60352: PUSH
60353: LD_VAR 0 2
60357: PPUSH
60358: LD_INT 2
60360: PPUSH
60361: LD_VAR 0 11
60365: PPUSH
60366: CALL_OW 1
60370: ST_TO_ADDR
// tmp := tmp diff p ;
60371: LD_ADDR_VAR 0 4
60375: PUSH
60376: LD_VAR 0 4
60380: PUSH
60381: LD_VAR 0 11
60385: DIFF
60386: ST_TO_ADDR
// end ; if tmp and sci < 6 then
60387: LD_VAR 0 4
60391: PUSH
60392: LD_VAR 0 8
60396: PUSH
60397: LD_INT 6
60399: LESS
60400: AND
60401: IFFALSE 60589
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
60403: LD_ADDR_VAR 0 9
60407: PUSH
60408: LD_VAR 0 4
60412: PUSH
60413: LD_VAR 0 8
60417: PUSH
60418: LD_VAR 0 7
60422: UNION
60423: DIFF
60424: PPUSH
60425: LD_INT 4
60427: PPUSH
60428: CALL 52430 0 2
60432: ST_TO_ADDR
// p := [ ] ;
60433: LD_ADDR_VAR 0 11
60437: PUSH
60438: EMPTY
60439: ST_TO_ADDR
// if sort then
60440: LD_VAR 0 9
60444: IFFALSE 60560
// for i = 1 to 6 - sci do
60446: LD_ADDR_VAR 0 3
60450: PUSH
60451: DOUBLE
60452: LD_INT 1
60454: DEC
60455: ST_TO_ADDR
60456: LD_INT 6
60458: PUSH
60459: LD_VAR 0 8
60463: MINUS
60464: PUSH
60465: FOR_TO
60466: IFFALSE 60558
// begin if i = sort then
60468: LD_VAR 0 3
60472: PUSH
60473: LD_VAR 0 9
60477: EQUAL
60478: IFFALSE 60482
// break ;
60480: GO 60558
// if GetClass ( i ) = 4 then
60482: LD_VAR 0 3
60486: PPUSH
60487: CALL_OW 257
60491: PUSH
60492: LD_INT 4
60494: EQUAL
60495: IFFALSE 60499
// continue ;
60497: GO 60465
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60499: LD_ADDR_VAR 0 11
60503: PUSH
60504: LD_VAR 0 11
60508: PPUSH
60509: LD_VAR 0 11
60513: PUSH
60514: LD_INT 1
60516: PLUS
60517: PPUSH
60518: LD_VAR 0 9
60522: PUSH
60523: LD_VAR 0 3
60527: ARRAY
60528: PPUSH
60529: CALL_OW 2
60533: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60534: LD_ADDR_VAR 0 4
60538: PUSH
60539: LD_VAR 0 4
60543: PUSH
60544: LD_VAR 0 9
60548: PUSH
60549: LD_VAR 0 3
60553: ARRAY
60554: DIFF
60555: ST_TO_ADDR
// end ;
60556: GO 60465
60558: POP
60559: POP
// if p then
60560: LD_VAR 0 11
60564: IFFALSE 60589
// result := Replace ( result , 4 , p ) ;
60566: LD_ADDR_VAR 0 2
60570: PUSH
60571: LD_VAR 0 2
60575: PPUSH
60576: LD_INT 4
60578: PPUSH
60579: LD_VAR 0 11
60583: PPUSH
60584: CALL_OW 1
60588: ST_TO_ADDR
// end ; if tmp and mech < 6 then
60589: LD_VAR 0 4
60593: PUSH
60594: LD_VAR 0 7
60598: PUSH
60599: LD_INT 6
60601: LESS
60602: AND
60603: IFFALSE 60791
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
60605: LD_ADDR_VAR 0 9
60609: PUSH
60610: LD_VAR 0 4
60614: PUSH
60615: LD_VAR 0 8
60619: PUSH
60620: LD_VAR 0 7
60624: UNION
60625: DIFF
60626: PPUSH
60627: LD_INT 3
60629: PPUSH
60630: CALL 52430 0 2
60634: ST_TO_ADDR
// p := [ ] ;
60635: LD_ADDR_VAR 0 11
60639: PUSH
60640: EMPTY
60641: ST_TO_ADDR
// if sort then
60642: LD_VAR 0 9
60646: IFFALSE 60762
// for i = 1 to 6 - mech do
60648: LD_ADDR_VAR 0 3
60652: PUSH
60653: DOUBLE
60654: LD_INT 1
60656: DEC
60657: ST_TO_ADDR
60658: LD_INT 6
60660: PUSH
60661: LD_VAR 0 7
60665: MINUS
60666: PUSH
60667: FOR_TO
60668: IFFALSE 60760
// begin if i = sort then
60670: LD_VAR 0 3
60674: PUSH
60675: LD_VAR 0 9
60679: EQUAL
60680: IFFALSE 60684
// break ;
60682: GO 60760
// if GetClass ( i ) = 3 then
60684: LD_VAR 0 3
60688: PPUSH
60689: CALL_OW 257
60693: PUSH
60694: LD_INT 3
60696: EQUAL
60697: IFFALSE 60701
// continue ;
60699: GO 60667
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60701: LD_ADDR_VAR 0 11
60705: PUSH
60706: LD_VAR 0 11
60710: PPUSH
60711: LD_VAR 0 11
60715: PUSH
60716: LD_INT 1
60718: PLUS
60719: PPUSH
60720: LD_VAR 0 9
60724: PUSH
60725: LD_VAR 0 3
60729: ARRAY
60730: PPUSH
60731: CALL_OW 2
60735: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60736: LD_ADDR_VAR 0 4
60740: PUSH
60741: LD_VAR 0 4
60745: PUSH
60746: LD_VAR 0 9
60750: PUSH
60751: LD_VAR 0 3
60755: ARRAY
60756: DIFF
60757: ST_TO_ADDR
// end ;
60758: GO 60667
60760: POP
60761: POP
// if p then
60762: LD_VAR 0 11
60766: IFFALSE 60791
// result := Replace ( result , 3 , p ) ;
60768: LD_ADDR_VAR 0 2
60772: PUSH
60773: LD_VAR 0 2
60777: PPUSH
60778: LD_INT 3
60780: PPUSH
60781: LD_VAR 0 11
60785: PPUSH
60786: CALL_OW 1
60790: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
60791: LD_VAR 0 4
60795: PUSH
60796: LD_INT 6
60798: GREATER
60799: PUSH
60800: LD_VAR 0 6
60804: PUSH
60805: LD_INT 6
60807: LESS
60808: AND
60809: IFFALSE 61003
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
60811: LD_ADDR_VAR 0 9
60815: PUSH
60816: LD_VAR 0 4
60820: PUSH
60821: LD_VAR 0 8
60825: PUSH
60826: LD_VAR 0 7
60830: UNION
60831: PUSH
60832: LD_VAR 0 6
60836: UNION
60837: DIFF
60838: PPUSH
60839: LD_INT 2
60841: PPUSH
60842: CALL 52430 0 2
60846: ST_TO_ADDR
// p := [ ] ;
60847: LD_ADDR_VAR 0 11
60851: PUSH
60852: EMPTY
60853: ST_TO_ADDR
// if sort then
60854: LD_VAR 0 9
60858: IFFALSE 60974
// for i = 1 to 6 - eng do
60860: LD_ADDR_VAR 0 3
60864: PUSH
60865: DOUBLE
60866: LD_INT 1
60868: DEC
60869: ST_TO_ADDR
60870: LD_INT 6
60872: PUSH
60873: LD_VAR 0 6
60877: MINUS
60878: PUSH
60879: FOR_TO
60880: IFFALSE 60972
// begin if i = sort then
60882: LD_VAR 0 3
60886: PUSH
60887: LD_VAR 0 9
60891: EQUAL
60892: IFFALSE 60896
// break ;
60894: GO 60972
// if GetClass ( i ) = 2 then
60896: LD_VAR 0 3
60900: PPUSH
60901: CALL_OW 257
60905: PUSH
60906: LD_INT 2
60908: EQUAL
60909: IFFALSE 60913
// continue ;
60911: GO 60879
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60913: LD_ADDR_VAR 0 11
60917: PUSH
60918: LD_VAR 0 11
60922: PPUSH
60923: LD_VAR 0 11
60927: PUSH
60928: LD_INT 1
60930: PLUS
60931: PPUSH
60932: LD_VAR 0 9
60936: PUSH
60937: LD_VAR 0 3
60941: ARRAY
60942: PPUSH
60943: CALL_OW 2
60947: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60948: LD_ADDR_VAR 0 4
60952: PUSH
60953: LD_VAR 0 4
60957: PUSH
60958: LD_VAR 0 9
60962: PUSH
60963: LD_VAR 0 3
60967: ARRAY
60968: DIFF
60969: ST_TO_ADDR
// end ;
60970: GO 60879
60972: POP
60973: POP
// if p then
60974: LD_VAR 0 11
60978: IFFALSE 61003
// result := Replace ( result , 2 , p ) ;
60980: LD_ADDR_VAR 0 2
60984: PUSH
60985: LD_VAR 0 2
60989: PPUSH
60990: LD_INT 2
60992: PPUSH
60993: LD_VAR 0 11
60997: PPUSH
60998: CALL_OW 1
61002: ST_TO_ADDR
// end ; exit ;
61003: GO 62391
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
61005: LD_EXP 79
61009: PUSH
61010: LD_EXP 78
61014: PUSH
61015: LD_VAR 0 1
61019: ARRAY
61020: ARRAY
61021: NOT
61022: PUSH
61023: LD_EXP 52
61027: PUSH
61028: LD_VAR 0 1
61032: ARRAY
61033: PPUSH
61034: LD_INT 30
61036: PUSH
61037: LD_INT 3
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PPUSH
61044: CALL_OW 72
61048: AND
61049: PUSH
61050: LD_EXP 57
61054: PUSH
61055: LD_VAR 0 1
61059: ARRAY
61060: AND
61061: IFFALSE 61669
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
61063: LD_ADDR_EXP 94
61067: PUSH
61068: LD_EXP 94
61072: PPUSH
61073: LD_VAR 0 1
61077: PPUSH
61078: LD_INT 5
61080: PPUSH
61081: CALL_OW 1
61085: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
61086: LD_ADDR_VAR 0 2
61090: PUSH
61091: LD_INT 0
61093: PUSH
61094: LD_INT 0
61096: PUSH
61097: LD_INT 0
61099: PUSH
61100: LD_INT 0
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: ST_TO_ADDR
// if sci > 1 then
61109: LD_VAR 0 8
61113: PUSH
61114: LD_INT 1
61116: GREATER
61117: IFFALSE 61145
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
61119: LD_ADDR_VAR 0 4
61123: PUSH
61124: LD_VAR 0 4
61128: PUSH
61129: LD_VAR 0 8
61133: PUSH
61134: LD_VAR 0 8
61138: PUSH
61139: LD_INT 1
61141: ARRAY
61142: DIFF
61143: DIFF
61144: ST_TO_ADDR
// if tmp and not sci then
61145: LD_VAR 0 4
61149: PUSH
61150: LD_VAR 0 8
61154: NOT
61155: AND
61156: IFFALSE 61225
// begin sort := SortBySkill ( tmp , 4 ) ;
61158: LD_ADDR_VAR 0 9
61162: PUSH
61163: LD_VAR 0 4
61167: PPUSH
61168: LD_INT 4
61170: PPUSH
61171: CALL 52430 0 2
61175: ST_TO_ADDR
// if sort then
61176: LD_VAR 0 9
61180: IFFALSE 61196
// p := sort [ 1 ] ;
61182: LD_ADDR_VAR 0 11
61186: PUSH
61187: LD_VAR 0 9
61191: PUSH
61192: LD_INT 1
61194: ARRAY
61195: ST_TO_ADDR
// if p then
61196: LD_VAR 0 11
61200: IFFALSE 61225
// result := Replace ( result , 4 , p ) ;
61202: LD_ADDR_VAR 0 2
61206: PUSH
61207: LD_VAR 0 2
61211: PPUSH
61212: LD_INT 4
61214: PPUSH
61215: LD_VAR 0 11
61219: PPUSH
61220: CALL_OW 1
61224: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
61225: LD_ADDR_VAR 0 4
61229: PUSH
61230: LD_VAR 0 4
61234: PUSH
61235: LD_VAR 0 7
61239: DIFF
61240: ST_TO_ADDR
// if tmp and mech < 6 then
61241: LD_VAR 0 4
61245: PUSH
61246: LD_VAR 0 7
61250: PUSH
61251: LD_INT 6
61253: LESS
61254: AND
61255: IFFALSE 61443
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
61257: LD_ADDR_VAR 0 9
61261: PUSH
61262: LD_VAR 0 4
61266: PUSH
61267: LD_VAR 0 8
61271: PUSH
61272: LD_VAR 0 7
61276: UNION
61277: DIFF
61278: PPUSH
61279: LD_INT 3
61281: PPUSH
61282: CALL 52430 0 2
61286: ST_TO_ADDR
// p := [ ] ;
61287: LD_ADDR_VAR 0 11
61291: PUSH
61292: EMPTY
61293: ST_TO_ADDR
// if sort then
61294: LD_VAR 0 9
61298: IFFALSE 61414
// for i = 1 to 6 - mech do
61300: LD_ADDR_VAR 0 3
61304: PUSH
61305: DOUBLE
61306: LD_INT 1
61308: DEC
61309: ST_TO_ADDR
61310: LD_INT 6
61312: PUSH
61313: LD_VAR 0 7
61317: MINUS
61318: PUSH
61319: FOR_TO
61320: IFFALSE 61412
// begin if i = sort then
61322: LD_VAR 0 3
61326: PUSH
61327: LD_VAR 0 9
61331: EQUAL
61332: IFFALSE 61336
// break ;
61334: GO 61412
// if GetClass ( i ) = 3 then
61336: LD_VAR 0 3
61340: PPUSH
61341: CALL_OW 257
61345: PUSH
61346: LD_INT 3
61348: EQUAL
61349: IFFALSE 61353
// continue ;
61351: GO 61319
// p := Insert ( p , p + 1 , sort [ i ] ) ;
61353: LD_ADDR_VAR 0 11
61357: PUSH
61358: LD_VAR 0 11
61362: PPUSH
61363: LD_VAR 0 11
61367: PUSH
61368: LD_INT 1
61370: PLUS
61371: PPUSH
61372: LD_VAR 0 9
61376: PUSH
61377: LD_VAR 0 3
61381: ARRAY
61382: PPUSH
61383: CALL_OW 2
61387: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
61388: LD_ADDR_VAR 0 4
61392: PUSH
61393: LD_VAR 0 4
61397: PUSH
61398: LD_VAR 0 9
61402: PUSH
61403: LD_VAR 0 3
61407: ARRAY
61408: DIFF
61409: ST_TO_ADDR
// end ;
61410: GO 61319
61412: POP
61413: POP
// if p then
61414: LD_VAR 0 11
61418: IFFALSE 61443
// result := Replace ( result , 3 , p ) ;
61420: LD_ADDR_VAR 0 2
61424: PUSH
61425: LD_VAR 0 2
61429: PPUSH
61430: LD_INT 3
61432: PPUSH
61433: LD_VAR 0 11
61437: PPUSH
61438: CALL_OW 1
61442: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
61443: LD_ADDR_VAR 0 4
61447: PUSH
61448: LD_VAR 0 4
61452: PUSH
61453: LD_VAR 0 6
61457: DIFF
61458: ST_TO_ADDR
// if tmp and eng < 6 then
61459: LD_VAR 0 4
61463: PUSH
61464: LD_VAR 0 6
61468: PUSH
61469: LD_INT 6
61471: LESS
61472: AND
61473: IFFALSE 61667
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
61475: LD_ADDR_VAR 0 9
61479: PUSH
61480: LD_VAR 0 4
61484: PUSH
61485: LD_VAR 0 8
61489: PUSH
61490: LD_VAR 0 7
61494: UNION
61495: PUSH
61496: LD_VAR 0 6
61500: UNION
61501: DIFF
61502: PPUSH
61503: LD_INT 2
61505: PPUSH
61506: CALL 52430 0 2
61510: ST_TO_ADDR
// p := [ ] ;
61511: LD_ADDR_VAR 0 11
61515: PUSH
61516: EMPTY
61517: ST_TO_ADDR
// if sort then
61518: LD_VAR 0 9
61522: IFFALSE 61638
// for i = 1 to 6 - eng do
61524: LD_ADDR_VAR 0 3
61528: PUSH
61529: DOUBLE
61530: LD_INT 1
61532: DEC
61533: ST_TO_ADDR
61534: LD_INT 6
61536: PUSH
61537: LD_VAR 0 6
61541: MINUS
61542: PUSH
61543: FOR_TO
61544: IFFALSE 61636
// begin if i = sort then
61546: LD_VAR 0 3
61550: PUSH
61551: LD_VAR 0 9
61555: EQUAL
61556: IFFALSE 61560
// break ;
61558: GO 61636
// if GetClass ( i ) = 2 then
61560: LD_VAR 0 3
61564: PPUSH
61565: CALL_OW 257
61569: PUSH
61570: LD_INT 2
61572: EQUAL
61573: IFFALSE 61577
// continue ;
61575: GO 61543
// p := Insert ( p , p + 1 , sort [ i ] ) ;
61577: LD_ADDR_VAR 0 11
61581: PUSH
61582: LD_VAR 0 11
61586: PPUSH
61587: LD_VAR 0 11
61591: PUSH
61592: LD_INT 1
61594: PLUS
61595: PPUSH
61596: LD_VAR 0 9
61600: PUSH
61601: LD_VAR 0 3
61605: ARRAY
61606: PPUSH
61607: CALL_OW 2
61611: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
61612: LD_ADDR_VAR 0 4
61616: PUSH
61617: LD_VAR 0 4
61621: PUSH
61622: LD_VAR 0 9
61626: PUSH
61627: LD_VAR 0 3
61631: ARRAY
61632: DIFF
61633: ST_TO_ADDR
// end ;
61634: GO 61543
61636: POP
61637: POP
// if p then
61638: LD_VAR 0 11
61642: IFFALSE 61667
// result := Replace ( result , 2 , p ) ;
61644: LD_ADDR_VAR 0 2
61648: PUSH
61649: LD_VAR 0 2
61653: PPUSH
61654: LD_INT 2
61656: PPUSH
61657: LD_VAR 0 11
61661: PPUSH
61662: CALL_OW 1
61666: ST_TO_ADDR
// end ; exit ;
61667: GO 62391
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
61669: LD_EXP 79
61673: PUSH
61674: LD_EXP 78
61678: PUSH
61679: LD_VAR 0 1
61683: ARRAY
61684: ARRAY
61685: NOT
61686: PUSH
61687: LD_EXP 52
61691: PUSH
61692: LD_VAR 0 1
61696: ARRAY
61697: PPUSH
61698: LD_INT 30
61700: PUSH
61701: LD_INT 3
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PPUSH
61708: CALL_OW 72
61712: AND
61713: PUSH
61714: LD_EXP 57
61718: PUSH
61719: LD_VAR 0 1
61723: ARRAY
61724: NOT
61725: AND
61726: IFFALSE 62391
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
61728: LD_ADDR_EXP 94
61732: PUSH
61733: LD_EXP 94
61737: PPUSH
61738: LD_VAR 0 1
61742: PPUSH
61743: LD_INT 6
61745: PPUSH
61746: CALL_OW 1
61750: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
61751: LD_ADDR_VAR 0 2
61755: PUSH
61756: LD_INT 0
61758: PUSH
61759: LD_INT 0
61761: PUSH
61762: LD_INT 0
61764: PUSH
61765: LD_INT 0
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: ST_TO_ADDR
// if sci >= 1 then
61774: LD_VAR 0 8
61778: PUSH
61779: LD_INT 1
61781: GREATEREQUAL
61782: IFFALSE 61804
// tmp := tmp diff sci [ 1 ] ;
61784: LD_ADDR_VAR 0 4
61788: PUSH
61789: LD_VAR 0 4
61793: PUSH
61794: LD_VAR 0 8
61798: PUSH
61799: LD_INT 1
61801: ARRAY
61802: DIFF
61803: ST_TO_ADDR
// if tmp and not sci then
61804: LD_VAR 0 4
61808: PUSH
61809: LD_VAR 0 8
61813: NOT
61814: AND
61815: IFFALSE 61884
// begin sort := SortBySkill ( tmp , 4 ) ;
61817: LD_ADDR_VAR 0 9
61821: PUSH
61822: LD_VAR 0 4
61826: PPUSH
61827: LD_INT 4
61829: PPUSH
61830: CALL 52430 0 2
61834: ST_TO_ADDR
// if sort then
61835: LD_VAR 0 9
61839: IFFALSE 61855
// p := sort [ 1 ] ;
61841: LD_ADDR_VAR 0 11
61845: PUSH
61846: LD_VAR 0 9
61850: PUSH
61851: LD_INT 1
61853: ARRAY
61854: ST_TO_ADDR
// if p then
61855: LD_VAR 0 11
61859: IFFALSE 61884
// result := Replace ( result , 4 , p ) ;
61861: LD_ADDR_VAR 0 2
61865: PUSH
61866: LD_VAR 0 2
61870: PPUSH
61871: LD_INT 4
61873: PPUSH
61874: LD_VAR 0 11
61878: PPUSH
61879: CALL_OW 1
61883: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
61884: LD_ADDR_VAR 0 4
61888: PUSH
61889: LD_VAR 0 4
61893: PUSH
61894: LD_VAR 0 7
61898: DIFF
61899: ST_TO_ADDR
// if tmp and mech < 6 then
61900: LD_VAR 0 4
61904: PUSH
61905: LD_VAR 0 7
61909: PUSH
61910: LD_INT 6
61912: LESS
61913: AND
61914: IFFALSE 62096
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
61916: LD_ADDR_VAR 0 9
61920: PUSH
61921: LD_VAR 0 4
61925: PUSH
61926: LD_VAR 0 7
61930: DIFF
61931: PPUSH
61932: LD_INT 3
61934: PPUSH
61935: CALL 52430 0 2
61939: ST_TO_ADDR
// p := [ ] ;
61940: LD_ADDR_VAR 0 11
61944: PUSH
61945: EMPTY
61946: ST_TO_ADDR
// if sort then
61947: LD_VAR 0 9
61951: IFFALSE 62067
// for i = 1 to 6 - mech do
61953: LD_ADDR_VAR 0 3
61957: PUSH
61958: DOUBLE
61959: LD_INT 1
61961: DEC
61962: ST_TO_ADDR
61963: LD_INT 6
61965: PUSH
61966: LD_VAR 0 7
61970: MINUS
61971: PUSH
61972: FOR_TO
61973: IFFALSE 62065
// begin if i = sort then
61975: LD_VAR 0 3
61979: PUSH
61980: LD_VAR 0 9
61984: EQUAL
61985: IFFALSE 61989
// break ;
61987: GO 62065
// if GetClass ( i ) = 3 then
61989: LD_VAR 0 3
61993: PPUSH
61994: CALL_OW 257
61998: PUSH
61999: LD_INT 3
62001: EQUAL
62002: IFFALSE 62006
// continue ;
62004: GO 61972
// p := Insert ( p , p + 1 , sort [ i ] ) ;
62006: LD_ADDR_VAR 0 11
62010: PUSH
62011: LD_VAR 0 11
62015: PPUSH
62016: LD_VAR 0 11
62020: PUSH
62021: LD_INT 1
62023: PLUS
62024: PPUSH
62025: LD_VAR 0 9
62029: PUSH
62030: LD_VAR 0 3
62034: ARRAY
62035: PPUSH
62036: CALL_OW 2
62040: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62041: LD_ADDR_VAR 0 4
62045: PUSH
62046: LD_VAR 0 4
62050: PUSH
62051: LD_VAR 0 9
62055: PUSH
62056: LD_VAR 0 3
62060: ARRAY
62061: DIFF
62062: ST_TO_ADDR
// end ;
62063: GO 61972
62065: POP
62066: POP
// if p then
62067: LD_VAR 0 11
62071: IFFALSE 62096
// result := Replace ( result , 3 , p ) ;
62073: LD_ADDR_VAR 0 2
62077: PUSH
62078: LD_VAR 0 2
62082: PPUSH
62083: LD_INT 3
62085: PPUSH
62086: LD_VAR 0 11
62090: PPUSH
62091: CALL_OW 1
62095: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
62096: LD_ADDR_VAR 0 4
62100: PUSH
62101: LD_VAR 0 4
62105: PUSH
62106: LD_VAR 0 6
62110: DIFF
62111: ST_TO_ADDR
// if tmp and eng < 4 then
62112: LD_VAR 0 4
62116: PUSH
62117: LD_VAR 0 6
62121: PUSH
62122: LD_INT 4
62124: LESS
62125: AND
62126: IFFALSE 62316
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
62128: LD_ADDR_VAR 0 9
62132: PUSH
62133: LD_VAR 0 4
62137: PUSH
62138: LD_VAR 0 7
62142: PUSH
62143: LD_VAR 0 6
62147: UNION
62148: DIFF
62149: PPUSH
62150: LD_INT 2
62152: PPUSH
62153: CALL 52430 0 2
62157: ST_TO_ADDR
// p := [ ] ;
62158: LD_ADDR_VAR 0 11
62162: PUSH
62163: EMPTY
62164: ST_TO_ADDR
// if sort then
62165: LD_VAR 0 9
62169: IFFALSE 62285
// for i = 1 to 4 - eng do
62171: LD_ADDR_VAR 0 3
62175: PUSH
62176: DOUBLE
62177: LD_INT 1
62179: DEC
62180: ST_TO_ADDR
62181: LD_INT 4
62183: PUSH
62184: LD_VAR 0 6
62188: MINUS
62189: PUSH
62190: FOR_TO
62191: IFFALSE 62283
// begin if i = sort then
62193: LD_VAR 0 3
62197: PUSH
62198: LD_VAR 0 9
62202: EQUAL
62203: IFFALSE 62207
// break ;
62205: GO 62283
// if GetClass ( i ) = 2 then
62207: LD_VAR 0 3
62211: PPUSH
62212: CALL_OW 257
62216: PUSH
62217: LD_INT 2
62219: EQUAL
62220: IFFALSE 62224
// continue ;
62222: GO 62190
// p := Insert ( p , p + 1 , sort [ i ] ) ;
62224: LD_ADDR_VAR 0 11
62228: PUSH
62229: LD_VAR 0 11
62233: PPUSH
62234: LD_VAR 0 11
62238: PUSH
62239: LD_INT 1
62241: PLUS
62242: PPUSH
62243: LD_VAR 0 9
62247: PUSH
62248: LD_VAR 0 3
62252: ARRAY
62253: PPUSH
62254: CALL_OW 2
62258: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
62259: LD_ADDR_VAR 0 4
62263: PUSH
62264: LD_VAR 0 4
62268: PUSH
62269: LD_VAR 0 9
62273: PUSH
62274: LD_VAR 0 3
62278: ARRAY
62279: DIFF
62280: ST_TO_ADDR
// end ;
62281: GO 62190
62283: POP
62284: POP
// if p then
62285: LD_VAR 0 11
62289: IFFALSE 62314
// result := Replace ( result , 2 , p ) ;
62291: LD_ADDR_VAR 0 2
62295: PUSH
62296: LD_VAR 0 2
62300: PPUSH
62301: LD_INT 2
62303: PPUSH
62304: LD_VAR 0 11
62308: PPUSH
62309: CALL_OW 1
62313: ST_TO_ADDR
// end else
62314: GO 62360
// for i = eng downto 5 do
62316: LD_ADDR_VAR 0 3
62320: PUSH
62321: DOUBLE
62322: LD_VAR 0 6
62326: INC
62327: ST_TO_ADDR
62328: LD_INT 5
62330: PUSH
62331: FOR_DOWNTO
62332: IFFALSE 62358
// tmp := tmp union eng [ i ] ;
62334: LD_ADDR_VAR 0 4
62338: PUSH
62339: LD_VAR 0 4
62343: PUSH
62344: LD_VAR 0 6
62348: PUSH
62349: LD_VAR 0 3
62353: ARRAY
62354: UNION
62355: ST_TO_ADDR
62356: GO 62331
62358: POP
62359: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
62360: LD_ADDR_VAR 0 2
62364: PUSH
62365: LD_VAR 0 2
62369: PPUSH
62370: LD_INT 1
62372: PPUSH
62373: LD_VAR 0 4
62377: PUSH
62378: LD_VAR 0 5
62382: DIFF
62383: PPUSH
62384: CALL_OW 1
62388: ST_TO_ADDR
// exit ;
62389: GO 62391
// end ; end ;
62391: LD_VAR 0 2
62395: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
62396: LD_INT 0
62398: PPUSH
62399: PPUSH
62400: PPUSH
// if not mc_bases then
62401: LD_EXP 52
62405: NOT
62406: IFFALSE 62410
// exit ;
62408: GO 62516
// for i = 1 to mc_bases do
62410: LD_ADDR_VAR 0 2
62414: PUSH
62415: DOUBLE
62416: LD_INT 1
62418: DEC
62419: ST_TO_ADDR
62420: LD_EXP 52
62424: PUSH
62425: FOR_TO
62426: IFFALSE 62507
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
62428: LD_ADDR_VAR 0 3
62432: PUSH
62433: LD_EXP 52
62437: PUSH
62438: LD_VAR 0 2
62442: ARRAY
62443: PPUSH
62444: LD_INT 21
62446: PUSH
62447: LD_INT 3
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 3
62456: PUSH
62457: LD_INT 24
62459: PUSH
62460: LD_INT 1000
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PPUSH
62475: CALL_OW 72
62479: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
62480: LD_ADDR_EXP 53
62484: PUSH
62485: LD_EXP 53
62489: PPUSH
62490: LD_VAR 0 2
62494: PPUSH
62495: LD_VAR 0 3
62499: PPUSH
62500: CALL_OW 1
62504: ST_TO_ADDR
// end ;
62505: GO 62425
62507: POP
62508: POP
// RaiseSailEvent ( 101 ) ;
62509: LD_INT 101
62511: PPUSH
62512: CALL_OW 427
// end ;
62516: LD_VAR 0 1
62520: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
62521: LD_INT 0
62523: PPUSH
62524: PPUSH
62525: PPUSH
62526: PPUSH
62527: PPUSH
62528: PPUSH
62529: PPUSH
// if not mc_bases then
62530: LD_EXP 52
62534: NOT
62535: IFFALSE 62539
// exit ;
62537: GO 63112
// for i = 1 to mc_bases do
62539: LD_ADDR_VAR 0 2
62543: PUSH
62544: DOUBLE
62545: LD_INT 1
62547: DEC
62548: ST_TO_ADDR
62549: LD_EXP 52
62553: PUSH
62554: FOR_TO
62555: IFFALSE 63103
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
62557: LD_ADDR_VAR 0 5
62561: PUSH
62562: LD_EXP 52
62566: PUSH
62567: LD_VAR 0 2
62571: ARRAY
62572: PUSH
62573: LD_EXP 81
62577: PUSH
62578: LD_VAR 0 2
62582: ARRAY
62583: UNION
62584: PPUSH
62585: LD_INT 21
62587: PUSH
62588: LD_INT 1
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 1
62597: PUSH
62598: LD_INT 3
62600: PUSH
62601: LD_INT 54
62603: PUSH
62604: EMPTY
62605: LIST
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 3
62613: PUSH
62614: LD_INT 24
62616: PUSH
62617: LD_INT 800
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: LIST
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PPUSH
62637: CALL_OW 72
62641: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
62642: LD_ADDR_VAR 0 6
62646: PUSH
62647: LD_EXP 52
62651: PUSH
62652: LD_VAR 0 2
62656: ARRAY
62657: PPUSH
62658: LD_INT 21
62660: PUSH
62661: LD_INT 1
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 1
62670: PUSH
62671: LD_INT 3
62673: PUSH
62674: LD_INT 54
62676: PUSH
62677: EMPTY
62678: LIST
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 3
62686: PUSH
62687: LD_INT 24
62689: PUSH
62690: LD_INT 250
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: LIST
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PPUSH
62710: CALL_OW 72
62714: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
62715: LD_ADDR_VAR 0 7
62719: PUSH
62720: LD_VAR 0 5
62724: PUSH
62725: LD_VAR 0 6
62729: DIFF
62730: ST_TO_ADDR
// if not need_heal_1 then
62731: LD_VAR 0 6
62735: NOT
62736: IFFALSE 62769
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
62738: LD_ADDR_EXP 55
62742: PUSH
62743: LD_EXP 55
62747: PPUSH
62748: LD_VAR 0 2
62752: PUSH
62753: LD_INT 1
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PPUSH
62760: EMPTY
62761: PPUSH
62762: CALL 18182 0 3
62766: ST_TO_ADDR
62767: GO 62839
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
62769: LD_ADDR_EXP 55
62773: PUSH
62774: LD_EXP 55
62778: PPUSH
62779: LD_VAR 0 2
62783: PUSH
62784: LD_INT 1
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PPUSH
62791: LD_EXP 55
62795: PUSH
62796: LD_VAR 0 2
62800: ARRAY
62801: PUSH
62802: LD_INT 1
62804: ARRAY
62805: PPUSH
62806: LD_INT 3
62808: PUSH
62809: LD_INT 24
62811: PUSH
62812: LD_INT 1000
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PPUSH
62823: CALL_OW 72
62827: PUSH
62828: LD_VAR 0 6
62832: UNION
62833: PPUSH
62834: CALL 18182 0 3
62838: ST_TO_ADDR
// if not need_heal_2 then
62839: LD_VAR 0 7
62843: NOT
62844: IFFALSE 62877
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
62846: LD_ADDR_EXP 55
62850: PUSH
62851: LD_EXP 55
62855: PPUSH
62856: LD_VAR 0 2
62860: PUSH
62861: LD_INT 2
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PPUSH
62868: EMPTY
62869: PPUSH
62870: CALL 18182 0 3
62874: ST_TO_ADDR
62875: GO 62909
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
62877: LD_ADDR_EXP 55
62881: PUSH
62882: LD_EXP 55
62886: PPUSH
62887: LD_VAR 0 2
62891: PUSH
62892: LD_INT 2
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PPUSH
62899: LD_VAR 0 7
62903: PPUSH
62904: CALL 18182 0 3
62908: ST_TO_ADDR
// if need_heal_2 then
62909: LD_VAR 0 7
62913: IFFALSE 63085
// for j in need_heal_2 do
62915: LD_ADDR_VAR 0 3
62919: PUSH
62920: LD_VAR 0 7
62924: PUSH
62925: FOR_IN
62926: IFFALSE 63083
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
62928: LD_ADDR_VAR 0 5
62932: PUSH
62933: LD_EXP 52
62937: PUSH
62938: LD_VAR 0 2
62942: ARRAY
62943: PPUSH
62944: LD_INT 2
62946: PUSH
62947: LD_INT 30
62949: PUSH
62950: LD_INT 6
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 30
62959: PUSH
62960: LD_INT 7
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 30
62969: PUSH
62970: LD_INT 8
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 30
62979: PUSH
62980: LD_INT 0
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 30
62989: PUSH
62990: LD_INT 1
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 25
62999: PUSH
63000: LD_INT 4
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: PPUSH
63016: CALL_OW 72
63020: ST_TO_ADDR
// if tmp then
63021: LD_VAR 0 5
63025: IFFALSE 63081
// begin k := NearestUnitToUnit ( tmp , j ) ;
63027: LD_ADDR_VAR 0 4
63031: PUSH
63032: LD_VAR 0 5
63036: PPUSH
63037: LD_VAR 0 3
63041: PPUSH
63042: CALL_OW 74
63046: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
63047: LD_VAR 0 3
63051: PPUSH
63052: LD_VAR 0 4
63056: PPUSH
63057: CALL_OW 296
63061: PUSH
63062: LD_INT 7
63064: GREATER
63065: IFFALSE 63081
// ComMoveUnit ( j , k ) ;
63067: LD_VAR 0 3
63071: PPUSH
63072: LD_VAR 0 4
63076: PPUSH
63077: CALL_OW 112
// end ; end ;
63081: GO 62925
63083: POP
63084: POP
// if not need_heal_1 and not need_heal_2 then
63085: LD_VAR 0 6
63089: NOT
63090: PUSH
63091: LD_VAR 0 7
63095: NOT
63096: AND
63097: IFFALSE 63101
// continue ;
63099: GO 62554
// end ;
63101: GO 62554
63103: POP
63104: POP
// RaiseSailEvent ( 102 ) ;
63105: LD_INT 102
63107: PPUSH
63108: CALL_OW 427
// end ;
63112: LD_VAR 0 1
63116: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes ; begin
63117: LD_INT 0
63119: PPUSH
63120: PPUSH
63121: PPUSH
63122: PPUSH
63123: PPUSH
63124: PPUSH
// if not mc_bases then
63125: LD_EXP 52
63129: NOT
63130: IFFALSE 63134
// exit ;
63132: GO 63844
// for i = 1 to mc_bases do
63134: LD_ADDR_VAR 0 2
63138: PUSH
63139: DOUBLE
63140: LD_INT 1
63142: DEC
63143: ST_TO_ADDR
63144: LD_EXP 52
63148: PUSH
63149: FOR_TO
63150: IFFALSE 63842
// begin if not mc_building_need_repair [ i ] then
63152: LD_EXP 53
63156: PUSH
63157: LD_VAR 0 2
63161: ARRAY
63162: NOT
63163: IFFALSE 63337
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
63165: LD_ADDR_VAR 0 6
63169: PUSH
63170: LD_EXP 71
63174: PUSH
63175: LD_VAR 0 2
63179: ARRAY
63180: PPUSH
63181: LD_INT 3
63183: PUSH
63184: LD_INT 24
63186: PUSH
63187: LD_INT 1000
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 2
63200: PUSH
63201: LD_INT 34
63203: PUSH
63204: LD_INT 13
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 34
63213: PUSH
63214: LD_INT 52
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: LIST
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PPUSH
63230: CALL_OW 72
63234: ST_TO_ADDR
// if cranes then
63235: LD_VAR 0 6
63239: IFFALSE 63301
// for j in cranes do
63241: LD_ADDR_VAR 0 3
63245: PUSH
63246: LD_VAR 0 6
63250: PUSH
63251: FOR_IN
63252: IFFALSE 63299
// if not IsInArea ( j , mc_parking [ i ] ) then
63254: LD_VAR 0 3
63258: PPUSH
63259: LD_EXP 76
63263: PUSH
63264: LD_VAR 0 2
63268: ARRAY
63269: PPUSH
63270: CALL_OW 308
63274: NOT
63275: IFFALSE 63297
// ComMoveToArea ( j , mc_parking [ i ] ) ;
63277: LD_VAR 0 3
63281: PPUSH
63282: LD_EXP 76
63286: PUSH
63287: LD_VAR 0 2
63291: ARRAY
63292: PPUSH
63293: CALL_OW 113
63297: GO 63251
63299: POP
63300: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
63301: LD_ADDR_EXP 54
63305: PUSH
63306: LD_EXP 54
63310: PPUSH
63311: LD_VAR 0 2
63315: PPUSH
63316: EMPTY
63317: PPUSH
63318: CALL_OW 1
63322: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
63323: LD_VAR 0 2
63327: PPUSH
63328: LD_INT 101
63330: PPUSH
63331: CALL 58229 0 2
// continue ;
63335: GO 63149
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
63337: LD_ADDR_EXP 58
63341: PUSH
63342: LD_EXP 58
63346: PPUSH
63347: LD_VAR 0 2
63351: PPUSH
63352: EMPTY
63353: PPUSH
63354: CALL_OW 1
63358: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
63359: LD_VAR 0 2
63363: PPUSH
63364: LD_INT 103
63366: PPUSH
63367: CALL 58229 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
63371: LD_ADDR_VAR 0 5
63375: PUSH
63376: LD_EXP 52
63380: PUSH
63381: LD_VAR 0 2
63385: ARRAY
63386: PUSH
63387: LD_EXP 81
63391: PUSH
63392: LD_VAR 0 2
63396: ARRAY
63397: UNION
63398: PPUSH
63399: LD_INT 2
63401: PUSH
63402: LD_INT 25
63404: PUSH
63405: LD_INT 2
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 25
63414: PUSH
63415: LD_INT 16
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: LIST
63426: PUSH
63427: EMPTY
63428: LIST
63429: PPUSH
63430: CALL_OW 72
63434: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
63435: LD_ADDR_VAR 0 6
63439: PUSH
63440: LD_EXP 71
63444: PUSH
63445: LD_VAR 0 2
63449: ARRAY
63450: PPUSH
63451: LD_INT 2
63453: PUSH
63454: LD_INT 34
63456: PUSH
63457: LD_INT 13
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 34
63466: PUSH
63467: LD_INT 52
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: LIST
63478: PPUSH
63479: CALL_OW 72
63483: ST_TO_ADDR
// if cranes then
63484: LD_VAR 0 6
63488: IFFALSE 63624
// begin for j in cranes do
63490: LD_ADDR_VAR 0 3
63494: PUSH
63495: LD_VAR 0 6
63499: PUSH
63500: FOR_IN
63501: IFFALSE 63622
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
63503: LD_VAR 0 3
63507: PPUSH
63508: CALL_OW 256
63512: PUSH
63513: LD_INT 500
63515: GREATEREQUAL
63516: PUSH
63517: LD_VAR 0 3
63521: PPUSH
63522: CALL_OW 314
63526: NOT
63527: AND
63528: IFFALSE 63562
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
63530: LD_VAR 0 3
63534: PPUSH
63535: LD_EXP 53
63539: PUSH
63540: LD_VAR 0 2
63544: ARRAY
63545: PPUSH
63546: LD_VAR 0 3
63550: PPUSH
63551: CALL_OW 74
63555: PPUSH
63556: CALL_OW 130
63560: GO 63620
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
63562: LD_VAR 0 3
63566: PPUSH
63567: CALL_OW 256
63571: PUSH
63572: LD_INT 500
63574: LESS
63575: PUSH
63576: LD_VAR 0 3
63580: PPUSH
63581: LD_EXP 76
63585: PUSH
63586: LD_VAR 0 2
63590: ARRAY
63591: PPUSH
63592: CALL_OW 308
63596: NOT
63597: AND
63598: IFFALSE 63620
// ComMoveToArea ( j , mc_parking [ i ] ) ;
63600: LD_VAR 0 3
63604: PPUSH
63605: LD_EXP 76
63609: PUSH
63610: LD_VAR 0 2
63614: ARRAY
63615: PPUSH
63616: CALL_OW 113
63620: GO 63500
63622: POP
63623: POP
// end ; if not tmp then
63624: LD_VAR 0 5
63628: NOT
63629: IFFALSE 63633
// continue ;
63631: GO 63149
// for j in tmp do
63633: LD_ADDR_VAR 0 3
63637: PUSH
63638: LD_VAR 0 5
63642: PUSH
63643: FOR_IN
63644: IFFALSE 63838
// begin if mc_need_heal [ i ] then
63646: LD_EXP 55
63650: PUSH
63651: LD_VAR 0 2
63655: ARRAY
63656: IFFALSE 63704
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
63658: LD_VAR 0 3
63662: PUSH
63663: LD_EXP 55
63667: PUSH
63668: LD_VAR 0 2
63672: ARRAY
63673: PUSH
63674: LD_INT 1
63676: ARRAY
63677: IN
63678: PUSH
63679: LD_VAR 0 3
63683: PUSH
63684: LD_EXP 55
63688: PUSH
63689: LD_VAR 0 2
63693: ARRAY
63694: PUSH
63695: LD_INT 2
63697: ARRAY
63698: IN
63699: OR
63700: IFFALSE 63704
// continue ;
63702: GO 63643
// if IsInUnit ( j ) then
63704: LD_VAR 0 3
63708: PPUSH
63709: CALL_OW 310
63713: IFFALSE 63724
// ComExitBuilding ( j ) ;
63715: LD_VAR 0 3
63719: PPUSH
63720: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
63724: LD_VAR 0 3
63728: PUSH
63729: LD_EXP 54
63733: PUSH
63734: LD_VAR 0 2
63738: ARRAY
63739: IN
63740: NOT
63741: IFFALSE 63799
// begin SetTag ( j , 101 ) ;
63743: LD_VAR 0 3
63747: PPUSH
63748: LD_INT 101
63750: PPUSH
63751: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
63755: LD_ADDR_EXP 54
63759: PUSH
63760: LD_EXP 54
63764: PPUSH
63765: LD_VAR 0 2
63769: PUSH
63770: LD_EXP 54
63774: PUSH
63775: LD_VAR 0 2
63779: ARRAY
63780: PUSH
63781: LD_INT 1
63783: PLUS
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PPUSH
63789: LD_VAR 0 3
63793: PPUSH
63794: CALL 18182 0 3
63798: ST_TO_ADDR
// end ; wait ( 1 ) ;
63799: LD_INT 1
63801: PPUSH
63802: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
63806: LD_VAR 0 3
63810: PPUSH
63811: LD_EXP 53
63815: PUSH
63816: LD_VAR 0 2
63820: ARRAY
63821: PPUSH
63822: LD_VAR 0 3
63826: PPUSH
63827: CALL_OW 74
63831: PPUSH
63832: CALL_OW 130
// end ;
63836: GO 63643
63838: POP
63839: POP
// end ;
63840: GO 63149
63842: POP
63843: POP
// end ;
63844: LD_VAR 0 1
63848: RET
// export function MC_Heal ; var i , j , tmp ; begin
63849: LD_INT 0
63851: PPUSH
63852: PPUSH
63853: PPUSH
63854: PPUSH
// if not mc_bases then
63855: LD_EXP 52
63859: NOT
63860: IFFALSE 63864
// exit ;
63862: GO 64266
// for i = 1 to mc_bases do
63864: LD_ADDR_VAR 0 2
63868: PUSH
63869: DOUBLE
63870: LD_INT 1
63872: DEC
63873: ST_TO_ADDR
63874: LD_EXP 52
63878: PUSH
63879: FOR_TO
63880: IFFALSE 64264
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
63882: LD_EXP 55
63886: PUSH
63887: LD_VAR 0 2
63891: ARRAY
63892: PUSH
63893: LD_INT 1
63895: ARRAY
63896: NOT
63897: PUSH
63898: LD_EXP 55
63902: PUSH
63903: LD_VAR 0 2
63907: ARRAY
63908: PUSH
63909: LD_INT 2
63911: ARRAY
63912: NOT
63913: AND
63914: IFFALSE 63952
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
63916: LD_ADDR_EXP 56
63920: PUSH
63921: LD_EXP 56
63925: PPUSH
63926: LD_VAR 0 2
63930: PPUSH
63931: EMPTY
63932: PPUSH
63933: CALL_OW 1
63937: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
63938: LD_VAR 0 2
63942: PPUSH
63943: LD_INT 102
63945: PPUSH
63946: CALL 58229 0 2
// continue ;
63950: GO 63879
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
63952: LD_ADDR_VAR 0 4
63956: PUSH
63957: LD_EXP 52
63961: PUSH
63962: LD_VAR 0 2
63966: ARRAY
63967: PPUSH
63968: LD_INT 25
63970: PUSH
63971: LD_INT 4
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PPUSH
63978: CALL_OW 72
63982: ST_TO_ADDR
// if not tmp then
63983: LD_VAR 0 4
63987: NOT
63988: IFFALSE 63992
// continue ;
63990: GO 63879
// if mc_taming [ i ] then
63992: LD_EXP 83
63996: PUSH
63997: LD_VAR 0 2
64001: ARRAY
64002: IFFALSE 64026
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
64004: LD_ADDR_EXP 83
64008: PUSH
64009: LD_EXP 83
64013: PPUSH
64014: LD_VAR 0 2
64018: PPUSH
64019: EMPTY
64020: PPUSH
64021: CALL_OW 1
64025: ST_TO_ADDR
// for j in tmp do
64026: LD_ADDR_VAR 0 3
64030: PUSH
64031: LD_VAR 0 4
64035: PUSH
64036: FOR_IN
64037: IFFALSE 64260
// begin if IsInUnit ( j ) then
64039: LD_VAR 0 3
64043: PPUSH
64044: CALL_OW 310
64048: IFFALSE 64059
// ComExitBuilding ( j ) ;
64050: LD_VAR 0 3
64054: PPUSH
64055: CALL_OW 122
// if not j in mc_healers [ i ] then
64059: LD_VAR 0 3
64063: PUSH
64064: LD_EXP 56
64068: PUSH
64069: LD_VAR 0 2
64073: ARRAY
64074: IN
64075: NOT
64076: IFFALSE 64122
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
64078: LD_ADDR_EXP 56
64082: PUSH
64083: LD_EXP 56
64087: PPUSH
64088: LD_VAR 0 2
64092: PUSH
64093: LD_EXP 56
64097: PUSH
64098: LD_VAR 0 2
64102: ARRAY
64103: PUSH
64104: LD_INT 1
64106: PLUS
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PPUSH
64112: LD_VAR 0 3
64116: PPUSH
64117: CALL 18182 0 3
64121: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
64122: LD_VAR 0 3
64126: PPUSH
64127: CALL_OW 110
64131: PUSH
64132: LD_INT 102
64134: NONEQUAL
64135: IFFALSE 64149
// SetTag ( j , 102 ) ;
64137: LD_VAR 0 3
64141: PPUSH
64142: LD_INT 102
64144: PPUSH
64145: CALL_OW 109
// Wait ( 3 ) ;
64149: LD_INT 3
64151: PPUSH
64152: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
64156: LD_EXP 55
64160: PUSH
64161: LD_VAR 0 2
64165: ARRAY
64166: PUSH
64167: LD_INT 1
64169: ARRAY
64170: IFFALSE 64202
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
64172: LD_VAR 0 3
64176: PPUSH
64177: LD_EXP 55
64181: PUSH
64182: LD_VAR 0 2
64186: ARRAY
64187: PUSH
64188: LD_INT 1
64190: ARRAY
64191: PUSH
64192: LD_INT 1
64194: ARRAY
64195: PPUSH
64196: CALL_OW 128
64200: GO 64258
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
64202: LD_VAR 0 3
64206: PPUSH
64207: CALL_OW 314
64211: NOT
64212: PUSH
64213: LD_EXP 55
64217: PUSH
64218: LD_VAR 0 2
64222: ARRAY
64223: PUSH
64224: LD_INT 2
64226: ARRAY
64227: AND
64228: IFFALSE 64258
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
64230: LD_VAR 0 3
64234: PPUSH
64235: LD_EXP 55
64239: PUSH
64240: LD_VAR 0 2
64244: ARRAY
64245: PUSH
64246: LD_INT 2
64248: ARRAY
64249: PUSH
64250: LD_INT 1
64252: ARRAY
64253: PPUSH
64254: CALL_OW 128
// end ;
64258: GO 64036
64260: POP
64261: POP
// end ;
64262: GO 63879
64264: POP
64265: POP
// end ;
64266: LD_VAR 0 1
64270: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
64271: LD_INT 0
64273: PPUSH
64274: PPUSH
64275: PPUSH
64276: PPUSH
64277: PPUSH
// if not mc_bases then
64278: LD_EXP 52
64282: NOT
64283: IFFALSE 64287
// exit ;
64285: GO 65430
// for i = 1 to mc_bases do
64287: LD_ADDR_VAR 0 2
64291: PUSH
64292: DOUBLE
64293: LD_INT 1
64295: DEC
64296: ST_TO_ADDR
64297: LD_EXP 52
64301: PUSH
64302: FOR_TO
64303: IFFALSE 65428
// begin if mc_scan [ i ] then
64305: LD_EXP 75
64309: PUSH
64310: LD_VAR 0 2
64314: ARRAY
64315: IFFALSE 64319
// continue ;
64317: GO 64302
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
64319: LD_EXP 57
64323: PUSH
64324: LD_VAR 0 2
64328: ARRAY
64329: NOT
64330: PUSH
64331: LD_EXP 59
64335: PUSH
64336: LD_VAR 0 2
64340: ARRAY
64341: NOT
64342: AND
64343: PUSH
64344: LD_EXP 58
64348: PUSH
64349: LD_VAR 0 2
64353: ARRAY
64354: AND
64355: IFFALSE 64393
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
64357: LD_ADDR_EXP 58
64361: PUSH
64362: LD_EXP 58
64366: PPUSH
64367: LD_VAR 0 2
64371: PPUSH
64372: EMPTY
64373: PPUSH
64374: CALL_OW 1
64378: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
64379: LD_VAR 0 2
64383: PPUSH
64384: LD_INT 103
64386: PPUSH
64387: CALL 58229 0 2
// continue ;
64391: GO 64302
// end ; if mc_construct_list [ i ] then
64393: LD_EXP 59
64397: PUSH
64398: LD_VAR 0 2
64402: ARRAY
64403: IFFALSE 64623
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
64405: LD_ADDR_VAR 0 4
64409: PUSH
64410: LD_EXP 52
64414: PUSH
64415: LD_VAR 0 2
64419: ARRAY
64420: PPUSH
64421: LD_INT 25
64423: PUSH
64424: LD_INT 2
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PPUSH
64431: CALL_OW 72
64435: PUSH
64436: LD_EXP 54
64440: PUSH
64441: LD_VAR 0 2
64445: ARRAY
64446: DIFF
64447: ST_TO_ADDR
// if not tmp then
64448: LD_VAR 0 4
64452: NOT
64453: IFFALSE 64457
// continue ;
64455: GO 64302
// for j in tmp do
64457: LD_ADDR_VAR 0 3
64461: PUSH
64462: LD_VAR 0 4
64466: PUSH
64467: FOR_IN
64468: IFFALSE 64619
// begin if not mc_builders [ i ] then
64470: LD_EXP 58
64474: PUSH
64475: LD_VAR 0 2
64479: ARRAY
64480: NOT
64481: IFFALSE 64539
// begin SetTag ( j , 103 ) ;
64483: LD_VAR 0 3
64487: PPUSH
64488: LD_INT 103
64490: PPUSH
64491: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
64495: LD_ADDR_EXP 58
64499: PUSH
64500: LD_EXP 58
64504: PPUSH
64505: LD_VAR 0 2
64509: PUSH
64510: LD_EXP 58
64514: PUSH
64515: LD_VAR 0 2
64519: ARRAY
64520: PUSH
64521: LD_INT 1
64523: PLUS
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PPUSH
64529: LD_VAR 0 3
64533: PPUSH
64534: CALL 18182 0 3
64538: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
64539: LD_VAR 0 3
64543: PPUSH
64544: CALL_OW 310
64548: IFFALSE 64559
// ComExitBuilding ( j ) ;
64550: LD_VAR 0 3
64554: PPUSH
64555: CALL_OW 122
// wait ( 3 ) ;
64559: LD_INT 3
64561: PPUSH
64562: CALL_OW 67
// if not mc_construct_list [ i ] then
64566: LD_EXP 59
64570: PUSH
64571: LD_VAR 0 2
64575: ARRAY
64576: NOT
64577: IFFALSE 64581
// break ;
64579: GO 64619
// if not HasTask ( j ) then
64581: LD_VAR 0 3
64585: PPUSH
64586: CALL_OW 314
64590: NOT
64591: IFFALSE 64617
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
64593: LD_VAR 0 3
64597: PPUSH
64598: LD_EXP 59
64602: PUSH
64603: LD_VAR 0 2
64607: ARRAY
64608: PUSH
64609: LD_INT 1
64611: ARRAY
64612: PPUSH
64613: CALL 21033 0 2
// end ;
64617: GO 64467
64619: POP
64620: POP
// end else
64621: GO 65426
// if mc_build_list [ i ] then
64623: LD_EXP 57
64627: PUSH
64628: LD_VAR 0 2
64632: ARRAY
64633: IFFALSE 65426
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
64635: LD_ADDR_VAR 0 5
64639: PUSH
64640: LD_EXP 52
64644: PUSH
64645: LD_VAR 0 2
64649: ARRAY
64650: PPUSH
64651: LD_INT 2
64653: PUSH
64654: LD_INT 30
64656: PUSH
64657: LD_INT 0
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 30
64666: PUSH
64667: LD_INT 1
64669: PUSH
64670: EMPTY
64671: LIST
64672: LIST
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: LIST
64678: PPUSH
64679: CALL_OW 72
64683: ST_TO_ADDR
// if depot then
64684: LD_VAR 0 5
64688: IFFALSE 64706
// depot := depot [ 1 ] else
64690: LD_ADDR_VAR 0 5
64694: PUSH
64695: LD_VAR 0 5
64699: PUSH
64700: LD_INT 1
64702: ARRAY
64703: ST_TO_ADDR
64704: GO 64714
// depot := 0 ;
64706: LD_ADDR_VAR 0 5
64710: PUSH
64711: LD_INT 0
64713: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
64714: LD_EXP 57
64718: PUSH
64719: LD_VAR 0 2
64723: ARRAY
64724: PUSH
64725: LD_INT 1
64727: ARRAY
64728: PUSH
64729: LD_INT 1
64731: ARRAY
64732: PPUSH
64733: CALL 20863 0 1
64737: PUSH
64738: LD_EXP 52
64742: PUSH
64743: LD_VAR 0 2
64747: ARRAY
64748: PPUSH
64749: LD_INT 2
64751: PUSH
64752: LD_INT 30
64754: PUSH
64755: LD_INT 2
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 30
64764: PUSH
64765: LD_INT 3
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: LIST
64776: PPUSH
64777: CALL_OW 72
64781: NOT
64782: AND
64783: IFFALSE 64888
// begin for j = 1 to mc_build_list [ i ] do
64785: LD_ADDR_VAR 0 3
64789: PUSH
64790: DOUBLE
64791: LD_INT 1
64793: DEC
64794: ST_TO_ADDR
64795: LD_EXP 57
64799: PUSH
64800: LD_VAR 0 2
64804: ARRAY
64805: PUSH
64806: FOR_TO
64807: IFFALSE 64886
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
64809: LD_EXP 57
64813: PUSH
64814: LD_VAR 0 2
64818: ARRAY
64819: PUSH
64820: LD_VAR 0 3
64824: ARRAY
64825: PUSH
64826: LD_INT 1
64828: ARRAY
64829: PUSH
64830: LD_INT 2
64832: EQUAL
64833: IFFALSE 64884
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
64835: LD_ADDR_EXP 57
64839: PUSH
64840: LD_EXP 57
64844: PPUSH
64845: LD_VAR 0 2
64849: PPUSH
64850: LD_EXP 57
64854: PUSH
64855: LD_VAR 0 2
64859: ARRAY
64860: PPUSH
64861: LD_VAR 0 3
64865: PPUSH
64866: LD_INT 1
64868: PPUSH
64869: LD_INT 0
64871: PPUSH
64872: CALL 17600 0 4
64876: PPUSH
64877: CALL_OW 1
64881: ST_TO_ADDR
// break ;
64882: GO 64886
// end ;
64884: GO 64806
64886: POP
64887: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
64888: LD_EXP 57
64892: PUSH
64893: LD_VAR 0 2
64897: ARRAY
64898: PUSH
64899: LD_INT 1
64901: ARRAY
64902: PUSH
64903: LD_INT 1
64905: ARRAY
64906: PUSH
64907: LD_INT 0
64909: EQUAL
64910: PUSH
64911: LD_VAR 0 5
64915: PUSH
64916: LD_VAR 0 5
64920: PPUSH
64921: LD_EXP 57
64925: PUSH
64926: LD_VAR 0 2
64930: ARRAY
64931: PUSH
64932: LD_INT 1
64934: ARRAY
64935: PUSH
64936: LD_INT 1
64938: ARRAY
64939: PPUSH
64940: LD_EXP 57
64944: PUSH
64945: LD_VAR 0 2
64949: ARRAY
64950: PUSH
64951: LD_INT 1
64953: ARRAY
64954: PUSH
64955: LD_INT 2
64957: ARRAY
64958: PPUSH
64959: LD_EXP 57
64963: PUSH
64964: LD_VAR 0 2
64968: ARRAY
64969: PUSH
64970: LD_INT 1
64972: ARRAY
64973: PUSH
64974: LD_INT 3
64976: ARRAY
64977: PPUSH
64978: LD_EXP 57
64982: PUSH
64983: LD_VAR 0 2
64987: ARRAY
64988: PUSH
64989: LD_INT 1
64991: ARRAY
64992: PUSH
64993: LD_INT 4
64995: ARRAY
64996: PPUSH
64997: CALL 25597 0 5
65001: AND
65002: OR
65003: IFFALSE 65284
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
65005: LD_ADDR_VAR 0 4
65009: PUSH
65010: LD_EXP 52
65014: PUSH
65015: LD_VAR 0 2
65019: ARRAY
65020: PPUSH
65021: LD_INT 25
65023: PUSH
65024: LD_INT 2
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PPUSH
65031: CALL_OW 72
65035: PUSH
65036: LD_EXP 54
65040: PUSH
65041: LD_VAR 0 2
65045: ARRAY
65046: DIFF
65047: ST_TO_ADDR
// if not tmp then
65048: LD_VAR 0 4
65052: NOT
65053: IFFALSE 65057
// continue ;
65055: GO 64302
// for j in tmp do
65057: LD_ADDR_VAR 0 3
65061: PUSH
65062: LD_VAR 0 4
65066: PUSH
65067: FOR_IN
65068: IFFALSE 65280
// begin if not mc_builders [ i ] then
65070: LD_EXP 58
65074: PUSH
65075: LD_VAR 0 2
65079: ARRAY
65080: NOT
65081: IFFALSE 65139
// begin SetTag ( j , 103 ) ;
65083: LD_VAR 0 3
65087: PPUSH
65088: LD_INT 103
65090: PPUSH
65091: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
65095: LD_ADDR_EXP 58
65099: PUSH
65100: LD_EXP 58
65104: PPUSH
65105: LD_VAR 0 2
65109: PUSH
65110: LD_EXP 58
65114: PUSH
65115: LD_VAR 0 2
65119: ARRAY
65120: PUSH
65121: LD_INT 1
65123: PLUS
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PPUSH
65129: LD_VAR 0 3
65133: PPUSH
65134: CALL 18182 0 3
65138: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
65139: LD_VAR 0 3
65143: PPUSH
65144: CALL_OW 310
65148: IFFALSE 65159
// ComExitBuilding ( j ) ;
65150: LD_VAR 0 3
65154: PPUSH
65155: CALL_OW 122
// wait ( 3 ) ;
65159: LD_INT 3
65161: PPUSH
65162: CALL_OW 67
// if not mc_build_list [ i ] then
65166: LD_EXP 57
65170: PUSH
65171: LD_VAR 0 2
65175: ARRAY
65176: NOT
65177: IFFALSE 65181
// break ;
65179: GO 65280
// if not HasTask ( j ) then
65181: LD_VAR 0 3
65185: PPUSH
65186: CALL_OW 314
65190: NOT
65191: IFFALSE 65278
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
65193: LD_VAR 0 3
65197: PPUSH
65198: LD_EXP 57
65202: PUSH
65203: LD_VAR 0 2
65207: ARRAY
65208: PUSH
65209: LD_INT 1
65211: ARRAY
65212: PUSH
65213: LD_INT 1
65215: ARRAY
65216: PPUSH
65217: LD_EXP 57
65221: PUSH
65222: LD_VAR 0 2
65226: ARRAY
65227: PUSH
65228: LD_INT 1
65230: ARRAY
65231: PUSH
65232: LD_INT 2
65234: ARRAY
65235: PPUSH
65236: LD_EXP 57
65240: PUSH
65241: LD_VAR 0 2
65245: ARRAY
65246: PUSH
65247: LD_INT 1
65249: ARRAY
65250: PUSH
65251: LD_INT 3
65253: ARRAY
65254: PPUSH
65255: LD_EXP 57
65259: PUSH
65260: LD_VAR 0 2
65264: ARRAY
65265: PUSH
65266: LD_INT 1
65268: ARRAY
65269: PUSH
65270: LD_INT 4
65272: ARRAY
65273: PPUSH
65274: CALL_OW 145
// end ;
65278: GO 65067
65280: POP
65281: POP
// end else
65282: GO 65426
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
65284: LD_EXP 52
65288: PUSH
65289: LD_VAR 0 2
65293: ARRAY
65294: PPUSH
65295: LD_EXP 57
65299: PUSH
65300: LD_VAR 0 2
65304: ARRAY
65305: PUSH
65306: LD_INT 1
65308: ARRAY
65309: PUSH
65310: LD_INT 1
65312: ARRAY
65313: PPUSH
65314: LD_EXP 57
65318: PUSH
65319: LD_VAR 0 2
65323: ARRAY
65324: PUSH
65325: LD_INT 1
65327: ARRAY
65328: PUSH
65329: LD_INT 2
65331: ARRAY
65332: PPUSH
65333: LD_EXP 57
65337: PUSH
65338: LD_VAR 0 2
65342: ARRAY
65343: PUSH
65344: LD_INT 1
65346: ARRAY
65347: PUSH
65348: LD_INT 3
65350: ARRAY
65351: PPUSH
65352: LD_EXP 57
65356: PUSH
65357: LD_VAR 0 2
65361: ARRAY
65362: PUSH
65363: LD_INT 1
65365: ARRAY
65366: PUSH
65367: LD_INT 4
65369: ARRAY
65370: PPUSH
65371: CALL 24933 0 5
65375: NOT
65376: IFFALSE 65426
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
65378: LD_ADDR_EXP 57
65382: PUSH
65383: LD_EXP 57
65387: PPUSH
65388: LD_VAR 0 2
65392: PPUSH
65393: LD_EXP 57
65397: PUSH
65398: LD_VAR 0 2
65402: ARRAY
65403: PPUSH
65404: LD_INT 1
65406: PPUSH
65407: LD_INT 1
65409: NEG
65410: PPUSH
65411: LD_INT 0
65413: PPUSH
65414: CALL 17600 0 4
65418: PPUSH
65419: CALL_OW 1
65423: ST_TO_ADDR
// continue ;
65424: GO 64302
// end ; end ; end ;
65426: GO 64302
65428: POP
65429: POP
// end ;
65430: LD_VAR 0 1
65434: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
65435: LD_INT 0
65437: PPUSH
65438: PPUSH
65439: PPUSH
65440: PPUSH
65441: PPUSH
65442: PPUSH
// if not mc_bases then
65443: LD_EXP 52
65447: NOT
65448: IFFALSE 65452
// exit ;
65450: GO 65879
// for i = 1 to mc_bases do
65452: LD_ADDR_VAR 0 2
65456: PUSH
65457: DOUBLE
65458: LD_INT 1
65460: DEC
65461: ST_TO_ADDR
65462: LD_EXP 52
65466: PUSH
65467: FOR_TO
65468: IFFALSE 65877
// begin tmp := mc_build_upgrade [ i ] ;
65470: LD_ADDR_VAR 0 4
65474: PUSH
65475: LD_EXP 84
65479: PUSH
65480: LD_VAR 0 2
65484: ARRAY
65485: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
65486: LD_ADDR_VAR 0 6
65490: PUSH
65491: LD_EXP 85
65495: PUSH
65496: LD_VAR 0 2
65500: ARRAY
65501: PPUSH
65502: LD_INT 2
65504: PUSH
65505: LD_INT 30
65507: PUSH
65508: LD_INT 6
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 30
65517: PUSH
65518: LD_INT 7
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: LIST
65529: PPUSH
65530: CALL_OW 72
65534: ST_TO_ADDR
// if not tmp and not lab then
65535: LD_VAR 0 4
65539: NOT
65540: PUSH
65541: LD_VAR 0 6
65545: NOT
65546: AND
65547: IFFALSE 65551
// continue ;
65549: GO 65467
// if tmp then
65551: LD_VAR 0 4
65555: IFFALSE 65675
// for j in tmp do
65557: LD_ADDR_VAR 0 3
65561: PUSH
65562: LD_VAR 0 4
65566: PUSH
65567: FOR_IN
65568: IFFALSE 65673
// begin if UpgradeCost ( j ) then
65570: LD_VAR 0 3
65574: PPUSH
65575: CALL 24593 0 1
65579: IFFALSE 65671
// begin ComUpgrade ( j ) ;
65581: LD_VAR 0 3
65585: PPUSH
65586: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
65590: LD_ADDR_EXP 84
65594: PUSH
65595: LD_EXP 84
65599: PPUSH
65600: LD_VAR 0 2
65604: PPUSH
65605: LD_EXP 84
65609: PUSH
65610: LD_VAR 0 2
65614: ARRAY
65615: PUSH
65616: LD_VAR 0 3
65620: DIFF
65621: PPUSH
65622: CALL_OW 1
65626: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
65627: LD_ADDR_EXP 59
65631: PUSH
65632: LD_EXP 59
65636: PPUSH
65637: LD_VAR 0 2
65641: PUSH
65642: LD_EXP 59
65646: PUSH
65647: LD_VAR 0 2
65651: ARRAY
65652: PUSH
65653: LD_INT 1
65655: PLUS
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: PPUSH
65661: LD_VAR 0 3
65665: PPUSH
65666: CALL 18182 0 3
65670: ST_TO_ADDR
// end ; end ;
65671: GO 65567
65673: POP
65674: POP
// if not lab or not mc_lab_upgrade [ i ] then
65675: LD_VAR 0 6
65679: NOT
65680: PUSH
65681: LD_EXP 86
65685: PUSH
65686: LD_VAR 0 2
65690: ARRAY
65691: NOT
65692: OR
65693: IFFALSE 65697
// continue ;
65695: GO 65467
// for j in lab do
65697: LD_ADDR_VAR 0 3
65701: PUSH
65702: LD_VAR 0 6
65706: PUSH
65707: FOR_IN
65708: IFFALSE 65873
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
65710: LD_VAR 0 3
65714: PPUSH
65715: CALL_OW 266
65719: PUSH
65720: LD_INT 6
65722: PUSH
65723: LD_INT 7
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: IN
65730: PUSH
65731: LD_VAR 0 3
65735: PPUSH
65736: CALL_OW 461
65740: PUSH
65741: LD_INT 1
65743: NONEQUAL
65744: AND
65745: IFFALSE 65871
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
65747: LD_VAR 0 3
65751: PPUSH
65752: LD_EXP 86
65756: PUSH
65757: LD_VAR 0 2
65761: ARRAY
65762: PUSH
65763: LD_INT 1
65765: ARRAY
65766: PPUSH
65767: CALL 24798 0 2
65771: IFFALSE 65871
// begin ComCancel ( j ) ;
65773: LD_VAR 0 3
65777: PPUSH
65778: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
65782: LD_VAR 0 3
65786: PPUSH
65787: LD_EXP 86
65791: PUSH
65792: LD_VAR 0 2
65796: ARRAY
65797: PUSH
65798: LD_INT 1
65800: ARRAY
65801: PPUSH
65802: CALL_OW 207
// if not j in mc_construct_list [ i ] then
65806: LD_VAR 0 3
65810: PUSH
65811: LD_EXP 59
65815: PUSH
65816: LD_VAR 0 2
65820: ARRAY
65821: IN
65822: NOT
65823: IFFALSE 65869
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
65825: LD_ADDR_EXP 59
65829: PUSH
65830: LD_EXP 59
65834: PPUSH
65835: LD_VAR 0 2
65839: PUSH
65840: LD_EXP 59
65844: PUSH
65845: LD_VAR 0 2
65849: ARRAY
65850: PUSH
65851: LD_INT 1
65853: PLUS
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PPUSH
65859: LD_VAR 0 3
65863: PPUSH
65864: CALL 18182 0 3
65868: ST_TO_ADDR
// break ;
65869: GO 65873
// end ; end ; end ;
65871: GO 65707
65873: POP
65874: POP
// end ;
65875: GO 65467
65877: POP
65878: POP
// end ;
65879: LD_VAR 0 1
65883: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
65884: LD_INT 0
65886: PPUSH
65887: PPUSH
65888: PPUSH
65889: PPUSH
65890: PPUSH
65891: PPUSH
65892: PPUSH
65893: PPUSH
65894: PPUSH
// if not mc_bases then
65895: LD_EXP 52
65899: NOT
65900: IFFALSE 65904
// exit ;
65902: GO 66309
// for i = 1 to mc_bases do
65904: LD_ADDR_VAR 0 2
65908: PUSH
65909: DOUBLE
65910: LD_INT 1
65912: DEC
65913: ST_TO_ADDR
65914: LD_EXP 52
65918: PUSH
65919: FOR_TO
65920: IFFALSE 66307
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
65922: LD_EXP 60
65926: PUSH
65927: LD_VAR 0 2
65931: ARRAY
65932: NOT
65933: PUSH
65934: LD_EXP 52
65938: PUSH
65939: LD_VAR 0 2
65943: ARRAY
65944: PPUSH
65945: LD_INT 30
65947: PUSH
65948: LD_INT 3
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PPUSH
65955: CALL_OW 72
65959: NOT
65960: OR
65961: IFFALSE 65965
// continue ;
65963: GO 65919
// busy := false ;
65965: LD_ADDR_VAR 0 8
65969: PUSH
65970: LD_INT 0
65972: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
65973: LD_ADDR_VAR 0 4
65977: PUSH
65978: LD_EXP 52
65982: PUSH
65983: LD_VAR 0 2
65987: ARRAY
65988: PPUSH
65989: LD_INT 30
65991: PUSH
65992: LD_INT 3
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PPUSH
65999: CALL_OW 72
66003: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
66004: LD_ADDR_VAR 0 6
66008: PUSH
66009: LD_EXP 60
66013: PUSH
66014: LD_VAR 0 2
66018: ARRAY
66019: PPUSH
66020: LD_INT 2
66022: PUSH
66023: LD_INT 30
66025: PUSH
66026: LD_INT 32
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_INT 30
66035: PUSH
66036: LD_INT 33
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: LIST
66047: PPUSH
66048: CALL_OW 72
66052: ST_TO_ADDR
// if not t then
66053: LD_VAR 0 6
66057: NOT
66058: IFFALSE 66062
// continue ;
66060: GO 65919
// for j in tmp do
66062: LD_ADDR_VAR 0 3
66066: PUSH
66067: LD_VAR 0 4
66071: PUSH
66072: FOR_IN
66073: IFFALSE 66103
// if not BuildingStatus ( j ) = bs_idle then
66075: LD_VAR 0 3
66079: PPUSH
66080: CALL_OW 461
66084: PUSH
66085: LD_INT 2
66087: EQUAL
66088: NOT
66089: IFFALSE 66101
// begin busy := true ;
66091: LD_ADDR_VAR 0 8
66095: PUSH
66096: LD_INT 1
66098: ST_TO_ADDR
// break ;
66099: GO 66103
// end ;
66101: GO 66072
66103: POP
66104: POP
// if busy then
66105: LD_VAR 0 8
66109: IFFALSE 66113
// continue ;
66111: GO 65919
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
66113: LD_ADDR_VAR 0 7
66117: PUSH
66118: LD_VAR 0 6
66122: PPUSH
66123: LD_INT 35
66125: PUSH
66126: LD_INT 0
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PPUSH
66133: CALL_OW 72
66137: ST_TO_ADDR
// if tw then
66138: LD_VAR 0 7
66142: IFFALSE 66219
// begin tw := tw [ 1 ] ;
66144: LD_ADDR_VAR 0 7
66148: PUSH
66149: LD_VAR 0 7
66153: PUSH
66154: LD_INT 1
66156: ARRAY
66157: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
66158: LD_ADDR_VAR 0 9
66162: PUSH
66163: LD_VAR 0 7
66167: PPUSH
66168: LD_EXP 77
66172: PUSH
66173: LD_VAR 0 2
66177: ARRAY
66178: PPUSH
66179: CALL 23152 0 2
66183: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
66184: LD_EXP 91
66188: PUSH
66189: LD_VAR 0 2
66193: ARRAY
66194: IFFALSE 66217
// if not weapon in mc_allowed_tower_weapons [ i ] then
66196: LD_VAR 0 9
66200: PUSH
66201: LD_EXP 91
66205: PUSH
66206: LD_VAR 0 2
66210: ARRAY
66211: IN
66212: NOT
66213: IFFALSE 66217
// continue ;
66215: GO 65919
// end else
66217: GO 66282
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
66219: LD_ADDR_VAR 0 5
66223: PUSH
66224: LD_EXP 60
66228: PUSH
66229: LD_VAR 0 2
66233: ARRAY
66234: PPUSH
66235: LD_VAR 0 4
66239: PPUSH
66240: CALL 53353 0 2
66244: ST_TO_ADDR
// if not tmp2 then
66245: LD_VAR 0 5
66249: NOT
66250: IFFALSE 66254
// continue ;
66252: GO 65919
// tw := tmp2 [ 1 ] ;
66254: LD_ADDR_VAR 0 7
66258: PUSH
66259: LD_VAR 0 5
66263: PUSH
66264: LD_INT 1
66266: ARRAY
66267: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
66268: LD_ADDR_VAR 0 9
66272: PUSH
66273: LD_VAR 0 5
66277: PUSH
66278: LD_INT 2
66280: ARRAY
66281: ST_TO_ADDR
// end ; if not weapon then
66282: LD_VAR 0 9
66286: NOT
66287: IFFALSE 66291
// continue ;
66289: GO 65919
// ComPlaceWeapon ( tw , weapon ) ;
66291: LD_VAR 0 7
66295: PPUSH
66296: LD_VAR 0 9
66300: PPUSH
66301: CALL_OW 148
// end ;
66305: GO 65919
66307: POP
66308: POP
// end ;
66309: LD_VAR 0 1
66313: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
66314: LD_INT 0
66316: PPUSH
66317: PPUSH
66318: PPUSH
66319: PPUSH
66320: PPUSH
66321: PPUSH
// if not mc_bases then
66322: LD_EXP 52
66326: NOT
66327: IFFALSE 66331
// exit ;
66329: GO 67343
// for i = 1 to mc_bases do
66331: LD_ADDR_VAR 0 2
66335: PUSH
66336: DOUBLE
66337: LD_INT 1
66339: DEC
66340: ST_TO_ADDR
66341: LD_EXP 52
66345: PUSH
66346: FOR_TO
66347: IFFALSE 67341
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
66349: LD_EXP 65
66353: PUSH
66354: LD_VAR 0 2
66358: ARRAY
66359: NOT
66360: PUSH
66361: LD_EXP 65
66365: PUSH
66366: LD_VAR 0 2
66370: ARRAY
66371: PUSH
66372: LD_EXP 66
66376: PUSH
66377: LD_VAR 0 2
66381: ARRAY
66382: EQUAL
66383: OR
66384: IFFALSE 66388
// continue ;
66386: GO 66346
// if mc_miners [ i ] then
66388: LD_EXP 66
66392: PUSH
66393: LD_VAR 0 2
66397: ARRAY
66398: IFFALSE 67028
// begin k := 1 ;
66400: LD_ADDR_VAR 0 4
66404: PUSH
66405: LD_INT 1
66407: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
66408: LD_ADDR_VAR 0 3
66412: PUSH
66413: DOUBLE
66414: LD_EXP 66
66418: PUSH
66419: LD_VAR 0 2
66423: ARRAY
66424: INC
66425: ST_TO_ADDR
66426: LD_INT 1
66428: PUSH
66429: FOR_DOWNTO
66430: IFFALSE 67026
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
66432: LD_EXP 66
66436: PUSH
66437: LD_VAR 0 2
66441: ARRAY
66442: PUSH
66443: LD_VAR 0 3
66447: ARRAY
66448: PPUSH
66449: CALL_OW 301
66453: PUSH
66454: LD_EXP 66
66458: PUSH
66459: LD_VAR 0 2
66463: ARRAY
66464: PUSH
66465: LD_VAR 0 3
66469: ARRAY
66470: PPUSH
66471: CALL_OW 257
66475: PUSH
66476: LD_INT 1
66478: NONEQUAL
66479: OR
66480: IFFALSE 66543
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
66482: LD_ADDR_VAR 0 5
66486: PUSH
66487: LD_EXP 66
66491: PUSH
66492: LD_VAR 0 2
66496: ARRAY
66497: PUSH
66498: LD_EXP 66
66502: PUSH
66503: LD_VAR 0 2
66507: ARRAY
66508: PUSH
66509: LD_VAR 0 3
66513: ARRAY
66514: DIFF
66515: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
66516: LD_ADDR_EXP 66
66520: PUSH
66521: LD_EXP 66
66525: PPUSH
66526: LD_VAR 0 2
66530: PPUSH
66531: LD_VAR 0 5
66535: PPUSH
66536: CALL_OW 1
66540: ST_TO_ADDR
// continue ;
66541: GO 66429
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
66543: LD_EXP 66
66547: PUSH
66548: LD_VAR 0 2
66552: ARRAY
66553: PUSH
66554: LD_VAR 0 3
66558: ARRAY
66559: PPUSH
66560: CALL 18118 0 1
66564: PUSH
66565: LD_EXP 66
66569: PUSH
66570: LD_VAR 0 2
66574: ARRAY
66575: PUSH
66576: LD_VAR 0 3
66580: ARRAY
66581: PPUSH
66582: CALL_OW 255
66586: PPUSH
66587: LD_EXP 65
66591: PUSH
66592: LD_VAR 0 2
66596: ARRAY
66597: PUSH
66598: LD_VAR 0 4
66602: ARRAY
66603: PUSH
66604: LD_INT 1
66606: ARRAY
66607: PPUSH
66608: LD_EXP 65
66612: PUSH
66613: LD_VAR 0 2
66617: ARRAY
66618: PUSH
66619: LD_VAR 0 4
66623: ARRAY
66624: PUSH
66625: LD_INT 2
66627: ARRAY
66628: PPUSH
66629: LD_INT 15
66631: PPUSH
66632: CALL 19078 0 4
66636: PUSH
66637: LD_INT 4
66639: ARRAY
66640: PUSH
66641: LD_EXP 66
66645: PUSH
66646: LD_VAR 0 2
66650: ARRAY
66651: PUSH
66652: LD_VAR 0 3
66656: ARRAY
66657: PPUSH
66658: LD_INT 10
66660: PPUSH
66661: CALL 20775 0 2
66665: PUSH
66666: LD_INT 4
66668: ARRAY
66669: OR
66670: AND
66671: IFFALSE 66694
// ComStop ( mc_miners [ i ] [ j ] ) ;
66673: LD_EXP 66
66677: PUSH
66678: LD_VAR 0 2
66682: ARRAY
66683: PUSH
66684: LD_VAR 0 3
66688: ARRAY
66689: PPUSH
66690: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
66694: LD_EXP 66
66698: PUSH
66699: LD_VAR 0 2
66703: ARRAY
66704: PUSH
66705: LD_VAR 0 3
66709: ARRAY
66710: PPUSH
66711: CALL_OW 257
66715: PUSH
66716: LD_INT 1
66718: EQUAL
66719: PUSH
66720: LD_EXP 66
66724: PUSH
66725: LD_VAR 0 2
66729: ARRAY
66730: PUSH
66731: LD_VAR 0 3
66735: ARRAY
66736: PPUSH
66737: CALL_OW 459
66741: NOT
66742: AND
66743: PUSH
66744: LD_EXP 66
66748: PUSH
66749: LD_VAR 0 2
66753: ARRAY
66754: PUSH
66755: LD_VAR 0 3
66759: ARRAY
66760: PPUSH
66761: CALL_OW 255
66765: PPUSH
66766: LD_EXP 65
66770: PUSH
66771: LD_VAR 0 2
66775: ARRAY
66776: PUSH
66777: LD_VAR 0 4
66781: ARRAY
66782: PUSH
66783: LD_INT 1
66785: ARRAY
66786: PPUSH
66787: LD_EXP 65
66791: PUSH
66792: LD_VAR 0 2
66796: ARRAY
66797: PUSH
66798: LD_VAR 0 4
66802: ARRAY
66803: PUSH
66804: LD_INT 2
66806: ARRAY
66807: PPUSH
66808: LD_INT 15
66810: PPUSH
66811: CALL 19078 0 4
66815: PUSH
66816: LD_INT 4
66818: ARRAY
66819: PUSH
66820: LD_INT 0
66822: EQUAL
66823: AND
66824: PUSH
66825: LD_EXP 66
66829: PUSH
66830: LD_VAR 0 2
66834: ARRAY
66835: PUSH
66836: LD_VAR 0 3
66840: ARRAY
66841: PPUSH
66842: CALL_OW 314
66846: NOT
66847: AND
66848: IFFALSE 67024
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
66850: LD_EXP 66
66854: PUSH
66855: LD_VAR 0 2
66859: ARRAY
66860: PUSH
66861: LD_VAR 0 3
66865: ARRAY
66866: PPUSH
66867: CALL_OW 310
66871: IFFALSE 66894
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
66873: LD_EXP 66
66877: PUSH
66878: LD_VAR 0 2
66882: ARRAY
66883: PUSH
66884: LD_VAR 0 3
66888: ARRAY
66889: PPUSH
66890: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
66894: LD_EXP 66
66898: PUSH
66899: LD_VAR 0 2
66903: ARRAY
66904: PUSH
66905: LD_VAR 0 3
66909: ARRAY
66910: PPUSH
66911: CALL_OW 314
66915: NOT
66916: IFFALSE 66984
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
66918: LD_EXP 66
66922: PUSH
66923: LD_VAR 0 2
66927: ARRAY
66928: PUSH
66929: LD_VAR 0 3
66933: ARRAY
66934: PPUSH
66935: LD_EXP 65
66939: PUSH
66940: LD_VAR 0 2
66944: ARRAY
66945: PUSH
66946: LD_VAR 0 4
66950: ARRAY
66951: PUSH
66952: LD_INT 1
66954: ARRAY
66955: PPUSH
66956: LD_EXP 65
66960: PUSH
66961: LD_VAR 0 2
66965: ARRAY
66966: PUSH
66967: LD_VAR 0 4
66971: ARRAY
66972: PUSH
66973: LD_INT 2
66975: ARRAY
66976: PPUSH
66977: LD_INT 0
66979: PPUSH
66980: CALL_OW 193
// k := k + 1 ;
66984: LD_ADDR_VAR 0 4
66988: PUSH
66989: LD_VAR 0 4
66993: PUSH
66994: LD_INT 1
66996: PLUS
66997: ST_TO_ADDR
// if k > mc_mines [ i ] then
66998: LD_VAR 0 4
67002: PUSH
67003: LD_EXP 65
67007: PUSH
67008: LD_VAR 0 2
67012: ARRAY
67013: GREATER
67014: IFFALSE 67024
// k := 1 ;
67016: LD_ADDR_VAR 0 4
67020: PUSH
67021: LD_INT 1
67023: ST_TO_ADDR
// end ; end ;
67024: GO 66429
67026: POP
67027: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
67028: LD_ADDR_VAR 0 5
67032: PUSH
67033: LD_EXP 52
67037: PUSH
67038: LD_VAR 0 2
67042: ARRAY
67043: PPUSH
67044: LD_INT 2
67046: PUSH
67047: LD_INT 30
67049: PUSH
67050: LD_INT 4
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: LD_INT 30
67059: PUSH
67060: LD_INT 5
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PUSH
67067: LD_INT 30
67069: PUSH
67070: LD_INT 32
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: PPUSH
67083: CALL_OW 72
67087: ST_TO_ADDR
// if not tmp then
67088: LD_VAR 0 5
67092: NOT
67093: IFFALSE 67097
// continue ;
67095: GO 66346
// list := [ ] ;
67097: LD_ADDR_VAR 0 6
67101: PUSH
67102: EMPTY
67103: ST_TO_ADDR
// for j in tmp do
67104: LD_ADDR_VAR 0 3
67108: PUSH
67109: LD_VAR 0 5
67113: PUSH
67114: FOR_IN
67115: IFFALSE 67184
// begin for k in UnitsInside ( j ) do
67117: LD_ADDR_VAR 0 4
67121: PUSH
67122: LD_VAR 0 3
67126: PPUSH
67127: CALL_OW 313
67131: PUSH
67132: FOR_IN
67133: IFFALSE 67180
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
67135: LD_VAR 0 4
67139: PPUSH
67140: CALL_OW 257
67144: PUSH
67145: LD_INT 1
67147: EQUAL
67148: PUSH
67149: LD_VAR 0 4
67153: PPUSH
67154: CALL_OW 459
67158: NOT
67159: AND
67160: IFFALSE 67178
// list := list ^ k ;
67162: LD_ADDR_VAR 0 6
67166: PUSH
67167: LD_VAR 0 6
67171: PUSH
67172: LD_VAR 0 4
67176: ADD
67177: ST_TO_ADDR
67178: GO 67132
67180: POP
67181: POP
// end ;
67182: GO 67114
67184: POP
67185: POP
// list := list diff mc_miners [ i ] ;
67186: LD_ADDR_VAR 0 6
67190: PUSH
67191: LD_VAR 0 6
67195: PUSH
67196: LD_EXP 66
67200: PUSH
67201: LD_VAR 0 2
67205: ARRAY
67206: DIFF
67207: ST_TO_ADDR
// if not list then
67208: LD_VAR 0 6
67212: NOT
67213: IFFALSE 67217
// continue ;
67215: GO 66346
// k := mc_mines [ i ] - mc_miners [ i ] ;
67217: LD_ADDR_VAR 0 4
67221: PUSH
67222: LD_EXP 65
67226: PUSH
67227: LD_VAR 0 2
67231: ARRAY
67232: PUSH
67233: LD_EXP 66
67237: PUSH
67238: LD_VAR 0 2
67242: ARRAY
67243: MINUS
67244: ST_TO_ADDR
// if k > list then
67245: LD_VAR 0 4
67249: PUSH
67250: LD_VAR 0 6
67254: GREATER
67255: IFFALSE 67267
// k := list ;
67257: LD_ADDR_VAR 0 4
67261: PUSH
67262: LD_VAR 0 6
67266: ST_TO_ADDR
// for j = 1 to k do
67267: LD_ADDR_VAR 0 3
67271: PUSH
67272: DOUBLE
67273: LD_INT 1
67275: DEC
67276: ST_TO_ADDR
67277: LD_VAR 0 4
67281: PUSH
67282: FOR_TO
67283: IFFALSE 67337
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
67285: LD_ADDR_EXP 66
67289: PUSH
67290: LD_EXP 66
67294: PPUSH
67295: LD_VAR 0 2
67299: PUSH
67300: LD_EXP 66
67304: PUSH
67305: LD_VAR 0 2
67309: ARRAY
67310: PUSH
67311: LD_INT 1
67313: PLUS
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PPUSH
67319: LD_VAR 0 6
67323: PUSH
67324: LD_VAR 0 3
67328: ARRAY
67329: PPUSH
67330: CALL 18182 0 3
67334: ST_TO_ADDR
67335: GO 67282
67337: POP
67338: POP
// end ;
67339: GO 66346
67341: POP
67342: POP
// end ;
67343: LD_VAR 0 1
67347: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
67348: LD_INT 0
67350: PPUSH
67351: PPUSH
67352: PPUSH
67353: PPUSH
67354: PPUSH
67355: PPUSH
67356: PPUSH
67357: PPUSH
67358: PPUSH
67359: PPUSH
// if not mc_bases then
67360: LD_EXP 52
67364: NOT
67365: IFFALSE 67369
// exit ;
67367: GO 69119
// for i = 1 to mc_bases do
67369: LD_ADDR_VAR 0 2
67373: PUSH
67374: DOUBLE
67375: LD_INT 1
67377: DEC
67378: ST_TO_ADDR
67379: LD_EXP 52
67383: PUSH
67384: FOR_TO
67385: IFFALSE 69117
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
67387: LD_EXP 52
67391: PUSH
67392: LD_VAR 0 2
67396: ARRAY
67397: NOT
67398: PUSH
67399: LD_EXP 59
67403: PUSH
67404: LD_VAR 0 2
67408: ARRAY
67409: OR
67410: IFFALSE 67414
// continue ;
67412: GO 67384
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
67414: LD_EXP 68
67418: PUSH
67419: LD_VAR 0 2
67423: ARRAY
67424: NOT
67425: PUSH
67426: LD_EXP 69
67430: PUSH
67431: LD_VAR 0 2
67435: ARRAY
67436: AND
67437: IFFALSE 67475
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
67439: LD_ADDR_EXP 69
67443: PUSH
67444: LD_EXP 69
67448: PPUSH
67449: LD_VAR 0 2
67453: PPUSH
67454: EMPTY
67455: PPUSH
67456: CALL_OW 1
67460: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
67461: LD_VAR 0 2
67465: PPUSH
67466: LD_INT 107
67468: PPUSH
67469: CALL 58229 0 2
// continue ;
67473: GO 67384
// end ; target := [ ] ;
67475: LD_ADDR_VAR 0 6
67479: PUSH
67480: EMPTY
67481: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
67482: LD_ADDR_VAR 0 3
67486: PUSH
67487: DOUBLE
67488: LD_EXP 68
67492: PUSH
67493: LD_VAR 0 2
67497: ARRAY
67498: INC
67499: ST_TO_ADDR
67500: LD_INT 1
67502: PUSH
67503: FOR_DOWNTO
67504: IFFALSE 67764
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
67506: LD_EXP 68
67510: PUSH
67511: LD_VAR 0 2
67515: ARRAY
67516: PUSH
67517: LD_VAR 0 3
67521: ARRAY
67522: PUSH
67523: LD_INT 2
67525: ARRAY
67526: PPUSH
67527: LD_EXP 68
67531: PUSH
67532: LD_VAR 0 2
67536: ARRAY
67537: PUSH
67538: LD_VAR 0 3
67542: ARRAY
67543: PUSH
67544: LD_INT 3
67546: ARRAY
67547: PPUSH
67548: CALL_OW 488
67552: PUSH
67553: LD_EXP 68
67557: PUSH
67558: LD_VAR 0 2
67562: ARRAY
67563: PUSH
67564: LD_VAR 0 3
67568: ARRAY
67569: PUSH
67570: LD_INT 2
67572: ARRAY
67573: PPUSH
67574: LD_EXP 68
67578: PUSH
67579: LD_VAR 0 2
67583: ARRAY
67584: PUSH
67585: LD_VAR 0 3
67589: ARRAY
67590: PUSH
67591: LD_INT 3
67593: ARRAY
67594: PPUSH
67595: CALL_OW 284
67599: PUSH
67600: LD_INT 0
67602: EQUAL
67603: AND
67604: IFFALSE 67659
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
67606: LD_ADDR_VAR 0 5
67610: PUSH
67611: LD_EXP 68
67615: PUSH
67616: LD_VAR 0 2
67620: ARRAY
67621: PPUSH
67622: LD_VAR 0 3
67626: PPUSH
67627: CALL_OW 3
67631: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
67632: LD_ADDR_EXP 68
67636: PUSH
67637: LD_EXP 68
67641: PPUSH
67642: LD_VAR 0 2
67646: PPUSH
67647: LD_VAR 0 5
67651: PPUSH
67652: CALL_OW 1
67656: ST_TO_ADDR
// continue ;
67657: GO 67503
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
67659: LD_EXP 52
67663: PUSH
67664: LD_VAR 0 2
67668: ARRAY
67669: PUSH
67670: LD_INT 1
67672: ARRAY
67673: PPUSH
67674: CALL_OW 255
67678: PPUSH
67679: LD_EXP 68
67683: PUSH
67684: LD_VAR 0 2
67688: ARRAY
67689: PUSH
67690: LD_VAR 0 3
67694: ARRAY
67695: PUSH
67696: LD_INT 2
67698: ARRAY
67699: PPUSH
67700: LD_EXP 68
67704: PUSH
67705: LD_VAR 0 2
67709: ARRAY
67710: PUSH
67711: LD_VAR 0 3
67715: ARRAY
67716: PUSH
67717: LD_INT 3
67719: ARRAY
67720: PPUSH
67721: LD_INT 30
67723: PPUSH
67724: CALL 19078 0 4
67728: PUSH
67729: LD_INT 4
67731: ARRAY
67732: PUSH
67733: LD_INT 0
67735: EQUAL
67736: IFFALSE 67762
// begin target := mc_crates [ i ] [ j ] ;
67738: LD_ADDR_VAR 0 6
67742: PUSH
67743: LD_EXP 68
67747: PUSH
67748: LD_VAR 0 2
67752: ARRAY
67753: PUSH
67754: LD_VAR 0 3
67758: ARRAY
67759: ST_TO_ADDR
// break ;
67760: GO 67764
// end ; end ;
67762: GO 67503
67764: POP
67765: POP
// if not target then
67766: LD_VAR 0 6
67770: NOT
67771: IFFALSE 67775
// continue ;
67773: GO 67384
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
67775: LD_ADDR_VAR 0 7
67779: PUSH
67780: LD_EXP 71
67784: PUSH
67785: LD_VAR 0 2
67789: ARRAY
67790: PPUSH
67791: LD_INT 2
67793: PUSH
67794: LD_INT 3
67796: PUSH
67797: LD_INT 58
67799: PUSH
67800: EMPTY
67801: LIST
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 61
67809: PUSH
67810: EMPTY
67811: LIST
67812: PUSH
67813: LD_INT 33
67815: PUSH
67816: LD_INT 5
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 33
67825: PUSH
67826: LD_INT 3
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 2
67842: PUSH
67843: LD_INT 34
67845: PUSH
67846: LD_INT 32
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: PUSH
67853: LD_INT 34
67855: PUSH
67856: LD_INT 51
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: LD_INT 34
67865: PUSH
67866: LD_INT 12
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PPUSH
67883: CALL_OW 72
67887: ST_TO_ADDR
// if not cargo then
67888: LD_VAR 0 7
67892: NOT
67893: IFFALSE 68536
// begin if mc_crates_collector [ i ] < 5 then
67895: LD_EXP 69
67899: PUSH
67900: LD_VAR 0 2
67904: ARRAY
67905: PUSH
67906: LD_INT 5
67908: LESS
67909: IFFALSE 68275
// begin if mc_ape [ i ] then
67911: LD_EXP 81
67915: PUSH
67916: LD_VAR 0 2
67920: ARRAY
67921: IFFALSE 67968
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
67923: LD_ADDR_VAR 0 5
67927: PUSH
67928: LD_EXP 81
67932: PUSH
67933: LD_VAR 0 2
67937: ARRAY
67938: PPUSH
67939: LD_INT 25
67941: PUSH
67942: LD_INT 16
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PUSH
67949: LD_INT 24
67951: PUSH
67952: LD_INT 750
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: PPUSH
67963: CALL_OW 72
67967: ST_TO_ADDR
// if not tmp then
67968: LD_VAR 0 5
67972: NOT
67973: IFFALSE 68020
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
67975: LD_ADDR_VAR 0 5
67979: PUSH
67980: LD_EXP 52
67984: PUSH
67985: LD_VAR 0 2
67989: ARRAY
67990: PPUSH
67991: LD_INT 25
67993: PUSH
67994: LD_INT 2
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: LD_INT 24
68003: PUSH
68004: LD_INT 750
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PPUSH
68015: CALL_OW 72
68019: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
68020: LD_EXP 81
68024: PUSH
68025: LD_VAR 0 2
68029: ARRAY
68030: PUSH
68031: LD_EXP 52
68035: PUSH
68036: LD_VAR 0 2
68040: ARRAY
68041: PPUSH
68042: LD_INT 25
68044: PUSH
68045: LD_INT 2
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 24
68054: PUSH
68055: LD_INT 750
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PPUSH
68066: CALL_OW 72
68070: AND
68071: PUSH
68072: LD_VAR 0 5
68076: PUSH
68077: LD_INT 5
68079: LESS
68080: AND
68081: IFFALSE 68163
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
68083: LD_ADDR_VAR 0 3
68087: PUSH
68088: LD_EXP 52
68092: PUSH
68093: LD_VAR 0 2
68097: ARRAY
68098: PPUSH
68099: LD_INT 25
68101: PUSH
68102: LD_INT 2
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: LD_INT 24
68111: PUSH
68112: LD_INT 750
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PPUSH
68123: CALL_OW 72
68127: PUSH
68128: FOR_IN
68129: IFFALSE 68161
// begin tmp := tmp union j ;
68131: LD_ADDR_VAR 0 5
68135: PUSH
68136: LD_VAR 0 5
68140: PUSH
68141: LD_VAR 0 3
68145: UNION
68146: ST_TO_ADDR
// if tmp >= 5 then
68147: LD_VAR 0 5
68151: PUSH
68152: LD_INT 5
68154: GREATEREQUAL
68155: IFFALSE 68159
// break ;
68157: GO 68161
// end ;
68159: GO 68128
68161: POP
68162: POP
// end ; if not tmp then
68163: LD_VAR 0 5
68167: NOT
68168: IFFALSE 68172
// continue ;
68170: GO 67384
// for j in tmp do
68172: LD_ADDR_VAR 0 3
68176: PUSH
68177: LD_VAR 0 5
68181: PUSH
68182: FOR_IN
68183: IFFALSE 68273
// if not GetTag ( j ) then
68185: LD_VAR 0 3
68189: PPUSH
68190: CALL_OW 110
68194: NOT
68195: IFFALSE 68271
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
68197: LD_ADDR_EXP 69
68201: PUSH
68202: LD_EXP 69
68206: PPUSH
68207: LD_VAR 0 2
68211: PUSH
68212: LD_EXP 69
68216: PUSH
68217: LD_VAR 0 2
68221: ARRAY
68222: PUSH
68223: LD_INT 1
68225: PLUS
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PPUSH
68231: LD_VAR 0 3
68235: PPUSH
68236: CALL 18182 0 3
68240: ST_TO_ADDR
// SetTag ( j , 107 ) ;
68241: LD_VAR 0 3
68245: PPUSH
68246: LD_INT 107
68248: PPUSH
68249: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
68253: LD_EXP 69
68257: PUSH
68258: LD_VAR 0 2
68262: ARRAY
68263: PUSH
68264: LD_INT 5
68266: GREATEREQUAL
68267: IFFALSE 68271
// break ;
68269: GO 68273
// end ;
68271: GO 68182
68273: POP
68274: POP
// end ; if mc_crates_collector [ i ] and target then
68275: LD_EXP 69
68279: PUSH
68280: LD_VAR 0 2
68284: ARRAY
68285: PUSH
68286: LD_VAR 0 6
68290: AND
68291: IFFALSE 68534
// begin if mc_crates_collector [ i ] < target [ 1 ] then
68293: LD_EXP 69
68297: PUSH
68298: LD_VAR 0 2
68302: ARRAY
68303: PUSH
68304: LD_VAR 0 6
68308: PUSH
68309: LD_INT 1
68311: ARRAY
68312: LESS
68313: IFFALSE 68333
// tmp := mc_crates_collector [ i ] else
68315: LD_ADDR_VAR 0 5
68319: PUSH
68320: LD_EXP 69
68324: PUSH
68325: LD_VAR 0 2
68329: ARRAY
68330: ST_TO_ADDR
68331: GO 68347
// tmp := target [ 1 ] ;
68333: LD_ADDR_VAR 0 5
68337: PUSH
68338: LD_VAR 0 6
68342: PUSH
68343: LD_INT 1
68345: ARRAY
68346: ST_TO_ADDR
// k := 0 ;
68347: LD_ADDR_VAR 0 4
68351: PUSH
68352: LD_INT 0
68354: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
68355: LD_ADDR_VAR 0 3
68359: PUSH
68360: LD_EXP 69
68364: PUSH
68365: LD_VAR 0 2
68369: ARRAY
68370: PUSH
68371: FOR_IN
68372: IFFALSE 68532
// begin k := k + 1 ;
68374: LD_ADDR_VAR 0 4
68378: PUSH
68379: LD_VAR 0 4
68383: PUSH
68384: LD_INT 1
68386: PLUS
68387: ST_TO_ADDR
// if k > tmp then
68388: LD_VAR 0 4
68392: PUSH
68393: LD_VAR 0 5
68397: GREATER
68398: IFFALSE 68402
// break ;
68400: GO 68532
// if not GetClass ( j ) in [ 2 , 16 ] then
68402: LD_VAR 0 3
68406: PPUSH
68407: CALL_OW 257
68411: PUSH
68412: LD_INT 2
68414: PUSH
68415: LD_INT 16
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: IN
68422: NOT
68423: IFFALSE 68476
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
68425: LD_ADDR_EXP 69
68429: PUSH
68430: LD_EXP 69
68434: PPUSH
68435: LD_VAR 0 2
68439: PPUSH
68440: LD_EXP 69
68444: PUSH
68445: LD_VAR 0 2
68449: ARRAY
68450: PUSH
68451: LD_VAR 0 3
68455: DIFF
68456: PPUSH
68457: CALL_OW 1
68461: ST_TO_ADDR
// SetTag ( j , 0 ) ;
68462: LD_VAR 0 3
68466: PPUSH
68467: LD_INT 0
68469: PPUSH
68470: CALL_OW 109
// continue ;
68474: GO 68371
// end ; if IsInUnit ( j ) then
68476: LD_VAR 0 3
68480: PPUSH
68481: CALL_OW 310
68485: IFFALSE 68496
// ComExitBuilding ( j ) ;
68487: LD_VAR 0 3
68491: PPUSH
68492: CALL_OW 122
// wait ( 3 ) ;
68496: LD_INT 3
68498: PPUSH
68499: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
68503: LD_VAR 0 3
68507: PPUSH
68508: LD_VAR 0 6
68512: PUSH
68513: LD_INT 2
68515: ARRAY
68516: PPUSH
68517: LD_VAR 0 6
68521: PUSH
68522: LD_INT 3
68524: ARRAY
68525: PPUSH
68526: CALL_OW 117
// end ;
68530: GO 68371
68532: POP
68533: POP
// end ; end else
68534: GO 69115
// begin for j in cargo do
68536: LD_ADDR_VAR 0 3
68540: PUSH
68541: LD_VAR 0 7
68545: PUSH
68546: FOR_IN
68547: IFFALSE 69113
// begin if GetTag ( j ) <> 0 then
68549: LD_VAR 0 3
68553: PPUSH
68554: CALL_OW 110
68558: PUSH
68559: LD_INT 0
68561: NONEQUAL
68562: IFFALSE 68566
// continue ;
68564: GO 68546
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
68566: LD_VAR 0 3
68570: PPUSH
68571: CALL_OW 256
68575: PUSH
68576: LD_INT 1000
68578: LESS
68579: PUSH
68580: LD_VAR 0 3
68584: PPUSH
68585: LD_EXP 76
68589: PUSH
68590: LD_VAR 0 2
68594: ARRAY
68595: PPUSH
68596: CALL_OW 308
68600: NOT
68601: AND
68602: IFFALSE 68624
// ComMoveToArea ( j , mc_parking [ i ] ) ;
68604: LD_VAR 0 3
68608: PPUSH
68609: LD_EXP 76
68613: PUSH
68614: LD_VAR 0 2
68618: ARRAY
68619: PPUSH
68620: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
68624: LD_VAR 0 3
68628: PPUSH
68629: CALL_OW 256
68633: PUSH
68634: LD_INT 1000
68636: LESS
68637: PUSH
68638: LD_VAR 0 3
68642: PPUSH
68643: LD_EXP 76
68647: PUSH
68648: LD_VAR 0 2
68652: ARRAY
68653: PPUSH
68654: CALL_OW 308
68658: AND
68659: IFFALSE 68663
// continue ;
68661: GO 68546
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
68663: LD_VAR 0 3
68667: PPUSH
68668: CALL_OW 262
68672: PUSH
68673: LD_INT 2
68675: EQUAL
68676: PUSH
68677: LD_VAR 0 3
68681: PPUSH
68682: CALL_OW 261
68686: PUSH
68687: LD_INT 15
68689: LESS
68690: AND
68691: IFFALSE 68695
// continue ;
68693: GO 68546
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
68695: LD_VAR 0 3
68699: PPUSH
68700: CALL_OW 262
68704: PUSH
68705: LD_INT 1
68707: EQUAL
68708: PUSH
68709: LD_VAR 0 3
68713: PPUSH
68714: CALL_OW 261
68718: PUSH
68719: LD_INT 10
68721: LESS
68722: AND
68723: IFFALSE 69052
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
68725: LD_ADDR_VAR 0 8
68729: PUSH
68730: LD_EXP 52
68734: PUSH
68735: LD_VAR 0 2
68739: ARRAY
68740: PPUSH
68741: LD_INT 2
68743: PUSH
68744: LD_INT 30
68746: PUSH
68747: LD_INT 0
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: LD_INT 30
68756: PUSH
68757: LD_INT 1
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: LIST
68768: PPUSH
68769: CALL_OW 72
68773: ST_TO_ADDR
// if not depot then
68774: LD_VAR 0 8
68778: NOT
68779: IFFALSE 68783
// continue ;
68781: GO 68546
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
68783: LD_VAR 0 3
68787: PPUSH
68788: LD_VAR 0 8
68792: PPUSH
68793: LD_VAR 0 3
68797: PPUSH
68798: CALL_OW 74
68802: PPUSH
68803: CALL_OW 296
68807: PUSH
68808: LD_INT 6
68810: LESS
68811: IFFALSE 68827
// SetFuel ( j , 100 ) else
68813: LD_VAR 0 3
68817: PPUSH
68818: LD_INT 100
68820: PPUSH
68821: CALL_OW 240
68825: GO 69052
// if GetFuel ( j ) = 0 then
68827: LD_VAR 0 3
68831: PPUSH
68832: CALL_OW 261
68836: PUSH
68837: LD_INT 0
68839: EQUAL
68840: IFFALSE 69052
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
68842: LD_ADDR_EXP 71
68846: PUSH
68847: LD_EXP 71
68851: PPUSH
68852: LD_VAR 0 2
68856: PPUSH
68857: LD_EXP 71
68861: PUSH
68862: LD_VAR 0 2
68866: ARRAY
68867: PUSH
68868: LD_VAR 0 3
68872: DIFF
68873: PPUSH
68874: CALL_OW 1
68878: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
68879: LD_VAR 0 3
68883: PPUSH
68884: CALL_OW 263
68888: PUSH
68889: LD_INT 1
68891: EQUAL
68892: IFFALSE 68908
// ComExitVehicle ( IsInUnit ( j ) ) ;
68894: LD_VAR 0 3
68898: PPUSH
68899: CALL_OW 310
68903: PPUSH
68904: CALL_OW 121
// if GetControl ( j ) = control_remote then
68908: LD_VAR 0 3
68912: PPUSH
68913: CALL_OW 263
68917: PUSH
68918: LD_INT 2
68920: EQUAL
68921: IFFALSE 68932
// ComUnlink ( j ) ;
68923: LD_VAR 0 3
68927: PPUSH
68928: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
68932: LD_ADDR_VAR 0 9
68936: PUSH
68937: LD_VAR 0 2
68941: PPUSH
68942: LD_INT 3
68944: PPUSH
68945: CALL 78189 0 2
68949: ST_TO_ADDR
// if fac then
68950: LD_VAR 0 9
68954: IFFALSE 69050
// begin for k in fac do
68956: LD_ADDR_VAR 0 4
68960: PUSH
68961: LD_VAR 0 9
68965: PUSH
68966: FOR_IN
68967: IFFALSE 69048
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
68969: LD_ADDR_VAR 0 10
68973: PUSH
68974: LD_VAR 0 9
68978: PPUSH
68979: LD_VAR 0 3
68983: PPUSH
68984: CALL_OW 265
68988: PPUSH
68989: LD_VAR 0 3
68993: PPUSH
68994: CALL_OW 262
68998: PPUSH
68999: LD_VAR 0 3
69003: PPUSH
69004: CALL_OW 263
69008: PPUSH
69009: LD_VAR 0 3
69013: PPUSH
69014: CALL_OW 264
69018: PPUSH
69019: CALL 15714 0 5
69023: ST_TO_ADDR
// if components then
69024: LD_VAR 0 10
69028: IFFALSE 69046
// begin MC_InsertProduceList ( i , components ) ;
69030: LD_VAR 0 2
69034: PPUSH
69035: LD_VAR 0 10
69039: PPUSH
69040: CALL 77734 0 2
// break ;
69044: GO 69048
// end ; end ;
69046: GO 68966
69048: POP
69049: POP
// end ; continue ;
69050: GO 68546
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
69052: LD_VAR 0 3
69056: PPUSH
69057: LD_INT 1
69059: PPUSH
69060: CALL_OW 289
69064: PUSH
69065: LD_INT 100
69067: LESS
69068: PUSH
69069: LD_VAR 0 3
69073: PPUSH
69074: CALL_OW 314
69078: NOT
69079: AND
69080: IFFALSE 69109
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
69082: LD_VAR 0 3
69086: PPUSH
69087: LD_VAR 0 6
69091: PUSH
69092: LD_INT 2
69094: ARRAY
69095: PPUSH
69096: LD_VAR 0 6
69100: PUSH
69101: LD_INT 3
69103: ARRAY
69104: PPUSH
69105: CALL_OW 117
// break ;
69109: GO 69113
// end ;
69111: GO 68546
69113: POP
69114: POP
// end ; end ;
69115: GO 67384
69117: POP
69118: POP
// end ;
69119: LD_VAR 0 1
69123: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
69124: LD_INT 0
69126: PPUSH
69127: PPUSH
69128: PPUSH
69129: PPUSH
// if not mc_bases then
69130: LD_EXP 52
69134: NOT
69135: IFFALSE 69139
// exit ;
69137: GO 69300
// for i = 1 to mc_bases do
69139: LD_ADDR_VAR 0 2
69143: PUSH
69144: DOUBLE
69145: LD_INT 1
69147: DEC
69148: ST_TO_ADDR
69149: LD_EXP 52
69153: PUSH
69154: FOR_TO
69155: IFFALSE 69298
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
69157: LD_ADDR_VAR 0 4
69161: PUSH
69162: LD_EXP 71
69166: PUSH
69167: LD_VAR 0 2
69171: ARRAY
69172: PUSH
69173: LD_EXP 74
69177: PUSH
69178: LD_VAR 0 2
69182: ARRAY
69183: UNION
69184: PPUSH
69185: LD_INT 33
69187: PUSH
69188: LD_INT 2
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PPUSH
69195: CALL_OW 72
69199: ST_TO_ADDR
// if tmp then
69200: LD_VAR 0 4
69204: IFFALSE 69296
// for j in tmp do
69206: LD_ADDR_VAR 0 3
69210: PUSH
69211: LD_VAR 0 4
69215: PUSH
69216: FOR_IN
69217: IFFALSE 69294
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
69219: LD_VAR 0 3
69223: PPUSH
69224: CALL_OW 312
69228: NOT
69229: PUSH
69230: LD_VAR 0 3
69234: PPUSH
69235: CALL_OW 256
69239: PUSH
69240: LD_INT 250
69242: GREATEREQUAL
69243: AND
69244: IFFALSE 69257
// Connect ( j ) else
69246: LD_VAR 0 3
69250: PPUSH
69251: CALL 21115 0 1
69255: GO 69292
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
69257: LD_VAR 0 3
69261: PPUSH
69262: CALL_OW 256
69266: PUSH
69267: LD_INT 250
69269: LESS
69270: PUSH
69271: LD_VAR 0 3
69275: PPUSH
69276: CALL_OW 312
69280: AND
69281: IFFALSE 69292
// ComUnlink ( j ) ;
69283: LD_VAR 0 3
69287: PPUSH
69288: CALL_OW 136
69292: GO 69216
69294: POP
69295: POP
// end ;
69296: GO 69154
69298: POP
69299: POP
// end ;
69300: LD_VAR 0 1
69304: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
69305: LD_INT 0
69307: PPUSH
69308: PPUSH
69309: PPUSH
69310: PPUSH
69311: PPUSH
// if not mc_bases then
69312: LD_EXP 52
69316: NOT
69317: IFFALSE 69321
// exit ;
69319: GO 69766
// for i = 1 to mc_bases do
69321: LD_ADDR_VAR 0 2
69325: PUSH
69326: DOUBLE
69327: LD_INT 1
69329: DEC
69330: ST_TO_ADDR
69331: LD_EXP 52
69335: PUSH
69336: FOR_TO
69337: IFFALSE 69764
// begin if not mc_produce [ i ] then
69339: LD_EXP 73
69343: PUSH
69344: LD_VAR 0 2
69348: ARRAY
69349: NOT
69350: IFFALSE 69354
// continue ;
69352: GO 69336
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
69354: LD_ADDR_VAR 0 5
69358: PUSH
69359: LD_EXP 52
69363: PUSH
69364: LD_VAR 0 2
69368: ARRAY
69369: PPUSH
69370: LD_INT 30
69372: PUSH
69373: LD_INT 3
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PPUSH
69380: CALL_OW 72
69384: ST_TO_ADDR
// if not fac then
69385: LD_VAR 0 5
69389: NOT
69390: IFFALSE 69394
// continue ;
69392: GO 69336
// for j in fac do
69394: LD_ADDR_VAR 0 3
69398: PUSH
69399: LD_VAR 0 5
69403: PUSH
69404: FOR_IN
69405: IFFALSE 69760
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
69407: LD_VAR 0 3
69411: PPUSH
69412: CALL_OW 461
69416: PUSH
69417: LD_INT 2
69419: NONEQUAL
69420: PUSH
69421: LD_VAR 0 3
69425: PPUSH
69426: LD_INT 15
69428: PPUSH
69429: CALL 20775 0 2
69433: PUSH
69434: LD_INT 4
69436: ARRAY
69437: OR
69438: IFFALSE 69442
// continue ;
69440: GO 69404
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
69442: LD_VAR 0 3
69446: PPUSH
69447: LD_EXP 73
69451: PUSH
69452: LD_VAR 0 2
69456: ARRAY
69457: PUSH
69458: LD_INT 1
69460: ARRAY
69461: PUSH
69462: LD_INT 1
69464: ARRAY
69465: PPUSH
69466: LD_EXP 73
69470: PUSH
69471: LD_VAR 0 2
69475: ARRAY
69476: PUSH
69477: LD_INT 1
69479: ARRAY
69480: PUSH
69481: LD_INT 2
69483: ARRAY
69484: PPUSH
69485: LD_EXP 73
69489: PUSH
69490: LD_VAR 0 2
69494: ARRAY
69495: PUSH
69496: LD_INT 1
69498: ARRAY
69499: PUSH
69500: LD_INT 3
69502: ARRAY
69503: PPUSH
69504: LD_EXP 73
69508: PUSH
69509: LD_VAR 0 2
69513: ARRAY
69514: PUSH
69515: LD_INT 1
69517: ARRAY
69518: PUSH
69519: LD_INT 4
69521: ARRAY
69522: PPUSH
69523: CALL_OW 448
69527: PUSH
69528: LD_VAR 0 3
69532: PPUSH
69533: LD_EXP 73
69537: PUSH
69538: LD_VAR 0 2
69542: ARRAY
69543: PUSH
69544: LD_INT 1
69546: ARRAY
69547: PUSH
69548: LD_INT 1
69550: ARRAY
69551: PUSH
69552: LD_EXP 73
69556: PUSH
69557: LD_VAR 0 2
69561: ARRAY
69562: PUSH
69563: LD_INT 1
69565: ARRAY
69566: PUSH
69567: LD_INT 2
69569: ARRAY
69570: PUSH
69571: LD_EXP 73
69575: PUSH
69576: LD_VAR 0 2
69580: ARRAY
69581: PUSH
69582: LD_INT 1
69584: ARRAY
69585: PUSH
69586: LD_INT 3
69588: ARRAY
69589: PUSH
69590: LD_EXP 73
69594: PUSH
69595: LD_VAR 0 2
69599: ARRAY
69600: PUSH
69601: LD_INT 1
69603: ARRAY
69604: PUSH
69605: LD_INT 4
69607: ARRAY
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: LIST
69613: LIST
69614: PPUSH
69615: CALL 24446 0 2
69619: AND
69620: IFFALSE 69758
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
69622: LD_VAR 0 3
69626: PPUSH
69627: LD_EXP 73
69631: PUSH
69632: LD_VAR 0 2
69636: ARRAY
69637: PUSH
69638: LD_INT 1
69640: ARRAY
69641: PUSH
69642: LD_INT 1
69644: ARRAY
69645: PPUSH
69646: LD_EXP 73
69650: PUSH
69651: LD_VAR 0 2
69655: ARRAY
69656: PUSH
69657: LD_INT 1
69659: ARRAY
69660: PUSH
69661: LD_INT 2
69663: ARRAY
69664: PPUSH
69665: LD_EXP 73
69669: PUSH
69670: LD_VAR 0 2
69674: ARRAY
69675: PUSH
69676: LD_INT 1
69678: ARRAY
69679: PUSH
69680: LD_INT 3
69682: ARRAY
69683: PPUSH
69684: LD_EXP 73
69688: PUSH
69689: LD_VAR 0 2
69693: ARRAY
69694: PUSH
69695: LD_INT 1
69697: ARRAY
69698: PUSH
69699: LD_INT 4
69701: ARRAY
69702: PPUSH
69703: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
69707: LD_ADDR_VAR 0 4
69711: PUSH
69712: LD_EXP 73
69716: PUSH
69717: LD_VAR 0 2
69721: ARRAY
69722: PPUSH
69723: LD_INT 1
69725: PPUSH
69726: CALL_OW 3
69730: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
69731: LD_ADDR_EXP 73
69735: PUSH
69736: LD_EXP 73
69740: PPUSH
69741: LD_VAR 0 2
69745: PPUSH
69746: LD_VAR 0 4
69750: PPUSH
69751: CALL_OW 1
69755: ST_TO_ADDR
// break ;
69756: GO 69760
// end ; end ;
69758: GO 69404
69760: POP
69761: POP
// end ;
69762: GO 69336
69764: POP
69765: POP
// end ;
69766: LD_VAR 0 1
69770: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
69771: LD_INT 0
69773: PPUSH
69774: PPUSH
69775: PPUSH
// if not mc_bases then
69776: LD_EXP 52
69780: NOT
69781: IFFALSE 69785
// exit ;
69783: GO 69874
// for i = 1 to mc_bases do
69785: LD_ADDR_VAR 0 2
69789: PUSH
69790: DOUBLE
69791: LD_INT 1
69793: DEC
69794: ST_TO_ADDR
69795: LD_EXP 52
69799: PUSH
69800: FOR_TO
69801: IFFALSE 69872
// begin if mc_attack [ i ] then
69803: LD_EXP 72
69807: PUSH
69808: LD_VAR 0 2
69812: ARRAY
69813: IFFALSE 69870
// begin tmp := mc_attack [ i ] [ 1 ] ;
69815: LD_ADDR_VAR 0 3
69819: PUSH
69820: LD_EXP 72
69824: PUSH
69825: LD_VAR 0 2
69829: ARRAY
69830: PUSH
69831: LD_INT 1
69833: ARRAY
69834: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
69835: LD_ADDR_EXP 72
69839: PUSH
69840: LD_EXP 72
69844: PPUSH
69845: LD_VAR 0 2
69849: PPUSH
69850: EMPTY
69851: PPUSH
69852: CALL_OW 1
69856: ST_TO_ADDR
// Attack ( tmp ) ;
69857: LD_VAR 0 3
69861: PPUSH
69862: CALL 46659 0 1
// exit ;
69866: POP
69867: POP
69868: GO 69874
// end ; end ;
69870: GO 69800
69872: POP
69873: POP
// end ;
69874: LD_VAR 0 1
69878: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
69879: LD_INT 0
69881: PPUSH
69882: PPUSH
69883: PPUSH
69884: PPUSH
69885: PPUSH
69886: PPUSH
69887: PPUSH
// if not mc_bases then
69888: LD_EXP 52
69892: NOT
69893: IFFALSE 69897
// exit ;
69895: GO 70479
// for i = 1 to mc_bases do
69897: LD_ADDR_VAR 0 2
69901: PUSH
69902: DOUBLE
69903: LD_INT 1
69905: DEC
69906: ST_TO_ADDR
69907: LD_EXP 52
69911: PUSH
69912: FOR_TO
69913: IFFALSE 70477
// begin if not mc_bases [ i ] then
69915: LD_EXP 52
69919: PUSH
69920: LD_VAR 0 2
69924: ARRAY
69925: NOT
69926: IFFALSE 69930
// continue ;
69928: GO 69912
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
69930: LD_ADDR_VAR 0 7
69934: PUSH
69935: LD_EXP 52
69939: PUSH
69940: LD_VAR 0 2
69944: ARRAY
69945: PUSH
69946: LD_INT 1
69948: ARRAY
69949: PPUSH
69950: CALL 15018 0 1
69954: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
69955: LD_ADDR_EXP 75
69959: PUSH
69960: LD_EXP 75
69964: PPUSH
69965: LD_VAR 0 2
69969: PPUSH
69970: LD_EXP 52
69974: PUSH
69975: LD_VAR 0 2
69979: ARRAY
69980: PUSH
69981: LD_INT 1
69983: ARRAY
69984: PPUSH
69985: CALL_OW 255
69989: PPUSH
69990: LD_EXP 77
69994: PUSH
69995: LD_VAR 0 2
69999: ARRAY
70000: PPUSH
70001: CALL 12721 0 2
70005: PPUSH
70006: CALL_OW 1
70010: ST_TO_ADDR
// if not mc_scan [ i ] then
70011: LD_EXP 75
70015: PUSH
70016: LD_VAR 0 2
70020: ARRAY
70021: NOT
70022: IFFALSE 70177
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
70024: LD_ADDR_VAR 0 4
70028: PUSH
70029: LD_EXP 52
70033: PUSH
70034: LD_VAR 0 2
70038: ARRAY
70039: PPUSH
70040: LD_INT 2
70042: PUSH
70043: LD_INT 25
70045: PUSH
70046: LD_INT 5
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: LD_INT 25
70055: PUSH
70056: LD_INT 8
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: LD_INT 25
70065: PUSH
70066: LD_INT 9
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: PPUSH
70079: CALL_OW 72
70083: ST_TO_ADDR
// if not tmp then
70084: LD_VAR 0 4
70088: NOT
70089: IFFALSE 70093
// continue ;
70091: GO 69912
// for j in tmp do
70093: LD_ADDR_VAR 0 3
70097: PUSH
70098: LD_VAR 0 4
70102: PUSH
70103: FOR_IN
70104: IFFALSE 70175
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
70106: LD_VAR 0 3
70110: PPUSH
70111: CALL_OW 310
70115: PPUSH
70116: CALL_OW 266
70120: PUSH
70121: LD_INT 5
70123: EQUAL
70124: PUSH
70125: LD_VAR 0 3
70129: PPUSH
70130: CALL_OW 257
70134: PUSH
70135: LD_INT 1
70137: EQUAL
70138: AND
70139: PUSH
70140: LD_VAR 0 3
70144: PPUSH
70145: CALL_OW 459
70149: NOT
70150: AND
70151: PUSH
70152: LD_VAR 0 7
70156: AND
70157: IFFALSE 70173
// ComChangeProfession ( j , class ) ;
70159: LD_VAR 0 3
70163: PPUSH
70164: LD_VAR 0 7
70168: PPUSH
70169: CALL_OW 123
70173: GO 70103
70175: POP
70176: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
70177: LD_EXP 75
70181: PUSH
70182: LD_VAR 0 2
70186: ARRAY
70187: PUSH
70188: LD_EXP 74
70192: PUSH
70193: LD_VAR 0 2
70197: ARRAY
70198: NOT
70199: AND
70200: PUSH
70201: LD_EXP 52
70205: PUSH
70206: LD_VAR 0 2
70210: ARRAY
70211: PPUSH
70212: LD_INT 30
70214: PUSH
70215: LD_INT 32
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PPUSH
70222: CALL_OW 72
70226: NOT
70227: AND
70228: PUSH
70229: LD_EXP 52
70233: PUSH
70234: LD_VAR 0 2
70238: ARRAY
70239: PPUSH
70240: LD_INT 2
70242: PUSH
70243: LD_INT 30
70245: PUSH
70246: LD_INT 4
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: PUSH
70253: LD_INT 30
70255: PUSH
70256: LD_INT 5
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: LIST
70267: PPUSH
70268: CALL_OW 72
70272: NOT
70273: AND
70274: IFFALSE 70406
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
70276: LD_ADDR_VAR 0 4
70280: PUSH
70281: LD_EXP 52
70285: PUSH
70286: LD_VAR 0 2
70290: ARRAY
70291: PPUSH
70292: LD_INT 2
70294: PUSH
70295: LD_INT 25
70297: PUSH
70298: LD_INT 1
70300: PUSH
70301: EMPTY
70302: LIST
70303: LIST
70304: PUSH
70305: LD_INT 25
70307: PUSH
70308: LD_INT 5
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: PUSH
70315: LD_INT 25
70317: PUSH
70318: LD_INT 8
70320: PUSH
70321: EMPTY
70322: LIST
70323: LIST
70324: PUSH
70325: LD_INT 25
70327: PUSH
70328: LD_INT 9
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: LIST
70339: LIST
70340: LIST
70341: PPUSH
70342: CALL_OW 72
70346: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
70347: LD_ADDR_VAR 0 4
70351: PUSH
70352: LD_VAR 0 4
70356: PUSH
70357: LD_VAR 0 4
70361: PPUSH
70362: LD_INT 18
70364: PPUSH
70365: CALL 51442 0 2
70369: DIFF
70370: ST_TO_ADDR
// if tmp then
70371: LD_VAR 0 4
70375: IFFALSE 70406
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
70377: LD_VAR 0 2
70381: PPUSH
70382: LD_VAR 0 4
70386: PPUSH
70387: LD_EXP 77
70391: PUSH
70392: LD_VAR 0 2
70396: ARRAY
70397: PPUSH
70398: CALL 12756 0 3
// exit ;
70402: POP
70403: POP
70404: GO 70479
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
70406: LD_EXP 75
70410: PUSH
70411: LD_VAR 0 2
70415: ARRAY
70416: PUSH
70417: LD_EXP 74
70421: PUSH
70422: LD_VAR 0 2
70426: ARRAY
70427: AND
70428: IFFALSE 70475
// begin tmp := mc_defender [ i ] ;
70430: LD_ADDR_VAR 0 4
70434: PUSH
70435: LD_EXP 74
70439: PUSH
70440: LD_VAR 0 2
70444: ARRAY
70445: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
70446: LD_VAR 0 2
70450: PPUSH
70451: LD_VAR 0 4
70455: PPUSH
70456: LD_EXP 75
70460: PUSH
70461: LD_VAR 0 2
70465: ARRAY
70466: PPUSH
70467: CALL 13317 0 3
// exit ;
70471: POP
70472: POP
70473: GO 70479
// end ; end ;
70475: GO 69912
70477: POP
70478: POP
// end ;
70479: LD_VAR 0 1
70483: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
70484: LD_INT 0
70486: PPUSH
70487: PPUSH
70488: PPUSH
70489: PPUSH
70490: PPUSH
70491: PPUSH
70492: PPUSH
70493: PPUSH
70494: PPUSH
70495: PPUSH
70496: PPUSH
// if not mc_bases then
70497: LD_EXP 52
70501: NOT
70502: IFFALSE 70506
// exit ;
70504: GO 71593
// for i = 1 to mc_bases do
70506: LD_ADDR_VAR 0 2
70510: PUSH
70511: DOUBLE
70512: LD_INT 1
70514: DEC
70515: ST_TO_ADDR
70516: LD_EXP 52
70520: PUSH
70521: FOR_TO
70522: IFFALSE 71591
// begin tmp := mc_lab [ i ] ;
70524: LD_ADDR_VAR 0 6
70528: PUSH
70529: LD_EXP 85
70533: PUSH
70534: LD_VAR 0 2
70538: ARRAY
70539: ST_TO_ADDR
// if not tmp then
70540: LD_VAR 0 6
70544: NOT
70545: IFFALSE 70549
// continue ;
70547: GO 70521
// idle_lab := 0 ;
70549: LD_ADDR_VAR 0 11
70553: PUSH
70554: LD_INT 0
70556: ST_TO_ADDR
// for j in tmp do
70557: LD_ADDR_VAR 0 3
70561: PUSH
70562: LD_VAR 0 6
70566: PUSH
70567: FOR_IN
70568: IFFALSE 71587
// begin researching := false ;
70570: LD_ADDR_VAR 0 10
70574: PUSH
70575: LD_INT 0
70577: ST_TO_ADDR
// side := GetSide ( j ) ;
70578: LD_ADDR_VAR 0 4
70582: PUSH
70583: LD_VAR 0 3
70587: PPUSH
70588: CALL_OW 255
70592: ST_TO_ADDR
// if not mc_tech [ side ] then
70593: LD_EXP 79
70597: PUSH
70598: LD_VAR 0 4
70602: ARRAY
70603: NOT
70604: IFFALSE 70608
// continue ;
70606: GO 70567
// if BuildingStatus ( j ) = bs_idle then
70608: LD_VAR 0 3
70612: PPUSH
70613: CALL_OW 461
70617: PUSH
70618: LD_INT 2
70620: EQUAL
70621: IFFALSE 70809
// begin if idle_lab and UnitsInside ( j ) < 6 then
70623: LD_VAR 0 11
70627: PUSH
70628: LD_VAR 0 3
70632: PPUSH
70633: CALL_OW 313
70637: PUSH
70638: LD_INT 6
70640: LESS
70641: AND
70642: IFFALSE 70713
// begin tmp2 := UnitsInside ( idle_lab ) ;
70644: LD_ADDR_VAR 0 9
70648: PUSH
70649: LD_VAR 0 11
70653: PPUSH
70654: CALL_OW 313
70658: ST_TO_ADDR
// if tmp2 then
70659: LD_VAR 0 9
70663: IFFALSE 70705
// for x in tmp2 do
70665: LD_ADDR_VAR 0 7
70669: PUSH
70670: LD_VAR 0 9
70674: PUSH
70675: FOR_IN
70676: IFFALSE 70703
// begin ComExitBuilding ( x ) ;
70678: LD_VAR 0 7
70682: PPUSH
70683: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
70687: LD_VAR 0 7
70691: PPUSH
70692: LD_VAR 0 3
70696: PPUSH
70697: CALL_OW 180
// end ;
70701: GO 70675
70703: POP
70704: POP
// idle_lab := 0 ;
70705: LD_ADDR_VAR 0 11
70709: PUSH
70710: LD_INT 0
70712: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
70713: LD_ADDR_VAR 0 5
70717: PUSH
70718: LD_EXP 79
70722: PUSH
70723: LD_VAR 0 4
70727: ARRAY
70728: PUSH
70729: FOR_IN
70730: IFFALSE 70790
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
70732: LD_VAR 0 3
70736: PPUSH
70737: LD_VAR 0 5
70741: PPUSH
70742: CALL_OW 430
70746: PUSH
70747: LD_VAR 0 4
70751: PPUSH
70752: LD_VAR 0 5
70756: PPUSH
70757: CALL 11826 0 2
70761: AND
70762: IFFALSE 70788
// begin researching := true ;
70764: LD_ADDR_VAR 0 10
70768: PUSH
70769: LD_INT 1
70771: ST_TO_ADDR
// ComResearch ( j , t ) ;
70772: LD_VAR 0 3
70776: PPUSH
70777: LD_VAR 0 5
70781: PPUSH
70782: CALL_OW 124
// break ;
70786: GO 70790
// end ;
70788: GO 70729
70790: POP
70791: POP
// if not researching then
70792: LD_VAR 0 10
70796: NOT
70797: IFFALSE 70809
// idle_lab := j ;
70799: LD_ADDR_VAR 0 11
70803: PUSH
70804: LD_VAR 0 3
70808: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
70809: LD_VAR 0 3
70813: PPUSH
70814: CALL_OW 461
70818: PUSH
70819: LD_INT 10
70821: EQUAL
70822: IFFALSE 71410
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
70824: LD_EXP 81
70828: PUSH
70829: LD_VAR 0 2
70833: ARRAY
70834: NOT
70835: PUSH
70836: LD_EXP 82
70840: PUSH
70841: LD_VAR 0 2
70845: ARRAY
70846: NOT
70847: AND
70848: PUSH
70849: LD_EXP 79
70853: PUSH
70854: LD_VAR 0 4
70858: ARRAY
70859: PUSH
70860: LD_INT 1
70862: GREATER
70863: AND
70864: IFFALSE 70995
// begin ComCancel ( j ) ;
70866: LD_VAR 0 3
70870: PPUSH
70871: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
70875: LD_ADDR_EXP 79
70879: PUSH
70880: LD_EXP 79
70884: PPUSH
70885: LD_VAR 0 4
70889: PPUSH
70890: LD_EXP 79
70894: PUSH
70895: LD_VAR 0 4
70899: ARRAY
70900: PPUSH
70901: LD_EXP 79
70905: PUSH
70906: LD_VAR 0 4
70910: ARRAY
70911: PUSH
70912: LD_INT 1
70914: MINUS
70915: PPUSH
70916: LD_EXP 79
70920: PUSH
70921: LD_VAR 0 4
70925: ARRAY
70926: PPUSH
70927: LD_INT 0
70929: PPUSH
70930: CALL 17600 0 4
70934: PPUSH
70935: CALL_OW 1
70939: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
70940: LD_ADDR_EXP 79
70944: PUSH
70945: LD_EXP 79
70949: PPUSH
70950: LD_VAR 0 4
70954: PPUSH
70955: LD_EXP 79
70959: PUSH
70960: LD_VAR 0 4
70964: ARRAY
70965: PPUSH
70966: LD_EXP 79
70970: PUSH
70971: LD_VAR 0 4
70975: ARRAY
70976: PPUSH
70977: LD_INT 1
70979: PPUSH
70980: LD_INT 0
70982: PPUSH
70983: CALL 17600 0 4
70987: PPUSH
70988: CALL_OW 1
70992: ST_TO_ADDR
// continue ;
70993: GO 70567
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
70995: LD_EXP 81
70999: PUSH
71000: LD_VAR 0 2
71004: ARRAY
71005: PUSH
71006: LD_EXP 82
71010: PUSH
71011: LD_VAR 0 2
71015: ARRAY
71016: NOT
71017: AND
71018: IFFALSE 71145
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
71020: LD_ADDR_EXP 82
71024: PUSH
71025: LD_EXP 82
71029: PPUSH
71030: LD_VAR 0 2
71034: PUSH
71035: LD_EXP 82
71039: PUSH
71040: LD_VAR 0 2
71044: ARRAY
71045: PUSH
71046: LD_INT 1
71048: PLUS
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PPUSH
71054: LD_EXP 81
71058: PUSH
71059: LD_VAR 0 2
71063: ARRAY
71064: PUSH
71065: LD_INT 1
71067: ARRAY
71068: PPUSH
71069: CALL 18182 0 3
71073: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
71074: LD_EXP 81
71078: PUSH
71079: LD_VAR 0 2
71083: ARRAY
71084: PUSH
71085: LD_INT 1
71087: ARRAY
71088: PPUSH
71089: LD_INT 112
71091: PPUSH
71092: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
71096: LD_ADDR_VAR 0 9
71100: PUSH
71101: LD_EXP 81
71105: PUSH
71106: LD_VAR 0 2
71110: ARRAY
71111: PPUSH
71112: LD_INT 1
71114: PPUSH
71115: CALL_OW 3
71119: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
71120: LD_ADDR_EXP 81
71124: PUSH
71125: LD_EXP 81
71129: PPUSH
71130: LD_VAR 0 2
71134: PPUSH
71135: LD_VAR 0 9
71139: PPUSH
71140: CALL_OW 1
71144: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
71145: LD_EXP 81
71149: PUSH
71150: LD_VAR 0 2
71154: ARRAY
71155: PUSH
71156: LD_EXP 82
71160: PUSH
71161: LD_VAR 0 2
71165: ARRAY
71166: AND
71167: PUSH
71168: LD_EXP 82
71172: PUSH
71173: LD_VAR 0 2
71177: ARRAY
71178: PUSH
71179: LD_INT 1
71181: ARRAY
71182: PPUSH
71183: CALL_OW 310
71187: NOT
71188: AND
71189: PUSH
71190: LD_VAR 0 3
71194: PPUSH
71195: CALL_OW 313
71199: PUSH
71200: LD_INT 6
71202: EQUAL
71203: AND
71204: IFFALSE 71260
// begin tmp2 := UnitsInside ( j ) ;
71206: LD_ADDR_VAR 0 9
71210: PUSH
71211: LD_VAR 0 3
71215: PPUSH
71216: CALL_OW 313
71220: ST_TO_ADDR
// if tmp2 = 6 then
71221: LD_VAR 0 9
71225: PUSH
71226: LD_INT 6
71228: EQUAL
71229: IFFALSE 71260
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
71231: LD_VAR 0 9
71235: PUSH
71236: LD_INT 1
71238: ARRAY
71239: PPUSH
71240: LD_INT 112
71242: PPUSH
71243: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
71247: LD_VAR 0 9
71251: PUSH
71252: LD_INT 1
71254: ARRAY
71255: PPUSH
71256: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
71260: LD_EXP 82
71264: PUSH
71265: LD_VAR 0 2
71269: ARRAY
71270: PUSH
71271: LD_EXP 82
71275: PUSH
71276: LD_VAR 0 2
71280: ARRAY
71281: PUSH
71282: LD_INT 1
71284: ARRAY
71285: PPUSH
71286: CALL_OW 314
71290: NOT
71291: AND
71292: PUSH
71293: LD_EXP 82
71297: PUSH
71298: LD_VAR 0 2
71302: ARRAY
71303: PUSH
71304: LD_INT 1
71306: ARRAY
71307: PPUSH
71308: CALL_OW 310
71312: NOT
71313: AND
71314: IFFALSE 71340
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
71316: LD_EXP 82
71320: PUSH
71321: LD_VAR 0 2
71325: ARRAY
71326: PUSH
71327: LD_INT 1
71329: ARRAY
71330: PPUSH
71331: LD_VAR 0 3
71335: PPUSH
71336: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
71340: LD_EXP 82
71344: PUSH
71345: LD_VAR 0 2
71349: ARRAY
71350: PUSH
71351: LD_INT 1
71353: ARRAY
71354: PPUSH
71355: CALL_OW 310
71359: PUSH
71360: LD_EXP 82
71364: PUSH
71365: LD_VAR 0 2
71369: ARRAY
71370: PUSH
71371: LD_INT 1
71373: ARRAY
71374: PPUSH
71375: CALL_OW 310
71379: PPUSH
71380: CALL_OW 461
71384: PUSH
71385: LD_INT 3
71387: NONEQUAL
71388: AND
71389: IFFALSE 71410
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
71391: LD_EXP 82
71395: PUSH
71396: LD_VAR 0 2
71400: ARRAY
71401: PUSH
71402: LD_INT 1
71404: ARRAY
71405: PPUSH
71406: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
71410: LD_VAR 0 3
71414: PPUSH
71415: CALL_OW 461
71419: PUSH
71420: LD_INT 6
71422: EQUAL
71423: PUSH
71424: LD_VAR 0 6
71428: PUSH
71429: LD_INT 1
71431: GREATER
71432: AND
71433: IFFALSE 71585
// begin sci := [ ] ;
71435: LD_ADDR_VAR 0 8
71439: PUSH
71440: EMPTY
71441: ST_TO_ADDR
// for x in ( tmp diff j ) do
71442: LD_ADDR_VAR 0 7
71446: PUSH
71447: LD_VAR 0 6
71451: PUSH
71452: LD_VAR 0 3
71456: DIFF
71457: PUSH
71458: FOR_IN
71459: IFFALSE 71511
// begin if sci = 6 then
71461: LD_VAR 0 8
71465: PUSH
71466: LD_INT 6
71468: EQUAL
71469: IFFALSE 71473
// break ;
71471: GO 71511
// if BuildingStatus ( x ) = bs_idle then
71473: LD_VAR 0 7
71477: PPUSH
71478: CALL_OW 461
71482: PUSH
71483: LD_INT 2
71485: EQUAL
71486: IFFALSE 71509
// sci := sci ^ UnitsInside ( x ) ;
71488: LD_ADDR_VAR 0 8
71492: PUSH
71493: LD_VAR 0 8
71497: PUSH
71498: LD_VAR 0 7
71502: PPUSH
71503: CALL_OW 313
71507: ADD
71508: ST_TO_ADDR
// end ;
71509: GO 71458
71511: POP
71512: POP
// if not sci then
71513: LD_VAR 0 8
71517: NOT
71518: IFFALSE 71522
// continue ;
71520: GO 70567
// for x in sci do
71522: LD_ADDR_VAR 0 7
71526: PUSH
71527: LD_VAR 0 8
71531: PUSH
71532: FOR_IN
71533: IFFALSE 71583
// if IsInUnit ( x ) and not HasTask ( x ) then
71535: LD_VAR 0 7
71539: PPUSH
71540: CALL_OW 310
71544: PUSH
71545: LD_VAR 0 7
71549: PPUSH
71550: CALL_OW 314
71554: NOT
71555: AND
71556: IFFALSE 71581
// begin ComExitBuilding ( x ) ;
71558: LD_VAR 0 7
71562: PPUSH
71563: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
71567: LD_VAR 0 7
71571: PPUSH
71572: LD_VAR 0 3
71576: PPUSH
71577: CALL_OW 180
// end ;
71581: GO 71532
71583: POP
71584: POP
// end ; end ;
71585: GO 70567
71587: POP
71588: POP
// end ;
71589: GO 70521
71591: POP
71592: POP
// end ;
71593: LD_VAR 0 1
71597: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
71598: LD_INT 0
71600: PPUSH
71601: PPUSH
// if not mc_bases then
71602: LD_EXP 52
71606: NOT
71607: IFFALSE 71611
// exit ;
71609: GO 71692
// for i = 1 to mc_bases do
71611: LD_ADDR_VAR 0 2
71615: PUSH
71616: DOUBLE
71617: LD_INT 1
71619: DEC
71620: ST_TO_ADDR
71621: LD_EXP 52
71625: PUSH
71626: FOR_TO
71627: IFFALSE 71690
// if mc_mines [ i ] and mc_miners [ i ] then
71629: LD_EXP 65
71633: PUSH
71634: LD_VAR 0 2
71638: ARRAY
71639: PUSH
71640: LD_EXP 66
71644: PUSH
71645: LD_VAR 0 2
71649: ARRAY
71650: AND
71651: IFFALSE 71688
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
71653: LD_EXP 66
71657: PUSH
71658: LD_VAR 0 2
71662: ARRAY
71663: PUSH
71664: LD_INT 1
71666: ARRAY
71667: PPUSH
71668: CALL_OW 255
71672: PPUSH
71673: LD_EXP 65
71677: PUSH
71678: LD_VAR 0 2
71682: ARRAY
71683: PPUSH
71684: CALL 15171 0 2
71688: GO 71626
71690: POP
71691: POP
// end ;
71692: LD_VAR 0 1
71696: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
71697: LD_INT 0
71699: PPUSH
71700: PPUSH
71701: PPUSH
71702: PPUSH
71703: PPUSH
71704: PPUSH
71705: PPUSH
71706: PPUSH
// if not mc_bases or not mc_parking then
71707: LD_EXP 52
71711: NOT
71712: PUSH
71713: LD_EXP 76
71717: NOT
71718: OR
71719: IFFALSE 71723
// exit ;
71721: GO 72422
// for i = 1 to mc_bases do
71723: LD_ADDR_VAR 0 2
71727: PUSH
71728: DOUBLE
71729: LD_INT 1
71731: DEC
71732: ST_TO_ADDR
71733: LD_EXP 52
71737: PUSH
71738: FOR_TO
71739: IFFALSE 72420
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
71741: LD_EXP 52
71745: PUSH
71746: LD_VAR 0 2
71750: ARRAY
71751: NOT
71752: PUSH
71753: LD_EXP 76
71757: PUSH
71758: LD_VAR 0 2
71762: ARRAY
71763: NOT
71764: OR
71765: IFFALSE 71769
// continue ;
71767: GO 71738
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
71769: LD_ADDR_VAR 0 5
71773: PUSH
71774: LD_EXP 52
71778: PUSH
71779: LD_VAR 0 2
71783: ARRAY
71784: PUSH
71785: LD_INT 1
71787: ARRAY
71788: PPUSH
71789: CALL_OW 255
71793: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
71794: LD_ADDR_VAR 0 6
71798: PUSH
71799: LD_EXP 52
71803: PUSH
71804: LD_VAR 0 2
71808: ARRAY
71809: PPUSH
71810: LD_INT 30
71812: PUSH
71813: LD_INT 3
71815: PUSH
71816: EMPTY
71817: LIST
71818: LIST
71819: PPUSH
71820: CALL_OW 72
71824: ST_TO_ADDR
// if not fac then
71825: LD_VAR 0 6
71829: NOT
71830: IFFALSE 71881
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
71832: LD_ADDR_VAR 0 6
71836: PUSH
71837: LD_EXP 52
71841: PUSH
71842: LD_VAR 0 2
71846: ARRAY
71847: PPUSH
71848: LD_INT 2
71850: PUSH
71851: LD_INT 30
71853: PUSH
71854: LD_INT 0
71856: PUSH
71857: EMPTY
71858: LIST
71859: LIST
71860: PUSH
71861: LD_INT 30
71863: PUSH
71864: LD_INT 1
71866: PUSH
71867: EMPTY
71868: LIST
71869: LIST
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: LIST
71875: PPUSH
71876: CALL_OW 72
71880: ST_TO_ADDR
// if not fac then
71881: LD_VAR 0 6
71885: NOT
71886: IFFALSE 71890
// continue ;
71888: GO 71738
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
71890: LD_ADDR_VAR 0 7
71894: PUSH
71895: LD_EXP 76
71899: PUSH
71900: LD_VAR 0 2
71904: ARRAY
71905: PPUSH
71906: LD_INT 22
71908: PUSH
71909: LD_VAR 0 5
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: PUSH
71918: LD_INT 21
71920: PUSH
71921: LD_INT 2
71923: PUSH
71924: EMPTY
71925: LIST
71926: LIST
71927: PUSH
71928: LD_INT 3
71930: PUSH
71931: LD_INT 24
71933: PUSH
71934: LD_INT 1000
71936: PUSH
71937: EMPTY
71938: LIST
71939: LIST
71940: PUSH
71941: EMPTY
71942: LIST
71943: LIST
71944: PUSH
71945: EMPTY
71946: LIST
71947: LIST
71948: LIST
71949: PPUSH
71950: CALL_OW 70
71954: ST_TO_ADDR
// for j in fac do
71955: LD_ADDR_VAR 0 3
71959: PUSH
71960: LD_VAR 0 6
71964: PUSH
71965: FOR_IN
71966: IFFALSE 72047
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
71968: LD_ADDR_VAR 0 7
71972: PUSH
71973: LD_VAR 0 7
71977: PUSH
71978: LD_INT 22
71980: PUSH
71981: LD_VAR 0 5
71985: PUSH
71986: EMPTY
71987: LIST
71988: LIST
71989: PUSH
71990: LD_INT 91
71992: PUSH
71993: LD_VAR 0 3
71997: PUSH
71998: LD_INT 15
72000: PUSH
72001: EMPTY
72002: LIST
72003: LIST
72004: LIST
72005: PUSH
72006: LD_INT 21
72008: PUSH
72009: LD_INT 2
72011: PUSH
72012: EMPTY
72013: LIST
72014: LIST
72015: PUSH
72016: LD_INT 3
72018: PUSH
72019: LD_INT 24
72021: PUSH
72022: LD_INT 1000
72024: PUSH
72025: EMPTY
72026: LIST
72027: LIST
72028: PUSH
72029: EMPTY
72030: LIST
72031: LIST
72032: PUSH
72033: EMPTY
72034: LIST
72035: LIST
72036: LIST
72037: LIST
72038: PPUSH
72039: CALL_OW 69
72043: UNION
72044: ST_TO_ADDR
72045: GO 71965
72047: POP
72048: POP
// if not vehs then
72049: LD_VAR 0 7
72053: NOT
72054: IFFALSE 72080
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
72056: LD_ADDR_EXP 64
72060: PUSH
72061: LD_EXP 64
72065: PPUSH
72066: LD_VAR 0 2
72070: PPUSH
72071: EMPTY
72072: PPUSH
72073: CALL_OW 1
72077: ST_TO_ADDR
// continue ;
72078: GO 71738
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
72080: LD_ADDR_VAR 0 8
72084: PUSH
72085: LD_EXP 52
72089: PUSH
72090: LD_VAR 0 2
72094: ARRAY
72095: PPUSH
72096: LD_INT 30
72098: PUSH
72099: LD_INT 3
72101: PUSH
72102: EMPTY
72103: LIST
72104: LIST
72105: PPUSH
72106: CALL_OW 72
72110: ST_TO_ADDR
// if tmp then
72111: LD_VAR 0 8
72115: IFFALSE 72218
// begin for j in tmp do
72117: LD_ADDR_VAR 0 3
72121: PUSH
72122: LD_VAR 0 8
72126: PUSH
72127: FOR_IN
72128: IFFALSE 72216
// for k in UnitsInside ( j ) do
72130: LD_ADDR_VAR 0 4
72134: PUSH
72135: LD_VAR 0 3
72139: PPUSH
72140: CALL_OW 313
72144: PUSH
72145: FOR_IN
72146: IFFALSE 72212
// if k then
72148: LD_VAR 0 4
72152: IFFALSE 72210
// if not k in mc_repair_vehicle [ i ] then
72154: LD_VAR 0 4
72158: PUSH
72159: LD_EXP 64
72163: PUSH
72164: LD_VAR 0 2
72168: ARRAY
72169: IN
72170: NOT
72171: IFFALSE 72210
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
72173: LD_ADDR_EXP 64
72177: PUSH
72178: LD_EXP 64
72182: PPUSH
72183: LD_VAR 0 2
72187: PPUSH
72188: LD_EXP 64
72192: PUSH
72193: LD_VAR 0 2
72197: ARRAY
72198: PUSH
72199: LD_VAR 0 4
72203: UNION
72204: PPUSH
72205: CALL_OW 1
72209: ST_TO_ADDR
72210: GO 72145
72212: POP
72213: POP
72214: GO 72127
72216: POP
72217: POP
// end ; if not mc_repair_vehicle [ i ] then
72218: LD_EXP 64
72222: PUSH
72223: LD_VAR 0 2
72227: ARRAY
72228: NOT
72229: IFFALSE 72233
// continue ;
72231: GO 71738
// for j in mc_repair_vehicle [ i ] do
72233: LD_ADDR_VAR 0 3
72237: PUSH
72238: LD_EXP 64
72242: PUSH
72243: LD_VAR 0 2
72247: ARRAY
72248: PUSH
72249: FOR_IN
72250: IFFALSE 72416
// begin if GetClass ( j ) <> 3 then
72252: LD_VAR 0 3
72256: PPUSH
72257: CALL_OW 257
72261: PUSH
72262: LD_INT 3
72264: NONEQUAL
72265: IFFALSE 72306
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
72267: LD_ADDR_EXP 64
72271: PUSH
72272: LD_EXP 64
72276: PPUSH
72277: LD_VAR 0 2
72281: PPUSH
72282: LD_EXP 64
72286: PUSH
72287: LD_VAR 0 2
72291: ARRAY
72292: PUSH
72293: LD_VAR 0 3
72297: DIFF
72298: PPUSH
72299: CALL_OW 1
72303: ST_TO_ADDR
// continue ;
72304: GO 72249
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
72306: LD_VAR 0 3
72310: PPUSH
72311: CALL_OW 311
72315: NOT
72316: PUSH
72317: LD_VAR 0 3
72321: PUSH
72322: LD_EXP 55
72326: PUSH
72327: LD_VAR 0 2
72331: ARRAY
72332: PUSH
72333: LD_INT 1
72335: ARRAY
72336: IN
72337: NOT
72338: AND
72339: PUSH
72340: LD_VAR 0 3
72344: PUSH
72345: LD_EXP 55
72349: PUSH
72350: LD_VAR 0 2
72354: ARRAY
72355: PUSH
72356: LD_INT 2
72358: ARRAY
72359: IN
72360: NOT
72361: AND
72362: IFFALSE 72414
// begin if IsInUnit ( j ) then
72364: LD_VAR 0 3
72368: PPUSH
72369: CALL_OW 310
72373: IFFALSE 72384
// ComExitBuilding ( j ) ;
72375: LD_VAR 0 3
72379: PPUSH
72380: CALL_OW 122
// if not HasTask ( j ) then
72384: LD_VAR 0 3
72388: PPUSH
72389: CALL_OW 314
72393: NOT
72394: IFFALSE 72414
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
72396: LD_VAR 0 3
72400: PPUSH
72401: LD_VAR 0 7
72405: PUSH
72406: LD_INT 1
72408: ARRAY
72409: PPUSH
72410: CALL_OW 189
// end ; end ;
72414: GO 72249
72416: POP
72417: POP
// end ;
72418: GO 71738
72420: POP
72421: POP
// end ;
72422: LD_VAR 0 1
72426: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
72427: LD_INT 0
72429: PPUSH
72430: PPUSH
72431: PPUSH
72432: PPUSH
72433: PPUSH
72434: PPUSH
72435: PPUSH
72436: PPUSH
72437: PPUSH
72438: PPUSH
72439: PPUSH
// if not mc_bases then
72440: LD_EXP 52
72444: NOT
72445: IFFALSE 72449
// exit ;
72447: GO 73251
// for i = 1 to mc_bases do
72449: LD_ADDR_VAR 0 2
72453: PUSH
72454: DOUBLE
72455: LD_INT 1
72457: DEC
72458: ST_TO_ADDR
72459: LD_EXP 52
72463: PUSH
72464: FOR_TO
72465: IFFALSE 73249
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
72467: LD_EXP 80
72471: PUSH
72472: LD_VAR 0 2
72476: ARRAY
72477: NOT
72478: PUSH
72479: LD_EXP 55
72483: PUSH
72484: LD_VAR 0 2
72488: ARRAY
72489: PUSH
72490: LD_INT 1
72492: ARRAY
72493: OR
72494: PUSH
72495: LD_EXP 55
72499: PUSH
72500: LD_VAR 0 2
72504: ARRAY
72505: PUSH
72506: LD_INT 2
72508: ARRAY
72509: OR
72510: PUSH
72511: LD_EXP 78
72515: PUSH
72516: LD_VAR 0 2
72520: ARRAY
72521: PPUSH
72522: LD_INT 1
72524: PPUSH
72525: CALL_OW 325
72529: NOT
72530: OR
72531: PUSH
72532: LD_EXP 75
72536: PUSH
72537: LD_VAR 0 2
72541: ARRAY
72542: OR
72543: IFFALSE 72547
// continue ;
72545: GO 72464
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
72547: LD_ADDR_VAR 0 8
72551: PUSH
72552: LD_EXP 52
72556: PUSH
72557: LD_VAR 0 2
72561: ARRAY
72562: PPUSH
72563: LD_INT 25
72565: PUSH
72566: LD_INT 4
72568: PUSH
72569: EMPTY
72570: LIST
72571: LIST
72572: PUSH
72573: LD_INT 50
72575: PUSH
72576: EMPTY
72577: LIST
72578: PUSH
72579: LD_INT 3
72581: PUSH
72582: LD_INT 60
72584: PUSH
72585: EMPTY
72586: LIST
72587: PUSH
72588: EMPTY
72589: LIST
72590: LIST
72591: PUSH
72592: EMPTY
72593: LIST
72594: LIST
72595: LIST
72596: PPUSH
72597: CALL_OW 72
72601: PUSH
72602: LD_EXP 56
72606: PUSH
72607: LD_VAR 0 2
72611: ARRAY
72612: DIFF
72613: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72614: LD_ADDR_VAR 0 9
72618: PUSH
72619: LD_EXP 52
72623: PUSH
72624: LD_VAR 0 2
72628: ARRAY
72629: PPUSH
72630: LD_INT 2
72632: PUSH
72633: LD_INT 30
72635: PUSH
72636: LD_INT 0
72638: PUSH
72639: EMPTY
72640: LIST
72641: LIST
72642: PUSH
72643: LD_INT 30
72645: PUSH
72646: LD_INT 1
72648: PUSH
72649: EMPTY
72650: LIST
72651: LIST
72652: PUSH
72653: EMPTY
72654: LIST
72655: LIST
72656: LIST
72657: PPUSH
72658: CALL_OW 72
72662: ST_TO_ADDR
// if not tmp or not dep then
72663: LD_VAR 0 8
72667: NOT
72668: PUSH
72669: LD_VAR 0 9
72673: NOT
72674: OR
72675: IFFALSE 72679
// continue ;
72677: GO 72464
// side := GetSide ( tmp [ 1 ] ) ;
72679: LD_ADDR_VAR 0 11
72683: PUSH
72684: LD_VAR 0 8
72688: PUSH
72689: LD_INT 1
72691: ARRAY
72692: PPUSH
72693: CALL_OW 255
72697: ST_TO_ADDR
// dep := dep [ 1 ] ;
72698: LD_ADDR_VAR 0 9
72702: PUSH
72703: LD_VAR 0 9
72707: PUSH
72708: LD_INT 1
72710: ARRAY
72711: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
72712: LD_ADDR_VAR 0 7
72716: PUSH
72717: LD_EXP 80
72721: PUSH
72722: LD_VAR 0 2
72726: ARRAY
72727: PPUSH
72728: LD_INT 22
72730: PUSH
72731: LD_INT 0
72733: PUSH
72734: EMPTY
72735: LIST
72736: LIST
72737: PUSH
72738: LD_INT 25
72740: PUSH
72741: LD_INT 12
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: PUSH
72748: EMPTY
72749: LIST
72750: LIST
72751: PPUSH
72752: CALL_OW 70
72756: PUSH
72757: LD_INT 22
72759: PUSH
72760: LD_INT 0
72762: PUSH
72763: EMPTY
72764: LIST
72765: LIST
72766: PUSH
72767: LD_INT 25
72769: PUSH
72770: LD_INT 12
72772: PUSH
72773: EMPTY
72774: LIST
72775: LIST
72776: PUSH
72777: LD_INT 91
72779: PUSH
72780: LD_VAR 0 9
72784: PUSH
72785: LD_INT 20
72787: PUSH
72788: EMPTY
72789: LIST
72790: LIST
72791: LIST
72792: PUSH
72793: EMPTY
72794: LIST
72795: LIST
72796: LIST
72797: PPUSH
72798: CALL_OW 69
72802: UNION
72803: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
72804: LD_ADDR_VAR 0 10
72808: PUSH
72809: LD_EXP 80
72813: PUSH
72814: LD_VAR 0 2
72818: ARRAY
72819: PPUSH
72820: LD_INT 81
72822: PUSH
72823: LD_VAR 0 11
72827: PUSH
72828: EMPTY
72829: LIST
72830: LIST
72831: PPUSH
72832: CALL_OW 70
72836: ST_TO_ADDR
// if not apes or danger_at_area then
72837: LD_VAR 0 7
72841: NOT
72842: PUSH
72843: LD_VAR 0 10
72847: OR
72848: IFFALSE 72898
// begin if mc_taming [ i ] then
72850: LD_EXP 83
72854: PUSH
72855: LD_VAR 0 2
72859: ARRAY
72860: IFFALSE 72896
// begin MC_Reset ( i , 121 ) ;
72862: LD_VAR 0 2
72866: PPUSH
72867: LD_INT 121
72869: PPUSH
72870: CALL 58229 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
72874: LD_ADDR_EXP 83
72878: PUSH
72879: LD_EXP 83
72883: PPUSH
72884: LD_VAR 0 2
72888: PPUSH
72889: EMPTY
72890: PPUSH
72891: CALL_OW 1
72895: ST_TO_ADDR
// end ; continue ;
72896: GO 72464
// end ; for j in tmp do
72898: LD_ADDR_VAR 0 3
72902: PUSH
72903: LD_VAR 0 8
72907: PUSH
72908: FOR_IN
72909: IFFALSE 73245
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
72911: LD_VAR 0 3
72915: PUSH
72916: LD_EXP 83
72920: PUSH
72921: LD_VAR 0 2
72925: ARRAY
72926: IN
72927: NOT
72928: PUSH
72929: LD_EXP 83
72933: PUSH
72934: LD_VAR 0 2
72938: ARRAY
72939: PUSH
72940: LD_INT 3
72942: LESS
72943: AND
72944: IFFALSE 73002
// begin SetTag ( j , 121 ) ;
72946: LD_VAR 0 3
72950: PPUSH
72951: LD_INT 121
72953: PPUSH
72954: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
72958: LD_ADDR_EXP 83
72962: PUSH
72963: LD_EXP 83
72967: PPUSH
72968: LD_VAR 0 2
72972: PUSH
72973: LD_EXP 83
72977: PUSH
72978: LD_VAR 0 2
72982: ARRAY
72983: PUSH
72984: LD_INT 1
72986: PLUS
72987: PUSH
72988: EMPTY
72989: LIST
72990: LIST
72991: PPUSH
72992: LD_VAR 0 3
72996: PPUSH
72997: CALL 18182 0 3
73001: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
73002: LD_VAR 0 3
73006: PUSH
73007: LD_EXP 83
73011: PUSH
73012: LD_VAR 0 2
73016: ARRAY
73017: IN
73018: IFFALSE 73243
// begin if GetClass ( j ) <> 4 then
73020: LD_VAR 0 3
73024: PPUSH
73025: CALL_OW 257
73029: PUSH
73030: LD_INT 4
73032: NONEQUAL
73033: IFFALSE 73086
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
73035: LD_ADDR_EXP 83
73039: PUSH
73040: LD_EXP 83
73044: PPUSH
73045: LD_VAR 0 2
73049: PPUSH
73050: LD_EXP 83
73054: PUSH
73055: LD_VAR 0 2
73059: ARRAY
73060: PUSH
73061: LD_VAR 0 3
73065: DIFF
73066: PPUSH
73067: CALL_OW 1
73071: ST_TO_ADDR
// SetTag ( j , 0 ) ;
73072: LD_VAR 0 3
73076: PPUSH
73077: LD_INT 0
73079: PPUSH
73080: CALL_OW 109
// continue ;
73084: GO 72908
// end ; if IsInUnit ( j ) then
73086: LD_VAR 0 3
73090: PPUSH
73091: CALL_OW 310
73095: IFFALSE 73106
// ComExitBuilding ( j ) ;
73097: LD_VAR 0 3
73101: PPUSH
73102: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
73106: LD_ADDR_VAR 0 6
73110: PUSH
73111: LD_VAR 0 7
73115: PPUSH
73116: LD_VAR 0 3
73120: PPUSH
73121: CALL_OW 74
73125: ST_TO_ADDR
// if not ape then
73126: LD_VAR 0 6
73130: NOT
73131: IFFALSE 73135
// break ;
73133: GO 73245
// x := GetX ( ape ) ;
73135: LD_ADDR_VAR 0 4
73139: PUSH
73140: LD_VAR 0 6
73144: PPUSH
73145: CALL_OW 250
73149: ST_TO_ADDR
// y := GetY ( ape ) ;
73150: LD_ADDR_VAR 0 5
73154: PUSH
73155: LD_VAR 0 6
73159: PPUSH
73160: CALL_OW 251
73164: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
73165: LD_VAR 0 4
73169: PPUSH
73170: LD_VAR 0 5
73174: PPUSH
73175: CALL_OW 488
73179: NOT
73180: PUSH
73181: LD_VAR 0 11
73185: PPUSH
73186: LD_VAR 0 4
73190: PPUSH
73191: LD_VAR 0 5
73195: PPUSH
73196: LD_INT 20
73198: PPUSH
73199: CALL 19078 0 4
73203: PUSH
73204: LD_INT 4
73206: ARRAY
73207: OR
73208: IFFALSE 73212
// break ;
73210: GO 73245
// if not HasTask ( j ) then
73212: LD_VAR 0 3
73216: PPUSH
73217: CALL_OW 314
73221: NOT
73222: IFFALSE 73243
// ComTameXY ( j , x , y ) ;
73224: LD_VAR 0 3
73228: PPUSH
73229: LD_VAR 0 4
73233: PPUSH
73234: LD_VAR 0 5
73238: PPUSH
73239: CALL_OW 131
// end ; end ;
73243: GO 72908
73245: POP
73246: POP
// end ;
73247: GO 72464
73249: POP
73250: POP
// end ;
73251: LD_VAR 0 1
73255: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
73256: LD_INT 0
73258: PPUSH
73259: PPUSH
73260: PPUSH
73261: PPUSH
73262: PPUSH
73263: PPUSH
73264: PPUSH
73265: PPUSH
// if not mc_bases then
73266: LD_EXP 52
73270: NOT
73271: IFFALSE 73275
// exit ;
73273: GO 73901
// for i = 1 to mc_bases do
73275: LD_ADDR_VAR 0 2
73279: PUSH
73280: DOUBLE
73281: LD_INT 1
73283: DEC
73284: ST_TO_ADDR
73285: LD_EXP 52
73289: PUSH
73290: FOR_TO
73291: IFFALSE 73899
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
73293: LD_EXP 81
73297: PUSH
73298: LD_VAR 0 2
73302: ARRAY
73303: NOT
73304: PUSH
73305: LD_EXP 81
73309: PUSH
73310: LD_VAR 0 2
73314: ARRAY
73315: PPUSH
73316: LD_INT 25
73318: PUSH
73319: LD_INT 12
73321: PUSH
73322: EMPTY
73323: LIST
73324: LIST
73325: PPUSH
73326: CALL_OW 72
73330: NOT
73331: OR
73332: IFFALSE 73336
// continue ;
73334: GO 73290
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
73336: LD_ADDR_VAR 0 5
73340: PUSH
73341: LD_EXP 81
73345: PUSH
73346: LD_VAR 0 2
73350: ARRAY
73351: PUSH
73352: LD_INT 1
73354: ARRAY
73355: PPUSH
73356: CALL_OW 255
73360: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
73361: LD_VAR 0 5
73365: PPUSH
73366: LD_INT 2
73368: PPUSH
73369: CALL_OW 325
73373: IFFALSE 73626
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
73375: LD_ADDR_VAR 0 4
73379: PUSH
73380: LD_EXP 81
73384: PUSH
73385: LD_VAR 0 2
73389: ARRAY
73390: PPUSH
73391: LD_INT 25
73393: PUSH
73394: LD_INT 16
73396: PUSH
73397: EMPTY
73398: LIST
73399: LIST
73400: PPUSH
73401: CALL_OW 72
73405: ST_TO_ADDR
// if tmp < 6 then
73406: LD_VAR 0 4
73410: PUSH
73411: LD_INT 6
73413: LESS
73414: IFFALSE 73626
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
73416: LD_ADDR_VAR 0 6
73420: PUSH
73421: LD_EXP 52
73425: PUSH
73426: LD_VAR 0 2
73430: ARRAY
73431: PPUSH
73432: LD_INT 2
73434: PUSH
73435: LD_INT 30
73437: PUSH
73438: LD_INT 0
73440: PUSH
73441: EMPTY
73442: LIST
73443: LIST
73444: PUSH
73445: LD_INT 30
73447: PUSH
73448: LD_INT 1
73450: PUSH
73451: EMPTY
73452: LIST
73453: LIST
73454: PUSH
73455: EMPTY
73456: LIST
73457: LIST
73458: LIST
73459: PPUSH
73460: CALL_OW 72
73464: ST_TO_ADDR
// if depot then
73465: LD_VAR 0 6
73469: IFFALSE 73626
// begin selected := 0 ;
73471: LD_ADDR_VAR 0 7
73475: PUSH
73476: LD_INT 0
73478: ST_TO_ADDR
// for j in depot do
73479: LD_ADDR_VAR 0 3
73483: PUSH
73484: LD_VAR 0 6
73488: PUSH
73489: FOR_IN
73490: IFFALSE 73521
// begin if UnitsInside ( j ) < 6 then
73492: LD_VAR 0 3
73496: PPUSH
73497: CALL_OW 313
73501: PUSH
73502: LD_INT 6
73504: LESS
73505: IFFALSE 73519
// begin selected := j ;
73507: LD_ADDR_VAR 0 7
73511: PUSH
73512: LD_VAR 0 3
73516: ST_TO_ADDR
// break ;
73517: GO 73521
// end ; end ;
73519: GO 73489
73521: POP
73522: POP
// if selected then
73523: LD_VAR 0 7
73527: IFFALSE 73626
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
73529: LD_ADDR_VAR 0 3
73533: PUSH
73534: LD_EXP 81
73538: PUSH
73539: LD_VAR 0 2
73543: ARRAY
73544: PPUSH
73545: LD_INT 25
73547: PUSH
73548: LD_INT 12
73550: PUSH
73551: EMPTY
73552: LIST
73553: LIST
73554: PPUSH
73555: CALL_OW 72
73559: PUSH
73560: FOR_IN
73561: IFFALSE 73624
// if not HasTask ( j ) then
73563: LD_VAR 0 3
73567: PPUSH
73568: CALL_OW 314
73572: NOT
73573: IFFALSE 73622
// begin if not IsInUnit ( j ) then
73575: LD_VAR 0 3
73579: PPUSH
73580: CALL_OW 310
73584: NOT
73585: IFFALSE 73601
// ComEnterUnit ( j , selected ) ;
73587: LD_VAR 0 3
73591: PPUSH
73592: LD_VAR 0 7
73596: PPUSH
73597: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
73601: LD_VAR 0 3
73605: PPUSH
73606: LD_INT 16
73608: PPUSH
73609: CALL_OW 183
// AddComExitBuilding ( j ) ;
73613: LD_VAR 0 3
73617: PPUSH
73618: CALL_OW 182
// end ;
73622: GO 73560
73624: POP
73625: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
73626: LD_VAR 0 5
73630: PPUSH
73631: LD_INT 11
73633: PPUSH
73634: CALL_OW 325
73638: IFFALSE 73897
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
73640: LD_ADDR_VAR 0 4
73644: PUSH
73645: LD_EXP 81
73649: PUSH
73650: LD_VAR 0 2
73654: ARRAY
73655: PPUSH
73656: LD_INT 25
73658: PUSH
73659: LD_INT 16
73661: PUSH
73662: EMPTY
73663: LIST
73664: LIST
73665: PPUSH
73666: CALL_OW 72
73670: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
73671: LD_VAR 0 4
73675: PUSH
73676: LD_INT 6
73678: GREATEREQUAL
73679: PUSH
73680: LD_VAR 0 5
73684: PPUSH
73685: LD_INT 2
73687: PPUSH
73688: CALL_OW 325
73692: NOT
73693: OR
73694: IFFALSE 73897
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
73696: LD_ADDR_VAR 0 8
73700: PUSH
73701: LD_EXP 52
73705: PUSH
73706: LD_VAR 0 2
73710: ARRAY
73711: PPUSH
73712: LD_INT 2
73714: PUSH
73715: LD_INT 30
73717: PUSH
73718: LD_INT 4
73720: PUSH
73721: EMPTY
73722: LIST
73723: LIST
73724: PUSH
73725: LD_INT 30
73727: PUSH
73728: LD_INT 5
73730: PUSH
73731: EMPTY
73732: LIST
73733: LIST
73734: PUSH
73735: EMPTY
73736: LIST
73737: LIST
73738: LIST
73739: PPUSH
73740: CALL_OW 72
73744: ST_TO_ADDR
// if barracks then
73745: LD_VAR 0 8
73749: IFFALSE 73897
// begin selected := 0 ;
73751: LD_ADDR_VAR 0 7
73755: PUSH
73756: LD_INT 0
73758: ST_TO_ADDR
// for j in barracks do
73759: LD_ADDR_VAR 0 3
73763: PUSH
73764: LD_VAR 0 8
73768: PUSH
73769: FOR_IN
73770: IFFALSE 73801
// begin if UnitsInside ( j ) < 6 then
73772: LD_VAR 0 3
73776: PPUSH
73777: CALL_OW 313
73781: PUSH
73782: LD_INT 6
73784: LESS
73785: IFFALSE 73799
// begin selected := j ;
73787: LD_ADDR_VAR 0 7
73791: PUSH
73792: LD_VAR 0 3
73796: ST_TO_ADDR
// break ;
73797: GO 73801
// end ; end ;
73799: GO 73769
73801: POP
73802: POP
// if selected then
73803: LD_VAR 0 7
73807: IFFALSE 73897
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
73809: LD_ADDR_VAR 0 3
73813: PUSH
73814: LD_EXP 81
73818: PUSH
73819: LD_VAR 0 2
73823: ARRAY
73824: PPUSH
73825: LD_INT 25
73827: PUSH
73828: LD_INT 12
73830: PUSH
73831: EMPTY
73832: LIST
73833: LIST
73834: PPUSH
73835: CALL_OW 72
73839: PUSH
73840: FOR_IN
73841: IFFALSE 73895
// if not IsInUnit ( j ) and not HasTask ( j ) then
73843: LD_VAR 0 3
73847: PPUSH
73848: CALL_OW 310
73852: NOT
73853: PUSH
73854: LD_VAR 0 3
73858: PPUSH
73859: CALL_OW 314
73863: NOT
73864: AND
73865: IFFALSE 73893
// begin ComEnterUnit ( j , selected ) ;
73867: LD_VAR 0 3
73871: PPUSH
73872: LD_VAR 0 7
73876: PPUSH
73877: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
73881: LD_VAR 0 3
73885: PPUSH
73886: LD_INT 15
73888: PPUSH
73889: CALL_OW 183
// end ;
73893: GO 73840
73895: POP
73896: POP
// end ; end ; end ; end ; end ;
73897: GO 73290
73899: POP
73900: POP
// end ;
73901: LD_VAR 0 1
73905: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
73906: LD_INT 0
73908: PPUSH
73909: PPUSH
73910: PPUSH
73911: PPUSH
// if not mc_bases then
73912: LD_EXP 52
73916: NOT
73917: IFFALSE 73921
// exit ;
73919: GO 74099
// for i = 1 to mc_bases do
73921: LD_ADDR_VAR 0 2
73925: PUSH
73926: DOUBLE
73927: LD_INT 1
73929: DEC
73930: ST_TO_ADDR
73931: LD_EXP 52
73935: PUSH
73936: FOR_TO
73937: IFFALSE 74097
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
73939: LD_ADDR_VAR 0 4
73943: PUSH
73944: LD_EXP 52
73948: PUSH
73949: LD_VAR 0 2
73953: ARRAY
73954: PPUSH
73955: LD_INT 25
73957: PUSH
73958: LD_INT 9
73960: PUSH
73961: EMPTY
73962: LIST
73963: LIST
73964: PPUSH
73965: CALL_OW 72
73969: ST_TO_ADDR
// if not tmp then
73970: LD_VAR 0 4
73974: NOT
73975: IFFALSE 73979
// continue ;
73977: GO 73936
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
73979: LD_EXP 78
73983: PUSH
73984: LD_VAR 0 2
73988: ARRAY
73989: PPUSH
73990: LD_INT 29
73992: PPUSH
73993: CALL_OW 325
73997: NOT
73998: PUSH
73999: LD_EXP 78
74003: PUSH
74004: LD_VAR 0 2
74008: ARRAY
74009: PPUSH
74010: LD_INT 28
74012: PPUSH
74013: CALL_OW 325
74017: NOT
74018: AND
74019: IFFALSE 74023
// continue ;
74021: GO 73936
// for j in tmp do
74023: LD_ADDR_VAR 0 3
74027: PUSH
74028: LD_VAR 0 4
74032: PUSH
74033: FOR_IN
74034: IFFALSE 74093
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
74036: LD_VAR 0 3
74040: PUSH
74041: LD_EXP 55
74045: PUSH
74046: LD_VAR 0 2
74050: ARRAY
74051: PUSH
74052: LD_INT 1
74054: ARRAY
74055: IN
74056: NOT
74057: PUSH
74058: LD_VAR 0 3
74062: PUSH
74063: LD_EXP 55
74067: PUSH
74068: LD_VAR 0 2
74072: ARRAY
74073: PUSH
74074: LD_INT 2
74076: ARRAY
74077: IN
74078: NOT
74079: AND
74080: IFFALSE 74091
// ComSpaceTimeShoot ( j ) ;
74082: LD_VAR 0 3
74086: PPUSH
74087: CALL 11917 0 1
74091: GO 74033
74093: POP
74094: POP
// end ;
74095: GO 73936
74097: POP
74098: POP
// end ;
74099: LD_VAR 0 1
74103: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
74104: LD_INT 0
74106: PPUSH
74107: PPUSH
74108: PPUSH
74109: PPUSH
74110: PPUSH
74111: PPUSH
74112: PPUSH
74113: PPUSH
74114: PPUSH
// if not mc_bases then
74115: LD_EXP 52
74119: NOT
74120: IFFALSE 74124
// exit ;
74122: GO 74746
// for i = 1 to mc_bases do
74124: LD_ADDR_VAR 0 2
74128: PUSH
74129: DOUBLE
74130: LD_INT 1
74132: DEC
74133: ST_TO_ADDR
74134: LD_EXP 52
74138: PUSH
74139: FOR_TO
74140: IFFALSE 74744
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
74142: LD_EXP 87
74146: PUSH
74147: LD_VAR 0 2
74151: ARRAY
74152: NOT
74153: PUSH
74154: LD_INT 38
74156: PPUSH
74157: LD_EXP 78
74161: PUSH
74162: LD_VAR 0 2
74166: ARRAY
74167: PPUSH
74168: CALL_OW 321
74172: PUSH
74173: LD_INT 2
74175: NONEQUAL
74176: OR
74177: IFFALSE 74181
// continue ;
74179: GO 74139
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
74181: LD_ADDR_VAR 0 8
74185: PUSH
74186: LD_EXP 52
74190: PUSH
74191: LD_VAR 0 2
74195: ARRAY
74196: PPUSH
74197: LD_INT 30
74199: PUSH
74200: LD_INT 34
74202: PUSH
74203: EMPTY
74204: LIST
74205: LIST
74206: PPUSH
74207: CALL_OW 72
74211: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
74212: LD_ADDR_VAR 0 9
74216: PUSH
74217: LD_EXP 52
74221: PUSH
74222: LD_VAR 0 2
74226: ARRAY
74227: PPUSH
74228: LD_INT 25
74230: PUSH
74231: LD_INT 4
74233: PUSH
74234: EMPTY
74235: LIST
74236: LIST
74237: PPUSH
74238: CALL_OW 72
74242: PPUSH
74243: LD_INT 0
74245: PPUSH
74246: CALL 51442 0 2
74250: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
74251: LD_VAR 0 9
74255: NOT
74256: PUSH
74257: LD_VAR 0 8
74261: NOT
74262: OR
74263: PUSH
74264: LD_EXP 52
74268: PUSH
74269: LD_VAR 0 2
74273: ARRAY
74274: PPUSH
74275: LD_INT 124
74277: PPUSH
74278: CALL 51442 0 2
74282: OR
74283: IFFALSE 74287
// continue ;
74285: GO 74139
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
74287: LD_EXP 88
74291: PUSH
74292: LD_VAR 0 2
74296: ARRAY
74297: PUSH
74298: LD_EXP 87
74302: PUSH
74303: LD_VAR 0 2
74307: ARRAY
74308: LESS
74309: PUSH
74310: LD_EXP 88
74314: PUSH
74315: LD_VAR 0 2
74319: ARRAY
74320: PUSH
74321: LD_VAR 0 8
74325: LESS
74326: AND
74327: IFFALSE 74742
// begin tmp := sci [ 1 ] ;
74329: LD_ADDR_VAR 0 7
74333: PUSH
74334: LD_VAR 0 9
74338: PUSH
74339: LD_INT 1
74341: ARRAY
74342: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
74343: LD_VAR 0 7
74347: PPUSH
74348: LD_INT 124
74350: PPUSH
74351: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
74355: LD_ADDR_VAR 0 3
74359: PUSH
74360: DOUBLE
74361: LD_EXP 87
74365: PUSH
74366: LD_VAR 0 2
74370: ARRAY
74371: INC
74372: ST_TO_ADDR
74373: LD_EXP 87
74377: PUSH
74378: LD_VAR 0 2
74382: ARRAY
74383: PUSH
74384: FOR_DOWNTO
74385: IFFALSE 74728
// begin if IsInUnit ( tmp ) then
74387: LD_VAR 0 7
74391: PPUSH
74392: CALL_OW 310
74396: IFFALSE 74407
// ComExitBuilding ( tmp ) ;
74398: LD_VAR 0 7
74402: PPUSH
74403: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
74407: LD_INT 35
74409: PPUSH
74410: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
74414: LD_VAR 0 7
74418: PPUSH
74419: CALL_OW 310
74423: NOT
74424: PUSH
74425: LD_VAR 0 7
74429: PPUSH
74430: CALL_OW 314
74434: NOT
74435: AND
74436: IFFALSE 74407
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
74438: LD_ADDR_VAR 0 6
74442: PUSH
74443: LD_VAR 0 7
74447: PPUSH
74448: CALL_OW 250
74452: PUSH
74453: LD_VAR 0 7
74457: PPUSH
74458: CALL_OW 251
74462: PUSH
74463: EMPTY
74464: LIST
74465: LIST
74466: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
74467: LD_INT 35
74469: PPUSH
74470: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
74474: LD_ADDR_VAR 0 4
74478: PUSH
74479: LD_EXP 87
74483: PUSH
74484: LD_VAR 0 2
74488: ARRAY
74489: PUSH
74490: LD_VAR 0 3
74494: ARRAY
74495: PUSH
74496: LD_INT 1
74498: ARRAY
74499: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
74500: LD_ADDR_VAR 0 5
74504: PUSH
74505: LD_EXP 87
74509: PUSH
74510: LD_VAR 0 2
74514: ARRAY
74515: PUSH
74516: LD_VAR 0 3
74520: ARRAY
74521: PUSH
74522: LD_INT 2
74524: ARRAY
74525: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
74526: LD_VAR 0 7
74530: PPUSH
74531: LD_INT 10
74533: PPUSH
74534: CALL 20775 0 2
74538: PUSH
74539: LD_INT 4
74541: ARRAY
74542: IFFALSE 74580
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
74544: LD_VAR 0 7
74548: PPUSH
74549: LD_VAR 0 6
74553: PUSH
74554: LD_INT 1
74556: ARRAY
74557: PPUSH
74558: LD_VAR 0 6
74562: PUSH
74563: LD_INT 2
74565: ARRAY
74566: PPUSH
74567: CALL_OW 111
// wait ( 0 0$10 ) ;
74571: LD_INT 350
74573: PPUSH
74574: CALL_OW 67
// end else
74578: GO 74606
// begin ComMoveXY ( tmp , x , y ) ;
74580: LD_VAR 0 7
74584: PPUSH
74585: LD_VAR 0 4
74589: PPUSH
74590: LD_VAR 0 5
74594: PPUSH
74595: CALL_OW 111
// wait ( 0 0$3 ) ;
74599: LD_INT 105
74601: PPUSH
74602: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
74606: LD_VAR 0 7
74610: PPUSH
74611: LD_VAR 0 4
74615: PPUSH
74616: LD_VAR 0 5
74620: PPUSH
74621: CALL_OW 307
74625: IFFALSE 74467
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
74627: LD_VAR 0 7
74631: PPUSH
74632: LD_VAR 0 4
74636: PPUSH
74637: LD_VAR 0 5
74641: PPUSH
74642: LD_VAR 0 8
74646: PUSH
74647: LD_VAR 0 3
74651: ARRAY
74652: PPUSH
74653: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
74657: LD_INT 35
74659: PPUSH
74660: CALL_OW 67
// until not HasTask ( tmp ) ;
74664: LD_VAR 0 7
74668: PPUSH
74669: CALL_OW 314
74673: NOT
74674: IFFALSE 74657
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
74676: LD_ADDR_EXP 88
74680: PUSH
74681: LD_EXP 88
74685: PPUSH
74686: LD_VAR 0 2
74690: PUSH
74691: LD_EXP 88
74695: PUSH
74696: LD_VAR 0 2
74700: ARRAY
74701: PUSH
74702: LD_INT 1
74704: PLUS
74705: PUSH
74706: EMPTY
74707: LIST
74708: LIST
74709: PPUSH
74710: LD_VAR 0 8
74714: PUSH
74715: LD_VAR 0 3
74719: ARRAY
74720: PPUSH
74721: CALL 18182 0 3
74725: ST_TO_ADDR
// end ;
74726: GO 74384
74728: POP
74729: POP
// MC_Reset ( i , 124 ) ;
74730: LD_VAR 0 2
74734: PPUSH
74735: LD_INT 124
74737: PPUSH
74738: CALL 58229 0 2
// end ; end ;
74742: GO 74139
74744: POP
74745: POP
// end ;
74746: LD_VAR 0 1
74750: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
74751: LD_INT 0
74753: PPUSH
74754: PPUSH
74755: PPUSH
// if not mc_bases then
74756: LD_EXP 52
74760: NOT
74761: IFFALSE 74765
// exit ;
74763: GO 75371
// for i = 1 to mc_bases do
74765: LD_ADDR_VAR 0 2
74769: PUSH
74770: DOUBLE
74771: LD_INT 1
74773: DEC
74774: ST_TO_ADDR
74775: LD_EXP 52
74779: PUSH
74780: FOR_TO
74781: IFFALSE 75369
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
74783: LD_ADDR_VAR 0 3
74787: PUSH
74788: LD_EXP 52
74792: PUSH
74793: LD_VAR 0 2
74797: ARRAY
74798: PPUSH
74799: LD_INT 25
74801: PUSH
74802: LD_INT 4
74804: PUSH
74805: EMPTY
74806: LIST
74807: LIST
74808: PPUSH
74809: CALL_OW 72
74813: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
74814: LD_VAR 0 3
74818: NOT
74819: PUSH
74820: LD_EXP 89
74824: PUSH
74825: LD_VAR 0 2
74829: ARRAY
74830: NOT
74831: OR
74832: PUSH
74833: LD_EXP 52
74837: PUSH
74838: LD_VAR 0 2
74842: ARRAY
74843: PPUSH
74844: LD_INT 2
74846: PUSH
74847: LD_INT 30
74849: PUSH
74850: LD_INT 0
74852: PUSH
74853: EMPTY
74854: LIST
74855: LIST
74856: PUSH
74857: LD_INT 30
74859: PUSH
74860: LD_INT 1
74862: PUSH
74863: EMPTY
74864: LIST
74865: LIST
74866: PUSH
74867: EMPTY
74868: LIST
74869: LIST
74870: LIST
74871: PPUSH
74872: CALL_OW 72
74876: NOT
74877: OR
74878: IFFALSE 74928
// begin if mc_deposits_finder [ i ] then
74880: LD_EXP 90
74884: PUSH
74885: LD_VAR 0 2
74889: ARRAY
74890: IFFALSE 74926
// begin MC_Reset ( i , 125 ) ;
74892: LD_VAR 0 2
74896: PPUSH
74897: LD_INT 125
74899: PPUSH
74900: CALL 58229 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
74904: LD_ADDR_EXP 90
74908: PUSH
74909: LD_EXP 90
74913: PPUSH
74914: LD_VAR 0 2
74918: PPUSH
74919: EMPTY
74920: PPUSH
74921: CALL_OW 1
74925: ST_TO_ADDR
// end ; continue ;
74926: GO 74780
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
74928: LD_EXP 89
74932: PUSH
74933: LD_VAR 0 2
74937: ARRAY
74938: PUSH
74939: LD_INT 1
74941: ARRAY
74942: PUSH
74943: LD_INT 3
74945: ARRAY
74946: PUSH
74947: LD_INT 1
74949: EQUAL
74950: PUSH
74951: LD_INT 20
74953: PPUSH
74954: LD_EXP 78
74958: PUSH
74959: LD_VAR 0 2
74963: ARRAY
74964: PPUSH
74965: CALL_OW 321
74969: PUSH
74970: LD_INT 2
74972: NONEQUAL
74973: AND
74974: IFFALSE 75024
// begin if mc_deposits_finder [ i ] then
74976: LD_EXP 90
74980: PUSH
74981: LD_VAR 0 2
74985: ARRAY
74986: IFFALSE 75022
// begin MC_Reset ( i , 125 ) ;
74988: LD_VAR 0 2
74992: PPUSH
74993: LD_INT 125
74995: PPUSH
74996: CALL 58229 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
75000: LD_ADDR_EXP 90
75004: PUSH
75005: LD_EXP 90
75009: PPUSH
75010: LD_VAR 0 2
75014: PPUSH
75015: EMPTY
75016: PPUSH
75017: CALL_OW 1
75021: ST_TO_ADDR
// end ; continue ;
75022: GO 74780
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
75024: LD_EXP 89
75028: PUSH
75029: LD_VAR 0 2
75033: ARRAY
75034: PUSH
75035: LD_INT 1
75037: ARRAY
75038: PUSH
75039: LD_INT 1
75041: ARRAY
75042: PPUSH
75043: LD_EXP 89
75047: PUSH
75048: LD_VAR 0 2
75052: ARRAY
75053: PUSH
75054: LD_INT 1
75056: ARRAY
75057: PUSH
75058: LD_INT 2
75060: ARRAY
75061: PPUSH
75062: LD_EXP 78
75066: PUSH
75067: LD_VAR 0 2
75071: ARRAY
75072: PPUSH
75073: CALL_OW 440
75077: IFFALSE 75120
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
75079: LD_ADDR_EXP 89
75083: PUSH
75084: LD_EXP 89
75088: PPUSH
75089: LD_VAR 0 2
75093: PPUSH
75094: LD_EXP 89
75098: PUSH
75099: LD_VAR 0 2
75103: ARRAY
75104: PPUSH
75105: LD_INT 1
75107: PPUSH
75108: CALL_OW 3
75112: PPUSH
75113: CALL_OW 1
75117: ST_TO_ADDR
75118: GO 75367
// begin if not mc_deposits_finder [ i ] then
75120: LD_EXP 90
75124: PUSH
75125: LD_VAR 0 2
75129: ARRAY
75130: NOT
75131: IFFALSE 75183
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
75133: LD_ADDR_EXP 90
75137: PUSH
75138: LD_EXP 90
75142: PPUSH
75143: LD_VAR 0 2
75147: PPUSH
75148: LD_VAR 0 3
75152: PUSH
75153: LD_INT 1
75155: ARRAY
75156: PUSH
75157: EMPTY
75158: LIST
75159: PPUSH
75160: CALL_OW 1
75164: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
75165: LD_VAR 0 3
75169: PUSH
75170: LD_INT 1
75172: ARRAY
75173: PPUSH
75174: LD_INT 125
75176: PPUSH
75177: CALL_OW 109
// end else
75181: GO 75367
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
75183: LD_EXP 90
75187: PUSH
75188: LD_VAR 0 2
75192: ARRAY
75193: PUSH
75194: LD_INT 1
75196: ARRAY
75197: PPUSH
75198: CALL_OW 310
75202: IFFALSE 75225
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
75204: LD_EXP 90
75208: PUSH
75209: LD_VAR 0 2
75213: ARRAY
75214: PUSH
75215: LD_INT 1
75217: ARRAY
75218: PPUSH
75219: CALL_OW 122
75223: GO 75367
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
75225: LD_EXP 90
75229: PUSH
75230: LD_VAR 0 2
75234: ARRAY
75235: PUSH
75236: LD_INT 1
75238: ARRAY
75239: PPUSH
75240: CALL_OW 314
75244: NOT
75245: PUSH
75246: LD_EXP 90
75250: PUSH
75251: LD_VAR 0 2
75255: ARRAY
75256: PUSH
75257: LD_INT 1
75259: ARRAY
75260: PPUSH
75261: LD_EXP 89
75265: PUSH
75266: LD_VAR 0 2
75270: ARRAY
75271: PUSH
75272: LD_INT 1
75274: ARRAY
75275: PUSH
75276: LD_INT 1
75278: ARRAY
75279: PPUSH
75280: LD_EXP 89
75284: PUSH
75285: LD_VAR 0 2
75289: ARRAY
75290: PUSH
75291: LD_INT 1
75293: ARRAY
75294: PUSH
75295: LD_INT 2
75297: ARRAY
75298: PPUSH
75299: CALL_OW 297
75303: PUSH
75304: LD_INT 6
75306: GREATER
75307: AND
75308: IFFALSE 75367
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
75310: LD_EXP 90
75314: PUSH
75315: LD_VAR 0 2
75319: ARRAY
75320: PUSH
75321: LD_INT 1
75323: ARRAY
75324: PPUSH
75325: LD_EXP 89
75329: PUSH
75330: LD_VAR 0 2
75334: ARRAY
75335: PUSH
75336: LD_INT 1
75338: ARRAY
75339: PUSH
75340: LD_INT 1
75342: ARRAY
75343: PPUSH
75344: LD_EXP 89
75348: PUSH
75349: LD_VAR 0 2
75353: ARRAY
75354: PUSH
75355: LD_INT 1
75357: ARRAY
75358: PUSH
75359: LD_INT 2
75361: ARRAY
75362: PPUSH
75363: CALL_OW 111
// end ; end ; end ;
75367: GO 74780
75369: POP
75370: POP
// end ;
75371: LD_VAR 0 1
75375: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
75376: LD_INT 0
75378: PPUSH
75379: PPUSH
75380: PPUSH
75381: PPUSH
75382: PPUSH
75383: PPUSH
75384: PPUSH
75385: PPUSH
75386: PPUSH
75387: PPUSH
75388: PPUSH
// if not mc_bases then
75389: LD_EXP 52
75393: NOT
75394: IFFALSE 75398
// exit ;
75396: GO 76122
// for i = 1 to mc_bases do
75398: LD_ADDR_VAR 0 2
75402: PUSH
75403: DOUBLE
75404: LD_INT 1
75406: DEC
75407: ST_TO_ADDR
75408: LD_EXP 52
75412: PUSH
75413: FOR_TO
75414: IFFALSE 76120
// begin if not mc_bases [ i ] then
75416: LD_EXP 52
75420: PUSH
75421: LD_VAR 0 2
75425: ARRAY
75426: NOT
75427: IFFALSE 75431
// continue ;
75429: GO 75413
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
75431: LD_ADDR_VAR 0 7
75435: PUSH
75436: LD_EXP 52
75440: PUSH
75441: LD_VAR 0 2
75445: ARRAY
75446: PUSH
75447: LD_INT 1
75449: ARRAY
75450: PPUSH
75451: CALL_OW 248
75455: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
75456: LD_VAR 0 7
75460: PUSH
75461: LD_INT 3
75463: EQUAL
75464: PUSH
75465: LD_EXP 71
75469: PUSH
75470: LD_VAR 0 2
75474: ARRAY
75475: PUSH
75476: LD_EXP 74
75480: PUSH
75481: LD_VAR 0 2
75485: ARRAY
75486: UNION
75487: PPUSH
75488: LD_INT 33
75490: PUSH
75491: LD_INT 2
75493: PUSH
75494: EMPTY
75495: LIST
75496: LIST
75497: PPUSH
75498: CALL_OW 72
75502: NOT
75503: OR
75504: IFFALSE 75508
// continue ;
75506: GO 75413
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
75508: LD_ADDR_VAR 0 9
75512: PUSH
75513: LD_EXP 52
75517: PUSH
75518: LD_VAR 0 2
75522: ARRAY
75523: PPUSH
75524: LD_INT 30
75526: PUSH
75527: LD_INT 36
75529: PUSH
75530: EMPTY
75531: LIST
75532: LIST
75533: PPUSH
75534: CALL_OW 72
75538: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
75539: LD_ADDR_VAR 0 10
75543: PUSH
75544: LD_EXP 71
75548: PUSH
75549: LD_VAR 0 2
75553: ARRAY
75554: PPUSH
75555: LD_INT 34
75557: PUSH
75558: LD_INT 31
75560: PUSH
75561: EMPTY
75562: LIST
75563: LIST
75564: PPUSH
75565: CALL_OW 72
75569: ST_TO_ADDR
// if not cts and not mcts then
75570: LD_VAR 0 9
75574: NOT
75575: PUSH
75576: LD_VAR 0 10
75580: NOT
75581: AND
75582: IFFALSE 75586
// continue ;
75584: GO 75413
// x := cts ;
75586: LD_ADDR_VAR 0 11
75590: PUSH
75591: LD_VAR 0 9
75595: ST_TO_ADDR
// if not x then
75596: LD_VAR 0 11
75600: NOT
75601: IFFALSE 75613
// x := mcts ;
75603: LD_ADDR_VAR 0 11
75607: PUSH
75608: LD_VAR 0 10
75612: ST_TO_ADDR
// if mc_remote_driver [ i ] then
75613: LD_EXP 92
75617: PUSH
75618: LD_VAR 0 2
75622: ARRAY
75623: IFFALSE 75892
// for j in mc_remote_driver [ i ] do
75625: LD_ADDR_VAR 0 3
75629: PUSH
75630: LD_EXP 92
75634: PUSH
75635: LD_VAR 0 2
75639: ARRAY
75640: PUSH
75641: FOR_IN
75642: IFFALSE 75890
// begin if GetClass ( j ) <> 3 then
75644: LD_VAR 0 3
75648: PPUSH
75649: CALL_OW 257
75653: PUSH
75654: LD_INT 3
75656: NONEQUAL
75657: IFFALSE 75710
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
75659: LD_ADDR_EXP 92
75663: PUSH
75664: LD_EXP 92
75668: PPUSH
75669: LD_VAR 0 2
75673: PPUSH
75674: LD_EXP 92
75678: PUSH
75679: LD_VAR 0 2
75683: ARRAY
75684: PUSH
75685: LD_VAR 0 3
75689: DIFF
75690: PPUSH
75691: CALL_OW 1
75695: ST_TO_ADDR
// SetTag ( j , 0 ) ;
75696: LD_VAR 0 3
75700: PPUSH
75701: LD_INT 0
75703: PPUSH
75704: CALL_OW 109
// continue ;
75708: GO 75641
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
75710: LD_VAR 0 3
75714: PPUSH
75715: CALL_OW 310
75719: NOT
75720: PUSH
75721: LD_VAR 0 3
75725: PPUSH
75726: CALL_OW 310
75730: PPUSH
75731: CALL_OW 266
75735: PUSH
75736: LD_INT 36
75738: NONEQUAL
75739: PUSH
75740: LD_VAR 0 3
75744: PPUSH
75745: CALL 51530 0 1
75749: NOT
75750: AND
75751: OR
75752: IFFALSE 75888
// begin if IsInUnit ( j ) then
75754: LD_VAR 0 3
75758: PPUSH
75759: CALL_OW 310
75763: IFFALSE 75774
// ComExitBuilding ( j ) ;
75765: LD_VAR 0 3
75769: PPUSH
75770: CALL_OW 122
// ct := 0 ;
75774: LD_ADDR_VAR 0 8
75778: PUSH
75779: LD_INT 0
75781: ST_TO_ADDR
// for k in x do
75782: LD_ADDR_VAR 0 4
75786: PUSH
75787: LD_VAR 0 11
75791: PUSH
75792: FOR_IN
75793: IFFALSE 75866
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
75795: LD_VAR 0 4
75799: PPUSH
75800: CALL_OW 264
75804: PUSH
75805: LD_INT 31
75807: EQUAL
75808: PUSH
75809: LD_VAR 0 4
75813: PPUSH
75814: CALL_OW 311
75818: NOT
75819: AND
75820: PUSH
75821: LD_VAR 0 4
75825: PPUSH
75826: CALL_OW 266
75830: PUSH
75831: LD_INT 36
75833: EQUAL
75834: PUSH
75835: LD_VAR 0 4
75839: PPUSH
75840: CALL_OW 313
75844: PUSH
75845: LD_INT 3
75847: LESS
75848: AND
75849: OR
75850: IFFALSE 75864
// begin ct := k ;
75852: LD_ADDR_VAR 0 8
75856: PUSH
75857: LD_VAR 0 4
75861: ST_TO_ADDR
// break ;
75862: GO 75866
// end ;
75864: GO 75792
75866: POP
75867: POP
// if ct then
75868: LD_VAR 0 8
75872: IFFALSE 75888
// ComEnterUnit ( j , ct ) ;
75874: LD_VAR 0 3
75878: PPUSH
75879: LD_VAR 0 8
75883: PPUSH
75884: CALL_OW 120
// end ; end ;
75888: GO 75641
75890: POP
75891: POP
// places := 0 ;
75892: LD_ADDR_VAR 0 5
75896: PUSH
75897: LD_INT 0
75899: ST_TO_ADDR
// for j = 1 to x do
75900: LD_ADDR_VAR 0 3
75904: PUSH
75905: DOUBLE
75906: LD_INT 1
75908: DEC
75909: ST_TO_ADDR
75910: LD_VAR 0 11
75914: PUSH
75915: FOR_TO
75916: IFFALSE 75971
// if GetWeapon ( x [ j ] ) = ar_control_tower then
75918: LD_VAR 0 11
75922: PUSH
75923: LD_VAR 0 3
75927: ARRAY
75928: PPUSH
75929: CALL_OW 264
75933: PUSH
75934: LD_INT 31
75936: EQUAL
75937: IFFALSE 75955
// places := places + 1 else
75939: LD_ADDR_VAR 0 5
75943: PUSH
75944: LD_VAR 0 5
75948: PUSH
75949: LD_INT 1
75951: PLUS
75952: ST_TO_ADDR
75953: GO 75969
// places := places + 3 ;
75955: LD_ADDR_VAR 0 5
75959: PUSH
75960: LD_VAR 0 5
75964: PUSH
75965: LD_INT 3
75967: PLUS
75968: ST_TO_ADDR
75969: GO 75915
75971: POP
75972: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
75973: LD_ADDR_VAR 0 6
75977: PUSH
75978: LD_EXP 52
75982: PUSH
75983: LD_VAR 0 2
75987: ARRAY
75988: PPUSH
75989: LD_INT 25
75991: PUSH
75992: LD_INT 3
75994: PUSH
75995: EMPTY
75996: LIST
75997: LIST
75998: PPUSH
75999: CALL_OW 72
76003: PUSH
76004: LD_EXP 92
76008: PUSH
76009: LD_VAR 0 2
76013: ARRAY
76014: DIFF
76015: PPUSH
76016: LD_INT 3
76018: PPUSH
76019: CALL 52430 0 2
76023: ST_TO_ADDR
// if not tmp then
76024: LD_VAR 0 6
76028: NOT
76029: IFFALSE 76033
// continue ;
76031: GO 75413
// places := places - mc_remote_driver [ i ] ;
76033: LD_ADDR_VAR 0 5
76037: PUSH
76038: LD_VAR 0 5
76042: PUSH
76043: LD_EXP 92
76047: PUSH
76048: LD_VAR 0 2
76052: ARRAY
76053: MINUS
76054: ST_TO_ADDR
// if places then
76055: LD_VAR 0 5
76059: IFFALSE 76118
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
76061: LD_ADDR_EXP 92
76065: PUSH
76066: LD_EXP 92
76070: PPUSH
76071: LD_VAR 0 2
76075: PPUSH
76076: LD_EXP 92
76080: PUSH
76081: LD_VAR 0 2
76085: ARRAY
76086: PUSH
76087: LD_VAR 0 6
76091: PUSH
76092: LD_INT 1
76094: ARRAY
76095: UNION
76096: PPUSH
76097: CALL_OW 1
76101: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
76102: LD_VAR 0 6
76106: PUSH
76107: LD_INT 1
76109: ARRAY
76110: PPUSH
76111: LD_INT 126
76113: PPUSH
76114: CALL_OW 109
// end ; end ;
76118: GO 75413
76120: POP
76121: POP
// end ;
76122: LD_VAR 0 1
76126: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
76127: LD_INT 0
76129: PPUSH
76130: PPUSH
76131: PPUSH
76132: PPUSH
76133: PPUSH
76134: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
76135: LD_VAR 0 1
76139: NOT
76140: PUSH
76141: LD_VAR 0 2
76145: NOT
76146: OR
76147: PUSH
76148: LD_VAR 0 3
76152: NOT
76153: OR
76154: PUSH
76155: LD_VAR 0 4
76159: PUSH
76160: LD_INT 1
76162: PUSH
76163: LD_INT 2
76165: PUSH
76166: LD_INT 3
76168: PUSH
76169: LD_INT 4
76171: PUSH
76172: LD_INT 5
76174: PUSH
76175: LD_INT 8
76177: PUSH
76178: LD_INT 9
76180: PUSH
76181: LD_INT 15
76183: PUSH
76184: LD_INT 16
76186: PUSH
76187: EMPTY
76188: LIST
76189: LIST
76190: LIST
76191: LIST
76192: LIST
76193: LIST
76194: LIST
76195: LIST
76196: LIST
76197: IN
76198: NOT
76199: OR
76200: IFFALSE 76204
// exit ;
76202: GO 77104
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
76204: LD_ADDR_VAR 0 2
76208: PUSH
76209: LD_VAR 0 2
76213: PPUSH
76214: LD_INT 21
76216: PUSH
76217: LD_INT 3
76219: PUSH
76220: EMPTY
76221: LIST
76222: LIST
76223: PUSH
76224: LD_INT 24
76226: PUSH
76227: LD_INT 250
76229: PUSH
76230: EMPTY
76231: LIST
76232: LIST
76233: PUSH
76234: EMPTY
76235: LIST
76236: LIST
76237: PPUSH
76238: CALL_OW 72
76242: ST_TO_ADDR
// case class of 1 , 15 :
76243: LD_VAR 0 4
76247: PUSH
76248: LD_INT 1
76250: DOUBLE
76251: EQUAL
76252: IFTRUE 76262
76254: LD_INT 15
76256: DOUBLE
76257: EQUAL
76258: IFTRUE 76262
76260: GO 76347
76262: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
76263: LD_ADDR_VAR 0 8
76267: PUSH
76268: LD_VAR 0 2
76272: PPUSH
76273: LD_INT 2
76275: PUSH
76276: LD_INT 30
76278: PUSH
76279: LD_INT 32
76281: PUSH
76282: EMPTY
76283: LIST
76284: LIST
76285: PUSH
76286: LD_INT 30
76288: PUSH
76289: LD_INT 31
76291: PUSH
76292: EMPTY
76293: LIST
76294: LIST
76295: PUSH
76296: EMPTY
76297: LIST
76298: LIST
76299: LIST
76300: PPUSH
76301: CALL_OW 72
76305: PUSH
76306: LD_VAR 0 2
76310: PPUSH
76311: LD_INT 2
76313: PUSH
76314: LD_INT 30
76316: PUSH
76317: LD_INT 4
76319: PUSH
76320: EMPTY
76321: LIST
76322: LIST
76323: PUSH
76324: LD_INT 30
76326: PUSH
76327: LD_INT 5
76329: PUSH
76330: EMPTY
76331: LIST
76332: LIST
76333: PUSH
76334: EMPTY
76335: LIST
76336: LIST
76337: LIST
76338: PPUSH
76339: CALL_OW 72
76343: ADD
76344: ST_TO_ADDR
76345: GO 76593
76347: LD_INT 2
76349: DOUBLE
76350: EQUAL
76351: IFTRUE 76361
76353: LD_INT 16
76355: DOUBLE
76356: EQUAL
76357: IFTRUE 76361
76359: GO 76407
76361: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
76362: LD_ADDR_VAR 0 8
76366: PUSH
76367: LD_VAR 0 2
76371: PPUSH
76372: LD_INT 2
76374: PUSH
76375: LD_INT 30
76377: PUSH
76378: LD_INT 0
76380: PUSH
76381: EMPTY
76382: LIST
76383: LIST
76384: PUSH
76385: LD_INT 30
76387: PUSH
76388: LD_INT 1
76390: PUSH
76391: EMPTY
76392: LIST
76393: LIST
76394: PUSH
76395: EMPTY
76396: LIST
76397: LIST
76398: LIST
76399: PPUSH
76400: CALL_OW 72
76404: ST_TO_ADDR
76405: GO 76593
76407: LD_INT 3
76409: DOUBLE
76410: EQUAL
76411: IFTRUE 76415
76413: GO 76461
76415: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
76416: LD_ADDR_VAR 0 8
76420: PUSH
76421: LD_VAR 0 2
76425: PPUSH
76426: LD_INT 2
76428: PUSH
76429: LD_INT 30
76431: PUSH
76432: LD_INT 2
76434: PUSH
76435: EMPTY
76436: LIST
76437: LIST
76438: PUSH
76439: LD_INT 30
76441: PUSH
76442: LD_INT 3
76444: PUSH
76445: EMPTY
76446: LIST
76447: LIST
76448: PUSH
76449: EMPTY
76450: LIST
76451: LIST
76452: LIST
76453: PPUSH
76454: CALL_OW 72
76458: ST_TO_ADDR
76459: GO 76593
76461: LD_INT 4
76463: DOUBLE
76464: EQUAL
76465: IFTRUE 76469
76467: GO 76526
76469: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
76470: LD_ADDR_VAR 0 8
76474: PUSH
76475: LD_VAR 0 2
76479: PPUSH
76480: LD_INT 2
76482: PUSH
76483: LD_INT 30
76485: PUSH
76486: LD_INT 6
76488: PUSH
76489: EMPTY
76490: LIST
76491: LIST
76492: PUSH
76493: LD_INT 30
76495: PUSH
76496: LD_INT 7
76498: PUSH
76499: EMPTY
76500: LIST
76501: LIST
76502: PUSH
76503: LD_INT 30
76505: PUSH
76506: LD_INT 8
76508: PUSH
76509: EMPTY
76510: LIST
76511: LIST
76512: PUSH
76513: EMPTY
76514: LIST
76515: LIST
76516: LIST
76517: LIST
76518: PPUSH
76519: CALL_OW 72
76523: ST_TO_ADDR
76524: GO 76593
76526: LD_INT 5
76528: DOUBLE
76529: EQUAL
76530: IFTRUE 76546
76532: LD_INT 8
76534: DOUBLE
76535: EQUAL
76536: IFTRUE 76546
76538: LD_INT 9
76540: DOUBLE
76541: EQUAL
76542: IFTRUE 76546
76544: GO 76592
76546: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
76547: LD_ADDR_VAR 0 8
76551: PUSH
76552: LD_VAR 0 2
76556: PPUSH
76557: LD_INT 2
76559: PUSH
76560: LD_INT 30
76562: PUSH
76563: LD_INT 4
76565: PUSH
76566: EMPTY
76567: LIST
76568: LIST
76569: PUSH
76570: LD_INT 30
76572: PUSH
76573: LD_INT 5
76575: PUSH
76576: EMPTY
76577: LIST
76578: LIST
76579: PUSH
76580: EMPTY
76581: LIST
76582: LIST
76583: LIST
76584: PPUSH
76585: CALL_OW 72
76589: ST_TO_ADDR
76590: GO 76593
76592: POP
// if not tmp then
76593: LD_VAR 0 8
76597: NOT
76598: IFFALSE 76602
// exit ;
76600: GO 77104
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
76602: LD_VAR 0 4
76606: PUSH
76607: LD_INT 1
76609: PUSH
76610: LD_INT 15
76612: PUSH
76613: EMPTY
76614: LIST
76615: LIST
76616: IN
76617: PUSH
76618: LD_EXP 61
76622: PUSH
76623: LD_VAR 0 1
76627: ARRAY
76628: AND
76629: IFFALSE 76785
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
76631: LD_ADDR_VAR 0 9
76635: PUSH
76636: LD_EXP 61
76640: PUSH
76641: LD_VAR 0 1
76645: ARRAY
76646: PUSH
76647: LD_INT 1
76649: ARRAY
76650: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
76651: LD_VAR 0 9
76655: PUSH
76656: LD_EXP 62
76660: PUSH
76661: LD_VAR 0 1
76665: ARRAY
76666: IN
76667: NOT
76668: IFFALSE 76783
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
76670: LD_ADDR_EXP 62
76674: PUSH
76675: LD_EXP 62
76679: PPUSH
76680: LD_VAR 0 1
76684: PUSH
76685: LD_EXP 62
76689: PUSH
76690: LD_VAR 0 1
76694: ARRAY
76695: PUSH
76696: LD_INT 1
76698: PLUS
76699: PUSH
76700: EMPTY
76701: LIST
76702: LIST
76703: PPUSH
76704: LD_VAR 0 9
76708: PPUSH
76709: CALL 18182 0 3
76713: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
76714: LD_ADDR_EXP 61
76718: PUSH
76719: LD_EXP 61
76723: PPUSH
76724: LD_VAR 0 1
76728: PPUSH
76729: LD_EXP 61
76733: PUSH
76734: LD_VAR 0 1
76738: ARRAY
76739: PUSH
76740: LD_VAR 0 9
76744: DIFF
76745: PPUSH
76746: CALL_OW 1
76750: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
76751: LD_VAR 0 3
76755: PPUSH
76756: LD_EXP 62
76760: PUSH
76761: LD_VAR 0 1
76765: ARRAY
76766: PUSH
76767: LD_EXP 62
76771: PUSH
76772: LD_VAR 0 1
76776: ARRAY
76777: ARRAY
76778: PPUSH
76779: CALL_OW 120
// end ; exit ;
76783: GO 77104
// end ; if tmp > 1 then
76785: LD_VAR 0 8
76789: PUSH
76790: LD_INT 1
76792: GREATER
76793: IFFALSE 76897
// for i = 2 to tmp do
76795: LD_ADDR_VAR 0 6
76799: PUSH
76800: DOUBLE
76801: LD_INT 2
76803: DEC
76804: ST_TO_ADDR
76805: LD_VAR 0 8
76809: PUSH
76810: FOR_TO
76811: IFFALSE 76895
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
76813: LD_VAR 0 8
76817: PUSH
76818: LD_VAR 0 6
76822: ARRAY
76823: PPUSH
76824: CALL_OW 461
76828: PUSH
76829: LD_INT 6
76831: EQUAL
76832: IFFALSE 76893
// begin x := tmp [ i ] ;
76834: LD_ADDR_VAR 0 9
76838: PUSH
76839: LD_VAR 0 8
76843: PUSH
76844: LD_VAR 0 6
76848: ARRAY
76849: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
76850: LD_ADDR_VAR 0 8
76854: PUSH
76855: LD_VAR 0 8
76859: PPUSH
76860: LD_VAR 0 6
76864: PPUSH
76865: CALL_OW 3
76869: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
76870: LD_ADDR_VAR 0 8
76874: PUSH
76875: LD_VAR 0 8
76879: PPUSH
76880: LD_INT 1
76882: PPUSH
76883: LD_VAR 0 9
76887: PPUSH
76888: CALL_OW 2
76892: ST_TO_ADDR
// end ;
76893: GO 76810
76895: POP
76896: POP
// for i in tmp do
76897: LD_ADDR_VAR 0 6
76901: PUSH
76902: LD_VAR 0 8
76906: PUSH
76907: FOR_IN
76908: IFFALSE 76977
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
76910: LD_VAR 0 6
76914: PPUSH
76915: CALL_OW 313
76919: PUSH
76920: LD_INT 6
76922: LESS
76923: PUSH
76924: LD_VAR 0 6
76928: PPUSH
76929: CALL_OW 266
76933: PUSH
76934: LD_INT 31
76936: PUSH
76937: LD_INT 32
76939: PUSH
76940: EMPTY
76941: LIST
76942: LIST
76943: IN
76944: NOT
76945: AND
76946: PUSH
76947: LD_VAR 0 6
76951: PPUSH
76952: CALL_OW 313
76956: PUSH
76957: LD_INT 0
76959: EQUAL
76960: OR
76961: IFFALSE 76975
// begin j := i ;
76963: LD_ADDR_VAR 0 7
76967: PUSH
76968: LD_VAR 0 6
76972: ST_TO_ADDR
// break ;
76973: GO 76977
// end ; end ;
76975: GO 76907
76977: POP
76978: POP
// if j then
76979: LD_VAR 0 7
76983: IFFALSE 77001
// ComEnterUnit ( unit , j ) else
76985: LD_VAR 0 3
76989: PPUSH
76990: LD_VAR 0 7
76994: PPUSH
76995: CALL_OW 120
76999: GO 77104
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
77001: LD_ADDR_VAR 0 10
77005: PUSH
77006: LD_VAR 0 2
77010: PPUSH
77011: LD_INT 2
77013: PUSH
77014: LD_INT 30
77016: PUSH
77017: LD_INT 0
77019: PUSH
77020: EMPTY
77021: LIST
77022: LIST
77023: PUSH
77024: LD_INT 30
77026: PUSH
77027: LD_INT 1
77029: PUSH
77030: EMPTY
77031: LIST
77032: LIST
77033: PUSH
77034: EMPTY
77035: LIST
77036: LIST
77037: LIST
77038: PPUSH
77039: CALL_OW 72
77043: ST_TO_ADDR
// if depot then
77044: LD_VAR 0 10
77048: IFFALSE 77104
// begin depot := NearestUnitToUnit ( depot , unit ) ;
77050: LD_ADDR_VAR 0 10
77054: PUSH
77055: LD_VAR 0 10
77059: PPUSH
77060: LD_VAR 0 3
77064: PPUSH
77065: CALL_OW 74
77069: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
77070: LD_VAR 0 3
77074: PPUSH
77075: LD_VAR 0 10
77079: PPUSH
77080: CALL_OW 296
77084: PUSH
77085: LD_INT 10
77087: GREATER
77088: IFFALSE 77104
// ComStandNearbyBuilding ( unit , depot ) ;
77090: LD_VAR 0 3
77094: PPUSH
77095: LD_VAR 0 10
77099: PPUSH
77100: CALL 12534 0 2
// end ; end ; end ;
77104: LD_VAR 0 5
77108: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
77109: LD_INT 0
77111: PPUSH
77112: PPUSH
77113: PPUSH
77114: PPUSH
// if not mc_bases then
77115: LD_EXP 52
77119: NOT
77120: IFFALSE 77124
// exit ;
77122: GO 77363
// for i = 1 to mc_bases do
77124: LD_ADDR_VAR 0 2
77128: PUSH
77129: DOUBLE
77130: LD_INT 1
77132: DEC
77133: ST_TO_ADDR
77134: LD_EXP 52
77138: PUSH
77139: FOR_TO
77140: IFFALSE 77361
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
77142: LD_ADDR_VAR 0 4
77146: PUSH
77147: LD_EXP 52
77151: PUSH
77152: LD_VAR 0 2
77156: ARRAY
77157: PPUSH
77158: LD_INT 21
77160: PUSH
77161: LD_INT 1
77163: PUSH
77164: EMPTY
77165: LIST
77166: LIST
77167: PPUSH
77168: CALL_OW 72
77172: PUSH
77173: LD_EXP 81
77177: PUSH
77178: LD_VAR 0 2
77182: ARRAY
77183: UNION
77184: ST_TO_ADDR
// if not tmp then
77185: LD_VAR 0 4
77189: NOT
77190: IFFALSE 77194
// continue ;
77192: GO 77139
// for j in tmp do
77194: LD_ADDR_VAR 0 3
77198: PUSH
77199: LD_VAR 0 4
77203: PUSH
77204: FOR_IN
77205: IFFALSE 77357
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
77207: LD_VAR 0 3
77211: PPUSH
77212: CALL_OW 110
77216: NOT
77217: PUSH
77218: LD_VAR 0 3
77222: PPUSH
77223: CALL_OW 314
77227: NOT
77228: AND
77229: PUSH
77230: LD_VAR 0 3
77234: PPUSH
77235: CALL_OW 311
77239: NOT
77240: AND
77241: PUSH
77242: LD_VAR 0 3
77246: PPUSH
77247: CALL_OW 310
77251: NOT
77252: AND
77253: PUSH
77254: LD_VAR 0 3
77258: PUSH
77259: LD_EXP 55
77263: PUSH
77264: LD_VAR 0 2
77268: ARRAY
77269: PUSH
77270: LD_INT 1
77272: ARRAY
77273: IN
77274: NOT
77275: AND
77276: PUSH
77277: LD_VAR 0 3
77281: PUSH
77282: LD_EXP 55
77286: PUSH
77287: LD_VAR 0 2
77291: ARRAY
77292: PUSH
77293: LD_INT 2
77295: ARRAY
77296: IN
77297: NOT
77298: AND
77299: PUSH
77300: LD_VAR 0 3
77304: PUSH
77305: LD_EXP 64
77309: PUSH
77310: LD_VAR 0 2
77314: ARRAY
77315: IN
77316: NOT
77317: AND
77318: IFFALSE 77355
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
77320: LD_VAR 0 2
77324: PPUSH
77325: LD_EXP 52
77329: PUSH
77330: LD_VAR 0 2
77334: ARRAY
77335: PPUSH
77336: LD_VAR 0 3
77340: PPUSH
77341: LD_VAR 0 3
77345: PPUSH
77346: CALL_OW 257
77350: PPUSH
77351: CALL 76127 0 4
// end ;
77355: GO 77204
77357: POP
77358: POP
// end ;
77359: GO 77139
77361: POP
77362: POP
// end ;
77363: LD_VAR 0 1
77367: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
77368: LD_INT 0
77370: PPUSH
77371: PPUSH
77372: PPUSH
77373: PPUSH
77374: PPUSH
77375: PPUSH
// if not mc_bases [ base ] then
77376: LD_EXP 52
77380: PUSH
77381: LD_VAR 0 1
77385: ARRAY
77386: NOT
77387: IFFALSE 77391
// exit ;
77389: GO 77573
// tmp := [ ] ;
77391: LD_ADDR_VAR 0 6
77395: PUSH
77396: EMPTY
77397: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
77398: LD_ADDR_VAR 0 7
77402: PUSH
77403: LD_VAR 0 3
77407: PPUSH
77408: LD_INT 0
77410: PPUSH
77411: CALL_OW 517
77415: ST_TO_ADDR
// if not list then
77416: LD_VAR 0 7
77420: NOT
77421: IFFALSE 77425
// exit ;
77423: GO 77573
// for i = 1 to amount do
77425: LD_ADDR_VAR 0 5
77429: PUSH
77430: DOUBLE
77431: LD_INT 1
77433: DEC
77434: ST_TO_ADDR
77435: LD_VAR 0 2
77439: PUSH
77440: FOR_TO
77441: IFFALSE 77521
// begin x := rand ( 1 , list [ 1 ] ) ;
77443: LD_ADDR_VAR 0 8
77447: PUSH
77448: LD_INT 1
77450: PPUSH
77451: LD_VAR 0 7
77455: PUSH
77456: LD_INT 1
77458: ARRAY
77459: PPUSH
77460: CALL_OW 12
77464: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
77465: LD_ADDR_VAR 0 6
77469: PUSH
77470: LD_VAR 0 6
77474: PPUSH
77475: LD_VAR 0 5
77479: PPUSH
77480: LD_VAR 0 7
77484: PUSH
77485: LD_INT 1
77487: ARRAY
77488: PUSH
77489: LD_VAR 0 8
77493: ARRAY
77494: PUSH
77495: LD_VAR 0 7
77499: PUSH
77500: LD_INT 2
77502: ARRAY
77503: PUSH
77504: LD_VAR 0 8
77508: ARRAY
77509: PUSH
77510: EMPTY
77511: LIST
77512: LIST
77513: PPUSH
77514: CALL_OW 1
77518: ST_TO_ADDR
// end ;
77519: GO 77440
77521: POP
77522: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
77523: LD_ADDR_EXP 65
77527: PUSH
77528: LD_EXP 65
77532: PPUSH
77533: LD_VAR 0 1
77537: PPUSH
77538: LD_VAR 0 6
77542: PPUSH
77543: CALL_OW 1
77547: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
77548: LD_ADDR_EXP 67
77552: PUSH
77553: LD_EXP 67
77557: PPUSH
77558: LD_VAR 0 1
77562: PPUSH
77563: LD_VAR 0 3
77567: PPUSH
77568: CALL_OW 1
77572: ST_TO_ADDR
// end ;
77573: LD_VAR 0 4
77577: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
77578: LD_INT 0
77580: PPUSH
// if not mc_bases [ base ] then
77581: LD_EXP 52
77585: PUSH
77586: LD_VAR 0 1
77590: ARRAY
77591: NOT
77592: IFFALSE 77596
// exit ;
77594: GO 77621
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
77596: LD_ADDR_EXP 57
77600: PUSH
77601: LD_EXP 57
77605: PPUSH
77606: LD_VAR 0 1
77610: PPUSH
77611: LD_VAR 0 2
77615: PPUSH
77616: CALL_OW 1
77620: ST_TO_ADDR
// end ;
77621: LD_VAR 0 3
77625: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
77626: LD_INT 0
77628: PPUSH
// if not mc_bases [ base ] then
77629: LD_EXP 52
77633: PUSH
77634: LD_VAR 0 1
77638: ARRAY
77639: NOT
77640: IFFALSE 77644
// exit ;
77642: GO 77681
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
77644: LD_ADDR_EXP 57
77648: PUSH
77649: LD_EXP 57
77653: PPUSH
77654: LD_VAR 0 1
77658: PPUSH
77659: LD_EXP 57
77663: PUSH
77664: LD_VAR 0 1
77668: ARRAY
77669: PUSH
77670: LD_VAR 0 2
77674: UNION
77675: PPUSH
77676: CALL_OW 1
77680: ST_TO_ADDR
// end ;
77681: LD_VAR 0 3
77685: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
77686: LD_INT 0
77688: PPUSH
// if not mc_bases [ base ] then
77689: LD_EXP 52
77693: PUSH
77694: LD_VAR 0 1
77698: ARRAY
77699: NOT
77700: IFFALSE 77704
// exit ;
77702: GO 77729
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
77704: LD_ADDR_EXP 73
77708: PUSH
77709: LD_EXP 73
77713: PPUSH
77714: LD_VAR 0 1
77718: PPUSH
77719: LD_VAR 0 2
77723: PPUSH
77724: CALL_OW 1
77728: ST_TO_ADDR
// end ;
77729: LD_VAR 0 3
77733: RET
// export function MC_InsertProduceList ( base , components ) ; begin
77734: LD_INT 0
77736: PPUSH
// if not mc_bases [ base ] then
77737: LD_EXP 52
77741: PUSH
77742: LD_VAR 0 1
77746: ARRAY
77747: NOT
77748: IFFALSE 77752
// exit ;
77750: GO 77789
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
77752: LD_ADDR_EXP 73
77756: PUSH
77757: LD_EXP 73
77761: PPUSH
77762: LD_VAR 0 1
77766: PPUSH
77767: LD_EXP 73
77771: PUSH
77772: LD_VAR 0 1
77776: ARRAY
77777: PUSH
77778: LD_VAR 0 2
77782: ADD
77783: PPUSH
77784: CALL_OW 1
77788: ST_TO_ADDR
// end ;
77789: LD_VAR 0 3
77793: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
77794: LD_INT 0
77796: PPUSH
// if not mc_bases [ base ] then
77797: LD_EXP 52
77801: PUSH
77802: LD_VAR 0 1
77806: ARRAY
77807: NOT
77808: IFFALSE 77812
// exit ;
77810: GO 77866
// mc_defender := Replace ( mc_defender , base , deflist ) ;
77812: LD_ADDR_EXP 74
77816: PUSH
77817: LD_EXP 74
77821: PPUSH
77822: LD_VAR 0 1
77826: PPUSH
77827: LD_VAR 0 2
77831: PPUSH
77832: CALL_OW 1
77836: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
77837: LD_ADDR_EXP 63
77841: PUSH
77842: LD_EXP 63
77846: PPUSH
77847: LD_VAR 0 1
77851: PPUSH
77852: LD_VAR 0 2
77856: PUSH
77857: LD_INT 0
77859: PLUS
77860: PPUSH
77861: CALL_OW 1
77865: ST_TO_ADDR
// end ;
77866: LD_VAR 0 3
77870: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
77871: LD_INT 0
77873: PPUSH
// if not mc_bases [ base ] then
77874: LD_EXP 52
77878: PUSH
77879: LD_VAR 0 1
77883: ARRAY
77884: NOT
77885: IFFALSE 77889
// exit ;
77887: GO 77914
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
77889: LD_ADDR_EXP 63
77893: PUSH
77894: LD_EXP 63
77898: PPUSH
77899: LD_VAR 0 1
77903: PPUSH
77904: LD_VAR 0 2
77908: PPUSH
77909: CALL_OW 1
77913: ST_TO_ADDR
// end ;
77914: LD_VAR 0 3
77918: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
77919: LD_INT 0
77921: PPUSH
77922: PPUSH
77923: PPUSH
77924: PPUSH
// if not mc_bases [ base ] then
77925: LD_EXP 52
77929: PUSH
77930: LD_VAR 0 1
77934: ARRAY
77935: NOT
77936: IFFALSE 77940
// exit ;
77938: GO 78005
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
77940: LD_ADDR_EXP 72
77944: PUSH
77945: LD_EXP 72
77949: PPUSH
77950: LD_VAR 0 1
77954: PUSH
77955: LD_EXP 72
77959: PUSH
77960: LD_VAR 0 1
77964: ARRAY
77965: PUSH
77966: LD_INT 1
77968: PLUS
77969: PUSH
77970: EMPTY
77971: LIST
77972: LIST
77973: PPUSH
77974: LD_VAR 0 1
77978: PUSH
77979: LD_VAR 0 2
77983: PUSH
77984: LD_VAR 0 3
77988: PUSH
77989: LD_VAR 0 4
77993: PUSH
77994: EMPTY
77995: LIST
77996: LIST
77997: LIST
77998: LIST
77999: PPUSH
78000: CALL 18182 0 3
78004: ST_TO_ADDR
// end ;
78005: LD_VAR 0 5
78009: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
78010: LD_INT 0
78012: PPUSH
// if not mc_bases [ base ] then
78013: LD_EXP 52
78017: PUSH
78018: LD_VAR 0 1
78022: ARRAY
78023: NOT
78024: IFFALSE 78028
// exit ;
78026: GO 78053
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
78028: LD_ADDR_EXP 89
78032: PUSH
78033: LD_EXP 89
78037: PPUSH
78038: LD_VAR 0 1
78042: PPUSH
78043: LD_VAR 0 2
78047: PPUSH
78048: CALL_OW 1
78052: ST_TO_ADDR
// end ;
78053: LD_VAR 0 3
78057: RET
// export function MC_GetMinesField ( base ) ; begin
78058: LD_INT 0
78060: PPUSH
// result := mc_mines [ base ] ;
78061: LD_ADDR_VAR 0 2
78065: PUSH
78066: LD_EXP 65
78070: PUSH
78071: LD_VAR 0 1
78075: ARRAY
78076: ST_TO_ADDR
// end ;
78077: LD_VAR 0 2
78081: RET
// export function MC_GetProduceList ( base ) ; begin
78082: LD_INT 0
78084: PPUSH
// result := mc_produce [ base ] ;
78085: LD_ADDR_VAR 0 2
78089: PUSH
78090: LD_EXP 73
78094: PUSH
78095: LD_VAR 0 1
78099: ARRAY
78100: ST_TO_ADDR
// end ;
78101: LD_VAR 0 2
78105: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
78106: LD_INT 0
78108: PPUSH
78109: PPUSH
// if not mc_bases then
78110: LD_EXP 52
78114: NOT
78115: IFFALSE 78119
// exit ;
78117: GO 78184
// if mc_bases [ base ] then
78119: LD_EXP 52
78123: PUSH
78124: LD_VAR 0 1
78128: ARRAY
78129: IFFALSE 78184
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
78131: LD_ADDR_VAR 0 3
78135: PUSH
78136: LD_EXP 52
78140: PUSH
78141: LD_VAR 0 1
78145: ARRAY
78146: PPUSH
78147: LD_INT 30
78149: PUSH
78150: LD_VAR 0 2
78154: PUSH
78155: EMPTY
78156: LIST
78157: LIST
78158: PPUSH
78159: CALL_OW 72
78163: ST_TO_ADDR
// if result then
78164: LD_VAR 0 3
78168: IFFALSE 78184
// result := result [ 1 ] ;
78170: LD_ADDR_VAR 0 3
78174: PUSH
78175: LD_VAR 0 3
78179: PUSH
78180: LD_INT 1
78182: ARRAY
78183: ST_TO_ADDR
// end ; end ;
78184: LD_VAR 0 3
78188: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
78189: LD_INT 0
78191: PPUSH
78192: PPUSH
// if not mc_bases then
78193: LD_EXP 52
78197: NOT
78198: IFFALSE 78202
// exit ;
78200: GO 78247
// if mc_bases [ base ] then
78202: LD_EXP 52
78206: PUSH
78207: LD_VAR 0 1
78211: ARRAY
78212: IFFALSE 78247
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
78214: LD_ADDR_VAR 0 3
78218: PUSH
78219: LD_EXP 52
78223: PUSH
78224: LD_VAR 0 1
78228: ARRAY
78229: PPUSH
78230: LD_INT 30
78232: PUSH
78233: LD_VAR 0 2
78237: PUSH
78238: EMPTY
78239: LIST
78240: LIST
78241: PPUSH
78242: CALL_OW 72
78246: ST_TO_ADDR
// end ;
78247: LD_VAR 0 3
78251: RET
// export function MC_SetTame ( base , area ) ; begin
78252: LD_INT 0
78254: PPUSH
// if not mc_bases or not base then
78255: LD_EXP 52
78259: NOT
78260: PUSH
78261: LD_VAR 0 1
78265: NOT
78266: OR
78267: IFFALSE 78271
// exit ;
78269: GO 78296
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
78271: LD_ADDR_EXP 80
78275: PUSH
78276: LD_EXP 80
78280: PPUSH
78281: LD_VAR 0 1
78285: PPUSH
78286: LD_VAR 0 2
78290: PPUSH
78291: CALL_OW 1
78295: ST_TO_ADDR
// end ;
78296: LD_VAR 0 3
78300: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
78301: LD_INT 0
78303: PPUSH
78304: PPUSH
// if not mc_bases or not base then
78305: LD_EXP 52
78309: NOT
78310: PUSH
78311: LD_VAR 0 1
78315: NOT
78316: OR
78317: IFFALSE 78321
// exit ;
78319: GO 78423
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
78321: LD_ADDR_VAR 0 4
78325: PUSH
78326: LD_EXP 52
78330: PUSH
78331: LD_VAR 0 1
78335: ARRAY
78336: PPUSH
78337: LD_INT 30
78339: PUSH
78340: LD_VAR 0 2
78344: PUSH
78345: EMPTY
78346: LIST
78347: LIST
78348: PPUSH
78349: CALL_OW 72
78353: ST_TO_ADDR
// if not tmp then
78354: LD_VAR 0 4
78358: NOT
78359: IFFALSE 78363
// exit ;
78361: GO 78423
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
78363: LD_ADDR_EXP 84
78367: PUSH
78368: LD_EXP 84
78372: PPUSH
78373: LD_VAR 0 1
78377: PPUSH
78378: LD_EXP 84
78382: PUSH
78383: LD_VAR 0 1
78387: ARRAY
78388: PPUSH
78389: LD_EXP 84
78393: PUSH
78394: LD_VAR 0 1
78398: ARRAY
78399: PUSH
78400: LD_INT 1
78402: PLUS
78403: PPUSH
78404: LD_VAR 0 4
78408: PUSH
78409: LD_INT 1
78411: ARRAY
78412: PPUSH
78413: CALL_OW 2
78417: PPUSH
78418: CALL_OW 1
78422: ST_TO_ADDR
// end ;
78423: LD_VAR 0 3
78427: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
78428: LD_INT 0
78430: PPUSH
78431: PPUSH
// if not mc_bases or not base or not kinds then
78432: LD_EXP 52
78436: NOT
78437: PUSH
78438: LD_VAR 0 1
78442: NOT
78443: OR
78444: PUSH
78445: LD_VAR 0 2
78449: NOT
78450: OR
78451: IFFALSE 78455
// exit ;
78453: GO 78516
// for i in kinds do
78455: LD_ADDR_VAR 0 4
78459: PUSH
78460: LD_VAR 0 2
78464: PUSH
78465: FOR_IN
78466: IFFALSE 78514
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
78468: LD_ADDR_EXP 86
78472: PUSH
78473: LD_EXP 86
78477: PPUSH
78478: LD_VAR 0 1
78482: PUSH
78483: LD_EXP 86
78487: PUSH
78488: LD_VAR 0 1
78492: ARRAY
78493: PUSH
78494: LD_INT 1
78496: PLUS
78497: PUSH
78498: EMPTY
78499: LIST
78500: LIST
78501: PPUSH
78502: LD_VAR 0 4
78506: PPUSH
78507: CALL 18182 0 3
78511: ST_TO_ADDR
78512: GO 78465
78514: POP
78515: POP
// end ;
78516: LD_VAR 0 3
78520: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
78521: LD_INT 0
78523: PPUSH
// if not mc_bases or not base or not areas then
78524: LD_EXP 52
78528: NOT
78529: PUSH
78530: LD_VAR 0 1
78534: NOT
78535: OR
78536: PUSH
78537: LD_VAR 0 2
78541: NOT
78542: OR
78543: IFFALSE 78547
// exit ;
78545: GO 78572
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
78547: LD_ADDR_EXP 70
78551: PUSH
78552: LD_EXP 70
78556: PPUSH
78557: LD_VAR 0 1
78561: PPUSH
78562: LD_VAR 0 2
78566: PPUSH
78567: CALL_OW 1
78571: ST_TO_ADDR
// end ;
78572: LD_VAR 0 3
78576: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
78577: LD_INT 0
78579: PPUSH
// if not mc_bases or not base or not teleports_exit then
78580: LD_EXP 52
78584: NOT
78585: PUSH
78586: LD_VAR 0 1
78590: NOT
78591: OR
78592: PUSH
78593: LD_VAR 0 2
78597: NOT
78598: OR
78599: IFFALSE 78603
// exit ;
78601: GO 78628
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
78603: LD_ADDR_EXP 87
78607: PUSH
78608: LD_EXP 87
78612: PPUSH
78613: LD_VAR 0 1
78617: PPUSH
78618: LD_VAR 0 2
78622: PPUSH
78623: CALL_OW 1
78627: ST_TO_ADDR
// end ;
78628: LD_VAR 0 3
78632: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
78633: LD_INT 0
78635: PPUSH
78636: PPUSH
78637: PPUSH
// if not mc_bases or not base or not ext_list then
78638: LD_EXP 52
78642: NOT
78643: PUSH
78644: LD_VAR 0 1
78648: NOT
78649: OR
78650: PUSH
78651: LD_VAR 0 5
78655: NOT
78656: OR
78657: IFFALSE 78661
// exit ;
78659: GO 78834
// tmp := GetFacExtXYD ( x , y , d ) ;
78661: LD_ADDR_VAR 0 8
78665: PUSH
78666: LD_VAR 0 2
78670: PPUSH
78671: LD_VAR 0 3
78675: PPUSH
78676: LD_VAR 0 4
78680: PPUSH
78681: CALL 51560 0 3
78685: ST_TO_ADDR
// if not tmp then
78686: LD_VAR 0 8
78690: NOT
78691: IFFALSE 78695
// exit ;
78693: GO 78834
// for i in tmp do
78695: LD_ADDR_VAR 0 7
78699: PUSH
78700: LD_VAR 0 8
78704: PUSH
78705: FOR_IN
78706: IFFALSE 78832
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
78708: LD_ADDR_EXP 57
78712: PUSH
78713: LD_EXP 57
78717: PPUSH
78718: LD_VAR 0 1
78722: PPUSH
78723: LD_EXP 57
78727: PUSH
78728: LD_VAR 0 1
78732: ARRAY
78733: PPUSH
78734: LD_EXP 57
78738: PUSH
78739: LD_VAR 0 1
78743: ARRAY
78744: PUSH
78745: LD_INT 1
78747: PLUS
78748: PPUSH
78749: LD_VAR 0 5
78753: PUSH
78754: LD_INT 1
78756: ARRAY
78757: PUSH
78758: LD_VAR 0 7
78762: PUSH
78763: LD_INT 1
78765: ARRAY
78766: PUSH
78767: LD_VAR 0 7
78771: PUSH
78772: LD_INT 2
78774: ARRAY
78775: PUSH
78776: LD_VAR 0 7
78780: PUSH
78781: LD_INT 3
78783: ARRAY
78784: PUSH
78785: EMPTY
78786: LIST
78787: LIST
78788: LIST
78789: LIST
78790: PPUSH
78791: CALL_OW 2
78795: PPUSH
78796: CALL_OW 1
78800: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
78801: LD_ADDR_VAR 0 5
78805: PUSH
78806: LD_VAR 0 5
78810: PPUSH
78811: LD_INT 1
78813: PPUSH
78814: CALL_OW 3
78818: ST_TO_ADDR
// if not ext_list then
78819: LD_VAR 0 5
78823: NOT
78824: IFFALSE 78830
// exit ;
78826: POP
78827: POP
78828: GO 78834
// end ;
78830: GO 78705
78832: POP
78833: POP
// end ;
78834: LD_VAR 0 6
78838: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
78839: LD_INT 0
78841: PPUSH
// if not mc_bases or not base or not weapon_list then
78842: LD_EXP 52
78846: NOT
78847: PUSH
78848: LD_VAR 0 1
78852: NOT
78853: OR
78854: PUSH
78855: LD_VAR 0 2
78859: NOT
78860: OR
78861: IFFALSE 78865
// exit ;
78863: GO 78890
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
78865: LD_ADDR_EXP 91
78869: PUSH
78870: LD_EXP 91
78874: PPUSH
78875: LD_VAR 0 1
78879: PPUSH
78880: LD_VAR 0 2
78884: PPUSH
78885: CALL_OW 1
78889: ST_TO_ADDR
// end ;
78890: LD_VAR 0 3
78894: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
78895: LD_INT 0
78897: PPUSH
// if not mc_bases or not base or not tech_list then
78898: LD_EXP 52
78902: NOT
78903: PUSH
78904: LD_VAR 0 1
78908: NOT
78909: OR
78910: PUSH
78911: LD_VAR 0 2
78915: NOT
78916: OR
78917: IFFALSE 78921
// exit ;
78919: GO 78946
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
78921: LD_ADDR_EXP 79
78925: PUSH
78926: LD_EXP 79
78930: PPUSH
78931: LD_VAR 0 1
78935: PPUSH
78936: LD_VAR 0 2
78940: PPUSH
78941: CALL_OW 1
78945: ST_TO_ADDR
// end ;
78946: LD_VAR 0 3
78950: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
78951: LD_INT 0
78953: PPUSH
// if not mc_bases or not parking_area or not base then
78954: LD_EXP 52
78958: NOT
78959: PUSH
78960: LD_VAR 0 2
78964: NOT
78965: OR
78966: PUSH
78967: LD_VAR 0 1
78971: NOT
78972: OR
78973: IFFALSE 78977
// exit ;
78975: GO 79002
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
78977: LD_ADDR_EXP 76
78981: PUSH
78982: LD_EXP 76
78986: PPUSH
78987: LD_VAR 0 1
78991: PPUSH
78992: LD_VAR 0 2
78996: PPUSH
78997: CALL_OW 1
79001: ST_TO_ADDR
// end ;
79002: LD_VAR 0 3
79006: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
79007: LD_INT 0
79009: PPUSH
// if not mc_bases or not base or not scan_area then
79010: LD_EXP 52
79014: NOT
79015: PUSH
79016: LD_VAR 0 1
79020: NOT
79021: OR
79022: PUSH
79023: LD_VAR 0 2
79027: NOT
79028: OR
79029: IFFALSE 79033
// exit ;
79031: GO 79058
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
79033: LD_ADDR_EXP 77
79037: PUSH
79038: LD_EXP 77
79042: PPUSH
79043: LD_VAR 0 1
79047: PPUSH
79048: LD_VAR 0 2
79052: PPUSH
79053: CALL_OW 1
79057: ST_TO_ADDR
// end ;
79058: LD_VAR 0 3
79062: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
79063: LD_INT 0
79065: PPUSH
79066: PPUSH
// if not mc_bases or not base then
79067: LD_EXP 52
79071: NOT
79072: PUSH
79073: LD_VAR 0 1
79077: NOT
79078: OR
79079: IFFALSE 79083
// exit ;
79081: GO 79147
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
79083: LD_ADDR_VAR 0 3
79087: PUSH
79088: LD_INT 1
79090: PUSH
79091: LD_INT 2
79093: PUSH
79094: LD_INT 3
79096: PUSH
79097: LD_INT 4
79099: PUSH
79100: LD_INT 11
79102: PUSH
79103: EMPTY
79104: LIST
79105: LIST
79106: LIST
79107: LIST
79108: LIST
79109: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
79110: LD_ADDR_EXP 79
79114: PUSH
79115: LD_EXP 79
79119: PPUSH
79120: LD_VAR 0 1
79124: PPUSH
79125: LD_EXP 79
79129: PUSH
79130: LD_VAR 0 1
79134: ARRAY
79135: PUSH
79136: LD_VAR 0 3
79140: DIFF
79141: PPUSH
79142: CALL_OW 1
79146: ST_TO_ADDR
// end ;
79147: LD_VAR 0 2
79151: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
79152: LD_INT 0
79154: PPUSH
// result := mc_vehicles [ base ] ;
79155: LD_ADDR_VAR 0 3
79159: PUSH
79160: LD_EXP 71
79164: PUSH
79165: LD_VAR 0 1
79169: ARRAY
79170: ST_TO_ADDR
// if onlyCombat then
79171: LD_VAR 0 2
79175: IFFALSE 79340
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
79177: LD_ADDR_VAR 0 3
79181: PUSH
79182: LD_VAR 0 3
79186: PUSH
79187: LD_VAR 0 3
79191: PPUSH
79192: LD_INT 2
79194: PUSH
79195: LD_INT 34
79197: PUSH
79198: LD_INT 12
79200: PUSH
79201: EMPTY
79202: LIST
79203: LIST
79204: PUSH
79205: LD_INT 34
79207: PUSH
79208: LD_INT 51
79210: PUSH
79211: EMPTY
79212: LIST
79213: LIST
79214: PUSH
79215: LD_INT 34
79217: PUSH
79218: LD_EXP 46
79222: PUSH
79223: EMPTY
79224: LIST
79225: LIST
79226: PUSH
79227: LD_INT 34
79229: PUSH
79230: LD_INT 32
79232: PUSH
79233: EMPTY
79234: LIST
79235: LIST
79236: PUSH
79237: LD_INT 34
79239: PUSH
79240: LD_INT 13
79242: PUSH
79243: EMPTY
79244: LIST
79245: LIST
79246: PUSH
79247: LD_INT 34
79249: PUSH
79250: LD_INT 52
79252: PUSH
79253: EMPTY
79254: LIST
79255: LIST
79256: PUSH
79257: LD_INT 34
79259: PUSH
79260: LD_INT 14
79262: PUSH
79263: EMPTY
79264: LIST
79265: LIST
79266: PUSH
79267: LD_INT 34
79269: PUSH
79270: LD_INT 53
79272: PUSH
79273: EMPTY
79274: LIST
79275: LIST
79276: PUSH
79277: LD_INT 34
79279: PUSH
79280: LD_EXP 45
79284: PUSH
79285: EMPTY
79286: LIST
79287: LIST
79288: PUSH
79289: LD_INT 34
79291: PUSH
79292: LD_INT 31
79294: PUSH
79295: EMPTY
79296: LIST
79297: LIST
79298: PUSH
79299: LD_INT 34
79301: PUSH
79302: LD_INT 48
79304: PUSH
79305: EMPTY
79306: LIST
79307: LIST
79308: PUSH
79309: LD_INT 34
79311: PUSH
79312: LD_INT 8
79314: PUSH
79315: EMPTY
79316: LIST
79317: LIST
79318: PUSH
79319: EMPTY
79320: LIST
79321: LIST
79322: LIST
79323: LIST
79324: LIST
79325: LIST
79326: LIST
79327: LIST
79328: LIST
79329: LIST
79330: LIST
79331: LIST
79332: LIST
79333: PPUSH
79334: CALL_OW 72
79338: DIFF
79339: ST_TO_ADDR
// end ; end_of_file
79340: LD_VAR 0 3
79344: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
79345: LD_INT 0
79347: PPUSH
79348: PPUSH
79349: PPUSH
// if not mc_bases or not skirmish then
79350: LD_EXP 52
79354: NOT
79355: PUSH
79356: LD_EXP 50
79360: NOT
79361: OR
79362: IFFALSE 79366
// exit ;
79364: GO 79531
// for i = 1 to mc_bases do
79366: LD_ADDR_VAR 0 4
79370: PUSH
79371: DOUBLE
79372: LD_INT 1
79374: DEC
79375: ST_TO_ADDR
79376: LD_EXP 52
79380: PUSH
79381: FOR_TO
79382: IFFALSE 79529
// begin if sci in mc_bases [ i ] then
79384: LD_VAR 0 2
79388: PUSH
79389: LD_EXP 52
79393: PUSH
79394: LD_VAR 0 4
79398: ARRAY
79399: IN
79400: IFFALSE 79527
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
79402: LD_ADDR_EXP 81
79406: PUSH
79407: LD_EXP 81
79411: PPUSH
79412: LD_VAR 0 4
79416: PUSH
79417: LD_EXP 81
79421: PUSH
79422: LD_VAR 0 4
79426: ARRAY
79427: PUSH
79428: LD_INT 1
79430: PLUS
79431: PUSH
79432: EMPTY
79433: LIST
79434: LIST
79435: PPUSH
79436: LD_VAR 0 1
79440: PPUSH
79441: CALL 18182 0 3
79445: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
79446: LD_ADDR_VAR 0 5
79450: PUSH
79451: LD_EXP 52
79455: PUSH
79456: LD_VAR 0 4
79460: ARRAY
79461: PPUSH
79462: LD_INT 2
79464: PUSH
79465: LD_INT 30
79467: PUSH
79468: LD_INT 0
79470: PUSH
79471: EMPTY
79472: LIST
79473: LIST
79474: PUSH
79475: LD_INT 30
79477: PUSH
79478: LD_INT 1
79480: PUSH
79481: EMPTY
79482: LIST
79483: LIST
79484: PUSH
79485: EMPTY
79486: LIST
79487: LIST
79488: LIST
79489: PPUSH
79490: CALL_OW 72
79494: PPUSH
79495: LD_VAR 0 1
79499: PPUSH
79500: CALL_OW 74
79504: ST_TO_ADDR
// if tmp then
79505: LD_VAR 0 5
79509: IFFALSE 79525
// ComStandNearbyBuilding ( ape , tmp ) ;
79511: LD_VAR 0 1
79515: PPUSH
79516: LD_VAR 0 5
79520: PPUSH
79521: CALL 12534 0 2
// break ;
79525: GO 79529
// end ; end ;
79527: GO 79381
79529: POP
79530: POP
// end ;
79531: LD_VAR 0 3
79535: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
79536: LD_INT 0
79538: PPUSH
79539: PPUSH
79540: PPUSH
// if not mc_bases or not skirmish then
79541: LD_EXP 52
79545: NOT
79546: PUSH
79547: LD_EXP 50
79551: NOT
79552: OR
79553: IFFALSE 79557
// exit ;
79555: GO 79646
// for i = 1 to mc_bases do
79557: LD_ADDR_VAR 0 4
79561: PUSH
79562: DOUBLE
79563: LD_INT 1
79565: DEC
79566: ST_TO_ADDR
79567: LD_EXP 52
79571: PUSH
79572: FOR_TO
79573: IFFALSE 79644
// begin if building in mc_busy_turret_list [ i ] then
79575: LD_VAR 0 1
79579: PUSH
79580: LD_EXP 62
79584: PUSH
79585: LD_VAR 0 4
79589: ARRAY
79590: IN
79591: IFFALSE 79642
// begin tmp := mc_busy_turret_list [ i ] diff building ;
79593: LD_ADDR_VAR 0 5
79597: PUSH
79598: LD_EXP 62
79602: PUSH
79603: LD_VAR 0 4
79607: ARRAY
79608: PUSH
79609: LD_VAR 0 1
79613: DIFF
79614: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
79615: LD_ADDR_EXP 62
79619: PUSH
79620: LD_EXP 62
79624: PPUSH
79625: LD_VAR 0 4
79629: PPUSH
79630: LD_VAR 0 5
79634: PPUSH
79635: CALL_OW 1
79639: ST_TO_ADDR
// break ;
79640: GO 79644
// end ; end ;
79642: GO 79572
79644: POP
79645: POP
// end ;
79646: LD_VAR 0 3
79650: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
79651: LD_INT 0
79653: PPUSH
79654: PPUSH
79655: PPUSH
// if not mc_bases or not skirmish then
79656: LD_EXP 52
79660: NOT
79661: PUSH
79662: LD_EXP 50
79666: NOT
79667: OR
79668: IFFALSE 79672
// exit ;
79670: GO 79871
// for i = 1 to mc_bases do
79672: LD_ADDR_VAR 0 5
79676: PUSH
79677: DOUBLE
79678: LD_INT 1
79680: DEC
79681: ST_TO_ADDR
79682: LD_EXP 52
79686: PUSH
79687: FOR_TO
79688: IFFALSE 79869
// if building in mc_bases [ i ] then
79690: LD_VAR 0 1
79694: PUSH
79695: LD_EXP 52
79699: PUSH
79700: LD_VAR 0 5
79704: ARRAY
79705: IN
79706: IFFALSE 79867
// begin tmp := mc_bases [ i ] diff building ;
79708: LD_ADDR_VAR 0 6
79712: PUSH
79713: LD_EXP 52
79717: PUSH
79718: LD_VAR 0 5
79722: ARRAY
79723: PUSH
79724: LD_VAR 0 1
79728: DIFF
79729: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
79730: LD_ADDR_EXP 52
79734: PUSH
79735: LD_EXP 52
79739: PPUSH
79740: LD_VAR 0 5
79744: PPUSH
79745: LD_VAR 0 6
79749: PPUSH
79750: CALL_OW 1
79754: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
79755: LD_VAR 0 1
79759: PUSH
79760: LD_EXP 60
79764: PUSH
79765: LD_VAR 0 5
79769: ARRAY
79770: IN
79771: IFFALSE 79810
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
79773: LD_ADDR_EXP 60
79777: PUSH
79778: LD_EXP 60
79782: PPUSH
79783: LD_VAR 0 5
79787: PPUSH
79788: LD_EXP 60
79792: PUSH
79793: LD_VAR 0 5
79797: ARRAY
79798: PUSH
79799: LD_VAR 0 1
79803: DIFF
79804: PPUSH
79805: CALL_OW 1
79809: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
79810: LD_VAR 0 1
79814: PUSH
79815: LD_EXP 61
79819: PUSH
79820: LD_VAR 0 5
79824: ARRAY
79825: IN
79826: IFFALSE 79865
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
79828: LD_ADDR_EXP 61
79832: PUSH
79833: LD_EXP 61
79837: PPUSH
79838: LD_VAR 0 5
79842: PPUSH
79843: LD_EXP 61
79847: PUSH
79848: LD_VAR 0 5
79852: ARRAY
79853: PUSH
79854: LD_VAR 0 1
79858: DIFF
79859: PPUSH
79860: CALL_OW 1
79864: ST_TO_ADDR
// break ;
79865: GO 79869
// end ;
79867: GO 79687
79869: POP
79870: POP
// end ;
79871: LD_VAR 0 4
79875: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
79876: LD_INT 0
79878: PPUSH
79879: PPUSH
79880: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
79881: LD_EXP 52
79885: NOT
79886: PUSH
79887: LD_EXP 50
79891: NOT
79892: OR
79893: PUSH
79894: LD_VAR 0 3
79898: PUSH
79899: LD_EXP 78
79903: IN
79904: NOT
79905: OR
79906: IFFALSE 79910
// exit ;
79908: GO 80033
// for i = 1 to mc_vehicles do
79910: LD_ADDR_VAR 0 6
79914: PUSH
79915: DOUBLE
79916: LD_INT 1
79918: DEC
79919: ST_TO_ADDR
79920: LD_EXP 71
79924: PUSH
79925: FOR_TO
79926: IFFALSE 80031
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
79928: LD_VAR 0 2
79932: PUSH
79933: LD_EXP 71
79937: PUSH
79938: LD_VAR 0 6
79942: ARRAY
79943: IN
79944: PUSH
79945: LD_VAR 0 1
79949: PUSH
79950: LD_EXP 71
79954: PUSH
79955: LD_VAR 0 6
79959: ARRAY
79960: IN
79961: OR
79962: IFFALSE 80029
// begin tmp := mc_vehicles [ i ] diff old ;
79964: LD_ADDR_VAR 0 7
79968: PUSH
79969: LD_EXP 71
79973: PUSH
79974: LD_VAR 0 6
79978: ARRAY
79979: PUSH
79980: LD_VAR 0 2
79984: DIFF
79985: ST_TO_ADDR
// tmp := tmp diff new ;
79986: LD_ADDR_VAR 0 7
79990: PUSH
79991: LD_VAR 0 7
79995: PUSH
79996: LD_VAR 0 1
80000: DIFF
80001: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
80002: LD_ADDR_EXP 71
80006: PUSH
80007: LD_EXP 71
80011: PPUSH
80012: LD_VAR 0 6
80016: PPUSH
80017: LD_VAR 0 7
80021: PPUSH
80022: CALL_OW 1
80026: ST_TO_ADDR
// break ;
80027: GO 80031
// end ;
80029: GO 79925
80031: POP
80032: POP
// end ;
80033: LD_VAR 0 5
80037: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
80038: LD_INT 0
80040: PPUSH
80041: PPUSH
80042: PPUSH
80043: PPUSH
// if not mc_bases or not skirmish then
80044: LD_EXP 52
80048: NOT
80049: PUSH
80050: LD_EXP 50
80054: NOT
80055: OR
80056: IFFALSE 80060
// exit ;
80058: GO 80437
// side := GetSide ( vehicle ) ;
80060: LD_ADDR_VAR 0 5
80064: PUSH
80065: LD_VAR 0 1
80069: PPUSH
80070: CALL_OW 255
80074: ST_TO_ADDR
// for i = 1 to mc_bases do
80075: LD_ADDR_VAR 0 4
80079: PUSH
80080: DOUBLE
80081: LD_INT 1
80083: DEC
80084: ST_TO_ADDR
80085: LD_EXP 52
80089: PUSH
80090: FOR_TO
80091: IFFALSE 80435
// begin if factory in mc_bases [ i ] then
80093: LD_VAR 0 2
80097: PUSH
80098: LD_EXP 52
80102: PUSH
80103: LD_VAR 0 4
80107: ARRAY
80108: IN
80109: IFFALSE 80433
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
80111: LD_EXP 74
80115: PUSH
80116: LD_VAR 0 4
80120: ARRAY
80121: PUSH
80122: LD_EXP 63
80126: PUSH
80127: LD_VAR 0 4
80131: ARRAY
80132: LESS
80133: PUSH
80134: LD_VAR 0 1
80138: PPUSH
80139: CALL_OW 264
80143: PUSH
80144: LD_INT 31
80146: PUSH
80147: LD_INT 32
80149: PUSH
80150: LD_INT 51
80152: PUSH
80153: LD_EXP 46
80157: PUSH
80158: LD_INT 12
80160: PUSH
80161: LD_INT 30
80163: PUSH
80164: LD_EXP 45
80168: PUSH
80169: LD_INT 11
80171: PUSH
80172: LD_INT 53
80174: PUSH
80175: LD_INT 14
80177: PUSH
80178: LD_EXP 49
80182: PUSH
80183: LD_INT 29
80185: PUSH
80186: LD_EXP 47
80190: PUSH
80191: LD_INT 13
80193: PUSH
80194: LD_INT 52
80196: PUSH
80197: LD_INT 48
80199: PUSH
80200: LD_INT 8
80202: PUSH
80203: EMPTY
80204: LIST
80205: LIST
80206: LIST
80207: LIST
80208: LIST
80209: LIST
80210: LIST
80211: LIST
80212: LIST
80213: LIST
80214: LIST
80215: LIST
80216: LIST
80217: LIST
80218: LIST
80219: LIST
80220: LIST
80221: IN
80222: NOT
80223: AND
80224: IFFALSE 80272
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
80226: LD_ADDR_EXP 74
80230: PUSH
80231: LD_EXP 74
80235: PPUSH
80236: LD_VAR 0 4
80240: PUSH
80241: LD_EXP 74
80245: PUSH
80246: LD_VAR 0 4
80250: ARRAY
80251: PUSH
80252: LD_INT 1
80254: PLUS
80255: PUSH
80256: EMPTY
80257: LIST
80258: LIST
80259: PPUSH
80260: LD_VAR 0 1
80264: PPUSH
80265: CALL 18182 0 3
80269: ST_TO_ADDR
80270: GO 80316
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
80272: LD_ADDR_EXP 71
80276: PUSH
80277: LD_EXP 71
80281: PPUSH
80282: LD_VAR 0 4
80286: PUSH
80287: LD_EXP 71
80291: PUSH
80292: LD_VAR 0 4
80296: ARRAY
80297: PUSH
80298: LD_INT 1
80300: PLUS
80301: PUSH
80302: EMPTY
80303: LIST
80304: LIST
80305: PPUSH
80306: LD_VAR 0 1
80310: PPUSH
80311: CALL 18182 0 3
80315: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
80316: LD_VAR 0 1
80320: PPUSH
80321: CALL_OW 263
80325: PUSH
80326: LD_INT 2
80328: EQUAL
80329: IFFALSE 80349
// begin repeat wait ( 0 0$1 ) ;
80331: LD_INT 35
80333: PPUSH
80334: CALL_OW 67
// until IsControledBy ( vehicle ) ;
80338: LD_VAR 0 1
80342: PPUSH
80343: CALL_OW 312
80347: IFFALSE 80331
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
80349: LD_VAR 0 1
80353: PPUSH
80354: LD_EXP 76
80358: PUSH
80359: LD_VAR 0 4
80363: ARRAY
80364: PPUSH
80365: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
80369: LD_VAR 0 1
80373: PPUSH
80374: CALL_OW 263
80378: PUSH
80379: LD_INT 1
80381: NONEQUAL
80382: IFFALSE 80386
// break ;
80384: GO 80435
// repeat wait ( 0 0$1 ) ;
80386: LD_INT 35
80388: PPUSH
80389: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
80393: LD_VAR 0 1
80397: PPUSH
80398: LD_EXP 76
80402: PUSH
80403: LD_VAR 0 4
80407: ARRAY
80408: PPUSH
80409: CALL_OW 308
80413: IFFALSE 80386
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
80415: LD_VAR 0 1
80419: PPUSH
80420: CALL_OW 311
80424: PPUSH
80425: CALL_OW 121
// exit ;
80429: POP
80430: POP
80431: GO 80437
// end ; end ;
80433: GO 80090
80435: POP
80436: POP
// end ;
80437: LD_VAR 0 3
80441: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
80442: LD_INT 0
80444: PPUSH
80445: PPUSH
80446: PPUSH
80447: PPUSH
// if not mc_bases or not skirmish then
80448: LD_EXP 52
80452: NOT
80453: PUSH
80454: LD_EXP 50
80458: NOT
80459: OR
80460: IFFALSE 80464
// exit ;
80462: GO 80817
// repeat wait ( 0 0$1 ) ;
80464: LD_INT 35
80466: PPUSH
80467: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
80471: LD_VAR 0 2
80475: PPUSH
80476: LD_VAR 0 3
80480: PPUSH
80481: CALL_OW 284
80485: IFFALSE 80464
// if GetResourceTypeXY ( x , y ) = mat_artefact then
80487: LD_VAR 0 2
80491: PPUSH
80492: LD_VAR 0 3
80496: PPUSH
80497: CALL_OW 283
80501: PUSH
80502: LD_INT 4
80504: EQUAL
80505: IFFALSE 80509
// exit ;
80507: GO 80817
// for i = 1 to mc_bases do
80509: LD_ADDR_VAR 0 7
80513: PUSH
80514: DOUBLE
80515: LD_INT 1
80517: DEC
80518: ST_TO_ADDR
80519: LD_EXP 52
80523: PUSH
80524: FOR_TO
80525: IFFALSE 80815
// begin if mc_crates_area [ i ] then
80527: LD_EXP 70
80531: PUSH
80532: LD_VAR 0 7
80536: ARRAY
80537: IFFALSE 80648
// for j in mc_crates_area [ i ] do
80539: LD_ADDR_VAR 0 8
80543: PUSH
80544: LD_EXP 70
80548: PUSH
80549: LD_VAR 0 7
80553: ARRAY
80554: PUSH
80555: FOR_IN
80556: IFFALSE 80646
// if InArea ( x , y , j ) then
80558: LD_VAR 0 2
80562: PPUSH
80563: LD_VAR 0 3
80567: PPUSH
80568: LD_VAR 0 8
80572: PPUSH
80573: CALL_OW 309
80577: IFFALSE 80644
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
80579: LD_ADDR_EXP 68
80583: PUSH
80584: LD_EXP 68
80588: PPUSH
80589: LD_VAR 0 7
80593: PUSH
80594: LD_EXP 68
80598: PUSH
80599: LD_VAR 0 7
80603: ARRAY
80604: PUSH
80605: LD_INT 1
80607: PLUS
80608: PUSH
80609: EMPTY
80610: LIST
80611: LIST
80612: PPUSH
80613: LD_VAR 0 4
80617: PUSH
80618: LD_VAR 0 2
80622: PUSH
80623: LD_VAR 0 3
80627: PUSH
80628: EMPTY
80629: LIST
80630: LIST
80631: LIST
80632: PPUSH
80633: CALL 18182 0 3
80637: ST_TO_ADDR
// exit ;
80638: POP
80639: POP
80640: POP
80641: POP
80642: GO 80817
// end ;
80644: GO 80555
80646: POP
80647: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80648: LD_ADDR_VAR 0 9
80652: PUSH
80653: LD_EXP 52
80657: PUSH
80658: LD_VAR 0 7
80662: ARRAY
80663: PPUSH
80664: LD_INT 2
80666: PUSH
80667: LD_INT 30
80669: PUSH
80670: LD_INT 0
80672: PUSH
80673: EMPTY
80674: LIST
80675: LIST
80676: PUSH
80677: LD_INT 30
80679: PUSH
80680: LD_INT 1
80682: PUSH
80683: EMPTY
80684: LIST
80685: LIST
80686: PUSH
80687: EMPTY
80688: LIST
80689: LIST
80690: LIST
80691: PPUSH
80692: CALL_OW 72
80696: ST_TO_ADDR
// if not depot then
80697: LD_VAR 0 9
80701: NOT
80702: IFFALSE 80706
// continue ;
80704: GO 80524
// for j in depot do
80706: LD_ADDR_VAR 0 8
80710: PUSH
80711: LD_VAR 0 9
80715: PUSH
80716: FOR_IN
80717: IFFALSE 80811
// if GetDistUnitXY ( j , x , y ) < 30 then
80719: LD_VAR 0 8
80723: PPUSH
80724: LD_VAR 0 2
80728: PPUSH
80729: LD_VAR 0 3
80733: PPUSH
80734: CALL_OW 297
80738: PUSH
80739: LD_INT 30
80741: LESS
80742: IFFALSE 80809
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
80744: LD_ADDR_EXP 68
80748: PUSH
80749: LD_EXP 68
80753: PPUSH
80754: LD_VAR 0 7
80758: PUSH
80759: LD_EXP 68
80763: PUSH
80764: LD_VAR 0 7
80768: ARRAY
80769: PUSH
80770: LD_INT 1
80772: PLUS
80773: PUSH
80774: EMPTY
80775: LIST
80776: LIST
80777: PPUSH
80778: LD_VAR 0 4
80782: PUSH
80783: LD_VAR 0 2
80787: PUSH
80788: LD_VAR 0 3
80792: PUSH
80793: EMPTY
80794: LIST
80795: LIST
80796: LIST
80797: PPUSH
80798: CALL 18182 0 3
80802: ST_TO_ADDR
// exit ;
80803: POP
80804: POP
80805: POP
80806: POP
80807: GO 80817
// end ;
80809: GO 80716
80811: POP
80812: POP
// end ;
80813: GO 80524
80815: POP
80816: POP
// end ;
80817: LD_VAR 0 6
80821: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
80822: LD_INT 0
80824: PPUSH
80825: PPUSH
80826: PPUSH
80827: PPUSH
// if not mc_bases or not skirmish then
80828: LD_EXP 52
80832: NOT
80833: PUSH
80834: LD_EXP 50
80838: NOT
80839: OR
80840: IFFALSE 80844
// exit ;
80842: GO 81121
// side := GetSide ( lab ) ;
80844: LD_ADDR_VAR 0 4
80848: PUSH
80849: LD_VAR 0 2
80853: PPUSH
80854: CALL_OW 255
80858: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
80859: LD_VAR 0 4
80863: PUSH
80864: LD_EXP 78
80868: IN
80869: NOT
80870: PUSH
80871: LD_EXP 79
80875: NOT
80876: OR
80877: PUSH
80878: LD_EXP 52
80882: NOT
80883: OR
80884: IFFALSE 80888
// exit ;
80886: GO 81121
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
80888: LD_ADDR_EXP 79
80892: PUSH
80893: LD_EXP 79
80897: PPUSH
80898: LD_VAR 0 4
80902: PPUSH
80903: LD_EXP 79
80907: PUSH
80908: LD_VAR 0 4
80912: ARRAY
80913: PUSH
80914: LD_VAR 0 1
80918: DIFF
80919: PPUSH
80920: CALL_OW 1
80924: ST_TO_ADDR
// for i = 1 to mc_bases do
80925: LD_ADDR_VAR 0 5
80929: PUSH
80930: DOUBLE
80931: LD_INT 1
80933: DEC
80934: ST_TO_ADDR
80935: LD_EXP 52
80939: PUSH
80940: FOR_TO
80941: IFFALSE 81119
// begin if lab in mc_bases [ i ] then
80943: LD_VAR 0 2
80947: PUSH
80948: LD_EXP 52
80952: PUSH
80953: LD_VAR 0 5
80957: ARRAY
80958: IN
80959: IFFALSE 81117
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
80961: LD_VAR 0 1
80965: PUSH
80966: LD_INT 11
80968: PUSH
80969: LD_INT 4
80971: PUSH
80972: LD_INT 3
80974: PUSH
80975: LD_INT 2
80977: PUSH
80978: EMPTY
80979: LIST
80980: LIST
80981: LIST
80982: LIST
80983: IN
80984: PUSH
80985: LD_EXP 82
80989: PUSH
80990: LD_VAR 0 5
80994: ARRAY
80995: AND
80996: IFFALSE 81117
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
80998: LD_ADDR_VAR 0 6
81002: PUSH
81003: LD_EXP 82
81007: PUSH
81008: LD_VAR 0 5
81012: ARRAY
81013: PUSH
81014: LD_INT 1
81016: ARRAY
81017: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
81018: LD_ADDR_EXP 82
81022: PUSH
81023: LD_EXP 82
81027: PPUSH
81028: LD_VAR 0 5
81032: PPUSH
81033: EMPTY
81034: PPUSH
81035: CALL_OW 1
81039: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
81040: LD_VAR 0 6
81044: PPUSH
81045: LD_INT 0
81047: PPUSH
81048: CALL_OW 109
// ComExitBuilding ( tmp ) ;
81052: LD_VAR 0 6
81056: PPUSH
81057: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
81061: LD_ADDR_EXP 81
81065: PUSH
81066: LD_EXP 81
81070: PPUSH
81071: LD_VAR 0 5
81075: PPUSH
81076: LD_EXP 81
81080: PUSH
81081: LD_VAR 0 5
81085: ARRAY
81086: PPUSH
81087: LD_INT 1
81089: PPUSH
81090: LD_VAR 0 6
81094: PPUSH
81095: CALL_OW 2
81099: PPUSH
81100: CALL_OW 1
81104: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
81105: LD_VAR 0 5
81109: PPUSH
81110: LD_INT 112
81112: PPUSH
81113: CALL 58229 0 2
// end ; end ; end ;
81117: GO 80940
81119: POP
81120: POP
// end ;
81121: LD_VAR 0 3
81125: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
81126: LD_INT 0
81128: PPUSH
81129: PPUSH
81130: PPUSH
81131: PPUSH
81132: PPUSH
81133: PPUSH
81134: PPUSH
81135: PPUSH
// if not mc_bases or not skirmish then
81136: LD_EXP 52
81140: NOT
81141: PUSH
81142: LD_EXP 50
81146: NOT
81147: OR
81148: IFFALSE 81152
// exit ;
81150: GO 82389
// for i = 1 to mc_bases do
81152: LD_ADDR_VAR 0 3
81156: PUSH
81157: DOUBLE
81158: LD_INT 1
81160: DEC
81161: ST_TO_ADDR
81162: LD_EXP 52
81166: PUSH
81167: FOR_TO
81168: IFFALSE 82387
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
81170: LD_VAR 0 1
81174: PUSH
81175: LD_EXP 52
81179: PUSH
81180: LD_VAR 0 3
81184: ARRAY
81185: IN
81186: PUSH
81187: LD_VAR 0 1
81191: PUSH
81192: LD_EXP 59
81196: PUSH
81197: LD_VAR 0 3
81201: ARRAY
81202: IN
81203: OR
81204: PUSH
81205: LD_VAR 0 1
81209: PUSH
81210: LD_EXP 74
81214: PUSH
81215: LD_VAR 0 3
81219: ARRAY
81220: IN
81221: OR
81222: PUSH
81223: LD_VAR 0 1
81227: PUSH
81228: LD_EXP 71
81232: PUSH
81233: LD_VAR 0 3
81237: ARRAY
81238: IN
81239: OR
81240: PUSH
81241: LD_VAR 0 1
81245: PUSH
81246: LD_EXP 81
81250: PUSH
81251: LD_VAR 0 3
81255: ARRAY
81256: IN
81257: OR
81258: PUSH
81259: LD_VAR 0 1
81263: PUSH
81264: LD_EXP 82
81268: PUSH
81269: LD_VAR 0 3
81273: ARRAY
81274: IN
81275: OR
81276: IFFALSE 82385
// begin if un in mc_ape [ i ] then
81278: LD_VAR 0 1
81282: PUSH
81283: LD_EXP 81
81287: PUSH
81288: LD_VAR 0 3
81292: ARRAY
81293: IN
81294: IFFALSE 81333
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
81296: LD_ADDR_EXP 81
81300: PUSH
81301: LD_EXP 81
81305: PPUSH
81306: LD_VAR 0 3
81310: PPUSH
81311: LD_EXP 81
81315: PUSH
81316: LD_VAR 0 3
81320: ARRAY
81321: PUSH
81322: LD_VAR 0 1
81326: DIFF
81327: PPUSH
81328: CALL_OW 1
81332: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
81333: LD_VAR 0 1
81337: PUSH
81338: LD_EXP 82
81342: PUSH
81343: LD_VAR 0 3
81347: ARRAY
81348: IN
81349: IFFALSE 81373
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
81351: LD_ADDR_EXP 82
81355: PUSH
81356: LD_EXP 82
81360: PPUSH
81361: LD_VAR 0 3
81365: PPUSH
81366: EMPTY
81367: PPUSH
81368: CALL_OW 1
81372: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane ] ) then
81373: LD_VAR 0 1
81377: PPUSH
81378: CALL_OW 247
81382: PUSH
81383: LD_INT 2
81385: EQUAL
81386: PUSH
81387: LD_VAR 0 1
81391: PPUSH
81392: CALL_OW 110
81396: PUSH
81397: LD_INT 20
81399: EQUAL
81400: PUSH
81401: LD_VAR 0 1
81405: PUSH
81406: LD_EXP 74
81410: PUSH
81411: LD_VAR 0 3
81415: ARRAY
81416: IN
81417: OR
81418: PUSH
81419: LD_VAR 0 1
81423: PPUSH
81424: CALL_OW 264
81428: PUSH
81429: LD_INT 12
81431: PUSH
81432: LD_INT 51
81434: PUSH
81435: LD_EXP 46
81439: PUSH
81440: LD_INT 32
81442: PUSH
81443: LD_INT 13
81445: PUSH
81446: LD_INT 52
81448: PUSH
81449: EMPTY
81450: LIST
81451: LIST
81452: LIST
81453: LIST
81454: LIST
81455: LIST
81456: IN
81457: OR
81458: AND
81459: IFFALSE 81637
// begin if un in mc_defender [ i ] then
81461: LD_VAR 0 1
81465: PUSH
81466: LD_EXP 74
81470: PUSH
81471: LD_VAR 0 3
81475: ARRAY
81476: IN
81477: IFFALSE 81516
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
81479: LD_ADDR_EXP 74
81483: PUSH
81484: LD_EXP 74
81488: PPUSH
81489: LD_VAR 0 3
81493: PPUSH
81494: LD_EXP 74
81498: PUSH
81499: LD_VAR 0 3
81503: ARRAY
81504: PUSH
81505: LD_VAR 0 1
81509: DIFF
81510: PPUSH
81511: CALL_OW 1
81515: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
81516: LD_ADDR_VAR 0 8
81520: PUSH
81521: LD_VAR 0 3
81525: PPUSH
81526: LD_INT 3
81528: PPUSH
81529: CALL 78189 0 2
81533: ST_TO_ADDR
// if fac then
81534: LD_VAR 0 8
81538: IFFALSE 81637
// begin for j in fac do
81540: LD_ADDR_VAR 0 4
81544: PUSH
81545: LD_VAR 0 8
81549: PUSH
81550: FOR_IN
81551: IFFALSE 81635
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
81553: LD_ADDR_VAR 0 9
81557: PUSH
81558: LD_VAR 0 8
81562: PPUSH
81563: LD_VAR 0 1
81567: PPUSH
81568: CALL_OW 265
81572: PPUSH
81573: LD_VAR 0 1
81577: PPUSH
81578: CALL_OW 262
81582: PPUSH
81583: LD_VAR 0 1
81587: PPUSH
81588: CALL_OW 263
81592: PPUSH
81593: LD_VAR 0 1
81597: PPUSH
81598: CALL_OW 264
81602: PPUSH
81603: CALL 15714 0 5
81607: ST_TO_ADDR
// if components then
81608: LD_VAR 0 9
81612: IFFALSE 81633
// begin MC_InsertProduceList ( i , [ components ] ) ;
81614: LD_VAR 0 3
81618: PPUSH
81619: LD_VAR 0 9
81623: PUSH
81624: EMPTY
81625: LIST
81626: PPUSH
81627: CALL 77734 0 2
// break ;
81631: GO 81635
// end ; end ;
81633: GO 81550
81635: POP
81636: POP
// end ; end ; if GetType ( un ) = unit_building then
81637: LD_VAR 0 1
81641: PPUSH
81642: CALL_OW 247
81646: PUSH
81647: LD_INT 3
81649: EQUAL
81650: IFFALSE 82053
// begin btype := GetBType ( un ) ;
81652: LD_ADDR_VAR 0 5
81656: PUSH
81657: LD_VAR 0 1
81661: PPUSH
81662: CALL_OW 266
81666: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
81667: LD_VAR 0 5
81671: PUSH
81672: LD_INT 29
81674: PUSH
81675: LD_INT 30
81677: PUSH
81678: EMPTY
81679: LIST
81680: LIST
81681: IN
81682: IFFALSE 81755
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
81684: LD_VAR 0 1
81688: PPUSH
81689: CALL_OW 250
81693: PPUSH
81694: LD_VAR 0 1
81698: PPUSH
81699: CALL_OW 251
81703: PPUSH
81704: LD_VAR 0 1
81708: PPUSH
81709: CALL_OW 255
81713: PPUSH
81714: CALL_OW 440
81718: NOT
81719: IFFALSE 81755
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
81721: LD_VAR 0 1
81725: PPUSH
81726: CALL_OW 250
81730: PPUSH
81731: LD_VAR 0 1
81735: PPUSH
81736: CALL_OW 251
81740: PPUSH
81741: LD_VAR 0 1
81745: PPUSH
81746: CALL_OW 255
81750: PPUSH
81751: CALL_OW 441
// end ; if btype = b_warehouse then
81755: LD_VAR 0 5
81759: PUSH
81760: LD_INT 1
81762: EQUAL
81763: IFFALSE 81781
// begin btype := b_depot ;
81765: LD_ADDR_VAR 0 5
81769: PUSH
81770: LD_INT 0
81772: ST_TO_ADDR
// pos := 1 ;
81773: LD_ADDR_VAR 0 6
81777: PUSH
81778: LD_INT 1
81780: ST_TO_ADDR
// end ; if btype = b_factory then
81781: LD_VAR 0 5
81785: PUSH
81786: LD_INT 3
81788: EQUAL
81789: IFFALSE 81807
// begin btype := b_workshop ;
81791: LD_ADDR_VAR 0 5
81795: PUSH
81796: LD_INT 2
81798: ST_TO_ADDR
// pos := 1 ;
81799: LD_ADDR_VAR 0 6
81803: PUSH
81804: LD_INT 1
81806: ST_TO_ADDR
// end ; if btype = b_barracks then
81807: LD_VAR 0 5
81811: PUSH
81812: LD_INT 5
81814: EQUAL
81815: IFFALSE 81825
// btype := b_armoury ;
81817: LD_ADDR_VAR 0 5
81821: PUSH
81822: LD_INT 4
81824: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
81825: LD_VAR 0 5
81829: PUSH
81830: LD_INT 7
81832: PUSH
81833: LD_INT 8
81835: PUSH
81836: EMPTY
81837: LIST
81838: LIST
81839: IN
81840: IFFALSE 81850
// btype := b_lab ;
81842: LD_ADDR_VAR 0 5
81846: PUSH
81847: LD_INT 6
81849: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
81850: LD_ADDR_EXP 57
81854: PUSH
81855: LD_EXP 57
81859: PPUSH
81860: LD_VAR 0 3
81864: PUSH
81865: LD_EXP 57
81869: PUSH
81870: LD_VAR 0 3
81874: ARRAY
81875: PUSH
81876: LD_INT 1
81878: PLUS
81879: PUSH
81880: EMPTY
81881: LIST
81882: LIST
81883: PPUSH
81884: LD_VAR 0 5
81888: PUSH
81889: LD_VAR 0 1
81893: PPUSH
81894: CALL_OW 250
81898: PUSH
81899: LD_VAR 0 1
81903: PPUSH
81904: CALL_OW 251
81908: PUSH
81909: LD_VAR 0 1
81913: PPUSH
81914: CALL_OW 254
81918: PUSH
81919: EMPTY
81920: LIST
81921: LIST
81922: LIST
81923: LIST
81924: PPUSH
81925: CALL 18182 0 3
81929: ST_TO_ADDR
// if pos = 1 then
81930: LD_VAR 0 6
81934: PUSH
81935: LD_INT 1
81937: EQUAL
81938: IFFALSE 82053
// begin tmp := mc_build_list [ i ] ;
81940: LD_ADDR_VAR 0 7
81944: PUSH
81945: LD_EXP 57
81949: PUSH
81950: LD_VAR 0 3
81954: ARRAY
81955: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
81956: LD_VAR 0 7
81960: PPUSH
81961: LD_INT 2
81963: PUSH
81964: LD_INT 30
81966: PUSH
81967: LD_INT 0
81969: PUSH
81970: EMPTY
81971: LIST
81972: LIST
81973: PUSH
81974: LD_INT 30
81976: PUSH
81977: LD_INT 1
81979: PUSH
81980: EMPTY
81981: LIST
81982: LIST
81983: PUSH
81984: EMPTY
81985: LIST
81986: LIST
81987: LIST
81988: PPUSH
81989: CALL_OW 72
81993: IFFALSE 82003
// pos := 2 ;
81995: LD_ADDR_VAR 0 6
81999: PUSH
82000: LD_INT 2
82002: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
82003: LD_ADDR_VAR 0 7
82007: PUSH
82008: LD_VAR 0 7
82012: PPUSH
82013: LD_VAR 0 6
82017: PPUSH
82018: LD_VAR 0 7
82022: PPUSH
82023: CALL 18508 0 3
82027: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
82028: LD_ADDR_EXP 57
82032: PUSH
82033: LD_EXP 57
82037: PPUSH
82038: LD_VAR 0 3
82042: PPUSH
82043: LD_VAR 0 7
82047: PPUSH
82048: CALL_OW 1
82052: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
82053: LD_VAR 0 1
82057: PUSH
82058: LD_EXP 52
82062: PUSH
82063: LD_VAR 0 3
82067: ARRAY
82068: IN
82069: IFFALSE 82108
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
82071: LD_ADDR_EXP 52
82075: PUSH
82076: LD_EXP 52
82080: PPUSH
82081: LD_VAR 0 3
82085: PPUSH
82086: LD_EXP 52
82090: PUSH
82091: LD_VAR 0 3
82095: ARRAY
82096: PUSH
82097: LD_VAR 0 1
82101: DIFF
82102: PPUSH
82103: CALL_OW 1
82107: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
82108: LD_VAR 0 1
82112: PUSH
82113: LD_EXP 59
82117: PUSH
82118: LD_VAR 0 3
82122: ARRAY
82123: IN
82124: IFFALSE 82163
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
82126: LD_ADDR_EXP 59
82130: PUSH
82131: LD_EXP 59
82135: PPUSH
82136: LD_VAR 0 3
82140: PPUSH
82141: LD_EXP 59
82145: PUSH
82146: LD_VAR 0 3
82150: ARRAY
82151: PUSH
82152: LD_VAR 0 1
82156: DIFF
82157: PPUSH
82158: CALL_OW 1
82162: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
82163: LD_VAR 0 1
82167: PUSH
82168: LD_EXP 71
82172: PUSH
82173: LD_VAR 0 3
82177: ARRAY
82178: IN
82179: IFFALSE 82218
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
82181: LD_ADDR_EXP 71
82185: PUSH
82186: LD_EXP 71
82190: PPUSH
82191: LD_VAR 0 3
82195: PPUSH
82196: LD_EXP 71
82200: PUSH
82201: LD_VAR 0 3
82205: ARRAY
82206: PUSH
82207: LD_VAR 0 1
82211: DIFF
82212: PPUSH
82213: CALL_OW 1
82217: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
82218: LD_VAR 0 1
82222: PUSH
82223: LD_EXP 74
82227: PUSH
82228: LD_VAR 0 3
82232: ARRAY
82233: IN
82234: IFFALSE 82273
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
82236: LD_ADDR_EXP 74
82240: PUSH
82241: LD_EXP 74
82245: PPUSH
82246: LD_VAR 0 3
82250: PPUSH
82251: LD_EXP 74
82255: PUSH
82256: LD_VAR 0 3
82260: ARRAY
82261: PUSH
82262: LD_VAR 0 1
82266: DIFF
82267: PPUSH
82268: CALL_OW 1
82272: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
82273: LD_VAR 0 1
82277: PUSH
82278: LD_EXP 61
82282: PUSH
82283: LD_VAR 0 3
82287: ARRAY
82288: IN
82289: IFFALSE 82328
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
82291: LD_ADDR_EXP 61
82295: PUSH
82296: LD_EXP 61
82300: PPUSH
82301: LD_VAR 0 3
82305: PPUSH
82306: LD_EXP 61
82310: PUSH
82311: LD_VAR 0 3
82315: ARRAY
82316: PUSH
82317: LD_VAR 0 1
82321: DIFF
82322: PPUSH
82323: CALL_OW 1
82327: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
82328: LD_VAR 0 1
82332: PUSH
82333: LD_EXP 60
82337: PUSH
82338: LD_VAR 0 3
82342: ARRAY
82343: IN
82344: IFFALSE 82383
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
82346: LD_ADDR_EXP 60
82350: PUSH
82351: LD_EXP 60
82355: PPUSH
82356: LD_VAR 0 3
82360: PPUSH
82361: LD_EXP 60
82365: PUSH
82366: LD_VAR 0 3
82370: ARRAY
82371: PUSH
82372: LD_VAR 0 1
82376: DIFF
82377: PPUSH
82378: CALL_OW 1
82382: ST_TO_ADDR
// end ; break ;
82383: GO 82387
// end ;
82385: GO 81167
82387: POP
82388: POP
// end ;
82389: LD_VAR 0 2
82393: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
82394: LD_INT 0
82396: PPUSH
82397: PPUSH
82398: PPUSH
// if not mc_bases or not skirmish then
82399: LD_EXP 52
82403: NOT
82404: PUSH
82405: LD_EXP 50
82409: NOT
82410: OR
82411: IFFALSE 82415
// exit ;
82413: GO 82630
// for i = 1 to mc_bases do
82415: LD_ADDR_VAR 0 3
82419: PUSH
82420: DOUBLE
82421: LD_INT 1
82423: DEC
82424: ST_TO_ADDR
82425: LD_EXP 52
82429: PUSH
82430: FOR_TO
82431: IFFALSE 82628
// begin if building in mc_construct_list [ i ] then
82433: LD_VAR 0 1
82437: PUSH
82438: LD_EXP 59
82442: PUSH
82443: LD_VAR 0 3
82447: ARRAY
82448: IN
82449: IFFALSE 82626
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
82451: LD_ADDR_EXP 59
82455: PUSH
82456: LD_EXP 59
82460: PPUSH
82461: LD_VAR 0 3
82465: PPUSH
82466: LD_EXP 59
82470: PUSH
82471: LD_VAR 0 3
82475: ARRAY
82476: PUSH
82477: LD_VAR 0 1
82481: DIFF
82482: PPUSH
82483: CALL_OW 1
82487: ST_TO_ADDR
// if building in mc_lab [ i ] then
82488: LD_VAR 0 1
82492: PUSH
82493: LD_EXP 85
82497: PUSH
82498: LD_VAR 0 3
82502: ARRAY
82503: IN
82504: IFFALSE 82559
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
82506: LD_ADDR_EXP 86
82510: PUSH
82511: LD_EXP 86
82515: PPUSH
82516: LD_VAR 0 3
82520: PPUSH
82521: LD_EXP 86
82525: PUSH
82526: LD_VAR 0 3
82530: ARRAY
82531: PPUSH
82532: LD_INT 1
82534: PPUSH
82535: LD_EXP 86
82539: PUSH
82540: LD_VAR 0 3
82544: ARRAY
82545: PPUSH
82546: LD_INT 0
82548: PPUSH
82549: CALL 17600 0 4
82553: PPUSH
82554: CALL_OW 1
82558: ST_TO_ADDR
// if not building in mc_bases [ i ] then
82559: LD_VAR 0 1
82563: PUSH
82564: LD_EXP 52
82568: PUSH
82569: LD_VAR 0 3
82573: ARRAY
82574: IN
82575: NOT
82576: IFFALSE 82622
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
82578: LD_ADDR_EXP 52
82582: PUSH
82583: LD_EXP 52
82587: PPUSH
82588: LD_VAR 0 3
82592: PUSH
82593: LD_EXP 52
82597: PUSH
82598: LD_VAR 0 3
82602: ARRAY
82603: PUSH
82604: LD_INT 1
82606: PLUS
82607: PUSH
82608: EMPTY
82609: LIST
82610: LIST
82611: PPUSH
82612: LD_VAR 0 1
82616: PPUSH
82617: CALL 18182 0 3
82621: ST_TO_ADDR
// exit ;
82622: POP
82623: POP
82624: GO 82630
// end ; end ;
82626: GO 82430
82628: POP
82629: POP
// end ;
82630: LD_VAR 0 2
82634: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
82635: LD_INT 0
82637: PPUSH
82638: PPUSH
82639: PPUSH
82640: PPUSH
82641: PPUSH
82642: PPUSH
82643: PPUSH
// if not mc_bases or not skirmish then
82644: LD_EXP 52
82648: NOT
82649: PUSH
82650: LD_EXP 50
82654: NOT
82655: OR
82656: IFFALSE 82660
// exit ;
82658: GO 83321
// for i = 1 to mc_bases do
82660: LD_ADDR_VAR 0 3
82664: PUSH
82665: DOUBLE
82666: LD_INT 1
82668: DEC
82669: ST_TO_ADDR
82670: LD_EXP 52
82674: PUSH
82675: FOR_TO
82676: IFFALSE 83319
// begin if building in mc_construct_list [ i ] then
82678: LD_VAR 0 1
82682: PUSH
82683: LD_EXP 59
82687: PUSH
82688: LD_VAR 0 3
82692: ARRAY
82693: IN
82694: IFFALSE 83317
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
82696: LD_ADDR_EXP 59
82700: PUSH
82701: LD_EXP 59
82705: PPUSH
82706: LD_VAR 0 3
82710: PPUSH
82711: LD_EXP 59
82715: PUSH
82716: LD_VAR 0 3
82720: ARRAY
82721: PUSH
82722: LD_VAR 0 1
82726: DIFF
82727: PPUSH
82728: CALL_OW 1
82732: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
82733: LD_ADDR_EXP 52
82737: PUSH
82738: LD_EXP 52
82742: PPUSH
82743: LD_VAR 0 3
82747: PUSH
82748: LD_EXP 52
82752: PUSH
82753: LD_VAR 0 3
82757: ARRAY
82758: PUSH
82759: LD_INT 1
82761: PLUS
82762: PUSH
82763: EMPTY
82764: LIST
82765: LIST
82766: PPUSH
82767: LD_VAR 0 1
82771: PPUSH
82772: CALL 18182 0 3
82776: ST_TO_ADDR
// btype := GetBType ( building ) ;
82777: LD_ADDR_VAR 0 5
82781: PUSH
82782: LD_VAR 0 1
82786: PPUSH
82787: CALL_OW 266
82791: ST_TO_ADDR
// side := GetSide ( building ) ;
82792: LD_ADDR_VAR 0 8
82796: PUSH
82797: LD_VAR 0 1
82801: PPUSH
82802: CALL_OW 255
82806: ST_TO_ADDR
// if btype = b_lab then
82807: LD_VAR 0 5
82811: PUSH
82812: LD_INT 6
82814: EQUAL
82815: IFFALSE 82865
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
82817: LD_ADDR_EXP 85
82821: PUSH
82822: LD_EXP 85
82826: PPUSH
82827: LD_VAR 0 3
82831: PUSH
82832: LD_EXP 85
82836: PUSH
82837: LD_VAR 0 3
82841: ARRAY
82842: PUSH
82843: LD_INT 1
82845: PLUS
82846: PUSH
82847: EMPTY
82848: LIST
82849: LIST
82850: PPUSH
82851: LD_VAR 0 1
82855: PPUSH
82856: CALL 18182 0 3
82860: ST_TO_ADDR
// exit ;
82861: POP
82862: POP
82863: GO 83321
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
82865: LD_VAR 0 5
82869: PUSH
82870: LD_INT 0
82872: PUSH
82873: LD_INT 2
82875: PUSH
82876: LD_INT 4
82878: PUSH
82879: EMPTY
82880: LIST
82881: LIST
82882: LIST
82883: IN
82884: IFFALSE 83008
// begin if btype = b_armoury then
82886: LD_VAR 0 5
82890: PUSH
82891: LD_INT 4
82893: EQUAL
82894: IFFALSE 82904
// btype := b_barracks ;
82896: LD_ADDR_VAR 0 5
82900: PUSH
82901: LD_INT 5
82903: ST_TO_ADDR
// if btype = b_depot then
82904: LD_VAR 0 5
82908: PUSH
82909: LD_INT 0
82911: EQUAL
82912: IFFALSE 82922
// btype := b_warehouse ;
82914: LD_ADDR_VAR 0 5
82918: PUSH
82919: LD_INT 1
82921: ST_TO_ADDR
// if btype = b_workshop then
82922: LD_VAR 0 5
82926: PUSH
82927: LD_INT 2
82929: EQUAL
82930: IFFALSE 82940
// btype := b_factory ;
82932: LD_ADDR_VAR 0 5
82936: PUSH
82937: LD_INT 3
82939: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
82940: LD_VAR 0 5
82944: PPUSH
82945: LD_VAR 0 8
82949: PPUSH
82950: CALL_OW 323
82954: PUSH
82955: LD_INT 1
82957: EQUAL
82958: IFFALSE 83004
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
82960: LD_ADDR_EXP 84
82964: PUSH
82965: LD_EXP 84
82969: PPUSH
82970: LD_VAR 0 3
82974: PUSH
82975: LD_EXP 84
82979: PUSH
82980: LD_VAR 0 3
82984: ARRAY
82985: PUSH
82986: LD_INT 1
82988: PLUS
82989: PUSH
82990: EMPTY
82991: LIST
82992: LIST
82993: PPUSH
82994: LD_VAR 0 1
82998: PPUSH
82999: CALL 18182 0 3
83003: ST_TO_ADDR
// exit ;
83004: POP
83005: POP
83006: GO 83321
// end ; if btype in [ b_bunker , b_turret ] then
83008: LD_VAR 0 5
83012: PUSH
83013: LD_INT 32
83015: PUSH
83016: LD_INT 33
83018: PUSH
83019: EMPTY
83020: LIST
83021: LIST
83022: IN
83023: IFFALSE 83313
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
83025: LD_ADDR_EXP 60
83029: PUSH
83030: LD_EXP 60
83034: PPUSH
83035: LD_VAR 0 3
83039: PUSH
83040: LD_EXP 60
83044: PUSH
83045: LD_VAR 0 3
83049: ARRAY
83050: PUSH
83051: LD_INT 1
83053: PLUS
83054: PUSH
83055: EMPTY
83056: LIST
83057: LIST
83058: PPUSH
83059: LD_VAR 0 1
83063: PPUSH
83064: CALL 18182 0 3
83068: ST_TO_ADDR
// if btype = b_bunker then
83069: LD_VAR 0 5
83073: PUSH
83074: LD_INT 32
83076: EQUAL
83077: IFFALSE 83313
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
83079: LD_ADDR_EXP 61
83083: PUSH
83084: LD_EXP 61
83088: PPUSH
83089: LD_VAR 0 3
83093: PUSH
83094: LD_EXP 61
83098: PUSH
83099: LD_VAR 0 3
83103: ARRAY
83104: PUSH
83105: LD_INT 1
83107: PLUS
83108: PUSH
83109: EMPTY
83110: LIST
83111: LIST
83112: PPUSH
83113: LD_VAR 0 1
83117: PPUSH
83118: CALL 18182 0 3
83122: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
83123: LD_ADDR_VAR 0 6
83127: PUSH
83128: LD_EXP 52
83132: PUSH
83133: LD_VAR 0 3
83137: ARRAY
83138: PPUSH
83139: LD_INT 25
83141: PUSH
83142: LD_INT 1
83144: PUSH
83145: EMPTY
83146: LIST
83147: LIST
83148: PUSH
83149: LD_INT 3
83151: PUSH
83152: LD_INT 54
83154: PUSH
83155: EMPTY
83156: LIST
83157: PUSH
83158: EMPTY
83159: LIST
83160: LIST
83161: PUSH
83162: EMPTY
83163: LIST
83164: LIST
83165: PPUSH
83166: CALL_OW 72
83170: ST_TO_ADDR
// if tmp then
83171: LD_VAR 0 6
83175: IFFALSE 83181
// exit ;
83177: POP
83178: POP
83179: GO 83321
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
83181: LD_ADDR_VAR 0 6
83185: PUSH
83186: LD_EXP 52
83190: PUSH
83191: LD_VAR 0 3
83195: ARRAY
83196: PPUSH
83197: LD_INT 2
83199: PUSH
83200: LD_INT 30
83202: PUSH
83203: LD_INT 4
83205: PUSH
83206: EMPTY
83207: LIST
83208: LIST
83209: PUSH
83210: LD_INT 30
83212: PUSH
83213: LD_INT 5
83215: PUSH
83216: EMPTY
83217: LIST
83218: LIST
83219: PUSH
83220: EMPTY
83221: LIST
83222: LIST
83223: LIST
83224: PPUSH
83225: CALL_OW 72
83229: ST_TO_ADDR
// if not tmp then
83230: LD_VAR 0 6
83234: NOT
83235: IFFALSE 83241
// exit ;
83237: POP
83238: POP
83239: GO 83321
// for j in tmp do
83241: LD_ADDR_VAR 0 4
83245: PUSH
83246: LD_VAR 0 6
83250: PUSH
83251: FOR_IN
83252: IFFALSE 83311
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
83254: LD_ADDR_VAR 0 7
83258: PUSH
83259: LD_VAR 0 4
83263: PPUSH
83264: CALL_OW 313
83268: PPUSH
83269: LD_INT 25
83271: PUSH
83272: LD_INT 1
83274: PUSH
83275: EMPTY
83276: LIST
83277: LIST
83278: PPUSH
83279: CALL_OW 72
83283: ST_TO_ADDR
// if units then
83284: LD_VAR 0 7
83288: IFFALSE 83309
// begin ComExitBuilding ( units [ 1 ] ) ;
83290: LD_VAR 0 7
83294: PUSH
83295: LD_INT 1
83297: ARRAY
83298: PPUSH
83299: CALL_OW 122
// exit ;
83303: POP
83304: POP
83305: POP
83306: POP
83307: GO 83321
// end ; end ;
83309: GO 83251
83311: POP
83312: POP
// end ; end ; exit ;
83313: POP
83314: POP
83315: GO 83321
// end ; end ;
83317: GO 82675
83319: POP
83320: POP
// end ;
83321: LD_VAR 0 2
83325: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
83326: LD_INT 0
83328: PPUSH
83329: PPUSH
83330: PPUSH
83331: PPUSH
83332: PPUSH
83333: PPUSH
83334: PPUSH
// if not mc_bases or not skirmish then
83335: LD_EXP 52
83339: NOT
83340: PUSH
83341: LD_EXP 50
83345: NOT
83346: OR
83347: IFFALSE 83351
// exit ;
83349: GO 83582
// btype := GetBType ( building ) ;
83351: LD_ADDR_VAR 0 6
83355: PUSH
83356: LD_VAR 0 1
83360: PPUSH
83361: CALL_OW 266
83365: ST_TO_ADDR
// x := GetX ( building ) ;
83366: LD_ADDR_VAR 0 7
83370: PUSH
83371: LD_VAR 0 1
83375: PPUSH
83376: CALL_OW 250
83380: ST_TO_ADDR
// y := GetY ( building ) ;
83381: LD_ADDR_VAR 0 8
83385: PUSH
83386: LD_VAR 0 1
83390: PPUSH
83391: CALL_OW 251
83395: ST_TO_ADDR
// d := GetDir ( building ) ;
83396: LD_ADDR_VAR 0 9
83400: PUSH
83401: LD_VAR 0 1
83405: PPUSH
83406: CALL_OW 254
83410: ST_TO_ADDR
// for i = 1 to mc_bases do
83411: LD_ADDR_VAR 0 4
83415: PUSH
83416: DOUBLE
83417: LD_INT 1
83419: DEC
83420: ST_TO_ADDR
83421: LD_EXP 52
83425: PUSH
83426: FOR_TO
83427: IFFALSE 83580
// begin if not mc_build_list [ i ] then
83429: LD_EXP 57
83433: PUSH
83434: LD_VAR 0 4
83438: ARRAY
83439: NOT
83440: IFFALSE 83444
// continue ;
83442: GO 83426
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
83444: LD_VAR 0 6
83448: PUSH
83449: LD_VAR 0 7
83453: PUSH
83454: LD_VAR 0 8
83458: PUSH
83459: LD_VAR 0 9
83463: PUSH
83464: EMPTY
83465: LIST
83466: LIST
83467: LIST
83468: LIST
83469: PPUSH
83470: LD_EXP 57
83474: PUSH
83475: LD_VAR 0 4
83479: ARRAY
83480: PUSH
83481: LD_INT 1
83483: ARRAY
83484: PPUSH
83485: CALL 24351 0 2
83489: IFFALSE 83578
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
83491: LD_ADDR_EXP 57
83495: PUSH
83496: LD_EXP 57
83500: PPUSH
83501: LD_VAR 0 4
83505: PPUSH
83506: LD_EXP 57
83510: PUSH
83511: LD_VAR 0 4
83515: ARRAY
83516: PPUSH
83517: LD_INT 1
83519: PPUSH
83520: CALL_OW 3
83524: PPUSH
83525: CALL_OW 1
83529: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
83530: LD_ADDR_EXP 59
83534: PUSH
83535: LD_EXP 59
83539: PPUSH
83540: LD_VAR 0 4
83544: PUSH
83545: LD_EXP 59
83549: PUSH
83550: LD_VAR 0 4
83554: ARRAY
83555: PUSH
83556: LD_INT 1
83558: PLUS
83559: PUSH
83560: EMPTY
83561: LIST
83562: LIST
83563: PPUSH
83564: LD_VAR 0 1
83568: PPUSH
83569: CALL 18182 0 3
83573: ST_TO_ADDR
// exit ;
83574: POP
83575: POP
83576: GO 83582
// end ; end ;
83578: GO 83426
83580: POP
83581: POP
// end ;
83582: LD_VAR 0 3
83586: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
83587: LD_INT 0
83589: PPUSH
83590: PPUSH
83591: PPUSH
// if not mc_bases or not skirmish then
83592: LD_EXP 52
83596: NOT
83597: PUSH
83598: LD_EXP 50
83602: NOT
83603: OR
83604: IFFALSE 83608
// exit ;
83606: GO 83798
// for i = 1 to mc_bases do
83608: LD_ADDR_VAR 0 4
83612: PUSH
83613: DOUBLE
83614: LD_INT 1
83616: DEC
83617: ST_TO_ADDR
83618: LD_EXP 52
83622: PUSH
83623: FOR_TO
83624: IFFALSE 83711
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
83626: LD_VAR 0 1
83630: PUSH
83631: LD_EXP 60
83635: PUSH
83636: LD_VAR 0 4
83640: ARRAY
83641: IN
83642: PUSH
83643: LD_VAR 0 1
83647: PUSH
83648: LD_EXP 61
83652: PUSH
83653: LD_VAR 0 4
83657: ARRAY
83658: IN
83659: NOT
83660: AND
83661: IFFALSE 83709
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
83663: LD_ADDR_EXP 61
83667: PUSH
83668: LD_EXP 61
83672: PPUSH
83673: LD_VAR 0 4
83677: PUSH
83678: LD_EXP 61
83682: PUSH
83683: LD_VAR 0 4
83687: ARRAY
83688: PUSH
83689: LD_INT 1
83691: PLUS
83692: PUSH
83693: EMPTY
83694: LIST
83695: LIST
83696: PPUSH
83697: LD_VAR 0 1
83701: PPUSH
83702: CALL 18182 0 3
83706: ST_TO_ADDR
// break ;
83707: GO 83711
// end ; end ;
83709: GO 83623
83711: POP
83712: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
83713: LD_VAR 0 1
83717: PPUSH
83718: CALL_OW 257
83722: PUSH
83723: LD_EXP 78
83727: IN
83728: PUSH
83729: LD_VAR 0 1
83733: PPUSH
83734: CALL_OW 266
83738: PUSH
83739: LD_INT 5
83741: EQUAL
83742: AND
83743: PUSH
83744: LD_VAR 0 2
83748: PPUSH
83749: CALL_OW 110
83753: PUSH
83754: LD_INT 18
83756: NONEQUAL
83757: AND
83758: IFFALSE 83798
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
83760: LD_VAR 0 2
83764: PPUSH
83765: CALL_OW 257
83769: PUSH
83770: LD_INT 5
83772: PUSH
83773: LD_INT 8
83775: PUSH
83776: LD_INT 9
83778: PUSH
83779: EMPTY
83780: LIST
83781: LIST
83782: LIST
83783: IN
83784: IFFALSE 83798
// SetClass ( unit , 1 ) ;
83786: LD_VAR 0 2
83790: PPUSH
83791: LD_INT 1
83793: PPUSH
83794: CALL_OW 336
// end ;
83798: LD_VAR 0 3
83802: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
83803: LD_INT 0
83805: PPUSH
83806: PPUSH
// if not mc_bases or not skirmish then
83807: LD_EXP 52
83811: NOT
83812: PUSH
83813: LD_EXP 50
83817: NOT
83818: OR
83819: IFFALSE 83823
// exit ;
83821: GO 83939
// if GetLives ( abandoned_vehicle ) > 250 then
83823: LD_VAR 0 2
83827: PPUSH
83828: CALL_OW 256
83832: PUSH
83833: LD_INT 250
83835: GREATER
83836: IFFALSE 83840
// exit ;
83838: GO 83939
// for i = 1 to mc_bases do
83840: LD_ADDR_VAR 0 6
83844: PUSH
83845: DOUBLE
83846: LD_INT 1
83848: DEC
83849: ST_TO_ADDR
83850: LD_EXP 52
83854: PUSH
83855: FOR_TO
83856: IFFALSE 83937
// begin if driver in mc_bases [ i ] then
83858: LD_VAR 0 1
83862: PUSH
83863: LD_EXP 52
83867: PUSH
83868: LD_VAR 0 6
83872: ARRAY
83873: IN
83874: IFFALSE 83935
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
83876: LD_VAR 0 1
83880: PPUSH
83881: LD_EXP 52
83885: PUSH
83886: LD_VAR 0 6
83890: ARRAY
83891: PPUSH
83892: LD_INT 2
83894: PUSH
83895: LD_INT 30
83897: PUSH
83898: LD_INT 0
83900: PUSH
83901: EMPTY
83902: LIST
83903: LIST
83904: PUSH
83905: LD_INT 30
83907: PUSH
83908: LD_INT 1
83910: PUSH
83911: EMPTY
83912: LIST
83913: LIST
83914: PUSH
83915: EMPTY
83916: LIST
83917: LIST
83918: LIST
83919: PPUSH
83920: CALL_OW 72
83924: PUSH
83925: LD_INT 1
83927: ARRAY
83928: PPUSH
83929: CALL_OW 112
// break ;
83933: GO 83937
// end ; end ;
83935: GO 83855
83937: POP
83938: POP
// end ; end_of_file end_of_file end_of_file
83939: LD_VAR 0 5
83943: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
83944: LD_INT 0
83946: PPUSH
83947: PPUSH
83948: PPUSH
83949: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
83950: LD_VAR 0 1
83954: PPUSH
83955: CALL_OW 264
83959: PUSH
83960: LD_EXP 49
83964: EQUAL
83965: IFFALSE 84037
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
83967: LD_INT 68
83969: PPUSH
83970: LD_VAR 0 1
83974: PPUSH
83975: CALL_OW 255
83979: PPUSH
83980: CALL_OW 321
83984: PUSH
83985: LD_INT 2
83987: EQUAL
83988: IFFALSE 84000
// eff := 70 else
83990: LD_ADDR_VAR 0 6
83994: PUSH
83995: LD_INT 70
83997: ST_TO_ADDR
83998: GO 84008
// eff := 30 ;
84000: LD_ADDR_VAR 0 6
84004: PUSH
84005: LD_INT 30
84007: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
84008: LD_VAR 0 1
84012: PPUSH
84013: CALL_OW 250
84017: PPUSH
84018: LD_VAR 0 1
84022: PPUSH
84023: CALL_OW 251
84027: PPUSH
84028: LD_VAR 0 6
84032: PPUSH
84033: CALL_OW 495
// end ; end ;
84037: LD_VAR 0 4
84041: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
84042: LD_INT 0
84044: PPUSH
84045: PPUSH
84046: PPUSH
84047: PPUSH
84048: PPUSH
84049: PPUSH
// if cmd = 124 then
84050: LD_VAR 0 1
84054: PUSH
84055: LD_INT 124
84057: EQUAL
84058: IFFALSE 84264
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
84060: LD_ADDR_VAR 0 5
84064: PUSH
84065: LD_INT 2
84067: PUSH
84068: LD_INT 34
84070: PUSH
84071: LD_INT 53
84073: PUSH
84074: EMPTY
84075: LIST
84076: LIST
84077: PUSH
84078: LD_INT 34
84080: PUSH
84081: LD_INT 14
84083: PUSH
84084: EMPTY
84085: LIST
84086: LIST
84087: PUSH
84088: EMPTY
84089: LIST
84090: LIST
84091: LIST
84092: PPUSH
84093: CALL_OW 69
84097: ST_TO_ADDR
// if not tmp then
84098: LD_VAR 0 5
84102: NOT
84103: IFFALSE 84107
// exit ;
84105: GO 84264
// for i in tmp do
84107: LD_ADDR_VAR 0 3
84111: PUSH
84112: LD_VAR 0 5
84116: PUSH
84117: FOR_IN
84118: IFFALSE 84262
// begin taskList := GetTaskList ( i ) ;
84120: LD_ADDR_VAR 0 6
84124: PUSH
84125: LD_VAR 0 3
84129: PPUSH
84130: CALL_OW 437
84134: ST_TO_ADDR
// if not taskList then
84135: LD_VAR 0 6
84139: NOT
84140: IFFALSE 84144
// continue ;
84142: GO 84117
// for j = 1 to taskList do
84144: LD_ADDR_VAR 0 4
84148: PUSH
84149: DOUBLE
84150: LD_INT 1
84152: DEC
84153: ST_TO_ADDR
84154: LD_VAR 0 6
84158: PUSH
84159: FOR_TO
84160: IFFALSE 84258
// if taskList [ j ] [ 1 ] = | then
84162: LD_VAR 0 6
84166: PUSH
84167: LD_VAR 0 4
84171: ARRAY
84172: PUSH
84173: LD_INT 1
84175: ARRAY
84176: PUSH
84177: LD_STRING |
84179: EQUAL
84180: IFFALSE 84256
// begin _taskList := Delete ( taskList , 1 ) ;
84182: LD_ADDR_VAR 0 7
84186: PUSH
84187: LD_VAR 0 6
84191: PPUSH
84192: LD_INT 1
84194: PPUSH
84195: CALL_OW 3
84199: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
84200: LD_VAR 0 3
84204: PPUSH
84205: LD_VAR 0 7
84209: PPUSH
84210: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
84214: LD_VAR 0 3
84218: PPUSH
84219: LD_VAR 0 6
84223: PUSH
84224: LD_VAR 0 4
84228: ARRAY
84229: PUSH
84230: LD_INT 2
84232: ARRAY
84233: PPUSH
84234: LD_VAR 0 6
84238: PUSH
84239: LD_VAR 0 4
84243: ARRAY
84244: PUSH
84245: LD_INT 3
84247: ARRAY
84248: PPUSH
84249: LD_INT 8
84251: PPUSH
84252: CALL 84269 0 4
// end ;
84256: GO 84159
84258: POP
84259: POP
// end ;
84260: GO 84117
84262: POP
84263: POP
// end ; end ;
84264: LD_VAR 0 2
84268: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
84269: LD_INT 0
84271: PPUSH
84272: PPUSH
84273: PPUSH
84274: PPUSH
84275: PPUSH
84276: PPUSH
84277: PPUSH
84278: PPUSH
84279: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
84280: LD_VAR 0 1
84284: NOT
84285: PUSH
84286: LD_VAR 0 2
84290: PPUSH
84291: LD_VAR 0 3
84295: PPUSH
84296: CALL_OW 488
84300: NOT
84301: OR
84302: PUSH
84303: LD_VAR 0 4
84307: NOT
84308: OR
84309: IFFALSE 84313
// exit ;
84311: GO 84653
// list := [ ] ;
84313: LD_ADDR_VAR 0 13
84317: PUSH
84318: EMPTY
84319: ST_TO_ADDR
// if x - r < 0 then
84320: LD_VAR 0 2
84324: PUSH
84325: LD_VAR 0 4
84329: MINUS
84330: PUSH
84331: LD_INT 0
84333: LESS
84334: IFFALSE 84346
// min_x := 0 else
84336: LD_ADDR_VAR 0 7
84340: PUSH
84341: LD_INT 0
84343: ST_TO_ADDR
84344: GO 84362
// min_x := x - r ;
84346: LD_ADDR_VAR 0 7
84350: PUSH
84351: LD_VAR 0 2
84355: PUSH
84356: LD_VAR 0 4
84360: MINUS
84361: ST_TO_ADDR
// if y - r < 0 then
84362: LD_VAR 0 3
84366: PUSH
84367: LD_VAR 0 4
84371: MINUS
84372: PUSH
84373: LD_INT 0
84375: LESS
84376: IFFALSE 84388
// min_y := 0 else
84378: LD_ADDR_VAR 0 8
84382: PUSH
84383: LD_INT 0
84385: ST_TO_ADDR
84386: GO 84404
// min_y := y - r ;
84388: LD_ADDR_VAR 0 8
84392: PUSH
84393: LD_VAR 0 3
84397: PUSH
84398: LD_VAR 0 4
84402: MINUS
84403: ST_TO_ADDR
// max_x := x + r ;
84404: LD_ADDR_VAR 0 9
84408: PUSH
84409: LD_VAR 0 2
84413: PUSH
84414: LD_VAR 0 4
84418: PLUS
84419: ST_TO_ADDR
// max_y := y + r ;
84420: LD_ADDR_VAR 0 10
84424: PUSH
84425: LD_VAR 0 3
84429: PUSH
84430: LD_VAR 0 4
84434: PLUS
84435: ST_TO_ADDR
// for _x = min_x to max_x do
84436: LD_ADDR_VAR 0 11
84440: PUSH
84441: DOUBLE
84442: LD_VAR 0 7
84446: DEC
84447: ST_TO_ADDR
84448: LD_VAR 0 9
84452: PUSH
84453: FOR_TO
84454: IFFALSE 84571
// for _y = min_y to max_y do
84456: LD_ADDR_VAR 0 12
84460: PUSH
84461: DOUBLE
84462: LD_VAR 0 8
84466: DEC
84467: ST_TO_ADDR
84468: LD_VAR 0 10
84472: PUSH
84473: FOR_TO
84474: IFFALSE 84567
// begin if not ValidHex ( _x , _y ) then
84476: LD_VAR 0 11
84480: PPUSH
84481: LD_VAR 0 12
84485: PPUSH
84486: CALL_OW 488
84490: NOT
84491: IFFALSE 84495
// continue ;
84493: GO 84473
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
84495: LD_VAR 0 11
84499: PPUSH
84500: LD_VAR 0 12
84504: PPUSH
84505: CALL_OW 351
84509: PUSH
84510: LD_VAR 0 11
84514: PPUSH
84515: LD_VAR 0 12
84519: PPUSH
84520: CALL_OW 554
84524: AND
84525: IFFALSE 84565
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
84527: LD_ADDR_VAR 0 13
84531: PUSH
84532: LD_VAR 0 13
84536: PPUSH
84537: LD_VAR 0 13
84541: PUSH
84542: LD_INT 1
84544: PLUS
84545: PPUSH
84546: LD_VAR 0 11
84550: PUSH
84551: LD_VAR 0 12
84555: PUSH
84556: EMPTY
84557: LIST
84558: LIST
84559: PPUSH
84560: CALL_OW 2
84564: ST_TO_ADDR
// end ;
84565: GO 84473
84567: POP
84568: POP
84569: GO 84453
84571: POP
84572: POP
// if not list then
84573: LD_VAR 0 13
84577: NOT
84578: IFFALSE 84582
// exit ;
84580: GO 84653
// for i in list do
84582: LD_ADDR_VAR 0 6
84586: PUSH
84587: LD_VAR 0 13
84591: PUSH
84592: FOR_IN
84593: IFFALSE 84651
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
84595: LD_VAR 0 1
84599: PPUSH
84600: LD_STRING M
84602: PUSH
84603: LD_VAR 0 6
84607: PUSH
84608: LD_INT 1
84610: ARRAY
84611: PUSH
84612: LD_VAR 0 6
84616: PUSH
84617: LD_INT 2
84619: ARRAY
84620: PUSH
84621: LD_INT 0
84623: PUSH
84624: LD_INT 0
84626: PUSH
84627: LD_INT 0
84629: PUSH
84630: LD_INT 0
84632: PUSH
84633: EMPTY
84634: LIST
84635: LIST
84636: LIST
84637: LIST
84638: LIST
84639: LIST
84640: LIST
84641: PUSH
84642: EMPTY
84643: LIST
84644: PPUSH
84645: CALL_OW 447
84649: GO 84592
84651: POP
84652: POP
// end ;
84653: LD_VAR 0 5
84657: RET
