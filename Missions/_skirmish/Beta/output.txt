// export MissionStart ; starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RevealFogArea ( 1 , BetaArea ) ;
  11: LD_INT 1
  13: PPUSH
  14: LD_INT 8
  16: PPUSH
  17: CALL_OW 332
// GameType ;
  21: CALL 5228 0 0
// SetBName ( BetaA , beta ) ;
  25: LD_INT 1
  27: PPUSH
  28: LD_STRING beta
  30: PPUSH
  31: CALL_OW 500
// SetBName ( BetaB , beta ) ;
  35: LD_INT 3
  37: PPUSH
  38: LD_STRING beta
  40: PPUSH
  41: CALL_OW 500
// PrepareHeroes ;
  45: CALL 2391 0 0
// PrepareBeta ;
  49: CALL 2780 0 0
// InGameOn ;
  53: CALL_OW 8
// CenterNowOnUnits ( Brighton ) ;
  57: LD_EXP 8
  61: PPUSH
  62: CALL_OW 87
// ComMoveXY ( Megan , 50 , 42 ) ;
  66: LD_EXP 10
  70: PPUSH
  71: LD_INT 50
  73: PPUSH
  74: LD_INT 42
  76: PPUSH
  77: CALL_OW 111
// repeat wait ( 0 0$1 ) until GetDistUnits ( Megan , Brighton ) < 3 ;
  81: LD_INT 35
  83: PPUSH
  84: CALL_OW 67
  88: LD_EXP 10
  92: PPUSH
  93: LD_EXP 8
  97: PPUSH
  98: CALL_OW 296
 102: PUSH
 103: LD_INT 3
 105: LESS
 106: IFFALSE 81
// ComTurnUnit ( Megan , Brighton ) ;
 108: LD_EXP 10
 112: PPUSH
 113: LD_EXP 8
 117: PPUSH
 118: CALL_OW 119
// Say ( Megan , DMegan-1a ) ;
 122: LD_EXP 10
 126: PPUSH
 127: LD_STRING DMegan-1a
 129: PPUSH
 130: CALL_OW 88
// wait ( 0 0$0.3 ) ;
 134: LD_INT 10
 136: PPUSH
 137: CALL_OW 67
// ComTurnUnit ( Brighton , Megan ) ;
 141: LD_EXP 8
 145: PPUSH
 146: LD_EXP 10
 150: PPUSH
 151: CALL_OW 119
// Say ( Brighton , DBrighton-1a ) ;
 155: LD_EXP 8
 159: PPUSH
 160: LD_STRING DBrighton-1a
 162: PPUSH
 163: CALL_OW 88
// Say ( Megan , DMegan-2a ) ;
 167: LD_EXP 10
 171: PPUSH
 172: LD_STRING DMegan-2a
 174: PPUSH
 175: CALL_OW 88
// Say ( Brighton , DBrighton-2a ) ;
 179: LD_EXP 8
 183: PPUSH
 184: LD_STRING DBrighton-2a
 186: PPUSH
 187: CALL_OW 88
// Say ( Megan , DMegan-3a ) ;
 191: LD_EXP 10
 195: PPUSH
 196: LD_STRING DMegan-3a
 198: PPUSH
 199: CALL_OW 88
// Say ( Brighton , DBrighton-3a ) ;
 203: LD_EXP 8
 207: PPUSH
 208: LD_STRING DBrighton-3a
 210: PPUSH
 211: CALL_OW 88
// Say ( Megan , DMegan-4a ) ;
 215: LD_EXP 10
 219: PPUSH
 220: LD_STRING DMegan-4a
 222: PPUSH
 223: CALL_OW 88
// ComMoveXY ( Megan , 40 , 37 ) ;
 227: LD_EXP 10
 231: PPUSH
 232: LD_INT 40
 234: PPUSH
 235: LD_INT 37
 237: PPUSH
 238: CALL_OW 111
// AddComTurnUnit ( Megan , Brighton ) ;
 242: LD_EXP 10
 246: PPUSH
 247: LD_EXP 8
 251: PPUSH
 252: CALL_OW 179
// ComMoveXY ( Palmer , 50 , 42 ) ;
 256: LD_EXP 9
 260: PPUSH
 261: LD_INT 50
 263: PPUSH
 264: LD_INT 42
 266: PPUSH
 267: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 271: LD_INT 35
 273: PPUSH
 274: CALL_OW 67
// until GetDistUnits ( Brighton , Palmer ) < 6 ;
 278: LD_EXP 8
 282: PPUSH
 283: LD_EXP 9
 287: PPUSH
 288: CALL_OW 296
 292: PUSH
 293: LD_INT 6
 295: LESS
 296: IFFALSE 271
// ComTurnUnit ( Brighton , Palmer ) ;
 298: LD_EXP 8
 302: PPUSH
 303: LD_EXP 9
 307: PPUSH
 308: CALL_OW 119
// ComTurnUnit ( Palmer , Brighton ) ;
 312: LD_EXP 9
 316: PPUSH
 317: LD_EXP 8
 321: PPUSH
 322: CALL_OW 119
// Say ( Megan , DMegan-5a ) ;
 326: LD_EXP 10
 330: PPUSH
 331: LD_STRING DMegan-5a
 333: PPUSH
 334: CALL_OW 88
// Say ( Palmer , DPalmer-1 ) ;
 338: LD_EXP 9
 342: PPUSH
 343: LD_STRING DPalmer-1
 345: PPUSH
 346: CALL_OW 88
// Say ( Brighton , DBrighton-1 ) ;
 350: LD_EXP 8
 354: PPUSH
 355: LD_STRING DBrighton-1
 357: PPUSH
 358: CALL_OW 88
// Say ( Palmer , DPalmer-2 ) ;
 362: LD_EXP 9
 366: PPUSH
 367: LD_STRING DPalmer-2
 369: PPUSH
 370: CALL_OW 88
// Say ( Brighton , DBrighton-2 ) ;
 374: LD_EXP 8
 378: PPUSH
 379: LD_STRING DBrighton-2
 381: PPUSH
 382: CALL_OW 88
// Say ( Palmer , DPalmer-3 ) ;
 386: LD_EXP 9
 390: PPUSH
 391: LD_STRING DPalmer-3
 393: PPUSH
 394: CALL_OW 88
// Say ( Brighton , DBrighton-3 ) ;
 398: LD_EXP 8
 402: PPUSH
 403: LD_STRING DBrighton-3
 405: PPUSH
 406: CALL_OW 88
// Say ( Palmer , DPalmer-4 ) ;
 410: LD_EXP 9
 414: PPUSH
 415: LD_STRING DPalmer-4
 417: PPUSH
 418: CALL_OW 88
// ComEnterUnit ( Palmer , AmTower ) ;
 422: LD_EXP 9
 426: PPUSH
 427: LD_INT 6
 429: PPUSH
 430: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
 434: LD_INT 35
 436: PPUSH
 437: CALL_OW 67
// until IsInUnit ( Palmer ) = AmTower ;
 441: LD_EXP 9
 445: PPUSH
 446: CALL_OW 310
 450: PUSH
 451: LD_INT 6
 453: EQUAL
 454: IFFALSE 434
// SayRadio ( Palmer , DPalmer-5 ) ;
 456: LD_EXP 9
 460: PPUSH
 461: LD_STRING DPalmer-5
 463: PPUSH
 464: CALL_OW 94
// ComMoveXY ( Brighton , 59 , 36 ) ;
 468: LD_EXP 8
 472: PPUSH
 473: LD_INT 59
 475: PPUSH
 476: LD_INT 36
 478: PPUSH
 479: CALL_OW 111
// ComMoveXY ( Megan , 60 , 35 ) ;
 483: LD_EXP 10
 487: PPUSH
 488: LD_INT 60
 490: PPUSH
 491: LD_INT 35
 493: PPUSH
 494: CALL_OW 111
// ComMoveXY ( Palmer , 60 , 34 ) ;
 498: LD_EXP 9
 502: PPUSH
 503: LD_INT 60
 505: PPUSH
 506: LD_INT 34
 508: PPUSH
 509: CALL_OW 111
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 513: LD_EXP 8
 517: PPUSH
 518: LD_INT 99
 520: PPUSH
 521: LD_INT 37
 523: PPUSH
 524: CALL_OW 178
// AddComTurnUnit ( Megan , Brighton ) ;
 528: LD_EXP 10
 532: PPUSH
 533: LD_EXP 8
 537: PPUSH
 538: CALL_OW 179
// AddComTurnUnit ( Palmer , Brighton ) ;
 542: LD_EXP 9
 546: PPUSH
 547: LD_EXP 8
 551: PPUSH
 552: CALL_OW 179
// CenterOnXY ( 64 , 40 ) ;
 556: LD_INT 64
 558: PPUSH
 559: LD_INT 40
 561: PPUSH
 562: CALL_OW 84
// ComMeeting ( BetaSquad , SpotArea ) ;
 566: LD_EXP 11
 570: PPUSH
 571: LD_INT 13
 573: PPUSH
 574: CALL 11035 0 2
// wait ( 0 0$30 ) ;
 578: LD_INT 1050
 580: PPUSH
 581: CALL_OW 67
// Say ( Brighton , DBrighton-4 ) ;
 585: LD_EXP 8
 589: PPUSH
 590: LD_STRING DBrighton-4
 592: PPUSH
 593: CALL_OW 88
// Say ( Brighton , DBrighton-5 ) ;
 597: LD_EXP 8
 601: PPUSH
 602: LD_STRING DBrighton-5
 604: PPUSH
 605: CALL_OW 88
// AddComTurnUnit ( Brighton , Megan ) ;
 609: LD_EXP 8
 613: PPUSH
 614: LD_EXP 10
 618: PPUSH
 619: CALL_OW 179
// Say ( Brighton , DBrighton-6 ) ;
 623: LD_EXP 8
 627: PPUSH
 628: LD_STRING DBrighton-6
 630: PPUSH
 631: CALL_OW 88
// Say ( Megan , DMegan-1 ) ;
 635: LD_EXP 10
 639: PPUSH
 640: LD_STRING DMegan-1
 642: PPUSH
 643: CALL_OW 88
// Say ( Brighton , DBrighton-7 ) ;
 647: LD_EXP 8
 651: PPUSH
 652: LD_STRING DBrighton-7
 654: PPUSH
 655: CALL_OW 88
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 659: LD_EXP 8
 663: PPUSH
 664: LD_INT 99
 666: PPUSH
 667: LD_INT 37
 669: PPUSH
 670: CALL_OW 178
// Say ( Brighton , DBrighton-8 ) ;
 674: LD_EXP 8
 678: PPUSH
 679: LD_STRING DBrighton-8
 681: PPUSH
 682: CALL_OW 88
// ChangeMissionObjectives ( C1 ) ;
 686: LD_STRING C1
 688: PPUSH
 689: CALL_OW 337
// InGameOff ;
 693: CALL_OW 9
// SaveForQuickRestart ;
 697: CALL_OW 22
// MissionStart := true ;
 701: LD_ADDR_EXP 1
 705: PUSH
 706: LD_INT 1
 708: ST_TO_ADDR
// music_nat := 1 ;
 709: LD_ADDR_OWVAR 71
 713: PUSH
 714: LD_INT 1
 716: ST_TO_ADDR
// end ;
 717: END
// export ArmadaArrived , FirstAssaultRepelled ; export RuSpeaker ; every 0 0$1 trigger MissionStart do var tmp , i ;
 718: LD_EXP 1
 722: IFFALSE 1917
 724: GO 726
 726: DISABLE
 727: LD_INT 0
 729: PPUSH
 730: PPUSH
// begin wait ( ruArrival ) ;
 731: LD_EXP 41
 735: PPUSH
 736: CALL_OW 67
// PrepareRUArmada ;
 740: CALL 3362 0 0
// wait ( 0 0$3 ) ;
 744: LD_INT 105
 746: PPUSH
 747: CALL_OW 67
// tmp := AreaToList ( RUArrivalParkingArea , 0 ) ;
 751: LD_ADDR_VAR 0 1
 755: PUSH
 756: LD_INT 15
 758: PPUSH
 759: LD_INT 0
 761: PPUSH
 762: CALL_OW 517
 766: ST_TO_ADDR
// for i = 1 to RUArmada do
 767: LD_ADDR_VAR 0 2
 771: PUSH
 772: DOUBLE
 773: LD_INT 1
 775: DEC
 776: ST_TO_ADDR
 777: LD_EXP 16
 781: PUSH
 782: FOR_TO
 783: IFFALSE 832
// ComMoveXY ( RUArmada [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
 785: LD_EXP 16
 789: PUSH
 790: LD_VAR 0 2
 794: ARRAY
 795: PPUSH
 796: LD_VAR 0 1
 800: PUSH
 801: LD_INT 1
 803: ARRAY
 804: PUSH
 805: LD_VAR 0 2
 809: ARRAY
 810: PPUSH
 811: LD_VAR 0 1
 815: PUSH
 816: LD_INT 2
 818: ARRAY
 819: PUSH
 820: LD_VAR 0 2
 824: ARRAY
 825: PPUSH
 826: CALL_OW 111
 830: GO 782
 832: POP
 833: POP
// ArmadaArrived := true ;
 834: LD_ADDR_EXP 2
 838: PUSH
 839: LD_INT 1
 841: ST_TO_ADDR
// Say ( Palmer , DPalmer-A1 ) ;
 842: LD_EXP 9
 846: PPUSH
 847: LD_STRING DPalmer-A1
 849: PPUSH
 850: CALL_OW 88
// Say ( Brighton , DBrighton-A1 ) ;
 854: LD_EXP 8
 858: PPUSH
 859: LD_STRING DBrighton-A1
 861: PPUSH
 862: CALL_OW 88
// wait ( 0 0$20 ) ;
 866: LD_INT 700
 868: PPUSH
 869: CALL_OW 67
// PrepareRUBase ;
 873: CALL 4087 0 0
// PrepareRUBase_v2 ;
 877: CALL 4503 0 0
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
 881: LD_ADDR_EXP 60
 885: PUSH
 886: LD_EXP 60
 890: PPUSH
 891: LD_INT 1
 893: PPUSH
 894: LD_INT 22
 896: PUSH
 897: LD_INT 3
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PPUSH
 904: CALL_OW 69
 908: PPUSH
 909: CALL_OW 1
 913: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , RU_SecondPersonnel ) ;
 914: LD_ADDR_EXP 60
 918: PUSH
 919: LD_EXP 60
 923: PPUSH
 924: LD_INT 2
 926: PPUSH
 927: LD_EXP 35
 931: PPUSH
 932: CALL_OW 1
 936: ST_TO_ADDR
// MC_Start ( ) ;
 937: CALL 49647 0 0
// wait ( 0 0$30 ) ;
 941: LD_INT 1050
 943: PPUSH
 944: CALL_OW 67
// PrepareRUBulldozers ;
 948: CALL 3974 0 0
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
 952: LD_EXP 17
 956: PUSH
 957: LD_INT 1
 959: ARRAY
 960: PPUSH
 961: LD_INT 9
 963: PPUSH
 964: CALL 10892 0 2
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
 968: LD_EXP 17
 972: PUSH
 973: LD_INT 2
 975: ARRAY
 976: PPUSH
 977: LD_INT 11
 979: PPUSH
 980: CALL 10892 0 2
// DoNotAttack ( 1 , Bulldozers [ 1 ] ) ;
 984: LD_INT 1
 986: PPUSH
 987: LD_EXP 17
 991: PUSH
 992: LD_INT 1
 994: ARRAY
 995: PPUSH
 996: CALL_OW 471
// DoNotAttack ( 1 , Bulldozers [ 2 ] ) ;
1000: LD_INT 1
1002: PPUSH
1003: LD_EXP 17
1007: PUSH
1008: LD_INT 2
1010: ARRAY
1011: PPUSH
1012: CALL_OW 471
// wait ( 0 0$30 ) ;
1016: LD_INT 1050
1018: PPUSH
1019: CALL_OW 67
// InGameOn ;
1023: CALL_OW 8
// PlaceSeeing ( 95 , 93 , 1 , - 30 ) ;
1027: LD_INT 95
1029: PPUSH
1030: LD_INT 93
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: LD_INT 30
1038: NEG
1039: PPUSH
1040: CALL_OW 330
// ComMoveXY ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) , 63 , 39 ) ;
1044: LD_INT 10
1046: PPUSH
1047: LD_INT 22
1049: PUSH
1050: LD_INT 1
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: PPUSH
1057: CALL_OW 70
1061: PPUSH
1062: LD_INT 63
1064: PPUSH
1065: LD_INT 39
1067: PPUSH
1068: CALL_OW 111
// CenterOnXY ( 95 , 93 ) ;
1072: LD_INT 95
1074: PPUSH
1075: LD_INT 93
1077: PPUSH
1078: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
1082: LD_INT 35
1084: PPUSH
1085: CALL_OW 67
// if not HasTask ( Bulldozers [ 1 ] ) then
1089: LD_EXP 17
1093: PUSH
1094: LD_INT 1
1096: ARRAY
1097: PPUSH
1098: CALL_OW 314
1102: NOT
1103: IFFALSE 1121
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
1105: LD_EXP 17
1109: PUSH
1110: LD_INT 1
1112: ARRAY
1113: PPUSH
1114: LD_INT 9
1116: PPUSH
1117: CALL 10892 0 2
// if not HasTask ( Bulldozers [ 2 ] ) then
1121: LD_EXP 17
1125: PUSH
1126: LD_INT 2
1128: ARRAY
1129: PPUSH
1130: CALL_OW 314
1134: NOT
1135: IFFALSE 1153
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
1137: LD_EXP 17
1141: PUSH
1142: LD_INT 2
1144: ARRAY
1145: PPUSH
1146: LD_INT 11
1148: PPUSH
1149: CALL 10892 0 2
// until ListEnvironmentArea ( BulldozerArea ) < 2 or ListEnvironmentArea ( BulldozerArea2 ) < 2 or IsDead ( Bulldozers [ 1 ] ) ;
1153: LD_INT 9
1155: PPUSH
1156: CALL_OW 353
1160: PUSH
1161: LD_INT 2
1163: LESS
1164: PUSH
1165: LD_INT 11
1167: PPUSH
1168: CALL_OW 353
1172: PUSH
1173: LD_INT 2
1175: LESS
1176: OR
1177: PUSH
1178: LD_EXP 17
1182: PUSH
1183: LD_INT 1
1185: ARRAY
1186: PPUSH
1187: CALL_OW 301
1191: OR
1192: IFFALSE 1082
// if UnitFilter ( Bulldozers , [ f_ok ] ) then
1194: LD_EXP 17
1198: PPUSH
1199: LD_INT 50
1201: PUSH
1202: EMPTY
1203: LIST
1204: PPUSH
1205: CALL_OW 72
1209: IFFALSE 1262
// begin wait ( 0 0$10 ) ;
1211: LD_INT 350
1213: PPUSH
1214: CALL_OW 67
// ComMoveXY ( Bulldozers , 120 , 131 ) ;
1218: LD_EXP 17
1222: PPUSH
1223: LD_INT 120
1225: PPUSH
1226: LD_INT 131
1228: PPUSH
1229: CALL_OW 111
// for i in Bulldozers do
1233: LD_ADDR_VAR 0 2
1237: PUSH
1238: LD_EXP 17
1242: PUSH
1243: FOR_IN
1244: IFFALSE 1260
// NormalAttack ( 1 , i ) ;
1246: LD_INT 1
1248: PPUSH
1249: LD_VAR 0 2
1253: PPUSH
1254: CALL_OW 472
1258: GO 1243
1260: POP
1261: POP
// end ; wait ( 0 0$10 ) ;
1262: LD_INT 350
1264: PPUSH
1265: CALL_OW 67
// RemoveSeeing ( 95 , 93 , 1 ) ;
1269: LD_INT 95
1271: PPUSH
1272: LD_INT 93
1274: PPUSH
1275: LD_INT 1
1277: PPUSH
1278: CALL_OW 331
// Say ( Yashin , DDeath-Yas-1 ) ;
1282: LD_EXP 12
1286: PPUSH
1287: LD_STRING DDeath-Yas-1
1289: PPUSH
1290: CALL_OW 88
// SayEffect ( DRuSol-A1 ) ;
1294: LD_STRING DRuSol-A1
1296: PPUSH
1297: CALL_OW 96
// wait ( 0 0$2 ) ;
1301: LD_INT 70
1303: PPUSH
1304: CALL_OW 67
// InGameOff ;
1308: CALL_OW 9
// ComMoveXY ( RUArmada , 66 , 40 ) ;
1312: LD_EXP 16
1316: PPUSH
1317: LD_INT 66
1319: PPUSH
1320: LD_INT 40
1322: PPUSH
1323: CALL_OW 111
// wait ( 0 0$2 ) ;
1327: LD_INT 70
1329: PPUSH
1330: CALL_OW 67
// Say ( Gaydar , DDeath-Gay-2 ) ;
1334: LD_EXP 14
1338: PPUSH
1339: LD_STRING DDeath-Gay-2
1341: PPUSH
1342: CALL_OW 88
// wait ( 0 0$20 ) ;
1346: LD_INT 700
1348: PPUSH
1349: CALL_OW 67
// AssaultStarted := true ;
1353: LD_ADDR_EXP 7
1357: PUSH
1358: LD_INT 1
1360: ST_TO_ADDR
// Say ( Popov , DDeath-Pop-1 ) ;
1361: LD_EXP 13
1365: PPUSH
1366: LD_STRING DDeath-Pop-1
1368: PPUSH
1369: CALL_OW 88
// Say ( Gaydar , DDeath-Gay-1 ) ;
1373: LD_EXP 14
1377: PPUSH
1378: LD_STRING DDeath-Gay-1
1380: PPUSH
1381: CALL_OW 88
// wait ( 0 0$5 ) ;
1385: LD_INT 175
1387: PPUSH
1388: CALL_OW 67
// Say ( Sevi , DDeath-Vse-1 ) ;
1392: LD_EXP 15
1396: PPUSH
1397: LD_STRING DDeath-Vse-1
1399: PPUSH
1400: CALL_OW 88
// PriorityAttack ( 6 , BetaA ) ;
1404: LD_INT 6
1406: PPUSH
1407: LD_INT 1
1409: PPUSH
1410: CALL_OW 470
// PriorityAttack ( 6 , BetaB ) ;
1414: LD_INT 6
1416: PPUSH
1417: LD_INT 3
1419: PPUSH
1420: CALL_OW 470
// repeat for i in RuArmada do
1424: LD_ADDR_VAR 0 2
1428: PUSH
1429: LD_EXP 16
1433: PUSH
1434: FOR_IN
1435: IFFALSE 1485
// if not HasTask ( i ) then
1437: LD_VAR 0 2
1441: PPUSH
1442: CALL_OW 314
1446: NOT
1447: IFFALSE 1483
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
1449: LD_VAR 0 2
1453: PPUSH
1454: LD_INT 22
1456: PUSH
1457: LD_INT 1
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PPUSH
1464: CALL_OW 69
1468: PPUSH
1469: LD_VAR 0 2
1473: PPUSH
1474: CALL_OW 74
1478: PPUSH
1479: CALL_OW 115
1483: GO 1434
1485: POP
1486: POP
// wait ( 0 0$1 ) until FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_type , unit_human ] ] ) < 10 and IsDead ( Yashin ) and IsDead ( Popov ) and IsDead ( Gaydar ) and IsDead ( Sevi ) ;
1487: LD_INT 35
1489: PPUSH
1490: CALL_OW 67
1494: LD_INT 1
1496: PUSH
1497: LD_INT 22
1499: PUSH
1500: LD_INT 6
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: PUSH
1507: LD_INT 21
1509: PUSH
1510: LD_INT 1
1512: PUSH
1513: EMPTY
1514: LIST
1515: LIST
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: LIST
1521: PPUSH
1522: CALL_OW 69
1526: PUSH
1527: LD_INT 10
1529: LESS
1530: PUSH
1531: LD_EXP 12
1535: PPUSH
1536: CALL_OW 301
1540: AND
1541: PUSH
1542: LD_EXP 13
1546: PPUSH
1547: CALL_OW 301
1551: AND
1552: PUSH
1553: LD_EXP 14
1557: PPUSH
1558: CALL_OW 301
1562: AND
1563: PUSH
1564: LD_EXP 15
1568: PPUSH
1569: CALL_OW 301
1573: AND
1574: IFFALSE 1424
// AssaultStarted := false ;
1576: LD_ADDR_EXP 7
1580: PUSH
1581: LD_INT 0
1583: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ f_side , 6 ] ) , 120 , 131 ) ;
1584: LD_INT 22
1586: PUSH
1587: LD_INT 6
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: PPUSH
1594: CALL_OW 69
1598: PPUSH
1599: LD_INT 120
1601: PPUSH
1602: LD_INT 131
1604: PPUSH
1605: CALL_OW 111
// RuSpeaker := FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_sex , sex_male ] , [ f_type , unit_human ] , [ f_lives , 500 ] ] ) ;
1609: LD_ADDR_EXP 4
1613: PUSH
1614: LD_INT 1
1616: PUSH
1617: LD_INT 22
1619: PUSH
1620: LD_INT 6
1622: PUSH
1623: EMPTY
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 26
1629: PUSH
1630: LD_INT 1
1632: PUSH
1633: EMPTY
1634: LIST
1635: LIST
1636: PUSH
1637: LD_INT 21
1639: PUSH
1640: LD_INT 1
1642: PUSH
1643: EMPTY
1644: LIST
1645: LIST
1646: PUSH
1647: LD_INT 24
1649: PUSH
1650: LD_INT 500
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: PPUSH
1664: CALL_OW 69
1668: ST_TO_ADDR
// if RuSpeaker then
1669: LD_EXP 4
1673: IFFALSE 1691
// Say ( RuSpeaker [ 1 ] , DRuSol-A2 ) ;
1675: LD_EXP 4
1679: PUSH
1680: LD_INT 1
1682: ARRAY
1683: PPUSH
1684: LD_STRING DRuSol-A2
1686: PPUSH
1687: CALL_OW 88
// wait ( 0 0$30 ) ;
1691: LD_INT 1050
1693: PPUSH
1694: CALL_OW 67
// DialogueOn ;
1698: CALL_OW 6
// Say ( Brighton , DBrighton-B1 ) ;
1702: LD_EXP 8
1706: PPUSH
1707: LD_STRING DBrighton-B1
1709: PPUSH
1710: CALL_OW 88
// Say ( Palmer , DPalmer-B1 ) ;
1714: LD_EXP 9
1718: PPUSH
1719: LD_STRING DPalmer-B1
1721: PPUSH
1722: CALL_OW 88
// Say ( Brighton , DBrighton-B2 ) ;
1726: LD_EXP 8
1730: PPUSH
1731: LD_STRING DBrighton-B2
1733: PPUSH
1734: CALL_OW 88
// SayRadio ( Burlak , DBurlak-B1 ) ;
1738: LD_EXP 18
1742: PPUSH
1743: LD_STRING DBurlak-B1
1745: PPUSH
1746: CALL_OW 94
// Say ( Brighton , DBrighton-B3 ) ;
1750: LD_EXP 8
1754: PPUSH
1755: LD_STRING DBrighton-B3
1757: PPUSH
1758: CALL_OW 88
// Say ( Palmer , DPalmer-B2 ) ;
1762: LD_EXP 9
1766: PPUSH
1767: LD_STRING DPalmer-B2
1769: PPUSH
1770: CALL_OW 88
// Say ( Brighton , DBrighton-B4 ) ;
1774: LD_EXP 8
1778: PPUSH
1779: LD_STRING DBrighton-B4
1781: PPUSH
1782: CALL_OW 88
// Say ( Brighton , DBrighton-B5 ) ;
1786: LD_EXP 8
1790: PPUSH
1791: LD_STRING DBrighton-B5
1793: PPUSH
1794: CALL_OW 88
// DialogueOff ;
1798: CALL_OW 7
// ChangeMissionObjectives ( C2 ) ;
1802: LD_STRING C2
1804: PPUSH
1805: CALL_OW 337
// FirstAssaultRepelled := true ;
1809: LD_ADDR_EXP 3
1813: PUSH
1814: LD_INT 1
1816: ST_TO_ADDR
// RemoveUnit ( Bulldozers [ 1 ] ) ;
1817: LD_EXP 17
1821: PUSH
1822: LD_INT 1
1824: ARRAY
1825: PPUSH
1826: CALL_OW 64
// RemoveUnit ( Bulldozers [ 2 ] ) ;
1830: LD_EXP 17
1834: PUSH
1835: LD_INT 2
1837: ARRAY
1838: PPUSH
1839: CALL_OW 64
// AddComExitVehicle ( FilterAllUnits ( [ f_side , 6 ] ) ) ;
1843: LD_INT 22
1845: PUSH
1846: LD_INT 6
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PPUSH
1853: CALL_OW 69
1857: PPUSH
1858: CALL_OW 181
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
1862: LD_INT 22
1864: PUSH
1865: LD_INT 6
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PPUSH
1872: CALL_OW 69
1876: PPUSH
1877: LD_INT 3
1879: PPUSH
1880: CALL_OW 235
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
1884: LD_ADDR_EXP 60
1888: PUSH
1889: LD_EXP 60
1893: PPUSH
1894: LD_INT 1
1896: PPUSH
1897: LD_INT 22
1899: PUSH
1900: LD_INT 3
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: PPUSH
1907: CALL_OW 69
1911: PPUSH
1912: CALL_OW 1
1916: ST_TO_ADDR
// end ;
1917: PPOPN 2
1919: END
// every 0 0$1 trigger FirstAssaultRepelled and jmmArrival > 0 0$00 do
1920: LD_EXP 3
1924: PUSH
1925: LD_EXP 40
1929: PUSH
1930: LD_INT 0
1932: GREATER
1933: AND
1934: IFFALSE 1954
1936: GO 1938
1938: DISABLE
// begin enable ;
1939: ENABLE
// jmmArrival := jmmArrival - 0 0$01 ;
1940: LD_ADDR_EXP 40
1944: PUSH
1945: LD_EXP 40
1949: PUSH
1950: LD_INT 35
1952: MINUS
1953: ST_TO_ADDR
// end ;
1954: END
// export JMM_Arrived ; every 0 0$1 trigger jmmArrival = 0 0$00 do
1955: LD_EXP 40
1959: PUSH
1960: LD_INT 0
1962: EQUAL
1963: IFFALSE 2069
1965: GO 1967
1967: DISABLE
// begin JMMReinforcement ;
1968: CALL 4831 0 0
// DialogueOn ;
1972: CALL_OW 6
// CenterOnUnits ( JMM ) ;
1976: LD_EXP 36
1980: PPUSH
1981: CALL_OW 85
// Say ( JMM , DJMM-F1 ) ;
1985: LD_EXP 36
1989: PPUSH
1990: LD_STRING DJMM-F1
1992: PPUSH
1993: CALL_OW 88
// if RussiansDefeated then
1997: LD_EXP 42
2001: IFFALSE 2027
// begin AddMedal ( Russians , 1 ) ;
2003: LD_STRING Russians
2005: PPUSH
2006: LD_INT 1
2008: PPUSH
2009: CALL_OW 101
// Say ( Brighton , DBrighton-F1a ) ;
2013: LD_EXP 8
2017: PPUSH
2018: LD_STRING DBrighton-F1a
2020: PPUSH
2021: CALL_OW 88
// end else
2025: GO 2057
// begin AddMedal ( Russians , - 1 ) ;
2027: LD_STRING Russians
2029: PPUSH
2030: LD_INT 1
2032: NEG
2033: PPUSH
2034: CALL_OW 101
// Say ( Brighton , DBrighton-F1 ) ;
2038: LD_EXP 8
2042: PPUSH
2043: LD_STRING DBrighton-F1
2045: PPUSH
2046: CALL_OW 88
// ChangeMissionObjectives ( C3 ) ;
2050: LD_STRING C3
2052: PPUSH
2053: CALL_OW 337
// end ; DialogueOff ;
2057: CALL_OW 7
// JMM_Arrived := true ;
2061: LD_ADDR_EXP 5
2065: PUSH
2066: LD_INT 1
2068: ST_TO_ADDR
// end ;
2069: END
// every 0 0$1 trigger JMM_Arrived and See ( 1 , Burlak ) do
2070: LD_EXP 5
2074: PUSH
2075: LD_INT 1
2077: PPUSH
2078: LD_EXP 18
2082: PPUSH
2083: CALL_OW 292
2087: AND
2088: IFFALSE 2117
2090: GO 2092
2092: DISABLE
// begin Say ( Burlak , DBurlak ) ;
2093: LD_EXP 18
2097: PPUSH
2098: LD_STRING DBurlak
2100: PPUSH
2101: CALL_OW 88
// Say ( JMM , DJMM ) ;
2105: LD_EXP 36
2109: PPUSH
2110: LD_STRING DJMM
2112: PPUSH
2113: CALL_OW 88
// end ;
2117: END
// export LaserBuilt ; every 0 0$1 trigger FilterAllUnits ( [ f_and , [ f_side , 1 ] , [ f_or , [ f_weapon , us_laser ] , [ f_bweapon , us_laser ] ] ] ) > 1 do
2118: LD_INT 1
2120: PUSH
2121: LD_INT 22
2123: PUSH
2124: LD_INT 1
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: PUSH
2131: LD_INT 2
2133: PUSH
2134: LD_INT 34
2136: PUSH
2137: LD_INT 9
2139: PUSH
2140: EMPTY
2141: LIST
2142: LIST
2143: PUSH
2144: LD_INT 35
2146: PUSH
2147: LD_INT 9
2149: PUSH
2150: EMPTY
2151: LIST
2152: LIST
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: LIST
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: LIST
2163: PPUSH
2164: CALL_OW 69
2168: PUSH
2169: LD_INT 1
2171: GREATER
2172: IFFALSE 2185
2174: GO 2176
2176: DISABLE
// begin LaserBuilt := true ;
2177: LD_ADDR_EXP 6
2181: PUSH
2182: LD_INT 1
2184: ST_TO_ADDR
// end ;
2185: END
// export AssaultStarted ; every 0 0$1 trigger AssaultStarted and See ( 6 , NearestUnitToUnit ( FilterAllUnits ( [ f_and , [ [ f_side , 1 ] , [ f_bweapon , us_laser ] ] ] ) , IsInUnit ( Sevi ) ) ) do
2186: LD_EXP 7
2190: PUSH
2191: LD_INT 6
2193: PPUSH
2194: LD_INT 1
2196: PUSH
2197: LD_INT 22
2199: PUSH
2200: LD_INT 1
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: PUSH
2207: LD_INT 35
2209: PUSH
2210: LD_INT 9
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: PPUSH
2225: CALL_OW 69
2229: PPUSH
2230: LD_EXP 15
2234: PPUSH
2235: CALL_OW 310
2239: PPUSH
2240: CALL_OW 74
2244: PPUSH
2245: CALL_OW 292
2249: AND
2250: IFFALSE 2286
2252: GO 2254
2254: DISABLE
// begin wait ( 0 0$5 ) ;
2255: LD_INT 175
2257: PPUSH
2258: CALL_OW 67
// Say ( Sevi , DDeath-Vse-2 ) ;
2262: LD_EXP 15
2266: PPUSH
2267: LD_STRING DDeath-Vse-2
2269: PPUSH
2270: CALL_OW 88
// Say ( Yashin , DDeath-Yas-2 ) ;
2274: LD_EXP 12
2278: PPUSH
2279: LD_STRING DDeath-Yas-2
2281: PPUSH
2282: CALL_OW 88
// end ;
2286: END
// every 0 0$1 trigger AssaultStarted do
2287: LD_EXP 7
2291: IFFALSE 2315
2293: GO 2295
2295: DISABLE
// begin wait ( 0 0$20 ) ;
2296: LD_INT 700
2298: PPUSH
2299: CALL_OW 67
// Say ( Popov , DDeath-Pop-2 ) ;
2303: LD_EXP 13
2307: PPUSH
2308: LD_STRING DDeath-Pop-2
2310: PPUSH
2311: CALL_OW 88
// end ;
2315: END
// every 0 0$1 trigger MissionStart do
2316: LD_EXP 1
2320: IFFALSE 2362
2322: GO 2324
2324: DISABLE
// begin wait ( rand ( 0 0$50 , 2 2$20 ) ) ;
2325: LD_INT 1750
2327: PPUSH
2328: LD_INT 4900
2330: PPUSH
2331: CALL_OW 12
2335: PPUSH
2336: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
2340: LD_INT 2
2342: PPUSH
2343: LD_INT 5
2345: PPUSH
2346: CALL_OW 12
2350: PPUSH
2351: LD_INT 12
2353: PPUSH
2354: LD_INT 1
2356: PPUSH
2357: CALL_OW 55
// enable ;
2361: ENABLE
// end ;
2362: END
// every 0 0$1 trigger MissionStart do
2363: LD_EXP 1
2367: IFFALSE 2390
2369: GO 2371
2371: DISABLE
// begin enable ;
2372: ENABLE
// display_Strings := [ #tick , tick ] ;
2373: LD_ADDR_OWVAR 47
2377: PUSH
2378: LD_STRING #tick
2380: PUSH
2381: LD_OWVAR 1
2385: PUSH
2386: EMPTY
2387: LIST
2388: LIST
2389: ST_TO_ADDR
// end ; end_of_file
2390: END
// export Brighton , Palmer , Megan ; export BetaSquad ; export function PrepareHeroes ; begin
2391: LD_INT 0
2393: PPUSH
// uc_side := 1 ;
2394: LD_ADDR_OWVAR 20
2398: PUSH
2399: LD_INT 1
2401: ST_TO_ADDR
// hc_class = class_soldier ;
2402: LD_ADDR_OWVAR 28
2406: PUSH
2407: LD_INT 1
2409: ST_TO_ADDR
// uc_nation := nation_american ;
2410: LD_ADDR_OWVAR 21
2414: PUSH
2415: LD_INT 1
2417: ST_TO_ADDR
// hc_sex = sex_male ;
2418: LD_ADDR_OWVAR 27
2422: PUSH
2423: LD_INT 1
2425: ST_TO_ADDR
// hc_importance = 110 ;
2426: LD_ADDR_OWVAR 32
2430: PUSH
2431: LD_INT 110
2433: ST_TO_ADDR
// hc_basic_skills = [ 5 , 4 , 5 , 3 ] ;
2434: LD_ADDR_OWVAR 30
2438: PUSH
2439: LD_INT 5
2441: PUSH
2442: LD_INT 4
2444: PUSH
2445: LD_INT 5
2447: PUSH
2448: LD_INT 3
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: LIST
2455: LIST
2456: ST_TO_ADDR
// hc_skills = [ 9 , 6 , 7 , 6 ] ;
2457: LD_ADDR_OWVAR 31
2461: PUSH
2462: LD_INT 9
2464: PUSH
2465: LD_INT 6
2467: PUSH
2468: LD_INT 7
2470: PUSH
2471: LD_INT 6
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: LIST
2478: LIST
2479: ST_TO_ADDR
// hc_attr = [ 12 , 10 ] ;
2480: LD_ADDR_OWVAR 29
2484: PUSH
2485: LD_INT 12
2487: PUSH
2488: LD_INT 10
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: ST_TO_ADDR
// hc_name := Gerard Brighton ;
2495: LD_ADDR_OWVAR 26
2499: PUSH
2500: LD_STRING Gerard Brighton
2502: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2503: LD_ADDR_OWVAR 33
2507: PUSH
2508: LD_STRING Beta_Skirmish
2510: ST_TO_ADDR
// hc_face_number := 1 ;
2511: LD_ADDR_OWVAR 34
2515: PUSH
2516: LD_INT 1
2518: ST_TO_ADDR
// Brighton := CreateHuman ;
2519: LD_ADDR_EXP 8
2523: PUSH
2524: CALL_OW 44
2528: ST_TO_ADDR
// uc_nation := nation_american ;
2529: LD_ADDR_OWVAR 21
2533: PUSH
2534: LD_INT 1
2536: ST_TO_ADDR
// hc_importance = 80 ;
2537: LD_ADDR_OWVAR 32
2541: PUSH
2542: LD_INT 80
2544: ST_TO_ADDR
// hc_sex = sex_male ;
2545: LD_ADDR_OWVAR 27
2549: PUSH
2550: LD_INT 1
2552: ST_TO_ADDR
// hc_basic_skills = [ 5 , 5 , 3 , 1 ] ;
2553: LD_ADDR_OWVAR 30
2557: PUSH
2558: LD_INT 5
2560: PUSH
2561: LD_INT 5
2563: PUSH
2564: LD_INT 3
2566: PUSH
2567: LD_INT 1
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: ST_TO_ADDR
// hc_skills = [ 7 , 6 , 5 , 3 ] ;
2576: LD_ADDR_OWVAR 31
2580: PUSH
2581: LD_INT 7
2583: PUSH
2584: LD_INT 6
2586: PUSH
2587: LD_INT 5
2589: PUSH
2590: LD_INT 3
2592: PUSH
2593: EMPTY
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2599: LD_ADDR_OWVAR 29
2603: PUSH
2604: LD_INT 10
2606: PUSH
2607: LD_INT 10
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: ST_TO_ADDR
// hc_name := Brian Palmer ;
2614: LD_ADDR_OWVAR 26
2618: PUSH
2619: LD_STRING Brian Palmer
2621: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2622: LD_ADDR_OWVAR 33
2626: PUSH
2627: LD_STRING Beta_Skirmish
2629: ST_TO_ADDR
// hc_face_number := 3 ;
2630: LD_ADDR_OWVAR 34
2634: PUSH
2635: LD_INT 3
2637: ST_TO_ADDR
// Palmer := CreateHuman ;
2638: LD_ADDR_EXP 9
2642: PUSH
2643: CALL_OW 44
2647: ST_TO_ADDR
// hc_class = class_scientistic ;
2648: LD_ADDR_OWVAR 28
2652: PUSH
2653: LD_INT 4
2655: ST_TO_ADDR
// uc_nation := nation_american ;
2656: LD_ADDR_OWVAR 21
2660: PUSH
2661: LD_INT 1
2663: ST_TO_ADDR
// hc_importance = 70 ;
2664: LD_ADDR_OWVAR 32
2668: PUSH
2669: LD_INT 70
2671: ST_TO_ADDR
// hc_sex = sex_female ;
2672: LD_ADDR_OWVAR 27
2676: PUSH
2677: LD_INT 2
2679: ST_TO_ADDR
// hc_basic_skills = [ 3 , 2 , 4 , 6 ] ;
2680: LD_ADDR_OWVAR 30
2684: PUSH
2685: LD_INT 3
2687: PUSH
2688: LD_INT 2
2690: PUSH
2691: LD_INT 4
2693: PUSH
2694: LD_INT 6
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: ST_TO_ADDR
// hc_skills = [ 4 , 2 , 5 , 8 ] ;
2703: LD_ADDR_OWVAR 31
2707: PUSH
2708: LD_INT 4
2710: PUSH
2711: LD_INT 2
2713: PUSH
2714: LD_INT 5
2716: PUSH
2717: LD_INT 8
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: LIST
2724: LIST
2725: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2726: LD_ADDR_OWVAR 29
2730: PUSH
2731: LD_INT 10
2733: PUSH
2734: LD_INT 10
2736: PUSH
2737: EMPTY
2738: LIST
2739: LIST
2740: ST_TO_ADDR
// hc_name := Megan Armitage ;
2741: LD_ADDR_OWVAR 26
2745: PUSH
2746: LD_STRING Megan Armitage
2748: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2749: LD_ADDR_OWVAR 33
2753: PUSH
2754: LD_STRING Beta_Skirmish
2756: ST_TO_ADDR
// hc_face_number := 4 ;
2757: LD_ADDR_OWVAR 34
2761: PUSH
2762: LD_INT 4
2764: ST_TO_ADDR
// Megan := CreateHuman ;
2765: LD_ADDR_EXP 10
2769: PUSH
2770: CALL_OW 44
2774: ST_TO_ADDR
// end ;
2775: LD_VAR 0 1
2779: RET
// export function PrepareBeta ; var i , filter , un , soldiers ; begin
2780: LD_INT 0
2782: PPUSH
2783: PPUSH
2784: PPUSH
2785: PPUSH
2786: PPUSH
// uc_side := 1 ;
2787: LD_ADDR_OWVAR 20
2791: PUSH
2792: LD_INT 1
2794: ST_TO_ADDR
// uc_nation := nation_american ;
2795: LD_ADDR_OWVAR 21
2799: PUSH
2800: LD_INT 1
2802: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
2803: LD_ADDR_VAR 0 2
2807: PUSH
2808: LD_INT 22
2810: PUSH
2811: LD_INT 1
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: PUSH
2818: LD_INT 30
2820: PUSH
2821: LD_INT 32
2823: PUSH
2824: EMPTY
2825: LIST
2826: LIST
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PPUSH
2832: CALL_OW 69
2836: PUSH
2837: FOR_IN
2838: IFFALSE 2893
// PlaceWeaponTurret ( i , [ us_light_gun , us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun , us_gatling_gun ] [ rand ( 1 , 7 ) ] ) ;
2840: LD_VAR 0 2
2844: PPUSH
2845: LD_INT 3
2847: PUSH
2848: LD_INT 3
2850: PUSH
2851: LD_INT 4
2853: PUSH
2854: LD_INT 5
2856: PUSH
2857: LD_INT 11
2859: PUSH
2860: LD_INT 3
2862: PUSH
2863: LD_INT 4
2865: PUSH
2866: EMPTY
2867: LIST
2868: LIST
2869: LIST
2870: LIST
2871: LIST
2872: LIST
2873: LIST
2874: PUSH
2875: LD_INT 1
2877: PPUSH
2878: LD_INT 7
2880: PPUSH
2881: CALL_OW 12
2885: ARRAY
2886: PPUSH
2887: CALL_OW 431
2891: GO 2837
2893: POP
2894: POP
// hc_name :=  ;
2895: LD_ADDR_OWVAR 26
2899: PUSH
2900: LD_STRING 
2902: ST_TO_ADDR
// hc_gallery :=  ;
2903: LD_ADDR_OWVAR 33
2907: PUSH
2908: LD_STRING 
2910: ST_TO_ADDR
// for i = 1 to [ 6 , 5 , 5 ] [ Difficulty ] do
2911: LD_ADDR_VAR 0 2
2915: PUSH
2916: DOUBLE
2917: LD_INT 1
2919: DEC
2920: ST_TO_ADDR
2921: LD_INT 6
2923: PUSH
2924: LD_INT 5
2926: PUSH
2927: LD_INT 5
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: LIST
2934: PUSH
2935: LD_OWVAR 67
2939: ARRAY
2940: PUSH
2941: FOR_TO
2942: IFFALSE 3000
// begin PrepareSoldier ( 1 , game_skill ) ;
2944: LD_INT 1
2946: PPUSH
2947: LD_EXP 38
2951: PPUSH
2952: CALL_OW 381
// un := CreateHuman ;
2956: LD_ADDR_VAR 0 4
2960: PUSH
2961: CALL_OW 44
2965: ST_TO_ADDR
// filter := filter ^ un ;
2966: LD_ADDR_VAR 0 3
2970: PUSH
2971: LD_VAR 0 3
2975: PUSH
2976: LD_VAR 0 4
2980: ADD
2981: ST_TO_ADDR
// soldiers := soldiers ^ un ;
2982: LD_ADDR_VAR 0 5
2986: PUSH
2987: LD_VAR 0 5
2991: PUSH
2992: LD_VAR 0 4
2996: ADD
2997: ST_TO_ADDR
// end ;
2998: GO 2941
3000: POP
3001: POP
// for i = 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3002: LD_ADDR_VAR 0 2
3006: PUSH
3007: DOUBLE
3008: LD_INT 1
3010: DEC
3011: ST_TO_ADDR
3012: LD_INT 3
3014: PUSH
3015: LD_INT 2
3017: PUSH
3018: LD_INT 2
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: LIST
3025: PUSH
3026: LD_OWVAR 67
3030: ARRAY
3031: PUSH
3032: FOR_TO
3033: IFFALSE 3087
// begin PrepareEngineer ( 0 , game_skill ) ;
3035: LD_INT 0
3037: PPUSH
3038: LD_EXP 38
3042: PPUSH
3043: CALL_OW 382
// un := CreateHuman ;
3047: LD_ADDR_VAR 0 4
3051: PUSH
3052: CALL_OW 44
3056: ST_TO_ADDR
// filter := filter ^ un ;
3057: LD_ADDR_VAR 0 3
3061: PUSH
3062: LD_VAR 0 3
3066: PUSH
3067: LD_VAR 0 4
3071: ADD
3072: ST_TO_ADDR
// PlaceHumanInUnit ( un , BetaB ) ;
3073: LD_VAR 0 4
3077: PPUSH
3078: LD_INT 3
3080: PPUSH
3081: CALL_OW 52
// end ;
3085: GO 3032
3087: POP
3088: POP
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
3089: LD_ADDR_VAR 0 2
3093: PUSH
3094: DOUBLE
3095: LD_INT 1
3097: DEC
3098: ST_TO_ADDR
3099: LD_INT 4
3101: PUSH
3102: LD_INT 3
3104: PUSH
3105: LD_INT 3
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: LIST
3112: PUSH
3113: LD_OWVAR 67
3117: ARRAY
3118: PUSH
3119: FOR_TO
3120: IFFALSE 3174
// begin PrepareMechanic ( 0 , game_skill ) ;
3122: LD_INT 0
3124: PPUSH
3125: LD_EXP 38
3129: PPUSH
3130: CALL_OW 383
// un := CreateHuman ;
3134: LD_ADDR_VAR 0 4
3138: PUSH
3139: CALL_OW 44
3143: ST_TO_ADDR
// filter := filter ^ un ;
3144: LD_ADDR_VAR 0 3
3148: PUSH
3149: LD_VAR 0 3
3153: PUSH
3154: LD_VAR 0 4
3158: ADD
3159: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmFac ) ;
3160: LD_VAR 0 4
3164: PPUSH
3165: LD_INT 8
3167: PPUSH
3168: CALL_OW 52
// end ;
3172: GO 3119
3174: POP
3175: POP
// for i = 1 to 2 do
3176: LD_ADDR_VAR 0 2
3180: PUSH
3181: DOUBLE
3182: LD_INT 1
3184: DEC
3185: ST_TO_ADDR
3186: LD_INT 2
3188: PUSH
3189: FOR_TO
3190: IFFALSE 3244
// begin PrepareScientist ( 0 , game_skill ) ;
3192: LD_INT 0
3194: PPUSH
3195: LD_EXP 38
3199: PPUSH
3200: CALL_OW 384
// un := CreateHuman ;
3204: LD_ADDR_VAR 0 4
3208: PUSH
3209: CALL_OW 44
3213: ST_TO_ADDR
// filter := filter ^ un ;
3214: LD_ADDR_VAR 0 3
3218: PUSH
3219: LD_VAR 0 3
3223: PUSH
3224: LD_VAR 0 4
3228: ADD
3229: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmLab ) ;
3230: LD_VAR 0 4
3234: PPUSH
3235: LD_INT 14
3237: PPUSH
3238: CALL_OW 52
// end ;
3242: GO 3189
3244: POP
3245: POP
// for i = 1 to soldiers do
3246: LD_ADDR_VAR 0 2
3250: PUSH
3251: DOUBLE
3252: LD_INT 1
3254: DEC
3255: ST_TO_ADDR
3256: LD_VAR 0 5
3260: PUSH
3261: FOR_TO
3262: IFFALSE 3287
// PlaceUnitArea ( soldiers [ i ] , spawn_area , false ) ;
3264: LD_VAR 0 5
3268: PUSH
3269: LD_VAR 0 2
3273: ARRAY
3274: PPUSH
3275: LD_INT 1
3277: PPUSH
3278: LD_INT 0
3280: PPUSH
3281: CALL_OW 49
3285: GO 3261
3287: POP
3288: POP
// PlaceUnitXY ( Brighton , 51 , 43 , false ) ;
3289: LD_EXP 8
3293: PPUSH
3294: LD_INT 51
3296: PPUSH
3297: LD_INT 43
3299: PPUSH
3300: LD_INT 0
3302: PPUSH
3303: CALL_OW 48
// PlaceUnitXY ( Palmer , 55 , 58 , false ) ;
3307: LD_EXP 9
3311: PPUSH
3312: LD_INT 55
3314: PPUSH
3315: LD_INT 58
3317: PPUSH
3318: LD_INT 0
3320: PPUSH
3321: CALL_OW 48
// PlaceUnitXY ( Megan , 39 , 36 , false ) ;
3325: LD_EXP 10
3329: PPUSH
3330: LD_INT 39
3332: PPUSH
3333: LD_INT 36
3335: PPUSH
3336: LD_INT 0
3338: PPUSH
3339: CALL_OW 48
// BetaSquad := filter diff 0 ;
3343: LD_ADDR_EXP 11
3347: PUSH
3348: LD_VAR 0 3
3352: PUSH
3353: LD_INT 0
3355: DIFF
3356: ST_TO_ADDR
// end ;
3357: LD_VAR 0 1
3361: RET
// export Yashin , Popov , Gaydar , Sevi ; export RUArmada ; export function PrepareRUArmada ; var i , vehicle , soldiers , un , vehs ; begin
3362: LD_INT 0
3364: PPUSH
3365: PPUSH
3366: PPUSH
3367: PPUSH
3368: PPUSH
3369: PPUSH
// uc_side := 6 ;
3370: LD_ADDR_OWVAR 20
3374: PUSH
3375: LD_INT 6
3377: ST_TO_ADDR
// uc_nation := nation_russian ;
3378: LD_ADDR_OWVAR 21
3382: PUSH
3383: LD_INT 3
3385: ST_TO_ADDR
// soldiers := [ ] ;
3386: LD_ADDR_VAR 0 4
3390: PUSH
3391: EMPTY
3392: ST_TO_ADDR
// vehs := [ ] ;
3393: LD_ADDR_VAR 0 6
3397: PUSH
3398: EMPTY
3399: ST_TO_ADDR
// RUArmada := [ ] ;
3400: LD_ADDR_EXP 16
3404: PUSH
3405: EMPTY
3406: ST_TO_ADDR
// Yashin := NewCharacter ( Yashin ) ;
3407: LD_ADDR_EXP 12
3411: PUSH
3412: LD_STRING Yashin
3414: PPUSH
3415: CALL_OW 25
3419: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
3420: LD_ADDR_EXP 13
3424: PUSH
3425: LD_STRING Popov
3427: PPUSH
3428: CALL_OW 25
3432: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
3433: LD_ADDR_EXP 14
3437: PUSH
3438: LD_STRING Gaydar
3440: PPUSH
3441: CALL_OW 25
3445: ST_TO_ADDR
// Sevi := NewCharacter ( Vsevolod ) ;
3446: LD_ADDR_EXP 15
3450: PUSH
3451: LD_STRING Vsevolod
3453: PPUSH
3454: CALL_OW 25
3458: ST_TO_ADDR
// for i = 1 to 16 do
3459: LD_ADDR_VAR 0 2
3463: PUSH
3464: DOUBLE
3465: LD_INT 1
3467: DEC
3468: ST_TO_ADDR
3469: LD_INT 16
3471: PUSH
3472: FOR_TO
3473: IFFALSE 3515
// begin PrepareSoldier ( 0 , game_eskill ) ;
3475: LD_INT 0
3477: PPUSH
3478: LD_EXP 39
3482: PPUSH
3483: CALL_OW 381
// un := CreateHuman ;
3487: LD_ADDR_VAR 0 5
3491: PUSH
3492: CALL_OW 44
3496: ST_TO_ADDR
// soldiers := soldiers ^ un ;
3497: LD_ADDR_VAR 0 4
3501: PUSH
3502: LD_VAR 0 4
3506: PUSH
3507: LD_VAR 0 5
3511: ADD
3512: ST_TO_ADDR
// end ;
3513: GO 3472
3515: POP
3516: POP
// soldiers := Yashin ^ Popov ^ Gaydar ^ Sevi ^ soldiers ;
3517: LD_ADDR_VAR 0 4
3521: PUSH
3522: LD_EXP 12
3526: PUSH
3527: LD_EXP 13
3531: ADD
3532: PUSH
3533: LD_EXP 14
3537: ADD
3538: PUSH
3539: LD_EXP 15
3543: ADD
3544: PUSH
3545: LD_VAR 0 4
3549: ADD
3550: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_heavy_gun , 100 ) ;
3551: LD_INT 24
3553: PPUSH
3554: LD_INT 3
3556: PPUSH
3557: LD_INT 1
3559: PPUSH
3560: LD_INT 46
3562: PPUSH
3563: LD_INT 100
3565: PPUSH
3566: CALL 16006 0 5
// for i = 1 to 8 do
3570: LD_ADDR_VAR 0 2
3574: PUSH
3575: DOUBLE
3576: LD_INT 1
3578: DEC
3579: ST_TO_ADDR
3580: LD_INT 8
3582: PUSH
3583: FOR_TO
3584: IFFALSE 3667
// begin vehicle := CreateVehicle ;
3586: LD_ADDR_VAR 0 3
3590: PUSH
3591: CALL_OW 45
3595: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3596: LD_VAR 0 4
3600: PUSH
3601: LD_INT 1
3603: ARRAY
3604: PPUSH
3605: LD_VAR 0 3
3609: PPUSH
3610: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3614: LD_ADDR_VAR 0 4
3618: PUSH
3619: LD_VAR 0 4
3623: PUSH
3624: LD_VAR 0 4
3628: PUSH
3629: LD_INT 1
3631: ARRAY
3632: DIFF
3633: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3634: LD_VAR 0 3
3638: PPUSH
3639: LD_INT 5
3641: PPUSH
3642: LD_INT 0
3644: PPUSH
3645: CALL_OW 49
// vehs := vehs ^ vehicle ;
3649: LD_ADDR_VAR 0 6
3653: PUSH
3654: LD_VAR 0 6
3658: PUSH
3659: LD_VAR 0 3
3663: ADD
3664: ST_TO_ADDR
// end ;
3665: GO 3583
3667: POP
3668: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
3669: LD_INT 24
3671: PPUSH
3672: LD_INT 3
3674: PPUSH
3675: LD_INT 1
3677: PPUSH
3678: LD_INT 43
3680: PPUSH
3681: LD_INT 100
3683: PPUSH
3684: CALL 16006 0 5
// for i = 1 to 8 do
3688: LD_ADDR_VAR 0 2
3692: PUSH
3693: DOUBLE
3694: LD_INT 1
3696: DEC
3697: ST_TO_ADDR
3698: LD_INT 8
3700: PUSH
3701: FOR_TO
3702: IFFALSE 3785
// begin vehicle := CreateVehicle ;
3704: LD_ADDR_VAR 0 3
3708: PUSH
3709: CALL_OW 45
3713: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3714: LD_VAR 0 4
3718: PUSH
3719: LD_INT 1
3721: ARRAY
3722: PPUSH
3723: LD_VAR 0 3
3727: PPUSH
3728: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3732: LD_ADDR_VAR 0 4
3736: PUSH
3737: LD_VAR 0 4
3741: PUSH
3742: LD_VAR 0 4
3746: PUSH
3747: LD_INT 1
3749: ARRAY
3750: DIFF
3751: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3752: LD_VAR 0 3
3756: PPUSH
3757: LD_INT 5
3759: PPUSH
3760: LD_INT 0
3762: PPUSH
3763: CALL_OW 49
// vehs := vehs ^ vehicle ;
3767: LD_ADDR_VAR 0 6
3771: PUSH
3772: LD_VAR 0 6
3776: PUSH
3777: LD_VAR 0 3
3781: ADD
3782: ST_TO_ADDR
// end ;
3783: GO 3701
3785: POP
3786: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gun , 100 ) ;
3787: LD_INT 22
3789: PPUSH
3790: LD_INT 3
3792: PPUSH
3793: LD_INT 1
3795: PPUSH
3796: LD_INT 44
3798: PPUSH
3799: LD_INT 100
3801: PPUSH
3802: CALL 16006 0 5
// for i = 1 to 4 do
3806: LD_ADDR_VAR 0 2
3810: PUSH
3811: DOUBLE
3812: LD_INT 1
3814: DEC
3815: ST_TO_ADDR
3816: LD_INT 4
3818: PUSH
3819: FOR_TO
3820: IFFALSE 3903
// begin vehicle := CreateVehicle ;
3822: LD_ADDR_VAR 0 3
3826: PUSH
3827: CALL_OW 45
3831: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3832: LD_VAR 0 4
3836: PUSH
3837: LD_INT 1
3839: ARRAY
3840: PPUSH
3841: LD_VAR 0 3
3845: PPUSH
3846: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3850: LD_ADDR_VAR 0 4
3854: PUSH
3855: LD_VAR 0 4
3859: PUSH
3860: LD_VAR 0 4
3864: PUSH
3865: LD_INT 1
3867: ARRAY
3868: DIFF
3869: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3870: LD_VAR 0 3
3874: PPUSH
3875: LD_INT 5
3877: PPUSH
3878: LD_INT 0
3880: PPUSH
3881: CALL_OW 49
// vehs := vehs ^ vehicle ;
3885: LD_ADDR_VAR 0 6
3889: PUSH
3890: LD_VAR 0 6
3894: PUSH
3895: LD_VAR 0 3
3899: ADD
3900: ST_TO_ADDR
// end ;
3901: GO 3819
3903: POP
3904: POP
// RUArmada := vehs ;
3905: LD_ADDR_EXP 16
3909: PUSH
3910: LD_VAR 0 6
3914: ST_TO_ADDR
// SetMark ( [ IsInUnit ( Yashin ) , IsInUnit ( Popov ) , IsInUnit ( Gaydar ) , IsInUnit ( Sevi ) ] , - 6 ) ;
3915: LD_EXP 12
3919: PPUSH
3920: CALL_OW 310
3924: PUSH
3925: LD_EXP 13
3929: PPUSH
3930: CALL_OW 310
3934: PUSH
3935: LD_EXP 14
3939: PPUSH
3940: CALL_OW 310
3944: PUSH
3945: LD_EXP 15
3949: PPUSH
3950: CALL_OW 310
3954: PUSH
3955: EMPTY
3956: LIST
3957: LIST
3958: LIST
3959: LIST
3960: PPUSH
3961: LD_INT 6
3963: NEG
3964: PPUSH
3965: CALL_OW 242
// end ;
3969: LD_VAR 0 1
3973: RET
// export Bulldozers ; export function PrepareRUBulldozers ; var i , vehicle ; begin
3974: LD_INT 0
3976: PPUSH
3977: PPUSH
3978: PPUSH
// uc_side := 6 ;
3979: LD_ADDR_OWVAR 20
3983: PUSH
3984: LD_INT 6
3986: ST_TO_ADDR
// uc_nation := nation_russian ;
3987: LD_ADDR_OWVAR 21
3991: PUSH
3992: LD_INT 3
3994: ST_TO_ADDR
// Bulldozers := [ ] ;
3995: LD_ADDR_EXP 17
3999: PUSH
4000: EMPTY
4001: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
4002: LD_INT 24
4004: PPUSH
4005: LD_INT 3
4007: PPUSH
4008: LD_INT 3
4010: PPUSH
4011: LD_INT 53
4013: PPUSH
4014: LD_INT 100
4016: PPUSH
4017: CALL 16006 0 5
// for i = 1 to 2 do
4021: LD_ADDR_VAR 0 2
4025: PUSH
4026: DOUBLE
4027: LD_INT 1
4029: DEC
4030: ST_TO_ADDR
4031: LD_INT 2
4033: PUSH
4034: FOR_TO
4035: IFFALSE 4080
// begin vehicle := CreateVehicle ;
4037: LD_ADDR_VAR 0 3
4041: PUSH
4042: CALL_OW 45
4046: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4047: LD_VAR 0 3
4051: PPUSH
4052: LD_INT 5
4054: PPUSH
4055: LD_INT 0
4057: PPUSH
4058: CALL_OW 49
// Bulldozers := Bulldozers ^ vehicle ;
4062: LD_ADDR_EXP 17
4066: PUSH
4067: LD_EXP 17
4071: PUSH
4072: LD_VAR 0 3
4076: ADD
4077: ST_TO_ADDR
// end ;
4078: GO 4034
4080: POP
4081: POP
// end ;
4082: LD_VAR 0 1
4086: RET
// export Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ; export function PrepareRUBase ; var i , filter , un ; begin
4087: LD_INT 0
4089: PPUSH
4090: PPUSH
4091: PPUSH
4092: PPUSH
// uc_side := 3 ;
4093: LD_ADDR_OWVAR 20
4097: PUSH
4098: LD_INT 3
4100: ST_TO_ADDR
// uc_nation := nation_russian ;
4101: LD_ADDR_OWVAR 21
4105: PUSH
4106: LD_INT 3
4108: ST_TO_ADDR
// hc_name :=  ;
4109: LD_ADDR_OWVAR 26
4113: PUSH
4114: LD_STRING 
4116: ST_TO_ADDR
// hc_gallery :=  ;
4117: LD_ADDR_OWVAR 33
4121: PUSH
4122: LD_STRING 
4124: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
4125: LD_ADDR_EXP 18
4129: PUSH
4130: LD_STRING Burlak
4132: PPUSH
4133: CALL_OW 25
4137: ST_TO_ADDR
// Gleb := NewCharacter ( Gleb ) ;
4138: LD_ADDR_EXP 19
4142: PUSH
4143: LD_STRING Gleb
4145: PPUSH
4146: CALL_OW 25
4150: ST_TO_ADDR
// Furmanov := NewCharacter ( Furmanov ) ;
4151: LD_ADDR_EXP 20
4155: PUSH
4156: LD_STRING Furmanov
4158: PPUSH
4159: CALL_OW 25
4163: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
4164: LD_ADDR_EXP 21
4168: PUSH
4169: LD_STRING Titov
4171: PPUSH
4172: CALL_OW 25
4176: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
4177: LD_ADDR_EXP 22
4181: PUSH
4182: LD_STRING Scholtze
4184: PPUSH
4185: CALL_OW 25
4189: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
4190: LD_ADDR_EXP 23
4194: PUSH
4195: LD_STRING Dolgov
4197: PPUSH
4198: CALL_OW 25
4202: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
4203: LD_ADDR_EXP 24
4207: PUSH
4208: LD_STRING Kapitsova
4210: PPUSH
4211: CALL_OW 25
4215: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
4216: LD_ADDR_EXP 25
4220: PUSH
4221: LD_STRING Karamazov
4223: PPUSH
4224: CALL_OW 25
4228: ST_TO_ADDR
// Kirlenkova := NewCharacter ( Kirlenkova ) ;
4229: LD_ADDR_EXP 26
4233: PUSH
4234: LD_STRING Kirlenkova
4236: PPUSH
4237: CALL_OW 25
4241: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
4242: LD_ADDR_EXP 27
4246: PUSH
4247: LD_STRING Kovalyuk
4249: PPUSH
4250: CALL_OW 25
4254: ST_TO_ADDR
// Kozlov := NewCharacter ( Kozlov ) ;
4255: LD_ADDR_EXP 28
4259: PUSH
4260: LD_STRING Kozlov
4262: PPUSH
4263: CALL_OW 25
4267: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
4268: LD_ADDR_EXP 29
4272: PUSH
4273: LD_STRING Kuzmov
4275: PPUSH
4276: CALL_OW 25
4280: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
4281: LD_ADDR_EXP 30
4285: PUSH
4286: LD_STRING Lipshchin
4288: PPUSH
4289: CALL_OW 25
4293: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
4294: LD_ADDR_EXP 31
4298: PUSH
4299: LD_STRING Oblukov
4301: PPUSH
4302: CALL_OW 25
4306: ST_TO_ADDR
// Xavier2 := NewCharacter ( Xavier2 ) ;
4307: LD_ADDR_EXP 32
4311: PUSH
4312: LD_STRING Xavier2
4314: PPUSH
4315: CALL_OW 25
4319: ST_TO_ADDR
// Gnyevko := NewCharacter ( Gnyevko ) ;
4320: LD_ADDR_EXP 33
4324: PUSH
4325: LD_STRING Gnyevko
4327: PPUSH
4328: CALL_OW 25
4332: ST_TO_ADDR
// Belkov := NewCharacter ( Belkov ) ;
4333: LD_ADDR_EXP 34
4337: PUSH
4338: LD_STRING Belkov
4340: PPUSH
4341: CALL_OW 25
4345: ST_TO_ADDR
// filter := [ Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ] ;
4346: LD_ADDR_VAR 0 3
4350: PUSH
4351: LD_EXP 18
4355: PUSH
4356: LD_EXP 19
4360: PUSH
4361: LD_EXP 20
4365: PUSH
4366: LD_EXP 21
4370: PUSH
4371: LD_EXP 22
4375: PUSH
4376: LD_EXP 23
4380: PUSH
4381: LD_EXP 24
4385: PUSH
4386: LD_EXP 25
4390: PUSH
4391: LD_EXP 26
4395: PUSH
4396: LD_EXP 27
4400: PUSH
4401: LD_EXP 28
4405: PUSH
4406: LD_EXP 29
4410: PUSH
4411: LD_EXP 30
4415: PUSH
4416: LD_EXP 31
4420: PUSH
4421: LD_EXP 32
4425: PUSH
4426: LD_EXP 33
4430: PUSH
4431: LD_EXP 34
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: LIST
4453: LIST
4454: ST_TO_ADDR
// for i = 1 to filter do
4455: LD_ADDR_VAR 0 2
4459: PUSH
4460: DOUBLE
4461: LD_INT 1
4463: DEC
4464: ST_TO_ADDR
4465: LD_VAR 0 3
4469: PUSH
4470: FOR_TO
4471: IFFALSE 4496
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4473: LD_VAR 0 3
4477: PUSH
4478: LD_VAR 0 2
4482: ARRAY
4483: PPUSH
4484: LD_INT 6
4486: PPUSH
4487: LD_INT 0
4489: PPUSH
4490: CALL_OW 49
4494: GO 4470
4496: POP
4497: POP
// end ;
4498: LD_VAR 0 1
4502: RET
// export RU_SecondPersonnel ; export function PrepareRUBase_v2 ; var i , filter , un ; begin
4503: LD_INT 0
4505: PPUSH
4506: PPUSH
4507: PPUSH
4508: PPUSH
// uc_side := 3 ;
4509: LD_ADDR_OWVAR 20
4513: PUSH
4514: LD_INT 3
4516: ST_TO_ADDR
// uc_nation := nation_russian ;
4517: LD_ADDR_OWVAR 21
4521: PUSH
4522: LD_INT 3
4524: ST_TO_ADDR
// hc_name :=  ;
4525: LD_ADDR_OWVAR 26
4529: PUSH
4530: LD_STRING 
4532: ST_TO_ADDR
// hc_gallery :=  ;
4533: LD_ADDR_OWVAR 33
4537: PUSH
4538: LD_STRING 
4540: ST_TO_ADDR
// for i = 1 to 8 do
4541: LD_ADDR_VAR 0 2
4545: PUSH
4546: DOUBLE
4547: LD_INT 1
4549: DEC
4550: ST_TO_ADDR
4551: LD_INT 8
4553: PUSH
4554: FOR_TO
4555: IFFALSE 4597
// begin PrepareSoldier ( 0 , game_eskill ) ;
4557: LD_INT 0
4559: PPUSH
4560: LD_EXP 39
4564: PPUSH
4565: CALL_OW 381
// un := CreateHuman ;
4569: LD_ADDR_VAR 0 4
4573: PUSH
4574: CALL_OW 44
4578: ST_TO_ADDR
// filter := filter ^ un ;
4579: LD_ADDR_VAR 0 3
4583: PUSH
4584: LD_VAR 0 3
4588: PUSH
4589: LD_VAR 0 4
4593: ADD
4594: ST_TO_ADDR
// end ;
4595: GO 4554
4597: POP
4598: POP
// for i = 1 to 4 do
4599: LD_ADDR_VAR 0 2
4603: PUSH
4604: DOUBLE
4605: LD_INT 1
4607: DEC
4608: ST_TO_ADDR
4609: LD_INT 4
4611: PUSH
4612: FOR_TO
4613: IFFALSE 4655
// begin PrepareEngineer ( 0 , game_eskill ) ;
4615: LD_INT 0
4617: PPUSH
4618: LD_EXP 39
4622: PPUSH
4623: CALL_OW 382
// un := CreateHuman ;
4627: LD_ADDR_VAR 0 4
4631: PUSH
4632: CALL_OW 44
4636: ST_TO_ADDR
// filter := filter ^ un ;
4637: LD_ADDR_VAR 0 3
4641: PUSH
4642: LD_VAR 0 3
4646: PUSH
4647: LD_VAR 0 4
4651: ADD
4652: ST_TO_ADDR
// end ;
4653: GO 4612
4655: POP
4656: POP
// for i = 1 to 6 do
4657: LD_ADDR_VAR 0 2
4661: PUSH
4662: DOUBLE
4663: LD_INT 1
4665: DEC
4666: ST_TO_ADDR
4667: LD_INT 6
4669: PUSH
4670: FOR_TO
4671: IFFALSE 4713
// begin PrepareMechanic ( 0 , game_eskill ) ;
4673: LD_INT 0
4675: PPUSH
4676: LD_EXP 39
4680: PPUSH
4681: CALL_OW 383
// un := CreateHuman ;
4685: LD_ADDR_VAR 0 4
4689: PUSH
4690: CALL_OW 44
4694: ST_TO_ADDR
// filter := filter ^ un ;
4695: LD_ADDR_VAR 0 3
4699: PUSH
4700: LD_VAR 0 3
4704: PUSH
4705: LD_VAR 0 4
4709: ADD
4710: ST_TO_ADDR
// end ;
4711: GO 4670
4713: POP
4714: POP
// for i = 1 to 4 do
4715: LD_ADDR_VAR 0 2
4719: PUSH
4720: DOUBLE
4721: LD_INT 1
4723: DEC
4724: ST_TO_ADDR
4725: LD_INT 4
4727: PUSH
4728: FOR_TO
4729: IFFALSE 4771
// begin PrepareScientist ( 0 , game_eskill ) ;
4731: LD_INT 0
4733: PPUSH
4734: LD_EXP 39
4738: PPUSH
4739: CALL_OW 384
// un := CreateHuman ;
4743: LD_ADDR_VAR 0 4
4747: PUSH
4748: CALL_OW 44
4752: ST_TO_ADDR
// filter := filter ^ un ;
4753: LD_ADDR_VAR 0 3
4757: PUSH
4758: LD_VAR 0 3
4762: PUSH
4763: LD_VAR 0 4
4767: ADD
4768: ST_TO_ADDR
// end ;
4769: GO 4728
4771: POP
4772: POP
// for i = 1 to filter do
4773: LD_ADDR_VAR 0 2
4777: PUSH
4778: DOUBLE
4779: LD_INT 1
4781: DEC
4782: ST_TO_ADDR
4783: LD_VAR 0 3
4787: PUSH
4788: FOR_TO
4789: IFFALSE 4814
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4791: LD_VAR 0 3
4795: PUSH
4796: LD_VAR 0 2
4800: ARRAY
4801: PPUSH
4802: LD_INT 6
4804: PPUSH
4805: LD_INT 0
4807: PPUSH
4808: CALL_OW 49
4812: GO 4788
4814: POP
4815: POP
// RU_SecondPersonnel := filter ;
4816: LD_ADDR_EXP 35
4820: PUSH
4821: LD_VAR 0 3
4825: ST_TO_ADDR
// end ;
4826: LD_VAR 0 1
4830: RET
// export JMM ; export function JMMReinforcement ; var i , soldiers , un , vehs , vehicle , mechs ; begin
4831: LD_INT 0
4833: PPUSH
4834: PPUSH
4835: PPUSH
4836: PPUSH
4837: PPUSH
4838: PPUSH
4839: PPUSH
// uc_side := 1 ;
4840: LD_ADDR_OWVAR 20
4844: PUSH
4845: LD_INT 1
4847: ST_TO_ADDR
// uc_nation := nation_american ;
4848: LD_ADDR_OWVAR 21
4852: PUSH
4853: LD_INT 1
4855: ST_TO_ADDR
// JMM := NewCharacter ( JMM ) ;
4856: LD_ADDR_EXP 36
4860: PUSH
4861: LD_STRING JMM
4863: PPUSH
4864: CALL_OW 25
4868: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
4869: LD_EXP 36
4873: PPUSH
4874: LD_INT 1
4876: PPUSH
4877: CALL_OW 233
// PlaceUnitArea ( JMM , JMMArrivalArea , false ) ;
4881: LD_EXP 36
4885: PPUSH
4886: LD_INT 7
4888: PPUSH
4889: LD_INT 0
4891: PPUSH
4892: CALL_OW 49
// mechs := [ ] ;
4896: LD_ADDR_VAR 0 7
4900: PUSH
4901: EMPTY
4902: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
4903: LD_ADDR_VAR 0 2
4907: PUSH
4908: DOUBLE
4909: LD_INT 1
4911: DEC
4912: ST_TO_ADDR
4913: LD_INT 4
4915: PUSH
4916: LD_INT 3
4918: PUSH
4919: LD_INT 3
4921: PUSH
4922: EMPTY
4923: LIST
4924: LIST
4925: LIST
4926: PUSH
4927: LD_OWVAR 67
4931: ARRAY
4932: PUSH
4933: FOR_TO
4934: IFFALSE 4995
// begin PrepareSoldier ( 0 , game_skill + 1 ) ;
4936: LD_INT 0
4938: PPUSH
4939: LD_EXP 38
4943: PUSH
4944: LD_INT 1
4946: PLUS
4947: PPUSH
4948: CALL_OW 381
// un := CreateHuman ;
4952: LD_ADDR_VAR 0 4
4956: PUSH
4957: CALL_OW 44
4961: ST_TO_ADDR
// soldiers := soldiers ^ un ;
4962: LD_ADDR_VAR 0 3
4966: PUSH
4967: LD_VAR 0 3
4971: PUSH
4972: LD_VAR 0 4
4976: ADD
4977: ST_TO_ADDR
// PlaceUnitArea ( un , JMMArrivalArea , false ) ;
4978: LD_VAR 0 4
4982: PPUSH
4983: LD_INT 7
4985: PPUSH
4986: LD_INT 0
4988: PPUSH
4989: CALL_OW 49
// end ;
4993: GO 4933
4995: POP
4996: POP
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
4997: LD_ADDR_VAR 0 2
5001: PUSH
5002: DOUBLE
5003: LD_INT 1
5005: DEC
5006: ST_TO_ADDR
5007: LD_INT 7
5009: PUSH
5010: LD_INT 6
5012: PUSH
5013: LD_INT 4
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: LIST
5020: PUSH
5021: LD_OWVAR 67
5025: ARRAY
5026: PUSH
5027: FOR_TO
5028: IFFALSE 5074
// begin PrepareMechanic ( 0 , game_skill + 1 ) ;
5030: LD_INT 0
5032: PPUSH
5033: LD_EXP 38
5037: PUSH
5038: LD_INT 1
5040: PLUS
5041: PPUSH
5042: CALL_OW 383
// un := CreateHuman ;
5046: LD_ADDR_VAR 0 4
5050: PUSH
5051: CALL_OW 44
5055: ST_TO_ADDR
// mechs := mechs ^ un ;
5056: LD_ADDR_VAR 0 7
5060: PUSH
5061: LD_VAR 0 7
5065: PUSH
5066: LD_VAR 0 4
5070: ADD
5071: ST_TO_ADDR
// end ;
5072: GO 5027
5074: POP
5075: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_double_gun , 100 ) ;
5076: LD_INT 3
5078: PPUSH
5079: LD_INT 3
5081: PPUSH
5082: LD_INT 1
5084: PPUSH
5085: LD_INT 5
5087: PPUSH
5088: LD_INT 100
5090: PPUSH
5091: CALL 16006 0 5
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
5095: LD_ADDR_VAR 0 2
5099: PUSH
5100: DOUBLE
5101: LD_INT 1
5103: DEC
5104: ST_TO_ADDR
5105: LD_INT 7
5107: PUSH
5108: LD_INT 6
5110: PUSH
5111: LD_INT 4
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: LIST
5118: PUSH
5119: LD_OWVAR 67
5123: ARRAY
5124: PUSH
5125: FOR_TO
5126: IFFALSE 5221
// begin vehicle := CreateVehicle ;
5128: LD_ADDR_VAR 0 6
5132: PUSH
5133: CALL_OW 45
5137: ST_TO_ADDR
// PlaceHumanInUnit ( mechs [ 1 ] , vehicle ) ;
5138: LD_VAR 0 7
5142: PUSH
5143: LD_INT 1
5145: ARRAY
5146: PPUSH
5147: LD_VAR 0 6
5151: PPUSH
5152: CALL_OW 52
// mechs := mechs diff mechs [ 1 ] ;
5156: LD_ADDR_VAR 0 7
5160: PUSH
5161: LD_VAR 0 7
5165: PUSH
5166: LD_VAR 0 7
5170: PUSH
5171: LD_INT 1
5173: ARRAY
5174: DIFF
5175: ST_TO_ADDR
// SetDir ( vehicle , 1 ) ;
5176: LD_VAR 0 6
5180: PPUSH
5181: LD_INT 1
5183: PPUSH
5184: CALL_OW 233
// PlaceUnitArea ( vehicle , JMMArrivalArea , false ) ;
5188: LD_VAR 0 6
5192: PPUSH
5193: LD_INT 7
5195: PPUSH
5196: LD_INT 0
5198: PPUSH
5199: CALL_OW 49
// vehs := vehs ^ vehicle ;
5203: LD_ADDR_VAR 0 5
5207: PUSH
5208: LD_VAR 0 5
5212: PUSH
5213: LD_VAR 0 6
5217: ADD
5218: ST_TO_ADDR
// end ;
5219: GO 5125
5221: POP
5222: POP
// end ; end_of_file
5223: LD_VAR 0 1
5227: RET
// export game_diff ; export game_skill , game_eskill ; export jmmArrival , ruArrival ; export function GameType ; begin
5228: LD_INT 0
5230: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
5231: LD_ADDR_OWVAR 67
5235: PUSH
5236: LD_INT 0
5238: PPUSH
5239: CALL_OW 426
5243: ST_TO_ADDR
// game_diff := Difficulty ;
5244: LD_ADDR_EXP 37
5248: PUSH
5249: LD_OWVAR 67
5253: ST_TO_ADDR
// game_skill := [ 7 , 6 , 6 ] [ game_diff ] ;
5254: LD_ADDR_EXP 38
5258: PUSH
5259: LD_INT 7
5261: PUSH
5262: LD_INT 6
5264: PUSH
5265: LD_INT 6
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: LIST
5272: PUSH
5273: LD_EXP 37
5277: ARRAY
5278: ST_TO_ADDR
// game_eskill := [ 6 , 7 , 8 ] [ game_diff ] ;
5279: LD_ADDR_EXP 39
5283: PUSH
5284: LD_INT 6
5286: PUSH
5287: LD_INT 7
5289: PUSH
5290: LD_INT 8
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: LIST
5297: PUSH
5298: LD_EXP 37
5302: ARRAY
5303: ST_TO_ADDR
// ruArrival := [ 5 5$00 , 3 3$00 , 2 2$00 ] [ game_diff ] ;
5304: LD_ADDR_EXP 41
5308: PUSH
5309: LD_INT 10500
5311: PUSH
5312: LD_INT 6300
5314: PUSH
5315: LD_INT 4200
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: LIST
5322: PUSH
5323: LD_EXP 37
5327: ARRAY
5328: ST_TO_ADDR
// jmmArrival := [ 35 35$00 , 45 45$00 , 55 55$00 ] [ game_diff ] ;
5329: LD_ADDR_EXP 40
5333: PUSH
5334: LD_INT 73500
5336: PUSH
5337: LD_INT 94500
5339: PUSH
5340: LD_INT 115500
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: LIST
5347: PUSH
5348: LD_EXP 37
5352: ARRAY
5353: ST_TO_ADDR
// end ; end_of_file
5354: LD_VAR 0 1
5358: RET
// export function CustomEvent ( event ) ; begin
5359: LD_INT 0
5361: PPUSH
// end ;
5362: LD_VAR 0 2
5366: RET
// export function CustomInitMacro ( ) ; begin
5367: LD_INT 0
5369: PPUSH
// MC_SetScanArea ( 1 , RU_Base_Area ) ;
5370: LD_INT 1
5372: PPUSH
5373: LD_INT 3
5375: PPUSH
5376: CALL 72487 0 2
// MC_SetParkingArea ( 1 , RU_Base_Parking ) ;
5380: LD_INT 1
5382: PPUSH
5383: LD_INT 4
5385: PPUSH
5386: CALL 72431 0 2
// MC_SetDepositsXY ( 1 , [ [ 136 , 130 , 0 ] , [ 145 , 123 , 0 ] , ] ) ;
5390: LD_INT 1
5392: PPUSH
5393: LD_INT 136
5395: PUSH
5396: LD_INT 130
5398: PUSH
5399: LD_INT 0
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: LIST
5406: PUSH
5407: LD_INT 145
5409: PUSH
5410: LD_INT 123
5412: PUSH
5413: LD_INT 0
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: LIST
5420: PUSH
5421: EMPTY
5422: LIST
5423: LIST
5424: PPUSH
5425: CALL 71490 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5429: LD_INT 1
5431: PPUSH
5432: LD_INT 43
5434: PUSH
5435: LD_INT 46
5437: PUSH
5438: LD_INT 45
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: LIST
5445: PPUSH
5446: CALL 72319 0 2
// MC_SetCratesArea ( 1 , RU_Base_Area ) ;
5450: LD_INT 1
5452: PPUSH
5453: LD_INT 3
5455: PPUSH
5456: CALL 72001 0 2
// MC_SetTame ( 1 , RU_Base_Area ) ;
5460: LD_INT 1
5462: PPUSH
5463: LD_INT 3
5465: PPUSH
5466: CALL 71732 0 2
// MC_SetDefenderLimit ( 1 , 8 ) ;
5470: LD_INT 1
5472: PPUSH
5473: LD_INT 8
5475: PPUSH
5476: CALL 71351 0 2
// MC_SetProduceList ( 1 , [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] ] ) ;
5480: LD_INT 1
5482: PPUSH
5483: LD_INT 22
5485: PUSH
5486: LD_INT 1
5488: PUSH
5489: LD_INT 3
5491: PUSH
5492: LD_INT 43
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: PUSH
5501: LD_INT 22
5503: PUSH
5504: LD_INT 1
5506: PUSH
5507: LD_INT 3
5509: PUSH
5510: LD_INT 44
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: LIST
5517: LIST
5518: PUSH
5519: LD_INT 22
5521: PUSH
5522: LD_INT 1
5524: PUSH
5525: LD_INT 3
5527: PUSH
5528: LD_INT 45
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: LIST
5535: LIST
5536: PUSH
5537: LD_INT 24
5539: PUSH
5540: LD_INT 1
5542: PUSH
5543: LD_INT 3
5545: PUSH
5546: LD_INT 43
5548: PUSH
5549: EMPTY
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: PUSH
5555: LD_INT 24
5557: PUSH
5558: LD_INT 1
5560: PUSH
5561: LD_INT 3
5563: PUSH
5564: LD_INT 43
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: PUSH
5573: LD_INT 24
5575: PUSH
5576: LD_INT 1
5578: PUSH
5579: LD_INT 3
5581: PUSH
5582: LD_INT 46
5584: PUSH
5585: EMPTY
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: PUSH
5591: LD_INT 22
5593: PUSH
5594: LD_INT 1
5596: PUSH
5597: LD_INT 3
5599: PUSH
5600: LD_INT 43
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: PUSH
5609: LD_INT 22
5611: PUSH
5612: LD_INT 1
5614: PUSH
5615: LD_INT 3
5617: PUSH
5618: LD_INT 44
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: PPUSH
5637: CALL 71166 0 2
// MC_SetBuildingList ( 1 , [ [ b_depot , 127 , 125 , 5 ] , [ b_lab , 124 , 132 , 0 ] , [ b_oil_mine , 136 , 130 , 1 ] , [ b_armoury , 118 , 114 , 2 ] , [ b_oil_mine , 145 , 123 , 1 ] , [ b_oil_power , 150 , 135 , 1 ] , [ b_oil_power , 140 , 134 , 2 ] , [ b_oil_power , 137 , 121 , 5 ] , [ b_workshop , 155 , 130 , 0 ] , [ b_bunker , 155 , 130 , 0 ] , [ b_bunker , 130 , 114 , 3 ] , [ b_bunker , 142 , 115 , 3 ] , [ b_bunker , 153 , 120 , 3 ] , ] ) ;
5641: LD_INT 1
5643: PPUSH
5644: LD_INT 0
5646: PUSH
5647: LD_INT 127
5649: PUSH
5650: LD_INT 125
5652: PUSH
5653: LD_INT 5
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: LIST
5660: LIST
5661: PUSH
5662: LD_INT 6
5664: PUSH
5665: LD_INT 124
5667: PUSH
5668: LD_INT 132
5670: PUSH
5671: LD_INT 0
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: PUSH
5680: LD_INT 29
5682: PUSH
5683: LD_INT 136
5685: PUSH
5686: LD_INT 130
5688: PUSH
5689: LD_INT 1
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: PUSH
5698: LD_INT 4
5700: PUSH
5701: LD_INT 118
5703: PUSH
5704: LD_INT 114
5706: PUSH
5707: LD_INT 2
5709: PUSH
5710: EMPTY
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: PUSH
5716: LD_INT 29
5718: PUSH
5719: LD_INT 145
5721: PUSH
5722: LD_INT 123
5724: PUSH
5725: LD_INT 1
5727: PUSH
5728: EMPTY
5729: LIST
5730: LIST
5731: LIST
5732: LIST
5733: PUSH
5734: LD_INT 26
5736: PUSH
5737: LD_INT 150
5739: PUSH
5740: LD_INT 135
5742: PUSH
5743: LD_INT 1
5745: PUSH
5746: EMPTY
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: PUSH
5752: LD_INT 26
5754: PUSH
5755: LD_INT 140
5757: PUSH
5758: LD_INT 134
5760: PUSH
5761: LD_INT 2
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: PUSH
5770: LD_INT 26
5772: PUSH
5773: LD_INT 137
5775: PUSH
5776: LD_INT 121
5778: PUSH
5779: LD_INT 5
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: LIST
5786: LIST
5787: PUSH
5788: LD_INT 2
5790: PUSH
5791: LD_INT 155
5793: PUSH
5794: LD_INT 130
5796: PUSH
5797: LD_INT 0
5799: PUSH
5800: EMPTY
5801: LIST
5802: LIST
5803: LIST
5804: LIST
5805: PUSH
5806: LD_INT 32
5808: PUSH
5809: LD_INT 155
5811: PUSH
5812: LD_INT 130
5814: PUSH
5815: LD_INT 0
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: PUSH
5824: LD_INT 32
5826: PUSH
5827: LD_INT 130
5829: PUSH
5830: LD_INT 114
5832: PUSH
5833: LD_INT 3
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: LIST
5840: LIST
5841: PUSH
5842: LD_INT 32
5844: PUSH
5845: LD_INT 142
5847: PUSH
5848: LD_INT 115
5850: PUSH
5851: LD_INT 3
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: PUSH
5860: LD_INT 32
5862: PUSH
5863: LD_INT 153
5865: PUSH
5866: LD_INT 120
5868: PUSH
5869: LD_INT 3
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: PPUSH
5893: CALL 71058 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_computer ] ) ;
5897: LD_INT 1
5899: PPUSH
5900: LD_INT 10
5902: PUSH
5903: LD_INT 12
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: PPUSH
5910: CALL 71908 0 2
// MC_SetFactoryExtension ( 1 , 155 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
5914: LD_INT 1
5916: PPUSH
5917: LD_INT 155
5919: PPUSH
5920: LD_INT 130
5922: PPUSH
5923: LD_INT 0
5925: PPUSH
5926: LD_INT 24
5928: PUSH
5929: LD_INT 16
5931: PUSH
5932: LD_INT 17
5934: PUSH
5935: LD_INT 18
5937: PUSH
5938: LD_INT 21
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: PPUSH
5948: CALL 72113 0 5
// MC_SetScanArea ( 2 , RU_Base_Area ) ;
5952: LD_INT 2
5954: PPUSH
5955: LD_INT 3
5957: PPUSH
5958: CALL 72487 0 2
// MC_SetParkingArea ( 2 , RU_Base_Parking ) ;
5962: LD_INT 2
5964: PPUSH
5965: LD_INT 4
5967: PPUSH
5968: CALL 72431 0 2
// MC_SetDepositsXY ( 2 , [ [ 84 , 125 , 1 ] , ] ) ;
5972: LD_INT 2
5974: PPUSH
5975: LD_INT 84
5977: PUSH
5978: LD_INT 125
5980: PUSH
5981: LD_INT 1
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: LIST
5988: PUSH
5989: EMPTY
5990: LIST
5991: PPUSH
5992: CALL 71490 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5996: LD_INT 2
5998: PPUSH
5999: LD_INT 43
6001: PUSH
6002: LD_INT 46
6004: PUSH
6005: LD_INT 45
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: LIST
6012: PPUSH
6013: CALL 72319 0 2
// MC_SetCratesArea ( 2 , RU_Base_Area ) ;
6017: LD_INT 2
6019: PPUSH
6020: LD_INT 3
6022: PPUSH
6023: CALL 72001 0 2
// MC_SetTame ( 2 , RU_Base_Area ) ;
6027: LD_INT 2
6029: PPUSH
6030: LD_INT 3
6032: PPUSH
6033: CALL 71732 0 2
// MC_SetDefenderLimit ( 2 , 8 ) ;
6037: LD_INT 2
6039: PPUSH
6040: LD_INT 8
6042: PPUSH
6043: CALL 71351 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] ] ) ;
6047: LD_INT 2
6049: PPUSH
6050: LD_INT 22
6052: PUSH
6053: LD_INT 3
6055: PUSH
6056: LD_INT 3
6058: PUSH
6059: LD_INT 43
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: LIST
6066: LIST
6067: PUSH
6068: LD_INT 22
6070: PUSH
6071: LD_INT 3
6073: PUSH
6074: LD_INT 3
6076: PUSH
6077: LD_INT 44
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: LIST
6084: LIST
6085: PUSH
6086: LD_INT 22
6088: PUSH
6089: LD_INT 3
6091: PUSH
6092: LD_INT 3
6094: PUSH
6095: LD_INT 45
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: PUSH
6104: LD_INT 24
6106: PUSH
6107: LD_INT 3
6109: PUSH
6110: LD_INT 3
6112: PUSH
6113: LD_INT 43
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: PUSH
6122: LD_INT 24
6124: PUSH
6125: LD_INT 3
6127: PUSH
6128: LD_INT 3
6130: PUSH
6131: LD_INT 43
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: PUSH
6140: LD_INT 24
6142: PUSH
6143: LD_INT 3
6145: PUSH
6146: LD_INT 3
6148: PUSH
6149: LD_INT 46
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 22
6160: PUSH
6161: LD_INT 3
6163: PUSH
6164: LD_INT 3
6166: PUSH
6167: LD_INT 43
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 22
6178: PUSH
6179: LD_INT 3
6181: PUSH
6182: LD_INT 3
6184: PUSH
6185: LD_INT 44
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: PPUSH
6204: CALL 71166 0 2
// MC_SetBuildingList ( 2 , [ [ b_depot , 96 , 125 , 0 ] , [ b_lab , 74 , 122 , 1 ] , [ b_siberite_mine , 84 , 125 , 1 ] , [ b_siberite_power , 86 , 128 , 1 ] , [ b_siberite_power , 85 , 130 , 2 ] , [ b_siberite_power , 88 , 132 , 5 ] , [ b_workshop , 106 , 130 , 0 ] , [ b_armoury , 99 , 114 , 3 ] , [ b_bunker , 72 , 112 , 2 ] , [ b_bunker , 78 , 110 , 3 ] , [ b_bunker , 84 , 110 , 2 ] , [ b_bunker , 105 , 117 , 3 ] , ] ) ;
6208: LD_INT 2
6210: PPUSH
6211: LD_INT 0
6213: PUSH
6214: LD_INT 96
6216: PUSH
6217: LD_INT 125
6219: PUSH
6220: LD_INT 0
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: PUSH
6229: LD_INT 6
6231: PUSH
6232: LD_INT 74
6234: PUSH
6235: LD_INT 122
6237: PUSH
6238: LD_INT 1
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: PUSH
6247: LD_INT 30
6249: PUSH
6250: LD_INT 84
6252: PUSH
6253: LD_INT 125
6255: PUSH
6256: LD_INT 1
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: PUSH
6265: LD_INT 28
6267: PUSH
6268: LD_INT 86
6270: PUSH
6271: LD_INT 128
6273: PUSH
6274: LD_INT 1
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: PUSH
6283: LD_INT 28
6285: PUSH
6286: LD_INT 85
6288: PUSH
6289: LD_INT 130
6291: PUSH
6292: LD_INT 2
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: PUSH
6301: LD_INT 28
6303: PUSH
6304: LD_INT 88
6306: PUSH
6307: LD_INT 132
6309: PUSH
6310: LD_INT 5
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 2
6321: PUSH
6322: LD_INT 106
6324: PUSH
6325: LD_INT 130
6327: PUSH
6328: LD_INT 0
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: PUSH
6337: LD_INT 4
6339: PUSH
6340: LD_INT 99
6342: PUSH
6343: LD_INT 114
6345: PUSH
6346: LD_INT 3
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: PUSH
6355: LD_INT 32
6357: PUSH
6358: LD_INT 72
6360: PUSH
6361: LD_INT 112
6363: PUSH
6364: LD_INT 2
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: PUSH
6373: LD_INT 32
6375: PUSH
6376: LD_INT 78
6378: PUSH
6379: LD_INT 110
6381: PUSH
6382: LD_INT 3
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 32
6393: PUSH
6394: LD_INT 84
6396: PUSH
6397: LD_INT 110
6399: PUSH
6400: LD_INT 2
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: PUSH
6409: LD_INT 32
6411: PUSH
6412: LD_INT 105
6414: PUSH
6415: LD_INT 117
6417: PUSH
6418: LD_INT 3
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: PPUSH
6441: CALL 71058 0 2
// MC_SetLabKind ( 2 , [ b_lab_spacetime , b_lab_siberium ] ) ;
6445: LD_INT 2
6447: PPUSH
6448: LD_INT 14
6450: PUSH
6451: LD_INT 11
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: PPUSH
6458: CALL 71908 0 2
// MC_SetFactoryExtension ( 2 , 106 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
6462: LD_INT 2
6464: PPUSH
6465: LD_INT 106
6467: PPUSH
6468: LD_INT 130
6470: PPUSH
6471: LD_INT 0
6473: PPUSH
6474: LD_INT 24
6476: PUSH
6477: LD_INT 16
6479: PUSH
6480: LD_INT 17
6482: PUSH
6483: LD_INT 18
6485: PUSH
6486: LD_INT 21
6488: PUSH
6489: EMPTY
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: PPUSH
6496: CALL 72113 0 5
// end ;
6500: LD_VAR 0 1
6504: RET
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
6505: LD_INT 22
6507: PUSH
6508: LD_INT 3
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: PUSH
6515: LD_INT 30
6517: PUSH
6518: LD_INT 3
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: PPUSH
6529: CALL_OW 69
6533: IFFALSE 7389
6535: GO 6537
6537: DISABLE
6538: LD_INT 0
6540: PPUSH
6541: PPUSH
6542: PPUSH
6543: PPUSH
6544: PPUSH
6545: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
6546: LD_INT 6300
6548: PUSH
6549: LD_INT 4200
6551: PUSH
6552: LD_INT 2100
6554: PUSH
6555: EMPTY
6556: LIST
6557: LIST
6558: LIST
6559: PUSH
6560: LD_OWVAR 67
6564: ARRAY
6565: PPUSH
6566: CALL_OW 67
// base := 2 ;
6570: LD_ADDR_VAR 0 2
6574: PUSH
6575: LD_INT 2
6577: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
6578: LD_INT 22
6580: PUSH
6581: LD_INT 3
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: LD_INT 30
6590: PUSH
6591: LD_INT 3
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PPUSH
6602: CALL_OW 69
6606: NOT
6607: IFFALSE 6611
// continue ;
6609: GO 6546
// case Rand ( 1 , 3 ) of 1 :
6611: LD_INT 1
6613: PPUSH
6614: LD_INT 3
6616: PPUSH
6617: CALL_OW 12
6621: PUSH
6622: LD_INT 1
6624: DOUBLE
6625: EQUAL
6626: IFTRUE 6630
6628: GO 6806
6630: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6631: LD_ADDR_VAR 0 3
6635: PUSH
6636: LD_INT 22
6638: PUSH
6639: LD_INT 3
6641: PUSH
6642: LD_INT 3
6644: PUSH
6645: LD_INT 43
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: PUSH
6654: LD_INT 24
6656: PUSH
6657: LD_INT 3
6659: PUSH
6660: LD_INT 3
6662: PUSH
6663: LD_INT 46
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: PUSH
6672: LD_INT 24
6674: PUSH
6675: LD_INT 3
6677: PUSH
6678: LD_INT 3
6680: PUSH
6681: LD_INT 43
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: PUSH
6690: LD_INT 24
6692: PUSH
6693: LD_INT 3
6695: PUSH
6696: LD_INT 3
6698: PUSH
6699: LD_INT 46
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 22
6710: PUSH
6711: LD_INT 3
6713: PUSH
6714: LD_INT 3
6716: PUSH
6717: LD_INT 45
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: PUSH
6726: LD_INT 22
6728: PUSH
6729: LD_INT 3
6731: PUSH
6732: LD_INT 3
6734: PUSH
6735: LD_INT 43
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: PUSH
6744: LD_INT 24
6746: PUSH
6747: LD_INT 3
6749: PUSH
6750: LD_INT 3
6752: PUSH
6753: LD_INT 46
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: PUSH
6762: LD_INT 22
6764: PUSH
6765: LD_INT 3
6767: PUSH
6768: LD_INT 3
6770: PUSH
6771: LD_INT 45
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6790: LD_VAR 0 2
6794: PPUSH
6795: LD_VAR 0 3
6799: PPUSH
6800: CALL 71214 0 2
// end ; 2 :
6804: GO 7137
6806: LD_INT 2
6808: DOUBLE
6809: EQUAL
6810: IFTRUE 6814
6812: GO 6952
6814: POP
// begin tmp := [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6815: LD_ADDR_VAR 0 3
6819: PUSH
6820: LD_INT 24
6822: PUSH
6823: LD_INT 3
6825: PUSH
6826: LD_INT 3
6828: PUSH
6829: LD_INT 43
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: PUSH
6838: LD_INT 24
6840: PUSH
6841: LD_INT 3
6843: PUSH
6844: LD_INT 3
6846: PUSH
6847: LD_INT 46
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: PUSH
6856: LD_INT 24
6858: PUSH
6859: LD_INT 3
6861: PUSH
6862: LD_INT 3
6864: PUSH
6865: LD_INT 43
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 24
6876: PUSH
6877: LD_INT 3
6879: PUSH
6880: LD_INT 3
6882: PUSH
6883: LD_INT 46
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: PUSH
6892: LD_INT 22
6894: PUSH
6895: LD_INT 3
6897: PUSH
6898: LD_INT 3
6900: PUSH
6901: LD_INT 45
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: PUSH
6910: LD_INT 22
6912: PUSH
6913: LD_INT 3
6915: PUSH
6916: LD_INT 3
6918: PUSH
6919: LD_INT 45
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6936: LD_VAR 0 2
6940: PPUSH
6941: LD_VAR 0 3
6945: PPUSH
6946: CALL 71214 0 2
// end ; 3 :
6950: GO 7137
6952: LD_INT 3
6954: DOUBLE
6955: EQUAL
6956: IFTRUE 6960
6958: GO 7136
6960: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6961: LD_ADDR_VAR 0 3
6965: PUSH
6966: LD_INT 22
6968: PUSH
6969: LD_INT 3
6971: PUSH
6972: LD_INT 3
6974: PUSH
6975: LD_INT 43
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: PUSH
6984: LD_INT 24
6986: PUSH
6987: LD_INT 3
6989: PUSH
6990: LD_INT 3
6992: PUSH
6993: LD_INT 46
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: PUSH
7002: LD_INT 22
7004: PUSH
7005: LD_INT 3
7007: PUSH
7008: LD_INT 3
7010: PUSH
7011: LD_INT 43
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: PUSH
7020: LD_INT 24
7022: PUSH
7023: LD_INT 3
7025: PUSH
7026: LD_INT 3
7028: PUSH
7029: LD_INT 46
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: PUSH
7038: LD_INT 22
7040: PUSH
7041: LD_INT 3
7043: PUSH
7044: LD_INT 3
7046: PUSH
7047: LD_INT 45
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: PUSH
7056: LD_INT 22
7058: PUSH
7059: LD_INT 3
7061: PUSH
7062: LD_INT 3
7064: PUSH
7065: LD_INT 43
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: PUSH
7074: LD_INT 24
7076: PUSH
7077: LD_INT 3
7079: PUSH
7080: LD_INT 3
7082: PUSH
7083: LD_INT 46
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: PUSH
7092: LD_INT 22
7094: PUSH
7095: LD_INT 3
7097: PUSH
7098: LD_INT 3
7100: PUSH
7101: LD_INT 45
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7120: LD_VAR 0 2
7124: PPUSH
7125: LD_VAR 0 3
7129: PPUSH
7130: CALL 71214 0 2
// end ; end ;
7134: GO 7137
7136: POP
// repeat wait ( 0 0$1 ) ;
7137: LD_INT 35
7139: PPUSH
7140: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
7144: LD_VAR 0 2
7148: PPUSH
7149: CALL 71562 0 1
7153: PUSH
7154: LD_INT 0
7156: EQUAL
7157: IFFALSE 7137
// wait ( 0 0$30 ) ;
7159: LD_INT 1050
7161: PPUSH
7162: CALL_OW 67
// _target := [ [ 86 , 77 ] , [ 63 , 38 ] ] ;
7166: LD_ADDR_VAR 0 5
7170: PUSH
7171: LD_INT 86
7173: PUSH
7174: LD_INT 77
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PUSH
7181: LD_INT 63
7183: PUSH
7184: LD_INT 38
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
7195: LD_ADDR_VAR 0 4
7199: PUSH
7200: LD_INT 0
7202: PUSH
7203: LD_INT 0
7205: PUSH
7206: LD_INT 0
7208: PUSH
7209: LD_INT 1
7211: PUSH
7212: LD_INT 0
7214: PUSH
7215: LD_INT 0
7217: PUSH
7218: LD_INT 0
7220: PUSH
7221: LD_INT 0
7223: PUSH
7224: LD_INT 1
7226: PUSH
7227: LD_INT 0
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
7242: LD_ADDR_VAR 0 6
7246: PUSH
7247: LD_EXP 79
7251: PUSH
7252: LD_VAR 0 2
7256: ARRAY
7257: PUSH
7258: LD_EXP 82
7262: PUSH
7263: LD_VAR 0 2
7267: ARRAY
7268: DIFF
7269: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
7270: LD_ADDR_EXP 79
7274: PUSH
7275: LD_EXP 79
7279: PPUSH
7280: LD_VAR 0 2
7284: PPUSH
7285: LD_EXP 79
7289: PUSH
7290: LD_VAR 0 2
7294: ARRAY
7295: PUSH
7296: LD_VAR 0 6
7300: DIFF
7301: PPUSH
7302: CALL_OW 1
7306: ST_TO_ADDR
// if not attackers then
7307: LD_VAR 0 6
7311: NOT
7312: IFFALSE 7316
// continue ;
7314: GO 6546
// repeat wait ( 0 0$1 ) ;
7316: LD_INT 35
7318: PPUSH
7319: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
7323: LD_VAR 0 6
7327: PPUSH
7328: LD_INT 60
7330: PUSH
7331: EMPTY
7332: LIST
7333: PPUSH
7334: CALL_OW 72
7338: NOT
7339: IFFALSE 7316
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
7341: LD_VAR 0 2
7345: PPUSH
7346: LD_VAR 0 6
7350: PPUSH
7351: LD_VAR 0 5
7355: PPUSH
7356: LD_VAR 0 4
7360: PPUSH
7361: CALL 71399 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
7365: LD_EXP 60
7369: PUSH
7370: LD_VAR 0 2
7374: ARRAY
7375: PPUSH
7376: LD_INT 50
7378: PUSH
7379: EMPTY
7380: LIST
7381: PPUSH
7382: CALL_OW 72
7386: NOT
7387: IFFALSE 6546
// end ;
7389: PPOPN 6
7391: END
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
7392: LD_INT 22
7394: PUSH
7395: LD_INT 3
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 30
7404: PUSH
7405: LD_INT 3
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PPUSH
7416: CALL_OW 69
7420: IFFALSE 8317
7422: GO 7424
7424: DISABLE
7425: LD_INT 0
7427: PPUSH
7428: PPUSH
7429: PPUSH
7430: PPUSH
7431: PPUSH
7432: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
7433: LD_INT 6300
7435: PUSH
7436: LD_INT 4200
7438: PUSH
7439: LD_INT 2100
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: LIST
7446: PUSH
7447: LD_OWVAR 67
7451: ARRAY
7452: PPUSH
7453: CALL_OW 67
// base := 1 ;
7457: LD_ADDR_VAR 0 2
7461: PUSH
7462: LD_INT 1
7464: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
7465: LD_INT 22
7467: PUSH
7468: LD_INT 3
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: LD_INT 30
7477: PUSH
7478: LD_INT 3
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PPUSH
7489: CALL_OW 69
7493: NOT
7494: IFFALSE 7498
// continue ;
7496: GO 7433
// case Rand ( 1 , 3 ) of 1 :
7498: LD_INT 1
7500: PPUSH
7501: LD_INT 3
7503: PPUSH
7504: CALL_OW 12
7508: PUSH
7509: LD_INT 1
7511: DOUBLE
7512: EQUAL
7513: IFTRUE 7517
7515: GO 7693
7517: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7518: LD_ADDR_VAR 0 3
7522: PUSH
7523: LD_INT 22
7525: PUSH
7526: LD_INT 1
7528: PUSH
7529: LD_INT 3
7531: PUSH
7532: LD_INT 43
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: PUSH
7541: LD_INT 24
7543: PUSH
7544: LD_INT 1
7546: PUSH
7547: LD_INT 3
7549: PUSH
7550: LD_INT 46
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: PUSH
7559: LD_INT 24
7561: PUSH
7562: LD_INT 1
7564: PUSH
7565: LD_INT 3
7567: PUSH
7568: LD_INT 43
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 24
7579: PUSH
7580: LD_INT 1
7582: PUSH
7583: LD_INT 3
7585: PUSH
7586: LD_INT 46
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: PUSH
7595: LD_INT 22
7597: PUSH
7598: LD_INT 1
7600: PUSH
7601: LD_INT 3
7603: PUSH
7604: LD_INT 45
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: PUSH
7613: LD_INT 22
7615: PUSH
7616: LD_INT 1
7618: PUSH
7619: LD_INT 3
7621: PUSH
7622: LD_INT 43
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: PUSH
7631: LD_INT 24
7633: PUSH
7634: LD_INT 1
7636: PUSH
7637: LD_INT 3
7639: PUSH
7640: LD_INT 46
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: PUSH
7649: LD_INT 22
7651: PUSH
7652: LD_INT 1
7654: PUSH
7655: LD_INT 3
7657: PUSH
7658: LD_INT 45
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7677: LD_VAR 0 2
7681: PPUSH
7682: LD_VAR 0 3
7686: PPUSH
7687: CALL 71214 0 2
// end ; 2 :
7691: GO 8062
7693: LD_INT 2
7695: DOUBLE
7696: EQUAL
7697: IFTRUE 7701
7699: GO 7877
7701: POP
// begin tmp := [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7702: LD_ADDR_VAR 0 3
7706: PUSH
7707: LD_INT 24
7709: PUSH
7710: LD_INT 1
7712: PUSH
7713: LD_INT 3
7715: PUSH
7716: LD_INT 43
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: PUSH
7725: LD_INT 24
7727: PUSH
7728: LD_INT 1
7730: PUSH
7731: LD_INT 3
7733: PUSH
7734: LD_INT 46
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: PUSH
7743: LD_INT 24
7745: PUSH
7746: LD_INT 1
7748: PUSH
7749: LD_INT 3
7751: PUSH
7752: LD_INT 43
7754: PUSH
7755: EMPTY
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: PUSH
7761: LD_INT 24
7763: PUSH
7764: LD_INT 1
7766: PUSH
7767: LD_INT 3
7769: PUSH
7770: LD_INT 46
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: PUSH
7779: LD_INT 22
7781: PUSH
7782: LD_INT 1
7784: PUSH
7785: LD_INT 3
7787: PUSH
7788: LD_INT 45
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: PUSH
7797: LD_INT 22
7799: PUSH
7800: LD_INT 1
7802: PUSH
7803: LD_INT 3
7805: PUSH
7806: LD_INT 45
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: PUSH
7815: LD_INT 22
7817: PUSH
7818: LD_INT 1
7820: PUSH
7821: LD_INT 3
7823: PUSH
7824: LD_INT 45
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: PUSH
7833: LD_INT 22
7835: PUSH
7836: LD_INT 1
7838: PUSH
7839: LD_INT 3
7841: PUSH
7842: LD_INT 45
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7861: LD_VAR 0 2
7865: PPUSH
7866: LD_VAR 0 3
7870: PPUSH
7871: CALL 71214 0 2
// end ; 3 :
7875: GO 8062
7877: LD_INT 3
7879: DOUBLE
7880: EQUAL
7881: IFTRUE 7885
7883: GO 8061
7885: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7886: LD_ADDR_VAR 0 3
7890: PUSH
7891: LD_INT 22
7893: PUSH
7894: LD_INT 1
7896: PUSH
7897: LD_INT 3
7899: PUSH
7900: LD_INT 43
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: PUSH
7909: LD_INT 24
7911: PUSH
7912: LD_INT 1
7914: PUSH
7915: LD_INT 3
7917: PUSH
7918: LD_INT 46
7920: PUSH
7921: EMPTY
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: PUSH
7927: LD_INT 22
7929: PUSH
7930: LD_INT 1
7932: PUSH
7933: LD_INT 3
7935: PUSH
7936: LD_INT 43
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: PUSH
7945: LD_INT 24
7947: PUSH
7948: LD_INT 1
7950: PUSH
7951: LD_INT 3
7953: PUSH
7954: LD_INT 46
7956: PUSH
7957: EMPTY
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: PUSH
7963: LD_INT 22
7965: PUSH
7966: LD_INT 1
7968: PUSH
7969: LD_INT 3
7971: PUSH
7972: LD_INT 45
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: PUSH
7981: LD_INT 22
7983: PUSH
7984: LD_INT 1
7986: PUSH
7987: LD_INT 3
7989: PUSH
7990: LD_INT 43
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: PUSH
7999: LD_INT 24
8001: PUSH
8002: LD_INT 1
8004: PUSH
8005: LD_INT 3
8007: PUSH
8008: LD_INT 46
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: PUSH
8017: LD_INT 22
8019: PUSH
8020: LD_INT 1
8022: PUSH
8023: LD_INT 3
8025: PUSH
8026: LD_INT 45
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
8045: LD_VAR 0 2
8049: PPUSH
8050: LD_VAR 0 3
8054: PPUSH
8055: CALL 71214 0 2
// end ; end ;
8059: GO 8062
8061: POP
// repeat wait ( 0 0$1 ) ;
8062: LD_INT 35
8064: PPUSH
8065: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 8 ;
8069: LD_VAR 0 2
8073: PPUSH
8074: LD_INT 1
8076: PPUSH
8077: CALL 72632 0 2
8081: PUSH
8082: LD_INT 8
8084: GREATEREQUAL
8085: IFFALSE 8062
// wait ( 0 0$30 ) ;
8087: LD_INT 1050
8089: PPUSH
8090: CALL_OW 67
// _target := [ [ 144 , 65 ] , [ 63 , 38 ] ] ;
8094: LD_ADDR_VAR 0 5
8098: PUSH
8099: LD_INT 144
8101: PUSH
8102: LD_INT 65
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: PUSH
8109: LD_INT 63
8111: PUSH
8112: LD_INT 38
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
8123: LD_ADDR_VAR 0 4
8127: PUSH
8128: LD_INT 0
8130: PUSH
8131: LD_INT 0
8133: PUSH
8134: LD_INT 0
8136: PUSH
8137: LD_INT 1
8139: PUSH
8140: LD_INT 0
8142: PUSH
8143: LD_INT 0
8145: PUSH
8146: LD_INT 0
8148: PUSH
8149: LD_INT 0
8151: PUSH
8152: LD_INT 1
8154: PUSH
8155: LD_INT 0
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
8170: LD_ADDR_VAR 0 6
8174: PUSH
8175: LD_EXP 79
8179: PUSH
8180: LD_VAR 0 2
8184: ARRAY
8185: PUSH
8186: LD_EXP 82
8190: PUSH
8191: LD_VAR 0 2
8195: ARRAY
8196: DIFF
8197: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
8198: LD_ADDR_EXP 79
8202: PUSH
8203: LD_EXP 79
8207: PPUSH
8208: LD_VAR 0 2
8212: PPUSH
8213: LD_EXP 79
8217: PUSH
8218: LD_VAR 0 2
8222: ARRAY
8223: PUSH
8224: LD_VAR 0 6
8228: DIFF
8229: PPUSH
8230: CALL_OW 1
8234: ST_TO_ADDR
// if not attackers then
8235: LD_VAR 0 6
8239: NOT
8240: IFFALSE 8244
// continue ;
8242: GO 7433
// repeat wait ( 0 0$1 ) ;
8244: LD_INT 35
8246: PPUSH
8247: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
8251: LD_VAR 0 6
8255: PPUSH
8256: LD_INT 60
8258: PUSH
8259: EMPTY
8260: LIST
8261: PPUSH
8262: CALL_OW 72
8266: NOT
8267: IFFALSE 8244
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
8269: LD_VAR 0 2
8273: PPUSH
8274: LD_VAR 0 6
8278: PPUSH
8279: LD_VAR 0 5
8283: PPUSH
8284: LD_VAR 0 4
8288: PPUSH
8289: CALL 71399 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
8293: LD_EXP 60
8297: PUSH
8298: LD_VAR 0 2
8302: ARRAY
8303: PPUSH
8304: LD_INT 50
8306: PUSH
8307: EMPTY
8308: LIST
8309: PPUSH
8310: CALL_OW 72
8314: NOT
8315: IFFALSE 7433
// end ;
8317: PPOPN 6
8319: END
// export RussiansDefeated ; every 0 0$1 trigger FirstAssaultRepelled and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
8320: LD_EXP 3
8324: PUSH
8325: LD_INT 22
8327: PUSH
8328: LD_INT 3
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: PUSH
8335: LD_INT 21
8337: PUSH
8338: LD_INT 1
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PPUSH
8349: CALL_OW 69
8353: PUSH
8354: LD_INT 0
8356: EQUAL
8357: AND
8358: IFFALSE 8371
8360: GO 8362
8362: DISABLE
// begin RussiansDefeated := true ;
8363: LD_ADDR_EXP 42
8367: PUSH
8368: LD_INT 1
8370: ST_TO_ADDR
// end ;
8371: END
// every 0 0$1 trigger FirstAssaultRepelled and not JMM_Arrived do var i , un , filter , soldiers , bazookas , vehs , vehicle , medics , squad , attackers , _target , flags ;
8372: LD_EXP 3
8376: PUSH
8377: LD_EXP 5
8381: NOT
8382: AND
8383: IFFALSE 9356
8385: GO 8387
8387: DISABLE
8388: LD_INT 0
8390: PPUSH
8391: PPUSH
8392: PPUSH
8393: PPUSH
8394: PPUSH
8395: PPUSH
8396: PPUSH
8397: PPUSH
8398: PPUSH
8399: PPUSH
8400: PPUSH
8401: PPUSH
// begin wait ( [ Rand ( 5 5$00 , 6 6$30 ) , Rand ( 4 4$30 , 5 5$30 ) , Rand ( 4 4$00 , 5 5$00 ) ] [ Difficulty ] ) ;
8402: LD_INT 10500
8404: PPUSH
8405: LD_INT 13650
8407: PPUSH
8408: CALL_OW 12
8412: PUSH
8413: LD_INT 9450
8415: PPUSH
8416: LD_INT 11550
8418: PPUSH
8419: CALL_OW 12
8423: PUSH
8424: LD_INT 8400
8426: PPUSH
8427: LD_INT 10500
8429: PPUSH
8430: CALL_OW 12
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: LIST
8439: PUSH
8440: LD_OWVAR 67
8444: ARRAY
8445: PPUSH
8446: CALL_OW 67
// filter := [ ] ;
8450: LD_ADDR_VAR 0 3
8454: PUSH
8455: EMPTY
8456: ST_TO_ADDR
// soldiers := [ Rand ( 2 , 3 ) , Rand ( 3 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
8457: LD_ADDR_VAR 0 4
8461: PUSH
8462: LD_INT 2
8464: PPUSH
8465: LD_INT 3
8467: PPUSH
8468: CALL_OW 12
8472: PUSH
8473: LD_INT 3
8475: PPUSH
8476: LD_INT 4
8478: PPUSH
8479: CALL_OW 12
8483: PUSH
8484: LD_INT 3
8486: PPUSH
8487: LD_INT 5
8489: PPUSH
8490: CALL_OW 12
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: LIST
8499: PUSH
8500: LD_OWVAR 67
8504: ARRAY
8505: ST_TO_ADDR
// bazookas := [ 1 , Rand ( 1 , 2 ) , Rand ( 2 , 3 ) ] [ Difficulty ] ;
8506: LD_ADDR_VAR 0 5
8510: PUSH
8511: LD_INT 1
8513: PUSH
8514: LD_INT 1
8516: PPUSH
8517: LD_INT 2
8519: PPUSH
8520: CALL_OW 12
8524: PUSH
8525: LD_INT 2
8527: PPUSH
8528: LD_INT 3
8530: PPUSH
8531: CALL_OW 12
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: LIST
8540: PUSH
8541: LD_OWVAR 67
8545: ARRAY
8546: ST_TO_ADDR
// vehs := [ Rand ( 2 , 3 ) , Rand ( 2 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
8547: LD_ADDR_VAR 0 6
8551: PUSH
8552: LD_INT 2
8554: PPUSH
8555: LD_INT 3
8557: PPUSH
8558: CALL_OW 12
8562: PUSH
8563: LD_INT 2
8565: PPUSH
8566: LD_INT 4
8568: PPUSH
8569: CALL_OW 12
8573: PUSH
8574: LD_INT 3
8576: PPUSH
8577: LD_INT 5
8579: PPUSH
8580: CALL_OW 12
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: LIST
8589: PUSH
8590: LD_OWVAR 67
8594: ARRAY
8595: ST_TO_ADDR
// medics := [ 1 , 2 , 2 ] [ Difficulty ] ;
8596: LD_ADDR_VAR 0 8
8600: PUSH
8601: LD_INT 1
8603: PUSH
8604: LD_INT 2
8606: PUSH
8607: LD_INT 2
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: LIST
8614: PUSH
8615: LD_OWVAR 67
8619: ARRAY
8620: ST_TO_ADDR
// uc_side := 3 ;
8621: LD_ADDR_OWVAR 20
8625: PUSH
8626: LD_INT 3
8628: ST_TO_ADDR
// uc_nation := nation_russian ;
8629: LD_ADDR_OWVAR 21
8633: PUSH
8634: LD_INT 3
8636: ST_TO_ADDR
// for i = 1 to soldiers do
8637: LD_ADDR_VAR 0 1
8641: PUSH
8642: DOUBLE
8643: LD_INT 1
8645: DEC
8646: ST_TO_ADDR
8647: LD_VAR 0 4
8651: PUSH
8652: FOR_TO
8653: IFFALSE 8695
// begin PrepareSoldier ( 0 , game_eskill ) ;
8655: LD_INT 0
8657: PPUSH
8658: LD_EXP 39
8662: PPUSH
8663: CALL_OW 381
// un := CreateHuman ;
8667: LD_ADDR_VAR 0 2
8671: PUSH
8672: CALL_OW 44
8676: ST_TO_ADDR
// filter := filter ^ un ;
8677: LD_ADDR_VAR 0 3
8681: PUSH
8682: LD_VAR 0 3
8686: PUSH
8687: LD_VAR 0 2
8691: ADD
8692: ST_TO_ADDR
// end ;
8693: GO 8652
8695: POP
8696: POP
// for i = 1 to bazookas do
8697: LD_ADDR_VAR 0 1
8701: PUSH
8702: DOUBLE
8703: LD_INT 1
8705: DEC
8706: ST_TO_ADDR
8707: LD_VAR 0 5
8711: PUSH
8712: FOR_TO
8713: IFFALSE 8763
// begin PrepareSoldier ( 0 , game_eskill ) ;
8715: LD_INT 0
8717: PPUSH
8718: LD_EXP 39
8722: PPUSH
8723: CALL_OW 381
// hc_class := class_bazooker ;
8727: LD_ADDR_OWVAR 28
8731: PUSH
8732: LD_INT 9
8734: ST_TO_ADDR
// un := CreateHuman ;
8735: LD_ADDR_VAR 0 2
8739: PUSH
8740: CALL_OW 44
8744: ST_TO_ADDR
// filter := filter ^ un ;
8745: LD_ADDR_VAR 0 3
8749: PUSH
8750: LD_VAR 0 3
8754: PUSH
8755: LD_VAR 0 2
8759: ADD
8760: ST_TO_ADDR
// end ;
8761: GO 8712
8763: POP
8764: POP
// for i = 1 to medics do
8765: LD_ADDR_VAR 0 1
8769: PUSH
8770: DOUBLE
8771: LD_INT 1
8773: DEC
8774: ST_TO_ADDR
8775: LD_VAR 0 8
8779: PUSH
8780: FOR_TO
8781: IFFALSE 8823
// begin PrepareScientist ( 0 , game_eskill ) ;
8783: LD_INT 0
8785: PPUSH
8786: LD_EXP 39
8790: PPUSH
8791: CALL_OW 384
// un := CreateHuman ;
8795: LD_ADDR_VAR 0 2
8799: PUSH
8800: CALL_OW 44
8804: ST_TO_ADDR
// filter := filter ^ un ;
8805: LD_ADDR_VAR 0 3
8809: PUSH
8810: LD_VAR 0 3
8814: PUSH
8815: LD_VAR 0 2
8819: ADD
8820: ST_TO_ADDR
// end ;
8821: GO 8780
8823: POP
8824: POP
// for i = 1 to vehs do
8825: LD_ADDR_VAR 0 1
8829: PUSH
8830: DOUBLE
8831: LD_INT 1
8833: DEC
8834: ST_TO_ADDR
8835: LD_VAR 0 6
8839: PUSH
8840: FOR_TO
8841: IFFALSE 9033
// begin case Rand ( 1 , 5 ) of 1 :
8843: LD_INT 1
8845: PPUSH
8846: LD_INT 5
8848: PPUSH
8849: CALL_OW 12
8853: PUSH
8854: LD_INT 1
8856: DOUBLE
8857: EQUAL
8858: IFTRUE 8862
8860: GO 8884
8862: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 2 :
8863: LD_INT 22
8865: PPUSH
8866: LD_INT 3
8868: PPUSH
8869: LD_INT 3
8871: PPUSH
8872: LD_INT 43
8874: PPUSH
8875: LD_INT 100
8877: PPUSH
8878: CALL 16006 0 5
8882: GO 9005
8884: LD_INT 2
8886: DOUBLE
8887: EQUAL
8888: IFTRUE 8892
8890: GO 8914
8892: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gun , 100 ) ; 3 :
8893: LD_INT 22
8895: PPUSH
8896: LD_INT 3
8898: PPUSH
8899: LD_INT 3
8901: PPUSH
8902: LD_INT 44
8904: PPUSH
8905: LD_INT 100
8907: PPUSH
8908: CALL 16006 0 5
8912: GO 9005
8914: LD_INT 3
8916: DOUBLE
8917: EQUAL
8918: IFTRUE 8922
8920: GO 8944
8922: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher , 100 ) ; 4 :
8923: LD_INT 22
8925: PPUSH
8926: LD_INT 3
8928: PPUSH
8929: LD_INT 3
8931: PPUSH
8932: LD_INT 45
8934: PPUSH
8935: LD_INT 100
8937: PPUSH
8938: CALL 16006 0 5
8942: GO 9005
8944: LD_INT 4
8946: DOUBLE
8947: EQUAL
8948: IFTRUE 8952
8950: GO 8974
8952: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 5 :
8953: LD_INT 24
8955: PPUSH
8956: LD_INT 3
8958: PPUSH
8959: LD_INT 3
8961: PPUSH
8962: LD_INT 43
8964: PPUSH
8965: LD_INT 100
8967: PPUSH
8968: CALL 16006 0 5
8972: GO 9005
8974: LD_INT 5
8976: DOUBLE
8977: EQUAL
8978: IFTRUE 8982
8980: GO 9004
8982: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun , 100 ) ; end ;
8983: LD_INT 24
8985: PPUSH
8986: LD_INT 3
8988: PPUSH
8989: LD_INT 3
8991: PPUSH
8992: LD_INT 46
8994: PPUSH
8995: LD_INT 100
8997: PPUSH
8998: CALL 16006 0 5
9002: GO 9005
9004: POP
// vehicle := CreateVehicle ;
9005: LD_ADDR_VAR 0 7
9009: PUSH
9010: CALL_OW 45
9014: ST_TO_ADDR
// filter := filter ^ vehicle ;
9015: LD_ADDR_VAR 0 3
9019: PUSH
9020: LD_VAR 0 3
9024: PUSH
9025: LD_VAR 0 7
9029: ADD
9030: ST_TO_ADDR
// end ;
9031: GO 8840
9033: POP
9034: POP
// for i = 1 to filter do
9035: LD_ADDR_VAR 0 1
9039: PUSH
9040: DOUBLE
9041: LD_INT 1
9043: DEC
9044: ST_TO_ADDR
9045: LD_VAR 0 3
9049: PUSH
9050: FOR_TO
9051: IFFALSE 9076
// PlaceUnitArea ( filter [ i ] , RUAttackSpawn1 , false ) ;
9053: LD_VAR 0 3
9057: PUSH
9058: LD_VAR 0 1
9062: ARRAY
9063: PPUSH
9064: LD_INT 14
9066: PPUSH
9067: LD_INT 0
9069: PPUSH
9070: CALL_OW 49
9074: GO 9050
9076: POP
9077: POP
// case Rand ( 1 , 3 ) of 1 :
9078: LD_INT 1
9080: PPUSH
9081: LD_INT 3
9083: PPUSH
9084: CALL_OW 12
9088: PUSH
9089: LD_INT 1
9091: DOUBLE
9092: EQUAL
9093: IFTRUE 9097
9095: GO 9151
9097: POP
// _target := [ [ 165 , 114 ] , [ 104 , 108 ] , [ 86 , 77 ] , [ 63 , 38 ] ] ; 2 :
9098: LD_ADDR_VAR 0 11
9102: PUSH
9103: LD_INT 165
9105: PUSH
9106: LD_INT 114
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: PUSH
9113: LD_INT 104
9115: PUSH
9116: LD_INT 108
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: PUSH
9123: LD_INT 86
9125: PUSH
9126: LD_INT 77
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PUSH
9133: LD_INT 63
9135: PUSH
9136: LD_INT 38
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: ST_TO_ADDR
9149: GO 9276
9151: LD_INT 2
9153: DOUBLE
9154: EQUAL
9155: IFTRUE 9159
9157: GO 9213
9159: POP
// _target := [ [ 165 , 114 ] , [ 146 , 71 ] , [ 112 , 41 ] , [ 63 , 38 ] ] ; 3 :
9160: LD_ADDR_VAR 0 11
9164: PUSH
9165: LD_INT 165
9167: PUSH
9168: LD_INT 114
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PUSH
9175: LD_INT 146
9177: PUSH
9178: LD_INT 71
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: PUSH
9185: LD_INT 112
9187: PUSH
9188: LD_INT 41
9190: PUSH
9191: EMPTY
9192: LIST
9193: LIST
9194: PUSH
9195: LD_INT 63
9197: PUSH
9198: LD_INT 38
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: ST_TO_ADDR
9211: GO 9276
9213: LD_INT 3
9215: DOUBLE
9216: EQUAL
9217: IFTRUE 9221
9219: GO 9275
9221: POP
// _target := [ [ 165 , 114 ] , [ 63 , 99 ] , [ 55 , 77 ] , [ 63 , 38 ] ] ; end ;
9222: LD_ADDR_VAR 0 11
9226: PUSH
9227: LD_INT 165
9229: PUSH
9230: LD_INT 114
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: PUSH
9237: LD_INT 63
9239: PUSH
9240: LD_INT 99
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: PUSH
9247: LD_INT 55
9249: PUSH
9250: LD_INT 77
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PUSH
9257: LD_INT 63
9259: PUSH
9260: LD_INT 38
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: ST_TO_ADDR
9273: GO 9276
9275: POP
// attackers := filter ;
9276: LD_ADDR_VAR 0 10
9280: PUSH
9281: LD_VAR 0 3
9285: ST_TO_ADDR
// flags := [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ;
9286: LD_ADDR_VAR 0 12
9290: PUSH
9291: LD_INT 0
9293: PUSH
9294: LD_INT 1
9296: PUSH
9297: LD_INT 0
9299: PUSH
9300: LD_INT 1
9302: PUSH
9303: LD_INT 1
9305: PUSH
9306: LD_INT 0
9308: PUSH
9309: LD_INT 0
9311: PUSH
9312: LD_INT 0
9314: PUSH
9315: LD_INT 1
9317: PUSH
9318: LD_INT 1
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: ST_TO_ADDR
// MC_PrepareAttack ( 1 , attackers , _target , flags ) ;
9333: LD_INT 1
9335: PPUSH
9336: LD_VAR 0 10
9340: PPUSH
9341: LD_VAR 0 11
9345: PPUSH
9346: LD_VAR 0 12
9350: PPUSH
9351: CALL 71399 0 4
// enable ;
9355: ENABLE
// end ;
9356: PPOPN 12
9358: END
// every 0 0$1 do var i , tmp ;
9359: GO 9361
9361: DISABLE
9362: LD_INT 0
9364: PPUSH
9365: PPUSH
// begin enable ;
9366: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
9367: LD_ADDR_VAR 0 2
9371: PUSH
9372: LD_INT 3
9374: PUSH
9375: LD_INT 22
9377: PUSH
9378: LD_INT 1
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 32
9391: PUSH
9392: LD_INT 1
9394: PUSH
9395: EMPTY
9396: LIST
9397: LIST
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: PPUSH
9403: CALL_OW 69
9407: ST_TO_ADDR
// if tmp then
9408: LD_VAR 0 2
9412: IFFALSE 9458
// for i in tmp do
9414: LD_ADDR_VAR 0 1
9418: PUSH
9419: LD_VAR 0 2
9423: PUSH
9424: FOR_IN
9425: IFFALSE 9456
// if GetFuel ( i ) < 3 then
9427: LD_VAR 0 1
9431: PPUSH
9432: CALL_OW 261
9436: PUSH
9437: LD_INT 3
9439: LESS
9440: IFFALSE 9454
// SetFuel ( i , 3 ) ;
9442: LD_VAR 0 1
9446: PPUSH
9447: LD_INT 3
9449: PPUSH
9450: CALL_OW 240
9454: GO 9424
9456: POP
9457: POP
// end ;
9458: PPOPN 2
9460: END
// every 0 0$1 trigger ( FilterUnitsInArea ( RU_Base_Area , [ f_side , 1 ] ) and not JMMArrival ) or ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) and not FirstAssaultRepelled ) do var i , veh , tmp ;
9461: LD_INT 3
9463: PPUSH
9464: LD_INT 22
9466: PUSH
9467: LD_INT 1
9469: PUSH
9470: EMPTY
9471: LIST
9472: LIST
9473: PPUSH
9474: CALL_OW 70
9478: PUSH
9479: LD_EXP 40
9483: NOT
9484: AND
9485: PUSH
9486: LD_INT 10
9488: PPUSH
9489: LD_INT 22
9491: PUSH
9492: LD_INT 1
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: PPUSH
9499: CALL_OW 70
9503: PUSH
9504: LD_EXP 3
9508: NOT
9509: AND
9510: OR
9511: IFFALSE 9525
9513: GO 9515
9515: DISABLE
9516: LD_INT 0
9518: PPUSH
9519: PPUSH
9520: PPUSH
// begin Antirush ;
9521: CALL 9528 0 0
// end ;
9525: PPOPN 3
9527: END
// export function Antirush ; var i , veh , tmp , num ; begin
9528: LD_INT 0
9530: PPUSH
9531: PPUSH
9532: PPUSH
9533: PPUSH
9534: PPUSH
// tmp := [ ] ;
9535: LD_ADDR_VAR 0 4
9539: PUSH
9540: EMPTY
9541: ST_TO_ADDR
// if not FirstAssaultRepelled then
9542: LD_EXP 3
9546: NOT
9547: IFFALSE 9559
// num := 18 else
9549: LD_ADDR_VAR 0 5
9553: PUSH
9554: LD_INT 18
9556: ST_TO_ADDR
9557: GO 9567
// num := 12 ;
9559: LD_ADDR_VAR 0 5
9563: PUSH
9564: LD_INT 12
9566: ST_TO_ADDR
// num := num - [ 4 , 2 , 0 ] [ Difficulty ] ;
9567: LD_ADDR_VAR 0 5
9571: PUSH
9572: LD_VAR 0 5
9576: PUSH
9577: LD_INT 4
9579: PUSH
9580: LD_INT 2
9582: PUSH
9583: LD_INT 0
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: LIST
9590: PUSH
9591: LD_OWVAR 67
9595: ARRAY
9596: MINUS
9597: ST_TO_ADDR
// for i := 1 to num do
9598: LD_ADDR_VAR 0 2
9602: PUSH
9603: DOUBLE
9604: LD_INT 1
9606: DEC
9607: ST_TO_ADDR
9608: LD_VAR 0 5
9612: PUSH
9613: FOR_TO
9614: IFFALSE 9753
// begin uc_side := 3 ;
9616: LD_ADDR_OWVAR 20
9620: PUSH
9621: LD_INT 3
9623: ST_TO_ADDR
// uc_nation := 3 ;
9624: LD_ADDR_OWVAR 21
9628: PUSH
9629: LD_INT 3
9631: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_siberite , control_computer , [ ru_heavy_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] , 100 ) ;
9632: LD_INT 23
9634: PPUSH
9635: LD_INT 3
9637: PPUSH
9638: LD_INT 3
9640: PPUSH
9641: LD_INT 46
9643: PUSH
9644: LD_INT 43
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: PUSH
9651: LD_INT 1
9653: PPUSH
9654: LD_INT 2
9656: PPUSH
9657: CALL_OW 12
9661: ARRAY
9662: PPUSH
9663: LD_INT 100
9665: PPUSH
9666: CALL 16006 0 5
// veh := CreateVehicle ;
9670: LD_ADDR_VAR 0 3
9674: PUSH
9675: CALL_OW 45
9679: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
9680: LD_VAR 0 3
9684: PPUSH
9685: LD_INT 5
9687: PPUSH
9688: CALL_OW 233
// PlaceUnitXYR ( veh , 199 , 135 , 3 , false ) ;
9692: LD_VAR 0 3
9696: PPUSH
9697: LD_INT 199
9699: PPUSH
9700: LD_INT 135
9702: PPUSH
9703: LD_INT 3
9705: PPUSH
9706: LD_INT 0
9708: PPUSH
9709: CALL_OW 50
// tmp := tmp ^ veh ;
9713: LD_ADDR_VAR 0 4
9717: PUSH
9718: LD_VAR 0 4
9722: PUSH
9723: LD_VAR 0 3
9727: ADD
9728: ST_TO_ADDR
// ComMoveXY ( veh , 173 , 118 ) ;
9729: LD_VAR 0 3
9733: PPUSH
9734: LD_INT 173
9736: PPUSH
9737: LD_INT 118
9739: PPUSH
9740: CALL_OW 111
// wait ( 0 0$2 ) ;
9744: LD_INT 70
9746: PPUSH
9747: CALL_OW 67
// end ;
9751: GO 9613
9753: POP
9754: POP
// repeat wait ( 0 0$1 ) ;
9755: LD_INT 35
9757: PPUSH
9758: CALL_OW 67
// for i in tmp do
9762: LD_ADDR_VAR 0 2
9766: PUSH
9767: LD_VAR 0 4
9771: PUSH
9772: FOR_IN
9773: IFFALSE 9840
// if IsDead ( i ) then
9775: LD_VAR 0 2
9779: PPUSH
9780: CALL_OW 301
9784: IFFALSE 9804
// tmp := tmp diff i else
9786: LD_ADDR_VAR 0 4
9790: PUSH
9791: LD_VAR 0 4
9795: PUSH
9796: LD_VAR 0 2
9800: DIFF
9801: ST_TO_ADDR
9802: GO 9838
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
9804: LD_VAR 0 2
9808: PPUSH
9809: LD_INT 22
9811: PUSH
9812: LD_INT 1
9814: PUSH
9815: EMPTY
9816: LIST
9817: LIST
9818: PPUSH
9819: CALL_OW 69
9823: PPUSH
9824: LD_VAR 0 2
9828: PPUSH
9829: CALL_OW 74
9833: PPUSH
9834: CALL_OW 115
9838: GO 9772
9840: POP
9841: POP
// until not tmp ;
9842: LD_VAR 0 4
9846: NOT
9847: IFFALSE 9755
// end ; end_of_file
9849: LD_VAR 0 1
9853: RET
// export Losses ; on UnitDestroyed ( un ) do begin if un = Brighton then
9854: LD_VAR 0 1
9858: PUSH
9859: LD_EXP 8
9863: EQUAL
9864: IFFALSE 9880
// begin wait ( 0 0$1 ) ;
9866: LD_INT 35
9868: PPUSH
9869: CALL_OW 67
// YouLost ( Brighton ) ;
9873: LD_STRING Brighton
9875: PPUSH
9876: CALL_OW 104
// end ; if un = JMM then
9880: LD_VAR 0 1
9884: PUSH
9885: LD_EXP 36
9889: EQUAL
9890: IFFALSE 9906
// begin wait ( 0 0$1 ) ;
9892: LD_INT 35
9894: PPUSH
9895: CALL_OW 67
// YouLost ( JMM ) ;
9899: LD_STRING JMM
9901: PPUSH
9902: CALL_OW 104
// end ; if un = Megan then
9906: LD_VAR 0 1
9910: PUSH
9911: LD_EXP 10
9915: EQUAL
9916: IFFALSE 9930
// begin Say ( Brighton , DBrighton-MeganDeath ) ;
9918: LD_EXP 8
9922: PPUSH
9923: LD_STRING DBrighton-MeganDeath
9925: PPUSH
9926: CALL_OW 88
// end ; if un = Palmer then
9930: LD_VAR 0 1
9934: PUSH
9935: LD_EXP 9
9939: EQUAL
9940: IFFALSE 9954
// begin Say ( Brighton , DBrighton-PalmerDeath ) ;
9942: LD_EXP 8
9946: PPUSH
9947: LD_STRING DBrighton-PalmerDeath
9949: PPUSH
9950: CALL_OW 88
// end ; if un = Burlak then
9954: LD_VAR 0 1
9958: PUSH
9959: LD_EXP 18
9963: EQUAL
9964: IFFALSE 9996
// begin if JMM_Arrived then
9966: LD_EXP 5
9970: IFFALSE 9984
// Say ( JMM , DJMM-BurlakDead ) ;
9972: LD_EXP 36
9976: PPUSH
9977: LD_STRING DJMM-BurlakDead
9979: PPUSH
9980: CALL_OW 88
// Say ( Palmer , DSol-BurlakDead ) ;
9984: LD_EXP 9
9988: PPUSH
9989: LD_STRING DSol-BurlakDead
9991: PPUSH
9992: CALL_OW 88
// end ; if un = BetaA or un = BetaB then
9996: LD_VAR 0 1
10000: PUSH
10001: LD_INT 1
10003: EQUAL
10004: PUSH
10005: LD_VAR 0 1
10009: PUSH
10010: LD_INT 3
10012: EQUAL
10013: OR
10014: IFFALSE 10030
// begin wait ( 0 0$1 ) ;
10016: LD_INT 35
10018: PPUSH
10019: CALL_OW 67
// YouLost ( Depot ) ;
10023: LD_STRING Depot
10025: PPUSH
10026: CALL_OW 104
// end ; if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
10030: LD_VAR 0 1
10034: PPUSH
10035: CALL_OW 255
10039: PUSH
10040: LD_INT 1
10042: EQUAL
10043: PUSH
10044: LD_VAR 0 1
10048: PPUSH
10049: CALL_OW 247
10053: PUSH
10054: LD_INT 1
10056: EQUAL
10057: AND
10058: IFFALSE 10074
// Losses := Losses + 1 ;
10060: LD_ADDR_EXP 43
10064: PUSH
10065: LD_EXP 43
10069: PUSH
10070: LD_INT 1
10072: PLUS
10073: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
10074: LD_VAR 0 1
10078: PPUSH
10079: CALL 74606 0 1
// end ;
10083: PPOPN 1
10085: END
// on UnitGoesToRed ( un ) do begin if un = Yashin then
10086: LD_VAR 0 1
10090: PUSH
10091: LD_EXP 12
10095: EQUAL
10096: IFFALSE 10110
// ForceSay ( Yashin , DDeath-Yas-3 ) ;
10098: LD_EXP 12
10102: PPUSH
10103: LD_STRING DDeath-Yas-3
10105: PPUSH
10106: CALL_OW 91
// if un = Popov then
10110: LD_VAR 0 1
10114: PUSH
10115: LD_EXP 13
10119: EQUAL
10120: IFFALSE 10134
// ForceSay ( Popov , DDeath-Pop-3 ) ;
10122: LD_EXP 13
10126: PPUSH
10127: LD_STRING DDeath-Pop-3
10129: PPUSH
10130: CALL_OW 91
// if un = Gaydar then
10134: LD_VAR 0 1
10138: PUSH
10139: LD_EXP 14
10143: EQUAL
10144: IFFALSE 10158
// ForceSay ( Gaydar , DDeath-Gay-3 ) ;
10146: LD_EXP 14
10150: PPUSH
10151: LD_STRING DDeath-Gay-3
10153: PPUSH
10154: CALL_OW 91
// if un = Sevi then
10158: LD_VAR 0 1
10162: PUSH
10163: LD_EXP 15
10167: EQUAL
10168: IFFALSE 10182
// ForceSay ( Sevi , DDeath-Vse-3 ) ;
10170: LD_EXP 15
10174: PPUSH
10175: LD_STRING DDeath-Vse-3
10177: PPUSH
10178: CALL_OW 91
// end ;
10182: PPOPN 1
10184: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_laser then
10185: LD_VAR 0 1
10189: PUSH
10190: LD_INT 10
10192: EQUAL
10193: IFFALSE 10231
// begin Say ( Brighton , DBrighton-C1 ) ;
10195: LD_EXP 8
10199: PPUSH
10200: LD_STRING DBrighton-C1
10202: PPUSH
10203: CALL_OW 88
// Say ( Megan , DMegan-C1 ) ;
10207: LD_EXP 10
10211: PPUSH
10212: LD_STRING DMegan-C1
10214: PPUSH
10215: CALL_OW 88
// Say ( Brighton , DBrighton-C2 ) ;
10219: LD_EXP 8
10223: PPUSH
10224: LD_STRING DBrighton-C2
10226: PPUSH
10227: CALL_OW 88
// end ; MCE_ResearchComplete ( tech , lab ) ;
10231: LD_VAR 0 1
10235: PPUSH
10236: LD_VAR 0 2
10240: PPUSH
10241: CALL 74302 0 2
// end ;
10245: PPOPN 2
10247: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
10248: LD_VAR 0 1
10252: PPUSH
10253: LD_VAR 0 2
10257: PPUSH
10258: CALL 76940 0 2
// end ;
10262: PPOPN 2
10264: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
10265: LD_VAR 0 1
10269: PPUSH
10270: CALL 76008 0 1
// end ;
10274: PPOPN 1
10276: END
// export RUFirstDepot ; on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 then
10277: LD_VAR 0 1
10281: PPUSH
10282: CALL_OW 266
10286: PUSH
10287: LD_INT 0
10289: EQUAL
10290: PUSH
10291: LD_VAR 0 1
10295: PPUSH
10296: CALL_OW 255
10300: PUSH
10301: LD_INT 3
10303: EQUAL
10304: AND
10305: IFFALSE 10367
// begin SetResourceType ( GetBase ( b ) , mat_cans , 10000 ) ;
10307: LD_VAR 0 1
10311: PPUSH
10312: CALL_OW 274
10316: PPUSH
10317: LD_INT 1
10319: PPUSH
10320: LD_INT 10000
10322: PPUSH
10323: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
10327: LD_VAR 0 1
10331: PPUSH
10332: CALL_OW 274
10336: PPUSH
10337: LD_INT 2
10339: PPUSH
10340: LD_INT 250
10342: PPUSH
10343: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 100 ) ;
10347: LD_VAR 0 1
10351: PPUSH
10352: CALL_OW 274
10356: PPUSH
10357: LD_INT 3
10359: PPUSH
10360: LD_INT 100
10362: PPUSH
10363: CALL_OW 277
// end ; MCE_BuildingComplete ( b ) ;
10367: LD_VAR 0 1
10371: PPUSH
10372: CALL 76249 0 1
// end ;
10376: PPOPN 1
10378: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
10379: LD_VAR 0 1
10383: PPUSH
10384: LD_VAR 0 2
10388: PPUSH
10389: LD_VAR 0 3
10393: PPUSH
10394: LD_VAR 0 4
10398: PPUSH
10399: LD_VAR 0 5
10403: PPUSH
10404: CALL 73922 0 5
// end ;
10408: PPOPN 5
10410: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
10411: LD_VAR 0 1
10415: PPUSH
10416: LD_VAR 0 2
10420: PPUSH
10421: CALL 73518 0 2
// end ;
10425: PPOPN 2
10427: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
10428: LD_VAR 0 1
10432: PPUSH
10433: LD_VAR 0 2
10437: PPUSH
10438: LD_VAR 0 3
10442: PPUSH
10443: LD_VAR 0 4
10447: PPUSH
10448: CALL 73356 0 4
// end ;
10452: PPOPN 4
10454: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
10455: LD_VAR 0 1
10459: PPUSH
10460: LD_VAR 0 2
10464: PPUSH
10465: LD_VAR 0 3
10469: PPUSH
10470: CALL 73131 0 3
// end ;
10474: PPOPN 3
10476: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
10477: LD_VAR 0 1
10481: PPUSH
10482: LD_VAR 0 2
10486: PPUSH
10487: CALL 73016 0 2
// end ;
10491: PPOPN 2
10493: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
10494: LD_VAR 0 1
10498: PPUSH
10499: LD_VAR 0 2
10503: PPUSH
10504: CALL 77201 0 2
// end ;
10508: PPOPN 2
10510: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin if GetSide ( driver ) = 6 then
10511: LD_VAR 0 1
10515: PPUSH
10516: CALL_OW 255
10520: PUSH
10521: LD_INT 6
10523: EQUAL
10524: IFFALSE 10654
// begin if driver in [ Yashin , Sevi , Gaydar , Popov ] then
10526: LD_VAR 0 1
10530: PUSH
10531: LD_EXP 12
10535: PUSH
10536: LD_EXP 15
10540: PUSH
10541: LD_EXP 14
10545: PUSH
10546: LD_EXP 13
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: IN
10557: IFFALSE 10561
// exit ;
10559: GO 10678
// if AssaultStarted then
10561: LD_EXP 7
10565: IFFALSE 10639
// case Rand ( 1 , 4 ) of 1 .. 3 :
10567: LD_INT 1
10569: PPUSH
10570: LD_INT 4
10572: PPUSH
10573: CALL_OW 12
10577: PUSH
10578: LD_INT 1
10580: DOUBLE
10581: GREATEREQUAL
10582: IFFALSE 10590
10584: LD_INT 3
10586: DOUBLE
10587: LESSEQUAL
10588: IFTRUE 10592
10590: GO 10610
10592: POP
// ComAgressiveMove ( driver , 67 , 37 ) ; 4 :
10593: LD_VAR 0 1
10597: PPUSH
10598: LD_INT 67
10600: PPUSH
10601: LD_INT 37
10603: PPUSH
10604: CALL_OW 114
10608: GO 10637
10610: LD_INT 4
10612: DOUBLE
10613: EQUAL
10614: IFTRUE 10618
10616: GO 10636
10618: POP
// ComMoveXY ( driver , 120 , 131 ) ; end else
10619: LD_VAR 0 1
10623: PPUSH
10624: LD_INT 120
10626: PPUSH
10627: LD_INT 131
10629: PPUSH
10630: CALL_OW 111
10634: GO 10637
10636: POP
10637: GO 10654
// ComMoveXY ( driver , 120 , 131 ) ;
10639: LD_VAR 0 1
10643: PPUSH
10644: LD_INT 120
10646: PPUSH
10647: LD_INT 131
10649: PPUSH
10650: CALL_OW 111
// end ; MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
10654: LD_VAR 0 1
10658: PPUSH
10659: LD_VAR 0 2
10663: PPUSH
10664: LD_VAR 0 3
10668: PPUSH
10669: LD_VAR 0 4
10673: PPUSH
10674: CALL 77417 0 4
// end ;
10678: PPOPN 4
10680: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
10681: LD_VAR 0 1
10685: PPUSH
10686: LD_VAR 0 2
10690: PPUSH
10691: CALL 72825 0 2
// end ;
10695: PPOPN 2
10697: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
10698: LD_VAR 0 1
10702: PPUSH
10703: CALL 88685 0 1
// end ; end_of_file
10707: PPOPN 1
10709: END
// every 0 0$1 trigger JMM_Arrived and RussiansDefeated do
10710: LD_EXP 5
10714: PUSH
10715: LD_EXP 42
10719: AND
10720: IFFALSE 10891
10722: GO 10724
10724: DISABLE
// begin wait ( 0 0$2 ) ;
10725: LD_INT 70
10727: PPUSH
10728: CALL_OW 67
// Say ( Brighton , DBrighton-G1 ) ;
10732: LD_EXP 8
10736: PPUSH
10737: LD_STRING DBrighton-G1
10739: PPUSH
10740: CALL_OW 88
// if Losses < 1 then
10744: LD_EXP 43
10748: PUSH
10749: LD_INT 1
10751: LESS
10752: IFFALSE 10766
// AddMedal ( Losses , 1 ) else
10754: LD_STRING Losses
10756: PPUSH
10757: LD_INT 1
10759: PPUSH
10760: CALL_OW 101
10764: GO 10799
// if Losses < 5 then
10766: LD_EXP 43
10770: PUSH
10771: LD_INT 5
10773: LESS
10774: IFFALSE 10788
// AddMedal ( Losses , 2 ) else
10776: LD_STRING Losses
10778: PPUSH
10779: LD_INT 2
10781: PPUSH
10782: CALL_OW 101
10786: GO 10799
// AddMedal ( Losses , - 1 ) ;
10788: LD_STRING Losses
10790: PPUSH
10791: LD_INT 1
10793: NEG
10794: PPUSH
10795: CALL_OW 101
// if LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
10799: LD_EXP 6
10803: PUSH
10804: LD_INT 10
10806: PPUSH
10807: LD_INT 1
10809: PPUSH
10810: CALL_OW 321
10814: PUSH
10815: LD_INT 2
10817: EQUAL
10818: AND
10819: IFFALSE 10833
// AddMedal ( Laser , 1 ) else
10821: LD_STRING Laser
10823: PPUSH
10824: LD_INT 1
10826: PPUSH
10827: CALL_OW 101
10831: GO 10880
// if not LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
10833: LD_EXP 6
10837: NOT
10838: PUSH
10839: LD_INT 10
10841: PPUSH
10842: LD_INT 1
10844: PPUSH
10845: CALL_OW 321
10849: PUSH
10850: LD_INT 2
10852: EQUAL
10853: AND
10854: IFFALSE 10869
// AddMedal ( Laser , - 1 ) else
10856: LD_STRING Laser
10858: PPUSH
10859: LD_INT 1
10861: NEG
10862: PPUSH
10863: CALL_OW 101
10867: GO 10880
// AddMedal ( Laser , - 2 ) ;
10869: LD_STRING Laser
10871: PPUSH
10872: LD_INT 2
10874: NEG
10875: PPUSH
10876: CALL_OW 101
// GiveMedals ( BaseMain ) ;
10880: LD_STRING BaseMain
10882: PPUSH
10883: CALL_OW 102
// YouWin ;
10887: CALL_OW 103
// end ; end_of_file
10891: END
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
10892: LD_INT 0
10894: PPUSH
10895: PPUSH
// area = ListEnvironmentArea ( area ) ;
10896: LD_ADDR_VAR 0 2
10900: PUSH
10901: LD_VAR 0 2
10905: PPUSH
10906: CALL_OW 353
10910: ST_TO_ADDR
// if bulldozer > 0 then
10911: LD_VAR 0 1
10915: PUSH
10916: LD_INT 0
10918: GREATER
10919: IFFALSE 11030
// for i = area downto 1 do
10921: LD_ADDR_VAR 0 4
10925: PUSH
10926: DOUBLE
10927: LD_VAR 0 2
10931: INC
10932: ST_TO_ADDR
10933: LD_INT 1
10935: PUSH
10936: FOR_DOWNTO
10937: IFFALSE 11028
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
10939: LD_VAR 0 2
10943: PUSH
10944: LD_VAR 0 4
10948: ARRAY
10949: PUSH
10950: LD_INT 1
10952: ARRAY
10953: PPUSH
10954: LD_VAR 0 2
10958: PUSH
10959: LD_VAR 0 4
10963: ARRAY
10964: PUSH
10965: LD_INT 2
10967: ARRAY
10968: PPUSH
10969: CALL_OW 351
10973: IFFALSE 11026
// if not HasTask ( bulldozer ) then
10975: LD_VAR 0 1
10979: PPUSH
10980: CALL_OW 314
10984: NOT
10985: IFFALSE 11026
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
10987: LD_VAR 0 1
10991: PPUSH
10992: LD_VAR 0 2
10996: PUSH
10997: LD_VAR 0 4
11001: ARRAY
11002: PUSH
11003: LD_INT 1
11005: ARRAY
11006: PPUSH
11007: LD_VAR 0 2
11011: PUSH
11012: LD_VAR 0 4
11016: ARRAY
11017: PUSH
11018: LD_INT 2
11020: ARRAY
11021: PPUSH
11022: CALL_OW 171
11026: GO 10936
11028: POP
11029: POP
// end ;
11030: LD_VAR 0 3
11034: RET
// export function ComMeeting ( team , area ) ; var i , tmp ; begin
11035: LD_INT 0
11037: PPUSH
11038: PPUSH
11039: PPUSH
// tmp := AreaToList ( area , 0 ) ;
11040: LD_ADDR_VAR 0 5
11044: PUSH
11045: LD_VAR 0 2
11049: PPUSH
11050: LD_INT 0
11052: PPUSH
11053: CALL_OW 517
11057: ST_TO_ADDR
// for i = 1 to team do
11058: LD_ADDR_VAR 0 4
11062: PUSH
11063: DOUBLE
11064: LD_INT 1
11066: DEC
11067: ST_TO_ADDR
11068: LD_VAR 0 1
11072: PUSH
11073: FOR_TO
11074: IFFALSE 11175
// begin if IsInUnit ( team [ i ] ) then
11076: LD_VAR 0 1
11080: PUSH
11081: LD_VAR 0 4
11085: ARRAY
11086: PPUSH
11087: CALL_OW 310
11091: IFFALSE 11108
// ComExitBuilding ( team [ i ] ) ;
11093: LD_VAR 0 1
11097: PUSH
11098: LD_VAR 0 4
11102: ARRAY
11103: PPUSH
11104: CALL_OW 122
// AddComMoveXY ( team [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
11108: LD_VAR 0 1
11112: PUSH
11113: LD_VAR 0 4
11117: ARRAY
11118: PPUSH
11119: LD_VAR 0 5
11123: PUSH
11124: LD_INT 1
11126: ARRAY
11127: PUSH
11128: LD_VAR 0 4
11132: ARRAY
11133: PPUSH
11134: LD_VAR 0 5
11138: PUSH
11139: LD_INT 2
11141: ARRAY
11142: PUSH
11143: LD_VAR 0 4
11147: ARRAY
11148: PPUSH
11149: CALL_OW 171
// AddComTurnUnit ( team [ i ] , Brighton ) ;
11153: LD_VAR 0 1
11157: PUSH
11158: LD_VAR 0 4
11162: ARRAY
11163: PPUSH
11164: LD_EXP 8
11168: PPUSH
11169: CALL_OW 179
// end ;
11173: GO 11073
11175: POP
11176: POP
// end ; end_of_file
11177: LD_VAR 0 3
11181: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
11182: LD_INT 0
11184: PPUSH
11185: PPUSH
// if exist_mode then
11186: LD_VAR 0 2
11190: IFFALSE 11215
// unit := CreateCharacter ( prefix & ident ) else
11192: LD_ADDR_VAR 0 5
11196: PUSH
11197: LD_VAR 0 3
11201: PUSH
11202: LD_VAR 0 1
11206: STR
11207: PPUSH
11208: CALL_OW 34
11212: ST_TO_ADDR
11213: GO 11230
// unit := NewCharacter ( ident ) ;
11215: LD_ADDR_VAR 0 5
11219: PUSH
11220: LD_VAR 0 1
11224: PPUSH
11225: CALL_OW 25
11229: ST_TO_ADDR
// result := unit ;
11230: LD_ADDR_VAR 0 4
11234: PUSH
11235: LD_VAR 0 5
11239: ST_TO_ADDR
// end ;
11240: LD_VAR 0 4
11244: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
11245: LD_INT 0
11247: PPUSH
11248: PPUSH
// if not side or not nation then
11249: LD_VAR 0 1
11253: NOT
11254: PUSH
11255: LD_VAR 0 2
11259: NOT
11260: OR
11261: IFFALSE 11265
// exit ;
11263: GO 12029
// case nation of nation_american :
11265: LD_VAR 0 2
11269: PUSH
11270: LD_INT 1
11272: DOUBLE
11273: EQUAL
11274: IFTRUE 11278
11276: GO 11492
11278: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
11279: LD_ADDR_VAR 0 4
11283: PUSH
11284: LD_INT 35
11286: PUSH
11287: LD_INT 45
11289: PUSH
11290: LD_INT 46
11292: PUSH
11293: LD_INT 47
11295: PUSH
11296: LD_INT 82
11298: PUSH
11299: LD_INT 83
11301: PUSH
11302: LD_INT 84
11304: PUSH
11305: LD_INT 85
11307: PUSH
11308: LD_INT 86
11310: PUSH
11311: LD_INT 1
11313: PUSH
11314: LD_INT 2
11316: PUSH
11317: LD_INT 6
11319: PUSH
11320: LD_INT 15
11322: PUSH
11323: LD_INT 16
11325: PUSH
11326: LD_INT 7
11328: PUSH
11329: LD_INT 12
11331: PUSH
11332: LD_INT 13
11334: PUSH
11335: LD_INT 10
11337: PUSH
11338: LD_INT 14
11340: PUSH
11341: LD_INT 20
11343: PUSH
11344: LD_INT 21
11346: PUSH
11347: LD_INT 22
11349: PUSH
11350: LD_INT 25
11352: PUSH
11353: LD_INT 32
11355: PUSH
11356: LD_INT 27
11358: PUSH
11359: LD_INT 36
11361: PUSH
11362: LD_INT 69
11364: PUSH
11365: LD_INT 39
11367: PUSH
11368: LD_INT 34
11370: PUSH
11371: LD_INT 40
11373: PUSH
11374: LD_INT 48
11376: PUSH
11377: LD_INT 49
11379: PUSH
11380: LD_INT 50
11382: PUSH
11383: LD_INT 51
11385: PUSH
11386: LD_INT 52
11388: PUSH
11389: LD_INT 53
11391: PUSH
11392: LD_INT 54
11394: PUSH
11395: LD_INT 55
11397: PUSH
11398: LD_INT 56
11400: PUSH
11401: LD_INT 57
11403: PUSH
11404: LD_INT 58
11406: PUSH
11407: LD_INT 59
11409: PUSH
11410: LD_INT 60
11412: PUSH
11413: LD_INT 61
11415: PUSH
11416: LD_INT 62
11418: PUSH
11419: LD_INT 80
11421: PUSH
11422: LD_INT 82
11424: PUSH
11425: LD_INT 83
11427: PUSH
11428: LD_INT 84
11430: PUSH
11431: LD_INT 85
11433: PUSH
11434: LD_INT 86
11436: PUSH
11437: EMPTY
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: ST_TO_ADDR
11490: GO 11953
11492: LD_INT 2
11494: DOUBLE
11495: EQUAL
11496: IFTRUE 11500
11498: GO 11722
11500: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
11501: LD_ADDR_VAR 0 4
11505: PUSH
11506: LD_INT 35
11508: PUSH
11509: LD_INT 45
11511: PUSH
11512: LD_INT 46
11514: PUSH
11515: LD_INT 47
11517: PUSH
11518: LD_INT 82
11520: PUSH
11521: LD_INT 83
11523: PUSH
11524: LD_INT 84
11526: PUSH
11527: LD_INT 85
11529: PUSH
11530: LD_INT 87
11532: PUSH
11533: LD_INT 70
11535: PUSH
11536: LD_INT 1
11538: PUSH
11539: LD_INT 11
11541: PUSH
11542: LD_INT 3
11544: PUSH
11545: LD_INT 4
11547: PUSH
11548: LD_INT 5
11550: PUSH
11551: LD_INT 6
11553: PUSH
11554: LD_INT 15
11556: PUSH
11557: LD_INT 18
11559: PUSH
11560: LD_INT 7
11562: PUSH
11563: LD_INT 17
11565: PUSH
11566: LD_INT 8
11568: PUSH
11569: LD_INT 20
11571: PUSH
11572: LD_INT 21
11574: PUSH
11575: LD_INT 22
11577: PUSH
11578: LD_INT 72
11580: PUSH
11581: LD_INT 26
11583: PUSH
11584: LD_INT 69
11586: PUSH
11587: LD_INT 39
11589: PUSH
11590: LD_INT 40
11592: PUSH
11593: LD_INT 41
11595: PUSH
11596: LD_INT 42
11598: PUSH
11599: LD_INT 43
11601: PUSH
11602: LD_INT 48
11604: PUSH
11605: LD_INT 49
11607: PUSH
11608: LD_INT 50
11610: PUSH
11611: LD_INT 51
11613: PUSH
11614: LD_INT 52
11616: PUSH
11617: LD_INT 53
11619: PUSH
11620: LD_INT 54
11622: PUSH
11623: LD_INT 55
11625: PUSH
11626: LD_INT 56
11628: PUSH
11629: LD_INT 60
11631: PUSH
11632: LD_INT 61
11634: PUSH
11635: LD_INT 62
11637: PUSH
11638: LD_INT 66
11640: PUSH
11641: LD_INT 67
11643: PUSH
11644: LD_INT 68
11646: PUSH
11647: LD_INT 81
11649: PUSH
11650: LD_INT 82
11652: PUSH
11653: LD_INT 83
11655: PUSH
11656: LD_INT 84
11658: PUSH
11659: LD_INT 85
11661: PUSH
11662: LD_INT 87
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: ST_TO_ADDR
11720: GO 11953
11722: LD_INT 3
11724: DOUBLE
11725: EQUAL
11726: IFTRUE 11730
11728: GO 11952
11730: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
11731: LD_ADDR_VAR 0 4
11735: PUSH
11736: LD_INT 46
11738: PUSH
11739: LD_INT 47
11741: PUSH
11742: LD_INT 1
11744: PUSH
11745: LD_INT 2
11747: PUSH
11748: LD_INT 82
11750: PUSH
11751: LD_INT 83
11753: PUSH
11754: LD_INT 84
11756: PUSH
11757: LD_INT 85
11759: PUSH
11760: LD_INT 86
11762: PUSH
11763: LD_INT 11
11765: PUSH
11766: LD_INT 9
11768: PUSH
11769: LD_INT 20
11771: PUSH
11772: LD_INT 19
11774: PUSH
11775: LD_INT 21
11777: PUSH
11778: LD_INT 24
11780: PUSH
11781: LD_INT 22
11783: PUSH
11784: LD_INT 25
11786: PUSH
11787: LD_INT 28
11789: PUSH
11790: LD_INT 29
11792: PUSH
11793: LD_INT 30
11795: PUSH
11796: LD_INT 31
11798: PUSH
11799: LD_INT 37
11801: PUSH
11802: LD_INT 38
11804: PUSH
11805: LD_INT 32
11807: PUSH
11808: LD_INT 27
11810: PUSH
11811: LD_INT 33
11813: PUSH
11814: LD_INT 69
11816: PUSH
11817: LD_INT 39
11819: PUSH
11820: LD_INT 34
11822: PUSH
11823: LD_INT 40
11825: PUSH
11826: LD_INT 71
11828: PUSH
11829: LD_INT 23
11831: PUSH
11832: LD_INT 44
11834: PUSH
11835: LD_INT 48
11837: PUSH
11838: LD_INT 49
11840: PUSH
11841: LD_INT 50
11843: PUSH
11844: LD_INT 51
11846: PUSH
11847: LD_INT 52
11849: PUSH
11850: LD_INT 53
11852: PUSH
11853: LD_INT 54
11855: PUSH
11856: LD_INT 55
11858: PUSH
11859: LD_INT 56
11861: PUSH
11862: LD_INT 57
11864: PUSH
11865: LD_INT 58
11867: PUSH
11868: LD_INT 59
11870: PUSH
11871: LD_INT 63
11873: PUSH
11874: LD_INT 64
11876: PUSH
11877: LD_INT 65
11879: PUSH
11880: LD_INT 82
11882: PUSH
11883: LD_INT 83
11885: PUSH
11886: LD_INT 84
11888: PUSH
11889: LD_INT 85
11891: PUSH
11892: LD_INT 86
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: ST_TO_ADDR
11950: GO 11953
11952: POP
// if state > - 1 and state < 3 then
11953: LD_VAR 0 3
11957: PUSH
11958: LD_INT 1
11960: NEG
11961: GREATER
11962: PUSH
11963: LD_VAR 0 3
11967: PUSH
11968: LD_INT 3
11970: LESS
11971: AND
11972: IFFALSE 12029
// for i in result do
11974: LD_ADDR_VAR 0 5
11978: PUSH
11979: LD_VAR 0 4
11983: PUSH
11984: FOR_IN
11985: IFFALSE 12027
// if GetTech ( i , side ) <> state then
11987: LD_VAR 0 5
11991: PPUSH
11992: LD_VAR 0 1
11996: PPUSH
11997: CALL_OW 321
12001: PUSH
12002: LD_VAR 0 3
12006: NONEQUAL
12007: IFFALSE 12025
// result := result diff i ;
12009: LD_ADDR_VAR 0 4
12013: PUSH
12014: LD_VAR 0 4
12018: PUSH
12019: LD_VAR 0 5
12023: DIFF
12024: ST_TO_ADDR
12025: GO 11984
12027: POP
12028: POP
// end ;
12029: LD_VAR 0 4
12033: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
12034: LD_INT 0
12036: PPUSH
12037: PPUSH
12038: PPUSH
// result := true ;
12039: LD_ADDR_VAR 0 3
12043: PUSH
12044: LD_INT 1
12046: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
12047: LD_ADDR_VAR 0 5
12051: PUSH
12052: LD_VAR 0 2
12056: PPUSH
12057: CALL_OW 480
12061: ST_TO_ADDR
// if not tmp then
12062: LD_VAR 0 5
12066: NOT
12067: IFFALSE 12071
// exit ;
12069: GO 12120
// for i in tmp do
12071: LD_ADDR_VAR 0 4
12075: PUSH
12076: LD_VAR 0 5
12080: PUSH
12081: FOR_IN
12082: IFFALSE 12118
// if GetTech ( i , side ) <> state_researched then
12084: LD_VAR 0 4
12088: PPUSH
12089: LD_VAR 0 1
12093: PPUSH
12094: CALL_OW 321
12098: PUSH
12099: LD_INT 2
12101: NONEQUAL
12102: IFFALSE 12116
// begin result := false ;
12104: LD_ADDR_VAR 0 3
12108: PUSH
12109: LD_INT 0
12111: ST_TO_ADDR
// exit ;
12112: POP
12113: POP
12114: GO 12120
// end ;
12116: GO 12081
12118: POP
12119: POP
// end ;
12120: LD_VAR 0 3
12124: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
12125: LD_INT 0
12127: PPUSH
12128: PPUSH
12129: PPUSH
12130: PPUSH
12131: PPUSH
12132: PPUSH
12133: PPUSH
12134: PPUSH
12135: PPUSH
12136: PPUSH
12137: PPUSH
12138: PPUSH
12139: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
12140: LD_VAR 0 1
12144: NOT
12145: PUSH
12146: LD_VAR 0 1
12150: PPUSH
12151: CALL_OW 257
12155: PUSH
12156: LD_INT 9
12158: NONEQUAL
12159: OR
12160: IFFALSE 12164
// exit ;
12162: GO 12737
// side := GetSide ( unit ) ;
12164: LD_ADDR_VAR 0 9
12168: PUSH
12169: LD_VAR 0 1
12173: PPUSH
12174: CALL_OW 255
12178: ST_TO_ADDR
// tech_space := tech_spacanom ;
12179: LD_ADDR_VAR 0 12
12183: PUSH
12184: LD_INT 29
12186: ST_TO_ADDR
// tech_time := tech_taurad ;
12187: LD_ADDR_VAR 0 13
12191: PUSH
12192: LD_INT 28
12194: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
12195: LD_ADDR_VAR 0 11
12199: PUSH
12200: LD_VAR 0 1
12204: PPUSH
12205: CALL_OW 310
12209: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
12210: LD_VAR 0 11
12214: PPUSH
12215: CALL_OW 247
12219: PUSH
12220: LD_INT 2
12222: EQUAL
12223: IFFALSE 12227
// exit ;
12225: GO 12737
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12227: LD_ADDR_VAR 0 8
12231: PUSH
12232: LD_INT 81
12234: PUSH
12235: LD_VAR 0 9
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: LD_INT 3
12246: PUSH
12247: LD_INT 21
12249: PUSH
12250: LD_INT 3
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: PPUSH
12265: CALL_OW 69
12269: ST_TO_ADDR
// if not tmp then
12270: LD_VAR 0 8
12274: NOT
12275: IFFALSE 12279
// exit ;
12277: GO 12737
// if in_unit then
12279: LD_VAR 0 11
12283: IFFALSE 12307
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
12285: LD_ADDR_VAR 0 10
12289: PUSH
12290: LD_VAR 0 8
12294: PPUSH
12295: LD_VAR 0 11
12299: PPUSH
12300: CALL_OW 74
12304: ST_TO_ADDR
12305: GO 12327
// enemy := NearestUnitToUnit ( tmp , unit ) ;
12307: LD_ADDR_VAR 0 10
12311: PUSH
12312: LD_VAR 0 8
12316: PPUSH
12317: LD_VAR 0 1
12321: PPUSH
12322: CALL_OW 74
12326: ST_TO_ADDR
// if not enemy then
12327: LD_VAR 0 10
12331: NOT
12332: IFFALSE 12336
// exit ;
12334: GO 12737
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
12336: LD_VAR 0 11
12340: PUSH
12341: LD_VAR 0 11
12345: PPUSH
12346: LD_VAR 0 10
12350: PPUSH
12351: CALL_OW 296
12355: PUSH
12356: LD_INT 13
12358: GREATER
12359: AND
12360: PUSH
12361: LD_VAR 0 1
12365: PPUSH
12366: LD_VAR 0 10
12370: PPUSH
12371: CALL_OW 296
12375: PUSH
12376: LD_INT 12
12378: GREATER
12379: OR
12380: IFFALSE 12384
// exit ;
12382: GO 12737
// missile := [ 1 ] ;
12384: LD_ADDR_VAR 0 14
12388: PUSH
12389: LD_INT 1
12391: PUSH
12392: EMPTY
12393: LIST
12394: ST_TO_ADDR
// if Researched ( side , tech_space ) then
12395: LD_VAR 0 9
12399: PPUSH
12400: LD_VAR 0 12
12404: PPUSH
12405: CALL_OW 325
12409: IFFALSE 12438
// missile := Insert ( missile , missile + 1 , 2 ) ;
12411: LD_ADDR_VAR 0 14
12415: PUSH
12416: LD_VAR 0 14
12420: PPUSH
12421: LD_VAR 0 14
12425: PUSH
12426: LD_INT 1
12428: PLUS
12429: PPUSH
12430: LD_INT 2
12432: PPUSH
12433: CALL_OW 2
12437: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
12438: LD_VAR 0 9
12442: PPUSH
12443: LD_VAR 0 13
12447: PPUSH
12448: CALL_OW 325
12452: PUSH
12453: LD_VAR 0 10
12457: PPUSH
12458: CALL_OW 255
12462: PPUSH
12463: LD_VAR 0 13
12467: PPUSH
12468: CALL_OW 325
12472: NOT
12473: AND
12474: IFFALSE 12503
// missile := Insert ( missile , missile + 1 , 3 ) ;
12476: LD_ADDR_VAR 0 14
12480: PUSH
12481: LD_VAR 0 14
12485: PPUSH
12486: LD_VAR 0 14
12490: PUSH
12491: LD_INT 1
12493: PLUS
12494: PPUSH
12495: LD_INT 3
12497: PPUSH
12498: CALL_OW 2
12502: ST_TO_ADDR
// if missile < 2 then
12503: LD_VAR 0 14
12507: PUSH
12508: LD_INT 2
12510: LESS
12511: IFFALSE 12515
// exit ;
12513: GO 12737
// x := GetX ( enemy ) ;
12515: LD_ADDR_VAR 0 4
12519: PUSH
12520: LD_VAR 0 10
12524: PPUSH
12525: CALL_OW 250
12529: ST_TO_ADDR
// y := GetY ( enemy ) ;
12530: LD_ADDR_VAR 0 5
12534: PUSH
12535: LD_VAR 0 10
12539: PPUSH
12540: CALL_OW 251
12544: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
12545: LD_ADDR_VAR 0 6
12549: PUSH
12550: LD_VAR 0 4
12554: PUSH
12555: LD_INT 1
12557: NEG
12558: PPUSH
12559: LD_INT 1
12561: PPUSH
12562: CALL_OW 12
12566: PLUS
12567: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
12568: LD_ADDR_VAR 0 7
12572: PUSH
12573: LD_VAR 0 5
12577: PUSH
12578: LD_INT 1
12580: NEG
12581: PPUSH
12582: LD_INT 1
12584: PPUSH
12585: CALL_OW 12
12589: PLUS
12590: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12591: LD_VAR 0 6
12595: PPUSH
12596: LD_VAR 0 7
12600: PPUSH
12601: CALL_OW 488
12605: NOT
12606: IFFALSE 12628
// begin _x := x ;
12608: LD_ADDR_VAR 0 6
12612: PUSH
12613: LD_VAR 0 4
12617: ST_TO_ADDR
// _y := y ;
12618: LD_ADDR_VAR 0 7
12622: PUSH
12623: LD_VAR 0 5
12627: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12628: LD_ADDR_VAR 0 3
12632: PUSH
12633: LD_INT 1
12635: PPUSH
12636: LD_VAR 0 14
12640: PPUSH
12641: CALL_OW 12
12645: ST_TO_ADDR
// case i of 1 :
12646: LD_VAR 0 3
12650: PUSH
12651: LD_INT 1
12653: DOUBLE
12654: EQUAL
12655: IFTRUE 12659
12657: GO 12676
12659: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12660: LD_VAR 0 1
12664: PPUSH
12665: LD_VAR 0 10
12669: PPUSH
12670: CALL_OW 115
12674: GO 12737
12676: LD_INT 2
12678: DOUBLE
12679: EQUAL
12680: IFTRUE 12684
12682: GO 12706
12684: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12685: LD_VAR 0 1
12689: PPUSH
12690: LD_VAR 0 6
12694: PPUSH
12695: LD_VAR 0 7
12699: PPUSH
12700: CALL_OW 153
12704: GO 12737
12706: LD_INT 3
12708: DOUBLE
12709: EQUAL
12710: IFTRUE 12714
12712: GO 12736
12714: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12715: LD_VAR 0 1
12719: PPUSH
12720: LD_VAR 0 6
12724: PPUSH
12725: LD_VAR 0 7
12729: PPUSH
12730: CALL_OW 154
12734: GO 12737
12736: POP
// end ;
12737: LD_VAR 0 2
12741: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
12742: LD_INT 0
12744: PPUSH
12745: PPUSH
12746: PPUSH
12747: PPUSH
12748: PPUSH
12749: PPUSH
// if not unit or not building then
12750: LD_VAR 0 1
12754: NOT
12755: PUSH
12756: LD_VAR 0 2
12760: NOT
12761: OR
12762: IFFALSE 12766
// exit ;
12764: GO 12924
// x := GetX ( building ) ;
12766: LD_ADDR_VAR 0 5
12770: PUSH
12771: LD_VAR 0 2
12775: PPUSH
12776: CALL_OW 250
12780: ST_TO_ADDR
// y := GetY ( building ) ;
12781: LD_ADDR_VAR 0 6
12785: PUSH
12786: LD_VAR 0 2
12790: PPUSH
12791: CALL_OW 251
12795: ST_TO_ADDR
// for i = 0 to 5 do
12796: LD_ADDR_VAR 0 4
12800: PUSH
12801: DOUBLE
12802: LD_INT 0
12804: DEC
12805: ST_TO_ADDR
12806: LD_INT 5
12808: PUSH
12809: FOR_TO
12810: IFFALSE 12922
// begin _x := ShiftX ( x , i , 3 ) ;
12812: LD_ADDR_VAR 0 7
12816: PUSH
12817: LD_VAR 0 5
12821: PPUSH
12822: LD_VAR 0 4
12826: PPUSH
12827: LD_INT 3
12829: PPUSH
12830: CALL_OW 272
12834: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
12835: LD_ADDR_VAR 0 8
12839: PUSH
12840: LD_VAR 0 6
12844: PPUSH
12845: LD_VAR 0 4
12849: PPUSH
12850: LD_INT 3
12852: PPUSH
12853: CALL_OW 273
12857: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12858: LD_VAR 0 7
12862: PPUSH
12863: LD_VAR 0 8
12867: PPUSH
12868: CALL_OW 488
12872: NOT
12873: IFFALSE 12877
// continue ;
12875: GO 12809
// if HexInfo ( _x , _y ) = 0 then
12877: LD_VAR 0 7
12881: PPUSH
12882: LD_VAR 0 8
12886: PPUSH
12887: CALL_OW 428
12891: PUSH
12892: LD_INT 0
12894: EQUAL
12895: IFFALSE 12920
// begin ComMoveXY ( unit , _x , _y ) ;
12897: LD_VAR 0 1
12901: PPUSH
12902: LD_VAR 0 7
12906: PPUSH
12907: LD_VAR 0 8
12911: PPUSH
12912: CALL_OW 111
// exit ;
12916: POP
12917: POP
12918: GO 12924
// end ; end ;
12920: GO 12809
12922: POP
12923: POP
// end ;
12924: LD_VAR 0 3
12928: RET
// export function ScanBase ( side , base_area ) ; begin
12929: LD_INT 0
12931: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12932: LD_ADDR_VAR 0 3
12936: PUSH
12937: LD_VAR 0 2
12941: PPUSH
12942: LD_INT 81
12944: PUSH
12945: LD_VAR 0 1
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: PPUSH
12954: CALL_OW 70
12958: ST_TO_ADDR
// end ;
12959: LD_VAR 0 3
12963: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
12964: LD_INT 0
12966: PPUSH
12967: PPUSH
12968: PPUSH
12969: PPUSH
// result := false ;
12970: LD_ADDR_VAR 0 2
12974: PUSH
12975: LD_INT 0
12977: ST_TO_ADDR
// side := GetSide ( unit ) ;
12978: LD_ADDR_VAR 0 3
12982: PUSH
12983: LD_VAR 0 1
12987: PPUSH
12988: CALL_OW 255
12992: ST_TO_ADDR
// nat := GetNation ( unit ) ;
12993: LD_ADDR_VAR 0 4
12997: PUSH
12998: LD_VAR 0 1
13002: PPUSH
13003: CALL_OW 248
13007: ST_TO_ADDR
// case nat of 1 :
13008: LD_VAR 0 4
13012: PUSH
13013: LD_INT 1
13015: DOUBLE
13016: EQUAL
13017: IFTRUE 13021
13019: GO 13032
13021: POP
// tech := tech_lassight ; 2 :
13022: LD_ADDR_VAR 0 5
13026: PUSH
13027: LD_INT 12
13029: ST_TO_ADDR
13030: GO 13071
13032: LD_INT 2
13034: DOUBLE
13035: EQUAL
13036: IFTRUE 13040
13038: GO 13051
13040: POP
// tech := tech_mortar ; 3 :
13041: LD_ADDR_VAR 0 5
13045: PUSH
13046: LD_INT 41
13048: ST_TO_ADDR
13049: GO 13071
13051: LD_INT 3
13053: DOUBLE
13054: EQUAL
13055: IFTRUE 13059
13057: GO 13070
13059: POP
// tech := tech_bazooka ; end ;
13060: LD_ADDR_VAR 0 5
13064: PUSH
13065: LD_INT 44
13067: ST_TO_ADDR
13068: GO 13071
13070: POP
// if Researched ( side , tech ) then
13071: LD_VAR 0 3
13075: PPUSH
13076: LD_VAR 0 5
13080: PPUSH
13081: CALL_OW 325
13085: IFFALSE 13112
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
13087: LD_ADDR_VAR 0 2
13091: PUSH
13092: LD_INT 5
13094: PUSH
13095: LD_INT 8
13097: PUSH
13098: LD_INT 9
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: LIST
13105: PUSH
13106: LD_VAR 0 4
13110: ARRAY
13111: ST_TO_ADDR
// end ;
13112: LD_VAR 0 2
13116: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
13117: LD_INT 0
13119: PPUSH
13120: PPUSH
13121: PPUSH
// if not mines then
13122: LD_VAR 0 2
13126: NOT
13127: IFFALSE 13131
// exit ;
13129: GO 13275
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13131: LD_ADDR_VAR 0 5
13135: PUSH
13136: LD_INT 81
13138: PUSH
13139: LD_VAR 0 1
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: LD_INT 3
13150: PUSH
13151: LD_INT 21
13153: PUSH
13154: LD_INT 3
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PPUSH
13169: CALL_OW 69
13173: ST_TO_ADDR
// for i in mines do
13174: LD_ADDR_VAR 0 4
13178: PUSH
13179: LD_VAR 0 2
13183: PUSH
13184: FOR_IN
13185: IFFALSE 13273
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
13187: LD_VAR 0 4
13191: PUSH
13192: LD_INT 1
13194: ARRAY
13195: PPUSH
13196: LD_VAR 0 4
13200: PUSH
13201: LD_INT 2
13203: ARRAY
13204: PPUSH
13205: CALL_OW 458
13209: NOT
13210: IFFALSE 13214
// continue ;
13212: GO 13184
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
13214: LD_VAR 0 4
13218: PUSH
13219: LD_INT 1
13221: ARRAY
13222: PPUSH
13223: LD_VAR 0 4
13227: PUSH
13228: LD_INT 2
13230: ARRAY
13231: PPUSH
13232: CALL_OW 428
13236: PUSH
13237: LD_VAR 0 5
13241: IN
13242: IFFALSE 13271
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
13244: LD_VAR 0 4
13248: PUSH
13249: LD_INT 1
13251: ARRAY
13252: PPUSH
13253: LD_VAR 0 4
13257: PUSH
13258: LD_INT 2
13260: ARRAY
13261: PPUSH
13262: LD_VAR 0 1
13266: PPUSH
13267: CALL_OW 456
// end ;
13271: GO 13184
13273: POP
13274: POP
// end ;
13275: LD_VAR 0 3
13279: RET
// export function Count ( array ) ; var i ; begin
13280: LD_INT 0
13282: PPUSH
13283: PPUSH
// result := 0 ;
13284: LD_ADDR_VAR 0 2
13288: PUSH
13289: LD_INT 0
13291: ST_TO_ADDR
// for i in array do
13292: LD_ADDR_VAR 0 3
13296: PUSH
13297: LD_VAR 0 1
13301: PUSH
13302: FOR_IN
13303: IFFALSE 13327
// if i then
13305: LD_VAR 0 3
13309: IFFALSE 13325
// result := result + 1 ;
13311: LD_ADDR_VAR 0 2
13315: PUSH
13316: LD_VAR 0 2
13320: PUSH
13321: LD_INT 1
13323: PLUS
13324: ST_TO_ADDR
13325: GO 13302
13327: POP
13328: POP
// end ;
13329: LD_VAR 0 2
13333: RET
// export function IsEmpty ( building ) ; begin
13334: LD_INT 0
13336: PPUSH
// if not building then
13337: LD_VAR 0 1
13341: NOT
13342: IFFALSE 13346
// exit ;
13344: GO 13389
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
13346: LD_ADDR_VAR 0 2
13350: PUSH
13351: LD_VAR 0 1
13355: PUSH
13356: LD_INT 22
13358: PUSH
13359: LD_VAR 0 1
13363: PPUSH
13364: CALL_OW 255
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: PUSH
13373: LD_INT 58
13375: PUSH
13376: EMPTY
13377: LIST
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PPUSH
13383: CALL_OW 69
13387: IN
13388: ST_TO_ADDR
// end ;
13389: LD_VAR 0 2
13393: RET
// export function IsNotFull ( building ) ; begin
13394: LD_INT 0
13396: PPUSH
// if not building then
13397: LD_VAR 0 1
13401: NOT
13402: IFFALSE 13406
// exit ;
13404: GO 13425
// result := UnitsInside ( building ) < 6 ;
13406: LD_ADDR_VAR 0 2
13410: PUSH
13411: LD_VAR 0 1
13415: PPUSH
13416: CALL_OW 313
13420: PUSH
13421: LD_INT 6
13423: LESS
13424: ST_TO_ADDR
// end ;
13425: LD_VAR 0 2
13429: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
13430: LD_INT 0
13432: PPUSH
13433: PPUSH
13434: PPUSH
13435: PPUSH
// tmp := [ ] ;
13436: LD_ADDR_VAR 0 3
13440: PUSH
13441: EMPTY
13442: ST_TO_ADDR
// list := [ ] ;
13443: LD_ADDR_VAR 0 5
13447: PUSH
13448: EMPTY
13449: ST_TO_ADDR
// for i = 16 to 25 do
13450: LD_ADDR_VAR 0 4
13454: PUSH
13455: DOUBLE
13456: LD_INT 16
13458: DEC
13459: ST_TO_ADDR
13460: LD_INT 25
13462: PUSH
13463: FOR_TO
13464: IFFALSE 13537
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
13466: LD_ADDR_VAR 0 3
13470: PUSH
13471: LD_VAR 0 3
13475: PUSH
13476: LD_INT 22
13478: PUSH
13479: LD_VAR 0 1
13483: PPUSH
13484: CALL_OW 255
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: LD_INT 91
13495: PUSH
13496: LD_VAR 0 1
13500: PUSH
13501: LD_INT 6
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: LIST
13508: PUSH
13509: LD_INT 30
13511: PUSH
13512: LD_VAR 0 4
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: LIST
13525: PUSH
13526: EMPTY
13527: LIST
13528: PPUSH
13529: CALL_OW 69
13533: ADD
13534: ST_TO_ADDR
13535: GO 13463
13537: POP
13538: POP
// for i = 1 to tmp do
13539: LD_ADDR_VAR 0 4
13543: PUSH
13544: DOUBLE
13545: LD_INT 1
13547: DEC
13548: ST_TO_ADDR
13549: LD_VAR 0 3
13553: PUSH
13554: FOR_TO
13555: IFFALSE 13643
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
13557: LD_ADDR_VAR 0 5
13561: PUSH
13562: LD_VAR 0 5
13566: PUSH
13567: LD_VAR 0 3
13571: PUSH
13572: LD_VAR 0 4
13576: ARRAY
13577: PPUSH
13578: CALL_OW 266
13582: PUSH
13583: LD_VAR 0 3
13587: PUSH
13588: LD_VAR 0 4
13592: ARRAY
13593: PPUSH
13594: CALL_OW 250
13598: PUSH
13599: LD_VAR 0 3
13603: PUSH
13604: LD_VAR 0 4
13608: ARRAY
13609: PPUSH
13610: CALL_OW 251
13614: PUSH
13615: LD_VAR 0 3
13619: PUSH
13620: LD_VAR 0 4
13624: ARRAY
13625: PPUSH
13626: CALL_OW 254
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: PUSH
13637: EMPTY
13638: LIST
13639: ADD
13640: ST_TO_ADDR
13641: GO 13554
13643: POP
13644: POP
// result := list ;
13645: LD_ADDR_VAR 0 2
13649: PUSH
13650: LD_VAR 0 5
13654: ST_TO_ADDR
// end ;
13655: LD_VAR 0 2
13659: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
13660: LD_INT 0
13662: PPUSH
13663: PPUSH
13664: PPUSH
13665: PPUSH
13666: PPUSH
13667: PPUSH
13668: PPUSH
// if not factory then
13669: LD_VAR 0 1
13673: NOT
13674: IFFALSE 13678
// exit ;
13676: GO 14271
// if control = control_apeman then
13678: LD_VAR 0 4
13682: PUSH
13683: LD_INT 5
13685: EQUAL
13686: IFFALSE 13795
// begin tmp := UnitsInside ( factory ) ;
13688: LD_ADDR_VAR 0 8
13692: PUSH
13693: LD_VAR 0 1
13697: PPUSH
13698: CALL_OW 313
13702: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
13703: LD_VAR 0 8
13707: PPUSH
13708: LD_INT 25
13710: PUSH
13711: LD_INT 12
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: PPUSH
13718: CALL_OW 72
13722: NOT
13723: IFFALSE 13733
// control := control_manual ;
13725: LD_ADDR_VAR 0 4
13729: PUSH
13730: LD_INT 1
13732: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
13733: LD_ADDR_VAR 0 8
13737: PUSH
13738: LD_VAR 0 1
13742: PPUSH
13743: CALL 13430 0 1
13747: ST_TO_ADDR
// if tmp then
13748: LD_VAR 0 8
13752: IFFALSE 13795
// begin for i in tmp do
13754: LD_ADDR_VAR 0 7
13758: PUSH
13759: LD_VAR 0 8
13763: PUSH
13764: FOR_IN
13765: IFFALSE 13793
// if i [ 1 ] = b_ext_radio then
13767: LD_VAR 0 7
13771: PUSH
13772: LD_INT 1
13774: ARRAY
13775: PUSH
13776: LD_INT 22
13778: EQUAL
13779: IFFALSE 13791
// begin control := control_remote ;
13781: LD_ADDR_VAR 0 4
13785: PUSH
13786: LD_INT 2
13788: ST_TO_ADDR
// break ;
13789: GO 13793
// end ;
13791: GO 13764
13793: POP
13794: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13795: LD_VAR 0 1
13799: PPUSH
13800: LD_VAR 0 2
13804: PPUSH
13805: LD_VAR 0 3
13809: PPUSH
13810: LD_VAR 0 4
13814: PPUSH
13815: LD_VAR 0 5
13819: PPUSH
13820: CALL_OW 448
13824: IFFALSE 13859
// begin result := [ chassis , engine , control , weapon ] ;
13826: LD_ADDR_VAR 0 6
13830: PUSH
13831: LD_VAR 0 2
13835: PUSH
13836: LD_VAR 0 3
13840: PUSH
13841: LD_VAR 0 4
13845: PUSH
13846: LD_VAR 0 5
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: ST_TO_ADDR
// exit ;
13857: GO 14271
// end ; _chassis := AvailableChassisList ( factory ) ;
13859: LD_ADDR_VAR 0 9
13863: PUSH
13864: LD_VAR 0 1
13868: PPUSH
13869: CALL_OW 475
13873: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
13874: LD_ADDR_VAR 0 11
13878: PUSH
13879: LD_VAR 0 1
13883: PPUSH
13884: CALL_OW 476
13888: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
13889: LD_ADDR_VAR 0 12
13893: PUSH
13894: LD_VAR 0 1
13898: PPUSH
13899: CALL_OW 477
13903: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
13904: LD_ADDR_VAR 0 10
13908: PUSH
13909: LD_VAR 0 1
13913: PPUSH
13914: CALL_OW 478
13918: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
13919: LD_VAR 0 9
13923: NOT
13924: PUSH
13925: LD_VAR 0 11
13929: NOT
13930: OR
13931: PUSH
13932: LD_VAR 0 12
13936: NOT
13937: OR
13938: PUSH
13939: LD_VAR 0 10
13943: NOT
13944: OR
13945: IFFALSE 13980
// begin result := [ chassis , engine , control , weapon ] ;
13947: LD_ADDR_VAR 0 6
13951: PUSH
13952: LD_VAR 0 2
13956: PUSH
13957: LD_VAR 0 3
13961: PUSH
13962: LD_VAR 0 4
13966: PUSH
13967: LD_VAR 0 5
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: ST_TO_ADDR
// exit ;
13978: GO 14271
// end ; if not chassis in _chassis then
13980: LD_VAR 0 2
13984: PUSH
13985: LD_VAR 0 9
13989: IN
13990: NOT
13991: IFFALSE 14017
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
13993: LD_ADDR_VAR 0 2
13997: PUSH
13998: LD_VAR 0 9
14002: PUSH
14003: LD_INT 1
14005: PPUSH
14006: LD_VAR 0 9
14010: PPUSH
14011: CALL_OW 12
14015: ARRAY
14016: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
14017: LD_VAR 0 2
14021: PPUSH
14022: LD_VAR 0 3
14026: PPUSH
14027: CALL 14276 0 2
14031: NOT
14032: IFFALSE 14091
// repeat engine := _engine [ 1 ] ;
14034: LD_ADDR_VAR 0 3
14038: PUSH
14039: LD_VAR 0 11
14043: PUSH
14044: LD_INT 1
14046: ARRAY
14047: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
14048: LD_ADDR_VAR 0 11
14052: PUSH
14053: LD_VAR 0 11
14057: PPUSH
14058: LD_INT 1
14060: PPUSH
14061: CALL_OW 3
14065: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
14066: LD_VAR 0 2
14070: PPUSH
14071: LD_VAR 0 3
14075: PPUSH
14076: CALL 14276 0 2
14080: PUSH
14081: LD_VAR 0 11
14085: PUSH
14086: EMPTY
14087: EQUAL
14088: OR
14089: IFFALSE 14034
// if not control in _control then
14091: LD_VAR 0 4
14095: PUSH
14096: LD_VAR 0 12
14100: IN
14101: NOT
14102: IFFALSE 14128
// control := _control [ rand ( 1 , _control ) ] ;
14104: LD_ADDR_VAR 0 4
14108: PUSH
14109: LD_VAR 0 12
14113: PUSH
14114: LD_INT 1
14116: PPUSH
14117: LD_VAR 0 12
14121: PPUSH
14122: CALL_OW 12
14126: ARRAY
14127: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
14128: LD_VAR 0 2
14132: PPUSH
14133: LD_VAR 0 5
14137: PPUSH
14138: CALL 14496 0 2
14142: NOT
14143: IFFALSE 14202
// repeat weapon := _weapon [ 1 ] ;
14145: LD_ADDR_VAR 0 5
14149: PUSH
14150: LD_VAR 0 10
14154: PUSH
14155: LD_INT 1
14157: ARRAY
14158: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
14159: LD_ADDR_VAR 0 10
14163: PUSH
14164: LD_VAR 0 10
14168: PPUSH
14169: LD_INT 1
14171: PPUSH
14172: CALL_OW 3
14176: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
14177: LD_VAR 0 2
14181: PPUSH
14182: LD_VAR 0 5
14186: PPUSH
14187: CALL 14496 0 2
14191: PUSH
14192: LD_VAR 0 10
14196: PUSH
14197: EMPTY
14198: EQUAL
14199: OR
14200: IFFALSE 14145
// result := [ ] ;
14202: LD_ADDR_VAR 0 6
14206: PUSH
14207: EMPTY
14208: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14209: LD_VAR 0 1
14213: PPUSH
14214: LD_VAR 0 2
14218: PPUSH
14219: LD_VAR 0 3
14223: PPUSH
14224: LD_VAR 0 4
14228: PPUSH
14229: LD_VAR 0 5
14233: PPUSH
14234: CALL_OW 448
14238: IFFALSE 14271
// result := [ chassis , engine , control , weapon ] ;
14240: LD_ADDR_VAR 0 6
14244: PUSH
14245: LD_VAR 0 2
14249: PUSH
14250: LD_VAR 0 3
14254: PUSH
14255: LD_VAR 0 4
14259: PUSH
14260: LD_VAR 0 5
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: ST_TO_ADDR
// end ;
14271: LD_VAR 0 6
14275: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
14276: LD_INT 0
14278: PPUSH
// if not chassis or not engine then
14279: LD_VAR 0 1
14283: NOT
14284: PUSH
14285: LD_VAR 0 2
14289: NOT
14290: OR
14291: IFFALSE 14295
// exit ;
14293: GO 14491
// case engine of engine_solar :
14295: LD_VAR 0 2
14299: PUSH
14300: LD_INT 2
14302: DOUBLE
14303: EQUAL
14304: IFTRUE 14308
14306: GO 14346
14308: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
14309: LD_ADDR_VAR 0 3
14313: PUSH
14314: LD_INT 11
14316: PUSH
14317: LD_INT 12
14319: PUSH
14320: LD_INT 13
14322: PUSH
14323: LD_INT 14
14325: PUSH
14326: LD_INT 1
14328: PUSH
14329: LD_INT 2
14331: PUSH
14332: LD_INT 3
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: ST_TO_ADDR
14344: GO 14475
14346: LD_INT 1
14348: DOUBLE
14349: EQUAL
14350: IFTRUE 14354
14352: GO 14416
14354: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
14355: LD_ADDR_VAR 0 3
14359: PUSH
14360: LD_INT 11
14362: PUSH
14363: LD_INT 12
14365: PUSH
14366: LD_INT 13
14368: PUSH
14369: LD_INT 14
14371: PUSH
14372: LD_INT 1
14374: PUSH
14375: LD_INT 2
14377: PUSH
14378: LD_INT 3
14380: PUSH
14381: LD_INT 4
14383: PUSH
14384: LD_INT 5
14386: PUSH
14387: LD_INT 21
14389: PUSH
14390: LD_INT 23
14392: PUSH
14393: LD_INT 22
14395: PUSH
14396: LD_INT 24
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: ST_TO_ADDR
14414: GO 14475
14416: LD_INT 3
14418: DOUBLE
14419: EQUAL
14420: IFTRUE 14424
14422: GO 14474
14424: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14425: LD_ADDR_VAR 0 3
14429: PUSH
14430: LD_INT 13
14432: PUSH
14433: LD_INT 14
14435: PUSH
14436: LD_INT 2
14438: PUSH
14439: LD_INT 3
14441: PUSH
14442: LD_INT 4
14444: PUSH
14445: LD_INT 5
14447: PUSH
14448: LD_INT 21
14450: PUSH
14451: LD_INT 22
14453: PUSH
14454: LD_INT 23
14456: PUSH
14457: LD_INT 24
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: ST_TO_ADDR
14472: GO 14475
14474: POP
// result := ( chassis in result ) ;
14475: LD_ADDR_VAR 0 3
14479: PUSH
14480: LD_VAR 0 1
14484: PUSH
14485: LD_VAR 0 3
14489: IN
14490: ST_TO_ADDR
// end ;
14491: LD_VAR 0 3
14495: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
14496: LD_INT 0
14498: PPUSH
// if not chassis or not weapon then
14499: LD_VAR 0 1
14503: NOT
14504: PUSH
14505: LD_VAR 0 2
14509: NOT
14510: OR
14511: IFFALSE 14515
// exit ;
14513: GO 15541
// case weapon of us_machine_gun :
14515: LD_VAR 0 2
14519: PUSH
14520: LD_INT 2
14522: DOUBLE
14523: EQUAL
14524: IFTRUE 14528
14526: GO 14558
14528: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
14529: LD_ADDR_VAR 0 3
14533: PUSH
14534: LD_INT 1
14536: PUSH
14537: LD_INT 2
14539: PUSH
14540: LD_INT 3
14542: PUSH
14543: LD_INT 4
14545: PUSH
14546: LD_INT 5
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: ST_TO_ADDR
14556: GO 15525
14558: LD_INT 3
14560: DOUBLE
14561: EQUAL
14562: IFTRUE 14566
14564: GO 14596
14566: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
14567: LD_ADDR_VAR 0 3
14571: PUSH
14572: LD_INT 1
14574: PUSH
14575: LD_INT 2
14577: PUSH
14578: LD_INT 3
14580: PUSH
14581: LD_INT 4
14583: PUSH
14584: LD_INT 5
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: ST_TO_ADDR
14594: GO 15525
14596: LD_INT 11
14598: DOUBLE
14599: EQUAL
14600: IFTRUE 14604
14602: GO 14634
14604: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
14605: LD_ADDR_VAR 0 3
14609: PUSH
14610: LD_INT 1
14612: PUSH
14613: LD_INT 2
14615: PUSH
14616: LD_INT 3
14618: PUSH
14619: LD_INT 4
14621: PUSH
14622: LD_INT 5
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: ST_TO_ADDR
14632: GO 15525
14634: LD_INT 4
14636: DOUBLE
14637: EQUAL
14638: IFTRUE 14642
14640: GO 14668
14642: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
14643: LD_ADDR_VAR 0 3
14647: PUSH
14648: LD_INT 2
14650: PUSH
14651: LD_INT 3
14653: PUSH
14654: LD_INT 4
14656: PUSH
14657: LD_INT 5
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: ST_TO_ADDR
14666: GO 15525
14668: LD_INT 5
14670: DOUBLE
14671: EQUAL
14672: IFTRUE 14676
14674: GO 14702
14676: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
14677: LD_ADDR_VAR 0 3
14681: PUSH
14682: LD_INT 2
14684: PUSH
14685: LD_INT 3
14687: PUSH
14688: LD_INT 4
14690: PUSH
14691: LD_INT 5
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: ST_TO_ADDR
14700: GO 15525
14702: LD_INT 9
14704: DOUBLE
14705: EQUAL
14706: IFTRUE 14710
14708: GO 14736
14710: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
14711: LD_ADDR_VAR 0 3
14715: PUSH
14716: LD_INT 2
14718: PUSH
14719: LD_INT 3
14721: PUSH
14722: LD_INT 4
14724: PUSH
14725: LD_INT 5
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: ST_TO_ADDR
14734: GO 15525
14736: LD_INT 7
14738: DOUBLE
14739: EQUAL
14740: IFTRUE 14744
14742: GO 14770
14744: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
14745: LD_ADDR_VAR 0 3
14749: PUSH
14750: LD_INT 2
14752: PUSH
14753: LD_INT 3
14755: PUSH
14756: LD_INT 4
14758: PUSH
14759: LD_INT 5
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: ST_TO_ADDR
14768: GO 15525
14770: LD_INT 12
14772: DOUBLE
14773: EQUAL
14774: IFTRUE 14778
14776: GO 14804
14778: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
14779: LD_ADDR_VAR 0 3
14783: PUSH
14784: LD_INT 2
14786: PUSH
14787: LD_INT 3
14789: PUSH
14790: LD_INT 4
14792: PUSH
14793: LD_INT 5
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: ST_TO_ADDR
14802: GO 15525
14804: LD_INT 13
14806: DOUBLE
14807: EQUAL
14808: IFTRUE 14812
14810: GO 14838
14812: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
14813: LD_ADDR_VAR 0 3
14817: PUSH
14818: LD_INT 2
14820: PUSH
14821: LD_INT 3
14823: PUSH
14824: LD_INT 4
14826: PUSH
14827: LD_INT 5
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: ST_TO_ADDR
14836: GO 15525
14838: LD_INT 14
14840: DOUBLE
14841: EQUAL
14842: IFTRUE 14846
14844: GO 14864
14846: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
14847: LD_ADDR_VAR 0 3
14851: PUSH
14852: LD_INT 4
14854: PUSH
14855: LD_INT 5
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: ST_TO_ADDR
14862: GO 15525
14864: LD_INT 6
14866: DOUBLE
14867: EQUAL
14868: IFTRUE 14872
14870: GO 14890
14872: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
14873: LD_ADDR_VAR 0 3
14877: PUSH
14878: LD_INT 4
14880: PUSH
14881: LD_INT 5
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: ST_TO_ADDR
14888: GO 15525
14890: LD_INT 10
14892: DOUBLE
14893: EQUAL
14894: IFTRUE 14898
14896: GO 14916
14898: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
14899: LD_ADDR_VAR 0 3
14903: PUSH
14904: LD_INT 4
14906: PUSH
14907: LD_INT 5
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: ST_TO_ADDR
14914: GO 15525
14916: LD_INT 22
14918: DOUBLE
14919: EQUAL
14920: IFTRUE 14924
14922: GO 14950
14924: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
14925: LD_ADDR_VAR 0 3
14929: PUSH
14930: LD_INT 11
14932: PUSH
14933: LD_INT 12
14935: PUSH
14936: LD_INT 13
14938: PUSH
14939: LD_INT 14
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: LIST
14946: LIST
14947: ST_TO_ADDR
14948: GO 15525
14950: LD_INT 23
14952: DOUBLE
14953: EQUAL
14954: IFTRUE 14958
14956: GO 14984
14958: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
14959: LD_ADDR_VAR 0 3
14963: PUSH
14964: LD_INT 11
14966: PUSH
14967: LD_INT 12
14969: PUSH
14970: LD_INT 13
14972: PUSH
14973: LD_INT 14
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: ST_TO_ADDR
14982: GO 15525
14984: LD_INT 24
14986: DOUBLE
14987: EQUAL
14988: IFTRUE 14992
14990: GO 15018
14992: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
14993: LD_ADDR_VAR 0 3
14997: PUSH
14998: LD_INT 11
15000: PUSH
15001: LD_INT 12
15003: PUSH
15004: LD_INT 13
15006: PUSH
15007: LD_INT 14
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: ST_TO_ADDR
15016: GO 15525
15018: LD_INT 30
15020: DOUBLE
15021: EQUAL
15022: IFTRUE 15026
15024: GO 15052
15026: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
15027: LD_ADDR_VAR 0 3
15031: PUSH
15032: LD_INT 11
15034: PUSH
15035: LD_INT 12
15037: PUSH
15038: LD_INT 13
15040: PUSH
15041: LD_INT 14
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: ST_TO_ADDR
15050: GO 15525
15052: LD_INT 25
15054: DOUBLE
15055: EQUAL
15056: IFTRUE 15060
15058: GO 15078
15060: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
15061: LD_ADDR_VAR 0 3
15065: PUSH
15066: LD_INT 13
15068: PUSH
15069: LD_INT 14
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: ST_TO_ADDR
15076: GO 15525
15078: LD_INT 27
15080: DOUBLE
15081: EQUAL
15082: IFTRUE 15086
15084: GO 15104
15086: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
15087: LD_ADDR_VAR 0 3
15091: PUSH
15092: LD_INT 13
15094: PUSH
15095: LD_INT 14
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: ST_TO_ADDR
15102: GO 15525
15104: LD_INT 28
15106: DOUBLE
15107: EQUAL
15108: IFTRUE 15112
15110: GO 15130
15112: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
15113: LD_ADDR_VAR 0 3
15117: PUSH
15118: LD_INT 13
15120: PUSH
15121: LD_INT 14
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: ST_TO_ADDR
15128: GO 15525
15130: LD_INT 29
15132: DOUBLE
15133: EQUAL
15134: IFTRUE 15138
15136: GO 15156
15138: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
15139: LD_ADDR_VAR 0 3
15143: PUSH
15144: LD_INT 13
15146: PUSH
15147: LD_INT 14
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: ST_TO_ADDR
15154: GO 15525
15156: LD_INT 31
15158: DOUBLE
15159: EQUAL
15160: IFTRUE 15164
15162: GO 15182
15164: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
15165: LD_ADDR_VAR 0 3
15169: PUSH
15170: LD_INT 13
15172: PUSH
15173: LD_INT 14
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: ST_TO_ADDR
15180: GO 15525
15182: LD_INT 26
15184: DOUBLE
15185: EQUAL
15186: IFTRUE 15190
15188: GO 15208
15190: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
15191: LD_ADDR_VAR 0 3
15195: PUSH
15196: LD_INT 13
15198: PUSH
15199: LD_INT 14
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: ST_TO_ADDR
15206: GO 15525
15208: LD_INT 42
15210: DOUBLE
15211: EQUAL
15212: IFTRUE 15216
15214: GO 15242
15216: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
15217: LD_ADDR_VAR 0 3
15221: PUSH
15222: LD_INT 21
15224: PUSH
15225: LD_INT 22
15227: PUSH
15228: LD_INT 23
15230: PUSH
15231: LD_INT 24
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: ST_TO_ADDR
15240: GO 15525
15242: LD_INT 43
15244: DOUBLE
15245: EQUAL
15246: IFTRUE 15250
15248: GO 15276
15250: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
15251: LD_ADDR_VAR 0 3
15255: PUSH
15256: LD_INT 21
15258: PUSH
15259: LD_INT 22
15261: PUSH
15262: LD_INT 23
15264: PUSH
15265: LD_INT 24
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: ST_TO_ADDR
15274: GO 15525
15276: LD_INT 44
15278: DOUBLE
15279: EQUAL
15280: IFTRUE 15284
15282: GO 15310
15284: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
15285: LD_ADDR_VAR 0 3
15289: PUSH
15290: LD_INT 21
15292: PUSH
15293: LD_INT 22
15295: PUSH
15296: LD_INT 23
15298: PUSH
15299: LD_INT 24
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: ST_TO_ADDR
15308: GO 15525
15310: LD_INT 45
15312: DOUBLE
15313: EQUAL
15314: IFTRUE 15318
15316: GO 15344
15318: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
15319: LD_ADDR_VAR 0 3
15323: PUSH
15324: LD_INT 21
15326: PUSH
15327: LD_INT 22
15329: PUSH
15330: LD_INT 23
15332: PUSH
15333: LD_INT 24
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: ST_TO_ADDR
15342: GO 15525
15344: LD_INT 49
15346: DOUBLE
15347: EQUAL
15348: IFTRUE 15352
15350: GO 15378
15352: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
15353: LD_ADDR_VAR 0 3
15357: PUSH
15358: LD_INT 21
15360: PUSH
15361: LD_INT 22
15363: PUSH
15364: LD_INT 23
15366: PUSH
15367: LD_INT 24
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: ST_TO_ADDR
15376: GO 15525
15378: LD_INT 51
15380: DOUBLE
15381: EQUAL
15382: IFTRUE 15386
15384: GO 15412
15386: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
15387: LD_ADDR_VAR 0 3
15391: PUSH
15392: LD_INT 21
15394: PUSH
15395: LD_INT 22
15397: PUSH
15398: LD_INT 23
15400: PUSH
15401: LD_INT 24
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: ST_TO_ADDR
15410: GO 15525
15412: LD_INT 52
15414: DOUBLE
15415: EQUAL
15416: IFTRUE 15420
15418: GO 15446
15420: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
15421: LD_ADDR_VAR 0 3
15425: PUSH
15426: LD_INT 21
15428: PUSH
15429: LD_INT 22
15431: PUSH
15432: LD_INT 23
15434: PUSH
15435: LD_INT 24
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: ST_TO_ADDR
15444: GO 15525
15446: LD_INT 53
15448: DOUBLE
15449: EQUAL
15450: IFTRUE 15454
15452: GO 15472
15454: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
15455: LD_ADDR_VAR 0 3
15459: PUSH
15460: LD_INT 23
15462: PUSH
15463: LD_INT 24
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: ST_TO_ADDR
15470: GO 15525
15472: LD_INT 46
15474: DOUBLE
15475: EQUAL
15476: IFTRUE 15480
15478: GO 15498
15480: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
15481: LD_ADDR_VAR 0 3
15485: PUSH
15486: LD_INT 23
15488: PUSH
15489: LD_INT 24
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: ST_TO_ADDR
15496: GO 15525
15498: LD_INT 47
15500: DOUBLE
15501: EQUAL
15502: IFTRUE 15506
15504: GO 15524
15506: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15507: LD_ADDR_VAR 0 3
15511: PUSH
15512: LD_INT 23
15514: PUSH
15515: LD_INT 24
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: ST_TO_ADDR
15522: GO 15525
15524: POP
// result := ( chassis in result ) ;
15525: LD_ADDR_VAR 0 3
15529: PUSH
15530: LD_VAR 0 1
15534: PUSH
15535: LD_VAR 0 3
15539: IN
15540: ST_TO_ADDR
// end ;
15541: LD_VAR 0 3
15545: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
15546: LD_INT 0
15548: PPUSH
15549: PPUSH
15550: PPUSH
15551: PPUSH
15552: PPUSH
15553: PPUSH
15554: PPUSH
// result := array ;
15555: LD_ADDR_VAR 0 5
15559: PUSH
15560: LD_VAR 0 1
15564: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
15565: LD_VAR 0 1
15569: NOT
15570: PUSH
15571: LD_VAR 0 2
15575: NOT
15576: OR
15577: PUSH
15578: LD_VAR 0 3
15582: NOT
15583: OR
15584: PUSH
15585: LD_VAR 0 2
15589: PUSH
15590: LD_VAR 0 1
15594: GREATER
15595: OR
15596: PUSH
15597: LD_VAR 0 3
15601: PUSH
15602: LD_VAR 0 1
15606: GREATER
15607: OR
15608: IFFALSE 15612
// exit ;
15610: GO 15908
// if direction then
15612: LD_VAR 0 4
15616: IFFALSE 15680
// begin d := 1 ;
15618: LD_ADDR_VAR 0 9
15622: PUSH
15623: LD_INT 1
15625: ST_TO_ADDR
// if i_from > i_to then
15626: LD_VAR 0 2
15630: PUSH
15631: LD_VAR 0 3
15635: GREATER
15636: IFFALSE 15662
// length := ( array - i_from ) + i_to else
15638: LD_ADDR_VAR 0 11
15642: PUSH
15643: LD_VAR 0 1
15647: PUSH
15648: LD_VAR 0 2
15652: MINUS
15653: PUSH
15654: LD_VAR 0 3
15658: PLUS
15659: ST_TO_ADDR
15660: GO 15678
// length := i_to - i_from ;
15662: LD_ADDR_VAR 0 11
15666: PUSH
15667: LD_VAR 0 3
15671: PUSH
15672: LD_VAR 0 2
15676: MINUS
15677: ST_TO_ADDR
// end else
15678: GO 15741
// begin d := - 1 ;
15680: LD_ADDR_VAR 0 9
15684: PUSH
15685: LD_INT 1
15687: NEG
15688: ST_TO_ADDR
// if i_from > i_to then
15689: LD_VAR 0 2
15693: PUSH
15694: LD_VAR 0 3
15698: GREATER
15699: IFFALSE 15719
// length := i_from - i_to else
15701: LD_ADDR_VAR 0 11
15705: PUSH
15706: LD_VAR 0 2
15710: PUSH
15711: LD_VAR 0 3
15715: MINUS
15716: ST_TO_ADDR
15717: GO 15741
// length := ( array - i_to ) + i_from ;
15719: LD_ADDR_VAR 0 11
15723: PUSH
15724: LD_VAR 0 1
15728: PUSH
15729: LD_VAR 0 3
15733: MINUS
15734: PUSH
15735: LD_VAR 0 2
15739: PLUS
15740: ST_TO_ADDR
// end ; if not length then
15741: LD_VAR 0 11
15745: NOT
15746: IFFALSE 15750
// exit ;
15748: GO 15908
// tmp := array ;
15750: LD_ADDR_VAR 0 10
15754: PUSH
15755: LD_VAR 0 1
15759: ST_TO_ADDR
// for i = 1 to length do
15760: LD_ADDR_VAR 0 6
15764: PUSH
15765: DOUBLE
15766: LD_INT 1
15768: DEC
15769: ST_TO_ADDR
15770: LD_VAR 0 11
15774: PUSH
15775: FOR_TO
15776: IFFALSE 15896
// begin for j = 1 to array do
15778: LD_ADDR_VAR 0 7
15782: PUSH
15783: DOUBLE
15784: LD_INT 1
15786: DEC
15787: ST_TO_ADDR
15788: LD_VAR 0 1
15792: PUSH
15793: FOR_TO
15794: IFFALSE 15882
// begin k := j + d ;
15796: LD_ADDR_VAR 0 8
15800: PUSH
15801: LD_VAR 0 7
15805: PUSH
15806: LD_VAR 0 9
15810: PLUS
15811: ST_TO_ADDR
// if k > array then
15812: LD_VAR 0 8
15816: PUSH
15817: LD_VAR 0 1
15821: GREATER
15822: IFFALSE 15832
// k := 1 ;
15824: LD_ADDR_VAR 0 8
15828: PUSH
15829: LD_INT 1
15831: ST_TO_ADDR
// if not k then
15832: LD_VAR 0 8
15836: NOT
15837: IFFALSE 15849
// k := array ;
15839: LD_ADDR_VAR 0 8
15843: PUSH
15844: LD_VAR 0 1
15848: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
15849: LD_ADDR_VAR 0 10
15853: PUSH
15854: LD_VAR 0 10
15858: PPUSH
15859: LD_VAR 0 8
15863: PPUSH
15864: LD_VAR 0 1
15868: PUSH
15869: LD_VAR 0 7
15873: ARRAY
15874: PPUSH
15875: CALL_OW 1
15879: ST_TO_ADDR
// end ;
15880: GO 15793
15882: POP
15883: POP
// array := tmp ;
15884: LD_ADDR_VAR 0 1
15888: PUSH
15889: LD_VAR 0 10
15893: ST_TO_ADDR
// end ;
15894: GO 15775
15896: POP
15897: POP
// result := array ;
15898: LD_ADDR_VAR 0 5
15902: PUSH
15903: LD_VAR 0 1
15907: ST_TO_ADDR
// end ;
15908: LD_VAR 0 5
15912: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
15913: LD_INT 0
15915: PPUSH
15916: PPUSH
// result := 0 ;
15917: LD_ADDR_VAR 0 3
15921: PUSH
15922: LD_INT 0
15924: ST_TO_ADDR
// if not array or not value in array then
15925: LD_VAR 0 1
15929: NOT
15930: PUSH
15931: LD_VAR 0 2
15935: PUSH
15936: LD_VAR 0 1
15940: IN
15941: NOT
15942: OR
15943: IFFALSE 15947
// exit ;
15945: GO 16001
// for i = 1 to array do
15947: LD_ADDR_VAR 0 4
15951: PUSH
15952: DOUBLE
15953: LD_INT 1
15955: DEC
15956: ST_TO_ADDR
15957: LD_VAR 0 1
15961: PUSH
15962: FOR_TO
15963: IFFALSE 15999
// if value = array [ i ] then
15965: LD_VAR 0 2
15969: PUSH
15970: LD_VAR 0 1
15974: PUSH
15975: LD_VAR 0 4
15979: ARRAY
15980: EQUAL
15981: IFFALSE 15997
// begin result := i ;
15983: LD_ADDR_VAR 0 3
15987: PUSH
15988: LD_VAR 0 4
15992: ST_TO_ADDR
// exit ;
15993: POP
15994: POP
15995: GO 16001
// end ;
15997: GO 15962
15999: POP
16000: POP
// end ;
16001: LD_VAR 0 3
16005: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
16006: LD_INT 0
16008: PPUSH
// vc_chassis := chassis ;
16009: LD_ADDR_OWVAR 37
16013: PUSH
16014: LD_VAR 0 1
16018: ST_TO_ADDR
// vc_engine := engine ;
16019: LD_ADDR_OWVAR 39
16023: PUSH
16024: LD_VAR 0 2
16028: ST_TO_ADDR
// vc_control := control ;
16029: LD_ADDR_OWVAR 38
16033: PUSH
16034: LD_VAR 0 3
16038: ST_TO_ADDR
// vc_weapon := weapon ;
16039: LD_ADDR_OWVAR 40
16043: PUSH
16044: LD_VAR 0 4
16048: ST_TO_ADDR
// vc_fuel_battery := fuel ;
16049: LD_ADDR_OWVAR 41
16053: PUSH
16054: LD_VAR 0 5
16058: ST_TO_ADDR
// end ;
16059: LD_VAR 0 6
16063: RET
// export function WantPlant ( unit ) ; var task ; begin
16064: LD_INT 0
16066: PPUSH
16067: PPUSH
// result := false ;
16068: LD_ADDR_VAR 0 2
16072: PUSH
16073: LD_INT 0
16075: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
16076: LD_ADDR_VAR 0 3
16080: PUSH
16081: LD_VAR 0 1
16085: PPUSH
16086: CALL_OW 437
16090: ST_TO_ADDR
// if task then
16091: LD_VAR 0 3
16095: IFFALSE 16123
// if task [ 1 ] [ 1 ] = p then
16097: LD_VAR 0 3
16101: PUSH
16102: LD_INT 1
16104: ARRAY
16105: PUSH
16106: LD_INT 1
16108: ARRAY
16109: PUSH
16110: LD_STRING p
16112: EQUAL
16113: IFFALSE 16123
// result := true ;
16115: LD_ADDR_VAR 0 2
16119: PUSH
16120: LD_INT 1
16122: ST_TO_ADDR
// end ;
16123: LD_VAR 0 2
16127: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
16128: LD_INT 0
16130: PPUSH
16131: PPUSH
16132: PPUSH
16133: PPUSH
// if pos < 1 then
16134: LD_VAR 0 2
16138: PUSH
16139: LD_INT 1
16141: LESS
16142: IFFALSE 16146
// exit ;
16144: GO 16449
// if pos = 1 then
16146: LD_VAR 0 2
16150: PUSH
16151: LD_INT 1
16153: EQUAL
16154: IFFALSE 16187
// result := Replace ( arr , pos [ 1 ] , value ) else
16156: LD_ADDR_VAR 0 4
16160: PUSH
16161: LD_VAR 0 1
16165: PPUSH
16166: LD_VAR 0 2
16170: PUSH
16171: LD_INT 1
16173: ARRAY
16174: PPUSH
16175: LD_VAR 0 3
16179: PPUSH
16180: CALL_OW 1
16184: ST_TO_ADDR
16185: GO 16449
// begin tmp := arr ;
16187: LD_ADDR_VAR 0 6
16191: PUSH
16192: LD_VAR 0 1
16196: ST_TO_ADDR
// s_arr := [ tmp ] ;
16197: LD_ADDR_VAR 0 7
16201: PUSH
16202: LD_VAR 0 6
16206: PUSH
16207: EMPTY
16208: LIST
16209: ST_TO_ADDR
// for i = 1 to pos - 1 do
16210: LD_ADDR_VAR 0 5
16214: PUSH
16215: DOUBLE
16216: LD_INT 1
16218: DEC
16219: ST_TO_ADDR
16220: LD_VAR 0 2
16224: PUSH
16225: LD_INT 1
16227: MINUS
16228: PUSH
16229: FOR_TO
16230: IFFALSE 16275
// begin tmp := tmp [ pos [ i ] ] ;
16232: LD_ADDR_VAR 0 6
16236: PUSH
16237: LD_VAR 0 6
16241: PUSH
16242: LD_VAR 0 2
16246: PUSH
16247: LD_VAR 0 5
16251: ARRAY
16252: ARRAY
16253: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
16254: LD_ADDR_VAR 0 7
16258: PUSH
16259: LD_VAR 0 7
16263: PUSH
16264: LD_VAR 0 6
16268: PUSH
16269: EMPTY
16270: LIST
16271: ADD
16272: ST_TO_ADDR
// end ;
16273: GO 16229
16275: POP
16276: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
16277: LD_ADDR_VAR 0 6
16281: PUSH
16282: LD_VAR 0 6
16286: PPUSH
16287: LD_VAR 0 2
16291: PUSH
16292: LD_VAR 0 2
16296: ARRAY
16297: PPUSH
16298: LD_VAR 0 3
16302: PPUSH
16303: CALL_OW 1
16307: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
16308: LD_ADDR_VAR 0 7
16312: PUSH
16313: LD_VAR 0 7
16317: PPUSH
16318: LD_VAR 0 7
16322: PPUSH
16323: LD_VAR 0 6
16327: PPUSH
16328: CALL_OW 1
16332: ST_TO_ADDR
// for i = s_arr downto 2 do
16333: LD_ADDR_VAR 0 5
16337: PUSH
16338: DOUBLE
16339: LD_VAR 0 7
16343: INC
16344: ST_TO_ADDR
16345: LD_INT 2
16347: PUSH
16348: FOR_DOWNTO
16349: IFFALSE 16433
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
16351: LD_ADDR_VAR 0 6
16355: PUSH
16356: LD_VAR 0 7
16360: PUSH
16361: LD_VAR 0 5
16365: PUSH
16366: LD_INT 1
16368: MINUS
16369: ARRAY
16370: PPUSH
16371: LD_VAR 0 2
16375: PUSH
16376: LD_VAR 0 5
16380: PUSH
16381: LD_INT 1
16383: MINUS
16384: ARRAY
16385: PPUSH
16386: LD_VAR 0 7
16390: PUSH
16391: LD_VAR 0 5
16395: ARRAY
16396: PPUSH
16397: CALL_OW 1
16401: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
16402: LD_ADDR_VAR 0 7
16406: PUSH
16407: LD_VAR 0 7
16411: PPUSH
16412: LD_VAR 0 5
16416: PUSH
16417: LD_INT 1
16419: MINUS
16420: PPUSH
16421: LD_VAR 0 6
16425: PPUSH
16426: CALL_OW 1
16430: ST_TO_ADDR
// end ;
16431: GO 16348
16433: POP
16434: POP
// result := s_arr [ 1 ] ;
16435: LD_ADDR_VAR 0 4
16439: PUSH
16440: LD_VAR 0 7
16444: PUSH
16445: LD_INT 1
16447: ARRAY
16448: ST_TO_ADDR
// end ; end ;
16449: LD_VAR 0 4
16453: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
16454: LD_INT 0
16456: PPUSH
16457: PPUSH
// if not list then
16458: LD_VAR 0 1
16462: NOT
16463: IFFALSE 16467
// exit ;
16465: GO 16558
// i := list [ pos1 ] ;
16467: LD_ADDR_VAR 0 5
16471: PUSH
16472: LD_VAR 0 1
16476: PUSH
16477: LD_VAR 0 2
16481: ARRAY
16482: ST_TO_ADDR
// if not i then
16483: LD_VAR 0 5
16487: NOT
16488: IFFALSE 16492
// exit ;
16490: GO 16558
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
16492: LD_ADDR_VAR 0 1
16496: PUSH
16497: LD_VAR 0 1
16501: PPUSH
16502: LD_VAR 0 2
16506: PPUSH
16507: LD_VAR 0 1
16511: PUSH
16512: LD_VAR 0 3
16516: ARRAY
16517: PPUSH
16518: CALL_OW 1
16522: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
16523: LD_ADDR_VAR 0 1
16527: PUSH
16528: LD_VAR 0 1
16532: PPUSH
16533: LD_VAR 0 3
16537: PPUSH
16538: LD_VAR 0 5
16542: PPUSH
16543: CALL_OW 1
16547: ST_TO_ADDR
// result := list ;
16548: LD_ADDR_VAR 0 4
16552: PUSH
16553: LD_VAR 0 1
16557: ST_TO_ADDR
// end ;
16558: LD_VAR 0 4
16562: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
16563: LD_INT 0
16565: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
16566: LD_ADDR_VAR 0 5
16570: PUSH
16571: LD_VAR 0 1
16575: PPUSH
16576: CALL_OW 250
16580: PPUSH
16581: LD_VAR 0 1
16585: PPUSH
16586: CALL_OW 251
16590: PPUSH
16591: LD_VAR 0 2
16595: PPUSH
16596: LD_VAR 0 3
16600: PPUSH
16601: LD_VAR 0 4
16605: PPUSH
16606: CALL 16616 0 5
16610: ST_TO_ADDR
// end ;
16611: LD_VAR 0 5
16615: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
16616: LD_INT 0
16618: PPUSH
16619: PPUSH
16620: PPUSH
16621: PPUSH
// if not list then
16622: LD_VAR 0 3
16626: NOT
16627: IFFALSE 16631
// exit ;
16629: GO 17019
// result := [ ] ;
16631: LD_ADDR_VAR 0 6
16635: PUSH
16636: EMPTY
16637: ST_TO_ADDR
// for i in list do
16638: LD_ADDR_VAR 0 7
16642: PUSH
16643: LD_VAR 0 3
16647: PUSH
16648: FOR_IN
16649: IFFALSE 16851
// begin tmp := GetDistUnitXY ( i , x , y ) ;
16651: LD_ADDR_VAR 0 9
16655: PUSH
16656: LD_VAR 0 7
16660: PPUSH
16661: LD_VAR 0 1
16665: PPUSH
16666: LD_VAR 0 2
16670: PPUSH
16671: CALL_OW 297
16675: ST_TO_ADDR
// if not result then
16676: LD_VAR 0 6
16680: NOT
16681: IFFALSE 16707
// result := [ [ i , tmp ] ] else
16683: LD_ADDR_VAR 0 6
16687: PUSH
16688: LD_VAR 0 7
16692: PUSH
16693: LD_VAR 0 9
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: EMPTY
16703: LIST
16704: ST_TO_ADDR
16705: GO 16849
// begin if result [ result ] [ 2 ] < tmp then
16707: LD_VAR 0 6
16711: PUSH
16712: LD_VAR 0 6
16716: ARRAY
16717: PUSH
16718: LD_INT 2
16720: ARRAY
16721: PUSH
16722: LD_VAR 0 9
16726: LESS
16727: IFFALSE 16769
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16729: LD_ADDR_VAR 0 6
16733: PUSH
16734: LD_VAR 0 6
16738: PPUSH
16739: LD_VAR 0 6
16743: PUSH
16744: LD_INT 1
16746: PLUS
16747: PPUSH
16748: LD_VAR 0 7
16752: PUSH
16753: LD_VAR 0 9
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: PPUSH
16762: CALL_OW 2
16766: ST_TO_ADDR
16767: GO 16849
// for j = 1 to result do
16769: LD_ADDR_VAR 0 8
16773: PUSH
16774: DOUBLE
16775: LD_INT 1
16777: DEC
16778: ST_TO_ADDR
16779: LD_VAR 0 6
16783: PUSH
16784: FOR_TO
16785: IFFALSE 16847
// begin if tmp < result [ j ] [ 2 ] then
16787: LD_VAR 0 9
16791: PUSH
16792: LD_VAR 0 6
16796: PUSH
16797: LD_VAR 0 8
16801: ARRAY
16802: PUSH
16803: LD_INT 2
16805: ARRAY
16806: LESS
16807: IFFALSE 16845
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16809: LD_ADDR_VAR 0 6
16813: PUSH
16814: LD_VAR 0 6
16818: PPUSH
16819: LD_VAR 0 8
16823: PPUSH
16824: LD_VAR 0 7
16828: PUSH
16829: LD_VAR 0 9
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: PPUSH
16838: CALL_OW 2
16842: ST_TO_ADDR
// break ;
16843: GO 16847
// end ; end ;
16845: GO 16784
16847: POP
16848: POP
// end ; end ;
16849: GO 16648
16851: POP
16852: POP
// if result and not asc then
16853: LD_VAR 0 6
16857: PUSH
16858: LD_VAR 0 4
16862: NOT
16863: AND
16864: IFFALSE 16939
// begin tmp := result ;
16866: LD_ADDR_VAR 0 9
16870: PUSH
16871: LD_VAR 0 6
16875: ST_TO_ADDR
// for i = tmp downto 1 do
16876: LD_ADDR_VAR 0 7
16880: PUSH
16881: DOUBLE
16882: LD_VAR 0 9
16886: INC
16887: ST_TO_ADDR
16888: LD_INT 1
16890: PUSH
16891: FOR_DOWNTO
16892: IFFALSE 16937
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16894: LD_ADDR_VAR 0 6
16898: PUSH
16899: LD_VAR 0 6
16903: PPUSH
16904: LD_VAR 0 9
16908: PUSH
16909: LD_VAR 0 7
16913: MINUS
16914: PUSH
16915: LD_INT 1
16917: PLUS
16918: PPUSH
16919: LD_VAR 0 9
16923: PUSH
16924: LD_VAR 0 7
16928: ARRAY
16929: PPUSH
16930: CALL_OW 1
16934: ST_TO_ADDR
16935: GO 16891
16937: POP
16938: POP
// end ; tmp := [ ] ;
16939: LD_ADDR_VAR 0 9
16943: PUSH
16944: EMPTY
16945: ST_TO_ADDR
// if mode then
16946: LD_VAR 0 5
16950: IFFALSE 17019
// begin for i = 1 to result do
16952: LD_ADDR_VAR 0 7
16956: PUSH
16957: DOUBLE
16958: LD_INT 1
16960: DEC
16961: ST_TO_ADDR
16962: LD_VAR 0 6
16966: PUSH
16967: FOR_TO
16968: IFFALSE 17007
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16970: LD_ADDR_VAR 0 9
16974: PUSH
16975: LD_VAR 0 9
16979: PPUSH
16980: LD_VAR 0 7
16984: PPUSH
16985: LD_VAR 0 6
16989: PUSH
16990: LD_VAR 0 7
16994: ARRAY
16995: PUSH
16996: LD_INT 1
16998: ARRAY
16999: PPUSH
17000: CALL_OW 1
17004: ST_TO_ADDR
17005: GO 16967
17007: POP
17008: POP
// result := tmp ;
17009: LD_ADDR_VAR 0 6
17013: PUSH
17014: LD_VAR 0 9
17018: ST_TO_ADDR
// end ; end ;
17019: LD_VAR 0 6
17023: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
17024: LD_INT 0
17026: PPUSH
17027: PPUSH
17028: PPUSH
17029: PPUSH
17030: PPUSH
17031: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
17032: LD_ADDR_VAR 0 5
17036: PUSH
17037: LD_INT 0
17039: PUSH
17040: LD_INT 0
17042: PUSH
17043: LD_INT 0
17045: PUSH
17046: EMPTY
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: ST_TO_ADDR
// if not x or not y then
17054: LD_VAR 0 2
17058: NOT
17059: PUSH
17060: LD_VAR 0 3
17064: NOT
17065: OR
17066: IFFALSE 17070
// exit ;
17068: GO 18716
// if not range then
17070: LD_VAR 0 4
17074: NOT
17075: IFFALSE 17085
// range := 10 ;
17077: LD_ADDR_VAR 0 4
17081: PUSH
17082: LD_INT 10
17084: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17085: LD_ADDR_VAR 0 8
17089: PUSH
17090: LD_INT 81
17092: PUSH
17093: LD_VAR 0 1
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: PUSH
17102: LD_INT 92
17104: PUSH
17105: LD_VAR 0 2
17109: PUSH
17110: LD_VAR 0 3
17114: PUSH
17115: LD_VAR 0 4
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: PUSH
17126: LD_INT 3
17128: PUSH
17129: LD_INT 21
17131: PUSH
17132: LD_INT 3
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: LIST
17147: PPUSH
17148: CALL_OW 69
17152: ST_TO_ADDR
// if not tmp then
17153: LD_VAR 0 8
17157: NOT
17158: IFFALSE 17162
// exit ;
17160: GO 18716
// for i in tmp do
17162: LD_ADDR_VAR 0 6
17166: PUSH
17167: LD_VAR 0 8
17171: PUSH
17172: FOR_IN
17173: IFFALSE 18691
// begin points := [ 0 , 0 , 0 ] ;
17175: LD_ADDR_VAR 0 9
17179: PUSH
17180: LD_INT 0
17182: PUSH
17183: LD_INT 0
17185: PUSH
17186: LD_INT 0
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: LIST
17193: ST_TO_ADDR
// bpoints := 1 ;
17194: LD_ADDR_VAR 0 10
17198: PUSH
17199: LD_INT 1
17201: ST_TO_ADDR
// case GetType ( i ) of unit_human :
17202: LD_VAR 0 6
17206: PPUSH
17207: CALL_OW 247
17211: PUSH
17212: LD_INT 1
17214: DOUBLE
17215: EQUAL
17216: IFTRUE 17220
17218: GO 17798
17220: POP
// begin if GetClass ( i ) = 1 then
17221: LD_VAR 0 6
17225: PPUSH
17226: CALL_OW 257
17230: PUSH
17231: LD_INT 1
17233: EQUAL
17234: IFFALSE 17255
// points := [ 10 , 5 , 3 ] ;
17236: LD_ADDR_VAR 0 9
17240: PUSH
17241: LD_INT 10
17243: PUSH
17244: LD_INT 5
17246: PUSH
17247: LD_INT 3
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: LIST
17254: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
17255: LD_VAR 0 6
17259: PPUSH
17260: CALL_OW 257
17264: PUSH
17265: LD_INT 2
17267: PUSH
17268: LD_INT 3
17270: PUSH
17271: LD_INT 4
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: LIST
17278: IN
17279: IFFALSE 17300
// points := [ 3 , 2 , 1 ] ;
17281: LD_ADDR_VAR 0 9
17285: PUSH
17286: LD_INT 3
17288: PUSH
17289: LD_INT 2
17291: PUSH
17292: LD_INT 1
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: LIST
17299: ST_TO_ADDR
// if GetClass ( i ) = 5 then
17300: LD_VAR 0 6
17304: PPUSH
17305: CALL_OW 257
17309: PUSH
17310: LD_INT 5
17312: EQUAL
17313: IFFALSE 17334
// points := [ 130 , 5 , 2 ] ;
17315: LD_ADDR_VAR 0 9
17319: PUSH
17320: LD_INT 130
17322: PUSH
17323: LD_INT 5
17325: PUSH
17326: LD_INT 2
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: LIST
17333: ST_TO_ADDR
// if GetClass ( i ) = 8 then
17334: LD_VAR 0 6
17338: PPUSH
17339: CALL_OW 257
17343: PUSH
17344: LD_INT 8
17346: EQUAL
17347: IFFALSE 17368
// points := [ 35 , 35 , 30 ] ;
17349: LD_ADDR_VAR 0 9
17353: PUSH
17354: LD_INT 35
17356: PUSH
17357: LD_INT 35
17359: PUSH
17360: LD_INT 30
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: LIST
17367: ST_TO_ADDR
// if GetClass ( i ) = 9 then
17368: LD_VAR 0 6
17372: PPUSH
17373: CALL_OW 257
17377: PUSH
17378: LD_INT 9
17380: EQUAL
17381: IFFALSE 17402
// points := [ 20 , 55 , 40 ] ;
17383: LD_ADDR_VAR 0 9
17387: PUSH
17388: LD_INT 20
17390: PUSH
17391: LD_INT 55
17393: PUSH
17394: LD_INT 40
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: LIST
17401: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
17402: LD_VAR 0 6
17406: PPUSH
17407: CALL_OW 257
17411: PUSH
17412: LD_INT 12
17414: PUSH
17415: LD_INT 16
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: IN
17422: IFFALSE 17443
// points := [ 5 , 3 , 2 ] ;
17424: LD_ADDR_VAR 0 9
17428: PUSH
17429: LD_INT 5
17431: PUSH
17432: LD_INT 3
17434: PUSH
17435: LD_INT 2
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: LIST
17442: ST_TO_ADDR
// if GetClass ( i ) = 17 then
17443: LD_VAR 0 6
17447: PPUSH
17448: CALL_OW 257
17452: PUSH
17453: LD_INT 17
17455: EQUAL
17456: IFFALSE 17477
// points := [ 100 , 50 , 75 ] ;
17458: LD_ADDR_VAR 0 9
17462: PUSH
17463: LD_INT 100
17465: PUSH
17466: LD_INT 50
17468: PUSH
17469: LD_INT 75
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: LIST
17476: ST_TO_ADDR
// if GetClass ( i ) = 15 then
17477: LD_VAR 0 6
17481: PPUSH
17482: CALL_OW 257
17486: PUSH
17487: LD_INT 15
17489: EQUAL
17490: IFFALSE 17511
// points := [ 10 , 5 , 3 ] ;
17492: LD_ADDR_VAR 0 9
17496: PUSH
17497: LD_INT 10
17499: PUSH
17500: LD_INT 5
17502: PUSH
17503: LD_INT 3
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: LIST
17510: ST_TO_ADDR
// if GetClass ( i ) = 14 then
17511: LD_VAR 0 6
17515: PPUSH
17516: CALL_OW 257
17520: PUSH
17521: LD_INT 14
17523: EQUAL
17524: IFFALSE 17545
// points := [ 10 , 0 , 0 ] ;
17526: LD_ADDR_VAR 0 9
17530: PUSH
17531: LD_INT 10
17533: PUSH
17534: LD_INT 0
17536: PUSH
17537: LD_INT 0
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: LIST
17544: ST_TO_ADDR
// if GetClass ( i ) = 11 then
17545: LD_VAR 0 6
17549: PPUSH
17550: CALL_OW 257
17554: PUSH
17555: LD_INT 11
17557: EQUAL
17558: IFFALSE 17579
// points := [ 30 , 10 , 5 ] ;
17560: LD_ADDR_VAR 0 9
17564: PUSH
17565: LD_INT 30
17567: PUSH
17568: LD_INT 10
17570: PUSH
17571: LD_INT 5
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: LIST
17578: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
17579: LD_VAR 0 1
17583: PPUSH
17584: LD_INT 5
17586: PPUSH
17587: CALL_OW 321
17591: PUSH
17592: LD_INT 2
17594: EQUAL
17595: IFFALSE 17612
// bpoints := bpoints * 1.8 ;
17597: LD_ADDR_VAR 0 10
17601: PUSH
17602: LD_VAR 0 10
17606: PUSH
17607: LD_REAL  1.80000000000000E+0000
17610: MUL
17611: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
17612: LD_VAR 0 6
17616: PPUSH
17617: CALL_OW 257
17621: PUSH
17622: LD_INT 1
17624: PUSH
17625: LD_INT 2
17627: PUSH
17628: LD_INT 3
17630: PUSH
17631: LD_INT 4
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: IN
17640: PUSH
17641: LD_VAR 0 1
17645: PPUSH
17646: LD_INT 51
17648: PPUSH
17649: CALL_OW 321
17653: PUSH
17654: LD_INT 2
17656: EQUAL
17657: AND
17658: IFFALSE 17675
// bpoints := bpoints * 1.2 ;
17660: LD_ADDR_VAR 0 10
17664: PUSH
17665: LD_VAR 0 10
17669: PUSH
17670: LD_REAL  1.20000000000000E+0000
17673: MUL
17674: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17675: LD_VAR 0 6
17679: PPUSH
17680: CALL_OW 257
17684: PUSH
17685: LD_INT 5
17687: PUSH
17688: LD_INT 7
17690: PUSH
17691: LD_INT 9
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: LIST
17698: IN
17699: PUSH
17700: LD_VAR 0 1
17704: PPUSH
17705: LD_INT 52
17707: PPUSH
17708: CALL_OW 321
17712: PUSH
17713: LD_INT 2
17715: EQUAL
17716: AND
17717: IFFALSE 17734
// bpoints := bpoints * 1.5 ;
17719: LD_ADDR_VAR 0 10
17723: PUSH
17724: LD_VAR 0 10
17728: PUSH
17729: LD_REAL  1.50000000000000E+0000
17732: MUL
17733: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17734: LD_VAR 0 1
17738: PPUSH
17739: LD_INT 66
17741: PPUSH
17742: CALL_OW 321
17746: PUSH
17747: LD_INT 2
17749: EQUAL
17750: IFFALSE 17767
// bpoints := bpoints * 1.1 ;
17752: LD_ADDR_VAR 0 10
17756: PUSH
17757: LD_VAR 0 10
17761: PUSH
17762: LD_REAL  1.10000000000000E+0000
17765: MUL
17766: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17767: LD_ADDR_VAR 0 10
17771: PUSH
17772: LD_VAR 0 10
17776: PUSH
17777: LD_VAR 0 6
17781: PPUSH
17782: LD_INT 1
17784: PPUSH
17785: CALL_OW 259
17789: PUSH
17790: LD_REAL  1.15000000000000E+0000
17793: MUL
17794: MUL
17795: ST_TO_ADDR
// end ; unit_vehicle :
17796: GO 18620
17798: LD_INT 2
17800: DOUBLE
17801: EQUAL
17802: IFTRUE 17806
17804: GO 18608
17806: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17807: LD_VAR 0 6
17811: PPUSH
17812: CALL_OW 264
17816: PUSH
17817: LD_INT 2
17819: PUSH
17820: LD_INT 42
17822: PUSH
17823: LD_INT 24
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: LIST
17830: IN
17831: IFFALSE 17852
// points := [ 25 , 5 , 3 ] ;
17833: LD_ADDR_VAR 0 9
17837: PUSH
17838: LD_INT 25
17840: PUSH
17841: LD_INT 5
17843: PUSH
17844: LD_INT 3
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: LIST
17851: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17852: LD_VAR 0 6
17856: PPUSH
17857: CALL_OW 264
17861: PUSH
17862: LD_INT 4
17864: PUSH
17865: LD_INT 43
17867: PUSH
17868: LD_INT 25
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: LIST
17875: IN
17876: IFFALSE 17897
// points := [ 40 , 15 , 5 ] ;
17878: LD_ADDR_VAR 0 9
17882: PUSH
17883: LD_INT 40
17885: PUSH
17886: LD_INT 15
17888: PUSH
17889: LD_INT 5
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: LIST
17896: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17897: LD_VAR 0 6
17901: PPUSH
17902: CALL_OW 264
17906: PUSH
17907: LD_INT 3
17909: PUSH
17910: LD_INT 23
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: IN
17917: IFFALSE 17938
// points := [ 7 , 25 , 8 ] ;
17919: LD_ADDR_VAR 0 9
17923: PUSH
17924: LD_INT 7
17926: PUSH
17927: LD_INT 25
17929: PUSH
17930: LD_INT 8
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: LIST
17937: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17938: LD_VAR 0 6
17942: PPUSH
17943: CALL_OW 264
17947: PUSH
17948: LD_INT 5
17950: PUSH
17951: LD_INT 27
17953: PUSH
17954: LD_INT 44
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: LIST
17961: IN
17962: IFFALSE 17983
// points := [ 14 , 50 , 16 ] ;
17964: LD_ADDR_VAR 0 9
17968: PUSH
17969: LD_INT 14
17971: PUSH
17972: LD_INT 50
17974: PUSH
17975: LD_INT 16
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: LIST
17982: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17983: LD_VAR 0 6
17987: PPUSH
17988: CALL_OW 264
17992: PUSH
17993: LD_INT 6
17995: PUSH
17996: LD_INT 46
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: IN
18003: IFFALSE 18024
// points := [ 32 , 120 , 70 ] ;
18005: LD_ADDR_VAR 0 9
18009: PUSH
18010: LD_INT 32
18012: PUSH
18013: LD_INT 120
18015: PUSH
18016: LD_INT 70
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: LIST
18023: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
18024: LD_VAR 0 6
18028: PPUSH
18029: CALL_OW 264
18033: PUSH
18034: LD_INT 7
18036: PUSH
18037: LD_INT 28
18039: PUSH
18040: LD_INT 45
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: LIST
18047: IN
18048: IFFALSE 18069
// points := [ 35 , 20 , 45 ] ;
18050: LD_ADDR_VAR 0 9
18054: PUSH
18055: LD_INT 35
18057: PUSH
18058: LD_INT 20
18060: PUSH
18061: LD_INT 45
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: LIST
18068: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
18069: LD_VAR 0 6
18073: PPUSH
18074: CALL_OW 264
18078: PUSH
18079: LD_INT 47
18081: PUSH
18082: EMPTY
18083: LIST
18084: IN
18085: IFFALSE 18106
// points := [ 67 , 45 , 75 ] ;
18087: LD_ADDR_VAR 0 9
18091: PUSH
18092: LD_INT 67
18094: PUSH
18095: LD_INT 45
18097: PUSH
18098: LD_INT 75
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: LIST
18105: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
18106: LD_VAR 0 6
18110: PPUSH
18111: CALL_OW 264
18115: PUSH
18116: LD_INT 26
18118: PUSH
18119: EMPTY
18120: LIST
18121: IN
18122: IFFALSE 18143
// points := [ 120 , 30 , 80 ] ;
18124: LD_ADDR_VAR 0 9
18128: PUSH
18129: LD_INT 120
18131: PUSH
18132: LD_INT 30
18134: PUSH
18135: LD_INT 80
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: LIST
18142: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
18143: LD_VAR 0 6
18147: PPUSH
18148: CALL_OW 264
18152: PUSH
18153: LD_INT 22
18155: PUSH
18156: EMPTY
18157: LIST
18158: IN
18159: IFFALSE 18180
// points := [ 40 , 1 , 1 ] ;
18161: LD_ADDR_VAR 0 9
18165: PUSH
18166: LD_INT 40
18168: PUSH
18169: LD_INT 1
18171: PUSH
18172: LD_INT 1
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: LIST
18179: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
18180: LD_VAR 0 6
18184: PPUSH
18185: CALL_OW 264
18189: PUSH
18190: LD_INT 29
18192: PUSH
18193: EMPTY
18194: LIST
18195: IN
18196: IFFALSE 18217
// points := [ 70 , 200 , 400 ] ;
18198: LD_ADDR_VAR 0 9
18202: PUSH
18203: LD_INT 70
18205: PUSH
18206: LD_INT 200
18208: PUSH
18209: LD_INT 400
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: LIST
18216: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
18217: LD_VAR 0 6
18221: PPUSH
18222: CALL_OW 264
18226: PUSH
18227: LD_INT 14
18229: PUSH
18230: LD_INT 53
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: IN
18237: IFFALSE 18258
// points := [ 40 , 10 , 20 ] ;
18239: LD_ADDR_VAR 0 9
18243: PUSH
18244: LD_INT 40
18246: PUSH
18247: LD_INT 10
18249: PUSH
18250: LD_INT 20
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: LIST
18257: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
18258: LD_VAR 0 6
18262: PPUSH
18263: CALL_OW 264
18267: PUSH
18268: LD_INT 9
18270: PUSH
18271: EMPTY
18272: LIST
18273: IN
18274: IFFALSE 18295
// points := [ 5 , 70 , 20 ] ;
18276: LD_ADDR_VAR 0 9
18280: PUSH
18281: LD_INT 5
18283: PUSH
18284: LD_INT 70
18286: PUSH
18287: LD_INT 20
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: LIST
18294: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
18295: LD_VAR 0 6
18299: PPUSH
18300: CALL_OW 264
18304: PUSH
18305: LD_INT 10
18307: PUSH
18308: EMPTY
18309: LIST
18310: IN
18311: IFFALSE 18332
// points := [ 35 , 110 , 70 ] ;
18313: LD_ADDR_VAR 0 9
18317: PUSH
18318: LD_INT 35
18320: PUSH
18321: LD_INT 110
18323: PUSH
18324: LD_INT 70
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: LIST
18331: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
18332: LD_VAR 0 6
18336: PPUSH
18337: CALL_OW 265
18341: PUSH
18342: LD_INT 25
18344: EQUAL
18345: IFFALSE 18366
// points := [ 80 , 65 , 100 ] ;
18347: LD_ADDR_VAR 0 9
18351: PUSH
18352: LD_INT 80
18354: PUSH
18355: LD_INT 65
18357: PUSH
18358: LD_INT 100
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: LIST
18365: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
18366: LD_VAR 0 6
18370: PPUSH
18371: CALL_OW 263
18375: PUSH
18376: LD_INT 1
18378: EQUAL
18379: IFFALSE 18414
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
18381: LD_ADDR_VAR 0 10
18385: PUSH
18386: LD_VAR 0 10
18390: PUSH
18391: LD_VAR 0 6
18395: PPUSH
18396: CALL_OW 311
18400: PPUSH
18401: LD_INT 3
18403: PPUSH
18404: CALL_OW 259
18408: PUSH
18409: LD_INT 4
18411: MUL
18412: MUL
18413: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
18414: LD_VAR 0 6
18418: PPUSH
18419: CALL_OW 263
18423: PUSH
18424: LD_INT 2
18426: EQUAL
18427: IFFALSE 18478
// begin j := IsControledBy ( i ) ;
18429: LD_ADDR_VAR 0 7
18433: PUSH
18434: LD_VAR 0 6
18438: PPUSH
18439: CALL_OW 312
18443: ST_TO_ADDR
// if j then
18444: LD_VAR 0 7
18448: IFFALSE 18478
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
18450: LD_ADDR_VAR 0 10
18454: PUSH
18455: LD_VAR 0 10
18459: PUSH
18460: LD_VAR 0 7
18464: PPUSH
18465: LD_INT 3
18467: PPUSH
18468: CALL_OW 259
18472: PUSH
18473: LD_INT 3
18475: MUL
18476: MUL
18477: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
18478: LD_VAR 0 6
18482: PPUSH
18483: CALL_OW 264
18487: PUSH
18488: LD_INT 5
18490: PUSH
18491: LD_INT 6
18493: PUSH
18494: LD_INT 46
18496: PUSH
18497: LD_INT 44
18499: PUSH
18500: LD_INT 47
18502: PUSH
18503: LD_INT 45
18505: PUSH
18506: LD_INT 28
18508: PUSH
18509: LD_INT 7
18511: PUSH
18512: LD_INT 27
18514: PUSH
18515: LD_INT 29
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: IN
18530: PUSH
18531: LD_VAR 0 1
18535: PPUSH
18536: LD_INT 52
18538: PPUSH
18539: CALL_OW 321
18543: PUSH
18544: LD_INT 2
18546: EQUAL
18547: AND
18548: IFFALSE 18565
// bpoints := bpoints * 1.2 ;
18550: LD_ADDR_VAR 0 10
18554: PUSH
18555: LD_VAR 0 10
18559: PUSH
18560: LD_REAL  1.20000000000000E+0000
18563: MUL
18564: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
18565: LD_VAR 0 6
18569: PPUSH
18570: CALL_OW 264
18574: PUSH
18575: LD_INT 6
18577: PUSH
18578: LD_INT 46
18580: PUSH
18581: LD_INT 47
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: LIST
18588: IN
18589: IFFALSE 18606
// bpoints := bpoints * 1.2 ;
18591: LD_ADDR_VAR 0 10
18595: PUSH
18596: LD_VAR 0 10
18600: PUSH
18601: LD_REAL  1.20000000000000E+0000
18604: MUL
18605: ST_TO_ADDR
// end ; unit_building :
18606: GO 18620
18608: LD_INT 3
18610: DOUBLE
18611: EQUAL
18612: IFTRUE 18616
18614: GO 18619
18616: POP
// ; end ;
18617: GO 18620
18619: POP
// for j = 1 to 3 do
18620: LD_ADDR_VAR 0 7
18624: PUSH
18625: DOUBLE
18626: LD_INT 1
18628: DEC
18629: ST_TO_ADDR
18630: LD_INT 3
18632: PUSH
18633: FOR_TO
18634: IFFALSE 18687
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
18636: LD_ADDR_VAR 0 5
18640: PUSH
18641: LD_VAR 0 5
18645: PPUSH
18646: LD_VAR 0 7
18650: PPUSH
18651: LD_VAR 0 5
18655: PUSH
18656: LD_VAR 0 7
18660: ARRAY
18661: PUSH
18662: LD_VAR 0 9
18666: PUSH
18667: LD_VAR 0 7
18671: ARRAY
18672: PUSH
18673: LD_VAR 0 10
18677: MUL
18678: PLUS
18679: PPUSH
18680: CALL_OW 1
18684: ST_TO_ADDR
18685: GO 18633
18687: POP
18688: POP
// end ;
18689: GO 17172
18691: POP
18692: POP
// result := Replace ( result , 4 , tmp ) ;
18693: LD_ADDR_VAR 0 5
18697: PUSH
18698: LD_VAR 0 5
18702: PPUSH
18703: LD_INT 4
18705: PPUSH
18706: LD_VAR 0 8
18710: PPUSH
18711: CALL_OW 1
18715: ST_TO_ADDR
// end ;
18716: LD_VAR 0 5
18720: RET
// export function DangerAtRange ( unit , range ) ; begin
18721: LD_INT 0
18723: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18724: LD_ADDR_VAR 0 3
18728: PUSH
18729: LD_VAR 0 1
18733: PPUSH
18734: CALL_OW 255
18738: PPUSH
18739: LD_VAR 0 1
18743: PPUSH
18744: CALL_OW 250
18748: PPUSH
18749: LD_VAR 0 1
18753: PPUSH
18754: CALL_OW 251
18758: PPUSH
18759: LD_VAR 0 2
18763: PPUSH
18764: CALL 17024 0 4
18768: ST_TO_ADDR
// end ;
18769: LD_VAR 0 3
18773: RET
// export function DangerInArea ( side , area ) ; begin
18774: LD_INT 0
18776: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18777: LD_ADDR_VAR 0 3
18781: PUSH
18782: LD_VAR 0 2
18786: PPUSH
18787: LD_INT 81
18789: PUSH
18790: LD_VAR 0 1
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PPUSH
18799: CALL_OW 70
18803: ST_TO_ADDR
// end ;
18804: LD_VAR 0 3
18808: RET
// export function IsExtension ( b ) ; begin
18809: LD_INT 0
18811: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18812: LD_ADDR_VAR 0 2
18816: PUSH
18817: LD_VAR 0 1
18821: PUSH
18822: LD_INT 23
18824: PUSH
18825: LD_INT 20
18827: PUSH
18828: LD_INT 22
18830: PUSH
18831: LD_INT 17
18833: PUSH
18834: LD_INT 24
18836: PUSH
18837: LD_INT 21
18839: PUSH
18840: LD_INT 19
18842: PUSH
18843: LD_INT 16
18845: PUSH
18846: LD_INT 25
18848: PUSH
18849: LD_INT 18
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: IN
18864: ST_TO_ADDR
// end ;
18865: LD_VAR 0 2
18869: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
18870: LD_INT 0
18872: PPUSH
18873: PPUSH
18874: PPUSH
// result := [ ] ;
18875: LD_ADDR_VAR 0 3
18879: PUSH
18880: EMPTY
18881: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18882: LD_ADDR_VAR 0 4
18886: PUSH
18887: LD_VAR 0 2
18891: PPUSH
18892: LD_INT 21
18894: PUSH
18895: LD_INT 3
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PPUSH
18902: CALL_OW 70
18906: ST_TO_ADDR
// if not tmp then
18907: LD_VAR 0 4
18911: NOT
18912: IFFALSE 18916
// exit ;
18914: GO 18974
// for i in tmp do
18916: LD_ADDR_VAR 0 5
18920: PUSH
18921: LD_VAR 0 4
18925: PUSH
18926: FOR_IN
18927: IFFALSE 18962
// if GetBase ( i ) <> base then
18929: LD_VAR 0 5
18933: PPUSH
18934: CALL_OW 274
18938: PUSH
18939: LD_VAR 0 1
18943: NONEQUAL
18944: IFFALSE 18960
// ComLinkToBase ( base , i ) ;
18946: LD_VAR 0 1
18950: PPUSH
18951: LD_VAR 0 5
18955: PPUSH
18956: CALL_OW 169
18960: GO 18926
18962: POP
18963: POP
// result := tmp ;
18964: LD_ADDR_VAR 0 3
18968: PUSH
18969: LD_VAR 0 4
18973: ST_TO_ADDR
// end ;
18974: LD_VAR 0 3
18978: RET
// export function ComComplete ( unit , b ) ; var i ; begin
18979: LD_INT 0
18981: PPUSH
18982: PPUSH
// if BuildingStatus ( b ) = bs_build then
18983: LD_VAR 0 2
18987: PPUSH
18988: CALL_OW 461
18992: PUSH
18993: LD_INT 1
18995: EQUAL
18996: IFFALSE 19056
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18998: LD_VAR 0 1
19002: PPUSH
19003: LD_STRING h
19005: PUSH
19006: LD_VAR 0 2
19010: PPUSH
19011: CALL_OW 250
19015: PUSH
19016: LD_VAR 0 2
19020: PPUSH
19021: CALL_OW 251
19025: PUSH
19026: LD_VAR 0 2
19030: PUSH
19031: LD_INT 0
19033: PUSH
19034: LD_INT 0
19036: PUSH
19037: LD_INT 0
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: PUSH
19049: EMPTY
19050: LIST
19051: PPUSH
19052: CALL_OW 446
// end ;
19056: LD_VAR 0 3
19060: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
19061: LD_INT 0
19063: PPUSH
19064: PPUSH
19065: PPUSH
19066: PPUSH
19067: PPUSH
19068: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
19069: LD_VAR 0 1
19073: NOT
19074: PUSH
19075: LD_VAR 0 1
19079: PPUSH
19080: CALL_OW 263
19084: PUSH
19085: LD_INT 2
19087: EQUAL
19088: NOT
19089: OR
19090: IFFALSE 19094
// exit ;
19092: GO 19410
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
19094: LD_ADDR_VAR 0 6
19098: PUSH
19099: LD_INT 22
19101: PUSH
19102: LD_VAR 0 1
19106: PPUSH
19107: CALL_OW 255
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: LD_INT 2
19118: PUSH
19119: LD_INT 30
19121: PUSH
19122: LD_INT 36
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: LD_INT 34
19131: PUSH
19132: LD_INT 31
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: LIST
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PPUSH
19148: CALL_OW 69
19152: ST_TO_ADDR
// if not tmp then
19153: LD_VAR 0 6
19157: NOT
19158: IFFALSE 19162
// exit ;
19160: GO 19410
// result := [ ] ;
19162: LD_ADDR_VAR 0 2
19166: PUSH
19167: EMPTY
19168: ST_TO_ADDR
// for i in tmp do
19169: LD_ADDR_VAR 0 3
19173: PUSH
19174: LD_VAR 0 6
19178: PUSH
19179: FOR_IN
19180: IFFALSE 19251
// begin t := UnitsInside ( i ) ;
19182: LD_ADDR_VAR 0 4
19186: PUSH
19187: LD_VAR 0 3
19191: PPUSH
19192: CALL_OW 313
19196: ST_TO_ADDR
// if t then
19197: LD_VAR 0 4
19201: IFFALSE 19249
// for j in t do
19203: LD_ADDR_VAR 0 7
19207: PUSH
19208: LD_VAR 0 4
19212: PUSH
19213: FOR_IN
19214: IFFALSE 19247
// result := Insert ( result , result + 1 , j ) ;
19216: LD_ADDR_VAR 0 2
19220: PUSH
19221: LD_VAR 0 2
19225: PPUSH
19226: LD_VAR 0 2
19230: PUSH
19231: LD_INT 1
19233: PLUS
19234: PPUSH
19235: LD_VAR 0 7
19239: PPUSH
19240: CALL_OW 2
19244: ST_TO_ADDR
19245: GO 19213
19247: POP
19248: POP
// end ;
19249: GO 19179
19251: POP
19252: POP
// if not result then
19253: LD_VAR 0 2
19257: NOT
19258: IFFALSE 19262
// exit ;
19260: GO 19410
// mech := result [ 1 ] ;
19262: LD_ADDR_VAR 0 5
19266: PUSH
19267: LD_VAR 0 2
19271: PUSH
19272: LD_INT 1
19274: ARRAY
19275: ST_TO_ADDR
// if result > 1 then
19276: LD_VAR 0 2
19280: PUSH
19281: LD_INT 1
19283: GREATER
19284: IFFALSE 19396
// for i = 2 to result do
19286: LD_ADDR_VAR 0 3
19290: PUSH
19291: DOUBLE
19292: LD_INT 2
19294: DEC
19295: ST_TO_ADDR
19296: LD_VAR 0 2
19300: PUSH
19301: FOR_TO
19302: IFFALSE 19394
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
19304: LD_ADDR_VAR 0 4
19308: PUSH
19309: LD_VAR 0 2
19313: PUSH
19314: LD_VAR 0 3
19318: ARRAY
19319: PPUSH
19320: LD_INT 3
19322: PPUSH
19323: CALL_OW 259
19327: PUSH
19328: LD_VAR 0 2
19332: PUSH
19333: LD_VAR 0 3
19337: ARRAY
19338: PPUSH
19339: CALL_OW 432
19343: MINUS
19344: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
19345: LD_VAR 0 4
19349: PUSH
19350: LD_VAR 0 5
19354: PPUSH
19355: LD_INT 3
19357: PPUSH
19358: CALL_OW 259
19362: PUSH
19363: LD_VAR 0 5
19367: PPUSH
19368: CALL_OW 432
19372: MINUS
19373: GREATEREQUAL
19374: IFFALSE 19392
// mech := result [ i ] ;
19376: LD_ADDR_VAR 0 5
19380: PUSH
19381: LD_VAR 0 2
19385: PUSH
19386: LD_VAR 0 3
19390: ARRAY
19391: ST_TO_ADDR
// end ;
19392: GO 19301
19394: POP
19395: POP
// ComLinkTo ( vehicle , mech ) ;
19396: LD_VAR 0 1
19400: PPUSH
19401: LD_VAR 0 5
19405: PPUSH
19406: CALL_OW 135
// end ;
19410: LD_VAR 0 2
19414: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
19415: LD_INT 0
19417: PPUSH
19418: PPUSH
19419: PPUSH
19420: PPUSH
19421: PPUSH
19422: PPUSH
19423: PPUSH
19424: PPUSH
19425: PPUSH
19426: PPUSH
19427: PPUSH
19428: PPUSH
19429: PPUSH
// result := [ ] ;
19430: LD_ADDR_VAR 0 7
19434: PUSH
19435: EMPTY
19436: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
19437: LD_VAR 0 1
19441: PPUSH
19442: CALL_OW 266
19446: PUSH
19447: LD_INT 0
19449: PUSH
19450: LD_INT 1
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: IN
19457: NOT
19458: IFFALSE 19462
// exit ;
19460: GO 21093
// if name then
19462: LD_VAR 0 3
19466: IFFALSE 19482
// SetBName ( base_dep , name ) ;
19468: LD_VAR 0 1
19472: PPUSH
19473: LD_VAR 0 3
19477: PPUSH
19478: CALL_OW 500
// base := GetBase ( base_dep ) ;
19482: LD_ADDR_VAR 0 15
19486: PUSH
19487: LD_VAR 0 1
19491: PPUSH
19492: CALL_OW 274
19496: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
19497: LD_ADDR_VAR 0 16
19501: PUSH
19502: LD_VAR 0 1
19506: PPUSH
19507: CALL_OW 255
19511: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
19512: LD_ADDR_VAR 0 17
19516: PUSH
19517: LD_VAR 0 1
19521: PPUSH
19522: CALL_OW 248
19526: ST_TO_ADDR
// if sources then
19527: LD_VAR 0 5
19531: IFFALSE 19578
// for i = 1 to 3 do
19533: LD_ADDR_VAR 0 8
19537: PUSH
19538: DOUBLE
19539: LD_INT 1
19541: DEC
19542: ST_TO_ADDR
19543: LD_INT 3
19545: PUSH
19546: FOR_TO
19547: IFFALSE 19576
// AddResourceType ( base , i , sources [ i ] ) ;
19549: LD_VAR 0 15
19553: PPUSH
19554: LD_VAR 0 8
19558: PPUSH
19559: LD_VAR 0 5
19563: PUSH
19564: LD_VAR 0 8
19568: ARRAY
19569: PPUSH
19570: CALL_OW 276
19574: GO 19546
19576: POP
19577: POP
// buildings := GetBaseBuildings ( base , area ) ;
19578: LD_ADDR_VAR 0 18
19582: PUSH
19583: LD_VAR 0 15
19587: PPUSH
19588: LD_VAR 0 2
19592: PPUSH
19593: CALL 18870 0 2
19597: ST_TO_ADDR
// InitHc ;
19598: CALL_OW 19
// InitUc ;
19602: CALL_OW 18
// uc_side := side ;
19606: LD_ADDR_OWVAR 20
19610: PUSH
19611: LD_VAR 0 16
19615: ST_TO_ADDR
// uc_nation := nation ;
19616: LD_ADDR_OWVAR 21
19620: PUSH
19621: LD_VAR 0 17
19625: ST_TO_ADDR
// if buildings then
19626: LD_VAR 0 18
19630: IFFALSE 20952
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19632: LD_ADDR_VAR 0 19
19636: PUSH
19637: LD_VAR 0 18
19641: PPUSH
19642: LD_INT 2
19644: PUSH
19645: LD_INT 30
19647: PUSH
19648: LD_INT 29
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PUSH
19655: LD_INT 30
19657: PUSH
19658: LD_INT 30
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: LIST
19669: PPUSH
19670: CALL_OW 72
19674: ST_TO_ADDR
// if tmp then
19675: LD_VAR 0 19
19679: IFFALSE 19727
// for i in tmp do
19681: LD_ADDR_VAR 0 8
19685: PUSH
19686: LD_VAR 0 19
19690: PUSH
19691: FOR_IN
19692: IFFALSE 19725
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19694: LD_VAR 0 8
19698: PPUSH
19699: CALL_OW 250
19703: PPUSH
19704: LD_VAR 0 8
19708: PPUSH
19709: CALL_OW 251
19713: PPUSH
19714: LD_VAR 0 16
19718: PPUSH
19719: CALL_OW 441
19723: GO 19691
19725: POP
19726: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19727: LD_VAR 0 18
19731: PPUSH
19732: LD_INT 2
19734: PUSH
19735: LD_INT 30
19737: PUSH
19738: LD_INT 32
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: LD_INT 30
19747: PUSH
19748: LD_INT 33
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: LIST
19759: PPUSH
19760: CALL_OW 72
19764: IFFALSE 19852
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19766: LD_ADDR_VAR 0 8
19770: PUSH
19771: LD_VAR 0 18
19775: PPUSH
19776: LD_INT 2
19778: PUSH
19779: LD_INT 30
19781: PUSH
19782: LD_INT 32
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 30
19791: PUSH
19792: LD_INT 33
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: LIST
19803: PPUSH
19804: CALL_OW 72
19808: PUSH
19809: FOR_IN
19810: IFFALSE 19850
// begin if not GetBWeapon ( i ) then
19812: LD_VAR 0 8
19816: PPUSH
19817: CALL_OW 269
19821: NOT
19822: IFFALSE 19848
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19824: LD_VAR 0 8
19828: PPUSH
19829: LD_VAR 0 8
19833: PPUSH
19834: LD_VAR 0 2
19838: PPUSH
19839: CALL 21098 0 2
19843: PPUSH
19844: CALL_OW 431
// end ;
19848: GO 19809
19850: POP
19851: POP
// end ; for i = 1 to personel do
19852: LD_ADDR_VAR 0 8
19856: PUSH
19857: DOUBLE
19858: LD_INT 1
19860: DEC
19861: ST_TO_ADDR
19862: LD_VAR 0 6
19866: PUSH
19867: FOR_TO
19868: IFFALSE 20932
// begin if i > 4 then
19870: LD_VAR 0 8
19874: PUSH
19875: LD_INT 4
19877: GREATER
19878: IFFALSE 19882
// break ;
19880: GO 20932
// case i of 1 :
19882: LD_VAR 0 8
19886: PUSH
19887: LD_INT 1
19889: DOUBLE
19890: EQUAL
19891: IFTRUE 19895
19893: GO 19975
19895: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19896: LD_ADDR_VAR 0 12
19900: PUSH
19901: LD_VAR 0 18
19905: PPUSH
19906: LD_INT 22
19908: PUSH
19909: LD_VAR 0 16
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 58
19920: PUSH
19921: EMPTY
19922: LIST
19923: PUSH
19924: LD_INT 2
19926: PUSH
19927: LD_INT 30
19929: PUSH
19930: LD_INT 32
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: LD_INT 30
19939: PUSH
19940: LD_INT 4
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PUSH
19947: LD_INT 30
19949: PUSH
19950: LD_INT 5
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: LIST
19967: PPUSH
19968: CALL_OW 72
19972: ST_TO_ADDR
19973: GO 20197
19975: LD_INT 2
19977: DOUBLE
19978: EQUAL
19979: IFTRUE 19983
19981: GO 20045
19983: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19984: LD_ADDR_VAR 0 12
19988: PUSH
19989: LD_VAR 0 18
19993: PPUSH
19994: LD_INT 22
19996: PUSH
19997: LD_VAR 0 16
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PUSH
20006: LD_INT 2
20008: PUSH
20009: LD_INT 30
20011: PUSH
20012: LD_INT 0
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 30
20021: PUSH
20022: LD_INT 1
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: LIST
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PPUSH
20038: CALL_OW 72
20042: ST_TO_ADDR
20043: GO 20197
20045: LD_INT 3
20047: DOUBLE
20048: EQUAL
20049: IFTRUE 20053
20051: GO 20115
20053: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
20054: LD_ADDR_VAR 0 12
20058: PUSH
20059: LD_VAR 0 18
20063: PPUSH
20064: LD_INT 22
20066: PUSH
20067: LD_VAR 0 16
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 2
20078: PUSH
20079: LD_INT 30
20081: PUSH
20082: LD_INT 2
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 30
20091: PUSH
20092: LD_INT 3
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: LIST
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PPUSH
20108: CALL_OW 72
20112: ST_TO_ADDR
20113: GO 20197
20115: LD_INT 4
20117: DOUBLE
20118: EQUAL
20119: IFTRUE 20123
20121: GO 20196
20123: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
20124: LD_ADDR_VAR 0 12
20128: PUSH
20129: LD_VAR 0 18
20133: PPUSH
20134: LD_INT 22
20136: PUSH
20137: LD_VAR 0 16
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 2
20148: PUSH
20149: LD_INT 30
20151: PUSH
20152: LD_INT 6
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PUSH
20159: LD_INT 30
20161: PUSH
20162: LD_INT 7
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 30
20171: PUSH
20172: LD_INT 8
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PPUSH
20189: CALL_OW 72
20193: ST_TO_ADDR
20194: GO 20197
20196: POP
// if i = 1 then
20197: LD_VAR 0 8
20201: PUSH
20202: LD_INT 1
20204: EQUAL
20205: IFFALSE 20316
// begin tmp := [ ] ;
20207: LD_ADDR_VAR 0 19
20211: PUSH
20212: EMPTY
20213: ST_TO_ADDR
// for j in f do
20214: LD_ADDR_VAR 0 9
20218: PUSH
20219: LD_VAR 0 12
20223: PUSH
20224: FOR_IN
20225: IFFALSE 20298
// if GetBType ( j ) = b_bunker then
20227: LD_VAR 0 9
20231: PPUSH
20232: CALL_OW 266
20236: PUSH
20237: LD_INT 32
20239: EQUAL
20240: IFFALSE 20267
// tmp := Insert ( tmp , 1 , j ) else
20242: LD_ADDR_VAR 0 19
20246: PUSH
20247: LD_VAR 0 19
20251: PPUSH
20252: LD_INT 1
20254: PPUSH
20255: LD_VAR 0 9
20259: PPUSH
20260: CALL_OW 2
20264: ST_TO_ADDR
20265: GO 20296
// tmp := Insert ( tmp , tmp + 1 , j ) ;
20267: LD_ADDR_VAR 0 19
20271: PUSH
20272: LD_VAR 0 19
20276: PPUSH
20277: LD_VAR 0 19
20281: PUSH
20282: LD_INT 1
20284: PLUS
20285: PPUSH
20286: LD_VAR 0 9
20290: PPUSH
20291: CALL_OW 2
20295: ST_TO_ADDR
20296: GO 20224
20298: POP
20299: POP
// if tmp then
20300: LD_VAR 0 19
20304: IFFALSE 20316
// f := tmp ;
20306: LD_ADDR_VAR 0 12
20310: PUSH
20311: LD_VAR 0 19
20315: ST_TO_ADDR
// end ; x := personel [ i ] ;
20316: LD_ADDR_VAR 0 13
20320: PUSH
20321: LD_VAR 0 6
20325: PUSH
20326: LD_VAR 0 8
20330: ARRAY
20331: ST_TO_ADDR
// if x = - 1 then
20332: LD_VAR 0 13
20336: PUSH
20337: LD_INT 1
20339: NEG
20340: EQUAL
20341: IFFALSE 20550
// begin for j in f do
20343: LD_ADDR_VAR 0 9
20347: PUSH
20348: LD_VAR 0 12
20352: PUSH
20353: FOR_IN
20354: IFFALSE 20546
// repeat InitHc ;
20356: CALL_OW 19
// if GetBType ( j ) = b_barracks then
20360: LD_VAR 0 9
20364: PPUSH
20365: CALL_OW 266
20369: PUSH
20370: LD_INT 5
20372: EQUAL
20373: IFFALSE 20443
// begin if UnitsInside ( j ) < 3 then
20375: LD_VAR 0 9
20379: PPUSH
20380: CALL_OW 313
20384: PUSH
20385: LD_INT 3
20387: LESS
20388: IFFALSE 20424
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20390: LD_INT 0
20392: PPUSH
20393: LD_INT 5
20395: PUSH
20396: LD_INT 8
20398: PUSH
20399: LD_INT 9
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: LIST
20406: PUSH
20407: LD_VAR 0 17
20411: ARRAY
20412: PPUSH
20413: LD_VAR 0 4
20417: PPUSH
20418: CALL_OW 380
20422: GO 20441
// PrepareHuman ( false , i , skill ) ;
20424: LD_INT 0
20426: PPUSH
20427: LD_VAR 0 8
20431: PPUSH
20432: LD_VAR 0 4
20436: PPUSH
20437: CALL_OW 380
// end else
20441: GO 20460
// PrepareHuman ( false , i , skill ) ;
20443: LD_INT 0
20445: PPUSH
20446: LD_VAR 0 8
20450: PPUSH
20451: LD_VAR 0 4
20455: PPUSH
20456: CALL_OW 380
// un := CreateHuman ;
20460: LD_ADDR_VAR 0 14
20464: PUSH
20465: CALL_OW 44
20469: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20470: LD_ADDR_VAR 0 7
20474: PUSH
20475: LD_VAR 0 7
20479: PPUSH
20480: LD_INT 1
20482: PPUSH
20483: LD_VAR 0 14
20487: PPUSH
20488: CALL_OW 2
20492: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
20493: LD_VAR 0 14
20497: PPUSH
20498: LD_VAR 0 9
20502: PPUSH
20503: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
20507: LD_VAR 0 9
20511: PPUSH
20512: CALL_OW 313
20516: PUSH
20517: LD_INT 6
20519: EQUAL
20520: PUSH
20521: LD_VAR 0 9
20525: PPUSH
20526: CALL_OW 266
20530: PUSH
20531: LD_INT 32
20533: PUSH
20534: LD_INT 31
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: IN
20541: OR
20542: IFFALSE 20356
20544: GO 20353
20546: POP
20547: POP
// end else
20548: GO 20930
// for j = 1 to x do
20550: LD_ADDR_VAR 0 9
20554: PUSH
20555: DOUBLE
20556: LD_INT 1
20558: DEC
20559: ST_TO_ADDR
20560: LD_VAR 0 13
20564: PUSH
20565: FOR_TO
20566: IFFALSE 20928
// begin InitHc ;
20568: CALL_OW 19
// if not f then
20572: LD_VAR 0 12
20576: NOT
20577: IFFALSE 20666
// begin PrepareHuman ( false , i , skill ) ;
20579: LD_INT 0
20581: PPUSH
20582: LD_VAR 0 8
20586: PPUSH
20587: LD_VAR 0 4
20591: PPUSH
20592: CALL_OW 380
// un := CreateHuman ;
20596: LD_ADDR_VAR 0 14
20600: PUSH
20601: CALL_OW 44
20605: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20606: LD_ADDR_VAR 0 7
20610: PUSH
20611: LD_VAR 0 7
20615: PPUSH
20616: LD_INT 1
20618: PPUSH
20619: LD_VAR 0 14
20623: PPUSH
20624: CALL_OW 2
20628: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20629: LD_VAR 0 14
20633: PPUSH
20634: LD_VAR 0 1
20638: PPUSH
20639: CALL_OW 250
20643: PPUSH
20644: LD_VAR 0 1
20648: PPUSH
20649: CALL_OW 251
20653: PPUSH
20654: LD_INT 10
20656: PPUSH
20657: LD_INT 0
20659: PPUSH
20660: CALL_OW 50
// continue ;
20664: GO 20565
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20666: LD_VAR 0 12
20670: PUSH
20671: LD_INT 1
20673: ARRAY
20674: PPUSH
20675: CALL_OW 313
20679: PUSH
20680: LD_VAR 0 12
20684: PUSH
20685: LD_INT 1
20687: ARRAY
20688: PPUSH
20689: CALL_OW 266
20693: PUSH
20694: LD_INT 32
20696: PUSH
20697: LD_INT 31
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: IN
20704: AND
20705: PUSH
20706: LD_VAR 0 12
20710: PUSH
20711: LD_INT 1
20713: ARRAY
20714: PPUSH
20715: CALL_OW 313
20719: PUSH
20720: LD_INT 6
20722: EQUAL
20723: OR
20724: IFFALSE 20744
// f := Delete ( f , 1 ) ;
20726: LD_ADDR_VAR 0 12
20730: PUSH
20731: LD_VAR 0 12
20735: PPUSH
20736: LD_INT 1
20738: PPUSH
20739: CALL_OW 3
20743: ST_TO_ADDR
// if not f then
20744: LD_VAR 0 12
20748: NOT
20749: IFFALSE 20767
// begin x := x + 2 ;
20751: LD_ADDR_VAR 0 13
20755: PUSH
20756: LD_VAR 0 13
20760: PUSH
20761: LD_INT 2
20763: PLUS
20764: ST_TO_ADDR
// continue ;
20765: GO 20565
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20767: LD_VAR 0 12
20771: PUSH
20772: LD_INT 1
20774: ARRAY
20775: PPUSH
20776: CALL_OW 266
20780: PUSH
20781: LD_INT 5
20783: EQUAL
20784: IFFALSE 20858
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20786: LD_VAR 0 12
20790: PUSH
20791: LD_INT 1
20793: ARRAY
20794: PPUSH
20795: CALL_OW 313
20799: PUSH
20800: LD_INT 3
20802: LESS
20803: IFFALSE 20839
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20805: LD_INT 0
20807: PPUSH
20808: LD_INT 5
20810: PUSH
20811: LD_INT 8
20813: PUSH
20814: LD_INT 9
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: LIST
20821: PUSH
20822: LD_VAR 0 17
20826: ARRAY
20827: PPUSH
20828: LD_VAR 0 4
20832: PPUSH
20833: CALL_OW 380
20837: GO 20856
// PrepareHuman ( false , i , skill ) ;
20839: LD_INT 0
20841: PPUSH
20842: LD_VAR 0 8
20846: PPUSH
20847: LD_VAR 0 4
20851: PPUSH
20852: CALL_OW 380
// end else
20856: GO 20875
// PrepareHuman ( false , i , skill ) ;
20858: LD_INT 0
20860: PPUSH
20861: LD_VAR 0 8
20865: PPUSH
20866: LD_VAR 0 4
20870: PPUSH
20871: CALL_OW 380
// un := CreateHuman ;
20875: LD_ADDR_VAR 0 14
20879: PUSH
20880: CALL_OW 44
20884: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20885: LD_ADDR_VAR 0 7
20889: PUSH
20890: LD_VAR 0 7
20894: PPUSH
20895: LD_INT 1
20897: PPUSH
20898: LD_VAR 0 14
20902: PPUSH
20903: CALL_OW 2
20907: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20908: LD_VAR 0 14
20912: PPUSH
20913: LD_VAR 0 12
20917: PUSH
20918: LD_INT 1
20920: ARRAY
20921: PPUSH
20922: CALL_OW 52
// end ;
20926: GO 20565
20928: POP
20929: POP
// end ;
20930: GO 19867
20932: POP
20933: POP
// result := result ^ buildings ;
20934: LD_ADDR_VAR 0 7
20938: PUSH
20939: LD_VAR 0 7
20943: PUSH
20944: LD_VAR 0 18
20948: ADD
20949: ST_TO_ADDR
// end else
20950: GO 21093
// begin for i = 1 to personel do
20952: LD_ADDR_VAR 0 8
20956: PUSH
20957: DOUBLE
20958: LD_INT 1
20960: DEC
20961: ST_TO_ADDR
20962: LD_VAR 0 6
20966: PUSH
20967: FOR_TO
20968: IFFALSE 21091
// begin if i > 4 then
20970: LD_VAR 0 8
20974: PUSH
20975: LD_INT 4
20977: GREATER
20978: IFFALSE 20982
// break ;
20980: GO 21091
// x := personel [ i ] ;
20982: LD_ADDR_VAR 0 13
20986: PUSH
20987: LD_VAR 0 6
20991: PUSH
20992: LD_VAR 0 8
20996: ARRAY
20997: ST_TO_ADDR
// if x = - 1 then
20998: LD_VAR 0 13
21002: PUSH
21003: LD_INT 1
21005: NEG
21006: EQUAL
21007: IFFALSE 21011
// continue ;
21009: GO 20967
// PrepareHuman ( false , i , skill ) ;
21011: LD_INT 0
21013: PPUSH
21014: LD_VAR 0 8
21018: PPUSH
21019: LD_VAR 0 4
21023: PPUSH
21024: CALL_OW 380
// un := CreateHuman ;
21028: LD_ADDR_VAR 0 14
21032: PUSH
21033: CALL_OW 44
21037: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21038: LD_VAR 0 14
21042: PPUSH
21043: LD_VAR 0 1
21047: PPUSH
21048: CALL_OW 250
21052: PPUSH
21053: LD_VAR 0 1
21057: PPUSH
21058: CALL_OW 251
21062: PPUSH
21063: LD_INT 10
21065: PPUSH
21066: LD_INT 0
21068: PPUSH
21069: CALL_OW 50
// result := result ^ un ;
21073: LD_ADDR_VAR 0 7
21077: PUSH
21078: LD_VAR 0 7
21082: PUSH
21083: LD_VAR 0 14
21087: ADD
21088: ST_TO_ADDR
// end ;
21089: GO 20967
21091: POP
21092: POP
// end ; end ;
21093: LD_VAR 0 7
21097: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
21098: LD_INT 0
21100: PPUSH
21101: PPUSH
21102: PPUSH
21103: PPUSH
21104: PPUSH
21105: PPUSH
21106: PPUSH
21107: PPUSH
21108: PPUSH
21109: PPUSH
21110: PPUSH
21111: PPUSH
21112: PPUSH
21113: PPUSH
21114: PPUSH
21115: PPUSH
// result := false ;
21116: LD_ADDR_VAR 0 3
21120: PUSH
21121: LD_INT 0
21123: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
21124: LD_VAR 0 1
21128: NOT
21129: PUSH
21130: LD_VAR 0 1
21134: PPUSH
21135: CALL_OW 266
21139: PUSH
21140: LD_INT 32
21142: PUSH
21143: LD_INT 33
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: IN
21150: NOT
21151: OR
21152: IFFALSE 21156
// exit ;
21154: GO 22292
// nat := GetNation ( tower ) ;
21156: LD_ADDR_VAR 0 12
21160: PUSH
21161: LD_VAR 0 1
21165: PPUSH
21166: CALL_OW 248
21170: ST_TO_ADDR
// side := GetSide ( tower ) ;
21171: LD_ADDR_VAR 0 16
21175: PUSH
21176: LD_VAR 0 1
21180: PPUSH
21181: CALL_OW 255
21185: ST_TO_ADDR
// x := GetX ( tower ) ;
21186: LD_ADDR_VAR 0 10
21190: PUSH
21191: LD_VAR 0 1
21195: PPUSH
21196: CALL_OW 250
21200: ST_TO_ADDR
// y := GetY ( tower ) ;
21201: LD_ADDR_VAR 0 11
21205: PUSH
21206: LD_VAR 0 1
21210: PPUSH
21211: CALL_OW 251
21215: ST_TO_ADDR
// if not x or not y then
21216: LD_VAR 0 10
21220: NOT
21221: PUSH
21222: LD_VAR 0 11
21226: NOT
21227: OR
21228: IFFALSE 21232
// exit ;
21230: GO 22292
// weapon := 0 ;
21232: LD_ADDR_VAR 0 18
21236: PUSH
21237: LD_INT 0
21239: ST_TO_ADDR
// fac_list := [ ] ;
21240: LD_ADDR_VAR 0 17
21244: PUSH
21245: EMPTY
21246: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
21247: LD_ADDR_VAR 0 6
21251: PUSH
21252: LD_VAR 0 1
21256: PPUSH
21257: CALL_OW 274
21261: PPUSH
21262: LD_VAR 0 2
21266: PPUSH
21267: CALL 18870 0 2
21271: PPUSH
21272: LD_INT 30
21274: PUSH
21275: LD_INT 3
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PPUSH
21282: CALL_OW 72
21286: ST_TO_ADDR
// if not factories then
21287: LD_VAR 0 6
21291: NOT
21292: IFFALSE 21296
// exit ;
21294: GO 22292
// for i in factories do
21296: LD_ADDR_VAR 0 8
21300: PUSH
21301: LD_VAR 0 6
21305: PUSH
21306: FOR_IN
21307: IFFALSE 21332
// fac_list := fac_list union AvailableWeaponList ( i ) ;
21309: LD_ADDR_VAR 0 17
21313: PUSH
21314: LD_VAR 0 17
21318: PUSH
21319: LD_VAR 0 8
21323: PPUSH
21324: CALL_OW 478
21328: UNION
21329: ST_TO_ADDR
21330: GO 21306
21332: POP
21333: POP
// if not fac_list then
21334: LD_VAR 0 17
21338: NOT
21339: IFFALSE 21343
// exit ;
21341: GO 22292
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
21343: LD_ADDR_VAR 0 5
21347: PUSH
21348: LD_INT 4
21350: PUSH
21351: LD_INT 5
21353: PUSH
21354: LD_INT 9
21356: PUSH
21357: LD_INT 10
21359: PUSH
21360: LD_INT 6
21362: PUSH
21363: LD_INT 7
21365: PUSH
21366: LD_INT 11
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 27
21380: PUSH
21381: LD_INT 28
21383: PUSH
21384: LD_INT 26
21386: PUSH
21387: LD_INT 30
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: PUSH
21396: LD_INT 43
21398: PUSH
21399: LD_INT 44
21401: PUSH
21402: LD_INT 46
21404: PUSH
21405: LD_INT 45
21407: PUSH
21408: LD_INT 47
21410: PUSH
21411: LD_INT 49
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: LIST
21426: PUSH
21427: LD_VAR 0 12
21431: ARRAY
21432: ST_TO_ADDR
// for i in list do
21433: LD_ADDR_VAR 0 8
21437: PUSH
21438: LD_VAR 0 5
21442: PUSH
21443: FOR_IN
21444: IFFALSE 21477
// if not i in fac_list then
21446: LD_VAR 0 8
21450: PUSH
21451: LD_VAR 0 17
21455: IN
21456: NOT
21457: IFFALSE 21475
// list := list diff i ;
21459: LD_ADDR_VAR 0 5
21463: PUSH
21464: LD_VAR 0 5
21468: PUSH
21469: LD_VAR 0 8
21473: DIFF
21474: ST_TO_ADDR
21475: GO 21443
21477: POP
21478: POP
// if not list then
21479: LD_VAR 0 5
21483: NOT
21484: IFFALSE 21488
// exit ;
21486: GO 22292
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
21488: LD_VAR 0 12
21492: PUSH
21493: LD_INT 3
21495: EQUAL
21496: PUSH
21497: LD_INT 49
21499: PUSH
21500: LD_VAR 0 5
21504: IN
21505: AND
21506: PUSH
21507: LD_INT 31
21509: PPUSH
21510: LD_VAR 0 16
21514: PPUSH
21515: CALL_OW 321
21519: PUSH
21520: LD_INT 2
21522: EQUAL
21523: AND
21524: IFFALSE 21584
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
21526: LD_INT 22
21528: PUSH
21529: LD_VAR 0 16
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 35
21540: PUSH
21541: LD_INT 49
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 91
21550: PUSH
21551: LD_VAR 0 1
21555: PUSH
21556: LD_INT 10
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: LIST
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: LIST
21568: PPUSH
21569: CALL_OW 69
21573: NOT
21574: IFFALSE 21584
// weapon := ru_time_lapser ;
21576: LD_ADDR_VAR 0 18
21580: PUSH
21581: LD_INT 49
21583: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
21584: LD_VAR 0 12
21588: PUSH
21589: LD_INT 1
21591: PUSH
21592: LD_INT 2
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: IN
21599: PUSH
21600: LD_INT 11
21602: PUSH
21603: LD_VAR 0 5
21607: IN
21608: PUSH
21609: LD_INT 30
21611: PUSH
21612: LD_VAR 0 5
21616: IN
21617: OR
21618: AND
21619: PUSH
21620: LD_INT 6
21622: PPUSH
21623: LD_VAR 0 16
21627: PPUSH
21628: CALL_OW 321
21632: PUSH
21633: LD_INT 2
21635: EQUAL
21636: AND
21637: IFFALSE 21802
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21639: LD_INT 22
21641: PUSH
21642: LD_VAR 0 16
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: LD_INT 2
21653: PUSH
21654: LD_INT 35
21656: PUSH
21657: LD_INT 11
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 35
21666: PUSH
21667: LD_INT 30
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: LIST
21678: PUSH
21679: LD_INT 91
21681: PUSH
21682: LD_VAR 0 1
21686: PUSH
21687: LD_INT 18
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: LIST
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: LIST
21699: PPUSH
21700: CALL_OW 69
21704: NOT
21705: PUSH
21706: LD_INT 22
21708: PUSH
21709: LD_VAR 0 16
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 2
21720: PUSH
21721: LD_INT 30
21723: PUSH
21724: LD_INT 32
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: LD_INT 30
21733: PUSH
21734: LD_INT 33
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: LIST
21745: PUSH
21746: LD_INT 91
21748: PUSH
21749: LD_VAR 0 1
21753: PUSH
21754: LD_INT 12
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: LIST
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: LIST
21766: PUSH
21767: EMPTY
21768: LIST
21769: PPUSH
21770: CALL_OW 69
21774: PUSH
21775: LD_INT 2
21777: GREATER
21778: AND
21779: IFFALSE 21802
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21781: LD_ADDR_VAR 0 18
21785: PUSH
21786: LD_INT 11
21788: PUSH
21789: LD_INT 30
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PUSH
21796: LD_VAR 0 12
21800: ARRAY
21801: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21802: LD_VAR 0 18
21806: NOT
21807: PUSH
21808: LD_INT 40
21810: PPUSH
21811: LD_VAR 0 16
21815: PPUSH
21816: CALL_OW 321
21820: PUSH
21821: LD_INT 2
21823: EQUAL
21824: AND
21825: PUSH
21826: LD_INT 7
21828: PUSH
21829: LD_VAR 0 5
21833: IN
21834: PUSH
21835: LD_INT 28
21837: PUSH
21838: LD_VAR 0 5
21842: IN
21843: OR
21844: PUSH
21845: LD_INT 45
21847: PUSH
21848: LD_VAR 0 5
21852: IN
21853: OR
21854: AND
21855: IFFALSE 22109
// begin hex := GetHexInfo ( x , y ) ;
21857: LD_ADDR_VAR 0 4
21861: PUSH
21862: LD_VAR 0 10
21866: PPUSH
21867: LD_VAR 0 11
21871: PPUSH
21872: CALL_OW 546
21876: ST_TO_ADDR
// if hex [ 1 ] then
21877: LD_VAR 0 4
21881: PUSH
21882: LD_INT 1
21884: ARRAY
21885: IFFALSE 21889
// exit ;
21887: GO 22292
// height := hex [ 2 ] ;
21889: LD_ADDR_VAR 0 15
21893: PUSH
21894: LD_VAR 0 4
21898: PUSH
21899: LD_INT 2
21901: ARRAY
21902: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21903: LD_ADDR_VAR 0 14
21907: PUSH
21908: LD_INT 0
21910: PUSH
21911: LD_INT 2
21913: PUSH
21914: LD_INT 3
21916: PUSH
21917: LD_INT 5
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: ST_TO_ADDR
// for i in tmp do
21926: LD_ADDR_VAR 0 8
21930: PUSH
21931: LD_VAR 0 14
21935: PUSH
21936: FOR_IN
21937: IFFALSE 22107
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21939: LD_ADDR_VAR 0 9
21943: PUSH
21944: LD_VAR 0 10
21948: PPUSH
21949: LD_VAR 0 8
21953: PPUSH
21954: LD_INT 5
21956: PPUSH
21957: CALL_OW 272
21961: PUSH
21962: LD_VAR 0 11
21966: PPUSH
21967: LD_VAR 0 8
21971: PPUSH
21972: LD_INT 5
21974: PPUSH
21975: CALL_OW 273
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21984: LD_VAR 0 9
21988: PUSH
21989: LD_INT 1
21991: ARRAY
21992: PPUSH
21993: LD_VAR 0 9
21997: PUSH
21998: LD_INT 2
22000: ARRAY
22001: PPUSH
22002: CALL_OW 488
22006: IFFALSE 22105
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
22008: LD_ADDR_VAR 0 4
22012: PUSH
22013: LD_VAR 0 9
22017: PUSH
22018: LD_INT 1
22020: ARRAY
22021: PPUSH
22022: LD_VAR 0 9
22026: PUSH
22027: LD_INT 2
22029: ARRAY
22030: PPUSH
22031: CALL_OW 546
22035: ST_TO_ADDR
// if hex [ 1 ] then
22036: LD_VAR 0 4
22040: PUSH
22041: LD_INT 1
22043: ARRAY
22044: IFFALSE 22048
// continue ;
22046: GO 21936
// h := hex [ 2 ] ;
22048: LD_ADDR_VAR 0 13
22052: PUSH
22053: LD_VAR 0 4
22057: PUSH
22058: LD_INT 2
22060: ARRAY
22061: ST_TO_ADDR
// if h + 7 < height then
22062: LD_VAR 0 13
22066: PUSH
22067: LD_INT 7
22069: PLUS
22070: PUSH
22071: LD_VAR 0 15
22075: LESS
22076: IFFALSE 22105
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
22078: LD_ADDR_VAR 0 18
22082: PUSH
22083: LD_INT 7
22085: PUSH
22086: LD_INT 28
22088: PUSH
22089: LD_INT 45
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: LIST
22096: PUSH
22097: LD_VAR 0 12
22101: ARRAY
22102: ST_TO_ADDR
// break ;
22103: GO 22107
// end ; end ; end ;
22105: GO 21936
22107: POP
22108: POP
// end ; if not weapon then
22109: LD_VAR 0 18
22113: NOT
22114: IFFALSE 22174
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
22116: LD_ADDR_VAR 0 5
22120: PUSH
22121: LD_VAR 0 5
22125: PUSH
22126: LD_INT 11
22128: PUSH
22129: LD_INT 30
22131: PUSH
22132: LD_INT 49
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: LIST
22139: DIFF
22140: ST_TO_ADDR
// if not list then
22141: LD_VAR 0 5
22145: NOT
22146: IFFALSE 22150
// exit ;
22148: GO 22292
// weapon := list [ rand ( 1 , list ) ] ;
22150: LD_ADDR_VAR 0 18
22154: PUSH
22155: LD_VAR 0 5
22159: PUSH
22160: LD_INT 1
22162: PPUSH
22163: LD_VAR 0 5
22167: PPUSH
22168: CALL_OW 12
22172: ARRAY
22173: ST_TO_ADDR
// end ; if weapon then
22174: LD_VAR 0 18
22178: IFFALSE 22292
// begin tmp := CostOfWeapon ( weapon ) ;
22180: LD_ADDR_VAR 0 14
22184: PUSH
22185: LD_VAR 0 18
22189: PPUSH
22190: CALL_OW 451
22194: ST_TO_ADDR
// j := GetBase ( tower ) ;
22195: LD_ADDR_VAR 0 9
22199: PUSH
22200: LD_VAR 0 1
22204: PPUSH
22205: CALL_OW 274
22209: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
22210: LD_VAR 0 9
22214: PPUSH
22215: LD_INT 1
22217: PPUSH
22218: CALL_OW 275
22222: PUSH
22223: LD_VAR 0 14
22227: PUSH
22228: LD_INT 1
22230: ARRAY
22231: GREATEREQUAL
22232: PUSH
22233: LD_VAR 0 9
22237: PPUSH
22238: LD_INT 2
22240: PPUSH
22241: CALL_OW 275
22245: PUSH
22246: LD_VAR 0 14
22250: PUSH
22251: LD_INT 2
22253: ARRAY
22254: GREATEREQUAL
22255: AND
22256: PUSH
22257: LD_VAR 0 9
22261: PPUSH
22262: LD_INT 3
22264: PPUSH
22265: CALL_OW 275
22269: PUSH
22270: LD_VAR 0 14
22274: PUSH
22275: LD_INT 3
22277: ARRAY
22278: GREATEREQUAL
22279: AND
22280: IFFALSE 22292
// result := weapon ;
22282: LD_ADDR_VAR 0 3
22286: PUSH
22287: LD_VAR 0 18
22291: ST_TO_ADDR
// end ; end ;
22292: LD_VAR 0 3
22296: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
22297: LD_INT 0
22299: PPUSH
22300: PPUSH
// result := true ;
22301: LD_ADDR_VAR 0 3
22305: PUSH
22306: LD_INT 1
22308: ST_TO_ADDR
// if array1 = array2 then
22309: LD_VAR 0 1
22313: PUSH
22314: LD_VAR 0 2
22318: EQUAL
22319: IFFALSE 22379
// begin for i = 1 to array1 do
22321: LD_ADDR_VAR 0 4
22325: PUSH
22326: DOUBLE
22327: LD_INT 1
22329: DEC
22330: ST_TO_ADDR
22331: LD_VAR 0 1
22335: PUSH
22336: FOR_TO
22337: IFFALSE 22375
// if array1 [ i ] <> array2 [ i ] then
22339: LD_VAR 0 1
22343: PUSH
22344: LD_VAR 0 4
22348: ARRAY
22349: PUSH
22350: LD_VAR 0 2
22354: PUSH
22355: LD_VAR 0 4
22359: ARRAY
22360: NONEQUAL
22361: IFFALSE 22373
// begin result := false ;
22363: LD_ADDR_VAR 0 3
22367: PUSH
22368: LD_INT 0
22370: ST_TO_ADDR
// break ;
22371: GO 22375
// end ;
22373: GO 22336
22375: POP
22376: POP
// end else
22377: GO 22387
// result := false ;
22379: LD_ADDR_VAR 0 3
22383: PUSH
22384: LD_INT 0
22386: ST_TO_ADDR
// end ;
22387: LD_VAR 0 3
22391: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
22392: LD_INT 0
22394: PPUSH
22395: PPUSH
22396: PPUSH
// pom := GetBase ( fac ) ;
22397: LD_ADDR_VAR 0 5
22401: PUSH
22402: LD_VAR 0 1
22406: PPUSH
22407: CALL_OW 274
22411: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
22412: LD_ADDR_VAR 0 4
22416: PUSH
22417: LD_VAR 0 2
22421: PUSH
22422: LD_INT 1
22424: ARRAY
22425: PPUSH
22426: LD_VAR 0 2
22430: PUSH
22431: LD_INT 2
22433: ARRAY
22434: PPUSH
22435: LD_VAR 0 2
22439: PUSH
22440: LD_INT 3
22442: ARRAY
22443: PPUSH
22444: LD_VAR 0 2
22448: PUSH
22449: LD_INT 4
22451: ARRAY
22452: PPUSH
22453: CALL_OW 449
22457: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22458: LD_ADDR_VAR 0 3
22462: PUSH
22463: LD_VAR 0 5
22467: PPUSH
22468: LD_INT 1
22470: PPUSH
22471: CALL_OW 275
22475: PUSH
22476: LD_VAR 0 4
22480: PUSH
22481: LD_INT 1
22483: ARRAY
22484: GREATEREQUAL
22485: PUSH
22486: LD_VAR 0 5
22490: PPUSH
22491: LD_INT 2
22493: PPUSH
22494: CALL_OW 275
22498: PUSH
22499: LD_VAR 0 4
22503: PUSH
22504: LD_INT 2
22506: ARRAY
22507: GREATEREQUAL
22508: AND
22509: PUSH
22510: LD_VAR 0 5
22514: PPUSH
22515: LD_INT 3
22517: PPUSH
22518: CALL_OW 275
22522: PUSH
22523: LD_VAR 0 4
22527: PUSH
22528: LD_INT 3
22530: ARRAY
22531: GREATEREQUAL
22532: AND
22533: ST_TO_ADDR
// end ;
22534: LD_VAR 0 3
22538: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22539: LD_INT 0
22541: PPUSH
22542: PPUSH
22543: PPUSH
22544: PPUSH
// pom := GetBase ( building ) ;
22545: LD_ADDR_VAR 0 3
22549: PUSH
22550: LD_VAR 0 1
22554: PPUSH
22555: CALL_OW 274
22559: ST_TO_ADDR
// if not pom then
22560: LD_VAR 0 3
22564: NOT
22565: IFFALSE 22569
// exit ;
22567: GO 22739
// btype := GetBType ( building ) ;
22569: LD_ADDR_VAR 0 5
22573: PUSH
22574: LD_VAR 0 1
22578: PPUSH
22579: CALL_OW 266
22583: ST_TO_ADDR
// if btype = b_armoury then
22584: LD_VAR 0 5
22588: PUSH
22589: LD_INT 4
22591: EQUAL
22592: IFFALSE 22602
// btype := b_barracks ;
22594: LD_ADDR_VAR 0 5
22598: PUSH
22599: LD_INT 5
22601: ST_TO_ADDR
// if btype = b_depot then
22602: LD_VAR 0 5
22606: PUSH
22607: LD_INT 0
22609: EQUAL
22610: IFFALSE 22620
// btype := b_warehouse ;
22612: LD_ADDR_VAR 0 5
22616: PUSH
22617: LD_INT 1
22619: ST_TO_ADDR
// if btype = b_workshop then
22620: LD_VAR 0 5
22624: PUSH
22625: LD_INT 2
22627: EQUAL
22628: IFFALSE 22638
// btype := b_factory ;
22630: LD_ADDR_VAR 0 5
22634: PUSH
22635: LD_INT 3
22637: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22638: LD_ADDR_VAR 0 4
22642: PUSH
22643: LD_VAR 0 5
22647: PPUSH
22648: LD_VAR 0 1
22652: PPUSH
22653: CALL_OW 248
22657: PPUSH
22658: CALL_OW 450
22662: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22663: LD_ADDR_VAR 0 2
22667: PUSH
22668: LD_VAR 0 3
22672: PPUSH
22673: LD_INT 1
22675: PPUSH
22676: CALL_OW 275
22680: PUSH
22681: LD_VAR 0 4
22685: PUSH
22686: LD_INT 1
22688: ARRAY
22689: GREATEREQUAL
22690: PUSH
22691: LD_VAR 0 3
22695: PPUSH
22696: LD_INT 2
22698: PPUSH
22699: CALL_OW 275
22703: PUSH
22704: LD_VAR 0 4
22708: PUSH
22709: LD_INT 2
22711: ARRAY
22712: GREATEREQUAL
22713: AND
22714: PUSH
22715: LD_VAR 0 3
22719: PPUSH
22720: LD_INT 3
22722: PPUSH
22723: CALL_OW 275
22727: PUSH
22728: LD_VAR 0 4
22732: PUSH
22733: LD_INT 3
22735: ARRAY
22736: GREATEREQUAL
22737: AND
22738: ST_TO_ADDR
// end ;
22739: LD_VAR 0 2
22743: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22744: LD_INT 0
22746: PPUSH
22747: PPUSH
22748: PPUSH
// pom := GetBase ( building ) ;
22749: LD_ADDR_VAR 0 4
22753: PUSH
22754: LD_VAR 0 1
22758: PPUSH
22759: CALL_OW 274
22763: ST_TO_ADDR
// if not pom then
22764: LD_VAR 0 4
22768: NOT
22769: IFFALSE 22773
// exit ;
22771: GO 22874
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22773: LD_ADDR_VAR 0 5
22777: PUSH
22778: LD_VAR 0 2
22782: PPUSH
22783: LD_VAR 0 1
22787: PPUSH
22788: CALL_OW 248
22792: PPUSH
22793: CALL_OW 450
22797: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22798: LD_ADDR_VAR 0 3
22802: PUSH
22803: LD_VAR 0 4
22807: PPUSH
22808: LD_INT 1
22810: PPUSH
22811: CALL_OW 275
22815: PUSH
22816: LD_VAR 0 5
22820: PUSH
22821: LD_INT 1
22823: ARRAY
22824: GREATEREQUAL
22825: PUSH
22826: LD_VAR 0 4
22830: PPUSH
22831: LD_INT 2
22833: PPUSH
22834: CALL_OW 275
22838: PUSH
22839: LD_VAR 0 5
22843: PUSH
22844: LD_INT 2
22846: ARRAY
22847: GREATEREQUAL
22848: AND
22849: PUSH
22850: LD_VAR 0 4
22854: PPUSH
22855: LD_INT 3
22857: PPUSH
22858: CALL_OW 275
22862: PUSH
22863: LD_VAR 0 5
22867: PUSH
22868: LD_INT 3
22870: ARRAY
22871: GREATEREQUAL
22872: AND
22873: ST_TO_ADDR
// end ;
22874: LD_VAR 0 3
22878: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
22879: LD_INT 0
22881: PPUSH
22882: PPUSH
22883: PPUSH
22884: PPUSH
22885: PPUSH
22886: PPUSH
22887: PPUSH
22888: PPUSH
22889: PPUSH
22890: PPUSH
// result := false ;
22891: LD_ADDR_VAR 0 6
22895: PUSH
22896: LD_INT 0
22898: ST_TO_ADDR
// if not base or not btype or not x or not y then
22899: LD_VAR 0 1
22903: NOT
22904: PUSH
22905: LD_VAR 0 2
22909: NOT
22910: OR
22911: PUSH
22912: LD_VAR 0 3
22916: NOT
22917: OR
22918: PUSH
22919: LD_VAR 0 4
22923: NOT
22924: OR
22925: IFFALSE 22929
// exit ;
22927: GO 23538
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
22929: LD_ADDR_VAR 0 12
22933: PUSH
22934: LD_VAR 0 2
22938: PPUSH
22939: LD_VAR 0 3
22943: PPUSH
22944: LD_VAR 0 4
22948: PPUSH
22949: LD_VAR 0 5
22953: PPUSH
22954: LD_VAR 0 1
22958: PUSH
22959: LD_INT 1
22961: ARRAY
22962: PPUSH
22963: CALL_OW 248
22967: PPUSH
22968: LD_INT 0
22970: PPUSH
22971: CALL 24375 0 6
22975: ST_TO_ADDR
// if not hexes then
22976: LD_VAR 0 12
22980: NOT
22981: IFFALSE 22985
// exit ;
22983: GO 23538
// for i = 1 to hexes do
22985: LD_ADDR_VAR 0 7
22989: PUSH
22990: DOUBLE
22991: LD_INT 1
22993: DEC
22994: ST_TO_ADDR
22995: LD_VAR 0 12
22999: PUSH
23000: FOR_TO
23001: IFFALSE 23536
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23003: LD_ADDR_VAR 0 11
23007: PUSH
23008: LD_VAR 0 12
23012: PUSH
23013: LD_VAR 0 7
23017: ARRAY
23018: PUSH
23019: LD_INT 1
23021: ARRAY
23022: PPUSH
23023: LD_VAR 0 12
23027: PUSH
23028: LD_VAR 0 7
23032: ARRAY
23033: PUSH
23034: LD_INT 2
23036: ARRAY
23037: PPUSH
23038: CALL_OW 428
23042: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
23043: LD_VAR 0 12
23047: PUSH
23048: LD_VAR 0 7
23052: ARRAY
23053: PUSH
23054: LD_INT 1
23056: ARRAY
23057: PPUSH
23058: LD_VAR 0 12
23062: PUSH
23063: LD_VAR 0 7
23067: ARRAY
23068: PUSH
23069: LD_INT 2
23071: ARRAY
23072: PPUSH
23073: CALL_OW 351
23077: PUSH
23078: LD_VAR 0 12
23082: PUSH
23083: LD_VAR 0 7
23087: ARRAY
23088: PUSH
23089: LD_INT 1
23091: ARRAY
23092: PPUSH
23093: LD_VAR 0 12
23097: PUSH
23098: LD_VAR 0 7
23102: ARRAY
23103: PUSH
23104: LD_INT 2
23106: ARRAY
23107: PPUSH
23108: CALL_OW 488
23112: NOT
23113: OR
23114: PUSH
23115: LD_VAR 0 11
23119: PPUSH
23120: CALL_OW 247
23124: PUSH
23125: LD_INT 3
23127: EQUAL
23128: OR
23129: IFFALSE 23135
// exit ;
23131: POP
23132: POP
23133: GO 23538
// if not tmp or not tmp in base then
23135: LD_VAR 0 11
23139: NOT
23140: PUSH
23141: LD_VAR 0 11
23145: PUSH
23146: LD_VAR 0 1
23150: IN
23151: NOT
23152: OR
23153: IFFALSE 23157
// continue ;
23155: GO 23000
// result := true ;
23157: LD_ADDR_VAR 0 6
23161: PUSH
23162: LD_INT 1
23164: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23165: LD_ADDR_VAR 0 15
23169: PUSH
23170: LD_VAR 0 1
23174: PPUSH
23175: LD_INT 22
23177: PUSH
23178: LD_VAR 0 11
23182: PPUSH
23183: CALL_OW 255
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 2
23194: PUSH
23195: LD_INT 30
23197: PUSH
23198: LD_INT 0
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 30
23207: PUSH
23208: LD_INT 1
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: LIST
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PPUSH
23224: CALL_OW 72
23228: ST_TO_ADDR
// if dep then
23229: LD_VAR 0 15
23233: IFFALSE 23369
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
23235: LD_ADDR_VAR 0 14
23239: PUSH
23240: LD_VAR 0 15
23244: PUSH
23245: LD_INT 1
23247: ARRAY
23248: PPUSH
23249: CALL_OW 250
23253: PPUSH
23254: LD_VAR 0 15
23258: PUSH
23259: LD_INT 1
23261: ARRAY
23262: PPUSH
23263: CALL_OW 254
23267: PPUSH
23268: LD_INT 5
23270: PPUSH
23271: CALL_OW 272
23275: PUSH
23276: LD_VAR 0 15
23280: PUSH
23281: LD_INT 1
23283: ARRAY
23284: PPUSH
23285: CALL_OW 251
23289: PPUSH
23290: LD_VAR 0 15
23294: PUSH
23295: LD_INT 1
23297: ARRAY
23298: PPUSH
23299: CALL_OW 254
23303: PPUSH
23304: LD_INT 5
23306: PPUSH
23307: CALL_OW 273
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23316: LD_VAR 0 14
23320: PUSH
23321: LD_INT 1
23323: ARRAY
23324: PPUSH
23325: LD_VAR 0 14
23329: PUSH
23330: LD_INT 2
23332: ARRAY
23333: PPUSH
23334: CALL_OW 488
23338: IFFALSE 23369
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23340: LD_VAR 0 11
23344: PPUSH
23345: LD_VAR 0 14
23349: PUSH
23350: LD_INT 1
23352: ARRAY
23353: PPUSH
23354: LD_VAR 0 14
23358: PUSH
23359: LD_INT 2
23361: ARRAY
23362: PPUSH
23363: CALL_OW 111
// continue ;
23367: GO 23000
// end ; end ; r := GetDir ( tmp ) ;
23369: LD_ADDR_VAR 0 13
23373: PUSH
23374: LD_VAR 0 11
23378: PPUSH
23379: CALL_OW 254
23383: ST_TO_ADDR
// if r = 5 then
23384: LD_VAR 0 13
23388: PUSH
23389: LD_INT 5
23391: EQUAL
23392: IFFALSE 23402
// r := 0 ;
23394: LD_ADDR_VAR 0 13
23398: PUSH
23399: LD_INT 0
23401: ST_TO_ADDR
// for j = r to 5 do
23402: LD_ADDR_VAR 0 8
23406: PUSH
23407: DOUBLE
23408: LD_VAR 0 13
23412: DEC
23413: ST_TO_ADDR
23414: LD_INT 5
23416: PUSH
23417: FOR_TO
23418: IFFALSE 23532
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23420: LD_ADDR_VAR 0 9
23424: PUSH
23425: LD_VAR 0 11
23429: PPUSH
23430: CALL_OW 250
23434: PPUSH
23435: LD_VAR 0 8
23439: PPUSH
23440: LD_INT 2
23442: PPUSH
23443: CALL_OW 272
23447: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23448: LD_ADDR_VAR 0 10
23452: PUSH
23453: LD_VAR 0 11
23457: PPUSH
23458: CALL_OW 251
23462: PPUSH
23463: LD_VAR 0 8
23467: PPUSH
23468: LD_INT 2
23470: PPUSH
23471: CALL_OW 273
23475: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23476: LD_VAR 0 9
23480: PPUSH
23481: LD_VAR 0 10
23485: PPUSH
23486: CALL_OW 488
23490: PUSH
23491: LD_VAR 0 9
23495: PPUSH
23496: LD_VAR 0 10
23500: PPUSH
23501: CALL_OW 428
23505: NOT
23506: AND
23507: IFFALSE 23530
// begin ComMoveXY ( tmp , _x , _y ) ;
23509: LD_VAR 0 11
23513: PPUSH
23514: LD_VAR 0 9
23518: PPUSH
23519: LD_VAR 0 10
23523: PPUSH
23524: CALL_OW 111
// break ;
23528: GO 23532
// end ; end ;
23530: GO 23417
23532: POP
23533: POP
// end ;
23534: GO 23000
23536: POP
23537: POP
// end ;
23538: LD_VAR 0 6
23542: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
23543: LD_INT 0
23545: PPUSH
23546: PPUSH
23547: PPUSH
23548: PPUSH
23549: PPUSH
23550: PPUSH
23551: PPUSH
23552: PPUSH
23553: PPUSH
23554: PPUSH
// result := false ;
23555: LD_ADDR_VAR 0 6
23559: PUSH
23560: LD_INT 0
23562: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23563: LD_VAR 0 1
23567: NOT
23568: PUSH
23569: LD_VAR 0 1
23573: PPUSH
23574: CALL_OW 266
23578: PUSH
23579: LD_INT 0
23581: PUSH
23582: LD_INT 1
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: IN
23589: NOT
23590: OR
23591: PUSH
23592: LD_VAR 0 2
23596: NOT
23597: OR
23598: PUSH
23599: LD_VAR 0 5
23603: PUSH
23604: LD_INT 0
23606: PUSH
23607: LD_INT 1
23609: PUSH
23610: LD_INT 2
23612: PUSH
23613: LD_INT 3
23615: PUSH
23616: LD_INT 4
23618: PUSH
23619: LD_INT 5
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: IN
23630: NOT
23631: OR
23632: PUSH
23633: LD_VAR 0 3
23637: PPUSH
23638: LD_VAR 0 4
23642: PPUSH
23643: CALL_OW 488
23647: NOT
23648: OR
23649: IFFALSE 23653
// exit ;
23651: GO 24370
// pom := GetBase ( depot ) ;
23653: LD_ADDR_VAR 0 10
23657: PUSH
23658: LD_VAR 0 1
23662: PPUSH
23663: CALL_OW 274
23667: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23668: LD_ADDR_VAR 0 11
23672: PUSH
23673: LD_VAR 0 2
23677: PPUSH
23678: LD_VAR 0 1
23682: PPUSH
23683: CALL_OW 248
23687: PPUSH
23688: CALL_OW 450
23692: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23693: LD_VAR 0 10
23697: PPUSH
23698: LD_INT 1
23700: PPUSH
23701: CALL_OW 275
23705: PUSH
23706: LD_VAR 0 11
23710: PUSH
23711: LD_INT 1
23713: ARRAY
23714: GREATEREQUAL
23715: PUSH
23716: LD_VAR 0 10
23720: PPUSH
23721: LD_INT 2
23723: PPUSH
23724: CALL_OW 275
23728: PUSH
23729: LD_VAR 0 11
23733: PUSH
23734: LD_INT 2
23736: ARRAY
23737: GREATEREQUAL
23738: AND
23739: PUSH
23740: LD_VAR 0 10
23744: PPUSH
23745: LD_INT 3
23747: PPUSH
23748: CALL_OW 275
23752: PUSH
23753: LD_VAR 0 11
23757: PUSH
23758: LD_INT 3
23760: ARRAY
23761: GREATEREQUAL
23762: AND
23763: NOT
23764: IFFALSE 23768
// exit ;
23766: GO 24370
// if GetBType ( depot ) = b_depot then
23768: LD_VAR 0 1
23772: PPUSH
23773: CALL_OW 266
23777: PUSH
23778: LD_INT 0
23780: EQUAL
23781: IFFALSE 23793
// dist := 28 else
23783: LD_ADDR_VAR 0 14
23787: PUSH
23788: LD_INT 28
23790: ST_TO_ADDR
23791: GO 23801
// dist := 36 ;
23793: LD_ADDR_VAR 0 14
23797: PUSH
23798: LD_INT 36
23800: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
23801: LD_VAR 0 1
23805: PPUSH
23806: LD_VAR 0 3
23810: PPUSH
23811: LD_VAR 0 4
23815: PPUSH
23816: CALL_OW 297
23820: PUSH
23821: LD_VAR 0 14
23825: GREATER
23826: IFFALSE 23830
// exit ;
23828: GO 24370
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
23830: LD_ADDR_VAR 0 12
23834: PUSH
23835: LD_VAR 0 2
23839: PPUSH
23840: LD_VAR 0 3
23844: PPUSH
23845: LD_VAR 0 4
23849: PPUSH
23850: LD_VAR 0 5
23854: PPUSH
23855: LD_VAR 0 1
23859: PPUSH
23860: CALL_OW 248
23864: PPUSH
23865: LD_INT 0
23867: PPUSH
23868: CALL 24375 0 6
23872: ST_TO_ADDR
// if not hexes then
23873: LD_VAR 0 12
23877: NOT
23878: IFFALSE 23882
// exit ;
23880: GO 24370
// hex := GetHexInfo ( x , y ) ;
23882: LD_ADDR_VAR 0 15
23886: PUSH
23887: LD_VAR 0 3
23891: PPUSH
23892: LD_VAR 0 4
23896: PPUSH
23897: CALL_OW 546
23901: ST_TO_ADDR
// if hex [ 1 ] then
23902: LD_VAR 0 15
23906: PUSH
23907: LD_INT 1
23909: ARRAY
23910: IFFALSE 23914
// exit ;
23912: GO 24370
// height := hex [ 2 ] ;
23914: LD_ADDR_VAR 0 13
23918: PUSH
23919: LD_VAR 0 15
23923: PUSH
23924: LD_INT 2
23926: ARRAY
23927: ST_TO_ADDR
// for i = 1 to hexes do
23928: LD_ADDR_VAR 0 7
23932: PUSH
23933: DOUBLE
23934: LD_INT 1
23936: DEC
23937: ST_TO_ADDR
23938: LD_VAR 0 12
23942: PUSH
23943: FOR_TO
23944: IFFALSE 24274
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23946: LD_VAR 0 12
23950: PUSH
23951: LD_VAR 0 7
23955: ARRAY
23956: PUSH
23957: LD_INT 1
23959: ARRAY
23960: PPUSH
23961: LD_VAR 0 12
23965: PUSH
23966: LD_VAR 0 7
23970: ARRAY
23971: PUSH
23972: LD_INT 2
23974: ARRAY
23975: PPUSH
23976: CALL_OW 488
23980: NOT
23981: PUSH
23982: LD_VAR 0 12
23986: PUSH
23987: LD_VAR 0 7
23991: ARRAY
23992: PUSH
23993: LD_INT 1
23995: ARRAY
23996: PPUSH
23997: LD_VAR 0 12
24001: PUSH
24002: LD_VAR 0 7
24006: ARRAY
24007: PUSH
24008: LD_INT 2
24010: ARRAY
24011: PPUSH
24012: CALL_OW 428
24016: PUSH
24017: LD_INT 0
24019: GREATER
24020: OR
24021: PUSH
24022: LD_VAR 0 12
24026: PUSH
24027: LD_VAR 0 7
24031: ARRAY
24032: PUSH
24033: LD_INT 1
24035: ARRAY
24036: PPUSH
24037: LD_VAR 0 12
24041: PUSH
24042: LD_VAR 0 7
24046: ARRAY
24047: PUSH
24048: LD_INT 2
24050: ARRAY
24051: PPUSH
24052: CALL_OW 351
24056: OR
24057: IFFALSE 24063
// exit ;
24059: POP
24060: POP
24061: GO 24370
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24063: LD_ADDR_VAR 0 8
24067: PUSH
24068: LD_VAR 0 12
24072: PUSH
24073: LD_VAR 0 7
24077: ARRAY
24078: PUSH
24079: LD_INT 1
24081: ARRAY
24082: PPUSH
24083: LD_VAR 0 12
24087: PUSH
24088: LD_VAR 0 7
24092: ARRAY
24093: PUSH
24094: LD_INT 2
24096: ARRAY
24097: PPUSH
24098: CALL_OW 546
24102: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24103: LD_VAR 0 8
24107: PUSH
24108: LD_INT 1
24110: ARRAY
24111: PUSH
24112: LD_VAR 0 8
24116: PUSH
24117: LD_INT 2
24119: ARRAY
24120: PUSH
24121: LD_VAR 0 13
24125: PUSH
24126: LD_INT 2
24128: PLUS
24129: GREATER
24130: OR
24131: PUSH
24132: LD_VAR 0 8
24136: PUSH
24137: LD_INT 2
24139: ARRAY
24140: PUSH
24141: LD_VAR 0 13
24145: PUSH
24146: LD_INT 2
24148: MINUS
24149: LESS
24150: OR
24151: PUSH
24152: LD_VAR 0 8
24156: PUSH
24157: LD_INT 3
24159: ARRAY
24160: PUSH
24161: LD_INT 0
24163: PUSH
24164: LD_INT 8
24166: PUSH
24167: LD_INT 9
24169: PUSH
24170: LD_INT 10
24172: PUSH
24173: LD_INT 11
24175: PUSH
24176: LD_INT 12
24178: PUSH
24179: LD_INT 13
24181: PUSH
24182: LD_INT 16
24184: PUSH
24185: LD_INT 17
24187: PUSH
24188: LD_INT 18
24190: PUSH
24191: LD_INT 19
24193: PUSH
24194: LD_INT 20
24196: PUSH
24197: LD_INT 21
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: IN
24215: NOT
24216: OR
24217: PUSH
24218: LD_VAR 0 8
24222: PUSH
24223: LD_INT 5
24225: ARRAY
24226: NOT
24227: OR
24228: PUSH
24229: LD_VAR 0 8
24233: PUSH
24234: LD_INT 6
24236: ARRAY
24237: PUSH
24238: LD_INT 1
24240: PUSH
24241: LD_INT 2
24243: PUSH
24244: LD_INT 7
24246: PUSH
24247: LD_INT 9
24249: PUSH
24250: LD_INT 10
24252: PUSH
24253: LD_INT 11
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: LIST
24260: LIST
24261: LIST
24262: LIST
24263: IN
24264: NOT
24265: OR
24266: IFFALSE 24272
// exit ;
24268: POP
24269: POP
24270: GO 24370
// end ;
24272: GO 23943
24274: POP
24275: POP
// side := GetSide ( depot ) ;
24276: LD_ADDR_VAR 0 9
24280: PUSH
24281: LD_VAR 0 1
24285: PPUSH
24286: CALL_OW 255
24290: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24291: LD_VAR 0 9
24295: PPUSH
24296: LD_VAR 0 3
24300: PPUSH
24301: LD_VAR 0 4
24305: PPUSH
24306: LD_INT 20
24308: PPUSH
24309: CALL 17024 0 4
24313: PUSH
24314: LD_INT 4
24316: ARRAY
24317: IFFALSE 24321
// exit ;
24319: GO 24370
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24321: LD_VAR 0 2
24325: PUSH
24326: LD_INT 29
24328: PUSH
24329: LD_INT 30
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: IN
24336: PUSH
24337: LD_VAR 0 3
24341: PPUSH
24342: LD_VAR 0 4
24346: PPUSH
24347: LD_VAR 0 9
24351: PPUSH
24352: CALL_OW 440
24356: NOT
24357: AND
24358: IFFALSE 24362
// exit ;
24360: GO 24370
// result := true ;
24362: LD_ADDR_VAR 0 6
24366: PUSH
24367: LD_INT 1
24369: ST_TO_ADDR
// end ;
24370: LD_VAR 0 6
24374: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
24375: LD_INT 0
24377: PPUSH
24378: PPUSH
24379: PPUSH
24380: PPUSH
24381: PPUSH
24382: PPUSH
24383: PPUSH
24384: PPUSH
24385: PPUSH
24386: PPUSH
24387: PPUSH
24388: PPUSH
24389: PPUSH
24390: PPUSH
24391: PPUSH
24392: PPUSH
24393: PPUSH
24394: PPUSH
24395: PPUSH
24396: PPUSH
24397: PPUSH
24398: PPUSH
24399: PPUSH
24400: PPUSH
24401: PPUSH
24402: PPUSH
24403: PPUSH
24404: PPUSH
24405: PPUSH
24406: PPUSH
24407: PPUSH
24408: PPUSH
24409: PPUSH
24410: PPUSH
24411: PPUSH
24412: PPUSH
24413: PPUSH
24414: PPUSH
24415: PPUSH
24416: PPUSH
24417: PPUSH
24418: PPUSH
24419: PPUSH
24420: PPUSH
24421: PPUSH
24422: PPUSH
24423: PPUSH
24424: PPUSH
24425: PPUSH
24426: PPUSH
24427: PPUSH
24428: PPUSH
24429: PPUSH
24430: PPUSH
24431: PPUSH
24432: PPUSH
24433: PPUSH
24434: PPUSH
// result = [ ] ;
24435: LD_ADDR_VAR 0 7
24439: PUSH
24440: EMPTY
24441: ST_TO_ADDR
// temp_list = [ ] ;
24442: LD_ADDR_VAR 0 9
24446: PUSH
24447: EMPTY
24448: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24449: LD_VAR 0 4
24453: PUSH
24454: LD_INT 0
24456: PUSH
24457: LD_INT 1
24459: PUSH
24460: LD_INT 2
24462: PUSH
24463: LD_INT 3
24465: PUSH
24466: LD_INT 4
24468: PUSH
24469: LD_INT 5
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: IN
24480: NOT
24481: PUSH
24482: LD_VAR 0 1
24486: PUSH
24487: LD_INT 0
24489: PUSH
24490: LD_INT 1
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: IN
24497: PUSH
24498: LD_VAR 0 5
24502: PUSH
24503: LD_INT 1
24505: PUSH
24506: LD_INT 2
24508: PUSH
24509: LD_INT 3
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: LIST
24516: IN
24517: NOT
24518: AND
24519: OR
24520: IFFALSE 24524
// exit ;
24522: GO 42915
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24524: LD_VAR 0 1
24528: PUSH
24529: LD_INT 6
24531: PUSH
24532: LD_INT 7
24534: PUSH
24535: LD_INT 8
24537: PUSH
24538: LD_INT 13
24540: PUSH
24541: LD_INT 12
24543: PUSH
24544: LD_INT 15
24546: PUSH
24547: LD_INT 11
24549: PUSH
24550: LD_INT 14
24552: PUSH
24553: LD_INT 10
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: IN
24567: IFFALSE 24577
// btype = b_lab ;
24569: LD_ADDR_VAR 0 1
24573: PUSH
24574: LD_INT 6
24576: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24577: LD_VAR 0 6
24581: PUSH
24582: LD_INT 0
24584: PUSH
24585: LD_INT 1
24587: PUSH
24588: LD_INT 2
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: LIST
24595: IN
24596: NOT
24597: PUSH
24598: LD_VAR 0 1
24602: PUSH
24603: LD_INT 0
24605: PUSH
24606: LD_INT 1
24608: PUSH
24609: LD_INT 2
24611: PUSH
24612: LD_INT 3
24614: PUSH
24615: LD_INT 6
24617: PUSH
24618: LD_INT 36
24620: PUSH
24621: LD_INT 4
24623: PUSH
24624: LD_INT 5
24626: PUSH
24627: LD_INT 31
24629: PUSH
24630: LD_INT 32
24632: PUSH
24633: LD_INT 33
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: IN
24649: NOT
24650: PUSH
24651: LD_VAR 0 6
24655: PUSH
24656: LD_INT 1
24658: EQUAL
24659: AND
24660: OR
24661: PUSH
24662: LD_VAR 0 1
24666: PUSH
24667: LD_INT 2
24669: PUSH
24670: LD_INT 3
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: IN
24677: NOT
24678: PUSH
24679: LD_VAR 0 6
24683: PUSH
24684: LD_INT 2
24686: EQUAL
24687: AND
24688: OR
24689: IFFALSE 24699
// mode = 0 ;
24691: LD_ADDR_VAR 0 6
24695: PUSH
24696: LD_INT 0
24698: ST_TO_ADDR
// case mode of 0 :
24699: LD_VAR 0 6
24703: PUSH
24704: LD_INT 0
24706: DOUBLE
24707: EQUAL
24708: IFTRUE 24712
24710: GO 36165
24712: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24713: LD_ADDR_VAR 0 11
24717: PUSH
24718: LD_INT 0
24720: PUSH
24721: LD_INT 0
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 0
24730: PUSH
24731: LD_INT 1
24733: NEG
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 1
24741: PUSH
24742: LD_INT 0
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: LD_INT 1
24751: PUSH
24752: LD_INT 1
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 0
24761: PUSH
24762: LD_INT 1
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PUSH
24769: LD_INT 1
24771: NEG
24772: PUSH
24773: LD_INT 0
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 1
24782: NEG
24783: PUSH
24784: LD_INT 1
24786: NEG
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PUSH
24792: LD_INT 1
24794: NEG
24795: PUSH
24796: LD_INT 2
24798: NEG
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 0
24806: PUSH
24807: LD_INT 2
24809: NEG
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 1
24817: PUSH
24818: LD_INT 1
24820: NEG
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 1
24828: PUSH
24829: LD_INT 2
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 0
24838: PUSH
24839: LD_INT 2
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 1
24848: NEG
24849: PUSH
24850: LD_INT 1
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 1
24859: PUSH
24860: LD_INT 3
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 0
24869: PUSH
24870: LD_INT 3
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 1
24879: NEG
24880: PUSH
24881: LD_INT 2
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24906: LD_ADDR_VAR 0 12
24910: PUSH
24911: LD_INT 0
24913: PUSH
24914: LD_INT 0
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PUSH
24921: LD_INT 0
24923: PUSH
24924: LD_INT 1
24926: NEG
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 1
24934: PUSH
24935: LD_INT 0
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 1
24944: PUSH
24945: LD_INT 1
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 0
24954: PUSH
24955: LD_INT 1
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 1
24964: NEG
24965: PUSH
24966: LD_INT 0
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 1
24975: NEG
24976: PUSH
24977: LD_INT 1
24979: NEG
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 1
24987: PUSH
24988: LD_INT 1
24990: NEG
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: LD_INT 2
24998: PUSH
24999: LD_INT 0
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 2
25008: PUSH
25009: LD_INT 1
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 1
25018: NEG
25019: PUSH
25020: LD_INT 1
25022: PUSH
25023: EMPTY
25024: LIST
25025: LIST
25026: PUSH
25027: LD_INT 2
25029: NEG
25030: PUSH
25031: LD_INT 0
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: PUSH
25038: LD_INT 2
25040: NEG
25041: PUSH
25042: LD_INT 1
25044: NEG
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 2
25052: NEG
25053: PUSH
25054: LD_INT 1
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 3
25063: NEG
25064: PUSH
25065: LD_INT 0
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: LD_INT 3
25074: NEG
25075: PUSH
25076: LD_INT 1
25078: NEG
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25102: LD_ADDR_VAR 0 13
25106: PUSH
25107: LD_INT 0
25109: PUSH
25110: LD_INT 0
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 0
25119: PUSH
25120: LD_INT 1
25122: NEG
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 1
25130: PUSH
25131: LD_INT 0
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: LD_INT 1
25140: PUSH
25141: LD_INT 1
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 0
25150: PUSH
25151: LD_INT 1
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 1
25160: NEG
25161: PUSH
25162: LD_INT 0
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 1
25171: NEG
25172: PUSH
25173: LD_INT 1
25175: NEG
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 1
25183: NEG
25184: PUSH
25185: LD_INT 2
25187: NEG
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 2
25195: PUSH
25196: LD_INT 1
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PUSH
25203: LD_INT 2
25205: PUSH
25206: LD_INT 2
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 1
25215: PUSH
25216: LD_INT 2
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: LD_INT 2
25225: NEG
25226: PUSH
25227: LD_INT 1
25229: NEG
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 2
25237: NEG
25238: PUSH
25239: LD_INT 2
25241: NEG
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 2
25249: NEG
25250: PUSH
25251: LD_INT 3
25253: NEG
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 3
25261: NEG
25262: PUSH
25263: LD_INT 2
25265: NEG
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 3
25273: NEG
25274: PUSH
25275: LD_INT 3
25277: NEG
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25301: LD_ADDR_VAR 0 14
25305: PUSH
25306: LD_INT 0
25308: PUSH
25309: LD_INT 0
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: PUSH
25316: LD_INT 0
25318: PUSH
25319: LD_INT 1
25321: NEG
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 1
25329: PUSH
25330: LD_INT 0
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 1
25339: PUSH
25340: LD_INT 1
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 0
25349: PUSH
25350: LD_INT 1
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 1
25359: NEG
25360: PUSH
25361: LD_INT 0
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 1
25370: NEG
25371: PUSH
25372: LD_INT 1
25374: NEG
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 1
25382: NEG
25383: PUSH
25384: LD_INT 2
25386: NEG
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 0
25394: PUSH
25395: LD_INT 2
25397: NEG
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 1
25405: PUSH
25406: LD_INT 1
25408: NEG
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 1
25416: PUSH
25417: LD_INT 2
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 0
25426: PUSH
25427: LD_INT 2
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 1
25436: NEG
25437: PUSH
25438: LD_INT 1
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 1
25447: NEG
25448: PUSH
25449: LD_INT 3
25451: NEG
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 0
25459: PUSH
25460: LD_INT 3
25462: NEG
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 1
25470: PUSH
25471: LD_INT 2
25473: NEG
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25497: LD_ADDR_VAR 0 15
25501: PUSH
25502: LD_INT 0
25504: PUSH
25505: LD_INT 0
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 0
25514: PUSH
25515: LD_INT 1
25517: NEG
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 1
25525: PUSH
25526: LD_INT 0
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 1
25535: PUSH
25536: LD_INT 1
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 0
25545: PUSH
25546: LD_INT 1
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 1
25555: NEG
25556: PUSH
25557: LD_INT 0
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 1
25566: NEG
25567: PUSH
25568: LD_INT 1
25570: NEG
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 1
25578: PUSH
25579: LD_INT 1
25581: NEG
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 2
25589: PUSH
25590: LD_INT 0
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 2
25599: PUSH
25600: LD_INT 1
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 1
25609: NEG
25610: PUSH
25611: LD_INT 1
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: LD_INT 2
25620: NEG
25621: PUSH
25622: LD_INT 0
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 2
25631: NEG
25632: PUSH
25633: LD_INT 1
25635: NEG
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 2
25643: PUSH
25644: LD_INT 1
25646: NEG
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 3
25654: PUSH
25655: LD_INT 0
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 3
25664: PUSH
25665: LD_INT 1
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25690: LD_ADDR_VAR 0 16
25694: PUSH
25695: LD_INT 0
25697: PUSH
25698: LD_INT 0
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 0
25707: PUSH
25708: LD_INT 1
25710: NEG
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 1
25718: PUSH
25719: LD_INT 0
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 1
25728: PUSH
25729: LD_INT 1
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 0
25738: PUSH
25739: LD_INT 1
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 1
25748: NEG
25749: PUSH
25750: LD_INT 0
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 1
25759: NEG
25760: PUSH
25761: LD_INT 1
25763: NEG
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 1
25771: NEG
25772: PUSH
25773: LD_INT 2
25775: NEG
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 2
25783: PUSH
25784: LD_INT 1
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 2
25793: PUSH
25794: LD_INT 2
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 1
25803: PUSH
25804: LD_INT 2
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 2
25813: NEG
25814: PUSH
25815: LD_INT 1
25817: NEG
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 2
25825: NEG
25826: PUSH
25827: LD_INT 2
25829: NEG
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: LD_INT 3
25837: PUSH
25838: LD_INT 2
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 3
25847: PUSH
25848: LD_INT 3
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 2
25857: PUSH
25858: LD_INT 3
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25883: LD_ADDR_VAR 0 17
25887: PUSH
25888: LD_INT 0
25890: PUSH
25891: LD_INT 0
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 0
25900: PUSH
25901: LD_INT 1
25903: NEG
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 1
25911: PUSH
25912: LD_INT 0
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 1
25921: PUSH
25922: LD_INT 1
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 0
25931: PUSH
25932: LD_INT 1
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 1
25941: NEG
25942: PUSH
25943: LD_INT 0
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PUSH
25950: LD_INT 1
25952: NEG
25953: PUSH
25954: LD_INT 1
25956: NEG
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 1
25964: NEG
25965: PUSH
25966: LD_INT 2
25968: NEG
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 0
25976: PUSH
25977: LD_INT 2
25979: NEG
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 1
25987: PUSH
25988: LD_INT 1
25990: NEG
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 2
25998: PUSH
25999: LD_INT 0
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 2
26008: PUSH
26009: LD_INT 1
26011: PUSH
26012: EMPTY
26013: LIST
26014: LIST
26015: PUSH
26016: LD_INT 2
26018: PUSH
26019: LD_INT 2
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 1
26028: PUSH
26029: LD_INT 2
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 0
26038: PUSH
26039: LD_INT 2
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 1
26048: NEG
26049: PUSH
26050: LD_INT 1
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 2
26059: NEG
26060: PUSH
26061: LD_INT 0
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 2
26070: NEG
26071: PUSH
26072: LD_INT 1
26074: NEG
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 2
26082: NEG
26083: PUSH
26084: LD_INT 2
26086: NEG
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26113: LD_ADDR_VAR 0 18
26117: PUSH
26118: LD_INT 0
26120: PUSH
26121: LD_INT 0
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 0
26130: PUSH
26131: LD_INT 1
26133: NEG
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 1
26141: PUSH
26142: LD_INT 0
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 1
26151: PUSH
26152: LD_INT 1
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 0
26161: PUSH
26162: LD_INT 1
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 1
26171: NEG
26172: PUSH
26173: LD_INT 0
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: PUSH
26180: LD_INT 1
26182: NEG
26183: PUSH
26184: LD_INT 1
26186: NEG
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 1
26194: NEG
26195: PUSH
26196: LD_INT 2
26198: NEG
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 0
26206: PUSH
26207: LD_INT 2
26209: NEG
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 1
26217: PUSH
26218: LD_INT 1
26220: NEG
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 2
26228: PUSH
26229: LD_INT 0
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 2
26238: PUSH
26239: LD_INT 1
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 2
26248: PUSH
26249: LD_INT 2
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 1
26258: PUSH
26259: LD_INT 2
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 0
26268: PUSH
26269: LD_INT 2
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 1
26278: NEG
26279: PUSH
26280: LD_INT 1
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: PUSH
26287: LD_INT 2
26289: NEG
26290: PUSH
26291: LD_INT 0
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 2
26300: NEG
26301: PUSH
26302: LD_INT 1
26304: NEG
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 2
26312: NEG
26313: PUSH
26314: LD_INT 2
26316: NEG
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: LIST
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26343: LD_ADDR_VAR 0 19
26347: PUSH
26348: LD_INT 0
26350: PUSH
26351: LD_INT 0
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 0
26360: PUSH
26361: LD_INT 1
26363: NEG
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 1
26371: PUSH
26372: LD_INT 0
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 1
26381: PUSH
26382: LD_INT 1
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 0
26391: PUSH
26392: LD_INT 1
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 1
26401: NEG
26402: PUSH
26403: LD_INT 0
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 1
26412: NEG
26413: PUSH
26414: LD_INT 1
26416: NEG
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 1
26424: NEG
26425: PUSH
26426: LD_INT 2
26428: NEG
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: LD_INT 0
26436: PUSH
26437: LD_INT 2
26439: NEG
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 1
26447: PUSH
26448: LD_INT 1
26450: NEG
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 2
26458: PUSH
26459: LD_INT 0
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 2
26468: PUSH
26469: LD_INT 1
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 2
26478: PUSH
26479: LD_INT 2
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 1
26488: PUSH
26489: LD_INT 2
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 0
26498: PUSH
26499: LD_INT 2
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 1
26508: NEG
26509: PUSH
26510: LD_INT 1
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 2
26519: NEG
26520: PUSH
26521: LD_INT 0
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 2
26530: NEG
26531: PUSH
26532: LD_INT 1
26534: NEG
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 2
26542: NEG
26543: PUSH
26544: LD_INT 2
26546: NEG
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26573: LD_ADDR_VAR 0 20
26577: PUSH
26578: LD_INT 0
26580: PUSH
26581: LD_INT 0
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 0
26590: PUSH
26591: LD_INT 1
26593: NEG
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 1
26601: PUSH
26602: LD_INT 0
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 1
26611: PUSH
26612: LD_INT 1
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 0
26621: PUSH
26622: LD_INT 1
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 1
26631: NEG
26632: PUSH
26633: LD_INT 0
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: PUSH
26640: LD_INT 1
26642: NEG
26643: PUSH
26644: LD_INT 1
26646: NEG
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 1
26654: NEG
26655: PUSH
26656: LD_INT 2
26658: NEG
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 0
26666: PUSH
26667: LD_INT 2
26669: NEG
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 1
26677: PUSH
26678: LD_INT 1
26680: NEG
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 2
26688: PUSH
26689: LD_INT 0
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 2
26698: PUSH
26699: LD_INT 1
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 2
26708: PUSH
26709: LD_INT 2
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 1
26718: PUSH
26719: LD_INT 2
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 0
26728: PUSH
26729: LD_INT 2
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PUSH
26736: LD_INT 1
26738: NEG
26739: PUSH
26740: LD_INT 1
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 2
26749: NEG
26750: PUSH
26751: LD_INT 0
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: LD_INT 2
26760: NEG
26761: PUSH
26762: LD_INT 1
26764: NEG
26765: PUSH
26766: EMPTY
26767: LIST
26768: LIST
26769: PUSH
26770: LD_INT 2
26772: NEG
26773: PUSH
26774: LD_INT 2
26776: NEG
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26803: LD_ADDR_VAR 0 21
26807: PUSH
26808: LD_INT 0
26810: PUSH
26811: LD_INT 0
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 0
26820: PUSH
26821: LD_INT 1
26823: NEG
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 1
26831: PUSH
26832: LD_INT 0
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: PUSH
26839: LD_INT 1
26841: PUSH
26842: LD_INT 1
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 0
26851: PUSH
26852: LD_INT 1
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 1
26861: NEG
26862: PUSH
26863: LD_INT 0
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 1
26872: NEG
26873: PUSH
26874: LD_INT 1
26876: NEG
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 1
26884: NEG
26885: PUSH
26886: LD_INT 2
26888: NEG
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 0
26896: PUSH
26897: LD_INT 2
26899: NEG
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 1
26907: PUSH
26908: LD_INT 1
26910: NEG
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 2
26918: PUSH
26919: LD_INT 0
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 2
26928: PUSH
26929: LD_INT 1
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 2
26938: PUSH
26939: LD_INT 2
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 1
26948: PUSH
26949: LD_INT 2
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 0
26958: PUSH
26959: LD_INT 2
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 1
26968: NEG
26969: PUSH
26970: LD_INT 1
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 2
26979: NEG
26980: PUSH
26981: LD_INT 0
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 2
26990: NEG
26991: PUSH
26992: LD_INT 1
26994: NEG
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: LD_INT 2
27002: NEG
27003: PUSH
27004: LD_INT 2
27006: NEG
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27033: LD_ADDR_VAR 0 22
27037: PUSH
27038: LD_INT 0
27040: PUSH
27041: LD_INT 0
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 0
27050: PUSH
27051: LD_INT 1
27053: NEG
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 1
27061: PUSH
27062: LD_INT 0
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: LD_INT 1
27071: PUSH
27072: LD_INT 1
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 0
27081: PUSH
27082: LD_INT 1
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 1
27091: NEG
27092: PUSH
27093: LD_INT 0
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 1
27102: NEG
27103: PUSH
27104: LD_INT 1
27106: NEG
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: LD_INT 1
27114: NEG
27115: PUSH
27116: LD_INT 2
27118: NEG
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 0
27126: PUSH
27127: LD_INT 2
27129: NEG
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 1
27137: PUSH
27138: LD_INT 1
27140: NEG
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 2
27148: PUSH
27149: LD_INT 0
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 2
27158: PUSH
27159: LD_INT 1
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 2
27168: PUSH
27169: LD_INT 2
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 1
27178: PUSH
27179: LD_INT 2
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 0
27188: PUSH
27189: LD_INT 2
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 1
27198: NEG
27199: PUSH
27200: LD_INT 1
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 2
27209: NEG
27210: PUSH
27211: LD_INT 0
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 2
27220: NEG
27221: PUSH
27222: LD_INT 1
27224: NEG
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: LD_INT 2
27232: NEG
27233: PUSH
27234: LD_INT 2
27236: NEG
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27263: LD_ADDR_VAR 0 23
27267: PUSH
27268: LD_INT 0
27270: PUSH
27271: LD_INT 0
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 0
27280: PUSH
27281: LD_INT 1
27283: NEG
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 1
27291: PUSH
27292: LD_INT 0
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: LD_INT 1
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 0
27311: PUSH
27312: LD_INT 1
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 1
27321: NEG
27322: PUSH
27323: LD_INT 0
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 1
27332: NEG
27333: PUSH
27334: LD_INT 1
27336: NEG
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 1
27344: NEG
27345: PUSH
27346: LD_INT 2
27348: NEG
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 0
27356: PUSH
27357: LD_INT 2
27359: NEG
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 1
27367: PUSH
27368: LD_INT 1
27370: NEG
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 2
27378: PUSH
27379: LD_INT 0
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 2
27388: PUSH
27389: LD_INT 1
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 2
27398: PUSH
27399: LD_INT 2
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 1
27408: PUSH
27409: LD_INT 2
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 0
27418: PUSH
27419: LD_INT 2
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 1
27428: NEG
27429: PUSH
27430: LD_INT 1
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 2
27439: NEG
27440: PUSH
27441: LD_INT 0
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 2
27450: NEG
27451: PUSH
27452: LD_INT 1
27454: NEG
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 2
27462: NEG
27463: PUSH
27464: LD_INT 2
27466: NEG
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: PUSH
27472: LD_INT 2
27474: NEG
27475: PUSH
27476: LD_INT 3
27478: NEG
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 1
27486: NEG
27487: PUSH
27488: LD_INT 3
27490: NEG
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 1
27498: PUSH
27499: LD_INT 2
27501: NEG
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 2
27509: PUSH
27510: LD_INT 1
27512: NEG
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: EMPTY
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27543: LD_ADDR_VAR 0 24
27547: PUSH
27548: LD_INT 0
27550: PUSH
27551: LD_INT 0
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 0
27560: PUSH
27561: LD_INT 1
27563: NEG
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 1
27571: PUSH
27572: LD_INT 0
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 1
27581: PUSH
27582: LD_INT 1
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 0
27591: PUSH
27592: LD_INT 1
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 1
27601: NEG
27602: PUSH
27603: LD_INT 0
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 1
27612: NEG
27613: PUSH
27614: LD_INT 1
27616: NEG
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 1
27624: NEG
27625: PUSH
27626: LD_INT 2
27628: NEG
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 0
27636: PUSH
27637: LD_INT 2
27639: NEG
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 1
27647: PUSH
27648: LD_INT 1
27650: NEG
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: LD_INT 2
27658: PUSH
27659: LD_INT 0
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 2
27668: PUSH
27669: LD_INT 1
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 2
27678: PUSH
27679: LD_INT 2
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 1
27688: PUSH
27689: LD_INT 2
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 0
27698: PUSH
27699: LD_INT 2
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 1
27708: NEG
27709: PUSH
27710: LD_INT 1
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 2
27719: NEG
27720: PUSH
27721: LD_INT 0
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PUSH
27728: LD_INT 2
27730: NEG
27731: PUSH
27732: LD_INT 1
27734: NEG
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 2
27742: NEG
27743: PUSH
27744: LD_INT 2
27746: NEG
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 1
27754: PUSH
27755: LD_INT 2
27757: NEG
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 2
27765: PUSH
27766: LD_INT 1
27768: NEG
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 3
27776: PUSH
27777: LD_INT 1
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 3
27786: PUSH
27787: LD_INT 2
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
27819: LD_ADDR_VAR 0 25
27823: PUSH
27824: LD_INT 0
27826: PUSH
27827: LD_INT 0
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PUSH
27834: LD_INT 0
27836: PUSH
27837: LD_INT 1
27839: NEG
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 1
27847: PUSH
27848: LD_INT 0
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 1
27857: PUSH
27858: LD_INT 1
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 0
27867: PUSH
27868: LD_INT 1
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 1
27877: NEG
27878: PUSH
27879: LD_INT 0
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 1
27888: NEG
27889: PUSH
27890: LD_INT 1
27892: NEG
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: LD_INT 1
27900: NEG
27901: PUSH
27902: LD_INT 2
27904: NEG
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 0
27912: PUSH
27913: LD_INT 2
27915: NEG
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 1
27923: PUSH
27924: LD_INT 1
27926: NEG
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 2
27934: PUSH
27935: LD_INT 0
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 2
27944: PUSH
27945: LD_INT 1
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 2
27954: PUSH
27955: LD_INT 2
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 1
27964: PUSH
27965: LD_INT 2
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 0
27974: PUSH
27975: LD_INT 2
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PUSH
27982: LD_INT 1
27984: NEG
27985: PUSH
27986: LD_INT 1
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 2
27995: NEG
27996: PUSH
27997: LD_INT 0
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: LD_INT 2
28006: NEG
28007: PUSH
28008: LD_INT 1
28010: NEG
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 2
28018: NEG
28019: PUSH
28020: LD_INT 2
28022: NEG
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 3
28030: PUSH
28031: LD_INT 1
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: LD_INT 3
28040: PUSH
28041: LD_INT 2
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 2
28050: PUSH
28051: LD_INT 3
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: LD_INT 1
28060: PUSH
28061: LD_INT 3
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28093: LD_ADDR_VAR 0 26
28097: PUSH
28098: LD_INT 0
28100: PUSH
28101: LD_INT 0
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 0
28110: PUSH
28111: LD_INT 1
28113: NEG
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 1
28121: PUSH
28122: LD_INT 0
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 1
28131: PUSH
28132: LD_INT 1
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 0
28141: PUSH
28142: LD_INT 1
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 1
28151: NEG
28152: PUSH
28153: LD_INT 0
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 1
28162: NEG
28163: PUSH
28164: LD_INT 1
28166: NEG
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 1
28174: NEG
28175: PUSH
28176: LD_INT 2
28178: NEG
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 0
28186: PUSH
28187: LD_INT 2
28189: NEG
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: LD_INT 1
28197: PUSH
28198: LD_INT 1
28200: NEG
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 2
28208: PUSH
28209: LD_INT 0
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 2
28218: PUSH
28219: LD_INT 1
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 2
28228: PUSH
28229: LD_INT 2
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: LD_INT 1
28238: PUSH
28239: LD_INT 2
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: LD_INT 0
28248: PUSH
28249: LD_INT 2
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 1
28258: NEG
28259: PUSH
28260: LD_INT 1
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 2
28269: NEG
28270: PUSH
28271: LD_INT 0
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 2
28280: NEG
28281: PUSH
28282: LD_INT 1
28284: NEG
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 2
28292: NEG
28293: PUSH
28294: LD_INT 2
28296: NEG
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 2
28304: PUSH
28305: LD_INT 3
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 1
28314: PUSH
28315: LD_INT 3
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 1
28324: NEG
28325: PUSH
28326: LD_INT 2
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 2
28335: NEG
28336: PUSH
28337: LD_INT 1
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28369: LD_ADDR_VAR 0 27
28373: PUSH
28374: LD_INT 0
28376: PUSH
28377: LD_INT 0
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 0
28386: PUSH
28387: LD_INT 1
28389: NEG
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 1
28397: PUSH
28398: LD_INT 0
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 1
28407: PUSH
28408: LD_INT 1
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 0
28417: PUSH
28418: LD_INT 1
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 1
28427: NEG
28428: PUSH
28429: LD_INT 0
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 1
28438: NEG
28439: PUSH
28440: LD_INT 1
28442: NEG
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 1
28450: NEG
28451: PUSH
28452: LD_INT 2
28454: NEG
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 0
28462: PUSH
28463: LD_INT 2
28465: NEG
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 1
28473: PUSH
28474: LD_INT 1
28476: NEG
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 2
28484: PUSH
28485: LD_INT 0
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 2
28494: PUSH
28495: LD_INT 1
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 2
28504: PUSH
28505: LD_INT 2
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: LD_INT 1
28514: PUSH
28515: LD_INT 2
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 0
28524: PUSH
28525: LD_INT 2
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 1
28534: NEG
28535: PUSH
28536: LD_INT 1
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 2
28545: NEG
28546: PUSH
28547: LD_INT 0
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: LD_INT 2
28556: NEG
28557: PUSH
28558: LD_INT 1
28560: NEG
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 2
28568: NEG
28569: PUSH
28570: LD_INT 2
28572: NEG
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 1
28580: NEG
28581: PUSH
28582: LD_INT 2
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: LD_INT 2
28591: NEG
28592: PUSH
28593: LD_INT 1
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 3
28602: NEG
28603: PUSH
28604: LD_INT 1
28606: NEG
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: LD_INT 3
28614: NEG
28615: PUSH
28616: LD_INT 2
28618: NEG
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28649: LD_ADDR_VAR 0 28
28653: PUSH
28654: LD_INT 0
28656: PUSH
28657: LD_INT 0
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 0
28666: PUSH
28667: LD_INT 1
28669: NEG
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 1
28677: PUSH
28678: LD_INT 0
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 1
28687: PUSH
28688: LD_INT 1
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 0
28697: PUSH
28698: LD_INT 1
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 1
28707: NEG
28708: PUSH
28709: LD_INT 0
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 1
28718: NEG
28719: PUSH
28720: LD_INT 1
28722: NEG
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 1
28730: NEG
28731: PUSH
28732: LD_INT 2
28734: NEG
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 0
28742: PUSH
28743: LD_INT 2
28745: NEG
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 1
28753: PUSH
28754: LD_INT 1
28756: NEG
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 2
28764: PUSH
28765: LD_INT 0
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 2
28774: PUSH
28775: LD_INT 1
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 2
28784: PUSH
28785: LD_INT 2
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 1
28794: PUSH
28795: LD_INT 2
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 0
28804: PUSH
28805: LD_INT 2
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 1
28814: NEG
28815: PUSH
28816: LD_INT 1
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 2
28825: NEG
28826: PUSH
28827: LD_INT 0
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 2
28836: NEG
28837: PUSH
28838: LD_INT 1
28840: NEG
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 2
28848: NEG
28849: PUSH
28850: LD_INT 2
28852: NEG
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 2
28860: NEG
28861: PUSH
28862: LD_INT 3
28864: NEG
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 1
28872: NEG
28873: PUSH
28874: LD_INT 3
28876: NEG
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 3
28884: NEG
28885: PUSH
28886: LD_INT 1
28888: NEG
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 3
28896: NEG
28897: PUSH
28898: LD_INT 2
28900: NEG
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28931: LD_ADDR_VAR 0 29
28935: PUSH
28936: LD_INT 0
28938: PUSH
28939: LD_INT 0
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 0
28948: PUSH
28949: LD_INT 1
28951: NEG
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 1
28959: PUSH
28960: LD_INT 0
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 1
28969: PUSH
28970: LD_INT 1
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 0
28979: PUSH
28980: LD_INT 1
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 1
28989: NEG
28990: PUSH
28991: LD_INT 0
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 1
29000: NEG
29001: PUSH
29002: LD_INT 1
29004: NEG
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 1
29012: NEG
29013: PUSH
29014: LD_INT 2
29016: NEG
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 0
29024: PUSH
29025: LD_INT 2
29027: NEG
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 1
29035: PUSH
29036: LD_INT 1
29038: NEG
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 2
29046: PUSH
29047: LD_INT 0
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 2
29056: PUSH
29057: LD_INT 1
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 1
29066: PUSH
29067: LD_INT 2
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 0
29076: PUSH
29077: LD_INT 2
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 1
29086: NEG
29087: PUSH
29088: LD_INT 1
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 2
29097: NEG
29098: PUSH
29099: LD_INT 1
29101: NEG
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: LD_INT 2
29109: NEG
29110: PUSH
29111: LD_INT 2
29113: NEG
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 2
29121: NEG
29122: PUSH
29123: LD_INT 3
29125: NEG
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 2
29133: PUSH
29134: LD_INT 1
29136: NEG
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 3
29144: PUSH
29145: LD_INT 1
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 1
29154: PUSH
29155: LD_INT 3
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 1
29164: NEG
29165: PUSH
29166: LD_INT 2
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 3
29175: NEG
29176: PUSH
29177: LD_INT 2
29179: NEG
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: LIST
29208: LIST
29209: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29210: LD_ADDR_VAR 0 30
29214: PUSH
29215: LD_INT 0
29217: PUSH
29218: LD_INT 0
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: LD_INT 0
29227: PUSH
29228: LD_INT 1
29230: NEG
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 1
29238: PUSH
29239: LD_INT 0
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 1
29248: PUSH
29249: LD_INT 1
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 0
29258: PUSH
29259: LD_INT 1
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 1
29268: NEG
29269: PUSH
29270: LD_INT 0
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 1
29279: NEG
29280: PUSH
29281: LD_INT 1
29283: NEG
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 1
29291: NEG
29292: PUSH
29293: LD_INT 2
29295: NEG
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 0
29303: PUSH
29304: LD_INT 2
29306: NEG
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: LD_INT 1
29314: PUSH
29315: LD_INT 1
29317: NEG
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: LD_INT 2
29325: PUSH
29326: LD_INT 0
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 2
29335: PUSH
29336: LD_INT 1
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 2
29345: PUSH
29346: LD_INT 2
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 1
29355: PUSH
29356: LD_INT 2
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 1
29365: NEG
29366: PUSH
29367: LD_INT 1
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: LD_INT 2
29376: NEG
29377: PUSH
29378: LD_INT 0
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 2
29387: NEG
29388: PUSH
29389: LD_INT 1
29391: NEG
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 1
29399: NEG
29400: PUSH
29401: LD_INT 3
29403: NEG
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 1
29411: PUSH
29412: LD_INT 2
29414: NEG
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 3
29422: PUSH
29423: LD_INT 2
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 2
29432: PUSH
29433: LD_INT 3
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 2
29442: NEG
29443: PUSH
29444: LD_INT 1
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PUSH
29451: LD_INT 3
29453: NEG
29454: PUSH
29455: LD_INT 1
29457: NEG
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29488: LD_ADDR_VAR 0 31
29492: PUSH
29493: LD_INT 0
29495: PUSH
29496: LD_INT 0
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 0
29505: PUSH
29506: LD_INT 1
29508: NEG
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 1
29516: PUSH
29517: LD_INT 0
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 1
29526: PUSH
29527: LD_INT 1
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 0
29536: PUSH
29537: LD_INT 1
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 1
29546: NEG
29547: PUSH
29548: LD_INT 0
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 1
29557: NEG
29558: PUSH
29559: LD_INT 1
29561: NEG
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 1
29569: NEG
29570: PUSH
29571: LD_INT 2
29573: NEG
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 1
29581: PUSH
29582: LD_INT 1
29584: NEG
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 2
29592: PUSH
29593: LD_INT 0
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 2
29602: PUSH
29603: LD_INT 1
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 2
29612: PUSH
29613: LD_INT 2
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 1
29622: PUSH
29623: LD_INT 2
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 0
29632: PUSH
29633: LD_INT 2
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 1
29642: NEG
29643: PUSH
29644: LD_INT 1
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 2
29653: NEG
29654: PUSH
29655: LD_INT 1
29657: NEG
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 2
29665: NEG
29666: PUSH
29667: LD_INT 2
29669: NEG
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 2
29677: NEG
29678: PUSH
29679: LD_INT 3
29681: NEG
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 2
29689: PUSH
29690: LD_INT 1
29692: NEG
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 3
29700: PUSH
29701: LD_INT 1
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 1
29710: PUSH
29711: LD_INT 3
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 1
29720: NEG
29721: PUSH
29722: LD_INT 2
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 3
29731: NEG
29732: PUSH
29733: LD_INT 2
29735: NEG
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29766: LD_ADDR_VAR 0 32
29770: PUSH
29771: LD_INT 0
29773: PUSH
29774: LD_INT 0
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 0
29783: PUSH
29784: LD_INT 1
29786: NEG
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 1
29794: PUSH
29795: LD_INT 0
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 1
29804: PUSH
29805: LD_INT 1
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 0
29814: PUSH
29815: LD_INT 1
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: LD_INT 1
29824: NEG
29825: PUSH
29826: LD_INT 0
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 1
29835: NEG
29836: PUSH
29837: LD_INT 1
29839: NEG
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 1
29847: NEG
29848: PUSH
29849: LD_INT 2
29851: NEG
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: LD_INT 0
29859: PUSH
29860: LD_INT 2
29862: NEG
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 1
29870: PUSH
29871: LD_INT 1
29873: NEG
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 2
29881: PUSH
29882: LD_INT 1
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 2
29891: PUSH
29892: LD_INT 2
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 1
29901: PUSH
29902: LD_INT 2
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 0
29911: PUSH
29912: LD_INT 2
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 1
29921: NEG
29922: PUSH
29923: LD_INT 1
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 2
29932: NEG
29933: PUSH
29934: LD_INT 0
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 2
29943: NEG
29944: PUSH
29945: LD_INT 1
29947: NEG
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 1
29955: NEG
29956: PUSH
29957: LD_INT 3
29959: NEG
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 1
29967: PUSH
29968: LD_INT 2
29970: NEG
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 3
29978: PUSH
29979: LD_INT 2
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 2
29988: PUSH
29989: LD_INT 3
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 2
29998: NEG
29999: PUSH
30000: LD_INT 1
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: LD_INT 3
30009: NEG
30010: PUSH
30011: LD_INT 1
30013: NEG
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30044: LD_ADDR_VAR 0 33
30048: PUSH
30049: LD_INT 0
30051: PUSH
30052: LD_INT 0
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 0
30061: PUSH
30062: LD_INT 1
30064: NEG
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 1
30072: PUSH
30073: LD_INT 0
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 1
30082: PUSH
30083: LD_INT 1
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 0
30092: PUSH
30093: LD_INT 1
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 1
30102: NEG
30103: PUSH
30104: LD_INT 0
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 1
30113: NEG
30114: PUSH
30115: LD_INT 1
30117: NEG
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 1
30125: NEG
30126: PUSH
30127: LD_INT 2
30129: NEG
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 1
30137: PUSH
30138: LD_INT 1
30140: NEG
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 2
30148: PUSH
30149: LD_INT 0
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 2
30158: PUSH
30159: LD_INT 1
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 1
30168: PUSH
30169: LD_INT 2
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 0
30178: PUSH
30179: LD_INT 2
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 1
30188: NEG
30189: PUSH
30190: LD_INT 1
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 2
30199: NEG
30200: PUSH
30201: LD_INT 0
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 2
30210: NEG
30211: PUSH
30212: LD_INT 1
30214: NEG
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 2
30222: NEG
30223: PUSH
30224: LD_INT 2
30226: NEG
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 2
30234: NEG
30235: PUSH
30236: LD_INT 3
30238: NEG
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 2
30246: PUSH
30247: LD_INT 1
30249: NEG
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 3
30257: PUSH
30258: LD_INT 1
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 1
30267: PUSH
30268: LD_INT 3
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 1
30277: NEG
30278: PUSH
30279: LD_INT 2
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 3
30288: NEG
30289: PUSH
30290: LD_INT 2
30292: NEG
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30323: LD_ADDR_VAR 0 34
30327: PUSH
30328: LD_INT 0
30330: PUSH
30331: LD_INT 0
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: LD_INT 0
30340: PUSH
30341: LD_INT 1
30343: NEG
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 1
30351: PUSH
30352: LD_INT 0
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 1
30361: PUSH
30362: LD_INT 1
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 0
30371: PUSH
30372: LD_INT 1
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 1
30381: NEG
30382: PUSH
30383: LD_INT 0
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 1
30392: NEG
30393: PUSH
30394: LD_INT 1
30396: NEG
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 1
30404: NEG
30405: PUSH
30406: LD_INT 2
30408: NEG
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: LD_INT 0
30416: PUSH
30417: LD_INT 2
30419: NEG
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 1
30427: PUSH
30428: LD_INT 1
30430: NEG
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 2
30438: PUSH
30439: LD_INT 1
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 2
30448: PUSH
30449: LD_INT 2
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 1
30458: PUSH
30459: LD_INT 2
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 1
30468: NEG
30469: PUSH
30470: LD_INT 1
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 2
30479: NEG
30480: PUSH
30481: LD_INT 0
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 2
30490: NEG
30491: PUSH
30492: LD_INT 1
30494: NEG
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 2
30502: NEG
30503: PUSH
30504: LD_INT 2
30506: NEG
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 1
30514: NEG
30515: PUSH
30516: LD_INT 3
30518: NEG
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 1
30526: PUSH
30527: LD_INT 2
30529: NEG
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 3
30537: PUSH
30538: LD_INT 2
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 2
30547: PUSH
30548: LD_INT 3
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 2
30557: NEG
30558: PUSH
30559: LD_INT 1
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 3
30568: NEG
30569: PUSH
30570: LD_INT 1
30572: NEG
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30603: LD_ADDR_VAR 0 35
30607: PUSH
30608: LD_INT 0
30610: PUSH
30611: LD_INT 0
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 0
30620: PUSH
30621: LD_INT 1
30623: NEG
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 1
30631: PUSH
30632: LD_INT 0
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 1
30641: PUSH
30642: LD_INT 1
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 0
30651: PUSH
30652: LD_INT 1
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 1
30661: NEG
30662: PUSH
30663: LD_INT 0
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 1
30672: NEG
30673: PUSH
30674: LD_INT 1
30676: NEG
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 2
30684: PUSH
30685: LD_INT 1
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 2
30694: NEG
30695: PUSH
30696: LD_INT 1
30698: NEG
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30715: LD_ADDR_VAR 0 36
30719: PUSH
30720: LD_INT 0
30722: PUSH
30723: LD_INT 0
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 0
30732: PUSH
30733: LD_INT 1
30735: NEG
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: PUSH
30741: LD_INT 1
30743: PUSH
30744: LD_INT 0
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: PUSH
30751: LD_INT 1
30753: PUSH
30754: LD_INT 1
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 0
30763: PUSH
30764: LD_INT 1
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 1
30773: NEG
30774: PUSH
30775: LD_INT 0
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 1
30784: NEG
30785: PUSH
30786: LD_INT 1
30788: NEG
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: LD_INT 1
30796: NEG
30797: PUSH
30798: LD_INT 2
30800: NEG
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 1
30808: PUSH
30809: LD_INT 2
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30827: LD_ADDR_VAR 0 37
30831: PUSH
30832: LD_INT 0
30834: PUSH
30835: LD_INT 0
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 0
30844: PUSH
30845: LD_INT 1
30847: NEG
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 1
30855: PUSH
30856: LD_INT 0
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 1
30865: PUSH
30866: LD_INT 1
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 0
30875: PUSH
30876: LD_INT 1
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 1
30885: NEG
30886: PUSH
30887: LD_INT 0
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 1
30896: NEG
30897: PUSH
30898: LD_INT 1
30900: NEG
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 1
30908: PUSH
30909: LD_INT 1
30911: NEG
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 1
30919: NEG
30920: PUSH
30921: LD_INT 1
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30939: LD_ADDR_VAR 0 38
30943: PUSH
30944: LD_INT 0
30946: PUSH
30947: LD_INT 0
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 0
30956: PUSH
30957: LD_INT 1
30959: NEG
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 1
30967: PUSH
30968: LD_INT 0
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 1
30977: PUSH
30978: LD_INT 1
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 0
30987: PUSH
30988: LD_INT 1
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 1
30997: NEG
30998: PUSH
30999: LD_INT 0
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 1
31008: NEG
31009: PUSH
31010: LD_INT 1
31012: NEG
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 2
31020: PUSH
31021: LD_INT 1
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 2
31030: NEG
31031: PUSH
31032: LD_INT 1
31034: NEG
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31051: LD_ADDR_VAR 0 39
31055: PUSH
31056: LD_INT 0
31058: PUSH
31059: LD_INT 0
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 0
31068: PUSH
31069: LD_INT 1
31071: NEG
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 1
31079: PUSH
31080: LD_INT 0
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 1
31089: PUSH
31090: LD_INT 1
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 0
31099: PUSH
31100: LD_INT 1
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 1
31109: NEG
31110: PUSH
31111: LD_INT 0
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 1
31120: NEG
31121: PUSH
31122: LD_INT 1
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 1
31132: NEG
31133: PUSH
31134: LD_INT 2
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 1
31144: PUSH
31145: LD_INT 2
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31163: LD_ADDR_VAR 0 40
31167: PUSH
31168: LD_INT 0
31170: PUSH
31171: LD_INT 0
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 0
31180: PUSH
31181: LD_INT 1
31183: NEG
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 1
31191: PUSH
31192: LD_INT 0
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: PUSH
31199: LD_INT 1
31201: PUSH
31202: LD_INT 1
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 0
31211: PUSH
31212: LD_INT 1
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 1
31221: NEG
31222: PUSH
31223: LD_INT 0
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 1
31232: NEG
31233: PUSH
31234: LD_INT 1
31236: NEG
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 1
31244: PUSH
31245: LD_INT 1
31247: NEG
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 1
31255: NEG
31256: PUSH
31257: LD_INT 1
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31275: LD_ADDR_VAR 0 41
31279: PUSH
31280: LD_INT 0
31282: PUSH
31283: LD_INT 0
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 0
31292: PUSH
31293: LD_INT 1
31295: NEG
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: PUSH
31301: LD_INT 1
31303: PUSH
31304: LD_INT 0
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 1
31313: PUSH
31314: LD_INT 1
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 0
31323: PUSH
31324: LD_INT 1
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 1
31333: NEG
31334: PUSH
31335: LD_INT 0
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 1
31344: NEG
31345: PUSH
31346: LD_INT 1
31348: NEG
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 1
31356: NEG
31357: PUSH
31358: LD_INT 2
31360: NEG
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 1
31368: PUSH
31369: LD_INT 1
31371: NEG
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 2
31379: PUSH
31380: LD_INT 0
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 2
31389: PUSH
31390: LD_INT 1
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 2
31399: PUSH
31400: LD_INT 2
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 1
31409: PUSH
31410: LD_INT 2
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 1
31419: NEG
31420: PUSH
31421: LD_INT 1
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 2
31430: NEG
31431: PUSH
31432: LD_INT 0
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 2
31441: NEG
31442: PUSH
31443: LD_INT 1
31445: NEG
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 2
31453: NEG
31454: PUSH
31455: LD_INT 2
31457: NEG
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 2
31465: NEG
31466: PUSH
31467: LD_INT 3
31469: NEG
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 2
31477: PUSH
31478: LD_INT 1
31480: NEG
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 3
31488: PUSH
31489: LD_INT 0
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 3
31498: PUSH
31499: LD_INT 1
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 3
31508: PUSH
31509: LD_INT 2
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 3
31518: PUSH
31519: LD_INT 3
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 2
31528: PUSH
31529: LD_INT 3
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 2
31538: NEG
31539: PUSH
31540: LD_INT 1
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 3
31549: NEG
31550: PUSH
31551: LD_INT 0
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 3
31560: NEG
31561: PUSH
31562: LD_INT 1
31564: NEG
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 3
31572: NEG
31573: PUSH
31574: LD_INT 2
31576: NEG
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 3
31584: NEG
31585: PUSH
31586: LD_INT 3
31588: NEG
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31625: LD_ADDR_VAR 0 42
31629: PUSH
31630: LD_INT 0
31632: PUSH
31633: LD_INT 0
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 0
31642: PUSH
31643: LD_INT 1
31645: NEG
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 1
31653: PUSH
31654: LD_INT 0
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 1
31663: PUSH
31664: LD_INT 1
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 0
31673: PUSH
31674: LD_INT 1
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 1
31683: NEG
31684: PUSH
31685: LD_INT 0
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 1
31694: NEG
31695: PUSH
31696: LD_INT 1
31698: NEG
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 1
31706: NEG
31707: PUSH
31708: LD_INT 2
31710: NEG
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 0
31718: PUSH
31719: LD_INT 2
31721: NEG
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 1
31729: PUSH
31730: LD_INT 1
31732: NEG
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 2
31740: PUSH
31741: LD_INT 1
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 2
31750: PUSH
31751: LD_INT 2
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 1
31760: PUSH
31761: LD_INT 2
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 0
31770: PUSH
31771: LD_INT 2
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 1
31780: NEG
31781: PUSH
31782: LD_INT 1
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 2
31791: NEG
31792: PUSH
31793: LD_INT 1
31795: NEG
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 2
31803: NEG
31804: PUSH
31805: LD_INT 2
31807: NEG
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 2
31815: NEG
31816: PUSH
31817: LD_INT 3
31819: NEG
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 1
31827: NEG
31828: PUSH
31829: LD_INT 3
31831: NEG
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 0
31839: PUSH
31840: LD_INT 3
31842: NEG
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 1
31850: PUSH
31851: LD_INT 2
31853: NEG
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 3
31861: PUSH
31862: LD_INT 2
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PUSH
31869: LD_INT 3
31871: PUSH
31872: LD_INT 3
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 2
31881: PUSH
31882: LD_INT 3
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 1
31891: PUSH
31892: LD_INT 3
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 0
31901: PUSH
31902: LD_INT 3
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 1
31911: NEG
31912: PUSH
31913: LD_INT 2
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 3
31922: NEG
31923: PUSH
31924: LD_INT 2
31926: NEG
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 3
31934: NEG
31935: PUSH
31936: LD_INT 3
31938: NEG
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31975: LD_ADDR_VAR 0 43
31979: PUSH
31980: LD_INT 0
31982: PUSH
31983: LD_INT 0
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 0
31992: PUSH
31993: LD_INT 1
31995: NEG
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 1
32003: PUSH
32004: LD_INT 0
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 1
32013: PUSH
32014: LD_INT 1
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 0
32023: PUSH
32024: LD_INT 1
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 1
32033: NEG
32034: PUSH
32035: LD_INT 0
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: PUSH
32042: LD_INT 1
32044: NEG
32045: PUSH
32046: LD_INT 1
32048: NEG
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 1
32056: NEG
32057: PUSH
32058: LD_INT 2
32060: NEG
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 0
32068: PUSH
32069: LD_INT 2
32071: NEG
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 1
32079: PUSH
32080: LD_INT 1
32082: NEG
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 2
32090: PUSH
32091: LD_INT 0
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 2
32100: PUSH
32101: LD_INT 1
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 1
32110: PUSH
32111: LD_INT 2
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 0
32120: PUSH
32121: LD_INT 2
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 1
32130: NEG
32131: PUSH
32132: LD_INT 1
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 2
32141: NEG
32142: PUSH
32143: LD_INT 0
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 2
32152: NEG
32153: PUSH
32154: LD_INT 1
32156: NEG
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: LD_INT 1
32164: NEG
32165: PUSH
32166: LD_INT 3
32168: NEG
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 0
32176: PUSH
32177: LD_INT 3
32179: NEG
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 1
32187: PUSH
32188: LD_INT 2
32190: NEG
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 2
32198: PUSH
32199: LD_INT 1
32201: NEG
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 3
32209: PUSH
32210: LD_INT 0
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 3
32219: PUSH
32220: LD_INT 1
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 1
32229: PUSH
32230: LD_INT 3
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 0
32239: PUSH
32240: LD_INT 3
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 1
32249: NEG
32250: PUSH
32251: LD_INT 2
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 2
32260: NEG
32261: PUSH
32262: LD_INT 1
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 3
32271: NEG
32272: PUSH
32273: LD_INT 0
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 3
32282: NEG
32283: PUSH
32284: LD_INT 1
32286: NEG
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32323: LD_ADDR_VAR 0 44
32327: PUSH
32328: LD_INT 0
32330: PUSH
32331: LD_INT 0
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 0
32340: PUSH
32341: LD_INT 1
32343: NEG
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 1
32351: PUSH
32352: LD_INT 0
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 1
32361: PUSH
32362: LD_INT 1
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 0
32371: PUSH
32372: LD_INT 1
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: PUSH
32379: LD_INT 1
32381: NEG
32382: PUSH
32383: LD_INT 0
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 1
32392: NEG
32393: PUSH
32394: LD_INT 1
32396: NEG
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 1
32404: NEG
32405: PUSH
32406: LD_INT 2
32408: NEG
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 1
32416: PUSH
32417: LD_INT 1
32419: NEG
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 2
32427: PUSH
32428: LD_INT 0
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 2
32437: PUSH
32438: LD_INT 1
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 2
32447: PUSH
32448: LD_INT 2
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 1
32457: PUSH
32458: LD_INT 2
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 1
32467: NEG
32468: PUSH
32469: LD_INT 1
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 2
32478: NEG
32479: PUSH
32480: LD_INT 0
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 2
32489: NEG
32490: PUSH
32491: LD_INT 1
32493: NEG
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 2
32501: NEG
32502: PUSH
32503: LD_INT 2
32505: NEG
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 2
32513: NEG
32514: PUSH
32515: LD_INT 3
32517: NEG
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 2
32525: PUSH
32526: LD_INT 1
32528: NEG
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 3
32536: PUSH
32537: LD_INT 0
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 3
32546: PUSH
32547: LD_INT 1
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 3
32556: PUSH
32557: LD_INT 2
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 3
32566: PUSH
32567: LD_INT 3
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 2
32576: PUSH
32577: LD_INT 3
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 2
32586: NEG
32587: PUSH
32588: LD_INT 1
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 3
32597: NEG
32598: PUSH
32599: LD_INT 0
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 3
32608: NEG
32609: PUSH
32610: LD_INT 1
32612: NEG
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 3
32620: NEG
32621: PUSH
32622: LD_INT 2
32624: NEG
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 3
32632: NEG
32633: PUSH
32634: LD_INT 3
32636: NEG
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32673: LD_ADDR_VAR 0 45
32677: PUSH
32678: LD_INT 0
32680: PUSH
32681: LD_INT 0
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 0
32690: PUSH
32691: LD_INT 1
32693: NEG
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 1
32701: PUSH
32702: LD_INT 0
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 1
32711: PUSH
32712: LD_INT 1
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 0
32721: PUSH
32722: LD_INT 1
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 1
32731: NEG
32732: PUSH
32733: LD_INT 0
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 1
32742: NEG
32743: PUSH
32744: LD_INT 1
32746: NEG
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: PUSH
32752: LD_INT 1
32754: NEG
32755: PUSH
32756: LD_INT 2
32758: NEG
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 0
32766: PUSH
32767: LD_INT 2
32769: NEG
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 1
32777: PUSH
32778: LD_INT 1
32780: NEG
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 2
32788: PUSH
32789: LD_INT 1
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 2
32798: PUSH
32799: LD_INT 2
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 1
32808: PUSH
32809: LD_INT 2
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 0
32818: PUSH
32819: LD_INT 2
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 1
32828: NEG
32829: PUSH
32830: LD_INT 1
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 2
32839: NEG
32840: PUSH
32841: LD_INT 1
32843: NEG
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 2
32851: NEG
32852: PUSH
32853: LD_INT 2
32855: NEG
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 2
32863: NEG
32864: PUSH
32865: LD_INT 3
32867: NEG
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 1
32875: NEG
32876: PUSH
32877: LD_INT 3
32879: NEG
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 0
32887: PUSH
32888: LD_INT 3
32890: NEG
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 1
32898: PUSH
32899: LD_INT 2
32901: NEG
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 3
32909: PUSH
32910: LD_INT 2
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 3
32919: PUSH
32920: LD_INT 3
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 2
32929: PUSH
32930: LD_INT 3
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 1
32939: PUSH
32940: LD_INT 3
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 0
32949: PUSH
32950: LD_INT 3
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 1
32959: NEG
32960: PUSH
32961: LD_INT 2
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 3
32970: NEG
32971: PUSH
32972: LD_INT 2
32974: NEG
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 3
32982: NEG
32983: PUSH
32984: LD_INT 3
32986: NEG
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: LIST
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33023: LD_ADDR_VAR 0 46
33027: PUSH
33028: LD_INT 0
33030: PUSH
33031: LD_INT 0
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 0
33040: PUSH
33041: LD_INT 1
33043: NEG
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 1
33051: PUSH
33052: LD_INT 0
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 1
33061: PUSH
33062: LD_INT 1
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 0
33071: PUSH
33072: LD_INT 1
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 1
33081: NEG
33082: PUSH
33083: LD_INT 0
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 1
33092: NEG
33093: PUSH
33094: LD_INT 1
33096: NEG
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 1
33104: NEG
33105: PUSH
33106: LD_INT 2
33108: NEG
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 0
33116: PUSH
33117: LD_INT 2
33119: NEG
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 1
33127: PUSH
33128: LD_INT 1
33130: NEG
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 2
33138: PUSH
33139: LD_INT 0
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 2
33148: PUSH
33149: LD_INT 1
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 1
33158: PUSH
33159: LD_INT 2
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 0
33168: PUSH
33169: LD_INT 2
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 1
33178: NEG
33179: PUSH
33180: LD_INT 1
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 2
33189: NEG
33190: PUSH
33191: LD_INT 0
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 2
33200: NEG
33201: PUSH
33202: LD_INT 1
33204: NEG
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 1
33212: NEG
33213: PUSH
33214: LD_INT 3
33216: NEG
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: PUSH
33222: LD_INT 0
33224: PUSH
33225: LD_INT 3
33227: NEG
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 1
33235: PUSH
33236: LD_INT 2
33238: NEG
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 2
33246: PUSH
33247: LD_INT 1
33249: NEG
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 3
33257: PUSH
33258: LD_INT 0
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 3
33267: PUSH
33268: LD_INT 1
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 1
33277: PUSH
33278: LD_INT 3
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 0
33287: PUSH
33288: LD_INT 3
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 1
33297: NEG
33298: PUSH
33299: LD_INT 2
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 2
33308: NEG
33309: PUSH
33310: LD_INT 1
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 3
33319: NEG
33320: PUSH
33321: LD_INT 0
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 3
33330: NEG
33331: PUSH
33332: LD_INT 1
33334: NEG
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33371: LD_ADDR_VAR 0 47
33375: PUSH
33376: LD_INT 0
33378: PUSH
33379: LD_INT 0
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 0
33388: PUSH
33389: LD_INT 1
33391: NEG
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 1
33399: PUSH
33400: LD_INT 0
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 1
33409: PUSH
33410: LD_INT 1
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 0
33419: PUSH
33420: LD_INT 1
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 1
33429: NEG
33430: PUSH
33431: LD_INT 0
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 1
33440: NEG
33441: PUSH
33442: LD_INT 1
33444: NEG
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 1
33452: NEG
33453: PUSH
33454: LD_INT 2
33456: NEG
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 0
33464: PUSH
33465: LD_INT 2
33467: NEG
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 1
33475: PUSH
33476: LD_INT 1
33478: NEG
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 2
33486: NEG
33487: PUSH
33488: LD_INT 1
33490: NEG
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: LD_INT 2
33498: NEG
33499: PUSH
33500: LD_INT 2
33502: NEG
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33522: LD_ADDR_VAR 0 48
33526: PUSH
33527: LD_INT 0
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 0
33539: PUSH
33540: LD_INT 1
33542: NEG
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 1
33550: PUSH
33551: LD_INT 0
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 1
33560: PUSH
33561: LD_INT 1
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 0
33570: PUSH
33571: LD_INT 1
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 1
33580: NEG
33581: PUSH
33582: LD_INT 0
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 1
33591: NEG
33592: PUSH
33593: LD_INT 1
33595: NEG
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 1
33603: NEG
33604: PUSH
33605: LD_INT 2
33607: NEG
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 0
33615: PUSH
33616: LD_INT 2
33618: NEG
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 1
33626: PUSH
33627: LD_INT 1
33629: NEG
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 2
33637: PUSH
33638: LD_INT 0
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 2
33647: PUSH
33648: LD_INT 1
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33669: LD_ADDR_VAR 0 49
33673: PUSH
33674: LD_INT 0
33676: PUSH
33677: LD_INT 0
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 0
33686: PUSH
33687: LD_INT 1
33689: NEG
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 1
33697: PUSH
33698: LD_INT 0
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 1
33707: PUSH
33708: LD_INT 1
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 0
33717: PUSH
33718: LD_INT 1
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 1
33727: NEG
33728: PUSH
33729: LD_INT 0
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 1
33738: NEG
33739: PUSH
33740: LD_INT 1
33742: NEG
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 1
33750: PUSH
33751: LD_INT 1
33753: NEG
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 2
33761: PUSH
33762: LD_INT 0
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 2
33771: PUSH
33772: LD_INT 1
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 2
33781: PUSH
33782: LD_INT 2
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 1
33791: PUSH
33792: LD_INT 2
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33813: LD_ADDR_VAR 0 50
33817: PUSH
33818: LD_INT 0
33820: PUSH
33821: LD_INT 0
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 0
33830: PUSH
33831: LD_INT 1
33833: NEG
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 1
33841: PUSH
33842: LD_INT 0
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 1
33851: PUSH
33852: LD_INT 1
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 0
33861: PUSH
33862: LD_INT 1
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 1
33871: NEG
33872: PUSH
33873: LD_INT 0
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 1
33882: NEG
33883: PUSH
33884: LD_INT 1
33886: NEG
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 2
33894: PUSH
33895: LD_INT 1
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 2
33904: PUSH
33905: LD_INT 2
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PUSH
33912: LD_INT 1
33914: PUSH
33915: LD_INT 2
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 0
33924: PUSH
33925: LD_INT 2
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 1
33934: NEG
33935: PUSH
33936: LD_INT 1
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33957: LD_ADDR_VAR 0 51
33961: PUSH
33962: LD_INT 0
33964: PUSH
33965: LD_INT 0
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 0
33974: PUSH
33975: LD_INT 1
33977: NEG
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 1
33985: PUSH
33986: LD_INT 0
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 1
33995: PUSH
33996: LD_INT 1
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 0
34005: PUSH
34006: LD_INT 1
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 1
34015: NEG
34016: PUSH
34017: LD_INT 0
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 1
34026: NEG
34027: PUSH
34028: LD_INT 1
34030: NEG
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 1
34038: PUSH
34039: LD_INT 2
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 0
34048: PUSH
34049: LD_INT 2
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 1
34058: NEG
34059: PUSH
34060: LD_INT 1
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 2
34069: NEG
34070: PUSH
34071: LD_INT 0
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 2
34080: NEG
34081: PUSH
34082: LD_INT 1
34084: NEG
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34104: LD_ADDR_VAR 0 52
34108: PUSH
34109: LD_INT 0
34111: PUSH
34112: LD_INT 0
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 0
34121: PUSH
34122: LD_INT 1
34124: NEG
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 1
34132: PUSH
34133: LD_INT 0
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 1
34142: PUSH
34143: LD_INT 1
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 0
34152: PUSH
34153: LD_INT 1
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 1
34162: NEG
34163: PUSH
34164: LD_INT 0
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 1
34173: NEG
34174: PUSH
34175: LD_INT 1
34177: NEG
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 1
34185: NEG
34186: PUSH
34187: LD_INT 2
34189: NEG
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 1
34197: NEG
34198: PUSH
34199: LD_INT 1
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 2
34208: NEG
34209: PUSH
34210: LD_INT 0
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 2
34219: NEG
34220: PUSH
34221: LD_INT 1
34223: NEG
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 2
34231: NEG
34232: PUSH
34233: LD_INT 2
34235: NEG
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34255: LD_ADDR_VAR 0 53
34259: PUSH
34260: LD_INT 0
34262: PUSH
34263: LD_INT 0
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 0
34272: PUSH
34273: LD_INT 1
34275: NEG
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 1
34283: PUSH
34284: LD_INT 0
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 1
34293: PUSH
34294: LD_INT 1
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 0
34303: PUSH
34304: LD_INT 1
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 1
34313: NEG
34314: PUSH
34315: LD_INT 0
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 1
34324: NEG
34325: PUSH
34326: LD_INT 1
34328: NEG
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 1
34336: NEG
34337: PUSH
34338: LD_INT 2
34340: NEG
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 0
34348: PUSH
34349: LD_INT 2
34351: NEG
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 1
34359: PUSH
34360: LD_INT 1
34362: NEG
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 2
34370: PUSH
34371: LD_INT 0
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 2
34380: PUSH
34381: LD_INT 1
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 2
34390: PUSH
34391: LD_INT 2
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 1
34400: PUSH
34401: LD_INT 2
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 0
34410: PUSH
34411: LD_INT 2
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 1
34420: NEG
34421: PUSH
34422: LD_INT 1
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 2
34431: NEG
34432: PUSH
34433: LD_INT 0
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 2
34442: NEG
34443: PUSH
34444: LD_INT 1
34446: NEG
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 2
34454: NEG
34455: PUSH
34456: LD_INT 2
34458: NEG
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34485: LD_ADDR_VAR 0 54
34489: PUSH
34490: LD_INT 0
34492: PUSH
34493: LD_INT 0
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 0
34502: PUSH
34503: LD_INT 1
34505: NEG
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 1
34513: PUSH
34514: LD_INT 0
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 1
34523: PUSH
34524: LD_INT 1
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 0
34533: PUSH
34534: LD_INT 1
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 1
34543: NEG
34544: PUSH
34545: LD_INT 0
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 1
34554: NEG
34555: PUSH
34556: LD_INT 1
34558: NEG
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 1
34566: NEG
34567: PUSH
34568: LD_INT 2
34570: NEG
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 0
34578: PUSH
34579: LD_INT 2
34581: NEG
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 1
34589: PUSH
34590: LD_INT 1
34592: NEG
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 2
34600: PUSH
34601: LD_INT 0
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 2
34610: PUSH
34611: LD_INT 1
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 2
34620: PUSH
34621: LD_INT 2
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 1
34630: PUSH
34631: LD_INT 2
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 0
34640: PUSH
34641: LD_INT 2
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 1
34650: NEG
34651: PUSH
34652: LD_INT 1
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 2
34661: NEG
34662: PUSH
34663: LD_INT 0
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 2
34672: NEG
34673: PUSH
34674: LD_INT 1
34676: NEG
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 2
34684: NEG
34685: PUSH
34686: LD_INT 2
34688: NEG
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34715: LD_ADDR_VAR 0 55
34719: PUSH
34720: LD_INT 0
34722: PUSH
34723: LD_INT 0
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 0
34732: PUSH
34733: LD_INT 1
34735: NEG
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 1
34743: PUSH
34744: LD_INT 0
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 1
34753: PUSH
34754: LD_INT 1
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 0
34763: PUSH
34764: LD_INT 1
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 1
34773: NEG
34774: PUSH
34775: LD_INT 0
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 1
34784: NEG
34785: PUSH
34786: LD_INT 1
34788: NEG
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 1
34796: NEG
34797: PUSH
34798: LD_INT 2
34800: NEG
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 0
34808: PUSH
34809: LD_INT 2
34811: NEG
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 1
34819: PUSH
34820: LD_INT 1
34822: NEG
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 2
34830: PUSH
34831: LD_INT 0
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: LD_INT 2
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 2
34850: PUSH
34851: LD_INT 2
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 1
34860: PUSH
34861: LD_INT 2
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 0
34870: PUSH
34871: LD_INT 2
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 1
34880: NEG
34881: PUSH
34882: LD_INT 1
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 2
34891: NEG
34892: PUSH
34893: LD_INT 0
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 2
34902: NEG
34903: PUSH
34904: LD_INT 1
34906: NEG
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 2
34914: NEG
34915: PUSH
34916: LD_INT 2
34918: NEG
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34945: LD_ADDR_VAR 0 56
34949: PUSH
34950: LD_INT 0
34952: PUSH
34953: LD_INT 0
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 0
34962: PUSH
34963: LD_INT 1
34965: NEG
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 1
34973: PUSH
34974: LD_INT 0
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 1
34983: PUSH
34984: LD_INT 1
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 0
34993: PUSH
34994: LD_INT 1
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: LD_INT 1
35003: NEG
35004: PUSH
35005: LD_INT 0
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 1
35014: NEG
35015: PUSH
35016: LD_INT 1
35018: NEG
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 1
35026: NEG
35027: PUSH
35028: LD_INT 2
35030: NEG
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 0
35038: PUSH
35039: LD_INT 2
35041: NEG
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: LD_INT 1
35049: PUSH
35050: LD_INT 1
35052: NEG
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 2
35060: PUSH
35061: LD_INT 0
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 2
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 2
35080: PUSH
35081: LD_INT 2
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 1
35090: PUSH
35091: LD_INT 2
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 0
35100: PUSH
35101: LD_INT 2
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 1
35110: NEG
35111: PUSH
35112: LD_INT 1
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 2
35121: NEG
35122: PUSH
35123: LD_INT 0
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 2
35132: NEG
35133: PUSH
35134: LD_INT 1
35136: NEG
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 2
35144: NEG
35145: PUSH
35146: LD_INT 2
35148: NEG
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35175: LD_ADDR_VAR 0 57
35179: PUSH
35180: LD_INT 0
35182: PUSH
35183: LD_INT 0
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 0
35192: PUSH
35193: LD_INT 1
35195: NEG
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 1
35203: PUSH
35204: LD_INT 0
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 1
35213: PUSH
35214: LD_INT 1
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 0
35223: PUSH
35224: LD_INT 1
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 1
35233: NEG
35234: PUSH
35235: LD_INT 0
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 1
35244: NEG
35245: PUSH
35246: LD_INT 1
35248: NEG
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 1
35256: NEG
35257: PUSH
35258: LD_INT 2
35260: NEG
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 0
35268: PUSH
35269: LD_INT 2
35271: NEG
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 1
35279: PUSH
35280: LD_INT 1
35282: NEG
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 2
35290: PUSH
35291: LD_INT 0
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 2
35300: PUSH
35301: LD_INT 1
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 2
35310: PUSH
35311: LD_INT 2
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 1
35320: PUSH
35321: LD_INT 2
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 0
35330: PUSH
35331: LD_INT 2
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 1
35340: NEG
35341: PUSH
35342: LD_INT 1
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 2
35351: NEG
35352: PUSH
35353: LD_INT 0
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 2
35362: NEG
35363: PUSH
35364: LD_INT 1
35366: NEG
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 2
35374: NEG
35375: PUSH
35376: LD_INT 2
35378: NEG
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35405: LD_ADDR_VAR 0 58
35409: PUSH
35410: LD_INT 0
35412: PUSH
35413: LD_INT 0
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 0
35422: PUSH
35423: LD_INT 1
35425: NEG
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 1
35433: PUSH
35434: LD_INT 0
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 1
35443: PUSH
35444: LD_INT 1
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 0
35453: PUSH
35454: LD_INT 1
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 1
35463: NEG
35464: PUSH
35465: LD_INT 0
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 1
35474: NEG
35475: PUSH
35476: LD_INT 1
35478: NEG
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 1
35486: NEG
35487: PUSH
35488: LD_INT 2
35490: NEG
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 0
35498: PUSH
35499: LD_INT 2
35501: NEG
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 1
35509: PUSH
35510: LD_INT 1
35512: NEG
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 2
35520: PUSH
35521: LD_INT 0
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 2
35530: PUSH
35531: LD_INT 1
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 2
35540: PUSH
35541: LD_INT 2
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 1
35550: PUSH
35551: LD_INT 2
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 0
35560: PUSH
35561: LD_INT 2
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 1
35570: NEG
35571: PUSH
35572: LD_INT 1
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 2
35581: NEG
35582: PUSH
35583: LD_INT 0
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 2
35592: NEG
35593: PUSH
35594: LD_INT 1
35596: NEG
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: LD_INT 2
35604: NEG
35605: PUSH
35606: LD_INT 2
35608: NEG
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35635: LD_ADDR_VAR 0 59
35639: PUSH
35640: LD_INT 0
35642: PUSH
35643: LD_INT 0
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 0
35652: PUSH
35653: LD_INT 1
35655: NEG
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 1
35663: PUSH
35664: LD_INT 0
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 1
35673: PUSH
35674: LD_INT 1
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 0
35683: PUSH
35684: LD_INT 1
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 1
35693: NEG
35694: PUSH
35695: LD_INT 0
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 1
35704: NEG
35705: PUSH
35706: LD_INT 1
35708: NEG
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35723: LD_ADDR_VAR 0 60
35727: PUSH
35728: LD_INT 0
35730: PUSH
35731: LD_INT 0
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: LD_INT 1
35743: NEG
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 1
35751: PUSH
35752: LD_INT 0
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 1
35761: PUSH
35762: LD_INT 1
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 0
35771: PUSH
35772: LD_INT 1
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 1
35781: NEG
35782: PUSH
35783: LD_INT 0
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 1
35792: NEG
35793: PUSH
35794: LD_INT 1
35796: NEG
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35811: LD_ADDR_VAR 0 61
35815: PUSH
35816: LD_INT 0
35818: PUSH
35819: LD_INT 0
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 0
35828: PUSH
35829: LD_INT 1
35831: NEG
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 1
35839: PUSH
35840: LD_INT 0
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 1
35849: PUSH
35850: LD_INT 1
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 0
35859: PUSH
35860: LD_INT 1
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 1
35869: NEG
35870: PUSH
35871: LD_INT 0
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 1
35880: NEG
35881: PUSH
35882: LD_INT 1
35884: NEG
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35899: LD_ADDR_VAR 0 62
35903: PUSH
35904: LD_INT 0
35906: PUSH
35907: LD_INT 0
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 0
35916: PUSH
35917: LD_INT 1
35919: NEG
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 1
35927: PUSH
35928: LD_INT 0
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 1
35937: PUSH
35938: LD_INT 1
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 0
35947: PUSH
35948: LD_INT 1
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 1
35957: NEG
35958: PUSH
35959: LD_INT 0
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 1
35968: NEG
35969: PUSH
35970: LD_INT 1
35972: NEG
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35987: LD_ADDR_VAR 0 63
35991: PUSH
35992: LD_INT 0
35994: PUSH
35995: LD_INT 0
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 0
36004: PUSH
36005: LD_INT 1
36007: NEG
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 1
36015: PUSH
36016: LD_INT 0
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 1
36025: PUSH
36026: LD_INT 1
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 0
36035: PUSH
36036: LD_INT 1
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 1
36045: NEG
36046: PUSH
36047: LD_INT 0
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: PUSH
36054: LD_INT 1
36056: NEG
36057: PUSH
36058: LD_INT 1
36060: NEG
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36075: LD_ADDR_VAR 0 64
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 0
36092: PUSH
36093: LD_INT 1
36095: NEG
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 1
36103: PUSH
36104: LD_INT 0
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 1
36113: PUSH
36114: LD_INT 1
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 0
36123: PUSH
36124: LD_INT 1
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 1
36133: NEG
36134: PUSH
36135: LD_INT 0
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 1
36144: NEG
36145: PUSH
36146: LD_INT 1
36148: NEG
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: ST_TO_ADDR
// end ; 1 :
36163: GO 42060
36165: LD_INT 1
36167: DOUBLE
36168: EQUAL
36169: IFTRUE 36173
36171: GO 38796
36173: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36174: LD_ADDR_VAR 0 11
36178: PUSH
36179: LD_INT 1
36181: NEG
36182: PUSH
36183: LD_INT 3
36185: NEG
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 0
36193: PUSH
36194: LD_INT 3
36196: NEG
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 1
36204: PUSH
36205: LD_INT 2
36207: NEG
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: LIST
36217: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36218: LD_ADDR_VAR 0 12
36222: PUSH
36223: LD_INT 2
36225: PUSH
36226: LD_INT 1
36228: NEG
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 3
36236: PUSH
36237: LD_INT 0
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 3
36246: PUSH
36247: LD_INT 1
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: LIST
36258: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36259: LD_ADDR_VAR 0 13
36263: PUSH
36264: LD_INT 3
36266: PUSH
36267: LD_INT 2
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 3
36276: PUSH
36277: LD_INT 3
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 2
36286: PUSH
36287: LD_INT 3
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: LIST
36298: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36299: LD_ADDR_VAR 0 14
36303: PUSH
36304: LD_INT 1
36306: PUSH
36307: LD_INT 3
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 0
36316: PUSH
36317: LD_INT 3
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 1
36326: NEG
36327: PUSH
36328: LD_INT 2
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: LIST
36339: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36340: LD_ADDR_VAR 0 15
36344: PUSH
36345: LD_INT 2
36347: NEG
36348: PUSH
36349: LD_INT 1
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 3
36358: NEG
36359: PUSH
36360: LD_INT 0
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 3
36369: NEG
36370: PUSH
36371: LD_INT 1
36373: NEG
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: LIST
36383: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36384: LD_ADDR_VAR 0 16
36388: PUSH
36389: LD_INT 2
36391: NEG
36392: PUSH
36393: LD_INT 3
36395: NEG
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 3
36403: NEG
36404: PUSH
36405: LD_INT 2
36407: NEG
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 3
36415: NEG
36416: PUSH
36417: LD_INT 3
36419: NEG
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: LIST
36429: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36430: LD_ADDR_VAR 0 17
36434: PUSH
36435: LD_INT 1
36437: NEG
36438: PUSH
36439: LD_INT 3
36441: NEG
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 0
36449: PUSH
36450: LD_INT 3
36452: NEG
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 1
36460: PUSH
36461: LD_INT 2
36463: NEG
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: LIST
36473: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36474: LD_ADDR_VAR 0 18
36478: PUSH
36479: LD_INT 2
36481: PUSH
36482: LD_INT 1
36484: NEG
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 3
36492: PUSH
36493: LD_INT 0
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 3
36502: PUSH
36503: LD_INT 1
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: LIST
36514: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36515: LD_ADDR_VAR 0 19
36519: PUSH
36520: LD_INT 3
36522: PUSH
36523: LD_INT 2
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 3
36532: PUSH
36533: LD_INT 3
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 2
36542: PUSH
36543: LD_INT 3
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: LIST
36554: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36555: LD_ADDR_VAR 0 20
36559: PUSH
36560: LD_INT 1
36562: PUSH
36563: LD_INT 3
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 0
36572: PUSH
36573: LD_INT 3
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 1
36582: NEG
36583: PUSH
36584: LD_INT 2
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: LIST
36595: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36596: LD_ADDR_VAR 0 21
36600: PUSH
36601: LD_INT 2
36603: NEG
36604: PUSH
36605: LD_INT 1
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 3
36614: NEG
36615: PUSH
36616: LD_INT 0
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 3
36625: NEG
36626: PUSH
36627: LD_INT 1
36629: NEG
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: LIST
36639: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36640: LD_ADDR_VAR 0 22
36644: PUSH
36645: LD_INT 2
36647: NEG
36648: PUSH
36649: LD_INT 3
36651: NEG
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 3
36659: NEG
36660: PUSH
36661: LD_INT 2
36663: NEG
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 3
36671: NEG
36672: PUSH
36673: LD_INT 3
36675: NEG
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: LIST
36685: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36686: LD_ADDR_VAR 0 23
36690: PUSH
36691: LD_INT 0
36693: PUSH
36694: LD_INT 3
36696: NEG
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 1
36704: NEG
36705: PUSH
36706: LD_INT 4
36708: NEG
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 1
36716: PUSH
36717: LD_INT 3
36719: NEG
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: LIST
36729: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36730: LD_ADDR_VAR 0 24
36734: PUSH
36735: LD_INT 3
36737: PUSH
36738: LD_INT 0
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 3
36747: PUSH
36748: LD_INT 1
36750: NEG
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 4
36758: PUSH
36759: LD_INT 1
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: LIST
36770: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36771: LD_ADDR_VAR 0 25
36775: PUSH
36776: LD_INT 3
36778: PUSH
36779: LD_INT 3
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 4
36788: PUSH
36789: LD_INT 3
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 3
36798: PUSH
36799: LD_INT 4
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: LIST
36810: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
36811: LD_ADDR_VAR 0 26
36815: PUSH
36816: LD_INT 0
36818: PUSH
36819: LD_INT 3
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 1
36828: PUSH
36829: LD_INT 4
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: LD_INT 3
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: LIST
36851: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
36852: LD_ADDR_VAR 0 27
36856: PUSH
36857: LD_INT 3
36859: NEG
36860: PUSH
36861: LD_INT 0
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 3
36870: NEG
36871: PUSH
36872: LD_INT 1
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 4
36881: NEG
36882: PUSH
36883: LD_INT 1
36885: NEG
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: LIST
36895: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
36896: LD_ADDR_VAR 0 28
36900: PUSH
36901: LD_INT 3
36903: NEG
36904: PUSH
36905: LD_INT 3
36907: NEG
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 3
36915: NEG
36916: PUSH
36917: LD_INT 4
36919: NEG
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 4
36927: NEG
36928: PUSH
36929: LD_INT 3
36931: NEG
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: LIST
36941: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
36942: LD_ADDR_VAR 0 29
36946: PUSH
36947: LD_INT 1
36949: NEG
36950: PUSH
36951: LD_INT 3
36953: NEG
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 0
36961: PUSH
36962: LD_INT 3
36964: NEG
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 1
36972: PUSH
36973: LD_INT 2
36975: NEG
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 1
36983: NEG
36984: PUSH
36985: LD_INT 4
36987: NEG
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 0
36995: PUSH
36996: LD_INT 4
36998: NEG
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 1
37006: PUSH
37007: LD_INT 3
37009: NEG
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 1
37017: NEG
37018: PUSH
37019: LD_INT 5
37021: NEG
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 0
37029: PUSH
37030: LD_INT 5
37032: NEG
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 1
37040: PUSH
37041: LD_INT 4
37043: NEG
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 1
37051: NEG
37052: PUSH
37053: LD_INT 6
37055: NEG
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 0
37063: PUSH
37064: LD_INT 6
37066: NEG
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 1
37074: PUSH
37075: LD_INT 5
37077: NEG
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37097: LD_ADDR_VAR 0 30
37101: PUSH
37102: LD_INT 2
37104: PUSH
37105: LD_INT 1
37107: NEG
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 3
37115: PUSH
37116: LD_INT 0
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 3
37125: PUSH
37126: LD_INT 1
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 3
37135: PUSH
37136: LD_INT 1
37138: NEG
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 4
37146: PUSH
37147: LD_INT 0
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 4
37156: PUSH
37157: LD_INT 1
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 4
37166: PUSH
37167: LD_INT 1
37169: NEG
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 5
37177: PUSH
37178: LD_INT 0
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 5
37187: PUSH
37188: LD_INT 1
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 5
37197: PUSH
37198: LD_INT 1
37200: NEG
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 6
37208: PUSH
37209: LD_INT 0
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 6
37218: PUSH
37219: LD_INT 1
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37240: LD_ADDR_VAR 0 31
37244: PUSH
37245: LD_INT 3
37247: PUSH
37248: LD_INT 2
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 3
37257: PUSH
37258: LD_INT 3
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 2
37267: PUSH
37268: LD_INT 3
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 4
37277: PUSH
37278: LD_INT 3
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 4
37287: PUSH
37288: LD_INT 4
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 3
37297: PUSH
37298: LD_INT 4
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 5
37307: PUSH
37308: LD_INT 4
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 5
37317: PUSH
37318: LD_INT 5
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 4
37327: PUSH
37328: LD_INT 5
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 6
37337: PUSH
37338: LD_INT 5
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 6
37347: PUSH
37348: LD_INT 6
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 5
37357: PUSH
37358: LD_INT 6
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37379: LD_ADDR_VAR 0 32
37383: PUSH
37384: LD_INT 1
37386: PUSH
37387: LD_INT 3
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 0
37396: PUSH
37397: LD_INT 3
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 1
37406: NEG
37407: PUSH
37408: LD_INT 2
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 1
37417: PUSH
37418: LD_INT 4
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 0
37427: PUSH
37428: LD_INT 4
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 1
37437: NEG
37438: PUSH
37439: LD_INT 3
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 1
37448: PUSH
37449: LD_INT 5
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 0
37458: PUSH
37459: LD_INT 5
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 1
37468: NEG
37469: PUSH
37470: LD_INT 4
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 1
37479: PUSH
37480: LD_INT 6
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 0
37489: PUSH
37490: LD_INT 6
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 1
37499: NEG
37500: PUSH
37501: LD_INT 5
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37522: LD_ADDR_VAR 0 33
37526: PUSH
37527: LD_INT 2
37529: NEG
37530: PUSH
37531: LD_INT 1
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 3
37540: NEG
37541: PUSH
37542: LD_INT 0
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 3
37551: NEG
37552: PUSH
37553: LD_INT 1
37555: NEG
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 3
37563: NEG
37564: PUSH
37565: LD_INT 1
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 4
37574: NEG
37575: PUSH
37576: LD_INT 0
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 4
37585: NEG
37586: PUSH
37587: LD_INT 1
37589: NEG
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 4
37597: NEG
37598: PUSH
37599: LD_INT 1
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 5
37608: NEG
37609: PUSH
37610: LD_INT 0
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 5
37619: NEG
37620: PUSH
37621: LD_INT 1
37623: NEG
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 5
37631: NEG
37632: PUSH
37633: LD_INT 1
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 6
37642: NEG
37643: PUSH
37644: LD_INT 0
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 6
37653: NEG
37654: PUSH
37655: LD_INT 1
37657: NEG
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37677: LD_ADDR_VAR 0 34
37681: PUSH
37682: LD_INT 2
37684: NEG
37685: PUSH
37686: LD_INT 3
37688: NEG
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 3
37696: NEG
37697: PUSH
37698: LD_INT 2
37700: NEG
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 3
37708: NEG
37709: PUSH
37710: LD_INT 3
37712: NEG
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 3
37720: NEG
37721: PUSH
37722: LD_INT 4
37724: NEG
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 4
37732: NEG
37733: PUSH
37734: LD_INT 3
37736: NEG
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 4
37744: NEG
37745: PUSH
37746: LD_INT 4
37748: NEG
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 4
37756: NEG
37757: PUSH
37758: LD_INT 5
37760: NEG
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 5
37768: NEG
37769: PUSH
37770: LD_INT 4
37772: NEG
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 5
37780: NEG
37781: PUSH
37782: LD_INT 5
37784: NEG
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 5
37792: NEG
37793: PUSH
37794: LD_INT 6
37796: NEG
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 6
37804: NEG
37805: PUSH
37806: LD_INT 5
37808: NEG
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 6
37816: NEG
37817: PUSH
37818: LD_INT 6
37820: NEG
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
37840: LD_ADDR_VAR 0 41
37844: PUSH
37845: LD_INT 0
37847: PUSH
37848: LD_INT 2
37850: NEG
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 1
37858: NEG
37859: PUSH
37860: LD_INT 3
37862: NEG
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: LD_INT 1
37870: PUSH
37871: LD_INT 2
37873: NEG
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: LIST
37883: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
37884: LD_ADDR_VAR 0 42
37888: PUSH
37889: LD_INT 2
37891: PUSH
37892: LD_INT 0
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 2
37901: PUSH
37902: LD_INT 1
37904: NEG
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 3
37912: PUSH
37913: LD_INT 1
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: LIST
37924: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
37925: LD_ADDR_VAR 0 43
37929: PUSH
37930: LD_INT 2
37932: PUSH
37933: LD_INT 2
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 3
37942: PUSH
37943: LD_INT 2
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 2
37952: PUSH
37953: LD_INT 3
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: LIST
37964: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
37965: LD_ADDR_VAR 0 44
37969: PUSH
37970: LD_INT 0
37972: PUSH
37973: LD_INT 2
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 1
37982: PUSH
37983: LD_INT 3
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 1
37992: NEG
37993: PUSH
37994: LD_INT 2
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: LIST
38005: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38006: LD_ADDR_VAR 0 45
38010: PUSH
38011: LD_INT 2
38013: NEG
38014: PUSH
38015: LD_INT 0
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 2
38024: NEG
38025: PUSH
38026: LD_INT 1
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 3
38035: NEG
38036: PUSH
38037: LD_INT 1
38039: NEG
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: LIST
38049: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38050: LD_ADDR_VAR 0 46
38054: PUSH
38055: LD_INT 2
38057: NEG
38058: PUSH
38059: LD_INT 2
38061: NEG
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 2
38069: NEG
38070: PUSH
38071: LD_INT 3
38073: NEG
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 3
38081: NEG
38082: PUSH
38083: LD_INT 2
38085: NEG
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: LIST
38095: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38096: LD_ADDR_VAR 0 47
38100: PUSH
38101: LD_INT 2
38103: NEG
38104: PUSH
38105: LD_INT 3
38107: NEG
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 1
38115: NEG
38116: PUSH
38117: LD_INT 3
38119: NEG
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38129: LD_ADDR_VAR 0 48
38133: PUSH
38134: LD_INT 1
38136: PUSH
38137: LD_INT 2
38139: NEG
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 2
38147: PUSH
38148: LD_INT 1
38150: NEG
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38160: LD_ADDR_VAR 0 49
38164: PUSH
38165: LD_INT 3
38167: PUSH
38168: LD_INT 1
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 3
38177: PUSH
38178: LD_INT 2
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38189: LD_ADDR_VAR 0 50
38193: PUSH
38194: LD_INT 2
38196: PUSH
38197: LD_INT 3
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 1
38206: PUSH
38207: LD_INT 3
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38218: LD_ADDR_VAR 0 51
38222: PUSH
38223: LD_INT 1
38225: NEG
38226: PUSH
38227: LD_INT 2
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 2
38236: NEG
38237: PUSH
38238: LD_INT 1
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38249: LD_ADDR_VAR 0 52
38253: PUSH
38254: LD_INT 3
38256: NEG
38257: PUSH
38258: LD_INT 1
38260: NEG
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 3
38268: NEG
38269: PUSH
38270: LD_INT 2
38272: NEG
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38282: LD_ADDR_VAR 0 53
38286: PUSH
38287: LD_INT 1
38289: NEG
38290: PUSH
38291: LD_INT 3
38293: NEG
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 0
38301: PUSH
38302: LD_INT 3
38304: NEG
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 1
38312: PUSH
38313: LD_INT 2
38315: NEG
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: LIST
38325: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38326: LD_ADDR_VAR 0 54
38330: PUSH
38331: LD_INT 2
38333: PUSH
38334: LD_INT 1
38336: NEG
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 3
38344: PUSH
38345: LD_INT 0
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 3
38354: PUSH
38355: LD_INT 1
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: LIST
38366: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38367: LD_ADDR_VAR 0 55
38371: PUSH
38372: LD_INT 3
38374: PUSH
38375: LD_INT 2
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 3
38384: PUSH
38385: LD_INT 3
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 2
38394: PUSH
38395: LD_INT 3
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: LIST
38406: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38407: LD_ADDR_VAR 0 56
38411: PUSH
38412: LD_INT 1
38414: PUSH
38415: LD_INT 3
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 0
38424: PUSH
38425: LD_INT 3
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 1
38434: NEG
38435: PUSH
38436: LD_INT 2
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: LIST
38447: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38448: LD_ADDR_VAR 0 57
38452: PUSH
38453: LD_INT 2
38455: NEG
38456: PUSH
38457: LD_INT 1
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 3
38466: NEG
38467: PUSH
38468: LD_INT 0
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 3
38477: NEG
38478: PUSH
38479: LD_INT 1
38481: NEG
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: LIST
38491: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38492: LD_ADDR_VAR 0 58
38496: PUSH
38497: LD_INT 2
38499: NEG
38500: PUSH
38501: LD_INT 3
38503: NEG
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 3
38511: NEG
38512: PUSH
38513: LD_INT 2
38515: NEG
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 3
38523: NEG
38524: PUSH
38525: LD_INT 3
38527: NEG
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: LIST
38537: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38538: LD_ADDR_VAR 0 59
38542: PUSH
38543: LD_INT 1
38545: NEG
38546: PUSH
38547: LD_INT 2
38549: NEG
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 0
38557: PUSH
38558: LD_INT 2
38560: NEG
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 1
38568: PUSH
38569: LD_INT 1
38571: NEG
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: LIST
38581: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38582: LD_ADDR_VAR 0 60
38586: PUSH
38587: LD_INT 1
38589: PUSH
38590: LD_INT 1
38592: NEG
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 2
38600: PUSH
38601: LD_INT 0
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 2
38610: PUSH
38611: LD_INT 1
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: LIST
38622: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38623: LD_ADDR_VAR 0 61
38627: PUSH
38628: LD_INT 2
38630: PUSH
38631: LD_INT 1
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 2
38640: PUSH
38641: LD_INT 2
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 1
38650: PUSH
38651: LD_INT 2
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: LIST
38662: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38663: LD_ADDR_VAR 0 62
38667: PUSH
38668: LD_INT 1
38670: PUSH
38671: LD_INT 2
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 0
38680: PUSH
38681: LD_INT 2
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 1
38690: NEG
38691: PUSH
38692: LD_INT 1
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: LIST
38703: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38704: LD_ADDR_VAR 0 63
38708: PUSH
38709: LD_INT 1
38711: NEG
38712: PUSH
38713: LD_INT 1
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 2
38722: NEG
38723: PUSH
38724: LD_INT 0
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 2
38733: NEG
38734: PUSH
38735: LD_INT 1
38737: NEG
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: LIST
38747: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38748: LD_ADDR_VAR 0 64
38752: PUSH
38753: LD_INT 1
38755: NEG
38756: PUSH
38757: LD_INT 2
38759: NEG
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 2
38767: NEG
38768: PUSH
38769: LD_INT 1
38771: NEG
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 2
38779: NEG
38780: PUSH
38781: LD_INT 2
38783: NEG
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: LIST
38793: ST_TO_ADDR
// end ; 2 :
38794: GO 42060
38796: LD_INT 2
38798: DOUBLE
38799: EQUAL
38800: IFTRUE 38804
38802: GO 42059
38804: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
38805: LD_ADDR_VAR 0 29
38809: PUSH
38810: LD_INT 4
38812: PUSH
38813: LD_INT 0
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 4
38822: PUSH
38823: LD_INT 1
38825: NEG
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 5
38833: PUSH
38834: LD_INT 0
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 5
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 4
38853: PUSH
38854: LD_INT 1
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 3
38863: PUSH
38864: LD_INT 0
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 3
38873: PUSH
38874: LD_INT 1
38876: NEG
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 3
38884: PUSH
38885: LD_INT 2
38887: NEG
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 5
38895: PUSH
38896: LD_INT 2
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 3
38905: PUSH
38906: LD_INT 3
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 3
38915: PUSH
38916: LD_INT 2
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 4
38925: PUSH
38926: LD_INT 3
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 4
38935: PUSH
38936: LD_INT 4
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 3
38945: PUSH
38946: LD_INT 4
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 2
38955: PUSH
38956: LD_INT 3
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 2
38965: PUSH
38966: LD_INT 2
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 4
38975: PUSH
38976: LD_INT 2
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 2
38985: PUSH
38986: LD_INT 4
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 0
38995: PUSH
38996: LD_INT 4
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 0
39005: PUSH
39006: LD_INT 3
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 1
39015: PUSH
39016: LD_INT 4
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 1
39025: PUSH
39026: LD_INT 5
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 0
39035: PUSH
39036: LD_INT 5
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 1
39045: NEG
39046: PUSH
39047: LD_INT 4
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 1
39056: NEG
39057: PUSH
39058: LD_INT 3
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 2
39067: PUSH
39068: LD_INT 5
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 2
39077: NEG
39078: PUSH
39079: LD_INT 3
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 3
39088: NEG
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 3
39099: NEG
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 2
39111: NEG
39112: PUSH
39113: LD_INT 0
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 2
39122: NEG
39123: PUSH
39124: LD_INT 1
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 3
39133: NEG
39134: PUSH
39135: LD_INT 1
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 4
39144: NEG
39145: PUSH
39146: LD_INT 0
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 4
39155: NEG
39156: PUSH
39157: LD_INT 1
39159: NEG
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 4
39167: NEG
39168: PUSH
39169: LD_INT 2
39171: NEG
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 2
39179: NEG
39180: PUSH
39181: LD_INT 2
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 4
39190: NEG
39191: PUSH
39192: LD_INT 4
39194: NEG
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 4
39202: NEG
39203: PUSH
39204: LD_INT 5
39206: NEG
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 3
39214: NEG
39215: PUSH
39216: LD_INT 4
39218: NEG
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 3
39226: NEG
39227: PUSH
39228: LD_INT 3
39230: NEG
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 4
39238: NEG
39239: PUSH
39240: LD_INT 3
39242: NEG
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 5
39250: NEG
39251: PUSH
39252: LD_INT 4
39254: NEG
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 5
39262: NEG
39263: PUSH
39264: LD_INT 5
39266: NEG
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 3
39274: NEG
39275: PUSH
39276: LD_INT 5
39278: NEG
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 5
39286: NEG
39287: PUSH
39288: LD_INT 3
39290: NEG
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39343: LD_ADDR_VAR 0 30
39347: PUSH
39348: LD_INT 4
39350: PUSH
39351: LD_INT 4
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 4
39360: PUSH
39361: LD_INT 3
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 5
39370: PUSH
39371: LD_INT 4
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 5
39380: PUSH
39381: LD_INT 5
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 4
39390: PUSH
39391: LD_INT 5
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 3
39400: PUSH
39401: LD_INT 4
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 3
39410: PUSH
39411: LD_INT 3
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 5
39420: PUSH
39421: LD_INT 3
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 3
39430: PUSH
39431: LD_INT 5
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: LD_INT 3
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 0
39450: PUSH
39451: LD_INT 2
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 1
39460: PUSH
39461: LD_INT 3
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 1
39470: PUSH
39471: LD_INT 4
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 0
39480: PUSH
39481: LD_INT 4
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 1
39490: NEG
39491: PUSH
39492: LD_INT 3
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 1
39501: NEG
39502: PUSH
39503: LD_INT 2
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 2
39512: PUSH
39513: LD_INT 4
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 2
39522: NEG
39523: PUSH
39524: LD_INT 2
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 4
39533: NEG
39534: PUSH
39535: LD_INT 0
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 4
39544: NEG
39545: PUSH
39546: LD_INT 1
39548: NEG
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 3
39556: NEG
39557: PUSH
39558: LD_INT 0
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 3
39567: NEG
39568: PUSH
39569: LD_INT 1
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 4
39578: NEG
39579: PUSH
39580: LD_INT 1
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 5
39589: NEG
39590: PUSH
39591: LD_INT 0
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 5
39600: NEG
39601: PUSH
39602: LD_INT 1
39604: NEG
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 5
39612: NEG
39613: PUSH
39614: LD_INT 2
39616: NEG
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 3
39624: NEG
39625: PUSH
39626: LD_INT 2
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 3
39635: NEG
39636: PUSH
39637: LD_INT 3
39639: NEG
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 3
39647: NEG
39648: PUSH
39649: LD_INT 4
39651: NEG
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 2
39659: NEG
39660: PUSH
39661: LD_INT 3
39663: NEG
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 2
39671: NEG
39672: PUSH
39673: LD_INT 2
39675: NEG
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 3
39683: NEG
39684: PUSH
39685: LD_INT 2
39687: NEG
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 4
39695: NEG
39696: PUSH
39697: LD_INT 3
39699: NEG
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 4
39707: NEG
39708: PUSH
39709: LD_INT 4
39711: NEG
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 2
39719: NEG
39720: PUSH
39721: LD_INT 4
39723: NEG
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 4
39731: NEG
39732: PUSH
39733: LD_INT 2
39735: NEG
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 0
39743: PUSH
39744: LD_INT 4
39746: NEG
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 0
39754: PUSH
39755: LD_INT 5
39757: NEG
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 1
39765: PUSH
39766: LD_INT 4
39768: NEG
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 1
39776: PUSH
39777: LD_INT 3
39779: NEG
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 0
39787: PUSH
39788: LD_INT 3
39790: NEG
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 1
39798: NEG
39799: PUSH
39800: LD_INT 4
39802: NEG
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 1
39810: NEG
39811: PUSH
39812: LD_INT 5
39814: NEG
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 2
39822: PUSH
39823: LD_INT 3
39825: NEG
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 2
39833: NEG
39834: PUSH
39835: LD_INT 5
39837: NEG
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
39890: LD_ADDR_VAR 0 31
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: LD_INT 4
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 0
39907: PUSH
39908: LD_INT 3
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 1
39917: PUSH
39918: LD_INT 4
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 1
39927: PUSH
39928: LD_INT 5
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 0
39937: PUSH
39938: LD_INT 5
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 1
39947: NEG
39948: PUSH
39949: LD_INT 4
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 1
39958: NEG
39959: PUSH
39960: LD_INT 3
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 2
39969: PUSH
39970: LD_INT 5
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 2
39979: NEG
39980: PUSH
39981: LD_INT 3
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 3
39990: NEG
39991: PUSH
39992: LD_INT 0
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 3
40001: NEG
40002: PUSH
40003: LD_INT 1
40005: NEG
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 2
40013: NEG
40014: PUSH
40015: LD_INT 0
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 2
40024: NEG
40025: PUSH
40026: LD_INT 1
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 3
40035: NEG
40036: PUSH
40037: LD_INT 1
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 4
40046: NEG
40047: PUSH
40048: LD_INT 0
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 4
40057: NEG
40058: PUSH
40059: LD_INT 1
40061: NEG
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 4
40069: NEG
40070: PUSH
40071: LD_INT 2
40073: NEG
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 2
40081: NEG
40082: PUSH
40083: LD_INT 2
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 4
40092: NEG
40093: PUSH
40094: LD_INT 4
40096: NEG
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 4
40104: NEG
40105: PUSH
40106: LD_INT 5
40108: NEG
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 3
40116: NEG
40117: PUSH
40118: LD_INT 4
40120: NEG
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 3
40128: NEG
40129: PUSH
40130: LD_INT 3
40132: NEG
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 4
40140: NEG
40141: PUSH
40142: LD_INT 3
40144: NEG
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 5
40152: NEG
40153: PUSH
40154: LD_INT 4
40156: NEG
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 5
40164: NEG
40165: PUSH
40166: LD_INT 5
40168: NEG
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 3
40176: NEG
40177: PUSH
40178: LD_INT 5
40180: NEG
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 5
40188: NEG
40189: PUSH
40190: LD_INT 3
40192: NEG
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 0
40200: PUSH
40201: LD_INT 3
40203: NEG
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 0
40211: PUSH
40212: LD_INT 4
40214: NEG
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 1
40222: PUSH
40223: LD_INT 3
40225: NEG
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 1
40233: PUSH
40234: LD_INT 2
40236: NEG
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 0
40244: PUSH
40245: LD_INT 2
40247: NEG
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 1
40255: NEG
40256: PUSH
40257: LD_INT 3
40259: NEG
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 1
40267: NEG
40268: PUSH
40269: LD_INT 4
40271: NEG
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 2
40279: PUSH
40280: LD_INT 2
40282: NEG
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 2
40290: NEG
40291: PUSH
40292: LD_INT 4
40294: NEG
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 4
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 4
40312: PUSH
40313: LD_INT 1
40315: NEG
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 5
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 5
40333: PUSH
40334: LD_INT 1
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 4
40343: PUSH
40344: LD_INT 1
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 3
40353: PUSH
40354: LD_INT 0
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 3
40363: PUSH
40364: LD_INT 1
40366: NEG
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 3
40374: PUSH
40375: LD_INT 2
40377: NEG
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 5
40385: PUSH
40386: LD_INT 2
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40440: LD_ADDR_VAR 0 32
40444: PUSH
40445: LD_INT 4
40447: NEG
40448: PUSH
40449: LD_INT 0
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 4
40458: NEG
40459: PUSH
40460: LD_INT 1
40462: NEG
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 3
40470: NEG
40471: PUSH
40472: LD_INT 0
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 3
40481: NEG
40482: PUSH
40483: LD_INT 1
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 4
40492: NEG
40493: PUSH
40494: LD_INT 1
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 5
40503: NEG
40504: PUSH
40505: LD_INT 0
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 5
40514: NEG
40515: PUSH
40516: LD_INT 1
40518: NEG
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 5
40526: NEG
40527: PUSH
40528: LD_INT 2
40530: NEG
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 3
40538: NEG
40539: PUSH
40540: LD_INT 2
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 3
40549: NEG
40550: PUSH
40551: LD_INT 3
40553: NEG
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 3
40561: NEG
40562: PUSH
40563: LD_INT 4
40565: NEG
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 2
40573: NEG
40574: PUSH
40575: LD_INT 3
40577: NEG
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 2
40585: NEG
40586: PUSH
40587: LD_INT 2
40589: NEG
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 3
40597: NEG
40598: PUSH
40599: LD_INT 2
40601: NEG
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 4
40609: NEG
40610: PUSH
40611: LD_INT 3
40613: NEG
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 4
40621: NEG
40622: PUSH
40623: LD_INT 4
40625: NEG
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 2
40633: NEG
40634: PUSH
40635: LD_INT 4
40637: NEG
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 4
40645: NEG
40646: PUSH
40647: LD_INT 2
40649: NEG
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 0
40657: PUSH
40658: LD_INT 4
40660: NEG
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 0
40668: PUSH
40669: LD_INT 5
40671: NEG
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 1
40679: PUSH
40680: LD_INT 4
40682: NEG
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 1
40690: PUSH
40691: LD_INT 3
40693: NEG
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 0
40701: PUSH
40702: LD_INT 3
40704: NEG
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 1
40712: NEG
40713: PUSH
40714: LD_INT 4
40716: NEG
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 1
40724: NEG
40725: PUSH
40726: LD_INT 5
40728: NEG
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 2
40736: PUSH
40737: LD_INT 3
40739: NEG
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 2
40747: NEG
40748: PUSH
40749: LD_INT 5
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 3
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 3
40769: PUSH
40770: LD_INT 1
40772: NEG
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 4
40780: PUSH
40781: LD_INT 0
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 4
40790: PUSH
40791: LD_INT 1
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 3
40800: PUSH
40801: LD_INT 1
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 2
40810: PUSH
40811: LD_INT 0
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 2
40820: PUSH
40821: LD_INT 1
40823: NEG
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 2
40831: PUSH
40832: LD_INT 2
40834: NEG
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 4
40842: PUSH
40843: LD_INT 2
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 4
40852: PUSH
40853: LD_INT 4
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 4
40862: PUSH
40863: LD_INT 3
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 5
40872: PUSH
40873: LD_INT 4
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 5
40882: PUSH
40883: LD_INT 5
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 4
40892: PUSH
40893: LD_INT 5
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 3
40902: PUSH
40903: LD_INT 4
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 3
40912: PUSH
40913: LD_INT 3
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 5
40922: PUSH
40923: LD_INT 3
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 3
40932: PUSH
40933: LD_INT 5
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
40987: LD_ADDR_VAR 0 33
40991: PUSH
40992: LD_INT 4
40994: NEG
40995: PUSH
40996: LD_INT 4
40998: NEG
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 4
41006: NEG
41007: PUSH
41008: LD_INT 5
41010: NEG
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 3
41018: NEG
41019: PUSH
41020: LD_INT 4
41022: NEG
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 3
41030: NEG
41031: PUSH
41032: LD_INT 3
41034: NEG
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 4
41042: NEG
41043: PUSH
41044: LD_INT 3
41046: NEG
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 5
41054: NEG
41055: PUSH
41056: LD_INT 4
41058: NEG
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 5
41066: NEG
41067: PUSH
41068: LD_INT 5
41070: NEG
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 3
41078: NEG
41079: PUSH
41080: LD_INT 5
41082: NEG
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 5
41090: NEG
41091: PUSH
41092: LD_INT 3
41094: NEG
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 0
41102: PUSH
41103: LD_INT 3
41105: NEG
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 0
41113: PUSH
41114: LD_INT 4
41116: NEG
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 1
41124: PUSH
41125: LD_INT 3
41127: NEG
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 1
41135: PUSH
41136: LD_INT 2
41138: NEG
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 0
41146: PUSH
41147: LD_INT 2
41149: NEG
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 1
41157: NEG
41158: PUSH
41159: LD_INT 3
41161: NEG
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 1
41169: NEG
41170: PUSH
41171: LD_INT 4
41173: NEG
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 2
41181: PUSH
41182: LD_INT 2
41184: NEG
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 2
41192: NEG
41193: PUSH
41194: LD_INT 4
41196: NEG
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 4
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 4
41214: PUSH
41215: LD_INT 1
41217: NEG
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 5
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 5
41235: PUSH
41236: LD_INT 1
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 4
41245: PUSH
41246: LD_INT 1
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 3
41255: PUSH
41256: LD_INT 0
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 3
41265: PUSH
41266: LD_INT 1
41268: NEG
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 3
41276: PUSH
41277: LD_INT 2
41279: NEG
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 5
41287: PUSH
41288: LD_INT 2
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 3
41297: PUSH
41298: LD_INT 3
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 3
41307: PUSH
41308: LD_INT 2
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 4
41317: PUSH
41318: LD_INT 3
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 4
41327: PUSH
41328: LD_INT 4
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 3
41337: PUSH
41338: LD_INT 4
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 2
41347: PUSH
41348: LD_INT 3
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 2
41357: PUSH
41358: LD_INT 2
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 4
41367: PUSH
41368: LD_INT 2
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 2
41377: PUSH
41378: LD_INT 4
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 0
41387: PUSH
41388: LD_INT 4
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: LD_INT 3
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 1
41407: PUSH
41408: LD_INT 4
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 1
41417: PUSH
41418: LD_INT 5
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 0
41427: PUSH
41428: LD_INT 5
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 1
41437: NEG
41438: PUSH
41439: LD_INT 4
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 1
41448: NEG
41449: PUSH
41450: LD_INT 3
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 2
41459: PUSH
41460: LD_INT 5
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 2
41469: NEG
41470: PUSH
41471: LD_INT 3
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41525: LD_ADDR_VAR 0 34
41529: PUSH
41530: LD_INT 0
41532: PUSH
41533: LD_INT 4
41535: NEG
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 0
41543: PUSH
41544: LD_INT 5
41546: NEG
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 1
41554: PUSH
41555: LD_INT 4
41557: NEG
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 1
41565: PUSH
41566: LD_INT 3
41568: NEG
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 0
41576: PUSH
41577: LD_INT 3
41579: NEG
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 1
41587: NEG
41588: PUSH
41589: LD_INT 4
41591: NEG
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 1
41599: NEG
41600: PUSH
41601: LD_INT 5
41603: NEG
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 2
41611: PUSH
41612: LD_INT 3
41614: NEG
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 2
41622: NEG
41623: PUSH
41624: LD_INT 5
41626: NEG
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 3
41634: PUSH
41635: LD_INT 0
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 3
41644: PUSH
41645: LD_INT 1
41647: NEG
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 4
41655: PUSH
41656: LD_INT 0
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 4
41665: PUSH
41666: LD_INT 1
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 3
41675: PUSH
41676: LD_INT 1
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 2
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 2
41695: PUSH
41696: LD_INT 1
41698: NEG
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 2
41706: PUSH
41707: LD_INT 2
41709: NEG
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 4
41717: PUSH
41718: LD_INT 2
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 4
41727: PUSH
41728: LD_INT 4
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 4
41737: PUSH
41738: LD_INT 3
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 5
41747: PUSH
41748: LD_INT 4
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_INT 5
41757: PUSH
41758: LD_INT 5
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 4
41767: PUSH
41768: LD_INT 5
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 3
41777: PUSH
41778: LD_INT 4
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 3
41787: PUSH
41788: LD_INT 3
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 5
41797: PUSH
41798: LD_INT 3
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 3
41807: PUSH
41808: LD_INT 5
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 0
41817: PUSH
41818: LD_INT 3
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 0
41827: PUSH
41828: LD_INT 2
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 1
41837: PUSH
41838: LD_INT 3
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 1
41847: PUSH
41848: LD_INT 4
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 0
41857: PUSH
41858: LD_INT 4
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 1
41867: NEG
41868: PUSH
41869: LD_INT 3
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 1
41878: NEG
41879: PUSH
41880: LD_INT 2
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 2
41889: PUSH
41890: LD_INT 4
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 2
41899: NEG
41900: PUSH
41901: LD_INT 2
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 4
41910: NEG
41911: PUSH
41912: LD_INT 0
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 4
41921: NEG
41922: PUSH
41923: LD_INT 1
41925: NEG
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 3
41933: NEG
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 3
41944: NEG
41945: PUSH
41946: LD_INT 1
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 4
41955: NEG
41956: PUSH
41957: LD_INT 1
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 5
41966: NEG
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 5
41977: NEG
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 5
41989: NEG
41990: PUSH
41991: LD_INT 2
41993: NEG
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 3
42001: NEG
42002: PUSH
42003: LD_INT 2
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: ST_TO_ADDR
// end ; end ;
42057: GO 42060
42059: POP
// case btype of b_depot , b_warehouse :
42060: LD_VAR 0 1
42064: PUSH
42065: LD_INT 0
42067: DOUBLE
42068: EQUAL
42069: IFTRUE 42079
42071: LD_INT 1
42073: DOUBLE
42074: EQUAL
42075: IFTRUE 42079
42077: GO 42280
42079: POP
// case nation of nation_american :
42080: LD_VAR 0 5
42084: PUSH
42085: LD_INT 1
42087: DOUBLE
42088: EQUAL
42089: IFTRUE 42093
42091: GO 42149
42093: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
42094: LD_ADDR_VAR 0 9
42098: PUSH
42099: LD_VAR 0 11
42103: PUSH
42104: LD_VAR 0 12
42108: PUSH
42109: LD_VAR 0 13
42113: PUSH
42114: LD_VAR 0 14
42118: PUSH
42119: LD_VAR 0 15
42123: PUSH
42124: LD_VAR 0 16
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: PUSH
42137: LD_VAR 0 4
42141: PUSH
42142: LD_INT 1
42144: PLUS
42145: ARRAY
42146: ST_TO_ADDR
42147: GO 42278
42149: LD_INT 2
42151: DOUBLE
42152: EQUAL
42153: IFTRUE 42157
42155: GO 42213
42157: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
42158: LD_ADDR_VAR 0 9
42162: PUSH
42163: LD_VAR 0 17
42167: PUSH
42168: LD_VAR 0 18
42172: PUSH
42173: LD_VAR 0 19
42177: PUSH
42178: LD_VAR 0 20
42182: PUSH
42183: LD_VAR 0 21
42187: PUSH
42188: LD_VAR 0 22
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: PUSH
42201: LD_VAR 0 4
42205: PUSH
42206: LD_INT 1
42208: PLUS
42209: ARRAY
42210: ST_TO_ADDR
42211: GO 42278
42213: LD_INT 3
42215: DOUBLE
42216: EQUAL
42217: IFTRUE 42221
42219: GO 42277
42221: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42222: LD_ADDR_VAR 0 9
42226: PUSH
42227: LD_VAR 0 23
42231: PUSH
42232: LD_VAR 0 24
42236: PUSH
42237: LD_VAR 0 25
42241: PUSH
42242: LD_VAR 0 26
42246: PUSH
42247: LD_VAR 0 27
42251: PUSH
42252: LD_VAR 0 28
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: PUSH
42265: LD_VAR 0 4
42269: PUSH
42270: LD_INT 1
42272: PLUS
42273: ARRAY
42274: ST_TO_ADDR
42275: GO 42278
42277: POP
42278: GO 42833
42280: LD_INT 2
42282: DOUBLE
42283: EQUAL
42284: IFTRUE 42294
42286: LD_INT 3
42288: DOUBLE
42289: EQUAL
42290: IFTRUE 42294
42292: GO 42350
42294: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42295: LD_ADDR_VAR 0 9
42299: PUSH
42300: LD_VAR 0 29
42304: PUSH
42305: LD_VAR 0 30
42309: PUSH
42310: LD_VAR 0 31
42314: PUSH
42315: LD_VAR 0 32
42319: PUSH
42320: LD_VAR 0 33
42324: PUSH
42325: LD_VAR 0 34
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: PUSH
42338: LD_VAR 0 4
42342: PUSH
42343: LD_INT 1
42345: PLUS
42346: ARRAY
42347: ST_TO_ADDR
42348: GO 42833
42350: LD_INT 16
42352: DOUBLE
42353: EQUAL
42354: IFTRUE 42412
42356: LD_INT 17
42358: DOUBLE
42359: EQUAL
42360: IFTRUE 42412
42362: LD_INT 18
42364: DOUBLE
42365: EQUAL
42366: IFTRUE 42412
42368: LD_INT 19
42370: DOUBLE
42371: EQUAL
42372: IFTRUE 42412
42374: LD_INT 22
42376: DOUBLE
42377: EQUAL
42378: IFTRUE 42412
42380: LD_INT 20
42382: DOUBLE
42383: EQUAL
42384: IFTRUE 42412
42386: LD_INT 21
42388: DOUBLE
42389: EQUAL
42390: IFTRUE 42412
42392: LD_INT 23
42394: DOUBLE
42395: EQUAL
42396: IFTRUE 42412
42398: LD_INT 24
42400: DOUBLE
42401: EQUAL
42402: IFTRUE 42412
42404: LD_INT 25
42406: DOUBLE
42407: EQUAL
42408: IFTRUE 42412
42410: GO 42468
42412: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42413: LD_ADDR_VAR 0 9
42417: PUSH
42418: LD_VAR 0 35
42422: PUSH
42423: LD_VAR 0 36
42427: PUSH
42428: LD_VAR 0 37
42432: PUSH
42433: LD_VAR 0 38
42437: PUSH
42438: LD_VAR 0 39
42442: PUSH
42443: LD_VAR 0 40
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: PUSH
42456: LD_VAR 0 4
42460: PUSH
42461: LD_INT 1
42463: PLUS
42464: ARRAY
42465: ST_TO_ADDR
42466: GO 42833
42468: LD_INT 6
42470: DOUBLE
42471: EQUAL
42472: IFTRUE 42524
42474: LD_INT 7
42476: DOUBLE
42477: EQUAL
42478: IFTRUE 42524
42480: LD_INT 8
42482: DOUBLE
42483: EQUAL
42484: IFTRUE 42524
42486: LD_INT 13
42488: DOUBLE
42489: EQUAL
42490: IFTRUE 42524
42492: LD_INT 12
42494: DOUBLE
42495: EQUAL
42496: IFTRUE 42524
42498: LD_INT 15
42500: DOUBLE
42501: EQUAL
42502: IFTRUE 42524
42504: LD_INT 11
42506: DOUBLE
42507: EQUAL
42508: IFTRUE 42524
42510: LD_INT 14
42512: DOUBLE
42513: EQUAL
42514: IFTRUE 42524
42516: LD_INT 10
42518: DOUBLE
42519: EQUAL
42520: IFTRUE 42524
42522: GO 42580
42524: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
42525: LD_ADDR_VAR 0 9
42529: PUSH
42530: LD_VAR 0 41
42534: PUSH
42535: LD_VAR 0 42
42539: PUSH
42540: LD_VAR 0 43
42544: PUSH
42545: LD_VAR 0 44
42549: PUSH
42550: LD_VAR 0 45
42554: PUSH
42555: LD_VAR 0 46
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: PUSH
42568: LD_VAR 0 4
42572: PUSH
42573: LD_INT 1
42575: PLUS
42576: ARRAY
42577: ST_TO_ADDR
42578: GO 42833
42580: LD_INT 36
42582: DOUBLE
42583: EQUAL
42584: IFTRUE 42588
42586: GO 42644
42588: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42589: LD_ADDR_VAR 0 9
42593: PUSH
42594: LD_VAR 0 47
42598: PUSH
42599: LD_VAR 0 48
42603: PUSH
42604: LD_VAR 0 49
42608: PUSH
42609: LD_VAR 0 50
42613: PUSH
42614: LD_VAR 0 51
42618: PUSH
42619: LD_VAR 0 52
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: PUSH
42632: LD_VAR 0 4
42636: PUSH
42637: LD_INT 1
42639: PLUS
42640: ARRAY
42641: ST_TO_ADDR
42642: GO 42833
42644: LD_INT 4
42646: DOUBLE
42647: EQUAL
42648: IFTRUE 42670
42650: LD_INT 5
42652: DOUBLE
42653: EQUAL
42654: IFTRUE 42670
42656: LD_INT 34
42658: DOUBLE
42659: EQUAL
42660: IFTRUE 42670
42662: LD_INT 37
42664: DOUBLE
42665: EQUAL
42666: IFTRUE 42670
42668: GO 42726
42670: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42671: LD_ADDR_VAR 0 9
42675: PUSH
42676: LD_VAR 0 53
42680: PUSH
42681: LD_VAR 0 54
42685: PUSH
42686: LD_VAR 0 55
42690: PUSH
42691: LD_VAR 0 56
42695: PUSH
42696: LD_VAR 0 57
42700: PUSH
42701: LD_VAR 0 58
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: PUSH
42714: LD_VAR 0 4
42718: PUSH
42719: LD_INT 1
42721: PLUS
42722: ARRAY
42723: ST_TO_ADDR
42724: GO 42833
42726: LD_INT 31
42728: DOUBLE
42729: EQUAL
42730: IFTRUE 42776
42732: LD_INT 32
42734: DOUBLE
42735: EQUAL
42736: IFTRUE 42776
42738: LD_INT 33
42740: DOUBLE
42741: EQUAL
42742: IFTRUE 42776
42744: LD_INT 27
42746: DOUBLE
42747: EQUAL
42748: IFTRUE 42776
42750: LD_INT 26
42752: DOUBLE
42753: EQUAL
42754: IFTRUE 42776
42756: LD_INT 28
42758: DOUBLE
42759: EQUAL
42760: IFTRUE 42776
42762: LD_INT 29
42764: DOUBLE
42765: EQUAL
42766: IFTRUE 42776
42768: LD_INT 30
42770: DOUBLE
42771: EQUAL
42772: IFTRUE 42776
42774: GO 42832
42776: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
42777: LD_ADDR_VAR 0 9
42781: PUSH
42782: LD_VAR 0 59
42786: PUSH
42787: LD_VAR 0 60
42791: PUSH
42792: LD_VAR 0 61
42796: PUSH
42797: LD_VAR 0 62
42801: PUSH
42802: LD_VAR 0 63
42806: PUSH
42807: LD_VAR 0 64
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: PUSH
42820: LD_VAR 0 4
42824: PUSH
42825: LD_INT 1
42827: PLUS
42828: ARRAY
42829: ST_TO_ADDR
42830: GO 42833
42832: POP
// temp_list2 = [ ] ;
42833: LD_ADDR_VAR 0 10
42837: PUSH
42838: EMPTY
42839: ST_TO_ADDR
// for i in temp_list do
42840: LD_ADDR_VAR 0 8
42844: PUSH
42845: LD_VAR 0 9
42849: PUSH
42850: FOR_IN
42851: IFFALSE 42903
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
42853: LD_ADDR_VAR 0 10
42857: PUSH
42858: LD_VAR 0 10
42862: PUSH
42863: LD_VAR 0 8
42867: PUSH
42868: LD_INT 1
42870: ARRAY
42871: PUSH
42872: LD_VAR 0 2
42876: PLUS
42877: PUSH
42878: LD_VAR 0 8
42882: PUSH
42883: LD_INT 2
42885: ARRAY
42886: PUSH
42887: LD_VAR 0 3
42891: PLUS
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: EMPTY
42898: LIST
42899: ADD
42900: ST_TO_ADDR
42901: GO 42850
42903: POP
42904: POP
// result = temp_list2 ;
42905: LD_ADDR_VAR 0 7
42909: PUSH
42910: LD_VAR 0 10
42914: ST_TO_ADDR
// end ;
42915: LD_VAR 0 7
42919: RET
// export function EnemyInRange ( unit , dist ) ; begin
42920: LD_INT 0
42922: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
42923: LD_ADDR_VAR 0 3
42927: PUSH
42928: LD_VAR 0 1
42932: PPUSH
42933: CALL_OW 255
42937: PPUSH
42938: LD_VAR 0 1
42942: PPUSH
42943: CALL_OW 250
42947: PPUSH
42948: LD_VAR 0 1
42952: PPUSH
42953: CALL_OW 251
42957: PPUSH
42958: LD_VAR 0 2
42962: PPUSH
42963: CALL 17024 0 4
42967: PUSH
42968: LD_INT 4
42970: ARRAY
42971: ST_TO_ADDR
// end ;
42972: LD_VAR 0 3
42976: RET
// export function PlayerSeeMe ( unit ) ; begin
42977: LD_INT 0
42979: PPUSH
// result := See ( your_side , unit ) ;
42980: LD_ADDR_VAR 0 2
42984: PUSH
42985: LD_OWVAR 2
42989: PPUSH
42990: LD_VAR 0 1
42994: PPUSH
42995: CALL_OW 292
42999: ST_TO_ADDR
// end ;
43000: LD_VAR 0 2
43004: RET
// export function ReverseDir ( unit ) ; begin
43005: LD_INT 0
43007: PPUSH
// if not unit then
43008: LD_VAR 0 1
43012: NOT
43013: IFFALSE 43017
// exit ;
43015: GO 43040
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43017: LD_ADDR_VAR 0 2
43021: PUSH
43022: LD_VAR 0 1
43026: PPUSH
43027: CALL_OW 254
43031: PUSH
43032: LD_INT 3
43034: PLUS
43035: PUSH
43036: LD_INT 6
43038: MOD
43039: ST_TO_ADDR
// end ;
43040: LD_VAR 0 2
43044: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
43045: LD_INT 0
43047: PPUSH
43048: PPUSH
43049: PPUSH
43050: PPUSH
43051: PPUSH
// if not hexes then
43052: LD_VAR 0 2
43056: NOT
43057: IFFALSE 43061
// exit ;
43059: GO 43209
// dist := 9999 ;
43061: LD_ADDR_VAR 0 5
43065: PUSH
43066: LD_INT 9999
43068: ST_TO_ADDR
// for i = 1 to hexes do
43069: LD_ADDR_VAR 0 4
43073: PUSH
43074: DOUBLE
43075: LD_INT 1
43077: DEC
43078: ST_TO_ADDR
43079: LD_VAR 0 2
43083: PUSH
43084: FOR_TO
43085: IFFALSE 43197
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
43087: LD_VAR 0 1
43091: PPUSH
43092: LD_VAR 0 2
43096: PUSH
43097: LD_VAR 0 4
43101: ARRAY
43102: PUSH
43103: LD_INT 1
43105: ARRAY
43106: PPUSH
43107: LD_VAR 0 2
43111: PUSH
43112: LD_VAR 0 4
43116: ARRAY
43117: PUSH
43118: LD_INT 2
43120: ARRAY
43121: PPUSH
43122: CALL_OW 297
43126: PUSH
43127: LD_VAR 0 5
43131: LESS
43132: IFFALSE 43195
// begin hex := hexes [ i ] ;
43134: LD_ADDR_VAR 0 7
43138: PUSH
43139: LD_VAR 0 2
43143: PUSH
43144: LD_VAR 0 4
43148: ARRAY
43149: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43150: LD_ADDR_VAR 0 5
43154: PUSH
43155: LD_VAR 0 1
43159: PPUSH
43160: LD_VAR 0 2
43164: PUSH
43165: LD_VAR 0 4
43169: ARRAY
43170: PUSH
43171: LD_INT 1
43173: ARRAY
43174: PPUSH
43175: LD_VAR 0 2
43179: PUSH
43180: LD_VAR 0 4
43184: ARRAY
43185: PUSH
43186: LD_INT 2
43188: ARRAY
43189: PPUSH
43190: CALL_OW 297
43194: ST_TO_ADDR
// end ; end ;
43195: GO 43084
43197: POP
43198: POP
// result := hex ;
43199: LD_ADDR_VAR 0 3
43203: PUSH
43204: LD_VAR 0 7
43208: ST_TO_ADDR
// end ;
43209: LD_VAR 0 3
43213: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43214: LD_INT 0
43216: PPUSH
43217: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43218: LD_VAR 0 1
43222: NOT
43223: PUSH
43224: LD_VAR 0 1
43228: PUSH
43229: LD_INT 21
43231: PUSH
43232: LD_INT 2
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 23
43241: PUSH
43242: LD_INT 2
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PPUSH
43253: CALL_OW 69
43257: IN
43258: NOT
43259: OR
43260: IFFALSE 43264
// exit ;
43262: GO 43311
// for i = 1 to 3 do
43264: LD_ADDR_VAR 0 3
43268: PUSH
43269: DOUBLE
43270: LD_INT 1
43272: DEC
43273: ST_TO_ADDR
43274: LD_INT 3
43276: PUSH
43277: FOR_TO
43278: IFFALSE 43309
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43280: LD_VAR 0 1
43284: PPUSH
43285: CALL_OW 250
43289: PPUSH
43290: LD_VAR 0 1
43294: PPUSH
43295: CALL_OW 251
43299: PPUSH
43300: LD_INT 1
43302: PPUSH
43303: CALL_OW 453
43307: GO 43277
43309: POP
43310: POP
// end ;
43311: LD_VAR 0 2
43315: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43316: LD_INT 0
43318: PPUSH
43319: PPUSH
43320: PPUSH
43321: PPUSH
43322: PPUSH
43323: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
43324: LD_VAR 0 1
43328: NOT
43329: PUSH
43330: LD_VAR 0 2
43334: NOT
43335: OR
43336: PUSH
43337: LD_VAR 0 1
43341: PPUSH
43342: CALL_OW 314
43346: OR
43347: IFFALSE 43351
// exit ;
43349: GO 43792
// x := GetX ( enemy_unit ) ;
43351: LD_ADDR_VAR 0 7
43355: PUSH
43356: LD_VAR 0 2
43360: PPUSH
43361: CALL_OW 250
43365: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43366: LD_ADDR_VAR 0 8
43370: PUSH
43371: LD_VAR 0 2
43375: PPUSH
43376: CALL_OW 251
43380: ST_TO_ADDR
// if not x or not y then
43381: LD_VAR 0 7
43385: NOT
43386: PUSH
43387: LD_VAR 0 8
43391: NOT
43392: OR
43393: IFFALSE 43397
// exit ;
43395: GO 43792
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43397: LD_ADDR_VAR 0 6
43401: PUSH
43402: LD_VAR 0 7
43406: PPUSH
43407: LD_INT 0
43409: PPUSH
43410: LD_INT 4
43412: PPUSH
43413: CALL_OW 272
43417: PUSH
43418: LD_VAR 0 8
43422: PPUSH
43423: LD_INT 0
43425: PPUSH
43426: LD_INT 4
43428: PPUSH
43429: CALL_OW 273
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_VAR 0 7
43442: PPUSH
43443: LD_INT 1
43445: PPUSH
43446: LD_INT 4
43448: PPUSH
43449: CALL_OW 272
43453: PUSH
43454: LD_VAR 0 8
43458: PPUSH
43459: LD_INT 1
43461: PPUSH
43462: LD_INT 4
43464: PPUSH
43465: CALL_OW 273
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_VAR 0 7
43478: PPUSH
43479: LD_INT 2
43481: PPUSH
43482: LD_INT 4
43484: PPUSH
43485: CALL_OW 272
43489: PUSH
43490: LD_VAR 0 8
43494: PPUSH
43495: LD_INT 2
43497: PPUSH
43498: LD_INT 4
43500: PPUSH
43501: CALL_OW 273
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_VAR 0 7
43514: PPUSH
43515: LD_INT 3
43517: PPUSH
43518: LD_INT 4
43520: PPUSH
43521: CALL_OW 272
43525: PUSH
43526: LD_VAR 0 8
43530: PPUSH
43531: LD_INT 3
43533: PPUSH
43534: LD_INT 4
43536: PPUSH
43537: CALL_OW 273
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_VAR 0 7
43550: PPUSH
43551: LD_INT 4
43553: PPUSH
43554: LD_INT 4
43556: PPUSH
43557: CALL_OW 272
43561: PUSH
43562: LD_VAR 0 8
43566: PPUSH
43567: LD_INT 4
43569: PPUSH
43570: LD_INT 4
43572: PPUSH
43573: CALL_OW 273
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_VAR 0 7
43586: PPUSH
43587: LD_INT 5
43589: PPUSH
43590: LD_INT 4
43592: PPUSH
43593: CALL_OW 272
43597: PUSH
43598: LD_VAR 0 8
43602: PPUSH
43603: LD_INT 5
43605: PPUSH
43606: LD_INT 4
43608: PPUSH
43609: CALL_OW 273
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: ST_TO_ADDR
// for i = tmp downto 1 do
43626: LD_ADDR_VAR 0 4
43630: PUSH
43631: DOUBLE
43632: LD_VAR 0 6
43636: INC
43637: ST_TO_ADDR
43638: LD_INT 1
43640: PUSH
43641: FOR_DOWNTO
43642: IFFALSE 43743
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43644: LD_VAR 0 6
43648: PUSH
43649: LD_VAR 0 4
43653: ARRAY
43654: PUSH
43655: LD_INT 1
43657: ARRAY
43658: PPUSH
43659: LD_VAR 0 6
43663: PUSH
43664: LD_VAR 0 4
43668: ARRAY
43669: PUSH
43670: LD_INT 2
43672: ARRAY
43673: PPUSH
43674: CALL_OW 488
43678: NOT
43679: PUSH
43680: LD_VAR 0 6
43684: PUSH
43685: LD_VAR 0 4
43689: ARRAY
43690: PUSH
43691: LD_INT 1
43693: ARRAY
43694: PPUSH
43695: LD_VAR 0 6
43699: PUSH
43700: LD_VAR 0 4
43704: ARRAY
43705: PUSH
43706: LD_INT 2
43708: ARRAY
43709: PPUSH
43710: CALL_OW 428
43714: PUSH
43715: LD_INT 0
43717: NONEQUAL
43718: OR
43719: IFFALSE 43741
// tmp := Delete ( tmp , i ) ;
43721: LD_ADDR_VAR 0 6
43725: PUSH
43726: LD_VAR 0 6
43730: PPUSH
43731: LD_VAR 0 4
43735: PPUSH
43736: CALL_OW 3
43740: ST_TO_ADDR
43741: GO 43641
43743: POP
43744: POP
// j := GetClosestHex ( unit , tmp ) ;
43745: LD_ADDR_VAR 0 5
43749: PUSH
43750: LD_VAR 0 1
43754: PPUSH
43755: LD_VAR 0 6
43759: PPUSH
43760: CALL 43045 0 2
43764: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
43765: LD_VAR 0 1
43769: PPUSH
43770: LD_VAR 0 5
43774: PUSH
43775: LD_INT 1
43777: ARRAY
43778: PPUSH
43779: LD_VAR 0 5
43783: PUSH
43784: LD_INT 2
43786: ARRAY
43787: PPUSH
43788: CALL_OW 111
// end ;
43792: LD_VAR 0 3
43796: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
43797: LD_INT 0
43799: PPUSH
43800: PPUSH
43801: PPUSH
// uc_side = 0 ;
43802: LD_ADDR_OWVAR 20
43806: PUSH
43807: LD_INT 0
43809: ST_TO_ADDR
// uc_nation = 0 ;
43810: LD_ADDR_OWVAR 21
43814: PUSH
43815: LD_INT 0
43817: ST_TO_ADDR
// InitHc ;
43818: CALL_OW 19
// InitVc ;
43822: CALL_OW 20
// if mastodonts then
43826: LD_VAR 0 6
43830: IFFALSE 43897
// for i = 1 to mastodonts do
43832: LD_ADDR_VAR 0 11
43836: PUSH
43837: DOUBLE
43838: LD_INT 1
43840: DEC
43841: ST_TO_ADDR
43842: LD_VAR 0 6
43846: PUSH
43847: FOR_TO
43848: IFFALSE 43895
// begin vc_chassis := 31 ;
43850: LD_ADDR_OWVAR 37
43854: PUSH
43855: LD_INT 31
43857: ST_TO_ADDR
// vc_control := control_rider ;
43858: LD_ADDR_OWVAR 38
43862: PUSH
43863: LD_INT 4
43865: ST_TO_ADDR
// animal := CreateVehicle ;
43866: LD_ADDR_VAR 0 12
43870: PUSH
43871: CALL_OW 45
43875: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43876: LD_VAR 0 12
43880: PPUSH
43881: LD_VAR 0 8
43885: PPUSH
43886: LD_INT 0
43888: PPUSH
43889: CALL 45966 0 3
// end ;
43893: GO 43847
43895: POP
43896: POP
// if horses then
43897: LD_VAR 0 5
43901: IFFALSE 43968
// for i = 1 to horses do
43903: LD_ADDR_VAR 0 11
43907: PUSH
43908: DOUBLE
43909: LD_INT 1
43911: DEC
43912: ST_TO_ADDR
43913: LD_VAR 0 5
43917: PUSH
43918: FOR_TO
43919: IFFALSE 43966
// begin hc_class := 21 ;
43921: LD_ADDR_OWVAR 28
43925: PUSH
43926: LD_INT 21
43928: ST_TO_ADDR
// hc_gallery :=  ;
43929: LD_ADDR_OWVAR 33
43933: PUSH
43934: LD_STRING 
43936: ST_TO_ADDR
// animal := CreateHuman ;
43937: LD_ADDR_VAR 0 12
43941: PUSH
43942: CALL_OW 44
43946: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43947: LD_VAR 0 12
43951: PPUSH
43952: LD_VAR 0 8
43956: PPUSH
43957: LD_INT 0
43959: PPUSH
43960: CALL 45966 0 3
// end ;
43964: GO 43918
43966: POP
43967: POP
// if birds then
43968: LD_VAR 0 1
43972: IFFALSE 44039
// for i = 1 to birds do
43974: LD_ADDR_VAR 0 11
43978: PUSH
43979: DOUBLE
43980: LD_INT 1
43982: DEC
43983: ST_TO_ADDR
43984: LD_VAR 0 1
43988: PUSH
43989: FOR_TO
43990: IFFALSE 44037
// begin hc_class = 18 ;
43992: LD_ADDR_OWVAR 28
43996: PUSH
43997: LD_INT 18
43999: ST_TO_ADDR
// hc_gallery =  ;
44000: LD_ADDR_OWVAR 33
44004: PUSH
44005: LD_STRING 
44007: ST_TO_ADDR
// animal := CreateHuman ;
44008: LD_ADDR_VAR 0 12
44012: PUSH
44013: CALL_OW 44
44017: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44018: LD_VAR 0 12
44022: PPUSH
44023: LD_VAR 0 8
44027: PPUSH
44028: LD_INT 0
44030: PPUSH
44031: CALL 45966 0 3
// end ;
44035: GO 43989
44037: POP
44038: POP
// if tigers then
44039: LD_VAR 0 2
44043: IFFALSE 44127
// for i = 1 to tigers do
44045: LD_ADDR_VAR 0 11
44049: PUSH
44050: DOUBLE
44051: LD_INT 1
44053: DEC
44054: ST_TO_ADDR
44055: LD_VAR 0 2
44059: PUSH
44060: FOR_TO
44061: IFFALSE 44125
// begin hc_class = class_tiger ;
44063: LD_ADDR_OWVAR 28
44067: PUSH
44068: LD_INT 14
44070: ST_TO_ADDR
// hc_gallery =  ;
44071: LD_ADDR_OWVAR 33
44075: PUSH
44076: LD_STRING 
44078: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
44079: LD_ADDR_OWVAR 35
44083: PUSH
44084: LD_INT 7
44086: NEG
44087: PPUSH
44088: LD_INT 7
44090: PPUSH
44091: CALL_OW 12
44095: ST_TO_ADDR
// animal := CreateHuman ;
44096: LD_ADDR_VAR 0 12
44100: PUSH
44101: CALL_OW 44
44105: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44106: LD_VAR 0 12
44110: PPUSH
44111: LD_VAR 0 8
44115: PPUSH
44116: LD_INT 0
44118: PPUSH
44119: CALL 45966 0 3
// end ;
44123: GO 44060
44125: POP
44126: POP
// if apemans then
44127: LD_VAR 0 3
44131: IFFALSE 44254
// for i = 1 to apemans do
44133: LD_ADDR_VAR 0 11
44137: PUSH
44138: DOUBLE
44139: LD_INT 1
44141: DEC
44142: ST_TO_ADDR
44143: LD_VAR 0 3
44147: PUSH
44148: FOR_TO
44149: IFFALSE 44252
// begin hc_class = class_apeman ;
44151: LD_ADDR_OWVAR 28
44155: PUSH
44156: LD_INT 12
44158: ST_TO_ADDR
// hc_gallery =  ;
44159: LD_ADDR_OWVAR 33
44163: PUSH
44164: LD_STRING 
44166: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
44167: LD_ADDR_OWVAR 35
44171: PUSH
44172: LD_INT 5
44174: NEG
44175: PPUSH
44176: LD_INT 5
44178: PPUSH
44179: CALL_OW 12
44183: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
44184: LD_ADDR_OWVAR 31
44188: PUSH
44189: LD_INT 1
44191: PPUSH
44192: LD_INT 3
44194: PPUSH
44195: CALL_OW 12
44199: PUSH
44200: LD_INT 1
44202: PPUSH
44203: LD_INT 3
44205: PPUSH
44206: CALL_OW 12
44210: PUSH
44211: LD_INT 0
44213: PUSH
44214: LD_INT 0
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: ST_TO_ADDR
// animal := CreateHuman ;
44223: LD_ADDR_VAR 0 12
44227: PUSH
44228: CALL_OW 44
44232: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44233: LD_VAR 0 12
44237: PPUSH
44238: LD_VAR 0 8
44242: PPUSH
44243: LD_INT 0
44245: PPUSH
44246: CALL 45966 0 3
// end ;
44250: GO 44148
44252: POP
44253: POP
// if enchidnas then
44254: LD_VAR 0 4
44258: IFFALSE 44325
// for i = 1 to enchidnas do
44260: LD_ADDR_VAR 0 11
44264: PUSH
44265: DOUBLE
44266: LD_INT 1
44268: DEC
44269: ST_TO_ADDR
44270: LD_VAR 0 4
44274: PUSH
44275: FOR_TO
44276: IFFALSE 44323
// begin hc_class = 13 ;
44278: LD_ADDR_OWVAR 28
44282: PUSH
44283: LD_INT 13
44285: ST_TO_ADDR
// hc_gallery =  ;
44286: LD_ADDR_OWVAR 33
44290: PUSH
44291: LD_STRING 
44293: ST_TO_ADDR
// animal := CreateHuman ;
44294: LD_ADDR_VAR 0 12
44298: PUSH
44299: CALL_OW 44
44303: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44304: LD_VAR 0 12
44308: PPUSH
44309: LD_VAR 0 8
44313: PPUSH
44314: LD_INT 0
44316: PPUSH
44317: CALL 45966 0 3
// end ;
44321: GO 44275
44323: POP
44324: POP
// if fishes then
44325: LD_VAR 0 7
44329: IFFALSE 44396
// for i = 1 to fishes do
44331: LD_ADDR_VAR 0 11
44335: PUSH
44336: DOUBLE
44337: LD_INT 1
44339: DEC
44340: ST_TO_ADDR
44341: LD_VAR 0 7
44345: PUSH
44346: FOR_TO
44347: IFFALSE 44394
// begin hc_class = 20 ;
44349: LD_ADDR_OWVAR 28
44353: PUSH
44354: LD_INT 20
44356: ST_TO_ADDR
// hc_gallery =  ;
44357: LD_ADDR_OWVAR 33
44361: PUSH
44362: LD_STRING 
44364: ST_TO_ADDR
// animal := CreateHuman ;
44365: LD_ADDR_VAR 0 12
44369: PUSH
44370: CALL_OW 44
44374: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
44375: LD_VAR 0 12
44379: PPUSH
44380: LD_VAR 0 9
44384: PPUSH
44385: LD_INT 0
44387: PPUSH
44388: CALL 45966 0 3
// end ;
44392: GO 44346
44394: POP
44395: POP
// end ;
44396: LD_VAR 0 10
44400: RET
// export function WantHeal ( sci , unit ) ; begin
44401: LD_INT 0
44403: PPUSH
// if GetTaskList ( sci ) > 0 then
44404: LD_VAR 0 1
44408: PPUSH
44409: CALL_OW 437
44413: PUSH
44414: LD_INT 0
44416: GREATER
44417: IFFALSE 44487
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
44419: LD_VAR 0 1
44423: PPUSH
44424: CALL_OW 437
44428: PUSH
44429: LD_INT 1
44431: ARRAY
44432: PUSH
44433: LD_INT 1
44435: ARRAY
44436: PUSH
44437: LD_STRING l
44439: EQUAL
44440: PUSH
44441: LD_VAR 0 1
44445: PPUSH
44446: CALL_OW 437
44450: PUSH
44451: LD_INT 1
44453: ARRAY
44454: PUSH
44455: LD_INT 4
44457: ARRAY
44458: PUSH
44459: LD_VAR 0 2
44463: EQUAL
44464: AND
44465: IFFALSE 44477
// result := true else
44467: LD_ADDR_VAR 0 3
44471: PUSH
44472: LD_INT 1
44474: ST_TO_ADDR
44475: GO 44485
// result := false ;
44477: LD_ADDR_VAR 0 3
44481: PUSH
44482: LD_INT 0
44484: ST_TO_ADDR
// end else
44485: GO 44495
// result := false ;
44487: LD_ADDR_VAR 0 3
44491: PUSH
44492: LD_INT 0
44494: ST_TO_ADDR
// end ;
44495: LD_VAR 0 3
44499: RET
// export function HealTarget ( sci ) ; begin
44500: LD_INT 0
44502: PPUSH
// if not sci then
44503: LD_VAR 0 1
44507: NOT
44508: IFFALSE 44512
// exit ;
44510: GO 44577
// result := 0 ;
44512: LD_ADDR_VAR 0 2
44516: PUSH
44517: LD_INT 0
44519: ST_TO_ADDR
// if GetTaskList ( sci ) then
44520: LD_VAR 0 1
44524: PPUSH
44525: CALL_OW 437
44529: IFFALSE 44577
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
44531: LD_VAR 0 1
44535: PPUSH
44536: CALL_OW 437
44540: PUSH
44541: LD_INT 1
44543: ARRAY
44544: PUSH
44545: LD_INT 1
44547: ARRAY
44548: PUSH
44549: LD_STRING l
44551: EQUAL
44552: IFFALSE 44577
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
44554: LD_ADDR_VAR 0 2
44558: PUSH
44559: LD_VAR 0 1
44563: PPUSH
44564: CALL_OW 437
44568: PUSH
44569: LD_INT 1
44571: ARRAY
44572: PUSH
44573: LD_INT 4
44575: ARRAY
44576: ST_TO_ADDR
// end ;
44577: LD_VAR 0 2
44581: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
44582: LD_INT 0
44584: PPUSH
44585: PPUSH
44586: PPUSH
44587: PPUSH
// if not base_units then
44588: LD_VAR 0 1
44592: NOT
44593: IFFALSE 44597
// exit ;
44595: GO 44684
// result := false ;
44597: LD_ADDR_VAR 0 2
44601: PUSH
44602: LD_INT 0
44604: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
44605: LD_ADDR_VAR 0 5
44609: PUSH
44610: LD_VAR 0 1
44614: PPUSH
44615: LD_INT 21
44617: PUSH
44618: LD_INT 3
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PPUSH
44625: CALL_OW 72
44629: ST_TO_ADDR
// if not tmp then
44630: LD_VAR 0 5
44634: NOT
44635: IFFALSE 44639
// exit ;
44637: GO 44684
// for i in tmp do
44639: LD_ADDR_VAR 0 3
44643: PUSH
44644: LD_VAR 0 5
44648: PUSH
44649: FOR_IN
44650: IFFALSE 44682
// begin result := EnemyInRange ( i , 22 ) ;
44652: LD_ADDR_VAR 0 2
44656: PUSH
44657: LD_VAR 0 3
44661: PPUSH
44662: LD_INT 22
44664: PPUSH
44665: CALL 42920 0 2
44669: ST_TO_ADDR
// if result then
44670: LD_VAR 0 2
44674: IFFALSE 44680
// exit ;
44676: POP
44677: POP
44678: GO 44684
// end ;
44680: GO 44649
44682: POP
44683: POP
// end ;
44684: LD_VAR 0 2
44688: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
44689: LD_INT 0
44691: PPUSH
44692: PPUSH
// if not units then
44693: LD_VAR 0 1
44697: NOT
44698: IFFALSE 44702
// exit ;
44700: GO 44772
// result := [ ] ;
44702: LD_ADDR_VAR 0 3
44706: PUSH
44707: EMPTY
44708: ST_TO_ADDR
// for i in units do
44709: LD_ADDR_VAR 0 4
44713: PUSH
44714: LD_VAR 0 1
44718: PUSH
44719: FOR_IN
44720: IFFALSE 44770
// if GetTag ( i ) = tag then
44722: LD_VAR 0 4
44726: PPUSH
44727: CALL_OW 110
44731: PUSH
44732: LD_VAR 0 2
44736: EQUAL
44737: IFFALSE 44768
// result := Insert ( result , result + 1 , i ) ;
44739: LD_ADDR_VAR 0 3
44743: PUSH
44744: LD_VAR 0 3
44748: PPUSH
44749: LD_VAR 0 3
44753: PUSH
44754: LD_INT 1
44756: PLUS
44757: PPUSH
44758: LD_VAR 0 4
44762: PPUSH
44763: CALL_OW 2
44767: ST_TO_ADDR
44768: GO 44719
44770: POP
44771: POP
// end ;
44772: LD_VAR 0 3
44776: RET
// export function IsDriver ( un ) ; begin
44777: LD_INT 0
44779: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
44780: LD_ADDR_VAR 0 2
44784: PUSH
44785: LD_VAR 0 1
44789: PUSH
44790: LD_INT 55
44792: PUSH
44793: EMPTY
44794: LIST
44795: PPUSH
44796: CALL_OW 69
44800: IN
44801: ST_TO_ADDR
// end ;
44802: LD_VAR 0 2
44806: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
44807: LD_INT 0
44809: PPUSH
44810: PPUSH
// list := [ ] ;
44811: LD_ADDR_VAR 0 5
44815: PUSH
44816: EMPTY
44817: ST_TO_ADDR
// case d of 0 :
44818: LD_VAR 0 3
44822: PUSH
44823: LD_INT 0
44825: DOUBLE
44826: EQUAL
44827: IFTRUE 44831
44829: GO 44964
44831: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
44832: LD_ADDR_VAR 0 5
44836: PUSH
44837: LD_VAR 0 1
44841: PUSH
44842: LD_INT 4
44844: MINUS
44845: PUSH
44846: LD_VAR 0 2
44850: PUSH
44851: LD_INT 4
44853: MINUS
44854: PUSH
44855: LD_INT 2
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: LIST
44862: PUSH
44863: LD_VAR 0 1
44867: PUSH
44868: LD_INT 3
44870: MINUS
44871: PUSH
44872: LD_VAR 0 2
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: LIST
44884: PUSH
44885: LD_VAR 0 1
44889: PUSH
44890: LD_INT 4
44892: PLUS
44893: PUSH
44894: LD_VAR 0 2
44898: PUSH
44899: LD_INT 4
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: LIST
44906: PUSH
44907: LD_VAR 0 1
44911: PUSH
44912: LD_INT 3
44914: PLUS
44915: PUSH
44916: LD_VAR 0 2
44920: PUSH
44921: LD_INT 3
44923: PLUS
44924: PUSH
44925: LD_INT 5
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: LIST
44932: PUSH
44933: LD_VAR 0 1
44937: PUSH
44938: LD_VAR 0 2
44942: PUSH
44943: LD_INT 4
44945: PLUS
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: LIST
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: ST_TO_ADDR
// end ; 1 :
44962: GO 45662
44964: LD_INT 1
44966: DOUBLE
44967: EQUAL
44968: IFTRUE 44972
44970: GO 45105
44972: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
44973: LD_ADDR_VAR 0 5
44977: PUSH
44978: LD_VAR 0 1
44982: PUSH
44983: LD_VAR 0 2
44987: PUSH
44988: LD_INT 4
44990: MINUS
44991: PUSH
44992: LD_INT 3
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: LIST
44999: PUSH
45000: LD_VAR 0 1
45004: PUSH
45005: LD_INT 3
45007: MINUS
45008: PUSH
45009: LD_VAR 0 2
45013: PUSH
45014: LD_INT 3
45016: MINUS
45017: PUSH
45018: LD_INT 2
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: LIST
45025: PUSH
45026: LD_VAR 0 1
45030: PUSH
45031: LD_INT 4
45033: MINUS
45034: PUSH
45035: LD_VAR 0 2
45039: PUSH
45040: LD_INT 1
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: LIST
45047: PUSH
45048: LD_VAR 0 1
45052: PUSH
45053: LD_VAR 0 2
45057: PUSH
45058: LD_INT 3
45060: PLUS
45061: PUSH
45062: LD_INT 0
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: LIST
45069: PUSH
45070: LD_VAR 0 1
45074: PUSH
45075: LD_INT 4
45077: PLUS
45078: PUSH
45079: LD_VAR 0 2
45083: PUSH
45084: LD_INT 4
45086: PLUS
45087: PUSH
45088: LD_INT 5
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: LIST
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: ST_TO_ADDR
// end ; 2 :
45103: GO 45662
45105: LD_INT 2
45107: DOUBLE
45108: EQUAL
45109: IFTRUE 45113
45111: GO 45242
45113: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
45114: LD_ADDR_VAR 0 5
45118: PUSH
45119: LD_VAR 0 1
45123: PUSH
45124: LD_VAR 0 2
45128: PUSH
45129: LD_INT 3
45131: MINUS
45132: PUSH
45133: LD_INT 3
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: LIST
45140: PUSH
45141: LD_VAR 0 1
45145: PUSH
45146: LD_INT 4
45148: PLUS
45149: PUSH
45150: LD_VAR 0 2
45154: PUSH
45155: LD_INT 4
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: LIST
45162: PUSH
45163: LD_VAR 0 1
45167: PUSH
45168: LD_VAR 0 2
45172: PUSH
45173: LD_INT 4
45175: PLUS
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: LIST
45184: PUSH
45185: LD_VAR 0 1
45189: PUSH
45190: LD_INT 3
45192: MINUS
45193: PUSH
45194: LD_VAR 0 2
45198: PUSH
45199: LD_INT 1
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: LIST
45206: PUSH
45207: LD_VAR 0 1
45211: PUSH
45212: LD_INT 4
45214: MINUS
45215: PUSH
45216: LD_VAR 0 2
45220: PUSH
45221: LD_INT 4
45223: MINUS
45224: PUSH
45225: LD_INT 2
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: LIST
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: ST_TO_ADDR
// end ; 3 :
45240: GO 45662
45242: LD_INT 3
45244: DOUBLE
45245: EQUAL
45246: IFTRUE 45250
45248: GO 45383
45250: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
45251: LD_ADDR_VAR 0 5
45255: PUSH
45256: LD_VAR 0 1
45260: PUSH
45261: LD_INT 3
45263: PLUS
45264: PUSH
45265: LD_VAR 0 2
45269: PUSH
45270: LD_INT 4
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: LIST
45277: PUSH
45278: LD_VAR 0 1
45282: PUSH
45283: LD_INT 4
45285: PLUS
45286: PUSH
45287: LD_VAR 0 2
45291: PUSH
45292: LD_INT 4
45294: PLUS
45295: PUSH
45296: LD_INT 5
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: LIST
45303: PUSH
45304: LD_VAR 0 1
45308: PUSH
45309: LD_INT 4
45311: MINUS
45312: PUSH
45313: LD_VAR 0 2
45317: PUSH
45318: LD_INT 1
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: LIST
45325: PUSH
45326: LD_VAR 0 1
45330: PUSH
45331: LD_VAR 0 2
45335: PUSH
45336: LD_INT 4
45338: MINUS
45339: PUSH
45340: LD_INT 3
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: LIST
45347: PUSH
45348: LD_VAR 0 1
45352: PUSH
45353: LD_INT 3
45355: MINUS
45356: PUSH
45357: LD_VAR 0 2
45361: PUSH
45362: LD_INT 3
45364: MINUS
45365: PUSH
45366: LD_INT 2
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: LIST
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: ST_TO_ADDR
// end ; 4 :
45381: GO 45662
45383: LD_INT 4
45385: DOUBLE
45386: EQUAL
45387: IFTRUE 45391
45389: GO 45524
45391: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
45392: LD_ADDR_VAR 0 5
45396: PUSH
45397: LD_VAR 0 1
45401: PUSH
45402: LD_VAR 0 2
45406: PUSH
45407: LD_INT 4
45409: PLUS
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: LIST
45418: PUSH
45419: LD_VAR 0 1
45423: PUSH
45424: LD_INT 3
45426: PLUS
45427: PUSH
45428: LD_VAR 0 2
45432: PUSH
45433: LD_INT 3
45435: PLUS
45436: PUSH
45437: LD_INT 5
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: LIST
45444: PUSH
45445: LD_VAR 0 1
45449: PUSH
45450: LD_INT 4
45452: PLUS
45453: PUSH
45454: LD_VAR 0 2
45458: PUSH
45459: LD_INT 4
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: LIST
45466: PUSH
45467: LD_VAR 0 1
45471: PUSH
45472: LD_VAR 0 2
45476: PUSH
45477: LD_INT 3
45479: MINUS
45480: PUSH
45481: LD_INT 3
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: LIST
45488: PUSH
45489: LD_VAR 0 1
45493: PUSH
45494: LD_INT 4
45496: MINUS
45497: PUSH
45498: LD_VAR 0 2
45502: PUSH
45503: LD_INT 4
45505: MINUS
45506: PUSH
45507: LD_INT 2
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: LIST
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: ST_TO_ADDR
// end ; 5 :
45522: GO 45662
45524: LD_INT 5
45526: DOUBLE
45527: EQUAL
45528: IFTRUE 45532
45530: GO 45661
45532: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
45533: LD_ADDR_VAR 0 5
45537: PUSH
45538: LD_VAR 0 1
45542: PUSH
45543: LD_INT 4
45545: MINUS
45546: PUSH
45547: LD_VAR 0 2
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: LIST
45559: PUSH
45560: LD_VAR 0 1
45564: PUSH
45565: LD_VAR 0 2
45569: PUSH
45570: LD_INT 4
45572: MINUS
45573: PUSH
45574: LD_INT 3
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: LIST
45581: PUSH
45582: LD_VAR 0 1
45586: PUSH
45587: LD_INT 4
45589: PLUS
45590: PUSH
45591: LD_VAR 0 2
45595: PUSH
45596: LD_INT 4
45598: PLUS
45599: PUSH
45600: LD_INT 5
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: LIST
45607: PUSH
45608: LD_VAR 0 1
45612: PUSH
45613: LD_INT 3
45615: PLUS
45616: PUSH
45617: LD_VAR 0 2
45621: PUSH
45622: LD_INT 4
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: LIST
45629: PUSH
45630: LD_VAR 0 1
45634: PUSH
45635: LD_VAR 0 2
45639: PUSH
45640: LD_INT 3
45642: PLUS
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: LIST
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: ST_TO_ADDR
// end ; end ;
45659: GO 45662
45661: POP
// result := list ;
45662: LD_ADDR_VAR 0 4
45666: PUSH
45667: LD_VAR 0 5
45671: ST_TO_ADDR
// end ;
45672: LD_VAR 0 4
45676: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
45677: LD_INT 0
45679: PPUSH
45680: PPUSH
45681: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
45682: LD_VAR 0 1
45686: NOT
45687: PUSH
45688: LD_VAR 0 2
45692: PUSH
45693: LD_INT 1
45695: PUSH
45696: LD_INT 2
45698: PUSH
45699: LD_INT 3
45701: PUSH
45702: LD_INT 4
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: IN
45711: NOT
45712: OR
45713: IFFALSE 45717
// exit ;
45715: GO 45809
// tmp := [ ] ;
45717: LD_ADDR_VAR 0 5
45721: PUSH
45722: EMPTY
45723: ST_TO_ADDR
// for i in units do
45724: LD_ADDR_VAR 0 4
45728: PUSH
45729: LD_VAR 0 1
45733: PUSH
45734: FOR_IN
45735: IFFALSE 45778
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
45737: LD_ADDR_VAR 0 5
45741: PUSH
45742: LD_VAR 0 5
45746: PPUSH
45747: LD_VAR 0 5
45751: PUSH
45752: LD_INT 1
45754: PLUS
45755: PPUSH
45756: LD_VAR 0 4
45760: PPUSH
45761: LD_VAR 0 2
45765: PPUSH
45766: CALL_OW 259
45770: PPUSH
45771: CALL_OW 2
45775: ST_TO_ADDR
45776: GO 45734
45778: POP
45779: POP
// if not tmp then
45780: LD_VAR 0 5
45784: NOT
45785: IFFALSE 45789
// exit ;
45787: GO 45809
// result := SortListByListDesc ( units , tmp ) ;
45789: LD_ADDR_VAR 0 3
45793: PUSH
45794: LD_VAR 0 1
45798: PPUSH
45799: LD_VAR 0 5
45803: PPUSH
45804: CALL_OW 77
45808: ST_TO_ADDR
// end ;
45809: LD_VAR 0 3
45813: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
45814: LD_INT 0
45816: PPUSH
45817: PPUSH
45818: PPUSH
// x := GetX ( building ) ;
45819: LD_ADDR_VAR 0 4
45823: PUSH
45824: LD_VAR 0 2
45828: PPUSH
45829: CALL_OW 250
45833: ST_TO_ADDR
// y := GetY ( building ) ;
45834: LD_ADDR_VAR 0 5
45838: PUSH
45839: LD_VAR 0 2
45843: PPUSH
45844: CALL_OW 251
45848: ST_TO_ADDR
// if GetTaskList ( unit ) then
45849: LD_VAR 0 1
45853: PPUSH
45854: CALL_OW 437
45858: IFFALSE 45953
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45860: LD_STRING e
45862: PUSH
45863: LD_VAR 0 1
45867: PPUSH
45868: CALL_OW 437
45872: PUSH
45873: LD_INT 1
45875: ARRAY
45876: PUSH
45877: LD_INT 1
45879: ARRAY
45880: EQUAL
45881: PUSH
45882: LD_VAR 0 4
45886: PUSH
45887: LD_VAR 0 1
45891: PPUSH
45892: CALL_OW 437
45896: PUSH
45897: LD_INT 1
45899: ARRAY
45900: PUSH
45901: LD_INT 2
45903: ARRAY
45904: EQUAL
45905: AND
45906: PUSH
45907: LD_VAR 0 5
45911: PUSH
45912: LD_VAR 0 1
45916: PPUSH
45917: CALL_OW 437
45921: PUSH
45922: LD_INT 1
45924: ARRAY
45925: PUSH
45926: LD_INT 3
45928: ARRAY
45929: EQUAL
45930: AND
45931: IFFALSE 45943
// result := true else
45933: LD_ADDR_VAR 0 3
45937: PUSH
45938: LD_INT 1
45940: ST_TO_ADDR
45941: GO 45951
// result := false ;
45943: LD_ADDR_VAR 0 3
45947: PUSH
45948: LD_INT 0
45950: ST_TO_ADDR
// end else
45951: GO 45961
// result := false ;
45953: LD_ADDR_VAR 0 3
45957: PUSH
45958: LD_INT 0
45960: ST_TO_ADDR
// end ;
45961: LD_VAR 0 3
45965: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
45966: LD_INT 0
45968: PPUSH
45969: PPUSH
45970: PPUSH
45971: PPUSH
// if not unit or not area then
45972: LD_VAR 0 1
45976: NOT
45977: PUSH
45978: LD_VAR 0 2
45982: NOT
45983: OR
45984: IFFALSE 45988
// exit ;
45986: GO 46152
// tmp := AreaToList ( area , i ) ;
45988: LD_ADDR_VAR 0 6
45992: PUSH
45993: LD_VAR 0 2
45997: PPUSH
45998: LD_VAR 0 5
46002: PPUSH
46003: CALL_OW 517
46007: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
46008: LD_ADDR_VAR 0 5
46012: PUSH
46013: DOUBLE
46014: LD_INT 1
46016: DEC
46017: ST_TO_ADDR
46018: LD_VAR 0 6
46022: PUSH
46023: LD_INT 1
46025: ARRAY
46026: PUSH
46027: FOR_TO
46028: IFFALSE 46150
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
46030: LD_ADDR_VAR 0 7
46034: PUSH
46035: LD_VAR 0 6
46039: PUSH
46040: LD_INT 1
46042: ARRAY
46043: PUSH
46044: LD_VAR 0 5
46048: ARRAY
46049: PUSH
46050: LD_VAR 0 6
46054: PUSH
46055: LD_INT 2
46057: ARRAY
46058: PUSH
46059: LD_VAR 0 5
46063: ARRAY
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
46069: LD_VAR 0 7
46073: PUSH
46074: LD_INT 1
46076: ARRAY
46077: PPUSH
46078: LD_VAR 0 7
46082: PUSH
46083: LD_INT 2
46085: ARRAY
46086: PPUSH
46087: CALL_OW 428
46091: PUSH
46092: LD_INT 0
46094: EQUAL
46095: IFFALSE 46148
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
46097: LD_VAR 0 1
46101: PPUSH
46102: LD_VAR 0 7
46106: PUSH
46107: LD_INT 1
46109: ARRAY
46110: PPUSH
46111: LD_VAR 0 7
46115: PUSH
46116: LD_INT 2
46118: ARRAY
46119: PPUSH
46120: LD_VAR 0 3
46124: PPUSH
46125: CALL_OW 48
// result := IsPlaced ( unit ) ;
46129: LD_ADDR_VAR 0 4
46133: PUSH
46134: LD_VAR 0 1
46138: PPUSH
46139: CALL_OW 305
46143: ST_TO_ADDR
// exit ;
46144: POP
46145: POP
46146: GO 46152
// end ; end ;
46148: GO 46027
46150: POP
46151: POP
// end ;
46152: LD_VAR 0 4
46156: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
46157: LD_INT 0
46159: PPUSH
46160: PPUSH
46161: PPUSH
// if not side or side > 8 then
46162: LD_VAR 0 1
46166: NOT
46167: PUSH
46168: LD_VAR 0 1
46172: PUSH
46173: LD_INT 8
46175: GREATER
46176: OR
46177: IFFALSE 46181
// exit ;
46179: GO 46368
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
46181: LD_ADDR_VAR 0 4
46185: PUSH
46186: LD_INT 22
46188: PUSH
46189: LD_VAR 0 1
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 21
46200: PUSH
46201: LD_INT 3
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PPUSH
46212: CALL_OW 69
46216: ST_TO_ADDR
// if not tmp then
46217: LD_VAR 0 4
46221: NOT
46222: IFFALSE 46226
// exit ;
46224: GO 46368
// enable_addtolog := true ;
46226: LD_ADDR_OWVAR 81
46230: PUSH
46231: LD_INT 1
46233: ST_TO_ADDR
// AddToLog ( [ ) ;
46234: LD_STRING [
46236: PPUSH
46237: CALL_OW 561
// for i in tmp do
46241: LD_ADDR_VAR 0 3
46245: PUSH
46246: LD_VAR 0 4
46250: PUSH
46251: FOR_IN
46252: IFFALSE 46359
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
46254: LD_STRING [
46256: PUSH
46257: LD_VAR 0 3
46261: PPUSH
46262: CALL_OW 266
46266: STR
46267: PUSH
46268: LD_STRING , 
46270: STR
46271: PUSH
46272: LD_VAR 0 3
46276: PPUSH
46277: CALL_OW 250
46281: STR
46282: PUSH
46283: LD_STRING , 
46285: STR
46286: PUSH
46287: LD_VAR 0 3
46291: PPUSH
46292: CALL_OW 251
46296: STR
46297: PUSH
46298: LD_STRING , 
46300: STR
46301: PUSH
46302: LD_VAR 0 3
46306: PPUSH
46307: CALL_OW 254
46311: STR
46312: PUSH
46313: LD_STRING , 
46315: STR
46316: PUSH
46317: LD_VAR 0 3
46321: PPUSH
46322: LD_INT 1
46324: PPUSH
46325: CALL_OW 268
46329: STR
46330: PUSH
46331: LD_STRING , 
46333: STR
46334: PUSH
46335: LD_VAR 0 3
46339: PPUSH
46340: LD_INT 2
46342: PPUSH
46343: CALL_OW 268
46347: STR
46348: PUSH
46349: LD_STRING ],
46351: STR
46352: PPUSH
46353: CALL_OW 561
// end ;
46357: GO 46251
46359: POP
46360: POP
// AddToLog ( ]; ) ;
46361: LD_STRING ];
46363: PPUSH
46364: CALL_OW 561
// end ;
46368: LD_VAR 0 2
46372: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
46373: LD_INT 0
46375: PPUSH
46376: PPUSH
46377: PPUSH
46378: PPUSH
46379: PPUSH
// if not area or not rate or not max then
46380: LD_VAR 0 1
46384: NOT
46385: PUSH
46386: LD_VAR 0 2
46390: NOT
46391: OR
46392: PUSH
46393: LD_VAR 0 4
46397: NOT
46398: OR
46399: IFFALSE 46403
// exit ;
46401: GO 46595
// while 1 do
46403: LD_INT 1
46405: IFFALSE 46595
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
46407: LD_ADDR_VAR 0 9
46411: PUSH
46412: LD_VAR 0 1
46416: PPUSH
46417: LD_INT 1
46419: PPUSH
46420: CALL_OW 287
46424: PUSH
46425: LD_INT 10
46427: MUL
46428: ST_TO_ADDR
// r := rate / 10 ;
46429: LD_ADDR_VAR 0 7
46433: PUSH
46434: LD_VAR 0 2
46438: PUSH
46439: LD_INT 10
46441: DIVREAL
46442: ST_TO_ADDR
// time := 1 1$00 ;
46443: LD_ADDR_VAR 0 8
46447: PUSH
46448: LD_INT 2100
46450: ST_TO_ADDR
// if amount < min then
46451: LD_VAR 0 9
46455: PUSH
46456: LD_VAR 0 3
46460: LESS
46461: IFFALSE 46479
// r := r * 2 else
46463: LD_ADDR_VAR 0 7
46467: PUSH
46468: LD_VAR 0 7
46472: PUSH
46473: LD_INT 2
46475: MUL
46476: ST_TO_ADDR
46477: GO 46505
// if amount > max then
46479: LD_VAR 0 9
46483: PUSH
46484: LD_VAR 0 4
46488: GREATER
46489: IFFALSE 46505
// r := r / 2 ;
46491: LD_ADDR_VAR 0 7
46495: PUSH
46496: LD_VAR 0 7
46500: PUSH
46501: LD_INT 2
46503: DIVREAL
46504: ST_TO_ADDR
// time := time / r ;
46505: LD_ADDR_VAR 0 8
46509: PUSH
46510: LD_VAR 0 8
46514: PUSH
46515: LD_VAR 0 7
46519: DIVREAL
46520: ST_TO_ADDR
// if time < 0 then
46521: LD_VAR 0 8
46525: PUSH
46526: LD_INT 0
46528: LESS
46529: IFFALSE 46546
// time := time * - 1 ;
46531: LD_ADDR_VAR 0 8
46535: PUSH
46536: LD_VAR 0 8
46540: PUSH
46541: LD_INT 1
46543: NEG
46544: MUL
46545: ST_TO_ADDR
// wait ( time ) ;
46546: LD_VAR 0 8
46550: PPUSH
46551: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
46555: LD_INT 35
46557: PPUSH
46558: LD_INT 875
46560: PPUSH
46561: CALL_OW 12
46565: PPUSH
46566: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
46570: LD_INT 1
46572: PPUSH
46573: LD_INT 5
46575: PPUSH
46576: CALL_OW 12
46580: PPUSH
46581: LD_VAR 0 1
46585: PPUSH
46586: LD_INT 1
46588: PPUSH
46589: CALL_OW 55
// end ;
46593: GO 46403
// end ;
46595: LD_VAR 0 5
46599: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
46600: LD_INT 0
46602: PPUSH
46603: PPUSH
46604: PPUSH
46605: PPUSH
46606: PPUSH
46607: PPUSH
46608: PPUSH
46609: PPUSH
// if not turrets or not factories then
46610: LD_VAR 0 1
46614: NOT
46615: PUSH
46616: LD_VAR 0 2
46620: NOT
46621: OR
46622: IFFALSE 46626
// exit ;
46624: GO 46933
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
46626: LD_ADDR_VAR 0 10
46630: PUSH
46631: LD_INT 5
46633: PUSH
46634: LD_INT 6
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 2
46643: PUSH
46644: LD_INT 4
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 3
46653: PUSH
46654: LD_INT 5
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 24
46668: PUSH
46669: LD_INT 25
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 23
46678: PUSH
46679: LD_INT 27
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 42
46692: PUSH
46693: LD_INT 43
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 44
46702: PUSH
46703: LD_INT 46
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 45
46712: PUSH
46713: LD_INT 47
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: LIST
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: LIST
46729: ST_TO_ADDR
// result := [ ] ;
46730: LD_ADDR_VAR 0 3
46734: PUSH
46735: EMPTY
46736: ST_TO_ADDR
// for i in turrets do
46737: LD_ADDR_VAR 0 4
46741: PUSH
46742: LD_VAR 0 1
46746: PUSH
46747: FOR_IN
46748: IFFALSE 46931
// begin nat := GetNation ( i ) ;
46750: LD_ADDR_VAR 0 7
46754: PUSH
46755: LD_VAR 0 4
46759: PPUSH
46760: CALL_OW 248
46764: ST_TO_ADDR
// weapon := 0 ;
46765: LD_ADDR_VAR 0 8
46769: PUSH
46770: LD_INT 0
46772: ST_TO_ADDR
// if not nat then
46773: LD_VAR 0 7
46777: NOT
46778: IFFALSE 46782
// continue ;
46780: GO 46747
// for j in list [ nat ] do
46782: LD_ADDR_VAR 0 5
46786: PUSH
46787: LD_VAR 0 10
46791: PUSH
46792: LD_VAR 0 7
46796: ARRAY
46797: PUSH
46798: FOR_IN
46799: IFFALSE 46840
// if GetBWeapon ( i ) = j [ 1 ] then
46801: LD_VAR 0 4
46805: PPUSH
46806: CALL_OW 269
46810: PUSH
46811: LD_VAR 0 5
46815: PUSH
46816: LD_INT 1
46818: ARRAY
46819: EQUAL
46820: IFFALSE 46838
// begin weapon := j [ 2 ] ;
46822: LD_ADDR_VAR 0 8
46826: PUSH
46827: LD_VAR 0 5
46831: PUSH
46832: LD_INT 2
46834: ARRAY
46835: ST_TO_ADDR
// break ;
46836: GO 46840
// end ;
46838: GO 46798
46840: POP
46841: POP
// if not weapon then
46842: LD_VAR 0 8
46846: NOT
46847: IFFALSE 46851
// continue ;
46849: GO 46747
// for k in factories do
46851: LD_ADDR_VAR 0 6
46855: PUSH
46856: LD_VAR 0 2
46860: PUSH
46861: FOR_IN
46862: IFFALSE 46927
// begin weapons := AvailableWeaponList ( k ) ;
46864: LD_ADDR_VAR 0 9
46868: PUSH
46869: LD_VAR 0 6
46873: PPUSH
46874: CALL_OW 478
46878: ST_TO_ADDR
// if not weapons then
46879: LD_VAR 0 9
46883: NOT
46884: IFFALSE 46888
// continue ;
46886: GO 46861
// if weapon in weapons then
46888: LD_VAR 0 8
46892: PUSH
46893: LD_VAR 0 9
46897: IN
46898: IFFALSE 46925
// begin result := [ i , weapon ] ;
46900: LD_ADDR_VAR 0 3
46904: PUSH
46905: LD_VAR 0 4
46909: PUSH
46910: LD_VAR 0 8
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: ST_TO_ADDR
// exit ;
46919: POP
46920: POP
46921: POP
46922: POP
46923: GO 46933
// end ; end ;
46925: GO 46861
46927: POP
46928: POP
// end ;
46929: GO 46747
46931: POP
46932: POP
// end ;
46933: LD_VAR 0 3
46937: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
46938: LD_INT 0
46940: PPUSH
// if not side or side > 8 then
46941: LD_VAR 0 3
46945: NOT
46946: PUSH
46947: LD_VAR 0 3
46951: PUSH
46952: LD_INT 8
46954: GREATER
46955: OR
46956: IFFALSE 46960
// exit ;
46958: GO 47019
// if not range then
46960: LD_VAR 0 4
46964: NOT
46965: IFFALSE 46976
// range := - 12 ;
46967: LD_ADDR_VAR 0 4
46971: PUSH
46972: LD_INT 12
46974: NEG
46975: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
46976: LD_VAR 0 1
46980: PPUSH
46981: LD_VAR 0 2
46985: PPUSH
46986: LD_VAR 0 3
46990: PPUSH
46991: LD_VAR 0 4
46995: PPUSH
46996: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
47000: LD_VAR 0 1
47004: PPUSH
47005: LD_VAR 0 2
47009: PPUSH
47010: LD_VAR 0 3
47014: PPUSH
47015: CALL_OW 331
// end ;
47019: LD_VAR 0 5
47023: RET
// export function Video ( mode ) ; begin
47024: LD_INT 0
47026: PPUSH
// ingame_video = mode ;
47027: LD_ADDR_OWVAR 52
47031: PUSH
47032: LD_VAR 0 1
47036: ST_TO_ADDR
// interface_hidden = mode ;
47037: LD_ADDR_OWVAR 54
47041: PUSH
47042: LD_VAR 0 1
47046: ST_TO_ADDR
// end ;
47047: LD_VAR 0 2
47051: RET
// export function Join ( array , element ) ; begin
47052: LD_INT 0
47054: PPUSH
// result := array ^ element ;
47055: LD_ADDR_VAR 0 3
47059: PUSH
47060: LD_VAR 0 1
47064: PUSH
47065: LD_VAR 0 2
47069: ADD
47070: ST_TO_ADDR
// end ;
47071: LD_VAR 0 3
47075: RET
// export function JoinUnion ( array , element ) ; begin
47076: LD_INT 0
47078: PPUSH
// result := array union element ;
47079: LD_ADDR_VAR 0 3
47083: PUSH
47084: LD_VAR 0 1
47088: PUSH
47089: LD_VAR 0 2
47093: UNION
47094: ST_TO_ADDR
// end ;
47095: LD_VAR 0 3
47099: RET
// export function GetBehemoths ( side ) ; begin
47100: LD_INT 0
47102: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
47103: LD_ADDR_VAR 0 2
47107: PUSH
47108: LD_INT 22
47110: PUSH
47111: LD_VAR 0 1
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 31
47122: PUSH
47123: LD_INT 25
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PPUSH
47134: CALL_OW 69
47138: ST_TO_ADDR
// end ;
47139: LD_VAR 0 2
47143: RET
// export function Shuffle ( array ) ; var i , index ; begin
47144: LD_INT 0
47146: PPUSH
47147: PPUSH
47148: PPUSH
// result := [ ] ;
47149: LD_ADDR_VAR 0 2
47153: PUSH
47154: EMPTY
47155: ST_TO_ADDR
// if not array then
47156: LD_VAR 0 1
47160: NOT
47161: IFFALSE 47165
// exit ;
47163: GO 47264
// Randomize ;
47165: CALL_OW 10
// for i = array downto 1 do
47169: LD_ADDR_VAR 0 3
47173: PUSH
47174: DOUBLE
47175: LD_VAR 0 1
47179: INC
47180: ST_TO_ADDR
47181: LD_INT 1
47183: PUSH
47184: FOR_DOWNTO
47185: IFFALSE 47262
// begin index := rand ( 1 , array ) ;
47187: LD_ADDR_VAR 0 4
47191: PUSH
47192: LD_INT 1
47194: PPUSH
47195: LD_VAR 0 1
47199: PPUSH
47200: CALL_OW 12
47204: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
47205: LD_ADDR_VAR 0 2
47209: PUSH
47210: LD_VAR 0 2
47214: PPUSH
47215: LD_VAR 0 2
47219: PUSH
47220: LD_INT 1
47222: PLUS
47223: PPUSH
47224: LD_VAR 0 1
47228: PUSH
47229: LD_VAR 0 4
47233: ARRAY
47234: PPUSH
47235: CALL_OW 2
47239: ST_TO_ADDR
// array := Delete ( array , index ) ;
47240: LD_ADDR_VAR 0 1
47244: PUSH
47245: LD_VAR 0 1
47249: PPUSH
47250: LD_VAR 0 4
47254: PPUSH
47255: CALL_OW 3
47259: ST_TO_ADDR
// end ;
47260: GO 47184
47262: POP
47263: POP
// end ;
47264: LD_VAR 0 2
47268: RET
// export function GetBaseMaterials ( base ) ; begin
47269: LD_INT 0
47271: PPUSH
// result := [ 0 , 0 , 0 ] ;
47272: LD_ADDR_VAR 0 2
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: LIST
47290: ST_TO_ADDR
// if not base then
47291: LD_VAR 0 1
47295: NOT
47296: IFFALSE 47300
// exit ;
47298: GO 47349
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
47300: LD_ADDR_VAR 0 2
47304: PUSH
47305: LD_VAR 0 1
47309: PPUSH
47310: LD_INT 1
47312: PPUSH
47313: CALL_OW 275
47317: PUSH
47318: LD_VAR 0 1
47322: PPUSH
47323: LD_INT 2
47325: PPUSH
47326: CALL_OW 275
47330: PUSH
47331: LD_VAR 0 1
47335: PPUSH
47336: LD_INT 3
47338: PPUSH
47339: CALL_OW 275
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: LIST
47348: ST_TO_ADDR
// end ;
47349: LD_VAR 0 2
47353: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
47354: LD_INT 0
47356: PPUSH
47357: PPUSH
// result := array ;
47358: LD_ADDR_VAR 0 3
47362: PUSH
47363: LD_VAR 0 1
47367: ST_TO_ADDR
// if size > 0 then
47368: LD_VAR 0 2
47372: PUSH
47373: LD_INT 0
47375: GREATER
47376: IFFALSE 47422
// for i := array downto size do
47378: LD_ADDR_VAR 0 4
47382: PUSH
47383: DOUBLE
47384: LD_VAR 0 1
47388: INC
47389: ST_TO_ADDR
47390: LD_VAR 0 2
47394: PUSH
47395: FOR_DOWNTO
47396: IFFALSE 47420
// result := Delete ( result , result ) ;
47398: LD_ADDR_VAR 0 3
47402: PUSH
47403: LD_VAR 0 3
47407: PPUSH
47408: LD_VAR 0 3
47412: PPUSH
47413: CALL_OW 3
47417: ST_TO_ADDR
47418: GO 47395
47420: POP
47421: POP
// end ; end_of_file
47422: LD_VAR 0 3
47426: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
47427: GO 47429
47429: DISABLE
// begin ru_radar := 98 ;
47430: LD_ADDR_EXP 45
47434: PUSH
47435: LD_INT 98
47437: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
47438: LD_ADDR_EXP 46
47442: PUSH
47443: LD_INT 89
47445: ST_TO_ADDR
// us_hack := 99 ;
47446: LD_ADDR_EXP 47
47450: PUSH
47451: LD_INT 99
47453: ST_TO_ADDR
// us_artillery := 97 ;
47454: LD_ADDR_EXP 48
47458: PUSH
47459: LD_INT 97
47461: ST_TO_ADDR
// ar_bio_bomb := 91 ;
47462: LD_ADDR_EXP 49
47466: PUSH
47467: LD_INT 91
47469: ST_TO_ADDR
// tech_Artillery := 80 ;
47470: LD_ADDR_EXP 50
47474: PUSH
47475: LD_INT 80
47477: ST_TO_ADDR
// tech_RadMat := 81 ;
47478: LD_ADDR_EXP 51
47482: PUSH
47483: LD_INT 81
47485: ST_TO_ADDR
// tech_BasicTools := 82 ;
47486: LD_ADDR_EXP 52
47490: PUSH
47491: LD_INT 82
47493: ST_TO_ADDR
// tech_Cargo := 83 ;
47494: LD_ADDR_EXP 53
47498: PUSH
47499: LD_INT 83
47501: ST_TO_ADDR
// tech_Track := 84 ;
47502: LD_ADDR_EXP 54
47506: PUSH
47507: LD_INT 84
47509: ST_TO_ADDR
// tech_Crane := 85 ;
47510: LD_ADDR_EXP 55
47514: PUSH
47515: LD_INT 85
47517: ST_TO_ADDR
// tech_Bulldozer := 86 ;
47518: LD_ADDR_EXP 56
47522: PUSH
47523: LD_INT 86
47525: ST_TO_ADDR
// tech_Hovercraft := 87 ;
47526: LD_ADDR_EXP 57
47530: PUSH
47531: LD_INT 87
47533: ST_TO_ADDR
// end ; end_of_file
47534: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
47535: LD_INT 0
47537: PPUSH
47538: PPUSH
// skirmish := false ;
47539: LD_ADDR_EXP 58
47543: PUSH
47544: LD_INT 0
47546: ST_TO_ADDR
// debug_mc := false ;
47547: LD_ADDR_EXP 59
47551: PUSH
47552: LD_INT 0
47554: ST_TO_ADDR
// mc_bases := [ ] ;
47555: LD_ADDR_EXP 60
47559: PUSH
47560: EMPTY
47561: ST_TO_ADDR
// mc_sides := [ ] ;
47562: LD_ADDR_EXP 86
47566: PUSH
47567: EMPTY
47568: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
47569: LD_ADDR_EXP 61
47573: PUSH
47574: EMPTY
47575: ST_TO_ADDR
// mc_building_repairs := [ ] ;
47576: LD_ADDR_EXP 62
47580: PUSH
47581: EMPTY
47582: ST_TO_ADDR
// mc_need_heal := [ ] ;
47583: LD_ADDR_EXP 63
47587: PUSH
47588: EMPTY
47589: ST_TO_ADDR
// mc_healers := [ ] ;
47590: LD_ADDR_EXP 64
47594: PUSH
47595: EMPTY
47596: ST_TO_ADDR
// mc_build_list := [ ] ;
47597: LD_ADDR_EXP 65
47601: PUSH
47602: EMPTY
47603: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
47604: LD_ADDR_EXP 92
47608: PUSH
47609: EMPTY
47610: ST_TO_ADDR
// mc_builders := [ ] ;
47611: LD_ADDR_EXP 66
47615: PUSH
47616: EMPTY
47617: ST_TO_ADDR
// mc_construct_list := [ ] ;
47618: LD_ADDR_EXP 67
47622: PUSH
47623: EMPTY
47624: ST_TO_ADDR
// mc_turret_list := [ ] ;
47625: LD_ADDR_EXP 68
47629: PUSH
47630: EMPTY
47631: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
47632: LD_ADDR_EXP 69
47636: PUSH
47637: EMPTY
47638: ST_TO_ADDR
// mc_miners := [ ] ;
47639: LD_ADDR_EXP 74
47643: PUSH
47644: EMPTY
47645: ST_TO_ADDR
// mc_mines := [ ] ;
47646: LD_ADDR_EXP 73
47650: PUSH
47651: EMPTY
47652: ST_TO_ADDR
// mc_minefields := [ ] ;
47653: LD_ADDR_EXP 75
47657: PUSH
47658: EMPTY
47659: ST_TO_ADDR
// mc_crates := [ ] ;
47660: LD_ADDR_EXP 76
47664: PUSH
47665: EMPTY
47666: ST_TO_ADDR
// mc_crates_collector := [ ] ;
47667: LD_ADDR_EXP 77
47671: PUSH
47672: EMPTY
47673: ST_TO_ADDR
// mc_crates_area := [ ] ;
47674: LD_ADDR_EXP 78
47678: PUSH
47679: EMPTY
47680: ST_TO_ADDR
// mc_vehicles := [ ] ;
47681: LD_ADDR_EXP 79
47685: PUSH
47686: EMPTY
47687: ST_TO_ADDR
// mc_attack := [ ] ;
47688: LD_ADDR_EXP 80
47692: PUSH
47693: EMPTY
47694: ST_TO_ADDR
// mc_produce := [ ] ;
47695: LD_ADDR_EXP 81
47699: PUSH
47700: EMPTY
47701: ST_TO_ADDR
// mc_defender := [ ] ;
47702: LD_ADDR_EXP 82
47706: PUSH
47707: EMPTY
47708: ST_TO_ADDR
// mc_parking := [ ] ;
47709: LD_ADDR_EXP 84
47713: PUSH
47714: EMPTY
47715: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
47716: LD_ADDR_EXP 70
47720: PUSH
47721: EMPTY
47722: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
47723: LD_ADDR_EXP 72
47727: PUSH
47728: EMPTY
47729: ST_TO_ADDR
// mc_scan := [ ] ;
47730: LD_ADDR_EXP 83
47734: PUSH
47735: EMPTY
47736: ST_TO_ADDR
// mc_scan_area := [ ] ;
47737: LD_ADDR_EXP 85
47741: PUSH
47742: EMPTY
47743: ST_TO_ADDR
// mc_tech := [ ] ;
47744: LD_ADDR_EXP 87
47748: PUSH
47749: EMPTY
47750: ST_TO_ADDR
// mc_class := [ ] ;
47751: LD_ADDR_EXP 101
47755: PUSH
47756: EMPTY
47757: ST_TO_ADDR
// mc_class_case_use := [ ] ;
47758: LD_ADDR_EXP 102
47762: PUSH
47763: EMPTY
47764: ST_TO_ADDR
// end ;
47765: LD_VAR 0 1
47769: RET
// export function MC_Kill ( base ) ; begin
47770: LD_INT 0
47772: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
47773: LD_ADDR_EXP 60
47777: PUSH
47778: LD_EXP 60
47782: PPUSH
47783: LD_VAR 0 1
47787: PPUSH
47788: EMPTY
47789: PPUSH
47790: CALL_OW 1
47794: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
47795: LD_ADDR_EXP 61
47799: PUSH
47800: LD_EXP 61
47804: PPUSH
47805: LD_VAR 0 1
47809: PPUSH
47810: EMPTY
47811: PPUSH
47812: CALL_OW 1
47816: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
47817: LD_ADDR_EXP 62
47821: PUSH
47822: LD_EXP 62
47826: PPUSH
47827: LD_VAR 0 1
47831: PPUSH
47832: EMPTY
47833: PPUSH
47834: CALL_OW 1
47838: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
47839: LD_ADDR_EXP 63
47843: PUSH
47844: LD_EXP 63
47848: PPUSH
47849: LD_VAR 0 1
47853: PPUSH
47854: EMPTY
47855: PPUSH
47856: CALL_OW 1
47860: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
47861: LD_ADDR_EXP 64
47865: PUSH
47866: LD_EXP 64
47870: PPUSH
47871: LD_VAR 0 1
47875: PPUSH
47876: EMPTY
47877: PPUSH
47878: CALL_OW 1
47882: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
47883: LD_ADDR_EXP 65
47887: PUSH
47888: LD_EXP 65
47892: PPUSH
47893: LD_VAR 0 1
47897: PPUSH
47898: EMPTY
47899: PPUSH
47900: CALL_OW 1
47904: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
47905: LD_ADDR_EXP 66
47909: PUSH
47910: LD_EXP 66
47914: PPUSH
47915: LD_VAR 0 1
47919: PPUSH
47920: EMPTY
47921: PPUSH
47922: CALL_OW 1
47926: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
47927: LD_ADDR_EXP 67
47931: PUSH
47932: LD_EXP 67
47936: PPUSH
47937: LD_VAR 0 1
47941: PPUSH
47942: EMPTY
47943: PPUSH
47944: CALL_OW 1
47948: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
47949: LD_ADDR_EXP 68
47953: PUSH
47954: LD_EXP 68
47958: PPUSH
47959: LD_VAR 0 1
47963: PPUSH
47964: EMPTY
47965: PPUSH
47966: CALL_OW 1
47970: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
47971: LD_ADDR_EXP 69
47975: PUSH
47976: LD_EXP 69
47980: PPUSH
47981: LD_VAR 0 1
47985: PPUSH
47986: EMPTY
47987: PPUSH
47988: CALL_OW 1
47992: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
47993: LD_ADDR_EXP 70
47997: PUSH
47998: LD_EXP 70
48002: PPUSH
48003: LD_VAR 0 1
48007: PPUSH
48008: EMPTY
48009: PPUSH
48010: CALL_OW 1
48014: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
48015: LD_ADDR_EXP 71
48019: PUSH
48020: LD_EXP 71
48024: PPUSH
48025: LD_VAR 0 1
48029: PPUSH
48030: LD_INT 0
48032: PPUSH
48033: CALL_OW 1
48037: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
48038: LD_ADDR_EXP 72
48042: PUSH
48043: LD_EXP 72
48047: PPUSH
48048: LD_VAR 0 1
48052: PPUSH
48053: EMPTY
48054: PPUSH
48055: CALL_OW 1
48059: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
48060: LD_ADDR_EXP 73
48064: PUSH
48065: LD_EXP 73
48069: PPUSH
48070: LD_VAR 0 1
48074: PPUSH
48075: EMPTY
48076: PPUSH
48077: CALL_OW 1
48081: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
48082: LD_ADDR_EXP 74
48086: PUSH
48087: LD_EXP 74
48091: PPUSH
48092: LD_VAR 0 1
48096: PPUSH
48097: EMPTY
48098: PPUSH
48099: CALL_OW 1
48103: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
48104: LD_ADDR_EXP 75
48108: PUSH
48109: LD_EXP 75
48113: PPUSH
48114: LD_VAR 0 1
48118: PPUSH
48119: EMPTY
48120: PPUSH
48121: CALL_OW 1
48125: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
48126: LD_ADDR_EXP 76
48130: PUSH
48131: LD_EXP 76
48135: PPUSH
48136: LD_VAR 0 1
48140: PPUSH
48141: EMPTY
48142: PPUSH
48143: CALL_OW 1
48147: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
48148: LD_ADDR_EXP 77
48152: PUSH
48153: LD_EXP 77
48157: PPUSH
48158: LD_VAR 0 1
48162: PPUSH
48163: EMPTY
48164: PPUSH
48165: CALL_OW 1
48169: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
48170: LD_ADDR_EXP 78
48174: PUSH
48175: LD_EXP 78
48179: PPUSH
48180: LD_VAR 0 1
48184: PPUSH
48185: EMPTY
48186: PPUSH
48187: CALL_OW 1
48191: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
48192: LD_ADDR_EXP 79
48196: PUSH
48197: LD_EXP 79
48201: PPUSH
48202: LD_VAR 0 1
48206: PPUSH
48207: EMPTY
48208: PPUSH
48209: CALL_OW 1
48213: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
48214: LD_ADDR_EXP 80
48218: PUSH
48219: LD_EXP 80
48223: PPUSH
48224: LD_VAR 0 1
48228: PPUSH
48229: EMPTY
48230: PPUSH
48231: CALL_OW 1
48235: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
48236: LD_ADDR_EXP 81
48240: PUSH
48241: LD_EXP 81
48245: PPUSH
48246: LD_VAR 0 1
48250: PPUSH
48251: EMPTY
48252: PPUSH
48253: CALL_OW 1
48257: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
48258: LD_ADDR_EXP 82
48262: PUSH
48263: LD_EXP 82
48267: PPUSH
48268: LD_VAR 0 1
48272: PPUSH
48273: EMPTY
48274: PPUSH
48275: CALL_OW 1
48279: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
48280: LD_ADDR_EXP 83
48284: PUSH
48285: LD_EXP 83
48289: PPUSH
48290: LD_VAR 0 1
48294: PPUSH
48295: EMPTY
48296: PPUSH
48297: CALL_OW 1
48301: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
48302: LD_ADDR_EXP 84
48306: PUSH
48307: LD_EXP 84
48311: PPUSH
48312: LD_VAR 0 1
48316: PPUSH
48317: EMPTY
48318: PPUSH
48319: CALL_OW 1
48323: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
48324: LD_ADDR_EXP 85
48328: PUSH
48329: LD_EXP 85
48333: PPUSH
48334: LD_VAR 0 1
48338: PPUSH
48339: EMPTY
48340: PPUSH
48341: CALL_OW 1
48345: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
48346: LD_ADDR_EXP 87
48350: PUSH
48351: LD_EXP 87
48355: PPUSH
48356: LD_VAR 0 1
48360: PPUSH
48361: EMPTY
48362: PPUSH
48363: CALL_OW 1
48367: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
48368: LD_ADDR_EXP 89
48372: PUSH
48373: LD_EXP 89
48377: PPUSH
48378: LD_VAR 0 1
48382: PPUSH
48383: EMPTY
48384: PPUSH
48385: CALL_OW 1
48389: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
48390: LD_ADDR_EXP 90
48394: PUSH
48395: LD_EXP 90
48399: PPUSH
48400: LD_VAR 0 1
48404: PPUSH
48405: EMPTY
48406: PPUSH
48407: CALL_OW 1
48411: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
48412: LD_ADDR_EXP 91
48416: PUSH
48417: LD_EXP 91
48421: PPUSH
48422: LD_VAR 0 1
48426: PPUSH
48427: EMPTY
48428: PPUSH
48429: CALL_OW 1
48433: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
48434: LD_ADDR_EXP 92
48438: PUSH
48439: LD_EXP 92
48443: PPUSH
48444: LD_VAR 0 1
48448: PPUSH
48449: EMPTY
48450: PPUSH
48451: CALL_OW 1
48455: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
48456: LD_ADDR_EXP 93
48460: PUSH
48461: LD_EXP 93
48465: PPUSH
48466: LD_VAR 0 1
48470: PPUSH
48471: EMPTY
48472: PPUSH
48473: CALL_OW 1
48477: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
48478: LD_ADDR_EXP 94
48482: PUSH
48483: LD_EXP 94
48487: PPUSH
48488: LD_VAR 0 1
48492: PPUSH
48493: EMPTY
48494: PPUSH
48495: CALL_OW 1
48499: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
48500: LD_ADDR_EXP 95
48504: PUSH
48505: LD_EXP 95
48509: PPUSH
48510: LD_VAR 0 1
48514: PPUSH
48515: EMPTY
48516: PPUSH
48517: CALL_OW 1
48521: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
48522: LD_ADDR_EXP 96
48526: PUSH
48527: LD_EXP 96
48531: PPUSH
48532: LD_VAR 0 1
48536: PPUSH
48537: EMPTY
48538: PPUSH
48539: CALL_OW 1
48543: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
48544: LD_ADDR_EXP 97
48548: PUSH
48549: LD_EXP 97
48553: PPUSH
48554: LD_VAR 0 1
48558: PPUSH
48559: EMPTY
48560: PPUSH
48561: CALL_OW 1
48565: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
48566: LD_ADDR_EXP 98
48570: PUSH
48571: LD_EXP 98
48575: PPUSH
48576: LD_VAR 0 1
48580: PPUSH
48581: EMPTY
48582: PPUSH
48583: CALL_OW 1
48587: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
48588: LD_ADDR_EXP 99
48592: PUSH
48593: LD_EXP 99
48597: PPUSH
48598: LD_VAR 0 1
48602: PPUSH
48603: EMPTY
48604: PPUSH
48605: CALL_OW 1
48609: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
48610: LD_ADDR_EXP 100
48614: PUSH
48615: LD_EXP 100
48619: PPUSH
48620: LD_VAR 0 1
48624: PPUSH
48625: EMPTY
48626: PPUSH
48627: CALL_OW 1
48631: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
48632: LD_ADDR_EXP 101
48636: PUSH
48637: LD_EXP 101
48641: PPUSH
48642: LD_VAR 0 1
48646: PPUSH
48647: EMPTY
48648: PPUSH
48649: CALL_OW 1
48653: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
48654: LD_ADDR_EXP 102
48658: PUSH
48659: LD_EXP 102
48663: PPUSH
48664: LD_VAR 0 1
48668: PPUSH
48669: LD_INT 0
48671: PPUSH
48672: CALL_OW 1
48676: ST_TO_ADDR
// end ;
48677: LD_VAR 0 2
48681: RET
// export function MC_Add ( side , units ) ; var base ; begin
48682: LD_INT 0
48684: PPUSH
48685: PPUSH
// base := mc_bases + 1 ;
48686: LD_ADDR_VAR 0 4
48690: PUSH
48691: LD_EXP 60
48695: PUSH
48696: LD_INT 1
48698: PLUS
48699: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
48700: LD_ADDR_EXP 86
48704: PUSH
48705: LD_EXP 86
48709: PPUSH
48710: LD_VAR 0 4
48714: PPUSH
48715: LD_VAR 0 1
48719: PPUSH
48720: CALL_OW 1
48724: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
48725: LD_ADDR_EXP 60
48729: PUSH
48730: LD_EXP 60
48734: PPUSH
48735: LD_VAR 0 4
48739: PPUSH
48740: LD_VAR 0 2
48744: PPUSH
48745: CALL_OW 1
48749: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
48750: LD_ADDR_EXP 61
48754: PUSH
48755: LD_EXP 61
48759: PPUSH
48760: LD_VAR 0 4
48764: PPUSH
48765: EMPTY
48766: PPUSH
48767: CALL_OW 1
48771: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
48772: LD_ADDR_EXP 62
48776: PUSH
48777: LD_EXP 62
48781: PPUSH
48782: LD_VAR 0 4
48786: PPUSH
48787: EMPTY
48788: PPUSH
48789: CALL_OW 1
48793: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
48794: LD_ADDR_EXP 63
48798: PUSH
48799: LD_EXP 63
48803: PPUSH
48804: LD_VAR 0 4
48808: PPUSH
48809: EMPTY
48810: PPUSH
48811: CALL_OW 1
48815: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
48816: LD_ADDR_EXP 64
48820: PUSH
48821: LD_EXP 64
48825: PPUSH
48826: LD_VAR 0 4
48830: PPUSH
48831: EMPTY
48832: PPUSH
48833: CALL_OW 1
48837: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
48838: LD_ADDR_EXP 65
48842: PUSH
48843: LD_EXP 65
48847: PPUSH
48848: LD_VAR 0 4
48852: PPUSH
48853: EMPTY
48854: PPUSH
48855: CALL_OW 1
48859: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
48860: LD_ADDR_EXP 66
48864: PUSH
48865: LD_EXP 66
48869: PPUSH
48870: LD_VAR 0 4
48874: PPUSH
48875: EMPTY
48876: PPUSH
48877: CALL_OW 1
48881: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
48882: LD_ADDR_EXP 67
48886: PUSH
48887: LD_EXP 67
48891: PPUSH
48892: LD_VAR 0 4
48896: PPUSH
48897: EMPTY
48898: PPUSH
48899: CALL_OW 1
48903: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
48904: LD_ADDR_EXP 68
48908: PUSH
48909: LD_EXP 68
48913: PPUSH
48914: LD_VAR 0 4
48918: PPUSH
48919: EMPTY
48920: PPUSH
48921: CALL_OW 1
48925: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
48926: LD_ADDR_EXP 69
48930: PUSH
48931: LD_EXP 69
48935: PPUSH
48936: LD_VAR 0 4
48940: PPUSH
48941: EMPTY
48942: PPUSH
48943: CALL_OW 1
48947: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
48948: LD_ADDR_EXP 70
48952: PUSH
48953: LD_EXP 70
48957: PPUSH
48958: LD_VAR 0 4
48962: PPUSH
48963: EMPTY
48964: PPUSH
48965: CALL_OW 1
48969: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
48970: LD_ADDR_EXP 71
48974: PUSH
48975: LD_EXP 71
48979: PPUSH
48980: LD_VAR 0 4
48984: PPUSH
48985: LD_INT 0
48987: PPUSH
48988: CALL_OW 1
48992: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
48993: LD_ADDR_EXP 72
48997: PUSH
48998: LD_EXP 72
49002: PPUSH
49003: LD_VAR 0 4
49007: PPUSH
49008: EMPTY
49009: PPUSH
49010: CALL_OW 1
49014: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
49015: LD_ADDR_EXP 73
49019: PUSH
49020: LD_EXP 73
49024: PPUSH
49025: LD_VAR 0 4
49029: PPUSH
49030: EMPTY
49031: PPUSH
49032: CALL_OW 1
49036: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
49037: LD_ADDR_EXP 74
49041: PUSH
49042: LD_EXP 74
49046: PPUSH
49047: LD_VAR 0 4
49051: PPUSH
49052: EMPTY
49053: PPUSH
49054: CALL_OW 1
49058: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
49059: LD_ADDR_EXP 75
49063: PUSH
49064: LD_EXP 75
49068: PPUSH
49069: LD_VAR 0 4
49073: PPUSH
49074: EMPTY
49075: PPUSH
49076: CALL_OW 1
49080: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
49081: LD_ADDR_EXP 76
49085: PUSH
49086: LD_EXP 76
49090: PPUSH
49091: LD_VAR 0 4
49095: PPUSH
49096: EMPTY
49097: PPUSH
49098: CALL_OW 1
49102: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
49103: LD_ADDR_EXP 77
49107: PUSH
49108: LD_EXP 77
49112: PPUSH
49113: LD_VAR 0 4
49117: PPUSH
49118: EMPTY
49119: PPUSH
49120: CALL_OW 1
49124: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
49125: LD_ADDR_EXP 78
49129: PUSH
49130: LD_EXP 78
49134: PPUSH
49135: LD_VAR 0 4
49139: PPUSH
49140: EMPTY
49141: PPUSH
49142: CALL_OW 1
49146: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
49147: LD_ADDR_EXP 79
49151: PUSH
49152: LD_EXP 79
49156: PPUSH
49157: LD_VAR 0 4
49161: PPUSH
49162: EMPTY
49163: PPUSH
49164: CALL_OW 1
49168: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
49169: LD_ADDR_EXP 80
49173: PUSH
49174: LD_EXP 80
49178: PPUSH
49179: LD_VAR 0 4
49183: PPUSH
49184: EMPTY
49185: PPUSH
49186: CALL_OW 1
49190: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
49191: LD_ADDR_EXP 81
49195: PUSH
49196: LD_EXP 81
49200: PPUSH
49201: LD_VAR 0 4
49205: PPUSH
49206: EMPTY
49207: PPUSH
49208: CALL_OW 1
49212: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
49213: LD_ADDR_EXP 82
49217: PUSH
49218: LD_EXP 82
49222: PPUSH
49223: LD_VAR 0 4
49227: PPUSH
49228: EMPTY
49229: PPUSH
49230: CALL_OW 1
49234: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
49235: LD_ADDR_EXP 83
49239: PUSH
49240: LD_EXP 83
49244: PPUSH
49245: LD_VAR 0 4
49249: PPUSH
49250: EMPTY
49251: PPUSH
49252: CALL_OW 1
49256: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
49257: LD_ADDR_EXP 84
49261: PUSH
49262: LD_EXP 84
49266: PPUSH
49267: LD_VAR 0 4
49271: PPUSH
49272: EMPTY
49273: PPUSH
49274: CALL_OW 1
49278: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
49279: LD_ADDR_EXP 85
49283: PUSH
49284: LD_EXP 85
49288: PPUSH
49289: LD_VAR 0 4
49293: PPUSH
49294: EMPTY
49295: PPUSH
49296: CALL_OW 1
49300: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
49301: LD_ADDR_EXP 87
49305: PUSH
49306: LD_EXP 87
49310: PPUSH
49311: LD_VAR 0 4
49315: PPUSH
49316: EMPTY
49317: PPUSH
49318: CALL_OW 1
49322: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
49323: LD_ADDR_EXP 89
49327: PUSH
49328: LD_EXP 89
49332: PPUSH
49333: LD_VAR 0 4
49337: PPUSH
49338: EMPTY
49339: PPUSH
49340: CALL_OW 1
49344: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
49345: LD_ADDR_EXP 90
49349: PUSH
49350: LD_EXP 90
49354: PPUSH
49355: LD_VAR 0 4
49359: PPUSH
49360: EMPTY
49361: PPUSH
49362: CALL_OW 1
49366: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
49367: LD_ADDR_EXP 91
49371: PUSH
49372: LD_EXP 91
49376: PPUSH
49377: LD_VAR 0 4
49381: PPUSH
49382: EMPTY
49383: PPUSH
49384: CALL_OW 1
49388: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
49389: LD_ADDR_EXP 92
49393: PUSH
49394: LD_EXP 92
49398: PPUSH
49399: LD_VAR 0 4
49403: PPUSH
49404: EMPTY
49405: PPUSH
49406: CALL_OW 1
49410: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
49411: LD_ADDR_EXP 93
49415: PUSH
49416: LD_EXP 93
49420: PPUSH
49421: LD_VAR 0 4
49425: PPUSH
49426: EMPTY
49427: PPUSH
49428: CALL_OW 1
49432: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
49433: LD_ADDR_EXP 94
49437: PUSH
49438: LD_EXP 94
49442: PPUSH
49443: LD_VAR 0 4
49447: PPUSH
49448: EMPTY
49449: PPUSH
49450: CALL_OW 1
49454: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
49455: LD_ADDR_EXP 95
49459: PUSH
49460: LD_EXP 95
49464: PPUSH
49465: LD_VAR 0 4
49469: PPUSH
49470: EMPTY
49471: PPUSH
49472: CALL_OW 1
49476: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
49477: LD_ADDR_EXP 96
49481: PUSH
49482: LD_EXP 96
49486: PPUSH
49487: LD_VAR 0 4
49491: PPUSH
49492: EMPTY
49493: PPUSH
49494: CALL_OW 1
49498: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
49499: LD_ADDR_EXP 97
49503: PUSH
49504: LD_EXP 97
49508: PPUSH
49509: LD_VAR 0 4
49513: PPUSH
49514: EMPTY
49515: PPUSH
49516: CALL_OW 1
49520: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
49521: LD_ADDR_EXP 98
49525: PUSH
49526: LD_EXP 98
49530: PPUSH
49531: LD_VAR 0 4
49535: PPUSH
49536: EMPTY
49537: PPUSH
49538: CALL_OW 1
49542: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
49543: LD_ADDR_EXP 99
49547: PUSH
49548: LD_EXP 99
49552: PPUSH
49553: LD_VAR 0 4
49557: PPUSH
49558: EMPTY
49559: PPUSH
49560: CALL_OW 1
49564: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
49565: LD_ADDR_EXP 100
49569: PUSH
49570: LD_EXP 100
49574: PPUSH
49575: LD_VAR 0 4
49579: PPUSH
49580: EMPTY
49581: PPUSH
49582: CALL_OW 1
49586: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
49587: LD_ADDR_EXP 101
49591: PUSH
49592: LD_EXP 101
49596: PPUSH
49597: LD_VAR 0 4
49601: PPUSH
49602: EMPTY
49603: PPUSH
49604: CALL_OW 1
49608: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
49609: LD_ADDR_EXP 102
49613: PUSH
49614: LD_EXP 102
49618: PPUSH
49619: LD_VAR 0 4
49623: PPUSH
49624: LD_INT 0
49626: PPUSH
49627: CALL_OW 1
49631: ST_TO_ADDR
// result := base ;
49632: LD_ADDR_VAR 0 3
49636: PUSH
49637: LD_VAR 0 4
49641: ST_TO_ADDR
// end ;
49642: LD_VAR 0 3
49646: RET
// export function MC_Start ( ) ; var i ; begin
49647: LD_INT 0
49649: PPUSH
49650: PPUSH
// for i = 1 to mc_bases do
49651: LD_ADDR_VAR 0 2
49655: PUSH
49656: DOUBLE
49657: LD_INT 1
49659: DEC
49660: ST_TO_ADDR
49661: LD_EXP 60
49665: PUSH
49666: FOR_TO
49667: IFFALSE 50744
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
49669: LD_ADDR_EXP 60
49673: PUSH
49674: LD_EXP 60
49678: PPUSH
49679: LD_VAR 0 2
49683: PPUSH
49684: LD_EXP 60
49688: PUSH
49689: LD_VAR 0 2
49693: ARRAY
49694: PUSH
49695: LD_INT 0
49697: DIFF
49698: PPUSH
49699: CALL_OW 1
49703: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
49704: LD_ADDR_EXP 61
49708: PUSH
49709: LD_EXP 61
49713: PPUSH
49714: LD_VAR 0 2
49718: PPUSH
49719: EMPTY
49720: PPUSH
49721: CALL_OW 1
49725: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
49726: LD_ADDR_EXP 62
49730: PUSH
49731: LD_EXP 62
49735: PPUSH
49736: LD_VAR 0 2
49740: PPUSH
49741: EMPTY
49742: PPUSH
49743: CALL_OW 1
49747: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
49748: LD_ADDR_EXP 63
49752: PUSH
49753: LD_EXP 63
49757: PPUSH
49758: LD_VAR 0 2
49762: PPUSH
49763: EMPTY
49764: PPUSH
49765: CALL_OW 1
49769: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
49770: LD_ADDR_EXP 64
49774: PUSH
49775: LD_EXP 64
49779: PPUSH
49780: LD_VAR 0 2
49784: PPUSH
49785: EMPTY
49786: PUSH
49787: EMPTY
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PPUSH
49793: CALL_OW 1
49797: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
49798: LD_ADDR_EXP 65
49802: PUSH
49803: LD_EXP 65
49807: PPUSH
49808: LD_VAR 0 2
49812: PPUSH
49813: EMPTY
49814: PPUSH
49815: CALL_OW 1
49819: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
49820: LD_ADDR_EXP 92
49824: PUSH
49825: LD_EXP 92
49829: PPUSH
49830: LD_VAR 0 2
49834: PPUSH
49835: EMPTY
49836: PPUSH
49837: CALL_OW 1
49841: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
49842: LD_ADDR_EXP 66
49846: PUSH
49847: LD_EXP 66
49851: PPUSH
49852: LD_VAR 0 2
49856: PPUSH
49857: EMPTY
49858: PPUSH
49859: CALL_OW 1
49863: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
49864: LD_ADDR_EXP 67
49868: PUSH
49869: LD_EXP 67
49873: PPUSH
49874: LD_VAR 0 2
49878: PPUSH
49879: EMPTY
49880: PPUSH
49881: CALL_OW 1
49885: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
49886: LD_ADDR_EXP 68
49890: PUSH
49891: LD_EXP 68
49895: PPUSH
49896: LD_VAR 0 2
49900: PPUSH
49901: LD_EXP 60
49905: PUSH
49906: LD_VAR 0 2
49910: ARRAY
49911: PPUSH
49912: LD_INT 2
49914: PUSH
49915: LD_INT 30
49917: PUSH
49918: LD_INT 32
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 30
49927: PUSH
49928: LD_INT 33
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: LIST
49939: PPUSH
49940: CALL_OW 72
49944: PPUSH
49945: CALL_OW 1
49949: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
49950: LD_ADDR_EXP 69
49954: PUSH
49955: LD_EXP 69
49959: PPUSH
49960: LD_VAR 0 2
49964: PPUSH
49965: LD_EXP 60
49969: PUSH
49970: LD_VAR 0 2
49974: ARRAY
49975: PPUSH
49976: LD_INT 2
49978: PUSH
49979: LD_INT 30
49981: PUSH
49982: LD_INT 32
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 30
49991: PUSH
49992: LD_INT 31
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 58
50006: PUSH
50007: EMPTY
50008: LIST
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PPUSH
50014: CALL_OW 72
50018: PPUSH
50019: CALL_OW 1
50023: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
50024: LD_ADDR_EXP 70
50028: PUSH
50029: LD_EXP 70
50033: PPUSH
50034: LD_VAR 0 2
50038: PPUSH
50039: EMPTY
50040: PPUSH
50041: CALL_OW 1
50045: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
50046: LD_ADDR_EXP 74
50050: PUSH
50051: LD_EXP 74
50055: PPUSH
50056: LD_VAR 0 2
50060: PPUSH
50061: EMPTY
50062: PPUSH
50063: CALL_OW 1
50067: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
50068: LD_ADDR_EXP 73
50072: PUSH
50073: LD_EXP 73
50077: PPUSH
50078: LD_VAR 0 2
50082: PPUSH
50083: EMPTY
50084: PPUSH
50085: CALL_OW 1
50089: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
50090: LD_ADDR_EXP 75
50094: PUSH
50095: LD_EXP 75
50099: PPUSH
50100: LD_VAR 0 2
50104: PPUSH
50105: EMPTY
50106: PPUSH
50107: CALL_OW 1
50111: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
50112: LD_ADDR_EXP 76
50116: PUSH
50117: LD_EXP 76
50121: PPUSH
50122: LD_VAR 0 2
50126: PPUSH
50127: EMPTY
50128: PPUSH
50129: CALL_OW 1
50133: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
50134: LD_ADDR_EXP 77
50138: PUSH
50139: LD_EXP 77
50143: PPUSH
50144: LD_VAR 0 2
50148: PPUSH
50149: EMPTY
50150: PPUSH
50151: CALL_OW 1
50155: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
50156: LD_ADDR_EXP 78
50160: PUSH
50161: LD_EXP 78
50165: PPUSH
50166: LD_VAR 0 2
50170: PPUSH
50171: EMPTY
50172: PPUSH
50173: CALL_OW 1
50177: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
50178: LD_ADDR_EXP 79
50182: PUSH
50183: LD_EXP 79
50187: PPUSH
50188: LD_VAR 0 2
50192: PPUSH
50193: EMPTY
50194: PPUSH
50195: CALL_OW 1
50199: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
50200: LD_ADDR_EXP 80
50204: PUSH
50205: LD_EXP 80
50209: PPUSH
50210: LD_VAR 0 2
50214: PPUSH
50215: EMPTY
50216: PPUSH
50217: CALL_OW 1
50221: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
50222: LD_ADDR_EXP 81
50226: PUSH
50227: LD_EXP 81
50231: PPUSH
50232: LD_VAR 0 2
50236: PPUSH
50237: EMPTY
50238: PPUSH
50239: CALL_OW 1
50243: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
50244: LD_ADDR_EXP 82
50248: PUSH
50249: LD_EXP 82
50253: PPUSH
50254: LD_VAR 0 2
50258: PPUSH
50259: EMPTY
50260: PPUSH
50261: CALL_OW 1
50265: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
50266: LD_ADDR_EXP 71
50270: PUSH
50271: LD_EXP 71
50275: PPUSH
50276: LD_VAR 0 2
50280: PPUSH
50281: LD_INT 0
50283: PPUSH
50284: CALL_OW 1
50288: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
50289: LD_ADDR_EXP 84
50293: PUSH
50294: LD_EXP 84
50298: PPUSH
50299: LD_VAR 0 2
50303: PPUSH
50304: LD_INT 0
50306: PPUSH
50307: CALL_OW 1
50311: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
50312: LD_ADDR_EXP 72
50316: PUSH
50317: LD_EXP 72
50321: PPUSH
50322: LD_VAR 0 2
50326: PPUSH
50327: EMPTY
50328: PPUSH
50329: CALL_OW 1
50333: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
50334: LD_ADDR_EXP 83
50338: PUSH
50339: LD_EXP 83
50343: PPUSH
50344: LD_VAR 0 2
50348: PPUSH
50349: LD_INT 0
50351: PPUSH
50352: CALL_OW 1
50356: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
50357: LD_ADDR_EXP 85
50361: PUSH
50362: LD_EXP 85
50366: PPUSH
50367: LD_VAR 0 2
50371: PPUSH
50372: EMPTY
50373: PPUSH
50374: CALL_OW 1
50378: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
50379: LD_ADDR_EXP 88
50383: PUSH
50384: LD_EXP 88
50388: PPUSH
50389: LD_VAR 0 2
50393: PPUSH
50394: LD_INT 0
50396: PPUSH
50397: CALL_OW 1
50401: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
50402: LD_ADDR_EXP 89
50406: PUSH
50407: LD_EXP 89
50411: PPUSH
50412: LD_VAR 0 2
50416: PPUSH
50417: EMPTY
50418: PPUSH
50419: CALL_OW 1
50423: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
50424: LD_ADDR_EXP 90
50428: PUSH
50429: LD_EXP 90
50433: PPUSH
50434: LD_VAR 0 2
50438: PPUSH
50439: EMPTY
50440: PPUSH
50441: CALL_OW 1
50445: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
50446: LD_ADDR_EXP 91
50450: PUSH
50451: LD_EXP 91
50455: PPUSH
50456: LD_VAR 0 2
50460: PPUSH
50461: EMPTY
50462: PPUSH
50463: CALL_OW 1
50467: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
50468: LD_ADDR_EXP 93
50472: PUSH
50473: LD_EXP 93
50477: PPUSH
50478: LD_VAR 0 2
50482: PPUSH
50483: LD_EXP 60
50487: PUSH
50488: LD_VAR 0 2
50492: ARRAY
50493: PPUSH
50494: LD_INT 2
50496: PUSH
50497: LD_INT 30
50499: PUSH
50500: LD_INT 6
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 30
50509: PUSH
50510: LD_INT 7
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 30
50519: PUSH
50520: LD_INT 8
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: PPUSH
50533: CALL_OW 72
50537: PPUSH
50538: CALL_OW 1
50542: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
50543: LD_ADDR_EXP 94
50547: PUSH
50548: LD_EXP 94
50552: PPUSH
50553: LD_VAR 0 2
50557: PPUSH
50558: EMPTY
50559: PPUSH
50560: CALL_OW 1
50564: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
50565: LD_ADDR_EXP 95
50569: PUSH
50570: LD_EXP 95
50574: PPUSH
50575: LD_VAR 0 2
50579: PPUSH
50580: EMPTY
50581: PPUSH
50582: CALL_OW 1
50586: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
50587: LD_ADDR_EXP 96
50591: PUSH
50592: LD_EXP 96
50596: PPUSH
50597: LD_VAR 0 2
50601: PPUSH
50602: EMPTY
50603: PPUSH
50604: CALL_OW 1
50608: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
50609: LD_ADDR_EXP 97
50613: PUSH
50614: LD_EXP 97
50618: PPUSH
50619: LD_VAR 0 2
50623: PPUSH
50624: EMPTY
50625: PPUSH
50626: CALL_OW 1
50630: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
50631: LD_ADDR_EXP 98
50635: PUSH
50636: LD_EXP 98
50640: PPUSH
50641: LD_VAR 0 2
50645: PPUSH
50646: EMPTY
50647: PPUSH
50648: CALL_OW 1
50652: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
50653: LD_ADDR_EXP 99
50657: PUSH
50658: LD_EXP 99
50662: PPUSH
50663: LD_VAR 0 2
50667: PPUSH
50668: EMPTY
50669: PPUSH
50670: CALL_OW 1
50674: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
50675: LD_ADDR_EXP 100
50679: PUSH
50680: LD_EXP 100
50684: PPUSH
50685: LD_VAR 0 2
50689: PPUSH
50690: EMPTY
50691: PPUSH
50692: CALL_OW 1
50696: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
50697: LD_ADDR_EXP 101
50701: PUSH
50702: LD_EXP 101
50706: PPUSH
50707: LD_VAR 0 2
50711: PPUSH
50712: EMPTY
50713: PPUSH
50714: CALL_OW 1
50718: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
50719: LD_ADDR_EXP 102
50723: PUSH
50724: LD_EXP 102
50728: PPUSH
50729: LD_VAR 0 2
50733: PPUSH
50734: LD_INT 0
50736: PPUSH
50737: CALL_OW 1
50741: ST_TO_ADDR
// end ;
50742: GO 49666
50744: POP
50745: POP
// MC_InitSides ( ) ;
50746: CALL 51032 0 0
// MC_InitResearch ( ) ;
50750: CALL 50771 0 0
// CustomInitMacro ( ) ;
50754: CALL 5367 0 0
// skirmish := true ;
50758: LD_ADDR_EXP 58
50762: PUSH
50763: LD_INT 1
50765: ST_TO_ADDR
// end ;
50766: LD_VAR 0 1
50770: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
50771: LD_INT 0
50773: PPUSH
50774: PPUSH
50775: PPUSH
50776: PPUSH
50777: PPUSH
50778: PPUSH
// if not mc_bases then
50779: LD_EXP 60
50783: NOT
50784: IFFALSE 50788
// exit ;
50786: GO 51027
// for i = 1 to 8 do
50788: LD_ADDR_VAR 0 2
50792: PUSH
50793: DOUBLE
50794: LD_INT 1
50796: DEC
50797: ST_TO_ADDR
50798: LD_INT 8
50800: PUSH
50801: FOR_TO
50802: IFFALSE 50828
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
50804: LD_ADDR_EXP 87
50808: PUSH
50809: LD_EXP 87
50813: PPUSH
50814: LD_VAR 0 2
50818: PPUSH
50819: EMPTY
50820: PPUSH
50821: CALL_OW 1
50825: ST_TO_ADDR
50826: GO 50801
50828: POP
50829: POP
// tmp := [ ] ;
50830: LD_ADDR_VAR 0 5
50834: PUSH
50835: EMPTY
50836: ST_TO_ADDR
// for i = 1 to mc_sides do
50837: LD_ADDR_VAR 0 2
50841: PUSH
50842: DOUBLE
50843: LD_INT 1
50845: DEC
50846: ST_TO_ADDR
50847: LD_EXP 86
50851: PUSH
50852: FOR_TO
50853: IFFALSE 50911
// if not mc_sides [ i ] in tmp then
50855: LD_EXP 86
50859: PUSH
50860: LD_VAR 0 2
50864: ARRAY
50865: PUSH
50866: LD_VAR 0 5
50870: IN
50871: NOT
50872: IFFALSE 50909
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
50874: LD_ADDR_VAR 0 5
50878: PUSH
50879: LD_VAR 0 5
50883: PPUSH
50884: LD_VAR 0 5
50888: PUSH
50889: LD_INT 1
50891: PLUS
50892: PPUSH
50893: LD_EXP 86
50897: PUSH
50898: LD_VAR 0 2
50902: ARRAY
50903: PPUSH
50904: CALL_OW 2
50908: ST_TO_ADDR
50909: GO 50852
50911: POP
50912: POP
// if not tmp then
50913: LD_VAR 0 5
50917: NOT
50918: IFFALSE 50922
// exit ;
50920: GO 51027
// for j in tmp do
50922: LD_ADDR_VAR 0 3
50926: PUSH
50927: LD_VAR 0 5
50931: PUSH
50932: FOR_IN
50933: IFFALSE 51025
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
50935: LD_ADDR_VAR 0 6
50939: PUSH
50940: LD_INT 22
50942: PUSH
50943: LD_VAR 0 3
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PPUSH
50952: CALL_OW 69
50956: ST_TO_ADDR
// if not un then
50957: LD_VAR 0 6
50961: NOT
50962: IFFALSE 50966
// continue ;
50964: GO 50932
// nation := GetNation ( un [ 1 ] ) ;
50966: LD_ADDR_VAR 0 4
50970: PUSH
50971: LD_VAR 0 6
50975: PUSH
50976: LD_INT 1
50978: ARRAY
50979: PPUSH
50980: CALL_OW 248
50984: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
50985: LD_ADDR_EXP 87
50989: PUSH
50990: LD_EXP 87
50994: PPUSH
50995: LD_VAR 0 3
50999: PPUSH
51000: LD_VAR 0 3
51004: PPUSH
51005: LD_VAR 0 4
51009: PPUSH
51010: LD_INT 1
51012: PPUSH
51013: CALL 11245 0 3
51017: PPUSH
51018: CALL_OW 1
51022: ST_TO_ADDR
// end ;
51023: GO 50932
51025: POP
51026: POP
// end ;
51027: LD_VAR 0 1
51031: RET
// export function MC_InitSides ( ) ; var i ; begin
51032: LD_INT 0
51034: PPUSH
51035: PPUSH
// if not mc_bases then
51036: LD_EXP 60
51040: NOT
51041: IFFALSE 51045
// exit ;
51043: GO 51119
// for i = 1 to mc_bases do
51045: LD_ADDR_VAR 0 2
51049: PUSH
51050: DOUBLE
51051: LD_INT 1
51053: DEC
51054: ST_TO_ADDR
51055: LD_EXP 60
51059: PUSH
51060: FOR_TO
51061: IFFALSE 51117
// if mc_bases [ i ] then
51063: LD_EXP 60
51067: PUSH
51068: LD_VAR 0 2
51072: ARRAY
51073: IFFALSE 51115
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
51075: LD_ADDR_EXP 86
51079: PUSH
51080: LD_EXP 86
51084: PPUSH
51085: LD_VAR 0 2
51089: PPUSH
51090: LD_EXP 60
51094: PUSH
51095: LD_VAR 0 2
51099: ARRAY
51100: PUSH
51101: LD_INT 1
51103: ARRAY
51104: PPUSH
51105: CALL_OW 255
51109: PPUSH
51110: CALL_OW 1
51114: ST_TO_ADDR
51115: GO 51060
51117: POP
51118: POP
// end ;
51119: LD_VAR 0 1
51123: RET
// every 0 0$01 trigger skirmish do
51124: LD_EXP 58
51128: IFFALSE 51282
51130: GO 51132
51132: DISABLE
// begin enable ;
51133: ENABLE
// MC_CheckBuildings ( ) ;
51134: CALL 55780 0 0
// MC_CheckPeopleLife ( ) ;
51138: CALL 55905 0 0
// RaiseSailEvent ( 100 ) ;
51142: LD_INT 100
51144: PPUSH
51145: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
51149: LD_INT 103
51151: PPUSH
51152: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
51156: LD_INT 104
51158: PPUSH
51159: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
51163: LD_INT 105
51165: PPUSH
51166: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
51170: LD_INT 106
51172: PPUSH
51173: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
51177: LD_INT 107
51179: PPUSH
51180: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
51184: LD_INT 108
51186: PPUSH
51187: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
51191: LD_INT 109
51193: PPUSH
51194: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
51198: LD_INT 110
51200: PPUSH
51201: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
51205: LD_INT 111
51207: PPUSH
51208: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
51212: LD_INT 112
51214: PPUSH
51215: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
51219: LD_INT 113
51221: PPUSH
51222: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
51226: LD_INT 120
51228: PPUSH
51229: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
51233: LD_INT 121
51235: PPUSH
51236: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
51240: LD_INT 122
51242: PPUSH
51243: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
51247: LD_INT 123
51249: PPUSH
51250: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
51254: LD_INT 124
51256: PPUSH
51257: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
51261: LD_INT 125
51263: PPUSH
51264: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
51268: LD_INT 126
51270: PPUSH
51271: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
51275: LD_INT 200
51277: PPUSH
51278: CALL_OW 427
// end ;
51282: END
// on SailEvent ( event ) do begin if event < 100 then
51283: LD_VAR 0 1
51287: PUSH
51288: LD_INT 100
51290: LESS
51291: IFFALSE 51302
// CustomEvent ( event ) ;
51293: LD_VAR 0 1
51297: PPUSH
51298: CALL 5359 0 1
// if event = 100 then
51302: LD_VAR 0 1
51306: PUSH
51307: LD_INT 100
51309: EQUAL
51310: IFFALSE 51316
// MC_ClassManager ( ) ;
51312: CALL 51708 0 0
// if event = 101 then
51316: LD_VAR 0 1
51320: PUSH
51321: LD_INT 101
51323: EQUAL
51324: IFFALSE 51330
// MC_RepairBuildings ( ) ;
51326: CALL 56490 0 0
// if event = 102 then
51330: LD_VAR 0 1
51334: PUSH
51335: LD_INT 102
51337: EQUAL
51338: IFFALSE 51344
// MC_Heal ( ) ;
51340: CALL 57349 0 0
// if event = 103 then
51344: LD_VAR 0 1
51348: PUSH
51349: LD_INT 103
51351: EQUAL
51352: IFFALSE 51358
// MC_Build ( ) ;
51354: CALL 57771 0 0
// if event = 104 then
51358: LD_VAR 0 1
51362: PUSH
51363: LD_INT 104
51365: EQUAL
51366: IFFALSE 51372
// MC_TurretWeapon ( ) ;
51368: CALL 59384 0 0
// if event = 105 then
51372: LD_VAR 0 1
51376: PUSH
51377: LD_INT 105
51379: EQUAL
51380: IFFALSE 51386
// MC_BuildUpgrade ( ) ;
51382: CALL 58935 0 0
// if event = 106 then
51386: LD_VAR 0 1
51390: PUSH
51391: LD_INT 106
51393: EQUAL
51394: IFFALSE 51400
// MC_PlantMines ( ) ;
51396: CALL 59814 0 0
// if event = 107 then
51400: LD_VAR 0 1
51404: PUSH
51405: LD_INT 107
51407: EQUAL
51408: IFFALSE 51414
// MC_CollectCrates ( ) ;
51410: CALL 60612 0 0
// if event = 108 then
51414: LD_VAR 0 1
51418: PUSH
51419: LD_INT 108
51421: EQUAL
51422: IFFALSE 51428
// MC_LinkRemoteControl ( ) ;
51424: CALL 62388 0 0
// if event = 109 then
51428: LD_VAR 0 1
51432: PUSH
51433: LD_INT 109
51435: EQUAL
51436: IFFALSE 51442
// MC_ProduceVehicle ( ) ;
51438: CALL 62569 0 0
// if event = 110 then
51442: LD_VAR 0 1
51446: PUSH
51447: LD_INT 110
51449: EQUAL
51450: IFFALSE 51456
// MC_SendAttack ( ) ;
51452: CALL 63035 0 0
// if event = 111 then
51456: LD_VAR 0 1
51460: PUSH
51461: LD_INT 111
51463: EQUAL
51464: IFFALSE 51470
// MC_Defend ( ) ;
51466: CALL 63143 0 0
// if event = 112 then
51470: LD_VAR 0 1
51474: PUSH
51475: LD_INT 112
51477: EQUAL
51478: IFFALSE 51484
// MC_Research ( ) ;
51480: CALL 63748 0 0
// if event = 113 then
51484: LD_VAR 0 1
51488: PUSH
51489: LD_INT 113
51491: EQUAL
51492: IFFALSE 51498
// MC_MinesTrigger ( ) ;
51494: CALL 64862 0 0
// if event = 120 then
51498: LD_VAR 0 1
51502: PUSH
51503: LD_INT 120
51505: EQUAL
51506: IFFALSE 51512
// MC_RepairVehicle ( ) ;
51508: CALL 64961 0 0
// if event = 121 then
51512: LD_VAR 0 1
51516: PUSH
51517: LD_INT 121
51519: EQUAL
51520: IFFALSE 51526
// MC_TameApe ( ) ;
51522: CALL 65691 0 0
// if event = 122 then
51526: LD_VAR 0 1
51530: PUSH
51531: LD_INT 122
51533: EQUAL
51534: IFFALSE 51540
// MC_ChangeApeClass ( ) ;
51536: CALL 66520 0 0
// if event = 123 then
51540: LD_VAR 0 1
51544: PUSH
51545: LD_INT 123
51547: EQUAL
51548: IFFALSE 51554
// MC_Bazooka ( ) ;
51550: CALL 67170 0 0
// if event = 124 then
51554: LD_VAR 0 1
51558: PUSH
51559: LD_INT 124
51561: EQUAL
51562: IFFALSE 51568
// MC_TeleportExit ( ) ;
51564: CALL 67368 0 0
// if event = 125 then
51568: LD_VAR 0 1
51572: PUSH
51573: LD_INT 125
51575: EQUAL
51576: IFFALSE 51582
// MC_Deposits ( ) ;
51578: CALL 68015 0 0
// if event = 126 then
51582: LD_VAR 0 1
51586: PUSH
51587: LD_INT 126
51589: EQUAL
51590: IFFALSE 51596
// MC_RemoteDriver ( ) ;
51592: CALL 68640 0 0
// if event = 200 then
51596: LD_VAR 0 1
51600: PUSH
51601: LD_INT 200
51603: EQUAL
51604: IFFALSE 51610
// MC_Idle ( ) ;
51606: CALL 70589 0 0
// end ;
51610: PPOPN 1
51612: END
// export function MC_Reset ( base , tag ) ; var i ; begin
51613: LD_INT 0
51615: PPUSH
51616: PPUSH
// if not mc_bases [ base ] or not tag then
51617: LD_EXP 60
51621: PUSH
51622: LD_VAR 0 1
51626: ARRAY
51627: NOT
51628: PUSH
51629: LD_VAR 0 2
51633: NOT
51634: OR
51635: IFFALSE 51639
// exit ;
51637: GO 51703
// for i in mc_bases [ base ] union mc_ape [ base ] do
51639: LD_ADDR_VAR 0 4
51643: PUSH
51644: LD_EXP 60
51648: PUSH
51649: LD_VAR 0 1
51653: ARRAY
51654: PUSH
51655: LD_EXP 89
51659: PUSH
51660: LD_VAR 0 1
51664: ARRAY
51665: UNION
51666: PUSH
51667: FOR_IN
51668: IFFALSE 51701
// if GetTag ( i ) = tag then
51670: LD_VAR 0 4
51674: PPUSH
51675: CALL_OW 110
51679: PUSH
51680: LD_VAR 0 2
51684: EQUAL
51685: IFFALSE 51699
// SetTag ( i , 0 ) ;
51687: LD_VAR 0 4
51691: PPUSH
51692: LD_INT 0
51694: PPUSH
51695: CALL_OW 109
51699: GO 51667
51701: POP
51702: POP
// end ;
51703: LD_VAR 0 3
51707: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
51708: LD_INT 0
51710: PPUSH
51711: PPUSH
51712: PPUSH
51713: PPUSH
51714: PPUSH
51715: PPUSH
51716: PPUSH
51717: PPUSH
// if not mc_bases then
51718: LD_EXP 60
51722: NOT
51723: IFFALSE 51727
// exit ;
51725: GO 52185
// for i = 1 to mc_bases do
51727: LD_ADDR_VAR 0 2
51731: PUSH
51732: DOUBLE
51733: LD_INT 1
51735: DEC
51736: ST_TO_ADDR
51737: LD_EXP 60
51741: PUSH
51742: FOR_TO
51743: IFFALSE 52183
// begin tmp := MC_ClassCheckReq ( i ) ;
51745: LD_ADDR_VAR 0 4
51749: PUSH
51750: LD_VAR 0 2
51754: PPUSH
51755: CALL 52190 0 1
51759: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
51760: LD_ADDR_EXP 101
51764: PUSH
51765: LD_EXP 101
51769: PPUSH
51770: LD_VAR 0 2
51774: PPUSH
51775: LD_VAR 0 4
51779: PPUSH
51780: CALL_OW 1
51784: ST_TO_ADDR
// if not tmp then
51785: LD_VAR 0 4
51789: NOT
51790: IFFALSE 51794
// continue ;
51792: GO 51742
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
51794: LD_ADDR_VAR 0 6
51798: PUSH
51799: LD_EXP 60
51803: PUSH
51804: LD_VAR 0 2
51808: ARRAY
51809: PPUSH
51810: LD_INT 2
51812: PUSH
51813: LD_INT 30
51815: PUSH
51816: LD_INT 4
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 30
51825: PUSH
51826: LD_INT 5
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: LIST
51837: PPUSH
51838: CALL_OW 72
51842: PUSH
51843: LD_EXP 60
51847: PUSH
51848: LD_VAR 0 2
51852: ARRAY
51853: PPUSH
51854: LD_INT 2
51856: PUSH
51857: LD_INT 30
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 30
51869: PUSH
51870: LD_INT 1
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: LIST
51881: PPUSH
51882: CALL_OW 72
51886: PUSH
51887: LD_EXP 60
51891: PUSH
51892: LD_VAR 0 2
51896: ARRAY
51897: PPUSH
51898: LD_INT 30
51900: PUSH
51901: LD_INT 3
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PPUSH
51908: CALL_OW 72
51912: PUSH
51913: LD_EXP 60
51917: PUSH
51918: LD_VAR 0 2
51922: ARRAY
51923: PPUSH
51924: LD_INT 2
51926: PUSH
51927: LD_INT 30
51929: PUSH
51930: LD_INT 6
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 30
51939: PUSH
51940: LD_INT 7
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 30
51949: PUSH
51950: LD_INT 8
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: PPUSH
51963: CALL_OW 72
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: ST_TO_ADDR
// for j = 1 to 4 do
51974: LD_ADDR_VAR 0 3
51978: PUSH
51979: DOUBLE
51980: LD_INT 1
51982: DEC
51983: ST_TO_ADDR
51984: LD_INT 4
51986: PUSH
51987: FOR_TO
51988: IFFALSE 52179
// begin if not tmp [ j ] then
51990: LD_VAR 0 4
51994: PUSH
51995: LD_VAR 0 3
51999: ARRAY
52000: NOT
52001: IFFALSE 52005
// continue ;
52003: GO 51987
// for p in tmp [ j ] do
52005: LD_ADDR_VAR 0 5
52009: PUSH
52010: LD_VAR 0 4
52014: PUSH
52015: LD_VAR 0 3
52019: ARRAY
52020: PUSH
52021: FOR_IN
52022: IFFALSE 52175
// begin if not b [ j ] then
52024: LD_VAR 0 6
52028: PUSH
52029: LD_VAR 0 3
52033: ARRAY
52034: NOT
52035: IFFALSE 52039
// break ;
52037: GO 52175
// e := 0 ;
52039: LD_ADDR_VAR 0 7
52043: PUSH
52044: LD_INT 0
52046: ST_TO_ADDR
// for k in b [ j ] do
52047: LD_ADDR_VAR 0 8
52051: PUSH
52052: LD_VAR 0 6
52056: PUSH
52057: LD_VAR 0 3
52061: ARRAY
52062: PUSH
52063: FOR_IN
52064: IFFALSE 52091
// if IsNotFull ( k ) then
52066: LD_VAR 0 8
52070: PPUSH
52071: CALL 13394 0 1
52075: IFFALSE 52089
// begin e := k ;
52077: LD_ADDR_VAR 0 7
52081: PUSH
52082: LD_VAR 0 8
52086: ST_TO_ADDR
// break ;
52087: GO 52091
// end ;
52089: GO 52063
52091: POP
52092: POP
// if e and not UnitGoingToBuilding ( p , e ) then
52093: LD_VAR 0 7
52097: PUSH
52098: LD_VAR 0 5
52102: PPUSH
52103: LD_VAR 0 7
52107: PPUSH
52108: CALL 45814 0 2
52112: NOT
52113: AND
52114: IFFALSE 52173
// begin if IsInUnit ( p ) then
52116: LD_VAR 0 5
52120: PPUSH
52121: CALL_OW 310
52125: IFFALSE 52136
// ComExitBuilding ( p ) ;
52127: LD_VAR 0 5
52131: PPUSH
52132: CALL_OW 122
// ComEnterUnit ( p , e ) ;
52136: LD_VAR 0 5
52140: PPUSH
52141: LD_VAR 0 7
52145: PPUSH
52146: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
52150: LD_VAR 0 5
52154: PPUSH
52155: LD_VAR 0 3
52159: PPUSH
52160: CALL_OW 183
// AddComExitBuilding ( p ) ;
52164: LD_VAR 0 5
52168: PPUSH
52169: CALL_OW 182
// end ; end ;
52173: GO 52021
52175: POP
52176: POP
// end ;
52177: GO 51987
52179: POP
52180: POP
// end ;
52181: GO 51742
52183: POP
52184: POP
// end ;
52185: LD_VAR 0 1
52189: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
52190: LD_INT 0
52192: PPUSH
52193: PPUSH
52194: PPUSH
52195: PPUSH
52196: PPUSH
52197: PPUSH
52198: PPUSH
52199: PPUSH
52200: PPUSH
52201: PPUSH
52202: PPUSH
52203: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
52204: LD_VAR 0 1
52208: NOT
52209: PUSH
52210: LD_EXP 60
52214: PUSH
52215: LD_VAR 0 1
52219: ARRAY
52220: NOT
52221: OR
52222: PUSH
52223: LD_EXP 60
52227: PUSH
52228: LD_VAR 0 1
52232: ARRAY
52233: PPUSH
52234: LD_INT 2
52236: PUSH
52237: LD_INT 30
52239: PUSH
52240: LD_INT 0
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 30
52249: PUSH
52250: LD_INT 1
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: LIST
52261: PPUSH
52262: CALL_OW 72
52266: NOT
52267: OR
52268: IFFALSE 52272
// exit ;
52270: GO 55775
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
52272: LD_ADDR_VAR 0 4
52276: PUSH
52277: LD_EXP 60
52281: PUSH
52282: LD_VAR 0 1
52286: ARRAY
52287: PPUSH
52288: LD_INT 2
52290: PUSH
52291: LD_INT 25
52293: PUSH
52294: LD_INT 1
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 25
52303: PUSH
52304: LD_INT 2
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 25
52313: PUSH
52314: LD_INT 3
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 25
52323: PUSH
52324: LD_INT 4
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 25
52333: PUSH
52334: LD_INT 5
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 25
52343: PUSH
52344: LD_INT 8
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 25
52353: PUSH
52354: LD_INT 9
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: PPUSH
52371: CALL_OW 72
52375: ST_TO_ADDR
// if not tmp then
52376: LD_VAR 0 4
52380: NOT
52381: IFFALSE 52385
// exit ;
52383: GO 55775
// for i in tmp do
52385: LD_ADDR_VAR 0 3
52389: PUSH
52390: LD_VAR 0 4
52394: PUSH
52395: FOR_IN
52396: IFFALSE 52427
// if GetTag ( i ) then
52398: LD_VAR 0 3
52402: PPUSH
52403: CALL_OW 110
52407: IFFALSE 52425
// tmp := tmp diff i ;
52409: LD_ADDR_VAR 0 4
52413: PUSH
52414: LD_VAR 0 4
52418: PUSH
52419: LD_VAR 0 3
52423: DIFF
52424: ST_TO_ADDR
52425: GO 52395
52427: POP
52428: POP
// if not tmp then
52429: LD_VAR 0 4
52433: NOT
52434: IFFALSE 52438
// exit ;
52436: GO 55775
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
52438: LD_ADDR_VAR 0 5
52442: PUSH
52443: LD_EXP 60
52447: PUSH
52448: LD_VAR 0 1
52452: ARRAY
52453: PPUSH
52454: LD_INT 2
52456: PUSH
52457: LD_INT 25
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 25
52469: PUSH
52470: LD_INT 5
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 25
52479: PUSH
52480: LD_INT 8
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 25
52489: PUSH
52490: LD_INT 9
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: PPUSH
52504: CALL_OW 72
52508: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
52509: LD_ADDR_VAR 0 6
52513: PUSH
52514: LD_EXP 60
52518: PUSH
52519: LD_VAR 0 1
52523: ARRAY
52524: PPUSH
52525: LD_INT 25
52527: PUSH
52528: LD_INT 2
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PPUSH
52535: CALL_OW 72
52539: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
52540: LD_ADDR_VAR 0 7
52544: PUSH
52545: LD_EXP 60
52549: PUSH
52550: LD_VAR 0 1
52554: ARRAY
52555: PPUSH
52556: LD_INT 25
52558: PUSH
52559: LD_INT 3
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PPUSH
52566: CALL_OW 72
52570: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
52571: LD_ADDR_VAR 0 8
52575: PUSH
52576: LD_EXP 60
52580: PUSH
52581: LD_VAR 0 1
52585: ARRAY
52586: PPUSH
52587: LD_INT 25
52589: PUSH
52590: LD_INT 4
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 24
52599: PUSH
52600: LD_INT 251
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PPUSH
52611: CALL_OW 72
52615: ST_TO_ADDR
// if mc_scan [ base ] then
52616: LD_EXP 83
52620: PUSH
52621: LD_VAR 0 1
52625: ARRAY
52626: IFFALSE 53087
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
52628: LD_ADDR_EXP 102
52632: PUSH
52633: LD_EXP 102
52637: PPUSH
52638: LD_VAR 0 1
52642: PPUSH
52643: LD_INT 4
52645: PPUSH
52646: CALL_OW 1
52650: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
52651: LD_ADDR_VAR 0 12
52655: PUSH
52656: LD_EXP 60
52660: PUSH
52661: LD_VAR 0 1
52665: ARRAY
52666: PPUSH
52667: LD_INT 2
52669: PUSH
52670: LD_INT 30
52672: PUSH
52673: LD_INT 4
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 30
52682: PUSH
52683: LD_INT 5
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: LIST
52694: PPUSH
52695: CALL_OW 72
52699: ST_TO_ADDR
// if not b then
52700: LD_VAR 0 12
52704: NOT
52705: IFFALSE 52709
// exit ;
52707: GO 55775
// p := [ ] ;
52709: LD_ADDR_VAR 0 11
52713: PUSH
52714: EMPTY
52715: ST_TO_ADDR
// if sci >= 2 then
52716: LD_VAR 0 8
52720: PUSH
52721: LD_INT 2
52723: GREATEREQUAL
52724: IFFALSE 52755
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
52726: LD_ADDR_VAR 0 8
52730: PUSH
52731: LD_VAR 0 8
52735: PUSH
52736: LD_INT 1
52738: ARRAY
52739: PUSH
52740: LD_VAR 0 8
52744: PUSH
52745: LD_INT 2
52747: ARRAY
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: ST_TO_ADDR
52753: GO 52816
// if sci = 1 then
52755: LD_VAR 0 8
52759: PUSH
52760: LD_INT 1
52762: EQUAL
52763: IFFALSE 52784
// sci := [ sci [ 1 ] ] else
52765: LD_ADDR_VAR 0 8
52769: PUSH
52770: LD_VAR 0 8
52774: PUSH
52775: LD_INT 1
52777: ARRAY
52778: PUSH
52779: EMPTY
52780: LIST
52781: ST_TO_ADDR
52782: GO 52816
// if sci = 0 then
52784: LD_VAR 0 8
52788: PUSH
52789: LD_INT 0
52791: EQUAL
52792: IFFALSE 52816
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
52794: LD_ADDR_VAR 0 11
52798: PUSH
52799: LD_VAR 0 4
52803: PPUSH
52804: LD_INT 4
52806: PPUSH
52807: CALL 45677 0 2
52811: PUSH
52812: LD_INT 1
52814: ARRAY
52815: ST_TO_ADDR
// if eng > 4 then
52816: LD_VAR 0 6
52820: PUSH
52821: LD_INT 4
52823: GREATER
52824: IFFALSE 52870
// for i = eng downto 4 do
52826: LD_ADDR_VAR 0 3
52830: PUSH
52831: DOUBLE
52832: LD_VAR 0 6
52836: INC
52837: ST_TO_ADDR
52838: LD_INT 4
52840: PUSH
52841: FOR_DOWNTO
52842: IFFALSE 52868
// eng := eng diff eng [ i ] ;
52844: LD_ADDR_VAR 0 6
52848: PUSH
52849: LD_VAR 0 6
52853: PUSH
52854: LD_VAR 0 6
52858: PUSH
52859: LD_VAR 0 3
52863: ARRAY
52864: DIFF
52865: ST_TO_ADDR
52866: GO 52841
52868: POP
52869: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
52870: LD_ADDR_VAR 0 4
52874: PUSH
52875: LD_VAR 0 4
52879: PUSH
52880: LD_VAR 0 5
52884: PUSH
52885: LD_VAR 0 6
52889: UNION
52890: PUSH
52891: LD_VAR 0 7
52895: UNION
52896: PUSH
52897: LD_VAR 0 8
52901: UNION
52902: DIFF
52903: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
52904: LD_ADDR_VAR 0 13
52908: PUSH
52909: LD_EXP 60
52913: PUSH
52914: LD_VAR 0 1
52918: ARRAY
52919: PPUSH
52920: LD_INT 2
52922: PUSH
52923: LD_INT 30
52925: PUSH
52926: LD_INT 32
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 30
52935: PUSH
52936: LD_INT 31
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: LIST
52947: PPUSH
52948: CALL_OW 72
52952: PUSH
52953: LD_EXP 60
52957: PUSH
52958: LD_VAR 0 1
52962: ARRAY
52963: PPUSH
52964: LD_INT 2
52966: PUSH
52967: LD_INT 30
52969: PUSH
52970: LD_INT 4
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 30
52979: PUSH
52980: LD_INT 5
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: LIST
52991: PPUSH
52992: CALL_OW 72
52996: PUSH
52997: LD_INT 6
52999: MUL
53000: PLUS
53001: ST_TO_ADDR
// if bcount < tmp then
53002: LD_VAR 0 13
53006: PUSH
53007: LD_VAR 0 4
53011: LESS
53012: IFFALSE 53058
// for i = tmp downto bcount do
53014: LD_ADDR_VAR 0 3
53018: PUSH
53019: DOUBLE
53020: LD_VAR 0 4
53024: INC
53025: ST_TO_ADDR
53026: LD_VAR 0 13
53030: PUSH
53031: FOR_DOWNTO
53032: IFFALSE 53056
// tmp := Delete ( tmp , tmp ) ;
53034: LD_ADDR_VAR 0 4
53038: PUSH
53039: LD_VAR 0 4
53043: PPUSH
53044: LD_VAR 0 4
53048: PPUSH
53049: CALL_OW 3
53053: ST_TO_ADDR
53054: GO 53031
53056: POP
53057: POP
// result := [ tmp , 0 , 0 , p ] ;
53058: LD_ADDR_VAR 0 2
53062: PUSH
53063: LD_VAR 0 4
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: LD_VAR 0 11
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: ST_TO_ADDR
// exit ;
53085: GO 55775
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
53087: LD_EXP 60
53091: PUSH
53092: LD_VAR 0 1
53096: ARRAY
53097: PPUSH
53098: LD_INT 2
53100: PUSH
53101: LD_INT 30
53103: PUSH
53104: LD_INT 6
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PUSH
53111: LD_INT 30
53113: PUSH
53114: LD_INT 7
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 30
53123: PUSH
53124: LD_INT 8
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: PPUSH
53137: CALL_OW 72
53141: NOT
53142: PUSH
53143: LD_EXP 60
53147: PUSH
53148: LD_VAR 0 1
53152: ARRAY
53153: PPUSH
53154: LD_INT 30
53156: PUSH
53157: LD_INT 3
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PPUSH
53164: CALL_OW 72
53168: NOT
53169: AND
53170: IFFALSE 53242
// begin if eng = tmp then
53172: LD_VAR 0 6
53176: PUSH
53177: LD_VAR 0 4
53181: EQUAL
53182: IFFALSE 53186
// exit ;
53184: GO 55775
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
53186: LD_ADDR_EXP 102
53190: PUSH
53191: LD_EXP 102
53195: PPUSH
53196: LD_VAR 0 1
53200: PPUSH
53201: LD_INT 1
53203: PPUSH
53204: CALL_OW 1
53208: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
53209: LD_ADDR_VAR 0 2
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: LD_VAR 0 4
53221: PUSH
53222: LD_VAR 0 6
53226: DIFF
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: ST_TO_ADDR
// exit ;
53240: GO 55775
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
53242: LD_EXP 87
53246: PUSH
53247: LD_EXP 86
53251: PUSH
53252: LD_VAR 0 1
53256: ARRAY
53257: ARRAY
53258: PUSH
53259: LD_EXP 60
53263: PUSH
53264: LD_VAR 0 1
53268: ARRAY
53269: PPUSH
53270: LD_INT 2
53272: PUSH
53273: LD_INT 30
53275: PUSH
53276: LD_INT 6
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 30
53285: PUSH
53286: LD_INT 7
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 30
53295: PUSH
53296: LD_INT 8
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: PPUSH
53309: CALL_OW 72
53313: AND
53314: PUSH
53315: LD_EXP 60
53319: PUSH
53320: LD_VAR 0 1
53324: ARRAY
53325: PPUSH
53326: LD_INT 30
53328: PUSH
53329: LD_INT 3
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PPUSH
53336: CALL_OW 72
53340: NOT
53341: AND
53342: IFFALSE 53556
// begin if sci >= 6 then
53344: LD_VAR 0 8
53348: PUSH
53349: LD_INT 6
53351: GREATEREQUAL
53352: IFFALSE 53356
// exit ;
53354: GO 55775
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
53356: LD_ADDR_EXP 102
53360: PUSH
53361: LD_EXP 102
53365: PPUSH
53366: LD_VAR 0 1
53370: PPUSH
53371: LD_INT 2
53373: PPUSH
53374: CALL_OW 1
53378: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
53379: LD_ADDR_VAR 0 9
53383: PUSH
53384: LD_VAR 0 4
53388: PUSH
53389: LD_VAR 0 8
53393: DIFF
53394: PPUSH
53395: LD_INT 4
53397: PPUSH
53398: CALL 45677 0 2
53402: ST_TO_ADDR
// p := [ ] ;
53403: LD_ADDR_VAR 0 11
53407: PUSH
53408: EMPTY
53409: ST_TO_ADDR
// if sci < 6 and sort > 6 then
53410: LD_VAR 0 8
53414: PUSH
53415: LD_INT 6
53417: LESS
53418: PUSH
53419: LD_VAR 0 9
53423: PUSH
53424: LD_INT 6
53426: GREATER
53427: AND
53428: IFFALSE 53509
// begin for i = 1 to 6 - sci do
53430: LD_ADDR_VAR 0 3
53434: PUSH
53435: DOUBLE
53436: LD_INT 1
53438: DEC
53439: ST_TO_ADDR
53440: LD_INT 6
53442: PUSH
53443: LD_VAR 0 8
53447: MINUS
53448: PUSH
53449: FOR_TO
53450: IFFALSE 53505
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
53452: LD_ADDR_VAR 0 11
53456: PUSH
53457: LD_VAR 0 11
53461: PPUSH
53462: LD_VAR 0 11
53466: PUSH
53467: LD_INT 1
53469: PLUS
53470: PPUSH
53471: LD_VAR 0 9
53475: PUSH
53476: LD_INT 1
53478: ARRAY
53479: PPUSH
53480: CALL_OW 2
53484: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
53485: LD_ADDR_VAR 0 9
53489: PUSH
53490: LD_VAR 0 9
53494: PPUSH
53495: LD_INT 1
53497: PPUSH
53498: CALL_OW 3
53502: ST_TO_ADDR
// end ;
53503: GO 53449
53505: POP
53506: POP
// end else
53507: GO 53529
// if sort then
53509: LD_VAR 0 9
53513: IFFALSE 53529
// p := sort [ 1 ] ;
53515: LD_ADDR_VAR 0 11
53519: PUSH
53520: LD_VAR 0 9
53524: PUSH
53525: LD_INT 1
53527: ARRAY
53528: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
53529: LD_ADDR_VAR 0 2
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: LD_VAR 0 11
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: ST_TO_ADDR
// exit ;
53554: GO 55775
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
53556: LD_EXP 87
53560: PUSH
53561: LD_EXP 86
53565: PUSH
53566: LD_VAR 0 1
53570: ARRAY
53571: ARRAY
53572: PUSH
53573: LD_EXP 60
53577: PUSH
53578: LD_VAR 0 1
53582: ARRAY
53583: PPUSH
53584: LD_INT 2
53586: PUSH
53587: LD_INT 30
53589: PUSH
53590: LD_INT 6
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 30
53599: PUSH
53600: LD_INT 7
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 30
53609: PUSH
53610: LD_INT 8
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: PPUSH
53623: CALL_OW 72
53627: AND
53628: PUSH
53629: LD_EXP 60
53633: PUSH
53634: LD_VAR 0 1
53638: ARRAY
53639: PPUSH
53640: LD_INT 30
53642: PUSH
53643: LD_INT 3
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PPUSH
53650: CALL_OW 72
53654: AND
53655: IFFALSE 54389
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
53657: LD_ADDR_EXP 102
53661: PUSH
53662: LD_EXP 102
53666: PPUSH
53667: LD_VAR 0 1
53671: PPUSH
53672: LD_INT 3
53674: PPUSH
53675: CALL_OW 1
53679: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
53680: LD_ADDR_VAR 0 2
53684: PUSH
53685: LD_INT 0
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: ST_TO_ADDR
// if not eng then
53703: LD_VAR 0 6
53707: NOT
53708: IFFALSE 53771
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
53710: LD_ADDR_VAR 0 11
53714: PUSH
53715: LD_VAR 0 4
53719: PPUSH
53720: LD_INT 2
53722: PPUSH
53723: CALL 45677 0 2
53727: PUSH
53728: LD_INT 1
53730: ARRAY
53731: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
53732: LD_ADDR_VAR 0 2
53736: PUSH
53737: LD_VAR 0 2
53741: PPUSH
53742: LD_INT 2
53744: PPUSH
53745: LD_VAR 0 11
53749: PPUSH
53750: CALL_OW 1
53754: ST_TO_ADDR
// tmp := tmp diff p ;
53755: LD_ADDR_VAR 0 4
53759: PUSH
53760: LD_VAR 0 4
53764: PUSH
53765: LD_VAR 0 11
53769: DIFF
53770: ST_TO_ADDR
// end ; if tmp and sci < 6 then
53771: LD_VAR 0 4
53775: PUSH
53776: LD_VAR 0 8
53780: PUSH
53781: LD_INT 6
53783: LESS
53784: AND
53785: IFFALSE 53973
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
53787: LD_ADDR_VAR 0 9
53791: PUSH
53792: LD_VAR 0 4
53796: PUSH
53797: LD_VAR 0 8
53801: PUSH
53802: LD_VAR 0 7
53806: UNION
53807: DIFF
53808: PPUSH
53809: LD_INT 4
53811: PPUSH
53812: CALL 45677 0 2
53816: ST_TO_ADDR
// p := [ ] ;
53817: LD_ADDR_VAR 0 11
53821: PUSH
53822: EMPTY
53823: ST_TO_ADDR
// if sort then
53824: LD_VAR 0 9
53828: IFFALSE 53944
// for i = 1 to 6 - sci do
53830: LD_ADDR_VAR 0 3
53834: PUSH
53835: DOUBLE
53836: LD_INT 1
53838: DEC
53839: ST_TO_ADDR
53840: LD_INT 6
53842: PUSH
53843: LD_VAR 0 8
53847: MINUS
53848: PUSH
53849: FOR_TO
53850: IFFALSE 53942
// begin if i = sort then
53852: LD_VAR 0 3
53856: PUSH
53857: LD_VAR 0 9
53861: EQUAL
53862: IFFALSE 53866
// break ;
53864: GO 53942
// if GetClass ( i ) = 4 then
53866: LD_VAR 0 3
53870: PPUSH
53871: CALL_OW 257
53875: PUSH
53876: LD_INT 4
53878: EQUAL
53879: IFFALSE 53883
// continue ;
53881: GO 53849
// p := Insert ( p , p + 1 , sort [ i ] ) ;
53883: LD_ADDR_VAR 0 11
53887: PUSH
53888: LD_VAR 0 11
53892: PPUSH
53893: LD_VAR 0 11
53897: PUSH
53898: LD_INT 1
53900: PLUS
53901: PPUSH
53902: LD_VAR 0 9
53906: PUSH
53907: LD_VAR 0 3
53911: ARRAY
53912: PPUSH
53913: CALL_OW 2
53917: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
53918: LD_ADDR_VAR 0 4
53922: PUSH
53923: LD_VAR 0 4
53927: PUSH
53928: LD_VAR 0 9
53932: PUSH
53933: LD_VAR 0 3
53937: ARRAY
53938: DIFF
53939: ST_TO_ADDR
// end ;
53940: GO 53849
53942: POP
53943: POP
// if p then
53944: LD_VAR 0 11
53948: IFFALSE 53973
// result := Replace ( result , 4 , p ) ;
53950: LD_ADDR_VAR 0 2
53954: PUSH
53955: LD_VAR 0 2
53959: PPUSH
53960: LD_INT 4
53962: PPUSH
53963: LD_VAR 0 11
53967: PPUSH
53968: CALL_OW 1
53972: ST_TO_ADDR
// end ; if tmp and mech < 6 then
53973: LD_VAR 0 4
53977: PUSH
53978: LD_VAR 0 7
53982: PUSH
53983: LD_INT 6
53985: LESS
53986: AND
53987: IFFALSE 54175
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
53989: LD_ADDR_VAR 0 9
53993: PUSH
53994: LD_VAR 0 4
53998: PUSH
53999: LD_VAR 0 8
54003: PUSH
54004: LD_VAR 0 7
54008: UNION
54009: DIFF
54010: PPUSH
54011: LD_INT 3
54013: PPUSH
54014: CALL 45677 0 2
54018: ST_TO_ADDR
// p := [ ] ;
54019: LD_ADDR_VAR 0 11
54023: PUSH
54024: EMPTY
54025: ST_TO_ADDR
// if sort then
54026: LD_VAR 0 9
54030: IFFALSE 54146
// for i = 1 to 6 - mech do
54032: LD_ADDR_VAR 0 3
54036: PUSH
54037: DOUBLE
54038: LD_INT 1
54040: DEC
54041: ST_TO_ADDR
54042: LD_INT 6
54044: PUSH
54045: LD_VAR 0 7
54049: MINUS
54050: PUSH
54051: FOR_TO
54052: IFFALSE 54144
// begin if i = sort then
54054: LD_VAR 0 3
54058: PUSH
54059: LD_VAR 0 9
54063: EQUAL
54064: IFFALSE 54068
// break ;
54066: GO 54144
// if GetClass ( i ) = 3 then
54068: LD_VAR 0 3
54072: PPUSH
54073: CALL_OW 257
54077: PUSH
54078: LD_INT 3
54080: EQUAL
54081: IFFALSE 54085
// continue ;
54083: GO 54051
// p := Insert ( p , p + 1 , sort [ i ] ) ;
54085: LD_ADDR_VAR 0 11
54089: PUSH
54090: LD_VAR 0 11
54094: PPUSH
54095: LD_VAR 0 11
54099: PUSH
54100: LD_INT 1
54102: PLUS
54103: PPUSH
54104: LD_VAR 0 9
54108: PUSH
54109: LD_VAR 0 3
54113: ARRAY
54114: PPUSH
54115: CALL_OW 2
54119: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
54120: LD_ADDR_VAR 0 4
54124: PUSH
54125: LD_VAR 0 4
54129: PUSH
54130: LD_VAR 0 9
54134: PUSH
54135: LD_VAR 0 3
54139: ARRAY
54140: DIFF
54141: ST_TO_ADDR
// end ;
54142: GO 54051
54144: POP
54145: POP
// if p then
54146: LD_VAR 0 11
54150: IFFALSE 54175
// result := Replace ( result , 3 , p ) ;
54152: LD_ADDR_VAR 0 2
54156: PUSH
54157: LD_VAR 0 2
54161: PPUSH
54162: LD_INT 3
54164: PPUSH
54165: LD_VAR 0 11
54169: PPUSH
54170: CALL_OW 1
54174: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
54175: LD_VAR 0 4
54179: PUSH
54180: LD_INT 6
54182: GREATER
54183: PUSH
54184: LD_VAR 0 6
54188: PUSH
54189: LD_INT 6
54191: LESS
54192: AND
54193: IFFALSE 54387
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
54195: LD_ADDR_VAR 0 9
54199: PUSH
54200: LD_VAR 0 4
54204: PUSH
54205: LD_VAR 0 8
54209: PUSH
54210: LD_VAR 0 7
54214: UNION
54215: PUSH
54216: LD_VAR 0 6
54220: UNION
54221: DIFF
54222: PPUSH
54223: LD_INT 2
54225: PPUSH
54226: CALL 45677 0 2
54230: ST_TO_ADDR
// p := [ ] ;
54231: LD_ADDR_VAR 0 11
54235: PUSH
54236: EMPTY
54237: ST_TO_ADDR
// if sort then
54238: LD_VAR 0 9
54242: IFFALSE 54358
// for i = 1 to 6 - eng do
54244: LD_ADDR_VAR 0 3
54248: PUSH
54249: DOUBLE
54250: LD_INT 1
54252: DEC
54253: ST_TO_ADDR
54254: LD_INT 6
54256: PUSH
54257: LD_VAR 0 6
54261: MINUS
54262: PUSH
54263: FOR_TO
54264: IFFALSE 54356
// begin if i = sort then
54266: LD_VAR 0 3
54270: PUSH
54271: LD_VAR 0 9
54275: EQUAL
54276: IFFALSE 54280
// break ;
54278: GO 54356
// if GetClass ( i ) = 2 then
54280: LD_VAR 0 3
54284: PPUSH
54285: CALL_OW 257
54289: PUSH
54290: LD_INT 2
54292: EQUAL
54293: IFFALSE 54297
// continue ;
54295: GO 54263
// p := Insert ( p , p + 1 , sort [ i ] ) ;
54297: LD_ADDR_VAR 0 11
54301: PUSH
54302: LD_VAR 0 11
54306: PPUSH
54307: LD_VAR 0 11
54311: PUSH
54312: LD_INT 1
54314: PLUS
54315: PPUSH
54316: LD_VAR 0 9
54320: PUSH
54321: LD_VAR 0 3
54325: ARRAY
54326: PPUSH
54327: CALL_OW 2
54331: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
54332: LD_ADDR_VAR 0 4
54336: PUSH
54337: LD_VAR 0 4
54341: PUSH
54342: LD_VAR 0 9
54346: PUSH
54347: LD_VAR 0 3
54351: ARRAY
54352: DIFF
54353: ST_TO_ADDR
// end ;
54354: GO 54263
54356: POP
54357: POP
// if p then
54358: LD_VAR 0 11
54362: IFFALSE 54387
// result := Replace ( result , 2 , p ) ;
54364: LD_ADDR_VAR 0 2
54368: PUSH
54369: LD_VAR 0 2
54373: PPUSH
54374: LD_INT 2
54376: PPUSH
54377: LD_VAR 0 11
54381: PPUSH
54382: CALL_OW 1
54386: ST_TO_ADDR
// end ; exit ;
54387: GO 55775
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
54389: LD_EXP 87
54393: PUSH
54394: LD_EXP 86
54398: PUSH
54399: LD_VAR 0 1
54403: ARRAY
54404: ARRAY
54405: NOT
54406: PUSH
54407: LD_EXP 60
54411: PUSH
54412: LD_VAR 0 1
54416: ARRAY
54417: PPUSH
54418: LD_INT 30
54420: PUSH
54421: LD_INT 3
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PPUSH
54428: CALL_OW 72
54432: AND
54433: PUSH
54434: LD_EXP 65
54438: PUSH
54439: LD_VAR 0 1
54443: ARRAY
54444: AND
54445: IFFALSE 55053
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
54447: LD_ADDR_EXP 102
54451: PUSH
54452: LD_EXP 102
54456: PPUSH
54457: LD_VAR 0 1
54461: PPUSH
54462: LD_INT 5
54464: PPUSH
54465: CALL_OW 1
54469: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
54470: LD_ADDR_VAR 0 2
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: ST_TO_ADDR
// if sci > 1 then
54493: LD_VAR 0 8
54497: PUSH
54498: LD_INT 1
54500: GREATER
54501: IFFALSE 54529
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
54503: LD_ADDR_VAR 0 4
54507: PUSH
54508: LD_VAR 0 4
54512: PUSH
54513: LD_VAR 0 8
54517: PUSH
54518: LD_VAR 0 8
54522: PUSH
54523: LD_INT 1
54525: ARRAY
54526: DIFF
54527: DIFF
54528: ST_TO_ADDR
// if tmp and not sci then
54529: LD_VAR 0 4
54533: PUSH
54534: LD_VAR 0 8
54538: NOT
54539: AND
54540: IFFALSE 54609
// begin sort := SortBySkill ( tmp , 4 ) ;
54542: LD_ADDR_VAR 0 9
54546: PUSH
54547: LD_VAR 0 4
54551: PPUSH
54552: LD_INT 4
54554: PPUSH
54555: CALL 45677 0 2
54559: ST_TO_ADDR
// if sort then
54560: LD_VAR 0 9
54564: IFFALSE 54580
// p := sort [ 1 ] ;
54566: LD_ADDR_VAR 0 11
54570: PUSH
54571: LD_VAR 0 9
54575: PUSH
54576: LD_INT 1
54578: ARRAY
54579: ST_TO_ADDR
// if p then
54580: LD_VAR 0 11
54584: IFFALSE 54609
// result := Replace ( result , 4 , p ) ;
54586: LD_ADDR_VAR 0 2
54590: PUSH
54591: LD_VAR 0 2
54595: PPUSH
54596: LD_INT 4
54598: PPUSH
54599: LD_VAR 0 11
54603: PPUSH
54604: CALL_OW 1
54608: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
54609: LD_ADDR_VAR 0 4
54613: PUSH
54614: LD_VAR 0 4
54618: PUSH
54619: LD_VAR 0 7
54623: DIFF
54624: ST_TO_ADDR
// if tmp and mech < 6 then
54625: LD_VAR 0 4
54629: PUSH
54630: LD_VAR 0 7
54634: PUSH
54635: LD_INT 6
54637: LESS
54638: AND
54639: IFFALSE 54827
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
54641: LD_ADDR_VAR 0 9
54645: PUSH
54646: LD_VAR 0 4
54650: PUSH
54651: LD_VAR 0 8
54655: PUSH
54656: LD_VAR 0 7
54660: UNION
54661: DIFF
54662: PPUSH
54663: LD_INT 3
54665: PPUSH
54666: CALL 45677 0 2
54670: ST_TO_ADDR
// p := [ ] ;
54671: LD_ADDR_VAR 0 11
54675: PUSH
54676: EMPTY
54677: ST_TO_ADDR
// if sort then
54678: LD_VAR 0 9
54682: IFFALSE 54798
// for i = 1 to 6 - mech do
54684: LD_ADDR_VAR 0 3
54688: PUSH
54689: DOUBLE
54690: LD_INT 1
54692: DEC
54693: ST_TO_ADDR
54694: LD_INT 6
54696: PUSH
54697: LD_VAR 0 7
54701: MINUS
54702: PUSH
54703: FOR_TO
54704: IFFALSE 54796
// begin if i = sort then
54706: LD_VAR 0 3
54710: PUSH
54711: LD_VAR 0 9
54715: EQUAL
54716: IFFALSE 54720
// break ;
54718: GO 54796
// if GetClass ( i ) = 3 then
54720: LD_VAR 0 3
54724: PPUSH
54725: CALL_OW 257
54729: PUSH
54730: LD_INT 3
54732: EQUAL
54733: IFFALSE 54737
// continue ;
54735: GO 54703
// p := Insert ( p , p + 1 , sort [ i ] ) ;
54737: LD_ADDR_VAR 0 11
54741: PUSH
54742: LD_VAR 0 11
54746: PPUSH
54747: LD_VAR 0 11
54751: PUSH
54752: LD_INT 1
54754: PLUS
54755: PPUSH
54756: LD_VAR 0 9
54760: PUSH
54761: LD_VAR 0 3
54765: ARRAY
54766: PPUSH
54767: CALL_OW 2
54771: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
54772: LD_ADDR_VAR 0 4
54776: PUSH
54777: LD_VAR 0 4
54781: PUSH
54782: LD_VAR 0 9
54786: PUSH
54787: LD_VAR 0 3
54791: ARRAY
54792: DIFF
54793: ST_TO_ADDR
// end ;
54794: GO 54703
54796: POP
54797: POP
// if p then
54798: LD_VAR 0 11
54802: IFFALSE 54827
// result := Replace ( result , 3 , p ) ;
54804: LD_ADDR_VAR 0 2
54808: PUSH
54809: LD_VAR 0 2
54813: PPUSH
54814: LD_INT 3
54816: PPUSH
54817: LD_VAR 0 11
54821: PPUSH
54822: CALL_OW 1
54826: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
54827: LD_ADDR_VAR 0 4
54831: PUSH
54832: LD_VAR 0 4
54836: PUSH
54837: LD_VAR 0 6
54841: DIFF
54842: ST_TO_ADDR
// if tmp and eng < 6 then
54843: LD_VAR 0 4
54847: PUSH
54848: LD_VAR 0 6
54852: PUSH
54853: LD_INT 6
54855: LESS
54856: AND
54857: IFFALSE 55051
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
54859: LD_ADDR_VAR 0 9
54863: PUSH
54864: LD_VAR 0 4
54868: PUSH
54869: LD_VAR 0 8
54873: PUSH
54874: LD_VAR 0 7
54878: UNION
54879: PUSH
54880: LD_VAR 0 6
54884: UNION
54885: DIFF
54886: PPUSH
54887: LD_INT 2
54889: PPUSH
54890: CALL 45677 0 2
54894: ST_TO_ADDR
// p := [ ] ;
54895: LD_ADDR_VAR 0 11
54899: PUSH
54900: EMPTY
54901: ST_TO_ADDR
// if sort then
54902: LD_VAR 0 9
54906: IFFALSE 55022
// for i = 1 to 6 - eng do
54908: LD_ADDR_VAR 0 3
54912: PUSH
54913: DOUBLE
54914: LD_INT 1
54916: DEC
54917: ST_TO_ADDR
54918: LD_INT 6
54920: PUSH
54921: LD_VAR 0 6
54925: MINUS
54926: PUSH
54927: FOR_TO
54928: IFFALSE 55020
// begin if i = sort then
54930: LD_VAR 0 3
54934: PUSH
54935: LD_VAR 0 9
54939: EQUAL
54940: IFFALSE 54944
// break ;
54942: GO 55020
// if GetClass ( i ) = 2 then
54944: LD_VAR 0 3
54948: PPUSH
54949: CALL_OW 257
54953: PUSH
54954: LD_INT 2
54956: EQUAL
54957: IFFALSE 54961
// continue ;
54959: GO 54927
// p := Insert ( p , p + 1 , sort [ i ] ) ;
54961: LD_ADDR_VAR 0 11
54965: PUSH
54966: LD_VAR 0 11
54970: PPUSH
54971: LD_VAR 0 11
54975: PUSH
54976: LD_INT 1
54978: PLUS
54979: PPUSH
54980: LD_VAR 0 9
54984: PUSH
54985: LD_VAR 0 3
54989: ARRAY
54990: PPUSH
54991: CALL_OW 2
54995: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
54996: LD_ADDR_VAR 0 4
55000: PUSH
55001: LD_VAR 0 4
55005: PUSH
55006: LD_VAR 0 9
55010: PUSH
55011: LD_VAR 0 3
55015: ARRAY
55016: DIFF
55017: ST_TO_ADDR
// end ;
55018: GO 54927
55020: POP
55021: POP
// if p then
55022: LD_VAR 0 11
55026: IFFALSE 55051
// result := Replace ( result , 2 , p ) ;
55028: LD_ADDR_VAR 0 2
55032: PUSH
55033: LD_VAR 0 2
55037: PPUSH
55038: LD_INT 2
55040: PPUSH
55041: LD_VAR 0 11
55045: PPUSH
55046: CALL_OW 1
55050: ST_TO_ADDR
// end ; exit ;
55051: GO 55775
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
55053: LD_EXP 87
55057: PUSH
55058: LD_EXP 86
55062: PUSH
55063: LD_VAR 0 1
55067: ARRAY
55068: ARRAY
55069: NOT
55070: PUSH
55071: LD_EXP 60
55075: PUSH
55076: LD_VAR 0 1
55080: ARRAY
55081: PPUSH
55082: LD_INT 30
55084: PUSH
55085: LD_INT 3
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PPUSH
55092: CALL_OW 72
55096: AND
55097: PUSH
55098: LD_EXP 65
55102: PUSH
55103: LD_VAR 0 1
55107: ARRAY
55108: NOT
55109: AND
55110: IFFALSE 55775
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
55112: LD_ADDR_EXP 102
55116: PUSH
55117: LD_EXP 102
55121: PPUSH
55122: LD_VAR 0 1
55126: PPUSH
55127: LD_INT 6
55129: PPUSH
55130: CALL_OW 1
55134: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
55135: LD_ADDR_VAR 0 2
55139: PUSH
55140: LD_INT 0
55142: PUSH
55143: LD_INT 0
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: ST_TO_ADDR
// if sci >= 1 then
55158: LD_VAR 0 8
55162: PUSH
55163: LD_INT 1
55165: GREATEREQUAL
55166: IFFALSE 55188
// tmp := tmp diff sci [ 1 ] ;
55168: LD_ADDR_VAR 0 4
55172: PUSH
55173: LD_VAR 0 4
55177: PUSH
55178: LD_VAR 0 8
55182: PUSH
55183: LD_INT 1
55185: ARRAY
55186: DIFF
55187: ST_TO_ADDR
// if tmp and not sci then
55188: LD_VAR 0 4
55192: PUSH
55193: LD_VAR 0 8
55197: NOT
55198: AND
55199: IFFALSE 55268
// begin sort := SortBySkill ( tmp , 4 ) ;
55201: LD_ADDR_VAR 0 9
55205: PUSH
55206: LD_VAR 0 4
55210: PPUSH
55211: LD_INT 4
55213: PPUSH
55214: CALL 45677 0 2
55218: ST_TO_ADDR
// if sort then
55219: LD_VAR 0 9
55223: IFFALSE 55239
// p := sort [ 1 ] ;
55225: LD_ADDR_VAR 0 11
55229: PUSH
55230: LD_VAR 0 9
55234: PUSH
55235: LD_INT 1
55237: ARRAY
55238: ST_TO_ADDR
// if p then
55239: LD_VAR 0 11
55243: IFFALSE 55268
// result := Replace ( result , 4 , p ) ;
55245: LD_ADDR_VAR 0 2
55249: PUSH
55250: LD_VAR 0 2
55254: PPUSH
55255: LD_INT 4
55257: PPUSH
55258: LD_VAR 0 11
55262: PPUSH
55263: CALL_OW 1
55267: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
55268: LD_ADDR_VAR 0 4
55272: PUSH
55273: LD_VAR 0 4
55277: PUSH
55278: LD_VAR 0 7
55282: DIFF
55283: ST_TO_ADDR
// if tmp and mech < 6 then
55284: LD_VAR 0 4
55288: PUSH
55289: LD_VAR 0 7
55293: PUSH
55294: LD_INT 6
55296: LESS
55297: AND
55298: IFFALSE 55480
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
55300: LD_ADDR_VAR 0 9
55304: PUSH
55305: LD_VAR 0 4
55309: PUSH
55310: LD_VAR 0 7
55314: DIFF
55315: PPUSH
55316: LD_INT 3
55318: PPUSH
55319: CALL 45677 0 2
55323: ST_TO_ADDR
// p := [ ] ;
55324: LD_ADDR_VAR 0 11
55328: PUSH
55329: EMPTY
55330: ST_TO_ADDR
// if sort then
55331: LD_VAR 0 9
55335: IFFALSE 55451
// for i = 1 to 6 - mech do
55337: LD_ADDR_VAR 0 3
55341: PUSH
55342: DOUBLE
55343: LD_INT 1
55345: DEC
55346: ST_TO_ADDR
55347: LD_INT 6
55349: PUSH
55350: LD_VAR 0 7
55354: MINUS
55355: PUSH
55356: FOR_TO
55357: IFFALSE 55449
// begin if i = sort then
55359: LD_VAR 0 3
55363: PUSH
55364: LD_VAR 0 9
55368: EQUAL
55369: IFFALSE 55373
// break ;
55371: GO 55449
// if GetClass ( i ) = 3 then
55373: LD_VAR 0 3
55377: PPUSH
55378: CALL_OW 257
55382: PUSH
55383: LD_INT 3
55385: EQUAL
55386: IFFALSE 55390
// continue ;
55388: GO 55356
// p := Insert ( p , p + 1 , sort [ i ] ) ;
55390: LD_ADDR_VAR 0 11
55394: PUSH
55395: LD_VAR 0 11
55399: PPUSH
55400: LD_VAR 0 11
55404: PUSH
55405: LD_INT 1
55407: PLUS
55408: PPUSH
55409: LD_VAR 0 9
55413: PUSH
55414: LD_VAR 0 3
55418: ARRAY
55419: PPUSH
55420: CALL_OW 2
55424: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
55425: LD_ADDR_VAR 0 4
55429: PUSH
55430: LD_VAR 0 4
55434: PUSH
55435: LD_VAR 0 9
55439: PUSH
55440: LD_VAR 0 3
55444: ARRAY
55445: DIFF
55446: ST_TO_ADDR
// end ;
55447: GO 55356
55449: POP
55450: POP
// if p then
55451: LD_VAR 0 11
55455: IFFALSE 55480
// result := Replace ( result , 3 , p ) ;
55457: LD_ADDR_VAR 0 2
55461: PUSH
55462: LD_VAR 0 2
55466: PPUSH
55467: LD_INT 3
55469: PPUSH
55470: LD_VAR 0 11
55474: PPUSH
55475: CALL_OW 1
55479: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
55480: LD_ADDR_VAR 0 4
55484: PUSH
55485: LD_VAR 0 4
55489: PUSH
55490: LD_VAR 0 6
55494: DIFF
55495: ST_TO_ADDR
// if tmp and eng < 4 then
55496: LD_VAR 0 4
55500: PUSH
55501: LD_VAR 0 6
55505: PUSH
55506: LD_INT 4
55508: LESS
55509: AND
55510: IFFALSE 55700
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
55512: LD_ADDR_VAR 0 9
55516: PUSH
55517: LD_VAR 0 4
55521: PUSH
55522: LD_VAR 0 7
55526: PUSH
55527: LD_VAR 0 6
55531: UNION
55532: DIFF
55533: PPUSH
55534: LD_INT 2
55536: PPUSH
55537: CALL 45677 0 2
55541: ST_TO_ADDR
// p := [ ] ;
55542: LD_ADDR_VAR 0 11
55546: PUSH
55547: EMPTY
55548: ST_TO_ADDR
// if sort then
55549: LD_VAR 0 9
55553: IFFALSE 55669
// for i = 1 to 4 - eng do
55555: LD_ADDR_VAR 0 3
55559: PUSH
55560: DOUBLE
55561: LD_INT 1
55563: DEC
55564: ST_TO_ADDR
55565: LD_INT 4
55567: PUSH
55568: LD_VAR 0 6
55572: MINUS
55573: PUSH
55574: FOR_TO
55575: IFFALSE 55667
// begin if i = sort then
55577: LD_VAR 0 3
55581: PUSH
55582: LD_VAR 0 9
55586: EQUAL
55587: IFFALSE 55591
// break ;
55589: GO 55667
// if GetClass ( i ) = 2 then
55591: LD_VAR 0 3
55595: PPUSH
55596: CALL_OW 257
55600: PUSH
55601: LD_INT 2
55603: EQUAL
55604: IFFALSE 55608
// continue ;
55606: GO 55574
// p := Insert ( p , p + 1 , sort [ i ] ) ;
55608: LD_ADDR_VAR 0 11
55612: PUSH
55613: LD_VAR 0 11
55617: PPUSH
55618: LD_VAR 0 11
55622: PUSH
55623: LD_INT 1
55625: PLUS
55626: PPUSH
55627: LD_VAR 0 9
55631: PUSH
55632: LD_VAR 0 3
55636: ARRAY
55637: PPUSH
55638: CALL_OW 2
55642: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
55643: LD_ADDR_VAR 0 4
55647: PUSH
55648: LD_VAR 0 4
55652: PUSH
55653: LD_VAR 0 9
55657: PUSH
55658: LD_VAR 0 3
55662: ARRAY
55663: DIFF
55664: ST_TO_ADDR
// end ;
55665: GO 55574
55667: POP
55668: POP
// if p then
55669: LD_VAR 0 11
55673: IFFALSE 55698
// result := Replace ( result , 2 , p ) ;
55675: LD_ADDR_VAR 0 2
55679: PUSH
55680: LD_VAR 0 2
55684: PPUSH
55685: LD_INT 2
55687: PPUSH
55688: LD_VAR 0 11
55692: PPUSH
55693: CALL_OW 1
55697: ST_TO_ADDR
// end else
55698: GO 55744
// for i = eng downto 5 do
55700: LD_ADDR_VAR 0 3
55704: PUSH
55705: DOUBLE
55706: LD_VAR 0 6
55710: INC
55711: ST_TO_ADDR
55712: LD_INT 5
55714: PUSH
55715: FOR_DOWNTO
55716: IFFALSE 55742
// tmp := tmp union eng [ i ] ;
55718: LD_ADDR_VAR 0 4
55722: PUSH
55723: LD_VAR 0 4
55727: PUSH
55728: LD_VAR 0 6
55732: PUSH
55733: LD_VAR 0 3
55737: ARRAY
55738: UNION
55739: ST_TO_ADDR
55740: GO 55715
55742: POP
55743: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
55744: LD_ADDR_VAR 0 2
55748: PUSH
55749: LD_VAR 0 2
55753: PPUSH
55754: LD_INT 1
55756: PPUSH
55757: LD_VAR 0 4
55761: PUSH
55762: LD_VAR 0 5
55766: DIFF
55767: PPUSH
55768: CALL_OW 1
55772: ST_TO_ADDR
// exit ;
55773: GO 55775
// end ; end ;
55775: LD_VAR 0 2
55779: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
55780: LD_INT 0
55782: PPUSH
55783: PPUSH
55784: PPUSH
// if not mc_bases then
55785: LD_EXP 60
55789: NOT
55790: IFFALSE 55794
// exit ;
55792: GO 55900
// for i = 1 to mc_bases do
55794: LD_ADDR_VAR 0 2
55798: PUSH
55799: DOUBLE
55800: LD_INT 1
55802: DEC
55803: ST_TO_ADDR
55804: LD_EXP 60
55808: PUSH
55809: FOR_TO
55810: IFFALSE 55891
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
55812: LD_ADDR_VAR 0 3
55816: PUSH
55817: LD_EXP 60
55821: PUSH
55822: LD_VAR 0 2
55826: ARRAY
55827: PPUSH
55828: LD_INT 21
55830: PUSH
55831: LD_INT 3
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 3
55840: PUSH
55841: LD_INT 24
55843: PUSH
55844: LD_INT 1000
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PPUSH
55859: CALL_OW 72
55863: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
55864: LD_ADDR_EXP 61
55868: PUSH
55869: LD_EXP 61
55873: PPUSH
55874: LD_VAR 0 2
55878: PPUSH
55879: LD_VAR 0 3
55883: PPUSH
55884: CALL_OW 1
55888: ST_TO_ADDR
// end ;
55889: GO 55809
55891: POP
55892: POP
// RaiseSailEvent ( 101 ) ;
55893: LD_INT 101
55895: PPUSH
55896: CALL_OW 427
// end ;
55900: LD_VAR 0 1
55904: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
55905: LD_INT 0
55907: PPUSH
55908: PPUSH
55909: PPUSH
55910: PPUSH
55911: PPUSH
55912: PPUSH
55913: PPUSH
// if not mc_bases then
55914: LD_EXP 60
55918: NOT
55919: IFFALSE 55923
// exit ;
55921: GO 56485
// for i = 1 to mc_bases do
55923: LD_ADDR_VAR 0 2
55927: PUSH
55928: DOUBLE
55929: LD_INT 1
55931: DEC
55932: ST_TO_ADDR
55933: LD_EXP 60
55937: PUSH
55938: FOR_TO
55939: IFFALSE 56476
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
55941: LD_ADDR_VAR 0 5
55945: PUSH
55946: LD_EXP 60
55950: PUSH
55951: LD_VAR 0 2
55955: ARRAY
55956: PUSH
55957: LD_EXP 89
55961: PUSH
55962: LD_VAR 0 2
55966: ARRAY
55967: UNION
55968: PPUSH
55969: LD_INT 21
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 1
55981: PUSH
55982: LD_INT 3
55984: PUSH
55985: LD_INT 54
55987: PUSH
55988: EMPTY
55989: LIST
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 3
55997: PUSH
55998: LD_INT 24
56000: PUSH
56001: LD_INT 800
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: LIST
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PPUSH
56021: CALL_OW 72
56025: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
56026: LD_ADDR_VAR 0 6
56030: PUSH
56031: LD_EXP 60
56035: PUSH
56036: LD_VAR 0 2
56040: ARRAY
56041: PPUSH
56042: LD_INT 21
56044: PUSH
56045: LD_INT 1
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 1
56054: PUSH
56055: LD_INT 3
56057: PUSH
56058: LD_INT 54
56060: PUSH
56061: EMPTY
56062: LIST
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 3
56070: PUSH
56071: LD_INT 24
56073: PUSH
56074: LD_INT 250
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: LIST
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PPUSH
56094: CALL_OW 72
56098: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
56099: LD_ADDR_VAR 0 7
56103: PUSH
56104: LD_VAR 0 5
56108: PUSH
56109: LD_VAR 0 6
56113: DIFF
56114: ST_TO_ADDR
// if not need_heal_1 then
56115: LD_VAR 0 6
56119: NOT
56120: IFFALSE 56153
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
56122: LD_ADDR_EXP 63
56126: PUSH
56127: LD_EXP 63
56131: PPUSH
56132: LD_VAR 0 2
56136: PUSH
56137: LD_INT 1
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PPUSH
56144: EMPTY
56145: PPUSH
56146: CALL 16128 0 3
56150: ST_TO_ADDR
56151: GO 56223
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
56153: LD_ADDR_EXP 63
56157: PUSH
56158: LD_EXP 63
56162: PPUSH
56163: LD_VAR 0 2
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PPUSH
56175: LD_EXP 63
56179: PUSH
56180: LD_VAR 0 2
56184: ARRAY
56185: PUSH
56186: LD_INT 1
56188: ARRAY
56189: PPUSH
56190: LD_INT 3
56192: PUSH
56193: LD_INT 24
56195: PUSH
56196: LD_INT 1000
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PPUSH
56207: CALL_OW 72
56211: PUSH
56212: LD_VAR 0 6
56216: UNION
56217: PPUSH
56218: CALL 16128 0 3
56222: ST_TO_ADDR
// if not need_heal_2 then
56223: LD_VAR 0 7
56227: NOT
56228: IFFALSE 56261
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
56230: LD_ADDR_EXP 63
56234: PUSH
56235: LD_EXP 63
56239: PPUSH
56240: LD_VAR 0 2
56244: PUSH
56245: LD_INT 2
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PPUSH
56252: EMPTY
56253: PPUSH
56254: CALL 16128 0 3
56258: ST_TO_ADDR
56259: GO 56293
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
56261: LD_ADDR_EXP 63
56265: PUSH
56266: LD_EXP 63
56270: PPUSH
56271: LD_VAR 0 2
56275: PUSH
56276: LD_INT 2
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PPUSH
56283: LD_VAR 0 7
56287: PPUSH
56288: CALL 16128 0 3
56292: ST_TO_ADDR
// if need_heal_2 then
56293: LD_VAR 0 7
56297: IFFALSE 56458
// for j in need_heal_2 do
56299: LD_ADDR_VAR 0 3
56303: PUSH
56304: LD_VAR 0 7
56308: PUSH
56309: FOR_IN
56310: IFFALSE 56456
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
56312: LD_ADDR_VAR 0 5
56316: PUSH
56317: LD_EXP 60
56321: PUSH
56322: LD_VAR 0 2
56326: ARRAY
56327: PPUSH
56328: LD_INT 2
56330: PUSH
56331: LD_INT 30
56333: PUSH
56334: LD_INT 6
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 30
56343: PUSH
56344: LD_INT 7
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 30
56353: PUSH
56354: LD_INT 8
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 30
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 30
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: PPUSH
56389: CALL_OW 72
56393: ST_TO_ADDR
// if tmp then
56394: LD_VAR 0 5
56398: IFFALSE 56454
// begin k := NearestUnitToUnit ( tmp , j ) ;
56400: LD_ADDR_VAR 0 4
56404: PUSH
56405: LD_VAR 0 5
56409: PPUSH
56410: LD_VAR 0 3
56414: PPUSH
56415: CALL_OW 74
56419: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
56420: LD_VAR 0 3
56424: PPUSH
56425: LD_VAR 0 4
56429: PPUSH
56430: CALL_OW 296
56434: PUSH
56435: LD_INT 5
56437: GREATER
56438: IFFALSE 56454
// ComMoveUnit ( j , k ) ;
56440: LD_VAR 0 3
56444: PPUSH
56445: LD_VAR 0 4
56449: PPUSH
56450: CALL_OW 112
// end ; end ;
56454: GO 56309
56456: POP
56457: POP
// if not need_heal_1 and not need_heal_2 then
56458: LD_VAR 0 6
56462: NOT
56463: PUSH
56464: LD_VAR 0 7
56468: NOT
56469: AND
56470: IFFALSE 56474
// continue ;
56472: GO 55938
// end ;
56474: GO 55938
56476: POP
56477: POP
// RaiseSailEvent ( 102 ) ;
56478: LD_INT 102
56480: PPUSH
56481: CALL_OW 427
// end ;
56485: LD_VAR 0 1
56489: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
56490: LD_INT 0
56492: PPUSH
56493: PPUSH
56494: PPUSH
56495: PPUSH
56496: PPUSH
56497: PPUSH
56498: PPUSH
56499: PPUSH
// if not mc_bases then
56500: LD_EXP 60
56504: NOT
56505: IFFALSE 56509
// exit ;
56507: GO 57344
// for i = 1 to mc_bases do
56509: LD_ADDR_VAR 0 2
56513: PUSH
56514: DOUBLE
56515: LD_INT 1
56517: DEC
56518: ST_TO_ADDR
56519: LD_EXP 60
56523: PUSH
56524: FOR_TO
56525: IFFALSE 57342
// begin if not mc_building_need_repair [ i ] then
56527: LD_EXP 61
56531: PUSH
56532: LD_VAR 0 2
56536: ARRAY
56537: NOT
56538: IFFALSE 56712
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
56540: LD_ADDR_VAR 0 6
56544: PUSH
56545: LD_EXP 79
56549: PUSH
56550: LD_VAR 0 2
56554: ARRAY
56555: PPUSH
56556: LD_INT 3
56558: PUSH
56559: LD_INT 24
56561: PUSH
56562: LD_INT 1000
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 2
56575: PUSH
56576: LD_INT 34
56578: PUSH
56579: LD_INT 13
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 34
56588: PUSH
56589: LD_INT 52
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: LIST
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PPUSH
56605: CALL_OW 72
56609: ST_TO_ADDR
// if cranes then
56610: LD_VAR 0 6
56614: IFFALSE 56676
// for j in cranes do
56616: LD_ADDR_VAR 0 3
56620: PUSH
56621: LD_VAR 0 6
56625: PUSH
56626: FOR_IN
56627: IFFALSE 56674
// if not IsInArea ( j , mc_parking [ i ] ) then
56629: LD_VAR 0 3
56633: PPUSH
56634: LD_EXP 84
56638: PUSH
56639: LD_VAR 0 2
56643: ARRAY
56644: PPUSH
56645: CALL_OW 308
56649: NOT
56650: IFFALSE 56672
// ComMoveToArea ( j , mc_parking [ i ] ) ;
56652: LD_VAR 0 3
56656: PPUSH
56657: LD_EXP 84
56661: PUSH
56662: LD_VAR 0 2
56666: ARRAY
56667: PPUSH
56668: CALL_OW 113
56672: GO 56626
56674: POP
56675: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
56676: LD_ADDR_EXP 62
56680: PUSH
56681: LD_EXP 62
56685: PPUSH
56686: LD_VAR 0 2
56690: PPUSH
56691: EMPTY
56692: PPUSH
56693: CALL_OW 1
56697: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
56698: LD_VAR 0 2
56702: PPUSH
56703: LD_INT 101
56705: PPUSH
56706: CALL 51613 0 2
// continue ;
56710: GO 56524
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
56712: LD_ADDR_EXP 66
56716: PUSH
56717: LD_EXP 66
56721: PPUSH
56722: LD_VAR 0 2
56726: PPUSH
56727: EMPTY
56728: PPUSH
56729: CALL_OW 1
56733: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
56734: LD_VAR 0 2
56738: PPUSH
56739: LD_INT 103
56741: PPUSH
56742: CALL 51613 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
56746: LD_ADDR_VAR 0 5
56750: PUSH
56751: LD_EXP 60
56755: PUSH
56756: LD_VAR 0 2
56760: ARRAY
56761: PUSH
56762: LD_EXP 89
56766: PUSH
56767: LD_VAR 0 2
56771: ARRAY
56772: UNION
56773: PPUSH
56774: LD_INT 2
56776: PUSH
56777: LD_INT 25
56779: PUSH
56780: LD_INT 2
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 25
56789: PUSH
56790: LD_INT 16
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: LIST
56801: PUSH
56802: EMPTY
56803: LIST
56804: PPUSH
56805: CALL_OW 72
56809: PUSH
56810: LD_EXP 63
56814: PUSH
56815: LD_VAR 0 2
56819: ARRAY
56820: PUSH
56821: LD_INT 1
56823: ARRAY
56824: PUSH
56825: LD_EXP 63
56829: PUSH
56830: LD_VAR 0 2
56834: ARRAY
56835: PUSH
56836: LD_INT 2
56838: ARRAY
56839: UNION
56840: DIFF
56841: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
56842: LD_ADDR_VAR 0 6
56846: PUSH
56847: LD_EXP 79
56851: PUSH
56852: LD_VAR 0 2
56856: ARRAY
56857: PPUSH
56858: LD_INT 2
56860: PUSH
56861: LD_INT 34
56863: PUSH
56864: LD_INT 13
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 34
56873: PUSH
56874: LD_INT 52
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: LIST
56885: PPUSH
56886: CALL_OW 72
56890: ST_TO_ADDR
// if cranes then
56891: LD_VAR 0 6
56895: IFFALSE 57031
// begin for j in cranes do
56897: LD_ADDR_VAR 0 3
56901: PUSH
56902: LD_VAR 0 6
56906: PUSH
56907: FOR_IN
56908: IFFALSE 57029
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
56910: LD_VAR 0 3
56914: PPUSH
56915: CALL_OW 256
56919: PUSH
56920: LD_INT 500
56922: GREATEREQUAL
56923: PUSH
56924: LD_VAR 0 3
56928: PPUSH
56929: CALL_OW 314
56933: NOT
56934: AND
56935: IFFALSE 56969
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
56937: LD_VAR 0 3
56941: PPUSH
56942: LD_EXP 61
56946: PUSH
56947: LD_VAR 0 2
56951: ARRAY
56952: PPUSH
56953: LD_VAR 0 3
56957: PPUSH
56958: CALL_OW 74
56962: PPUSH
56963: CALL_OW 130
56967: GO 57027
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
56969: LD_VAR 0 3
56973: PPUSH
56974: CALL_OW 256
56978: PUSH
56979: LD_INT 500
56981: LESS
56982: PUSH
56983: LD_VAR 0 3
56987: PPUSH
56988: LD_EXP 84
56992: PUSH
56993: LD_VAR 0 2
56997: ARRAY
56998: PPUSH
56999: CALL_OW 308
57003: NOT
57004: AND
57005: IFFALSE 57027
// ComMoveToArea ( j , mc_parking [ i ] ) ;
57007: LD_VAR 0 3
57011: PPUSH
57012: LD_EXP 84
57016: PUSH
57017: LD_VAR 0 2
57021: ARRAY
57022: PPUSH
57023: CALL_OW 113
57027: GO 56907
57029: POP
57030: POP
// end ; if tmp > 3 then
57031: LD_VAR 0 5
57035: PUSH
57036: LD_INT 3
57038: GREATER
57039: IFFALSE 57059
// tmp := ShrinkArray ( tmp , 4 ) ;
57041: LD_ADDR_VAR 0 5
57045: PUSH
57046: LD_VAR 0 5
57050: PPUSH
57051: LD_INT 4
57053: PPUSH
57054: CALL 47354 0 2
57058: ST_TO_ADDR
// if not tmp then
57059: LD_VAR 0 5
57063: NOT
57064: IFFALSE 57068
// continue ;
57066: GO 56524
// for j in tmp do
57068: LD_ADDR_VAR 0 3
57072: PUSH
57073: LD_VAR 0 5
57077: PUSH
57078: FOR_IN
57079: IFFALSE 57338
// begin if IsInUnit ( j ) then
57081: LD_VAR 0 3
57085: PPUSH
57086: CALL_OW 310
57090: IFFALSE 57101
// ComExitBuilding ( j ) ;
57092: LD_VAR 0 3
57096: PPUSH
57097: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
57101: LD_VAR 0 3
57105: PUSH
57106: LD_EXP 62
57110: PUSH
57111: LD_VAR 0 2
57115: ARRAY
57116: IN
57117: NOT
57118: IFFALSE 57176
// begin SetTag ( j , 101 ) ;
57120: LD_VAR 0 3
57124: PPUSH
57125: LD_INT 101
57127: PPUSH
57128: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
57132: LD_ADDR_EXP 62
57136: PUSH
57137: LD_EXP 62
57141: PPUSH
57142: LD_VAR 0 2
57146: PUSH
57147: LD_EXP 62
57151: PUSH
57152: LD_VAR 0 2
57156: ARRAY
57157: PUSH
57158: LD_INT 1
57160: PLUS
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PPUSH
57166: LD_VAR 0 3
57170: PPUSH
57171: CALL 16128 0 3
57175: ST_TO_ADDR
// end ; wait ( 1 ) ;
57176: LD_INT 1
57178: PPUSH
57179: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
57183: LD_ADDR_VAR 0 7
57187: PUSH
57188: LD_EXP 61
57192: PUSH
57193: LD_VAR 0 2
57197: ARRAY
57198: ST_TO_ADDR
// if mc_scan [ i ] then
57199: LD_EXP 83
57203: PUSH
57204: LD_VAR 0 2
57208: ARRAY
57209: IFFALSE 57271
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
57211: LD_ADDR_VAR 0 7
57215: PUSH
57216: LD_EXP 61
57220: PUSH
57221: LD_VAR 0 2
57225: ARRAY
57226: PPUSH
57227: LD_INT 3
57229: PUSH
57230: LD_INT 30
57232: PUSH
57233: LD_INT 32
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 30
57242: PUSH
57243: LD_INT 33
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 30
57252: PUSH
57253: LD_INT 31
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: PPUSH
57266: CALL_OW 72
57270: ST_TO_ADDR
// if not to_repair_tmp then
57271: LD_VAR 0 7
57275: NOT
57276: IFFALSE 57280
// continue ;
57278: GO 57078
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
57280: LD_ADDR_VAR 0 8
57284: PUSH
57285: LD_VAR 0 7
57289: PPUSH
57290: LD_VAR 0 3
57294: PPUSH
57295: CALL_OW 74
57299: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 5 then
57300: LD_VAR 0 8
57304: PPUSH
57305: LD_INT 16
57307: PPUSH
57308: CALL 18721 0 2
57312: PUSH
57313: LD_INT 4
57315: ARRAY
57316: PUSH
57317: LD_INT 5
57319: LESS
57320: IFFALSE 57336
// ComRepairBuilding ( j , to_repair ) ;
57322: LD_VAR 0 3
57326: PPUSH
57327: LD_VAR 0 8
57331: PPUSH
57332: CALL_OW 130
// end ;
57336: GO 57078
57338: POP
57339: POP
// end ;
57340: GO 56524
57342: POP
57343: POP
// end ;
57344: LD_VAR 0 1
57348: RET
// export function MC_Heal ; var i , j , tmp ; begin
57349: LD_INT 0
57351: PPUSH
57352: PPUSH
57353: PPUSH
57354: PPUSH
// if not mc_bases then
57355: LD_EXP 60
57359: NOT
57360: IFFALSE 57364
// exit ;
57362: GO 57766
// for i = 1 to mc_bases do
57364: LD_ADDR_VAR 0 2
57368: PUSH
57369: DOUBLE
57370: LD_INT 1
57372: DEC
57373: ST_TO_ADDR
57374: LD_EXP 60
57378: PUSH
57379: FOR_TO
57380: IFFALSE 57764
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
57382: LD_EXP 63
57386: PUSH
57387: LD_VAR 0 2
57391: ARRAY
57392: PUSH
57393: LD_INT 1
57395: ARRAY
57396: NOT
57397: PUSH
57398: LD_EXP 63
57402: PUSH
57403: LD_VAR 0 2
57407: ARRAY
57408: PUSH
57409: LD_INT 2
57411: ARRAY
57412: NOT
57413: AND
57414: IFFALSE 57452
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
57416: LD_ADDR_EXP 64
57420: PUSH
57421: LD_EXP 64
57425: PPUSH
57426: LD_VAR 0 2
57430: PPUSH
57431: EMPTY
57432: PPUSH
57433: CALL_OW 1
57437: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
57438: LD_VAR 0 2
57442: PPUSH
57443: LD_INT 102
57445: PPUSH
57446: CALL 51613 0 2
// continue ;
57450: GO 57379
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
57452: LD_ADDR_VAR 0 4
57456: PUSH
57457: LD_EXP 60
57461: PUSH
57462: LD_VAR 0 2
57466: ARRAY
57467: PPUSH
57468: LD_INT 25
57470: PUSH
57471: LD_INT 4
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PPUSH
57478: CALL_OW 72
57482: ST_TO_ADDR
// if not tmp then
57483: LD_VAR 0 4
57487: NOT
57488: IFFALSE 57492
// continue ;
57490: GO 57379
// if mc_taming [ i ] then
57492: LD_EXP 91
57496: PUSH
57497: LD_VAR 0 2
57501: ARRAY
57502: IFFALSE 57526
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
57504: LD_ADDR_EXP 91
57508: PUSH
57509: LD_EXP 91
57513: PPUSH
57514: LD_VAR 0 2
57518: PPUSH
57519: EMPTY
57520: PPUSH
57521: CALL_OW 1
57525: ST_TO_ADDR
// for j in tmp do
57526: LD_ADDR_VAR 0 3
57530: PUSH
57531: LD_VAR 0 4
57535: PUSH
57536: FOR_IN
57537: IFFALSE 57760
// begin if IsInUnit ( j ) then
57539: LD_VAR 0 3
57543: PPUSH
57544: CALL_OW 310
57548: IFFALSE 57559
// ComExitBuilding ( j ) ;
57550: LD_VAR 0 3
57554: PPUSH
57555: CALL_OW 122
// if not j in mc_healers [ i ] then
57559: LD_VAR 0 3
57563: PUSH
57564: LD_EXP 64
57568: PUSH
57569: LD_VAR 0 2
57573: ARRAY
57574: IN
57575: NOT
57576: IFFALSE 57622
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
57578: LD_ADDR_EXP 64
57582: PUSH
57583: LD_EXP 64
57587: PPUSH
57588: LD_VAR 0 2
57592: PUSH
57593: LD_EXP 64
57597: PUSH
57598: LD_VAR 0 2
57602: ARRAY
57603: PUSH
57604: LD_INT 1
57606: PLUS
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PPUSH
57612: LD_VAR 0 3
57616: PPUSH
57617: CALL 16128 0 3
57621: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
57622: LD_VAR 0 3
57626: PPUSH
57627: CALL_OW 110
57631: PUSH
57632: LD_INT 102
57634: NONEQUAL
57635: IFFALSE 57649
// SetTag ( j , 102 ) ;
57637: LD_VAR 0 3
57641: PPUSH
57642: LD_INT 102
57644: PPUSH
57645: CALL_OW 109
// Wait ( 3 ) ;
57649: LD_INT 3
57651: PPUSH
57652: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
57656: LD_EXP 63
57660: PUSH
57661: LD_VAR 0 2
57665: ARRAY
57666: PUSH
57667: LD_INT 1
57669: ARRAY
57670: IFFALSE 57702
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
57672: LD_VAR 0 3
57676: PPUSH
57677: LD_EXP 63
57681: PUSH
57682: LD_VAR 0 2
57686: ARRAY
57687: PUSH
57688: LD_INT 1
57690: ARRAY
57691: PUSH
57692: LD_INT 1
57694: ARRAY
57695: PPUSH
57696: CALL_OW 128
57700: GO 57758
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
57702: LD_VAR 0 3
57706: PPUSH
57707: CALL_OW 314
57711: NOT
57712: PUSH
57713: LD_EXP 63
57717: PUSH
57718: LD_VAR 0 2
57722: ARRAY
57723: PUSH
57724: LD_INT 2
57726: ARRAY
57727: AND
57728: IFFALSE 57758
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
57730: LD_VAR 0 3
57734: PPUSH
57735: LD_EXP 63
57739: PUSH
57740: LD_VAR 0 2
57744: ARRAY
57745: PUSH
57746: LD_INT 2
57748: ARRAY
57749: PUSH
57750: LD_INT 1
57752: ARRAY
57753: PPUSH
57754: CALL_OW 128
// end ;
57758: GO 57536
57760: POP
57761: POP
// end ;
57762: GO 57379
57764: POP
57765: POP
// end ;
57766: LD_VAR 0 1
57770: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
57771: LD_INT 0
57773: PPUSH
57774: PPUSH
57775: PPUSH
57776: PPUSH
57777: PPUSH
// if not mc_bases then
57778: LD_EXP 60
57782: NOT
57783: IFFALSE 57787
// exit ;
57785: GO 58930
// for i = 1 to mc_bases do
57787: LD_ADDR_VAR 0 2
57791: PUSH
57792: DOUBLE
57793: LD_INT 1
57795: DEC
57796: ST_TO_ADDR
57797: LD_EXP 60
57801: PUSH
57802: FOR_TO
57803: IFFALSE 58928
// begin if mc_scan [ i ] then
57805: LD_EXP 83
57809: PUSH
57810: LD_VAR 0 2
57814: ARRAY
57815: IFFALSE 57819
// continue ;
57817: GO 57802
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
57819: LD_EXP 65
57823: PUSH
57824: LD_VAR 0 2
57828: ARRAY
57829: NOT
57830: PUSH
57831: LD_EXP 67
57835: PUSH
57836: LD_VAR 0 2
57840: ARRAY
57841: NOT
57842: AND
57843: PUSH
57844: LD_EXP 66
57848: PUSH
57849: LD_VAR 0 2
57853: ARRAY
57854: AND
57855: IFFALSE 57893
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
57857: LD_ADDR_EXP 66
57861: PUSH
57862: LD_EXP 66
57866: PPUSH
57867: LD_VAR 0 2
57871: PPUSH
57872: EMPTY
57873: PPUSH
57874: CALL_OW 1
57878: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
57879: LD_VAR 0 2
57883: PPUSH
57884: LD_INT 103
57886: PPUSH
57887: CALL 51613 0 2
// continue ;
57891: GO 57802
// end ; if mc_construct_list [ i ] then
57893: LD_EXP 67
57897: PUSH
57898: LD_VAR 0 2
57902: ARRAY
57903: IFFALSE 58123
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
57905: LD_ADDR_VAR 0 4
57909: PUSH
57910: LD_EXP 60
57914: PUSH
57915: LD_VAR 0 2
57919: ARRAY
57920: PPUSH
57921: LD_INT 25
57923: PUSH
57924: LD_INT 2
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PPUSH
57931: CALL_OW 72
57935: PUSH
57936: LD_EXP 62
57940: PUSH
57941: LD_VAR 0 2
57945: ARRAY
57946: DIFF
57947: ST_TO_ADDR
// if not tmp then
57948: LD_VAR 0 4
57952: NOT
57953: IFFALSE 57957
// continue ;
57955: GO 57802
// for j in tmp do
57957: LD_ADDR_VAR 0 3
57961: PUSH
57962: LD_VAR 0 4
57966: PUSH
57967: FOR_IN
57968: IFFALSE 58119
// begin if not mc_builders [ i ] then
57970: LD_EXP 66
57974: PUSH
57975: LD_VAR 0 2
57979: ARRAY
57980: NOT
57981: IFFALSE 58039
// begin SetTag ( j , 103 ) ;
57983: LD_VAR 0 3
57987: PPUSH
57988: LD_INT 103
57990: PPUSH
57991: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
57995: LD_ADDR_EXP 66
57999: PUSH
58000: LD_EXP 66
58004: PPUSH
58005: LD_VAR 0 2
58009: PUSH
58010: LD_EXP 66
58014: PUSH
58015: LD_VAR 0 2
58019: ARRAY
58020: PUSH
58021: LD_INT 1
58023: PLUS
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PPUSH
58029: LD_VAR 0 3
58033: PPUSH
58034: CALL 16128 0 3
58038: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
58039: LD_VAR 0 3
58043: PPUSH
58044: CALL_OW 310
58048: IFFALSE 58059
// ComExitBuilding ( j ) ;
58050: LD_VAR 0 3
58054: PPUSH
58055: CALL_OW 122
// wait ( 3 ) ;
58059: LD_INT 3
58061: PPUSH
58062: CALL_OW 67
// if not mc_construct_list [ i ] then
58066: LD_EXP 67
58070: PUSH
58071: LD_VAR 0 2
58075: ARRAY
58076: NOT
58077: IFFALSE 58081
// break ;
58079: GO 58119
// if not HasTask ( j ) then
58081: LD_VAR 0 3
58085: PPUSH
58086: CALL_OW 314
58090: NOT
58091: IFFALSE 58117
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
58093: LD_VAR 0 3
58097: PPUSH
58098: LD_EXP 67
58102: PUSH
58103: LD_VAR 0 2
58107: ARRAY
58108: PUSH
58109: LD_INT 1
58111: ARRAY
58112: PPUSH
58113: CALL 18979 0 2
// end ;
58117: GO 57967
58119: POP
58120: POP
// end else
58121: GO 58926
// if mc_build_list [ i ] then
58123: LD_EXP 65
58127: PUSH
58128: LD_VAR 0 2
58132: ARRAY
58133: IFFALSE 58926
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58135: LD_ADDR_VAR 0 5
58139: PUSH
58140: LD_EXP 60
58144: PUSH
58145: LD_VAR 0 2
58149: ARRAY
58150: PPUSH
58151: LD_INT 2
58153: PUSH
58154: LD_INT 30
58156: PUSH
58157: LD_INT 0
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 30
58166: PUSH
58167: LD_INT 1
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: LIST
58178: PPUSH
58179: CALL_OW 72
58183: ST_TO_ADDR
// if depot then
58184: LD_VAR 0 5
58188: IFFALSE 58206
// depot := depot [ 1 ] else
58190: LD_ADDR_VAR 0 5
58194: PUSH
58195: LD_VAR 0 5
58199: PUSH
58200: LD_INT 1
58202: ARRAY
58203: ST_TO_ADDR
58204: GO 58214
// depot := 0 ;
58206: LD_ADDR_VAR 0 5
58210: PUSH
58211: LD_INT 0
58213: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
58214: LD_EXP 65
58218: PUSH
58219: LD_VAR 0 2
58223: ARRAY
58224: PUSH
58225: LD_INT 1
58227: ARRAY
58228: PUSH
58229: LD_INT 1
58231: ARRAY
58232: PPUSH
58233: CALL 18809 0 1
58237: PUSH
58238: LD_EXP 60
58242: PUSH
58243: LD_VAR 0 2
58247: ARRAY
58248: PPUSH
58249: LD_INT 2
58251: PUSH
58252: LD_INT 30
58254: PUSH
58255: LD_INT 2
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 30
58264: PUSH
58265: LD_INT 3
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: LIST
58276: PPUSH
58277: CALL_OW 72
58281: NOT
58282: AND
58283: IFFALSE 58388
// begin for j = 1 to mc_build_list [ i ] do
58285: LD_ADDR_VAR 0 3
58289: PUSH
58290: DOUBLE
58291: LD_INT 1
58293: DEC
58294: ST_TO_ADDR
58295: LD_EXP 65
58299: PUSH
58300: LD_VAR 0 2
58304: ARRAY
58305: PUSH
58306: FOR_TO
58307: IFFALSE 58386
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
58309: LD_EXP 65
58313: PUSH
58314: LD_VAR 0 2
58318: ARRAY
58319: PUSH
58320: LD_VAR 0 3
58324: ARRAY
58325: PUSH
58326: LD_INT 1
58328: ARRAY
58329: PUSH
58330: LD_INT 2
58332: EQUAL
58333: IFFALSE 58384
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
58335: LD_ADDR_EXP 65
58339: PUSH
58340: LD_EXP 65
58344: PPUSH
58345: LD_VAR 0 2
58349: PPUSH
58350: LD_EXP 65
58354: PUSH
58355: LD_VAR 0 2
58359: ARRAY
58360: PPUSH
58361: LD_VAR 0 3
58365: PPUSH
58366: LD_INT 1
58368: PPUSH
58369: LD_INT 0
58371: PPUSH
58372: CALL 15546 0 4
58376: PPUSH
58377: CALL_OW 1
58381: ST_TO_ADDR
// break ;
58382: GO 58386
// end ;
58384: GO 58306
58386: POP
58387: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
58388: LD_EXP 65
58392: PUSH
58393: LD_VAR 0 2
58397: ARRAY
58398: PUSH
58399: LD_INT 1
58401: ARRAY
58402: PUSH
58403: LD_INT 1
58405: ARRAY
58406: PUSH
58407: LD_INT 0
58409: EQUAL
58410: PUSH
58411: LD_VAR 0 5
58415: PUSH
58416: LD_VAR 0 5
58420: PPUSH
58421: LD_EXP 65
58425: PUSH
58426: LD_VAR 0 2
58430: ARRAY
58431: PUSH
58432: LD_INT 1
58434: ARRAY
58435: PUSH
58436: LD_INT 1
58438: ARRAY
58439: PPUSH
58440: LD_EXP 65
58444: PUSH
58445: LD_VAR 0 2
58449: ARRAY
58450: PUSH
58451: LD_INT 1
58453: ARRAY
58454: PUSH
58455: LD_INT 2
58457: ARRAY
58458: PPUSH
58459: LD_EXP 65
58463: PUSH
58464: LD_VAR 0 2
58468: ARRAY
58469: PUSH
58470: LD_INT 1
58472: ARRAY
58473: PUSH
58474: LD_INT 3
58476: ARRAY
58477: PPUSH
58478: LD_EXP 65
58482: PUSH
58483: LD_VAR 0 2
58487: ARRAY
58488: PUSH
58489: LD_INT 1
58491: ARRAY
58492: PUSH
58493: LD_INT 4
58495: ARRAY
58496: PPUSH
58497: CALL 23543 0 5
58501: AND
58502: OR
58503: IFFALSE 58784
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
58505: LD_ADDR_VAR 0 4
58509: PUSH
58510: LD_EXP 60
58514: PUSH
58515: LD_VAR 0 2
58519: ARRAY
58520: PPUSH
58521: LD_INT 25
58523: PUSH
58524: LD_INT 2
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PPUSH
58531: CALL_OW 72
58535: PUSH
58536: LD_EXP 62
58540: PUSH
58541: LD_VAR 0 2
58545: ARRAY
58546: DIFF
58547: ST_TO_ADDR
// if not tmp then
58548: LD_VAR 0 4
58552: NOT
58553: IFFALSE 58557
// continue ;
58555: GO 57802
// for j in tmp do
58557: LD_ADDR_VAR 0 3
58561: PUSH
58562: LD_VAR 0 4
58566: PUSH
58567: FOR_IN
58568: IFFALSE 58780
// begin if not mc_builders [ i ] then
58570: LD_EXP 66
58574: PUSH
58575: LD_VAR 0 2
58579: ARRAY
58580: NOT
58581: IFFALSE 58639
// begin SetTag ( j , 103 ) ;
58583: LD_VAR 0 3
58587: PPUSH
58588: LD_INT 103
58590: PPUSH
58591: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
58595: LD_ADDR_EXP 66
58599: PUSH
58600: LD_EXP 66
58604: PPUSH
58605: LD_VAR 0 2
58609: PUSH
58610: LD_EXP 66
58614: PUSH
58615: LD_VAR 0 2
58619: ARRAY
58620: PUSH
58621: LD_INT 1
58623: PLUS
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PPUSH
58629: LD_VAR 0 3
58633: PPUSH
58634: CALL 16128 0 3
58638: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
58639: LD_VAR 0 3
58643: PPUSH
58644: CALL_OW 310
58648: IFFALSE 58659
// ComExitBuilding ( j ) ;
58650: LD_VAR 0 3
58654: PPUSH
58655: CALL_OW 122
// wait ( 3 ) ;
58659: LD_INT 3
58661: PPUSH
58662: CALL_OW 67
// if not mc_build_list [ i ] then
58666: LD_EXP 65
58670: PUSH
58671: LD_VAR 0 2
58675: ARRAY
58676: NOT
58677: IFFALSE 58681
// break ;
58679: GO 58780
// if not HasTask ( j ) then
58681: LD_VAR 0 3
58685: PPUSH
58686: CALL_OW 314
58690: NOT
58691: IFFALSE 58778
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
58693: LD_VAR 0 3
58697: PPUSH
58698: LD_EXP 65
58702: PUSH
58703: LD_VAR 0 2
58707: ARRAY
58708: PUSH
58709: LD_INT 1
58711: ARRAY
58712: PUSH
58713: LD_INT 1
58715: ARRAY
58716: PPUSH
58717: LD_EXP 65
58721: PUSH
58722: LD_VAR 0 2
58726: ARRAY
58727: PUSH
58728: LD_INT 1
58730: ARRAY
58731: PUSH
58732: LD_INT 2
58734: ARRAY
58735: PPUSH
58736: LD_EXP 65
58740: PUSH
58741: LD_VAR 0 2
58745: ARRAY
58746: PUSH
58747: LD_INT 1
58749: ARRAY
58750: PUSH
58751: LD_INT 3
58753: ARRAY
58754: PPUSH
58755: LD_EXP 65
58759: PUSH
58760: LD_VAR 0 2
58764: ARRAY
58765: PUSH
58766: LD_INT 1
58768: ARRAY
58769: PUSH
58770: LD_INT 4
58772: ARRAY
58773: PPUSH
58774: CALL_OW 145
// end ;
58778: GO 58567
58780: POP
58781: POP
// end else
58782: GO 58926
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
58784: LD_EXP 60
58788: PUSH
58789: LD_VAR 0 2
58793: ARRAY
58794: PPUSH
58795: LD_EXP 65
58799: PUSH
58800: LD_VAR 0 2
58804: ARRAY
58805: PUSH
58806: LD_INT 1
58808: ARRAY
58809: PUSH
58810: LD_INT 1
58812: ARRAY
58813: PPUSH
58814: LD_EXP 65
58818: PUSH
58819: LD_VAR 0 2
58823: ARRAY
58824: PUSH
58825: LD_INT 1
58827: ARRAY
58828: PUSH
58829: LD_INT 2
58831: ARRAY
58832: PPUSH
58833: LD_EXP 65
58837: PUSH
58838: LD_VAR 0 2
58842: ARRAY
58843: PUSH
58844: LD_INT 1
58846: ARRAY
58847: PUSH
58848: LD_INT 3
58850: ARRAY
58851: PPUSH
58852: LD_EXP 65
58856: PUSH
58857: LD_VAR 0 2
58861: ARRAY
58862: PUSH
58863: LD_INT 1
58865: ARRAY
58866: PUSH
58867: LD_INT 4
58869: ARRAY
58870: PPUSH
58871: CALL 22879 0 5
58875: NOT
58876: IFFALSE 58926
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
58878: LD_ADDR_EXP 65
58882: PUSH
58883: LD_EXP 65
58887: PPUSH
58888: LD_VAR 0 2
58892: PPUSH
58893: LD_EXP 65
58897: PUSH
58898: LD_VAR 0 2
58902: ARRAY
58903: PPUSH
58904: LD_INT 1
58906: PPUSH
58907: LD_INT 1
58909: NEG
58910: PPUSH
58911: LD_INT 0
58913: PPUSH
58914: CALL 15546 0 4
58918: PPUSH
58919: CALL_OW 1
58923: ST_TO_ADDR
// continue ;
58924: GO 57802
// end ; end ; end ;
58926: GO 57802
58928: POP
58929: POP
// end ;
58930: LD_VAR 0 1
58934: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
58935: LD_INT 0
58937: PPUSH
58938: PPUSH
58939: PPUSH
58940: PPUSH
58941: PPUSH
58942: PPUSH
// if not mc_bases then
58943: LD_EXP 60
58947: NOT
58948: IFFALSE 58952
// exit ;
58950: GO 59379
// for i = 1 to mc_bases do
58952: LD_ADDR_VAR 0 2
58956: PUSH
58957: DOUBLE
58958: LD_INT 1
58960: DEC
58961: ST_TO_ADDR
58962: LD_EXP 60
58966: PUSH
58967: FOR_TO
58968: IFFALSE 59377
// begin tmp := mc_build_upgrade [ i ] ;
58970: LD_ADDR_VAR 0 4
58974: PUSH
58975: LD_EXP 92
58979: PUSH
58980: LD_VAR 0 2
58984: ARRAY
58985: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
58986: LD_ADDR_VAR 0 6
58990: PUSH
58991: LD_EXP 93
58995: PUSH
58996: LD_VAR 0 2
59000: ARRAY
59001: PPUSH
59002: LD_INT 2
59004: PUSH
59005: LD_INT 30
59007: PUSH
59008: LD_INT 6
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 30
59017: PUSH
59018: LD_INT 7
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: LIST
59029: PPUSH
59030: CALL_OW 72
59034: ST_TO_ADDR
// if not tmp and not lab then
59035: LD_VAR 0 4
59039: NOT
59040: PUSH
59041: LD_VAR 0 6
59045: NOT
59046: AND
59047: IFFALSE 59051
// continue ;
59049: GO 58967
// if tmp then
59051: LD_VAR 0 4
59055: IFFALSE 59175
// for j in tmp do
59057: LD_ADDR_VAR 0 3
59061: PUSH
59062: LD_VAR 0 4
59066: PUSH
59067: FOR_IN
59068: IFFALSE 59173
// begin if UpgradeCost ( j ) then
59070: LD_VAR 0 3
59074: PPUSH
59075: CALL 22539 0 1
59079: IFFALSE 59171
// begin ComUpgrade ( j ) ;
59081: LD_VAR 0 3
59085: PPUSH
59086: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
59090: LD_ADDR_EXP 92
59094: PUSH
59095: LD_EXP 92
59099: PPUSH
59100: LD_VAR 0 2
59104: PPUSH
59105: LD_EXP 92
59109: PUSH
59110: LD_VAR 0 2
59114: ARRAY
59115: PUSH
59116: LD_VAR 0 3
59120: DIFF
59121: PPUSH
59122: CALL_OW 1
59126: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
59127: LD_ADDR_EXP 67
59131: PUSH
59132: LD_EXP 67
59136: PPUSH
59137: LD_VAR 0 2
59141: PUSH
59142: LD_EXP 67
59146: PUSH
59147: LD_VAR 0 2
59151: ARRAY
59152: PUSH
59153: LD_INT 1
59155: PLUS
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PPUSH
59161: LD_VAR 0 3
59165: PPUSH
59166: CALL 16128 0 3
59170: ST_TO_ADDR
// end ; end ;
59171: GO 59067
59173: POP
59174: POP
// if not lab or not mc_lab_upgrade [ i ] then
59175: LD_VAR 0 6
59179: NOT
59180: PUSH
59181: LD_EXP 94
59185: PUSH
59186: LD_VAR 0 2
59190: ARRAY
59191: NOT
59192: OR
59193: IFFALSE 59197
// continue ;
59195: GO 58967
// for j in lab do
59197: LD_ADDR_VAR 0 3
59201: PUSH
59202: LD_VAR 0 6
59206: PUSH
59207: FOR_IN
59208: IFFALSE 59373
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
59210: LD_VAR 0 3
59214: PPUSH
59215: CALL_OW 266
59219: PUSH
59220: LD_INT 6
59222: PUSH
59223: LD_INT 7
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: IN
59230: PUSH
59231: LD_VAR 0 3
59235: PPUSH
59236: CALL_OW 461
59240: PUSH
59241: LD_INT 1
59243: NONEQUAL
59244: AND
59245: IFFALSE 59371
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
59247: LD_VAR 0 3
59251: PPUSH
59252: LD_EXP 94
59256: PUSH
59257: LD_VAR 0 2
59261: ARRAY
59262: PUSH
59263: LD_INT 1
59265: ARRAY
59266: PPUSH
59267: CALL 22744 0 2
59271: IFFALSE 59371
// begin ComCancel ( j ) ;
59273: LD_VAR 0 3
59277: PPUSH
59278: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
59282: LD_VAR 0 3
59286: PPUSH
59287: LD_EXP 94
59291: PUSH
59292: LD_VAR 0 2
59296: ARRAY
59297: PUSH
59298: LD_INT 1
59300: ARRAY
59301: PPUSH
59302: CALL_OW 207
// if not j in mc_construct_list [ i ] then
59306: LD_VAR 0 3
59310: PUSH
59311: LD_EXP 67
59315: PUSH
59316: LD_VAR 0 2
59320: ARRAY
59321: IN
59322: NOT
59323: IFFALSE 59369
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
59325: LD_ADDR_EXP 67
59329: PUSH
59330: LD_EXP 67
59334: PPUSH
59335: LD_VAR 0 2
59339: PUSH
59340: LD_EXP 67
59344: PUSH
59345: LD_VAR 0 2
59349: ARRAY
59350: PUSH
59351: LD_INT 1
59353: PLUS
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PPUSH
59359: LD_VAR 0 3
59363: PPUSH
59364: CALL 16128 0 3
59368: ST_TO_ADDR
// break ;
59369: GO 59373
// end ; end ; end ;
59371: GO 59207
59373: POP
59374: POP
// end ;
59375: GO 58967
59377: POP
59378: POP
// end ;
59379: LD_VAR 0 1
59383: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
59384: LD_INT 0
59386: PPUSH
59387: PPUSH
59388: PPUSH
59389: PPUSH
59390: PPUSH
59391: PPUSH
59392: PPUSH
59393: PPUSH
59394: PPUSH
// if not mc_bases then
59395: LD_EXP 60
59399: NOT
59400: IFFALSE 59404
// exit ;
59402: GO 59809
// for i = 1 to mc_bases do
59404: LD_ADDR_VAR 0 2
59408: PUSH
59409: DOUBLE
59410: LD_INT 1
59412: DEC
59413: ST_TO_ADDR
59414: LD_EXP 60
59418: PUSH
59419: FOR_TO
59420: IFFALSE 59807
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
59422: LD_EXP 68
59426: PUSH
59427: LD_VAR 0 2
59431: ARRAY
59432: NOT
59433: PUSH
59434: LD_EXP 60
59438: PUSH
59439: LD_VAR 0 2
59443: ARRAY
59444: PPUSH
59445: LD_INT 30
59447: PUSH
59448: LD_INT 3
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PPUSH
59455: CALL_OW 72
59459: NOT
59460: OR
59461: IFFALSE 59465
// continue ;
59463: GO 59419
// busy := false ;
59465: LD_ADDR_VAR 0 8
59469: PUSH
59470: LD_INT 0
59472: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
59473: LD_ADDR_VAR 0 4
59477: PUSH
59478: LD_EXP 60
59482: PUSH
59483: LD_VAR 0 2
59487: ARRAY
59488: PPUSH
59489: LD_INT 30
59491: PUSH
59492: LD_INT 3
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PPUSH
59499: CALL_OW 72
59503: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
59504: LD_ADDR_VAR 0 6
59508: PUSH
59509: LD_EXP 68
59513: PUSH
59514: LD_VAR 0 2
59518: ARRAY
59519: PPUSH
59520: LD_INT 2
59522: PUSH
59523: LD_INT 30
59525: PUSH
59526: LD_INT 32
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 30
59535: PUSH
59536: LD_INT 33
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: LIST
59547: PPUSH
59548: CALL_OW 72
59552: ST_TO_ADDR
// if not t then
59553: LD_VAR 0 6
59557: NOT
59558: IFFALSE 59562
// continue ;
59560: GO 59419
// for j in tmp do
59562: LD_ADDR_VAR 0 3
59566: PUSH
59567: LD_VAR 0 4
59571: PUSH
59572: FOR_IN
59573: IFFALSE 59603
// if not BuildingStatus ( j ) = bs_idle then
59575: LD_VAR 0 3
59579: PPUSH
59580: CALL_OW 461
59584: PUSH
59585: LD_INT 2
59587: EQUAL
59588: NOT
59589: IFFALSE 59601
// begin busy := true ;
59591: LD_ADDR_VAR 0 8
59595: PUSH
59596: LD_INT 1
59598: ST_TO_ADDR
// break ;
59599: GO 59603
// end ;
59601: GO 59572
59603: POP
59604: POP
// if busy then
59605: LD_VAR 0 8
59609: IFFALSE 59613
// continue ;
59611: GO 59419
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
59613: LD_ADDR_VAR 0 7
59617: PUSH
59618: LD_VAR 0 6
59622: PPUSH
59623: LD_INT 35
59625: PUSH
59626: LD_INT 0
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PPUSH
59633: CALL_OW 72
59637: ST_TO_ADDR
// if tw then
59638: LD_VAR 0 7
59642: IFFALSE 59719
// begin tw := tw [ 1 ] ;
59644: LD_ADDR_VAR 0 7
59648: PUSH
59649: LD_VAR 0 7
59653: PUSH
59654: LD_INT 1
59656: ARRAY
59657: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
59658: LD_ADDR_VAR 0 9
59662: PUSH
59663: LD_VAR 0 7
59667: PPUSH
59668: LD_EXP 85
59672: PUSH
59673: LD_VAR 0 2
59677: ARRAY
59678: PPUSH
59679: CALL 21098 0 2
59683: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
59684: LD_EXP 99
59688: PUSH
59689: LD_VAR 0 2
59693: ARRAY
59694: IFFALSE 59717
// if not weapon in mc_allowed_tower_weapons [ i ] then
59696: LD_VAR 0 9
59700: PUSH
59701: LD_EXP 99
59705: PUSH
59706: LD_VAR 0 2
59710: ARRAY
59711: IN
59712: NOT
59713: IFFALSE 59717
// continue ;
59715: GO 59419
// end else
59717: GO 59782
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
59719: LD_ADDR_VAR 0 5
59723: PUSH
59724: LD_EXP 68
59728: PUSH
59729: LD_VAR 0 2
59733: ARRAY
59734: PPUSH
59735: LD_VAR 0 4
59739: PPUSH
59740: CALL 46600 0 2
59744: ST_TO_ADDR
// if not tmp2 then
59745: LD_VAR 0 5
59749: NOT
59750: IFFALSE 59754
// continue ;
59752: GO 59419
// tw := tmp2 [ 1 ] ;
59754: LD_ADDR_VAR 0 7
59758: PUSH
59759: LD_VAR 0 5
59763: PUSH
59764: LD_INT 1
59766: ARRAY
59767: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
59768: LD_ADDR_VAR 0 9
59772: PUSH
59773: LD_VAR 0 5
59777: PUSH
59778: LD_INT 2
59780: ARRAY
59781: ST_TO_ADDR
// end ; if not weapon then
59782: LD_VAR 0 9
59786: NOT
59787: IFFALSE 59791
// continue ;
59789: GO 59419
// ComPlaceWeapon ( tw , weapon ) ;
59791: LD_VAR 0 7
59795: PPUSH
59796: LD_VAR 0 9
59800: PPUSH
59801: CALL_OW 148
// end ;
59805: GO 59419
59807: POP
59808: POP
// end ;
59809: LD_VAR 0 1
59813: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
59814: LD_INT 0
59816: PPUSH
59817: PPUSH
59818: PPUSH
59819: PPUSH
59820: PPUSH
59821: PPUSH
// if not mc_bases then
59822: LD_EXP 60
59826: NOT
59827: IFFALSE 59831
// exit ;
59829: GO 60607
// for i = 1 to mc_bases do
59831: LD_ADDR_VAR 0 2
59835: PUSH
59836: DOUBLE
59837: LD_INT 1
59839: DEC
59840: ST_TO_ADDR
59841: LD_EXP 60
59845: PUSH
59846: FOR_TO
59847: IFFALSE 60605
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
59849: LD_EXP 73
59853: PUSH
59854: LD_VAR 0 2
59858: ARRAY
59859: NOT
59860: PUSH
59861: LD_EXP 73
59865: PUSH
59866: LD_VAR 0 2
59870: ARRAY
59871: PUSH
59872: LD_EXP 74
59876: PUSH
59877: LD_VAR 0 2
59881: ARRAY
59882: EQUAL
59883: OR
59884: PUSH
59885: LD_EXP 83
59889: PUSH
59890: LD_VAR 0 2
59894: ARRAY
59895: OR
59896: IFFALSE 59900
// continue ;
59898: GO 59846
// if mc_miners [ i ] then
59900: LD_EXP 74
59904: PUSH
59905: LD_VAR 0 2
59909: ARRAY
59910: IFFALSE 60292
// begin for j = mc_miners [ i ] downto 1 do
59912: LD_ADDR_VAR 0 3
59916: PUSH
59917: DOUBLE
59918: LD_EXP 74
59922: PUSH
59923: LD_VAR 0 2
59927: ARRAY
59928: INC
59929: ST_TO_ADDR
59930: LD_INT 1
59932: PUSH
59933: FOR_DOWNTO
59934: IFFALSE 60290
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
59936: LD_EXP 74
59940: PUSH
59941: LD_VAR 0 2
59945: ARRAY
59946: PUSH
59947: LD_VAR 0 3
59951: ARRAY
59952: PPUSH
59953: CALL_OW 301
59957: PUSH
59958: LD_EXP 74
59962: PUSH
59963: LD_VAR 0 2
59967: ARRAY
59968: PUSH
59969: LD_VAR 0 3
59973: ARRAY
59974: PPUSH
59975: CALL_OW 257
59979: PUSH
59980: LD_INT 1
59982: NONEQUAL
59983: OR
59984: IFFALSE 60047
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
59986: LD_ADDR_VAR 0 5
59990: PUSH
59991: LD_EXP 74
59995: PUSH
59996: LD_VAR 0 2
60000: ARRAY
60001: PUSH
60002: LD_EXP 74
60006: PUSH
60007: LD_VAR 0 2
60011: ARRAY
60012: PUSH
60013: LD_VAR 0 3
60017: ARRAY
60018: DIFF
60019: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
60020: LD_ADDR_EXP 74
60024: PUSH
60025: LD_EXP 74
60029: PPUSH
60030: LD_VAR 0 2
60034: PPUSH
60035: LD_VAR 0 5
60039: PPUSH
60040: CALL_OW 1
60044: ST_TO_ADDR
// continue ;
60045: GO 59933
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
60047: LD_EXP 74
60051: PUSH
60052: LD_VAR 0 2
60056: ARRAY
60057: PUSH
60058: LD_VAR 0 3
60062: ARRAY
60063: PPUSH
60064: CALL_OW 257
60068: PUSH
60069: LD_INT 1
60071: EQUAL
60072: PUSH
60073: LD_EXP 74
60077: PUSH
60078: LD_VAR 0 2
60082: ARRAY
60083: PUSH
60084: LD_VAR 0 3
60088: ARRAY
60089: PPUSH
60090: CALL_OW 459
60094: NOT
60095: AND
60096: PUSH
60097: LD_EXP 74
60101: PUSH
60102: LD_VAR 0 2
60106: ARRAY
60107: PUSH
60108: LD_VAR 0 3
60112: ARRAY
60113: PPUSH
60114: CALL_OW 314
60118: NOT
60119: AND
60120: IFFALSE 60288
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
60122: LD_EXP 74
60126: PUSH
60127: LD_VAR 0 2
60131: ARRAY
60132: PUSH
60133: LD_VAR 0 3
60137: ARRAY
60138: PPUSH
60139: CALL_OW 310
60143: IFFALSE 60166
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
60145: LD_EXP 74
60149: PUSH
60150: LD_VAR 0 2
60154: ARRAY
60155: PUSH
60156: LD_VAR 0 3
60160: ARRAY
60161: PPUSH
60162: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
60166: LD_EXP 74
60170: PUSH
60171: LD_VAR 0 2
60175: ARRAY
60176: PUSH
60177: LD_VAR 0 3
60181: ARRAY
60182: PPUSH
60183: CALL_OW 314
60187: NOT
60188: IFFALSE 60288
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
60190: LD_EXP 74
60194: PUSH
60195: LD_VAR 0 2
60199: ARRAY
60200: PUSH
60201: LD_VAR 0 3
60205: ARRAY
60206: PPUSH
60207: LD_EXP 73
60211: PUSH
60212: LD_VAR 0 2
60216: ARRAY
60217: PUSH
60218: LD_VAR 0 3
60222: PUSH
60223: LD_EXP 73
60227: PUSH
60228: LD_VAR 0 2
60232: ARRAY
60233: MOD
60234: PUSH
60235: LD_INT 1
60237: PLUS
60238: ARRAY
60239: PUSH
60240: LD_INT 1
60242: ARRAY
60243: PPUSH
60244: LD_EXP 73
60248: PUSH
60249: LD_VAR 0 2
60253: ARRAY
60254: PUSH
60255: LD_VAR 0 3
60259: PUSH
60260: LD_EXP 73
60264: PUSH
60265: LD_VAR 0 2
60269: ARRAY
60270: MOD
60271: PUSH
60272: LD_INT 1
60274: PLUS
60275: ARRAY
60276: PUSH
60277: LD_INT 2
60279: ARRAY
60280: PPUSH
60281: LD_INT 0
60283: PPUSH
60284: CALL_OW 193
// end ; end ;
60288: GO 59933
60290: POP
60291: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
60292: LD_ADDR_VAR 0 5
60296: PUSH
60297: LD_EXP 60
60301: PUSH
60302: LD_VAR 0 2
60306: ARRAY
60307: PPUSH
60308: LD_INT 2
60310: PUSH
60311: LD_INT 30
60313: PUSH
60314: LD_INT 4
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 30
60323: PUSH
60324: LD_INT 5
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 30
60333: PUSH
60334: LD_INT 32
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: PPUSH
60347: CALL_OW 72
60351: ST_TO_ADDR
// if not tmp then
60352: LD_VAR 0 5
60356: NOT
60357: IFFALSE 60361
// continue ;
60359: GO 59846
// list := [ ] ;
60361: LD_ADDR_VAR 0 6
60365: PUSH
60366: EMPTY
60367: ST_TO_ADDR
// for j in tmp do
60368: LD_ADDR_VAR 0 3
60372: PUSH
60373: LD_VAR 0 5
60377: PUSH
60378: FOR_IN
60379: IFFALSE 60448
// begin for k in UnitsInside ( j ) do
60381: LD_ADDR_VAR 0 4
60385: PUSH
60386: LD_VAR 0 3
60390: PPUSH
60391: CALL_OW 313
60395: PUSH
60396: FOR_IN
60397: IFFALSE 60444
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
60399: LD_VAR 0 4
60403: PPUSH
60404: CALL_OW 257
60408: PUSH
60409: LD_INT 1
60411: EQUAL
60412: PUSH
60413: LD_VAR 0 4
60417: PPUSH
60418: CALL_OW 459
60422: NOT
60423: AND
60424: IFFALSE 60442
// list := list ^ k ;
60426: LD_ADDR_VAR 0 6
60430: PUSH
60431: LD_VAR 0 6
60435: PUSH
60436: LD_VAR 0 4
60440: ADD
60441: ST_TO_ADDR
60442: GO 60396
60444: POP
60445: POP
// end ;
60446: GO 60378
60448: POP
60449: POP
// list := list diff mc_miners [ i ] ;
60450: LD_ADDR_VAR 0 6
60454: PUSH
60455: LD_VAR 0 6
60459: PUSH
60460: LD_EXP 74
60464: PUSH
60465: LD_VAR 0 2
60469: ARRAY
60470: DIFF
60471: ST_TO_ADDR
// if not list then
60472: LD_VAR 0 6
60476: NOT
60477: IFFALSE 60481
// continue ;
60479: GO 59846
// k := mc_mines [ i ] - mc_miners [ i ] ;
60481: LD_ADDR_VAR 0 4
60485: PUSH
60486: LD_EXP 73
60490: PUSH
60491: LD_VAR 0 2
60495: ARRAY
60496: PUSH
60497: LD_EXP 74
60501: PUSH
60502: LD_VAR 0 2
60506: ARRAY
60507: MINUS
60508: ST_TO_ADDR
// if k > list then
60509: LD_VAR 0 4
60513: PUSH
60514: LD_VAR 0 6
60518: GREATER
60519: IFFALSE 60531
// k := list ;
60521: LD_ADDR_VAR 0 4
60525: PUSH
60526: LD_VAR 0 6
60530: ST_TO_ADDR
// for j = 1 to k do
60531: LD_ADDR_VAR 0 3
60535: PUSH
60536: DOUBLE
60537: LD_INT 1
60539: DEC
60540: ST_TO_ADDR
60541: LD_VAR 0 4
60545: PUSH
60546: FOR_TO
60547: IFFALSE 60601
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
60549: LD_ADDR_EXP 74
60553: PUSH
60554: LD_EXP 74
60558: PPUSH
60559: LD_VAR 0 2
60563: PUSH
60564: LD_EXP 74
60568: PUSH
60569: LD_VAR 0 2
60573: ARRAY
60574: PUSH
60575: LD_INT 1
60577: PLUS
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PPUSH
60583: LD_VAR 0 6
60587: PUSH
60588: LD_VAR 0 3
60592: ARRAY
60593: PPUSH
60594: CALL 16128 0 3
60598: ST_TO_ADDR
60599: GO 60546
60601: POP
60602: POP
// end ;
60603: GO 59846
60605: POP
60606: POP
// end ;
60607: LD_VAR 0 1
60611: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
60612: LD_INT 0
60614: PPUSH
60615: PPUSH
60616: PPUSH
60617: PPUSH
60618: PPUSH
60619: PPUSH
60620: PPUSH
60621: PPUSH
60622: PPUSH
60623: PPUSH
// if not mc_bases then
60624: LD_EXP 60
60628: NOT
60629: IFFALSE 60633
// exit ;
60631: GO 62383
// for i = 1 to mc_bases do
60633: LD_ADDR_VAR 0 2
60637: PUSH
60638: DOUBLE
60639: LD_INT 1
60641: DEC
60642: ST_TO_ADDR
60643: LD_EXP 60
60647: PUSH
60648: FOR_TO
60649: IFFALSE 62381
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
60651: LD_EXP 60
60655: PUSH
60656: LD_VAR 0 2
60660: ARRAY
60661: NOT
60662: PUSH
60663: LD_EXP 67
60667: PUSH
60668: LD_VAR 0 2
60672: ARRAY
60673: OR
60674: IFFALSE 60678
// continue ;
60676: GO 60648
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
60678: LD_EXP 76
60682: PUSH
60683: LD_VAR 0 2
60687: ARRAY
60688: NOT
60689: PUSH
60690: LD_EXP 77
60694: PUSH
60695: LD_VAR 0 2
60699: ARRAY
60700: AND
60701: IFFALSE 60739
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
60703: LD_ADDR_EXP 77
60707: PUSH
60708: LD_EXP 77
60712: PPUSH
60713: LD_VAR 0 2
60717: PPUSH
60718: EMPTY
60719: PPUSH
60720: CALL_OW 1
60724: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
60725: LD_VAR 0 2
60729: PPUSH
60730: LD_INT 107
60732: PPUSH
60733: CALL 51613 0 2
// continue ;
60737: GO 60648
// end ; target := [ ] ;
60739: LD_ADDR_VAR 0 6
60743: PUSH
60744: EMPTY
60745: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
60746: LD_ADDR_VAR 0 3
60750: PUSH
60751: DOUBLE
60752: LD_EXP 76
60756: PUSH
60757: LD_VAR 0 2
60761: ARRAY
60762: INC
60763: ST_TO_ADDR
60764: LD_INT 1
60766: PUSH
60767: FOR_DOWNTO
60768: IFFALSE 61028
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
60770: LD_EXP 76
60774: PUSH
60775: LD_VAR 0 2
60779: ARRAY
60780: PUSH
60781: LD_VAR 0 3
60785: ARRAY
60786: PUSH
60787: LD_INT 2
60789: ARRAY
60790: PPUSH
60791: LD_EXP 76
60795: PUSH
60796: LD_VAR 0 2
60800: ARRAY
60801: PUSH
60802: LD_VAR 0 3
60806: ARRAY
60807: PUSH
60808: LD_INT 3
60810: ARRAY
60811: PPUSH
60812: CALL_OW 488
60816: PUSH
60817: LD_EXP 76
60821: PUSH
60822: LD_VAR 0 2
60826: ARRAY
60827: PUSH
60828: LD_VAR 0 3
60832: ARRAY
60833: PUSH
60834: LD_INT 2
60836: ARRAY
60837: PPUSH
60838: LD_EXP 76
60842: PUSH
60843: LD_VAR 0 2
60847: ARRAY
60848: PUSH
60849: LD_VAR 0 3
60853: ARRAY
60854: PUSH
60855: LD_INT 3
60857: ARRAY
60858: PPUSH
60859: CALL_OW 284
60863: PUSH
60864: LD_INT 0
60866: EQUAL
60867: AND
60868: IFFALSE 60923
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
60870: LD_ADDR_VAR 0 5
60874: PUSH
60875: LD_EXP 76
60879: PUSH
60880: LD_VAR 0 2
60884: ARRAY
60885: PPUSH
60886: LD_VAR 0 3
60890: PPUSH
60891: CALL_OW 3
60895: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
60896: LD_ADDR_EXP 76
60900: PUSH
60901: LD_EXP 76
60905: PPUSH
60906: LD_VAR 0 2
60910: PPUSH
60911: LD_VAR 0 5
60915: PPUSH
60916: CALL_OW 1
60920: ST_TO_ADDR
// continue ;
60921: GO 60767
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
60923: LD_EXP 60
60927: PUSH
60928: LD_VAR 0 2
60932: ARRAY
60933: PUSH
60934: LD_INT 1
60936: ARRAY
60937: PPUSH
60938: CALL_OW 255
60942: PPUSH
60943: LD_EXP 76
60947: PUSH
60948: LD_VAR 0 2
60952: ARRAY
60953: PUSH
60954: LD_VAR 0 3
60958: ARRAY
60959: PUSH
60960: LD_INT 2
60962: ARRAY
60963: PPUSH
60964: LD_EXP 76
60968: PUSH
60969: LD_VAR 0 2
60973: ARRAY
60974: PUSH
60975: LD_VAR 0 3
60979: ARRAY
60980: PUSH
60981: LD_INT 3
60983: ARRAY
60984: PPUSH
60985: LD_INT 30
60987: PPUSH
60988: CALL 17024 0 4
60992: PUSH
60993: LD_INT 4
60995: ARRAY
60996: PUSH
60997: LD_INT 0
60999: EQUAL
61000: IFFALSE 61026
// begin target := mc_crates [ i ] [ j ] ;
61002: LD_ADDR_VAR 0 6
61006: PUSH
61007: LD_EXP 76
61011: PUSH
61012: LD_VAR 0 2
61016: ARRAY
61017: PUSH
61018: LD_VAR 0 3
61022: ARRAY
61023: ST_TO_ADDR
// break ;
61024: GO 61028
// end ; end ;
61026: GO 60767
61028: POP
61029: POP
// if not target then
61030: LD_VAR 0 6
61034: NOT
61035: IFFALSE 61039
// continue ;
61037: GO 60648
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
61039: LD_ADDR_VAR 0 7
61043: PUSH
61044: LD_EXP 79
61048: PUSH
61049: LD_VAR 0 2
61053: ARRAY
61054: PPUSH
61055: LD_INT 2
61057: PUSH
61058: LD_INT 3
61060: PUSH
61061: LD_INT 58
61063: PUSH
61064: EMPTY
61065: LIST
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 61
61073: PUSH
61074: EMPTY
61075: LIST
61076: PUSH
61077: LD_INT 33
61079: PUSH
61080: LD_INT 5
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 33
61089: PUSH
61090: LD_INT 3
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 2
61106: PUSH
61107: LD_INT 34
61109: PUSH
61110: LD_INT 32
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 34
61119: PUSH
61120: LD_INT 51
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 34
61129: PUSH
61130: LD_INT 12
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PPUSH
61147: CALL_OW 72
61151: ST_TO_ADDR
// if not cargo then
61152: LD_VAR 0 7
61156: NOT
61157: IFFALSE 61800
// begin if mc_crates_collector [ i ] < 5 then
61159: LD_EXP 77
61163: PUSH
61164: LD_VAR 0 2
61168: ARRAY
61169: PUSH
61170: LD_INT 5
61172: LESS
61173: IFFALSE 61539
// begin if mc_ape [ i ] then
61175: LD_EXP 89
61179: PUSH
61180: LD_VAR 0 2
61184: ARRAY
61185: IFFALSE 61232
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
61187: LD_ADDR_VAR 0 5
61191: PUSH
61192: LD_EXP 89
61196: PUSH
61197: LD_VAR 0 2
61201: ARRAY
61202: PPUSH
61203: LD_INT 25
61205: PUSH
61206: LD_INT 16
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 24
61215: PUSH
61216: LD_INT 750
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PPUSH
61227: CALL_OW 72
61231: ST_TO_ADDR
// if not tmp then
61232: LD_VAR 0 5
61236: NOT
61237: IFFALSE 61284
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
61239: LD_ADDR_VAR 0 5
61243: PUSH
61244: LD_EXP 60
61248: PUSH
61249: LD_VAR 0 2
61253: ARRAY
61254: PPUSH
61255: LD_INT 25
61257: PUSH
61258: LD_INT 2
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 24
61267: PUSH
61268: LD_INT 750
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PPUSH
61279: CALL_OW 72
61283: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
61284: LD_EXP 89
61288: PUSH
61289: LD_VAR 0 2
61293: ARRAY
61294: PUSH
61295: LD_EXP 60
61299: PUSH
61300: LD_VAR 0 2
61304: ARRAY
61305: PPUSH
61306: LD_INT 25
61308: PUSH
61309: LD_INT 2
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 24
61318: PUSH
61319: LD_INT 750
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PPUSH
61330: CALL_OW 72
61334: AND
61335: PUSH
61336: LD_VAR 0 5
61340: PUSH
61341: LD_INT 5
61343: LESS
61344: AND
61345: IFFALSE 61427
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
61347: LD_ADDR_VAR 0 3
61351: PUSH
61352: LD_EXP 60
61356: PUSH
61357: LD_VAR 0 2
61361: ARRAY
61362: PPUSH
61363: LD_INT 25
61365: PUSH
61366: LD_INT 2
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 24
61375: PUSH
61376: LD_INT 750
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PPUSH
61387: CALL_OW 72
61391: PUSH
61392: FOR_IN
61393: IFFALSE 61425
// begin tmp := tmp union j ;
61395: LD_ADDR_VAR 0 5
61399: PUSH
61400: LD_VAR 0 5
61404: PUSH
61405: LD_VAR 0 3
61409: UNION
61410: ST_TO_ADDR
// if tmp >= 5 then
61411: LD_VAR 0 5
61415: PUSH
61416: LD_INT 5
61418: GREATEREQUAL
61419: IFFALSE 61423
// break ;
61421: GO 61425
// end ;
61423: GO 61392
61425: POP
61426: POP
// end ; if not tmp then
61427: LD_VAR 0 5
61431: NOT
61432: IFFALSE 61436
// continue ;
61434: GO 60648
// for j in tmp do
61436: LD_ADDR_VAR 0 3
61440: PUSH
61441: LD_VAR 0 5
61445: PUSH
61446: FOR_IN
61447: IFFALSE 61537
// if not GetTag ( j ) then
61449: LD_VAR 0 3
61453: PPUSH
61454: CALL_OW 110
61458: NOT
61459: IFFALSE 61535
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
61461: LD_ADDR_EXP 77
61465: PUSH
61466: LD_EXP 77
61470: PPUSH
61471: LD_VAR 0 2
61475: PUSH
61476: LD_EXP 77
61480: PUSH
61481: LD_VAR 0 2
61485: ARRAY
61486: PUSH
61487: LD_INT 1
61489: PLUS
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PPUSH
61495: LD_VAR 0 3
61499: PPUSH
61500: CALL 16128 0 3
61504: ST_TO_ADDR
// SetTag ( j , 107 ) ;
61505: LD_VAR 0 3
61509: PPUSH
61510: LD_INT 107
61512: PPUSH
61513: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
61517: LD_EXP 77
61521: PUSH
61522: LD_VAR 0 2
61526: ARRAY
61527: PUSH
61528: LD_INT 5
61530: GREATEREQUAL
61531: IFFALSE 61535
// break ;
61533: GO 61537
// end ;
61535: GO 61446
61537: POP
61538: POP
// end ; if mc_crates_collector [ i ] and target then
61539: LD_EXP 77
61543: PUSH
61544: LD_VAR 0 2
61548: ARRAY
61549: PUSH
61550: LD_VAR 0 6
61554: AND
61555: IFFALSE 61798
// begin if mc_crates_collector [ i ] < target [ 1 ] then
61557: LD_EXP 77
61561: PUSH
61562: LD_VAR 0 2
61566: ARRAY
61567: PUSH
61568: LD_VAR 0 6
61572: PUSH
61573: LD_INT 1
61575: ARRAY
61576: LESS
61577: IFFALSE 61597
// tmp := mc_crates_collector [ i ] else
61579: LD_ADDR_VAR 0 5
61583: PUSH
61584: LD_EXP 77
61588: PUSH
61589: LD_VAR 0 2
61593: ARRAY
61594: ST_TO_ADDR
61595: GO 61611
// tmp := target [ 1 ] ;
61597: LD_ADDR_VAR 0 5
61601: PUSH
61602: LD_VAR 0 6
61606: PUSH
61607: LD_INT 1
61609: ARRAY
61610: ST_TO_ADDR
// k := 0 ;
61611: LD_ADDR_VAR 0 4
61615: PUSH
61616: LD_INT 0
61618: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
61619: LD_ADDR_VAR 0 3
61623: PUSH
61624: LD_EXP 77
61628: PUSH
61629: LD_VAR 0 2
61633: ARRAY
61634: PUSH
61635: FOR_IN
61636: IFFALSE 61796
// begin k := k + 1 ;
61638: LD_ADDR_VAR 0 4
61642: PUSH
61643: LD_VAR 0 4
61647: PUSH
61648: LD_INT 1
61650: PLUS
61651: ST_TO_ADDR
// if k > tmp then
61652: LD_VAR 0 4
61656: PUSH
61657: LD_VAR 0 5
61661: GREATER
61662: IFFALSE 61666
// break ;
61664: GO 61796
// if not GetClass ( j ) in [ 2 , 16 ] then
61666: LD_VAR 0 3
61670: PPUSH
61671: CALL_OW 257
61675: PUSH
61676: LD_INT 2
61678: PUSH
61679: LD_INT 16
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: IN
61686: NOT
61687: IFFALSE 61740
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
61689: LD_ADDR_EXP 77
61693: PUSH
61694: LD_EXP 77
61698: PPUSH
61699: LD_VAR 0 2
61703: PPUSH
61704: LD_EXP 77
61708: PUSH
61709: LD_VAR 0 2
61713: ARRAY
61714: PUSH
61715: LD_VAR 0 3
61719: DIFF
61720: PPUSH
61721: CALL_OW 1
61725: ST_TO_ADDR
// SetTag ( j , 0 ) ;
61726: LD_VAR 0 3
61730: PPUSH
61731: LD_INT 0
61733: PPUSH
61734: CALL_OW 109
// continue ;
61738: GO 61635
// end ; if IsInUnit ( j ) then
61740: LD_VAR 0 3
61744: PPUSH
61745: CALL_OW 310
61749: IFFALSE 61760
// ComExitBuilding ( j ) ;
61751: LD_VAR 0 3
61755: PPUSH
61756: CALL_OW 122
// wait ( 3 ) ;
61760: LD_INT 3
61762: PPUSH
61763: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
61767: LD_VAR 0 3
61771: PPUSH
61772: LD_VAR 0 6
61776: PUSH
61777: LD_INT 2
61779: ARRAY
61780: PPUSH
61781: LD_VAR 0 6
61785: PUSH
61786: LD_INT 3
61788: ARRAY
61789: PPUSH
61790: CALL_OW 117
// end ;
61794: GO 61635
61796: POP
61797: POP
// end ; end else
61798: GO 62379
// begin for j in cargo do
61800: LD_ADDR_VAR 0 3
61804: PUSH
61805: LD_VAR 0 7
61809: PUSH
61810: FOR_IN
61811: IFFALSE 62377
// begin if GetTag ( j ) <> 0 then
61813: LD_VAR 0 3
61817: PPUSH
61818: CALL_OW 110
61822: PUSH
61823: LD_INT 0
61825: NONEQUAL
61826: IFFALSE 61830
// continue ;
61828: GO 61810
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
61830: LD_VAR 0 3
61834: PPUSH
61835: CALL_OW 256
61839: PUSH
61840: LD_INT 1000
61842: LESS
61843: PUSH
61844: LD_VAR 0 3
61848: PPUSH
61849: LD_EXP 84
61853: PUSH
61854: LD_VAR 0 2
61858: ARRAY
61859: PPUSH
61860: CALL_OW 308
61864: NOT
61865: AND
61866: IFFALSE 61888
// ComMoveToArea ( j , mc_parking [ i ] ) ;
61868: LD_VAR 0 3
61872: PPUSH
61873: LD_EXP 84
61877: PUSH
61878: LD_VAR 0 2
61882: ARRAY
61883: PPUSH
61884: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
61888: LD_VAR 0 3
61892: PPUSH
61893: CALL_OW 256
61897: PUSH
61898: LD_INT 1000
61900: LESS
61901: PUSH
61902: LD_VAR 0 3
61906: PPUSH
61907: LD_EXP 84
61911: PUSH
61912: LD_VAR 0 2
61916: ARRAY
61917: PPUSH
61918: CALL_OW 308
61922: AND
61923: IFFALSE 61927
// continue ;
61925: GO 61810
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
61927: LD_VAR 0 3
61931: PPUSH
61932: CALL_OW 262
61936: PUSH
61937: LD_INT 2
61939: EQUAL
61940: PUSH
61941: LD_VAR 0 3
61945: PPUSH
61946: CALL_OW 261
61950: PUSH
61951: LD_INT 15
61953: LESS
61954: AND
61955: IFFALSE 61959
// continue ;
61957: GO 61810
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
61959: LD_VAR 0 3
61963: PPUSH
61964: CALL_OW 262
61968: PUSH
61969: LD_INT 1
61971: EQUAL
61972: PUSH
61973: LD_VAR 0 3
61977: PPUSH
61978: CALL_OW 261
61982: PUSH
61983: LD_INT 10
61985: LESS
61986: AND
61987: IFFALSE 62316
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
61989: LD_ADDR_VAR 0 8
61993: PUSH
61994: LD_EXP 60
61998: PUSH
61999: LD_VAR 0 2
62003: ARRAY
62004: PPUSH
62005: LD_INT 2
62007: PUSH
62008: LD_INT 30
62010: PUSH
62011: LD_INT 0
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 30
62020: PUSH
62021: LD_INT 1
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: LIST
62032: PPUSH
62033: CALL_OW 72
62037: ST_TO_ADDR
// if not depot then
62038: LD_VAR 0 8
62042: NOT
62043: IFFALSE 62047
// continue ;
62045: GO 61810
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
62047: LD_VAR 0 3
62051: PPUSH
62052: LD_VAR 0 8
62056: PPUSH
62057: LD_VAR 0 3
62061: PPUSH
62062: CALL_OW 74
62066: PPUSH
62067: CALL_OW 296
62071: PUSH
62072: LD_INT 6
62074: LESS
62075: IFFALSE 62091
// SetFuel ( j , 100 ) else
62077: LD_VAR 0 3
62081: PPUSH
62082: LD_INT 100
62084: PPUSH
62085: CALL_OW 240
62089: GO 62316
// if GetFuel ( j ) = 0 then
62091: LD_VAR 0 3
62095: PPUSH
62096: CALL_OW 261
62100: PUSH
62101: LD_INT 0
62103: EQUAL
62104: IFFALSE 62316
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
62106: LD_ADDR_EXP 79
62110: PUSH
62111: LD_EXP 79
62115: PPUSH
62116: LD_VAR 0 2
62120: PPUSH
62121: LD_EXP 79
62125: PUSH
62126: LD_VAR 0 2
62130: ARRAY
62131: PUSH
62132: LD_VAR 0 3
62136: DIFF
62137: PPUSH
62138: CALL_OW 1
62142: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
62143: LD_VAR 0 3
62147: PPUSH
62148: CALL_OW 263
62152: PUSH
62153: LD_INT 1
62155: EQUAL
62156: IFFALSE 62172
// ComExitVehicle ( IsInUnit ( j ) ) ;
62158: LD_VAR 0 3
62162: PPUSH
62163: CALL_OW 310
62167: PPUSH
62168: CALL_OW 121
// if GetControl ( j ) = control_remote then
62172: LD_VAR 0 3
62176: PPUSH
62177: CALL_OW 263
62181: PUSH
62182: LD_INT 2
62184: EQUAL
62185: IFFALSE 62196
// ComUnlink ( j ) ;
62187: LD_VAR 0 3
62191: PPUSH
62192: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
62196: LD_ADDR_VAR 0 9
62200: PUSH
62201: LD_VAR 0 2
62205: PPUSH
62206: LD_INT 3
62208: PPUSH
62209: CALL 71669 0 2
62213: ST_TO_ADDR
// if fac then
62214: LD_VAR 0 9
62218: IFFALSE 62314
// begin for k in fac do
62220: LD_ADDR_VAR 0 4
62224: PUSH
62225: LD_VAR 0 9
62229: PUSH
62230: FOR_IN
62231: IFFALSE 62312
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
62233: LD_ADDR_VAR 0 10
62237: PUSH
62238: LD_VAR 0 9
62242: PPUSH
62243: LD_VAR 0 3
62247: PPUSH
62248: CALL_OW 265
62252: PPUSH
62253: LD_VAR 0 3
62257: PPUSH
62258: CALL_OW 262
62262: PPUSH
62263: LD_VAR 0 3
62267: PPUSH
62268: CALL_OW 263
62272: PPUSH
62273: LD_VAR 0 3
62277: PPUSH
62278: CALL_OW 264
62282: PPUSH
62283: CALL 13660 0 5
62287: ST_TO_ADDR
// if components then
62288: LD_VAR 0 10
62292: IFFALSE 62310
// begin MC_InsertProduceList ( i , components ) ;
62294: LD_VAR 0 2
62298: PPUSH
62299: LD_VAR 0 10
62303: PPUSH
62304: CALL 71214 0 2
// break ;
62308: GO 62312
// end ; end ;
62310: GO 62230
62312: POP
62313: POP
// end ; continue ;
62314: GO 61810
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
62316: LD_VAR 0 3
62320: PPUSH
62321: LD_INT 1
62323: PPUSH
62324: CALL_OW 289
62328: PUSH
62329: LD_INT 100
62331: LESS
62332: PUSH
62333: LD_VAR 0 3
62337: PPUSH
62338: CALL_OW 314
62342: NOT
62343: AND
62344: IFFALSE 62373
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
62346: LD_VAR 0 3
62350: PPUSH
62351: LD_VAR 0 6
62355: PUSH
62356: LD_INT 2
62358: ARRAY
62359: PPUSH
62360: LD_VAR 0 6
62364: PUSH
62365: LD_INT 3
62367: ARRAY
62368: PPUSH
62369: CALL_OW 117
// break ;
62373: GO 62377
// end ;
62375: GO 61810
62377: POP
62378: POP
// end ; end ;
62379: GO 60648
62381: POP
62382: POP
// end ;
62383: LD_VAR 0 1
62387: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
62388: LD_INT 0
62390: PPUSH
62391: PPUSH
62392: PPUSH
62393: PPUSH
// if not mc_bases then
62394: LD_EXP 60
62398: NOT
62399: IFFALSE 62403
// exit ;
62401: GO 62564
// for i = 1 to mc_bases do
62403: LD_ADDR_VAR 0 2
62407: PUSH
62408: DOUBLE
62409: LD_INT 1
62411: DEC
62412: ST_TO_ADDR
62413: LD_EXP 60
62417: PUSH
62418: FOR_TO
62419: IFFALSE 62562
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
62421: LD_ADDR_VAR 0 4
62425: PUSH
62426: LD_EXP 79
62430: PUSH
62431: LD_VAR 0 2
62435: ARRAY
62436: PUSH
62437: LD_EXP 82
62441: PUSH
62442: LD_VAR 0 2
62446: ARRAY
62447: UNION
62448: PPUSH
62449: LD_INT 33
62451: PUSH
62452: LD_INT 2
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PPUSH
62459: CALL_OW 72
62463: ST_TO_ADDR
// if tmp then
62464: LD_VAR 0 4
62468: IFFALSE 62560
// for j in tmp do
62470: LD_ADDR_VAR 0 3
62474: PUSH
62475: LD_VAR 0 4
62479: PUSH
62480: FOR_IN
62481: IFFALSE 62558
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
62483: LD_VAR 0 3
62487: PPUSH
62488: CALL_OW 312
62492: NOT
62493: PUSH
62494: LD_VAR 0 3
62498: PPUSH
62499: CALL_OW 256
62503: PUSH
62504: LD_INT 250
62506: GREATEREQUAL
62507: AND
62508: IFFALSE 62521
// Connect ( j ) else
62510: LD_VAR 0 3
62514: PPUSH
62515: CALL 19061 0 1
62519: GO 62556
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
62521: LD_VAR 0 3
62525: PPUSH
62526: CALL_OW 256
62530: PUSH
62531: LD_INT 250
62533: LESS
62534: PUSH
62535: LD_VAR 0 3
62539: PPUSH
62540: CALL_OW 312
62544: AND
62545: IFFALSE 62556
// ComUnlink ( j ) ;
62547: LD_VAR 0 3
62551: PPUSH
62552: CALL_OW 136
62556: GO 62480
62558: POP
62559: POP
// end ;
62560: GO 62418
62562: POP
62563: POP
// end ;
62564: LD_VAR 0 1
62568: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
62569: LD_INT 0
62571: PPUSH
62572: PPUSH
62573: PPUSH
62574: PPUSH
62575: PPUSH
// if not mc_bases then
62576: LD_EXP 60
62580: NOT
62581: IFFALSE 62585
// exit ;
62583: GO 63030
// for i = 1 to mc_bases do
62585: LD_ADDR_VAR 0 2
62589: PUSH
62590: DOUBLE
62591: LD_INT 1
62593: DEC
62594: ST_TO_ADDR
62595: LD_EXP 60
62599: PUSH
62600: FOR_TO
62601: IFFALSE 63028
// begin if not mc_produce [ i ] then
62603: LD_EXP 81
62607: PUSH
62608: LD_VAR 0 2
62612: ARRAY
62613: NOT
62614: IFFALSE 62618
// continue ;
62616: GO 62600
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
62618: LD_ADDR_VAR 0 5
62622: PUSH
62623: LD_EXP 60
62627: PUSH
62628: LD_VAR 0 2
62632: ARRAY
62633: PPUSH
62634: LD_INT 30
62636: PUSH
62637: LD_INT 3
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PPUSH
62644: CALL_OW 72
62648: ST_TO_ADDR
// if not fac then
62649: LD_VAR 0 5
62653: NOT
62654: IFFALSE 62658
// continue ;
62656: GO 62600
// for j in fac do
62658: LD_ADDR_VAR 0 3
62662: PUSH
62663: LD_VAR 0 5
62667: PUSH
62668: FOR_IN
62669: IFFALSE 63024
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
62671: LD_VAR 0 3
62675: PPUSH
62676: CALL_OW 461
62680: PUSH
62681: LD_INT 2
62683: NONEQUAL
62684: PUSH
62685: LD_VAR 0 3
62689: PPUSH
62690: LD_INT 15
62692: PPUSH
62693: CALL 18721 0 2
62697: PUSH
62698: LD_INT 4
62700: ARRAY
62701: OR
62702: IFFALSE 62706
// continue ;
62704: GO 62668
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
62706: LD_VAR 0 3
62710: PPUSH
62711: LD_EXP 81
62715: PUSH
62716: LD_VAR 0 2
62720: ARRAY
62721: PUSH
62722: LD_INT 1
62724: ARRAY
62725: PUSH
62726: LD_INT 1
62728: ARRAY
62729: PPUSH
62730: LD_EXP 81
62734: PUSH
62735: LD_VAR 0 2
62739: ARRAY
62740: PUSH
62741: LD_INT 1
62743: ARRAY
62744: PUSH
62745: LD_INT 2
62747: ARRAY
62748: PPUSH
62749: LD_EXP 81
62753: PUSH
62754: LD_VAR 0 2
62758: ARRAY
62759: PUSH
62760: LD_INT 1
62762: ARRAY
62763: PUSH
62764: LD_INT 3
62766: ARRAY
62767: PPUSH
62768: LD_EXP 81
62772: PUSH
62773: LD_VAR 0 2
62777: ARRAY
62778: PUSH
62779: LD_INT 1
62781: ARRAY
62782: PUSH
62783: LD_INT 4
62785: ARRAY
62786: PPUSH
62787: CALL_OW 448
62791: PUSH
62792: LD_VAR 0 3
62796: PPUSH
62797: LD_EXP 81
62801: PUSH
62802: LD_VAR 0 2
62806: ARRAY
62807: PUSH
62808: LD_INT 1
62810: ARRAY
62811: PUSH
62812: LD_INT 1
62814: ARRAY
62815: PUSH
62816: LD_EXP 81
62820: PUSH
62821: LD_VAR 0 2
62825: ARRAY
62826: PUSH
62827: LD_INT 1
62829: ARRAY
62830: PUSH
62831: LD_INT 2
62833: ARRAY
62834: PUSH
62835: LD_EXP 81
62839: PUSH
62840: LD_VAR 0 2
62844: ARRAY
62845: PUSH
62846: LD_INT 1
62848: ARRAY
62849: PUSH
62850: LD_INT 3
62852: ARRAY
62853: PUSH
62854: LD_EXP 81
62858: PUSH
62859: LD_VAR 0 2
62863: ARRAY
62864: PUSH
62865: LD_INT 1
62867: ARRAY
62868: PUSH
62869: LD_INT 4
62871: ARRAY
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: PPUSH
62879: CALL 22392 0 2
62883: AND
62884: IFFALSE 63022
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
62886: LD_VAR 0 3
62890: PPUSH
62891: LD_EXP 81
62895: PUSH
62896: LD_VAR 0 2
62900: ARRAY
62901: PUSH
62902: LD_INT 1
62904: ARRAY
62905: PUSH
62906: LD_INT 1
62908: ARRAY
62909: PPUSH
62910: LD_EXP 81
62914: PUSH
62915: LD_VAR 0 2
62919: ARRAY
62920: PUSH
62921: LD_INT 1
62923: ARRAY
62924: PUSH
62925: LD_INT 2
62927: ARRAY
62928: PPUSH
62929: LD_EXP 81
62933: PUSH
62934: LD_VAR 0 2
62938: ARRAY
62939: PUSH
62940: LD_INT 1
62942: ARRAY
62943: PUSH
62944: LD_INT 3
62946: ARRAY
62947: PPUSH
62948: LD_EXP 81
62952: PUSH
62953: LD_VAR 0 2
62957: ARRAY
62958: PUSH
62959: LD_INT 1
62961: ARRAY
62962: PUSH
62963: LD_INT 4
62965: ARRAY
62966: PPUSH
62967: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
62971: LD_ADDR_VAR 0 4
62975: PUSH
62976: LD_EXP 81
62980: PUSH
62981: LD_VAR 0 2
62985: ARRAY
62986: PPUSH
62987: LD_INT 1
62989: PPUSH
62990: CALL_OW 3
62994: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
62995: LD_ADDR_EXP 81
62999: PUSH
63000: LD_EXP 81
63004: PPUSH
63005: LD_VAR 0 2
63009: PPUSH
63010: LD_VAR 0 4
63014: PPUSH
63015: CALL_OW 1
63019: ST_TO_ADDR
// break ;
63020: GO 63024
// end ; end ;
63022: GO 62668
63024: POP
63025: POP
// end ;
63026: GO 62600
63028: POP
63029: POP
// end ;
63030: LD_VAR 0 1
63034: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
63035: LD_INT 0
63037: PPUSH
63038: PPUSH
63039: PPUSH
// if not mc_bases then
63040: LD_EXP 60
63044: NOT
63045: IFFALSE 63049
// exit ;
63047: GO 63138
// for i = 1 to mc_bases do
63049: LD_ADDR_VAR 0 2
63053: PUSH
63054: DOUBLE
63055: LD_INT 1
63057: DEC
63058: ST_TO_ADDR
63059: LD_EXP 60
63063: PUSH
63064: FOR_TO
63065: IFFALSE 63136
// begin if mc_attack [ i ] then
63067: LD_EXP 80
63071: PUSH
63072: LD_VAR 0 2
63076: ARRAY
63077: IFFALSE 63134
// begin tmp := mc_attack [ i ] [ 1 ] ;
63079: LD_ADDR_VAR 0 3
63083: PUSH
63084: LD_EXP 80
63088: PUSH
63089: LD_VAR 0 2
63093: ARRAY
63094: PUSH
63095: LD_INT 1
63097: ARRAY
63098: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
63099: LD_ADDR_EXP 80
63103: PUSH
63104: LD_EXP 80
63108: PPUSH
63109: LD_VAR 0 2
63113: PPUSH
63114: EMPTY
63115: PPUSH
63116: CALL_OW 1
63120: ST_TO_ADDR
// Attack ( tmp ) ;
63121: LD_VAR 0 3
63125: PPUSH
63126: CALL 89155 0 1
// exit ;
63130: POP
63131: POP
63132: GO 63138
// end ; end ;
63134: GO 63064
63136: POP
63137: POP
// end ;
63138: LD_VAR 0 1
63142: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
63143: LD_INT 0
63145: PPUSH
63146: PPUSH
63147: PPUSH
63148: PPUSH
63149: PPUSH
63150: PPUSH
63151: PPUSH
// if not mc_bases then
63152: LD_EXP 60
63156: NOT
63157: IFFALSE 63161
// exit ;
63159: GO 63743
// for i = 1 to mc_bases do
63161: LD_ADDR_VAR 0 2
63165: PUSH
63166: DOUBLE
63167: LD_INT 1
63169: DEC
63170: ST_TO_ADDR
63171: LD_EXP 60
63175: PUSH
63176: FOR_TO
63177: IFFALSE 63741
// begin if not mc_bases [ i ] then
63179: LD_EXP 60
63183: PUSH
63184: LD_VAR 0 2
63188: ARRAY
63189: NOT
63190: IFFALSE 63194
// continue ;
63192: GO 63176
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
63194: LD_ADDR_VAR 0 7
63198: PUSH
63199: LD_EXP 60
63203: PUSH
63204: LD_VAR 0 2
63208: ARRAY
63209: PUSH
63210: LD_INT 1
63212: ARRAY
63213: PPUSH
63214: CALL 12964 0 1
63218: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
63219: LD_ADDR_EXP 83
63223: PUSH
63224: LD_EXP 83
63228: PPUSH
63229: LD_VAR 0 2
63233: PPUSH
63234: LD_EXP 60
63238: PUSH
63239: LD_VAR 0 2
63243: ARRAY
63244: PUSH
63245: LD_INT 1
63247: ARRAY
63248: PPUSH
63249: CALL_OW 255
63253: PPUSH
63254: LD_EXP 85
63258: PUSH
63259: LD_VAR 0 2
63263: ARRAY
63264: PPUSH
63265: CALL 12929 0 2
63269: PPUSH
63270: CALL_OW 1
63274: ST_TO_ADDR
// if not mc_scan [ i ] then
63275: LD_EXP 83
63279: PUSH
63280: LD_VAR 0 2
63284: ARRAY
63285: NOT
63286: IFFALSE 63441
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
63288: LD_ADDR_VAR 0 4
63292: PUSH
63293: LD_EXP 60
63297: PUSH
63298: LD_VAR 0 2
63302: ARRAY
63303: PPUSH
63304: LD_INT 2
63306: PUSH
63307: LD_INT 25
63309: PUSH
63310: LD_INT 5
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 25
63319: PUSH
63320: LD_INT 8
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 25
63329: PUSH
63330: LD_INT 9
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: PPUSH
63343: CALL_OW 72
63347: ST_TO_ADDR
// if not tmp then
63348: LD_VAR 0 4
63352: NOT
63353: IFFALSE 63357
// continue ;
63355: GO 63176
// for j in tmp do
63357: LD_ADDR_VAR 0 3
63361: PUSH
63362: LD_VAR 0 4
63366: PUSH
63367: FOR_IN
63368: IFFALSE 63439
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
63370: LD_VAR 0 3
63374: PPUSH
63375: CALL_OW 310
63379: PPUSH
63380: CALL_OW 266
63384: PUSH
63385: LD_INT 5
63387: EQUAL
63388: PUSH
63389: LD_VAR 0 3
63393: PPUSH
63394: CALL_OW 257
63398: PUSH
63399: LD_INT 1
63401: EQUAL
63402: AND
63403: PUSH
63404: LD_VAR 0 3
63408: PPUSH
63409: CALL_OW 459
63413: NOT
63414: AND
63415: PUSH
63416: LD_VAR 0 7
63420: AND
63421: IFFALSE 63437
// ComChangeProfession ( j , class ) ;
63423: LD_VAR 0 3
63427: PPUSH
63428: LD_VAR 0 7
63432: PPUSH
63433: CALL_OW 123
63437: GO 63367
63439: POP
63440: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
63441: LD_EXP 83
63445: PUSH
63446: LD_VAR 0 2
63450: ARRAY
63451: PUSH
63452: LD_EXP 82
63456: PUSH
63457: LD_VAR 0 2
63461: ARRAY
63462: NOT
63463: AND
63464: PUSH
63465: LD_EXP 60
63469: PUSH
63470: LD_VAR 0 2
63474: ARRAY
63475: PPUSH
63476: LD_INT 30
63478: PUSH
63479: LD_INT 32
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PPUSH
63486: CALL_OW 72
63490: NOT
63491: AND
63492: PUSH
63493: LD_EXP 60
63497: PUSH
63498: LD_VAR 0 2
63502: ARRAY
63503: PPUSH
63504: LD_INT 2
63506: PUSH
63507: LD_INT 30
63509: PUSH
63510: LD_INT 4
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 30
63519: PUSH
63520: LD_INT 5
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: LIST
63531: PPUSH
63532: CALL_OW 72
63536: NOT
63537: AND
63538: IFFALSE 63670
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
63540: LD_ADDR_VAR 0 4
63544: PUSH
63545: LD_EXP 60
63549: PUSH
63550: LD_VAR 0 2
63554: ARRAY
63555: PPUSH
63556: LD_INT 2
63558: PUSH
63559: LD_INT 25
63561: PUSH
63562: LD_INT 1
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 25
63571: PUSH
63572: LD_INT 5
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 25
63581: PUSH
63582: LD_INT 8
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 25
63591: PUSH
63592: LD_INT 9
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: PPUSH
63606: CALL_OW 72
63610: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
63611: LD_ADDR_VAR 0 4
63615: PUSH
63616: LD_VAR 0 4
63620: PUSH
63621: LD_VAR 0 4
63625: PPUSH
63626: LD_INT 18
63628: PPUSH
63629: CALL 44689 0 2
63633: DIFF
63634: ST_TO_ADDR
// if tmp then
63635: LD_VAR 0 4
63639: IFFALSE 63670
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
63641: LD_VAR 0 2
63645: PPUSH
63646: LD_VAR 0 4
63650: PPUSH
63651: LD_EXP 85
63655: PUSH
63656: LD_VAR 0 2
63660: ARRAY
63661: PPUSH
63662: CALL 93864 0 3
// exit ;
63666: POP
63667: POP
63668: GO 63743
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
63670: LD_EXP 83
63674: PUSH
63675: LD_VAR 0 2
63679: ARRAY
63680: PUSH
63681: LD_EXP 82
63685: PUSH
63686: LD_VAR 0 2
63690: ARRAY
63691: AND
63692: IFFALSE 63739
// begin tmp := mc_defender [ i ] ;
63694: LD_ADDR_VAR 0 4
63698: PUSH
63699: LD_EXP 82
63703: PUSH
63704: LD_VAR 0 2
63708: ARRAY
63709: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
63710: LD_VAR 0 2
63714: PPUSH
63715: LD_VAR 0 4
63719: PPUSH
63720: LD_EXP 83
63724: PUSH
63725: LD_VAR 0 2
63729: ARRAY
63730: PPUSH
63731: CALL 94425 0 3
// exit ;
63735: POP
63736: POP
63737: GO 63743
// end ; end ;
63739: GO 63176
63741: POP
63742: POP
// end ;
63743: LD_VAR 0 1
63747: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
63748: LD_INT 0
63750: PPUSH
63751: PPUSH
63752: PPUSH
63753: PPUSH
63754: PPUSH
63755: PPUSH
63756: PPUSH
63757: PPUSH
63758: PPUSH
63759: PPUSH
63760: PPUSH
// if not mc_bases then
63761: LD_EXP 60
63765: NOT
63766: IFFALSE 63770
// exit ;
63768: GO 64857
// for i = 1 to mc_bases do
63770: LD_ADDR_VAR 0 2
63774: PUSH
63775: DOUBLE
63776: LD_INT 1
63778: DEC
63779: ST_TO_ADDR
63780: LD_EXP 60
63784: PUSH
63785: FOR_TO
63786: IFFALSE 64855
// begin tmp := mc_lab [ i ] ;
63788: LD_ADDR_VAR 0 6
63792: PUSH
63793: LD_EXP 93
63797: PUSH
63798: LD_VAR 0 2
63802: ARRAY
63803: ST_TO_ADDR
// if not tmp then
63804: LD_VAR 0 6
63808: NOT
63809: IFFALSE 63813
// continue ;
63811: GO 63785
// idle_lab := 0 ;
63813: LD_ADDR_VAR 0 11
63817: PUSH
63818: LD_INT 0
63820: ST_TO_ADDR
// for j in tmp do
63821: LD_ADDR_VAR 0 3
63825: PUSH
63826: LD_VAR 0 6
63830: PUSH
63831: FOR_IN
63832: IFFALSE 64851
// begin researching := false ;
63834: LD_ADDR_VAR 0 10
63838: PUSH
63839: LD_INT 0
63841: ST_TO_ADDR
// side := GetSide ( j ) ;
63842: LD_ADDR_VAR 0 4
63846: PUSH
63847: LD_VAR 0 3
63851: PPUSH
63852: CALL_OW 255
63856: ST_TO_ADDR
// if not mc_tech [ side ] then
63857: LD_EXP 87
63861: PUSH
63862: LD_VAR 0 4
63866: ARRAY
63867: NOT
63868: IFFALSE 63872
// continue ;
63870: GO 63831
// if BuildingStatus ( j ) = bs_idle then
63872: LD_VAR 0 3
63876: PPUSH
63877: CALL_OW 461
63881: PUSH
63882: LD_INT 2
63884: EQUAL
63885: IFFALSE 64073
// begin if idle_lab and UnitsInside ( j ) < 6 then
63887: LD_VAR 0 11
63891: PUSH
63892: LD_VAR 0 3
63896: PPUSH
63897: CALL_OW 313
63901: PUSH
63902: LD_INT 6
63904: LESS
63905: AND
63906: IFFALSE 63977
// begin tmp2 := UnitsInside ( idle_lab ) ;
63908: LD_ADDR_VAR 0 9
63912: PUSH
63913: LD_VAR 0 11
63917: PPUSH
63918: CALL_OW 313
63922: ST_TO_ADDR
// if tmp2 then
63923: LD_VAR 0 9
63927: IFFALSE 63969
// for x in tmp2 do
63929: LD_ADDR_VAR 0 7
63933: PUSH
63934: LD_VAR 0 9
63938: PUSH
63939: FOR_IN
63940: IFFALSE 63967
// begin ComExitBuilding ( x ) ;
63942: LD_VAR 0 7
63946: PPUSH
63947: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
63951: LD_VAR 0 7
63955: PPUSH
63956: LD_VAR 0 3
63960: PPUSH
63961: CALL_OW 180
// end ;
63965: GO 63939
63967: POP
63968: POP
// idle_lab := 0 ;
63969: LD_ADDR_VAR 0 11
63973: PUSH
63974: LD_INT 0
63976: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
63977: LD_ADDR_VAR 0 5
63981: PUSH
63982: LD_EXP 87
63986: PUSH
63987: LD_VAR 0 4
63991: ARRAY
63992: PUSH
63993: FOR_IN
63994: IFFALSE 64054
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
63996: LD_VAR 0 3
64000: PPUSH
64001: LD_VAR 0 5
64005: PPUSH
64006: CALL_OW 430
64010: PUSH
64011: LD_VAR 0 4
64015: PPUSH
64016: LD_VAR 0 5
64020: PPUSH
64021: CALL 12034 0 2
64025: AND
64026: IFFALSE 64052
// begin researching := true ;
64028: LD_ADDR_VAR 0 10
64032: PUSH
64033: LD_INT 1
64035: ST_TO_ADDR
// ComResearch ( j , t ) ;
64036: LD_VAR 0 3
64040: PPUSH
64041: LD_VAR 0 5
64045: PPUSH
64046: CALL_OW 124
// break ;
64050: GO 64054
// end ;
64052: GO 63993
64054: POP
64055: POP
// if not researching then
64056: LD_VAR 0 10
64060: NOT
64061: IFFALSE 64073
// idle_lab := j ;
64063: LD_ADDR_VAR 0 11
64067: PUSH
64068: LD_VAR 0 3
64072: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
64073: LD_VAR 0 3
64077: PPUSH
64078: CALL_OW 461
64082: PUSH
64083: LD_INT 10
64085: EQUAL
64086: IFFALSE 64674
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
64088: LD_EXP 89
64092: PUSH
64093: LD_VAR 0 2
64097: ARRAY
64098: NOT
64099: PUSH
64100: LD_EXP 90
64104: PUSH
64105: LD_VAR 0 2
64109: ARRAY
64110: NOT
64111: AND
64112: PUSH
64113: LD_EXP 87
64117: PUSH
64118: LD_VAR 0 4
64122: ARRAY
64123: PUSH
64124: LD_INT 1
64126: GREATER
64127: AND
64128: IFFALSE 64259
// begin ComCancel ( j ) ;
64130: LD_VAR 0 3
64134: PPUSH
64135: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
64139: LD_ADDR_EXP 87
64143: PUSH
64144: LD_EXP 87
64148: PPUSH
64149: LD_VAR 0 4
64153: PPUSH
64154: LD_EXP 87
64158: PUSH
64159: LD_VAR 0 4
64163: ARRAY
64164: PPUSH
64165: LD_EXP 87
64169: PUSH
64170: LD_VAR 0 4
64174: ARRAY
64175: PUSH
64176: LD_INT 1
64178: MINUS
64179: PPUSH
64180: LD_EXP 87
64184: PUSH
64185: LD_VAR 0 4
64189: ARRAY
64190: PPUSH
64191: LD_INT 0
64193: PPUSH
64194: CALL 15546 0 4
64198: PPUSH
64199: CALL_OW 1
64203: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
64204: LD_ADDR_EXP 87
64208: PUSH
64209: LD_EXP 87
64213: PPUSH
64214: LD_VAR 0 4
64218: PPUSH
64219: LD_EXP 87
64223: PUSH
64224: LD_VAR 0 4
64228: ARRAY
64229: PPUSH
64230: LD_EXP 87
64234: PUSH
64235: LD_VAR 0 4
64239: ARRAY
64240: PPUSH
64241: LD_INT 1
64243: PPUSH
64244: LD_INT 0
64246: PPUSH
64247: CALL 15546 0 4
64251: PPUSH
64252: CALL_OW 1
64256: ST_TO_ADDR
// continue ;
64257: GO 63831
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
64259: LD_EXP 89
64263: PUSH
64264: LD_VAR 0 2
64268: ARRAY
64269: PUSH
64270: LD_EXP 90
64274: PUSH
64275: LD_VAR 0 2
64279: ARRAY
64280: NOT
64281: AND
64282: IFFALSE 64409
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
64284: LD_ADDR_EXP 90
64288: PUSH
64289: LD_EXP 90
64293: PPUSH
64294: LD_VAR 0 2
64298: PUSH
64299: LD_EXP 90
64303: PUSH
64304: LD_VAR 0 2
64308: ARRAY
64309: PUSH
64310: LD_INT 1
64312: PLUS
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PPUSH
64318: LD_EXP 89
64322: PUSH
64323: LD_VAR 0 2
64327: ARRAY
64328: PUSH
64329: LD_INT 1
64331: ARRAY
64332: PPUSH
64333: CALL 16128 0 3
64337: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
64338: LD_EXP 89
64342: PUSH
64343: LD_VAR 0 2
64347: ARRAY
64348: PUSH
64349: LD_INT 1
64351: ARRAY
64352: PPUSH
64353: LD_INT 112
64355: PPUSH
64356: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
64360: LD_ADDR_VAR 0 9
64364: PUSH
64365: LD_EXP 89
64369: PUSH
64370: LD_VAR 0 2
64374: ARRAY
64375: PPUSH
64376: LD_INT 1
64378: PPUSH
64379: CALL_OW 3
64383: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
64384: LD_ADDR_EXP 89
64388: PUSH
64389: LD_EXP 89
64393: PPUSH
64394: LD_VAR 0 2
64398: PPUSH
64399: LD_VAR 0 9
64403: PPUSH
64404: CALL_OW 1
64408: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
64409: LD_EXP 89
64413: PUSH
64414: LD_VAR 0 2
64418: ARRAY
64419: PUSH
64420: LD_EXP 90
64424: PUSH
64425: LD_VAR 0 2
64429: ARRAY
64430: AND
64431: PUSH
64432: LD_EXP 90
64436: PUSH
64437: LD_VAR 0 2
64441: ARRAY
64442: PUSH
64443: LD_INT 1
64445: ARRAY
64446: PPUSH
64447: CALL_OW 310
64451: NOT
64452: AND
64453: PUSH
64454: LD_VAR 0 3
64458: PPUSH
64459: CALL_OW 313
64463: PUSH
64464: LD_INT 6
64466: EQUAL
64467: AND
64468: IFFALSE 64524
// begin tmp2 := UnitsInside ( j ) ;
64470: LD_ADDR_VAR 0 9
64474: PUSH
64475: LD_VAR 0 3
64479: PPUSH
64480: CALL_OW 313
64484: ST_TO_ADDR
// if tmp2 = 6 then
64485: LD_VAR 0 9
64489: PUSH
64490: LD_INT 6
64492: EQUAL
64493: IFFALSE 64524
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
64495: LD_VAR 0 9
64499: PUSH
64500: LD_INT 1
64502: ARRAY
64503: PPUSH
64504: LD_INT 112
64506: PPUSH
64507: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
64511: LD_VAR 0 9
64515: PUSH
64516: LD_INT 1
64518: ARRAY
64519: PPUSH
64520: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
64524: LD_EXP 90
64528: PUSH
64529: LD_VAR 0 2
64533: ARRAY
64534: PUSH
64535: LD_EXP 90
64539: PUSH
64540: LD_VAR 0 2
64544: ARRAY
64545: PUSH
64546: LD_INT 1
64548: ARRAY
64549: PPUSH
64550: CALL_OW 314
64554: NOT
64555: AND
64556: PUSH
64557: LD_EXP 90
64561: PUSH
64562: LD_VAR 0 2
64566: ARRAY
64567: PUSH
64568: LD_INT 1
64570: ARRAY
64571: PPUSH
64572: CALL_OW 310
64576: NOT
64577: AND
64578: IFFALSE 64604
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
64580: LD_EXP 90
64584: PUSH
64585: LD_VAR 0 2
64589: ARRAY
64590: PUSH
64591: LD_INT 1
64593: ARRAY
64594: PPUSH
64595: LD_VAR 0 3
64599: PPUSH
64600: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
64604: LD_EXP 90
64608: PUSH
64609: LD_VAR 0 2
64613: ARRAY
64614: PUSH
64615: LD_INT 1
64617: ARRAY
64618: PPUSH
64619: CALL_OW 310
64623: PUSH
64624: LD_EXP 90
64628: PUSH
64629: LD_VAR 0 2
64633: ARRAY
64634: PUSH
64635: LD_INT 1
64637: ARRAY
64638: PPUSH
64639: CALL_OW 310
64643: PPUSH
64644: CALL_OW 461
64648: PUSH
64649: LD_INT 3
64651: NONEQUAL
64652: AND
64653: IFFALSE 64674
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
64655: LD_EXP 90
64659: PUSH
64660: LD_VAR 0 2
64664: ARRAY
64665: PUSH
64666: LD_INT 1
64668: ARRAY
64669: PPUSH
64670: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
64674: LD_VAR 0 3
64678: PPUSH
64679: CALL_OW 461
64683: PUSH
64684: LD_INT 6
64686: EQUAL
64687: PUSH
64688: LD_VAR 0 6
64692: PUSH
64693: LD_INT 1
64695: GREATER
64696: AND
64697: IFFALSE 64849
// begin sci := [ ] ;
64699: LD_ADDR_VAR 0 8
64703: PUSH
64704: EMPTY
64705: ST_TO_ADDR
// for x in ( tmp diff j ) do
64706: LD_ADDR_VAR 0 7
64710: PUSH
64711: LD_VAR 0 6
64715: PUSH
64716: LD_VAR 0 3
64720: DIFF
64721: PUSH
64722: FOR_IN
64723: IFFALSE 64775
// begin if sci = 6 then
64725: LD_VAR 0 8
64729: PUSH
64730: LD_INT 6
64732: EQUAL
64733: IFFALSE 64737
// break ;
64735: GO 64775
// if BuildingStatus ( x ) = bs_idle then
64737: LD_VAR 0 7
64741: PPUSH
64742: CALL_OW 461
64746: PUSH
64747: LD_INT 2
64749: EQUAL
64750: IFFALSE 64773
// sci := sci ^ UnitsInside ( x ) ;
64752: LD_ADDR_VAR 0 8
64756: PUSH
64757: LD_VAR 0 8
64761: PUSH
64762: LD_VAR 0 7
64766: PPUSH
64767: CALL_OW 313
64771: ADD
64772: ST_TO_ADDR
// end ;
64773: GO 64722
64775: POP
64776: POP
// if not sci then
64777: LD_VAR 0 8
64781: NOT
64782: IFFALSE 64786
// continue ;
64784: GO 63831
// for x in sci do
64786: LD_ADDR_VAR 0 7
64790: PUSH
64791: LD_VAR 0 8
64795: PUSH
64796: FOR_IN
64797: IFFALSE 64847
// if IsInUnit ( x ) and not HasTask ( x ) then
64799: LD_VAR 0 7
64803: PPUSH
64804: CALL_OW 310
64808: PUSH
64809: LD_VAR 0 7
64813: PPUSH
64814: CALL_OW 314
64818: NOT
64819: AND
64820: IFFALSE 64845
// begin ComExitBuilding ( x ) ;
64822: LD_VAR 0 7
64826: PPUSH
64827: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
64831: LD_VAR 0 7
64835: PPUSH
64836: LD_VAR 0 3
64840: PPUSH
64841: CALL_OW 180
// end ;
64845: GO 64796
64847: POP
64848: POP
// end ; end ;
64849: GO 63831
64851: POP
64852: POP
// end ;
64853: GO 63785
64855: POP
64856: POP
// end ;
64857: LD_VAR 0 1
64861: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
64862: LD_INT 0
64864: PPUSH
64865: PPUSH
// if not mc_bases then
64866: LD_EXP 60
64870: NOT
64871: IFFALSE 64875
// exit ;
64873: GO 64956
// for i = 1 to mc_bases do
64875: LD_ADDR_VAR 0 2
64879: PUSH
64880: DOUBLE
64881: LD_INT 1
64883: DEC
64884: ST_TO_ADDR
64885: LD_EXP 60
64889: PUSH
64890: FOR_TO
64891: IFFALSE 64954
// if mc_mines [ i ] and mc_miners [ i ] then
64893: LD_EXP 73
64897: PUSH
64898: LD_VAR 0 2
64902: ARRAY
64903: PUSH
64904: LD_EXP 74
64908: PUSH
64909: LD_VAR 0 2
64913: ARRAY
64914: AND
64915: IFFALSE 64952
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
64917: LD_EXP 74
64921: PUSH
64922: LD_VAR 0 2
64926: ARRAY
64927: PUSH
64928: LD_INT 1
64930: ARRAY
64931: PPUSH
64932: CALL_OW 255
64936: PPUSH
64937: LD_EXP 73
64941: PUSH
64942: LD_VAR 0 2
64946: ARRAY
64947: PPUSH
64948: CALL 13117 0 2
64952: GO 64890
64954: POP
64955: POP
// end ;
64956: LD_VAR 0 1
64960: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
64961: LD_INT 0
64963: PPUSH
64964: PPUSH
64965: PPUSH
64966: PPUSH
64967: PPUSH
64968: PPUSH
64969: PPUSH
64970: PPUSH
// if not mc_bases or not mc_parking then
64971: LD_EXP 60
64975: NOT
64976: PUSH
64977: LD_EXP 84
64981: NOT
64982: OR
64983: IFFALSE 64987
// exit ;
64985: GO 65686
// for i = 1 to mc_bases do
64987: LD_ADDR_VAR 0 2
64991: PUSH
64992: DOUBLE
64993: LD_INT 1
64995: DEC
64996: ST_TO_ADDR
64997: LD_EXP 60
65001: PUSH
65002: FOR_TO
65003: IFFALSE 65684
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
65005: LD_EXP 60
65009: PUSH
65010: LD_VAR 0 2
65014: ARRAY
65015: NOT
65016: PUSH
65017: LD_EXP 84
65021: PUSH
65022: LD_VAR 0 2
65026: ARRAY
65027: NOT
65028: OR
65029: IFFALSE 65033
// continue ;
65031: GO 65002
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
65033: LD_ADDR_VAR 0 5
65037: PUSH
65038: LD_EXP 60
65042: PUSH
65043: LD_VAR 0 2
65047: ARRAY
65048: PUSH
65049: LD_INT 1
65051: ARRAY
65052: PPUSH
65053: CALL_OW 255
65057: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
65058: LD_ADDR_VAR 0 6
65062: PUSH
65063: LD_EXP 60
65067: PUSH
65068: LD_VAR 0 2
65072: ARRAY
65073: PPUSH
65074: LD_INT 30
65076: PUSH
65077: LD_INT 3
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PPUSH
65084: CALL_OW 72
65088: ST_TO_ADDR
// if not fac then
65089: LD_VAR 0 6
65093: NOT
65094: IFFALSE 65145
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
65096: LD_ADDR_VAR 0 6
65100: PUSH
65101: LD_EXP 60
65105: PUSH
65106: LD_VAR 0 2
65110: ARRAY
65111: PPUSH
65112: LD_INT 2
65114: PUSH
65115: LD_INT 30
65117: PUSH
65118: LD_INT 0
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: PUSH
65125: LD_INT 30
65127: PUSH
65128: LD_INT 1
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: LIST
65139: PPUSH
65140: CALL_OW 72
65144: ST_TO_ADDR
// if not fac then
65145: LD_VAR 0 6
65149: NOT
65150: IFFALSE 65154
// continue ;
65152: GO 65002
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
65154: LD_ADDR_VAR 0 7
65158: PUSH
65159: LD_EXP 84
65163: PUSH
65164: LD_VAR 0 2
65168: ARRAY
65169: PPUSH
65170: LD_INT 22
65172: PUSH
65173: LD_VAR 0 5
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 21
65184: PUSH
65185: LD_INT 2
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: LD_INT 3
65194: PUSH
65195: LD_INT 24
65197: PUSH
65198: LD_INT 1000
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: LIST
65213: PPUSH
65214: CALL_OW 70
65218: ST_TO_ADDR
// for j in fac do
65219: LD_ADDR_VAR 0 3
65223: PUSH
65224: LD_VAR 0 6
65228: PUSH
65229: FOR_IN
65230: IFFALSE 65311
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
65232: LD_ADDR_VAR 0 7
65236: PUSH
65237: LD_VAR 0 7
65241: PUSH
65242: LD_INT 22
65244: PUSH
65245: LD_VAR 0 5
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 91
65256: PUSH
65257: LD_VAR 0 3
65261: PUSH
65262: LD_INT 15
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 21
65272: PUSH
65273: LD_INT 2
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 3
65282: PUSH
65283: LD_INT 24
65285: PUSH
65286: LD_INT 1000
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: PPUSH
65303: CALL_OW 69
65307: UNION
65308: ST_TO_ADDR
65309: GO 65229
65311: POP
65312: POP
// if not vehs then
65313: LD_VAR 0 7
65317: NOT
65318: IFFALSE 65344
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
65320: LD_ADDR_EXP 72
65324: PUSH
65325: LD_EXP 72
65329: PPUSH
65330: LD_VAR 0 2
65334: PPUSH
65335: EMPTY
65336: PPUSH
65337: CALL_OW 1
65341: ST_TO_ADDR
// continue ;
65342: GO 65002
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
65344: LD_ADDR_VAR 0 8
65348: PUSH
65349: LD_EXP 60
65353: PUSH
65354: LD_VAR 0 2
65358: ARRAY
65359: PPUSH
65360: LD_INT 30
65362: PUSH
65363: LD_INT 3
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PPUSH
65370: CALL_OW 72
65374: ST_TO_ADDR
// if tmp then
65375: LD_VAR 0 8
65379: IFFALSE 65482
// begin for j in tmp do
65381: LD_ADDR_VAR 0 3
65385: PUSH
65386: LD_VAR 0 8
65390: PUSH
65391: FOR_IN
65392: IFFALSE 65480
// for k in UnitsInside ( j ) do
65394: LD_ADDR_VAR 0 4
65398: PUSH
65399: LD_VAR 0 3
65403: PPUSH
65404: CALL_OW 313
65408: PUSH
65409: FOR_IN
65410: IFFALSE 65476
// if k then
65412: LD_VAR 0 4
65416: IFFALSE 65474
// if not k in mc_repair_vehicle [ i ] then
65418: LD_VAR 0 4
65422: PUSH
65423: LD_EXP 72
65427: PUSH
65428: LD_VAR 0 2
65432: ARRAY
65433: IN
65434: NOT
65435: IFFALSE 65474
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
65437: LD_ADDR_EXP 72
65441: PUSH
65442: LD_EXP 72
65446: PPUSH
65447: LD_VAR 0 2
65451: PPUSH
65452: LD_EXP 72
65456: PUSH
65457: LD_VAR 0 2
65461: ARRAY
65462: PUSH
65463: LD_VAR 0 4
65467: UNION
65468: PPUSH
65469: CALL_OW 1
65473: ST_TO_ADDR
65474: GO 65409
65476: POP
65477: POP
65478: GO 65391
65480: POP
65481: POP
// end ; if not mc_repair_vehicle [ i ] then
65482: LD_EXP 72
65486: PUSH
65487: LD_VAR 0 2
65491: ARRAY
65492: NOT
65493: IFFALSE 65497
// continue ;
65495: GO 65002
// for j in mc_repair_vehicle [ i ] do
65497: LD_ADDR_VAR 0 3
65501: PUSH
65502: LD_EXP 72
65506: PUSH
65507: LD_VAR 0 2
65511: ARRAY
65512: PUSH
65513: FOR_IN
65514: IFFALSE 65680
// begin if GetClass ( j ) <> 3 then
65516: LD_VAR 0 3
65520: PPUSH
65521: CALL_OW 257
65525: PUSH
65526: LD_INT 3
65528: NONEQUAL
65529: IFFALSE 65570
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
65531: LD_ADDR_EXP 72
65535: PUSH
65536: LD_EXP 72
65540: PPUSH
65541: LD_VAR 0 2
65545: PPUSH
65546: LD_EXP 72
65550: PUSH
65551: LD_VAR 0 2
65555: ARRAY
65556: PUSH
65557: LD_VAR 0 3
65561: DIFF
65562: PPUSH
65563: CALL_OW 1
65567: ST_TO_ADDR
// continue ;
65568: GO 65513
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
65570: LD_VAR 0 3
65574: PPUSH
65575: CALL_OW 311
65579: NOT
65580: PUSH
65581: LD_VAR 0 3
65585: PUSH
65586: LD_EXP 63
65590: PUSH
65591: LD_VAR 0 2
65595: ARRAY
65596: PUSH
65597: LD_INT 1
65599: ARRAY
65600: IN
65601: NOT
65602: AND
65603: PUSH
65604: LD_VAR 0 3
65608: PUSH
65609: LD_EXP 63
65613: PUSH
65614: LD_VAR 0 2
65618: ARRAY
65619: PUSH
65620: LD_INT 2
65622: ARRAY
65623: IN
65624: NOT
65625: AND
65626: IFFALSE 65678
// begin if IsInUnit ( j ) then
65628: LD_VAR 0 3
65632: PPUSH
65633: CALL_OW 310
65637: IFFALSE 65648
// ComExitBuilding ( j ) ;
65639: LD_VAR 0 3
65643: PPUSH
65644: CALL_OW 122
// if not HasTask ( j ) then
65648: LD_VAR 0 3
65652: PPUSH
65653: CALL_OW 314
65657: NOT
65658: IFFALSE 65678
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
65660: LD_VAR 0 3
65664: PPUSH
65665: LD_VAR 0 7
65669: PUSH
65670: LD_INT 1
65672: ARRAY
65673: PPUSH
65674: CALL_OW 189
// end ; end ;
65678: GO 65513
65680: POP
65681: POP
// end ;
65682: GO 65002
65684: POP
65685: POP
// end ;
65686: LD_VAR 0 1
65690: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
65691: LD_INT 0
65693: PPUSH
65694: PPUSH
65695: PPUSH
65696: PPUSH
65697: PPUSH
65698: PPUSH
65699: PPUSH
65700: PPUSH
65701: PPUSH
65702: PPUSH
65703: PPUSH
// if not mc_bases then
65704: LD_EXP 60
65708: NOT
65709: IFFALSE 65713
// exit ;
65711: GO 66515
// for i = 1 to mc_bases do
65713: LD_ADDR_VAR 0 2
65717: PUSH
65718: DOUBLE
65719: LD_INT 1
65721: DEC
65722: ST_TO_ADDR
65723: LD_EXP 60
65727: PUSH
65728: FOR_TO
65729: IFFALSE 66513
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
65731: LD_EXP 88
65735: PUSH
65736: LD_VAR 0 2
65740: ARRAY
65741: NOT
65742: PUSH
65743: LD_EXP 63
65747: PUSH
65748: LD_VAR 0 2
65752: ARRAY
65753: PUSH
65754: LD_INT 1
65756: ARRAY
65757: OR
65758: PUSH
65759: LD_EXP 63
65763: PUSH
65764: LD_VAR 0 2
65768: ARRAY
65769: PUSH
65770: LD_INT 2
65772: ARRAY
65773: OR
65774: PUSH
65775: LD_EXP 86
65779: PUSH
65780: LD_VAR 0 2
65784: ARRAY
65785: PPUSH
65786: LD_INT 1
65788: PPUSH
65789: CALL_OW 325
65793: NOT
65794: OR
65795: PUSH
65796: LD_EXP 83
65800: PUSH
65801: LD_VAR 0 2
65805: ARRAY
65806: OR
65807: IFFALSE 65811
// continue ;
65809: GO 65728
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
65811: LD_ADDR_VAR 0 8
65815: PUSH
65816: LD_EXP 60
65820: PUSH
65821: LD_VAR 0 2
65825: ARRAY
65826: PPUSH
65827: LD_INT 25
65829: PUSH
65830: LD_INT 4
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 50
65839: PUSH
65840: EMPTY
65841: LIST
65842: PUSH
65843: LD_INT 3
65845: PUSH
65846: LD_INT 60
65848: PUSH
65849: EMPTY
65850: LIST
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: LIST
65860: PPUSH
65861: CALL_OW 72
65865: PUSH
65866: LD_EXP 64
65870: PUSH
65871: LD_VAR 0 2
65875: ARRAY
65876: DIFF
65877: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
65878: LD_ADDR_VAR 0 9
65882: PUSH
65883: LD_EXP 60
65887: PUSH
65888: LD_VAR 0 2
65892: ARRAY
65893: PPUSH
65894: LD_INT 2
65896: PUSH
65897: LD_INT 30
65899: PUSH
65900: LD_INT 0
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 30
65909: PUSH
65910: LD_INT 1
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: LIST
65921: PPUSH
65922: CALL_OW 72
65926: ST_TO_ADDR
// if not tmp or not dep then
65927: LD_VAR 0 8
65931: NOT
65932: PUSH
65933: LD_VAR 0 9
65937: NOT
65938: OR
65939: IFFALSE 65943
// continue ;
65941: GO 65728
// side := GetSide ( tmp [ 1 ] ) ;
65943: LD_ADDR_VAR 0 11
65947: PUSH
65948: LD_VAR 0 8
65952: PUSH
65953: LD_INT 1
65955: ARRAY
65956: PPUSH
65957: CALL_OW 255
65961: ST_TO_ADDR
// dep := dep [ 1 ] ;
65962: LD_ADDR_VAR 0 9
65966: PUSH
65967: LD_VAR 0 9
65971: PUSH
65972: LD_INT 1
65974: ARRAY
65975: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
65976: LD_ADDR_VAR 0 7
65980: PUSH
65981: LD_EXP 88
65985: PUSH
65986: LD_VAR 0 2
65990: ARRAY
65991: PPUSH
65992: LD_INT 22
65994: PUSH
65995: LD_INT 0
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 25
66004: PUSH
66005: LD_INT 12
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PPUSH
66016: CALL_OW 70
66020: PUSH
66021: LD_INT 22
66023: PUSH
66024: LD_INT 0
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: LD_INT 25
66033: PUSH
66034: LD_INT 12
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 91
66043: PUSH
66044: LD_VAR 0 9
66048: PUSH
66049: LD_INT 20
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: LIST
66056: PUSH
66057: EMPTY
66058: LIST
66059: LIST
66060: LIST
66061: PPUSH
66062: CALL_OW 69
66066: UNION
66067: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
66068: LD_ADDR_VAR 0 10
66072: PUSH
66073: LD_EXP 88
66077: PUSH
66078: LD_VAR 0 2
66082: ARRAY
66083: PPUSH
66084: LD_INT 81
66086: PUSH
66087: LD_VAR 0 11
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PPUSH
66096: CALL_OW 70
66100: ST_TO_ADDR
// if not apes or danger_at_area then
66101: LD_VAR 0 7
66105: NOT
66106: PUSH
66107: LD_VAR 0 10
66111: OR
66112: IFFALSE 66162
// begin if mc_taming [ i ] then
66114: LD_EXP 91
66118: PUSH
66119: LD_VAR 0 2
66123: ARRAY
66124: IFFALSE 66160
// begin MC_Reset ( i , 121 ) ;
66126: LD_VAR 0 2
66130: PPUSH
66131: LD_INT 121
66133: PPUSH
66134: CALL 51613 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
66138: LD_ADDR_EXP 91
66142: PUSH
66143: LD_EXP 91
66147: PPUSH
66148: LD_VAR 0 2
66152: PPUSH
66153: EMPTY
66154: PPUSH
66155: CALL_OW 1
66159: ST_TO_ADDR
// end ; continue ;
66160: GO 65728
// end ; for j in tmp do
66162: LD_ADDR_VAR 0 3
66166: PUSH
66167: LD_VAR 0 8
66171: PUSH
66172: FOR_IN
66173: IFFALSE 66509
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
66175: LD_VAR 0 3
66179: PUSH
66180: LD_EXP 91
66184: PUSH
66185: LD_VAR 0 2
66189: ARRAY
66190: IN
66191: NOT
66192: PUSH
66193: LD_EXP 91
66197: PUSH
66198: LD_VAR 0 2
66202: ARRAY
66203: PUSH
66204: LD_INT 3
66206: LESS
66207: AND
66208: IFFALSE 66266
// begin SetTag ( j , 121 ) ;
66210: LD_VAR 0 3
66214: PPUSH
66215: LD_INT 121
66217: PPUSH
66218: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
66222: LD_ADDR_EXP 91
66226: PUSH
66227: LD_EXP 91
66231: PPUSH
66232: LD_VAR 0 2
66236: PUSH
66237: LD_EXP 91
66241: PUSH
66242: LD_VAR 0 2
66246: ARRAY
66247: PUSH
66248: LD_INT 1
66250: PLUS
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PPUSH
66256: LD_VAR 0 3
66260: PPUSH
66261: CALL 16128 0 3
66265: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
66266: LD_VAR 0 3
66270: PUSH
66271: LD_EXP 91
66275: PUSH
66276: LD_VAR 0 2
66280: ARRAY
66281: IN
66282: IFFALSE 66507
// begin if GetClass ( j ) <> 4 then
66284: LD_VAR 0 3
66288: PPUSH
66289: CALL_OW 257
66293: PUSH
66294: LD_INT 4
66296: NONEQUAL
66297: IFFALSE 66350
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
66299: LD_ADDR_EXP 91
66303: PUSH
66304: LD_EXP 91
66308: PPUSH
66309: LD_VAR 0 2
66313: PPUSH
66314: LD_EXP 91
66318: PUSH
66319: LD_VAR 0 2
66323: ARRAY
66324: PUSH
66325: LD_VAR 0 3
66329: DIFF
66330: PPUSH
66331: CALL_OW 1
66335: ST_TO_ADDR
// SetTag ( j , 0 ) ;
66336: LD_VAR 0 3
66340: PPUSH
66341: LD_INT 0
66343: PPUSH
66344: CALL_OW 109
// continue ;
66348: GO 66172
// end ; if IsInUnit ( j ) then
66350: LD_VAR 0 3
66354: PPUSH
66355: CALL_OW 310
66359: IFFALSE 66370
// ComExitBuilding ( j ) ;
66361: LD_VAR 0 3
66365: PPUSH
66366: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
66370: LD_ADDR_VAR 0 6
66374: PUSH
66375: LD_VAR 0 7
66379: PPUSH
66380: LD_VAR 0 3
66384: PPUSH
66385: CALL_OW 74
66389: ST_TO_ADDR
// if not ape then
66390: LD_VAR 0 6
66394: NOT
66395: IFFALSE 66399
// break ;
66397: GO 66509
// x := GetX ( ape ) ;
66399: LD_ADDR_VAR 0 4
66403: PUSH
66404: LD_VAR 0 6
66408: PPUSH
66409: CALL_OW 250
66413: ST_TO_ADDR
// y := GetY ( ape ) ;
66414: LD_ADDR_VAR 0 5
66418: PUSH
66419: LD_VAR 0 6
66423: PPUSH
66424: CALL_OW 251
66428: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
66429: LD_VAR 0 4
66433: PPUSH
66434: LD_VAR 0 5
66438: PPUSH
66439: CALL_OW 488
66443: NOT
66444: PUSH
66445: LD_VAR 0 11
66449: PPUSH
66450: LD_VAR 0 4
66454: PPUSH
66455: LD_VAR 0 5
66459: PPUSH
66460: LD_INT 20
66462: PPUSH
66463: CALL 17024 0 4
66467: PUSH
66468: LD_INT 4
66470: ARRAY
66471: OR
66472: IFFALSE 66476
// break ;
66474: GO 66509
// if not HasTask ( j ) then
66476: LD_VAR 0 3
66480: PPUSH
66481: CALL_OW 314
66485: NOT
66486: IFFALSE 66507
// ComTameXY ( j , x , y ) ;
66488: LD_VAR 0 3
66492: PPUSH
66493: LD_VAR 0 4
66497: PPUSH
66498: LD_VAR 0 5
66502: PPUSH
66503: CALL_OW 131
// end ; end ;
66507: GO 66172
66509: POP
66510: POP
// end ;
66511: GO 65728
66513: POP
66514: POP
// end ;
66515: LD_VAR 0 1
66519: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
66520: LD_INT 0
66522: PPUSH
66523: PPUSH
66524: PPUSH
66525: PPUSH
66526: PPUSH
66527: PPUSH
66528: PPUSH
66529: PPUSH
// if not mc_bases then
66530: LD_EXP 60
66534: NOT
66535: IFFALSE 66539
// exit ;
66537: GO 67165
// for i = 1 to mc_bases do
66539: LD_ADDR_VAR 0 2
66543: PUSH
66544: DOUBLE
66545: LD_INT 1
66547: DEC
66548: ST_TO_ADDR
66549: LD_EXP 60
66553: PUSH
66554: FOR_TO
66555: IFFALSE 67163
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
66557: LD_EXP 89
66561: PUSH
66562: LD_VAR 0 2
66566: ARRAY
66567: NOT
66568: PUSH
66569: LD_EXP 89
66573: PUSH
66574: LD_VAR 0 2
66578: ARRAY
66579: PPUSH
66580: LD_INT 25
66582: PUSH
66583: LD_INT 12
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PPUSH
66590: CALL_OW 72
66594: NOT
66595: OR
66596: IFFALSE 66600
// continue ;
66598: GO 66554
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
66600: LD_ADDR_VAR 0 5
66604: PUSH
66605: LD_EXP 89
66609: PUSH
66610: LD_VAR 0 2
66614: ARRAY
66615: PUSH
66616: LD_INT 1
66618: ARRAY
66619: PPUSH
66620: CALL_OW 255
66624: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
66625: LD_VAR 0 5
66629: PPUSH
66630: LD_INT 2
66632: PPUSH
66633: CALL_OW 325
66637: IFFALSE 66890
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
66639: LD_ADDR_VAR 0 4
66643: PUSH
66644: LD_EXP 89
66648: PUSH
66649: LD_VAR 0 2
66653: ARRAY
66654: PPUSH
66655: LD_INT 25
66657: PUSH
66658: LD_INT 16
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PPUSH
66665: CALL_OW 72
66669: ST_TO_ADDR
// if tmp < 6 then
66670: LD_VAR 0 4
66674: PUSH
66675: LD_INT 6
66677: LESS
66678: IFFALSE 66890
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
66680: LD_ADDR_VAR 0 6
66684: PUSH
66685: LD_EXP 60
66689: PUSH
66690: LD_VAR 0 2
66694: ARRAY
66695: PPUSH
66696: LD_INT 2
66698: PUSH
66699: LD_INT 30
66701: PUSH
66702: LD_INT 0
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 30
66711: PUSH
66712: LD_INT 1
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: LIST
66723: PPUSH
66724: CALL_OW 72
66728: ST_TO_ADDR
// if depot then
66729: LD_VAR 0 6
66733: IFFALSE 66890
// begin selected := 0 ;
66735: LD_ADDR_VAR 0 7
66739: PUSH
66740: LD_INT 0
66742: ST_TO_ADDR
// for j in depot do
66743: LD_ADDR_VAR 0 3
66747: PUSH
66748: LD_VAR 0 6
66752: PUSH
66753: FOR_IN
66754: IFFALSE 66785
// begin if UnitsInside ( j ) < 6 then
66756: LD_VAR 0 3
66760: PPUSH
66761: CALL_OW 313
66765: PUSH
66766: LD_INT 6
66768: LESS
66769: IFFALSE 66783
// begin selected := j ;
66771: LD_ADDR_VAR 0 7
66775: PUSH
66776: LD_VAR 0 3
66780: ST_TO_ADDR
// break ;
66781: GO 66785
// end ; end ;
66783: GO 66753
66785: POP
66786: POP
// if selected then
66787: LD_VAR 0 7
66791: IFFALSE 66890
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
66793: LD_ADDR_VAR 0 3
66797: PUSH
66798: LD_EXP 89
66802: PUSH
66803: LD_VAR 0 2
66807: ARRAY
66808: PPUSH
66809: LD_INT 25
66811: PUSH
66812: LD_INT 12
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PPUSH
66819: CALL_OW 72
66823: PUSH
66824: FOR_IN
66825: IFFALSE 66888
// if not HasTask ( j ) then
66827: LD_VAR 0 3
66831: PPUSH
66832: CALL_OW 314
66836: NOT
66837: IFFALSE 66886
// begin if not IsInUnit ( j ) then
66839: LD_VAR 0 3
66843: PPUSH
66844: CALL_OW 310
66848: NOT
66849: IFFALSE 66865
// ComEnterUnit ( j , selected ) ;
66851: LD_VAR 0 3
66855: PPUSH
66856: LD_VAR 0 7
66860: PPUSH
66861: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
66865: LD_VAR 0 3
66869: PPUSH
66870: LD_INT 16
66872: PPUSH
66873: CALL_OW 183
// AddComExitBuilding ( j ) ;
66877: LD_VAR 0 3
66881: PPUSH
66882: CALL_OW 182
// end ;
66886: GO 66824
66888: POP
66889: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
66890: LD_VAR 0 5
66894: PPUSH
66895: LD_INT 11
66897: PPUSH
66898: CALL_OW 325
66902: IFFALSE 67161
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
66904: LD_ADDR_VAR 0 4
66908: PUSH
66909: LD_EXP 89
66913: PUSH
66914: LD_VAR 0 2
66918: ARRAY
66919: PPUSH
66920: LD_INT 25
66922: PUSH
66923: LD_INT 16
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PPUSH
66930: CALL_OW 72
66934: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
66935: LD_VAR 0 4
66939: PUSH
66940: LD_INT 6
66942: GREATEREQUAL
66943: PUSH
66944: LD_VAR 0 5
66948: PPUSH
66949: LD_INT 2
66951: PPUSH
66952: CALL_OW 325
66956: NOT
66957: OR
66958: IFFALSE 67161
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
66960: LD_ADDR_VAR 0 8
66964: PUSH
66965: LD_EXP 60
66969: PUSH
66970: LD_VAR 0 2
66974: ARRAY
66975: PPUSH
66976: LD_INT 2
66978: PUSH
66979: LD_INT 30
66981: PUSH
66982: LD_INT 4
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 30
66991: PUSH
66992: LD_INT 5
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: LIST
67003: PPUSH
67004: CALL_OW 72
67008: ST_TO_ADDR
// if barracks then
67009: LD_VAR 0 8
67013: IFFALSE 67161
// begin selected := 0 ;
67015: LD_ADDR_VAR 0 7
67019: PUSH
67020: LD_INT 0
67022: ST_TO_ADDR
// for j in barracks do
67023: LD_ADDR_VAR 0 3
67027: PUSH
67028: LD_VAR 0 8
67032: PUSH
67033: FOR_IN
67034: IFFALSE 67065
// begin if UnitsInside ( j ) < 6 then
67036: LD_VAR 0 3
67040: PPUSH
67041: CALL_OW 313
67045: PUSH
67046: LD_INT 6
67048: LESS
67049: IFFALSE 67063
// begin selected := j ;
67051: LD_ADDR_VAR 0 7
67055: PUSH
67056: LD_VAR 0 3
67060: ST_TO_ADDR
// break ;
67061: GO 67065
// end ; end ;
67063: GO 67033
67065: POP
67066: POP
// if selected then
67067: LD_VAR 0 7
67071: IFFALSE 67161
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
67073: LD_ADDR_VAR 0 3
67077: PUSH
67078: LD_EXP 89
67082: PUSH
67083: LD_VAR 0 2
67087: ARRAY
67088: PPUSH
67089: LD_INT 25
67091: PUSH
67092: LD_INT 12
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PPUSH
67099: CALL_OW 72
67103: PUSH
67104: FOR_IN
67105: IFFALSE 67159
// if not IsInUnit ( j ) and not HasTask ( j ) then
67107: LD_VAR 0 3
67111: PPUSH
67112: CALL_OW 310
67116: NOT
67117: PUSH
67118: LD_VAR 0 3
67122: PPUSH
67123: CALL_OW 314
67127: NOT
67128: AND
67129: IFFALSE 67157
// begin ComEnterUnit ( j , selected ) ;
67131: LD_VAR 0 3
67135: PPUSH
67136: LD_VAR 0 7
67140: PPUSH
67141: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
67145: LD_VAR 0 3
67149: PPUSH
67150: LD_INT 15
67152: PPUSH
67153: CALL_OW 183
// end ;
67157: GO 67104
67159: POP
67160: POP
// end ; end ; end ; end ; end ;
67161: GO 66554
67163: POP
67164: POP
// end ;
67165: LD_VAR 0 1
67169: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
67170: LD_INT 0
67172: PPUSH
67173: PPUSH
67174: PPUSH
67175: PPUSH
// if not mc_bases then
67176: LD_EXP 60
67180: NOT
67181: IFFALSE 67185
// exit ;
67183: GO 67363
// for i = 1 to mc_bases do
67185: LD_ADDR_VAR 0 2
67189: PUSH
67190: DOUBLE
67191: LD_INT 1
67193: DEC
67194: ST_TO_ADDR
67195: LD_EXP 60
67199: PUSH
67200: FOR_TO
67201: IFFALSE 67361
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
67203: LD_ADDR_VAR 0 4
67207: PUSH
67208: LD_EXP 60
67212: PUSH
67213: LD_VAR 0 2
67217: ARRAY
67218: PPUSH
67219: LD_INT 25
67221: PUSH
67222: LD_INT 9
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: PPUSH
67229: CALL_OW 72
67233: ST_TO_ADDR
// if not tmp then
67234: LD_VAR 0 4
67238: NOT
67239: IFFALSE 67243
// continue ;
67241: GO 67200
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
67243: LD_EXP 86
67247: PUSH
67248: LD_VAR 0 2
67252: ARRAY
67253: PPUSH
67254: LD_INT 29
67256: PPUSH
67257: CALL_OW 325
67261: NOT
67262: PUSH
67263: LD_EXP 86
67267: PUSH
67268: LD_VAR 0 2
67272: ARRAY
67273: PPUSH
67274: LD_INT 28
67276: PPUSH
67277: CALL_OW 325
67281: NOT
67282: AND
67283: IFFALSE 67287
// continue ;
67285: GO 67200
// for j in tmp do
67287: LD_ADDR_VAR 0 3
67291: PUSH
67292: LD_VAR 0 4
67296: PUSH
67297: FOR_IN
67298: IFFALSE 67357
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
67300: LD_VAR 0 3
67304: PUSH
67305: LD_EXP 63
67309: PUSH
67310: LD_VAR 0 2
67314: ARRAY
67315: PUSH
67316: LD_INT 1
67318: ARRAY
67319: IN
67320: NOT
67321: PUSH
67322: LD_VAR 0 3
67326: PUSH
67327: LD_EXP 63
67331: PUSH
67332: LD_VAR 0 2
67336: ARRAY
67337: PUSH
67338: LD_INT 2
67340: ARRAY
67341: IN
67342: NOT
67343: AND
67344: IFFALSE 67355
// ComSpaceTimeShoot ( j ) ;
67346: LD_VAR 0 3
67350: PPUSH
67351: CALL 12125 0 1
67355: GO 67297
67357: POP
67358: POP
// end ;
67359: GO 67200
67361: POP
67362: POP
// end ;
67363: LD_VAR 0 1
67367: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
67368: LD_INT 0
67370: PPUSH
67371: PPUSH
67372: PPUSH
67373: PPUSH
67374: PPUSH
67375: PPUSH
67376: PPUSH
67377: PPUSH
67378: PPUSH
// if not mc_bases then
67379: LD_EXP 60
67383: NOT
67384: IFFALSE 67388
// exit ;
67386: GO 68010
// for i = 1 to mc_bases do
67388: LD_ADDR_VAR 0 2
67392: PUSH
67393: DOUBLE
67394: LD_INT 1
67396: DEC
67397: ST_TO_ADDR
67398: LD_EXP 60
67402: PUSH
67403: FOR_TO
67404: IFFALSE 68008
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
67406: LD_EXP 95
67410: PUSH
67411: LD_VAR 0 2
67415: ARRAY
67416: NOT
67417: PUSH
67418: LD_INT 38
67420: PPUSH
67421: LD_EXP 86
67425: PUSH
67426: LD_VAR 0 2
67430: ARRAY
67431: PPUSH
67432: CALL_OW 321
67436: PUSH
67437: LD_INT 2
67439: NONEQUAL
67440: OR
67441: IFFALSE 67445
// continue ;
67443: GO 67403
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
67445: LD_ADDR_VAR 0 8
67449: PUSH
67450: LD_EXP 60
67454: PUSH
67455: LD_VAR 0 2
67459: ARRAY
67460: PPUSH
67461: LD_INT 30
67463: PUSH
67464: LD_INT 34
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PPUSH
67471: CALL_OW 72
67475: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
67476: LD_ADDR_VAR 0 9
67480: PUSH
67481: LD_EXP 60
67485: PUSH
67486: LD_VAR 0 2
67490: ARRAY
67491: PPUSH
67492: LD_INT 25
67494: PUSH
67495: LD_INT 4
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PPUSH
67502: CALL_OW 72
67506: PPUSH
67507: LD_INT 0
67509: PPUSH
67510: CALL 44689 0 2
67514: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
67515: LD_VAR 0 9
67519: NOT
67520: PUSH
67521: LD_VAR 0 8
67525: NOT
67526: OR
67527: PUSH
67528: LD_EXP 60
67532: PUSH
67533: LD_VAR 0 2
67537: ARRAY
67538: PPUSH
67539: LD_INT 124
67541: PPUSH
67542: CALL 44689 0 2
67546: OR
67547: IFFALSE 67551
// continue ;
67549: GO 67403
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
67551: LD_EXP 96
67555: PUSH
67556: LD_VAR 0 2
67560: ARRAY
67561: PUSH
67562: LD_EXP 95
67566: PUSH
67567: LD_VAR 0 2
67571: ARRAY
67572: LESS
67573: PUSH
67574: LD_EXP 96
67578: PUSH
67579: LD_VAR 0 2
67583: ARRAY
67584: PUSH
67585: LD_VAR 0 8
67589: LESS
67590: AND
67591: IFFALSE 68006
// begin tmp := sci [ 1 ] ;
67593: LD_ADDR_VAR 0 7
67597: PUSH
67598: LD_VAR 0 9
67602: PUSH
67603: LD_INT 1
67605: ARRAY
67606: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
67607: LD_VAR 0 7
67611: PPUSH
67612: LD_INT 124
67614: PPUSH
67615: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
67619: LD_ADDR_VAR 0 3
67623: PUSH
67624: DOUBLE
67625: LD_EXP 95
67629: PUSH
67630: LD_VAR 0 2
67634: ARRAY
67635: INC
67636: ST_TO_ADDR
67637: LD_EXP 95
67641: PUSH
67642: LD_VAR 0 2
67646: ARRAY
67647: PUSH
67648: FOR_DOWNTO
67649: IFFALSE 67992
// begin if IsInUnit ( tmp ) then
67651: LD_VAR 0 7
67655: PPUSH
67656: CALL_OW 310
67660: IFFALSE 67671
// ComExitBuilding ( tmp ) ;
67662: LD_VAR 0 7
67666: PPUSH
67667: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
67671: LD_INT 35
67673: PPUSH
67674: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
67678: LD_VAR 0 7
67682: PPUSH
67683: CALL_OW 310
67687: NOT
67688: PUSH
67689: LD_VAR 0 7
67693: PPUSH
67694: CALL_OW 314
67698: NOT
67699: AND
67700: IFFALSE 67671
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
67702: LD_ADDR_VAR 0 6
67706: PUSH
67707: LD_VAR 0 7
67711: PPUSH
67712: CALL_OW 250
67716: PUSH
67717: LD_VAR 0 7
67721: PPUSH
67722: CALL_OW 251
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
67731: LD_INT 35
67733: PPUSH
67734: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
67738: LD_ADDR_VAR 0 4
67742: PUSH
67743: LD_EXP 95
67747: PUSH
67748: LD_VAR 0 2
67752: ARRAY
67753: PUSH
67754: LD_VAR 0 3
67758: ARRAY
67759: PUSH
67760: LD_INT 1
67762: ARRAY
67763: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
67764: LD_ADDR_VAR 0 5
67768: PUSH
67769: LD_EXP 95
67773: PUSH
67774: LD_VAR 0 2
67778: ARRAY
67779: PUSH
67780: LD_VAR 0 3
67784: ARRAY
67785: PUSH
67786: LD_INT 2
67788: ARRAY
67789: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
67790: LD_VAR 0 7
67794: PPUSH
67795: LD_INT 10
67797: PPUSH
67798: CALL 18721 0 2
67802: PUSH
67803: LD_INT 4
67805: ARRAY
67806: IFFALSE 67844
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
67808: LD_VAR 0 7
67812: PPUSH
67813: LD_VAR 0 6
67817: PUSH
67818: LD_INT 1
67820: ARRAY
67821: PPUSH
67822: LD_VAR 0 6
67826: PUSH
67827: LD_INT 2
67829: ARRAY
67830: PPUSH
67831: CALL_OW 111
// wait ( 0 0$10 ) ;
67835: LD_INT 350
67837: PPUSH
67838: CALL_OW 67
// end else
67842: GO 67870
// begin ComMoveXY ( tmp , x , y ) ;
67844: LD_VAR 0 7
67848: PPUSH
67849: LD_VAR 0 4
67853: PPUSH
67854: LD_VAR 0 5
67858: PPUSH
67859: CALL_OW 111
// wait ( 0 0$3 ) ;
67863: LD_INT 105
67865: PPUSH
67866: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
67870: LD_VAR 0 7
67874: PPUSH
67875: LD_VAR 0 4
67879: PPUSH
67880: LD_VAR 0 5
67884: PPUSH
67885: CALL_OW 307
67889: IFFALSE 67731
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
67891: LD_VAR 0 7
67895: PPUSH
67896: LD_VAR 0 4
67900: PPUSH
67901: LD_VAR 0 5
67905: PPUSH
67906: LD_VAR 0 8
67910: PUSH
67911: LD_VAR 0 3
67915: ARRAY
67916: PPUSH
67917: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
67921: LD_INT 35
67923: PPUSH
67924: CALL_OW 67
// until not HasTask ( tmp ) ;
67928: LD_VAR 0 7
67932: PPUSH
67933: CALL_OW 314
67937: NOT
67938: IFFALSE 67921
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
67940: LD_ADDR_EXP 96
67944: PUSH
67945: LD_EXP 96
67949: PPUSH
67950: LD_VAR 0 2
67954: PUSH
67955: LD_EXP 96
67959: PUSH
67960: LD_VAR 0 2
67964: ARRAY
67965: PUSH
67966: LD_INT 1
67968: PLUS
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: PPUSH
67974: LD_VAR 0 8
67978: PUSH
67979: LD_VAR 0 3
67983: ARRAY
67984: PPUSH
67985: CALL 16128 0 3
67989: ST_TO_ADDR
// end ;
67990: GO 67648
67992: POP
67993: POP
// MC_Reset ( i , 124 ) ;
67994: LD_VAR 0 2
67998: PPUSH
67999: LD_INT 124
68001: PPUSH
68002: CALL 51613 0 2
// end ; end ;
68006: GO 67403
68008: POP
68009: POP
// end ;
68010: LD_VAR 0 1
68014: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
68015: LD_INT 0
68017: PPUSH
68018: PPUSH
68019: PPUSH
// if not mc_bases then
68020: LD_EXP 60
68024: NOT
68025: IFFALSE 68029
// exit ;
68027: GO 68635
// for i = 1 to mc_bases do
68029: LD_ADDR_VAR 0 2
68033: PUSH
68034: DOUBLE
68035: LD_INT 1
68037: DEC
68038: ST_TO_ADDR
68039: LD_EXP 60
68043: PUSH
68044: FOR_TO
68045: IFFALSE 68633
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
68047: LD_ADDR_VAR 0 3
68051: PUSH
68052: LD_EXP 60
68056: PUSH
68057: LD_VAR 0 2
68061: ARRAY
68062: PPUSH
68063: LD_INT 25
68065: PUSH
68066: LD_INT 4
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PPUSH
68073: CALL_OW 72
68077: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
68078: LD_VAR 0 3
68082: NOT
68083: PUSH
68084: LD_EXP 97
68088: PUSH
68089: LD_VAR 0 2
68093: ARRAY
68094: NOT
68095: OR
68096: PUSH
68097: LD_EXP 60
68101: PUSH
68102: LD_VAR 0 2
68106: ARRAY
68107: PPUSH
68108: LD_INT 2
68110: PUSH
68111: LD_INT 30
68113: PUSH
68114: LD_INT 0
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: PUSH
68121: LD_INT 30
68123: PUSH
68124: LD_INT 1
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: LIST
68135: PPUSH
68136: CALL_OW 72
68140: NOT
68141: OR
68142: IFFALSE 68192
// begin if mc_deposits_finder [ i ] then
68144: LD_EXP 98
68148: PUSH
68149: LD_VAR 0 2
68153: ARRAY
68154: IFFALSE 68190
// begin MC_Reset ( i , 125 ) ;
68156: LD_VAR 0 2
68160: PPUSH
68161: LD_INT 125
68163: PPUSH
68164: CALL 51613 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
68168: LD_ADDR_EXP 98
68172: PUSH
68173: LD_EXP 98
68177: PPUSH
68178: LD_VAR 0 2
68182: PPUSH
68183: EMPTY
68184: PPUSH
68185: CALL_OW 1
68189: ST_TO_ADDR
// end ; continue ;
68190: GO 68044
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
68192: LD_EXP 97
68196: PUSH
68197: LD_VAR 0 2
68201: ARRAY
68202: PUSH
68203: LD_INT 1
68205: ARRAY
68206: PUSH
68207: LD_INT 3
68209: ARRAY
68210: PUSH
68211: LD_INT 1
68213: EQUAL
68214: PUSH
68215: LD_INT 20
68217: PPUSH
68218: LD_EXP 86
68222: PUSH
68223: LD_VAR 0 2
68227: ARRAY
68228: PPUSH
68229: CALL_OW 321
68233: PUSH
68234: LD_INT 2
68236: NONEQUAL
68237: AND
68238: IFFALSE 68288
// begin if mc_deposits_finder [ i ] then
68240: LD_EXP 98
68244: PUSH
68245: LD_VAR 0 2
68249: ARRAY
68250: IFFALSE 68286
// begin MC_Reset ( i , 125 ) ;
68252: LD_VAR 0 2
68256: PPUSH
68257: LD_INT 125
68259: PPUSH
68260: CALL 51613 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
68264: LD_ADDR_EXP 98
68268: PUSH
68269: LD_EXP 98
68273: PPUSH
68274: LD_VAR 0 2
68278: PPUSH
68279: EMPTY
68280: PPUSH
68281: CALL_OW 1
68285: ST_TO_ADDR
// end ; continue ;
68286: GO 68044
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
68288: LD_EXP 97
68292: PUSH
68293: LD_VAR 0 2
68297: ARRAY
68298: PUSH
68299: LD_INT 1
68301: ARRAY
68302: PUSH
68303: LD_INT 1
68305: ARRAY
68306: PPUSH
68307: LD_EXP 97
68311: PUSH
68312: LD_VAR 0 2
68316: ARRAY
68317: PUSH
68318: LD_INT 1
68320: ARRAY
68321: PUSH
68322: LD_INT 2
68324: ARRAY
68325: PPUSH
68326: LD_EXP 86
68330: PUSH
68331: LD_VAR 0 2
68335: ARRAY
68336: PPUSH
68337: CALL_OW 440
68341: IFFALSE 68384
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
68343: LD_ADDR_EXP 97
68347: PUSH
68348: LD_EXP 97
68352: PPUSH
68353: LD_VAR 0 2
68357: PPUSH
68358: LD_EXP 97
68362: PUSH
68363: LD_VAR 0 2
68367: ARRAY
68368: PPUSH
68369: LD_INT 1
68371: PPUSH
68372: CALL_OW 3
68376: PPUSH
68377: CALL_OW 1
68381: ST_TO_ADDR
68382: GO 68631
// begin if not mc_deposits_finder [ i ] then
68384: LD_EXP 98
68388: PUSH
68389: LD_VAR 0 2
68393: ARRAY
68394: NOT
68395: IFFALSE 68447
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
68397: LD_ADDR_EXP 98
68401: PUSH
68402: LD_EXP 98
68406: PPUSH
68407: LD_VAR 0 2
68411: PPUSH
68412: LD_VAR 0 3
68416: PUSH
68417: LD_INT 1
68419: ARRAY
68420: PUSH
68421: EMPTY
68422: LIST
68423: PPUSH
68424: CALL_OW 1
68428: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
68429: LD_VAR 0 3
68433: PUSH
68434: LD_INT 1
68436: ARRAY
68437: PPUSH
68438: LD_INT 125
68440: PPUSH
68441: CALL_OW 109
// end else
68445: GO 68631
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
68447: LD_EXP 98
68451: PUSH
68452: LD_VAR 0 2
68456: ARRAY
68457: PUSH
68458: LD_INT 1
68460: ARRAY
68461: PPUSH
68462: CALL_OW 310
68466: IFFALSE 68489
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
68468: LD_EXP 98
68472: PUSH
68473: LD_VAR 0 2
68477: ARRAY
68478: PUSH
68479: LD_INT 1
68481: ARRAY
68482: PPUSH
68483: CALL_OW 122
68487: GO 68631
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
68489: LD_EXP 98
68493: PUSH
68494: LD_VAR 0 2
68498: ARRAY
68499: PUSH
68500: LD_INT 1
68502: ARRAY
68503: PPUSH
68504: CALL_OW 314
68508: NOT
68509: PUSH
68510: LD_EXP 98
68514: PUSH
68515: LD_VAR 0 2
68519: ARRAY
68520: PUSH
68521: LD_INT 1
68523: ARRAY
68524: PPUSH
68525: LD_EXP 97
68529: PUSH
68530: LD_VAR 0 2
68534: ARRAY
68535: PUSH
68536: LD_INT 1
68538: ARRAY
68539: PUSH
68540: LD_INT 1
68542: ARRAY
68543: PPUSH
68544: LD_EXP 97
68548: PUSH
68549: LD_VAR 0 2
68553: ARRAY
68554: PUSH
68555: LD_INT 1
68557: ARRAY
68558: PUSH
68559: LD_INT 2
68561: ARRAY
68562: PPUSH
68563: CALL_OW 297
68567: PUSH
68568: LD_INT 6
68570: GREATER
68571: AND
68572: IFFALSE 68631
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
68574: LD_EXP 98
68578: PUSH
68579: LD_VAR 0 2
68583: ARRAY
68584: PUSH
68585: LD_INT 1
68587: ARRAY
68588: PPUSH
68589: LD_EXP 97
68593: PUSH
68594: LD_VAR 0 2
68598: ARRAY
68599: PUSH
68600: LD_INT 1
68602: ARRAY
68603: PUSH
68604: LD_INT 1
68606: ARRAY
68607: PPUSH
68608: LD_EXP 97
68612: PUSH
68613: LD_VAR 0 2
68617: ARRAY
68618: PUSH
68619: LD_INT 1
68621: ARRAY
68622: PUSH
68623: LD_INT 2
68625: ARRAY
68626: PPUSH
68627: CALL_OW 111
// end ; end ; end ;
68631: GO 68044
68633: POP
68634: POP
// end ;
68635: LD_VAR 0 1
68639: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
68640: LD_INT 0
68642: PPUSH
68643: PPUSH
68644: PPUSH
68645: PPUSH
68646: PPUSH
68647: PPUSH
68648: PPUSH
68649: PPUSH
68650: PPUSH
68651: PPUSH
68652: PPUSH
// if not mc_bases then
68653: LD_EXP 60
68657: NOT
68658: IFFALSE 68662
// exit ;
68660: GO 69602
// for i = 1 to mc_bases do
68662: LD_ADDR_VAR 0 2
68666: PUSH
68667: DOUBLE
68668: LD_INT 1
68670: DEC
68671: ST_TO_ADDR
68672: LD_EXP 60
68676: PUSH
68677: FOR_TO
68678: IFFALSE 69600
// begin if not mc_bases [ i ] or mc_scan [ i ] then
68680: LD_EXP 60
68684: PUSH
68685: LD_VAR 0 2
68689: ARRAY
68690: NOT
68691: PUSH
68692: LD_EXP 83
68696: PUSH
68697: LD_VAR 0 2
68701: ARRAY
68702: OR
68703: IFFALSE 68707
// continue ;
68705: GO 68677
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
68707: LD_ADDR_VAR 0 7
68711: PUSH
68712: LD_EXP 60
68716: PUSH
68717: LD_VAR 0 2
68721: ARRAY
68722: PUSH
68723: LD_INT 1
68725: ARRAY
68726: PPUSH
68727: CALL_OW 248
68731: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
68732: LD_VAR 0 7
68736: PUSH
68737: LD_INT 3
68739: EQUAL
68740: PUSH
68741: LD_EXP 79
68745: PUSH
68746: LD_VAR 0 2
68750: ARRAY
68751: PUSH
68752: LD_EXP 82
68756: PUSH
68757: LD_VAR 0 2
68761: ARRAY
68762: UNION
68763: PPUSH
68764: LD_INT 33
68766: PUSH
68767: LD_INT 2
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PPUSH
68774: CALL_OW 72
68778: NOT
68779: OR
68780: IFFALSE 68784
// continue ;
68782: GO 68677
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
68784: LD_ADDR_VAR 0 9
68788: PUSH
68789: LD_EXP 60
68793: PUSH
68794: LD_VAR 0 2
68798: ARRAY
68799: PPUSH
68800: LD_INT 30
68802: PUSH
68803: LD_INT 36
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PPUSH
68810: CALL_OW 72
68814: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
68815: LD_ADDR_VAR 0 10
68819: PUSH
68820: LD_EXP 79
68824: PUSH
68825: LD_VAR 0 2
68829: ARRAY
68830: PPUSH
68831: LD_INT 34
68833: PUSH
68834: LD_INT 31
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PPUSH
68841: CALL_OW 72
68845: ST_TO_ADDR
// if not cts and not mcts then
68846: LD_VAR 0 9
68850: NOT
68851: PUSH
68852: LD_VAR 0 10
68856: NOT
68857: AND
68858: IFFALSE 68862
// continue ;
68860: GO 68677
// x := cts ;
68862: LD_ADDR_VAR 0 11
68866: PUSH
68867: LD_VAR 0 9
68871: ST_TO_ADDR
// if not x then
68872: LD_VAR 0 11
68876: NOT
68877: IFFALSE 68889
// x := mcts ;
68879: LD_ADDR_VAR 0 11
68883: PUSH
68884: LD_VAR 0 10
68888: ST_TO_ADDR
// if not x then
68889: LD_VAR 0 11
68893: NOT
68894: IFFALSE 68898
// continue ;
68896: GO 68677
// if mc_remote_driver [ i ] then
68898: LD_EXP 100
68902: PUSH
68903: LD_VAR 0 2
68907: ARRAY
68908: IFFALSE 69295
// for j in mc_remote_driver [ i ] do
68910: LD_ADDR_VAR 0 3
68914: PUSH
68915: LD_EXP 100
68919: PUSH
68920: LD_VAR 0 2
68924: ARRAY
68925: PUSH
68926: FOR_IN
68927: IFFALSE 69293
// begin if GetClass ( j ) <> 3 then
68929: LD_VAR 0 3
68933: PPUSH
68934: CALL_OW 257
68938: PUSH
68939: LD_INT 3
68941: NONEQUAL
68942: IFFALSE 68995
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
68944: LD_ADDR_EXP 100
68948: PUSH
68949: LD_EXP 100
68953: PPUSH
68954: LD_VAR 0 2
68958: PPUSH
68959: LD_EXP 100
68963: PUSH
68964: LD_VAR 0 2
68968: ARRAY
68969: PUSH
68970: LD_VAR 0 3
68974: DIFF
68975: PPUSH
68976: CALL_OW 1
68980: ST_TO_ADDR
// SetTag ( j , 0 ) ;
68981: LD_VAR 0 3
68985: PPUSH
68986: LD_INT 0
68988: PPUSH
68989: CALL_OW 109
// continue ;
68993: GO 68926
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
68995: LD_EXP 79
68999: PUSH
69000: LD_VAR 0 2
69004: ARRAY
69005: PPUSH
69006: LD_INT 34
69008: PUSH
69009: LD_INT 31
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: LD_INT 58
69018: PUSH
69019: EMPTY
69020: LIST
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PPUSH
69026: CALL_OW 72
69030: PUSH
69031: LD_VAR 0 3
69035: PPUSH
69036: CALL 44777 0 1
69040: NOT
69041: AND
69042: IFFALSE 69113
// begin if IsInUnit ( j ) then
69044: LD_VAR 0 3
69048: PPUSH
69049: CALL_OW 310
69053: IFFALSE 69064
// ComExitBuilding ( j ) ;
69055: LD_VAR 0 3
69059: PPUSH
69060: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
69064: LD_VAR 0 3
69068: PPUSH
69069: LD_EXP 79
69073: PUSH
69074: LD_VAR 0 2
69078: ARRAY
69079: PPUSH
69080: LD_INT 34
69082: PUSH
69083: LD_INT 31
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: PUSH
69090: LD_INT 58
69092: PUSH
69093: EMPTY
69094: LIST
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PPUSH
69100: CALL_OW 72
69104: PUSH
69105: LD_INT 1
69107: ARRAY
69108: PPUSH
69109: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
69113: LD_VAR 0 3
69117: PPUSH
69118: CALL_OW 310
69122: NOT
69123: PUSH
69124: LD_VAR 0 3
69128: PPUSH
69129: CALL_OW 310
69133: PPUSH
69134: CALL_OW 266
69138: PUSH
69139: LD_INT 36
69141: NONEQUAL
69142: PUSH
69143: LD_VAR 0 3
69147: PPUSH
69148: CALL 44777 0 1
69152: NOT
69153: AND
69154: OR
69155: IFFALSE 69291
// begin if IsInUnit ( j ) then
69157: LD_VAR 0 3
69161: PPUSH
69162: CALL_OW 310
69166: IFFALSE 69177
// ComExitBuilding ( j ) ;
69168: LD_VAR 0 3
69172: PPUSH
69173: CALL_OW 122
// ct := 0 ;
69177: LD_ADDR_VAR 0 8
69181: PUSH
69182: LD_INT 0
69184: ST_TO_ADDR
// for k in x do
69185: LD_ADDR_VAR 0 4
69189: PUSH
69190: LD_VAR 0 11
69194: PUSH
69195: FOR_IN
69196: IFFALSE 69269
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
69198: LD_VAR 0 4
69202: PPUSH
69203: CALL_OW 264
69207: PUSH
69208: LD_INT 31
69210: EQUAL
69211: PUSH
69212: LD_VAR 0 4
69216: PPUSH
69217: CALL_OW 311
69221: NOT
69222: AND
69223: PUSH
69224: LD_VAR 0 4
69228: PPUSH
69229: CALL_OW 266
69233: PUSH
69234: LD_INT 36
69236: EQUAL
69237: PUSH
69238: LD_VAR 0 4
69242: PPUSH
69243: CALL_OW 313
69247: PUSH
69248: LD_INT 3
69250: LESS
69251: AND
69252: OR
69253: IFFALSE 69267
// begin ct := k ;
69255: LD_ADDR_VAR 0 8
69259: PUSH
69260: LD_VAR 0 4
69264: ST_TO_ADDR
// break ;
69265: GO 69269
// end ;
69267: GO 69195
69269: POP
69270: POP
// if ct then
69271: LD_VAR 0 8
69275: IFFALSE 69291
// ComEnterUnit ( j , ct ) ;
69277: LD_VAR 0 3
69281: PPUSH
69282: LD_VAR 0 8
69286: PPUSH
69287: CALL_OW 120
// end ; end ;
69291: GO 68926
69293: POP
69294: POP
// places := 0 ;
69295: LD_ADDR_VAR 0 5
69299: PUSH
69300: LD_INT 0
69302: ST_TO_ADDR
// for j = 1 to x do
69303: LD_ADDR_VAR 0 3
69307: PUSH
69308: DOUBLE
69309: LD_INT 1
69311: DEC
69312: ST_TO_ADDR
69313: LD_VAR 0 11
69317: PUSH
69318: FOR_TO
69319: IFFALSE 69395
// if GetWeapon ( x [ j ] ) = ar_control_tower then
69321: LD_VAR 0 11
69325: PUSH
69326: LD_VAR 0 3
69330: ARRAY
69331: PPUSH
69332: CALL_OW 264
69336: PUSH
69337: LD_INT 31
69339: EQUAL
69340: IFFALSE 69358
// places := places + 1 else
69342: LD_ADDR_VAR 0 5
69346: PUSH
69347: LD_VAR 0 5
69351: PUSH
69352: LD_INT 1
69354: PLUS
69355: ST_TO_ADDR
69356: GO 69393
// if GetBType ( x [ j ] ) = b_control_tower then
69358: LD_VAR 0 11
69362: PUSH
69363: LD_VAR 0 3
69367: ARRAY
69368: PPUSH
69369: CALL_OW 266
69373: PUSH
69374: LD_INT 36
69376: EQUAL
69377: IFFALSE 69393
// places := places + 3 ;
69379: LD_ADDR_VAR 0 5
69383: PUSH
69384: LD_VAR 0 5
69388: PUSH
69389: LD_INT 3
69391: PLUS
69392: ST_TO_ADDR
69393: GO 69318
69395: POP
69396: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
69397: LD_VAR 0 5
69401: PUSH
69402: LD_INT 0
69404: EQUAL
69405: PUSH
69406: LD_VAR 0 5
69410: PUSH
69411: LD_EXP 100
69415: PUSH
69416: LD_VAR 0 2
69420: ARRAY
69421: LESSEQUAL
69422: OR
69423: IFFALSE 69427
// continue ;
69425: GO 68677
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
69427: LD_ADDR_VAR 0 6
69431: PUSH
69432: LD_EXP 60
69436: PUSH
69437: LD_VAR 0 2
69441: ARRAY
69442: PPUSH
69443: LD_INT 25
69445: PUSH
69446: LD_INT 3
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: PPUSH
69453: CALL_OW 72
69457: PUSH
69458: LD_EXP 100
69462: PUSH
69463: LD_VAR 0 2
69467: ARRAY
69468: DIFF
69469: PPUSH
69470: LD_INT 3
69472: PPUSH
69473: CALL 45677 0 2
69477: ST_TO_ADDR
// for j in tmp do
69478: LD_ADDR_VAR 0 3
69482: PUSH
69483: LD_VAR 0 6
69487: PUSH
69488: FOR_IN
69489: IFFALSE 69524
// if GetTag ( j ) > 0 then
69491: LD_VAR 0 3
69495: PPUSH
69496: CALL_OW 110
69500: PUSH
69501: LD_INT 0
69503: GREATER
69504: IFFALSE 69522
// tmp := tmp diff j ;
69506: LD_ADDR_VAR 0 6
69510: PUSH
69511: LD_VAR 0 6
69515: PUSH
69516: LD_VAR 0 3
69520: DIFF
69521: ST_TO_ADDR
69522: GO 69488
69524: POP
69525: POP
// if not tmp then
69526: LD_VAR 0 6
69530: NOT
69531: IFFALSE 69535
// continue ;
69533: GO 68677
// if places then
69535: LD_VAR 0 5
69539: IFFALSE 69598
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
69541: LD_ADDR_EXP 100
69545: PUSH
69546: LD_EXP 100
69550: PPUSH
69551: LD_VAR 0 2
69555: PPUSH
69556: LD_EXP 100
69560: PUSH
69561: LD_VAR 0 2
69565: ARRAY
69566: PUSH
69567: LD_VAR 0 6
69571: PUSH
69572: LD_INT 1
69574: ARRAY
69575: UNION
69576: PPUSH
69577: CALL_OW 1
69581: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
69582: LD_VAR 0 6
69586: PUSH
69587: LD_INT 1
69589: ARRAY
69590: PPUSH
69591: LD_INT 126
69593: PPUSH
69594: CALL_OW 109
// end ; end ;
69598: GO 68677
69600: POP
69601: POP
// end ;
69602: LD_VAR 0 1
69606: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
69607: LD_INT 0
69609: PPUSH
69610: PPUSH
69611: PPUSH
69612: PPUSH
69613: PPUSH
69614: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
69615: LD_VAR 0 1
69619: NOT
69620: PUSH
69621: LD_VAR 0 2
69625: NOT
69626: OR
69627: PUSH
69628: LD_VAR 0 3
69632: NOT
69633: OR
69634: PUSH
69635: LD_VAR 0 4
69639: PUSH
69640: LD_INT 1
69642: PUSH
69643: LD_INT 2
69645: PUSH
69646: LD_INT 3
69648: PUSH
69649: LD_INT 4
69651: PUSH
69652: LD_INT 5
69654: PUSH
69655: LD_INT 8
69657: PUSH
69658: LD_INT 9
69660: PUSH
69661: LD_INT 15
69663: PUSH
69664: LD_INT 16
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: LIST
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: IN
69678: NOT
69679: OR
69680: IFFALSE 69684
// exit ;
69682: GO 70584
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
69684: LD_ADDR_VAR 0 2
69688: PUSH
69689: LD_VAR 0 2
69693: PPUSH
69694: LD_INT 21
69696: PUSH
69697: LD_INT 3
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: PUSH
69704: LD_INT 24
69706: PUSH
69707: LD_INT 250
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PPUSH
69718: CALL_OW 72
69722: ST_TO_ADDR
// case class of 1 , 15 :
69723: LD_VAR 0 4
69727: PUSH
69728: LD_INT 1
69730: DOUBLE
69731: EQUAL
69732: IFTRUE 69742
69734: LD_INT 15
69736: DOUBLE
69737: EQUAL
69738: IFTRUE 69742
69740: GO 69827
69742: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
69743: LD_ADDR_VAR 0 8
69747: PUSH
69748: LD_VAR 0 2
69752: PPUSH
69753: LD_INT 2
69755: PUSH
69756: LD_INT 30
69758: PUSH
69759: LD_INT 32
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 30
69768: PUSH
69769: LD_INT 31
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: LIST
69780: PPUSH
69781: CALL_OW 72
69785: PUSH
69786: LD_VAR 0 2
69790: PPUSH
69791: LD_INT 2
69793: PUSH
69794: LD_INT 30
69796: PUSH
69797: LD_INT 4
69799: PUSH
69800: EMPTY
69801: LIST
69802: LIST
69803: PUSH
69804: LD_INT 30
69806: PUSH
69807: LD_INT 5
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: LIST
69818: PPUSH
69819: CALL_OW 72
69823: ADD
69824: ST_TO_ADDR
69825: GO 70073
69827: LD_INT 2
69829: DOUBLE
69830: EQUAL
69831: IFTRUE 69841
69833: LD_INT 16
69835: DOUBLE
69836: EQUAL
69837: IFTRUE 69841
69839: GO 69887
69841: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
69842: LD_ADDR_VAR 0 8
69846: PUSH
69847: LD_VAR 0 2
69851: PPUSH
69852: LD_INT 2
69854: PUSH
69855: LD_INT 30
69857: PUSH
69858: LD_INT 0
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: LD_INT 30
69867: PUSH
69868: LD_INT 1
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: LIST
69879: PPUSH
69880: CALL_OW 72
69884: ST_TO_ADDR
69885: GO 70073
69887: LD_INT 3
69889: DOUBLE
69890: EQUAL
69891: IFTRUE 69895
69893: GO 69941
69895: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
69896: LD_ADDR_VAR 0 8
69900: PUSH
69901: LD_VAR 0 2
69905: PPUSH
69906: LD_INT 2
69908: PUSH
69909: LD_INT 30
69911: PUSH
69912: LD_INT 2
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: PUSH
69919: LD_INT 30
69921: PUSH
69922: LD_INT 3
69924: PUSH
69925: EMPTY
69926: LIST
69927: LIST
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: LIST
69933: PPUSH
69934: CALL_OW 72
69938: ST_TO_ADDR
69939: GO 70073
69941: LD_INT 4
69943: DOUBLE
69944: EQUAL
69945: IFTRUE 69949
69947: GO 70006
69949: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
69950: LD_ADDR_VAR 0 8
69954: PUSH
69955: LD_VAR 0 2
69959: PPUSH
69960: LD_INT 2
69962: PUSH
69963: LD_INT 30
69965: PUSH
69966: LD_INT 6
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: LD_INT 30
69975: PUSH
69976: LD_INT 7
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: PUSH
69983: LD_INT 30
69985: PUSH
69986: LD_INT 8
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: LIST
69997: LIST
69998: PPUSH
69999: CALL_OW 72
70003: ST_TO_ADDR
70004: GO 70073
70006: LD_INT 5
70008: DOUBLE
70009: EQUAL
70010: IFTRUE 70026
70012: LD_INT 8
70014: DOUBLE
70015: EQUAL
70016: IFTRUE 70026
70018: LD_INT 9
70020: DOUBLE
70021: EQUAL
70022: IFTRUE 70026
70024: GO 70072
70026: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
70027: LD_ADDR_VAR 0 8
70031: PUSH
70032: LD_VAR 0 2
70036: PPUSH
70037: LD_INT 2
70039: PUSH
70040: LD_INT 30
70042: PUSH
70043: LD_INT 4
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: PUSH
70050: LD_INT 30
70052: PUSH
70053: LD_INT 5
70055: PUSH
70056: EMPTY
70057: LIST
70058: LIST
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: LIST
70064: PPUSH
70065: CALL_OW 72
70069: ST_TO_ADDR
70070: GO 70073
70072: POP
// if not tmp then
70073: LD_VAR 0 8
70077: NOT
70078: IFFALSE 70082
// exit ;
70080: GO 70584
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
70082: LD_VAR 0 4
70086: PUSH
70087: LD_INT 1
70089: PUSH
70090: LD_INT 15
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: IN
70097: PUSH
70098: LD_EXP 69
70102: PUSH
70103: LD_VAR 0 1
70107: ARRAY
70108: AND
70109: IFFALSE 70265
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
70111: LD_ADDR_VAR 0 9
70115: PUSH
70116: LD_EXP 69
70120: PUSH
70121: LD_VAR 0 1
70125: ARRAY
70126: PUSH
70127: LD_INT 1
70129: ARRAY
70130: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
70131: LD_VAR 0 9
70135: PUSH
70136: LD_EXP 70
70140: PUSH
70141: LD_VAR 0 1
70145: ARRAY
70146: IN
70147: NOT
70148: IFFALSE 70263
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
70150: LD_ADDR_EXP 70
70154: PUSH
70155: LD_EXP 70
70159: PPUSH
70160: LD_VAR 0 1
70164: PUSH
70165: LD_EXP 70
70169: PUSH
70170: LD_VAR 0 1
70174: ARRAY
70175: PUSH
70176: LD_INT 1
70178: PLUS
70179: PUSH
70180: EMPTY
70181: LIST
70182: LIST
70183: PPUSH
70184: LD_VAR 0 9
70188: PPUSH
70189: CALL 16128 0 3
70193: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
70194: LD_ADDR_EXP 69
70198: PUSH
70199: LD_EXP 69
70203: PPUSH
70204: LD_VAR 0 1
70208: PPUSH
70209: LD_EXP 69
70213: PUSH
70214: LD_VAR 0 1
70218: ARRAY
70219: PUSH
70220: LD_VAR 0 9
70224: DIFF
70225: PPUSH
70226: CALL_OW 1
70230: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
70231: LD_VAR 0 3
70235: PPUSH
70236: LD_EXP 70
70240: PUSH
70241: LD_VAR 0 1
70245: ARRAY
70246: PUSH
70247: LD_EXP 70
70251: PUSH
70252: LD_VAR 0 1
70256: ARRAY
70257: ARRAY
70258: PPUSH
70259: CALL_OW 120
// end ; exit ;
70263: GO 70584
// end ; if tmp > 1 then
70265: LD_VAR 0 8
70269: PUSH
70270: LD_INT 1
70272: GREATER
70273: IFFALSE 70377
// for i = 2 to tmp do
70275: LD_ADDR_VAR 0 6
70279: PUSH
70280: DOUBLE
70281: LD_INT 2
70283: DEC
70284: ST_TO_ADDR
70285: LD_VAR 0 8
70289: PUSH
70290: FOR_TO
70291: IFFALSE 70375
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
70293: LD_VAR 0 8
70297: PUSH
70298: LD_VAR 0 6
70302: ARRAY
70303: PPUSH
70304: CALL_OW 461
70308: PUSH
70309: LD_INT 6
70311: EQUAL
70312: IFFALSE 70373
// begin x := tmp [ i ] ;
70314: LD_ADDR_VAR 0 9
70318: PUSH
70319: LD_VAR 0 8
70323: PUSH
70324: LD_VAR 0 6
70328: ARRAY
70329: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
70330: LD_ADDR_VAR 0 8
70334: PUSH
70335: LD_VAR 0 8
70339: PPUSH
70340: LD_VAR 0 6
70344: PPUSH
70345: CALL_OW 3
70349: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
70350: LD_ADDR_VAR 0 8
70354: PUSH
70355: LD_VAR 0 8
70359: PPUSH
70360: LD_INT 1
70362: PPUSH
70363: LD_VAR 0 9
70367: PPUSH
70368: CALL_OW 2
70372: ST_TO_ADDR
// end ;
70373: GO 70290
70375: POP
70376: POP
// for i in tmp do
70377: LD_ADDR_VAR 0 6
70381: PUSH
70382: LD_VAR 0 8
70386: PUSH
70387: FOR_IN
70388: IFFALSE 70457
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
70390: LD_VAR 0 6
70394: PPUSH
70395: CALL_OW 313
70399: PUSH
70400: LD_INT 6
70402: LESS
70403: PUSH
70404: LD_VAR 0 6
70408: PPUSH
70409: CALL_OW 266
70413: PUSH
70414: LD_INT 31
70416: PUSH
70417: LD_INT 32
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: IN
70424: NOT
70425: AND
70426: PUSH
70427: LD_VAR 0 6
70431: PPUSH
70432: CALL_OW 313
70436: PUSH
70437: LD_INT 0
70439: EQUAL
70440: OR
70441: IFFALSE 70455
// begin j := i ;
70443: LD_ADDR_VAR 0 7
70447: PUSH
70448: LD_VAR 0 6
70452: ST_TO_ADDR
// break ;
70453: GO 70457
// end ; end ;
70455: GO 70387
70457: POP
70458: POP
// if j then
70459: LD_VAR 0 7
70463: IFFALSE 70481
// ComEnterUnit ( unit , j ) else
70465: LD_VAR 0 3
70469: PPUSH
70470: LD_VAR 0 7
70474: PPUSH
70475: CALL_OW 120
70479: GO 70584
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
70481: LD_ADDR_VAR 0 10
70485: PUSH
70486: LD_VAR 0 2
70490: PPUSH
70491: LD_INT 2
70493: PUSH
70494: LD_INT 30
70496: PUSH
70497: LD_INT 0
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: PUSH
70504: LD_INT 30
70506: PUSH
70507: LD_INT 1
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: LIST
70518: PPUSH
70519: CALL_OW 72
70523: ST_TO_ADDR
// if depot then
70524: LD_VAR 0 10
70528: IFFALSE 70584
// begin depot := NearestUnitToUnit ( depot , unit ) ;
70530: LD_ADDR_VAR 0 10
70534: PUSH
70535: LD_VAR 0 10
70539: PPUSH
70540: LD_VAR 0 3
70544: PPUSH
70545: CALL_OW 74
70549: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
70550: LD_VAR 0 3
70554: PPUSH
70555: LD_VAR 0 10
70559: PPUSH
70560: CALL_OW 296
70564: PUSH
70565: LD_INT 10
70567: GREATER
70568: IFFALSE 70584
// ComStandNearbyBuilding ( unit , depot ) ;
70570: LD_VAR 0 3
70574: PPUSH
70575: LD_VAR 0 10
70579: PPUSH
70580: CALL 12742 0 2
// end ; end ; end ;
70584: LD_VAR 0 5
70588: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
70589: LD_INT 0
70591: PPUSH
70592: PPUSH
70593: PPUSH
70594: PPUSH
// if not mc_bases then
70595: LD_EXP 60
70599: NOT
70600: IFFALSE 70604
// exit ;
70602: GO 70843
// for i = 1 to mc_bases do
70604: LD_ADDR_VAR 0 2
70608: PUSH
70609: DOUBLE
70610: LD_INT 1
70612: DEC
70613: ST_TO_ADDR
70614: LD_EXP 60
70618: PUSH
70619: FOR_TO
70620: IFFALSE 70841
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
70622: LD_ADDR_VAR 0 4
70626: PUSH
70627: LD_EXP 60
70631: PUSH
70632: LD_VAR 0 2
70636: ARRAY
70637: PPUSH
70638: LD_INT 21
70640: PUSH
70641: LD_INT 1
70643: PUSH
70644: EMPTY
70645: LIST
70646: LIST
70647: PPUSH
70648: CALL_OW 72
70652: PUSH
70653: LD_EXP 89
70657: PUSH
70658: LD_VAR 0 2
70662: ARRAY
70663: UNION
70664: ST_TO_ADDR
// if not tmp then
70665: LD_VAR 0 4
70669: NOT
70670: IFFALSE 70674
// continue ;
70672: GO 70619
// for j in tmp do
70674: LD_ADDR_VAR 0 3
70678: PUSH
70679: LD_VAR 0 4
70683: PUSH
70684: FOR_IN
70685: IFFALSE 70837
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
70687: LD_VAR 0 3
70691: PPUSH
70692: CALL_OW 110
70696: NOT
70697: PUSH
70698: LD_VAR 0 3
70702: PPUSH
70703: CALL_OW 314
70707: NOT
70708: AND
70709: PUSH
70710: LD_VAR 0 3
70714: PPUSH
70715: CALL_OW 311
70719: NOT
70720: AND
70721: PUSH
70722: LD_VAR 0 3
70726: PPUSH
70727: CALL_OW 310
70731: NOT
70732: AND
70733: PUSH
70734: LD_VAR 0 3
70738: PUSH
70739: LD_EXP 63
70743: PUSH
70744: LD_VAR 0 2
70748: ARRAY
70749: PUSH
70750: LD_INT 1
70752: ARRAY
70753: IN
70754: NOT
70755: AND
70756: PUSH
70757: LD_VAR 0 3
70761: PUSH
70762: LD_EXP 63
70766: PUSH
70767: LD_VAR 0 2
70771: ARRAY
70772: PUSH
70773: LD_INT 2
70775: ARRAY
70776: IN
70777: NOT
70778: AND
70779: PUSH
70780: LD_VAR 0 3
70784: PUSH
70785: LD_EXP 72
70789: PUSH
70790: LD_VAR 0 2
70794: ARRAY
70795: IN
70796: NOT
70797: AND
70798: IFFALSE 70835
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
70800: LD_VAR 0 2
70804: PPUSH
70805: LD_EXP 60
70809: PUSH
70810: LD_VAR 0 2
70814: ARRAY
70815: PPUSH
70816: LD_VAR 0 3
70820: PPUSH
70821: LD_VAR 0 3
70825: PPUSH
70826: CALL_OW 257
70830: PPUSH
70831: CALL 69607 0 4
// end ;
70835: GO 70684
70837: POP
70838: POP
// end ;
70839: GO 70619
70841: POP
70842: POP
// end ;
70843: LD_VAR 0 1
70847: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
70848: LD_INT 0
70850: PPUSH
70851: PPUSH
70852: PPUSH
70853: PPUSH
70854: PPUSH
70855: PPUSH
// if not mc_bases [ base ] then
70856: LD_EXP 60
70860: PUSH
70861: LD_VAR 0 1
70865: ARRAY
70866: NOT
70867: IFFALSE 70871
// exit ;
70869: GO 71053
// tmp := [ ] ;
70871: LD_ADDR_VAR 0 6
70875: PUSH
70876: EMPTY
70877: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
70878: LD_ADDR_VAR 0 7
70882: PUSH
70883: LD_VAR 0 3
70887: PPUSH
70888: LD_INT 0
70890: PPUSH
70891: CALL_OW 517
70895: ST_TO_ADDR
// if not list then
70896: LD_VAR 0 7
70900: NOT
70901: IFFALSE 70905
// exit ;
70903: GO 71053
// for i = 1 to amount do
70905: LD_ADDR_VAR 0 5
70909: PUSH
70910: DOUBLE
70911: LD_INT 1
70913: DEC
70914: ST_TO_ADDR
70915: LD_VAR 0 2
70919: PUSH
70920: FOR_TO
70921: IFFALSE 71001
// begin x := rand ( 1 , list [ 1 ] ) ;
70923: LD_ADDR_VAR 0 8
70927: PUSH
70928: LD_INT 1
70930: PPUSH
70931: LD_VAR 0 7
70935: PUSH
70936: LD_INT 1
70938: ARRAY
70939: PPUSH
70940: CALL_OW 12
70944: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
70945: LD_ADDR_VAR 0 6
70949: PUSH
70950: LD_VAR 0 6
70954: PPUSH
70955: LD_VAR 0 5
70959: PPUSH
70960: LD_VAR 0 7
70964: PUSH
70965: LD_INT 1
70967: ARRAY
70968: PUSH
70969: LD_VAR 0 8
70973: ARRAY
70974: PUSH
70975: LD_VAR 0 7
70979: PUSH
70980: LD_INT 2
70982: ARRAY
70983: PUSH
70984: LD_VAR 0 8
70988: ARRAY
70989: PUSH
70990: EMPTY
70991: LIST
70992: LIST
70993: PPUSH
70994: CALL_OW 1
70998: ST_TO_ADDR
// end ;
70999: GO 70920
71001: POP
71002: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
71003: LD_ADDR_EXP 73
71007: PUSH
71008: LD_EXP 73
71012: PPUSH
71013: LD_VAR 0 1
71017: PPUSH
71018: LD_VAR 0 6
71022: PPUSH
71023: CALL_OW 1
71027: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
71028: LD_ADDR_EXP 75
71032: PUSH
71033: LD_EXP 75
71037: PPUSH
71038: LD_VAR 0 1
71042: PPUSH
71043: LD_VAR 0 3
71047: PPUSH
71048: CALL_OW 1
71052: ST_TO_ADDR
// end ;
71053: LD_VAR 0 4
71057: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
71058: LD_INT 0
71060: PPUSH
// if not mc_bases [ base ] then
71061: LD_EXP 60
71065: PUSH
71066: LD_VAR 0 1
71070: ARRAY
71071: NOT
71072: IFFALSE 71076
// exit ;
71074: GO 71101
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
71076: LD_ADDR_EXP 65
71080: PUSH
71081: LD_EXP 65
71085: PPUSH
71086: LD_VAR 0 1
71090: PPUSH
71091: LD_VAR 0 2
71095: PPUSH
71096: CALL_OW 1
71100: ST_TO_ADDR
// end ;
71101: LD_VAR 0 3
71105: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
71106: LD_INT 0
71108: PPUSH
// if not mc_bases [ base ] then
71109: LD_EXP 60
71113: PUSH
71114: LD_VAR 0 1
71118: ARRAY
71119: NOT
71120: IFFALSE 71124
// exit ;
71122: GO 71161
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
71124: LD_ADDR_EXP 65
71128: PUSH
71129: LD_EXP 65
71133: PPUSH
71134: LD_VAR 0 1
71138: PPUSH
71139: LD_EXP 65
71143: PUSH
71144: LD_VAR 0 1
71148: ARRAY
71149: PUSH
71150: LD_VAR 0 2
71154: UNION
71155: PPUSH
71156: CALL_OW 1
71160: ST_TO_ADDR
// end ;
71161: LD_VAR 0 3
71165: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
71166: LD_INT 0
71168: PPUSH
// if not mc_bases [ base ] then
71169: LD_EXP 60
71173: PUSH
71174: LD_VAR 0 1
71178: ARRAY
71179: NOT
71180: IFFALSE 71184
// exit ;
71182: GO 71209
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
71184: LD_ADDR_EXP 81
71188: PUSH
71189: LD_EXP 81
71193: PPUSH
71194: LD_VAR 0 1
71198: PPUSH
71199: LD_VAR 0 2
71203: PPUSH
71204: CALL_OW 1
71208: ST_TO_ADDR
// end ;
71209: LD_VAR 0 3
71213: RET
// export function MC_InsertProduceList ( base , components ) ; begin
71214: LD_INT 0
71216: PPUSH
// if not mc_bases [ base ] then
71217: LD_EXP 60
71221: PUSH
71222: LD_VAR 0 1
71226: ARRAY
71227: NOT
71228: IFFALSE 71232
// exit ;
71230: GO 71269
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
71232: LD_ADDR_EXP 81
71236: PUSH
71237: LD_EXP 81
71241: PPUSH
71242: LD_VAR 0 1
71246: PPUSH
71247: LD_EXP 81
71251: PUSH
71252: LD_VAR 0 1
71256: ARRAY
71257: PUSH
71258: LD_VAR 0 2
71262: ADD
71263: PPUSH
71264: CALL_OW 1
71268: ST_TO_ADDR
// end ;
71269: LD_VAR 0 3
71273: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
71274: LD_INT 0
71276: PPUSH
// if not mc_bases [ base ] then
71277: LD_EXP 60
71281: PUSH
71282: LD_VAR 0 1
71286: ARRAY
71287: NOT
71288: IFFALSE 71292
// exit ;
71290: GO 71346
// mc_defender := Replace ( mc_defender , base , deflist ) ;
71292: LD_ADDR_EXP 82
71296: PUSH
71297: LD_EXP 82
71301: PPUSH
71302: LD_VAR 0 1
71306: PPUSH
71307: LD_VAR 0 2
71311: PPUSH
71312: CALL_OW 1
71316: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
71317: LD_ADDR_EXP 71
71321: PUSH
71322: LD_EXP 71
71326: PPUSH
71327: LD_VAR 0 1
71331: PPUSH
71332: LD_VAR 0 2
71336: PUSH
71337: LD_INT 0
71339: PLUS
71340: PPUSH
71341: CALL_OW 1
71345: ST_TO_ADDR
// end ;
71346: LD_VAR 0 3
71350: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
71351: LD_INT 0
71353: PPUSH
// if not mc_bases [ base ] then
71354: LD_EXP 60
71358: PUSH
71359: LD_VAR 0 1
71363: ARRAY
71364: NOT
71365: IFFALSE 71369
// exit ;
71367: GO 71394
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
71369: LD_ADDR_EXP 71
71373: PUSH
71374: LD_EXP 71
71378: PPUSH
71379: LD_VAR 0 1
71383: PPUSH
71384: LD_VAR 0 2
71388: PPUSH
71389: CALL_OW 1
71393: ST_TO_ADDR
// end ;
71394: LD_VAR 0 3
71398: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
71399: LD_INT 0
71401: PPUSH
71402: PPUSH
71403: PPUSH
71404: PPUSH
// if not mc_bases [ base ] then
71405: LD_EXP 60
71409: PUSH
71410: LD_VAR 0 1
71414: ARRAY
71415: NOT
71416: IFFALSE 71420
// exit ;
71418: GO 71485
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
71420: LD_ADDR_EXP 80
71424: PUSH
71425: LD_EXP 80
71429: PPUSH
71430: LD_VAR 0 1
71434: PUSH
71435: LD_EXP 80
71439: PUSH
71440: LD_VAR 0 1
71444: ARRAY
71445: PUSH
71446: LD_INT 1
71448: PLUS
71449: PUSH
71450: EMPTY
71451: LIST
71452: LIST
71453: PPUSH
71454: LD_VAR 0 1
71458: PUSH
71459: LD_VAR 0 2
71463: PUSH
71464: LD_VAR 0 3
71468: PUSH
71469: LD_VAR 0 4
71473: PUSH
71474: EMPTY
71475: LIST
71476: LIST
71477: LIST
71478: LIST
71479: PPUSH
71480: CALL 16128 0 3
71484: ST_TO_ADDR
// end ;
71485: LD_VAR 0 5
71489: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
71490: LD_INT 0
71492: PPUSH
// if not mc_bases [ base ] then
71493: LD_EXP 60
71497: PUSH
71498: LD_VAR 0 1
71502: ARRAY
71503: NOT
71504: IFFALSE 71508
// exit ;
71506: GO 71533
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
71508: LD_ADDR_EXP 97
71512: PUSH
71513: LD_EXP 97
71517: PPUSH
71518: LD_VAR 0 1
71522: PPUSH
71523: LD_VAR 0 2
71527: PPUSH
71528: CALL_OW 1
71532: ST_TO_ADDR
// end ;
71533: LD_VAR 0 3
71537: RET
// export function MC_GetMinesField ( base ) ; begin
71538: LD_INT 0
71540: PPUSH
// result := mc_mines [ base ] ;
71541: LD_ADDR_VAR 0 2
71545: PUSH
71546: LD_EXP 73
71550: PUSH
71551: LD_VAR 0 1
71555: ARRAY
71556: ST_TO_ADDR
// end ;
71557: LD_VAR 0 2
71561: RET
// export function MC_GetProduceList ( base ) ; begin
71562: LD_INT 0
71564: PPUSH
// result := mc_produce [ base ] ;
71565: LD_ADDR_VAR 0 2
71569: PUSH
71570: LD_EXP 81
71574: PUSH
71575: LD_VAR 0 1
71579: ARRAY
71580: ST_TO_ADDR
// end ;
71581: LD_VAR 0 2
71585: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
71586: LD_INT 0
71588: PPUSH
71589: PPUSH
// if not mc_bases then
71590: LD_EXP 60
71594: NOT
71595: IFFALSE 71599
// exit ;
71597: GO 71664
// if mc_bases [ base ] then
71599: LD_EXP 60
71603: PUSH
71604: LD_VAR 0 1
71608: ARRAY
71609: IFFALSE 71664
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
71611: LD_ADDR_VAR 0 3
71615: PUSH
71616: LD_EXP 60
71620: PUSH
71621: LD_VAR 0 1
71625: ARRAY
71626: PPUSH
71627: LD_INT 30
71629: PUSH
71630: LD_VAR 0 2
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: PPUSH
71639: CALL_OW 72
71643: ST_TO_ADDR
// if result then
71644: LD_VAR 0 3
71648: IFFALSE 71664
// result := result [ 1 ] ;
71650: LD_ADDR_VAR 0 3
71654: PUSH
71655: LD_VAR 0 3
71659: PUSH
71660: LD_INT 1
71662: ARRAY
71663: ST_TO_ADDR
// end ; end ;
71664: LD_VAR 0 3
71668: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
71669: LD_INT 0
71671: PPUSH
71672: PPUSH
// if not mc_bases then
71673: LD_EXP 60
71677: NOT
71678: IFFALSE 71682
// exit ;
71680: GO 71727
// if mc_bases [ base ] then
71682: LD_EXP 60
71686: PUSH
71687: LD_VAR 0 1
71691: ARRAY
71692: IFFALSE 71727
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
71694: LD_ADDR_VAR 0 3
71698: PUSH
71699: LD_EXP 60
71703: PUSH
71704: LD_VAR 0 1
71708: ARRAY
71709: PPUSH
71710: LD_INT 30
71712: PUSH
71713: LD_VAR 0 2
71717: PUSH
71718: EMPTY
71719: LIST
71720: LIST
71721: PPUSH
71722: CALL_OW 72
71726: ST_TO_ADDR
// end ;
71727: LD_VAR 0 3
71731: RET
// export function MC_SetTame ( base , area ) ; begin
71732: LD_INT 0
71734: PPUSH
// if not mc_bases or not base then
71735: LD_EXP 60
71739: NOT
71740: PUSH
71741: LD_VAR 0 1
71745: NOT
71746: OR
71747: IFFALSE 71751
// exit ;
71749: GO 71776
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
71751: LD_ADDR_EXP 88
71755: PUSH
71756: LD_EXP 88
71760: PPUSH
71761: LD_VAR 0 1
71765: PPUSH
71766: LD_VAR 0 2
71770: PPUSH
71771: CALL_OW 1
71775: ST_TO_ADDR
// end ;
71776: LD_VAR 0 3
71780: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
71781: LD_INT 0
71783: PPUSH
71784: PPUSH
// if not mc_bases or not base then
71785: LD_EXP 60
71789: NOT
71790: PUSH
71791: LD_VAR 0 1
71795: NOT
71796: OR
71797: IFFALSE 71801
// exit ;
71799: GO 71903
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
71801: LD_ADDR_VAR 0 4
71805: PUSH
71806: LD_EXP 60
71810: PUSH
71811: LD_VAR 0 1
71815: ARRAY
71816: PPUSH
71817: LD_INT 30
71819: PUSH
71820: LD_VAR 0 2
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PPUSH
71829: CALL_OW 72
71833: ST_TO_ADDR
// if not tmp then
71834: LD_VAR 0 4
71838: NOT
71839: IFFALSE 71843
// exit ;
71841: GO 71903
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
71843: LD_ADDR_EXP 92
71847: PUSH
71848: LD_EXP 92
71852: PPUSH
71853: LD_VAR 0 1
71857: PPUSH
71858: LD_EXP 92
71862: PUSH
71863: LD_VAR 0 1
71867: ARRAY
71868: PPUSH
71869: LD_EXP 92
71873: PUSH
71874: LD_VAR 0 1
71878: ARRAY
71879: PUSH
71880: LD_INT 1
71882: PLUS
71883: PPUSH
71884: LD_VAR 0 4
71888: PUSH
71889: LD_INT 1
71891: ARRAY
71892: PPUSH
71893: CALL_OW 2
71897: PPUSH
71898: CALL_OW 1
71902: ST_TO_ADDR
// end ;
71903: LD_VAR 0 3
71907: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
71908: LD_INT 0
71910: PPUSH
71911: PPUSH
// if not mc_bases or not base or not kinds then
71912: LD_EXP 60
71916: NOT
71917: PUSH
71918: LD_VAR 0 1
71922: NOT
71923: OR
71924: PUSH
71925: LD_VAR 0 2
71929: NOT
71930: OR
71931: IFFALSE 71935
// exit ;
71933: GO 71996
// for i in kinds do
71935: LD_ADDR_VAR 0 4
71939: PUSH
71940: LD_VAR 0 2
71944: PUSH
71945: FOR_IN
71946: IFFALSE 71994
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
71948: LD_ADDR_EXP 94
71952: PUSH
71953: LD_EXP 94
71957: PPUSH
71958: LD_VAR 0 1
71962: PUSH
71963: LD_EXP 94
71967: PUSH
71968: LD_VAR 0 1
71972: ARRAY
71973: PUSH
71974: LD_INT 1
71976: PLUS
71977: PUSH
71978: EMPTY
71979: LIST
71980: LIST
71981: PPUSH
71982: LD_VAR 0 4
71986: PPUSH
71987: CALL 16128 0 3
71991: ST_TO_ADDR
71992: GO 71945
71994: POP
71995: POP
// end ;
71996: LD_VAR 0 3
72000: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
72001: LD_INT 0
72003: PPUSH
// if not mc_bases or not base or not areas then
72004: LD_EXP 60
72008: NOT
72009: PUSH
72010: LD_VAR 0 1
72014: NOT
72015: OR
72016: PUSH
72017: LD_VAR 0 2
72021: NOT
72022: OR
72023: IFFALSE 72027
// exit ;
72025: GO 72052
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
72027: LD_ADDR_EXP 78
72031: PUSH
72032: LD_EXP 78
72036: PPUSH
72037: LD_VAR 0 1
72041: PPUSH
72042: LD_VAR 0 2
72046: PPUSH
72047: CALL_OW 1
72051: ST_TO_ADDR
// end ;
72052: LD_VAR 0 3
72056: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
72057: LD_INT 0
72059: PPUSH
// if not mc_bases or not base or not teleports_exit then
72060: LD_EXP 60
72064: NOT
72065: PUSH
72066: LD_VAR 0 1
72070: NOT
72071: OR
72072: PUSH
72073: LD_VAR 0 2
72077: NOT
72078: OR
72079: IFFALSE 72083
// exit ;
72081: GO 72108
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
72083: LD_ADDR_EXP 95
72087: PUSH
72088: LD_EXP 95
72092: PPUSH
72093: LD_VAR 0 1
72097: PPUSH
72098: LD_VAR 0 2
72102: PPUSH
72103: CALL_OW 1
72107: ST_TO_ADDR
// end ;
72108: LD_VAR 0 3
72112: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
72113: LD_INT 0
72115: PPUSH
72116: PPUSH
72117: PPUSH
// if not mc_bases or not base or not ext_list then
72118: LD_EXP 60
72122: NOT
72123: PUSH
72124: LD_VAR 0 1
72128: NOT
72129: OR
72130: PUSH
72131: LD_VAR 0 5
72135: NOT
72136: OR
72137: IFFALSE 72141
// exit ;
72139: GO 72314
// tmp := GetFacExtXYD ( x , y , d ) ;
72141: LD_ADDR_VAR 0 8
72145: PUSH
72146: LD_VAR 0 2
72150: PPUSH
72151: LD_VAR 0 3
72155: PPUSH
72156: LD_VAR 0 4
72160: PPUSH
72161: CALL 44807 0 3
72165: ST_TO_ADDR
// if not tmp then
72166: LD_VAR 0 8
72170: NOT
72171: IFFALSE 72175
// exit ;
72173: GO 72314
// for i in tmp do
72175: LD_ADDR_VAR 0 7
72179: PUSH
72180: LD_VAR 0 8
72184: PUSH
72185: FOR_IN
72186: IFFALSE 72312
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
72188: LD_ADDR_EXP 65
72192: PUSH
72193: LD_EXP 65
72197: PPUSH
72198: LD_VAR 0 1
72202: PPUSH
72203: LD_EXP 65
72207: PUSH
72208: LD_VAR 0 1
72212: ARRAY
72213: PPUSH
72214: LD_EXP 65
72218: PUSH
72219: LD_VAR 0 1
72223: ARRAY
72224: PUSH
72225: LD_INT 1
72227: PLUS
72228: PPUSH
72229: LD_VAR 0 5
72233: PUSH
72234: LD_INT 1
72236: ARRAY
72237: PUSH
72238: LD_VAR 0 7
72242: PUSH
72243: LD_INT 1
72245: ARRAY
72246: PUSH
72247: LD_VAR 0 7
72251: PUSH
72252: LD_INT 2
72254: ARRAY
72255: PUSH
72256: LD_VAR 0 7
72260: PUSH
72261: LD_INT 3
72263: ARRAY
72264: PUSH
72265: EMPTY
72266: LIST
72267: LIST
72268: LIST
72269: LIST
72270: PPUSH
72271: CALL_OW 2
72275: PPUSH
72276: CALL_OW 1
72280: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
72281: LD_ADDR_VAR 0 5
72285: PUSH
72286: LD_VAR 0 5
72290: PPUSH
72291: LD_INT 1
72293: PPUSH
72294: CALL_OW 3
72298: ST_TO_ADDR
// if not ext_list then
72299: LD_VAR 0 5
72303: NOT
72304: IFFALSE 72310
// exit ;
72306: POP
72307: POP
72308: GO 72314
// end ;
72310: GO 72185
72312: POP
72313: POP
// end ;
72314: LD_VAR 0 6
72318: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
72319: LD_INT 0
72321: PPUSH
// if not mc_bases or not base or not weapon_list then
72322: LD_EXP 60
72326: NOT
72327: PUSH
72328: LD_VAR 0 1
72332: NOT
72333: OR
72334: PUSH
72335: LD_VAR 0 2
72339: NOT
72340: OR
72341: IFFALSE 72345
// exit ;
72343: GO 72370
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
72345: LD_ADDR_EXP 99
72349: PUSH
72350: LD_EXP 99
72354: PPUSH
72355: LD_VAR 0 1
72359: PPUSH
72360: LD_VAR 0 2
72364: PPUSH
72365: CALL_OW 1
72369: ST_TO_ADDR
// end ;
72370: LD_VAR 0 3
72374: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
72375: LD_INT 0
72377: PPUSH
// if not mc_bases or not base or not tech_list then
72378: LD_EXP 60
72382: NOT
72383: PUSH
72384: LD_VAR 0 1
72388: NOT
72389: OR
72390: PUSH
72391: LD_VAR 0 2
72395: NOT
72396: OR
72397: IFFALSE 72401
// exit ;
72399: GO 72426
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
72401: LD_ADDR_EXP 87
72405: PUSH
72406: LD_EXP 87
72410: PPUSH
72411: LD_VAR 0 1
72415: PPUSH
72416: LD_VAR 0 2
72420: PPUSH
72421: CALL_OW 1
72425: ST_TO_ADDR
// end ;
72426: LD_VAR 0 3
72430: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
72431: LD_INT 0
72433: PPUSH
// if not mc_bases or not parking_area or not base then
72434: LD_EXP 60
72438: NOT
72439: PUSH
72440: LD_VAR 0 2
72444: NOT
72445: OR
72446: PUSH
72447: LD_VAR 0 1
72451: NOT
72452: OR
72453: IFFALSE 72457
// exit ;
72455: GO 72482
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
72457: LD_ADDR_EXP 84
72461: PUSH
72462: LD_EXP 84
72466: PPUSH
72467: LD_VAR 0 1
72471: PPUSH
72472: LD_VAR 0 2
72476: PPUSH
72477: CALL_OW 1
72481: ST_TO_ADDR
// end ;
72482: LD_VAR 0 3
72486: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
72487: LD_INT 0
72489: PPUSH
// if not mc_bases or not base or not scan_area then
72490: LD_EXP 60
72494: NOT
72495: PUSH
72496: LD_VAR 0 1
72500: NOT
72501: OR
72502: PUSH
72503: LD_VAR 0 2
72507: NOT
72508: OR
72509: IFFALSE 72513
// exit ;
72511: GO 72538
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
72513: LD_ADDR_EXP 85
72517: PUSH
72518: LD_EXP 85
72522: PPUSH
72523: LD_VAR 0 1
72527: PPUSH
72528: LD_VAR 0 2
72532: PPUSH
72533: CALL_OW 1
72537: ST_TO_ADDR
// end ;
72538: LD_VAR 0 3
72542: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
72543: LD_INT 0
72545: PPUSH
72546: PPUSH
// if not mc_bases or not base then
72547: LD_EXP 60
72551: NOT
72552: PUSH
72553: LD_VAR 0 1
72557: NOT
72558: OR
72559: IFFALSE 72563
// exit ;
72561: GO 72627
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
72563: LD_ADDR_VAR 0 3
72567: PUSH
72568: LD_INT 1
72570: PUSH
72571: LD_INT 2
72573: PUSH
72574: LD_INT 3
72576: PUSH
72577: LD_INT 4
72579: PUSH
72580: LD_INT 11
72582: PUSH
72583: EMPTY
72584: LIST
72585: LIST
72586: LIST
72587: LIST
72588: LIST
72589: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
72590: LD_ADDR_EXP 87
72594: PUSH
72595: LD_EXP 87
72599: PPUSH
72600: LD_VAR 0 1
72604: PPUSH
72605: LD_EXP 87
72609: PUSH
72610: LD_VAR 0 1
72614: ARRAY
72615: PUSH
72616: LD_VAR 0 3
72620: DIFF
72621: PPUSH
72622: CALL_OW 1
72626: ST_TO_ADDR
// end ;
72627: LD_VAR 0 2
72631: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
72632: LD_INT 0
72634: PPUSH
// result := mc_vehicles [ base ] ;
72635: LD_ADDR_VAR 0 3
72639: PUSH
72640: LD_EXP 79
72644: PUSH
72645: LD_VAR 0 1
72649: ARRAY
72650: ST_TO_ADDR
// if onlyCombat then
72651: LD_VAR 0 2
72655: IFFALSE 72820
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
72657: LD_ADDR_VAR 0 3
72661: PUSH
72662: LD_VAR 0 3
72666: PUSH
72667: LD_VAR 0 3
72671: PPUSH
72672: LD_INT 2
72674: PUSH
72675: LD_INT 34
72677: PUSH
72678: LD_INT 12
72680: PUSH
72681: EMPTY
72682: LIST
72683: LIST
72684: PUSH
72685: LD_INT 34
72687: PUSH
72688: LD_INT 51
72690: PUSH
72691: EMPTY
72692: LIST
72693: LIST
72694: PUSH
72695: LD_INT 34
72697: PUSH
72698: LD_EXP 46
72702: PUSH
72703: EMPTY
72704: LIST
72705: LIST
72706: PUSH
72707: LD_INT 34
72709: PUSH
72710: LD_INT 32
72712: PUSH
72713: EMPTY
72714: LIST
72715: LIST
72716: PUSH
72717: LD_INT 34
72719: PUSH
72720: LD_INT 13
72722: PUSH
72723: EMPTY
72724: LIST
72725: LIST
72726: PUSH
72727: LD_INT 34
72729: PUSH
72730: LD_INT 52
72732: PUSH
72733: EMPTY
72734: LIST
72735: LIST
72736: PUSH
72737: LD_INT 34
72739: PUSH
72740: LD_INT 14
72742: PUSH
72743: EMPTY
72744: LIST
72745: LIST
72746: PUSH
72747: LD_INT 34
72749: PUSH
72750: LD_INT 53
72752: PUSH
72753: EMPTY
72754: LIST
72755: LIST
72756: PUSH
72757: LD_INT 34
72759: PUSH
72760: LD_EXP 45
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: PUSH
72769: LD_INT 34
72771: PUSH
72772: LD_INT 31
72774: PUSH
72775: EMPTY
72776: LIST
72777: LIST
72778: PUSH
72779: LD_INT 34
72781: PUSH
72782: LD_INT 48
72784: PUSH
72785: EMPTY
72786: LIST
72787: LIST
72788: PUSH
72789: LD_INT 34
72791: PUSH
72792: LD_INT 8
72794: PUSH
72795: EMPTY
72796: LIST
72797: LIST
72798: PUSH
72799: EMPTY
72800: LIST
72801: LIST
72802: LIST
72803: LIST
72804: LIST
72805: LIST
72806: LIST
72807: LIST
72808: LIST
72809: LIST
72810: LIST
72811: LIST
72812: LIST
72813: PPUSH
72814: CALL_OW 72
72818: DIFF
72819: ST_TO_ADDR
// end ; end_of_file
72820: LD_VAR 0 3
72824: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
72825: LD_INT 0
72827: PPUSH
72828: PPUSH
72829: PPUSH
// if not mc_bases or not skirmish then
72830: LD_EXP 60
72834: NOT
72835: PUSH
72836: LD_EXP 58
72840: NOT
72841: OR
72842: IFFALSE 72846
// exit ;
72844: GO 73011
// for i = 1 to mc_bases do
72846: LD_ADDR_VAR 0 4
72850: PUSH
72851: DOUBLE
72852: LD_INT 1
72854: DEC
72855: ST_TO_ADDR
72856: LD_EXP 60
72860: PUSH
72861: FOR_TO
72862: IFFALSE 73009
// begin if sci in mc_bases [ i ] then
72864: LD_VAR 0 2
72868: PUSH
72869: LD_EXP 60
72873: PUSH
72874: LD_VAR 0 4
72878: ARRAY
72879: IN
72880: IFFALSE 73007
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
72882: LD_ADDR_EXP 89
72886: PUSH
72887: LD_EXP 89
72891: PPUSH
72892: LD_VAR 0 4
72896: PUSH
72897: LD_EXP 89
72901: PUSH
72902: LD_VAR 0 4
72906: ARRAY
72907: PUSH
72908: LD_INT 1
72910: PLUS
72911: PUSH
72912: EMPTY
72913: LIST
72914: LIST
72915: PPUSH
72916: LD_VAR 0 1
72920: PPUSH
72921: CALL 16128 0 3
72925: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
72926: LD_ADDR_VAR 0 5
72930: PUSH
72931: LD_EXP 60
72935: PUSH
72936: LD_VAR 0 4
72940: ARRAY
72941: PPUSH
72942: LD_INT 2
72944: PUSH
72945: LD_INT 30
72947: PUSH
72948: LD_INT 0
72950: PUSH
72951: EMPTY
72952: LIST
72953: LIST
72954: PUSH
72955: LD_INT 30
72957: PUSH
72958: LD_INT 1
72960: PUSH
72961: EMPTY
72962: LIST
72963: LIST
72964: PUSH
72965: EMPTY
72966: LIST
72967: LIST
72968: LIST
72969: PPUSH
72970: CALL_OW 72
72974: PPUSH
72975: LD_VAR 0 1
72979: PPUSH
72980: CALL_OW 74
72984: ST_TO_ADDR
// if tmp then
72985: LD_VAR 0 5
72989: IFFALSE 73005
// ComStandNearbyBuilding ( ape , tmp ) ;
72991: LD_VAR 0 1
72995: PPUSH
72996: LD_VAR 0 5
73000: PPUSH
73001: CALL 12742 0 2
// break ;
73005: GO 73009
// end ; end ;
73007: GO 72861
73009: POP
73010: POP
// end ;
73011: LD_VAR 0 3
73015: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
73016: LD_INT 0
73018: PPUSH
73019: PPUSH
73020: PPUSH
// if not mc_bases or not skirmish then
73021: LD_EXP 60
73025: NOT
73026: PUSH
73027: LD_EXP 58
73031: NOT
73032: OR
73033: IFFALSE 73037
// exit ;
73035: GO 73126
// for i = 1 to mc_bases do
73037: LD_ADDR_VAR 0 4
73041: PUSH
73042: DOUBLE
73043: LD_INT 1
73045: DEC
73046: ST_TO_ADDR
73047: LD_EXP 60
73051: PUSH
73052: FOR_TO
73053: IFFALSE 73124
// begin if building in mc_busy_turret_list [ i ] then
73055: LD_VAR 0 1
73059: PUSH
73060: LD_EXP 70
73064: PUSH
73065: LD_VAR 0 4
73069: ARRAY
73070: IN
73071: IFFALSE 73122
// begin tmp := mc_busy_turret_list [ i ] diff building ;
73073: LD_ADDR_VAR 0 5
73077: PUSH
73078: LD_EXP 70
73082: PUSH
73083: LD_VAR 0 4
73087: ARRAY
73088: PUSH
73089: LD_VAR 0 1
73093: DIFF
73094: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
73095: LD_ADDR_EXP 70
73099: PUSH
73100: LD_EXP 70
73104: PPUSH
73105: LD_VAR 0 4
73109: PPUSH
73110: LD_VAR 0 5
73114: PPUSH
73115: CALL_OW 1
73119: ST_TO_ADDR
// break ;
73120: GO 73124
// end ; end ;
73122: GO 73052
73124: POP
73125: POP
// end ;
73126: LD_VAR 0 3
73130: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
73131: LD_INT 0
73133: PPUSH
73134: PPUSH
73135: PPUSH
// if not mc_bases or not skirmish then
73136: LD_EXP 60
73140: NOT
73141: PUSH
73142: LD_EXP 58
73146: NOT
73147: OR
73148: IFFALSE 73152
// exit ;
73150: GO 73351
// for i = 1 to mc_bases do
73152: LD_ADDR_VAR 0 5
73156: PUSH
73157: DOUBLE
73158: LD_INT 1
73160: DEC
73161: ST_TO_ADDR
73162: LD_EXP 60
73166: PUSH
73167: FOR_TO
73168: IFFALSE 73349
// if building in mc_bases [ i ] then
73170: LD_VAR 0 1
73174: PUSH
73175: LD_EXP 60
73179: PUSH
73180: LD_VAR 0 5
73184: ARRAY
73185: IN
73186: IFFALSE 73347
// begin tmp := mc_bases [ i ] diff building ;
73188: LD_ADDR_VAR 0 6
73192: PUSH
73193: LD_EXP 60
73197: PUSH
73198: LD_VAR 0 5
73202: ARRAY
73203: PUSH
73204: LD_VAR 0 1
73208: DIFF
73209: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
73210: LD_ADDR_EXP 60
73214: PUSH
73215: LD_EXP 60
73219: PPUSH
73220: LD_VAR 0 5
73224: PPUSH
73225: LD_VAR 0 6
73229: PPUSH
73230: CALL_OW 1
73234: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
73235: LD_VAR 0 1
73239: PUSH
73240: LD_EXP 68
73244: PUSH
73245: LD_VAR 0 5
73249: ARRAY
73250: IN
73251: IFFALSE 73290
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
73253: LD_ADDR_EXP 68
73257: PUSH
73258: LD_EXP 68
73262: PPUSH
73263: LD_VAR 0 5
73267: PPUSH
73268: LD_EXP 68
73272: PUSH
73273: LD_VAR 0 5
73277: ARRAY
73278: PUSH
73279: LD_VAR 0 1
73283: DIFF
73284: PPUSH
73285: CALL_OW 1
73289: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
73290: LD_VAR 0 1
73294: PUSH
73295: LD_EXP 69
73299: PUSH
73300: LD_VAR 0 5
73304: ARRAY
73305: IN
73306: IFFALSE 73345
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
73308: LD_ADDR_EXP 69
73312: PUSH
73313: LD_EXP 69
73317: PPUSH
73318: LD_VAR 0 5
73322: PPUSH
73323: LD_EXP 69
73327: PUSH
73328: LD_VAR 0 5
73332: ARRAY
73333: PUSH
73334: LD_VAR 0 1
73338: DIFF
73339: PPUSH
73340: CALL_OW 1
73344: ST_TO_ADDR
// break ;
73345: GO 73349
// end ;
73347: GO 73167
73349: POP
73350: POP
// end ;
73351: LD_VAR 0 4
73355: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
73356: LD_INT 0
73358: PPUSH
73359: PPUSH
73360: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
73361: LD_EXP 60
73365: NOT
73366: PUSH
73367: LD_EXP 58
73371: NOT
73372: OR
73373: PUSH
73374: LD_VAR 0 3
73378: PUSH
73379: LD_EXP 86
73383: IN
73384: NOT
73385: OR
73386: IFFALSE 73390
// exit ;
73388: GO 73513
// for i = 1 to mc_vehicles do
73390: LD_ADDR_VAR 0 6
73394: PUSH
73395: DOUBLE
73396: LD_INT 1
73398: DEC
73399: ST_TO_ADDR
73400: LD_EXP 79
73404: PUSH
73405: FOR_TO
73406: IFFALSE 73511
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
73408: LD_VAR 0 2
73412: PUSH
73413: LD_EXP 79
73417: PUSH
73418: LD_VAR 0 6
73422: ARRAY
73423: IN
73424: PUSH
73425: LD_VAR 0 1
73429: PUSH
73430: LD_EXP 79
73434: PUSH
73435: LD_VAR 0 6
73439: ARRAY
73440: IN
73441: OR
73442: IFFALSE 73509
// begin tmp := mc_vehicles [ i ] diff old ;
73444: LD_ADDR_VAR 0 7
73448: PUSH
73449: LD_EXP 79
73453: PUSH
73454: LD_VAR 0 6
73458: ARRAY
73459: PUSH
73460: LD_VAR 0 2
73464: DIFF
73465: ST_TO_ADDR
// tmp := tmp diff new ;
73466: LD_ADDR_VAR 0 7
73470: PUSH
73471: LD_VAR 0 7
73475: PUSH
73476: LD_VAR 0 1
73480: DIFF
73481: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
73482: LD_ADDR_EXP 79
73486: PUSH
73487: LD_EXP 79
73491: PPUSH
73492: LD_VAR 0 6
73496: PPUSH
73497: LD_VAR 0 7
73501: PPUSH
73502: CALL_OW 1
73506: ST_TO_ADDR
// break ;
73507: GO 73511
// end ;
73509: GO 73405
73511: POP
73512: POP
// end ;
73513: LD_VAR 0 5
73517: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
73518: LD_INT 0
73520: PPUSH
73521: PPUSH
73522: PPUSH
73523: PPUSH
// if not mc_bases or not skirmish then
73524: LD_EXP 60
73528: NOT
73529: PUSH
73530: LD_EXP 58
73534: NOT
73535: OR
73536: IFFALSE 73540
// exit ;
73538: GO 73917
// side := GetSide ( vehicle ) ;
73540: LD_ADDR_VAR 0 5
73544: PUSH
73545: LD_VAR 0 1
73549: PPUSH
73550: CALL_OW 255
73554: ST_TO_ADDR
// for i = 1 to mc_bases do
73555: LD_ADDR_VAR 0 4
73559: PUSH
73560: DOUBLE
73561: LD_INT 1
73563: DEC
73564: ST_TO_ADDR
73565: LD_EXP 60
73569: PUSH
73570: FOR_TO
73571: IFFALSE 73915
// begin if factory in mc_bases [ i ] then
73573: LD_VAR 0 2
73577: PUSH
73578: LD_EXP 60
73582: PUSH
73583: LD_VAR 0 4
73587: ARRAY
73588: IN
73589: IFFALSE 73913
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
73591: LD_EXP 82
73595: PUSH
73596: LD_VAR 0 4
73600: ARRAY
73601: PUSH
73602: LD_EXP 71
73606: PUSH
73607: LD_VAR 0 4
73611: ARRAY
73612: LESS
73613: PUSH
73614: LD_VAR 0 1
73618: PPUSH
73619: CALL_OW 264
73623: PUSH
73624: LD_INT 31
73626: PUSH
73627: LD_INT 32
73629: PUSH
73630: LD_INT 51
73632: PUSH
73633: LD_EXP 46
73637: PUSH
73638: LD_INT 12
73640: PUSH
73641: LD_INT 30
73643: PUSH
73644: LD_EXP 45
73648: PUSH
73649: LD_INT 11
73651: PUSH
73652: LD_INT 53
73654: PUSH
73655: LD_INT 14
73657: PUSH
73658: LD_EXP 49
73662: PUSH
73663: LD_INT 29
73665: PUSH
73666: LD_EXP 47
73670: PUSH
73671: LD_INT 13
73673: PUSH
73674: LD_INT 52
73676: PUSH
73677: LD_INT 48
73679: PUSH
73680: LD_INT 8
73682: PUSH
73683: EMPTY
73684: LIST
73685: LIST
73686: LIST
73687: LIST
73688: LIST
73689: LIST
73690: LIST
73691: LIST
73692: LIST
73693: LIST
73694: LIST
73695: LIST
73696: LIST
73697: LIST
73698: LIST
73699: LIST
73700: LIST
73701: IN
73702: NOT
73703: AND
73704: IFFALSE 73752
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
73706: LD_ADDR_EXP 82
73710: PUSH
73711: LD_EXP 82
73715: PPUSH
73716: LD_VAR 0 4
73720: PUSH
73721: LD_EXP 82
73725: PUSH
73726: LD_VAR 0 4
73730: ARRAY
73731: PUSH
73732: LD_INT 1
73734: PLUS
73735: PUSH
73736: EMPTY
73737: LIST
73738: LIST
73739: PPUSH
73740: LD_VAR 0 1
73744: PPUSH
73745: CALL 16128 0 3
73749: ST_TO_ADDR
73750: GO 73796
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
73752: LD_ADDR_EXP 79
73756: PUSH
73757: LD_EXP 79
73761: PPUSH
73762: LD_VAR 0 4
73766: PUSH
73767: LD_EXP 79
73771: PUSH
73772: LD_VAR 0 4
73776: ARRAY
73777: PUSH
73778: LD_INT 1
73780: PLUS
73781: PUSH
73782: EMPTY
73783: LIST
73784: LIST
73785: PPUSH
73786: LD_VAR 0 1
73790: PPUSH
73791: CALL 16128 0 3
73795: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
73796: LD_VAR 0 1
73800: PPUSH
73801: CALL_OW 263
73805: PUSH
73806: LD_INT 2
73808: EQUAL
73809: IFFALSE 73829
// begin repeat wait ( 0 0$1 ) ;
73811: LD_INT 35
73813: PPUSH
73814: CALL_OW 67
// until IsControledBy ( vehicle ) ;
73818: LD_VAR 0 1
73822: PPUSH
73823: CALL_OW 312
73827: IFFALSE 73811
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
73829: LD_VAR 0 1
73833: PPUSH
73834: LD_EXP 84
73838: PUSH
73839: LD_VAR 0 4
73843: ARRAY
73844: PPUSH
73845: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
73849: LD_VAR 0 1
73853: PPUSH
73854: CALL_OW 263
73858: PUSH
73859: LD_INT 1
73861: NONEQUAL
73862: IFFALSE 73866
// break ;
73864: GO 73915
// repeat wait ( 0 0$1 ) ;
73866: LD_INT 35
73868: PPUSH
73869: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
73873: LD_VAR 0 1
73877: PPUSH
73878: LD_EXP 84
73882: PUSH
73883: LD_VAR 0 4
73887: ARRAY
73888: PPUSH
73889: CALL_OW 308
73893: IFFALSE 73866
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
73895: LD_VAR 0 1
73899: PPUSH
73900: CALL_OW 311
73904: PPUSH
73905: CALL_OW 121
// exit ;
73909: POP
73910: POP
73911: GO 73917
// end ; end ;
73913: GO 73570
73915: POP
73916: POP
// end ;
73917: LD_VAR 0 3
73921: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
73922: LD_INT 0
73924: PPUSH
73925: PPUSH
73926: PPUSH
73927: PPUSH
// if not mc_bases or not skirmish then
73928: LD_EXP 60
73932: NOT
73933: PUSH
73934: LD_EXP 58
73938: NOT
73939: OR
73940: IFFALSE 73944
// exit ;
73942: GO 74297
// repeat wait ( 0 0$1 ) ;
73944: LD_INT 35
73946: PPUSH
73947: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
73951: LD_VAR 0 2
73955: PPUSH
73956: LD_VAR 0 3
73960: PPUSH
73961: CALL_OW 284
73965: IFFALSE 73944
// if GetResourceTypeXY ( x , y ) = mat_artefact then
73967: LD_VAR 0 2
73971: PPUSH
73972: LD_VAR 0 3
73976: PPUSH
73977: CALL_OW 283
73981: PUSH
73982: LD_INT 4
73984: EQUAL
73985: IFFALSE 73989
// exit ;
73987: GO 74297
// for i = 1 to mc_bases do
73989: LD_ADDR_VAR 0 7
73993: PUSH
73994: DOUBLE
73995: LD_INT 1
73997: DEC
73998: ST_TO_ADDR
73999: LD_EXP 60
74003: PUSH
74004: FOR_TO
74005: IFFALSE 74295
// begin if mc_crates_area [ i ] then
74007: LD_EXP 78
74011: PUSH
74012: LD_VAR 0 7
74016: ARRAY
74017: IFFALSE 74128
// for j in mc_crates_area [ i ] do
74019: LD_ADDR_VAR 0 8
74023: PUSH
74024: LD_EXP 78
74028: PUSH
74029: LD_VAR 0 7
74033: ARRAY
74034: PUSH
74035: FOR_IN
74036: IFFALSE 74126
// if InArea ( x , y , j ) then
74038: LD_VAR 0 2
74042: PPUSH
74043: LD_VAR 0 3
74047: PPUSH
74048: LD_VAR 0 8
74052: PPUSH
74053: CALL_OW 309
74057: IFFALSE 74124
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
74059: LD_ADDR_EXP 76
74063: PUSH
74064: LD_EXP 76
74068: PPUSH
74069: LD_VAR 0 7
74073: PUSH
74074: LD_EXP 76
74078: PUSH
74079: LD_VAR 0 7
74083: ARRAY
74084: PUSH
74085: LD_INT 1
74087: PLUS
74088: PUSH
74089: EMPTY
74090: LIST
74091: LIST
74092: PPUSH
74093: LD_VAR 0 4
74097: PUSH
74098: LD_VAR 0 2
74102: PUSH
74103: LD_VAR 0 3
74107: PUSH
74108: EMPTY
74109: LIST
74110: LIST
74111: LIST
74112: PPUSH
74113: CALL 16128 0 3
74117: ST_TO_ADDR
// exit ;
74118: POP
74119: POP
74120: POP
74121: POP
74122: GO 74297
// end ;
74124: GO 74035
74126: POP
74127: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
74128: LD_ADDR_VAR 0 9
74132: PUSH
74133: LD_EXP 60
74137: PUSH
74138: LD_VAR 0 7
74142: ARRAY
74143: PPUSH
74144: LD_INT 2
74146: PUSH
74147: LD_INT 30
74149: PUSH
74150: LD_INT 0
74152: PUSH
74153: EMPTY
74154: LIST
74155: LIST
74156: PUSH
74157: LD_INT 30
74159: PUSH
74160: LD_INT 1
74162: PUSH
74163: EMPTY
74164: LIST
74165: LIST
74166: PUSH
74167: EMPTY
74168: LIST
74169: LIST
74170: LIST
74171: PPUSH
74172: CALL_OW 72
74176: ST_TO_ADDR
// if not depot then
74177: LD_VAR 0 9
74181: NOT
74182: IFFALSE 74186
// continue ;
74184: GO 74004
// for j in depot do
74186: LD_ADDR_VAR 0 8
74190: PUSH
74191: LD_VAR 0 9
74195: PUSH
74196: FOR_IN
74197: IFFALSE 74291
// if GetDistUnitXY ( j , x , y ) < 30 then
74199: LD_VAR 0 8
74203: PPUSH
74204: LD_VAR 0 2
74208: PPUSH
74209: LD_VAR 0 3
74213: PPUSH
74214: CALL_OW 297
74218: PUSH
74219: LD_INT 30
74221: LESS
74222: IFFALSE 74289
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
74224: LD_ADDR_EXP 76
74228: PUSH
74229: LD_EXP 76
74233: PPUSH
74234: LD_VAR 0 7
74238: PUSH
74239: LD_EXP 76
74243: PUSH
74244: LD_VAR 0 7
74248: ARRAY
74249: PUSH
74250: LD_INT 1
74252: PLUS
74253: PUSH
74254: EMPTY
74255: LIST
74256: LIST
74257: PPUSH
74258: LD_VAR 0 4
74262: PUSH
74263: LD_VAR 0 2
74267: PUSH
74268: LD_VAR 0 3
74272: PUSH
74273: EMPTY
74274: LIST
74275: LIST
74276: LIST
74277: PPUSH
74278: CALL 16128 0 3
74282: ST_TO_ADDR
// exit ;
74283: POP
74284: POP
74285: POP
74286: POP
74287: GO 74297
// end ;
74289: GO 74196
74291: POP
74292: POP
// end ;
74293: GO 74004
74295: POP
74296: POP
// end ;
74297: LD_VAR 0 6
74301: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
74302: LD_INT 0
74304: PPUSH
74305: PPUSH
74306: PPUSH
74307: PPUSH
// if not mc_bases or not skirmish then
74308: LD_EXP 60
74312: NOT
74313: PUSH
74314: LD_EXP 58
74318: NOT
74319: OR
74320: IFFALSE 74324
// exit ;
74322: GO 74601
// side := GetSide ( lab ) ;
74324: LD_ADDR_VAR 0 4
74328: PUSH
74329: LD_VAR 0 2
74333: PPUSH
74334: CALL_OW 255
74338: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
74339: LD_VAR 0 4
74343: PUSH
74344: LD_EXP 86
74348: IN
74349: NOT
74350: PUSH
74351: LD_EXP 87
74355: NOT
74356: OR
74357: PUSH
74358: LD_EXP 60
74362: NOT
74363: OR
74364: IFFALSE 74368
// exit ;
74366: GO 74601
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
74368: LD_ADDR_EXP 87
74372: PUSH
74373: LD_EXP 87
74377: PPUSH
74378: LD_VAR 0 4
74382: PPUSH
74383: LD_EXP 87
74387: PUSH
74388: LD_VAR 0 4
74392: ARRAY
74393: PUSH
74394: LD_VAR 0 1
74398: DIFF
74399: PPUSH
74400: CALL_OW 1
74404: ST_TO_ADDR
// for i = 1 to mc_bases do
74405: LD_ADDR_VAR 0 5
74409: PUSH
74410: DOUBLE
74411: LD_INT 1
74413: DEC
74414: ST_TO_ADDR
74415: LD_EXP 60
74419: PUSH
74420: FOR_TO
74421: IFFALSE 74599
// begin if lab in mc_bases [ i ] then
74423: LD_VAR 0 2
74427: PUSH
74428: LD_EXP 60
74432: PUSH
74433: LD_VAR 0 5
74437: ARRAY
74438: IN
74439: IFFALSE 74597
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
74441: LD_VAR 0 1
74445: PUSH
74446: LD_INT 11
74448: PUSH
74449: LD_INT 4
74451: PUSH
74452: LD_INT 3
74454: PUSH
74455: LD_INT 2
74457: PUSH
74458: EMPTY
74459: LIST
74460: LIST
74461: LIST
74462: LIST
74463: IN
74464: PUSH
74465: LD_EXP 90
74469: PUSH
74470: LD_VAR 0 5
74474: ARRAY
74475: AND
74476: IFFALSE 74597
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
74478: LD_ADDR_VAR 0 6
74482: PUSH
74483: LD_EXP 90
74487: PUSH
74488: LD_VAR 0 5
74492: ARRAY
74493: PUSH
74494: LD_INT 1
74496: ARRAY
74497: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
74498: LD_ADDR_EXP 90
74502: PUSH
74503: LD_EXP 90
74507: PPUSH
74508: LD_VAR 0 5
74512: PPUSH
74513: EMPTY
74514: PPUSH
74515: CALL_OW 1
74519: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
74520: LD_VAR 0 6
74524: PPUSH
74525: LD_INT 0
74527: PPUSH
74528: CALL_OW 109
// ComExitBuilding ( tmp ) ;
74532: LD_VAR 0 6
74536: PPUSH
74537: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
74541: LD_ADDR_EXP 89
74545: PUSH
74546: LD_EXP 89
74550: PPUSH
74551: LD_VAR 0 5
74555: PPUSH
74556: LD_EXP 89
74560: PUSH
74561: LD_VAR 0 5
74565: ARRAY
74566: PPUSH
74567: LD_INT 1
74569: PPUSH
74570: LD_VAR 0 6
74574: PPUSH
74575: CALL_OW 2
74579: PPUSH
74580: CALL_OW 1
74584: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
74585: LD_VAR 0 5
74589: PPUSH
74590: LD_INT 112
74592: PPUSH
74593: CALL 51613 0 2
// end ; end ; end ;
74597: GO 74420
74599: POP
74600: POP
// end ;
74601: LD_VAR 0 3
74605: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
74606: LD_INT 0
74608: PPUSH
74609: PPUSH
74610: PPUSH
74611: PPUSH
74612: PPUSH
74613: PPUSH
74614: PPUSH
74615: PPUSH
// if not mc_bases or not skirmish then
74616: LD_EXP 60
74620: NOT
74621: PUSH
74622: LD_EXP 58
74626: NOT
74627: OR
74628: IFFALSE 74632
// exit ;
74630: GO 76003
// for i = 1 to mc_bases do
74632: LD_ADDR_VAR 0 3
74636: PUSH
74637: DOUBLE
74638: LD_INT 1
74640: DEC
74641: ST_TO_ADDR
74642: LD_EXP 60
74646: PUSH
74647: FOR_TO
74648: IFFALSE 76001
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
74650: LD_VAR 0 1
74654: PUSH
74655: LD_EXP 60
74659: PUSH
74660: LD_VAR 0 3
74664: ARRAY
74665: IN
74666: PUSH
74667: LD_VAR 0 1
74671: PUSH
74672: LD_EXP 67
74676: PUSH
74677: LD_VAR 0 3
74681: ARRAY
74682: IN
74683: OR
74684: PUSH
74685: LD_VAR 0 1
74689: PUSH
74690: LD_EXP 82
74694: PUSH
74695: LD_VAR 0 3
74699: ARRAY
74700: IN
74701: OR
74702: PUSH
74703: LD_VAR 0 1
74707: PUSH
74708: LD_EXP 79
74712: PUSH
74713: LD_VAR 0 3
74717: ARRAY
74718: IN
74719: OR
74720: PUSH
74721: LD_VAR 0 1
74725: PUSH
74726: LD_EXP 89
74730: PUSH
74731: LD_VAR 0 3
74735: ARRAY
74736: IN
74737: OR
74738: PUSH
74739: LD_VAR 0 1
74743: PUSH
74744: LD_EXP 90
74748: PUSH
74749: LD_VAR 0 3
74753: ARRAY
74754: IN
74755: OR
74756: IFFALSE 75999
// begin if un in mc_ape [ i ] then
74758: LD_VAR 0 1
74762: PUSH
74763: LD_EXP 89
74767: PUSH
74768: LD_VAR 0 3
74772: ARRAY
74773: IN
74774: IFFALSE 74813
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
74776: LD_ADDR_EXP 89
74780: PUSH
74781: LD_EXP 89
74785: PPUSH
74786: LD_VAR 0 3
74790: PPUSH
74791: LD_EXP 89
74795: PUSH
74796: LD_VAR 0 3
74800: ARRAY
74801: PUSH
74802: LD_VAR 0 1
74806: DIFF
74807: PPUSH
74808: CALL_OW 1
74812: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
74813: LD_VAR 0 1
74817: PUSH
74818: LD_EXP 90
74822: PUSH
74823: LD_VAR 0 3
74827: ARRAY
74828: IN
74829: IFFALSE 74853
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
74831: LD_ADDR_EXP 90
74835: PUSH
74836: LD_EXP 90
74840: PPUSH
74841: LD_VAR 0 3
74845: PPUSH
74846: EMPTY
74847: PPUSH
74848: CALL_OW 1
74852: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
74853: LD_VAR 0 1
74857: PPUSH
74858: CALL_OW 247
74862: PUSH
74863: LD_INT 2
74865: EQUAL
74866: PUSH
74867: LD_VAR 0 1
74871: PPUSH
74872: CALL_OW 110
74876: PUSH
74877: LD_INT 20
74879: EQUAL
74880: PUSH
74881: LD_VAR 0 1
74885: PUSH
74886: LD_EXP 82
74890: PUSH
74891: LD_VAR 0 3
74895: ARRAY
74896: IN
74897: OR
74898: PUSH
74899: LD_VAR 0 1
74903: PPUSH
74904: CALL_OW 264
74908: PUSH
74909: LD_INT 12
74911: PUSH
74912: LD_INT 51
74914: PUSH
74915: LD_EXP 46
74919: PUSH
74920: LD_INT 32
74922: PUSH
74923: LD_INT 13
74925: PUSH
74926: LD_INT 52
74928: PUSH
74929: LD_INT 31
74931: PUSH
74932: EMPTY
74933: LIST
74934: LIST
74935: LIST
74936: LIST
74937: LIST
74938: LIST
74939: LIST
74940: IN
74941: OR
74942: AND
74943: IFFALSE 75251
// begin if un in mc_defender [ i ] then
74945: LD_VAR 0 1
74949: PUSH
74950: LD_EXP 82
74954: PUSH
74955: LD_VAR 0 3
74959: ARRAY
74960: IN
74961: IFFALSE 75000
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
74963: LD_ADDR_EXP 82
74967: PUSH
74968: LD_EXP 82
74972: PPUSH
74973: LD_VAR 0 3
74977: PPUSH
74978: LD_EXP 82
74982: PUSH
74983: LD_VAR 0 3
74987: ARRAY
74988: PUSH
74989: LD_VAR 0 1
74993: DIFF
74994: PPUSH
74995: CALL_OW 1
74999: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
75000: LD_ADDR_VAR 0 8
75004: PUSH
75005: LD_VAR 0 3
75009: PPUSH
75010: LD_INT 3
75012: PPUSH
75013: CALL 71669 0 2
75017: ST_TO_ADDR
// if fac then
75018: LD_VAR 0 8
75022: IFFALSE 75251
// begin for j in fac do
75024: LD_ADDR_VAR 0 4
75028: PUSH
75029: LD_VAR 0 8
75033: PUSH
75034: FOR_IN
75035: IFFALSE 75249
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
75037: LD_ADDR_VAR 0 9
75041: PUSH
75042: LD_VAR 0 8
75046: PPUSH
75047: LD_VAR 0 1
75051: PPUSH
75052: CALL_OW 265
75056: PPUSH
75057: LD_VAR 0 1
75061: PPUSH
75062: CALL_OW 262
75066: PPUSH
75067: LD_VAR 0 1
75071: PPUSH
75072: CALL_OW 263
75076: PPUSH
75077: LD_VAR 0 1
75081: PPUSH
75082: CALL_OW 264
75086: PPUSH
75087: CALL 13660 0 5
75091: ST_TO_ADDR
// if components then
75092: LD_VAR 0 9
75096: IFFALSE 75247
// begin if GetWeapon ( un ) = ar_control_tower then
75098: LD_VAR 0 1
75102: PPUSH
75103: CALL_OW 264
75107: PUSH
75108: LD_INT 31
75110: EQUAL
75111: IFFALSE 75228
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
75113: LD_VAR 0 1
75117: PPUSH
75118: CALL_OW 311
75122: PPUSH
75123: LD_INT 0
75125: PPUSH
75126: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
75130: LD_ADDR_EXP 100
75134: PUSH
75135: LD_EXP 100
75139: PPUSH
75140: LD_VAR 0 3
75144: PPUSH
75145: LD_EXP 100
75149: PUSH
75150: LD_VAR 0 3
75154: ARRAY
75155: PUSH
75156: LD_VAR 0 1
75160: PPUSH
75161: CALL_OW 311
75165: DIFF
75166: PPUSH
75167: CALL_OW 1
75171: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
75172: LD_ADDR_VAR 0 7
75176: PUSH
75177: LD_EXP 81
75181: PUSH
75182: LD_VAR 0 3
75186: ARRAY
75187: PPUSH
75188: LD_INT 1
75190: PPUSH
75191: LD_VAR 0 9
75195: PPUSH
75196: CALL_OW 2
75200: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
75201: LD_ADDR_EXP 81
75205: PUSH
75206: LD_EXP 81
75210: PPUSH
75211: LD_VAR 0 3
75215: PPUSH
75216: LD_VAR 0 7
75220: PPUSH
75221: CALL_OW 1
75225: ST_TO_ADDR
// end else
75226: GO 75245
// MC_InsertProduceList ( i , [ components ] ) ;
75228: LD_VAR 0 3
75232: PPUSH
75233: LD_VAR 0 9
75237: PUSH
75238: EMPTY
75239: LIST
75240: PPUSH
75241: CALL 71214 0 2
// break ;
75245: GO 75249
// end ; end ;
75247: GO 75034
75249: POP
75250: POP
// end ; end ; if GetType ( un ) = unit_building then
75251: LD_VAR 0 1
75255: PPUSH
75256: CALL_OW 247
75260: PUSH
75261: LD_INT 3
75263: EQUAL
75264: IFFALSE 75667
// begin btype := GetBType ( un ) ;
75266: LD_ADDR_VAR 0 5
75270: PUSH
75271: LD_VAR 0 1
75275: PPUSH
75276: CALL_OW 266
75280: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
75281: LD_VAR 0 5
75285: PUSH
75286: LD_INT 29
75288: PUSH
75289: LD_INT 30
75291: PUSH
75292: EMPTY
75293: LIST
75294: LIST
75295: IN
75296: IFFALSE 75369
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
75298: LD_VAR 0 1
75302: PPUSH
75303: CALL_OW 250
75307: PPUSH
75308: LD_VAR 0 1
75312: PPUSH
75313: CALL_OW 251
75317: PPUSH
75318: LD_VAR 0 1
75322: PPUSH
75323: CALL_OW 255
75327: PPUSH
75328: CALL_OW 440
75332: NOT
75333: IFFALSE 75369
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
75335: LD_VAR 0 1
75339: PPUSH
75340: CALL_OW 250
75344: PPUSH
75345: LD_VAR 0 1
75349: PPUSH
75350: CALL_OW 251
75354: PPUSH
75355: LD_VAR 0 1
75359: PPUSH
75360: CALL_OW 255
75364: PPUSH
75365: CALL_OW 441
// end ; if btype = b_warehouse then
75369: LD_VAR 0 5
75373: PUSH
75374: LD_INT 1
75376: EQUAL
75377: IFFALSE 75395
// begin btype := b_depot ;
75379: LD_ADDR_VAR 0 5
75383: PUSH
75384: LD_INT 0
75386: ST_TO_ADDR
// pos := 1 ;
75387: LD_ADDR_VAR 0 6
75391: PUSH
75392: LD_INT 1
75394: ST_TO_ADDR
// end ; if btype = b_factory then
75395: LD_VAR 0 5
75399: PUSH
75400: LD_INT 3
75402: EQUAL
75403: IFFALSE 75421
// begin btype := b_workshop ;
75405: LD_ADDR_VAR 0 5
75409: PUSH
75410: LD_INT 2
75412: ST_TO_ADDR
// pos := 1 ;
75413: LD_ADDR_VAR 0 6
75417: PUSH
75418: LD_INT 1
75420: ST_TO_ADDR
// end ; if btype = b_barracks then
75421: LD_VAR 0 5
75425: PUSH
75426: LD_INT 5
75428: EQUAL
75429: IFFALSE 75439
// btype := b_armoury ;
75431: LD_ADDR_VAR 0 5
75435: PUSH
75436: LD_INT 4
75438: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
75439: LD_VAR 0 5
75443: PUSH
75444: LD_INT 7
75446: PUSH
75447: LD_INT 8
75449: PUSH
75450: EMPTY
75451: LIST
75452: LIST
75453: IN
75454: IFFALSE 75464
// btype := b_lab ;
75456: LD_ADDR_VAR 0 5
75460: PUSH
75461: LD_INT 6
75463: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
75464: LD_ADDR_EXP 65
75468: PUSH
75469: LD_EXP 65
75473: PPUSH
75474: LD_VAR 0 3
75478: PUSH
75479: LD_EXP 65
75483: PUSH
75484: LD_VAR 0 3
75488: ARRAY
75489: PUSH
75490: LD_INT 1
75492: PLUS
75493: PUSH
75494: EMPTY
75495: LIST
75496: LIST
75497: PPUSH
75498: LD_VAR 0 5
75502: PUSH
75503: LD_VAR 0 1
75507: PPUSH
75508: CALL_OW 250
75512: PUSH
75513: LD_VAR 0 1
75517: PPUSH
75518: CALL_OW 251
75522: PUSH
75523: LD_VAR 0 1
75527: PPUSH
75528: CALL_OW 254
75532: PUSH
75533: EMPTY
75534: LIST
75535: LIST
75536: LIST
75537: LIST
75538: PPUSH
75539: CALL 16128 0 3
75543: ST_TO_ADDR
// if pos = 1 then
75544: LD_VAR 0 6
75548: PUSH
75549: LD_INT 1
75551: EQUAL
75552: IFFALSE 75667
// begin tmp := mc_build_list [ i ] ;
75554: LD_ADDR_VAR 0 7
75558: PUSH
75559: LD_EXP 65
75563: PUSH
75564: LD_VAR 0 3
75568: ARRAY
75569: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
75570: LD_VAR 0 7
75574: PPUSH
75575: LD_INT 2
75577: PUSH
75578: LD_INT 30
75580: PUSH
75581: LD_INT 0
75583: PUSH
75584: EMPTY
75585: LIST
75586: LIST
75587: PUSH
75588: LD_INT 30
75590: PUSH
75591: LD_INT 1
75593: PUSH
75594: EMPTY
75595: LIST
75596: LIST
75597: PUSH
75598: EMPTY
75599: LIST
75600: LIST
75601: LIST
75602: PPUSH
75603: CALL_OW 72
75607: IFFALSE 75617
// pos := 2 ;
75609: LD_ADDR_VAR 0 6
75613: PUSH
75614: LD_INT 2
75616: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
75617: LD_ADDR_VAR 0 7
75621: PUSH
75622: LD_VAR 0 7
75626: PPUSH
75627: LD_VAR 0 6
75631: PPUSH
75632: LD_VAR 0 7
75636: PPUSH
75637: CALL 16454 0 3
75641: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
75642: LD_ADDR_EXP 65
75646: PUSH
75647: LD_EXP 65
75651: PPUSH
75652: LD_VAR 0 3
75656: PPUSH
75657: LD_VAR 0 7
75661: PPUSH
75662: CALL_OW 1
75666: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
75667: LD_VAR 0 1
75671: PUSH
75672: LD_EXP 60
75676: PUSH
75677: LD_VAR 0 3
75681: ARRAY
75682: IN
75683: IFFALSE 75722
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
75685: LD_ADDR_EXP 60
75689: PUSH
75690: LD_EXP 60
75694: PPUSH
75695: LD_VAR 0 3
75699: PPUSH
75700: LD_EXP 60
75704: PUSH
75705: LD_VAR 0 3
75709: ARRAY
75710: PUSH
75711: LD_VAR 0 1
75715: DIFF
75716: PPUSH
75717: CALL_OW 1
75721: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
75722: LD_VAR 0 1
75726: PUSH
75727: LD_EXP 67
75731: PUSH
75732: LD_VAR 0 3
75736: ARRAY
75737: IN
75738: IFFALSE 75777
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
75740: LD_ADDR_EXP 67
75744: PUSH
75745: LD_EXP 67
75749: PPUSH
75750: LD_VAR 0 3
75754: PPUSH
75755: LD_EXP 67
75759: PUSH
75760: LD_VAR 0 3
75764: ARRAY
75765: PUSH
75766: LD_VAR 0 1
75770: DIFF
75771: PPUSH
75772: CALL_OW 1
75776: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
75777: LD_VAR 0 1
75781: PUSH
75782: LD_EXP 79
75786: PUSH
75787: LD_VAR 0 3
75791: ARRAY
75792: IN
75793: IFFALSE 75832
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
75795: LD_ADDR_EXP 79
75799: PUSH
75800: LD_EXP 79
75804: PPUSH
75805: LD_VAR 0 3
75809: PPUSH
75810: LD_EXP 79
75814: PUSH
75815: LD_VAR 0 3
75819: ARRAY
75820: PUSH
75821: LD_VAR 0 1
75825: DIFF
75826: PPUSH
75827: CALL_OW 1
75831: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
75832: LD_VAR 0 1
75836: PUSH
75837: LD_EXP 82
75841: PUSH
75842: LD_VAR 0 3
75846: ARRAY
75847: IN
75848: IFFALSE 75887
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
75850: LD_ADDR_EXP 82
75854: PUSH
75855: LD_EXP 82
75859: PPUSH
75860: LD_VAR 0 3
75864: PPUSH
75865: LD_EXP 82
75869: PUSH
75870: LD_VAR 0 3
75874: ARRAY
75875: PUSH
75876: LD_VAR 0 1
75880: DIFF
75881: PPUSH
75882: CALL_OW 1
75886: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
75887: LD_VAR 0 1
75891: PUSH
75892: LD_EXP 69
75896: PUSH
75897: LD_VAR 0 3
75901: ARRAY
75902: IN
75903: IFFALSE 75942
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
75905: LD_ADDR_EXP 69
75909: PUSH
75910: LD_EXP 69
75914: PPUSH
75915: LD_VAR 0 3
75919: PPUSH
75920: LD_EXP 69
75924: PUSH
75925: LD_VAR 0 3
75929: ARRAY
75930: PUSH
75931: LD_VAR 0 1
75935: DIFF
75936: PPUSH
75937: CALL_OW 1
75941: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
75942: LD_VAR 0 1
75946: PUSH
75947: LD_EXP 68
75951: PUSH
75952: LD_VAR 0 3
75956: ARRAY
75957: IN
75958: IFFALSE 75997
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
75960: LD_ADDR_EXP 68
75964: PUSH
75965: LD_EXP 68
75969: PPUSH
75970: LD_VAR 0 3
75974: PPUSH
75975: LD_EXP 68
75979: PUSH
75980: LD_VAR 0 3
75984: ARRAY
75985: PUSH
75986: LD_VAR 0 1
75990: DIFF
75991: PPUSH
75992: CALL_OW 1
75996: ST_TO_ADDR
// end ; break ;
75997: GO 76001
// end ;
75999: GO 74647
76001: POP
76002: POP
// end ;
76003: LD_VAR 0 2
76007: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
76008: LD_INT 0
76010: PPUSH
76011: PPUSH
76012: PPUSH
// if not mc_bases or not skirmish then
76013: LD_EXP 60
76017: NOT
76018: PUSH
76019: LD_EXP 58
76023: NOT
76024: OR
76025: IFFALSE 76029
// exit ;
76027: GO 76244
// for i = 1 to mc_bases do
76029: LD_ADDR_VAR 0 3
76033: PUSH
76034: DOUBLE
76035: LD_INT 1
76037: DEC
76038: ST_TO_ADDR
76039: LD_EXP 60
76043: PUSH
76044: FOR_TO
76045: IFFALSE 76242
// begin if building in mc_construct_list [ i ] then
76047: LD_VAR 0 1
76051: PUSH
76052: LD_EXP 67
76056: PUSH
76057: LD_VAR 0 3
76061: ARRAY
76062: IN
76063: IFFALSE 76240
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
76065: LD_ADDR_EXP 67
76069: PUSH
76070: LD_EXP 67
76074: PPUSH
76075: LD_VAR 0 3
76079: PPUSH
76080: LD_EXP 67
76084: PUSH
76085: LD_VAR 0 3
76089: ARRAY
76090: PUSH
76091: LD_VAR 0 1
76095: DIFF
76096: PPUSH
76097: CALL_OW 1
76101: ST_TO_ADDR
// if building in mc_lab [ i ] then
76102: LD_VAR 0 1
76106: PUSH
76107: LD_EXP 93
76111: PUSH
76112: LD_VAR 0 3
76116: ARRAY
76117: IN
76118: IFFALSE 76173
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
76120: LD_ADDR_EXP 94
76124: PUSH
76125: LD_EXP 94
76129: PPUSH
76130: LD_VAR 0 3
76134: PPUSH
76135: LD_EXP 94
76139: PUSH
76140: LD_VAR 0 3
76144: ARRAY
76145: PPUSH
76146: LD_INT 1
76148: PPUSH
76149: LD_EXP 94
76153: PUSH
76154: LD_VAR 0 3
76158: ARRAY
76159: PPUSH
76160: LD_INT 0
76162: PPUSH
76163: CALL 15546 0 4
76167: PPUSH
76168: CALL_OW 1
76172: ST_TO_ADDR
// if not building in mc_bases [ i ] then
76173: LD_VAR 0 1
76177: PUSH
76178: LD_EXP 60
76182: PUSH
76183: LD_VAR 0 3
76187: ARRAY
76188: IN
76189: NOT
76190: IFFALSE 76236
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
76192: LD_ADDR_EXP 60
76196: PUSH
76197: LD_EXP 60
76201: PPUSH
76202: LD_VAR 0 3
76206: PUSH
76207: LD_EXP 60
76211: PUSH
76212: LD_VAR 0 3
76216: ARRAY
76217: PUSH
76218: LD_INT 1
76220: PLUS
76221: PUSH
76222: EMPTY
76223: LIST
76224: LIST
76225: PPUSH
76226: LD_VAR 0 1
76230: PPUSH
76231: CALL 16128 0 3
76235: ST_TO_ADDR
// exit ;
76236: POP
76237: POP
76238: GO 76244
// end ; end ;
76240: GO 76044
76242: POP
76243: POP
// end ;
76244: LD_VAR 0 2
76248: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
76249: LD_INT 0
76251: PPUSH
76252: PPUSH
76253: PPUSH
76254: PPUSH
76255: PPUSH
76256: PPUSH
76257: PPUSH
// if not mc_bases or not skirmish then
76258: LD_EXP 60
76262: NOT
76263: PUSH
76264: LD_EXP 58
76268: NOT
76269: OR
76270: IFFALSE 76274
// exit ;
76272: GO 76935
// for i = 1 to mc_bases do
76274: LD_ADDR_VAR 0 3
76278: PUSH
76279: DOUBLE
76280: LD_INT 1
76282: DEC
76283: ST_TO_ADDR
76284: LD_EXP 60
76288: PUSH
76289: FOR_TO
76290: IFFALSE 76933
// begin if building in mc_construct_list [ i ] then
76292: LD_VAR 0 1
76296: PUSH
76297: LD_EXP 67
76301: PUSH
76302: LD_VAR 0 3
76306: ARRAY
76307: IN
76308: IFFALSE 76931
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
76310: LD_ADDR_EXP 67
76314: PUSH
76315: LD_EXP 67
76319: PPUSH
76320: LD_VAR 0 3
76324: PPUSH
76325: LD_EXP 67
76329: PUSH
76330: LD_VAR 0 3
76334: ARRAY
76335: PUSH
76336: LD_VAR 0 1
76340: DIFF
76341: PPUSH
76342: CALL_OW 1
76346: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
76347: LD_ADDR_EXP 60
76351: PUSH
76352: LD_EXP 60
76356: PPUSH
76357: LD_VAR 0 3
76361: PUSH
76362: LD_EXP 60
76366: PUSH
76367: LD_VAR 0 3
76371: ARRAY
76372: PUSH
76373: LD_INT 1
76375: PLUS
76376: PUSH
76377: EMPTY
76378: LIST
76379: LIST
76380: PPUSH
76381: LD_VAR 0 1
76385: PPUSH
76386: CALL 16128 0 3
76390: ST_TO_ADDR
// btype := GetBType ( building ) ;
76391: LD_ADDR_VAR 0 5
76395: PUSH
76396: LD_VAR 0 1
76400: PPUSH
76401: CALL_OW 266
76405: ST_TO_ADDR
// side := GetSide ( building ) ;
76406: LD_ADDR_VAR 0 8
76410: PUSH
76411: LD_VAR 0 1
76415: PPUSH
76416: CALL_OW 255
76420: ST_TO_ADDR
// if btype = b_lab then
76421: LD_VAR 0 5
76425: PUSH
76426: LD_INT 6
76428: EQUAL
76429: IFFALSE 76479
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
76431: LD_ADDR_EXP 93
76435: PUSH
76436: LD_EXP 93
76440: PPUSH
76441: LD_VAR 0 3
76445: PUSH
76446: LD_EXP 93
76450: PUSH
76451: LD_VAR 0 3
76455: ARRAY
76456: PUSH
76457: LD_INT 1
76459: PLUS
76460: PUSH
76461: EMPTY
76462: LIST
76463: LIST
76464: PPUSH
76465: LD_VAR 0 1
76469: PPUSH
76470: CALL 16128 0 3
76474: ST_TO_ADDR
// exit ;
76475: POP
76476: POP
76477: GO 76935
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
76479: LD_VAR 0 5
76483: PUSH
76484: LD_INT 0
76486: PUSH
76487: LD_INT 2
76489: PUSH
76490: LD_INT 4
76492: PUSH
76493: EMPTY
76494: LIST
76495: LIST
76496: LIST
76497: IN
76498: IFFALSE 76622
// begin if btype = b_armoury then
76500: LD_VAR 0 5
76504: PUSH
76505: LD_INT 4
76507: EQUAL
76508: IFFALSE 76518
// btype := b_barracks ;
76510: LD_ADDR_VAR 0 5
76514: PUSH
76515: LD_INT 5
76517: ST_TO_ADDR
// if btype = b_depot then
76518: LD_VAR 0 5
76522: PUSH
76523: LD_INT 0
76525: EQUAL
76526: IFFALSE 76536
// btype := b_warehouse ;
76528: LD_ADDR_VAR 0 5
76532: PUSH
76533: LD_INT 1
76535: ST_TO_ADDR
// if btype = b_workshop then
76536: LD_VAR 0 5
76540: PUSH
76541: LD_INT 2
76543: EQUAL
76544: IFFALSE 76554
// btype := b_factory ;
76546: LD_ADDR_VAR 0 5
76550: PUSH
76551: LD_INT 3
76553: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
76554: LD_VAR 0 5
76558: PPUSH
76559: LD_VAR 0 8
76563: PPUSH
76564: CALL_OW 323
76568: PUSH
76569: LD_INT 1
76571: EQUAL
76572: IFFALSE 76618
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
76574: LD_ADDR_EXP 92
76578: PUSH
76579: LD_EXP 92
76583: PPUSH
76584: LD_VAR 0 3
76588: PUSH
76589: LD_EXP 92
76593: PUSH
76594: LD_VAR 0 3
76598: ARRAY
76599: PUSH
76600: LD_INT 1
76602: PLUS
76603: PUSH
76604: EMPTY
76605: LIST
76606: LIST
76607: PPUSH
76608: LD_VAR 0 1
76612: PPUSH
76613: CALL 16128 0 3
76617: ST_TO_ADDR
// exit ;
76618: POP
76619: POP
76620: GO 76935
// end ; if btype in [ b_bunker , b_turret ] then
76622: LD_VAR 0 5
76626: PUSH
76627: LD_INT 32
76629: PUSH
76630: LD_INT 33
76632: PUSH
76633: EMPTY
76634: LIST
76635: LIST
76636: IN
76637: IFFALSE 76927
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
76639: LD_ADDR_EXP 68
76643: PUSH
76644: LD_EXP 68
76648: PPUSH
76649: LD_VAR 0 3
76653: PUSH
76654: LD_EXP 68
76658: PUSH
76659: LD_VAR 0 3
76663: ARRAY
76664: PUSH
76665: LD_INT 1
76667: PLUS
76668: PUSH
76669: EMPTY
76670: LIST
76671: LIST
76672: PPUSH
76673: LD_VAR 0 1
76677: PPUSH
76678: CALL 16128 0 3
76682: ST_TO_ADDR
// if btype = b_bunker then
76683: LD_VAR 0 5
76687: PUSH
76688: LD_INT 32
76690: EQUAL
76691: IFFALSE 76927
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
76693: LD_ADDR_EXP 69
76697: PUSH
76698: LD_EXP 69
76702: PPUSH
76703: LD_VAR 0 3
76707: PUSH
76708: LD_EXP 69
76712: PUSH
76713: LD_VAR 0 3
76717: ARRAY
76718: PUSH
76719: LD_INT 1
76721: PLUS
76722: PUSH
76723: EMPTY
76724: LIST
76725: LIST
76726: PPUSH
76727: LD_VAR 0 1
76731: PPUSH
76732: CALL 16128 0 3
76736: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
76737: LD_ADDR_VAR 0 6
76741: PUSH
76742: LD_EXP 60
76746: PUSH
76747: LD_VAR 0 3
76751: ARRAY
76752: PPUSH
76753: LD_INT 25
76755: PUSH
76756: LD_INT 1
76758: PUSH
76759: EMPTY
76760: LIST
76761: LIST
76762: PUSH
76763: LD_INT 3
76765: PUSH
76766: LD_INT 54
76768: PUSH
76769: EMPTY
76770: LIST
76771: PUSH
76772: EMPTY
76773: LIST
76774: LIST
76775: PUSH
76776: EMPTY
76777: LIST
76778: LIST
76779: PPUSH
76780: CALL_OW 72
76784: ST_TO_ADDR
// if tmp then
76785: LD_VAR 0 6
76789: IFFALSE 76795
// exit ;
76791: POP
76792: POP
76793: GO 76935
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
76795: LD_ADDR_VAR 0 6
76799: PUSH
76800: LD_EXP 60
76804: PUSH
76805: LD_VAR 0 3
76809: ARRAY
76810: PPUSH
76811: LD_INT 2
76813: PUSH
76814: LD_INT 30
76816: PUSH
76817: LD_INT 4
76819: PUSH
76820: EMPTY
76821: LIST
76822: LIST
76823: PUSH
76824: LD_INT 30
76826: PUSH
76827: LD_INT 5
76829: PUSH
76830: EMPTY
76831: LIST
76832: LIST
76833: PUSH
76834: EMPTY
76835: LIST
76836: LIST
76837: LIST
76838: PPUSH
76839: CALL_OW 72
76843: ST_TO_ADDR
// if not tmp then
76844: LD_VAR 0 6
76848: NOT
76849: IFFALSE 76855
// exit ;
76851: POP
76852: POP
76853: GO 76935
// for j in tmp do
76855: LD_ADDR_VAR 0 4
76859: PUSH
76860: LD_VAR 0 6
76864: PUSH
76865: FOR_IN
76866: IFFALSE 76925
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
76868: LD_ADDR_VAR 0 7
76872: PUSH
76873: LD_VAR 0 4
76877: PPUSH
76878: CALL_OW 313
76882: PPUSH
76883: LD_INT 25
76885: PUSH
76886: LD_INT 1
76888: PUSH
76889: EMPTY
76890: LIST
76891: LIST
76892: PPUSH
76893: CALL_OW 72
76897: ST_TO_ADDR
// if units then
76898: LD_VAR 0 7
76902: IFFALSE 76923
// begin ComExitBuilding ( units [ 1 ] ) ;
76904: LD_VAR 0 7
76908: PUSH
76909: LD_INT 1
76911: ARRAY
76912: PPUSH
76913: CALL_OW 122
// exit ;
76917: POP
76918: POP
76919: POP
76920: POP
76921: GO 76935
// end ; end ;
76923: GO 76865
76925: POP
76926: POP
// end ; end ; exit ;
76927: POP
76928: POP
76929: GO 76935
// end ; end ;
76931: GO 76289
76933: POP
76934: POP
// end ;
76935: LD_VAR 0 2
76939: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
76940: LD_INT 0
76942: PPUSH
76943: PPUSH
76944: PPUSH
76945: PPUSH
76946: PPUSH
76947: PPUSH
76948: PPUSH
// if not mc_bases or not skirmish then
76949: LD_EXP 60
76953: NOT
76954: PUSH
76955: LD_EXP 58
76959: NOT
76960: OR
76961: IFFALSE 76965
// exit ;
76963: GO 77196
// btype := GetBType ( building ) ;
76965: LD_ADDR_VAR 0 6
76969: PUSH
76970: LD_VAR 0 1
76974: PPUSH
76975: CALL_OW 266
76979: ST_TO_ADDR
// x := GetX ( building ) ;
76980: LD_ADDR_VAR 0 7
76984: PUSH
76985: LD_VAR 0 1
76989: PPUSH
76990: CALL_OW 250
76994: ST_TO_ADDR
// y := GetY ( building ) ;
76995: LD_ADDR_VAR 0 8
76999: PUSH
77000: LD_VAR 0 1
77004: PPUSH
77005: CALL_OW 251
77009: ST_TO_ADDR
// d := GetDir ( building ) ;
77010: LD_ADDR_VAR 0 9
77014: PUSH
77015: LD_VAR 0 1
77019: PPUSH
77020: CALL_OW 254
77024: ST_TO_ADDR
// for i = 1 to mc_bases do
77025: LD_ADDR_VAR 0 4
77029: PUSH
77030: DOUBLE
77031: LD_INT 1
77033: DEC
77034: ST_TO_ADDR
77035: LD_EXP 60
77039: PUSH
77040: FOR_TO
77041: IFFALSE 77194
// begin if not mc_build_list [ i ] then
77043: LD_EXP 65
77047: PUSH
77048: LD_VAR 0 4
77052: ARRAY
77053: NOT
77054: IFFALSE 77058
// continue ;
77056: GO 77040
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
77058: LD_VAR 0 6
77062: PUSH
77063: LD_VAR 0 7
77067: PUSH
77068: LD_VAR 0 8
77072: PUSH
77073: LD_VAR 0 9
77077: PUSH
77078: EMPTY
77079: LIST
77080: LIST
77081: LIST
77082: LIST
77083: PPUSH
77084: LD_EXP 65
77088: PUSH
77089: LD_VAR 0 4
77093: ARRAY
77094: PUSH
77095: LD_INT 1
77097: ARRAY
77098: PPUSH
77099: CALL 22297 0 2
77103: IFFALSE 77192
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
77105: LD_ADDR_EXP 65
77109: PUSH
77110: LD_EXP 65
77114: PPUSH
77115: LD_VAR 0 4
77119: PPUSH
77120: LD_EXP 65
77124: PUSH
77125: LD_VAR 0 4
77129: ARRAY
77130: PPUSH
77131: LD_INT 1
77133: PPUSH
77134: CALL_OW 3
77138: PPUSH
77139: CALL_OW 1
77143: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
77144: LD_ADDR_EXP 67
77148: PUSH
77149: LD_EXP 67
77153: PPUSH
77154: LD_VAR 0 4
77158: PUSH
77159: LD_EXP 67
77163: PUSH
77164: LD_VAR 0 4
77168: ARRAY
77169: PUSH
77170: LD_INT 1
77172: PLUS
77173: PUSH
77174: EMPTY
77175: LIST
77176: LIST
77177: PPUSH
77178: LD_VAR 0 1
77182: PPUSH
77183: CALL 16128 0 3
77187: ST_TO_ADDR
// exit ;
77188: POP
77189: POP
77190: GO 77196
// end ; end ;
77192: GO 77040
77194: POP
77195: POP
// end ;
77196: LD_VAR 0 3
77200: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
77201: LD_INT 0
77203: PPUSH
77204: PPUSH
77205: PPUSH
// if not mc_bases or not skirmish then
77206: LD_EXP 60
77210: NOT
77211: PUSH
77212: LD_EXP 58
77216: NOT
77217: OR
77218: IFFALSE 77222
// exit ;
77220: GO 77412
// for i = 1 to mc_bases do
77222: LD_ADDR_VAR 0 4
77226: PUSH
77227: DOUBLE
77228: LD_INT 1
77230: DEC
77231: ST_TO_ADDR
77232: LD_EXP 60
77236: PUSH
77237: FOR_TO
77238: IFFALSE 77325
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
77240: LD_VAR 0 1
77244: PUSH
77245: LD_EXP 68
77249: PUSH
77250: LD_VAR 0 4
77254: ARRAY
77255: IN
77256: PUSH
77257: LD_VAR 0 1
77261: PUSH
77262: LD_EXP 69
77266: PUSH
77267: LD_VAR 0 4
77271: ARRAY
77272: IN
77273: NOT
77274: AND
77275: IFFALSE 77323
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
77277: LD_ADDR_EXP 69
77281: PUSH
77282: LD_EXP 69
77286: PPUSH
77287: LD_VAR 0 4
77291: PUSH
77292: LD_EXP 69
77296: PUSH
77297: LD_VAR 0 4
77301: ARRAY
77302: PUSH
77303: LD_INT 1
77305: PLUS
77306: PUSH
77307: EMPTY
77308: LIST
77309: LIST
77310: PPUSH
77311: LD_VAR 0 1
77315: PPUSH
77316: CALL 16128 0 3
77320: ST_TO_ADDR
// break ;
77321: GO 77325
// end ; end ;
77323: GO 77237
77325: POP
77326: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
77327: LD_VAR 0 1
77331: PPUSH
77332: CALL_OW 257
77336: PUSH
77337: LD_EXP 86
77341: IN
77342: PUSH
77343: LD_VAR 0 1
77347: PPUSH
77348: CALL_OW 266
77352: PUSH
77353: LD_INT 5
77355: EQUAL
77356: AND
77357: PUSH
77358: LD_VAR 0 2
77362: PPUSH
77363: CALL_OW 110
77367: PUSH
77368: LD_INT 18
77370: NONEQUAL
77371: AND
77372: IFFALSE 77412
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
77374: LD_VAR 0 2
77378: PPUSH
77379: CALL_OW 257
77383: PUSH
77384: LD_INT 5
77386: PUSH
77387: LD_INT 8
77389: PUSH
77390: LD_INT 9
77392: PUSH
77393: EMPTY
77394: LIST
77395: LIST
77396: LIST
77397: IN
77398: IFFALSE 77412
// SetClass ( unit , 1 ) ;
77400: LD_VAR 0 2
77404: PPUSH
77405: LD_INT 1
77407: PPUSH
77408: CALL_OW 336
// end ;
77412: LD_VAR 0 3
77416: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
77417: LD_INT 0
77419: PPUSH
77420: PPUSH
// if not mc_bases or not skirmish then
77421: LD_EXP 60
77425: NOT
77426: PUSH
77427: LD_EXP 58
77431: NOT
77432: OR
77433: IFFALSE 77437
// exit ;
77435: GO 77553
// if GetLives ( abandoned_vehicle ) > 250 then
77437: LD_VAR 0 2
77441: PPUSH
77442: CALL_OW 256
77446: PUSH
77447: LD_INT 250
77449: GREATER
77450: IFFALSE 77454
// exit ;
77452: GO 77553
// for i = 1 to mc_bases do
77454: LD_ADDR_VAR 0 6
77458: PUSH
77459: DOUBLE
77460: LD_INT 1
77462: DEC
77463: ST_TO_ADDR
77464: LD_EXP 60
77468: PUSH
77469: FOR_TO
77470: IFFALSE 77551
// begin if driver in mc_bases [ i ] then
77472: LD_VAR 0 1
77476: PUSH
77477: LD_EXP 60
77481: PUSH
77482: LD_VAR 0 6
77486: ARRAY
77487: IN
77488: IFFALSE 77549
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
77490: LD_VAR 0 1
77494: PPUSH
77495: LD_EXP 60
77499: PUSH
77500: LD_VAR 0 6
77504: ARRAY
77505: PPUSH
77506: LD_INT 2
77508: PUSH
77509: LD_INT 30
77511: PUSH
77512: LD_INT 0
77514: PUSH
77515: EMPTY
77516: LIST
77517: LIST
77518: PUSH
77519: LD_INT 30
77521: PUSH
77522: LD_INT 1
77524: PUSH
77525: EMPTY
77526: LIST
77527: LIST
77528: PUSH
77529: EMPTY
77530: LIST
77531: LIST
77532: LIST
77533: PPUSH
77534: CALL_OW 72
77538: PUSH
77539: LD_INT 1
77541: ARRAY
77542: PPUSH
77543: CALL_OW 112
// break ;
77547: GO 77551
// end ; end ;
77549: GO 77469
77551: POP
77552: POP
// end ; end_of_file end_of_file
77553: LD_VAR 0 5
77557: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
77558: GO 77560
77560: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
77561: LD_STRING initStreamRollete();
77563: PPUSH
77564: CALL_OW 559
// InitStreamMode ;
77568: CALL 77577 0 0
// DefineStreamItems ( ) ;
77572: CALL 78017 0 0
// end ;
77576: END
// function InitStreamMode ; begin
77577: LD_INT 0
77579: PPUSH
// streamModeActive := false ;
77580: LD_ADDR_EXP 103
77584: PUSH
77585: LD_INT 0
77587: ST_TO_ADDR
// normalCounter := 36 ;
77588: LD_ADDR_EXP 104
77592: PUSH
77593: LD_INT 36
77595: ST_TO_ADDR
// hardcoreCounter := 16 ;
77596: LD_ADDR_EXP 105
77600: PUSH
77601: LD_INT 16
77603: ST_TO_ADDR
// sRocket := false ;
77604: LD_ADDR_EXP 108
77608: PUSH
77609: LD_INT 0
77611: ST_TO_ADDR
// sSpeed := false ;
77612: LD_ADDR_EXP 107
77616: PUSH
77617: LD_INT 0
77619: ST_TO_ADDR
// sEngine := false ;
77620: LD_ADDR_EXP 109
77624: PUSH
77625: LD_INT 0
77627: ST_TO_ADDR
// sSpec := false ;
77628: LD_ADDR_EXP 106
77632: PUSH
77633: LD_INT 0
77635: ST_TO_ADDR
// sLevel := false ;
77636: LD_ADDR_EXP 110
77640: PUSH
77641: LD_INT 0
77643: ST_TO_ADDR
// sArmoury := false ;
77644: LD_ADDR_EXP 111
77648: PUSH
77649: LD_INT 0
77651: ST_TO_ADDR
// sRadar := false ;
77652: LD_ADDR_EXP 112
77656: PUSH
77657: LD_INT 0
77659: ST_TO_ADDR
// sBunker := false ;
77660: LD_ADDR_EXP 113
77664: PUSH
77665: LD_INT 0
77667: ST_TO_ADDR
// sHack := false ;
77668: LD_ADDR_EXP 114
77672: PUSH
77673: LD_INT 0
77675: ST_TO_ADDR
// sFire := false ;
77676: LD_ADDR_EXP 115
77680: PUSH
77681: LD_INT 0
77683: ST_TO_ADDR
// sRefresh := false ;
77684: LD_ADDR_EXP 116
77688: PUSH
77689: LD_INT 0
77691: ST_TO_ADDR
// sExp := false ;
77692: LD_ADDR_EXP 117
77696: PUSH
77697: LD_INT 0
77699: ST_TO_ADDR
// sDepot := false ;
77700: LD_ADDR_EXP 118
77704: PUSH
77705: LD_INT 0
77707: ST_TO_ADDR
// sFlag := false ;
77708: LD_ADDR_EXP 119
77712: PUSH
77713: LD_INT 0
77715: ST_TO_ADDR
// sKamikadze := false ;
77716: LD_ADDR_EXP 127
77720: PUSH
77721: LD_INT 0
77723: ST_TO_ADDR
// sTroll := false ;
77724: LD_ADDR_EXP 128
77728: PUSH
77729: LD_INT 0
77731: ST_TO_ADDR
// sSlow := false ;
77732: LD_ADDR_EXP 129
77736: PUSH
77737: LD_INT 0
77739: ST_TO_ADDR
// sLack := false ;
77740: LD_ADDR_EXP 130
77744: PUSH
77745: LD_INT 0
77747: ST_TO_ADDR
// sTank := false ;
77748: LD_ADDR_EXP 132
77752: PUSH
77753: LD_INT 0
77755: ST_TO_ADDR
// sRemote := false ;
77756: LD_ADDR_EXP 133
77760: PUSH
77761: LD_INT 0
77763: ST_TO_ADDR
// sPowell := false ;
77764: LD_ADDR_EXP 134
77768: PUSH
77769: LD_INT 0
77771: ST_TO_ADDR
// sTeleport := false ;
77772: LD_ADDR_EXP 137
77776: PUSH
77777: LD_INT 0
77779: ST_TO_ADDR
// sOilTower := false ;
77780: LD_ADDR_EXP 139
77784: PUSH
77785: LD_INT 0
77787: ST_TO_ADDR
// sShovel := false ;
77788: LD_ADDR_EXP 140
77792: PUSH
77793: LD_INT 0
77795: ST_TO_ADDR
// sSheik := false ;
77796: LD_ADDR_EXP 141
77800: PUSH
77801: LD_INT 0
77803: ST_TO_ADDR
// sEarthquake := false ;
77804: LD_ADDR_EXP 143
77808: PUSH
77809: LD_INT 0
77811: ST_TO_ADDR
// sAI := false ;
77812: LD_ADDR_EXP 144
77816: PUSH
77817: LD_INT 0
77819: ST_TO_ADDR
// sCargo := false ;
77820: LD_ADDR_EXP 147
77824: PUSH
77825: LD_INT 0
77827: ST_TO_ADDR
// sDLaser := false ;
77828: LD_ADDR_EXP 148
77832: PUSH
77833: LD_INT 0
77835: ST_TO_ADDR
// sExchange := false ;
77836: LD_ADDR_EXP 149
77840: PUSH
77841: LD_INT 0
77843: ST_TO_ADDR
// sFac := false ;
77844: LD_ADDR_EXP 150
77848: PUSH
77849: LD_INT 0
77851: ST_TO_ADDR
// sPower := false ;
77852: LD_ADDR_EXP 151
77856: PUSH
77857: LD_INT 0
77859: ST_TO_ADDR
// sRandom := false ;
77860: LD_ADDR_EXP 152
77864: PUSH
77865: LD_INT 0
77867: ST_TO_ADDR
// sShield := false ;
77868: LD_ADDR_EXP 153
77872: PUSH
77873: LD_INT 0
77875: ST_TO_ADDR
// sTime := false ;
77876: LD_ADDR_EXP 154
77880: PUSH
77881: LD_INT 0
77883: ST_TO_ADDR
// sTools := false ;
77884: LD_ADDR_EXP 155
77888: PUSH
77889: LD_INT 0
77891: ST_TO_ADDR
// sSold := false ;
77892: LD_ADDR_EXP 120
77896: PUSH
77897: LD_INT 0
77899: ST_TO_ADDR
// sDiff := false ;
77900: LD_ADDR_EXP 121
77904: PUSH
77905: LD_INT 0
77907: ST_TO_ADDR
// sFog := false ;
77908: LD_ADDR_EXP 124
77912: PUSH
77913: LD_INT 0
77915: ST_TO_ADDR
// sReset := false ;
77916: LD_ADDR_EXP 125
77920: PUSH
77921: LD_INT 0
77923: ST_TO_ADDR
// sSun := false ;
77924: LD_ADDR_EXP 126
77928: PUSH
77929: LD_INT 0
77931: ST_TO_ADDR
// sTiger := false ;
77932: LD_ADDR_EXP 122
77936: PUSH
77937: LD_INT 0
77939: ST_TO_ADDR
// sBomb := false ;
77940: LD_ADDR_EXP 123
77944: PUSH
77945: LD_INT 0
77947: ST_TO_ADDR
// sWound := false ;
77948: LD_ADDR_EXP 131
77952: PUSH
77953: LD_INT 0
77955: ST_TO_ADDR
// sBetray := false ;
77956: LD_ADDR_EXP 135
77960: PUSH
77961: LD_INT 0
77963: ST_TO_ADDR
// sContamin := false ;
77964: LD_ADDR_EXP 136
77968: PUSH
77969: LD_INT 0
77971: ST_TO_ADDR
// sOil := false ;
77972: LD_ADDR_EXP 138
77976: PUSH
77977: LD_INT 0
77979: ST_TO_ADDR
// sStu := false ;
77980: LD_ADDR_EXP 142
77984: PUSH
77985: LD_INT 0
77987: ST_TO_ADDR
// sBazooka := false ;
77988: LD_ADDR_EXP 145
77992: PUSH
77993: LD_INT 0
77995: ST_TO_ADDR
// sMortar := false ;
77996: LD_ADDR_EXP 146
78000: PUSH
78001: LD_INT 0
78003: ST_TO_ADDR
// sRanger := false ;
78004: LD_ADDR_EXP 156
78008: PUSH
78009: LD_INT 0
78011: ST_TO_ADDR
// end ;
78012: LD_VAR 0 1
78016: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
78017: LD_INT 0
78019: PPUSH
78020: PPUSH
78021: PPUSH
78022: PPUSH
78023: PPUSH
// result := [ ] ;
78024: LD_ADDR_VAR 0 1
78028: PUSH
78029: EMPTY
78030: ST_TO_ADDR
// if campaign_id = 1 then
78031: LD_OWVAR 69
78035: PUSH
78036: LD_INT 1
78038: EQUAL
78039: IFFALSE 80977
// begin case mission_number of 1 :
78041: LD_OWVAR 70
78045: PUSH
78046: LD_INT 1
78048: DOUBLE
78049: EQUAL
78050: IFTRUE 78054
78052: GO 78118
78054: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
78055: LD_ADDR_VAR 0 1
78059: PUSH
78060: LD_INT 2
78062: PUSH
78063: LD_INT 4
78065: PUSH
78066: LD_INT 11
78068: PUSH
78069: LD_INT 12
78071: PUSH
78072: LD_INT 15
78074: PUSH
78075: LD_INT 16
78077: PUSH
78078: LD_INT 22
78080: PUSH
78081: LD_INT 23
78083: PUSH
78084: LD_INT 26
78086: PUSH
78087: EMPTY
78088: LIST
78089: LIST
78090: LIST
78091: LIST
78092: LIST
78093: LIST
78094: LIST
78095: LIST
78096: LIST
78097: PUSH
78098: LD_INT 101
78100: PUSH
78101: LD_INT 102
78103: PUSH
78104: LD_INT 106
78106: PUSH
78107: EMPTY
78108: LIST
78109: LIST
78110: LIST
78111: PUSH
78112: EMPTY
78113: LIST
78114: LIST
78115: ST_TO_ADDR
78116: GO 80975
78118: LD_INT 2
78120: DOUBLE
78121: EQUAL
78122: IFTRUE 78126
78124: GO 78198
78126: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
78127: LD_ADDR_VAR 0 1
78131: PUSH
78132: LD_INT 2
78134: PUSH
78135: LD_INT 4
78137: PUSH
78138: LD_INT 11
78140: PUSH
78141: LD_INT 12
78143: PUSH
78144: LD_INT 15
78146: PUSH
78147: LD_INT 16
78149: PUSH
78150: LD_INT 22
78152: PUSH
78153: LD_INT 23
78155: PUSH
78156: LD_INT 26
78158: PUSH
78159: EMPTY
78160: LIST
78161: LIST
78162: LIST
78163: LIST
78164: LIST
78165: LIST
78166: LIST
78167: LIST
78168: LIST
78169: PUSH
78170: LD_INT 101
78172: PUSH
78173: LD_INT 102
78175: PUSH
78176: LD_INT 105
78178: PUSH
78179: LD_INT 106
78181: PUSH
78182: LD_INT 108
78184: PUSH
78185: EMPTY
78186: LIST
78187: LIST
78188: LIST
78189: LIST
78190: LIST
78191: PUSH
78192: EMPTY
78193: LIST
78194: LIST
78195: ST_TO_ADDR
78196: GO 80975
78198: LD_INT 3
78200: DOUBLE
78201: EQUAL
78202: IFTRUE 78206
78204: GO 78282
78206: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
78207: LD_ADDR_VAR 0 1
78211: PUSH
78212: LD_INT 2
78214: PUSH
78215: LD_INT 4
78217: PUSH
78218: LD_INT 5
78220: PUSH
78221: LD_INT 11
78223: PUSH
78224: LD_INT 12
78226: PUSH
78227: LD_INT 15
78229: PUSH
78230: LD_INT 16
78232: PUSH
78233: LD_INT 22
78235: PUSH
78236: LD_INT 26
78238: PUSH
78239: LD_INT 36
78241: PUSH
78242: EMPTY
78243: LIST
78244: LIST
78245: LIST
78246: LIST
78247: LIST
78248: LIST
78249: LIST
78250: LIST
78251: LIST
78252: LIST
78253: PUSH
78254: LD_INT 101
78256: PUSH
78257: LD_INT 102
78259: PUSH
78260: LD_INT 105
78262: PUSH
78263: LD_INT 106
78265: PUSH
78266: LD_INT 108
78268: PUSH
78269: EMPTY
78270: LIST
78271: LIST
78272: LIST
78273: LIST
78274: LIST
78275: PUSH
78276: EMPTY
78277: LIST
78278: LIST
78279: ST_TO_ADDR
78280: GO 80975
78282: LD_INT 4
78284: DOUBLE
78285: EQUAL
78286: IFTRUE 78290
78288: GO 78374
78290: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
78291: LD_ADDR_VAR 0 1
78295: PUSH
78296: LD_INT 2
78298: PUSH
78299: LD_INT 4
78301: PUSH
78302: LD_INT 5
78304: PUSH
78305: LD_INT 8
78307: PUSH
78308: LD_INT 11
78310: PUSH
78311: LD_INT 12
78313: PUSH
78314: LD_INT 15
78316: PUSH
78317: LD_INT 16
78319: PUSH
78320: LD_INT 22
78322: PUSH
78323: LD_INT 23
78325: PUSH
78326: LD_INT 26
78328: PUSH
78329: LD_INT 36
78331: PUSH
78332: EMPTY
78333: LIST
78334: LIST
78335: LIST
78336: LIST
78337: LIST
78338: LIST
78339: LIST
78340: LIST
78341: LIST
78342: LIST
78343: LIST
78344: LIST
78345: PUSH
78346: LD_INT 101
78348: PUSH
78349: LD_INT 102
78351: PUSH
78352: LD_INT 105
78354: PUSH
78355: LD_INT 106
78357: PUSH
78358: LD_INT 108
78360: PUSH
78361: EMPTY
78362: LIST
78363: LIST
78364: LIST
78365: LIST
78366: LIST
78367: PUSH
78368: EMPTY
78369: LIST
78370: LIST
78371: ST_TO_ADDR
78372: GO 80975
78374: LD_INT 5
78376: DOUBLE
78377: EQUAL
78378: IFTRUE 78382
78380: GO 78482
78382: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
78383: LD_ADDR_VAR 0 1
78387: PUSH
78388: LD_INT 2
78390: PUSH
78391: LD_INT 4
78393: PUSH
78394: LD_INT 5
78396: PUSH
78397: LD_INT 6
78399: PUSH
78400: LD_INT 8
78402: PUSH
78403: LD_INT 11
78405: PUSH
78406: LD_INT 12
78408: PUSH
78409: LD_INT 15
78411: PUSH
78412: LD_INT 16
78414: PUSH
78415: LD_INT 22
78417: PUSH
78418: LD_INT 23
78420: PUSH
78421: LD_INT 25
78423: PUSH
78424: LD_INT 26
78426: PUSH
78427: LD_INT 36
78429: PUSH
78430: EMPTY
78431: LIST
78432: LIST
78433: LIST
78434: LIST
78435: LIST
78436: LIST
78437: LIST
78438: LIST
78439: LIST
78440: LIST
78441: LIST
78442: LIST
78443: LIST
78444: LIST
78445: PUSH
78446: LD_INT 101
78448: PUSH
78449: LD_INT 102
78451: PUSH
78452: LD_INT 105
78454: PUSH
78455: LD_INT 106
78457: PUSH
78458: LD_INT 108
78460: PUSH
78461: LD_INT 109
78463: PUSH
78464: LD_INT 112
78466: PUSH
78467: EMPTY
78468: LIST
78469: LIST
78470: LIST
78471: LIST
78472: LIST
78473: LIST
78474: LIST
78475: PUSH
78476: EMPTY
78477: LIST
78478: LIST
78479: ST_TO_ADDR
78480: GO 80975
78482: LD_INT 6
78484: DOUBLE
78485: EQUAL
78486: IFTRUE 78490
78488: GO 78610
78490: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
78491: LD_ADDR_VAR 0 1
78495: PUSH
78496: LD_INT 2
78498: PUSH
78499: LD_INT 4
78501: PUSH
78502: LD_INT 5
78504: PUSH
78505: LD_INT 6
78507: PUSH
78508: LD_INT 8
78510: PUSH
78511: LD_INT 11
78513: PUSH
78514: LD_INT 12
78516: PUSH
78517: LD_INT 15
78519: PUSH
78520: LD_INT 16
78522: PUSH
78523: LD_INT 20
78525: PUSH
78526: LD_INT 21
78528: PUSH
78529: LD_INT 22
78531: PUSH
78532: LD_INT 23
78534: PUSH
78535: LD_INT 25
78537: PUSH
78538: LD_INT 26
78540: PUSH
78541: LD_INT 30
78543: PUSH
78544: LD_INT 31
78546: PUSH
78547: LD_INT 32
78549: PUSH
78550: LD_INT 36
78552: PUSH
78553: EMPTY
78554: LIST
78555: LIST
78556: LIST
78557: LIST
78558: LIST
78559: LIST
78560: LIST
78561: LIST
78562: LIST
78563: LIST
78564: LIST
78565: LIST
78566: LIST
78567: LIST
78568: LIST
78569: LIST
78570: LIST
78571: LIST
78572: LIST
78573: PUSH
78574: LD_INT 101
78576: PUSH
78577: LD_INT 102
78579: PUSH
78580: LD_INT 105
78582: PUSH
78583: LD_INT 106
78585: PUSH
78586: LD_INT 108
78588: PUSH
78589: LD_INT 109
78591: PUSH
78592: LD_INT 112
78594: PUSH
78595: EMPTY
78596: LIST
78597: LIST
78598: LIST
78599: LIST
78600: LIST
78601: LIST
78602: LIST
78603: PUSH
78604: EMPTY
78605: LIST
78606: LIST
78607: ST_TO_ADDR
78608: GO 80975
78610: LD_INT 7
78612: DOUBLE
78613: EQUAL
78614: IFTRUE 78618
78616: GO 78718
78618: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
78619: LD_ADDR_VAR 0 1
78623: PUSH
78624: LD_INT 2
78626: PUSH
78627: LD_INT 4
78629: PUSH
78630: LD_INT 5
78632: PUSH
78633: LD_INT 7
78635: PUSH
78636: LD_INT 11
78638: PUSH
78639: LD_INT 12
78641: PUSH
78642: LD_INT 15
78644: PUSH
78645: LD_INT 16
78647: PUSH
78648: LD_INT 20
78650: PUSH
78651: LD_INT 21
78653: PUSH
78654: LD_INT 22
78656: PUSH
78657: LD_INT 23
78659: PUSH
78660: LD_INT 25
78662: PUSH
78663: LD_INT 26
78665: PUSH
78666: EMPTY
78667: LIST
78668: LIST
78669: LIST
78670: LIST
78671: LIST
78672: LIST
78673: LIST
78674: LIST
78675: LIST
78676: LIST
78677: LIST
78678: LIST
78679: LIST
78680: LIST
78681: PUSH
78682: LD_INT 101
78684: PUSH
78685: LD_INT 102
78687: PUSH
78688: LD_INT 103
78690: PUSH
78691: LD_INT 105
78693: PUSH
78694: LD_INT 106
78696: PUSH
78697: LD_INT 108
78699: PUSH
78700: LD_INT 112
78702: PUSH
78703: EMPTY
78704: LIST
78705: LIST
78706: LIST
78707: LIST
78708: LIST
78709: LIST
78710: LIST
78711: PUSH
78712: EMPTY
78713: LIST
78714: LIST
78715: ST_TO_ADDR
78716: GO 80975
78718: LD_INT 8
78720: DOUBLE
78721: EQUAL
78722: IFTRUE 78726
78724: GO 78854
78726: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
78727: LD_ADDR_VAR 0 1
78731: PUSH
78732: LD_INT 2
78734: PUSH
78735: LD_INT 4
78737: PUSH
78738: LD_INT 5
78740: PUSH
78741: LD_INT 6
78743: PUSH
78744: LD_INT 7
78746: PUSH
78747: LD_INT 8
78749: PUSH
78750: LD_INT 11
78752: PUSH
78753: LD_INT 12
78755: PUSH
78756: LD_INT 15
78758: PUSH
78759: LD_INT 16
78761: PUSH
78762: LD_INT 20
78764: PUSH
78765: LD_INT 21
78767: PUSH
78768: LD_INT 22
78770: PUSH
78771: LD_INT 23
78773: PUSH
78774: LD_INT 25
78776: PUSH
78777: LD_INT 26
78779: PUSH
78780: LD_INT 30
78782: PUSH
78783: LD_INT 31
78785: PUSH
78786: LD_INT 32
78788: PUSH
78789: LD_INT 36
78791: PUSH
78792: EMPTY
78793: LIST
78794: LIST
78795: LIST
78796: LIST
78797: LIST
78798: LIST
78799: LIST
78800: LIST
78801: LIST
78802: LIST
78803: LIST
78804: LIST
78805: LIST
78806: LIST
78807: LIST
78808: LIST
78809: LIST
78810: LIST
78811: LIST
78812: LIST
78813: PUSH
78814: LD_INT 101
78816: PUSH
78817: LD_INT 102
78819: PUSH
78820: LD_INT 103
78822: PUSH
78823: LD_INT 105
78825: PUSH
78826: LD_INT 106
78828: PUSH
78829: LD_INT 108
78831: PUSH
78832: LD_INT 109
78834: PUSH
78835: LD_INT 112
78837: PUSH
78838: EMPTY
78839: LIST
78840: LIST
78841: LIST
78842: LIST
78843: LIST
78844: LIST
78845: LIST
78846: LIST
78847: PUSH
78848: EMPTY
78849: LIST
78850: LIST
78851: ST_TO_ADDR
78852: GO 80975
78854: LD_INT 9
78856: DOUBLE
78857: EQUAL
78858: IFTRUE 78862
78860: GO 78998
78862: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
78863: LD_ADDR_VAR 0 1
78867: PUSH
78868: LD_INT 2
78870: PUSH
78871: LD_INT 4
78873: PUSH
78874: LD_INT 5
78876: PUSH
78877: LD_INT 6
78879: PUSH
78880: LD_INT 7
78882: PUSH
78883: LD_INT 8
78885: PUSH
78886: LD_INT 11
78888: PUSH
78889: LD_INT 12
78891: PUSH
78892: LD_INT 15
78894: PUSH
78895: LD_INT 16
78897: PUSH
78898: LD_INT 20
78900: PUSH
78901: LD_INT 21
78903: PUSH
78904: LD_INT 22
78906: PUSH
78907: LD_INT 23
78909: PUSH
78910: LD_INT 25
78912: PUSH
78913: LD_INT 26
78915: PUSH
78916: LD_INT 28
78918: PUSH
78919: LD_INT 30
78921: PUSH
78922: LD_INT 31
78924: PUSH
78925: LD_INT 32
78927: PUSH
78928: LD_INT 36
78930: PUSH
78931: EMPTY
78932: LIST
78933: LIST
78934: LIST
78935: LIST
78936: LIST
78937: LIST
78938: LIST
78939: LIST
78940: LIST
78941: LIST
78942: LIST
78943: LIST
78944: LIST
78945: LIST
78946: LIST
78947: LIST
78948: LIST
78949: LIST
78950: LIST
78951: LIST
78952: LIST
78953: PUSH
78954: LD_INT 101
78956: PUSH
78957: LD_INT 102
78959: PUSH
78960: LD_INT 103
78962: PUSH
78963: LD_INT 105
78965: PUSH
78966: LD_INT 106
78968: PUSH
78969: LD_INT 108
78971: PUSH
78972: LD_INT 109
78974: PUSH
78975: LD_INT 112
78977: PUSH
78978: LD_INT 114
78980: PUSH
78981: EMPTY
78982: LIST
78983: LIST
78984: LIST
78985: LIST
78986: LIST
78987: LIST
78988: LIST
78989: LIST
78990: LIST
78991: PUSH
78992: EMPTY
78993: LIST
78994: LIST
78995: ST_TO_ADDR
78996: GO 80975
78998: LD_INT 10
79000: DOUBLE
79001: EQUAL
79002: IFTRUE 79006
79004: GO 79190
79006: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
79007: LD_ADDR_VAR 0 1
79011: PUSH
79012: LD_INT 2
79014: PUSH
79015: LD_INT 4
79017: PUSH
79018: LD_INT 5
79020: PUSH
79021: LD_INT 6
79023: PUSH
79024: LD_INT 7
79026: PUSH
79027: LD_INT 8
79029: PUSH
79030: LD_INT 9
79032: PUSH
79033: LD_INT 10
79035: PUSH
79036: LD_INT 11
79038: PUSH
79039: LD_INT 12
79041: PUSH
79042: LD_INT 13
79044: PUSH
79045: LD_INT 14
79047: PUSH
79048: LD_INT 15
79050: PUSH
79051: LD_INT 16
79053: PUSH
79054: LD_INT 17
79056: PUSH
79057: LD_INT 18
79059: PUSH
79060: LD_INT 19
79062: PUSH
79063: LD_INT 20
79065: PUSH
79066: LD_INT 21
79068: PUSH
79069: LD_INT 22
79071: PUSH
79072: LD_INT 23
79074: PUSH
79075: LD_INT 24
79077: PUSH
79078: LD_INT 25
79080: PUSH
79081: LD_INT 26
79083: PUSH
79084: LD_INT 28
79086: PUSH
79087: LD_INT 30
79089: PUSH
79090: LD_INT 31
79092: PUSH
79093: LD_INT 32
79095: PUSH
79096: LD_INT 36
79098: PUSH
79099: EMPTY
79100: LIST
79101: LIST
79102: LIST
79103: LIST
79104: LIST
79105: LIST
79106: LIST
79107: LIST
79108: LIST
79109: LIST
79110: LIST
79111: LIST
79112: LIST
79113: LIST
79114: LIST
79115: LIST
79116: LIST
79117: LIST
79118: LIST
79119: LIST
79120: LIST
79121: LIST
79122: LIST
79123: LIST
79124: LIST
79125: LIST
79126: LIST
79127: LIST
79128: LIST
79129: PUSH
79130: LD_INT 101
79132: PUSH
79133: LD_INT 102
79135: PUSH
79136: LD_INT 103
79138: PUSH
79139: LD_INT 104
79141: PUSH
79142: LD_INT 105
79144: PUSH
79145: LD_INT 106
79147: PUSH
79148: LD_INT 107
79150: PUSH
79151: LD_INT 108
79153: PUSH
79154: LD_INT 109
79156: PUSH
79157: LD_INT 110
79159: PUSH
79160: LD_INT 111
79162: PUSH
79163: LD_INT 112
79165: PUSH
79166: LD_INT 114
79168: PUSH
79169: EMPTY
79170: LIST
79171: LIST
79172: LIST
79173: LIST
79174: LIST
79175: LIST
79176: LIST
79177: LIST
79178: LIST
79179: LIST
79180: LIST
79181: LIST
79182: LIST
79183: PUSH
79184: EMPTY
79185: LIST
79186: LIST
79187: ST_TO_ADDR
79188: GO 80975
79190: LD_INT 11
79192: DOUBLE
79193: EQUAL
79194: IFTRUE 79198
79196: GO 79390
79198: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
79199: LD_ADDR_VAR 0 1
79203: PUSH
79204: LD_INT 2
79206: PUSH
79207: LD_INT 3
79209: PUSH
79210: LD_INT 4
79212: PUSH
79213: LD_INT 5
79215: PUSH
79216: LD_INT 6
79218: PUSH
79219: LD_INT 7
79221: PUSH
79222: LD_INT 8
79224: PUSH
79225: LD_INT 9
79227: PUSH
79228: LD_INT 10
79230: PUSH
79231: LD_INT 11
79233: PUSH
79234: LD_INT 12
79236: PUSH
79237: LD_INT 13
79239: PUSH
79240: LD_INT 14
79242: PUSH
79243: LD_INT 15
79245: PUSH
79246: LD_INT 16
79248: PUSH
79249: LD_INT 17
79251: PUSH
79252: LD_INT 18
79254: PUSH
79255: LD_INT 19
79257: PUSH
79258: LD_INT 20
79260: PUSH
79261: LD_INT 21
79263: PUSH
79264: LD_INT 22
79266: PUSH
79267: LD_INT 23
79269: PUSH
79270: LD_INT 24
79272: PUSH
79273: LD_INT 25
79275: PUSH
79276: LD_INT 26
79278: PUSH
79279: LD_INT 28
79281: PUSH
79282: LD_INT 30
79284: PUSH
79285: LD_INT 31
79287: PUSH
79288: LD_INT 32
79290: PUSH
79291: LD_INT 34
79293: PUSH
79294: LD_INT 36
79296: PUSH
79297: EMPTY
79298: LIST
79299: LIST
79300: LIST
79301: LIST
79302: LIST
79303: LIST
79304: LIST
79305: LIST
79306: LIST
79307: LIST
79308: LIST
79309: LIST
79310: LIST
79311: LIST
79312: LIST
79313: LIST
79314: LIST
79315: LIST
79316: LIST
79317: LIST
79318: LIST
79319: LIST
79320: LIST
79321: LIST
79322: LIST
79323: LIST
79324: LIST
79325: LIST
79326: LIST
79327: LIST
79328: LIST
79329: PUSH
79330: LD_INT 101
79332: PUSH
79333: LD_INT 102
79335: PUSH
79336: LD_INT 103
79338: PUSH
79339: LD_INT 104
79341: PUSH
79342: LD_INT 105
79344: PUSH
79345: LD_INT 106
79347: PUSH
79348: LD_INT 107
79350: PUSH
79351: LD_INT 108
79353: PUSH
79354: LD_INT 109
79356: PUSH
79357: LD_INT 110
79359: PUSH
79360: LD_INT 111
79362: PUSH
79363: LD_INT 112
79365: PUSH
79366: LD_INT 114
79368: PUSH
79369: EMPTY
79370: LIST
79371: LIST
79372: LIST
79373: LIST
79374: LIST
79375: LIST
79376: LIST
79377: LIST
79378: LIST
79379: LIST
79380: LIST
79381: LIST
79382: LIST
79383: PUSH
79384: EMPTY
79385: LIST
79386: LIST
79387: ST_TO_ADDR
79388: GO 80975
79390: LD_INT 12
79392: DOUBLE
79393: EQUAL
79394: IFTRUE 79398
79396: GO 79606
79398: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
79399: LD_ADDR_VAR 0 1
79403: PUSH
79404: LD_INT 1
79406: PUSH
79407: LD_INT 2
79409: PUSH
79410: LD_INT 3
79412: PUSH
79413: LD_INT 4
79415: PUSH
79416: LD_INT 5
79418: PUSH
79419: LD_INT 6
79421: PUSH
79422: LD_INT 7
79424: PUSH
79425: LD_INT 8
79427: PUSH
79428: LD_INT 9
79430: PUSH
79431: LD_INT 10
79433: PUSH
79434: LD_INT 11
79436: PUSH
79437: LD_INT 12
79439: PUSH
79440: LD_INT 13
79442: PUSH
79443: LD_INT 14
79445: PUSH
79446: LD_INT 15
79448: PUSH
79449: LD_INT 16
79451: PUSH
79452: LD_INT 17
79454: PUSH
79455: LD_INT 18
79457: PUSH
79458: LD_INT 19
79460: PUSH
79461: LD_INT 20
79463: PUSH
79464: LD_INT 21
79466: PUSH
79467: LD_INT 22
79469: PUSH
79470: LD_INT 23
79472: PUSH
79473: LD_INT 24
79475: PUSH
79476: LD_INT 25
79478: PUSH
79479: LD_INT 26
79481: PUSH
79482: LD_INT 27
79484: PUSH
79485: LD_INT 28
79487: PUSH
79488: LD_INT 30
79490: PUSH
79491: LD_INT 31
79493: PUSH
79494: LD_INT 32
79496: PUSH
79497: LD_INT 33
79499: PUSH
79500: LD_INT 34
79502: PUSH
79503: LD_INT 36
79505: PUSH
79506: EMPTY
79507: LIST
79508: LIST
79509: LIST
79510: LIST
79511: LIST
79512: LIST
79513: LIST
79514: LIST
79515: LIST
79516: LIST
79517: LIST
79518: LIST
79519: LIST
79520: LIST
79521: LIST
79522: LIST
79523: LIST
79524: LIST
79525: LIST
79526: LIST
79527: LIST
79528: LIST
79529: LIST
79530: LIST
79531: LIST
79532: LIST
79533: LIST
79534: LIST
79535: LIST
79536: LIST
79537: LIST
79538: LIST
79539: LIST
79540: LIST
79541: PUSH
79542: LD_INT 101
79544: PUSH
79545: LD_INT 102
79547: PUSH
79548: LD_INT 103
79550: PUSH
79551: LD_INT 104
79553: PUSH
79554: LD_INT 105
79556: PUSH
79557: LD_INT 106
79559: PUSH
79560: LD_INT 107
79562: PUSH
79563: LD_INT 108
79565: PUSH
79566: LD_INT 109
79568: PUSH
79569: LD_INT 110
79571: PUSH
79572: LD_INT 111
79574: PUSH
79575: LD_INT 112
79577: PUSH
79578: LD_INT 113
79580: PUSH
79581: LD_INT 114
79583: PUSH
79584: EMPTY
79585: LIST
79586: LIST
79587: LIST
79588: LIST
79589: LIST
79590: LIST
79591: LIST
79592: LIST
79593: LIST
79594: LIST
79595: LIST
79596: LIST
79597: LIST
79598: LIST
79599: PUSH
79600: EMPTY
79601: LIST
79602: LIST
79603: ST_TO_ADDR
79604: GO 80975
79606: LD_INT 13
79608: DOUBLE
79609: EQUAL
79610: IFTRUE 79614
79612: GO 79810
79614: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
79615: LD_ADDR_VAR 0 1
79619: PUSH
79620: LD_INT 1
79622: PUSH
79623: LD_INT 2
79625: PUSH
79626: LD_INT 3
79628: PUSH
79629: LD_INT 4
79631: PUSH
79632: LD_INT 5
79634: PUSH
79635: LD_INT 8
79637: PUSH
79638: LD_INT 9
79640: PUSH
79641: LD_INT 10
79643: PUSH
79644: LD_INT 11
79646: PUSH
79647: LD_INT 12
79649: PUSH
79650: LD_INT 14
79652: PUSH
79653: LD_INT 15
79655: PUSH
79656: LD_INT 16
79658: PUSH
79659: LD_INT 17
79661: PUSH
79662: LD_INT 18
79664: PUSH
79665: LD_INT 19
79667: PUSH
79668: LD_INT 20
79670: PUSH
79671: LD_INT 21
79673: PUSH
79674: LD_INT 22
79676: PUSH
79677: LD_INT 23
79679: PUSH
79680: LD_INT 24
79682: PUSH
79683: LD_INT 25
79685: PUSH
79686: LD_INT 26
79688: PUSH
79689: LD_INT 27
79691: PUSH
79692: LD_INT 28
79694: PUSH
79695: LD_INT 30
79697: PUSH
79698: LD_INT 31
79700: PUSH
79701: LD_INT 32
79703: PUSH
79704: LD_INT 33
79706: PUSH
79707: LD_INT 34
79709: PUSH
79710: LD_INT 36
79712: PUSH
79713: EMPTY
79714: LIST
79715: LIST
79716: LIST
79717: LIST
79718: LIST
79719: LIST
79720: LIST
79721: LIST
79722: LIST
79723: LIST
79724: LIST
79725: LIST
79726: LIST
79727: LIST
79728: LIST
79729: LIST
79730: LIST
79731: LIST
79732: LIST
79733: LIST
79734: LIST
79735: LIST
79736: LIST
79737: LIST
79738: LIST
79739: LIST
79740: LIST
79741: LIST
79742: LIST
79743: LIST
79744: LIST
79745: PUSH
79746: LD_INT 101
79748: PUSH
79749: LD_INT 102
79751: PUSH
79752: LD_INT 103
79754: PUSH
79755: LD_INT 104
79757: PUSH
79758: LD_INT 105
79760: PUSH
79761: LD_INT 106
79763: PUSH
79764: LD_INT 107
79766: PUSH
79767: LD_INT 108
79769: PUSH
79770: LD_INT 109
79772: PUSH
79773: LD_INT 110
79775: PUSH
79776: LD_INT 111
79778: PUSH
79779: LD_INT 112
79781: PUSH
79782: LD_INT 113
79784: PUSH
79785: LD_INT 114
79787: PUSH
79788: EMPTY
79789: LIST
79790: LIST
79791: LIST
79792: LIST
79793: LIST
79794: LIST
79795: LIST
79796: LIST
79797: LIST
79798: LIST
79799: LIST
79800: LIST
79801: LIST
79802: LIST
79803: PUSH
79804: EMPTY
79805: LIST
79806: LIST
79807: ST_TO_ADDR
79808: GO 80975
79810: LD_INT 14
79812: DOUBLE
79813: EQUAL
79814: IFTRUE 79818
79816: GO 80030
79818: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
79819: LD_ADDR_VAR 0 1
79823: PUSH
79824: LD_INT 1
79826: PUSH
79827: LD_INT 2
79829: PUSH
79830: LD_INT 3
79832: PUSH
79833: LD_INT 4
79835: PUSH
79836: LD_INT 5
79838: PUSH
79839: LD_INT 6
79841: PUSH
79842: LD_INT 7
79844: PUSH
79845: LD_INT 8
79847: PUSH
79848: LD_INT 9
79850: PUSH
79851: LD_INT 10
79853: PUSH
79854: LD_INT 11
79856: PUSH
79857: LD_INT 12
79859: PUSH
79860: LD_INT 13
79862: PUSH
79863: LD_INT 14
79865: PUSH
79866: LD_INT 15
79868: PUSH
79869: LD_INT 16
79871: PUSH
79872: LD_INT 17
79874: PUSH
79875: LD_INT 18
79877: PUSH
79878: LD_INT 19
79880: PUSH
79881: LD_INT 20
79883: PUSH
79884: LD_INT 21
79886: PUSH
79887: LD_INT 22
79889: PUSH
79890: LD_INT 23
79892: PUSH
79893: LD_INT 24
79895: PUSH
79896: LD_INT 25
79898: PUSH
79899: LD_INT 26
79901: PUSH
79902: LD_INT 27
79904: PUSH
79905: LD_INT 28
79907: PUSH
79908: LD_INT 29
79910: PUSH
79911: LD_INT 30
79913: PUSH
79914: LD_INT 31
79916: PUSH
79917: LD_INT 32
79919: PUSH
79920: LD_INT 33
79922: PUSH
79923: LD_INT 34
79925: PUSH
79926: LD_INT 36
79928: PUSH
79929: EMPTY
79930: LIST
79931: LIST
79932: LIST
79933: LIST
79934: LIST
79935: LIST
79936: LIST
79937: LIST
79938: LIST
79939: LIST
79940: LIST
79941: LIST
79942: LIST
79943: LIST
79944: LIST
79945: LIST
79946: LIST
79947: LIST
79948: LIST
79949: LIST
79950: LIST
79951: LIST
79952: LIST
79953: LIST
79954: LIST
79955: LIST
79956: LIST
79957: LIST
79958: LIST
79959: LIST
79960: LIST
79961: LIST
79962: LIST
79963: LIST
79964: LIST
79965: PUSH
79966: LD_INT 101
79968: PUSH
79969: LD_INT 102
79971: PUSH
79972: LD_INT 103
79974: PUSH
79975: LD_INT 104
79977: PUSH
79978: LD_INT 105
79980: PUSH
79981: LD_INT 106
79983: PUSH
79984: LD_INT 107
79986: PUSH
79987: LD_INT 108
79989: PUSH
79990: LD_INT 109
79992: PUSH
79993: LD_INT 110
79995: PUSH
79996: LD_INT 111
79998: PUSH
79999: LD_INT 112
80001: PUSH
80002: LD_INT 113
80004: PUSH
80005: LD_INT 114
80007: PUSH
80008: EMPTY
80009: LIST
80010: LIST
80011: LIST
80012: LIST
80013: LIST
80014: LIST
80015: LIST
80016: LIST
80017: LIST
80018: LIST
80019: LIST
80020: LIST
80021: LIST
80022: LIST
80023: PUSH
80024: EMPTY
80025: LIST
80026: LIST
80027: ST_TO_ADDR
80028: GO 80975
80030: LD_INT 15
80032: DOUBLE
80033: EQUAL
80034: IFTRUE 80038
80036: GO 80250
80038: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
80039: LD_ADDR_VAR 0 1
80043: PUSH
80044: LD_INT 1
80046: PUSH
80047: LD_INT 2
80049: PUSH
80050: LD_INT 3
80052: PUSH
80053: LD_INT 4
80055: PUSH
80056: LD_INT 5
80058: PUSH
80059: LD_INT 6
80061: PUSH
80062: LD_INT 7
80064: PUSH
80065: LD_INT 8
80067: PUSH
80068: LD_INT 9
80070: PUSH
80071: LD_INT 10
80073: PUSH
80074: LD_INT 11
80076: PUSH
80077: LD_INT 12
80079: PUSH
80080: LD_INT 13
80082: PUSH
80083: LD_INT 14
80085: PUSH
80086: LD_INT 15
80088: PUSH
80089: LD_INT 16
80091: PUSH
80092: LD_INT 17
80094: PUSH
80095: LD_INT 18
80097: PUSH
80098: LD_INT 19
80100: PUSH
80101: LD_INT 20
80103: PUSH
80104: LD_INT 21
80106: PUSH
80107: LD_INT 22
80109: PUSH
80110: LD_INT 23
80112: PUSH
80113: LD_INT 24
80115: PUSH
80116: LD_INT 25
80118: PUSH
80119: LD_INT 26
80121: PUSH
80122: LD_INT 27
80124: PUSH
80125: LD_INT 28
80127: PUSH
80128: LD_INT 29
80130: PUSH
80131: LD_INT 30
80133: PUSH
80134: LD_INT 31
80136: PUSH
80137: LD_INT 32
80139: PUSH
80140: LD_INT 33
80142: PUSH
80143: LD_INT 34
80145: PUSH
80146: LD_INT 36
80148: PUSH
80149: EMPTY
80150: LIST
80151: LIST
80152: LIST
80153: LIST
80154: LIST
80155: LIST
80156: LIST
80157: LIST
80158: LIST
80159: LIST
80160: LIST
80161: LIST
80162: LIST
80163: LIST
80164: LIST
80165: LIST
80166: LIST
80167: LIST
80168: LIST
80169: LIST
80170: LIST
80171: LIST
80172: LIST
80173: LIST
80174: LIST
80175: LIST
80176: LIST
80177: LIST
80178: LIST
80179: LIST
80180: LIST
80181: LIST
80182: LIST
80183: LIST
80184: LIST
80185: PUSH
80186: LD_INT 101
80188: PUSH
80189: LD_INT 102
80191: PUSH
80192: LD_INT 103
80194: PUSH
80195: LD_INT 104
80197: PUSH
80198: LD_INT 105
80200: PUSH
80201: LD_INT 106
80203: PUSH
80204: LD_INT 107
80206: PUSH
80207: LD_INT 108
80209: PUSH
80210: LD_INT 109
80212: PUSH
80213: LD_INT 110
80215: PUSH
80216: LD_INT 111
80218: PUSH
80219: LD_INT 112
80221: PUSH
80222: LD_INT 113
80224: PUSH
80225: LD_INT 114
80227: PUSH
80228: EMPTY
80229: LIST
80230: LIST
80231: LIST
80232: LIST
80233: LIST
80234: LIST
80235: LIST
80236: LIST
80237: LIST
80238: LIST
80239: LIST
80240: LIST
80241: LIST
80242: LIST
80243: PUSH
80244: EMPTY
80245: LIST
80246: LIST
80247: ST_TO_ADDR
80248: GO 80975
80250: LD_INT 16
80252: DOUBLE
80253: EQUAL
80254: IFTRUE 80258
80256: GO 80382
80258: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
80259: LD_ADDR_VAR 0 1
80263: PUSH
80264: LD_INT 2
80266: PUSH
80267: LD_INT 4
80269: PUSH
80270: LD_INT 5
80272: PUSH
80273: LD_INT 7
80275: PUSH
80276: LD_INT 11
80278: PUSH
80279: LD_INT 12
80281: PUSH
80282: LD_INT 15
80284: PUSH
80285: LD_INT 16
80287: PUSH
80288: LD_INT 20
80290: PUSH
80291: LD_INT 21
80293: PUSH
80294: LD_INT 22
80296: PUSH
80297: LD_INT 23
80299: PUSH
80300: LD_INT 25
80302: PUSH
80303: LD_INT 26
80305: PUSH
80306: LD_INT 30
80308: PUSH
80309: LD_INT 31
80311: PUSH
80312: LD_INT 32
80314: PUSH
80315: LD_INT 33
80317: PUSH
80318: LD_INT 34
80320: PUSH
80321: EMPTY
80322: LIST
80323: LIST
80324: LIST
80325: LIST
80326: LIST
80327: LIST
80328: LIST
80329: LIST
80330: LIST
80331: LIST
80332: LIST
80333: LIST
80334: LIST
80335: LIST
80336: LIST
80337: LIST
80338: LIST
80339: LIST
80340: LIST
80341: PUSH
80342: LD_INT 101
80344: PUSH
80345: LD_INT 102
80347: PUSH
80348: LD_INT 103
80350: PUSH
80351: LD_INT 106
80353: PUSH
80354: LD_INT 108
80356: PUSH
80357: LD_INT 112
80359: PUSH
80360: LD_INT 113
80362: PUSH
80363: LD_INT 114
80365: PUSH
80366: EMPTY
80367: LIST
80368: LIST
80369: LIST
80370: LIST
80371: LIST
80372: LIST
80373: LIST
80374: LIST
80375: PUSH
80376: EMPTY
80377: LIST
80378: LIST
80379: ST_TO_ADDR
80380: GO 80975
80382: LD_INT 17
80384: DOUBLE
80385: EQUAL
80386: IFTRUE 80390
80388: GO 80602
80390: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
80391: LD_ADDR_VAR 0 1
80395: PUSH
80396: LD_INT 1
80398: PUSH
80399: LD_INT 2
80401: PUSH
80402: LD_INT 3
80404: PUSH
80405: LD_INT 4
80407: PUSH
80408: LD_INT 5
80410: PUSH
80411: LD_INT 6
80413: PUSH
80414: LD_INT 7
80416: PUSH
80417: LD_INT 8
80419: PUSH
80420: LD_INT 9
80422: PUSH
80423: LD_INT 10
80425: PUSH
80426: LD_INT 11
80428: PUSH
80429: LD_INT 12
80431: PUSH
80432: LD_INT 13
80434: PUSH
80435: LD_INT 14
80437: PUSH
80438: LD_INT 15
80440: PUSH
80441: LD_INT 16
80443: PUSH
80444: LD_INT 17
80446: PUSH
80447: LD_INT 18
80449: PUSH
80450: LD_INT 19
80452: PUSH
80453: LD_INT 20
80455: PUSH
80456: LD_INT 21
80458: PUSH
80459: LD_INT 22
80461: PUSH
80462: LD_INT 23
80464: PUSH
80465: LD_INT 24
80467: PUSH
80468: LD_INT 25
80470: PUSH
80471: LD_INT 26
80473: PUSH
80474: LD_INT 27
80476: PUSH
80477: LD_INT 28
80479: PUSH
80480: LD_INT 29
80482: PUSH
80483: LD_INT 30
80485: PUSH
80486: LD_INT 31
80488: PUSH
80489: LD_INT 32
80491: PUSH
80492: LD_INT 33
80494: PUSH
80495: LD_INT 34
80497: PUSH
80498: LD_INT 36
80500: PUSH
80501: EMPTY
80502: LIST
80503: LIST
80504: LIST
80505: LIST
80506: LIST
80507: LIST
80508: LIST
80509: LIST
80510: LIST
80511: LIST
80512: LIST
80513: LIST
80514: LIST
80515: LIST
80516: LIST
80517: LIST
80518: LIST
80519: LIST
80520: LIST
80521: LIST
80522: LIST
80523: LIST
80524: LIST
80525: LIST
80526: LIST
80527: LIST
80528: LIST
80529: LIST
80530: LIST
80531: LIST
80532: LIST
80533: LIST
80534: LIST
80535: LIST
80536: LIST
80537: PUSH
80538: LD_INT 101
80540: PUSH
80541: LD_INT 102
80543: PUSH
80544: LD_INT 103
80546: PUSH
80547: LD_INT 104
80549: PUSH
80550: LD_INT 105
80552: PUSH
80553: LD_INT 106
80555: PUSH
80556: LD_INT 107
80558: PUSH
80559: LD_INT 108
80561: PUSH
80562: LD_INT 109
80564: PUSH
80565: LD_INT 110
80567: PUSH
80568: LD_INT 111
80570: PUSH
80571: LD_INT 112
80573: PUSH
80574: LD_INT 113
80576: PUSH
80577: LD_INT 114
80579: PUSH
80580: EMPTY
80581: LIST
80582: LIST
80583: LIST
80584: LIST
80585: LIST
80586: LIST
80587: LIST
80588: LIST
80589: LIST
80590: LIST
80591: LIST
80592: LIST
80593: LIST
80594: LIST
80595: PUSH
80596: EMPTY
80597: LIST
80598: LIST
80599: ST_TO_ADDR
80600: GO 80975
80602: LD_INT 18
80604: DOUBLE
80605: EQUAL
80606: IFTRUE 80610
80608: GO 80746
80610: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
80611: LD_ADDR_VAR 0 1
80615: PUSH
80616: LD_INT 2
80618: PUSH
80619: LD_INT 4
80621: PUSH
80622: LD_INT 5
80624: PUSH
80625: LD_INT 7
80627: PUSH
80628: LD_INT 11
80630: PUSH
80631: LD_INT 12
80633: PUSH
80634: LD_INT 15
80636: PUSH
80637: LD_INT 16
80639: PUSH
80640: LD_INT 20
80642: PUSH
80643: LD_INT 21
80645: PUSH
80646: LD_INT 22
80648: PUSH
80649: LD_INT 23
80651: PUSH
80652: LD_INT 25
80654: PUSH
80655: LD_INT 26
80657: PUSH
80658: LD_INT 30
80660: PUSH
80661: LD_INT 31
80663: PUSH
80664: LD_INT 32
80666: PUSH
80667: LD_INT 33
80669: PUSH
80670: LD_INT 34
80672: PUSH
80673: LD_INT 35
80675: PUSH
80676: LD_INT 36
80678: PUSH
80679: EMPTY
80680: LIST
80681: LIST
80682: LIST
80683: LIST
80684: LIST
80685: LIST
80686: LIST
80687: LIST
80688: LIST
80689: LIST
80690: LIST
80691: LIST
80692: LIST
80693: LIST
80694: LIST
80695: LIST
80696: LIST
80697: LIST
80698: LIST
80699: LIST
80700: LIST
80701: PUSH
80702: LD_INT 101
80704: PUSH
80705: LD_INT 102
80707: PUSH
80708: LD_INT 103
80710: PUSH
80711: LD_INT 106
80713: PUSH
80714: LD_INT 108
80716: PUSH
80717: LD_INT 112
80719: PUSH
80720: LD_INT 113
80722: PUSH
80723: LD_INT 114
80725: PUSH
80726: LD_INT 115
80728: PUSH
80729: EMPTY
80730: LIST
80731: LIST
80732: LIST
80733: LIST
80734: LIST
80735: LIST
80736: LIST
80737: LIST
80738: LIST
80739: PUSH
80740: EMPTY
80741: LIST
80742: LIST
80743: ST_TO_ADDR
80744: GO 80975
80746: LD_INT 19
80748: DOUBLE
80749: EQUAL
80750: IFTRUE 80754
80752: GO 80974
80754: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
80755: LD_ADDR_VAR 0 1
80759: PUSH
80760: LD_INT 1
80762: PUSH
80763: LD_INT 2
80765: PUSH
80766: LD_INT 3
80768: PUSH
80769: LD_INT 4
80771: PUSH
80772: LD_INT 5
80774: PUSH
80775: LD_INT 6
80777: PUSH
80778: LD_INT 7
80780: PUSH
80781: LD_INT 8
80783: PUSH
80784: LD_INT 9
80786: PUSH
80787: LD_INT 10
80789: PUSH
80790: LD_INT 11
80792: PUSH
80793: LD_INT 12
80795: PUSH
80796: LD_INT 13
80798: PUSH
80799: LD_INT 14
80801: PUSH
80802: LD_INT 15
80804: PUSH
80805: LD_INT 16
80807: PUSH
80808: LD_INT 17
80810: PUSH
80811: LD_INT 18
80813: PUSH
80814: LD_INT 19
80816: PUSH
80817: LD_INT 20
80819: PUSH
80820: LD_INT 21
80822: PUSH
80823: LD_INT 22
80825: PUSH
80826: LD_INT 23
80828: PUSH
80829: LD_INT 24
80831: PUSH
80832: LD_INT 25
80834: PUSH
80835: LD_INT 26
80837: PUSH
80838: LD_INT 27
80840: PUSH
80841: LD_INT 28
80843: PUSH
80844: LD_INT 29
80846: PUSH
80847: LD_INT 30
80849: PUSH
80850: LD_INT 31
80852: PUSH
80853: LD_INT 32
80855: PUSH
80856: LD_INT 33
80858: PUSH
80859: LD_INT 34
80861: PUSH
80862: LD_INT 35
80864: PUSH
80865: LD_INT 36
80867: PUSH
80868: EMPTY
80869: LIST
80870: LIST
80871: LIST
80872: LIST
80873: LIST
80874: LIST
80875: LIST
80876: LIST
80877: LIST
80878: LIST
80879: LIST
80880: LIST
80881: LIST
80882: LIST
80883: LIST
80884: LIST
80885: LIST
80886: LIST
80887: LIST
80888: LIST
80889: LIST
80890: LIST
80891: LIST
80892: LIST
80893: LIST
80894: LIST
80895: LIST
80896: LIST
80897: LIST
80898: LIST
80899: LIST
80900: LIST
80901: LIST
80902: LIST
80903: LIST
80904: LIST
80905: PUSH
80906: LD_INT 101
80908: PUSH
80909: LD_INT 102
80911: PUSH
80912: LD_INT 103
80914: PUSH
80915: LD_INT 104
80917: PUSH
80918: LD_INT 105
80920: PUSH
80921: LD_INT 106
80923: PUSH
80924: LD_INT 107
80926: PUSH
80927: LD_INT 108
80929: PUSH
80930: LD_INT 109
80932: PUSH
80933: LD_INT 110
80935: PUSH
80936: LD_INT 111
80938: PUSH
80939: LD_INT 112
80941: PUSH
80942: LD_INT 113
80944: PUSH
80945: LD_INT 114
80947: PUSH
80948: LD_INT 115
80950: PUSH
80951: EMPTY
80952: LIST
80953: LIST
80954: LIST
80955: LIST
80956: LIST
80957: LIST
80958: LIST
80959: LIST
80960: LIST
80961: LIST
80962: LIST
80963: LIST
80964: LIST
80965: LIST
80966: LIST
80967: PUSH
80968: EMPTY
80969: LIST
80970: LIST
80971: ST_TO_ADDR
80972: GO 80975
80974: POP
// end else
80975: GO 81194
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
80977: LD_ADDR_VAR 0 1
80981: PUSH
80982: LD_INT 1
80984: PUSH
80985: LD_INT 2
80987: PUSH
80988: LD_INT 3
80990: PUSH
80991: LD_INT 4
80993: PUSH
80994: LD_INT 5
80996: PUSH
80997: LD_INT 6
80999: PUSH
81000: LD_INT 7
81002: PUSH
81003: LD_INT 8
81005: PUSH
81006: LD_INT 9
81008: PUSH
81009: LD_INT 10
81011: PUSH
81012: LD_INT 11
81014: PUSH
81015: LD_INT 12
81017: PUSH
81018: LD_INT 13
81020: PUSH
81021: LD_INT 14
81023: PUSH
81024: LD_INT 15
81026: PUSH
81027: LD_INT 16
81029: PUSH
81030: LD_INT 17
81032: PUSH
81033: LD_INT 18
81035: PUSH
81036: LD_INT 19
81038: PUSH
81039: LD_INT 20
81041: PUSH
81042: LD_INT 21
81044: PUSH
81045: LD_INT 22
81047: PUSH
81048: LD_INT 23
81050: PUSH
81051: LD_INT 24
81053: PUSH
81054: LD_INT 25
81056: PUSH
81057: LD_INT 26
81059: PUSH
81060: LD_INT 27
81062: PUSH
81063: LD_INT 28
81065: PUSH
81066: LD_INT 29
81068: PUSH
81069: LD_INT 30
81071: PUSH
81072: LD_INT 31
81074: PUSH
81075: LD_INT 32
81077: PUSH
81078: LD_INT 33
81080: PUSH
81081: LD_INT 34
81083: PUSH
81084: LD_INT 35
81086: PUSH
81087: LD_INT 36
81089: PUSH
81090: EMPTY
81091: LIST
81092: LIST
81093: LIST
81094: LIST
81095: LIST
81096: LIST
81097: LIST
81098: LIST
81099: LIST
81100: LIST
81101: LIST
81102: LIST
81103: LIST
81104: LIST
81105: LIST
81106: LIST
81107: LIST
81108: LIST
81109: LIST
81110: LIST
81111: LIST
81112: LIST
81113: LIST
81114: LIST
81115: LIST
81116: LIST
81117: LIST
81118: LIST
81119: LIST
81120: LIST
81121: LIST
81122: LIST
81123: LIST
81124: LIST
81125: LIST
81126: LIST
81127: PUSH
81128: LD_INT 101
81130: PUSH
81131: LD_INT 102
81133: PUSH
81134: LD_INT 103
81136: PUSH
81137: LD_INT 104
81139: PUSH
81140: LD_INT 105
81142: PUSH
81143: LD_INT 106
81145: PUSH
81146: LD_INT 107
81148: PUSH
81149: LD_INT 108
81151: PUSH
81152: LD_INT 109
81154: PUSH
81155: LD_INT 110
81157: PUSH
81158: LD_INT 111
81160: PUSH
81161: LD_INT 112
81163: PUSH
81164: LD_INT 113
81166: PUSH
81167: LD_INT 114
81169: PUSH
81170: LD_INT 115
81172: PUSH
81173: EMPTY
81174: LIST
81175: LIST
81176: LIST
81177: LIST
81178: LIST
81179: LIST
81180: LIST
81181: LIST
81182: LIST
81183: LIST
81184: LIST
81185: LIST
81186: LIST
81187: LIST
81188: LIST
81189: PUSH
81190: EMPTY
81191: LIST
81192: LIST
81193: ST_TO_ADDR
// if result then
81194: LD_VAR 0 1
81198: IFFALSE 81487
// begin normal :=  ;
81200: LD_ADDR_VAR 0 3
81204: PUSH
81205: LD_STRING 
81207: ST_TO_ADDR
// hardcore :=  ;
81208: LD_ADDR_VAR 0 4
81212: PUSH
81213: LD_STRING 
81215: ST_TO_ADDR
// for i = 1 to normalCounter do
81216: LD_ADDR_VAR 0 5
81220: PUSH
81221: DOUBLE
81222: LD_INT 1
81224: DEC
81225: ST_TO_ADDR
81226: LD_EXP 104
81230: PUSH
81231: FOR_TO
81232: IFFALSE 81333
// begin tmp := 0 ;
81234: LD_ADDR_VAR 0 2
81238: PUSH
81239: LD_STRING 0
81241: ST_TO_ADDR
// if result [ 1 ] then
81242: LD_VAR 0 1
81246: PUSH
81247: LD_INT 1
81249: ARRAY
81250: IFFALSE 81315
// if result [ 1 ] [ 1 ] = i then
81252: LD_VAR 0 1
81256: PUSH
81257: LD_INT 1
81259: ARRAY
81260: PUSH
81261: LD_INT 1
81263: ARRAY
81264: PUSH
81265: LD_VAR 0 5
81269: EQUAL
81270: IFFALSE 81315
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
81272: LD_ADDR_VAR 0 1
81276: PUSH
81277: LD_VAR 0 1
81281: PPUSH
81282: LD_INT 1
81284: PPUSH
81285: LD_VAR 0 1
81289: PUSH
81290: LD_INT 1
81292: ARRAY
81293: PPUSH
81294: LD_INT 1
81296: PPUSH
81297: CALL_OW 3
81301: PPUSH
81302: CALL_OW 1
81306: ST_TO_ADDR
// tmp := 1 ;
81307: LD_ADDR_VAR 0 2
81311: PUSH
81312: LD_STRING 1
81314: ST_TO_ADDR
// end ; normal := normal & tmp ;
81315: LD_ADDR_VAR 0 3
81319: PUSH
81320: LD_VAR 0 3
81324: PUSH
81325: LD_VAR 0 2
81329: STR
81330: ST_TO_ADDR
// end ;
81331: GO 81231
81333: POP
81334: POP
// for i = 1 to hardcoreCounter do
81335: LD_ADDR_VAR 0 5
81339: PUSH
81340: DOUBLE
81341: LD_INT 1
81343: DEC
81344: ST_TO_ADDR
81345: LD_EXP 105
81349: PUSH
81350: FOR_TO
81351: IFFALSE 81456
// begin tmp := 0 ;
81353: LD_ADDR_VAR 0 2
81357: PUSH
81358: LD_STRING 0
81360: ST_TO_ADDR
// if result [ 2 ] then
81361: LD_VAR 0 1
81365: PUSH
81366: LD_INT 2
81368: ARRAY
81369: IFFALSE 81438
// if result [ 2 ] [ 1 ] = 100 + i then
81371: LD_VAR 0 1
81375: PUSH
81376: LD_INT 2
81378: ARRAY
81379: PUSH
81380: LD_INT 1
81382: ARRAY
81383: PUSH
81384: LD_INT 100
81386: PUSH
81387: LD_VAR 0 5
81391: PLUS
81392: EQUAL
81393: IFFALSE 81438
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
81395: LD_ADDR_VAR 0 1
81399: PUSH
81400: LD_VAR 0 1
81404: PPUSH
81405: LD_INT 2
81407: PPUSH
81408: LD_VAR 0 1
81412: PUSH
81413: LD_INT 2
81415: ARRAY
81416: PPUSH
81417: LD_INT 1
81419: PPUSH
81420: CALL_OW 3
81424: PPUSH
81425: CALL_OW 1
81429: ST_TO_ADDR
// tmp := 1 ;
81430: LD_ADDR_VAR 0 2
81434: PUSH
81435: LD_STRING 1
81437: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
81438: LD_ADDR_VAR 0 4
81442: PUSH
81443: LD_VAR 0 4
81447: PUSH
81448: LD_VAR 0 2
81452: STR
81453: ST_TO_ADDR
// end ;
81454: GO 81350
81456: POP
81457: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
81458: LD_STRING getStreamItemsFromMission("
81460: PUSH
81461: LD_VAR 0 3
81465: STR
81466: PUSH
81467: LD_STRING ","
81469: STR
81470: PUSH
81471: LD_VAR 0 4
81475: STR
81476: PUSH
81477: LD_STRING ")
81479: STR
81480: PPUSH
81481: CALL_OW 559
// end else
81485: GO 81494
// ToLua ( getStreamItemsFromMission("","") ) ;
81487: LD_STRING getStreamItemsFromMission("","")
81489: PPUSH
81490: CALL_OW 559
// end ;
81494: LD_VAR 0 1
81498: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
81499: LD_VAR 0 2
81503: PUSH
81504: LD_INT 100
81506: EQUAL
81507: IFFALSE 82456
// begin if not StreamModeActive then
81509: LD_EXP 103
81513: NOT
81514: IFFALSE 81524
// StreamModeActive := true ;
81516: LD_ADDR_EXP 103
81520: PUSH
81521: LD_INT 1
81523: ST_TO_ADDR
// if p3 = 0 then
81524: LD_VAR 0 3
81528: PUSH
81529: LD_INT 0
81531: EQUAL
81532: IFFALSE 81538
// InitStreamMode ;
81534: CALL 77577 0 0
// if p3 = 1 then
81538: LD_VAR 0 3
81542: PUSH
81543: LD_INT 1
81545: EQUAL
81546: IFFALSE 81556
// sRocket := true ;
81548: LD_ADDR_EXP 108
81552: PUSH
81553: LD_INT 1
81555: ST_TO_ADDR
// if p3 = 2 then
81556: LD_VAR 0 3
81560: PUSH
81561: LD_INT 2
81563: EQUAL
81564: IFFALSE 81574
// sSpeed := true ;
81566: LD_ADDR_EXP 107
81570: PUSH
81571: LD_INT 1
81573: ST_TO_ADDR
// if p3 = 3 then
81574: LD_VAR 0 3
81578: PUSH
81579: LD_INT 3
81581: EQUAL
81582: IFFALSE 81592
// sEngine := true ;
81584: LD_ADDR_EXP 109
81588: PUSH
81589: LD_INT 1
81591: ST_TO_ADDR
// if p3 = 4 then
81592: LD_VAR 0 3
81596: PUSH
81597: LD_INT 4
81599: EQUAL
81600: IFFALSE 81610
// sSpec := true ;
81602: LD_ADDR_EXP 106
81606: PUSH
81607: LD_INT 1
81609: ST_TO_ADDR
// if p3 = 5 then
81610: LD_VAR 0 3
81614: PUSH
81615: LD_INT 5
81617: EQUAL
81618: IFFALSE 81628
// sLevel := true ;
81620: LD_ADDR_EXP 110
81624: PUSH
81625: LD_INT 1
81627: ST_TO_ADDR
// if p3 = 6 then
81628: LD_VAR 0 3
81632: PUSH
81633: LD_INT 6
81635: EQUAL
81636: IFFALSE 81646
// sArmoury := true ;
81638: LD_ADDR_EXP 111
81642: PUSH
81643: LD_INT 1
81645: ST_TO_ADDR
// if p3 = 7 then
81646: LD_VAR 0 3
81650: PUSH
81651: LD_INT 7
81653: EQUAL
81654: IFFALSE 81664
// sRadar := true ;
81656: LD_ADDR_EXP 112
81660: PUSH
81661: LD_INT 1
81663: ST_TO_ADDR
// if p3 = 8 then
81664: LD_VAR 0 3
81668: PUSH
81669: LD_INT 8
81671: EQUAL
81672: IFFALSE 81682
// sBunker := true ;
81674: LD_ADDR_EXP 113
81678: PUSH
81679: LD_INT 1
81681: ST_TO_ADDR
// if p3 = 9 then
81682: LD_VAR 0 3
81686: PUSH
81687: LD_INT 9
81689: EQUAL
81690: IFFALSE 81700
// sHack := true ;
81692: LD_ADDR_EXP 114
81696: PUSH
81697: LD_INT 1
81699: ST_TO_ADDR
// if p3 = 10 then
81700: LD_VAR 0 3
81704: PUSH
81705: LD_INT 10
81707: EQUAL
81708: IFFALSE 81718
// sFire := true ;
81710: LD_ADDR_EXP 115
81714: PUSH
81715: LD_INT 1
81717: ST_TO_ADDR
// if p3 = 11 then
81718: LD_VAR 0 3
81722: PUSH
81723: LD_INT 11
81725: EQUAL
81726: IFFALSE 81736
// sRefresh := true ;
81728: LD_ADDR_EXP 116
81732: PUSH
81733: LD_INT 1
81735: ST_TO_ADDR
// if p3 = 12 then
81736: LD_VAR 0 3
81740: PUSH
81741: LD_INT 12
81743: EQUAL
81744: IFFALSE 81754
// sExp := true ;
81746: LD_ADDR_EXP 117
81750: PUSH
81751: LD_INT 1
81753: ST_TO_ADDR
// if p3 = 13 then
81754: LD_VAR 0 3
81758: PUSH
81759: LD_INT 13
81761: EQUAL
81762: IFFALSE 81772
// sDepot := true ;
81764: LD_ADDR_EXP 118
81768: PUSH
81769: LD_INT 1
81771: ST_TO_ADDR
// if p3 = 14 then
81772: LD_VAR 0 3
81776: PUSH
81777: LD_INT 14
81779: EQUAL
81780: IFFALSE 81790
// sFlag := true ;
81782: LD_ADDR_EXP 119
81786: PUSH
81787: LD_INT 1
81789: ST_TO_ADDR
// if p3 = 15 then
81790: LD_VAR 0 3
81794: PUSH
81795: LD_INT 15
81797: EQUAL
81798: IFFALSE 81808
// sKamikadze := true ;
81800: LD_ADDR_EXP 127
81804: PUSH
81805: LD_INT 1
81807: ST_TO_ADDR
// if p3 = 16 then
81808: LD_VAR 0 3
81812: PUSH
81813: LD_INT 16
81815: EQUAL
81816: IFFALSE 81826
// sTroll := true ;
81818: LD_ADDR_EXP 128
81822: PUSH
81823: LD_INT 1
81825: ST_TO_ADDR
// if p3 = 17 then
81826: LD_VAR 0 3
81830: PUSH
81831: LD_INT 17
81833: EQUAL
81834: IFFALSE 81844
// sSlow := true ;
81836: LD_ADDR_EXP 129
81840: PUSH
81841: LD_INT 1
81843: ST_TO_ADDR
// if p3 = 18 then
81844: LD_VAR 0 3
81848: PUSH
81849: LD_INT 18
81851: EQUAL
81852: IFFALSE 81862
// sLack := true ;
81854: LD_ADDR_EXP 130
81858: PUSH
81859: LD_INT 1
81861: ST_TO_ADDR
// if p3 = 19 then
81862: LD_VAR 0 3
81866: PUSH
81867: LD_INT 19
81869: EQUAL
81870: IFFALSE 81880
// sTank := true ;
81872: LD_ADDR_EXP 132
81876: PUSH
81877: LD_INT 1
81879: ST_TO_ADDR
// if p3 = 20 then
81880: LD_VAR 0 3
81884: PUSH
81885: LD_INT 20
81887: EQUAL
81888: IFFALSE 81898
// sRemote := true ;
81890: LD_ADDR_EXP 133
81894: PUSH
81895: LD_INT 1
81897: ST_TO_ADDR
// if p3 = 21 then
81898: LD_VAR 0 3
81902: PUSH
81903: LD_INT 21
81905: EQUAL
81906: IFFALSE 81916
// sPowell := true ;
81908: LD_ADDR_EXP 134
81912: PUSH
81913: LD_INT 1
81915: ST_TO_ADDR
// if p3 = 22 then
81916: LD_VAR 0 3
81920: PUSH
81921: LD_INT 22
81923: EQUAL
81924: IFFALSE 81934
// sTeleport := true ;
81926: LD_ADDR_EXP 137
81930: PUSH
81931: LD_INT 1
81933: ST_TO_ADDR
// if p3 = 23 then
81934: LD_VAR 0 3
81938: PUSH
81939: LD_INT 23
81941: EQUAL
81942: IFFALSE 81952
// sOilTower := true ;
81944: LD_ADDR_EXP 139
81948: PUSH
81949: LD_INT 1
81951: ST_TO_ADDR
// if p3 = 24 then
81952: LD_VAR 0 3
81956: PUSH
81957: LD_INT 24
81959: EQUAL
81960: IFFALSE 81970
// sShovel := true ;
81962: LD_ADDR_EXP 140
81966: PUSH
81967: LD_INT 1
81969: ST_TO_ADDR
// if p3 = 25 then
81970: LD_VAR 0 3
81974: PUSH
81975: LD_INT 25
81977: EQUAL
81978: IFFALSE 81988
// sSheik := true ;
81980: LD_ADDR_EXP 141
81984: PUSH
81985: LD_INT 1
81987: ST_TO_ADDR
// if p3 = 26 then
81988: LD_VAR 0 3
81992: PUSH
81993: LD_INT 26
81995: EQUAL
81996: IFFALSE 82006
// sEarthquake := true ;
81998: LD_ADDR_EXP 143
82002: PUSH
82003: LD_INT 1
82005: ST_TO_ADDR
// if p3 = 27 then
82006: LD_VAR 0 3
82010: PUSH
82011: LD_INT 27
82013: EQUAL
82014: IFFALSE 82024
// sAI := true ;
82016: LD_ADDR_EXP 144
82020: PUSH
82021: LD_INT 1
82023: ST_TO_ADDR
// if p3 = 28 then
82024: LD_VAR 0 3
82028: PUSH
82029: LD_INT 28
82031: EQUAL
82032: IFFALSE 82042
// sCargo := true ;
82034: LD_ADDR_EXP 147
82038: PUSH
82039: LD_INT 1
82041: ST_TO_ADDR
// if p3 = 29 then
82042: LD_VAR 0 3
82046: PUSH
82047: LD_INT 29
82049: EQUAL
82050: IFFALSE 82060
// sDLaser := true ;
82052: LD_ADDR_EXP 148
82056: PUSH
82057: LD_INT 1
82059: ST_TO_ADDR
// if p3 = 30 then
82060: LD_VAR 0 3
82064: PUSH
82065: LD_INT 30
82067: EQUAL
82068: IFFALSE 82078
// sExchange := true ;
82070: LD_ADDR_EXP 149
82074: PUSH
82075: LD_INT 1
82077: ST_TO_ADDR
// if p3 = 31 then
82078: LD_VAR 0 3
82082: PUSH
82083: LD_INT 31
82085: EQUAL
82086: IFFALSE 82096
// sFac := true ;
82088: LD_ADDR_EXP 150
82092: PUSH
82093: LD_INT 1
82095: ST_TO_ADDR
// if p3 = 32 then
82096: LD_VAR 0 3
82100: PUSH
82101: LD_INT 32
82103: EQUAL
82104: IFFALSE 82114
// sPower := true ;
82106: LD_ADDR_EXP 151
82110: PUSH
82111: LD_INT 1
82113: ST_TO_ADDR
// if p3 = 33 then
82114: LD_VAR 0 3
82118: PUSH
82119: LD_INT 33
82121: EQUAL
82122: IFFALSE 82132
// sRandom := true ;
82124: LD_ADDR_EXP 152
82128: PUSH
82129: LD_INT 1
82131: ST_TO_ADDR
// if p3 = 34 then
82132: LD_VAR 0 3
82136: PUSH
82137: LD_INT 34
82139: EQUAL
82140: IFFALSE 82150
// sShield := true ;
82142: LD_ADDR_EXP 153
82146: PUSH
82147: LD_INT 1
82149: ST_TO_ADDR
// if p3 = 35 then
82150: LD_VAR 0 3
82154: PUSH
82155: LD_INT 35
82157: EQUAL
82158: IFFALSE 82168
// sTime := true ;
82160: LD_ADDR_EXP 154
82164: PUSH
82165: LD_INT 1
82167: ST_TO_ADDR
// if p3 = 36 then
82168: LD_VAR 0 3
82172: PUSH
82173: LD_INT 36
82175: EQUAL
82176: IFFALSE 82186
// sTools := true ;
82178: LD_ADDR_EXP 155
82182: PUSH
82183: LD_INT 1
82185: ST_TO_ADDR
// if p3 = 101 then
82186: LD_VAR 0 3
82190: PUSH
82191: LD_INT 101
82193: EQUAL
82194: IFFALSE 82204
// sSold := true ;
82196: LD_ADDR_EXP 120
82200: PUSH
82201: LD_INT 1
82203: ST_TO_ADDR
// if p3 = 102 then
82204: LD_VAR 0 3
82208: PUSH
82209: LD_INT 102
82211: EQUAL
82212: IFFALSE 82222
// sDiff := true ;
82214: LD_ADDR_EXP 121
82218: PUSH
82219: LD_INT 1
82221: ST_TO_ADDR
// if p3 = 103 then
82222: LD_VAR 0 3
82226: PUSH
82227: LD_INT 103
82229: EQUAL
82230: IFFALSE 82240
// sFog := true ;
82232: LD_ADDR_EXP 124
82236: PUSH
82237: LD_INT 1
82239: ST_TO_ADDR
// if p3 = 104 then
82240: LD_VAR 0 3
82244: PUSH
82245: LD_INT 104
82247: EQUAL
82248: IFFALSE 82258
// sReset := true ;
82250: LD_ADDR_EXP 125
82254: PUSH
82255: LD_INT 1
82257: ST_TO_ADDR
// if p3 = 105 then
82258: LD_VAR 0 3
82262: PUSH
82263: LD_INT 105
82265: EQUAL
82266: IFFALSE 82276
// sSun := true ;
82268: LD_ADDR_EXP 126
82272: PUSH
82273: LD_INT 1
82275: ST_TO_ADDR
// if p3 = 106 then
82276: LD_VAR 0 3
82280: PUSH
82281: LD_INT 106
82283: EQUAL
82284: IFFALSE 82294
// sTiger := true ;
82286: LD_ADDR_EXP 122
82290: PUSH
82291: LD_INT 1
82293: ST_TO_ADDR
// if p3 = 107 then
82294: LD_VAR 0 3
82298: PUSH
82299: LD_INT 107
82301: EQUAL
82302: IFFALSE 82312
// sBomb := true ;
82304: LD_ADDR_EXP 123
82308: PUSH
82309: LD_INT 1
82311: ST_TO_ADDR
// if p3 = 108 then
82312: LD_VAR 0 3
82316: PUSH
82317: LD_INT 108
82319: EQUAL
82320: IFFALSE 82330
// sWound := true ;
82322: LD_ADDR_EXP 131
82326: PUSH
82327: LD_INT 1
82329: ST_TO_ADDR
// if p3 = 109 then
82330: LD_VAR 0 3
82334: PUSH
82335: LD_INT 109
82337: EQUAL
82338: IFFALSE 82348
// sBetray := true ;
82340: LD_ADDR_EXP 135
82344: PUSH
82345: LD_INT 1
82347: ST_TO_ADDR
// if p3 = 110 then
82348: LD_VAR 0 3
82352: PUSH
82353: LD_INT 110
82355: EQUAL
82356: IFFALSE 82366
// sContamin := true ;
82358: LD_ADDR_EXP 136
82362: PUSH
82363: LD_INT 1
82365: ST_TO_ADDR
// if p3 = 111 then
82366: LD_VAR 0 3
82370: PUSH
82371: LD_INT 111
82373: EQUAL
82374: IFFALSE 82384
// sOil := true ;
82376: LD_ADDR_EXP 138
82380: PUSH
82381: LD_INT 1
82383: ST_TO_ADDR
// if p3 = 112 then
82384: LD_VAR 0 3
82388: PUSH
82389: LD_INT 112
82391: EQUAL
82392: IFFALSE 82402
// sStu := true ;
82394: LD_ADDR_EXP 142
82398: PUSH
82399: LD_INT 1
82401: ST_TO_ADDR
// if p3 = 113 then
82402: LD_VAR 0 3
82406: PUSH
82407: LD_INT 113
82409: EQUAL
82410: IFFALSE 82420
// sBazooka := true ;
82412: LD_ADDR_EXP 145
82416: PUSH
82417: LD_INT 1
82419: ST_TO_ADDR
// if p3 = 114 then
82420: LD_VAR 0 3
82424: PUSH
82425: LD_INT 114
82427: EQUAL
82428: IFFALSE 82438
// sMortar := true ;
82430: LD_ADDR_EXP 146
82434: PUSH
82435: LD_INT 1
82437: ST_TO_ADDR
// if p3 = 115 then
82438: LD_VAR 0 3
82442: PUSH
82443: LD_INT 115
82445: EQUAL
82446: IFFALSE 82456
// sRanger := true ;
82448: LD_ADDR_EXP 156
82452: PUSH
82453: LD_INT 1
82455: ST_TO_ADDR
// end ; end ;
82456: PPOPN 6
82458: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
82459: LD_EXP 103
82463: PUSH
82464: LD_EXP 108
82468: AND
82469: IFFALSE 82593
82471: GO 82473
82473: DISABLE
82474: LD_INT 0
82476: PPUSH
82477: PPUSH
// begin enable ;
82478: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
82479: LD_ADDR_VAR 0 2
82483: PUSH
82484: LD_INT 22
82486: PUSH
82487: LD_OWVAR 2
82491: PUSH
82492: EMPTY
82493: LIST
82494: LIST
82495: PUSH
82496: LD_INT 2
82498: PUSH
82499: LD_INT 34
82501: PUSH
82502: LD_INT 7
82504: PUSH
82505: EMPTY
82506: LIST
82507: LIST
82508: PUSH
82509: LD_INT 34
82511: PUSH
82512: LD_INT 45
82514: PUSH
82515: EMPTY
82516: LIST
82517: LIST
82518: PUSH
82519: LD_INT 34
82521: PUSH
82522: LD_INT 28
82524: PUSH
82525: EMPTY
82526: LIST
82527: LIST
82528: PUSH
82529: LD_INT 34
82531: PUSH
82532: LD_INT 47
82534: PUSH
82535: EMPTY
82536: LIST
82537: LIST
82538: PUSH
82539: EMPTY
82540: LIST
82541: LIST
82542: LIST
82543: LIST
82544: LIST
82545: PUSH
82546: EMPTY
82547: LIST
82548: LIST
82549: PPUSH
82550: CALL_OW 69
82554: ST_TO_ADDR
// if not tmp then
82555: LD_VAR 0 2
82559: NOT
82560: IFFALSE 82564
// exit ;
82562: GO 82593
// for i in tmp do
82564: LD_ADDR_VAR 0 1
82568: PUSH
82569: LD_VAR 0 2
82573: PUSH
82574: FOR_IN
82575: IFFALSE 82591
// begin SetLives ( i , 0 ) ;
82577: LD_VAR 0 1
82581: PPUSH
82582: LD_INT 0
82584: PPUSH
82585: CALL_OW 234
// end ;
82589: GO 82574
82591: POP
82592: POP
// end ;
82593: PPOPN 2
82595: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
82596: LD_EXP 103
82600: PUSH
82601: LD_EXP 109
82605: AND
82606: IFFALSE 82690
82608: GO 82610
82610: DISABLE
82611: LD_INT 0
82613: PPUSH
82614: PPUSH
// begin enable ;
82615: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
82616: LD_ADDR_VAR 0 2
82620: PUSH
82621: LD_INT 22
82623: PUSH
82624: LD_OWVAR 2
82628: PUSH
82629: EMPTY
82630: LIST
82631: LIST
82632: PUSH
82633: LD_INT 32
82635: PUSH
82636: LD_INT 3
82638: PUSH
82639: EMPTY
82640: LIST
82641: LIST
82642: PUSH
82643: EMPTY
82644: LIST
82645: LIST
82646: PPUSH
82647: CALL_OW 69
82651: ST_TO_ADDR
// if not tmp then
82652: LD_VAR 0 2
82656: NOT
82657: IFFALSE 82661
// exit ;
82659: GO 82690
// for i in tmp do
82661: LD_ADDR_VAR 0 1
82665: PUSH
82666: LD_VAR 0 2
82670: PUSH
82671: FOR_IN
82672: IFFALSE 82688
// begin SetLives ( i , 0 ) ;
82674: LD_VAR 0 1
82678: PPUSH
82679: LD_INT 0
82681: PPUSH
82682: CALL_OW 234
// end ;
82686: GO 82671
82688: POP
82689: POP
// end ;
82690: PPOPN 2
82692: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
82693: LD_EXP 103
82697: PUSH
82698: LD_EXP 106
82702: AND
82703: IFFALSE 82796
82705: GO 82707
82707: DISABLE
82708: LD_INT 0
82710: PPUSH
// begin enable ;
82711: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
82712: LD_ADDR_VAR 0 1
82716: PUSH
82717: LD_INT 22
82719: PUSH
82720: LD_OWVAR 2
82724: PUSH
82725: EMPTY
82726: LIST
82727: LIST
82728: PUSH
82729: LD_INT 2
82731: PUSH
82732: LD_INT 25
82734: PUSH
82735: LD_INT 5
82737: PUSH
82738: EMPTY
82739: LIST
82740: LIST
82741: PUSH
82742: LD_INT 25
82744: PUSH
82745: LD_INT 9
82747: PUSH
82748: EMPTY
82749: LIST
82750: LIST
82751: PUSH
82752: LD_INT 25
82754: PUSH
82755: LD_INT 8
82757: PUSH
82758: EMPTY
82759: LIST
82760: LIST
82761: PUSH
82762: EMPTY
82763: LIST
82764: LIST
82765: LIST
82766: LIST
82767: PUSH
82768: EMPTY
82769: LIST
82770: LIST
82771: PPUSH
82772: CALL_OW 69
82776: PUSH
82777: FOR_IN
82778: IFFALSE 82794
// begin SetClass ( i , 1 ) ;
82780: LD_VAR 0 1
82784: PPUSH
82785: LD_INT 1
82787: PPUSH
82788: CALL_OW 336
// end ;
82792: GO 82777
82794: POP
82795: POP
// end ;
82796: PPOPN 1
82798: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
82799: LD_EXP 103
82803: PUSH
82804: LD_EXP 107
82808: AND
82809: PUSH
82810: LD_OWVAR 65
82814: PUSH
82815: LD_INT 7
82817: LESS
82818: AND
82819: IFFALSE 82833
82821: GO 82823
82823: DISABLE
// begin enable ;
82824: ENABLE
// game_speed := 7 ;
82825: LD_ADDR_OWVAR 65
82829: PUSH
82830: LD_INT 7
82832: ST_TO_ADDR
// end ;
82833: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
82834: LD_EXP 103
82838: PUSH
82839: LD_EXP 110
82843: AND
82844: IFFALSE 83046
82846: GO 82848
82848: DISABLE
82849: LD_INT 0
82851: PPUSH
82852: PPUSH
82853: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
82854: LD_ADDR_VAR 0 3
82858: PUSH
82859: LD_INT 81
82861: PUSH
82862: LD_OWVAR 2
82866: PUSH
82867: EMPTY
82868: LIST
82869: LIST
82870: PUSH
82871: LD_INT 21
82873: PUSH
82874: LD_INT 1
82876: PUSH
82877: EMPTY
82878: LIST
82879: LIST
82880: PUSH
82881: EMPTY
82882: LIST
82883: LIST
82884: PPUSH
82885: CALL_OW 69
82889: ST_TO_ADDR
// if not tmp then
82890: LD_VAR 0 3
82894: NOT
82895: IFFALSE 82899
// exit ;
82897: GO 83046
// if tmp > 5 then
82899: LD_VAR 0 3
82903: PUSH
82904: LD_INT 5
82906: GREATER
82907: IFFALSE 82919
// k := 5 else
82909: LD_ADDR_VAR 0 2
82913: PUSH
82914: LD_INT 5
82916: ST_TO_ADDR
82917: GO 82929
// k := tmp ;
82919: LD_ADDR_VAR 0 2
82923: PUSH
82924: LD_VAR 0 3
82928: ST_TO_ADDR
// for i := 1 to k do
82929: LD_ADDR_VAR 0 1
82933: PUSH
82934: DOUBLE
82935: LD_INT 1
82937: DEC
82938: ST_TO_ADDR
82939: LD_VAR 0 2
82943: PUSH
82944: FOR_TO
82945: IFFALSE 83044
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
82947: LD_VAR 0 3
82951: PUSH
82952: LD_VAR 0 1
82956: ARRAY
82957: PPUSH
82958: LD_VAR 0 1
82962: PUSH
82963: LD_INT 4
82965: MOD
82966: PUSH
82967: LD_INT 1
82969: PLUS
82970: PPUSH
82971: CALL_OW 259
82975: PUSH
82976: LD_INT 10
82978: LESS
82979: IFFALSE 83042
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
82981: LD_VAR 0 3
82985: PUSH
82986: LD_VAR 0 1
82990: ARRAY
82991: PPUSH
82992: LD_VAR 0 1
82996: PUSH
82997: LD_INT 4
82999: MOD
83000: PUSH
83001: LD_INT 1
83003: PLUS
83004: PPUSH
83005: LD_VAR 0 3
83009: PUSH
83010: LD_VAR 0 1
83014: ARRAY
83015: PPUSH
83016: LD_VAR 0 1
83020: PUSH
83021: LD_INT 4
83023: MOD
83024: PUSH
83025: LD_INT 1
83027: PLUS
83028: PPUSH
83029: CALL_OW 259
83033: PUSH
83034: LD_INT 1
83036: PLUS
83037: PPUSH
83038: CALL_OW 237
83042: GO 82944
83044: POP
83045: POP
// end ;
83046: PPOPN 3
83048: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
83049: LD_EXP 103
83053: PUSH
83054: LD_EXP 111
83058: AND
83059: IFFALSE 83079
83061: GO 83063
83063: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
83064: LD_INT 4
83066: PPUSH
83067: LD_OWVAR 2
83071: PPUSH
83072: LD_INT 0
83074: PPUSH
83075: CALL_OW 324
83079: END
// every 0 0$1 trigger StreamModeActive and sShovel do
83080: LD_EXP 103
83084: PUSH
83085: LD_EXP 140
83089: AND
83090: IFFALSE 83110
83092: GO 83094
83094: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
83095: LD_INT 19
83097: PPUSH
83098: LD_OWVAR 2
83102: PPUSH
83103: LD_INT 0
83105: PPUSH
83106: CALL_OW 324
83110: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
83111: LD_EXP 103
83115: PUSH
83116: LD_EXP 112
83120: AND
83121: IFFALSE 83223
83123: GO 83125
83125: DISABLE
83126: LD_INT 0
83128: PPUSH
83129: PPUSH
// begin enable ;
83130: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
83131: LD_ADDR_VAR 0 2
83135: PUSH
83136: LD_INT 22
83138: PUSH
83139: LD_OWVAR 2
83143: PUSH
83144: EMPTY
83145: LIST
83146: LIST
83147: PUSH
83148: LD_INT 2
83150: PUSH
83151: LD_INT 34
83153: PUSH
83154: LD_INT 11
83156: PUSH
83157: EMPTY
83158: LIST
83159: LIST
83160: PUSH
83161: LD_INT 34
83163: PUSH
83164: LD_INT 30
83166: PUSH
83167: EMPTY
83168: LIST
83169: LIST
83170: PUSH
83171: EMPTY
83172: LIST
83173: LIST
83174: LIST
83175: PUSH
83176: EMPTY
83177: LIST
83178: LIST
83179: PPUSH
83180: CALL_OW 69
83184: ST_TO_ADDR
// if not tmp then
83185: LD_VAR 0 2
83189: NOT
83190: IFFALSE 83194
// exit ;
83192: GO 83223
// for i in tmp do
83194: LD_ADDR_VAR 0 1
83198: PUSH
83199: LD_VAR 0 2
83203: PUSH
83204: FOR_IN
83205: IFFALSE 83221
// begin SetLives ( i , 0 ) ;
83207: LD_VAR 0 1
83211: PPUSH
83212: LD_INT 0
83214: PPUSH
83215: CALL_OW 234
// end ;
83219: GO 83204
83221: POP
83222: POP
// end ;
83223: PPOPN 2
83225: END
// every 0 0$1 trigger StreamModeActive and sBunker do
83226: LD_EXP 103
83230: PUSH
83231: LD_EXP 113
83235: AND
83236: IFFALSE 83256
83238: GO 83240
83240: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
83241: LD_INT 32
83243: PPUSH
83244: LD_OWVAR 2
83248: PPUSH
83249: LD_INT 0
83251: PPUSH
83252: CALL_OW 324
83256: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
83257: LD_EXP 103
83261: PUSH
83262: LD_EXP 114
83266: AND
83267: IFFALSE 83448
83269: GO 83271
83271: DISABLE
83272: LD_INT 0
83274: PPUSH
83275: PPUSH
83276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
83277: LD_ADDR_VAR 0 2
83281: PUSH
83282: LD_INT 22
83284: PUSH
83285: LD_OWVAR 2
83289: PUSH
83290: EMPTY
83291: LIST
83292: LIST
83293: PUSH
83294: LD_INT 33
83296: PUSH
83297: LD_INT 3
83299: PUSH
83300: EMPTY
83301: LIST
83302: LIST
83303: PUSH
83304: EMPTY
83305: LIST
83306: LIST
83307: PPUSH
83308: CALL_OW 69
83312: ST_TO_ADDR
// if not tmp then
83313: LD_VAR 0 2
83317: NOT
83318: IFFALSE 83322
// exit ;
83320: GO 83448
// side := 0 ;
83322: LD_ADDR_VAR 0 3
83326: PUSH
83327: LD_INT 0
83329: ST_TO_ADDR
// for i := 1 to 8 do
83330: LD_ADDR_VAR 0 1
83334: PUSH
83335: DOUBLE
83336: LD_INT 1
83338: DEC
83339: ST_TO_ADDR
83340: LD_INT 8
83342: PUSH
83343: FOR_TO
83344: IFFALSE 83392
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
83346: LD_OWVAR 2
83350: PUSH
83351: LD_VAR 0 1
83355: NONEQUAL
83356: PUSH
83357: LD_OWVAR 2
83361: PPUSH
83362: LD_VAR 0 1
83366: PPUSH
83367: CALL_OW 81
83371: PUSH
83372: LD_INT 2
83374: EQUAL
83375: AND
83376: IFFALSE 83390
// begin side := i ;
83378: LD_ADDR_VAR 0 3
83382: PUSH
83383: LD_VAR 0 1
83387: ST_TO_ADDR
// break ;
83388: GO 83392
// end ;
83390: GO 83343
83392: POP
83393: POP
// if not side then
83394: LD_VAR 0 3
83398: NOT
83399: IFFALSE 83403
// exit ;
83401: GO 83448
// for i := 1 to tmp do
83403: LD_ADDR_VAR 0 1
83407: PUSH
83408: DOUBLE
83409: LD_INT 1
83411: DEC
83412: ST_TO_ADDR
83413: LD_VAR 0 2
83417: PUSH
83418: FOR_TO
83419: IFFALSE 83446
// if Prob ( 60 ) then
83421: LD_INT 60
83423: PPUSH
83424: CALL_OW 13
83428: IFFALSE 83444
// SetSide ( i , side ) ;
83430: LD_VAR 0 1
83434: PPUSH
83435: LD_VAR 0 3
83439: PPUSH
83440: CALL_OW 235
83444: GO 83418
83446: POP
83447: POP
// end ;
83448: PPOPN 3
83450: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
83451: LD_EXP 103
83455: PUSH
83456: LD_EXP 116
83460: AND
83461: IFFALSE 83580
83463: GO 83465
83465: DISABLE
83466: LD_INT 0
83468: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
83469: LD_ADDR_VAR 0 1
83473: PUSH
83474: LD_INT 22
83476: PUSH
83477: LD_OWVAR 2
83481: PUSH
83482: EMPTY
83483: LIST
83484: LIST
83485: PUSH
83486: LD_INT 21
83488: PUSH
83489: LD_INT 1
83491: PUSH
83492: EMPTY
83493: LIST
83494: LIST
83495: PUSH
83496: LD_INT 3
83498: PUSH
83499: LD_INT 23
83501: PUSH
83502: LD_INT 0
83504: PUSH
83505: EMPTY
83506: LIST
83507: LIST
83508: PUSH
83509: EMPTY
83510: LIST
83511: LIST
83512: PUSH
83513: EMPTY
83514: LIST
83515: LIST
83516: LIST
83517: PPUSH
83518: CALL_OW 69
83522: PUSH
83523: FOR_IN
83524: IFFALSE 83578
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
83526: LD_VAR 0 1
83530: PPUSH
83531: CALL_OW 257
83535: PUSH
83536: LD_INT 1
83538: PUSH
83539: LD_INT 2
83541: PUSH
83542: LD_INT 3
83544: PUSH
83545: LD_INT 4
83547: PUSH
83548: EMPTY
83549: LIST
83550: LIST
83551: LIST
83552: LIST
83553: IN
83554: IFFALSE 83576
// SetClass ( un , rand ( 1 , 4 ) ) ;
83556: LD_VAR 0 1
83560: PPUSH
83561: LD_INT 1
83563: PPUSH
83564: LD_INT 4
83566: PPUSH
83567: CALL_OW 12
83571: PPUSH
83572: CALL_OW 336
83576: GO 83523
83578: POP
83579: POP
// end ;
83580: PPOPN 1
83582: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
83583: LD_EXP 103
83587: PUSH
83588: LD_EXP 115
83592: AND
83593: IFFALSE 83672
83595: GO 83597
83597: DISABLE
83598: LD_INT 0
83600: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
83601: LD_ADDR_VAR 0 1
83605: PUSH
83606: LD_INT 22
83608: PUSH
83609: LD_OWVAR 2
83613: PUSH
83614: EMPTY
83615: LIST
83616: LIST
83617: PUSH
83618: LD_INT 21
83620: PUSH
83621: LD_INT 3
83623: PUSH
83624: EMPTY
83625: LIST
83626: LIST
83627: PUSH
83628: EMPTY
83629: LIST
83630: LIST
83631: PPUSH
83632: CALL_OW 69
83636: ST_TO_ADDR
// if not tmp then
83637: LD_VAR 0 1
83641: NOT
83642: IFFALSE 83646
// exit ;
83644: GO 83672
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
83646: LD_VAR 0 1
83650: PUSH
83651: LD_INT 1
83653: PPUSH
83654: LD_VAR 0 1
83658: PPUSH
83659: CALL_OW 12
83663: ARRAY
83664: PPUSH
83665: LD_INT 100
83667: PPUSH
83668: CALL_OW 234
// end ;
83672: PPOPN 1
83674: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
83675: LD_EXP 103
83679: PUSH
83680: LD_EXP 117
83684: AND
83685: IFFALSE 83783
83687: GO 83689
83689: DISABLE
83690: LD_INT 0
83692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
83693: LD_ADDR_VAR 0 1
83697: PUSH
83698: LD_INT 22
83700: PUSH
83701: LD_OWVAR 2
83705: PUSH
83706: EMPTY
83707: LIST
83708: LIST
83709: PUSH
83710: LD_INT 21
83712: PUSH
83713: LD_INT 1
83715: PUSH
83716: EMPTY
83717: LIST
83718: LIST
83719: PUSH
83720: EMPTY
83721: LIST
83722: LIST
83723: PPUSH
83724: CALL_OW 69
83728: ST_TO_ADDR
// if not tmp then
83729: LD_VAR 0 1
83733: NOT
83734: IFFALSE 83738
// exit ;
83736: GO 83783
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
83738: LD_VAR 0 1
83742: PUSH
83743: LD_INT 1
83745: PPUSH
83746: LD_VAR 0 1
83750: PPUSH
83751: CALL_OW 12
83755: ARRAY
83756: PPUSH
83757: LD_INT 1
83759: PPUSH
83760: LD_INT 4
83762: PPUSH
83763: CALL_OW 12
83767: PPUSH
83768: LD_INT 3000
83770: PPUSH
83771: LD_INT 9000
83773: PPUSH
83774: CALL_OW 12
83778: PPUSH
83779: CALL_OW 492
// end ;
83783: PPOPN 1
83785: END
// every 0 0$1 trigger StreamModeActive and sDepot do
83786: LD_EXP 103
83790: PUSH
83791: LD_EXP 118
83795: AND
83796: IFFALSE 83816
83798: GO 83800
83800: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
83801: LD_INT 1
83803: PPUSH
83804: LD_OWVAR 2
83808: PPUSH
83809: LD_INT 0
83811: PPUSH
83812: CALL_OW 324
83816: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
83817: LD_EXP 103
83821: PUSH
83822: LD_EXP 119
83826: AND
83827: IFFALSE 83910
83829: GO 83831
83831: DISABLE
83832: LD_INT 0
83834: PPUSH
83835: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
83836: LD_ADDR_VAR 0 2
83840: PUSH
83841: LD_INT 22
83843: PUSH
83844: LD_OWVAR 2
83848: PUSH
83849: EMPTY
83850: LIST
83851: LIST
83852: PUSH
83853: LD_INT 21
83855: PUSH
83856: LD_INT 3
83858: PUSH
83859: EMPTY
83860: LIST
83861: LIST
83862: PUSH
83863: EMPTY
83864: LIST
83865: LIST
83866: PPUSH
83867: CALL_OW 69
83871: ST_TO_ADDR
// if not tmp then
83872: LD_VAR 0 2
83876: NOT
83877: IFFALSE 83881
// exit ;
83879: GO 83910
// for i in tmp do
83881: LD_ADDR_VAR 0 1
83885: PUSH
83886: LD_VAR 0 2
83890: PUSH
83891: FOR_IN
83892: IFFALSE 83908
// SetBLevel ( i , 10 ) ;
83894: LD_VAR 0 1
83898: PPUSH
83899: LD_INT 10
83901: PPUSH
83902: CALL_OW 241
83906: GO 83891
83908: POP
83909: POP
// end ;
83910: PPOPN 2
83912: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
83913: LD_EXP 103
83917: PUSH
83918: LD_EXP 120
83922: AND
83923: IFFALSE 84034
83925: GO 83927
83927: DISABLE
83928: LD_INT 0
83930: PPUSH
83931: PPUSH
83932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
83933: LD_ADDR_VAR 0 3
83937: PUSH
83938: LD_INT 22
83940: PUSH
83941: LD_OWVAR 2
83945: PUSH
83946: EMPTY
83947: LIST
83948: LIST
83949: PUSH
83950: LD_INT 25
83952: PUSH
83953: LD_INT 1
83955: PUSH
83956: EMPTY
83957: LIST
83958: LIST
83959: PUSH
83960: EMPTY
83961: LIST
83962: LIST
83963: PPUSH
83964: CALL_OW 69
83968: ST_TO_ADDR
// if not tmp then
83969: LD_VAR 0 3
83973: NOT
83974: IFFALSE 83978
// exit ;
83976: GO 84034
// un := tmp [ rand ( 1 , tmp ) ] ;
83978: LD_ADDR_VAR 0 2
83982: PUSH
83983: LD_VAR 0 3
83987: PUSH
83988: LD_INT 1
83990: PPUSH
83991: LD_VAR 0 3
83995: PPUSH
83996: CALL_OW 12
84000: ARRAY
84001: ST_TO_ADDR
// if Crawls ( un ) then
84002: LD_VAR 0 2
84006: PPUSH
84007: CALL_OW 318
84011: IFFALSE 84022
// ComWalk ( un ) ;
84013: LD_VAR 0 2
84017: PPUSH
84018: CALL_OW 138
// SetClass ( un , class_sniper ) ;
84022: LD_VAR 0 2
84026: PPUSH
84027: LD_INT 5
84029: PPUSH
84030: CALL_OW 336
// end ;
84034: PPOPN 3
84036: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
84037: LD_EXP 103
84041: PUSH
84042: LD_EXP 121
84046: AND
84047: PUSH
84048: LD_OWVAR 67
84052: PUSH
84053: LD_INT 3
84055: LESS
84056: AND
84057: IFFALSE 84076
84059: GO 84061
84061: DISABLE
// Difficulty := Difficulty + 1 ;
84062: LD_ADDR_OWVAR 67
84066: PUSH
84067: LD_OWVAR 67
84071: PUSH
84072: LD_INT 1
84074: PLUS
84075: ST_TO_ADDR
84076: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
84077: LD_EXP 103
84081: PUSH
84082: LD_EXP 122
84086: AND
84087: IFFALSE 84190
84089: GO 84091
84091: DISABLE
84092: LD_INT 0
84094: PPUSH
// begin for i := 1 to 5 do
84095: LD_ADDR_VAR 0 1
84099: PUSH
84100: DOUBLE
84101: LD_INT 1
84103: DEC
84104: ST_TO_ADDR
84105: LD_INT 5
84107: PUSH
84108: FOR_TO
84109: IFFALSE 84188
// begin uc_nation := nation_nature ;
84111: LD_ADDR_OWVAR 21
84115: PUSH
84116: LD_INT 0
84118: ST_TO_ADDR
// uc_side := 0 ;
84119: LD_ADDR_OWVAR 20
84123: PUSH
84124: LD_INT 0
84126: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
84127: LD_ADDR_OWVAR 29
84131: PUSH
84132: LD_INT 12
84134: PUSH
84135: LD_INT 12
84137: PUSH
84138: EMPTY
84139: LIST
84140: LIST
84141: ST_TO_ADDR
// hc_agressivity := 20 ;
84142: LD_ADDR_OWVAR 35
84146: PUSH
84147: LD_INT 20
84149: ST_TO_ADDR
// hc_class := class_tiger ;
84150: LD_ADDR_OWVAR 28
84154: PUSH
84155: LD_INT 14
84157: ST_TO_ADDR
// hc_gallery :=  ;
84158: LD_ADDR_OWVAR 33
84162: PUSH
84163: LD_STRING 
84165: ST_TO_ADDR
// hc_name :=  ;
84166: LD_ADDR_OWVAR 26
84170: PUSH
84171: LD_STRING 
84173: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
84174: CALL_OW 44
84178: PPUSH
84179: LD_INT 0
84181: PPUSH
84182: CALL_OW 51
// end ;
84186: GO 84108
84188: POP
84189: POP
// end ;
84190: PPOPN 1
84192: END
// every 0 0$1 trigger StreamModeActive and sBomb do
84193: LD_EXP 103
84197: PUSH
84198: LD_EXP 123
84202: AND
84203: IFFALSE 84212
84205: GO 84207
84207: DISABLE
// StreamSibBomb ;
84208: CALL 84213 0 0
84212: END
// export function StreamSibBomb ; var i , x , y ; begin
84213: LD_INT 0
84215: PPUSH
84216: PPUSH
84217: PPUSH
84218: PPUSH
// result := false ;
84219: LD_ADDR_VAR 0 1
84223: PUSH
84224: LD_INT 0
84226: ST_TO_ADDR
// for i := 1 to 16 do
84227: LD_ADDR_VAR 0 2
84231: PUSH
84232: DOUBLE
84233: LD_INT 1
84235: DEC
84236: ST_TO_ADDR
84237: LD_INT 16
84239: PUSH
84240: FOR_TO
84241: IFFALSE 84440
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
84243: LD_ADDR_VAR 0 3
84247: PUSH
84248: LD_INT 10
84250: PUSH
84251: LD_INT 20
84253: PUSH
84254: LD_INT 30
84256: PUSH
84257: LD_INT 40
84259: PUSH
84260: LD_INT 50
84262: PUSH
84263: LD_INT 60
84265: PUSH
84266: LD_INT 70
84268: PUSH
84269: LD_INT 80
84271: PUSH
84272: LD_INT 90
84274: PUSH
84275: LD_INT 100
84277: PUSH
84278: LD_INT 110
84280: PUSH
84281: LD_INT 120
84283: PUSH
84284: LD_INT 130
84286: PUSH
84287: LD_INT 140
84289: PUSH
84290: LD_INT 150
84292: PUSH
84293: EMPTY
84294: LIST
84295: LIST
84296: LIST
84297: LIST
84298: LIST
84299: LIST
84300: LIST
84301: LIST
84302: LIST
84303: LIST
84304: LIST
84305: LIST
84306: LIST
84307: LIST
84308: LIST
84309: PUSH
84310: LD_INT 1
84312: PPUSH
84313: LD_INT 15
84315: PPUSH
84316: CALL_OW 12
84320: ARRAY
84321: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
84322: LD_ADDR_VAR 0 4
84326: PUSH
84327: LD_INT 10
84329: PUSH
84330: LD_INT 20
84332: PUSH
84333: LD_INT 30
84335: PUSH
84336: LD_INT 40
84338: PUSH
84339: LD_INT 50
84341: PUSH
84342: LD_INT 60
84344: PUSH
84345: LD_INT 70
84347: PUSH
84348: LD_INT 80
84350: PUSH
84351: LD_INT 90
84353: PUSH
84354: LD_INT 100
84356: PUSH
84357: LD_INT 110
84359: PUSH
84360: LD_INT 120
84362: PUSH
84363: LD_INT 130
84365: PUSH
84366: LD_INT 140
84368: PUSH
84369: LD_INT 150
84371: PUSH
84372: EMPTY
84373: LIST
84374: LIST
84375: LIST
84376: LIST
84377: LIST
84378: LIST
84379: LIST
84380: LIST
84381: LIST
84382: LIST
84383: LIST
84384: LIST
84385: LIST
84386: LIST
84387: LIST
84388: PUSH
84389: LD_INT 1
84391: PPUSH
84392: LD_INT 15
84394: PPUSH
84395: CALL_OW 12
84399: ARRAY
84400: ST_TO_ADDR
// if ValidHex ( x , y ) then
84401: LD_VAR 0 3
84405: PPUSH
84406: LD_VAR 0 4
84410: PPUSH
84411: CALL_OW 488
84415: IFFALSE 84438
// begin result := [ x , y ] ;
84417: LD_ADDR_VAR 0 1
84421: PUSH
84422: LD_VAR 0 3
84426: PUSH
84427: LD_VAR 0 4
84431: PUSH
84432: EMPTY
84433: LIST
84434: LIST
84435: ST_TO_ADDR
// break ;
84436: GO 84440
// end ; end ;
84438: GO 84240
84440: POP
84441: POP
// if result then
84442: LD_VAR 0 1
84446: IFFALSE 84506
// begin ToLua ( playSibBomb() ) ;
84448: LD_STRING playSibBomb()
84450: PPUSH
84451: CALL_OW 559
// wait ( 0 0$14 ) ;
84455: LD_INT 490
84457: PPUSH
84458: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
84462: LD_VAR 0 1
84466: PUSH
84467: LD_INT 1
84469: ARRAY
84470: PPUSH
84471: LD_VAR 0 1
84475: PUSH
84476: LD_INT 2
84478: ARRAY
84479: PPUSH
84480: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
84484: LD_VAR 0 1
84488: PUSH
84489: LD_INT 1
84491: ARRAY
84492: PPUSH
84493: LD_VAR 0 1
84497: PUSH
84498: LD_INT 2
84500: ARRAY
84501: PPUSH
84502: CALL_OW 429
// end ; end ;
84506: LD_VAR 0 1
84510: RET
// every 0 0$1 trigger StreamModeActive and sReset do
84511: LD_EXP 103
84515: PUSH
84516: LD_EXP 125
84520: AND
84521: IFFALSE 84533
84523: GO 84525
84525: DISABLE
// YouLost (  ) ;
84526: LD_STRING 
84528: PPUSH
84529: CALL_OW 104
84533: END
// every 0 0$1 trigger StreamModeActive and sFog do
84534: LD_EXP 103
84538: PUSH
84539: LD_EXP 124
84543: AND
84544: IFFALSE 84558
84546: GO 84548
84548: DISABLE
// FogOff ( your_side ) ;
84549: LD_OWVAR 2
84553: PPUSH
84554: CALL_OW 344
84558: END
// every 0 0$1 trigger StreamModeActive and sSun do
84559: LD_EXP 103
84563: PUSH
84564: LD_EXP 126
84568: AND
84569: IFFALSE 84597
84571: GO 84573
84573: DISABLE
// begin solar_recharge_percent := 0 ;
84574: LD_ADDR_OWVAR 79
84578: PUSH
84579: LD_INT 0
84581: ST_TO_ADDR
// wait ( 5 5$00 ) ;
84582: LD_INT 10500
84584: PPUSH
84585: CALL_OW 67
// solar_recharge_percent := 100 ;
84589: LD_ADDR_OWVAR 79
84593: PUSH
84594: LD_INT 100
84596: ST_TO_ADDR
// end ;
84597: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
84598: LD_EXP 103
84602: PUSH
84603: LD_EXP 127
84607: AND
84608: IFFALSE 84847
84610: GO 84612
84612: DISABLE
84613: LD_INT 0
84615: PPUSH
84616: PPUSH
84617: PPUSH
// begin tmp := [ ] ;
84618: LD_ADDR_VAR 0 3
84622: PUSH
84623: EMPTY
84624: ST_TO_ADDR
// for i := 1 to 6 do
84625: LD_ADDR_VAR 0 1
84629: PUSH
84630: DOUBLE
84631: LD_INT 1
84633: DEC
84634: ST_TO_ADDR
84635: LD_INT 6
84637: PUSH
84638: FOR_TO
84639: IFFALSE 84744
// begin uc_nation := nation_nature ;
84641: LD_ADDR_OWVAR 21
84645: PUSH
84646: LD_INT 0
84648: ST_TO_ADDR
// uc_side := 0 ;
84649: LD_ADDR_OWVAR 20
84653: PUSH
84654: LD_INT 0
84656: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
84657: LD_ADDR_OWVAR 29
84661: PUSH
84662: LD_INT 12
84664: PUSH
84665: LD_INT 12
84667: PUSH
84668: EMPTY
84669: LIST
84670: LIST
84671: ST_TO_ADDR
// hc_agressivity := 20 ;
84672: LD_ADDR_OWVAR 35
84676: PUSH
84677: LD_INT 20
84679: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
84680: LD_ADDR_OWVAR 28
84684: PUSH
84685: LD_INT 17
84687: ST_TO_ADDR
// hc_gallery :=  ;
84688: LD_ADDR_OWVAR 33
84692: PUSH
84693: LD_STRING 
84695: ST_TO_ADDR
// hc_name :=  ;
84696: LD_ADDR_OWVAR 26
84700: PUSH
84701: LD_STRING 
84703: ST_TO_ADDR
// un := CreateHuman ;
84704: LD_ADDR_VAR 0 2
84708: PUSH
84709: CALL_OW 44
84713: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
84714: LD_VAR 0 2
84718: PPUSH
84719: LD_INT 1
84721: PPUSH
84722: CALL_OW 51
// tmp := tmp ^ un ;
84726: LD_ADDR_VAR 0 3
84730: PUSH
84731: LD_VAR 0 3
84735: PUSH
84736: LD_VAR 0 2
84740: ADD
84741: ST_TO_ADDR
// end ;
84742: GO 84638
84744: POP
84745: POP
// repeat wait ( 0 0$1 ) ;
84746: LD_INT 35
84748: PPUSH
84749: CALL_OW 67
// for un in tmp do
84753: LD_ADDR_VAR 0 2
84757: PUSH
84758: LD_VAR 0 3
84762: PUSH
84763: FOR_IN
84764: IFFALSE 84838
// begin if IsDead ( un ) then
84766: LD_VAR 0 2
84770: PPUSH
84771: CALL_OW 301
84775: IFFALSE 84795
// begin tmp := tmp diff un ;
84777: LD_ADDR_VAR 0 3
84781: PUSH
84782: LD_VAR 0 3
84786: PUSH
84787: LD_VAR 0 2
84791: DIFF
84792: ST_TO_ADDR
// continue ;
84793: GO 84763
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
84795: LD_VAR 0 2
84799: PPUSH
84800: LD_INT 3
84802: PUSH
84803: LD_INT 22
84805: PUSH
84806: LD_INT 0
84808: PUSH
84809: EMPTY
84810: LIST
84811: LIST
84812: PUSH
84813: EMPTY
84814: LIST
84815: LIST
84816: PPUSH
84817: CALL_OW 69
84821: PPUSH
84822: LD_VAR 0 2
84826: PPUSH
84827: CALL_OW 74
84831: PPUSH
84832: CALL_OW 115
// end ;
84836: GO 84763
84838: POP
84839: POP
// until not tmp ;
84840: LD_VAR 0 3
84844: NOT
84845: IFFALSE 84746
// end ;
84847: PPOPN 3
84849: END
// every 0 0$1 trigger StreamModeActive and sTroll do
84850: LD_EXP 103
84854: PUSH
84855: LD_EXP 128
84859: AND
84860: IFFALSE 84914
84862: GO 84864
84864: DISABLE
// begin ToLua ( displayTroll(); ) ;
84865: LD_STRING displayTroll();
84867: PPUSH
84868: CALL_OW 559
// wait ( 3 3$00 ) ;
84872: LD_INT 6300
84874: PPUSH
84875: CALL_OW 67
// ToLua ( hideTroll(); ) ;
84879: LD_STRING hideTroll();
84881: PPUSH
84882: CALL_OW 559
// wait ( 1 1$00 ) ;
84886: LD_INT 2100
84888: PPUSH
84889: CALL_OW 67
// ToLua ( displayTroll(); ) ;
84893: LD_STRING displayTroll();
84895: PPUSH
84896: CALL_OW 559
// wait ( 1 1$00 ) ;
84900: LD_INT 2100
84902: PPUSH
84903: CALL_OW 67
// ToLua ( hideTroll(); ) ;
84907: LD_STRING hideTroll();
84909: PPUSH
84910: CALL_OW 559
// end ;
84914: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
84915: LD_EXP 103
84919: PUSH
84920: LD_EXP 129
84924: AND
84925: IFFALSE 84988
84927: GO 84929
84929: DISABLE
84930: LD_INT 0
84932: PPUSH
// begin p := 0 ;
84933: LD_ADDR_VAR 0 1
84937: PUSH
84938: LD_INT 0
84940: ST_TO_ADDR
// repeat game_speed := 1 ;
84941: LD_ADDR_OWVAR 65
84945: PUSH
84946: LD_INT 1
84948: ST_TO_ADDR
// wait ( 0 0$1 ) ;
84949: LD_INT 35
84951: PPUSH
84952: CALL_OW 67
// p := p + 1 ;
84956: LD_ADDR_VAR 0 1
84960: PUSH
84961: LD_VAR 0 1
84965: PUSH
84966: LD_INT 1
84968: PLUS
84969: ST_TO_ADDR
// until p >= 60 ;
84970: LD_VAR 0 1
84974: PUSH
84975: LD_INT 60
84977: GREATEREQUAL
84978: IFFALSE 84941
// game_speed := 4 ;
84980: LD_ADDR_OWVAR 65
84984: PUSH
84985: LD_INT 4
84987: ST_TO_ADDR
// end ;
84988: PPOPN 1
84990: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
84991: LD_EXP 103
84995: PUSH
84996: LD_EXP 130
85000: AND
85001: IFFALSE 85147
85003: GO 85005
85005: DISABLE
85006: LD_INT 0
85008: PPUSH
85009: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
85010: LD_ADDR_VAR 0 1
85014: PUSH
85015: LD_INT 22
85017: PUSH
85018: LD_OWVAR 2
85022: PUSH
85023: EMPTY
85024: LIST
85025: LIST
85026: PUSH
85027: LD_INT 2
85029: PUSH
85030: LD_INT 30
85032: PUSH
85033: LD_INT 0
85035: PUSH
85036: EMPTY
85037: LIST
85038: LIST
85039: PUSH
85040: LD_INT 30
85042: PUSH
85043: LD_INT 1
85045: PUSH
85046: EMPTY
85047: LIST
85048: LIST
85049: PUSH
85050: EMPTY
85051: LIST
85052: LIST
85053: LIST
85054: PUSH
85055: EMPTY
85056: LIST
85057: LIST
85058: PPUSH
85059: CALL_OW 69
85063: ST_TO_ADDR
// if not depot then
85064: LD_VAR 0 1
85068: NOT
85069: IFFALSE 85073
// exit ;
85071: GO 85147
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
85073: LD_ADDR_VAR 0 2
85077: PUSH
85078: LD_VAR 0 1
85082: PUSH
85083: LD_INT 1
85085: PPUSH
85086: LD_VAR 0 1
85090: PPUSH
85091: CALL_OW 12
85095: ARRAY
85096: PPUSH
85097: CALL_OW 274
85101: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
85102: LD_VAR 0 2
85106: PPUSH
85107: LD_INT 1
85109: PPUSH
85110: LD_INT 0
85112: PPUSH
85113: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
85117: LD_VAR 0 2
85121: PPUSH
85122: LD_INT 2
85124: PPUSH
85125: LD_INT 0
85127: PPUSH
85128: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
85132: LD_VAR 0 2
85136: PPUSH
85137: LD_INT 3
85139: PPUSH
85140: LD_INT 0
85142: PPUSH
85143: CALL_OW 277
// end ;
85147: PPOPN 2
85149: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
85150: LD_EXP 103
85154: PUSH
85155: LD_EXP 131
85159: AND
85160: IFFALSE 85257
85162: GO 85164
85164: DISABLE
85165: LD_INT 0
85167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
85168: LD_ADDR_VAR 0 1
85172: PUSH
85173: LD_INT 22
85175: PUSH
85176: LD_OWVAR 2
85180: PUSH
85181: EMPTY
85182: LIST
85183: LIST
85184: PUSH
85185: LD_INT 21
85187: PUSH
85188: LD_INT 1
85190: PUSH
85191: EMPTY
85192: LIST
85193: LIST
85194: PUSH
85195: LD_INT 3
85197: PUSH
85198: LD_INT 23
85200: PUSH
85201: LD_INT 0
85203: PUSH
85204: EMPTY
85205: LIST
85206: LIST
85207: PUSH
85208: EMPTY
85209: LIST
85210: LIST
85211: PUSH
85212: EMPTY
85213: LIST
85214: LIST
85215: LIST
85216: PPUSH
85217: CALL_OW 69
85221: ST_TO_ADDR
// if not tmp then
85222: LD_VAR 0 1
85226: NOT
85227: IFFALSE 85231
// exit ;
85229: GO 85257
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
85231: LD_VAR 0 1
85235: PUSH
85236: LD_INT 1
85238: PPUSH
85239: LD_VAR 0 1
85243: PPUSH
85244: CALL_OW 12
85248: ARRAY
85249: PPUSH
85250: LD_INT 200
85252: PPUSH
85253: CALL_OW 234
// end ;
85257: PPOPN 1
85259: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
85260: LD_EXP 103
85264: PUSH
85265: LD_EXP 132
85269: AND
85270: IFFALSE 85349
85272: GO 85274
85274: DISABLE
85275: LD_INT 0
85277: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
85278: LD_ADDR_VAR 0 1
85282: PUSH
85283: LD_INT 22
85285: PUSH
85286: LD_OWVAR 2
85290: PUSH
85291: EMPTY
85292: LIST
85293: LIST
85294: PUSH
85295: LD_INT 21
85297: PUSH
85298: LD_INT 2
85300: PUSH
85301: EMPTY
85302: LIST
85303: LIST
85304: PUSH
85305: EMPTY
85306: LIST
85307: LIST
85308: PPUSH
85309: CALL_OW 69
85313: ST_TO_ADDR
// if not tmp then
85314: LD_VAR 0 1
85318: NOT
85319: IFFALSE 85323
// exit ;
85321: GO 85349
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
85323: LD_VAR 0 1
85327: PUSH
85328: LD_INT 1
85330: PPUSH
85331: LD_VAR 0 1
85335: PPUSH
85336: CALL_OW 12
85340: ARRAY
85341: PPUSH
85342: LD_INT 60
85344: PPUSH
85345: CALL_OW 234
// end ;
85349: PPOPN 1
85351: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
85352: LD_EXP 103
85356: PUSH
85357: LD_EXP 133
85361: AND
85362: IFFALSE 85461
85364: GO 85366
85366: DISABLE
85367: LD_INT 0
85369: PPUSH
85370: PPUSH
// begin enable ;
85371: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
85372: LD_ADDR_VAR 0 1
85376: PUSH
85377: LD_INT 22
85379: PUSH
85380: LD_OWVAR 2
85384: PUSH
85385: EMPTY
85386: LIST
85387: LIST
85388: PUSH
85389: LD_INT 61
85391: PUSH
85392: EMPTY
85393: LIST
85394: PUSH
85395: LD_INT 33
85397: PUSH
85398: LD_INT 2
85400: PUSH
85401: EMPTY
85402: LIST
85403: LIST
85404: PUSH
85405: EMPTY
85406: LIST
85407: LIST
85408: LIST
85409: PPUSH
85410: CALL_OW 69
85414: ST_TO_ADDR
// if not tmp then
85415: LD_VAR 0 1
85419: NOT
85420: IFFALSE 85424
// exit ;
85422: GO 85461
// for i in tmp do
85424: LD_ADDR_VAR 0 2
85428: PUSH
85429: LD_VAR 0 1
85433: PUSH
85434: FOR_IN
85435: IFFALSE 85459
// if IsControledBy ( i ) then
85437: LD_VAR 0 2
85441: PPUSH
85442: CALL_OW 312
85446: IFFALSE 85457
// ComUnlink ( i ) ;
85448: LD_VAR 0 2
85452: PPUSH
85453: CALL_OW 136
85457: GO 85434
85459: POP
85460: POP
// end ;
85461: PPOPN 2
85463: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
85464: LD_EXP 103
85468: PUSH
85469: LD_EXP 134
85473: AND
85474: IFFALSE 85614
85476: GO 85478
85478: DISABLE
85479: LD_INT 0
85481: PPUSH
85482: PPUSH
// begin ToLua ( displayPowell(); ) ;
85483: LD_STRING displayPowell();
85485: PPUSH
85486: CALL_OW 559
// uc_side := 0 ;
85490: LD_ADDR_OWVAR 20
85494: PUSH
85495: LD_INT 0
85497: ST_TO_ADDR
// uc_nation := 2 ;
85498: LD_ADDR_OWVAR 21
85502: PUSH
85503: LD_INT 2
85505: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
85506: LD_ADDR_OWVAR 37
85510: PUSH
85511: LD_INT 14
85513: ST_TO_ADDR
// vc_engine := engine_siberite ;
85514: LD_ADDR_OWVAR 39
85518: PUSH
85519: LD_INT 3
85521: ST_TO_ADDR
// vc_control := control_apeman ;
85522: LD_ADDR_OWVAR 38
85526: PUSH
85527: LD_INT 5
85529: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
85530: LD_ADDR_OWVAR 40
85534: PUSH
85535: LD_INT 29
85537: ST_TO_ADDR
// un := CreateVehicle ;
85538: LD_ADDR_VAR 0 2
85542: PUSH
85543: CALL_OW 45
85547: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
85548: LD_VAR 0 2
85552: PPUSH
85553: LD_INT 1
85555: PPUSH
85556: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
85560: LD_INT 35
85562: PPUSH
85563: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
85567: LD_VAR 0 2
85571: PPUSH
85572: LD_INT 22
85574: PUSH
85575: LD_OWVAR 2
85579: PUSH
85580: EMPTY
85581: LIST
85582: LIST
85583: PPUSH
85584: CALL_OW 69
85588: PPUSH
85589: LD_VAR 0 2
85593: PPUSH
85594: CALL_OW 74
85598: PPUSH
85599: CALL_OW 115
// until IsDead ( un ) ;
85603: LD_VAR 0 2
85607: PPUSH
85608: CALL_OW 301
85612: IFFALSE 85560
// end ;
85614: PPOPN 2
85616: END
// every 0 0$1 trigger StreamModeActive and sStu do
85617: LD_EXP 103
85621: PUSH
85622: LD_EXP 142
85626: AND
85627: IFFALSE 85643
85629: GO 85631
85631: DISABLE
// begin ToLua ( displayStucuk(); ) ;
85632: LD_STRING displayStucuk();
85634: PPUSH
85635: CALL_OW 559
// ResetFog ;
85639: CALL_OW 335
// end ;
85643: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
85644: LD_EXP 103
85648: PUSH
85649: LD_EXP 135
85653: AND
85654: IFFALSE 85795
85656: GO 85658
85658: DISABLE
85659: LD_INT 0
85661: PPUSH
85662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
85663: LD_ADDR_VAR 0 2
85667: PUSH
85668: LD_INT 22
85670: PUSH
85671: LD_OWVAR 2
85675: PUSH
85676: EMPTY
85677: LIST
85678: LIST
85679: PUSH
85680: LD_INT 21
85682: PUSH
85683: LD_INT 1
85685: PUSH
85686: EMPTY
85687: LIST
85688: LIST
85689: PUSH
85690: EMPTY
85691: LIST
85692: LIST
85693: PPUSH
85694: CALL_OW 69
85698: ST_TO_ADDR
// if not tmp then
85699: LD_VAR 0 2
85703: NOT
85704: IFFALSE 85708
// exit ;
85706: GO 85795
// un := tmp [ rand ( 1 , tmp ) ] ;
85708: LD_ADDR_VAR 0 1
85712: PUSH
85713: LD_VAR 0 2
85717: PUSH
85718: LD_INT 1
85720: PPUSH
85721: LD_VAR 0 2
85725: PPUSH
85726: CALL_OW 12
85730: ARRAY
85731: ST_TO_ADDR
// SetSide ( un , 0 ) ;
85732: LD_VAR 0 1
85736: PPUSH
85737: LD_INT 0
85739: PPUSH
85740: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
85744: LD_VAR 0 1
85748: PPUSH
85749: LD_OWVAR 3
85753: PUSH
85754: LD_VAR 0 1
85758: DIFF
85759: PPUSH
85760: LD_VAR 0 1
85764: PPUSH
85765: CALL_OW 74
85769: PPUSH
85770: CALL_OW 115
// wait ( 0 0$20 ) ;
85774: LD_INT 700
85776: PPUSH
85777: CALL_OW 67
// SetSide ( un , your_side ) ;
85781: LD_VAR 0 1
85785: PPUSH
85786: LD_OWVAR 2
85790: PPUSH
85791: CALL_OW 235
// end ;
85795: PPOPN 2
85797: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
85798: LD_EXP 103
85802: PUSH
85803: LD_EXP 136
85807: AND
85808: IFFALSE 85914
85810: GO 85812
85812: DISABLE
85813: LD_INT 0
85815: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
85816: LD_ADDR_VAR 0 1
85820: PUSH
85821: LD_INT 22
85823: PUSH
85824: LD_OWVAR 2
85828: PUSH
85829: EMPTY
85830: LIST
85831: LIST
85832: PUSH
85833: LD_INT 2
85835: PUSH
85836: LD_INT 30
85838: PUSH
85839: LD_INT 0
85841: PUSH
85842: EMPTY
85843: LIST
85844: LIST
85845: PUSH
85846: LD_INT 30
85848: PUSH
85849: LD_INT 1
85851: PUSH
85852: EMPTY
85853: LIST
85854: LIST
85855: PUSH
85856: EMPTY
85857: LIST
85858: LIST
85859: LIST
85860: PUSH
85861: EMPTY
85862: LIST
85863: LIST
85864: PPUSH
85865: CALL_OW 69
85869: ST_TO_ADDR
// if not depot then
85870: LD_VAR 0 1
85874: NOT
85875: IFFALSE 85879
// exit ;
85877: GO 85914
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
85879: LD_VAR 0 1
85883: PUSH
85884: LD_INT 1
85886: ARRAY
85887: PPUSH
85888: CALL_OW 250
85892: PPUSH
85893: LD_VAR 0 1
85897: PUSH
85898: LD_INT 1
85900: ARRAY
85901: PPUSH
85902: CALL_OW 251
85906: PPUSH
85907: LD_INT 70
85909: PPUSH
85910: CALL_OW 495
// end ;
85914: PPOPN 1
85916: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
85917: LD_EXP 103
85921: PUSH
85922: LD_EXP 137
85926: AND
85927: IFFALSE 86138
85929: GO 85931
85931: DISABLE
85932: LD_INT 0
85934: PPUSH
85935: PPUSH
85936: PPUSH
85937: PPUSH
85938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
85939: LD_ADDR_VAR 0 5
85943: PUSH
85944: LD_INT 22
85946: PUSH
85947: LD_OWVAR 2
85951: PUSH
85952: EMPTY
85953: LIST
85954: LIST
85955: PUSH
85956: LD_INT 21
85958: PUSH
85959: LD_INT 1
85961: PUSH
85962: EMPTY
85963: LIST
85964: LIST
85965: PUSH
85966: EMPTY
85967: LIST
85968: LIST
85969: PPUSH
85970: CALL_OW 69
85974: ST_TO_ADDR
// if not tmp then
85975: LD_VAR 0 5
85979: NOT
85980: IFFALSE 85984
// exit ;
85982: GO 86138
// for i in tmp do
85984: LD_ADDR_VAR 0 1
85988: PUSH
85989: LD_VAR 0 5
85993: PUSH
85994: FOR_IN
85995: IFFALSE 86136
// begin d := rand ( 0 , 5 ) ;
85997: LD_ADDR_VAR 0 4
86001: PUSH
86002: LD_INT 0
86004: PPUSH
86005: LD_INT 5
86007: PPUSH
86008: CALL_OW 12
86012: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
86013: LD_ADDR_VAR 0 2
86017: PUSH
86018: LD_VAR 0 1
86022: PPUSH
86023: CALL_OW 250
86027: PPUSH
86028: LD_VAR 0 4
86032: PPUSH
86033: LD_INT 3
86035: PPUSH
86036: LD_INT 12
86038: PPUSH
86039: CALL_OW 12
86043: PPUSH
86044: CALL_OW 272
86048: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
86049: LD_ADDR_VAR 0 3
86053: PUSH
86054: LD_VAR 0 1
86058: PPUSH
86059: CALL_OW 251
86063: PPUSH
86064: LD_VAR 0 4
86068: PPUSH
86069: LD_INT 3
86071: PPUSH
86072: LD_INT 12
86074: PPUSH
86075: CALL_OW 12
86079: PPUSH
86080: CALL_OW 273
86084: ST_TO_ADDR
// if ValidHex ( x , y ) then
86085: LD_VAR 0 2
86089: PPUSH
86090: LD_VAR 0 3
86094: PPUSH
86095: CALL_OW 488
86099: IFFALSE 86134
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
86101: LD_VAR 0 1
86105: PPUSH
86106: LD_VAR 0 2
86110: PPUSH
86111: LD_VAR 0 3
86115: PPUSH
86116: LD_INT 3
86118: PPUSH
86119: LD_INT 6
86121: PPUSH
86122: CALL_OW 12
86126: PPUSH
86127: LD_INT 1
86129: PPUSH
86130: CALL_OW 483
// end ;
86134: GO 85994
86136: POP
86137: POP
// end ;
86138: PPOPN 5
86140: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
86141: LD_EXP 103
86145: PUSH
86146: LD_EXP 138
86150: AND
86151: IFFALSE 86245
86153: GO 86155
86155: DISABLE
86156: LD_INT 0
86158: PPUSH
86159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
86160: LD_ADDR_VAR 0 2
86164: PUSH
86165: LD_INT 22
86167: PUSH
86168: LD_OWVAR 2
86172: PUSH
86173: EMPTY
86174: LIST
86175: LIST
86176: PUSH
86177: LD_INT 32
86179: PUSH
86180: LD_INT 1
86182: PUSH
86183: EMPTY
86184: LIST
86185: LIST
86186: PUSH
86187: LD_INT 21
86189: PUSH
86190: LD_INT 2
86192: PUSH
86193: EMPTY
86194: LIST
86195: LIST
86196: PUSH
86197: EMPTY
86198: LIST
86199: LIST
86200: LIST
86201: PPUSH
86202: CALL_OW 69
86206: ST_TO_ADDR
// if not tmp then
86207: LD_VAR 0 2
86211: NOT
86212: IFFALSE 86216
// exit ;
86214: GO 86245
// for i in tmp do
86216: LD_ADDR_VAR 0 1
86220: PUSH
86221: LD_VAR 0 2
86225: PUSH
86226: FOR_IN
86227: IFFALSE 86243
// SetFuel ( i , 0 ) ;
86229: LD_VAR 0 1
86233: PPUSH
86234: LD_INT 0
86236: PPUSH
86237: CALL_OW 240
86241: GO 86226
86243: POP
86244: POP
// end ;
86245: PPOPN 2
86247: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
86248: LD_EXP 103
86252: PUSH
86253: LD_EXP 139
86257: AND
86258: IFFALSE 86324
86260: GO 86262
86262: DISABLE
86263: LD_INT 0
86265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
86266: LD_ADDR_VAR 0 1
86270: PUSH
86271: LD_INT 22
86273: PUSH
86274: LD_OWVAR 2
86278: PUSH
86279: EMPTY
86280: LIST
86281: LIST
86282: PUSH
86283: LD_INT 30
86285: PUSH
86286: LD_INT 29
86288: PUSH
86289: EMPTY
86290: LIST
86291: LIST
86292: PUSH
86293: EMPTY
86294: LIST
86295: LIST
86296: PPUSH
86297: CALL_OW 69
86301: ST_TO_ADDR
// if not tmp then
86302: LD_VAR 0 1
86306: NOT
86307: IFFALSE 86311
// exit ;
86309: GO 86324
// DestroyUnit ( tmp [ 1 ] ) ;
86311: LD_VAR 0 1
86315: PUSH
86316: LD_INT 1
86318: ARRAY
86319: PPUSH
86320: CALL_OW 65
// end ;
86324: PPOPN 1
86326: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
86327: LD_EXP 103
86331: PUSH
86332: LD_EXP 141
86336: AND
86337: IFFALSE 86466
86339: GO 86341
86341: DISABLE
86342: LD_INT 0
86344: PPUSH
// begin uc_side := 0 ;
86345: LD_ADDR_OWVAR 20
86349: PUSH
86350: LD_INT 0
86352: ST_TO_ADDR
// uc_nation := nation_arabian ;
86353: LD_ADDR_OWVAR 21
86357: PUSH
86358: LD_INT 2
86360: ST_TO_ADDR
// hc_gallery :=  ;
86361: LD_ADDR_OWVAR 33
86365: PUSH
86366: LD_STRING 
86368: ST_TO_ADDR
// hc_name :=  ;
86369: LD_ADDR_OWVAR 26
86373: PUSH
86374: LD_STRING 
86376: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
86377: LD_INT 1
86379: PPUSH
86380: LD_INT 11
86382: PPUSH
86383: LD_INT 10
86385: PPUSH
86386: CALL_OW 380
// un := CreateHuman ;
86390: LD_ADDR_VAR 0 1
86394: PUSH
86395: CALL_OW 44
86399: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
86400: LD_VAR 0 1
86404: PPUSH
86405: LD_INT 1
86407: PPUSH
86408: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
86412: LD_INT 35
86414: PPUSH
86415: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
86419: LD_VAR 0 1
86423: PPUSH
86424: LD_INT 22
86426: PUSH
86427: LD_OWVAR 2
86431: PUSH
86432: EMPTY
86433: LIST
86434: LIST
86435: PPUSH
86436: CALL_OW 69
86440: PPUSH
86441: LD_VAR 0 1
86445: PPUSH
86446: CALL_OW 74
86450: PPUSH
86451: CALL_OW 115
// until IsDead ( un ) ;
86455: LD_VAR 0 1
86459: PPUSH
86460: CALL_OW 301
86464: IFFALSE 86412
// end ;
86466: PPOPN 1
86468: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
86469: LD_EXP 103
86473: PUSH
86474: LD_EXP 143
86478: AND
86479: IFFALSE 86491
86481: GO 86483
86483: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
86484: LD_STRING earthquake(getX(game), 0, 32)
86486: PPUSH
86487: CALL_OW 559
86491: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
86492: LD_EXP 103
86496: PUSH
86497: LD_EXP 144
86501: AND
86502: IFFALSE 86593
86504: GO 86506
86506: DISABLE
86507: LD_INT 0
86509: PPUSH
// begin enable ;
86510: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
86511: LD_ADDR_VAR 0 1
86515: PUSH
86516: LD_INT 22
86518: PUSH
86519: LD_OWVAR 2
86523: PUSH
86524: EMPTY
86525: LIST
86526: LIST
86527: PUSH
86528: LD_INT 21
86530: PUSH
86531: LD_INT 2
86533: PUSH
86534: EMPTY
86535: LIST
86536: LIST
86537: PUSH
86538: LD_INT 33
86540: PUSH
86541: LD_INT 3
86543: PUSH
86544: EMPTY
86545: LIST
86546: LIST
86547: PUSH
86548: EMPTY
86549: LIST
86550: LIST
86551: LIST
86552: PPUSH
86553: CALL_OW 69
86557: ST_TO_ADDR
// if not tmp then
86558: LD_VAR 0 1
86562: NOT
86563: IFFALSE 86567
// exit ;
86565: GO 86593
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
86567: LD_VAR 0 1
86571: PUSH
86572: LD_INT 1
86574: PPUSH
86575: LD_VAR 0 1
86579: PPUSH
86580: CALL_OW 12
86584: ARRAY
86585: PPUSH
86586: LD_INT 1
86588: PPUSH
86589: CALL_OW 234
// end ;
86593: PPOPN 1
86595: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
86596: LD_EXP 103
86600: PUSH
86601: LD_EXP 145
86605: AND
86606: IFFALSE 86747
86608: GO 86610
86610: DISABLE
86611: LD_INT 0
86613: PPUSH
86614: PPUSH
86615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
86616: LD_ADDR_VAR 0 3
86620: PUSH
86621: LD_INT 22
86623: PUSH
86624: LD_OWVAR 2
86628: PUSH
86629: EMPTY
86630: LIST
86631: LIST
86632: PUSH
86633: LD_INT 25
86635: PUSH
86636: LD_INT 1
86638: PUSH
86639: EMPTY
86640: LIST
86641: LIST
86642: PUSH
86643: EMPTY
86644: LIST
86645: LIST
86646: PPUSH
86647: CALL_OW 69
86651: ST_TO_ADDR
// if not tmp then
86652: LD_VAR 0 3
86656: NOT
86657: IFFALSE 86661
// exit ;
86659: GO 86747
// un := tmp [ rand ( 1 , tmp ) ] ;
86661: LD_ADDR_VAR 0 2
86665: PUSH
86666: LD_VAR 0 3
86670: PUSH
86671: LD_INT 1
86673: PPUSH
86674: LD_VAR 0 3
86678: PPUSH
86679: CALL_OW 12
86683: ARRAY
86684: ST_TO_ADDR
// if Crawls ( un ) then
86685: LD_VAR 0 2
86689: PPUSH
86690: CALL_OW 318
86694: IFFALSE 86705
// ComWalk ( un ) ;
86696: LD_VAR 0 2
86700: PPUSH
86701: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
86705: LD_VAR 0 2
86709: PPUSH
86710: LD_INT 9
86712: PPUSH
86713: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
86717: LD_INT 28
86719: PPUSH
86720: LD_OWVAR 2
86724: PPUSH
86725: LD_INT 2
86727: PPUSH
86728: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
86732: LD_INT 29
86734: PPUSH
86735: LD_OWVAR 2
86739: PPUSH
86740: LD_INT 2
86742: PPUSH
86743: CALL_OW 322
// end ;
86747: PPOPN 3
86749: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
86750: LD_EXP 103
86754: PUSH
86755: LD_EXP 146
86759: AND
86760: IFFALSE 86871
86762: GO 86764
86764: DISABLE
86765: LD_INT 0
86767: PPUSH
86768: PPUSH
86769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
86770: LD_ADDR_VAR 0 3
86774: PUSH
86775: LD_INT 22
86777: PUSH
86778: LD_OWVAR 2
86782: PUSH
86783: EMPTY
86784: LIST
86785: LIST
86786: PUSH
86787: LD_INT 25
86789: PUSH
86790: LD_INT 1
86792: PUSH
86793: EMPTY
86794: LIST
86795: LIST
86796: PUSH
86797: EMPTY
86798: LIST
86799: LIST
86800: PPUSH
86801: CALL_OW 69
86805: ST_TO_ADDR
// if not tmp then
86806: LD_VAR 0 3
86810: NOT
86811: IFFALSE 86815
// exit ;
86813: GO 86871
// un := tmp [ rand ( 1 , tmp ) ] ;
86815: LD_ADDR_VAR 0 2
86819: PUSH
86820: LD_VAR 0 3
86824: PUSH
86825: LD_INT 1
86827: PPUSH
86828: LD_VAR 0 3
86832: PPUSH
86833: CALL_OW 12
86837: ARRAY
86838: ST_TO_ADDR
// if Crawls ( un ) then
86839: LD_VAR 0 2
86843: PPUSH
86844: CALL_OW 318
86848: IFFALSE 86859
// ComWalk ( un ) ;
86850: LD_VAR 0 2
86854: PPUSH
86855: CALL_OW 138
// SetClass ( un , class_mortar ) ;
86859: LD_VAR 0 2
86863: PPUSH
86864: LD_INT 8
86866: PPUSH
86867: CALL_OW 336
// end ;
86871: PPOPN 3
86873: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
86874: LD_EXP 103
86878: PUSH
86879: LD_EXP 147
86883: AND
86884: IFFALSE 87028
86886: GO 86888
86888: DISABLE
86889: LD_INT 0
86891: PPUSH
86892: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
86893: LD_ADDR_VAR 0 2
86897: PUSH
86898: LD_INT 22
86900: PUSH
86901: LD_OWVAR 2
86905: PUSH
86906: EMPTY
86907: LIST
86908: LIST
86909: PUSH
86910: LD_INT 21
86912: PUSH
86913: LD_INT 2
86915: PUSH
86916: EMPTY
86917: LIST
86918: LIST
86919: PUSH
86920: LD_INT 2
86922: PUSH
86923: LD_INT 34
86925: PUSH
86926: LD_INT 12
86928: PUSH
86929: EMPTY
86930: LIST
86931: LIST
86932: PUSH
86933: LD_INT 34
86935: PUSH
86936: LD_INT 51
86938: PUSH
86939: EMPTY
86940: LIST
86941: LIST
86942: PUSH
86943: LD_INT 34
86945: PUSH
86946: LD_INT 32
86948: PUSH
86949: EMPTY
86950: LIST
86951: LIST
86952: PUSH
86953: EMPTY
86954: LIST
86955: LIST
86956: LIST
86957: LIST
86958: PUSH
86959: EMPTY
86960: LIST
86961: LIST
86962: LIST
86963: PPUSH
86964: CALL_OW 69
86968: ST_TO_ADDR
// if not tmp then
86969: LD_VAR 0 2
86973: NOT
86974: IFFALSE 86978
// exit ;
86976: GO 87028
// for i in tmp do
86978: LD_ADDR_VAR 0 1
86982: PUSH
86983: LD_VAR 0 2
86987: PUSH
86988: FOR_IN
86989: IFFALSE 87026
// if GetCargo ( i , mat_artifact ) = 0 then
86991: LD_VAR 0 1
86995: PPUSH
86996: LD_INT 4
86998: PPUSH
86999: CALL_OW 289
87003: PUSH
87004: LD_INT 0
87006: EQUAL
87007: IFFALSE 87024
// SetCargo ( i , mat_siberit , 100 ) ;
87009: LD_VAR 0 1
87013: PPUSH
87014: LD_INT 3
87016: PPUSH
87017: LD_INT 100
87019: PPUSH
87020: CALL_OW 290
87024: GO 86988
87026: POP
87027: POP
// end ;
87028: PPOPN 2
87030: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
87031: LD_EXP 103
87035: PUSH
87036: LD_EXP 148
87040: AND
87041: IFFALSE 87194
87043: GO 87045
87045: DISABLE
87046: LD_INT 0
87048: PPUSH
87049: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
87050: LD_ADDR_VAR 0 2
87054: PUSH
87055: LD_INT 22
87057: PUSH
87058: LD_OWVAR 2
87062: PUSH
87063: EMPTY
87064: LIST
87065: LIST
87066: PPUSH
87067: CALL_OW 69
87071: ST_TO_ADDR
// if not tmp then
87072: LD_VAR 0 2
87076: NOT
87077: IFFALSE 87081
// exit ;
87079: GO 87194
// for i := 1 to 2 do
87081: LD_ADDR_VAR 0 1
87085: PUSH
87086: DOUBLE
87087: LD_INT 1
87089: DEC
87090: ST_TO_ADDR
87091: LD_INT 2
87093: PUSH
87094: FOR_TO
87095: IFFALSE 87192
// begin uc_side := your_side ;
87097: LD_ADDR_OWVAR 20
87101: PUSH
87102: LD_OWVAR 2
87106: ST_TO_ADDR
// uc_nation := nation_american ;
87107: LD_ADDR_OWVAR 21
87111: PUSH
87112: LD_INT 1
87114: ST_TO_ADDR
// vc_chassis := us_morphling ;
87115: LD_ADDR_OWVAR 37
87119: PUSH
87120: LD_INT 5
87122: ST_TO_ADDR
// vc_engine := engine_siberite ;
87123: LD_ADDR_OWVAR 39
87127: PUSH
87128: LD_INT 3
87130: ST_TO_ADDR
// vc_control := control_computer ;
87131: LD_ADDR_OWVAR 38
87135: PUSH
87136: LD_INT 3
87138: ST_TO_ADDR
// vc_weapon := us_double_laser ;
87139: LD_ADDR_OWVAR 40
87143: PUSH
87144: LD_INT 10
87146: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
87147: CALL_OW 45
87151: PPUSH
87152: LD_VAR 0 2
87156: PUSH
87157: LD_INT 1
87159: ARRAY
87160: PPUSH
87161: CALL_OW 250
87165: PPUSH
87166: LD_VAR 0 2
87170: PUSH
87171: LD_INT 1
87173: ARRAY
87174: PPUSH
87175: CALL_OW 251
87179: PPUSH
87180: LD_INT 12
87182: PPUSH
87183: LD_INT 1
87185: PPUSH
87186: CALL_OW 50
// end ;
87190: GO 87094
87192: POP
87193: POP
// end ;
87194: PPOPN 2
87196: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
87197: LD_EXP 103
87201: PUSH
87202: LD_EXP 149
87206: AND
87207: IFFALSE 87429
87209: GO 87211
87211: DISABLE
87212: LD_INT 0
87214: PPUSH
87215: PPUSH
87216: PPUSH
87217: PPUSH
87218: PPUSH
87219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
87220: LD_ADDR_VAR 0 6
87224: PUSH
87225: LD_INT 22
87227: PUSH
87228: LD_OWVAR 2
87232: PUSH
87233: EMPTY
87234: LIST
87235: LIST
87236: PUSH
87237: LD_INT 21
87239: PUSH
87240: LD_INT 1
87242: PUSH
87243: EMPTY
87244: LIST
87245: LIST
87246: PUSH
87247: LD_INT 3
87249: PUSH
87250: LD_INT 23
87252: PUSH
87253: LD_INT 0
87255: PUSH
87256: EMPTY
87257: LIST
87258: LIST
87259: PUSH
87260: EMPTY
87261: LIST
87262: LIST
87263: PUSH
87264: EMPTY
87265: LIST
87266: LIST
87267: LIST
87268: PPUSH
87269: CALL_OW 69
87273: ST_TO_ADDR
// if not tmp then
87274: LD_VAR 0 6
87278: NOT
87279: IFFALSE 87283
// exit ;
87281: GO 87429
// s1 := rand ( 1 , 4 ) ;
87283: LD_ADDR_VAR 0 2
87287: PUSH
87288: LD_INT 1
87290: PPUSH
87291: LD_INT 4
87293: PPUSH
87294: CALL_OW 12
87298: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
87299: LD_ADDR_VAR 0 4
87303: PUSH
87304: LD_VAR 0 6
87308: PUSH
87309: LD_INT 1
87311: ARRAY
87312: PPUSH
87313: LD_VAR 0 2
87317: PPUSH
87318: CALL_OW 259
87322: ST_TO_ADDR
// if s1 = 1 then
87323: LD_VAR 0 2
87327: PUSH
87328: LD_INT 1
87330: EQUAL
87331: IFFALSE 87351
// s2 := rand ( 2 , 4 ) else
87333: LD_ADDR_VAR 0 3
87337: PUSH
87338: LD_INT 2
87340: PPUSH
87341: LD_INT 4
87343: PPUSH
87344: CALL_OW 12
87348: ST_TO_ADDR
87349: GO 87359
// s2 := 1 ;
87351: LD_ADDR_VAR 0 3
87355: PUSH
87356: LD_INT 1
87358: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
87359: LD_ADDR_VAR 0 5
87363: PUSH
87364: LD_VAR 0 6
87368: PUSH
87369: LD_INT 1
87371: ARRAY
87372: PPUSH
87373: LD_VAR 0 3
87377: PPUSH
87378: CALL_OW 259
87382: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
87383: LD_VAR 0 6
87387: PUSH
87388: LD_INT 1
87390: ARRAY
87391: PPUSH
87392: LD_VAR 0 2
87396: PPUSH
87397: LD_VAR 0 5
87401: PPUSH
87402: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
87406: LD_VAR 0 6
87410: PUSH
87411: LD_INT 1
87413: ARRAY
87414: PPUSH
87415: LD_VAR 0 3
87419: PPUSH
87420: LD_VAR 0 4
87424: PPUSH
87425: CALL_OW 237
// end ;
87429: PPOPN 6
87431: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
87432: LD_EXP 103
87436: PUSH
87437: LD_EXP 150
87441: AND
87442: IFFALSE 87521
87444: GO 87446
87446: DISABLE
87447: LD_INT 0
87449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
87450: LD_ADDR_VAR 0 1
87454: PUSH
87455: LD_INT 22
87457: PUSH
87458: LD_OWVAR 2
87462: PUSH
87463: EMPTY
87464: LIST
87465: LIST
87466: PUSH
87467: LD_INT 30
87469: PUSH
87470: LD_INT 3
87472: PUSH
87473: EMPTY
87474: LIST
87475: LIST
87476: PUSH
87477: EMPTY
87478: LIST
87479: LIST
87480: PPUSH
87481: CALL_OW 69
87485: ST_TO_ADDR
// if not tmp then
87486: LD_VAR 0 1
87490: NOT
87491: IFFALSE 87495
// exit ;
87493: GO 87521
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
87495: LD_VAR 0 1
87499: PUSH
87500: LD_INT 1
87502: PPUSH
87503: LD_VAR 0 1
87507: PPUSH
87508: CALL_OW 12
87512: ARRAY
87513: PPUSH
87514: LD_INT 1
87516: PPUSH
87517: CALL_OW 234
// end ;
87521: PPOPN 1
87523: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
87524: LD_EXP 103
87528: PUSH
87529: LD_EXP 151
87533: AND
87534: IFFALSE 87646
87536: GO 87538
87538: DISABLE
87539: LD_INT 0
87541: PPUSH
87542: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
87543: LD_ADDR_VAR 0 2
87547: PUSH
87548: LD_INT 22
87550: PUSH
87551: LD_OWVAR 2
87555: PUSH
87556: EMPTY
87557: LIST
87558: LIST
87559: PUSH
87560: LD_INT 2
87562: PUSH
87563: LD_INT 30
87565: PUSH
87566: LD_INT 27
87568: PUSH
87569: EMPTY
87570: LIST
87571: LIST
87572: PUSH
87573: LD_INT 30
87575: PUSH
87576: LD_INT 26
87578: PUSH
87579: EMPTY
87580: LIST
87581: LIST
87582: PUSH
87583: LD_INT 30
87585: PUSH
87586: LD_INT 28
87588: PUSH
87589: EMPTY
87590: LIST
87591: LIST
87592: PUSH
87593: EMPTY
87594: LIST
87595: LIST
87596: LIST
87597: LIST
87598: PUSH
87599: EMPTY
87600: LIST
87601: LIST
87602: PPUSH
87603: CALL_OW 69
87607: ST_TO_ADDR
// if not tmp then
87608: LD_VAR 0 2
87612: NOT
87613: IFFALSE 87617
// exit ;
87615: GO 87646
// for i in tmp do
87617: LD_ADDR_VAR 0 1
87621: PUSH
87622: LD_VAR 0 2
87626: PUSH
87627: FOR_IN
87628: IFFALSE 87644
// SetLives ( i , 1 ) ;
87630: LD_VAR 0 1
87634: PPUSH
87635: LD_INT 1
87637: PPUSH
87638: CALL_OW 234
87642: GO 87627
87644: POP
87645: POP
// end ;
87646: PPOPN 2
87648: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
87649: LD_EXP 103
87653: PUSH
87654: LD_EXP 152
87658: AND
87659: IFFALSE 87933
87661: GO 87663
87663: DISABLE
87664: LD_INT 0
87666: PPUSH
87667: PPUSH
87668: PPUSH
// begin i := rand ( 1 , 7 ) ;
87669: LD_ADDR_VAR 0 1
87673: PUSH
87674: LD_INT 1
87676: PPUSH
87677: LD_INT 7
87679: PPUSH
87680: CALL_OW 12
87684: ST_TO_ADDR
// case i of 1 :
87685: LD_VAR 0 1
87689: PUSH
87690: LD_INT 1
87692: DOUBLE
87693: EQUAL
87694: IFTRUE 87698
87696: GO 87708
87698: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
87699: LD_STRING earthquake(getX(game), 0, 32)
87701: PPUSH
87702: CALL_OW 559
87706: GO 87933
87708: LD_INT 2
87710: DOUBLE
87711: EQUAL
87712: IFTRUE 87716
87714: GO 87730
87716: POP
// begin ToLua ( displayStucuk(); ) ;
87717: LD_STRING displayStucuk();
87719: PPUSH
87720: CALL_OW 559
// ResetFog ;
87724: CALL_OW 335
// end ; 3 :
87728: GO 87933
87730: LD_INT 3
87732: DOUBLE
87733: EQUAL
87734: IFTRUE 87738
87736: GO 87842
87738: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
87739: LD_ADDR_VAR 0 2
87743: PUSH
87744: LD_INT 22
87746: PUSH
87747: LD_OWVAR 2
87751: PUSH
87752: EMPTY
87753: LIST
87754: LIST
87755: PUSH
87756: LD_INT 25
87758: PUSH
87759: LD_INT 1
87761: PUSH
87762: EMPTY
87763: LIST
87764: LIST
87765: PUSH
87766: EMPTY
87767: LIST
87768: LIST
87769: PPUSH
87770: CALL_OW 69
87774: ST_TO_ADDR
// if not tmp then
87775: LD_VAR 0 2
87779: NOT
87780: IFFALSE 87784
// exit ;
87782: GO 87933
// un := tmp [ rand ( 1 , tmp ) ] ;
87784: LD_ADDR_VAR 0 3
87788: PUSH
87789: LD_VAR 0 2
87793: PUSH
87794: LD_INT 1
87796: PPUSH
87797: LD_VAR 0 2
87801: PPUSH
87802: CALL_OW 12
87806: ARRAY
87807: ST_TO_ADDR
// if Crawls ( un ) then
87808: LD_VAR 0 3
87812: PPUSH
87813: CALL_OW 318
87817: IFFALSE 87828
// ComWalk ( un ) ;
87819: LD_VAR 0 3
87823: PPUSH
87824: CALL_OW 138
// SetClass ( un , class_mortar ) ;
87828: LD_VAR 0 3
87832: PPUSH
87833: LD_INT 8
87835: PPUSH
87836: CALL_OW 336
// end ; 4 :
87840: GO 87933
87842: LD_INT 4
87844: DOUBLE
87845: EQUAL
87846: IFTRUE 87850
87848: GO 87911
87850: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
87851: LD_ADDR_VAR 0 2
87855: PUSH
87856: LD_INT 22
87858: PUSH
87859: LD_OWVAR 2
87863: PUSH
87864: EMPTY
87865: LIST
87866: LIST
87867: PUSH
87868: LD_INT 30
87870: PUSH
87871: LD_INT 29
87873: PUSH
87874: EMPTY
87875: LIST
87876: LIST
87877: PUSH
87878: EMPTY
87879: LIST
87880: LIST
87881: PPUSH
87882: CALL_OW 69
87886: ST_TO_ADDR
// if not tmp then
87887: LD_VAR 0 2
87891: NOT
87892: IFFALSE 87896
// exit ;
87894: GO 87933
// DestroyUnit ( tmp [ 1 ] ) ;
87896: LD_VAR 0 2
87900: PUSH
87901: LD_INT 1
87903: ARRAY
87904: PPUSH
87905: CALL_OW 65
// end ; 5 .. 7 :
87909: GO 87933
87911: LD_INT 5
87913: DOUBLE
87914: GREATEREQUAL
87915: IFFALSE 87923
87917: LD_INT 7
87919: DOUBLE
87920: LESSEQUAL
87921: IFTRUE 87925
87923: GO 87932
87925: POP
// StreamSibBomb ; end ;
87926: CALL 84213 0 0
87930: GO 87933
87932: POP
// end ;
87933: PPOPN 3
87935: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
87936: LD_EXP 103
87940: PUSH
87941: LD_EXP 153
87945: AND
87946: IFFALSE 88102
87948: GO 87950
87950: DISABLE
87951: LD_INT 0
87953: PPUSH
87954: PPUSH
87955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
87956: LD_ADDR_VAR 0 2
87960: PUSH
87961: LD_INT 81
87963: PUSH
87964: LD_OWVAR 2
87968: PUSH
87969: EMPTY
87970: LIST
87971: LIST
87972: PUSH
87973: LD_INT 2
87975: PUSH
87976: LD_INT 21
87978: PUSH
87979: LD_INT 1
87981: PUSH
87982: EMPTY
87983: LIST
87984: LIST
87985: PUSH
87986: LD_INT 21
87988: PUSH
87989: LD_INT 2
87991: PUSH
87992: EMPTY
87993: LIST
87994: LIST
87995: PUSH
87996: EMPTY
87997: LIST
87998: LIST
87999: LIST
88000: PUSH
88001: EMPTY
88002: LIST
88003: LIST
88004: PPUSH
88005: CALL_OW 69
88009: ST_TO_ADDR
// if not tmp then
88010: LD_VAR 0 2
88014: NOT
88015: IFFALSE 88019
// exit ;
88017: GO 88102
// p := 0 ;
88019: LD_ADDR_VAR 0 3
88023: PUSH
88024: LD_INT 0
88026: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
88027: LD_INT 35
88029: PPUSH
88030: CALL_OW 67
// p := p + 1 ;
88034: LD_ADDR_VAR 0 3
88038: PUSH
88039: LD_VAR 0 3
88043: PUSH
88044: LD_INT 1
88046: PLUS
88047: ST_TO_ADDR
// for i in tmp do
88048: LD_ADDR_VAR 0 1
88052: PUSH
88053: LD_VAR 0 2
88057: PUSH
88058: FOR_IN
88059: IFFALSE 88090
// if GetLives ( i ) < 1000 then
88061: LD_VAR 0 1
88065: PPUSH
88066: CALL_OW 256
88070: PUSH
88071: LD_INT 1000
88073: LESS
88074: IFFALSE 88088
// SetLives ( i , 1000 ) ;
88076: LD_VAR 0 1
88080: PPUSH
88081: LD_INT 1000
88083: PPUSH
88084: CALL_OW 234
88088: GO 88058
88090: POP
88091: POP
// until p > 20 ;
88092: LD_VAR 0 3
88096: PUSH
88097: LD_INT 20
88099: GREATER
88100: IFFALSE 88027
// end ;
88102: PPOPN 3
88104: END
// every 0 0$1 trigger StreamModeActive and sTime do
88105: LD_EXP 103
88109: PUSH
88110: LD_EXP 154
88114: AND
88115: IFFALSE 88150
88117: GO 88119
88119: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
88120: LD_INT 28
88122: PPUSH
88123: LD_OWVAR 2
88127: PPUSH
88128: LD_INT 2
88130: PPUSH
88131: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
88135: LD_INT 30
88137: PPUSH
88138: LD_OWVAR 2
88142: PPUSH
88143: LD_INT 2
88145: PPUSH
88146: CALL_OW 322
// end ;
88150: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
88151: LD_EXP 103
88155: PUSH
88156: LD_EXP 155
88160: AND
88161: IFFALSE 88282
88163: GO 88165
88165: DISABLE
88166: LD_INT 0
88168: PPUSH
88169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
88170: LD_ADDR_VAR 0 2
88174: PUSH
88175: LD_INT 22
88177: PUSH
88178: LD_OWVAR 2
88182: PUSH
88183: EMPTY
88184: LIST
88185: LIST
88186: PUSH
88187: LD_INT 21
88189: PUSH
88190: LD_INT 1
88192: PUSH
88193: EMPTY
88194: LIST
88195: LIST
88196: PUSH
88197: LD_INT 3
88199: PUSH
88200: LD_INT 23
88202: PUSH
88203: LD_INT 0
88205: PUSH
88206: EMPTY
88207: LIST
88208: LIST
88209: PUSH
88210: EMPTY
88211: LIST
88212: LIST
88213: PUSH
88214: EMPTY
88215: LIST
88216: LIST
88217: LIST
88218: PPUSH
88219: CALL_OW 69
88223: ST_TO_ADDR
// if not tmp then
88224: LD_VAR 0 2
88228: NOT
88229: IFFALSE 88233
// exit ;
88231: GO 88282
// for i in tmp do
88233: LD_ADDR_VAR 0 1
88237: PUSH
88238: LD_VAR 0 2
88242: PUSH
88243: FOR_IN
88244: IFFALSE 88280
// begin if Crawls ( i ) then
88246: LD_VAR 0 1
88250: PPUSH
88251: CALL_OW 318
88255: IFFALSE 88266
// ComWalk ( i ) ;
88257: LD_VAR 0 1
88261: PPUSH
88262: CALL_OW 138
// SetClass ( i , 2 ) ;
88266: LD_VAR 0 1
88270: PPUSH
88271: LD_INT 2
88273: PPUSH
88274: CALL_OW 336
// end ;
88278: GO 88243
88280: POP
88281: POP
// end ;
88282: PPOPN 2
88284: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
88285: LD_EXP 103
88289: PUSH
88290: LD_EXP 156
88294: AND
88295: IFFALSE 88576
88297: GO 88299
88299: DISABLE
88300: LD_INT 0
88302: PPUSH
88303: PPUSH
88304: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
88305: LD_OWVAR 2
88309: PPUSH
88310: LD_INT 9
88312: PPUSH
88313: LD_INT 1
88315: PPUSH
88316: LD_INT 1
88318: PPUSH
88319: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
88323: LD_INT 9
88325: PPUSH
88326: LD_OWVAR 2
88330: PPUSH
88331: CALL_OW 343
// uc_side := 9 ;
88335: LD_ADDR_OWVAR 20
88339: PUSH
88340: LD_INT 9
88342: ST_TO_ADDR
// uc_nation := 2 ;
88343: LD_ADDR_OWVAR 21
88347: PUSH
88348: LD_INT 2
88350: ST_TO_ADDR
// hc_name := Dark Warrior ;
88351: LD_ADDR_OWVAR 26
88355: PUSH
88356: LD_STRING Dark Warrior
88358: ST_TO_ADDR
// hc_gallery :=  ;
88359: LD_ADDR_OWVAR 33
88363: PUSH
88364: LD_STRING 
88366: ST_TO_ADDR
// hc_noskilllimit := true ;
88367: LD_ADDR_OWVAR 76
88371: PUSH
88372: LD_INT 1
88374: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
88375: LD_ADDR_OWVAR 31
88379: PUSH
88380: LD_INT 30
88382: PUSH
88383: LD_INT 30
88385: PUSH
88386: LD_INT 30
88388: PUSH
88389: LD_INT 30
88391: PUSH
88392: EMPTY
88393: LIST
88394: LIST
88395: LIST
88396: LIST
88397: ST_TO_ADDR
// un := CreateHuman ;
88398: LD_ADDR_VAR 0 3
88402: PUSH
88403: CALL_OW 44
88407: ST_TO_ADDR
// hc_noskilllimit := false ;
88408: LD_ADDR_OWVAR 76
88412: PUSH
88413: LD_INT 0
88415: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
88416: LD_VAR 0 3
88420: PPUSH
88421: LD_INT 1
88423: PPUSH
88424: CALL_OW 51
// p := 0 ;
88428: LD_ADDR_VAR 0 2
88432: PUSH
88433: LD_INT 0
88435: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
88436: LD_INT 35
88438: PPUSH
88439: CALL_OW 67
// p := p + 1 ;
88443: LD_ADDR_VAR 0 2
88447: PUSH
88448: LD_VAR 0 2
88452: PUSH
88453: LD_INT 1
88455: PLUS
88456: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
88457: LD_VAR 0 3
88461: PPUSH
88462: CALL_OW 256
88466: PUSH
88467: LD_INT 1000
88469: LESS
88470: IFFALSE 88484
// SetLives ( un , 1000 ) ;
88472: LD_VAR 0 3
88476: PPUSH
88477: LD_INT 1000
88479: PPUSH
88480: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
88484: LD_VAR 0 3
88488: PPUSH
88489: LD_INT 81
88491: PUSH
88492: LD_OWVAR 2
88496: PUSH
88497: EMPTY
88498: LIST
88499: LIST
88500: PUSH
88501: LD_INT 91
88503: PUSH
88504: LD_VAR 0 3
88508: PUSH
88509: LD_INT 30
88511: PUSH
88512: EMPTY
88513: LIST
88514: LIST
88515: LIST
88516: PUSH
88517: EMPTY
88518: LIST
88519: LIST
88520: PPUSH
88521: CALL_OW 69
88525: PPUSH
88526: LD_VAR 0 3
88530: PPUSH
88531: CALL_OW 74
88535: PPUSH
88536: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
88540: LD_VAR 0 2
88544: PUSH
88545: LD_INT 60
88547: GREATER
88548: PUSH
88549: LD_VAR 0 3
88553: PPUSH
88554: CALL_OW 301
88558: OR
88559: IFFALSE 88436
// if un then
88561: LD_VAR 0 3
88565: IFFALSE 88576
// RemoveUnit ( un ) ;
88567: LD_VAR 0 3
88571: PPUSH
88572: CALL_OW 64
// end ; end_of_file
88576: PPOPN 3
88578: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
88579: LD_INT 0
88581: PPUSH
88582: PPUSH
88583: PPUSH
88584: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
88585: LD_VAR 0 1
88589: PPUSH
88590: CALL_OW 264
88594: PUSH
88595: LD_EXP 49
88599: EQUAL
88600: IFFALSE 88672
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
88602: LD_INT 68
88604: PPUSH
88605: LD_VAR 0 1
88609: PPUSH
88610: CALL_OW 255
88614: PPUSH
88615: CALL_OW 321
88619: PUSH
88620: LD_INT 2
88622: EQUAL
88623: IFFALSE 88635
// eff := 70 else
88625: LD_ADDR_VAR 0 4
88629: PUSH
88630: LD_INT 70
88632: ST_TO_ADDR
88633: GO 88643
// eff := 30 ;
88635: LD_ADDR_VAR 0 4
88639: PUSH
88640: LD_INT 30
88642: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
88643: LD_VAR 0 1
88647: PPUSH
88648: CALL_OW 250
88652: PPUSH
88653: LD_VAR 0 1
88657: PPUSH
88658: CALL_OW 251
88662: PPUSH
88663: LD_VAR 0 4
88667: PPUSH
88668: CALL_OW 495
// end ; end ;
88672: LD_VAR 0 2
88676: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
88677: LD_INT 0
88679: PPUSH
// end ;
88680: LD_VAR 0 4
88684: RET
// export function SOS_Command ( cmd ) ; begin
88685: LD_INT 0
88687: PPUSH
// end ;
88688: LD_VAR 0 2
88692: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
88693: LD_VAR 0 1
88697: PUSH
88698: LD_INT 255
88700: EQUAL
88701: PUSH
88702: LD_VAR 0 2
88706: PPUSH
88707: CALL_OW 264
88711: PUSH
88712: LD_INT 14
88714: PUSH
88715: LD_INT 53
88717: PUSH
88718: EMPTY
88719: LIST
88720: LIST
88721: IN
88722: AND
88723: PUSH
88724: LD_VAR 0 4
88728: PPUSH
88729: LD_VAR 0 5
88733: PPUSH
88734: CALL_OW 488
88738: AND
88739: IFFALSE 88763
// CutTreeXYR ( unit , x , y , 12 ) ;
88741: LD_VAR 0 2
88745: PPUSH
88746: LD_VAR 0 4
88750: PPUSH
88751: LD_VAR 0 5
88755: PPUSH
88756: LD_INT 12
88758: PPUSH
88759: CALL 88766 0 4
// end ;
88763: PPOPN 5
88765: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
88766: LD_INT 0
88768: PPUSH
88769: PPUSH
88770: PPUSH
88771: PPUSH
88772: PPUSH
88773: PPUSH
88774: PPUSH
88775: PPUSH
88776: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
88777: LD_VAR 0 1
88781: NOT
88782: PUSH
88783: LD_VAR 0 2
88787: PPUSH
88788: LD_VAR 0 3
88792: PPUSH
88793: CALL_OW 488
88797: NOT
88798: OR
88799: PUSH
88800: LD_VAR 0 4
88804: NOT
88805: OR
88806: IFFALSE 88810
// exit ;
88808: GO 89150
// list := [ ] ;
88810: LD_ADDR_VAR 0 13
88814: PUSH
88815: EMPTY
88816: ST_TO_ADDR
// if x - r < 0 then
88817: LD_VAR 0 2
88821: PUSH
88822: LD_VAR 0 4
88826: MINUS
88827: PUSH
88828: LD_INT 0
88830: LESS
88831: IFFALSE 88843
// min_x := 0 else
88833: LD_ADDR_VAR 0 7
88837: PUSH
88838: LD_INT 0
88840: ST_TO_ADDR
88841: GO 88859
// min_x := x - r ;
88843: LD_ADDR_VAR 0 7
88847: PUSH
88848: LD_VAR 0 2
88852: PUSH
88853: LD_VAR 0 4
88857: MINUS
88858: ST_TO_ADDR
// if y - r < 0 then
88859: LD_VAR 0 3
88863: PUSH
88864: LD_VAR 0 4
88868: MINUS
88869: PUSH
88870: LD_INT 0
88872: LESS
88873: IFFALSE 88885
// min_y := 0 else
88875: LD_ADDR_VAR 0 8
88879: PUSH
88880: LD_INT 0
88882: ST_TO_ADDR
88883: GO 88901
// min_y := y - r ;
88885: LD_ADDR_VAR 0 8
88889: PUSH
88890: LD_VAR 0 3
88894: PUSH
88895: LD_VAR 0 4
88899: MINUS
88900: ST_TO_ADDR
// max_x := x + r ;
88901: LD_ADDR_VAR 0 9
88905: PUSH
88906: LD_VAR 0 2
88910: PUSH
88911: LD_VAR 0 4
88915: PLUS
88916: ST_TO_ADDR
// max_y := y + r ;
88917: LD_ADDR_VAR 0 10
88921: PUSH
88922: LD_VAR 0 3
88926: PUSH
88927: LD_VAR 0 4
88931: PLUS
88932: ST_TO_ADDR
// for _x = min_x to max_x do
88933: LD_ADDR_VAR 0 11
88937: PUSH
88938: DOUBLE
88939: LD_VAR 0 7
88943: DEC
88944: ST_TO_ADDR
88945: LD_VAR 0 9
88949: PUSH
88950: FOR_TO
88951: IFFALSE 89068
// for _y = min_y to max_y do
88953: LD_ADDR_VAR 0 12
88957: PUSH
88958: DOUBLE
88959: LD_VAR 0 8
88963: DEC
88964: ST_TO_ADDR
88965: LD_VAR 0 10
88969: PUSH
88970: FOR_TO
88971: IFFALSE 89064
// begin if not ValidHex ( _x , _y ) then
88973: LD_VAR 0 11
88977: PPUSH
88978: LD_VAR 0 12
88982: PPUSH
88983: CALL_OW 488
88987: NOT
88988: IFFALSE 88992
// continue ;
88990: GO 88970
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
88992: LD_VAR 0 11
88996: PPUSH
88997: LD_VAR 0 12
89001: PPUSH
89002: CALL_OW 351
89006: PUSH
89007: LD_VAR 0 11
89011: PPUSH
89012: LD_VAR 0 12
89016: PPUSH
89017: CALL_OW 554
89021: AND
89022: IFFALSE 89062
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
89024: LD_ADDR_VAR 0 13
89028: PUSH
89029: LD_VAR 0 13
89033: PPUSH
89034: LD_VAR 0 13
89038: PUSH
89039: LD_INT 1
89041: PLUS
89042: PPUSH
89043: LD_VAR 0 11
89047: PUSH
89048: LD_VAR 0 12
89052: PUSH
89053: EMPTY
89054: LIST
89055: LIST
89056: PPUSH
89057: CALL_OW 2
89061: ST_TO_ADDR
// end ;
89062: GO 88970
89064: POP
89065: POP
89066: GO 88950
89068: POP
89069: POP
// if not list then
89070: LD_VAR 0 13
89074: NOT
89075: IFFALSE 89079
// exit ;
89077: GO 89150
// for i in list do
89079: LD_ADDR_VAR 0 6
89083: PUSH
89084: LD_VAR 0 13
89088: PUSH
89089: FOR_IN
89090: IFFALSE 89148
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
89092: LD_VAR 0 1
89096: PPUSH
89097: LD_STRING M
89099: PUSH
89100: LD_VAR 0 6
89104: PUSH
89105: LD_INT 1
89107: ARRAY
89108: PUSH
89109: LD_VAR 0 6
89113: PUSH
89114: LD_INT 2
89116: ARRAY
89117: PUSH
89118: LD_INT 0
89120: PUSH
89121: LD_INT 0
89123: PUSH
89124: LD_INT 0
89126: PUSH
89127: LD_INT 0
89129: PUSH
89130: EMPTY
89131: LIST
89132: LIST
89133: LIST
89134: LIST
89135: LIST
89136: LIST
89137: LIST
89138: PUSH
89139: EMPTY
89140: LIST
89141: PPUSH
89142: CALL_OW 447
89146: GO 89089
89148: POP
89149: POP
// end ; end_of_file
89150: LD_VAR 0 5
89154: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
89155: LD_INT 0
89157: PPUSH
89158: PPUSH
89159: PPUSH
89160: PPUSH
89161: PPUSH
89162: PPUSH
89163: PPUSH
89164: PPUSH
89165: PPUSH
89166: PPUSH
89167: PPUSH
89168: PPUSH
89169: PPUSH
89170: PPUSH
89171: PPUSH
89172: PPUSH
89173: PPUSH
89174: PPUSH
89175: PPUSH
89176: PPUSH
89177: PPUSH
89178: PPUSH
89179: PPUSH
89180: PPUSH
89181: PPUSH
89182: PPUSH
89183: PPUSH
89184: PPUSH
89185: PPUSH
89186: PPUSH
89187: PPUSH
89188: PPUSH
89189: PPUSH
89190: PPUSH
// if not list then
89191: LD_VAR 0 1
89195: NOT
89196: IFFALSE 89200
// exit ;
89198: GO 93859
// base := list [ 1 ] ;
89200: LD_ADDR_VAR 0 3
89204: PUSH
89205: LD_VAR 0 1
89209: PUSH
89210: LD_INT 1
89212: ARRAY
89213: ST_TO_ADDR
// group := list [ 2 ] ;
89214: LD_ADDR_VAR 0 4
89218: PUSH
89219: LD_VAR 0 1
89223: PUSH
89224: LD_INT 2
89226: ARRAY
89227: ST_TO_ADDR
// path := list [ 3 ] ;
89228: LD_ADDR_VAR 0 5
89232: PUSH
89233: LD_VAR 0 1
89237: PUSH
89238: LD_INT 3
89240: ARRAY
89241: ST_TO_ADDR
// flags := list [ 4 ] ;
89242: LD_ADDR_VAR 0 6
89246: PUSH
89247: LD_VAR 0 1
89251: PUSH
89252: LD_INT 4
89254: ARRAY
89255: ST_TO_ADDR
// mined := [ ] ;
89256: LD_ADDR_VAR 0 27
89260: PUSH
89261: EMPTY
89262: ST_TO_ADDR
// bombed := [ ] ;
89263: LD_ADDR_VAR 0 28
89267: PUSH
89268: EMPTY
89269: ST_TO_ADDR
// healers := [ ] ;
89270: LD_ADDR_VAR 0 31
89274: PUSH
89275: EMPTY
89276: ST_TO_ADDR
// to_heal := [ ] ;
89277: LD_ADDR_VAR 0 30
89281: PUSH
89282: EMPTY
89283: ST_TO_ADDR
// repairs := [ ] ;
89284: LD_ADDR_VAR 0 33
89288: PUSH
89289: EMPTY
89290: ST_TO_ADDR
// to_repair := [ ] ;
89291: LD_ADDR_VAR 0 32
89295: PUSH
89296: EMPTY
89297: ST_TO_ADDR
// if not group or not path then
89298: LD_VAR 0 4
89302: NOT
89303: PUSH
89304: LD_VAR 0 5
89308: NOT
89309: OR
89310: IFFALSE 89314
// exit ;
89312: GO 93859
// side := GetSide ( group [ 1 ] ) ;
89314: LD_ADDR_VAR 0 35
89318: PUSH
89319: LD_VAR 0 4
89323: PUSH
89324: LD_INT 1
89326: ARRAY
89327: PPUSH
89328: CALL_OW 255
89332: ST_TO_ADDR
// if flags then
89333: LD_VAR 0 6
89337: IFFALSE 89481
// begin f_ignore_area := flags [ 1 ] ;
89339: LD_ADDR_VAR 0 17
89343: PUSH
89344: LD_VAR 0 6
89348: PUSH
89349: LD_INT 1
89351: ARRAY
89352: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
89353: LD_ADDR_VAR 0 18
89357: PUSH
89358: LD_VAR 0 6
89362: PUSH
89363: LD_INT 2
89365: ARRAY
89366: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
89367: LD_ADDR_VAR 0 19
89371: PUSH
89372: LD_VAR 0 6
89376: PUSH
89377: LD_INT 3
89379: ARRAY
89380: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
89381: LD_ADDR_VAR 0 20
89385: PUSH
89386: LD_VAR 0 6
89390: PUSH
89391: LD_INT 4
89393: ARRAY
89394: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
89395: LD_ADDR_VAR 0 21
89399: PUSH
89400: LD_VAR 0 6
89404: PUSH
89405: LD_INT 5
89407: ARRAY
89408: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
89409: LD_ADDR_VAR 0 22
89413: PUSH
89414: LD_VAR 0 6
89418: PUSH
89419: LD_INT 6
89421: ARRAY
89422: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
89423: LD_ADDR_VAR 0 23
89427: PUSH
89428: LD_VAR 0 6
89432: PUSH
89433: LD_INT 7
89435: ARRAY
89436: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
89437: LD_ADDR_VAR 0 24
89441: PUSH
89442: LD_VAR 0 6
89446: PUSH
89447: LD_INT 8
89449: ARRAY
89450: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
89451: LD_ADDR_VAR 0 25
89455: PUSH
89456: LD_VAR 0 6
89460: PUSH
89461: LD_INT 9
89463: ARRAY
89464: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
89465: LD_ADDR_VAR 0 26
89469: PUSH
89470: LD_VAR 0 6
89474: PUSH
89475: LD_INT 10
89477: ARRAY
89478: ST_TO_ADDR
// end else
89479: GO 89561
// begin f_ignore_area := false ;
89481: LD_ADDR_VAR 0 17
89485: PUSH
89486: LD_INT 0
89488: ST_TO_ADDR
// f_capture := false ;
89489: LD_ADDR_VAR 0 18
89493: PUSH
89494: LD_INT 0
89496: ST_TO_ADDR
// f_ignore_civ := false ;
89497: LD_ADDR_VAR 0 19
89501: PUSH
89502: LD_INT 0
89504: ST_TO_ADDR
// f_murder := false ;
89505: LD_ADDR_VAR 0 20
89509: PUSH
89510: LD_INT 0
89512: ST_TO_ADDR
// f_mines := false ;
89513: LD_ADDR_VAR 0 21
89517: PUSH
89518: LD_INT 0
89520: ST_TO_ADDR
// f_repair := false ;
89521: LD_ADDR_VAR 0 22
89525: PUSH
89526: LD_INT 0
89528: ST_TO_ADDR
// f_heal := false ;
89529: LD_ADDR_VAR 0 23
89533: PUSH
89534: LD_INT 0
89536: ST_TO_ADDR
// f_spacetime := false ;
89537: LD_ADDR_VAR 0 24
89541: PUSH
89542: LD_INT 0
89544: ST_TO_ADDR
// f_attack_depot := false ;
89545: LD_ADDR_VAR 0 25
89549: PUSH
89550: LD_INT 0
89552: ST_TO_ADDR
// f_crawl := false ;
89553: LD_ADDR_VAR 0 26
89557: PUSH
89558: LD_INT 0
89560: ST_TO_ADDR
// end ; if f_heal then
89561: LD_VAR 0 23
89565: IFFALSE 89592
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
89567: LD_ADDR_VAR 0 31
89571: PUSH
89572: LD_VAR 0 4
89576: PPUSH
89577: LD_INT 25
89579: PUSH
89580: LD_INT 4
89582: PUSH
89583: EMPTY
89584: LIST
89585: LIST
89586: PPUSH
89587: CALL_OW 72
89591: ST_TO_ADDR
// if f_repair then
89592: LD_VAR 0 22
89596: IFFALSE 89623
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
89598: LD_ADDR_VAR 0 33
89602: PUSH
89603: LD_VAR 0 4
89607: PPUSH
89608: LD_INT 25
89610: PUSH
89611: LD_INT 3
89613: PUSH
89614: EMPTY
89615: LIST
89616: LIST
89617: PPUSH
89618: CALL_OW 72
89622: ST_TO_ADDR
// units_path := [ ] ;
89623: LD_ADDR_VAR 0 16
89627: PUSH
89628: EMPTY
89629: ST_TO_ADDR
// for i = 1 to group do
89630: LD_ADDR_VAR 0 7
89634: PUSH
89635: DOUBLE
89636: LD_INT 1
89638: DEC
89639: ST_TO_ADDR
89640: LD_VAR 0 4
89644: PUSH
89645: FOR_TO
89646: IFFALSE 89675
// units_path := Replace ( units_path , i , path ) ;
89648: LD_ADDR_VAR 0 16
89652: PUSH
89653: LD_VAR 0 16
89657: PPUSH
89658: LD_VAR 0 7
89662: PPUSH
89663: LD_VAR 0 5
89667: PPUSH
89668: CALL_OW 1
89672: ST_TO_ADDR
89673: GO 89645
89675: POP
89676: POP
// repeat for i = group downto 1 do
89677: LD_ADDR_VAR 0 7
89681: PUSH
89682: DOUBLE
89683: LD_VAR 0 4
89687: INC
89688: ST_TO_ADDR
89689: LD_INT 1
89691: PUSH
89692: FOR_DOWNTO
89693: IFFALSE 93815
// begin wait ( 5 ) ;
89695: LD_INT 5
89697: PPUSH
89698: CALL_OW 67
// tmp := [ ] ;
89702: LD_ADDR_VAR 0 14
89706: PUSH
89707: EMPTY
89708: ST_TO_ADDR
// attacking := false ;
89709: LD_ADDR_VAR 0 29
89713: PUSH
89714: LD_INT 0
89716: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
89717: LD_VAR 0 4
89721: PUSH
89722: LD_VAR 0 7
89726: ARRAY
89727: PPUSH
89728: CALL_OW 301
89732: PUSH
89733: LD_VAR 0 4
89737: PUSH
89738: LD_VAR 0 7
89742: ARRAY
89743: NOT
89744: OR
89745: IFFALSE 89854
// begin if GetType ( group [ i ] ) = unit_human then
89747: LD_VAR 0 4
89751: PUSH
89752: LD_VAR 0 7
89756: ARRAY
89757: PPUSH
89758: CALL_OW 247
89762: PUSH
89763: LD_INT 1
89765: EQUAL
89766: IFFALSE 89812
// begin to_heal := to_heal diff group [ i ] ;
89768: LD_ADDR_VAR 0 30
89772: PUSH
89773: LD_VAR 0 30
89777: PUSH
89778: LD_VAR 0 4
89782: PUSH
89783: LD_VAR 0 7
89787: ARRAY
89788: DIFF
89789: ST_TO_ADDR
// healers := healers diff group [ i ] ;
89790: LD_ADDR_VAR 0 31
89794: PUSH
89795: LD_VAR 0 31
89799: PUSH
89800: LD_VAR 0 4
89804: PUSH
89805: LD_VAR 0 7
89809: ARRAY
89810: DIFF
89811: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
89812: LD_ADDR_VAR 0 4
89816: PUSH
89817: LD_VAR 0 4
89821: PPUSH
89822: LD_VAR 0 7
89826: PPUSH
89827: CALL_OW 3
89831: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
89832: LD_ADDR_VAR 0 16
89836: PUSH
89837: LD_VAR 0 16
89841: PPUSH
89842: LD_VAR 0 7
89846: PPUSH
89847: CALL_OW 3
89851: ST_TO_ADDR
// continue ;
89852: GO 89692
// end ; if f_repair then
89854: LD_VAR 0 22
89858: IFFALSE 90347
// begin if GetType ( group [ i ] ) = unit_vehicle then
89860: LD_VAR 0 4
89864: PUSH
89865: LD_VAR 0 7
89869: ARRAY
89870: PPUSH
89871: CALL_OW 247
89875: PUSH
89876: LD_INT 2
89878: EQUAL
89879: IFFALSE 90069
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
89881: LD_VAR 0 4
89885: PUSH
89886: LD_VAR 0 7
89890: ARRAY
89891: PPUSH
89892: CALL_OW 256
89896: PUSH
89897: LD_INT 700
89899: LESS
89900: PUSH
89901: LD_VAR 0 4
89905: PUSH
89906: LD_VAR 0 7
89910: ARRAY
89911: PUSH
89912: LD_VAR 0 32
89916: IN
89917: NOT
89918: AND
89919: IFFALSE 89943
// to_repair := to_repair union group [ i ] ;
89921: LD_ADDR_VAR 0 32
89925: PUSH
89926: LD_VAR 0 32
89930: PUSH
89931: LD_VAR 0 4
89935: PUSH
89936: LD_VAR 0 7
89940: ARRAY
89941: UNION
89942: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
89943: LD_VAR 0 4
89947: PUSH
89948: LD_VAR 0 7
89952: ARRAY
89953: PPUSH
89954: CALL_OW 256
89958: PUSH
89959: LD_INT 1000
89961: EQUAL
89962: PUSH
89963: LD_VAR 0 4
89967: PUSH
89968: LD_VAR 0 7
89972: ARRAY
89973: PUSH
89974: LD_VAR 0 32
89978: IN
89979: AND
89980: IFFALSE 90004
// to_repair := to_repair diff group [ i ] ;
89982: LD_ADDR_VAR 0 32
89986: PUSH
89987: LD_VAR 0 32
89991: PUSH
89992: LD_VAR 0 4
89996: PUSH
89997: LD_VAR 0 7
90001: ARRAY
90002: DIFF
90003: ST_TO_ADDR
// if group [ i ] in to_repair then
90004: LD_VAR 0 4
90008: PUSH
90009: LD_VAR 0 7
90013: ARRAY
90014: PUSH
90015: LD_VAR 0 32
90019: IN
90020: IFFALSE 90067
// begin if not IsInArea ( group [ i ] , f_repair ) then
90022: LD_VAR 0 4
90026: PUSH
90027: LD_VAR 0 7
90031: ARRAY
90032: PPUSH
90033: LD_VAR 0 22
90037: PPUSH
90038: CALL_OW 308
90042: NOT
90043: IFFALSE 90065
// ComMoveToArea ( group [ i ] , f_repair ) ;
90045: LD_VAR 0 4
90049: PUSH
90050: LD_VAR 0 7
90054: ARRAY
90055: PPUSH
90056: LD_VAR 0 22
90060: PPUSH
90061: CALL_OW 113
// continue ;
90065: GO 89692
// end ; end else
90067: GO 90347
// if group [ i ] in repairs then
90069: LD_VAR 0 4
90073: PUSH
90074: LD_VAR 0 7
90078: ARRAY
90079: PUSH
90080: LD_VAR 0 33
90084: IN
90085: IFFALSE 90347
// begin if IsInUnit ( group [ i ] ) then
90087: LD_VAR 0 4
90091: PUSH
90092: LD_VAR 0 7
90096: ARRAY
90097: PPUSH
90098: CALL_OW 310
90102: IFFALSE 90170
// begin z := IsInUnit ( group [ i ] ) ;
90104: LD_ADDR_VAR 0 13
90108: PUSH
90109: LD_VAR 0 4
90113: PUSH
90114: LD_VAR 0 7
90118: ARRAY
90119: PPUSH
90120: CALL_OW 310
90124: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
90125: LD_VAR 0 13
90129: PUSH
90130: LD_VAR 0 32
90134: IN
90135: PUSH
90136: LD_VAR 0 13
90140: PPUSH
90141: LD_VAR 0 22
90145: PPUSH
90146: CALL_OW 308
90150: AND
90151: IFFALSE 90168
// ComExitVehicle ( group [ i ] ) ;
90153: LD_VAR 0 4
90157: PUSH
90158: LD_VAR 0 7
90162: ARRAY
90163: PPUSH
90164: CALL_OW 121
// end else
90168: GO 90347
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
90170: LD_ADDR_VAR 0 13
90174: PUSH
90175: LD_VAR 0 4
90179: PPUSH
90180: LD_INT 95
90182: PUSH
90183: LD_VAR 0 22
90187: PUSH
90188: EMPTY
90189: LIST
90190: LIST
90191: PUSH
90192: LD_INT 58
90194: PUSH
90195: EMPTY
90196: LIST
90197: PUSH
90198: EMPTY
90199: LIST
90200: LIST
90201: PPUSH
90202: CALL_OW 72
90206: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
90207: LD_VAR 0 4
90211: PUSH
90212: LD_VAR 0 7
90216: ARRAY
90217: PPUSH
90218: CALL_OW 314
90222: NOT
90223: IFFALSE 90345
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
90225: LD_ADDR_VAR 0 10
90229: PUSH
90230: LD_VAR 0 13
90234: PPUSH
90235: LD_VAR 0 4
90239: PUSH
90240: LD_VAR 0 7
90244: ARRAY
90245: PPUSH
90246: CALL_OW 74
90250: ST_TO_ADDR
// if not x then
90251: LD_VAR 0 10
90255: NOT
90256: IFFALSE 90260
// continue ;
90258: GO 89692
// if GetLives ( x ) < 1000 then
90260: LD_VAR 0 10
90264: PPUSH
90265: CALL_OW 256
90269: PUSH
90270: LD_INT 1000
90272: LESS
90273: IFFALSE 90297
// ComRepairVehicle ( group [ i ] , x ) else
90275: LD_VAR 0 4
90279: PUSH
90280: LD_VAR 0 7
90284: ARRAY
90285: PPUSH
90286: LD_VAR 0 10
90290: PPUSH
90291: CALL_OW 129
90295: GO 90345
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
90297: LD_VAR 0 23
90301: PUSH
90302: LD_VAR 0 4
90306: PUSH
90307: LD_VAR 0 7
90311: ARRAY
90312: PPUSH
90313: CALL_OW 256
90317: PUSH
90318: LD_INT 1000
90320: LESS
90321: AND
90322: NOT
90323: IFFALSE 90345
// ComEnterUnit ( group [ i ] , x ) ;
90325: LD_VAR 0 4
90329: PUSH
90330: LD_VAR 0 7
90334: ARRAY
90335: PPUSH
90336: LD_VAR 0 10
90340: PPUSH
90341: CALL_OW 120
// end ; continue ;
90345: GO 89692
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
90347: LD_VAR 0 23
90351: PUSH
90352: LD_VAR 0 4
90356: PUSH
90357: LD_VAR 0 7
90361: ARRAY
90362: PPUSH
90363: CALL_OW 247
90367: PUSH
90368: LD_INT 1
90370: EQUAL
90371: AND
90372: IFFALSE 90850
// begin if group [ i ] in healers then
90374: LD_VAR 0 4
90378: PUSH
90379: LD_VAR 0 7
90383: ARRAY
90384: PUSH
90385: LD_VAR 0 31
90389: IN
90390: IFFALSE 90663
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
90392: LD_VAR 0 4
90396: PUSH
90397: LD_VAR 0 7
90401: ARRAY
90402: PPUSH
90403: LD_VAR 0 23
90407: PPUSH
90408: CALL_OW 308
90412: NOT
90413: PUSH
90414: LD_VAR 0 4
90418: PUSH
90419: LD_VAR 0 7
90423: ARRAY
90424: PPUSH
90425: CALL_OW 314
90429: NOT
90430: AND
90431: IFFALSE 90455
// ComMoveToArea ( group [ i ] , f_heal ) else
90433: LD_VAR 0 4
90437: PUSH
90438: LD_VAR 0 7
90442: ARRAY
90443: PPUSH
90444: LD_VAR 0 23
90448: PPUSH
90449: CALL_OW 113
90453: GO 90661
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
90455: LD_VAR 0 4
90459: PUSH
90460: LD_VAR 0 7
90464: ARRAY
90465: PPUSH
90466: CALL 44500 0 1
90470: PPUSH
90471: CALL_OW 256
90475: PUSH
90476: LD_INT 1000
90478: EQUAL
90479: IFFALSE 90498
// ComStop ( group [ i ] ) else
90481: LD_VAR 0 4
90485: PUSH
90486: LD_VAR 0 7
90490: ARRAY
90491: PPUSH
90492: CALL_OW 141
90496: GO 90661
// if not HasTask ( group [ i ] ) and to_heal then
90498: LD_VAR 0 4
90502: PUSH
90503: LD_VAR 0 7
90507: ARRAY
90508: PPUSH
90509: CALL_OW 314
90513: NOT
90514: PUSH
90515: LD_VAR 0 30
90519: AND
90520: IFFALSE 90661
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
90522: LD_ADDR_VAR 0 13
90526: PUSH
90527: LD_VAR 0 30
90531: PPUSH
90532: LD_INT 3
90534: PUSH
90535: LD_INT 54
90537: PUSH
90538: EMPTY
90539: LIST
90540: PUSH
90541: EMPTY
90542: LIST
90543: LIST
90544: PPUSH
90545: CALL_OW 72
90549: PPUSH
90550: LD_VAR 0 4
90554: PUSH
90555: LD_VAR 0 7
90559: ARRAY
90560: PPUSH
90561: CALL_OW 74
90565: ST_TO_ADDR
// if z then
90566: LD_VAR 0 13
90570: IFFALSE 90661
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
90572: LD_INT 91
90574: PUSH
90575: LD_VAR 0 13
90579: PUSH
90580: LD_INT 10
90582: PUSH
90583: EMPTY
90584: LIST
90585: LIST
90586: LIST
90587: PUSH
90588: LD_INT 81
90590: PUSH
90591: LD_VAR 0 13
90595: PPUSH
90596: CALL_OW 255
90600: PUSH
90601: EMPTY
90602: LIST
90603: LIST
90604: PUSH
90605: EMPTY
90606: LIST
90607: LIST
90608: PPUSH
90609: CALL_OW 69
90613: PUSH
90614: LD_INT 0
90616: EQUAL
90617: IFFALSE 90641
// ComHeal ( group [ i ] , z ) else
90619: LD_VAR 0 4
90623: PUSH
90624: LD_VAR 0 7
90628: ARRAY
90629: PPUSH
90630: LD_VAR 0 13
90634: PPUSH
90635: CALL_OW 128
90639: GO 90661
// ComMoveToArea ( group [ i ] , f_heal ) ;
90641: LD_VAR 0 4
90645: PUSH
90646: LD_VAR 0 7
90650: ARRAY
90651: PPUSH
90652: LD_VAR 0 23
90656: PPUSH
90657: CALL_OW 113
// end ; continue ;
90661: GO 89692
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
90663: LD_VAR 0 4
90667: PUSH
90668: LD_VAR 0 7
90672: ARRAY
90673: PPUSH
90674: CALL_OW 256
90678: PUSH
90679: LD_INT 700
90681: LESS
90682: PUSH
90683: LD_VAR 0 4
90687: PUSH
90688: LD_VAR 0 7
90692: ARRAY
90693: PUSH
90694: LD_VAR 0 30
90698: IN
90699: NOT
90700: AND
90701: IFFALSE 90725
// to_heal := to_heal union group [ i ] ;
90703: LD_ADDR_VAR 0 30
90707: PUSH
90708: LD_VAR 0 30
90712: PUSH
90713: LD_VAR 0 4
90717: PUSH
90718: LD_VAR 0 7
90722: ARRAY
90723: UNION
90724: ST_TO_ADDR
// if group [ i ] in to_heal then
90725: LD_VAR 0 4
90729: PUSH
90730: LD_VAR 0 7
90734: ARRAY
90735: PUSH
90736: LD_VAR 0 30
90740: IN
90741: IFFALSE 90850
// begin if GetLives ( group [ i ] ) = 1000 then
90743: LD_VAR 0 4
90747: PUSH
90748: LD_VAR 0 7
90752: ARRAY
90753: PPUSH
90754: CALL_OW 256
90758: PUSH
90759: LD_INT 1000
90761: EQUAL
90762: IFFALSE 90788
// to_heal := to_heal diff group [ i ] else
90764: LD_ADDR_VAR 0 30
90768: PUSH
90769: LD_VAR 0 30
90773: PUSH
90774: LD_VAR 0 4
90778: PUSH
90779: LD_VAR 0 7
90783: ARRAY
90784: DIFF
90785: ST_TO_ADDR
90786: GO 90850
// begin if not IsInArea ( group [ i ] , to_heal ) then
90788: LD_VAR 0 4
90792: PUSH
90793: LD_VAR 0 7
90797: ARRAY
90798: PPUSH
90799: LD_VAR 0 30
90803: PPUSH
90804: CALL_OW 308
90808: NOT
90809: IFFALSE 90833
// ComMoveToArea ( group [ i ] , f_heal ) else
90811: LD_VAR 0 4
90815: PUSH
90816: LD_VAR 0 7
90820: ARRAY
90821: PPUSH
90822: LD_VAR 0 23
90826: PPUSH
90827: CALL_OW 113
90831: GO 90848
// ComHold ( group [ i ] ) ;
90833: LD_VAR 0 4
90837: PUSH
90838: LD_VAR 0 7
90842: ARRAY
90843: PPUSH
90844: CALL_OW 140
// continue ;
90848: GO 89692
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
90850: LD_VAR 0 4
90854: PUSH
90855: LD_VAR 0 7
90859: ARRAY
90860: PPUSH
90861: LD_INT 10
90863: PPUSH
90864: CALL 42920 0 2
90868: NOT
90869: PUSH
90870: LD_VAR 0 16
90874: PUSH
90875: LD_VAR 0 7
90879: ARRAY
90880: PUSH
90881: EMPTY
90882: EQUAL
90883: NOT
90884: AND
90885: IFFALSE 91151
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
90887: LD_VAR 0 4
90891: PUSH
90892: LD_VAR 0 7
90896: ARRAY
90897: PPUSH
90898: CALL_OW 262
90902: PUSH
90903: LD_INT 1
90905: PUSH
90906: LD_INT 2
90908: PUSH
90909: EMPTY
90910: LIST
90911: LIST
90912: IN
90913: IFFALSE 90954
// if GetFuel ( group [ i ] ) < 10 then
90915: LD_VAR 0 4
90919: PUSH
90920: LD_VAR 0 7
90924: ARRAY
90925: PPUSH
90926: CALL_OW 261
90930: PUSH
90931: LD_INT 10
90933: LESS
90934: IFFALSE 90954
// SetFuel ( group [ i ] , 12 ) ;
90936: LD_VAR 0 4
90940: PUSH
90941: LD_VAR 0 7
90945: ARRAY
90946: PPUSH
90947: LD_INT 12
90949: PPUSH
90950: CALL_OW 240
// if units_path [ i ] then
90954: LD_VAR 0 16
90958: PUSH
90959: LD_VAR 0 7
90963: ARRAY
90964: IFFALSE 91149
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
90966: LD_VAR 0 4
90970: PUSH
90971: LD_VAR 0 7
90975: ARRAY
90976: PPUSH
90977: LD_VAR 0 16
90981: PUSH
90982: LD_VAR 0 7
90986: ARRAY
90987: PUSH
90988: LD_INT 1
90990: ARRAY
90991: PUSH
90992: LD_INT 1
90994: ARRAY
90995: PPUSH
90996: LD_VAR 0 16
91000: PUSH
91001: LD_VAR 0 7
91005: ARRAY
91006: PUSH
91007: LD_INT 1
91009: ARRAY
91010: PUSH
91011: LD_INT 2
91013: ARRAY
91014: PPUSH
91015: CALL_OW 297
91019: PUSH
91020: LD_INT 6
91022: GREATER
91023: IFFALSE 91098
// begin if not HasTask ( group [ i ] ) then
91025: LD_VAR 0 4
91029: PUSH
91030: LD_VAR 0 7
91034: ARRAY
91035: PPUSH
91036: CALL_OW 314
91040: NOT
91041: IFFALSE 91096
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
91043: LD_VAR 0 4
91047: PUSH
91048: LD_VAR 0 7
91052: ARRAY
91053: PPUSH
91054: LD_VAR 0 16
91058: PUSH
91059: LD_VAR 0 7
91063: ARRAY
91064: PUSH
91065: LD_INT 1
91067: ARRAY
91068: PUSH
91069: LD_INT 1
91071: ARRAY
91072: PPUSH
91073: LD_VAR 0 16
91077: PUSH
91078: LD_VAR 0 7
91082: ARRAY
91083: PUSH
91084: LD_INT 1
91086: ARRAY
91087: PUSH
91088: LD_INT 2
91090: ARRAY
91091: PPUSH
91092: CALL_OW 114
// end else
91096: GO 91149
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
91098: LD_ADDR_VAR 0 15
91102: PUSH
91103: LD_VAR 0 16
91107: PUSH
91108: LD_VAR 0 7
91112: ARRAY
91113: PPUSH
91114: LD_INT 1
91116: PPUSH
91117: CALL_OW 3
91121: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
91122: LD_ADDR_VAR 0 16
91126: PUSH
91127: LD_VAR 0 16
91131: PPUSH
91132: LD_VAR 0 7
91136: PPUSH
91137: LD_VAR 0 15
91141: PPUSH
91142: CALL_OW 1
91146: ST_TO_ADDR
// continue ;
91147: GO 89692
// end ; end ; end else
91149: GO 93813
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
91151: LD_ADDR_VAR 0 14
91155: PUSH
91156: LD_INT 81
91158: PUSH
91159: LD_VAR 0 4
91163: PUSH
91164: LD_VAR 0 7
91168: ARRAY
91169: PPUSH
91170: CALL_OW 255
91174: PUSH
91175: EMPTY
91176: LIST
91177: LIST
91178: PPUSH
91179: CALL_OW 69
91183: ST_TO_ADDR
// if not tmp then
91184: LD_VAR 0 14
91188: NOT
91189: IFFALSE 91193
// continue ;
91191: GO 89692
// if f_ignore_area then
91193: LD_VAR 0 17
91197: IFFALSE 91285
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
91199: LD_ADDR_VAR 0 15
91203: PUSH
91204: LD_VAR 0 14
91208: PPUSH
91209: LD_INT 3
91211: PUSH
91212: LD_INT 92
91214: PUSH
91215: LD_VAR 0 17
91219: PUSH
91220: LD_INT 1
91222: ARRAY
91223: PUSH
91224: LD_VAR 0 17
91228: PUSH
91229: LD_INT 2
91231: ARRAY
91232: PUSH
91233: LD_VAR 0 17
91237: PUSH
91238: LD_INT 3
91240: ARRAY
91241: PUSH
91242: EMPTY
91243: LIST
91244: LIST
91245: LIST
91246: LIST
91247: PUSH
91248: EMPTY
91249: LIST
91250: LIST
91251: PPUSH
91252: CALL_OW 72
91256: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
91257: LD_VAR 0 14
91261: PUSH
91262: LD_VAR 0 15
91266: DIFF
91267: IFFALSE 91285
// tmp := tmp diff tmp2 ;
91269: LD_ADDR_VAR 0 14
91273: PUSH
91274: LD_VAR 0 14
91278: PUSH
91279: LD_VAR 0 15
91283: DIFF
91284: ST_TO_ADDR
// end ; if not f_murder then
91285: LD_VAR 0 20
91289: NOT
91290: IFFALSE 91348
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
91292: LD_ADDR_VAR 0 15
91296: PUSH
91297: LD_VAR 0 14
91301: PPUSH
91302: LD_INT 3
91304: PUSH
91305: LD_INT 50
91307: PUSH
91308: EMPTY
91309: LIST
91310: PUSH
91311: EMPTY
91312: LIST
91313: LIST
91314: PPUSH
91315: CALL_OW 72
91319: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
91320: LD_VAR 0 14
91324: PUSH
91325: LD_VAR 0 15
91329: DIFF
91330: IFFALSE 91348
// tmp := tmp diff tmp2 ;
91332: LD_ADDR_VAR 0 14
91336: PUSH
91337: LD_VAR 0 14
91341: PUSH
91342: LD_VAR 0 15
91346: DIFF
91347: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
91348: LD_ADDR_VAR 0 14
91352: PUSH
91353: LD_VAR 0 4
91357: PUSH
91358: LD_VAR 0 7
91362: ARRAY
91363: PPUSH
91364: LD_VAR 0 14
91368: PPUSH
91369: LD_INT 1
91371: PPUSH
91372: LD_INT 1
91374: PPUSH
91375: CALL 16563 0 4
91379: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
91380: LD_VAR 0 4
91384: PUSH
91385: LD_VAR 0 7
91389: ARRAY
91390: PPUSH
91391: CALL_OW 257
91395: PUSH
91396: LD_INT 1
91398: EQUAL
91399: IFFALSE 91847
// begin if WantPlant ( group [ i ] ) then
91401: LD_VAR 0 4
91405: PUSH
91406: LD_VAR 0 7
91410: ARRAY
91411: PPUSH
91412: CALL 16064 0 1
91416: IFFALSE 91420
// continue ;
91418: GO 89692
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
91420: LD_VAR 0 18
91424: PUSH
91425: LD_VAR 0 4
91429: PUSH
91430: LD_VAR 0 7
91434: ARRAY
91435: PPUSH
91436: CALL_OW 310
91440: NOT
91441: AND
91442: PUSH
91443: LD_VAR 0 14
91447: PUSH
91448: LD_INT 1
91450: ARRAY
91451: PUSH
91452: LD_VAR 0 14
91456: PPUSH
91457: LD_INT 21
91459: PUSH
91460: LD_INT 2
91462: PUSH
91463: EMPTY
91464: LIST
91465: LIST
91466: PUSH
91467: LD_INT 58
91469: PUSH
91470: EMPTY
91471: LIST
91472: PUSH
91473: EMPTY
91474: LIST
91475: LIST
91476: PPUSH
91477: CALL_OW 72
91481: IN
91482: AND
91483: IFFALSE 91519
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
91485: LD_VAR 0 4
91489: PUSH
91490: LD_VAR 0 7
91494: ARRAY
91495: PPUSH
91496: LD_VAR 0 14
91500: PUSH
91501: LD_INT 1
91503: ARRAY
91504: PPUSH
91505: CALL_OW 120
// attacking := true ;
91509: LD_ADDR_VAR 0 29
91513: PUSH
91514: LD_INT 1
91516: ST_TO_ADDR
// continue ;
91517: GO 89692
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
91519: LD_VAR 0 26
91523: PUSH
91524: LD_VAR 0 4
91528: PUSH
91529: LD_VAR 0 7
91533: ARRAY
91534: PPUSH
91535: CALL_OW 257
91539: PUSH
91540: LD_INT 1
91542: EQUAL
91543: AND
91544: PUSH
91545: LD_VAR 0 4
91549: PUSH
91550: LD_VAR 0 7
91554: ARRAY
91555: PPUSH
91556: CALL_OW 256
91560: PUSH
91561: LD_INT 800
91563: LESS
91564: AND
91565: PUSH
91566: LD_VAR 0 4
91570: PUSH
91571: LD_VAR 0 7
91575: ARRAY
91576: PPUSH
91577: CALL_OW 318
91581: NOT
91582: AND
91583: IFFALSE 91600
// ComCrawl ( group [ i ] ) ;
91585: LD_VAR 0 4
91589: PUSH
91590: LD_VAR 0 7
91594: ARRAY
91595: PPUSH
91596: CALL_OW 137
// if f_mines then
91600: LD_VAR 0 21
91604: IFFALSE 91847
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
91606: LD_VAR 0 14
91610: PUSH
91611: LD_INT 1
91613: ARRAY
91614: PPUSH
91615: CALL_OW 247
91619: PUSH
91620: LD_INT 3
91622: EQUAL
91623: PUSH
91624: LD_VAR 0 14
91628: PUSH
91629: LD_INT 1
91631: ARRAY
91632: PUSH
91633: LD_VAR 0 27
91637: IN
91638: NOT
91639: AND
91640: IFFALSE 91847
// begin x := GetX ( tmp [ 1 ] ) ;
91642: LD_ADDR_VAR 0 10
91646: PUSH
91647: LD_VAR 0 14
91651: PUSH
91652: LD_INT 1
91654: ARRAY
91655: PPUSH
91656: CALL_OW 250
91660: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
91661: LD_ADDR_VAR 0 11
91665: PUSH
91666: LD_VAR 0 14
91670: PUSH
91671: LD_INT 1
91673: ARRAY
91674: PPUSH
91675: CALL_OW 251
91679: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
91680: LD_ADDR_VAR 0 12
91684: PUSH
91685: LD_VAR 0 4
91689: PUSH
91690: LD_VAR 0 7
91694: ARRAY
91695: PPUSH
91696: CALL 43005 0 1
91700: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
91701: LD_VAR 0 4
91705: PUSH
91706: LD_VAR 0 7
91710: ARRAY
91711: PPUSH
91712: LD_VAR 0 10
91716: PPUSH
91717: LD_VAR 0 11
91721: PPUSH
91722: LD_VAR 0 14
91726: PUSH
91727: LD_INT 1
91729: ARRAY
91730: PPUSH
91731: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
91735: LD_VAR 0 4
91739: PUSH
91740: LD_VAR 0 7
91744: ARRAY
91745: PPUSH
91746: LD_VAR 0 10
91750: PPUSH
91751: LD_VAR 0 12
91755: PPUSH
91756: LD_INT 7
91758: PPUSH
91759: CALL_OW 272
91763: PPUSH
91764: LD_VAR 0 11
91768: PPUSH
91769: LD_VAR 0 12
91773: PPUSH
91774: LD_INT 7
91776: PPUSH
91777: CALL_OW 273
91781: PPUSH
91782: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
91786: LD_VAR 0 4
91790: PUSH
91791: LD_VAR 0 7
91795: ARRAY
91796: PPUSH
91797: LD_INT 71
91799: PPUSH
91800: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
91804: LD_ADDR_VAR 0 27
91808: PUSH
91809: LD_VAR 0 27
91813: PPUSH
91814: LD_VAR 0 27
91818: PUSH
91819: LD_INT 1
91821: PLUS
91822: PPUSH
91823: LD_VAR 0 14
91827: PUSH
91828: LD_INT 1
91830: ARRAY
91831: PPUSH
91832: CALL_OW 1
91836: ST_TO_ADDR
// attacking := true ;
91837: LD_ADDR_VAR 0 29
91841: PUSH
91842: LD_INT 1
91844: ST_TO_ADDR
// continue ;
91845: GO 89692
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
91847: LD_VAR 0 4
91851: PUSH
91852: LD_VAR 0 7
91856: ARRAY
91857: PPUSH
91858: CALL_OW 257
91862: PUSH
91863: LD_INT 17
91865: EQUAL
91866: PUSH
91867: LD_VAR 0 4
91871: PUSH
91872: LD_VAR 0 7
91876: ARRAY
91877: PPUSH
91878: CALL_OW 110
91882: PUSH
91883: LD_INT 71
91885: EQUAL
91886: NOT
91887: AND
91888: IFFALSE 92034
// begin attacking := false ;
91890: LD_ADDR_VAR 0 29
91894: PUSH
91895: LD_INT 0
91897: ST_TO_ADDR
// k := 5 ;
91898: LD_ADDR_VAR 0 9
91902: PUSH
91903: LD_INT 5
91905: ST_TO_ADDR
// if tmp < k then
91906: LD_VAR 0 14
91910: PUSH
91911: LD_VAR 0 9
91915: LESS
91916: IFFALSE 91928
// k := tmp ;
91918: LD_ADDR_VAR 0 9
91922: PUSH
91923: LD_VAR 0 14
91927: ST_TO_ADDR
// for j = 1 to k do
91928: LD_ADDR_VAR 0 8
91932: PUSH
91933: DOUBLE
91934: LD_INT 1
91936: DEC
91937: ST_TO_ADDR
91938: LD_VAR 0 9
91942: PUSH
91943: FOR_TO
91944: IFFALSE 92032
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
91946: LD_VAR 0 14
91950: PUSH
91951: LD_VAR 0 8
91955: ARRAY
91956: PUSH
91957: LD_VAR 0 14
91961: PPUSH
91962: LD_INT 58
91964: PUSH
91965: EMPTY
91966: LIST
91967: PPUSH
91968: CALL_OW 72
91972: IN
91973: NOT
91974: IFFALSE 92030
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
91976: LD_VAR 0 4
91980: PUSH
91981: LD_VAR 0 7
91985: ARRAY
91986: PPUSH
91987: LD_VAR 0 14
91991: PUSH
91992: LD_VAR 0 8
91996: ARRAY
91997: PPUSH
91998: CALL_OW 115
// attacking := true ;
92002: LD_ADDR_VAR 0 29
92006: PUSH
92007: LD_INT 1
92009: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
92010: LD_VAR 0 4
92014: PUSH
92015: LD_VAR 0 7
92019: ARRAY
92020: PPUSH
92021: LD_INT 71
92023: PPUSH
92024: CALL_OW 109
// continue ;
92028: GO 91943
// end ; end ;
92030: GO 91943
92032: POP
92033: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
92034: LD_VAR 0 4
92038: PUSH
92039: LD_VAR 0 7
92043: ARRAY
92044: PPUSH
92045: CALL_OW 257
92049: PUSH
92050: LD_INT 8
92052: EQUAL
92053: PUSH
92054: LD_VAR 0 4
92058: PUSH
92059: LD_VAR 0 7
92063: ARRAY
92064: PPUSH
92065: CALL_OW 264
92069: PUSH
92070: LD_INT 28
92072: PUSH
92073: LD_INT 45
92075: PUSH
92076: LD_INT 7
92078: PUSH
92079: LD_INT 47
92081: PUSH
92082: EMPTY
92083: LIST
92084: LIST
92085: LIST
92086: LIST
92087: IN
92088: OR
92089: IFFALSE 92345
// begin attacking := false ;
92091: LD_ADDR_VAR 0 29
92095: PUSH
92096: LD_INT 0
92098: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
92099: LD_VAR 0 14
92103: PUSH
92104: LD_INT 1
92106: ARRAY
92107: PPUSH
92108: CALL_OW 266
92112: PUSH
92113: LD_INT 32
92115: PUSH
92116: LD_INT 31
92118: PUSH
92119: LD_INT 33
92121: PUSH
92122: LD_INT 4
92124: PUSH
92125: LD_INT 5
92127: PUSH
92128: EMPTY
92129: LIST
92130: LIST
92131: LIST
92132: LIST
92133: LIST
92134: IN
92135: IFFALSE 92321
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
92137: LD_ADDR_VAR 0 9
92141: PUSH
92142: LD_VAR 0 14
92146: PUSH
92147: LD_INT 1
92149: ARRAY
92150: PPUSH
92151: CALL_OW 266
92155: PPUSH
92156: LD_VAR 0 14
92160: PUSH
92161: LD_INT 1
92163: ARRAY
92164: PPUSH
92165: CALL_OW 250
92169: PPUSH
92170: LD_VAR 0 14
92174: PUSH
92175: LD_INT 1
92177: ARRAY
92178: PPUSH
92179: CALL_OW 251
92183: PPUSH
92184: LD_VAR 0 14
92188: PUSH
92189: LD_INT 1
92191: ARRAY
92192: PPUSH
92193: CALL_OW 254
92197: PPUSH
92198: LD_VAR 0 14
92202: PUSH
92203: LD_INT 1
92205: ARRAY
92206: PPUSH
92207: CALL_OW 248
92211: PPUSH
92212: LD_INT 0
92214: PPUSH
92215: CALL 24375 0 6
92219: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
92220: LD_ADDR_VAR 0 8
92224: PUSH
92225: LD_VAR 0 4
92229: PUSH
92230: LD_VAR 0 7
92234: ARRAY
92235: PPUSH
92236: LD_VAR 0 9
92240: PPUSH
92241: CALL 43045 0 2
92245: ST_TO_ADDR
// if j then
92246: LD_VAR 0 8
92250: IFFALSE 92319
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
92252: LD_VAR 0 8
92256: PUSH
92257: LD_INT 1
92259: ARRAY
92260: PPUSH
92261: LD_VAR 0 8
92265: PUSH
92266: LD_INT 2
92268: ARRAY
92269: PPUSH
92270: CALL_OW 488
92274: IFFALSE 92319
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
92276: LD_VAR 0 4
92280: PUSH
92281: LD_VAR 0 7
92285: ARRAY
92286: PPUSH
92287: LD_VAR 0 8
92291: PUSH
92292: LD_INT 1
92294: ARRAY
92295: PPUSH
92296: LD_VAR 0 8
92300: PUSH
92301: LD_INT 2
92303: ARRAY
92304: PPUSH
92305: CALL_OW 116
// attacking := true ;
92309: LD_ADDR_VAR 0 29
92313: PUSH
92314: LD_INT 1
92316: ST_TO_ADDR
// continue ;
92317: GO 89692
// end ; end else
92319: GO 92345
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
92321: LD_VAR 0 4
92325: PUSH
92326: LD_VAR 0 7
92330: ARRAY
92331: PPUSH
92332: LD_VAR 0 14
92336: PUSH
92337: LD_INT 1
92339: ARRAY
92340: PPUSH
92341: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
92345: LD_VAR 0 4
92349: PUSH
92350: LD_VAR 0 7
92354: ARRAY
92355: PPUSH
92356: CALL_OW 265
92360: PUSH
92361: LD_INT 11
92363: EQUAL
92364: IFFALSE 92642
// begin k := 10 ;
92366: LD_ADDR_VAR 0 9
92370: PUSH
92371: LD_INT 10
92373: ST_TO_ADDR
// x := 0 ;
92374: LD_ADDR_VAR 0 10
92378: PUSH
92379: LD_INT 0
92381: ST_TO_ADDR
// if tmp < k then
92382: LD_VAR 0 14
92386: PUSH
92387: LD_VAR 0 9
92391: LESS
92392: IFFALSE 92404
// k := tmp ;
92394: LD_ADDR_VAR 0 9
92398: PUSH
92399: LD_VAR 0 14
92403: ST_TO_ADDR
// for j = k downto 1 do
92404: LD_ADDR_VAR 0 8
92408: PUSH
92409: DOUBLE
92410: LD_VAR 0 9
92414: INC
92415: ST_TO_ADDR
92416: LD_INT 1
92418: PUSH
92419: FOR_DOWNTO
92420: IFFALSE 92495
// begin if GetType ( tmp [ j ] ) = unit_human then
92422: LD_VAR 0 14
92426: PUSH
92427: LD_VAR 0 8
92431: ARRAY
92432: PPUSH
92433: CALL_OW 247
92437: PUSH
92438: LD_INT 1
92440: EQUAL
92441: IFFALSE 92493
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
92443: LD_VAR 0 4
92447: PUSH
92448: LD_VAR 0 7
92452: ARRAY
92453: PPUSH
92454: LD_VAR 0 14
92458: PUSH
92459: LD_VAR 0 8
92463: ARRAY
92464: PPUSH
92465: CALL 43316 0 2
// x := tmp [ j ] ;
92469: LD_ADDR_VAR 0 10
92473: PUSH
92474: LD_VAR 0 14
92478: PUSH
92479: LD_VAR 0 8
92483: ARRAY
92484: ST_TO_ADDR
// attacking := true ;
92485: LD_ADDR_VAR 0 29
92489: PUSH
92490: LD_INT 1
92492: ST_TO_ADDR
// end ; end ;
92493: GO 92419
92495: POP
92496: POP
// if not x then
92497: LD_VAR 0 10
92501: NOT
92502: IFFALSE 92642
// begin attacking := true ;
92504: LD_ADDR_VAR 0 29
92508: PUSH
92509: LD_INT 1
92511: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
92512: LD_VAR 0 4
92516: PUSH
92517: LD_VAR 0 7
92521: ARRAY
92522: PPUSH
92523: CALL_OW 250
92527: PPUSH
92528: LD_VAR 0 4
92532: PUSH
92533: LD_VAR 0 7
92537: ARRAY
92538: PPUSH
92539: CALL_OW 251
92543: PPUSH
92544: CALL_OW 546
92548: PUSH
92549: LD_INT 2
92551: ARRAY
92552: PUSH
92553: LD_VAR 0 14
92557: PUSH
92558: LD_INT 1
92560: ARRAY
92561: PPUSH
92562: CALL_OW 250
92566: PPUSH
92567: LD_VAR 0 14
92571: PUSH
92572: LD_INT 1
92574: ARRAY
92575: PPUSH
92576: CALL_OW 251
92580: PPUSH
92581: CALL_OW 546
92585: PUSH
92586: LD_INT 2
92588: ARRAY
92589: EQUAL
92590: IFFALSE 92618
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
92592: LD_VAR 0 4
92596: PUSH
92597: LD_VAR 0 7
92601: ARRAY
92602: PPUSH
92603: LD_VAR 0 14
92607: PUSH
92608: LD_INT 1
92610: ARRAY
92611: PPUSH
92612: CALL 43316 0 2
92616: GO 92642
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
92618: LD_VAR 0 4
92622: PUSH
92623: LD_VAR 0 7
92627: ARRAY
92628: PPUSH
92629: LD_VAR 0 14
92633: PUSH
92634: LD_INT 1
92636: ARRAY
92637: PPUSH
92638: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
92642: LD_VAR 0 4
92646: PUSH
92647: LD_VAR 0 7
92651: ARRAY
92652: PPUSH
92653: CALL_OW 264
92657: PUSH
92658: LD_INT 29
92660: EQUAL
92661: IFFALSE 93027
// begin if WantsToAttack ( group [ i ] ) in bombed then
92663: LD_VAR 0 4
92667: PUSH
92668: LD_VAR 0 7
92672: ARRAY
92673: PPUSH
92674: CALL_OW 319
92678: PUSH
92679: LD_VAR 0 28
92683: IN
92684: IFFALSE 92688
// continue ;
92686: GO 89692
// k := 8 ;
92688: LD_ADDR_VAR 0 9
92692: PUSH
92693: LD_INT 8
92695: ST_TO_ADDR
// x := 0 ;
92696: LD_ADDR_VAR 0 10
92700: PUSH
92701: LD_INT 0
92703: ST_TO_ADDR
// if tmp < k then
92704: LD_VAR 0 14
92708: PUSH
92709: LD_VAR 0 9
92713: LESS
92714: IFFALSE 92726
// k := tmp ;
92716: LD_ADDR_VAR 0 9
92720: PUSH
92721: LD_VAR 0 14
92725: ST_TO_ADDR
// for j = 1 to k do
92726: LD_ADDR_VAR 0 8
92730: PUSH
92731: DOUBLE
92732: LD_INT 1
92734: DEC
92735: ST_TO_ADDR
92736: LD_VAR 0 9
92740: PUSH
92741: FOR_TO
92742: IFFALSE 92874
// begin if GetType ( tmp [ j ] ) = unit_building then
92744: LD_VAR 0 14
92748: PUSH
92749: LD_VAR 0 8
92753: ARRAY
92754: PPUSH
92755: CALL_OW 247
92759: PUSH
92760: LD_INT 3
92762: EQUAL
92763: IFFALSE 92872
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
92765: LD_VAR 0 14
92769: PUSH
92770: LD_VAR 0 8
92774: ARRAY
92775: PUSH
92776: LD_VAR 0 28
92780: IN
92781: NOT
92782: PUSH
92783: LD_VAR 0 14
92787: PUSH
92788: LD_VAR 0 8
92792: ARRAY
92793: PPUSH
92794: CALL_OW 313
92798: AND
92799: IFFALSE 92872
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
92801: LD_VAR 0 4
92805: PUSH
92806: LD_VAR 0 7
92810: ARRAY
92811: PPUSH
92812: LD_VAR 0 14
92816: PUSH
92817: LD_VAR 0 8
92821: ARRAY
92822: PPUSH
92823: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
92827: LD_ADDR_VAR 0 28
92831: PUSH
92832: LD_VAR 0 28
92836: PPUSH
92837: LD_VAR 0 28
92841: PUSH
92842: LD_INT 1
92844: PLUS
92845: PPUSH
92846: LD_VAR 0 14
92850: PUSH
92851: LD_VAR 0 8
92855: ARRAY
92856: PPUSH
92857: CALL_OW 1
92861: ST_TO_ADDR
// attacking := true ;
92862: LD_ADDR_VAR 0 29
92866: PUSH
92867: LD_INT 1
92869: ST_TO_ADDR
// break ;
92870: GO 92874
// end ; end ;
92872: GO 92741
92874: POP
92875: POP
// if not attacking and f_attack_depot then
92876: LD_VAR 0 29
92880: NOT
92881: PUSH
92882: LD_VAR 0 25
92886: AND
92887: IFFALSE 92982
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
92889: LD_ADDR_VAR 0 13
92893: PUSH
92894: LD_VAR 0 14
92898: PPUSH
92899: LD_INT 2
92901: PUSH
92902: LD_INT 30
92904: PUSH
92905: LD_INT 0
92907: PUSH
92908: EMPTY
92909: LIST
92910: LIST
92911: PUSH
92912: LD_INT 30
92914: PUSH
92915: LD_INT 1
92917: PUSH
92918: EMPTY
92919: LIST
92920: LIST
92921: PUSH
92922: EMPTY
92923: LIST
92924: LIST
92925: LIST
92926: PPUSH
92927: CALL_OW 72
92931: ST_TO_ADDR
// if z then
92932: LD_VAR 0 13
92936: IFFALSE 92982
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
92938: LD_VAR 0 4
92942: PUSH
92943: LD_VAR 0 7
92947: ARRAY
92948: PPUSH
92949: LD_VAR 0 13
92953: PPUSH
92954: LD_VAR 0 4
92958: PUSH
92959: LD_VAR 0 7
92963: ARRAY
92964: PPUSH
92965: CALL_OW 74
92969: PPUSH
92970: CALL_OW 115
// attacking := true ;
92974: LD_ADDR_VAR 0 29
92978: PUSH
92979: LD_INT 1
92981: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
92982: LD_VAR 0 4
92986: PUSH
92987: LD_VAR 0 7
92991: ARRAY
92992: PPUSH
92993: CALL_OW 256
92997: PUSH
92998: LD_INT 500
93000: LESS
93001: IFFALSE 93027
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
93003: LD_VAR 0 4
93007: PUSH
93008: LD_VAR 0 7
93012: ARRAY
93013: PPUSH
93014: LD_VAR 0 14
93018: PUSH
93019: LD_INT 1
93021: ARRAY
93022: PPUSH
93023: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
93027: LD_VAR 0 4
93031: PUSH
93032: LD_VAR 0 7
93036: ARRAY
93037: PPUSH
93038: CALL_OW 264
93042: PUSH
93043: LD_INT 49
93045: EQUAL
93046: IFFALSE 93167
// begin if not HasTask ( group [ i ] ) then
93048: LD_VAR 0 4
93052: PUSH
93053: LD_VAR 0 7
93057: ARRAY
93058: PPUSH
93059: CALL_OW 314
93063: NOT
93064: IFFALSE 93167
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
93066: LD_ADDR_VAR 0 9
93070: PUSH
93071: LD_INT 81
93073: PUSH
93074: LD_VAR 0 4
93078: PUSH
93079: LD_VAR 0 7
93083: ARRAY
93084: PPUSH
93085: CALL_OW 255
93089: PUSH
93090: EMPTY
93091: LIST
93092: LIST
93093: PPUSH
93094: CALL_OW 69
93098: PPUSH
93099: LD_VAR 0 4
93103: PUSH
93104: LD_VAR 0 7
93108: ARRAY
93109: PPUSH
93110: CALL_OW 74
93114: ST_TO_ADDR
// if k then
93115: LD_VAR 0 9
93119: IFFALSE 93167
// if GetDistUnits ( group [ i ] , k ) > 10 then
93121: LD_VAR 0 4
93125: PUSH
93126: LD_VAR 0 7
93130: ARRAY
93131: PPUSH
93132: LD_VAR 0 9
93136: PPUSH
93137: CALL_OW 296
93141: PUSH
93142: LD_INT 10
93144: GREATER
93145: IFFALSE 93167
// ComMoveUnit ( group [ i ] , k ) ;
93147: LD_VAR 0 4
93151: PUSH
93152: LD_VAR 0 7
93156: ARRAY
93157: PPUSH
93158: LD_VAR 0 9
93162: PPUSH
93163: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
93167: LD_VAR 0 4
93171: PUSH
93172: LD_VAR 0 7
93176: ARRAY
93177: PPUSH
93178: CALL_OW 256
93182: PUSH
93183: LD_INT 250
93185: LESS
93186: PUSH
93187: LD_VAR 0 4
93191: PUSH
93192: LD_VAR 0 7
93196: ARRAY
93197: PUSH
93198: LD_INT 21
93200: PUSH
93201: LD_INT 2
93203: PUSH
93204: EMPTY
93205: LIST
93206: LIST
93207: PUSH
93208: LD_INT 23
93210: PUSH
93211: LD_INT 2
93213: PUSH
93214: EMPTY
93215: LIST
93216: LIST
93217: PUSH
93218: EMPTY
93219: LIST
93220: LIST
93221: PPUSH
93222: CALL_OW 69
93226: IN
93227: AND
93228: IFFALSE 93353
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
93230: LD_ADDR_VAR 0 9
93234: PUSH
93235: LD_OWVAR 3
93239: PUSH
93240: LD_VAR 0 4
93244: PUSH
93245: LD_VAR 0 7
93249: ARRAY
93250: DIFF
93251: PPUSH
93252: LD_VAR 0 4
93256: PUSH
93257: LD_VAR 0 7
93261: ARRAY
93262: PPUSH
93263: CALL_OW 74
93267: ST_TO_ADDR
// if not k then
93268: LD_VAR 0 9
93272: NOT
93273: IFFALSE 93277
// continue ;
93275: GO 89692
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
93277: LD_VAR 0 9
93281: PUSH
93282: LD_INT 81
93284: PUSH
93285: LD_VAR 0 4
93289: PUSH
93290: LD_VAR 0 7
93294: ARRAY
93295: PPUSH
93296: CALL_OW 255
93300: PUSH
93301: EMPTY
93302: LIST
93303: LIST
93304: PPUSH
93305: CALL_OW 69
93309: IN
93310: PUSH
93311: LD_VAR 0 9
93315: PPUSH
93316: LD_VAR 0 4
93320: PUSH
93321: LD_VAR 0 7
93325: ARRAY
93326: PPUSH
93327: CALL_OW 296
93331: PUSH
93332: LD_INT 5
93334: LESS
93335: AND
93336: IFFALSE 93353
// ComAutodestruct ( group [ i ] ) ;
93338: LD_VAR 0 4
93342: PUSH
93343: LD_VAR 0 7
93347: ARRAY
93348: PPUSH
93349: CALL 43214 0 1
// end ; if f_attack_depot then
93353: LD_VAR 0 25
93357: IFFALSE 93469
// begin k := 6 ;
93359: LD_ADDR_VAR 0 9
93363: PUSH
93364: LD_INT 6
93366: ST_TO_ADDR
// if tmp < k then
93367: LD_VAR 0 14
93371: PUSH
93372: LD_VAR 0 9
93376: LESS
93377: IFFALSE 93389
// k := tmp ;
93379: LD_ADDR_VAR 0 9
93383: PUSH
93384: LD_VAR 0 14
93388: ST_TO_ADDR
// for j = 1 to k do
93389: LD_ADDR_VAR 0 8
93393: PUSH
93394: DOUBLE
93395: LD_INT 1
93397: DEC
93398: ST_TO_ADDR
93399: LD_VAR 0 9
93403: PUSH
93404: FOR_TO
93405: IFFALSE 93467
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
93407: LD_VAR 0 8
93411: PPUSH
93412: CALL_OW 266
93416: PUSH
93417: LD_INT 0
93419: PUSH
93420: LD_INT 1
93422: PUSH
93423: EMPTY
93424: LIST
93425: LIST
93426: IN
93427: IFFALSE 93465
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
93429: LD_VAR 0 4
93433: PUSH
93434: LD_VAR 0 7
93438: ARRAY
93439: PPUSH
93440: LD_VAR 0 14
93444: PUSH
93445: LD_VAR 0 8
93449: ARRAY
93450: PPUSH
93451: CALL_OW 115
// attacking := true ;
93455: LD_ADDR_VAR 0 29
93459: PUSH
93460: LD_INT 1
93462: ST_TO_ADDR
// break ;
93463: GO 93467
// end ;
93465: GO 93404
93467: POP
93468: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
93469: LD_VAR 0 4
93473: PUSH
93474: LD_VAR 0 7
93478: ARRAY
93479: PPUSH
93480: CALL_OW 302
93484: PUSH
93485: LD_VAR 0 29
93489: NOT
93490: AND
93491: IFFALSE 93813
// begin if GetTag ( group [ i ] ) = 71 then
93493: LD_VAR 0 4
93497: PUSH
93498: LD_VAR 0 7
93502: ARRAY
93503: PPUSH
93504: CALL_OW 110
93508: PUSH
93509: LD_INT 71
93511: EQUAL
93512: IFFALSE 93553
// begin if HasTask ( group [ i ] ) then
93514: LD_VAR 0 4
93518: PUSH
93519: LD_VAR 0 7
93523: ARRAY
93524: PPUSH
93525: CALL_OW 314
93529: IFFALSE 93535
// continue else
93531: GO 89692
93533: GO 93553
// SetTag ( group [ i ] , 0 ) ;
93535: LD_VAR 0 4
93539: PUSH
93540: LD_VAR 0 7
93544: ARRAY
93545: PPUSH
93546: LD_INT 0
93548: PPUSH
93549: CALL_OW 109
// end ; k := 8 ;
93553: LD_ADDR_VAR 0 9
93557: PUSH
93558: LD_INT 8
93560: ST_TO_ADDR
// x := 0 ;
93561: LD_ADDR_VAR 0 10
93565: PUSH
93566: LD_INT 0
93568: ST_TO_ADDR
// if tmp < k then
93569: LD_VAR 0 14
93573: PUSH
93574: LD_VAR 0 9
93578: LESS
93579: IFFALSE 93591
// k := tmp ;
93581: LD_ADDR_VAR 0 9
93585: PUSH
93586: LD_VAR 0 14
93590: ST_TO_ADDR
// for j = 1 to k do
93591: LD_ADDR_VAR 0 8
93595: PUSH
93596: DOUBLE
93597: LD_INT 1
93599: DEC
93600: ST_TO_ADDR
93601: LD_VAR 0 9
93605: PUSH
93606: FOR_TO
93607: IFFALSE 93705
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
93609: LD_VAR 0 14
93613: PUSH
93614: LD_VAR 0 8
93618: ARRAY
93619: PPUSH
93620: CALL_OW 247
93624: PUSH
93625: LD_INT 1
93627: EQUAL
93628: PUSH
93629: LD_VAR 0 14
93633: PUSH
93634: LD_VAR 0 8
93638: ARRAY
93639: PPUSH
93640: CALL_OW 256
93644: PUSH
93645: LD_INT 250
93647: LESS
93648: PUSH
93649: LD_VAR 0 20
93653: AND
93654: PUSH
93655: LD_VAR 0 20
93659: NOT
93660: PUSH
93661: LD_VAR 0 14
93665: PUSH
93666: LD_VAR 0 8
93670: ARRAY
93671: PPUSH
93672: CALL_OW 256
93676: PUSH
93677: LD_INT 250
93679: GREATEREQUAL
93680: AND
93681: OR
93682: AND
93683: IFFALSE 93703
// begin x := tmp [ j ] ;
93685: LD_ADDR_VAR 0 10
93689: PUSH
93690: LD_VAR 0 14
93694: PUSH
93695: LD_VAR 0 8
93699: ARRAY
93700: ST_TO_ADDR
// break ;
93701: GO 93705
// end ;
93703: GO 93606
93705: POP
93706: POP
// if x then
93707: LD_VAR 0 10
93711: IFFALSE 93735
// ComAttackUnit ( group [ i ] , x ) else
93713: LD_VAR 0 4
93717: PUSH
93718: LD_VAR 0 7
93722: ARRAY
93723: PPUSH
93724: LD_VAR 0 10
93728: PPUSH
93729: CALL_OW 115
93733: GO 93759
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
93735: LD_VAR 0 4
93739: PUSH
93740: LD_VAR 0 7
93744: ARRAY
93745: PPUSH
93746: LD_VAR 0 14
93750: PUSH
93751: LD_INT 1
93753: ARRAY
93754: PPUSH
93755: CALL_OW 115
// if not HasTask ( group [ i ] ) then
93759: LD_VAR 0 4
93763: PUSH
93764: LD_VAR 0 7
93768: ARRAY
93769: PPUSH
93770: CALL_OW 314
93774: NOT
93775: IFFALSE 93813
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
93777: LD_VAR 0 4
93781: PUSH
93782: LD_VAR 0 7
93786: ARRAY
93787: PPUSH
93788: LD_VAR 0 14
93792: PPUSH
93793: LD_VAR 0 4
93797: PUSH
93798: LD_VAR 0 7
93802: ARRAY
93803: PPUSH
93804: CALL_OW 74
93808: PPUSH
93809: CALL_OW 115
// end ; end ; end ;
93813: GO 89692
93815: POP
93816: POP
// wait ( 0 0$2 ) ;
93817: LD_INT 70
93819: PPUSH
93820: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
93824: LD_VAR 0 4
93828: NOT
93829: PUSH
93830: LD_VAR 0 4
93834: PUSH
93835: EMPTY
93836: EQUAL
93837: OR
93838: PUSH
93839: LD_INT 81
93841: PUSH
93842: LD_VAR 0 35
93846: PUSH
93847: EMPTY
93848: LIST
93849: LIST
93850: PPUSH
93851: CALL_OW 69
93855: NOT
93856: OR
93857: IFFALSE 89677
// end ;
93859: LD_VAR 0 2
93863: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
93864: LD_INT 0
93866: PPUSH
93867: PPUSH
93868: PPUSH
93869: PPUSH
93870: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
93871: LD_VAR 0 1
93875: NOT
93876: PUSH
93877: LD_EXP 60
93881: PUSH
93882: LD_VAR 0 1
93886: ARRAY
93887: NOT
93888: OR
93889: PUSH
93890: LD_VAR 0 2
93894: NOT
93895: OR
93896: PUSH
93897: LD_VAR 0 3
93901: NOT
93902: OR
93903: IFFALSE 93907
// exit ;
93905: GO 94420
// side := mc_sides [ base ] ;
93907: LD_ADDR_VAR 0 6
93911: PUSH
93912: LD_EXP 86
93916: PUSH
93917: LD_VAR 0 1
93921: ARRAY
93922: ST_TO_ADDR
// if not side then
93923: LD_VAR 0 6
93927: NOT
93928: IFFALSE 93932
// exit ;
93930: GO 94420
// for i in solds do
93932: LD_ADDR_VAR 0 7
93936: PUSH
93937: LD_VAR 0 2
93941: PUSH
93942: FOR_IN
93943: IFFALSE 94004
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
93945: LD_VAR 0 7
93949: PPUSH
93950: CALL_OW 310
93954: PPUSH
93955: CALL_OW 266
93959: PUSH
93960: LD_INT 32
93962: PUSH
93963: LD_INT 31
93965: PUSH
93966: EMPTY
93967: LIST
93968: LIST
93969: IN
93970: IFFALSE 93990
// solds := solds diff i else
93972: LD_ADDR_VAR 0 2
93976: PUSH
93977: LD_VAR 0 2
93981: PUSH
93982: LD_VAR 0 7
93986: DIFF
93987: ST_TO_ADDR
93988: GO 94002
// SetTag ( i , 18 ) ;
93990: LD_VAR 0 7
93994: PPUSH
93995: LD_INT 18
93997: PPUSH
93998: CALL_OW 109
94002: GO 93942
94004: POP
94005: POP
// if not solds then
94006: LD_VAR 0 2
94010: NOT
94011: IFFALSE 94015
// exit ;
94013: GO 94420
// repeat wait ( 0 0$1 ) ;
94015: LD_INT 35
94017: PPUSH
94018: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
94022: LD_ADDR_VAR 0 5
94026: PUSH
94027: LD_VAR 0 6
94031: PPUSH
94032: LD_VAR 0 3
94036: PPUSH
94037: CALL 12929 0 2
94041: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
94042: LD_EXP 60
94046: PUSH
94047: LD_VAR 0 1
94051: ARRAY
94052: NOT
94053: PUSH
94054: LD_EXP 60
94058: PUSH
94059: LD_VAR 0 1
94063: ARRAY
94064: PUSH
94065: EMPTY
94066: EQUAL
94067: OR
94068: IFFALSE 94105
// begin for i in solds do
94070: LD_ADDR_VAR 0 7
94074: PUSH
94075: LD_VAR 0 2
94079: PUSH
94080: FOR_IN
94081: IFFALSE 94094
// ComStop ( i ) ;
94083: LD_VAR 0 7
94087: PPUSH
94088: CALL_OW 141
94092: GO 94080
94094: POP
94095: POP
// solds := [ ] ;
94096: LD_ADDR_VAR 0 2
94100: PUSH
94101: EMPTY
94102: ST_TO_ADDR
// exit ;
94103: GO 94420
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
94105: LD_VAR 0 5
94109: NOT
94110: PUSH
94111: LD_VAR 0 5
94115: PUSH
94116: LD_INT 3
94118: GREATER
94119: OR
94120: PUSH
94121: LD_EXP 82
94125: PUSH
94126: LD_VAR 0 1
94130: ARRAY
94131: OR
94132: IFFALSE 94173
// begin for i in solds do
94134: LD_ADDR_VAR 0 7
94138: PUSH
94139: LD_VAR 0 2
94143: PUSH
94144: FOR_IN
94145: IFFALSE 94169
// if HasTask ( i ) then
94147: LD_VAR 0 7
94151: PPUSH
94152: CALL_OW 314
94156: IFFALSE 94167
// ComStop ( i ) ;
94158: LD_VAR 0 7
94162: PPUSH
94163: CALL_OW 141
94167: GO 94144
94169: POP
94170: POP
// break ;
94171: GO 94408
// end ; for i in solds do
94173: LD_ADDR_VAR 0 7
94177: PUSH
94178: LD_VAR 0 2
94182: PUSH
94183: FOR_IN
94184: IFFALSE 94400
// begin if IsInUnit ( i ) then
94186: LD_VAR 0 7
94190: PPUSH
94191: CALL_OW 310
94195: IFFALSE 94206
// ComExitBuilding ( i ) ;
94197: LD_VAR 0 7
94201: PPUSH
94202: CALL_OW 122
// if GetLives ( i ) > 333 then
94206: LD_VAR 0 7
94210: PPUSH
94211: CALL_OW 256
94215: PUSH
94216: LD_INT 333
94218: GREATER
94219: IFFALSE 94247
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
94221: LD_VAR 0 7
94225: PPUSH
94226: LD_VAR 0 5
94230: PPUSH
94231: LD_VAR 0 7
94235: PPUSH
94236: CALL_OW 74
94240: PPUSH
94241: CALL_OW 115
94245: GO 94398
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
94247: LD_ADDR_VAR 0 8
94251: PUSH
94252: LD_EXP 60
94256: PUSH
94257: LD_VAR 0 1
94261: ARRAY
94262: PPUSH
94263: LD_INT 2
94265: PUSH
94266: LD_INT 30
94268: PUSH
94269: LD_INT 0
94271: PUSH
94272: EMPTY
94273: LIST
94274: LIST
94275: PUSH
94276: LD_INT 30
94278: PUSH
94279: LD_INT 1
94281: PUSH
94282: EMPTY
94283: LIST
94284: LIST
94285: PUSH
94286: LD_INT 30
94288: PUSH
94289: LD_INT 6
94291: PUSH
94292: EMPTY
94293: LIST
94294: LIST
94295: PUSH
94296: EMPTY
94297: LIST
94298: LIST
94299: LIST
94300: LIST
94301: PPUSH
94302: CALL_OW 72
94306: PPUSH
94307: LD_VAR 0 7
94311: PPUSH
94312: CALL_OW 74
94316: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
94317: LD_VAR 0 7
94321: PPUSH
94322: LD_VAR 0 8
94326: PPUSH
94327: CALL_OW 250
94331: PPUSH
94332: LD_INT 3
94334: PPUSH
94335: LD_INT 5
94337: PPUSH
94338: CALL_OW 272
94342: PPUSH
94343: LD_VAR 0 8
94347: PPUSH
94348: CALL_OW 251
94352: PPUSH
94353: LD_INT 3
94355: PPUSH
94356: LD_INT 5
94358: PPUSH
94359: CALL_OW 273
94363: PPUSH
94364: CALL_OW 111
// SetTag ( i , 0 ) ;
94368: LD_VAR 0 7
94372: PPUSH
94373: LD_INT 0
94375: PPUSH
94376: CALL_OW 109
// solds := solds diff i ;
94380: LD_ADDR_VAR 0 2
94384: PUSH
94385: LD_VAR 0 2
94389: PUSH
94390: LD_VAR 0 7
94394: DIFF
94395: ST_TO_ADDR
// continue ;
94396: GO 94183
// end ; end ;
94398: GO 94183
94400: POP
94401: POP
// until solds ;
94402: LD_VAR 0 2
94406: IFFALSE 94015
// MC_Reset ( base , 18 ) ;
94408: LD_VAR 0 1
94412: PPUSH
94413: LD_INT 18
94415: PPUSH
94416: CALL 51613 0 2
// end ;
94420: LD_VAR 0 4
94424: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
94425: LD_INT 0
94427: PPUSH
94428: PPUSH
94429: PPUSH
94430: PPUSH
94431: PPUSH
94432: PPUSH
94433: PPUSH
94434: PPUSH
94435: PPUSH
94436: PPUSH
94437: PPUSH
94438: PPUSH
94439: PPUSH
94440: PPUSH
94441: PPUSH
94442: PPUSH
94443: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
94444: LD_ADDR_VAR 0 13
94448: PUSH
94449: LD_EXP 60
94453: PUSH
94454: LD_VAR 0 1
94458: ARRAY
94459: PPUSH
94460: LD_INT 25
94462: PUSH
94463: LD_INT 3
94465: PUSH
94466: EMPTY
94467: LIST
94468: LIST
94469: PPUSH
94470: CALL_OW 72
94474: ST_TO_ADDR
// if mc_remote_driver [ base ] then
94475: LD_EXP 100
94479: PUSH
94480: LD_VAR 0 1
94484: ARRAY
94485: IFFALSE 94509
// mechs := mechs diff mc_remote_driver [ base ] ;
94487: LD_ADDR_VAR 0 13
94491: PUSH
94492: LD_VAR 0 13
94496: PUSH
94497: LD_EXP 100
94501: PUSH
94502: LD_VAR 0 1
94506: ARRAY
94507: DIFF
94508: ST_TO_ADDR
// for i in mechs do
94509: LD_ADDR_VAR 0 5
94513: PUSH
94514: LD_VAR 0 13
94518: PUSH
94519: FOR_IN
94520: IFFALSE 94555
// if GetTag ( i ) > 0 then
94522: LD_VAR 0 5
94526: PPUSH
94527: CALL_OW 110
94531: PUSH
94532: LD_INT 0
94534: GREATER
94535: IFFALSE 94553
// mechs := mechs diff i ;
94537: LD_ADDR_VAR 0 13
94541: PUSH
94542: LD_VAR 0 13
94546: PUSH
94547: LD_VAR 0 5
94551: DIFF
94552: ST_TO_ADDR
94553: GO 94519
94555: POP
94556: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
94557: LD_ADDR_VAR 0 9
94561: PUSH
94562: LD_EXP 60
94566: PUSH
94567: LD_VAR 0 1
94571: ARRAY
94572: PPUSH
94573: LD_INT 2
94575: PUSH
94576: LD_INT 25
94578: PUSH
94579: LD_INT 1
94581: PUSH
94582: EMPTY
94583: LIST
94584: LIST
94585: PUSH
94586: LD_INT 25
94588: PUSH
94589: LD_INT 5
94591: PUSH
94592: EMPTY
94593: LIST
94594: LIST
94595: PUSH
94596: LD_INT 25
94598: PUSH
94599: LD_INT 8
94601: PUSH
94602: EMPTY
94603: LIST
94604: LIST
94605: PUSH
94606: LD_INT 25
94608: PUSH
94609: LD_INT 9
94611: PUSH
94612: EMPTY
94613: LIST
94614: LIST
94615: PUSH
94616: EMPTY
94617: LIST
94618: LIST
94619: LIST
94620: LIST
94621: LIST
94622: PPUSH
94623: CALL_OW 72
94627: ST_TO_ADDR
// if not defenders and not solds then
94628: LD_VAR 0 2
94632: NOT
94633: PUSH
94634: LD_VAR 0 9
94638: NOT
94639: AND
94640: IFFALSE 94644
// exit ;
94642: GO 96270
// depot_under_attack := false ;
94644: LD_ADDR_VAR 0 17
94648: PUSH
94649: LD_INT 0
94651: ST_TO_ADDR
// sold_defenders := [ ] ;
94652: LD_ADDR_VAR 0 18
94656: PUSH
94657: EMPTY
94658: ST_TO_ADDR
// if mechs then
94659: LD_VAR 0 13
94663: IFFALSE 94792
// for i in defenders do
94665: LD_ADDR_VAR 0 5
94669: PUSH
94670: LD_VAR 0 2
94674: PUSH
94675: FOR_IN
94676: IFFALSE 94790
// begin SetTag ( i , 20 ) ;
94678: LD_VAR 0 5
94682: PPUSH
94683: LD_INT 20
94685: PPUSH
94686: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
94690: LD_VAR 0 5
94694: PPUSH
94695: CALL_OW 263
94699: PUSH
94700: LD_INT 1
94702: EQUAL
94703: PUSH
94704: LD_VAR 0 5
94708: PPUSH
94709: CALL_OW 311
94713: NOT
94714: AND
94715: PUSH
94716: LD_VAR 0 13
94720: AND
94721: IFFALSE 94788
// begin un := mechs [ 1 ] ;
94723: LD_ADDR_VAR 0 11
94727: PUSH
94728: LD_VAR 0 13
94732: PUSH
94733: LD_INT 1
94735: ARRAY
94736: ST_TO_ADDR
// ComExitBuilding ( un ) ;
94737: LD_VAR 0 11
94741: PPUSH
94742: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
94746: LD_VAR 0 11
94750: PPUSH
94751: LD_VAR 0 5
94755: PPUSH
94756: CALL_OW 180
// SetTag ( un , 19 ) ;
94760: LD_VAR 0 11
94764: PPUSH
94765: LD_INT 19
94767: PPUSH
94768: CALL_OW 109
// mechs := mechs diff un ;
94772: LD_ADDR_VAR 0 13
94776: PUSH
94777: LD_VAR 0 13
94781: PUSH
94782: LD_VAR 0 11
94786: DIFF
94787: ST_TO_ADDR
// end ; end ;
94788: GO 94675
94790: POP
94791: POP
// if solds then
94792: LD_VAR 0 9
94796: IFFALSE 94855
// for i in solds do
94798: LD_ADDR_VAR 0 5
94802: PUSH
94803: LD_VAR 0 9
94807: PUSH
94808: FOR_IN
94809: IFFALSE 94853
// if not GetTag ( i ) then
94811: LD_VAR 0 5
94815: PPUSH
94816: CALL_OW 110
94820: NOT
94821: IFFALSE 94851
// begin defenders := defenders union i ;
94823: LD_ADDR_VAR 0 2
94827: PUSH
94828: LD_VAR 0 2
94832: PUSH
94833: LD_VAR 0 5
94837: UNION
94838: ST_TO_ADDR
// SetTag ( i , 18 ) ;
94839: LD_VAR 0 5
94843: PPUSH
94844: LD_INT 18
94846: PPUSH
94847: CALL_OW 109
// end ;
94851: GO 94808
94853: POP
94854: POP
// repeat wait ( 0 0$1 ) ;
94855: LD_INT 35
94857: PPUSH
94858: CALL_OW 67
// enemy := mc_scan [ base ] ;
94862: LD_ADDR_VAR 0 3
94866: PUSH
94867: LD_EXP 83
94871: PUSH
94872: LD_VAR 0 1
94876: ARRAY
94877: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
94878: LD_EXP 60
94882: PUSH
94883: LD_VAR 0 1
94887: ARRAY
94888: NOT
94889: PUSH
94890: LD_EXP 60
94894: PUSH
94895: LD_VAR 0 1
94899: ARRAY
94900: PUSH
94901: EMPTY
94902: EQUAL
94903: OR
94904: IFFALSE 94941
// begin for i in defenders do
94906: LD_ADDR_VAR 0 5
94910: PUSH
94911: LD_VAR 0 2
94915: PUSH
94916: FOR_IN
94917: IFFALSE 94930
// ComStop ( i ) ;
94919: LD_VAR 0 5
94923: PPUSH
94924: CALL_OW 141
94928: GO 94916
94930: POP
94931: POP
// defenders := [ ] ;
94932: LD_ADDR_VAR 0 2
94936: PUSH
94937: EMPTY
94938: ST_TO_ADDR
// exit ;
94939: GO 96270
// end ; for i in defenders do
94941: LD_ADDR_VAR 0 5
94945: PUSH
94946: LD_VAR 0 2
94950: PUSH
94951: FOR_IN
94952: IFFALSE 95770
// begin e := NearestUnitToUnit ( enemy , i ) ;
94954: LD_ADDR_VAR 0 14
94958: PUSH
94959: LD_VAR 0 3
94963: PPUSH
94964: LD_VAR 0 5
94968: PPUSH
94969: CALL_OW 74
94973: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
94974: LD_ADDR_VAR 0 8
94978: PUSH
94979: LD_EXP 60
94983: PUSH
94984: LD_VAR 0 1
94988: ARRAY
94989: PPUSH
94990: LD_INT 2
94992: PUSH
94993: LD_INT 30
94995: PUSH
94996: LD_INT 0
94998: PUSH
94999: EMPTY
95000: LIST
95001: LIST
95002: PUSH
95003: LD_INT 30
95005: PUSH
95006: LD_INT 1
95008: PUSH
95009: EMPTY
95010: LIST
95011: LIST
95012: PUSH
95013: EMPTY
95014: LIST
95015: LIST
95016: LIST
95017: PPUSH
95018: CALL_OW 72
95022: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
95023: LD_ADDR_VAR 0 17
95027: PUSH
95028: LD_VAR 0 8
95032: NOT
95033: PUSH
95034: LD_VAR 0 8
95038: PPUSH
95039: LD_INT 3
95041: PUSH
95042: LD_INT 24
95044: PUSH
95045: LD_INT 600
95047: PUSH
95048: EMPTY
95049: LIST
95050: LIST
95051: PUSH
95052: EMPTY
95053: LIST
95054: LIST
95055: PPUSH
95056: CALL_OW 72
95060: OR
95061: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
95062: LD_VAR 0 5
95066: PPUSH
95067: CALL_OW 247
95071: PUSH
95072: LD_INT 2
95074: DOUBLE
95075: EQUAL
95076: IFTRUE 95080
95078: GO 95476
95080: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
95081: LD_VAR 0 5
95085: PPUSH
95086: CALL_OW 256
95090: PUSH
95091: LD_INT 650
95093: GREATER
95094: PUSH
95095: LD_VAR 0 5
95099: PPUSH
95100: LD_VAR 0 14
95104: PPUSH
95105: CALL_OW 296
95109: PUSH
95110: LD_INT 40
95112: LESS
95113: PUSH
95114: LD_VAR 0 14
95118: PPUSH
95119: LD_EXP 85
95123: PUSH
95124: LD_VAR 0 1
95128: ARRAY
95129: PPUSH
95130: CALL_OW 308
95134: OR
95135: AND
95136: IFFALSE 95258
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
95138: LD_VAR 0 5
95142: PPUSH
95143: CALL_OW 262
95147: PUSH
95148: LD_INT 1
95150: EQUAL
95151: PUSH
95152: LD_VAR 0 5
95156: PPUSH
95157: CALL_OW 261
95161: PUSH
95162: LD_INT 30
95164: LESS
95165: AND
95166: PUSH
95167: LD_VAR 0 8
95171: AND
95172: IFFALSE 95242
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
95174: LD_VAR 0 5
95178: PPUSH
95179: LD_VAR 0 8
95183: PPUSH
95184: LD_VAR 0 5
95188: PPUSH
95189: CALL_OW 74
95193: PPUSH
95194: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
95198: LD_VAR 0 5
95202: PPUSH
95203: LD_VAR 0 8
95207: PPUSH
95208: LD_VAR 0 5
95212: PPUSH
95213: CALL_OW 74
95217: PPUSH
95218: CALL_OW 296
95222: PUSH
95223: LD_INT 6
95225: LESS
95226: IFFALSE 95240
// SetFuel ( i , 100 ) ;
95228: LD_VAR 0 5
95232: PPUSH
95233: LD_INT 100
95235: PPUSH
95236: CALL_OW 240
// end else
95240: GO 95256
// ComAttackUnit ( i , e ) ;
95242: LD_VAR 0 5
95246: PPUSH
95247: LD_VAR 0 14
95251: PPUSH
95252: CALL_OW 115
// end else
95256: GO 95359
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
95258: LD_VAR 0 14
95262: PPUSH
95263: LD_EXP 85
95267: PUSH
95268: LD_VAR 0 1
95272: ARRAY
95273: PPUSH
95274: CALL_OW 308
95278: NOT
95279: PUSH
95280: LD_VAR 0 5
95284: PPUSH
95285: LD_VAR 0 14
95289: PPUSH
95290: CALL_OW 296
95294: PUSH
95295: LD_INT 40
95297: GREATEREQUAL
95298: AND
95299: PUSH
95300: LD_VAR 0 5
95304: PPUSH
95305: CALL_OW 256
95309: PUSH
95310: LD_INT 650
95312: LESSEQUAL
95313: OR
95314: PUSH
95315: LD_VAR 0 5
95319: PPUSH
95320: LD_EXP 84
95324: PUSH
95325: LD_VAR 0 1
95329: ARRAY
95330: PPUSH
95331: CALL_OW 308
95335: NOT
95336: AND
95337: IFFALSE 95359
// ComMoveToArea ( i , mc_parking [ base ] ) ;
95339: LD_VAR 0 5
95343: PPUSH
95344: LD_EXP 84
95348: PUSH
95349: LD_VAR 0 1
95353: ARRAY
95354: PPUSH
95355: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
95359: LD_VAR 0 5
95363: PPUSH
95364: CALL_OW 256
95368: PUSH
95369: LD_INT 998
95371: LESS
95372: PUSH
95373: LD_VAR 0 5
95377: PPUSH
95378: CALL_OW 263
95382: PUSH
95383: LD_INT 1
95385: EQUAL
95386: AND
95387: PUSH
95388: LD_VAR 0 5
95392: PPUSH
95393: CALL_OW 311
95397: AND
95398: PUSH
95399: LD_VAR 0 5
95403: PPUSH
95404: LD_EXP 84
95408: PUSH
95409: LD_VAR 0 1
95413: ARRAY
95414: PPUSH
95415: CALL_OW 308
95419: AND
95420: IFFALSE 95474
// begin mech := IsDrivenBy ( i ) ;
95422: LD_ADDR_VAR 0 10
95426: PUSH
95427: LD_VAR 0 5
95431: PPUSH
95432: CALL_OW 311
95436: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
95437: LD_VAR 0 10
95441: PPUSH
95442: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
95446: LD_VAR 0 10
95450: PPUSH
95451: LD_VAR 0 5
95455: PPUSH
95456: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
95460: LD_VAR 0 10
95464: PPUSH
95465: LD_VAR 0 5
95469: PPUSH
95470: CALL_OW 180
// end ; end ; unit_human :
95474: GO 95741
95476: LD_INT 1
95478: DOUBLE
95479: EQUAL
95480: IFTRUE 95484
95482: GO 95740
95484: POP
// begin b := IsInUnit ( i ) ;
95485: LD_ADDR_VAR 0 19
95489: PUSH
95490: LD_VAR 0 5
95494: PPUSH
95495: CALL_OW 310
95499: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
95500: LD_ADDR_VAR 0 20
95504: PUSH
95505: LD_VAR 0 19
95509: NOT
95510: PUSH
95511: LD_VAR 0 19
95515: PPUSH
95516: CALL_OW 266
95520: PUSH
95521: LD_INT 32
95523: PUSH
95524: LD_INT 31
95526: PUSH
95527: EMPTY
95528: LIST
95529: LIST
95530: IN
95531: OR
95532: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
95533: LD_VAR 0 17
95537: PUSH
95538: LD_VAR 0 2
95542: PPUSH
95543: LD_INT 21
95545: PUSH
95546: LD_INT 2
95548: PUSH
95549: EMPTY
95550: LIST
95551: LIST
95552: PPUSH
95553: CALL_OW 72
95557: PUSH
95558: LD_INT 1
95560: LESSEQUAL
95561: OR
95562: PUSH
95563: LD_VAR 0 20
95567: AND
95568: PUSH
95569: LD_VAR 0 5
95573: PUSH
95574: LD_VAR 0 18
95578: IN
95579: NOT
95580: AND
95581: IFFALSE 95674
// begin if b then
95583: LD_VAR 0 19
95587: IFFALSE 95636
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
95589: LD_VAR 0 19
95593: PPUSH
95594: LD_VAR 0 3
95598: PPUSH
95599: LD_VAR 0 19
95603: PPUSH
95604: CALL_OW 74
95608: PPUSH
95609: CALL_OW 296
95613: PUSH
95614: LD_INT 10
95616: LESS
95617: PUSH
95618: LD_VAR 0 19
95622: PPUSH
95623: CALL_OW 461
95627: PUSH
95628: LD_INT 7
95630: NONEQUAL
95631: AND
95632: IFFALSE 95636
// continue ;
95634: GO 94951
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
95636: LD_ADDR_VAR 0 18
95640: PUSH
95641: LD_VAR 0 18
95645: PPUSH
95646: LD_VAR 0 18
95650: PUSH
95651: LD_INT 1
95653: PLUS
95654: PPUSH
95655: LD_VAR 0 5
95659: PPUSH
95660: CALL_OW 1
95664: ST_TO_ADDR
// ComExitBuilding ( i ) ;
95665: LD_VAR 0 5
95669: PPUSH
95670: CALL_OW 122
// end ; if sold_defenders then
95674: LD_VAR 0 18
95678: IFFALSE 95738
// if i in sold_defenders then
95680: LD_VAR 0 5
95684: PUSH
95685: LD_VAR 0 18
95689: IN
95690: IFFALSE 95738
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
95692: LD_VAR 0 5
95696: PPUSH
95697: CALL_OW 314
95701: NOT
95702: PUSH
95703: LD_VAR 0 5
95707: PPUSH
95708: LD_VAR 0 14
95712: PPUSH
95713: CALL_OW 296
95717: PUSH
95718: LD_INT 30
95720: LESS
95721: AND
95722: IFFALSE 95738
// ComAttackUnit ( i , e ) ;
95724: LD_VAR 0 5
95728: PPUSH
95729: LD_VAR 0 14
95733: PPUSH
95734: CALL_OW 115
// end ; end ; end ;
95738: GO 95741
95740: POP
// if IsDead ( i ) then
95741: LD_VAR 0 5
95745: PPUSH
95746: CALL_OW 301
95750: IFFALSE 95768
// defenders := defenders diff i ;
95752: LD_ADDR_VAR 0 2
95756: PUSH
95757: LD_VAR 0 2
95761: PUSH
95762: LD_VAR 0 5
95766: DIFF
95767: ST_TO_ADDR
// end ;
95768: GO 94951
95770: POP
95771: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
95772: LD_VAR 0 3
95776: NOT
95777: PUSH
95778: LD_VAR 0 2
95782: NOT
95783: OR
95784: PUSH
95785: LD_EXP 60
95789: PUSH
95790: LD_VAR 0 1
95794: ARRAY
95795: NOT
95796: OR
95797: IFFALSE 94855
// MC_Reset ( base , 18 ) ;
95799: LD_VAR 0 1
95803: PPUSH
95804: LD_INT 18
95806: PPUSH
95807: CALL 51613 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
95811: LD_ADDR_VAR 0 2
95815: PUSH
95816: LD_VAR 0 2
95820: PUSH
95821: LD_VAR 0 2
95825: PPUSH
95826: LD_INT 2
95828: PUSH
95829: LD_INT 25
95831: PUSH
95832: LD_INT 1
95834: PUSH
95835: EMPTY
95836: LIST
95837: LIST
95838: PUSH
95839: LD_INT 25
95841: PUSH
95842: LD_INT 5
95844: PUSH
95845: EMPTY
95846: LIST
95847: LIST
95848: PUSH
95849: LD_INT 25
95851: PUSH
95852: LD_INT 8
95854: PUSH
95855: EMPTY
95856: LIST
95857: LIST
95858: PUSH
95859: LD_INT 25
95861: PUSH
95862: LD_INT 9
95864: PUSH
95865: EMPTY
95866: LIST
95867: LIST
95868: PUSH
95869: EMPTY
95870: LIST
95871: LIST
95872: LIST
95873: LIST
95874: LIST
95875: PPUSH
95876: CALL_OW 72
95880: DIFF
95881: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
95882: LD_VAR 0 3
95886: NOT
95887: PUSH
95888: LD_VAR 0 2
95892: PPUSH
95893: LD_INT 21
95895: PUSH
95896: LD_INT 2
95898: PUSH
95899: EMPTY
95900: LIST
95901: LIST
95902: PPUSH
95903: CALL_OW 72
95907: AND
95908: IFFALSE 96246
// begin tmp := FilterByTag ( defenders , 19 ) ;
95910: LD_ADDR_VAR 0 12
95914: PUSH
95915: LD_VAR 0 2
95919: PPUSH
95920: LD_INT 19
95922: PPUSH
95923: CALL 44689 0 2
95927: ST_TO_ADDR
// if tmp then
95928: LD_VAR 0 12
95932: IFFALSE 96002
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
95934: LD_ADDR_VAR 0 12
95938: PUSH
95939: LD_VAR 0 12
95943: PPUSH
95944: LD_INT 25
95946: PUSH
95947: LD_INT 3
95949: PUSH
95950: EMPTY
95951: LIST
95952: LIST
95953: PPUSH
95954: CALL_OW 72
95958: ST_TO_ADDR
// if tmp then
95959: LD_VAR 0 12
95963: IFFALSE 96002
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
95965: LD_ADDR_EXP 72
95969: PUSH
95970: LD_EXP 72
95974: PPUSH
95975: LD_VAR 0 1
95979: PPUSH
95980: LD_EXP 72
95984: PUSH
95985: LD_VAR 0 1
95989: ARRAY
95990: PUSH
95991: LD_VAR 0 12
95995: UNION
95996: PPUSH
95997: CALL_OW 1
96001: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
96002: LD_VAR 0 1
96006: PPUSH
96007: LD_INT 19
96009: PPUSH
96010: CALL 51613 0 2
// repeat wait ( 0 0$1 ) ;
96014: LD_INT 35
96016: PPUSH
96017: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
96021: LD_EXP 60
96025: PUSH
96026: LD_VAR 0 1
96030: ARRAY
96031: NOT
96032: PUSH
96033: LD_EXP 60
96037: PUSH
96038: LD_VAR 0 1
96042: ARRAY
96043: PUSH
96044: EMPTY
96045: EQUAL
96046: OR
96047: IFFALSE 96084
// begin for i in defenders do
96049: LD_ADDR_VAR 0 5
96053: PUSH
96054: LD_VAR 0 2
96058: PUSH
96059: FOR_IN
96060: IFFALSE 96073
// ComStop ( i ) ;
96062: LD_VAR 0 5
96066: PPUSH
96067: CALL_OW 141
96071: GO 96059
96073: POP
96074: POP
// defenders := [ ] ;
96075: LD_ADDR_VAR 0 2
96079: PUSH
96080: EMPTY
96081: ST_TO_ADDR
// exit ;
96082: GO 96270
// end ; for i in defenders do
96084: LD_ADDR_VAR 0 5
96088: PUSH
96089: LD_VAR 0 2
96093: PUSH
96094: FOR_IN
96095: IFFALSE 96184
// begin if not IsInArea ( i , mc_parking [ base ] ) then
96097: LD_VAR 0 5
96101: PPUSH
96102: LD_EXP 84
96106: PUSH
96107: LD_VAR 0 1
96111: ARRAY
96112: PPUSH
96113: CALL_OW 308
96117: NOT
96118: IFFALSE 96142
// ComMoveToArea ( i , mc_parking [ base ] ) else
96120: LD_VAR 0 5
96124: PPUSH
96125: LD_EXP 84
96129: PUSH
96130: LD_VAR 0 1
96134: ARRAY
96135: PPUSH
96136: CALL_OW 113
96140: GO 96182
// if GetControl ( i ) = control_manual then
96142: LD_VAR 0 5
96146: PPUSH
96147: CALL_OW 263
96151: PUSH
96152: LD_INT 1
96154: EQUAL
96155: IFFALSE 96182
// if IsDrivenBy ( i ) then
96157: LD_VAR 0 5
96161: PPUSH
96162: CALL_OW 311
96166: IFFALSE 96182
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
96168: LD_VAR 0 5
96172: PPUSH
96173: CALL_OW 311
96177: PPUSH
96178: CALL_OW 121
// end ;
96182: GO 96094
96184: POP
96185: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
96186: LD_VAR 0 2
96190: PPUSH
96191: LD_INT 95
96193: PUSH
96194: LD_EXP 84
96198: PUSH
96199: LD_VAR 0 1
96203: ARRAY
96204: PUSH
96205: EMPTY
96206: LIST
96207: LIST
96208: PPUSH
96209: CALL_OW 72
96213: PUSH
96214: LD_VAR 0 2
96218: EQUAL
96219: PUSH
96220: LD_EXP 83
96224: PUSH
96225: LD_VAR 0 1
96229: ARRAY
96230: OR
96231: PUSH
96232: LD_EXP 60
96236: PUSH
96237: LD_VAR 0 1
96241: ARRAY
96242: NOT
96243: OR
96244: IFFALSE 96014
// end ; MC_Reset ( base , 19 ) ;
96246: LD_VAR 0 1
96250: PPUSH
96251: LD_INT 19
96253: PPUSH
96254: CALL 51613 0 2
// MC_Reset ( base , 20 ) ;
96258: LD_VAR 0 1
96262: PPUSH
96263: LD_INT 20
96265: PPUSH
96266: CALL 51613 0 2
// end ;
96270: LD_VAR 0 4
96274: RET
