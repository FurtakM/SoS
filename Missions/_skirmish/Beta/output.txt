// export MissionStart ; starting begin GameType ;
   0: CALL 5164 0 0
// RevealFogArea ( 1 , BetaArea ) ;
   4: LD_INT 1
   6: PPUSH
   7: LD_INT 8
   9: PPUSH
  10: CALL_OW 332
// SetBName ( BetaA , beta ) ;
  14: LD_INT 1
  16: PPUSH
  17: LD_STRING beta
  19: PPUSH
  20: CALL_OW 500
// SetBName ( BetaB , beta ) ;
  24: LD_INT 3
  26: PPUSH
  27: LD_STRING beta
  29: PPUSH
  30: CALL_OW 500
// PrepareHeroes ;
  34: CALL 2327 0 0
// PrepareBeta ;
  38: CALL 2716 0 0
// InGameOn ;
  42: CALL_OW 8
// CenterNowOnUnits ( Brighton ) ;
  46: LD_EXP 8
  50: PPUSH
  51: CALL_OW 87
// ComMoveXY ( Megan , 50 , 42 ) ;
  55: LD_EXP 10
  59: PPUSH
  60: LD_INT 50
  62: PPUSH
  63: LD_INT 42
  65: PPUSH
  66: CALL_OW 111
// repeat wait ( 0 0$1 ) until GetDistUnits ( Megan , Brighton ) < 3 ;
  70: LD_INT 35
  72: PPUSH
  73: CALL_OW 67
  77: LD_EXP 10
  81: PPUSH
  82: LD_EXP 8
  86: PPUSH
  87: CALL_OW 296
  91: PUSH
  92: LD_INT 3
  94: LESS
  95: IFFALSE 70
// ComTurnUnit ( Megan , Brighton ) ;
  97: LD_EXP 10
 101: PPUSH
 102: LD_EXP 8
 106: PPUSH
 107: CALL_OW 119
// Say ( Megan , DMegan-1a ) ;
 111: LD_EXP 10
 115: PPUSH
 116: LD_STRING DMegan-1a
 118: PPUSH
 119: CALL_OW 88
// wait ( 0 0$0.3 ) ;
 123: LD_INT 10
 125: PPUSH
 126: CALL_OW 67
// ComTurnUnit ( Brighton , Megan ) ;
 130: LD_EXP 8
 134: PPUSH
 135: LD_EXP 10
 139: PPUSH
 140: CALL_OW 119
// Say ( Brighton , DBrighton-1a ) ;
 144: LD_EXP 8
 148: PPUSH
 149: LD_STRING DBrighton-1a
 151: PPUSH
 152: CALL_OW 88
// Say ( Megan , DMegan-2a ) ;
 156: LD_EXP 10
 160: PPUSH
 161: LD_STRING DMegan-2a
 163: PPUSH
 164: CALL_OW 88
// Say ( Brighton , DBrighton-2a ) ;
 168: LD_EXP 8
 172: PPUSH
 173: LD_STRING DBrighton-2a
 175: PPUSH
 176: CALL_OW 88
// Say ( Megan , DMegan-3a ) ;
 180: LD_EXP 10
 184: PPUSH
 185: LD_STRING DMegan-3a
 187: PPUSH
 188: CALL_OW 88
// Say ( Brighton , DBrighton-3a ) ;
 192: LD_EXP 8
 196: PPUSH
 197: LD_STRING DBrighton-3a
 199: PPUSH
 200: CALL_OW 88
// Say ( Megan , DMegan-4a ) ;
 204: LD_EXP 10
 208: PPUSH
 209: LD_STRING DMegan-4a
 211: PPUSH
 212: CALL_OW 88
// ComMoveXY ( Megan , 40 , 37 ) ;
 216: LD_EXP 10
 220: PPUSH
 221: LD_INT 40
 223: PPUSH
 224: LD_INT 37
 226: PPUSH
 227: CALL_OW 111
// AddComTurnUnit ( Megan , Brighton ) ;
 231: LD_EXP 10
 235: PPUSH
 236: LD_EXP 8
 240: PPUSH
 241: CALL_OW 179
// ComMoveXY ( Palmer , 50 , 42 ) ;
 245: LD_EXP 9
 249: PPUSH
 250: LD_INT 50
 252: PPUSH
 253: LD_INT 42
 255: PPUSH
 256: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 260: LD_INT 35
 262: PPUSH
 263: CALL_OW 67
// until GetDistUnits ( Brighton , Palmer ) < 6 ;
 267: LD_EXP 8
 271: PPUSH
 272: LD_EXP 9
 276: PPUSH
 277: CALL_OW 296
 281: PUSH
 282: LD_INT 6
 284: LESS
 285: IFFALSE 260
// ComTurnUnit ( Brighton , Palmer ) ;
 287: LD_EXP 8
 291: PPUSH
 292: LD_EXP 9
 296: PPUSH
 297: CALL_OW 119
// ComTurnUnit ( Palmer , Brighton ) ;
 301: LD_EXP 9
 305: PPUSH
 306: LD_EXP 8
 310: PPUSH
 311: CALL_OW 119
// Say ( Megan , DMegan-5a ) ;
 315: LD_EXP 10
 319: PPUSH
 320: LD_STRING DMegan-5a
 322: PPUSH
 323: CALL_OW 88
// Say ( Palmer , DPalmer-1 ) ;
 327: LD_EXP 9
 331: PPUSH
 332: LD_STRING DPalmer-1
 334: PPUSH
 335: CALL_OW 88
// Say ( Brighton , DBrighton-1 ) ;
 339: LD_EXP 8
 343: PPUSH
 344: LD_STRING DBrighton-1
 346: PPUSH
 347: CALL_OW 88
// Say ( Palmer , DPalmer-2 ) ;
 351: LD_EXP 9
 355: PPUSH
 356: LD_STRING DPalmer-2
 358: PPUSH
 359: CALL_OW 88
// Say ( Brighton , DBrighton-2 ) ;
 363: LD_EXP 8
 367: PPUSH
 368: LD_STRING DBrighton-2
 370: PPUSH
 371: CALL_OW 88
// Say ( Palmer , DPalmer-3 ) ;
 375: LD_EXP 9
 379: PPUSH
 380: LD_STRING DPalmer-3
 382: PPUSH
 383: CALL_OW 88
// Say ( Brighton , DBrighton-3 ) ;
 387: LD_EXP 8
 391: PPUSH
 392: LD_STRING DBrighton-3
 394: PPUSH
 395: CALL_OW 88
// Say ( Palmer , DPalmer-4 ) ;
 399: LD_EXP 9
 403: PPUSH
 404: LD_STRING DPalmer-4
 406: PPUSH
 407: CALL_OW 88
// ComEnterUnit ( Palmer , AmTower ) ;
 411: LD_EXP 9
 415: PPUSH
 416: LD_INT 6
 418: PPUSH
 419: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
 423: LD_INT 35
 425: PPUSH
 426: CALL_OW 67
// until IsInUnit ( Palmer ) = AmTower ;
 430: LD_EXP 9
 434: PPUSH
 435: CALL_OW 310
 439: PUSH
 440: LD_INT 6
 442: EQUAL
 443: IFFALSE 423
// SayRadio ( Palmer , DPalmer-5 ) ;
 445: LD_EXP 9
 449: PPUSH
 450: LD_STRING DPalmer-5
 452: PPUSH
 453: CALL_OW 94
// ComMoveXY ( Brighton , 59 , 36 ) ;
 457: LD_EXP 8
 461: PPUSH
 462: LD_INT 59
 464: PPUSH
 465: LD_INT 36
 467: PPUSH
 468: CALL_OW 111
// ComMoveXY ( Megan , 60 , 35 ) ;
 472: LD_EXP 10
 476: PPUSH
 477: LD_INT 60
 479: PPUSH
 480: LD_INT 35
 482: PPUSH
 483: CALL_OW 111
// ComMoveXY ( Palmer , 60 , 34 ) ;
 487: LD_EXP 9
 491: PPUSH
 492: LD_INT 60
 494: PPUSH
 495: LD_INT 34
 497: PPUSH
 498: CALL_OW 111
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 502: LD_EXP 8
 506: PPUSH
 507: LD_INT 99
 509: PPUSH
 510: LD_INT 37
 512: PPUSH
 513: CALL_OW 178
// AddComTurnUnit ( Megan , Brighton ) ;
 517: LD_EXP 10
 521: PPUSH
 522: LD_EXP 8
 526: PPUSH
 527: CALL_OW 179
// AddComTurnUnit ( Palmer , Brighton ) ;
 531: LD_EXP 9
 535: PPUSH
 536: LD_EXP 8
 540: PPUSH
 541: CALL_OW 179
// CenterOnXY ( 64 , 40 ) ;
 545: LD_INT 64
 547: PPUSH
 548: LD_INT 40
 550: PPUSH
 551: CALL_OW 84
// ComMeeting ( BetaSquad , SpotArea ) ;
 555: LD_EXP 11
 559: PPUSH
 560: LD_INT 13
 562: PPUSH
 563: CALL 10541 0 2
// wait ( 0 0$30 ) ;
 567: LD_INT 1050
 569: PPUSH
 570: CALL_OW 67
// Say ( Brighton , DBrighton-4 ) ;
 574: LD_EXP 8
 578: PPUSH
 579: LD_STRING DBrighton-4
 581: PPUSH
 582: CALL_OW 88
// Say ( Brighton , DBrighton-5 ) ;
 586: LD_EXP 8
 590: PPUSH
 591: LD_STRING DBrighton-5
 593: PPUSH
 594: CALL_OW 88
// AddComTurnUnit ( Brighton , Megan ) ;
 598: LD_EXP 8
 602: PPUSH
 603: LD_EXP 10
 607: PPUSH
 608: CALL_OW 179
// Say ( Brighton , DBrighton-6 ) ;
 612: LD_EXP 8
 616: PPUSH
 617: LD_STRING DBrighton-6
 619: PPUSH
 620: CALL_OW 88
// Say ( Megan , DMegan-1 ) ;
 624: LD_EXP 10
 628: PPUSH
 629: LD_STRING DMegan-1
 631: PPUSH
 632: CALL_OW 88
// Say ( Brighton , DBrighton-7 ) ;
 636: LD_EXP 8
 640: PPUSH
 641: LD_STRING DBrighton-7
 643: PPUSH
 644: CALL_OW 88
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 648: LD_EXP 8
 652: PPUSH
 653: LD_INT 99
 655: PPUSH
 656: LD_INT 37
 658: PPUSH
 659: CALL_OW 178
// Say ( Brighton , DBrighton-8 ) ;
 663: LD_EXP 8
 667: PPUSH
 668: LD_STRING DBrighton-8
 670: PPUSH
 671: CALL_OW 88
// ChangeMissionObjectives ( C1 ) ;
 675: LD_STRING C1
 677: PPUSH
 678: CALL_OW 337
// InGameOff ;
 682: CALL_OW 9
// MissionStart := true ;
 686: LD_ADDR_EXP 1
 690: PUSH
 691: LD_INT 1
 693: ST_TO_ADDR
// music_nat := 1 ;
 694: LD_ADDR_OWVAR 71
 698: PUSH
 699: LD_INT 1
 701: ST_TO_ADDR
// end ;
 702: END
// export ArmadaArrived , FirstAssaultRepelled ; export RuSpeaker ; every 0 0$1 trigger MissionStart do var tmp , i ;
 703: LD_EXP 1
 707: IFFALSE 1902
 709: GO 711
 711: DISABLE
 712: LD_INT 0
 714: PPUSH
 715: PPUSH
// begin wait ( ruArrival ) ;
 716: LD_EXP 41
 720: PPUSH
 721: CALL_OW 67
// PrepareRUArmada ;
 725: CALL 3298 0 0
// wait ( 0 0$3 ) ;
 729: LD_INT 105
 731: PPUSH
 732: CALL_OW 67
// tmp := AreaToList ( RUArrivalParkingArea , 0 ) ;
 736: LD_ADDR_VAR 0 1
 740: PUSH
 741: LD_INT 15
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL_OW 517
 751: ST_TO_ADDR
// for i = 1 to RUArmada do
 752: LD_ADDR_VAR 0 2
 756: PUSH
 757: DOUBLE
 758: LD_INT 1
 760: DEC
 761: ST_TO_ADDR
 762: LD_EXP 16
 766: PUSH
 767: FOR_TO
 768: IFFALSE 817
// ComMoveXY ( RUArmada [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
 770: LD_EXP 16
 774: PUSH
 775: LD_VAR 0 2
 779: ARRAY
 780: PPUSH
 781: LD_VAR 0 1
 785: PUSH
 786: LD_INT 1
 788: ARRAY
 789: PUSH
 790: LD_VAR 0 2
 794: ARRAY
 795: PPUSH
 796: LD_VAR 0 1
 800: PUSH
 801: LD_INT 2
 803: ARRAY
 804: PUSH
 805: LD_VAR 0 2
 809: ARRAY
 810: PPUSH
 811: CALL_OW 111
 815: GO 767
 817: POP
 818: POP
// ArmadaArrived := true ;
 819: LD_ADDR_EXP 2
 823: PUSH
 824: LD_INT 1
 826: ST_TO_ADDR
// Say ( Palmer , DPalmer-A1 ) ;
 827: LD_EXP 9
 831: PPUSH
 832: LD_STRING DPalmer-A1
 834: PPUSH
 835: CALL_OW 88
// Say ( Brighton , DBrighton-A1 ) ;
 839: LD_EXP 8
 843: PPUSH
 844: LD_STRING DBrighton-A1
 846: PPUSH
 847: CALL_OW 88
// wait ( 0 0$20 ) ;
 851: LD_INT 700
 853: PPUSH
 854: CALL_OW 67
// PrepareRUBase ;
 858: CALL 4023 0 0
// PrepareRUBase_v2 ;
 862: CALL 4439 0 0
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
 866: LD_ADDR_EXP 52
 870: PUSH
 871: LD_EXP 52
 875: PPUSH
 876: LD_INT 1
 878: PPUSH
 879: LD_INT 22
 881: PUSH
 882: LD_INT 3
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: PPUSH
 889: CALL_OW 69
 893: PPUSH
 894: CALL_OW 1
 898: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , RU_SecondPersonnel ) ;
 899: LD_ADDR_EXP 52
 903: PUSH
 904: LD_EXP 52
 908: PPUSH
 909: LD_INT 2
 911: PPUSH
 912: LD_EXP 35
 916: PPUSH
 917: CALL_OW 1
 921: ST_TO_ADDR
// MC_Start ( ) ;
 922: CALL 55403 0 0
// wait ( 0 0$30 ) ;
 926: LD_INT 1050
 928: PPUSH
 929: CALL_OW 67
// PrepareRUBulldozers ;
 933: CALL 3910 0 0
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
 937: LD_EXP 17
 941: PUSH
 942: LD_INT 1
 944: ARRAY
 945: PPUSH
 946: LD_INT 9
 948: PPUSH
 949: CALL 10398 0 2
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
 953: LD_EXP 17
 957: PUSH
 958: LD_INT 2
 960: ARRAY
 961: PPUSH
 962: LD_INT 11
 964: PPUSH
 965: CALL 10398 0 2
// DoNotAttack ( 1 , Bulldozers [ 1 ] ) ;
 969: LD_INT 1
 971: PPUSH
 972: LD_EXP 17
 976: PUSH
 977: LD_INT 1
 979: ARRAY
 980: PPUSH
 981: CALL_OW 471
// DoNotAttack ( 1 , Bulldozers [ 2 ] ) ;
 985: LD_INT 1
 987: PPUSH
 988: LD_EXP 17
 992: PUSH
 993: LD_INT 2
 995: ARRAY
 996: PPUSH
 997: CALL_OW 471
// wait ( 0 0$30 ) ;
1001: LD_INT 1050
1003: PPUSH
1004: CALL_OW 67
// InGameOn ;
1008: CALL_OW 8
// PlaceSeeing ( 95 , 93 , 1 , - 30 ) ;
1012: LD_INT 95
1014: PPUSH
1015: LD_INT 93
1017: PPUSH
1018: LD_INT 1
1020: PPUSH
1021: LD_INT 30
1023: NEG
1024: PPUSH
1025: CALL_OW 330
// ComMoveXY ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) , 63 , 39 ) ;
1029: LD_INT 10
1031: PPUSH
1032: LD_INT 22
1034: PUSH
1035: LD_INT 1
1037: PUSH
1038: EMPTY
1039: LIST
1040: LIST
1041: PPUSH
1042: CALL_OW 70
1046: PPUSH
1047: LD_INT 63
1049: PPUSH
1050: LD_INT 39
1052: PPUSH
1053: CALL_OW 111
// CenterOnXY ( 95 , 93 ) ;
1057: LD_INT 95
1059: PPUSH
1060: LD_INT 93
1062: PPUSH
1063: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
1067: LD_INT 35
1069: PPUSH
1070: CALL_OW 67
// if not HasTask ( Bulldozers [ 1 ] ) then
1074: LD_EXP 17
1078: PUSH
1079: LD_INT 1
1081: ARRAY
1082: PPUSH
1083: CALL_OW 314
1087: NOT
1088: IFFALSE 1106
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
1090: LD_EXP 17
1094: PUSH
1095: LD_INT 1
1097: ARRAY
1098: PPUSH
1099: LD_INT 9
1101: PPUSH
1102: CALL 10398 0 2
// if not HasTask ( Bulldozers [ 2 ] ) then
1106: LD_EXP 17
1110: PUSH
1111: LD_INT 2
1113: ARRAY
1114: PPUSH
1115: CALL_OW 314
1119: NOT
1120: IFFALSE 1138
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
1122: LD_EXP 17
1126: PUSH
1127: LD_INT 2
1129: ARRAY
1130: PPUSH
1131: LD_INT 11
1133: PPUSH
1134: CALL 10398 0 2
// until ListEnvironmentArea ( BulldozerArea ) < 2 or ListEnvironmentArea ( BulldozerArea2 ) < 2 or IsDead ( Bulldozers [ 1 ] ) ;
1138: LD_INT 9
1140: PPUSH
1141: CALL_OW 353
1145: PUSH
1146: LD_INT 2
1148: LESS
1149: PUSH
1150: LD_INT 11
1152: PPUSH
1153: CALL_OW 353
1157: PUSH
1158: LD_INT 2
1160: LESS
1161: OR
1162: PUSH
1163: LD_EXP 17
1167: PUSH
1168: LD_INT 1
1170: ARRAY
1171: PPUSH
1172: CALL_OW 301
1176: OR
1177: IFFALSE 1067
// if UnitFilter ( Bulldozers , [ f_ok ] ) then
1179: LD_EXP 17
1183: PPUSH
1184: LD_INT 50
1186: PUSH
1187: EMPTY
1188: LIST
1189: PPUSH
1190: CALL_OW 72
1194: IFFALSE 1247
// begin wait ( 0 0$10 ) ;
1196: LD_INT 350
1198: PPUSH
1199: CALL_OW 67
// ComMoveXY ( Bulldozers , 120 , 131 ) ;
1203: LD_EXP 17
1207: PPUSH
1208: LD_INT 120
1210: PPUSH
1211: LD_INT 131
1213: PPUSH
1214: CALL_OW 111
// for i in Bulldozers do
1218: LD_ADDR_VAR 0 2
1222: PUSH
1223: LD_EXP 17
1227: PUSH
1228: FOR_IN
1229: IFFALSE 1245
// NormalAttack ( 1 , i ) ;
1231: LD_INT 1
1233: PPUSH
1234: LD_VAR 0 2
1238: PPUSH
1239: CALL_OW 472
1243: GO 1228
1245: POP
1246: POP
// end ; wait ( 0 0$10 ) ;
1247: LD_INT 350
1249: PPUSH
1250: CALL_OW 67
// RemoveSeeing ( 95 , 93 , 1 ) ;
1254: LD_INT 95
1256: PPUSH
1257: LD_INT 93
1259: PPUSH
1260: LD_INT 1
1262: PPUSH
1263: CALL_OW 331
// Say ( Yashin , DDeath-Yas-1 ) ;
1267: LD_EXP 12
1271: PPUSH
1272: LD_STRING DDeath-Yas-1
1274: PPUSH
1275: CALL_OW 88
// SayEffect ( DRuSol-A1 ) ;
1279: LD_STRING DRuSol-A1
1281: PPUSH
1282: CALL_OW 96
// wait ( 0 0$2 ) ;
1286: LD_INT 70
1288: PPUSH
1289: CALL_OW 67
// InGameOff ;
1293: CALL_OW 9
// ComMoveXY ( RUArmada , 66 , 40 ) ;
1297: LD_EXP 16
1301: PPUSH
1302: LD_INT 66
1304: PPUSH
1305: LD_INT 40
1307: PPUSH
1308: CALL_OW 111
// wait ( 0 0$2 ) ;
1312: LD_INT 70
1314: PPUSH
1315: CALL_OW 67
// Say ( Gaydar , DDeath-Gay-2 ) ;
1319: LD_EXP 14
1323: PPUSH
1324: LD_STRING DDeath-Gay-2
1326: PPUSH
1327: CALL_OW 88
// wait ( 0 0$20 ) ;
1331: LD_INT 700
1333: PPUSH
1334: CALL_OW 67
// AssaultStarted := true ;
1338: LD_ADDR_EXP 7
1342: PUSH
1343: LD_INT 1
1345: ST_TO_ADDR
// Say ( Popov , DDeath-Pop-1 ) ;
1346: LD_EXP 13
1350: PPUSH
1351: LD_STRING DDeath-Pop-1
1353: PPUSH
1354: CALL_OW 88
// Say ( Gaydar , DDeath-Gay-1 ) ;
1358: LD_EXP 14
1362: PPUSH
1363: LD_STRING DDeath-Gay-1
1365: PPUSH
1366: CALL_OW 88
// wait ( 0 0$5 ) ;
1370: LD_INT 175
1372: PPUSH
1373: CALL_OW 67
// Say ( Sevi , DDeath-Vse-1 ) ;
1377: LD_EXP 15
1381: PPUSH
1382: LD_STRING DDeath-Vse-1
1384: PPUSH
1385: CALL_OW 88
// PriorityAttack ( 6 , BetaA ) ;
1389: LD_INT 6
1391: PPUSH
1392: LD_INT 1
1394: PPUSH
1395: CALL_OW 470
// PriorityAttack ( 6 , BetaB ) ;
1399: LD_INT 6
1401: PPUSH
1402: LD_INT 3
1404: PPUSH
1405: CALL_OW 470
// repeat for i in RuArmada do
1409: LD_ADDR_VAR 0 2
1413: PUSH
1414: LD_EXP 16
1418: PUSH
1419: FOR_IN
1420: IFFALSE 1470
// if not HasTask ( i ) then
1422: LD_VAR 0 2
1426: PPUSH
1427: CALL_OW 314
1431: NOT
1432: IFFALSE 1468
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
1434: LD_VAR 0 2
1438: PPUSH
1439: LD_INT 22
1441: PUSH
1442: LD_INT 1
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PPUSH
1449: CALL_OW 69
1453: PPUSH
1454: LD_VAR 0 2
1458: PPUSH
1459: CALL_OW 74
1463: PPUSH
1464: CALL_OW 115
1468: GO 1419
1470: POP
1471: POP
// wait ( 0 0$1 ) until FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_type , unit_human ] ] ) < 10 and IsDead ( Yashin ) and IsDead ( Popov ) and IsDead ( Gaydar ) and IsDead ( Sevi ) ;
1472: LD_INT 35
1474: PPUSH
1475: CALL_OW 67
1479: LD_INT 1
1481: PUSH
1482: LD_INT 22
1484: PUSH
1485: LD_INT 6
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PUSH
1492: LD_INT 21
1494: PUSH
1495: LD_INT 1
1497: PUSH
1498: EMPTY
1499: LIST
1500: LIST
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: LIST
1506: PPUSH
1507: CALL_OW 69
1511: PUSH
1512: LD_INT 10
1514: LESS
1515: PUSH
1516: LD_EXP 12
1520: PPUSH
1521: CALL_OW 301
1525: AND
1526: PUSH
1527: LD_EXP 13
1531: PPUSH
1532: CALL_OW 301
1536: AND
1537: PUSH
1538: LD_EXP 14
1542: PPUSH
1543: CALL_OW 301
1547: AND
1548: PUSH
1549: LD_EXP 15
1553: PPUSH
1554: CALL_OW 301
1558: AND
1559: IFFALSE 1409
// AssaultStarted := false ;
1561: LD_ADDR_EXP 7
1565: PUSH
1566: LD_INT 0
1568: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ f_side , 6 ] ) , 120 , 131 ) ;
1569: LD_INT 22
1571: PUSH
1572: LD_INT 6
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PPUSH
1579: CALL_OW 69
1583: PPUSH
1584: LD_INT 120
1586: PPUSH
1587: LD_INT 131
1589: PPUSH
1590: CALL_OW 111
// RuSpeaker := FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_sex , sex_male ] , [ f_type , unit_human ] , [ f_lives , 500 ] ] ) ;
1594: LD_ADDR_EXP 4
1598: PUSH
1599: LD_INT 1
1601: PUSH
1602: LD_INT 22
1604: PUSH
1605: LD_INT 6
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 26
1614: PUSH
1615: LD_INT 1
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: LD_INT 21
1624: PUSH
1625: LD_INT 1
1627: PUSH
1628: EMPTY
1629: LIST
1630: LIST
1631: PUSH
1632: LD_INT 24
1634: PUSH
1635: LD_INT 500
1637: PUSH
1638: EMPTY
1639: LIST
1640: LIST
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: PPUSH
1649: CALL_OW 69
1653: ST_TO_ADDR
// if RuSpeaker then
1654: LD_EXP 4
1658: IFFALSE 1676
// Say ( RuSpeaker [ 1 ] , DRuSol-A2 ) ;
1660: LD_EXP 4
1664: PUSH
1665: LD_INT 1
1667: ARRAY
1668: PPUSH
1669: LD_STRING DRuSol-A2
1671: PPUSH
1672: CALL_OW 88
// wait ( 0 0$30 ) ;
1676: LD_INT 1050
1678: PPUSH
1679: CALL_OW 67
// DialogueOn ;
1683: CALL_OW 6
// Say ( Brighton , DBrighton-B1 ) ;
1687: LD_EXP 8
1691: PPUSH
1692: LD_STRING DBrighton-B1
1694: PPUSH
1695: CALL_OW 88
// Say ( Palmer , DPalmer-B1 ) ;
1699: LD_EXP 9
1703: PPUSH
1704: LD_STRING DPalmer-B1
1706: PPUSH
1707: CALL_OW 88
// Say ( Brighton , DBrighton-B2 ) ;
1711: LD_EXP 8
1715: PPUSH
1716: LD_STRING DBrighton-B2
1718: PPUSH
1719: CALL_OW 88
// SayRadio ( Burlak , DBurlak-B1 ) ;
1723: LD_EXP 18
1727: PPUSH
1728: LD_STRING DBurlak-B1
1730: PPUSH
1731: CALL_OW 94
// Say ( Brighton , DBrighton-B3 ) ;
1735: LD_EXP 8
1739: PPUSH
1740: LD_STRING DBrighton-B3
1742: PPUSH
1743: CALL_OW 88
// Say ( Palmer , DPalmer-B2 ) ;
1747: LD_EXP 9
1751: PPUSH
1752: LD_STRING DPalmer-B2
1754: PPUSH
1755: CALL_OW 88
// Say ( Brighton , DBrighton-B4 ) ;
1759: LD_EXP 8
1763: PPUSH
1764: LD_STRING DBrighton-B4
1766: PPUSH
1767: CALL_OW 88
// Say ( Brighton , DBrighton-B5 ) ;
1771: LD_EXP 8
1775: PPUSH
1776: LD_STRING DBrighton-B5
1778: PPUSH
1779: CALL_OW 88
// DialogueOff ;
1783: CALL_OW 7
// ChangeMissionObjectives ( C2 ) ;
1787: LD_STRING C2
1789: PPUSH
1790: CALL_OW 337
// FirstAssaultRepelled := true ;
1794: LD_ADDR_EXP 3
1798: PUSH
1799: LD_INT 1
1801: ST_TO_ADDR
// RemoveUnit ( Bulldozers [ 1 ] ) ;
1802: LD_EXP 17
1806: PUSH
1807: LD_INT 1
1809: ARRAY
1810: PPUSH
1811: CALL_OW 64
// RemoveUnit ( Bulldozers [ 2 ] ) ;
1815: LD_EXP 17
1819: PUSH
1820: LD_INT 2
1822: ARRAY
1823: PPUSH
1824: CALL_OW 64
// AddComExitVehicle ( FilterAllUnits ( [ f_side , 6 ] ) ) ;
1828: LD_INT 22
1830: PUSH
1831: LD_INT 6
1833: PUSH
1834: EMPTY
1835: LIST
1836: LIST
1837: PPUSH
1838: CALL_OW 69
1842: PPUSH
1843: CALL_OW 181
// SetSide ( FilterAllUnits ( [ f_side , 6 ] ) , 3 ) ;
1847: LD_INT 22
1849: PUSH
1850: LD_INT 6
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: PPUSH
1857: CALL_OW 69
1861: PPUSH
1862: LD_INT 3
1864: PPUSH
1865: CALL_OW 235
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
1869: LD_ADDR_EXP 52
1873: PUSH
1874: LD_EXP 52
1878: PPUSH
1879: LD_INT 1
1881: PPUSH
1882: LD_INT 22
1884: PUSH
1885: LD_INT 3
1887: PUSH
1888: EMPTY
1889: LIST
1890: LIST
1891: PPUSH
1892: CALL_OW 69
1896: PPUSH
1897: CALL_OW 1
1901: ST_TO_ADDR
// end ;
1902: PPOPN 2
1904: END
// every 0 0$1 trigger FirstAssaultRepelled and jmmArrival > 0 0$00 do
1905: LD_EXP 3
1909: PUSH
1910: LD_EXP 40
1914: PUSH
1915: LD_INT 0
1917: GREATER
1918: AND
1919: IFFALSE 1939
1921: GO 1923
1923: DISABLE
// begin enable ;
1924: ENABLE
// jmmArrival := jmmArrival - 0 0$01 ;
1925: LD_ADDR_EXP 40
1929: PUSH
1930: LD_EXP 40
1934: PUSH
1935: LD_INT 35
1937: MINUS
1938: ST_TO_ADDR
// end ;
1939: END
// export JMM_Arrived ; every 0 0$1 trigger jmmArrival = 0 0$00 do
1940: LD_EXP 40
1944: PUSH
1945: LD_INT 0
1947: EQUAL
1948: IFFALSE 2033
1950: GO 1952
1952: DISABLE
// begin JMMReinforcement ;
1953: CALL 4767 0 0
// DialogueOn ;
1957: CALL_OW 6
// CenterOnUnits ( JMM ) ;
1961: LD_EXP 36
1965: PPUSH
1966: CALL_OW 85
// Say ( JMM , DJMM-F1 ) ;
1970: LD_EXP 36
1974: PPUSH
1975: LD_STRING DJMM-F1
1977: PPUSH
1978: CALL_OW 88
// if RussiansDefeated then
1982: LD_EXP 42
1986: IFFALSE 2002
// Say ( Brighton , DBrighton-F1a ) else
1988: LD_EXP 8
1992: PPUSH
1993: LD_STRING DBrighton-F1a
1995: PPUSH
1996: CALL_OW 88
2000: GO 2021
// begin Say ( Brighton , DBrighton-F1 ) ;
2002: LD_EXP 8
2006: PPUSH
2007: LD_STRING DBrighton-F1
2009: PPUSH
2010: CALL_OW 88
// ChangeMissionObjectives ( C3 ) ;
2014: LD_STRING C3
2016: PPUSH
2017: CALL_OW 337
// end ; DialogueOff ;
2021: CALL_OW 7
// JMM_Arrived := true ;
2025: LD_ADDR_EXP 5
2029: PUSH
2030: LD_INT 1
2032: ST_TO_ADDR
// end ;
2033: END
// every 0 0$1 trigger JMM_Arrived and See ( 1 , Burlak ) do
2034: LD_EXP 5
2038: PUSH
2039: LD_INT 1
2041: PPUSH
2042: LD_EXP 18
2046: PPUSH
2047: CALL_OW 292
2051: AND
2052: IFFALSE 2081
2054: GO 2056
2056: DISABLE
// begin Say ( Burlak , DBurlak ) ;
2057: LD_EXP 18
2061: PPUSH
2062: LD_STRING DBurlak
2064: PPUSH
2065: CALL_OW 88
// Say ( JMM , DJMM ) ;
2069: LD_EXP 36
2073: PPUSH
2074: LD_STRING DJMM
2076: PPUSH
2077: CALL_OW 88
// end ;
2081: END
// export LaserBuilt ; every 0 0$1 trigger FilterAllUnits ( [ f_and , [ f_side , 1 ] , [ f_or , [ f_weapon , us_laser ] , [ f_bweapon , us_laser ] ] ] ) > 1 do
2082: LD_INT 1
2084: PUSH
2085: LD_INT 22
2087: PUSH
2088: LD_INT 1
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: PUSH
2095: LD_INT 2
2097: PUSH
2098: LD_INT 34
2100: PUSH
2101: LD_INT 9
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: PUSH
2108: LD_INT 35
2110: PUSH
2111: LD_INT 9
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: LIST
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: PPUSH
2128: CALL_OW 69
2132: PUSH
2133: LD_INT 1
2135: GREATER
2136: IFFALSE 2149
2138: GO 2140
2140: DISABLE
// begin LaserBuilt := true ;
2141: LD_ADDR_EXP 6
2145: PUSH
2146: LD_INT 1
2148: ST_TO_ADDR
// end ;
2149: END
// export AssaultStarted ; every 0 0$1 trigger AssaultStarted and See ( 6 , NearestUnitToUnit ( FilterAllUnits ( [ f_and , [ [ f_side , 1 ] , [ f_bweapon , us_laser ] ] ] ) , IsInUnit ( Sevi ) ) ) do
2150: LD_EXP 7
2154: PUSH
2155: LD_INT 6
2157: PPUSH
2158: LD_INT 1
2160: PUSH
2161: LD_INT 22
2163: PUSH
2164: LD_INT 1
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PUSH
2171: LD_INT 35
2173: PUSH
2174: LD_INT 9
2176: PUSH
2177: EMPTY
2178: LIST
2179: LIST
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: PPUSH
2189: CALL_OW 69
2193: PPUSH
2194: LD_EXP 15
2198: PPUSH
2199: CALL_OW 310
2203: PPUSH
2204: CALL_OW 74
2208: PPUSH
2209: CALL_OW 292
2213: AND
2214: IFFALSE 2250
2216: GO 2218
2218: DISABLE
// begin wait ( 0 0$5 ) ;
2219: LD_INT 175
2221: PPUSH
2222: CALL_OW 67
// Say ( Sevi , DDeath-Vse-2 ) ;
2226: LD_EXP 15
2230: PPUSH
2231: LD_STRING DDeath-Vse-2
2233: PPUSH
2234: CALL_OW 88
// Say ( Yashin , DDeath-Yas-2 ) ;
2238: LD_EXP 12
2242: PPUSH
2243: LD_STRING DDeath-Yas-2
2245: PPUSH
2246: CALL_OW 88
// end ;
2250: END
// every 0 0$1 trigger AssaultStarted do
2251: LD_EXP 7
2255: IFFALSE 2279
2257: GO 2259
2259: DISABLE
// begin wait ( 0 0$20 ) ;
2260: LD_INT 700
2262: PPUSH
2263: CALL_OW 67
// Say ( Popov , DDeath-Pop-2 ) ;
2267: LD_EXP 13
2271: PPUSH
2272: LD_STRING DDeath-Pop-2
2274: PPUSH
2275: CALL_OW 88
// end ;
2279: END
// every 0 0$1 trigger MissionStart do
2280: LD_EXP 1
2284: IFFALSE 2326
2286: GO 2288
2288: DISABLE
// begin wait ( rand ( 0 0$50 , 2 2$20 ) ) ;
2289: LD_INT 1750
2291: PPUSH
2292: LD_INT 4900
2294: PPUSH
2295: CALL_OW 12
2299: PPUSH
2300: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
2304: LD_INT 2
2306: PPUSH
2307: LD_INT 5
2309: PPUSH
2310: CALL_OW 12
2314: PPUSH
2315: LD_INT 12
2317: PPUSH
2318: LD_INT 1
2320: PPUSH
2321: CALL_OW 55
// enable ;
2325: ENABLE
// end ; end_of_file
2326: END
// export Brighton , Palmer , Megan ; export BetaSquad ; export function PrepareHeroes ; begin
2327: LD_INT 0
2329: PPUSH
// uc_side := 1 ;
2330: LD_ADDR_OWVAR 20
2334: PUSH
2335: LD_INT 1
2337: ST_TO_ADDR
// hc_class = class_soldier ;
2338: LD_ADDR_OWVAR 28
2342: PUSH
2343: LD_INT 1
2345: ST_TO_ADDR
// uc_nation := nation_american ;
2346: LD_ADDR_OWVAR 21
2350: PUSH
2351: LD_INT 1
2353: ST_TO_ADDR
// hc_sex = sex_male ;
2354: LD_ADDR_OWVAR 27
2358: PUSH
2359: LD_INT 1
2361: ST_TO_ADDR
// hc_importance = 110 ;
2362: LD_ADDR_OWVAR 32
2366: PUSH
2367: LD_INT 110
2369: ST_TO_ADDR
// hc_basic_skills = [ 5 , 4 , 5 , 3 ] ;
2370: LD_ADDR_OWVAR 30
2374: PUSH
2375: LD_INT 5
2377: PUSH
2378: LD_INT 4
2380: PUSH
2381: LD_INT 5
2383: PUSH
2384: LD_INT 3
2386: PUSH
2387: EMPTY
2388: LIST
2389: LIST
2390: LIST
2391: LIST
2392: ST_TO_ADDR
// hc_skills = [ 9 , 6 , 7 , 6 ] ;
2393: LD_ADDR_OWVAR 31
2397: PUSH
2398: LD_INT 9
2400: PUSH
2401: LD_INT 6
2403: PUSH
2404: LD_INT 7
2406: PUSH
2407: LD_INT 6
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: ST_TO_ADDR
// hc_attr = [ 12 , 10 ] ;
2416: LD_ADDR_OWVAR 29
2420: PUSH
2421: LD_INT 12
2423: PUSH
2424: LD_INT 10
2426: PUSH
2427: EMPTY
2428: LIST
2429: LIST
2430: ST_TO_ADDR
// hc_name := Gerard Brighton ;
2431: LD_ADDR_OWVAR 26
2435: PUSH
2436: LD_STRING Gerard Brighton
2438: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2439: LD_ADDR_OWVAR 33
2443: PUSH
2444: LD_STRING Beta_Skirmish
2446: ST_TO_ADDR
// hc_face_number := 1 ;
2447: LD_ADDR_OWVAR 34
2451: PUSH
2452: LD_INT 1
2454: ST_TO_ADDR
// Brighton := CreateHuman ;
2455: LD_ADDR_EXP 8
2459: PUSH
2460: CALL_OW 44
2464: ST_TO_ADDR
// uc_nation := nation_american ;
2465: LD_ADDR_OWVAR 21
2469: PUSH
2470: LD_INT 1
2472: ST_TO_ADDR
// hc_importance = 80 ;
2473: LD_ADDR_OWVAR 32
2477: PUSH
2478: LD_INT 80
2480: ST_TO_ADDR
// hc_sex = sex_male ;
2481: LD_ADDR_OWVAR 27
2485: PUSH
2486: LD_INT 1
2488: ST_TO_ADDR
// hc_basic_skills = [ 5 , 5 , 3 , 1 ] ;
2489: LD_ADDR_OWVAR 30
2493: PUSH
2494: LD_INT 5
2496: PUSH
2497: LD_INT 5
2499: PUSH
2500: LD_INT 3
2502: PUSH
2503: LD_INT 1
2505: PUSH
2506: EMPTY
2507: LIST
2508: LIST
2509: LIST
2510: LIST
2511: ST_TO_ADDR
// hc_skills = [ 7 , 6 , 5 , 3 ] ;
2512: LD_ADDR_OWVAR 31
2516: PUSH
2517: LD_INT 7
2519: PUSH
2520: LD_INT 6
2522: PUSH
2523: LD_INT 5
2525: PUSH
2526: LD_INT 3
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2535: LD_ADDR_OWVAR 29
2539: PUSH
2540: LD_INT 10
2542: PUSH
2543: LD_INT 10
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: ST_TO_ADDR
// hc_name := Brian Palmer ;
2550: LD_ADDR_OWVAR 26
2554: PUSH
2555: LD_STRING Brian Palmer
2557: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2558: LD_ADDR_OWVAR 33
2562: PUSH
2563: LD_STRING Beta_Skirmish
2565: ST_TO_ADDR
// hc_face_number := 3 ;
2566: LD_ADDR_OWVAR 34
2570: PUSH
2571: LD_INT 3
2573: ST_TO_ADDR
// Palmer := CreateHuman ;
2574: LD_ADDR_EXP 9
2578: PUSH
2579: CALL_OW 44
2583: ST_TO_ADDR
// hc_class = class_scientistic ;
2584: LD_ADDR_OWVAR 28
2588: PUSH
2589: LD_INT 4
2591: ST_TO_ADDR
// uc_nation := nation_american ;
2592: LD_ADDR_OWVAR 21
2596: PUSH
2597: LD_INT 1
2599: ST_TO_ADDR
// hc_importance = 70 ;
2600: LD_ADDR_OWVAR 32
2604: PUSH
2605: LD_INT 70
2607: ST_TO_ADDR
// hc_sex = sex_female ;
2608: LD_ADDR_OWVAR 27
2612: PUSH
2613: LD_INT 2
2615: ST_TO_ADDR
// hc_basic_skills = [ 3 , 2 , 4 , 6 ] ;
2616: LD_ADDR_OWVAR 30
2620: PUSH
2621: LD_INT 3
2623: PUSH
2624: LD_INT 2
2626: PUSH
2627: LD_INT 4
2629: PUSH
2630: LD_INT 6
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: LIST
2637: LIST
2638: ST_TO_ADDR
// hc_skills = [ 4 , 2 , 5 , 8 ] ;
2639: LD_ADDR_OWVAR 31
2643: PUSH
2644: LD_INT 4
2646: PUSH
2647: LD_INT 2
2649: PUSH
2650: LD_INT 5
2652: PUSH
2653: LD_INT 8
2655: PUSH
2656: EMPTY
2657: LIST
2658: LIST
2659: LIST
2660: LIST
2661: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2662: LD_ADDR_OWVAR 29
2666: PUSH
2667: LD_INT 10
2669: PUSH
2670: LD_INT 10
2672: PUSH
2673: EMPTY
2674: LIST
2675: LIST
2676: ST_TO_ADDR
// hc_name := Megan Armitage ;
2677: LD_ADDR_OWVAR 26
2681: PUSH
2682: LD_STRING Megan Armitage
2684: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2685: LD_ADDR_OWVAR 33
2689: PUSH
2690: LD_STRING Beta_Skirmish
2692: ST_TO_ADDR
// hc_face_number := 4 ;
2693: LD_ADDR_OWVAR 34
2697: PUSH
2698: LD_INT 4
2700: ST_TO_ADDR
// Megan := CreateHuman ;
2701: LD_ADDR_EXP 10
2705: PUSH
2706: CALL_OW 44
2710: ST_TO_ADDR
// end ;
2711: LD_VAR 0 1
2715: RET
// export function PrepareBeta ; var i , filter , un , soldiers ; begin
2716: LD_INT 0
2718: PPUSH
2719: PPUSH
2720: PPUSH
2721: PPUSH
2722: PPUSH
// uc_side := 1 ;
2723: LD_ADDR_OWVAR 20
2727: PUSH
2728: LD_INT 1
2730: ST_TO_ADDR
// uc_nation := nation_american ;
2731: LD_ADDR_OWVAR 21
2735: PUSH
2736: LD_INT 1
2738: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
2739: LD_ADDR_VAR 0 2
2743: PUSH
2744: LD_INT 22
2746: PUSH
2747: LD_INT 1
2749: PUSH
2750: EMPTY
2751: LIST
2752: LIST
2753: PUSH
2754: LD_INT 30
2756: PUSH
2757: LD_INT 32
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: PPUSH
2768: CALL_OW 69
2772: PUSH
2773: FOR_IN
2774: IFFALSE 2829
// PlaceWeaponTurret ( i , [ us_machine_gun , us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun , us_gatling_gun ] [ rand ( 1 , 7 ) ] ) ;
2776: LD_VAR 0 2
2780: PPUSH
2781: LD_INT 2
2783: PUSH
2784: LD_INT 3
2786: PUSH
2787: LD_INT 4
2789: PUSH
2790: LD_INT 5
2792: PUSH
2793: LD_INT 11
2795: PUSH
2796: LD_INT 3
2798: PUSH
2799: LD_INT 4
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: LIST
2806: LIST
2807: LIST
2808: LIST
2809: LIST
2810: PUSH
2811: LD_INT 1
2813: PPUSH
2814: LD_INT 7
2816: PPUSH
2817: CALL_OW 12
2821: ARRAY
2822: PPUSH
2823: CALL_OW 431
2827: GO 2773
2829: POP
2830: POP
// hc_name :=  ;
2831: LD_ADDR_OWVAR 26
2835: PUSH
2836: LD_STRING 
2838: ST_TO_ADDR
// hc_gallery :=  ;
2839: LD_ADDR_OWVAR 33
2843: PUSH
2844: LD_STRING 
2846: ST_TO_ADDR
// for i = 1 to [ 7 , 6 , 5 ] [ Difficulty ] do
2847: LD_ADDR_VAR 0 2
2851: PUSH
2852: DOUBLE
2853: LD_INT 1
2855: DEC
2856: ST_TO_ADDR
2857: LD_INT 7
2859: PUSH
2860: LD_INT 6
2862: PUSH
2863: LD_INT 5
2865: PUSH
2866: EMPTY
2867: LIST
2868: LIST
2869: LIST
2870: PUSH
2871: LD_OWVAR 67
2875: ARRAY
2876: PUSH
2877: FOR_TO
2878: IFFALSE 2936
// begin PrepareSoldier ( 1 , game_skill ) ;
2880: LD_INT 1
2882: PPUSH
2883: LD_EXP 38
2887: PPUSH
2888: CALL_OW 381
// un := CreateHuman ;
2892: LD_ADDR_VAR 0 4
2896: PUSH
2897: CALL_OW 44
2901: ST_TO_ADDR
// filter := filter ^ un ;
2902: LD_ADDR_VAR 0 3
2906: PUSH
2907: LD_VAR 0 3
2911: PUSH
2912: LD_VAR 0 4
2916: ADD
2917: ST_TO_ADDR
// soldiers := soldiers ^ un ;
2918: LD_ADDR_VAR 0 5
2922: PUSH
2923: LD_VAR 0 5
2927: PUSH
2928: LD_VAR 0 4
2932: ADD
2933: ST_TO_ADDR
// end ;
2934: GO 2877
2936: POP
2937: POP
// for i = 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
2938: LD_ADDR_VAR 0 2
2942: PUSH
2943: DOUBLE
2944: LD_INT 1
2946: DEC
2947: ST_TO_ADDR
2948: LD_INT 3
2950: PUSH
2951: LD_INT 2
2953: PUSH
2954: LD_INT 2
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: LIST
2961: PUSH
2962: LD_OWVAR 67
2966: ARRAY
2967: PUSH
2968: FOR_TO
2969: IFFALSE 3023
// begin PrepareEngineer ( 0 , game_skill ) ;
2971: LD_INT 0
2973: PPUSH
2974: LD_EXP 38
2978: PPUSH
2979: CALL_OW 382
// un := CreateHuman ;
2983: LD_ADDR_VAR 0 4
2987: PUSH
2988: CALL_OW 44
2992: ST_TO_ADDR
// filter := filter ^ un ;
2993: LD_ADDR_VAR 0 3
2997: PUSH
2998: LD_VAR 0 3
3002: PUSH
3003: LD_VAR 0 4
3007: ADD
3008: ST_TO_ADDR
// PlaceHumanInUnit ( un , BetaB ) ;
3009: LD_VAR 0 4
3013: PPUSH
3014: LD_INT 3
3016: PPUSH
3017: CALL_OW 52
// end ;
3021: GO 2968
3023: POP
3024: POP
// for i = 1 to [ 4 , 4 , 3 ] [ Difficulty ] do
3025: LD_ADDR_VAR 0 2
3029: PUSH
3030: DOUBLE
3031: LD_INT 1
3033: DEC
3034: ST_TO_ADDR
3035: LD_INT 4
3037: PUSH
3038: LD_INT 4
3040: PUSH
3041: LD_INT 3
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: LIST
3048: PUSH
3049: LD_OWVAR 67
3053: ARRAY
3054: PUSH
3055: FOR_TO
3056: IFFALSE 3110
// begin PrepareMechanic ( 0 , game_skill ) ;
3058: LD_INT 0
3060: PPUSH
3061: LD_EXP 38
3065: PPUSH
3066: CALL_OW 383
// un := CreateHuman ;
3070: LD_ADDR_VAR 0 4
3074: PUSH
3075: CALL_OW 44
3079: ST_TO_ADDR
// filter := filter ^ un ;
3080: LD_ADDR_VAR 0 3
3084: PUSH
3085: LD_VAR 0 3
3089: PUSH
3090: LD_VAR 0 4
3094: ADD
3095: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmFac ) ;
3096: LD_VAR 0 4
3100: PPUSH
3101: LD_INT 8
3103: PPUSH
3104: CALL_OW 52
// end ;
3108: GO 3055
3110: POP
3111: POP
// for i = 1 to 3 do
3112: LD_ADDR_VAR 0 2
3116: PUSH
3117: DOUBLE
3118: LD_INT 1
3120: DEC
3121: ST_TO_ADDR
3122: LD_INT 3
3124: PUSH
3125: FOR_TO
3126: IFFALSE 3180
// begin PrepareScientist ( 0 , game_skill ) ;
3128: LD_INT 0
3130: PPUSH
3131: LD_EXP 38
3135: PPUSH
3136: CALL_OW 384
// un := CreateHuman ;
3140: LD_ADDR_VAR 0 4
3144: PUSH
3145: CALL_OW 44
3149: ST_TO_ADDR
// filter := filter ^ un ;
3150: LD_ADDR_VAR 0 3
3154: PUSH
3155: LD_VAR 0 3
3159: PUSH
3160: LD_VAR 0 4
3164: ADD
3165: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmLab ) ;
3166: LD_VAR 0 4
3170: PPUSH
3171: LD_INT 14
3173: PPUSH
3174: CALL_OW 52
// end ;
3178: GO 3125
3180: POP
3181: POP
// for i = 1 to soldiers do
3182: LD_ADDR_VAR 0 2
3186: PUSH
3187: DOUBLE
3188: LD_INT 1
3190: DEC
3191: ST_TO_ADDR
3192: LD_VAR 0 5
3196: PUSH
3197: FOR_TO
3198: IFFALSE 3223
// PlaceUnitArea ( soldiers [ i ] , spawn_area , false ) ;
3200: LD_VAR 0 5
3204: PUSH
3205: LD_VAR 0 2
3209: ARRAY
3210: PPUSH
3211: LD_INT 1
3213: PPUSH
3214: LD_INT 0
3216: PPUSH
3217: CALL_OW 49
3221: GO 3197
3223: POP
3224: POP
// PlaceUnitXY ( Brighton , 51 , 43 , false ) ;
3225: LD_EXP 8
3229: PPUSH
3230: LD_INT 51
3232: PPUSH
3233: LD_INT 43
3235: PPUSH
3236: LD_INT 0
3238: PPUSH
3239: CALL_OW 48
// PlaceUnitXY ( Palmer , 55 , 58 , false ) ;
3243: LD_EXP 9
3247: PPUSH
3248: LD_INT 55
3250: PPUSH
3251: LD_INT 58
3253: PPUSH
3254: LD_INT 0
3256: PPUSH
3257: CALL_OW 48
// PlaceUnitXY ( Megan , 39 , 36 , false ) ;
3261: LD_EXP 10
3265: PPUSH
3266: LD_INT 39
3268: PPUSH
3269: LD_INT 36
3271: PPUSH
3272: LD_INT 0
3274: PPUSH
3275: CALL_OW 48
// BetaSquad := filter diff 0 ;
3279: LD_ADDR_EXP 11
3283: PUSH
3284: LD_VAR 0 3
3288: PUSH
3289: LD_INT 0
3291: DIFF
3292: ST_TO_ADDR
// end ;
3293: LD_VAR 0 1
3297: RET
// export Yashin , Popov , Gaydar , Sevi ; export RUArmada ; export function PrepareRUArmada ; var i , vehicle , soldiers , un , vehs ; begin
3298: LD_INT 0
3300: PPUSH
3301: PPUSH
3302: PPUSH
3303: PPUSH
3304: PPUSH
3305: PPUSH
// uc_side := 6 ;
3306: LD_ADDR_OWVAR 20
3310: PUSH
3311: LD_INT 6
3313: ST_TO_ADDR
// uc_nation := nation_russian ;
3314: LD_ADDR_OWVAR 21
3318: PUSH
3319: LD_INT 3
3321: ST_TO_ADDR
// soldiers := [ ] ;
3322: LD_ADDR_VAR 0 4
3326: PUSH
3327: EMPTY
3328: ST_TO_ADDR
// vehs := [ ] ;
3329: LD_ADDR_VAR 0 6
3333: PUSH
3334: EMPTY
3335: ST_TO_ADDR
// RUArmada := [ ] ;
3336: LD_ADDR_EXP 16
3340: PUSH
3341: EMPTY
3342: ST_TO_ADDR
// Yashin := NewCharacter ( Yashin ) ;
3343: LD_ADDR_EXP 12
3347: PUSH
3348: LD_STRING Yashin
3350: PPUSH
3351: CALL_OW 25
3355: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
3356: LD_ADDR_EXP 13
3360: PUSH
3361: LD_STRING Popov
3363: PPUSH
3364: CALL_OW 25
3368: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
3369: LD_ADDR_EXP 14
3373: PUSH
3374: LD_STRING Gaydar
3376: PPUSH
3377: CALL_OW 25
3381: ST_TO_ADDR
// Sevi := NewCharacter ( Vsevolod ) ;
3382: LD_ADDR_EXP 15
3386: PUSH
3387: LD_STRING Vsevolod
3389: PPUSH
3390: CALL_OW 25
3394: ST_TO_ADDR
// for i = 1 to 16 do
3395: LD_ADDR_VAR 0 2
3399: PUSH
3400: DOUBLE
3401: LD_INT 1
3403: DEC
3404: ST_TO_ADDR
3405: LD_INT 16
3407: PUSH
3408: FOR_TO
3409: IFFALSE 3451
// begin PrepareSoldier ( 0 , game_eskill ) ;
3411: LD_INT 0
3413: PPUSH
3414: LD_EXP 39
3418: PPUSH
3419: CALL_OW 381
// un := CreateHuman ;
3423: LD_ADDR_VAR 0 5
3427: PUSH
3428: CALL_OW 44
3432: ST_TO_ADDR
// soldiers := soldiers ^ un ;
3433: LD_ADDR_VAR 0 4
3437: PUSH
3438: LD_VAR 0 4
3442: PUSH
3443: LD_VAR 0 5
3447: ADD
3448: ST_TO_ADDR
// end ;
3449: GO 3408
3451: POP
3452: POP
// soldiers := Yashin ^ Popov ^ Gaydar ^ Sevi ^ soldiers ;
3453: LD_ADDR_VAR 0 4
3457: PUSH
3458: LD_EXP 12
3462: PUSH
3463: LD_EXP 13
3467: ADD
3468: PUSH
3469: LD_EXP 14
3473: ADD
3474: PUSH
3475: LD_EXP 15
3479: ADD
3480: PUSH
3481: LD_VAR 0 4
3485: ADD
3486: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_heavy_gun , 100 ) ;
3487: LD_INT 24
3489: PPUSH
3490: LD_INT 3
3492: PPUSH
3493: LD_INT 1
3495: PPUSH
3496: LD_INT 46
3498: PPUSH
3499: LD_INT 100
3501: PPUSH
3502: CALL 17291 0 5
// for i = 1 to 8 do
3506: LD_ADDR_VAR 0 2
3510: PUSH
3511: DOUBLE
3512: LD_INT 1
3514: DEC
3515: ST_TO_ADDR
3516: LD_INT 8
3518: PUSH
3519: FOR_TO
3520: IFFALSE 3603
// begin vehicle := CreateVehicle ;
3522: LD_ADDR_VAR 0 3
3526: PUSH
3527: CALL_OW 45
3531: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3532: LD_VAR 0 4
3536: PUSH
3537: LD_INT 1
3539: ARRAY
3540: PPUSH
3541: LD_VAR 0 3
3545: PPUSH
3546: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3550: LD_ADDR_VAR 0 4
3554: PUSH
3555: LD_VAR 0 4
3559: PUSH
3560: LD_VAR 0 4
3564: PUSH
3565: LD_INT 1
3567: ARRAY
3568: DIFF
3569: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3570: LD_VAR 0 3
3574: PPUSH
3575: LD_INT 5
3577: PPUSH
3578: LD_INT 0
3580: PPUSH
3581: CALL_OW 49
// vehs := vehs ^ vehicle ;
3585: LD_ADDR_VAR 0 6
3589: PUSH
3590: LD_VAR 0 6
3594: PUSH
3595: LD_VAR 0 3
3599: ADD
3600: ST_TO_ADDR
// end ;
3601: GO 3519
3603: POP
3604: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
3605: LD_INT 24
3607: PPUSH
3608: LD_INT 3
3610: PPUSH
3611: LD_INT 1
3613: PPUSH
3614: LD_INT 43
3616: PPUSH
3617: LD_INT 100
3619: PPUSH
3620: CALL 17291 0 5
// for i = 1 to 8 do
3624: LD_ADDR_VAR 0 2
3628: PUSH
3629: DOUBLE
3630: LD_INT 1
3632: DEC
3633: ST_TO_ADDR
3634: LD_INT 8
3636: PUSH
3637: FOR_TO
3638: IFFALSE 3721
// begin vehicle := CreateVehicle ;
3640: LD_ADDR_VAR 0 3
3644: PUSH
3645: CALL_OW 45
3649: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3650: LD_VAR 0 4
3654: PUSH
3655: LD_INT 1
3657: ARRAY
3658: PPUSH
3659: LD_VAR 0 3
3663: PPUSH
3664: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3668: LD_ADDR_VAR 0 4
3672: PUSH
3673: LD_VAR 0 4
3677: PUSH
3678: LD_VAR 0 4
3682: PUSH
3683: LD_INT 1
3685: ARRAY
3686: DIFF
3687: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3688: LD_VAR 0 3
3692: PPUSH
3693: LD_INT 5
3695: PPUSH
3696: LD_INT 0
3698: PPUSH
3699: CALL_OW 49
// vehs := vehs ^ vehicle ;
3703: LD_ADDR_VAR 0 6
3707: PUSH
3708: LD_VAR 0 6
3712: PUSH
3713: LD_VAR 0 3
3717: ADD
3718: ST_TO_ADDR
// end ;
3719: GO 3637
3721: POP
3722: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gun , 100 ) ;
3723: LD_INT 22
3725: PPUSH
3726: LD_INT 3
3728: PPUSH
3729: LD_INT 1
3731: PPUSH
3732: LD_INT 44
3734: PPUSH
3735: LD_INT 100
3737: PPUSH
3738: CALL 17291 0 5
// for i = 1 to 4 do
3742: LD_ADDR_VAR 0 2
3746: PUSH
3747: DOUBLE
3748: LD_INT 1
3750: DEC
3751: ST_TO_ADDR
3752: LD_INT 4
3754: PUSH
3755: FOR_TO
3756: IFFALSE 3839
// begin vehicle := CreateVehicle ;
3758: LD_ADDR_VAR 0 3
3762: PUSH
3763: CALL_OW 45
3767: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3768: LD_VAR 0 4
3772: PUSH
3773: LD_INT 1
3775: ARRAY
3776: PPUSH
3777: LD_VAR 0 3
3781: PPUSH
3782: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3786: LD_ADDR_VAR 0 4
3790: PUSH
3791: LD_VAR 0 4
3795: PUSH
3796: LD_VAR 0 4
3800: PUSH
3801: LD_INT 1
3803: ARRAY
3804: DIFF
3805: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3806: LD_VAR 0 3
3810: PPUSH
3811: LD_INT 5
3813: PPUSH
3814: LD_INT 0
3816: PPUSH
3817: CALL_OW 49
// vehs := vehs ^ vehicle ;
3821: LD_ADDR_VAR 0 6
3825: PUSH
3826: LD_VAR 0 6
3830: PUSH
3831: LD_VAR 0 3
3835: ADD
3836: ST_TO_ADDR
// end ;
3837: GO 3755
3839: POP
3840: POP
// RUArmada := vehs ;
3841: LD_ADDR_EXP 16
3845: PUSH
3846: LD_VAR 0 6
3850: ST_TO_ADDR
// SetMark ( [ IsInUnit ( Yashin ) , IsInUnit ( Popov ) , IsInUnit ( Gaydar ) , IsInUnit ( Sevi ) ] , - 6 ) ;
3851: LD_EXP 12
3855: PPUSH
3856: CALL_OW 310
3860: PUSH
3861: LD_EXP 13
3865: PPUSH
3866: CALL_OW 310
3870: PUSH
3871: LD_EXP 14
3875: PPUSH
3876: CALL_OW 310
3880: PUSH
3881: LD_EXP 15
3885: PPUSH
3886: CALL_OW 310
3890: PUSH
3891: EMPTY
3892: LIST
3893: LIST
3894: LIST
3895: LIST
3896: PPUSH
3897: LD_INT 6
3899: NEG
3900: PPUSH
3901: CALL_OW 242
// end ;
3905: LD_VAR 0 1
3909: RET
// export Bulldozers ; export function PrepareRUBulldozers ; var i , vehicle ; begin
3910: LD_INT 0
3912: PPUSH
3913: PPUSH
3914: PPUSH
// uc_side := 6 ;
3915: LD_ADDR_OWVAR 20
3919: PUSH
3920: LD_INT 6
3922: ST_TO_ADDR
// uc_nation := nation_russian ;
3923: LD_ADDR_OWVAR 21
3927: PUSH
3928: LD_INT 3
3930: ST_TO_ADDR
// Bulldozers := [ ] ;
3931: LD_ADDR_EXP 17
3935: PUSH
3936: EMPTY
3937: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
3938: LD_INT 24
3940: PPUSH
3941: LD_INT 3
3943: PPUSH
3944: LD_INT 3
3946: PPUSH
3947: LD_INT 53
3949: PPUSH
3950: LD_INT 100
3952: PPUSH
3953: CALL 17291 0 5
// for i = 1 to 2 do
3957: LD_ADDR_VAR 0 2
3961: PUSH
3962: DOUBLE
3963: LD_INT 1
3965: DEC
3966: ST_TO_ADDR
3967: LD_INT 2
3969: PUSH
3970: FOR_TO
3971: IFFALSE 4016
// begin vehicle := CreateVehicle ;
3973: LD_ADDR_VAR 0 3
3977: PUSH
3978: CALL_OW 45
3982: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3983: LD_VAR 0 3
3987: PPUSH
3988: LD_INT 5
3990: PPUSH
3991: LD_INT 0
3993: PPUSH
3994: CALL_OW 49
// Bulldozers := Bulldozers ^ vehicle ;
3998: LD_ADDR_EXP 17
4002: PUSH
4003: LD_EXP 17
4007: PUSH
4008: LD_VAR 0 3
4012: ADD
4013: ST_TO_ADDR
// end ;
4014: GO 3970
4016: POP
4017: POP
// end ;
4018: LD_VAR 0 1
4022: RET
// export Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ; export function PrepareRUBase ; var i , filter , un ; begin
4023: LD_INT 0
4025: PPUSH
4026: PPUSH
4027: PPUSH
4028: PPUSH
// uc_side := 3 ;
4029: LD_ADDR_OWVAR 20
4033: PUSH
4034: LD_INT 3
4036: ST_TO_ADDR
// uc_nation := nation_russian ;
4037: LD_ADDR_OWVAR 21
4041: PUSH
4042: LD_INT 3
4044: ST_TO_ADDR
// hc_name :=  ;
4045: LD_ADDR_OWVAR 26
4049: PUSH
4050: LD_STRING 
4052: ST_TO_ADDR
// hc_gallery :=  ;
4053: LD_ADDR_OWVAR 33
4057: PUSH
4058: LD_STRING 
4060: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
4061: LD_ADDR_EXP 18
4065: PUSH
4066: LD_STRING Burlak
4068: PPUSH
4069: CALL_OW 25
4073: ST_TO_ADDR
// Gleb := NewCharacter ( Gleb ) ;
4074: LD_ADDR_EXP 19
4078: PUSH
4079: LD_STRING Gleb
4081: PPUSH
4082: CALL_OW 25
4086: ST_TO_ADDR
// Furmanov := NewCharacter ( Furmanov ) ;
4087: LD_ADDR_EXP 20
4091: PUSH
4092: LD_STRING Furmanov
4094: PPUSH
4095: CALL_OW 25
4099: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
4100: LD_ADDR_EXP 21
4104: PUSH
4105: LD_STRING Titov
4107: PPUSH
4108: CALL_OW 25
4112: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
4113: LD_ADDR_EXP 22
4117: PUSH
4118: LD_STRING Scholtze
4120: PPUSH
4121: CALL_OW 25
4125: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
4126: LD_ADDR_EXP 23
4130: PUSH
4131: LD_STRING Dolgov
4133: PPUSH
4134: CALL_OW 25
4138: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
4139: LD_ADDR_EXP 24
4143: PUSH
4144: LD_STRING Kapitsova
4146: PPUSH
4147: CALL_OW 25
4151: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
4152: LD_ADDR_EXP 25
4156: PUSH
4157: LD_STRING Karamazov
4159: PPUSH
4160: CALL_OW 25
4164: ST_TO_ADDR
// Kirlenkova := NewCharacter ( Kirlenkova ) ;
4165: LD_ADDR_EXP 26
4169: PUSH
4170: LD_STRING Kirlenkova
4172: PPUSH
4173: CALL_OW 25
4177: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
4178: LD_ADDR_EXP 27
4182: PUSH
4183: LD_STRING Kovalyuk
4185: PPUSH
4186: CALL_OW 25
4190: ST_TO_ADDR
// Kozlov := NewCharacter ( Kozlov ) ;
4191: LD_ADDR_EXP 28
4195: PUSH
4196: LD_STRING Kozlov
4198: PPUSH
4199: CALL_OW 25
4203: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
4204: LD_ADDR_EXP 29
4208: PUSH
4209: LD_STRING Kuzmov
4211: PPUSH
4212: CALL_OW 25
4216: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
4217: LD_ADDR_EXP 30
4221: PUSH
4222: LD_STRING Lipshchin
4224: PPUSH
4225: CALL_OW 25
4229: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
4230: LD_ADDR_EXP 31
4234: PUSH
4235: LD_STRING Oblukov
4237: PPUSH
4238: CALL_OW 25
4242: ST_TO_ADDR
// Xavier2 := NewCharacter ( Xavier2 ) ;
4243: LD_ADDR_EXP 32
4247: PUSH
4248: LD_STRING Xavier2
4250: PPUSH
4251: CALL_OW 25
4255: ST_TO_ADDR
// Gnyevko := NewCharacter ( Gnyevko ) ;
4256: LD_ADDR_EXP 33
4260: PUSH
4261: LD_STRING Gnyevko
4263: PPUSH
4264: CALL_OW 25
4268: ST_TO_ADDR
// Belkov := NewCharacter ( Belkov ) ;
4269: LD_ADDR_EXP 34
4273: PUSH
4274: LD_STRING Belkov
4276: PPUSH
4277: CALL_OW 25
4281: ST_TO_ADDR
// filter := [ Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ] ;
4282: LD_ADDR_VAR 0 3
4286: PUSH
4287: LD_EXP 18
4291: PUSH
4292: LD_EXP 19
4296: PUSH
4297: LD_EXP 20
4301: PUSH
4302: LD_EXP 21
4306: PUSH
4307: LD_EXP 22
4311: PUSH
4312: LD_EXP 23
4316: PUSH
4317: LD_EXP 24
4321: PUSH
4322: LD_EXP 25
4326: PUSH
4327: LD_EXP 26
4331: PUSH
4332: LD_EXP 27
4336: PUSH
4337: LD_EXP 28
4341: PUSH
4342: LD_EXP 29
4346: PUSH
4347: LD_EXP 30
4351: PUSH
4352: LD_EXP 31
4356: PUSH
4357: LD_EXP 32
4361: PUSH
4362: LD_EXP 33
4366: PUSH
4367: LD_EXP 34
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: ST_TO_ADDR
// for i = 1 to filter do
4391: LD_ADDR_VAR 0 2
4395: PUSH
4396: DOUBLE
4397: LD_INT 1
4399: DEC
4400: ST_TO_ADDR
4401: LD_VAR 0 3
4405: PUSH
4406: FOR_TO
4407: IFFALSE 4432
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4409: LD_VAR 0 3
4413: PUSH
4414: LD_VAR 0 2
4418: ARRAY
4419: PPUSH
4420: LD_INT 6
4422: PPUSH
4423: LD_INT 0
4425: PPUSH
4426: CALL_OW 49
4430: GO 4406
4432: POP
4433: POP
// end ;
4434: LD_VAR 0 1
4438: RET
// export RU_SecondPersonnel ; export function PrepareRUBase_v2 ; var i , filter , un ; begin
4439: LD_INT 0
4441: PPUSH
4442: PPUSH
4443: PPUSH
4444: PPUSH
// uc_side := 3 ;
4445: LD_ADDR_OWVAR 20
4449: PUSH
4450: LD_INT 3
4452: ST_TO_ADDR
// uc_nation := nation_russian ;
4453: LD_ADDR_OWVAR 21
4457: PUSH
4458: LD_INT 3
4460: ST_TO_ADDR
// hc_name :=  ;
4461: LD_ADDR_OWVAR 26
4465: PUSH
4466: LD_STRING 
4468: ST_TO_ADDR
// hc_gallery :=  ;
4469: LD_ADDR_OWVAR 33
4473: PUSH
4474: LD_STRING 
4476: ST_TO_ADDR
// for i = 1 to 8 do
4477: LD_ADDR_VAR 0 2
4481: PUSH
4482: DOUBLE
4483: LD_INT 1
4485: DEC
4486: ST_TO_ADDR
4487: LD_INT 8
4489: PUSH
4490: FOR_TO
4491: IFFALSE 4533
// begin PrepareSoldier ( 0 , game_eskill ) ;
4493: LD_INT 0
4495: PPUSH
4496: LD_EXP 39
4500: PPUSH
4501: CALL_OW 381
// un := CreateHuman ;
4505: LD_ADDR_VAR 0 4
4509: PUSH
4510: CALL_OW 44
4514: ST_TO_ADDR
// filter := filter ^ un ;
4515: LD_ADDR_VAR 0 3
4519: PUSH
4520: LD_VAR 0 3
4524: PUSH
4525: LD_VAR 0 4
4529: ADD
4530: ST_TO_ADDR
// end ;
4531: GO 4490
4533: POP
4534: POP
// for i = 1 to 4 do
4535: LD_ADDR_VAR 0 2
4539: PUSH
4540: DOUBLE
4541: LD_INT 1
4543: DEC
4544: ST_TO_ADDR
4545: LD_INT 4
4547: PUSH
4548: FOR_TO
4549: IFFALSE 4591
// begin PrepareEngineer ( 0 , game_eskill ) ;
4551: LD_INT 0
4553: PPUSH
4554: LD_EXP 39
4558: PPUSH
4559: CALL_OW 382
// un := CreateHuman ;
4563: LD_ADDR_VAR 0 4
4567: PUSH
4568: CALL_OW 44
4572: ST_TO_ADDR
// filter := filter ^ un ;
4573: LD_ADDR_VAR 0 3
4577: PUSH
4578: LD_VAR 0 3
4582: PUSH
4583: LD_VAR 0 4
4587: ADD
4588: ST_TO_ADDR
// end ;
4589: GO 4548
4591: POP
4592: POP
// for i = 1 to 6 do
4593: LD_ADDR_VAR 0 2
4597: PUSH
4598: DOUBLE
4599: LD_INT 1
4601: DEC
4602: ST_TO_ADDR
4603: LD_INT 6
4605: PUSH
4606: FOR_TO
4607: IFFALSE 4649
// begin PrepareMechanic ( 0 , game_eskill ) ;
4609: LD_INT 0
4611: PPUSH
4612: LD_EXP 39
4616: PPUSH
4617: CALL_OW 383
// un := CreateHuman ;
4621: LD_ADDR_VAR 0 4
4625: PUSH
4626: CALL_OW 44
4630: ST_TO_ADDR
// filter := filter ^ un ;
4631: LD_ADDR_VAR 0 3
4635: PUSH
4636: LD_VAR 0 3
4640: PUSH
4641: LD_VAR 0 4
4645: ADD
4646: ST_TO_ADDR
// end ;
4647: GO 4606
4649: POP
4650: POP
// for i = 1 to 4 do
4651: LD_ADDR_VAR 0 2
4655: PUSH
4656: DOUBLE
4657: LD_INT 1
4659: DEC
4660: ST_TO_ADDR
4661: LD_INT 4
4663: PUSH
4664: FOR_TO
4665: IFFALSE 4707
// begin PrepareScientist ( 0 , game_eskill ) ;
4667: LD_INT 0
4669: PPUSH
4670: LD_EXP 39
4674: PPUSH
4675: CALL_OW 384
// un := CreateHuman ;
4679: LD_ADDR_VAR 0 4
4683: PUSH
4684: CALL_OW 44
4688: ST_TO_ADDR
// filter := filter ^ un ;
4689: LD_ADDR_VAR 0 3
4693: PUSH
4694: LD_VAR 0 3
4698: PUSH
4699: LD_VAR 0 4
4703: ADD
4704: ST_TO_ADDR
// end ;
4705: GO 4664
4707: POP
4708: POP
// for i = 1 to filter do
4709: LD_ADDR_VAR 0 2
4713: PUSH
4714: DOUBLE
4715: LD_INT 1
4717: DEC
4718: ST_TO_ADDR
4719: LD_VAR 0 3
4723: PUSH
4724: FOR_TO
4725: IFFALSE 4750
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4727: LD_VAR 0 3
4731: PUSH
4732: LD_VAR 0 2
4736: ARRAY
4737: PPUSH
4738: LD_INT 6
4740: PPUSH
4741: LD_INT 0
4743: PPUSH
4744: CALL_OW 49
4748: GO 4724
4750: POP
4751: POP
// RU_SecondPersonnel := filter ;
4752: LD_ADDR_EXP 35
4756: PUSH
4757: LD_VAR 0 3
4761: ST_TO_ADDR
// end ;
4762: LD_VAR 0 1
4766: RET
// export JMM ; export function JMMReinforcement ; var i , soldiers , un , vehs , vehicle , mechs ; begin
4767: LD_INT 0
4769: PPUSH
4770: PPUSH
4771: PPUSH
4772: PPUSH
4773: PPUSH
4774: PPUSH
4775: PPUSH
// uc_side := 1 ;
4776: LD_ADDR_OWVAR 20
4780: PUSH
4781: LD_INT 1
4783: ST_TO_ADDR
// uc_nation := nation_american ;
4784: LD_ADDR_OWVAR 21
4788: PUSH
4789: LD_INT 1
4791: ST_TO_ADDR
// JMM := NewCharacter ( JMM ) ;
4792: LD_ADDR_EXP 36
4796: PUSH
4797: LD_STRING JMM
4799: PPUSH
4800: CALL_OW 25
4804: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
4805: LD_EXP 36
4809: PPUSH
4810: LD_INT 1
4812: PPUSH
4813: CALL_OW 233
// PlaceUnitArea ( JMM , JMMArrivalArea , false ) ;
4817: LD_EXP 36
4821: PPUSH
4822: LD_INT 7
4824: PPUSH
4825: LD_INT 0
4827: PPUSH
4828: CALL_OW 49
// mechs := [ ] ;
4832: LD_ADDR_VAR 0 7
4836: PUSH
4837: EMPTY
4838: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
4839: LD_ADDR_VAR 0 2
4843: PUSH
4844: DOUBLE
4845: LD_INT 1
4847: DEC
4848: ST_TO_ADDR
4849: LD_INT 4
4851: PUSH
4852: LD_INT 3
4854: PUSH
4855: LD_INT 3
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: LD_OWVAR 67
4867: ARRAY
4868: PUSH
4869: FOR_TO
4870: IFFALSE 4931
// begin PrepareSoldier ( 0 , game_skill + 1 ) ;
4872: LD_INT 0
4874: PPUSH
4875: LD_EXP 38
4879: PUSH
4880: LD_INT 1
4882: PLUS
4883: PPUSH
4884: CALL_OW 381
// un := CreateHuman ;
4888: LD_ADDR_VAR 0 4
4892: PUSH
4893: CALL_OW 44
4897: ST_TO_ADDR
// soldiers := soldiers ^ un ;
4898: LD_ADDR_VAR 0 3
4902: PUSH
4903: LD_VAR 0 3
4907: PUSH
4908: LD_VAR 0 4
4912: ADD
4913: ST_TO_ADDR
// PlaceUnitArea ( un , JMMArrivalArea , false ) ;
4914: LD_VAR 0 4
4918: PPUSH
4919: LD_INT 7
4921: PPUSH
4922: LD_INT 0
4924: PPUSH
4925: CALL_OW 49
// end ;
4929: GO 4869
4931: POP
4932: POP
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
4933: LD_ADDR_VAR 0 2
4937: PUSH
4938: DOUBLE
4939: LD_INT 1
4941: DEC
4942: ST_TO_ADDR
4943: LD_INT 7
4945: PUSH
4946: LD_INT 6
4948: PUSH
4949: LD_INT 4
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: LIST
4956: PUSH
4957: LD_OWVAR 67
4961: ARRAY
4962: PUSH
4963: FOR_TO
4964: IFFALSE 5010
// begin PrepareMechanic ( 0 , game_skill + 1 ) ;
4966: LD_INT 0
4968: PPUSH
4969: LD_EXP 38
4973: PUSH
4974: LD_INT 1
4976: PLUS
4977: PPUSH
4978: CALL_OW 383
// un := CreateHuman ;
4982: LD_ADDR_VAR 0 4
4986: PUSH
4987: CALL_OW 44
4991: ST_TO_ADDR
// mechs := mechs ^ un ;
4992: LD_ADDR_VAR 0 7
4996: PUSH
4997: LD_VAR 0 7
5001: PUSH
5002: LD_VAR 0 4
5006: ADD
5007: ST_TO_ADDR
// end ;
5008: GO 4963
5010: POP
5011: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_double_gun , 100 ) ;
5012: LD_INT 3
5014: PPUSH
5015: LD_INT 3
5017: PPUSH
5018: LD_INT 1
5020: PPUSH
5021: LD_INT 5
5023: PPUSH
5024: LD_INT 100
5026: PPUSH
5027: CALL 17291 0 5
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
5031: LD_ADDR_VAR 0 2
5035: PUSH
5036: DOUBLE
5037: LD_INT 1
5039: DEC
5040: ST_TO_ADDR
5041: LD_INT 7
5043: PUSH
5044: LD_INT 6
5046: PUSH
5047: LD_INT 4
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: LIST
5054: PUSH
5055: LD_OWVAR 67
5059: ARRAY
5060: PUSH
5061: FOR_TO
5062: IFFALSE 5157
// begin vehicle := CreateVehicle ;
5064: LD_ADDR_VAR 0 6
5068: PUSH
5069: CALL_OW 45
5073: ST_TO_ADDR
// PlaceHumanInUnit ( mechs [ 1 ] , vehicle ) ;
5074: LD_VAR 0 7
5078: PUSH
5079: LD_INT 1
5081: ARRAY
5082: PPUSH
5083: LD_VAR 0 6
5087: PPUSH
5088: CALL_OW 52
// mechs := mechs diff mechs [ 1 ] ;
5092: LD_ADDR_VAR 0 7
5096: PUSH
5097: LD_VAR 0 7
5101: PUSH
5102: LD_VAR 0 7
5106: PUSH
5107: LD_INT 1
5109: ARRAY
5110: DIFF
5111: ST_TO_ADDR
// SetDir ( vehicle , 1 ) ;
5112: LD_VAR 0 6
5116: PPUSH
5117: LD_INT 1
5119: PPUSH
5120: CALL_OW 233
// PlaceUnitArea ( vehicle , JMMArrivalArea , false ) ;
5124: LD_VAR 0 6
5128: PPUSH
5129: LD_INT 7
5131: PPUSH
5132: LD_INT 0
5134: PPUSH
5135: CALL_OW 49
// vehs := vehs ^ vehicle ;
5139: LD_ADDR_VAR 0 5
5143: PUSH
5144: LD_VAR 0 5
5148: PUSH
5149: LD_VAR 0 6
5153: ADD
5154: ST_TO_ADDR
// end ;
5155: GO 5061
5157: POP
5158: POP
// end ; end_of_file
5159: LD_VAR 0 1
5163: RET
// export game_diff ; export game_skill , game_eskill ; export jmmArrival , ruArrival ; export function GameType ; begin
5164: LD_INT 0
5166: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
5167: LD_ADDR_OWVAR 67
5171: PUSH
5172: LD_INT 0
5174: PPUSH
5175: CALL_OW 426
5179: ST_TO_ADDR
// game_diff := Difficulty ;
5180: LD_ADDR_EXP 37
5184: PUSH
5185: LD_OWVAR 67
5189: ST_TO_ADDR
// game_skill := [ 7 , 6 , 6 ] [ game_diff ] ;
5190: LD_ADDR_EXP 38
5194: PUSH
5195: LD_INT 7
5197: PUSH
5198: LD_INT 6
5200: PUSH
5201: LD_INT 6
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: LIST
5208: PUSH
5209: LD_EXP 37
5213: ARRAY
5214: ST_TO_ADDR
// game_eskill := [ 6 , 7 , 8 ] [ game_diff ] ;
5215: LD_ADDR_EXP 39
5219: PUSH
5220: LD_INT 6
5222: PUSH
5223: LD_INT 7
5225: PUSH
5226: LD_INT 8
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: LIST
5233: PUSH
5234: LD_EXP 37
5238: ARRAY
5239: ST_TO_ADDR
// ruArrival := [ 3 3$00 , 2 2$30 , 2 2$00 ] [ game_diff ] ;
5240: LD_ADDR_EXP 41
5244: PUSH
5245: LD_INT 6300
5247: PUSH
5248: LD_INT 5250
5250: PUSH
5251: LD_INT 4200
5253: PUSH
5254: EMPTY
5255: LIST
5256: LIST
5257: LIST
5258: PUSH
5259: LD_EXP 37
5263: ARRAY
5264: ST_TO_ADDR
// jmmArrival := [ 35 35$00 , 45 45$00 , 55 55$00 ] [ game_diff ] ;
5265: LD_ADDR_EXP 40
5269: PUSH
5270: LD_INT 73500
5272: PUSH
5273: LD_INT 94500
5275: PUSH
5276: LD_INT 115500
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: LIST
5283: PUSH
5284: LD_EXP 37
5288: ARRAY
5289: ST_TO_ADDR
// end ; end_of_file
5290: LD_VAR 0 1
5294: RET
// export function CustomEvent ( event ) ; begin
5295: LD_INT 0
5297: PPUSH
// end ;
5298: LD_VAR 0 2
5302: RET
// export function CustomInitMacro ( ) ; begin
5303: LD_INT 0
5305: PPUSH
// MC_SetScanArea ( 1 , RU_Base_Area ) ;
5306: LD_INT 1
5308: PPUSH
5309: LD_INT 3
5311: PPUSH
5312: CALL 77722 0 2
// MC_SetParkingArea ( 1 , RU_Base_Parking ) ;
5316: LD_INT 1
5318: PPUSH
5319: LD_INT 4
5321: PPUSH
5322: CALL 77666 0 2
// MC_SetDepositsXY ( 1 , [ [ 136 , 130 , 0 ] , [ 145 , 123 , 0 ] , ] ) ;
5326: LD_INT 1
5328: PPUSH
5329: LD_INT 136
5331: PUSH
5332: LD_INT 130
5334: PUSH
5335: LD_INT 0
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: LIST
5342: PUSH
5343: LD_INT 145
5345: PUSH
5346: LD_INT 123
5348: PUSH
5349: LD_INT 0
5351: PUSH
5352: EMPTY
5353: LIST
5354: LIST
5355: LIST
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: PPUSH
5361: CALL 76788 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5365: LD_INT 1
5367: PPUSH
5368: LD_INT 43
5370: PUSH
5371: LD_INT 46
5373: PUSH
5374: LD_INT 45
5376: PUSH
5377: EMPTY
5378: LIST
5379: LIST
5380: LIST
5381: PPUSH
5382: CALL 77554 0 2
// MC_SetCratesArea ( 1 , RU_Base_Area ) ;
5386: LD_INT 1
5388: PPUSH
5389: LD_INT 3
5391: PPUSH
5392: CALL 77236 0 2
// MC_SetTame ( 1 , RU_Base_Area ) ;
5396: LD_INT 1
5398: PPUSH
5399: LD_INT 3
5401: PPUSH
5402: CALL 76967 0 2
// MC_SetDefenderLimit ( 1 , 8 ) ;
5406: LD_INT 1
5408: PPUSH
5409: LD_INT 8
5411: PPUSH
5412: CALL 76649 0 2
// MC_SetProduceList ( 1 , [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] ] ) ;
5416: LD_INT 1
5418: PPUSH
5419: LD_INT 22
5421: PUSH
5422: LD_INT 1
5424: PUSH
5425: LD_INT 3
5427: PUSH
5428: LD_INT 43
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: PUSH
5437: LD_INT 22
5439: PUSH
5440: LD_INT 1
5442: PUSH
5443: LD_INT 3
5445: PUSH
5446: LD_INT 44
5448: PUSH
5449: EMPTY
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: PUSH
5455: LD_INT 22
5457: PUSH
5458: LD_INT 1
5460: PUSH
5461: LD_INT 3
5463: PUSH
5464: LD_INT 45
5466: PUSH
5467: EMPTY
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: PUSH
5473: LD_INT 24
5475: PUSH
5476: LD_INT 1
5478: PUSH
5479: LD_INT 3
5481: PUSH
5482: LD_INT 43
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: LIST
5489: LIST
5490: PUSH
5491: LD_INT 24
5493: PUSH
5494: LD_INT 1
5496: PUSH
5497: LD_INT 3
5499: PUSH
5500: LD_INT 43
5502: PUSH
5503: EMPTY
5504: LIST
5505: LIST
5506: LIST
5507: LIST
5508: PUSH
5509: LD_INT 24
5511: PUSH
5512: LD_INT 1
5514: PUSH
5515: LD_INT 3
5517: PUSH
5518: LD_INT 46
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: PUSH
5527: LD_INT 22
5529: PUSH
5530: LD_INT 1
5532: PUSH
5533: LD_INT 3
5535: PUSH
5536: LD_INT 43
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: PUSH
5545: LD_INT 22
5547: PUSH
5548: LD_INT 1
5550: PUSH
5551: LD_INT 3
5553: PUSH
5554: LD_INT 44
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: PPUSH
5573: CALL 76464 0 2
// MC_SetBuildingList ( 1 , [ [ b_depot , 127 , 125 , 5 ] , [ b_lab , 124 , 132 , 0 ] , [ b_oil_mine , 136 , 130 , 1 ] , [ b_armoury , 118 , 114 , 2 ] , [ b_oil_mine , 145 , 123 , 1 ] , [ b_oil_power , 150 , 135 , 1 ] , [ b_oil_power , 140 , 134 , 2 ] , [ b_oil_power , 137 , 121 , 5 ] , [ b_workshop , 155 , 130 , 0 ] , [ b_bunker , 155 , 130 , 0 ] , [ b_bunker , 130 , 114 , 3 ] , [ b_bunker , 142 , 115 , 3 ] , [ b_bunker , 153 , 120 , 3 ] , ] ) ;
5577: LD_INT 1
5579: PPUSH
5580: LD_INT 0
5582: PUSH
5583: LD_INT 127
5585: PUSH
5586: LD_INT 125
5588: PUSH
5589: LD_INT 5
5591: PUSH
5592: EMPTY
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: PUSH
5598: LD_INT 6
5600: PUSH
5601: LD_INT 124
5603: PUSH
5604: LD_INT 132
5606: PUSH
5607: LD_INT 0
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: PUSH
5616: LD_INT 29
5618: PUSH
5619: LD_INT 136
5621: PUSH
5622: LD_INT 130
5624: PUSH
5625: LD_INT 1
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: PUSH
5634: LD_INT 4
5636: PUSH
5637: LD_INT 118
5639: PUSH
5640: LD_INT 114
5642: PUSH
5643: LD_INT 2
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: PUSH
5652: LD_INT 29
5654: PUSH
5655: LD_INT 145
5657: PUSH
5658: LD_INT 123
5660: PUSH
5661: LD_INT 1
5663: PUSH
5664: EMPTY
5665: LIST
5666: LIST
5667: LIST
5668: LIST
5669: PUSH
5670: LD_INT 26
5672: PUSH
5673: LD_INT 150
5675: PUSH
5676: LD_INT 135
5678: PUSH
5679: LD_INT 1
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: LIST
5686: LIST
5687: PUSH
5688: LD_INT 26
5690: PUSH
5691: LD_INT 140
5693: PUSH
5694: LD_INT 134
5696: PUSH
5697: LD_INT 2
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: PUSH
5706: LD_INT 26
5708: PUSH
5709: LD_INT 137
5711: PUSH
5712: LD_INT 121
5714: PUSH
5715: LD_INT 5
5717: PUSH
5718: EMPTY
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: PUSH
5724: LD_INT 2
5726: PUSH
5727: LD_INT 155
5729: PUSH
5730: LD_INT 130
5732: PUSH
5733: LD_INT 0
5735: PUSH
5736: EMPTY
5737: LIST
5738: LIST
5739: LIST
5740: LIST
5741: PUSH
5742: LD_INT 32
5744: PUSH
5745: LD_INT 155
5747: PUSH
5748: LD_INT 130
5750: PUSH
5751: LD_INT 0
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: LIST
5758: LIST
5759: PUSH
5760: LD_INT 32
5762: PUSH
5763: LD_INT 130
5765: PUSH
5766: LD_INT 114
5768: PUSH
5769: LD_INT 3
5771: PUSH
5772: EMPTY
5773: LIST
5774: LIST
5775: LIST
5776: LIST
5777: PUSH
5778: LD_INT 32
5780: PUSH
5781: LD_INT 142
5783: PUSH
5784: LD_INT 115
5786: PUSH
5787: LD_INT 3
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: LIST
5794: LIST
5795: PUSH
5796: LD_INT 32
5798: PUSH
5799: LD_INT 153
5801: PUSH
5802: LD_INT 120
5804: PUSH
5805: LD_INT 3
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: LIST
5818: LIST
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: LIST
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: PPUSH
5829: CALL 76356 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_computer ] ) ;
5833: LD_INT 1
5835: PPUSH
5836: LD_INT 10
5838: PUSH
5839: LD_INT 12
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: PPUSH
5846: CALL 77143 0 2
// MC_SetFactoryExtension ( 1 , 155 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
5850: LD_INT 1
5852: PPUSH
5853: LD_INT 155
5855: PPUSH
5856: LD_INT 130
5858: PPUSH
5859: LD_INT 0
5861: PPUSH
5862: LD_INT 24
5864: PUSH
5865: LD_INT 16
5867: PUSH
5868: LD_INT 17
5870: PUSH
5871: LD_INT 18
5873: PUSH
5874: LD_INT 21
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: PPUSH
5884: CALL 77348 0 5
// MC_SetScanArea ( 2 , RU_Base_Area ) ;
5888: LD_INT 2
5890: PPUSH
5891: LD_INT 3
5893: PPUSH
5894: CALL 77722 0 2
// MC_SetParkingArea ( 2 , RU_Base_Parking ) ;
5898: LD_INT 2
5900: PPUSH
5901: LD_INT 4
5903: PPUSH
5904: CALL 77666 0 2
// MC_SetDepositsXY ( 2 , [ [ 84 , 125 , 1 ] , ] ) ;
5908: LD_INT 2
5910: PPUSH
5911: LD_INT 84
5913: PUSH
5914: LD_INT 125
5916: PUSH
5917: LD_INT 1
5919: PUSH
5920: EMPTY
5921: LIST
5922: LIST
5923: LIST
5924: PUSH
5925: EMPTY
5926: LIST
5927: PPUSH
5928: CALL 76788 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5932: LD_INT 2
5934: PPUSH
5935: LD_INT 43
5937: PUSH
5938: LD_INT 46
5940: PUSH
5941: LD_INT 45
5943: PUSH
5944: EMPTY
5945: LIST
5946: LIST
5947: LIST
5948: PPUSH
5949: CALL 77554 0 2
// MC_SetCratesArea ( 2 , RU_Base_Area ) ;
5953: LD_INT 2
5955: PPUSH
5956: LD_INT 3
5958: PPUSH
5959: CALL 77236 0 2
// MC_SetTame ( 2 , RU_Base_Area ) ;
5963: LD_INT 2
5965: PPUSH
5966: LD_INT 3
5968: PPUSH
5969: CALL 76967 0 2
// MC_SetDefenderLimit ( 2 , 8 ) ;
5973: LD_INT 2
5975: PPUSH
5976: LD_INT 8
5978: PPUSH
5979: CALL 76649 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] ] ) ;
5983: LD_INT 2
5985: PPUSH
5986: LD_INT 22
5988: PUSH
5989: LD_INT 3
5991: PUSH
5992: LD_INT 3
5994: PUSH
5995: LD_INT 43
5997: PUSH
5998: EMPTY
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: PUSH
6004: LD_INT 22
6006: PUSH
6007: LD_INT 3
6009: PUSH
6010: LD_INT 3
6012: PUSH
6013: LD_INT 44
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: PUSH
6022: LD_INT 22
6024: PUSH
6025: LD_INT 3
6027: PUSH
6028: LD_INT 3
6030: PUSH
6031: LD_INT 45
6033: PUSH
6034: EMPTY
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: PUSH
6040: LD_INT 24
6042: PUSH
6043: LD_INT 3
6045: PUSH
6046: LD_INT 3
6048: PUSH
6049: LD_INT 43
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: PUSH
6058: LD_INT 24
6060: PUSH
6061: LD_INT 3
6063: PUSH
6064: LD_INT 3
6066: PUSH
6067: LD_INT 43
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: PUSH
6076: LD_INT 24
6078: PUSH
6079: LD_INT 3
6081: PUSH
6082: LD_INT 3
6084: PUSH
6085: LD_INT 46
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: PUSH
6094: LD_INT 22
6096: PUSH
6097: LD_INT 3
6099: PUSH
6100: LD_INT 3
6102: PUSH
6103: LD_INT 43
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: PUSH
6112: LD_INT 22
6114: PUSH
6115: LD_INT 3
6117: PUSH
6118: LD_INT 3
6120: PUSH
6121: LD_INT 44
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: PPUSH
6140: CALL 76464 0 2
// MC_SetBuildingList ( 2 , [ [ b_depot , 96 , 125 , 0 ] , [ b_lab , 74 , 122 , 1 ] , [ b_siberite_mine , 84 , 125 , 1 ] , [ b_siberite_power , 86 , 128 , 1 ] , [ b_siberite_power , 85 , 130 , 2 ] , [ b_siberite_power , 88 , 132 , 5 ] , [ b_workshop , 106 , 130 , 0 ] , [ b_armoury , 99 , 114 , 3 ] , [ b_bunker , 72 , 112 , 2 ] , [ b_bunker , 78 , 110 , 3 ] , [ b_bunker , 84 , 110 , 2 ] , [ b_bunker , 105 , 117 , 3 ] , ] ) ;
6144: LD_INT 2
6146: PPUSH
6147: LD_INT 0
6149: PUSH
6150: LD_INT 96
6152: PUSH
6153: LD_INT 125
6155: PUSH
6156: LD_INT 0
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: LIST
6163: LIST
6164: PUSH
6165: LD_INT 6
6167: PUSH
6168: LD_INT 74
6170: PUSH
6171: LD_INT 122
6173: PUSH
6174: LD_INT 1
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: PUSH
6183: LD_INT 30
6185: PUSH
6186: LD_INT 84
6188: PUSH
6189: LD_INT 125
6191: PUSH
6192: LD_INT 1
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: PUSH
6201: LD_INT 28
6203: PUSH
6204: LD_INT 86
6206: PUSH
6207: LD_INT 128
6209: PUSH
6210: LD_INT 1
6212: PUSH
6213: EMPTY
6214: LIST
6215: LIST
6216: LIST
6217: LIST
6218: PUSH
6219: LD_INT 28
6221: PUSH
6222: LD_INT 85
6224: PUSH
6225: LD_INT 130
6227: PUSH
6228: LD_INT 2
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: PUSH
6237: LD_INT 28
6239: PUSH
6240: LD_INT 88
6242: PUSH
6243: LD_INT 132
6245: PUSH
6246: LD_INT 5
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 2
6257: PUSH
6258: LD_INT 106
6260: PUSH
6261: LD_INT 130
6263: PUSH
6264: LD_INT 0
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: PUSH
6273: LD_INT 4
6275: PUSH
6276: LD_INT 99
6278: PUSH
6279: LD_INT 114
6281: PUSH
6282: LD_INT 3
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: PUSH
6291: LD_INT 32
6293: PUSH
6294: LD_INT 72
6296: PUSH
6297: LD_INT 112
6299: PUSH
6300: LD_INT 2
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: PUSH
6309: LD_INT 32
6311: PUSH
6312: LD_INT 78
6314: PUSH
6315: LD_INT 110
6317: PUSH
6318: LD_INT 3
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: PUSH
6327: LD_INT 32
6329: PUSH
6330: LD_INT 84
6332: PUSH
6333: LD_INT 110
6335: PUSH
6336: LD_INT 2
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: PUSH
6345: LD_INT 32
6347: PUSH
6348: LD_INT 105
6350: PUSH
6351: LD_INT 117
6353: PUSH
6354: LD_INT 3
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: PPUSH
6377: CALL 76356 0 2
// MC_SetLabKind ( 2 , [ b_lab_spacetime , b_lab_siberium ] ) ;
6381: LD_INT 2
6383: PPUSH
6384: LD_INT 14
6386: PUSH
6387: LD_INT 11
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: PPUSH
6394: CALL 77143 0 2
// MC_SetFactoryExtension ( 2 , 106 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
6398: LD_INT 2
6400: PPUSH
6401: LD_INT 106
6403: PPUSH
6404: LD_INT 130
6406: PPUSH
6407: LD_INT 0
6409: PPUSH
6410: LD_INT 24
6412: PUSH
6413: LD_INT 16
6415: PUSH
6416: LD_INT 17
6418: PUSH
6419: LD_INT 18
6421: PUSH
6422: LD_INT 21
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: PPUSH
6432: CALL 77348 0 5
// end ;
6436: LD_VAR 0 1
6440: RET
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
6441: LD_INT 22
6443: PUSH
6444: LD_INT 3
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: LD_INT 30
6453: PUSH
6454: LD_INT 3
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: PPUSH
6465: CALL_OW 69
6469: IFFALSE 7325
6471: GO 6473
6473: DISABLE
6474: LD_INT 0
6476: PPUSH
6477: PPUSH
6478: PPUSH
6479: PPUSH
6480: PPUSH
6481: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
6482: LD_INT 6300
6484: PUSH
6485: LD_INT 4200
6487: PUSH
6488: LD_INT 2100
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: LIST
6495: PUSH
6496: LD_OWVAR 67
6500: ARRAY
6501: PPUSH
6502: CALL_OW 67
// base := 2 ;
6506: LD_ADDR_VAR 0 2
6510: PUSH
6511: LD_INT 2
6513: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
6514: LD_INT 22
6516: PUSH
6517: LD_INT 3
6519: PUSH
6520: EMPTY
6521: LIST
6522: LIST
6523: PUSH
6524: LD_INT 30
6526: PUSH
6527: LD_INT 3
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: PPUSH
6538: CALL_OW 69
6542: NOT
6543: IFFALSE 6547
// continue ;
6545: GO 6482
// case Rand ( 1 , 3 ) of 1 :
6547: LD_INT 1
6549: PPUSH
6550: LD_INT 3
6552: PPUSH
6553: CALL_OW 12
6557: PUSH
6558: LD_INT 1
6560: DOUBLE
6561: EQUAL
6562: IFTRUE 6566
6564: GO 6742
6566: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6567: LD_ADDR_VAR 0 3
6571: PUSH
6572: LD_INT 22
6574: PUSH
6575: LD_INT 3
6577: PUSH
6578: LD_INT 3
6580: PUSH
6581: LD_INT 43
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: PUSH
6590: LD_INT 24
6592: PUSH
6593: LD_INT 3
6595: PUSH
6596: LD_INT 3
6598: PUSH
6599: LD_INT 46
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: PUSH
6608: LD_INT 24
6610: PUSH
6611: LD_INT 3
6613: PUSH
6614: LD_INT 3
6616: PUSH
6617: LD_INT 43
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: PUSH
6626: LD_INT 24
6628: PUSH
6629: LD_INT 3
6631: PUSH
6632: LD_INT 3
6634: PUSH
6635: LD_INT 46
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: PUSH
6644: LD_INT 22
6646: PUSH
6647: LD_INT 3
6649: PUSH
6650: LD_INT 3
6652: PUSH
6653: LD_INT 45
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: PUSH
6662: LD_INT 22
6664: PUSH
6665: LD_INT 3
6667: PUSH
6668: LD_INT 3
6670: PUSH
6671: LD_INT 43
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: PUSH
6680: LD_INT 24
6682: PUSH
6683: LD_INT 3
6685: PUSH
6686: LD_INT 3
6688: PUSH
6689: LD_INT 46
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: PUSH
6698: LD_INT 22
6700: PUSH
6701: LD_INT 3
6703: PUSH
6704: LD_INT 3
6706: PUSH
6707: LD_INT 45
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6726: LD_VAR 0 2
6730: PPUSH
6731: LD_VAR 0 3
6735: PPUSH
6736: CALL 76512 0 2
// end ; 2 :
6740: GO 7073
6742: LD_INT 2
6744: DOUBLE
6745: EQUAL
6746: IFTRUE 6750
6748: GO 6888
6750: POP
// begin tmp := [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6751: LD_ADDR_VAR 0 3
6755: PUSH
6756: LD_INT 24
6758: PUSH
6759: LD_INT 3
6761: PUSH
6762: LD_INT 3
6764: PUSH
6765: LD_INT 43
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: PUSH
6774: LD_INT 24
6776: PUSH
6777: LD_INT 3
6779: PUSH
6780: LD_INT 3
6782: PUSH
6783: LD_INT 46
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: PUSH
6792: LD_INT 24
6794: PUSH
6795: LD_INT 3
6797: PUSH
6798: LD_INT 3
6800: PUSH
6801: LD_INT 43
6803: PUSH
6804: EMPTY
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: PUSH
6810: LD_INT 24
6812: PUSH
6813: LD_INT 3
6815: PUSH
6816: LD_INT 3
6818: PUSH
6819: LD_INT 46
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: PUSH
6828: LD_INT 22
6830: PUSH
6831: LD_INT 3
6833: PUSH
6834: LD_INT 3
6836: PUSH
6837: LD_INT 45
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: PUSH
6846: LD_INT 22
6848: PUSH
6849: LD_INT 3
6851: PUSH
6852: LD_INT 3
6854: PUSH
6855: LD_INT 45
6857: PUSH
6858: EMPTY
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: PUSH
6864: EMPTY
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
6872: LD_VAR 0 2
6876: PPUSH
6877: LD_VAR 0 3
6881: PPUSH
6882: CALL 76512 0 2
// end ; 3 :
6886: GO 7073
6888: LD_INT 3
6890: DOUBLE
6891: EQUAL
6892: IFTRUE 6896
6894: GO 7072
6896: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
6897: LD_ADDR_VAR 0 3
6901: PUSH
6902: LD_INT 22
6904: PUSH
6905: LD_INT 3
6907: PUSH
6908: LD_INT 3
6910: PUSH
6911: LD_INT 43
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: PUSH
6920: LD_INT 24
6922: PUSH
6923: LD_INT 3
6925: PUSH
6926: LD_INT 3
6928: PUSH
6929: LD_INT 46
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: PUSH
6938: LD_INT 22
6940: PUSH
6941: LD_INT 3
6943: PUSH
6944: LD_INT 3
6946: PUSH
6947: LD_INT 43
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: PUSH
6956: LD_INT 24
6958: PUSH
6959: LD_INT 3
6961: PUSH
6962: LD_INT 3
6964: PUSH
6965: LD_INT 46
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: PUSH
6974: LD_INT 22
6976: PUSH
6977: LD_INT 3
6979: PUSH
6980: LD_INT 3
6982: PUSH
6983: LD_INT 45
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: LIST
6990: LIST
6991: PUSH
6992: LD_INT 22
6994: PUSH
6995: LD_INT 3
6997: PUSH
6998: LD_INT 3
7000: PUSH
7001: LD_INT 43
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: PUSH
7010: LD_INT 24
7012: PUSH
7013: LD_INT 3
7015: PUSH
7016: LD_INT 3
7018: PUSH
7019: LD_INT 46
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: PUSH
7028: LD_INT 22
7030: PUSH
7031: LD_INT 3
7033: PUSH
7034: LD_INT 3
7036: PUSH
7037: LD_INT 45
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7056: LD_VAR 0 2
7060: PPUSH
7061: LD_VAR 0 3
7065: PPUSH
7066: CALL 76512 0 2
// end ; end ;
7070: GO 7073
7072: POP
// repeat wait ( 0 0$1 ) ;
7073: LD_INT 35
7075: PPUSH
7076: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
7080: LD_VAR 0 2
7084: PPUSH
7085: CALL 76860 0 1
7089: PUSH
7090: LD_INT 0
7092: EQUAL
7093: IFFALSE 7073
// wait ( 0 0$30 ) ;
7095: LD_INT 1050
7097: PPUSH
7098: CALL_OW 67
// _target := [ [ 86 , 77 ] , [ 63 , 38 ] ] ;
7102: LD_ADDR_VAR 0 5
7106: PUSH
7107: LD_INT 86
7109: PUSH
7110: LD_INT 77
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 63
7119: PUSH
7120: LD_INT 38
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
7131: LD_ADDR_VAR 0 4
7135: PUSH
7136: LD_INT 0
7138: PUSH
7139: LD_INT 0
7141: PUSH
7142: LD_INT 0
7144: PUSH
7145: LD_INT 1
7147: PUSH
7148: LD_INT 0
7150: PUSH
7151: LD_INT 0
7153: PUSH
7154: LD_INT 0
7156: PUSH
7157: LD_INT 0
7159: PUSH
7160: LD_INT 1
7162: PUSH
7163: LD_INT 0
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
7178: LD_ADDR_VAR 0 6
7182: PUSH
7183: LD_EXP 71
7187: PUSH
7188: LD_VAR 0 2
7192: ARRAY
7193: PUSH
7194: LD_EXP 74
7198: PUSH
7199: LD_VAR 0 2
7203: ARRAY
7204: DIFF
7205: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
7206: LD_ADDR_EXP 71
7210: PUSH
7211: LD_EXP 71
7215: PPUSH
7216: LD_VAR 0 2
7220: PPUSH
7221: LD_EXP 71
7225: PUSH
7226: LD_VAR 0 2
7230: ARRAY
7231: PUSH
7232: LD_VAR 0 6
7236: DIFF
7237: PPUSH
7238: CALL_OW 1
7242: ST_TO_ADDR
// if not attackers then
7243: LD_VAR 0 6
7247: NOT
7248: IFFALSE 7252
// continue ;
7250: GO 6482
// repeat wait ( 0 0$1 ) ;
7252: LD_INT 35
7254: PPUSH
7255: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
7259: LD_VAR 0 6
7263: PPUSH
7264: LD_INT 60
7266: PUSH
7267: EMPTY
7268: LIST
7269: PPUSH
7270: CALL_OW 72
7274: NOT
7275: IFFALSE 7252
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
7277: LD_VAR 0 2
7281: PPUSH
7282: LD_VAR 0 6
7286: PPUSH
7287: LD_VAR 0 5
7291: PPUSH
7292: LD_VAR 0 4
7296: PPUSH
7297: CALL 76697 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
7301: LD_EXP 52
7305: PUSH
7306: LD_VAR 0 2
7310: ARRAY
7311: PPUSH
7312: LD_INT 50
7314: PUSH
7315: EMPTY
7316: LIST
7317: PPUSH
7318: CALL_OW 72
7322: NOT
7323: IFFALSE 6482
// end ;
7325: PPOPN 6
7327: END
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
7328: LD_INT 22
7330: PUSH
7331: LD_INT 3
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: PUSH
7338: LD_INT 30
7340: PUSH
7341: LD_INT 3
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: PPUSH
7352: CALL_OW 69
7356: IFFALSE 8253
7358: GO 7360
7360: DISABLE
7361: LD_INT 0
7363: PPUSH
7364: PPUSH
7365: PPUSH
7366: PPUSH
7367: PPUSH
7368: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
7369: LD_INT 6300
7371: PUSH
7372: LD_INT 4200
7374: PUSH
7375: LD_INT 2100
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: LIST
7382: PUSH
7383: LD_OWVAR 67
7387: ARRAY
7388: PPUSH
7389: CALL_OW 67
// base := 1 ;
7393: LD_ADDR_VAR 0 2
7397: PUSH
7398: LD_INT 1
7400: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
7401: LD_INT 22
7403: PUSH
7404: LD_INT 3
7406: PUSH
7407: EMPTY
7408: LIST
7409: LIST
7410: PUSH
7411: LD_INT 30
7413: PUSH
7414: LD_INT 3
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PPUSH
7425: CALL_OW 69
7429: NOT
7430: IFFALSE 7434
// continue ;
7432: GO 7369
// case Rand ( 1 , 3 ) of 1 :
7434: LD_INT 1
7436: PPUSH
7437: LD_INT 3
7439: PPUSH
7440: CALL_OW 12
7444: PUSH
7445: LD_INT 1
7447: DOUBLE
7448: EQUAL
7449: IFTRUE 7453
7451: GO 7629
7453: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7454: LD_ADDR_VAR 0 3
7458: PUSH
7459: LD_INT 22
7461: PUSH
7462: LD_INT 1
7464: PUSH
7465: LD_INT 3
7467: PUSH
7468: LD_INT 43
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: PUSH
7477: LD_INT 24
7479: PUSH
7480: LD_INT 1
7482: PUSH
7483: LD_INT 3
7485: PUSH
7486: LD_INT 46
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: PUSH
7495: LD_INT 24
7497: PUSH
7498: LD_INT 1
7500: PUSH
7501: LD_INT 3
7503: PUSH
7504: LD_INT 43
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: PUSH
7513: LD_INT 24
7515: PUSH
7516: LD_INT 1
7518: PUSH
7519: LD_INT 3
7521: PUSH
7522: LD_INT 46
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: PUSH
7531: LD_INT 22
7533: PUSH
7534: LD_INT 1
7536: PUSH
7537: LD_INT 3
7539: PUSH
7540: LD_INT 45
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: PUSH
7549: LD_INT 22
7551: PUSH
7552: LD_INT 1
7554: PUSH
7555: LD_INT 3
7557: PUSH
7558: LD_INT 43
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: PUSH
7567: LD_INT 24
7569: PUSH
7570: LD_INT 1
7572: PUSH
7573: LD_INT 3
7575: PUSH
7576: LD_INT 46
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: PUSH
7585: LD_INT 22
7587: PUSH
7588: LD_INT 1
7590: PUSH
7591: LD_INT 3
7593: PUSH
7594: LD_INT 45
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7613: LD_VAR 0 2
7617: PPUSH
7618: LD_VAR 0 3
7622: PPUSH
7623: CALL 76512 0 2
// end ; 2 :
7627: GO 7998
7629: LD_INT 2
7631: DOUBLE
7632: EQUAL
7633: IFTRUE 7637
7635: GO 7813
7637: POP
// begin tmp := [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7638: LD_ADDR_VAR 0 3
7642: PUSH
7643: LD_INT 24
7645: PUSH
7646: LD_INT 1
7648: PUSH
7649: LD_INT 3
7651: PUSH
7652: LD_INT 43
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: PUSH
7661: LD_INT 24
7663: PUSH
7664: LD_INT 1
7666: PUSH
7667: LD_INT 3
7669: PUSH
7670: LD_INT 46
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: PUSH
7679: LD_INT 24
7681: PUSH
7682: LD_INT 1
7684: PUSH
7685: LD_INT 3
7687: PUSH
7688: LD_INT 43
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: PUSH
7697: LD_INT 24
7699: PUSH
7700: LD_INT 1
7702: PUSH
7703: LD_INT 3
7705: PUSH
7706: LD_INT 46
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: PUSH
7715: LD_INT 22
7717: PUSH
7718: LD_INT 1
7720: PUSH
7721: LD_INT 3
7723: PUSH
7724: LD_INT 45
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: PUSH
7733: LD_INT 22
7735: PUSH
7736: LD_INT 1
7738: PUSH
7739: LD_INT 3
7741: PUSH
7742: LD_INT 45
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: PUSH
7751: LD_INT 22
7753: PUSH
7754: LD_INT 1
7756: PUSH
7757: LD_INT 3
7759: PUSH
7760: LD_INT 45
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 22
7771: PUSH
7772: LD_INT 1
7774: PUSH
7775: LD_INT 3
7777: PUSH
7778: LD_INT 45
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: LIST
7794: LIST
7795: LIST
7796: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7797: LD_VAR 0 2
7801: PPUSH
7802: LD_VAR 0 3
7806: PPUSH
7807: CALL 76512 0 2
// end ; 3 :
7811: GO 7998
7813: LD_INT 3
7815: DOUBLE
7816: EQUAL
7817: IFTRUE 7821
7819: GO 7997
7821: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
7822: LD_ADDR_VAR 0 3
7826: PUSH
7827: LD_INT 22
7829: PUSH
7830: LD_INT 1
7832: PUSH
7833: LD_INT 3
7835: PUSH
7836: LD_INT 43
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 24
7847: PUSH
7848: LD_INT 1
7850: PUSH
7851: LD_INT 3
7853: PUSH
7854: LD_INT 46
7856: PUSH
7857: EMPTY
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: PUSH
7863: LD_INT 22
7865: PUSH
7866: LD_INT 1
7868: PUSH
7869: LD_INT 3
7871: PUSH
7872: LD_INT 43
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: PUSH
7881: LD_INT 24
7883: PUSH
7884: LD_INT 1
7886: PUSH
7887: LD_INT 3
7889: PUSH
7890: LD_INT 46
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: PUSH
7899: LD_INT 22
7901: PUSH
7902: LD_INT 1
7904: PUSH
7905: LD_INT 3
7907: PUSH
7908: LD_INT 45
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: PUSH
7917: LD_INT 22
7919: PUSH
7920: LD_INT 1
7922: PUSH
7923: LD_INT 3
7925: PUSH
7926: LD_INT 43
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: PUSH
7935: LD_INT 24
7937: PUSH
7938: LD_INT 1
7940: PUSH
7941: LD_INT 3
7943: PUSH
7944: LD_INT 46
7946: PUSH
7947: EMPTY
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: PUSH
7953: LD_INT 22
7955: PUSH
7956: LD_INT 1
7958: PUSH
7959: LD_INT 3
7961: PUSH
7962: LD_INT 45
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7981: LD_VAR 0 2
7985: PPUSH
7986: LD_VAR 0 3
7990: PPUSH
7991: CALL 76512 0 2
// end ; end ;
7995: GO 7998
7997: POP
// repeat wait ( 0 0$1 ) ;
7998: LD_INT 35
8000: PPUSH
8001: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 8 ;
8005: LD_VAR 0 2
8009: PPUSH
8010: LD_INT 1
8012: PPUSH
8013: CALL 77867 0 2
8017: PUSH
8018: LD_INT 8
8020: GREATEREQUAL
8021: IFFALSE 7998
// wait ( 0 0$30 ) ;
8023: LD_INT 1050
8025: PPUSH
8026: CALL_OW 67
// _target := [ [ 144 , 65 ] , [ 63 , 38 ] ] ;
8030: LD_ADDR_VAR 0 5
8034: PUSH
8035: LD_INT 144
8037: PUSH
8038: LD_INT 65
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: PUSH
8045: LD_INT 63
8047: PUSH
8048: LD_INT 38
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
8059: LD_ADDR_VAR 0 4
8063: PUSH
8064: LD_INT 0
8066: PUSH
8067: LD_INT 0
8069: PUSH
8070: LD_INT 0
8072: PUSH
8073: LD_INT 1
8075: PUSH
8076: LD_INT 0
8078: PUSH
8079: LD_INT 0
8081: PUSH
8082: LD_INT 0
8084: PUSH
8085: LD_INT 0
8087: PUSH
8088: LD_INT 1
8090: PUSH
8091: LD_INT 0
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
8106: LD_ADDR_VAR 0 6
8110: PUSH
8111: LD_EXP 71
8115: PUSH
8116: LD_VAR 0 2
8120: ARRAY
8121: PUSH
8122: LD_EXP 74
8126: PUSH
8127: LD_VAR 0 2
8131: ARRAY
8132: DIFF
8133: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
8134: LD_ADDR_EXP 71
8138: PUSH
8139: LD_EXP 71
8143: PPUSH
8144: LD_VAR 0 2
8148: PPUSH
8149: LD_EXP 71
8153: PUSH
8154: LD_VAR 0 2
8158: ARRAY
8159: PUSH
8160: LD_VAR 0 6
8164: DIFF
8165: PPUSH
8166: CALL_OW 1
8170: ST_TO_ADDR
// if not attackers then
8171: LD_VAR 0 6
8175: NOT
8176: IFFALSE 8180
// continue ;
8178: GO 7369
// repeat wait ( 0 0$1 ) ;
8180: LD_INT 35
8182: PPUSH
8183: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
8187: LD_VAR 0 6
8191: PPUSH
8192: LD_INT 60
8194: PUSH
8195: EMPTY
8196: LIST
8197: PPUSH
8198: CALL_OW 72
8202: NOT
8203: IFFALSE 8180
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
8205: LD_VAR 0 2
8209: PPUSH
8210: LD_VAR 0 6
8214: PPUSH
8215: LD_VAR 0 5
8219: PPUSH
8220: LD_VAR 0 4
8224: PPUSH
8225: CALL 76697 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
8229: LD_EXP 52
8233: PUSH
8234: LD_VAR 0 2
8238: ARRAY
8239: PPUSH
8240: LD_INT 50
8242: PUSH
8243: EMPTY
8244: LIST
8245: PPUSH
8246: CALL_OW 72
8250: NOT
8251: IFFALSE 7369
// end ;
8253: PPOPN 6
8255: END
// export RussiansDefeated ; every 0 0$1 trigger FirstAssaultRepelled and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
8256: LD_EXP 3
8260: PUSH
8261: LD_INT 22
8263: PUSH
8264: LD_INT 3
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PUSH
8271: LD_INT 21
8273: PUSH
8274: LD_INT 1
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: PPUSH
8285: CALL_OW 69
8289: PUSH
8290: LD_INT 0
8292: EQUAL
8293: AND
8294: IFFALSE 8307
8296: GO 8298
8298: DISABLE
// begin RussiansDefeated := true ;
8299: LD_ADDR_EXP 42
8303: PUSH
8304: LD_INT 1
8306: ST_TO_ADDR
// end ;
8307: END
// every 0 0$1 trigger FirstAssaultRepelled and not JMM_Arrived do var i , un , filter , soldiers , bazookas , vehs , vehicle , medics , squad , attackers , _target , flags ;
8308: LD_EXP 3
8312: PUSH
8313: LD_EXP 5
8317: NOT
8318: AND
8319: IFFALSE 9292
8321: GO 8323
8323: DISABLE
8324: LD_INT 0
8326: PPUSH
8327: PPUSH
8328: PPUSH
8329: PPUSH
8330: PPUSH
8331: PPUSH
8332: PPUSH
8333: PPUSH
8334: PPUSH
8335: PPUSH
8336: PPUSH
8337: PPUSH
// begin wait ( [ Rand ( 5 5$00 , 6 6$30 ) , Rand ( 4 4$30 , 5 5$30 ) , Rand ( 4 4$00 , 5 5$00 ) ] [ Difficulty ] ) ;
8338: LD_INT 10500
8340: PPUSH
8341: LD_INT 13650
8343: PPUSH
8344: CALL_OW 12
8348: PUSH
8349: LD_INT 9450
8351: PPUSH
8352: LD_INT 11550
8354: PPUSH
8355: CALL_OW 12
8359: PUSH
8360: LD_INT 8400
8362: PPUSH
8363: LD_INT 10500
8365: PPUSH
8366: CALL_OW 12
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: LIST
8375: PUSH
8376: LD_OWVAR 67
8380: ARRAY
8381: PPUSH
8382: CALL_OW 67
// filter := [ ] ;
8386: LD_ADDR_VAR 0 3
8390: PUSH
8391: EMPTY
8392: ST_TO_ADDR
// soldiers := [ Rand ( 2 , 3 ) , Rand ( 3 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
8393: LD_ADDR_VAR 0 4
8397: PUSH
8398: LD_INT 2
8400: PPUSH
8401: LD_INT 3
8403: PPUSH
8404: CALL_OW 12
8408: PUSH
8409: LD_INT 3
8411: PPUSH
8412: LD_INT 4
8414: PPUSH
8415: CALL_OW 12
8419: PUSH
8420: LD_INT 3
8422: PPUSH
8423: LD_INT 5
8425: PPUSH
8426: CALL_OW 12
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: LIST
8435: PUSH
8436: LD_OWVAR 67
8440: ARRAY
8441: ST_TO_ADDR
// bazookas := [ 1 , Rand ( 1 , 2 ) , Rand ( 2 , 3 ) ] [ Difficulty ] ;
8442: LD_ADDR_VAR 0 5
8446: PUSH
8447: LD_INT 1
8449: PUSH
8450: LD_INT 1
8452: PPUSH
8453: LD_INT 2
8455: PPUSH
8456: CALL_OW 12
8460: PUSH
8461: LD_INT 2
8463: PPUSH
8464: LD_INT 3
8466: PPUSH
8467: CALL_OW 12
8471: PUSH
8472: EMPTY
8473: LIST
8474: LIST
8475: LIST
8476: PUSH
8477: LD_OWVAR 67
8481: ARRAY
8482: ST_TO_ADDR
// vehs := [ Rand ( 2 , 3 ) , Rand ( 2 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
8483: LD_ADDR_VAR 0 6
8487: PUSH
8488: LD_INT 2
8490: PPUSH
8491: LD_INT 3
8493: PPUSH
8494: CALL_OW 12
8498: PUSH
8499: LD_INT 2
8501: PPUSH
8502: LD_INT 4
8504: PPUSH
8505: CALL_OW 12
8509: PUSH
8510: LD_INT 3
8512: PPUSH
8513: LD_INT 5
8515: PPUSH
8516: CALL_OW 12
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: LIST
8525: PUSH
8526: LD_OWVAR 67
8530: ARRAY
8531: ST_TO_ADDR
// medics := [ 1 , 2 , 2 ] [ Difficulty ] ;
8532: LD_ADDR_VAR 0 8
8536: PUSH
8537: LD_INT 1
8539: PUSH
8540: LD_INT 2
8542: PUSH
8543: LD_INT 2
8545: PUSH
8546: EMPTY
8547: LIST
8548: LIST
8549: LIST
8550: PUSH
8551: LD_OWVAR 67
8555: ARRAY
8556: ST_TO_ADDR
// uc_side := 3 ;
8557: LD_ADDR_OWVAR 20
8561: PUSH
8562: LD_INT 3
8564: ST_TO_ADDR
// uc_nation := nation_russian ;
8565: LD_ADDR_OWVAR 21
8569: PUSH
8570: LD_INT 3
8572: ST_TO_ADDR
// for i = 1 to soldiers do
8573: LD_ADDR_VAR 0 1
8577: PUSH
8578: DOUBLE
8579: LD_INT 1
8581: DEC
8582: ST_TO_ADDR
8583: LD_VAR 0 4
8587: PUSH
8588: FOR_TO
8589: IFFALSE 8631
// begin PrepareSoldier ( 0 , game_eskill ) ;
8591: LD_INT 0
8593: PPUSH
8594: LD_EXP 39
8598: PPUSH
8599: CALL_OW 381
// un := CreateHuman ;
8603: LD_ADDR_VAR 0 2
8607: PUSH
8608: CALL_OW 44
8612: ST_TO_ADDR
// filter := filter ^ un ;
8613: LD_ADDR_VAR 0 3
8617: PUSH
8618: LD_VAR 0 3
8622: PUSH
8623: LD_VAR 0 2
8627: ADD
8628: ST_TO_ADDR
// end ;
8629: GO 8588
8631: POP
8632: POP
// for i = 1 to bazookas do
8633: LD_ADDR_VAR 0 1
8637: PUSH
8638: DOUBLE
8639: LD_INT 1
8641: DEC
8642: ST_TO_ADDR
8643: LD_VAR 0 5
8647: PUSH
8648: FOR_TO
8649: IFFALSE 8699
// begin PrepareSoldier ( 0 , game_eskill ) ;
8651: LD_INT 0
8653: PPUSH
8654: LD_EXP 39
8658: PPUSH
8659: CALL_OW 381
// hc_class := class_bazooker ;
8663: LD_ADDR_OWVAR 28
8667: PUSH
8668: LD_INT 9
8670: ST_TO_ADDR
// un := CreateHuman ;
8671: LD_ADDR_VAR 0 2
8675: PUSH
8676: CALL_OW 44
8680: ST_TO_ADDR
// filter := filter ^ un ;
8681: LD_ADDR_VAR 0 3
8685: PUSH
8686: LD_VAR 0 3
8690: PUSH
8691: LD_VAR 0 2
8695: ADD
8696: ST_TO_ADDR
// end ;
8697: GO 8648
8699: POP
8700: POP
// for i = 1 to medics do
8701: LD_ADDR_VAR 0 1
8705: PUSH
8706: DOUBLE
8707: LD_INT 1
8709: DEC
8710: ST_TO_ADDR
8711: LD_VAR 0 8
8715: PUSH
8716: FOR_TO
8717: IFFALSE 8759
// begin PrepareScientist ( 0 , game_eskill ) ;
8719: LD_INT 0
8721: PPUSH
8722: LD_EXP 39
8726: PPUSH
8727: CALL_OW 384
// un := CreateHuman ;
8731: LD_ADDR_VAR 0 2
8735: PUSH
8736: CALL_OW 44
8740: ST_TO_ADDR
// filter := filter ^ un ;
8741: LD_ADDR_VAR 0 3
8745: PUSH
8746: LD_VAR 0 3
8750: PUSH
8751: LD_VAR 0 2
8755: ADD
8756: ST_TO_ADDR
// end ;
8757: GO 8716
8759: POP
8760: POP
// for i = 1 to vehs do
8761: LD_ADDR_VAR 0 1
8765: PUSH
8766: DOUBLE
8767: LD_INT 1
8769: DEC
8770: ST_TO_ADDR
8771: LD_VAR 0 6
8775: PUSH
8776: FOR_TO
8777: IFFALSE 8969
// begin case Rand ( 1 , 5 ) of 1 :
8779: LD_INT 1
8781: PPUSH
8782: LD_INT 5
8784: PPUSH
8785: CALL_OW 12
8789: PUSH
8790: LD_INT 1
8792: DOUBLE
8793: EQUAL
8794: IFTRUE 8798
8796: GO 8820
8798: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 2 :
8799: LD_INT 22
8801: PPUSH
8802: LD_INT 3
8804: PPUSH
8805: LD_INT 3
8807: PPUSH
8808: LD_INT 43
8810: PPUSH
8811: LD_INT 100
8813: PPUSH
8814: CALL 17291 0 5
8818: GO 8941
8820: LD_INT 2
8822: DOUBLE
8823: EQUAL
8824: IFTRUE 8828
8826: GO 8850
8828: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gun , 100 ) ; 3 :
8829: LD_INT 22
8831: PPUSH
8832: LD_INT 3
8834: PPUSH
8835: LD_INT 3
8837: PPUSH
8838: LD_INT 44
8840: PPUSH
8841: LD_INT 100
8843: PPUSH
8844: CALL 17291 0 5
8848: GO 8941
8850: LD_INT 3
8852: DOUBLE
8853: EQUAL
8854: IFTRUE 8858
8856: GO 8880
8858: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher , 100 ) ; 4 :
8859: LD_INT 22
8861: PPUSH
8862: LD_INT 3
8864: PPUSH
8865: LD_INT 3
8867: PPUSH
8868: LD_INT 45
8870: PPUSH
8871: LD_INT 100
8873: PPUSH
8874: CALL 17291 0 5
8878: GO 8941
8880: LD_INT 4
8882: DOUBLE
8883: EQUAL
8884: IFTRUE 8888
8886: GO 8910
8888: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 5 :
8889: LD_INT 24
8891: PPUSH
8892: LD_INT 3
8894: PPUSH
8895: LD_INT 3
8897: PPUSH
8898: LD_INT 43
8900: PPUSH
8901: LD_INT 100
8903: PPUSH
8904: CALL 17291 0 5
8908: GO 8941
8910: LD_INT 5
8912: DOUBLE
8913: EQUAL
8914: IFTRUE 8918
8916: GO 8940
8918: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun , 100 ) ; end ;
8919: LD_INT 24
8921: PPUSH
8922: LD_INT 3
8924: PPUSH
8925: LD_INT 3
8927: PPUSH
8928: LD_INT 46
8930: PPUSH
8931: LD_INT 100
8933: PPUSH
8934: CALL 17291 0 5
8938: GO 8941
8940: POP
// vehicle := CreateVehicle ;
8941: LD_ADDR_VAR 0 7
8945: PUSH
8946: CALL_OW 45
8950: ST_TO_ADDR
// filter := filter ^ vehicle ;
8951: LD_ADDR_VAR 0 3
8955: PUSH
8956: LD_VAR 0 3
8960: PUSH
8961: LD_VAR 0 7
8965: ADD
8966: ST_TO_ADDR
// end ;
8967: GO 8776
8969: POP
8970: POP
// for i = 1 to filter do
8971: LD_ADDR_VAR 0 1
8975: PUSH
8976: DOUBLE
8977: LD_INT 1
8979: DEC
8980: ST_TO_ADDR
8981: LD_VAR 0 3
8985: PUSH
8986: FOR_TO
8987: IFFALSE 9012
// PlaceUnitArea ( filter [ i ] , RUAttackSpawn1 , false ) ;
8989: LD_VAR 0 3
8993: PUSH
8994: LD_VAR 0 1
8998: ARRAY
8999: PPUSH
9000: LD_INT 14
9002: PPUSH
9003: LD_INT 0
9005: PPUSH
9006: CALL_OW 49
9010: GO 8986
9012: POP
9013: POP
// case Rand ( 1 , 3 ) of 1 :
9014: LD_INT 1
9016: PPUSH
9017: LD_INT 3
9019: PPUSH
9020: CALL_OW 12
9024: PUSH
9025: LD_INT 1
9027: DOUBLE
9028: EQUAL
9029: IFTRUE 9033
9031: GO 9087
9033: POP
// _target := [ [ 165 , 114 ] , [ 104 , 108 ] , [ 86 , 77 ] , [ 63 , 38 ] ] ; 2 :
9034: LD_ADDR_VAR 0 11
9038: PUSH
9039: LD_INT 165
9041: PUSH
9042: LD_INT 114
9044: PUSH
9045: EMPTY
9046: LIST
9047: LIST
9048: PUSH
9049: LD_INT 104
9051: PUSH
9052: LD_INT 108
9054: PUSH
9055: EMPTY
9056: LIST
9057: LIST
9058: PUSH
9059: LD_INT 86
9061: PUSH
9062: LD_INT 77
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: PUSH
9069: LD_INT 63
9071: PUSH
9072: LD_INT 38
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PUSH
9079: EMPTY
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: ST_TO_ADDR
9085: GO 9212
9087: LD_INT 2
9089: DOUBLE
9090: EQUAL
9091: IFTRUE 9095
9093: GO 9149
9095: POP
// _target := [ [ 165 , 114 ] , [ 146 , 71 ] , [ 112 , 41 ] , [ 63 , 38 ] ] ; 3 :
9096: LD_ADDR_VAR 0 11
9100: PUSH
9101: LD_INT 165
9103: PUSH
9104: LD_INT 114
9106: PUSH
9107: EMPTY
9108: LIST
9109: LIST
9110: PUSH
9111: LD_INT 146
9113: PUSH
9114: LD_INT 71
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: PUSH
9121: LD_INT 112
9123: PUSH
9124: LD_INT 41
9126: PUSH
9127: EMPTY
9128: LIST
9129: LIST
9130: PUSH
9131: LD_INT 63
9133: PUSH
9134: LD_INT 38
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: ST_TO_ADDR
9147: GO 9212
9149: LD_INT 3
9151: DOUBLE
9152: EQUAL
9153: IFTRUE 9157
9155: GO 9211
9157: POP
// _target := [ [ 165 , 114 ] , [ 63 , 99 ] , [ 55 , 77 ] , [ 63 , 38 ] ] ; end ;
9158: LD_ADDR_VAR 0 11
9162: PUSH
9163: LD_INT 165
9165: PUSH
9166: LD_INT 114
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: PUSH
9173: LD_INT 63
9175: PUSH
9176: LD_INT 99
9178: PUSH
9179: EMPTY
9180: LIST
9181: LIST
9182: PUSH
9183: LD_INT 55
9185: PUSH
9186: LD_INT 77
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: PUSH
9193: LD_INT 63
9195: PUSH
9196: LD_INT 38
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: ST_TO_ADDR
9209: GO 9212
9211: POP
// attackers := filter ;
9212: LD_ADDR_VAR 0 10
9216: PUSH
9217: LD_VAR 0 3
9221: ST_TO_ADDR
// flags := [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ;
9222: LD_ADDR_VAR 0 12
9226: PUSH
9227: LD_INT 0
9229: PUSH
9230: LD_INT 1
9232: PUSH
9233: LD_INT 0
9235: PUSH
9236: LD_INT 1
9238: PUSH
9239: LD_INT 1
9241: PUSH
9242: LD_INT 0
9244: PUSH
9245: LD_INT 0
9247: PUSH
9248: LD_INT 0
9250: PUSH
9251: LD_INT 1
9253: PUSH
9254: LD_INT 1
9256: PUSH
9257: EMPTY
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: ST_TO_ADDR
// MC_PrepareAttack ( 1 , attackers , _target , flags ) ;
9269: LD_INT 1
9271: PPUSH
9272: LD_VAR 0 10
9276: PPUSH
9277: LD_VAR 0 11
9281: PPUSH
9282: LD_VAR 0 12
9286: PPUSH
9287: CALL 76697 0 4
// enable ;
9291: ENABLE
// end ;
9292: PPOPN 12
9294: END
// every 0 0$1 do var i , tmp ;
9295: GO 9297
9297: DISABLE
9298: LD_INT 0
9300: PPUSH
9301: PPUSH
// begin enable ;
9302: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
9303: LD_ADDR_VAR 0 2
9307: PUSH
9308: LD_INT 3
9310: PUSH
9311: LD_INT 22
9313: PUSH
9314: LD_INT 1
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: PUSH
9325: LD_INT 32
9327: PUSH
9328: LD_INT 1
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PPUSH
9339: CALL_OW 69
9343: ST_TO_ADDR
// if tmp then
9344: LD_VAR 0 2
9348: IFFALSE 9394
// for i in tmp do
9350: LD_ADDR_VAR 0 1
9354: PUSH
9355: LD_VAR 0 2
9359: PUSH
9360: FOR_IN
9361: IFFALSE 9392
// if GetFuel ( i ) < 3 then
9363: LD_VAR 0 1
9367: PPUSH
9368: CALL_OW 261
9372: PUSH
9373: LD_INT 3
9375: LESS
9376: IFFALSE 9390
// SetFuel ( i , 3 ) ;
9378: LD_VAR 0 1
9382: PPUSH
9383: LD_INT 3
9385: PPUSH
9386: CALL_OW 240
9390: GO 9360
9392: POP
9393: POP
// end ; end_of_file
9394: PPOPN 2
9396: END
// export Losses ; on UnitDestroyed ( un ) do begin if un = Brighton then
9397: LD_VAR 0 1
9401: PUSH
9402: LD_EXP 8
9406: EQUAL
9407: IFFALSE 9423
// begin wait ( 0 0$1 ) ;
9409: LD_INT 35
9411: PPUSH
9412: CALL_OW 67
// YouLost ( Brighton ) ;
9416: LD_STRING Brighton
9418: PPUSH
9419: CALL_OW 104
// end ; if un = JMM then
9423: LD_VAR 0 1
9427: PUSH
9428: LD_EXP 36
9432: EQUAL
9433: IFFALSE 9449
// begin wait ( 0 0$1 ) ;
9435: LD_INT 35
9437: PPUSH
9438: CALL_OW 67
// YouLost ( JMM ) ;
9442: LD_STRING JMM
9444: PPUSH
9445: CALL_OW 104
// end ; if un = Megan then
9449: LD_VAR 0 1
9453: PUSH
9454: LD_EXP 10
9458: EQUAL
9459: IFFALSE 9473
// begin Say ( Brighton , DBrighton-MeganDeath ) ;
9461: LD_EXP 8
9465: PPUSH
9466: LD_STRING DBrighton-MeganDeath
9468: PPUSH
9469: CALL_OW 88
// end ; if un = Palmer then
9473: LD_VAR 0 1
9477: PUSH
9478: LD_EXP 9
9482: EQUAL
9483: IFFALSE 9497
// begin Say ( Brighton , DBrighton-PalmerDeath ) ;
9485: LD_EXP 8
9489: PPUSH
9490: LD_STRING DBrighton-PalmerDeath
9492: PPUSH
9493: CALL_OW 88
// end ; if un = Burlak then
9497: LD_VAR 0 1
9501: PUSH
9502: LD_EXP 18
9506: EQUAL
9507: IFFALSE 9539
// begin if JMM_Arrived then
9509: LD_EXP 5
9513: IFFALSE 9527
// Say ( JMM , DJMM-BurlakDead ) ;
9515: LD_EXP 36
9519: PPUSH
9520: LD_STRING DJMM-BurlakDead
9522: PPUSH
9523: CALL_OW 88
// Say ( Palmer , DSol-BurlakDead ) ;
9527: LD_EXP 9
9531: PPUSH
9532: LD_STRING DSol-BurlakDead
9534: PPUSH
9535: CALL_OW 88
// end ; if un = BetaA or un = BetaB then
9539: LD_VAR 0 1
9543: PUSH
9544: LD_INT 1
9546: EQUAL
9547: PUSH
9548: LD_VAR 0 1
9552: PUSH
9553: LD_INT 3
9555: EQUAL
9556: OR
9557: IFFALSE 9573
// begin wait ( 0 0$1 ) ;
9559: LD_INT 35
9561: PPUSH
9562: CALL_OW 67
// YouLost ( Depot ) ;
9566: LD_STRING Depot
9568: PPUSH
9569: CALL_OW 104
// end ; if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
9573: LD_VAR 0 1
9577: PPUSH
9578: CALL_OW 255
9582: PUSH
9583: LD_INT 1
9585: EQUAL
9586: PUSH
9587: LD_VAR 0 1
9591: PPUSH
9592: CALL_OW 247
9596: PUSH
9597: LD_INT 1
9599: EQUAL
9600: AND
9601: IFFALSE 9617
// Losses := Losses + 1 ;
9603: LD_ADDR_EXP 43
9607: PUSH
9608: LD_EXP 43
9612: PUSH
9613: LD_INT 1
9615: PLUS
9616: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
9617: LD_VAR 0 1
9621: PPUSH
9622: CALL 79841 0 1
// end ;
9626: PPOPN 1
9628: END
// on UnitGoesToRed ( un ) do begin if un = Yashin then
9629: LD_VAR 0 1
9633: PUSH
9634: LD_EXP 12
9638: EQUAL
9639: IFFALSE 9653
// ForceSay ( Yashin , DDeath-Yas-3 ) ;
9641: LD_EXP 12
9645: PPUSH
9646: LD_STRING DDeath-Yas-3
9648: PPUSH
9649: CALL_OW 91
// if un = Popov then
9653: LD_VAR 0 1
9657: PUSH
9658: LD_EXP 13
9662: EQUAL
9663: IFFALSE 9677
// ForceSay ( Popov , DDeath-Pop-3 ) ;
9665: LD_EXP 13
9669: PPUSH
9670: LD_STRING DDeath-Pop-3
9672: PPUSH
9673: CALL_OW 91
// if un = Gaydar then
9677: LD_VAR 0 1
9681: PUSH
9682: LD_EXP 14
9686: EQUAL
9687: IFFALSE 9701
// ForceSay ( Gaydar , DDeath-Gay-3 ) ;
9689: LD_EXP 14
9693: PPUSH
9694: LD_STRING DDeath-Gay-3
9696: PPUSH
9697: CALL_OW 91
// if un = Sevi then
9701: LD_VAR 0 1
9705: PUSH
9706: LD_EXP 15
9710: EQUAL
9711: IFFALSE 9725
// ForceSay ( Sevi , DDeath-Vse-3 ) ;
9713: LD_EXP 15
9717: PPUSH
9718: LD_STRING DDeath-Vse-3
9720: PPUSH
9721: CALL_OW 91
// end ;
9725: PPOPN 1
9727: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_laser then
9728: LD_VAR 0 1
9732: PUSH
9733: LD_INT 10
9735: EQUAL
9736: IFFALSE 9774
// begin Say ( Brighton , DBrighton-C1 ) ;
9738: LD_EXP 8
9742: PPUSH
9743: LD_STRING DBrighton-C1
9745: PPUSH
9746: CALL_OW 88
// Say ( Megan , DMegan-C1 ) ;
9750: LD_EXP 10
9754: PPUSH
9755: LD_STRING DMegan-C1
9757: PPUSH
9758: CALL_OW 88
// Say ( Brighton , DBrighton-C2 ) ;
9762: LD_EXP 8
9766: PPUSH
9767: LD_STRING DBrighton-C2
9769: PPUSH
9770: CALL_OW 88
// end ; MCE_ResearchComplete ( tech , lab ) ;
9774: LD_VAR 0 1
9778: PPUSH
9779: LD_VAR 0 2
9783: PPUSH
9784: CALL 79537 0 2
// end ;
9788: PPOPN 2
9790: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
9791: LD_VAR 0 1
9795: PPUSH
9796: LD_VAR 0 2
9800: PPUSH
9801: CALL 81896 0 2
// end ;
9805: PPOPN 2
9807: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
9808: LD_VAR 0 1
9812: PPUSH
9813: CALL 80964 0 1
// end ;
9817: PPOPN 1
9819: END
// export RUFirstDepot ; on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 then
9820: LD_VAR 0 1
9824: PPUSH
9825: CALL_OW 266
9829: PUSH
9830: LD_INT 0
9832: EQUAL
9833: PUSH
9834: LD_VAR 0 1
9838: PPUSH
9839: CALL_OW 255
9843: PUSH
9844: LD_INT 3
9846: EQUAL
9847: AND
9848: IFFALSE 9910
// begin SetResourceType ( GetBase ( b ) , mat_cans , 10000 ) ;
9850: LD_VAR 0 1
9854: PPUSH
9855: CALL_OW 274
9859: PPUSH
9860: LD_INT 1
9862: PPUSH
9863: LD_INT 10000
9865: PPUSH
9866: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
9870: LD_VAR 0 1
9874: PPUSH
9875: CALL_OW 274
9879: PPUSH
9880: LD_INT 2
9882: PPUSH
9883: LD_INT 250
9885: PPUSH
9886: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 100 ) ;
9890: LD_VAR 0 1
9894: PPUSH
9895: CALL_OW 274
9899: PPUSH
9900: LD_INT 3
9902: PPUSH
9903: LD_INT 100
9905: PPUSH
9906: CALL_OW 277
// end ; MCE_BuildingComplete ( b ) ;
9910: LD_VAR 0 1
9914: PPUSH
9915: CALL 81205 0 1
// end ;
9919: PPOPN 1
9921: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
9922: LD_VAR 0 1
9926: PPUSH
9927: LD_VAR 0 2
9931: PPUSH
9932: LD_VAR 0 3
9936: PPUSH
9937: LD_VAR 0 4
9941: PPUSH
9942: LD_VAR 0 5
9946: PPUSH
9947: CALL 79157 0 5
// end ;
9951: PPOPN 5
9953: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
9954: LD_VAR 0 1
9958: PPUSH
9959: LD_VAR 0 2
9963: PPUSH
9964: CALL 78753 0 2
// end ;
9968: PPOPN 2
9970: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
9971: LD_VAR 0 1
9975: PPUSH
9976: LD_VAR 0 2
9980: PPUSH
9981: LD_VAR 0 3
9985: PPUSH
9986: LD_VAR 0 4
9990: PPUSH
9991: CALL 78591 0 4
// end ;
9995: PPOPN 4
9997: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
9998: LD_VAR 0 1
10002: PPUSH
10003: LD_VAR 0 2
10007: PPUSH
10008: LD_VAR 0 3
10012: PPUSH
10013: CALL 78366 0 3
// end ;
10017: PPOPN 3
10019: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
10020: LD_VAR 0 1
10024: PPUSH
10025: LD_VAR 0 2
10029: PPUSH
10030: CALL 78251 0 2
// end ;
10034: PPOPN 2
10036: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
10037: LD_VAR 0 1
10041: PPUSH
10042: LD_VAR 0 2
10046: PPUSH
10047: CALL 82157 0 2
// end ;
10051: PPOPN 2
10053: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin if GetSide ( driver ) = 6 then
10054: LD_VAR 0 1
10058: PPUSH
10059: CALL_OW 255
10063: PUSH
10064: LD_INT 6
10066: EQUAL
10067: IFFALSE 10162
// if AssaultStarted then
10069: LD_EXP 7
10073: IFFALSE 10147
// case Rand ( 1 , 4 ) of 1 .. 3 :
10075: LD_INT 1
10077: PPUSH
10078: LD_INT 4
10080: PPUSH
10081: CALL_OW 12
10085: PUSH
10086: LD_INT 1
10088: DOUBLE
10089: GREATEREQUAL
10090: IFFALSE 10098
10092: LD_INT 3
10094: DOUBLE
10095: LESSEQUAL
10096: IFTRUE 10100
10098: GO 10118
10100: POP
// ComAgressiveMove ( driver , 67 , 37 ) ; 4 :
10101: LD_VAR 0 1
10105: PPUSH
10106: LD_INT 67
10108: PPUSH
10109: LD_INT 37
10111: PPUSH
10112: CALL_OW 114
10116: GO 10145
10118: LD_INT 4
10120: DOUBLE
10121: EQUAL
10122: IFTRUE 10126
10124: GO 10144
10126: POP
// ComMoveXY ( driver , 120 , 131 ) ; end else
10127: LD_VAR 0 1
10131: PPUSH
10132: LD_INT 120
10134: PPUSH
10135: LD_INT 131
10137: PPUSH
10138: CALL_OW 111
10142: GO 10145
10144: POP
10145: GO 10162
// ComMoveXY ( driver , 120 , 131 ) ;
10147: LD_VAR 0 1
10151: PPUSH
10152: LD_INT 120
10154: PPUSH
10155: LD_INT 131
10157: PPUSH
10158: CALL_OW 111
// MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
10162: LD_VAR 0 1
10166: PPUSH
10167: LD_VAR 0 2
10171: PPUSH
10172: LD_VAR 0 3
10176: PPUSH
10177: LD_VAR 0 4
10181: PPUSH
10182: CALL 82373 0 4
// end ;
10186: PPOPN 4
10188: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
10189: LD_VAR 0 1
10193: PPUSH
10194: LD_VAR 0 2
10198: PPUSH
10199: CALL 78060 0 2
// end ; end_of_file
10203: PPOPN 2
10205: END
// every 0 0$1 trigger JMM_Arrived and RussiansDefeated do
10206: LD_EXP 5
10210: PUSH
10211: LD_EXP 42
10215: AND
10216: IFFALSE 10397
10218: GO 10220
10220: DISABLE
// begin wait ( 0 0$2 ) ;
10221: LD_INT 70
10223: PPUSH
10224: CALL_OW 67
// Say ( Brighton , DBrighton-G1 ) ;
10228: LD_EXP 8
10232: PPUSH
10233: LD_STRING DBrighton-G1
10235: PPUSH
10236: CALL_OW 88
// if Losses < 1 then
10240: LD_EXP 43
10244: PUSH
10245: LD_INT 1
10247: LESS
10248: IFFALSE 10262
// AddMedal ( Losses , 1 ) else
10250: LD_STRING Losses
10252: PPUSH
10253: LD_INT 1
10255: PPUSH
10256: CALL_OW 101
10260: GO 10295
// if Losses < 5 then
10262: LD_EXP 43
10266: PUSH
10267: LD_INT 5
10269: LESS
10270: IFFALSE 10284
// AddMedal ( Losses , 2 ) else
10272: LD_STRING Losses
10274: PPUSH
10275: LD_INT 2
10277: PPUSH
10278: CALL_OW 101
10282: GO 10295
// AddMedal ( Losses , - 1 ) ;
10284: LD_STRING Losses
10286: PPUSH
10287: LD_INT 1
10289: NEG
10290: PPUSH
10291: CALL_OW 101
// if LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
10295: LD_EXP 6
10299: PUSH
10300: LD_INT 10
10302: PPUSH
10303: LD_INT 1
10305: PPUSH
10306: CALL_OW 321
10310: PUSH
10311: LD_INT 2
10313: EQUAL
10314: AND
10315: IFFALSE 10329
// AddMedal ( Laser , 1 ) else
10317: LD_STRING Laser
10319: PPUSH
10320: LD_INT 1
10322: PPUSH
10323: CALL_OW 101
10327: GO 10376
// if not LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
10329: LD_EXP 6
10333: NOT
10334: PUSH
10335: LD_INT 10
10337: PPUSH
10338: LD_INT 1
10340: PPUSH
10341: CALL_OW 321
10345: PUSH
10346: LD_INT 2
10348: EQUAL
10349: AND
10350: IFFALSE 10365
// AddMedal ( Laser , - 1 ) else
10352: LD_STRING Laser
10354: PPUSH
10355: LD_INT 1
10357: NEG
10358: PPUSH
10359: CALL_OW 101
10363: GO 10376
// AddMedal ( Laser , - 2 ) ;
10365: LD_STRING Laser
10367: PPUSH
10368: LD_INT 2
10370: NEG
10371: PPUSH
10372: CALL_OW 101
// AddMedal ( med3 , 1 ) ;
10376: LD_STRING med3
10378: PPUSH
10379: LD_INT 1
10381: PPUSH
10382: CALL_OW 101
// GiveMedals ( BaseMain ) ;
10386: LD_STRING BaseMain
10388: PPUSH
10389: CALL_OW 102
// YouWin ;
10393: CALL_OW 103
// end ; end_of_file
10397: END
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
10398: LD_INT 0
10400: PPUSH
10401: PPUSH
// area = ListEnvironmentArea ( area ) ;
10402: LD_ADDR_VAR 0 2
10406: PUSH
10407: LD_VAR 0 2
10411: PPUSH
10412: CALL_OW 353
10416: ST_TO_ADDR
// if bulldozer > 0 then
10417: LD_VAR 0 1
10421: PUSH
10422: LD_INT 0
10424: GREATER
10425: IFFALSE 10536
// for i = area downto 1 do
10427: LD_ADDR_VAR 0 4
10431: PUSH
10432: DOUBLE
10433: LD_VAR 0 2
10437: INC
10438: ST_TO_ADDR
10439: LD_INT 1
10441: PUSH
10442: FOR_DOWNTO
10443: IFFALSE 10534
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
10445: LD_VAR 0 2
10449: PUSH
10450: LD_VAR 0 4
10454: ARRAY
10455: PUSH
10456: LD_INT 1
10458: ARRAY
10459: PPUSH
10460: LD_VAR 0 2
10464: PUSH
10465: LD_VAR 0 4
10469: ARRAY
10470: PUSH
10471: LD_INT 2
10473: ARRAY
10474: PPUSH
10475: CALL_OW 351
10479: IFFALSE 10532
// if not HasTask ( bulldozer ) then
10481: LD_VAR 0 1
10485: PPUSH
10486: CALL_OW 314
10490: NOT
10491: IFFALSE 10532
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
10493: LD_VAR 0 1
10497: PPUSH
10498: LD_VAR 0 2
10502: PUSH
10503: LD_VAR 0 4
10507: ARRAY
10508: PUSH
10509: LD_INT 1
10511: ARRAY
10512: PPUSH
10513: LD_VAR 0 2
10517: PUSH
10518: LD_VAR 0 4
10522: ARRAY
10523: PUSH
10524: LD_INT 2
10526: ARRAY
10527: PPUSH
10528: CALL_OW 171
10532: GO 10442
10534: POP
10535: POP
// end ;
10536: LD_VAR 0 3
10540: RET
// export function ComMeeting ( team , area ) ; var i , tmp ; begin
10541: LD_INT 0
10543: PPUSH
10544: PPUSH
10545: PPUSH
// tmp := AreaToList ( area , 0 ) ;
10546: LD_ADDR_VAR 0 5
10550: PUSH
10551: LD_VAR 0 2
10555: PPUSH
10556: LD_INT 0
10558: PPUSH
10559: CALL_OW 517
10563: ST_TO_ADDR
// for i = 1 to team do
10564: LD_ADDR_VAR 0 4
10568: PUSH
10569: DOUBLE
10570: LD_INT 1
10572: DEC
10573: ST_TO_ADDR
10574: LD_VAR 0 1
10578: PUSH
10579: FOR_TO
10580: IFFALSE 10681
// begin if IsInUnit ( team [ i ] ) then
10582: LD_VAR 0 1
10586: PUSH
10587: LD_VAR 0 4
10591: ARRAY
10592: PPUSH
10593: CALL_OW 310
10597: IFFALSE 10614
// ComExitBuilding ( team [ i ] ) ;
10599: LD_VAR 0 1
10603: PUSH
10604: LD_VAR 0 4
10608: ARRAY
10609: PPUSH
10610: CALL_OW 122
// AddComMoveXY ( team [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
10614: LD_VAR 0 1
10618: PUSH
10619: LD_VAR 0 4
10623: ARRAY
10624: PPUSH
10625: LD_VAR 0 5
10629: PUSH
10630: LD_INT 1
10632: ARRAY
10633: PUSH
10634: LD_VAR 0 4
10638: ARRAY
10639: PPUSH
10640: LD_VAR 0 5
10644: PUSH
10645: LD_INT 2
10647: ARRAY
10648: PUSH
10649: LD_VAR 0 4
10653: ARRAY
10654: PPUSH
10655: CALL_OW 171
// AddComTurnUnit ( team [ i ] , Brighton ) ;
10659: LD_VAR 0 1
10663: PUSH
10664: LD_VAR 0 4
10668: ARRAY
10669: PPUSH
10670: LD_EXP 8
10674: PPUSH
10675: CALL_OW 179
// end ;
10679: GO 10579
10681: POP
10682: POP
// end ; end_of_file
10683: LD_VAR 0 3
10687: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10688: LD_INT 0
10690: PPUSH
10691: PPUSH
// if exist_mode then
10692: LD_VAR 0 2
10696: IFFALSE 10721
// unit := CreateCharacter ( prefix & ident ) else
10698: LD_ADDR_VAR 0 5
10702: PUSH
10703: LD_VAR 0 3
10707: PUSH
10708: LD_VAR 0 1
10712: STR
10713: PPUSH
10714: CALL_OW 34
10718: ST_TO_ADDR
10719: GO 10736
// unit := NewCharacter ( ident ) ;
10721: LD_ADDR_VAR 0 5
10725: PUSH
10726: LD_VAR 0 1
10730: PPUSH
10731: CALL_OW 25
10735: ST_TO_ADDR
// result := unit ;
10736: LD_ADDR_VAR 0 4
10740: PUSH
10741: LD_VAR 0 5
10745: ST_TO_ADDR
// end ;
10746: LD_VAR 0 4
10750: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10751: LD_INT 0
10753: PPUSH
10754: PPUSH
// if not side or not nation then
10755: LD_VAR 0 1
10759: NOT
10760: PUSH
10761: LD_VAR 0 2
10765: NOT
10766: OR
10767: IFFALSE 10771
// exit ;
10769: GO 11407
// case nation of nation_american :
10771: LD_VAR 0 2
10775: PUSH
10776: LD_INT 1
10778: DOUBLE
10779: EQUAL
10780: IFTRUE 10784
10782: GO 10954
10784: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
10785: LD_ADDR_VAR 0 4
10789: PUSH
10790: LD_INT 35
10792: PUSH
10793: LD_INT 45
10795: PUSH
10796: LD_INT 46
10798: PUSH
10799: LD_INT 47
10801: PUSH
10802: LD_INT 1
10804: PUSH
10805: LD_INT 2
10807: PUSH
10808: LD_INT 6
10810: PUSH
10811: LD_INT 15
10813: PUSH
10814: LD_INT 16
10816: PUSH
10817: LD_INT 7
10819: PUSH
10820: LD_INT 12
10822: PUSH
10823: LD_INT 13
10825: PUSH
10826: LD_INT 10
10828: PUSH
10829: LD_INT 14
10831: PUSH
10832: LD_INT 20
10834: PUSH
10835: LD_INT 21
10837: PUSH
10838: LD_INT 22
10840: PUSH
10841: LD_INT 25
10843: PUSH
10844: LD_INT 32
10846: PUSH
10847: LD_INT 27
10849: PUSH
10850: LD_INT 36
10852: PUSH
10853: LD_INT 69
10855: PUSH
10856: LD_INT 39
10858: PUSH
10859: LD_INT 34
10861: PUSH
10862: LD_INT 40
10864: PUSH
10865: LD_INT 48
10867: PUSH
10868: LD_INT 49
10870: PUSH
10871: LD_INT 50
10873: PUSH
10874: LD_INT 51
10876: PUSH
10877: LD_INT 52
10879: PUSH
10880: LD_INT 53
10882: PUSH
10883: LD_INT 54
10885: PUSH
10886: LD_INT 55
10888: PUSH
10889: LD_INT 56
10891: PUSH
10892: LD_INT 57
10894: PUSH
10895: LD_INT 58
10897: PUSH
10898: LD_INT 59
10900: PUSH
10901: LD_INT 60
10903: PUSH
10904: LD_INT 61
10906: PUSH
10907: LD_INT 62
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: ST_TO_ADDR
10952: GO 11331
10954: LD_INT 2
10956: DOUBLE
10957: EQUAL
10958: IFTRUE 10962
10960: GO 11140
10962: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
10963: LD_ADDR_VAR 0 4
10967: PUSH
10968: LD_INT 35
10970: PUSH
10971: LD_INT 45
10973: PUSH
10974: LD_INT 46
10976: PUSH
10977: LD_INT 47
10979: PUSH
10980: LD_INT 70
10982: PUSH
10983: LD_INT 1
10985: PUSH
10986: LD_INT 11
10988: PUSH
10989: LD_INT 3
10991: PUSH
10992: LD_INT 4
10994: PUSH
10995: LD_INT 5
10997: PUSH
10998: LD_INT 6
11000: PUSH
11001: LD_INT 15
11003: PUSH
11004: LD_INT 18
11006: PUSH
11007: LD_INT 7
11009: PUSH
11010: LD_INT 17
11012: PUSH
11013: LD_INT 8
11015: PUSH
11016: LD_INT 20
11018: PUSH
11019: LD_INT 21
11021: PUSH
11022: LD_INT 22
11024: PUSH
11025: LD_INT 72
11027: PUSH
11028: LD_INT 26
11030: PUSH
11031: LD_INT 69
11033: PUSH
11034: LD_INT 39
11036: PUSH
11037: LD_INT 40
11039: PUSH
11040: LD_INT 41
11042: PUSH
11043: LD_INT 42
11045: PUSH
11046: LD_INT 43
11048: PUSH
11049: LD_INT 48
11051: PUSH
11052: LD_INT 49
11054: PUSH
11055: LD_INT 50
11057: PUSH
11058: LD_INT 51
11060: PUSH
11061: LD_INT 52
11063: PUSH
11064: LD_INT 53
11066: PUSH
11067: LD_INT 54
11069: PUSH
11070: LD_INT 55
11072: PUSH
11073: LD_INT 56
11075: PUSH
11076: LD_INT 60
11078: PUSH
11079: LD_INT 61
11081: PUSH
11082: LD_INT 62
11084: PUSH
11085: LD_INT 66
11087: PUSH
11088: LD_INT 67
11090: PUSH
11091: LD_INT 68
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: ST_TO_ADDR
11138: GO 11331
11140: LD_INT 3
11142: DOUBLE
11143: EQUAL
11144: IFTRUE 11148
11146: GO 11330
11148: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
11149: LD_ADDR_VAR 0 4
11153: PUSH
11154: LD_INT 46
11156: PUSH
11157: LD_INT 47
11159: PUSH
11160: LD_INT 1
11162: PUSH
11163: LD_INT 2
11165: PUSH
11166: LD_INT 11
11168: PUSH
11169: LD_INT 9
11171: PUSH
11172: LD_INT 20
11174: PUSH
11175: LD_INT 19
11177: PUSH
11178: LD_INT 21
11180: PUSH
11181: LD_INT 24
11183: PUSH
11184: LD_INT 22
11186: PUSH
11187: LD_INT 25
11189: PUSH
11190: LD_INT 28
11192: PUSH
11193: LD_INT 29
11195: PUSH
11196: LD_INT 30
11198: PUSH
11199: LD_INT 31
11201: PUSH
11202: LD_INT 37
11204: PUSH
11205: LD_INT 38
11207: PUSH
11208: LD_INT 32
11210: PUSH
11211: LD_INT 27
11213: PUSH
11214: LD_INT 33
11216: PUSH
11217: LD_INT 69
11219: PUSH
11220: LD_INT 39
11222: PUSH
11223: LD_INT 34
11225: PUSH
11226: LD_INT 40
11228: PUSH
11229: LD_INT 71
11231: PUSH
11232: LD_INT 23
11234: PUSH
11235: LD_INT 44
11237: PUSH
11238: LD_INT 48
11240: PUSH
11241: LD_INT 49
11243: PUSH
11244: LD_INT 50
11246: PUSH
11247: LD_INT 51
11249: PUSH
11250: LD_INT 52
11252: PUSH
11253: LD_INT 53
11255: PUSH
11256: LD_INT 54
11258: PUSH
11259: LD_INT 55
11261: PUSH
11262: LD_INT 56
11264: PUSH
11265: LD_INT 57
11267: PUSH
11268: LD_INT 58
11270: PUSH
11271: LD_INT 59
11273: PUSH
11274: LD_INT 63
11276: PUSH
11277: LD_INT 64
11279: PUSH
11280: LD_INT 65
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: ST_TO_ADDR
11328: GO 11331
11330: POP
// if state > - 1 and state < 3 then
11331: LD_VAR 0 3
11335: PUSH
11336: LD_INT 1
11338: NEG
11339: GREATER
11340: PUSH
11341: LD_VAR 0 3
11345: PUSH
11346: LD_INT 3
11348: LESS
11349: AND
11350: IFFALSE 11407
// for i in result do
11352: LD_ADDR_VAR 0 5
11356: PUSH
11357: LD_VAR 0 4
11361: PUSH
11362: FOR_IN
11363: IFFALSE 11405
// if GetTech ( i , side ) <> state then
11365: LD_VAR 0 5
11369: PPUSH
11370: LD_VAR 0 1
11374: PPUSH
11375: CALL_OW 321
11379: PUSH
11380: LD_VAR 0 3
11384: NONEQUAL
11385: IFFALSE 11403
// result := result diff i ;
11387: LD_ADDR_VAR 0 4
11391: PUSH
11392: LD_VAR 0 4
11396: PUSH
11397: LD_VAR 0 5
11401: DIFF
11402: ST_TO_ADDR
11403: GO 11362
11405: POP
11406: POP
// end ;
11407: LD_VAR 0 4
11411: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11412: LD_INT 0
11414: PPUSH
11415: PPUSH
11416: PPUSH
// result := true ;
11417: LD_ADDR_VAR 0 3
11421: PUSH
11422: LD_INT 1
11424: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11425: LD_ADDR_VAR 0 5
11429: PUSH
11430: LD_VAR 0 2
11434: PPUSH
11435: CALL_OW 480
11439: ST_TO_ADDR
// if not tmp then
11440: LD_VAR 0 5
11444: NOT
11445: IFFALSE 11449
// exit ;
11447: GO 11498
// for i in tmp do
11449: LD_ADDR_VAR 0 4
11453: PUSH
11454: LD_VAR 0 5
11458: PUSH
11459: FOR_IN
11460: IFFALSE 11496
// if GetTech ( i , side ) <> state_researched then
11462: LD_VAR 0 4
11466: PPUSH
11467: LD_VAR 0 1
11471: PPUSH
11472: CALL_OW 321
11476: PUSH
11477: LD_INT 2
11479: NONEQUAL
11480: IFFALSE 11494
// begin result := false ;
11482: LD_ADDR_VAR 0 3
11486: PUSH
11487: LD_INT 0
11489: ST_TO_ADDR
// exit ;
11490: POP
11491: POP
11492: GO 11498
// end ;
11494: GO 11459
11496: POP
11497: POP
// end ;
11498: LD_VAR 0 3
11502: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11503: LD_INT 0
11505: PPUSH
11506: PPUSH
11507: PPUSH
11508: PPUSH
11509: PPUSH
11510: PPUSH
11511: PPUSH
11512: PPUSH
11513: PPUSH
11514: PPUSH
11515: PPUSH
11516: PPUSH
11517: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11518: LD_VAR 0 1
11522: NOT
11523: PUSH
11524: LD_VAR 0 1
11528: PPUSH
11529: CALL_OW 257
11533: PUSH
11534: LD_INT 9
11536: NONEQUAL
11537: OR
11538: IFFALSE 11542
// exit ;
11540: GO 12115
// side := GetSide ( unit ) ;
11542: LD_ADDR_VAR 0 9
11546: PUSH
11547: LD_VAR 0 1
11551: PPUSH
11552: CALL_OW 255
11556: ST_TO_ADDR
// tech_space := tech_spacanom ;
11557: LD_ADDR_VAR 0 12
11561: PUSH
11562: LD_INT 29
11564: ST_TO_ADDR
// tech_time := tech_taurad ;
11565: LD_ADDR_VAR 0 13
11569: PUSH
11570: LD_INT 28
11572: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11573: LD_ADDR_VAR 0 11
11577: PUSH
11578: LD_VAR 0 1
11582: PPUSH
11583: CALL_OW 310
11587: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11588: LD_VAR 0 11
11592: PPUSH
11593: CALL_OW 247
11597: PUSH
11598: LD_INT 2
11600: EQUAL
11601: IFFALSE 11605
// exit ;
11603: GO 12115
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11605: LD_ADDR_VAR 0 8
11609: PUSH
11610: LD_INT 81
11612: PUSH
11613: LD_VAR 0 9
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PUSH
11622: LD_INT 3
11624: PUSH
11625: LD_INT 21
11627: PUSH
11628: LD_INT 3
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: PPUSH
11643: CALL_OW 69
11647: ST_TO_ADDR
// if not tmp then
11648: LD_VAR 0 8
11652: NOT
11653: IFFALSE 11657
// exit ;
11655: GO 12115
// if in_unit then
11657: LD_VAR 0 11
11661: IFFALSE 11685
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11663: LD_ADDR_VAR 0 10
11667: PUSH
11668: LD_VAR 0 8
11672: PPUSH
11673: LD_VAR 0 11
11677: PPUSH
11678: CALL_OW 74
11682: ST_TO_ADDR
11683: GO 11705
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11685: LD_ADDR_VAR 0 10
11689: PUSH
11690: LD_VAR 0 8
11694: PPUSH
11695: LD_VAR 0 1
11699: PPUSH
11700: CALL_OW 74
11704: ST_TO_ADDR
// if not enemy then
11705: LD_VAR 0 10
11709: NOT
11710: IFFALSE 11714
// exit ;
11712: GO 12115
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11714: LD_VAR 0 11
11718: PUSH
11719: LD_VAR 0 11
11723: PPUSH
11724: LD_VAR 0 10
11728: PPUSH
11729: CALL_OW 296
11733: PUSH
11734: LD_INT 13
11736: GREATER
11737: AND
11738: PUSH
11739: LD_VAR 0 1
11743: PPUSH
11744: LD_VAR 0 10
11748: PPUSH
11749: CALL_OW 296
11753: PUSH
11754: LD_INT 12
11756: GREATER
11757: OR
11758: IFFALSE 11762
// exit ;
11760: GO 12115
// missile := [ 1 ] ;
11762: LD_ADDR_VAR 0 14
11766: PUSH
11767: LD_INT 1
11769: PUSH
11770: EMPTY
11771: LIST
11772: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11773: LD_VAR 0 9
11777: PPUSH
11778: LD_VAR 0 12
11782: PPUSH
11783: CALL_OW 325
11787: IFFALSE 11816
// missile := Insert ( missile , missile + 1 , 2 ) ;
11789: LD_ADDR_VAR 0 14
11793: PUSH
11794: LD_VAR 0 14
11798: PPUSH
11799: LD_VAR 0 14
11803: PUSH
11804: LD_INT 1
11806: PLUS
11807: PPUSH
11808: LD_INT 2
11810: PPUSH
11811: CALL_OW 2
11815: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11816: LD_VAR 0 9
11820: PPUSH
11821: LD_VAR 0 13
11825: PPUSH
11826: CALL_OW 325
11830: PUSH
11831: LD_VAR 0 10
11835: PPUSH
11836: CALL_OW 255
11840: PPUSH
11841: LD_VAR 0 13
11845: PPUSH
11846: CALL_OW 325
11850: NOT
11851: AND
11852: IFFALSE 11881
// missile := Insert ( missile , missile + 1 , 3 ) ;
11854: LD_ADDR_VAR 0 14
11858: PUSH
11859: LD_VAR 0 14
11863: PPUSH
11864: LD_VAR 0 14
11868: PUSH
11869: LD_INT 1
11871: PLUS
11872: PPUSH
11873: LD_INT 3
11875: PPUSH
11876: CALL_OW 2
11880: ST_TO_ADDR
// if missile < 2 then
11881: LD_VAR 0 14
11885: PUSH
11886: LD_INT 2
11888: LESS
11889: IFFALSE 11893
// exit ;
11891: GO 12115
// x := GetX ( enemy ) ;
11893: LD_ADDR_VAR 0 4
11897: PUSH
11898: LD_VAR 0 10
11902: PPUSH
11903: CALL_OW 250
11907: ST_TO_ADDR
// y := GetY ( enemy ) ;
11908: LD_ADDR_VAR 0 5
11912: PUSH
11913: LD_VAR 0 10
11917: PPUSH
11918: CALL_OW 251
11922: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11923: LD_ADDR_VAR 0 6
11927: PUSH
11928: LD_VAR 0 4
11932: PUSH
11933: LD_INT 1
11935: NEG
11936: PPUSH
11937: LD_INT 1
11939: PPUSH
11940: CALL_OW 12
11944: PLUS
11945: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11946: LD_ADDR_VAR 0 7
11950: PUSH
11951: LD_VAR 0 5
11955: PUSH
11956: LD_INT 1
11958: NEG
11959: PPUSH
11960: LD_INT 1
11962: PPUSH
11963: CALL_OW 12
11967: PLUS
11968: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11969: LD_VAR 0 6
11973: PPUSH
11974: LD_VAR 0 7
11978: PPUSH
11979: CALL_OW 488
11983: NOT
11984: IFFALSE 12006
// begin _x := x ;
11986: LD_ADDR_VAR 0 6
11990: PUSH
11991: LD_VAR 0 4
11995: ST_TO_ADDR
// _y := y ;
11996: LD_ADDR_VAR 0 7
12000: PUSH
12001: LD_VAR 0 5
12005: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
12006: LD_ADDR_VAR 0 3
12010: PUSH
12011: LD_INT 1
12013: PPUSH
12014: LD_VAR 0 14
12018: PPUSH
12019: CALL_OW 12
12023: ST_TO_ADDR
// case i of 1 :
12024: LD_VAR 0 3
12028: PUSH
12029: LD_INT 1
12031: DOUBLE
12032: EQUAL
12033: IFTRUE 12037
12035: GO 12054
12037: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
12038: LD_VAR 0 1
12042: PPUSH
12043: LD_VAR 0 10
12047: PPUSH
12048: CALL_OW 115
12052: GO 12115
12054: LD_INT 2
12056: DOUBLE
12057: EQUAL
12058: IFTRUE 12062
12060: GO 12084
12062: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12063: LD_VAR 0 1
12067: PPUSH
12068: LD_VAR 0 6
12072: PPUSH
12073: LD_VAR 0 7
12077: PPUSH
12078: CALL_OW 153
12082: GO 12115
12084: LD_INT 3
12086: DOUBLE
12087: EQUAL
12088: IFTRUE 12092
12090: GO 12114
12092: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12093: LD_VAR 0 1
12097: PPUSH
12098: LD_VAR 0 6
12102: PPUSH
12103: LD_VAR 0 7
12107: PPUSH
12108: CALL_OW 154
12112: GO 12115
12114: POP
// end ;
12115: LD_VAR 0 2
12119: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
12120: LD_INT 0
12122: PPUSH
12123: PPUSH
12124: PPUSH
12125: PPUSH
12126: PPUSH
12127: PPUSH
// if not unit or not building then
12128: LD_VAR 0 1
12132: NOT
12133: PUSH
12134: LD_VAR 0 2
12138: NOT
12139: OR
12140: IFFALSE 12144
// exit ;
12142: GO 12302
// x := GetX ( building ) ;
12144: LD_ADDR_VAR 0 5
12148: PUSH
12149: LD_VAR 0 2
12153: PPUSH
12154: CALL_OW 250
12158: ST_TO_ADDR
// y := GetY ( building ) ;
12159: LD_ADDR_VAR 0 6
12163: PUSH
12164: LD_VAR 0 2
12168: PPUSH
12169: CALL_OW 251
12173: ST_TO_ADDR
// for i = 0 to 5 do
12174: LD_ADDR_VAR 0 4
12178: PUSH
12179: DOUBLE
12180: LD_INT 0
12182: DEC
12183: ST_TO_ADDR
12184: LD_INT 5
12186: PUSH
12187: FOR_TO
12188: IFFALSE 12300
// begin _x := ShiftX ( x , i , 3 ) ;
12190: LD_ADDR_VAR 0 7
12194: PUSH
12195: LD_VAR 0 5
12199: PPUSH
12200: LD_VAR 0 4
12204: PPUSH
12205: LD_INT 3
12207: PPUSH
12208: CALL_OW 272
12212: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
12213: LD_ADDR_VAR 0 8
12217: PUSH
12218: LD_VAR 0 6
12222: PPUSH
12223: LD_VAR 0 4
12227: PPUSH
12228: LD_INT 3
12230: PPUSH
12231: CALL_OW 273
12235: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12236: LD_VAR 0 7
12240: PPUSH
12241: LD_VAR 0 8
12245: PPUSH
12246: CALL_OW 488
12250: NOT
12251: IFFALSE 12255
// continue ;
12253: GO 12187
// if HexInfo ( _x , _y ) = 0 then
12255: LD_VAR 0 7
12259: PPUSH
12260: LD_VAR 0 8
12264: PPUSH
12265: CALL_OW 428
12269: PUSH
12270: LD_INT 0
12272: EQUAL
12273: IFFALSE 12298
// begin ComMoveXY ( unit , _x , _y ) ;
12275: LD_VAR 0 1
12279: PPUSH
12280: LD_VAR 0 7
12284: PPUSH
12285: LD_VAR 0 8
12289: PPUSH
12290: CALL_OW 111
// exit ;
12294: POP
12295: POP
12296: GO 12302
// end ; end ;
12298: GO 12187
12300: POP
12301: POP
// end ;
12302: LD_VAR 0 3
12306: RET
// export function ScanBase ( side , base_area ) ; begin
12307: LD_INT 0
12309: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12310: LD_ADDR_VAR 0 3
12314: PUSH
12315: LD_VAR 0 2
12319: PPUSH
12320: LD_INT 81
12322: PUSH
12323: LD_VAR 0 1
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PPUSH
12332: CALL_OW 70
12336: ST_TO_ADDR
// end ;
12337: LD_VAR 0 3
12341: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
12342: LD_INT 0
12344: PPUSH
12345: PPUSH
12346: PPUSH
12347: PPUSH
12348: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
12349: LD_VAR 0 1
12353: NOT
12354: PUSH
12355: LD_EXP 52
12359: PUSH
12360: LD_VAR 0 1
12364: ARRAY
12365: NOT
12366: OR
12367: PUSH
12368: LD_VAR 0 2
12372: NOT
12373: OR
12374: PUSH
12375: LD_VAR 0 3
12379: NOT
12380: OR
12381: IFFALSE 12385
// exit ;
12383: GO 12835
// side := mc_sides [ base ] ;
12385: LD_ADDR_VAR 0 6
12389: PUSH
12390: LD_EXP 78
12394: PUSH
12395: LD_VAR 0 1
12399: ARRAY
12400: ST_TO_ADDR
// if not side then
12401: LD_VAR 0 6
12405: NOT
12406: IFFALSE 12410
// exit ;
12408: GO 12835
// for i in solds do
12410: LD_ADDR_VAR 0 7
12414: PUSH
12415: LD_VAR 0 2
12419: PUSH
12420: FOR_IN
12421: IFFALSE 12482
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
12423: LD_VAR 0 7
12427: PPUSH
12428: CALL_OW 310
12432: PPUSH
12433: CALL_OW 266
12437: PUSH
12438: LD_INT 32
12440: PUSH
12441: LD_INT 31
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: IN
12448: IFFALSE 12468
// solds := solds diff i else
12450: LD_ADDR_VAR 0 2
12454: PUSH
12455: LD_VAR 0 2
12459: PUSH
12460: LD_VAR 0 7
12464: DIFF
12465: ST_TO_ADDR
12466: GO 12480
// SetTag ( i , 18 ) ;
12468: LD_VAR 0 7
12472: PPUSH
12473: LD_INT 18
12475: PPUSH
12476: CALL_OW 109
12480: GO 12420
12482: POP
12483: POP
// if not solds then
12484: LD_VAR 0 2
12488: NOT
12489: IFFALSE 12493
// exit ;
12491: GO 12835
// repeat wait ( 0 0$1 ) ;
12493: LD_INT 35
12495: PPUSH
12496: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
12500: LD_ADDR_VAR 0 5
12504: PUSH
12505: LD_VAR 0 6
12509: PPUSH
12510: LD_VAR 0 3
12514: PPUSH
12515: CALL 12307 0 2
12519: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
12520: LD_VAR 0 5
12524: NOT
12525: PUSH
12526: LD_VAR 0 5
12530: PUSH
12531: LD_INT 3
12533: GREATER
12534: OR
12535: PUSH
12536: LD_EXP 74
12540: PUSH
12541: LD_VAR 0 1
12545: ARRAY
12546: OR
12547: IFFALSE 12588
// begin for i in solds do
12549: LD_ADDR_VAR 0 7
12553: PUSH
12554: LD_VAR 0 2
12558: PUSH
12559: FOR_IN
12560: IFFALSE 12584
// if HasTask ( i ) then
12562: LD_VAR 0 7
12566: PPUSH
12567: CALL_OW 314
12571: IFFALSE 12582
// ComStop ( i ) ;
12573: LD_VAR 0 7
12577: PPUSH
12578: CALL_OW 141
12582: GO 12559
12584: POP
12585: POP
// break ;
12586: GO 12823
// end ; for i in solds do
12588: LD_ADDR_VAR 0 7
12592: PUSH
12593: LD_VAR 0 2
12597: PUSH
12598: FOR_IN
12599: IFFALSE 12815
// begin if IsInUnit ( i ) then
12601: LD_VAR 0 7
12605: PPUSH
12606: CALL_OW 310
12610: IFFALSE 12621
// ComExitBuilding ( i ) ;
12612: LD_VAR 0 7
12616: PPUSH
12617: CALL_OW 122
// if GetLives ( i ) > 333 then
12621: LD_VAR 0 7
12625: PPUSH
12626: CALL_OW 256
12630: PUSH
12631: LD_INT 333
12633: GREATER
12634: IFFALSE 12662
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
12636: LD_VAR 0 7
12640: PPUSH
12641: LD_VAR 0 5
12645: PPUSH
12646: LD_VAR 0 7
12650: PPUSH
12651: CALL_OW 74
12655: PPUSH
12656: CALL_OW 115
12660: GO 12813
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
12662: LD_ADDR_VAR 0 8
12666: PUSH
12667: LD_EXP 52
12671: PUSH
12672: LD_VAR 0 1
12676: ARRAY
12677: PPUSH
12678: LD_INT 2
12680: PUSH
12681: LD_INT 30
12683: PUSH
12684: LD_INT 0
12686: PUSH
12687: EMPTY
12688: LIST
12689: LIST
12690: PUSH
12691: LD_INT 30
12693: PUSH
12694: LD_INT 1
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: PUSH
12701: LD_INT 30
12703: PUSH
12704: LD_INT 6
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: PPUSH
12717: CALL_OW 72
12721: PPUSH
12722: LD_VAR 0 7
12726: PPUSH
12727: CALL_OW 74
12731: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
12732: LD_VAR 0 7
12736: PPUSH
12737: LD_VAR 0 8
12741: PPUSH
12742: CALL_OW 250
12746: PPUSH
12747: LD_INT 3
12749: PPUSH
12750: LD_INT 5
12752: PPUSH
12753: CALL_OW 272
12757: PPUSH
12758: LD_VAR 0 8
12762: PPUSH
12763: CALL_OW 251
12767: PPUSH
12768: LD_INT 3
12770: PPUSH
12771: LD_INT 5
12773: PPUSH
12774: CALL_OW 273
12778: PPUSH
12779: CALL_OW 111
// SetTag ( i , 0 ) ;
12783: LD_VAR 0 7
12787: PPUSH
12788: LD_INT 0
12790: PPUSH
12791: CALL_OW 109
// solds := solds diff i ;
12795: LD_ADDR_VAR 0 2
12799: PUSH
12800: LD_VAR 0 2
12804: PUSH
12805: LD_VAR 0 7
12809: DIFF
12810: ST_TO_ADDR
// continue ;
12811: GO 12598
// end ; end ;
12813: GO 12598
12815: POP
12816: POP
// until solds ;
12817: LD_VAR 0 2
12821: IFFALSE 12493
// MC_Reset ( base , 18 ) ;
12823: LD_VAR 0 1
12827: PPUSH
12828: LD_INT 18
12830: PPUSH
12831: CALL 57369 0 2
// end ;
12835: LD_VAR 0 4
12839: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
12840: LD_INT 0
12842: PPUSH
12843: PPUSH
12844: PPUSH
12845: PPUSH
12846: PPUSH
12847: PPUSH
12848: PPUSH
12849: PPUSH
12850: PPUSH
12851: PPUSH
12852: PPUSH
12853: PPUSH
12854: PPUSH
12855: PPUSH
12856: PPUSH
12857: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
12858: LD_ADDR_VAR 0 12
12862: PUSH
12863: LD_EXP 52
12867: PUSH
12868: LD_VAR 0 1
12872: ARRAY
12873: PPUSH
12874: LD_INT 25
12876: PUSH
12877: LD_INT 3
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: PPUSH
12884: CALL_OW 72
12888: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
12889: LD_ADDR_VAR 0 8
12893: PUSH
12894: LD_EXP 52
12898: PUSH
12899: LD_VAR 0 1
12903: ARRAY
12904: PPUSH
12905: LD_INT 2
12907: PUSH
12908: LD_INT 25
12910: PUSH
12911: LD_INT 1
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: PUSH
12918: LD_INT 25
12920: PUSH
12921: LD_INT 5
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PUSH
12928: LD_INT 25
12930: PUSH
12931: LD_INT 8
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: PUSH
12938: LD_INT 25
12940: PUSH
12941: LD_INT 9
12943: PUSH
12944: EMPTY
12945: LIST
12946: LIST
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: PPUSH
12955: CALL_OW 72
12959: ST_TO_ADDR
// if not defenders and not solds then
12960: LD_VAR 0 2
12964: NOT
12965: PUSH
12966: LD_VAR 0 8
12970: NOT
12971: AND
12972: IFFALSE 12976
// exit ;
12974: GO 14305
// depot_under_attack := false ;
12976: LD_ADDR_VAR 0 16
12980: PUSH
12981: LD_INT 0
12983: ST_TO_ADDR
// sold_defenders := [ ] ;
12984: LD_ADDR_VAR 0 17
12988: PUSH
12989: EMPTY
12990: ST_TO_ADDR
// if mechs then
12991: LD_VAR 0 12
12995: IFFALSE 13124
// for i in defenders do
12997: LD_ADDR_VAR 0 5
13001: PUSH
13002: LD_VAR 0 2
13006: PUSH
13007: FOR_IN
13008: IFFALSE 13122
// begin SetTag ( i , 20 ) ;
13010: LD_VAR 0 5
13014: PPUSH
13015: LD_INT 20
13017: PPUSH
13018: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
13022: LD_VAR 0 5
13026: PPUSH
13027: CALL_OW 263
13031: PUSH
13032: LD_INT 1
13034: EQUAL
13035: PUSH
13036: LD_VAR 0 5
13040: PPUSH
13041: CALL_OW 311
13045: NOT
13046: AND
13047: PUSH
13048: LD_VAR 0 12
13052: AND
13053: IFFALSE 13120
// begin un := mechs [ 1 ] ;
13055: LD_ADDR_VAR 0 10
13059: PUSH
13060: LD_VAR 0 12
13064: PUSH
13065: LD_INT 1
13067: ARRAY
13068: ST_TO_ADDR
// ComExitBuilding ( un ) ;
13069: LD_VAR 0 10
13073: PPUSH
13074: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
13078: LD_VAR 0 10
13082: PPUSH
13083: LD_VAR 0 5
13087: PPUSH
13088: CALL_OW 180
// SetTag ( un , 19 ) ;
13092: LD_VAR 0 10
13096: PPUSH
13097: LD_INT 19
13099: PPUSH
13100: CALL_OW 109
// mechs := mechs diff un ;
13104: LD_ADDR_VAR 0 12
13108: PUSH
13109: LD_VAR 0 12
13113: PUSH
13114: LD_VAR 0 10
13118: DIFF
13119: ST_TO_ADDR
// end ; end ;
13120: GO 13007
13122: POP
13123: POP
// if solds then
13124: LD_VAR 0 8
13128: IFFALSE 13187
// for i in solds do
13130: LD_ADDR_VAR 0 5
13134: PUSH
13135: LD_VAR 0 8
13139: PUSH
13140: FOR_IN
13141: IFFALSE 13185
// if not GetTag ( i ) then
13143: LD_VAR 0 5
13147: PPUSH
13148: CALL_OW 110
13152: NOT
13153: IFFALSE 13183
// begin defenders := defenders union i ;
13155: LD_ADDR_VAR 0 2
13159: PUSH
13160: LD_VAR 0 2
13164: PUSH
13165: LD_VAR 0 5
13169: UNION
13170: ST_TO_ADDR
// SetTag ( i , 18 ) ;
13171: LD_VAR 0 5
13175: PPUSH
13176: LD_INT 18
13178: PPUSH
13179: CALL_OW 109
// end ;
13183: GO 13140
13185: POP
13186: POP
// repeat wait ( 0 0$1 ) ;
13187: LD_INT 35
13189: PPUSH
13190: CALL_OW 67
// enemy := mc_scan [ base ] ;
13194: LD_ADDR_VAR 0 3
13198: PUSH
13199: LD_EXP 75
13203: PUSH
13204: LD_VAR 0 1
13208: ARRAY
13209: ST_TO_ADDR
// for i in defenders do
13210: LD_ADDR_VAR 0 5
13214: PUSH
13215: LD_VAR 0 2
13219: PUSH
13220: FOR_IN
13221: IFFALSE 13906
// begin e := NearestUnitToUnit ( enemy , i ) ;
13223: LD_ADDR_VAR 0 13
13227: PUSH
13228: LD_VAR 0 3
13232: PPUSH
13233: LD_VAR 0 5
13237: PPUSH
13238: CALL_OW 74
13242: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
13243: LD_ADDR_VAR 0 16
13247: PUSH
13248: LD_EXP 52
13252: PUSH
13253: LD_VAR 0 1
13257: ARRAY
13258: PPUSH
13259: LD_INT 2
13261: PUSH
13262: LD_INT 30
13264: PUSH
13265: LD_INT 0
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: PUSH
13272: LD_INT 30
13274: PUSH
13275: LD_INT 1
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: LIST
13286: PPUSH
13287: CALL_OW 72
13291: NOT
13292: PUSH
13293: LD_EXP 52
13297: PUSH
13298: LD_VAR 0 1
13302: ARRAY
13303: PPUSH
13304: LD_INT 2
13306: PUSH
13307: LD_INT 30
13309: PUSH
13310: LD_INT 0
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: PUSH
13317: LD_INT 30
13319: PUSH
13320: LD_INT 1
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: LIST
13331: PPUSH
13332: CALL_OW 72
13336: PPUSH
13337: CALL_OW 256
13341: PUSH
13342: LD_INT 600
13344: LESS
13345: OR
13346: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
13347: LD_VAR 0 5
13351: PPUSH
13352: CALL_OW 247
13356: PUSH
13357: LD_INT 2
13359: DOUBLE
13360: EQUAL
13361: IFTRUE 13365
13363: GO 13612
13365: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
13366: LD_VAR 0 5
13370: PPUSH
13371: CALL_OW 256
13375: PUSH
13376: LD_INT 650
13378: GREATER
13379: PUSH
13380: LD_VAR 0 5
13384: PPUSH
13385: LD_VAR 0 13
13389: PPUSH
13390: CALL_OW 296
13394: PUSH
13395: LD_INT 40
13397: LESS
13398: AND
13399: IFFALSE 13417
// ComAttackUnit ( i , e ) else
13401: LD_VAR 0 5
13405: PPUSH
13406: LD_VAR 0 13
13410: PPUSH
13411: CALL_OW 115
13415: GO 13495
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
13417: LD_VAR 0 5
13421: PPUSH
13422: LD_VAR 0 13
13426: PPUSH
13427: CALL_OW 296
13431: PUSH
13432: LD_INT 30
13434: GREATEREQUAL
13435: PUSH
13436: LD_VAR 0 5
13440: PPUSH
13441: CALL_OW 256
13445: PUSH
13446: LD_INT 650
13448: LESSEQUAL
13449: OR
13450: PUSH
13451: LD_VAR 0 5
13455: PPUSH
13456: LD_EXP 76
13460: PUSH
13461: LD_VAR 0 1
13465: ARRAY
13466: PPUSH
13467: CALL_OW 308
13471: NOT
13472: AND
13473: IFFALSE 13495
// ComMoveToArea ( i , mc_parking [ base ] ) ;
13475: LD_VAR 0 5
13479: PPUSH
13480: LD_EXP 76
13484: PUSH
13485: LD_VAR 0 1
13489: ARRAY
13490: PPUSH
13491: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
13495: LD_VAR 0 5
13499: PPUSH
13500: CALL_OW 256
13504: PUSH
13505: LD_INT 998
13507: LESS
13508: PUSH
13509: LD_VAR 0 5
13513: PPUSH
13514: CALL_OW 263
13518: PUSH
13519: LD_INT 1
13521: EQUAL
13522: AND
13523: PUSH
13524: LD_VAR 0 5
13528: PPUSH
13529: CALL_OW 311
13533: AND
13534: PUSH
13535: LD_VAR 0 5
13539: PPUSH
13540: LD_EXP 76
13544: PUSH
13545: LD_VAR 0 1
13549: ARRAY
13550: PPUSH
13551: CALL_OW 308
13555: AND
13556: IFFALSE 13610
// begin mech := IsDrivenBy ( i ) ;
13558: LD_ADDR_VAR 0 9
13562: PUSH
13563: LD_VAR 0 5
13567: PPUSH
13568: CALL_OW 311
13572: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
13573: LD_VAR 0 9
13577: PPUSH
13578: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
13582: LD_VAR 0 9
13586: PPUSH
13587: LD_VAR 0 5
13591: PPUSH
13592: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
13596: LD_VAR 0 9
13600: PPUSH
13601: LD_VAR 0 5
13605: PPUSH
13606: CALL_OW 180
// end ; end ; unit_human :
13610: GO 13877
13612: LD_INT 1
13614: DOUBLE
13615: EQUAL
13616: IFTRUE 13620
13618: GO 13876
13620: POP
// begin b := IsInUnit ( i ) ;
13621: LD_ADDR_VAR 0 18
13625: PUSH
13626: LD_VAR 0 5
13630: PPUSH
13631: CALL_OW 310
13635: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
13636: LD_ADDR_VAR 0 19
13640: PUSH
13641: LD_VAR 0 18
13645: NOT
13646: PUSH
13647: LD_VAR 0 18
13651: PPUSH
13652: CALL_OW 266
13656: PUSH
13657: LD_INT 32
13659: PUSH
13660: LD_INT 31
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: IN
13667: OR
13668: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
13669: LD_VAR 0 16
13673: PUSH
13674: LD_VAR 0 2
13678: PPUSH
13679: LD_INT 21
13681: PUSH
13682: LD_INT 2
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PPUSH
13689: CALL_OW 72
13693: PUSH
13694: LD_INT 1
13696: LESSEQUAL
13697: OR
13698: PUSH
13699: LD_VAR 0 19
13703: AND
13704: PUSH
13705: LD_VAR 0 5
13709: PUSH
13710: LD_VAR 0 17
13714: IN
13715: NOT
13716: AND
13717: IFFALSE 13810
// begin if b then
13719: LD_VAR 0 18
13723: IFFALSE 13772
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
13725: LD_VAR 0 18
13729: PPUSH
13730: LD_VAR 0 3
13734: PPUSH
13735: LD_VAR 0 18
13739: PPUSH
13740: CALL_OW 74
13744: PPUSH
13745: CALL_OW 296
13749: PUSH
13750: LD_INT 10
13752: LESS
13753: PUSH
13754: LD_VAR 0 18
13758: PPUSH
13759: CALL_OW 461
13763: PUSH
13764: LD_INT 7
13766: NONEQUAL
13767: AND
13768: IFFALSE 13772
// continue ;
13770: GO 13220
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
13772: LD_ADDR_VAR 0 17
13776: PUSH
13777: LD_VAR 0 17
13781: PPUSH
13782: LD_VAR 0 17
13786: PUSH
13787: LD_INT 1
13789: PLUS
13790: PPUSH
13791: LD_VAR 0 5
13795: PPUSH
13796: CALL_OW 1
13800: ST_TO_ADDR
// ComExitBuilding ( i ) ;
13801: LD_VAR 0 5
13805: PPUSH
13806: CALL_OW 122
// end ; if sold_defenders then
13810: LD_VAR 0 17
13814: IFFALSE 13874
// if i in sold_defenders then
13816: LD_VAR 0 5
13820: PUSH
13821: LD_VAR 0 17
13825: IN
13826: IFFALSE 13874
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
13828: LD_VAR 0 5
13832: PPUSH
13833: CALL_OW 314
13837: NOT
13838: PUSH
13839: LD_VAR 0 5
13843: PPUSH
13844: LD_VAR 0 13
13848: PPUSH
13849: CALL_OW 296
13853: PUSH
13854: LD_INT 30
13856: LESS
13857: AND
13858: IFFALSE 13874
// ComAttackUnit ( i , e ) ;
13860: LD_VAR 0 5
13864: PPUSH
13865: LD_VAR 0 13
13869: PPUSH
13870: CALL_OW 115
// end ; end ; end ;
13874: GO 13877
13876: POP
// if IsDead ( i ) then
13877: LD_VAR 0 5
13881: PPUSH
13882: CALL_OW 301
13886: IFFALSE 13904
// defenders := defenders diff i ;
13888: LD_ADDR_VAR 0 2
13892: PUSH
13893: LD_VAR 0 2
13897: PUSH
13898: LD_VAR 0 5
13902: DIFF
13903: ST_TO_ADDR
// end ;
13904: GO 13220
13906: POP
13907: POP
// until not enemy or not defenders ;
13908: LD_VAR 0 3
13912: NOT
13913: PUSH
13914: LD_VAR 0 2
13918: NOT
13919: OR
13920: IFFALSE 13187
// MC_Reset ( base , 18 ) ;
13922: LD_VAR 0 1
13926: PPUSH
13927: LD_INT 18
13929: PPUSH
13930: CALL 57369 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
13934: LD_ADDR_VAR 0 2
13938: PUSH
13939: LD_VAR 0 2
13943: PUSH
13944: LD_VAR 0 2
13948: PPUSH
13949: LD_INT 2
13951: PUSH
13952: LD_INT 25
13954: PUSH
13955: LD_INT 1
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: PUSH
13962: LD_INT 25
13964: PUSH
13965: LD_INT 5
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PUSH
13972: LD_INT 25
13974: PUSH
13975: LD_INT 8
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: PUSH
13982: LD_INT 25
13984: PUSH
13985: LD_INT 9
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: PPUSH
13999: CALL_OW 72
14003: DIFF
14004: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
14005: LD_VAR 0 3
14009: NOT
14010: PUSH
14011: LD_VAR 0 2
14015: PPUSH
14016: LD_INT 21
14018: PUSH
14019: LD_INT 2
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: PPUSH
14026: CALL_OW 72
14030: AND
14031: IFFALSE 14293
// begin tmp := FilterByTag ( defenders , 19 ) ;
14033: LD_ADDR_VAR 0 11
14037: PUSH
14038: LD_VAR 0 2
14042: PPUSH
14043: LD_INT 19
14045: PPUSH
14046: CALL 50667 0 2
14050: ST_TO_ADDR
// if tmp then
14051: LD_VAR 0 11
14055: IFFALSE 14125
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
14057: LD_ADDR_VAR 0 11
14061: PUSH
14062: LD_VAR 0 11
14066: PPUSH
14067: LD_INT 25
14069: PUSH
14070: LD_INT 3
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: PPUSH
14077: CALL_OW 72
14081: ST_TO_ADDR
// if tmp then
14082: LD_VAR 0 11
14086: IFFALSE 14125
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
14088: LD_ADDR_EXP 64
14092: PUSH
14093: LD_EXP 64
14097: PPUSH
14098: LD_VAR 0 1
14102: PPUSH
14103: LD_EXP 64
14107: PUSH
14108: LD_VAR 0 1
14112: ARRAY
14113: PUSH
14114: LD_VAR 0 11
14118: UNION
14119: PPUSH
14120: CALL_OW 1
14124: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
14125: LD_VAR 0 1
14129: PPUSH
14130: LD_INT 19
14132: PPUSH
14133: CALL 57369 0 2
// repeat wait ( 0 0$1 ) ;
14137: LD_INT 35
14139: PPUSH
14140: CALL_OW 67
// for i in defenders do
14144: LD_ADDR_VAR 0 5
14148: PUSH
14149: LD_VAR 0 2
14153: PUSH
14154: FOR_IN
14155: IFFALSE 14244
// begin if not IsInArea ( i , mc_parking [ base ] ) then
14157: LD_VAR 0 5
14161: PPUSH
14162: LD_EXP 76
14166: PUSH
14167: LD_VAR 0 1
14171: ARRAY
14172: PPUSH
14173: CALL_OW 308
14177: NOT
14178: IFFALSE 14202
// ComMoveToArea ( i , mc_parking [ base ] ) else
14180: LD_VAR 0 5
14184: PPUSH
14185: LD_EXP 76
14189: PUSH
14190: LD_VAR 0 1
14194: ARRAY
14195: PPUSH
14196: CALL_OW 113
14200: GO 14242
// if GetControl ( i ) = control_manual then
14202: LD_VAR 0 5
14206: PPUSH
14207: CALL_OW 263
14211: PUSH
14212: LD_INT 1
14214: EQUAL
14215: IFFALSE 14242
// if IsDrivenBy ( i ) then
14217: LD_VAR 0 5
14221: PPUSH
14222: CALL_OW 311
14226: IFFALSE 14242
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
14228: LD_VAR 0 5
14232: PPUSH
14233: CALL_OW 311
14237: PPUSH
14238: CALL_OW 121
// end ;
14242: GO 14154
14244: POP
14245: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
14246: LD_VAR 0 2
14250: PPUSH
14251: LD_INT 95
14253: PUSH
14254: LD_EXP 76
14258: PUSH
14259: LD_VAR 0 1
14263: ARRAY
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: PPUSH
14269: CALL_OW 72
14273: PUSH
14274: LD_VAR 0 2
14278: EQUAL
14279: PUSH
14280: LD_EXP 75
14284: PUSH
14285: LD_VAR 0 1
14289: ARRAY
14290: OR
14291: IFFALSE 14137
// end ; MC_Reset ( base , 20 ) ;
14293: LD_VAR 0 1
14297: PPUSH
14298: LD_INT 20
14300: PPUSH
14301: CALL 57369 0 2
// end ;
14305: LD_VAR 0 4
14309: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
14310: LD_INT 0
14312: PPUSH
14313: PPUSH
14314: PPUSH
14315: PPUSH
// result := false ;
14316: LD_ADDR_VAR 0 2
14320: PUSH
14321: LD_INT 0
14323: ST_TO_ADDR
// side := GetSide ( unit ) ;
14324: LD_ADDR_VAR 0 3
14328: PUSH
14329: LD_VAR 0 1
14333: PPUSH
14334: CALL_OW 255
14338: ST_TO_ADDR
// nat := GetNation ( unit ) ;
14339: LD_ADDR_VAR 0 4
14343: PUSH
14344: LD_VAR 0 1
14348: PPUSH
14349: CALL_OW 248
14353: ST_TO_ADDR
// case nat of 1 :
14354: LD_VAR 0 4
14358: PUSH
14359: LD_INT 1
14361: DOUBLE
14362: EQUAL
14363: IFTRUE 14367
14365: GO 14378
14367: POP
// tech := tech_lassight ; 2 :
14368: LD_ADDR_VAR 0 5
14372: PUSH
14373: LD_INT 12
14375: ST_TO_ADDR
14376: GO 14417
14378: LD_INT 2
14380: DOUBLE
14381: EQUAL
14382: IFTRUE 14386
14384: GO 14397
14386: POP
// tech := tech_mortar ; 3 :
14387: LD_ADDR_VAR 0 5
14391: PUSH
14392: LD_INT 41
14394: ST_TO_ADDR
14395: GO 14417
14397: LD_INT 3
14399: DOUBLE
14400: EQUAL
14401: IFTRUE 14405
14403: GO 14416
14405: POP
// tech := tech_bazooka ; end ;
14406: LD_ADDR_VAR 0 5
14410: PUSH
14411: LD_INT 44
14413: ST_TO_ADDR
14414: GO 14417
14416: POP
// if Researched ( side , tech ) then
14417: LD_VAR 0 3
14421: PPUSH
14422: LD_VAR 0 5
14426: PPUSH
14427: CALL_OW 325
14431: IFFALSE 14458
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
14433: LD_ADDR_VAR 0 2
14437: PUSH
14438: LD_INT 5
14440: PUSH
14441: LD_INT 8
14443: PUSH
14444: LD_INT 9
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: LIST
14451: PUSH
14452: LD_VAR 0 4
14456: ARRAY
14457: ST_TO_ADDR
// end ;
14458: LD_VAR 0 2
14462: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
14463: LD_INT 0
14465: PPUSH
14466: PPUSH
14467: PPUSH
// if not mines then
14468: LD_VAR 0 2
14472: NOT
14473: IFFALSE 14477
// exit ;
14475: GO 14621
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14477: LD_ADDR_VAR 0 5
14481: PUSH
14482: LD_INT 81
14484: PUSH
14485: LD_VAR 0 1
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PUSH
14494: LD_INT 3
14496: PUSH
14497: LD_INT 21
14499: PUSH
14500: LD_INT 3
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: PUSH
14511: EMPTY
14512: LIST
14513: LIST
14514: PPUSH
14515: CALL_OW 69
14519: ST_TO_ADDR
// for i in mines do
14520: LD_ADDR_VAR 0 4
14524: PUSH
14525: LD_VAR 0 2
14529: PUSH
14530: FOR_IN
14531: IFFALSE 14619
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
14533: LD_VAR 0 4
14537: PUSH
14538: LD_INT 1
14540: ARRAY
14541: PPUSH
14542: LD_VAR 0 4
14546: PUSH
14547: LD_INT 2
14549: ARRAY
14550: PPUSH
14551: CALL_OW 458
14555: NOT
14556: IFFALSE 14560
// continue ;
14558: GO 14530
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
14560: LD_VAR 0 4
14564: PUSH
14565: LD_INT 1
14567: ARRAY
14568: PPUSH
14569: LD_VAR 0 4
14573: PUSH
14574: LD_INT 2
14576: ARRAY
14577: PPUSH
14578: CALL_OW 428
14582: PUSH
14583: LD_VAR 0 5
14587: IN
14588: IFFALSE 14617
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
14590: LD_VAR 0 4
14594: PUSH
14595: LD_INT 1
14597: ARRAY
14598: PPUSH
14599: LD_VAR 0 4
14603: PUSH
14604: LD_INT 2
14606: ARRAY
14607: PPUSH
14608: LD_VAR 0 1
14612: PPUSH
14613: CALL_OW 456
// end ;
14617: GO 14530
14619: POP
14620: POP
// end ;
14621: LD_VAR 0 3
14625: RET
// export function Count ( array ) ; var i ; begin
14626: LD_INT 0
14628: PPUSH
14629: PPUSH
// result := 0 ;
14630: LD_ADDR_VAR 0 2
14634: PUSH
14635: LD_INT 0
14637: ST_TO_ADDR
// for i in array do
14638: LD_ADDR_VAR 0 3
14642: PUSH
14643: LD_VAR 0 1
14647: PUSH
14648: FOR_IN
14649: IFFALSE 14673
// if i then
14651: LD_VAR 0 3
14655: IFFALSE 14671
// result := result + 1 ;
14657: LD_ADDR_VAR 0 2
14661: PUSH
14662: LD_VAR 0 2
14666: PUSH
14667: LD_INT 1
14669: PLUS
14670: ST_TO_ADDR
14671: GO 14648
14673: POP
14674: POP
// end ;
14675: LD_VAR 0 2
14679: RET
// export function IsEmpty ( building ) ; begin
14680: LD_INT 0
14682: PPUSH
// if not building then
14683: LD_VAR 0 1
14687: NOT
14688: IFFALSE 14692
// exit ;
14690: GO 14735
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
14692: LD_ADDR_VAR 0 2
14696: PUSH
14697: LD_VAR 0 1
14701: PUSH
14702: LD_INT 22
14704: PUSH
14705: LD_VAR 0 1
14709: PPUSH
14710: CALL_OW 255
14714: PUSH
14715: EMPTY
14716: LIST
14717: LIST
14718: PUSH
14719: LD_INT 58
14721: PUSH
14722: EMPTY
14723: LIST
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PPUSH
14729: CALL_OW 69
14733: IN
14734: ST_TO_ADDR
// end ;
14735: LD_VAR 0 2
14739: RET
// export function IsNotFull ( building ) ; begin
14740: LD_INT 0
14742: PPUSH
// if not building then
14743: LD_VAR 0 1
14747: NOT
14748: IFFALSE 14752
// exit ;
14750: GO 14771
// result := UnitsInside ( building ) < 6 ;
14752: LD_ADDR_VAR 0 2
14756: PUSH
14757: LD_VAR 0 1
14761: PPUSH
14762: CALL_OW 313
14766: PUSH
14767: LD_INT 6
14769: LESS
14770: ST_TO_ADDR
// end ;
14771: LD_VAR 0 2
14775: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
14776: LD_INT 0
14778: PPUSH
14779: PPUSH
14780: PPUSH
14781: PPUSH
// tmp := [ ] ;
14782: LD_ADDR_VAR 0 3
14786: PUSH
14787: EMPTY
14788: ST_TO_ADDR
// list := [ ] ;
14789: LD_ADDR_VAR 0 5
14793: PUSH
14794: EMPTY
14795: ST_TO_ADDR
// for i = 16 to 25 do
14796: LD_ADDR_VAR 0 4
14800: PUSH
14801: DOUBLE
14802: LD_INT 16
14804: DEC
14805: ST_TO_ADDR
14806: LD_INT 25
14808: PUSH
14809: FOR_TO
14810: IFFALSE 14883
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
14812: LD_ADDR_VAR 0 3
14816: PUSH
14817: LD_VAR 0 3
14821: PUSH
14822: LD_INT 22
14824: PUSH
14825: LD_VAR 0 1
14829: PPUSH
14830: CALL_OW 255
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: PUSH
14839: LD_INT 91
14841: PUSH
14842: LD_VAR 0 1
14846: PUSH
14847: LD_INT 6
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: LIST
14854: PUSH
14855: LD_INT 30
14857: PUSH
14858: LD_VAR 0 4
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: LIST
14871: PUSH
14872: EMPTY
14873: LIST
14874: PPUSH
14875: CALL_OW 69
14879: ADD
14880: ST_TO_ADDR
14881: GO 14809
14883: POP
14884: POP
// for i = 1 to tmp do
14885: LD_ADDR_VAR 0 4
14889: PUSH
14890: DOUBLE
14891: LD_INT 1
14893: DEC
14894: ST_TO_ADDR
14895: LD_VAR 0 3
14899: PUSH
14900: FOR_TO
14901: IFFALSE 14989
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
14903: LD_ADDR_VAR 0 5
14907: PUSH
14908: LD_VAR 0 5
14912: PUSH
14913: LD_VAR 0 3
14917: PUSH
14918: LD_VAR 0 4
14922: ARRAY
14923: PPUSH
14924: CALL_OW 266
14928: PUSH
14929: LD_VAR 0 3
14933: PUSH
14934: LD_VAR 0 4
14938: ARRAY
14939: PPUSH
14940: CALL_OW 250
14944: PUSH
14945: LD_VAR 0 3
14949: PUSH
14950: LD_VAR 0 4
14954: ARRAY
14955: PPUSH
14956: CALL_OW 251
14960: PUSH
14961: LD_VAR 0 3
14965: PUSH
14966: LD_VAR 0 4
14970: ARRAY
14971: PPUSH
14972: CALL_OW 254
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: PUSH
14983: EMPTY
14984: LIST
14985: ADD
14986: ST_TO_ADDR
14987: GO 14900
14989: POP
14990: POP
// result := list ;
14991: LD_ADDR_VAR 0 2
14995: PUSH
14996: LD_VAR 0 5
15000: ST_TO_ADDR
// end ;
15001: LD_VAR 0 2
15005: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
15006: LD_INT 0
15008: PPUSH
15009: PPUSH
15010: PPUSH
15011: PPUSH
15012: PPUSH
15013: PPUSH
15014: PPUSH
// if not factory then
15015: LD_VAR 0 1
15019: NOT
15020: IFFALSE 15024
// exit ;
15022: GO 15556
// if control = control_apeman then
15024: LD_VAR 0 4
15028: PUSH
15029: LD_INT 5
15031: EQUAL
15032: IFFALSE 15141
// begin tmp := UnitsInside ( factory ) ;
15034: LD_ADDR_VAR 0 8
15038: PUSH
15039: LD_VAR 0 1
15043: PPUSH
15044: CALL_OW 313
15048: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
15049: LD_VAR 0 8
15053: PPUSH
15054: LD_INT 25
15056: PUSH
15057: LD_INT 12
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: PPUSH
15064: CALL_OW 72
15068: NOT
15069: IFFALSE 15079
// control := control_manual ;
15071: LD_ADDR_VAR 0 4
15075: PUSH
15076: LD_INT 1
15078: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
15079: LD_ADDR_VAR 0 8
15083: PUSH
15084: LD_VAR 0 1
15088: PPUSH
15089: CALL 14776 0 1
15093: ST_TO_ADDR
// if tmp then
15094: LD_VAR 0 8
15098: IFFALSE 15141
// begin for i in tmp do
15100: LD_ADDR_VAR 0 7
15104: PUSH
15105: LD_VAR 0 8
15109: PUSH
15110: FOR_IN
15111: IFFALSE 15139
// if i [ 1 ] = b_ext_radar then
15113: LD_VAR 0 7
15117: PUSH
15118: LD_INT 1
15120: ARRAY
15121: PUSH
15122: LD_INT 20
15124: EQUAL
15125: IFFALSE 15137
// begin control := control_remote ;
15127: LD_ADDR_VAR 0 4
15131: PUSH
15132: LD_INT 2
15134: ST_TO_ADDR
// break ;
15135: GO 15139
// end ;
15137: GO 15110
15139: POP
15140: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15141: LD_VAR 0 1
15145: PPUSH
15146: LD_VAR 0 2
15150: PPUSH
15151: LD_VAR 0 3
15155: PPUSH
15156: LD_VAR 0 4
15160: PPUSH
15161: LD_VAR 0 5
15165: PPUSH
15166: CALL_OW 448
15170: IFFALSE 15205
// begin result := [ chassis , engine , control , weapon ] ;
15172: LD_ADDR_VAR 0 6
15176: PUSH
15177: LD_VAR 0 2
15181: PUSH
15182: LD_VAR 0 3
15186: PUSH
15187: LD_VAR 0 4
15191: PUSH
15192: LD_VAR 0 5
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: ST_TO_ADDR
// exit ;
15203: GO 15556
// end ; _chassis := AvailableChassisList ( factory ) ;
15205: LD_ADDR_VAR 0 9
15209: PUSH
15210: LD_VAR 0 1
15214: PPUSH
15215: CALL_OW 475
15219: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
15220: LD_ADDR_VAR 0 11
15224: PUSH
15225: LD_VAR 0 1
15229: PPUSH
15230: CALL_OW 476
15234: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
15235: LD_ADDR_VAR 0 12
15239: PUSH
15240: LD_VAR 0 1
15244: PPUSH
15245: CALL_OW 477
15249: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
15250: LD_ADDR_VAR 0 10
15254: PUSH
15255: LD_VAR 0 1
15259: PPUSH
15260: CALL_OW 478
15264: ST_TO_ADDR
// if not chassis in _chassis then
15265: LD_VAR 0 2
15269: PUSH
15270: LD_VAR 0 9
15274: IN
15275: NOT
15276: IFFALSE 15302
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
15278: LD_ADDR_VAR 0 2
15282: PUSH
15283: LD_VAR 0 9
15287: PUSH
15288: LD_INT 1
15290: PPUSH
15291: LD_VAR 0 9
15295: PPUSH
15296: CALL_OW 12
15300: ARRAY
15301: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
15302: LD_VAR 0 2
15306: PPUSH
15307: LD_VAR 0 3
15311: PPUSH
15312: CALL 15561 0 2
15316: NOT
15317: IFFALSE 15376
// repeat engine := _engine [ 1 ] ;
15319: LD_ADDR_VAR 0 3
15323: PUSH
15324: LD_VAR 0 11
15328: PUSH
15329: LD_INT 1
15331: ARRAY
15332: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
15333: LD_ADDR_VAR 0 11
15337: PUSH
15338: LD_VAR 0 11
15342: PPUSH
15343: LD_INT 1
15345: PPUSH
15346: CALL_OW 3
15350: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
15351: LD_VAR 0 2
15355: PPUSH
15356: LD_VAR 0 3
15360: PPUSH
15361: CALL 15561 0 2
15365: PUSH
15366: LD_VAR 0 11
15370: PUSH
15371: EMPTY
15372: EQUAL
15373: OR
15374: IFFALSE 15319
// if not control in _control then
15376: LD_VAR 0 4
15380: PUSH
15381: LD_VAR 0 12
15385: IN
15386: NOT
15387: IFFALSE 15413
// control := _control [ rand ( 1 , _control ) ] ;
15389: LD_ADDR_VAR 0 4
15393: PUSH
15394: LD_VAR 0 12
15398: PUSH
15399: LD_INT 1
15401: PPUSH
15402: LD_VAR 0 12
15406: PPUSH
15407: CALL_OW 12
15411: ARRAY
15412: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
15413: LD_VAR 0 2
15417: PPUSH
15418: LD_VAR 0 5
15422: PPUSH
15423: CALL 15781 0 2
15427: NOT
15428: IFFALSE 15487
// repeat weapon := _weapon [ 1 ] ;
15430: LD_ADDR_VAR 0 5
15434: PUSH
15435: LD_VAR 0 10
15439: PUSH
15440: LD_INT 1
15442: ARRAY
15443: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
15444: LD_ADDR_VAR 0 10
15448: PUSH
15449: LD_VAR 0 10
15453: PPUSH
15454: LD_INT 1
15456: PPUSH
15457: CALL_OW 3
15461: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
15462: LD_VAR 0 2
15466: PPUSH
15467: LD_VAR 0 5
15471: PPUSH
15472: CALL 15781 0 2
15476: PUSH
15477: LD_VAR 0 10
15481: PUSH
15482: EMPTY
15483: EQUAL
15484: OR
15485: IFFALSE 15430
// result := [ ] ;
15487: LD_ADDR_VAR 0 6
15491: PUSH
15492: EMPTY
15493: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15494: LD_VAR 0 1
15498: PPUSH
15499: LD_VAR 0 2
15503: PPUSH
15504: LD_VAR 0 3
15508: PPUSH
15509: LD_VAR 0 4
15513: PPUSH
15514: LD_VAR 0 5
15518: PPUSH
15519: CALL_OW 448
15523: IFFALSE 15556
// result := [ chassis , engine , control , weapon ] ;
15525: LD_ADDR_VAR 0 6
15529: PUSH
15530: LD_VAR 0 2
15534: PUSH
15535: LD_VAR 0 3
15539: PUSH
15540: LD_VAR 0 4
15544: PUSH
15545: LD_VAR 0 5
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: ST_TO_ADDR
// end ;
15556: LD_VAR 0 6
15560: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
15561: LD_INT 0
15563: PPUSH
// if not chassis or not engine then
15564: LD_VAR 0 1
15568: NOT
15569: PUSH
15570: LD_VAR 0 2
15574: NOT
15575: OR
15576: IFFALSE 15580
// exit ;
15578: GO 15776
// case engine of engine_solar :
15580: LD_VAR 0 2
15584: PUSH
15585: LD_INT 2
15587: DOUBLE
15588: EQUAL
15589: IFTRUE 15593
15591: GO 15631
15593: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
15594: LD_ADDR_VAR 0 3
15598: PUSH
15599: LD_INT 11
15601: PUSH
15602: LD_INT 12
15604: PUSH
15605: LD_INT 13
15607: PUSH
15608: LD_INT 14
15610: PUSH
15611: LD_INT 1
15613: PUSH
15614: LD_INT 2
15616: PUSH
15617: LD_INT 3
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: ST_TO_ADDR
15629: GO 15760
15631: LD_INT 1
15633: DOUBLE
15634: EQUAL
15635: IFTRUE 15639
15637: GO 15701
15639: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
15640: LD_ADDR_VAR 0 3
15644: PUSH
15645: LD_INT 11
15647: PUSH
15648: LD_INT 12
15650: PUSH
15651: LD_INT 13
15653: PUSH
15654: LD_INT 14
15656: PUSH
15657: LD_INT 1
15659: PUSH
15660: LD_INT 2
15662: PUSH
15663: LD_INT 3
15665: PUSH
15666: LD_INT 4
15668: PUSH
15669: LD_INT 5
15671: PUSH
15672: LD_INT 21
15674: PUSH
15675: LD_INT 23
15677: PUSH
15678: LD_INT 22
15680: PUSH
15681: LD_INT 24
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: ST_TO_ADDR
15699: GO 15760
15701: LD_INT 3
15703: DOUBLE
15704: EQUAL
15705: IFTRUE 15709
15707: GO 15759
15709: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15710: LD_ADDR_VAR 0 3
15714: PUSH
15715: LD_INT 13
15717: PUSH
15718: LD_INT 14
15720: PUSH
15721: LD_INT 2
15723: PUSH
15724: LD_INT 3
15726: PUSH
15727: LD_INT 4
15729: PUSH
15730: LD_INT 5
15732: PUSH
15733: LD_INT 21
15735: PUSH
15736: LD_INT 22
15738: PUSH
15739: LD_INT 23
15741: PUSH
15742: LD_INT 24
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: ST_TO_ADDR
15757: GO 15760
15759: POP
// result := ( chassis in result ) ;
15760: LD_ADDR_VAR 0 3
15764: PUSH
15765: LD_VAR 0 1
15769: PUSH
15770: LD_VAR 0 3
15774: IN
15775: ST_TO_ADDR
// end ;
15776: LD_VAR 0 3
15780: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
15781: LD_INT 0
15783: PPUSH
// if not chassis or not weapon then
15784: LD_VAR 0 1
15788: NOT
15789: PUSH
15790: LD_VAR 0 2
15794: NOT
15795: OR
15796: IFFALSE 15800
// exit ;
15798: GO 16826
// case weapon of us_machine_gun :
15800: LD_VAR 0 2
15804: PUSH
15805: LD_INT 2
15807: DOUBLE
15808: EQUAL
15809: IFTRUE 15813
15811: GO 15843
15813: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
15814: LD_ADDR_VAR 0 3
15818: PUSH
15819: LD_INT 1
15821: PUSH
15822: LD_INT 2
15824: PUSH
15825: LD_INT 3
15827: PUSH
15828: LD_INT 4
15830: PUSH
15831: LD_INT 5
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: ST_TO_ADDR
15841: GO 16810
15843: LD_INT 3
15845: DOUBLE
15846: EQUAL
15847: IFTRUE 15851
15849: GO 15881
15851: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
15852: LD_ADDR_VAR 0 3
15856: PUSH
15857: LD_INT 1
15859: PUSH
15860: LD_INT 2
15862: PUSH
15863: LD_INT 3
15865: PUSH
15866: LD_INT 4
15868: PUSH
15869: LD_INT 5
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: ST_TO_ADDR
15879: GO 16810
15881: LD_INT 11
15883: DOUBLE
15884: EQUAL
15885: IFTRUE 15889
15887: GO 15919
15889: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
15890: LD_ADDR_VAR 0 3
15894: PUSH
15895: LD_INT 1
15897: PUSH
15898: LD_INT 2
15900: PUSH
15901: LD_INT 3
15903: PUSH
15904: LD_INT 4
15906: PUSH
15907: LD_INT 5
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: ST_TO_ADDR
15917: GO 16810
15919: LD_INT 4
15921: DOUBLE
15922: EQUAL
15923: IFTRUE 15927
15925: GO 15953
15927: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
15928: LD_ADDR_VAR 0 3
15932: PUSH
15933: LD_INT 2
15935: PUSH
15936: LD_INT 3
15938: PUSH
15939: LD_INT 4
15941: PUSH
15942: LD_INT 5
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: ST_TO_ADDR
15951: GO 16810
15953: LD_INT 5
15955: DOUBLE
15956: EQUAL
15957: IFTRUE 15961
15959: GO 15987
15961: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
15962: LD_ADDR_VAR 0 3
15966: PUSH
15967: LD_INT 2
15969: PUSH
15970: LD_INT 3
15972: PUSH
15973: LD_INT 4
15975: PUSH
15976: LD_INT 5
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: ST_TO_ADDR
15985: GO 16810
15987: LD_INT 9
15989: DOUBLE
15990: EQUAL
15991: IFTRUE 15995
15993: GO 16021
15995: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
15996: LD_ADDR_VAR 0 3
16000: PUSH
16001: LD_INT 2
16003: PUSH
16004: LD_INT 3
16006: PUSH
16007: LD_INT 4
16009: PUSH
16010: LD_INT 5
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: ST_TO_ADDR
16019: GO 16810
16021: LD_INT 7
16023: DOUBLE
16024: EQUAL
16025: IFTRUE 16029
16027: GO 16055
16029: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
16030: LD_ADDR_VAR 0 3
16034: PUSH
16035: LD_INT 2
16037: PUSH
16038: LD_INT 3
16040: PUSH
16041: LD_INT 4
16043: PUSH
16044: LD_INT 5
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: ST_TO_ADDR
16053: GO 16810
16055: LD_INT 12
16057: DOUBLE
16058: EQUAL
16059: IFTRUE 16063
16061: GO 16089
16063: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
16064: LD_ADDR_VAR 0 3
16068: PUSH
16069: LD_INT 2
16071: PUSH
16072: LD_INT 3
16074: PUSH
16075: LD_INT 4
16077: PUSH
16078: LD_INT 5
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: ST_TO_ADDR
16087: GO 16810
16089: LD_INT 13
16091: DOUBLE
16092: EQUAL
16093: IFTRUE 16097
16095: GO 16123
16097: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
16098: LD_ADDR_VAR 0 3
16102: PUSH
16103: LD_INT 2
16105: PUSH
16106: LD_INT 3
16108: PUSH
16109: LD_INT 4
16111: PUSH
16112: LD_INT 5
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: ST_TO_ADDR
16121: GO 16810
16123: LD_INT 14
16125: DOUBLE
16126: EQUAL
16127: IFTRUE 16131
16129: GO 16149
16131: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
16132: LD_ADDR_VAR 0 3
16136: PUSH
16137: LD_INT 4
16139: PUSH
16140: LD_INT 5
16142: PUSH
16143: EMPTY
16144: LIST
16145: LIST
16146: ST_TO_ADDR
16147: GO 16810
16149: LD_INT 6
16151: DOUBLE
16152: EQUAL
16153: IFTRUE 16157
16155: GO 16175
16157: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
16158: LD_ADDR_VAR 0 3
16162: PUSH
16163: LD_INT 4
16165: PUSH
16166: LD_INT 5
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: ST_TO_ADDR
16173: GO 16810
16175: LD_INT 10
16177: DOUBLE
16178: EQUAL
16179: IFTRUE 16183
16181: GO 16201
16183: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
16184: LD_ADDR_VAR 0 3
16188: PUSH
16189: LD_INT 4
16191: PUSH
16192: LD_INT 5
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: ST_TO_ADDR
16199: GO 16810
16201: LD_INT 22
16203: DOUBLE
16204: EQUAL
16205: IFTRUE 16209
16207: GO 16235
16209: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
16210: LD_ADDR_VAR 0 3
16214: PUSH
16215: LD_INT 11
16217: PUSH
16218: LD_INT 12
16220: PUSH
16221: LD_INT 13
16223: PUSH
16224: LD_INT 14
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: ST_TO_ADDR
16233: GO 16810
16235: LD_INT 23
16237: DOUBLE
16238: EQUAL
16239: IFTRUE 16243
16241: GO 16269
16243: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
16244: LD_ADDR_VAR 0 3
16248: PUSH
16249: LD_INT 11
16251: PUSH
16252: LD_INT 12
16254: PUSH
16255: LD_INT 13
16257: PUSH
16258: LD_INT 14
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: ST_TO_ADDR
16267: GO 16810
16269: LD_INT 24
16271: DOUBLE
16272: EQUAL
16273: IFTRUE 16277
16275: GO 16303
16277: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
16278: LD_ADDR_VAR 0 3
16282: PUSH
16283: LD_INT 11
16285: PUSH
16286: LD_INT 12
16288: PUSH
16289: LD_INT 13
16291: PUSH
16292: LD_INT 14
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: ST_TO_ADDR
16301: GO 16810
16303: LD_INT 30
16305: DOUBLE
16306: EQUAL
16307: IFTRUE 16311
16309: GO 16337
16311: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
16312: LD_ADDR_VAR 0 3
16316: PUSH
16317: LD_INT 11
16319: PUSH
16320: LD_INT 12
16322: PUSH
16323: LD_INT 13
16325: PUSH
16326: LD_INT 14
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: ST_TO_ADDR
16335: GO 16810
16337: LD_INT 25
16339: DOUBLE
16340: EQUAL
16341: IFTRUE 16345
16343: GO 16363
16345: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
16346: LD_ADDR_VAR 0 3
16350: PUSH
16351: LD_INT 13
16353: PUSH
16354: LD_INT 14
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: ST_TO_ADDR
16361: GO 16810
16363: LD_INT 27
16365: DOUBLE
16366: EQUAL
16367: IFTRUE 16371
16369: GO 16389
16371: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
16372: LD_ADDR_VAR 0 3
16376: PUSH
16377: LD_INT 13
16379: PUSH
16380: LD_INT 14
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: ST_TO_ADDR
16387: GO 16810
16389: LD_INT 28
16391: DOUBLE
16392: EQUAL
16393: IFTRUE 16397
16395: GO 16415
16397: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
16398: LD_ADDR_VAR 0 3
16402: PUSH
16403: LD_INT 13
16405: PUSH
16406: LD_INT 14
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: ST_TO_ADDR
16413: GO 16810
16415: LD_INT 29
16417: DOUBLE
16418: EQUAL
16419: IFTRUE 16423
16421: GO 16441
16423: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
16424: LD_ADDR_VAR 0 3
16428: PUSH
16429: LD_INT 13
16431: PUSH
16432: LD_INT 14
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: ST_TO_ADDR
16439: GO 16810
16441: LD_INT 31
16443: DOUBLE
16444: EQUAL
16445: IFTRUE 16449
16447: GO 16467
16449: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
16450: LD_ADDR_VAR 0 3
16454: PUSH
16455: LD_INT 13
16457: PUSH
16458: LD_INT 14
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: ST_TO_ADDR
16465: GO 16810
16467: LD_INT 26
16469: DOUBLE
16470: EQUAL
16471: IFTRUE 16475
16473: GO 16493
16475: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
16476: LD_ADDR_VAR 0 3
16480: PUSH
16481: LD_INT 13
16483: PUSH
16484: LD_INT 14
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: ST_TO_ADDR
16491: GO 16810
16493: LD_INT 42
16495: DOUBLE
16496: EQUAL
16497: IFTRUE 16501
16499: GO 16527
16501: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
16502: LD_ADDR_VAR 0 3
16506: PUSH
16507: LD_INT 21
16509: PUSH
16510: LD_INT 22
16512: PUSH
16513: LD_INT 23
16515: PUSH
16516: LD_INT 24
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: ST_TO_ADDR
16525: GO 16810
16527: LD_INT 43
16529: DOUBLE
16530: EQUAL
16531: IFTRUE 16535
16533: GO 16561
16535: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
16536: LD_ADDR_VAR 0 3
16540: PUSH
16541: LD_INT 21
16543: PUSH
16544: LD_INT 22
16546: PUSH
16547: LD_INT 23
16549: PUSH
16550: LD_INT 24
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: ST_TO_ADDR
16559: GO 16810
16561: LD_INT 44
16563: DOUBLE
16564: EQUAL
16565: IFTRUE 16569
16567: GO 16595
16569: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
16570: LD_ADDR_VAR 0 3
16574: PUSH
16575: LD_INT 21
16577: PUSH
16578: LD_INT 22
16580: PUSH
16581: LD_INT 23
16583: PUSH
16584: LD_INT 24
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: ST_TO_ADDR
16593: GO 16810
16595: LD_INT 45
16597: DOUBLE
16598: EQUAL
16599: IFTRUE 16603
16601: GO 16629
16603: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
16604: LD_ADDR_VAR 0 3
16608: PUSH
16609: LD_INT 21
16611: PUSH
16612: LD_INT 22
16614: PUSH
16615: LD_INT 23
16617: PUSH
16618: LD_INT 24
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: ST_TO_ADDR
16627: GO 16810
16629: LD_INT 49
16631: DOUBLE
16632: EQUAL
16633: IFTRUE 16637
16635: GO 16663
16637: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
16638: LD_ADDR_VAR 0 3
16642: PUSH
16643: LD_INT 21
16645: PUSH
16646: LD_INT 22
16648: PUSH
16649: LD_INT 23
16651: PUSH
16652: LD_INT 24
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: ST_TO_ADDR
16661: GO 16810
16663: LD_INT 51
16665: DOUBLE
16666: EQUAL
16667: IFTRUE 16671
16669: GO 16697
16671: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
16672: LD_ADDR_VAR 0 3
16676: PUSH
16677: LD_INT 21
16679: PUSH
16680: LD_INT 22
16682: PUSH
16683: LD_INT 23
16685: PUSH
16686: LD_INT 24
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: ST_TO_ADDR
16695: GO 16810
16697: LD_INT 52
16699: DOUBLE
16700: EQUAL
16701: IFTRUE 16705
16703: GO 16731
16705: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
16706: LD_ADDR_VAR 0 3
16710: PUSH
16711: LD_INT 21
16713: PUSH
16714: LD_INT 22
16716: PUSH
16717: LD_INT 23
16719: PUSH
16720: LD_INT 24
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: ST_TO_ADDR
16729: GO 16810
16731: LD_INT 53
16733: DOUBLE
16734: EQUAL
16735: IFTRUE 16739
16737: GO 16757
16739: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
16740: LD_ADDR_VAR 0 3
16744: PUSH
16745: LD_INT 23
16747: PUSH
16748: LD_INT 24
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: ST_TO_ADDR
16755: GO 16810
16757: LD_INT 46
16759: DOUBLE
16760: EQUAL
16761: IFTRUE 16765
16763: GO 16783
16765: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
16766: LD_ADDR_VAR 0 3
16770: PUSH
16771: LD_INT 23
16773: PUSH
16774: LD_INT 24
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: ST_TO_ADDR
16781: GO 16810
16783: LD_INT 47
16785: DOUBLE
16786: EQUAL
16787: IFTRUE 16791
16789: GO 16809
16791: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16792: LD_ADDR_VAR 0 3
16796: PUSH
16797: LD_INT 23
16799: PUSH
16800: LD_INT 24
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: ST_TO_ADDR
16807: GO 16810
16809: POP
// result := ( chassis in result ) ;
16810: LD_ADDR_VAR 0 3
16814: PUSH
16815: LD_VAR 0 1
16819: PUSH
16820: LD_VAR 0 3
16824: IN
16825: ST_TO_ADDR
// end ;
16826: LD_VAR 0 3
16830: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
16831: LD_INT 0
16833: PPUSH
16834: PPUSH
16835: PPUSH
16836: PPUSH
16837: PPUSH
16838: PPUSH
16839: PPUSH
// result := array ;
16840: LD_ADDR_VAR 0 5
16844: PUSH
16845: LD_VAR 0 1
16849: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
16850: LD_VAR 0 1
16854: NOT
16855: PUSH
16856: LD_VAR 0 2
16860: NOT
16861: OR
16862: PUSH
16863: LD_VAR 0 3
16867: NOT
16868: OR
16869: PUSH
16870: LD_VAR 0 2
16874: PUSH
16875: LD_VAR 0 1
16879: GREATER
16880: OR
16881: PUSH
16882: LD_VAR 0 3
16886: PUSH
16887: LD_VAR 0 1
16891: GREATER
16892: OR
16893: IFFALSE 16897
// exit ;
16895: GO 17193
// if direction then
16897: LD_VAR 0 4
16901: IFFALSE 16965
// begin d := 1 ;
16903: LD_ADDR_VAR 0 9
16907: PUSH
16908: LD_INT 1
16910: ST_TO_ADDR
// if i_from > i_to then
16911: LD_VAR 0 2
16915: PUSH
16916: LD_VAR 0 3
16920: GREATER
16921: IFFALSE 16947
// length := ( array - i_from ) + i_to else
16923: LD_ADDR_VAR 0 11
16927: PUSH
16928: LD_VAR 0 1
16932: PUSH
16933: LD_VAR 0 2
16937: MINUS
16938: PUSH
16939: LD_VAR 0 3
16943: PLUS
16944: ST_TO_ADDR
16945: GO 16963
// length := i_to - i_from ;
16947: LD_ADDR_VAR 0 11
16951: PUSH
16952: LD_VAR 0 3
16956: PUSH
16957: LD_VAR 0 2
16961: MINUS
16962: ST_TO_ADDR
// end else
16963: GO 17026
// begin d := - 1 ;
16965: LD_ADDR_VAR 0 9
16969: PUSH
16970: LD_INT 1
16972: NEG
16973: ST_TO_ADDR
// if i_from > i_to then
16974: LD_VAR 0 2
16978: PUSH
16979: LD_VAR 0 3
16983: GREATER
16984: IFFALSE 17004
// length := i_from - i_to else
16986: LD_ADDR_VAR 0 11
16990: PUSH
16991: LD_VAR 0 2
16995: PUSH
16996: LD_VAR 0 3
17000: MINUS
17001: ST_TO_ADDR
17002: GO 17026
// length := ( array - i_to ) + i_from ;
17004: LD_ADDR_VAR 0 11
17008: PUSH
17009: LD_VAR 0 1
17013: PUSH
17014: LD_VAR 0 3
17018: MINUS
17019: PUSH
17020: LD_VAR 0 2
17024: PLUS
17025: ST_TO_ADDR
// end ; if not length then
17026: LD_VAR 0 11
17030: NOT
17031: IFFALSE 17035
// exit ;
17033: GO 17193
// tmp := array ;
17035: LD_ADDR_VAR 0 10
17039: PUSH
17040: LD_VAR 0 1
17044: ST_TO_ADDR
// for i = 1 to length do
17045: LD_ADDR_VAR 0 6
17049: PUSH
17050: DOUBLE
17051: LD_INT 1
17053: DEC
17054: ST_TO_ADDR
17055: LD_VAR 0 11
17059: PUSH
17060: FOR_TO
17061: IFFALSE 17181
// begin for j = 1 to array do
17063: LD_ADDR_VAR 0 7
17067: PUSH
17068: DOUBLE
17069: LD_INT 1
17071: DEC
17072: ST_TO_ADDR
17073: LD_VAR 0 1
17077: PUSH
17078: FOR_TO
17079: IFFALSE 17167
// begin k := j + d ;
17081: LD_ADDR_VAR 0 8
17085: PUSH
17086: LD_VAR 0 7
17090: PUSH
17091: LD_VAR 0 9
17095: PLUS
17096: ST_TO_ADDR
// if k > array then
17097: LD_VAR 0 8
17101: PUSH
17102: LD_VAR 0 1
17106: GREATER
17107: IFFALSE 17117
// k := 1 ;
17109: LD_ADDR_VAR 0 8
17113: PUSH
17114: LD_INT 1
17116: ST_TO_ADDR
// if not k then
17117: LD_VAR 0 8
17121: NOT
17122: IFFALSE 17134
// k := array ;
17124: LD_ADDR_VAR 0 8
17128: PUSH
17129: LD_VAR 0 1
17133: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
17134: LD_ADDR_VAR 0 10
17138: PUSH
17139: LD_VAR 0 10
17143: PPUSH
17144: LD_VAR 0 8
17148: PPUSH
17149: LD_VAR 0 1
17153: PUSH
17154: LD_VAR 0 7
17158: ARRAY
17159: PPUSH
17160: CALL_OW 1
17164: ST_TO_ADDR
// end ;
17165: GO 17078
17167: POP
17168: POP
// array := tmp ;
17169: LD_ADDR_VAR 0 1
17173: PUSH
17174: LD_VAR 0 10
17178: ST_TO_ADDR
// end ;
17179: GO 17060
17181: POP
17182: POP
// result := array ;
17183: LD_ADDR_VAR 0 5
17187: PUSH
17188: LD_VAR 0 1
17192: ST_TO_ADDR
// end ;
17193: LD_VAR 0 5
17197: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
17198: LD_INT 0
17200: PPUSH
17201: PPUSH
// result := 0 ;
17202: LD_ADDR_VAR 0 3
17206: PUSH
17207: LD_INT 0
17209: ST_TO_ADDR
// if not array or not value in array then
17210: LD_VAR 0 1
17214: NOT
17215: PUSH
17216: LD_VAR 0 2
17220: PUSH
17221: LD_VAR 0 1
17225: IN
17226: NOT
17227: OR
17228: IFFALSE 17232
// exit ;
17230: GO 17286
// for i = 1 to array do
17232: LD_ADDR_VAR 0 4
17236: PUSH
17237: DOUBLE
17238: LD_INT 1
17240: DEC
17241: ST_TO_ADDR
17242: LD_VAR 0 1
17246: PUSH
17247: FOR_TO
17248: IFFALSE 17284
// if value = array [ i ] then
17250: LD_VAR 0 2
17254: PUSH
17255: LD_VAR 0 1
17259: PUSH
17260: LD_VAR 0 4
17264: ARRAY
17265: EQUAL
17266: IFFALSE 17282
// begin result := i ;
17268: LD_ADDR_VAR 0 3
17272: PUSH
17273: LD_VAR 0 4
17277: ST_TO_ADDR
// exit ;
17278: POP
17279: POP
17280: GO 17286
// end ;
17282: GO 17247
17284: POP
17285: POP
// end ;
17286: LD_VAR 0 3
17290: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
17291: LD_INT 0
17293: PPUSH
// vc_chassis := chassis ;
17294: LD_ADDR_OWVAR 37
17298: PUSH
17299: LD_VAR 0 1
17303: ST_TO_ADDR
// vc_engine := engine ;
17304: LD_ADDR_OWVAR 39
17308: PUSH
17309: LD_VAR 0 2
17313: ST_TO_ADDR
// vc_control := control ;
17314: LD_ADDR_OWVAR 38
17318: PUSH
17319: LD_VAR 0 3
17323: ST_TO_ADDR
// vc_weapon := weapon ;
17324: LD_ADDR_OWVAR 40
17328: PUSH
17329: LD_VAR 0 4
17333: ST_TO_ADDR
// vc_fuel_battery := fuel ;
17334: LD_ADDR_OWVAR 41
17338: PUSH
17339: LD_VAR 0 5
17343: ST_TO_ADDR
// end ;
17344: LD_VAR 0 6
17348: RET
// export function WantPlant ( unit ) ; var task ; begin
17349: LD_INT 0
17351: PPUSH
17352: PPUSH
// result := false ;
17353: LD_ADDR_VAR 0 2
17357: PUSH
17358: LD_INT 0
17360: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
17361: LD_ADDR_VAR 0 3
17365: PUSH
17366: LD_VAR 0 1
17370: PPUSH
17371: CALL_OW 437
17375: ST_TO_ADDR
// if task then
17376: LD_VAR 0 3
17380: IFFALSE 17408
// if task [ 1 ] [ 1 ] = p then
17382: LD_VAR 0 3
17386: PUSH
17387: LD_INT 1
17389: ARRAY
17390: PUSH
17391: LD_INT 1
17393: ARRAY
17394: PUSH
17395: LD_STRING p
17397: EQUAL
17398: IFFALSE 17408
// result := true ;
17400: LD_ADDR_VAR 0 2
17404: PUSH
17405: LD_INT 1
17407: ST_TO_ADDR
// end ;
17408: LD_VAR 0 2
17412: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
17413: LD_INT 0
17415: PPUSH
17416: PPUSH
17417: PPUSH
17418: PPUSH
// if pos < 1 then
17419: LD_VAR 0 2
17423: PUSH
17424: LD_INT 1
17426: LESS
17427: IFFALSE 17431
// exit ;
17429: GO 17734
// if pos = 1 then
17431: LD_VAR 0 2
17435: PUSH
17436: LD_INT 1
17438: EQUAL
17439: IFFALSE 17472
// result := Replace ( arr , pos [ 1 ] , value ) else
17441: LD_ADDR_VAR 0 4
17445: PUSH
17446: LD_VAR 0 1
17450: PPUSH
17451: LD_VAR 0 2
17455: PUSH
17456: LD_INT 1
17458: ARRAY
17459: PPUSH
17460: LD_VAR 0 3
17464: PPUSH
17465: CALL_OW 1
17469: ST_TO_ADDR
17470: GO 17734
// begin tmp := arr ;
17472: LD_ADDR_VAR 0 6
17476: PUSH
17477: LD_VAR 0 1
17481: ST_TO_ADDR
// s_arr := [ tmp ] ;
17482: LD_ADDR_VAR 0 7
17486: PUSH
17487: LD_VAR 0 6
17491: PUSH
17492: EMPTY
17493: LIST
17494: ST_TO_ADDR
// for i = 1 to pos - 1 do
17495: LD_ADDR_VAR 0 5
17499: PUSH
17500: DOUBLE
17501: LD_INT 1
17503: DEC
17504: ST_TO_ADDR
17505: LD_VAR 0 2
17509: PUSH
17510: LD_INT 1
17512: MINUS
17513: PUSH
17514: FOR_TO
17515: IFFALSE 17560
// begin tmp := tmp [ pos [ i ] ] ;
17517: LD_ADDR_VAR 0 6
17521: PUSH
17522: LD_VAR 0 6
17526: PUSH
17527: LD_VAR 0 2
17531: PUSH
17532: LD_VAR 0 5
17536: ARRAY
17537: ARRAY
17538: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
17539: LD_ADDR_VAR 0 7
17543: PUSH
17544: LD_VAR 0 7
17548: PUSH
17549: LD_VAR 0 6
17553: PUSH
17554: EMPTY
17555: LIST
17556: ADD
17557: ST_TO_ADDR
// end ;
17558: GO 17514
17560: POP
17561: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
17562: LD_ADDR_VAR 0 6
17566: PUSH
17567: LD_VAR 0 6
17571: PPUSH
17572: LD_VAR 0 2
17576: PUSH
17577: LD_VAR 0 2
17581: ARRAY
17582: PPUSH
17583: LD_VAR 0 3
17587: PPUSH
17588: CALL_OW 1
17592: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
17593: LD_ADDR_VAR 0 7
17597: PUSH
17598: LD_VAR 0 7
17602: PPUSH
17603: LD_VAR 0 7
17607: PPUSH
17608: LD_VAR 0 6
17612: PPUSH
17613: CALL_OW 1
17617: ST_TO_ADDR
// for i = s_arr downto 2 do
17618: LD_ADDR_VAR 0 5
17622: PUSH
17623: DOUBLE
17624: LD_VAR 0 7
17628: INC
17629: ST_TO_ADDR
17630: LD_INT 2
17632: PUSH
17633: FOR_DOWNTO
17634: IFFALSE 17718
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
17636: LD_ADDR_VAR 0 6
17640: PUSH
17641: LD_VAR 0 7
17645: PUSH
17646: LD_VAR 0 5
17650: PUSH
17651: LD_INT 1
17653: MINUS
17654: ARRAY
17655: PPUSH
17656: LD_VAR 0 2
17660: PUSH
17661: LD_VAR 0 5
17665: PUSH
17666: LD_INT 1
17668: MINUS
17669: ARRAY
17670: PPUSH
17671: LD_VAR 0 7
17675: PUSH
17676: LD_VAR 0 5
17680: ARRAY
17681: PPUSH
17682: CALL_OW 1
17686: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
17687: LD_ADDR_VAR 0 7
17691: PUSH
17692: LD_VAR 0 7
17696: PPUSH
17697: LD_VAR 0 5
17701: PUSH
17702: LD_INT 1
17704: MINUS
17705: PPUSH
17706: LD_VAR 0 6
17710: PPUSH
17711: CALL_OW 1
17715: ST_TO_ADDR
// end ;
17716: GO 17633
17718: POP
17719: POP
// result := s_arr [ 1 ] ;
17720: LD_ADDR_VAR 0 4
17724: PUSH
17725: LD_VAR 0 7
17729: PUSH
17730: LD_INT 1
17732: ARRAY
17733: ST_TO_ADDR
// end ; end ;
17734: LD_VAR 0 4
17738: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
17739: LD_INT 0
17741: PPUSH
17742: PPUSH
// if not list then
17743: LD_VAR 0 1
17747: NOT
17748: IFFALSE 17752
// exit ;
17750: GO 17843
// i := list [ pos1 ] ;
17752: LD_ADDR_VAR 0 5
17756: PUSH
17757: LD_VAR 0 1
17761: PUSH
17762: LD_VAR 0 2
17766: ARRAY
17767: ST_TO_ADDR
// if not i then
17768: LD_VAR 0 5
17772: NOT
17773: IFFALSE 17777
// exit ;
17775: GO 17843
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
17777: LD_ADDR_VAR 0 1
17781: PUSH
17782: LD_VAR 0 1
17786: PPUSH
17787: LD_VAR 0 2
17791: PPUSH
17792: LD_VAR 0 1
17796: PUSH
17797: LD_VAR 0 3
17801: ARRAY
17802: PPUSH
17803: CALL_OW 1
17807: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
17808: LD_ADDR_VAR 0 1
17812: PUSH
17813: LD_VAR 0 1
17817: PPUSH
17818: LD_VAR 0 3
17822: PPUSH
17823: LD_VAR 0 5
17827: PPUSH
17828: CALL_OW 1
17832: ST_TO_ADDR
// result := list ;
17833: LD_ADDR_VAR 0 4
17837: PUSH
17838: LD_VAR 0 1
17842: ST_TO_ADDR
// end ;
17843: LD_VAR 0 4
17847: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
17848: LD_INT 0
17850: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
17851: LD_ADDR_VAR 0 5
17855: PUSH
17856: LD_VAR 0 1
17860: PPUSH
17861: CALL_OW 250
17865: PPUSH
17866: LD_VAR 0 1
17870: PPUSH
17871: CALL_OW 251
17875: PPUSH
17876: LD_VAR 0 2
17880: PPUSH
17881: LD_VAR 0 3
17885: PPUSH
17886: LD_VAR 0 4
17890: PPUSH
17891: CALL 17901 0 5
17895: ST_TO_ADDR
// end ;
17896: LD_VAR 0 5
17900: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
17901: LD_INT 0
17903: PPUSH
17904: PPUSH
17905: PPUSH
17906: PPUSH
// if not list then
17907: LD_VAR 0 3
17911: NOT
17912: IFFALSE 17916
// exit ;
17914: GO 18304
// result := [ ] ;
17916: LD_ADDR_VAR 0 6
17920: PUSH
17921: EMPTY
17922: ST_TO_ADDR
// for i in list do
17923: LD_ADDR_VAR 0 7
17927: PUSH
17928: LD_VAR 0 3
17932: PUSH
17933: FOR_IN
17934: IFFALSE 18136
// begin tmp := GetDistUnitXY ( i , x , y ) ;
17936: LD_ADDR_VAR 0 9
17940: PUSH
17941: LD_VAR 0 7
17945: PPUSH
17946: LD_VAR 0 1
17950: PPUSH
17951: LD_VAR 0 2
17955: PPUSH
17956: CALL_OW 297
17960: ST_TO_ADDR
// if not result then
17961: LD_VAR 0 6
17965: NOT
17966: IFFALSE 17992
// result := [ [ i , tmp ] ] else
17968: LD_ADDR_VAR 0 6
17972: PUSH
17973: LD_VAR 0 7
17977: PUSH
17978: LD_VAR 0 9
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PUSH
17987: EMPTY
17988: LIST
17989: ST_TO_ADDR
17990: GO 18134
// begin if result [ result ] [ 2 ] < tmp then
17992: LD_VAR 0 6
17996: PUSH
17997: LD_VAR 0 6
18001: ARRAY
18002: PUSH
18003: LD_INT 2
18005: ARRAY
18006: PUSH
18007: LD_VAR 0 9
18011: LESS
18012: IFFALSE 18054
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
18014: LD_ADDR_VAR 0 6
18018: PUSH
18019: LD_VAR 0 6
18023: PPUSH
18024: LD_VAR 0 6
18028: PUSH
18029: LD_INT 1
18031: PLUS
18032: PPUSH
18033: LD_VAR 0 7
18037: PUSH
18038: LD_VAR 0 9
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PPUSH
18047: CALL_OW 2
18051: ST_TO_ADDR
18052: GO 18134
// for j = 1 to result do
18054: LD_ADDR_VAR 0 8
18058: PUSH
18059: DOUBLE
18060: LD_INT 1
18062: DEC
18063: ST_TO_ADDR
18064: LD_VAR 0 6
18068: PUSH
18069: FOR_TO
18070: IFFALSE 18132
// begin if tmp < result [ j ] [ 2 ] then
18072: LD_VAR 0 9
18076: PUSH
18077: LD_VAR 0 6
18081: PUSH
18082: LD_VAR 0 8
18086: ARRAY
18087: PUSH
18088: LD_INT 2
18090: ARRAY
18091: LESS
18092: IFFALSE 18130
// begin result := Insert ( result , j , [ i , tmp ] ) ;
18094: LD_ADDR_VAR 0 6
18098: PUSH
18099: LD_VAR 0 6
18103: PPUSH
18104: LD_VAR 0 8
18108: PPUSH
18109: LD_VAR 0 7
18113: PUSH
18114: LD_VAR 0 9
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PPUSH
18123: CALL_OW 2
18127: ST_TO_ADDR
// break ;
18128: GO 18132
// end ; end ;
18130: GO 18069
18132: POP
18133: POP
// end ; end ;
18134: GO 17933
18136: POP
18137: POP
// if result and not asc then
18138: LD_VAR 0 6
18142: PUSH
18143: LD_VAR 0 4
18147: NOT
18148: AND
18149: IFFALSE 18224
// begin tmp := result ;
18151: LD_ADDR_VAR 0 9
18155: PUSH
18156: LD_VAR 0 6
18160: ST_TO_ADDR
// for i = tmp downto 1 do
18161: LD_ADDR_VAR 0 7
18165: PUSH
18166: DOUBLE
18167: LD_VAR 0 9
18171: INC
18172: ST_TO_ADDR
18173: LD_INT 1
18175: PUSH
18176: FOR_DOWNTO
18177: IFFALSE 18222
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
18179: LD_ADDR_VAR 0 6
18183: PUSH
18184: LD_VAR 0 6
18188: PPUSH
18189: LD_VAR 0 9
18193: PUSH
18194: LD_VAR 0 7
18198: MINUS
18199: PUSH
18200: LD_INT 1
18202: PLUS
18203: PPUSH
18204: LD_VAR 0 9
18208: PUSH
18209: LD_VAR 0 7
18213: ARRAY
18214: PPUSH
18215: CALL_OW 1
18219: ST_TO_ADDR
18220: GO 18176
18222: POP
18223: POP
// end ; tmp := [ ] ;
18224: LD_ADDR_VAR 0 9
18228: PUSH
18229: EMPTY
18230: ST_TO_ADDR
// if mode then
18231: LD_VAR 0 5
18235: IFFALSE 18304
// begin for i = 1 to result do
18237: LD_ADDR_VAR 0 7
18241: PUSH
18242: DOUBLE
18243: LD_INT 1
18245: DEC
18246: ST_TO_ADDR
18247: LD_VAR 0 6
18251: PUSH
18252: FOR_TO
18253: IFFALSE 18292
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
18255: LD_ADDR_VAR 0 9
18259: PUSH
18260: LD_VAR 0 9
18264: PPUSH
18265: LD_VAR 0 7
18269: PPUSH
18270: LD_VAR 0 6
18274: PUSH
18275: LD_VAR 0 7
18279: ARRAY
18280: PUSH
18281: LD_INT 1
18283: ARRAY
18284: PPUSH
18285: CALL_OW 1
18289: ST_TO_ADDR
18290: GO 18252
18292: POP
18293: POP
// result := tmp ;
18294: LD_ADDR_VAR 0 6
18298: PUSH
18299: LD_VAR 0 9
18303: ST_TO_ADDR
// end ; end ;
18304: LD_VAR 0 6
18308: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
18309: LD_INT 0
18311: PPUSH
18312: PPUSH
18313: PPUSH
18314: PPUSH
18315: PPUSH
18316: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
18317: LD_ADDR_VAR 0 5
18321: PUSH
18322: LD_INT 0
18324: PUSH
18325: LD_INT 0
18327: PUSH
18328: LD_INT 0
18330: PUSH
18331: EMPTY
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: ST_TO_ADDR
// if not x or not y then
18339: LD_VAR 0 2
18343: NOT
18344: PUSH
18345: LD_VAR 0 3
18349: NOT
18350: OR
18351: IFFALSE 18355
// exit ;
18353: GO 20001
// if not range then
18355: LD_VAR 0 4
18359: NOT
18360: IFFALSE 18370
// range := 10 ;
18362: LD_ADDR_VAR 0 4
18366: PUSH
18367: LD_INT 10
18369: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18370: LD_ADDR_VAR 0 8
18374: PUSH
18375: LD_INT 81
18377: PUSH
18378: LD_VAR 0 1
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PUSH
18387: LD_INT 92
18389: PUSH
18390: LD_VAR 0 2
18394: PUSH
18395: LD_VAR 0 3
18399: PUSH
18400: LD_VAR 0 4
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 3
18413: PUSH
18414: LD_INT 21
18416: PUSH
18417: LD_INT 3
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: LIST
18432: PPUSH
18433: CALL_OW 69
18437: ST_TO_ADDR
// if not tmp then
18438: LD_VAR 0 8
18442: NOT
18443: IFFALSE 18447
// exit ;
18445: GO 20001
// for i in tmp do
18447: LD_ADDR_VAR 0 6
18451: PUSH
18452: LD_VAR 0 8
18456: PUSH
18457: FOR_IN
18458: IFFALSE 19976
// begin points := [ 0 , 0 , 0 ] ;
18460: LD_ADDR_VAR 0 9
18464: PUSH
18465: LD_INT 0
18467: PUSH
18468: LD_INT 0
18470: PUSH
18471: LD_INT 0
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: LIST
18478: ST_TO_ADDR
// bpoints := 1 ;
18479: LD_ADDR_VAR 0 10
18483: PUSH
18484: LD_INT 1
18486: ST_TO_ADDR
// case GetType ( i ) of unit_human :
18487: LD_VAR 0 6
18491: PPUSH
18492: CALL_OW 247
18496: PUSH
18497: LD_INT 1
18499: DOUBLE
18500: EQUAL
18501: IFTRUE 18505
18503: GO 19083
18505: POP
// begin if GetClass ( i ) = 1 then
18506: LD_VAR 0 6
18510: PPUSH
18511: CALL_OW 257
18515: PUSH
18516: LD_INT 1
18518: EQUAL
18519: IFFALSE 18540
// points := [ 10 , 5 , 3 ] ;
18521: LD_ADDR_VAR 0 9
18525: PUSH
18526: LD_INT 10
18528: PUSH
18529: LD_INT 5
18531: PUSH
18532: LD_INT 3
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: LIST
18539: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
18540: LD_VAR 0 6
18544: PPUSH
18545: CALL_OW 257
18549: PUSH
18550: LD_INT 2
18552: PUSH
18553: LD_INT 3
18555: PUSH
18556: LD_INT 4
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: LIST
18563: IN
18564: IFFALSE 18585
// points := [ 3 , 2 , 1 ] ;
18566: LD_ADDR_VAR 0 9
18570: PUSH
18571: LD_INT 3
18573: PUSH
18574: LD_INT 2
18576: PUSH
18577: LD_INT 1
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: LIST
18584: ST_TO_ADDR
// if GetClass ( i ) = 5 then
18585: LD_VAR 0 6
18589: PPUSH
18590: CALL_OW 257
18594: PUSH
18595: LD_INT 5
18597: EQUAL
18598: IFFALSE 18619
// points := [ 130 , 5 , 2 ] ;
18600: LD_ADDR_VAR 0 9
18604: PUSH
18605: LD_INT 130
18607: PUSH
18608: LD_INT 5
18610: PUSH
18611: LD_INT 2
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: LIST
18618: ST_TO_ADDR
// if GetClass ( i ) = 8 then
18619: LD_VAR 0 6
18623: PPUSH
18624: CALL_OW 257
18628: PUSH
18629: LD_INT 8
18631: EQUAL
18632: IFFALSE 18653
// points := [ 35 , 35 , 30 ] ;
18634: LD_ADDR_VAR 0 9
18638: PUSH
18639: LD_INT 35
18641: PUSH
18642: LD_INT 35
18644: PUSH
18645: LD_INT 30
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: LIST
18652: ST_TO_ADDR
// if GetClass ( i ) = 9 then
18653: LD_VAR 0 6
18657: PPUSH
18658: CALL_OW 257
18662: PUSH
18663: LD_INT 9
18665: EQUAL
18666: IFFALSE 18687
// points := [ 20 , 55 , 40 ] ;
18668: LD_ADDR_VAR 0 9
18672: PUSH
18673: LD_INT 20
18675: PUSH
18676: LD_INT 55
18678: PUSH
18679: LD_INT 40
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: LIST
18686: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
18687: LD_VAR 0 6
18691: PPUSH
18692: CALL_OW 257
18696: PUSH
18697: LD_INT 12
18699: PUSH
18700: LD_INT 16
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: IN
18707: IFFALSE 18728
// points := [ 5 , 3 , 2 ] ;
18709: LD_ADDR_VAR 0 9
18713: PUSH
18714: LD_INT 5
18716: PUSH
18717: LD_INT 3
18719: PUSH
18720: LD_INT 2
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: LIST
18727: ST_TO_ADDR
// if GetClass ( i ) = 17 then
18728: LD_VAR 0 6
18732: PPUSH
18733: CALL_OW 257
18737: PUSH
18738: LD_INT 17
18740: EQUAL
18741: IFFALSE 18762
// points := [ 100 , 50 , 75 ] ;
18743: LD_ADDR_VAR 0 9
18747: PUSH
18748: LD_INT 100
18750: PUSH
18751: LD_INT 50
18753: PUSH
18754: LD_INT 75
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: LIST
18761: ST_TO_ADDR
// if GetClass ( i ) = 15 then
18762: LD_VAR 0 6
18766: PPUSH
18767: CALL_OW 257
18771: PUSH
18772: LD_INT 15
18774: EQUAL
18775: IFFALSE 18796
// points := [ 10 , 5 , 3 ] ;
18777: LD_ADDR_VAR 0 9
18781: PUSH
18782: LD_INT 10
18784: PUSH
18785: LD_INT 5
18787: PUSH
18788: LD_INT 3
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: LIST
18795: ST_TO_ADDR
// if GetClass ( i ) = 14 then
18796: LD_VAR 0 6
18800: PPUSH
18801: CALL_OW 257
18805: PUSH
18806: LD_INT 14
18808: EQUAL
18809: IFFALSE 18830
// points := [ 10 , 0 , 0 ] ;
18811: LD_ADDR_VAR 0 9
18815: PUSH
18816: LD_INT 10
18818: PUSH
18819: LD_INT 0
18821: PUSH
18822: LD_INT 0
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: LIST
18829: ST_TO_ADDR
// if GetClass ( i ) = 11 then
18830: LD_VAR 0 6
18834: PPUSH
18835: CALL_OW 257
18839: PUSH
18840: LD_INT 11
18842: EQUAL
18843: IFFALSE 18864
// points := [ 30 , 10 , 5 ] ;
18845: LD_ADDR_VAR 0 9
18849: PUSH
18850: LD_INT 30
18852: PUSH
18853: LD_INT 10
18855: PUSH
18856: LD_INT 5
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: LIST
18863: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
18864: LD_VAR 0 1
18868: PPUSH
18869: LD_INT 5
18871: PPUSH
18872: CALL_OW 321
18876: PUSH
18877: LD_INT 2
18879: EQUAL
18880: IFFALSE 18897
// bpoints := bpoints * 1.8 ;
18882: LD_ADDR_VAR 0 10
18886: PUSH
18887: LD_VAR 0 10
18891: PUSH
18892: LD_REAL  1.80000000000000E+0000
18895: MUL
18896: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
18897: LD_VAR 0 6
18901: PPUSH
18902: CALL_OW 257
18906: PUSH
18907: LD_INT 1
18909: PUSH
18910: LD_INT 2
18912: PUSH
18913: LD_INT 3
18915: PUSH
18916: LD_INT 4
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: IN
18925: PUSH
18926: LD_VAR 0 1
18930: PPUSH
18931: LD_INT 51
18933: PPUSH
18934: CALL_OW 321
18938: PUSH
18939: LD_INT 2
18941: EQUAL
18942: AND
18943: IFFALSE 18960
// bpoints := bpoints * 1.2 ;
18945: LD_ADDR_VAR 0 10
18949: PUSH
18950: LD_VAR 0 10
18954: PUSH
18955: LD_REAL  1.20000000000000E+0000
18958: MUL
18959: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
18960: LD_VAR 0 6
18964: PPUSH
18965: CALL_OW 257
18969: PUSH
18970: LD_INT 5
18972: PUSH
18973: LD_INT 7
18975: PUSH
18976: LD_INT 9
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: LIST
18983: IN
18984: PUSH
18985: LD_VAR 0 1
18989: PPUSH
18990: LD_INT 52
18992: PPUSH
18993: CALL_OW 321
18997: PUSH
18998: LD_INT 2
19000: EQUAL
19001: AND
19002: IFFALSE 19019
// bpoints := bpoints * 1.5 ;
19004: LD_ADDR_VAR 0 10
19008: PUSH
19009: LD_VAR 0 10
19013: PUSH
19014: LD_REAL  1.50000000000000E+0000
19017: MUL
19018: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
19019: LD_VAR 0 1
19023: PPUSH
19024: LD_INT 66
19026: PPUSH
19027: CALL_OW 321
19031: PUSH
19032: LD_INT 2
19034: EQUAL
19035: IFFALSE 19052
// bpoints := bpoints * 1.1 ;
19037: LD_ADDR_VAR 0 10
19041: PUSH
19042: LD_VAR 0 10
19046: PUSH
19047: LD_REAL  1.10000000000000E+0000
19050: MUL
19051: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
19052: LD_ADDR_VAR 0 10
19056: PUSH
19057: LD_VAR 0 10
19061: PUSH
19062: LD_VAR 0 6
19066: PPUSH
19067: LD_INT 1
19069: PPUSH
19070: CALL_OW 259
19074: PUSH
19075: LD_REAL  1.15000000000000E+0000
19078: MUL
19079: MUL
19080: ST_TO_ADDR
// end ; unit_vehicle :
19081: GO 19905
19083: LD_INT 2
19085: DOUBLE
19086: EQUAL
19087: IFTRUE 19091
19089: GO 19893
19091: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
19092: LD_VAR 0 6
19096: PPUSH
19097: CALL_OW 264
19101: PUSH
19102: LD_INT 2
19104: PUSH
19105: LD_INT 42
19107: PUSH
19108: LD_INT 24
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: LIST
19115: IN
19116: IFFALSE 19137
// points := [ 25 , 5 , 3 ] ;
19118: LD_ADDR_VAR 0 9
19122: PUSH
19123: LD_INT 25
19125: PUSH
19126: LD_INT 5
19128: PUSH
19129: LD_INT 3
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: LIST
19136: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
19137: LD_VAR 0 6
19141: PPUSH
19142: CALL_OW 264
19146: PUSH
19147: LD_INT 4
19149: PUSH
19150: LD_INT 43
19152: PUSH
19153: LD_INT 25
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: LIST
19160: IN
19161: IFFALSE 19182
// points := [ 40 , 15 , 5 ] ;
19163: LD_ADDR_VAR 0 9
19167: PUSH
19168: LD_INT 40
19170: PUSH
19171: LD_INT 15
19173: PUSH
19174: LD_INT 5
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: LIST
19181: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
19182: LD_VAR 0 6
19186: PPUSH
19187: CALL_OW 264
19191: PUSH
19192: LD_INT 3
19194: PUSH
19195: LD_INT 23
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: IN
19202: IFFALSE 19223
// points := [ 7 , 25 , 8 ] ;
19204: LD_ADDR_VAR 0 9
19208: PUSH
19209: LD_INT 7
19211: PUSH
19212: LD_INT 25
19214: PUSH
19215: LD_INT 8
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: LIST
19222: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
19223: LD_VAR 0 6
19227: PPUSH
19228: CALL_OW 264
19232: PUSH
19233: LD_INT 5
19235: PUSH
19236: LD_INT 27
19238: PUSH
19239: LD_INT 44
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: LIST
19246: IN
19247: IFFALSE 19268
// points := [ 14 , 50 , 16 ] ;
19249: LD_ADDR_VAR 0 9
19253: PUSH
19254: LD_INT 14
19256: PUSH
19257: LD_INT 50
19259: PUSH
19260: LD_INT 16
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: LIST
19267: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
19268: LD_VAR 0 6
19272: PPUSH
19273: CALL_OW 264
19277: PUSH
19278: LD_INT 6
19280: PUSH
19281: LD_INT 46
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: IN
19288: IFFALSE 19309
// points := [ 32 , 120 , 70 ] ;
19290: LD_ADDR_VAR 0 9
19294: PUSH
19295: LD_INT 32
19297: PUSH
19298: LD_INT 120
19300: PUSH
19301: LD_INT 70
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: LIST
19308: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
19309: LD_VAR 0 6
19313: PPUSH
19314: CALL_OW 264
19318: PUSH
19319: LD_INT 7
19321: PUSH
19322: LD_INT 28
19324: PUSH
19325: LD_INT 45
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: IN
19333: IFFALSE 19354
// points := [ 35 , 20 , 45 ] ;
19335: LD_ADDR_VAR 0 9
19339: PUSH
19340: LD_INT 35
19342: PUSH
19343: LD_INT 20
19345: PUSH
19346: LD_INT 45
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: LIST
19353: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
19354: LD_VAR 0 6
19358: PPUSH
19359: CALL_OW 264
19363: PUSH
19364: LD_INT 47
19366: PUSH
19367: EMPTY
19368: LIST
19369: IN
19370: IFFALSE 19391
// points := [ 67 , 45 , 75 ] ;
19372: LD_ADDR_VAR 0 9
19376: PUSH
19377: LD_INT 67
19379: PUSH
19380: LD_INT 45
19382: PUSH
19383: LD_INT 75
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: LIST
19390: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
19391: LD_VAR 0 6
19395: PPUSH
19396: CALL_OW 264
19400: PUSH
19401: LD_INT 26
19403: PUSH
19404: EMPTY
19405: LIST
19406: IN
19407: IFFALSE 19428
// points := [ 120 , 30 , 80 ] ;
19409: LD_ADDR_VAR 0 9
19413: PUSH
19414: LD_INT 120
19416: PUSH
19417: LD_INT 30
19419: PUSH
19420: LD_INT 80
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: LIST
19427: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
19428: LD_VAR 0 6
19432: PPUSH
19433: CALL_OW 264
19437: PUSH
19438: LD_INT 22
19440: PUSH
19441: EMPTY
19442: LIST
19443: IN
19444: IFFALSE 19465
// points := [ 40 , 1 , 1 ] ;
19446: LD_ADDR_VAR 0 9
19450: PUSH
19451: LD_INT 40
19453: PUSH
19454: LD_INT 1
19456: PUSH
19457: LD_INT 1
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: LIST
19464: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
19465: LD_VAR 0 6
19469: PPUSH
19470: CALL_OW 264
19474: PUSH
19475: LD_INT 29
19477: PUSH
19478: EMPTY
19479: LIST
19480: IN
19481: IFFALSE 19502
// points := [ 70 , 200 , 400 ] ;
19483: LD_ADDR_VAR 0 9
19487: PUSH
19488: LD_INT 70
19490: PUSH
19491: LD_INT 200
19493: PUSH
19494: LD_INT 400
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: LIST
19501: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
19502: LD_VAR 0 6
19506: PPUSH
19507: CALL_OW 264
19511: PUSH
19512: LD_INT 14
19514: PUSH
19515: LD_INT 53
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: IN
19522: IFFALSE 19543
// points := [ 40 , 10 , 20 ] ;
19524: LD_ADDR_VAR 0 9
19528: PUSH
19529: LD_INT 40
19531: PUSH
19532: LD_INT 10
19534: PUSH
19535: LD_INT 20
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: LIST
19542: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
19543: LD_VAR 0 6
19547: PPUSH
19548: CALL_OW 264
19552: PUSH
19553: LD_INT 9
19555: PUSH
19556: EMPTY
19557: LIST
19558: IN
19559: IFFALSE 19580
// points := [ 5 , 70 , 20 ] ;
19561: LD_ADDR_VAR 0 9
19565: PUSH
19566: LD_INT 5
19568: PUSH
19569: LD_INT 70
19571: PUSH
19572: LD_INT 20
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: LIST
19579: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
19580: LD_VAR 0 6
19584: PPUSH
19585: CALL_OW 264
19589: PUSH
19590: LD_INT 10
19592: PUSH
19593: EMPTY
19594: LIST
19595: IN
19596: IFFALSE 19617
// points := [ 35 , 110 , 70 ] ;
19598: LD_ADDR_VAR 0 9
19602: PUSH
19603: LD_INT 35
19605: PUSH
19606: LD_INT 110
19608: PUSH
19609: LD_INT 70
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: LIST
19616: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
19617: LD_VAR 0 6
19621: PPUSH
19622: CALL_OW 265
19626: PUSH
19627: LD_INT 25
19629: EQUAL
19630: IFFALSE 19651
// points := [ 80 , 65 , 100 ] ;
19632: LD_ADDR_VAR 0 9
19636: PUSH
19637: LD_INT 80
19639: PUSH
19640: LD_INT 65
19642: PUSH
19643: LD_INT 100
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: LIST
19650: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
19651: LD_VAR 0 6
19655: PPUSH
19656: CALL_OW 263
19660: PUSH
19661: LD_INT 1
19663: EQUAL
19664: IFFALSE 19699
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
19666: LD_ADDR_VAR 0 10
19670: PUSH
19671: LD_VAR 0 10
19675: PUSH
19676: LD_VAR 0 6
19680: PPUSH
19681: CALL_OW 311
19685: PPUSH
19686: LD_INT 3
19688: PPUSH
19689: CALL_OW 259
19693: PUSH
19694: LD_INT 4
19696: MUL
19697: MUL
19698: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
19699: LD_VAR 0 6
19703: PPUSH
19704: CALL_OW 263
19708: PUSH
19709: LD_INT 2
19711: EQUAL
19712: IFFALSE 19763
// begin j := IsControledBy ( i ) ;
19714: LD_ADDR_VAR 0 7
19718: PUSH
19719: LD_VAR 0 6
19723: PPUSH
19724: CALL_OW 312
19728: ST_TO_ADDR
// if j then
19729: LD_VAR 0 7
19733: IFFALSE 19763
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
19735: LD_ADDR_VAR 0 10
19739: PUSH
19740: LD_VAR 0 10
19744: PUSH
19745: LD_VAR 0 7
19749: PPUSH
19750: LD_INT 3
19752: PPUSH
19753: CALL_OW 259
19757: PUSH
19758: LD_INT 3
19760: MUL
19761: MUL
19762: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
19763: LD_VAR 0 6
19767: PPUSH
19768: CALL_OW 264
19772: PUSH
19773: LD_INT 5
19775: PUSH
19776: LD_INT 6
19778: PUSH
19779: LD_INT 46
19781: PUSH
19782: LD_INT 44
19784: PUSH
19785: LD_INT 47
19787: PUSH
19788: LD_INT 45
19790: PUSH
19791: LD_INT 28
19793: PUSH
19794: LD_INT 7
19796: PUSH
19797: LD_INT 27
19799: PUSH
19800: LD_INT 29
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: IN
19815: PUSH
19816: LD_VAR 0 1
19820: PPUSH
19821: LD_INT 52
19823: PPUSH
19824: CALL_OW 321
19828: PUSH
19829: LD_INT 2
19831: EQUAL
19832: AND
19833: IFFALSE 19850
// bpoints := bpoints * 1.2 ;
19835: LD_ADDR_VAR 0 10
19839: PUSH
19840: LD_VAR 0 10
19844: PUSH
19845: LD_REAL  1.20000000000000E+0000
19848: MUL
19849: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
19850: LD_VAR 0 6
19854: PPUSH
19855: CALL_OW 264
19859: PUSH
19860: LD_INT 6
19862: PUSH
19863: LD_INT 46
19865: PUSH
19866: LD_INT 47
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: LIST
19873: IN
19874: IFFALSE 19891
// bpoints := bpoints * 1.2 ;
19876: LD_ADDR_VAR 0 10
19880: PUSH
19881: LD_VAR 0 10
19885: PUSH
19886: LD_REAL  1.20000000000000E+0000
19889: MUL
19890: ST_TO_ADDR
// end ; unit_building :
19891: GO 19905
19893: LD_INT 3
19895: DOUBLE
19896: EQUAL
19897: IFTRUE 19901
19899: GO 19904
19901: POP
// ; end ;
19902: GO 19905
19904: POP
// for j = 1 to 3 do
19905: LD_ADDR_VAR 0 7
19909: PUSH
19910: DOUBLE
19911: LD_INT 1
19913: DEC
19914: ST_TO_ADDR
19915: LD_INT 3
19917: PUSH
19918: FOR_TO
19919: IFFALSE 19972
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
19921: LD_ADDR_VAR 0 5
19925: PUSH
19926: LD_VAR 0 5
19930: PPUSH
19931: LD_VAR 0 7
19935: PPUSH
19936: LD_VAR 0 5
19940: PUSH
19941: LD_VAR 0 7
19945: ARRAY
19946: PUSH
19947: LD_VAR 0 9
19951: PUSH
19952: LD_VAR 0 7
19956: ARRAY
19957: PUSH
19958: LD_VAR 0 10
19962: MUL
19963: PLUS
19964: PPUSH
19965: CALL_OW 1
19969: ST_TO_ADDR
19970: GO 19918
19972: POP
19973: POP
// end ;
19974: GO 18457
19976: POP
19977: POP
// result := Replace ( result , 4 , tmp ) ;
19978: LD_ADDR_VAR 0 5
19982: PUSH
19983: LD_VAR 0 5
19987: PPUSH
19988: LD_INT 4
19990: PPUSH
19991: LD_VAR 0 8
19995: PPUSH
19996: CALL_OW 1
20000: ST_TO_ADDR
// end ;
20001: LD_VAR 0 5
20005: RET
// export function DangerAtRange ( unit , range ) ; begin
20006: LD_INT 0
20008: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
20009: LD_ADDR_VAR 0 3
20013: PUSH
20014: LD_VAR 0 1
20018: PPUSH
20019: CALL_OW 255
20023: PPUSH
20024: LD_VAR 0 1
20028: PPUSH
20029: CALL_OW 250
20033: PPUSH
20034: LD_VAR 0 1
20038: PPUSH
20039: CALL_OW 251
20043: PPUSH
20044: LD_VAR 0 2
20048: PPUSH
20049: CALL 18309 0 4
20053: ST_TO_ADDR
// end ;
20054: LD_VAR 0 3
20058: RET
// export function DangerInArea ( side , area ) ; begin
20059: LD_INT 0
20061: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
20062: LD_ADDR_VAR 0 3
20066: PUSH
20067: LD_VAR 0 2
20071: PPUSH
20072: LD_INT 81
20074: PUSH
20075: LD_VAR 0 1
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PPUSH
20084: CALL_OW 70
20088: ST_TO_ADDR
// end ;
20089: LD_VAR 0 3
20093: RET
// export function IsExtension ( b ) ; begin
20094: LD_INT 0
20096: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
20097: LD_ADDR_VAR 0 2
20101: PUSH
20102: LD_VAR 0 1
20106: PUSH
20107: LD_INT 23
20109: PUSH
20110: LD_INT 20
20112: PUSH
20113: LD_INT 22
20115: PUSH
20116: LD_INT 17
20118: PUSH
20119: LD_INT 24
20121: PUSH
20122: LD_INT 21
20124: PUSH
20125: LD_INT 19
20127: PUSH
20128: LD_INT 16
20130: PUSH
20131: LD_INT 25
20133: PUSH
20134: LD_INT 18
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: IN
20149: ST_TO_ADDR
// end ;
20150: LD_VAR 0 2
20154: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
20155: LD_INT 0
20157: PPUSH
20158: PPUSH
20159: PPUSH
// result := [ ] ;
20160: LD_ADDR_VAR 0 3
20164: PUSH
20165: EMPTY
20166: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
20167: LD_ADDR_VAR 0 4
20171: PUSH
20172: LD_VAR 0 2
20176: PPUSH
20177: LD_INT 21
20179: PUSH
20180: LD_INT 3
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PPUSH
20187: CALL_OW 70
20191: ST_TO_ADDR
// if not tmp then
20192: LD_VAR 0 4
20196: NOT
20197: IFFALSE 20201
// exit ;
20199: GO 20259
// for i in tmp do
20201: LD_ADDR_VAR 0 5
20205: PUSH
20206: LD_VAR 0 4
20210: PUSH
20211: FOR_IN
20212: IFFALSE 20247
// if GetBase ( i ) <> base then
20214: LD_VAR 0 5
20218: PPUSH
20219: CALL_OW 274
20223: PUSH
20224: LD_VAR 0 1
20228: NONEQUAL
20229: IFFALSE 20245
// ComLinkToBase ( base , i ) ;
20231: LD_VAR 0 1
20235: PPUSH
20236: LD_VAR 0 5
20240: PPUSH
20241: CALL_OW 169
20245: GO 20211
20247: POP
20248: POP
// result := tmp ;
20249: LD_ADDR_VAR 0 3
20253: PUSH
20254: LD_VAR 0 4
20258: ST_TO_ADDR
// end ;
20259: LD_VAR 0 3
20263: RET
// export function ComComplete ( unit , b ) ; var i ; begin
20264: LD_INT 0
20266: PPUSH
20267: PPUSH
// if BuildingStatus ( b ) = bs_build then
20268: LD_VAR 0 2
20272: PPUSH
20273: CALL_OW 461
20277: PUSH
20278: LD_INT 1
20280: EQUAL
20281: IFFALSE 20341
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
20283: LD_VAR 0 1
20287: PPUSH
20288: LD_STRING h
20290: PUSH
20291: LD_VAR 0 2
20295: PPUSH
20296: CALL_OW 250
20300: PUSH
20301: LD_VAR 0 2
20305: PPUSH
20306: CALL_OW 251
20310: PUSH
20311: LD_VAR 0 2
20315: PUSH
20316: LD_INT 0
20318: PUSH
20319: LD_INT 0
20321: PUSH
20322: LD_INT 0
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: PUSH
20334: EMPTY
20335: LIST
20336: PPUSH
20337: CALL_OW 446
// end ;
20341: LD_VAR 0 3
20345: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
20346: LD_INT 0
20348: PPUSH
20349: PPUSH
20350: PPUSH
20351: PPUSH
20352: PPUSH
20353: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
20354: LD_VAR 0 1
20358: NOT
20359: PUSH
20360: LD_VAR 0 1
20364: PPUSH
20365: CALL_OW 263
20369: PUSH
20370: LD_INT 2
20372: EQUAL
20373: NOT
20374: OR
20375: IFFALSE 20379
// exit ;
20377: GO 20695
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
20379: LD_ADDR_VAR 0 6
20383: PUSH
20384: LD_INT 22
20386: PUSH
20387: LD_VAR 0 1
20391: PPUSH
20392: CALL_OW 255
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 2
20403: PUSH
20404: LD_INT 30
20406: PUSH
20407: LD_INT 36
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: LD_INT 34
20416: PUSH
20417: LD_INT 31
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: LIST
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PPUSH
20433: CALL_OW 69
20437: ST_TO_ADDR
// if not tmp then
20438: LD_VAR 0 6
20442: NOT
20443: IFFALSE 20447
// exit ;
20445: GO 20695
// result := [ ] ;
20447: LD_ADDR_VAR 0 2
20451: PUSH
20452: EMPTY
20453: ST_TO_ADDR
// for i in tmp do
20454: LD_ADDR_VAR 0 3
20458: PUSH
20459: LD_VAR 0 6
20463: PUSH
20464: FOR_IN
20465: IFFALSE 20536
// begin t := UnitsInside ( i ) ;
20467: LD_ADDR_VAR 0 4
20471: PUSH
20472: LD_VAR 0 3
20476: PPUSH
20477: CALL_OW 313
20481: ST_TO_ADDR
// if t then
20482: LD_VAR 0 4
20486: IFFALSE 20534
// for j in t do
20488: LD_ADDR_VAR 0 7
20492: PUSH
20493: LD_VAR 0 4
20497: PUSH
20498: FOR_IN
20499: IFFALSE 20532
// result := Insert ( result , result + 1 , j ) ;
20501: LD_ADDR_VAR 0 2
20505: PUSH
20506: LD_VAR 0 2
20510: PPUSH
20511: LD_VAR 0 2
20515: PUSH
20516: LD_INT 1
20518: PLUS
20519: PPUSH
20520: LD_VAR 0 7
20524: PPUSH
20525: CALL_OW 2
20529: ST_TO_ADDR
20530: GO 20498
20532: POP
20533: POP
// end ;
20534: GO 20464
20536: POP
20537: POP
// if not result then
20538: LD_VAR 0 2
20542: NOT
20543: IFFALSE 20547
// exit ;
20545: GO 20695
// mech := result [ 1 ] ;
20547: LD_ADDR_VAR 0 5
20551: PUSH
20552: LD_VAR 0 2
20556: PUSH
20557: LD_INT 1
20559: ARRAY
20560: ST_TO_ADDR
// if result > 1 then
20561: LD_VAR 0 2
20565: PUSH
20566: LD_INT 1
20568: GREATER
20569: IFFALSE 20681
// for i = 2 to result do
20571: LD_ADDR_VAR 0 3
20575: PUSH
20576: DOUBLE
20577: LD_INT 2
20579: DEC
20580: ST_TO_ADDR
20581: LD_VAR 0 2
20585: PUSH
20586: FOR_TO
20587: IFFALSE 20679
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
20589: LD_ADDR_VAR 0 4
20593: PUSH
20594: LD_VAR 0 2
20598: PUSH
20599: LD_VAR 0 3
20603: ARRAY
20604: PPUSH
20605: LD_INT 3
20607: PPUSH
20608: CALL_OW 259
20612: PUSH
20613: LD_VAR 0 2
20617: PUSH
20618: LD_VAR 0 3
20622: ARRAY
20623: PPUSH
20624: CALL_OW 432
20628: MINUS
20629: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
20630: LD_VAR 0 4
20634: PUSH
20635: LD_VAR 0 5
20639: PPUSH
20640: LD_INT 3
20642: PPUSH
20643: CALL_OW 259
20647: PUSH
20648: LD_VAR 0 5
20652: PPUSH
20653: CALL_OW 432
20657: MINUS
20658: GREATEREQUAL
20659: IFFALSE 20677
// mech := result [ i ] ;
20661: LD_ADDR_VAR 0 5
20665: PUSH
20666: LD_VAR 0 2
20670: PUSH
20671: LD_VAR 0 3
20675: ARRAY
20676: ST_TO_ADDR
// end ;
20677: GO 20586
20679: POP
20680: POP
// ComLinkTo ( vehicle , mech ) ;
20681: LD_VAR 0 1
20685: PPUSH
20686: LD_VAR 0 5
20690: PPUSH
20691: CALL_OW 135
// end ;
20695: LD_VAR 0 2
20699: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
20700: LD_INT 0
20702: PPUSH
20703: PPUSH
20704: PPUSH
20705: PPUSH
20706: PPUSH
20707: PPUSH
20708: PPUSH
20709: PPUSH
20710: PPUSH
20711: PPUSH
20712: PPUSH
20713: PPUSH
20714: PPUSH
// result := [ ] ;
20715: LD_ADDR_VAR 0 7
20719: PUSH
20720: EMPTY
20721: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
20722: LD_VAR 0 1
20726: PPUSH
20727: CALL_OW 266
20731: PUSH
20732: LD_INT 0
20734: PUSH
20735: LD_INT 1
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: IN
20742: NOT
20743: IFFALSE 20747
// exit ;
20745: GO 22378
// if name then
20747: LD_VAR 0 3
20751: IFFALSE 20767
// SetBName ( base_dep , name ) ;
20753: LD_VAR 0 1
20757: PPUSH
20758: LD_VAR 0 3
20762: PPUSH
20763: CALL_OW 500
// base := GetBase ( base_dep ) ;
20767: LD_ADDR_VAR 0 15
20771: PUSH
20772: LD_VAR 0 1
20776: PPUSH
20777: CALL_OW 274
20781: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
20782: LD_ADDR_VAR 0 16
20786: PUSH
20787: LD_VAR 0 1
20791: PPUSH
20792: CALL_OW 255
20796: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
20797: LD_ADDR_VAR 0 17
20801: PUSH
20802: LD_VAR 0 1
20806: PPUSH
20807: CALL_OW 248
20811: ST_TO_ADDR
// if sources then
20812: LD_VAR 0 5
20816: IFFALSE 20863
// for i = 1 to 3 do
20818: LD_ADDR_VAR 0 8
20822: PUSH
20823: DOUBLE
20824: LD_INT 1
20826: DEC
20827: ST_TO_ADDR
20828: LD_INT 3
20830: PUSH
20831: FOR_TO
20832: IFFALSE 20861
// AddResourceType ( base , i , sources [ i ] ) ;
20834: LD_VAR 0 15
20838: PPUSH
20839: LD_VAR 0 8
20843: PPUSH
20844: LD_VAR 0 5
20848: PUSH
20849: LD_VAR 0 8
20853: ARRAY
20854: PPUSH
20855: CALL_OW 276
20859: GO 20831
20861: POP
20862: POP
// buildings := GetBaseBuildings ( base , area ) ;
20863: LD_ADDR_VAR 0 18
20867: PUSH
20868: LD_VAR 0 15
20872: PPUSH
20873: LD_VAR 0 2
20877: PPUSH
20878: CALL 20155 0 2
20882: ST_TO_ADDR
// InitHc ;
20883: CALL_OW 19
// InitUc ;
20887: CALL_OW 18
// uc_side := side ;
20891: LD_ADDR_OWVAR 20
20895: PUSH
20896: LD_VAR 0 16
20900: ST_TO_ADDR
// uc_nation := nation ;
20901: LD_ADDR_OWVAR 21
20905: PUSH
20906: LD_VAR 0 17
20910: ST_TO_ADDR
// if buildings then
20911: LD_VAR 0 18
20915: IFFALSE 22237
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
20917: LD_ADDR_VAR 0 19
20921: PUSH
20922: LD_VAR 0 18
20926: PPUSH
20927: LD_INT 2
20929: PUSH
20930: LD_INT 30
20932: PUSH
20933: LD_INT 29
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: PUSH
20940: LD_INT 30
20942: PUSH
20943: LD_INT 30
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: LIST
20954: PPUSH
20955: CALL_OW 72
20959: ST_TO_ADDR
// if tmp then
20960: LD_VAR 0 19
20964: IFFALSE 21012
// for i in tmp do
20966: LD_ADDR_VAR 0 8
20970: PUSH
20971: LD_VAR 0 19
20975: PUSH
20976: FOR_IN
20977: IFFALSE 21010
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
20979: LD_VAR 0 8
20983: PPUSH
20984: CALL_OW 250
20988: PPUSH
20989: LD_VAR 0 8
20993: PPUSH
20994: CALL_OW 251
20998: PPUSH
20999: LD_VAR 0 16
21003: PPUSH
21004: CALL_OW 441
21008: GO 20976
21010: POP
21011: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
21012: LD_VAR 0 18
21016: PPUSH
21017: LD_INT 2
21019: PUSH
21020: LD_INT 30
21022: PUSH
21023: LD_INT 32
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 30
21032: PUSH
21033: LD_INT 33
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: LIST
21044: PPUSH
21045: CALL_OW 72
21049: IFFALSE 21137
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
21051: LD_ADDR_VAR 0 8
21055: PUSH
21056: LD_VAR 0 18
21060: PPUSH
21061: LD_INT 2
21063: PUSH
21064: LD_INT 30
21066: PUSH
21067: LD_INT 32
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PUSH
21074: LD_INT 30
21076: PUSH
21077: LD_INT 33
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: LIST
21088: PPUSH
21089: CALL_OW 72
21093: PUSH
21094: FOR_IN
21095: IFFALSE 21135
// begin if not GetBWeapon ( i ) then
21097: LD_VAR 0 8
21101: PPUSH
21102: CALL_OW 269
21106: NOT
21107: IFFALSE 21133
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
21109: LD_VAR 0 8
21113: PPUSH
21114: LD_VAR 0 8
21118: PPUSH
21119: LD_VAR 0 2
21123: PPUSH
21124: CALL 22383 0 2
21128: PPUSH
21129: CALL_OW 431
// end ;
21133: GO 21094
21135: POP
21136: POP
// end ; for i = 1 to personel do
21137: LD_ADDR_VAR 0 8
21141: PUSH
21142: DOUBLE
21143: LD_INT 1
21145: DEC
21146: ST_TO_ADDR
21147: LD_VAR 0 6
21151: PUSH
21152: FOR_TO
21153: IFFALSE 22217
// begin if i > 4 then
21155: LD_VAR 0 8
21159: PUSH
21160: LD_INT 4
21162: GREATER
21163: IFFALSE 21167
// break ;
21165: GO 22217
// case i of 1 :
21167: LD_VAR 0 8
21171: PUSH
21172: LD_INT 1
21174: DOUBLE
21175: EQUAL
21176: IFTRUE 21180
21178: GO 21260
21180: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
21181: LD_ADDR_VAR 0 12
21185: PUSH
21186: LD_VAR 0 18
21190: PPUSH
21191: LD_INT 22
21193: PUSH
21194: LD_VAR 0 16
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: LD_INT 58
21205: PUSH
21206: EMPTY
21207: LIST
21208: PUSH
21209: LD_INT 2
21211: PUSH
21212: LD_INT 30
21214: PUSH
21215: LD_INT 32
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: LD_INT 30
21224: PUSH
21225: LD_INT 4
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PUSH
21232: LD_INT 30
21234: PUSH
21235: LD_INT 5
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: LIST
21252: PPUSH
21253: CALL_OW 72
21257: ST_TO_ADDR
21258: GO 21482
21260: LD_INT 2
21262: DOUBLE
21263: EQUAL
21264: IFTRUE 21268
21266: GO 21330
21268: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
21269: LD_ADDR_VAR 0 12
21273: PUSH
21274: LD_VAR 0 18
21278: PPUSH
21279: LD_INT 22
21281: PUSH
21282: LD_VAR 0 16
21286: PUSH
21287: EMPTY
21288: LIST
21289: LIST
21290: PUSH
21291: LD_INT 2
21293: PUSH
21294: LD_INT 30
21296: PUSH
21297: LD_INT 0
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PUSH
21304: LD_INT 30
21306: PUSH
21307: LD_INT 1
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: LIST
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PPUSH
21323: CALL_OW 72
21327: ST_TO_ADDR
21328: GO 21482
21330: LD_INT 3
21332: DOUBLE
21333: EQUAL
21334: IFTRUE 21338
21336: GO 21400
21338: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
21339: LD_ADDR_VAR 0 12
21343: PUSH
21344: LD_VAR 0 18
21348: PPUSH
21349: LD_INT 22
21351: PUSH
21352: LD_VAR 0 16
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: LD_INT 2
21363: PUSH
21364: LD_INT 30
21366: PUSH
21367: LD_INT 2
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: PUSH
21374: LD_INT 30
21376: PUSH
21377: LD_INT 3
21379: PUSH
21380: EMPTY
21381: LIST
21382: LIST
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: LIST
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: PPUSH
21393: CALL_OW 72
21397: ST_TO_ADDR
21398: GO 21482
21400: LD_INT 4
21402: DOUBLE
21403: EQUAL
21404: IFTRUE 21408
21406: GO 21481
21408: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
21409: LD_ADDR_VAR 0 12
21413: PUSH
21414: LD_VAR 0 18
21418: PPUSH
21419: LD_INT 22
21421: PUSH
21422: LD_VAR 0 16
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 2
21433: PUSH
21434: LD_INT 30
21436: PUSH
21437: LD_INT 6
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 30
21446: PUSH
21447: LD_INT 7
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 30
21456: PUSH
21457: LD_INT 8
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PPUSH
21474: CALL_OW 72
21478: ST_TO_ADDR
21479: GO 21482
21481: POP
// if i = 1 then
21482: LD_VAR 0 8
21486: PUSH
21487: LD_INT 1
21489: EQUAL
21490: IFFALSE 21601
// begin tmp := [ ] ;
21492: LD_ADDR_VAR 0 19
21496: PUSH
21497: EMPTY
21498: ST_TO_ADDR
// for j in f do
21499: LD_ADDR_VAR 0 9
21503: PUSH
21504: LD_VAR 0 12
21508: PUSH
21509: FOR_IN
21510: IFFALSE 21583
// if GetBType ( j ) = b_bunker then
21512: LD_VAR 0 9
21516: PPUSH
21517: CALL_OW 266
21521: PUSH
21522: LD_INT 32
21524: EQUAL
21525: IFFALSE 21552
// tmp := Insert ( tmp , 1 , j ) else
21527: LD_ADDR_VAR 0 19
21531: PUSH
21532: LD_VAR 0 19
21536: PPUSH
21537: LD_INT 1
21539: PPUSH
21540: LD_VAR 0 9
21544: PPUSH
21545: CALL_OW 2
21549: ST_TO_ADDR
21550: GO 21581
// tmp := Insert ( tmp , tmp + 1 , j ) ;
21552: LD_ADDR_VAR 0 19
21556: PUSH
21557: LD_VAR 0 19
21561: PPUSH
21562: LD_VAR 0 19
21566: PUSH
21567: LD_INT 1
21569: PLUS
21570: PPUSH
21571: LD_VAR 0 9
21575: PPUSH
21576: CALL_OW 2
21580: ST_TO_ADDR
21581: GO 21509
21583: POP
21584: POP
// if tmp then
21585: LD_VAR 0 19
21589: IFFALSE 21601
// f := tmp ;
21591: LD_ADDR_VAR 0 12
21595: PUSH
21596: LD_VAR 0 19
21600: ST_TO_ADDR
// end ; x := personel [ i ] ;
21601: LD_ADDR_VAR 0 13
21605: PUSH
21606: LD_VAR 0 6
21610: PUSH
21611: LD_VAR 0 8
21615: ARRAY
21616: ST_TO_ADDR
// if x = - 1 then
21617: LD_VAR 0 13
21621: PUSH
21622: LD_INT 1
21624: NEG
21625: EQUAL
21626: IFFALSE 21835
// begin for j in f do
21628: LD_ADDR_VAR 0 9
21632: PUSH
21633: LD_VAR 0 12
21637: PUSH
21638: FOR_IN
21639: IFFALSE 21831
// repeat InitHc ;
21641: CALL_OW 19
// if GetBType ( j ) = b_barracks then
21645: LD_VAR 0 9
21649: PPUSH
21650: CALL_OW 266
21654: PUSH
21655: LD_INT 5
21657: EQUAL
21658: IFFALSE 21728
// begin if UnitsInside ( j ) < 3 then
21660: LD_VAR 0 9
21664: PPUSH
21665: CALL_OW 313
21669: PUSH
21670: LD_INT 3
21672: LESS
21673: IFFALSE 21709
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21675: LD_INT 0
21677: PPUSH
21678: LD_INT 5
21680: PUSH
21681: LD_INT 8
21683: PUSH
21684: LD_INT 9
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: LIST
21691: PUSH
21692: LD_VAR 0 17
21696: ARRAY
21697: PPUSH
21698: LD_VAR 0 4
21702: PPUSH
21703: CALL_OW 380
21707: GO 21726
// PrepareHuman ( false , i , skill ) ;
21709: LD_INT 0
21711: PPUSH
21712: LD_VAR 0 8
21716: PPUSH
21717: LD_VAR 0 4
21721: PPUSH
21722: CALL_OW 380
// end else
21726: GO 21745
// PrepareHuman ( false , i , skill ) ;
21728: LD_INT 0
21730: PPUSH
21731: LD_VAR 0 8
21735: PPUSH
21736: LD_VAR 0 4
21740: PPUSH
21741: CALL_OW 380
// un := CreateHuman ;
21745: LD_ADDR_VAR 0 14
21749: PUSH
21750: CALL_OW 44
21754: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21755: LD_ADDR_VAR 0 7
21759: PUSH
21760: LD_VAR 0 7
21764: PPUSH
21765: LD_INT 1
21767: PPUSH
21768: LD_VAR 0 14
21772: PPUSH
21773: CALL_OW 2
21777: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
21778: LD_VAR 0 14
21782: PPUSH
21783: LD_VAR 0 9
21787: PPUSH
21788: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
21792: LD_VAR 0 9
21796: PPUSH
21797: CALL_OW 313
21801: PUSH
21802: LD_INT 6
21804: EQUAL
21805: PUSH
21806: LD_VAR 0 9
21810: PPUSH
21811: CALL_OW 266
21815: PUSH
21816: LD_INT 32
21818: PUSH
21819: LD_INT 31
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: IN
21826: OR
21827: IFFALSE 21641
21829: GO 21638
21831: POP
21832: POP
// end else
21833: GO 22215
// for j = 1 to x do
21835: LD_ADDR_VAR 0 9
21839: PUSH
21840: DOUBLE
21841: LD_INT 1
21843: DEC
21844: ST_TO_ADDR
21845: LD_VAR 0 13
21849: PUSH
21850: FOR_TO
21851: IFFALSE 22213
// begin InitHc ;
21853: CALL_OW 19
// if not f then
21857: LD_VAR 0 12
21861: NOT
21862: IFFALSE 21951
// begin PrepareHuman ( false , i , skill ) ;
21864: LD_INT 0
21866: PPUSH
21867: LD_VAR 0 8
21871: PPUSH
21872: LD_VAR 0 4
21876: PPUSH
21877: CALL_OW 380
// un := CreateHuman ;
21881: LD_ADDR_VAR 0 14
21885: PUSH
21886: CALL_OW 44
21890: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21891: LD_ADDR_VAR 0 7
21895: PUSH
21896: LD_VAR 0 7
21900: PPUSH
21901: LD_INT 1
21903: PPUSH
21904: LD_VAR 0 14
21908: PPUSH
21909: CALL_OW 2
21913: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21914: LD_VAR 0 14
21918: PPUSH
21919: LD_VAR 0 1
21923: PPUSH
21924: CALL_OW 250
21928: PPUSH
21929: LD_VAR 0 1
21933: PPUSH
21934: CALL_OW 251
21938: PPUSH
21939: LD_INT 10
21941: PPUSH
21942: LD_INT 0
21944: PPUSH
21945: CALL_OW 50
// continue ;
21949: GO 21850
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
21951: LD_VAR 0 12
21955: PUSH
21956: LD_INT 1
21958: ARRAY
21959: PPUSH
21960: CALL_OW 313
21964: PUSH
21965: LD_VAR 0 12
21969: PUSH
21970: LD_INT 1
21972: ARRAY
21973: PPUSH
21974: CALL_OW 266
21978: PUSH
21979: LD_INT 32
21981: PUSH
21982: LD_INT 31
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: IN
21989: AND
21990: PUSH
21991: LD_VAR 0 12
21995: PUSH
21996: LD_INT 1
21998: ARRAY
21999: PPUSH
22000: CALL_OW 313
22004: PUSH
22005: LD_INT 6
22007: EQUAL
22008: OR
22009: IFFALSE 22029
// f := Delete ( f , 1 ) ;
22011: LD_ADDR_VAR 0 12
22015: PUSH
22016: LD_VAR 0 12
22020: PPUSH
22021: LD_INT 1
22023: PPUSH
22024: CALL_OW 3
22028: ST_TO_ADDR
// if not f then
22029: LD_VAR 0 12
22033: NOT
22034: IFFALSE 22052
// begin x := x + 2 ;
22036: LD_ADDR_VAR 0 13
22040: PUSH
22041: LD_VAR 0 13
22045: PUSH
22046: LD_INT 2
22048: PLUS
22049: ST_TO_ADDR
// continue ;
22050: GO 21850
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
22052: LD_VAR 0 12
22056: PUSH
22057: LD_INT 1
22059: ARRAY
22060: PPUSH
22061: CALL_OW 266
22065: PUSH
22066: LD_INT 5
22068: EQUAL
22069: IFFALSE 22143
// begin if UnitsInside ( f [ 1 ] ) < 3 then
22071: LD_VAR 0 12
22075: PUSH
22076: LD_INT 1
22078: ARRAY
22079: PPUSH
22080: CALL_OW 313
22084: PUSH
22085: LD_INT 3
22087: LESS
22088: IFFALSE 22124
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22090: LD_INT 0
22092: PPUSH
22093: LD_INT 5
22095: PUSH
22096: LD_INT 8
22098: PUSH
22099: LD_INT 9
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: LIST
22106: PUSH
22107: LD_VAR 0 17
22111: ARRAY
22112: PPUSH
22113: LD_VAR 0 4
22117: PPUSH
22118: CALL_OW 380
22122: GO 22141
// PrepareHuman ( false , i , skill ) ;
22124: LD_INT 0
22126: PPUSH
22127: LD_VAR 0 8
22131: PPUSH
22132: LD_VAR 0 4
22136: PPUSH
22137: CALL_OW 380
// end else
22141: GO 22160
// PrepareHuman ( false , i , skill ) ;
22143: LD_INT 0
22145: PPUSH
22146: LD_VAR 0 8
22150: PPUSH
22151: LD_VAR 0 4
22155: PPUSH
22156: CALL_OW 380
// un := CreateHuman ;
22160: LD_ADDR_VAR 0 14
22164: PUSH
22165: CALL_OW 44
22169: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22170: LD_ADDR_VAR 0 7
22174: PUSH
22175: LD_VAR 0 7
22179: PPUSH
22180: LD_INT 1
22182: PPUSH
22183: LD_VAR 0 14
22187: PPUSH
22188: CALL_OW 2
22192: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
22193: LD_VAR 0 14
22197: PPUSH
22198: LD_VAR 0 12
22202: PUSH
22203: LD_INT 1
22205: ARRAY
22206: PPUSH
22207: CALL_OW 52
// end ;
22211: GO 21850
22213: POP
22214: POP
// end ;
22215: GO 21152
22217: POP
22218: POP
// result := result ^ buildings ;
22219: LD_ADDR_VAR 0 7
22223: PUSH
22224: LD_VAR 0 7
22228: PUSH
22229: LD_VAR 0 18
22233: ADD
22234: ST_TO_ADDR
// end else
22235: GO 22378
// begin for i = 1 to personel do
22237: LD_ADDR_VAR 0 8
22241: PUSH
22242: DOUBLE
22243: LD_INT 1
22245: DEC
22246: ST_TO_ADDR
22247: LD_VAR 0 6
22251: PUSH
22252: FOR_TO
22253: IFFALSE 22376
// begin if i > 4 then
22255: LD_VAR 0 8
22259: PUSH
22260: LD_INT 4
22262: GREATER
22263: IFFALSE 22267
// break ;
22265: GO 22376
// x := personel [ i ] ;
22267: LD_ADDR_VAR 0 13
22271: PUSH
22272: LD_VAR 0 6
22276: PUSH
22277: LD_VAR 0 8
22281: ARRAY
22282: ST_TO_ADDR
// if x = - 1 then
22283: LD_VAR 0 13
22287: PUSH
22288: LD_INT 1
22290: NEG
22291: EQUAL
22292: IFFALSE 22296
// continue ;
22294: GO 22252
// PrepareHuman ( false , i , skill ) ;
22296: LD_INT 0
22298: PPUSH
22299: LD_VAR 0 8
22303: PPUSH
22304: LD_VAR 0 4
22308: PPUSH
22309: CALL_OW 380
// un := CreateHuman ;
22313: LD_ADDR_VAR 0 14
22317: PUSH
22318: CALL_OW 44
22322: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22323: LD_VAR 0 14
22327: PPUSH
22328: LD_VAR 0 1
22332: PPUSH
22333: CALL_OW 250
22337: PPUSH
22338: LD_VAR 0 1
22342: PPUSH
22343: CALL_OW 251
22347: PPUSH
22348: LD_INT 10
22350: PPUSH
22351: LD_INT 0
22353: PPUSH
22354: CALL_OW 50
// result := result ^ un ;
22358: LD_ADDR_VAR 0 7
22362: PUSH
22363: LD_VAR 0 7
22367: PUSH
22368: LD_VAR 0 14
22372: ADD
22373: ST_TO_ADDR
// end ;
22374: GO 22252
22376: POP
22377: POP
// end ; end ;
22378: LD_VAR 0 7
22382: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
22383: LD_INT 0
22385: PPUSH
22386: PPUSH
22387: PPUSH
22388: PPUSH
22389: PPUSH
22390: PPUSH
22391: PPUSH
22392: PPUSH
22393: PPUSH
22394: PPUSH
22395: PPUSH
22396: PPUSH
22397: PPUSH
22398: PPUSH
22399: PPUSH
22400: PPUSH
// result := false ;
22401: LD_ADDR_VAR 0 3
22405: PUSH
22406: LD_INT 0
22408: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
22409: LD_VAR 0 1
22413: NOT
22414: PUSH
22415: LD_VAR 0 1
22419: PPUSH
22420: CALL_OW 266
22424: PUSH
22425: LD_INT 32
22427: PUSH
22428: LD_INT 33
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: IN
22435: NOT
22436: OR
22437: IFFALSE 22441
// exit ;
22439: GO 23577
// nat := GetNation ( tower ) ;
22441: LD_ADDR_VAR 0 12
22445: PUSH
22446: LD_VAR 0 1
22450: PPUSH
22451: CALL_OW 248
22455: ST_TO_ADDR
// side := GetSide ( tower ) ;
22456: LD_ADDR_VAR 0 16
22460: PUSH
22461: LD_VAR 0 1
22465: PPUSH
22466: CALL_OW 255
22470: ST_TO_ADDR
// x := GetX ( tower ) ;
22471: LD_ADDR_VAR 0 10
22475: PUSH
22476: LD_VAR 0 1
22480: PPUSH
22481: CALL_OW 250
22485: ST_TO_ADDR
// y := GetY ( tower ) ;
22486: LD_ADDR_VAR 0 11
22490: PUSH
22491: LD_VAR 0 1
22495: PPUSH
22496: CALL_OW 251
22500: ST_TO_ADDR
// if not x or not y then
22501: LD_VAR 0 10
22505: NOT
22506: PUSH
22507: LD_VAR 0 11
22511: NOT
22512: OR
22513: IFFALSE 22517
// exit ;
22515: GO 23577
// weapon := 0 ;
22517: LD_ADDR_VAR 0 18
22521: PUSH
22522: LD_INT 0
22524: ST_TO_ADDR
// fac_list := [ ] ;
22525: LD_ADDR_VAR 0 17
22529: PUSH
22530: EMPTY
22531: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
22532: LD_ADDR_VAR 0 6
22536: PUSH
22537: LD_VAR 0 1
22541: PPUSH
22542: CALL_OW 274
22546: PPUSH
22547: LD_VAR 0 2
22551: PPUSH
22552: CALL 20155 0 2
22556: PPUSH
22557: LD_INT 30
22559: PUSH
22560: LD_INT 3
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PPUSH
22567: CALL_OW 72
22571: ST_TO_ADDR
// if not factories then
22572: LD_VAR 0 6
22576: NOT
22577: IFFALSE 22581
// exit ;
22579: GO 23577
// for i in factories do
22581: LD_ADDR_VAR 0 8
22585: PUSH
22586: LD_VAR 0 6
22590: PUSH
22591: FOR_IN
22592: IFFALSE 22617
// fac_list := fac_list union AvailableWeaponList ( i ) ;
22594: LD_ADDR_VAR 0 17
22598: PUSH
22599: LD_VAR 0 17
22603: PUSH
22604: LD_VAR 0 8
22608: PPUSH
22609: CALL_OW 478
22613: UNION
22614: ST_TO_ADDR
22615: GO 22591
22617: POP
22618: POP
// if not fac_list then
22619: LD_VAR 0 17
22623: NOT
22624: IFFALSE 22628
// exit ;
22626: GO 23577
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
22628: LD_ADDR_VAR 0 5
22632: PUSH
22633: LD_INT 4
22635: PUSH
22636: LD_INT 5
22638: PUSH
22639: LD_INT 9
22641: PUSH
22642: LD_INT 10
22644: PUSH
22645: LD_INT 6
22647: PUSH
22648: LD_INT 7
22650: PUSH
22651: LD_INT 11
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: PUSH
22663: LD_INT 27
22665: PUSH
22666: LD_INT 28
22668: PUSH
22669: LD_INT 26
22671: PUSH
22672: LD_INT 30
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 43
22683: PUSH
22684: LD_INT 44
22686: PUSH
22687: LD_INT 46
22689: PUSH
22690: LD_INT 45
22692: PUSH
22693: LD_INT 47
22695: PUSH
22696: LD_INT 49
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: LIST
22711: PUSH
22712: LD_VAR 0 12
22716: ARRAY
22717: ST_TO_ADDR
// for i in list do
22718: LD_ADDR_VAR 0 8
22722: PUSH
22723: LD_VAR 0 5
22727: PUSH
22728: FOR_IN
22729: IFFALSE 22762
// if not i in fac_list then
22731: LD_VAR 0 8
22735: PUSH
22736: LD_VAR 0 17
22740: IN
22741: NOT
22742: IFFALSE 22760
// list := list diff i ;
22744: LD_ADDR_VAR 0 5
22748: PUSH
22749: LD_VAR 0 5
22753: PUSH
22754: LD_VAR 0 8
22758: DIFF
22759: ST_TO_ADDR
22760: GO 22728
22762: POP
22763: POP
// if not list then
22764: LD_VAR 0 5
22768: NOT
22769: IFFALSE 22773
// exit ;
22771: GO 23577
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
22773: LD_VAR 0 12
22777: PUSH
22778: LD_INT 3
22780: EQUAL
22781: PUSH
22782: LD_INT 49
22784: PUSH
22785: LD_VAR 0 5
22789: IN
22790: AND
22791: PUSH
22792: LD_INT 31
22794: PPUSH
22795: LD_VAR 0 16
22799: PPUSH
22800: CALL_OW 321
22804: PUSH
22805: LD_INT 2
22807: EQUAL
22808: AND
22809: IFFALSE 22869
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
22811: LD_INT 22
22813: PUSH
22814: LD_VAR 0 16
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: LD_INT 35
22825: PUSH
22826: LD_INT 49
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: LD_INT 91
22835: PUSH
22836: LD_VAR 0 1
22840: PUSH
22841: LD_INT 10
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: LIST
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: LIST
22853: PPUSH
22854: CALL_OW 69
22858: NOT
22859: IFFALSE 22869
// weapon := ru_time_lapser ;
22861: LD_ADDR_VAR 0 18
22865: PUSH
22866: LD_INT 49
22868: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
22869: LD_VAR 0 12
22873: PUSH
22874: LD_INT 1
22876: PUSH
22877: LD_INT 2
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: IN
22884: PUSH
22885: LD_INT 11
22887: PUSH
22888: LD_VAR 0 5
22892: IN
22893: PUSH
22894: LD_INT 30
22896: PUSH
22897: LD_VAR 0 5
22901: IN
22902: OR
22903: AND
22904: PUSH
22905: LD_INT 6
22907: PPUSH
22908: LD_VAR 0 16
22912: PPUSH
22913: CALL_OW 321
22917: PUSH
22918: LD_INT 2
22920: EQUAL
22921: AND
22922: IFFALSE 23087
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
22924: LD_INT 22
22926: PUSH
22927: LD_VAR 0 16
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 2
22938: PUSH
22939: LD_INT 35
22941: PUSH
22942: LD_INT 11
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 35
22951: PUSH
22952: LD_INT 30
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: LIST
22963: PUSH
22964: LD_INT 91
22966: PUSH
22967: LD_VAR 0 1
22971: PUSH
22972: LD_INT 18
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: LIST
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: LIST
22984: PPUSH
22985: CALL_OW 69
22989: NOT
22990: PUSH
22991: LD_INT 22
22993: PUSH
22994: LD_VAR 0 16
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PUSH
23003: LD_INT 2
23005: PUSH
23006: LD_INT 30
23008: PUSH
23009: LD_INT 32
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: PUSH
23016: LD_INT 30
23018: PUSH
23019: LD_INT 33
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 91
23033: PUSH
23034: LD_VAR 0 1
23038: PUSH
23039: LD_INT 12
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: LIST
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: LIST
23051: PUSH
23052: EMPTY
23053: LIST
23054: PPUSH
23055: CALL_OW 69
23059: PUSH
23060: LD_INT 2
23062: GREATER
23063: AND
23064: IFFALSE 23087
// weapon := [ us_radar , ar_radar ] [ nat ] ;
23066: LD_ADDR_VAR 0 18
23070: PUSH
23071: LD_INT 11
23073: PUSH
23074: LD_INT 30
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: PUSH
23081: LD_VAR 0 12
23085: ARRAY
23086: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
23087: LD_VAR 0 18
23091: NOT
23092: PUSH
23093: LD_INT 40
23095: PPUSH
23096: LD_VAR 0 16
23100: PPUSH
23101: CALL_OW 321
23105: PUSH
23106: LD_INT 2
23108: EQUAL
23109: AND
23110: PUSH
23111: LD_INT 7
23113: PUSH
23114: LD_VAR 0 5
23118: IN
23119: PUSH
23120: LD_INT 28
23122: PUSH
23123: LD_VAR 0 5
23127: IN
23128: OR
23129: PUSH
23130: LD_INT 45
23132: PUSH
23133: LD_VAR 0 5
23137: IN
23138: OR
23139: AND
23140: IFFALSE 23394
// begin hex := GetHexInfo ( x , y ) ;
23142: LD_ADDR_VAR 0 4
23146: PUSH
23147: LD_VAR 0 10
23151: PPUSH
23152: LD_VAR 0 11
23156: PPUSH
23157: CALL_OW 546
23161: ST_TO_ADDR
// if hex [ 1 ] then
23162: LD_VAR 0 4
23166: PUSH
23167: LD_INT 1
23169: ARRAY
23170: IFFALSE 23174
// exit ;
23172: GO 23577
// height := hex [ 2 ] ;
23174: LD_ADDR_VAR 0 15
23178: PUSH
23179: LD_VAR 0 4
23183: PUSH
23184: LD_INT 2
23186: ARRAY
23187: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
23188: LD_ADDR_VAR 0 14
23192: PUSH
23193: LD_INT 0
23195: PUSH
23196: LD_INT 2
23198: PUSH
23199: LD_INT 3
23201: PUSH
23202: LD_INT 5
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: ST_TO_ADDR
// for i in tmp do
23211: LD_ADDR_VAR 0 8
23215: PUSH
23216: LD_VAR 0 14
23220: PUSH
23221: FOR_IN
23222: IFFALSE 23392
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
23224: LD_ADDR_VAR 0 9
23228: PUSH
23229: LD_VAR 0 10
23233: PPUSH
23234: LD_VAR 0 8
23238: PPUSH
23239: LD_INT 5
23241: PPUSH
23242: CALL_OW 272
23246: PUSH
23247: LD_VAR 0 11
23251: PPUSH
23252: LD_VAR 0 8
23256: PPUSH
23257: LD_INT 5
23259: PPUSH
23260: CALL_OW 273
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
23269: LD_VAR 0 9
23273: PUSH
23274: LD_INT 1
23276: ARRAY
23277: PPUSH
23278: LD_VAR 0 9
23282: PUSH
23283: LD_INT 2
23285: ARRAY
23286: PPUSH
23287: CALL_OW 488
23291: IFFALSE 23390
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
23293: LD_ADDR_VAR 0 4
23297: PUSH
23298: LD_VAR 0 9
23302: PUSH
23303: LD_INT 1
23305: ARRAY
23306: PPUSH
23307: LD_VAR 0 9
23311: PUSH
23312: LD_INT 2
23314: ARRAY
23315: PPUSH
23316: CALL_OW 546
23320: ST_TO_ADDR
// if hex [ 1 ] then
23321: LD_VAR 0 4
23325: PUSH
23326: LD_INT 1
23328: ARRAY
23329: IFFALSE 23333
// continue ;
23331: GO 23221
// h := hex [ 2 ] ;
23333: LD_ADDR_VAR 0 13
23337: PUSH
23338: LD_VAR 0 4
23342: PUSH
23343: LD_INT 2
23345: ARRAY
23346: ST_TO_ADDR
// if h + 7 < height then
23347: LD_VAR 0 13
23351: PUSH
23352: LD_INT 7
23354: PLUS
23355: PUSH
23356: LD_VAR 0 15
23360: LESS
23361: IFFALSE 23390
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
23363: LD_ADDR_VAR 0 18
23367: PUSH
23368: LD_INT 7
23370: PUSH
23371: LD_INT 28
23373: PUSH
23374: LD_INT 45
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: LIST
23381: PUSH
23382: LD_VAR 0 12
23386: ARRAY
23387: ST_TO_ADDR
// break ;
23388: GO 23392
// end ; end ; end ;
23390: GO 23221
23392: POP
23393: POP
// end ; if not weapon then
23394: LD_VAR 0 18
23398: NOT
23399: IFFALSE 23459
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
23401: LD_ADDR_VAR 0 5
23405: PUSH
23406: LD_VAR 0 5
23410: PUSH
23411: LD_INT 11
23413: PUSH
23414: LD_INT 30
23416: PUSH
23417: LD_INT 49
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: LIST
23424: DIFF
23425: ST_TO_ADDR
// if not list then
23426: LD_VAR 0 5
23430: NOT
23431: IFFALSE 23435
// exit ;
23433: GO 23577
// weapon := list [ rand ( 1 , list ) ] ;
23435: LD_ADDR_VAR 0 18
23439: PUSH
23440: LD_VAR 0 5
23444: PUSH
23445: LD_INT 1
23447: PPUSH
23448: LD_VAR 0 5
23452: PPUSH
23453: CALL_OW 12
23457: ARRAY
23458: ST_TO_ADDR
// end ; if weapon then
23459: LD_VAR 0 18
23463: IFFALSE 23577
// begin tmp := CostOfWeapon ( weapon ) ;
23465: LD_ADDR_VAR 0 14
23469: PUSH
23470: LD_VAR 0 18
23474: PPUSH
23475: CALL_OW 451
23479: ST_TO_ADDR
// j := GetBase ( tower ) ;
23480: LD_ADDR_VAR 0 9
23484: PUSH
23485: LD_VAR 0 1
23489: PPUSH
23490: CALL_OW 274
23494: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
23495: LD_VAR 0 9
23499: PPUSH
23500: LD_INT 1
23502: PPUSH
23503: CALL_OW 275
23507: PUSH
23508: LD_VAR 0 14
23512: PUSH
23513: LD_INT 1
23515: ARRAY
23516: GREATEREQUAL
23517: PUSH
23518: LD_VAR 0 9
23522: PPUSH
23523: LD_INT 2
23525: PPUSH
23526: CALL_OW 275
23530: PUSH
23531: LD_VAR 0 14
23535: PUSH
23536: LD_INT 2
23538: ARRAY
23539: GREATEREQUAL
23540: AND
23541: PUSH
23542: LD_VAR 0 9
23546: PPUSH
23547: LD_INT 3
23549: PPUSH
23550: CALL_OW 275
23554: PUSH
23555: LD_VAR 0 14
23559: PUSH
23560: LD_INT 3
23562: ARRAY
23563: GREATEREQUAL
23564: AND
23565: IFFALSE 23577
// result := weapon ;
23567: LD_ADDR_VAR 0 3
23571: PUSH
23572: LD_VAR 0 18
23576: ST_TO_ADDR
// end ; end ;
23577: LD_VAR 0 3
23581: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
23582: LD_INT 0
23584: PPUSH
23585: PPUSH
// result := true ;
23586: LD_ADDR_VAR 0 3
23590: PUSH
23591: LD_INT 1
23593: ST_TO_ADDR
// if array1 = array2 then
23594: LD_VAR 0 1
23598: PUSH
23599: LD_VAR 0 2
23603: EQUAL
23604: IFFALSE 23664
// begin for i = 1 to array1 do
23606: LD_ADDR_VAR 0 4
23610: PUSH
23611: DOUBLE
23612: LD_INT 1
23614: DEC
23615: ST_TO_ADDR
23616: LD_VAR 0 1
23620: PUSH
23621: FOR_TO
23622: IFFALSE 23660
// if array1 [ i ] <> array2 [ i ] then
23624: LD_VAR 0 1
23628: PUSH
23629: LD_VAR 0 4
23633: ARRAY
23634: PUSH
23635: LD_VAR 0 2
23639: PUSH
23640: LD_VAR 0 4
23644: ARRAY
23645: NONEQUAL
23646: IFFALSE 23658
// begin result := false ;
23648: LD_ADDR_VAR 0 3
23652: PUSH
23653: LD_INT 0
23655: ST_TO_ADDR
// break ;
23656: GO 23660
// end ;
23658: GO 23621
23660: POP
23661: POP
// end else
23662: GO 23672
// result := false ;
23664: LD_ADDR_VAR 0 3
23668: PUSH
23669: LD_INT 0
23671: ST_TO_ADDR
// end ;
23672: LD_VAR 0 3
23676: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
23677: LD_INT 0
23679: PPUSH
23680: PPUSH
23681: PPUSH
// pom := GetBase ( fac ) ;
23682: LD_ADDR_VAR 0 5
23686: PUSH
23687: LD_VAR 0 1
23691: PPUSH
23692: CALL_OW 274
23696: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
23697: LD_ADDR_VAR 0 4
23701: PUSH
23702: LD_VAR 0 2
23706: PUSH
23707: LD_INT 1
23709: ARRAY
23710: PPUSH
23711: LD_VAR 0 2
23715: PUSH
23716: LD_INT 2
23718: ARRAY
23719: PPUSH
23720: LD_VAR 0 2
23724: PUSH
23725: LD_INT 3
23727: ARRAY
23728: PPUSH
23729: LD_VAR 0 2
23733: PUSH
23734: LD_INT 4
23736: ARRAY
23737: PPUSH
23738: CALL_OW 449
23742: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23743: LD_ADDR_VAR 0 3
23747: PUSH
23748: LD_VAR 0 5
23752: PPUSH
23753: LD_INT 1
23755: PPUSH
23756: CALL_OW 275
23760: PUSH
23761: LD_VAR 0 4
23765: PUSH
23766: LD_INT 1
23768: ARRAY
23769: GREATEREQUAL
23770: PUSH
23771: LD_VAR 0 5
23775: PPUSH
23776: LD_INT 2
23778: PPUSH
23779: CALL_OW 275
23783: PUSH
23784: LD_VAR 0 4
23788: PUSH
23789: LD_INT 2
23791: ARRAY
23792: GREATEREQUAL
23793: AND
23794: PUSH
23795: LD_VAR 0 5
23799: PPUSH
23800: LD_INT 3
23802: PPUSH
23803: CALL_OW 275
23807: PUSH
23808: LD_VAR 0 4
23812: PUSH
23813: LD_INT 3
23815: ARRAY
23816: GREATEREQUAL
23817: AND
23818: ST_TO_ADDR
// end ;
23819: LD_VAR 0 3
23823: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
23824: LD_INT 0
23826: PPUSH
23827: PPUSH
23828: PPUSH
23829: PPUSH
// pom := GetBase ( building ) ;
23830: LD_ADDR_VAR 0 3
23834: PUSH
23835: LD_VAR 0 1
23839: PPUSH
23840: CALL_OW 274
23844: ST_TO_ADDR
// if not pom then
23845: LD_VAR 0 3
23849: NOT
23850: IFFALSE 23854
// exit ;
23852: GO 24024
// btype := GetBType ( building ) ;
23854: LD_ADDR_VAR 0 5
23858: PUSH
23859: LD_VAR 0 1
23863: PPUSH
23864: CALL_OW 266
23868: ST_TO_ADDR
// if btype = b_armoury then
23869: LD_VAR 0 5
23873: PUSH
23874: LD_INT 4
23876: EQUAL
23877: IFFALSE 23887
// btype := b_barracks ;
23879: LD_ADDR_VAR 0 5
23883: PUSH
23884: LD_INT 5
23886: ST_TO_ADDR
// if btype = b_depot then
23887: LD_VAR 0 5
23891: PUSH
23892: LD_INT 0
23894: EQUAL
23895: IFFALSE 23905
// btype := b_warehouse ;
23897: LD_ADDR_VAR 0 5
23901: PUSH
23902: LD_INT 1
23904: ST_TO_ADDR
// if btype = b_workshop then
23905: LD_VAR 0 5
23909: PUSH
23910: LD_INT 2
23912: EQUAL
23913: IFFALSE 23923
// btype := b_factory ;
23915: LD_ADDR_VAR 0 5
23919: PUSH
23920: LD_INT 3
23922: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23923: LD_ADDR_VAR 0 4
23927: PUSH
23928: LD_VAR 0 5
23932: PPUSH
23933: LD_VAR 0 1
23937: PPUSH
23938: CALL_OW 248
23942: PPUSH
23943: CALL_OW 450
23947: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23948: LD_ADDR_VAR 0 2
23952: PUSH
23953: LD_VAR 0 3
23957: PPUSH
23958: LD_INT 1
23960: PPUSH
23961: CALL_OW 275
23965: PUSH
23966: LD_VAR 0 4
23970: PUSH
23971: LD_INT 1
23973: ARRAY
23974: GREATEREQUAL
23975: PUSH
23976: LD_VAR 0 3
23980: PPUSH
23981: LD_INT 2
23983: PPUSH
23984: CALL_OW 275
23988: PUSH
23989: LD_VAR 0 4
23993: PUSH
23994: LD_INT 2
23996: ARRAY
23997: GREATEREQUAL
23998: AND
23999: PUSH
24000: LD_VAR 0 3
24004: PPUSH
24005: LD_INT 3
24007: PPUSH
24008: CALL_OW 275
24012: PUSH
24013: LD_VAR 0 4
24017: PUSH
24018: LD_INT 3
24020: ARRAY
24021: GREATEREQUAL
24022: AND
24023: ST_TO_ADDR
// end ;
24024: LD_VAR 0 2
24028: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
24029: LD_INT 0
24031: PPUSH
24032: PPUSH
24033: PPUSH
// pom := GetBase ( building ) ;
24034: LD_ADDR_VAR 0 4
24038: PUSH
24039: LD_VAR 0 1
24043: PPUSH
24044: CALL_OW 274
24048: ST_TO_ADDR
// if not pom then
24049: LD_VAR 0 4
24053: NOT
24054: IFFALSE 24058
// exit ;
24056: GO 24159
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24058: LD_ADDR_VAR 0 5
24062: PUSH
24063: LD_VAR 0 2
24067: PPUSH
24068: LD_VAR 0 1
24072: PPUSH
24073: CALL_OW 248
24077: PPUSH
24078: CALL_OW 450
24082: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24083: LD_ADDR_VAR 0 3
24087: PUSH
24088: LD_VAR 0 4
24092: PPUSH
24093: LD_INT 1
24095: PPUSH
24096: CALL_OW 275
24100: PUSH
24101: LD_VAR 0 5
24105: PUSH
24106: LD_INT 1
24108: ARRAY
24109: GREATEREQUAL
24110: PUSH
24111: LD_VAR 0 4
24115: PPUSH
24116: LD_INT 2
24118: PPUSH
24119: CALL_OW 275
24123: PUSH
24124: LD_VAR 0 5
24128: PUSH
24129: LD_INT 2
24131: ARRAY
24132: GREATEREQUAL
24133: AND
24134: PUSH
24135: LD_VAR 0 4
24139: PPUSH
24140: LD_INT 3
24142: PPUSH
24143: CALL_OW 275
24147: PUSH
24148: LD_VAR 0 5
24152: PUSH
24153: LD_INT 3
24155: ARRAY
24156: GREATEREQUAL
24157: AND
24158: ST_TO_ADDR
// end ;
24159: LD_VAR 0 3
24163: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
24164: LD_INT 0
24166: PPUSH
24167: PPUSH
24168: PPUSH
24169: PPUSH
24170: PPUSH
24171: PPUSH
24172: PPUSH
24173: PPUSH
24174: PPUSH
24175: PPUSH
// result := false ;
24176: LD_ADDR_VAR 0 6
24180: PUSH
24181: LD_INT 0
24183: ST_TO_ADDR
// if not base or not btype or not x or not y then
24184: LD_VAR 0 1
24188: NOT
24189: PUSH
24190: LD_VAR 0 2
24194: NOT
24195: OR
24196: PUSH
24197: LD_VAR 0 3
24201: NOT
24202: OR
24203: PUSH
24204: LD_VAR 0 4
24208: NOT
24209: OR
24210: IFFALSE 24214
// exit ;
24212: GO 24823
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
24214: LD_ADDR_VAR 0 12
24218: PUSH
24219: LD_VAR 0 2
24223: PPUSH
24224: LD_VAR 0 3
24228: PPUSH
24229: LD_VAR 0 4
24233: PPUSH
24234: LD_VAR 0 5
24238: PPUSH
24239: LD_VAR 0 1
24243: PUSH
24244: LD_INT 1
24246: ARRAY
24247: PPUSH
24248: CALL_OW 248
24252: PPUSH
24253: LD_INT 0
24255: PPUSH
24256: CALL 25660 0 6
24260: ST_TO_ADDR
// if not hexes then
24261: LD_VAR 0 12
24265: NOT
24266: IFFALSE 24270
// exit ;
24268: GO 24823
// for i = 1 to hexes do
24270: LD_ADDR_VAR 0 7
24274: PUSH
24275: DOUBLE
24276: LD_INT 1
24278: DEC
24279: ST_TO_ADDR
24280: LD_VAR 0 12
24284: PUSH
24285: FOR_TO
24286: IFFALSE 24821
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24288: LD_ADDR_VAR 0 11
24292: PUSH
24293: LD_VAR 0 12
24297: PUSH
24298: LD_VAR 0 7
24302: ARRAY
24303: PUSH
24304: LD_INT 1
24306: ARRAY
24307: PPUSH
24308: LD_VAR 0 12
24312: PUSH
24313: LD_VAR 0 7
24317: ARRAY
24318: PUSH
24319: LD_INT 2
24321: ARRAY
24322: PPUSH
24323: CALL_OW 428
24327: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
24328: LD_VAR 0 12
24332: PUSH
24333: LD_VAR 0 7
24337: ARRAY
24338: PUSH
24339: LD_INT 1
24341: ARRAY
24342: PPUSH
24343: LD_VAR 0 12
24347: PUSH
24348: LD_VAR 0 7
24352: ARRAY
24353: PUSH
24354: LD_INT 2
24356: ARRAY
24357: PPUSH
24358: CALL_OW 351
24362: PUSH
24363: LD_VAR 0 12
24367: PUSH
24368: LD_VAR 0 7
24372: ARRAY
24373: PUSH
24374: LD_INT 1
24376: ARRAY
24377: PPUSH
24378: LD_VAR 0 12
24382: PUSH
24383: LD_VAR 0 7
24387: ARRAY
24388: PUSH
24389: LD_INT 2
24391: ARRAY
24392: PPUSH
24393: CALL_OW 488
24397: NOT
24398: OR
24399: PUSH
24400: LD_VAR 0 11
24404: PPUSH
24405: CALL_OW 247
24409: PUSH
24410: LD_INT 3
24412: EQUAL
24413: OR
24414: IFFALSE 24420
// exit ;
24416: POP
24417: POP
24418: GO 24823
// if not tmp or not tmp in base then
24420: LD_VAR 0 11
24424: NOT
24425: PUSH
24426: LD_VAR 0 11
24430: PUSH
24431: LD_VAR 0 1
24435: IN
24436: NOT
24437: OR
24438: IFFALSE 24442
// continue ;
24440: GO 24285
// result := true ;
24442: LD_ADDR_VAR 0 6
24446: PUSH
24447: LD_INT 1
24449: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24450: LD_ADDR_VAR 0 15
24454: PUSH
24455: LD_VAR 0 1
24459: PPUSH
24460: LD_INT 22
24462: PUSH
24463: LD_VAR 0 11
24467: PPUSH
24468: CALL_OW 255
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 2
24479: PUSH
24480: LD_INT 30
24482: PUSH
24483: LD_INT 0
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: PUSH
24490: LD_INT 30
24492: PUSH
24493: LD_INT 1
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: LIST
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PPUSH
24509: CALL_OW 72
24513: ST_TO_ADDR
// if dep then
24514: LD_VAR 0 15
24518: IFFALSE 24654
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
24520: LD_ADDR_VAR 0 14
24524: PUSH
24525: LD_VAR 0 15
24529: PUSH
24530: LD_INT 1
24532: ARRAY
24533: PPUSH
24534: CALL_OW 250
24538: PPUSH
24539: LD_VAR 0 15
24543: PUSH
24544: LD_INT 1
24546: ARRAY
24547: PPUSH
24548: CALL_OW 254
24552: PPUSH
24553: LD_INT 5
24555: PPUSH
24556: CALL_OW 272
24560: PUSH
24561: LD_VAR 0 15
24565: PUSH
24566: LD_INT 1
24568: ARRAY
24569: PPUSH
24570: CALL_OW 251
24574: PPUSH
24575: LD_VAR 0 15
24579: PUSH
24580: LD_INT 1
24582: ARRAY
24583: PPUSH
24584: CALL_OW 254
24588: PPUSH
24589: LD_INT 5
24591: PPUSH
24592: CALL_OW 273
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
24601: LD_VAR 0 14
24605: PUSH
24606: LD_INT 1
24608: ARRAY
24609: PPUSH
24610: LD_VAR 0 14
24614: PUSH
24615: LD_INT 2
24617: ARRAY
24618: PPUSH
24619: CALL_OW 488
24623: IFFALSE 24654
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
24625: LD_VAR 0 11
24629: PPUSH
24630: LD_VAR 0 14
24634: PUSH
24635: LD_INT 1
24637: ARRAY
24638: PPUSH
24639: LD_VAR 0 14
24643: PUSH
24644: LD_INT 2
24646: ARRAY
24647: PPUSH
24648: CALL_OW 111
// continue ;
24652: GO 24285
// end ; end ; r := GetDir ( tmp ) ;
24654: LD_ADDR_VAR 0 13
24658: PUSH
24659: LD_VAR 0 11
24663: PPUSH
24664: CALL_OW 254
24668: ST_TO_ADDR
// if r = 5 then
24669: LD_VAR 0 13
24673: PUSH
24674: LD_INT 5
24676: EQUAL
24677: IFFALSE 24687
// r := 0 ;
24679: LD_ADDR_VAR 0 13
24683: PUSH
24684: LD_INT 0
24686: ST_TO_ADDR
// for j = r to 5 do
24687: LD_ADDR_VAR 0 8
24691: PUSH
24692: DOUBLE
24693: LD_VAR 0 13
24697: DEC
24698: ST_TO_ADDR
24699: LD_INT 5
24701: PUSH
24702: FOR_TO
24703: IFFALSE 24817
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
24705: LD_ADDR_VAR 0 9
24709: PUSH
24710: LD_VAR 0 11
24714: PPUSH
24715: CALL_OW 250
24719: PPUSH
24720: LD_VAR 0 8
24724: PPUSH
24725: LD_INT 2
24727: PPUSH
24728: CALL_OW 272
24732: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
24733: LD_ADDR_VAR 0 10
24737: PUSH
24738: LD_VAR 0 11
24742: PPUSH
24743: CALL_OW 251
24747: PPUSH
24748: LD_VAR 0 8
24752: PPUSH
24753: LD_INT 2
24755: PPUSH
24756: CALL_OW 273
24760: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
24761: LD_VAR 0 9
24765: PPUSH
24766: LD_VAR 0 10
24770: PPUSH
24771: CALL_OW 488
24775: PUSH
24776: LD_VAR 0 9
24780: PPUSH
24781: LD_VAR 0 10
24785: PPUSH
24786: CALL_OW 428
24790: NOT
24791: AND
24792: IFFALSE 24815
// begin ComMoveXY ( tmp , _x , _y ) ;
24794: LD_VAR 0 11
24798: PPUSH
24799: LD_VAR 0 9
24803: PPUSH
24804: LD_VAR 0 10
24808: PPUSH
24809: CALL_OW 111
// break ;
24813: GO 24817
// end ; end ;
24815: GO 24702
24817: POP
24818: POP
// end ;
24819: GO 24285
24821: POP
24822: POP
// end ;
24823: LD_VAR 0 6
24827: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
24828: LD_INT 0
24830: PPUSH
24831: PPUSH
24832: PPUSH
24833: PPUSH
24834: PPUSH
24835: PPUSH
24836: PPUSH
24837: PPUSH
24838: PPUSH
24839: PPUSH
// result := false ;
24840: LD_ADDR_VAR 0 6
24844: PUSH
24845: LD_INT 0
24847: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
24848: LD_VAR 0 1
24852: NOT
24853: PUSH
24854: LD_VAR 0 1
24858: PPUSH
24859: CALL_OW 266
24863: PUSH
24864: LD_INT 0
24866: PUSH
24867: LD_INT 1
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: IN
24874: NOT
24875: OR
24876: PUSH
24877: LD_VAR 0 2
24881: NOT
24882: OR
24883: PUSH
24884: LD_VAR 0 5
24888: PUSH
24889: LD_INT 0
24891: PUSH
24892: LD_INT 1
24894: PUSH
24895: LD_INT 2
24897: PUSH
24898: LD_INT 3
24900: PUSH
24901: LD_INT 4
24903: PUSH
24904: LD_INT 5
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: IN
24915: NOT
24916: OR
24917: PUSH
24918: LD_VAR 0 3
24922: PPUSH
24923: LD_VAR 0 4
24927: PPUSH
24928: CALL_OW 488
24932: NOT
24933: OR
24934: IFFALSE 24938
// exit ;
24936: GO 25655
// pom := GetBase ( depot ) ;
24938: LD_ADDR_VAR 0 10
24942: PUSH
24943: LD_VAR 0 1
24947: PPUSH
24948: CALL_OW 274
24952: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
24953: LD_ADDR_VAR 0 11
24957: PUSH
24958: LD_VAR 0 2
24962: PPUSH
24963: LD_VAR 0 1
24967: PPUSH
24968: CALL_OW 248
24972: PPUSH
24973: CALL_OW 450
24977: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
24978: LD_VAR 0 10
24982: PPUSH
24983: LD_INT 1
24985: PPUSH
24986: CALL_OW 275
24990: PUSH
24991: LD_VAR 0 11
24995: PUSH
24996: LD_INT 1
24998: ARRAY
24999: GREATEREQUAL
25000: PUSH
25001: LD_VAR 0 10
25005: PPUSH
25006: LD_INT 2
25008: PPUSH
25009: CALL_OW 275
25013: PUSH
25014: LD_VAR 0 11
25018: PUSH
25019: LD_INT 2
25021: ARRAY
25022: GREATEREQUAL
25023: AND
25024: PUSH
25025: LD_VAR 0 10
25029: PPUSH
25030: LD_INT 3
25032: PPUSH
25033: CALL_OW 275
25037: PUSH
25038: LD_VAR 0 11
25042: PUSH
25043: LD_INT 3
25045: ARRAY
25046: GREATEREQUAL
25047: AND
25048: NOT
25049: IFFALSE 25053
// exit ;
25051: GO 25655
// if GetBType ( depot ) = b_depot then
25053: LD_VAR 0 1
25057: PPUSH
25058: CALL_OW 266
25062: PUSH
25063: LD_INT 0
25065: EQUAL
25066: IFFALSE 25078
// dist := 28 else
25068: LD_ADDR_VAR 0 14
25072: PUSH
25073: LD_INT 28
25075: ST_TO_ADDR
25076: GO 25086
// dist := 36 ;
25078: LD_ADDR_VAR 0 14
25082: PUSH
25083: LD_INT 36
25085: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
25086: LD_VAR 0 1
25090: PPUSH
25091: LD_VAR 0 3
25095: PPUSH
25096: LD_VAR 0 4
25100: PPUSH
25101: CALL_OW 297
25105: PUSH
25106: LD_VAR 0 14
25110: GREATER
25111: IFFALSE 25115
// exit ;
25113: GO 25655
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
25115: LD_ADDR_VAR 0 12
25119: PUSH
25120: LD_VAR 0 2
25124: PPUSH
25125: LD_VAR 0 3
25129: PPUSH
25130: LD_VAR 0 4
25134: PPUSH
25135: LD_VAR 0 5
25139: PPUSH
25140: LD_VAR 0 1
25144: PPUSH
25145: CALL_OW 248
25149: PPUSH
25150: LD_INT 0
25152: PPUSH
25153: CALL 25660 0 6
25157: ST_TO_ADDR
// if not hexes then
25158: LD_VAR 0 12
25162: NOT
25163: IFFALSE 25167
// exit ;
25165: GO 25655
// hex := GetHexInfo ( x , y ) ;
25167: LD_ADDR_VAR 0 15
25171: PUSH
25172: LD_VAR 0 3
25176: PPUSH
25177: LD_VAR 0 4
25181: PPUSH
25182: CALL_OW 546
25186: ST_TO_ADDR
// if hex [ 1 ] then
25187: LD_VAR 0 15
25191: PUSH
25192: LD_INT 1
25194: ARRAY
25195: IFFALSE 25199
// exit ;
25197: GO 25655
// height := hex [ 2 ] ;
25199: LD_ADDR_VAR 0 13
25203: PUSH
25204: LD_VAR 0 15
25208: PUSH
25209: LD_INT 2
25211: ARRAY
25212: ST_TO_ADDR
// for i = 1 to hexes do
25213: LD_ADDR_VAR 0 7
25217: PUSH
25218: DOUBLE
25219: LD_INT 1
25221: DEC
25222: ST_TO_ADDR
25223: LD_VAR 0 12
25227: PUSH
25228: FOR_TO
25229: IFFALSE 25559
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
25231: LD_VAR 0 12
25235: PUSH
25236: LD_VAR 0 7
25240: ARRAY
25241: PUSH
25242: LD_INT 1
25244: ARRAY
25245: PPUSH
25246: LD_VAR 0 12
25250: PUSH
25251: LD_VAR 0 7
25255: ARRAY
25256: PUSH
25257: LD_INT 2
25259: ARRAY
25260: PPUSH
25261: CALL_OW 488
25265: NOT
25266: PUSH
25267: LD_VAR 0 12
25271: PUSH
25272: LD_VAR 0 7
25276: ARRAY
25277: PUSH
25278: LD_INT 1
25280: ARRAY
25281: PPUSH
25282: LD_VAR 0 12
25286: PUSH
25287: LD_VAR 0 7
25291: ARRAY
25292: PUSH
25293: LD_INT 2
25295: ARRAY
25296: PPUSH
25297: CALL_OW 428
25301: PUSH
25302: LD_INT 0
25304: GREATER
25305: OR
25306: PUSH
25307: LD_VAR 0 12
25311: PUSH
25312: LD_VAR 0 7
25316: ARRAY
25317: PUSH
25318: LD_INT 1
25320: ARRAY
25321: PPUSH
25322: LD_VAR 0 12
25326: PUSH
25327: LD_VAR 0 7
25331: ARRAY
25332: PUSH
25333: LD_INT 2
25335: ARRAY
25336: PPUSH
25337: CALL_OW 351
25341: OR
25342: IFFALSE 25348
// exit ;
25344: POP
25345: POP
25346: GO 25655
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25348: LD_ADDR_VAR 0 8
25352: PUSH
25353: LD_VAR 0 12
25357: PUSH
25358: LD_VAR 0 7
25362: ARRAY
25363: PUSH
25364: LD_INT 1
25366: ARRAY
25367: PPUSH
25368: LD_VAR 0 12
25372: PUSH
25373: LD_VAR 0 7
25377: ARRAY
25378: PUSH
25379: LD_INT 2
25381: ARRAY
25382: PPUSH
25383: CALL_OW 546
25387: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
25388: LD_VAR 0 8
25392: PUSH
25393: LD_INT 1
25395: ARRAY
25396: PUSH
25397: LD_VAR 0 8
25401: PUSH
25402: LD_INT 2
25404: ARRAY
25405: PUSH
25406: LD_VAR 0 13
25410: PUSH
25411: LD_INT 2
25413: PLUS
25414: GREATER
25415: OR
25416: PUSH
25417: LD_VAR 0 8
25421: PUSH
25422: LD_INT 2
25424: ARRAY
25425: PUSH
25426: LD_VAR 0 13
25430: PUSH
25431: LD_INT 2
25433: MINUS
25434: LESS
25435: OR
25436: PUSH
25437: LD_VAR 0 8
25441: PUSH
25442: LD_INT 3
25444: ARRAY
25445: PUSH
25446: LD_INT 0
25448: PUSH
25449: LD_INT 8
25451: PUSH
25452: LD_INT 9
25454: PUSH
25455: LD_INT 10
25457: PUSH
25458: LD_INT 11
25460: PUSH
25461: LD_INT 12
25463: PUSH
25464: LD_INT 13
25466: PUSH
25467: LD_INT 16
25469: PUSH
25470: LD_INT 17
25472: PUSH
25473: LD_INT 18
25475: PUSH
25476: LD_INT 19
25478: PUSH
25479: LD_INT 20
25481: PUSH
25482: LD_INT 21
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: IN
25500: NOT
25501: OR
25502: PUSH
25503: LD_VAR 0 8
25507: PUSH
25508: LD_INT 5
25510: ARRAY
25511: NOT
25512: OR
25513: PUSH
25514: LD_VAR 0 8
25518: PUSH
25519: LD_INT 6
25521: ARRAY
25522: PUSH
25523: LD_INT 1
25525: PUSH
25526: LD_INT 2
25528: PUSH
25529: LD_INT 7
25531: PUSH
25532: LD_INT 9
25534: PUSH
25535: LD_INT 10
25537: PUSH
25538: LD_INT 11
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: IN
25549: NOT
25550: OR
25551: IFFALSE 25557
// exit ;
25553: POP
25554: POP
25555: GO 25655
// end ;
25557: GO 25228
25559: POP
25560: POP
// side := GetSide ( depot ) ;
25561: LD_ADDR_VAR 0 9
25565: PUSH
25566: LD_VAR 0 1
25570: PPUSH
25571: CALL_OW 255
25575: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
25576: LD_VAR 0 9
25580: PPUSH
25581: LD_VAR 0 3
25585: PPUSH
25586: LD_VAR 0 4
25590: PPUSH
25591: LD_INT 20
25593: PPUSH
25594: CALL 18309 0 4
25598: PUSH
25599: LD_INT 4
25601: ARRAY
25602: IFFALSE 25606
// exit ;
25604: GO 25655
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
25606: LD_VAR 0 2
25610: PUSH
25611: LD_INT 29
25613: PUSH
25614: LD_INT 30
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: IN
25621: PUSH
25622: LD_VAR 0 3
25626: PPUSH
25627: LD_VAR 0 4
25631: PPUSH
25632: LD_VAR 0 9
25636: PPUSH
25637: CALL_OW 440
25641: NOT
25642: AND
25643: IFFALSE 25647
// exit ;
25645: GO 25655
// result := true ;
25647: LD_ADDR_VAR 0 6
25651: PUSH
25652: LD_INT 1
25654: ST_TO_ADDR
// end ;
25655: LD_VAR 0 6
25659: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
25660: LD_INT 0
25662: PPUSH
25663: PPUSH
25664: PPUSH
25665: PPUSH
25666: PPUSH
25667: PPUSH
25668: PPUSH
25669: PPUSH
25670: PPUSH
25671: PPUSH
25672: PPUSH
25673: PPUSH
25674: PPUSH
25675: PPUSH
25676: PPUSH
25677: PPUSH
25678: PPUSH
25679: PPUSH
25680: PPUSH
25681: PPUSH
25682: PPUSH
25683: PPUSH
25684: PPUSH
25685: PPUSH
25686: PPUSH
25687: PPUSH
25688: PPUSH
25689: PPUSH
25690: PPUSH
25691: PPUSH
25692: PPUSH
25693: PPUSH
25694: PPUSH
25695: PPUSH
25696: PPUSH
25697: PPUSH
25698: PPUSH
25699: PPUSH
25700: PPUSH
25701: PPUSH
25702: PPUSH
25703: PPUSH
25704: PPUSH
25705: PPUSH
25706: PPUSH
25707: PPUSH
25708: PPUSH
25709: PPUSH
25710: PPUSH
25711: PPUSH
25712: PPUSH
25713: PPUSH
25714: PPUSH
25715: PPUSH
25716: PPUSH
25717: PPUSH
25718: PPUSH
25719: PPUSH
// result = [ ] ;
25720: LD_ADDR_VAR 0 7
25724: PUSH
25725: EMPTY
25726: ST_TO_ADDR
// temp_list = [ ] ;
25727: LD_ADDR_VAR 0 9
25731: PUSH
25732: EMPTY
25733: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
25734: LD_VAR 0 4
25738: PUSH
25739: LD_INT 0
25741: PUSH
25742: LD_INT 1
25744: PUSH
25745: LD_INT 2
25747: PUSH
25748: LD_INT 3
25750: PUSH
25751: LD_INT 4
25753: PUSH
25754: LD_INT 5
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: IN
25765: NOT
25766: PUSH
25767: LD_VAR 0 1
25771: PUSH
25772: LD_INT 0
25774: PUSH
25775: LD_INT 1
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: IN
25782: PUSH
25783: LD_VAR 0 5
25787: PUSH
25788: LD_INT 1
25790: PUSH
25791: LD_INT 2
25793: PUSH
25794: LD_INT 3
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: LIST
25801: IN
25802: NOT
25803: AND
25804: OR
25805: IFFALSE 25809
// exit ;
25807: GO 44194
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
25809: LD_VAR 0 1
25813: PUSH
25814: LD_INT 6
25816: PUSH
25817: LD_INT 7
25819: PUSH
25820: LD_INT 8
25822: PUSH
25823: LD_INT 13
25825: PUSH
25826: LD_INT 12
25828: PUSH
25829: LD_INT 15
25831: PUSH
25832: LD_INT 11
25834: PUSH
25835: LD_INT 14
25837: PUSH
25838: LD_INT 10
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: IN
25852: IFFALSE 25862
// btype = b_lab ;
25854: LD_ADDR_VAR 0 1
25858: PUSH
25859: LD_INT 6
25861: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
25862: LD_VAR 0 6
25866: PUSH
25867: LD_INT 0
25869: PUSH
25870: LD_INT 1
25872: PUSH
25873: LD_INT 2
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: LIST
25880: IN
25881: NOT
25882: PUSH
25883: LD_VAR 0 1
25887: PUSH
25888: LD_INT 0
25890: PUSH
25891: LD_INT 1
25893: PUSH
25894: LD_INT 2
25896: PUSH
25897: LD_INT 3
25899: PUSH
25900: LD_INT 6
25902: PUSH
25903: LD_INT 36
25905: PUSH
25906: LD_INT 4
25908: PUSH
25909: LD_INT 5
25911: PUSH
25912: LD_INT 31
25914: PUSH
25915: LD_INT 32
25917: PUSH
25918: LD_INT 33
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: IN
25934: NOT
25935: PUSH
25936: LD_VAR 0 6
25940: PUSH
25941: LD_INT 1
25943: EQUAL
25944: AND
25945: OR
25946: PUSH
25947: LD_VAR 0 1
25951: PUSH
25952: LD_INT 2
25954: PUSH
25955: LD_INT 3
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: IN
25962: NOT
25963: PUSH
25964: LD_VAR 0 6
25968: PUSH
25969: LD_INT 2
25971: EQUAL
25972: AND
25973: OR
25974: IFFALSE 25984
// mode = 0 ;
25976: LD_ADDR_VAR 0 6
25980: PUSH
25981: LD_INT 0
25983: ST_TO_ADDR
// case mode of 0 :
25984: LD_VAR 0 6
25988: PUSH
25989: LD_INT 0
25991: DOUBLE
25992: EQUAL
25993: IFTRUE 25997
25995: GO 37450
25997: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25998: LD_ADDR_VAR 0 11
26002: PUSH
26003: LD_INT 0
26005: PUSH
26006: LD_INT 0
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 0
26015: PUSH
26016: LD_INT 1
26018: NEG
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 1
26026: PUSH
26027: LD_INT 0
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 1
26036: PUSH
26037: LD_INT 1
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 0
26046: PUSH
26047: LD_INT 1
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 1
26056: NEG
26057: PUSH
26058: LD_INT 0
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: LD_INT 1
26067: NEG
26068: PUSH
26069: LD_INT 1
26071: NEG
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 1
26079: NEG
26080: PUSH
26081: LD_INT 2
26083: NEG
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 0
26091: PUSH
26092: LD_INT 2
26094: NEG
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 1
26102: PUSH
26103: LD_INT 1
26105: NEG
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 1
26113: PUSH
26114: LD_INT 2
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 0
26123: PUSH
26124: LD_INT 2
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 1
26133: NEG
26134: PUSH
26135: LD_INT 1
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 1
26144: PUSH
26145: LD_INT 3
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 0
26154: PUSH
26155: LD_INT 3
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PUSH
26162: LD_INT 1
26164: NEG
26165: PUSH
26166: LD_INT 2
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26191: LD_ADDR_VAR 0 12
26195: PUSH
26196: LD_INT 0
26198: PUSH
26199: LD_INT 0
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 0
26208: PUSH
26209: LD_INT 1
26211: NEG
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 1
26219: PUSH
26220: LD_INT 0
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 1
26229: PUSH
26230: LD_INT 1
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 0
26239: PUSH
26240: LD_INT 1
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 1
26249: NEG
26250: PUSH
26251: LD_INT 0
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 1
26260: NEG
26261: PUSH
26262: LD_INT 1
26264: NEG
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 1
26272: PUSH
26273: LD_INT 1
26275: NEG
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 2
26283: PUSH
26284: LD_INT 0
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: LD_INT 2
26293: PUSH
26294: LD_INT 1
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 1
26303: NEG
26304: PUSH
26305: LD_INT 1
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 2
26314: NEG
26315: PUSH
26316: LD_INT 0
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 2
26325: NEG
26326: PUSH
26327: LD_INT 1
26329: NEG
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: LD_INT 2
26337: NEG
26338: PUSH
26339: LD_INT 1
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 3
26348: NEG
26349: PUSH
26350: LD_INT 0
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: LD_INT 3
26359: NEG
26360: PUSH
26361: LD_INT 1
26363: NEG
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26387: LD_ADDR_VAR 0 13
26391: PUSH
26392: LD_INT 0
26394: PUSH
26395: LD_INT 0
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 0
26404: PUSH
26405: LD_INT 1
26407: NEG
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 1
26415: PUSH
26416: LD_INT 0
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 1
26425: PUSH
26426: LD_INT 1
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 0
26435: PUSH
26436: LD_INT 1
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 1
26445: NEG
26446: PUSH
26447: LD_INT 0
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 1
26456: NEG
26457: PUSH
26458: LD_INT 1
26460: NEG
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 1
26468: NEG
26469: PUSH
26470: LD_INT 2
26472: NEG
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 2
26480: PUSH
26481: LD_INT 1
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 2
26490: PUSH
26491: LD_INT 2
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 1
26500: PUSH
26501: LD_INT 2
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 2
26510: NEG
26511: PUSH
26512: LD_INT 1
26514: NEG
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 2
26522: NEG
26523: PUSH
26524: LD_INT 2
26526: NEG
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 2
26534: NEG
26535: PUSH
26536: LD_INT 3
26538: NEG
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 3
26546: NEG
26547: PUSH
26548: LD_INT 2
26550: NEG
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 3
26558: NEG
26559: PUSH
26560: LD_INT 3
26562: NEG
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26586: LD_ADDR_VAR 0 14
26590: PUSH
26591: LD_INT 0
26593: PUSH
26594: LD_INT 0
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 0
26603: PUSH
26604: LD_INT 1
26606: NEG
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 1
26614: PUSH
26615: LD_INT 0
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: LD_INT 1
26624: PUSH
26625: LD_INT 1
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 0
26634: PUSH
26635: LD_INT 1
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 1
26644: NEG
26645: PUSH
26646: LD_INT 0
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 1
26655: NEG
26656: PUSH
26657: LD_INT 1
26659: NEG
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 1
26667: NEG
26668: PUSH
26669: LD_INT 2
26671: NEG
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 0
26679: PUSH
26680: LD_INT 2
26682: NEG
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 1
26690: PUSH
26691: LD_INT 1
26693: NEG
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 1
26701: PUSH
26702: LD_INT 2
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 0
26711: PUSH
26712: LD_INT 2
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 1
26721: NEG
26722: PUSH
26723: LD_INT 1
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 1
26732: NEG
26733: PUSH
26734: LD_INT 3
26736: NEG
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 0
26744: PUSH
26745: LD_INT 3
26747: NEG
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 1
26755: PUSH
26756: LD_INT 2
26758: NEG
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26782: LD_ADDR_VAR 0 15
26786: PUSH
26787: LD_INT 0
26789: PUSH
26790: LD_INT 0
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 0
26799: PUSH
26800: LD_INT 1
26802: NEG
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: LD_INT 1
26810: PUSH
26811: LD_INT 0
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 1
26820: PUSH
26821: LD_INT 1
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 0
26830: PUSH
26831: LD_INT 1
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 1
26840: NEG
26841: PUSH
26842: LD_INT 0
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 1
26851: NEG
26852: PUSH
26853: LD_INT 1
26855: NEG
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: LD_INT 1
26863: PUSH
26864: LD_INT 1
26866: NEG
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: LD_INT 2
26874: PUSH
26875: LD_INT 0
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 2
26884: PUSH
26885: LD_INT 1
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 1
26894: NEG
26895: PUSH
26896: LD_INT 1
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 2
26905: NEG
26906: PUSH
26907: LD_INT 0
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 2
26916: NEG
26917: PUSH
26918: LD_INT 1
26920: NEG
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 2
26928: PUSH
26929: LD_INT 1
26931: NEG
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 3
26939: PUSH
26940: LD_INT 0
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 3
26949: PUSH
26950: LD_INT 1
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26975: LD_ADDR_VAR 0 16
26979: PUSH
26980: LD_INT 0
26982: PUSH
26983: LD_INT 0
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 0
26992: PUSH
26993: LD_INT 1
26995: NEG
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 1
27003: PUSH
27004: LD_INT 0
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 1
27013: PUSH
27014: LD_INT 1
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 0
27023: PUSH
27024: LD_INT 1
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 1
27033: NEG
27034: PUSH
27035: LD_INT 0
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 1
27044: NEG
27045: PUSH
27046: LD_INT 1
27048: NEG
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 1
27056: NEG
27057: PUSH
27058: LD_INT 2
27060: NEG
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 2
27068: PUSH
27069: LD_INT 1
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 2
27078: PUSH
27079: LD_INT 2
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 1
27088: PUSH
27089: LD_INT 2
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 2
27098: NEG
27099: PUSH
27100: LD_INT 1
27102: NEG
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 2
27110: NEG
27111: PUSH
27112: LD_INT 2
27114: NEG
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 3
27122: PUSH
27123: LD_INT 2
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 3
27132: PUSH
27133: LD_INT 3
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 2
27142: PUSH
27143: LD_INT 3
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27168: LD_ADDR_VAR 0 17
27172: PUSH
27173: LD_INT 0
27175: PUSH
27176: LD_INT 0
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 0
27185: PUSH
27186: LD_INT 1
27188: NEG
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 1
27196: PUSH
27197: LD_INT 0
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 1
27206: PUSH
27207: LD_INT 1
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 0
27216: PUSH
27217: LD_INT 1
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 1
27226: NEG
27227: PUSH
27228: LD_INT 0
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 1
27237: NEG
27238: PUSH
27239: LD_INT 1
27241: NEG
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 1
27249: NEG
27250: PUSH
27251: LD_INT 2
27253: NEG
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 0
27261: PUSH
27262: LD_INT 2
27264: NEG
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 1
27272: PUSH
27273: LD_INT 1
27275: NEG
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 2
27283: PUSH
27284: LD_INT 0
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PUSH
27291: LD_INT 2
27293: PUSH
27294: LD_INT 1
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: PUSH
27301: LD_INT 2
27303: PUSH
27304: LD_INT 2
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 1
27313: PUSH
27314: LD_INT 2
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 0
27323: PUSH
27324: LD_INT 2
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 1
27333: NEG
27334: PUSH
27335: LD_INT 1
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 2
27344: NEG
27345: PUSH
27346: LD_INT 0
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 2
27355: NEG
27356: PUSH
27357: LD_INT 1
27359: NEG
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 2
27367: NEG
27368: PUSH
27369: LD_INT 2
27371: NEG
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27398: LD_ADDR_VAR 0 18
27402: PUSH
27403: LD_INT 0
27405: PUSH
27406: LD_INT 0
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 0
27415: PUSH
27416: LD_INT 1
27418: NEG
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: LD_INT 1
27426: PUSH
27427: LD_INT 0
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: LD_INT 1
27436: PUSH
27437: LD_INT 1
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 0
27446: PUSH
27447: LD_INT 1
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 1
27456: NEG
27457: PUSH
27458: LD_INT 0
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 1
27467: NEG
27468: PUSH
27469: LD_INT 1
27471: NEG
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 1
27479: NEG
27480: PUSH
27481: LD_INT 2
27483: NEG
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 0
27491: PUSH
27492: LD_INT 2
27494: NEG
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 1
27502: PUSH
27503: LD_INT 1
27505: NEG
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 2
27513: PUSH
27514: LD_INT 0
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 2
27523: PUSH
27524: LD_INT 1
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 2
27533: PUSH
27534: LD_INT 2
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 1
27543: PUSH
27544: LD_INT 2
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 0
27553: PUSH
27554: LD_INT 2
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 1
27563: NEG
27564: PUSH
27565: LD_INT 1
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 2
27574: NEG
27575: PUSH
27576: LD_INT 0
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 2
27585: NEG
27586: PUSH
27587: LD_INT 1
27589: NEG
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 2
27597: NEG
27598: PUSH
27599: LD_INT 2
27601: NEG
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27628: LD_ADDR_VAR 0 19
27632: PUSH
27633: LD_INT 0
27635: PUSH
27636: LD_INT 0
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 0
27645: PUSH
27646: LD_INT 1
27648: NEG
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 1
27656: PUSH
27657: LD_INT 0
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 1
27666: PUSH
27667: LD_INT 1
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 0
27676: PUSH
27677: LD_INT 1
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 1
27686: NEG
27687: PUSH
27688: LD_INT 0
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 1
27697: NEG
27698: PUSH
27699: LD_INT 1
27701: NEG
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 1
27709: NEG
27710: PUSH
27711: LD_INT 2
27713: NEG
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 0
27721: PUSH
27722: LD_INT 2
27724: NEG
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 1
27732: PUSH
27733: LD_INT 1
27735: NEG
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PUSH
27741: LD_INT 2
27743: PUSH
27744: LD_INT 0
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: PUSH
27751: LD_INT 2
27753: PUSH
27754: LD_INT 1
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 2
27763: PUSH
27764: LD_INT 2
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 1
27773: PUSH
27774: LD_INT 2
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: LD_INT 0
27783: PUSH
27784: LD_INT 2
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 1
27793: NEG
27794: PUSH
27795: LD_INT 1
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: LD_INT 2
27804: NEG
27805: PUSH
27806: LD_INT 0
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: LD_INT 2
27815: NEG
27816: PUSH
27817: LD_INT 1
27819: NEG
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 2
27827: NEG
27828: PUSH
27829: LD_INT 2
27831: NEG
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27858: LD_ADDR_VAR 0 20
27862: PUSH
27863: LD_INT 0
27865: PUSH
27866: LD_INT 0
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 0
27875: PUSH
27876: LD_INT 1
27878: NEG
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 1
27886: PUSH
27887: LD_INT 0
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 1
27896: PUSH
27897: LD_INT 1
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 0
27906: PUSH
27907: LD_INT 1
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: LD_INT 1
27916: NEG
27917: PUSH
27918: LD_INT 0
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 1
27927: NEG
27928: PUSH
27929: LD_INT 1
27931: NEG
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 1
27939: NEG
27940: PUSH
27941: LD_INT 2
27943: NEG
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 0
27951: PUSH
27952: LD_INT 2
27954: NEG
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 1
27962: PUSH
27963: LD_INT 1
27965: NEG
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 2
27973: PUSH
27974: LD_INT 0
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 2
27983: PUSH
27984: LD_INT 1
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 2
27993: PUSH
27994: LD_INT 2
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 1
28003: PUSH
28004: LD_INT 2
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 0
28013: PUSH
28014: LD_INT 2
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 1
28023: NEG
28024: PUSH
28025: LD_INT 1
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 2
28034: NEG
28035: PUSH
28036: LD_INT 0
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 2
28045: NEG
28046: PUSH
28047: LD_INT 1
28049: NEG
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 2
28057: NEG
28058: PUSH
28059: LD_INT 2
28061: NEG
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28088: LD_ADDR_VAR 0 21
28092: PUSH
28093: LD_INT 0
28095: PUSH
28096: LD_INT 0
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 0
28105: PUSH
28106: LD_INT 1
28108: NEG
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 1
28116: PUSH
28117: LD_INT 0
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 1
28126: PUSH
28127: LD_INT 1
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 0
28136: PUSH
28137: LD_INT 1
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_INT 1
28146: NEG
28147: PUSH
28148: LD_INT 0
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 1
28157: NEG
28158: PUSH
28159: LD_INT 1
28161: NEG
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 1
28169: NEG
28170: PUSH
28171: LD_INT 2
28173: NEG
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 0
28181: PUSH
28182: LD_INT 2
28184: NEG
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 1
28192: PUSH
28193: LD_INT 1
28195: NEG
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 2
28203: PUSH
28204: LD_INT 0
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 2
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 2
28223: PUSH
28224: LD_INT 2
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 1
28233: PUSH
28234: LD_INT 2
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: LD_INT 0
28243: PUSH
28244: LD_INT 2
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 1
28253: NEG
28254: PUSH
28255: LD_INT 1
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 2
28264: NEG
28265: PUSH
28266: LD_INT 0
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: LD_INT 2
28275: NEG
28276: PUSH
28277: LD_INT 1
28279: NEG
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: LD_INT 2
28287: NEG
28288: PUSH
28289: LD_INT 2
28291: NEG
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28318: LD_ADDR_VAR 0 22
28322: PUSH
28323: LD_INT 0
28325: PUSH
28326: LD_INT 0
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 0
28335: PUSH
28336: LD_INT 1
28338: NEG
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 1
28346: PUSH
28347: LD_INT 0
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 1
28356: PUSH
28357: LD_INT 1
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 0
28366: PUSH
28367: LD_INT 1
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 1
28376: NEG
28377: PUSH
28378: LD_INT 0
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 1
28387: NEG
28388: PUSH
28389: LD_INT 1
28391: NEG
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 1
28399: NEG
28400: PUSH
28401: LD_INT 2
28403: NEG
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 0
28411: PUSH
28412: LD_INT 2
28414: NEG
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 1
28422: PUSH
28423: LD_INT 1
28425: NEG
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 2
28433: PUSH
28434: LD_INT 0
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 2
28443: PUSH
28444: LD_INT 1
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 2
28453: PUSH
28454: LD_INT 2
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 1
28463: PUSH
28464: LD_INT 2
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 0
28473: PUSH
28474: LD_INT 2
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 1
28483: NEG
28484: PUSH
28485: LD_INT 1
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 2
28494: NEG
28495: PUSH
28496: LD_INT 0
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 2
28505: NEG
28506: PUSH
28507: LD_INT 1
28509: NEG
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 2
28517: NEG
28518: PUSH
28519: LD_INT 2
28521: NEG
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28548: LD_ADDR_VAR 0 23
28552: PUSH
28553: LD_INT 0
28555: PUSH
28556: LD_INT 0
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 0
28565: PUSH
28566: LD_INT 1
28568: NEG
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 1
28576: PUSH
28577: LD_INT 0
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: LD_INT 1
28586: PUSH
28587: LD_INT 1
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 0
28596: PUSH
28597: LD_INT 1
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 1
28606: NEG
28607: PUSH
28608: LD_INT 0
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 1
28617: NEG
28618: PUSH
28619: LD_INT 1
28621: NEG
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 1
28629: NEG
28630: PUSH
28631: LD_INT 2
28633: NEG
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 0
28641: PUSH
28642: LD_INT 2
28644: NEG
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 1
28652: PUSH
28653: LD_INT 1
28655: NEG
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 2
28663: PUSH
28664: LD_INT 0
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 2
28673: PUSH
28674: LD_INT 1
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 2
28683: PUSH
28684: LD_INT 2
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 1
28693: PUSH
28694: LD_INT 2
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 0
28703: PUSH
28704: LD_INT 2
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 1
28713: NEG
28714: PUSH
28715: LD_INT 1
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 2
28724: NEG
28725: PUSH
28726: LD_INT 0
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 2
28735: NEG
28736: PUSH
28737: LD_INT 1
28739: NEG
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 2
28747: NEG
28748: PUSH
28749: LD_INT 2
28751: NEG
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 2
28759: NEG
28760: PUSH
28761: LD_INT 3
28763: NEG
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 1
28771: NEG
28772: PUSH
28773: LD_INT 3
28775: NEG
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 1
28783: PUSH
28784: LD_INT 2
28786: NEG
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 2
28794: PUSH
28795: LD_INT 1
28797: NEG
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
28828: LD_ADDR_VAR 0 24
28832: PUSH
28833: LD_INT 0
28835: PUSH
28836: LD_INT 0
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: LD_INT 0
28845: PUSH
28846: LD_INT 1
28848: NEG
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 1
28856: PUSH
28857: LD_INT 0
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: LD_INT 1
28866: PUSH
28867: LD_INT 1
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_INT 0
28876: PUSH
28877: LD_INT 1
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 1
28886: NEG
28887: PUSH
28888: LD_INT 0
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: LD_INT 1
28897: NEG
28898: PUSH
28899: LD_INT 1
28901: NEG
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 1
28909: NEG
28910: PUSH
28911: LD_INT 2
28913: NEG
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 0
28921: PUSH
28922: LD_INT 2
28924: NEG
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 1
28932: PUSH
28933: LD_INT 1
28935: NEG
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 2
28943: PUSH
28944: LD_INT 0
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 2
28953: PUSH
28954: LD_INT 1
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 2
28963: PUSH
28964: LD_INT 2
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 1
28973: PUSH
28974: LD_INT 2
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 0
28983: PUSH
28984: LD_INT 2
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 1
28993: NEG
28994: PUSH
28995: LD_INT 1
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 2
29004: NEG
29005: PUSH
29006: LD_INT 0
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 2
29015: NEG
29016: PUSH
29017: LD_INT 1
29019: NEG
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 2
29027: NEG
29028: PUSH
29029: LD_INT 2
29031: NEG
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 1
29039: PUSH
29040: LD_INT 2
29042: NEG
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PUSH
29048: LD_INT 2
29050: PUSH
29051: LD_INT 1
29053: NEG
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 3
29061: PUSH
29062: LD_INT 1
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: PUSH
29069: LD_INT 3
29071: PUSH
29072: LD_INT 2
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
29104: LD_ADDR_VAR 0 25
29108: PUSH
29109: LD_INT 0
29111: PUSH
29112: LD_INT 0
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 0
29121: PUSH
29122: LD_INT 1
29124: NEG
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 1
29132: PUSH
29133: LD_INT 0
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 1
29142: PUSH
29143: LD_INT 1
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 0
29152: PUSH
29153: LD_INT 1
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 1
29162: NEG
29163: PUSH
29164: LD_INT 0
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 1
29173: NEG
29174: PUSH
29175: LD_INT 1
29177: NEG
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 1
29185: NEG
29186: PUSH
29187: LD_INT 2
29189: NEG
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 0
29197: PUSH
29198: LD_INT 2
29200: NEG
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: LD_INT 1
29208: PUSH
29209: LD_INT 1
29211: NEG
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 2
29219: PUSH
29220: LD_INT 0
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 2
29229: PUSH
29230: LD_INT 1
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 2
29239: PUSH
29240: LD_INT 2
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 1
29249: PUSH
29250: LD_INT 2
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 0
29259: PUSH
29260: LD_INT 2
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 1
29269: NEG
29270: PUSH
29271: LD_INT 1
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: LD_INT 2
29280: NEG
29281: PUSH
29282: LD_INT 0
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 2
29291: NEG
29292: PUSH
29293: LD_INT 1
29295: NEG
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 2
29303: NEG
29304: PUSH
29305: LD_INT 2
29307: NEG
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: LD_INT 3
29315: PUSH
29316: LD_INT 1
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: LD_INT 3
29325: PUSH
29326: LD_INT 2
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 2
29335: PUSH
29336: LD_INT 3
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 1
29345: PUSH
29346: LD_INT 3
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29378: LD_ADDR_VAR 0 26
29382: PUSH
29383: LD_INT 0
29385: PUSH
29386: LD_INT 0
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 0
29395: PUSH
29396: LD_INT 1
29398: NEG
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 1
29406: PUSH
29407: LD_INT 0
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: PUSH
29414: LD_INT 1
29416: PUSH
29417: LD_INT 1
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 0
29426: PUSH
29427: LD_INT 1
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 1
29436: NEG
29437: PUSH
29438: LD_INT 0
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 1
29447: NEG
29448: PUSH
29449: LD_INT 1
29451: NEG
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 1
29459: NEG
29460: PUSH
29461: LD_INT 2
29463: NEG
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 0
29471: PUSH
29472: LD_INT 2
29474: NEG
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 1
29482: PUSH
29483: LD_INT 1
29485: NEG
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 2
29493: PUSH
29494: LD_INT 0
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 2
29503: PUSH
29504: LD_INT 1
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 2
29513: PUSH
29514: LD_INT 2
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 1
29523: PUSH
29524: LD_INT 2
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PUSH
29531: LD_INT 0
29533: PUSH
29534: LD_INT 2
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 1
29543: NEG
29544: PUSH
29545: LD_INT 1
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 2
29554: NEG
29555: PUSH
29556: LD_INT 0
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: LD_INT 2
29565: NEG
29566: PUSH
29567: LD_INT 1
29569: NEG
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 2
29577: NEG
29578: PUSH
29579: LD_INT 2
29581: NEG
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 2
29589: PUSH
29590: LD_INT 3
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 1
29599: PUSH
29600: LD_INT 3
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: LD_INT 1
29609: NEG
29610: PUSH
29611: LD_INT 2
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 2
29620: NEG
29621: PUSH
29622: LD_INT 1
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29654: LD_ADDR_VAR 0 27
29658: PUSH
29659: LD_INT 0
29661: PUSH
29662: LD_INT 0
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: LD_INT 0
29671: PUSH
29672: LD_INT 1
29674: NEG
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 1
29682: PUSH
29683: LD_INT 0
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 1
29692: PUSH
29693: LD_INT 1
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 0
29702: PUSH
29703: LD_INT 1
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 1
29712: NEG
29713: PUSH
29714: LD_INT 0
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 1
29723: NEG
29724: PUSH
29725: LD_INT 1
29727: NEG
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 1
29735: NEG
29736: PUSH
29737: LD_INT 2
29739: NEG
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 0
29747: PUSH
29748: LD_INT 2
29750: NEG
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 1
29758: PUSH
29759: LD_INT 1
29761: NEG
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 2
29769: PUSH
29770: LD_INT 0
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 2
29779: PUSH
29780: LD_INT 1
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: LD_INT 2
29789: PUSH
29790: LD_INT 2
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 1
29799: PUSH
29800: LD_INT 2
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 0
29809: PUSH
29810: LD_INT 2
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 1
29819: NEG
29820: PUSH
29821: LD_INT 1
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 2
29830: NEG
29831: PUSH
29832: LD_INT 0
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 2
29841: NEG
29842: PUSH
29843: LD_INT 1
29845: NEG
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 2
29853: NEG
29854: PUSH
29855: LD_INT 2
29857: NEG
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 1
29865: NEG
29866: PUSH
29867: LD_INT 2
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 2
29876: NEG
29877: PUSH
29878: LD_INT 1
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 3
29887: NEG
29888: PUSH
29889: LD_INT 1
29891: NEG
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 3
29899: NEG
29900: PUSH
29901: LD_INT 2
29903: NEG
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29934: LD_ADDR_VAR 0 28
29938: PUSH
29939: LD_INT 0
29941: PUSH
29942: LD_INT 0
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 0
29951: PUSH
29952: LD_INT 1
29954: NEG
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 1
29962: PUSH
29963: LD_INT 0
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 1
29972: PUSH
29973: LD_INT 1
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 0
29982: PUSH
29983: LD_INT 1
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 1
29992: NEG
29993: PUSH
29994: LD_INT 0
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 1
30003: NEG
30004: PUSH
30005: LD_INT 1
30007: NEG
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 1
30015: NEG
30016: PUSH
30017: LD_INT 2
30019: NEG
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 0
30027: PUSH
30028: LD_INT 2
30030: NEG
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 1
30038: PUSH
30039: LD_INT 1
30041: NEG
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 2
30049: PUSH
30050: LD_INT 0
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 2
30059: PUSH
30060: LD_INT 1
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 2
30069: PUSH
30070: LD_INT 2
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 1
30079: PUSH
30080: LD_INT 2
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 0
30089: PUSH
30090: LD_INT 2
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 1
30099: NEG
30100: PUSH
30101: LD_INT 1
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 2
30110: NEG
30111: PUSH
30112: LD_INT 0
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PUSH
30119: LD_INT 2
30121: NEG
30122: PUSH
30123: LD_INT 1
30125: NEG
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: LD_INT 2
30133: NEG
30134: PUSH
30135: LD_INT 2
30137: NEG
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 2
30145: NEG
30146: PUSH
30147: LD_INT 3
30149: NEG
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 1
30157: NEG
30158: PUSH
30159: LD_INT 3
30161: NEG
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 3
30169: NEG
30170: PUSH
30171: LD_INT 1
30173: NEG
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 3
30181: NEG
30182: PUSH
30183: LD_INT 2
30185: NEG
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30216: LD_ADDR_VAR 0 29
30220: PUSH
30221: LD_INT 0
30223: PUSH
30224: LD_INT 0
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 0
30233: PUSH
30234: LD_INT 1
30236: NEG
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 1
30244: PUSH
30245: LD_INT 0
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 1
30254: PUSH
30255: LD_INT 1
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 0
30264: PUSH
30265: LD_INT 1
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 1
30274: NEG
30275: PUSH
30276: LD_INT 0
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 1
30285: NEG
30286: PUSH
30287: LD_INT 1
30289: NEG
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 1
30297: NEG
30298: PUSH
30299: LD_INT 2
30301: NEG
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 0
30309: PUSH
30310: LD_INT 2
30312: NEG
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: LD_INT 1
30320: PUSH
30321: LD_INT 1
30323: NEG
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 2
30331: PUSH
30332: LD_INT 0
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 2
30341: PUSH
30342: LD_INT 1
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 1
30351: PUSH
30352: LD_INT 2
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 0
30361: PUSH
30362: LD_INT 2
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 1
30371: NEG
30372: PUSH
30373: LD_INT 1
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 2
30382: NEG
30383: PUSH
30384: LD_INT 1
30386: NEG
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 2
30394: NEG
30395: PUSH
30396: LD_INT 2
30398: NEG
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 2
30406: NEG
30407: PUSH
30408: LD_INT 3
30410: NEG
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 2
30418: PUSH
30419: LD_INT 1
30421: NEG
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 3
30429: PUSH
30430: LD_INT 1
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 1
30439: PUSH
30440: LD_INT 3
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 1
30449: NEG
30450: PUSH
30451: LD_INT 2
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 3
30460: NEG
30461: PUSH
30462: LD_INT 2
30464: NEG
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30495: LD_ADDR_VAR 0 30
30499: PUSH
30500: LD_INT 0
30502: PUSH
30503: LD_INT 0
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 0
30512: PUSH
30513: LD_INT 1
30515: NEG
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 1
30523: PUSH
30524: LD_INT 0
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 1
30533: PUSH
30534: LD_INT 1
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 0
30543: PUSH
30544: LD_INT 1
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 1
30553: NEG
30554: PUSH
30555: LD_INT 0
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 1
30564: NEG
30565: PUSH
30566: LD_INT 1
30568: NEG
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 1
30576: NEG
30577: PUSH
30578: LD_INT 2
30580: NEG
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 0
30588: PUSH
30589: LD_INT 2
30591: NEG
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 1
30599: PUSH
30600: LD_INT 1
30602: NEG
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 2
30610: PUSH
30611: LD_INT 0
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 2
30620: PUSH
30621: LD_INT 1
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 2
30630: PUSH
30631: LD_INT 2
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 1
30640: PUSH
30641: LD_INT 2
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 1
30650: NEG
30651: PUSH
30652: LD_INT 1
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 2
30661: NEG
30662: PUSH
30663: LD_INT 0
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 2
30672: NEG
30673: PUSH
30674: LD_INT 1
30676: NEG
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 1
30684: NEG
30685: PUSH
30686: LD_INT 3
30688: NEG
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 1
30696: PUSH
30697: LD_INT 2
30699: NEG
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 3
30707: PUSH
30708: LD_INT 2
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 2
30717: PUSH
30718: LD_INT 3
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 2
30727: NEG
30728: PUSH
30729: LD_INT 1
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 3
30738: NEG
30739: PUSH
30740: LD_INT 1
30742: NEG
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30773: LD_ADDR_VAR 0 31
30777: PUSH
30778: LD_INT 0
30780: PUSH
30781: LD_INT 0
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 0
30790: PUSH
30791: LD_INT 1
30793: NEG
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 1
30801: PUSH
30802: LD_INT 0
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 1
30811: PUSH
30812: LD_INT 1
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 0
30821: PUSH
30822: LD_INT 1
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 1
30831: NEG
30832: PUSH
30833: LD_INT 0
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 1
30842: NEG
30843: PUSH
30844: LD_INT 1
30846: NEG
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 1
30854: NEG
30855: PUSH
30856: LD_INT 2
30858: NEG
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 1
30866: PUSH
30867: LD_INT 1
30869: NEG
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 2
30877: PUSH
30878: LD_INT 0
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 2
30887: PUSH
30888: LD_INT 1
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 2
30897: PUSH
30898: LD_INT 2
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 1
30907: PUSH
30908: LD_INT 2
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 0
30917: PUSH
30918: LD_INT 2
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 1
30927: NEG
30928: PUSH
30929: LD_INT 1
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 2
30938: NEG
30939: PUSH
30940: LD_INT 1
30942: NEG
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 2
30950: NEG
30951: PUSH
30952: LD_INT 2
30954: NEG
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: LD_INT 2
30962: NEG
30963: PUSH
30964: LD_INT 3
30966: NEG
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 2
30974: PUSH
30975: LD_INT 1
30977: NEG
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 3
30985: PUSH
30986: LD_INT 1
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 1
30995: PUSH
30996: LD_INT 3
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 1
31005: NEG
31006: PUSH
31007: LD_INT 2
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: LD_INT 3
31016: NEG
31017: PUSH
31018: LD_INT 2
31020: NEG
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31051: LD_ADDR_VAR 0 32
31055: PUSH
31056: LD_INT 0
31058: PUSH
31059: LD_INT 0
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 0
31068: PUSH
31069: LD_INT 1
31071: NEG
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 1
31079: PUSH
31080: LD_INT 0
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 1
31089: PUSH
31090: LD_INT 1
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 0
31099: PUSH
31100: LD_INT 1
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 1
31109: NEG
31110: PUSH
31111: LD_INT 0
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 1
31120: NEG
31121: PUSH
31122: LD_INT 1
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 1
31132: NEG
31133: PUSH
31134: LD_INT 2
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 0
31144: PUSH
31145: LD_INT 2
31147: NEG
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 1
31155: PUSH
31156: LD_INT 1
31158: NEG
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 2
31166: PUSH
31167: LD_INT 1
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 2
31176: PUSH
31177: LD_INT 2
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 1
31186: PUSH
31187: LD_INT 2
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 0
31196: PUSH
31197: LD_INT 2
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 1
31206: NEG
31207: PUSH
31208: LD_INT 1
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 2
31217: NEG
31218: PUSH
31219: LD_INT 0
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 2
31228: NEG
31229: PUSH
31230: LD_INT 1
31232: NEG
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 1
31240: NEG
31241: PUSH
31242: LD_INT 3
31244: NEG
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 1
31252: PUSH
31253: LD_INT 2
31255: NEG
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 3
31263: PUSH
31264: LD_INT 2
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 2
31273: PUSH
31274: LD_INT 3
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 2
31283: NEG
31284: PUSH
31285: LD_INT 1
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 3
31294: NEG
31295: PUSH
31296: LD_INT 1
31298: NEG
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31329: LD_ADDR_VAR 0 33
31333: PUSH
31334: LD_INT 0
31336: PUSH
31337: LD_INT 0
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 0
31346: PUSH
31347: LD_INT 1
31349: NEG
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 1
31357: PUSH
31358: LD_INT 0
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 1
31367: PUSH
31368: LD_INT 1
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 0
31377: PUSH
31378: LD_INT 1
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 1
31387: NEG
31388: PUSH
31389: LD_INT 0
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 1
31398: NEG
31399: PUSH
31400: LD_INT 1
31402: NEG
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 1
31410: NEG
31411: PUSH
31412: LD_INT 2
31414: NEG
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 1
31422: PUSH
31423: LD_INT 1
31425: NEG
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 2
31433: PUSH
31434: LD_INT 0
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 2
31443: PUSH
31444: LD_INT 1
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 1
31453: PUSH
31454: LD_INT 2
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 0
31463: PUSH
31464: LD_INT 2
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 1
31473: NEG
31474: PUSH
31475: LD_INT 1
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 2
31484: NEG
31485: PUSH
31486: LD_INT 0
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 2
31495: NEG
31496: PUSH
31497: LD_INT 1
31499: NEG
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 2
31507: NEG
31508: PUSH
31509: LD_INT 2
31511: NEG
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 2
31519: NEG
31520: PUSH
31521: LD_INT 3
31523: NEG
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 2
31531: PUSH
31532: LD_INT 1
31534: NEG
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 3
31542: PUSH
31543: LD_INT 1
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 1
31552: PUSH
31553: LD_INT 3
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 1
31562: NEG
31563: PUSH
31564: LD_INT 2
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: LD_INT 3
31573: NEG
31574: PUSH
31575: LD_INT 2
31577: NEG
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31608: LD_ADDR_VAR 0 34
31612: PUSH
31613: LD_INT 0
31615: PUSH
31616: LD_INT 0
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 0
31625: PUSH
31626: LD_INT 1
31628: NEG
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 1
31636: PUSH
31637: LD_INT 0
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 1
31646: PUSH
31647: LD_INT 1
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 0
31656: PUSH
31657: LD_INT 1
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 1
31666: NEG
31667: PUSH
31668: LD_INT 0
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 1
31677: NEG
31678: PUSH
31679: LD_INT 1
31681: NEG
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 1
31689: NEG
31690: PUSH
31691: LD_INT 2
31693: NEG
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 0
31701: PUSH
31702: LD_INT 2
31704: NEG
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 1
31712: PUSH
31713: LD_INT 1
31715: NEG
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 2
31723: PUSH
31724: LD_INT 1
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 2
31733: PUSH
31734: LD_INT 2
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 1
31743: PUSH
31744: LD_INT 2
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 1
31753: NEG
31754: PUSH
31755: LD_INT 1
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 2
31764: NEG
31765: PUSH
31766: LD_INT 0
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: PUSH
31773: LD_INT 2
31775: NEG
31776: PUSH
31777: LD_INT 1
31779: NEG
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 2
31787: NEG
31788: PUSH
31789: LD_INT 2
31791: NEG
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 1
31799: NEG
31800: PUSH
31801: LD_INT 3
31803: NEG
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 1
31811: PUSH
31812: LD_INT 2
31814: NEG
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 3
31822: PUSH
31823: LD_INT 2
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 2
31832: PUSH
31833: LD_INT 3
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 2
31842: NEG
31843: PUSH
31844: LD_INT 1
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 3
31853: NEG
31854: PUSH
31855: LD_INT 1
31857: NEG
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31888: LD_ADDR_VAR 0 35
31892: PUSH
31893: LD_INT 0
31895: PUSH
31896: LD_INT 0
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 0
31905: PUSH
31906: LD_INT 1
31908: NEG
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 1
31916: PUSH
31917: LD_INT 0
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 1
31926: PUSH
31927: LD_INT 1
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 0
31936: PUSH
31937: LD_INT 1
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 1
31946: NEG
31947: PUSH
31948: LD_INT 0
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: LD_INT 1
31957: NEG
31958: PUSH
31959: LD_INT 1
31961: NEG
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 2
31969: PUSH
31970: LD_INT 1
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 2
31979: NEG
31980: PUSH
31981: LD_INT 1
31983: NEG
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: LIST
31993: LIST
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32000: LD_ADDR_VAR 0 36
32004: PUSH
32005: LD_INT 0
32007: PUSH
32008: LD_INT 0
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 0
32017: PUSH
32018: LD_INT 1
32020: NEG
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 1
32028: PUSH
32029: LD_INT 0
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 1
32038: PUSH
32039: LD_INT 1
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 0
32048: PUSH
32049: LD_INT 1
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 1
32058: NEG
32059: PUSH
32060: LD_INT 0
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 1
32069: NEG
32070: PUSH
32071: LD_INT 1
32073: NEG
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 1
32081: NEG
32082: PUSH
32083: LD_INT 2
32085: NEG
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 1
32093: PUSH
32094: LD_INT 2
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32112: LD_ADDR_VAR 0 37
32116: PUSH
32117: LD_INT 0
32119: PUSH
32120: LD_INT 0
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 0
32129: PUSH
32130: LD_INT 1
32132: NEG
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 1
32140: PUSH
32141: LD_INT 0
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 1
32150: PUSH
32151: LD_INT 1
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 0
32160: PUSH
32161: LD_INT 1
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 1
32170: NEG
32171: PUSH
32172: LD_INT 0
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 1
32181: NEG
32182: PUSH
32183: LD_INT 1
32185: NEG
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 1
32193: PUSH
32194: LD_INT 1
32196: NEG
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 1
32204: NEG
32205: PUSH
32206: LD_INT 1
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32224: LD_ADDR_VAR 0 38
32228: PUSH
32229: LD_INT 0
32231: PUSH
32232: LD_INT 0
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 0
32241: PUSH
32242: LD_INT 1
32244: NEG
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 1
32252: PUSH
32253: LD_INT 0
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 1
32262: PUSH
32263: LD_INT 1
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 0
32272: PUSH
32273: LD_INT 1
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 1
32282: NEG
32283: PUSH
32284: LD_INT 0
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 1
32293: NEG
32294: PUSH
32295: LD_INT 1
32297: NEG
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 2
32305: PUSH
32306: LD_INT 1
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 2
32315: NEG
32316: PUSH
32317: LD_INT 1
32319: NEG
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32336: LD_ADDR_VAR 0 39
32340: PUSH
32341: LD_INT 0
32343: PUSH
32344: LD_INT 0
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 0
32353: PUSH
32354: LD_INT 1
32356: NEG
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 1
32364: PUSH
32365: LD_INT 0
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 1
32374: PUSH
32375: LD_INT 1
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: LD_INT 0
32384: PUSH
32385: LD_INT 1
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 1
32394: NEG
32395: PUSH
32396: LD_INT 0
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 1
32405: NEG
32406: PUSH
32407: LD_INT 1
32409: NEG
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 1
32417: NEG
32418: PUSH
32419: LD_INT 2
32421: NEG
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 1
32429: PUSH
32430: LD_INT 2
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32448: LD_ADDR_VAR 0 40
32452: PUSH
32453: LD_INT 0
32455: PUSH
32456: LD_INT 0
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 0
32465: PUSH
32466: LD_INT 1
32468: NEG
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 1
32476: PUSH
32477: LD_INT 0
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 1
32486: PUSH
32487: LD_INT 1
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 0
32496: PUSH
32497: LD_INT 1
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 1
32506: NEG
32507: PUSH
32508: LD_INT 0
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 1
32517: NEG
32518: PUSH
32519: LD_INT 1
32521: NEG
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 1
32529: PUSH
32530: LD_INT 1
32532: NEG
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 1
32540: NEG
32541: PUSH
32542: LD_INT 1
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32560: LD_ADDR_VAR 0 41
32564: PUSH
32565: LD_INT 0
32567: PUSH
32568: LD_INT 0
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 0
32577: PUSH
32578: LD_INT 1
32580: NEG
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 1
32588: PUSH
32589: LD_INT 0
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 1
32598: PUSH
32599: LD_INT 1
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 0
32608: PUSH
32609: LD_INT 1
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 1
32618: NEG
32619: PUSH
32620: LD_INT 0
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 1
32629: NEG
32630: PUSH
32631: LD_INT 1
32633: NEG
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 1
32641: NEG
32642: PUSH
32643: LD_INT 2
32645: NEG
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 1
32653: PUSH
32654: LD_INT 1
32656: NEG
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 2
32664: PUSH
32665: LD_INT 0
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 2
32674: PUSH
32675: LD_INT 1
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 2
32684: PUSH
32685: LD_INT 2
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 1
32694: PUSH
32695: LD_INT 2
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 1
32704: NEG
32705: PUSH
32706: LD_INT 1
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 2
32715: NEG
32716: PUSH
32717: LD_INT 0
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 2
32726: NEG
32727: PUSH
32728: LD_INT 1
32730: NEG
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 2
32738: NEG
32739: PUSH
32740: LD_INT 2
32742: NEG
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 2
32750: NEG
32751: PUSH
32752: LD_INT 3
32754: NEG
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 2
32762: PUSH
32763: LD_INT 1
32765: NEG
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 3
32773: PUSH
32774: LD_INT 0
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 3
32783: PUSH
32784: LD_INT 1
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 3
32793: PUSH
32794: LD_INT 2
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 3
32803: PUSH
32804: LD_INT 3
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 2
32813: PUSH
32814: LD_INT 3
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 2
32823: NEG
32824: PUSH
32825: LD_INT 1
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 3
32834: NEG
32835: PUSH
32836: LD_INT 0
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 3
32845: NEG
32846: PUSH
32847: LD_INT 1
32849: NEG
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 3
32857: NEG
32858: PUSH
32859: LD_INT 2
32861: NEG
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 3
32869: NEG
32870: PUSH
32871: LD_INT 3
32873: NEG
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32910: LD_ADDR_VAR 0 42
32914: PUSH
32915: LD_INT 0
32917: PUSH
32918: LD_INT 0
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 0
32927: PUSH
32928: LD_INT 1
32930: NEG
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 1
32938: PUSH
32939: LD_INT 0
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 1
32948: PUSH
32949: LD_INT 1
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 0
32958: PUSH
32959: LD_INT 1
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 1
32968: NEG
32969: PUSH
32970: LD_INT 0
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 1
32979: NEG
32980: PUSH
32981: LD_INT 1
32983: NEG
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 1
32991: NEG
32992: PUSH
32993: LD_INT 2
32995: NEG
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 0
33003: PUSH
33004: LD_INT 2
33006: NEG
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 1
33014: PUSH
33015: LD_INT 1
33017: NEG
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 2
33025: PUSH
33026: LD_INT 1
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 2
33035: PUSH
33036: LD_INT 2
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 1
33045: PUSH
33046: LD_INT 2
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 0
33055: PUSH
33056: LD_INT 2
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 1
33065: NEG
33066: PUSH
33067: LD_INT 1
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 2
33076: NEG
33077: PUSH
33078: LD_INT 1
33080: NEG
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 2
33088: NEG
33089: PUSH
33090: LD_INT 2
33092: NEG
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 2
33100: NEG
33101: PUSH
33102: LD_INT 3
33104: NEG
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 1
33112: NEG
33113: PUSH
33114: LD_INT 3
33116: NEG
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 0
33124: PUSH
33125: LD_INT 3
33127: NEG
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 1
33135: PUSH
33136: LD_INT 2
33138: NEG
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 3
33146: PUSH
33147: LD_INT 2
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 3
33156: PUSH
33157: LD_INT 3
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 2
33166: PUSH
33167: LD_INT 3
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 1
33176: PUSH
33177: LD_INT 3
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 0
33186: PUSH
33187: LD_INT 3
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 1
33196: NEG
33197: PUSH
33198: LD_INT 2
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 3
33207: NEG
33208: PUSH
33209: LD_INT 2
33211: NEG
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 3
33219: NEG
33220: PUSH
33221: LD_INT 3
33223: NEG
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33260: LD_ADDR_VAR 0 43
33264: PUSH
33265: LD_INT 0
33267: PUSH
33268: LD_INT 0
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 0
33277: PUSH
33278: LD_INT 1
33280: NEG
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 1
33288: PUSH
33289: LD_INT 0
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 1
33298: PUSH
33299: LD_INT 1
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 0
33308: PUSH
33309: LD_INT 1
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 1
33318: NEG
33319: PUSH
33320: LD_INT 0
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 1
33329: NEG
33330: PUSH
33331: LD_INT 1
33333: NEG
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 1
33341: NEG
33342: PUSH
33343: LD_INT 2
33345: NEG
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 0
33353: PUSH
33354: LD_INT 2
33356: NEG
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 1
33364: PUSH
33365: LD_INT 1
33367: NEG
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 2
33375: PUSH
33376: LD_INT 0
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 2
33385: PUSH
33386: LD_INT 1
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: PUSH
33393: LD_INT 1
33395: PUSH
33396: LD_INT 2
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 0
33405: PUSH
33406: LD_INT 2
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 1
33415: NEG
33416: PUSH
33417: LD_INT 1
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 2
33426: NEG
33427: PUSH
33428: LD_INT 0
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 2
33437: NEG
33438: PUSH
33439: LD_INT 1
33441: NEG
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 1
33449: NEG
33450: PUSH
33451: LD_INT 3
33453: NEG
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 0
33461: PUSH
33462: LD_INT 3
33464: NEG
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 1
33472: PUSH
33473: LD_INT 2
33475: NEG
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 2
33483: PUSH
33484: LD_INT 1
33486: NEG
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 3
33494: PUSH
33495: LD_INT 0
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 3
33504: PUSH
33505: LD_INT 1
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 1
33514: PUSH
33515: LD_INT 3
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: LD_INT 3
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 1
33534: NEG
33535: PUSH
33536: LD_INT 2
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 2
33545: NEG
33546: PUSH
33547: LD_INT 1
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 3
33556: NEG
33557: PUSH
33558: LD_INT 0
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 3
33567: NEG
33568: PUSH
33569: LD_INT 1
33571: NEG
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33608: LD_ADDR_VAR 0 44
33612: PUSH
33613: LD_INT 0
33615: PUSH
33616: LD_INT 0
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 0
33625: PUSH
33626: LD_INT 1
33628: NEG
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 1
33636: PUSH
33637: LD_INT 0
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 1
33646: PUSH
33647: LD_INT 1
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 0
33656: PUSH
33657: LD_INT 1
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: LD_INT 1
33666: NEG
33667: PUSH
33668: LD_INT 0
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 1
33677: NEG
33678: PUSH
33679: LD_INT 1
33681: NEG
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 1
33689: NEG
33690: PUSH
33691: LD_INT 2
33693: NEG
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 1
33701: PUSH
33702: LD_INT 1
33704: NEG
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 2
33712: PUSH
33713: LD_INT 0
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 2
33722: PUSH
33723: LD_INT 1
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 2
33732: PUSH
33733: LD_INT 2
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 1
33742: PUSH
33743: LD_INT 2
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 1
33752: NEG
33753: PUSH
33754: LD_INT 1
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 2
33763: NEG
33764: PUSH
33765: LD_INT 0
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 2
33774: NEG
33775: PUSH
33776: LD_INT 1
33778: NEG
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 2
33786: NEG
33787: PUSH
33788: LD_INT 2
33790: NEG
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 2
33798: NEG
33799: PUSH
33800: LD_INT 3
33802: NEG
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 2
33810: PUSH
33811: LD_INT 1
33813: NEG
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 3
33821: PUSH
33822: LD_INT 0
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 3
33831: PUSH
33832: LD_INT 1
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 3
33841: PUSH
33842: LD_INT 2
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 3
33851: PUSH
33852: LD_INT 3
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 2
33861: PUSH
33862: LD_INT 3
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 2
33871: NEG
33872: PUSH
33873: LD_INT 1
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 3
33882: NEG
33883: PUSH
33884: LD_INT 0
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 3
33893: NEG
33894: PUSH
33895: LD_INT 1
33897: NEG
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 3
33905: NEG
33906: PUSH
33907: LD_INT 2
33909: NEG
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 3
33917: NEG
33918: PUSH
33919: LD_INT 3
33921: NEG
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33958: LD_ADDR_VAR 0 45
33962: PUSH
33963: LD_INT 0
33965: PUSH
33966: LD_INT 0
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 0
33975: PUSH
33976: LD_INT 1
33978: NEG
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 1
33986: PUSH
33987: LD_INT 0
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 1
33996: PUSH
33997: LD_INT 1
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 0
34006: PUSH
34007: LD_INT 1
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 1
34016: NEG
34017: PUSH
34018: LD_INT 0
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 1
34027: NEG
34028: PUSH
34029: LD_INT 1
34031: NEG
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 1
34039: NEG
34040: PUSH
34041: LD_INT 2
34043: NEG
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 0
34051: PUSH
34052: LD_INT 2
34054: NEG
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 1
34062: PUSH
34063: LD_INT 1
34065: NEG
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 2
34073: PUSH
34074: LD_INT 1
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 2
34083: PUSH
34084: LD_INT 2
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 1
34093: PUSH
34094: LD_INT 2
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 0
34103: PUSH
34104: LD_INT 2
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 1
34113: NEG
34114: PUSH
34115: LD_INT 1
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 2
34124: NEG
34125: PUSH
34126: LD_INT 1
34128: NEG
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 2
34136: NEG
34137: PUSH
34138: LD_INT 2
34140: NEG
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 2
34148: NEG
34149: PUSH
34150: LD_INT 3
34152: NEG
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 1
34160: NEG
34161: PUSH
34162: LD_INT 3
34164: NEG
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 0
34172: PUSH
34173: LD_INT 3
34175: NEG
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 1
34183: PUSH
34184: LD_INT 2
34186: NEG
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 3
34194: PUSH
34195: LD_INT 2
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 3
34204: PUSH
34205: LD_INT 3
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 2
34214: PUSH
34215: LD_INT 3
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 1
34224: PUSH
34225: LD_INT 3
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 0
34234: PUSH
34235: LD_INT 3
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 1
34244: NEG
34245: PUSH
34246: LD_INT 2
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 3
34255: NEG
34256: PUSH
34257: LD_INT 2
34259: NEG
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 3
34267: NEG
34268: PUSH
34269: LD_INT 3
34271: NEG
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34308: LD_ADDR_VAR 0 46
34312: PUSH
34313: LD_INT 0
34315: PUSH
34316: LD_INT 0
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 0
34325: PUSH
34326: LD_INT 1
34328: NEG
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 1
34336: PUSH
34337: LD_INT 0
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 1
34346: PUSH
34347: LD_INT 1
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 0
34356: PUSH
34357: LD_INT 1
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 1
34366: NEG
34367: PUSH
34368: LD_INT 0
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 1
34377: NEG
34378: PUSH
34379: LD_INT 1
34381: NEG
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 1
34389: NEG
34390: PUSH
34391: LD_INT 2
34393: NEG
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 0
34401: PUSH
34402: LD_INT 2
34404: NEG
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 1
34412: PUSH
34413: LD_INT 1
34415: NEG
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: LD_INT 2
34423: PUSH
34424: LD_INT 0
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 2
34433: PUSH
34434: LD_INT 1
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: LD_INT 1
34443: PUSH
34444: LD_INT 2
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 0
34453: PUSH
34454: LD_INT 2
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 1
34463: NEG
34464: PUSH
34465: LD_INT 1
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 2
34474: NEG
34475: PUSH
34476: LD_INT 0
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 2
34485: NEG
34486: PUSH
34487: LD_INT 1
34489: NEG
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 1
34497: NEG
34498: PUSH
34499: LD_INT 3
34501: NEG
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 0
34509: PUSH
34510: LD_INT 3
34512: NEG
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 1
34520: PUSH
34521: LD_INT 2
34523: NEG
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 2
34531: PUSH
34532: LD_INT 1
34534: NEG
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 3
34542: PUSH
34543: LD_INT 0
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 3
34552: PUSH
34553: LD_INT 1
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 1
34562: PUSH
34563: LD_INT 3
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 0
34572: PUSH
34573: LD_INT 3
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 1
34582: NEG
34583: PUSH
34584: LD_INT 2
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 2
34593: NEG
34594: PUSH
34595: LD_INT 1
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 3
34604: NEG
34605: PUSH
34606: LD_INT 0
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 3
34615: NEG
34616: PUSH
34617: LD_INT 1
34619: NEG
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34656: LD_ADDR_VAR 0 47
34660: PUSH
34661: LD_INT 0
34663: PUSH
34664: LD_INT 0
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 0
34673: PUSH
34674: LD_INT 1
34676: NEG
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 1
34684: PUSH
34685: LD_INT 0
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 1
34694: PUSH
34695: LD_INT 1
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 0
34704: PUSH
34705: LD_INT 1
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 1
34714: NEG
34715: PUSH
34716: LD_INT 0
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 1
34725: NEG
34726: PUSH
34727: LD_INT 1
34729: NEG
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 1
34737: NEG
34738: PUSH
34739: LD_INT 2
34741: NEG
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 0
34749: PUSH
34750: LD_INT 2
34752: NEG
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 1
34760: PUSH
34761: LD_INT 1
34763: NEG
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 2
34771: NEG
34772: PUSH
34773: LD_INT 1
34775: NEG
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 2
34783: NEG
34784: PUSH
34785: LD_INT 2
34787: NEG
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34807: LD_ADDR_VAR 0 48
34811: PUSH
34812: LD_INT 0
34814: PUSH
34815: LD_INT 0
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 0
34824: PUSH
34825: LD_INT 1
34827: NEG
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 1
34835: PUSH
34836: LD_INT 0
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 1
34845: PUSH
34846: LD_INT 1
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 0
34855: PUSH
34856: LD_INT 1
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 1
34865: NEG
34866: PUSH
34867: LD_INT 0
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 1
34876: NEG
34877: PUSH
34878: LD_INT 1
34880: NEG
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 1
34888: NEG
34889: PUSH
34890: LD_INT 2
34892: NEG
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 0
34900: PUSH
34901: LD_INT 2
34903: NEG
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 1
34911: PUSH
34912: LD_INT 1
34914: NEG
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 2
34922: PUSH
34923: LD_INT 0
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 2
34932: PUSH
34933: LD_INT 1
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34954: LD_ADDR_VAR 0 49
34958: PUSH
34959: LD_INT 0
34961: PUSH
34962: LD_INT 0
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 0
34971: PUSH
34972: LD_INT 1
34974: NEG
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 1
34982: PUSH
34983: LD_INT 0
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 1
34992: PUSH
34993: LD_INT 1
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 0
35002: PUSH
35003: LD_INT 1
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 1
35012: NEG
35013: PUSH
35014: LD_INT 0
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 1
35023: NEG
35024: PUSH
35025: LD_INT 1
35027: NEG
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 1
35035: PUSH
35036: LD_INT 1
35038: NEG
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 2
35046: PUSH
35047: LD_INT 0
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 2
35056: PUSH
35057: LD_INT 1
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 2
35066: PUSH
35067: LD_INT 2
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 1
35076: PUSH
35077: LD_INT 2
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35098: LD_ADDR_VAR 0 50
35102: PUSH
35103: LD_INT 0
35105: PUSH
35106: LD_INT 0
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 0
35115: PUSH
35116: LD_INT 1
35118: NEG
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 1
35126: PUSH
35127: LD_INT 0
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 1
35136: PUSH
35137: LD_INT 1
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 0
35146: PUSH
35147: LD_INT 1
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 1
35156: NEG
35157: PUSH
35158: LD_INT 0
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 1
35167: NEG
35168: PUSH
35169: LD_INT 1
35171: NEG
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 2
35179: PUSH
35180: LD_INT 1
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 2
35189: PUSH
35190: LD_INT 2
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_INT 1
35199: PUSH
35200: LD_INT 2
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 0
35209: PUSH
35210: LD_INT 2
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 1
35219: NEG
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35242: LD_ADDR_VAR 0 51
35246: PUSH
35247: LD_INT 0
35249: PUSH
35250: LD_INT 0
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 0
35259: PUSH
35260: LD_INT 1
35262: NEG
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 1
35270: PUSH
35271: LD_INT 0
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 1
35280: PUSH
35281: LD_INT 1
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 0
35290: PUSH
35291: LD_INT 1
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 1
35300: NEG
35301: PUSH
35302: LD_INT 0
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 1
35311: NEG
35312: PUSH
35313: LD_INT 1
35315: NEG
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 1
35323: PUSH
35324: LD_INT 2
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 0
35333: PUSH
35334: LD_INT 2
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 1
35343: NEG
35344: PUSH
35345: LD_INT 1
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 2
35354: NEG
35355: PUSH
35356: LD_INT 0
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 2
35365: NEG
35366: PUSH
35367: LD_INT 1
35369: NEG
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35389: LD_ADDR_VAR 0 52
35393: PUSH
35394: LD_INT 0
35396: PUSH
35397: LD_INT 0
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 0
35406: PUSH
35407: LD_INT 1
35409: NEG
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 1
35417: PUSH
35418: LD_INT 0
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 1
35427: PUSH
35428: LD_INT 1
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 0
35437: PUSH
35438: LD_INT 1
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 1
35447: NEG
35448: PUSH
35449: LD_INT 0
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 1
35458: NEG
35459: PUSH
35460: LD_INT 1
35462: NEG
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 1
35470: NEG
35471: PUSH
35472: LD_INT 2
35474: NEG
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 1
35482: NEG
35483: PUSH
35484: LD_INT 1
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 2
35493: NEG
35494: PUSH
35495: LD_INT 0
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 2
35504: NEG
35505: PUSH
35506: LD_INT 1
35508: NEG
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: LD_INT 2
35516: NEG
35517: PUSH
35518: LD_INT 2
35520: NEG
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35540: LD_ADDR_VAR 0 53
35544: PUSH
35545: LD_INT 0
35547: PUSH
35548: LD_INT 0
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 0
35557: PUSH
35558: LD_INT 1
35560: NEG
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 1
35568: PUSH
35569: LD_INT 0
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 1
35578: PUSH
35579: LD_INT 1
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 0
35588: PUSH
35589: LD_INT 1
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 1
35598: NEG
35599: PUSH
35600: LD_INT 0
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 1
35609: NEG
35610: PUSH
35611: LD_INT 1
35613: NEG
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 1
35621: NEG
35622: PUSH
35623: LD_INT 2
35625: NEG
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 0
35633: PUSH
35634: LD_INT 2
35636: NEG
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 1
35644: PUSH
35645: LD_INT 1
35647: NEG
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 2
35655: PUSH
35656: LD_INT 0
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 2
35665: PUSH
35666: LD_INT 1
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 2
35675: PUSH
35676: LD_INT 2
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 1
35685: PUSH
35686: LD_INT 2
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 0
35695: PUSH
35696: LD_INT 2
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 1
35705: NEG
35706: PUSH
35707: LD_INT 1
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 2
35716: NEG
35717: PUSH
35718: LD_INT 0
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 2
35727: NEG
35728: PUSH
35729: LD_INT 1
35731: NEG
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 2
35739: NEG
35740: PUSH
35741: LD_INT 2
35743: NEG
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: LIST
35762: LIST
35763: LIST
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35770: LD_ADDR_VAR 0 54
35774: PUSH
35775: LD_INT 0
35777: PUSH
35778: LD_INT 0
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 0
35787: PUSH
35788: LD_INT 1
35790: NEG
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 1
35798: PUSH
35799: LD_INT 0
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 1
35808: PUSH
35809: LD_INT 1
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 0
35818: PUSH
35819: LD_INT 1
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 1
35828: NEG
35829: PUSH
35830: LD_INT 0
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 1
35839: NEG
35840: PUSH
35841: LD_INT 1
35843: NEG
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 1
35851: NEG
35852: PUSH
35853: LD_INT 2
35855: NEG
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 0
35863: PUSH
35864: LD_INT 2
35866: NEG
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 1
35874: PUSH
35875: LD_INT 1
35877: NEG
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 2
35885: PUSH
35886: LD_INT 0
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 2
35895: PUSH
35896: LD_INT 1
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 2
35905: PUSH
35906: LD_INT 2
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 1
35915: PUSH
35916: LD_INT 2
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 0
35925: PUSH
35926: LD_INT 2
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 1
35935: NEG
35936: PUSH
35937: LD_INT 1
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 2
35946: NEG
35947: PUSH
35948: LD_INT 0
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 2
35957: NEG
35958: PUSH
35959: LD_INT 1
35961: NEG
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: LD_INT 2
35969: NEG
35970: PUSH
35971: LD_INT 2
35973: NEG
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36000: LD_ADDR_VAR 0 55
36004: PUSH
36005: LD_INT 0
36007: PUSH
36008: LD_INT 0
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 0
36017: PUSH
36018: LD_INT 1
36020: NEG
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 1
36028: PUSH
36029: LD_INT 0
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 1
36038: PUSH
36039: LD_INT 1
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_INT 0
36048: PUSH
36049: LD_INT 1
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 1
36058: NEG
36059: PUSH
36060: LD_INT 0
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 1
36069: NEG
36070: PUSH
36071: LD_INT 1
36073: NEG
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 1
36081: NEG
36082: PUSH
36083: LD_INT 2
36085: NEG
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 0
36093: PUSH
36094: LD_INT 2
36096: NEG
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 1
36104: PUSH
36105: LD_INT 1
36107: NEG
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 2
36115: PUSH
36116: LD_INT 0
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 2
36125: PUSH
36126: LD_INT 1
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 2
36135: PUSH
36136: LD_INT 2
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 1
36145: PUSH
36146: LD_INT 2
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 0
36155: PUSH
36156: LD_INT 2
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 1
36165: NEG
36166: PUSH
36167: LD_INT 1
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 2
36176: NEG
36177: PUSH
36178: LD_INT 0
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 2
36187: NEG
36188: PUSH
36189: LD_INT 1
36191: NEG
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 2
36199: NEG
36200: PUSH
36201: LD_INT 2
36203: NEG
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36230: LD_ADDR_VAR 0 56
36234: PUSH
36235: LD_INT 0
36237: PUSH
36238: LD_INT 0
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 0
36247: PUSH
36248: LD_INT 1
36250: NEG
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 1
36258: PUSH
36259: LD_INT 0
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 1
36268: PUSH
36269: LD_INT 1
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 0
36278: PUSH
36279: LD_INT 1
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 1
36288: NEG
36289: PUSH
36290: LD_INT 0
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 1
36299: NEG
36300: PUSH
36301: LD_INT 1
36303: NEG
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 1
36311: NEG
36312: PUSH
36313: LD_INT 2
36315: NEG
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 0
36323: PUSH
36324: LD_INT 2
36326: NEG
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 1
36334: PUSH
36335: LD_INT 1
36337: NEG
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 2
36345: PUSH
36346: LD_INT 0
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 2
36355: PUSH
36356: LD_INT 1
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 2
36365: PUSH
36366: LD_INT 2
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 1
36375: PUSH
36376: LD_INT 2
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 0
36385: PUSH
36386: LD_INT 2
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 1
36395: NEG
36396: PUSH
36397: LD_INT 1
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 2
36406: NEG
36407: PUSH
36408: LD_INT 0
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PUSH
36415: LD_INT 2
36417: NEG
36418: PUSH
36419: LD_INT 1
36421: NEG
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 2
36429: NEG
36430: PUSH
36431: LD_INT 2
36433: NEG
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36460: LD_ADDR_VAR 0 57
36464: PUSH
36465: LD_INT 0
36467: PUSH
36468: LD_INT 0
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 0
36477: PUSH
36478: LD_INT 1
36480: NEG
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 1
36488: PUSH
36489: LD_INT 0
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 1
36498: PUSH
36499: LD_INT 1
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 0
36508: PUSH
36509: LD_INT 1
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 1
36518: NEG
36519: PUSH
36520: LD_INT 0
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 1
36529: NEG
36530: PUSH
36531: LD_INT 1
36533: NEG
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 1
36541: NEG
36542: PUSH
36543: LD_INT 2
36545: NEG
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 0
36553: PUSH
36554: LD_INT 2
36556: NEG
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 1
36564: PUSH
36565: LD_INT 1
36567: NEG
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 2
36575: PUSH
36576: LD_INT 0
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 2
36585: PUSH
36586: LD_INT 1
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 2
36595: PUSH
36596: LD_INT 2
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 1
36605: PUSH
36606: LD_INT 2
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 0
36615: PUSH
36616: LD_INT 2
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 1
36625: NEG
36626: PUSH
36627: LD_INT 1
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 2
36636: NEG
36637: PUSH
36638: LD_INT 0
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 2
36647: NEG
36648: PUSH
36649: LD_INT 1
36651: NEG
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 2
36659: NEG
36660: PUSH
36661: LD_INT 2
36663: NEG
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36690: LD_ADDR_VAR 0 58
36694: PUSH
36695: LD_INT 0
36697: PUSH
36698: LD_INT 0
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 0
36707: PUSH
36708: LD_INT 1
36710: NEG
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 1
36718: PUSH
36719: LD_INT 0
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 1
36728: PUSH
36729: LD_INT 1
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 0
36738: PUSH
36739: LD_INT 1
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 1
36748: NEG
36749: PUSH
36750: LD_INT 0
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 1
36759: NEG
36760: PUSH
36761: LD_INT 1
36763: NEG
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 1
36771: NEG
36772: PUSH
36773: LD_INT 2
36775: NEG
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 0
36783: PUSH
36784: LD_INT 2
36786: NEG
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 1
36794: PUSH
36795: LD_INT 1
36797: NEG
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 2
36805: PUSH
36806: LD_INT 0
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 2
36815: PUSH
36816: LD_INT 1
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 2
36825: PUSH
36826: LD_INT 2
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 1
36835: PUSH
36836: LD_INT 2
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 0
36845: PUSH
36846: LD_INT 2
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 1
36855: NEG
36856: PUSH
36857: LD_INT 1
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 2
36866: NEG
36867: PUSH
36868: LD_INT 0
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 2
36877: NEG
36878: PUSH
36879: LD_INT 1
36881: NEG
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: LD_INT 2
36889: NEG
36890: PUSH
36891: LD_INT 2
36893: NEG
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36920: LD_ADDR_VAR 0 59
36924: PUSH
36925: LD_INT 0
36927: PUSH
36928: LD_INT 0
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 0
36937: PUSH
36938: LD_INT 1
36940: NEG
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 1
36948: PUSH
36949: LD_INT 0
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 1
36958: PUSH
36959: LD_INT 1
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 0
36968: PUSH
36969: LD_INT 1
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 1
36978: NEG
36979: PUSH
36980: LD_INT 0
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 1
36989: NEG
36990: PUSH
36991: LD_INT 1
36993: NEG
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37008: LD_ADDR_VAR 0 60
37012: PUSH
37013: LD_INT 0
37015: PUSH
37016: LD_INT 0
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 0
37025: PUSH
37026: LD_INT 1
37028: NEG
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 1
37036: PUSH
37037: LD_INT 0
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 1
37046: PUSH
37047: LD_INT 1
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 0
37056: PUSH
37057: LD_INT 1
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 1
37066: NEG
37067: PUSH
37068: LD_INT 0
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 1
37077: NEG
37078: PUSH
37079: LD_INT 1
37081: NEG
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37096: LD_ADDR_VAR 0 61
37100: PUSH
37101: LD_INT 0
37103: PUSH
37104: LD_INT 0
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 0
37113: PUSH
37114: LD_INT 1
37116: NEG
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 1
37124: PUSH
37125: LD_INT 0
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 1
37134: PUSH
37135: LD_INT 1
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 0
37144: PUSH
37145: LD_INT 1
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 1
37154: NEG
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 1
37165: NEG
37166: PUSH
37167: LD_INT 1
37169: NEG
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37184: LD_ADDR_VAR 0 62
37188: PUSH
37189: LD_INT 0
37191: PUSH
37192: LD_INT 0
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 0
37201: PUSH
37202: LD_INT 1
37204: NEG
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 1
37212: PUSH
37213: LD_INT 0
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 1
37222: PUSH
37223: LD_INT 1
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 0
37232: PUSH
37233: LD_INT 1
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 1
37242: NEG
37243: PUSH
37244: LD_INT 0
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 1
37253: NEG
37254: PUSH
37255: LD_INT 1
37257: NEG
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37272: LD_ADDR_VAR 0 63
37276: PUSH
37277: LD_INT 0
37279: PUSH
37280: LD_INT 0
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 0
37289: PUSH
37290: LD_INT 1
37292: NEG
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 1
37300: PUSH
37301: LD_INT 0
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 1
37310: PUSH
37311: LD_INT 1
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 0
37320: PUSH
37321: LD_INT 1
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 1
37330: NEG
37331: PUSH
37332: LD_INT 0
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 1
37341: NEG
37342: PUSH
37343: LD_INT 1
37345: NEG
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37360: LD_ADDR_VAR 0 64
37364: PUSH
37365: LD_INT 0
37367: PUSH
37368: LD_INT 0
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 0
37377: PUSH
37378: LD_INT 1
37380: NEG
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 1
37388: PUSH
37389: LD_INT 0
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 1
37398: PUSH
37399: LD_INT 1
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 0
37408: PUSH
37409: LD_INT 1
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 1
37418: NEG
37419: PUSH
37420: LD_INT 0
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 1
37429: NEG
37430: PUSH
37431: LD_INT 1
37433: NEG
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: ST_TO_ADDR
// end ; 1 :
37448: GO 43345
37450: LD_INT 1
37452: DOUBLE
37453: EQUAL
37454: IFTRUE 37458
37456: GO 40081
37458: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37459: LD_ADDR_VAR 0 11
37463: PUSH
37464: LD_INT 1
37466: NEG
37467: PUSH
37468: LD_INT 3
37470: NEG
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 0
37478: PUSH
37479: LD_INT 3
37481: NEG
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 1
37489: PUSH
37490: LD_INT 2
37492: NEG
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: LIST
37502: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37503: LD_ADDR_VAR 0 12
37507: PUSH
37508: LD_INT 2
37510: PUSH
37511: LD_INT 1
37513: NEG
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 3
37521: PUSH
37522: LD_INT 0
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 3
37531: PUSH
37532: LD_INT 1
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: LIST
37543: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37544: LD_ADDR_VAR 0 13
37548: PUSH
37549: LD_INT 3
37551: PUSH
37552: LD_INT 2
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 3
37561: PUSH
37562: LD_INT 3
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 2
37571: PUSH
37572: LD_INT 3
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: LIST
37583: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37584: LD_ADDR_VAR 0 14
37588: PUSH
37589: LD_INT 1
37591: PUSH
37592: LD_INT 3
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 0
37601: PUSH
37602: LD_INT 3
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 1
37611: NEG
37612: PUSH
37613: LD_INT 2
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: LIST
37624: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37625: LD_ADDR_VAR 0 15
37629: PUSH
37630: LD_INT 2
37632: NEG
37633: PUSH
37634: LD_INT 1
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 3
37643: NEG
37644: PUSH
37645: LD_INT 0
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 3
37654: NEG
37655: PUSH
37656: LD_INT 1
37658: NEG
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: LIST
37668: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37669: LD_ADDR_VAR 0 16
37673: PUSH
37674: LD_INT 2
37676: NEG
37677: PUSH
37678: LD_INT 3
37680: NEG
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 3
37688: NEG
37689: PUSH
37690: LD_INT 2
37692: NEG
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 3
37700: NEG
37701: PUSH
37702: LD_INT 3
37704: NEG
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: LIST
37714: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37715: LD_ADDR_VAR 0 17
37719: PUSH
37720: LD_INT 1
37722: NEG
37723: PUSH
37724: LD_INT 3
37726: NEG
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 0
37734: PUSH
37735: LD_INT 3
37737: NEG
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 1
37745: PUSH
37746: LD_INT 2
37748: NEG
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: LIST
37758: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37759: LD_ADDR_VAR 0 18
37763: PUSH
37764: LD_INT 2
37766: PUSH
37767: LD_INT 1
37769: NEG
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 3
37777: PUSH
37778: LD_INT 0
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 3
37787: PUSH
37788: LD_INT 1
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: LIST
37799: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37800: LD_ADDR_VAR 0 19
37804: PUSH
37805: LD_INT 3
37807: PUSH
37808: LD_INT 2
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 3
37817: PUSH
37818: LD_INT 3
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 2
37827: PUSH
37828: LD_INT 3
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: LIST
37839: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37840: LD_ADDR_VAR 0 20
37844: PUSH
37845: LD_INT 1
37847: PUSH
37848: LD_INT 3
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 0
37857: PUSH
37858: LD_INT 3
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 1
37867: NEG
37868: PUSH
37869: LD_INT 2
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: LIST
37880: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37881: LD_ADDR_VAR 0 21
37885: PUSH
37886: LD_INT 2
37888: NEG
37889: PUSH
37890: LD_INT 1
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 3
37899: NEG
37900: PUSH
37901: LD_INT 0
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 3
37910: NEG
37911: PUSH
37912: LD_INT 1
37914: NEG
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: LIST
37924: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37925: LD_ADDR_VAR 0 22
37929: PUSH
37930: LD_INT 2
37932: NEG
37933: PUSH
37934: LD_INT 3
37936: NEG
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 3
37944: NEG
37945: PUSH
37946: LD_INT 2
37948: NEG
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 3
37956: NEG
37957: PUSH
37958: LD_INT 3
37960: NEG
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: LIST
37970: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
37971: LD_ADDR_VAR 0 23
37975: PUSH
37976: LD_INT 0
37978: PUSH
37979: LD_INT 3
37981: NEG
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 1
37989: NEG
37990: PUSH
37991: LD_INT 4
37993: NEG
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 1
38001: PUSH
38002: LD_INT 3
38004: NEG
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: LIST
38014: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
38015: LD_ADDR_VAR 0 24
38019: PUSH
38020: LD_INT 3
38022: PUSH
38023: LD_INT 0
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 3
38032: PUSH
38033: LD_INT 1
38035: NEG
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 4
38043: PUSH
38044: LD_INT 1
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: LIST
38055: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
38056: LD_ADDR_VAR 0 25
38060: PUSH
38061: LD_INT 3
38063: PUSH
38064: LD_INT 3
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 4
38073: PUSH
38074: LD_INT 3
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 3
38083: PUSH
38084: LD_INT 4
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: LIST
38095: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
38096: LD_ADDR_VAR 0 26
38100: PUSH
38101: LD_INT 0
38103: PUSH
38104: LD_INT 3
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 1
38113: PUSH
38114: LD_INT 4
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 1
38123: NEG
38124: PUSH
38125: LD_INT 3
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: LIST
38136: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
38137: LD_ADDR_VAR 0 27
38141: PUSH
38142: LD_INT 3
38144: NEG
38145: PUSH
38146: LD_INT 0
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 3
38155: NEG
38156: PUSH
38157: LD_INT 1
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 4
38166: NEG
38167: PUSH
38168: LD_INT 1
38170: NEG
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: LIST
38180: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
38181: LD_ADDR_VAR 0 28
38185: PUSH
38186: LD_INT 3
38188: NEG
38189: PUSH
38190: LD_INT 3
38192: NEG
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 3
38200: NEG
38201: PUSH
38202: LD_INT 4
38204: NEG
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PUSH
38210: LD_INT 4
38212: NEG
38213: PUSH
38214: LD_INT 3
38216: NEG
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: LIST
38226: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
38227: LD_ADDR_VAR 0 29
38231: PUSH
38232: LD_INT 1
38234: NEG
38235: PUSH
38236: LD_INT 3
38238: NEG
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 0
38246: PUSH
38247: LD_INT 3
38249: NEG
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 1
38257: PUSH
38258: LD_INT 2
38260: NEG
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 1
38268: NEG
38269: PUSH
38270: LD_INT 4
38272: NEG
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 0
38280: PUSH
38281: LD_INT 4
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 1
38291: PUSH
38292: LD_INT 3
38294: NEG
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 1
38302: NEG
38303: PUSH
38304: LD_INT 5
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 0
38314: PUSH
38315: LD_INT 5
38317: NEG
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 1
38325: PUSH
38326: LD_INT 4
38328: NEG
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 1
38336: NEG
38337: PUSH
38338: LD_INT 6
38340: NEG
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 0
38348: PUSH
38349: LD_INT 6
38351: NEG
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 1
38359: PUSH
38360: LD_INT 5
38362: NEG
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
38382: LD_ADDR_VAR 0 30
38386: PUSH
38387: LD_INT 2
38389: PUSH
38390: LD_INT 1
38392: NEG
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 3
38400: PUSH
38401: LD_INT 0
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 3
38410: PUSH
38411: LD_INT 1
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 3
38420: PUSH
38421: LD_INT 1
38423: NEG
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 4
38431: PUSH
38432: LD_INT 0
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 4
38441: PUSH
38442: LD_INT 1
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 4
38451: PUSH
38452: LD_INT 1
38454: NEG
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 5
38462: PUSH
38463: LD_INT 0
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 5
38472: PUSH
38473: LD_INT 1
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 5
38482: PUSH
38483: LD_INT 1
38485: NEG
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 6
38493: PUSH
38494: LD_INT 0
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 6
38503: PUSH
38504: LD_INT 1
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
38525: LD_ADDR_VAR 0 31
38529: PUSH
38530: LD_INT 3
38532: PUSH
38533: LD_INT 2
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 3
38542: PUSH
38543: LD_INT 3
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 2
38552: PUSH
38553: LD_INT 3
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 4
38562: PUSH
38563: LD_INT 3
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 4
38572: PUSH
38573: LD_INT 4
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 3
38582: PUSH
38583: LD_INT 4
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 5
38592: PUSH
38593: LD_INT 4
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 5
38602: PUSH
38603: LD_INT 5
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 4
38612: PUSH
38613: LD_INT 5
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 6
38622: PUSH
38623: LD_INT 5
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 6
38632: PUSH
38633: LD_INT 6
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 5
38642: PUSH
38643: LD_INT 6
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38664: LD_ADDR_VAR 0 32
38668: PUSH
38669: LD_INT 1
38671: PUSH
38672: LD_INT 3
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 0
38681: PUSH
38682: LD_INT 3
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 1
38691: NEG
38692: PUSH
38693: LD_INT 2
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 1
38702: PUSH
38703: LD_INT 4
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 0
38712: PUSH
38713: LD_INT 4
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 1
38722: NEG
38723: PUSH
38724: LD_INT 3
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 1
38733: PUSH
38734: LD_INT 5
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 0
38743: PUSH
38744: LD_INT 5
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 1
38753: NEG
38754: PUSH
38755: LD_INT 4
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 1
38764: PUSH
38765: LD_INT 6
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 0
38774: PUSH
38775: LD_INT 6
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 1
38784: NEG
38785: PUSH
38786: LD_INT 5
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
38807: LD_ADDR_VAR 0 33
38811: PUSH
38812: LD_INT 2
38814: NEG
38815: PUSH
38816: LD_INT 1
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 3
38825: NEG
38826: PUSH
38827: LD_INT 0
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 3
38836: NEG
38837: PUSH
38838: LD_INT 1
38840: NEG
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 3
38848: NEG
38849: PUSH
38850: LD_INT 1
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 4
38859: NEG
38860: PUSH
38861: LD_INT 0
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 4
38870: NEG
38871: PUSH
38872: LD_INT 1
38874: NEG
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 4
38882: NEG
38883: PUSH
38884: LD_INT 1
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 5
38893: NEG
38894: PUSH
38895: LD_INT 0
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 5
38904: NEG
38905: PUSH
38906: LD_INT 1
38908: NEG
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 5
38916: NEG
38917: PUSH
38918: LD_INT 1
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 6
38927: NEG
38928: PUSH
38929: LD_INT 0
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 6
38938: NEG
38939: PUSH
38940: LD_INT 1
38942: NEG
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
38962: LD_ADDR_VAR 0 34
38966: PUSH
38967: LD_INT 2
38969: NEG
38970: PUSH
38971: LD_INT 3
38973: NEG
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 3
38981: NEG
38982: PUSH
38983: LD_INT 2
38985: NEG
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 3
38993: NEG
38994: PUSH
38995: LD_INT 3
38997: NEG
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 3
39005: NEG
39006: PUSH
39007: LD_INT 4
39009: NEG
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 4
39017: NEG
39018: PUSH
39019: LD_INT 3
39021: NEG
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 4
39029: NEG
39030: PUSH
39031: LD_INT 4
39033: NEG
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 4
39041: NEG
39042: PUSH
39043: LD_INT 5
39045: NEG
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 5
39053: NEG
39054: PUSH
39055: LD_INT 4
39057: NEG
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 5
39065: NEG
39066: PUSH
39067: LD_INT 5
39069: NEG
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 5
39077: NEG
39078: PUSH
39079: LD_INT 6
39081: NEG
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 6
39089: NEG
39090: PUSH
39091: LD_INT 5
39093: NEG
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 6
39101: NEG
39102: PUSH
39103: LD_INT 6
39105: NEG
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
39125: LD_ADDR_VAR 0 41
39129: PUSH
39130: LD_INT 0
39132: PUSH
39133: LD_INT 2
39135: NEG
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 1
39143: NEG
39144: PUSH
39145: LD_INT 3
39147: NEG
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 1
39155: PUSH
39156: LD_INT 2
39158: NEG
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: LIST
39168: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
39169: LD_ADDR_VAR 0 42
39173: PUSH
39174: LD_INT 2
39176: PUSH
39177: LD_INT 0
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 2
39186: PUSH
39187: LD_INT 1
39189: NEG
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 3
39197: PUSH
39198: LD_INT 1
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: LIST
39209: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
39210: LD_ADDR_VAR 0 43
39214: PUSH
39215: LD_INT 2
39217: PUSH
39218: LD_INT 2
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 3
39227: PUSH
39228: LD_INT 2
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 2
39237: PUSH
39238: LD_INT 3
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: LIST
39249: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
39250: LD_ADDR_VAR 0 44
39254: PUSH
39255: LD_INT 0
39257: PUSH
39258: LD_INT 2
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: LD_INT 3
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: LD_INT 1
39277: NEG
39278: PUSH
39279: LD_INT 2
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: LIST
39290: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39291: LD_ADDR_VAR 0 45
39295: PUSH
39296: LD_INT 2
39298: NEG
39299: PUSH
39300: LD_INT 0
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 2
39309: NEG
39310: PUSH
39311: LD_INT 1
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 3
39320: NEG
39321: PUSH
39322: LD_INT 1
39324: NEG
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: LIST
39334: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
39335: LD_ADDR_VAR 0 46
39339: PUSH
39340: LD_INT 2
39342: NEG
39343: PUSH
39344: LD_INT 2
39346: NEG
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 2
39354: NEG
39355: PUSH
39356: LD_INT 3
39358: NEG
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 3
39366: NEG
39367: PUSH
39368: LD_INT 2
39370: NEG
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: LIST
39380: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
39381: LD_ADDR_VAR 0 47
39385: PUSH
39386: LD_INT 2
39388: NEG
39389: PUSH
39390: LD_INT 3
39392: NEG
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 1
39400: NEG
39401: PUSH
39402: LD_INT 3
39404: NEG
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39414: LD_ADDR_VAR 0 48
39418: PUSH
39419: LD_INT 1
39421: PUSH
39422: LD_INT 2
39424: NEG
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 2
39432: PUSH
39433: LD_INT 1
39435: NEG
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
39445: LD_ADDR_VAR 0 49
39449: PUSH
39450: LD_INT 3
39452: PUSH
39453: LD_INT 1
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 3
39462: PUSH
39463: LD_INT 2
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
39474: LD_ADDR_VAR 0 50
39478: PUSH
39479: LD_INT 2
39481: PUSH
39482: LD_INT 3
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 1
39491: PUSH
39492: LD_INT 3
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39503: LD_ADDR_VAR 0 51
39507: PUSH
39508: LD_INT 1
39510: NEG
39511: PUSH
39512: LD_INT 2
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 2
39521: NEG
39522: PUSH
39523: LD_INT 1
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39534: LD_ADDR_VAR 0 52
39538: PUSH
39539: LD_INT 3
39541: NEG
39542: PUSH
39543: LD_INT 1
39545: NEG
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 3
39553: NEG
39554: PUSH
39555: LD_INT 2
39557: NEG
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39567: LD_ADDR_VAR 0 53
39571: PUSH
39572: LD_INT 1
39574: NEG
39575: PUSH
39576: LD_INT 3
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 0
39586: PUSH
39587: LD_INT 3
39589: NEG
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 1
39597: PUSH
39598: LD_INT 2
39600: NEG
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: LIST
39610: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39611: LD_ADDR_VAR 0 54
39615: PUSH
39616: LD_INT 2
39618: PUSH
39619: LD_INT 1
39621: NEG
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 3
39629: PUSH
39630: LD_INT 0
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 3
39639: PUSH
39640: LD_INT 1
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: LIST
39651: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39652: LD_ADDR_VAR 0 55
39656: PUSH
39657: LD_INT 3
39659: PUSH
39660: LD_INT 2
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 3
39669: PUSH
39670: LD_INT 3
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 2
39679: PUSH
39680: LD_INT 3
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: LIST
39691: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39692: LD_ADDR_VAR 0 56
39696: PUSH
39697: LD_INT 1
39699: PUSH
39700: LD_INT 3
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 0
39709: PUSH
39710: LD_INT 3
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 1
39719: NEG
39720: PUSH
39721: LD_INT 2
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: LIST
39732: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39733: LD_ADDR_VAR 0 57
39737: PUSH
39738: LD_INT 2
39740: NEG
39741: PUSH
39742: LD_INT 1
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 3
39751: NEG
39752: PUSH
39753: LD_INT 0
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 3
39762: NEG
39763: PUSH
39764: LD_INT 1
39766: NEG
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: LIST
39776: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39777: LD_ADDR_VAR 0 58
39781: PUSH
39782: LD_INT 2
39784: NEG
39785: PUSH
39786: LD_INT 3
39788: NEG
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 3
39796: NEG
39797: PUSH
39798: LD_INT 2
39800: NEG
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 3
39808: NEG
39809: PUSH
39810: LD_INT 3
39812: NEG
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: LIST
39822: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
39823: LD_ADDR_VAR 0 59
39827: PUSH
39828: LD_INT 1
39830: NEG
39831: PUSH
39832: LD_INT 2
39834: NEG
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 0
39842: PUSH
39843: LD_INT 2
39845: NEG
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 1
39853: PUSH
39854: LD_INT 1
39856: NEG
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: LIST
39866: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39867: LD_ADDR_VAR 0 60
39871: PUSH
39872: LD_INT 1
39874: PUSH
39875: LD_INT 1
39877: NEG
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 2
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 2
39895: PUSH
39896: LD_INT 1
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: LIST
39907: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39908: LD_ADDR_VAR 0 61
39912: PUSH
39913: LD_INT 2
39915: PUSH
39916: LD_INT 1
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 2
39925: PUSH
39926: LD_INT 2
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 1
39935: PUSH
39936: LD_INT 2
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: LIST
39947: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39948: LD_ADDR_VAR 0 62
39952: PUSH
39953: LD_INT 1
39955: PUSH
39956: LD_INT 2
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 0
39965: PUSH
39966: LD_INT 2
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 1
39975: NEG
39976: PUSH
39977: LD_INT 1
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: LIST
39988: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39989: LD_ADDR_VAR 0 63
39993: PUSH
39994: LD_INT 1
39996: NEG
39997: PUSH
39998: LD_INT 1
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 2
40007: NEG
40008: PUSH
40009: LD_INT 0
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 2
40018: NEG
40019: PUSH
40020: LD_INT 1
40022: NEG
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: LIST
40032: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40033: LD_ADDR_VAR 0 64
40037: PUSH
40038: LD_INT 1
40040: NEG
40041: PUSH
40042: LD_INT 2
40044: NEG
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 2
40052: NEG
40053: PUSH
40054: LD_INT 1
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 2
40064: NEG
40065: PUSH
40066: LD_INT 2
40068: NEG
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: LIST
40078: ST_TO_ADDR
// end ; 2 :
40079: GO 43345
40081: LD_INT 2
40083: DOUBLE
40084: EQUAL
40085: IFTRUE 40089
40087: GO 43344
40089: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
40090: LD_ADDR_VAR 0 29
40094: PUSH
40095: LD_INT 4
40097: PUSH
40098: LD_INT 0
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 4
40107: PUSH
40108: LD_INT 1
40110: NEG
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 5
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 5
40128: PUSH
40129: LD_INT 1
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 4
40138: PUSH
40139: LD_INT 1
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 3
40148: PUSH
40149: LD_INT 0
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 3
40158: PUSH
40159: LD_INT 1
40161: NEG
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 3
40169: PUSH
40170: LD_INT 2
40172: NEG
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 5
40180: PUSH
40181: LD_INT 2
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 3
40190: PUSH
40191: LD_INT 3
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 3
40200: PUSH
40201: LD_INT 2
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 4
40210: PUSH
40211: LD_INT 3
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 4
40220: PUSH
40221: LD_INT 4
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 3
40230: PUSH
40231: LD_INT 4
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 2
40240: PUSH
40241: LD_INT 3
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 2
40250: PUSH
40251: LD_INT 2
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 4
40260: PUSH
40261: LD_INT 2
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 2
40270: PUSH
40271: LD_INT 4
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 0
40280: PUSH
40281: LD_INT 4
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 0
40290: PUSH
40291: LD_INT 3
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 1
40300: PUSH
40301: LD_INT 4
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 1
40310: PUSH
40311: LD_INT 5
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 0
40320: PUSH
40321: LD_INT 5
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 1
40330: NEG
40331: PUSH
40332: LD_INT 4
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 1
40341: NEG
40342: PUSH
40343: LD_INT 3
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 2
40352: PUSH
40353: LD_INT 5
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 2
40362: NEG
40363: PUSH
40364: LD_INT 3
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 3
40373: NEG
40374: PUSH
40375: LD_INT 0
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 3
40384: NEG
40385: PUSH
40386: LD_INT 1
40388: NEG
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 2
40396: NEG
40397: PUSH
40398: LD_INT 0
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 2
40407: NEG
40408: PUSH
40409: LD_INT 1
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 3
40418: NEG
40419: PUSH
40420: LD_INT 1
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 4
40429: NEG
40430: PUSH
40431: LD_INT 0
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 4
40440: NEG
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 4
40452: NEG
40453: PUSH
40454: LD_INT 2
40456: NEG
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 2
40464: NEG
40465: PUSH
40466: LD_INT 2
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 4
40475: NEG
40476: PUSH
40477: LD_INT 4
40479: NEG
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 4
40487: NEG
40488: PUSH
40489: LD_INT 5
40491: NEG
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 3
40499: NEG
40500: PUSH
40501: LD_INT 4
40503: NEG
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 3
40511: NEG
40512: PUSH
40513: LD_INT 3
40515: NEG
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 4
40523: NEG
40524: PUSH
40525: LD_INT 3
40527: NEG
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 5
40535: NEG
40536: PUSH
40537: LD_INT 4
40539: NEG
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 5
40547: NEG
40548: PUSH
40549: LD_INT 5
40551: NEG
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 3
40559: NEG
40560: PUSH
40561: LD_INT 5
40563: NEG
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 5
40571: NEG
40572: PUSH
40573: LD_INT 3
40575: NEG
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
40628: LD_ADDR_VAR 0 30
40632: PUSH
40633: LD_INT 4
40635: PUSH
40636: LD_INT 4
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 4
40645: PUSH
40646: LD_INT 3
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 5
40655: PUSH
40656: LD_INT 4
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 5
40665: PUSH
40666: LD_INT 5
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 4
40675: PUSH
40676: LD_INT 5
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 3
40685: PUSH
40686: LD_INT 4
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 3
40695: PUSH
40696: LD_INT 3
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 5
40705: PUSH
40706: LD_INT 3
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 3
40715: PUSH
40716: LD_INT 5
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 0
40725: PUSH
40726: LD_INT 3
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: LD_INT 2
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 1
40745: PUSH
40746: LD_INT 3
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 1
40755: PUSH
40756: LD_INT 4
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: LD_INT 4
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 1
40775: NEG
40776: PUSH
40777: LD_INT 3
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 1
40786: NEG
40787: PUSH
40788: LD_INT 2
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 2
40797: PUSH
40798: LD_INT 4
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 2
40807: NEG
40808: PUSH
40809: LD_INT 2
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 4
40818: NEG
40819: PUSH
40820: LD_INT 0
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 4
40829: NEG
40830: PUSH
40831: LD_INT 1
40833: NEG
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 3
40841: NEG
40842: PUSH
40843: LD_INT 0
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 3
40852: NEG
40853: PUSH
40854: LD_INT 1
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 4
40863: NEG
40864: PUSH
40865: LD_INT 1
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 5
40874: NEG
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 5
40885: NEG
40886: PUSH
40887: LD_INT 1
40889: NEG
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 5
40897: NEG
40898: PUSH
40899: LD_INT 2
40901: NEG
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 3
40909: NEG
40910: PUSH
40911: LD_INT 2
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: LD_INT 3
40920: NEG
40921: PUSH
40922: LD_INT 3
40924: NEG
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 3
40932: NEG
40933: PUSH
40934: LD_INT 4
40936: NEG
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 2
40944: NEG
40945: PUSH
40946: LD_INT 3
40948: NEG
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 2
40956: NEG
40957: PUSH
40958: LD_INT 2
40960: NEG
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 3
40968: NEG
40969: PUSH
40970: LD_INT 2
40972: NEG
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 4
40980: NEG
40981: PUSH
40982: LD_INT 3
40984: NEG
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 4
40992: NEG
40993: PUSH
40994: LD_INT 4
40996: NEG
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 2
41004: NEG
41005: PUSH
41006: LD_INT 4
41008: NEG
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 4
41016: NEG
41017: PUSH
41018: LD_INT 2
41020: NEG
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 0
41028: PUSH
41029: LD_INT 4
41031: NEG
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 0
41039: PUSH
41040: LD_INT 5
41042: NEG
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 1
41050: PUSH
41051: LD_INT 4
41053: NEG
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 1
41061: PUSH
41062: LD_INT 3
41064: NEG
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 0
41072: PUSH
41073: LD_INT 3
41075: NEG
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 1
41083: NEG
41084: PUSH
41085: LD_INT 4
41087: NEG
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 1
41095: NEG
41096: PUSH
41097: LD_INT 5
41099: NEG
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 2
41107: PUSH
41108: LD_INT 3
41110: NEG
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 2
41118: NEG
41119: PUSH
41120: LD_INT 5
41122: NEG
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
41175: LD_ADDR_VAR 0 31
41179: PUSH
41180: LD_INT 0
41182: PUSH
41183: LD_INT 4
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 0
41192: PUSH
41193: LD_INT 3
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 1
41202: PUSH
41203: LD_INT 4
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: PUSH
41213: LD_INT 5
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 0
41222: PUSH
41223: LD_INT 5
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 1
41232: NEG
41233: PUSH
41234: LD_INT 4
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 1
41243: NEG
41244: PUSH
41245: LD_INT 3
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 2
41254: PUSH
41255: LD_INT 5
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 2
41264: NEG
41265: PUSH
41266: LD_INT 3
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 3
41275: NEG
41276: PUSH
41277: LD_INT 0
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 3
41286: NEG
41287: PUSH
41288: LD_INT 1
41290: NEG
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 2
41298: NEG
41299: PUSH
41300: LD_INT 0
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 2
41309: NEG
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 3
41320: NEG
41321: PUSH
41322: LD_INT 1
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 4
41331: NEG
41332: PUSH
41333: LD_INT 0
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 4
41342: NEG
41343: PUSH
41344: LD_INT 1
41346: NEG
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 4
41354: NEG
41355: PUSH
41356: LD_INT 2
41358: NEG
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 2
41366: NEG
41367: PUSH
41368: LD_INT 2
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 4
41377: NEG
41378: PUSH
41379: LD_INT 4
41381: NEG
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 4
41389: NEG
41390: PUSH
41391: LD_INT 5
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 3
41401: NEG
41402: PUSH
41403: LD_INT 4
41405: NEG
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 3
41413: NEG
41414: PUSH
41415: LD_INT 3
41417: NEG
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 4
41425: NEG
41426: PUSH
41427: LD_INT 3
41429: NEG
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 5
41437: NEG
41438: PUSH
41439: LD_INT 4
41441: NEG
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 5
41449: NEG
41450: PUSH
41451: LD_INT 5
41453: NEG
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 3
41461: NEG
41462: PUSH
41463: LD_INT 5
41465: NEG
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 5
41473: NEG
41474: PUSH
41475: LD_INT 3
41477: NEG
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: LD_INT 3
41488: NEG
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 0
41496: PUSH
41497: LD_INT 4
41499: NEG
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 1
41507: PUSH
41508: LD_INT 3
41510: NEG
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 1
41518: PUSH
41519: LD_INT 2
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 0
41529: PUSH
41530: LD_INT 2
41532: NEG
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 1
41540: NEG
41541: PUSH
41542: LD_INT 3
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 1
41552: NEG
41553: PUSH
41554: LD_INT 4
41556: NEG
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 2
41564: PUSH
41565: LD_INT 2
41567: NEG
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 2
41575: NEG
41576: PUSH
41577: LD_INT 4
41579: NEG
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 4
41587: PUSH
41588: LD_INT 0
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 4
41597: PUSH
41598: LD_INT 1
41600: NEG
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 5
41608: PUSH
41609: LD_INT 0
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 5
41618: PUSH
41619: LD_INT 1
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 4
41628: PUSH
41629: LD_INT 1
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 3
41638: PUSH
41639: LD_INT 0
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 3
41648: PUSH
41649: LD_INT 1
41651: NEG
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 3
41659: PUSH
41660: LD_INT 2
41662: NEG
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: LD_INT 5
41670: PUSH
41671: LD_INT 2
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
41725: LD_ADDR_VAR 0 32
41729: PUSH
41730: LD_INT 4
41732: NEG
41733: PUSH
41734: LD_INT 0
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 4
41743: NEG
41744: PUSH
41745: LD_INT 1
41747: NEG
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 3
41755: NEG
41756: PUSH
41757: LD_INT 0
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 3
41766: NEG
41767: PUSH
41768: LD_INT 1
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 4
41777: NEG
41778: PUSH
41779: LD_INT 1
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 5
41788: NEG
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 5
41799: NEG
41800: PUSH
41801: LD_INT 1
41803: NEG
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 5
41811: NEG
41812: PUSH
41813: LD_INT 2
41815: NEG
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 3
41823: NEG
41824: PUSH
41825: LD_INT 2
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 3
41834: NEG
41835: PUSH
41836: LD_INT 3
41838: NEG
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 3
41846: NEG
41847: PUSH
41848: LD_INT 4
41850: NEG
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 2
41858: NEG
41859: PUSH
41860: LD_INT 3
41862: NEG
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 2
41870: NEG
41871: PUSH
41872: LD_INT 2
41874: NEG
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 3
41882: NEG
41883: PUSH
41884: LD_INT 2
41886: NEG
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 4
41894: NEG
41895: PUSH
41896: LD_INT 3
41898: NEG
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 4
41906: NEG
41907: PUSH
41908: LD_INT 4
41910: NEG
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 2
41918: NEG
41919: PUSH
41920: LD_INT 4
41922: NEG
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 4
41930: NEG
41931: PUSH
41932: LD_INT 2
41934: NEG
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 0
41942: PUSH
41943: LD_INT 4
41945: NEG
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 0
41953: PUSH
41954: LD_INT 5
41956: NEG
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 1
41964: PUSH
41965: LD_INT 4
41967: NEG
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 1
41975: PUSH
41976: LD_INT 3
41978: NEG
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: LD_INT 3
41989: NEG
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 1
41997: NEG
41998: PUSH
41999: LD_INT 4
42001: NEG
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 1
42009: NEG
42010: PUSH
42011: LD_INT 5
42013: NEG
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 2
42021: PUSH
42022: LD_INT 3
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 2
42032: NEG
42033: PUSH
42034: LD_INT 5
42036: NEG
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 3
42044: PUSH
42045: LD_INT 0
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 3
42054: PUSH
42055: LD_INT 1
42057: NEG
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 4
42065: PUSH
42066: LD_INT 0
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 4
42075: PUSH
42076: LD_INT 1
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 3
42085: PUSH
42086: LD_INT 1
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 2
42095: PUSH
42096: LD_INT 0
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 2
42105: PUSH
42106: LD_INT 1
42108: NEG
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 2
42116: PUSH
42117: LD_INT 2
42119: NEG
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 4
42127: PUSH
42128: LD_INT 2
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 4
42137: PUSH
42138: LD_INT 4
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 4
42147: PUSH
42148: LD_INT 3
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 5
42157: PUSH
42158: LD_INT 4
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 5
42167: PUSH
42168: LD_INT 5
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 4
42177: PUSH
42178: LD_INT 5
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 3
42187: PUSH
42188: LD_INT 4
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 3
42197: PUSH
42198: LD_INT 3
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 5
42207: PUSH
42208: LD_INT 3
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 3
42217: PUSH
42218: LD_INT 5
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
42272: LD_ADDR_VAR 0 33
42276: PUSH
42277: LD_INT 4
42279: NEG
42280: PUSH
42281: LD_INT 4
42283: NEG
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 4
42291: NEG
42292: PUSH
42293: LD_INT 5
42295: NEG
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 3
42303: NEG
42304: PUSH
42305: LD_INT 4
42307: NEG
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 3
42315: NEG
42316: PUSH
42317: LD_INT 3
42319: NEG
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 4
42327: NEG
42328: PUSH
42329: LD_INT 3
42331: NEG
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 5
42339: NEG
42340: PUSH
42341: LD_INT 4
42343: NEG
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 5
42351: NEG
42352: PUSH
42353: LD_INT 5
42355: NEG
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 3
42363: NEG
42364: PUSH
42365: LD_INT 5
42367: NEG
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 5
42375: NEG
42376: PUSH
42377: LD_INT 3
42379: NEG
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: LD_INT 3
42390: NEG
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 0
42398: PUSH
42399: LD_INT 4
42401: NEG
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 1
42409: PUSH
42410: LD_INT 3
42412: NEG
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 1
42420: PUSH
42421: LD_INT 2
42423: NEG
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: LD_INT 2
42434: NEG
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 1
42442: NEG
42443: PUSH
42444: LD_INT 3
42446: NEG
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 1
42454: NEG
42455: PUSH
42456: LD_INT 4
42458: NEG
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 2
42466: PUSH
42467: LD_INT 2
42469: NEG
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 2
42477: NEG
42478: PUSH
42479: LD_INT 4
42481: NEG
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 4
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 4
42499: PUSH
42500: LD_INT 1
42502: NEG
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 5
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 5
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 4
42530: PUSH
42531: LD_INT 1
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 3
42540: PUSH
42541: LD_INT 0
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 3
42550: PUSH
42551: LD_INT 1
42553: NEG
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 3
42561: PUSH
42562: LD_INT 2
42564: NEG
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 5
42572: PUSH
42573: LD_INT 2
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 3
42582: PUSH
42583: LD_INT 3
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 3
42592: PUSH
42593: LD_INT 2
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 4
42602: PUSH
42603: LD_INT 3
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 4
42612: PUSH
42613: LD_INT 4
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 3
42622: PUSH
42623: LD_INT 4
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 2
42632: PUSH
42633: LD_INT 3
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 2
42642: PUSH
42643: LD_INT 2
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 4
42652: PUSH
42653: LD_INT 2
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 2
42662: PUSH
42663: LD_INT 4
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 0
42672: PUSH
42673: LD_INT 4
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 0
42682: PUSH
42683: LD_INT 3
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 1
42692: PUSH
42693: LD_INT 4
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 1
42702: PUSH
42703: LD_INT 5
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: LD_INT 5
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 1
42722: NEG
42723: PUSH
42724: LD_INT 4
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 1
42733: NEG
42734: PUSH
42735: LD_INT 3
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 2
42744: PUSH
42745: LD_INT 5
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 2
42754: NEG
42755: PUSH
42756: LD_INT 3
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
42810: LD_ADDR_VAR 0 34
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: LD_INT 4
42820: NEG
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 0
42828: PUSH
42829: LD_INT 5
42831: NEG
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 1
42839: PUSH
42840: LD_INT 4
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 1
42850: PUSH
42851: LD_INT 3
42853: NEG
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 0
42861: PUSH
42862: LD_INT 3
42864: NEG
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 1
42872: NEG
42873: PUSH
42874: LD_INT 4
42876: NEG
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 1
42884: NEG
42885: PUSH
42886: LD_INT 5
42888: NEG
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 2
42896: PUSH
42897: LD_INT 3
42899: NEG
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 2
42907: NEG
42908: PUSH
42909: LD_INT 5
42911: NEG
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 3
42919: PUSH
42920: LD_INT 0
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 3
42929: PUSH
42930: LD_INT 1
42932: NEG
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 4
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 4
42950: PUSH
42951: LD_INT 1
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 3
42960: PUSH
42961: LD_INT 1
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 2
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 2
42980: PUSH
42981: LD_INT 1
42983: NEG
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 2
42991: PUSH
42992: LD_INT 2
42994: NEG
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 4
43002: PUSH
43003: LD_INT 2
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 4
43012: PUSH
43013: LD_INT 4
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 4
43022: PUSH
43023: LD_INT 3
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 5
43032: PUSH
43033: LD_INT 4
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 5
43042: PUSH
43043: LD_INT 5
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 4
43052: PUSH
43053: LD_INT 5
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 3
43062: PUSH
43063: LD_INT 4
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 3
43072: PUSH
43073: LD_INT 3
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 5
43082: PUSH
43083: LD_INT 3
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 3
43092: PUSH
43093: LD_INT 5
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: LD_INT 3
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 0
43112: PUSH
43113: LD_INT 2
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 1
43122: PUSH
43123: LD_INT 3
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 1
43132: PUSH
43133: LD_INT 4
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: LD_INT 4
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 1
43152: NEG
43153: PUSH
43154: LD_INT 3
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 1
43163: NEG
43164: PUSH
43165: LD_INT 2
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 2
43174: PUSH
43175: LD_INT 4
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 2
43184: NEG
43185: PUSH
43186: LD_INT 2
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 4
43195: NEG
43196: PUSH
43197: LD_INT 0
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 4
43206: NEG
43207: PUSH
43208: LD_INT 1
43210: NEG
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 3
43218: NEG
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 3
43229: NEG
43230: PUSH
43231: LD_INT 1
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 4
43240: NEG
43241: PUSH
43242: LD_INT 1
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 5
43251: NEG
43252: PUSH
43253: LD_INT 0
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 5
43262: NEG
43263: PUSH
43264: LD_INT 1
43266: NEG
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 5
43274: NEG
43275: PUSH
43276: LD_INT 2
43278: NEG
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 3
43286: NEG
43287: PUSH
43288: LD_INT 2
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: ST_TO_ADDR
// end ; end ;
43342: GO 43345
43344: POP
// case btype of b_depot , b_warehouse :
43345: LD_VAR 0 1
43349: PUSH
43350: LD_INT 0
43352: DOUBLE
43353: EQUAL
43354: IFTRUE 43364
43356: LD_INT 1
43358: DOUBLE
43359: EQUAL
43360: IFTRUE 43364
43362: GO 43565
43364: POP
// case nation of nation_american :
43365: LD_VAR 0 5
43369: PUSH
43370: LD_INT 1
43372: DOUBLE
43373: EQUAL
43374: IFTRUE 43378
43376: GO 43434
43378: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
43379: LD_ADDR_VAR 0 9
43383: PUSH
43384: LD_VAR 0 11
43388: PUSH
43389: LD_VAR 0 12
43393: PUSH
43394: LD_VAR 0 13
43398: PUSH
43399: LD_VAR 0 14
43403: PUSH
43404: LD_VAR 0 15
43408: PUSH
43409: LD_VAR 0 16
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: PUSH
43422: LD_VAR 0 4
43426: PUSH
43427: LD_INT 1
43429: PLUS
43430: ARRAY
43431: ST_TO_ADDR
43432: GO 43563
43434: LD_INT 2
43436: DOUBLE
43437: EQUAL
43438: IFTRUE 43442
43440: GO 43498
43442: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
43443: LD_ADDR_VAR 0 9
43447: PUSH
43448: LD_VAR 0 17
43452: PUSH
43453: LD_VAR 0 18
43457: PUSH
43458: LD_VAR 0 19
43462: PUSH
43463: LD_VAR 0 20
43467: PUSH
43468: LD_VAR 0 21
43472: PUSH
43473: LD_VAR 0 22
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: PUSH
43486: LD_VAR 0 4
43490: PUSH
43491: LD_INT 1
43493: PLUS
43494: ARRAY
43495: ST_TO_ADDR
43496: GO 43563
43498: LD_INT 3
43500: DOUBLE
43501: EQUAL
43502: IFTRUE 43506
43504: GO 43562
43506: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
43507: LD_ADDR_VAR 0 9
43511: PUSH
43512: LD_VAR 0 23
43516: PUSH
43517: LD_VAR 0 24
43521: PUSH
43522: LD_VAR 0 25
43526: PUSH
43527: LD_VAR 0 26
43531: PUSH
43532: LD_VAR 0 27
43536: PUSH
43537: LD_VAR 0 28
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: PUSH
43550: LD_VAR 0 4
43554: PUSH
43555: LD_INT 1
43557: PLUS
43558: ARRAY
43559: ST_TO_ADDR
43560: GO 43563
43562: POP
43563: GO 44112
43565: LD_INT 2
43567: DOUBLE
43568: EQUAL
43569: IFTRUE 43579
43571: LD_INT 3
43573: DOUBLE
43574: EQUAL
43575: IFTRUE 43579
43577: GO 43635
43579: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
43580: LD_ADDR_VAR 0 9
43584: PUSH
43585: LD_VAR 0 29
43589: PUSH
43590: LD_VAR 0 30
43594: PUSH
43595: LD_VAR 0 31
43599: PUSH
43600: LD_VAR 0 32
43604: PUSH
43605: LD_VAR 0 33
43609: PUSH
43610: LD_VAR 0 34
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: PUSH
43623: LD_VAR 0 4
43627: PUSH
43628: LD_INT 1
43630: PLUS
43631: ARRAY
43632: ST_TO_ADDR
43633: GO 44112
43635: LD_INT 16
43637: DOUBLE
43638: EQUAL
43639: IFTRUE 43691
43641: LD_INT 17
43643: DOUBLE
43644: EQUAL
43645: IFTRUE 43691
43647: LD_INT 18
43649: DOUBLE
43650: EQUAL
43651: IFTRUE 43691
43653: LD_INT 19
43655: DOUBLE
43656: EQUAL
43657: IFTRUE 43691
43659: LD_INT 20
43661: DOUBLE
43662: EQUAL
43663: IFTRUE 43691
43665: LD_INT 21
43667: DOUBLE
43668: EQUAL
43669: IFTRUE 43691
43671: LD_INT 23
43673: DOUBLE
43674: EQUAL
43675: IFTRUE 43691
43677: LD_INT 24
43679: DOUBLE
43680: EQUAL
43681: IFTRUE 43691
43683: LD_INT 25
43685: DOUBLE
43686: EQUAL
43687: IFTRUE 43691
43689: GO 43747
43691: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
43692: LD_ADDR_VAR 0 9
43696: PUSH
43697: LD_VAR 0 35
43701: PUSH
43702: LD_VAR 0 36
43706: PUSH
43707: LD_VAR 0 37
43711: PUSH
43712: LD_VAR 0 38
43716: PUSH
43717: LD_VAR 0 39
43721: PUSH
43722: LD_VAR 0 40
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: PUSH
43735: LD_VAR 0 4
43739: PUSH
43740: LD_INT 1
43742: PLUS
43743: ARRAY
43744: ST_TO_ADDR
43745: GO 44112
43747: LD_INT 6
43749: DOUBLE
43750: EQUAL
43751: IFTRUE 43803
43753: LD_INT 7
43755: DOUBLE
43756: EQUAL
43757: IFTRUE 43803
43759: LD_INT 8
43761: DOUBLE
43762: EQUAL
43763: IFTRUE 43803
43765: LD_INT 13
43767: DOUBLE
43768: EQUAL
43769: IFTRUE 43803
43771: LD_INT 12
43773: DOUBLE
43774: EQUAL
43775: IFTRUE 43803
43777: LD_INT 15
43779: DOUBLE
43780: EQUAL
43781: IFTRUE 43803
43783: LD_INT 11
43785: DOUBLE
43786: EQUAL
43787: IFTRUE 43803
43789: LD_INT 14
43791: DOUBLE
43792: EQUAL
43793: IFTRUE 43803
43795: LD_INT 10
43797: DOUBLE
43798: EQUAL
43799: IFTRUE 43803
43801: GO 43859
43803: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
43804: LD_ADDR_VAR 0 9
43808: PUSH
43809: LD_VAR 0 41
43813: PUSH
43814: LD_VAR 0 42
43818: PUSH
43819: LD_VAR 0 43
43823: PUSH
43824: LD_VAR 0 44
43828: PUSH
43829: LD_VAR 0 45
43833: PUSH
43834: LD_VAR 0 46
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: PUSH
43847: LD_VAR 0 4
43851: PUSH
43852: LD_INT 1
43854: PLUS
43855: ARRAY
43856: ST_TO_ADDR
43857: GO 44112
43859: LD_INT 36
43861: DOUBLE
43862: EQUAL
43863: IFTRUE 43867
43865: GO 43923
43867: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
43868: LD_ADDR_VAR 0 9
43872: PUSH
43873: LD_VAR 0 47
43877: PUSH
43878: LD_VAR 0 48
43882: PUSH
43883: LD_VAR 0 49
43887: PUSH
43888: LD_VAR 0 50
43892: PUSH
43893: LD_VAR 0 51
43897: PUSH
43898: LD_VAR 0 52
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: PUSH
43911: LD_VAR 0 4
43915: PUSH
43916: LD_INT 1
43918: PLUS
43919: ARRAY
43920: ST_TO_ADDR
43921: GO 44112
43923: LD_INT 4
43925: DOUBLE
43926: EQUAL
43927: IFTRUE 43949
43929: LD_INT 5
43931: DOUBLE
43932: EQUAL
43933: IFTRUE 43949
43935: LD_INT 34
43937: DOUBLE
43938: EQUAL
43939: IFTRUE 43949
43941: LD_INT 37
43943: DOUBLE
43944: EQUAL
43945: IFTRUE 43949
43947: GO 44005
43949: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
43950: LD_ADDR_VAR 0 9
43954: PUSH
43955: LD_VAR 0 53
43959: PUSH
43960: LD_VAR 0 54
43964: PUSH
43965: LD_VAR 0 55
43969: PUSH
43970: LD_VAR 0 56
43974: PUSH
43975: LD_VAR 0 57
43979: PUSH
43980: LD_VAR 0 58
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: PUSH
43993: LD_VAR 0 4
43997: PUSH
43998: LD_INT 1
44000: PLUS
44001: ARRAY
44002: ST_TO_ADDR
44003: GO 44112
44005: LD_INT 31
44007: DOUBLE
44008: EQUAL
44009: IFTRUE 44055
44011: LD_INT 32
44013: DOUBLE
44014: EQUAL
44015: IFTRUE 44055
44017: LD_INT 33
44019: DOUBLE
44020: EQUAL
44021: IFTRUE 44055
44023: LD_INT 27
44025: DOUBLE
44026: EQUAL
44027: IFTRUE 44055
44029: LD_INT 26
44031: DOUBLE
44032: EQUAL
44033: IFTRUE 44055
44035: LD_INT 28
44037: DOUBLE
44038: EQUAL
44039: IFTRUE 44055
44041: LD_INT 29
44043: DOUBLE
44044: EQUAL
44045: IFTRUE 44055
44047: LD_INT 30
44049: DOUBLE
44050: EQUAL
44051: IFTRUE 44055
44053: GO 44111
44055: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
44056: LD_ADDR_VAR 0 9
44060: PUSH
44061: LD_VAR 0 59
44065: PUSH
44066: LD_VAR 0 60
44070: PUSH
44071: LD_VAR 0 61
44075: PUSH
44076: LD_VAR 0 62
44080: PUSH
44081: LD_VAR 0 63
44085: PUSH
44086: LD_VAR 0 64
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: PUSH
44099: LD_VAR 0 4
44103: PUSH
44104: LD_INT 1
44106: PLUS
44107: ARRAY
44108: ST_TO_ADDR
44109: GO 44112
44111: POP
// temp_list2 = [ ] ;
44112: LD_ADDR_VAR 0 10
44116: PUSH
44117: EMPTY
44118: ST_TO_ADDR
// for i in temp_list do
44119: LD_ADDR_VAR 0 8
44123: PUSH
44124: LD_VAR 0 9
44128: PUSH
44129: FOR_IN
44130: IFFALSE 44182
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
44132: LD_ADDR_VAR 0 10
44136: PUSH
44137: LD_VAR 0 10
44141: PUSH
44142: LD_VAR 0 8
44146: PUSH
44147: LD_INT 1
44149: ARRAY
44150: PUSH
44151: LD_VAR 0 2
44155: PLUS
44156: PUSH
44157: LD_VAR 0 8
44161: PUSH
44162: LD_INT 2
44164: ARRAY
44165: PUSH
44166: LD_VAR 0 3
44170: PLUS
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: EMPTY
44177: LIST
44178: ADD
44179: ST_TO_ADDR
44180: GO 44129
44182: POP
44183: POP
// result = temp_list2 ;
44184: LD_ADDR_VAR 0 7
44188: PUSH
44189: LD_VAR 0 10
44193: ST_TO_ADDR
// end ;
44194: LD_VAR 0 7
44198: RET
// export function EnemyInRange ( unit , dist ) ; begin
44199: LD_INT 0
44201: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
44202: LD_ADDR_VAR 0 3
44206: PUSH
44207: LD_VAR 0 1
44211: PPUSH
44212: CALL_OW 255
44216: PPUSH
44217: LD_VAR 0 1
44221: PPUSH
44222: CALL_OW 250
44226: PPUSH
44227: LD_VAR 0 1
44231: PPUSH
44232: CALL_OW 251
44236: PPUSH
44237: LD_VAR 0 2
44241: PPUSH
44242: CALL 18309 0 4
44246: PUSH
44247: LD_INT 4
44249: ARRAY
44250: ST_TO_ADDR
// end ;
44251: LD_VAR 0 3
44255: RET
// export function PlayerSeeMe ( unit ) ; begin
44256: LD_INT 0
44258: PPUSH
// result := See ( your_side , unit ) ;
44259: LD_ADDR_VAR 0 2
44263: PUSH
44264: LD_OWVAR 2
44268: PPUSH
44269: LD_VAR 0 1
44273: PPUSH
44274: CALL_OW 292
44278: ST_TO_ADDR
// end ;
44279: LD_VAR 0 2
44283: RET
// export function ReverseDir ( unit ) ; begin
44284: LD_INT 0
44286: PPUSH
// if not unit then
44287: LD_VAR 0 1
44291: NOT
44292: IFFALSE 44296
// exit ;
44294: GO 44342
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
44296: LD_ADDR_VAR 0 2
44300: PUSH
44301: LD_INT 3
44303: PUSH
44304: LD_INT 4
44306: PUSH
44307: LD_INT 5
44309: PUSH
44310: LD_INT 0
44312: PUSH
44313: LD_INT 1
44315: PUSH
44316: LD_INT 2
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: PUSH
44327: LD_VAR 0 1
44331: PPUSH
44332: CALL_OW 254
44336: PUSH
44337: LD_INT 1
44339: PLUS
44340: ARRAY
44341: ST_TO_ADDR
// end ;
44342: LD_VAR 0 2
44346: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
44347: LD_INT 0
44349: PPUSH
44350: PPUSH
44351: PPUSH
44352: PPUSH
44353: PPUSH
// if not hexes then
44354: LD_VAR 0 2
44358: NOT
44359: IFFALSE 44363
// exit ;
44361: GO 44511
// dist := 9999 ;
44363: LD_ADDR_VAR 0 5
44367: PUSH
44368: LD_INT 9999
44370: ST_TO_ADDR
// for i = 1 to hexes do
44371: LD_ADDR_VAR 0 4
44375: PUSH
44376: DOUBLE
44377: LD_INT 1
44379: DEC
44380: ST_TO_ADDR
44381: LD_VAR 0 2
44385: PUSH
44386: FOR_TO
44387: IFFALSE 44499
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
44389: LD_VAR 0 1
44393: PPUSH
44394: LD_VAR 0 2
44398: PUSH
44399: LD_VAR 0 4
44403: ARRAY
44404: PUSH
44405: LD_INT 1
44407: ARRAY
44408: PPUSH
44409: LD_VAR 0 2
44413: PUSH
44414: LD_VAR 0 4
44418: ARRAY
44419: PUSH
44420: LD_INT 2
44422: ARRAY
44423: PPUSH
44424: CALL_OW 297
44428: PUSH
44429: LD_VAR 0 5
44433: LESS
44434: IFFALSE 44497
// begin hex := hexes [ i ] ;
44436: LD_ADDR_VAR 0 7
44440: PUSH
44441: LD_VAR 0 2
44445: PUSH
44446: LD_VAR 0 4
44450: ARRAY
44451: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44452: LD_ADDR_VAR 0 5
44456: PUSH
44457: LD_VAR 0 1
44461: PPUSH
44462: LD_VAR 0 2
44466: PUSH
44467: LD_VAR 0 4
44471: ARRAY
44472: PUSH
44473: LD_INT 1
44475: ARRAY
44476: PPUSH
44477: LD_VAR 0 2
44481: PUSH
44482: LD_VAR 0 4
44486: ARRAY
44487: PUSH
44488: LD_INT 2
44490: ARRAY
44491: PPUSH
44492: CALL_OW 297
44496: ST_TO_ADDR
// end ; end ;
44497: GO 44386
44499: POP
44500: POP
// result := hex ;
44501: LD_ADDR_VAR 0 3
44505: PUSH
44506: LD_VAR 0 7
44510: ST_TO_ADDR
// end ;
44511: LD_VAR 0 3
44515: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
44516: LD_INT 0
44518: PPUSH
44519: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
44520: LD_VAR 0 1
44524: NOT
44525: PUSH
44526: LD_VAR 0 1
44530: PUSH
44531: LD_INT 21
44533: PUSH
44534: LD_INT 2
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 23
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PPUSH
44555: CALL_OW 69
44559: IN
44560: NOT
44561: OR
44562: IFFALSE 44566
// exit ;
44564: GO 44613
// for i = 1 to 3 do
44566: LD_ADDR_VAR 0 3
44570: PUSH
44571: DOUBLE
44572: LD_INT 1
44574: DEC
44575: ST_TO_ADDR
44576: LD_INT 3
44578: PUSH
44579: FOR_TO
44580: IFFALSE 44611
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
44582: LD_VAR 0 1
44586: PPUSH
44587: CALL_OW 250
44591: PPUSH
44592: LD_VAR 0 1
44596: PPUSH
44597: CALL_OW 251
44601: PPUSH
44602: LD_INT 1
44604: PPUSH
44605: CALL_OW 453
44609: GO 44579
44611: POP
44612: POP
// end ;
44613: LD_VAR 0 2
44617: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44618: LD_INT 0
44620: PPUSH
44621: PPUSH
44622: PPUSH
44623: PPUSH
44624: PPUSH
44625: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
44626: LD_VAR 0 1
44630: NOT
44631: PUSH
44632: LD_VAR 0 2
44636: NOT
44637: OR
44638: PUSH
44639: LD_VAR 0 1
44643: PPUSH
44644: CALL_OW 314
44648: OR
44649: IFFALSE 44653
// exit ;
44651: GO 45094
// x := GetX ( enemy_unit ) ;
44653: LD_ADDR_VAR 0 7
44657: PUSH
44658: LD_VAR 0 2
44662: PPUSH
44663: CALL_OW 250
44667: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
44668: LD_ADDR_VAR 0 8
44672: PUSH
44673: LD_VAR 0 2
44677: PPUSH
44678: CALL_OW 251
44682: ST_TO_ADDR
// if not x or not y then
44683: LD_VAR 0 7
44687: NOT
44688: PUSH
44689: LD_VAR 0 8
44693: NOT
44694: OR
44695: IFFALSE 44699
// exit ;
44697: GO 45094
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
44699: LD_ADDR_VAR 0 6
44703: PUSH
44704: LD_VAR 0 7
44708: PPUSH
44709: LD_INT 0
44711: PPUSH
44712: LD_INT 4
44714: PPUSH
44715: CALL_OW 272
44719: PUSH
44720: LD_VAR 0 8
44724: PPUSH
44725: LD_INT 0
44727: PPUSH
44728: LD_INT 4
44730: PPUSH
44731: CALL_OW 273
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_VAR 0 7
44744: PPUSH
44745: LD_INT 1
44747: PPUSH
44748: LD_INT 4
44750: PPUSH
44751: CALL_OW 272
44755: PUSH
44756: LD_VAR 0 8
44760: PPUSH
44761: LD_INT 1
44763: PPUSH
44764: LD_INT 4
44766: PPUSH
44767: CALL_OW 273
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_VAR 0 7
44780: PPUSH
44781: LD_INT 2
44783: PPUSH
44784: LD_INT 4
44786: PPUSH
44787: CALL_OW 272
44791: PUSH
44792: LD_VAR 0 8
44796: PPUSH
44797: LD_INT 2
44799: PPUSH
44800: LD_INT 4
44802: PPUSH
44803: CALL_OW 273
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_VAR 0 7
44816: PPUSH
44817: LD_INT 3
44819: PPUSH
44820: LD_INT 4
44822: PPUSH
44823: CALL_OW 272
44827: PUSH
44828: LD_VAR 0 8
44832: PPUSH
44833: LD_INT 3
44835: PPUSH
44836: LD_INT 4
44838: PPUSH
44839: CALL_OW 273
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_VAR 0 7
44852: PPUSH
44853: LD_INT 4
44855: PPUSH
44856: LD_INT 4
44858: PPUSH
44859: CALL_OW 272
44863: PUSH
44864: LD_VAR 0 8
44868: PPUSH
44869: LD_INT 4
44871: PPUSH
44872: LD_INT 4
44874: PPUSH
44875: CALL_OW 273
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_VAR 0 7
44888: PPUSH
44889: LD_INT 5
44891: PPUSH
44892: LD_INT 4
44894: PPUSH
44895: CALL_OW 272
44899: PUSH
44900: LD_VAR 0 8
44904: PPUSH
44905: LD_INT 5
44907: PPUSH
44908: LD_INT 4
44910: PPUSH
44911: CALL_OW 273
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: ST_TO_ADDR
// for i = tmp downto 1 do
44928: LD_ADDR_VAR 0 4
44932: PUSH
44933: DOUBLE
44934: LD_VAR 0 6
44938: INC
44939: ST_TO_ADDR
44940: LD_INT 1
44942: PUSH
44943: FOR_DOWNTO
44944: IFFALSE 45045
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
44946: LD_VAR 0 6
44950: PUSH
44951: LD_VAR 0 4
44955: ARRAY
44956: PUSH
44957: LD_INT 1
44959: ARRAY
44960: PPUSH
44961: LD_VAR 0 6
44965: PUSH
44966: LD_VAR 0 4
44970: ARRAY
44971: PUSH
44972: LD_INT 2
44974: ARRAY
44975: PPUSH
44976: CALL_OW 488
44980: NOT
44981: PUSH
44982: LD_VAR 0 6
44986: PUSH
44987: LD_VAR 0 4
44991: ARRAY
44992: PUSH
44993: LD_INT 1
44995: ARRAY
44996: PPUSH
44997: LD_VAR 0 6
45001: PUSH
45002: LD_VAR 0 4
45006: ARRAY
45007: PUSH
45008: LD_INT 2
45010: ARRAY
45011: PPUSH
45012: CALL_OW 428
45016: PUSH
45017: LD_INT 0
45019: NONEQUAL
45020: OR
45021: IFFALSE 45043
// tmp := Delete ( tmp , i ) ;
45023: LD_ADDR_VAR 0 6
45027: PUSH
45028: LD_VAR 0 6
45032: PPUSH
45033: LD_VAR 0 4
45037: PPUSH
45038: CALL_OW 3
45042: ST_TO_ADDR
45043: GO 44943
45045: POP
45046: POP
// j := GetClosestHex ( unit , tmp ) ;
45047: LD_ADDR_VAR 0 5
45051: PUSH
45052: LD_VAR 0 1
45056: PPUSH
45057: LD_VAR 0 6
45061: PPUSH
45062: CALL 44347 0 2
45066: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
45067: LD_VAR 0 1
45071: PPUSH
45072: LD_VAR 0 5
45076: PUSH
45077: LD_INT 1
45079: ARRAY
45080: PPUSH
45081: LD_VAR 0 5
45085: PUSH
45086: LD_INT 2
45088: ARRAY
45089: PPUSH
45090: CALL_OW 111
// end ;
45094: LD_VAR 0 3
45098: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
45099: LD_INT 0
45101: PPUSH
45102: PPUSH
45103: PPUSH
// uc_side = 0 ;
45104: LD_ADDR_OWVAR 20
45108: PUSH
45109: LD_INT 0
45111: ST_TO_ADDR
// uc_nation = 0 ;
45112: LD_ADDR_OWVAR 21
45116: PUSH
45117: LD_INT 0
45119: ST_TO_ADDR
// InitHc ;
45120: CALL_OW 19
// InitVc ;
45124: CALL_OW 20
// if mastodonts then
45128: LD_VAR 0 6
45132: IFFALSE 45199
// for i = 1 to mastodonts do
45134: LD_ADDR_VAR 0 11
45138: PUSH
45139: DOUBLE
45140: LD_INT 1
45142: DEC
45143: ST_TO_ADDR
45144: LD_VAR 0 6
45148: PUSH
45149: FOR_TO
45150: IFFALSE 45197
// begin vc_chassis := 31 ;
45152: LD_ADDR_OWVAR 37
45156: PUSH
45157: LD_INT 31
45159: ST_TO_ADDR
// vc_control := control_rider ;
45160: LD_ADDR_OWVAR 38
45164: PUSH
45165: LD_INT 4
45167: ST_TO_ADDR
// animal := CreateVehicle ;
45168: LD_ADDR_VAR 0 12
45172: PUSH
45173: CALL_OW 45
45177: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45178: LD_VAR 0 12
45182: PPUSH
45183: LD_VAR 0 8
45187: PPUSH
45188: LD_INT 0
45190: PPUSH
45191: CALL 51944 0 3
// end ;
45195: GO 45149
45197: POP
45198: POP
// if horses then
45199: LD_VAR 0 5
45203: IFFALSE 45270
// for i = 1 to horses do
45205: LD_ADDR_VAR 0 11
45209: PUSH
45210: DOUBLE
45211: LD_INT 1
45213: DEC
45214: ST_TO_ADDR
45215: LD_VAR 0 5
45219: PUSH
45220: FOR_TO
45221: IFFALSE 45268
// begin hc_class := 21 ;
45223: LD_ADDR_OWVAR 28
45227: PUSH
45228: LD_INT 21
45230: ST_TO_ADDR
// hc_gallery :=  ;
45231: LD_ADDR_OWVAR 33
45235: PUSH
45236: LD_STRING 
45238: ST_TO_ADDR
// animal := CreateHuman ;
45239: LD_ADDR_VAR 0 12
45243: PUSH
45244: CALL_OW 44
45248: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45249: LD_VAR 0 12
45253: PPUSH
45254: LD_VAR 0 8
45258: PPUSH
45259: LD_INT 0
45261: PPUSH
45262: CALL 51944 0 3
// end ;
45266: GO 45220
45268: POP
45269: POP
// if birds then
45270: LD_VAR 0 1
45274: IFFALSE 45341
// for i = 1 to birds do
45276: LD_ADDR_VAR 0 11
45280: PUSH
45281: DOUBLE
45282: LD_INT 1
45284: DEC
45285: ST_TO_ADDR
45286: LD_VAR 0 1
45290: PUSH
45291: FOR_TO
45292: IFFALSE 45339
// begin hc_class = 18 ;
45294: LD_ADDR_OWVAR 28
45298: PUSH
45299: LD_INT 18
45301: ST_TO_ADDR
// hc_gallery =  ;
45302: LD_ADDR_OWVAR 33
45306: PUSH
45307: LD_STRING 
45309: ST_TO_ADDR
// animal := CreateHuman ;
45310: LD_ADDR_VAR 0 12
45314: PUSH
45315: CALL_OW 44
45319: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45320: LD_VAR 0 12
45324: PPUSH
45325: LD_VAR 0 8
45329: PPUSH
45330: LD_INT 0
45332: PPUSH
45333: CALL 51944 0 3
// end ;
45337: GO 45291
45339: POP
45340: POP
// if tigers then
45341: LD_VAR 0 2
45345: IFFALSE 45429
// for i = 1 to tigers do
45347: LD_ADDR_VAR 0 11
45351: PUSH
45352: DOUBLE
45353: LD_INT 1
45355: DEC
45356: ST_TO_ADDR
45357: LD_VAR 0 2
45361: PUSH
45362: FOR_TO
45363: IFFALSE 45427
// begin hc_class = class_tiger ;
45365: LD_ADDR_OWVAR 28
45369: PUSH
45370: LD_INT 14
45372: ST_TO_ADDR
// hc_gallery =  ;
45373: LD_ADDR_OWVAR 33
45377: PUSH
45378: LD_STRING 
45380: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45381: LD_ADDR_OWVAR 35
45385: PUSH
45386: LD_INT 7
45388: NEG
45389: PPUSH
45390: LD_INT 7
45392: PPUSH
45393: CALL_OW 12
45397: ST_TO_ADDR
// animal := CreateHuman ;
45398: LD_ADDR_VAR 0 12
45402: PUSH
45403: CALL_OW 44
45407: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45408: LD_VAR 0 12
45412: PPUSH
45413: LD_VAR 0 8
45417: PPUSH
45418: LD_INT 0
45420: PPUSH
45421: CALL 51944 0 3
// end ;
45425: GO 45362
45427: POP
45428: POP
// if apemans then
45429: LD_VAR 0 3
45433: IFFALSE 45556
// for i = 1 to apemans do
45435: LD_ADDR_VAR 0 11
45439: PUSH
45440: DOUBLE
45441: LD_INT 1
45443: DEC
45444: ST_TO_ADDR
45445: LD_VAR 0 3
45449: PUSH
45450: FOR_TO
45451: IFFALSE 45554
// begin hc_class = class_apeman ;
45453: LD_ADDR_OWVAR 28
45457: PUSH
45458: LD_INT 12
45460: ST_TO_ADDR
// hc_gallery =  ;
45461: LD_ADDR_OWVAR 33
45465: PUSH
45466: LD_STRING 
45468: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
45469: LD_ADDR_OWVAR 35
45473: PUSH
45474: LD_INT 5
45476: NEG
45477: PPUSH
45478: LD_INT 5
45480: PPUSH
45481: CALL_OW 12
45485: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45486: LD_ADDR_OWVAR 31
45490: PUSH
45491: LD_INT 1
45493: PPUSH
45494: LD_INT 3
45496: PPUSH
45497: CALL_OW 12
45501: PUSH
45502: LD_INT 1
45504: PPUSH
45505: LD_INT 3
45507: PPUSH
45508: CALL_OW 12
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: LD_INT 0
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: ST_TO_ADDR
// animal := CreateHuman ;
45525: LD_ADDR_VAR 0 12
45529: PUSH
45530: CALL_OW 44
45534: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45535: LD_VAR 0 12
45539: PPUSH
45540: LD_VAR 0 8
45544: PPUSH
45545: LD_INT 0
45547: PPUSH
45548: CALL 51944 0 3
// end ;
45552: GO 45450
45554: POP
45555: POP
// if enchidnas then
45556: LD_VAR 0 4
45560: IFFALSE 45627
// for i = 1 to enchidnas do
45562: LD_ADDR_VAR 0 11
45566: PUSH
45567: DOUBLE
45568: LD_INT 1
45570: DEC
45571: ST_TO_ADDR
45572: LD_VAR 0 4
45576: PUSH
45577: FOR_TO
45578: IFFALSE 45625
// begin hc_class = 13 ;
45580: LD_ADDR_OWVAR 28
45584: PUSH
45585: LD_INT 13
45587: ST_TO_ADDR
// hc_gallery =  ;
45588: LD_ADDR_OWVAR 33
45592: PUSH
45593: LD_STRING 
45595: ST_TO_ADDR
// animal := CreateHuman ;
45596: LD_ADDR_VAR 0 12
45600: PUSH
45601: CALL_OW 44
45605: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45606: LD_VAR 0 12
45610: PPUSH
45611: LD_VAR 0 8
45615: PPUSH
45616: LD_INT 0
45618: PPUSH
45619: CALL 51944 0 3
// end ;
45623: GO 45577
45625: POP
45626: POP
// if fishes then
45627: LD_VAR 0 7
45631: IFFALSE 45698
// for i = 1 to fishes do
45633: LD_ADDR_VAR 0 11
45637: PUSH
45638: DOUBLE
45639: LD_INT 1
45641: DEC
45642: ST_TO_ADDR
45643: LD_VAR 0 7
45647: PUSH
45648: FOR_TO
45649: IFFALSE 45696
// begin hc_class = 20 ;
45651: LD_ADDR_OWVAR 28
45655: PUSH
45656: LD_INT 20
45658: ST_TO_ADDR
// hc_gallery =  ;
45659: LD_ADDR_OWVAR 33
45663: PUSH
45664: LD_STRING 
45666: ST_TO_ADDR
// animal := CreateHuman ;
45667: LD_ADDR_VAR 0 12
45671: PUSH
45672: CALL_OW 44
45676: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45677: LD_VAR 0 12
45681: PPUSH
45682: LD_VAR 0 9
45686: PPUSH
45687: LD_INT 0
45689: PPUSH
45690: CALL 51944 0 3
// end ;
45694: GO 45648
45696: POP
45697: POP
// end ;
45698: LD_VAR 0 10
45702: RET
// export function WantHeal ( sci , unit ) ; begin
45703: LD_INT 0
45705: PPUSH
// if GetTaskList ( sci ) > 0 then
45706: LD_VAR 0 1
45710: PPUSH
45711: CALL_OW 437
45715: PUSH
45716: LD_INT 0
45718: GREATER
45719: IFFALSE 45789
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45721: LD_VAR 0 1
45725: PPUSH
45726: CALL_OW 437
45730: PUSH
45731: LD_INT 1
45733: ARRAY
45734: PUSH
45735: LD_INT 1
45737: ARRAY
45738: PUSH
45739: LD_STRING l
45741: EQUAL
45742: PUSH
45743: LD_VAR 0 1
45747: PPUSH
45748: CALL_OW 437
45752: PUSH
45753: LD_INT 1
45755: ARRAY
45756: PUSH
45757: LD_INT 4
45759: ARRAY
45760: PUSH
45761: LD_VAR 0 2
45765: EQUAL
45766: AND
45767: IFFALSE 45779
// result := true else
45769: LD_ADDR_VAR 0 3
45773: PUSH
45774: LD_INT 1
45776: ST_TO_ADDR
45777: GO 45787
// result := false ;
45779: LD_ADDR_VAR 0 3
45783: PUSH
45784: LD_INT 0
45786: ST_TO_ADDR
// end else
45787: GO 45797
// result := false ;
45789: LD_ADDR_VAR 0 3
45793: PUSH
45794: LD_INT 0
45796: ST_TO_ADDR
// end ;
45797: LD_VAR 0 3
45801: RET
// export function HealTarget ( sci ) ; begin
45802: LD_INT 0
45804: PPUSH
// if not sci then
45805: LD_VAR 0 1
45809: NOT
45810: IFFALSE 45814
// exit ;
45812: GO 45879
// result := 0 ;
45814: LD_ADDR_VAR 0 2
45818: PUSH
45819: LD_INT 0
45821: ST_TO_ADDR
// if GetTaskList ( sci ) then
45822: LD_VAR 0 1
45826: PPUSH
45827: CALL_OW 437
45831: IFFALSE 45879
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45833: LD_VAR 0 1
45837: PPUSH
45838: CALL_OW 437
45842: PUSH
45843: LD_INT 1
45845: ARRAY
45846: PUSH
45847: LD_INT 1
45849: ARRAY
45850: PUSH
45851: LD_STRING l
45853: EQUAL
45854: IFFALSE 45879
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45856: LD_ADDR_VAR 0 2
45860: PUSH
45861: LD_VAR 0 1
45865: PPUSH
45866: CALL_OW 437
45870: PUSH
45871: LD_INT 1
45873: ARRAY
45874: PUSH
45875: LD_INT 4
45877: ARRAY
45878: ST_TO_ADDR
// end ;
45879: LD_VAR 0 2
45883: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
45884: LD_INT 0
45886: PPUSH
45887: PPUSH
45888: PPUSH
45889: PPUSH
45890: PPUSH
45891: PPUSH
45892: PPUSH
45893: PPUSH
45894: PPUSH
45895: PPUSH
45896: PPUSH
45897: PPUSH
45898: PPUSH
45899: PPUSH
45900: PPUSH
45901: PPUSH
45902: PPUSH
45903: PPUSH
45904: PPUSH
45905: PPUSH
45906: PPUSH
45907: PPUSH
45908: PPUSH
45909: PPUSH
45910: PPUSH
45911: PPUSH
45912: PPUSH
45913: PPUSH
45914: PPUSH
45915: PPUSH
45916: PPUSH
45917: PPUSH
45918: PPUSH
45919: PPUSH
// if not list then
45920: LD_VAR 0 1
45924: NOT
45925: IFFALSE 45929
// exit ;
45927: GO 50555
// base := list [ 1 ] ;
45929: LD_ADDR_VAR 0 3
45933: PUSH
45934: LD_VAR 0 1
45938: PUSH
45939: LD_INT 1
45941: ARRAY
45942: ST_TO_ADDR
// group := list [ 2 ] ;
45943: LD_ADDR_VAR 0 4
45947: PUSH
45948: LD_VAR 0 1
45952: PUSH
45953: LD_INT 2
45955: ARRAY
45956: ST_TO_ADDR
// path := list [ 3 ] ;
45957: LD_ADDR_VAR 0 5
45961: PUSH
45962: LD_VAR 0 1
45966: PUSH
45967: LD_INT 3
45969: ARRAY
45970: ST_TO_ADDR
// flags := list [ 4 ] ;
45971: LD_ADDR_VAR 0 6
45975: PUSH
45976: LD_VAR 0 1
45980: PUSH
45981: LD_INT 4
45983: ARRAY
45984: ST_TO_ADDR
// mined := [ ] ;
45985: LD_ADDR_VAR 0 27
45989: PUSH
45990: EMPTY
45991: ST_TO_ADDR
// bombed := [ ] ;
45992: LD_ADDR_VAR 0 28
45996: PUSH
45997: EMPTY
45998: ST_TO_ADDR
// healers := [ ] ;
45999: LD_ADDR_VAR 0 31
46003: PUSH
46004: EMPTY
46005: ST_TO_ADDR
// to_heal := [ ] ;
46006: LD_ADDR_VAR 0 30
46010: PUSH
46011: EMPTY
46012: ST_TO_ADDR
// repairs := [ ] ;
46013: LD_ADDR_VAR 0 33
46017: PUSH
46018: EMPTY
46019: ST_TO_ADDR
// to_repair := [ ] ;
46020: LD_ADDR_VAR 0 32
46024: PUSH
46025: EMPTY
46026: ST_TO_ADDR
// if not group or not path then
46027: LD_VAR 0 4
46031: NOT
46032: PUSH
46033: LD_VAR 0 5
46037: NOT
46038: OR
46039: IFFALSE 46043
// exit ;
46041: GO 50555
// side := GetSide ( group [ 1 ] ) ;
46043: LD_ADDR_VAR 0 35
46047: PUSH
46048: LD_VAR 0 4
46052: PUSH
46053: LD_INT 1
46055: ARRAY
46056: PPUSH
46057: CALL_OW 255
46061: ST_TO_ADDR
// if flags then
46062: LD_VAR 0 6
46066: IFFALSE 46210
// begin f_ignore_area := flags [ 1 ] ;
46068: LD_ADDR_VAR 0 17
46072: PUSH
46073: LD_VAR 0 6
46077: PUSH
46078: LD_INT 1
46080: ARRAY
46081: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
46082: LD_ADDR_VAR 0 18
46086: PUSH
46087: LD_VAR 0 6
46091: PUSH
46092: LD_INT 2
46094: ARRAY
46095: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
46096: LD_ADDR_VAR 0 19
46100: PUSH
46101: LD_VAR 0 6
46105: PUSH
46106: LD_INT 3
46108: ARRAY
46109: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
46110: LD_ADDR_VAR 0 20
46114: PUSH
46115: LD_VAR 0 6
46119: PUSH
46120: LD_INT 4
46122: ARRAY
46123: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
46124: LD_ADDR_VAR 0 21
46128: PUSH
46129: LD_VAR 0 6
46133: PUSH
46134: LD_INT 5
46136: ARRAY
46137: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
46138: LD_ADDR_VAR 0 22
46142: PUSH
46143: LD_VAR 0 6
46147: PUSH
46148: LD_INT 6
46150: ARRAY
46151: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
46152: LD_ADDR_VAR 0 23
46156: PUSH
46157: LD_VAR 0 6
46161: PUSH
46162: LD_INT 7
46164: ARRAY
46165: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
46166: LD_ADDR_VAR 0 24
46170: PUSH
46171: LD_VAR 0 6
46175: PUSH
46176: LD_INT 8
46178: ARRAY
46179: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
46180: LD_ADDR_VAR 0 25
46184: PUSH
46185: LD_VAR 0 6
46189: PUSH
46190: LD_INT 9
46192: ARRAY
46193: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
46194: LD_ADDR_VAR 0 26
46198: PUSH
46199: LD_VAR 0 6
46203: PUSH
46204: LD_INT 10
46206: ARRAY
46207: ST_TO_ADDR
// end else
46208: GO 46290
// begin f_ignore_area := false ;
46210: LD_ADDR_VAR 0 17
46214: PUSH
46215: LD_INT 0
46217: ST_TO_ADDR
// f_capture := false ;
46218: LD_ADDR_VAR 0 18
46222: PUSH
46223: LD_INT 0
46225: ST_TO_ADDR
// f_ignore_civ := false ;
46226: LD_ADDR_VAR 0 19
46230: PUSH
46231: LD_INT 0
46233: ST_TO_ADDR
// f_murder := false ;
46234: LD_ADDR_VAR 0 20
46238: PUSH
46239: LD_INT 0
46241: ST_TO_ADDR
// f_mines := false ;
46242: LD_ADDR_VAR 0 21
46246: PUSH
46247: LD_INT 0
46249: ST_TO_ADDR
// f_repair := false ;
46250: LD_ADDR_VAR 0 22
46254: PUSH
46255: LD_INT 0
46257: ST_TO_ADDR
// f_heal := false ;
46258: LD_ADDR_VAR 0 23
46262: PUSH
46263: LD_INT 0
46265: ST_TO_ADDR
// f_spacetime := false ;
46266: LD_ADDR_VAR 0 24
46270: PUSH
46271: LD_INT 0
46273: ST_TO_ADDR
// f_attack_depot := false ;
46274: LD_ADDR_VAR 0 25
46278: PUSH
46279: LD_INT 0
46281: ST_TO_ADDR
// f_crawl := false ;
46282: LD_ADDR_VAR 0 26
46286: PUSH
46287: LD_INT 0
46289: ST_TO_ADDR
// end ; if f_heal then
46290: LD_VAR 0 23
46294: IFFALSE 46321
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
46296: LD_ADDR_VAR 0 31
46300: PUSH
46301: LD_VAR 0 4
46305: PPUSH
46306: LD_INT 25
46308: PUSH
46309: LD_INT 4
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PPUSH
46316: CALL_OW 72
46320: ST_TO_ADDR
// if f_repair then
46321: LD_VAR 0 22
46325: IFFALSE 46352
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
46327: LD_ADDR_VAR 0 33
46331: PUSH
46332: LD_VAR 0 4
46336: PPUSH
46337: LD_INT 25
46339: PUSH
46340: LD_INT 3
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PPUSH
46347: CALL_OW 72
46351: ST_TO_ADDR
// units_path := [ ] ;
46352: LD_ADDR_VAR 0 16
46356: PUSH
46357: EMPTY
46358: ST_TO_ADDR
// for i = 1 to group do
46359: LD_ADDR_VAR 0 7
46363: PUSH
46364: DOUBLE
46365: LD_INT 1
46367: DEC
46368: ST_TO_ADDR
46369: LD_VAR 0 4
46373: PUSH
46374: FOR_TO
46375: IFFALSE 46404
// units_path := Replace ( units_path , i , path ) ;
46377: LD_ADDR_VAR 0 16
46381: PUSH
46382: LD_VAR 0 16
46386: PPUSH
46387: LD_VAR 0 7
46391: PPUSH
46392: LD_VAR 0 5
46396: PPUSH
46397: CALL_OW 1
46401: ST_TO_ADDR
46402: GO 46374
46404: POP
46405: POP
// repeat for i = group downto 1 do
46406: LD_ADDR_VAR 0 7
46410: PUSH
46411: DOUBLE
46412: LD_VAR 0 4
46416: INC
46417: ST_TO_ADDR
46418: LD_INT 1
46420: PUSH
46421: FOR_DOWNTO
46422: IFFALSE 50518
// begin wait ( 5 ) ;
46424: LD_INT 5
46426: PPUSH
46427: CALL_OW 67
// tmp := [ ] ;
46431: LD_ADDR_VAR 0 14
46435: PUSH
46436: EMPTY
46437: ST_TO_ADDR
// attacking := false ;
46438: LD_ADDR_VAR 0 29
46442: PUSH
46443: LD_INT 0
46445: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
46446: LD_VAR 0 4
46450: PUSH
46451: LD_VAR 0 7
46455: ARRAY
46456: PPUSH
46457: CALL_OW 301
46461: PUSH
46462: LD_VAR 0 4
46466: PUSH
46467: LD_VAR 0 7
46471: ARRAY
46472: NOT
46473: OR
46474: IFFALSE 46583
// begin if GetType ( group [ i ] ) = unit_human then
46476: LD_VAR 0 4
46480: PUSH
46481: LD_VAR 0 7
46485: ARRAY
46486: PPUSH
46487: CALL_OW 247
46491: PUSH
46492: LD_INT 1
46494: EQUAL
46495: IFFALSE 46541
// begin to_heal := to_heal diff group [ i ] ;
46497: LD_ADDR_VAR 0 30
46501: PUSH
46502: LD_VAR 0 30
46506: PUSH
46507: LD_VAR 0 4
46511: PUSH
46512: LD_VAR 0 7
46516: ARRAY
46517: DIFF
46518: ST_TO_ADDR
// healers := healers diff group [ i ] ;
46519: LD_ADDR_VAR 0 31
46523: PUSH
46524: LD_VAR 0 31
46528: PUSH
46529: LD_VAR 0 4
46533: PUSH
46534: LD_VAR 0 7
46538: ARRAY
46539: DIFF
46540: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
46541: LD_ADDR_VAR 0 4
46545: PUSH
46546: LD_VAR 0 4
46550: PPUSH
46551: LD_VAR 0 7
46555: PPUSH
46556: CALL_OW 3
46560: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
46561: LD_ADDR_VAR 0 16
46565: PUSH
46566: LD_VAR 0 16
46570: PPUSH
46571: LD_VAR 0 7
46575: PPUSH
46576: CALL_OW 3
46580: ST_TO_ADDR
// continue ;
46581: GO 46421
// end ; if f_repair then
46583: LD_VAR 0 22
46587: IFFALSE 47076
// begin if GetType ( group [ i ] ) = unit_vehicle then
46589: LD_VAR 0 4
46593: PUSH
46594: LD_VAR 0 7
46598: ARRAY
46599: PPUSH
46600: CALL_OW 247
46604: PUSH
46605: LD_INT 2
46607: EQUAL
46608: IFFALSE 46798
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
46610: LD_VAR 0 4
46614: PUSH
46615: LD_VAR 0 7
46619: ARRAY
46620: PPUSH
46621: CALL_OW 256
46625: PUSH
46626: LD_INT 700
46628: LESS
46629: PUSH
46630: LD_VAR 0 4
46634: PUSH
46635: LD_VAR 0 7
46639: ARRAY
46640: PUSH
46641: LD_VAR 0 32
46645: IN
46646: NOT
46647: AND
46648: IFFALSE 46672
// to_repair := to_repair union group [ i ] ;
46650: LD_ADDR_VAR 0 32
46654: PUSH
46655: LD_VAR 0 32
46659: PUSH
46660: LD_VAR 0 4
46664: PUSH
46665: LD_VAR 0 7
46669: ARRAY
46670: UNION
46671: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
46672: LD_VAR 0 4
46676: PUSH
46677: LD_VAR 0 7
46681: ARRAY
46682: PPUSH
46683: CALL_OW 256
46687: PUSH
46688: LD_INT 1000
46690: EQUAL
46691: PUSH
46692: LD_VAR 0 4
46696: PUSH
46697: LD_VAR 0 7
46701: ARRAY
46702: PUSH
46703: LD_VAR 0 32
46707: IN
46708: AND
46709: IFFALSE 46733
// to_repair := to_repair diff group [ i ] ;
46711: LD_ADDR_VAR 0 32
46715: PUSH
46716: LD_VAR 0 32
46720: PUSH
46721: LD_VAR 0 4
46725: PUSH
46726: LD_VAR 0 7
46730: ARRAY
46731: DIFF
46732: ST_TO_ADDR
// if group [ i ] in to_repair then
46733: LD_VAR 0 4
46737: PUSH
46738: LD_VAR 0 7
46742: ARRAY
46743: PUSH
46744: LD_VAR 0 32
46748: IN
46749: IFFALSE 46796
// begin if not IsInArea ( group [ i ] , f_repair ) then
46751: LD_VAR 0 4
46755: PUSH
46756: LD_VAR 0 7
46760: ARRAY
46761: PPUSH
46762: LD_VAR 0 22
46766: PPUSH
46767: CALL_OW 308
46771: NOT
46772: IFFALSE 46794
// ComMoveToArea ( group [ i ] , f_repair ) ;
46774: LD_VAR 0 4
46778: PUSH
46779: LD_VAR 0 7
46783: ARRAY
46784: PPUSH
46785: LD_VAR 0 22
46789: PPUSH
46790: CALL_OW 113
// continue ;
46794: GO 46421
// end ; end else
46796: GO 47076
// if group [ i ] in repairs then
46798: LD_VAR 0 4
46802: PUSH
46803: LD_VAR 0 7
46807: ARRAY
46808: PUSH
46809: LD_VAR 0 33
46813: IN
46814: IFFALSE 47076
// begin if IsInUnit ( group [ i ] ) then
46816: LD_VAR 0 4
46820: PUSH
46821: LD_VAR 0 7
46825: ARRAY
46826: PPUSH
46827: CALL_OW 310
46831: IFFALSE 46899
// begin z := IsInUnit ( group [ i ] ) ;
46833: LD_ADDR_VAR 0 13
46837: PUSH
46838: LD_VAR 0 4
46842: PUSH
46843: LD_VAR 0 7
46847: ARRAY
46848: PPUSH
46849: CALL_OW 310
46853: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
46854: LD_VAR 0 13
46858: PUSH
46859: LD_VAR 0 32
46863: IN
46864: PUSH
46865: LD_VAR 0 13
46869: PPUSH
46870: LD_VAR 0 22
46874: PPUSH
46875: CALL_OW 308
46879: AND
46880: IFFALSE 46897
// ComExitVehicle ( group [ i ] ) ;
46882: LD_VAR 0 4
46886: PUSH
46887: LD_VAR 0 7
46891: ARRAY
46892: PPUSH
46893: CALL_OW 121
// end else
46897: GO 47076
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
46899: LD_ADDR_VAR 0 13
46903: PUSH
46904: LD_VAR 0 4
46908: PPUSH
46909: LD_INT 95
46911: PUSH
46912: LD_VAR 0 22
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 58
46923: PUSH
46924: EMPTY
46925: LIST
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PPUSH
46931: CALL_OW 72
46935: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
46936: LD_VAR 0 4
46940: PUSH
46941: LD_VAR 0 7
46945: ARRAY
46946: PPUSH
46947: CALL_OW 314
46951: NOT
46952: IFFALSE 47074
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
46954: LD_ADDR_VAR 0 10
46958: PUSH
46959: LD_VAR 0 13
46963: PPUSH
46964: LD_VAR 0 4
46968: PUSH
46969: LD_VAR 0 7
46973: ARRAY
46974: PPUSH
46975: CALL_OW 74
46979: ST_TO_ADDR
// if not x then
46980: LD_VAR 0 10
46984: NOT
46985: IFFALSE 46989
// continue ;
46987: GO 46421
// if GetLives ( x ) < 1000 then
46989: LD_VAR 0 10
46993: PPUSH
46994: CALL_OW 256
46998: PUSH
46999: LD_INT 1000
47001: LESS
47002: IFFALSE 47026
// ComRepairVehicle ( group [ i ] , x ) else
47004: LD_VAR 0 4
47008: PUSH
47009: LD_VAR 0 7
47013: ARRAY
47014: PPUSH
47015: LD_VAR 0 10
47019: PPUSH
47020: CALL_OW 129
47024: GO 47074
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
47026: LD_VAR 0 23
47030: PUSH
47031: LD_VAR 0 4
47035: PUSH
47036: LD_VAR 0 7
47040: ARRAY
47041: PPUSH
47042: CALL_OW 256
47046: PUSH
47047: LD_INT 1000
47049: LESS
47050: AND
47051: NOT
47052: IFFALSE 47074
// ComEnterUnit ( group [ i ] , x ) ;
47054: LD_VAR 0 4
47058: PUSH
47059: LD_VAR 0 7
47063: ARRAY
47064: PPUSH
47065: LD_VAR 0 10
47069: PPUSH
47070: CALL_OW 120
// end ; continue ;
47074: GO 46421
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
47076: LD_VAR 0 23
47080: PUSH
47081: LD_VAR 0 4
47085: PUSH
47086: LD_VAR 0 7
47090: ARRAY
47091: PPUSH
47092: CALL_OW 247
47096: PUSH
47097: LD_INT 1
47099: EQUAL
47100: AND
47101: IFFALSE 47579
// begin if group [ i ] in healers then
47103: LD_VAR 0 4
47107: PUSH
47108: LD_VAR 0 7
47112: ARRAY
47113: PUSH
47114: LD_VAR 0 31
47118: IN
47119: IFFALSE 47392
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
47121: LD_VAR 0 4
47125: PUSH
47126: LD_VAR 0 7
47130: ARRAY
47131: PPUSH
47132: LD_VAR 0 23
47136: PPUSH
47137: CALL_OW 308
47141: NOT
47142: PUSH
47143: LD_VAR 0 4
47147: PUSH
47148: LD_VAR 0 7
47152: ARRAY
47153: PPUSH
47154: CALL_OW 314
47158: NOT
47159: AND
47160: IFFALSE 47184
// ComMoveToArea ( group [ i ] , f_heal ) else
47162: LD_VAR 0 4
47166: PUSH
47167: LD_VAR 0 7
47171: ARRAY
47172: PPUSH
47173: LD_VAR 0 23
47177: PPUSH
47178: CALL_OW 113
47182: GO 47390
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
47184: LD_VAR 0 4
47188: PUSH
47189: LD_VAR 0 7
47193: ARRAY
47194: PPUSH
47195: CALL 45802 0 1
47199: PPUSH
47200: CALL_OW 256
47204: PUSH
47205: LD_INT 1000
47207: EQUAL
47208: IFFALSE 47227
// ComStop ( group [ i ] ) else
47210: LD_VAR 0 4
47214: PUSH
47215: LD_VAR 0 7
47219: ARRAY
47220: PPUSH
47221: CALL_OW 141
47225: GO 47390
// if not HasTask ( group [ i ] ) and to_heal then
47227: LD_VAR 0 4
47231: PUSH
47232: LD_VAR 0 7
47236: ARRAY
47237: PPUSH
47238: CALL_OW 314
47242: NOT
47243: PUSH
47244: LD_VAR 0 30
47248: AND
47249: IFFALSE 47390
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
47251: LD_ADDR_VAR 0 13
47255: PUSH
47256: LD_VAR 0 30
47260: PPUSH
47261: LD_INT 3
47263: PUSH
47264: LD_INT 54
47266: PUSH
47267: EMPTY
47268: LIST
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PPUSH
47274: CALL_OW 72
47278: PPUSH
47279: LD_VAR 0 4
47283: PUSH
47284: LD_VAR 0 7
47288: ARRAY
47289: PPUSH
47290: CALL_OW 74
47294: ST_TO_ADDR
// if z then
47295: LD_VAR 0 13
47299: IFFALSE 47390
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
47301: LD_INT 91
47303: PUSH
47304: LD_VAR 0 13
47308: PUSH
47309: LD_INT 10
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 81
47319: PUSH
47320: LD_VAR 0 13
47324: PPUSH
47325: CALL_OW 255
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PPUSH
47338: CALL_OW 69
47342: PUSH
47343: LD_INT 0
47345: EQUAL
47346: IFFALSE 47370
// ComHeal ( group [ i ] , z ) else
47348: LD_VAR 0 4
47352: PUSH
47353: LD_VAR 0 7
47357: ARRAY
47358: PPUSH
47359: LD_VAR 0 13
47363: PPUSH
47364: CALL_OW 128
47368: GO 47390
// ComMoveToArea ( group [ i ] , f_heal ) ;
47370: LD_VAR 0 4
47374: PUSH
47375: LD_VAR 0 7
47379: ARRAY
47380: PPUSH
47381: LD_VAR 0 23
47385: PPUSH
47386: CALL_OW 113
// end ; continue ;
47390: GO 46421
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
47392: LD_VAR 0 4
47396: PUSH
47397: LD_VAR 0 7
47401: ARRAY
47402: PPUSH
47403: CALL_OW 256
47407: PUSH
47408: LD_INT 700
47410: LESS
47411: PUSH
47412: LD_VAR 0 4
47416: PUSH
47417: LD_VAR 0 7
47421: ARRAY
47422: PUSH
47423: LD_VAR 0 30
47427: IN
47428: NOT
47429: AND
47430: IFFALSE 47454
// to_heal := to_heal union group [ i ] ;
47432: LD_ADDR_VAR 0 30
47436: PUSH
47437: LD_VAR 0 30
47441: PUSH
47442: LD_VAR 0 4
47446: PUSH
47447: LD_VAR 0 7
47451: ARRAY
47452: UNION
47453: ST_TO_ADDR
// if group [ i ] in to_heal then
47454: LD_VAR 0 4
47458: PUSH
47459: LD_VAR 0 7
47463: ARRAY
47464: PUSH
47465: LD_VAR 0 30
47469: IN
47470: IFFALSE 47579
// begin if GetLives ( group [ i ] ) = 1000 then
47472: LD_VAR 0 4
47476: PUSH
47477: LD_VAR 0 7
47481: ARRAY
47482: PPUSH
47483: CALL_OW 256
47487: PUSH
47488: LD_INT 1000
47490: EQUAL
47491: IFFALSE 47517
// to_heal := to_heal diff group [ i ] else
47493: LD_ADDR_VAR 0 30
47497: PUSH
47498: LD_VAR 0 30
47502: PUSH
47503: LD_VAR 0 4
47507: PUSH
47508: LD_VAR 0 7
47512: ARRAY
47513: DIFF
47514: ST_TO_ADDR
47515: GO 47579
// begin if not IsInArea ( group [ i ] , to_heal ) then
47517: LD_VAR 0 4
47521: PUSH
47522: LD_VAR 0 7
47526: ARRAY
47527: PPUSH
47528: LD_VAR 0 30
47532: PPUSH
47533: CALL_OW 308
47537: NOT
47538: IFFALSE 47562
// ComMoveToArea ( group [ i ] , f_heal ) else
47540: LD_VAR 0 4
47544: PUSH
47545: LD_VAR 0 7
47549: ARRAY
47550: PPUSH
47551: LD_VAR 0 23
47555: PPUSH
47556: CALL_OW 113
47560: GO 47577
// ComHold ( group [ i ] ) ;
47562: LD_VAR 0 4
47566: PUSH
47567: LD_VAR 0 7
47571: ARRAY
47572: PPUSH
47573: CALL_OW 140
// continue ;
47577: GO 46421
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
47579: LD_VAR 0 4
47583: PUSH
47584: LD_VAR 0 7
47588: ARRAY
47589: PPUSH
47590: LD_INT 10
47592: PPUSH
47593: CALL 44199 0 2
47597: NOT
47598: PUSH
47599: LD_VAR 0 16
47603: PUSH
47604: LD_VAR 0 7
47608: ARRAY
47609: PUSH
47610: EMPTY
47611: EQUAL
47612: NOT
47613: AND
47614: IFFALSE 47880
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
47616: LD_VAR 0 4
47620: PUSH
47621: LD_VAR 0 7
47625: ARRAY
47626: PPUSH
47627: CALL_OW 262
47631: PUSH
47632: LD_INT 1
47634: PUSH
47635: LD_INT 2
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: IN
47642: IFFALSE 47683
// if GetFuel ( group [ i ] ) < 10 then
47644: LD_VAR 0 4
47648: PUSH
47649: LD_VAR 0 7
47653: ARRAY
47654: PPUSH
47655: CALL_OW 261
47659: PUSH
47660: LD_INT 10
47662: LESS
47663: IFFALSE 47683
// SetFuel ( group [ i ] , 12 ) ;
47665: LD_VAR 0 4
47669: PUSH
47670: LD_VAR 0 7
47674: ARRAY
47675: PPUSH
47676: LD_INT 12
47678: PPUSH
47679: CALL_OW 240
// if units_path [ i ] then
47683: LD_VAR 0 16
47687: PUSH
47688: LD_VAR 0 7
47692: ARRAY
47693: IFFALSE 47878
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
47695: LD_VAR 0 4
47699: PUSH
47700: LD_VAR 0 7
47704: ARRAY
47705: PPUSH
47706: LD_VAR 0 16
47710: PUSH
47711: LD_VAR 0 7
47715: ARRAY
47716: PUSH
47717: LD_INT 1
47719: ARRAY
47720: PUSH
47721: LD_INT 1
47723: ARRAY
47724: PPUSH
47725: LD_VAR 0 16
47729: PUSH
47730: LD_VAR 0 7
47734: ARRAY
47735: PUSH
47736: LD_INT 1
47738: ARRAY
47739: PUSH
47740: LD_INT 2
47742: ARRAY
47743: PPUSH
47744: CALL_OW 297
47748: PUSH
47749: LD_INT 6
47751: GREATER
47752: IFFALSE 47827
// begin if not HasTask ( group [ i ] ) then
47754: LD_VAR 0 4
47758: PUSH
47759: LD_VAR 0 7
47763: ARRAY
47764: PPUSH
47765: CALL_OW 314
47769: NOT
47770: IFFALSE 47825
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
47772: LD_VAR 0 4
47776: PUSH
47777: LD_VAR 0 7
47781: ARRAY
47782: PPUSH
47783: LD_VAR 0 16
47787: PUSH
47788: LD_VAR 0 7
47792: ARRAY
47793: PUSH
47794: LD_INT 1
47796: ARRAY
47797: PUSH
47798: LD_INT 1
47800: ARRAY
47801: PPUSH
47802: LD_VAR 0 16
47806: PUSH
47807: LD_VAR 0 7
47811: ARRAY
47812: PUSH
47813: LD_INT 1
47815: ARRAY
47816: PUSH
47817: LD_INT 2
47819: ARRAY
47820: PPUSH
47821: CALL_OW 114
// end else
47825: GO 47878
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
47827: LD_ADDR_VAR 0 15
47831: PUSH
47832: LD_VAR 0 16
47836: PUSH
47837: LD_VAR 0 7
47841: ARRAY
47842: PPUSH
47843: LD_INT 1
47845: PPUSH
47846: CALL_OW 3
47850: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
47851: LD_ADDR_VAR 0 16
47855: PUSH
47856: LD_VAR 0 16
47860: PPUSH
47861: LD_VAR 0 7
47865: PPUSH
47866: LD_VAR 0 15
47870: PPUSH
47871: CALL_OW 1
47875: ST_TO_ADDR
// continue ;
47876: GO 46421
// end ; end ; end else
47878: GO 50516
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
47880: LD_ADDR_VAR 0 14
47884: PUSH
47885: LD_INT 81
47887: PUSH
47888: LD_VAR 0 4
47892: PUSH
47893: LD_VAR 0 7
47897: ARRAY
47898: PPUSH
47899: CALL_OW 255
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PPUSH
47908: CALL_OW 69
47912: ST_TO_ADDR
// if not tmp then
47913: LD_VAR 0 14
47917: NOT
47918: IFFALSE 47922
// continue ;
47920: GO 46421
// if f_ignore_area then
47922: LD_VAR 0 17
47926: IFFALSE 48014
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
47928: LD_ADDR_VAR 0 15
47932: PUSH
47933: LD_VAR 0 14
47937: PPUSH
47938: LD_INT 3
47940: PUSH
47941: LD_INT 92
47943: PUSH
47944: LD_VAR 0 17
47948: PUSH
47949: LD_INT 1
47951: ARRAY
47952: PUSH
47953: LD_VAR 0 17
47957: PUSH
47958: LD_INT 2
47960: ARRAY
47961: PUSH
47962: LD_VAR 0 17
47966: PUSH
47967: LD_INT 3
47969: ARRAY
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PPUSH
47981: CALL_OW 72
47985: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
47986: LD_VAR 0 14
47990: PUSH
47991: LD_VAR 0 15
47995: DIFF
47996: IFFALSE 48014
// tmp := tmp diff tmp2 ;
47998: LD_ADDR_VAR 0 14
48002: PUSH
48003: LD_VAR 0 14
48007: PUSH
48008: LD_VAR 0 15
48012: DIFF
48013: ST_TO_ADDR
// end ; if not f_murder then
48014: LD_VAR 0 20
48018: NOT
48019: IFFALSE 48077
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
48021: LD_ADDR_VAR 0 15
48025: PUSH
48026: LD_VAR 0 14
48030: PPUSH
48031: LD_INT 3
48033: PUSH
48034: LD_INT 50
48036: PUSH
48037: EMPTY
48038: LIST
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PPUSH
48044: CALL_OW 72
48048: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
48049: LD_VAR 0 14
48053: PUSH
48054: LD_VAR 0 15
48058: DIFF
48059: IFFALSE 48077
// tmp := tmp diff tmp2 ;
48061: LD_ADDR_VAR 0 14
48065: PUSH
48066: LD_VAR 0 14
48070: PUSH
48071: LD_VAR 0 15
48075: DIFF
48076: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
48077: LD_ADDR_VAR 0 14
48081: PUSH
48082: LD_VAR 0 4
48086: PUSH
48087: LD_VAR 0 7
48091: ARRAY
48092: PPUSH
48093: LD_VAR 0 14
48097: PPUSH
48098: LD_INT 1
48100: PPUSH
48101: LD_INT 1
48103: PPUSH
48104: CALL 17848 0 4
48108: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
48109: LD_VAR 0 4
48113: PUSH
48114: LD_VAR 0 7
48118: ARRAY
48119: PPUSH
48120: CALL_OW 257
48124: PUSH
48125: LD_INT 1
48127: EQUAL
48128: IFFALSE 48576
// begin if WantPlant ( group [ i ] ) then
48130: LD_VAR 0 4
48134: PUSH
48135: LD_VAR 0 7
48139: ARRAY
48140: PPUSH
48141: CALL 17349 0 1
48145: IFFALSE 48149
// continue ;
48147: GO 46421
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
48149: LD_VAR 0 18
48153: PUSH
48154: LD_VAR 0 4
48158: PUSH
48159: LD_VAR 0 7
48163: ARRAY
48164: PPUSH
48165: CALL_OW 310
48169: NOT
48170: AND
48171: PUSH
48172: LD_VAR 0 14
48176: PUSH
48177: LD_INT 1
48179: ARRAY
48180: PUSH
48181: LD_VAR 0 14
48185: PPUSH
48186: LD_INT 21
48188: PUSH
48189: LD_INT 2
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 58
48198: PUSH
48199: EMPTY
48200: LIST
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PPUSH
48206: CALL_OW 72
48210: IN
48211: AND
48212: IFFALSE 48248
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
48214: LD_VAR 0 4
48218: PUSH
48219: LD_VAR 0 7
48223: ARRAY
48224: PPUSH
48225: LD_VAR 0 14
48229: PUSH
48230: LD_INT 1
48232: ARRAY
48233: PPUSH
48234: CALL_OW 120
// attacking := true ;
48238: LD_ADDR_VAR 0 29
48242: PUSH
48243: LD_INT 1
48245: ST_TO_ADDR
// continue ;
48246: GO 46421
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
48248: LD_VAR 0 26
48252: PUSH
48253: LD_VAR 0 4
48257: PUSH
48258: LD_VAR 0 7
48262: ARRAY
48263: PPUSH
48264: CALL_OW 257
48268: PUSH
48269: LD_INT 1
48271: EQUAL
48272: AND
48273: PUSH
48274: LD_VAR 0 4
48278: PUSH
48279: LD_VAR 0 7
48283: ARRAY
48284: PPUSH
48285: CALL_OW 256
48289: PUSH
48290: LD_INT 800
48292: LESS
48293: AND
48294: PUSH
48295: LD_VAR 0 4
48299: PUSH
48300: LD_VAR 0 7
48304: ARRAY
48305: PPUSH
48306: CALL_OW 318
48310: NOT
48311: AND
48312: IFFALSE 48329
// ComCrawl ( group [ i ] ) ;
48314: LD_VAR 0 4
48318: PUSH
48319: LD_VAR 0 7
48323: ARRAY
48324: PPUSH
48325: CALL_OW 137
// if f_mines then
48329: LD_VAR 0 21
48333: IFFALSE 48576
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
48335: LD_VAR 0 14
48339: PUSH
48340: LD_INT 1
48342: ARRAY
48343: PPUSH
48344: CALL_OW 247
48348: PUSH
48349: LD_INT 3
48351: EQUAL
48352: PUSH
48353: LD_VAR 0 14
48357: PUSH
48358: LD_INT 1
48360: ARRAY
48361: PUSH
48362: LD_VAR 0 27
48366: IN
48367: NOT
48368: AND
48369: IFFALSE 48576
// begin x := GetX ( tmp [ 1 ] ) ;
48371: LD_ADDR_VAR 0 10
48375: PUSH
48376: LD_VAR 0 14
48380: PUSH
48381: LD_INT 1
48383: ARRAY
48384: PPUSH
48385: CALL_OW 250
48389: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
48390: LD_ADDR_VAR 0 11
48394: PUSH
48395: LD_VAR 0 14
48399: PUSH
48400: LD_INT 1
48402: ARRAY
48403: PPUSH
48404: CALL_OW 251
48408: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
48409: LD_ADDR_VAR 0 12
48413: PUSH
48414: LD_VAR 0 4
48418: PUSH
48419: LD_VAR 0 7
48423: ARRAY
48424: PPUSH
48425: CALL 44284 0 1
48429: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
48430: LD_VAR 0 4
48434: PUSH
48435: LD_VAR 0 7
48439: ARRAY
48440: PPUSH
48441: LD_VAR 0 10
48445: PPUSH
48446: LD_VAR 0 11
48450: PPUSH
48451: LD_VAR 0 14
48455: PUSH
48456: LD_INT 1
48458: ARRAY
48459: PPUSH
48460: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
48464: LD_VAR 0 4
48468: PUSH
48469: LD_VAR 0 7
48473: ARRAY
48474: PPUSH
48475: LD_VAR 0 10
48479: PPUSH
48480: LD_VAR 0 12
48484: PPUSH
48485: LD_INT 7
48487: PPUSH
48488: CALL_OW 272
48492: PPUSH
48493: LD_VAR 0 11
48497: PPUSH
48498: LD_VAR 0 12
48502: PPUSH
48503: LD_INT 7
48505: PPUSH
48506: CALL_OW 273
48510: PPUSH
48511: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
48515: LD_VAR 0 4
48519: PUSH
48520: LD_VAR 0 7
48524: ARRAY
48525: PPUSH
48526: LD_INT 71
48528: PPUSH
48529: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
48533: LD_ADDR_VAR 0 27
48537: PUSH
48538: LD_VAR 0 27
48542: PPUSH
48543: LD_VAR 0 27
48547: PUSH
48548: LD_INT 1
48550: PLUS
48551: PPUSH
48552: LD_VAR 0 14
48556: PUSH
48557: LD_INT 1
48559: ARRAY
48560: PPUSH
48561: CALL_OW 1
48565: ST_TO_ADDR
// attacking := true ;
48566: LD_ADDR_VAR 0 29
48570: PUSH
48571: LD_INT 1
48573: ST_TO_ADDR
// continue ;
48574: GO 46421
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
48576: LD_VAR 0 4
48580: PUSH
48581: LD_VAR 0 7
48585: ARRAY
48586: PPUSH
48587: CALL_OW 257
48591: PUSH
48592: LD_INT 17
48594: EQUAL
48595: PUSH
48596: LD_VAR 0 4
48600: PUSH
48601: LD_VAR 0 7
48605: ARRAY
48606: PPUSH
48607: CALL_OW 110
48611: PUSH
48612: LD_INT 71
48614: EQUAL
48615: NOT
48616: AND
48617: IFFALSE 48763
// begin attacking := false ;
48619: LD_ADDR_VAR 0 29
48623: PUSH
48624: LD_INT 0
48626: ST_TO_ADDR
// k := 5 ;
48627: LD_ADDR_VAR 0 9
48631: PUSH
48632: LD_INT 5
48634: ST_TO_ADDR
// if tmp < k then
48635: LD_VAR 0 14
48639: PUSH
48640: LD_VAR 0 9
48644: LESS
48645: IFFALSE 48657
// k := tmp ;
48647: LD_ADDR_VAR 0 9
48651: PUSH
48652: LD_VAR 0 14
48656: ST_TO_ADDR
// for j = 1 to k do
48657: LD_ADDR_VAR 0 8
48661: PUSH
48662: DOUBLE
48663: LD_INT 1
48665: DEC
48666: ST_TO_ADDR
48667: LD_VAR 0 9
48671: PUSH
48672: FOR_TO
48673: IFFALSE 48761
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
48675: LD_VAR 0 14
48679: PUSH
48680: LD_VAR 0 8
48684: ARRAY
48685: PUSH
48686: LD_VAR 0 14
48690: PPUSH
48691: LD_INT 58
48693: PUSH
48694: EMPTY
48695: LIST
48696: PPUSH
48697: CALL_OW 72
48701: IN
48702: NOT
48703: IFFALSE 48759
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
48705: LD_VAR 0 4
48709: PUSH
48710: LD_VAR 0 7
48714: ARRAY
48715: PPUSH
48716: LD_VAR 0 14
48720: PUSH
48721: LD_VAR 0 8
48725: ARRAY
48726: PPUSH
48727: CALL_OW 115
// attacking := true ;
48731: LD_ADDR_VAR 0 29
48735: PUSH
48736: LD_INT 1
48738: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
48739: LD_VAR 0 4
48743: PUSH
48744: LD_VAR 0 7
48748: ARRAY
48749: PPUSH
48750: LD_INT 71
48752: PPUSH
48753: CALL_OW 109
// continue ;
48757: GO 48672
// end ; end ;
48759: GO 48672
48761: POP
48762: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
48763: LD_VAR 0 4
48767: PUSH
48768: LD_VAR 0 7
48772: ARRAY
48773: PPUSH
48774: CALL_OW 257
48778: PUSH
48779: LD_INT 8
48781: EQUAL
48782: PUSH
48783: LD_VAR 0 4
48787: PUSH
48788: LD_VAR 0 7
48792: ARRAY
48793: PPUSH
48794: CALL_OW 264
48798: PUSH
48799: LD_INT 28
48801: PUSH
48802: LD_INT 45
48804: PUSH
48805: LD_INT 7
48807: PUSH
48808: LD_INT 47
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: IN
48817: OR
48818: IFFALSE 49048
// begin attacking := false ;
48820: LD_ADDR_VAR 0 29
48824: PUSH
48825: LD_INT 0
48827: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
48828: LD_VAR 0 14
48832: PUSH
48833: LD_INT 1
48835: ARRAY
48836: PPUSH
48837: CALL_OW 266
48841: PUSH
48842: LD_INT 32
48844: PUSH
48845: LD_INT 31
48847: PUSH
48848: LD_INT 33
48850: PUSH
48851: LD_INT 4
48853: PUSH
48854: LD_INT 5
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: IN
48864: IFFALSE 49048
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
48866: LD_ADDR_VAR 0 9
48870: PUSH
48871: LD_VAR 0 14
48875: PUSH
48876: LD_INT 1
48878: ARRAY
48879: PPUSH
48880: CALL_OW 266
48884: PPUSH
48885: LD_VAR 0 14
48889: PUSH
48890: LD_INT 1
48892: ARRAY
48893: PPUSH
48894: CALL_OW 250
48898: PPUSH
48899: LD_VAR 0 14
48903: PUSH
48904: LD_INT 1
48906: ARRAY
48907: PPUSH
48908: CALL_OW 251
48912: PPUSH
48913: LD_VAR 0 14
48917: PUSH
48918: LD_INT 1
48920: ARRAY
48921: PPUSH
48922: CALL_OW 254
48926: PPUSH
48927: LD_VAR 0 14
48931: PUSH
48932: LD_INT 1
48934: ARRAY
48935: PPUSH
48936: CALL_OW 248
48940: PPUSH
48941: LD_INT 0
48943: PPUSH
48944: CALL 25660 0 6
48948: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
48949: LD_ADDR_VAR 0 8
48953: PUSH
48954: LD_VAR 0 4
48958: PUSH
48959: LD_VAR 0 7
48963: ARRAY
48964: PPUSH
48965: LD_VAR 0 9
48969: PPUSH
48970: CALL 44347 0 2
48974: ST_TO_ADDR
// if j then
48975: LD_VAR 0 8
48979: IFFALSE 49048
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
48981: LD_VAR 0 8
48985: PUSH
48986: LD_INT 1
48988: ARRAY
48989: PPUSH
48990: LD_VAR 0 8
48994: PUSH
48995: LD_INT 2
48997: ARRAY
48998: PPUSH
48999: CALL_OW 488
49003: IFFALSE 49048
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
49005: LD_VAR 0 4
49009: PUSH
49010: LD_VAR 0 7
49014: ARRAY
49015: PPUSH
49016: LD_VAR 0 8
49020: PUSH
49021: LD_INT 1
49023: ARRAY
49024: PPUSH
49025: LD_VAR 0 8
49029: PUSH
49030: LD_INT 2
49032: ARRAY
49033: PPUSH
49034: CALL_OW 116
// attacking := true ;
49038: LD_ADDR_VAR 0 29
49042: PUSH
49043: LD_INT 1
49045: ST_TO_ADDR
// continue ;
49046: GO 46421
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
49048: LD_VAR 0 4
49052: PUSH
49053: LD_VAR 0 7
49057: ARRAY
49058: PPUSH
49059: CALL_OW 265
49063: PUSH
49064: LD_INT 11
49066: EQUAL
49067: IFFALSE 49345
// begin k := 10 ;
49069: LD_ADDR_VAR 0 9
49073: PUSH
49074: LD_INT 10
49076: ST_TO_ADDR
// x := 0 ;
49077: LD_ADDR_VAR 0 10
49081: PUSH
49082: LD_INT 0
49084: ST_TO_ADDR
// if tmp < k then
49085: LD_VAR 0 14
49089: PUSH
49090: LD_VAR 0 9
49094: LESS
49095: IFFALSE 49107
// k := tmp ;
49097: LD_ADDR_VAR 0 9
49101: PUSH
49102: LD_VAR 0 14
49106: ST_TO_ADDR
// for j = k downto 1 do
49107: LD_ADDR_VAR 0 8
49111: PUSH
49112: DOUBLE
49113: LD_VAR 0 9
49117: INC
49118: ST_TO_ADDR
49119: LD_INT 1
49121: PUSH
49122: FOR_DOWNTO
49123: IFFALSE 49198
// begin if GetType ( tmp [ j ] ) = unit_human then
49125: LD_VAR 0 14
49129: PUSH
49130: LD_VAR 0 8
49134: ARRAY
49135: PPUSH
49136: CALL_OW 247
49140: PUSH
49141: LD_INT 1
49143: EQUAL
49144: IFFALSE 49196
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
49146: LD_VAR 0 4
49150: PUSH
49151: LD_VAR 0 7
49155: ARRAY
49156: PPUSH
49157: LD_VAR 0 14
49161: PUSH
49162: LD_VAR 0 8
49166: ARRAY
49167: PPUSH
49168: CALL 44618 0 2
// x := tmp [ j ] ;
49172: LD_ADDR_VAR 0 10
49176: PUSH
49177: LD_VAR 0 14
49181: PUSH
49182: LD_VAR 0 8
49186: ARRAY
49187: ST_TO_ADDR
// attacking := true ;
49188: LD_ADDR_VAR 0 29
49192: PUSH
49193: LD_INT 1
49195: ST_TO_ADDR
// end ; end ;
49196: GO 49122
49198: POP
49199: POP
// if not x then
49200: LD_VAR 0 10
49204: NOT
49205: IFFALSE 49345
// begin attacking := true ;
49207: LD_ADDR_VAR 0 29
49211: PUSH
49212: LD_INT 1
49214: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
49215: LD_VAR 0 4
49219: PUSH
49220: LD_VAR 0 7
49224: ARRAY
49225: PPUSH
49226: CALL_OW 250
49230: PPUSH
49231: LD_VAR 0 4
49235: PUSH
49236: LD_VAR 0 7
49240: ARRAY
49241: PPUSH
49242: CALL_OW 251
49246: PPUSH
49247: CALL_OW 546
49251: PUSH
49252: LD_INT 2
49254: ARRAY
49255: PUSH
49256: LD_VAR 0 14
49260: PUSH
49261: LD_INT 1
49263: ARRAY
49264: PPUSH
49265: CALL_OW 250
49269: PPUSH
49270: LD_VAR 0 14
49274: PUSH
49275: LD_INT 1
49277: ARRAY
49278: PPUSH
49279: CALL_OW 251
49283: PPUSH
49284: CALL_OW 546
49288: PUSH
49289: LD_INT 2
49291: ARRAY
49292: EQUAL
49293: IFFALSE 49321
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
49295: LD_VAR 0 4
49299: PUSH
49300: LD_VAR 0 7
49304: ARRAY
49305: PPUSH
49306: LD_VAR 0 14
49310: PUSH
49311: LD_INT 1
49313: ARRAY
49314: PPUSH
49315: CALL 44618 0 2
49319: GO 49345
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
49321: LD_VAR 0 4
49325: PUSH
49326: LD_VAR 0 7
49330: ARRAY
49331: PPUSH
49332: LD_VAR 0 14
49336: PUSH
49337: LD_INT 1
49339: ARRAY
49340: PPUSH
49341: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
49345: LD_VAR 0 4
49349: PUSH
49350: LD_VAR 0 7
49354: ARRAY
49355: PPUSH
49356: CALL_OW 264
49360: PUSH
49361: LD_INT 29
49363: EQUAL
49364: IFFALSE 49730
// begin if WantsToAttack ( group [ i ] ) in bombed then
49366: LD_VAR 0 4
49370: PUSH
49371: LD_VAR 0 7
49375: ARRAY
49376: PPUSH
49377: CALL_OW 319
49381: PUSH
49382: LD_VAR 0 28
49386: IN
49387: IFFALSE 49391
// continue ;
49389: GO 46421
// k := 8 ;
49391: LD_ADDR_VAR 0 9
49395: PUSH
49396: LD_INT 8
49398: ST_TO_ADDR
// x := 0 ;
49399: LD_ADDR_VAR 0 10
49403: PUSH
49404: LD_INT 0
49406: ST_TO_ADDR
// if tmp < k then
49407: LD_VAR 0 14
49411: PUSH
49412: LD_VAR 0 9
49416: LESS
49417: IFFALSE 49429
// k := tmp ;
49419: LD_ADDR_VAR 0 9
49423: PUSH
49424: LD_VAR 0 14
49428: ST_TO_ADDR
// for j = 1 to k do
49429: LD_ADDR_VAR 0 8
49433: PUSH
49434: DOUBLE
49435: LD_INT 1
49437: DEC
49438: ST_TO_ADDR
49439: LD_VAR 0 9
49443: PUSH
49444: FOR_TO
49445: IFFALSE 49577
// begin if GetType ( tmp [ j ] ) = unit_building then
49447: LD_VAR 0 14
49451: PUSH
49452: LD_VAR 0 8
49456: ARRAY
49457: PPUSH
49458: CALL_OW 247
49462: PUSH
49463: LD_INT 3
49465: EQUAL
49466: IFFALSE 49575
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
49468: LD_VAR 0 14
49472: PUSH
49473: LD_VAR 0 8
49477: ARRAY
49478: PUSH
49479: LD_VAR 0 28
49483: IN
49484: NOT
49485: PUSH
49486: LD_VAR 0 14
49490: PUSH
49491: LD_VAR 0 8
49495: ARRAY
49496: PPUSH
49497: CALL_OW 313
49501: AND
49502: IFFALSE 49575
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
49504: LD_VAR 0 4
49508: PUSH
49509: LD_VAR 0 7
49513: ARRAY
49514: PPUSH
49515: LD_VAR 0 14
49519: PUSH
49520: LD_VAR 0 8
49524: ARRAY
49525: PPUSH
49526: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
49530: LD_ADDR_VAR 0 28
49534: PUSH
49535: LD_VAR 0 28
49539: PPUSH
49540: LD_VAR 0 28
49544: PUSH
49545: LD_INT 1
49547: PLUS
49548: PPUSH
49549: LD_VAR 0 14
49553: PUSH
49554: LD_VAR 0 8
49558: ARRAY
49559: PPUSH
49560: CALL_OW 1
49564: ST_TO_ADDR
// attacking := true ;
49565: LD_ADDR_VAR 0 29
49569: PUSH
49570: LD_INT 1
49572: ST_TO_ADDR
// break ;
49573: GO 49577
// end ; end ;
49575: GO 49444
49577: POP
49578: POP
// if not attacking and f_attack_depot then
49579: LD_VAR 0 29
49583: NOT
49584: PUSH
49585: LD_VAR 0 25
49589: AND
49590: IFFALSE 49685
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
49592: LD_ADDR_VAR 0 13
49596: PUSH
49597: LD_VAR 0 14
49601: PPUSH
49602: LD_INT 2
49604: PUSH
49605: LD_INT 30
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 30
49617: PUSH
49618: LD_INT 1
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: LIST
49629: PPUSH
49630: CALL_OW 72
49634: ST_TO_ADDR
// if z then
49635: LD_VAR 0 13
49639: IFFALSE 49685
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
49641: LD_VAR 0 4
49645: PUSH
49646: LD_VAR 0 7
49650: ARRAY
49651: PPUSH
49652: LD_VAR 0 13
49656: PPUSH
49657: LD_VAR 0 4
49661: PUSH
49662: LD_VAR 0 7
49666: ARRAY
49667: PPUSH
49668: CALL_OW 74
49672: PPUSH
49673: CALL_OW 115
// attacking := true ;
49677: LD_ADDR_VAR 0 29
49681: PUSH
49682: LD_INT 1
49684: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
49685: LD_VAR 0 4
49689: PUSH
49690: LD_VAR 0 7
49694: ARRAY
49695: PPUSH
49696: CALL_OW 256
49700: PUSH
49701: LD_INT 500
49703: LESS
49704: IFFALSE 49730
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
49706: LD_VAR 0 4
49710: PUSH
49711: LD_VAR 0 7
49715: ARRAY
49716: PPUSH
49717: LD_VAR 0 14
49721: PUSH
49722: LD_INT 1
49724: ARRAY
49725: PPUSH
49726: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
49730: LD_VAR 0 4
49734: PUSH
49735: LD_VAR 0 7
49739: ARRAY
49740: PPUSH
49741: CALL_OW 264
49745: PUSH
49746: LD_INT 49
49748: EQUAL
49749: IFFALSE 49870
// begin if not HasTask ( group [ i ] ) then
49751: LD_VAR 0 4
49755: PUSH
49756: LD_VAR 0 7
49760: ARRAY
49761: PPUSH
49762: CALL_OW 314
49766: NOT
49767: IFFALSE 49870
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
49769: LD_ADDR_VAR 0 9
49773: PUSH
49774: LD_INT 81
49776: PUSH
49777: LD_VAR 0 4
49781: PUSH
49782: LD_VAR 0 7
49786: ARRAY
49787: PPUSH
49788: CALL_OW 255
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PPUSH
49797: CALL_OW 69
49801: PPUSH
49802: LD_VAR 0 4
49806: PUSH
49807: LD_VAR 0 7
49811: ARRAY
49812: PPUSH
49813: CALL_OW 74
49817: ST_TO_ADDR
// if k then
49818: LD_VAR 0 9
49822: IFFALSE 49870
// if GetDistUnits ( group [ i ] , k ) > 10 then
49824: LD_VAR 0 4
49828: PUSH
49829: LD_VAR 0 7
49833: ARRAY
49834: PPUSH
49835: LD_VAR 0 9
49839: PPUSH
49840: CALL_OW 296
49844: PUSH
49845: LD_INT 10
49847: GREATER
49848: IFFALSE 49870
// ComMoveUnit ( group [ i ] , k ) ;
49850: LD_VAR 0 4
49854: PUSH
49855: LD_VAR 0 7
49859: ARRAY
49860: PPUSH
49861: LD_VAR 0 9
49865: PPUSH
49866: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49870: LD_VAR 0 4
49874: PUSH
49875: LD_VAR 0 7
49879: ARRAY
49880: PPUSH
49881: CALL_OW 256
49885: PUSH
49886: LD_INT 250
49888: LESS
49889: PUSH
49890: LD_VAR 0 4
49894: PUSH
49895: LD_VAR 0 7
49899: ARRAY
49900: PUSH
49901: LD_INT 21
49903: PUSH
49904: LD_INT 2
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 23
49913: PUSH
49914: LD_INT 2
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PPUSH
49925: CALL_OW 69
49929: IN
49930: AND
49931: IFFALSE 50056
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
49933: LD_ADDR_VAR 0 9
49937: PUSH
49938: LD_OWVAR 3
49942: PUSH
49943: LD_VAR 0 4
49947: PUSH
49948: LD_VAR 0 7
49952: ARRAY
49953: DIFF
49954: PPUSH
49955: LD_VAR 0 4
49959: PUSH
49960: LD_VAR 0 7
49964: ARRAY
49965: PPUSH
49966: CALL_OW 74
49970: ST_TO_ADDR
// if not k then
49971: LD_VAR 0 9
49975: NOT
49976: IFFALSE 49980
// continue ;
49978: GO 46421
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
49980: LD_VAR 0 9
49984: PUSH
49985: LD_INT 81
49987: PUSH
49988: LD_VAR 0 4
49992: PUSH
49993: LD_VAR 0 7
49997: ARRAY
49998: PPUSH
49999: CALL_OW 255
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PPUSH
50008: CALL_OW 69
50012: IN
50013: PUSH
50014: LD_VAR 0 9
50018: PPUSH
50019: LD_VAR 0 4
50023: PUSH
50024: LD_VAR 0 7
50028: ARRAY
50029: PPUSH
50030: CALL_OW 296
50034: PUSH
50035: LD_INT 5
50037: LESS
50038: AND
50039: IFFALSE 50056
// ComAutodestruct ( group [ i ] ) ;
50041: LD_VAR 0 4
50045: PUSH
50046: LD_VAR 0 7
50050: ARRAY
50051: PPUSH
50052: CALL 44516 0 1
// end ; if f_attack_depot then
50056: LD_VAR 0 25
50060: IFFALSE 50172
// begin k := 6 ;
50062: LD_ADDR_VAR 0 9
50066: PUSH
50067: LD_INT 6
50069: ST_TO_ADDR
// if tmp < k then
50070: LD_VAR 0 14
50074: PUSH
50075: LD_VAR 0 9
50079: LESS
50080: IFFALSE 50092
// k := tmp ;
50082: LD_ADDR_VAR 0 9
50086: PUSH
50087: LD_VAR 0 14
50091: ST_TO_ADDR
// for j = 1 to k do
50092: LD_ADDR_VAR 0 8
50096: PUSH
50097: DOUBLE
50098: LD_INT 1
50100: DEC
50101: ST_TO_ADDR
50102: LD_VAR 0 9
50106: PUSH
50107: FOR_TO
50108: IFFALSE 50170
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
50110: LD_VAR 0 8
50114: PPUSH
50115: CALL_OW 266
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: LD_INT 1
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: IN
50130: IFFALSE 50168
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
50132: LD_VAR 0 4
50136: PUSH
50137: LD_VAR 0 7
50141: ARRAY
50142: PPUSH
50143: LD_VAR 0 14
50147: PUSH
50148: LD_VAR 0 8
50152: ARRAY
50153: PPUSH
50154: CALL_OW 115
// attacking := true ;
50158: LD_ADDR_VAR 0 29
50162: PUSH
50163: LD_INT 1
50165: ST_TO_ADDR
// break ;
50166: GO 50170
// end ;
50168: GO 50107
50170: POP
50171: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
50172: LD_VAR 0 4
50176: PUSH
50177: LD_VAR 0 7
50181: ARRAY
50182: PPUSH
50183: CALL_OW 302
50187: PUSH
50188: LD_VAR 0 29
50192: NOT
50193: AND
50194: IFFALSE 50516
// begin if GetTag ( group [ i ] ) = 71 then
50196: LD_VAR 0 4
50200: PUSH
50201: LD_VAR 0 7
50205: ARRAY
50206: PPUSH
50207: CALL_OW 110
50211: PUSH
50212: LD_INT 71
50214: EQUAL
50215: IFFALSE 50256
// begin if HasTask ( group [ i ] ) then
50217: LD_VAR 0 4
50221: PUSH
50222: LD_VAR 0 7
50226: ARRAY
50227: PPUSH
50228: CALL_OW 314
50232: IFFALSE 50238
// continue else
50234: GO 46421
50236: GO 50256
// SetTag ( group [ i ] , 0 ) ;
50238: LD_VAR 0 4
50242: PUSH
50243: LD_VAR 0 7
50247: ARRAY
50248: PPUSH
50249: LD_INT 0
50251: PPUSH
50252: CALL_OW 109
// end ; k := 8 ;
50256: LD_ADDR_VAR 0 9
50260: PUSH
50261: LD_INT 8
50263: ST_TO_ADDR
// x := 0 ;
50264: LD_ADDR_VAR 0 10
50268: PUSH
50269: LD_INT 0
50271: ST_TO_ADDR
// if tmp < k then
50272: LD_VAR 0 14
50276: PUSH
50277: LD_VAR 0 9
50281: LESS
50282: IFFALSE 50294
// k := tmp ;
50284: LD_ADDR_VAR 0 9
50288: PUSH
50289: LD_VAR 0 14
50293: ST_TO_ADDR
// for j = 1 to k do
50294: LD_ADDR_VAR 0 8
50298: PUSH
50299: DOUBLE
50300: LD_INT 1
50302: DEC
50303: ST_TO_ADDR
50304: LD_VAR 0 9
50308: PUSH
50309: FOR_TO
50310: IFFALSE 50408
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
50312: LD_VAR 0 14
50316: PUSH
50317: LD_VAR 0 8
50321: ARRAY
50322: PPUSH
50323: CALL_OW 247
50327: PUSH
50328: LD_INT 1
50330: EQUAL
50331: PUSH
50332: LD_VAR 0 14
50336: PUSH
50337: LD_VAR 0 8
50341: ARRAY
50342: PPUSH
50343: CALL_OW 256
50347: PUSH
50348: LD_INT 250
50350: LESS
50351: PUSH
50352: LD_VAR 0 20
50356: AND
50357: PUSH
50358: LD_VAR 0 20
50362: NOT
50363: PUSH
50364: LD_VAR 0 14
50368: PUSH
50369: LD_VAR 0 8
50373: ARRAY
50374: PPUSH
50375: CALL_OW 256
50379: PUSH
50380: LD_INT 250
50382: GREATEREQUAL
50383: AND
50384: OR
50385: AND
50386: IFFALSE 50406
// begin x := tmp [ j ] ;
50388: LD_ADDR_VAR 0 10
50392: PUSH
50393: LD_VAR 0 14
50397: PUSH
50398: LD_VAR 0 8
50402: ARRAY
50403: ST_TO_ADDR
// break ;
50404: GO 50408
// end ;
50406: GO 50309
50408: POP
50409: POP
// if x then
50410: LD_VAR 0 10
50414: IFFALSE 50438
// ComAttackUnit ( group [ i ] , x ) else
50416: LD_VAR 0 4
50420: PUSH
50421: LD_VAR 0 7
50425: ARRAY
50426: PPUSH
50427: LD_VAR 0 10
50431: PPUSH
50432: CALL_OW 115
50436: GO 50462
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
50438: LD_VAR 0 4
50442: PUSH
50443: LD_VAR 0 7
50447: ARRAY
50448: PPUSH
50449: LD_VAR 0 14
50453: PUSH
50454: LD_INT 1
50456: ARRAY
50457: PPUSH
50458: CALL_OW 115
// if not HasTask ( group [ i ] ) then
50462: LD_VAR 0 4
50466: PUSH
50467: LD_VAR 0 7
50471: ARRAY
50472: PPUSH
50473: CALL_OW 314
50477: NOT
50478: IFFALSE 50516
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
50480: LD_VAR 0 4
50484: PUSH
50485: LD_VAR 0 7
50489: ARRAY
50490: PPUSH
50491: LD_VAR 0 14
50495: PPUSH
50496: LD_VAR 0 4
50500: PUSH
50501: LD_VAR 0 7
50505: ARRAY
50506: PPUSH
50507: CALL_OW 74
50511: PPUSH
50512: CALL_OW 115
// end ; end ; end ;
50516: GO 46421
50518: POP
50519: POP
// wait ( 0 0$1 ) ;
50520: LD_INT 35
50522: PPUSH
50523: CALL_OW 67
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
50527: LD_VAR 0 4
50531: PUSH
50532: EMPTY
50533: EQUAL
50534: PUSH
50535: LD_INT 81
50537: PUSH
50538: LD_VAR 0 35
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PPUSH
50547: CALL_OW 69
50551: NOT
50552: OR
50553: IFFALSE 46406
// end ;
50555: LD_VAR 0 2
50559: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50560: LD_INT 0
50562: PPUSH
50563: PPUSH
50564: PPUSH
50565: PPUSH
// if not base_units then
50566: LD_VAR 0 1
50570: NOT
50571: IFFALSE 50575
// exit ;
50573: GO 50662
// result := false ;
50575: LD_ADDR_VAR 0 2
50579: PUSH
50580: LD_INT 0
50582: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50583: LD_ADDR_VAR 0 5
50587: PUSH
50588: LD_VAR 0 1
50592: PPUSH
50593: LD_INT 21
50595: PUSH
50596: LD_INT 3
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PPUSH
50603: CALL_OW 72
50607: ST_TO_ADDR
// if not tmp then
50608: LD_VAR 0 5
50612: NOT
50613: IFFALSE 50617
// exit ;
50615: GO 50662
// for i in tmp do
50617: LD_ADDR_VAR 0 3
50621: PUSH
50622: LD_VAR 0 5
50626: PUSH
50627: FOR_IN
50628: IFFALSE 50660
// begin result := EnemyInRange ( i , 22 ) ;
50630: LD_ADDR_VAR 0 2
50634: PUSH
50635: LD_VAR 0 3
50639: PPUSH
50640: LD_INT 22
50642: PPUSH
50643: CALL 44199 0 2
50647: ST_TO_ADDR
// if result then
50648: LD_VAR 0 2
50652: IFFALSE 50658
// exit ;
50654: POP
50655: POP
50656: GO 50662
// end ;
50658: GO 50627
50660: POP
50661: POP
// end ;
50662: LD_VAR 0 2
50666: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
50667: LD_INT 0
50669: PPUSH
50670: PPUSH
// if not units then
50671: LD_VAR 0 1
50675: NOT
50676: IFFALSE 50680
// exit ;
50678: GO 50750
// result := [ ] ;
50680: LD_ADDR_VAR 0 3
50684: PUSH
50685: EMPTY
50686: ST_TO_ADDR
// for i in units do
50687: LD_ADDR_VAR 0 4
50691: PUSH
50692: LD_VAR 0 1
50696: PUSH
50697: FOR_IN
50698: IFFALSE 50748
// if GetTag ( i ) = tag then
50700: LD_VAR 0 4
50704: PPUSH
50705: CALL_OW 110
50709: PUSH
50710: LD_VAR 0 2
50714: EQUAL
50715: IFFALSE 50746
// result := Insert ( result , result + 1 , i ) ;
50717: LD_ADDR_VAR 0 3
50721: PUSH
50722: LD_VAR 0 3
50726: PPUSH
50727: LD_VAR 0 3
50731: PUSH
50732: LD_INT 1
50734: PLUS
50735: PPUSH
50736: LD_VAR 0 4
50740: PPUSH
50741: CALL_OW 2
50745: ST_TO_ADDR
50746: GO 50697
50748: POP
50749: POP
// end ;
50750: LD_VAR 0 3
50754: RET
// export function IsDriver ( un ) ; begin
50755: LD_INT 0
50757: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50758: LD_ADDR_VAR 0 2
50762: PUSH
50763: LD_VAR 0 1
50767: PUSH
50768: LD_INT 55
50770: PUSH
50771: EMPTY
50772: LIST
50773: PPUSH
50774: CALL_OW 69
50778: IN
50779: ST_TO_ADDR
// end ;
50780: LD_VAR 0 2
50784: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50785: LD_INT 0
50787: PPUSH
50788: PPUSH
// list := [ ] ;
50789: LD_ADDR_VAR 0 5
50793: PUSH
50794: EMPTY
50795: ST_TO_ADDR
// case d of 0 :
50796: LD_VAR 0 3
50800: PUSH
50801: LD_INT 0
50803: DOUBLE
50804: EQUAL
50805: IFTRUE 50809
50807: GO 50942
50809: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50810: LD_ADDR_VAR 0 5
50814: PUSH
50815: LD_VAR 0 1
50819: PUSH
50820: LD_INT 4
50822: MINUS
50823: PUSH
50824: LD_VAR 0 2
50828: PUSH
50829: LD_INT 4
50831: MINUS
50832: PUSH
50833: LD_INT 2
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: LIST
50840: PUSH
50841: LD_VAR 0 1
50845: PUSH
50846: LD_INT 3
50848: MINUS
50849: PUSH
50850: LD_VAR 0 2
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: LIST
50862: PUSH
50863: LD_VAR 0 1
50867: PUSH
50868: LD_INT 4
50870: PLUS
50871: PUSH
50872: LD_VAR 0 2
50876: PUSH
50877: LD_INT 4
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: LIST
50884: PUSH
50885: LD_VAR 0 1
50889: PUSH
50890: LD_INT 3
50892: PLUS
50893: PUSH
50894: LD_VAR 0 2
50898: PUSH
50899: LD_INT 3
50901: PLUS
50902: PUSH
50903: LD_INT 5
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: LIST
50910: PUSH
50911: LD_VAR 0 1
50915: PUSH
50916: LD_VAR 0 2
50920: PUSH
50921: LD_INT 4
50923: PLUS
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: LIST
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: ST_TO_ADDR
// end ; 1 :
50940: GO 51640
50942: LD_INT 1
50944: DOUBLE
50945: EQUAL
50946: IFTRUE 50950
50948: GO 51083
50950: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50951: LD_ADDR_VAR 0 5
50955: PUSH
50956: LD_VAR 0 1
50960: PUSH
50961: LD_VAR 0 2
50965: PUSH
50966: LD_INT 4
50968: MINUS
50969: PUSH
50970: LD_INT 3
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: LIST
50977: PUSH
50978: LD_VAR 0 1
50982: PUSH
50983: LD_INT 3
50985: MINUS
50986: PUSH
50987: LD_VAR 0 2
50991: PUSH
50992: LD_INT 3
50994: MINUS
50995: PUSH
50996: LD_INT 2
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: LIST
51003: PUSH
51004: LD_VAR 0 1
51008: PUSH
51009: LD_INT 4
51011: MINUS
51012: PUSH
51013: LD_VAR 0 2
51017: PUSH
51018: LD_INT 1
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: LIST
51025: PUSH
51026: LD_VAR 0 1
51030: PUSH
51031: LD_VAR 0 2
51035: PUSH
51036: LD_INT 3
51038: PLUS
51039: PUSH
51040: LD_INT 0
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: LIST
51047: PUSH
51048: LD_VAR 0 1
51052: PUSH
51053: LD_INT 4
51055: PLUS
51056: PUSH
51057: LD_VAR 0 2
51061: PUSH
51062: LD_INT 4
51064: PLUS
51065: PUSH
51066: LD_INT 5
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: LIST
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: ST_TO_ADDR
// end ; 2 :
51081: GO 51640
51083: LD_INT 2
51085: DOUBLE
51086: EQUAL
51087: IFTRUE 51091
51089: GO 51220
51091: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51092: LD_ADDR_VAR 0 5
51096: PUSH
51097: LD_VAR 0 1
51101: PUSH
51102: LD_VAR 0 2
51106: PUSH
51107: LD_INT 3
51109: MINUS
51110: PUSH
51111: LD_INT 3
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: LIST
51118: PUSH
51119: LD_VAR 0 1
51123: PUSH
51124: LD_INT 4
51126: PLUS
51127: PUSH
51128: LD_VAR 0 2
51132: PUSH
51133: LD_INT 4
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: LIST
51140: PUSH
51141: LD_VAR 0 1
51145: PUSH
51146: LD_VAR 0 2
51150: PUSH
51151: LD_INT 4
51153: PLUS
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: LIST
51162: PUSH
51163: LD_VAR 0 1
51167: PUSH
51168: LD_INT 3
51170: MINUS
51171: PUSH
51172: LD_VAR 0 2
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: LIST
51184: PUSH
51185: LD_VAR 0 1
51189: PUSH
51190: LD_INT 4
51192: MINUS
51193: PUSH
51194: LD_VAR 0 2
51198: PUSH
51199: LD_INT 4
51201: MINUS
51202: PUSH
51203: LD_INT 2
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: LIST
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: ST_TO_ADDR
// end ; 3 :
51218: GO 51640
51220: LD_INT 3
51222: DOUBLE
51223: EQUAL
51224: IFTRUE 51228
51226: GO 51361
51228: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51229: LD_ADDR_VAR 0 5
51233: PUSH
51234: LD_VAR 0 1
51238: PUSH
51239: LD_INT 3
51241: PLUS
51242: PUSH
51243: LD_VAR 0 2
51247: PUSH
51248: LD_INT 4
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: LIST
51255: PUSH
51256: LD_VAR 0 1
51260: PUSH
51261: LD_INT 4
51263: PLUS
51264: PUSH
51265: LD_VAR 0 2
51269: PUSH
51270: LD_INT 4
51272: PLUS
51273: PUSH
51274: LD_INT 5
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: LIST
51281: PUSH
51282: LD_VAR 0 1
51286: PUSH
51287: LD_INT 4
51289: MINUS
51290: PUSH
51291: LD_VAR 0 2
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: LIST
51303: PUSH
51304: LD_VAR 0 1
51308: PUSH
51309: LD_VAR 0 2
51313: PUSH
51314: LD_INT 4
51316: MINUS
51317: PUSH
51318: LD_INT 3
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: LIST
51325: PUSH
51326: LD_VAR 0 1
51330: PUSH
51331: LD_INT 3
51333: MINUS
51334: PUSH
51335: LD_VAR 0 2
51339: PUSH
51340: LD_INT 3
51342: MINUS
51343: PUSH
51344: LD_INT 2
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: LIST
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: ST_TO_ADDR
// end ; 4 :
51359: GO 51640
51361: LD_INT 4
51363: DOUBLE
51364: EQUAL
51365: IFTRUE 51369
51367: GO 51502
51369: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51370: LD_ADDR_VAR 0 5
51374: PUSH
51375: LD_VAR 0 1
51379: PUSH
51380: LD_VAR 0 2
51384: PUSH
51385: LD_INT 4
51387: PLUS
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: LIST
51396: PUSH
51397: LD_VAR 0 1
51401: PUSH
51402: LD_INT 3
51404: PLUS
51405: PUSH
51406: LD_VAR 0 2
51410: PUSH
51411: LD_INT 3
51413: PLUS
51414: PUSH
51415: LD_INT 5
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: LIST
51422: PUSH
51423: LD_VAR 0 1
51427: PUSH
51428: LD_INT 4
51430: PLUS
51431: PUSH
51432: LD_VAR 0 2
51436: PUSH
51437: LD_INT 4
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: LIST
51444: PUSH
51445: LD_VAR 0 1
51449: PUSH
51450: LD_VAR 0 2
51454: PUSH
51455: LD_INT 3
51457: MINUS
51458: PUSH
51459: LD_INT 3
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: LIST
51466: PUSH
51467: LD_VAR 0 1
51471: PUSH
51472: LD_INT 4
51474: MINUS
51475: PUSH
51476: LD_VAR 0 2
51480: PUSH
51481: LD_INT 4
51483: MINUS
51484: PUSH
51485: LD_INT 2
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: LIST
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: ST_TO_ADDR
// end ; 5 :
51500: GO 51640
51502: LD_INT 5
51504: DOUBLE
51505: EQUAL
51506: IFTRUE 51510
51508: GO 51639
51510: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51511: LD_ADDR_VAR 0 5
51515: PUSH
51516: LD_VAR 0 1
51520: PUSH
51521: LD_INT 4
51523: MINUS
51524: PUSH
51525: LD_VAR 0 2
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: LIST
51537: PUSH
51538: LD_VAR 0 1
51542: PUSH
51543: LD_VAR 0 2
51547: PUSH
51548: LD_INT 4
51550: MINUS
51551: PUSH
51552: LD_INT 3
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: LIST
51559: PUSH
51560: LD_VAR 0 1
51564: PUSH
51565: LD_INT 4
51567: PLUS
51568: PUSH
51569: LD_VAR 0 2
51573: PUSH
51574: LD_INT 4
51576: PLUS
51577: PUSH
51578: LD_INT 5
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: LIST
51585: PUSH
51586: LD_VAR 0 1
51590: PUSH
51591: LD_INT 3
51593: PLUS
51594: PUSH
51595: LD_VAR 0 2
51599: PUSH
51600: LD_INT 4
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: LIST
51607: PUSH
51608: LD_VAR 0 1
51612: PUSH
51613: LD_VAR 0 2
51617: PUSH
51618: LD_INT 3
51620: PLUS
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: LIST
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: ST_TO_ADDR
// end ; end ;
51637: GO 51640
51639: POP
// result := list ;
51640: LD_ADDR_VAR 0 4
51644: PUSH
51645: LD_VAR 0 5
51649: ST_TO_ADDR
// end ;
51650: LD_VAR 0 4
51654: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51655: LD_INT 0
51657: PPUSH
51658: PPUSH
51659: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51660: LD_VAR 0 1
51664: NOT
51665: PUSH
51666: LD_VAR 0 2
51670: PUSH
51671: LD_INT 1
51673: PUSH
51674: LD_INT 2
51676: PUSH
51677: LD_INT 3
51679: PUSH
51680: LD_INT 4
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: IN
51689: NOT
51690: OR
51691: IFFALSE 51695
// exit ;
51693: GO 51787
// tmp := [ ] ;
51695: LD_ADDR_VAR 0 5
51699: PUSH
51700: EMPTY
51701: ST_TO_ADDR
// for i in units do
51702: LD_ADDR_VAR 0 4
51706: PUSH
51707: LD_VAR 0 1
51711: PUSH
51712: FOR_IN
51713: IFFALSE 51756
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
51715: LD_ADDR_VAR 0 5
51719: PUSH
51720: LD_VAR 0 5
51724: PPUSH
51725: LD_VAR 0 5
51729: PUSH
51730: LD_INT 1
51732: PLUS
51733: PPUSH
51734: LD_VAR 0 4
51738: PPUSH
51739: LD_VAR 0 2
51743: PPUSH
51744: CALL_OW 259
51748: PPUSH
51749: CALL_OW 2
51753: ST_TO_ADDR
51754: GO 51712
51756: POP
51757: POP
// if not tmp then
51758: LD_VAR 0 5
51762: NOT
51763: IFFALSE 51767
// exit ;
51765: GO 51787
// result := SortListByListDesc ( units , tmp ) ;
51767: LD_ADDR_VAR 0 3
51771: PUSH
51772: LD_VAR 0 1
51776: PPUSH
51777: LD_VAR 0 5
51781: PPUSH
51782: CALL_OW 77
51786: ST_TO_ADDR
// end ;
51787: LD_VAR 0 3
51791: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51792: LD_INT 0
51794: PPUSH
51795: PPUSH
51796: PPUSH
// x := GetX ( building ) ;
51797: LD_ADDR_VAR 0 4
51801: PUSH
51802: LD_VAR 0 2
51806: PPUSH
51807: CALL_OW 250
51811: ST_TO_ADDR
// y := GetY ( building ) ;
51812: LD_ADDR_VAR 0 5
51816: PUSH
51817: LD_VAR 0 2
51821: PPUSH
51822: CALL_OW 251
51826: ST_TO_ADDR
// if GetTaskList ( unit ) then
51827: LD_VAR 0 1
51831: PPUSH
51832: CALL_OW 437
51836: IFFALSE 51931
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51838: LD_STRING e
51840: PUSH
51841: LD_VAR 0 1
51845: PPUSH
51846: CALL_OW 437
51850: PUSH
51851: LD_INT 1
51853: ARRAY
51854: PUSH
51855: LD_INT 1
51857: ARRAY
51858: EQUAL
51859: PUSH
51860: LD_VAR 0 4
51864: PUSH
51865: LD_VAR 0 1
51869: PPUSH
51870: CALL_OW 437
51874: PUSH
51875: LD_INT 1
51877: ARRAY
51878: PUSH
51879: LD_INT 2
51881: ARRAY
51882: EQUAL
51883: AND
51884: PUSH
51885: LD_VAR 0 5
51889: PUSH
51890: LD_VAR 0 1
51894: PPUSH
51895: CALL_OW 437
51899: PUSH
51900: LD_INT 1
51902: ARRAY
51903: PUSH
51904: LD_INT 3
51906: ARRAY
51907: EQUAL
51908: AND
51909: IFFALSE 51921
// result := true else
51911: LD_ADDR_VAR 0 3
51915: PUSH
51916: LD_INT 1
51918: ST_TO_ADDR
51919: GO 51929
// result := false ;
51921: LD_ADDR_VAR 0 3
51925: PUSH
51926: LD_INT 0
51928: ST_TO_ADDR
// end else
51929: GO 51939
// result := false ;
51931: LD_ADDR_VAR 0 3
51935: PUSH
51936: LD_INT 0
51938: ST_TO_ADDR
// end ;
51939: LD_VAR 0 3
51943: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
51944: LD_INT 0
51946: PPUSH
51947: PPUSH
51948: PPUSH
51949: PPUSH
// if not unit or not area then
51950: LD_VAR 0 1
51954: NOT
51955: PUSH
51956: LD_VAR 0 2
51960: NOT
51961: OR
51962: IFFALSE 51966
// exit ;
51964: GO 52130
// tmp := AreaToList ( area , i ) ;
51966: LD_ADDR_VAR 0 6
51970: PUSH
51971: LD_VAR 0 2
51975: PPUSH
51976: LD_VAR 0 5
51980: PPUSH
51981: CALL_OW 517
51985: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
51986: LD_ADDR_VAR 0 5
51990: PUSH
51991: DOUBLE
51992: LD_INT 1
51994: DEC
51995: ST_TO_ADDR
51996: LD_VAR 0 6
52000: PUSH
52001: LD_INT 1
52003: ARRAY
52004: PUSH
52005: FOR_TO
52006: IFFALSE 52128
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52008: LD_ADDR_VAR 0 7
52012: PUSH
52013: LD_VAR 0 6
52017: PUSH
52018: LD_INT 1
52020: ARRAY
52021: PUSH
52022: LD_VAR 0 5
52026: ARRAY
52027: PUSH
52028: LD_VAR 0 6
52032: PUSH
52033: LD_INT 2
52035: ARRAY
52036: PUSH
52037: LD_VAR 0 5
52041: ARRAY
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
52047: LD_VAR 0 7
52051: PUSH
52052: LD_INT 1
52054: ARRAY
52055: PPUSH
52056: LD_VAR 0 7
52060: PUSH
52061: LD_INT 2
52063: ARRAY
52064: PPUSH
52065: CALL_OW 428
52069: PUSH
52070: LD_INT 0
52072: EQUAL
52073: IFFALSE 52126
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52075: LD_VAR 0 1
52079: PPUSH
52080: LD_VAR 0 7
52084: PUSH
52085: LD_INT 1
52087: ARRAY
52088: PPUSH
52089: LD_VAR 0 7
52093: PUSH
52094: LD_INT 2
52096: ARRAY
52097: PPUSH
52098: LD_VAR 0 3
52102: PPUSH
52103: CALL_OW 48
// result := IsPlaced ( unit ) ;
52107: LD_ADDR_VAR 0 4
52111: PUSH
52112: LD_VAR 0 1
52116: PPUSH
52117: CALL_OW 305
52121: ST_TO_ADDR
// exit ;
52122: POP
52123: POP
52124: GO 52130
// end ; end ;
52126: GO 52005
52128: POP
52129: POP
// end ;
52130: LD_VAR 0 4
52134: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52135: LD_INT 0
52137: PPUSH
52138: PPUSH
52139: PPUSH
// if not side or side > 8 then
52140: LD_VAR 0 1
52144: NOT
52145: PUSH
52146: LD_VAR 0 1
52150: PUSH
52151: LD_INT 8
52153: GREATER
52154: OR
52155: IFFALSE 52159
// exit ;
52157: GO 52346
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52159: LD_ADDR_VAR 0 4
52163: PUSH
52164: LD_INT 22
52166: PUSH
52167: LD_VAR 0 1
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 21
52178: PUSH
52179: LD_INT 3
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PPUSH
52190: CALL_OW 69
52194: ST_TO_ADDR
// if not tmp then
52195: LD_VAR 0 4
52199: NOT
52200: IFFALSE 52204
// exit ;
52202: GO 52346
// enable_addtolog := true ;
52204: LD_ADDR_OWVAR 81
52208: PUSH
52209: LD_INT 1
52211: ST_TO_ADDR
// AddToLog ( [ ) ;
52212: LD_STRING [
52214: PPUSH
52215: CALL_OW 561
// for i in tmp do
52219: LD_ADDR_VAR 0 3
52223: PUSH
52224: LD_VAR 0 4
52228: PUSH
52229: FOR_IN
52230: IFFALSE 52337
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52232: LD_STRING [
52234: PUSH
52235: LD_VAR 0 3
52239: PPUSH
52240: CALL_OW 266
52244: STR
52245: PUSH
52246: LD_STRING , 
52248: STR
52249: PUSH
52250: LD_VAR 0 3
52254: PPUSH
52255: CALL_OW 250
52259: STR
52260: PUSH
52261: LD_STRING , 
52263: STR
52264: PUSH
52265: LD_VAR 0 3
52269: PPUSH
52270: CALL_OW 251
52274: STR
52275: PUSH
52276: LD_STRING , 
52278: STR
52279: PUSH
52280: LD_VAR 0 3
52284: PPUSH
52285: CALL_OW 254
52289: STR
52290: PUSH
52291: LD_STRING , 
52293: STR
52294: PUSH
52295: LD_VAR 0 3
52299: PPUSH
52300: LD_INT 1
52302: PPUSH
52303: CALL_OW 268
52307: STR
52308: PUSH
52309: LD_STRING , 
52311: STR
52312: PUSH
52313: LD_VAR 0 3
52317: PPUSH
52318: LD_INT 2
52320: PPUSH
52321: CALL_OW 268
52325: STR
52326: PUSH
52327: LD_STRING ],
52329: STR
52330: PPUSH
52331: CALL_OW 561
// end ;
52335: GO 52229
52337: POP
52338: POP
// AddToLog ( ]; ) ;
52339: LD_STRING ];
52341: PPUSH
52342: CALL_OW 561
// end ;
52346: LD_VAR 0 2
52350: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52351: LD_INT 0
52353: PPUSH
52354: PPUSH
52355: PPUSH
52356: PPUSH
52357: PPUSH
// if not area or not rate or not max then
52358: LD_VAR 0 1
52362: NOT
52363: PUSH
52364: LD_VAR 0 2
52368: NOT
52369: OR
52370: PUSH
52371: LD_VAR 0 4
52375: NOT
52376: OR
52377: IFFALSE 52381
// exit ;
52379: GO 52573
// while 1 do
52381: LD_INT 1
52383: IFFALSE 52573
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52385: LD_ADDR_VAR 0 9
52389: PUSH
52390: LD_VAR 0 1
52394: PPUSH
52395: LD_INT 1
52397: PPUSH
52398: CALL_OW 287
52402: PUSH
52403: LD_INT 10
52405: MUL
52406: ST_TO_ADDR
// r := rate / 10 ;
52407: LD_ADDR_VAR 0 7
52411: PUSH
52412: LD_VAR 0 2
52416: PUSH
52417: LD_INT 10
52419: DIVREAL
52420: ST_TO_ADDR
// time := 1 1$00 ;
52421: LD_ADDR_VAR 0 8
52425: PUSH
52426: LD_INT 2100
52428: ST_TO_ADDR
// if amount < min then
52429: LD_VAR 0 9
52433: PUSH
52434: LD_VAR 0 3
52438: LESS
52439: IFFALSE 52457
// r := r * 2 else
52441: LD_ADDR_VAR 0 7
52445: PUSH
52446: LD_VAR 0 7
52450: PUSH
52451: LD_INT 2
52453: MUL
52454: ST_TO_ADDR
52455: GO 52483
// if amount > max then
52457: LD_VAR 0 9
52461: PUSH
52462: LD_VAR 0 4
52466: GREATER
52467: IFFALSE 52483
// r := r / 2 ;
52469: LD_ADDR_VAR 0 7
52473: PUSH
52474: LD_VAR 0 7
52478: PUSH
52479: LD_INT 2
52481: DIVREAL
52482: ST_TO_ADDR
// time := time / r ;
52483: LD_ADDR_VAR 0 8
52487: PUSH
52488: LD_VAR 0 8
52492: PUSH
52493: LD_VAR 0 7
52497: DIVREAL
52498: ST_TO_ADDR
// if time < 0 then
52499: LD_VAR 0 8
52503: PUSH
52504: LD_INT 0
52506: LESS
52507: IFFALSE 52524
// time := time * - 1 ;
52509: LD_ADDR_VAR 0 8
52513: PUSH
52514: LD_VAR 0 8
52518: PUSH
52519: LD_INT 1
52521: NEG
52522: MUL
52523: ST_TO_ADDR
// wait ( time ) ;
52524: LD_VAR 0 8
52528: PPUSH
52529: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
52533: LD_INT 35
52535: PPUSH
52536: LD_INT 875
52538: PPUSH
52539: CALL_OW 12
52543: PPUSH
52544: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52548: LD_INT 1
52550: PPUSH
52551: LD_INT 5
52553: PPUSH
52554: CALL_OW 12
52558: PPUSH
52559: LD_VAR 0 1
52563: PPUSH
52564: LD_INT 1
52566: PPUSH
52567: CALL_OW 55
// end ;
52571: GO 52381
// end ;
52573: LD_VAR 0 5
52577: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52578: LD_INT 0
52580: PPUSH
52581: PPUSH
52582: PPUSH
52583: PPUSH
52584: PPUSH
52585: PPUSH
52586: PPUSH
52587: PPUSH
// if not turrets or not factories then
52588: LD_VAR 0 1
52592: NOT
52593: PUSH
52594: LD_VAR 0 2
52598: NOT
52599: OR
52600: IFFALSE 52604
// exit ;
52602: GO 52911
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52604: LD_ADDR_VAR 0 10
52608: PUSH
52609: LD_INT 5
52611: PUSH
52612: LD_INT 6
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 2
52621: PUSH
52622: LD_INT 4
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 3
52631: PUSH
52632: LD_INT 5
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 24
52646: PUSH
52647: LD_INT 25
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 23
52656: PUSH
52657: LD_INT 27
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 42
52670: PUSH
52671: LD_INT 43
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 44
52680: PUSH
52681: LD_INT 46
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 45
52690: PUSH
52691: LD_INT 47
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: LIST
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: LIST
52707: ST_TO_ADDR
// result := [ ] ;
52708: LD_ADDR_VAR 0 3
52712: PUSH
52713: EMPTY
52714: ST_TO_ADDR
// for i in turrets do
52715: LD_ADDR_VAR 0 4
52719: PUSH
52720: LD_VAR 0 1
52724: PUSH
52725: FOR_IN
52726: IFFALSE 52909
// begin nat := GetNation ( i ) ;
52728: LD_ADDR_VAR 0 7
52732: PUSH
52733: LD_VAR 0 4
52737: PPUSH
52738: CALL_OW 248
52742: ST_TO_ADDR
// weapon := 0 ;
52743: LD_ADDR_VAR 0 8
52747: PUSH
52748: LD_INT 0
52750: ST_TO_ADDR
// if not nat then
52751: LD_VAR 0 7
52755: NOT
52756: IFFALSE 52760
// continue ;
52758: GO 52725
// for j in list [ nat ] do
52760: LD_ADDR_VAR 0 5
52764: PUSH
52765: LD_VAR 0 10
52769: PUSH
52770: LD_VAR 0 7
52774: ARRAY
52775: PUSH
52776: FOR_IN
52777: IFFALSE 52818
// if GetBWeapon ( i ) = j [ 1 ] then
52779: LD_VAR 0 4
52783: PPUSH
52784: CALL_OW 269
52788: PUSH
52789: LD_VAR 0 5
52793: PUSH
52794: LD_INT 1
52796: ARRAY
52797: EQUAL
52798: IFFALSE 52816
// begin weapon := j [ 2 ] ;
52800: LD_ADDR_VAR 0 8
52804: PUSH
52805: LD_VAR 0 5
52809: PUSH
52810: LD_INT 2
52812: ARRAY
52813: ST_TO_ADDR
// break ;
52814: GO 52818
// end ;
52816: GO 52776
52818: POP
52819: POP
// if not weapon then
52820: LD_VAR 0 8
52824: NOT
52825: IFFALSE 52829
// continue ;
52827: GO 52725
// for k in factories do
52829: LD_ADDR_VAR 0 6
52833: PUSH
52834: LD_VAR 0 2
52838: PUSH
52839: FOR_IN
52840: IFFALSE 52905
// begin weapons := AvailableWeaponList ( k ) ;
52842: LD_ADDR_VAR 0 9
52846: PUSH
52847: LD_VAR 0 6
52851: PPUSH
52852: CALL_OW 478
52856: ST_TO_ADDR
// if not weapons then
52857: LD_VAR 0 9
52861: NOT
52862: IFFALSE 52866
// continue ;
52864: GO 52839
// if weapon in weapons then
52866: LD_VAR 0 8
52870: PUSH
52871: LD_VAR 0 9
52875: IN
52876: IFFALSE 52903
// begin result := [ i , weapon ] ;
52878: LD_ADDR_VAR 0 3
52882: PUSH
52883: LD_VAR 0 4
52887: PUSH
52888: LD_VAR 0 8
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: ST_TO_ADDR
// exit ;
52897: POP
52898: POP
52899: POP
52900: POP
52901: GO 52911
// end ; end ;
52903: GO 52839
52905: POP
52906: POP
// end ;
52907: GO 52725
52909: POP
52910: POP
// end ;
52911: LD_VAR 0 3
52915: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52916: LD_INT 0
52918: PPUSH
// if not side or side > 8 then
52919: LD_VAR 0 3
52923: NOT
52924: PUSH
52925: LD_VAR 0 3
52929: PUSH
52930: LD_INT 8
52932: GREATER
52933: OR
52934: IFFALSE 52938
// exit ;
52936: GO 52997
// if not range then
52938: LD_VAR 0 4
52942: NOT
52943: IFFALSE 52954
// range := - 12 ;
52945: LD_ADDR_VAR 0 4
52949: PUSH
52950: LD_INT 12
52952: NEG
52953: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
52954: LD_VAR 0 1
52958: PPUSH
52959: LD_VAR 0 2
52963: PPUSH
52964: LD_VAR 0 3
52968: PPUSH
52969: LD_VAR 0 4
52973: PPUSH
52974: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
52978: LD_VAR 0 1
52982: PPUSH
52983: LD_VAR 0 2
52987: PPUSH
52988: LD_VAR 0 3
52992: PPUSH
52993: CALL_OW 331
// end ;
52997: LD_VAR 0 5
53001: RET
// export function Video ( mode ) ; begin
53002: LD_INT 0
53004: PPUSH
// ingame_video = mode ;
53005: LD_ADDR_OWVAR 52
53009: PUSH
53010: LD_VAR 0 1
53014: ST_TO_ADDR
// interface_hidden = mode ;
53015: LD_ADDR_OWVAR 54
53019: PUSH
53020: LD_VAR 0 1
53024: ST_TO_ADDR
// end ;
53025: LD_VAR 0 2
53029: RET
// export function Join ( array , element ) ; begin
53030: LD_INT 0
53032: PPUSH
// result := array ^ element ;
53033: LD_ADDR_VAR 0 3
53037: PUSH
53038: LD_VAR 0 1
53042: PUSH
53043: LD_VAR 0 2
53047: ADD
53048: ST_TO_ADDR
// end ;
53049: LD_VAR 0 3
53053: RET
// export function JoinUnion ( array , element ) ; begin
53054: LD_INT 0
53056: PPUSH
// result := array union element ;
53057: LD_ADDR_VAR 0 3
53061: PUSH
53062: LD_VAR 0 1
53066: PUSH
53067: LD_VAR 0 2
53071: UNION
53072: ST_TO_ADDR
// end ;
53073: LD_VAR 0 3
53077: RET
// export function GetBehemoths ( side ) ; begin
53078: LD_INT 0
53080: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
53081: LD_ADDR_VAR 0 2
53085: PUSH
53086: LD_INT 22
53088: PUSH
53089: LD_VAR 0 1
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 31
53100: PUSH
53101: LD_INT 25
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PPUSH
53112: CALL_OW 69
53116: ST_TO_ADDR
// end ;
53117: LD_VAR 0 2
53121: RET
// export function Shuffle ( array ) ; var i , index ; begin
53122: LD_INT 0
53124: PPUSH
53125: PPUSH
53126: PPUSH
// result := [ ] ;
53127: LD_ADDR_VAR 0 2
53131: PUSH
53132: EMPTY
53133: ST_TO_ADDR
// if not array then
53134: LD_VAR 0 1
53138: NOT
53139: IFFALSE 53143
// exit ;
53141: GO 53242
// Randomize ;
53143: CALL_OW 10
// for i = array downto 1 do
53147: LD_ADDR_VAR 0 3
53151: PUSH
53152: DOUBLE
53153: LD_VAR 0 1
53157: INC
53158: ST_TO_ADDR
53159: LD_INT 1
53161: PUSH
53162: FOR_DOWNTO
53163: IFFALSE 53240
// begin index := rand ( 1 , array ) ;
53165: LD_ADDR_VAR 0 4
53169: PUSH
53170: LD_INT 1
53172: PPUSH
53173: LD_VAR 0 1
53177: PPUSH
53178: CALL_OW 12
53182: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53183: LD_ADDR_VAR 0 2
53187: PUSH
53188: LD_VAR 0 2
53192: PPUSH
53193: LD_VAR 0 2
53197: PUSH
53198: LD_INT 1
53200: PLUS
53201: PPUSH
53202: LD_VAR 0 1
53206: PUSH
53207: LD_VAR 0 4
53211: ARRAY
53212: PPUSH
53213: CALL_OW 2
53217: ST_TO_ADDR
// array := Delete ( array , index ) ;
53218: LD_ADDR_VAR 0 1
53222: PUSH
53223: LD_VAR 0 1
53227: PPUSH
53228: LD_VAR 0 4
53232: PPUSH
53233: CALL_OW 3
53237: ST_TO_ADDR
// end ;
53238: GO 53162
53240: POP
53241: POP
// end ; end_of_file
53242: LD_VAR 0 2
53246: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
53247: GO 53249
53249: DISABLE
// begin ru_radar := 98 ;
53250: LD_ADDR_EXP 45
53254: PUSH
53255: LD_INT 98
53257: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
53258: LD_ADDR_EXP 46
53262: PUSH
53263: LD_INT 89
53265: ST_TO_ADDR
// us_hack := 99 ;
53266: LD_ADDR_EXP 47
53270: PUSH
53271: LD_INT 99
53273: ST_TO_ADDR
// us_artillery := 97 ;
53274: LD_ADDR_EXP 48
53278: PUSH
53279: LD_INT 97
53281: ST_TO_ADDR
// ar_bio_bomb := 91 ;
53282: LD_ADDR_EXP 49
53286: PUSH
53287: LD_INT 91
53289: ST_TO_ADDR
// end ; end_of_file
53290: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
53291: LD_INT 0
53293: PPUSH
53294: PPUSH
// skirmish := false ;
53295: LD_ADDR_EXP 50
53299: PUSH
53300: LD_INT 0
53302: ST_TO_ADDR
// debug_mc := false ;
53303: LD_ADDR_EXP 51
53307: PUSH
53308: LD_INT 0
53310: ST_TO_ADDR
// mc_bases := [ ] ;
53311: LD_ADDR_EXP 52
53315: PUSH
53316: EMPTY
53317: ST_TO_ADDR
// mc_sides := [ ] ;
53318: LD_ADDR_EXP 78
53322: PUSH
53323: EMPTY
53324: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
53325: LD_ADDR_EXP 53
53329: PUSH
53330: EMPTY
53331: ST_TO_ADDR
// mc_building_repairs := [ ] ;
53332: LD_ADDR_EXP 54
53336: PUSH
53337: EMPTY
53338: ST_TO_ADDR
// mc_need_heal := [ ] ;
53339: LD_ADDR_EXP 55
53343: PUSH
53344: EMPTY
53345: ST_TO_ADDR
// mc_healers := [ ] ;
53346: LD_ADDR_EXP 56
53350: PUSH
53351: EMPTY
53352: ST_TO_ADDR
// mc_build_list := [ ] ;
53353: LD_ADDR_EXP 57
53357: PUSH
53358: EMPTY
53359: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
53360: LD_ADDR_EXP 84
53364: PUSH
53365: EMPTY
53366: ST_TO_ADDR
// mc_builders := [ ] ;
53367: LD_ADDR_EXP 58
53371: PUSH
53372: EMPTY
53373: ST_TO_ADDR
// mc_construct_list := [ ] ;
53374: LD_ADDR_EXP 59
53378: PUSH
53379: EMPTY
53380: ST_TO_ADDR
// mc_turret_list := [ ] ;
53381: LD_ADDR_EXP 60
53385: PUSH
53386: EMPTY
53387: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
53388: LD_ADDR_EXP 61
53392: PUSH
53393: EMPTY
53394: ST_TO_ADDR
// mc_miners := [ ] ;
53395: LD_ADDR_EXP 66
53399: PUSH
53400: EMPTY
53401: ST_TO_ADDR
// mc_mines := [ ] ;
53402: LD_ADDR_EXP 65
53406: PUSH
53407: EMPTY
53408: ST_TO_ADDR
// mc_minefields := [ ] ;
53409: LD_ADDR_EXP 67
53413: PUSH
53414: EMPTY
53415: ST_TO_ADDR
// mc_crates := [ ] ;
53416: LD_ADDR_EXP 68
53420: PUSH
53421: EMPTY
53422: ST_TO_ADDR
// mc_crates_collector := [ ] ;
53423: LD_ADDR_EXP 69
53427: PUSH
53428: EMPTY
53429: ST_TO_ADDR
// mc_crates_area := [ ] ;
53430: LD_ADDR_EXP 70
53434: PUSH
53435: EMPTY
53436: ST_TO_ADDR
// mc_vehicles := [ ] ;
53437: LD_ADDR_EXP 71
53441: PUSH
53442: EMPTY
53443: ST_TO_ADDR
// mc_attack := [ ] ;
53444: LD_ADDR_EXP 72
53448: PUSH
53449: EMPTY
53450: ST_TO_ADDR
// mc_produce := [ ] ;
53451: LD_ADDR_EXP 73
53455: PUSH
53456: EMPTY
53457: ST_TO_ADDR
// mc_defender := [ ] ;
53458: LD_ADDR_EXP 74
53462: PUSH
53463: EMPTY
53464: ST_TO_ADDR
// mc_parking := [ ] ;
53465: LD_ADDR_EXP 76
53469: PUSH
53470: EMPTY
53471: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
53472: LD_ADDR_EXP 62
53476: PUSH
53477: EMPTY
53478: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
53479: LD_ADDR_EXP 64
53483: PUSH
53484: EMPTY
53485: ST_TO_ADDR
// mc_scan := [ ] ;
53486: LD_ADDR_EXP 75
53490: PUSH
53491: EMPTY
53492: ST_TO_ADDR
// mc_scan_area := [ ] ;
53493: LD_ADDR_EXP 77
53497: PUSH
53498: EMPTY
53499: ST_TO_ADDR
// mc_tech := [ ] ;
53500: LD_ADDR_EXP 79
53504: PUSH
53505: EMPTY
53506: ST_TO_ADDR
// mc_class := [ ] ;
53507: LD_ADDR_EXP 93
53511: PUSH
53512: EMPTY
53513: ST_TO_ADDR
// mc_class_case_use := [ ] ;
53514: LD_ADDR_EXP 94
53518: PUSH
53519: EMPTY
53520: ST_TO_ADDR
// end ;
53521: LD_VAR 0 1
53525: RET
// export function MC_Kill ( base ) ; begin
53526: LD_INT 0
53528: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
53529: LD_ADDR_EXP 52
53533: PUSH
53534: LD_EXP 52
53538: PPUSH
53539: LD_VAR 0 1
53543: PPUSH
53544: EMPTY
53545: PPUSH
53546: CALL_OW 1
53550: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
53551: LD_ADDR_EXP 53
53555: PUSH
53556: LD_EXP 53
53560: PPUSH
53561: LD_VAR 0 1
53565: PPUSH
53566: EMPTY
53567: PPUSH
53568: CALL_OW 1
53572: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
53573: LD_ADDR_EXP 54
53577: PUSH
53578: LD_EXP 54
53582: PPUSH
53583: LD_VAR 0 1
53587: PPUSH
53588: EMPTY
53589: PPUSH
53590: CALL_OW 1
53594: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
53595: LD_ADDR_EXP 55
53599: PUSH
53600: LD_EXP 55
53604: PPUSH
53605: LD_VAR 0 1
53609: PPUSH
53610: EMPTY
53611: PPUSH
53612: CALL_OW 1
53616: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
53617: LD_ADDR_EXP 56
53621: PUSH
53622: LD_EXP 56
53626: PPUSH
53627: LD_VAR 0 1
53631: PPUSH
53632: EMPTY
53633: PPUSH
53634: CALL_OW 1
53638: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
53639: LD_ADDR_EXP 57
53643: PUSH
53644: LD_EXP 57
53648: PPUSH
53649: LD_VAR 0 1
53653: PPUSH
53654: EMPTY
53655: PPUSH
53656: CALL_OW 1
53660: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
53661: LD_ADDR_EXP 58
53665: PUSH
53666: LD_EXP 58
53670: PPUSH
53671: LD_VAR 0 1
53675: PPUSH
53676: EMPTY
53677: PPUSH
53678: CALL_OW 1
53682: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
53683: LD_ADDR_EXP 59
53687: PUSH
53688: LD_EXP 59
53692: PPUSH
53693: LD_VAR 0 1
53697: PPUSH
53698: EMPTY
53699: PPUSH
53700: CALL_OW 1
53704: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
53705: LD_ADDR_EXP 60
53709: PUSH
53710: LD_EXP 60
53714: PPUSH
53715: LD_VAR 0 1
53719: PPUSH
53720: EMPTY
53721: PPUSH
53722: CALL_OW 1
53726: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
53727: LD_ADDR_EXP 61
53731: PUSH
53732: LD_EXP 61
53736: PPUSH
53737: LD_VAR 0 1
53741: PPUSH
53742: EMPTY
53743: PPUSH
53744: CALL_OW 1
53748: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
53749: LD_ADDR_EXP 62
53753: PUSH
53754: LD_EXP 62
53758: PPUSH
53759: LD_VAR 0 1
53763: PPUSH
53764: EMPTY
53765: PPUSH
53766: CALL_OW 1
53770: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
53771: LD_ADDR_EXP 63
53775: PUSH
53776: LD_EXP 63
53780: PPUSH
53781: LD_VAR 0 1
53785: PPUSH
53786: LD_INT 0
53788: PPUSH
53789: CALL_OW 1
53793: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
53794: LD_ADDR_EXP 64
53798: PUSH
53799: LD_EXP 64
53803: PPUSH
53804: LD_VAR 0 1
53808: PPUSH
53809: EMPTY
53810: PPUSH
53811: CALL_OW 1
53815: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
53816: LD_ADDR_EXP 65
53820: PUSH
53821: LD_EXP 65
53825: PPUSH
53826: LD_VAR 0 1
53830: PPUSH
53831: EMPTY
53832: PPUSH
53833: CALL_OW 1
53837: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
53838: LD_ADDR_EXP 66
53842: PUSH
53843: LD_EXP 66
53847: PPUSH
53848: LD_VAR 0 1
53852: PPUSH
53853: EMPTY
53854: PPUSH
53855: CALL_OW 1
53859: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
53860: LD_ADDR_EXP 67
53864: PUSH
53865: LD_EXP 67
53869: PPUSH
53870: LD_VAR 0 1
53874: PPUSH
53875: EMPTY
53876: PPUSH
53877: CALL_OW 1
53881: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
53882: LD_ADDR_EXP 68
53886: PUSH
53887: LD_EXP 68
53891: PPUSH
53892: LD_VAR 0 1
53896: PPUSH
53897: EMPTY
53898: PPUSH
53899: CALL_OW 1
53903: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
53904: LD_ADDR_EXP 69
53908: PUSH
53909: LD_EXP 69
53913: PPUSH
53914: LD_VAR 0 1
53918: PPUSH
53919: EMPTY
53920: PPUSH
53921: CALL_OW 1
53925: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
53926: LD_ADDR_EXP 70
53930: PUSH
53931: LD_EXP 70
53935: PPUSH
53936: LD_VAR 0 1
53940: PPUSH
53941: EMPTY
53942: PPUSH
53943: CALL_OW 1
53947: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
53948: LD_ADDR_EXP 71
53952: PUSH
53953: LD_EXP 71
53957: PPUSH
53958: LD_VAR 0 1
53962: PPUSH
53963: EMPTY
53964: PPUSH
53965: CALL_OW 1
53969: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
53970: LD_ADDR_EXP 72
53974: PUSH
53975: LD_EXP 72
53979: PPUSH
53980: LD_VAR 0 1
53984: PPUSH
53985: EMPTY
53986: PPUSH
53987: CALL_OW 1
53991: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
53992: LD_ADDR_EXP 73
53996: PUSH
53997: LD_EXP 73
54001: PPUSH
54002: LD_VAR 0 1
54006: PPUSH
54007: EMPTY
54008: PPUSH
54009: CALL_OW 1
54013: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
54014: LD_ADDR_EXP 74
54018: PUSH
54019: LD_EXP 74
54023: PPUSH
54024: LD_VAR 0 1
54028: PPUSH
54029: EMPTY
54030: PPUSH
54031: CALL_OW 1
54035: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
54036: LD_ADDR_EXP 75
54040: PUSH
54041: LD_EXP 75
54045: PPUSH
54046: LD_VAR 0 1
54050: PPUSH
54051: EMPTY
54052: PPUSH
54053: CALL_OW 1
54057: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
54058: LD_ADDR_EXP 76
54062: PUSH
54063: LD_EXP 76
54067: PPUSH
54068: LD_VAR 0 1
54072: PPUSH
54073: EMPTY
54074: PPUSH
54075: CALL_OW 1
54079: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
54080: LD_ADDR_EXP 77
54084: PUSH
54085: LD_EXP 77
54089: PPUSH
54090: LD_VAR 0 1
54094: PPUSH
54095: EMPTY
54096: PPUSH
54097: CALL_OW 1
54101: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
54102: LD_ADDR_EXP 79
54106: PUSH
54107: LD_EXP 79
54111: PPUSH
54112: LD_VAR 0 1
54116: PPUSH
54117: EMPTY
54118: PPUSH
54119: CALL_OW 1
54123: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
54124: LD_ADDR_EXP 81
54128: PUSH
54129: LD_EXP 81
54133: PPUSH
54134: LD_VAR 0 1
54138: PPUSH
54139: EMPTY
54140: PPUSH
54141: CALL_OW 1
54145: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
54146: LD_ADDR_EXP 82
54150: PUSH
54151: LD_EXP 82
54155: PPUSH
54156: LD_VAR 0 1
54160: PPUSH
54161: EMPTY
54162: PPUSH
54163: CALL_OW 1
54167: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
54168: LD_ADDR_EXP 83
54172: PUSH
54173: LD_EXP 83
54177: PPUSH
54178: LD_VAR 0 1
54182: PPUSH
54183: EMPTY
54184: PPUSH
54185: CALL_OW 1
54189: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
54190: LD_ADDR_EXP 84
54194: PUSH
54195: LD_EXP 84
54199: PPUSH
54200: LD_VAR 0 1
54204: PPUSH
54205: EMPTY
54206: PPUSH
54207: CALL_OW 1
54211: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
54212: LD_ADDR_EXP 85
54216: PUSH
54217: LD_EXP 85
54221: PPUSH
54222: LD_VAR 0 1
54226: PPUSH
54227: EMPTY
54228: PPUSH
54229: CALL_OW 1
54233: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
54234: LD_ADDR_EXP 86
54238: PUSH
54239: LD_EXP 86
54243: PPUSH
54244: LD_VAR 0 1
54248: PPUSH
54249: EMPTY
54250: PPUSH
54251: CALL_OW 1
54255: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
54256: LD_ADDR_EXP 87
54260: PUSH
54261: LD_EXP 87
54265: PPUSH
54266: LD_VAR 0 1
54270: PPUSH
54271: EMPTY
54272: PPUSH
54273: CALL_OW 1
54277: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
54278: LD_ADDR_EXP 88
54282: PUSH
54283: LD_EXP 88
54287: PPUSH
54288: LD_VAR 0 1
54292: PPUSH
54293: EMPTY
54294: PPUSH
54295: CALL_OW 1
54299: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
54300: LD_ADDR_EXP 89
54304: PUSH
54305: LD_EXP 89
54309: PPUSH
54310: LD_VAR 0 1
54314: PPUSH
54315: EMPTY
54316: PPUSH
54317: CALL_OW 1
54321: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
54322: LD_ADDR_EXP 90
54326: PUSH
54327: LD_EXP 90
54331: PPUSH
54332: LD_VAR 0 1
54336: PPUSH
54337: EMPTY
54338: PPUSH
54339: CALL_OW 1
54343: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
54344: LD_ADDR_EXP 91
54348: PUSH
54349: LD_EXP 91
54353: PPUSH
54354: LD_VAR 0 1
54358: PPUSH
54359: EMPTY
54360: PPUSH
54361: CALL_OW 1
54365: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
54366: LD_ADDR_EXP 92
54370: PUSH
54371: LD_EXP 92
54375: PPUSH
54376: LD_VAR 0 1
54380: PPUSH
54381: EMPTY
54382: PPUSH
54383: CALL_OW 1
54387: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
54388: LD_ADDR_EXP 93
54392: PUSH
54393: LD_EXP 93
54397: PPUSH
54398: LD_VAR 0 1
54402: PPUSH
54403: EMPTY
54404: PPUSH
54405: CALL_OW 1
54409: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
54410: LD_ADDR_EXP 94
54414: PUSH
54415: LD_EXP 94
54419: PPUSH
54420: LD_VAR 0 1
54424: PPUSH
54425: LD_INT 0
54427: PPUSH
54428: CALL_OW 1
54432: ST_TO_ADDR
// end ;
54433: LD_VAR 0 2
54437: RET
// export function MC_Add ( side , units ) ; var base ; begin
54438: LD_INT 0
54440: PPUSH
54441: PPUSH
// base := mc_bases + 1 ;
54442: LD_ADDR_VAR 0 4
54446: PUSH
54447: LD_EXP 52
54451: PUSH
54452: LD_INT 1
54454: PLUS
54455: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
54456: LD_ADDR_EXP 78
54460: PUSH
54461: LD_EXP 78
54465: PPUSH
54466: LD_VAR 0 4
54470: PPUSH
54471: LD_VAR 0 1
54475: PPUSH
54476: CALL_OW 1
54480: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
54481: LD_ADDR_EXP 52
54485: PUSH
54486: LD_EXP 52
54490: PPUSH
54491: LD_VAR 0 4
54495: PPUSH
54496: LD_VAR 0 2
54500: PPUSH
54501: CALL_OW 1
54505: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
54506: LD_ADDR_EXP 53
54510: PUSH
54511: LD_EXP 53
54515: PPUSH
54516: LD_VAR 0 4
54520: PPUSH
54521: EMPTY
54522: PPUSH
54523: CALL_OW 1
54527: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
54528: LD_ADDR_EXP 54
54532: PUSH
54533: LD_EXP 54
54537: PPUSH
54538: LD_VAR 0 4
54542: PPUSH
54543: EMPTY
54544: PPUSH
54545: CALL_OW 1
54549: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
54550: LD_ADDR_EXP 55
54554: PUSH
54555: LD_EXP 55
54559: PPUSH
54560: LD_VAR 0 4
54564: PPUSH
54565: EMPTY
54566: PPUSH
54567: CALL_OW 1
54571: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
54572: LD_ADDR_EXP 56
54576: PUSH
54577: LD_EXP 56
54581: PPUSH
54582: LD_VAR 0 4
54586: PPUSH
54587: EMPTY
54588: PPUSH
54589: CALL_OW 1
54593: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
54594: LD_ADDR_EXP 57
54598: PUSH
54599: LD_EXP 57
54603: PPUSH
54604: LD_VAR 0 4
54608: PPUSH
54609: EMPTY
54610: PPUSH
54611: CALL_OW 1
54615: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
54616: LD_ADDR_EXP 58
54620: PUSH
54621: LD_EXP 58
54625: PPUSH
54626: LD_VAR 0 4
54630: PPUSH
54631: EMPTY
54632: PPUSH
54633: CALL_OW 1
54637: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
54638: LD_ADDR_EXP 59
54642: PUSH
54643: LD_EXP 59
54647: PPUSH
54648: LD_VAR 0 4
54652: PPUSH
54653: EMPTY
54654: PPUSH
54655: CALL_OW 1
54659: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
54660: LD_ADDR_EXP 60
54664: PUSH
54665: LD_EXP 60
54669: PPUSH
54670: LD_VAR 0 4
54674: PPUSH
54675: EMPTY
54676: PPUSH
54677: CALL_OW 1
54681: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
54682: LD_ADDR_EXP 61
54686: PUSH
54687: LD_EXP 61
54691: PPUSH
54692: LD_VAR 0 4
54696: PPUSH
54697: EMPTY
54698: PPUSH
54699: CALL_OW 1
54703: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
54704: LD_ADDR_EXP 62
54708: PUSH
54709: LD_EXP 62
54713: PPUSH
54714: LD_VAR 0 4
54718: PPUSH
54719: EMPTY
54720: PPUSH
54721: CALL_OW 1
54725: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
54726: LD_ADDR_EXP 63
54730: PUSH
54731: LD_EXP 63
54735: PPUSH
54736: LD_VAR 0 4
54740: PPUSH
54741: LD_INT 0
54743: PPUSH
54744: CALL_OW 1
54748: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
54749: LD_ADDR_EXP 64
54753: PUSH
54754: LD_EXP 64
54758: PPUSH
54759: LD_VAR 0 4
54763: PPUSH
54764: EMPTY
54765: PPUSH
54766: CALL_OW 1
54770: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
54771: LD_ADDR_EXP 65
54775: PUSH
54776: LD_EXP 65
54780: PPUSH
54781: LD_VAR 0 4
54785: PPUSH
54786: EMPTY
54787: PPUSH
54788: CALL_OW 1
54792: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
54793: LD_ADDR_EXP 66
54797: PUSH
54798: LD_EXP 66
54802: PPUSH
54803: LD_VAR 0 4
54807: PPUSH
54808: EMPTY
54809: PPUSH
54810: CALL_OW 1
54814: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
54815: LD_ADDR_EXP 67
54819: PUSH
54820: LD_EXP 67
54824: PPUSH
54825: LD_VAR 0 4
54829: PPUSH
54830: EMPTY
54831: PPUSH
54832: CALL_OW 1
54836: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
54837: LD_ADDR_EXP 68
54841: PUSH
54842: LD_EXP 68
54846: PPUSH
54847: LD_VAR 0 4
54851: PPUSH
54852: EMPTY
54853: PPUSH
54854: CALL_OW 1
54858: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
54859: LD_ADDR_EXP 69
54863: PUSH
54864: LD_EXP 69
54868: PPUSH
54869: LD_VAR 0 4
54873: PPUSH
54874: EMPTY
54875: PPUSH
54876: CALL_OW 1
54880: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
54881: LD_ADDR_EXP 70
54885: PUSH
54886: LD_EXP 70
54890: PPUSH
54891: LD_VAR 0 4
54895: PPUSH
54896: EMPTY
54897: PPUSH
54898: CALL_OW 1
54902: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
54903: LD_ADDR_EXP 71
54907: PUSH
54908: LD_EXP 71
54912: PPUSH
54913: LD_VAR 0 4
54917: PPUSH
54918: EMPTY
54919: PPUSH
54920: CALL_OW 1
54924: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
54925: LD_ADDR_EXP 72
54929: PUSH
54930: LD_EXP 72
54934: PPUSH
54935: LD_VAR 0 4
54939: PPUSH
54940: EMPTY
54941: PPUSH
54942: CALL_OW 1
54946: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
54947: LD_ADDR_EXP 73
54951: PUSH
54952: LD_EXP 73
54956: PPUSH
54957: LD_VAR 0 4
54961: PPUSH
54962: EMPTY
54963: PPUSH
54964: CALL_OW 1
54968: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
54969: LD_ADDR_EXP 74
54973: PUSH
54974: LD_EXP 74
54978: PPUSH
54979: LD_VAR 0 4
54983: PPUSH
54984: EMPTY
54985: PPUSH
54986: CALL_OW 1
54990: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
54991: LD_ADDR_EXP 75
54995: PUSH
54996: LD_EXP 75
55000: PPUSH
55001: LD_VAR 0 4
55005: PPUSH
55006: EMPTY
55007: PPUSH
55008: CALL_OW 1
55012: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
55013: LD_ADDR_EXP 76
55017: PUSH
55018: LD_EXP 76
55022: PPUSH
55023: LD_VAR 0 4
55027: PPUSH
55028: EMPTY
55029: PPUSH
55030: CALL_OW 1
55034: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
55035: LD_ADDR_EXP 77
55039: PUSH
55040: LD_EXP 77
55044: PPUSH
55045: LD_VAR 0 4
55049: PPUSH
55050: EMPTY
55051: PPUSH
55052: CALL_OW 1
55056: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
55057: LD_ADDR_EXP 79
55061: PUSH
55062: LD_EXP 79
55066: PPUSH
55067: LD_VAR 0 4
55071: PPUSH
55072: EMPTY
55073: PPUSH
55074: CALL_OW 1
55078: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
55079: LD_ADDR_EXP 81
55083: PUSH
55084: LD_EXP 81
55088: PPUSH
55089: LD_VAR 0 4
55093: PPUSH
55094: EMPTY
55095: PPUSH
55096: CALL_OW 1
55100: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
55101: LD_ADDR_EXP 82
55105: PUSH
55106: LD_EXP 82
55110: PPUSH
55111: LD_VAR 0 4
55115: PPUSH
55116: EMPTY
55117: PPUSH
55118: CALL_OW 1
55122: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
55123: LD_ADDR_EXP 83
55127: PUSH
55128: LD_EXP 83
55132: PPUSH
55133: LD_VAR 0 4
55137: PPUSH
55138: EMPTY
55139: PPUSH
55140: CALL_OW 1
55144: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
55145: LD_ADDR_EXP 84
55149: PUSH
55150: LD_EXP 84
55154: PPUSH
55155: LD_VAR 0 4
55159: PPUSH
55160: EMPTY
55161: PPUSH
55162: CALL_OW 1
55166: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
55167: LD_ADDR_EXP 85
55171: PUSH
55172: LD_EXP 85
55176: PPUSH
55177: LD_VAR 0 4
55181: PPUSH
55182: EMPTY
55183: PPUSH
55184: CALL_OW 1
55188: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
55189: LD_ADDR_EXP 86
55193: PUSH
55194: LD_EXP 86
55198: PPUSH
55199: LD_VAR 0 4
55203: PPUSH
55204: EMPTY
55205: PPUSH
55206: CALL_OW 1
55210: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
55211: LD_ADDR_EXP 87
55215: PUSH
55216: LD_EXP 87
55220: PPUSH
55221: LD_VAR 0 4
55225: PPUSH
55226: EMPTY
55227: PPUSH
55228: CALL_OW 1
55232: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
55233: LD_ADDR_EXP 88
55237: PUSH
55238: LD_EXP 88
55242: PPUSH
55243: LD_VAR 0 4
55247: PPUSH
55248: EMPTY
55249: PPUSH
55250: CALL_OW 1
55254: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
55255: LD_ADDR_EXP 89
55259: PUSH
55260: LD_EXP 89
55264: PPUSH
55265: LD_VAR 0 4
55269: PPUSH
55270: EMPTY
55271: PPUSH
55272: CALL_OW 1
55276: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
55277: LD_ADDR_EXP 90
55281: PUSH
55282: LD_EXP 90
55286: PPUSH
55287: LD_VAR 0 4
55291: PPUSH
55292: EMPTY
55293: PPUSH
55294: CALL_OW 1
55298: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
55299: LD_ADDR_EXP 91
55303: PUSH
55304: LD_EXP 91
55308: PPUSH
55309: LD_VAR 0 4
55313: PPUSH
55314: EMPTY
55315: PPUSH
55316: CALL_OW 1
55320: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
55321: LD_ADDR_EXP 92
55325: PUSH
55326: LD_EXP 92
55330: PPUSH
55331: LD_VAR 0 4
55335: PPUSH
55336: EMPTY
55337: PPUSH
55338: CALL_OW 1
55342: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
55343: LD_ADDR_EXP 93
55347: PUSH
55348: LD_EXP 93
55352: PPUSH
55353: LD_VAR 0 4
55357: PPUSH
55358: EMPTY
55359: PPUSH
55360: CALL_OW 1
55364: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
55365: LD_ADDR_EXP 94
55369: PUSH
55370: LD_EXP 94
55374: PPUSH
55375: LD_VAR 0 4
55379: PPUSH
55380: LD_INT 0
55382: PPUSH
55383: CALL_OW 1
55387: ST_TO_ADDR
// result := base ;
55388: LD_ADDR_VAR 0 3
55392: PUSH
55393: LD_VAR 0 4
55397: ST_TO_ADDR
// end ;
55398: LD_VAR 0 3
55402: RET
// export function MC_Start ( ) ; var i ; begin
55403: LD_INT 0
55405: PPUSH
55406: PPUSH
// for i = 1 to mc_bases do
55407: LD_ADDR_VAR 0 2
55411: PUSH
55412: DOUBLE
55413: LD_INT 1
55415: DEC
55416: ST_TO_ADDR
55417: LD_EXP 52
55421: PUSH
55422: FOR_TO
55423: IFFALSE 56500
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
55425: LD_ADDR_EXP 52
55429: PUSH
55430: LD_EXP 52
55434: PPUSH
55435: LD_VAR 0 2
55439: PPUSH
55440: LD_EXP 52
55444: PUSH
55445: LD_VAR 0 2
55449: ARRAY
55450: PUSH
55451: LD_INT 0
55453: DIFF
55454: PPUSH
55455: CALL_OW 1
55459: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
55460: LD_ADDR_EXP 53
55464: PUSH
55465: LD_EXP 53
55469: PPUSH
55470: LD_VAR 0 2
55474: PPUSH
55475: EMPTY
55476: PPUSH
55477: CALL_OW 1
55481: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
55482: LD_ADDR_EXP 54
55486: PUSH
55487: LD_EXP 54
55491: PPUSH
55492: LD_VAR 0 2
55496: PPUSH
55497: EMPTY
55498: PPUSH
55499: CALL_OW 1
55503: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
55504: LD_ADDR_EXP 55
55508: PUSH
55509: LD_EXP 55
55513: PPUSH
55514: LD_VAR 0 2
55518: PPUSH
55519: EMPTY
55520: PPUSH
55521: CALL_OW 1
55525: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
55526: LD_ADDR_EXP 56
55530: PUSH
55531: LD_EXP 56
55535: PPUSH
55536: LD_VAR 0 2
55540: PPUSH
55541: EMPTY
55542: PUSH
55543: EMPTY
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PPUSH
55549: CALL_OW 1
55553: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
55554: LD_ADDR_EXP 57
55558: PUSH
55559: LD_EXP 57
55563: PPUSH
55564: LD_VAR 0 2
55568: PPUSH
55569: EMPTY
55570: PPUSH
55571: CALL_OW 1
55575: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
55576: LD_ADDR_EXP 84
55580: PUSH
55581: LD_EXP 84
55585: PPUSH
55586: LD_VAR 0 2
55590: PPUSH
55591: EMPTY
55592: PPUSH
55593: CALL_OW 1
55597: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
55598: LD_ADDR_EXP 58
55602: PUSH
55603: LD_EXP 58
55607: PPUSH
55608: LD_VAR 0 2
55612: PPUSH
55613: EMPTY
55614: PPUSH
55615: CALL_OW 1
55619: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
55620: LD_ADDR_EXP 59
55624: PUSH
55625: LD_EXP 59
55629: PPUSH
55630: LD_VAR 0 2
55634: PPUSH
55635: EMPTY
55636: PPUSH
55637: CALL_OW 1
55641: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
55642: LD_ADDR_EXP 60
55646: PUSH
55647: LD_EXP 60
55651: PPUSH
55652: LD_VAR 0 2
55656: PPUSH
55657: LD_EXP 52
55661: PUSH
55662: LD_VAR 0 2
55666: ARRAY
55667: PPUSH
55668: LD_INT 2
55670: PUSH
55671: LD_INT 30
55673: PUSH
55674: LD_INT 32
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 30
55683: PUSH
55684: LD_INT 33
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: LIST
55695: PPUSH
55696: CALL_OW 72
55700: PPUSH
55701: CALL_OW 1
55705: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
55706: LD_ADDR_EXP 61
55710: PUSH
55711: LD_EXP 61
55715: PPUSH
55716: LD_VAR 0 2
55720: PPUSH
55721: LD_EXP 52
55725: PUSH
55726: LD_VAR 0 2
55730: ARRAY
55731: PPUSH
55732: LD_INT 2
55734: PUSH
55735: LD_INT 30
55737: PUSH
55738: LD_INT 32
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 30
55747: PUSH
55748: LD_INT 31
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 58
55762: PUSH
55763: EMPTY
55764: LIST
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PPUSH
55770: CALL_OW 72
55774: PPUSH
55775: CALL_OW 1
55779: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
55780: LD_ADDR_EXP 62
55784: PUSH
55785: LD_EXP 62
55789: PPUSH
55790: LD_VAR 0 2
55794: PPUSH
55795: EMPTY
55796: PPUSH
55797: CALL_OW 1
55801: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
55802: LD_ADDR_EXP 66
55806: PUSH
55807: LD_EXP 66
55811: PPUSH
55812: LD_VAR 0 2
55816: PPUSH
55817: EMPTY
55818: PPUSH
55819: CALL_OW 1
55823: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
55824: LD_ADDR_EXP 65
55828: PUSH
55829: LD_EXP 65
55833: PPUSH
55834: LD_VAR 0 2
55838: PPUSH
55839: EMPTY
55840: PPUSH
55841: CALL_OW 1
55845: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
55846: LD_ADDR_EXP 67
55850: PUSH
55851: LD_EXP 67
55855: PPUSH
55856: LD_VAR 0 2
55860: PPUSH
55861: EMPTY
55862: PPUSH
55863: CALL_OW 1
55867: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
55868: LD_ADDR_EXP 68
55872: PUSH
55873: LD_EXP 68
55877: PPUSH
55878: LD_VAR 0 2
55882: PPUSH
55883: EMPTY
55884: PPUSH
55885: CALL_OW 1
55889: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
55890: LD_ADDR_EXP 69
55894: PUSH
55895: LD_EXP 69
55899: PPUSH
55900: LD_VAR 0 2
55904: PPUSH
55905: EMPTY
55906: PPUSH
55907: CALL_OW 1
55911: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
55912: LD_ADDR_EXP 70
55916: PUSH
55917: LD_EXP 70
55921: PPUSH
55922: LD_VAR 0 2
55926: PPUSH
55927: EMPTY
55928: PPUSH
55929: CALL_OW 1
55933: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
55934: LD_ADDR_EXP 71
55938: PUSH
55939: LD_EXP 71
55943: PPUSH
55944: LD_VAR 0 2
55948: PPUSH
55949: EMPTY
55950: PPUSH
55951: CALL_OW 1
55955: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
55956: LD_ADDR_EXP 72
55960: PUSH
55961: LD_EXP 72
55965: PPUSH
55966: LD_VAR 0 2
55970: PPUSH
55971: EMPTY
55972: PPUSH
55973: CALL_OW 1
55977: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
55978: LD_ADDR_EXP 73
55982: PUSH
55983: LD_EXP 73
55987: PPUSH
55988: LD_VAR 0 2
55992: PPUSH
55993: EMPTY
55994: PPUSH
55995: CALL_OW 1
55999: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
56000: LD_ADDR_EXP 74
56004: PUSH
56005: LD_EXP 74
56009: PPUSH
56010: LD_VAR 0 2
56014: PPUSH
56015: EMPTY
56016: PPUSH
56017: CALL_OW 1
56021: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
56022: LD_ADDR_EXP 63
56026: PUSH
56027: LD_EXP 63
56031: PPUSH
56032: LD_VAR 0 2
56036: PPUSH
56037: LD_INT 0
56039: PPUSH
56040: CALL_OW 1
56044: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
56045: LD_ADDR_EXP 76
56049: PUSH
56050: LD_EXP 76
56054: PPUSH
56055: LD_VAR 0 2
56059: PPUSH
56060: LD_INT 0
56062: PPUSH
56063: CALL_OW 1
56067: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
56068: LD_ADDR_EXP 64
56072: PUSH
56073: LD_EXP 64
56077: PPUSH
56078: LD_VAR 0 2
56082: PPUSH
56083: EMPTY
56084: PPUSH
56085: CALL_OW 1
56089: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
56090: LD_ADDR_EXP 75
56094: PUSH
56095: LD_EXP 75
56099: PPUSH
56100: LD_VAR 0 2
56104: PPUSH
56105: LD_INT 0
56107: PPUSH
56108: CALL_OW 1
56112: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
56113: LD_ADDR_EXP 77
56117: PUSH
56118: LD_EXP 77
56122: PPUSH
56123: LD_VAR 0 2
56127: PPUSH
56128: EMPTY
56129: PPUSH
56130: CALL_OW 1
56134: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
56135: LD_ADDR_EXP 80
56139: PUSH
56140: LD_EXP 80
56144: PPUSH
56145: LD_VAR 0 2
56149: PPUSH
56150: LD_INT 0
56152: PPUSH
56153: CALL_OW 1
56157: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
56158: LD_ADDR_EXP 81
56162: PUSH
56163: LD_EXP 81
56167: PPUSH
56168: LD_VAR 0 2
56172: PPUSH
56173: EMPTY
56174: PPUSH
56175: CALL_OW 1
56179: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
56180: LD_ADDR_EXP 82
56184: PUSH
56185: LD_EXP 82
56189: PPUSH
56190: LD_VAR 0 2
56194: PPUSH
56195: EMPTY
56196: PPUSH
56197: CALL_OW 1
56201: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
56202: LD_ADDR_EXP 83
56206: PUSH
56207: LD_EXP 83
56211: PPUSH
56212: LD_VAR 0 2
56216: PPUSH
56217: EMPTY
56218: PPUSH
56219: CALL_OW 1
56223: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
56224: LD_ADDR_EXP 85
56228: PUSH
56229: LD_EXP 85
56233: PPUSH
56234: LD_VAR 0 2
56238: PPUSH
56239: LD_EXP 52
56243: PUSH
56244: LD_VAR 0 2
56248: ARRAY
56249: PPUSH
56250: LD_INT 2
56252: PUSH
56253: LD_INT 30
56255: PUSH
56256: LD_INT 6
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 30
56265: PUSH
56266: LD_INT 7
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 30
56275: PUSH
56276: LD_INT 8
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: PPUSH
56289: CALL_OW 72
56293: PPUSH
56294: CALL_OW 1
56298: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
56299: LD_ADDR_EXP 86
56303: PUSH
56304: LD_EXP 86
56308: PPUSH
56309: LD_VAR 0 2
56313: PPUSH
56314: EMPTY
56315: PPUSH
56316: CALL_OW 1
56320: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
56321: LD_ADDR_EXP 87
56325: PUSH
56326: LD_EXP 87
56330: PPUSH
56331: LD_VAR 0 2
56335: PPUSH
56336: EMPTY
56337: PPUSH
56338: CALL_OW 1
56342: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
56343: LD_ADDR_EXP 88
56347: PUSH
56348: LD_EXP 88
56352: PPUSH
56353: LD_VAR 0 2
56357: PPUSH
56358: EMPTY
56359: PPUSH
56360: CALL_OW 1
56364: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
56365: LD_ADDR_EXP 89
56369: PUSH
56370: LD_EXP 89
56374: PPUSH
56375: LD_VAR 0 2
56379: PPUSH
56380: EMPTY
56381: PPUSH
56382: CALL_OW 1
56386: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
56387: LD_ADDR_EXP 90
56391: PUSH
56392: LD_EXP 90
56396: PPUSH
56397: LD_VAR 0 2
56401: PPUSH
56402: EMPTY
56403: PPUSH
56404: CALL_OW 1
56408: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
56409: LD_ADDR_EXP 91
56413: PUSH
56414: LD_EXP 91
56418: PPUSH
56419: LD_VAR 0 2
56423: PPUSH
56424: EMPTY
56425: PPUSH
56426: CALL_OW 1
56430: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
56431: LD_ADDR_EXP 92
56435: PUSH
56436: LD_EXP 92
56440: PPUSH
56441: LD_VAR 0 2
56445: PPUSH
56446: EMPTY
56447: PPUSH
56448: CALL_OW 1
56452: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
56453: LD_ADDR_EXP 93
56457: PUSH
56458: LD_EXP 93
56462: PPUSH
56463: LD_VAR 0 2
56467: PPUSH
56468: EMPTY
56469: PPUSH
56470: CALL_OW 1
56474: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
56475: LD_ADDR_EXP 94
56479: PUSH
56480: LD_EXP 94
56484: PPUSH
56485: LD_VAR 0 2
56489: PPUSH
56490: LD_INT 0
56492: PPUSH
56493: CALL_OW 1
56497: ST_TO_ADDR
// end ;
56498: GO 55422
56500: POP
56501: POP
// MC_InitSides ( ) ;
56502: CALL 56788 0 0
// MC_InitResearch ( ) ;
56506: CALL 56527 0 0
// CustomInitMacro ( ) ;
56510: CALL 5303 0 0
// skirmish := true ;
56514: LD_ADDR_EXP 50
56518: PUSH
56519: LD_INT 1
56521: ST_TO_ADDR
// end ;
56522: LD_VAR 0 1
56526: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
56527: LD_INT 0
56529: PPUSH
56530: PPUSH
56531: PPUSH
56532: PPUSH
56533: PPUSH
56534: PPUSH
// if not mc_bases then
56535: LD_EXP 52
56539: NOT
56540: IFFALSE 56544
// exit ;
56542: GO 56783
// for i = 1 to 8 do
56544: LD_ADDR_VAR 0 2
56548: PUSH
56549: DOUBLE
56550: LD_INT 1
56552: DEC
56553: ST_TO_ADDR
56554: LD_INT 8
56556: PUSH
56557: FOR_TO
56558: IFFALSE 56584
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
56560: LD_ADDR_EXP 79
56564: PUSH
56565: LD_EXP 79
56569: PPUSH
56570: LD_VAR 0 2
56574: PPUSH
56575: EMPTY
56576: PPUSH
56577: CALL_OW 1
56581: ST_TO_ADDR
56582: GO 56557
56584: POP
56585: POP
// tmp := [ ] ;
56586: LD_ADDR_VAR 0 5
56590: PUSH
56591: EMPTY
56592: ST_TO_ADDR
// for i = 1 to mc_sides do
56593: LD_ADDR_VAR 0 2
56597: PUSH
56598: DOUBLE
56599: LD_INT 1
56601: DEC
56602: ST_TO_ADDR
56603: LD_EXP 78
56607: PUSH
56608: FOR_TO
56609: IFFALSE 56667
// if not mc_sides [ i ] in tmp then
56611: LD_EXP 78
56615: PUSH
56616: LD_VAR 0 2
56620: ARRAY
56621: PUSH
56622: LD_VAR 0 5
56626: IN
56627: NOT
56628: IFFALSE 56665
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
56630: LD_ADDR_VAR 0 5
56634: PUSH
56635: LD_VAR 0 5
56639: PPUSH
56640: LD_VAR 0 5
56644: PUSH
56645: LD_INT 1
56647: PLUS
56648: PPUSH
56649: LD_EXP 78
56653: PUSH
56654: LD_VAR 0 2
56658: ARRAY
56659: PPUSH
56660: CALL_OW 2
56664: ST_TO_ADDR
56665: GO 56608
56667: POP
56668: POP
// if not tmp then
56669: LD_VAR 0 5
56673: NOT
56674: IFFALSE 56678
// exit ;
56676: GO 56783
// for j in tmp do
56678: LD_ADDR_VAR 0 3
56682: PUSH
56683: LD_VAR 0 5
56687: PUSH
56688: FOR_IN
56689: IFFALSE 56781
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
56691: LD_ADDR_VAR 0 6
56695: PUSH
56696: LD_INT 22
56698: PUSH
56699: LD_VAR 0 3
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PPUSH
56708: CALL_OW 69
56712: ST_TO_ADDR
// if not un then
56713: LD_VAR 0 6
56717: NOT
56718: IFFALSE 56722
// continue ;
56720: GO 56688
// nation := GetNation ( un [ 1 ] ) ;
56722: LD_ADDR_VAR 0 4
56726: PUSH
56727: LD_VAR 0 6
56731: PUSH
56732: LD_INT 1
56734: ARRAY
56735: PPUSH
56736: CALL_OW 248
56740: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
56741: LD_ADDR_EXP 79
56745: PUSH
56746: LD_EXP 79
56750: PPUSH
56751: LD_VAR 0 3
56755: PPUSH
56756: LD_VAR 0 3
56760: PPUSH
56761: LD_VAR 0 4
56765: PPUSH
56766: LD_INT 1
56768: PPUSH
56769: CALL 10751 0 3
56773: PPUSH
56774: CALL_OW 1
56778: ST_TO_ADDR
// end ;
56779: GO 56688
56781: POP
56782: POP
// end ;
56783: LD_VAR 0 1
56787: RET
// export function MC_InitSides ( ) ; var i ; begin
56788: LD_INT 0
56790: PPUSH
56791: PPUSH
// if not mc_bases then
56792: LD_EXP 52
56796: NOT
56797: IFFALSE 56801
// exit ;
56799: GO 56875
// for i = 1 to mc_bases do
56801: LD_ADDR_VAR 0 2
56805: PUSH
56806: DOUBLE
56807: LD_INT 1
56809: DEC
56810: ST_TO_ADDR
56811: LD_EXP 52
56815: PUSH
56816: FOR_TO
56817: IFFALSE 56873
// if mc_bases [ i ] then
56819: LD_EXP 52
56823: PUSH
56824: LD_VAR 0 2
56828: ARRAY
56829: IFFALSE 56871
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
56831: LD_ADDR_EXP 78
56835: PUSH
56836: LD_EXP 78
56840: PPUSH
56841: LD_VAR 0 2
56845: PPUSH
56846: LD_EXP 52
56850: PUSH
56851: LD_VAR 0 2
56855: ARRAY
56856: PUSH
56857: LD_INT 1
56859: ARRAY
56860: PPUSH
56861: CALL_OW 255
56865: PPUSH
56866: CALL_OW 1
56870: ST_TO_ADDR
56871: GO 56816
56873: POP
56874: POP
// end ;
56875: LD_VAR 0 1
56879: RET
// every 0 0$01 trigger skirmish do
56880: LD_EXP 50
56884: IFFALSE 57038
56886: GO 56888
56888: DISABLE
// begin enable ;
56889: ENABLE
// MC_CheckBuildings ( ) ;
56890: CALL 61527 0 0
// MC_CheckPeopleLife ( ) ;
56894: CALL 61652 0 0
// RaiseSailEvent ( 100 ) ;
56898: LD_INT 100
56900: PPUSH
56901: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
56905: LD_INT 103
56907: PPUSH
56908: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
56912: LD_INT 104
56914: PPUSH
56915: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
56919: LD_INT 105
56921: PPUSH
56922: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
56926: LD_INT 106
56928: PPUSH
56929: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
56933: LD_INT 107
56935: PPUSH
56936: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
56940: LD_INT 108
56942: PPUSH
56943: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
56947: LD_INT 109
56949: PPUSH
56950: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
56954: LD_INT 110
56956: PPUSH
56957: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
56961: LD_INT 111
56963: PPUSH
56964: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
56968: LD_INT 112
56970: PPUSH
56971: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
56975: LD_INT 113
56977: PPUSH
56978: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
56982: LD_INT 120
56984: PPUSH
56985: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
56989: LD_INT 121
56991: PPUSH
56992: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
56996: LD_INT 122
56998: PPUSH
56999: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
57003: LD_INT 123
57005: PPUSH
57006: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
57010: LD_INT 124
57012: PPUSH
57013: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
57017: LD_INT 125
57019: PPUSH
57020: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
57024: LD_INT 126
57026: PPUSH
57027: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
57031: LD_INT 200
57033: PPUSH
57034: CALL_OW 427
// end ;
57038: END
// on SailEvent ( event ) do begin if event < 100 then
57039: LD_VAR 0 1
57043: PUSH
57044: LD_INT 100
57046: LESS
57047: IFFALSE 57058
// CustomEvent ( event ) ;
57049: LD_VAR 0 1
57053: PPUSH
57054: CALL 5295 0 1
// if event = 100 then
57058: LD_VAR 0 1
57062: PUSH
57063: LD_INT 100
57065: EQUAL
57066: IFFALSE 57072
// MC_ClassManager ( ) ;
57068: CALL 57464 0 0
// if event = 101 then
57072: LD_VAR 0 1
57076: PUSH
57077: LD_INT 101
57079: EQUAL
57080: IFFALSE 57086
// MC_RepairBuildings ( ) ;
57082: CALL 62248 0 0
// if event = 102 then
57086: LD_VAR 0 1
57090: PUSH
57091: LD_INT 102
57093: EQUAL
57094: IFFALSE 57100
// MC_Heal ( ) ;
57096: CALL 62654 0 0
// if event = 103 then
57100: LD_VAR 0 1
57104: PUSH
57105: LD_INT 103
57107: EQUAL
57108: IFFALSE 57114
// MC_Build ( ) ;
57110: CALL 63076 0 0
// if event = 104 then
57114: LD_VAR 0 1
57118: PUSH
57119: LD_INT 104
57121: EQUAL
57122: IFFALSE 57128
// MC_TurretWeapon ( ) ;
57124: CALL 64689 0 0
// if event = 105 then
57128: LD_VAR 0 1
57132: PUSH
57133: LD_INT 105
57135: EQUAL
57136: IFFALSE 57142
// MC_BuildUpgrade ( ) ;
57138: CALL 64240 0 0
// if event = 106 then
57142: LD_VAR 0 1
57146: PUSH
57147: LD_INT 106
57149: EQUAL
57150: IFFALSE 57156
// MC_PlantMines ( ) ;
57152: CALL 65119 0 0
// if event = 107 then
57156: LD_VAR 0 1
57160: PUSH
57161: LD_INT 107
57163: EQUAL
57164: IFFALSE 57170
// MC_CollectCrates ( ) ;
57166: CALL 66153 0 0
// if event = 108 then
57170: LD_VAR 0 1
57174: PUSH
57175: LD_INT 108
57177: EQUAL
57178: IFFALSE 57184
// MC_LinkRemoteControl ( ) ;
57180: CALL 67910 0 0
// if event = 109 then
57184: LD_VAR 0 1
57188: PUSH
57189: LD_INT 109
57191: EQUAL
57192: IFFALSE 57198
// MC_ProduceVehicle ( ) ;
57194: CALL 68091 0 0
// if event = 110 then
57198: LD_VAR 0 1
57202: PUSH
57203: LD_INT 110
57205: EQUAL
57206: IFFALSE 57212
// MC_SendAttack ( ) ;
57208: CALL 68572 0 0
// if event = 111 then
57212: LD_VAR 0 1
57216: PUSH
57217: LD_INT 111
57219: EQUAL
57220: IFFALSE 57226
// MC_Defend ( ) ;
57222: CALL 68680 0 0
// if event = 112 then
57226: LD_VAR 0 1
57230: PUSH
57231: LD_INT 112
57233: EQUAL
57234: IFFALSE 57240
// MC_Research ( ) ;
57236: CALL 69285 0 0
// if event = 113 then
57240: LD_VAR 0 1
57244: PUSH
57245: LD_INT 113
57247: EQUAL
57248: IFFALSE 57254
// MC_MinesTrigger ( ) ;
57250: CALL 70399 0 0
// if event = 120 then
57254: LD_VAR 0 1
57258: PUSH
57259: LD_INT 120
57261: EQUAL
57262: IFFALSE 57268
// MC_RepairVehicle ( ) ;
57264: CALL 70498 0 0
// if event = 121 then
57268: LD_VAR 0 1
57272: PUSH
57273: LD_INT 121
57275: EQUAL
57276: IFFALSE 57282
// MC_TameApe ( ) ;
57278: CALL 71205 0 0
// if event = 122 then
57282: LD_VAR 0 1
57286: PUSH
57287: LD_INT 122
57289: EQUAL
57290: IFFALSE 57296
// MC_ChangeApeClass ( ) ;
57292: CALL 72034 0 0
// if event = 123 then
57296: LD_VAR 0 1
57300: PUSH
57301: LD_INT 123
57303: EQUAL
57304: IFFALSE 57310
// MC_Bazooka ( ) ;
57306: CALL 72684 0 0
// if event = 124 then
57310: LD_VAR 0 1
57314: PUSH
57315: LD_INT 124
57317: EQUAL
57318: IFFALSE 57324
// MC_TeleportExit ( ) ;
57320: CALL 72882 0 0
// if event = 125 then
57324: LD_VAR 0 1
57328: PUSH
57329: LD_INT 125
57331: EQUAL
57332: IFFALSE 57338
// MC_Deposits ( ) ;
57334: CALL 73529 0 0
// if event = 126 then
57338: LD_VAR 0 1
57342: PUSH
57343: LD_INT 126
57345: EQUAL
57346: IFFALSE 57352
// MC_RemoteDriver ( ) ;
57348: CALL 74154 0 0
// if event = 200 then
57352: LD_VAR 0 1
57356: PUSH
57357: LD_INT 200
57359: EQUAL
57360: IFFALSE 57366
// MC_Idle ( ) ;
57362: CALL 75887 0 0
// end ;
57366: PPOPN 1
57368: END
// export function MC_Reset ( base , tag ) ; var i ; begin
57369: LD_INT 0
57371: PPUSH
57372: PPUSH
// if not mc_bases [ base ] or not tag then
57373: LD_EXP 52
57377: PUSH
57378: LD_VAR 0 1
57382: ARRAY
57383: NOT
57384: PUSH
57385: LD_VAR 0 2
57389: NOT
57390: OR
57391: IFFALSE 57395
// exit ;
57393: GO 57459
// for i in mc_bases [ base ] union mc_ape [ base ] do
57395: LD_ADDR_VAR 0 4
57399: PUSH
57400: LD_EXP 52
57404: PUSH
57405: LD_VAR 0 1
57409: ARRAY
57410: PUSH
57411: LD_EXP 81
57415: PUSH
57416: LD_VAR 0 1
57420: ARRAY
57421: UNION
57422: PUSH
57423: FOR_IN
57424: IFFALSE 57457
// if GetTag ( i ) = tag then
57426: LD_VAR 0 4
57430: PPUSH
57431: CALL_OW 110
57435: PUSH
57436: LD_VAR 0 2
57440: EQUAL
57441: IFFALSE 57455
// SetTag ( i , 0 ) ;
57443: LD_VAR 0 4
57447: PPUSH
57448: LD_INT 0
57450: PPUSH
57451: CALL_OW 109
57455: GO 57423
57457: POP
57458: POP
// end ;
57459: LD_VAR 0 3
57463: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
57464: LD_INT 0
57466: PPUSH
57467: PPUSH
57468: PPUSH
57469: PPUSH
57470: PPUSH
57471: PPUSH
57472: PPUSH
57473: PPUSH
// if not mc_bases then
57474: LD_EXP 52
57478: NOT
57479: IFFALSE 57483
// exit ;
57481: GO 57941
// for i = 1 to mc_bases do
57483: LD_ADDR_VAR 0 2
57487: PUSH
57488: DOUBLE
57489: LD_INT 1
57491: DEC
57492: ST_TO_ADDR
57493: LD_EXP 52
57497: PUSH
57498: FOR_TO
57499: IFFALSE 57939
// begin tmp := MC_ClassCheckReq ( i ) ;
57501: LD_ADDR_VAR 0 4
57505: PUSH
57506: LD_VAR 0 2
57510: PPUSH
57511: CALL 57946 0 1
57515: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
57516: LD_ADDR_EXP 93
57520: PUSH
57521: LD_EXP 93
57525: PPUSH
57526: LD_VAR 0 2
57530: PPUSH
57531: LD_VAR 0 4
57535: PPUSH
57536: CALL_OW 1
57540: ST_TO_ADDR
// if not tmp then
57541: LD_VAR 0 4
57545: NOT
57546: IFFALSE 57550
// continue ;
57548: GO 57498
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
57550: LD_ADDR_VAR 0 6
57554: PUSH
57555: LD_EXP 52
57559: PUSH
57560: LD_VAR 0 2
57564: ARRAY
57565: PPUSH
57566: LD_INT 2
57568: PUSH
57569: LD_INT 30
57571: PUSH
57572: LD_INT 4
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 30
57581: PUSH
57582: LD_INT 5
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: LIST
57593: PPUSH
57594: CALL_OW 72
57598: PUSH
57599: LD_EXP 52
57603: PUSH
57604: LD_VAR 0 2
57608: ARRAY
57609: PPUSH
57610: LD_INT 2
57612: PUSH
57613: LD_INT 30
57615: PUSH
57616: LD_INT 0
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 30
57625: PUSH
57626: LD_INT 1
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: LIST
57637: PPUSH
57638: CALL_OW 72
57642: PUSH
57643: LD_EXP 52
57647: PUSH
57648: LD_VAR 0 2
57652: ARRAY
57653: PPUSH
57654: LD_INT 30
57656: PUSH
57657: LD_INT 3
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PPUSH
57664: CALL_OW 72
57668: PUSH
57669: LD_EXP 52
57673: PUSH
57674: LD_VAR 0 2
57678: ARRAY
57679: PPUSH
57680: LD_INT 2
57682: PUSH
57683: LD_INT 30
57685: PUSH
57686: LD_INT 6
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 30
57695: PUSH
57696: LD_INT 7
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 30
57705: PUSH
57706: LD_INT 8
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: PPUSH
57719: CALL_OW 72
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: ST_TO_ADDR
// for j = 1 to 4 do
57730: LD_ADDR_VAR 0 3
57734: PUSH
57735: DOUBLE
57736: LD_INT 1
57738: DEC
57739: ST_TO_ADDR
57740: LD_INT 4
57742: PUSH
57743: FOR_TO
57744: IFFALSE 57935
// begin if not tmp [ j ] then
57746: LD_VAR 0 4
57750: PUSH
57751: LD_VAR 0 3
57755: ARRAY
57756: NOT
57757: IFFALSE 57761
// continue ;
57759: GO 57743
// for p in tmp [ j ] do
57761: LD_ADDR_VAR 0 5
57765: PUSH
57766: LD_VAR 0 4
57770: PUSH
57771: LD_VAR 0 3
57775: ARRAY
57776: PUSH
57777: FOR_IN
57778: IFFALSE 57931
// begin if not b [ j ] then
57780: LD_VAR 0 6
57784: PUSH
57785: LD_VAR 0 3
57789: ARRAY
57790: NOT
57791: IFFALSE 57795
// break ;
57793: GO 57931
// e := 0 ;
57795: LD_ADDR_VAR 0 7
57799: PUSH
57800: LD_INT 0
57802: ST_TO_ADDR
// for k in b [ j ] do
57803: LD_ADDR_VAR 0 8
57807: PUSH
57808: LD_VAR 0 6
57812: PUSH
57813: LD_VAR 0 3
57817: ARRAY
57818: PUSH
57819: FOR_IN
57820: IFFALSE 57847
// if IsNotFull ( k ) then
57822: LD_VAR 0 8
57826: PPUSH
57827: CALL 14740 0 1
57831: IFFALSE 57845
// begin e := k ;
57833: LD_ADDR_VAR 0 7
57837: PUSH
57838: LD_VAR 0 8
57842: ST_TO_ADDR
// break ;
57843: GO 57847
// end ;
57845: GO 57819
57847: POP
57848: POP
// if e and not UnitGoingToBuilding ( p , e ) then
57849: LD_VAR 0 7
57853: PUSH
57854: LD_VAR 0 5
57858: PPUSH
57859: LD_VAR 0 7
57863: PPUSH
57864: CALL 51792 0 2
57868: NOT
57869: AND
57870: IFFALSE 57929
// begin if IsInUnit ( p ) then
57872: LD_VAR 0 5
57876: PPUSH
57877: CALL_OW 310
57881: IFFALSE 57892
// ComExitBuilding ( p ) ;
57883: LD_VAR 0 5
57887: PPUSH
57888: CALL_OW 122
// ComEnterUnit ( p , e ) ;
57892: LD_VAR 0 5
57896: PPUSH
57897: LD_VAR 0 7
57901: PPUSH
57902: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
57906: LD_VAR 0 5
57910: PPUSH
57911: LD_VAR 0 3
57915: PPUSH
57916: CALL_OW 183
// AddComExitBuilding ( p ) ;
57920: LD_VAR 0 5
57924: PPUSH
57925: CALL_OW 182
// end ; end ;
57929: GO 57777
57931: POP
57932: POP
// end ;
57933: GO 57743
57935: POP
57936: POP
// end ;
57937: GO 57498
57939: POP
57940: POP
// end ;
57941: LD_VAR 0 1
57945: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
57946: LD_INT 0
57948: PPUSH
57949: PPUSH
57950: PPUSH
57951: PPUSH
57952: PPUSH
57953: PPUSH
57954: PPUSH
57955: PPUSH
57956: PPUSH
57957: PPUSH
57958: PPUSH
57959: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
57960: LD_VAR 0 1
57964: NOT
57965: PUSH
57966: LD_EXP 52
57970: PUSH
57971: LD_VAR 0 1
57975: ARRAY
57976: NOT
57977: OR
57978: PUSH
57979: LD_EXP 52
57983: PUSH
57984: LD_VAR 0 1
57988: ARRAY
57989: PPUSH
57990: LD_INT 2
57992: PUSH
57993: LD_INT 30
57995: PUSH
57996: LD_INT 0
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 30
58005: PUSH
58006: LD_INT 1
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: LIST
58017: PPUSH
58018: CALL_OW 72
58022: NOT
58023: OR
58024: IFFALSE 58028
// exit ;
58026: GO 61522
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
58028: LD_ADDR_VAR 0 4
58032: PUSH
58033: LD_EXP 52
58037: PUSH
58038: LD_VAR 0 1
58042: ARRAY
58043: PPUSH
58044: LD_INT 2
58046: PUSH
58047: LD_INT 25
58049: PUSH
58050: LD_INT 1
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 25
58059: PUSH
58060: LD_INT 2
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 25
58069: PUSH
58070: LD_INT 3
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 25
58079: PUSH
58080: LD_INT 4
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 25
58089: PUSH
58090: LD_INT 5
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 25
58099: PUSH
58100: LD_INT 8
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 25
58109: PUSH
58110: LD_INT 9
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: PPUSH
58127: CALL_OW 72
58131: ST_TO_ADDR
// for i in tmp do
58132: LD_ADDR_VAR 0 3
58136: PUSH
58137: LD_VAR 0 4
58141: PUSH
58142: FOR_IN
58143: IFFALSE 58174
// if GetTag ( i ) then
58145: LD_VAR 0 3
58149: PPUSH
58150: CALL_OW 110
58154: IFFALSE 58172
// tmp := tmp diff i ;
58156: LD_ADDR_VAR 0 4
58160: PUSH
58161: LD_VAR 0 4
58165: PUSH
58166: LD_VAR 0 3
58170: DIFF
58171: ST_TO_ADDR
58172: GO 58142
58174: POP
58175: POP
// if not tmp then
58176: LD_VAR 0 4
58180: NOT
58181: IFFALSE 58185
// exit ;
58183: GO 61522
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
58185: LD_ADDR_VAR 0 5
58189: PUSH
58190: LD_EXP 52
58194: PUSH
58195: LD_VAR 0 1
58199: ARRAY
58200: PPUSH
58201: LD_INT 2
58203: PUSH
58204: LD_INT 25
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 25
58216: PUSH
58217: LD_INT 5
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 25
58226: PUSH
58227: LD_INT 8
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 25
58236: PUSH
58237: LD_INT 9
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: PPUSH
58251: CALL_OW 72
58255: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
58256: LD_ADDR_VAR 0 6
58260: PUSH
58261: LD_EXP 52
58265: PUSH
58266: LD_VAR 0 1
58270: ARRAY
58271: PPUSH
58272: LD_INT 25
58274: PUSH
58275: LD_INT 2
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PPUSH
58282: CALL_OW 72
58286: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
58287: LD_ADDR_VAR 0 7
58291: PUSH
58292: LD_EXP 52
58296: PUSH
58297: LD_VAR 0 1
58301: ARRAY
58302: PPUSH
58303: LD_INT 25
58305: PUSH
58306: LD_INT 3
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PPUSH
58313: CALL_OW 72
58317: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
58318: LD_ADDR_VAR 0 8
58322: PUSH
58323: LD_EXP 52
58327: PUSH
58328: LD_VAR 0 1
58332: ARRAY
58333: PPUSH
58334: LD_INT 25
58336: PUSH
58337: LD_INT 4
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 24
58346: PUSH
58347: LD_INT 251
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PPUSH
58358: CALL_OW 72
58362: ST_TO_ADDR
// if mc_scan [ base ] then
58363: LD_EXP 75
58367: PUSH
58368: LD_VAR 0 1
58372: ARRAY
58373: IFFALSE 58834
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
58375: LD_ADDR_EXP 94
58379: PUSH
58380: LD_EXP 94
58384: PPUSH
58385: LD_VAR 0 1
58389: PPUSH
58390: LD_INT 4
58392: PPUSH
58393: CALL_OW 1
58397: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
58398: LD_ADDR_VAR 0 12
58402: PUSH
58403: LD_EXP 52
58407: PUSH
58408: LD_VAR 0 1
58412: ARRAY
58413: PPUSH
58414: LD_INT 2
58416: PUSH
58417: LD_INT 30
58419: PUSH
58420: LD_INT 4
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 30
58429: PUSH
58430: LD_INT 5
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: LIST
58441: PPUSH
58442: CALL_OW 72
58446: ST_TO_ADDR
// if not b then
58447: LD_VAR 0 12
58451: NOT
58452: IFFALSE 58456
// exit ;
58454: GO 61522
// p := [ ] ;
58456: LD_ADDR_VAR 0 11
58460: PUSH
58461: EMPTY
58462: ST_TO_ADDR
// if sci >= 2 then
58463: LD_VAR 0 8
58467: PUSH
58468: LD_INT 2
58470: GREATEREQUAL
58471: IFFALSE 58502
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
58473: LD_ADDR_VAR 0 8
58477: PUSH
58478: LD_VAR 0 8
58482: PUSH
58483: LD_INT 1
58485: ARRAY
58486: PUSH
58487: LD_VAR 0 8
58491: PUSH
58492: LD_INT 2
58494: ARRAY
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: ST_TO_ADDR
58500: GO 58563
// if sci = 1 then
58502: LD_VAR 0 8
58506: PUSH
58507: LD_INT 1
58509: EQUAL
58510: IFFALSE 58531
// sci := [ sci [ 1 ] ] else
58512: LD_ADDR_VAR 0 8
58516: PUSH
58517: LD_VAR 0 8
58521: PUSH
58522: LD_INT 1
58524: ARRAY
58525: PUSH
58526: EMPTY
58527: LIST
58528: ST_TO_ADDR
58529: GO 58563
// if sci = 0 then
58531: LD_VAR 0 8
58535: PUSH
58536: LD_INT 0
58538: EQUAL
58539: IFFALSE 58563
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
58541: LD_ADDR_VAR 0 11
58545: PUSH
58546: LD_VAR 0 4
58550: PPUSH
58551: LD_INT 4
58553: PPUSH
58554: CALL 51655 0 2
58558: PUSH
58559: LD_INT 1
58561: ARRAY
58562: ST_TO_ADDR
// if eng > 4 then
58563: LD_VAR 0 6
58567: PUSH
58568: LD_INT 4
58570: GREATER
58571: IFFALSE 58617
// for i = eng downto 4 do
58573: LD_ADDR_VAR 0 3
58577: PUSH
58578: DOUBLE
58579: LD_VAR 0 6
58583: INC
58584: ST_TO_ADDR
58585: LD_INT 4
58587: PUSH
58588: FOR_DOWNTO
58589: IFFALSE 58615
// eng := eng diff eng [ i ] ;
58591: LD_ADDR_VAR 0 6
58595: PUSH
58596: LD_VAR 0 6
58600: PUSH
58601: LD_VAR 0 6
58605: PUSH
58606: LD_VAR 0 3
58610: ARRAY
58611: DIFF
58612: ST_TO_ADDR
58613: GO 58588
58615: POP
58616: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
58617: LD_ADDR_VAR 0 4
58621: PUSH
58622: LD_VAR 0 4
58626: PUSH
58627: LD_VAR 0 5
58631: PUSH
58632: LD_VAR 0 6
58636: UNION
58637: PUSH
58638: LD_VAR 0 7
58642: UNION
58643: PUSH
58644: LD_VAR 0 8
58648: UNION
58649: DIFF
58650: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
58651: LD_ADDR_VAR 0 13
58655: PUSH
58656: LD_EXP 52
58660: PUSH
58661: LD_VAR 0 1
58665: ARRAY
58666: PPUSH
58667: LD_INT 2
58669: PUSH
58670: LD_INT 30
58672: PUSH
58673: LD_INT 32
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 30
58682: PUSH
58683: LD_INT 31
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: LIST
58694: PPUSH
58695: CALL_OW 72
58699: PUSH
58700: LD_EXP 52
58704: PUSH
58705: LD_VAR 0 1
58709: ARRAY
58710: PPUSH
58711: LD_INT 2
58713: PUSH
58714: LD_INT 30
58716: PUSH
58717: LD_INT 4
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 30
58726: PUSH
58727: LD_INT 5
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: LIST
58738: PPUSH
58739: CALL_OW 72
58743: PUSH
58744: LD_INT 6
58746: MUL
58747: PLUS
58748: ST_TO_ADDR
// if bcount < tmp then
58749: LD_VAR 0 13
58753: PUSH
58754: LD_VAR 0 4
58758: LESS
58759: IFFALSE 58805
// for i = tmp downto bcount do
58761: LD_ADDR_VAR 0 3
58765: PUSH
58766: DOUBLE
58767: LD_VAR 0 4
58771: INC
58772: ST_TO_ADDR
58773: LD_VAR 0 13
58777: PUSH
58778: FOR_DOWNTO
58779: IFFALSE 58803
// tmp := Delete ( tmp , tmp ) ;
58781: LD_ADDR_VAR 0 4
58785: PUSH
58786: LD_VAR 0 4
58790: PPUSH
58791: LD_VAR 0 4
58795: PPUSH
58796: CALL_OW 3
58800: ST_TO_ADDR
58801: GO 58778
58803: POP
58804: POP
// result := [ tmp , 0 , 0 , p ] ;
58805: LD_ADDR_VAR 0 2
58809: PUSH
58810: LD_VAR 0 4
58814: PUSH
58815: LD_INT 0
58817: PUSH
58818: LD_INT 0
58820: PUSH
58821: LD_VAR 0 11
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: ST_TO_ADDR
// exit ;
58832: GO 61522
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
58834: LD_EXP 52
58838: PUSH
58839: LD_VAR 0 1
58843: ARRAY
58844: PPUSH
58845: LD_INT 2
58847: PUSH
58848: LD_INT 30
58850: PUSH
58851: LD_INT 6
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 30
58860: PUSH
58861: LD_INT 7
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 30
58870: PUSH
58871: LD_INT 8
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: PPUSH
58884: CALL_OW 72
58888: NOT
58889: PUSH
58890: LD_EXP 52
58894: PUSH
58895: LD_VAR 0 1
58899: ARRAY
58900: PPUSH
58901: LD_INT 30
58903: PUSH
58904: LD_INT 3
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PPUSH
58911: CALL_OW 72
58915: NOT
58916: AND
58917: IFFALSE 58989
// begin if eng = tmp then
58919: LD_VAR 0 6
58923: PUSH
58924: LD_VAR 0 4
58928: EQUAL
58929: IFFALSE 58933
// exit ;
58931: GO 61522
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
58933: LD_ADDR_EXP 94
58937: PUSH
58938: LD_EXP 94
58942: PPUSH
58943: LD_VAR 0 1
58947: PPUSH
58948: LD_INT 1
58950: PPUSH
58951: CALL_OW 1
58955: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
58956: LD_ADDR_VAR 0 2
58960: PUSH
58961: LD_INT 0
58963: PUSH
58964: LD_VAR 0 4
58968: PUSH
58969: LD_VAR 0 6
58973: DIFF
58974: PUSH
58975: LD_INT 0
58977: PUSH
58978: LD_INT 0
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: ST_TO_ADDR
// exit ;
58987: GO 61522
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
58989: LD_EXP 79
58993: PUSH
58994: LD_EXP 78
58998: PUSH
58999: LD_VAR 0 1
59003: ARRAY
59004: ARRAY
59005: PUSH
59006: LD_EXP 52
59010: PUSH
59011: LD_VAR 0 1
59015: ARRAY
59016: PPUSH
59017: LD_INT 2
59019: PUSH
59020: LD_INT 30
59022: PUSH
59023: LD_INT 6
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 30
59032: PUSH
59033: LD_INT 7
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 30
59042: PUSH
59043: LD_INT 8
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: PPUSH
59056: CALL_OW 72
59060: AND
59061: PUSH
59062: LD_EXP 52
59066: PUSH
59067: LD_VAR 0 1
59071: ARRAY
59072: PPUSH
59073: LD_INT 30
59075: PUSH
59076: LD_INT 3
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PPUSH
59083: CALL_OW 72
59087: NOT
59088: AND
59089: IFFALSE 59303
// begin if sci >= 6 then
59091: LD_VAR 0 8
59095: PUSH
59096: LD_INT 6
59098: GREATEREQUAL
59099: IFFALSE 59103
// exit ;
59101: GO 61522
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
59103: LD_ADDR_EXP 94
59107: PUSH
59108: LD_EXP 94
59112: PPUSH
59113: LD_VAR 0 1
59117: PPUSH
59118: LD_INT 2
59120: PPUSH
59121: CALL_OW 1
59125: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
59126: LD_ADDR_VAR 0 9
59130: PUSH
59131: LD_VAR 0 4
59135: PUSH
59136: LD_VAR 0 8
59140: DIFF
59141: PPUSH
59142: LD_INT 4
59144: PPUSH
59145: CALL 51655 0 2
59149: ST_TO_ADDR
// p := [ ] ;
59150: LD_ADDR_VAR 0 11
59154: PUSH
59155: EMPTY
59156: ST_TO_ADDR
// if sci < 6 and sort > 6 then
59157: LD_VAR 0 8
59161: PUSH
59162: LD_INT 6
59164: LESS
59165: PUSH
59166: LD_VAR 0 9
59170: PUSH
59171: LD_INT 6
59173: GREATER
59174: AND
59175: IFFALSE 59256
// begin for i = 1 to 6 - sci do
59177: LD_ADDR_VAR 0 3
59181: PUSH
59182: DOUBLE
59183: LD_INT 1
59185: DEC
59186: ST_TO_ADDR
59187: LD_INT 6
59189: PUSH
59190: LD_VAR 0 8
59194: MINUS
59195: PUSH
59196: FOR_TO
59197: IFFALSE 59252
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
59199: LD_ADDR_VAR 0 11
59203: PUSH
59204: LD_VAR 0 11
59208: PPUSH
59209: LD_VAR 0 11
59213: PUSH
59214: LD_INT 1
59216: PLUS
59217: PPUSH
59218: LD_VAR 0 9
59222: PUSH
59223: LD_INT 1
59225: ARRAY
59226: PPUSH
59227: CALL_OW 2
59231: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
59232: LD_ADDR_VAR 0 9
59236: PUSH
59237: LD_VAR 0 9
59241: PPUSH
59242: LD_INT 1
59244: PPUSH
59245: CALL_OW 3
59249: ST_TO_ADDR
// end ;
59250: GO 59196
59252: POP
59253: POP
// end else
59254: GO 59276
// if sort then
59256: LD_VAR 0 9
59260: IFFALSE 59276
// p := sort [ 1 ] ;
59262: LD_ADDR_VAR 0 11
59266: PUSH
59267: LD_VAR 0 9
59271: PUSH
59272: LD_INT 1
59274: ARRAY
59275: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
59276: LD_ADDR_VAR 0 2
59280: PUSH
59281: LD_INT 0
59283: PUSH
59284: LD_INT 0
59286: PUSH
59287: LD_INT 0
59289: PUSH
59290: LD_VAR 0 11
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: ST_TO_ADDR
// exit ;
59301: GO 61522
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
59303: LD_EXP 79
59307: PUSH
59308: LD_EXP 78
59312: PUSH
59313: LD_VAR 0 1
59317: ARRAY
59318: ARRAY
59319: PUSH
59320: LD_EXP 52
59324: PUSH
59325: LD_VAR 0 1
59329: ARRAY
59330: PPUSH
59331: LD_INT 2
59333: PUSH
59334: LD_INT 30
59336: PUSH
59337: LD_INT 6
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 30
59346: PUSH
59347: LD_INT 7
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 30
59356: PUSH
59357: LD_INT 8
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: PPUSH
59370: CALL_OW 72
59374: AND
59375: PUSH
59376: LD_EXP 52
59380: PUSH
59381: LD_VAR 0 1
59385: ARRAY
59386: PPUSH
59387: LD_INT 30
59389: PUSH
59390: LD_INT 3
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PPUSH
59397: CALL_OW 72
59401: AND
59402: IFFALSE 60136
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
59404: LD_ADDR_EXP 94
59408: PUSH
59409: LD_EXP 94
59413: PPUSH
59414: LD_VAR 0 1
59418: PPUSH
59419: LD_INT 3
59421: PPUSH
59422: CALL_OW 1
59426: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
59427: LD_ADDR_VAR 0 2
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: LD_INT 0
59440: PUSH
59441: LD_INT 0
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: ST_TO_ADDR
// if not eng then
59450: LD_VAR 0 6
59454: NOT
59455: IFFALSE 59518
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
59457: LD_ADDR_VAR 0 11
59461: PUSH
59462: LD_VAR 0 4
59466: PPUSH
59467: LD_INT 2
59469: PPUSH
59470: CALL 51655 0 2
59474: PUSH
59475: LD_INT 1
59477: ARRAY
59478: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
59479: LD_ADDR_VAR 0 2
59483: PUSH
59484: LD_VAR 0 2
59488: PPUSH
59489: LD_INT 2
59491: PPUSH
59492: LD_VAR 0 11
59496: PPUSH
59497: CALL_OW 1
59501: ST_TO_ADDR
// tmp := tmp diff p ;
59502: LD_ADDR_VAR 0 4
59506: PUSH
59507: LD_VAR 0 4
59511: PUSH
59512: LD_VAR 0 11
59516: DIFF
59517: ST_TO_ADDR
// end ; if tmp and sci < 6 then
59518: LD_VAR 0 4
59522: PUSH
59523: LD_VAR 0 8
59527: PUSH
59528: LD_INT 6
59530: LESS
59531: AND
59532: IFFALSE 59720
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
59534: LD_ADDR_VAR 0 9
59538: PUSH
59539: LD_VAR 0 4
59543: PUSH
59544: LD_VAR 0 8
59548: PUSH
59549: LD_VAR 0 7
59553: UNION
59554: DIFF
59555: PPUSH
59556: LD_INT 4
59558: PPUSH
59559: CALL 51655 0 2
59563: ST_TO_ADDR
// p := [ ] ;
59564: LD_ADDR_VAR 0 11
59568: PUSH
59569: EMPTY
59570: ST_TO_ADDR
// if sort then
59571: LD_VAR 0 9
59575: IFFALSE 59691
// for i = 1 to 6 - sci do
59577: LD_ADDR_VAR 0 3
59581: PUSH
59582: DOUBLE
59583: LD_INT 1
59585: DEC
59586: ST_TO_ADDR
59587: LD_INT 6
59589: PUSH
59590: LD_VAR 0 8
59594: MINUS
59595: PUSH
59596: FOR_TO
59597: IFFALSE 59689
// begin if i = sort then
59599: LD_VAR 0 3
59603: PUSH
59604: LD_VAR 0 9
59608: EQUAL
59609: IFFALSE 59613
// break ;
59611: GO 59689
// if GetClass ( i ) = 4 then
59613: LD_VAR 0 3
59617: PPUSH
59618: CALL_OW 257
59622: PUSH
59623: LD_INT 4
59625: EQUAL
59626: IFFALSE 59630
// continue ;
59628: GO 59596
// p := Insert ( p , p + 1 , sort [ i ] ) ;
59630: LD_ADDR_VAR 0 11
59634: PUSH
59635: LD_VAR 0 11
59639: PPUSH
59640: LD_VAR 0 11
59644: PUSH
59645: LD_INT 1
59647: PLUS
59648: PPUSH
59649: LD_VAR 0 9
59653: PUSH
59654: LD_VAR 0 3
59658: ARRAY
59659: PPUSH
59660: CALL_OW 2
59664: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
59665: LD_ADDR_VAR 0 4
59669: PUSH
59670: LD_VAR 0 4
59674: PUSH
59675: LD_VAR 0 9
59679: PUSH
59680: LD_VAR 0 3
59684: ARRAY
59685: DIFF
59686: ST_TO_ADDR
// end ;
59687: GO 59596
59689: POP
59690: POP
// if p then
59691: LD_VAR 0 11
59695: IFFALSE 59720
// result := Replace ( result , 4 , p ) ;
59697: LD_ADDR_VAR 0 2
59701: PUSH
59702: LD_VAR 0 2
59706: PPUSH
59707: LD_INT 4
59709: PPUSH
59710: LD_VAR 0 11
59714: PPUSH
59715: CALL_OW 1
59719: ST_TO_ADDR
// end ; if tmp and mech < 6 then
59720: LD_VAR 0 4
59724: PUSH
59725: LD_VAR 0 7
59729: PUSH
59730: LD_INT 6
59732: LESS
59733: AND
59734: IFFALSE 59922
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
59736: LD_ADDR_VAR 0 9
59740: PUSH
59741: LD_VAR 0 4
59745: PUSH
59746: LD_VAR 0 8
59750: PUSH
59751: LD_VAR 0 7
59755: UNION
59756: DIFF
59757: PPUSH
59758: LD_INT 3
59760: PPUSH
59761: CALL 51655 0 2
59765: ST_TO_ADDR
// p := [ ] ;
59766: LD_ADDR_VAR 0 11
59770: PUSH
59771: EMPTY
59772: ST_TO_ADDR
// if sort then
59773: LD_VAR 0 9
59777: IFFALSE 59893
// for i = 1 to 6 - mech do
59779: LD_ADDR_VAR 0 3
59783: PUSH
59784: DOUBLE
59785: LD_INT 1
59787: DEC
59788: ST_TO_ADDR
59789: LD_INT 6
59791: PUSH
59792: LD_VAR 0 7
59796: MINUS
59797: PUSH
59798: FOR_TO
59799: IFFALSE 59891
// begin if i = sort then
59801: LD_VAR 0 3
59805: PUSH
59806: LD_VAR 0 9
59810: EQUAL
59811: IFFALSE 59815
// break ;
59813: GO 59891
// if GetClass ( i ) = 3 then
59815: LD_VAR 0 3
59819: PPUSH
59820: CALL_OW 257
59824: PUSH
59825: LD_INT 3
59827: EQUAL
59828: IFFALSE 59832
// continue ;
59830: GO 59798
// p := Insert ( p , p + 1 , sort [ i ] ) ;
59832: LD_ADDR_VAR 0 11
59836: PUSH
59837: LD_VAR 0 11
59841: PPUSH
59842: LD_VAR 0 11
59846: PUSH
59847: LD_INT 1
59849: PLUS
59850: PPUSH
59851: LD_VAR 0 9
59855: PUSH
59856: LD_VAR 0 3
59860: ARRAY
59861: PPUSH
59862: CALL_OW 2
59866: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
59867: LD_ADDR_VAR 0 4
59871: PUSH
59872: LD_VAR 0 4
59876: PUSH
59877: LD_VAR 0 9
59881: PUSH
59882: LD_VAR 0 3
59886: ARRAY
59887: DIFF
59888: ST_TO_ADDR
// end ;
59889: GO 59798
59891: POP
59892: POP
// if p then
59893: LD_VAR 0 11
59897: IFFALSE 59922
// result := Replace ( result , 3 , p ) ;
59899: LD_ADDR_VAR 0 2
59903: PUSH
59904: LD_VAR 0 2
59908: PPUSH
59909: LD_INT 3
59911: PPUSH
59912: LD_VAR 0 11
59916: PPUSH
59917: CALL_OW 1
59921: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
59922: LD_VAR 0 4
59926: PUSH
59927: LD_INT 6
59929: GREATER
59930: PUSH
59931: LD_VAR 0 6
59935: PUSH
59936: LD_INT 6
59938: LESS
59939: AND
59940: IFFALSE 60134
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
59942: LD_ADDR_VAR 0 9
59946: PUSH
59947: LD_VAR 0 4
59951: PUSH
59952: LD_VAR 0 8
59956: PUSH
59957: LD_VAR 0 7
59961: UNION
59962: PUSH
59963: LD_VAR 0 6
59967: UNION
59968: DIFF
59969: PPUSH
59970: LD_INT 2
59972: PPUSH
59973: CALL 51655 0 2
59977: ST_TO_ADDR
// p := [ ] ;
59978: LD_ADDR_VAR 0 11
59982: PUSH
59983: EMPTY
59984: ST_TO_ADDR
// if sort then
59985: LD_VAR 0 9
59989: IFFALSE 60105
// for i = 1 to 6 - eng do
59991: LD_ADDR_VAR 0 3
59995: PUSH
59996: DOUBLE
59997: LD_INT 1
59999: DEC
60000: ST_TO_ADDR
60001: LD_INT 6
60003: PUSH
60004: LD_VAR 0 6
60008: MINUS
60009: PUSH
60010: FOR_TO
60011: IFFALSE 60103
// begin if i = sort then
60013: LD_VAR 0 3
60017: PUSH
60018: LD_VAR 0 9
60022: EQUAL
60023: IFFALSE 60027
// break ;
60025: GO 60103
// if GetClass ( i ) = 2 then
60027: LD_VAR 0 3
60031: PPUSH
60032: CALL_OW 257
60036: PUSH
60037: LD_INT 2
60039: EQUAL
60040: IFFALSE 60044
// continue ;
60042: GO 60010
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60044: LD_ADDR_VAR 0 11
60048: PUSH
60049: LD_VAR 0 11
60053: PPUSH
60054: LD_VAR 0 11
60058: PUSH
60059: LD_INT 1
60061: PLUS
60062: PPUSH
60063: LD_VAR 0 9
60067: PUSH
60068: LD_VAR 0 3
60072: ARRAY
60073: PPUSH
60074: CALL_OW 2
60078: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60079: LD_ADDR_VAR 0 4
60083: PUSH
60084: LD_VAR 0 4
60088: PUSH
60089: LD_VAR 0 9
60093: PUSH
60094: LD_VAR 0 3
60098: ARRAY
60099: DIFF
60100: ST_TO_ADDR
// end ;
60101: GO 60010
60103: POP
60104: POP
// if p then
60105: LD_VAR 0 11
60109: IFFALSE 60134
// result := Replace ( result , 2 , p ) ;
60111: LD_ADDR_VAR 0 2
60115: PUSH
60116: LD_VAR 0 2
60120: PPUSH
60121: LD_INT 2
60123: PPUSH
60124: LD_VAR 0 11
60128: PPUSH
60129: CALL_OW 1
60133: ST_TO_ADDR
// end ; exit ;
60134: GO 61522
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
60136: LD_EXP 79
60140: PUSH
60141: LD_EXP 78
60145: PUSH
60146: LD_VAR 0 1
60150: ARRAY
60151: ARRAY
60152: NOT
60153: PUSH
60154: LD_EXP 52
60158: PUSH
60159: LD_VAR 0 1
60163: ARRAY
60164: PPUSH
60165: LD_INT 30
60167: PUSH
60168: LD_INT 3
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PPUSH
60175: CALL_OW 72
60179: AND
60180: PUSH
60181: LD_EXP 57
60185: PUSH
60186: LD_VAR 0 1
60190: ARRAY
60191: AND
60192: IFFALSE 60800
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
60194: LD_ADDR_EXP 94
60198: PUSH
60199: LD_EXP 94
60203: PPUSH
60204: LD_VAR 0 1
60208: PPUSH
60209: LD_INT 5
60211: PPUSH
60212: CALL_OW 1
60216: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
60217: LD_ADDR_VAR 0 2
60221: PUSH
60222: LD_INT 0
60224: PUSH
60225: LD_INT 0
60227: PUSH
60228: LD_INT 0
60230: PUSH
60231: LD_INT 0
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: ST_TO_ADDR
// if sci > 1 then
60240: LD_VAR 0 8
60244: PUSH
60245: LD_INT 1
60247: GREATER
60248: IFFALSE 60276
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
60250: LD_ADDR_VAR 0 4
60254: PUSH
60255: LD_VAR 0 4
60259: PUSH
60260: LD_VAR 0 8
60264: PUSH
60265: LD_VAR 0 8
60269: PUSH
60270: LD_INT 1
60272: ARRAY
60273: DIFF
60274: DIFF
60275: ST_TO_ADDR
// if tmp and not sci then
60276: LD_VAR 0 4
60280: PUSH
60281: LD_VAR 0 8
60285: NOT
60286: AND
60287: IFFALSE 60356
// begin sort := SortBySkill ( tmp , 4 ) ;
60289: LD_ADDR_VAR 0 9
60293: PUSH
60294: LD_VAR 0 4
60298: PPUSH
60299: LD_INT 4
60301: PPUSH
60302: CALL 51655 0 2
60306: ST_TO_ADDR
// if sort then
60307: LD_VAR 0 9
60311: IFFALSE 60327
// p := sort [ 1 ] ;
60313: LD_ADDR_VAR 0 11
60317: PUSH
60318: LD_VAR 0 9
60322: PUSH
60323: LD_INT 1
60325: ARRAY
60326: ST_TO_ADDR
// if p then
60327: LD_VAR 0 11
60331: IFFALSE 60356
// result := Replace ( result , 4 , p ) ;
60333: LD_ADDR_VAR 0 2
60337: PUSH
60338: LD_VAR 0 2
60342: PPUSH
60343: LD_INT 4
60345: PPUSH
60346: LD_VAR 0 11
60350: PPUSH
60351: CALL_OW 1
60355: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
60356: LD_ADDR_VAR 0 4
60360: PUSH
60361: LD_VAR 0 4
60365: PUSH
60366: LD_VAR 0 7
60370: DIFF
60371: ST_TO_ADDR
// if tmp and mech < 6 then
60372: LD_VAR 0 4
60376: PUSH
60377: LD_VAR 0 7
60381: PUSH
60382: LD_INT 6
60384: LESS
60385: AND
60386: IFFALSE 60574
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
60388: LD_ADDR_VAR 0 9
60392: PUSH
60393: LD_VAR 0 4
60397: PUSH
60398: LD_VAR 0 8
60402: PUSH
60403: LD_VAR 0 7
60407: UNION
60408: DIFF
60409: PPUSH
60410: LD_INT 3
60412: PPUSH
60413: CALL 51655 0 2
60417: ST_TO_ADDR
// p := [ ] ;
60418: LD_ADDR_VAR 0 11
60422: PUSH
60423: EMPTY
60424: ST_TO_ADDR
// if sort then
60425: LD_VAR 0 9
60429: IFFALSE 60545
// for i = 1 to 6 - mech do
60431: LD_ADDR_VAR 0 3
60435: PUSH
60436: DOUBLE
60437: LD_INT 1
60439: DEC
60440: ST_TO_ADDR
60441: LD_INT 6
60443: PUSH
60444: LD_VAR 0 7
60448: MINUS
60449: PUSH
60450: FOR_TO
60451: IFFALSE 60543
// begin if i = sort then
60453: LD_VAR 0 3
60457: PUSH
60458: LD_VAR 0 9
60462: EQUAL
60463: IFFALSE 60467
// break ;
60465: GO 60543
// if GetClass ( i ) = 3 then
60467: LD_VAR 0 3
60471: PPUSH
60472: CALL_OW 257
60476: PUSH
60477: LD_INT 3
60479: EQUAL
60480: IFFALSE 60484
// continue ;
60482: GO 60450
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60484: LD_ADDR_VAR 0 11
60488: PUSH
60489: LD_VAR 0 11
60493: PPUSH
60494: LD_VAR 0 11
60498: PUSH
60499: LD_INT 1
60501: PLUS
60502: PPUSH
60503: LD_VAR 0 9
60507: PUSH
60508: LD_VAR 0 3
60512: ARRAY
60513: PPUSH
60514: CALL_OW 2
60518: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60519: LD_ADDR_VAR 0 4
60523: PUSH
60524: LD_VAR 0 4
60528: PUSH
60529: LD_VAR 0 9
60533: PUSH
60534: LD_VAR 0 3
60538: ARRAY
60539: DIFF
60540: ST_TO_ADDR
// end ;
60541: GO 60450
60543: POP
60544: POP
// if p then
60545: LD_VAR 0 11
60549: IFFALSE 60574
// result := Replace ( result , 3 , p ) ;
60551: LD_ADDR_VAR 0 2
60555: PUSH
60556: LD_VAR 0 2
60560: PPUSH
60561: LD_INT 3
60563: PPUSH
60564: LD_VAR 0 11
60568: PPUSH
60569: CALL_OW 1
60573: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
60574: LD_ADDR_VAR 0 4
60578: PUSH
60579: LD_VAR 0 4
60583: PUSH
60584: LD_VAR 0 6
60588: DIFF
60589: ST_TO_ADDR
// if tmp and eng < 6 then
60590: LD_VAR 0 4
60594: PUSH
60595: LD_VAR 0 6
60599: PUSH
60600: LD_INT 6
60602: LESS
60603: AND
60604: IFFALSE 60798
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
60606: LD_ADDR_VAR 0 9
60610: PUSH
60611: LD_VAR 0 4
60615: PUSH
60616: LD_VAR 0 8
60620: PUSH
60621: LD_VAR 0 7
60625: UNION
60626: PUSH
60627: LD_VAR 0 6
60631: UNION
60632: DIFF
60633: PPUSH
60634: LD_INT 2
60636: PPUSH
60637: CALL 51655 0 2
60641: ST_TO_ADDR
// p := [ ] ;
60642: LD_ADDR_VAR 0 11
60646: PUSH
60647: EMPTY
60648: ST_TO_ADDR
// if sort then
60649: LD_VAR 0 9
60653: IFFALSE 60769
// for i = 1 to 6 - eng do
60655: LD_ADDR_VAR 0 3
60659: PUSH
60660: DOUBLE
60661: LD_INT 1
60663: DEC
60664: ST_TO_ADDR
60665: LD_INT 6
60667: PUSH
60668: LD_VAR 0 6
60672: MINUS
60673: PUSH
60674: FOR_TO
60675: IFFALSE 60767
// begin if i = sort then
60677: LD_VAR 0 3
60681: PUSH
60682: LD_VAR 0 9
60686: EQUAL
60687: IFFALSE 60691
// break ;
60689: GO 60767
// if GetClass ( i ) = 2 then
60691: LD_VAR 0 3
60695: PPUSH
60696: CALL_OW 257
60700: PUSH
60701: LD_INT 2
60703: EQUAL
60704: IFFALSE 60708
// continue ;
60706: GO 60674
// p := Insert ( p , p + 1 , sort [ i ] ) ;
60708: LD_ADDR_VAR 0 11
60712: PUSH
60713: LD_VAR 0 11
60717: PPUSH
60718: LD_VAR 0 11
60722: PUSH
60723: LD_INT 1
60725: PLUS
60726: PPUSH
60727: LD_VAR 0 9
60731: PUSH
60732: LD_VAR 0 3
60736: ARRAY
60737: PPUSH
60738: CALL_OW 2
60742: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
60743: LD_ADDR_VAR 0 4
60747: PUSH
60748: LD_VAR 0 4
60752: PUSH
60753: LD_VAR 0 9
60757: PUSH
60758: LD_VAR 0 3
60762: ARRAY
60763: DIFF
60764: ST_TO_ADDR
// end ;
60765: GO 60674
60767: POP
60768: POP
// if p then
60769: LD_VAR 0 11
60773: IFFALSE 60798
// result := Replace ( result , 2 , p ) ;
60775: LD_ADDR_VAR 0 2
60779: PUSH
60780: LD_VAR 0 2
60784: PPUSH
60785: LD_INT 2
60787: PPUSH
60788: LD_VAR 0 11
60792: PPUSH
60793: CALL_OW 1
60797: ST_TO_ADDR
// end ; exit ;
60798: GO 61522
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
60800: LD_EXP 79
60804: PUSH
60805: LD_EXP 78
60809: PUSH
60810: LD_VAR 0 1
60814: ARRAY
60815: ARRAY
60816: NOT
60817: PUSH
60818: LD_EXP 52
60822: PUSH
60823: LD_VAR 0 1
60827: ARRAY
60828: PPUSH
60829: LD_INT 30
60831: PUSH
60832: LD_INT 3
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PPUSH
60839: CALL_OW 72
60843: AND
60844: PUSH
60845: LD_EXP 57
60849: PUSH
60850: LD_VAR 0 1
60854: ARRAY
60855: NOT
60856: AND
60857: IFFALSE 61522
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
60859: LD_ADDR_EXP 94
60863: PUSH
60864: LD_EXP 94
60868: PPUSH
60869: LD_VAR 0 1
60873: PPUSH
60874: LD_INT 6
60876: PPUSH
60877: CALL_OW 1
60881: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
60882: LD_ADDR_VAR 0 2
60886: PUSH
60887: LD_INT 0
60889: PUSH
60890: LD_INT 0
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: LD_INT 0
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: ST_TO_ADDR
// if sci >= 1 then
60905: LD_VAR 0 8
60909: PUSH
60910: LD_INT 1
60912: GREATEREQUAL
60913: IFFALSE 60935
// tmp := tmp diff sci [ 1 ] ;
60915: LD_ADDR_VAR 0 4
60919: PUSH
60920: LD_VAR 0 4
60924: PUSH
60925: LD_VAR 0 8
60929: PUSH
60930: LD_INT 1
60932: ARRAY
60933: DIFF
60934: ST_TO_ADDR
// if tmp and not sci then
60935: LD_VAR 0 4
60939: PUSH
60940: LD_VAR 0 8
60944: NOT
60945: AND
60946: IFFALSE 61015
// begin sort := SortBySkill ( tmp , 4 ) ;
60948: LD_ADDR_VAR 0 9
60952: PUSH
60953: LD_VAR 0 4
60957: PPUSH
60958: LD_INT 4
60960: PPUSH
60961: CALL 51655 0 2
60965: ST_TO_ADDR
// if sort then
60966: LD_VAR 0 9
60970: IFFALSE 60986
// p := sort [ 1 ] ;
60972: LD_ADDR_VAR 0 11
60976: PUSH
60977: LD_VAR 0 9
60981: PUSH
60982: LD_INT 1
60984: ARRAY
60985: ST_TO_ADDR
// if p then
60986: LD_VAR 0 11
60990: IFFALSE 61015
// result := Replace ( result , 4 , p ) ;
60992: LD_ADDR_VAR 0 2
60996: PUSH
60997: LD_VAR 0 2
61001: PPUSH
61002: LD_INT 4
61004: PPUSH
61005: LD_VAR 0 11
61009: PPUSH
61010: CALL_OW 1
61014: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
61015: LD_ADDR_VAR 0 4
61019: PUSH
61020: LD_VAR 0 4
61024: PUSH
61025: LD_VAR 0 7
61029: DIFF
61030: ST_TO_ADDR
// if tmp and mech < 6 then
61031: LD_VAR 0 4
61035: PUSH
61036: LD_VAR 0 7
61040: PUSH
61041: LD_INT 6
61043: LESS
61044: AND
61045: IFFALSE 61227
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
61047: LD_ADDR_VAR 0 9
61051: PUSH
61052: LD_VAR 0 4
61056: PUSH
61057: LD_VAR 0 7
61061: DIFF
61062: PPUSH
61063: LD_INT 3
61065: PPUSH
61066: CALL 51655 0 2
61070: ST_TO_ADDR
// p := [ ] ;
61071: LD_ADDR_VAR 0 11
61075: PUSH
61076: EMPTY
61077: ST_TO_ADDR
// if sort then
61078: LD_VAR 0 9
61082: IFFALSE 61198
// for i = 1 to 6 - mech do
61084: LD_ADDR_VAR 0 3
61088: PUSH
61089: DOUBLE
61090: LD_INT 1
61092: DEC
61093: ST_TO_ADDR
61094: LD_INT 6
61096: PUSH
61097: LD_VAR 0 7
61101: MINUS
61102: PUSH
61103: FOR_TO
61104: IFFALSE 61196
// begin if i = sort then
61106: LD_VAR 0 3
61110: PUSH
61111: LD_VAR 0 9
61115: EQUAL
61116: IFFALSE 61120
// break ;
61118: GO 61196
// if GetClass ( i ) = 3 then
61120: LD_VAR 0 3
61124: PPUSH
61125: CALL_OW 257
61129: PUSH
61130: LD_INT 3
61132: EQUAL
61133: IFFALSE 61137
// continue ;
61135: GO 61103
// p := Insert ( p , p + 1 , sort [ i ] ) ;
61137: LD_ADDR_VAR 0 11
61141: PUSH
61142: LD_VAR 0 11
61146: PPUSH
61147: LD_VAR 0 11
61151: PUSH
61152: LD_INT 1
61154: PLUS
61155: PPUSH
61156: LD_VAR 0 9
61160: PUSH
61161: LD_VAR 0 3
61165: ARRAY
61166: PPUSH
61167: CALL_OW 2
61171: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
61172: LD_ADDR_VAR 0 4
61176: PUSH
61177: LD_VAR 0 4
61181: PUSH
61182: LD_VAR 0 9
61186: PUSH
61187: LD_VAR 0 3
61191: ARRAY
61192: DIFF
61193: ST_TO_ADDR
// end ;
61194: GO 61103
61196: POP
61197: POP
// if p then
61198: LD_VAR 0 11
61202: IFFALSE 61227
// result := Replace ( result , 3 , p ) ;
61204: LD_ADDR_VAR 0 2
61208: PUSH
61209: LD_VAR 0 2
61213: PPUSH
61214: LD_INT 3
61216: PPUSH
61217: LD_VAR 0 11
61221: PPUSH
61222: CALL_OW 1
61226: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
61227: LD_ADDR_VAR 0 4
61231: PUSH
61232: LD_VAR 0 4
61236: PUSH
61237: LD_VAR 0 6
61241: DIFF
61242: ST_TO_ADDR
// if tmp and eng < 4 then
61243: LD_VAR 0 4
61247: PUSH
61248: LD_VAR 0 6
61252: PUSH
61253: LD_INT 4
61255: LESS
61256: AND
61257: IFFALSE 61447
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
61259: LD_ADDR_VAR 0 9
61263: PUSH
61264: LD_VAR 0 4
61268: PUSH
61269: LD_VAR 0 7
61273: PUSH
61274: LD_VAR 0 6
61278: UNION
61279: DIFF
61280: PPUSH
61281: LD_INT 2
61283: PPUSH
61284: CALL 51655 0 2
61288: ST_TO_ADDR
// p := [ ] ;
61289: LD_ADDR_VAR 0 11
61293: PUSH
61294: EMPTY
61295: ST_TO_ADDR
// if sort then
61296: LD_VAR 0 9
61300: IFFALSE 61416
// for i = 1 to 4 - eng do
61302: LD_ADDR_VAR 0 3
61306: PUSH
61307: DOUBLE
61308: LD_INT 1
61310: DEC
61311: ST_TO_ADDR
61312: LD_INT 4
61314: PUSH
61315: LD_VAR 0 6
61319: MINUS
61320: PUSH
61321: FOR_TO
61322: IFFALSE 61414
// begin if i = sort then
61324: LD_VAR 0 3
61328: PUSH
61329: LD_VAR 0 9
61333: EQUAL
61334: IFFALSE 61338
// break ;
61336: GO 61414
// if GetClass ( i ) = 2 then
61338: LD_VAR 0 3
61342: PPUSH
61343: CALL_OW 257
61347: PUSH
61348: LD_INT 2
61350: EQUAL
61351: IFFALSE 61355
// continue ;
61353: GO 61321
// p := Insert ( p , p + 1 , sort [ i ] ) ;
61355: LD_ADDR_VAR 0 11
61359: PUSH
61360: LD_VAR 0 11
61364: PPUSH
61365: LD_VAR 0 11
61369: PUSH
61370: LD_INT 1
61372: PLUS
61373: PPUSH
61374: LD_VAR 0 9
61378: PUSH
61379: LD_VAR 0 3
61383: ARRAY
61384: PPUSH
61385: CALL_OW 2
61389: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
61390: LD_ADDR_VAR 0 4
61394: PUSH
61395: LD_VAR 0 4
61399: PUSH
61400: LD_VAR 0 9
61404: PUSH
61405: LD_VAR 0 3
61409: ARRAY
61410: DIFF
61411: ST_TO_ADDR
// end ;
61412: GO 61321
61414: POP
61415: POP
// if p then
61416: LD_VAR 0 11
61420: IFFALSE 61445
// result := Replace ( result , 2 , p ) ;
61422: LD_ADDR_VAR 0 2
61426: PUSH
61427: LD_VAR 0 2
61431: PPUSH
61432: LD_INT 2
61434: PPUSH
61435: LD_VAR 0 11
61439: PPUSH
61440: CALL_OW 1
61444: ST_TO_ADDR
// end else
61445: GO 61491
// for i = eng downto 5 do
61447: LD_ADDR_VAR 0 3
61451: PUSH
61452: DOUBLE
61453: LD_VAR 0 6
61457: INC
61458: ST_TO_ADDR
61459: LD_INT 5
61461: PUSH
61462: FOR_DOWNTO
61463: IFFALSE 61489
// tmp := tmp union eng [ i ] ;
61465: LD_ADDR_VAR 0 4
61469: PUSH
61470: LD_VAR 0 4
61474: PUSH
61475: LD_VAR 0 6
61479: PUSH
61480: LD_VAR 0 3
61484: ARRAY
61485: UNION
61486: ST_TO_ADDR
61487: GO 61462
61489: POP
61490: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
61491: LD_ADDR_VAR 0 2
61495: PUSH
61496: LD_VAR 0 2
61500: PPUSH
61501: LD_INT 1
61503: PPUSH
61504: LD_VAR 0 4
61508: PUSH
61509: LD_VAR 0 5
61513: DIFF
61514: PPUSH
61515: CALL_OW 1
61519: ST_TO_ADDR
// exit ;
61520: GO 61522
// end ; end ;
61522: LD_VAR 0 2
61526: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
61527: LD_INT 0
61529: PPUSH
61530: PPUSH
61531: PPUSH
// if not mc_bases then
61532: LD_EXP 52
61536: NOT
61537: IFFALSE 61541
// exit ;
61539: GO 61647
// for i = 1 to mc_bases do
61541: LD_ADDR_VAR 0 2
61545: PUSH
61546: DOUBLE
61547: LD_INT 1
61549: DEC
61550: ST_TO_ADDR
61551: LD_EXP 52
61555: PUSH
61556: FOR_TO
61557: IFFALSE 61638
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
61559: LD_ADDR_VAR 0 3
61563: PUSH
61564: LD_EXP 52
61568: PUSH
61569: LD_VAR 0 2
61573: ARRAY
61574: PPUSH
61575: LD_INT 21
61577: PUSH
61578: LD_INT 3
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 3
61587: PUSH
61588: LD_INT 24
61590: PUSH
61591: LD_INT 1000
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PPUSH
61606: CALL_OW 72
61610: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
61611: LD_ADDR_EXP 53
61615: PUSH
61616: LD_EXP 53
61620: PPUSH
61621: LD_VAR 0 2
61625: PPUSH
61626: LD_VAR 0 3
61630: PPUSH
61631: CALL_OW 1
61635: ST_TO_ADDR
// end ;
61636: GO 61556
61638: POP
61639: POP
// RaiseSailEvent ( 101 ) ;
61640: LD_INT 101
61642: PPUSH
61643: CALL_OW 427
// end ;
61647: LD_VAR 0 1
61651: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
61652: LD_INT 0
61654: PPUSH
61655: PPUSH
61656: PPUSH
61657: PPUSH
61658: PPUSH
61659: PPUSH
61660: PPUSH
// if not mc_bases then
61661: LD_EXP 52
61665: NOT
61666: IFFALSE 61670
// exit ;
61668: GO 62243
// for i = 1 to mc_bases do
61670: LD_ADDR_VAR 0 2
61674: PUSH
61675: DOUBLE
61676: LD_INT 1
61678: DEC
61679: ST_TO_ADDR
61680: LD_EXP 52
61684: PUSH
61685: FOR_TO
61686: IFFALSE 62234
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
61688: LD_ADDR_VAR 0 5
61692: PUSH
61693: LD_EXP 52
61697: PUSH
61698: LD_VAR 0 2
61702: ARRAY
61703: PUSH
61704: LD_EXP 81
61708: PUSH
61709: LD_VAR 0 2
61713: ARRAY
61714: UNION
61715: PPUSH
61716: LD_INT 21
61718: PUSH
61719: LD_INT 1
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 1
61728: PUSH
61729: LD_INT 3
61731: PUSH
61732: LD_INT 54
61734: PUSH
61735: EMPTY
61736: LIST
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 3
61744: PUSH
61745: LD_INT 24
61747: PUSH
61748: LD_INT 800
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: LIST
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PPUSH
61768: CALL_OW 72
61772: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
61773: LD_ADDR_VAR 0 6
61777: PUSH
61778: LD_EXP 52
61782: PUSH
61783: LD_VAR 0 2
61787: ARRAY
61788: PPUSH
61789: LD_INT 21
61791: PUSH
61792: LD_INT 1
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 1
61801: PUSH
61802: LD_INT 3
61804: PUSH
61805: LD_INT 54
61807: PUSH
61808: EMPTY
61809: LIST
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 3
61817: PUSH
61818: LD_INT 24
61820: PUSH
61821: LD_INT 250
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: LIST
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PPUSH
61841: CALL_OW 72
61845: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
61846: LD_ADDR_VAR 0 7
61850: PUSH
61851: LD_VAR 0 5
61855: PUSH
61856: LD_VAR 0 6
61860: DIFF
61861: ST_TO_ADDR
// if not need_heal_1 then
61862: LD_VAR 0 6
61866: NOT
61867: IFFALSE 61900
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
61869: LD_ADDR_EXP 55
61873: PUSH
61874: LD_EXP 55
61878: PPUSH
61879: LD_VAR 0 2
61883: PUSH
61884: LD_INT 1
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PPUSH
61891: EMPTY
61892: PPUSH
61893: CALL 17413 0 3
61897: ST_TO_ADDR
61898: GO 61970
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
61900: LD_ADDR_EXP 55
61904: PUSH
61905: LD_EXP 55
61909: PPUSH
61910: LD_VAR 0 2
61914: PUSH
61915: LD_INT 1
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PPUSH
61922: LD_EXP 55
61926: PUSH
61927: LD_VAR 0 2
61931: ARRAY
61932: PUSH
61933: LD_INT 1
61935: ARRAY
61936: PPUSH
61937: LD_INT 3
61939: PUSH
61940: LD_INT 24
61942: PUSH
61943: LD_INT 1000
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PPUSH
61954: CALL_OW 72
61958: PUSH
61959: LD_VAR 0 6
61963: UNION
61964: PPUSH
61965: CALL 17413 0 3
61969: ST_TO_ADDR
// if not need_heal_2 then
61970: LD_VAR 0 7
61974: NOT
61975: IFFALSE 62008
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
61977: LD_ADDR_EXP 55
61981: PUSH
61982: LD_EXP 55
61986: PPUSH
61987: LD_VAR 0 2
61991: PUSH
61992: LD_INT 2
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PPUSH
61999: EMPTY
62000: PPUSH
62001: CALL 17413 0 3
62005: ST_TO_ADDR
62006: GO 62040
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
62008: LD_ADDR_EXP 55
62012: PUSH
62013: LD_EXP 55
62017: PPUSH
62018: LD_VAR 0 2
62022: PUSH
62023: LD_INT 2
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PPUSH
62030: LD_VAR 0 7
62034: PPUSH
62035: CALL 17413 0 3
62039: ST_TO_ADDR
// if need_heal_2 then
62040: LD_VAR 0 7
62044: IFFALSE 62216
// for j in need_heal_2 do
62046: LD_ADDR_VAR 0 3
62050: PUSH
62051: LD_VAR 0 7
62055: PUSH
62056: FOR_IN
62057: IFFALSE 62214
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
62059: LD_ADDR_VAR 0 5
62063: PUSH
62064: LD_EXP 52
62068: PUSH
62069: LD_VAR 0 2
62073: ARRAY
62074: PPUSH
62075: LD_INT 2
62077: PUSH
62078: LD_INT 30
62080: PUSH
62081: LD_INT 6
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 30
62090: PUSH
62091: LD_INT 7
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PUSH
62098: LD_INT 30
62100: PUSH
62101: LD_INT 8
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 30
62110: PUSH
62111: LD_INT 0
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 30
62120: PUSH
62121: LD_INT 1
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 25
62130: PUSH
62131: LD_INT 4
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: PPUSH
62147: CALL_OW 72
62151: ST_TO_ADDR
// if tmp then
62152: LD_VAR 0 5
62156: IFFALSE 62212
// begin k := NearestUnitToUnit ( tmp , j ) ;
62158: LD_ADDR_VAR 0 4
62162: PUSH
62163: LD_VAR 0 5
62167: PPUSH
62168: LD_VAR 0 3
62172: PPUSH
62173: CALL_OW 74
62177: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
62178: LD_VAR 0 3
62182: PPUSH
62183: LD_VAR 0 4
62187: PPUSH
62188: CALL_OW 296
62192: PUSH
62193: LD_INT 7
62195: GREATER
62196: IFFALSE 62212
// ComMoveUnit ( j , k ) ;
62198: LD_VAR 0 3
62202: PPUSH
62203: LD_VAR 0 4
62207: PPUSH
62208: CALL_OW 112
// end ; end ;
62212: GO 62056
62214: POP
62215: POP
// if not need_heal_1 and not need_heal_2 then
62216: LD_VAR 0 6
62220: NOT
62221: PUSH
62222: LD_VAR 0 7
62226: NOT
62227: AND
62228: IFFALSE 62232
// continue ;
62230: GO 61685
// end ;
62232: GO 61685
62234: POP
62235: POP
// RaiseSailEvent ( 102 ) ;
62236: LD_INT 102
62238: PPUSH
62239: CALL_OW 427
// end ;
62243: LD_VAR 0 1
62247: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
62248: LD_INT 0
62250: PPUSH
62251: PPUSH
62252: PPUSH
62253: PPUSH
62254: PPUSH
// if not mc_bases then
62255: LD_EXP 52
62259: NOT
62260: IFFALSE 62264
// exit ;
62262: GO 62649
// for i = 1 to mc_bases do
62264: LD_ADDR_VAR 0 2
62268: PUSH
62269: DOUBLE
62270: LD_INT 1
62272: DEC
62273: ST_TO_ADDR
62274: LD_EXP 52
62278: PUSH
62279: FOR_TO
62280: IFFALSE 62647
// begin if not mc_building_need_repair [ i ] then
62282: LD_EXP 53
62286: PUSH
62287: LD_VAR 0 2
62291: ARRAY
62292: NOT
62293: IFFALSE 62331
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
62295: LD_ADDR_EXP 54
62299: PUSH
62300: LD_EXP 54
62304: PPUSH
62305: LD_VAR 0 2
62309: PPUSH
62310: EMPTY
62311: PPUSH
62312: CALL_OW 1
62316: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
62317: LD_VAR 0 2
62321: PPUSH
62322: LD_INT 101
62324: PPUSH
62325: CALL 57369 0 2
// continue ;
62329: GO 62279
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
62331: LD_ADDR_EXP 58
62335: PUSH
62336: LD_EXP 58
62340: PPUSH
62341: LD_VAR 0 2
62345: PPUSH
62346: EMPTY
62347: PPUSH
62348: CALL_OW 1
62352: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
62353: LD_VAR 0 2
62357: PPUSH
62358: LD_INT 103
62360: PPUSH
62361: CALL 57369 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
62365: LD_ADDR_VAR 0 5
62369: PUSH
62370: LD_EXP 52
62374: PUSH
62375: LD_VAR 0 2
62379: ARRAY
62380: PUSH
62381: LD_EXP 81
62385: PUSH
62386: LD_VAR 0 2
62390: ARRAY
62391: UNION
62392: PPUSH
62393: LD_INT 2
62395: PUSH
62396: LD_INT 25
62398: PUSH
62399: LD_INT 2
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: PUSH
62406: LD_INT 25
62408: PUSH
62409: LD_INT 16
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: LIST
62420: PUSH
62421: EMPTY
62422: LIST
62423: PPUSH
62424: CALL_OW 72
62428: ST_TO_ADDR
// if not tmp then
62429: LD_VAR 0 5
62433: NOT
62434: IFFALSE 62438
// continue ;
62436: GO 62279
// for j in tmp do
62438: LD_ADDR_VAR 0 3
62442: PUSH
62443: LD_VAR 0 5
62447: PUSH
62448: FOR_IN
62449: IFFALSE 62643
// begin if mc_need_heal [ i ] then
62451: LD_EXP 55
62455: PUSH
62456: LD_VAR 0 2
62460: ARRAY
62461: IFFALSE 62509
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
62463: LD_VAR 0 3
62467: PUSH
62468: LD_EXP 55
62472: PUSH
62473: LD_VAR 0 2
62477: ARRAY
62478: PUSH
62479: LD_INT 1
62481: ARRAY
62482: IN
62483: PUSH
62484: LD_VAR 0 3
62488: PUSH
62489: LD_EXP 55
62493: PUSH
62494: LD_VAR 0 2
62498: ARRAY
62499: PUSH
62500: LD_INT 2
62502: ARRAY
62503: IN
62504: OR
62505: IFFALSE 62509
// continue ;
62507: GO 62448
// if IsInUnit ( j ) then
62509: LD_VAR 0 3
62513: PPUSH
62514: CALL_OW 310
62518: IFFALSE 62529
// ComExitBuilding ( j ) ;
62520: LD_VAR 0 3
62524: PPUSH
62525: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
62529: LD_VAR 0 3
62533: PUSH
62534: LD_EXP 54
62538: PUSH
62539: LD_VAR 0 2
62543: ARRAY
62544: IN
62545: NOT
62546: IFFALSE 62604
// begin SetTag ( j , 101 ) ;
62548: LD_VAR 0 3
62552: PPUSH
62553: LD_INT 101
62555: PPUSH
62556: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
62560: LD_ADDR_EXP 54
62564: PUSH
62565: LD_EXP 54
62569: PPUSH
62570: LD_VAR 0 2
62574: PUSH
62575: LD_EXP 54
62579: PUSH
62580: LD_VAR 0 2
62584: ARRAY
62585: PUSH
62586: LD_INT 1
62588: PLUS
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PPUSH
62594: LD_VAR 0 3
62598: PPUSH
62599: CALL 17413 0 3
62603: ST_TO_ADDR
// end ; wait ( 1 ) ;
62604: LD_INT 1
62606: PPUSH
62607: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
62611: LD_VAR 0 3
62615: PPUSH
62616: LD_EXP 53
62620: PUSH
62621: LD_VAR 0 2
62625: ARRAY
62626: PPUSH
62627: LD_VAR 0 3
62631: PPUSH
62632: CALL_OW 74
62636: PPUSH
62637: CALL_OW 130
// end ;
62641: GO 62448
62643: POP
62644: POP
// end ;
62645: GO 62279
62647: POP
62648: POP
// end ;
62649: LD_VAR 0 1
62653: RET
// export function MC_Heal ; var i , j , tmp ; begin
62654: LD_INT 0
62656: PPUSH
62657: PPUSH
62658: PPUSH
62659: PPUSH
// if not mc_bases then
62660: LD_EXP 52
62664: NOT
62665: IFFALSE 62669
// exit ;
62667: GO 63071
// for i = 1 to mc_bases do
62669: LD_ADDR_VAR 0 2
62673: PUSH
62674: DOUBLE
62675: LD_INT 1
62677: DEC
62678: ST_TO_ADDR
62679: LD_EXP 52
62683: PUSH
62684: FOR_TO
62685: IFFALSE 63069
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
62687: LD_EXP 55
62691: PUSH
62692: LD_VAR 0 2
62696: ARRAY
62697: PUSH
62698: LD_INT 1
62700: ARRAY
62701: NOT
62702: PUSH
62703: LD_EXP 55
62707: PUSH
62708: LD_VAR 0 2
62712: ARRAY
62713: PUSH
62714: LD_INT 2
62716: ARRAY
62717: NOT
62718: AND
62719: IFFALSE 62757
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
62721: LD_ADDR_EXP 56
62725: PUSH
62726: LD_EXP 56
62730: PPUSH
62731: LD_VAR 0 2
62735: PPUSH
62736: EMPTY
62737: PPUSH
62738: CALL_OW 1
62742: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
62743: LD_VAR 0 2
62747: PPUSH
62748: LD_INT 102
62750: PPUSH
62751: CALL 57369 0 2
// continue ;
62755: GO 62684
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
62757: LD_ADDR_VAR 0 4
62761: PUSH
62762: LD_EXP 52
62766: PUSH
62767: LD_VAR 0 2
62771: ARRAY
62772: PPUSH
62773: LD_INT 25
62775: PUSH
62776: LD_INT 4
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PPUSH
62783: CALL_OW 72
62787: ST_TO_ADDR
// if not tmp then
62788: LD_VAR 0 4
62792: NOT
62793: IFFALSE 62797
// continue ;
62795: GO 62684
// if mc_taming [ i ] then
62797: LD_EXP 83
62801: PUSH
62802: LD_VAR 0 2
62806: ARRAY
62807: IFFALSE 62831
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
62809: LD_ADDR_EXP 83
62813: PUSH
62814: LD_EXP 83
62818: PPUSH
62819: LD_VAR 0 2
62823: PPUSH
62824: EMPTY
62825: PPUSH
62826: CALL_OW 1
62830: ST_TO_ADDR
// for j in tmp do
62831: LD_ADDR_VAR 0 3
62835: PUSH
62836: LD_VAR 0 4
62840: PUSH
62841: FOR_IN
62842: IFFALSE 63065
// begin if IsInUnit ( j ) then
62844: LD_VAR 0 3
62848: PPUSH
62849: CALL_OW 310
62853: IFFALSE 62864
// ComExitBuilding ( j ) ;
62855: LD_VAR 0 3
62859: PPUSH
62860: CALL_OW 122
// if not j in mc_healers [ i ] then
62864: LD_VAR 0 3
62868: PUSH
62869: LD_EXP 56
62873: PUSH
62874: LD_VAR 0 2
62878: ARRAY
62879: IN
62880: NOT
62881: IFFALSE 62927
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
62883: LD_ADDR_EXP 56
62887: PUSH
62888: LD_EXP 56
62892: PPUSH
62893: LD_VAR 0 2
62897: PUSH
62898: LD_EXP 56
62902: PUSH
62903: LD_VAR 0 2
62907: ARRAY
62908: PUSH
62909: LD_INT 1
62911: PLUS
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PPUSH
62917: LD_VAR 0 3
62921: PPUSH
62922: CALL 17413 0 3
62926: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
62927: LD_VAR 0 3
62931: PPUSH
62932: CALL_OW 110
62936: PUSH
62937: LD_INT 102
62939: NONEQUAL
62940: IFFALSE 62954
// SetTag ( j , 102 ) ;
62942: LD_VAR 0 3
62946: PPUSH
62947: LD_INT 102
62949: PPUSH
62950: CALL_OW 109
// Wait ( 3 ) ;
62954: LD_INT 3
62956: PPUSH
62957: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
62961: LD_EXP 55
62965: PUSH
62966: LD_VAR 0 2
62970: ARRAY
62971: PUSH
62972: LD_INT 1
62974: ARRAY
62975: IFFALSE 63007
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
62977: LD_VAR 0 3
62981: PPUSH
62982: LD_EXP 55
62986: PUSH
62987: LD_VAR 0 2
62991: ARRAY
62992: PUSH
62993: LD_INT 1
62995: ARRAY
62996: PUSH
62997: LD_INT 1
62999: ARRAY
63000: PPUSH
63001: CALL_OW 128
63005: GO 63063
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
63007: LD_VAR 0 3
63011: PPUSH
63012: CALL_OW 314
63016: NOT
63017: PUSH
63018: LD_EXP 55
63022: PUSH
63023: LD_VAR 0 2
63027: ARRAY
63028: PUSH
63029: LD_INT 2
63031: ARRAY
63032: AND
63033: IFFALSE 63063
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
63035: LD_VAR 0 3
63039: PPUSH
63040: LD_EXP 55
63044: PUSH
63045: LD_VAR 0 2
63049: ARRAY
63050: PUSH
63051: LD_INT 2
63053: ARRAY
63054: PUSH
63055: LD_INT 1
63057: ARRAY
63058: PPUSH
63059: CALL_OW 128
// end ;
63063: GO 62841
63065: POP
63066: POP
// end ;
63067: GO 62684
63069: POP
63070: POP
// end ;
63071: LD_VAR 0 1
63075: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
63076: LD_INT 0
63078: PPUSH
63079: PPUSH
63080: PPUSH
63081: PPUSH
63082: PPUSH
// if not mc_bases then
63083: LD_EXP 52
63087: NOT
63088: IFFALSE 63092
// exit ;
63090: GO 64235
// for i = 1 to mc_bases do
63092: LD_ADDR_VAR 0 2
63096: PUSH
63097: DOUBLE
63098: LD_INT 1
63100: DEC
63101: ST_TO_ADDR
63102: LD_EXP 52
63106: PUSH
63107: FOR_TO
63108: IFFALSE 64233
// begin if mc_scan [ i ] then
63110: LD_EXP 75
63114: PUSH
63115: LD_VAR 0 2
63119: ARRAY
63120: IFFALSE 63124
// continue ;
63122: GO 63107
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
63124: LD_EXP 57
63128: PUSH
63129: LD_VAR 0 2
63133: ARRAY
63134: NOT
63135: PUSH
63136: LD_EXP 59
63140: PUSH
63141: LD_VAR 0 2
63145: ARRAY
63146: NOT
63147: AND
63148: PUSH
63149: LD_EXP 58
63153: PUSH
63154: LD_VAR 0 2
63158: ARRAY
63159: AND
63160: IFFALSE 63198
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
63162: LD_ADDR_EXP 58
63166: PUSH
63167: LD_EXP 58
63171: PPUSH
63172: LD_VAR 0 2
63176: PPUSH
63177: EMPTY
63178: PPUSH
63179: CALL_OW 1
63183: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
63184: LD_VAR 0 2
63188: PPUSH
63189: LD_INT 103
63191: PPUSH
63192: CALL 57369 0 2
// continue ;
63196: GO 63107
// end ; if mc_construct_list [ i ] then
63198: LD_EXP 59
63202: PUSH
63203: LD_VAR 0 2
63207: ARRAY
63208: IFFALSE 63428
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
63210: LD_ADDR_VAR 0 4
63214: PUSH
63215: LD_EXP 52
63219: PUSH
63220: LD_VAR 0 2
63224: ARRAY
63225: PPUSH
63226: LD_INT 25
63228: PUSH
63229: LD_INT 2
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PPUSH
63236: CALL_OW 72
63240: PUSH
63241: LD_EXP 54
63245: PUSH
63246: LD_VAR 0 2
63250: ARRAY
63251: DIFF
63252: ST_TO_ADDR
// if not tmp then
63253: LD_VAR 0 4
63257: NOT
63258: IFFALSE 63262
// continue ;
63260: GO 63107
// for j in tmp do
63262: LD_ADDR_VAR 0 3
63266: PUSH
63267: LD_VAR 0 4
63271: PUSH
63272: FOR_IN
63273: IFFALSE 63424
// begin if not mc_builders [ i ] then
63275: LD_EXP 58
63279: PUSH
63280: LD_VAR 0 2
63284: ARRAY
63285: NOT
63286: IFFALSE 63344
// begin SetTag ( j , 103 ) ;
63288: LD_VAR 0 3
63292: PPUSH
63293: LD_INT 103
63295: PPUSH
63296: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
63300: LD_ADDR_EXP 58
63304: PUSH
63305: LD_EXP 58
63309: PPUSH
63310: LD_VAR 0 2
63314: PUSH
63315: LD_EXP 58
63319: PUSH
63320: LD_VAR 0 2
63324: ARRAY
63325: PUSH
63326: LD_INT 1
63328: PLUS
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PPUSH
63334: LD_VAR 0 3
63338: PPUSH
63339: CALL 17413 0 3
63343: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
63344: LD_VAR 0 3
63348: PPUSH
63349: CALL_OW 310
63353: IFFALSE 63364
// ComExitBuilding ( j ) ;
63355: LD_VAR 0 3
63359: PPUSH
63360: CALL_OW 122
// wait ( 3 ) ;
63364: LD_INT 3
63366: PPUSH
63367: CALL_OW 67
// if not mc_construct_list [ i ] then
63371: LD_EXP 59
63375: PUSH
63376: LD_VAR 0 2
63380: ARRAY
63381: NOT
63382: IFFALSE 63386
// break ;
63384: GO 63424
// if not HasTask ( j ) then
63386: LD_VAR 0 3
63390: PPUSH
63391: CALL_OW 314
63395: NOT
63396: IFFALSE 63422
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
63398: LD_VAR 0 3
63402: PPUSH
63403: LD_EXP 59
63407: PUSH
63408: LD_VAR 0 2
63412: ARRAY
63413: PUSH
63414: LD_INT 1
63416: ARRAY
63417: PPUSH
63418: CALL 20264 0 2
// end ;
63422: GO 63272
63424: POP
63425: POP
// end else
63426: GO 64231
// if mc_build_list [ i ] then
63428: LD_EXP 57
63432: PUSH
63433: LD_VAR 0 2
63437: ARRAY
63438: IFFALSE 64231
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
63440: LD_ADDR_VAR 0 5
63444: PUSH
63445: LD_EXP 52
63449: PUSH
63450: LD_VAR 0 2
63454: ARRAY
63455: PPUSH
63456: LD_INT 2
63458: PUSH
63459: LD_INT 30
63461: PUSH
63462: LD_INT 0
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 30
63471: PUSH
63472: LD_INT 1
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: LIST
63483: PPUSH
63484: CALL_OW 72
63488: ST_TO_ADDR
// if depot then
63489: LD_VAR 0 5
63493: IFFALSE 63511
// depot := depot [ 1 ] else
63495: LD_ADDR_VAR 0 5
63499: PUSH
63500: LD_VAR 0 5
63504: PUSH
63505: LD_INT 1
63507: ARRAY
63508: ST_TO_ADDR
63509: GO 63519
// depot := 0 ;
63511: LD_ADDR_VAR 0 5
63515: PUSH
63516: LD_INT 0
63518: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
63519: LD_EXP 57
63523: PUSH
63524: LD_VAR 0 2
63528: ARRAY
63529: PUSH
63530: LD_INT 1
63532: ARRAY
63533: PUSH
63534: LD_INT 1
63536: ARRAY
63537: PPUSH
63538: CALL 20094 0 1
63542: PUSH
63543: LD_EXP 52
63547: PUSH
63548: LD_VAR 0 2
63552: ARRAY
63553: PPUSH
63554: LD_INT 2
63556: PUSH
63557: LD_INT 30
63559: PUSH
63560: LD_INT 2
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 30
63569: PUSH
63570: LD_INT 3
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: LIST
63581: PPUSH
63582: CALL_OW 72
63586: NOT
63587: AND
63588: IFFALSE 63693
// begin for j = 1 to mc_build_list [ i ] do
63590: LD_ADDR_VAR 0 3
63594: PUSH
63595: DOUBLE
63596: LD_INT 1
63598: DEC
63599: ST_TO_ADDR
63600: LD_EXP 57
63604: PUSH
63605: LD_VAR 0 2
63609: ARRAY
63610: PUSH
63611: FOR_TO
63612: IFFALSE 63691
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
63614: LD_EXP 57
63618: PUSH
63619: LD_VAR 0 2
63623: ARRAY
63624: PUSH
63625: LD_VAR 0 3
63629: ARRAY
63630: PUSH
63631: LD_INT 1
63633: ARRAY
63634: PUSH
63635: LD_INT 2
63637: EQUAL
63638: IFFALSE 63689
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
63640: LD_ADDR_EXP 57
63644: PUSH
63645: LD_EXP 57
63649: PPUSH
63650: LD_VAR 0 2
63654: PPUSH
63655: LD_EXP 57
63659: PUSH
63660: LD_VAR 0 2
63664: ARRAY
63665: PPUSH
63666: LD_VAR 0 3
63670: PPUSH
63671: LD_INT 1
63673: PPUSH
63674: LD_INT 0
63676: PPUSH
63677: CALL 16831 0 4
63681: PPUSH
63682: CALL_OW 1
63686: ST_TO_ADDR
// break ;
63687: GO 63691
// end ;
63689: GO 63611
63691: POP
63692: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
63693: LD_EXP 57
63697: PUSH
63698: LD_VAR 0 2
63702: ARRAY
63703: PUSH
63704: LD_INT 1
63706: ARRAY
63707: PUSH
63708: LD_INT 1
63710: ARRAY
63711: PUSH
63712: LD_INT 0
63714: EQUAL
63715: PUSH
63716: LD_VAR 0 5
63720: PUSH
63721: LD_VAR 0 5
63725: PPUSH
63726: LD_EXP 57
63730: PUSH
63731: LD_VAR 0 2
63735: ARRAY
63736: PUSH
63737: LD_INT 1
63739: ARRAY
63740: PUSH
63741: LD_INT 1
63743: ARRAY
63744: PPUSH
63745: LD_EXP 57
63749: PUSH
63750: LD_VAR 0 2
63754: ARRAY
63755: PUSH
63756: LD_INT 1
63758: ARRAY
63759: PUSH
63760: LD_INT 2
63762: ARRAY
63763: PPUSH
63764: LD_EXP 57
63768: PUSH
63769: LD_VAR 0 2
63773: ARRAY
63774: PUSH
63775: LD_INT 1
63777: ARRAY
63778: PUSH
63779: LD_INT 3
63781: ARRAY
63782: PPUSH
63783: LD_EXP 57
63787: PUSH
63788: LD_VAR 0 2
63792: ARRAY
63793: PUSH
63794: LD_INT 1
63796: ARRAY
63797: PUSH
63798: LD_INT 4
63800: ARRAY
63801: PPUSH
63802: CALL 24828 0 5
63806: AND
63807: OR
63808: IFFALSE 64089
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
63810: LD_ADDR_VAR 0 4
63814: PUSH
63815: LD_EXP 52
63819: PUSH
63820: LD_VAR 0 2
63824: ARRAY
63825: PPUSH
63826: LD_INT 25
63828: PUSH
63829: LD_INT 2
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PPUSH
63836: CALL_OW 72
63840: PUSH
63841: LD_EXP 54
63845: PUSH
63846: LD_VAR 0 2
63850: ARRAY
63851: DIFF
63852: ST_TO_ADDR
// if not tmp then
63853: LD_VAR 0 4
63857: NOT
63858: IFFALSE 63862
// continue ;
63860: GO 63107
// for j in tmp do
63862: LD_ADDR_VAR 0 3
63866: PUSH
63867: LD_VAR 0 4
63871: PUSH
63872: FOR_IN
63873: IFFALSE 64085
// begin if not mc_builders [ i ] then
63875: LD_EXP 58
63879: PUSH
63880: LD_VAR 0 2
63884: ARRAY
63885: NOT
63886: IFFALSE 63944
// begin SetTag ( j , 103 ) ;
63888: LD_VAR 0 3
63892: PPUSH
63893: LD_INT 103
63895: PPUSH
63896: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
63900: LD_ADDR_EXP 58
63904: PUSH
63905: LD_EXP 58
63909: PPUSH
63910: LD_VAR 0 2
63914: PUSH
63915: LD_EXP 58
63919: PUSH
63920: LD_VAR 0 2
63924: ARRAY
63925: PUSH
63926: LD_INT 1
63928: PLUS
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PPUSH
63934: LD_VAR 0 3
63938: PPUSH
63939: CALL 17413 0 3
63943: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
63944: LD_VAR 0 3
63948: PPUSH
63949: CALL_OW 310
63953: IFFALSE 63964
// ComExitBuilding ( j ) ;
63955: LD_VAR 0 3
63959: PPUSH
63960: CALL_OW 122
// wait ( 3 ) ;
63964: LD_INT 3
63966: PPUSH
63967: CALL_OW 67
// if not mc_build_list [ i ] then
63971: LD_EXP 57
63975: PUSH
63976: LD_VAR 0 2
63980: ARRAY
63981: NOT
63982: IFFALSE 63986
// break ;
63984: GO 64085
// if not HasTask ( j ) then
63986: LD_VAR 0 3
63990: PPUSH
63991: CALL_OW 314
63995: NOT
63996: IFFALSE 64083
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
63998: LD_VAR 0 3
64002: PPUSH
64003: LD_EXP 57
64007: PUSH
64008: LD_VAR 0 2
64012: ARRAY
64013: PUSH
64014: LD_INT 1
64016: ARRAY
64017: PUSH
64018: LD_INT 1
64020: ARRAY
64021: PPUSH
64022: LD_EXP 57
64026: PUSH
64027: LD_VAR 0 2
64031: ARRAY
64032: PUSH
64033: LD_INT 1
64035: ARRAY
64036: PUSH
64037: LD_INT 2
64039: ARRAY
64040: PPUSH
64041: LD_EXP 57
64045: PUSH
64046: LD_VAR 0 2
64050: ARRAY
64051: PUSH
64052: LD_INT 1
64054: ARRAY
64055: PUSH
64056: LD_INT 3
64058: ARRAY
64059: PPUSH
64060: LD_EXP 57
64064: PUSH
64065: LD_VAR 0 2
64069: ARRAY
64070: PUSH
64071: LD_INT 1
64073: ARRAY
64074: PUSH
64075: LD_INT 4
64077: ARRAY
64078: PPUSH
64079: CALL_OW 145
// end ;
64083: GO 63872
64085: POP
64086: POP
// end else
64087: GO 64231
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
64089: LD_EXP 52
64093: PUSH
64094: LD_VAR 0 2
64098: ARRAY
64099: PPUSH
64100: LD_EXP 57
64104: PUSH
64105: LD_VAR 0 2
64109: ARRAY
64110: PUSH
64111: LD_INT 1
64113: ARRAY
64114: PUSH
64115: LD_INT 1
64117: ARRAY
64118: PPUSH
64119: LD_EXP 57
64123: PUSH
64124: LD_VAR 0 2
64128: ARRAY
64129: PUSH
64130: LD_INT 1
64132: ARRAY
64133: PUSH
64134: LD_INT 2
64136: ARRAY
64137: PPUSH
64138: LD_EXP 57
64142: PUSH
64143: LD_VAR 0 2
64147: ARRAY
64148: PUSH
64149: LD_INT 1
64151: ARRAY
64152: PUSH
64153: LD_INT 3
64155: ARRAY
64156: PPUSH
64157: LD_EXP 57
64161: PUSH
64162: LD_VAR 0 2
64166: ARRAY
64167: PUSH
64168: LD_INT 1
64170: ARRAY
64171: PUSH
64172: LD_INT 4
64174: ARRAY
64175: PPUSH
64176: CALL 24164 0 5
64180: NOT
64181: IFFALSE 64231
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
64183: LD_ADDR_EXP 57
64187: PUSH
64188: LD_EXP 57
64192: PPUSH
64193: LD_VAR 0 2
64197: PPUSH
64198: LD_EXP 57
64202: PUSH
64203: LD_VAR 0 2
64207: ARRAY
64208: PPUSH
64209: LD_INT 1
64211: PPUSH
64212: LD_INT 1
64214: NEG
64215: PPUSH
64216: LD_INT 0
64218: PPUSH
64219: CALL 16831 0 4
64223: PPUSH
64224: CALL_OW 1
64228: ST_TO_ADDR
// continue ;
64229: GO 63107
// end ; end ; end ;
64231: GO 63107
64233: POP
64234: POP
// end ;
64235: LD_VAR 0 1
64239: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
64240: LD_INT 0
64242: PPUSH
64243: PPUSH
64244: PPUSH
64245: PPUSH
64246: PPUSH
64247: PPUSH
// if not mc_bases then
64248: LD_EXP 52
64252: NOT
64253: IFFALSE 64257
// exit ;
64255: GO 64684
// for i = 1 to mc_bases do
64257: LD_ADDR_VAR 0 2
64261: PUSH
64262: DOUBLE
64263: LD_INT 1
64265: DEC
64266: ST_TO_ADDR
64267: LD_EXP 52
64271: PUSH
64272: FOR_TO
64273: IFFALSE 64682
// begin tmp := mc_build_upgrade [ i ] ;
64275: LD_ADDR_VAR 0 4
64279: PUSH
64280: LD_EXP 84
64284: PUSH
64285: LD_VAR 0 2
64289: ARRAY
64290: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
64291: LD_ADDR_VAR 0 6
64295: PUSH
64296: LD_EXP 85
64300: PUSH
64301: LD_VAR 0 2
64305: ARRAY
64306: PPUSH
64307: LD_INT 2
64309: PUSH
64310: LD_INT 30
64312: PUSH
64313: LD_INT 6
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 30
64322: PUSH
64323: LD_INT 7
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: LIST
64334: PPUSH
64335: CALL_OW 72
64339: ST_TO_ADDR
// if not tmp and not lab then
64340: LD_VAR 0 4
64344: NOT
64345: PUSH
64346: LD_VAR 0 6
64350: NOT
64351: AND
64352: IFFALSE 64356
// continue ;
64354: GO 64272
// if tmp then
64356: LD_VAR 0 4
64360: IFFALSE 64480
// for j in tmp do
64362: LD_ADDR_VAR 0 3
64366: PUSH
64367: LD_VAR 0 4
64371: PUSH
64372: FOR_IN
64373: IFFALSE 64478
// begin if UpgradeCost ( j ) then
64375: LD_VAR 0 3
64379: PPUSH
64380: CALL 23824 0 1
64384: IFFALSE 64476
// begin ComUpgrade ( j ) ;
64386: LD_VAR 0 3
64390: PPUSH
64391: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
64395: LD_ADDR_EXP 84
64399: PUSH
64400: LD_EXP 84
64404: PPUSH
64405: LD_VAR 0 2
64409: PPUSH
64410: LD_EXP 84
64414: PUSH
64415: LD_VAR 0 2
64419: ARRAY
64420: PUSH
64421: LD_VAR 0 3
64425: DIFF
64426: PPUSH
64427: CALL_OW 1
64431: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
64432: LD_ADDR_EXP 59
64436: PUSH
64437: LD_EXP 59
64441: PPUSH
64442: LD_VAR 0 2
64446: PUSH
64447: LD_EXP 59
64451: PUSH
64452: LD_VAR 0 2
64456: ARRAY
64457: PUSH
64458: LD_INT 1
64460: PLUS
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PPUSH
64466: LD_VAR 0 3
64470: PPUSH
64471: CALL 17413 0 3
64475: ST_TO_ADDR
// end ; end ;
64476: GO 64372
64478: POP
64479: POP
// if not lab or not mc_lab_upgrade [ i ] then
64480: LD_VAR 0 6
64484: NOT
64485: PUSH
64486: LD_EXP 86
64490: PUSH
64491: LD_VAR 0 2
64495: ARRAY
64496: NOT
64497: OR
64498: IFFALSE 64502
// continue ;
64500: GO 64272
// for j in lab do
64502: LD_ADDR_VAR 0 3
64506: PUSH
64507: LD_VAR 0 6
64511: PUSH
64512: FOR_IN
64513: IFFALSE 64678
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
64515: LD_VAR 0 3
64519: PPUSH
64520: CALL_OW 266
64524: PUSH
64525: LD_INT 6
64527: PUSH
64528: LD_INT 7
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: IN
64535: PUSH
64536: LD_VAR 0 3
64540: PPUSH
64541: CALL_OW 461
64545: PUSH
64546: LD_INT 1
64548: NONEQUAL
64549: AND
64550: IFFALSE 64676
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
64552: LD_VAR 0 3
64556: PPUSH
64557: LD_EXP 86
64561: PUSH
64562: LD_VAR 0 2
64566: ARRAY
64567: PUSH
64568: LD_INT 1
64570: ARRAY
64571: PPUSH
64572: CALL 24029 0 2
64576: IFFALSE 64676
// begin ComCancel ( j ) ;
64578: LD_VAR 0 3
64582: PPUSH
64583: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
64587: LD_VAR 0 3
64591: PPUSH
64592: LD_EXP 86
64596: PUSH
64597: LD_VAR 0 2
64601: ARRAY
64602: PUSH
64603: LD_INT 1
64605: ARRAY
64606: PPUSH
64607: CALL_OW 207
// if not j in mc_construct_list [ i ] then
64611: LD_VAR 0 3
64615: PUSH
64616: LD_EXP 59
64620: PUSH
64621: LD_VAR 0 2
64625: ARRAY
64626: IN
64627: NOT
64628: IFFALSE 64674
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
64630: LD_ADDR_EXP 59
64634: PUSH
64635: LD_EXP 59
64639: PPUSH
64640: LD_VAR 0 2
64644: PUSH
64645: LD_EXP 59
64649: PUSH
64650: LD_VAR 0 2
64654: ARRAY
64655: PUSH
64656: LD_INT 1
64658: PLUS
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PPUSH
64664: LD_VAR 0 3
64668: PPUSH
64669: CALL 17413 0 3
64673: ST_TO_ADDR
// break ;
64674: GO 64678
// end ; end ; end ;
64676: GO 64512
64678: POP
64679: POP
// end ;
64680: GO 64272
64682: POP
64683: POP
// end ;
64684: LD_VAR 0 1
64688: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
64689: LD_INT 0
64691: PPUSH
64692: PPUSH
64693: PPUSH
64694: PPUSH
64695: PPUSH
64696: PPUSH
64697: PPUSH
64698: PPUSH
64699: PPUSH
// if not mc_bases then
64700: LD_EXP 52
64704: NOT
64705: IFFALSE 64709
// exit ;
64707: GO 65114
// for i = 1 to mc_bases do
64709: LD_ADDR_VAR 0 2
64713: PUSH
64714: DOUBLE
64715: LD_INT 1
64717: DEC
64718: ST_TO_ADDR
64719: LD_EXP 52
64723: PUSH
64724: FOR_TO
64725: IFFALSE 65112
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
64727: LD_EXP 60
64731: PUSH
64732: LD_VAR 0 2
64736: ARRAY
64737: NOT
64738: PUSH
64739: LD_EXP 52
64743: PUSH
64744: LD_VAR 0 2
64748: ARRAY
64749: PPUSH
64750: LD_INT 30
64752: PUSH
64753: LD_INT 3
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PPUSH
64760: CALL_OW 72
64764: NOT
64765: OR
64766: IFFALSE 64770
// continue ;
64768: GO 64724
// busy := false ;
64770: LD_ADDR_VAR 0 8
64774: PUSH
64775: LD_INT 0
64777: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
64778: LD_ADDR_VAR 0 4
64782: PUSH
64783: LD_EXP 52
64787: PUSH
64788: LD_VAR 0 2
64792: ARRAY
64793: PPUSH
64794: LD_INT 30
64796: PUSH
64797: LD_INT 3
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PPUSH
64804: CALL_OW 72
64808: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
64809: LD_ADDR_VAR 0 6
64813: PUSH
64814: LD_EXP 60
64818: PUSH
64819: LD_VAR 0 2
64823: ARRAY
64824: PPUSH
64825: LD_INT 2
64827: PUSH
64828: LD_INT 30
64830: PUSH
64831: LD_INT 32
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 30
64840: PUSH
64841: LD_INT 33
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: LIST
64852: PPUSH
64853: CALL_OW 72
64857: ST_TO_ADDR
// if not t then
64858: LD_VAR 0 6
64862: NOT
64863: IFFALSE 64867
// continue ;
64865: GO 64724
// for j in tmp do
64867: LD_ADDR_VAR 0 3
64871: PUSH
64872: LD_VAR 0 4
64876: PUSH
64877: FOR_IN
64878: IFFALSE 64908
// if not BuildingStatus ( j ) = bs_idle then
64880: LD_VAR 0 3
64884: PPUSH
64885: CALL_OW 461
64889: PUSH
64890: LD_INT 2
64892: EQUAL
64893: NOT
64894: IFFALSE 64906
// begin busy := true ;
64896: LD_ADDR_VAR 0 8
64900: PUSH
64901: LD_INT 1
64903: ST_TO_ADDR
// break ;
64904: GO 64908
// end ;
64906: GO 64877
64908: POP
64909: POP
// if busy then
64910: LD_VAR 0 8
64914: IFFALSE 64918
// continue ;
64916: GO 64724
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
64918: LD_ADDR_VAR 0 7
64922: PUSH
64923: LD_VAR 0 6
64927: PPUSH
64928: LD_INT 35
64930: PUSH
64931: LD_INT 0
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PPUSH
64938: CALL_OW 72
64942: ST_TO_ADDR
// if tw then
64943: LD_VAR 0 7
64947: IFFALSE 65024
// begin tw := tw [ 1 ] ;
64949: LD_ADDR_VAR 0 7
64953: PUSH
64954: LD_VAR 0 7
64958: PUSH
64959: LD_INT 1
64961: ARRAY
64962: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
64963: LD_ADDR_VAR 0 9
64967: PUSH
64968: LD_VAR 0 7
64972: PPUSH
64973: LD_EXP 77
64977: PUSH
64978: LD_VAR 0 2
64982: ARRAY
64983: PPUSH
64984: CALL 22383 0 2
64988: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
64989: LD_EXP 91
64993: PUSH
64994: LD_VAR 0 2
64998: ARRAY
64999: IFFALSE 65022
// if not weapon in mc_allowed_tower_weapons [ i ] then
65001: LD_VAR 0 9
65005: PUSH
65006: LD_EXP 91
65010: PUSH
65011: LD_VAR 0 2
65015: ARRAY
65016: IN
65017: NOT
65018: IFFALSE 65022
// continue ;
65020: GO 64724
// end else
65022: GO 65087
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
65024: LD_ADDR_VAR 0 5
65028: PUSH
65029: LD_EXP 60
65033: PUSH
65034: LD_VAR 0 2
65038: ARRAY
65039: PPUSH
65040: LD_VAR 0 4
65044: PPUSH
65045: CALL 52578 0 2
65049: ST_TO_ADDR
// if not tmp2 then
65050: LD_VAR 0 5
65054: NOT
65055: IFFALSE 65059
// continue ;
65057: GO 64724
// tw := tmp2 [ 1 ] ;
65059: LD_ADDR_VAR 0 7
65063: PUSH
65064: LD_VAR 0 5
65068: PUSH
65069: LD_INT 1
65071: ARRAY
65072: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
65073: LD_ADDR_VAR 0 9
65077: PUSH
65078: LD_VAR 0 5
65082: PUSH
65083: LD_INT 2
65085: ARRAY
65086: ST_TO_ADDR
// end ; if not weapon then
65087: LD_VAR 0 9
65091: NOT
65092: IFFALSE 65096
// continue ;
65094: GO 64724
// ComPlaceWeapon ( tw , weapon ) ;
65096: LD_VAR 0 7
65100: PPUSH
65101: LD_VAR 0 9
65105: PPUSH
65106: CALL_OW 148
// end ;
65110: GO 64724
65112: POP
65113: POP
// end ;
65114: LD_VAR 0 1
65118: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
65119: LD_INT 0
65121: PPUSH
65122: PPUSH
65123: PPUSH
65124: PPUSH
65125: PPUSH
65126: PPUSH
// if not mc_bases then
65127: LD_EXP 52
65131: NOT
65132: IFFALSE 65136
// exit ;
65134: GO 66148
// for i = 1 to mc_bases do
65136: LD_ADDR_VAR 0 2
65140: PUSH
65141: DOUBLE
65142: LD_INT 1
65144: DEC
65145: ST_TO_ADDR
65146: LD_EXP 52
65150: PUSH
65151: FOR_TO
65152: IFFALSE 66146
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
65154: LD_EXP 65
65158: PUSH
65159: LD_VAR 0 2
65163: ARRAY
65164: NOT
65165: PUSH
65166: LD_EXP 65
65170: PUSH
65171: LD_VAR 0 2
65175: ARRAY
65176: PUSH
65177: LD_EXP 66
65181: PUSH
65182: LD_VAR 0 2
65186: ARRAY
65187: EQUAL
65188: OR
65189: IFFALSE 65193
// continue ;
65191: GO 65151
// if mc_miners [ i ] then
65193: LD_EXP 66
65197: PUSH
65198: LD_VAR 0 2
65202: ARRAY
65203: IFFALSE 65833
// begin k := 1 ;
65205: LD_ADDR_VAR 0 4
65209: PUSH
65210: LD_INT 1
65212: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
65213: LD_ADDR_VAR 0 3
65217: PUSH
65218: DOUBLE
65219: LD_EXP 66
65223: PUSH
65224: LD_VAR 0 2
65228: ARRAY
65229: INC
65230: ST_TO_ADDR
65231: LD_INT 1
65233: PUSH
65234: FOR_DOWNTO
65235: IFFALSE 65831
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
65237: LD_EXP 66
65241: PUSH
65242: LD_VAR 0 2
65246: ARRAY
65247: PUSH
65248: LD_VAR 0 3
65252: ARRAY
65253: PPUSH
65254: CALL_OW 301
65258: PUSH
65259: LD_EXP 66
65263: PUSH
65264: LD_VAR 0 2
65268: ARRAY
65269: PUSH
65270: LD_VAR 0 3
65274: ARRAY
65275: PPUSH
65276: CALL_OW 257
65280: PUSH
65281: LD_INT 1
65283: NONEQUAL
65284: OR
65285: IFFALSE 65348
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
65287: LD_ADDR_VAR 0 5
65291: PUSH
65292: LD_EXP 66
65296: PUSH
65297: LD_VAR 0 2
65301: ARRAY
65302: PUSH
65303: LD_EXP 66
65307: PUSH
65308: LD_VAR 0 2
65312: ARRAY
65313: PUSH
65314: LD_VAR 0 3
65318: ARRAY
65319: DIFF
65320: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
65321: LD_ADDR_EXP 66
65325: PUSH
65326: LD_EXP 66
65330: PPUSH
65331: LD_VAR 0 2
65335: PPUSH
65336: LD_VAR 0 5
65340: PPUSH
65341: CALL_OW 1
65345: ST_TO_ADDR
// continue ;
65346: GO 65234
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
65348: LD_EXP 66
65352: PUSH
65353: LD_VAR 0 2
65357: ARRAY
65358: PUSH
65359: LD_VAR 0 3
65363: ARRAY
65364: PPUSH
65365: CALL 17349 0 1
65369: PUSH
65370: LD_EXP 66
65374: PUSH
65375: LD_VAR 0 2
65379: ARRAY
65380: PUSH
65381: LD_VAR 0 3
65385: ARRAY
65386: PPUSH
65387: CALL_OW 255
65391: PPUSH
65392: LD_EXP 65
65396: PUSH
65397: LD_VAR 0 2
65401: ARRAY
65402: PUSH
65403: LD_VAR 0 4
65407: ARRAY
65408: PUSH
65409: LD_INT 1
65411: ARRAY
65412: PPUSH
65413: LD_EXP 65
65417: PUSH
65418: LD_VAR 0 2
65422: ARRAY
65423: PUSH
65424: LD_VAR 0 4
65428: ARRAY
65429: PUSH
65430: LD_INT 2
65432: ARRAY
65433: PPUSH
65434: LD_INT 15
65436: PPUSH
65437: CALL 18309 0 4
65441: PUSH
65442: LD_INT 4
65444: ARRAY
65445: PUSH
65446: LD_EXP 66
65450: PUSH
65451: LD_VAR 0 2
65455: ARRAY
65456: PUSH
65457: LD_VAR 0 3
65461: ARRAY
65462: PPUSH
65463: LD_INT 10
65465: PPUSH
65466: CALL 20006 0 2
65470: PUSH
65471: LD_INT 4
65473: ARRAY
65474: OR
65475: AND
65476: IFFALSE 65499
// ComStop ( mc_miners [ i ] [ j ] ) ;
65478: LD_EXP 66
65482: PUSH
65483: LD_VAR 0 2
65487: ARRAY
65488: PUSH
65489: LD_VAR 0 3
65493: ARRAY
65494: PPUSH
65495: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
65499: LD_EXP 66
65503: PUSH
65504: LD_VAR 0 2
65508: ARRAY
65509: PUSH
65510: LD_VAR 0 3
65514: ARRAY
65515: PPUSH
65516: CALL_OW 257
65520: PUSH
65521: LD_INT 1
65523: EQUAL
65524: PUSH
65525: LD_EXP 66
65529: PUSH
65530: LD_VAR 0 2
65534: ARRAY
65535: PUSH
65536: LD_VAR 0 3
65540: ARRAY
65541: PPUSH
65542: CALL_OW 459
65546: NOT
65547: AND
65548: PUSH
65549: LD_EXP 66
65553: PUSH
65554: LD_VAR 0 2
65558: ARRAY
65559: PUSH
65560: LD_VAR 0 3
65564: ARRAY
65565: PPUSH
65566: CALL_OW 255
65570: PPUSH
65571: LD_EXP 65
65575: PUSH
65576: LD_VAR 0 2
65580: ARRAY
65581: PUSH
65582: LD_VAR 0 4
65586: ARRAY
65587: PUSH
65588: LD_INT 1
65590: ARRAY
65591: PPUSH
65592: LD_EXP 65
65596: PUSH
65597: LD_VAR 0 2
65601: ARRAY
65602: PUSH
65603: LD_VAR 0 4
65607: ARRAY
65608: PUSH
65609: LD_INT 2
65611: ARRAY
65612: PPUSH
65613: LD_INT 15
65615: PPUSH
65616: CALL 18309 0 4
65620: PUSH
65621: LD_INT 4
65623: ARRAY
65624: PUSH
65625: LD_INT 0
65627: EQUAL
65628: AND
65629: PUSH
65630: LD_EXP 66
65634: PUSH
65635: LD_VAR 0 2
65639: ARRAY
65640: PUSH
65641: LD_VAR 0 3
65645: ARRAY
65646: PPUSH
65647: CALL_OW 314
65651: NOT
65652: AND
65653: IFFALSE 65829
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
65655: LD_EXP 66
65659: PUSH
65660: LD_VAR 0 2
65664: ARRAY
65665: PUSH
65666: LD_VAR 0 3
65670: ARRAY
65671: PPUSH
65672: CALL_OW 310
65676: IFFALSE 65699
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
65678: LD_EXP 66
65682: PUSH
65683: LD_VAR 0 2
65687: ARRAY
65688: PUSH
65689: LD_VAR 0 3
65693: ARRAY
65694: PPUSH
65695: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
65699: LD_EXP 66
65703: PUSH
65704: LD_VAR 0 2
65708: ARRAY
65709: PUSH
65710: LD_VAR 0 3
65714: ARRAY
65715: PPUSH
65716: CALL_OW 314
65720: NOT
65721: IFFALSE 65789
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
65723: LD_EXP 66
65727: PUSH
65728: LD_VAR 0 2
65732: ARRAY
65733: PUSH
65734: LD_VAR 0 3
65738: ARRAY
65739: PPUSH
65740: LD_EXP 65
65744: PUSH
65745: LD_VAR 0 2
65749: ARRAY
65750: PUSH
65751: LD_VAR 0 4
65755: ARRAY
65756: PUSH
65757: LD_INT 1
65759: ARRAY
65760: PPUSH
65761: LD_EXP 65
65765: PUSH
65766: LD_VAR 0 2
65770: ARRAY
65771: PUSH
65772: LD_VAR 0 4
65776: ARRAY
65777: PUSH
65778: LD_INT 2
65780: ARRAY
65781: PPUSH
65782: LD_INT 0
65784: PPUSH
65785: CALL_OW 193
// k := k + 1 ;
65789: LD_ADDR_VAR 0 4
65793: PUSH
65794: LD_VAR 0 4
65798: PUSH
65799: LD_INT 1
65801: PLUS
65802: ST_TO_ADDR
// if k > mc_mines [ i ] then
65803: LD_VAR 0 4
65807: PUSH
65808: LD_EXP 65
65812: PUSH
65813: LD_VAR 0 2
65817: ARRAY
65818: GREATER
65819: IFFALSE 65829
// k := 1 ;
65821: LD_ADDR_VAR 0 4
65825: PUSH
65826: LD_INT 1
65828: ST_TO_ADDR
// end ; end ;
65829: GO 65234
65831: POP
65832: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
65833: LD_ADDR_VAR 0 5
65837: PUSH
65838: LD_EXP 52
65842: PUSH
65843: LD_VAR 0 2
65847: ARRAY
65848: PPUSH
65849: LD_INT 2
65851: PUSH
65852: LD_INT 30
65854: PUSH
65855: LD_INT 4
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 30
65864: PUSH
65865: LD_INT 5
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 30
65874: PUSH
65875: LD_INT 32
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: PPUSH
65888: CALL_OW 72
65892: ST_TO_ADDR
// if not tmp then
65893: LD_VAR 0 5
65897: NOT
65898: IFFALSE 65902
// continue ;
65900: GO 65151
// list := [ ] ;
65902: LD_ADDR_VAR 0 6
65906: PUSH
65907: EMPTY
65908: ST_TO_ADDR
// for j in tmp do
65909: LD_ADDR_VAR 0 3
65913: PUSH
65914: LD_VAR 0 5
65918: PUSH
65919: FOR_IN
65920: IFFALSE 65989
// begin for k in UnitsInside ( j ) do
65922: LD_ADDR_VAR 0 4
65926: PUSH
65927: LD_VAR 0 3
65931: PPUSH
65932: CALL_OW 313
65936: PUSH
65937: FOR_IN
65938: IFFALSE 65985
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
65940: LD_VAR 0 4
65944: PPUSH
65945: CALL_OW 257
65949: PUSH
65950: LD_INT 1
65952: EQUAL
65953: PUSH
65954: LD_VAR 0 4
65958: PPUSH
65959: CALL_OW 459
65963: NOT
65964: AND
65965: IFFALSE 65983
// list := list ^ k ;
65967: LD_ADDR_VAR 0 6
65971: PUSH
65972: LD_VAR 0 6
65976: PUSH
65977: LD_VAR 0 4
65981: ADD
65982: ST_TO_ADDR
65983: GO 65937
65985: POP
65986: POP
// end ;
65987: GO 65919
65989: POP
65990: POP
// list := list diff mc_miners [ i ] ;
65991: LD_ADDR_VAR 0 6
65995: PUSH
65996: LD_VAR 0 6
66000: PUSH
66001: LD_EXP 66
66005: PUSH
66006: LD_VAR 0 2
66010: ARRAY
66011: DIFF
66012: ST_TO_ADDR
// if not list then
66013: LD_VAR 0 6
66017: NOT
66018: IFFALSE 66022
// continue ;
66020: GO 65151
// k := mc_mines [ i ] - mc_miners [ i ] ;
66022: LD_ADDR_VAR 0 4
66026: PUSH
66027: LD_EXP 65
66031: PUSH
66032: LD_VAR 0 2
66036: ARRAY
66037: PUSH
66038: LD_EXP 66
66042: PUSH
66043: LD_VAR 0 2
66047: ARRAY
66048: MINUS
66049: ST_TO_ADDR
// if k > list then
66050: LD_VAR 0 4
66054: PUSH
66055: LD_VAR 0 6
66059: GREATER
66060: IFFALSE 66072
// k := list ;
66062: LD_ADDR_VAR 0 4
66066: PUSH
66067: LD_VAR 0 6
66071: ST_TO_ADDR
// for j = 1 to k do
66072: LD_ADDR_VAR 0 3
66076: PUSH
66077: DOUBLE
66078: LD_INT 1
66080: DEC
66081: ST_TO_ADDR
66082: LD_VAR 0 4
66086: PUSH
66087: FOR_TO
66088: IFFALSE 66142
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
66090: LD_ADDR_EXP 66
66094: PUSH
66095: LD_EXP 66
66099: PPUSH
66100: LD_VAR 0 2
66104: PUSH
66105: LD_EXP 66
66109: PUSH
66110: LD_VAR 0 2
66114: ARRAY
66115: PUSH
66116: LD_INT 1
66118: PLUS
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PPUSH
66124: LD_VAR 0 6
66128: PUSH
66129: LD_VAR 0 3
66133: ARRAY
66134: PPUSH
66135: CALL 17413 0 3
66139: ST_TO_ADDR
66140: GO 66087
66142: POP
66143: POP
// end ;
66144: GO 65151
66146: POP
66147: POP
// end ;
66148: LD_VAR 0 1
66152: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
66153: LD_INT 0
66155: PPUSH
66156: PPUSH
66157: PPUSH
66158: PPUSH
66159: PPUSH
66160: PPUSH
66161: PPUSH
66162: PPUSH
66163: PPUSH
66164: PPUSH
// if not mc_bases then
66165: LD_EXP 52
66169: NOT
66170: IFFALSE 66174
// exit ;
66172: GO 67905
// for i = 1 to mc_bases do
66174: LD_ADDR_VAR 0 2
66178: PUSH
66179: DOUBLE
66180: LD_INT 1
66182: DEC
66183: ST_TO_ADDR
66184: LD_EXP 52
66188: PUSH
66189: FOR_TO
66190: IFFALSE 67903
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
66192: LD_EXP 52
66196: PUSH
66197: LD_VAR 0 2
66201: ARRAY
66202: NOT
66203: PUSH
66204: LD_EXP 59
66208: PUSH
66209: LD_VAR 0 2
66213: ARRAY
66214: OR
66215: IFFALSE 66219
// continue ;
66217: GO 66189
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
66219: LD_EXP 68
66223: PUSH
66224: LD_VAR 0 2
66228: ARRAY
66229: NOT
66230: PUSH
66231: LD_EXP 69
66235: PUSH
66236: LD_VAR 0 2
66240: ARRAY
66241: AND
66242: IFFALSE 66280
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
66244: LD_ADDR_EXP 69
66248: PUSH
66249: LD_EXP 69
66253: PPUSH
66254: LD_VAR 0 2
66258: PPUSH
66259: EMPTY
66260: PPUSH
66261: CALL_OW 1
66265: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
66266: LD_VAR 0 2
66270: PPUSH
66271: LD_INT 107
66273: PPUSH
66274: CALL 57369 0 2
// continue ;
66278: GO 66189
// end ; target := [ ] ;
66280: LD_ADDR_VAR 0 6
66284: PUSH
66285: EMPTY
66286: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
66287: LD_ADDR_VAR 0 3
66291: PUSH
66292: DOUBLE
66293: LD_EXP 68
66297: PUSH
66298: LD_VAR 0 2
66302: ARRAY
66303: INC
66304: ST_TO_ADDR
66305: LD_INT 1
66307: PUSH
66308: FOR_DOWNTO
66309: IFFALSE 66569
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
66311: LD_EXP 68
66315: PUSH
66316: LD_VAR 0 2
66320: ARRAY
66321: PUSH
66322: LD_VAR 0 3
66326: ARRAY
66327: PUSH
66328: LD_INT 2
66330: ARRAY
66331: PPUSH
66332: LD_EXP 68
66336: PUSH
66337: LD_VAR 0 2
66341: ARRAY
66342: PUSH
66343: LD_VAR 0 3
66347: ARRAY
66348: PUSH
66349: LD_INT 3
66351: ARRAY
66352: PPUSH
66353: CALL_OW 488
66357: PUSH
66358: LD_EXP 68
66362: PUSH
66363: LD_VAR 0 2
66367: ARRAY
66368: PUSH
66369: LD_VAR 0 3
66373: ARRAY
66374: PUSH
66375: LD_INT 2
66377: ARRAY
66378: PPUSH
66379: LD_EXP 68
66383: PUSH
66384: LD_VAR 0 2
66388: ARRAY
66389: PUSH
66390: LD_VAR 0 3
66394: ARRAY
66395: PUSH
66396: LD_INT 3
66398: ARRAY
66399: PPUSH
66400: CALL_OW 284
66404: PUSH
66405: LD_INT 0
66407: EQUAL
66408: AND
66409: IFFALSE 66464
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
66411: LD_ADDR_VAR 0 5
66415: PUSH
66416: LD_EXP 68
66420: PUSH
66421: LD_VAR 0 2
66425: ARRAY
66426: PPUSH
66427: LD_VAR 0 3
66431: PPUSH
66432: CALL_OW 3
66436: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
66437: LD_ADDR_EXP 68
66441: PUSH
66442: LD_EXP 68
66446: PPUSH
66447: LD_VAR 0 2
66451: PPUSH
66452: LD_VAR 0 5
66456: PPUSH
66457: CALL_OW 1
66461: ST_TO_ADDR
// continue ;
66462: GO 66308
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
66464: LD_EXP 52
66468: PUSH
66469: LD_VAR 0 2
66473: ARRAY
66474: PUSH
66475: LD_INT 1
66477: ARRAY
66478: PPUSH
66479: CALL_OW 255
66483: PPUSH
66484: LD_EXP 68
66488: PUSH
66489: LD_VAR 0 2
66493: ARRAY
66494: PUSH
66495: LD_VAR 0 3
66499: ARRAY
66500: PUSH
66501: LD_INT 2
66503: ARRAY
66504: PPUSH
66505: LD_EXP 68
66509: PUSH
66510: LD_VAR 0 2
66514: ARRAY
66515: PUSH
66516: LD_VAR 0 3
66520: ARRAY
66521: PUSH
66522: LD_INT 3
66524: ARRAY
66525: PPUSH
66526: LD_INT 30
66528: PPUSH
66529: CALL 18309 0 4
66533: PUSH
66534: LD_INT 4
66536: ARRAY
66537: PUSH
66538: LD_INT 0
66540: EQUAL
66541: IFFALSE 66567
// begin target := mc_crates [ i ] [ j ] ;
66543: LD_ADDR_VAR 0 6
66547: PUSH
66548: LD_EXP 68
66552: PUSH
66553: LD_VAR 0 2
66557: ARRAY
66558: PUSH
66559: LD_VAR 0 3
66563: ARRAY
66564: ST_TO_ADDR
// break ;
66565: GO 66569
// end ; end ;
66567: GO 66308
66569: POP
66570: POP
// if not target then
66571: LD_VAR 0 6
66575: NOT
66576: IFFALSE 66580
// continue ;
66578: GO 66189
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
66580: LD_ADDR_VAR 0 7
66584: PUSH
66585: LD_EXP 71
66589: PUSH
66590: LD_VAR 0 2
66594: ARRAY
66595: PPUSH
66596: LD_INT 2
66598: PUSH
66599: LD_INT 3
66601: PUSH
66602: LD_INT 58
66604: PUSH
66605: EMPTY
66606: LIST
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 61
66614: PUSH
66615: EMPTY
66616: LIST
66617: PUSH
66618: LD_INT 33
66620: PUSH
66621: LD_INT 5
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 33
66630: PUSH
66631: LD_INT 3
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: PUSH
66645: LD_INT 2
66647: PUSH
66648: LD_INT 34
66650: PUSH
66651: LD_INT 32
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 34
66660: PUSH
66661: LD_INT 51
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 34
66670: PUSH
66671: LD_INT 12
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PPUSH
66688: CALL_OW 72
66692: ST_TO_ADDR
// if not cargo then
66693: LD_VAR 0 7
66697: NOT
66698: IFFALSE 67341
// begin if mc_crates_collector [ i ] < 5 then
66700: LD_EXP 69
66704: PUSH
66705: LD_VAR 0 2
66709: ARRAY
66710: PUSH
66711: LD_INT 5
66713: LESS
66714: IFFALSE 67080
// begin if mc_ape [ i ] then
66716: LD_EXP 81
66720: PUSH
66721: LD_VAR 0 2
66725: ARRAY
66726: IFFALSE 66773
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
66728: LD_ADDR_VAR 0 5
66732: PUSH
66733: LD_EXP 81
66737: PUSH
66738: LD_VAR 0 2
66742: ARRAY
66743: PPUSH
66744: LD_INT 25
66746: PUSH
66747: LD_INT 16
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 24
66756: PUSH
66757: LD_INT 750
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PPUSH
66768: CALL_OW 72
66772: ST_TO_ADDR
// if not tmp then
66773: LD_VAR 0 5
66777: NOT
66778: IFFALSE 66825
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
66780: LD_ADDR_VAR 0 5
66784: PUSH
66785: LD_EXP 52
66789: PUSH
66790: LD_VAR 0 2
66794: ARRAY
66795: PPUSH
66796: LD_INT 25
66798: PUSH
66799: LD_INT 2
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 24
66808: PUSH
66809: LD_INT 750
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PPUSH
66820: CALL_OW 72
66824: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
66825: LD_EXP 81
66829: PUSH
66830: LD_VAR 0 2
66834: ARRAY
66835: PUSH
66836: LD_EXP 52
66840: PUSH
66841: LD_VAR 0 2
66845: ARRAY
66846: PPUSH
66847: LD_INT 25
66849: PUSH
66850: LD_INT 2
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 24
66859: PUSH
66860: LD_INT 750
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: PPUSH
66871: CALL_OW 72
66875: AND
66876: PUSH
66877: LD_VAR 0 5
66881: PUSH
66882: LD_INT 5
66884: LESS
66885: AND
66886: IFFALSE 66968
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
66888: LD_ADDR_VAR 0 3
66892: PUSH
66893: LD_EXP 52
66897: PUSH
66898: LD_VAR 0 2
66902: ARRAY
66903: PPUSH
66904: LD_INT 25
66906: PUSH
66907: LD_INT 2
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: PUSH
66914: LD_INT 24
66916: PUSH
66917: LD_INT 750
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PPUSH
66928: CALL_OW 72
66932: PUSH
66933: FOR_IN
66934: IFFALSE 66966
// begin tmp := tmp union j ;
66936: LD_ADDR_VAR 0 5
66940: PUSH
66941: LD_VAR 0 5
66945: PUSH
66946: LD_VAR 0 3
66950: UNION
66951: ST_TO_ADDR
// if tmp >= 5 then
66952: LD_VAR 0 5
66956: PUSH
66957: LD_INT 5
66959: GREATEREQUAL
66960: IFFALSE 66964
// break ;
66962: GO 66966
// end ;
66964: GO 66933
66966: POP
66967: POP
// end ; if not tmp then
66968: LD_VAR 0 5
66972: NOT
66973: IFFALSE 66977
// continue ;
66975: GO 66189
// for j in tmp do
66977: LD_ADDR_VAR 0 3
66981: PUSH
66982: LD_VAR 0 5
66986: PUSH
66987: FOR_IN
66988: IFFALSE 67078
// if not GetTag ( j ) then
66990: LD_VAR 0 3
66994: PPUSH
66995: CALL_OW 110
66999: NOT
67000: IFFALSE 67076
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
67002: LD_ADDR_EXP 69
67006: PUSH
67007: LD_EXP 69
67011: PPUSH
67012: LD_VAR 0 2
67016: PUSH
67017: LD_EXP 69
67021: PUSH
67022: LD_VAR 0 2
67026: ARRAY
67027: PUSH
67028: LD_INT 1
67030: PLUS
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PPUSH
67036: LD_VAR 0 3
67040: PPUSH
67041: CALL 17413 0 3
67045: ST_TO_ADDR
// SetTag ( j , 107 ) ;
67046: LD_VAR 0 3
67050: PPUSH
67051: LD_INT 107
67053: PPUSH
67054: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
67058: LD_EXP 69
67062: PUSH
67063: LD_VAR 0 2
67067: ARRAY
67068: PUSH
67069: LD_INT 5
67071: GREATEREQUAL
67072: IFFALSE 67076
// break ;
67074: GO 67078
// end ;
67076: GO 66987
67078: POP
67079: POP
// end ; if mc_crates_collector [ i ] and target then
67080: LD_EXP 69
67084: PUSH
67085: LD_VAR 0 2
67089: ARRAY
67090: PUSH
67091: LD_VAR 0 6
67095: AND
67096: IFFALSE 67339
// begin if mc_crates_collector [ i ] < target [ 1 ] then
67098: LD_EXP 69
67102: PUSH
67103: LD_VAR 0 2
67107: ARRAY
67108: PUSH
67109: LD_VAR 0 6
67113: PUSH
67114: LD_INT 1
67116: ARRAY
67117: LESS
67118: IFFALSE 67138
// tmp := mc_crates_collector [ i ] else
67120: LD_ADDR_VAR 0 5
67124: PUSH
67125: LD_EXP 69
67129: PUSH
67130: LD_VAR 0 2
67134: ARRAY
67135: ST_TO_ADDR
67136: GO 67152
// tmp := target [ 1 ] ;
67138: LD_ADDR_VAR 0 5
67142: PUSH
67143: LD_VAR 0 6
67147: PUSH
67148: LD_INT 1
67150: ARRAY
67151: ST_TO_ADDR
// k := 0 ;
67152: LD_ADDR_VAR 0 4
67156: PUSH
67157: LD_INT 0
67159: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
67160: LD_ADDR_VAR 0 3
67164: PUSH
67165: LD_EXP 69
67169: PUSH
67170: LD_VAR 0 2
67174: ARRAY
67175: PUSH
67176: FOR_IN
67177: IFFALSE 67337
// begin k := k + 1 ;
67179: LD_ADDR_VAR 0 4
67183: PUSH
67184: LD_VAR 0 4
67188: PUSH
67189: LD_INT 1
67191: PLUS
67192: ST_TO_ADDR
// if k > tmp then
67193: LD_VAR 0 4
67197: PUSH
67198: LD_VAR 0 5
67202: GREATER
67203: IFFALSE 67207
// break ;
67205: GO 67337
// if not GetClass ( j ) in [ 2 , 16 ] then
67207: LD_VAR 0 3
67211: PPUSH
67212: CALL_OW 257
67216: PUSH
67217: LD_INT 2
67219: PUSH
67220: LD_INT 16
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: IN
67227: NOT
67228: IFFALSE 67281
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
67230: LD_ADDR_EXP 69
67234: PUSH
67235: LD_EXP 69
67239: PPUSH
67240: LD_VAR 0 2
67244: PPUSH
67245: LD_EXP 69
67249: PUSH
67250: LD_VAR 0 2
67254: ARRAY
67255: PUSH
67256: LD_VAR 0 3
67260: DIFF
67261: PPUSH
67262: CALL_OW 1
67266: ST_TO_ADDR
// SetTag ( j , 0 ) ;
67267: LD_VAR 0 3
67271: PPUSH
67272: LD_INT 0
67274: PPUSH
67275: CALL_OW 109
// continue ;
67279: GO 67176
// end ; if IsInUnit ( j ) then
67281: LD_VAR 0 3
67285: PPUSH
67286: CALL_OW 310
67290: IFFALSE 67301
// ComExitBuilding ( j ) ;
67292: LD_VAR 0 3
67296: PPUSH
67297: CALL_OW 122
// wait ( 3 ) ;
67301: LD_INT 3
67303: PPUSH
67304: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
67308: LD_VAR 0 3
67312: PPUSH
67313: LD_VAR 0 6
67317: PUSH
67318: LD_INT 2
67320: ARRAY
67321: PPUSH
67322: LD_VAR 0 6
67326: PUSH
67327: LD_INT 3
67329: ARRAY
67330: PPUSH
67331: CALL_OW 117
// end ;
67335: GO 67176
67337: POP
67338: POP
// end ; end else
67339: GO 67901
// begin for j in cargo do
67341: LD_ADDR_VAR 0 3
67345: PUSH
67346: LD_VAR 0 7
67350: PUSH
67351: FOR_IN
67352: IFFALSE 67899
// begin if GetTag ( j ) <> 0 then
67354: LD_VAR 0 3
67358: PPUSH
67359: CALL_OW 110
67363: PUSH
67364: LD_INT 0
67366: NONEQUAL
67367: IFFALSE 67371
// continue ;
67369: GO 67351
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
67371: LD_VAR 0 3
67375: PPUSH
67376: CALL_OW 256
67380: PUSH
67381: LD_INT 1000
67383: LESS
67384: PUSH
67385: LD_VAR 0 3
67389: PPUSH
67390: LD_EXP 76
67394: PUSH
67395: LD_VAR 0 2
67399: ARRAY
67400: PPUSH
67401: CALL_OW 308
67405: NOT
67406: AND
67407: IFFALSE 67429
// ComMoveToArea ( j , mc_parking [ i ] ) ;
67409: LD_VAR 0 3
67413: PPUSH
67414: LD_EXP 76
67418: PUSH
67419: LD_VAR 0 2
67423: ARRAY
67424: PPUSH
67425: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
67429: LD_VAR 0 3
67433: PPUSH
67434: CALL_OW 256
67438: PUSH
67439: LD_INT 1000
67441: LESS
67442: PUSH
67443: LD_VAR 0 3
67447: PPUSH
67448: LD_EXP 76
67452: PUSH
67453: LD_VAR 0 2
67457: ARRAY
67458: PPUSH
67459: CALL_OW 308
67463: AND
67464: IFFALSE 67468
// continue ;
67466: GO 67351
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
67468: LD_VAR 0 3
67472: PPUSH
67473: CALL_OW 262
67477: PUSH
67478: LD_INT 2
67480: EQUAL
67481: PUSH
67482: LD_VAR 0 3
67486: PPUSH
67487: CALL_OW 261
67491: PUSH
67492: LD_INT 15
67494: LESS
67495: AND
67496: IFFALSE 67500
// continue ;
67498: GO 67351
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
67500: LD_VAR 0 3
67504: PPUSH
67505: CALL_OW 262
67509: PUSH
67510: LD_INT 1
67512: EQUAL
67513: PUSH
67514: LD_VAR 0 3
67518: PPUSH
67519: CALL_OW 261
67523: PUSH
67524: LD_INT 10
67526: LESS
67527: AND
67528: IFFALSE 67838
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
67530: LD_ADDR_VAR 0 8
67534: PUSH
67535: LD_EXP 52
67539: PUSH
67540: LD_VAR 0 2
67544: ARRAY
67545: PPUSH
67546: LD_INT 2
67548: PUSH
67549: LD_INT 30
67551: PUSH
67552: LD_INT 0
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: LD_INT 30
67561: PUSH
67562: LD_INT 1
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: LIST
67573: PPUSH
67574: CALL_OW 72
67578: ST_TO_ADDR
// if not depot then
67579: LD_VAR 0 8
67583: NOT
67584: IFFALSE 67588
// continue ;
67586: GO 67351
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
67588: LD_VAR 0 3
67592: PPUSH
67593: LD_VAR 0 8
67597: PPUSH
67598: LD_VAR 0 3
67602: PPUSH
67603: CALL_OW 74
67607: PPUSH
67608: CALL_OW 296
67612: PUSH
67613: LD_INT 6
67615: LESS
67616: IFFALSE 67632
// SetFuel ( j , 100 ) else
67618: LD_VAR 0 3
67622: PPUSH
67623: LD_INT 100
67625: PPUSH
67626: CALL_OW 240
67630: GO 67838
// if GetFuel ( j ) = 0 then
67632: LD_VAR 0 3
67636: PPUSH
67637: CALL_OW 261
67641: PUSH
67642: LD_INT 0
67644: EQUAL
67645: IFFALSE 67838
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
67647: LD_ADDR_EXP 71
67651: PUSH
67652: LD_EXP 71
67656: PPUSH
67657: LD_VAR 0 2
67661: PPUSH
67662: LD_EXP 71
67666: PUSH
67667: LD_VAR 0 2
67671: ARRAY
67672: PUSH
67673: LD_VAR 0 3
67677: DIFF
67678: PPUSH
67679: CALL_OW 1
67683: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
67684: LD_VAR 0 3
67688: PPUSH
67689: CALL_OW 263
67693: PUSH
67694: LD_INT 1
67696: EQUAL
67697: IFFALSE 67713
// ComExitVehicle ( IsInUnit ( j ) ) ;
67699: LD_VAR 0 3
67703: PPUSH
67704: CALL_OW 310
67708: PPUSH
67709: CALL_OW 121
// if GetControl ( j ) = control_remote then
67713: LD_VAR 0 3
67717: PPUSH
67718: CALL_OW 263
67722: PUSH
67723: LD_INT 2
67725: EQUAL
67726: IFFALSE 67737
// ComUnlink ( j ) ;
67728: LD_VAR 0 3
67732: PPUSH
67733: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
67737: LD_ADDR_VAR 0 9
67741: PUSH
67742: LD_VAR 0 2
67746: PPUSH
67747: LD_INT 3
67749: PPUSH
67750: CALL 76884 0 2
67754: ST_TO_ADDR
// if fac then
67755: LD_VAR 0 9
67759: IFFALSE 67836
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
67761: LD_ADDR_VAR 0 10
67765: PUSH
67766: LD_VAR 0 9
67770: PPUSH
67771: LD_VAR 0 3
67775: PPUSH
67776: CALL_OW 265
67780: PPUSH
67781: LD_VAR 0 3
67785: PPUSH
67786: CALL_OW 262
67790: PPUSH
67791: LD_VAR 0 3
67795: PPUSH
67796: CALL_OW 263
67800: PPUSH
67801: LD_VAR 0 3
67805: PPUSH
67806: CALL_OW 264
67810: PPUSH
67811: CALL 15006 0 5
67815: ST_TO_ADDR
// if components then
67816: LD_VAR 0 10
67820: IFFALSE 67836
// MC_InsertProduceList ( i , components ) ;
67822: LD_VAR 0 2
67826: PPUSH
67827: LD_VAR 0 10
67831: PPUSH
67832: CALL 76512 0 2
// end ; continue ;
67836: GO 67351
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
67838: LD_VAR 0 3
67842: PPUSH
67843: LD_INT 1
67845: PPUSH
67846: CALL_OW 289
67850: PUSH
67851: LD_INT 100
67853: LESS
67854: PUSH
67855: LD_VAR 0 3
67859: PPUSH
67860: CALL_OW 314
67864: NOT
67865: AND
67866: IFFALSE 67895
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
67868: LD_VAR 0 3
67872: PPUSH
67873: LD_VAR 0 6
67877: PUSH
67878: LD_INT 2
67880: ARRAY
67881: PPUSH
67882: LD_VAR 0 6
67886: PUSH
67887: LD_INT 3
67889: ARRAY
67890: PPUSH
67891: CALL_OW 117
// break ;
67895: GO 67899
// end ;
67897: GO 67351
67899: POP
67900: POP
// end ; end ;
67901: GO 66189
67903: POP
67904: POP
// end ;
67905: LD_VAR 0 1
67909: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
67910: LD_INT 0
67912: PPUSH
67913: PPUSH
67914: PPUSH
67915: PPUSH
// if not mc_bases then
67916: LD_EXP 52
67920: NOT
67921: IFFALSE 67925
// exit ;
67923: GO 68086
// for i = 1 to mc_bases do
67925: LD_ADDR_VAR 0 2
67929: PUSH
67930: DOUBLE
67931: LD_INT 1
67933: DEC
67934: ST_TO_ADDR
67935: LD_EXP 52
67939: PUSH
67940: FOR_TO
67941: IFFALSE 68084
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
67943: LD_ADDR_VAR 0 4
67947: PUSH
67948: LD_EXP 71
67952: PUSH
67953: LD_VAR 0 2
67957: ARRAY
67958: PUSH
67959: LD_EXP 74
67963: PUSH
67964: LD_VAR 0 2
67968: ARRAY
67969: UNION
67970: PPUSH
67971: LD_INT 33
67973: PUSH
67974: LD_INT 2
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PPUSH
67981: CALL_OW 72
67985: ST_TO_ADDR
// if tmp then
67986: LD_VAR 0 4
67990: IFFALSE 68082
// for j in tmp do
67992: LD_ADDR_VAR 0 3
67996: PUSH
67997: LD_VAR 0 4
68001: PUSH
68002: FOR_IN
68003: IFFALSE 68080
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
68005: LD_VAR 0 3
68009: PPUSH
68010: CALL_OW 312
68014: NOT
68015: PUSH
68016: LD_VAR 0 3
68020: PPUSH
68021: CALL_OW 256
68025: PUSH
68026: LD_INT 250
68028: GREATEREQUAL
68029: AND
68030: IFFALSE 68043
// Connect ( j ) else
68032: LD_VAR 0 3
68036: PPUSH
68037: CALL 20346 0 1
68041: GO 68078
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
68043: LD_VAR 0 3
68047: PPUSH
68048: CALL_OW 256
68052: PUSH
68053: LD_INT 250
68055: LESS
68056: PUSH
68057: LD_VAR 0 3
68061: PPUSH
68062: CALL_OW 312
68066: AND
68067: IFFALSE 68078
// ComUnlink ( j ) ;
68069: LD_VAR 0 3
68073: PPUSH
68074: CALL_OW 136
68078: GO 68002
68080: POP
68081: POP
// end ;
68082: GO 67940
68084: POP
68085: POP
// end ;
68086: LD_VAR 0 1
68090: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
68091: LD_INT 0
68093: PPUSH
68094: PPUSH
68095: PPUSH
68096: PPUSH
68097: PPUSH
// if not mc_bases then
68098: LD_EXP 52
68102: NOT
68103: IFFALSE 68107
// exit ;
68105: GO 68567
// for i = 1 to mc_bases do
68107: LD_ADDR_VAR 0 2
68111: PUSH
68112: DOUBLE
68113: LD_INT 1
68115: DEC
68116: ST_TO_ADDR
68117: LD_EXP 52
68121: PUSH
68122: FOR_TO
68123: IFFALSE 68565
// begin if not mc_produce [ i ] then
68125: LD_EXP 73
68129: PUSH
68130: LD_VAR 0 2
68134: ARRAY
68135: NOT
68136: IFFALSE 68140
// continue ;
68138: GO 68122
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
68140: LD_ADDR_VAR 0 5
68144: PUSH
68145: LD_EXP 52
68149: PUSH
68150: LD_VAR 0 2
68154: ARRAY
68155: PPUSH
68156: LD_INT 30
68158: PUSH
68159: LD_INT 3
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PPUSH
68166: CALL_OW 72
68170: ST_TO_ADDR
// if not fac then
68171: LD_VAR 0 5
68175: NOT
68176: IFFALSE 68180
// continue ;
68178: GO 68122
// for j in fac do
68180: LD_ADDR_VAR 0 3
68184: PUSH
68185: LD_VAR 0 5
68189: PUSH
68190: FOR_IN
68191: IFFALSE 68561
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
68193: LD_VAR 0 3
68197: PPUSH
68198: CALL_OW 461
68202: PUSH
68203: LD_INT 2
68205: NONEQUAL
68206: PUSH
68207: LD_VAR 0 3
68211: PPUSH
68212: LD_INT 15
68214: PPUSH
68215: CALL 20006 0 2
68219: PUSH
68220: LD_INT 4
68222: ARRAY
68223: OR
68224: PUSH
68225: LD_VAR 0 3
68229: PPUSH
68230: CALL_OW 313
68234: PUSH
68235: LD_INT 0
68237: EQUAL
68238: OR
68239: IFFALSE 68243
// continue ;
68241: GO 68190
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
68243: LD_VAR 0 3
68247: PPUSH
68248: LD_EXP 73
68252: PUSH
68253: LD_VAR 0 2
68257: ARRAY
68258: PUSH
68259: LD_INT 1
68261: ARRAY
68262: PUSH
68263: LD_INT 1
68265: ARRAY
68266: PPUSH
68267: LD_EXP 73
68271: PUSH
68272: LD_VAR 0 2
68276: ARRAY
68277: PUSH
68278: LD_INT 1
68280: ARRAY
68281: PUSH
68282: LD_INT 2
68284: ARRAY
68285: PPUSH
68286: LD_EXP 73
68290: PUSH
68291: LD_VAR 0 2
68295: ARRAY
68296: PUSH
68297: LD_INT 1
68299: ARRAY
68300: PUSH
68301: LD_INT 3
68303: ARRAY
68304: PPUSH
68305: LD_EXP 73
68309: PUSH
68310: LD_VAR 0 2
68314: ARRAY
68315: PUSH
68316: LD_INT 1
68318: ARRAY
68319: PUSH
68320: LD_INT 4
68322: ARRAY
68323: PPUSH
68324: CALL_OW 448
68328: PUSH
68329: LD_VAR 0 3
68333: PPUSH
68334: LD_EXP 73
68338: PUSH
68339: LD_VAR 0 2
68343: ARRAY
68344: PUSH
68345: LD_INT 1
68347: ARRAY
68348: PUSH
68349: LD_INT 1
68351: ARRAY
68352: PUSH
68353: LD_EXP 73
68357: PUSH
68358: LD_VAR 0 2
68362: ARRAY
68363: PUSH
68364: LD_INT 1
68366: ARRAY
68367: PUSH
68368: LD_INT 2
68370: ARRAY
68371: PUSH
68372: LD_EXP 73
68376: PUSH
68377: LD_VAR 0 2
68381: ARRAY
68382: PUSH
68383: LD_INT 1
68385: ARRAY
68386: PUSH
68387: LD_INT 3
68389: ARRAY
68390: PUSH
68391: LD_EXP 73
68395: PUSH
68396: LD_VAR 0 2
68400: ARRAY
68401: PUSH
68402: LD_INT 1
68404: ARRAY
68405: PUSH
68406: LD_INT 4
68408: ARRAY
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: PPUSH
68416: CALL 23677 0 2
68420: AND
68421: IFFALSE 68559
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
68423: LD_VAR 0 3
68427: PPUSH
68428: LD_EXP 73
68432: PUSH
68433: LD_VAR 0 2
68437: ARRAY
68438: PUSH
68439: LD_INT 1
68441: ARRAY
68442: PUSH
68443: LD_INT 1
68445: ARRAY
68446: PPUSH
68447: LD_EXP 73
68451: PUSH
68452: LD_VAR 0 2
68456: ARRAY
68457: PUSH
68458: LD_INT 1
68460: ARRAY
68461: PUSH
68462: LD_INT 2
68464: ARRAY
68465: PPUSH
68466: LD_EXP 73
68470: PUSH
68471: LD_VAR 0 2
68475: ARRAY
68476: PUSH
68477: LD_INT 1
68479: ARRAY
68480: PUSH
68481: LD_INT 3
68483: ARRAY
68484: PPUSH
68485: LD_EXP 73
68489: PUSH
68490: LD_VAR 0 2
68494: ARRAY
68495: PUSH
68496: LD_INT 1
68498: ARRAY
68499: PUSH
68500: LD_INT 4
68502: ARRAY
68503: PPUSH
68504: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
68508: LD_ADDR_VAR 0 4
68512: PUSH
68513: LD_EXP 73
68517: PUSH
68518: LD_VAR 0 2
68522: ARRAY
68523: PPUSH
68524: LD_INT 1
68526: PPUSH
68527: CALL_OW 3
68531: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
68532: LD_ADDR_EXP 73
68536: PUSH
68537: LD_EXP 73
68541: PPUSH
68542: LD_VAR 0 2
68546: PPUSH
68547: LD_VAR 0 4
68551: PPUSH
68552: CALL_OW 1
68556: ST_TO_ADDR
// break ;
68557: GO 68561
// end ; end ;
68559: GO 68190
68561: POP
68562: POP
// end ;
68563: GO 68122
68565: POP
68566: POP
// end ;
68567: LD_VAR 0 1
68571: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
68572: LD_INT 0
68574: PPUSH
68575: PPUSH
68576: PPUSH
// if not mc_bases then
68577: LD_EXP 52
68581: NOT
68582: IFFALSE 68586
// exit ;
68584: GO 68675
// for i = 1 to mc_bases do
68586: LD_ADDR_VAR 0 2
68590: PUSH
68591: DOUBLE
68592: LD_INT 1
68594: DEC
68595: ST_TO_ADDR
68596: LD_EXP 52
68600: PUSH
68601: FOR_TO
68602: IFFALSE 68673
// begin if mc_attack [ i ] then
68604: LD_EXP 72
68608: PUSH
68609: LD_VAR 0 2
68613: ARRAY
68614: IFFALSE 68671
// begin tmp := mc_attack [ i ] [ 1 ] ;
68616: LD_ADDR_VAR 0 3
68620: PUSH
68621: LD_EXP 72
68625: PUSH
68626: LD_VAR 0 2
68630: ARRAY
68631: PUSH
68632: LD_INT 1
68634: ARRAY
68635: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
68636: LD_ADDR_EXP 72
68640: PUSH
68641: LD_EXP 72
68645: PPUSH
68646: LD_VAR 0 2
68650: PPUSH
68651: EMPTY
68652: PPUSH
68653: CALL_OW 1
68657: ST_TO_ADDR
// Attack ( tmp ) ;
68658: LD_VAR 0 3
68662: PPUSH
68663: CALL 45884 0 1
// exit ;
68667: POP
68668: POP
68669: GO 68675
// end ; end ;
68671: GO 68601
68673: POP
68674: POP
// end ;
68675: LD_VAR 0 1
68679: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
68680: LD_INT 0
68682: PPUSH
68683: PPUSH
68684: PPUSH
68685: PPUSH
68686: PPUSH
68687: PPUSH
68688: PPUSH
// if not mc_bases then
68689: LD_EXP 52
68693: NOT
68694: IFFALSE 68698
// exit ;
68696: GO 69280
// for i = 1 to mc_bases do
68698: LD_ADDR_VAR 0 2
68702: PUSH
68703: DOUBLE
68704: LD_INT 1
68706: DEC
68707: ST_TO_ADDR
68708: LD_EXP 52
68712: PUSH
68713: FOR_TO
68714: IFFALSE 69278
// begin if not mc_bases [ i ] then
68716: LD_EXP 52
68720: PUSH
68721: LD_VAR 0 2
68725: ARRAY
68726: NOT
68727: IFFALSE 68731
// continue ;
68729: GO 68713
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
68731: LD_ADDR_VAR 0 7
68735: PUSH
68736: LD_EXP 52
68740: PUSH
68741: LD_VAR 0 2
68745: ARRAY
68746: PUSH
68747: LD_INT 1
68749: ARRAY
68750: PPUSH
68751: CALL 14310 0 1
68755: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
68756: LD_ADDR_EXP 75
68760: PUSH
68761: LD_EXP 75
68765: PPUSH
68766: LD_VAR 0 2
68770: PPUSH
68771: LD_EXP 52
68775: PUSH
68776: LD_VAR 0 2
68780: ARRAY
68781: PUSH
68782: LD_INT 1
68784: ARRAY
68785: PPUSH
68786: CALL_OW 255
68790: PPUSH
68791: LD_EXP 77
68795: PUSH
68796: LD_VAR 0 2
68800: ARRAY
68801: PPUSH
68802: CALL 12307 0 2
68806: PPUSH
68807: CALL_OW 1
68811: ST_TO_ADDR
// if not mc_scan [ i ] then
68812: LD_EXP 75
68816: PUSH
68817: LD_VAR 0 2
68821: ARRAY
68822: NOT
68823: IFFALSE 68978
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
68825: LD_ADDR_VAR 0 4
68829: PUSH
68830: LD_EXP 52
68834: PUSH
68835: LD_VAR 0 2
68839: ARRAY
68840: PPUSH
68841: LD_INT 2
68843: PUSH
68844: LD_INT 25
68846: PUSH
68847: LD_INT 5
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 25
68856: PUSH
68857: LD_INT 8
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: LD_INT 25
68866: PUSH
68867: LD_INT 9
68869: PUSH
68870: EMPTY
68871: LIST
68872: LIST
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: LIST
68878: LIST
68879: PPUSH
68880: CALL_OW 72
68884: ST_TO_ADDR
// if not tmp then
68885: LD_VAR 0 4
68889: NOT
68890: IFFALSE 68894
// continue ;
68892: GO 68713
// for j in tmp do
68894: LD_ADDR_VAR 0 3
68898: PUSH
68899: LD_VAR 0 4
68903: PUSH
68904: FOR_IN
68905: IFFALSE 68976
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
68907: LD_VAR 0 3
68911: PPUSH
68912: CALL_OW 310
68916: PPUSH
68917: CALL_OW 266
68921: PUSH
68922: LD_INT 5
68924: EQUAL
68925: PUSH
68926: LD_VAR 0 3
68930: PPUSH
68931: CALL_OW 257
68935: PUSH
68936: LD_INT 1
68938: EQUAL
68939: AND
68940: PUSH
68941: LD_VAR 0 3
68945: PPUSH
68946: CALL_OW 459
68950: NOT
68951: AND
68952: PUSH
68953: LD_VAR 0 7
68957: AND
68958: IFFALSE 68974
// ComChangeProfession ( j , class ) ;
68960: LD_VAR 0 3
68964: PPUSH
68965: LD_VAR 0 7
68969: PPUSH
68970: CALL_OW 123
68974: GO 68904
68976: POP
68977: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
68978: LD_EXP 75
68982: PUSH
68983: LD_VAR 0 2
68987: ARRAY
68988: PUSH
68989: LD_EXP 74
68993: PUSH
68994: LD_VAR 0 2
68998: ARRAY
68999: NOT
69000: AND
69001: PUSH
69002: LD_EXP 52
69006: PUSH
69007: LD_VAR 0 2
69011: ARRAY
69012: PPUSH
69013: LD_INT 30
69015: PUSH
69016: LD_INT 32
69018: PUSH
69019: EMPTY
69020: LIST
69021: LIST
69022: PPUSH
69023: CALL_OW 72
69027: NOT
69028: AND
69029: PUSH
69030: LD_EXP 52
69034: PUSH
69035: LD_VAR 0 2
69039: ARRAY
69040: PPUSH
69041: LD_INT 2
69043: PUSH
69044: LD_INT 30
69046: PUSH
69047: LD_INT 4
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: LD_INT 30
69056: PUSH
69057: LD_INT 5
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: LIST
69068: PPUSH
69069: CALL_OW 72
69073: NOT
69074: AND
69075: IFFALSE 69207
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
69077: LD_ADDR_VAR 0 4
69081: PUSH
69082: LD_EXP 52
69086: PUSH
69087: LD_VAR 0 2
69091: ARRAY
69092: PPUSH
69093: LD_INT 2
69095: PUSH
69096: LD_INT 25
69098: PUSH
69099: LD_INT 1
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: LD_INT 25
69108: PUSH
69109: LD_INT 5
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: LD_INT 25
69118: PUSH
69119: LD_INT 8
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: LD_INT 25
69128: PUSH
69129: LD_INT 9
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: PPUSH
69143: CALL_OW 72
69147: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
69148: LD_ADDR_VAR 0 4
69152: PUSH
69153: LD_VAR 0 4
69157: PUSH
69158: LD_VAR 0 4
69162: PPUSH
69163: LD_INT 18
69165: PPUSH
69166: CALL 50667 0 2
69170: DIFF
69171: ST_TO_ADDR
// if tmp then
69172: LD_VAR 0 4
69176: IFFALSE 69207
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
69178: LD_VAR 0 2
69182: PPUSH
69183: LD_VAR 0 4
69187: PPUSH
69188: LD_EXP 77
69192: PUSH
69193: LD_VAR 0 2
69197: ARRAY
69198: PPUSH
69199: CALL 12342 0 3
// exit ;
69203: POP
69204: POP
69205: GO 69280
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
69207: LD_EXP 75
69211: PUSH
69212: LD_VAR 0 2
69216: ARRAY
69217: PUSH
69218: LD_EXP 74
69222: PUSH
69223: LD_VAR 0 2
69227: ARRAY
69228: AND
69229: IFFALSE 69276
// begin tmp := mc_defender [ i ] ;
69231: LD_ADDR_VAR 0 4
69235: PUSH
69236: LD_EXP 74
69240: PUSH
69241: LD_VAR 0 2
69245: ARRAY
69246: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
69247: LD_VAR 0 2
69251: PPUSH
69252: LD_VAR 0 4
69256: PPUSH
69257: LD_EXP 75
69261: PUSH
69262: LD_VAR 0 2
69266: ARRAY
69267: PPUSH
69268: CALL 12840 0 3
// exit ;
69272: POP
69273: POP
69274: GO 69280
// end ; end ;
69276: GO 68713
69278: POP
69279: POP
// end ;
69280: LD_VAR 0 1
69284: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
69285: LD_INT 0
69287: PPUSH
69288: PPUSH
69289: PPUSH
69290: PPUSH
69291: PPUSH
69292: PPUSH
69293: PPUSH
69294: PPUSH
69295: PPUSH
69296: PPUSH
69297: PPUSH
// if not mc_bases then
69298: LD_EXP 52
69302: NOT
69303: IFFALSE 69307
// exit ;
69305: GO 70394
// for i = 1 to mc_bases do
69307: LD_ADDR_VAR 0 2
69311: PUSH
69312: DOUBLE
69313: LD_INT 1
69315: DEC
69316: ST_TO_ADDR
69317: LD_EXP 52
69321: PUSH
69322: FOR_TO
69323: IFFALSE 70392
// begin tmp := mc_lab [ i ] ;
69325: LD_ADDR_VAR 0 6
69329: PUSH
69330: LD_EXP 85
69334: PUSH
69335: LD_VAR 0 2
69339: ARRAY
69340: ST_TO_ADDR
// if not tmp then
69341: LD_VAR 0 6
69345: NOT
69346: IFFALSE 69350
// continue ;
69348: GO 69322
// idle_lab := 0 ;
69350: LD_ADDR_VAR 0 11
69354: PUSH
69355: LD_INT 0
69357: ST_TO_ADDR
// for j in tmp do
69358: LD_ADDR_VAR 0 3
69362: PUSH
69363: LD_VAR 0 6
69367: PUSH
69368: FOR_IN
69369: IFFALSE 70388
// begin researching := false ;
69371: LD_ADDR_VAR 0 10
69375: PUSH
69376: LD_INT 0
69378: ST_TO_ADDR
// side := GetSide ( j ) ;
69379: LD_ADDR_VAR 0 4
69383: PUSH
69384: LD_VAR 0 3
69388: PPUSH
69389: CALL_OW 255
69393: ST_TO_ADDR
// if not mc_tech [ side ] then
69394: LD_EXP 79
69398: PUSH
69399: LD_VAR 0 4
69403: ARRAY
69404: NOT
69405: IFFALSE 69409
// continue ;
69407: GO 69368
// if BuildingStatus ( j ) = bs_idle then
69409: LD_VAR 0 3
69413: PPUSH
69414: CALL_OW 461
69418: PUSH
69419: LD_INT 2
69421: EQUAL
69422: IFFALSE 69610
// begin if idle_lab and UnitsInside ( j ) < 6 then
69424: LD_VAR 0 11
69428: PUSH
69429: LD_VAR 0 3
69433: PPUSH
69434: CALL_OW 313
69438: PUSH
69439: LD_INT 6
69441: LESS
69442: AND
69443: IFFALSE 69514
// begin tmp2 := UnitsInside ( idle_lab ) ;
69445: LD_ADDR_VAR 0 9
69449: PUSH
69450: LD_VAR 0 11
69454: PPUSH
69455: CALL_OW 313
69459: ST_TO_ADDR
// if tmp2 then
69460: LD_VAR 0 9
69464: IFFALSE 69506
// for x in tmp2 do
69466: LD_ADDR_VAR 0 7
69470: PUSH
69471: LD_VAR 0 9
69475: PUSH
69476: FOR_IN
69477: IFFALSE 69504
// begin ComExitBuilding ( x ) ;
69479: LD_VAR 0 7
69483: PPUSH
69484: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
69488: LD_VAR 0 7
69492: PPUSH
69493: LD_VAR 0 3
69497: PPUSH
69498: CALL_OW 180
// end ;
69502: GO 69476
69504: POP
69505: POP
// idle_lab := 0 ;
69506: LD_ADDR_VAR 0 11
69510: PUSH
69511: LD_INT 0
69513: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
69514: LD_ADDR_VAR 0 5
69518: PUSH
69519: LD_EXP 79
69523: PUSH
69524: LD_VAR 0 4
69528: ARRAY
69529: PUSH
69530: FOR_IN
69531: IFFALSE 69591
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
69533: LD_VAR 0 3
69537: PPUSH
69538: LD_VAR 0 5
69542: PPUSH
69543: CALL_OW 430
69547: PUSH
69548: LD_VAR 0 4
69552: PPUSH
69553: LD_VAR 0 5
69557: PPUSH
69558: CALL 11412 0 2
69562: AND
69563: IFFALSE 69589
// begin researching := true ;
69565: LD_ADDR_VAR 0 10
69569: PUSH
69570: LD_INT 1
69572: ST_TO_ADDR
// ComResearch ( j , t ) ;
69573: LD_VAR 0 3
69577: PPUSH
69578: LD_VAR 0 5
69582: PPUSH
69583: CALL_OW 124
// break ;
69587: GO 69591
// end ;
69589: GO 69530
69591: POP
69592: POP
// if not researching then
69593: LD_VAR 0 10
69597: NOT
69598: IFFALSE 69610
// idle_lab := j ;
69600: LD_ADDR_VAR 0 11
69604: PUSH
69605: LD_VAR 0 3
69609: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
69610: LD_VAR 0 3
69614: PPUSH
69615: CALL_OW 461
69619: PUSH
69620: LD_INT 10
69622: EQUAL
69623: IFFALSE 70211
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
69625: LD_EXP 81
69629: PUSH
69630: LD_VAR 0 2
69634: ARRAY
69635: NOT
69636: PUSH
69637: LD_EXP 82
69641: PUSH
69642: LD_VAR 0 2
69646: ARRAY
69647: NOT
69648: AND
69649: PUSH
69650: LD_EXP 79
69654: PUSH
69655: LD_VAR 0 4
69659: ARRAY
69660: PUSH
69661: LD_INT 1
69663: GREATER
69664: AND
69665: IFFALSE 69796
// begin ComCancel ( j ) ;
69667: LD_VAR 0 3
69671: PPUSH
69672: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
69676: LD_ADDR_EXP 79
69680: PUSH
69681: LD_EXP 79
69685: PPUSH
69686: LD_VAR 0 4
69690: PPUSH
69691: LD_EXP 79
69695: PUSH
69696: LD_VAR 0 4
69700: ARRAY
69701: PPUSH
69702: LD_EXP 79
69706: PUSH
69707: LD_VAR 0 4
69711: ARRAY
69712: PUSH
69713: LD_INT 1
69715: MINUS
69716: PPUSH
69717: LD_EXP 79
69721: PUSH
69722: LD_VAR 0 4
69726: ARRAY
69727: PPUSH
69728: LD_INT 0
69730: PPUSH
69731: CALL 16831 0 4
69735: PPUSH
69736: CALL_OW 1
69740: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
69741: LD_ADDR_EXP 79
69745: PUSH
69746: LD_EXP 79
69750: PPUSH
69751: LD_VAR 0 4
69755: PPUSH
69756: LD_EXP 79
69760: PUSH
69761: LD_VAR 0 4
69765: ARRAY
69766: PPUSH
69767: LD_EXP 79
69771: PUSH
69772: LD_VAR 0 4
69776: ARRAY
69777: PPUSH
69778: LD_INT 1
69780: PPUSH
69781: LD_INT 0
69783: PPUSH
69784: CALL 16831 0 4
69788: PPUSH
69789: CALL_OW 1
69793: ST_TO_ADDR
// continue ;
69794: GO 69368
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
69796: LD_EXP 81
69800: PUSH
69801: LD_VAR 0 2
69805: ARRAY
69806: PUSH
69807: LD_EXP 82
69811: PUSH
69812: LD_VAR 0 2
69816: ARRAY
69817: NOT
69818: AND
69819: IFFALSE 69946
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
69821: LD_ADDR_EXP 82
69825: PUSH
69826: LD_EXP 82
69830: PPUSH
69831: LD_VAR 0 2
69835: PUSH
69836: LD_EXP 82
69840: PUSH
69841: LD_VAR 0 2
69845: ARRAY
69846: PUSH
69847: LD_INT 1
69849: PLUS
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PPUSH
69855: LD_EXP 81
69859: PUSH
69860: LD_VAR 0 2
69864: ARRAY
69865: PUSH
69866: LD_INT 1
69868: ARRAY
69869: PPUSH
69870: CALL 17413 0 3
69874: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
69875: LD_EXP 81
69879: PUSH
69880: LD_VAR 0 2
69884: ARRAY
69885: PUSH
69886: LD_INT 1
69888: ARRAY
69889: PPUSH
69890: LD_INT 112
69892: PPUSH
69893: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
69897: LD_ADDR_VAR 0 9
69901: PUSH
69902: LD_EXP 81
69906: PUSH
69907: LD_VAR 0 2
69911: ARRAY
69912: PPUSH
69913: LD_INT 1
69915: PPUSH
69916: CALL_OW 3
69920: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
69921: LD_ADDR_EXP 81
69925: PUSH
69926: LD_EXP 81
69930: PPUSH
69931: LD_VAR 0 2
69935: PPUSH
69936: LD_VAR 0 9
69940: PPUSH
69941: CALL_OW 1
69945: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
69946: LD_EXP 81
69950: PUSH
69951: LD_VAR 0 2
69955: ARRAY
69956: PUSH
69957: LD_EXP 82
69961: PUSH
69962: LD_VAR 0 2
69966: ARRAY
69967: AND
69968: PUSH
69969: LD_EXP 82
69973: PUSH
69974: LD_VAR 0 2
69978: ARRAY
69979: PUSH
69980: LD_INT 1
69982: ARRAY
69983: PPUSH
69984: CALL_OW 310
69988: NOT
69989: AND
69990: PUSH
69991: LD_VAR 0 3
69995: PPUSH
69996: CALL_OW 313
70000: PUSH
70001: LD_INT 6
70003: EQUAL
70004: AND
70005: IFFALSE 70061
// begin tmp2 := UnitsInside ( j ) ;
70007: LD_ADDR_VAR 0 9
70011: PUSH
70012: LD_VAR 0 3
70016: PPUSH
70017: CALL_OW 313
70021: ST_TO_ADDR
// if tmp2 = 6 then
70022: LD_VAR 0 9
70026: PUSH
70027: LD_INT 6
70029: EQUAL
70030: IFFALSE 70061
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
70032: LD_VAR 0 9
70036: PUSH
70037: LD_INT 1
70039: ARRAY
70040: PPUSH
70041: LD_INT 112
70043: PPUSH
70044: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
70048: LD_VAR 0 9
70052: PUSH
70053: LD_INT 1
70055: ARRAY
70056: PPUSH
70057: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
70061: LD_EXP 82
70065: PUSH
70066: LD_VAR 0 2
70070: ARRAY
70071: PUSH
70072: LD_EXP 82
70076: PUSH
70077: LD_VAR 0 2
70081: ARRAY
70082: PUSH
70083: LD_INT 1
70085: ARRAY
70086: PPUSH
70087: CALL_OW 314
70091: NOT
70092: AND
70093: PUSH
70094: LD_EXP 82
70098: PUSH
70099: LD_VAR 0 2
70103: ARRAY
70104: PUSH
70105: LD_INT 1
70107: ARRAY
70108: PPUSH
70109: CALL_OW 310
70113: NOT
70114: AND
70115: IFFALSE 70141
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
70117: LD_EXP 82
70121: PUSH
70122: LD_VAR 0 2
70126: ARRAY
70127: PUSH
70128: LD_INT 1
70130: ARRAY
70131: PPUSH
70132: LD_VAR 0 3
70136: PPUSH
70137: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
70141: LD_EXP 82
70145: PUSH
70146: LD_VAR 0 2
70150: ARRAY
70151: PUSH
70152: LD_INT 1
70154: ARRAY
70155: PPUSH
70156: CALL_OW 310
70160: PUSH
70161: LD_EXP 82
70165: PUSH
70166: LD_VAR 0 2
70170: ARRAY
70171: PUSH
70172: LD_INT 1
70174: ARRAY
70175: PPUSH
70176: CALL_OW 310
70180: PPUSH
70181: CALL_OW 461
70185: PUSH
70186: LD_INT 3
70188: NONEQUAL
70189: AND
70190: IFFALSE 70211
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
70192: LD_EXP 82
70196: PUSH
70197: LD_VAR 0 2
70201: ARRAY
70202: PUSH
70203: LD_INT 1
70205: ARRAY
70206: PPUSH
70207: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
70211: LD_VAR 0 3
70215: PPUSH
70216: CALL_OW 461
70220: PUSH
70221: LD_INT 6
70223: EQUAL
70224: PUSH
70225: LD_VAR 0 6
70229: PUSH
70230: LD_INT 1
70232: GREATER
70233: AND
70234: IFFALSE 70386
// begin sci := [ ] ;
70236: LD_ADDR_VAR 0 8
70240: PUSH
70241: EMPTY
70242: ST_TO_ADDR
// for x in ( tmp diff j ) do
70243: LD_ADDR_VAR 0 7
70247: PUSH
70248: LD_VAR 0 6
70252: PUSH
70253: LD_VAR 0 3
70257: DIFF
70258: PUSH
70259: FOR_IN
70260: IFFALSE 70312
// begin if sci = 6 then
70262: LD_VAR 0 8
70266: PUSH
70267: LD_INT 6
70269: EQUAL
70270: IFFALSE 70274
// break ;
70272: GO 70312
// if BuildingStatus ( x ) = bs_idle then
70274: LD_VAR 0 7
70278: PPUSH
70279: CALL_OW 461
70283: PUSH
70284: LD_INT 2
70286: EQUAL
70287: IFFALSE 70310
// sci := sci ^ UnitsInside ( x ) ;
70289: LD_ADDR_VAR 0 8
70293: PUSH
70294: LD_VAR 0 8
70298: PUSH
70299: LD_VAR 0 7
70303: PPUSH
70304: CALL_OW 313
70308: ADD
70309: ST_TO_ADDR
// end ;
70310: GO 70259
70312: POP
70313: POP
// if not sci then
70314: LD_VAR 0 8
70318: NOT
70319: IFFALSE 70323
// continue ;
70321: GO 69368
// for x in sci do
70323: LD_ADDR_VAR 0 7
70327: PUSH
70328: LD_VAR 0 8
70332: PUSH
70333: FOR_IN
70334: IFFALSE 70384
// if IsInUnit ( x ) and not HasTask ( x ) then
70336: LD_VAR 0 7
70340: PPUSH
70341: CALL_OW 310
70345: PUSH
70346: LD_VAR 0 7
70350: PPUSH
70351: CALL_OW 314
70355: NOT
70356: AND
70357: IFFALSE 70382
// begin ComExitBuilding ( x ) ;
70359: LD_VAR 0 7
70363: PPUSH
70364: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
70368: LD_VAR 0 7
70372: PPUSH
70373: LD_VAR 0 3
70377: PPUSH
70378: CALL_OW 180
// end ;
70382: GO 70333
70384: POP
70385: POP
// end ; end ;
70386: GO 69368
70388: POP
70389: POP
// end ;
70390: GO 69322
70392: POP
70393: POP
// end ;
70394: LD_VAR 0 1
70398: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
70399: LD_INT 0
70401: PPUSH
70402: PPUSH
// if not mc_bases then
70403: LD_EXP 52
70407: NOT
70408: IFFALSE 70412
// exit ;
70410: GO 70493
// for i = 1 to mc_bases do
70412: LD_ADDR_VAR 0 2
70416: PUSH
70417: DOUBLE
70418: LD_INT 1
70420: DEC
70421: ST_TO_ADDR
70422: LD_EXP 52
70426: PUSH
70427: FOR_TO
70428: IFFALSE 70491
// if mc_mines [ i ] and mc_miners [ i ] then
70430: LD_EXP 65
70434: PUSH
70435: LD_VAR 0 2
70439: ARRAY
70440: PUSH
70441: LD_EXP 66
70445: PUSH
70446: LD_VAR 0 2
70450: ARRAY
70451: AND
70452: IFFALSE 70489
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
70454: LD_EXP 66
70458: PUSH
70459: LD_VAR 0 2
70463: ARRAY
70464: PUSH
70465: LD_INT 1
70467: ARRAY
70468: PPUSH
70469: CALL_OW 255
70473: PPUSH
70474: LD_EXP 65
70478: PUSH
70479: LD_VAR 0 2
70483: ARRAY
70484: PPUSH
70485: CALL 14463 0 2
70489: GO 70427
70491: POP
70492: POP
// end ;
70493: LD_VAR 0 1
70497: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
70498: LD_INT 0
70500: PPUSH
70501: PPUSH
70502: PPUSH
70503: PPUSH
70504: PPUSH
70505: PPUSH
70506: PPUSH
70507: PPUSH
// if not mc_bases or not mc_parking then
70508: LD_EXP 52
70512: NOT
70513: PUSH
70514: LD_EXP 76
70518: NOT
70519: OR
70520: IFFALSE 70524
// exit ;
70522: GO 71200
// for i = 1 to mc_bases do
70524: LD_ADDR_VAR 0 2
70528: PUSH
70529: DOUBLE
70530: LD_INT 1
70532: DEC
70533: ST_TO_ADDR
70534: LD_EXP 52
70538: PUSH
70539: FOR_TO
70540: IFFALSE 71198
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
70542: LD_EXP 52
70546: PUSH
70547: LD_VAR 0 2
70551: ARRAY
70552: NOT
70553: PUSH
70554: LD_EXP 76
70558: PUSH
70559: LD_VAR 0 2
70563: ARRAY
70564: NOT
70565: OR
70566: IFFALSE 70570
// continue ;
70568: GO 70539
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
70570: LD_ADDR_VAR 0 5
70574: PUSH
70575: LD_EXP 52
70579: PUSH
70580: LD_VAR 0 2
70584: ARRAY
70585: PUSH
70586: LD_INT 1
70588: ARRAY
70589: PPUSH
70590: CALL_OW 255
70594: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
70595: LD_ADDR_VAR 0 6
70599: PUSH
70600: LD_EXP 52
70604: PUSH
70605: LD_VAR 0 2
70609: ARRAY
70610: PPUSH
70611: LD_INT 30
70613: PUSH
70614: LD_INT 3
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PPUSH
70621: CALL_OW 72
70625: ST_TO_ADDR
// if not fac then
70626: LD_VAR 0 6
70630: NOT
70631: IFFALSE 70682
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
70633: LD_ADDR_VAR 0 6
70637: PUSH
70638: LD_EXP 52
70642: PUSH
70643: LD_VAR 0 2
70647: ARRAY
70648: PPUSH
70649: LD_INT 2
70651: PUSH
70652: LD_INT 30
70654: PUSH
70655: LD_INT 0
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: PUSH
70662: LD_INT 30
70664: PUSH
70665: LD_INT 1
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: PUSH
70672: EMPTY
70673: LIST
70674: LIST
70675: LIST
70676: PPUSH
70677: CALL_OW 72
70681: ST_TO_ADDR
// if not fac then
70682: LD_VAR 0 6
70686: NOT
70687: IFFALSE 70691
// continue ;
70689: GO 70539
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
70691: LD_ADDR_VAR 0 7
70695: PUSH
70696: LD_EXP 76
70700: PUSH
70701: LD_VAR 0 2
70705: ARRAY
70706: PPUSH
70707: LD_INT 22
70709: PUSH
70710: LD_VAR 0 5
70714: PUSH
70715: EMPTY
70716: LIST
70717: LIST
70718: PUSH
70719: LD_INT 21
70721: PUSH
70722: LD_INT 2
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_INT 3
70731: PUSH
70732: LD_INT 24
70734: PUSH
70735: LD_INT 1000
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: EMPTY
70743: LIST
70744: LIST
70745: PUSH
70746: EMPTY
70747: LIST
70748: LIST
70749: LIST
70750: PPUSH
70751: CALL_OW 70
70755: PUSH
70756: LD_INT 22
70758: PUSH
70759: LD_VAR 0 5
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: PUSH
70768: LD_INT 91
70770: PUSH
70771: LD_VAR 0 6
70775: PUSH
70776: LD_INT 1
70778: ARRAY
70779: PUSH
70780: LD_INT 25
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: LIST
70787: PUSH
70788: LD_INT 21
70790: PUSH
70791: LD_INT 2
70793: PUSH
70794: EMPTY
70795: LIST
70796: LIST
70797: PUSH
70798: LD_INT 3
70800: PUSH
70801: LD_INT 24
70803: PUSH
70804: LD_INT 1000
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: EMPTY
70812: LIST
70813: LIST
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: LIST
70819: LIST
70820: PPUSH
70821: CALL_OW 69
70825: UNION
70826: ST_TO_ADDR
// if not vehs then
70827: LD_VAR 0 7
70831: NOT
70832: IFFALSE 70858
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
70834: LD_ADDR_EXP 64
70838: PUSH
70839: LD_EXP 64
70843: PPUSH
70844: LD_VAR 0 2
70848: PPUSH
70849: EMPTY
70850: PPUSH
70851: CALL_OW 1
70855: ST_TO_ADDR
// continue ;
70856: GO 70539
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
70858: LD_ADDR_VAR 0 8
70862: PUSH
70863: LD_EXP 52
70867: PUSH
70868: LD_VAR 0 2
70872: ARRAY
70873: PPUSH
70874: LD_INT 30
70876: PUSH
70877: LD_INT 3
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: PPUSH
70884: CALL_OW 72
70888: ST_TO_ADDR
// if tmp then
70889: LD_VAR 0 8
70893: IFFALSE 70996
// begin for j in tmp do
70895: LD_ADDR_VAR 0 3
70899: PUSH
70900: LD_VAR 0 8
70904: PUSH
70905: FOR_IN
70906: IFFALSE 70994
// for k in UnitsInside ( j ) do
70908: LD_ADDR_VAR 0 4
70912: PUSH
70913: LD_VAR 0 3
70917: PPUSH
70918: CALL_OW 313
70922: PUSH
70923: FOR_IN
70924: IFFALSE 70990
// if k then
70926: LD_VAR 0 4
70930: IFFALSE 70988
// if not k in mc_repair_vehicle [ i ] then
70932: LD_VAR 0 4
70936: PUSH
70937: LD_EXP 64
70941: PUSH
70942: LD_VAR 0 2
70946: ARRAY
70947: IN
70948: NOT
70949: IFFALSE 70988
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
70951: LD_ADDR_EXP 64
70955: PUSH
70956: LD_EXP 64
70960: PPUSH
70961: LD_VAR 0 2
70965: PPUSH
70966: LD_EXP 64
70970: PUSH
70971: LD_VAR 0 2
70975: ARRAY
70976: PUSH
70977: LD_VAR 0 4
70981: UNION
70982: PPUSH
70983: CALL_OW 1
70987: ST_TO_ADDR
70988: GO 70923
70990: POP
70991: POP
70992: GO 70905
70994: POP
70995: POP
// end ; if not mc_repair_vehicle [ i ] then
70996: LD_EXP 64
71000: PUSH
71001: LD_VAR 0 2
71005: ARRAY
71006: NOT
71007: IFFALSE 71011
// continue ;
71009: GO 70539
// for j in mc_repair_vehicle [ i ] do
71011: LD_ADDR_VAR 0 3
71015: PUSH
71016: LD_EXP 64
71020: PUSH
71021: LD_VAR 0 2
71025: ARRAY
71026: PUSH
71027: FOR_IN
71028: IFFALSE 71194
// begin if GetClass ( j ) <> 3 then
71030: LD_VAR 0 3
71034: PPUSH
71035: CALL_OW 257
71039: PUSH
71040: LD_INT 3
71042: NONEQUAL
71043: IFFALSE 71084
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
71045: LD_ADDR_EXP 64
71049: PUSH
71050: LD_EXP 64
71054: PPUSH
71055: LD_VAR 0 2
71059: PPUSH
71060: LD_EXP 64
71064: PUSH
71065: LD_VAR 0 2
71069: ARRAY
71070: PUSH
71071: LD_VAR 0 3
71075: DIFF
71076: PPUSH
71077: CALL_OW 1
71081: ST_TO_ADDR
// continue ;
71082: GO 71027
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
71084: LD_VAR 0 3
71088: PPUSH
71089: CALL_OW 311
71093: NOT
71094: PUSH
71095: LD_VAR 0 3
71099: PUSH
71100: LD_EXP 55
71104: PUSH
71105: LD_VAR 0 2
71109: ARRAY
71110: PUSH
71111: LD_INT 1
71113: ARRAY
71114: IN
71115: NOT
71116: AND
71117: PUSH
71118: LD_VAR 0 3
71122: PUSH
71123: LD_EXP 55
71127: PUSH
71128: LD_VAR 0 2
71132: ARRAY
71133: PUSH
71134: LD_INT 2
71136: ARRAY
71137: IN
71138: NOT
71139: AND
71140: IFFALSE 71192
// begin if IsInUnit ( j ) then
71142: LD_VAR 0 3
71146: PPUSH
71147: CALL_OW 310
71151: IFFALSE 71162
// ComExitBuilding ( j ) ;
71153: LD_VAR 0 3
71157: PPUSH
71158: CALL_OW 122
// if not HasTask ( j ) then
71162: LD_VAR 0 3
71166: PPUSH
71167: CALL_OW 314
71171: NOT
71172: IFFALSE 71192
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
71174: LD_VAR 0 3
71178: PPUSH
71179: LD_VAR 0 7
71183: PUSH
71184: LD_INT 1
71186: ARRAY
71187: PPUSH
71188: CALL_OW 189
// end ; end ;
71192: GO 71027
71194: POP
71195: POP
// end ;
71196: GO 70539
71198: POP
71199: POP
// end ;
71200: LD_VAR 0 1
71204: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
71205: LD_INT 0
71207: PPUSH
71208: PPUSH
71209: PPUSH
71210: PPUSH
71211: PPUSH
71212: PPUSH
71213: PPUSH
71214: PPUSH
71215: PPUSH
71216: PPUSH
71217: PPUSH
// if not mc_bases then
71218: LD_EXP 52
71222: NOT
71223: IFFALSE 71227
// exit ;
71225: GO 72029
// for i = 1 to mc_bases do
71227: LD_ADDR_VAR 0 2
71231: PUSH
71232: DOUBLE
71233: LD_INT 1
71235: DEC
71236: ST_TO_ADDR
71237: LD_EXP 52
71241: PUSH
71242: FOR_TO
71243: IFFALSE 72027
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
71245: LD_EXP 80
71249: PUSH
71250: LD_VAR 0 2
71254: ARRAY
71255: NOT
71256: PUSH
71257: LD_EXP 55
71261: PUSH
71262: LD_VAR 0 2
71266: ARRAY
71267: PUSH
71268: LD_INT 1
71270: ARRAY
71271: OR
71272: PUSH
71273: LD_EXP 55
71277: PUSH
71278: LD_VAR 0 2
71282: ARRAY
71283: PUSH
71284: LD_INT 2
71286: ARRAY
71287: OR
71288: PUSH
71289: LD_EXP 78
71293: PUSH
71294: LD_VAR 0 2
71298: ARRAY
71299: PPUSH
71300: LD_INT 1
71302: PPUSH
71303: CALL_OW 325
71307: NOT
71308: OR
71309: PUSH
71310: LD_EXP 75
71314: PUSH
71315: LD_VAR 0 2
71319: ARRAY
71320: OR
71321: IFFALSE 71325
// continue ;
71323: GO 71242
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
71325: LD_ADDR_VAR 0 8
71329: PUSH
71330: LD_EXP 52
71334: PUSH
71335: LD_VAR 0 2
71339: ARRAY
71340: PPUSH
71341: LD_INT 25
71343: PUSH
71344: LD_INT 4
71346: PUSH
71347: EMPTY
71348: LIST
71349: LIST
71350: PUSH
71351: LD_INT 50
71353: PUSH
71354: EMPTY
71355: LIST
71356: PUSH
71357: LD_INT 3
71359: PUSH
71360: LD_INT 60
71362: PUSH
71363: EMPTY
71364: LIST
71365: PUSH
71366: EMPTY
71367: LIST
71368: LIST
71369: PUSH
71370: EMPTY
71371: LIST
71372: LIST
71373: LIST
71374: PPUSH
71375: CALL_OW 72
71379: PUSH
71380: LD_EXP 56
71384: PUSH
71385: LD_VAR 0 2
71389: ARRAY
71390: DIFF
71391: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
71392: LD_ADDR_VAR 0 9
71396: PUSH
71397: LD_EXP 52
71401: PUSH
71402: LD_VAR 0 2
71406: ARRAY
71407: PPUSH
71408: LD_INT 2
71410: PUSH
71411: LD_INT 30
71413: PUSH
71414: LD_INT 0
71416: PUSH
71417: EMPTY
71418: LIST
71419: LIST
71420: PUSH
71421: LD_INT 30
71423: PUSH
71424: LD_INT 1
71426: PUSH
71427: EMPTY
71428: LIST
71429: LIST
71430: PUSH
71431: EMPTY
71432: LIST
71433: LIST
71434: LIST
71435: PPUSH
71436: CALL_OW 72
71440: ST_TO_ADDR
// if not tmp or not dep then
71441: LD_VAR 0 8
71445: NOT
71446: PUSH
71447: LD_VAR 0 9
71451: NOT
71452: OR
71453: IFFALSE 71457
// continue ;
71455: GO 71242
// side := GetSide ( tmp [ 1 ] ) ;
71457: LD_ADDR_VAR 0 11
71461: PUSH
71462: LD_VAR 0 8
71466: PUSH
71467: LD_INT 1
71469: ARRAY
71470: PPUSH
71471: CALL_OW 255
71475: ST_TO_ADDR
// dep := dep [ 1 ] ;
71476: LD_ADDR_VAR 0 9
71480: PUSH
71481: LD_VAR 0 9
71485: PUSH
71486: LD_INT 1
71488: ARRAY
71489: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
71490: LD_ADDR_VAR 0 7
71494: PUSH
71495: LD_EXP 80
71499: PUSH
71500: LD_VAR 0 2
71504: ARRAY
71505: PPUSH
71506: LD_INT 22
71508: PUSH
71509: LD_INT 0
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: PUSH
71516: LD_INT 25
71518: PUSH
71519: LD_INT 12
71521: PUSH
71522: EMPTY
71523: LIST
71524: LIST
71525: PUSH
71526: EMPTY
71527: LIST
71528: LIST
71529: PPUSH
71530: CALL_OW 70
71534: PUSH
71535: LD_INT 22
71537: PUSH
71538: LD_INT 0
71540: PUSH
71541: EMPTY
71542: LIST
71543: LIST
71544: PUSH
71545: LD_INT 25
71547: PUSH
71548: LD_INT 12
71550: PUSH
71551: EMPTY
71552: LIST
71553: LIST
71554: PUSH
71555: LD_INT 91
71557: PUSH
71558: LD_VAR 0 9
71562: PUSH
71563: LD_INT 20
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: LIST
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: LIST
71575: PPUSH
71576: CALL_OW 69
71580: UNION
71581: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
71582: LD_ADDR_VAR 0 10
71586: PUSH
71587: LD_EXP 80
71591: PUSH
71592: LD_VAR 0 2
71596: ARRAY
71597: PPUSH
71598: LD_INT 81
71600: PUSH
71601: LD_VAR 0 11
71605: PUSH
71606: EMPTY
71607: LIST
71608: LIST
71609: PPUSH
71610: CALL_OW 70
71614: ST_TO_ADDR
// if not apes or danger_at_area then
71615: LD_VAR 0 7
71619: NOT
71620: PUSH
71621: LD_VAR 0 10
71625: OR
71626: IFFALSE 71676
// begin if mc_taming [ i ] then
71628: LD_EXP 83
71632: PUSH
71633: LD_VAR 0 2
71637: ARRAY
71638: IFFALSE 71674
// begin MC_Reset ( i , 121 ) ;
71640: LD_VAR 0 2
71644: PPUSH
71645: LD_INT 121
71647: PPUSH
71648: CALL 57369 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
71652: LD_ADDR_EXP 83
71656: PUSH
71657: LD_EXP 83
71661: PPUSH
71662: LD_VAR 0 2
71666: PPUSH
71667: EMPTY
71668: PPUSH
71669: CALL_OW 1
71673: ST_TO_ADDR
// end ; continue ;
71674: GO 71242
// end ; for j in tmp do
71676: LD_ADDR_VAR 0 3
71680: PUSH
71681: LD_VAR 0 8
71685: PUSH
71686: FOR_IN
71687: IFFALSE 72023
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
71689: LD_VAR 0 3
71693: PUSH
71694: LD_EXP 83
71698: PUSH
71699: LD_VAR 0 2
71703: ARRAY
71704: IN
71705: NOT
71706: PUSH
71707: LD_EXP 83
71711: PUSH
71712: LD_VAR 0 2
71716: ARRAY
71717: PUSH
71718: LD_INT 3
71720: LESS
71721: AND
71722: IFFALSE 71780
// begin SetTag ( j , 121 ) ;
71724: LD_VAR 0 3
71728: PPUSH
71729: LD_INT 121
71731: PPUSH
71732: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
71736: LD_ADDR_EXP 83
71740: PUSH
71741: LD_EXP 83
71745: PPUSH
71746: LD_VAR 0 2
71750: PUSH
71751: LD_EXP 83
71755: PUSH
71756: LD_VAR 0 2
71760: ARRAY
71761: PUSH
71762: LD_INT 1
71764: PLUS
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: PPUSH
71770: LD_VAR 0 3
71774: PPUSH
71775: CALL 17413 0 3
71779: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
71780: LD_VAR 0 3
71784: PUSH
71785: LD_EXP 83
71789: PUSH
71790: LD_VAR 0 2
71794: ARRAY
71795: IN
71796: IFFALSE 72021
// begin if GetClass ( j ) <> 4 then
71798: LD_VAR 0 3
71802: PPUSH
71803: CALL_OW 257
71807: PUSH
71808: LD_INT 4
71810: NONEQUAL
71811: IFFALSE 71864
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
71813: LD_ADDR_EXP 83
71817: PUSH
71818: LD_EXP 83
71822: PPUSH
71823: LD_VAR 0 2
71827: PPUSH
71828: LD_EXP 83
71832: PUSH
71833: LD_VAR 0 2
71837: ARRAY
71838: PUSH
71839: LD_VAR 0 3
71843: DIFF
71844: PPUSH
71845: CALL_OW 1
71849: ST_TO_ADDR
// SetTag ( j , 0 ) ;
71850: LD_VAR 0 3
71854: PPUSH
71855: LD_INT 0
71857: PPUSH
71858: CALL_OW 109
// continue ;
71862: GO 71686
// end ; if IsInUnit ( j ) then
71864: LD_VAR 0 3
71868: PPUSH
71869: CALL_OW 310
71873: IFFALSE 71884
// ComExitBuilding ( j ) ;
71875: LD_VAR 0 3
71879: PPUSH
71880: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
71884: LD_ADDR_VAR 0 6
71888: PUSH
71889: LD_VAR 0 7
71893: PPUSH
71894: LD_VAR 0 3
71898: PPUSH
71899: CALL_OW 74
71903: ST_TO_ADDR
// if not ape then
71904: LD_VAR 0 6
71908: NOT
71909: IFFALSE 71913
// break ;
71911: GO 72023
// x := GetX ( ape ) ;
71913: LD_ADDR_VAR 0 4
71917: PUSH
71918: LD_VAR 0 6
71922: PPUSH
71923: CALL_OW 250
71927: ST_TO_ADDR
// y := GetY ( ape ) ;
71928: LD_ADDR_VAR 0 5
71932: PUSH
71933: LD_VAR 0 6
71937: PPUSH
71938: CALL_OW 251
71942: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
71943: LD_VAR 0 4
71947: PPUSH
71948: LD_VAR 0 5
71952: PPUSH
71953: CALL_OW 488
71957: NOT
71958: PUSH
71959: LD_VAR 0 11
71963: PPUSH
71964: LD_VAR 0 4
71968: PPUSH
71969: LD_VAR 0 5
71973: PPUSH
71974: LD_INT 20
71976: PPUSH
71977: CALL 18309 0 4
71981: PUSH
71982: LD_INT 4
71984: ARRAY
71985: OR
71986: IFFALSE 71990
// break ;
71988: GO 72023
// if not HasTask ( j ) then
71990: LD_VAR 0 3
71994: PPUSH
71995: CALL_OW 314
71999: NOT
72000: IFFALSE 72021
// ComTameXY ( j , x , y ) ;
72002: LD_VAR 0 3
72006: PPUSH
72007: LD_VAR 0 4
72011: PPUSH
72012: LD_VAR 0 5
72016: PPUSH
72017: CALL_OW 131
// end ; end ;
72021: GO 71686
72023: POP
72024: POP
// end ;
72025: GO 71242
72027: POP
72028: POP
// end ;
72029: LD_VAR 0 1
72033: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
72034: LD_INT 0
72036: PPUSH
72037: PPUSH
72038: PPUSH
72039: PPUSH
72040: PPUSH
72041: PPUSH
72042: PPUSH
72043: PPUSH
// if not mc_bases then
72044: LD_EXP 52
72048: NOT
72049: IFFALSE 72053
// exit ;
72051: GO 72679
// for i = 1 to mc_bases do
72053: LD_ADDR_VAR 0 2
72057: PUSH
72058: DOUBLE
72059: LD_INT 1
72061: DEC
72062: ST_TO_ADDR
72063: LD_EXP 52
72067: PUSH
72068: FOR_TO
72069: IFFALSE 72677
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
72071: LD_EXP 81
72075: PUSH
72076: LD_VAR 0 2
72080: ARRAY
72081: NOT
72082: PUSH
72083: LD_EXP 81
72087: PUSH
72088: LD_VAR 0 2
72092: ARRAY
72093: PPUSH
72094: LD_INT 25
72096: PUSH
72097: LD_INT 12
72099: PUSH
72100: EMPTY
72101: LIST
72102: LIST
72103: PPUSH
72104: CALL_OW 72
72108: NOT
72109: OR
72110: IFFALSE 72114
// continue ;
72112: GO 72068
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
72114: LD_ADDR_VAR 0 5
72118: PUSH
72119: LD_EXP 81
72123: PUSH
72124: LD_VAR 0 2
72128: ARRAY
72129: PUSH
72130: LD_INT 1
72132: ARRAY
72133: PPUSH
72134: CALL_OW 255
72138: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
72139: LD_VAR 0 5
72143: PPUSH
72144: LD_INT 2
72146: PPUSH
72147: CALL_OW 325
72151: IFFALSE 72404
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
72153: LD_ADDR_VAR 0 4
72157: PUSH
72158: LD_EXP 81
72162: PUSH
72163: LD_VAR 0 2
72167: ARRAY
72168: PPUSH
72169: LD_INT 25
72171: PUSH
72172: LD_INT 16
72174: PUSH
72175: EMPTY
72176: LIST
72177: LIST
72178: PPUSH
72179: CALL_OW 72
72183: ST_TO_ADDR
// if tmp < 6 then
72184: LD_VAR 0 4
72188: PUSH
72189: LD_INT 6
72191: LESS
72192: IFFALSE 72404
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72194: LD_ADDR_VAR 0 6
72198: PUSH
72199: LD_EXP 52
72203: PUSH
72204: LD_VAR 0 2
72208: ARRAY
72209: PPUSH
72210: LD_INT 2
72212: PUSH
72213: LD_INT 30
72215: PUSH
72216: LD_INT 0
72218: PUSH
72219: EMPTY
72220: LIST
72221: LIST
72222: PUSH
72223: LD_INT 30
72225: PUSH
72226: LD_INT 1
72228: PUSH
72229: EMPTY
72230: LIST
72231: LIST
72232: PUSH
72233: EMPTY
72234: LIST
72235: LIST
72236: LIST
72237: PPUSH
72238: CALL_OW 72
72242: ST_TO_ADDR
// if depot then
72243: LD_VAR 0 6
72247: IFFALSE 72404
// begin selected := 0 ;
72249: LD_ADDR_VAR 0 7
72253: PUSH
72254: LD_INT 0
72256: ST_TO_ADDR
// for j in depot do
72257: LD_ADDR_VAR 0 3
72261: PUSH
72262: LD_VAR 0 6
72266: PUSH
72267: FOR_IN
72268: IFFALSE 72299
// begin if UnitsInside ( j ) < 6 then
72270: LD_VAR 0 3
72274: PPUSH
72275: CALL_OW 313
72279: PUSH
72280: LD_INT 6
72282: LESS
72283: IFFALSE 72297
// begin selected := j ;
72285: LD_ADDR_VAR 0 7
72289: PUSH
72290: LD_VAR 0 3
72294: ST_TO_ADDR
// break ;
72295: GO 72299
// end ; end ;
72297: GO 72267
72299: POP
72300: POP
// if selected then
72301: LD_VAR 0 7
72305: IFFALSE 72404
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
72307: LD_ADDR_VAR 0 3
72311: PUSH
72312: LD_EXP 81
72316: PUSH
72317: LD_VAR 0 2
72321: ARRAY
72322: PPUSH
72323: LD_INT 25
72325: PUSH
72326: LD_INT 12
72328: PUSH
72329: EMPTY
72330: LIST
72331: LIST
72332: PPUSH
72333: CALL_OW 72
72337: PUSH
72338: FOR_IN
72339: IFFALSE 72402
// if not HasTask ( j ) then
72341: LD_VAR 0 3
72345: PPUSH
72346: CALL_OW 314
72350: NOT
72351: IFFALSE 72400
// begin if not IsInUnit ( j ) then
72353: LD_VAR 0 3
72357: PPUSH
72358: CALL_OW 310
72362: NOT
72363: IFFALSE 72379
// ComEnterUnit ( j , selected ) ;
72365: LD_VAR 0 3
72369: PPUSH
72370: LD_VAR 0 7
72374: PPUSH
72375: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
72379: LD_VAR 0 3
72383: PPUSH
72384: LD_INT 16
72386: PPUSH
72387: CALL_OW 183
// AddComExitBuilding ( j ) ;
72391: LD_VAR 0 3
72395: PPUSH
72396: CALL_OW 182
// end ;
72400: GO 72338
72402: POP
72403: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
72404: LD_VAR 0 5
72408: PPUSH
72409: LD_INT 11
72411: PPUSH
72412: CALL_OW 325
72416: IFFALSE 72675
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
72418: LD_ADDR_VAR 0 4
72422: PUSH
72423: LD_EXP 81
72427: PUSH
72428: LD_VAR 0 2
72432: ARRAY
72433: PPUSH
72434: LD_INT 25
72436: PUSH
72437: LD_INT 16
72439: PUSH
72440: EMPTY
72441: LIST
72442: LIST
72443: PPUSH
72444: CALL_OW 72
72448: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
72449: LD_VAR 0 4
72453: PUSH
72454: LD_INT 6
72456: GREATEREQUAL
72457: PUSH
72458: LD_VAR 0 5
72462: PPUSH
72463: LD_INT 2
72465: PPUSH
72466: CALL_OW 325
72470: NOT
72471: OR
72472: IFFALSE 72675
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
72474: LD_ADDR_VAR 0 8
72478: PUSH
72479: LD_EXP 52
72483: PUSH
72484: LD_VAR 0 2
72488: ARRAY
72489: PPUSH
72490: LD_INT 2
72492: PUSH
72493: LD_INT 30
72495: PUSH
72496: LD_INT 4
72498: PUSH
72499: EMPTY
72500: LIST
72501: LIST
72502: PUSH
72503: LD_INT 30
72505: PUSH
72506: LD_INT 5
72508: PUSH
72509: EMPTY
72510: LIST
72511: LIST
72512: PUSH
72513: EMPTY
72514: LIST
72515: LIST
72516: LIST
72517: PPUSH
72518: CALL_OW 72
72522: ST_TO_ADDR
// if barracks then
72523: LD_VAR 0 8
72527: IFFALSE 72675
// begin selected := 0 ;
72529: LD_ADDR_VAR 0 7
72533: PUSH
72534: LD_INT 0
72536: ST_TO_ADDR
// for j in barracks do
72537: LD_ADDR_VAR 0 3
72541: PUSH
72542: LD_VAR 0 8
72546: PUSH
72547: FOR_IN
72548: IFFALSE 72579
// begin if UnitsInside ( j ) < 6 then
72550: LD_VAR 0 3
72554: PPUSH
72555: CALL_OW 313
72559: PUSH
72560: LD_INT 6
72562: LESS
72563: IFFALSE 72577
// begin selected := j ;
72565: LD_ADDR_VAR 0 7
72569: PUSH
72570: LD_VAR 0 3
72574: ST_TO_ADDR
// break ;
72575: GO 72579
// end ; end ;
72577: GO 72547
72579: POP
72580: POP
// if selected then
72581: LD_VAR 0 7
72585: IFFALSE 72675
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
72587: LD_ADDR_VAR 0 3
72591: PUSH
72592: LD_EXP 81
72596: PUSH
72597: LD_VAR 0 2
72601: ARRAY
72602: PPUSH
72603: LD_INT 25
72605: PUSH
72606: LD_INT 12
72608: PUSH
72609: EMPTY
72610: LIST
72611: LIST
72612: PPUSH
72613: CALL_OW 72
72617: PUSH
72618: FOR_IN
72619: IFFALSE 72673
// if not IsInUnit ( j ) and not HasTask ( j ) then
72621: LD_VAR 0 3
72625: PPUSH
72626: CALL_OW 310
72630: NOT
72631: PUSH
72632: LD_VAR 0 3
72636: PPUSH
72637: CALL_OW 314
72641: NOT
72642: AND
72643: IFFALSE 72671
// begin ComEnterUnit ( j , selected ) ;
72645: LD_VAR 0 3
72649: PPUSH
72650: LD_VAR 0 7
72654: PPUSH
72655: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
72659: LD_VAR 0 3
72663: PPUSH
72664: LD_INT 15
72666: PPUSH
72667: CALL_OW 183
// end ;
72671: GO 72618
72673: POP
72674: POP
// end ; end ; end ; end ; end ;
72675: GO 72068
72677: POP
72678: POP
// end ;
72679: LD_VAR 0 1
72683: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
72684: LD_INT 0
72686: PPUSH
72687: PPUSH
72688: PPUSH
72689: PPUSH
// if not mc_bases then
72690: LD_EXP 52
72694: NOT
72695: IFFALSE 72699
// exit ;
72697: GO 72877
// for i = 1 to mc_bases do
72699: LD_ADDR_VAR 0 2
72703: PUSH
72704: DOUBLE
72705: LD_INT 1
72707: DEC
72708: ST_TO_ADDR
72709: LD_EXP 52
72713: PUSH
72714: FOR_TO
72715: IFFALSE 72875
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
72717: LD_ADDR_VAR 0 4
72721: PUSH
72722: LD_EXP 52
72726: PUSH
72727: LD_VAR 0 2
72731: ARRAY
72732: PPUSH
72733: LD_INT 25
72735: PUSH
72736: LD_INT 9
72738: PUSH
72739: EMPTY
72740: LIST
72741: LIST
72742: PPUSH
72743: CALL_OW 72
72747: ST_TO_ADDR
// if not tmp then
72748: LD_VAR 0 4
72752: NOT
72753: IFFALSE 72757
// continue ;
72755: GO 72714
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
72757: LD_EXP 78
72761: PUSH
72762: LD_VAR 0 2
72766: ARRAY
72767: PPUSH
72768: LD_INT 29
72770: PPUSH
72771: CALL_OW 325
72775: NOT
72776: PUSH
72777: LD_EXP 78
72781: PUSH
72782: LD_VAR 0 2
72786: ARRAY
72787: PPUSH
72788: LD_INT 28
72790: PPUSH
72791: CALL_OW 325
72795: NOT
72796: AND
72797: IFFALSE 72801
// continue ;
72799: GO 72714
// for j in tmp do
72801: LD_ADDR_VAR 0 3
72805: PUSH
72806: LD_VAR 0 4
72810: PUSH
72811: FOR_IN
72812: IFFALSE 72871
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
72814: LD_VAR 0 3
72818: PUSH
72819: LD_EXP 55
72823: PUSH
72824: LD_VAR 0 2
72828: ARRAY
72829: PUSH
72830: LD_INT 1
72832: ARRAY
72833: IN
72834: NOT
72835: PUSH
72836: LD_VAR 0 3
72840: PUSH
72841: LD_EXP 55
72845: PUSH
72846: LD_VAR 0 2
72850: ARRAY
72851: PUSH
72852: LD_INT 2
72854: ARRAY
72855: IN
72856: NOT
72857: AND
72858: IFFALSE 72869
// ComSpaceTimeShoot ( j ) ;
72860: LD_VAR 0 3
72864: PPUSH
72865: CALL 11503 0 1
72869: GO 72811
72871: POP
72872: POP
// end ;
72873: GO 72714
72875: POP
72876: POP
// end ;
72877: LD_VAR 0 1
72881: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
72882: LD_INT 0
72884: PPUSH
72885: PPUSH
72886: PPUSH
72887: PPUSH
72888: PPUSH
72889: PPUSH
72890: PPUSH
72891: PPUSH
72892: PPUSH
// if not mc_bases then
72893: LD_EXP 52
72897: NOT
72898: IFFALSE 72902
// exit ;
72900: GO 73524
// for i = 1 to mc_bases do
72902: LD_ADDR_VAR 0 2
72906: PUSH
72907: DOUBLE
72908: LD_INT 1
72910: DEC
72911: ST_TO_ADDR
72912: LD_EXP 52
72916: PUSH
72917: FOR_TO
72918: IFFALSE 73522
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
72920: LD_EXP 87
72924: PUSH
72925: LD_VAR 0 2
72929: ARRAY
72930: NOT
72931: PUSH
72932: LD_INT 38
72934: PPUSH
72935: LD_EXP 78
72939: PUSH
72940: LD_VAR 0 2
72944: ARRAY
72945: PPUSH
72946: CALL_OW 321
72950: PUSH
72951: LD_INT 2
72953: NONEQUAL
72954: OR
72955: IFFALSE 72959
// continue ;
72957: GO 72917
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
72959: LD_ADDR_VAR 0 8
72963: PUSH
72964: LD_EXP 52
72968: PUSH
72969: LD_VAR 0 2
72973: ARRAY
72974: PPUSH
72975: LD_INT 30
72977: PUSH
72978: LD_INT 34
72980: PUSH
72981: EMPTY
72982: LIST
72983: LIST
72984: PPUSH
72985: CALL_OW 72
72989: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
72990: LD_ADDR_VAR 0 9
72994: PUSH
72995: LD_EXP 52
72999: PUSH
73000: LD_VAR 0 2
73004: ARRAY
73005: PPUSH
73006: LD_INT 25
73008: PUSH
73009: LD_INT 4
73011: PUSH
73012: EMPTY
73013: LIST
73014: LIST
73015: PPUSH
73016: CALL_OW 72
73020: PPUSH
73021: LD_INT 0
73023: PPUSH
73024: CALL 50667 0 2
73028: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
73029: LD_VAR 0 9
73033: NOT
73034: PUSH
73035: LD_VAR 0 8
73039: NOT
73040: OR
73041: PUSH
73042: LD_EXP 52
73046: PUSH
73047: LD_VAR 0 2
73051: ARRAY
73052: PPUSH
73053: LD_INT 124
73055: PPUSH
73056: CALL 50667 0 2
73060: OR
73061: IFFALSE 73065
// continue ;
73063: GO 72917
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
73065: LD_EXP 88
73069: PUSH
73070: LD_VAR 0 2
73074: ARRAY
73075: PUSH
73076: LD_EXP 87
73080: PUSH
73081: LD_VAR 0 2
73085: ARRAY
73086: LESS
73087: PUSH
73088: LD_EXP 88
73092: PUSH
73093: LD_VAR 0 2
73097: ARRAY
73098: PUSH
73099: LD_VAR 0 8
73103: LESS
73104: AND
73105: IFFALSE 73520
// begin tmp := sci [ 1 ] ;
73107: LD_ADDR_VAR 0 7
73111: PUSH
73112: LD_VAR 0 9
73116: PUSH
73117: LD_INT 1
73119: ARRAY
73120: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
73121: LD_VAR 0 7
73125: PPUSH
73126: LD_INT 124
73128: PPUSH
73129: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
73133: LD_ADDR_VAR 0 3
73137: PUSH
73138: DOUBLE
73139: LD_EXP 87
73143: PUSH
73144: LD_VAR 0 2
73148: ARRAY
73149: INC
73150: ST_TO_ADDR
73151: LD_EXP 87
73155: PUSH
73156: LD_VAR 0 2
73160: ARRAY
73161: PUSH
73162: FOR_DOWNTO
73163: IFFALSE 73506
// begin if IsInUnit ( tmp ) then
73165: LD_VAR 0 7
73169: PPUSH
73170: CALL_OW 310
73174: IFFALSE 73185
// ComExitBuilding ( tmp ) ;
73176: LD_VAR 0 7
73180: PPUSH
73181: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
73185: LD_INT 35
73187: PPUSH
73188: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
73192: LD_VAR 0 7
73196: PPUSH
73197: CALL_OW 310
73201: NOT
73202: PUSH
73203: LD_VAR 0 7
73207: PPUSH
73208: CALL_OW 314
73212: NOT
73213: AND
73214: IFFALSE 73185
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
73216: LD_ADDR_VAR 0 6
73220: PUSH
73221: LD_VAR 0 7
73225: PPUSH
73226: CALL_OW 250
73230: PUSH
73231: LD_VAR 0 7
73235: PPUSH
73236: CALL_OW 251
73240: PUSH
73241: EMPTY
73242: LIST
73243: LIST
73244: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73245: LD_INT 35
73247: PPUSH
73248: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
73252: LD_ADDR_VAR 0 4
73256: PUSH
73257: LD_EXP 87
73261: PUSH
73262: LD_VAR 0 2
73266: ARRAY
73267: PUSH
73268: LD_VAR 0 3
73272: ARRAY
73273: PUSH
73274: LD_INT 1
73276: ARRAY
73277: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
73278: LD_ADDR_VAR 0 5
73282: PUSH
73283: LD_EXP 87
73287: PUSH
73288: LD_VAR 0 2
73292: ARRAY
73293: PUSH
73294: LD_VAR 0 3
73298: ARRAY
73299: PUSH
73300: LD_INT 2
73302: ARRAY
73303: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
73304: LD_VAR 0 7
73308: PPUSH
73309: LD_INT 10
73311: PPUSH
73312: CALL 20006 0 2
73316: PUSH
73317: LD_INT 4
73319: ARRAY
73320: IFFALSE 73358
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
73322: LD_VAR 0 7
73326: PPUSH
73327: LD_VAR 0 6
73331: PUSH
73332: LD_INT 1
73334: ARRAY
73335: PPUSH
73336: LD_VAR 0 6
73340: PUSH
73341: LD_INT 2
73343: ARRAY
73344: PPUSH
73345: CALL_OW 111
// wait ( 0 0$10 ) ;
73349: LD_INT 350
73351: PPUSH
73352: CALL_OW 67
// end else
73356: GO 73384
// begin ComMoveXY ( tmp , x , y ) ;
73358: LD_VAR 0 7
73362: PPUSH
73363: LD_VAR 0 4
73367: PPUSH
73368: LD_VAR 0 5
73372: PPUSH
73373: CALL_OW 111
// wait ( 0 0$3 ) ;
73377: LD_INT 105
73379: PPUSH
73380: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
73384: LD_VAR 0 7
73388: PPUSH
73389: LD_VAR 0 4
73393: PPUSH
73394: LD_VAR 0 5
73398: PPUSH
73399: CALL_OW 307
73403: IFFALSE 73245
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
73405: LD_VAR 0 7
73409: PPUSH
73410: LD_VAR 0 4
73414: PPUSH
73415: LD_VAR 0 5
73419: PPUSH
73420: LD_VAR 0 8
73424: PUSH
73425: LD_VAR 0 3
73429: ARRAY
73430: PPUSH
73431: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
73435: LD_INT 35
73437: PPUSH
73438: CALL_OW 67
// until not HasTask ( tmp ) ;
73442: LD_VAR 0 7
73446: PPUSH
73447: CALL_OW 314
73451: NOT
73452: IFFALSE 73435
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
73454: LD_ADDR_EXP 88
73458: PUSH
73459: LD_EXP 88
73463: PPUSH
73464: LD_VAR 0 2
73468: PUSH
73469: LD_EXP 88
73473: PUSH
73474: LD_VAR 0 2
73478: ARRAY
73479: PUSH
73480: LD_INT 1
73482: PLUS
73483: PUSH
73484: EMPTY
73485: LIST
73486: LIST
73487: PPUSH
73488: LD_VAR 0 8
73492: PUSH
73493: LD_VAR 0 3
73497: ARRAY
73498: PPUSH
73499: CALL 17413 0 3
73503: ST_TO_ADDR
// end ;
73504: GO 73162
73506: POP
73507: POP
// MC_Reset ( i , 124 ) ;
73508: LD_VAR 0 2
73512: PPUSH
73513: LD_INT 124
73515: PPUSH
73516: CALL 57369 0 2
// end ; end ;
73520: GO 72917
73522: POP
73523: POP
// end ;
73524: LD_VAR 0 1
73528: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
73529: LD_INT 0
73531: PPUSH
73532: PPUSH
73533: PPUSH
// if not mc_bases then
73534: LD_EXP 52
73538: NOT
73539: IFFALSE 73543
// exit ;
73541: GO 74149
// for i = 1 to mc_bases do
73543: LD_ADDR_VAR 0 2
73547: PUSH
73548: DOUBLE
73549: LD_INT 1
73551: DEC
73552: ST_TO_ADDR
73553: LD_EXP 52
73557: PUSH
73558: FOR_TO
73559: IFFALSE 74147
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
73561: LD_ADDR_VAR 0 3
73565: PUSH
73566: LD_EXP 52
73570: PUSH
73571: LD_VAR 0 2
73575: ARRAY
73576: PPUSH
73577: LD_INT 25
73579: PUSH
73580: LD_INT 4
73582: PUSH
73583: EMPTY
73584: LIST
73585: LIST
73586: PPUSH
73587: CALL_OW 72
73591: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
73592: LD_VAR 0 3
73596: NOT
73597: PUSH
73598: LD_EXP 89
73602: PUSH
73603: LD_VAR 0 2
73607: ARRAY
73608: NOT
73609: OR
73610: PUSH
73611: LD_EXP 52
73615: PUSH
73616: LD_VAR 0 2
73620: ARRAY
73621: PPUSH
73622: LD_INT 2
73624: PUSH
73625: LD_INT 30
73627: PUSH
73628: LD_INT 0
73630: PUSH
73631: EMPTY
73632: LIST
73633: LIST
73634: PUSH
73635: LD_INT 30
73637: PUSH
73638: LD_INT 1
73640: PUSH
73641: EMPTY
73642: LIST
73643: LIST
73644: PUSH
73645: EMPTY
73646: LIST
73647: LIST
73648: LIST
73649: PPUSH
73650: CALL_OW 72
73654: NOT
73655: OR
73656: IFFALSE 73706
// begin if mc_deposits_finder [ i ] then
73658: LD_EXP 90
73662: PUSH
73663: LD_VAR 0 2
73667: ARRAY
73668: IFFALSE 73704
// begin MC_Reset ( i , 125 ) ;
73670: LD_VAR 0 2
73674: PPUSH
73675: LD_INT 125
73677: PPUSH
73678: CALL 57369 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
73682: LD_ADDR_EXP 90
73686: PUSH
73687: LD_EXP 90
73691: PPUSH
73692: LD_VAR 0 2
73696: PPUSH
73697: EMPTY
73698: PPUSH
73699: CALL_OW 1
73703: ST_TO_ADDR
// end ; continue ;
73704: GO 73558
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
73706: LD_EXP 89
73710: PUSH
73711: LD_VAR 0 2
73715: ARRAY
73716: PUSH
73717: LD_INT 1
73719: ARRAY
73720: PUSH
73721: LD_INT 3
73723: ARRAY
73724: PUSH
73725: LD_INT 1
73727: EQUAL
73728: PUSH
73729: LD_INT 20
73731: PPUSH
73732: LD_EXP 78
73736: PUSH
73737: LD_VAR 0 2
73741: ARRAY
73742: PPUSH
73743: CALL_OW 321
73747: PUSH
73748: LD_INT 2
73750: NONEQUAL
73751: AND
73752: IFFALSE 73802
// begin if mc_deposits_finder [ i ] then
73754: LD_EXP 90
73758: PUSH
73759: LD_VAR 0 2
73763: ARRAY
73764: IFFALSE 73800
// begin MC_Reset ( i , 125 ) ;
73766: LD_VAR 0 2
73770: PPUSH
73771: LD_INT 125
73773: PPUSH
73774: CALL 57369 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
73778: LD_ADDR_EXP 90
73782: PUSH
73783: LD_EXP 90
73787: PPUSH
73788: LD_VAR 0 2
73792: PPUSH
73793: EMPTY
73794: PPUSH
73795: CALL_OW 1
73799: ST_TO_ADDR
// end ; continue ;
73800: GO 73558
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
73802: LD_EXP 89
73806: PUSH
73807: LD_VAR 0 2
73811: ARRAY
73812: PUSH
73813: LD_INT 1
73815: ARRAY
73816: PUSH
73817: LD_INT 1
73819: ARRAY
73820: PPUSH
73821: LD_EXP 89
73825: PUSH
73826: LD_VAR 0 2
73830: ARRAY
73831: PUSH
73832: LD_INT 1
73834: ARRAY
73835: PUSH
73836: LD_INT 2
73838: ARRAY
73839: PPUSH
73840: LD_EXP 78
73844: PUSH
73845: LD_VAR 0 2
73849: ARRAY
73850: PPUSH
73851: CALL_OW 440
73855: IFFALSE 73898
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
73857: LD_ADDR_EXP 89
73861: PUSH
73862: LD_EXP 89
73866: PPUSH
73867: LD_VAR 0 2
73871: PPUSH
73872: LD_EXP 89
73876: PUSH
73877: LD_VAR 0 2
73881: ARRAY
73882: PPUSH
73883: LD_INT 1
73885: PPUSH
73886: CALL_OW 3
73890: PPUSH
73891: CALL_OW 1
73895: ST_TO_ADDR
73896: GO 74145
// begin if not mc_deposits_finder [ i ] then
73898: LD_EXP 90
73902: PUSH
73903: LD_VAR 0 2
73907: ARRAY
73908: NOT
73909: IFFALSE 73961
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
73911: LD_ADDR_EXP 90
73915: PUSH
73916: LD_EXP 90
73920: PPUSH
73921: LD_VAR 0 2
73925: PPUSH
73926: LD_VAR 0 3
73930: PUSH
73931: LD_INT 1
73933: ARRAY
73934: PUSH
73935: EMPTY
73936: LIST
73937: PPUSH
73938: CALL_OW 1
73942: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
73943: LD_VAR 0 3
73947: PUSH
73948: LD_INT 1
73950: ARRAY
73951: PPUSH
73952: LD_INT 125
73954: PPUSH
73955: CALL_OW 109
// end else
73959: GO 74145
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
73961: LD_EXP 90
73965: PUSH
73966: LD_VAR 0 2
73970: ARRAY
73971: PUSH
73972: LD_INT 1
73974: ARRAY
73975: PPUSH
73976: CALL_OW 310
73980: IFFALSE 74003
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
73982: LD_EXP 90
73986: PUSH
73987: LD_VAR 0 2
73991: ARRAY
73992: PUSH
73993: LD_INT 1
73995: ARRAY
73996: PPUSH
73997: CALL_OW 122
74001: GO 74145
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
74003: LD_EXP 90
74007: PUSH
74008: LD_VAR 0 2
74012: ARRAY
74013: PUSH
74014: LD_INT 1
74016: ARRAY
74017: PPUSH
74018: CALL_OW 314
74022: NOT
74023: PUSH
74024: LD_EXP 90
74028: PUSH
74029: LD_VAR 0 2
74033: ARRAY
74034: PUSH
74035: LD_INT 1
74037: ARRAY
74038: PPUSH
74039: LD_EXP 89
74043: PUSH
74044: LD_VAR 0 2
74048: ARRAY
74049: PUSH
74050: LD_INT 1
74052: ARRAY
74053: PUSH
74054: LD_INT 1
74056: ARRAY
74057: PPUSH
74058: LD_EXP 89
74062: PUSH
74063: LD_VAR 0 2
74067: ARRAY
74068: PUSH
74069: LD_INT 1
74071: ARRAY
74072: PUSH
74073: LD_INT 2
74075: ARRAY
74076: PPUSH
74077: CALL_OW 297
74081: PUSH
74082: LD_INT 6
74084: GREATER
74085: AND
74086: IFFALSE 74145
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
74088: LD_EXP 90
74092: PUSH
74093: LD_VAR 0 2
74097: ARRAY
74098: PUSH
74099: LD_INT 1
74101: ARRAY
74102: PPUSH
74103: LD_EXP 89
74107: PUSH
74108: LD_VAR 0 2
74112: ARRAY
74113: PUSH
74114: LD_INT 1
74116: ARRAY
74117: PUSH
74118: LD_INT 1
74120: ARRAY
74121: PPUSH
74122: LD_EXP 89
74126: PUSH
74127: LD_VAR 0 2
74131: ARRAY
74132: PUSH
74133: LD_INT 1
74135: ARRAY
74136: PUSH
74137: LD_INT 2
74139: ARRAY
74140: PPUSH
74141: CALL_OW 111
// end ; end ; end ;
74145: GO 73558
74147: POP
74148: POP
// end ;
74149: LD_VAR 0 1
74153: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
74154: LD_INT 0
74156: PPUSH
74157: PPUSH
74158: PPUSH
74159: PPUSH
74160: PPUSH
74161: PPUSH
74162: PPUSH
74163: PPUSH
74164: PPUSH
74165: PPUSH
74166: PPUSH
// if not mc_bases then
74167: LD_EXP 52
74171: NOT
74172: IFFALSE 74176
// exit ;
74174: GO 74900
// for i = 1 to mc_bases do
74176: LD_ADDR_VAR 0 2
74180: PUSH
74181: DOUBLE
74182: LD_INT 1
74184: DEC
74185: ST_TO_ADDR
74186: LD_EXP 52
74190: PUSH
74191: FOR_TO
74192: IFFALSE 74898
// begin if not mc_bases [ i ] then
74194: LD_EXP 52
74198: PUSH
74199: LD_VAR 0 2
74203: ARRAY
74204: NOT
74205: IFFALSE 74209
// continue ;
74207: GO 74191
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
74209: LD_ADDR_VAR 0 7
74213: PUSH
74214: LD_EXP 52
74218: PUSH
74219: LD_VAR 0 2
74223: ARRAY
74224: PUSH
74225: LD_INT 1
74227: ARRAY
74228: PPUSH
74229: CALL_OW 248
74233: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
74234: LD_VAR 0 7
74238: PUSH
74239: LD_INT 3
74241: EQUAL
74242: PUSH
74243: LD_EXP 71
74247: PUSH
74248: LD_VAR 0 2
74252: ARRAY
74253: PUSH
74254: LD_EXP 74
74258: PUSH
74259: LD_VAR 0 2
74263: ARRAY
74264: UNION
74265: PPUSH
74266: LD_INT 33
74268: PUSH
74269: LD_INT 2
74271: PUSH
74272: EMPTY
74273: LIST
74274: LIST
74275: PPUSH
74276: CALL_OW 72
74280: NOT
74281: OR
74282: IFFALSE 74286
// continue ;
74284: GO 74191
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
74286: LD_ADDR_VAR 0 9
74290: PUSH
74291: LD_EXP 52
74295: PUSH
74296: LD_VAR 0 2
74300: ARRAY
74301: PPUSH
74302: LD_INT 30
74304: PUSH
74305: LD_INT 36
74307: PUSH
74308: EMPTY
74309: LIST
74310: LIST
74311: PPUSH
74312: CALL_OW 72
74316: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
74317: LD_ADDR_VAR 0 10
74321: PUSH
74322: LD_EXP 71
74326: PUSH
74327: LD_VAR 0 2
74331: ARRAY
74332: PPUSH
74333: LD_INT 34
74335: PUSH
74336: LD_INT 31
74338: PUSH
74339: EMPTY
74340: LIST
74341: LIST
74342: PPUSH
74343: CALL_OW 72
74347: ST_TO_ADDR
// if not cts and not mcts then
74348: LD_VAR 0 9
74352: NOT
74353: PUSH
74354: LD_VAR 0 10
74358: NOT
74359: AND
74360: IFFALSE 74364
// continue ;
74362: GO 74191
// x := cts ;
74364: LD_ADDR_VAR 0 11
74368: PUSH
74369: LD_VAR 0 9
74373: ST_TO_ADDR
// if not x then
74374: LD_VAR 0 11
74378: NOT
74379: IFFALSE 74391
// x := mcts ;
74381: LD_ADDR_VAR 0 11
74385: PUSH
74386: LD_VAR 0 10
74390: ST_TO_ADDR
// if mc_remote_driver [ i ] then
74391: LD_EXP 92
74395: PUSH
74396: LD_VAR 0 2
74400: ARRAY
74401: IFFALSE 74670
// for j in mc_remote_driver [ i ] do
74403: LD_ADDR_VAR 0 3
74407: PUSH
74408: LD_EXP 92
74412: PUSH
74413: LD_VAR 0 2
74417: ARRAY
74418: PUSH
74419: FOR_IN
74420: IFFALSE 74668
// begin if GetClass ( j ) <> 3 then
74422: LD_VAR 0 3
74426: PPUSH
74427: CALL_OW 257
74431: PUSH
74432: LD_INT 3
74434: NONEQUAL
74435: IFFALSE 74488
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
74437: LD_ADDR_EXP 92
74441: PUSH
74442: LD_EXP 92
74446: PPUSH
74447: LD_VAR 0 2
74451: PPUSH
74452: LD_EXP 92
74456: PUSH
74457: LD_VAR 0 2
74461: ARRAY
74462: PUSH
74463: LD_VAR 0 3
74467: DIFF
74468: PPUSH
74469: CALL_OW 1
74473: ST_TO_ADDR
// SetTag ( j , 0 ) ;
74474: LD_VAR 0 3
74478: PPUSH
74479: LD_INT 0
74481: PPUSH
74482: CALL_OW 109
// continue ;
74486: GO 74419
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
74488: LD_VAR 0 3
74492: PPUSH
74493: CALL_OW 310
74497: NOT
74498: PUSH
74499: LD_VAR 0 3
74503: PPUSH
74504: CALL_OW 310
74508: PPUSH
74509: CALL_OW 266
74513: PUSH
74514: LD_INT 36
74516: NONEQUAL
74517: PUSH
74518: LD_VAR 0 3
74522: PPUSH
74523: CALL 50755 0 1
74527: NOT
74528: AND
74529: OR
74530: IFFALSE 74666
// begin if IsInUnit ( j ) then
74532: LD_VAR 0 3
74536: PPUSH
74537: CALL_OW 310
74541: IFFALSE 74552
// ComExitBuilding ( j ) ;
74543: LD_VAR 0 3
74547: PPUSH
74548: CALL_OW 122
// ct := 0 ;
74552: LD_ADDR_VAR 0 8
74556: PUSH
74557: LD_INT 0
74559: ST_TO_ADDR
// for k in x do
74560: LD_ADDR_VAR 0 4
74564: PUSH
74565: LD_VAR 0 11
74569: PUSH
74570: FOR_IN
74571: IFFALSE 74644
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
74573: LD_VAR 0 4
74577: PPUSH
74578: CALL_OW 264
74582: PUSH
74583: LD_INT 31
74585: EQUAL
74586: PUSH
74587: LD_VAR 0 4
74591: PPUSH
74592: CALL_OW 311
74596: NOT
74597: AND
74598: PUSH
74599: LD_VAR 0 4
74603: PPUSH
74604: CALL_OW 266
74608: PUSH
74609: LD_INT 36
74611: EQUAL
74612: PUSH
74613: LD_VAR 0 4
74617: PPUSH
74618: CALL_OW 313
74622: PUSH
74623: LD_INT 3
74625: LESS
74626: AND
74627: OR
74628: IFFALSE 74642
// begin ct := k ;
74630: LD_ADDR_VAR 0 8
74634: PUSH
74635: LD_VAR 0 4
74639: ST_TO_ADDR
// break ;
74640: GO 74644
// end ;
74642: GO 74570
74644: POP
74645: POP
// if ct then
74646: LD_VAR 0 8
74650: IFFALSE 74666
// ComEnterUnit ( j , ct ) ;
74652: LD_VAR 0 3
74656: PPUSH
74657: LD_VAR 0 8
74661: PPUSH
74662: CALL_OW 120
// end ; end ;
74666: GO 74419
74668: POP
74669: POP
// places := 0 ;
74670: LD_ADDR_VAR 0 5
74674: PUSH
74675: LD_INT 0
74677: ST_TO_ADDR
// for j = 1 to x do
74678: LD_ADDR_VAR 0 3
74682: PUSH
74683: DOUBLE
74684: LD_INT 1
74686: DEC
74687: ST_TO_ADDR
74688: LD_VAR 0 11
74692: PUSH
74693: FOR_TO
74694: IFFALSE 74749
// if GetWeapon ( x [ j ] ) = ar_control_tower then
74696: LD_VAR 0 11
74700: PUSH
74701: LD_VAR 0 3
74705: ARRAY
74706: PPUSH
74707: CALL_OW 264
74711: PUSH
74712: LD_INT 31
74714: EQUAL
74715: IFFALSE 74733
// places := places + 1 else
74717: LD_ADDR_VAR 0 5
74721: PUSH
74722: LD_VAR 0 5
74726: PUSH
74727: LD_INT 1
74729: PLUS
74730: ST_TO_ADDR
74731: GO 74747
// places := places + 3 ;
74733: LD_ADDR_VAR 0 5
74737: PUSH
74738: LD_VAR 0 5
74742: PUSH
74743: LD_INT 3
74745: PLUS
74746: ST_TO_ADDR
74747: GO 74693
74749: POP
74750: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
74751: LD_ADDR_VAR 0 6
74755: PUSH
74756: LD_EXP 52
74760: PUSH
74761: LD_VAR 0 2
74765: ARRAY
74766: PPUSH
74767: LD_INT 25
74769: PUSH
74770: LD_INT 3
74772: PUSH
74773: EMPTY
74774: LIST
74775: LIST
74776: PPUSH
74777: CALL_OW 72
74781: PUSH
74782: LD_EXP 92
74786: PUSH
74787: LD_VAR 0 2
74791: ARRAY
74792: DIFF
74793: PPUSH
74794: LD_INT 3
74796: PPUSH
74797: CALL 51655 0 2
74801: ST_TO_ADDR
// if not tmp then
74802: LD_VAR 0 6
74806: NOT
74807: IFFALSE 74811
// continue ;
74809: GO 74191
// places := places - mc_remote_driver [ i ] ;
74811: LD_ADDR_VAR 0 5
74815: PUSH
74816: LD_VAR 0 5
74820: PUSH
74821: LD_EXP 92
74825: PUSH
74826: LD_VAR 0 2
74830: ARRAY
74831: MINUS
74832: ST_TO_ADDR
// if places then
74833: LD_VAR 0 5
74837: IFFALSE 74896
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
74839: LD_ADDR_EXP 92
74843: PUSH
74844: LD_EXP 92
74848: PPUSH
74849: LD_VAR 0 2
74853: PPUSH
74854: LD_EXP 92
74858: PUSH
74859: LD_VAR 0 2
74863: ARRAY
74864: PUSH
74865: LD_VAR 0 6
74869: PUSH
74870: LD_INT 1
74872: ARRAY
74873: UNION
74874: PPUSH
74875: CALL_OW 1
74879: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
74880: LD_VAR 0 6
74884: PUSH
74885: LD_INT 1
74887: ARRAY
74888: PPUSH
74889: LD_INT 126
74891: PPUSH
74892: CALL_OW 109
// end ; end ;
74896: GO 74191
74898: POP
74899: POP
// end ;
74900: LD_VAR 0 1
74904: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
74905: LD_INT 0
74907: PPUSH
74908: PPUSH
74909: PPUSH
74910: PPUSH
74911: PPUSH
74912: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
74913: LD_VAR 0 1
74917: NOT
74918: PUSH
74919: LD_VAR 0 2
74923: NOT
74924: OR
74925: PUSH
74926: LD_VAR 0 3
74930: NOT
74931: OR
74932: PUSH
74933: LD_VAR 0 4
74937: PUSH
74938: LD_INT 1
74940: PUSH
74941: LD_INT 2
74943: PUSH
74944: LD_INT 3
74946: PUSH
74947: LD_INT 4
74949: PUSH
74950: LD_INT 5
74952: PUSH
74953: LD_INT 8
74955: PUSH
74956: LD_INT 9
74958: PUSH
74959: LD_INT 15
74961: PUSH
74962: LD_INT 16
74964: PUSH
74965: EMPTY
74966: LIST
74967: LIST
74968: LIST
74969: LIST
74970: LIST
74971: LIST
74972: LIST
74973: LIST
74974: LIST
74975: IN
74976: NOT
74977: OR
74978: IFFALSE 74982
// exit ;
74980: GO 75882
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
74982: LD_ADDR_VAR 0 2
74986: PUSH
74987: LD_VAR 0 2
74991: PPUSH
74992: LD_INT 21
74994: PUSH
74995: LD_INT 3
74997: PUSH
74998: EMPTY
74999: LIST
75000: LIST
75001: PUSH
75002: LD_INT 24
75004: PUSH
75005: LD_INT 250
75007: PUSH
75008: EMPTY
75009: LIST
75010: LIST
75011: PUSH
75012: EMPTY
75013: LIST
75014: LIST
75015: PPUSH
75016: CALL_OW 72
75020: ST_TO_ADDR
// case class of 1 , 15 :
75021: LD_VAR 0 4
75025: PUSH
75026: LD_INT 1
75028: DOUBLE
75029: EQUAL
75030: IFTRUE 75040
75032: LD_INT 15
75034: DOUBLE
75035: EQUAL
75036: IFTRUE 75040
75038: GO 75125
75040: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
75041: LD_ADDR_VAR 0 8
75045: PUSH
75046: LD_VAR 0 2
75050: PPUSH
75051: LD_INT 2
75053: PUSH
75054: LD_INT 30
75056: PUSH
75057: LD_INT 32
75059: PUSH
75060: EMPTY
75061: LIST
75062: LIST
75063: PUSH
75064: LD_INT 30
75066: PUSH
75067: LD_INT 31
75069: PUSH
75070: EMPTY
75071: LIST
75072: LIST
75073: PUSH
75074: EMPTY
75075: LIST
75076: LIST
75077: LIST
75078: PPUSH
75079: CALL_OW 72
75083: PUSH
75084: LD_VAR 0 2
75088: PPUSH
75089: LD_INT 2
75091: PUSH
75092: LD_INT 30
75094: PUSH
75095: LD_INT 4
75097: PUSH
75098: EMPTY
75099: LIST
75100: LIST
75101: PUSH
75102: LD_INT 30
75104: PUSH
75105: LD_INT 5
75107: PUSH
75108: EMPTY
75109: LIST
75110: LIST
75111: PUSH
75112: EMPTY
75113: LIST
75114: LIST
75115: LIST
75116: PPUSH
75117: CALL_OW 72
75121: ADD
75122: ST_TO_ADDR
75123: GO 75371
75125: LD_INT 2
75127: DOUBLE
75128: EQUAL
75129: IFTRUE 75139
75131: LD_INT 16
75133: DOUBLE
75134: EQUAL
75135: IFTRUE 75139
75137: GO 75185
75139: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
75140: LD_ADDR_VAR 0 8
75144: PUSH
75145: LD_VAR 0 2
75149: PPUSH
75150: LD_INT 2
75152: PUSH
75153: LD_INT 30
75155: PUSH
75156: LD_INT 0
75158: PUSH
75159: EMPTY
75160: LIST
75161: LIST
75162: PUSH
75163: LD_INT 30
75165: PUSH
75166: LD_INT 1
75168: PUSH
75169: EMPTY
75170: LIST
75171: LIST
75172: PUSH
75173: EMPTY
75174: LIST
75175: LIST
75176: LIST
75177: PPUSH
75178: CALL_OW 72
75182: ST_TO_ADDR
75183: GO 75371
75185: LD_INT 3
75187: DOUBLE
75188: EQUAL
75189: IFTRUE 75193
75191: GO 75239
75193: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
75194: LD_ADDR_VAR 0 8
75198: PUSH
75199: LD_VAR 0 2
75203: PPUSH
75204: LD_INT 2
75206: PUSH
75207: LD_INT 30
75209: PUSH
75210: LD_INT 2
75212: PUSH
75213: EMPTY
75214: LIST
75215: LIST
75216: PUSH
75217: LD_INT 30
75219: PUSH
75220: LD_INT 3
75222: PUSH
75223: EMPTY
75224: LIST
75225: LIST
75226: PUSH
75227: EMPTY
75228: LIST
75229: LIST
75230: LIST
75231: PPUSH
75232: CALL_OW 72
75236: ST_TO_ADDR
75237: GO 75371
75239: LD_INT 4
75241: DOUBLE
75242: EQUAL
75243: IFTRUE 75247
75245: GO 75304
75247: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
75248: LD_ADDR_VAR 0 8
75252: PUSH
75253: LD_VAR 0 2
75257: PPUSH
75258: LD_INT 2
75260: PUSH
75261: LD_INT 30
75263: PUSH
75264: LD_INT 6
75266: PUSH
75267: EMPTY
75268: LIST
75269: LIST
75270: PUSH
75271: LD_INT 30
75273: PUSH
75274: LD_INT 7
75276: PUSH
75277: EMPTY
75278: LIST
75279: LIST
75280: PUSH
75281: LD_INT 30
75283: PUSH
75284: LD_INT 8
75286: PUSH
75287: EMPTY
75288: LIST
75289: LIST
75290: PUSH
75291: EMPTY
75292: LIST
75293: LIST
75294: LIST
75295: LIST
75296: PPUSH
75297: CALL_OW 72
75301: ST_TO_ADDR
75302: GO 75371
75304: LD_INT 5
75306: DOUBLE
75307: EQUAL
75308: IFTRUE 75324
75310: LD_INT 8
75312: DOUBLE
75313: EQUAL
75314: IFTRUE 75324
75316: LD_INT 9
75318: DOUBLE
75319: EQUAL
75320: IFTRUE 75324
75322: GO 75370
75324: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
75325: LD_ADDR_VAR 0 8
75329: PUSH
75330: LD_VAR 0 2
75334: PPUSH
75335: LD_INT 2
75337: PUSH
75338: LD_INT 30
75340: PUSH
75341: LD_INT 4
75343: PUSH
75344: EMPTY
75345: LIST
75346: LIST
75347: PUSH
75348: LD_INT 30
75350: PUSH
75351: LD_INT 5
75353: PUSH
75354: EMPTY
75355: LIST
75356: LIST
75357: PUSH
75358: EMPTY
75359: LIST
75360: LIST
75361: LIST
75362: PPUSH
75363: CALL_OW 72
75367: ST_TO_ADDR
75368: GO 75371
75370: POP
// if not tmp then
75371: LD_VAR 0 8
75375: NOT
75376: IFFALSE 75380
// exit ;
75378: GO 75882
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
75380: LD_VAR 0 4
75384: PUSH
75385: LD_INT 1
75387: PUSH
75388: LD_INT 15
75390: PUSH
75391: EMPTY
75392: LIST
75393: LIST
75394: IN
75395: PUSH
75396: LD_EXP 61
75400: PUSH
75401: LD_VAR 0 1
75405: ARRAY
75406: AND
75407: IFFALSE 75563
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
75409: LD_ADDR_VAR 0 9
75413: PUSH
75414: LD_EXP 61
75418: PUSH
75419: LD_VAR 0 1
75423: ARRAY
75424: PUSH
75425: LD_INT 1
75427: ARRAY
75428: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
75429: LD_VAR 0 9
75433: PUSH
75434: LD_EXP 62
75438: PUSH
75439: LD_VAR 0 1
75443: ARRAY
75444: IN
75445: NOT
75446: IFFALSE 75561
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
75448: LD_ADDR_EXP 62
75452: PUSH
75453: LD_EXP 62
75457: PPUSH
75458: LD_VAR 0 1
75462: PUSH
75463: LD_EXP 62
75467: PUSH
75468: LD_VAR 0 1
75472: ARRAY
75473: PUSH
75474: LD_INT 1
75476: PLUS
75477: PUSH
75478: EMPTY
75479: LIST
75480: LIST
75481: PPUSH
75482: LD_VAR 0 9
75486: PPUSH
75487: CALL 17413 0 3
75491: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
75492: LD_ADDR_EXP 61
75496: PUSH
75497: LD_EXP 61
75501: PPUSH
75502: LD_VAR 0 1
75506: PPUSH
75507: LD_EXP 61
75511: PUSH
75512: LD_VAR 0 1
75516: ARRAY
75517: PUSH
75518: LD_VAR 0 9
75522: DIFF
75523: PPUSH
75524: CALL_OW 1
75528: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
75529: LD_VAR 0 3
75533: PPUSH
75534: LD_EXP 62
75538: PUSH
75539: LD_VAR 0 1
75543: ARRAY
75544: PUSH
75545: LD_EXP 62
75549: PUSH
75550: LD_VAR 0 1
75554: ARRAY
75555: ARRAY
75556: PPUSH
75557: CALL_OW 120
// end ; exit ;
75561: GO 75882
// end ; if tmp > 1 then
75563: LD_VAR 0 8
75567: PUSH
75568: LD_INT 1
75570: GREATER
75571: IFFALSE 75675
// for i = 2 to tmp do
75573: LD_ADDR_VAR 0 6
75577: PUSH
75578: DOUBLE
75579: LD_INT 2
75581: DEC
75582: ST_TO_ADDR
75583: LD_VAR 0 8
75587: PUSH
75588: FOR_TO
75589: IFFALSE 75673
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
75591: LD_VAR 0 8
75595: PUSH
75596: LD_VAR 0 6
75600: ARRAY
75601: PPUSH
75602: CALL_OW 461
75606: PUSH
75607: LD_INT 6
75609: EQUAL
75610: IFFALSE 75671
// begin x := tmp [ i ] ;
75612: LD_ADDR_VAR 0 9
75616: PUSH
75617: LD_VAR 0 8
75621: PUSH
75622: LD_VAR 0 6
75626: ARRAY
75627: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
75628: LD_ADDR_VAR 0 8
75632: PUSH
75633: LD_VAR 0 8
75637: PPUSH
75638: LD_VAR 0 6
75642: PPUSH
75643: CALL_OW 3
75647: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
75648: LD_ADDR_VAR 0 8
75652: PUSH
75653: LD_VAR 0 8
75657: PPUSH
75658: LD_INT 1
75660: PPUSH
75661: LD_VAR 0 9
75665: PPUSH
75666: CALL_OW 2
75670: ST_TO_ADDR
// end ;
75671: GO 75588
75673: POP
75674: POP
// for i in tmp do
75675: LD_ADDR_VAR 0 6
75679: PUSH
75680: LD_VAR 0 8
75684: PUSH
75685: FOR_IN
75686: IFFALSE 75755
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
75688: LD_VAR 0 6
75692: PPUSH
75693: CALL_OW 313
75697: PUSH
75698: LD_INT 6
75700: LESS
75701: PUSH
75702: LD_VAR 0 6
75706: PPUSH
75707: CALL_OW 266
75711: PUSH
75712: LD_INT 31
75714: PUSH
75715: LD_INT 32
75717: PUSH
75718: EMPTY
75719: LIST
75720: LIST
75721: IN
75722: NOT
75723: AND
75724: PUSH
75725: LD_VAR 0 6
75729: PPUSH
75730: CALL_OW 313
75734: PUSH
75735: LD_INT 0
75737: EQUAL
75738: OR
75739: IFFALSE 75753
// begin j := i ;
75741: LD_ADDR_VAR 0 7
75745: PUSH
75746: LD_VAR 0 6
75750: ST_TO_ADDR
// break ;
75751: GO 75755
// end ; end ;
75753: GO 75685
75755: POP
75756: POP
// if j then
75757: LD_VAR 0 7
75761: IFFALSE 75779
// ComEnterUnit ( unit , j ) else
75763: LD_VAR 0 3
75767: PPUSH
75768: LD_VAR 0 7
75772: PPUSH
75773: CALL_OW 120
75777: GO 75882
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
75779: LD_ADDR_VAR 0 10
75783: PUSH
75784: LD_VAR 0 2
75788: PPUSH
75789: LD_INT 2
75791: PUSH
75792: LD_INT 30
75794: PUSH
75795: LD_INT 0
75797: PUSH
75798: EMPTY
75799: LIST
75800: LIST
75801: PUSH
75802: LD_INT 30
75804: PUSH
75805: LD_INT 1
75807: PUSH
75808: EMPTY
75809: LIST
75810: LIST
75811: PUSH
75812: EMPTY
75813: LIST
75814: LIST
75815: LIST
75816: PPUSH
75817: CALL_OW 72
75821: ST_TO_ADDR
// if depot then
75822: LD_VAR 0 10
75826: IFFALSE 75882
// begin depot := NearestUnitToUnit ( depot , unit ) ;
75828: LD_ADDR_VAR 0 10
75832: PUSH
75833: LD_VAR 0 10
75837: PPUSH
75838: LD_VAR 0 3
75842: PPUSH
75843: CALL_OW 74
75847: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
75848: LD_VAR 0 3
75852: PPUSH
75853: LD_VAR 0 10
75857: PPUSH
75858: CALL_OW 296
75862: PUSH
75863: LD_INT 10
75865: GREATER
75866: IFFALSE 75882
// ComStandNearbyBuilding ( unit , depot ) ;
75868: LD_VAR 0 3
75872: PPUSH
75873: LD_VAR 0 10
75877: PPUSH
75878: CALL 12120 0 2
// end ; end ; end ;
75882: LD_VAR 0 5
75886: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
75887: LD_INT 0
75889: PPUSH
75890: PPUSH
75891: PPUSH
75892: PPUSH
// if not mc_bases then
75893: LD_EXP 52
75897: NOT
75898: IFFALSE 75902
// exit ;
75900: GO 76141
// for i = 1 to mc_bases do
75902: LD_ADDR_VAR 0 2
75906: PUSH
75907: DOUBLE
75908: LD_INT 1
75910: DEC
75911: ST_TO_ADDR
75912: LD_EXP 52
75916: PUSH
75917: FOR_TO
75918: IFFALSE 76139
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
75920: LD_ADDR_VAR 0 4
75924: PUSH
75925: LD_EXP 52
75929: PUSH
75930: LD_VAR 0 2
75934: ARRAY
75935: PPUSH
75936: LD_INT 21
75938: PUSH
75939: LD_INT 1
75941: PUSH
75942: EMPTY
75943: LIST
75944: LIST
75945: PPUSH
75946: CALL_OW 72
75950: PUSH
75951: LD_EXP 81
75955: PUSH
75956: LD_VAR 0 2
75960: ARRAY
75961: UNION
75962: ST_TO_ADDR
// if not tmp then
75963: LD_VAR 0 4
75967: NOT
75968: IFFALSE 75972
// continue ;
75970: GO 75917
// for j in tmp do
75972: LD_ADDR_VAR 0 3
75976: PUSH
75977: LD_VAR 0 4
75981: PUSH
75982: FOR_IN
75983: IFFALSE 76135
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
75985: LD_VAR 0 3
75989: PPUSH
75990: CALL_OW 110
75994: NOT
75995: PUSH
75996: LD_VAR 0 3
76000: PPUSH
76001: CALL_OW 314
76005: NOT
76006: AND
76007: PUSH
76008: LD_VAR 0 3
76012: PPUSH
76013: CALL_OW 311
76017: NOT
76018: AND
76019: PUSH
76020: LD_VAR 0 3
76024: PPUSH
76025: CALL_OW 310
76029: NOT
76030: AND
76031: PUSH
76032: LD_VAR 0 3
76036: PUSH
76037: LD_EXP 55
76041: PUSH
76042: LD_VAR 0 2
76046: ARRAY
76047: PUSH
76048: LD_INT 1
76050: ARRAY
76051: IN
76052: NOT
76053: AND
76054: PUSH
76055: LD_VAR 0 3
76059: PUSH
76060: LD_EXP 55
76064: PUSH
76065: LD_VAR 0 2
76069: ARRAY
76070: PUSH
76071: LD_INT 2
76073: ARRAY
76074: IN
76075: NOT
76076: AND
76077: PUSH
76078: LD_VAR 0 3
76082: PUSH
76083: LD_EXP 64
76087: PUSH
76088: LD_VAR 0 2
76092: ARRAY
76093: IN
76094: NOT
76095: AND
76096: IFFALSE 76133
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
76098: LD_VAR 0 2
76102: PPUSH
76103: LD_EXP 52
76107: PUSH
76108: LD_VAR 0 2
76112: ARRAY
76113: PPUSH
76114: LD_VAR 0 3
76118: PPUSH
76119: LD_VAR 0 3
76123: PPUSH
76124: CALL_OW 257
76128: PPUSH
76129: CALL 74905 0 4
// end ;
76133: GO 75982
76135: POP
76136: POP
// end ;
76137: GO 75917
76139: POP
76140: POP
// end ;
76141: LD_VAR 0 1
76145: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
76146: LD_INT 0
76148: PPUSH
76149: PPUSH
76150: PPUSH
76151: PPUSH
76152: PPUSH
76153: PPUSH
// if not mc_bases [ base ] then
76154: LD_EXP 52
76158: PUSH
76159: LD_VAR 0 1
76163: ARRAY
76164: NOT
76165: IFFALSE 76169
// exit ;
76167: GO 76351
// tmp := [ ] ;
76169: LD_ADDR_VAR 0 6
76173: PUSH
76174: EMPTY
76175: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
76176: LD_ADDR_VAR 0 7
76180: PUSH
76181: LD_VAR 0 3
76185: PPUSH
76186: LD_INT 0
76188: PPUSH
76189: CALL_OW 517
76193: ST_TO_ADDR
// if not list then
76194: LD_VAR 0 7
76198: NOT
76199: IFFALSE 76203
// exit ;
76201: GO 76351
// for i = 1 to amount do
76203: LD_ADDR_VAR 0 5
76207: PUSH
76208: DOUBLE
76209: LD_INT 1
76211: DEC
76212: ST_TO_ADDR
76213: LD_VAR 0 2
76217: PUSH
76218: FOR_TO
76219: IFFALSE 76299
// begin x := rand ( 1 , list [ 1 ] ) ;
76221: LD_ADDR_VAR 0 8
76225: PUSH
76226: LD_INT 1
76228: PPUSH
76229: LD_VAR 0 7
76233: PUSH
76234: LD_INT 1
76236: ARRAY
76237: PPUSH
76238: CALL_OW 12
76242: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
76243: LD_ADDR_VAR 0 6
76247: PUSH
76248: LD_VAR 0 6
76252: PPUSH
76253: LD_VAR 0 5
76257: PPUSH
76258: LD_VAR 0 7
76262: PUSH
76263: LD_INT 1
76265: ARRAY
76266: PUSH
76267: LD_VAR 0 8
76271: ARRAY
76272: PUSH
76273: LD_VAR 0 7
76277: PUSH
76278: LD_INT 2
76280: ARRAY
76281: PUSH
76282: LD_VAR 0 8
76286: ARRAY
76287: PUSH
76288: EMPTY
76289: LIST
76290: LIST
76291: PPUSH
76292: CALL_OW 1
76296: ST_TO_ADDR
// end ;
76297: GO 76218
76299: POP
76300: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
76301: LD_ADDR_EXP 65
76305: PUSH
76306: LD_EXP 65
76310: PPUSH
76311: LD_VAR 0 1
76315: PPUSH
76316: LD_VAR 0 6
76320: PPUSH
76321: CALL_OW 1
76325: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
76326: LD_ADDR_EXP 67
76330: PUSH
76331: LD_EXP 67
76335: PPUSH
76336: LD_VAR 0 1
76340: PPUSH
76341: LD_VAR 0 3
76345: PPUSH
76346: CALL_OW 1
76350: ST_TO_ADDR
// end ;
76351: LD_VAR 0 4
76355: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
76356: LD_INT 0
76358: PPUSH
// if not mc_bases [ base ] then
76359: LD_EXP 52
76363: PUSH
76364: LD_VAR 0 1
76368: ARRAY
76369: NOT
76370: IFFALSE 76374
// exit ;
76372: GO 76399
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
76374: LD_ADDR_EXP 57
76378: PUSH
76379: LD_EXP 57
76383: PPUSH
76384: LD_VAR 0 1
76388: PPUSH
76389: LD_VAR 0 2
76393: PPUSH
76394: CALL_OW 1
76398: ST_TO_ADDR
// end ;
76399: LD_VAR 0 3
76403: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
76404: LD_INT 0
76406: PPUSH
// if not mc_bases [ base ] then
76407: LD_EXP 52
76411: PUSH
76412: LD_VAR 0 1
76416: ARRAY
76417: NOT
76418: IFFALSE 76422
// exit ;
76420: GO 76459
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
76422: LD_ADDR_EXP 57
76426: PUSH
76427: LD_EXP 57
76431: PPUSH
76432: LD_VAR 0 1
76436: PPUSH
76437: LD_EXP 57
76441: PUSH
76442: LD_VAR 0 1
76446: ARRAY
76447: PUSH
76448: LD_VAR 0 2
76452: UNION
76453: PPUSH
76454: CALL_OW 1
76458: ST_TO_ADDR
// end ;
76459: LD_VAR 0 3
76463: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
76464: LD_INT 0
76466: PPUSH
// if not mc_bases [ base ] then
76467: LD_EXP 52
76471: PUSH
76472: LD_VAR 0 1
76476: ARRAY
76477: NOT
76478: IFFALSE 76482
// exit ;
76480: GO 76507
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
76482: LD_ADDR_EXP 73
76486: PUSH
76487: LD_EXP 73
76491: PPUSH
76492: LD_VAR 0 1
76496: PPUSH
76497: LD_VAR 0 2
76501: PPUSH
76502: CALL_OW 1
76506: ST_TO_ADDR
// end ;
76507: LD_VAR 0 3
76511: RET
// export function MC_InsertProduceList ( base , components ) ; begin
76512: LD_INT 0
76514: PPUSH
// if not mc_bases [ base ] then
76515: LD_EXP 52
76519: PUSH
76520: LD_VAR 0 1
76524: ARRAY
76525: NOT
76526: IFFALSE 76530
// exit ;
76528: GO 76567
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
76530: LD_ADDR_EXP 73
76534: PUSH
76535: LD_EXP 73
76539: PPUSH
76540: LD_VAR 0 1
76544: PPUSH
76545: LD_EXP 73
76549: PUSH
76550: LD_VAR 0 1
76554: ARRAY
76555: PUSH
76556: LD_VAR 0 2
76560: ADD
76561: PPUSH
76562: CALL_OW 1
76566: ST_TO_ADDR
// end ;
76567: LD_VAR 0 3
76571: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
76572: LD_INT 0
76574: PPUSH
// if not mc_bases [ base ] then
76575: LD_EXP 52
76579: PUSH
76580: LD_VAR 0 1
76584: ARRAY
76585: NOT
76586: IFFALSE 76590
// exit ;
76588: GO 76644
// mc_defender := Replace ( mc_defender , base , deflist ) ;
76590: LD_ADDR_EXP 74
76594: PUSH
76595: LD_EXP 74
76599: PPUSH
76600: LD_VAR 0 1
76604: PPUSH
76605: LD_VAR 0 2
76609: PPUSH
76610: CALL_OW 1
76614: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
76615: LD_ADDR_EXP 63
76619: PUSH
76620: LD_EXP 63
76624: PPUSH
76625: LD_VAR 0 1
76629: PPUSH
76630: LD_VAR 0 2
76634: PUSH
76635: LD_INT 0
76637: PLUS
76638: PPUSH
76639: CALL_OW 1
76643: ST_TO_ADDR
// end ;
76644: LD_VAR 0 3
76648: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
76649: LD_INT 0
76651: PPUSH
// if not mc_bases [ base ] then
76652: LD_EXP 52
76656: PUSH
76657: LD_VAR 0 1
76661: ARRAY
76662: NOT
76663: IFFALSE 76667
// exit ;
76665: GO 76692
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
76667: LD_ADDR_EXP 63
76671: PUSH
76672: LD_EXP 63
76676: PPUSH
76677: LD_VAR 0 1
76681: PPUSH
76682: LD_VAR 0 2
76686: PPUSH
76687: CALL_OW 1
76691: ST_TO_ADDR
// end ;
76692: LD_VAR 0 3
76696: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
76697: LD_INT 0
76699: PPUSH
76700: PPUSH
76701: PPUSH
76702: PPUSH
// if not mc_bases [ base ] then
76703: LD_EXP 52
76707: PUSH
76708: LD_VAR 0 1
76712: ARRAY
76713: NOT
76714: IFFALSE 76718
// exit ;
76716: GO 76783
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
76718: LD_ADDR_EXP 72
76722: PUSH
76723: LD_EXP 72
76727: PPUSH
76728: LD_VAR 0 1
76732: PUSH
76733: LD_EXP 72
76737: PUSH
76738: LD_VAR 0 1
76742: ARRAY
76743: PUSH
76744: LD_INT 1
76746: PLUS
76747: PUSH
76748: EMPTY
76749: LIST
76750: LIST
76751: PPUSH
76752: LD_VAR 0 1
76756: PUSH
76757: LD_VAR 0 2
76761: PUSH
76762: LD_VAR 0 3
76766: PUSH
76767: LD_VAR 0 4
76771: PUSH
76772: EMPTY
76773: LIST
76774: LIST
76775: LIST
76776: LIST
76777: PPUSH
76778: CALL 17413 0 3
76782: ST_TO_ADDR
// end ;
76783: LD_VAR 0 5
76787: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
76788: LD_INT 0
76790: PPUSH
// if not mc_bases [ base ] then
76791: LD_EXP 52
76795: PUSH
76796: LD_VAR 0 1
76800: ARRAY
76801: NOT
76802: IFFALSE 76806
// exit ;
76804: GO 76831
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
76806: LD_ADDR_EXP 89
76810: PUSH
76811: LD_EXP 89
76815: PPUSH
76816: LD_VAR 0 1
76820: PPUSH
76821: LD_VAR 0 2
76825: PPUSH
76826: CALL_OW 1
76830: ST_TO_ADDR
// end ;
76831: LD_VAR 0 3
76835: RET
// export function MC_GetMinesField ( base ) ; begin
76836: LD_INT 0
76838: PPUSH
// result := mc_mines [ base ] ;
76839: LD_ADDR_VAR 0 2
76843: PUSH
76844: LD_EXP 65
76848: PUSH
76849: LD_VAR 0 1
76853: ARRAY
76854: ST_TO_ADDR
// end ;
76855: LD_VAR 0 2
76859: RET
// export function MC_GetProduceList ( base ) ; begin
76860: LD_INT 0
76862: PPUSH
// result := mc_produce [ base ] ;
76863: LD_ADDR_VAR 0 2
76867: PUSH
76868: LD_EXP 73
76872: PUSH
76873: LD_VAR 0 1
76877: ARRAY
76878: ST_TO_ADDR
// end ;
76879: LD_VAR 0 2
76883: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
76884: LD_INT 0
76886: PPUSH
76887: PPUSH
// if not mc_bases then
76888: LD_EXP 52
76892: NOT
76893: IFFALSE 76897
// exit ;
76895: GO 76962
// if mc_bases [ base ] then
76897: LD_EXP 52
76901: PUSH
76902: LD_VAR 0 1
76906: ARRAY
76907: IFFALSE 76962
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
76909: LD_ADDR_VAR 0 3
76913: PUSH
76914: LD_EXP 52
76918: PUSH
76919: LD_VAR 0 1
76923: ARRAY
76924: PPUSH
76925: LD_INT 30
76927: PUSH
76928: LD_VAR 0 2
76932: PUSH
76933: EMPTY
76934: LIST
76935: LIST
76936: PPUSH
76937: CALL_OW 72
76941: ST_TO_ADDR
// if result then
76942: LD_VAR 0 3
76946: IFFALSE 76962
// result := result [ 1 ] ;
76948: LD_ADDR_VAR 0 3
76952: PUSH
76953: LD_VAR 0 3
76957: PUSH
76958: LD_INT 1
76960: ARRAY
76961: ST_TO_ADDR
// end ; end ;
76962: LD_VAR 0 3
76966: RET
// export function MC_SetTame ( base , area ) ; begin
76967: LD_INT 0
76969: PPUSH
// if not mc_bases or not base then
76970: LD_EXP 52
76974: NOT
76975: PUSH
76976: LD_VAR 0 1
76980: NOT
76981: OR
76982: IFFALSE 76986
// exit ;
76984: GO 77011
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
76986: LD_ADDR_EXP 80
76990: PUSH
76991: LD_EXP 80
76995: PPUSH
76996: LD_VAR 0 1
77000: PPUSH
77001: LD_VAR 0 2
77005: PPUSH
77006: CALL_OW 1
77010: ST_TO_ADDR
// end ;
77011: LD_VAR 0 3
77015: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
77016: LD_INT 0
77018: PPUSH
77019: PPUSH
// if not mc_bases or not base then
77020: LD_EXP 52
77024: NOT
77025: PUSH
77026: LD_VAR 0 1
77030: NOT
77031: OR
77032: IFFALSE 77036
// exit ;
77034: GO 77138
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
77036: LD_ADDR_VAR 0 4
77040: PUSH
77041: LD_EXP 52
77045: PUSH
77046: LD_VAR 0 1
77050: ARRAY
77051: PPUSH
77052: LD_INT 30
77054: PUSH
77055: LD_VAR 0 2
77059: PUSH
77060: EMPTY
77061: LIST
77062: LIST
77063: PPUSH
77064: CALL_OW 72
77068: ST_TO_ADDR
// if not tmp then
77069: LD_VAR 0 4
77073: NOT
77074: IFFALSE 77078
// exit ;
77076: GO 77138
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
77078: LD_ADDR_EXP 84
77082: PUSH
77083: LD_EXP 84
77087: PPUSH
77088: LD_VAR 0 1
77092: PPUSH
77093: LD_EXP 84
77097: PUSH
77098: LD_VAR 0 1
77102: ARRAY
77103: PPUSH
77104: LD_EXP 84
77108: PUSH
77109: LD_VAR 0 1
77113: ARRAY
77114: PUSH
77115: LD_INT 1
77117: PLUS
77118: PPUSH
77119: LD_VAR 0 4
77123: PUSH
77124: LD_INT 1
77126: ARRAY
77127: PPUSH
77128: CALL_OW 2
77132: PPUSH
77133: CALL_OW 1
77137: ST_TO_ADDR
// end ;
77138: LD_VAR 0 3
77142: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
77143: LD_INT 0
77145: PPUSH
77146: PPUSH
// if not mc_bases or not base or not kinds then
77147: LD_EXP 52
77151: NOT
77152: PUSH
77153: LD_VAR 0 1
77157: NOT
77158: OR
77159: PUSH
77160: LD_VAR 0 2
77164: NOT
77165: OR
77166: IFFALSE 77170
// exit ;
77168: GO 77231
// for i in kinds do
77170: LD_ADDR_VAR 0 4
77174: PUSH
77175: LD_VAR 0 2
77179: PUSH
77180: FOR_IN
77181: IFFALSE 77229
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
77183: LD_ADDR_EXP 86
77187: PUSH
77188: LD_EXP 86
77192: PPUSH
77193: LD_VAR 0 1
77197: PUSH
77198: LD_EXP 86
77202: PUSH
77203: LD_VAR 0 1
77207: ARRAY
77208: PUSH
77209: LD_INT 1
77211: PLUS
77212: PUSH
77213: EMPTY
77214: LIST
77215: LIST
77216: PPUSH
77217: LD_VAR 0 4
77221: PPUSH
77222: CALL 17413 0 3
77226: ST_TO_ADDR
77227: GO 77180
77229: POP
77230: POP
// end ;
77231: LD_VAR 0 3
77235: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
77236: LD_INT 0
77238: PPUSH
// if not mc_bases or not base or not areas then
77239: LD_EXP 52
77243: NOT
77244: PUSH
77245: LD_VAR 0 1
77249: NOT
77250: OR
77251: PUSH
77252: LD_VAR 0 2
77256: NOT
77257: OR
77258: IFFALSE 77262
// exit ;
77260: GO 77287
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
77262: LD_ADDR_EXP 70
77266: PUSH
77267: LD_EXP 70
77271: PPUSH
77272: LD_VAR 0 1
77276: PPUSH
77277: LD_VAR 0 2
77281: PPUSH
77282: CALL_OW 1
77286: ST_TO_ADDR
// end ;
77287: LD_VAR 0 3
77291: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
77292: LD_INT 0
77294: PPUSH
// if not mc_bases or not base or not teleports_exit then
77295: LD_EXP 52
77299: NOT
77300: PUSH
77301: LD_VAR 0 1
77305: NOT
77306: OR
77307: PUSH
77308: LD_VAR 0 2
77312: NOT
77313: OR
77314: IFFALSE 77318
// exit ;
77316: GO 77343
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
77318: LD_ADDR_EXP 87
77322: PUSH
77323: LD_EXP 87
77327: PPUSH
77328: LD_VAR 0 1
77332: PPUSH
77333: LD_VAR 0 2
77337: PPUSH
77338: CALL_OW 1
77342: ST_TO_ADDR
// end ;
77343: LD_VAR 0 3
77347: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
77348: LD_INT 0
77350: PPUSH
77351: PPUSH
77352: PPUSH
// if not mc_bases or not base or not ext_list then
77353: LD_EXP 52
77357: NOT
77358: PUSH
77359: LD_VAR 0 1
77363: NOT
77364: OR
77365: PUSH
77366: LD_VAR 0 5
77370: NOT
77371: OR
77372: IFFALSE 77376
// exit ;
77374: GO 77549
// tmp := GetFacExtXYD ( x , y , d ) ;
77376: LD_ADDR_VAR 0 8
77380: PUSH
77381: LD_VAR 0 2
77385: PPUSH
77386: LD_VAR 0 3
77390: PPUSH
77391: LD_VAR 0 4
77395: PPUSH
77396: CALL 50785 0 3
77400: ST_TO_ADDR
// if not tmp then
77401: LD_VAR 0 8
77405: NOT
77406: IFFALSE 77410
// exit ;
77408: GO 77549
// for i in tmp do
77410: LD_ADDR_VAR 0 7
77414: PUSH
77415: LD_VAR 0 8
77419: PUSH
77420: FOR_IN
77421: IFFALSE 77547
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
77423: LD_ADDR_EXP 57
77427: PUSH
77428: LD_EXP 57
77432: PPUSH
77433: LD_VAR 0 1
77437: PPUSH
77438: LD_EXP 57
77442: PUSH
77443: LD_VAR 0 1
77447: ARRAY
77448: PPUSH
77449: LD_EXP 57
77453: PUSH
77454: LD_VAR 0 1
77458: ARRAY
77459: PUSH
77460: LD_INT 1
77462: PLUS
77463: PPUSH
77464: LD_VAR 0 5
77468: PUSH
77469: LD_INT 1
77471: ARRAY
77472: PUSH
77473: LD_VAR 0 7
77477: PUSH
77478: LD_INT 1
77480: ARRAY
77481: PUSH
77482: LD_VAR 0 7
77486: PUSH
77487: LD_INT 2
77489: ARRAY
77490: PUSH
77491: LD_VAR 0 7
77495: PUSH
77496: LD_INT 3
77498: ARRAY
77499: PUSH
77500: EMPTY
77501: LIST
77502: LIST
77503: LIST
77504: LIST
77505: PPUSH
77506: CALL_OW 2
77510: PPUSH
77511: CALL_OW 1
77515: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
77516: LD_ADDR_VAR 0 5
77520: PUSH
77521: LD_VAR 0 5
77525: PPUSH
77526: LD_INT 1
77528: PPUSH
77529: CALL_OW 3
77533: ST_TO_ADDR
// if not ext_list then
77534: LD_VAR 0 5
77538: NOT
77539: IFFALSE 77545
// exit ;
77541: POP
77542: POP
77543: GO 77549
// end ;
77545: GO 77420
77547: POP
77548: POP
// end ;
77549: LD_VAR 0 6
77553: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
77554: LD_INT 0
77556: PPUSH
// if not mc_bases or not base or not weapon_list then
77557: LD_EXP 52
77561: NOT
77562: PUSH
77563: LD_VAR 0 1
77567: NOT
77568: OR
77569: PUSH
77570: LD_VAR 0 2
77574: NOT
77575: OR
77576: IFFALSE 77580
// exit ;
77578: GO 77605
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
77580: LD_ADDR_EXP 91
77584: PUSH
77585: LD_EXP 91
77589: PPUSH
77590: LD_VAR 0 1
77594: PPUSH
77595: LD_VAR 0 2
77599: PPUSH
77600: CALL_OW 1
77604: ST_TO_ADDR
// end ;
77605: LD_VAR 0 3
77609: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
77610: LD_INT 0
77612: PPUSH
// if not mc_bases or not base or not tech_list then
77613: LD_EXP 52
77617: NOT
77618: PUSH
77619: LD_VAR 0 1
77623: NOT
77624: OR
77625: PUSH
77626: LD_VAR 0 2
77630: NOT
77631: OR
77632: IFFALSE 77636
// exit ;
77634: GO 77661
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
77636: LD_ADDR_EXP 79
77640: PUSH
77641: LD_EXP 79
77645: PPUSH
77646: LD_VAR 0 1
77650: PPUSH
77651: LD_VAR 0 2
77655: PPUSH
77656: CALL_OW 1
77660: ST_TO_ADDR
// end ;
77661: LD_VAR 0 3
77665: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
77666: LD_INT 0
77668: PPUSH
// if not mc_bases or not parking_area or not base then
77669: LD_EXP 52
77673: NOT
77674: PUSH
77675: LD_VAR 0 2
77679: NOT
77680: OR
77681: PUSH
77682: LD_VAR 0 1
77686: NOT
77687: OR
77688: IFFALSE 77692
// exit ;
77690: GO 77717
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
77692: LD_ADDR_EXP 76
77696: PUSH
77697: LD_EXP 76
77701: PPUSH
77702: LD_VAR 0 1
77706: PPUSH
77707: LD_VAR 0 2
77711: PPUSH
77712: CALL_OW 1
77716: ST_TO_ADDR
// end ;
77717: LD_VAR 0 3
77721: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
77722: LD_INT 0
77724: PPUSH
// if not mc_bases or not base or not scan_area then
77725: LD_EXP 52
77729: NOT
77730: PUSH
77731: LD_VAR 0 1
77735: NOT
77736: OR
77737: PUSH
77738: LD_VAR 0 2
77742: NOT
77743: OR
77744: IFFALSE 77748
// exit ;
77746: GO 77773
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
77748: LD_ADDR_EXP 77
77752: PUSH
77753: LD_EXP 77
77757: PPUSH
77758: LD_VAR 0 1
77762: PPUSH
77763: LD_VAR 0 2
77767: PPUSH
77768: CALL_OW 1
77772: ST_TO_ADDR
// end ;
77773: LD_VAR 0 3
77777: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
77778: LD_INT 0
77780: PPUSH
77781: PPUSH
// if not mc_bases or not base then
77782: LD_EXP 52
77786: NOT
77787: PUSH
77788: LD_VAR 0 1
77792: NOT
77793: OR
77794: IFFALSE 77798
// exit ;
77796: GO 77862
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
77798: LD_ADDR_VAR 0 3
77802: PUSH
77803: LD_INT 1
77805: PUSH
77806: LD_INT 2
77808: PUSH
77809: LD_INT 3
77811: PUSH
77812: LD_INT 4
77814: PUSH
77815: LD_INT 11
77817: PUSH
77818: EMPTY
77819: LIST
77820: LIST
77821: LIST
77822: LIST
77823: LIST
77824: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
77825: LD_ADDR_EXP 79
77829: PUSH
77830: LD_EXP 79
77834: PPUSH
77835: LD_VAR 0 1
77839: PPUSH
77840: LD_EXP 79
77844: PUSH
77845: LD_VAR 0 1
77849: ARRAY
77850: PUSH
77851: LD_VAR 0 3
77855: DIFF
77856: PPUSH
77857: CALL_OW 1
77861: ST_TO_ADDR
// end ;
77862: LD_VAR 0 2
77866: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
77867: LD_INT 0
77869: PPUSH
// result := mc_vehicles [ base ] ;
77870: LD_ADDR_VAR 0 3
77874: PUSH
77875: LD_EXP 71
77879: PUSH
77880: LD_VAR 0 1
77884: ARRAY
77885: ST_TO_ADDR
// if onlyCombat then
77886: LD_VAR 0 2
77890: IFFALSE 78055
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
77892: LD_ADDR_VAR 0 3
77896: PUSH
77897: LD_VAR 0 3
77901: PUSH
77902: LD_VAR 0 3
77906: PPUSH
77907: LD_INT 2
77909: PUSH
77910: LD_INT 34
77912: PUSH
77913: LD_INT 12
77915: PUSH
77916: EMPTY
77917: LIST
77918: LIST
77919: PUSH
77920: LD_INT 34
77922: PUSH
77923: LD_INT 51
77925: PUSH
77926: EMPTY
77927: LIST
77928: LIST
77929: PUSH
77930: LD_INT 34
77932: PUSH
77933: LD_EXP 46
77937: PUSH
77938: EMPTY
77939: LIST
77940: LIST
77941: PUSH
77942: LD_INT 34
77944: PUSH
77945: LD_INT 32
77947: PUSH
77948: EMPTY
77949: LIST
77950: LIST
77951: PUSH
77952: LD_INT 34
77954: PUSH
77955: LD_INT 13
77957: PUSH
77958: EMPTY
77959: LIST
77960: LIST
77961: PUSH
77962: LD_INT 34
77964: PUSH
77965: LD_INT 52
77967: PUSH
77968: EMPTY
77969: LIST
77970: LIST
77971: PUSH
77972: LD_INT 34
77974: PUSH
77975: LD_INT 14
77977: PUSH
77978: EMPTY
77979: LIST
77980: LIST
77981: PUSH
77982: LD_INT 34
77984: PUSH
77985: LD_INT 53
77987: PUSH
77988: EMPTY
77989: LIST
77990: LIST
77991: PUSH
77992: LD_INT 34
77994: PUSH
77995: LD_EXP 45
77999: PUSH
78000: EMPTY
78001: LIST
78002: LIST
78003: PUSH
78004: LD_INT 34
78006: PUSH
78007: LD_INT 31
78009: PUSH
78010: EMPTY
78011: LIST
78012: LIST
78013: PUSH
78014: LD_INT 34
78016: PUSH
78017: LD_INT 48
78019: PUSH
78020: EMPTY
78021: LIST
78022: LIST
78023: PUSH
78024: LD_INT 34
78026: PUSH
78027: LD_INT 8
78029: PUSH
78030: EMPTY
78031: LIST
78032: LIST
78033: PUSH
78034: EMPTY
78035: LIST
78036: LIST
78037: LIST
78038: LIST
78039: LIST
78040: LIST
78041: LIST
78042: LIST
78043: LIST
78044: LIST
78045: LIST
78046: LIST
78047: LIST
78048: PPUSH
78049: CALL_OW 72
78053: DIFF
78054: ST_TO_ADDR
// end ; end_of_file
78055: LD_VAR 0 3
78059: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
78060: LD_INT 0
78062: PPUSH
78063: PPUSH
78064: PPUSH
// if not mc_bases or not skirmish then
78065: LD_EXP 52
78069: NOT
78070: PUSH
78071: LD_EXP 50
78075: NOT
78076: OR
78077: IFFALSE 78081
// exit ;
78079: GO 78246
// for i = 1 to mc_bases do
78081: LD_ADDR_VAR 0 4
78085: PUSH
78086: DOUBLE
78087: LD_INT 1
78089: DEC
78090: ST_TO_ADDR
78091: LD_EXP 52
78095: PUSH
78096: FOR_TO
78097: IFFALSE 78244
// begin if sci in mc_bases [ i ] then
78099: LD_VAR 0 2
78103: PUSH
78104: LD_EXP 52
78108: PUSH
78109: LD_VAR 0 4
78113: ARRAY
78114: IN
78115: IFFALSE 78242
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
78117: LD_ADDR_EXP 81
78121: PUSH
78122: LD_EXP 81
78126: PPUSH
78127: LD_VAR 0 4
78131: PUSH
78132: LD_EXP 81
78136: PUSH
78137: LD_VAR 0 4
78141: ARRAY
78142: PUSH
78143: LD_INT 1
78145: PLUS
78146: PUSH
78147: EMPTY
78148: LIST
78149: LIST
78150: PPUSH
78151: LD_VAR 0 1
78155: PPUSH
78156: CALL 17413 0 3
78160: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
78161: LD_ADDR_VAR 0 5
78165: PUSH
78166: LD_EXP 52
78170: PUSH
78171: LD_VAR 0 4
78175: ARRAY
78176: PPUSH
78177: LD_INT 2
78179: PUSH
78180: LD_INT 30
78182: PUSH
78183: LD_INT 0
78185: PUSH
78186: EMPTY
78187: LIST
78188: LIST
78189: PUSH
78190: LD_INT 30
78192: PUSH
78193: LD_INT 1
78195: PUSH
78196: EMPTY
78197: LIST
78198: LIST
78199: PUSH
78200: EMPTY
78201: LIST
78202: LIST
78203: LIST
78204: PPUSH
78205: CALL_OW 72
78209: PPUSH
78210: LD_VAR 0 1
78214: PPUSH
78215: CALL_OW 74
78219: ST_TO_ADDR
// if tmp then
78220: LD_VAR 0 5
78224: IFFALSE 78240
// ComStandNearbyBuilding ( ape , tmp ) ;
78226: LD_VAR 0 1
78230: PPUSH
78231: LD_VAR 0 5
78235: PPUSH
78236: CALL 12120 0 2
// break ;
78240: GO 78244
// end ; end ;
78242: GO 78096
78244: POP
78245: POP
// end ;
78246: LD_VAR 0 3
78250: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
78251: LD_INT 0
78253: PPUSH
78254: PPUSH
78255: PPUSH
// if not mc_bases or not skirmish then
78256: LD_EXP 52
78260: NOT
78261: PUSH
78262: LD_EXP 50
78266: NOT
78267: OR
78268: IFFALSE 78272
// exit ;
78270: GO 78361
// for i = 1 to mc_bases do
78272: LD_ADDR_VAR 0 4
78276: PUSH
78277: DOUBLE
78278: LD_INT 1
78280: DEC
78281: ST_TO_ADDR
78282: LD_EXP 52
78286: PUSH
78287: FOR_TO
78288: IFFALSE 78359
// begin if building in mc_busy_turret_list [ i ] then
78290: LD_VAR 0 1
78294: PUSH
78295: LD_EXP 62
78299: PUSH
78300: LD_VAR 0 4
78304: ARRAY
78305: IN
78306: IFFALSE 78357
// begin tmp := mc_busy_turret_list [ i ] diff building ;
78308: LD_ADDR_VAR 0 5
78312: PUSH
78313: LD_EXP 62
78317: PUSH
78318: LD_VAR 0 4
78322: ARRAY
78323: PUSH
78324: LD_VAR 0 1
78328: DIFF
78329: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
78330: LD_ADDR_EXP 62
78334: PUSH
78335: LD_EXP 62
78339: PPUSH
78340: LD_VAR 0 4
78344: PPUSH
78345: LD_VAR 0 5
78349: PPUSH
78350: CALL_OW 1
78354: ST_TO_ADDR
// break ;
78355: GO 78359
// end ; end ;
78357: GO 78287
78359: POP
78360: POP
// end ;
78361: LD_VAR 0 3
78365: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
78366: LD_INT 0
78368: PPUSH
78369: PPUSH
78370: PPUSH
// if not mc_bases or not skirmish then
78371: LD_EXP 52
78375: NOT
78376: PUSH
78377: LD_EXP 50
78381: NOT
78382: OR
78383: IFFALSE 78387
// exit ;
78385: GO 78586
// for i = 1 to mc_bases do
78387: LD_ADDR_VAR 0 5
78391: PUSH
78392: DOUBLE
78393: LD_INT 1
78395: DEC
78396: ST_TO_ADDR
78397: LD_EXP 52
78401: PUSH
78402: FOR_TO
78403: IFFALSE 78584
// if building in mc_bases [ i ] then
78405: LD_VAR 0 1
78409: PUSH
78410: LD_EXP 52
78414: PUSH
78415: LD_VAR 0 5
78419: ARRAY
78420: IN
78421: IFFALSE 78582
// begin tmp := mc_bases [ i ] diff building ;
78423: LD_ADDR_VAR 0 6
78427: PUSH
78428: LD_EXP 52
78432: PUSH
78433: LD_VAR 0 5
78437: ARRAY
78438: PUSH
78439: LD_VAR 0 1
78443: DIFF
78444: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
78445: LD_ADDR_EXP 52
78449: PUSH
78450: LD_EXP 52
78454: PPUSH
78455: LD_VAR 0 5
78459: PPUSH
78460: LD_VAR 0 6
78464: PPUSH
78465: CALL_OW 1
78469: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
78470: LD_VAR 0 1
78474: PUSH
78475: LD_EXP 60
78479: PUSH
78480: LD_VAR 0 5
78484: ARRAY
78485: IN
78486: IFFALSE 78525
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
78488: LD_ADDR_EXP 60
78492: PUSH
78493: LD_EXP 60
78497: PPUSH
78498: LD_VAR 0 5
78502: PPUSH
78503: LD_EXP 60
78507: PUSH
78508: LD_VAR 0 5
78512: ARRAY
78513: PUSH
78514: LD_VAR 0 1
78518: DIFF
78519: PPUSH
78520: CALL_OW 1
78524: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
78525: LD_VAR 0 1
78529: PUSH
78530: LD_EXP 61
78534: PUSH
78535: LD_VAR 0 5
78539: ARRAY
78540: IN
78541: IFFALSE 78580
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
78543: LD_ADDR_EXP 61
78547: PUSH
78548: LD_EXP 61
78552: PPUSH
78553: LD_VAR 0 5
78557: PPUSH
78558: LD_EXP 61
78562: PUSH
78563: LD_VAR 0 5
78567: ARRAY
78568: PUSH
78569: LD_VAR 0 1
78573: DIFF
78574: PPUSH
78575: CALL_OW 1
78579: ST_TO_ADDR
// break ;
78580: GO 78584
// end ;
78582: GO 78402
78584: POP
78585: POP
// end ;
78586: LD_VAR 0 4
78590: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
78591: LD_INT 0
78593: PPUSH
78594: PPUSH
78595: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
78596: LD_EXP 52
78600: NOT
78601: PUSH
78602: LD_EXP 50
78606: NOT
78607: OR
78608: PUSH
78609: LD_VAR 0 3
78613: PUSH
78614: LD_EXP 78
78618: IN
78619: NOT
78620: OR
78621: IFFALSE 78625
// exit ;
78623: GO 78748
// for i = 1 to mc_vehicles do
78625: LD_ADDR_VAR 0 6
78629: PUSH
78630: DOUBLE
78631: LD_INT 1
78633: DEC
78634: ST_TO_ADDR
78635: LD_EXP 71
78639: PUSH
78640: FOR_TO
78641: IFFALSE 78746
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
78643: LD_VAR 0 2
78647: PUSH
78648: LD_EXP 71
78652: PUSH
78653: LD_VAR 0 6
78657: ARRAY
78658: IN
78659: PUSH
78660: LD_VAR 0 1
78664: PUSH
78665: LD_EXP 71
78669: PUSH
78670: LD_VAR 0 6
78674: ARRAY
78675: IN
78676: OR
78677: IFFALSE 78744
// begin tmp := mc_vehicles [ i ] diff old ;
78679: LD_ADDR_VAR 0 7
78683: PUSH
78684: LD_EXP 71
78688: PUSH
78689: LD_VAR 0 6
78693: ARRAY
78694: PUSH
78695: LD_VAR 0 2
78699: DIFF
78700: ST_TO_ADDR
// tmp := tmp diff new ;
78701: LD_ADDR_VAR 0 7
78705: PUSH
78706: LD_VAR 0 7
78710: PUSH
78711: LD_VAR 0 1
78715: DIFF
78716: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
78717: LD_ADDR_EXP 71
78721: PUSH
78722: LD_EXP 71
78726: PPUSH
78727: LD_VAR 0 6
78731: PPUSH
78732: LD_VAR 0 7
78736: PPUSH
78737: CALL_OW 1
78741: ST_TO_ADDR
// break ;
78742: GO 78746
// end ;
78744: GO 78640
78746: POP
78747: POP
// end ;
78748: LD_VAR 0 5
78752: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
78753: LD_INT 0
78755: PPUSH
78756: PPUSH
78757: PPUSH
78758: PPUSH
// if not mc_bases or not skirmish then
78759: LD_EXP 52
78763: NOT
78764: PUSH
78765: LD_EXP 50
78769: NOT
78770: OR
78771: IFFALSE 78775
// exit ;
78773: GO 79152
// side := GetSide ( vehicle ) ;
78775: LD_ADDR_VAR 0 5
78779: PUSH
78780: LD_VAR 0 1
78784: PPUSH
78785: CALL_OW 255
78789: ST_TO_ADDR
// for i = 1 to mc_bases do
78790: LD_ADDR_VAR 0 4
78794: PUSH
78795: DOUBLE
78796: LD_INT 1
78798: DEC
78799: ST_TO_ADDR
78800: LD_EXP 52
78804: PUSH
78805: FOR_TO
78806: IFFALSE 79150
// begin if factory in mc_bases [ i ] then
78808: LD_VAR 0 2
78812: PUSH
78813: LD_EXP 52
78817: PUSH
78818: LD_VAR 0 4
78822: ARRAY
78823: IN
78824: IFFALSE 79148
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
78826: LD_EXP 74
78830: PUSH
78831: LD_VAR 0 4
78835: ARRAY
78836: PUSH
78837: LD_EXP 63
78841: PUSH
78842: LD_VAR 0 4
78846: ARRAY
78847: LESS
78848: PUSH
78849: LD_VAR 0 1
78853: PPUSH
78854: CALL_OW 264
78858: PUSH
78859: LD_INT 31
78861: PUSH
78862: LD_INT 32
78864: PUSH
78865: LD_INT 51
78867: PUSH
78868: LD_EXP 46
78872: PUSH
78873: LD_INT 12
78875: PUSH
78876: LD_INT 30
78878: PUSH
78879: LD_EXP 45
78883: PUSH
78884: LD_INT 11
78886: PUSH
78887: LD_INT 53
78889: PUSH
78890: LD_INT 14
78892: PUSH
78893: LD_EXP 49
78897: PUSH
78898: LD_INT 29
78900: PUSH
78901: LD_EXP 47
78905: PUSH
78906: LD_INT 13
78908: PUSH
78909: LD_INT 52
78911: PUSH
78912: LD_INT 48
78914: PUSH
78915: LD_INT 8
78917: PUSH
78918: EMPTY
78919: LIST
78920: LIST
78921: LIST
78922: LIST
78923: LIST
78924: LIST
78925: LIST
78926: LIST
78927: LIST
78928: LIST
78929: LIST
78930: LIST
78931: LIST
78932: LIST
78933: LIST
78934: LIST
78935: LIST
78936: IN
78937: NOT
78938: AND
78939: IFFALSE 78987
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
78941: LD_ADDR_EXP 74
78945: PUSH
78946: LD_EXP 74
78950: PPUSH
78951: LD_VAR 0 4
78955: PUSH
78956: LD_EXP 74
78960: PUSH
78961: LD_VAR 0 4
78965: ARRAY
78966: PUSH
78967: LD_INT 1
78969: PLUS
78970: PUSH
78971: EMPTY
78972: LIST
78973: LIST
78974: PPUSH
78975: LD_VAR 0 1
78979: PPUSH
78980: CALL 17413 0 3
78984: ST_TO_ADDR
78985: GO 79031
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
78987: LD_ADDR_EXP 71
78991: PUSH
78992: LD_EXP 71
78996: PPUSH
78997: LD_VAR 0 4
79001: PUSH
79002: LD_EXP 71
79006: PUSH
79007: LD_VAR 0 4
79011: ARRAY
79012: PUSH
79013: LD_INT 1
79015: PLUS
79016: PUSH
79017: EMPTY
79018: LIST
79019: LIST
79020: PPUSH
79021: LD_VAR 0 1
79025: PPUSH
79026: CALL 17413 0 3
79030: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
79031: LD_VAR 0 1
79035: PPUSH
79036: CALL_OW 263
79040: PUSH
79041: LD_INT 2
79043: EQUAL
79044: IFFALSE 79064
// begin repeat wait ( 0 0$1 ) ;
79046: LD_INT 35
79048: PPUSH
79049: CALL_OW 67
// until IsControledBy ( vehicle ) ;
79053: LD_VAR 0 1
79057: PPUSH
79058: CALL_OW 312
79062: IFFALSE 79046
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
79064: LD_VAR 0 1
79068: PPUSH
79069: LD_EXP 76
79073: PUSH
79074: LD_VAR 0 4
79078: ARRAY
79079: PPUSH
79080: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
79084: LD_VAR 0 1
79088: PPUSH
79089: CALL_OW 263
79093: PUSH
79094: LD_INT 1
79096: NONEQUAL
79097: IFFALSE 79101
// break ;
79099: GO 79150
// repeat wait ( 0 0$1 ) ;
79101: LD_INT 35
79103: PPUSH
79104: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
79108: LD_VAR 0 1
79112: PPUSH
79113: LD_EXP 76
79117: PUSH
79118: LD_VAR 0 4
79122: ARRAY
79123: PPUSH
79124: CALL_OW 308
79128: IFFALSE 79101
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
79130: LD_VAR 0 1
79134: PPUSH
79135: CALL_OW 311
79139: PPUSH
79140: CALL_OW 121
// exit ;
79144: POP
79145: POP
79146: GO 79152
// end ; end ;
79148: GO 78805
79150: POP
79151: POP
// end ;
79152: LD_VAR 0 3
79156: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
79157: LD_INT 0
79159: PPUSH
79160: PPUSH
79161: PPUSH
79162: PPUSH
// if not mc_bases or not skirmish then
79163: LD_EXP 52
79167: NOT
79168: PUSH
79169: LD_EXP 50
79173: NOT
79174: OR
79175: IFFALSE 79179
// exit ;
79177: GO 79532
// repeat wait ( 0 0$1 ) ;
79179: LD_INT 35
79181: PPUSH
79182: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
79186: LD_VAR 0 2
79190: PPUSH
79191: LD_VAR 0 3
79195: PPUSH
79196: CALL_OW 284
79200: IFFALSE 79179
// if GetResourceTypeXY ( x , y ) = mat_artefact then
79202: LD_VAR 0 2
79206: PPUSH
79207: LD_VAR 0 3
79211: PPUSH
79212: CALL_OW 283
79216: PUSH
79217: LD_INT 4
79219: EQUAL
79220: IFFALSE 79224
// exit ;
79222: GO 79532
// for i = 1 to mc_bases do
79224: LD_ADDR_VAR 0 7
79228: PUSH
79229: DOUBLE
79230: LD_INT 1
79232: DEC
79233: ST_TO_ADDR
79234: LD_EXP 52
79238: PUSH
79239: FOR_TO
79240: IFFALSE 79530
// begin if mc_crates_area [ i ] then
79242: LD_EXP 70
79246: PUSH
79247: LD_VAR 0 7
79251: ARRAY
79252: IFFALSE 79363
// for j in mc_crates_area [ i ] do
79254: LD_ADDR_VAR 0 8
79258: PUSH
79259: LD_EXP 70
79263: PUSH
79264: LD_VAR 0 7
79268: ARRAY
79269: PUSH
79270: FOR_IN
79271: IFFALSE 79361
// if InArea ( x , y , j ) then
79273: LD_VAR 0 2
79277: PPUSH
79278: LD_VAR 0 3
79282: PPUSH
79283: LD_VAR 0 8
79287: PPUSH
79288: CALL_OW 309
79292: IFFALSE 79359
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
79294: LD_ADDR_EXP 68
79298: PUSH
79299: LD_EXP 68
79303: PPUSH
79304: LD_VAR 0 7
79308: PUSH
79309: LD_EXP 68
79313: PUSH
79314: LD_VAR 0 7
79318: ARRAY
79319: PUSH
79320: LD_INT 1
79322: PLUS
79323: PUSH
79324: EMPTY
79325: LIST
79326: LIST
79327: PPUSH
79328: LD_VAR 0 4
79332: PUSH
79333: LD_VAR 0 2
79337: PUSH
79338: LD_VAR 0 3
79342: PUSH
79343: EMPTY
79344: LIST
79345: LIST
79346: LIST
79347: PPUSH
79348: CALL 17413 0 3
79352: ST_TO_ADDR
// exit ;
79353: POP
79354: POP
79355: POP
79356: POP
79357: GO 79532
// end ;
79359: GO 79270
79361: POP
79362: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
79363: LD_ADDR_VAR 0 9
79367: PUSH
79368: LD_EXP 52
79372: PUSH
79373: LD_VAR 0 7
79377: ARRAY
79378: PPUSH
79379: LD_INT 2
79381: PUSH
79382: LD_INT 30
79384: PUSH
79385: LD_INT 0
79387: PUSH
79388: EMPTY
79389: LIST
79390: LIST
79391: PUSH
79392: LD_INT 30
79394: PUSH
79395: LD_INT 1
79397: PUSH
79398: EMPTY
79399: LIST
79400: LIST
79401: PUSH
79402: EMPTY
79403: LIST
79404: LIST
79405: LIST
79406: PPUSH
79407: CALL_OW 72
79411: ST_TO_ADDR
// if not depot then
79412: LD_VAR 0 9
79416: NOT
79417: IFFALSE 79421
// continue ;
79419: GO 79239
// for j in depot do
79421: LD_ADDR_VAR 0 8
79425: PUSH
79426: LD_VAR 0 9
79430: PUSH
79431: FOR_IN
79432: IFFALSE 79526
// if GetDistUnitXY ( j , x , y ) < 30 then
79434: LD_VAR 0 8
79438: PPUSH
79439: LD_VAR 0 2
79443: PPUSH
79444: LD_VAR 0 3
79448: PPUSH
79449: CALL_OW 297
79453: PUSH
79454: LD_INT 30
79456: LESS
79457: IFFALSE 79524
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
79459: LD_ADDR_EXP 68
79463: PUSH
79464: LD_EXP 68
79468: PPUSH
79469: LD_VAR 0 7
79473: PUSH
79474: LD_EXP 68
79478: PUSH
79479: LD_VAR 0 7
79483: ARRAY
79484: PUSH
79485: LD_INT 1
79487: PLUS
79488: PUSH
79489: EMPTY
79490: LIST
79491: LIST
79492: PPUSH
79493: LD_VAR 0 4
79497: PUSH
79498: LD_VAR 0 2
79502: PUSH
79503: LD_VAR 0 3
79507: PUSH
79508: EMPTY
79509: LIST
79510: LIST
79511: LIST
79512: PPUSH
79513: CALL 17413 0 3
79517: ST_TO_ADDR
// exit ;
79518: POP
79519: POP
79520: POP
79521: POP
79522: GO 79532
// end ;
79524: GO 79431
79526: POP
79527: POP
// end ;
79528: GO 79239
79530: POP
79531: POP
// end ;
79532: LD_VAR 0 6
79536: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
79537: LD_INT 0
79539: PPUSH
79540: PPUSH
79541: PPUSH
79542: PPUSH
// if not mc_bases or not skirmish then
79543: LD_EXP 52
79547: NOT
79548: PUSH
79549: LD_EXP 50
79553: NOT
79554: OR
79555: IFFALSE 79559
// exit ;
79557: GO 79836
// side := GetSide ( lab ) ;
79559: LD_ADDR_VAR 0 4
79563: PUSH
79564: LD_VAR 0 2
79568: PPUSH
79569: CALL_OW 255
79573: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
79574: LD_VAR 0 4
79578: PUSH
79579: LD_EXP 78
79583: IN
79584: NOT
79585: PUSH
79586: LD_EXP 79
79590: NOT
79591: OR
79592: PUSH
79593: LD_EXP 52
79597: NOT
79598: OR
79599: IFFALSE 79603
// exit ;
79601: GO 79836
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
79603: LD_ADDR_EXP 79
79607: PUSH
79608: LD_EXP 79
79612: PPUSH
79613: LD_VAR 0 4
79617: PPUSH
79618: LD_EXP 79
79622: PUSH
79623: LD_VAR 0 4
79627: ARRAY
79628: PUSH
79629: LD_VAR 0 1
79633: DIFF
79634: PPUSH
79635: CALL_OW 1
79639: ST_TO_ADDR
// for i = 1 to mc_bases do
79640: LD_ADDR_VAR 0 5
79644: PUSH
79645: DOUBLE
79646: LD_INT 1
79648: DEC
79649: ST_TO_ADDR
79650: LD_EXP 52
79654: PUSH
79655: FOR_TO
79656: IFFALSE 79834
// begin if lab in mc_bases [ i ] then
79658: LD_VAR 0 2
79662: PUSH
79663: LD_EXP 52
79667: PUSH
79668: LD_VAR 0 5
79672: ARRAY
79673: IN
79674: IFFALSE 79832
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
79676: LD_VAR 0 1
79680: PUSH
79681: LD_INT 11
79683: PUSH
79684: LD_INT 4
79686: PUSH
79687: LD_INT 3
79689: PUSH
79690: LD_INT 2
79692: PUSH
79693: EMPTY
79694: LIST
79695: LIST
79696: LIST
79697: LIST
79698: IN
79699: PUSH
79700: LD_EXP 82
79704: PUSH
79705: LD_VAR 0 5
79709: ARRAY
79710: AND
79711: IFFALSE 79832
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
79713: LD_ADDR_VAR 0 6
79717: PUSH
79718: LD_EXP 82
79722: PUSH
79723: LD_VAR 0 5
79727: ARRAY
79728: PUSH
79729: LD_INT 1
79731: ARRAY
79732: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
79733: LD_ADDR_EXP 82
79737: PUSH
79738: LD_EXP 82
79742: PPUSH
79743: LD_VAR 0 5
79747: PPUSH
79748: EMPTY
79749: PPUSH
79750: CALL_OW 1
79754: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
79755: LD_VAR 0 6
79759: PPUSH
79760: LD_INT 0
79762: PPUSH
79763: CALL_OW 109
// ComExitBuilding ( tmp ) ;
79767: LD_VAR 0 6
79771: PPUSH
79772: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
79776: LD_ADDR_EXP 81
79780: PUSH
79781: LD_EXP 81
79785: PPUSH
79786: LD_VAR 0 5
79790: PPUSH
79791: LD_EXP 81
79795: PUSH
79796: LD_VAR 0 5
79800: ARRAY
79801: PPUSH
79802: LD_INT 1
79804: PPUSH
79805: LD_VAR 0 6
79809: PPUSH
79810: CALL_OW 2
79814: PPUSH
79815: CALL_OW 1
79819: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
79820: LD_VAR 0 5
79824: PPUSH
79825: LD_INT 112
79827: PPUSH
79828: CALL 57369 0 2
// end ; end ; end ;
79832: GO 79655
79834: POP
79835: POP
// end ;
79836: LD_VAR 0 3
79840: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
79841: LD_INT 0
79843: PPUSH
79844: PPUSH
79845: PPUSH
79846: PPUSH
79847: PPUSH
79848: PPUSH
79849: PPUSH
79850: PPUSH
// if not mc_bases or not skirmish then
79851: LD_EXP 52
79855: NOT
79856: PUSH
79857: LD_EXP 50
79861: NOT
79862: OR
79863: IFFALSE 79867
// exit ;
79865: GO 80959
// for i = 1 to mc_bases do
79867: LD_ADDR_VAR 0 3
79871: PUSH
79872: DOUBLE
79873: LD_INT 1
79875: DEC
79876: ST_TO_ADDR
79877: LD_EXP 52
79881: PUSH
79882: FOR_TO
79883: IFFALSE 80957
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
79885: LD_VAR 0 1
79889: PUSH
79890: LD_EXP 52
79894: PUSH
79895: LD_VAR 0 3
79899: ARRAY
79900: IN
79901: PUSH
79902: LD_VAR 0 1
79906: PUSH
79907: LD_EXP 59
79911: PUSH
79912: LD_VAR 0 3
79916: ARRAY
79917: IN
79918: OR
79919: PUSH
79920: LD_VAR 0 1
79924: PUSH
79925: LD_EXP 74
79929: PUSH
79930: LD_VAR 0 3
79934: ARRAY
79935: IN
79936: OR
79937: PUSH
79938: LD_VAR 0 1
79942: PUSH
79943: LD_EXP 71
79947: PUSH
79948: LD_VAR 0 3
79952: ARRAY
79953: IN
79954: OR
79955: PUSH
79956: LD_VAR 0 1
79960: PUSH
79961: LD_EXP 81
79965: PUSH
79966: LD_VAR 0 3
79970: ARRAY
79971: IN
79972: OR
79973: PUSH
79974: LD_VAR 0 1
79978: PUSH
79979: LD_EXP 82
79983: PUSH
79984: LD_VAR 0 3
79988: ARRAY
79989: IN
79990: OR
79991: IFFALSE 80955
// begin if un in mc_ape [ i ] then
79993: LD_VAR 0 1
79997: PUSH
79998: LD_EXP 81
80002: PUSH
80003: LD_VAR 0 3
80007: ARRAY
80008: IN
80009: IFFALSE 80048
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
80011: LD_ADDR_EXP 81
80015: PUSH
80016: LD_EXP 81
80020: PPUSH
80021: LD_VAR 0 3
80025: PPUSH
80026: LD_EXP 81
80030: PUSH
80031: LD_VAR 0 3
80035: ARRAY
80036: PUSH
80037: LD_VAR 0 1
80041: DIFF
80042: PPUSH
80043: CALL_OW 1
80047: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
80048: LD_VAR 0 1
80052: PUSH
80053: LD_EXP 82
80057: PUSH
80058: LD_VAR 0 3
80062: ARRAY
80063: IN
80064: IFFALSE 80088
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
80066: LD_ADDR_EXP 82
80070: PUSH
80071: LD_EXP 82
80075: PPUSH
80076: LD_VAR 0 3
80080: PPUSH
80081: EMPTY
80082: PPUSH
80083: CALL_OW 1
80087: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] ) then
80088: LD_VAR 0 1
80092: PPUSH
80093: CALL_OW 247
80097: PUSH
80098: LD_INT 2
80100: EQUAL
80101: PUSH
80102: LD_VAR 0 1
80106: PPUSH
80107: CALL_OW 110
80111: PUSH
80112: LD_INT 20
80114: EQUAL
80115: PUSH
80116: LD_VAR 0 1
80120: PUSH
80121: LD_EXP 74
80125: PUSH
80126: LD_VAR 0 3
80130: ARRAY
80131: IN
80132: OR
80133: AND
80134: IFFALSE 80295
// begin if un in mc_defender [ i ] then
80136: LD_VAR 0 1
80140: PUSH
80141: LD_EXP 74
80145: PUSH
80146: LD_VAR 0 3
80150: ARRAY
80151: IN
80152: IFFALSE 80191
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
80154: LD_ADDR_EXP 74
80158: PUSH
80159: LD_EXP 74
80163: PPUSH
80164: LD_VAR 0 3
80168: PPUSH
80169: LD_EXP 74
80173: PUSH
80174: LD_VAR 0 3
80178: ARRAY
80179: PUSH
80180: LD_VAR 0 1
80184: DIFF
80185: PPUSH
80186: CALL_OW 1
80190: ST_TO_ADDR
// fac := MC_GetBuilding ( i , b_factory ) ;
80191: LD_ADDR_VAR 0 8
80195: PUSH
80196: LD_VAR 0 3
80200: PPUSH
80201: LD_INT 3
80203: PPUSH
80204: CALL 76884 0 2
80208: ST_TO_ADDR
// if fac then
80209: LD_VAR 0 8
80213: IFFALSE 80295
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
80215: LD_ADDR_VAR 0 9
80219: PUSH
80220: LD_VAR 0 8
80224: PPUSH
80225: LD_VAR 0 1
80229: PPUSH
80230: CALL_OW 265
80234: PPUSH
80235: LD_VAR 0 1
80239: PPUSH
80240: CALL_OW 262
80244: PPUSH
80245: LD_VAR 0 1
80249: PPUSH
80250: CALL_OW 263
80254: PPUSH
80255: LD_VAR 0 1
80259: PPUSH
80260: CALL_OW 264
80264: PPUSH
80265: CALL 15006 0 5
80269: ST_TO_ADDR
// if components then
80270: LD_VAR 0 9
80274: IFFALSE 80293
// MC_InsertProduceList ( i , [ components ] ) ;
80276: LD_VAR 0 3
80280: PPUSH
80281: LD_VAR 0 9
80285: PUSH
80286: EMPTY
80287: LIST
80288: PPUSH
80289: CALL 76512 0 2
// break ;
80293: GO 80957
// end ; end ; if GetType ( un ) = unit_building then
80295: LD_VAR 0 1
80299: PPUSH
80300: CALL_OW 247
80304: PUSH
80305: LD_INT 3
80307: EQUAL
80308: IFFALSE 80623
// begin btype := GetBType ( un ) ;
80310: LD_ADDR_VAR 0 5
80314: PUSH
80315: LD_VAR 0 1
80319: PPUSH
80320: CALL_OW 266
80324: ST_TO_ADDR
// if btype = b_warehouse then
80325: LD_VAR 0 5
80329: PUSH
80330: LD_INT 1
80332: EQUAL
80333: IFFALSE 80351
// begin btype := b_depot ;
80335: LD_ADDR_VAR 0 5
80339: PUSH
80340: LD_INT 0
80342: ST_TO_ADDR
// pos := 1 ;
80343: LD_ADDR_VAR 0 6
80347: PUSH
80348: LD_INT 1
80350: ST_TO_ADDR
// end ; if btype = b_factory then
80351: LD_VAR 0 5
80355: PUSH
80356: LD_INT 3
80358: EQUAL
80359: IFFALSE 80377
// begin btype := b_workshop ;
80361: LD_ADDR_VAR 0 5
80365: PUSH
80366: LD_INT 2
80368: ST_TO_ADDR
// pos := 1 ;
80369: LD_ADDR_VAR 0 6
80373: PUSH
80374: LD_INT 1
80376: ST_TO_ADDR
// end ; if btype = b_barracks then
80377: LD_VAR 0 5
80381: PUSH
80382: LD_INT 5
80384: EQUAL
80385: IFFALSE 80395
// btype := b_armoury ;
80387: LD_ADDR_VAR 0 5
80391: PUSH
80392: LD_INT 4
80394: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
80395: LD_VAR 0 5
80399: PUSH
80400: LD_INT 7
80402: PUSH
80403: LD_INT 8
80405: PUSH
80406: EMPTY
80407: LIST
80408: LIST
80409: IN
80410: IFFALSE 80420
// btype := b_lab ;
80412: LD_ADDR_VAR 0 5
80416: PUSH
80417: LD_INT 6
80419: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
80420: LD_ADDR_EXP 57
80424: PUSH
80425: LD_EXP 57
80429: PPUSH
80430: LD_VAR 0 3
80434: PUSH
80435: LD_EXP 57
80439: PUSH
80440: LD_VAR 0 3
80444: ARRAY
80445: PUSH
80446: LD_INT 1
80448: PLUS
80449: PUSH
80450: EMPTY
80451: LIST
80452: LIST
80453: PPUSH
80454: LD_VAR 0 5
80458: PUSH
80459: LD_VAR 0 1
80463: PPUSH
80464: CALL_OW 250
80468: PUSH
80469: LD_VAR 0 1
80473: PPUSH
80474: CALL_OW 251
80478: PUSH
80479: LD_VAR 0 1
80483: PPUSH
80484: CALL_OW 254
80488: PUSH
80489: EMPTY
80490: LIST
80491: LIST
80492: LIST
80493: LIST
80494: PPUSH
80495: CALL 17413 0 3
80499: ST_TO_ADDR
// if pos = 1 then
80500: LD_VAR 0 6
80504: PUSH
80505: LD_INT 1
80507: EQUAL
80508: IFFALSE 80623
// begin tmp := mc_build_list [ i ] ;
80510: LD_ADDR_VAR 0 7
80514: PUSH
80515: LD_EXP 57
80519: PUSH
80520: LD_VAR 0 3
80524: ARRAY
80525: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
80526: LD_VAR 0 7
80530: PPUSH
80531: LD_INT 2
80533: PUSH
80534: LD_INT 30
80536: PUSH
80537: LD_INT 0
80539: PUSH
80540: EMPTY
80541: LIST
80542: LIST
80543: PUSH
80544: LD_INT 30
80546: PUSH
80547: LD_INT 1
80549: PUSH
80550: EMPTY
80551: LIST
80552: LIST
80553: PUSH
80554: EMPTY
80555: LIST
80556: LIST
80557: LIST
80558: PPUSH
80559: CALL_OW 72
80563: IFFALSE 80573
// pos := 2 ;
80565: LD_ADDR_VAR 0 6
80569: PUSH
80570: LD_INT 2
80572: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
80573: LD_ADDR_VAR 0 7
80577: PUSH
80578: LD_VAR 0 7
80582: PPUSH
80583: LD_VAR 0 6
80587: PPUSH
80588: LD_VAR 0 7
80592: PPUSH
80593: CALL 17739 0 3
80597: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
80598: LD_ADDR_EXP 57
80602: PUSH
80603: LD_EXP 57
80607: PPUSH
80608: LD_VAR 0 3
80612: PPUSH
80613: LD_VAR 0 7
80617: PPUSH
80618: CALL_OW 1
80622: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
80623: LD_VAR 0 1
80627: PUSH
80628: LD_EXP 52
80632: PUSH
80633: LD_VAR 0 3
80637: ARRAY
80638: IN
80639: IFFALSE 80678
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
80641: LD_ADDR_EXP 52
80645: PUSH
80646: LD_EXP 52
80650: PPUSH
80651: LD_VAR 0 3
80655: PPUSH
80656: LD_EXP 52
80660: PUSH
80661: LD_VAR 0 3
80665: ARRAY
80666: PUSH
80667: LD_VAR 0 1
80671: DIFF
80672: PPUSH
80673: CALL_OW 1
80677: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
80678: LD_VAR 0 1
80682: PUSH
80683: LD_EXP 59
80687: PUSH
80688: LD_VAR 0 3
80692: ARRAY
80693: IN
80694: IFFALSE 80733
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
80696: LD_ADDR_EXP 59
80700: PUSH
80701: LD_EXP 59
80705: PPUSH
80706: LD_VAR 0 3
80710: PPUSH
80711: LD_EXP 59
80715: PUSH
80716: LD_VAR 0 3
80720: ARRAY
80721: PUSH
80722: LD_VAR 0 1
80726: DIFF
80727: PPUSH
80728: CALL_OW 1
80732: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
80733: LD_VAR 0 1
80737: PUSH
80738: LD_EXP 71
80742: PUSH
80743: LD_VAR 0 3
80747: ARRAY
80748: IN
80749: IFFALSE 80788
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
80751: LD_ADDR_EXP 71
80755: PUSH
80756: LD_EXP 71
80760: PPUSH
80761: LD_VAR 0 3
80765: PPUSH
80766: LD_EXP 71
80770: PUSH
80771: LD_VAR 0 3
80775: ARRAY
80776: PUSH
80777: LD_VAR 0 1
80781: DIFF
80782: PPUSH
80783: CALL_OW 1
80787: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
80788: LD_VAR 0 1
80792: PUSH
80793: LD_EXP 74
80797: PUSH
80798: LD_VAR 0 3
80802: ARRAY
80803: IN
80804: IFFALSE 80843
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
80806: LD_ADDR_EXP 74
80810: PUSH
80811: LD_EXP 74
80815: PPUSH
80816: LD_VAR 0 3
80820: PPUSH
80821: LD_EXP 74
80825: PUSH
80826: LD_VAR 0 3
80830: ARRAY
80831: PUSH
80832: LD_VAR 0 1
80836: DIFF
80837: PPUSH
80838: CALL_OW 1
80842: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
80843: LD_VAR 0 1
80847: PUSH
80848: LD_EXP 61
80852: PUSH
80853: LD_VAR 0 3
80857: ARRAY
80858: IN
80859: IFFALSE 80898
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
80861: LD_ADDR_EXP 61
80865: PUSH
80866: LD_EXP 61
80870: PPUSH
80871: LD_VAR 0 3
80875: PPUSH
80876: LD_EXP 61
80880: PUSH
80881: LD_VAR 0 3
80885: ARRAY
80886: PUSH
80887: LD_VAR 0 1
80891: DIFF
80892: PPUSH
80893: CALL_OW 1
80897: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
80898: LD_VAR 0 1
80902: PUSH
80903: LD_EXP 60
80907: PUSH
80908: LD_VAR 0 3
80912: ARRAY
80913: IN
80914: IFFALSE 80953
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
80916: LD_ADDR_EXP 60
80920: PUSH
80921: LD_EXP 60
80925: PPUSH
80926: LD_VAR 0 3
80930: PPUSH
80931: LD_EXP 60
80935: PUSH
80936: LD_VAR 0 3
80940: ARRAY
80941: PUSH
80942: LD_VAR 0 1
80946: DIFF
80947: PPUSH
80948: CALL_OW 1
80952: ST_TO_ADDR
// end ; break ;
80953: GO 80957
// end ;
80955: GO 79882
80957: POP
80958: POP
// end ;
80959: LD_VAR 0 2
80963: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
80964: LD_INT 0
80966: PPUSH
80967: PPUSH
80968: PPUSH
// if not mc_bases or not skirmish then
80969: LD_EXP 52
80973: NOT
80974: PUSH
80975: LD_EXP 50
80979: NOT
80980: OR
80981: IFFALSE 80985
// exit ;
80983: GO 81200
// for i = 1 to mc_bases do
80985: LD_ADDR_VAR 0 3
80989: PUSH
80990: DOUBLE
80991: LD_INT 1
80993: DEC
80994: ST_TO_ADDR
80995: LD_EXP 52
80999: PUSH
81000: FOR_TO
81001: IFFALSE 81198
// begin if building in mc_construct_list [ i ] then
81003: LD_VAR 0 1
81007: PUSH
81008: LD_EXP 59
81012: PUSH
81013: LD_VAR 0 3
81017: ARRAY
81018: IN
81019: IFFALSE 81196
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
81021: LD_ADDR_EXP 59
81025: PUSH
81026: LD_EXP 59
81030: PPUSH
81031: LD_VAR 0 3
81035: PPUSH
81036: LD_EXP 59
81040: PUSH
81041: LD_VAR 0 3
81045: ARRAY
81046: PUSH
81047: LD_VAR 0 1
81051: DIFF
81052: PPUSH
81053: CALL_OW 1
81057: ST_TO_ADDR
// if building in mc_lab [ i ] then
81058: LD_VAR 0 1
81062: PUSH
81063: LD_EXP 85
81067: PUSH
81068: LD_VAR 0 3
81072: ARRAY
81073: IN
81074: IFFALSE 81129
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
81076: LD_ADDR_EXP 86
81080: PUSH
81081: LD_EXP 86
81085: PPUSH
81086: LD_VAR 0 3
81090: PPUSH
81091: LD_EXP 86
81095: PUSH
81096: LD_VAR 0 3
81100: ARRAY
81101: PPUSH
81102: LD_INT 1
81104: PPUSH
81105: LD_EXP 86
81109: PUSH
81110: LD_VAR 0 3
81114: ARRAY
81115: PPUSH
81116: LD_INT 0
81118: PPUSH
81119: CALL 16831 0 4
81123: PPUSH
81124: CALL_OW 1
81128: ST_TO_ADDR
// if not building in mc_bases [ i ] then
81129: LD_VAR 0 1
81133: PUSH
81134: LD_EXP 52
81138: PUSH
81139: LD_VAR 0 3
81143: ARRAY
81144: IN
81145: NOT
81146: IFFALSE 81192
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
81148: LD_ADDR_EXP 52
81152: PUSH
81153: LD_EXP 52
81157: PPUSH
81158: LD_VAR 0 3
81162: PUSH
81163: LD_EXP 52
81167: PUSH
81168: LD_VAR 0 3
81172: ARRAY
81173: PUSH
81174: LD_INT 1
81176: PLUS
81177: PUSH
81178: EMPTY
81179: LIST
81180: LIST
81181: PPUSH
81182: LD_VAR 0 1
81186: PPUSH
81187: CALL 17413 0 3
81191: ST_TO_ADDR
// exit ;
81192: POP
81193: POP
81194: GO 81200
// end ; end ;
81196: GO 81000
81198: POP
81199: POP
// end ;
81200: LD_VAR 0 2
81204: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
81205: LD_INT 0
81207: PPUSH
81208: PPUSH
81209: PPUSH
81210: PPUSH
81211: PPUSH
81212: PPUSH
81213: PPUSH
// if not mc_bases or not skirmish then
81214: LD_EXP 52
81218: NOT
81219: PUSH
81220: LD_EXP 50
81224: NOT
81225: OR
81226: IFFALSE 81230
// exit ;
81228: GO 81891
// for i = 1 to mc_bases do
81230: LD_ADDR_VAR 0 3
81234: PUSH
81235: DOUBLE
81236: LD_INT 1
81238: DEC
81239: ST_TO_ADDR
81240: LD_EXP 52
81244: PUSH
81245: FOR_TO
81246: IFFALSE 81889
// begin if building in mc_construct_list [ i ] then
81248: LD_VAR 0 1
81252: PUSH
81253: LD_EXP 59
81257: PUSH
81258: LD_VAR 0 3
81262: ARRAY
81263: IN
81264: IFFALSE 81887
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
81266: LD_ADDR_EXP 59
81270: PUSH
81271: LD_EXP 59
81275: PPUSH
81276: LD_VAR 0 3
81280: PPUSH
81281: LD_EXP 59
81285: PUSH
81286: LD_VAR 0 3
81290: ARRAY
81291: PUSH
81292: LD_VAR 0 1
81296: DIFF
81297: PPUSH
81298: CALL_OW 1
81302: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
81303: LD_ADDR_EXP 52
81307: PUSH
81308: LD_EXP 52
81312: PPUSH
81313: LD_VAR 0 3
81317: PUSH
81318: LD_EXP 52
81322: PUSH
81323: LD_VAR 0 3
81327: ARRAY
81328: PUSH
81329: LD_INT 1
81331: PLUS
81332: PUSH
81333: EMPTY
81334: LIST
81335: LIST
81336: PPUSH
81337: LD_VAR 0 1
81341: PPUSH
81342: CALL 17413 0 3
81346: ST_TO_ADDR
// btype := GetBType ( building ) ;
81347: LD_ADDR_VAR 0 5
81351: PUSH
81352: LD_VAR 0 1
81356: PPUSH
81357: CALL_OW 266
81361: ST_TO_ADDR
// side := GetSide ( building ) ;
81362: LD_ADDR_VAR 0 8
81366: PUSH
81367: LD_VAR 0 1
81371: PPUSH
81372: CALL_OW 255
81376: ST_TO_ADDR
// if btype = b_lab then
81377: LD_VAR 0 5
81381: PUSH
81382: LD_INT 6
81384: EQUAL
81385: IFFALSE 81435
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
81387: LD_ADDR_EXP 85
81391: PUSH
81392: LD_EXP 85
81396: PPUSH
81397: LD_VAR 0 3
81401: PUSH
81402: LD_EXP 85
81406: PUSH
81407: LD_VAR 0 3
81411: ARRAY
81412: PUSH
81413: LD_INT 1
81415: PLUS
81416: PUSH
81417: EMPTY
81418: LIST
81419: LIST
81420: PPUSH
81421: LD_VAR 0 1
81425: PPUSH
81426: CALL 17413 0 3
81430: ST_TO_ADDR
// exit ;
81431: POP
81432: POP
81433: GO 81891
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
81435: LD_VAR 0 5
81439: PUSH
81440: LD_INT 0
81442: PUSH
81443: LD_INT 2
81445: PUSH
81446: LD_INT 4
81448: PUSH
81449: EMPTY
81450: LIST
81451: LIST
81452: LIST
81453: IN
81454: IFFALSE 81578
// begin if btype = b_armoury then
81456: LD_VAR 0 5
81460: PUSH
81461: LD_INT 4
81463: EQUAL
81464: IFFALSE 81474
// btype := b_barracks ;
81466: LD_ADDR_VAR 0 5
81470: PUSH
81471: LD_INT 5
81473: ST_TO_ADDR
// if btype = b_depot then
81474: LD_VAR 0 5
81478: PUSH
81479: LD_INT 0
81481: EQUAL
81482: IFFALSE 81492
// btype := b_warehouse ;
81484: LD_ADDR_VAR 0 5
81488: PUSH
81489: LD_INT 1
81491: ST_TO_ADDR
// if btype = b_workshop then
81492: LD_VAR 0 5
81496: PUSH
81497: LD_INT 2
81499: EQUAL
81500: IFFALSE 81510
// btype := b_factory ;
81502: LD_ADDR_VAR 0 5
81506: PUSH
81507: LD_INT 3
81509: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
81510: LD_VAR 0 5
81514: PPUSH
81515: LD_VAR 0 8
81519: PPUSH
81520: CALL_OW 323
81524: PUSH
81525: LD_INT 1
81527: EQUAL
81528: IFFALSE 81574
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
81530: LD_ADDR_EXP 84
81534: PUSH
81535: LD_EXP 84
81539: PPUSH
81540: LD_VAR 0 3
81544: PUSH
81545: LD_EXP 84
81549: PUSH
81550: LD_VAR 0 3
81554: ARRAY
81555: PUSH
81556: LD_INT 1
81558: PLUS
81559: PUSH
81560: EMPTY
81561: LIST
81562: LIST
81563: PPUSH
81564: LD_VAR 0 1
81568: PPUSH
81569: CALL 17413 0 3
81573: ST_TO_ADDR
// exit ;
81574: POP
81575: POP
81576: GO 81891
// end ; if btype in [ b_bunker , b_turret ] then
81578: LD_VAR 0 5
81582: PUSH
81583: LD_INT 32
81585: PUSH
81586: LD_INT 33
81588: PUSH
81589: EMPTY
81590: LIST
81591: LIST
81592: IN
81593: IFFALSE 81883
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
81595: LD_ADDR_EXP 60
81599: PUSH
81600: LD_EXP 60
81604: PPUSH
81605: LD_VAR 0 3
81609: PUSH
81610: LD_EXP 60
81614: PUSH
81615: LD_VAR 0 3
81619: ARRAY
81620: PUSH
81621: LD_INT 1
81623: PLUS
81624: PUSH
81625: EMPTY
81626: LIST
81627: LIST
81628: PPUSH
81629: LD_VAR 0 1
81633: PPUSH
81634: CALL 17413 0 3
81638: ST_TO_ADDR
// if btype = b_bunker then
81639: LD_VAR 0 5
81643: PUSH
81644: LD_INT 32
81646: EQUAL
81647: IFFALSE 81883
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
81649: LD_ADDR_EXP 61
81653: PUSH
81654: LD_EXP 61
81658: PPUSH
81659: LD_VAR 0 3
81663: PUSH
81664: LD_EXP 61
81668: PUSH
81669: LD_VAR 0 3
81673: ARRAY
81674: PUSH
81675: LD_INT 1
81677: PLUS
81678: PUSH
81679: EMPTY
81680: LIST
81681: LIST
81682: PPUSH
81683: LD_VAR 0 1
81687: PPUSH
81688: CALL 17413 0 3
81692: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
81693: LD_ADDR_VAR 0 6
81697: PUSH
81698: LD_EXP 52
81702: PUSH
81703: LD_VAR 0 3
81707: ARRAY
81708: PPUSH
81709: LD_INT 25
81711: PUSH
81712: LD_INT 1
81714: PUSH
81715: EMPTY
81716: LIST
81717: LIST
81718: PUSH
81719: LD_INT 3
81721: PUSH
81722: LD_INT 54
81724: PUSH
81725: EMPTY
81726: LIST
81727: PUSH
81728: EMPTY
81729: LIST
81730: LIST
81731: PUSH
81732: EMPTY
81733: LIST
81734: LIST
81735: PPUSH
81736: CALL_OW 72
81740: ST_TO_ADDR
// if tmp then
81741: LD_VAR 0 6
81745: IFFALSE 81751
// exit ;
81747: POP
81748: POP
81749: GO 81891
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
81751: LD_ADDR_VAR 0 6
81755: PUSH
81756: LD_EXP 52
81760: PUSH
81761: LD_VAR 0 3
81765: ARRAY
81766: PPUSH
81767: LD_INT 2
81769: PUSH
81770: LD_INT 30
81772: PUSH
81773: LD_INT 4
81775: PUSH
81776: EMPTY
81777: LIST
81778: LIST
81779: PUSH
81780: LD_INT 30
81782: PUSH
81783: LD_INT 5
81785: PUSH
81786: EMPTY
81787: LIST
81788: LIST
81789: PUSH
81790: EMPTY
81791: LIST
81792: LIST
81793: LIST
81794: PPUSH
81795: CALL_OW 72
81799: ST_TO_ADDR
// if not tmp then
81800: LD_VAR 0 6
81804: NOT
81805: IFFALSE 81811
// exit ;
81807: POP
81808: POP
81809: GO 81891
// for j in tmp do
81811: LD_ADDR_VAR 0 4
81815: PUSH
81816: LD_VAR 0 6
81820: PUSH
81821: FOR_IN
81822: IFFALSE 81881
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
81824: LD_ADDR_VAR 0 7
81828: PUSH
81829: LD_VAR 0 4
81833: PPUSH
81834: CALL_OW 313
81838: PPUSH
81839: LD_INT 25
81841: PUSH
81842: LD_INT 1
81844: PUSH
81845: EMPTY
81846: LIST
81847: LIST
81848: PPUSH
81849: CALL_OW 72
81853: ST_TO_ADDR
// if units then
81854: LD_VAR 0 7
81858: IFFALSE 81879
// begin ComExitBuilding ( units [ 1 ] ) ;
81860: LD_VAR 0 7
81864: PUSH
81865: LD_INT 1
81867: ARRAY
81868: PPUSH
81869: CALL_OW 122
// exit ;
81873: POP
81874: POP
81875: POP
81876: POP
81877: GO 81891
// end ; end ;
81879: GO 81821
81881: POP
81882: POP
// end ; end ; exit ;
81883: POP
81884: POP
81885: GO 81891
// end ; end ;
81887: GO 81245
81889: POP
81890: POP
// end ;
81891: LD_VAR 0 2
81895: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
81896: LD_INT 0
81898: PPUSH
81899: PPUSH
81900: PPUSH
81901: PPUSH
81902: PPUSH
81903: PPUSH
81904: PPUSH
// if not mc_bases or not skirmish then
81905: LD_EXP 52
81909: NOT
81910: PUSH
81911: LD_EXP 50
81915: NOT
81916: OR
81917: IFFALSE 81921
// exit ;
81919: GO 82152
// btype := GetBType ( building ) ;
81921: LD_ADDR_VAR 0 6
81925: PUSH
81926: LD_VAR 0 1
81930: PPUSH
81931: CALL_OW 266
81935: ST_TO_ADDR
// x := GetX ( building ) ;
81936: LD_ADDR_VAR 0 7
81940: PUSH
81941: LD_VAR 0 1
81945: PPUSH
81946: CALL_OW 250
81950: ST_TO_ADDR
// y := GetY ( building ) ;
81951: LD_ADDR_VAR 0 8
81955: PUSH
81956: LD_VAR 0 1
81960: PPUSH
81961: CALL_OW 251
81965: ST_TO_ADDR
// d := GetDir ( building ) ;
81966: LD_ADDR_VAR 0 9
81970: PUSH
81971: LD_VAR 0 1
81975: PPUSH
81976: CALL_OW 254
81980: ST_TO_ADDR
// for i = 1 to mc_bases do
81981: LD_ADDR_VAR 0 4
81985: PUSH
81986: DOUBLE
81987: LD_INT 1
81989: DEC
81990: ST_TO_ADDR
81991: LD_EXP 52
81995: PUSH
81996: FOR_TO
81997: IFFALSE 82150
// begin if not mc_build_list [ i ] then
81999: LD_EXP 57
82003: PUSH
82004: LD_VAR 0 4
82008: ARRAY
82009: NOT
82010: IFFALSE 82014
// continue ;
82012: GO 81996
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
82014: LD_VAR 0 6
82018: PUSH
82019: LD_VAR 0 7
82023: PUSH
82024: LD_VAR 0 8
82028: PUSH
82029: LD_VAR 0 9
82033: PUSH
82034: EMPTY
82035: LIST
82036: LIST
82037: LIST
82038: LIST
82039: PPUSH
82040: LD_EXP 57
82044: PUSH
82045: LD_VAR 0 4
82049: ARRAY
82050: PUSH
82051: LD_INT 1
82053: ARRAY
82054: PPUSH
82055: CALL 23582 0 2
82059: IFFALSE 82148
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
82061: LD_ADDR_EXP 57
82065: PUSH
82066: LD_EXP 57
82070: PPUSH
82071: LD_VAR 0 4
82075: PPUSH
82076: LD_EXP 57
82080: PUSH
82081: LD_VAR 0 4
82085: ARRAY
82086: PPUSH
82087: LD_INT 1
82089: PPUSH
82090: CALL_OW 3
82094: PPUSH
82095: CALL_OW 1
82099: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
82100: LD_ADDR_EXP 59
82104: PUSH
82105: LD_EXP 59
82109: PPUSH
82110: LD_VAR 0 4
82114: PUSH
82115: LD_EXP 59
82119: PUSH
82120: LD_VAR 0 4
82124: ARRAY
82125: PUSH
82126: LD_INT 1
82128: PLUS
82129: PUSH
82130: EMPTY
82131: LIST
82132: LIST
82133: PPUSH
82134: LD_VAR 0 1
82138: PPUSH
82139: CALL 17413 0 3
82143: ST_TO_ADDR
// exit ;
82144: POP
82145: POP
82146: GO 82152
// end ; end ;
82148: GO 81996
82150: POP
82151: POP
// end ;
82152: LD_VAR 0 3
82156: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
82157: LD_INT 0
82159: PPUSH
82160: PPUSH
82161: PPUSH
// if not mc_bases or not skirmish then
82162: LD_EXP 52
82166: NOT
82167: PUSH
82168: LD_EXP 50
82172: NOT
82173: OR
82174: IFFALSE 82178
// exit ;
82176: GO 82368
// for i = 1 to mc_bases do
82178: LD_ADDR_VAR 0 4
82182: PUSH
82183: DOUBLE
82184: LD_INT 1
82186: DEC
82187: ST_TO_ADDR
82188: LD_EXP 52
82192: PUSH
82193: FOR_TO
82194: IFFALSE 82281
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
82196: LD_VAR 0 1
82200: PUSH
82201: LD_EXP 60
82205: PUSH
82206: LD_VAR 0 4
82210: ARRAY
82211: IN
82212: PUSH
82213: LD_VAR 0 1
82217: PUSH
82218: LD_EXP 61
82222: PUSH
82223: LD_VAR 0 4
82227: ARRAY
82228: IN
82229: NOT
82230: AND
82231: IFFALSE 82279
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
82233: LD_ADDR_EXP 61
82237: PUSH
82238: LD_EXP 61
82242: PPUSH
82243: LD_VAR 0 4
82247: PUSH
82248: LD_EXP 61
82252: PUSH
82253: LD_VAR 0 4
82257: ARRAY
82258: PUSH
82259: LD_INT 1
82261: PLUS
82262: PUSH
82263: EMPTY
82264: LIST
82265: LIST
82266: PPUSH
82267: LD_VAR 0 1
82271: PPUSH
82272: CALL 17413 0 3
82276: ST_TO_ADDR
// break ;
82277: GO 82281
// end ; end ;
82279: GO 82193
82281: POP
82282: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
82283: LD_VAR 0 1
82287: PPUSH
82288: CALL_OW 257
82292: PUSH
82293: LD_EXP 78
82297: IN
82298: PUSH
82299: LD_VAR 0 1
82303: PPUSH
82304: CALL_OW 266
82308: PUSH
82309: LD_INT 5
82311: EQUAL
82312: AND
82313: PUSH
82314: LD_VAR 0 2
82318: PPUSH
82319: CALL_OW 110
82323: PUSH
82324: LD_INT 18
82326: NONEQUAL
82327: AND
82328: IFFALSE 82368
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
82330: LD_VAR 0 2
82334: PPUSH
82335: CALL_OW 257
82339: PUSH
82340: LD_INT 5
82342: PUSH
82343: LD_INT 8
82345: PUSH
82346: LD_INT 9
82348: PUSH
82349: EMPTY
82350: LIST
82351: LIST
82352: LIST
82353: IN
82354: IFFALSE 82368
// SetClass ( unit , 1 ) ;
82356: LD_VAR 0 2
82360: PPUSH
82361: LD_INT 1
82363: PPUSH
82364: CALL_OW 336
// end ;
82368: LD_VAR 0 3
82372: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
82373: LD_INT 0
82375: PPUSH
82376: PPUSH
// if not mc_bases or not skirmish then
82377: LD_EXP 52
82381: NOT
82382: PUSH
82383: LD_EXP 50
82387: NOT
82388: OR
82389: IFFALSE 82393
// exit ;
82391: GO 82509
// if GetLives ( abandoned_vehicle ) > 250 then
82393: LD_VAR 0 2
82397: PPUSH
82398: CALL_OW 256
82402: PUSH
82403: LD_INT 250
82405: GREATER
82406: IFFALSE 82410
// exit ;
82408: GO 82509
// for i = 1 to mc_bases do
82410: LD_ADDR_VAR 0 6
82414: PUSH
82415: DOUBLE
82416: LD_INT 1
82418: DEC
82419: ST_TO_ADDR
82420: LD_EXP 52
82424: PUSH
82425: FOR_TO
82426: IFFALSE 82507
// begin if driver in mc_bases [ i ] then
82428: LD_VAR 0 1
82432: PUSH
82433: LD_EXP 52
82437: PUSH
82438: LD_VAR 0 6
82442: ARRAY
82443: IN
82444: IFFALSE 82505
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
82446: LD_VAR 0 1
82450: PPUSH
82451: LD_EXP 52
82455: PUSH
82456: LD_VAR 0 6
82460: ARRAY
82461: PPUSH
82462: LD_INT 2
82464: PUSH
82465: LD_INT 30
82467: PUSH
82468: LD_INT 0
82470: PUSH
82471: EMPTY
82472: LIST
82473: LIST
82474: PUSH
82475: LD_INT 30
82477: PUSH
82478: LD_INT 1
82480: PUSH
82481: EMPTY
82482: LIST
82483: LIST
82484: PUSH
82485: EMPTY
82486: LIST
82487: LIST
82488: LIST
82489: PPUSH
82490: CALL_OW 72
82494: PUSH
82495: LD_INT 1
82497: ARRAY
82498: PPUSH
82499: CALL_OW 112
// break ;
82503: GO 82507
// end ; end ;
82505: GO 82425
82507: POP
82508: POP
// end ;
82509: LD_VAR 0 5
82513: RET
