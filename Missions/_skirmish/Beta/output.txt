// export MissionStart ; export southAreaBlocker ; starting begin southAreaBlocker = true ;
   0: LD_ADDR_EXP 2
   4: PUSH
   5: LD_INT 1
   7: ST_TO_ADDR
// ResetFog ;
   8: CALL_OW 335
// AnimateTrees ( true ) ;
  12: LD_INT 1
  14: PPUSH
  15: CALL_OW 573
// RevealFogArea ( 1 , BetaArea ) ;
  19: LD_INT 1
  21: PPUSH
  22: LD_INT 8
  24: PPUSH
  25: CALL_OW 332
// GameType ;
  29: CALL 5592 0 0
// SetBName ( BetaA , beta ) ;
  33: LD_INT 1
  35: PPUSH
  36: LD_STRING beta
  38: PPUSH
  39: CALL_OW 500
// SetBName ( BetaB , beta ) ;
  43: LD_INT 3
  45: PPUSH
  46: LD_STRING beta
  48: PPUSH
  49: CALL_OW 500
// SetResourceType ( GetBase ( BetaA ) , mat_cans , startCrates [ 1 ] ) ;
  53: LD_INT 1
  55: PPUSH
  56: CALL_OW 274
  60: PPUSH
  61: LD_INT 1
  63: PPUSH
  64: LD_EXP 43
  68: PUSH
  69: LD_INT 1
  71: ARRAY
  72: PPUSH
  73: CALL_OW 277
// SetResourceType ( GetBase ( BetaB ) , mat_cans , startCrates [ 2 ] ) ;
  77: LD_INT 3
  79: PPUSH
  80: CALL_OW 274
  84: PPUSH
  85: LD_INT 1
  87: PPUSH
  88: LD_EXP 43
  92: PUSH
  93: LD_INT 2
  95: ARRAY
  96: PPUSH
  97: CALL_OW 277
// PrepareHeroes ;
 101: CALL 2755 0 0
// PrepareBeta ;
 105: CALL 3144 0 0
// HideArea ( 1 , SouthArea ) ;
 109: LD_INT 1
 111: PPUSH
 112: LD_INT 16
 114: PPUSH
 115: CALL_OW 333
// InGameOn ;
 119: CALL_OW 8
// ComHold ( Brighton ) ;
 123: LD_EXP 9
 127: PPUSH
 128: CALL_OW 140
// CenterNowOnUnits ( Brighton ) ;
 132: LD_EXP 9
 136: PPUSH
 137: CALL_OW 87
// ComMoveXY ( Megan , 50 , 42 ) ;
 141: LD_EXP 11
 145: PPUSH
 146: LD_INT 50
 148: PPUSH
 149: LD_INT 42
 151: PPUSH
 152: CALL_OW 111
// repeat wait ( 0 0$1 ) until GetDistUnits ( Megan , Brighton ) < 3 ;
 156: LD_INT 35
 158: PPUSH
 159: CALL_OW 67
 163: LD_EXP 11
 167: PPUSH
 168: LD_EXP 9
 172: PPUSH
 173: CALL_OW 296
 177: PUSH
 178: LD_INT 3
 180: LESS
 181: IFFALSE 156
// ComTurnUnit ( Megan , Brighton ) ;
 183: LD_EXP 11
 187: PPUSH
 188: LD_EXP 9
 192: PPUSH
 193: CALL_OW 119
// Say ( Megan , DMegan-1a ) ;
 197: LD_EXP 11
 201: PPUSH
 202: LD_STRING DMegan-1a
 204: PPUSH
 205: CALL_OW 88
// wait ( 0 0$0.3 ) ;
 209: LD_INT 10
 211: PPUSH
 212: CALL_OW 67
// ComTurnUnit ( Brighton , Megan ) ;
 216: LD_EXP 9
 220: PPUSH
 221: LD_EXP 11
 225: PPUSH
 226: CALL_OW 119
// Say ( Brighton , DBrighton-1a ) ;
 230: LD_EXP 9
 234: PPUSH
 235: LD_STRING DBrighton-1a
 237: PPUSH
 238: CALL_OW 88
// Say ( Megan , DMegan-2a ) ;
 242: LD_EXP 11
 246: PPUSH
 247: LD_STRING DMegan-2a
 249: PPUSH
 250: CALL_OW 88
// Say ( Brighton , DBrighton-2a ) ;
 254: LD_EXP 9
 258: PPUSH
 259: LD_STRING DBrighton-2a
 261: PPUSH
 262: CALL_OW 88
// Say ( Megan , DMegan-3a ) ;
 266: LD_EXP 11
 270: PPUSH
 271: LD_STRING DMegan-3a
 273: PPUSH
 274: CALL_OW 88
// Say ( Brighton , DBrighton-3a ) ;
 278: LD_EXP 9
 282: PPUSH
 283: LD_STRING DBrighton-3a
 285: PPUSH
 286: CALL_OW 88
// Say ( Megan , DMegan-4a ) ;
 290: LD_EXP 11
 294: PPUSH
 295: LD_STRING DMegan-4a
 297: PPUSH
 298: CALL_OW 88
// ComMoveXY ( Megan , 40 , 37 ) ;
 302: LD_EXP 11
 306: PPUSH
 307: LD_INT 40
 309: PPUSH
 310: LD_INT 37
 312: PPUSH
 313: CALL_OW 111
// AddComTurnUnit ( Megan , Brighton ) ;
 317: LD_EXP 11
 321: PPUSH
 322: LD_EXP 9
 326: PPUSH
 327: CALL_OW 179
// ComMoveXY ( Palmer , 50 , 42 ) ;
 331: LD_EXP 10
 335: PPUSH
 336: LD_INT 50
 338: PPUSH
 339: LD_INT 42
 341: PPUSH
 342: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 346: LD_INT 35
 348: PPUSH
 349: CALL_OW 67
// until GetDistUnits ( Brighton , Palmer ) < 6 ;
 353: LD_EXP 9
 357: PPUSH
 358: LD_EXP 10
 362: PPUSH
 363: CALL_OW 296
 367: PUSH
 368: LD_INT 6
 370: LESS
 371: IFFALSE 346
// ComTurnUnit ( Brighton , Palmer ) ;
 373: LD_EXP 9
 377: PPUSH
 378: LD_EXP 10
 382: PPUSH
 383: CALL_OW 119
// ComTurnUnit ( Palmer , Brighton ) ;
 387: LD_EXP 10
 391: PPUSH
 392: LD_EXP 9
 396: PPUSH
 397: CALL_OW 119
// Say ( Megan , DMegan-5a ) ;
 401: LD_EXP 11
 405: PPUSH
 406: LD_STRING DMegan-5a
 408: PPUSH
 409: CALL_OW 88
// Say ( Palmer , DPalmer-1 ) ;
 413: LD_EXP 10
 417: PPUSH
 418: LD_STRING DPalmer-1
 420: PPUSH
 421: CALL_OW 88
// Say ( Brighton , DBrighton-1 ) ;
 425: LD_EXP 9
 429: PPUSH
 430: LD_STRING DBrighton-1
 432: PPUSH
 433: CALL_OW 88
// Say ( Palmer , DPalmer-2 ) ;
 437: LD_EXP 10
 441: PPUSH
 442: LD_STRING DPalmer-2
 444: PPUSH
 445: CALL_OW 88
// Say ( Brighton , DBrighton-2 ) ;
 449: LD_EXP 9
 453: PPUSH
 454: LD_STRING DBrighton-2
 456: PPUSH
 457: CALL_OW 88
// Say ( Palmer , DPalmer-3 ) ;
 461: LD_EXP 10
 465: PPUSH
 466: LD_STRING DPalmer-3
 468: PPUSH
 469: CALL_OW 88
// Say ( Brighton , DBrighton-3 ) ;
 473: LD_EXP 9
 477: PPUSH
 478: LD_STRING DBrighton-3
 480: PPUSH
 481: CALL_OW 88
// Say ( Palmer , DPalmer-4 ) ;
 485: LD_EXP 10
 489: PPUSH
 490: LD_STRING DPalmer-4
 492: PPUSH
 493: CALL_OW 88
// ComEnterUnit ( Palmer , AmTower ) ;
 497: LD_EXP 10
 501: PPUSH
 502: LD_INT 6
 504: PPUSH
 505: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
 509: LD_INT 35
 511: PPUSH
 512: CALL_OW 67
// until IsInUnit ( Palmer ) = AmTower ;
 516: LD_EXP 10
 520: PPUSH
 521: CALL_OW 310
 525: PUSH
 526: LD_INT 6
 528: EQUAL
 529: IFFALSE 509
// SayRadio ( Palmer , DPalmer-5 ) ;
 531: LD_EXP 10
 535: PPUSH
 536: LD_STRING DPalmer-5
 538: PPUSH
 539: CALL_OW 94
// ComMoveXY ( Brighton , 59 , 36 ) ;
 543: LD_EXP 9
 547: PPUSH
 548: LD_INT 59
 550: PPUSH
 551: LD_INT 36
 553: PPUSH
 554: CALL_OW 111
// ComMoveXY ( Megan , 60 , 35 ) ;
 558: LD_EXP 11
 562: PPUSH
 563: LD_INT 60
 565: PPUSH
 566: LD_INT 35
 568: PPUSH
 569: CALL_OW 111
// ComMoveXY ( Palmer , 60 , 34 ) ;
 573: LD_EXP 10
 577: PPUSH
 578: LD_INT 60
 580: PPUSH
 581: LD_INT 34
 583: PPUSH
 584: CALL_OW 111
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 588: LD_EXP 9
 592: PPUSH
 593: LD_INT 99
 595: PPUSH
 596: LD_INT 37
 598: PPUSH
 599: CALL_OW 178
// AddComTurnUnit ( Megan , Brighton ) ;
 603: LD_EXP 11
 607: PPUSH
 608: LD_EXP 9
 612: PPUSH
 613: CALL_OW 179
// AddComTurnUnit ( Palmer , Brighton ) ;
 617: LD_EXP 10
 621: PPUSH
 622: LD_EXP 9
 626: PPUSH
 627: CALL_OW 179
// CenterOnXY ( 64 , 40 ) ;
 631: LD_INT 64
 633: PPUSH
 634: LD_INT 40
 636: PPUSH
 637: CALL_OW 84
// ComMeeting ( BetaSquad , SpotArea ) ;
 641: LD_EXP 12
 645: PPUSH
 646: LD_INT 13
 648: PPUSH
 649: CALL 11569 0 2
// wait ( 0 0$30 ) ;
 653: LD_INT 1050
 655: PPUSH
 656: CALL_OW 67
// Say ( Brighton , DBrighton-4 ) ;
 660: LD_EXP 9
 664: PPUSH
 665: LD_STRING DBrighton-4
 667: PPUSH
 668: CALL_OW 88
// Say ( Brighton , DBrighton-5 ) ;
 672: LD_EXP 9
 676: PPUSH
 677: LD_STRING DBrighton-5
 679: PPUSH
 680: CALL_OW 88
// AddComTurnUnit ( Brighton , Megan ) ;
 684: LD_EXP 9
 688: PPUSH
 689: LD_EXP 11
 693: PPUSH
 694: CALL_OW 179
// Say ( Brighton , DBrighton-6 ) ;
 698: LD_EXP 9
 702: PPUSH
 703: LD_STRING DBrighton-6
 705: PPUSH
 706: CALL_OW 88
// Say ( Megan , DMegan-1 ) ;
 710: LD_EXP 11
 714: PPUSH
 715: LD_STRING DMegan-1
 717: PPUSH
 718: CALL_OW 88
// Say ( Brighton , DBrighton-7 ) ;
 722: LD_EXP 9
 726: PPUSH
 727: LD_STRING DBrighton-7
 729: PPUSH
 730: CALL_OW 88
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 734: LD_EXP 9
 738: PPUSH
 739: LD_INT 99
 741: PPUSH
 742: LD_INT 37
 744: PPUSH
 745: CALL_OW 178
// Say ( Brighton , DBrighton-8 ) ;
 749: LD_EXP 9
 753: PPUSH
 754: LD_STRING DBrighton-8
 756: PPUSH
 757: CALL_OW 88
// ChangeMissionObjectives ( C1 ) ;
 761: LD_STRING C1
 763: PPUSH
 764: CALL_OW 337
// InGameOff ;
 768: CALL_OW 9
// SaveForQuickRestart ;
 772: CALL_OW 22
// MissionStart := true ;
 776: LD_ADDR_EXP 1
 780: PUSH
 781: LD_INT 1
 783: ST_TO_ADDR
// PrepareRUBase_v2 ;
 784: CALL 4867 0 0
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
 788: LD_ADDR_EXP 63
 792: PUSH
 793: LD_EXP 63
 797: PPUSH
 798: LD_INT 1
 800: PPUSH
 801: LD_INT 22
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PPUSH
 811: CALL_OW 69
 815: PPUSH
 816: CALL_OW 1
 820: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , RU_SecondPersonnel ) ;
 821: LD_ADDR_EXP 63
 825: PUSH
 826: LD_EXP 63
 830: PPUSH
 831: LD_INT 2
 833: PPUSH
 834: LD_EXP 36
 838: PPUSH
 839: CALL_OW 1
 843: ST_TO_ADDR
// MC_Start ( ) ;
 844: CALL 51024 0 0
// music_nat := 1 ;
 848: LD_ADDR_OWVAR 71
 852: PUSH
 853: LD_INT 1
 855: ST_TO_ADDR
// end ;
 856: END
// every 1 trigger southAreaBlocker do var unit ;
 857: LD_EXP 2
 861: IFFALSE 1022
 863: GO 865
 865: DISABLE
 866: LD_INT 0
 868: PPUSH
// begin enable ;
 869: ENABLE
// if FilterUnitsInArea ( SouthArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) = 0 then
 870: LD_INT 16
 872: PPUSH
 873: LD_INT 22
 875: PUSH
 876: LD_INT 1
 878: PUSH
 879: EMPTY
 880: LIST
 881: LIST
 882: PUSH
 883: LD_INT 2
 885: PUSH
 886: LD_INT 21
 888: PUSH
 889: LD_INT 1
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: PUSH
 896: LD_INT 21
 898: PUSH
 899: LD_INT 2
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PPUSH
 915: CALL_OW 70
 919: PUSH
 920: LD_INT 0
 922: EQUAL
 923: IFFALSE 927
// exit ;
 925: GO 1022
// for unit in FilterUnitsInArea ( SouthArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 927: LD_ADDR_VAR 0 1
 931: PUSH
 932: LD_INT 16
 934: PPUSH
 935: LD_INT 22
 937: PUSH
 938: LD_INT 1
 940: PUSH
 941: EMPTY
 942: LIST
 943: LIST
 944: PUSH
 945: LD_INT 2
 947: PUSH
 948: LD_INT 21
 950: PUSH
 951: LD_INT 1
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PUSH
 958: LD_INT 21
 960: PUSH
 961: LD_INT 2
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: LIST
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PPUSH
 977: CALL_OW 70
 981: PUSH
 982: FOR_IN
 983: IFFALSE 1020
// begin ComMoveXY ( unit , GetX ( unit ) , GetY ( unit ) - 2 ) ;
 985: LD_VAR 0 1
 989: PPUSH
 990: LD_VAR 0 1
 994: PPUSH
 995: CALL_OW 250
 999: PPUSH
1000: LD_VAR 0 1
1004: PPUSH
1005: CALL_OW 251
1009: PUSH
1010: LD_INT 2
1012: MINUS
1013: PPUSH
1014: CALL_OW 111
// end ;
1018: GO 982
1020: POP
1021: POP
// end ;
1022: PPOPN 1
1024: END
// export ArmadaArrived , FirstAssaultRepelled ; export RuSpeaker ; every 0 0$1 trigger MissionStart do var i , tmp ;
1025: LD_EXP 1
1029: IFFALSE 1650
1031: GO 1033
1033: DISABLE
1034: LD_INT 0
1036: PPUSH
1037: PPUSH
// begin wait ( ruArrival ) ;
1038: LD_EXP 42
1042: PPUSH
1043: CALL_OW 67
// PrepareRUArmada ;
1047: CALL 3726 0 0
// wait ( 0 0$3 ) ;
1051: LD_INT 105
1053: PPUSH
1054: CALL_OW 67
// tmp := AreaToList ( RUArrivalParkingArea , 0 ) ;
1058: LD_ADDR_VAR 0 2
1062: PUSH
1063: LD_INT 15
1065: PPUSH
1066: LD_INT 0
1068: PPUSH
1069: CALL_OW 517
1073: ST_TO_ADDR
// for i = 1 to RUArmada do
1074: LD_ADDR_VAR 0 1
1078: PUSH
1079: DOUBLE
1080: LD_INT 1
1082: DEC
1083: ST_TO_ADDR
1084: LD_EXP 17
1088: PUSH
1089: FOR_TO
1090: IFFALSE 1139
// ComMoveXY ( RUArmada [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1092: LD_EXP 17
1096: PUSH
1097: LD_VAR 0 1
1101: ARRAY
1102: PPUSH
1103: LD_VAR 0 2
1107: PUSH
1108: LD_INT 1
1110: ARRAY
1111: PUSH
1112: LD_VAR 0 1
1116: ARRAY
1117: PPUSH
1118: LD_VAR 0 2
1122: PUSH
1123: LD_INT 2
1125: ARRAY
1126: PUSH
1127: LD_VAR 0 1
1131: ARRAY
1132: PPUSH
1133: CALL_OW 111
1137: GO 1089
1139: POP
1140: POP
// ArmadaArrived := true ;
1141: LD_ADDR_EXP 3
1145: PUSH
1146: LD_INT 1
1148: ST_TO_ADDR
// Say ( Palmer , DPalmer-A1 ) ;
1149: LD_EXP 10
1153: PPUSH
1154: LD_STRING DPalmer-A1
1156: PPUSH
1157: CALL_OW 88
// Say ( Brighton , DBrighton-A1 ) ;
1161: LD_EXP 9
1165: PPUSH
1166: LD_STRING DBrighton-A1
1168: PPUSH
1169: CALL_OW 88
// wait ( 0 0$20 ) ;
1173: LD_INT 700
1175: PPUSH
1176: CALL_OW 67
// PrepareRUBase ;
1180: CALL 4451 0 0
// wait ( 1 1$20 ) ;
1184: LD_INT 2800
1186: PPUSH
1187: CALL_OW 67
// PrepareRUBulldozers ;
1191: CALL 4338 0 0
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
1195: LD_EXP 18
1199: PUSH
1200: LD_INT 1
1202: ARRAY
1203: PPUSH
1204: LD_INT 9
1206: PPUSH
1207: CALL 11426 0 2
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
1211: LD_EXP 18
1215: PUSH
1216: LD_INT 2
1218: ARRAY
1219: PPUSH
1220: LD_INT 11
1222: PPUSH
1223: CALL 11426 0 2
// DoNotAttack ( 1 , Bulldozers [ 1 ] ) ;
1227: LD_INT 1
1229: PPUSH
1230: LD_EXP 18
1234: PUSH
1235: LD_INT 1
1237: ARRAY
1238: PPUSH
1239: CALL_OW 471
// DoNotAttack ( 1 , Bulldozers [ 2 ] ) ;
1243: LD_INT 1
1245: PPUSH
1246: LD_EXP 18
1250: PUSH
1251: LD_INT 2
1253: ARRAY
1254: PPUSH
1255: CALL_OW 471
// wait ( 0 0$30 ) ;
1259: LD_INT 1050
1261: PPUSH
1262: CALL_OW 67
// ShowArea ( 1 , SouthArea ) ;
1266: LD_INT 1
1268: PPUSH
1269: LD_INT 16
1271: PPUSH
1272: CALL_OW 334
// InGameOn ;
1276: CALL_OW 8
// PlaceSeeing ( 95 , 93 , 1 , - 30 ) ;
1280: LD_INT 95
1282: PPUSH
1283: LD_INT 93
1285: PPUSH
1286: LD_INT 1
1288: PPUSH
1289: LD_INT 30
1291: NEG
1292: PPUSH
1293: CALL_OW 330
// ComMoveXY ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) , 63 , 39 ) ;
1297: LD_INT 10
1299: PPUSH
1300: LD_INT 22
1302: PUSH
1303: LD_INT 1
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: PPUSH
1310: CALL_OW 70
1314: PPUSH
1315: LD_INT 63
1317: PPUSH
1318: LD_INT 39
1320: PPUSH
1321: CALL_OW 111
// CenterOnXY ( 95 , 93 ) ;
1325: LD_INT 95
1327: PPUSH
1328: LD_INT 93
1330: PPUSH
1331: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
1335: LD_INT 35
1337: PPUSH
1338: CALL_OW 67
// if not HasTask ( Bulldozers [ 1 ] ) then
1342: LD_EXP 18
1346: PUSH
1347: LD_INT 1
1349: ARRAY
1350: PPUSH
1351: CALL_OW 314
1355: NOT
1356: IFFALSE 1374
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
1358: LD_EXP 18
1362: PUSH
1363: LD_INT 1
1365: ARRAY
1366: PPUSH
1367: LD_INT 9
1369: PPUSH
1370: CALL 11426 0 2
// if not HasTask ( Bulldozers [ 2 ] ) then
1374: LD_EXP 18
1378: PUSH
1379: LD_INT 2
1381: ARRAY
1382: PPUSH
1383: CALL_OW 314
1387: NOT
1388: IFFALSE 1406
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
1390: LD_EXP 18
1394: PUSH
1395: LD_INT 2
1397: ARRAY
1398: PPUSH
1399: LD_INT 11
1401: PPUSH
1402: CALL 11426 0 2
// until ListEnvironmentArea ( BulldozerArea ) < 2 or ListEnvironmentArea ( BulldozerArea2 ) < 2 or IsDead ( Bulldozers [ 1 ] ) ;
1406: LD_INT 9
1408: PPUSH
1409: CALL_OW 353
1413: PUSH
1414: LD_INT 2
1416: LESS
1417: PUSH
1418: LD_INT 11
1420: PPUSH
1421: CALL_OW 353
1425: PUSH
1426: LD_INT 2
1428: LESS
1429: OR
1430: PUSH
1431: LD_EXP 18
1435: PUSH
1436: LD_INT 1
1438: ARRAY
1439: PPUSH
1440: CALL_OW 301
1444: OR
1445: IFFALSE 1335
// if UnitFilter ( Bulldozers , [ f_ok ] ) then
1447: LD_EXP 18
1451: PPUSH
1452: LD_INT 50
1454: PUSH
1455: EMPTY
1456: LIST
1457: PPUSH
1458: CALL_OW 72
1462: IFFALSE 1515
// begin wait ( 0 0$10 ) ;
1464: LD_INT 350
1466: PPUSH
1467: CALL_OW 67
// ComMoveXY ( Bulldozers , 120 , 131 ) ;
1471: LD_EXP 18
1475: PPUSH
1476: LD_INT 120
1478: PPUSH
1479: LD_INT 131
1481: PPUSH
1482: CALL_OW 111
// for i in Bulldozers do
1486: LD_ADDR_VAR 0 1
1490: PUSH
1491: LD_EXP 18
1495: PUSH
1496: FOR_IN
1497: IFFALSE 1513
// NormalAttack ( 1 , i ) ;
1499: LD_INT 1
1501: PPUSH
1502: LD_VAR 0 1
1506: PPUSH
1507: CALL_OW 472
1511: GO 1496
1513: POP
1514: POP
// end ; wait ( 0 0$10 ) ;
1515: LD_INT 350
1517: PPUSH
1518: CALL_OW 67
// RemoveSeeing ( 95 , 93 , 1 ) ;
1522: LD_INT 95
1524: PPUSH
1525: LD_INT 93
1527: PPUSH
1528: LD_INT 1
1530: PPUSH
1531: CALL_OW 331
// southAreaBlocker = false ;
1535: LD_ADDR_EXP 2
1539: PUSH
1540: LD_INT 0
1542: ST_TO_ADDR
// Say ( Yashin , DDeath-Yas-1 ) ;
1543: LD_EXP 13
1547: PPUSH
1548: LD_STRING DDeath-Yas-1
1550: PPUSH
1551: CALL_OW 88
// SayEffect ( DRuSol-A1 ) ;
1555: LD_STRING DRuSol-A1
1557: PPUSH
1558: CALL_OW 96
// wait ( 0 0$2 ) ;
1562: LD_INT 70
1564: PPUSH
1565: CALL_OW 67
// InGameOff ;
1569: CALL_OW 9
// AssaultStarted := true ;
1573: LD_ADDR_EXP 8
1577: PUSH
1578: LD_INT 1
1580: ST_TO_ADDR
// wait ( 0 0$2 ) ;
1581: LD_INT 70
1583: PPUSH
1584: CALL_OW 67
// Say ( Gaydar , DDeath-Gay-2 ) ;
1588: LD_EXP 15
1592: PPUSH
1593: LD_STRING DDeath-Gay-2
1595: PPUSH
1596: CALL_OW 88
// wait ( 0 0$20 ) ;
1600: LD_INT 700
1602: PPUSH
1603: CALL_OW 67
// Say ( Popov , DDeath-Pop-1 ) ;
1607: LD_EXP 14
1611: PPUSH
1612: LD_STRING DDeath-Pop-1
1614: PPUSH
1615: CALL_OW 88
// Say ( Gaydar , DDeath-Gay-1 ) ;
1619: LD_EXP 15
1623: PPUSH
1624: LD_STRING DDeath-Gay-1
1626: PPUSH
1627: CALL_OW 88
// wait ( 0 0$5 ) ;
1631: LD_INT 175
1633: PPUSH
1634: CALL_OW 67
// Say ( Sevi , DDeath-Vse-1 ) ;
1638: LD_EXP 16
1642: PPUSH
1643: LD_STRING DDeath-Vse-1
1645: PPUSH
1646: CALL_OW 88
// end ;
1650: PPOPN 2
1652: END
// every 0 0$1 trigger AssaultStarted do var i , tmp ;
1653: LD_EXP 8
1657: IFFALSE 2109
1659: GO 1661
1661: DISABLE
1662: LD_INT 0
1664: PPUSH
1665: PPUSH
// begin PriorityAttack ( 6 , BetaA ) ;
1666: LD_INT 6
1668: PPUSH
1669: LD_INT 1
1671: PPUSH
1672: CALL_OW 470
// PriorityAttack ( 6 , BetaB ) ;
1676: LD_INT 6
1678: PPUSH
1679: LD_INT 3
1681: PPUSH
1682: CALL_OW 470
// repeat for i in RuArmada do
1686: LD_ADDR_VAR 0 1
1690: PUSH
1691: LD_EXP 17
1695: PUSH
1696: FOR_IN
1697: IFFALSE 1735
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
1699: LD_VAR 0 1
1703: PPUSH
1704: LD_INT 22
1706: PUSH
1707: LD_INT 1
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: PPUSH
1714: CALL_OW 69
1718: PPUSH
1719: LD_VAR 0 1
1723: PPUSH
1724: CALL_OW 74
1728: PPUSH
1729: CALL_OW 115
1733: GO 1696
1735: POP
1736: POP
// wait ( 0 0$1 ) until FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_type , unit_human ] ] ) < 10 and IsDead ( Yashin ) and IsDead ( Popov ) and IsDead ( Gaydar ) and IsDead ( Sevi ) ;
1737: LD_INT 35
1739: PPUSH
1740: CALL_OW 67
1744: LD_INT 1
1746: PUSH
1747: LD_INT 22
1749: PUSH
1750: LD_INT 6
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 21
1759: PUSH
1760: LD_INT 1
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: PPUSH
1772: CALL_OW 69
1776: PUSH
1777: LD_INT 10
1779: LESS
1780: PUSH
1781: LD_EXP 13
1785: PPUSH
1786: CALL_OW 301
1790: AND
1791: PUSH
1792: LD_EXP 14
1796: PPUSH
1797: CALL_OW 301
1801: AND
1802: PUSH
1803: LD_EXP 15
1807: PPUSH
1808: CALL_OW 301
1812: AND
1813: PUSH
1814: LD_EXP 16
1818: PPUSH
1819: CALL_OW 301
1823: AND
1824: IFFALSE 1686
// AssaultStarted := false ;
1826: LD_ADDR_EXP 8
1830: PUSH
1831: LD_INT 0
1833: ST_TO_ADDR
// ComMoveToArea ( FilterAllUnits ( [ f_side , 6 ] ) , RUArrivalArea ) ;
1834: LD_INT 22
1836: PUSH
1837: LD_INT 6
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: PPUSH
1844: CALL_OW 69
1848: PPUSH
1849: LD_INT 5
1851: PPUSH
1852: CALL_OW 113
// RuSpeaker := FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_sex , sex_male ] , [ f_type , unit_human ] , [ f_lives , 500 ] ] ) ;
1856: LD_ADDR_EXP 5
1860: PUSH
1861: LD_INT 1
1863: PUSH
1864: LD_INT 22
1866: PUSH
1867: LD_INT 6
1869: PUSH
1870: EMPTY
1871: LIST
1872: LIST
1873: PUSH
1874: LD_INT 26
1876: PUSH
1877: LD_INT 1
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: PUSH
1884: LD_INT 21
1886: PUSH
1887: LD_INT 1
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PUSH
1894: LD_INT 24
1896: PUSH
1897: LD_INT 500
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: PPUSH
1911: CALL_OW 69
1915: ST_TO_ADDR
// if RuSpeaker then
1916: LD_EXP 5
1920: IFFALSE 1938
// Say ( RuSpeaker [ 1 ] , DRuSol-A2 ) ;
1922: LD_EXP 5
1926: PUSH
1927: LD_INT 1
1929: ARRAY
1930: PPUSH
1931: LD_STRING DRuSol-A2
1933: PPUSH
1934: CALL_OW 88
// wait ( 0 0$30 ) ;
1938: LD_INT 1050
1940: PPUSH
1941: CALL_OW 67
// DialogueOn ;
1945: CALL_OW 6
// Say ( Brighton , DBrighton-B1 ) ;
1949: LD_EXP 9
1953: PPUSH
1954: LD_STRING DBrighton-B1
1956: PPUSH
1957: CALL_OW 88
// Say ( Palmer , DPalmer-B1 ) ;
1961: LD_EXP 10
1965: PPUSH
1966: LD_STRING DPalmer-B1
1968: PPUSH
1969: CALL_OW 88
// Say ( Brighton , DBrighton-B2 ) ;
1973: LD_EXP 9
1977: PPUSH
1978: LD_STRING DBrighton-B2
1980: PPUSH
1981: CALL_OW 88
// SayRadio ( Burlak , DBurlak-B1 ) ;
1985: LD_EXP 19
1989: PPUSH
1990: LD_STRING DBurlak-B1
1992: PPUSH
1993: CALL_OW 94
// Say ( Brighton , DBrighton-B3 ) ;
1997: LD_EXP 9
2001: PPUSH
2002: LD_STRING DBrighton-B3
2004: PPUSH
2005: CALL_OW 88
// Say ( Palmer , DPalmer-B2 ) ;
2009: LD_EXP 10
2013: PPUSH
2014: LD_STRING DPalmer-B2
2016: PPUSH
2017: CALL_OW 88
// Say ( Brighton , DBrighton-B4 ) ;
2021: LD_EXP 9
2025: PPUSH
2026: LD_STRING DBrighton-B4
2028: PPUSH
2029: CALL_OW 88
// Say ( Brighton , DBrighton-B5 ) ;
2033: LD_EXP 9
2037: PPUSH
2038: LD_STRING DBrighton-B5
2040: PPUSH
2041: CALL_OW 88
// DialogueOff ;
2045: CALL_OW 7
// ChangeMissionObjectives ( C2 ) ;
2049: LD_STRING C2
2051: PPUSH
2052: CALL_OW 337
// FirstAssaultRepelled := true ;
2056: LD_ADDR_EXP 4
2060: PUSH
2061: LD_INT 1
2063: ST_TO_ADDR
// RemoveUnit ( Bulldozers [ 1 ] ) ;
2064: LD_EXP 18
2068: PUSH
2069: LD_INT 1
2071: ARRAY
2072: PPUSH
2073: CALL_OW 64
// RemoveUnit ( Bulldozers [ 2 ] ) ;
2077: LD_EXP 18
2081: PUSH
2082: LD_INT 2
2084: ARRAY
2085: PPUSH
2086: CALL_OW 64
// AddComExitVehicle ( FilterAllUnits ( [ f_side , 6 ] ) ) ;
2090: LD_INT 22
2092: PUSH
2093: LD_INT 6
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: PPUSH
2100: CALL_OW 69
2104: PPUSH
2105: CALL_OW 181
// end ;
2109: PPOPN 2
2111: END
// every 0 0$1 trigger FirstAssaultRepelled do var unit , insideUnit ;
2112: LD_EXP 4
2116: IFFALSE 2281
2118: GO 2120
2120: DISABLE
2121: LD_INT 0
2123: PPUSH
2124: PPUSH
// begin enable ;
2125: ENABLE
// if FilterUnitsInArea ( RUArrivalArea , [ [ f_side , 6 ] ] ) = 0 then
2126: LD_INT 5
2128: PPUSH
2129: LD_INT 22
2131: PUSH
2132: LD_INT 6
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: PUSH
2139: EMPTY
2140: LIST
2141: PPUSH
2142: CALL_OW 70
2146: PUSH
2147: LD_INT 0
2149: EQUAL
2150: IFFALSE 2154
// exit ;
2152: GO 2281
// for unit in FilterUnitsInArea ( RUArrivalArea , [ [ f_side , 6 ] ] ) do
2154: LD_ADDR_VAR 0 1
2158: PUSH
2159: LD_INT 5
2161: PPUSH
2162: LD_INT 22
2164: PUSH
2165: LD_INT 6
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: PUSH
2172: EMPTY
2173: LIST
2174: PPUSH
2175: CALL_OW 70
2179: PUSH
2180: FOR_IN
2181: IFFALSE 2279
// begin SetSide ( unit , 3 ) ;
2183: LD_VAR 0 1
2187: PPUSH
2188: LD_INT 3
2190: PPUSH
2191: CALL_OW 235
// if ( GetType ( unit ) = unit_vehicle ) then
2195: LD_VAR 0 1
2199: PPUSH
2200: CALL_OW 247
2204: PUSH
2205: LD_INT 2
2207: EQUAL
2208: IFFALSE 2244
// for insideUnit in UnitsInside ( unit ) do
2210: LD_ADDR_VAR 0 2
2214: PUSH
2215: LD_VAR 0 1
2219: PPUSH
2220: CALL_OW 313
2224: PUSH
2225: FOR_IN
2226: IFFALSE 2242
// SetSide ( insideUnit , 3 ) ;
2228: LD_VAR 0 2
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: CALL_OW 235
2240: GO 2225
2242: POP
2243: POP
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
2244: LD_ADDR_EXP 63
2248: PUSH
2249: LD_EXP 63
2253: PPUSH
2254: LD_INT 1
2256: PPUSH
2257: LD_INT 22
2259: PUSH
2260: LD_INT 3
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: PPUSH
2267: CALL_OW 69
2271: PPUSH
2272: CALL_OW 1
2276: ST_TO_ADDR
// end ;
2277: GO 2180
2279: POP
2280: POP
// end ;
2281: PPOPN 2
2283: END
// every 0 0$1 trigger FirstAssaultRepelled and jmmArrival > 0 0$00 do
2284: LD_EXP 4
2288: PUSH
2289: LD_EXP 41
2293: PUSH
2294: LD_INT 0
2296: GREATER
2297: AND
2298: IFFALSE 2318
2300: GO 2302
2302: DISABLE
// begin enable ;
2303: ENABLE
// jmmArrival := jmmArrival - 0 0$01 ;
2304: LD_ADDR_EXP 41
2308: PUSH
2309: LD_EXP 41
2313: PUSH
2314: LD_INT 35
2316: MINUS
2317: ST_TO_ADDR
// end ;
2318: END
// export JMM_Arrived ; every 0 0$1 trigger jmmArrival = 0 0$00 do
2319: LD_EXP 41
2323: PUSH
2324: LD_INT 0
2326: EQUAL
2327: IFFALSE 2433
2329: GO 2331
2331: DISABLE
// begin JMMReinforcement ;
2332: CALL 5195 0 0
// DialogueOn ;
2336: CALL_OW 6
// CenterOnUnits ( JMM ) ;
2340: LD_EXP 37
2344: PPUSH
2345: CALL_OW 85
// Say ( JMM , DJMM-F1 ) ;
2349: LD_EXP 37
2353: PPUSH
2354: LD_STRING DJMM-F1
2356: PPUSH
2357: CALL_OW 88
// if RussiansDefeated then
2361: LD_EXP 44
2365: IFFALSE 2391
// begin AddMedal ( Russians , 1 ) ;
2367: LD_STRING Russians
2369: PPUSH
2370: LD_INT 1
2372: PPUSH
2373: CALL_OW 101
// Say ( Brighton , DBrighton-F1a ) ;
2377: LD_EXP 9
2381: PPUSH
2382: LD_STRING DBrighton-F1a
2384: PPUSH
2385: CALL_OW 88
// end else
2389: GO 2421
// begin AddMedal ( Russians , - 1 ) ;
2391: LD_STRING Russians
2393: PPUSH
2394: LD_INT 1
2396: NEG
2397: PPUSH
2398: CALL_OW 101
// Say ( Brighton , DBrighton-F1 ) ;
2402: LD_EXP 9
2406: PPUSH
2407: LD_STRING DBrighton-F1
2409: PPUSH
2410: CALL_OW 88
// ChangeMissionObjectives ( C3 ) ;
2414: LD_STRING C3
2416: PPUSH
2417: CALL_OW 337
// end ; DialogueOff ;
2421: CALL_OW 7
// JMM_Arrived := true ;
2425: LD_ADDR_EXP 6
2429: PUSH
2430: LD_INT 1
2432: ST_TO_ADDR
// end ;
2433: END
// every 0 0$1 trigger JMM_Arrived and See ( 1 , Burlak ) do
2434: LD_EXP 6
2438: PUSH
2439: LD_INT 1
2441: PPUSH
2442: LD_EXP 19
2446: PPUSH
2447: CALL_OW 292
2451: AND
2452: IFFALSE 2481
2454: GO 2456
2456: DISABLE
// begin Say ( Burlak , DBurlak ) ;
2457: LD_EXP 19
2461: PPUSH
2462: LD_STRING DBurlak
2464: PPUSH
2465: CALL_OW 88
// Say ( JMM , DJMM ) ;
2469: LD_EXP 37
2473: PPUSH
2474: LD_STRING DJMM
2476: PPUSH
2477: CALL_OW 88
// end ;
2481: END
// export LaserBuilt ; every 0 0$1 trigger FilterAllUnits ( [ f_and , [ f_side , 1 ] , [ f_or , [ f_weapon , us_laser ] , [ f_bweapon , us_laser ] ] ] ) > 1 do
2482: LD_INT 1
2484: PUSH
2485: LD_INT 22
2487: PUSH
2488: LD_INT 1
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: PUSH
2495: LD_INT 2
2497: PUSH
2498: LD_INT 34
2500: PUSH
2501: LD_INT 9
2503: PUSH
2504: EMPTY
2505: LIST
2506: LIST
2507: PUSH
2508: LD_INT 35
2510: PUSH
2511: LD_INT 9
2513: PUSH
2514: EMPTY
2515: LIST
2516: LIST
2517: PUSH
2518: EMPTY
2519: LIST
2520: LIST
2521: LIST
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: LIST
2527: PPUSH
2528: CALL_OW 69
2532: PUSH
2533: LD_INT 1
2535: GREATER
2536: IFFALSE 2549
2538: GO 2540
2540: DISABLE
// begin LaserBuilt := true ;
2541: LD_ADDR_EXP 7
2545: PUSH
2546: LD_INT 1
2548: ST_TO_ADDR
// end ;
2549: END
// export AssaultStarted ; every 0 0$1 trigger AssaultStarted and See ( 6 , NearestUnitToUnit ( FilterAllUnits ( [ f_and , [ [ f_side , 1 ] , [ f_bweapon , us_laser ] ] ] ) , IsInUnit ( Sevi ) ) ) do
2550: LD_EXP 8
2554: PUSH
2555: LD_INT 6
2557: PPUSH
2558: LD_INT 1
2560: PUSH
2561: LD_INT 22
2563: PUSH
2564: LD_INT 1
2566: PUSH
2567: EMPTY
2568: LIST
2569: LIST
2570: PUSH
2571: LD_INT 35
2573: PUSH
2574: LD_INT 9
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: PUSH
2585: EMPTY
2586: LIST
2587: LIST
2588: PPUSH
2589: CALL_OW 69
2593: PPUSH
2594: LD_EXP 16
2598: PPUSH
2599: CALL_OW 310
2603: PPUSH
2604: CALL_OW 74
2608: PPUSH
2609: CALL_OW 292
2613: AND
2614: IFFALSE 2650
2616: GO 2618
2618: DISABLE
// begin wait ( 0 0$5 ) ;
2619: LD_INT 175
2621: PPUSH
2622: CALL_OW 67
// Say ( Sevi , DDeath-Vse-2 ) ;
2626: LD_EXP 16
2630: PPUSH
2631: LD_STRING DDeath-Vse-2
2633: PPUSH
2634: CALL_OW 88
// Say ( Yashin , DDeath-Yas-2 ) ;
2638: LD_EXP 13
2642: PPUSH
2643: LD_STRING DDeath-Yas-2
2645: PPUSH
2646: CALL_OW 88
// end ;
2650: END
// every 0 0$1 trigger AssaultStarted do
2651: LD_EXP 8
2655: IFFALSE 2679
2657: GO 2659
2659: DISABLE
// begin wait ( 0 0$20 ) ;
2660: LD_INT 700
2662: PPUSH
2663: CALL_OW 67
// Say ( Popov , DDeath-Pop-2 ) ;
2667: LD_EXP 14
2671: PPUSH
2672: LD_STRING DDeath-Pop-2
2674: PPUSH
2675: CALL_OW 88
// end ;
2679: END
// every 0 0$1 trigger MissionStart do
2680: LD_EXP 1
2684: IFFALSE 2726
2686: GO 2688
2688: DISABLE
// begin wait ( rand ( 0 0$50 , 2 2$20 ) ) ;
2689: LD_INT 1750
2691: PPUSH
2692: LD_INT 4900
2694: PPUSH
2695: CALL_OW 12
2699: PPUSH
2700: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
2704: LD_INT 2
2706: PPUSH
2707: LD_INT 5
2709: PPUSH
2710: CALL_OW 12
2714: PPUSH
2715: LD_INT 12
2717: PPUSH
2718: LD_INT 1
2720: PPUSH
2721: CALL_OW 55
// enable ;
2725: ENABLE
// end ;
2726: END
// every 0 0$1 trigger MissionStart do
2727: LD_EXP 1
2731: IFFALSE 2754
2733: GO 2735
2735: DISABLE
// begin enable ;
2736: ENABLE
// display_Strings := [ #tick , tick ] ;
2737: LD_ADDR_OWVAR 47
2741: PUSH
2742: LD_STRING #tick
2744: PUSH
2745: LD_OWVAR 1
2749: PUSH
2750: EMPTY
2751: LIST
2752: LIST
2753: ST_TO_ADDR
// end ; end_of_file
2754: END
// export Brighton , Palmer , Megan ; export BetaSquad ; export function PrepareHeroes ; begin
2755: LD_INT 0
2757: PPUSH
// uc_side := 1 ;
2758: LD_ADDR_OWVAR 20
2762: PUSH
2763: LD_INT 1
2765: ST_TO_ADDR
// hc_class = class_soldier ;
2766: LD_ADDR_OWVAR 28
2770: PUSH
2771: LD_INT 1
2773: ST_TO_ADDR
// uc_nation := nation_american ;
2774: LD_ADDR_OWVAR 21
2778: PUSH
2779: LD_INT 1
2781: ST_TO_ADDR
// hc_sex = sex_male ;
2782: LD_ADDR_OWVAR 27
2786: PUSH
2787: LD_INT 1
2789: ST_TO_ADDR
// hc_importance = 110 ;
2790: LD_ADDR_OWVAR 32
2794: PUSH
2795: LD_INT 110
2797: ST_TO_ADDR
// hc_basic_skills = [ 5 , 4 , 5 , 3 ] ;
2798: LD_ADDR_OWVAR 30
2802: PUSH
2803: LD_INT 5
2805: PUSH
2806: LD_INT 4
2808: PUSH
2809: LD_INT 5
2811: PUSH
2812: LD_INT 3
2814: PUSH
2815: EMPTY
2816: LIST
2817: LIST
2818: LIST
2819: LIST
2820: ST_TO_ADDR
// hc_skills = [ 9 , 6 , 7 , 6 ] ;
2821: LD_ADDR_OWVAR 31
2825: PUSH
2826: LD_INT 9
2828: PUSH
2829: LD_INT 6
2831: PUSH
2832: LD_INT 7
2834: PUSH
2835: LD_INT 6
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: LIST
2842: LIST
2843: ST_TO_ADDR
// hc_attr = [ 12 , 10 ] ;
2844: LD_ADDR_OWVAR 29
2848: PUSH
2849: LD_INT 12
2851: PUSH
2852: LD_INT 10
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: ST_TO_ADDR
// hc_name := Gerard Brighton ;
2859: LD_ADDR_OWVAR 26
2863: PUSH
2864: LD_STRING Gerard Brighton
2866: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2867: LD_ADDR_OWVAR 33
2871: PUSH
2872: LD_STRING Beta_Skirmish
2874: ST_TO_ADDR
// hc_face_number := 1 ;
2875: LD_ADDR_OWVAR 34
2879: PUSH
2880: LD_INT 1
2882: ST_TO_ADDR
// Brighton := CreateHuman ;
2883: LD_ADDR_EXP 9
2887: PUSH
2888: CALL_OW 44
2892: ST_TO_ADDR
// uc_nation := nation_american ;
2893: LD_ADDR_OWVAR 21
2897: PUSH
2898: LD_INT 1
2900: ST_TO_ADDR
// hc_importance = 80 ;
2901: LD_ADDR_OWVAR 32
2905: PUSH
2906: LD_INT 80
2908: ST_TO_ADDR
// hc_sex = sex_male ;
2909: LD_ADDR_OWVAR 27
2913: PUSH
2914: LD_INT 1
2916: ST_TO_ADDR
// hc_basic_skills = [ 5 , 5 , 3 , 1 ] ;
2917: LD_ADDR_OWVAR 30
2921: PUSH
2922: LD_INT 5
2924: PUSH
2925: LD_INT 5
2927: PUSH
2928: LD_INT 3
2930: PUSH
2931: LD_INT 1
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: LIST
2938: LIST
2939: ST_TO_ADDR
// hc_skills = [ 7 , 6 , 5 , 3 ] ;
2940: LD_ADDR_OWVAR 31
2944: PUSH
2945: LD_INT 7
2947: PUSH
2948: LD_INT 6
2950: PUSH
2951: LD_INT 5
2953: PUSH
2954: LD_INT 3
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: LIST
2961: LIST
2962: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2963: LD_ADDR_OWVAR 29
2967: PUSH
2968: LD_INT 10
2970: PUSH
2971: LD_INT 10
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: ST_TO_ADDR
// hc_name := Brian Palmer ;
2978: LD_ADDR_OWVAR 26
2982: PUSH
2983: LD_STRING Brian Palmer
2985: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2986: LD_ADDR_OWVAR 33
2990: PUSH
2991: LD_STRING Beta_Skirmish
2993: ST_TO_ADDR
// hc_face_number := 3 ;
2994: LD_ADDR_OWVAR 34
2998: PUSH
2999: LD_INT 3
3001: ST_TO_ADDR
// Palmer := CreateHuman ;
3002: LD_ADDR_EXP 10
3006: PUSH
3007: CALL_OW 44
3011: ST_TO_ADDR
// hc_class = class_scientistic ;
3012: LD_ADDR_OWVAR 28
3016: PUSH
3017: LD_INT 4
3019: ST_TO_ADDR
// uc_nation := nation_american ;
3020: LD_ADDR_OWVAR 21
3024: PUSH
3025: LD_INT 1
3027: ST_TO_ADDR
// hc_importance = 70 ;
3028: LD_ADDR_OWVAR 32
3032: PUSH
3033: LD_INT 70
3035: ST_TO_ADDR
// hc_sex = sex_female ;
3036: LD_ADDR_OWVAR 27
3040: PUSH
3041: LD_INT 2
3043: ST_TO_ADDR
// hc_basic_skills = [ 3 , 2 , 4 , 6 ] ;
3044: LD_ADDR_OWVAR 30
3048: PUSH
3049: LD_INT 3
3051: PUSH
3052: LD_INT 2
3054: PUSH
3055: LD_INT 4
3057: PUSH
3058: LD_INT 6
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: ST_TO_ADDR
// hc_skills = [ 4 , 2 , 5 , 8 ] ;
3067: LD_ADDR_OWVAR 31
3071: PUSH
3072: LD_INT 4
3074: PUSH
3075: LD_INT 2
3077: PUSH
3078: LD_INT 5
3080: PUSH
3081: LD_INT 8
3083: PUSH
3084: EMPTY
3085: LIST
3086: LIST
3087: LIST
3088: LIST
3089: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
3090: LD_ADDR_OWVAR 29
3094: PUSH
3095: LD_INT 10
3097: PUSH
3098: LD_INT 10
3100: PUSH
3101: EMPTY
3102: LIST
3103: LIST
3104: ST_TO_ADDR
// hc_name := Megan Armitage ;
3105: LD_ADDR_OWVAR 26
3109: PUSH
3110: LD_STRING Megan Armitage
3112: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
3113: LD_ADDR_OWVAR 33
3117: PUSH
3118: LD_STRING Beta_Skirmish
3120: ST_TO_ADDR
// hc_face_number := 4 ;
3121: LD_ADDR_OWVAR 34
3125: PUSH
3126: LD_INT 4
3128: ST_TO_ADDR
// Megan := CreateHuman ;
3129: LD_ADDR_EXP 11
3133: PUSH
3134: CALL_OW 44
3138: ST_TO_ADDR
// end ;
3139: LD_VAR 0 1
3143: RET
// export function PrepareBeta ; var i , filter , un , soldiers ; begin
3144: LD_INT 0
3146: PPUSH
3147: PPUSH
3148: PPUSH
3149: PPUSH
3150: PPUSH
// uc_side := 1 ;
3151: LD_ADDR_OWVAR 20
3155: PUSH
3156: LD_INT 1
3158: ST_TO_ADDR
// uc_nation := nation_american ;
3159: LD_ADDR_OWVAR 21
3163: PUSH
3164: LD_INT 1
3166: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
3167: LD_ADDR_VAR 0 2
3171: PUSH
3172: LD_INT 22
3174: PUSH
3175: LD_INT 1
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: LD_INT 30
3184: PUSH
3185: LD_INT 32
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: EMPTY
3193: LIST
3194: LIST
3195: PPUSH
3196: CALL_OW 69
3200: PUSH
3201: FOR_IN
3202: IFFALSE 3257
// PlaceWeaponTurret ( i , [ us_light_gun , us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun , us_gatling_gun ] [ rand ( 1 , 7 ) ] ) ;
3204: LD_VAR 0 2
3208: PPUSH
3209: LD_INT 3
3211: PUSH
3212: LD_INT 3
3214: PUSH
3215: LD_INT 4
3217: PUSH
3218: LD_INT 5
3220: PUSH
3221: LD_INT 11
3223: PUSH
3224: LD_INT 3
3226: PUSH
3227: LD_INT 4
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: LIST
3234: LIST
3235: LIST
3236: LIST
3237: LIST
3238: PUSH
3239: LD_INT 1
3241: PPUSH
3242: LD_INT 7
3244: PPUSH
3245: CALL_OW 12
3249: ARRAY
3250: PPUSH
3251: CALL_OW 431
3255: GO 3201
3257: POP
3258: POP
// hc_name :=  ;
3259: LD_ADDR_OWVAR 26
3263: PUSH
3264: LD_STRING 
3266: ST_TO_ADDR
// hc_gallery :=  ;
3267: LD_ADDR_OWVAR 33
3271: PUSH
3272: LD_STRING 
3274: ST_TO_ADDR
// for i = 1 to [ 6 , 5 , 5 ] [ Difficulty ] do
3275: LD_ADDR_VAR 0 2
3279: PUSH
3280: DOUBLE
3281: LD_INT 1
3283: DEC
3284: ST_TO_ADDR
3285: LD_INT 6
3287: PUSH
3288: LD_INT 5
3290: PUSH
3291: LD_INT 5
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: LIST
3298: PUSH
3299: LD_OWVAR 67
3303: ARRAY
3304: PUSH
3305: FOR_TO
3306: IFFALSE 3364
// begin PrepareSoldier ( 1 , game_skill ) ;
3308: LD_INT 1
3310: PPUSH
3311: LD_EXP 39
3315: PPUSH
3316: CALL_OW 381
// un := CreateHuman ;
3320: LD_ADDR_VAR 0 4
3324: PUSH
3325: CALL_OW 44
3329: ST_TO_ADDR
// filter := filter ^ un ;
3330: LD_ADDR_VAR 0 3
3334: PUSH
3335: LD_VAR 0 3
3339: PUSH
3340: LD_VAR 0 4
3344: ADD
3345: ST_TO_ADDR
// soldiers := soldiers ^ un ;
3346: LD_ADDR_VAR 0 5
3350: PUSH
3351: LD_VAR 0 5
3355: PUSH
3356: LD_VAR 0 4
3360: ADD
3361: ST_TO_ADDR
// end ;
3362: GO 3305
3364: POP
3365: POP
// for i = 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3366: LD_ADDR_VAR 0 2
3370: PUSH
3371: DOUBLE
3372: LD_INT 1
3374: DEC
3375: ST_TO_ADDR
3376: LD_INT 3
3378: PUSH
3379: LD_INT 2
3381: PUSH
3382: LD_INT 2
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: LIST
3389: PUSH
3390: LD_OWVAR 67
3394: ARRAY
3395: PUSH
3396: FOR_TO
3397: IFFALSE 3451
// begin PrepareEngineer ( 0 , game_skill ) ;
3399: LD_INT 0
3401: PPUSH
3402: LD_EXP 39
3406: PPUSH
3407: CALL_OW 382
// un := CreateHuman ;
3411: LD_ADDR_VAR 0 4
3415: PUSH
3416: CALL_OW 44
3420: ST_TO_ADDR
// filter := filter ^ un ;
3421: LD_ADDR_VAR 0 3
3425: PUSH
3426: LD_VAR 0 3
3430: PUSH
3431: LD_VAR 0 4
3435: ADD
3436: ST_TO_ADDR
// PlaceHumanInUnit ( un , BetaB ) ;
3437: LD_VAR 0 4
3441: PPUSH
3442: LD_INT 3
3444: PPUSH
3445: CALL_OW 52
// end ;
3449: GO 3396
3451: POP
3452: POP
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
3453: LD_ADDR_VAR 0 2
3457: PUSH
3458: DOUBLE
3459: LD_INT 1
3461: DEC
3462: ST_TO_ADDR
3463: LD_INT 4
3465: PUSH
3466: LD_INT 3
3468: PUSH
3469: LD_INT 3
3471: PUSH
3472: EMPTY
3473: LIST
3474: LIST
3475: LIST
3476: PUSH
3477: LD_OWVAR 67
3481: ARRAY
3482: PUSH
3483: FOR_TO
3484: IFFALSE 3538
// begin PrepareMechanic ( 0 , game_skill ) ;
3486: LD_INT 0
3488: PPUSH
3489: LD_EXP 39
3493: PPUSH
3494: CALL_OW 383
// un := CreateHuman ;
3498: LD_ADDR_VAR 0 4
3502: PUSH
3503: CALL_OW 44
3507: ST_TO_ADDR
// filter := filter ^ un ;
3508: LD_ADDR_VAR 0 3
3512: PUSH
3513: LD_VAR 0 3
3517: PUSH
3518: LD_VAR 0 4
3522: ADD
3523: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmFac ) ;
3524: LD_VAR 0 4
3528: PPUSH
3529: LD_INT 8
3531: PPUSH
3532: CALL_OW 52
// end ;
3536: GO 3483
3538: POP
3539: POP
// for i = 1 to 2 do
3540: LD_ADDR_VAR 0 2
3544: PUSH
3545: DOUBLE
3546: LD_INT 1
3548: DEC
3549: ST_TO_ADDR
3550: LD_INT 2
3552: PUSH
3553: FOR_TO
3554: IFFALSE 3608
// begin PrepareScientist ( 0 , game_skill ) ;
3556: LD_INT 0
3558: PPUSH
3559: LD_EXP 39
3563: PPUSH
3564: CALL_OW 384
// un := CreateHuman ;
3568: LD_ADDR_VAR 0 4
3572: PUSH
3573: CALL_OW 44
3577: ST_TO_ADDR
// filter := filter ^ un ;
3578: LD_ADDR_VAR 0 3
3582: PUSH
3583: LD_VAR 0 3
3587: PUSH
3588: LD_VAR 0 4
3592: ADD
3593: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmLab ) ;
3594: LD_VAR 0 4
3598: PPUSH
3599: LD_INT 14
3601: PPUSH
3602: CALL_OW 52
// end ;
3606: GO 3553
3608: POP
3609: POP
// for i = 1 to soldiers do
3610: LD_ADDR_VAR 0 2
3614: PUSH
3615: DOUBLE
3616: LD_INT 1
3618: DEC
3619: ST_TO_ADDR
3620: LD_VAR 0 5
3624: PUSH
3625: FOR_TO
3626: IFFALSE 3651
// PlaceUnitArea ( soldiers [ i ] , spawn_area , false ) ;
3628: LD_VAR 0 5
3632: PUSH
3633: LD_VAR 0 2
3637: ARRAY
3638: PPUSH
3639: LD_INT 1
3641: PPUSH
3642: LD_INT 0
3644: PPUSH
3645: CALL_OW 49
3649: GO 3625
3651: POP
3652: POP
// PlaceUnitXY ( Brighton , 51 , 43 , false ) ;
3653: LD_EXP 9
3657: PPUSH
3658: LD_INT 51
3660: PPUSH
3661: LD_INT 43
3663: PPUSH
3664: LD_INT 0
3666: PPUSH
3667: CALL_OW 48
// PlaceUnitXY ( Palmer , 55 , 58 , false ) ;
3671: LD_EXP 10
3675: PPUSH
3676: LD_INT 55
3678: PPUSH
3679: LD_INT 58
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 48
// PlaceUnitXY ( Megan , 39 , 36 , false ) ;
3689: LD_EXP 11
3693: PPUSH
3694: LD_INT 39
3696: PPUSH
3697: LD_INT 36
3699: PPUSH
3700: LD_INT 0
3702: PPUSH
3703: CALL_OW 48
// BetaSquad := filter diff 0 ;
3707: LD_ADDR_EXP 12
3711: PUSH
3712: LD_VAR 0 3
3716: PUSH
3717: LD_INT 0
3719: DIFF
3720: ST_TO_ADDR
// end ;
3721: LD_VAR 0 1
3725: RET
// export Yashin , Popov , Gaydar , Sevi ; export RUArmada ; export function PrepareRUArmada ; var i , vehicle , soldiers , un , vehs ; begin
3726: LD_INT 0
3728: PPUSH
3729: PPUSH
3730: PPUSH
3731: PPUSH
3732: PPUSH
3733: PPUSH
// uc_side := 6 ;
3734: LD_ADDR_OWVAR 20
3738: PUSH
3739: LD_INT 6
3741: ST_TO_ADDR
// uc_nation := nation_russian ;
3742: LD_ADDR_OWVAR 21
3746: PUSH
3747: LD_INT 3
3749: ST_TO_ADDR
// soldiers := [ ] ;
3750: LD_ADDR_VAR 0 4
3754: PUSH
3755: EMPTY
3756: ST_TO_ADDR
// vehs := [ ] ;
3757: LD_ADDR_VAR 0 6
3761: PUSH
3762: EMPTY
3763: ST_TO_ADDR
// RUArmada := [ ] ;
3764: LD_ADDR_EXP 17
3768: PUSH
3769: EMPTY
3770: ST_TO_ADDR
// Yashin := NewCharacter ( Yashin ) ;
3771: LD_ADDR_EXP 13
3775: PUSH
3776: LD_STRING Yashin
3778: PPUSH
3779: CALL_OW 25
3783: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
3784: LD_ADDR_EXP 14
3788: PUSH
3789: LD_STRING Popov
3791: PPUSH
3792: CALL_OW 25
3796: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
3797: LD_ADDR_EXP 15
3801: PUSH
3802: LD_STRING Gaydar
3804: PPUSH
3805: CALL_OW 25
3809: ST_TO_ADDR
// Sevi := NewCharacter ( Vsevolod ) ;
3810: LD_ADDR_EXP 16
3814: PUSH
3815: LD_STRING Vsevolod
3817: PPUSH
3818: CALL_OW 25
3822: ST_TO_ADDR
// for i = 1 to 16 do
3823: LD_ADDR_VAR 0 2
3827: PUSH
3828: DOUBLE
3829: LD_INT 1
3831: DEC
3832: ST_TO_ADDR
3833: LD_INT 16
3835: PUSH
3836: FOR_TO
3837: IFFALSE 3879
// begin PrepareSoldier ( 0 , game_eskill ) ;
3839: LD_INT 0
3841: PPUSH
3842: LD_EXP 40
3846: PPUSH
3847: CALL_OW 381
// un := CreateHuman ;
3851: LD_ADDR_VAR 0 5
3855: PUSH
3856: CALL_OW 44
3860: ST_TO_ADDR
// soldiers := soldiers ^ un ;
3861: LD_ADDR_VAR 0 4
3865: PUSH
3866: LD_VAR 0 4
3870: PUSH
3871: LD_VAR 0 5
3875: ADD
3876: ST_TO_ADDR
// end ;
3877: GO 3836
3879: POP
3880: POP
// soldiers := Yashin ^ Popov ^ Gaydar ^ Sevi ^ soldiers ;
3881: LD_ADDR_VAR 0 4
3885: PUSH
3886: LD_EXP 13
3890: PUSH
3891: LD_EXP 14
3895: ADD
3896: PUSH
3897: LD_EXP 15
3901: ADD
3902: PUSH
3903: LD_EXP 16
3907: ADD
3908: PUSH
3909: LD_VAR 0 4
3913: ADD
3914: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_heavy_gun , 100 ) ;
3915: LD_INT 24
3917: PPUSH
3918: LD_INT 3
3920: PPUSH
3921: LD_INT 1
3923: PPUSH
3924: LD_INT 46
3926: PPUSH
3927: LD_INT 100
3929: PPUSH
3930: CALL 17280 0 5
// for i = 1 to 8 do
3934: LD_ADDR_VAR 0 2
3938: PUSH
3939: DOUBLE
3940: LD_INT 1
3942: DEC
3943: ST_TO_ADDR
3944: LD_INT 8
3946: PUSH
3947: FOR_TO
3948: IFFALSE 4031
// begin vehicle := CreateVehicle ;
3950: LD_ADDR_VAR 0 3
3954: PUSH
3955: CALL_OW 45
3959: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3960: LD_VAR 0 4
3964: PUSH
3965: LD_INT 1
3967: ARRAY
3968: PPUSH
3969: LD_VAR 0 3
3973: PPUSH
3974: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3978: LD_ADDR_VAR 0 4
3982: PUSH
3983: LD_VAR 0 4
3987: PUSH
3988: LD_VAR 0 4
3992: PUSH
3993: LD_INT 1
3995: ARRAY
3996: DIFF
3997: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3998: LD_VAR 0 3
4002: PPUSH
4003: LD_INT 5
4005: PPUSH
4006: LD_INT 0
4008: PPUSH
4009: CALL_OW 49
// vehs := vehs ^ vehicle ;
4013: LD_ADDR_VAR 0 6
4017: PUSH
4018: LD_VAR 0 6
4022: PUSH
4023: LD_VAR 0 3
4027: ADD
4028: ST_TO_ADDR
// end ;
4029: GO 3947
4031: POP
4032: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
4033: LD_INT 24
4035: PPUSH
4036: LD_INT 3
4038: PPUSH
4039: LD_INT 1
4041: PPUSH
4042: LD_INT 43
4044: PPUSH
4045: LD_INT 100
4047: PPUSH
4048: CALL 17280 0 5
// for i = 1 to 8 do
4052: LD_ADDR_VAR 0 2
4056: PUSH
4057: DOUBLE
4058: LD_INT 1
4060: DEC
4061: ST_TO_ADDR
4062: LD_INT 8
4064: PUSH
4065: FOR_TO
4066: IFFALSE 4149
// begin vehicle := CreateVehicle ;
4068: LD_ADDR_VAR 0 3
4072: PUSH
4073: CALL_OW 45
4077: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
4078: LD_VAR 0 4
4082: PUSH
4083: LD_INT 1
4085: ARRAY
4086: PPUSH
4087: LD_VAR 0 3
4091: PPUSH
4092: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
4096: LD_ADDR_VAR 0 4
4100: PUSH
4101: LD_VAR 0 4
4105: PUSH
4106: LD_VAR 0 4
4110: PUSH
4111: LD_INT 1
4113: ARRAY
4114: DIFF
4115: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4116: LD_VAR 0 3
4120: PPUSH
4121: LD_INT 5
4123: PPUSH
4124: LD_INT 0
4126: PPUSH
4127: CALL_OW 49
// vehs := vehs ^ vehicle ;
4131: LD_ADDR_VAR 0 6
4135: PUSH
4136: LD_VAR 0 6
4140: PUSH
4141: LD_VAR 0 3
4145: ADD
4146: ST_TO_ADDR
// end ;
4147: GO 4065
4149: POP
4150: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gun , 100 ) ;
4151: LD_INT 22
4153: PPUSH
4154: LD_INT 3
4156: PPUSH
4157: LD_INT 1
4159: PPUSH
4160: LD_INT 44
4162: PPUSH
4163: LD_INT 100
4165: PPUSH
4166: CALL 17280 0 5
// for i = 1 to 4 do
4170: LD_ADDR_VAR 0 2
4174: PUSH
4175: DOUBLE
4176: LD_INT 1
4178: DEC
4179: ST_TO_ADDR
4180: LD_INT 4
4182: PUSH
4183: FOR_TO
4184: IFFALSE 4267
// begin vehicle := CreateVehicle ;
4186: LD_ADDR_VAR 0 3
4190: PUSH
4191: CALL_OW 45
4195: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
4196: LD_VAR 0 4
4200: PUSH
4201: LD_INT 1
4203: ARRAY
4204: PPUSH
4205: LD_VAR 0 3
4209: PPUSH
4210: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
4214: LD_ADDR_VAR 0 4
4218: PUSH
4219: LD_VAR 0 4
4223: PUSH
4224: LD_VAR 0 4
4228: PUSH
4229: LD_INT 1
4231: ARRAY
4232: DIFF
4233: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4234: LD_VAR 0 3
4238: PPUSH
4239: LD_INT 5
4241: PPUSH
4242: LD_INT 0
4244: PPUSH
4245: CALL_OW 49
// vehs := vehs ^ vehicle ;
4249: LD_ADDR_VAR 0 6
4253: PUSH
4254: LD_VAR 0 6
4258: PUSH
4259: LD_VAR 0 3
4263: ADD
4264: ST_TO_ADDR
// end ;
4265: GO 4183
4267: POP
4268: POP
// RUArmada := vehs ;
4269: LD_ADDR_EXP 17
4273: PUSH
4274: LD_VAR 0 6
4278: ST_TO_ADDR
// SetMark ( [ IsInUnit ( Yashin ) , IsInUnit ( Popov ) , IsInUnit ( Gaydar ) , IsInUnit ( Sevi ) ] , - 6 ) ;
4279: LD_EXP 13
4283: PPUSH
4284: CALL_OW 310
4288: PUSH
4289: LD_EXP 14
4293: PPUSH
4294: CALL_OW 310
4298: PUSH
4299: LD_EXP 15
4303: PPUSH
4304: CALL_OW 310
4308: PUSH
4309: LD_EXP 16
4313: PPUSH
4314: CALL_OW 310
4318: PUSH
4319: EMPTY
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: PPUSH
4325: LD_INT 6
4327: NEG
4328: PPUSH
4329: CALL_OW 242
// end ;
4333: LD_VAR 0 1
4337: RET
// export Bulldozers ; export function PrepareRUBulldozers ; var i , vehicle ; begin
4338: LD_INT 0
4340: PPUSH
4341: PPUSH
4342: PPUSH
// uc_side := 6 ;
4343: LD_ADDR_OWVAR 20
4347: PUSH
4348: LD_INT 6
4350: ST_TO_ADDR
// uc_nation := nation_russian ;
4351: LD_ADDR_OWVAR 21
4355: PUSH
4356: LD_INT 3
4358: ST_TO_ADDR
// Bulldozers := [ ] ;
4359: LD_ADDR_EXP 18
4363: PUSH
4364: EMPTY
4365: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
4366: LD_INT 24
4368: PPUSH
4369: LD_INT 3
4371: PPUSH
4372: LD_INT 3
4374: PPUSH
4375: LD_INT 53
4377: PPUSH
4378: LD_INT 100
4380: PPUSH
4381: CALL 17280 0 5
// for i = 1 to 2 do
4385: LD_ADDR_VAR 0 2
4389: PUSH
4390: DOUBLE
4391: LD_INT 1
4393: DEC
4394: ST_TO_ADDR
4395: LD_INT 2
4397: PUSH
4398: FOR_TO
4399: IFFALSE 4444
// begin vehicle := CreateVehicle ;
4401: LD_ADDR_VAR 0 3
4405: PUSH
4406: CALL_OW 45
4410: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4411: LD_VAR 0 3
4415: PPUSH
4416: LD_INT 5
4418: PPUSH
4419: LD_INT 0
4421: PPUSH
4422: CALL_OW 49
// Bulldozers := Bulldozers ^ vehicle ;
4426: LD_ADDR_EXP 18
4430: PUSH
4431: LD_EXP 18
4435: PUSH
4436: LD_VAR 0 3
4440: ADD
4441: ST_TO_ADDR
// end ;
4442: GO 4398
4444: POP
4445: POP
// end ;
4446: LD_VAR 0 1
4450: RET
// export Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ; export function PrepareRUBase ; var i , filter , un ; begin
4451: LD_INT 0
4453: PPUSH
4454: PPUSH
4455: PPUSH
4456: PPUSH
// uc_side := 3 ;
4457: LD_ADDR_OWVAR 20
4461: PUSH
4462: LD_INT 3
4464: ST_TO_ADDR
// uc_nation := nation_russian ;
4465: LD_ADDR_OWVAR 21
4469: PUSH
4470: LD_INT 3
4472: ST_TO_ADDR
// hc_name :=  ;
4473: LD_ADDR_OWVAR 26
4477: PUSH
4478: LD_STRING 
4480: ST_TO_ADDR
// hc_gallery :=  ;
4481: LD_ADDR_OWVAR 33
4485: PUSH
4486: LD_STRING 
4488: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
4489: LD_ADDR_EXP 19
4493: PUSH
4494: LD_STRING Burlak
4496: PPUSH
4497: CALL_OW 25
4501: ST_TO_ADDR
// Gleb := NewCharacter ( Gleb ) ;
4502: LD_ADDR_EXP 20
4506: PUSH
4507: LD_STRING Gleb
4509: PPUSH
4510: CALL_OW 25
4514: ST_TO_ADDR
// Furmanov := NewCharacter ( Furmanov ) ;
4515: LD_ADDR_EXP 21
4519: PUSH
4520: LD_STRING Furmanov
4522: PPUSH
4523: CALL_OW 25
4527: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
4528: LD_ADDR_EXP 22
4532: PUSH
4533: LD_STRING Titov
4535: PPUSH
4536: CALL_OW 25
4540: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
4541: LD_ADDR_EXP 23
4545: PUSH
4546: LD_STRING Scholtze
4548: PPUSH
4549: CALL_OW 25
4553: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
4554: LD_ADDR_EXP 24
4558: PUSH
4559: LD_STRING Dolgov
4561: PPUSH
4562: CALL_OW 25
4566: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
4567: LD_ADDR_EXP 25
4571: PUSH
4572: LD_STRING Kapitsova
4574: PPUSH
4575: CALL_OW 25
4579: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
4580: LD_ADDR_EXP 26
4584: PUSH
4585: LD_STRING Karamazov
4587: PPUSH
4588: CALL_OW 25
4592: ST_TO_ADDR
// Kirlenkova := NewCharacter ( Kirlenkova ) ;
4593: LD_ADDR_EXP 27
4597: PUSH
4598: LD_STRING Kirlenkova
4600: PPUSH
4601: CALL_OW 25
4605: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
4606: LD_ADDR_EXP 28
4610: PUSH
4611: LD_STRING Kovalyuk
4613: PPUSH
4614: CALL_OW 25
4618: ST_TO_ADDR
// Kozlov := NewCharacter ( Kozlov ) ;
4619: LD_ADDR_EXP 29
4623: PUSH
4624: LD_STRING Kozlov
4626: PPUSH
4627: CALL_OW 25
4631: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
4632: LD_ADDR_EXP 30
4636: PUSH
4637: LD_STRING Kuzmov
4639: PPUSH
4640: CALL_OW 25
4644: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
4645: LD_ADDR_EXP 31
4649: PUSH
4650: LD_STRING Lipshchin
4652: PPUSH
4653: CALL_OW 25
4657: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
4658: LD_ADDR_EXP 32
4662: PUSH
4663: LD_STRING Oblukov
4665: PPUSH
4666: CALL_OW 25
4670: ST_TO_ADDR
// Xavier2 := NewCharacter ( Xavier2 ) ;
4671: LD_ADDR_EXP 33
4675: PUSH
4676: LD_STRING Xavier2
4678: PPUSH
4679: CALL_OW 25
4683: ST_TO_ADDR
// Gnyevko := NewCharacter ( Gnyevko ) ;
4684: LD_ADDR_EXP 34
4688: PUSH
4689: LD_STRING Gnyevko
4691: PPUSH
4692: CALL_OW 25
4696: ST_TO_ADDR
// Belkov := NewCharacter ( Belkov ) ;
4697: LD_ADDR_EXP 35
4701: PUSH
4702: LD_STRING Belkov
4704: PPUSH
4705: CALL_OW 25
4709: ST_TO_ADDR
// filter := [ Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ] ;
4710: LD_ADDR_VAR 0 3
4714: PUSH
4715: LD_EXP 19
4719: PUSH
4720: LD_EXP 20
4724: PUSH
4725: LD_EXP 21
4729: PUSH
4730: LD_EXP 22
4734: PUSH
4735: LD_EXP 23
4739: PUSH
4740: LD_EXP 24
4744: PUSH
4745: LD_EXP 25
4749: PUSH
4750: LD_EXP 26
4754: PUSH
4755: LD_EXP 27
4759: PUSH
4760: LD_EXP 28
4764: PUSH
4765: LD_EXP 29
4769: PUSH
4770: LD_EXP 30
4774: PUSH
4775: LD_EXP 31
4779: PUSH
4780: LD_EXP 32
4784: PUSH
4785: LD_EXP 33
4789: PUSH
4790: LD_EXP 34
4794: PUSH
4795: LD_EXP 35
4799: PUSH
4800: EMPTY
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: LIST
4818: ST_TO_ADDR
// for i = 1 to filter do
4819: LD_ADDR_VAR 0 2
4823: PUSH
4824: DOUBLE
4825: LD_INT 1
4827: DEC
4828: ST_TO_ADDR
4829: LD_VAR 0 3
4833: PUSH
4834: FOR_TO
4835: IFFALSE 4860
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4837: LD_VAR 0 3
4841: PUSH
4842: LD_VAR 0 2
4846: ARRAY
4847: PPUSH
4848: LD_INT 6
4850: PPUSH
4851: LD_INT 0
4853: PPUSH
4854: CALL_OW 49
4858: GO 4834
4860: POP
4861: POP
// end ;
4862: LD_VAR 0 1
4866: RET
// export RU_SecondPersonnel ; export function PrepareRUBase_v2 ; var i , filter , un ; begin
4867: LD_INT 0
4869: PPUSH
4870: PPUSH
4871: PPUSH
4872: PPUSH
// uc_side := 3 ;
4873: LD_ADDR_OWVAR 20
4877: PUSH
4878: LD_INT 3
4880: ST_TO_ADDR
// uc_nation := nation_russian ;
4881: LD_ADDR_OWVAR 21
4885: PUSH
4886: LD_INT 3
4888: ST_TO_ADDR
// hc_name :=  ;
4889: LD_ADDR_OWVAR 26
4893: PUSH
4894: LD_STRING 
4896: ST_TO_ADDR
// hc_gallery :=  ;
4897: LD_ADDR_OWVAR 33
4901: PUSH
4902: LD_STRING 
4904: ST_TO_ADDR
// for i = 1 to 8 do
4905: LD_ADDR_VAR 0 2
4909: PUSH
4910: DOUBLE
4911: LD_INT 1
4913: DEC
4914: ST_TO_ADDR
4915: LD_INT 8
4917: PUSH
4918: FOR_TO
4919: IFFALSE 4961
// begin PrepareSoldier ( 0 , game_eskill ) ;
4921: LD_INT 0
4923: PPUSH
4924: LD_EXP 40
4928: PPUSH
4929: CALL_OW 381
// un := CreateHuman ;
4933: LD_ADDR_VAR 0 4
4937: PUSH
4938: CALL_OW 44
4942: ST_TO_ADDR
// filter := filter ^ un ;
4943: LD_ADDR_VAR 0 3
4947: PUSH
4948: LD_VAR 0 3
4952: PUSH
4953: LD_VAR 0 4
4957: ADD
4958: ST_TO_ADDR
// end ;
4959: GO 4918
4961: POP
4962: POP
// for i = 1 to 4 do
4963: LD_ADDR_VAR 0 2
4967: PUSH
4968: DOUBLE
4969: LD_INT 1
4971: DEC
4972: ST_TO_ADDR
4973: LD_INT 4
4975: PUSH
4976: FOR_TO
4977: IFFALSE 5019
// begin PrepareEngineer ( 0 , game_eskill ) ;
4979: LD_INT 0
4981: PPUSH
4982: LD_EXP 40
4986: PPUSH
4987: CALL_OW 382
// un := CreateHuman ;
4991: LD_ADDR_VAR 0 4
4995: PUSH
4996: CALL_OW 44
5000: ST_TO_ADDR
// filter := filter ^ un ;
5001: LD_ADDR_VAR 0 3
5005: PUSH
5006: LD_VAR 0 3
5010: PUSH
5011: LD_VAR 0 4
5015: ADD
5016: ST_TO_ADDR
// end ;
5017: GO 4976
5019: POP
5020: POP
// for i = 1 to 6 do
5021: LD_ADDR_VAR 0 2
5025: PUSH
5026: DOUBLE
5027: LD_INT 1
5029: DEC
5030: ST_TO_ADDR
5031: LD_INT 6
5033: PUSH
5034: FOR_TO
5035: IFFALSE 5077
// begin PrepareMechanic ( 0 , game_eskill ) ;
5037: LD_INT 0
5039: PPUSH
5040: LD_EXP 40
5044: PPUSH
5045: CALL_OW 383
// un := CreateHuman ;
5049: LD_ADDR_VAR 0 4
5053: PUSH
5054: CALL_OW 44
5058: ST_TO_ADDR
// filter := filter ^ un ;
5059: LD_ADDR_VAR 0 3
5063: PUSH
5064: LD_VAR 0 3
5068: PUSH
5069: LD_VAR 0 4
5073: ADD
5074: ST_TO_ADDR
// end ;
5075: GO 5034
5077: POP
5078: POP
// for i = 1 to 4 do
5079: LD_ADDR_VAR 0 2
5083: PUSH
5084: DOUBLE
5085: LD_INT 1
5087: DEC
5088: ST_TO_ADDR
5089: LD_INT 4
5091: PUSH
5092: FOR_TO
5093: IFFALSE 5135
// begin PrepareScientist ( 0 , game_eskill ) ;
5095: LD_INT 0
5097: PPUSH
5098: LD_EXP 40
5102: PPUSH
5103: CALL_OW 384
// un := CreateHuman ;
5107: LD_ADDR_VAR 0 4
5111: PUSH
5112: CALL_OW 44
5116: ST_TO_ADDR
// filter := filter ^ un ;
5117: LD_ADDR_VAR 0 3
5121: PUSH
5122: LD_VAR 0 3
5126: PUSH
5127: LD_VAR 0 4
5131: ADD
5132: ST_TO_ADDR
// end ;
5133: GO 5092
5135: POP
5136: POP
// for i = 1 to filter do
5137: LD_ADDR_VAR 0 2
5141: PUSH
5142: DOUBLE
5143: LD_INT 1
5145: DEC
5146: ST_TO_ADDR
5147: LD_VAR 0 3
5151: PUSH
5152: FOR_TO
5153: IFFALSE 5178
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
5155: LD_VAR 0 3
5159: PUSH
5160: LD_VAR 0 2
5164: ARRAY
5165: PPUSH
5166: LD_INT 6
5168: PPUSH
5169: LD_INT 0
5171: PPUSH
5172: CALL_OW 49
5176: GO 5152
5178: POP
5179: POP
// RU_SecondPersonnel := filter ;
5180: LD_ADDR_EXP 36
5184: PUSH
5185: LD_VAR 0 3
5189: ST_TO_ADDR
// end ;
5190: LD_VAR 0 1
5194: RET
// export JMM ; export function JMMReinforcement ; var i , soldiers , un , vehs , vehicle , mechs ; begin
5195: LD_INT 0
5197: PPUSH
5198: PPUSH
5199: PPUSH
5200: PPUSH
5201: PPUSH
5202: PPUSH
5203: PPUSH
// uc_side := 1 ;
5204: LD_ADDR_OWVAR 20
5208: PUSH
5209: LD_INT 1
5211: ST_TO_ADDR
// uc_nation := nation_american ;
5212: LD_ADDR_OWVAR 21
5216: PUSH
5217: LD_INT 1
5219: ST_TO_ADDR
// JMM := NewCharacter ( JMM ) ;
5220: LD_ADDR_EXP 37
5224: PUSH
5225: LD_STRING JMM
5227: PPUSH
5228: CALL_OW 25
5232: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
5233: LD_EXP 37
5237: PPUSH
5238: LD_INT 1
5240: PPUSH
5241: CALL_OW 233
// PlaceUnitArea ( JMM , JMMArrivalArea , false ) ;
5245: LD_EXP 37
5249: PPUSH
5250: LD_INT 7
5252: PPUSH
5253: LD_INT 0
5255: PPUSH
5256: CALL_OW 49
// mechs := [ ] ;
5260: LD_ADDR_VAR 0 7
5264: PUSH
5265: EMPTY
5266: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
5267: LD_ADDR_VAR 0 2
5271: PUSH
5272: DOUBLE
5273: LD_INT 1
5275: DEC
5276: ST_TO_ADDR
5277: LD_INT 4
5279: PUSH
5280: LD_INT 3
5282: PUSH
5283: LD_INT 3
5285: PUSH
5286: EMPTY
5287: LIST
5288: LIST
5289: LIST
5290: PUSH
5291: LD_OWVAR 67
5295: ARRAY
5296: PUSH
5297: FOR_TO
5298: IFFALSE 5359
// begin PrepareSoldier ( 0 , game_skill + 1 ) ;
5300: LD_INT 0
5302: PPUSH
5303: LD_EXP 39
5307: PUSH
5308: LD_INT 1
5310: PLUS
5311: PPUSH
5312: CALL_OW 381
// un := CreateHuman ;
5316: LD_ADDR_VAR 0 4
5320: PUSH
5321: CALL_OW 44
5325: ST_TO_ADDR
// soldiers := soldiers ^ un ;
5326: LD_ADDR_VAR 0 3
5330: PUSH
5331: LD_VAR 0 3
5335: PUSH
5336: LD_VAR 0 4
5340: ADD
5341: ST_TO_ADDR
// PlaceUnitArea ( un , JMMArrivalArea , false ) ;
5342: LD_VAR 0 4
5346: PPUSH
5347: LD_INT 7
5349: PPUSH
5350: LD_INT 0
5352: PPUSH
5353: CALL_OW 49
// end ;
5357: GO 5297
5359: POP
5360: POP
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
5361: LD_ADDR_VAR 0 2
5365: PUSH
5366: DOUBLE
5367: LD_INT 1
5369: DEC
5370: ST_TO_ADDR
5371: LD_INT 7
5373: PUSH
5374: LD_INT 6
5376: PUSH
5377: LD_INT 4
5379: PUSH
5380: EMPTY
5381: LIST
5382: LIST
5383: LIST
5384: PUSH
5385: LD_OWVAR 67
5389: ARRAY
5390: PUSH
5391: FOR_TO
5392: IFFALSE 5438
// begin PrepareMechanic ( 0 , game_skill + 1 ) ;
5394: LD_INT 0
5396: PPUSH
5397: LD_EXP 39
5401: PUSH
5402: LD_INT 1
5404: PLUS
5405: PPUSH
5406: CALL_OW 383
// un := CreateHuman ;
5410: LD_ADDR_VAR 0 4
5414: PUSH
5415: CALL_OW 44
5419: ST_TO_ADDR
// mechs := mechs ^ un ;
5420: LD_ADDR_VAR 0 7
5424: PUSH
5425: LD_VAR 0 7
5429: PUSH
5430: LD_VAR 0 4
5434: ADD
5435: ST_TO_ADDR
// end ;
5436: GO 5391
5438: POP
5439: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_double_gun , 100 ) ;
5440: LD_INT 3
5442: PPUSH
5443: LD_INT 3
5445: PPUSH
5446: LD_INT 1
5448: PPUSH
5449: LD_INT 5
5451: PPUSH
5452: LD_INT 100
5454: PPUSH
5455: CALL 17280 0 5
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
5459: LD_ADDR_VAR 0 2
5463: PUSH
5464: DOUBLE
5465: LD_INT 1
5467: DEC
5468: ST_TO_ADDR
5469: LD_INT 7
5471: PUSH
5472: LD_INT 6
5474: PUSH
5475: LD_INT 4
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: LIST
5482: PUSH
5483: LD_OWVAR 67
5487: ARRAY
5488: PUSH
5489: FOR_TO
5490: IFFALSE 5585
// begin vehicle := CreateVehicle ;
5492: LD_ADDR_VAR 0 6
5496: PUSH
5497: CALL_OW 45
5501: ST_TO_ADDR
// PlaceHumanInUnit ( mechs [ 1 ] , vehicle ) ;
5502: LD_VAR 0 7
5506: PUSH
5507: LD_INT 1
5509: ARRAY
5510: PPUSH
5511: LD_VAR 0 6
5515: PPUSH
5516: CALL_OW 52
// mechs := mechs diff mechs [ 1 ] ;
5520: LD_ADDR_VAR 0 7
5524: PUSH
5525: LD_VAR 0 7
5529: PUSH
5530: LD_VAR 0 7
5534: PUSH
5535: LD_INT 1
5537: ARRAY
5538: DIFF
5539: ST_TO_ADDR
// SetDir ( vehicle , 1 ) ;
5540: LD_VAR 0 6
5544: PPUSH
5545: LD_INT 1
5547: PPUSH
5548: CALL_OW 233
// PlaceUnitArea ( vehicle , JMMArrivalArea , false ) ;
5552: LD_VAR 0 6
5556: PPUSH
5557: LD_INT 7
5559: PPUSH
5560: LD_INT 0
5562: PPUSH
5563: CALL_OW 49
// vehs := vehs ^ vehicle ;
5567: LD_ADDR_VAR 0 5
5571: PUSH
5572: LD_VAR 0 5
5576: PUSH
5577: LD_VAR 0 6
5581: ADD
5582: ST_TO_ADDR
// end ;
5583: GO 5489
5585: POP
5586: POP
// end ; end_of_file
5587: LD_VAR 0 1
5591: RET
// export game_diff ; export game_skill , game_eskill ; export jmmArrival , ruArrival ; export startCrates ; export function GameType ; var i , ruStartTechs ; begin
5592: LD_INT 0
5594: PPUSH
5595: PPUSH
5596: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
5597: LD_ADDR_OWVAR 67
5601: PUSH
5602: LD_INT 0
5604: PPUSH
5605: CALL_OW 426
5609: ST_TO_ADDR
// game_diff := Difficulty ;
5610: LD_ADDR_EXP 38
5614: PUSH
5615: LD_OWVAR 67
5619: ST_TO_ADDR
// game_skill := [ 7 , 6 , 6 ] [ game_diff ] ;
5620: LD_ADDR_EXP 39
5624: PUSH
5625: LD_INT 7
5627: PUSH
5628: LD_INT 6
5630: PUSH
5631: LD_INT 6
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: LIST
5638: PUSH
5639: LD_EXP 38
5643: ARRAY
5644: ST_TO_ADDR
// game_eskill := [ 6 , 7 , 8 ] [ game_diff ] ;
5645: LD_ADDR_EXP 40
5649: PUSH
5650: LD_INT 6
5652: PUSH
5653: LD_INT 7
5655: PUSH
5656: LD_INT 8
5658: PUSH
5659: EMPTY
5660: LIST
5661: LIST
5662: LIST
5663: PUSH
5664: LD_EXP 38
5668: ARRAY
5669: ST_TO_ADDR
// ruArrival := [ 5 5$00 , 3 3$00 , 2 2$00 ] [ game_diff ] ;
5670: LD_ADDR_EXP 42
5674: PUSH
5675: LD_INT 10500
5677: PUSH
5678: LD_INT 6300
5680: PUSH
5681: LD_INT 4200
5683: PUSH
5684: EMPTY
5685: LIST
5686: LIST
5687: LIST
5688: PUSH
5689: LD_EXP 38
5693: ARRAY
5694: ST_TO_ADDR
// jmmArrival := [ 35 35$00 , 45 45$00 , 55 55$00 ] [ game_diff ] ;
5695: LD_ADDR_EXP 41
5699: PUSH
5700: LD_INT 73500
5702: PUSH
5703: LD_INT 94500
5705: PUSH
5706: LD_INT 115500
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: LIST
5713: PUSH
5714: LD_EXP 38
5718: ARRAY
5719: ST_TO_ADDR
// ruStartTechs = [ [ tech_Weap1 ] , [ tech_Weap1 , tech_Comp1 ] , [ tech_Weap1 , tech_Weap2 , tech_Comp1 ] ] ;
5720: LD_ADDR_VAR 0 3
5724: PUSH
5725: LD_INT 51
5727: PUSH
5728: EMPTY
5729: LIST
5730: PUSH
5731: LD_INT 51
5733: PUSH
5734: LD_INT 57
5736: PUSH
5737: EMPTY
5738: LIST
5739: LIST
5740: PUSH
5741: LD_INT 51
5743: PUSH
5744: LD_INT 52
5746: PUSH
5747: LD_INT 57
5749: PUSH
5750: EMPTY
5751: LIST
5752: LIST
5753: LIST
5754: PUSH
5755: EMPTY
5756: LIST
5757: LIST
5758: LIST
5759: ST_TO_ADDR
// startCrates = [ [ 300 , 350 ] , [ 230 , 200 ] , [ 150 , 100 ] ] [ game_diff ] ;
5760: LD_ADDR_EXP 43
5764: PUSH
5765: LD_INT 300
5767: PUSH
5768: LD_INT 350
5770: PUSH
5771: EMPTY
5772: LIST
5773: LIST
5774: PUSH
5775: LD_INT 230
5777: PUSH
5778: LD_INT 200
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: PUSH
5785: LD_INT 150
5787: PUSH
5788: LD_INT 100
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: LIST
5799: PUSH
5800: LD_EXP 38
5804: ARRAY
5805: ST_TO_ADDR
// for i := 1 to ruStartTechs [ game_diff ] do
5806: LD_ADDR_VAR 0 2
5810: PUSH
5811: DOUBLE
5812: LD_INT 1
5814: DEC
5815: ST_TO_ADDR
5816: LD_VAR 0 3
5820: PUSH
5821: LD_EXP 38
5825: ARRAY
5826: PUSH
5827: FOR_TO
5828: IFFALSE 5886
// begin SetTech ( ruStartTechs [ game_diff ] [ i ] , 3 , state_researched ) ;
5830: LD_VAR 0 3
5834: PUSH
5835: LD_EXP 38
5839: ARRAY
5840: PUSH
5841: LD_VAR 0 2
5845: ARRAY
5846: PPUSH
5847: LD_INT 3
5849: PPUSH
5850: LD_INT 2
5852: PPUSH
5853: CALL_OW 322
// SetTech ( ruStartTechs [ game_diff ] [ i ] , 6 , state_researched ) ;
5857: LD_VAR 0 3
5861: PUSH
5862: LD_EXP 38
5866: ARRAY
5867: PUSH
5868: LD_VAR 0 2
5872: ARRAY
5873: PPUSH
5874: LD_INT 6
5876: PPUSH
5877: LD_INT 2
5879: PPUSH
5880: CALL_OW 322
// end ;
5884: GO 5827
5886: POP
5887: POP
// end ; end_of_file
5888: LD_VAR 0 1
5892: RET
// export function CustomEvent ( event ) ; begin
5893: LD_INT 0
5895: PPUSH
// end ;
5896: LD_VAR 0 2
5900: RET
// export function CustomInitMacro ( ) ; begin
5901: LD_INT 0
5903: PPUSH
// MC_SetScanArea ( 1 , RU_Base_Area ) ;
5904: LD_INT 1
5906: PPUSH
5907: LD_INT 3
5909: PPUSH
5910: CALL 73864 0 2
// MC_SetParkingArea ( 1 , RU_Base_Parking ) ;
5914: LD_INT 1
5916: PPUSH
5917: LD_INT 4
5919: PPUSH
5920: CALL 73808 0 2
// MC_SetDepositsXY ( 1 , [ [ 136 , 130 , 0 ] , [ 145 , 123 , 0 ] , ] ) ;
5924: LD_INT 1
5926: PPUSH
5927: LD_INT 136
5929: PUSH
5930: LD_INT 130
5932: PUSH
5933: LD_INT 0
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: LIST
5940: PUSH
5941: LD_INT 145
5943: PUSH
5944: LD_INT 123
5946: PUSH
5947: LD_INT 0
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: LIST
5954: PUSH
5955: EMPTY
5956: LIST
5957: LIST
5958: PPUSH
5959: CALL 72867 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5963: LD_INT 1
5965: PPUSH
5966: LD_INT 43
5968: PUSH
5969: LD_INT 46
5971: PUSH
5972: LD_INT 45
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: LIST
5979: PPUSH
5980: CALL 73696 0 2
// MC_SetCratesArea ( 1 , RU_Base_Area ) ;
5984: LD_INT 1
5986: PPUSH
5987: LD_INT 3
5989: PPUSH
5990: CALL 73378 0 2
// MC_SetTame ( 1 , RU_Base_Area ) ;
5994: LD_INT 1
5996: PPUSH
5997: LD_INT 3
5999: PPUSH
6000: CALL 73109 0 2
// MC_SetDefenderLimit ( 1 , 8 ) ;
6004: LD_INT 1
6006: PPUSH
6007: LD_INT 8
6009: PPUSH
6010: CALL 72728 0 2
// MC_SetProduceList ( 1 , [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] ] ) ;
6014: LD_INT 1
6016: PPUSH
6017: LD_INT 22
6019: PUSH
6020: LD_INT 1
6022: PUSH
6023: LD_INT 3
6025: PUSH
6026: LD_INT 43
6028: PUSH
6029: EMPTY
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: PUSH
6035: LD_INT 22
6037: PUSH
6038: LD_INT 1
6040: PUSH
6041: LD_INT 3
6043: PUSH
6044: LD_INT 44
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: PUSH
6053: LD_INT 22
6055: PUSH
6056: LD_INT 1
6058: PUSH
6059: LD_INT 3
6061: PUSH
6062: LD_INT 45
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: PUSH
6071: LD_INT 24
6073: PUSH
6074: LD_INT 1
6076: PUSH
6077: LD_INT 3
6079: PUSH
6080: LD_INT 43
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: PUSH
6089: LD_INT 24
6091: PUSH
6092: LD_INT 1
6094: PUSH
6095: LD_INT 3
6097: PUSH
6098: LD_INT 43
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: PUSH
6107: LD_INT 24
6109: PUSH
6110: LD_INT 1
6112: PUSH
6113: LD_INT 3
6115: PUSH
6116: LD_INT 46
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: PUSH
6125: LD_INT 22
6127: PUSH
6128: LD_INT 1
6130: PUSH
6131: LD_INT 3
6133: PUSH
6134: LD_INT 43
6136: PUSH
6137: EMPTY
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: PUSH
6143: LD_INT 22
6145: PUSH
6146: LD_INT 1
6148: PUSH
6149: LD_INT 3
6151: PUSH
6152: LD_INT 44
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: PPUSH
6171: CALL 72543 0 2
// MC_SetBuildingList ( 1 , [ [ b_depot , 127 , 125 , 5 ] , [ b_lab , 124 , 132 , 0 ] , [ b_oil_mine , 136 , 130 , 1 ] , [ b_armoury , 118 , 114 , 2 ] , [ b_oil_mine , 145 , 123 , 1 ] , [ b_oil_power , 150 , 135 , 1 ] , [ b_oil_power , 140 , 134 , 2 ] , [ b_oil_power , 137 , 121 , 5 ] , [ b_workshop , 155 , 130 , 0 ] , [ b_bunker , 155 , 130 , 0 ] , [ b_bunker , 130 , 114 , 3 ] , [ b_bunker , 142 , 115 , 3 ] , [ b_bunker , 153 , 120 , 3 ] , ] ) ;
6175: LD_INT 1
6177: PPUSH
6178: LD_INT 0
6180: PUSH
6181: LD_INT 127
6183: PUSH
6184: LD_INT 125
6186: PUSH
6187: LD_INT 5
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: PUSH
6196: LD_INT 6
6198: PUSH
6199: LD_INT 124
6201: PUSH
6202: LD_INT 132
6204: PUSH
6205: LD_INT 0
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: PUSH
6214: LD_INT 29
6216: PUSH
6217: LD_INT 136
6219: PUSH
6220: LD_INT 130
6222: PUSH
6223: LD_INT 1
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: PUSH
6232: LD_INT 4
6234: PUSH
6235: LD_INT 118
6237: PUSH
6238: LD_INT 114
6240: PUSH
6241: LD_INT 2
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: PUSH
6250: LD_INT 29
6252: PUSH
6253: LD_INT 145
6255: PUSH
6256: LD_INT 123
6258: PUSH
6259: LD_INT 1
6261: PUSH
6262: EMPTY
6263: LIST
6264: LIST
6265: LIST
6266: LIST
6267: PUSH
6268: LD_INT 26
6270: PUSH
6271: LD_INT 150
6273: PUSH
6274: LD_INT 135
6276: PUSH
6277: LD_INT 1
6279: PUSH
6280: EMPTY
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: PUSH
6286: LD_INT 26
6288: PUSH
6289: LD_INT 140
6291: PUSH
6292: LD_INT 134
6294: PUSH
6295: LD_INT 2
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: PUSH
6304: LD_INT 26
6306: PUSH
6307: LD_INT 137
6309: PUSH
6310: LD_INT 121
6312: PUSH
6313: LD_INT 5
6315: PUSH
6316: EMPTY
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: PUSH
6322: LD_INT 2
6324: PUSH
6325: LD_INT 155
6327: PUSH
6328: LD_INT 130
6330: PUSH
6331: LD_INT 0
6333: PUSH
6334: EMPTY
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: PUSH
6340: LD_INT 32
6342: PUSH
6343: LD_INT 155
6345: PUSH
6346: LD_INT 130
6348: PUSH
6349: LD_INT 0
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: PUSH
6358: LD_INT 32
6360: PUSH
6361: LD_INT 130
6363: PUSH
6364: LD_INT 114
6366: PUSH
6367: LD_INT 3
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: PUSH
6376: LD_INT 32
6378: PUSH
6379: LD_INT 142
6381: PUSH
6382: LD_INT 115
6384: PUSH
6385: LD_INT 3
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: PUSH
6394: LD_INT 32
6396: PUSH
6397: LD_INT 153
6399: PUSH
6400: LD_INT 120
6402: PUSH
6403: LD_INT 3
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: PPUSH
6427: CALL 72435 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_computer ] ) ;
6431: LD_INT 1
6433: PPUSH
6434: LD_INT 10
6436: PUSH
6437: LD_INT 12
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PPUSH
6444: CALL 73285 0 2
// MC_SetFactoryExtension ( 1 , 155 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
6448: LD_INT 1
6450: PPUSH
6451: LD_INT 155
6453: PPUSH
6454: LD_INT 130
6456: PPUSH
6457: LD_INT 0
6459: PPUSH
6460: LD_INT 24
6462: PUSH
6463: LD_INT 16
6465: PUSH
6466: LD_INT 17
6468: PUSH
6469: LD_INT 18
6471: PUSH
6472: LD_INT 21
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: PPUSH
6482: CALL 73490 0 5
// MC_SetScanArea ( 2 , RU_Base_Area ) ;
6486: LD_INT 2
6488: PPUSH
6489: LD_INT 3
6491: PPUSH
6492: CALL 73864 0 2
// MC_SetParkingArea ( 2 , RU_Base_Parking ) ;
6496: LD_INT 2
6498: PPUSH
6499: LD_INT 4
6501: PPUSH
6502: CALL 73808 0 2
// MC_SetDepositsXY ( 2 , [ [ 84 , 125 , 1 ] , ] ) ;
6506: LD_INT 2
6508: PPUSH
6509: LD_INT 84
6511: PUSH
6512: LD_INT 125
6514: PUSH
6515: LD_INT 1
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: LIST
6522: PUSH
6523: EMPTY
6524: LIST
6525: PPUSH
6526: CALL 72867 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
6530: LD_INT 2
6532: PPUSH
6533: LD_INT 43
6535: PUSH
6536: LD_INT 46
6538: PUSH
6539: LD_INT 45
6541: PUSH
6542: EMPTY
6543: LIST
6544: LIST
6545: LIST
6546: PPUSH
6547: CALL 73696 0 2
// MC_SetCratesArea ( 2 , RU_Base_Area ) ;
6551: LD_INT 2
6553: PPUSH
6554: LD_INT 3
6556: PPUSH
6557: CALL 73378 0 2
// MC_SetTame ( 2 , RU_Base_Area ) ;
6561: LD_INT 2
6563: PPUSH
6564: LD_INT 3
6566: PPUSH
6567: CALL 73109 0 2
// MC_SetDefenderLimit ( 2 , 8 ) ;
6571: LD_INT 2
6573: PPUSH
6574: LD_INT 8
6576: PPUSH
6577: CALL 72728 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] ] ) ;
6581: LD_INT 2
6583: PPUSH
6584: LD_INT 22
6586: PUSH
6587: LD_INT 3
6589: PUSH
6590: LD_INT 3
6592: PUSH
6593: LD_INT 43
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: PUSH
6602: LD_INT 22
6604: PUSH
6605: LD_INT 3
6607: PUSH
6608: LD_INT 3
6610: PUSH
6611: LD_INT 44
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: PUSH
6620: LD_INT 22
6622: PUSH
6623: LD_INT 3
6625: PUSH
6626: LD_INT 3
6628: PUSH
6629: LD_INT 45
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: PUSH
6638: LD_INT 24
6640: PUSH
6641: LD_INT 3
6643: PUSH
6644: LD_INT 3
6646: PUSH
6647: LD_INT 43
6649: PUSH
6650: EMPTY
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: PUSH
6656: LD_INT 24
6658: PUSH
6659: LD_INT 3
6661: PUSH
6662: LD_INT 3
6664: PUSH
6665: LD_INT 43
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: PUSH
6674: LD_INT 24
6676: PUSH
6677: LD_INT 3
6679: PUSH
6680: LD_INT 3
6682: PUSH
6683: LD_INT 46
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: PUSH
6692: LD_INT 22
6694: PUSH
6695: LD_INT 3
6697: PUSH
6698: LD_INT 3
6700: PUSH
6701: LD_INT 43
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: PUSH
6710: LD_INT 22
6712: PUSH
6713: LD_INT 3
6715: PUSH
6716: LD_INT 3
6718: PUSH
6719: LD_INT 44
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: PPUSH
6738: CALL 72543 0 2
// MC_SetBuildingList ( 2 , [ [ b_depot , 96 , 125 , 0 ] , [ b_lab , 74 , 122 , 1 ] , [ b_siberite_mine , 84 , 125 , 1 ] , [ b_siberite_power , 86 , 128 , 1 ] , [ b_siberite_power , 85 , 130 , 2 ] , [ b_siberite_power , 88 , 132 , 5 ] , [ b_workshop , 106 , 130 , 0 ] , [ b_armoury , 99 , 114 , 3 ] , [ b_bunker , 72 , 112 , 2 ] , [ b_bunker , 78 , 110 , 3 ] , [ b_bunker , 84 , 110 , 2 ] , [ b_bunker , 105 , 117 , 3 ] , ] ) ;
6742: LD_INT 2
6744: PPUSH
6745: LD_INT 0
6747: PUSH
6748: LD_INT 96
6750: PUSH
6751: LD_INT 125
6753: PUSH
6754: LD_INT 0
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: LIST
6761: LIST
6762: PUSH
6763: LD_INT 6
6765: PUSH
6766: LD_INT 74
6768: PUSH
6769: LD_INT 122
6771: PUSH
6772: LD_INT 1
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: PUSH
6781: LD_INT 30
6783: PUSH
6784: LD_INT 84
6786: PUSH
6787: LD_INT 125
6789: PUSH
6790: LD_INT 1
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: PUSH
6799: LD_INT 28
6801: PUSH
6802: LD_INT 86
6804: PUSH
6805: LD_INT 128
6807: PUSH
6808: LD_INT 1
6810: PUSH
6811: EMPTY
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: PUSH
6817: LD_INT 28
6819: PUSH
6820: LD_INT 85
6822: PUSH
6823: LD_INT 130
6825: PUSH
6826: LD_INT 2
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: PUSH
6835: LD_INT 28
6837: PUSH
6838: LD_INT 88
6840: PUSH
6841: LD_INT 132
6843: PUSH
6844: LD_INT 5
6846: PUSH
6847: EMPTY
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: PUSH
6853: LD_INT 2
6855: PUSH
6856: LD_INT 106
6858: PUSH
6859: LD_INT 130
6861: PUSH
6862: LD_INT 0
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: PUSH
6871: LD_INT 4
6873: PUSH
6874: LD_INT 99
6876: PUSH
6877: LD_INT 114
6879: PUSH
6880: LD_INT 3
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: PUSH
6889: LD_INT 32
6891: PUSH
6892: LD_INT 72
6894: PUSH
6895: LD_INT 112
6897: PUSH
6898: LD_INT 2
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: PUSH
6907: LD_INT 32
6909: PUSH
6910: LD_INT 78
6912: PUSH
6913: LD_INT 110
6915: PUSH
6916: LD_INT 3
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: PUSH
6925: LD_INT 32
6927: PUSH
6928: LD_INT 84
6930: PUSH
6931: LD_INT 110
6933: PUSH
6934: LD_INT 2
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: PUSH
6943: LD_INT 32
6945: PUSH
6946: LD_INT 105
6948: PUSH
6949: LD_INT 117
6951: PUSH
6952: LD_INT 3
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: PPUSH
6975: CALL 72435 0 2
// MC_SetLabKind ( 2 , [ b_lab_spacetime , b_lab_siberium ] ) ;
6979: LD_INT 2
6981: PPUSH
6982: LD_INT 14
6984: PUSH
6985: LD_INT 11
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PPUSH
6992: CALL 73285 0 2
// MC_SetFactoryExtension ( 2 , 106 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
6996: LD_INT 2
6998: PPUSH
6999: LD_INT 106
7001: PPUSH
7002: LD_INT 130
7004: PPUSH
7005: LD_INT 0
7007: PPUSH
7008: LD_INT 24
7010: PUSH
7011: LD_INT 16
7013: PUSH
7014: LD_INT 17
7016: PUSH
7017: LD_INT 18
7019: PUSH
7020: LD_INT 21
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: PPUSH
7030: CALL 73490 0 5
// end ;
7034: LD_VAR 0 1
7038: RET
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
7039: LD_INT 22
7041: PUSH
7042: LD_INT 3
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: PUSH
7049: LD_INT 30
7051: PUSH
7052: LD_INT 3
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PPUSH
7063: CALL_OW 69
7067: IFFALSE 7923
7069: GO 7071
7071: DISABLE
7072: LD_INT 0
7074: PPUSH
7075: PPUSH
7076: PPUSH
7077: PPUSH
7078: PPUSH
7079: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
7080: LD_INT 6300
7082: PUSH
7083: LD_INT 4200
7085: PUSH
7086: LD_INT 2100
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: LIST
7093: PUSH
7094: LD_OWVAR 67
7098: ARRAY
7099: PPUSH
7100: CALL_OW 67
// base := 2 ;
7104: LD_ADDR_VAR 0 2
7108: PUSH
7109: LD_INT 2
7111: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
7112: LD_INT 22
7114: PUSH
7115: LD_INT 3
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PUSH
7122: LD_INT 30
7124: PUSH
7125: LD_INT 3
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PPUSH
7136: CALL_OW 69
7140: NOT
7141: IFFALSE 7145
// continue ;
7143: GO 7080
// case Rand ( 1 , 3 ) of 1 :
7145: LD_INT 1
7147: PPUSH
7148: LD_INT 3
7150: PPUSH
7151: CALL_OW 12
7155: PUSH
7156: LD_INT 1
7158: DOUBLE
7159: EQUAL
7160: IFTRUE 7164
7162: GO 7340
7164: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
7165: LD_ADDR_VAR 0 3
7169: PUSH
7170: LD_INT 22
7172: PUSH
7173: LD_INT 3
7175: PUSH
7176: LD_INT 3
7178: PUSH
7179: LD_INT 43
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: PUSH
7188: LD_INT 24
7190: PUSH
7191: LD_INT 3
7193: PUSH
7194: LD_INT 3
7196: PUSH
7197: LD_INT 46
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: PUSH
7206: LD_INT 24
7208: PUSH
7209: LD_INT 3
7211: PUSH
7212: LD_INT 3
7214: PUSH
7215: LD_INT 43
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: PUSH
7224: LD_INT 24
7226: PUSH
7227: LD_INT 3
7229: PUSH
7230: LD_INT 3
7232: PUSH
7233: LD_INT 46
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: PUSH
7242: LD_INT 22
7244: PUSH
7245: LD_INT 3
7247: PUSH
7248: LD_INT 3
7250: PUSH
7251: LD_INT 45
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: PUSH
7260: LD_INT 22
7262: PUSH
7263: LD_INT 3
7265: PUSH
7266: LD_INT 3
7268: PUSH
7269: LD_INT 43
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: PUSH
7278: LD_INT 24
7280: PUSH
7281: LD_INT 3
7283: PUSH
7284: LD_INT 3
7286: PUSH
7287: LD_INT 46
7289: PUSH
7290: EMPTY
7291: LIST
7292: LIST
7293: LIST
7294: LIST
7295: PUSH
7296: LD_INT 22
7298: PUSH
7299: LD_INT 3
7301: PUSH
7302: LD_INT 3
7304: PUSH
7305: LD_INT 45
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7324: LD_VAR 0 2
7328: PPUSH
7329: LD_VAR 0 3
7333: PPUSH
7334: CALL 72591 0 2
// end ; 2 :
7338: GO 7671
7340: LD_INT 2
7342: DOUBLE
7343: EQUAL
7344: IFTRUE 7348
7346: GO 7486
7348: POP
// begin tmp := [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
7349: LD_ADDR_VAR 0 3
7353: PUSH
7354: LD_INT 24
7356: PUSH
7357: LD_INT 3
7359: PUSH
7360: LD_INT 3
7362: PUSH
7363: LD_INT 43
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: PUSH
7372: LD_INT 24
7374: PUSH
7375: LD_INT 3
7377: PUSH
7378: LD_INT 3
7380: PUSH
7381: LD_INT 46
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: PUSH
7390: LD_INT 24
7392: PUSH
7393: LD_INT 3
7395: PUSH
7396: LD_INT 3
7398: PUSH
7399: LD_INT 43
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: PUSH
7408: LD_INT 24
7410: PUSH
7411: LD_INT 3
7413: PUSH
7414: LD_INT 3
7416: PUSH
7417: LD_INT 46
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: PUSH
7426: LD_INT 22
7428: PUSH
7429: LD_INT 3
7431: PUSH
7432: LD_INT 3
7434: PUSH
7435: LD_INT 45
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: PUSH
7444: LD_INT 22
7446: PUSH
7447: LD_INT 3
7449: PUSH
7450: LD_INT 3
7452: PUSH
7453: LD_INT 45
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7470: LD_VAR 0 2
7474: PPUSH
7475: LD_VAR 0 3
7479: PPUSH
7480: CALL 72591 0 2
// end ; 3 :
7484: GO 7671
7486: LD_INT 3
7488: DOUBLE
7489: EQUAL
7490: IFTRUE 7494
7492: GO 7670
7494: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
7495: LD_ADDR_VAR 0 3
7499: PUSH
7500: LD_INT 22
7502: PUSH
7503: LD_INT 3
7505: PUSH
7506: LD_INT 3
7508: PUSH
7509: LD_INT 43
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: PUSH
7518: LD_INT 24
7520: PUSH
7521: LD_INT 3
7523: PUSH
7524: LD_INT 3
7526: PUSH
7527: LD_INT 46
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: PUSH
7536: LD_INT 22
7538: PUSH
7539: LD_INT 3
7541: PUSH
7542: LD_INT 3
7544: PUSH
7545: LD_INT 43
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: PUSH
7554: LD_INT 24
7556: PUSH
7557: LD_INT 3
7559: PUSH
7560: LD_INT 3
7562: PUSH
7563: LD_INT 46
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: PUSH
7572: LD_INT 22
7574: PUSH
7575: LD_INT 3
7577: PUSH
7578: LD_INT 3
7580: PUSH
7581: LD_INT 45
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: PUSH
7590: LD_INT 22
7592: PUSH
7593: LD_INT 3
7595: PUSH
7596: LD_INT 3
7598: PUSH
7599: LD_INT 43
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: PUSH
7608: LD_INT 24
7610: PUSH
7611: LD_INT 3
7613: PUSH
7614: LD_INT 3
7616: PUSH
7617: LD_INT 46
7619: PUSH
7620: EMPTY
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: PUSH
7626: LD_INT 22
7628: PUSH
7629: LD_INT 3
7631: PUSH
7632: LD_INT 3
7634: PUSH
7635: LD_INT 45
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7654: LD_VAR 0 2
7658: PPUSH
7659: LD_VAR 0 3
7663: PPUSH
7664: CALL 72591 0 2
// end ; end ;
7668: GO 7671
7670: POP
// repeat wait ( 0 0$1 ) ;
7671: LD_INT 35
7673: PPUSH
7674: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
7678: LD_VAR 0 2
7682: PPUSH
7683: CALL 72939 0 1
7687: PUSH
7688: LD_INT 0
7690: EQUAL
7691: IFFALSE 7671
// wait ( 0 0$30 ) ;
7693: LD_INT 1050
7695: PPUSH
7696: CALL_OW 67
// _target := [ [ 86 , 77 ] , [ 63 , 38 ] ] ;
7700: LD_ADDR_VAR 0 5
7704: PUSH
7705: LD_INT 86
7707: PUSH
7708: LD_INT 77
7710: PUSH
7711: EMPTY
7712: LIST
7713: LIST
7714: PUSH
7715: LD_INT 63
7717: PUSH
7718: LD_INT 38
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
7729: LD_ADDR_VAR 0 4
7733: PUSH
7734: LD_INT 0
7736: PUSH
7737: LD_INT 0
7739: PUSH
7740: LD_INT 0
7742: PUSH
7743: LD_INT 1
7745: PUSH
7746: LD_INT 0
7748: PUSH
7749: LD_INT 0
7751: PUSH
7752: LD_INT 0
7754: PUSH
7755: LD_INT 0
7757: PUSH
7758: LD_INT 1
7760: PUSH
7761: LD_INT 0
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
7776: LD_ADDR_VAR 0 6
7780: PUSH
7781: LD_EXP 82
7785: PUSH
7786: LD_VAR 0 2
7790: ARRAY
7791: PUSH
7792: LD_EXP 85
7796: PUSH
7797: LD_VAR 0 2
7801: ARRAY
7802: DIFF
7803: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
7804: LD_ADDR_EXP 82
7808: PUSH
7809: LD_EXP 82
7813: PPUSH
7814: LD_VAR 0 2
7818: PPUSH
7819: LD_EXP 82
7823: PUSH
7824: LD_VAR 0 2
7828: ARRAY
7829: PUSH
7830: LD_VAR 0 6
7834: DIFF
7835: PPUSH
7836: CALL_OW 1
7840: ST_TO_ADDR
// if not attackers then
7841: LD_VAR 0 6
7845: NOT
7846: IFFALSE 7850
// continue ;
7848: GO 7080
// repeat wait ( 0 0$1 ) ;
7850: LD_INT 35
7852: PPUSH
7853: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
7857: LD_VAR 0 6
7861: PPUSH
7862: LD_INT 60
7864: PUSH
7865: EMPTY
7866: LIST
7867: PPUSH
7868: CALL_OW 72
7872: NOT
7873: IFFALSE 7850
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
7875: LD_VAR 0 2
7879: PPUSH
7880: LD_VAR 0 6
7884: PPUSH
7885: LD_VAR 0 5
7889: PPUSH
7890: LD_VAR 0 4
7894: PPUSH
7895: CALL 72776 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
7899: LD_EXP 63
7903: PUSH
7904: LD_VAR 0 2
7908: ARRAY
7909: PPUSH
7910: LD_INT 50
7912: PUSH
7913: EMPTY
7914: LIST
7915: PPUSH
7916: CALL_OW 72
7920: NOT
7921: IFFALSE 7080
// end ;
7923: PPOPN 6
7925: END
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
7926: LD_INT 22
7928: PUSH
7929: LD_INT 3
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: PUSH
7936: LD_INT 30
7938: PUSH
7939: LD_INT 3
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: PPUSH
7950: CALL_OW 69
7954: IFFALSE 8851
7956: GO 7958
7958: DISABLE
7959: LD_INT 0
7961: PPUSH
7962: PPUSH
7963: PPUSH
7964: PPUSH
7965: PPUSH
7966: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
7967: LD_INT 6300
7969: PUSH
7970: LD_INT 4200
7972: PUSH
7973: LD_INT 2100
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: LIST
7980: PUSH
7981: LD_OWVAR 67
7985: ARRAY
7986: PPUSH
7987: CALL_OW 67
// base := 1 ;
7991: LD_ADDR_VAR 0 2
7995: PUSH
7996: LD_INT 1
7998: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
7999: LD_INT 22
8001: PUSH
8002: LD_INT 3
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: PUSH
8009: LD_INT 30
8011: PUSH
8012: LD_INT 3
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PPUSH
8023: CALL_OW 69
8027: NOT
8028: IFFALSE 8032
// continue ;
8030: GO 7967
// case Rand ( 1 , 3 ) of 1 :
8032: LD_INT 1
8034: PPUSH
8035: LD_INT 3
8037: PPUSH
8038: CALL_OW 12
8042: PUSH
8043: LD_INT 1
8045: DOUBLE
8046: EQUAL
8047: IFTRUE 8051
8049: GO 8227
8051: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
8052: LD_ADDR_VAR 0 3
8056: PUSH
8057: LD_INT 22
8059: PUSH
8060: LD_INT 1
8062: PUSH
8063: LD_INT 3
8065: PUSH
8066: LD_INT 43
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: PUSH
8075: LD_INT 24
8077: PUSH
8078: LD_INT 1
8080: PUSH
8081: LD_INT 3
8083: PUSH
8084: LD_INT 46
8086: PUSH
8087: EMPTY
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: PUSH
8093: LD_INT 24
8095: PUSH
8096: LD_INT 1
8098: PUSH
8099: LD_INT 3
8101: PUSH
8102: LD_INT 43
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: PUSH
8111: LD_INT 24
8113: PUSH
8114: LD_INT 1
8116: PUSH
8117: LD_INT 3
8119: PUSH
8120: LD_INT 46
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: PUSH
8129: LD_INT 22
8131: PUSH
8132: LD_INT 1
8134: PUSH
8135: LD_INT 3
8137: PUSH
8138: LD_INT 45
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: PUSH
8147: LD_INT 22
8149: PUSH
8150: LD_INT 1
8152: PUSH
8153: LD_INT 3
8155: PUSH
8156: LD_INT 43
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: PUSH
8165: LD_INT 24
8167: PUSH
8168: LD_INT 1
8170: PUSH
8171: LD_INT 3
8173: PUSH
8174: LD_INT 46
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: PUSH
8183: LD_INT 22
8185: PUSH
8186: LD_INT 1
8188: PUSH
8189: LD_INT 3
8191: PUSH
8192: LD_INT 45
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: PUSH
8201: EMPTY
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
8211: LD_VAR 0 2
8215: PPUSH
8216: LD_VAR 0 3
8220: PPUSH
8221: CALL 72591 0 2
// end ; 2 :
8225: GO 8596
8227: LD_INT 2
8229: DOUBLE
8230: EQUAL
8231: IFTRUE 8235
8233: GO 8411
8235: POP
// begin tmp := [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
8236: LD_ADDR_VAR 0 3
8240: PUSH
8241: LD_INT 24
8243: PUSH
8244: LD_INT 1
8246: PUSH
8247: LD_INT 3
8249: PUSH
8250: LD_INT 43
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: PUSH
8259: LD_INT 24
8261: PUSH
8262: LD_INT 1
8264: PUSH
8265: LD_INT 3
8267: PUSH
8268: LD_INT 46
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: PUSH
8277: LD_INT 24
8279: PUSH
8280: LD_INT 1
8282: PUSH
8283: LD_INT 3
8285: PUSH
8286: LD_INT 43
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: PUSH
8295: LD_INT 24
8297: PUSH
8298: LD_INT 1
8300: PUSH
8301: LD_INT 3
8303: PUSH
8304: LD_INT 46
8306: PUSH
8307: EMPTY
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: PUSH
8313: LD_INT 22
8315: PUSH
8316: LD_INT 1
8318: PUSH
8319: LD_INT 3
8321: PUSH
8322: LD_INT 45
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: PUSH
8331: LD_INT 22
8333: PUSH
8334: LD_INT 1
8336: PUSH
8337: LD_INT 3
8339: PUSH
8340: LD_INT 45
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: PUSH
8349: LD_INT 22
8351: PUSH
8352: LD_INT 1
8354: PUSH
8355: LD_INT 3
8357: PUSH
8358: LD_INT 45
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: PUSH
8367: LD_INT 22
8369: PUSH
8370: LD_INT 1
8372: PUSH
8373: LD_INT 3
8375: PUSH
8376: LD_INT 45
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
8395: LD_VAR 0 2
8399: PPUSH
8400: LD_VAR 0 3
8404: PPUSH
8405: CALL 72591 0 2
// end ; 3 :
8409: GO 8596
8411: LD_INT 3
8413: DOUBLE
8414: EQUAL
8415: IFTRUE 8419
8417: GO 8595
8419: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
8420: LD_ADDR_VAR 0 3
8424: PUSH
8425: LD_INT 22
8427: PUSH
8428: LD_INT 1
8430: PUSH
8431: LD_INT 3
8433: PUSH
8434: LD_INT 43
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: PUSH
8443: LD_INT 24
8445: PUSH
8446: LD_INT 1
8448: PUSH
8449: LD_INT 3
8451: PUSH
8452: LD_INT 46
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: PUSH
8461: LD_INT 22
8463: PUSH
8464: LD_INT 1
8466: PUSH
8467: LD_INT 3
8469: PUSH
8470: LD_INT 43
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: PUSH
8479: LD_INT 24
8481: PUSH
8482: LD_INT 1
8484: PUSH
8485: LD_INT 3
8487: PUSH
8488: LD_INT 46
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: PUSH
8497: LD_INT 22
8499: PUSH
8500: LD_INT 1
8502: PUSH
8503: LD_INT 3
8505: PUSH
8506: LD_INT 45
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: PUSH
8515: LD_INT 22
8517: PUSH
8518: LD_INT 1
8520: PUSH
8521: LD_INT 3
8523: PUSH
8524: LD_INT 43
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 24
8535: PUSH
8536: LD_INT 1
8538: PUSH
8539: LD_INT 3
8541: PUSH
8542: LD_INT 46
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 22
8553: PUSH
8554: LD_INT 1
8556: PUSH
8557: LD_INT 3
8559: PUSH
8560: LD_INT 45
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
8579: LD_VAR 0 2
8583: PPUSH
8584: LD_VAR 0 3
8588: PPUSH
8589: CALL 72591 0 2
// end ; end ;
8593: GO 8596
8595: POP
// repeat wait ( 0 0$1 ) ;
8596: LD_INT 35
8598: PPUSH
8599: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 8 ;
8603: LD_VAR 0 2
8607: PPUSH
8608: LD_INT 1
8610: PPUSH
8611: CALL 74009 0 2
8615: PUSH
8616: LD_INT 8
8618: GREATEREQUAL
8619: IFFALSE 8596
// wait ( 0 0$30 ) ;
8621: LD_INT 1050
8623: PPUSH
8624: CALL_OW 67
// _target := [ [ 144 , 65 ] , [ 63 , 38 ] ] ;
8628: LD_ADDR_VAR 0 5
8632: PUSH
8633: LD_INT 144
8635: PUSH
8636: LD_INT 65
8638: PUSH
8639: EMPTY
8640: LIST
8641: LIST
8642: PUSH
8643: LD_INT 63
8645: PUSH
8646: LD_INT 38
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
8657: LD_ADDR_VAR 0 4
8661: PUSH
8662: LD_INT 0
8664: PUSH
8665: LD_INT 0
8667: PUSH
8668: LD_INT 0
8670: PUSH
8671: LD_INT 1
8673: PUSH
8674: LD_INT 0
8676: PUSH
8677: LD_INT 0
8679: PUSH
8680: LD_INT 0
8682: PUSH
8683: LD_INT 0
8685: PUSH
8686: LD_INT 1
8688: PUSH
8689: LD_INT 0
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
8704: LD_ADDR_VAR 0 6
8708: PUSH
8709: LD_EXP 82
8713: PUSH
8714: LD_VAR 0 2
8718: ARRAY
8719: PUSH
8720: LD_EXP 85
8724: PUSH
8725: LD_VAR 0 2
8729: ARRAY
8730: DIFF
8731: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
8732: LD_ADDR_EXP 82
8736: PUSH
8737: LD_EXP 82
8741: PPUSH
8742: LD_VAR 0 2
8746: PPUSH
8747: LD_EXP 82
8751: PUSH
8752: LD_VAR 0 2
8756: ARRAY
8757: PUSH
8758: LD_VAR 0 6
8762: DIFF
8763: PPUSH
8764: CALL_OW 1
8768: ST_TO_ADDR
// if not attackers then
8769: LD_VAR 0 6
8773: NOT
8774: IFFALSE 8778
// continue ;
8776: GO 7967
// repeat wait ( 0 0$1 ) ;
8778: LD_INT 35
8780: PPUSH
8781: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
8785: LD_VAR 0 6
8789: PPUSH
8790: LD_INT 60
8792: PUSH
8793: EMPTY
8794: LIST
8795: PPUSH
8796: CALL_OW 72
8800: NOT
8801: IFFALSE 8778
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
8803: LD_VAR 0 2
8807: PPUSH
8808: LD_VAR 0 6
8812: PPUSH
8813: LD_VAR 0 5
8817: PPUSH
8818: LD_VAR 0 4
8822: PPUSH
8823: CALL 72776 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
8827: LD_EXP 63
8831: PUSH
8832: LD_VAR 0 2
8836: ARRAY
8837: PPUSH
8838: LD_INT 50
8840: PUSH
8841: EMPTY
8842: LIST
8843: PPUSH
8844: CALL_OW 72
8848: NOT
8849: IFFALSE 7967
// end ;
8851: PPOPN 6
8853: END
// export RussiansDefeated ; every 0 0$1 trigger FirstAssaultRepelled and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
8854: LD_EXP 4
8858: PUSH
8859: LD_INT 22
8861: PUSH
8862: LD_INT 3
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: PUSH
8869: LD_INT 21
8871: PUSH
8872: LD_INT 1
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PPUSH
8883: CALL_OW 69
8887: PUSH
8888: LD_INT 0
8890: EQUAL
8891: AND
8892: IFFALSE 8905
8894: GO 8896
8896: DISABLE
// begin RussiansDefeated := true ;
8897: LD_ADDR_EXP 44
8901: PUSH
8902: LD_INT 1
8904: ST_TO_ADDR
// end ;
8905: END
// every 0 0$1 trigger FirstAssaultRepelled and not JMM_Arrived do var i , un , filter , soldiers , bazookas , vehs , vehicle , medics , squad , attackers , _target , flags ;
8906: LD_EXP 4
8910: PUSH
8911: LD_EXP 6
8915: NOT
8916: AND
8917: IFFALSE 9890
8919: GO 8921
8921: DISABLE
8922: LD_INT 0
8924: PPUSH
8925: PPUSH
8926: PPUSH
8927: PPUSH
8928: PPUSH
8929: PPUSH
8930: PPUSH
8931: PPUSH
8932: PPUSH
8933: PPUSH
8934: PPUSH
8935: PPUSH
// begin wait ( [ Rand ( 4 4$00 , 4 4$30 ) , Rand ( 4 4$30 , 3 3$30 ) , Rand ( 3 3$00 , 2 2$00 ) ] [ Difficulty ] ) ;
8936: LD_INT 8400
8938: PPUSH
8939: LD_INT 9450
8941: PPUSH
8942: CALL_OW 12
8946: PUSH
8947: LD_INT 9450
8949: PPUSH
8950: LD_INT 7350
8952: PPUSH
8953: CALL_OW 12
8957: PUSH
8958: LD_INT 6300
8960: PPUSH
8961: LD_INT 4200
8963: PPUSH
8964: CALL_OW 12
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: LIST
8973: PUSH
8974: LD_OWVAR 67
8978: ARRAY
8979: PPUSH
8980: CALL_OW 67
// filter := [ ] ;
8984: LD_ADDR_VAR 0 3
8988: PUSH
8989: EMPTY
8990: ST_TO_ADDR
// soldiers := [ Rand ( 2 , 3 ) , Rand ( 3 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
8991: LD_ADDR_VAR 0 4
8995: PUSH
8996: LD_INT 2
8998: PPUSH
8999: LD_INT 3
9001: PPUSH
9002: CALL_OW 12
9006: PUSH
9007: LD_INT 3
9009: PPUSH
9010: LD_INT 4
9012: PPUSH
9013: CALL_OW 12
9017: PUSH
9018: LD_INT 3
9020: PPUSH
9021: LD_INT 5
9023: PPUSH
9024: CALL_OW 12
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: LIST
9033: PUSH
9034: LD_OWVAR 67
9038: ARRAY
9039: ST_TO_ADDR
// bazookas := [ 1 , Rand ( 1 , 2 ) , Rand ( 2 , 3 ) ] [ Difficulty ] ;
9040: LD_ADDR_VAR 0 5
9044: PUSH
9045: LD_INT 1
9047: PUSH
9048: LD_INT 1
9050: PPUSH
9051: LD_INT 2
9053: PPUSH
9054: CALL_OW 12
9058: PUSH
9059: LD_INT 2
9061: PPUSH
9062: LD_INT 3
9064: PPUSH
9065: CALL_OW 12
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: LIST
9074: PUSH
9075: LD_OWVAR 67
9079: ARRAY
9080: ST_TO_ADDR
// vehs := [ Rand ( 2 , 3 ) , Rand ( 2 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
9081: LD_ADDR_VAR 0 6
9085: PUSH
9086: LD_INT 2
9088: PPUSH
9089: LD_INT 3
9091: PPUSH
9092: CALL_OW 12
9096: PUSH
9097: LD_INT 2
9099: PPUSH
9100: LD_INT 4
9102: PPUSH
9103: CALL_OW 12
9107: PUSH
9108: LD_INT 3
9110: PPUSH
9111: LD_INT 5
9113: PPUSH
9114: CALL_OW 12
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: LIST
9123: PUSH
9124: LD_OWVAR 67
9128: ARRAY
9129: ST_TO_ADDR
// medics := [ 1 , 2 , 2 ] [ Difficulty ] ;
9130: LD_ADDR_VAR 0 8
9134: PUSH
9135: LD_INT 1
9137: PUSH
9138: LD_INT 2
9140: PUSH
9141: LD_INT 2
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: LIST
9148: PUSH
9149: LD_OWVAR 67
9153: ARRAY
9154: ST_TO_ADDR
// uc_side := 3 ;
9155: LD_ADDR_OWVAR 20
9159: PUSH
9160: LD_INT 3
9162: ST_TO_ADDR
// uc_nation := nation_russian ;
9163: LD_ADDR_OWVAR 21
9167: PUSH
9168: LD_INT 3
9170: ST_TO_ADDR
// for i = 1 to soldiers do
9171: LD_ADDR_VAR 0 1
9175: PUSH
9176: DOUBLE
9177: LD_INT 1
9179: DEC
9180: ST_TO_ADDR
9181: LD_VAR 0 4
9185: PUSH
9186: FOR_TO
9187: IFFALSE 9229
// begin PrepareSoldier ( 0 , game_eskill ) ;
9189: LD_INT 0
9191: PPUSH
9192: LD_EXP 40
9196: PPUSH
9197: CALL_OW 381
// un := CreateHuman ;
9201: LD_ADDR_VAR 0 2
9205: PUSH
9206: CALL_OW 44
9210: ST_TO_ADDR
// filter := filter ^ un ;
9211: LD_ADDR_VAR 0 3
9215: PUSH
9216: LD_VAR 0 3
9220: PUSH
9221: LD_VAR 0 2
9225: ADD
9226: ST_TO_ADDR
// end ;
9227: GO 9186
9229: POP
9230: POP
// for i = 1 to bazookas do
9231: LD_ADDR_VAR 0 1
9235: PUSH
9236: DOUBLE
9237: LD_INT 1
9239: DEC
9240: ST_TO_ADDR
9241: LD_VAR 0 5
9245: PUSH
9246: FOR_TO
9247: IFFALSE 9297
// begin PrepareSoldier ( 0 , game_eskill ) ;
9249: LD_INT 0
9251: PPUSH
9252: LD_EXP 40
9256: PPUSH
9257: CALL_OW 381
// hc_class := class_bazooker ;
9261: LD_ADDR_OWVAR 28
9265: PUSH
9266: LD_INT 9
9268: ST_TO_ADDR
// un := CreateHuman ;
9269: LD_ADDR_VAR 0 2
9273: PUSH
9274: CALL_OW 44
9278: ST_TO_ADDR
// filter := filter ^ un ;
9279: LD_ADDR_VAR 0 3
9283: PUSH
9284: LD_VAR 0 3
9288: PUSH
9289: LD_VAR 0 2
9293: ADD
9294: ST_TO_ADDR
// end ;
9295: GO 9246
9297: POP
9298: POP
// for i = 1 to medics do
9299: LD_ADDR_VAR 0 1
9303: PUSH
9304: DOUBLE
9305: LD_INT 1
9307: DEC
9308: ST_TO_ADDR
9309: LD_VAR 0 8
9313: PUSH
9314: FOR_TO
9315: IFFALSE 9357
// begin PrepareScientist ( 0 , game_eskill ) ;
9317: LD_INT 0
9319: PPUSH
9320: LD_EXP 40
9324: PPUSH
9325: CALL_OW 384
// un := CreateHuman ;
9329: LD_ADDR_VAR 0 2
9333: PUSH
9334: CALL_OW 44
9338: ST_TO_ADDR
// filter := filter ^ un ;
9339: LD_ADDR_VAR 0 3
9343: PUSH
9344: LD_VAR 0 3
9348: PUSH
9349: LD_VAR 0 2
9353: ADD
9354: ST_TO_ADDR
// end ;
9355: GO 9314
9357: POP
9358: POP
// for i = 1 to vehs do
9359: LD_ADDR_VAR 0 1
9363: PUSH
9364: DOUBLE
9365: LD_INT 1
9367: DEC
9368: ST_TO_ADDR
9369: LD_VAR 0 6
9373: PUSH
9374: FOR_TO
9375: IFFALSE 9567
// begin case Rand ( 1 , 5 ) of 1 :
9377: LD_INT 1
9379: PPUSH
9380: LD_INT 5
9382: PPUSH
9383: CALL_OW 12
9387: PUSH
9388: LD_INT 1
9390: DOUBLE
9391: EQUAL
9392: IFTRUE 9396
9394: GO 9418
9396: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 2 :
9397: LD_INT 22
9399: PPUSH
9400: LD_INT 3
9402: PPUSH
9403: LD_INT 3
9405: PPUSH
9406: LD_INT 43
9408: PPUSH
9409: LD_INT 100
9411: PPUSH
9412: CALL 17280 0 5
9416: GO 9539
9418: LD_INT 2
9420: DOUBLE
9421: EQUAL
9422: IFTRUE 9426
9424: GO 9448
9426: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gun , 100 ) ; 3 :
9427: LD_INT 22
9429: PPUSH
9430: LD_INT 3
9432: PPUSH
9433: LD_INT 3
9435: PPUSH
9436: LD_INT 44
9438: PPUSH
9439: LD_INT 100
9441: PPUSH
9442: CALL 17280 0 5
9446: GO 9539
9448: LD_INT 3
9450: DOUBLE
9451: EQUAL
9452: IFTRUE 9456
9454: GO 9478
9456: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher , 100 ) ; 4 :
9457: LD_INT 22
9459: PPUSH
9460: LD_INT 3
9462: PPUSH
9463: LD_INT 3
9465: PPUSH
9466: LD_INT 45
9468: PPUSH
9469: LD_INT 100
9471: PPUSH
9472: CALL 17280 0 5
9476: GO 9539
9478: LD_INT 4
9480: DOUBLE
9481: EQUAL
9482: IFTRUE 9486
9484: GO 9508
9486: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 5 :
9487: LD_INT 24
9489: PPUSH
9490: LD_INT 3
9492: PPUSH
9493: LD_INT 3
9495: PPUSH
9496: LD_INT 43
9498: PPUSH
9499: LD_INT 100
9501: PPUSH
9502: CALL 17280 0 5
9506: GO 9539
9508: LD_INT 5
9510: DOUBLE
9511: EQUAL
9512: IFTRUE 9516
9514: GO 9538
9516: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun , 100 ) ; end ;
9517: LD_INT 24
9519: PPUSH
9520: LD_INT 3
9522: PPUSH
9523: LD_INT 3
9525: PPUSH
9526: LD_INT 46
9528: PPUSH
9529: LD_INT 100
9531: PPUSH
9532: CALL 17280 0 5
9536: GO 9539
9538: POP
// vehicle := CreateVehicle ;
9539: LD_ADDR_VAR 0 7
9543: PUSH
9544: CALL_OW 45
9548: ST_TO_ADDR
// filter := filter ^ vehicle ;
9549: LD_ADDR_VAR 0 3
9553: PUSH
9554: LD_VAR 0 3
9558: PUSH
9559: LD_VAR 0 7
9563: ADD
9564: ST_TO_ADDR
// end ;
9565: GO 9374
9567: POP
9568: POP
// for i = 1 to filter do
9569: LD_ADDR_VAR 0 1
9573: PUSH
9574: DOUBLE
9575: LD_INT 1
9577: DEC
9578: ST_TO_ADDR
9579: LD_VAR 0 3
9583: PUSH
9584: FOR_TO
9585: IFFALSE 9610
// PlaceUnitArea ( filter [ i ] , RUAttackSpawn1 , false ) ;
9587: LD_VAR 0 3
9591: PUSH
9592: LD_VAR 0 1
9596: ARRAY
9597: PPUSH
9598: LD_INT 14
9600: PPUSH
9601: LD_INT 0
9603: PPUSH
9604: CALL_OW 49
9608: GO 9584
9610: POP
9611: POP
// case Rand ( 1 , 3 ) of 1 :
9612: LD_INT 1
9614: PPUSH
9615: LD_INT 3
9617: PPUSH
9618: CALL_OW 12
9622: PUSH
9623: LD_INT 1
9625: DOUBLE
9626: EQUAL
9627: IFTRUE 9631
9629: GO 9685
9631: POP
// _target := [ [ 165 , 114 ] , [ 104 , 108 ] , [ 86 , 77 ] , [ 63 , 38 ] ] ; 2 :
9632: LD_ADDR_VAR 0 11
9636: PUSH
9637: LD_INT 165
9639: PUSH
9640: LD_INT 114
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PUSH
9647: LD_INT 104
9649: PUSH
9650: LD_INT 108
9652: PUSH
9653: EMPTY
9654: LIST
9655: LIST
9656: PUSH
9657: LD_INT 86
9659: PUSH
9660: LD_INT 77
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: PUSH
9667: LD_INT 63
9669: PUSH
9670: LD_INT 38
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: ST_TO_ADDR
9683: GO 9810
9685: LD_INT 2
9687: DOUBLE
9688: EQUAL
9689: IFTRUE 9693
9691: GO 9747
9693: POP
// _target := [ [ 165 , 114 ] , [ 146 , 71 ] , [ 112 , 41 ] , [ 63 , 38 ] ] ; 3 :
9694: LD_ADDR_VAR 0 11
9698: PUSH
9699: LD_INT 165
9701: PUSH
9702: LD_INT 114
9704: PUSH
9705: EMPTY
9706: LIST
9707: LIST
9708: PUSH
9709: LD_INT 146
9711: PUSH
9712: LD_INT 71
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: PUSH
9719: LD_INT 112
9721: PUSH
9722: LD_INT 41
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: PUSH
9729: LD_INT 63
9731: PUSH
9732: LD_INT 38
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: ST_TO_ADDR
9745: GO 9810
9747: LD_INT 3
9749: DOUBLE
9750: EQUAL
9751: IFTRUE 9755
9753: GO 9809
9755: POP
// _target := [ [ 165 , 114 ] , [ 63 , 99 ] , [ 55 , 77 ] , [ 63 , 38 ] ] ; end ;
9756: LD_ADDR_VAR 0 11
9760: PUSH
9761: LD_INT 165
9763: PUSH
9764: LD_INT 114
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: PUSH
9771: LD_INT 63
9773: PUSH
9774: LD_INT 99
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: PUSH
9781: LD_INT 55
9783: PUSH
9784: LD_INT 77
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: PUSH
9791: LD_INT 63
9793: PUSH
9794: LD_INT 38
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: ST_TO_ADDR
9807: GO 9810
9809: POP
// attackers := filter ;
9810: LD_ADDR_VAR 0 10
9814: PUSH
9815: LD_VAR 0 3
9819: ST_TO_ADDR
// flags := [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ;
9820: LD_ADDR_VAR 0 12
9824: PUSH
9825: LD_INT 0
9827: PUSH
9828: LD_INT 1
9830: PUSH
9831: LD_INT 0
9833: PUSH
9834: LD_INT 1
9836: PUSH
9837: LD_INT 1
9839: PUSH
9840: LD_INT 0
9842: PUSH
9843: LD_INT 0
9845: PUSH
9846: LD_INT 0
9848: PUSH
9849: LD_INT 1
9851: PUSH
9852: LD_INT 1
9854: PUSH
9855: EMPTY
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: ST_TO_ADDR
// MC_PrepareAttack ( 1 , attackers , _target , flags ) ;
9867: LD_INT 1
9869: PPUSH
9870: LD_VAR 0 10
9874: PPUSH
9875: LD_VAR 0 11
9879: PPUSH
9880: LD_VAR 0 12
9884: PPUSH
9885: CALL 72776 0 4
// enable ;
9889: ENABLE
// end ;
9890: PPOPN 12
9892: END
// every 0 0$1 do var i , tmp ;
9893: GO 9895
9895: DISABLE
9896: LD_INT 0
9898: PPUSH
9899: PPUSH
// begin enable ;
9900: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
9901: LD_ADDR_VAR 0 2
9905: PUSH
9906: LD_INT 3
9908: PUSH
9909: LD_INT 22
9911: PUSH
9912: LD_INT 1
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: PUSH
9923: LD_INT 32
9925: PUSH
9926: LD_INT 1
9928: PUSH
9929: EMPTY
9930: LIST
9931: LIST
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PPUSH
9937: CALL_OW 69
9941: ST_TO_ADDR
// if tmp then
9942: LD_VAR 0 2
9946: IFFALSE 9992
// for i in tmp do
9948: LD_ADDR_VAR 0 1
9952: PUSH
9953: LD_VAR 0 2
9957: PUSH
9958: FOR_IN
9959: IFFALSE 9990
// if GetFuel ( i ) < 3 then
9961: LD_VAR 0 1
9965: PPUSH
9966: CALL_OW 261
9970: PUSH
9971: LD_INT 3
9973: LESS
9974: IFFALSE 9988
// SetFuel ( i , 3 ) ;
9976: LD_VAR 0 1
9980: PPUSH
9981: LD_INT 3
9983: PPUSH
9984: CALL_OW 240
9988: GO 9958
9990: POP
9991: POP
// end ;
9992: PPOPN 2
9994: END
// every 0 0$1 trigger ( FilterUnitsInArea ( RU_Base_Area , [ f_side , 1 ] ) and not JMMArrival ) or ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) and not FirstAssaultRepelled ) do var i , veh , tmp ;
9995: LD_INT 3
9997: PPUSH
9998: LD_INT 22
10000: PUSH
10001: LD_INT 1
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: PPUSH
10008: CALL_OW 70
10012: PUSH
10013: LD_EXP 41
10017: NOT
10018: AND
10019: PUSH
10020: LD_INT 10
10022: PPUSH
10023: LD_INT 22
10025: PUSH
10026: LD_INT 1
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PPUSH
10033: CALL_OW 70
10037: PUSH
10038: LD_EXP 4
10042: NOT
10043: AND
10044: OR
10045: IFFALSE 10059
10047: GO 10049
10049: DISABLE
10050: LD_INT 0
10052: PPUSH
10053: PPUSH
10054: PPUSH
// begin Antirush ;
10055: CALL 10062 0 0
// end ;
10059: PPOPN 3
10061: END
// export function Antirush ; var i , veh , tmp , num ; begin
10062: LD_INT 0
10064: PPUSH
10065: PPUSH
10066: PPUSH
10067: PPUSH
10068: PPUSH
// tmp := [ ] ;
10069: LD_ADDR_VAR 0 4
10073: PUSH
10074: EMPTY
10075: ST_TO_ADDR
// if not FirstAssaultRepelled then
10076: LD_EXP 4
10080: NOT
10081: IFFALSE 10093
// num := 18 else
10083: LD_ADDR_VAR 0 5
10087: PUSH
10088: LD_INT 18
10090: ST_TO_ADDR
10091: GO 10101
// num := 12 ;
10093: LD_ADDR_VAR 0 5
10097: PUSH
10098: LD_INT 12
10100: ST_TO_ADDR
// num := num - [ 4 , 2 , 0 ] [ Difficulty ] ;
10101: LD_ADDR_VAR 0 5
10105: PUSH
10106: LD_VAR 0 5
10110: PUSH
10111: LD_INT 4
10113: PUSH
10114: LD_INT 2
10116: PUSH
10117: LD_INT 0
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: LIST
10124: PUSH
10125: LD_OWVAR 67
10129: ARRAY
10130: MINUS
10131: ST_TO_ADDR
// for i := 1 to num do
10132: LD_ADDR_VAR 0 2
10136: PUSH
10137: DOUBLE
10138: LD_INT 1
10140: DEC
10141: ST_TO_ADDR
10142: LD_VAR 0 5
10146: PUSH
10147: FOR_TO
10148: IFFALSE 10287
// begin uc_side := 3 ;
10150: LD_ADDR_OWVAR 20
10154: PUSH
10155: LD_INT 3
10157: ST_TO_ADDR
// uc_nation := 3 ;
10158: LD_ADDR_OWVAR 21
10162: PUSH
10163: LD_INT 3
10165: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_siberite , control_computer , [ ru_heavy_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] , 100 ) ;
10166: LD_INT 23
10168: PPUSH
10169: LD_INT 3
10171: PPUSH
10172: LD_INT 3
10174: PPUSH
10175: LD_INT 46
10177: PUSH
10178: LD_INT 43
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: PUSH
10185: LD_INT 1
10187: PPUSH
10188: LD_INT 2
10190: PPUSH
10191: CALL_OW 12
10195: ARRAY
10196: PPUSH
10197: LD_INT 100
10199: PPUSH
10200: CALL 17280 0 5
// veh := CreateVehicle ;
10204: LD_ADDR_VAR 0 3
10208: PUSH
10209: CALL_OW 45
10213: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10214: LD_VAR 0 3
10218: PPUSH
10219: LD_INT 5
10221: PPUSH
10222: CALL_OW 233
// PlaceUnitXYR ( veh , 199 , 135 , 3 , false ) ;
10226: LD_VAR 0 3
10230: PPUSH
10231: LD_INT 199
10233: PPUSH
10234: LD_INT 135
10236: PPUSH
10237: LD_INT 3
10239: PPUSH
10240: LD_INT 0
10242: PPUSH
10243: CALL_OW 50
// tmp := tmp ^ veh ;
10247: LD_ADDR_VAR 0 4
10251: PUSH
10252: LD_VAR 0 4
10256: PUSH
10257: LD_VAR 0 3
10261: ADD
10262: ST_TO_ADDR
// ComMoveXY ( veh , 173 , 118 ) ;
10263: LD_VAR 0 3
10267: PPUSH
10268: LD_INT 173
10270: PPUSH
10271: LD_INT 118
10273: PPUSH
10274: CALL_OW 111
// wait ( 0 0$2 ) ;
10278: LD_INT 70
10280: PPUSH
10281: CALL_OW 67
// end ;
10285: GO 10147
10287: POP
10288: POP
// repeat wait ( 0 0$1 ) ;
10289: LD_INT 35
10291: PPUSH
10292: CALL_OW 67
// for i in tmp do
10296: LD_ADDR_VAR 0 2
10300: PUSH
10301: LD_VAR 0 4
10305: PUSH
10306: FOR_IN
10307: IFFALSE 10374
// if IsDead ( i ) then
10309: LD_VAR 0 2
10313: PPUSH
10314: CALL_OW 301
10318: IFFALSE 10338
// tmp := tmp diff i else
10320: LD_ADDR_VAR 0 4
10324: PUSH
10325: LD_VAR 0 4
10329: PUSH
10330: LD_VAR 0 2
10334: DIFF
10335: ST_TO_ADDR
10336: GO 10372
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
10338: LD_VAR 0 2
10342: PPUSH
10343: LD_INT 22
10345: PUSH
10346: LD_INT 1
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: PPUSH
10353: CALL_OW 69
10357: PPUSH
10358: LD_VAR 0 2
10362: PPUSH
10363: CALL_OW 74
10367: PPUSH
10368: CALL_OW 115
10372: GO 10306
10374: POP
10375: POP
// until not tmp ;
10376: LD_VAR 0 4
10380: NOT
10381: IFFALSE 10289
// end ; end_of_file
10383: LD_VAR 0 1
10387: RET
// export Losses ; on UnitDestroyed ( un ) do begin if un = Brighton then
10388: LD_VAR 0 1
10392: PUSH
10393: LD_EXP 9
10397: EQUAL
10398: IFFALSE 10414
// begin wait ( 0 0$1 ) ;
10400: LD_INT 35
10402: PPUSH
10403: CALL_OW 67
// YouLost ( Brighton ) ;
10407: LD_STRING Brighton
10409: PPUSH
10410: CALL_OW 104
// end ; if un = JMM then
10414: LD_VAR 0 1
10418: PUSH
10419: LD_EXP 37
10423: EQUAL
10424: IFFALSE 10440
// begin wait ( 0 0$1 ) ;
10426: LD_INT 35
10428: PPUSH
10429: CALL_OW 67
// YouLost ( JMM ) ;
10433: LD_STRING JMM
10435: PPUSH
10436: CALL_OW 104
// end ; if un = Megan then
10440: LD_VAR 0 1
10444: PUSH
10445: LD_EXP 11
10449: EQUAL
10450: IFFALSE 10464
// begin Say ( Brighton , DBrighton-MeganDeath ) ;
10452: LD_EXP 9
10456: PPUSH
10457: LD_STRING DBrighton-MeganDeath
10459: PPUSH
10460: CALL_OW 88
// end ; if un = Palmer then
10464: LD_VAR 0 1
10468: PUSH
10469: LD_EXP 10
10473: EQUAL
10474: IFFALSE 10488
// begin Say ( Brighton , DBrighton-PalmerDeath ) ;
10476: LD_EXP 9
10480: PPUSH
10481: LD_STRING DBrighton-PalmerDeath
10483: PPUSH
10484: CALL_OW 88
// end ; if un = Burlak then
10488: LD_VAR 0 1
10492: PUSH
10493: LD_EXP 19
10497: EQUAL
10498: IFFALSE 10530
// begin if JMM_Arrived then
10500: LD_EXP 6
10504: IFFALSE 10518
// Say ( JMM , DJMM-BurlakDead ) ;
10506: LD_EXP 37
10510: PPUSH
10511: LD_STRING DJMM-BurlakDead
10513: PPUSH
10514: CALL_OW 88
// Say ( Palmer , DSol-BurlakDead ) ;
10518: LD_EXP 10
10522: PPUSH
10523: LD_STRING DSol-BurlakDead
10525: PPUSH
10526: CALL_OW 88
// end ; if un = BetaA or un = BetaB then
10530: LD_VAR 0 1
10534: PUSH
10535: LD_INT 1
10537: EQUAL
10538: PUSH
10539: LD_VAR 0 1
10543: PUSH
10544: LD_INT 3
10546: EQUAL
10547: OR
10548: IFFALSE 10564
// begin wait ( 0 0$1 ) ;
10550: LD_INT 35
10552: PPUSH
10553: CALL_OW 67
// YouLost ( Depot ) ;
10557: LD_STRING Depot
10559: PPUSH
10560: CALL_OW 104
// end ; if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
10564: LD_VAR 0 1
10568: PPUSH
10569: CALL_OW 255
10573: PUSH
10574: LD_INT 1
10576: EQUAL
10577: PUSH
10578: LD_VAR 0 1
10582: PPUSH
10583: CALL_OW 247
10587: PUSH
10588: LD_INT 1
10590: EQUAL
10591: AND
10592: IFFALSE 10608
// Losses := Losses + 1 ;
10594: LD_ADDR_EXP 45
10598: PUSH
10599: LD_EXP 45
10603: PUSH
10604: LD_INT 1
10606: PLUS
10607: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
10608: LD_VAR 0 1
10612: PPUSH
10613: CALL 75983 0 1
// end ;
10617: PPOPN 1
10619: END
// on UnitGoesToRed ( un ) do begin if un = Yashin then
10620: LD_VAR 0 1
10624: PUSH
10625: LD_EXP 13
10629: EQUAL
10630: IFFALSE 10644
// ForceSay ( Yashin , DDeath-Yas-3 ) ;
10632: LD_EXP 13
10636: PPUSH
10637: LD_STRING DDeath-Yas-3
10639: PPUSH
10640: CALL_OW 91
// if un = Popov then
10644: LD_VAR 0 1
10648: PUSH
10649: LD_EXP 14
10653: EQUAL
10654: IFFALSE 10668
// ForceSay ( Popov , DDeath-Pop-3 ) ;
10656: LD_EXP 14
10660: PPUSH
10661: LD_STRING DDeath-Pop-3
10663: PPUSH
10664: CALL_OW 91
// if un = Gaydar then
10668: LD_VAR 0 1
10672: PUSH
10673: LD_EXP 15
10677: EQUAL
10678: IFFALSE 10692
// ForceSay ( Gaydar , DDeath-Gay-3 ) ;
10680: LD_EXP 15
10684: PPUSH
10685: LD_STRING DDeath-Gay-3
10687: PPUSH
10688: CALL_OW 91
// if un = Sevi then
10692: LD_VAR 0 1
10696: PUSH
10697: LD_EXP 16
10701: EQUAL
10702: IFFALSE 10716
// ForceSay ( Sevi , DDeath-Vse-3 ) ;
10704: LD_EXP 16
10708: PPUSH
10709: LD_STRING DDeath-Vse-3
10711: PPUSH
10712: CALL_OW 91
// end ;
10716: PPOPN 1
10718: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_laser then
10719: LD_VAR 0 1
10723: PUSH
10724: LD_INT 10
10726: EQUAL
10727: IFFALSE 10765
// begin Say ( Brighton , DBrighton-C1 ) ;
10729: LD_EXP 9
10733: PPUSH
10734: LD_STRING DBrighton-C1
10736: PPUSH
10737: CALL_OW 88
// Say ( Megan , DMegan-C1 ) ;
10741: LD_EXP 11
10745: PPUSH
10746: LD_STRING DMegan-C1
10748: PPUSH
10749: CALL_OW 88
// Say ( Brighton , DBrighton-C2 ) ;
10753: LD_EXP 9
10757: PPUSH
10758: LD_STRING DBrighton-C2
10760: PPUSH
10761: CALL_OW 88
// end ; MCE_ResearchComplete ( tech , lab ) ;
10765: LD_VAR 0 1
10769: PPUSH
10770: LD_VAR 0 2
10774: PPUSH
10775: CALL 75679 0 2
// end ;
10779: PPOPN 2
10781: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
10782: LD_VAR 0 1
10786: PPUSH
10787: LD_VAR 0 2
10791: PPUSH
10792: CALL 78317 0 2
// end ;
10796: PPOPN 2
10798: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
10799: LD_VAR 0 1
10803: PPUSH
10804: CALL 77385 0 1
// end ;
10808: PPOPN 1
10810: END
// export RUFirstDepot ; on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 then
10811: LD_VAR 0 1
10815: PPUSH
10816: CALL_OW 266
10820: PUSH
10821: LD_INT 0
10823: EQUAL
10824: PUSH
10825: LD_VAR 0 1
10829: PPUSH
10830: CALL_OW 255
10834: PUSH
10835: LD_INT 3
10837: EQUAL
10838: AND
10839: IFFALSE 10901
// begin SetResourceType ( GetBase ( b ) , mat_cans , 10000 ) ;
10841: LD_VAR 0 1
10845: PPUSH
10846: CALL_OW 274
10850: PPUSH
10851: LD_INT 1
10853: PPUSH
10854: LD_INT 10000
10856: PPUSH
10857: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
10861: LD_VAR 0 1
10865: PPUSH
10866: CALL_OW 274
10870: PPUSH
10871: LD_INT 2
10873: PPUSH
10874: LD_INT 250
10876: PPUSH
10877: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 100 ) ;
10881: LD_VAR 0 1
10885: PPUSH
10886: CALL_OW 274
10890: PPUSH
10891: LD_INT 3
10893: PPUSH
10894: LD_INT 100
10896: PPUSH
10897: CALL_OW 277
// end ; MCE_BuildingComplete ( b ) ;
10901: LD_VAR 0 1
10905: PPUSH
10906: CALL 77626 0 1
// end ;
10910: PPOPN 1
10912: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
10913: LD_VAR 0 1
10917: PPUSH
10918: LD_VAR 0 2
10922: PPUSH
10923: LD_VAR 0 3
10927: PPUSH
10928: LD_VAR 0 4
10932: PPUSH
10933: LD_VAR 0 5
10937: PPUSH
10938: CALL 75299 0 5
// end ;
10942: PPOPN 5
10944: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
10945: LD_VAR 0 1
10949: PPUSH
10950: LD_VAR 0 2
10954: PPUSH
10955: CALL 74895 0 2
// end ;
10959: PPOPN 2
10961: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
10962: LD_VAR 0 1
10966: PPUSH
10967: LD_VAR 0 2
10971: PPUSH
10972: LD_VAR 0 3
10976: PPUSH
10977: LD_VAR 0 4
10981: PPUSH
10982: CALL 74733 0 4
// end ;
10986: PPOPN 4
10988: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
10989: LD_VAR 0 1
10993: PPUSH
10994: LD_VAR 0 2
10998: PPUSH
10999: LD_VAR 0 3
11003: PPUSH
11004: CALL 74508 0 3
// end ;
11008: PPOPN 3
11010: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
11011: LD_VAR 0 1
11015: PPUSH
11016: LD_VAR 0 2
11020: PPUSH
11021: CALL 74393 0 2
// end ;
11025: PPOPN 2
11027: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
11028: LD_VAR 0 1
11032: PPUSH
11033: LD_VAR 0 2
11037: PPUSH
11038: CALL 78578 0 2
// end ;
11042: PPOPN 2
11044: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin if GetSide ( driver ) = 6 then
11045: LD_VAR 0 1
11049: PPUSH
11050: CALL_OW 255
11054: PUSH
11055: LD_INT 6
11057: EQUAL
11058: IFFALSE 11188
// begin if driver in [ Yashin , Sevi , Gaydar , Popov ] then
11060: LD_VAR 0 1
11064: PUSH
11065: LD_EXP 13
11069: PUSH
11070: LD_EXP 16
11074: PUSH
11075: LD_EXP 15
11079: PUSH
11080: LD_EXP 14
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: IN
11091: IFFALSE 11095
// exit ;
11093: GO 11212
// if AssaultStarted then
11095: LD_EXP 8
11099: IFFALSE 11173
// case Rand ( 1 , 4 ) of 1 .. 3 :
11101: LD_INT 1
11103: PPUSH
11104: LD_INT 4
11106: PPUSH
11107: CALL_OW 12
11111: PUSH
11112: LD_INT 1
11114: DOUBLE
11115: GREATEREQUAL
11116: IFFALSE 11124
11118: LD_INT 3
11120: DOUBLE
11121: LESSEQUAL
11122: IFTRUE 11126
11124: GO 11144
11126: POP
// ComAgressiveMove ( driver , 67 , 37 ) ; 4 :
11127: LD_VAR 0 1
11131: PPUSH
11132: LD_INT 67
11134: PPUSH
11135: LD_INT 37
11137: PPUSH
11138: CALL_OW 114
11142: GO 11171
11144: LD_INT 4
11146: DOUBLE
11147: EQUAL
11148: IFTRUE 11152
11150: GO 11170
11152: POP
// ComMoveXY ( driver , 120 , 131 ) ; end else
11153: LD_VAR 0 1
11157: PPUSH
11158: LD_INT 120
11160: PPUSH
11161: LD_INT 131
11163: PPUSH
11164: CALL_OW 111
11168: GO 11171
11170: POP
11171: GO 11188
// ComMoveXY ( driver , 120 , 131 ) ;
11173: LD_VAR 0 1
11177: PPUSH
11178: LD_INT 120
11180: PPUSH
11181: LD_INT 131
11183: PPUSH
11184: CALL_OW 111
// end ; MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
11188: LD_VAR 0 1
11192: PPUSH
11193: LD_VAR 0 2
11197: PPUSH
11198: LD_VAR 0 3
11202: PPUSH
11203: LD_VAR 0 4
11207: PPUSH
11208: CALL 78794 0 4
// end ;
11212: PPOPN 4
11214: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
11215: LD_VAR 0 1
11219: PPUSH
11220: LD_VAR 0 2
11224: PPUSH
11225: CALL 74202 0 2
// end ;
11229: PPOPN 2
11231: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
11232: LD_VAR 0 1
11236: PPUSH
11237: CALL 90092 0 1
// end ; end_of_file
11241: PPOPN 1
11243: END
// every 0 0$1 trigger JMM_Arrived and RussiansDefeated do
11244: LD_EXP 6
11248: PUSH
11249: LD_EXP 44
11253: AND
11254: IFFALSE 11425
11256: GO 11258
11258: DISABLE
// begin wait ( 0 0$2 ) ;
11259: LD_INT 70
11261: PPUSH
11262: CALL_OW 67
// Say ( Brighton , DBrighton-G1 ) ;
11266: LD_EXP 9
11270: PPUSH
11271: LD_STRING DBrighton-G1
11273: PPUSH
11274: CALL_OW 88
// if Losses < 1 then
11278: LD_EXP 45
11282: PUSH
11283: LD_INT 1
11285: LESS
11286: IFFALSE 11300
// AddMedal ( Losses , 1 ) else
11288: LD_STRING Losses
11290: PPUSH
11291: LD_INT 1
11293: PPUSH
11294: CALL_OW 101
11298: GO 11333
// if Losses < 5 then
11300: LD_EXP 45
11304: PUSH
11305: LD_INT 5
11307: LESS
11308: IFFALSE 11322
// AddMedal ( Losses , 2 ) else
11310: LD_STRING Losses
11312: PPUSH
11313: LD_INT 2
11315: PPUSH
11316: CALL_OW 101
11320: GO 11333
// AddMedal ( Losses , - 1 ) ;
11322: LD_STRING Losses
11324: PPUSH
11325: LD_INT 1
11327: NEG
11328: PPUSH
11329: CALL_OW 101
// if LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
11333: LD_EXP 7
11337: PUSH
11338: LD_INT 10
11340: PPUSH
11341: LD_INT 1
11343: PPUSH
11344: CALL_OW 321
11348: PUSH
11349: LD_INT 2
11351: EQUAL
11352: AND
11353: IFFALSE 11367
// AddMedal ( Laser , 1 ) else
11355: LD_STRING Laser
11357: PPUSH
11358: LD_INT 1
11360: PPUSH
11361: CALL_OW 101
11365: GO 11414
// if not LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
11367: LD_EXP 7
11371: NOT
11372: PUSH
11373: LD_INT 10
11375: PPUSH
11376: LD_INT 1
11378: PPUSH
11379: CALL_OW 321
11383: PUSH
11384: LD_INT 2
11386: EQUAL
11387: AND
11388: IFFALSE 11403
// AddMedal ( Laser , - 1 ) else
11390: LD_STRING Laser
11392: PPUSH
11393: LD_INT 1
11395: NEG
11396: PPUSH
11397: CALL_OW 101
11401: GO 11414
// AddMedal ( Laser , - 2 ) ;
11403: LD_STRING Laser
11405: PPUSH
11406: LD_INT 2
11408: NEG
11409: PPUSH
11410: CALL_OW 101
// GiveMedals ( BaseMain ) ;
11414: LD_STRING BaseMain
11416: PPUSH
11417: CALL_OW 102
// YouWin ;
11421: CALL_OW 103
// end ; end_of_file
11425: END
// export rows ; export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
11426: LD_INT 0
11428: PPUSH
11429: PPUSH
// area = ListEnvironmentArea ( area ) ;
11430: LD_ADDR_VAR 0 2
11434: PUSH
11435: LD_VAR 0 2
11439: PPUSH
11440: CALL_OW 353
11444: ST_TO_ADDR
// if bulldozer > 0 then
11445: LD_VAR 0 1
11449: PUSH
11450: LD_INT 0
11452: GREATER
11453: IFFALSE 11564
// for i = area downto 1 do
11455: LD_ADDR_VAR 0 4
11459: PUSH
11460: DOUBLE
11461: LD_VAR 0 2
11465: INC
11466: ST_TO_ADDR
11467: LD_INT 1
11469: PUSH
11470: FOR_DOWNTO
11471: IFFALSE 11562
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
11473: LD_VAR 0 2
11477: PUSH
11478: LD_VAR 0 4
11482: ARRAY
11483: PUSH
11484: LD_INT 1
11486: ARRAY
11487: PPUSH
11488: LD_VAR 0 2
11492: PUSH
11493: LD_VAR 0 4
11497: ARRAY
11498: PUSH
11499: LD_INT 2
11501: ARRAY
11502: PPUSH
11503: CALL_OW 351
11507: IFFALSE 11560
// if not HasTask ( bulldozer ) then
11509: LD_VAR 0 1
11513: PPUSH
11514: CALL_OW 314
11518: NOT
11519: IFFALSE 11560
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
11521: LD_VAR 0 1
11525: PPUSH
11526: LD_VAR 0 2
11530: PUSH
11531: LD_VAR 0 4
11535: ARRAY
11536: PUSH
11537: LD_INT 1
11539: ARRAY
11540: PPUSH
11541: LD_VAR 0 2
11545: PUSH
11546: LD_VAR 0 4
11550: ARRAY
11551: PUSH
11552: LD_INT 2
11554: ARRAY
11555: PPUSH
11556: CALL_OW 171
11560: GO 11470
11562: POP
11563: POP
// end ;
11564: LD_VAR 0 3
11568: RET
// export function ComMeeting ( team , area ) ; var i , x , tmp , offset , sold_team , civil_team ; begin
11569: LD_INT 0
11571: PPUSH
11572: PPUSH
11573: PPUSH
11574: PPUSH
11575: PPUSH
11576: PPUSH
11577: PPUSH
// sold_team = UnitFilter ( team , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) ;
11578: LD_ADDR_VAR 0 8
11582: PUSH
11583: LD_VAR 0 1
11587: PPUSH
11588: LD_INT 22
11590: PUSH
11591: LD_INT 1
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PUSH
11598: LD_INT 21
11600: PUSH
11601: LD_INT 1
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PUSH
11608: LD_INT 25
11610: PUSH
11611: LD_INT 1
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: LIST
11622: PPUSH
11623: CALL_OW 72
11627: ST_TO_ADDR
// civil_team = UnitFilter ( team , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , class_soldier ] ] ] ) ;
11628: LD_ADDR_VAR 0 9
11632: PUSH
11633: LD_VAR 0 1
11637: PPUSH
11638: LD_INT 22
11640: PUSH
11641: LD_INT 1
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: PUSH
11648: LD_INT 21
11650: PUSH
11651: LD_INT 1
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PUSH
11658: LD_INT 3
11660: PUSH
11661: LD_INT 25
11663: PUSH
11664: LD_INT 1
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: LIST
11679: PPUSH
11680: CALL_OW 72
11684: ST_TO_ADDR
// rows = MakeRows ( sold_team , civil_team ) ;
11685: LD_ADDR_EXP 47
11689: PUSH
11690: LD_VAR 0 8
11694: PPUSH
11695: LD_VAR 0 9
11699: PPUSH
11700: CALL 12093 0 2
11704: ST_TO_ADDR
// offset = 0 ;
11705: LD_ADDR_VAR 0 7
11709: PUSH
11710: LD_INT 0
11712: ST_TO_ADDR
// for i := 1 to sold_team do
11713: LD_ADDR_VAR 0 4
11717: PUSH
11718: DOUBLE
11719: LD_INT 1
11721: DEC
11722: ST_TO_ADDR
11723: LD_VAR 0 8
11727: PUSH
11728: FOR_TO
11729: IFFALSE 11860
// begin if IsInUnit ( sold_team [ i ] ) then
11731: LD_VAR 0 8
11735: PUSH
11736: LD_VAR 0 4
11740: ARRAY
11741: PPUSH
11742: CALL_OW 310
11746: IFFALSE 11763
// ComExitBuilding ( sold_team [ i ] ) ;
11748: LD_VAR 0 8
11752: PUSH
11753: LD_VAR 0 4
11757: ARRAY
11758: PPUSH
11759: CALL_OW 122
// AddComMoveXY ( sold_team [ i ] , rows [ 1 ] [ i + offset ] , rows [ 1 ] [ i + 1 + offset ] ) ;
11763: LD_VAR 0 8
11767: PUSH
11768: LD_VAR 0 4
11772: ARRAY
11773: PPUSH
11774: LD_EXP 47
11778: PUSH
11779: LD_INT 1
11781: ARRAY
11782: PUSH
11783: LD_VAR 0 4
11787: PUSH
11788: LD_VAR 0 7
11792: PLUS
11793: ARRAY
11794: PPUSH
11795: LD_EXP 47
11799: PUSH
11800: LD_INT 1
11802: ARRAY
11803: PUSH
11804: LD_VAR 0 4
11808: PUSH
11809: LD_INT 1
11811: PLUS
11812: PUSH
11813: LD_VAR 0 7
11817: PLUS
11818: ARRAY
11819: PPUSH
11820: CALL_OW 171
// AddComTurnUnit ( sold_team [ i ] , Brighton ) ;
11824: LD_VAR 0 8
11828: PUSH
11829: LD_VAR 0 4
11833: ARRAY
11834: PPUSH
11835: LD_EXP 9
11839: PPUSH
11840: CALL_OW 179
// offset = offset + 1 ;
11844: LD_ADDR_VAR 0 7
11848: PUSH
11849: LD_VAR 0 7
11853: PUSH
11854: LD_INT 1
11856: PLUS
11857: ST_TO_ADDR
// end ;
11858: GO 11728
11860: POP
11861: POP
// offset = 0 ;
11862: LD_ADDR_VAR 0 7
11866: PUSH
11867: LD_INT 0
11869: ST_TO_ADDR
// tmp = 1 ;
11870: LD_ADDR_VAR 0 6
11874: PUSH
11875: LD_INT 1
11877: ST_TO_ADDR
// for i := 2 to rows do
11878: LD_ADDR_VAR 0 4
11882: PUSH
11883: DOUBLE
11884: LD_INT 2
11886: DEC
11887: ST_TO_ADDR
11888: LD_EXP 47
11892: PUSH
11893: FOR_TO
11894: IFFALSE 12086
// begin for x := 1 to sold_team do
11896: LD_ADDR_VAR 0 5
11900: PUSH
11901: DOUBLE
11902: LD_INT 1
11904: DEC
11905: ST_TO_ADDR
11906: LD_VAR 0 8
11910: PUSH
11911: FOR_TO
11912: IFFALSE 12074
// begin if IsInUnit ( civil_team [ tmp ] ) then
11914: LD_VAR 0 9
11918: PUSH
11919: LD_VAR 0 6
11923: ARRAY
11924: PPUSH
11925: CALL_OW 310
11929: IFFALSE 11946
// ComExitBuilding ( civil_team [ tmp ] ) ;
11931: LD_VAR 0 9
11935: PUSH
11936: LD_VAR 0 6
11940: ARRAY
11941: PPUSH
11942: CALL_OW 122
// AddComMoveXY ( civil_team [ tmp ] , rows [ i ] [ x + offset ] , rows [ i ] [ x + 1 + offset ] ) ;
11946: LD_VAR 0 9
11950: PUSH
11951: LD_VAR 0 6
11955: ARRAY
11956: PPUSH
11957: LD_EXP 47
11961: PUSH
11962: LD_VAR 0 4
11966: ARRAY
11967: PUSH
11968: LD_VAR 0 5
11972: PUSH
11973: LD_VAR 0 7
11977: PLUS
11978: ARRAY
11979: PPUSH
11980: LD_EXP 47
11984: PUSH
11985: LD_VAR 0 4
11989: ARRAY
11990: PUSH
11991: LD_VAR 0 5
11995: PUSH
11996: LD_INT 1
11998: PLUS
11999: PUSH
12000: LD_VAR 0 7
12004: PLUS
12005: ARRAY
12006: PPUSH
12007: CALL_OW 171
// AddComTurnUnit ( civil_team [ tmp ] , Brighton ) ;
12011: LD_VAR 0 9
12015: PUSH
12016: LD_VAR 0 6
12020: ARRAY
12021: PPUSH
12022: LD_EXP 9
12026: PPUSH
12027: CALL_OW 179
// offset = offset + 1 ;
12031: LD_ADDR_VAR 0 7
12035: PUSH
12036: LD_VAR 0 7
12040: PUSH
12041: LD_INT 1
12043: PLUS
12044: ST_TO_ADDR
// if not ( tmp = civil_team ) then
12045: LD_VAR 0 6
12049: PUSH
12050: LD_VAR 0 9
12054: EQUAL
12055: NOT
12056: IFFALSE 12072
// tmp = tmp + 1 ;
12058: LD_ADDR_VAR 0 6
12062: PUSH
12063: LD_VAR 0 6
12067: PUSH
12068: LD_INT 1
12070: PLUS
12071: ST_TO_ADDR
// end ;
12072: GO 11911
12074: POP
12075: POP
// offset = 0 ;
12076: LD_ADDR_VAR 0 7
12080: PUSH
12081: LD_INT 0
12083: ST_TO_ADDR
// end ;
12084: GO 11893
12086: POP
12087: POP
// end ;
12088: LD_VAR 0 3
12092: RET
// export function MakeRows ( sold_team , civil_team ) ; var i , x , start_pos , row_size , new_row , result_rows , civil_rows , offsetX , offsetY ; begin
12093: LD_INT 0
12095: PPUSH
12096: PPUSH
12097: PPUSH
12098: PPUSH
12099: PPUSH
12100: PPUSH
12101: PPUSH
12102: PPUSH
12103: PPUSH
12104: PPUSH
// start_pos = [ 65 , 34 ] ;
12105: LD_ADDR_VAR 0 6
12109: PUSH
12110: LD_INT 65
12112: PUSH
12113: LD_INT 34
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: ST_TO_ADDR
// row_size = 0 ;
12120: LD_ADDR_VAR 0 7
12124: PUSH
12125: LD_INT 0
12127: ST_TO_ADDR
// result_rows = [ ] ;
12128: LD_ADDR_VAR 0 9
12132: PUSH
12133: EMPTY
12134: ST_TO_ADDR
// new_row = [ ] ;
12135: LD_ADDR_VAR 0 8
12139: PUSH
12140: EMPTY
12141: ST_TO_ADDR
// for i := 1 to sold_team do
12142: LD_ADDR_VAR 0 4
12146: PUSH
12147: DOUBLE
12148: LD_INT 1
12150: DEC
12151: ST_TO_ADDR
12152: LD_VAR 0 1
12156: PUSH
12157: FOR_TO
12158: IFFALSE 12212
// begin new_row = new_row ^ start_pos [ 1 ] ^ start_pos [ 2 ] + i ;
12160: LD_ADDR_VAR 0 8
12164: PUSH
12165: LD_VAR 0 8
12169: PUSH
12170: LD_VAR 0 6
12174: PUSH
12175: LD_INT 1
12177: ARRAY
12178: ADD
12179: PUSH
12180: LD_VAR 0 6
12184: PUSH
12185: LD_INT 2
12187: ARRAY
12188: PUSH
12189: LD_VAR 0 4
12193: PLUS
12194: ADD
12195: ST_TO_ADDR
// row_size = row_size + 1 ;
12196: LD_ADDR_VAR 0 7
12200: PUSH
12201: LD_VAR 0 7
12205: PUSH
12206: LD_INT 1
12208: PLUS
12209: ST_TO_ADDR
// end ;
12210: GO 12157
12212: POP
12213: POP
// result_rows = result_rows ^ [ new_row ] ;
12214: LD_ADDR_VAR 0 9
12218: PUSH
12219: LD_VAR 0 9
12223: PUSH
12224: LD_VAR 0 8
12228: PUSH
12229: EMPTY
12230: LIST
12231: ADD
12232: ST_TO_ADDR
// civil_rows = civil_team div sold_team ;
12233: LD_ADDR_VAR 0 10
12237: PUSH
12238: LD_VAR 0 2
12242: PUSH
12243: LD_VAR 0 1
12247: DIV
12248: ST_TO_ADDR
// if ( civil_rows mod sold_team > 0 ) then
12249: LD_VAR 0 10
12253: PUSH
12254: LD_VAR 0 1
12258: MOD
12259: PUSH
12260: LD_INT 0
12262: GREATER
12263: IFFALSE 12279
// civil_rows = civil_rows + 1 ;
12265: LD_ADDR_VAR 0 10
12269: PUSH
12270: LD_VAR 0 10
12274: PUSH
12275: LD_INT 1
12277: PLUS
12278: ST_TO_ADDR
// offsetX = 2 ;
12279: LD_ADDR_VAR 0 11
12283: PUSH
12284: LD_INT 2
12286: ST_TO_ADDR
// offsetY = 1 ;
12287: LD_ADDR_VAR 0 12
12291: PUSH
12292: LD_INT 1
12294: ST_TO_ADDR
// for i := 1 to civil_rows do
12295: LD_ADDR_VAR 0 4
12299: PUSH
12300: DOUBLE
12301: LD_INT 1
12303: DEC
12304: ST_TO_ADDR
12305: LD_VAR 0 10
12309: PUSH
12310: FOR_TO
12311: IFFALSE 12439
// begin new_row = [ ] ;
12313: LD_ADDR_VAR 0 8
12317: PUSH
12318: EMPTY
12319: ST_TO_ADDR
// for x := 1 to row_size do
12320: LD_ADDR_VAR 0 5
12324: PUSH
12325: DOUBLE
12326: LD_INT 1
12328: DEC
12329: ST_TO_ADDR
12330: LD_VAR 0 7
12334: PUSH
12335: FOR_TO
12336: IFFALSE 12388
// begin new_row = new_row ^ start_pos [ 1 ] + offsetX ^ start_pos [ 2 ] + offsetY + x ;
12338: LD_ADDR_VAR 0 8
12342: PUSH
12343: LD_VAR 0 8
12347: PUSH
12348: LD_VAR 0 6
12352: PUSH
12353: LD_INT 1
12355: ARRAY
12356: PUSH
12357: LD_VAR 0 11
12361: PLUS
12362: ADD
12363: PUSH
12364: LD_VAR 0 6
12368: PUSH
12369: LD_INT 2
12371: ARRAY
12372: PUSH
12373: LD_VAR 0 12
12377: PLUS
12378: PUSH
12379: LD_VAR 0 5
12383: PLUS
12384: ADD
12385: ST_TO_ADDR
// end ;
12386: GO 12335
12388: POP
12389: POP
// result_rows = result_rows ^ [ new_row ] ;
12390: LD_ADDR_VAR 0 9
12394: PUSH
12395: LD_VAR 0 9
12399: PUSH
12400: LD_VAR 0 8
12404: PUSH
12405: EMPTY
12406: LIST
12407: ADD
12408: ST_TO_ADDR
// offsetX = offsetX + 2 ;
12409: LD_ADDR_VAR 0 11
12413: PUSH
12414: LD_VAR 0 11
12418: PUSH
12419: LD_INT 2
12421: PLUS
12422: ST_TO_ADDR
// offsetY = offsetY + 1 ;
12423: LD_ADDR_VAR 0 12
12427: PUSH
12428: LD_VAR 0 12
12432: PUSH
12433: LD_INT 1
12435: PLUS
12436: ST_TO_ADDR
// end ;
12437: GO 12310
12439: POP
12440: POP
// result = result_rows ;
12441: LD_ADDR_VAR 0 3
12445: PUSH
12446: LD_VAR 0 9
12450: ST_TO_ADDR
// end ; end_of_file
12451: LD_VAR 0 3
12455: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
12456: LD_INT 0
12458: PPUSH
12459: PPUSH
// if exist_mode then
12460: LD_VAR 0 2
12464: IFFALSE 12489
// unit := CreateCharacter ( prefix & ident ) else
12466: LD_ADDR_VAR 0 5
12470: PUSH
12471: LD_VAR 0 3
12475: PUSH
12476: LD_VAR 0 1
12480: STR
12481: PPUSH
12482: CALL_OW 34
12486: ST_TO_ADDR
12487: GO 12504
// unit := NewCharacter ( ident ) ;
12489: LD_ADDR_VAR 0 5
12493: PUSH
12494: LD_VAR 0 1
12498: PPUSH
12499: CALL_OW 25
12503: ST_TO_ADDR
// result := unit ;
12504: LD_ADDR_VAR 0 4
12508: PUSH
12509: LD_VAR 0 5
12513: ST_TO_ADDR
// end ;
12514: LD_VAR 0 4
12518: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
12519: LD_INT 0
12521: PPUSH
12522: PPUSH
// if not side or not nation then
12523: LD_VAR 0 1
12527: NOT
12528: PUSH
12529: LD_VAR 0 2
12533: NOT
12534: OR
12535: IFFALSE 12539
// exit ;
12537: GO 13303
// case nation of nation_american :
12539: LD_VAR 0 2
12543: PUSH
12544: LD_INT 1
12546: DOUBLE
12547: EQUAL
12548: IFTRUE 12552
12550: GO 12766
12552: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
12553: LD_ADDR_VAR 0 4
12557: PUSH
12558: LD_INT 35
12560: PUSH
12561: LD_INT 45
12563: PUSH
12564: LD_INT 46
12566: PUSH
12567: LD_INT 47
12569: PUSH
12570: LD_INT 82
12572: PUSH
12573: LD_INT 83
12575: PUSH
12576: LD_INT 84
12578: PUSH
12579: LD_INT 85
12581: PUSH
12582: LD_INT 86
12584: PUSH
12585: LD_INT 1
12587: PUSH
12588: LD_INT 2
12590: PUSH
12591: LD_INT 6
12593: PUSH
12594: LD_INT 15
12596: PUSH
12597: LD_INT 16
12599: PUSH
12600: LD_INT 7
12602: PUSH
12603: LD_INT 12
12605: PUSH
12606: LD_INT 13
12608: PUSH
12609: LD_INT 10
12611: PUSH
12612: LD_INT 14
12614: PUSH
12615: LD_INT 20
12617: PUSH
12618: LD_INT 21
12620: PUSH
12621: LD_INT 22
12623: PUSH
12624: LD_INT 25
12626: PUSH
12627: LD_INT 32
12629: PUSH
12630: LD_INT 27
12632: PUSH
12633: LD_INT 36
12635: PUSH
12636: LD_INT 69
12638: PUSH
12639: LD_INT 39
12641: PUSH
12642: LD_INT 34
12644: PUSH
12645: LD_INT 40
12647: PUSH
12648: LD_INT 48
12650: PUSH
12651: LD_INT 49
12653: PUSH
12654: LD_INT 50
12656: PUSH
12657: LD_INT 51
12659: PUSH
12660: LD_INT 52
12662: PUSH
12663: LD_INT 53
12665: PUSH
12666: LD_INT 54
12668: PUSH
12669: LD_INT 55
12671: PUSH
12672: LD_INT 56
12674: PUSH
12675: LD_INT 57
12677: PUSH
12678: LD_INT 58
12680: PUSH
12681: LD_INT 59
12683: PUSH
12684: LD_INT 60
12686: PUSH
12687: LD_INT 61
12689: PUSH
12690: LD_INT 62
12692: PUSH
12693: LD_INT 80
12695: PUSH
12696: LD_INT 82
12698: PUSH
12699: LD_INT 83
12701: PUSH
12702: LD_INT 84
12704: PUSH
12705: LD_INT 85
12707: PUSH
12708: LD_INT 86
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: ST_TO_ADDR
12764: GO 13227
12766: LD_INT 2
12768: DOUBLE
12769: EQUAL
12770: IFTRUE 12774
12772: GO 12996
12774: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
12775: LD_ADDR_VAR 0 4
12779: PUSH
12780: LD_INT 35
12782: PUSH
12783: LD_INT 45
12785: PUSH
12786: LD_INT 46
12788: PUSH
12789: LD_INT 47
12791: PUSH
12792: LD_INT 82
12794: PUSH
12795: LD_INT 83
12797: PUSH
12798: LD_INT 84
12800: PUSH
12801: LD_INT 85
12803: PUSH
12804: LD_INT 87
12806: PUSH
12807: LD_INT 70
12809: PUSH
12810: LD_INT 1
12812: PUSH
12813: LD_INT 11
12815: PUSH
12816: LD_INT 3
12818: PUSH
12819: LD_INT 4
12821: PUSH
12822: LD_INT 5
12824: PUSH
12825: LD_INT 6
12827: PUSH
12828: LD_INT 15
12830: PUSH
12831: LD_INT 18
12833: PUSH
12834: LD_INT 7
12836: PUSH
12837: LD_INT 17
12839: PUSH
12840: LD_INT 8
12842: PUSH
12843: LD_INT 20
12845: PUSH
12846: LD_INT 21
12848: PUSH
12849: LD_INT 22
12851: PUSH
12852: LD_INT 72
12854: PUSH
12855: LD_INT 26
12857: PUSH
12858: LD_INT 69
12860: PUSH
12861: LD_INT 39
12863: PUSH
12864: LD_INT 40
12866: PUSH
12867: LD_INT 41
12869: PUSH
12870: LD_INT 42
12872: PUSH
12873: LD_INT 43
12875: PUSH
12876: LD_INT 48
12878: PUSH
12879: LD_INT 49
12881: PUSH
12882: LD_INT 50
12884: PUSH
12885: LD_INT 51
12887: PUSH
12888: LD_INT 52
12890: PUSH
12891: LD_INT 53
12893: PUSH
12894: LD_INT 54
12896: PUSH
12897: LD_INT 55
12899: PUSH
12900: LD_INT 56
12902: PUSH
12903: LD_INT 60
12905: PUSH
12906: LD_INT 61
12908: PUSH
12909: LD_INT 62
12911: PUSH
12912: LD_INT 66
12914: PUSH
12915: LD_INT 67
12917: PUSH
12918: LD_INT 68
12920: PUSH
12921: LD_INT 81
12923: PUSH
12924: LD_INT 82
12926: PUSH
12927: LD_INT 83
12929: PUSH
12930: LD_INT 84
12932: PUSH
12933: LD_INT 85
12935: PUSH
12936: LD_INT 87
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: ST_TO_ADDR
12994: GO 13227
12996: LD_INT 3
12998: DOUBLE
12999: EQUAL
13000: IFTRUE 13004
13002: GO 13226
13004: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
13005: LD_ADDR_VAR 0 4
13009: PUSH
13010: LD_INT 46
13012: PUSH
13013: LD_INT 47
13015: PUSH
13016: LD_INT 1
13018: PUSH
13019: LD_INT 2
13021: PUSH
13022: LD_INT 82
13024: PUSH
13025: LD_INT 83
13027: PUSH
13028: LD_INT 84
13030: PUSH
13031: LD_INT 85
13033: PUSH
13034: LD_INT 86
13036: PUSH
13037: LD_INT 11
13039: PUSH
13040: LD_INT 9
13042: PUSH
13043: LD_INT 20
13045: PUSH
13046: LD_INT 19
13048: PUSH
13049: LD_INT 21
13051: PUSH
13052: LD_INT 24
13054: PUSH
13055: LD_INT 22
13057: PUSH
13058: LD_INT 25
13060: PUSH
13061: LD_INT 28
13063: PUSH
13064: LD_INT 29
13066: PUSH
13067: LD_INT 30
13069: PUSH
13070: LD_INT 31
13072: PUSH
13073: LD_INT 37
13075: PUSH
13076: LD_INT 38
13078: PUSH
13079: LD_INT 32
13081: PUSH
13082: LD_INT 27
13084: PUSH
13085: LD_INT 33
13087: PUSH
13088: LD_INT 69
13090: PUSH
13091: LD_INT 39
13093: PUSH
13094: LD_INT 34
13096: PUSH
13097: LD_INT 40
13099: PUSH
13100: LD_INT 71
13102: PUSH
13103: LD_INT 23
13105: PUSH
13106: LD_INT 44
13108: PUSH
13109: LD_INT 48
13111: PUSH
13112: LD_INT 49
13114: PUSH
13115: LD_INT 50
13117: PUSH
13118: LD_INT 51
13120: PUSH
13121: LD_INT 52
13123: PUSH
13124: LD_INT 53
13126: PUSH
13127: LD_INT 54
13129: PUSH
13130: LD_INT 55
13132: PUSH
13133: LD_INT 56
13135: PUSH
13136: LD_INT 57
13138: PUSH
13139: LD_INT 58
13141: PUSH
13142: LD_INT 59
13144: PUSH
13145: LD_INT 63
13147: PUSH
13148: LD_INT 64
13150: PUSH
13151: LD_INT 65
13153: PUSH
13154: LD_INT 82
13156: PUSH
13157: LD_INT 83
13159: PUSH
13160: LD_INT 84
13162: PUSH
13163: LD_INT 85
13165: PUSH
13166: LD_INT 86
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: ST_TO_ADDR
13224: GO 13227
13226: POP
// if state > - 1 and state < 3 then
13227: LD_VAR 0 3
13231: PUSH
13232: LD_INT 1
13234: NEG
13235: GREATER
13236: PUSH
13237: LD_VAR 0 3
13241: PUSH
13242: LD_INT 3
13244: LESS
13245: AND
13246: IFFALSE 13303
// for i in result do
13248: LD_ADDR_VAR 0 5
13252: PUSH
13253: LD_VAR 0 4
13257: PUSH
13258: FOR_IN
13259: IFFALSE 13301
// if GetTech ( i , side ) <> state then
13261: LD_VAR 0 5
13265: PPUSH
13266: LD_VAR 0 1
13270: PPUSH
13271: CALL_OW 321
13275: PUSH
13276: LD_VAR 0 3
13280: NONEQUAL
13281: IFFALSE 13299
// result := result diff i ;
13283: LD_ADDR_VAR 0 4
13287: PUSH
13288: LD_VAR 0 4
13292: PUSH
13293: LD_VAR 0 5
13297: DIFF
13298: ST_TO_ADDR
13299: GO 13258
13301: POP
13302: POP
// end ;
13303: LD_VAR 0 4
13307: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
13308: LD_INT 0
13310: PPUSH
13311: PPUSH
13312: PPUSH
// result := true ;
13313: LD_ADDR_VAR 0 3
13317: PUSH
13318: LD_INT 1
13320: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
13321: LD_ADDR_VAR 0 5
13325: PUSH
13326: LD_VAR 0 2
13330: PPUSH
13331: CALL_OW 480
13335: ST_TO_ADDR
// if not tmp then
13336: LD_VAR 0 5
13340: NOT
13341: IFFALSE 13345
// exit ;
13343: GO 13394
// for i in tmp do
13345: LD_ADDR_VAR 0 4
13349: PUSH
13350: LD_VAR 0 5
13354: PUSH
13355: FOR_IN
13356: IFFALSE 13392
// if GetTech ( i , side ) <> state_researched then
13358: LD_VAR 0 4
13362: PPUSH
13363: LD_VAR 0 1
13367: PPUSH
13368: CALL_OW 321
13372: PUSH
13373: LD_INT 2
13375: NONEQUAL
13376: IFFALSE 13390
// begin result := false ;
13378: LD_ADDR_VAR 0 3
13382: PUSH
13383: LD_INT 0
13385: ST_TO_ADDR
// exit ;
13386: POP
13387: POP
13388: GO 13394
// end ;
13390: GO 13355
13392: POP
13393: POP
// end ;
13394: LD_VAR 0 3
13398: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
13399: LD_INT 0
13401: PPUSH
13402: PPUSH
13403: PPUSH
13404: PPUSH
13405: PPUSH
13406: PPUSH
13407: PPUSH
13408: PPUSH
13409: PPUSH
13410: PPUSH
13411: PPUSH
13412: PPUSH
13413: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
13414: LD_VAR 0 1
13418: NOT
13419: PUSH
13420: LD_VAR 0 1
13424: PPUSH
13425: CALL_OW 257
13429: PUSH
13430: LD_INT 9
13432: NONEQUAL
13433: OR
13434: IFFALSE 13438
// exit ;
13436: GO 14011
// side := GetSide ( unit ) ;
13438: LD_ADDR_VAR 0 9
13442: PUSH
13443: LD_VAR 0 1
13447: PPUSH
13448: CALL_OW 255
13452: ST_TO_ADDR
// tech_space := tech_spacanom ;
13453: LD_ADDR_VAR 0 12
13457: PUSH
13458: LD_INT 29
13460: ST_TO_ADDR
// tech_time := tech_taurad ;
13461: LD_ADDR_VAR 0 13
13465: PUSH
13466: LD_INT 28
13468: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
13469: LD_ADDR_VAR 0 11
13473: PUSH
13474: LD_VAR 0 1
13478: PPUSH
13479: CALL_OW 310
13483: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
13484: LD_VAR 0 11
13488: PPUSH
13489: CALL_OW 247
13493: PUSH
13494: LD_INT 2
13496: EQUAL
13497: IFFALSE 13501
// exit ;
13499: GO 14011
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13501: LD_ADDR_VAR 0 8
13505: PUSH
13506: LD_INT 81
13508: PUSH
13509: LD_VAR 0 9
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 3
13520: PUSH
13521: LD_INT 21
13523: PUSH
13524: LD_INT 3
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: PPUSH
13539: CALL_OW 69
13543: ST_TO_ADDR
// if not tmp then
13544: LD_VAR 0 8
13548: NOT
13549: IFFALSE 13553
// exit ;
13551: GO 14011
// if in_unit then
13553: LD_VAR 0 11
13557: IFFALSE 13581
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
13559: LD_ADDR_VAR 0 10
13563: PUSH
13564: LD_VAR 0 8
13568: PPUSH
13569: LD_VAR 0 11
13573: PPUSH
13574: CALL_OW 74
13578: ST_TO_ADDR
13579: GO 13601
// enemy := NearestUnitToUnit ( tmp , unit ) ;
13581: LD_ADDR_VAR 0 10
13585: PUSH
13586: LD_VAR 0 8
13590: PPUSH
13591: LD_VAR 0 1
13595: PPUSH
13596: CALL_OW 74
13600: ST_TO_ADDR
// if not enemy then
13601: LD_VAR 0 10
13605: NOT
13606: IFFALSE 13610
// exit ;
13608: GO 14011
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
13610: LD_VAR 0 11
13614: PUSH
13615: LD_VAR 0 11
13619: PPUSH
13620: LD_VAR 0 10
13624: PPUSH
13625: CALL_OW 296
13629: PUSH
13630: LD_INT 13
13632: GREATER
13633: AND
13634: PUSH
13635: LD_VAR 0 1
13639: PPUSH
13640: LD_VAR 0 10
13644: PPUSH
13645: CALL_OW 296
13649: PUSH
13650: LD_INT 12
13652: GREATER
13653: OR
13654: IFFALSE 13658
// exit ;
13656: GO 14011
// missile := [ 1 ] ;
13658: LD_ADDR_VAR 0 14
13662: PUSH
13663: LD_INT 1
13665: PUSH
13666: EMPTY
13667: LIST
13668: ST_TO_ADDR
// if Researched ( side , tech_space ) then
13669: LD_VAR 0 9
13673: PPUSH
13674: LD_VAR 0 12
13678: PPUSH
13679: CALL_OW 325
13683: IFFALSE 13712
// missile := Insert ( missile , missile + 1 , 2 ) ;
13685: LD_ADDR_VAR 0 14
13689: PUSH
13690: LD_VAR 0 14
13694: PPUSH
13695: LD_VAR 0 14
13699: PUSH
13700: LD_INT 1
13702: PLUS
13703: PPUSH
13704: LD_INT 2
13706: PPUSH
13707: CALL_OW 2
13711: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
13712: LD_VAR 0 9
13716: PPUSH
13717: LD_VAR 0 13
13721: PPUSH
13722: CALL_OW 325
13726: PUSH
13727: LD_VAR 0 10
13731: PPUSH
13732: CALL_OW 255
13736: PPUSH
13737: LD_VAR 0 13
13741: PPUSH
13742: CALL_OW 325
13746: NOT
13747: AND
13748: IFFALSE 13777
// missile := Insert ( missile , missile + 1 , 3 ) ;
13750: LD_ADDR_VAR 0 14
13754: PUSH
13755: LD_VAR 0 14
13759: PPUSH
13760: LD_VAR 0 14
13764: PUSH
13765: LD_INT 1
13767: PLUS
13768: PPUSH
13769: LD_INT 3
13771: PPUSH
13772: CALL_OW 2
13776: ST_TO_ADDR
// if missile < 2 then
13777: LD_VAR 0 14
13781: PUSH
13782: LD_INT 2
13784: LESS
13785: IFFALSE 13789
// exit ;
13787: GO 14011
// x := GetX ( enemy ) ;
13789: LD_ADDR_VAR 0 4
13793: PUSH
13794: LD_VAR 0 10
13798: PPUSH
13799: CALL_OW 250
13803: ST_TO_ADDR
// y := GetY ( enemy ) ;
13804: LD_ADDR_VAR 0 5
13808: PUSH
13809: LD_VAR 0 10
13813: PPUSH
13814: CALL_OW 251
13818: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
13819: LD_ADDR_VAR 0 6
13823: PUSH
13824: LD_VAR 0 4
13828: PUSH
13829: LD_INT 1
13831: NEG
13832: PPUSH
13833: LD_INT 1
13835: PPUSH
13836: CALL_OW 12
13840: PLUS
13841: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
13842: LD_ADDR_VAR 0 7
13846: PUSH
13847: LD_VAR 0 5
13851: PUSH
13852: LD_INT 1
13854: NEG
13855: PPUSH
13856: LD_INT 1
13858: PPUSH
13859: CALL_OW 12
13863: PLUS
13864: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
13865: LD_VAR 0 6
13869: PPUSH
13870: LD_VAR 0 7
13874: PPUSH
13875: CALL_OW 488
13879: NOT
13880: IFFALSE 13902
// begin _x := x ;
13882: LD_ADDR_VAR 0 6
13886: PUSH
13887: LD_VAR 0 4
13891: ST_TO_ADDR
// _y := y ;
13892: LD_ADDR_VAR 0 7
13896: PUSH
13897: LD_VAR 0 5
13901: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
13902: LD_ADDR_VAR 0 3
13906: PUSH
13907: LD_INT 1
13909: PPUSH
13910: LD_VAR 0 14
13914: PPUSH
13915: CALL_OW 12
13919: ST_TO_ADDR
// case i of 1 :
13920: LD_VAR 0 3
13924: PUSH
13925: LD_INT 1
13927: DOUBLE
13928: EQUAL
13929: IFTRUE 13933
13931: GO 13950
13933: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
13934: LD_VAR 0 1
13938: PPUSH
13939: LD_VAR 0 10
13943: PPUSH
13944: CALL_OW 115
13948: GO 14011
13950: LD_INT 2
13952: DOUBLE
13953: EQUAL
13954: IFTRUE 13958
13956: GO 13980
13958: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
13959: LD_VAR 0 1
13963: PPUSH
13964: LD_VAR 0 6
13968: PPUSH
13969: LD_VAR 0 7
13973: PPUSH
13974: CALL_OW 153
13978: GO 14011
13980: LD_INT 3
13982: DOUBLE
13983: EQUAL
13984: IFTRUE 13988
13986: GO 14010
13988: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
13989: LD_VAR 0 1
13993: PPUSH
13994: LD_VAR 0 6
13998: PPUSH
13999: LD_VAR 0 7
14003: PPUSH
14004: CALL_OW 154
14008: GO 14011
14010: POP
// end ;
14011: LD_VAR 0 2
14015: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
14016: LD_INT 0
14018: PPUSH
14019: PPUSH
14020: PPUSH
14021: PPUSH
14022: PPUSH
14023: PPUSH
// if not unit or not building then
14024: LD_VAR 0 1
14028: NOT
14029: PUSH
14030: LD_VAR 0 2
14034: NOT
14035: OR
14036: IFFALSE 14040
// exit ;
14038: GO 14198
// x := GetX ( building ) ;
14040: LD_ADDR_VAR 0 5
14044: PUSH
14045: LD_VAR 0 2
14049: PPUSH
14050: CALL_OW 250
14054: ST_TO_ADDR
// y := GetY ( building ) ;
14055: LD_ADDR_VAR 0 6
14059: PUSH
14060: LD_VAR 0 2
14064: PPUSH
14065: CALL_OW 251
14069: ST_TO_ADDR
// for i = 0 to 5 do
14070: LD_ADDR_VAR 0 4
14074: PUSH
14075: DOUBLE
14076: LD_INT 0
14078: DEC
14079: ST_TO_ADDR
14080: LD_INT 5
14082: PUSH
14083: FOR_TO
14084: IFFALSE 14196
// begin _x := ShiftX ( x , i , 3 ) ;
14086: LD_ADDR_VAR 0 7
14090: PUSH
14091: LD_VAR 0 5
14095: PPUSH
14096: LD_VAR 0 4
14100: PPUSH
14101: LD_INT 3
14103: PPUSH
14104: CALL_OW 272
14108: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
14109: LD_ADDR_VAR 0 8
14113: PUSH
14114: LD_VAR 0 6
14118: PPUSH
14119: LD_VAR 0 4
14123: PPUSH
14124: LD_INT 3
14126: PPUSH
14127: CALL_OW 273
14131: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14132: LD_VAR 0 7
14136: PPUSH
14137: LD_VAR 0 8
14141: PPUSH
14142: CALL_OW 488
14146: NOT
14147: IFFALSE 14151
// continue ;
14149: GO 14083
// if HexInfo ( _x , _y ) = 0 then
14151: LD_VAR 0 7
14155: PPUSH
14156: LD_VAR 0 8
14160: PPUSH
14161: CALL_OW 428
14165: PUSH
14166: LD_INT 0
14168: EQUAL
14169: IFFALSE 14194
// begin ComMoveXY ( unit , _x , _y ) ;
14171: LD_VAR 0 1
14175: PPUSH
14176: LD_VAR 0 7
14180: PPUSH
14181: LD_VAR 0 8
14185: PPUSH
14186: CALL_OW 111
// exit ;
14190: POP
14191: POP
14192: GO 14198
// end ; end ;
14194: GO 14083
14196: POP
14197: POP
// end ;
14198: LD_VAR 0 3
14202: RET
// export function ScanBase ( side , base_area ) ; begin
14203: LD_INT 0
14205: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
14206: LD_ADDR_VAR 0 3
14210: PUSH
14211: LD_VAR 0 2
14215: PPUSH
14216: LD_INT 81
14218: PUSH
14219: LD_VAR 0 1
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PPUSH
14228: CALL_OW 70
14232: ST_TO_ADDR
// end ;
14233: LD_VAR 0 3
14237: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
14238: LD_INT 0
14240: PPUSH
14241: PPUSH
14242: PPUSH
14243: PPUSH
// result := false ;
14244: LD_ADDR_VAR 0 2
14248: PUSH
14249: LD_INT 0
14251: ST_TO_ADDR
// side := GetSide ( unit ) ;
14252: LD_ADDR_VAR 0 3
14256: PUSH
14257: LD_VAR 0 1
14261: PPUSH
14262: CALL_OW 255
14266: ST_TO_ADDR
// nat := GetNation ( unit ) ;
14267: LD_ADDR_VAR 0 4
14271: PUSH
14272: LD_VAR 0 1
14276: PPUSH
14277: CALL_OW 248
14281: ST_TO_ADDR
// case nat of 1 :
14282: LD_VAR 0 4
14286: PUSH
14287: LD_INT 1
14289: DOUBLE
14290: EQUAL
14291: IFTRUE 14295
14293: GO 14306
14295: POP
// tech := tech_lassight ; 2 :
14296: LD_ADDR_VAR 0 5
14300: PUSH
14301: LD_INT 12
14303: ST_TO_ADDR
14304: GO 14345
14306: LD_INT 2
14308: DOUBLE
14309: EQUAL
14310: IFTRUE 14314
14312: GO 14325
14314: POP
// tech := tech_mortar ; 3 :
14315: LD_ADDR_VAR 0 5
14319: PUSH
14320: LD_INT 41
14322: ST_TO_ADDR
14323: GO 14345
14325: LD_INT 3
14327: DOUBLE
14328: EQUAL
14329: IFTRUE 14333
14331: GO 14344
14333: POP
// tech := tech_bazooka ; end ;
14334: LD_ADDR_VAR 0 5
14338: PUSH
14339: LD_INT 44
14341: ST_TO_ADDR
14342: GO 14345
14344: POP
// if Researched ( side , tech ) then
14345: LD_VAR 0 3
14349: PPUSH
14350: LD_VAR 0 5
14354: PPUSH
14355: CALL_OW 325
14359: IFFALSE 14386
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
14361: LD_ADDR_VAR 0 2
14365: PUSH
14366: LD_INT 5
14368: PUSH
14369: LD_INT 8
14371: PUSH
14372: LD_INT 9
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: LIST
14379: PUSH
14380: LD_VAR 0 4
14384: ARRAY
14385: ST_TO_ADDR
// end ;
14386: LD_VAR 0 2
14390: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
14391: LD_INT 0
14393: PPUSH
14394: PPUSH
14395: PPUSH
// if not mines then
14396: LD_VAR 0 2
14400: NOT
14401: IFFALSE 14405
// exit ;
14403: GO 14549
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14405: LD_ADDR_VAR 0 5
14409: PUSH
14410: LD_INT 81
14412: PUSH
14413: LD_VAR 0 1
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: PUSH
14422: LD_INT 3
14424: PUSH
14425: LD_INT 21
14427: PUSH
14428: LD_INT 3
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PUSH
14439: EMPTY
14440: LIST
14441: LIST
14442: PPUSH
14443: CALL_OW 69
14447: ST_TO_ADDR
// for i in mines do
14448: LD_ADDR_VAR 0 4
14452: PUSH
14453: LD_VAR 0 2
14457: PUSH
14458: FOR_IN
14459: IFFALSE 14547
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
14461: LD_VAR 0 4
14465: PUSH
14466: LD_INT 1
14468: ARRAY
14469: PPUSH
14470: LD_VAR 0 4
14474: PUSH
14475: LD_INT 2
14477: ARRAY
14478: PPUSH
14479: CALL_OW 458
14483: NOT
14484: IFFALSE 14488
// continue ;
14486: GO 14458
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
14488: LD_VAR 0 4
14492: PUSH
14493: LD_INT 1
14495: ARRAY
14496: PPUSH
14497: LD_VAR 0 4
14501: PUSH
14502: LD_INT 2
14504: ARRAY
14505: PPUSH
14506: CALL_OW 428
14510: PUSH
14511: LD_VAR 0 5
14515: IN
14516: IFFALSE 14545
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
14518: LD_VAR 0 4
14522: PUSH
14523: LD_INT 1
14525: ARRAY
14526: PPUSH
14527: LD_VAR 0 4
14531: PUSH
14532: LD_INT 2
14534: ARRAY
14535: PPUSH
14536: LD_VAR 0 1
14540: PPUSH
14541: CALL_OW 456
// end ;
14545: GO 14458
14547: POP
14548: POP
// end ;
14549: LD_VAR 0 3
14553: RET
// export function Count ( array ) ; var i ; begin
14554: LD_INT 0
14556: PPUSH
14557: PPUSH
// result := 0 ;
14558: LD_ADDR_VAR 0 2
14562: PUSH
14563: LD_INT 0
14565: ST_TO_ADDR
// for i in array do
14566: LD_ADDR_VAR 0 3
14570: PUSH
14571: LD_VAR 0 1
14575: PUSH
14576: FOR_IN
14577: IFFALSE 14601
// if i then
14579: LD_VAR 0 3
14583: IFFALSE 14599
// result := result + 1 ;
14585: LD_ADDR_VAR 0 2
14589: PUSH
14590: LD_VAR 0 2
14594: PUSH
14595: LD_INT 1
14597: PLUS
14598: ST_TO_ADDR
14599: GO 14576
14601: POP
14602: POP
// end ;
14603: LD_VAR 0 2
14607: RET
// export function IsEmpty ( building ) ; begin
14608: LD_INT 0
14610: PPUSH
// if not building then
14611: LD_VAR 0 1
14615: NOT
14616: IFFALSE 14620
// exit ;
14618: GO 14663
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
14620: LD_ADDR_VAR 0 2
14624: PUSH
14625: LD_VAR 0 1
14629: PUSH
14630: LD_INT 22
14632: PUSH
14633: LD_VAR 0 1
14637: PPUSH
14638: CALL_OW 255
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: PUSH
14647: LD_INT 58
14649: PUSH
14650: EMPTY
14651: LIST
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: PPUSH
14657: CALL_OW 69
14661: IN
14662: ST_TO_ADDR
// end ;
14663: LD_VAR 0 2
14667: RET
// export function IsNotFull ( building ) ; begin
14668: LD_INT 0
14670: PPUSH
// if not building then
14671: LD_VAR 0 1
14675: NOT
14676: IFFALSE 14680
// exit ;
14678: GO 14699
// result := UnitsInside ( building ) < 6 ;
14680: LD_ADDR_VAR 0 2
14684: PUSH
14685: LD_VAR 0 1
14689: PPUSH
14690: CALL_OW 313
14694: PUSH
14695: LD_INT 6
14697: LESS
14698: ST_TO_ADDR
// end ;
14699: LD_VAR 0 2
14703: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
14704: LD_INT 0
14706: PPUSH
14707: PPUSH
14708: PPUSH
14709: PPUSH
// tmp := [ ] ;
14710: LD_ADDR_VAR 0 3
14714: PUSH
14715: EMPTY
14716: ST_TO_ADDR
// list := [ ] ;
14717: LD_ADDR_VAR 0 5
14721: PUSH
14722: EMPTY
14723: ST_TO_ADDR
// for i = 16 to 25 do
14724: LD_ADDR_VAR 0 4
14728: PUSH
14729: DOUBLE
14730: LD_INT 16
14732: DEC
14733: ST_TO_ADDR
14734: LD_INT 25
14736: PUSH
14737: FOR_TO
14738: IFFALSE 14811
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
14740: LD_ADDR_VAR 0 3
14744: PUSH
14745: LD_VAR 0 3
14749: PUSH
14750: LD_INT 22
14752: PUSH
14753: LD_VAR 0 1
14757: PPUSH
14758: CALL_OW 255
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: PUSH
14767: LD_INT 91
14769: PUSH
14770: LD_VAR 0 1
14774: PUSH
14775: LD_INT 6
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: LIST
14782: PUSH
14783: LD_INT 30
14785: PUSH
14786: LD_VAR 0 4
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: LIST
14799: PUSH
14800: EMPTY
14801: LIST
14802: PPUSH
14803: CALL_OW 69
14807: ADD
14808: ST_TO_ADDR
14809: GO 14737
14811: POP
14812: POP
// for i = 1 to tmp do
14813: LD_ADDR_VAR 0 4
14817: PUSH
14818: DOUBLE
14819: LD_INT 1
14821: DEC
14822: ST_TO_ADDR
14823: LD_VAR 0 3
14827: PUSH
14828: FOR_TO
14829: IFFALSE 14917
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
14831: LD_ADDR_VAR 0 5
14835: PUSH
14836: LD_VAR 0 5
14840: PUSH
14841: LD_VAR 0 3
14845: PUSH
14846: LD_VAR 0 4
14850: ARRAY
14851: PPUSH
14852: CALL_OW 266
14856: PUSH
14857: LD_VAR 0 3
14861: PUSH
14862: LD_VAR 0 4
14866: ARRAY
14867: PPUSH
14868: CALL_OW 250
14872: PUSH
14873: LD_VAR 0 3
14877: PUSH
14878: LD_VAR 0 4
14882: ARRAY
14883: PPUSH
14884: CALL_OW 251
14888: PUSH
14889: LD_VAR 0 3
14893: PUSH
14894: LD_VAR 0 4
14898: ARRAY
14899: PPUSH
14900: CALL_OW 254
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: PUSH
14911: EMPTY
14912: LIST
14913: ADD
14914: ST_TO_ADDR
14915: GO 14828
14917: POP
14918: POP
// result := list ;
14919: LD_ADDR_VAR 0 2
14923: PUSH
14924: LD_VAR 0 5
14928: ST_TO_ADDR
// end ;
14929: LD_VAR 0 2
14933: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
14934: LD_INT 0
14936: PPUSH
14937: PPUSH
14938: PPUSH
14939: PPUSH
14940: PPUSH
14941: PPUSH
14942: PPUSH
// if not factory then
14943: LD_VAR 0 1
14947: NOT
14948: IFFALSE 14952
// exit ;
14950: GO 15545
// if control = control_apeman then
14952: LD_VAR 0 4
14956: PUSH
14957: LD_INT 5
14959: EQUAL
14960: IFFALSE 15069
// begin tmp := UnitsInside ( factory ) ;
14962: LD_ADDR_VAR 0 8
14966: PUSH
14967: LD_VAR 0 1
14971: PPUSH
14972: CALL_OW 313
14976: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
14977: LD_VAR 0 8
14981: PPUSH
14982: LD_INT 25
14984: PUSH
14985: LD_INT 12
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PPUSH
14992: CALL_OW 72
14996: NOT
14997: IFFALSE 15007
// control := control_manual ;
14999: LD_ADDR_VAR 0 4
15003: PUSH
15004: LD_INT 1
15006: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
15007: LD_ADDR_VAR 0 8
15011: PUSH
15012: LD_VAR 0 1
15016: PPUSH
15017: CALL 14704 0 1
15021: ST_TO_ADDR
// if tmp then
15022: LD_VAR 0 8
15026: IFFALSE 15069
// begin for i in tmp do
15028: LD_ADDR_VAR 0 7
15032: PUSH
15033: LD_VAR 0 8
15037: PUSH
15038: FOR_IN
15039: IFFALSE 15067
// if i [ 1 ] = b_ext_radio then
15041: LD_VAR 0 7
15045: PUSH
15046: LD_INT 1
15048: ARRAY
15049: PUSH
15050: LD_INT 22
15052: EQUAL
15053: IFFALSE 15065
// begin control := control_remote ;
15055: LD_ADDR_VAR 0 4
15059: PUSH
15060: LD_INT 2
15062: ST_TO_ADDR
// break ;
15063: GO 15067
// end ;
15065: GO 15038
15067: POP
15068: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15069: LD_VAR 0 1
15073: PPUSH
15074: LD_VAR 0 2
15078: PPUSH
15079: LD_VAR 0 3
15083: PPUSH
15084: LD_VAR 0 4
15088: PPUSH
15089: LD_VAR 0 5
15093: PPUSH
15094: CALL_OW 448
15098: IFFALSE 15133
// begin result := [ chassis , engine , control , weapon ] ;
15100: LD_ADDR_VAR 0 6
15104: PUSH
15105: LD_VAR 0 2
15109: PUSH
15110: LD_VAR 0 3
15114: PUSH
15115: LD_VAR 0 4
15119: PUSH
15120: LD_VAR 0 5
15124: PUSH
15125: EMPTY
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: ST_TO_ADDR
// exit ;
15131: GO 15545
// end ; _chassis := AvailableChassisList ( factory ) ;
15133: LD_ADDR_VAR 0 9
15137: PUSH
15138: LD_VAR 0 1
15142: PPUSH
15143: CALL_OW 475
15147: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
15148: LD_ADDR_VAR 0 11
15152: PUSH
15153: LD_VAR 0 1
15157: PPUSH
15158: CALL_OW 476
15162: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
15163: LD_ADDR_VAR 0 12
15167: PUSH
15168: LD_VAR 0 1
15172: PPUSH
15173: CALL_OW 477
15177: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
15178: LD_ADDR_VAR 0 10
15182: PUSH
15183: LD_VAR 0 1
15187: PPUSH
15188: CALL_OW 478
15192: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
15193: LD_VAR 0 9
15197: NOT
15198: PUSH
15199: LD_VAR 0 11
15203: NOT
15204: OR
15205: PUSH
15206: LD_VAR 0 12
15210: NOT
15211: OR
15212: PUSH
15213: LD_VAR 0 10
15217: NOT
15218: OR
15219: IFFALSE 15254
// begin result := [ chassis , engine , control , weapon ] ;
15221: LD_ADDR_VAR 0 6
15225: PUSH
15226: LD_VAR 0 2
15230: PUSH
15231: LD_VAR 0 3
15235: PUSH
15236: LD_VAR 0 4
15240: PUSH
15241: LD_VAR 0 5
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: ST_TO_ADDR
// exit ;
15252: GO 15545
// end ; if not chassis in _chassis then
15254: LD_VAR 0 2
15258: PUSH
15259: LD_VAR 0 9
15263: IN
15264: NOT
15265: IFFALSE 15291
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
15267: LD_ADDR_VAR 0 2
15271: PUSH
15272: LD_VAR 0 9
15276: PUSH
15277: LD_INT 1
15279: PPUSH
15280: LD_VAR 0 9
15284: PPUSH
15285: CALL_OW 12
15289: ARRAY
15290: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
15291: LD_VAR 0 2
15295: PPUSH
15296: LD_VAR 0 3
15300: PPUSH
15301: CALL 15550 0 2
15305: NOT
15306: IFFALSE 15365
// repeat engine := _engine [ 1 ] ;
15308: LD_ADDR_VAR 0 3
15312: PUSH
15313: LD_VAR 0 11
15317: PUSH
15318: LD_INT 1
15320: ARRAY
15321: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
15322: LD_ADDR_VAR 0 11
15326: PUSH
15327: LD_VAR 0 11
15331: PPUSH
15332: LD_INT 1
15334: PPUSH
15335: CALL_OW 3
15339: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
15340: LD_VAR 0 2
15344: PPUSH
15345: LD_VAR 0 3
15349: PPUSH
15350: CALL 15550 0 2
15354: PUSH
15355: LD_VAR 0 11
15359: PUSH
15360: EMPTY
15361: EQUAL
15362: OR
15363: IFFALSE 15308
// if not control in _control then
15365: LD_VAR 0 4
15369: PUSH
15370: LD_VAR 0 12
15374: IN
15375: NOT
15376: IFFALSE 15402
// control := _control [ rand ( 1 , _control ) ] ;
15378: LD_ADDR_VAR 0 4
15382: PUSH
15383: LD_VAR 0 12
15387: PUSH
15388: LD_INT 1
15390: PPUSH
15391: LD_VAR 0 12
15395: PPUSH
15396: CALL_OW 12
15400: ARRAY
15401: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
15402: LD_VAR 0 2
15406: PPUSH
15407: LD_VAR 0 5
15411: PPUSH
15412: CALL 15770 0 2
15416: NOT
15417: IFFALSE 15476
// repeat weapon := _weapon [ 1 ] ;
15419: LD_ADDR_VAR 0 5
15423: PUSH
15424: LD_VAR 0 10
15428: PUSH
15429: LD_INT 1
15431: ARRAY
15432: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
15433: LD_ADDR_VAR 0 10
15437: PUSH
15438: LD_VAR 0 10
15442: PPUSH
15443: LD_INT 1
15445: PPUSH
15446: CALL_OW 3
15450: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
15451: LD_VAR 0 2
15455: PPUSH
15456: LD_VAR 0 5
15460: PPUSH
15461: CALL 15770 0 2
15465: PUSH
15466: LD_VAR 0 10
15470: PUSH
15471: EMPTY
15472: EQUAL
15473: OR
15474: IFFALSE 15419
// result := [ ] ;
15476: LD_ADDR_VAR 0 6
15480: PUSH
15481: EMPTY
15482: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15483: LD_VAR 0 1
15487: PPUSH
15488: LD_VAR 0 2
15492: PPUSH
15493: LD_VAR 0 3
15497: PPUSH
15498: LD_VAR 0 4
15502: PPUSH
15503: LD_VAR 0 5
15507: PPUSH
15508: CALL_OW 448
15512: IFFALSE 15545
// result := [ chassis , engine , control , weapon ] ;
15514: LD_ADDR_VAR 0 6
15518: PUSH
15519: LD_VAR 0 2
15523: PUSH
15524: LD_VAR 0 3
15528: PUSH
15529: LD_VAR 0 4
15533: PUSH
15534: LD_VAR 0 5
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: ST_TO_ADDR
// end ;
15545: LD_VAR 0 6
15549: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
15550: LD_INT 0
15552: PPUSH
// if not chassis or not engine then
15553: LD_VAR 0 1
15557: NOT
15558: PUSH
15559: LD_VAR 0 2
15563: NOT
15564: OR
15565: IFFALSE 15569
// exit ;
15567: GO 15765
// case engine of engine_solar :
15569: LD_VAR 0 2
15573: PUSH
15574: LD_INT 2
15576: DOUBLE
15577: EQUAL
15578: IFTRUE 15582
15580: GO 15620
15582: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
15583: LD_ADDR_VAR 0 3
15587: PUSH
15588: LD_INT 11
15590: PUSH
15591: LD_INT 12
15593: PUSH
15594: LD_INT 13
15596: PUSH
15597: LD_INT 14
15599: PUSH
15600: LD_INT 1
15602: PUSH
15603: LD_INT 2
15605: PUSH
15606: LD_INT 3
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: ST_TO_ADDR
15618: GO 15749
15620: LD_INT 1
15622: DOUBLE
15623: EQUAL
15624: IFTRUE 15628
15626: GO 15690
15628: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
15629: LD_ADDR_VAR 0 3
15633: PUSH
15634: LD_INT 11
15636: PUSH
15637: LD_INT 12
15639: PUSH
15640: LD_INT 13
15642: PUSH
15643: LD_INT 14
15645: PUSH
15646: LD_INT 1
15648: PUSH
15649: LD_INT 2
15651: PUSH
15652: LD_INT 3
15654: PUSH
15655: LD_INT 4
15657: PUSH
15658: LD_INT 5
15660: PUSH
15661: LD_INT 21
15663: PUSH
15664: LD_INT 23
15666: PUSH
15667: LD_INT 22
15669: PUSH
15670: LD_INT 24
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: ST_TO_ADDR
15688: GO 15749
15690: LD_INT 3
15692: DOUBLE
15693: EQUAL
15694: IFTRUE 15698
15696: GO 15748
15698: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15699: LD_ADDR_VAR 0 3
15703: PUSH
15704: LD_INT 13
15706: PUSH
15707: LD_INT 14
15709: PUSH
15710: LD_INT 2
15712: PUSH
15713: LD_INT 3
15715: PUSH
15716: LD_INT 4
15718: PUSH
15719: LD_INT 5
15721: PUSH
15722: LD_INT 21
15724: PUSH
15725: LD_INT 22
15727: PUSH
15728: LD_INT 23
15730: PUSH
15731: LD_INT 24
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: ST_TO_ADDR
15746: GO 15749
15748: POP
// result := ( chassis in result ) ;
15749: LD_ADDR_VAR 0 3
15753: PUSH
15754: LD_VAR 0 1
15758: PUSH
15759: LD_VAR 0 3
15763: IN
15764: ST_TO_ADDR
// end ;
15765: LD_VAR 0 3
15769: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
15770: LD_INT 0
15772: PPUSH
// if not chassis or not weapon then
15773: LD_VAR 0 1
15777: NOT
15778: PUSH
15779: LD_VAR 0 2
15783: NOT
15784: OR
15785: IFFALSE 15789
// exit ;
15787: GO 16815
// case weapon of us_machine_gun :
15789: LD_VAR 0 2
15793: PUSH
15794: LD_INT 2
15796: DOUBLE
15797: EQUAL
15798: IFTRUE 15802
15800: GO 15832
15802: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
15803: LD_ADDR_VAR 0 3
15807: PUSH
15808: LD_INT 1
15810: PUSH
15811: LD_INT 2
15813: PUSH
15814: LD_INT 3
15816: PUSH
15817: LD_INT 4
15819: PUSH
15820: LD_INT 5
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: ST_TO_ADDR
15830: GO 16799
15832: LD_INT 3
15834: DOUBLE
15835: EQUAL
15836: IFTRUE 15840
15838: GO 15870
15840: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
15841: LD_ADDR_VAR 0 3
15845: PUSH
15846: LD_INT 1
15848: PUSH
15849: LD_INT 2
15851: PUSH
15852: LD_INT 3
15854: PUSH
15855: LD_INT 4
15857: PUSH
15858: LD_INT 5
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: ST_TO_ADDR
15868: GO 16799
15870: LD_INT 11
15872: DOUBLE
15873: EQUAL
15874: IFTRUE 15878
15876: GO 15908
15878: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
15879: LD_ADDR_VAR 0 3
15883: PUSH
15884: LD_INT 1
15886: PUSH
15887: LD_INT 2
15889: PUSH
15890: LD_INT 3
15892: PUSH
15893: LD_INT 4
15895: PUSH
15896: LD_INT 5
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: ST_TO_ADDR
15906: GO 16799
15908: LD_INT 4
15910: DOUBLE
15911: EQUAL
15912: IFTRUE 15916
15914: GO 15942
15916: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
15917: LD_ADDR_VAR 0 3
15921: PUSH
15922: LD_INT 2
15924: PUSH
15925: LD_INT 3
15927: PUSH
15928: LD_INT 4
15930: PUSH
15931: LD_INT 5
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: ST_TO_ADDR
15940: GO 16799
15942: LD_INT 5
15944: DOUBLE
15945: EQUAL
15946: IFTRUE 15950
15948: GO 15976
15950: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
15951: LD_ADDR_VAR 0 3
15955: PUSH
15956: LD_INT 2
15958: PUSH
15959: LD_INT 3
15961: PUSH
15962: LD_INT 4
15964: PUSH
15965: LD_INT 5
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: ST_TO_ADDR
15974: GO 16799
15976: LD_INT 9
15978: DOUBLE
15979: EQUAL
15980: IFTRUE 15984
15982: GO 16010
15984: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
15985: LD_ADDR_VAR 0 3
15989: PUSH
15990: LD_INT 2
15992: PUSH
15993: LD_INT 3
15995: PUSH
15996: LD_INT 4
15998: PUSH
15999: LD_INT 5
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: ST_TO_ADDR
16008: GO 16799
16010: LD_INT 7
16012: DOUBLE
16013: EQUAL
16014: IFTRUE 16018
16016: GO 16044
16018: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
16019: LD_ADDR_VAR 0 3
16023: PUSH
16024: LD_INT 2
16026: PUSH
16027: LD_INT 3
16029: PUSH
16030: LD_INT 4
16032: PUSH
16033: LD_INT 5
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: ST_TO_ADDR
16042: GO 16799
16044: LD_INT 12
16046: DOUBLE
16047: EQUAL
16048: IFTRUE 16052
16050: GO 16078
16052: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
16053: LD_ADDR_VAR 0 3
16057: PUSH
16058: LD_INT 2
16060: PUSH
16061: LD_INT 3
16063: PUSH
16064: LD_INT 4
16066: PUSH
16067: LD_INT 5
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: ST_TO_ADDR
16076: GO 16799
16078: LD_INT 13
16080: DOUBLE
16081: EQUAL
16082: IFTRUE 16086
16084: GO 16112
16086: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
16087: LD_ADDR_VAR 0 3
16091: PUSH
16092: LD_INT 2
16094: PUSH
16095: LD_INT 3
16097: PUSH
16098: LD_INT 4
16100: PUSH
16101: LD_INT 5
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: ST_TO_ADDR
16110: GO 16799
16112: LD_INT 14
16114: DOUBLE
16115: EQUAL
16116: IFTRUE 16120
16118: GO 16138
16120: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
16121: LD_ADDR_VAR 0 3
16125: PUSH
16126: LD_INT 4
16128: PUSH
16129: LD_INT 5
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: ST_TO_ADDR
16136: GO 16799
16138: LD_INT 6
16140: DOUBLE
16141: EQUAL
16142: IFTRUE 16146
16144: GO 16164
16146: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
16147: LD_ADDR_VAR 0 3
16151: PUSH
16152: LD_INT 4
16154: PUSH
16155: LD_INT 5
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: ST_TO_ADDR
16162: GO 16799
16164: LD_INT 10
16166: DOUBLE
16167: EQUAL
16168: IFTRUE 16172
16170: GO 16190
16172: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
16173: LD_ADDR_VAR 0 3
16177: PUSH
16178: LD_INT 4
16180: PUSH
16181: LD_INT 5
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: ST_TO_ADDR
16188: GO 16799
16190: LD_INT 22
16192: DOUBLE
16193: EQUAL
16194: IFTRUE 16198
16196: GO 16224
16198: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
16199: LD_ADDR_VAR 0 3
16203: PUSH
16204: LD_INT 11
16206: PUSH
16207: LD_INT 12
16209: PUSH
16210: LD_INT 13
16212: PUSH
16213: LD_INT 14
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: ST_TO_ADDR
16222: GO 16799
16224: LD_INT 23
16226: DOUBLE
16227: EQUAL
16228: IFTRUE 16232
16230: GO 16258
16232: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
16233: LD_ADDR_VAR 0 3
16237: PUSH
16238: LD_INT 11
16240: PUSH
16241: LD_INT 12
16243: PUSH
16244: LD_INT 13
16246: PUSH
16247: LD_INT 14
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: ST_TO_ADDR
16256: GO 16799
16258: LD_INT 24
16260: DOUBLE
16261: EQUAL
16262: IFTRUE 16266
16264: GO 16292
16266: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
16267: LD_ADDR_VAR 0 3
16271: PUSH
16272: LD_INT 11
16274: PUSH
16275: LD_INT 12
16277: PUSH
16278: LD_INT 13
16280: PUSH
16281: LD_INT 14
16283: PUSH
16284: EMPTY
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: ST_TO_ADDR
16290: GO 16799
16292: LD_INT 30
16294: DOUBLE
16295: EQUAL
16296: IFTRUE 16300
16298: GO 16326
16300: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
16301: LD_ADDR_VAR 0 3
16305: PUSH
16306: LD_INT 11
16308: PUSH
16309: LD_INT 12
16311: PUSH
16312: LD_INT 13
16314: PUSH
16315: LD_INT 14
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: ST_TO_ADDR
16324: GO 16799
16326: LD_INT 25
16328: DOUBLE
16329: EQUAL
16330: IFTRUE 16334
16332: GO 16352
16334: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
16335: LD_ADDR_VAR 0 3
16339: PUSH
16340: LD_INT 13
16342: PUSH
16343: LD_INT 14
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: ST_TO_ADDR
16350: GO 16799
16352: LD_INT 27
16354: DOUBLE
16355: EQUAL
16356: IFTRUE 16360
16358: GO 16378
16360: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
16361: LD_ADDR_VAR 0 3
16365: PUSH
16366: LD_INT 13
16368: PUSH
16369: LD_INT 14
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: ST_TO_ADDR
16376: GO 16799
16378: LD_INT 28
16380: DOUBLE
16381: EQUAL
16382: IFTRUE 16386
16384: GO 16404
16386: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
16387: LD_ADDR_VAR 0 3
16391: PUSH
16392: LD_INT 13
16394: PUSH
16395: LD_INT 14
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: ST_TO_ADDR
16402: GO 16799
16404: LD_INT 29
16406: DOUBLE
16407: EQUAL
16408: IFTRUE 16412
16410: GO 16430
16412: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
16413: LD_ADDR_VAR 0 3
16417: PUSH
16418: LD_INT 13
16420: PUSH
16421: LD_INT 14
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: ST_TO_ADDR
16428: GO 16799
16430: LD_INT 31
16432: DOUBLE
16433: EQUAL
16434: IFTRUE 16438
16436: GO 16456
16438: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
16439: LD_ADDR_VAR 0 3
16443: PUSH
16444: LD_INT 13
16446: PUSH
16447: LD_INT 14
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: ST_TO_ADDR
16454: GO 16799
16456: LD_INT 26
16458: DOUBLE
16459: EQUAL
16460: IFTRUE 16464
16462: GO 16482
16464: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
16465: LD_ADDR_VAR 0 3
16469: PUSH
16470: LD_INT 13
16472: PUSH
16473: LD_INT 14
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: ST_TO_ADDR
16480: GO 16799
16482: LD_INT 42
16484: DOUBLE
16485: EQUAL
16486: IFTRUE 16490
16488: GO 16516
16490: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
16491: LD_ADDR_VAR 0 3
16495: PUSH
16496: LD_INT 21
16498: PUSH
16499: LD_INT 22
16501: PUSH
16502: LD_INT 23
16504: PUSH
16505: LD_INT 24
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: ST_TO_ADDR
16514: GO 16799
16516: LD_INT 43
16518: DOUBLE
16519: EQUAL
16520: IFTRUE 16524
16522: GO 16550
16524: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
16525: LD_ADDR_VAR 0 3
16529: PUSH
16530: LD_INT 21
16532: PUSH
16533: LD_INT 22
16535: PUSH
16536: LD_INT 23
16538: PUSH
16539: LD_INT 24
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: ST_TO_ADDR
16548: GO 16799
16550: LD_INT 44
16552: DOUBLE
16553: EQUAL
16554: IFTRUE 16558
16556: GO 16584
16558: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
16559: LD_ADDR_VAR 0 3
16563: PUSH
16564: LD_INT 21
16566: PUSH
16567: LD_INT 22
16569: PUSH
16570: LD_INT 23
16572: PUSH
16573: LD_INT 24
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: ST_TO_ADDR
16582: GO 16799
16584: LD_INT 45
16586: DOUBLE
16587: EQUAL
16588: IFTRUE 16592
16590: GO 16618
16592: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
16593: LD_ADDR_VAR 0 3
16597: PUSH
16598: LD_INT 21
16600: PUSH
16601: LD_INT 22
16603: PUSH
16604: LD_INT 23
16606: PUSH
16607: LD_INT 24
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: ST_TO_ADDR
16616: GO 16799
16618: LD_INT 49
16620: DOUBLE
16621: EQUAL
16622: IFTRUE 16626
16624: GO 16652
16626: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
16627: LD_ADDR_VAR 0 3
16631: PUSH
16632: LD_INT 21
16634: PUSH
16635: LD_INT 22
16637: PUSH
16638: LD_INT 23
16640: PUSH
16641: LD_INT 24
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: ST_TO_ADDR
16650: GO 16799
16652: LD_INT 51
16654: DOUBLE
16655: EQUAL
16656: IFTRUE 16660
16658: GO 16686
16660: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
16661: LD_ADDR_VAR 0 3
16665: PUSH
16666: LD_INT 21
16668: PUSH
16669: LD_INT 22
16671: PUSH
16672: LD_INT 23
16674: PUSH
16675: LD_INT 24
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: ST_TO_ADDR
16684: GO 16799
16686: LD_INT 52
16688: DOUBLE
16689: EQUAL
16690: IFTRUE 16694
16692: GO 16720
16694: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
16695: LD_ADDR_VAR 0 3
16699: PUSH
16700: LD_INT 21
16702: PUSH
16703: LD_INT 22
16705: PUSH
16706: LD_INT 23
16708: PUSH
16709: LD_INT 24
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: ST_TO_ADDR
16718: GO 16799
16720: LD_INT 53
16722: DOUBLE
16723: EQUAL
16724: IFTRUE 16728
16726: GO 16746
16728: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
16729: LD_ADDR_VAR 0 3
16733: PUSH
16734: LD_INT 23
16736: PUSH
16737: LD_INT 24
16739: PUSH
16740: EMPTY
16741: LIST
16742: LIST
16743: ST_TO_ADDR
16744: GO 16799
16746: LD_INT 46
16748: DOUBLE
16749: EQUAL
16750: IFTRUE 16754
16752: GO 16772
16754: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
16755: LD_ADDR_VAR 0 3
16759: PUSH
16760: LD_INT 23
16762: PUSH
16763: LD_INT 24
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: ST_TO_ADDR
16770: GO 16799
16772: LD_INT 47
16774: DOUBLE
16775: EQUAL
16776: IFTRUE 16780
16778: GO 16798
16780: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16781: LD_ADDR_VAR 0 3
16785: PUSH
16786: LD_INT 23
16788: PUSH
16789: LD_INT 24
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: ST_TO_ADDR
16796: GO 16799
16798: POP
// result := ( chassis in result ) ;
16799: LD_ADDR_VAR 0 3
16803: PUSH
16804: LD_VAR 0 1
16808: PUSH
16809: LD_VAR 0 3
16813: IN
16814: ST_TO_ADDR
// end ;
16815: LD_VAR 0 3
16819: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
16820: LD_INT 0
16822: PPUSH
16823: PPUSH
16824: PPUSH
16825: PPUSH
16826: PPUSH
16827: PPUSH
16828: PPUSH
// result := array ;
16829: LD_ADDR_VAR 0 5
16833: PUSH
16834: LD_VAR 0 1
16838: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
16839: LD_VAR 0 1
16843: NOT
16844: PUSH
16845: LD_VAR 0 2
16849: NOT
16850: OR
16851: PUSH
16852: LD_VAR 0 3
16856: NOT
16857: OR
16858: PUSH
16859: LD_VAR 0 2
16863: PUSH
16864: LD_VAR 0 1
16868: GREATER
16869: OR
16870: PUSH
16871: LD_VAR 0 3
16875: PUSH
16876: LD_VAR 0 1
16880: GREATER
16881: OR
16882: IFFALSE 16886
// exit ;
16884: GO 17182
// if direction then
16886: LD_VAR 0 4
16890: IFFALSE 16954
// begin d := 1 ;
16892: LD_ADDR_VAR 0 9
16896: PUSH
16897: LD_INT 1
16899: ST_TO_ADDR
// if i_from > i_to then
16900: LD_VAR 0 2
16904: PUSH
16905: LD_VAR 0 3
16909: GREATER
16910: IFFALSE 16936
// length := ( array - i_from ) + i_to else
16912: LD_ADDR_VAR 0 11
16916: PUSH
16917: LD_VAR 0 1
16921: PUSH
16922: LD_VAR 0 2
16926: MINUS
16927: PUSH
16928: LD_VAR 0 3
16932: PLUS
16933: ST_TO_ADDR
16934: GO 16952
// length := i_to - i_from ;
16936: LD_ADDR_VAR 0 11
16940: PUSH
16941: LD_VAR 0 3
16945: PUSH
16946: LD_VAR 0 2
16950: MINUS
16951: ST_TO_ADDR
// end else
16952: GO 17015
// begin d := - 1 ;
16954: LD_ADDR_VAR 0 9
16958: PUSH
16959: LD_INT 1
16961: NEG
16962: ST_TO_ADDR
// if i_from > i_to then
16963: LD_VAR 0 2
16967: PUSH
16968: LD_VAR 0 3
16972: GREATER
16973: IFFALSE 16993
// length := i_from - i_to else
16975: LD_ADDR_VAR 0 11
16979: PUSH
16980: LD_VAR 0 2
16984: PUSH
16985: LD_VAR 0 3
16989: MINUS
16990: ST_TO_ADDR
16991: GO 17015
// length := ( array - i_to ) + i_from ;
16993: LD_ADDR_VAR 0 11
16997: PUSH
16998: LD_VAR 0 1
17002: PUSH
17003: LD_VAR 0 3
17007: MINUS
17008: PUSH
17009: LD_VAR 0 2
17013: PLUS
17014: ST_TO_ADDR
// end ; if not length then
17015: LD_VAR 0 11
17019: NOT
17020: IFFALSE 17024
// exit ;
17022: GO 17182
// tmp := array ;
17024: LD_ADDR_VAR 0 10
17028: PUSH
17029: LD_VAR 0 1
17033: ST_TO_ADDR
// for i = 1 to length do
17034: LD_ADDR_VAR 0 6
17038: PUSH
17039: DOUBLE
17040: LD_INT 1
17042: DEC
17043: ST_TO_ADDR
17044: LD_VAR 0 11
17048: PUSH
17049: FOR_TO
17050: IFFALSE 17170
// begin for j = 1 to array do
17052: LD_ADDR_VAR 0 7
17056: PUSH
17057: DOUBLE
17058: LD_INT 1
17060: DEC
17061: ST_TO_ADDR
17062: LD_VAR 0 1
17066: PUSH
17067: FOR_TO
17068: IFFALSE 17156
// begin k := j + d ;
17070: LD_ADDR_VAR 0 8
17074: PUSH
17075: LD_VAR 0 7
17079: PUSH
17080: LD_VAR 0 9
17084: PLUS
17085: ST_TO_ADDR
// if k > array then
17086: LD_VAR 0 8
17090: PUSH
17091: LD_VAR 0 1
17095: GREATER
17096: IFFALSE 17106
// k := 1 ;
17098: LD_ADDR_VAR 0 8
17102: PUSH
17103: LD_INT 1
17105: ST_TO_ADDR
// if not k then
17106: LD_VAR 0 8
17110: NOT
17111: IFFALSE 17123
// k := array ;
17113: LD_ADDR_VAR 0 8
17117: PUSH
17118: LD_VAR 0 1
17122: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
17123: LD_ADDR_VAR 0 10
17127: PUSH
17128: LD_VAR 0 10
17132: PPUSH
17133: LD_VAR 0 8
17137: PPUSH
17138: LD_VAR 0 1
17142: PUSH
17143: LD_VAR 0 7
17147: ARRAY
17148: PPUSH
17149: CALL_OW 1
17153: ST_TO_ADDR
// end ;
17154: GO 17067
17156: POP
17157: POP
// array := tmp ;
17158: LD_ADDR_VAR 0 1
17162: PUSH
17163: LD_VAR 0 10
17167: ST_TO_ADDR
// end ;
17168: GO 17049
17170: POP
17171: POP
// result := array ;
17172: LD_ADDR_VAR 0 5
17176: PUSH
17177: LD_VAR 0 1
17181: ST_TO_ADDR
// end ;
17182: LD_VAR 0 5
17186: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
17187: LD_INT 0
17189: PPUSH
17190: PPUSH
// result := 0 ;
17191: LD_ADDR_VAR 0 3
17195: PUSH
17196: LD_INT 0
17198: ST_TO_ADDR
// if not array or not value in array then
17199: LD_VAR 0 1
17203: NOT
17204: PUSH
17205: LD_VAR 0 2
17209: PUSH
17210: LD_VAR 0 1
17214: IN
17215: NOT
17216: OR
17217: IFFALSE 17221
// exit ;
17219: GO 17275
// for i = 1 to array do
17221: LD_ADDR_VAR 0 4
17225: PUSH
17226: DOUBLE
17227: LD_INT 1
17229: DEC
17230: ST_TO_ADDR
17231: LD_VAR 0 1
17235: PUSH
17236: FOR_TO
17237: IFFALSE 17273
// if value = array [ i ] then
17239: LD_VAR 0 2
17243: PUSH
17244: LD_VAR 0 1
17248: PUSH
17249: LD_VAR 0 4
17253: ARRAY
17254: EQUAL
17255: IFFALSE 17271
// begin result := i ;
17257: LD_ADDR_VAR 0 3
17261: PUSH
17262: LD_VAR 0 4
17266: ST_TO_ADDR
// exit ;
17267: POP
17268: POP
17269: GO 17275
// end ;
17271: GO 17236
17273: POP
17274: POP
// end ;
17275: LD_VAR 0 3
17279: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
17280: LD_INT 0
17282: PPUSH
// vc_chassis := chassis ;
17283: LD_ADDR_OWVAR 37
17287: PUSH
17288: LD_VAR 0 1
17292: ST_TO_ADDR
// vc_engine := engine ;
17293: LD_ADDR_OWVAR 39
17297: PUSH
17298: LD_VAR 0 2
17302: ST_TO_ADDR
// vc_control := control ;
17303: LD_ADDR_OWVAR 38
17307: PUSH
17308: LD_VAR 0 3
17312: ST_TO_ADDR
// vc_weapon := weapon ;
17313: LD_ADDR_OWVAR 40
17317: PUSH
17318: LD_VAR 0 4
17322: ST_TO_ADDR
// vc_fuel_battery := fuel ;
17323: LD_ADDR_OWVAR 41
17327: PUSH
17328: LD_VAR 0 5
17332: ST_TO_ADDR
// end ;
17333: LD_VAR 0 6
17337: RET
// export function WantPlant ( unit ) ; var task ; begin
17338: LD_INT 0
17340: PPUSH
17341: PPUSH
// result := false ;
17342: LD_ADDR_VAR 0 2
17346: PUSH
17347: LD_INT 0
17349: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
17350: LD_ADDR_VAR 0 3
17354: PUSH
17355: LD_VAR 0 1
17359: PPUSH
17360: CALL_OW 437
17364: ST_TO_ADDR
// if task then
17365: LD_VAR 0 3
17369: IFFALSE 17397
// if task [ 1 ] [ 1 ] = p then
17371: LD_VAR 0 3
17375: PUSH
17376: LD_INT 1
17378: ARRAY
17379: PUSH
17380: LD_INT 1
17382: ARRAY
17383: PUSH
17384: LD_STRING p
17386: EQUAL
17387: IFFALSE 17397
// result := true ;
17389: LD_ADDR_VAR 0 2
17393: PUSH
17394: LD_INT 1
17396: ST_TO_ADDR
// end ;
17397: LD_VAR 0 2
17401: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
17402: LD_INT 0
17404: PPUSH
17405: PPUSH
17406: PPUSH
17407: PPUSH
// if pos < 1 then
17408: LD_VAR 0 2
17412: PUSH
17413: LD_INT 1
17415: LESS
17416: IFFALSE 17420
// exit ;
17418: GO 17723
// if pos = 1 then
17420: LD_VAR 0 2
17424: PUSH
17425: LD_INT 1
17427: EQUAL
17428: IFFALSE 17461
// result := Replace ( arr , pos [ 1 ] , value ) else
17430: LD_ADDR_VAR 0 4
17434: PUSH
17435: LD_VAR 0 1
17439: PPUSH
17440: LD_VAR 0 2
17444: PUSH
17445: LD_INT 1
17447: ARRAY
17448: PPUSH
17449: LD_VAR 0 3
17453: PPUSH
17454: CALL_OW 1
17458: ST_TO_ADDR
17459: GO 17723
// begin tmp := arr ;
17461: LD_ADDR_VAR 0 6
17465: PUSH
17466: LD_VAR 0 1
17470: ST_TO_ADDR
// s_arr := [ tmp ] ;
17471: LD_ADDR_VAR 0 7
17475: PUSH
17476: LD_VAR 0 6
17480: PUSH
17481: EMPTY
17482: LIST
17483: ST_TO_ADDR
// for i = 1 to pos - 1 do
17484: LD_ADDR_VAR 0 5
17488: PUSH
17489: DOUBLE
17490: LD_INT 1
17492: DEC
17493: ST_TO_ADDR
17494: LD_VAR 0 2
17498: PUSH
17499: LD_INT 1
17501: MINUS
17502: PUSH
17503: FOR_TO
17504: IFFALSE 17549
// begin tmp := tmp [ pos [ i ] ] ;
17506: LD_ADDR_VAR 0 6
17510: PUSH
17511: LD_VAR 0 6
17515: PUSH
17516: LD_VAR 0 2
17520: PUSH
17521: LD_VAR 0 5
17525: ARRAY
17526: ARRAY
17527: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
17528: LD_ADDR_VAR 0 7
17532: PUSH
17533: LD_VAR 0 7
17537: PUSH
17538: LD_VAR 0 6
17542: PUSH
17543: EMPTY
17544: LIST
17545: ADD
17546: ST_TO_ADDR
// end ;
17547: GO 17503
17549: POP
17550: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
17551: LD_ADDR_VAR 0 6
17555: PUSH
17556: LD_VAR 0 6
17560: PPUSH
17561: LD_VAR 0 2
17565: PUSH
17566: LD_VAR 0 2
17570: ARRAY
17571: PPUSH
17572: LD_VAR 0 3
17576: PPUSH
17577: CALL_OW 1
17581: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
17582: LD_ADDR_VAR 0 7
17586: PUSH
17587: LD_VAR 0 7
17591: PPUSH
17592: LD_VAR 0 7
17596: PPUSH
17597: LD_VAR 0 6
17601: PPUSH
17602: CALL_OW 1
17606: ST_TO_ADDR
// for i = s_arr downto 2 do
17607: LD_ADDR_VAR 0 5
17611: PUSH
17612: DOUBLE
17613: LD_VAR 0 7
17617: INC
17618: ST_TO_ADDR
17619: LD_INT 2
17621: PUSH
17622: FOR_DOWNTO
17623: IFFALSE 17707
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
17625: LD_ADDR_VAR 0 6
17629: PUSH
17630: LD_VAR 0 7
17634: PUSH
17635: LD_VAR 0 5
17639: PUSH
17640: LD_INT 1
17642: MINUS
17643: ARRAY
17644: PPUSH
17645: LD_VAR 0 2
17649: PUSH
17650: LD_VAR 0 5
17654: PUSH
17655: LD_INT 1
17657: MINUS
17658: ARRAY
17659: PPUSH
17660: LD_VAR 0 7
17664: PUSH
17665: LD_VAR 0 5
17669: ARRAY
17670: PPUSH
17671: CALL_OW 1
17675: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
17676: LD_ADDR_VAR 0 7
17680: PUSH
17681: LD_VAR 0 7
17685: PPUSH
17686: LD_VAR 0 5
17690: PUSH
17691: LD_INT 1
17693: MINUS
17694: PPUSH
17695: LD_VAR 0 6
17699: PPUSH
17700: CALL_OW 1
17704: ST_TO_ADDR
// end ;
17705: GO 17622
17707: POP
17708: POP
// result := s_arr [ 1 ] ;
17709: LD_ADDR_VAR 0 4
17713: PUSH
17714: LD_VAR 0 7
17718: PUSH
17719: LD_INT 1
17721: ARRAY
17722: ST_TO_ADDR
// end ; end ;
17723: LD_VAR 0 4
17727: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
17728: LD_INT 0
17730: PPUSH
17731: PPUSH
// if not list then
17732: LD_VAR 0 1
17736: NOT
17737: IFFALSE 17741
// exit ;
17739: GO 17832
// i := list [ pos1 ] ;
17741: LD_ADDR_VAR 0 5
17745: PUSH
17746: LD_VAR 0 1
17750: PUSH
17751: LD_VAR 0 2
17755: ARRAY
17756: ST_TO_ADDR
// if not i then
17757: LD_VAR 0 5
17761: NOT
17762: IFFALSE 17766
// exit ;
17764: GO 17832
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
17766: LD_ADDR_VAR 0 1
17770: PUSH
17771: LD_VAR 0 1
17775: PPUSH
17776: LD_VAR 0 2
17780: PPUSH
17781: LD_VAR 0 1
17785: PUSH
17786: LD_VAR 0 3
17790: ARRAY
17791: PPUSH
17792: CALL_OW 1
17796: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
17797: LD_ADDR_VAR 0 1
17801: PUSH
17802: LD_VAR 0 1
17806: PPUSH
17807: LD_VAR 0 3
17811: PPUSH
17812: LD_VAR 0 5
17816: PPUSH
17817: CALL_OW 1
17821: ST_TO_ADDR
// result := list ;
17822: LD_ADDR_VAR 0 4
17826: PUSH
17827: LD_VAR 0 1
17831: ST_TO_ADDR
// end ;
17832: LD_VAR 0 4
17836: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
17837: LD_INT 0
17839: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
17840: LD_ADDR_VAR 0 5
17844: PUSH
17845: LD_VAR 0 1
17849: PPUSH
17850: CALL_OW 250
17854: PPUSH
17855: LD_VAR 0 1
17859: PPUSH
17860: CALL_OW 251
17864: PPUSH
17865: LD_VAR 0 2
17869: PPUSH
17870: LD_VAR 0 3
17874: PPUSH
17875: LD_VAR 0 4
17879: PPUSH
17880: CALL 17890 0 5
17884: ST_TO_ADDR
// end ;
17885: LD_VAR 0 5
17889: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
17890: LD_INT 0
17892: PPUSH
17893: PPUSH
17894: PPUSH
17895: PPUSH
// if not list then
17896: LD_VAR 0 3
17900: NOT
17901: IFFALSE 17905
// exit ;
17903: GO 18293
// result := [ ] ;
17905: LD_ADDR_VAR 0 6
17909: PUSH
17910: EMPTY
17911: ST_TO_ADDR
// for i in list do
17912: LD_ADDR_VAR 0 7
17916: PUSH
17917: LD_VAR 0 3
17921: PUSH
17922: FOR_IN
17923: IFFALSE 18125
// begin tmp := GetDistUnitXY ( i , x , y ) ;
17925: LD_ADDR_VAR 0 9
17929: PUSH
17930: LD_VAR 0 7
17934: PPUSH
17935: LD_VAR 0 1
17939: PPUSH
17940: LD_VAR 0 2
17944: PPUSH
17945: CALL_OW 297
17949: ST_TO_ADDR
// if not result then
17950: LD_VAR 0 6
17954: NOT
17955: IFFALSE 17981
// result := [ [ i , tmp ] ] else
17957: LD_ADDR_VAR 0 6
17961: PUSH
17962: LD_VAR 0 7
17966: PUSH
17967: LD_VAR 0 9
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: EMPTY
17977: LIST
17978: ST_TO_ADDR
17979: GO 18123
// begin if result [ result ] [ 2 ] < tmp then
17981: LD_VAR 0 6
17985: PUSH
17986: LD_VAR 0 6
17990: ARRAY
17991: PUSH
17992: LD_INT 2
17994: ARRAY
17995: PUSH
17996: LD_VAR 0 9
18000: LESS
18001: IFFALSE 18043
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
18003: LD_ADDR_VAR 0 6
18007: PUSH
18008: LD_VAR 0 6
18012: PPUSH
18013: LD_VAR 0 6
18017: PUSH
18018: LD_INT 1
18020: PLUS
18021: PPUSH
18022: LD_VAR 0 7
18026: PUSH
18027: LD_VAR 0 9
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: PPUSH
18036: CALL_OW 2
18040: ST_TO_ADDR
18041: GO 18123
// for j = 1 to result do
18043: LD_ADDR_VAR 0 8
18047: PUSH
18048: DOUBLE
18049: LD_INT 1
18051: DEC
18052: ST_TO_ADDR
18053: LD_VAR 0 6
18057: PUSH
18058: FOR_TO
18059: IFFALSE 18121
// begin if tmp < result [ j ] [ 2 ] then
18061: LD_VAR 0 9
18065: PUSH
18066: LD_VAR 0 6
18070: PUSH
18071: LD_VAR 0 8
18075: ARRAY
18076: PUSH
18077: LD_INT 2
18079: ARRAY
18080: LESS
18081: IFFALSE 18119
// begin result := Insert ( result , j , [ i , tmp ] ) ;
18083: LD_ADDR_VAR 0 6
18087: PUSH
18088: LD_VAR 0 6
18092: PPUSH
18093: LD_VAR 0 8
18097: PPUSH
18098: LD_VAR 0 7
18102: PUSH
18103: LD_VAR 0 9
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PPUSH
18112: CALL_OW 2
18116: ST_TO_ADDR
// break ;
18117: GO 18121
// end ; end ;
18119: GO 18058
18121: POP
18122: POP
// end ; end ;
18123: GO 17922
18125: POP
18126: POP
// if result and not asc then
18127: LD_VAR 0 6
18131: PUSH
18132: LD_VAR 0 4
18136: NOT
18137: AND
18138: IFFALSE 18213
// begin tmp := result ;
18140: LD_ADDR_VAR 0 9
18144: PUSH
18145: LD_VAR 0 6
18149: ST_TO_ADDR
// for i = tmp downto 1 do
18150: LD_ADDR_VAR 0 7
18154: PUSH
18155: DOUBLE
18156: LD_VAR 0 9
18160: INC
18161: ST_TO_ADDR
18162: LD_INT 1
18164: PUSH
18165: FOR_DOWNTO
18166: IFFALSE 18211
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
18168: LD_ADDR_VAR 0 6
18172: PUSH
18173: LD_VAR 0 6
18177: PPUSH
18178: LD_VAR 0 9
18182: PUSH
18183: LD_VAR 0 7
18187: MINUS
18188: PUSH
18189: LD_INT 1
18191: PLUS
18192: PPUSH
18193: LD_VAR 0 9
18197: PUSH
18198: LD_VAR 0 7
18202: ARRAY
18203: PPUSH
18204: CALL_OW 1
18208: ST_TO_ADDR
18209: GO 18165
18211: POP
18212: POP
// end ; tmp := [ ] ;
18213: LD_ADDR_VAR 0 9
18217: PUSH
18218: EMPTY
18219: ST_TO_ADDR
// if mode then
18220: LD_VAR 0 5
18224: IFFALSE 18293
// begin for i = 1 to result do
18226: LD_ADDR_VAR 0 7
18230: PUSH
18231: DOUBLE
18232: LD_INT 1
18234: DEC
18235: ST_TO_ADDR
18236: LD_VAR 0 6
18240: PUSH
18241: FOR_TO
18242: IFFALSE 18281
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
18244: LD_ADDR_VAR 0 9
18248: PUSH
18249: LD_VAR 0 9
18253: PPUSH
18254: LD_VAR 0 7
18258: PPUSH
18259: LD_VAR 0 6
18263: PUSH
18264: LD_VAR 0 7
18268: ARRAY
18269: PUSH
18270: LD_INT 1
18272: ARRAY
18273: PPUSH
18274: CALL_OW 1
18278: ST_TO_ADDR
18279: GO 18241
18281: POP
18282: POP
// result := tmp ;
18283: LD_ADDR_VAR 0 6
18287: PUSH
18288: LD_VAR 0 9
18292: ST_TO_ADDR
// end ; end ;
18293: LD_VAR 0 6
18297: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
18298: LD_INT 0
18300: PPUSH
18301: PPUSH
18302: PPUSH
18303: PPUSH
18304: PPUSH
18305: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
18306: LD_ADDR_VAR 0 5
18310: PUSH
18311: LD_INT 0
18313: PUSH
18314: LD_INT 0
18316: PUSH
18317: LD_INT 0
18319: PUSH
18320: EMPTY
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: ST_TO_ADDR
// if not x or not y then
18328: LD_VAR 0 2
18332: NOT
18333: PUSH
18334: LD_VAR 0 3
18338: NOT
18339: OR
18340: IFFALSE 18344
// exit ;
18342: GO 19990
// if not range then
18344: LD_VAR 0 4
18348: NOT
18349: IFFALSE 18359
// range := 10 ;
18351: LD_ADDR_VAR 0 4
18355: PUSH
18356: LD_INT 10
18358: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18359: LD_ADDR_VAR 0 8
18363: PUSH
18364: LD_INT 81
18366: PUSH
18367: LD_VAR 0 1
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: PUSH
18376: LD_INT 92
18378: PUSH
18379: LD_VAR 0 2
18383: PUSH
18384: LD_VAR 0 3
18388: PUSH
18389: LD_VAR 0 4
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: PUSH
18400: LD_INT 3
18402: PUSH
18403: LD_INT 21
18405: PUSH
18406: LD_INT 3
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: LIST
18421: PPUSH
18422: CALL_OW 69
18426: ST_TO_ADDR
// if not tmp then
18427: LD_VAR 0 8
18431: NOT
18432: IFFALSE 18436
// exit ;
18434: GO 19990
// for i in tmp do
18436: LD_ADDR_VAR 0 6
18440: PUSH
18441: LD_VAR 0 8
18445: PUSH
18446: FOR_IN
18447: IFFALSE 19965
// begin points := [ 0 , 0 , 0 ] ;
18449: LD_ADDR_VAR 0 9
18453: PUSH
18454: LD_INT 0
18456: PUSH
18457: LD_INT 0
18459: PUSH
18460: LD_INT 0
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: LIST
18467: ST_TO_ADDR
// bpoints := 1 ;
18468: LD_ADDR_VAR 0 10
18472: PUSH
18473: LD_INT 1
18475: ST_TO_ADDR
// case GetType ( i ) of unit_human :
18476: LD_VAR 0 6
18480: PPUSH
18481: CALL_OW 247
18485: PUSH
18486: LD_INT 1
18488: DOUBLE
18489: EQUAL
18490: IFTRUE 18494
18492: GO 19072
18494: POP
// begin if GetClass ( i ) = 1 then
18495: LD_VAR 0 6
18499: PPUSH
18500: CALL_OW 257
18504: PUSH
18505: LD_INT 1
18507: EQUAL
18508: IFFALSE 18529
// points := [ 10 , 5 , 3 ] ;
18510: LD_ADDR_VAR 0 9
18514: PUSH
18515: LD_INT 10
18517: PUSH
18518: LD_INT 5
18520: PUSH
18521: LD_INT 3
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: LIST
18528: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
18529: LD_VAR 0 6
18533: PPUSH
18534: CALL_OW 257
18538: PUSH
18539: LD_INT 2
18541: PUSH
18542: LD_INT 3
18544: PUSH
18545: LD_INT 4
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: LIST
18552: IN
18553: IFFALSE 18574
// points := [ 3 , 2 , 1 ] ;
18555: LD_ADDR_VAR 0 9
18559: PUSH
18560: LD_INT 3
18562: PUSH
18563: LD_INT 2
18565: PUSH
18566: LD_INT 1
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: LIST
18573: ST_TO_ADDR
// if GetClass ( i ) = 5 then
18574: LD_VAR 0 6
18578: PPUSH
18579: CALL_OW 257
18583: PUSH
18584: LD_INT 5
18586: EQUAL
18587: IFFALSE 18608
// points := [ 130 , 5 , 2 ] ;
18589: LD_ADDR_VAR 0 9
18593: PUSH
18594: LD_INT 130
18596: PUSH
18597: LD_INT 5
18599: PUSH
18600: LD_INT 2
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: LIST
18607: ST_TO_ADDR
// if GetClass ( i ) = 8 then
18608: LD_VAR 0 6
18612: PPUSH
18613: CALL_OW 257
18617: PUSH
18618: LD_INT 8
18620: EQUAL
18621: IFFALSE 18642
// points := [ 35 , 35 , 30 ] ;
18623: LD_ADDR_VAR 0 9
18627: PUSH
18628: LD_INT 35
18630: PUSH
18631: LD_INT 35
18633: PUSH
18634: LD_INT 30
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: LIST
18641: ST_TO_ADDR
// if GetClass ( i ) = 9 then
18642: LD_VAR 0 6
18646: PPUSH
18647: CALL_OW 257
18651: PUSH
18652: LD_INT 9
18654: EQUAL
18655: IFFALSE 18676
// points := [ 20 , 55 , 40 ] ;
18657: LD_ADDR_VAR 0 9
18661: PUSH
18662: LD_INT 20
18664: PUSH
18665: LD_INT 55
18667: PUSH
18668: LD_INT 40
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: LIST
18675: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
18676: LD_VAR 0 6
18680: PPUSH
18681: CALL_OW 257
18685: PUSH
18686: LD_INT 12
18688: PUSH
18689: LD_INT 16
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: IN
18696: IFFALSE 18717
// points := [ 5 , 3 , 2 ] ;
18698: LD_ADDR_VAR 0 9
18702: PUSH
18703: LD_INT 5
18705: PUSH
18706: LD_INT 3
18708: PUSH
18709: LD_INT 2
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: LIST
18716: ST_TO_ADDR
// if GetClass ( i ) = 17 then
18717: LD_VAR 0 6
18721: PPUSH
18722: CALL_OW 257
18726: PUSH
18727: LD_INT 17
18729: EQUAL
18730: IFFALSE 18751
// points := [ 100 , 50 , 75 ] ;
18732: LD_ADDR_VAR 0 9
18736: PUSH
18737: LD_INT 100
18739: PUSH
18740: LD_INT 50
18742: PUSH
18743: LD_INT 75
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: LIST
18750: ST_TO_ADDR
// if GetClass ( i ) = 15 then
18751: LD_VAR 0 6
18755: PPUSH
18756: CALL_OW 257
18760: PUSH
18761: LD_INT 15
18763: EQUAL
18764: IFFALSE 18785
// points := [ 10 , 5 , 3 ] ;
18766: LD_ADDR_VAR 0 9
18770: PUSH
18771: LD_INT 10
18773: PUSH
18774: LD_INT 5
18776: PUSH
18777: LD_INT 3
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: LIST
18784: ST_TO_ADDR
// if GetClass ( i ) = 14 then
18785: LD_VAR 0 6
18789: PPUSH
18790: CALL_OW 257
18794: PUSH
18795: LD_INT 14
18797: EQUAL
18798: IFFALSE 18819
// points := [ 10 , 0 , 0 ] ;
18800: LD_ADDR_VAR 0 9
18804: PUSH
18805: LD_INT 10
18807: PUSH
18808: LD_INT 0
18810: PUSH
18811: LD_INT 0
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: LIST
18818: ST_TO_ADDR
// if GetClass ( i ) = 11 then
18819: LD_VAR 0 6
18823: PPUSH
18824: CALL_OW 257
18828: PUSH
18829: LD_INT 11
18831: EQUAL
18832: IFFALSE 18853
// points := [ 30 , 10 , 5 ] ;
18834: LD_ADDR_VAR 0 9
18838: PUSH
18839: LD_INT 30
18841: PUSH
18842: LD_INT 10
18844: PUSH
18845: LD_INT 5
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: LIST
18852: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
18853: LD_VAR 0 1
18857: PPUSH
18858: LD_INT 5
18860: PPUSH
18861: CALL_OW 321
18865: PUSH
18866: LD_INT 2
18868: EQUAL
18869: IFFALSE 18886
// bpoints := bpoints * 1.8 ;
18871: LD_ADDR_VAR 0 10
18875: PUSH
18876: LD_VAR 0 10
18880: PUSH
18881: LD_REAL  1.80000000000000E+0000
18884: MUL
18885: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
18886: LD_VAR 0 6
18890: PPUSH
18891: CALL_OW 257
18895: PUSH
18896: LD_INT 1
18898: PUSH
18899: LD_INT 2
18901: PUSH
18902: LD_INT 3
18904: PUSH
18905: LD_INT 4
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: IN
18914: PUSH
18915: LD_VAR 0 1
18919: PPUSH
18920: LD_INT 51
18922: PPUSH
18923: CALL_OW 321
18927: PUSH
18928: LD_INT 2
18930: EQUAL
18931: AND
18932: IFFALSE 18949
// bpoints := bpoints * 1.2 ;
18934: LD_ADDR_VAR 0 10
18938: PUSH
18939: LD_VAR 0 10
18943: PUSH
18944: LD_REAL  1.20000000000000E+0000
18947: MUL
18948: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
18949: LD_VAR 0 6
18953: PPUSH
18954: CALL_OW 257
18958: PUSH
18959: LD_INT 5
18961: PUSH
18962: LD_INT 7
18964: PUSH
18965: LD_INT 9
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: LIST
18972: IN
18973: PUSH
18974: LD_VAR 0 1
18978: PPUSH
18979: LD_INT 52
18981: PPUSH
18982: CALL_OW 321
18986: PUSH
18987: LD_INT 2
18989: EQUAL
18990: AND
18991: IFFALSE 19008
// bpoints := bpoints * 1.5 ;
18993: LD_ADDR_VAR 0 10
18997: PUSH
18998: LD_VAR 0 10
19002: PUSH
19003: LD_REAL  1.50000000000000E+0000
19006: MUL
19007: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
19008: LD_VAR 0 1
19012: PPUSH
19013: LD_INT 66
19015: PPUSH
19016: CALL_OW 321
19020: PUSH
19021: LD_INT 2
19023: EQUAL
19024: IFFALSE 19041
// bpoints := bpoints * 1.1 ;
19026: LD_ADDR_VAR 0 10
19030: PUSH
19031: LD_VAR 0 10
19035: PUSH
19036: LD_REAL  1.10000000000000E+0000
19039: MUL
19040: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
19041: LD_ADDR_VAR 0 10
19045: PUSH
19046: LD_VAR 0 10
19050: PUSH
19051: LD_VAR 0 6
19055: PPUSH
19056: LD_INT 1
19058: PPUSH
19059: CALL_OW 259
19063: PUSH
19064: LD_REAL  1.15000000000000E+0000
19067: MUL
19068: MUL
19069: ST_TO_ADDR
// end ; unit_vehicle :
19070: GO 19894
19072: LD_INT 2
19074: DOUBLE
19075: EQUAL
19076: IFTRUE 19080
19078: GO 19882
19080: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
19081: LD_VAR 0 6
19085: PPUSH
19086: CALL_OW 264
19090: PUSH
19091: LD_INT 2
19093: PUSH
19094: LD_INT 42
19096: PUSH
19097: LD_INT 24
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: LIST
19104: IN
19105: IFFALSE 19126
// points := [ 25 , 5 , 3 ] ;
19107: LD_ADDR_VAR 0 9
19111: PUSH
19112: LD_INT 25
19114: PUSH
19115: LD_INT 5
19117: PUSH
19118: LD_INT 3
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: LIST
19125: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
19126: LD_VAR 0 6
19130: PPUSH
19131: CALL_OW 264
19135: PUSH
19136: LD_INT 4
19138: PUSH
19139: LD_INT 43
19141: PUSH
19142: LD_INT 25
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: LIST
19149: IN
19150: IFFALSE 19171
// points := [ 40 , 15 , 5 ] ;
19152: LD_ADDR_VAR 0 9
19156: PUSH
19157: LD_INT 40
19159: PUSH
19160: LD_INT 15
19162: PUSH
19163: LD_INT 5
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: LIST
19170: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
19171: LD_VAR 0 6
19175: PPUSH
19176: CALL_OW 264
19180: PUSH
19181: LD_INT 3
19183: PUSH
19184: LD_INT 23
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: IN
19191: IFFALSE 19212
// points := [ 7 , 25 , 8 ] ;
19193: LD_ADDR_VAR 0 9
19197: PUSH
19198: LD_INT 7
19200: PUSH
19201: LD_INT 25
19203: PUSH
19204: LD_INT 8
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: LIST
19211: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
19212: LD_VAR 0 6
19216: PPUSH
19217: CALL_OW 264
19221: PUSH
19222: LD_INT 5
19224: PUSH
19225: LD_INT 27
19227: PUSH
19228: LD_INT 44
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: LIST
19235: IN
19236: IFFALSE 19257
// points := [ 14 , 50 , 16 ] ;
19238: LD_ADDR_VAR 0 9
19242: PUSH
19243: LD_INT 14
19245: PUSH
19246: LD_INT 50
19248: PUSH
19249: LD_INT 16
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: LIST
19256: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
19257: LD_VAR 0 6
19261: PPUSH
19262: CALL_OW 264
19266: PUSH
19267: LD_INT 6
19269: PUSH
19270: LD_INT 46
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: IN
19277: IFFALSE 19298
// points := [ 32 , 120 , 70 ] ;
19279: LD_ADDR_VAR 0 9
19283: PUSH
19284: LD_INT 32
19286: PUSH
19287: LD_INT 120
19289: PUSH
19290: LD_INT 70
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: LIST
19297: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
19298: LD_VAR 0 6
19302: PPUSH
19303: CALL_OW 264
19307: PUSH
19308: LD_INT 7
19310: PUSH
19311: LD_INT 28
19313: PUSH
19314: LD_INT 45
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: LIST
19321: IN
19322: IFFALSE 19343
// points := [ 35 , 20 , 45 ] ;
19324: LD_ADDR_VAR 0 9
19328: PUSH
19329: LD_INT 35
19331: PUSH
19332: LD_INT 20
19334: PUSH
19335: LD_INT 45
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: LIST
19342: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
19343: LD_VAR 0 6
19347: PPUSH
19348: CALL_OW 264
19352: PUSH
19353: LD_INT 47
19355: PUSH
19356: EMPTY
19357: LIST
19358: IN
19359: IFFALSE 19380
// points := [ 67 , 45 , 75 ] ;
19361: LD_ADDR_VAR 0 9
19365: PUSH
19366: LD_INT 67
19368: PUSH
19369: LD_INT 45
19371: PUSH
19372: LD_INT 75
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: LIST
19379: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
19380: LD_VAR 0 6
19384: PPUSH
19385: CALL_OW 264
19389: PUSH
19390: LD_INT 26
19392: PUSH
19393: EMPTY
19394: LIST
19395: IN
19396: IFFALSE 19417
// points := [ 120 , 30 , 80 ] ;
19398: LD_ADDR_VAR 0 9
19402: PUSH
19403: LD_INT 120
19405: PUSH
19406: LD_INT 30
19408: PUSH
19409: LD_INT 80
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: LIST
19416: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
19417: LD_VAR 0 6
19421: PPUSH
19422: CALL_OW 264
19426: PUSH
19427: LD_INT 22
19429: PUSH
19430: EMPTY
19431: LIST
19432: IN
19433: IFFALSE 19454
// points := [ 40 , 1 , 1 ] ;
19435: LD_ADDR_VAR 0 9
19439: PUSH
19440: LD_INT 40
19442: PUSH
19443: LD_INT 1
19445: PUSH
19446: LD_INT 1
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: LIST
19453: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
19454: LD_VAR 0 6
19458: PPUSH
19459: CALL_OW 264
19463: PUSH
19464: LD_INT 29
19466: PUSH
19467: EMPTY
19468: LIST
19469: IN
19470: IFFALSE 19491
// points := [ 70 , 200 , 400 ] ;
19472: LD_ADDR_VAR 0 9
19476: PUSH
19477: LD_INT 70
19479: PUSH
19480: LD_INT 200
19482: PUSH
19483: LD_INT 400
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: LIST
19490: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
19491: LD_VAR 0 6
19495: PPUSH
19496: CALL_OW 264
19500: PUSH
19501: LD_INT 14
19503: PUSH
19504: LD_INT 53
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: IN
19511: IFFALSE 19532
// points := [ 40 , 10 , 20 ] ;
19513: LD_ADDR_VAR 0 9
19517: PUSH
19518: LD_INT 40
19520: PUSH
19521: LD_INT 10
19523: PUSH
19524: LD_INT 20
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: LIST
19531: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
19532: LD_VAR 0 6
19536: PPUSH
19537: CALL_OW 264
19541: PUSH
19542: LD_INT 9
19544: PUSH
19545: EMPTY
19546: LIST
19547: IN
19548: IFFALSE 19569
// points := [ 5 , 70 , 20 ] ;
19550: LD_ADDR_VAR 0 9
19554: PUSH
19555: LD_INT 5
19557: PUSH
19558: LD_INT 70
19560: PUSH
19561: LD_INT 20
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: LIST
19568: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
19569: LD_VAR 0 6
19573: PPUSH
19574: CALL_OW 264
19578: PUSH
19579: LD_INT 10
19581: PUSH
19582: EMPTY
19583: LIST
19584: IN
19585: IFFALSE 19606
// points := [ 35 , 110 , 70 ] ;
19587: LD_ADDR_VAR 0 9
19591: PUSH
19592: LD_INT 35
19594: PUSH
19595: LD_INT 110
19597: PUSH
19598: LD_INT 70
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: LIST
19605: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
19606: LD_VAR 0 6
19610: PPUSH
19611: CALL_OW 265
19615: PUSH
19616: LD_INT 25
19618: EQUAL
19619: IFFALSE 19640
// points := [ 80 , 65 , 100 ] ;
19621: LD_ADDR_VAR 0 9
19625: PUSH
19626: LD_INT 80
19628: PUSH
19629: LD_INT 65
19631: PUSH
19632: LD_INT 100
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: LIST
19639: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
19640: LD_VAR 0 6
19644: PPUSH
19645: CALL_OW 263
19649: PUSH
19650: LD_INT 1
19652: EQUAL
19653: IFFALSE 19688
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
19655: LD_ADDR_VAR 0 10
19659: PUSH
19660: LD_VAR 0 10
19664: PUSH
19665: LD_VAR 0 6
19669: PPUSH
19670: CALL_OW 311
19674: PPUSH
19675: LD_INT 3
19677: PPUSH
19678: CALL_OW 259
19682: PUSH
19683: LD_INT 4
19685: MUL
19686: MUL
19687: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
19688: LD_VAR 0 6
19692: PPUSH
19693: CALL_OW 263
19697: PUSH
19698: LD_INT 2
19700: EQUAL
19701: IFFALSE 19752
// begin j := IsControledBy ( i ) ;
19703: LD_ADDR_VAR 0 7
19707: PUSH
19708: LD_VAR 0 6
19712: PPUSH
19713: CALL_OW 312
19717: ST_TO_ADDR
// if j then
19718: LD_VAR 0 7
19722: IFFALSE 19752
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
19724: LD_ADDR_VAR 0 10
19728: PUSH
19729: LD_VAR 0 10
19733: PUSH
19734: LD_VAR 0 7
19738: PPUSH
19739: LD_INT 3
19741: PPUSH
19742: CALL_OW 259
19746: PUSH
19747: LD_INT 3
19749: MUL
19750: MUL
19751: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
19752: LD_VAR 0 6
19756: PPUSH
19757: CALL_OW 264
19761: PUSH
19762: LD_INT 5
19764: PUSH
19765: LD_INT 6
19767: PUSH
19768: LD_INT 46
19770: PUSH
19771: LD_INT 44
19773: PUSH
19774: LD_INT 47
19776: PUSH
19777: LD_INT 45
19779: PUSH
19780: LD_INT 28
19782: PUSH
19783: LD_INT 7
19785: PUSH
19786: LD_INT 27
19788: PUSH
19789: LD_INT 29
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: IN
19804: PUSH
19805: LD_VAR 0 1
19809: PPUSH
19810: LD_INT 52
19812: PPUSH
19813: CALL_OW 321
19817: PUSH
19818: LD_INT 2
19820: EQUAL
19821: AND
19822: IFFALSE 19839
// bpoints := bpoints * 1.2 ;
19824: LD_ADDR_VAR 0 10
19828: PUSH
19829: LD_VAR 0 10
19833: PUSH
19834: LD_REAL  1.20000000000000E+0000
19837: MUL
19838: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
19839: LD_VAR 0 6
19843: PPUSH
19844: CALL_OW 264
19848: PUSH
19849: LD_INT 6
19851: PUSH
19852: LD_INT 46
19854: PUSH
19855: LD_INT 47
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: LIST
19862: IN
19863: IFFALSE 19880
// bpoints := bpoints * 1.2 ;
19865: LD_ADDR_VAR 0 10
19869: PUSH
19870: LD_VAR 0 10
19874: PUSH
19875: LD_REAL  1.20000000000000E+0000
19878: MUL
19879: ST_TO_ADDR
// end ; unit_building :
19880: GO 19894
19882: LD_INT 3
19884: DOUBLE
19885: EQUAL
19886: IFTRUE 19890
19888: GO 19893
19890: POP
// ; end ;
19891: GO 19894
19893: POP
// for j = 1 to 3 do
19894: LD_ADDR_VAR 0 7
19898: PUSH
19899: DOUBLE
19900: LD_INT 1
19902: DEC
19903: ST_TO_ADDR
19904: LD_INT 3
19906: PUSH
19907: FOR_TO
19908: IFFALSE 19961
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
19910: LD_ADDR_VAR 0 5
19914: PUSH
19915: LD_VAR 0 5
19919: PPUSH
19920: LD_VAR 0 7
19924: PPUSH
19925: LD_VAR 0 5
19929: PUSH
19930: LD_VAR 0 7
19934: ARRAY
19935: PUSH
19936: LD_VAR 0 9
19940: PUSH
19941: LD_VAR 0 7
19945: ARRAY
19946: PUSH
19947: LD_VAR 0 10
19951: MUL
19952: PLUS
19953: PPUSH
19954: CALL_OW 1
19958: ST_TO_ADDR
19959: GO 19907
19961: POP
19962: POP
// end ;
19963: GO 18446
19965: POP
19966: POP
// result := Replace ( result , 4 , tmp ) ;
19967: LD_ADDR_VAR 0 5
19971: PUSH
19972: LD_VAR 0 5
19976: PPUSH
19977: LD_INT 4
19979: PPUSH
19980: LD_VAR 0 8
19984: PPUSH
19985: CALL_OW 1
19989: ST_TO_ADDR
// end ;
19990: LD_VAR 0 5
19994: RET
// export function DangerAtRange ( unit , range ) ; begin
19995: LD_INT 0
19997: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
19998: LD_ADDR_VAR 0 3
20002: PUSH
20003: LD_VAR 0 1
20007: PPUSH
20008: CALL_OW 255
20012: PPUSH
20013: LD_VAR 0 1
20017: PPUSH
20018: CALL_OW 250
20022: PPUSH
20023: LD_VAR 0 1
20027: PPUSH
20028: CALL_OW 251
20032: PPUSH
20033: LD_VAR 0 2
20037: PPUSH
20038: CALL 18298 0 4
20042: ST_TO_ADDR
// end ;
20043: LD_VAR 0 3
20047: RET
// export function DangerInArea ( side , area ) ; begin
20048: LD_INT 0
20050: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
20051: LD_ADDR_VAR 0 3
20055: PUSH
20056: LD_VAR 0 2
20060: PPUSH
20061: LD_INT 81
20063: PUSH
20064: LD_VAR 0 1
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PPUSH
20073: CALL_OW 70
20077: ST_TO_ADDR
// end ;
20078: LD_VAR 0 3
20082: RET
// export function IsExtension ( b ) ; begin
20083: LD_INT 0
20085: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
20086: LD_ADDR_VAR 0 2
20090: PUSH
20091: LD_VAR 0 1
20095: PUSH
20096: LD_INT 23
20098: PUSH
20099: LD_INT 20
20101: PUSH
20102: LD_INT 22
20104: PUSH
20105: LD_INT 17
20107: PUSH
20108: LD_INT 24
20110: PUSH
20111: LD_INT 21
20113: PUSH
20114: LD_INT 19
20116: PUSH
20117: LD_INT 16
20119: PUSH
20120: LD_INT 25
20122: PUSH
20123: LD_INT 18
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: IN
20138: ST_TO_ADDR
// end ;
20139: LD_VAR 0 2
20143: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
20144: LD_INT 0
20146: PPUSH
20147: PPUSH
20148: PPUSH
// result := [ ] ;
20149: LD_ADDR_VAR 0 3
20153: PUSH
20154: EMPTY
20155: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
20156: LD_ADDR_VAR 0 4
20160: PUSH
20161: LD_VAR 0 2
20165: PPUSH
20166: LD_INT 21
20168: PUSH
20169: LD_INT 3
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: PPUSH
20176: CALL_OW 70
20180: ST_TO_ADDR
// if not tmp then
20181: LD_VAR 0 4
20185: NOT
20186: IFFALSE 20190
// exit ;
20188: GO 20248
// for i in tmp do
20190: LD_ADDR_VAR 0 5
20194: PUSH
20195: LD_VAR 0 4
20199: PUSH
20200: FOR_IN
20201: IFFALSE 20236
// if GetBase ( i ) <> base then
20203: LD_VAR 0 5
20207: PPUSH
20208: CALL_OW 274
20212: PUSH
20213: LD_VAR 0 1
20217: NONEQUAL
20218: IFFALSE 20234
// ComLinkToBase ( base , i ) ;
20220: LD_VAR 0 1
20224: PPUSH
20225: LD_VAR 0 5
20229: PPUSH
20230: CALL_OW 169
20234: GO 20200
20236: POP
20237: POP
// result := tmp ;
20238: LD_ADDR_VAR 0 3
20242: PUSH
20243: LD_VAR 0 4
20247: ST_TO_ADDR
// end ;
20248: LD_VAR 0 3
20252: RET
// export function ComComplete ( unit , b ) ; var i ; begin
20253: LD_INT 0
20255: PPUSH
20256: PPUSH
// if BuildingStatus ( b ) = bs_build then
20257: LD_VAR 0 2
20261: PPUSH
20262: CALL_OW 461
20266: PUSH
20267: LD_INT 1
20269: EQUAL
20270: IFFALSE 20330
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
20272: LD_VAR 0 1
20276: PPUSH
20277: LD_STRING h
20279: PUSH
20280: LD_VAR 0 2
20284: PPUSH
20285: CALL_OW 250
20289: PUSH
20290: LD_VAR 0 2
20294: PPUSH
20295: CALL_OW 251
20299: PUSH
20300: LD_VAR 0 2
20304: PUSH
20305: LD_INT 0
20307: PUSH
20308: LD_INT 0
20310: PUSH
20311: LD_INT 0
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: PUSH
20323: EMPTY
20324: LIST
20325: PPUSH
20326: CALL_OW 446
// end ;
20330: LD_VAR 0 3
20334: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
20335: LD_INT 0
20337: PPUSH
20338: PPUSH
20339: PPUSH
20340: PPUSH
20341: PPUSH
20342: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
20343: LD_VAR 0 1
20347: NOT
20348: PUSH
20349: LD_VAR 0 1
20353: PPUSH
20354: CALL_OW 263
20358: PUSH
20359: LD_INT 2
20361: EQUAL
20362: NOT
20363: OR
20364: IFFALSE 20368
// exit ;
20366: GO 20684
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
20368: LD_ADDR_VAR 0 6
20372: PUSH
20373: LD_INT 22
20375: PUSH
20376: LD_VAR 0 1
20380: PPUSH
20381: CALL_OW 255
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 2
20392: PUSH
20393: LD_INT 30
20395: PUSH
20396: LD_INT 36
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 34
20405: PUSH
20406: LD_INT 31
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: LIST
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PPUSH
20422: CALL_OW 69
20426: ST_TO_ADDR
// if not tmp then
20427: LD_VAR 0 6
20431: NOT
20432: IFFALSE 20436
// exit ;
20434: GO 20684
// result := [ ] ;
20436: LD_ADDR_VAR 0 2
20440: PUSH
20441: EMPTY
20442: ST_TO_ADDR
// for i in tmp do
20443: LD_ADDR_VAR 0 3
20447: PUSH
20448: LD_VAR 0 6
20452: PUSH
20453: FOR_IN
20454: IFFALSE 20525
// begin t := UnitsInside ( i ) ;
20456: LD_ADDR_VAR 0 4
20460: PUSH
20461: LD_VAR 0 3
20465: PPUSH
20466: CALL_OW 313
20470: ST_TO_ADDR
// if t then
20471: LD_VAR 0 4
20475: IFFALSE 20523
// for j in t do
20477: LD_ADDR_VAR 0 7
20481: PUSH
20482: LD_VAR 0 4
20486: PUSH
20487: FOR_IN
20488: IFFALSE 20521
// result := Insert ( result , result + 1 , j ) ;
20490: LD_ADDR_VAR 0 2
20494: PUSH
20495: LD_VAR 0 2
20499: PPUSH
20500: LD_VAR 0 2
20504: PUSH
20505: LD_INT 1
20507: PLUS
20508: PPUSH
20509: LD_VAR 0 7
20513: PPUSH
20514: CALL_OW 2
20518: ST_TO_ADDR
20519: GO 20487
20521: POP
20522: POP
// end ;
20523: GO 20453
20525: POP
20526: POP
// if not result then
20527: LD_VAR 0 2
20531: NOT
20532: IFFALSE 20536
// exit ;
20534: GO 20684
// mech := result [ 1 ] ;
20536: LD_ADDR_VAR 0 5
20540: PUSH
20541: LD_VAR 0 2
20545: PUSH
20546: LD_INT 1
20548: ARRAY
20549: ST_TO_ADDR
// if result > 1 then
20550: LD_VAR 0 2
20554: PUSH
20555: LD_INT 1
20557: GREATER
20558: IFFALSE 20670
// for i = 2 to result do
20560: LD_ADDR_VAR 0 3
20564: PUSH
20565: DOUBLE
20566: LD_INT 2
20568: DEC
20569: ST_TO_ADDR
20570: LD_VAR 0 2
20574: PUSH
20575: FOR_TO
20576: IFFALSE 20668
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
20578: LD_ADDR_VAR 0 4
20582: PUSH
20583: LD_VAR 0 2
20587: PUSH
20588: LD_VAR 0 3
20592: ARRAY
20593: PPUSH
20594: LD_INT 3
20596: PPUSH
20597: CALL_OW 259
20601: PUSH
20602: LD_VAR 0 2
20606: PUSH
20607: LD_VAR 0 3
20611: ARRAY
20612: PPUSH
20613: CALL_OW 432
20617: MINUS
20618: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
20619: LD_VAR 0 4
20623: PUSH
20624: LD_VAR 0 5
20628: PPUSH
20629: LD_INT 3
20631: PPUSH
20632: CALL_OW 259
20636: PUSH
20637: LD_VAR 0 5
20641: PPUSH
20642: CALL_OW 432
20646: MINUS
20647: GREATEREQUAL
20648: IFFALSE 20666
// mech := result [ i ] ;
20650: LD_ADDR_VAR 0 5
20654: PUSH
20655: LD_VAR 0 2
20659: PUSH
20660: LD_VAR 0 3
20664: ARRAY
20665: ST_TO_ADDR
// end ;
20666: GO 20575
20668: POP
20669: POP
// ComLinkTo ( vehicle , mech ) ;
20670: LD_VAR 0 1
20674: PPUSH
20675: LD_VAR 0 5
20679: PPUSH
20680: CALL_OW 135
// end ;
20684: LD_VAR 0 2
20688: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
20689: LD_INT 0
20691: PPUSH
20692: PPUSH
20693: PPUSH
20694: PPUSH
20695: PPUSH
20696: PPUSH
20697: PPUSH
20698: PPUSH
20699: PPUSH
20700: PPUSH
20701: PPUSH
20702: PPUSH
20703: PPUSH
// result := [ ] ;
20704: LD_ADDR_VAR 0 7
20708: PUSH
20709: EMPTY
20710: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
20711: LD_VAR 0 1
20715: PPUSH
20716: CALL_OW 266
20720: PUSH
20721: LD_INT 0
20723: PUSH
20724: LD_INT 1
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: IN
20731: NOT
20732: IFFALSE 20736
// exit ;
20734: GO 22367
// if name then
20736: LD_VAR 0 3
20740: IFFALSE 20756
// SetBName ( base_dep , name ) ;
20742: LD_VAR 0 1
20746: PPUSH
20747: LD_VAR 0 3
20751: PPUSH
20752: CALL_OW 500
// base := GetBase ( base_dep ) ;
20756: LD_ADDR_VAR 0 15
20760: PUSH
20761: LD_VAR 0 1
20765: PPUSH
20766: CALL_OW 274
20770: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
20771: LD_ADDR_VAR 0 16
20775: PUSH
20776: LD_VAR 0 1
20780: PPUSH
20781: CALL_OW 255
20785: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
20786: LD_ADDR_VAR 0 17
20790: PUSH
20791: LD_VAR 0 1
20795: PPUSH
20796: CALL_OW 248
20800: ST_TO_ADDR
// if sources then
20801: LD_VAR 0 5
20805: IFFALSE 20852
// for i = 1 to 3 do
20807: LD_ADDR_VAR 0 8
20811: PUSH
20812: DOUBLE
20813: LD_INT 1
20815: DEC
20816: ST_TO_ADDR
20817: LD_INT 3
20819: PUSH
20820: FOR_TO
20821: IFFALSE 20850
// AddResourceType ( base , i , sources [ i ] ) ;
20823: LD_VAR 0 15
20827: PPUSH
20828: LD_VAR 0 8
20832: PPUSH
20833: LD_VAR 0 5
20837: PUSH
20838: LD_VAR 0 8
20842: ARRAY
20843: PPUSH
20844: CALL_OW 276
20848: GO 20820
20850: POP
20851: POP
// buildings := GetBaseBuildings ( base , area ) ;
20852: LD_ADDR_VAR 0 18
20856: PUSH
20857: LD_VAR 0 15
20861: PPUSH
20862: LD_VAR 0 2
20866: PPUSH
20867: CALL 20144 0 2
20871: ST_TO_ADDR
// InitHc ;
20872: CALL_OW 19
// InitUc ;
20876: CALL_OW 18
// uc_side := side ;
20880: LD_ADDR_OWVAR 20
20884: PUSH
20885: LD_VAR 0 16
20889: ST_TO_ADDR
// uc_nation := nation ;
20890: LD_ADDR_OWVAR 21
20894: PUSH
20895: LD_VAR 0 17
20899: ST_TO_ADDR
// if buildings then
20900: LD_VAR 0 18
20904: IFFALSE 22226
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
20906: LD_ADDR_VAR 0 19
20910: PUSH
20911: LD_VAR 0 18
20915: PPUSH
20916: LD_INT 2
20918: PUSH
20919: LD_INT 30
20921: PUSH
20922: LD_INT 29
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PUSH
20929: LD_INT 30
20931: PUSH
20932: LD_INT 30
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: LIST
20943: PPUSH
20944: CALL_OW 72
20948: ST_TO_ADDR
// if tmp then
20949: LD_VAR 0 19
20953: IFFALSE 21001
// for i in tmp do
20955: LD_ADDR_VAR 0 8
20959: PUSH
20960: LD_VAR 0 19
20964: PUSH
20965: FOR_IN
20966: IFFALSE 20999
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
20968: LD_VAR 0 8
20972: PPUSH
20973: CALL_OW 250
20977: PPUSH
20978: LD_VAR 0 8
20982: PPUSH
20983: CALL_OW 251
20987: PPUSH
20988: LD_VAR 0 16
20992: PPUSH
20993: CALL_OW 441
20997: GO 20965
20999: POP
21000: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
21001: LD_VAR 0 18
21005: PPUSH
21006: LD_INT 2
21008: PUSH
21009: LD_INT 30
21011: PUSH
21012: LD_INT 32
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: PUSH
21019: LD_INT 30
21021: PUSH
21022: LD_INT 33
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: LIST
21033: PPUSH
21034: CALL_OW 72
21038: IFFALSE 21126
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
21040: LD_ADDR_VAR 0 8
21044: PUSH
21045: LD_VAR 0 18
21049: PPUSH
21050: LD_INT 2
21052: PUSH
21053: LD_INT 30
21055: PUSH
21056: LD_INT 32
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 30
21065: PUSH
21066: LD_INT 33
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: LIST
21077: PPUSH
21078: CALL_OW 72
21082: PUSH
21083: FOR_IN
21084: IFFALSE 21124
// begin if not GetBWeapon ( i ) then
21086: LD_VAR 0 8
21090: PPUSH
21091: CALL_OW 269
21095: NOT
21096: IFFALSE 21122
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
21098: LD_VAR 0 8
21102: PPUSH
21103: LD_VAR 0 8
21107: PPUSH
21108: LD_VAR 0 2
21112: PPUSH
21113: CALL 22372 0 2
21117: PPUSH
21118: CALL_OW 431
// end ;
21122: GO 21083
21124: POP
21125: POP
// end ; for i = 1 to personel do
21126: LD_ADDR_VAR 0 8
21130: PUSH
21131: DOUBLE
21132: LD_INT 1
21134: DEC
21135: ST_TO_ADDR
21136: LD_VAR 0 6
21140: PUSH
21141: FOR_TO
21142: IFFALSE 22206
// begin if i > 4 then
21144: LD_VAR 0 8
21148: PUSH
21149: LD_INT 4
21151: GREATER
21152: IFFALSE 21156
// break ;
21154: GO 22206
// case i of 1 :
21156: LD_VAR 0 8
21160: PUSH
21161: LD_INT 1
21163: DOUBLE
21164: EQUAL
21165: IFTRUE 21169
21167: GO 21249
21169: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
21170: LD_ADDR_VAR 0 12
21174: PUSH
21175: LD_VAR 0 18
21179: PPUSH
21180: LD_INT 22
21182: PUSH
21183: LD_VAR 0 16
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: LD_INT 58
21194: PUSH
21195: EMPTY
21196: LIST
21197: PUSH
21198: LD_INT 2
21200: PUSH
21201: LD_INT 30
21203: PUSH
21204: LD_INT 32
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: LD_INT 30
21213: PUSH
21214: LD_INT 4
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 30
21223: PUSH
21224: LD_INT 5
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: LIST
21241: PPUSH
21242: CALL_OW 72
21246: ST_TO_ADDR
21247: GO 21471
21249: LD_INT 2
21251: DOUBLE
21252: EQUAL
21253: IFTRUE 21257
21255: GO 21319
21257: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
21258: LD_ADDR_VAR 0 12
21262: PUSH
21263: LD_VAR 0 18
21267: PPUSH
21268: LD_INT 22
21270: PUSH
21271: LD_VAR 0 16
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 2
21282: PUSH
21283: LD_INT 30
21285: PUSH
21286: LD_INT 0
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: PUSH
21293: LD_INT 30
21295: PUSH
21296: LD_INT 1
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: LIST
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PPUSH
21312: CALL_OW 72
21316: ST_TO_ADDR
21317: GO 21471
21319: LD_INT 3
21321: DOUBLE
21322: EQUAL
21323: IFTRUE 21327
21325: GO 21389
21327: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
21328: LD_ADDR_VAR 0 12
21332: PUSH
21333: LD_VAR 0 18
21337: PPUSH
21338: LD_INT 22
21340: PUSH
21341: LD_VAR 0 16
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PUSH
21350: LD_INT 2
21352: PUSH
21353: LD_INT 30
21355: PUSH
21356: LD_INT 2
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: LD_INT 30
21365: PUSH
21366: LD_INT 3
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: LIST
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PPUSH
21382: CALL_OW 72
21386: ST_TO_ADDR
21387: GO 21471
21389: LD_INT 4
21391: DOUBLE
21392: EQUAL
21393: IFTRUE 21397
21395: GO 21470
21397: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
21398: LD_ADDR_VAR 0 12
21402: PUSH
21403: LD_VAR 0 18
21407: PPUSH
21408: LD_INT 22
21410: PUSH
21411: LD_VAR 0 16
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: PUSH
21420: LD_INT 2
21422: PUSH
21423: LD_INT 30
21425: PUSH
21426: LD_INT 6
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 30
21435: PUSH
21436: LD_INT 7
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: LD_INT 30
21445: PUSH
21446: LD_INT 8
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PPUSH
21463: CALL_OW 72
21467: ST_TO_ADDR
21468: GO 21471
21470: POP
// if i = 1 then
21471: LD_VAR 0 8
21475: PUSH
21476: LD_INT 1
21478: EQUAL
21479: IFFALSE 21590
// begin tmp := [ ] ;
21481: LD_ADDR_VAR 0 19
21485: PUSH
21486: EMPTY
21487: ST_TO_ADDR
// for j in f do
21488: LD_ADDR_VAR 0 9
21492: PUSH
21493: LD_VAR 0 12
21497: PUSH
21498: FOR_IN
21499: IFFALSE 21572
// if GetBType ( j ) = b_bunker then
21501: LD_VAR 0 9
21505: PPUSH
21506: CALL_OW 266
21510: PUSH
21511: LD_INT 32
21513: EQUAL
21514: IFFALSE 21541
// tmp := Insert ( tmp , 1 , j ) else
21516: LD_ADDR_VAR 0 19
21520: PUSH
21521: LD_VAR 0 19
21525: PPUSH
21526: LD_INT 1
21528: PPUSH
21529: LD_VAR 0 9
21533: PPUSH
21534: CALL_OW 2
21538: ST_TO_ADDR
21539: GO 21570
// tmp := Insert ( tmp , tmp + 1 , j ) ;
21541: LD_ADDR_VAR 0 19
21545: PUSH
21546: LD_VAR 0 19
21550: PPUSH
21551: LD_VAR 0 19
21555: PUSH
21556: LD_INT 1
21558: PLUS
21559: PPUSH
21560: LD_VAR 0 9
21564: PPUSH
21565: CALL_OW 2
21569: ST_TO_ADDR
21570: GO 21498
21572: POP
21573: POP
// if tmp then
21574: LD_VAR 0 19
21578: IFFALSE 21590
// f := tmp ;
21580: LD_ADDR_VAR 0 12
21584: PUSH
21585: LD_VAR 0 19
21589: ST_TO_ADDR
// end ; x := personel [ i ] ;
21590: LD_ADDR_VAR 0 13
21594: PUSH
21595: LD_VAR 0 6
21599: PUSH
21600: LD_VAR 0 8
21604: ARRAY
21605: ST_TO_ADDR
// if x = - 1 then
21606: LD_VAR 0 13
21610: PUSH
21611: LD_INT 1
21613: NEG
21614: EQUAL
21615: IFFALSE 21824
// begin for j in f do
21617: LD_ADDR_VAR 0 9
21621: PUSH
21622: LD_VAR 0 12
21626: PUSH
21627: FOR_IN
21628: IFFALSE 21820
// repeat InitHc ;
21630: CALL_OW 19
// if GetBType ( j ) = b_barracks then
21634: LD_VAR 0 9
21638: PPUSH
21639: CALL_OW 266
21643: PUSH
21644: LD_INT 5
21646: EQUAL
21647: IFFALSE 21717
// begin if UnitsInside ( j ) < 3 then
21649: LD_VAR 0 9
21653: PPUSH
21654: CALL_OW 313
21658: PUSH
21659: LD_INT 3
21661: LESS
21662: IFFALSE 21698
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21664: LD_INT 0
21666: PPUSH
21667: LD_INT 5
21669: PUSH
21670: LD_INT 8
21672: PUSH
21673: LD_INT 9
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: LIST
21680: PUSH
21681: LD_VAR 0 17
21685: ARRAY
21686: PPUSH
21687: LD_VAR 0 4
21691: PPUSH
21692: CALL_OW 380
21696: GO 21715
// PrepareHuman ( false , i , skill ) ;
21698: LD_INT 0
21700: PPUSH
21701: LD_VAR 0 8
21705: PPUSH
21706: LD_VAR 0 4
21710: PPUSH
21711: CALL_OW 380
// end else
21715: GO 21734
// PrepareHuman ( false , i , skill ) ;
21717: LD_INT 0
21719: PPUSH
21720: LD_VAR 0 8
21724: PPUSH
21725: LD_VAR 0 4
21729: PPUSH
21730: CALL_OW 380
// un := CreateHuman ;
21734: LD_ADDR_VAR 0 14
21738: PUSH
21739: CALL_OW 44
21743: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21744: LD_ADDR_VAR 0 7
21748: PUSH
21749: LD_VAR 0 7
21753: PPUSH
21754: LD_INT 1
21756: PPUSH
21757: LD_VAR 0 14
21761: PPUSH
21762: CALL_OW 2
21766: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
21767: LD_VAR 0 14
21771: PPUSH
21772: LD_VAR 0 9
21776: PPUSH
21777: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
21781: LD_VAR 0 9
21785: PPUSH
21786: CALL_OW 313
21790: PUSH
21791: LD_INT 6
21793: EQUAL
21794: PUSH
21795: LD_VAR 0 9
21799: PPUSH
21800: CALL_OW 266
21804: PUSH
21805: LD_INT 32
21807: PUSH
21808: LD_INT 31
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: IN
21815: OR
21816: IFFALSE 21630
21818: GO 21627
21820: POP
21821: POP
// end else
21822: GO 22204
// for j = 1 to x do
21824: LD_ADDR_VAR 0 9
21828: PUSH
21829: DOUBLE
21830: LD_INT 1
21832: DEC
21833: ST_TO_ADDR
21834: LD_VAR 0 13
21838: PUSH
21839: FOR_TO
21840: IFFALSE 22202
// begin InitHc ;
21842: CALL_OW 19
// if not f then
21846: LD_VAR 0 12
21850: NOT
21851: IFFALSE 21940
// begin PrepareHuman ( false , i , skill ) ;
21853: LD_INT 0
21855: PPUSH
21856: LD_VAR 0 8
21860: PPUSH
21861: LD_VAR 0 4
21865: PPUSH
21866: CALL_OW 380
// un := CreateHuman ;
21870: LD_ADDR_VAR 0 14
21874: PUSH
21875: CALL_OW 44
21879: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21880: LD_ADDR_VAR 0 7
21884: PUSH
21885: LD_VAR 0 7
21889: PPUSH
21890: LD_INT 1
21892: PPUSH
21893: LD_VAR 0 14
21897: PPUSH
21898: CALL_OW 2
21902: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21903: LD_VAR 0 14
21907: PPUSH
21908: LD_VAR 0 1
21912: PPUSH
21913: CALL_OW 250
21917: PPUSH
21918: LD_VAR 0 1
21922: PPUSH
21923: CALL_OW 251
21927: PPUSH
21928: LD_INT 10
21930: PPUSH
21931: LD_INT 0
21933: PPUSH
21934: CALL_OW 50
// continue ;
21938: GO 21839
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
21940: LD_VAR 0 12
21944: PUSH
21945: LD_INT 1
21947: ARRAY
21948: PPUSH
21949: CALL_OW 313
21953: PUSH
21954: LD_VAR 0 12
21958: PUSH
21959: LD_INT 1
21961: ARRAY
21962: PPUSH
21963: CALL_OW 266
21967: PUSH
21968: LD_INT 32
21970: PUSH
21971: LD_INT 31
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: IN
21978: AND
21979: PUSH
21980: LD_VAR 0 12
21984: PUSH
21985: LD_INT 1
21987: ARRAY
21988: PPUSH
21989: CALL_OW 313
21993: PUSH
21994: LD_INT 6
21996: EQUAL
21997: OR
21998: IFFALSE 22018
// f := Delete ( f , 1 ) ;
22000: LD_ADDR_VAR 0 12
22004: PUSH
22005: LD_VAR 0 12
22009: PPUSH
22010: LD_INT 1
22012: PPUSH
22013: CALL_OW 3
22017: ST_TO_ADDR
// if not f then
22018: LD_VAR 0 12
22022: NOT
22023: IFFALSE 22041
// begin x := x + 2 ;
22025: LD_ADDR_VAR 0 13
22029: PUSH
22030: LD_VAR 0 13
22034: PUSH
22035: LD_INT 2
22037: PLUS
22038: ST_TO_ADDR
// continue ;
22039: GO 21839
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
22041: LD_VAR 0 12
22045: PUSH
22046: LD_INT 1
22048: ARRAY
22049: PPUSH
22050: CALL_OW 266
22054: PUSH
22055: LD_INT 5
22057: EQUAL
22058: IFFALSE 22132
// begin if UnitsInside ( f [ 1 ] ) < 3 then
22060: LD_VAR 0 12
22064: PUSH
22065: LD_INT 1
22067: ARRAY
22068: PPUSH
22069: CALL_OW 313
22073: PUSH
22074: LD_INT 3
22076: LESS
22077: IFFALSE 22113
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22079: LD_INT 0
22081: PPUSH
22082: LD_INT 5
22084: PUSH
22085: LD_INT 8
22087: PUSH
22088: LD_INT 9
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: LIST
22095: PUSH
22096: LD_VAR 0 17
22100: ARRAY
22101: PPUSH
22102: LD_VAR 0 4
22106: PPUSH
22107: CALL_OW 380
22111: GO 22130
// PrepareHuman ( false , i , skill ) ;
22113: LD_INT 0
22115: PPUSH
22116: LD_VAR 0 8
22120: PPUSH
22121: LD_VAR 0 4
22125: PPUSH
22126: CALL_OW 380
// end else
22130: GO 22149
// PrepareHuman ( false , i , skill ) ;
22132: LD_INT 0
22134: PPUSH
22135: LD_VAR 0 8
22139: PPUSH
22140: LD_VAR 0 4
22144: PPUSH
22145: CALL_OW 380
// un := CreateHuman ;
22149: LD_ADDR_VAR 0 14
22153: PUSH
22154: CALL_OW 44
22158: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22159: LD_ADDR_VAR 0 7
22163: PUSH
22164: LD_VAR 0 7
22168: PPUSH
22169: LD_INT 1
22171: PPUSH
22172: LD_VAR 0 14
22176: PPUSH
22177: CALL_OW 2
22181: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
22182: LD_VAR 0 14
22186: PPUSH
22187: LD_VAR 0 12
22191: PUSH
22192: LD_INT 1
22194: ARRAY
22195: PPUSH
22196: CALL_OW 52
// end ;
22200: GO 21839
22202: POP
22203: POP
// end ;
22204: GO 21141
22206: POP
22207: POP
// result := result ^ buildings ;
22208: LD_ADDR_VAR 0 7
22212: PUSH
22213: LD_VAR 0 7
22217: PUSH
22218: LD_VAR 0 18
22222: ADD
22223: ST_TO_ADDR
// end else
22224: GO 22367
// begin for i = 1 to personel do
22226: LD_ADDR_VAR 0 8
22230: PUSH
22231: DOUBLE
22232: LD_INT 1
22234: DEC
22235: ST_TO_ADDR
22236: LD_VAR 0 6
22240: PUSH
22241: FOR_TO
22242: IFFALSE 22365
// begin if i > 4 then
22244: LD_VAR 0 8
22248: PUSH
22249: LD_INT 4
22251: GREATER
22252: IFFALSE 22256
// break ;
22254: GO 22365
// x := personel [ i ] ;
22256: LD_ADDR_VAR 0 13
22260: PUSH
22261: LD_VAR 0 6
22265: PUSH
22266: LD_VAR 0 8
22270: ARRAY
22271: ST_TO_ADDR
// if x = - 1 then
22272: LD_VAR 0 13
22276: PUSH
22277: LD_INT 1
22279: NEG
22280: EQUAL
22281: IFFALSE 22285
// continue ;
22283: GO 22241
// PrepareHuman ( false , i , skill ) ;
22285: LD_INT 0
22287: PPUSH
22288: LD_VAR 0 8
22292: PPUSH
22293: LD_VAR 0 4
22297: PPUSH
22298: CALL_OW 380
// un := CreateHuman ;
22302: LD_ADDR_VAR 0 14
22306: PUSH
22307: CALL_OW 44
22311: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22312: LD_VAR 0 14
22316: PPUSH
22317: LD_VAR 0 1
22321: PPUSH
22322: CALL_OW 250
22326: PPUSH
22327: LD_VAR 0 1
22331: PPUSH
22332: CALL_OW 251
22336: PPUSH
22337: LD_INT 10
22339: PPUSH
22340: LD_INT 0
22342: PPUSH
22343: CALL_OW 50
// result := result ^ un ;
22347: LD_ADDR_VAR 0 7
22351: PUSH
22352: LD_VAR 0 7
22356: PUSH
22357: LD_VAR 0 14
22361: ADD
22362: ST_TO_ADDR
// end ;
22363: GO 22241
22365: POP
22366: POP
// end ; end ;
22367: LD_VAR 0 7
22371: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
22372: LD_INT 0
22374: PPUSH
22375: PPUSH
22376: PPUSH
22377: PPUSH
22378: PPUSH
22379: PPUSH
22380: PPUSH
22381: PPUSH
22382: PPUSH
22383: PPUSH
22384: PPUSH
22385: PPUSH
22386: PPUSH
22387: PPUSH
22388: PPUSH
22389: PPUSH
// result := false ;
22390: LD_ADDR_VAR 0 3
22394: PUSH
22395: LD_INT 0
22397: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
22398: LD_VAR 0 1
22402: NOT
22403: PUSH
22404: LD_VAR 0 1
22408: PPUSH
22409: CALL_OW 266
22413: PUSH
22414: LD_INT 32
22416: PUSH
22417: LD_INT 33
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: IN
22424: NOT
22425: OR
22426: IFFALSE 22430
// exit ;
22428: GO 23566
// nat := GetNation ( tower ) ;
22430: LD_ADDR_VAR 0 12
22434: PUSH
22435: LD_VAR 0 1
22439: PPUSH
22440: CALL_OW 248
22444: ST_TO_ADDR
// side := GetSide ( tower ) ;
22445: LD_ADDR_VAR 0 16
22449: PUSH
22450: LD_VAR 0 1
22454: PPUSH
22455: CALL_OW 255
22459: ST_TO_ADDR
// x := GetX ( tower ) ;
22460: LD_ADDR_VAR 0 10
22464: PUSH
22465: LD_VAR 0 1
22469: PPUSH
22470: CALL_OW 250
22474: ST_TO_ADDR
// y := GetY ( tower ) ;
22475: LD_ADDR_VAR 0 11
22479: PUSH
22480: LD_VAR 0 1
22484: PPUSH
22485: CALL_OW 251
22489: ST_TO_ADDR
// if not x or not y then
22490: LD_VAR 0 10
22494: NOT
22495: PUSH
22496: LD_VAR 0 11
22500: NOT
22501: OR
22502: IFFALSE 22506
// exit ;
22504: GO 23566
// weapon := 0 ;
22506: LD_ADDR_VAR 0 18
22510: PUSH
22511: LD_INT 0
22513: ST_TO_ADDR
// fac_list := [ ] ;
22514: LD_ADDR_VAR 0 17
22518: PUSH
22519: EMPTY
22520: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
22521: LD_ADDR_VAR 0 6
22525: PUSH
22526: LD_VAR 0 1
22530: PPUSH
22531: CALL_OW 274
22535: PPUSH
22536: LD_VAR 0 2
22540: PPUSH
22541: CALL 20144 0 2
22545: PPUSH
22546: LD_INT 30
22548: PUSH
22549: LD_INT 3
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PPUSH
22556: CALL_OW 72
22560: ST_TO_ADDR
// if not factories then
22561: LD_VAR 0 6
22565: NOT
22566: IFFALSE 22570
// exit ;
22568: GO 23566
// for i in factories do
22570: LD_ADDR_VAR 0 8
22574: PUSH
22575: LD_VAR 0 6
22579: PUSH
22580: FOR_IN
22581: IFFALSE 22606
// fac_list := fac_list union AvailableWeaponList ( i ) ;
22583: LD_ADDR_VAR 0 17
22587: PUSH
22588: LD_VAR 0 17
22592: PUSH
22593: LD_VAR 0 8
22597: PPUSH
22598: CALL_OW 478
22602: UNION
22603: ST_TO_ADDR
22604: GO 22580
22606: POP
22607: POP
// if not fac_list then
22608: LD_VAR 0 17
22612: NOT
22613: IFFALSE 22617
// exit ;
22615: GO 23566
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
22617: LD_ADDR_VAR 0 5
22621: PUSH
22622: LD_INT 4
22624: PUSH
22625: LD_INT 5
22627: PUSH
22628: LD_INT 9
22630: PUSH
22631: LD_INT 10
22633: PUSH
22634: LD_INT 6
22636: PUSH
22637: LD_INT 7
22639: PUSH
22640: LD_INT 11
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 27
22654: PUSH
22655: LD_INT 28
22657: PUSH
22658: LD_INT 26
22660: PUSH
22661: LD_INT 30
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 43
22672: PUSH
22673: LD_INT 44
22675: PUSH
22676: LD_INT 46
22678: PUSH
22679: LD_INT 45
22681: PUSH
22682: LD_INT 47
22684: PUSH
22685: LD_INT 49
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: LIST
22700: PUSH
22701: LD_VAR 0 12
22705: ARRAY
22706: ST_TO_ADDR
// for i in list do
22707: LD_ADDR_VAR 0 8
22711: PUSH
22712: LD_VAR 0 5
22716: PUSH
22717: FOR_IN
22718: IFFALSE 22751
// if not i in fac_list then
22720: LD_VAR 0 8
22724: PUSH
22725: LD_VAR 0 17
22729: IN
22730: NOT
22731: IFFALSE 22749
// list := list diff i ;
22733: LD_ADDR_VAR 0 5
22737: PUSH
22738: LD_VAR 0 5
22742: PUSH
22743: LD_VAR 0 8
22747: DIFF
22748: ST_TO_ADDR
22749: GO 22717
22751: POP
22752: POP
// if not list then
22753: LD_VAR 0 5
22757: NOT
22758: IFFALSE 22762
// exit ;
22760: GO 23566
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
22762: LD_VAR 0 12
22766: PUSH
22767: LD_INT 3
22769: EQUAL
22770: PUSH
22771: LD_INT 49
22773: PUSH
22774: LD_VAR 0 5
22778: IN
22779: AND
22780: PUSH
22781: LD_INT 31
22783: PPUSH
22784: LD_VAR 0 16
22788: PPUSH
22789: CALL_OW 321
22793: PUSH
22794: LD_INT 2
22796: EQUAL
22797: AND
22798: IFFALSE 22858
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
22800: LD_INT 22
22802: PUSH
22803: LD_VAR 0 16
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 35
22814: PUSH
22815: LD_INT 49
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 91
22824: PUSH
22825: LD_VAR 0 1
22829: PUSH
22830: LD_INT 10
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: LIST
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: LIST
22842: PPUSH
22843: CALL_OW 69
22847: NOT
22848: IFFALSE 22858
// weapon := ru_time_lapser ;
22850: LD_ADDR_VAR 0 18
22854: PUSH
22855: LD_INT 49
22857: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
22858: LD_VAR 0 12
22862: PUSH
22863: LD_INT 1
22865: PUSH
22866: LD_INT 2
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: IN
22873: PUSH
22874: LD_INT 11
22876: PUSH
22877: LD_VAR 0 5
22881: IN
22882: PUSH
22883: LD_INT 30
22885: PUSH
22886: LD_VAR 0 5
22890: IN
22891: OR
22892: AND
22893: PUSH
22894: LD_INT 6
22896: PPUSH
22897: LD_VAR 0 16
22901: PPUSH
22902: CALL_OW 321
22906: PUSH
22907: LD_INT 2
22909: EQUAL
22910: AND
22911: IFFALSE 23076
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
22913: LD_INT 22
22915: PUSH
22916: LD_VAR 0 16
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 2
22927: PUSH
22928: LD_INT 35
22930: PUSH
22931: LD_INT 11
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 35
22940: PUSH
22941: LD_INT 30
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 91
22955: PUSH
22956: LD_VAR 0 1
22960: PUSH
22961: LD_INT 18
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: LIST
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: LIST
22973: PPUSH
22974: CALL_OW 69
22978: NOT
22979: PUSH
22980: LD_INT 22
22982: PUSH
22983: LD_VAR 0 16
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 2
22994: PUSH
22995: LD_INT 30
22997: PUSH
22998: LD_INT 32
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 30
23007: PUSH
23008: LD_INT 33
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 91
23022: PUSH
23023: LD_VAR 0 1
23027: PUSH
23028: LD_INT 12
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: LIST
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: LIST
23040: PUSH
23041: EMPTY
23042: LIST
23043: PPUSH
23044: CALL_OW 69
23048: PUSH
23049: LD_INT 2
23051: GREATER
23052: AND
23053: IFFALSE 23076
// weapon := [ us_radar , ar_radar ] [ nat ] ;
23055: LD_ADDR_VAR 0 18
23059: PUSH
23060: LD_INT 11
23062: PUSH
23063: LD_INT 30
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_VAR 0 12
23074: ARRAY
23075: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
23076: LD_VAR 0 18
23080: NOT
23081: PUSH
23082: LD_INT 40
23084: PPUSH
23085: LD_VAR 0 16
23089: PPUSH
23090: CALL_OW 321
23094: PUSH
23095: LD_INT 2
23097: EQUAL
23098: AND
23099: PUSH
23100: LD_INT 7
23102: PUSH
23103: LD_VAR 0 5
23107: IN
23108: PUSH
23109: LD_INT 28
23111: PUSH
23112: LD_VAR 0 5
23116: IN
23117: OR
23118: PUSH
23119: LD_INT 45
23121: PUSH
23122: LD_VAR 0 5
23126: IN
23127: OR
23128: AND
23129: IFFALSE 23383
// begin hex := GetHexInfo ( x , y ) ;
23131: LD_ADDR_VAR 0 4
23135: PUSH
23136: LD_VAR 0 10
23140: PPUSH
23141: LD_VAR 0 11
23145: PPUSH
23146: CALL_OW 546
23150: ST_TO_ADDR
// if hex [ 1 ] then
23151: LD_VAR 0 4
23155: PUSH
23156: LD_INT 1
23158: ARRAY
23159: IFFALSE 23163
// exit ;
23161: GO 23566
// height := hex [ 2 ] ;
23163: LD_ADDR_VAR 0 15
23167: PUSH
23168: LD_VAR 0 4
23172: PUSH
23173: LD_INT 2
23175: ARRAY
23176: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
23177: LD_ADDR_VAR 0 14
23181: PUSH
23182: LD_INT 0
23184: PUSH
23185: LD_INT 2
23187: PUSH
23188: LD_INT 3
23190: PUSH
23191: LD_INT 5
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: ST_TO_ADDR
// for i in tmp do
23200: LD_ADDR_VAR 0 8
23204: PUSH
23205: LD_VAR 0 14
23209: PUSH
23210: FOR_IN
23211: IFFALSE 23381
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
23213: LD_ADDR_VAR 0 9
23217: PUSH
23218: LD_VAR 0 10
23222: PPUSH
23223: LD_VAR 0 8
23227: PPUSH
23228: LD_INT 5
23230: PPUSH
23231: CALL_OW 272
23235: PUSH
23236: LD_VAR 0 11
23240: PPUSH
23241: LD_VAR 0 8
23245: PPUSH
23246: LD_INT 5
23248: PPUSH
23249: CALL_OW 273
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
23258: LD_VAR 0 9
23262: PUSH
23263: LD_INT 1
23265: ARRAY
23266: PPUSH
23267: LD_VAR 0 9
23271: PUSH
23272: LD_INT 2
23274: ARRAY
23275: PPUSH
23276: CALL_OW 488
23280: IFFALSE 23379
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
23282: LD_ADDR_VAR 0 4
23286: PUSH
23287: LD_VAR 0 9
23291: PUSH
23292: LD_INT 1
23294: ARRAY
23295: PPUSH
23296: LD_VAR 0 9
23300: PUSH
23301: LD_INT 2
23303: ARRAY
23304: PPUSH
23305: CALL_OW 546
23309: ST_TO_ADDR
// if hex [ 1 ] then
23310: LD_VAR 0 4
23314: PUSH
23315: LD_INT 1
23317: ARRAY
23318: IFFALSE 23322
// continue ;
23320: GO 23210
// h := hex [ 2 ] ;
23322: LD_ADDR_VAR 0 13
23326: PUSH
23327: LD_VAR 0 4
23331: PUSH
23332: LD_INT 2
23334: ARRAY
23335: ST_TO_ADDR
// if h + 7 < height then
23336: LD_VAR 0 13
23340: PUSH
23341: LD_INT 7
23343: PLUS
23344: PUSH
23345: LD_VAR 0 15
23349: LESS
23350: IFFALSE 23379
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
23352: LD_ADDR_VAR 0 18
23356: PUSH
23357: LD_INT 7
23359: PUSH
23360: LD_INT 28
23362: PUSH
23363: LD_INT 45
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: LIST
23370: PUSH
23371: LD_VAR 0 12
23375: ARRAY
23376: ST_TO_ADDR
// break ;
23377: GO 23381
// end ; end ; end ;
23379: GO 23210
23381: POP
23382: POP
// end ; if not weapon then
23383: LD_VAR 0 18
23387: NOT
23388: IFFALSE 23448
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
23390: LD_ADDR_VAR 0 5
23394: PUSH
23395: LD_VAR 0 5
23399: PUSH
23400: LD_INT 11
23402: PUSH
23403: LD_INT 30
23405: PUSH
23406: LD_INT 49
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: LIST
23413: DIFF
23414: ST_TO_ADDR
// if not list then
23415: LD_VAR 0 5
23419: NOT
23420: IFFALSE 23424
// exit ;
23422: GO 23566
// weapon := list [ rand ( 1 , list ) ] ;
23424: LD_ADDR_VAR 0 18
23428: PUSH
23429: LD_VAR 0 5
23433: PUSH
23434: LD_INT 1
23436: PPUSH
23437: LD_VAR 0 5
23441: PPUSH
23442: CALL_OW 12
23446: ARRAY
23447: ST_TO_ADDR
// end ; if weapon then
23448: LD_VAR 0 18
23452: IFFALSE 23566
// begin tmp := CostOfWeapon ( weapon ) ;
23454: LD_ADDR_VAR 0 14
23458: PUSH
23459: LD_VAR 0 18
23463: PPUSH
23464: CALL_OW 451
23468: ST_TO_ADDR
// j := GetBase ( tower ) ;
23469: LD_ADDR_VAR 0 9
23473: PUSH
23474: LD_VAR 0 1
23478: PPUSH
23479: CALL_OW 274
23483: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
23484: LD_VAR 0 9
23488: PPUSH
23489: LD_INT 1
23491: PPUSH
23492: CALL_OW 275
23496: PUSH
23497: LD_VAR 0 14
23501: PUSH
23502: LD_INT 1
23504: ARRAY
23505: GREATEREQUAL
23506: PUSH
23507: LD_VAR 0 9
23511: PPUSH
23512: LD_INT 2
23514: PPUSH
23515: CALL_OW 275
23519: PUSH
23520: LD_VAR 0 14
23524: PUSH
23525: LD_INT 2
23527: ARRAY
23528: GREATEREQUAL
23529: AND
23530: PUSH
23531: LD_VAR 0 9
23535: PPUSH
23536: LD_INT 3
23538: PPUSH
23539: CALL_OW 275
23543: PUSH
23544: LD_VAR 0 14
23548: PUSH
23549: LD_INT 3
23551: ARRAY
23552: GREATEREQUAL
23553: AND
23554: IFFALSE 23566
// result := weapon ;
23556: LD_ADDR_VAR 0 3
23560: PUSH
23561: LD_VAR 0 18
23565: ST_TO_ADDR
// end ; end ;
23566: LD_VAR 0 3
23570: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
23571: LD_INT 0
23573: PPUSH
23574: PPUSH
// result := true ;
23575: LD_ADDR_VAR 0 3
23579: PUSH
23580: LD_INT 1
23582: ST_TO_ADDR
// if array1 = array2 then
23583: LD_VAR 0 1
23587: PUSH
23588: LD_VAR 0 2
23592: EQUAL
23593: IFFALSE 23653
// begin for i = 1 to array1 do
23595: LD_ADDR_VAR 0 4
23599: PUSH
23600: DOUBLE
23601: LD_INT 1
23603: DEC
23604: ST_TO_ADDR
23605: LD_VAR 0 1
23609: PUSH
23610: FOR_TO
23611: IFFALSE 23649
// if array1 [ i ] <> array2 [ i ] then
23613: LD_VAR 0 1
23617: PUSH
23618: LD_VAR 0 4
23622: ARRAY
23623: PUSH
23624: LD_VAR 0 2
23628: PUSH
23629: LD_VAR 0 4
23633: ARRAY
23634: NONEQUAL
23635: IFFALSE 23647
// begin result := false ;
23637: LD_ADDR_VAR 0 3
23641: PUSH
23642: LD_INT 0
23644: ST_TO_ADDR
// break ;
23645: GO 23649
// end ;
23647: GO 23610
23649: POP
23650: POP
// end else
23651: GO 23661
// result := false ;
23653: LD_ADDR_VAR 0 3
23657: PUSH
23658: LD_INT 0
23660: ST_TO_ADDR
// end ;
23661: LD_VAR 0 3
23665: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
23666: LD_INT 0
23668: PPUSH
23669: PPUSH
23670: PPUSH
// pom := GetBase ( fac ) ;
23671: LD_ADDR_VAR 0 5
23675: PUSH
23676: LD_VAR 0 1
23680: PPUSH
23681: CALL_OW 274
23685: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
23686: LD_ADDR_VAR 0 4
23690: PUSH
23691: LD_VAR 0 2
23695: PUSH
23696: LD_INT 1
23698: ARRAY
23699: PPUSH
23700: LD_VAR 0 2
23704: PUSH
23705: LD_INT 2
23707: ARRAY
23708: PPUSH
23709: LD_VAR 0 2
23713: PUSH
23714: LD_INT 3
23716: ARRAY
23717: PPUSH
23718: LD_VAR 0 2
23722: PUSH
23723: LD_INT 4
23725: ARRAY
23726: PPUSH
23727: CALL_OW 449
23731: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23732: LD_ADDR_VAR 0 3
23736: PUSH
23737: LD_VAR 0 5
23741: PPUSH
23742: LD_INT 1
23744: PPUSH
23745: CALL_OW 275
23749: PUSH
23750: LD_VAR 0 4
23754: PUSH
23755: LD_INT 1
23757: ARRAY
23758: GREATEREQUAL
23759: PUSH
23760: LD_VAR 0 5
23764: PPUSH
23765: LD_INT 2
23767: PPUSH
23768: CALL_OW 275
23772: PUSH
23773: LD_VAR 0 4
23777: PUSH
23778: LD_INT 2
23780: ARRAY
23781: GREATEREQUAL
23782: AND
23783: PUSH
23784: LD_VAR 0 5
23788: PPUSH
23789: LD_INT 3
23791: PPUSH
23792: CALL_OW 275
23796: PUSH
23797: LD_VAR 0 4
23801: PUSH
23802: LD_INT 3
23804: ARRAY
23805: GREATEREQUAL
23806: AND
23807: ST_TO_ADDR
// end ;
23808: LD_VAR 0 3
23812: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
23813: LD_INT 0
23815: PPUSH
23816: PPUSH
23817: PPUSH
23818: PPUSH
// pom := GetBase ( building ) ;
23819: LD_ADDR_VAR 0 3
23823: PUSH
23824: LD_VAR 0 1
23828: PPUSH
23829: CALL_OW 274
23833: ST_TO_ADDR
// if not pom then
23834: LD_VAR 0 3
23838: NOT
23839: IFFALSE 23843
// exit ;
23841: GO 24013
// btype := GetBType ( building ) ;
23843: LD_ADDR_VAR 0 5
23847: PUSH
23848: LD_VAR 0 1
23852: PPUSH
23853: CALL_OW 266
23857: ST_TO_ADDR
// if btype = b_armoury then
23858: LD_VAR 0 5
23862: PUSH
23863: LD_INT 4
23865: EQUAL
23866: IFFALSE 23876
// btype := b_barracks ;
23868: LD_ADDR_VAR 0 5
23872: PUSH
23873: LD_INT 5
23875: ST_TO_ADDR
// if btype = b_depot then
23876: LD_VAR 0 5
23880: PUSH
23881: LD_INT 0
23883: EQUAL
23884: IFFALSE 23894
// btype := b_warehouse ;
23886: LD_ADDR_VAR 0 5
23890: PUSH
23891: LD_INT 1
23893: ST_TO_ADDR
// if btype = b_workshop then
23894: LD_VAR 0 5
23898: PUSH
23899: LD_INT 2
23901: EQUAL
23902: IFFALSE 23912
// btype := b_factory ;
23904: LD_ADDR_VAR 0 5
23908: PUSH
23909: LD_INT 3
23911: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23912: LD_ADDR_VAR 0 4
23916: PUSH
23917: LD_VAR 0 5
23921: PPUSH
23922: LD_VAR 0 1
23926: PPUSH
23927: CALL_OW 248
23931: PPUSH
23932: CALL_OW 450
23936: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23937: LD_ADDR_VAR 0 2
23941: PUSH
23942: LD_VAR 0 3
23946: PPUSH
23947: LD_INT 1
23949: PPUSH
23950: CALL_OW 275
23954: PUSH
23955: LD_VAR 0 4
23959: PUSH
23960: LD_INT 1
23962: ARRAY
23963: GREATEREQUAL
23964: PUSH
23965: LD_VAR 0 3
23969: PPUSH
23970: LD_INT 2
23972: PPUSH
23973: CALL_OW 275
23977: PUSH
23978: LD_VAR 0 4
23982: PUSH
23983: LD_INT 2
23985: ARRAY
23986: GREATEREQUAL
23987: AND
23988: PUSH
23989: LD_VAR 0 3
23993: PPUSH
23994: LD_INT 3
23996: PPUSH
23997: CALL_OW 275
24001: PUSH
24002: LD_VAR 0 4
24006: PUSH
24007: LD_INT 3
24009: ARRAY
24010: GREATEREQUAL
24011: AND
24012: ST_TO_ADDR
// end ;
24013: LD_VAR 0 2
24017: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
24018: LD_INT 0
24020: PPUSH
24021: PPUSH
24022: PPUSH
// pom := GetBase ( building ) ;
24023: LD_ADDR_VAR 0 4
24027: PUSH
24028: LD_VAR 0 1
24032: PPUSH
24033: CALL_OW 274
24037: ST_TO_ADDR
// if not pom then
24038: LD_VAR 0 4
24042: NOT
24043: IFFALSE 24047
// exit ;
24045: GO 24148
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24047: LD_ADDR_VAR 0 5
24051: PUSH
24052: LD_VAR 0 2
24056: PPUSH
24057: LD_VAR 0 1
24061: PPUSH
24062: CALL_OW 248
24066: PPUSH
24067: CALL_OW 450
24071: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24072: LD_ADDR_VAR 0 3
24076: PUSH
24077: LD_VAR 0 4
24081: PPUSH
24082: LD_INT 1
24084: PPUSH
24085: CALL_OW 275
24089: PUSH
24090: LD_VAR 0 5
24094: PUSH
24095: LD_INT 1
24097: ARRAY
24098: GREATEREQUAL
24099: PUSH
24100: LD_VAR 0 4
24104: PPUSH
24105: LD_INT 2
24107: PPUSH
24108: CALL_OW 275
24112: PUSH
24113: LD_VAR 0 5
24117: PUSH
24118: LD_INT 2
24120: ARRAY
24121: GREATEREQUAL
24122: AND
24123: PUSH
24124: LD_VAR 0 4
24128: PPUSH
24129: LD_INT 3
24131: PPUSH
24132: CALL_OW 275
24136: PUSH
24137: LD_VAR 0 5
24141: PUSH
24142: LD_INT 3
24144: ARRAY
24145: GREATEREQUAL
24146: AND
24147: ST_TO_ADDR
// end ;
24148: LD_VAR 0 3
24152: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
24153: LD_INT 0
24155: PPUSH
24156: PPUSH
24157: PPUSH
24158: PPUSH
24159: PPUSH
24160: PPUSH
24161: PPUSH
24162: PPUSH
24163: PPUSH
24164: PPUSH
// result := false ;
24165: LD_ADDR_VAR 0 6
24169: PUSH
24170: LD_INT 0
24172: ST_TO_ADDR
// if not base or not btype or not x or not y then
24173: LD_VAR 0 1
24177: NOT
24178: PUSH
24179: LD_VAR 0 2
24183: NOT
24184: OR
24185: PUSH
24186: LD_VAR 0 3
24190: NOT
24191: OR
24192: PUSH
24193: LD_VAR 0 4
24197: NOT
24198: OR
24199: IFFALSE 24203
// exit ;
24201: GO 24812
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
24203: LD_ADDR_VAR 0 12
24207: PUSH
24208: LD_VAR 0 2
24212: PPUSH
24213: LD_VAR 0 3
24217: PPUSH
24218: LD_VAR 0 4
24222: PPUSH
24223: LD_VAR 0 5
24227: PPUSH
24228: LD_VAR 0 1
24232: PUSH
24233: LD_INT 1
24235: ARRAY
24236: PPUSH
24237: CALL_OW 248
24241: PPUSH
24242: LD_INT 0
24244: PPUSH
24245: CALL 25649 0 6
24249: ST_TO_ADDR
// if not hexes then
24250: LD_VAR 0 12
24254: NOT
24255: IFFALSE 24259
// exit ;
24257: GO 24812
// for i = 1 to hexes do
24259: LD_ADDR_VAR 0 7
24263: PUSH
24264: DOUBLE
24265: LD_INT 1
24267: DEC
24268: ST_TO_ADDR
24269: LD_VAR 0 12
24273: PUSH
24274: FOR_TO
24275: IFFALSE 24810
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24277: LD_ADDR_VAR 0 11
24281: PUSH
24282: LD_VAR 0 12
24286: PUSH
24287: LD_VAR 0 7
24291: ARRAY
24292: PUSH
24293: LD_INT 1
24295: ARRAY
24296: PPUSH
24297: LD_VAR 0 12
24301: PUSH
24302: LD_VAR 0 7
24306: ARRAY
24307: PUSH
24308: LD_INT 2
24310: ARRAY
24311: PPUSH
24312: CALL_OW 428
24316: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
24317: LD_VAR 0 12
24321: PUSH
24322: LD_VAR 0 7
24326: ARRAY
24327: PUSH
24328: LD_INT 1
24330: ARRAY
24331: PPUSH
24332: LD_VAR 0 12
24336: PUSH
24337: LD_VAR 0 7
24341: ARRAY
24342: PUSH
24343: LD_INT 2
24345: ARRAY
24346: PPUSH
24347: CALL_OW 351
24351: PUSH
24352: LD_VAR 0 12
24356: PUSH
24357: LD_VAR 0 7
24361: ARRAY
24362: PUSH
24363: LD_INT 1
24365: ARRAY
24366: PPUSH
24367: LD_VAR 0 12
24371: PUSH
24372: LD_VAR 0 7
24376: ARRAY
24377: PUSH
24378: LD_INT 2
24380: ARRAY
24381: PPUSH
24382: CALL_OW 488
24386: NOT
24387: OR
24388: PUSH
24389: LD_VAR 0 11
24393: PPUSH
24394: CALL_OW 247
24398: PUSH
24399: LD_INT 3
24401: EQUAL
24402: OR
24403: IFFALSE 24409
// exit ;
24405: POP
24406: POP
24407: GO 24812
// if not tmp or not tmp in base then
24409: LD_VAR 0 11
24413: NOT
24414: PUSH
24415: LD_VAR 0 11
24419: PUSH
24420: LD_VAR 0 1
24424: IN
24425: NOT
24426: OR
24427: IFFALSE 24431
// continue ;
24429: GO 24274
// result := true ;
24431: LD_ADDR_VAR 0 6
24435: PUSH
24436: LD_INT 1
24438: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24439: LD_ADDR_VAR 0 15
24443: PUSH
24444: LD_VAR 0 1
24448: PPUSH
24449: LD_INT 22
24451: PUSH
24452: LD_VAR 0 11
24456: PPUSH
24457: CALL_OW 255
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 2
24468: PUSH
24469: LD_INT 30
24471: PUSH
24472: LD_INT 0
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 30
24481: PUSH
24482: LD_INT 1
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: LIST
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PPUSH
24498: CALL_OW 72
24502: ST_TO_ADDR
// if dep then
24503: LD_VAR 0 15
24507: IFFALSE 24643
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
24509: LD_ADDR_VAR 0 14
24513: PUSH
24514: LD_VAR 0 15
24518: PUSH
24519: LD_INT 1
24521: ARRAY
24522: PPUSH
24523: CALL_OW 250
24527: PPUSH
24528: LD_VAR 0 15
24532: PUSH
24533: LD_INT 1
24535: ARRAY
24536: PPUSH
24537: CALL_OW 254
24541: PPUSH
24542: LD_INT 5
24544: PPUSH
24545: CALL_OW 272
24549: PUSH
24550: LD_VAR 0 15
24554: PUSH
24555: LD_INT 1
24557: ARRAY
24558: PPUSH
24559: CALL_OW 251
24563: PPUSH
24564: LD_VAR 0 15
24568: PUSH
24569: LD_INT 1
24571: ARRAY
24572: PPUSH
24573: CALL_OW 254
24577: PPUSH
24578: LD_INT 5
24580: PPUSH
24581: CALL_OW 273
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
24590: LD_VAR 0 14
24594: PUSH
24595: LD_INT 1
24597: ARRAY
24598: PPUSH
24599: LD_VAR 0 14
24603: PUSH
24604: LD_INT 2
24606: ARRAY
24607: PPUSH
24608: CALL_OW 488
24612: IFFALSE 24643
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
24614: LD_VAR 0 11
24618: PPUSH
24619: LD_VAR 0 14
24623: PUSH
24624: LD_INT 1
24626: ARRAY
24627: PPUSH
24628: LD_VAR 0 14
24632: PUSH
24633: LD_INT 2
24635: ARRAY
24636: PPUSH
24637: CALL_OW 111
// continue ;
24641: GO 24274
// end ; end ; r := GetDir ( tmp ) ;
24643: LD_ADDR_VAR 0 13
24647: PUSH
24648: LD_VAR 0 11
24652: PPUSH
24653: CALL_OW 254
24657: ST_TO_ADDR
// if r = 5 then
24658: LD_VAR 0 13
24662: PUSH
24663: LD_INT 5
24665: EQUAL
24666: IFFALSE 24676
// r := 0 ;
24668: LD_ADDR_VAR 0 13
24672: PUSH
24673: LD_INT 0
24675: ST_TO_ADDR
// for j = r to 5 do
24676: LD_ADDR_VAR 0 8
24680: PUSH
24681: DOUBLE
24682: LD_VAR 0 13
24686: DEC
24687: ST_TO_ADDR
24688: LD_INT 5
24690: PUSH
24691: FOR_TO
24692: IFFALSE 24806
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
24694: LD_ADDR_VAR 0 9
24698: PUSH
24699: LD_VAR 0 11
24703: PPUSH
24704: CALL_OW 250
24708: PPUSH
24709: LD_VAR 0 8
24713: PPUSH
24714: LD_INT 2
24716: PPUSH
24717: CALL_OW 272
24721: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
24722: LD_ADDR_VAR 0 10
24726: PUSH
24727: LD_VAR 0 11
24731: PPUSH
24732: CALL_OW 251
24736: PPUSH
24737: LD_VAR 0 8
24741: PPUSH
24742: LD_INT 2
24744: PPUSH
24745: CALL_OW 273
24749: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
24750: LD_VAR 0 9
24754: PPUSH
24755: LD_VAR 0 10
24759: PPUSH
24760: CALL_OW 488
24764: PUSH
24765: LD_VAR 0 9
24769: PPUSH
24770: LD_VAR 0 10
24774: PPUSH
24775: CALL_OW 428
24779: NOT
24780: AND
24781: IFFALSE 24804
// begin ComMoveXY ( tmp , _x , _y ) ;
24783: LD_VAR 0 11
24787: PPUSH
24788: LD_VAR 0 9
24792: PPUSH
24793: LD_VAR 0 10
24797: PPUSH
24798: CALL_OW 111
// break ;
24802: GO 24806
// end ; end ;
24804: GO 24691
24806: POP
24807: POP
// end ;
24808: GO 24274
24810: POP
24811: POP
// end ;
24812: LD_VAR 0 6
24816: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
24817: LD_INT 0
24819: PPUSH
24820: PPUSH
24821: PPUSH
24822: PPUSH
24823: PPUSH
24824: PPUSH
24825: PPUSH
24826: PPUSH
24827: PPUSH
24828: PPUSH
// result := false ;
24829: LD_ADDR_VAR 0 6
24833: PUSH
24834: LD_INT 0
24836: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
24837: LD_VAR 0 1
24841: NOT
24842: PUSH
24843: LD_VAR 0 1
24847: PPUSH
24848: CALL_OW 266
24852: PUSH
24853: LD_INT 0
24855: PUSH
24856: LD_INT 1
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: IN
24863: NOT
24864: OR
24865: PUSH
24866: LD_VAR 0 2
24870: NOT
24871: OR
24872: PUSH
24873: LD_VAR 0 5
24877: PUSH
24878: LD_INT 0
24880: PUSH
24881: LD_INT 1
24883: PUSH
24884: LD_INT 2
24886: PUSH
24887: LD_INT 3
24889: PUSH
24890: LD_INT 4
24892: PUSH
24893: LD_INT 5
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: IN
24904: NOT
24905: OR
24906: PUSH
24907: LD_VAR 0 3
24911: PPUSH
24912: LD_VAR 0 4
24916: PPUSH
24917: CALL_OW 488
24921: NOT
24922: OR
24923: IFFALSE 24927
// exit ;
24925: GO 25644
// pom := GetBase ( depot ) ;
24927: LD_ADDR_VAR 0 10
24931: PUSH
24932: LD_VAR 0 1
24936: PPUSH
24937: CALL_OW 274
24941: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
24942: LD_ADDR_VAR 0 11
24946: PUSH
24947: LD_VAR 0 2
24951: PPUSH
24952: LD_VAR 0 1
24956: PPUSH
24957: CALL_OW 248
24961: PPUSH
24962: CALL_OW 450
24966: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
24967: LD_VAR 0 10
24971: PPUSH
24972: LD_INT 1
24974: PPUSH
24975: CALL_OW 275
24979: PUSH
24980: LD_VAR 0 11
24984: PUSH
24985: LD_INT 1
24987: ARRAY
24988: GREATEREQUAL
24989: PUSH
24990: LD_VAR 0 10
24994: PPUSH
24995: LD_INT 2
24997: PPUSH
24998: CALL_OW 275
25002: PUSH
25003: LD_VAR 0 11
25007: PUSH
25008: LD_INT 2
25010: ARRAY
25011: GREATEREQUAL
25012: AND
25013: PUSH
25014: LD_VAR 0 10
25018: PPUSH
25019: LD_INT 3
25021: PPUSH
25022: CALL_OW 275
25026: PUSH
25027: LD_VAR 0 11
25031: PUSH
25032: LD_INT 3
25034: ARRAY
25035: GREATEREQUAL
25036: AND
25037: NOT
25038: IFFALSE 25042
// exit ;
25040: GO 25644
// if GetBType ( depot ) = b_depot then
25042: LD_VAR 0 1
25046: PPUSH
25047: CALL_OW 266
25051: PUSH
25052: LD_INT 0
25054: EQUAL
25055: IFFALSE 25067
// dist := 28 else
25057: LD_ADDR_VAR 0 14
25061: PUSH
25062: LD_INT 28
25064: ST_TO_ADDR
25065: GO 25075
// dist := 36 ;
25067: LD_ADDR_VAR 0 14
25071: PUSH
25072: LD_INT 36
25074: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
25075: LD_VAR 0 1
25079: PPUSH
25080: LD_VAR 0 3
25084: PPUSH
25085: LD_VAR 0 4
25089: PPUSH
25090: CALL_OW 297
25094: PUSH
25095: LD_VAR 0 14
25099: GREATER
25100: IFFALSE 25104
// exit ;
25102: GO 25644
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
25104: LD_ADDR_VAR 0 12
25108: PUSH
25109: LD_VAR 0 2
25113: PPUSH
25114: LD_VAR 0 3
25118: PPUSH
25119: LD_VAR 0 4
25123: PPUSH
25124: LD_VAR 0 5
25128: PPUSH
25129: LD_VAR 0 1
25133: PPUSH
25134: CALL_OW 248
25138: PPUSH
25139: LD_INT 0
25141: PPUSH
25142: CALL 25649 0 6
25146: ST_TO_ADDR
// if not hexes then
25147: LD_VAR 0 12
25151: NOT
25152: IFFALSE 25156
// exit ;
25154: GO 25644
// hex := GetHexInfo ( x , y ) ;
25156: LD_ADDR_VAR 0 15
25160: PUSH
25161: LD_VAR 0 3
25165: PPUSH
25166: LD_VAR 0 4
25170: PPUSH
25171: CALL_OW 546
25175: ST_TO_ADDR
// if hex [ 1 ] then
25176: LD_VAR 0 15
25180: PUSH
25181: LD_INT 1
25183: ARRAY
25184: IFFALSE 25188
// exit ;
25186: GO 25644
// height := hex [ 2 ] ;
25188: LD_ADDR_VAR 0 13
25192: PUSH
25193: LD_VAR 0 15
25197: PUSH
25198: LD_INT 2
25200: ARRAY
25201: ST_TO_ADDR
// for i = 1 to hexes do
25202: LD_ADDR_VAR 0 7
25206: PUSH
25207: DOUBLE
25208: LD_INT 1
25210: DEC
25211: ST_TO_ADDR
25212: LD_VAR 0 12
25216: PUSH
25217: FOR_TO
25218: IFFALSE 25548
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
25220: LD_VAR 0 12
25224: PUSH
25225: LD_VAR 0 7
25229: ARRAY
25230: PUSH
25231: LD_INT 1
25233: ARRAY
25234: PPUSH
25235: LD_VAR 0 12
25239: PUSH
25240: LD_VAR 0 7
25244: ARRAY
25245: PUSH
25246: LD_INT 2
25248: ARRAY
25249: PPUSH
25250: CALL_OW 488
25254: NOT
25255: PUSH
25256: LD_VAR 0 12
25260: PUSH
25261: LD_VAR 0 7
25265: ARRAY
25266: PUSH
25267: LD_INT 1
25269: ARRAY
25270: PPUSH
25271: LD_VAR 0 12
25275: PUSH
25276: LD_VAR 0 7
25280: ARRAY
25281: PUSH
25282: LD_INT 2
25284: ARRAY
25285: PPUSH
25286: CALL_OW 428
25290: PUSH
25291: LD_INT 0
25293: GREATER
25294: OR
25295: PUSH
25296: LD_VAR 0 12
25300: PUSH
25301: LD_VAR 0 7
25305: ARRAY
25306: PUSH
25307: LD_INT 1
25309: ARRAY
25310: PPUSH
25311: LD_VAR 0 12
25315: PUSH
25316: LD_VAR 0 7
25320: ARRAY
25321: PUSH
25322: LD_INT 2
25324: ARRAY
25325: PPUSH
25326: CALL_OW 351
25330: OR
25331: IFFALSE 25337
// exit ;
25333: POP
25334: POP
25335: GO 25644
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25337: LD_ADDR_VAR 0 8
25341: PUSH
25342: LD_VAR 0 12
25346: PUSH
25347: LD_VAR 0 7
25351: ARRAY
25352: PUSH
25353: LD_INT 1
25355: ARRAY
25356: PPUSH
25357: LD_VAR 0 12
25361: PUSH
25362: LD_VAR 0 7
25366: ARRAY
25367: PUSH
25368: LD_INT 2
25370: ARRAY
25371: PPUSH
25372: CALL_OW 546
25376: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
25377: LD_VAR 0 8
25381: PUSH
25382: LD_INT 1
25384: ARRAY
25385: PUSH
25386: LD_VAR 0 8
25390: PUSH
25391: LD_INT 2
25393: ARRAY
25394: PUSH
25395: LD_VAR 0 13
25399: PUSH
25400: LD_INT 2
25402: PLUS
25403: GREATER
25404: OR
25405: PUSH
25406: LD_VAR 0 8
25410: PUSH
25411: LD_INT 2
25413: ARRAY
25414: PUSH
25415: LD_VAR 0 13
25419: PUSH
25420: LD_INT 2
25422: MINUS
25423: LESS
25424: OR
25425: PUSH
25426: LD_VAR 0 8
25430: PUSH
25431: LD_INT 3
25433: ARRAY
25434: PUSH
25435: LD_INT 0
25437: PUSH
25438: LD_INT 8
25440: PUSH
25441: LD_INT 9
25443: PUSH
25444: LD_INT 10
25446: PUSH
25447: LD_INT 11
25449: PUSH
25450: LD_INT 12
25452: PUSH
25453: LD_INT 13
25455: PUSH
25456: LD_INT 16
25458: PUSH
25459: LD_INT 17
25461: PUSH
25462: LD_INT 18
25464: PUSH
25465: LD_INT 19
25467: PUSH
25468: LD_INT 20
25470: PUSH
25471: LD_INT 21
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: IN
25489: NOT
25490: OR
25491: PUSH
25492: LD_VAR 0 8
25496: PUSH
25497: LD_INT 5
25499: ARRAY
25500: NOT
25501: OR
25502: PUSH
25503: LD_VAR 0 8
25507: PUSH
25508: LD_INT 6
25510: ARRAY
25511: PUSH
25512: LD_INT 1
25514: PUSH
25515: LD_INT 2
25517: PUSH
25518: LD_INT 7
25520: PUSH
25521: LD_INT 9
25523: PUSH
25524: LD_INT 10
25526: PUSH
25527: LD_INT 11
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: IN
25538: NOT
25539: OR
25540: IFFALSE 25546
// exit ;
25542: POP
25543: POP
25544: GO 25644
// end ;
25546: GO 25217
25548: POP
25549: POP
// side := GetSide ( depot ) ;
25550: LD_ADDR_VAR 0 9
25554: PUSH
25555: LD_VAR 0 1
25559: PPUSH
25560: CALL_OW 255
25564: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
25565: LD_VAR 0 9
25569: PPUSH
25570: LD_VAR 0 3
25574: PPUSH
25575: LD_VAR 0 4
25579: PPUSH
25580: LD_INT 20
25582: PPUSH
25583: CALL 18298 0 4
25587: PUSH
25588: LD_INT 4
25590: ARRAY
25591: IFFALSE 25595
// exit ;
25593: GO 25644
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
25595: LD_VAR 0 2
25599: PUSH
25600: LD_INT 29
25602: PUSH
25603: LD_INT 30
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: IN
25610: PUSH
25611: LD_VAR 0 3
25615: PPUSH
25616: LD_VAR 0 4
25620: PPUSH
25621: LD_VAR 0 9
25625: PPUSH
25626: CALL_OW 440
25630: NOT
25631: AND
25632: IFFALSE 25636
// exit ;
25634: GO 25644
// result := true ;
25636: LD_ADDR_VAR 0 6
25640: PUSH
25641: LD_INT 1
25643: ST_TO_ADDR
// end ;
25644: LD_VAR 0 6
25648: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
25649: LD_INT 0
25651: PPUSH
25652: PPUSH
25653: PPUSH
25654: PPUSH
25655: PPUSH
25656: PPUSH
25657: PPUSH
25658: PPUSH
25659: PPUSH
25660: PPUSH
25661: PPUSH
25662: PPUSH
25663: PPUSH
25664: PPUSH
25665: PPUSH
25666: PPUSH
25667: PPUSH
25668: PPUSH
25669: PPUSH
25670: PPUSH
25671: PPUSH
25672: PPUSH
25673: PPUSH
25674: PPUSH
25675: PPUSH
25676: PPUSH
25677: PPUSH
25678: PPUSH
25679: PPUSH
25680: PPUSH
25681: PPUSH
25682: PPUSH
25683: PPUSH
25684: PPUSH
25685: PPUSH
25686: PPUSH
25687: PPUSH
25688: PPUSH
25689: PPUSH
25690: PPUSH
25691: PPUSH
25692: PPUSH
25693: PPUSH
25694: PPUSH
25695: PPUSH
25696: PPUSH
25697: PPUSH
25698: PPUSH
25699: PPUSH
25700: PPUSH
25701: PPUSH
25702: PPUSH
25703: PPUSH
25704: PPUSH
25705: PPUSH
25706: PPUSH
25707: PPUSH
25708: PPUSH
// result = [ ] ;
25709: LD_ADDR_VAR 0 7
25713: PUSH
25714: EMPTY
25715: ST_TO_ADDR
// temp_list = [ ] ;
25716: LD_ADDR_VAR 0 9
25720: PUSH
25721: EMPTY
25722: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
25723: LD_VAR 0 4
25727: PUSH
25728: LD_INT 0
25730: PUSH
25731: LD_INT 1
25733: PUSH
25734: LD_INT 2
25736: PUSH
25737: LD_INT 3
25739: PUSH
25740: LD_INT 4
25742: PUSH
25743: LD_INT 5
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: IN
25754: NOT
25755: PUSH
25756: LD_VAR 0 1
25760: PUSH
25761: LD_INT 0
25763: PUSH
25764: LD_INT 1
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: IN
25771: PUSH
25772: LD_VAR 0 5
25776: PUSH
25777: LD_INT 1
25779: PUSH
25780: LD_INT 2
25782: PUSH
25783: LD_INT 3
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: LIST
25790: IN
25791: NOT
25792: AND
25793: OR
25794: IFFALSE 25798
// exit ;
25796: GO 44189
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
25798: LD_VAR 0 1
25802: PUSH
25803: LD_INT 6
25805: PUSH
25806: LD_INT 7
25808: PUSH
25809: LD_INT 8
25811: PUSH
25812: LD_INT 13
25814: PUSH
25815: LD_INT 12
25817: PUSH
25818: LD_INT 15
25820: PUSH
25821: LD_INT 11
25823: PUSH
25824: LD_INT 14
25826: PUSH
25827: LD_INT 10
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: IN
25841: IFFALSE 25851
// btype = b_lab ;
25843: LD_ADDR_VAR 0 1
25847: PUSH
25848: LD_INT 6
25850: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
25851: LD_VAR 0 6
25855: PUSH
25856: LD_INT 0
25858: PUSH
25859: LD_INT 1
25861: PUSH
25862: LD_INT 2
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: LIST
25869: IN
25870: NOT
25871: PUSH
25872: LD_VAR 0 1
25876: PUSH
25877: LD_INT 0
25879: PUSH
25880: LD_INT 1
25882: PUSH
25883: LD_INT 2
25885: PUSH
25886: LD_INT 3
25888: PUSH
25889: LD_INT 6
25891: PUSH
25892: LD_INT 36
25894: PUSH
25895: LD_INT 4
25897: PUSH
25898: LD_INT 5
25900: PUSH
25901: LD_INT 31
25903: PUSH
25904: LD_INT 32
25906: PUSH
25907: LD_INT 33
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: IN
25923: NOT
25924: PUSH
25925: LD_VAR 0 6
25929: PUSH
25930: LD_INT 1
25932: EQUAL
25933: AND
25934: OR
25935: PUSH
25936: LD_VAR 0 1
25940: PUSH
25941: LD_INT 2
25943: PUSH
25944: LD_INT 3
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: IN
25951: NOT
25952: PUSH
25953: LD_VAR 0 6
25957: PUSH
25958: LD_INT 2
25960: EQUAL
25961: AND
25962: OR
25963: IFFALSE 25973
// mode = 0 ;
25965: LD_ADDR_VAR 0 6
25969: PUSH
25970: LD_INT 0
25972: ST_TO_ADDR
// case mode of 0 :
25973: LD_VAR 0 6
25977: PUSH
25978: LD_INT 0
25980: DOUBLE
25981: EQUAL
25982: IFTRUE 25986
25984: GO 37439
25986: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25987: LD_ADDR_VAR 0 11
25991: PUSH
25992: LD_INT 0
25994: PUSH
25995: LD_INT 0
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 0
26004: PUSH
26005: LD_INT 1
26007: NEG
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 1
26015: PUSH
26016: LD_INT 0
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 1
26025: PUSH
26026: LD_INT 1
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 0
26035: PUSH
26036: LD_INT 1
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 1
26045: NEG
26046: PUSH
26047: LD_INT 0
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 1
26056: NEG
26057: PUSH
26058: LD_INT 1
26060: NEG
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 1
26068: NEG
26069: PUSH
26070: LD_INT 2
26072: NEG
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: LD_INT 0
26080: PUSH
26081: LD_INT 2
26083: NEG
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 1
26091: PUSH
26092: LD_INT 1
26094: NEG
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 1
26102: PUSH
26103: LD_INT 2
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 0
26112: PUSH
26113: LD_INT 2
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 1
26122: NEG
26123: PUSH
26124: LD_INT 1
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 1
26133: PUSH
26134: LD_INT 3
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 0
26143: PUSH
26144: LD_INT 3
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 1
26153: NEG
26154: PUSH
26155: LD_INT 2
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26180: LD_ADDR_VAR 0 12
26184: PUSH
26185: LD_INT 0
26187: PUSH
26188: LD_INT 0
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 0
26197: PUSH
26198: LD_INT 1
26200: NEG
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 1
26208: PUSH
26209: LD_INT 0
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 1
26218: PUSH
26219: LD_INT 1
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 0
26228: PUSH
26229: LD_INT 1
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 1
26238: NEG
26239: PUSH
26240: LD_INT 0
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 1
26249: NEG
26250: PUSH
26251: LD_INT 1
26253: NEG
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 1
26261: PUSH
26262: LD_INT 1
26264: NEG
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 2
26272: PUSH
26273: LD_INT 0
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: LD_INT 2
26282: PUSH
26283: LD_INT 1
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: LD_INT 1
26292: NEG
26293: PUSH
26294: LD_INT 1
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 2
26303: NEG
26304: PUSH
26305: LD_INT 0
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 2
26314: NEG
26315: PUSH
26316: LD_INT 1
26318: NEG
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: PUSH
26324: LD_INT 2
26326: NEG
26327: PUSH
26328: LD_INT 1
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: LD_INT 3
26337: NEG
26338: PUSH
26339: LD_INT 0
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 3
26348: NEG
26349: PUSH
26350: LD_INT 1
26352: NEG
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26376: LD_ADDR_VAR 0 13
26380: PUSH
26381: LD_INT 0
26383: PUSH
26384: LD_INT 0
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 0
26393: PUSH
26394: LD_INT 1
26396: NEG
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 1
26404: PUSH
26405: LD_INT 0
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 1
26414: PUSH
26415: LD_INT 1
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 0
26424: PUSH
26425: LD_INT 1
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: LD_INT 1
26434: NEG
26435: PUSH
26436: LD_INT 0
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 1
26445: NEG
26446: PUSH
26447: LD_INT 1
26449: NEG
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 1
26457: NEG
26458: PUSH
26459: LD_INT 2
26461: NEG
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 2
26469: PUSH
26470: LD_INT 1
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 2
26479: PUSH
26480: LD_INT 2
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 1
26489: PUSH
26490: LD_INT 2
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 2
26499: NEG
26500: PUSH
26501: LD_INT 1
26503: NEG
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 2
26511: NEG
26512: PUSH
26513: LD_INT 2
26515: NEG
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 2
26523: NEG
26524: PUSH
26525: LD_INT 3
26527: NEG
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 3
26535: NEG
26536: PUSH
26537: LD_INT 2
26539: NEG
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 3
26547: NEG
26548: PUSH
26549: LD_INT 3
26551: NEG
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26575: LD_ADDR_VAR 0 14
26579: PUSH
26580: LD_INT 0
26582: PUSH
26583: LD_INT 0
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 0
26592: PUSH
26593: LD_INT 1
26595: NEG
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 1
26603: PUSH
26604: LD_INT 0
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 1
26613: PUSH
26614: LD_INT 1
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 0
26623: PUSH
26624: LD_INT 1
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 1
26633: NEG
26634: PUSH
26635: LD_INT 0
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 1
26644: NEG
26645: PUSH
26646: LD_INT 1
26648: NEG
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 1
26656: NEG
26657: PUSH
26658: LD_INT 2
26660: NEG
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: LD_INT 0
26668: PUSH
26669: LD_INT 2
26671: NEG
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 1
26679: PUSH
26680: LD_INT 1
26682: NEG
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 1
26690: PUSH
26691: LD_INT 2
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 0
26700: PUSH
26701: LD_INT 2
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 1
26710: NEG
26711: PUSH
26712: LD_INT 1
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 1
26721: NEG
26722: PUSH
26723: LD_INT 3
26725: NEG
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 0
26733: PUSH
26734: LD_INT 3
26736: NEG
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 1
26744: PUSH
26745: LD_INT 2
26747: NEG
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26771: LD_ADDR_VAR 0 15
26775: PUSH
26776: LD_INT 0
26778: PUSH
26779: LD_INT 0
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 0
26788: PUSH
26789: LD_INT 1
26791: NEG
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 1
26799: PUSH
26800: LD_INT 0
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 1
26809: PUSH
26810: LD_INT 1
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: LD_INT 0
26819: PUSH
26820: LD_INT 1
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: LD_INT 1
26829: NEG
26830: PUSH
26831: LD_INT 0
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 1
26840: NEG
26841: PUSH
26842: LD_INT 1
26844: NEG
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 1
26852: PUSH
26853: LD_INT 1
26855: NEG
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: LD_INT 2
26863: PUSH
26864: LD_INT 0
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 2
26873: PUSH
26874: LD_INT 1
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 1
26883: NEG
26884: PUSH
26885: LD_INT 1
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: LD_INT 2
26894: NEG
26895: PUSH
26896: LD_INT 0
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 2
26905: NEG
26906: PUSH
26907: LD_INT 1
26909: NEG
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 2
26917: PUSH
26918: LD_INT 1
26920: NEG
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 3
26928: PUSH
26929: LD_INT 0
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 3
26938: PUSH
26939: LD_INT 1
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26964: LD_ADDR_VAR 0 16
26968: PUSH
26969: LD_INT 0
26971: PUSH
26972: LD_INT 0
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 0
26981: PUSH
26982: LD_INT 1
26984: NEG
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 1
26992: PUSH
26993: LD_INT 0
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: LD_INT 1
27002: PUSH
27003: LD_INT 1
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 0
27012: PUSH
27013: LD_INT 1
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: LD_INT 1
27022: NEG
27023: PUSH
27024: LD_INT 0
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 1
27033: NEG
27034: PUSH
27035: LD_INT 1
27037: NEG
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 1
27045: NEG
27046: PUSH
27047: LD_INT 2
27049: NEG
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: LD_INT 2
27057: PUSH
27058: LD_INT 1
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 2
27067: PUSH
27068: LD_INT 2
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 1
27077: PUSH
27078: LD_INT 2
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 2
27087: NEG
27088: PUSH
27089: LD_INT 1
27091: NEG
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 2
27099: NEG
27100: PUSH
27101: LD_INT 2
27103: NEG
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 3
27111: PUSH
27112: LD_INT 2
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 3
27121: PUSH
27122: LD_INT 3
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 2
27131: PUSH
27132: LD_INT 3
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27157: LD_ADDR_VAR 0 17
27161: PUSH
27162: LD_INT 0
27164: PUSH
27165: LD_INT 0
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 0
27174: PUSH
27175: LD_INT 1
27177: NEG
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 1
27185: PUSH
27186: LD_INT 0
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 1
27195: PUSH
27196: LD_INT 1
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 0
27205: PUSH
27206: LD_INT 1
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 1
27215: NEG
27216: PUSH
27217: LD_INT 0
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 1
27226: NEG
27227: PUSH
27228: LD_INT 1
27230: NEG
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 1
27238: NEG
27239: PUSH
27240: LD_INT 2
27242: NEG
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: LD_INT 0
27250: PUSH
27251: LD_INT 2
27253: NEG
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 1
27261: PUSH
27262: LD_INT 1
27264: NEG
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 2
27272: PUSH
27273: LD_INT 0
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 2
27282: PUSH
27283: LD_INT 1
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 2
27292: PUSH
27293: LD_INT 2
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 1
27302: PUSH
27303: LD_INT 2
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 0
27312: PUSH
27313: LD_INT 2
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: LD_INT 1
27322: NEG
27323: PUSH
27324: LD_INT 1
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 2
27333: NEG
27334: PUSH
27335: LD_INT 0
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 2
27344: NEG
27345: PUSH
27346: LD_INT 1
27348: NEG
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 2
27356: NEG
27357: PUSH
27358: LD_INT 2
27360: NEG
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27387: LD_ADDR_VAR 0 18
27391: PUSH
27392: LD_INT 0
27394: PUSH
27395: LD_INT 0
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 0
27404: PUSH
27405: LD_INT 1
27407: NEG
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 1
27415: PUSH
27416: LD_INT 0
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 1
27425: PUSH
27426: LD_INT 1
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 0
27435: PUSH
27436: LD_INT 1
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 1
27445: NEG
27446: PUSH
27447: LD_INT 0
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 1
27456: NEG
27457: PUSH
27458: LD_INT 1
27460: NEG
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 1
27468: NEG
27469: PUSH
27470: LD_INT 2
27472: NEG
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: LD_INT 2
27483: NEG
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 1
27491: PUSH
27492: LD_INT 1
27494: NEG
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 2
27502: PUSH
27503: LD_INT 0
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 2
27512: PUSH
27513: LD_INT 1
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 2
27522: PUSH
27523: LD_INT 2
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: LD_INT 1
27532: PUSH
27533: LD_INT 2
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: PUSH
27540: LD_INT 0
27542: PUSH
27543: LD_INT 2
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 1
27552: NEG
27553: PUSH
27554: LD_INT 1
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 2
27563: NEG
27564: PUSH
27565: LD_INT 0
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 2
27574: NEG
27575: PUSH
27576: LD_INT 1
27578: NEG
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 2
27586: NEG
27587: PUSH
27588: LD_INT 2
27590: NEG
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27617: LD_ADDR_VAR 0 19
27621: PUSH
27622: LD_INT 0
27624: PUSH
27625: LD_INT 0
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 0
27634: PUSH
27635: LD_INT 1
27637: NEG
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 1
27645: PUSH
27646: LD_INT 0
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 1
27655: PUSH
27656: LD_INT 1
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 0
27665: PUSH
27666: LD_INT 1
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 1
27675: NEG
27676: PUSH
27677: LD_INT 0
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 1
27686: NEG
27687: PUSH
27688: LD_INT 1
27690: NEG
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 1
27698: NEG
27699: PUSH
27700: LD_INT 2
27702: NEG
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 0
27710: PUSH
27711: LD_INT 2
27713: NEG
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 1
27721: PUSH
27722: LD_INT 1
27724: NEG
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 2
27732: PUSH
27733: LD_INT 0
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 2
27742: PUSH
27743: LD_INT 1
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 2
27752: PUSH
27753: LD_INT 2
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PUSH
27760: LD_INT 1
27762: PUSH
27763: LD_INT 2
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: PUSH
27770: LD_INT 0
27772: PUSH
27773: LD_INT 2
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 1
27782: NEG
27783: PUSH
27784: LD_INT 1
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 2
27793: NEG
27794: PUSH
27795: LD_INT 0
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: LD_INT 2
27804: NEG
27805: PUSH
27806: LD_INT 1
27808: NEG
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 2
27816: NEG
27817: PUSH
27818: LD_INT 2
27820: NEG
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27847: LD_ADDR_VAR 0 20
27851: PUSH
27852: LD_INT 0
27854: PUSH
27855: LD_INT 0
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PUSH
27862: LD_INT 0
27864: PUSH
27865: LD_INT 1
27867: NEG
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 1
27875: PUSH
27876: LD_INT 0
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 1
27885: PUSH
27886: LD_INT 1
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 0
27895: PUSH
27896: LD_INT 1
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 1
27905: NEG
27906: PUSH
27907: LD_INT 0
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: LD_INT 1
27916: NEG
27917: PUSH
27918: LD_INT 1
27920: NEG
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 1
27928: NEG
27929: PUSH
27930: LD_INT 2
27932: NEG
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 0
27940: PUSH
27941: LD_INT 2
27943: NEG
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 1
27951: PUSH
27952: LD_INT 1
27954: NEG
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 2
27962: PUSH
27963: LD_INT 0
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 2
27972: PUSH
27973: LD_INT 1
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 2
27982: PUSH
27983: LD_INT 2
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 1
27992: PUSH
27993: LD_INT 2
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 0
28002: PUSH
28003: LD_INT 2
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 1
28012: NEG
28013: PUSH
28014: LD_INT 1
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 2
28023: NEG
28024: PUSH
28025: LD_INT 0
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 2
28034: NEG
28035: PUSH
28036: LD_INT 1
28038: NEG
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 2
28046: NEG
28047: PUSH
28048: LD_INT 2
28050: NEG
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28077: LD_ADDR_VAR 0 21
28081: PUSH
28082: LD_INT 0
28084: PUSH
28085: LD_INT 0
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 0
28094: PUSH
28095: LD_INT 1
28097: NEG
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 1
28105: PUSH
28106: LD_INT 0
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 1
28115: PUSH
28116: LD_INT 1
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 0
28125: PUSH
28126: LD_INT 1
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 1
28135: NEG
28136: PUSH
28137: LD_INT 0
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_INT 1
28146: NEG
28147: PUSH
28148: LD_INT 1
28150: NEG
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 1
28158: NEG
28159: PUSH
28160: LD_INT 2
28162: NEG
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 0
28170: PUSH
28171: LD_INT 2
28173: NEG
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 1
28181: PUSH
28182: LD_INT 1
28184: NEG
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 2
28192: PUSH
28193: LD_INT 0
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 2
28202: PUSH
28203: LD_INT 1
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 2
28212: PUSH
28213: LD_INT 2
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 1
28222: PUSH
28223: LD_INT 2
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: LD_INT 0
28232: PUSH
28233: LD_INT 2
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: LD_INT 1
28242: NEG
28243: PUSH
28244: LD_INT 1
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 2
28253: NEG
28254: PUSH
28255: LD_INT 0
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 2
28264: NEG
28265: PUSH
28266: LD_INT 1
28268: NEG
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: LD_INT 2
28276: NEG
28277: PUSH
28278: LD_INT 2
28280: NEG
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28307: LD_ADDR_VAR 0 22
28311: PUSH
28312: LD_INT 0
28314: PUSH
28315: LD_INT 0
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 0
28324: PUSH
28325: LD_INT 1
28327: NEG
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 1
28335: PUSH
28336: LD_INT 0
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 1
28345: PUSH
28346: LD_INT 1
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: LD_INT 0
28355: PUSH
28356: LD_INT 1
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: LD_INT 1
28365: NEG
28366: PUSH
28367: LD_INT 0
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 1
28376: NEG
28377: PUSH
28378: LD_INT 1
28380: NEG
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 1
28388: NEG
28389: PUSH
28390: LD_INT 2
28392: NEG
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 0
28400: PUSH
28401: LD_INT 2
28403: NEG
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 1
28411: PUSH
28412: LD_INT 1
28414: NEG
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 2
28422: PUSH
28423: LD_INT 0
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 2
28432: PUSH
28433: LD_INT 1
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 2
28442: PUSH
28443: LD_INT 2
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 1
28452: PUSH
28453: LD_INT 2
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 0
28462: PUSH
28463: LD_INT 2
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: LD_INT 1
28472: NEG
28473: PUSH
28474: LD_INT 1
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 2
28483: NEG
28484: PUSH
28485: LD_INT 0
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 2
28494: NEG
28495: PUSH
28496: LD_INT 1
28498: NEG
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 2
28506: NEG
28507: PUSH
28508: LD_INT 2
28510: NEG
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28537: LD_ADDR_VAR 0 23
28541: PUSH
28542: LD_INT 0
28544: PUSH
28545: LD_INT 0
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: LD_INT 0
28554: PUSH
28555: LD_INT 1
28557: NEG
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 1
28565: PUSH
28566: LD_INT 0
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 1
28575: PUSH
28576: LD_INT 1
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 0
28585: PUSH
28586: LD_INT 1
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 1
28595: NEG
28596: PUSH
28597: LD_INT 0
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 1
28606: NEG
28607: PUSH
28608: LD_INT 1
28610: NEG
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 1
28618: NEG
28619: PUSH
28620: LD_INT 2
28622: NEG
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 0
28630: PUSH
28631: LD_INT 2
28633: NEG
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 1
28641: PUSH
28642: LD_INT 1
28644: NEG
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 2
28652: PUSH
28653: LD_INT 0
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 2
28662: PUSH
28663: LD_INT 1
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 2
28672: PUSH
28673: LD_INT 2
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 1
28682: PUSH
28683: LD_INT 2
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 0
28692: PUSH
28693: LD_INT 2
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 1
28702: NEG
28703: PUSH
28704: LD_INT 1
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 2
28713: NEG
28714: PUSH
28715: LD_INT 0
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 2
28724: NEG
28725: PUSH
28726: LD_INT 1
28728: NEG
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 2
28736: NEG
28737: PUSH
28738: LD_INT 2
28740: NEG
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: LD_INT 2
28748: NEG
28749: PUSH
28750: LD_INT 3
28752: NEG
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 1
28760: NEG
28761: PUSH
28762: LD_INT 3
28764: NEG
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 1
28772: PUSH
28773: LD_INT 2
28775: NEG
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 2
28783: PUSH
28784: LD_INT 1
28786: NEG
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
28817: LD_ADDR_VAR 0 24
28821: PUSH
28822: LD_INT 0
28824: PUSH
28825: LD_INT 0
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 0
28834: PUSH
28835: LD_INT 1
28837: NEG
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: LD_INT 1
28845: PUSH
28846: LD_INT 0
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: LD_INT 1
28855: PUSH
28856: LD_INT 1
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 0
28865: PUSH
28866: LD_INT 1
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 1
28875: NEG
28876: PUSH
28877: LD_INT 0
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 1
28886: NEG
28887: PUSH
28888: LD_INT 1
28890: NEG
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 1
28898: NEG
28899: PUSH
28900: LD_INT 2
28902: NEG
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 0
28910: PUSH
28911: LD_INT 2
28913: NEG
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 1
28921: PUSH
28922: LD_INT 1
28924: NEG
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 2
28932: PUSH
28933: LD_INT 0
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 2
28942: PUSH
28943: LD_INT 1
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 2
28952: PUSH
28953: LD_INT 2
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: LD_INT 1
28962: PUSH
28963: LD_INT 2
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 0
28972: PUSH
28973: LD_INT 2
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 1
28982: NEG
28983: PUSH
28984: LD_INT 1
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 2
28993: NEG
28994: PUSH
28995: LD_INT 0
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 2
29004: NEG
29005: PUSH
29006: LD_INT 1
29008: NEG
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 2
29016: NEG
29017: PUSH
29018: LD_INT 2
29020: NEG
29021: PUSH
29022: EMPTY
29023: LIST
29024: LIST
29025: PUSH
29026: LD_INT 1
29028: PUSH
29029: LD_INT 2
29031: NEG
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 2
29039: PUSH
29040: LD_INT 1
29042: NEG
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PUSH
29048: LD_INT 3
29050: PUSH
29051: LD_INT 1
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 3
29060: PUSH
29061: LD_INT 2
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
29093: LD_ADDR_VAR 0 25
29097: PUSH
29098: LD_INT 0
29100: PUSH
29101: LD_INT 0
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 0
29110: PUSH
29111: LD_INT 1
29113: NEG
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 1
29121: PUSH
29122: LD_INT 0
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 1
29131: PUSH
29132: LD_INT 1
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 0
29141: PUSH
29142: LD_INT 1
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 1
29151: NEG
29152: PUSH
29153: LD_INT 0
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 1
29162: NEG
29163: PUSH
29164: LD_INT 1
29166: NEG
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 1
29174: NEG
29175: PUSH
29176: LD_INT 2
29178: NEG
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 0
29186: PUSH
29187: LD_INT 2
29189: NEG
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 1
29197: PUSH
29198: LD_INT 1
29200: NEG
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: LD_INT 2
29208: PUSH
29209: LD_INT 0
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 2
29218: PUSH
29219: LD_INT 1
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 2
29228: PUSH
29229: LD_INT 2
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 1
29238: PUSH
29239: LD_INT 2
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 0
29248: PUSH
29249: LD_INT 2
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 1
29258: NEG
29259: PUSH
29260: LD_INT 1
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 2
29269: NEG
29270: PUSH
29271: LD_INT 0
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: LD_INT 2
29280: NEG
29281: PUSH
29282: LD_INT 1
29284: NEG
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 2
29292: NEG
29293: PUSH
29294: LD_INT 2
29296: NEG
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: LD_INT 3
29304: PUSH
29305: LD_INT 1
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: LD_INT 3
29314: PUSH
29315: LD_INT 2
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 2
29324: PUSH
29325: LD_INT 3
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 1
29334: PUSH
29335: LD_INT 3
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29367: LD_ADDR_VAR 0 26
29371: PUSH
29372: LD_INT 0
29374: PUSH
29375: LD_INT 0
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 0
29384: PUSH
29385: LD_INT 1
29387: NEG
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 1
29395: PUSH
29396: LD_INT 0
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 1
29405: PUSH
29406: LD_INT 1
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 0
29415: PUSH
29416: LD_INT 1
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 1
29425: NEG
29426: PUSH
29427: LD_INT 0
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 1
29436: NEG
29437: PUSH
29438: LD_INT 1
29440: NEG
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 1
29448: NEG
29449: PUSH
29450: LD_INT 2
29452: NEG
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 0
29460: PUSH
29461: LD_INT 2
29463: NEG
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 1
29471: PUSH
29472: LD_INT 1
29474: NEG
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 2
29482: PUSH
29483: LD_INT 0
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 2
29492: PUSH
29493: LD_INT 1
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: LD_INT 2
29502: PUSH
29503: LD_INT 2
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 1
29512: PUSH
29513: LD_INT 2
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 0
29522: PUSH
29523: LD_INT 2
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 1
29532: NEG
29533: PUSH
29534: LD_INT 1
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 2
29543: NEG
29544: PUSH
29545: LD_INT 0
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 2
29554: NEG
29555: PUSH
29556: LD_INT 1
29558: NEG
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 2
29566: NEG
29567: PUSH
29568: LD_INT 2
29570: NEG
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 2
29578: PUSH
29579: LD_INT 3
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 1
29588: PUSH
29589: LD_INT 3
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 1
29598: NEG
29599: PUSH
29600: LD_INT 2
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: LD_INT 2
29609: NEG
29610: PUSH
29611: LD_INT 1
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29643: LD_ADDR_VAR 0 27
29647: PUSH
29648: LD_INT 0
29650: PUSH
29651: LD_INT 0
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 0
29660: PUSH
29661: LD_INT 1
29663: NEG
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: LD_INT 1
29671: PUSH
29672: LD_INT 0
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PUSH
29679: LD_INT 1
29681: PUSH
29682: LD_INT 1
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 0
29691: PUSH
29692: LD_INT 1
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 1
29701: NEG
29702: PUSH
29703: LD_INT 0
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 1
29712: NEG
29713: PUSH
29714: LD_INT 1
29716: NEG
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: LD_INT 1
29724: NEG
29725: PUSH
29726: LD_INT 2
29728: NEG
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 0
29736: PUSH
29737: LD_INT 2
29739: NEG
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 1
29747: PUSH
29748: LD_INT 1
29750: NEG
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 2
29758: PUSH
29759: LD_INT 0
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: LD_INT 2
29768: PUSH
29769: LD_INT 1
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 2
29778: PUSH
29779: LD_INT 2
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 1
29788: PUSH
29789: LD_INT 2
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 0
29798: PUSH
29799: LD_INT 2
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 1
29808: NEG
29809: PUSH
29810: LD_INT 1
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 2
29819: NEG
29820: PUSH
29821: LD_INT 0
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 2
29830: NEG
29831: PUSH
29832: LD_INT 1
29834: NEG
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 2
29842: NEG
29843: PUSH
29844: LD_INT 2
29846: NEG
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 1
29854: NEG
29855: PUSH
29856: LD_INT 2
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 2
29865: NEG
29866: PUSH
29867: LD_INT 1
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 3
29876: NEG
29877: PUSH
29878: LD_INT 1
29880: NEG
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 3
29888: NEG
29889: PUSH
29890: LD_INT 2
29892: NEG
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29923: LD_ADDR_VAR 0 28
29927: PUSH
29928: LD_INT 0
29930: PUSH
29931: LD_INT 0
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 0
29940: PUSH
29941: LD_INT 1
29943: NEG
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 1
29951: PUSH
29952: LD_INT 0
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 1
29961: PUSH
29962: LD_INT 1
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 0
29971: PUSH
29972: LD_INT 1
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 1
29981: NEG
29982: PUSH
29983: LD_INT 0
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 1
29992: NEG
29993: PUSH
29994: LD_INT 1
29996: NEG
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 1
30004: NEG
30005: PUSH
30006: LD_INT 2
30008: NEG
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: LD_INT 0
30016: PUSH
30017: LD_INT 2
30019: NEG
30020: PUSH
30021: EMPTY
30022: LIST
30023: LIST
30024: PUSH
30025: LD_INT 1
30027: PUSH
30028: LD_INT 1
30030: NEG
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 2
30038: PUSH
30039: LD_INT 0
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 2
30048: PUSH
30049: LD_INT 1
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 2
30058: PUSH
30059: LD_INT 2
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 1
30068: PUSH
30069: LD_INT 2
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 0
30078: PUSH
30079: LD_INT 2
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 1
30088: NEG
30089: PUSH
30090: LD_INT 1
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 2
30099: NEG
30100: PUSH
30101: LD_INT 0
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 2
30110: NEG
30111: PUSH
30112: LD_INT 1
30114: NEG
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 2
30122: NEG
30123: PUSH
30124: LD_INT 2
30126: NEG
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 2
30134: NEG
30135: PUSH
30136: LD_INT 3
30138: NEG
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 1
30146: NEG
30147: PUSH
30148: LD_INT 3
30150: NEG
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 3
30158: NEG
30159: PUSH
30160: LD_INT 1
30162: NEG
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 3
30170: NEG
30171: PUSH
30172: LD_INT 2
30174: NEG
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30205: LD_ADDR_VAR 0 29
30209: PUSH
30210: LD_INT 0
30212: PUSH
30213: LD_INT 0
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 0
30222: PUSH
30223: LD_INT 1
30225: NEG
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 1
30233: PUSH
30234: LD_INT 0
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 1
30243: PUSH
30244: LD_INT 1
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 0
30253: PUSH
30254: LD_INT 1
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 1
30263: NEG
30264: PUSH
30265: LD_INT 0
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 1
30274: NEG
30275: PUSH
30276: LD_INT 1
30278: NEG
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 1
30286: NEG
30287: PUSH
30288: LD_INT 2
30290: NEG
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 0
30298: PUSH
30299: LD_INT 2
30301: NEG
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 1
30309: PUSH
30310: LD_INT 1
30312: NEG
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: LD_INT 2
30320: PUSH
30321: LD_INT 0
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 2
30330: PUSH
30331: LD_INT 1
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: LD_INT 1
30340: PUSH
30341: LD_INT 2
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 0
30350: PUSH
30351: LD_INT 2
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: LD_INT 1
30360: NEG
30361: PUSH
30362: LD_INT 1
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 2
30371: NEG
30372: PUSH
30373: LD_INT 1
30375: NEG
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 2
30383: NEG
30384: PUSH
30385: LD_INT 2
30387: NEG
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 2
30395: NEG
30396: PUSH
30397: LD_INT 3
30399: NEG
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 2
30407: PUSH
30408: LD_INT 1
30410: NEG
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 3
30418: PUSH
30419: LD_INT 1
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 1
30428: PUSH
30429: LD_INT 3
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 1
30438: NEG
30439: PUSH
30440: LD_INT 2
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 3
30449: NEG
30450: PUSH
30451: LD_INT 2
30453: NEG
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30484: LD_ADDR_VAR 0 30
30488: PUSH
30489: LD_INT 0
30491: PUSH
30492: LD_INT 0
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 0
30501: PUSH
30502: LD_INT 1
30504: NEG
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 1
30512: PUSH
30513: LD_INT 0
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 1
30522: PUSH
30523: LD_INT 1
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 0
30532: PUSH
30533: LD_INT 1
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 1
30542: NEG
30543: PUSH
30544: LD_INT 0
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 1
30553: NEG
30554: PUSH
30555: LD_INT 1
30557: NEG
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 1
30565: NEG
30566: PUSH
30567: LD_INT 2
30569: NEG
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 0
30577: PUSH
30578: LD_INT 2
30580: NEG
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 1
30588: PUSH
30589: LD_INT 1
30591: NEG
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 2
30599: PUSH
30600: LD_INT 0
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 2
30609: PUSH
30610: LD_INT 1
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 2
30619: PUSH
30620: LD_INT 2
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 1
30629: PUSH
30630: LD_INT 2
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 1
30639: NEG
30640: PUSH
30641: LD_INT 1
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 2
30650: NEG
30651: PUSH
30652: LD_INT 0
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 2
30661: NEG
30662: PUSH
30663: LD_INT 1
30665: NEG
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 1
30673: NEG
30674: PUSH
30675: LD_INT 3
30677: NEG
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 1
30685: PUSH
30686: LD_INT 2
30688: NEG
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 3
30696: PUSH
30697: LD_INT 2
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 2
30706: PUSH
30707: LD_INT 3
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 2
30716: NEG
30717: PUSH
30718: LD_INT 1
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 3
30727: NEG
30728: PUSH
30729: LD_INT 1
30731: NEG
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30762: LD_ADDR_VAR 0 31
30766: PUSH
30767: LD_INT 0
30769: PUSH
30770: LD_INT 0
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 0
30779: PUSH
30780: LD_INT 1
30782: NEG
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 1
30790: PUSH
30791: LD_INT 0
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 1
30800: PUSH
30801: LD_INT 1
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 0
30810: PUSH
30811: LD_INT 1
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 1
30820: NEG
30821: PUSH
30822: LD_INT 0
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 1
30831: NEG
30832: PUSH
30833: LD_INT 1
30835: NEG
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 1
30843: NEG
30844: PUSH
30845: LD_INT 2
30847: NEG
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 1
30855: PUSH
30856: LD_INT 1
30858: NEG
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 2
30866: PUSH
30867: LD_INT 0
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 2
30876: PUSH
30877: LD_INT 1
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 2
30886: PUSH
30887: LD_INT 2
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 1
30896: PUSH
30897: LD_INT 2
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 0
30906: PUSH
30907: LD_INT 2
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 1
30916: NEG
30917: PUSH
30918: LD_INT 1
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: LD_INT 2
30927: NEG
30928: PUSH
30929: LD_INT 1
30931: NEG
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 2
30939: NEG
30940: PUSH
30941: LD_INT 2
30943: NEG
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 2
30951: NEG
30952: PUSH
30953: LD_INT 3
30955: NEG
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 2
30963: PUSH
30964: LD_INT 1
30966: NEG
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 3
30974: PUSH
30975: LD_INT 1
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 1
30984: PUSH
30985: LD_INT 3
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 1
30994: NEG
30995: PUSH
30996: LD_INT 2
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 3
31005: NEG
31006: PUSH
31007: LD_INT 2
31009: NEG
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31040: LD_ADDR_VAR 0 32
31044: PUSH
31045: LD_INT 0
31047: PUSH
31048: LD_INT 0
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 0
31057: PUSH
31058: LD_INT 1
31060: NEG
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 1
31068: PUSH
31069: LD_INT 0
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 1
31078: PUSH
31079: LD_INT 1
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 0
31088: PUSH
31089: LD_INT 1
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 1
31098: NEG
31099: PUSH
31100: LD_INT 0
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 1
31109: NEG
31110: PUSH
31111: LD_INT 1
31113: NEG
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 1
31121: NEG
31122: PUSH
31123: LD_INT 2
31125: NEG
31126: PUSH
31127: EMPTY
31128: LIST
31129: LIST
31130: PUSH
31131: LD_INT 0
31133: PUSH
31134: LD_INT 2
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 1
31144: PUSH
31145: LD_INT 1
31147: NEG
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 2
31155: PUSH
31156: LD_INT 1
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 2
31165: PUSH
31166: LD_INT 2
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 1
31175: PUSH
31176: LD_INT 2
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 0
31185: PUSH
31186: LD_INT 2
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 1
31195: NEG
31196: PUSH
31197: LD_INT 1
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 2
31206: NEG
31207: PUSH
31208: LD_INT 0
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 2
31217: NEG
31218: PUSH
31219: LD_INT 1
31221: NEG
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 1
31229: NEG
31230: PUSH
31231: LD_INT 3
31233: NEG
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: LD_INT 1
31241: PUSH
31242: LD_INT 2
31244: NEG
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 3
31252: PUSH
31253: LD_INT 2
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 2
31262: PUSH
31263: LD_INT 3
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 2
31272: NEG
31273: PUSH
31274: LD_INT 1
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 3
31283: NEG
31284: PUSH
31285: LD_INT 1
31287: NEG
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31318: LD_ADDR_VAR 0 33
31322: PUSH
31323: LD_INT 0
31325: PUSH
31326: LD_INT 0
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 0
31335: PUSH
31336: LD_INT 1
31338: NEG
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 1
31346: PUSH
31347: LD_INT 0
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 1
31356: PUSH
31357: LD_INT 1
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 0
31366: PUSH
31367: LD_INT 1
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 1
31376: NEG
31377: PUSH
31378: LD_INT 0
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 1
31387: NEG
31388: PUSH
31389: LD_INT 1
31391: NEG
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 1
31399: NEG
31400: PUSH
31401: LD_INT 2
31403: NEG
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 1
31411: PUSH
31412: LD_INT 1
31414: NEG
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 2
31422: PUSH
31423: LD_INT 0
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 2
31432: PUSH
31433: LD_INT 1
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 1
31442: PUSH
31443: LD_INT 2
31445: PUSH
31446: EMPTY
31447: LIST
31448: LIST
31449: PUSH
31450: LD_INT 0
31452: PUSH
31453: LD_INT 2
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 1
31462: NEG
31463: PUSH
31464: LD_INT 1
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 2
31473: NEG
31474: PUSH
31475: LD_INT 0
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 2
31484: NEG
31485: PUSH
31486: LD_INT 1
31488: NEG
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 2
31496: NEG
31497: PUSH
31498: LD_INT 2
31500: NEG
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 2
31508: NEG
31509: PUSH
31510: LD_INT 3
31512: NEG
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 2
31520: PUSH
31521: LD_INT 1
31523: NEG
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 3
31531: PUSH
31532: LD_INT 1
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: LD_INT 1
31541: PUSH
31542: LD_INT 3
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: LD_INT 1
31551: NEG
31552: PUSH
31553: LD_INT 2
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 3
31562: NEG
31563: PUSH
31564: LD_INT 2
31566: NEG
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31597: LD_ADDR_VAR 0 34
31601: PUSH
31602: LD_INT 0
31604: PUSH
31605: LD_INT 0
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 0
31614: PUSH
31615: LD_INT 1
31617: NEG
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 1
31625: PUSH
31626: LD_INT 0
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 1
31635: PUSH
31636: LD_INT 1
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 0
31645: PUSH
31646: LD_INT 1
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 1
31655: NEG
31656: PUSH
31657: LD_INT 0
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 1
31666: NEG
31667: PUSH
31668: LD_INT 1
31670: NEG
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 1
31678: NEG
31679: PUSH
31680: LD_INT 2
31682: NEG
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 0
31690: PUSH
31691: LD_INT 2
31693: NEG
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 1
31701: PUSH
31702: LD_INT 1
31704: NEG
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 2
31712: PUSH
31713: LD_INT 1
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 2
31722: PUSH
31723: LD_INT 2
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 1
31732: PUSH
31733: LD_INT 2
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 1
31742: NEG
31743: PUSH
31744: LD_INT 1
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 2
31753: NEG
31754: PUSH
31755: LD_INT 0
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 2
31764: NEG
31765: PUSH
31766: LD_INT 1
31768: NEG
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 2
31776: NEG
31777: PUSH
31778: LD_INT 2
31780: NEG
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 1
31788: NEG
31789: PUSH
31790: LD_INT 3
31792: NEG
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 1
31800: PUSH
31801: LD_INT 2
31803: NEG
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 3
31811: PUSH
31812: LD_INT 2
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 2
31821: PUSH
31822: LD_INT 3
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 2
31831: NEG
31832: PUSH
31833: LD_INT 1
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 3
31842: NEG
31843: PUSH
31844: LD_INT 1
31846: NEG
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31877: LD_ADDR_VAR 0 35
31881: PUSH
31882: LD_INT 0
31884: PUSH
31885: LD_INT 0
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 0
31894: PUSH
31895: LD_INT 1
31897: NEG
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 1
31905: PUSH
31906: LD_INT 0
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 1
31915: PUSH
31916: LD_INT 1
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 0
31925: PUSH
31926: LD_INT 1
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 1
31935: NEG
31936: PUSH
31937: LD_INT 0
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 1
31946: NEG
31947: PUSH
31948: LD_INT 1
31950: NEG
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 2
31958: PUSH
31959: LD_INT 1
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: LD_INT 2
31968: NEG
31969: PUSH
31970: LD_INT 1
31972: NEG
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31989: LD_ADDR_VAR 0 36
31993: PUSH
31994: LD_INT 0
31996: PUSH
31997: LD_INT 0
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 0
32006: PUSH
32007: LD_INT 1
32009: NEG
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 1
32017: PUSH
32018: LD_INT 0
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 1
32027: PUSH
32028: LD_INT 1
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 0
32037: PUSH
32038: LD_INT 1
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 1
32047: NEG
32048: PUSH
32049: LD_INT 0
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 1
32058: NEG
32059: PUSH
32060: LD_INT 1
32062: NEG
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 1
32070: NEG
32071: PUSH
32072: LD_INT 2
32074: NEG
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 1
32082: PUSH
32083: LD_INT 2
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32101: LD_ADDR_VAR 0 37
32105: PUSH
32106: LD_INT 0
32108: PUSH
32109: LD_INT 0
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 0
32118: PUSH
32119: LD_INT 1
32121: NEG
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 1
32129: PUSH
32130: LD_INT 0
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 1
32139: PUSH
32140: LD_INT 1
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 0
32149: PUSH
32150: LD_INT 1
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 1
32159: NEG
32160: PUSH
32161: LD_INT 0
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 1
32170: NEG
32171: PUSH
32172: LD_INT 1
32174: NEG
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 1
32182: PUSH
32183: LD_INT 1
32185: NEG
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 1
32193: NEG
32194: PUSH
32195: LD_INT 1
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32213: LD_ADDR_VAR 0 38
32217: PUSH
32218: LD_INT 0
32220: PUSH
32221: LD_INT 0
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 0
32230: PUSH
32231: LD_INT 1
32233: NEG
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 1
32241: PUSH
32242: LD_INT 0
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 1
32251: PUSH
32252: LD_INT 1
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 0
32261: PUSH
32262: LD_INT 1
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 1
32271: NEG
32272: PUSH
32273: LD_INT 0
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 1
32282: NEG
32283: PUSH
32284: LD_INT 1
32286: NEG
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 2
32294: PUSH
32295: LD_INT 1
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 2
32304: NEG
32305: PUSH
32306: LD_INT 1
32308: NEG
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32325: LD_ADDR_VAR 0 39
32329: PUSH
32330: LD_INT 0
32332: PUSH
32333: LD_INT 0
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 0
32342: PUSH
32343: LD_INT 1
32345: NEG
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 1
32353: PUSH
32354: LD_INT 0
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 1
32363: PUSH
32364: LD_INT 1
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 0
32373: PUSH
32374: LD_INT 1
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 1
32383: NEG
32384: PUSH
32385: LD_INT 0
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 1
32394: NEG
32395: PUSH
32396: LD_INT 1
32398: NEG
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PUSH
32404: LD_INT 1
32406: NEG
32407: PUSH
32408: LD_INT 2
32410: NEG
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 1
32418: PUSH
32419: LD_INT 2
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32437: LD_ADDR_VAR 0 40
32441: PUSH
32442: LD_INT 0
32444: PUSH
32445: LD_INT 0
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 0
32454: PUSH
32455: LD_INT 1
32457: NEG
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 1
32465: PUSH
32466: LD_INT 0
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 1
32475: PUSH
32476: LD_INT 1
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 0
32485: PUSH
32486: LD_INT 1
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: PUSH
32493: LD_INT 1
32495: NEG
32496: PUSH
32497: LD_INT 0
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 1
32506: NEG
32507: PUSH
32508: LD_INT 1
32510: NEG
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 1
32518: PUSH
32519: LD_INT 1
32521: NEG
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 1
32529: NEG
32530: PUSH
32531: LD_INT 1
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32549: LD_ADDR_VAR 0 41
32553: PUSH
32554: LD_INT 0
32556: PUSH
32557: LD_INT 0
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 0
32566: PUSH
32567: LD_INT 1
32569: NEG
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 1
32577: PUSH
32578: LD_INT 0
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 1
32587: PUSH
32588: LD_INT 1
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 0
32597: PUSH
32598: LD_INT 1
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 1
32607: NEG
32608: PUSH
32609: LD_INT 0
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 1
32618: NEG
32619: PUSH
32620: LD_INT 1
32622: NEG
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 1
32630: NEG
32631: PUSH
32632: LD_INT 2
32634: NEG
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 1
32642: PUSH
32643: LD_INT 1
32645: NEG
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 2
32653: PUSH
32654: LD_INT 0
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 2
32663: PUSH
32664: LD_INT 1
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 2
32673: PUSH
32674: LD_INT 2
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 1
32683: PUSH
32684: LD_INT 2
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 1
32693: NEG
32694: PUSH
32695: LD_INT 1
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 2
32704: NEG
32705: PUSH
32706: LD_INT 0
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 2
32715: NEG
32716: PUSH
32717: LD_INT 1
32719: NEG
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 2
32727: NEG
32728: PUSH
32729: LD_INT 2
32731: NEG
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 2
32739: NEG
32740: PUSH
32741: LD_INT 3
32743: NEG
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 2
32751: PUSH
32752: LD_INT 1
32754: NEG
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 3
32762: PUSH
32763: LD_INT 0
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 3
32772: PUSH
32773: LD_INT 1
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 3
32782: PUSH
32783: LD_INT 2
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 3
32792: PUSH
32793: LD_INT 3
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 2
32802: PUSH
32803: LD_INT 3
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 2
32812: NEG
32813: PUSH
32814: LD_INT 1
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 3
32823: NEG
32824: PUSH
32825: LD_INT 0
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 3
32834: NEG
32835: PUSH
32836: LD_INT 1
32838: NEG
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: PUSH
32844: LD_INT 3
32846: NEG
32847: PUSH
32848: LD_INT 2
32850: NEG
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 3
32858: NEG
32859: PUSH
32860: LD_INT 3
32862: NEG
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32899: LD_ADDR_VAR 0 42
32903: PUSH
32904: LD_INT 0
32906: PUSH
32907: LD_INT 0
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 0
32916: PUSH
32917: LD_INT 1
32919: NEG
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 1
32927: PUSH
32928: LD_INT 0
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 1
32937: PUSH
32938: LD_INT 1
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 0
32947: PUSH
32948: LD_INT 1
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 1
32957: NEG
32958: PUSH
32959: LD_INT 0
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 1
32968: NEG
32969: PUSH
32970: LD_INT 1
32972: NEG
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 1
32980: NEG
32981: PUSH
32982: LD_INT 2
32984: NEG
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 0
32992: PUSH
32993: LD_INT 2
32995: NEG
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 1
33003: PUSH
33004: LD_INT 1
33006: NEG
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 2
33014: PUSH
33015: LD_INT 1
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 2
33024: PUSH
33025: LD_INT 2
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 1
33034: PUSH
33035: LD_INT 2
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 0
33044: PUSH
33045: LD_INT 2
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 1
33054: NEG
33055: PUSH
33056: LD_INT 1
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 2
33065: NEG
33066: PUSH
33067: LD_INT 1
33069: NEG
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 2
33077: NEG
33078: PUSH
33079: LD_INT 2
33081: NEG
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 2
33089: NEG
33090: PUSH
33091: LD_INT 3
33093: NEG
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 1
33101: NEG
33102: PUSH
33103: LD_INT 3
33105: NEG
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 0
33113: PUSH
33114: LD_INT 3
33116: NEG
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 1
33124: PUSH
33125: LD_INT 2
33127: NEG
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 3
33135: PUSH
33136: LD_INT 2
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 3
33145: PUSH
33146: LD_INT 3
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 2
33155: PUSH
33156: LD_INT 3
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 1
33165: PUSH
33166: LD_INT 3
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 0
33175: PUSH
33176: LD_INT 3
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 1
33185: NEG
33186: PUSH
33187: LD_INT 2
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 3
33196: NEG
33197: PUSH
33198: LD_INT 2
33200: NEG
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 3
33208: NEG
33209: PUSH
33210: LD_INT 3
33212: NEG
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33249: LD_ADDR_VAR 0 43
33253: PUSH
33254: LD_INT 0
33256: PUSH
33257: LD_INT 0
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 0
33266: PUSH
33267: LD_INT 1
33269: NEG
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 1
33277: PUSH
33278: LD_INT 0
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 1
33287: PUSH
33288: LD_INT 1
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 0
33297: PUSH
33298: LD_INT 1
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 1
33307: NEG
33308: PUSH
33309: LD_INT 0
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 1
33318: NEG
33319: PUSH
33320: LD_INT 1
33322: NEG
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 1
33330: NEG
33331: PUSH
33332: LD_INT 2
33334: NEG
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 0
33342: PUSH
33343: LD_INT 2
33345: NEG
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 1
33353: PUSH
33354: LD_INT 1
33356: NEG
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 2
33364: PUSH
33365: LD_INT 0
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 2
33374: PUSH
33375: LD_INT 1
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 1
33384: PUSH
33385: LD_INT 2
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 0
33394: PUSH
33395: LD_INT 2
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 1
33404: NEG
33405: PUSH
33406: LD_INT 1
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 2
33415: NEG
33416: PUSH
33417: LD_INT 0
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 2
33426: NEG
33427: PUSH
33428: LD_INT 1
33430: NEG
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: LD_INT 1
33438: NEG
33439: PUSH
33440: LD_INT 3
33442: NEG
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 0
33450: PUSH
33451: LD_INT 3
33453: NEG
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 1
33461: PUSH
33462: LD_INT 2
33464: NEG
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 2
33472: PUSH
33473: LD_INT 1
33475: NEG
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 3
33483: PUSH
33484: LD_INT 0
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 3
33493: PUSH
33494: LD_INT 1
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 1
33503: PUSH
33504: LD_INT 3
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 0
33513: PUSH
33514: LD_INT 3
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 1
33523: NEG
33524: PUSH
33525: LD_INT 2
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 2
33534: NEG
33535: PUSH
33536: LD_INT 1
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 3
33545: NEG
33546: PUSH
33547: LD_INT 0
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 3
33556: NEG
33557: PUSH
33558: LD_INT 1
33560: NEG
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33597: LD_ADDR_VAR 0 44
33601: PUSH
33602: LD_INT 0
33604: PUSH
33605: LD_INT 0
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 0
33614: PUSH
33615: LD_INT 1
33617: NEG
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 1
33625: PUSH
33626: LD_INT 0
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 1
33635: PUSH
33636: LD_INT 1
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 0
33645: PUSH
33646: LD_INT 1
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 1
33655: NEG
33656: PUSH
33657: LD_INT 0
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: LD_INT 1
33666: NEG
33667: PUSH
33668: LD_INT 1
33670: NEG
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 1
33678: NEG
33679: PUSH
33680: LD_INT 2
33682: NEG
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 1
33690: PUSH
33691: LD_INT 1
33693: NEG
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 2
33701: PUSH
33702: LD_INT 0
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 2
33711: PUSH
33712: LD_INT 1
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 2
33721: PUSH
33722: LD_INT 2
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 1
33731: PUSH
33732: LD_INT 2
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 1
33741: NEG
33742: PUSH
33743: LD_INT 1
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 2
33752: NEG
33753: PUSH
33754: LD_INT 0
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 2
33763: NEG
33764: PUSH
33765: LD_INT 1
33767: NEG
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 2
33775: NEG
33776: PUSH
33777: LD_INT 2
33779: NEG
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 2
33787: NEG
33788: PUSH
33789: LD_INT 3
33791: NEG
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 2
33799: PUSH
33800: LD_INT 1
33802: NEG
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 3
33810: PUSH
33811: LD_INT 0
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 3
33820: PUSH
33821: LD_INT 1
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 3
33830: PUSH
33831: LD_INT 2
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 3
33840: PUSH
33841: LD_INT 3
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 2
33850: PUSH
33851: LD_INT 3
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 2
33860: NEG
33861: PUSH
33862: LD_INT 1
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 3
33871: NEG
33872: PUSH
33873: LD_INT 0
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 3
33882: NEG
33883: PUSH
33884: LD_INT 1
33886: NEG
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 3
33894: NEG
33895: PUSH
33896: LD_INT 2
33898: NEG
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 3
33906: NEG
33907: PUSH
33908: LD_INT 3
33910: NEG
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33947: LD_ADDR_VAR 0 45
33951: PUSH
33952: LD_INT 0
33954: PUSH
33955: LD_INT 0
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 0
33964: PUSH
33965: LD_INT 1
33967: NEG
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 1
33975: PUSH
33976: LD_INT 0
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 1
33985: PUSH
33986: LD_INT 1
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 0
33995: PUSH
33996: LD_INT 1
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 1
34005: NEG
34006: PUSH
34007: LD_INT 0
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 1
34016: NEG
34017: PUSH
34018: LD_INT 1
34020: NEG
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 1
34028: NEG
34029: PUSH
34030: LD_INT 2
34032: NEG
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 0
34040: PUSH
34041: LD_INT 2
34043: NEG
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 1
34051: PUSH
34052: LD_INT 1
34054: NEG
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 2
34062: PUSH
34063: LD_INT 1
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 2
34072: PUSH
34073: LD_INT 2
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 1
34082: PUSH
34083: LD_INT 2
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 0
34092: PUSH
34093: LD_INT 2
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 1
34102: NEG
34103: PUSH
34104: LD_INT 1
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 2
34113: NEG
34114: PUSH
34115: LD_INT 1
34117: NEG
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 2
34125: NEG
34126: PUSH
34127: LD_INT 2
34129: NEG
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 2
34137: NEG
34138: PUSH
34139: LD_INT 3
34141: NEG
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 1
34149: NEG
34150: PUSH
34151: LD_INT 3
34153: NEG
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 0
34161: PUSH
34162: LD_INT 3
34164: NEG
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: LD_INT 1
34172: PUSH
34173: LD_INT 2
34175: NEG
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 3
34183: PUSH
34184: LD_INT 2
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 3
34193: PUSH
34194: LD_INT 3
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 2
34203: PUSH
34204: LD_INT 3
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 1
34213: PUSH
34214: LD_INT 3
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 0
34223: PUSH
34224: LD_INT 3
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 1
34233: NEG
34234: PUSH
34235: LD_INT 2
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 3
34244: NEG
34245: PUSH
34246: LD_INT 2
34248: NEG
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 3
34256: NEG
34257: PUSH
34258: LD_INT 3
34260: NEG
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34297: LD_ADDR_VAR 0 46
34301: PUSH
34302: LD_INT 0
34304: PUSH
34305: LD_INT 0
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 0
34314: PUSH
34315: LD_INT 1
34317: NEG
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: PUSH
34323: LD_INT 1
34325: PUSH
34326: LD_INT 0
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 1
34335: PUSH
34336: LD_INT 1
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 0
34345: PUSH
34346: LD_INT 1
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 1
34355: NEG
34356: PUSH
34357: LD_INT 0
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 1
34366: NEG
34367: PUSH
34368: LD_INT 1
34370: NEG
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 1
34378: NEG
34379: PUSH
34380: LD_INT 2
34382: NEG
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 0
34390: PUSH
34391: LD_INT 2
34393: NEG
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 1
34401: PUSH
34402: LD_INT 1
34404: NEG
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 2
34412: PUSH
34413: LD_INT 0
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 2
34422: PUSH
34423: LD_INT 1
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 1
34432: PUSH
34433: LD_INT 2
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 0
34442: PUSH
34443: LD_INT 2
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: LD_INT 1
34452: NEG
34453: PUSH
34454: LD_INT 1
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 2
34463: NEG
34464: PUSH
34465: LD_INT 0
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 2
34474: NEG
34475: PUSH
34476: LD_INT 1
34478: NEG
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 1
34486: NEG
34487: PUSH
34488: LD_INT 3
34490: NEG
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 0
34498: PUSH
34499: LD_INT 3
34501: NEG
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 1
34509: PUSH
34510: LD_INT 2
34512: NEG
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 2
34520: PUSH
34521: LD_INT 1
34523: NEG
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 3
34531: PUSH
34532: LD_INT 0
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: LD_INT 3
34541: PUSH
34542: LD_INT 1
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 1
34551: PUSH
34552: LD_INT 3
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 0
34561: PUSH
34562: LD_INT 3
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 1
34571: NEG
34572: PUSH
34573: LD_INT 2
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 2
34582: NEG
34583: PUSH
34584: LD_INT 1
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 3
34593: NEG
34594: PUSH
34595: LD_INT 0
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 3
34604: NEG
34605: PUSH
34606: LD_INT 1
34608: NEG
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34645: LD_ADDR_VAR 0 47
34649: PUSH
34650: LD_INT 0
34652: PUSH
34653: LD_INT 0
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 0
34662: PUSH
34663: LD_INT 1
34665: NEG
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 1
34673: PUSH
34674: LD_INT 0
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 1
34683: PUSH
34684: LD_INT 1
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 0
34693: PUSH
34694: LD_INT 1
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 1
34703: NEG
34704: PUSH
34705: LD_INT 0
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 1
34714: NEG
34715: PUSH
34716: LD_INT 1
34718: NEG
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 1
34726: NEG
34727: PUSH
34728: LD_INT 2
34730: NEG
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 0
34738: PUSH
34739: LD_INT 2
34741: NEG
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 1
34749: PUSH
34750: LD_INT 1
34752: NEG
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 2
34760: NEG
34761: PUSH
34762: LD_INT 1
34764: NEG
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 2
34772: NEG
34773: PUSH
34774: LD_INT 2
34776: NEG
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34796: LD_ADDR_VAR 0 48
34800: PUSH
34801: LD_INT 0
34803: PUSH
34804: LD_INT 0
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 0
34813: PUSH
34814: LD_INT 1
34816: NEG
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 1
34824: PUSH
34825: LD_INT 0
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: LD_INT 1
34834: PUSH
34835: LD_INT 1
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 0
34844: PUSH
34845: LD_INT 1
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 1
34854: NEG
34855: PUSH
34856: LD_INT 0
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 1
34865: NEG
34866: PUSH
34867: LD_INT 1
34869: NEG
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 1
34877: NEG
34878: PUSH
34879: LD_INT 2
34881: NEG
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 0
34889: PUSH
34890: LD_INT 2
34892: NEG
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 1
34900: PUSH
34901: LD_INT 1
34903: NEG
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 2
34911: PUSH
34912: LD_INT 0
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 2
34921: PUSH
34922: LD_INT 1
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34943: LD_ADDR_VAR 0 49
34947: PUSH
34948: LD_INT 0
34950: PUSH
34951: LD_INT 0
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 0
34960: PUSH
34961: LD_INT 1
34963: NEG
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 1
34971: PUSH
34972: LD_INT 0
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 1
34981: PUSH
34982: LD_INT 1
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 0
34991: PUSH
34992: LD_INT 1
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 1
35001: NEG
35002: PUSH
35003: LD_INT 0
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 1
35012: NEG
35013: PUSH
35014: LD_INT 1
35016: NEG
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 1
35024: PUSH
35025: LD_INT 1
35027: NEG
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 2
35035: PUSH
35036: LD_INT 0
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 2
35045: PUSH
35046: LD_INT 1
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 2
35055: PUSH
35056: LD_INT 2
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 1
35065: PUSH
35066: LD_INT 2
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35087: LD_ADDR_VAR 0 50
35091: PUSH
35092: LD_INT 0
35094: PUSH
35095: LD_INT 0
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 0
35104: PUSH
35105: LD_INT 1
35107: NEG
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 1
35115: PUSH
35116: LD_INT 0
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 1
35125: PUSH
35126: LD_INT 1
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 0
35135: PUSH
35136: LD_INT 1
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 1
35145: NEG
35146: PUSH
35147: LD_INT 0
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 1
35156: NEG
35157: PUSH
35158: LD_INT 1
35160: NEG
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 2
35168: PUSH
35169: LD_INT 1
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 2
35178: PUSH
35179: LD_INT 2
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 1
35188: PUSH
35189: LD_INT 2
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 0
35198: PUSH
35199: LD_INT 2
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 1
35208: NEG
35209: PUSH
35210: LD_INT 1
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35231: LD_ADDR_VAR 0 51
35235: PUSH
35236: LD_INT 0
35238: PUSH
35239: LD_INT 0
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 0
35248: PUSH
35249: LD_INT 1
35251: NEG
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 1
35259: PUSH
35260: LD_INT 0
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 1
35269: PUSH
35270: LD_INT 1
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 0
35279: PUSH
35280: LD_INT 1
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 1
35289: NEG
35290: PUSH
35291: LD_INT 0
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 1
35300: NEG
35301: PUSH
35302: LD_INT 1
35304: NEG
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 1
35312: PUSH
35313: LD_INT 2
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 0
35322: PUSH
35323: LD_INT 2
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 1
35332: NEG
35333: PUSH
35334: LD_INT 1
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 2
35343: NEG
35344: PUSH
35345: LD_INT 0
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 2
35354: NEG
35355: PUSH
35356: LD_INT 1
35358: NEG
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35378: LD_ADDR_VAR 0 52
35382: PUSH
35383: LD_INT 0
35385: PUSH
35386: LD_INT 0
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 0
35395: PUSH
35396: LD_INT 1
35398: NEG
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 1
35406: PUSH
35407: LD_INT 0
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 1
35416: PUSH
35417: LD_INT 1
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 0
35426: PUSH
35427: LD_INT 1
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 1
35436: NEG
35437: PUSH
35438: LD_INT 0
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 1
35447: NEG
35448: PUSH
35449: LD_INT 1
35451: NEG
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 1
35459: NEG
35460: PUSH
35461: LD_INT 2
35463: NEG
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 1
35471: NEG
35472: PUSH
35473: LD_INT 1
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 2
35482: NEG
35483: PUSH
35484: LD_INT 0
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 2
35493: NEG
35494: PUSH
35495: LD_INT 1
35497: NEG
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 2
35505: NEG
35506: PUSH
35507: LD_INT 2
35509: NEG
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35529: LD_ADDR_VAR 0 53
35533: PUSH
35534: LD_INT 0
35536: PUSH
35537: LD_INT 0
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 0
35546: PUSH
35547: LD_INT 1
35549: NEG
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 1
35557: PUSH
35558: LD_INT 0
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 1
35567: PUSH
35568: LD_INT 1
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 0
35577: PUSH
35578: LD_INT 1
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 1
35587: NEG
35588: PUSH
35589: LD_INT 0
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 1
35598: NEG
35599: PUSH
35600: LD_INT 1
35602: NEG
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 1
35610: NEG
35611: PUSH
35612: LD_INT 2
35614: NEG
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 0
35622: PUSH
35623: LD_INT 2
35625: NEG
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 1
35633: PUSH
35634: LD_INT 1
35636: NEG
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 2
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 2
35654: PUSH
35655: LD_INT 1
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 2
35664: PUSH
35665: LD_INT 2
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 1
35674: PUSH
35675: LD_INT 2
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 0
35684: PUSH
35685: LD_INT 2
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 1
35694: NEG
35695: PUSH
35696: LD_INT 1
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 2
35705: NEG
35706: PUSH
35707: LD_INT 0
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 2
35716: NEG
35717: PUSH
35718: LD_INT 1
35720: NEG
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 2
35728: NEG
35729: PUSH
35730: LD_INT 2
35732: NEG
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35759: LD_ADDR_VAR 0 54
35763: PUSH
35764: LD_INT 0
35766: PUSH
35767: LD_INT 0
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 0
35776: PUSH
35777: LD_INT 1
35779: NEG
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 1
35787: PUSH
35788: LD_INT 0
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 1
35797: PUSH
35798: LD_INT 1
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 0
35807: PUSH
35808: LD_INT 1
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 1
35817: NEG
35818: PUSH
35819: LD_INT 0
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 1
35828: NEG
35829: PUSH
35830: LD_INT 1
35832: NEG
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 1
35840: NEG
35841: PUSH
35842: LD_INT 2
35844: NEG
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 0
35852: PUSH
35853: LD_INT 2
35855: NEG
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 1
35863: PUSH
35864: LD_INT 1
35866: NEG
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 2
35874: PUSH
35875: LD_INT 0
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 2
35884: PUSH
35885: LD_INT 1
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 2
35894: PUSH
35895: LD_INT 2
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 1
35904: PUSH
35905: LD_INT 2
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 0
35914: PUSH
35915: LD_INT 2
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PUSH
35922: LD_INT 1
35924: NEG
35925: PUSH
35926: LD_INT 1
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 2
35935: NEG
35936: PUSH
35937: LD_INT 0
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 2
35946: NEG
35947: PUSH
35948: LD_INT 1
35950: NEG
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 2
35958: NEG
35959: PUSH
35960: LD_INT 2
35962: NEG
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35989: LD_ADDR_VAR 0 55
35993: PUSH
35994: LD_INT 0
35996: PUSH
35997: LD_INT 0
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 0
36006: PUSH
36007: LD_INT 1
36009: NEG
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 1
36017: PUSH
36018: LD_INT 0
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 1
36027: PUSH
36028: LD_INT 1
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 0
36037: PUSH
36038: LD_INT 1
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 1
36047: NEG
36048: PUSH
36049: LD_INT 0
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 1
36058: NEG
36059: PUSH
36060: LD_INT 1
36062: NEG
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 1
36070: NEG
36071: PUSH
36072: LD_INT 2
36074: NEG
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: LD_INT 2
36085: NEG
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 1
36093: PUSH
36094: LD_INT 1
36096: NEG
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 2
36104: PUSH
36105: LD_INT 0
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 2
36114: PUSH
36115: LD_INT 1
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 2
36124: PUSH
36125: LD_INT 2
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 1
36134: PUSH
36135: LD_INT 2
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 0
36144: PUSH
36145: LD_INT 2
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 1
36154: NEG
36155: PUSH
36156: LD_INT 1
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 2
36165: NEG
36166: PUSH
36167: LD_INT 0
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 2
36176: NEG
36177: PUSH
36178: LD_INT 1
36180: NEG
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 2
36188: NEG
36189: PUSH
36190: LD_INT 2
36192: NEG
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36219: LD_ADDR_VAR 0 56
36223: PUSH
36224: LD_INT 0
36226: PUSH
36227: LD_INT 0
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 0
36236: PUSH
36237: LD_INT 1
36239: NEG
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 1
36247: PUSH
36248: LD_INT 0
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 1
36257: PUSH
36258: LD_INT 1
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 0
36267: PUSH
36268: LD_INT 1
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 1
36277: NEG
36278: PUSH
36279: LD_INT 0
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 1
36288: NEG
36289: PUSH
36290: LD_INT 1
36292: NEG
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 1
36300: NEG
36301: PUSH
36302: LD_INT 2
36304: NEG
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 0
36312: PUSH
36313: LD_INT 2
36315: NEG
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 1
36323: PUSH
36324: LD_INT 1
36326: NEG
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 2
36334: PUSH
36335: LD_INT 0
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PUSH
36342: LD_INT 2
36344: PUSH
36345: LD_INT 1
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 2
36354: PUSH
36355: LD_INT 2
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 1
36364: PUSH
36365: LD_INT 2
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PUSH
36372: LD_INT 0
36374: PUSH
36375: LD_INT 2
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: LD_INT 1
36384: NEG
36385: PUSH
36386: LD_INT 1
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 2
36395: NEG
36396: PUSH
36397: LD_INT 0
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 2
36406: NEG
36407: PUSH
36408: LD_INT 1
36410: NEG
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 2
36418: NEG
36419: PUSH
36420: LD_INT 2
36422: NEG
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36449: LD_ADDR_VAR 0 57
36453: PUSH
36454: LD_INT 0
36456: PUSH
36457: LD_INT 0
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 0
36466: PUSH
36467: LD_INT 1
36469: NEG
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 1
36477: PUSH
36478: LD_INT 0
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 1
36487: PUSH
36488: LD_INT 1
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 0
36497: PUSH
36498: LD_INT 1
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 1
36507: NEG
36508: PUSH
36509: LD_INT 0
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 1
36518: NEG
36519: PUSH
36520: LD_INT 1
36522: NEG
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 1
36530: NEG
36531: PUSH
36532: LD_INT 2
36534: NEG
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 0
36542: PUSH
36543: LD_INT 2
36545: NEG
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 1
36553: PUSH
36554: LD_INT 1
36556: NEG
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 2
36564: PUSH
36565: LD_INT 0
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 2
36574: PUSH
36575: LD_INT 1
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 2
36584: PUSH
36585: LD_INT 2
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 1
36594: PUSH
36595: LD_INT 2
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 0
36604: PUSH
36605: LD_INT 2
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 1
36614: NEG
36615: PUSH
36616: LD_INT 1
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 2
36625: NEG
36626: PUSH
36627: LD_INT 0
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 2
36636: NEG
36637: PUSH
36638: LD_INT 1
36640: NEG
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 2
36648: NEG
36649: PUSH
36650: LD_INT 2
36652: NEG
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36679: LD_ADDR_VAR 0 58
36683: PUSH
36684: LD_INT 0
36686: PUSH
36687: LD_INT 0
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 0
36696: PUSH
36697: LD_INT 1
36699: NEG
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 1
36707: PUSH
36708: LD_INT 0
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 1
36717: PUSH
36718: LD_INT 1
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 0
36727: PUSH
36728: LD_INT 1
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 1
36737: NEG
36738: PUSH
36739: LD_INT 0
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 1
36748: NEG
36749: PUSH
36750: LD_INT 1
36752: NEG
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 1
36760: NEG
36761: PUSH
36762: LD_INT 2
36764: NEG
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 0
36772: PUSH
36773: LD_INT 2
36775: NEG
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 1
36783: PUSH
36784: LD_INT 1
36786: NEG
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 2
36794: PUSH
36795: LD_INT 0
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 2
36804: PUSH
36805: LD_INT 1
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 2
36814: PUSH
36815: LD_INT 2
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 1
36824: PUSH
36825: LD_INT 2
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 0
36834: PUSH
36835: LD_INT 2
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 1
36844: NEG
36845: PUSH
36846: LD_INT 1
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 2
36855: NEG
36856: PUSH
36857: LD_INT 0
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 2
36866: NEG
36867: PUSH
36868: LD_INT 1
36870: NEG
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: LD_INT 2
36878: NEG
36879: PUSH
36880: LD_INT 2
36882: NEG
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36909: LD_ADDR_VAR 0 59
36913: PUSH
36914: LD_INT 0
36916: PUSH
36917: LD_INT 0
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 0
36926: PUSH
36927: LD_INT 1
36929: NEG
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 1
36937: PUSH
36938: LD_INT 0
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 1
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 0
36957: PUSH
36958: LD_INT 1
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 1
36967: NEG
36968: PUSH
36969: LD_INT 0
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 1
36978: NEG
36979: PUSH
36980: LD_INT 1
36982: NEG
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36997: LD_ADDR_VAR 0 60
37001: PUSH
37002: LD_INT 0
37004: PUSH
37005: LD_INT 0
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 0
37014: PUSH
37015: LD_INT 1
37017: NEG
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 1
37025: PUSH
37026: LD_INT 0
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 1
37035: PUSH
37036: LD_INT 1
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: LD_INT 1
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 1
37055: NEG
37056: PUSH
37057: LD_INT 0
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 1
37066: NEG
37067: PUSH
37068: LD_INT 1
37070: NEG
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37085: LD_ADDR_VAR 0 61
37089: PUSH
37090: LD_INT 0
37092: PUSH
37093: LD_INT 0
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_INT 0
37102: PUSH
37103: LD_INT 1
37105: NEG
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 1
37113: PUSH
37114: LD_INT 0
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 1
37123: PUSH
37124: LD_INT 1
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 0
37133: PUSH
37134: LD_INT 1
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 1
37143: NEG
37144: PUSH
37145: LD_INT 0
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 1
37154: NEG
37155: PUSH
37156: LD_INT 1
37158: NEG
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37173: LD_ADDR_VAR 0 62
37177: PUSH
37178: LD_INT 0
37180: PUSH
37181: LD_INT 0
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PUSH
37188: LD_INT 0
37190: PUSH
37191: LD_INT 1
37193: NEG
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 1
37201: PUSH
37202: LD_INT 0
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 1
37211: PUSH
37212: LD_INT 1
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 0
37221: PUSH
37222: LD_INT 1
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 1
37231: NEG
37232: PUSH
37233: LD_INT 0
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 1
37242: NEG
37243: PUSH
37244: LD_INT 1
37246: NEG
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37261: LD_ADDR_VAR 0 63
37265: PUSH
37266: LD_INT 0
37268: PUSH
37269: LD_INT 0
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 0
37278: PUSH
37279: LD_INT 1
37281: NEG
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 1
37289: PUSH
37290: LD_INT 0
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 1
37299: PUSH
37300: LD_INT 1
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 0
37309: PUSH
37310: LD_INT 1
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 1
37319: NEG
37320: PUSH
37321: LD_INT 0
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 1
37330: NEG
37331: PUSH
37332: LD_INT 1
37334: NEG
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37349: LD_ADDR_VAR 0 64
37353: PUSH
37354: LD_INT 0
37356: PUSH
37357: LD_INT 0
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 0
37366: PUSH
37367: LD_INT 1
37369: NEG
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 1
37377: PUSH
37378: LD_INT 0
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 1
37387: PUSH
37388: LD_INT 1
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 0
37397: PUSH
37398: LD_INT 1
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 1
37407: NEG
37408: PUSH
37409: LD_INT 0
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 1
37418: NEG
37419: PUSH
37420: LD_INT 1
37422: NEG
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: ST_TO_ADDR
// end ; 1 :
37437: GO 43334
37439: LD_INT 1
37441: DOUBLE
37442: EQUAL
37443: IFTRUE 37447
37445: GO 40070
37447: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37448: LD_ADDR_VAR 0 11
37452: PUSH
37453: LD_INT 1
37455: NEG
37456: PUSH
37457: LD_INT 3
37459: NEG
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 0
37467: PUSH
37468: LD_INT 3
37470: NEG
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 1
37478: PUSH
37479: LD_INT 2
37481: NEG
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: LIST
37491: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37492: LD_ADDR_VAR 0 12
37496: PUSH
37497: LD_INT 2
37499: PUSH
37500: LD_INT 1
37502: NEG
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 3
37510: PUSH
37511: LD_INT 0
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: LD_INT 3
37520: PUSH
37521: LD_INT 1
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: LIST
37532: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37533: LD_ADDR_VAR 0 13
37537: PUSH
37538: LD_INT 3
37540: PUSH
37541: LD_INT 2
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 3
37550: PUSH
37551: LD_INT 3
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 2
37560: PUSH
37561: LD_INT 3
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: LIST
37572: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37573: LD_ADDR_VAR 0 14
37577: PUSH
37578: LD_INT 1
37580: PUSH
37581: LD_INT 3
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 0
37590: PUSH
37591: LD_INT 3
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 1
37600: NEG
37601: PUSH
37602: LD_INT 2
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: LIST
37613: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37614: LD_ADDR_VAR 0 15
37618: PUSH
37619: LD_INT 2
37621: NEG
37622: PUSH
37623: LD_INT 1
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 3
37632: NEG
37633: PUSH
37634: LD_INT 0
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 3
37643: NEG
37644: PUSH
37645: LD_INT 1
37647: NEG
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: LIST
37657: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37658: LD_ADDR_VAR 0 16
37662: PUSH
37663: LD_INT 2
37665: NEG
37666: PUSH
37667: LD_INT 3
37669: NEG
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 3
37677: NEG
37678: PUSH
37679: LD_INT 2
37681: NEG
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 3
37689: NEG
37690: PUSH
37691: LD_INT 3
37693: NEG
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: LIST
37703: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37704: LD_ADDR_VAR 0 17
37708: PUSH
37709: LD_INT 1
37711: NEG
37712: PUSH
37713: LD_INT 3
37715: NEG
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 0
37723: PUSH
37724: LD_INT 3
37726: NEG
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 1
37734: PUSH
37735: LD_INT 2
37737: NEG
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: LIST
37747: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37748: LD_ADDR_VAR 0 18
37752: PUSH
37753: LD_INT 2
37755: PUSH
37756: LD_INT 1
37758: NEG
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 3
37766: PUSH
37767: LD_INT 0
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 3
37776: PUSH
37777: LD_INT 1
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: LIST
37788: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37789: LD_ADDR_VAR 0 19
37793: PUSH
37794: LD_INT 3
37796: PUSH
37797: LD_INT 2
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 3
37806: PUSH
37807: LD_INT 3
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 2
37816: PUSH
37817: LD_INT 3
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: LIST
37828: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37829: LD_ADDR_VAR 0 20
37833: PUSH
37834: LD_INT 1
37836: PUSH
37837: LD_INT 3
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 0
37846: PUSH
37847: LD_INT 3
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 1
37856: NEG
37857: PUSH
37858: LD_INT 2
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: LIST
37869: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37870: LD_ADDR_VAR 0 21
37874: PUSH
37875: LD_INT 2
37877: NEG
37878: PUSH
37879: LD_INT 1
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 3
37888: NEG
37889: PUSH
37890: LD_INT 0
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 3
37899: NEG
37900: PUSH
37901: LD_INT 1
37903: NEG
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: LIST
37913: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37914: LD_ADDR_VAR 0 22
37918: PUSH
37919: LD_INT 2
37921: NEG
37922: PUSH
37923: LD_INT 3
37925: NEG
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 3
37933: NEG
37934: PUSH
37935: LD_INT 2
37937: NEG
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 3
37945: NEG
37946: PUSH
37947: LD_INT 3
37949: NEG
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: LIST
37959: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
37960: LD_ADDR_VAR 0 23
37964: PUSH
37965: LD_INT 0
37967: PUSH
37968: LD_INT 3
37970: NEG
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 1
37978: NEG
37979: PUSH
37980: LD_INT 4
37982: NEG
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 1
37990: PUSH
37991: LD_INT 3
37993: NEG
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: LIST
38003: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
38004: LD_ADDR_VAR 0 24
38008: PUSH
38009: LD_INT 3
38011: PUSH
38012: LD_INT 0
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 3
38021: PUSH
38022: LD_INT 1
38024: NEG
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 4
38032: PUSH
38033: LD_INT 1
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: LIST
38044: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
38045: LD_ADDR_VAR 0 25
38049: PUSH
38050: LD_INT 3
38052: PUSH
38053: LD_INT 3
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 4
38062: PUSH
38063: LD_INT 3
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 3
38072: PUSH
38073: LD_INT 4
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: LIST
38084: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
38085: LD_ADDR_VAR 0 26
38089: PUSH
38090: LD_INT 0
38092: PUSH
38093: LD_INT 3
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 1
38102: PUSH
38103: LD_INT 4
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 1
38112: NEG
38113: PUSH
38114: LD_INT 3
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: LIST
38125: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
38126: LD_ADDR_VAR 0 27
38130: PUSH
38131: LD_INT 3
38133: NEG
38134: PUSH
38135: LD_INT 0
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 3
38144: NEG
38145: PUSH
38146: LD_INT 1
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 4
38155: NEG
38156: PUSH
38157: LD_INT 1
38159: NEG
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: LIST
38169: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
38170: LD_ADDR_VAR 0 28
38174: PUSH
38175: LD_INT 3
38177: NEG
38178: PUSH
38179: LD_INT 3
38181: NEG
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 3
38189: NEG
38190: PUSH
38191: LD_INT 4
38193: NEG
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 4
38201: NEG
38202: PUSH
38203: LD_INT 3
38205: NEG
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: LIST
38215: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
38216: LD_ADDR_VAR 0 29
38220: PUSH
38221: LD_INT 1
38223: NEG
38224: PUSH
38225: LD_INT 3
38227: NEG
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 0
38235: PUSH
38236: LD_INT 3
38238: NEG
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 1
38246: PUSH
38247: LD_INT 2
38249: NEG
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 1
38257: NEG
38258: PUSH
38259: LD_INT 4
38261: NEG
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 0
38269: PUSH
38270: LD_INT 4
38272: NEG
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 1
38280: PUSH
38281: LD_INT 3
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 1
38291: NEG
38292: PUSH
38293: LD_INT 5
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 0
38303: PUSH
38304: LD_INT 5
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 1
38314: PUSH
38315: LD_INT 4
38317: NEG
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 1
38325: NEG
38326: PUSH
38327: LD_INT 6
38329: NEG
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 0
38337: PUSH
38338: LD_INT 6
38340: NEG
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 1
38348: PUSH
38349: LD_INT 5
38351: NEG
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
38371: LD_ADDR_VAR 0 30
38375: PUSH
38376: LD_INT 2
38378: PUSH
38379: LD_INT 1
38381: NEG
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 3
38389: PUSH
38390: LD_INT 0
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: LD_INT 3
38399: PUSH
38400: LD_INT 1
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 3
38409: PUSH
38410: LD_INT 1
38412: NEG
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 4
38420: PUSH
38421: LD_INT 0
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 4
38430: PUSH
38431: LD_INT 1
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 4
38440: PUSH
38441: LD_INT 1
38443: NEG
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 5
38451: PUSH
38452: LD_INT 0
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 5
38461: PUSH
38462: LD_INT 1
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 5
38471: PUSH
38472: LD_INT 1
38474: NEG
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 6
38482: PUSH
38483: LD_INT 0
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 6
38492: PUSH
38493: LD_INT 1
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
38514: LD_ADDR_VAR 0 31
38518: PUSH
38519: LD_INT 3
38521: PUSH
38522: LD_INT 2
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 3
38531: PUSH
38532: LD_INT 3
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 2
38541: PUSH
38542: LD_INT 3
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 4
38551: PUSH
38552: LD_INT 3
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 4
38561: PUSH
38562: LD_INT 4
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 3
38571: PUSH
38572: LD_INT 4
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 5
38581: PUSH
38582: LD_INT 4
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 5
38591: PUSH
38592: LD_INT 5
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 4
38601: PUSH
38602: LD_INT 5
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 6
38611: PUSH
38612: LD_INT 5
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 6
38621: PUSH
38622: LD_INT 6
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 5
38631: PUSH
38632: LD_INT 6
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38653: LD_ADDR_VAR 0 32
38657: PUSH
38658: LD_INT 1
38660: PUSH
38661: LD_INT 3
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 0
38670: PUSH
38671: LD_INT 3
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 1
38680: NEG
38681: PUSH
38682: LD_INT 2
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 1
38691: PUSH
38692: LD_INT 4
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 0
38701: PUSH
38702: LD_INT 4
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 1
38711: NEG
38712: PUSH
38713: LD_INT 3
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 1
38722: PUSH
38723: LD_INT 5
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 0
38732: PUSH
38733: LD_INT 5
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 1
38742: NEG
38743: PUSH
38744: LD_INT 4
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 1
38753: PUSH
38754: LD_INT 6
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 0
38763: PUSH
38764: LD_INT 6
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 1
38773: NEG
38774: PUSH
38775: LD_INT 5
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
38796: LD_ADDR_VAR 0 33
38800: PUSH
38801: LD_INT 2
38803: NEG
38804: PUSH
38805: LD_INT 1
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 3
38814: NEG
38815: PUSH
38816: LD_INT 0
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 3
38825: NEG
38826: PUSH
38827: LD_INT 1
38829: NEG
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 3
38837: NEG
38838: PUSH
38839: LD_INT 1
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 4
38848: NEG
38849: PUSH
38850: LD_INT 0
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 4
38859: NEG
38860: PUSH
38861: LD_INT 1
38863: NEG
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: PUSH
38869: LD_INT 4
38871: NEG
38872: PUSH
38873: LD_INT 1
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 5
38882: NEG
38883: PUSH
38884: LD_INT 0
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 5
38893: NEG
38894: PUSH
38895: LD_INT 1
38897: NEG
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 5
38905: NEG
38906: PUSH
38907: LD_INT 1
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 6
38916: NEG
38917: PUSH
38918: LD_INT 0
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 6
38927: NEG
38928: PUSH
38929: LD_INT 1
38931: NEG
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
38951: LD_ADDR_VAR 0 34
38955: PUSH
38956: LD_INT 2
38958: NEG
38959: PUSH
38960: LD_INT 3
38962: NEG
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 3
38970: NEG
38971: PUSH
38972: LD_INT 2
38974: NEG
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 3
38982: NEG
38983: PUSH
38984: LD_INT 3
38986: NEG
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 3
38994: NEG
38995: PUSH
38996: LD_INT 4
38998: NEG
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 4
39006: NEG
39007: PUSH
39008: LD_INT 3
39010: NEG
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 4
39018: NEG
39019: PUSH
39020: LD_INT 4
39022: NEG
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 4
39030: NEG
39031: PUSH
39032: LD_INT 5
39034: NEG
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 5
39042: NEG
39043: PUSH
39044: LD_INT 4
39046: NEG
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 5
39054: NEG
39055: PUSH
39056: LD_INT 5
39058: NEG
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 5
39066: NEG
39067: PUSH
39068: LD_INT 6
39070: NEG
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 6
39078: NEG
39079: PUSH
39080: LD_INT 5
39082: NEG
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 6
39090: NEG
39091: PUSH
39092: LD_INT 6
39094: NEG
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
39114: LD_ADDR_VAR 0 41
39118: PUSH
39119: LD_INT 0
39121: PUSH
39122: LD_INT 2
39124: NEG
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 1
39132: NEG
39133: PUSH
39134: LD_INT 3
39136: NEG
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 1
39144: PUSH
39145: LD_INT 2
39147: NEG
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: LIST
39157: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
39158: LD_ADDR_VAR 0 42
39162: PUSH
39163: LD_INT 2
39165: PUSH
39166: LD_INT 0
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 2
39175: PUSH
39176: LD_INT 1
39178: NEG
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 3
39186: PUSH
39187: LD_INT 1
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: LIST
39198: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
39199: LD_ADDR_VAR 0 43
39203: PUSH
39204: LD_INT 2
39206: PUSH
39207: LD_INT 2
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 3
39216: PUSH
39217: LD_INT 2
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 2
39226: PUSH
39227: LD_INT 3
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: LIST
39238: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
39239: LD_ADDR_VAR 0 44
39243: PUSH
39244: LD_INT 0
39246: PUSH
39247: LD_INT 2
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 1
39256: PUSH
39257: LD_INT 3
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 1
39266: NEG
39267: PUSH
39268: LD_INT 2
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: LIST
39279: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39280: LD_ADDR_VAR 0 45
39284: PUSH
39285: LD_INT 2
39287: NEG
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 2
39298: NEG
39299: PUSH
39300: LD_INT 1
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 3
39309: NEG
39310: PUSH
39311: LD_INT 1
39313: NEG
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: LIST
39323: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
39324: LD_ADDR_VAR 0 46
39328: PUSH
39329: LD_INT 2
39331: NEG
39332: PUSH
39333: LD_INT 2
39335: NEG
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 2
39343: NEG
39344: PUSH
39345: LD_INT 3
39347: NEG
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 3
39355: NEG
39356: PUSH
39357: LD_INT 2
39359: NEG
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: LIST
39369: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
39370: LD_ADDR_VAR 0 47
39374: PUSH
39375: LD_INT 2
39377: NEG
39378: PUSH
39379: LD_INT 3
39381: NEG
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 1
39389: NEG
39390: PUSH
39391: LD_INT 3
39393: NEG
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39403: LD_ADDR_VAR 0 48
39407: PUSH
39408: LD_INT 1
39410: PUSH
39411: LD_INT 2
39413: NEG
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 2
39421: PUSH
39422: LD_INT 1
39424: NEG
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
39434: LD_ADDR_VAR 0 49
39438: PUSH
39439: LD_INT 3
39441: PUSH
39442: LD_INT 1
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 3
39451: PUSH
39452: LD_INT 2
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
39463: LD_ADDR_VAR 0 50
39467: PUSH
39468: LD_INT 2
39470: PUSH
39471: LD_INT 3
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 1
39480: PUSH
39481: LD_INT 3
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39492: LD_ADDR_VAR 0 51
39496: PUSH
39497: LD_INT 1
39499: NEG
39500: PUSH
39501: LD_INT 2
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 2
39510: NEG
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39523: LD_ADDR_VAR 0 52
39527: PUSH
39528: LD_INT 3
39530: NEG
39531: PUSH
39532: LD_INT 1
39534: NEG
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 3
39542: NEG
39543: PUSH
39544: LD_INT 2
39546: NEG
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39556: LD_ADDR_VAR 0 53
39560: PUSH
39561: LD_INT 1
39563: NEG
39564: PUSH
39565: LD_INT 3
39567: NEG
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: LD_INT 3
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: LD_INT 2
39589: NEG
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: LIST
39599: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39600: LD_ADDR_VAR 0 54
39604: PUSH
39605: LD_INT 2
39607: PUSH
39608: LD_INT 1
39610: NEG
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 3
39618: PUSH
39619: LD_INT 0
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 3
39628: PUSH
39629: LD_INT 1
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: LIST
39640: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39641: LD_ADDR_VAR 0 55
39645: PUSH
39646: LD_INT 3
39648: PUSH
39649: LD_INT 2
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 3
39658: PUSH
39659: LD_INT 3
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 2
39668: PUSH
39669: LD_INT 3
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: LIST
39680: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39681: LD_ADDR_VAR 0 56
39685: PUSH
39686: LD_INT 1
39688: PUSH
39689: LD_INT 3
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 0
39698: PUSH
39699: LD_INT 3
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 1
39708: NEG
39709: PUSH
39710: LD_INT 2
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: LIST
39721: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39722: LD_ADDR_VAR 0 57
39726: PUSH
39727: LD_INT 2
39729: NEG
39730: PUSH
39731: LD_INT 1
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 3
39740: NEG
39741: PUSH
39742: LD_INT 0
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 3
39751: NEG
39752: PUSH
39753: LD_INT 1
39755: NEG
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: LIST
39765: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39766: LD_ADDR_VAR 0 58
39770: PUSH
39771: LD_INT 2
39773: NEG
39774: PUSH
39775: LD_INT 3
39777: NEG
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 3
39785: NEG
39786: PUSH
39787: LD_INT 2
39789: NEG
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 3
39797: NEG
39798: PUSH
39799: LD_INT 3
39801: NEG
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: LIST
39811: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
39812: LD_ADDR_VAR 0 59
39816: PUSH
39817: LD_INT 1
39819: NEG
39820: PUSH
39821: LD_INT 2
39823: NEG
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 0
39831: PUSH
39832: LD_INT 2
39834: NEG
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 1
39842: PUSH
39843: LD_INT 1
39845: NEG
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: LIST
39855: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39856: LD_ADDR_VAR 0 60
39860: PUSH
39861: LD_INT 1
39863: PUSH
39864: LD_INT 1
39866: NEG
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 2
39874: PUSH
39875: LD_INT 0
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 2
39884: PUSH
39885: LD_INT 1
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: LIST
39896: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39897: LD_ADDR_VAR 0 61
39901: PUSH
39902: LD_INT 2
39904: PUSH
39905: LD_INT 1
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 2
39914: PUSH
39915: LD_INT 2
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 1
39924: PUSH
39925: LD_INT 2
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: LIST
39936: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39937: LD_ADDR_VAR 0 62
39941: PUSH
39942: LD_INT 1
39944: PUSH
39945: LD_INT 2
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 0
39954: PUSH
39955: LD_INT 2
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 1
39964: NEG
39965: PUSH
39966: LD_INT 1
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: LIST
39977: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39978: LD_ADDR_VAR 0 63
39982: PUSH
39983: LD_INT 1
39985: NEG
39986: PUSH
39987: LD_INT 1
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 2
39996: NEG
39997: PUSH
39998: LD_INT 0
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 2
40007: NEG
40008: PUSH
40009: LD_INT 1
40011: NEG
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: LIST
40021: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40022: LD_ADDR_VAR 0 64
40026: PUSH
40027: LD_INT 1
40029: NEG
40030: PUSH
40031: LD_INT 2
40033: NEG
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 2
40041: NEG
40042: PUSH
40043: LD_INT 1
40045: NEG
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 2
40053: NEG
40054: PUSH
40055: LD_INT 2
40057: NEG
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: LIST
40067: ST_TO_ADDR
// end ; 2 :
40068: GO 43334
40070: LD_INT 2
40072: DOUBLE
40073: EQUAL
40074: IFTRUE 40078
40076: GO 43333
40078: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
40079: LD_ADDR_VAR 0 29
40083: PUSH
40084: LD_INT 4
40086: PUSH
40087: LD_INT 0
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 4
40096: PUSH
40097: LD_INT 1
40099: NEG
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 5
40107: PUSH
40108: LD_INT 0
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 5
40117: PUSH
40118: LD_INT 1
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 4
40127: PUSH
40128: LD_INT 1
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 3
40137: PUSH
40138: LD_INT 0
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 3
40147: PUSH
40148: LD_INT 1
40150: NEG
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 3
40158: PUSH
40159: LD_INT 2
40161: NEG
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 5
40169: PUSH
40170: LD_INT 2
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 3
40179: PUSH
40180: LD_INT 3
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 3
40189: PUSH
40190: LD_INT 2
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 4
40199: PUSH
40200: LD_INT 3
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 4
40209: PUSH
40210: LD_INT 4
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 3
40219: PUSH
40220: LD_INT 4
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 2
40229: PUSH
40230: LD_INT 3
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 2
40239: PUSH
40240: LD_INT 2
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 4
40249: PUSH
40250: LD_INT 2
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 2
40259: PUSH
40260: LD_INT 4
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 0
40269: PUSH
40270: LD_INT 4
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 0
40279: PUSH
40280: LD_INT 3
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 1
40289: PUSH
40290: LD_INT 4
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 1
40299: PUSH
40300: LD_INT 5
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 0
40309: PUSH
40310: LD_INT 5
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 1
40319: NEG
40320: PUSH
40321: LD_INT 4
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 1
40330: NEG
40331: PUSH
40332: LD_INT 3
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 2
40341: PUSH
40342: LD_INT 5
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 2
40351: NEG
40352: PUSH
40353: LD_INT 3
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 3
40362: NEG
40363: PUSH
40364: LD_INT 0
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 3
40373: NEG
40374: PUSH
40375: LD_INT 1
40377: NEG
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 2
40385: NEG
40386: PUSH
40387: LD_INT 0
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 2
40396: NEG
40397: PUSH
40398: LD_INT 1
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 3
40407: NEG
40408: PUSH
40409: LD_INT 1
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 4
40418: NEG
40419: PUSH
40420: LD_INT 0
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 4
40429: NEG
40430: PUSH
40431: LD_INT 1
40433: NEG
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 4
40441: NEG
40442: PUSH
40443: LD_INT 2
40445: NEG
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 2
40453: NEG
40454: PUSH
40455: LD_INT 2
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 4
40464: NEG
40465: PUSH
40466: LD_INT 4
40468: NEG
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 4
40476: NEG
40477: PUSH
40478: LD_INT 5
40480: NEG
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 3
40488: NEG
40489: PUSH
40490: LD_INT 4
40492: NEG
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 3
40500: NEG
40501: PUSH
40502: LD_INT 3
40504: NEG
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 4
40512: NEG
40513: PUSH
40514: LD_INT 3
40516: NEG
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 5
40524: NEG
40525: PUSH
40526: LD_INT 4
40528: NEG
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 5
40536: NEG
40537: PUSH
40538: LD_INT 5
40540: NEG
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 3
40548: NEG
40549: PUSH
40550: LD_INT 5
40552: NEG
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 5
40560: NEG
40561: PUSH
40562: LD_INT 3
40564: NEG
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
40617: LD_ADDR_VAR 0 30
40621: PUSH
40622: LD_INT 4
40624: PUSH
40625: LD_INT 4
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 4
40634: PUSH
40635: LD_INT 3
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 5
40644: PUSH
40645: LD_INT 4
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 5
40654: PUSH
40655: LD_INT 5
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 4
40664: PUSH
40665: LD_INT 5
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 3
40674: PUSH
40675: LD_INT 4
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 3
40684: PUSH
40685: LD_INT 3
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 5
40694: PUSH
40695: LD_INT 3
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 3
40704: PUSH
40705: LD_INT 5
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: LD_INT 3
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 0
40724: PUSH
40725: LD_INT 2
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 1
40734: PUSH
40735: LD_INT 3
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 1
40744: PUSH
40745: LD_INT 4
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 0
40754: PUSH
40755: LD_INT 4
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 1
40764: NEG
40765: PUSH
40766: LD_INT 3
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 1
40775: NEG
40776: PUSH
40777: LD_INT 2
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 2
40786: PUSH
40787: LD_INT 4
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 2
40796: NEG
40797: PUSH
40798: LD_INT 2
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 4
40807: NEG
40808: PUSH
40809: LD_INT 0
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 4
40818: NEG
40819: PUSH
40820: LD_INT 1
40822: NEG
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 3
40830: NEG
40831: PUSH
40832: LD_INT 0
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 3
40841: NEG
40842: PUSH
40843: LD_INT 1
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 4
40852: NEG
40853: PUSH
40854: LD_INT 1
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 5
40863: NEG
40864: PUSH
40865: LD_INT 0
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 5
40874: NEG
40875: PUSH
40876: LD_INT 1
40878: NEG
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 5
40886: NEG
40887: PUSH
40888: LD_INT 2
40890: NEG
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 3
40898: NEG
40899: PUSH
40900: LD_INT 2
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 3
40909: NEG
40910: PUSH
40911: LD_INT 3
40913: NEG
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 3
40921: NEG
40922: PUSH
40923: LD_INT 4
40925: NEG
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 2
40933: NEG
40934: PUSH
40935: LD_INT 3
40937: NEG
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 2
40945: NEG
40946: PUSH
40947: LD_INT 2
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 3
40957: NEG
40958: PUSH
40959: LD_INT 2
40961: NEG
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 4
40969: NEG
40970: PUSH
40971: LD_INT 3
40973: NEG
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 4
40981: NEG
40982: PUSH
40983: LD_INT 4
40985: NEG
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 2
40993: NEG
40994: PUSH
40995: LD_INT 4
40997: NEG
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 4
41005: NEG
41006: PUSH
41007: LD_INT 2
41009: NEG
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 0
41017: PUSH
41018: LD_INT 4
41020: NEG
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 0
41028: PUSH
41029: LD_INT 5
41031: NEG
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 1
41039: PUSH
41040: LD_INT 4
41042: NEG
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 1
41050: PUSH
41051: LD_INT 3
41053: NEG
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 0
41061: PUSH
41062: LD_INT 3
41064: NEG
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 1
41072: NEG
41073: PUSH
41074: LD_INT 4
41076: NEG
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 1
41084: NEG
41085: PUSH
41086: LD_INT 5
41088: NEG
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 2
41096: PUSH
41097: LD_INT 3
41099: NEG
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 2
41107: NEG
41108: PUSH
41109: LD_INT 5
41111: NEG
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
41164: LD_ADDR_VAR 0 31
41168: PUSH
41169: LD_INT 0
41171: PUSH
41172: LD_INT 4
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 0
41181: PUSH
41182: LD_INT 3
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 1
41191: PUSH
41192: LD_INT 4
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 1
41201: PUSH
41202: LD_INT 5
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 0
41211: PUSH
41212: LD_INT 5
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 1
41221: NEG
41222: PUSH
41223: LD_INT 4
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 1
41232: NEG
41233: PUSH
41234: LD_INT 3
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 2
41243: PUSH
41244: LD_INT 5
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 2
41253: NEG
41254: PUSH
41255: LD_INT 3
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 3
41264: NEG
41265: PUSH
41266: LD_INT 0
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 3
41275: NEG
41276: PUSH
41277: LD_INT 1
41279: NEG
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 2
41287: NEG
41288: PUSH
41289: LD_INT 0
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 2
41298: NEG
41299: PUSH
41300: LD_INT 1
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 3
41309: NEG
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 4
41320: NEG
41321: PUSH
41322: LD_INT 0
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 4
41331: NEG
41332: PUSH
41333: LD_INT 1
41335: NEG
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 4
41343: NEG
41344: PUSH
41345: LD_INT 2
41347: NEG
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 2
41355: NEG
41356: PUSH
41357: LD_INT 2
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 4
41366: NEG
41367: PUSH
41368: LD_INT 4
41370: NEG
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 4
41378: NEG
41379: PUSH
41380: LD_INT 5
41382: NEG
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 3
41390: NEG
41391: PUSH
41392: LD_INT 4
41394: NEG
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 3
41402: NEG
41403: PUSH
41404: LD_INT 3
41406: NEG
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 4
41414: NEG
41415: PUSH
41416: LD_INT 3
41418: NEG
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 5
41426: NEG
41427: PUSH
41428: LD_INT 4
41430: NEG
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 5
41438: NEG
41439: PUSH
41440: LD_INT 5
41442: NEG
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 3
41450: NEG
41451: PUSH
41452: LD_INT 5
41454: NEG
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 5
41462: NEG
41463: PUSH
41464: LD_INT 3
41466: NEG
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: LD_INT 3
41477: NEG
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: LD_INT 4
41488: NEG
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 1
41496: PUSH
41497: LD_INT 3
41499: NEG
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 1
41507: PUSH
41508: LD_INT 2
41510: NEG
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: LD_INT 2
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 1
41529: NEG
41530: PUSH
41531: LD_INT 3
41533: NEG
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 1
41541: NEG
41542: PUSH
41543: LD_INT 4
41545: NEG
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 2
41553: PUSH
41554: LD_INT 2
41556: NEG
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 2
41564: NEG
41565: PUSH
41566: LD_INT 4
41568: NEG
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 4
41576: PUSH
41577: LD_INT 0
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 4
41586: PUSH
41587: LD_INT 1
41589: NEG
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 5
41597: PUSH
41598: LD_INT 0
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 5
41607: PUSH
41608: LD_INT 1
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 4
41617: PUSH
41618: LD_INT 1
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 3
41627: PUSH
41628: LD_INT 0
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 3
41637: PUSH
41638: LD_INT 1
41640: NEG
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 3
41648: PUSH
41649: LD_INT 2
41651: NEG
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 5
41659: PUSH
41660: LD_INT 2
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
41714: LD_ADDR_VAR 0 32
41718: PUSH
41719: LD_INT 4
41721: NEG
41722: PUSH
41723: LD_INT 0
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 4
41732: NEG
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 3
41744: NEG
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 3
41755: NEG
41756: PUSH
41757: LD_INT 1
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 4
41766: NEG
41767: PUSH
41768: LD_INT 1
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 5
41777: NEG
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 5
41788: NEG
41789: PUSH
41790: LD_INT 1
41792: NEG
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 5
41800: NEG
41801: PUSH
41802: LD_INT 2
41804: NEG
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 3
41812: NEG
41813: PUSH
41814: LD_INT 2
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 3
41823: NEG
41824: PUSH
41825: LD_INT 3
41827: NEG
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 3
41835: NEG
41836: PUSH
41837: LD_INT 4
41839: NEG
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 2
41847: NEG
41848: PUSH
41849: LD_INT 3
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 2
41859: NEG
41860: PUSH
41861: LD_INT 2
41863: NEG
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 3
41871: NEG
41872: PUSH
41873: LD_INT 2
41875: NEG
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 4
41883: NEG
41884: PUSH
41885: LD_INT 3
41887: NEG
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 4
41895: NEG
41896: PUSH
41897: LD_INT 4
41899: NEG
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 2
41907: NEG
41908: PUSH
41909: LD_INT 4
41911: NEG
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 4
41919: NEG
41920: PUSH
41921: LD_INT 2
41923: NEG
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 0
41931: PUSH
41932: LD_INT 4
41934: NEG
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 0
41942: PUSH
41943: LD_INT 5
41945: NEG
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 1
41953: PUSH
41954: LD_INT 4
41956: NEG
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 1
41964: PUSH
41965: LD_INT 3
41967: NEG
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 0
41975: PUSH
41976: LD_INT 3
41978: NEG
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 1
41986: NEG
41987: PUSH
41988: LD_INT 4
41990: NEG
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 1
41998: NEG
41999: PUSH
42000: LD_INT 5
42002: NEG
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 2
42010: PUSH
42011: LD_INT 3
42013: NEG
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 2
42021: NEG
42022: PUSH
42023: LD_INT 5
42025: NEG
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 3
42033: PUSH
42034: LD_INT 0
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 3
42043: PUSH
42044: LD_INT 1
42046: NEG
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 4
42054: PUSH
42055: LD_INT 0
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 4
42064: PUSH
42065: LD_INT 1
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 3
42074: PUSH
42075: LD_INT 1
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 2
42084: PUSH
42085: LD_INT 0
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 2
42094: PUSH
42095: LD_INT 1
42097: NEG
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 2
42105: PUSH
42106: LD_INT 2
42108: NEG
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 4
42116: PUSH
42117: LD_INT 2
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 4
42126: PUSH
42127: LD_INT 4
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 4
42136: PUSH
42137: LD_INT 3
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 5
42146: PUSH
42147: LD_INT 4
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 5
42156: PUSH
42157: LD_INT 5
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 4
42166: PUSH
42167: LD_INT 5
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 3
42176: PUSH
42177: LD_INT 4
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 3
42186: PUSH
42187: LD_INT 3
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 5
42196: PUSH
42197: LD_INT 3
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 3
42206: PUSH
42207: LD_INT 5
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
42261: LD_ADDR_VAR 0 33
42265: PUSH
42266: LD_INT 4
42268: NEG
42269: PUSH
42270: LD_INT 4
42272: NEG
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 4
42280: NEG
42281: PUSH
42282: LD_INT 5
42284: NEG
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 3
42292: NEG
42293: PUSH
42294: LD_INT 4
42296: NEG
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 3
42304: NEG
42305: PUSH
42306: LD_INT 3
42308: NEG
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 4
42316: NEG
42317: PUSH
42318: LD_INT 3
42320: NEG
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 5
42328: NEG
42329: PUSH
42330: LD_INT 4
42332: NEG
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 5
42340: NEG
42341: PUSH
42342: LD_INT 5
42344: NEG
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 3
42352: NEG
42353: PUSH
42354: LD_INT 5
42356: NEG
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 5
42364: NEG
42365: PUSH
42366: LD_INT 3
42368: NEG
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 0
42376: PUSH
42377: LD_INT 3
42379: NEG
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: LD_INT 4
42390: NEG
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 1
42398: PUSH
42399: LD_INT 3
42401: NEG
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 1
42409: PUSH
42410: LD_INT 2
42412: NEG
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 0
42420: PUSH
42421: LD_INT 2
42423: NEG
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 1
42431: NEG
42432: PUSH
42433: LD_INT 3
42435: NEG
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 1
42443: NEG
42444: PUSH
42445: LD_INT 4
42447: NEG
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 2
42455: PUSH
42456: LD_INT 2
42458: NEG
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 2
42466: NEG
42467: PUSH
42468: LD_INT 4
42470: NEG
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 4
42478: PUSH
42479: LD_INT 0
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 4
42488: PUSH
42489: LD_INT 1
42491: NEG
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 5
42499: PUSH
42500: LD_INT 0
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 5
42509: PUSH
42510: LD_INT 1
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 4
42519: PUSH
42520: LD_INT 1
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 3
42529: PUSH
42530: LD_INT 0
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 3
42539: PUSH
42540: LD_INT 1
42542: NEG
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 3
42550: PUSH
42551: LD_INT 2
42553: NEG
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 5
42561: PUSH
42562: LD_INT 2
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 3
42571: PUSH
42572: LD_INT 3
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 3
42581: PUSH
42582: LD_INT 2
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 4
42591: PUSH
42592: LD_INT 3
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 4
42601: PUSH
42602: LD_INT 4
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 3
42611: PUSH
42612: LD_INT 4
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 2
42621: PUSH
42622: LD_INT 3
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 2
42631: PUSH
42632: LD_INT 2
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 4
42641: PUSH
42642: LD_INT 2
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 2
42651: PUSH
42652: LD_INT 4
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 0
42661: PUSH
42662: LD_INT 4
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 0
42671: PUSH
42672: LD_INT 3
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 1
42681: PUSH
42682: LD_INT 4
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 1
42691: PUSH
42692: LD_INT 5
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 0
42701: PUSH
42702: LD_INT 5
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 1
42711: NEG
42712: PUSH
42713: LD_INT 4
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 1
42722: NEG
42723: PUSH
42724: LD_INT 3
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 2
42733: PUSH
42734: LD_INT 5
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 2
42743: NEG
42744: PUSH
42745: LD_INT 3
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
42799: LD_ADDR_VAR 0 34
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: LD_INT 4
42809: NEG
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: LD_INT 5
42820: NEG
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 1
42828: PUSH
42829: LD_INT 4
42831: NEG
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 1
42839: PUSH
42840: LD_INT 3
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 0
42850: PUSH
42851: LD_INT 3
42853: NEG
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 1
42861: NEG
42862: PUSH
42863: LD_INT 4
42865: NEG
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 1
42873: NEG
42874: PUSH
42875: LD_INT 5
42877: NEG
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 2
42885: PUSH
42886: LD_INT 3
42888: NEG
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 2
42896: NEG
42897: PUSH
42898: LD_INT 5
42900: NEG
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 3
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 3
42918: PUSH
42919: LD_INT 1
42921: NEG
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 4
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 4
42939: PUSH
42940: LD_INT 1
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 3
42949: PUSH
42950: LD_INT 1
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 2
42959: PUSH
42960: LD_INT 0
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 2
42969: PUSH
42970: LD_INT 1
42972: NEG
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 2
42980: PUSH
42981: LD_INT 2
42983: NEG
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 4
42991: PUSH
42992: LD_INT 2
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 4
43001: PUSH
43002: LD_INT 4
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 4
43011: PUSH
43012: LD_INT 3
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 5
43021: PUSH
43022: LD_INT 4
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 5
43031: PUSH
43032: LD_INT 5
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 4
43041: PUSH
43042: LD_INT 5
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 3
43051: PUSH
43052: LD_INT 4
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 3
43061: PUSH
43062: LD_INT 3
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 5
43071: PUSH
43072: LD_INT 3
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 3
43081: PUSH
43082: LD_INT 5
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: LD_INT 3
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 0
43101: PUSH
43102: LD_INT 2
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 1
43111: PUSH
43112: LD_INT 3
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 1
43121: PUSH
43122: LD_INT 4
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 0
43131: PUSH
43132: LD_INT 4
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 1
43141: NEG
43142: PUSH
43143: LD_INT 3
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 1
43152: NEG
43153: PUSH
43154: LD_INT 2
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 2
43163: PUSH
43164: LD_INT 4
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 2
43173: NEG
43174: PUSH
43175: LD_INT 2
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 4
43184: NEG
43185: PUSH
43186: LD_INT 0
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 4
43195: NEG
43196: PUSH
43197: LD_INT 1
43199: NEG
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 3
43207: NEG
43208: PUSH
43209: LD_INT 0
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 3
43218: NEG
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 4
43229: NEG
43230: PUSH
43231: LD_INT 1
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 5
43240: NEG
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 5
43251: NEG
43252: PUSH
43253: LD_INT 1
43255: NEG
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 5
43263: NEG
43264: PUSH
43265: LD_INT 2
43267: NEG
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 3
43275: NEG
43276: PUSH
43277: LD_INT 2
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: ST_TO_ADDR
// end ; end ;
43331: GO 43334
43333: POP
// case btype of b_depot , b_warehouse :
43334: LD_VAR 0 1
43338: PUSH
43339: LD_INT 0
43341: DOUBLE
43342: EQUAL
43343: IFTRUE 43353
43345: LD_INT 1
43347: DOUBLE
43348: EQUAL
43349: IFTRUE 43353
43351: GO 43554
43353: POP
// case nation of nation_american :
43354: LD_VAR 0 5
43358: PUSH
43359: LD_INT 1
43361: DOUBLE
43362: EQUAL
43363: IFTRUE 43367
43365: GO 43423
43367: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
43368: LD_ADDR_VAR 0 9
43372: PUSH
43373: LD_VAR 0 11
43377: PUSH
43378: LD_VAR 0 12
43382: PUSH
43383: LD_VAR 0 13
43387: PUSH
43388: LD_VAR 0 14
43392: PUSH
43393: LD_VAR 0 15
43397: PUSH
43398: LD_VAR 0 16
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: PUSH
43411: LD_VAR 0 4
43415: PUSH
43416: LD_INT 1
43418: PLUS
43419: ARRAY
43420: ST_TO_ADDR
43421: GO 43552
43423: LD_INT 2
43425: DOUBLE
43426: EQUAL
43427: IFTRUE 43431
43429: GO 43487
43431: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
43432: LD_ADDR_VAR 0 9
43436: PUSH
43437: LD_VAR 0 17
43441: PUSH
43442: LD_VAR 0 18
43446: PUSH
43447: LD_VAR 0 19
43451: PUSH
43452: LD_VAR 0 20
43456: PUSH
43457: LD_VAR 0 21
43461: PUSH
43462: LD_VAR 0 22
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: PUSH
43475: LD_VAR 0 4
43479: PUSH
43480: LD_INT 1
43482: PLUS
43483: ARRAY
43484: ST_TO_ADDR
43485: GO 43552
43487: LD_INT 3
43489: DOUBLE
43490: EQUAL
43491: IFTRUE 43495
43493: GO 43551
43495: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
43496: LD_ADDR_VAR 0 9
43500: PUSH
43501: LD_VAR 0 23
43505: PUSH
43506: LD_VAR 0 24
43510: PUSH
43511: LD_VAR 0 25
43515: PUSH
43516: LD_VAR 0 26
43520: PUSH
43521: LD_VAR 0 27
43525: PUSH
43526: LD_VAR 0 28
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: PUSH
43539: LD_VAR 0 4
43543: PUSH
43544: LD_INT 1
43546: PLUS
43547: ARRAY
43548: ST_TO_ADDR
43549: GO 43552
43551: POP
43552: GO 44107
43554: LD_INT 2
43556: DOUBLE
43557: EQUAL
43558: IFTRUE 43568
43560: LD_INT 3
43562: DOUBLE
43563: EQUAL
43564: IFTRUE 43568
43566: GO 43624
43568: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
43569: LD_ADDR_VAR 0 9
43573: PUSH
43574: LD_VAR 0 29
43578: PUSH
43579: LD_VAR 0 30
43583: PUSH
43584: LD_VAR 0 31
43588: PUSH
43589: LD_VAR 0 32
43593: PUSH
43594: LD_VAR 0 33
43598: PUSH
43599: LD_VAR 0 34
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: PUSH
43612: LD_VAR 0 4
43616: PUSH
43617: LD_INT 1
43619: PLUS
43620: ARRAY
43621: ST_TO_ADDR
43622: GO 44107
43624: LD_INT 16
43626: DOUBLE
43627: EQUAL
43628: IFTRUE 43686
43630: LD_INT 17
43632: DOUBLE
43633: EQUAL
43634: IFTRUE 43686
43636: LD_INT 18
43638: DOUBLE
43639: EQUAL
43640: IFTRUE 43686
43642: LD_INT 19
43644: DOUBLE
43645: EQUAL
43646: IFTRUE 43686
43648: LD_INT 22
43650: DOUBLE
43651: EQUAL
43652: IFTRUE 43686
43654: LD_INT 20
43656: DOUBLE
43657: EQUAL
43658: IFTRUE 43686
43660: LD_INT 21
43662: DOUBLE
43663: EQUAL
43664: IFTRUE 43686
43666: LD_INT 23
43668: DOUBLE
43669: EQUAL
43670: IFTRUE 43686
43672: LD_INT 24
43674: DOUBLE
43675: EQUAL
43676: IFTRUE 43686
43678: LD_INT 25
43680: DOUBLE
43681: EQUAL
43682: IFTRUE 43686
43684: GO 43742
43686: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
43687: LD_ADDR_VAR 0 9
43691: PUSH
43692: LD_VAR 0 35
43696: PUSH
43697: LD_VAR 0 36
43701: PUSH
43702: LD_VAR 0 37
43706: PUSH
43707: LD_VAR 0 38
43711: PUSH
43712: LD_VAR 0 39
43716: PUSH
43717: LD_VAR 0 40
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: PUSH
43730: LD_VAR 0 4
43734: PUSH
43735: LD_INT 1
43737: PLUS
43738: ARRAY
43739: ST_TO_ADDR
43740: GO 44107
43742: LD_INT 6
43744: DOUBLE
43745: EQUAL
43746: IFTRUE 43798
43748: LD_INT 7
43750: DOUBLE
43751: EQUAL
43752: IFTRUE 43798
43754: LD_INT 8
43756: DOUBLE
43757: EQUAL
43758: IFTRUE 43798
43760: LD_INT 13
43762: DOUBLE
43763: EQUAL
43764: IFTRUE 43798
43766: LD_INT 12
43768: DOUBLE
43769: EQUAL
43770: IFTRUE 43798
43772: LD_INT 15
43774: DOUBLE
43775: EQUAL
43776: IFTRUE 43798
43778: LD_INT 11
43780: DOUBLE
43781: EQUAL
43782: IFTRUE 43798
43784: LD_INT 14
43786: DOUBLE
43787: EQUAL
43788: IFTRUE 43798
43790: LD_INT 10
43792: DOUBLE
43793: EQUAL
43794: IFTRUE 43798
43796: GO 43854
43798: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
43799: LD_ADDR_VAR 0 9
43803: PUSH
43804: LD_VAR 0 41
43808: PUSH
43809: LD_VAR 0 42
43813: PUSH
43814: LD_VAR 0 43
43818: PUSH
43819: LD_VAR 0 44
43823: PUSH
43824: LD_VAR 0 45
43828: PUSH
43829: LD_VAR 0 46
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: PUSH
43842: LD_VAR 0 4
43846: PUSH
43847: LD_INT 1
43849: PLUS
43850: ARRAY
43851: ST_TO_ADDR
43852: GO 44107
43854: LD_INT 36
43856: DOUBLE
43857: EQUAL
43858: IFTRUE 43862
43860: GO 43918
43862: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
43863: LD_ADDR_VAR 0 9
43867: PUSH
43868: LD_VAR 0 47
43872: PUSH
43873: LD_VAR 0 48
43877: PUSH
43878: LD_VAR 0 49
43882: PUSH
43883: LD_VAR 0 50
43887: PUSH
43888: LD_VAR 0 51
43892: PUSH
43893: LD_VAR 0 52
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: PUSH
43906: LD_VAR 0 4
43910: PUSH
43911: LD_INT 1
43913: PLUS
43914: ARRAY
43915: ST_TO_ADDR
43916: GO 44107
43918: LD_INT 4
43920: DOUBLE
43921: EQUAL
43922: IFTRUE 43944
43924: LD_INT 5
43926: DOUBLE
43927: EQUAL
43928: IFTRUE 43944
43930: LD_INT 34
43932: DOUBLE
43933: EQUAL
43934: IFTRUE 43944
43936: LD_INT 37
43938: DOUBLE
43939: EQUAL
43940: IFTRUE 43944
43942: GO 44000
43944: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
43945: LD_ADDR_VAR 0 9
43949: PUSH
43950: LD_VAR 0 53
43954: PUSH
43955: LD_VAR 0 54
43959: PUSH
43960: LD_VAR 0 55
43964: PUSH
43965: LD_VAR 0 56
43969: PUSH
43970: LD_VAR 0 57
43974: PUSH
43975: LD_VAR 0 58
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: PUSH
43988: LD_VAR 0 4
43992: PUSH
43993: LD_INT 1
43995: PLUS
43996: ARRAY
43997: ST_TO_ADDR
43998: GO 44107
44000: LD_INT 31
44002: DOUBLE
44003: EQUAL
44004: IFTRUE 44050
44006: LD_INT 32
44008: DOUBLE
44009: EQUAL
44010: IFTRUE 44050
44012: LD_INT 33
44014: DOUBLE
44015: EQUAL
44016: IFTRUE 44050
44018: LD_INT 27
44020: DOUBLE
44021: EQUAL
44022: IFTRUE 44050
44024: LD_INT 26
44026: DOUBLE
44027: EQUAL
44028: IFTRUE 44050
44030: LD_INT 28
44032: DOUBLE
44033: EQUAL
44034: IFTRUE 44050
44036: LD_INT 29
44038: DOUBLE
44039: EQUAL
44040: IFTRUE 44050
44042: LD_INT 30
44044: DOUBLE
44045: EQUAL
44046: IFTRUE 44050
44048: GO 44106
44050: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
44051: LD_ADDR_VAR 0 9
44055: PUSH
44056: LD_VAR 0 59
44060: PUSH
44061: LD_VAR 0 60
44065: PUSH
44066: LD_VAR 0 61
44070: PUSH
44071: LD_VAR 0 62
44075: PUSH
44076: LD_VAR 0 63
44080: PUSH
44081: LD_VAR 0 64
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: PUSH
44094: LD_VAR 0 4
44098: PUSH
44099: LD_INT 1
44101: PLUS
44102: ARRAY
44103: ST_TO_ADDR
44104: GO 44107
44106: POP
// temp_list2 = [ ] ;
44107: LD_ADDR_VAR 0 10
44111: PUSH
44112: EMPTY
44113: ST_TO_ADDR
// for i in temp_list do
44114: LD_ADDR_VAR 0 8
44118: PUSH
44119: LD_VAR 0 9
44123: PUSH
44124: FOR_IN
44125: IFFALSE 44177
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
44127: LD_ADDR_VAR 0 10
44131: PUSH
44132: LD_VAR 0 10
44136: PUSH
44137: LD_VAR 0 8
44141: PUSH
44142: LD_INT 1
44144: ARRAY
44145: PUSH
44146: LD_VAR 0 2
44150: PLUS
44151: PUSH
44152: LD_VAR 0 8
44156: PUSH
44157: LD_INT 2
44159: ARRAY
44160: PUSH
44161: LD_VAR 0 3
44165: PLUS
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: EMPTY
44172: LIST
44173: ADD
44174: ST_TO_ADDR
44175: GO 44124
44177: POP
44178: POP
// result = temp_list2 ;
44179: LD_ADDR_VAR 0 7
44183: PUSH
44184: LD_VAR 0 10
44188: ST_TO_ADDR
// end ;
44189: LD_VAR 0 7
44193: RET
// export function EnemyInRange ( unit , dist ) ; begin
44194: LD_INT 0
44196: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
44197: LD_ADDR_VAR 0 3
44201: PUSH
44202: LD_VAR 0 1
44206: PPUSH
44207: CALL_OW 255
44211: PPUSH
44212: LD_VAR 0 1
44216: PPUSH
44217: CALL_OW 250
44221: PPUSH
44222: LD_VAR 0 1
44226: PPUSH
44227: CALL_OW 251
44231: PPUSH
44232: LD_VAR 0 2
44236: PPUSH
44237: CALL 18298 0 4
44241: PUSH
44242: LD_INT 4
44244: ARRAY
44245: ST_TO_ADDR
// end ;
44246: LD_VAR 0 3
44250: RET
// export function PlayerSeeMe ( unit ) ; begin
44251: LD_INT 0
44253: PPUSH
// result := See ( your_side , unit ) ;
44254: LD_ADDR_VAR 0 2
44258: PUSH
44259: LD_OWVAR 2
44263: PPUSH
44264: LD_VAR 0 1
44268: PPUSH
44269: CALL_OW 292
44273: ST_TO_ADDR
// end ;
44274: LD_VAR 0 2
44278: RET
// export function ReverseDir ( unit ) ; begin
44279: LD_INT 0
44281: PPUSH
// if not unit then
44282: LD_VAR 0 1
44286: NOT
44287: IFFALSE 44291
// exit ;
44289: GO 44314
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
44291: LD_ADDR_VAR 0 2
44295: PUSH
44296: LD_VAR 0 1
44300: PPUSH
44301: CALL_OW 254
44305: PUSH
44306: LD_INT 3
44308: PLUS
44309: PUSH
44310: LD_INT 6
44312: MOD
44313: ST_TO_ADDR
// end ;
44314: LD_VAR 0 2
44318: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
44319: LD_INT 0
44321: PPUSH
44322: PPUSH
44323: PPUSH
44324: PPUSH
44325: PPUSH
// if not hexes then
44326: LD_VAR 0 2
44330: NOT
44331: IFFALSE 44335
// exit ;
44333: GO 44483
// dist := 9999 ;
44335: LD_ADDR_VAR 0 5
44339: PUSH
44340: LD_INT 9999
44342: ST_TO_ADDR
// for i = 1 to hexes do
44343: LD_ADDR_VAR 0 4
44347: PUSH
44348: DOUBLE
44349: LD_INT 1
44351: DEC
44352: ST_TO_ADDR
44353: LD_VAR 0 2
44357: PUSH
44358: FOR_TO
44359: IFFALSE 44471
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
44361: LD_VAR 0 1
44365: PPUSH
44366: LD_VAR 0 2
44370: PUSH
44371: LD_VAR 0 4
44375: ARRAY
44376: PUSH
44377: LD_INT 1
44379: ARRAY
44380: PPUSH
44381: LD_VAR 0 2
44385: PUSH
44386: LD_VAR 0 4
44390: ARRAY
44391: PUSH
44392: LD_INT 2
44394: ARRAY
44395: PPUSH
44396: CALL_OW 297
44400: PUSH
44401: LD_VAR 0 5
44405: LESS
44406: IFFALSE 44469
// begin hex := hexes [ i ] ;
44408: LD_ADDR_VAR 0 7
44412: PUSH
44413: LD_VAR 0 2
44417: PUSH
44418: LD_VAR 0 4
44422: ARRAY
44423: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44424: LD_ADDR_VAR 0 5
44428: PUSH
44429: LD_VAR 0 1
44433: PPUSH
44434: LD_VAR 0 2
44438: PUSH
44439: LD_VAR 0 4
44443: ARRAY
44444: PUSH
44445: LD_INT 1
44447: ARRAY
44448: PPUSH
44449: LD_VAR 0 2
44453: PUSH
44454: LD_VAR 0 4
44458: ARRAY
44459: PUSH
44460: LD_INT 2
44462: ARRAY
44463: PPUSH
44464: CALL_OW 297
44468: ST_TO_ADDR
// end ; end ;
44469: GO 44358
44471: POP
44472: POP
// result := hex ;
44473: LD_ADDR_VAR 0 3
44477: PUSH
44478: LD_VAR 0 7
44482: ST_TO_ADDR
// end ;
44483: LD_VAR 0 3
44487: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
44488: LD_INT 0
44490: PPUSH
44491: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
44492: LD_VAR 0 1
44496: NOT
44497: PUSH
44498: LD_VAR 0 1
44502: PUSH
44503: LD_INT 21
44505: PUSH
44506: LD_INT 2
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 23
44515: PUSH
44516: LD_INT 2
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PPUSH
44527: CALL_OW 69
44531: IN
44532: NOT
44533: OR
44534: IFFALSE 44538
// exit ;
44536: GO 44585
// for i = 1 to 3 do
44538: LD_ADDR_VAR 0 3
44542: PUSH
44543: DOUBLE
44544: LD_INT 1
44546: DEC
44547: ST_TO_ADDR
44548: LD_INT 3
44550: PUSH
44551: FOR_TO
44552: IFFALSE 44583
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
44554: LD_VAR 0 1
44558: PPUSH
44559: CALL_OW 250
44563: PPUSH
44564: LD_VAR 0 1
44568: PPUSH
44569: CALL_OW 251
44573: PPUSH
44574: LD_INT 1
44576: PPUSH
44577: CALL_OW 453
44581: GO 44551
44583: POP
44584: POP
// end ;
44585: LD_VAR 0 2
44589: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44590: LD_INT 0
44592: PPUSH
44593: PPUSH
44594: PPUSH
44595: PPUSH
44596: PPUSH
44597: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
44598: LD_VAR 0 1
44602: NOT
44603: PUSH
44604: LD_VAR 0 2
44608: NOT
44609: OR
44610: PUSH
44611: LD_VAR 0 1
44615: PPUSH
44616: CALL_OW 314
44620: OR
44621: IFFALSE 44625
// exit ;
44623: GO 45066
// x := GetX ( enemy_unit ) ;
44625: LD_ADDR_VAR 0 7
44629: PUSH
44630: LD_VAR 0 2
44634: PPUSH
44635: CALL_OW 250
44639: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
44640: LD_ADDR_VAR 0 8
44644: PUSH
44645: LD_VAR 0 2
44649: PPUSH
44650: CALL_OW 251
44654: ST_TO_ADDR
// if not x or not y then
44655: LD_VAR 0 7
44659: NOT
44660: PUSH
44661: LD_VAR 0 8
44665: NOT
44666: OR
44667: IFFALSE 44671
// exit ;
44669: GO 45066
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
44671: LD_ADDR_VAR 0 6
44675: PUSH
44676: LD_VAR 0 7
44680: PPUSH
44681: LD_INT 0
44683: PPUSH
44684: LD_INT 4
44686: PPUSH
44687: CALL_OW 272
44691: PUSH
44692: LD_VAR 0 8
44696: PPUSH
44697: LD_INT 0
44699: PPUSH
44700: LD_INT 4
44702: PPUSH
44703: CALL_OW 273
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_VAR 0 7
44716: PPUSH
44717: LD_INT 1
44719: PPUSH
44720: LD_INT 4
44722: PPUSH
44723: CALL_OW 272
44727: PUSH
44728: LD_VAR 0 8
44732: PPUSH
44733: LD_INT 1
44735: PPUSH
44736: LD_INT 4
44738: PPUSH
44739: CALL_OW 273
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_VAR 0 7
44752: PPUSH
44753: LD_INT 2
44755: PPUSH
44756: LD_INT 4
44758: PPUSH
44759: CALL_OW 272
44763: PUSH
44764: LD_VAR 0 8
44768: PPUSH
44769: LD_INT 2
44771: PPUSH
44772: LD_INT 4
44774: PPUSH
44775: CALL_OW 273
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_VAR 0 7
44788: PPUSH
44789: LD_INT 3
44791: PPUSH
44792: LD_INT 4
44794: PPUSH
44795: CALL_OW 272
44799: PUSH
44800: LD_VAR 0 8
44804: PPUSH
44805: LD_INT 3
44807: PPUSH
44808: LD_INT 4
44810: PPUSH
44811: CALL_OW 273
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_VAR 0 7
44824: PPUSH
44825: LD_INT 4
44827: PPUSH
44828: LD_INT 4
44830: PPUSH
44831: CALL_OW 272
44835: PUSH
44836: LD_VAR 0 8
44840: PPUSH
44841: LD_INT 4
44843: PPUSH
44844: LD_INT 4
44846: PPUSH
44847: CALL_OW 273
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_VAR 0 7
44860: PPUSH
44861: LD_INT 5
44863: PPUSH
44864: LD_INT 4
44866: PPUSH
44867: CALL_OW 272
44871: PUSH
44872: LD_VAR 0 8
44876: PPUSH
44877: LD_INT 5
44879: PPUSH
44880: LD_INT 4
44882: PPUSH
44883: CALL_OW 273
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: ST_TO_ADDR
// for i = tmp downto 1 do
44900: LD_ADDR_VAR 0 4
44904: PUSH
44905: DOUBLE
44906: LD_VAR 0 6
44910: INC
44911: ST_TO_ADDR
44912: LD_INT 1
44914: PUSH
44915: FOR_DOWNTO
44916: IFFALSE 45017
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
44918: LD_VAR 0 6
44922: PUSH
44923: LD_VAR 0 4
44927: ARRAY
44928: PUSH
44929: LD_INT 1
44931: ARRAY
44932: PPUSH
44933: LD_VAR 0 6
44937: PUSH
44938: LD_VAR 0 4
44942: ARRAY
44943: PUSH
44944: LD_INT 2
44946: ARRAY
44947: PPUSH
44948: CALL_OW 488
44952: NOT
44953: PUSH
44954: LD_VAR 0 6
44958: PUSH
44959: LD_VAR 0 4
44963: ARRAY
44964: PUSH
44965: LD_INT 1
44967: ARRAY
44968: PPUSH
44969: LD_VAR 0 6
44973: PUSH
44974: LD_VAR 0 4
44978: ARRAY
44979: PUSH
44980: LD_INT 2
44982: ARRAY
44983: PPUSH
44984: CALL_OW 428
44988: PUSH
44989: LD_INT 0
44991: NONEQUAL
44992: OR
44993: IFFALSE 45015
// tmp := Delete ( tmp , i ) ;
44995: LD_ADDR_VAR 0 6
44999: PUSH
45000: LD_VAR 0 6
45004: PPUSH
45005: LD_VAR 0 4
45009: PPUSH
45010: CALL_OW 3
45014: ST_TO_ADDR
45015: GO 44915
45017: POP
45018: POP
// j := GetClosestHex ( unit , tmp ) ;
45019: LD_ADDR_VAR 0 5
45023: PUSH
45024: LD_VAR 0 1
45028: PPUSH
45029: LD_VAR 0 6
45033: PPUSH
45034: CALL 44319 0 2
45038: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
45039: LD_VAR 0 1
45043: PPUSH
45044: LD_VAR 0 5
45048: PUSH
45049: LD_INT 1
45051: ARRAY
45052: PPUSH
45053: LD_VAR 0 5
45057: PUSH
45058: LD_INT 2
45060: ARRAY
45061: PPUSH
45062: CALL_OW 111
// end ;
45066: LD_VAR 0 3
45070: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
45071: LD_INT 0
45073: PPUSH
45074: PPUSH
45075: PPUSH
// uc_side = 0 ;
45076: LD_ADDR_OWVAR 20
45080: PUSH
45081: LD_INT 0
45083: ST_TO_ADDR
// uc_nation = 0 ;
45084: LD_ADDR_OWVAR 21
45088: PUSH
45089: LD_INT 0
45091: ST_TO_ADDR
// InitHc ;
45092: CALL_OW 19
// InitVc ;
45096: CALL_OW 20
// if mastodonts then
45100: LD_VAR 0 6
45104: IFFALSE 45171
// for i = 1 to mastodonts do
45106: LD_ADDR_VAR 0 11
45110: PUSH
45111: DOUBLE
45112: LD_INT 1
45114: DEC
45115: ST_TO_ADDR
45116: LD_VAR 0 6
45120: PUSH
45121: FOR_TO
45122: IFFALSE 45169
// begin vc_chassis := 31 ;
45124: LD_ADDR_OWVAR 37
45128: PUSH
45129: LD_INT 31
45131: ST_TO_ADDR
// vc_control := control_rider ;
45132: LD_ADDR_OWVAR 38
45136: PUSH
45137: LD_INT 4
45139: ST_TO_ADDR
// animal := CreateVehicle ;
45140: LD_ADDR_VAR 0 12
45144: PUSH
45145: CALL_OW 45
45149: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45150: LD_VAR 0 12
45154: PPUSH
45155: LD_VAR 0 8
45159: PPUSH
45160: LD_INT 0
45162: PPUSH
45163: CALL 47240 0 3
// end ;
45167: GO 45121
45169: POP
45170: POP
// if horses then
45171: LD_VAR 0 5
45175: IFFALSE 45242
// for i = 1 to horses do
45177: LD_ADDR_VAR 0 11
45181: PUSH
45182: DOUBLE
45183: LD_INT 1
45185: DEC
45186: ST_TO_ADDR
45187: LD_VAR 0 5
45191: PUSH
45192: FOR_TO
45193: IFFALSE 45240
// begin hc_class := 21 ;
45195: LD_ADDR_OWVAR 28
45199: PUSH
45200: LD_INT 21
45202: ST_TO_ADDR
// hc_gallery :=  ;
45203: LD_ADDR_OWVAR 33
45207: PUSH
45208: LD_STRING 
45210: ST_TO_ADDR
// animal := CreateHuman ;
45211: LD_ADDR_VAR 0 12
45215: PUSH
45216: CALL_OW 44
45220: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45221: LD_VAR 0 12
45225: PPUSH
45226: LD_VAR 0 8
45230: PPUSH
45231: LD_INT 0
45233: PPUSH
45234: CALL 47240 0 3
// end ;
45238: GO 45192
45240: POP
45241: POP
// if birds then
45242: LD_VAR 0 1
45246: IFFALSE 45313
// for i = 1 to birds do
45248: LD_ADDR_VAR 0 11
45252: PUSH
45253: DOUBLE
45254: LD_INT 1
45256: DEC
45257: ST_TO_ADDR
45258: LD_VAR 0 1
45262: PUSH
45263: FOR_TO
45264: IFFALSE 45311
// begin hc_class = 18 ;
45266: LD_ADDR_OWVAR 28
45270: PUSH
45271: LD_INT 18
45273: ST_TO_ADDR
// hc_gallery =  ;
45274: LD_ADDR_OWVAR 33
45278: PUSH
45279: LD_STRING 
45281: ST_TO_ADDR
// animal := CreateHuman ;
45282: LD_ADDR_VAR 0 12
45286: PUSH
45287: CALL_OW 44
45291: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45292: LD_VAR 0 12
45296: PPUSH
45297: LD_VAR 0 8
45301: PPUSH
45302: LD_INT 0
45304: PPUSH
45305: CALL 47240 0 3
// end ;
45309: GO 45263
45311: POP
45312: POP
// if tigers then
45313: LD_VAR 0 2
45317: IFFALSE 45401
// for i = 1 to tigers do
45319: LD_ADDR_VAR 0 11
45323: PUSH
45324: DOUBLE
45325: LD_INT 1
45327: DEC
45328: ST_TO_ADDR
45329: LD_VAR 0 2
45333: PUSH
45334: FOR_TO
45335: IFFALSE 45399
// begin hc_class = class_tiger ;
45337: LD_ADDR_OWVAR 28
45341: PUSH
45342: LD_INT 14
45344: ST_TO_ADDR
// hc_gallery =  ;
45345: LD_ADDR_OWVAR 33
45349: PUSH
45350: LD_STRING 
45352: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45353: LD_ADDR_OWVAR 35
45357: PUSH
45358: LD_INT 7
45360: NEG
45361: PPUSH
45362: LD_INT 7
45364: PPUSH
45365: CALL_OW 12
45369: ST_TO_ADDR
// animal := CreateHuman ;
45370: LD_ADDR_VAR 0 12
45374: PUSH
45375: CALL_OW 44
45379: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45380: LD_VAR 0 12
45384: PPUSH
45385: LD_VAR 0 8
45389: PPUSH
45390: LD_INT 0
45392: PPUSH
45393: CALL 47240 0 3
// end ;
45397: GO 45334
45399: POP
45400: POP
// if apemans then
45401: LD_VAR 0 3
45405: IFFALSE 45528
// for i = 1 to apemans do
45407: LD_ADDR_VAR 0 11
45411: PUSH
45412: DOUBLE
45413: LD_INT 1
45415: DEC
45416: ST_TO_ADDR
45417: LD_VAR 0 3
45421: PUSH
45422: FOR_TO
45423: IFFALSE 45526
// begin hc_class = class_apeman ;
45425: LD_ADDR_OWVAR 28
45429: PUSH
45430: LD_INT 12
45432: ST_TO_ADDR
// hc_gallery =  ;
45433: LD_ADDR_OWVAR 33
45437: PUSH
45438: LD_STRING 
45440: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
45441: LD_ADDR_OWVAR 35
45445: PUSH
45446: LD_INT 5
45448: NEG
45449: PPUSH
45450: LD_INT 5
45452: PPUSH
45453: CALL_OW 12
45457: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45458: LD_ADDR_OWVAR 31
45462: PUSH
45463: LD_INT 1
45465: PPUSH
45466: LD_INT 3
45468: PPUSH
45469: CALL_OW 12
45473: PUSH
45474: LD_INT 1
45476: PPUSH
45477: LD_INT 3
45479: PPUSH
45480: CALL_OW 12
45484: PUSH
45485: LD_INT 0
45487: PUSH
45488: LD_INT 0
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: ST_TO_ADDR
// animal := CreateHuman ;
45497: LD_ADDR_VAR 0 12
45501: PUSH
45502: CALL_OW 44
45506: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45507: LD_VAR 0 12
45511: PPUSH
45512: LD_VAR 0 8
45516: PPUSH
45517: LD_INT 0
45519: PPUSH
45520: CALL 47240 0 3
// end ;
45524: GO 45422
45526: POP
45527: POP
// if enchidnas then
45528: LD_VAR 0 4
45532: IFFALSE 45599
// for i = 1 to enchidnas do
45534: LD_ADDR_VAR 0 11
45538: PUSH
45539: DOUBLE
45540: LD_INT 1
45542: DEC
45543: ST_TO_ADDR
45544: LD_VAR 0 4
45548: PUSH
45549: FOR_TO
45550: IFFALSE 45597
// begin hc_class = 13 ;
45552: LD_ADDR_OWVAR 28
45556: PUSH
45557: LD_INT 13
45559: ST_TO_ADDR
// hc_gallery =  ;
45560: LD_ADDR_OWVAR 33
45564: PUSH
45565: LD_STRING 
45567: ST_TO_ADDR
// animal := CreateHuman ;
45568: LD_ADDR_VAR 0 12
45572: PUSH
45573: CALL_OW 44
45577: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45578: LD_VAR 0 12
45582: PPUSH
45583: LD_VAR 0 8
45587: PPUSH
45588: LD_INT 0
45590: PPUSH
45591: CALL 47240 0 3
// end ;
45595: GO 45549
45597: POP
45598: POP
// if fishes then
45599: LD_VAR 0 7
45603: IFFALSE 45670
// for i = 1 to fishes do
45605: LD_ADDR_VAR 0 11
45609: PUSH
45610: DOUBLE
45611: LD_INT 1
45613: DEC
45614: ST_TO_ADDR
45615: LD_VAR 0 7
45619: PUSH
45620: FOR_TO
45621: IFFALSE 45668
// begin hc_class = 20 ;
45623: LD_ADDR_OWVAR 28
45627: PUSH
45628: LD_INT 20
45630: ST_TO_ADDR
// hc_gallery =  ;
45631: LD_ADDR_OWVAR 33
45635: PUSH
45636: LD_STRING 
45638: ST_TO_ADDR
// animal := CreateHuman ;
45639: LD_ADDR_VAR 0 12
45643: PUSH
45644: CALL_OW 44
45648: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45649: LD_VAR 0 12
45653: PPUSH
45654: LD_VAR 0 9
45658: PPUSH
45659: LD_INT 0
45661: PPUSH
45662: CALL 47240 0 3
// end ;
45666: GO 45620
45668: POP
45669: POP
// end ;
45670: LD_VAR 0 10
45674: RET
// export function WantHeal ( sci , unit ) ; begin
45675: LD_INT 0
45677: PPUSH
// if GetTaskList ( sci ) > 0 then
45678: LD_VAR 0 1
45682: PPUSH
45683: CALL_OW 437
45687: PUSH
45688: LD_INT 0
45690: GREATER
45691: IFFALSE 45761
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45693: LD_VAR 0 1
45697: PPUSH
45698: CALL_OW 437
45702: PUSH
45703: LD_INT 1
45705: ARRAY
45706: PUSH
45707: LD_INT 1
45709: ARRAY
45710: PUSH
45711: LD_STRING l
45713: EQUAL
45714: PUSH
45715: LD_VAR 0 1
45719: PPUSH
45720: CALL_OW 437
45724: PUSH
45725: LD_INT 1
45727: ARRAY
45728: PUSH
45729: LD_INT 4
45731: ARRAY
45732: PUSH
45733: LD_VAR 0 2
45737: EQUAL
45738: AND
45739: IFFALSE 45751
// result := true else
45741: LD_ADDR_VAR 0 3
45745: PUSH
45746: LD_INT 1
45748: ST_TO_ADDR
45749: GO 45759
// result := false ;
45751: LD_ADDR_VAR 0 3
45755: PUSH
45756: LD_INT 0
45758: ST_TO_ADDR
// end else
45759: GO 45769
// result := false ;
45761: LD_ADDR_VAR 0 3
45765: PUSH
45766: LD_INT 0
45768: ST_TO_ADDR
// end ;
45769: LD_VAR 0 3
45773: RET
// export function HealTarget ( sci ) ; begin
45774: LD_INT 0
45776: PPUSH
// if not sci then
45777: LD_VAR 0 1
45781: NOT
45782: IFFALSE 45786
// exit ;
45784: GO 45851
// result := 0 ;
45786: LD_ADDR_VAR 0 2
45790: PUSH
45791: LD_INT 0
45793: ST_TO_ADDR
// if GetTaskList ( sci ) then
45794: LD_VAR 0 1
45798: PPUSH
45799: CALL_OW 437
45803: IFFALSE 45851
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45805: LD_VAR 0 1
45809: PPUSH
45810: CALL_OW 437
45814: PUSH
45815: LD_INT 1
45817: ARRAY
45818: PUSH
45819: LD_INT 1
45821: ARRAY
45822: PUSH
45823: LD_STRING l
45825: EQUAL
45826: IFFALSE 45851
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45828: LD_ADDR_VAR 0 2
45832: PUSH
45833: LD_VAR 0 1
45837: PPUSH
45838: CALL_OW 437
45842: PUSH
45843: LD_INT 1
45845: ARRAY
45846: PUSH
45847: LD_INT 4
45849: ARRAY
45850: ST_TO_ADDR
// end ;
45851: LD_VAR 0 2
45855: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45856: LD_INT 0
45858: PPUSH
45859: PPUSH
45860: PPUSH
45861: PPUSH
// if not base_units then
45862: LD_VAR 0 1
45866: NOT
45867: IFFALSE 45871
// exit ;
45869: GO 45958
// result := false ;
45871: LD_ADDR_VAR 0 2
45875: PUSH
45876: LD_INT 0
45878: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45879: LD_ADDR_VAR 0 5
45883: PUSH
45884: LD_VAR 0 1
45888: PPUSH
45889: LD_INT 21
45891: PUSH
45892: LD_INT 3
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PPUSH
45899: CALL_OW 72
45903: ST_TO_ADDR
// if not tmp then
45904: LD_VAR 0 5
45908: NOT
45909: IFFALSE 45913
// exit ;
45911: GO 45958
// for i in tmp do
45913: LD_ADDR_VAR 0 3
45917: PUSH
45918: LD_VAR 0 5
45922: PUSH
45923: FOR_IN
45924: IFFALSE 45956
// begin result := EnemyInRange ( i , 22 ) ;
45926: LD_ADDR_VAR 0 2
45930: PUSH
45931: LD_VAR 0 3
45935: PPUSH
45936: LD_INT 22
45938: PPUSH
45939: CALL 44194 0 2
45943: ST_TO_ADDR
// if result then
45944: LD_VAR 0 2
45948: IFFALSE 45954
// exit ;
45950: POP
45951: POP
45952: GO 45958
// end ;
45954: GO 45923
45956: POP
45957: POP
// end ;
45958: LD_VAR 0 2
45962: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
45963: LD_INT 0
45965: PPUSH
45966: PPUSH
// if not units then
45967: LD_VAR 0 1
45971: NOT
45972: IFFALSE 45976
// exit ;
45974: GO 46046
// result := [ ] ;
45976: LD_ADDR_VAR 0 3
45980: PUSH
45981: EMPTY
45982: ST_TO_ADDR
// for i in units do
45983: LD_ADDR_VAR 0 4
45987: PUSH
45988: LD_VAR 0 1
45992: PUSH
45993: FOR_IN
45994: IFFALSE 46044
// if GetTag ( i ) = tag then
45996: LD_VAR 0 4
46000: PPUSH
46001: CALL_OW 110
46005: PUSH
46006: LD_VAR 0 2
46010: EQUAL
46011: IFFALSE 46042
// result := Insert ( result , result + 1 , i ) ;
46013: LD_ADDR_VAR 0 3
46017: PUSH
46018: LD_VAR 0 3
46022: PPUSH
46023: LD_VAR 0 3
46027: PUSH
46028: LD_INT 1
46030: PLUS
46031: PPUSH
46032: LD_VAR 0 4
46036: PPUSH
46037: CALL_OW 2
46041: ST_TO_ADDR
46042: GO 45993
46044: POP
46045: POP
// end ;
46046: LD_VAR 0 3
46050: RET
// export function IsDriver ( un ) ; begin
46051: LD_INT 0
46053: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
46054: LD_ADDR_VAR 0 2
46058: PUSH
46059: LD_VAR 0 1
46063: PUSH
46064: LD_INT 55
46066: PUSH
46067: EMPTY
46068: LIST
46069: PPUSH
46070: CALL_OW 69
46074: IN
46075: ST_TO_ADDR
// end ;
46076: LD_VAR 0 2
46080: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
46081: LD_INT 0
46083: PPUSH
46084: PPUSH
// list := [ ] ;
46085: LD_ADDR_VAR 0 5
46089: PUSH
46090: EMPTY
46091: ST_TO_ADDR
// case d of 0 :
46092: LD_VAR 0 3
46096: PUSH
46097: LD_INT 0
46099: DOUBLE
46100: EQUAL
46101: IFTRUE 46105
46103: GO 46238
46105: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
46106: LD_ADDR_VAR 0 5
46110: PUSH
46111: LD_VAR 0 1
46115: PUSH
46116: LD_INT 4
46118: MINUS
46119: PUSH
46120: LD_VAR 0 2
46124: PUSH
46125: LD_INT 4
46127: MINUS
46128: PUSH
46129: LD_INT 2
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: LIST
46136: PUSH
46137: LD_VAR 0 1
46141: PUSH
46142: LD_INT 3
46144: MINUS
46145: PUSH
46146: LD_VAR 0 2
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: LIST
46158: PUSH
46159: LD_VAR 0 1
46163: PUSH
46164: LD_INT 4
46166: PLUS
46167: PUSH
46168: LD_VAR 0 2
46172: PUSH
46173: LD_INT 4
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: LIST
46180: PUSH
46181: LD_VAR 0 1
46185: PUSH
46186: LD_INT 3
46188: PLUS
46189: PUSH
46190: LD_VAR 0 2
46194: PUSH
46195: LD_INT 3
46197: PLUS
46198: PUSH
46199: LD_INT 5
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: LIST
46206: PUSH
46207: LD_VAR 0 1
46211: PUSH
46212: LD_VAR 0 2
46216: PUSH
46217: LD_INT 4
46219: PLUS
46220: PUSH
46221: LD_INT 0
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: LIST
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: ST_TO_ADDR
// end ; 1 :
46236: GO 46936
46238: LD_INT 1
46240: DOUBLE
46241: EQUAL
46242: IFTRUE 46246
46244: GO 46379
46246: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
46247: LD_ADDR_VAR 0 5
46251: PUSH
46252: LD_VAR 0 1
46256: PUSH
46257: LD_VAR 0 2
46261: PUSH
46262: LD_INT 4
46264: MINUS
46265: PUSH
46266: LD_INT 3
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: LIST
46273: PUSH
46274: LD_VAR 0 1
46278: PUSH
46279: LD_INT 3
46281: MINUS
46282: PUSH
46283: LD_VAR 0 2
46287: PUSH
46288: LD_INT 3
46290: MINUS
46291: PUSH
46292: LD_INT 2
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: LIST
46299: PUSH
46300: LD_VAR 0 1
46304: PUSH
46305: LD_INT 4
46307: MINUS
46308: PUSH
46309: LD_VAR 0 2
46313: PUSH
46314: LD_INT 1
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: LIST
46321: PUSH
46322: LD_VAR 0 1
46326: PUSH
46327: LD_VAR 0 2
46331: PUSH
46332: LD_INT 3
46334: PLUS
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: LIST
46343: PUSH
46344: LD_VAR 0 1
46348: PUSH
46349: LD_INT 4
46351: PLUS
46352: PUSH
46353: LD_VAR 0 2
46357: PUSH
46358: LD_INT 4
46360: PLUS
46361: PUSH
46362: LD_INT 5
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: LIST
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: ST_TO_ADDR
// end ; 2 :
46377: GO 46936
46379: LD_INT 2
46381: DOUBLE
46382: EQUAL
46383: IFTRUE 46387
46385: GO 46516
46387: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
46388: LD_ADDR_VAR 0 5
46392: PUSH
46393: LD_VAR 0 1
46397: PUSH
46398: LD_VAR 0 2
46402: PUSH
46403: LD_INT 3
46405: MINUS
46406: PUSH
46407: LD_INT 3
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: LIST
46414: PUSH
46415: LD_VAR 0 1
46419: PUSH
46420: LD_INT 4
46422: PLUS
46423: PUSH
46424: LD_VAR 0 2
46428: PUSH
46429: LD_INT 4
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: LIST
46436: PUSH
46437: LD_VAR 0 1
46441: PUSH
46442: LD_VAR 0 2
46446: PUSH
46447: LD_INT 4
46449: PLUS
46450: PUSH
46451: LD_INT 0
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: LIST
46458: PUSH
46459: LD_VAR 0 1
46463: PUSH
46464: LD_INT 3
46466: MINUS
46467: PUSH
46468: LD_VAR 0 2
46472: PUSH
46473: LD_INT 1
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: LIST
46480: PUSH
46481: LD_VAR 0 1
46485: PUSH
46486: LD_INT 4
46488: MINUS
46489: PUSH
46490: LD_VAR 0 2
46494: PUSH
46495: LD_INT 4
46497: MINUS
46498: PUSH
46499: LD_INT 2
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: LIST
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: ST_TO_ADDR
// end ; 3 :
46514: GO 46936
46516: LD_INT 3
46518: DOUBLE
46519: EQUAL
46520: IFTRUE 46524
46522: GO 46657
46524: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46525: LD_ADDR_VAR 0 5
46529: PUSH
46530: LD_VAR 0 1
46534: PUSH
46535: LD_INT 3
46537: PLUS
46538: PUSH
46539: LD_VAR 0 2
46543: PUSH
46544: LD_INT 4
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: LIST
46551: PUSH
46552: LD_VAR 0 1
46556: PUSH
46557: LD_INT 4
46559: PLUS
46560: PUSH
46561: LD_VAR 0 2
46565: PUSH
46566: LD_INT 4
46568: PLUS
46569: PUSH
46570: LD_INT 5
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: LIST
46577: PUSH
46578: LD_VAR 0 1
46582: PUSH
46583: LD_INT 4
46585: MINUS
46586: PUSH
46587: LD_VAR 0 2
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: LIST
46599: PUSH
46600: LD_VAR 0 1
46604: PUSH
46605: LD_VAR 0 2
46609: PUSH
46610: LD_INT 4
46612: MINUS
46613: PUSH
46614: LD_INT 3
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: LIST
46621: PUSH
46622: LD_VAR 0 1
46626: PUSH
46627: LD_INT 3
46629: MINUS
46630: PUSH
46631: LD_VAR 0 2
46635: PUSH
46636: LD_INT 3
46638: MINUS
46639: PUSH
46640: LD_INT 2
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: LIST
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: ST_TO_ADDR
// end ; 4 :
46655: GO 46936
46657: LD_INT 4
46659: DOUBLE
46660: EQUAL
46661: IFTRUE 46665
46663: GO 46798
46665: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
46666: LD_ADDR_VAR 0 5
46670: PUSH
46671: LD_VAR 0 1
46675: PUSH
46676: LD_VAR 0 2
46680: PUSH
46681: LD_INT 4
46683: PLUS
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: LIST
46692: PUSH
46693: LD_VAR 0 1
46697: PUSH
46698: LD_INT 3
46700: PLUS
46701: PUSH
46702: LD_VAR 0 2
46706: PUSH
46707: LD_INT 3
46709: PLUS
46710: PUSH
46711: LD_INT 5
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: LIST
46718: PUSH
46719: LD_VAR 0 1
46723: PUSH
46724: LD_INT 4
46726: PLUS
46727: PUSH
46728: LD_VAR 0 2
46732: PUSH
46733: LD_INT 4
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: LIST
46740: PUSH
46741: LD_VAR 0 1
46745: PUSH
46746: LD_VAR 0 2
46750: PUSH
46751: LD_INT 3
46753: MINUS
46754: PUSH
46755: LD_INT 3
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: LIST
46762: PUSH
46763: LD_VAR 0 1
46767: PUSH
46768: LD_INT 4
46770: MINUS
46771: PUSH
46772: LD_VAR 0 2
46776: PUSH
46777: LD_INT 4
46779: MINUS
46780: PUSH
46781: LD_INT 2
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: LIST
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: ST_TO_ADDR
// end ; 5 :
46796: GO 46936
46798: LD_INT 5
46800: DOUBLE
46801: EQUAL
46802: IFTRUE 46806
46804: GO 46935
46806: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46807: LD_ADDR_VAR 0 5
46811: PUSH
46812: LD_VAR 0 1
46816: PUSH
46817: LD_INT 4
46819: MINUS
46820: PUSH
46821: LD_VAR 0 2
46825: PUSH
46826: LD_INT 1
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: LIST
46833: PUSH
46834: LD_VAR 0 1
46838: PUSH
46839: LD_VAR 0 2
46843: PUSH
46844: LD_INT 4
46846: MINUS
46847: PUSH
46848: LD_INT 3
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: LIST
46855: PUSH
46856: LD_VAR 0 1
46860: PUSH
46861: LD_INT 4
46863: PLUS
46864: PUSH
46865: LD_VAR 0 2
46869: PUSH
46870: LD_INT 4
46872: PLUS
46873: PUSH
46874: LD_INT 5
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: LIST
46881: PUSH
46882: LD_VAR 0 1
46886: PUSH
46887: LD_INT 3
46889: PLUS
46890: PUSH
46891: LD_VAR 0 2
46895: PUSH
46896: LD_INT 4
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: LIST
46903: PUSH
46904: LD_VAR 0 1
46908: PUSH
46909: LD_VAR 0 2
46913: PUSH
46914: LD_INT 3
46916: PLUS
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: LIST
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: ST_TO_ADDR
// end ; end ;
46933: GO 46936
46935: POP
// result := list ;
46936: LD_ADDR_VAR 0 4
46940: PUSH
46941: LD_VAR 0 5
46945: ST_TO_ADDR
// end ;
46946: LD_VAR 0 4
46950: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46951: LD_INT 0
46953: PPUSH
46954: PPUSH
46955: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46956: LD_VAR 0 1
46960: NOT
46961: PUSH
46962: LD_VAR 0 2
46966: PUSH
46967: LD_INT 1
46969: PUSH
46970: LD_INT 2
46972: PUSH
46973: LD_INT 3
46975: PUSH
46976: LD_INT 4
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: IN
46985: NOT
46986: OR
46987: IFFALSE 46991
// exit ;
46989: GO 47083
// tmp := [ ] ;
46991: LD_ADDR_VAR 0 5
46995: PUSH
46996: EMPTY
46997: ST_TO_ADDR
// for i in units do
46998: LD_ADDR_VAR 0 4
47002: PUSH
47003: LD_VAR 0 1
47007: PUSH
47008: FOR_IN
47009: IFFALSE 47052
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
47011: LD_ADDR_VAR 0 5
47015: PUSH
47016: LD_VAR 0 5
47020: PPUSH
47021: LD_VAR 0 5
47025: PUSH
47026: LD_INT 1
47028: PLUS
47029: PPUSH
47030: LD_VAR 0 4
47034: PPUSH
47035: LD_VAR 0 2
47039: PPUSH
47040: CALL_OW 259
47044: PPUSH
47045: CALL_OW 2
47049: ST_TO_ADDR
47050: GO 47008
47052: POP
47053: POP
// if not tmp then
47054: LD_VAR 0 5
47058: NOT
47059: IFFALSE 47063
// exit ;
47061: GO 47083
// result := SortListByListDesc ( units , tmp ) ;
47063: LD_ADDR_VAR 0 3
47067: PUSH
47068: LD_VAR 0 1
47072: PPUSH
47073: LD_VAR 0 5
47077: PPUSH
47078: CALL_OW 77
47082: ST_TO_ADDR
// end ;
47083: LD_VAR 0 3
47087: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
47088: LD_INT 0
47090: PPUSH
47091: PPUSH
47092: PPUSH
// x := GetX ( building ) ;
47093: LD_ADDR_VAR 0 4
47097: PUSH
47098: LD_VAR 0 2
47102: PPUSH
47103: CALL_OW 250
47107: ST_TO_ADDR
// y := GetY ( building ) ;
47108: LD_ADDR_VAR 0 5
47112: PUSH
47113: LD_VAR 0 2
47117: PPUSH
47118: CALL_OW 251
47122: ST_TO_ADDR
// if GetTaskList ( unit ) then
47123: LD_VAR 0 1
47127: PPUSH
47128: CALL_OW 437
47132: IFFALSE 47227
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47134: LD_STRING e
47136: PUSH
47137: LD_VAR 0 1
47141: PPUSH
47142: CALL_OW 437
47146: PUSH
47147: LD_INT 1
47149: ARRAY
47150: PUSH
47151: LD_INT 1
47153: ARRAY
47154: EQUAL
47155: PUSH
47156: LD_VAR 0 4
47160: PUSH
47161: LD_VAR 0 1
47165: PPUSH
47166: CALL_OW 437
47170: PUSH
47171: LD_INT 1
47173: ARRAY
47174: PUSH
47175: LD_INT 2
47177: ARRAY
47178: EQUAL
47179: AND
47180: PUSH
47181: LD_VAR 0 5
47185: PUSH
47186: LD_VAR 0 1
47190: PPUSH
47191: CALL_OW 437
47195: PUSH
47196: LD_INT 1
47198: ARRAY
47199: PUSH
47200: LD_INT 3
47202: ARRAY
47203: EQUAL
47204: AND
47205: IFFALSE 47217
// result := true else
47207: LD_ADDR_VAR 0 3
47211: PUSH
47212: LD_INT 1
47214: ST_TO_ADDR
47215: GO 47225
// result := false ;
47217: LD_ADDR_VAR 0 3
47221: PUSH
47222: LD_INT 0
47224: ST_TO_ADDR
// end else
47225: GO 47235
// result := false ;
47227: LD_ADDR_VAR 0 3
47231: PUSH
47232: LD_INT 0
47234: ST_TO_ADDR
// end ;
47235: LD_VAR 0 3
47239: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
47240: LD_INT 0
47242: PPUSH
47243: PPUSH
47244: PPUSH
47245: PPUSH
// if not unit or not area then
47246: LD_VAR 0 1
47250: NOT
47251: PUSH
47252: LD_VAR 0 2
47256: NOT
47257: OR
47258: IFFALSE 47262
// exit ;
47260: GO 47426
// tmp := AreaToList ( area , i ) ;
47262: LD_ADDR_VAR 0 6
47266: PUSH
47267: LD_VAR 0 2
47271: PPUSH
47272: LD_VAR 0 5
47276: PPUSH
47277: CALL_OW 517
47281: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
47282: LD_ADDR_VAR 0 5
47286: PUSH
47287: DOUBLE
47288: LD_INT 1
47290: DEC
47291: ST_TO_ADDR
47292: LD_VAR 0 6
47296: PUSH
47297: LD_INT 1
47299: ARRAY
47300: PUSH
47301: FOR_TO
47302: IFFALSE 47424
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
47304: LD_ADDR_VAR 0 7
47308: PUSH
47309: LD_VAR 0 6
47313: PUSH
47314: LD_INT 1
47316: ARRAY
47317: PUSH
47318: LD_VAR 0 5
47322: ARRAY
47323: PUSH
47324: LD_VAR 0 6
47328: PUSH
47329: LD_INT 2
47331: ARRAY
47332: PUSH
47333: LD_VAR 0 5
47337: ARRAY
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
47343: LD_VAR 0 7
47347: PUSH
47348: LD_INT 1
47350: ARRAY
47351: PPUSH
47352: LD_VAR 0 7
47356: PUSH
47357: LD_INT 2
47359: ARRAY
47360: PPUSH
47361: CALL_OW 428
47365: PUSH
47366: LD_INT 0
47368: EQUAL
47369: IFFALSE 47422
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
47371: LD_VAR 0 1
47375: PPUSH
47376: LD_VAR 0 7
47380: PUSH
47381: LD_INT 1
47383: ARRAY
47384: PPUSH
47385: LD_VAR 0 7
47389: PUSH
47390: LD_INT 2
47392: ARRAY
47393: PPUSH
47394: LD_VAR 0 3
47398: PPUSH
47399: CALL_OW 48
// result := IsPlaced ( unit ) ;
47403: LD_ADDR_VAR 0 4
47407: PUSH
47408: LD_VAR 0 1
47412: PPUSH
47413: CALL_OW 305
47417: ST_TO_ADDR
// exit ;
47418: POP
47419: POP
47420: GO 47426
// end ; end ;
47422: GO 47301
47424: POP
47425: POP
// end ;
47426: LD_VAR 0 4
47430: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47431: LD_INT 0
47433: PPUSH
47434: PPUSH
47435: PPUSH
// if not side or side > 8 then
47436: LD_VAR 0 1
47440: NOT
47441: PUSH
47442: LD_VAR 0 1
47446: PUSH
47447: LD_INT 8
47449: GREATER
47450: OR
47451: IFFALSE 47455
// exit ;
47453: GO 47642
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47455: LD_ADDR_VAR 0 4
47459: PUSH
47460: LD_INT 22
47462: PUSH
47463: LD_VAR 0 1
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 21
47474: PUSH
47475: LD_INT 3
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PPUSH
47486: CALL_OW 69
47490: ST_TO_ADDR
// if not tmp then
47491: LD_VAR 0 4
47495: NOT
47496: IFFALSE 47500
// exit ;
47498: GO 47642
// enable_addtolog := true ;
47500: LD_ADDR_OWVAR 81
47504: PUSH
47505: LD_INT 1
47507: ST_TO_ADDR
// AddToLog ( [ ) ;
47508: LD_STRING [
47510: PPUSH
47511: CALL_OW 561
// for i in tmp do
47515: LD_ADDR_VAR 0 3
47519: PUSH
47520: LD_VAR 0 4
47524: PUSH
47525: FOR_IN
47526: IFFALSE 47633
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
47528: LD_STRING [
47530: PUSH
47531: LD_VAR 0 3
47535: PPUSH
47536: CALL_OW 266
47540: STR
47541: PUSH
47542: LD_STRING , 
47544: STR
47545: PUSH
47546: LD_VAR 0 3
47550: PPUSH
47551: CALL_OW 250
47555: STR
47556: PUSH
47557: LD_STRING , 
47559: STR
47560: PUSH
47561: LD_VAR 0 3
47565: PPUSH
47566: CALL_OW 251
47570: STR
47571: PUSH
47572: LD_STRING , 
47574: STR
47575: PUSH
47576: LD_VAR 0 3
47580: PPUSH
47581: CALL_OW 254
47585: STR
47586: PUSH
47587: LD_STRING , 
47589: STR
47590: PUSH
47591: LD_VAR 0 3
47595: PPUSH
47596: LD_INT 1
47598: PPUSH
47599: CALL_OW 268
47603: STR
47604: PUSH
47605: LD_STRING , 
47607: STR
47608: PUSH
47609: LD_VAR 0 3
47613: PPUSH
47614: LD_INT 2
47616: PPUSH
47617: CALL_OW 268
47621: STR
47622: PUSH
47623: LD_STRING ],
47625: STR
47626: PPUSH
47627: CALL_OW 561
// end ;
47631: GO 47525
47633: POP
47634: POP
// AddToLog ( ]; ) ;
47635: LD_STRING ];
47637: PPUSH
47638: CALL_OW 561
// end ;
47642: LD_VAR 0 2
47646: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47647: LD_INT 0
47649: PPUSH
47650: PPUSH
47651: PPUSH
47652: PPUSH
47653: PPUSH
// if not area or not rate or not max then
47654: LD_VAR 0 1
47658: NOT
47659: PUSH
47660: LD_VAR 0 2
47664: NOT
47665: OR
47666: PUSH
47667: LD_VAR 0 4
47671: NOT
47672: OR
47673: IFFALSE 47677
// exit ;
47675: GO 47869
// while 1 do
47677: LD_INT 1
47679: IFFALSE 47869
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
47681: LD_ADDR_VAR 0 9
47685: PUSH
47686: LD_VAR 0 1
47690: PPUSH
47691: LD_INT 1
47693: PPUSH
47694: CALL_OW 287
47698: PUSH
47699: LD_INT 10
47701: MUL
47702: ST_TO_ADDR
// r := rate / 10 ;
47703: LD_ADDR_VAR 0 7
47707: PUSH
47708: LD_VAR 0 2
47712: PUSH
47713: LD_INT 10
47715: DIVREAL
47716: ST_TO_ADDR
// time := 1 1$00 ;
47717: LD_ADDR_VAR 0 8
47721: PUSH
47722: LD_INT 2100
47724: ST_TO_ADDR
// if amount < min then
47725: LD_VAR 0 9
47729: PUSH
47730: LD_VAR 0 3
47734: LESS
47735: IFFALSE 47753
// r := r * 2 else
47737: LD_ADDR_VAR 0 7
47741: PUSH
47742: LD_VAR 0 7
47746: PUSH
47747: LD_INT 2
47749: MUL
47750: ST_TO_ADDR
47751: GO 47779
// if amount > max then
47753: LD_VAR 0 9
47757: PUSH
47758: LD_VAR 0 4
47762: GREATER
47763: IFFALSE 47779
// r := r / 2 ;
47765: LD_ADDR_VAR 0 7
47769: PUSH
47770: LD_VAR 0 7
47774: PUSH
47775: LD_INT 2
47777: DIVREAL
47778: ST_TO_ADDR
// time := time / r ;
47779: LD_ADDR_VAR 0 8
47783: PUSH
47784: LD_VAR 0 8
47788: PUSH
47789: LD_VAR 0 7
47793: DIVREAL
47794: ST_TO_ADDR
// if time < 0 then
47795: LD_VAR 0 8
47799: PUSH
47800: LD_INT 0
47802: LESS
47803: IFFALSE 47820
// time := time * - 1 ;
47805: LD_ADDR_VAR 0 8
47809: PUSH
47810: LD_VAR 0 8
47814: PUSH
47815: LD_INT 1
47817: NEG
47818: MUL
47819: ST_TO_ADDR
// wait ( time ) ;
47820: LD_VAR 0 8
47824: PPUSH
47825: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
47829: LD_INT 35
47831: PPUSH
47832: LD_INT 875
47834: PPUSH
47835: CALL_OW 12
47839: PPUSH
47840: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47844: LD_INT 1
47846: PPUSH
47847: LD_INT 5
47849: PPUSH
47850: CALL_OW 12
47854: PPUSH
47855: LD_VAR 0 1
47859: PPUSH
47860: LD_INT 1
47862: PPUSH
47863: CALL_OW 55
// end ;
47867: GO 47677
// end ;
47869: LD_VAR 0 5
47873: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47874: LD_INT 0
47876: PPUSH
47877: PPUSH
47878: PPUSH
47879: PPUSH
47880: PPUSH
47881: PPUSH
47882: PPUSH
47883: PPUSH
// if not turrets or not factories then
47884: LD_VAR 0 1
47888: NOT
47889: PUSH
47890: LD_VAR 0 2
47894: NOT
47895: OR
47896: IFFALSE 47900
// exit ;
47898: GO 48207
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47900: LD_ADDR_VAR 0 10
47904: PUSH
47905: LD_INT 5
47907: PUSH
47908: LD_INT 6
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 2
47917: PUSH
47918: LD_INT 4
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 3
47927: PUSH
47928: LD_INT 5
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 24
47942: PUSH
47943: LD_INT 25
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 23
47952: PUSH
47953: LD_INT 27
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 42
47966: PUSH
47967: LD_INT 43
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 44
47976: PUSH
47977: LD_INT 46
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 45
47986: PUSH
47987: LD_INT 47
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: LIST
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: LIST
48003: ST_TO_ADDR
// result := [ ] ;
48004: LD_ADDR_VAR 0 3
48008: PUSH
48009: EMPTY
48010: ST_TO_ADDR
// for i in turrets do
48011: LD_ADDR_VAR 0 4
48015: PUSH
48016: LD_VAR 0 1
48020: PUSH
48021: FOR_IN
48022: IFFALSE 48205
// begin nat := GetNation ( i ) ;
48024: LD_ADDR_VAR 0 7
48028: PUSH
48029: LD_VAR 0 4
48033: PPUSH
48034: CALL_OW 248
48038: ST_TO_ADDR
// weapon := 0 ;
48039: LD_ADDR_VAR 0 8
48043: PUSH
48044: LD_INT 0
48046: ST_TO_ADDR
// if not nat then
48047: LD_VAR 0 7
48051: NOT
48052: IFFALSE 48056
// continue ;
48054: GO 48021
// for j in list [ nat ] do
48056: LD_ADDR_VAR 0 5
48060: PUSH
48061: LD_VAR 0 10
48065: PUSH
48066: LD_VAR 0 7
48070: ARRAY
48071: PUSH
48072: FOR_IN
48073: IFFALSE 48114
// if GetBWeapon ( i ) = j [ 1 ] then
48075: LD_VAR 0 4
48079: PPUSH
48080: CALL_OW 269
48084: PUSH
48085: LD_VAR 0 5
48089: PUSH
48090: LD_INT 1
48092: ARRAY
48093: EQUAL
48094: IFFALSE 48112
// begin weapon := j [ 2 ] ;
48096: LD_ADDR_VAR 0 8
48100: PUSH
48101: LD_VAR 0 5
48105: PUSH
48106: LD_INT 2
48108: ARRAY
48109: ST_TO_ADDR
// break ;
48110: GO 48114
// end ;
48112: GO 48072
48114: POP
48115: POP
// if not weapon then
48116: LD_VAR 0 8
48120: NOT
48121: IFFALSE 48125
// continue ;
48123: GO 48021
// for k in factories do
48125: LD_ADDR_VAR 0 6
48129: PUSH
48130: LD_VAR 0 2
48134: PUSH
48135: FOR_IN
48136: IFFALSE 48201
// begin weapons := AvailableWeaponList ( k ) ;
48138: LD_ADDR_VAR 0 9
48142: PUSH
48143: LD_VAR 0 6
48147: PPUSH
48148: CALL_OW 478
48152: ST_TO_ADDR
// if not weapons then
48153: LD_VAR 0 9
48157: NOT
48158: IFFALSE 48162
// continue ;
48160: GO 48135
// if weapon in weapons then
48162: LD_VAR 0 8
48166: PUSH
48167: LD_VAR 0 9
48171: IN
48172: IFFALSE 48199
// begin result := [ i , weapon ] ;
48174: LD_ADDR_VAR 0 3
48178: PUSH
48179: LD_VAR 0 4
48183: PUSH
48184: LD_VAR 0 8
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: ST_TO_ADDR
// exit ;
48193: POP
48194: POP
48195: POP
48196: POP
48197: GO 48207
// end ; end ;
48199: GO 48135
48201: POP
48202: POP
// end ;
48203: GO 48021
48205: POP
48206: POP
// end ;
48207: LD_VAR 0 3
48211: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
48212: LD_INT 0
48214: PPUSH
// if not side or side > 8 then
48215: LD_VAR 0 3
48219: NOT
48220: PUSH
48221: LD_VAR 0 3
48225: PUSH
48226: LD_INT 8
48228: GREATER
48229: OR
48230: IFFALSE 48234
// exit ;
48232: GO 48293
// if not range then
48234: LD_VAR 0 4
48238: NOT
48239: IFFALSE 48250
// range := - 12 ;
48241: LD_ADDR_VAR 0 4
48245: PUSH
48246: LD_INT 12
48248: NEG
48249: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
48250: LD_VAR 0 1
48254: PPUSH
48255: LD_VAR 0 2
48259: PPUSH
48260: LD_VAR 0 3
48264: PPUSH
48265: LD_VAR 0 4
48269: PPUSH
48270: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
48274: LD_VAR 0 1
48278: PPUSH
48279: LD_VAR 0 2
48283: PPUSH
48284: LD_VAR 0 3
48288: PPUSH
48289: CALL_OW 331
// end ;
48293: LD_VAR 0 5
48297: RET
// export function Video ( mode ) ; begin
48298: LD_INT 0
48300: PPUSH
// ingame_video = mode ;
48301: LD_ADDR_OWVAR 52
48305: PUSH
48306: LD_VAR 0 1
48310: ST_TO_ADDR
// interface_hidden = mode ;
48311: LD_ADDR_OWVAR 54
48315: PUSH
48316: LD_VAR 0 1
48320: ST_TO_ADDR
// end ;
48321: LD_VAR 0 2
48325: RET
// export function Join ( array , element ) ; begin
48326: LD_INT 0
48328: PPUSH
// result := array ^ element ;
48329: LD_ADDR_VAR 0 3
48333: PUSH
48334: LD_VAR 0 1
48338: PUSH
48339: LD_VAR 0 2
48343: ADD
48344: ST_TO_ADDR
// end ;
48345: LD_VAR 0 3
48349: RET
// export function JoinUnion ( array , element ) ; begin
48350: LD_INT 0
48352: PPUSH
// result := array union element ;
48353: LD_ADDR_VAR 0 3
48357: PUSH
48358: LD_VAR 0 1
48362: PUSH
48363: LD_VAR 0 2
48367: UNION
48368: ST_TO_ADDR
// end ;
48369: LD_VAR 0 3
48373: RET
// export function GetBehemoths ( side ) ; begin
48374: LD_INT 0
48376: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
48377: LD_ADDR_VAR 0 2
48381: PUSH
48382: LD_INT 22
48384: PUSH
48385: LD_VAR 0 1
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 31
48396: PUSH
48397: LD_INT 25
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PPUSH
48408: CALL_OW 69
48412: ST_TO_ADDR
// end ;
48413: LD_VAR 0 2
48417: RET
// export function Shuffle ( array ) ; var i , index ; begin
48418: LD_INT 0
48420: PPUSH
48421: PPUSH
48422: PPUSH
// result := [ ] ;
48423: LD_ADDR_VAR 0 2
48427: PUSH
48428: EMPTY
48429: ST_TO_ADDR
// if not array then
48430: LD_VAR 0 1
48434: NOT
48435: IFFALSE 48439
// exit ;
48437: GO 48538
// Randomize ;
48439: CALL_OW 10
// for i = array downto 1 do
48443: LD_ADDR_VAR 0 3
48447: PUSH
48448: DOUBLE
48449: LD_VAR 0 1
48453: INC
48454: ST_TO_ADDR
48455: LD_INT 1
48457: PUSH
48458: FOR_DOWNTO
48459: IFFALSE 48536
// begin index := rand ( 1 , array ) ;
48461: LD_ADDR_VAR 0 4
48465: PUSH
48466: LD_INT 1
48468: PPUSH
48469: LD_VAR 0 1
48473: PPUSH
48474: CALL_OW 12
48478: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
48479: LD_ADDR_VAR 0 2
48483: PUSH
48484: LD_VAR 0 2
48488: PPUSH
48489: LD_VAR 0 2
48493: PUSH
48494: LD_INT 1
48496: PLUS
48497: PPUSH
48498: LD_VAR 0 1
48502: PUSH
48503: LD_VAR 0 4
48507: ARRAY
48508: PPUSH
48509: CALL_OW 2
48513: ST_TO_ADDR
// array := Delete ( array , index ) ;
48514: LD_ADDR_VAR 0 1
48518: PUSH
48519: LD_VAR 0 1
48523: PPUSH
48524: LD_VAR 0 4
48528: PPUSH
48529: CALL_OW 3
48533: ST_TO_ADDR
// end ;
48534: GO 48458
48536: POP
48537: POP
// end ;
48538: LD_VAR 0 2
48542: RET
// export function GetBaseMaterials ( base ) ; begin
48543: LD_INT 0
48545: PPUSH
// result := [ 0 , 0 , 0 ] ;
48546: LD_ADDR_VAR 0 2
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: LD_INT 0
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: LIST
48564: ST_TO_ADDR
// if not base then
48565: LD_VAR 0 1
48569: NOT
48570: IFFALSE 48574
// exit ;
48572: GO 48623
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
48574: LD_ADDR_VAR 0 2
48578: PUSH
48579: LD_VAR 0 1
48583: PPUSH
48584: LD_INT 1
48586: PPUSH
48587: CALL_OW 275
48591: PUSH
48592: LD_VAR 0 1
48596: PPUSH
48597: LD_INT 2
48599: PPUSH
48600: CALL_OW 275
48604: PUSH
48605: LD_VAR 0 1
48609: PPUSH
48610: LD_INT 3
48612: PPUSH
48613: CALL_OW 275
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: LIST
48622: ST_TO_ADDR
// end ;
48623: LD_VAR 0 2
48627: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48628: LD_INT 0
48630: PPUSH
48631: PPUSH
// result := array ;
48632: LD_ADDR_VAR 0 3
48636: PUSH
48637: LD_VAR 0 1
48641: ST_TO_ADDR
// if size > 0 then
48642: LD_VAR 0 2
48646: PUSH
48647: LD_INT 0
48649: GREATER
48650: IFFALSE 48696
// for i := array downto size do
48652: LD_ADDR_VAR 0 4
48656: PUSH
48657: DOUBLE
48658: LD_VAR 0 1
48662: INC
48663: ST_TO_ADDR
48664: LD_VAR 0 2
48668: PUSH
48669: FOR_DOWNTO
48670: IFFALSE 48694
// result := Delete ( result , result ) ;
48672: LD_ADDR_VAR 0 3
48676: PUSH
48677: LD_VAR 0 3
48681: PPUSH
48682: LD_VAR 0 3
48686: PPUSH
48687: CALL_OW 3
48691: ST_TO_ADDR
48692: GO 48669
48694: POP
48695: POP
// end ;
48696: LD_VAR 0 3
48700: RET
// export function ComExit ( unit ) ; var tmp ; begin
48701: LD_INT 0
48703: PPUSH
48704: PPUSH
// if not IsInUnit ( unit ) then
48705: LD_VAR 0 1
48709: PPUSH
48710: CALL_OW 310
48714: NOT
48715: IFFALSE 48719
// exit ;
48717: GO 48779
// tmp := IsInUnit ( unit ) ;
48719: LD_ADDR_VAR 0 3
48723: PUSH
48724: LD_VAR 0 1
48728: PPUSH
48729: CALL_OW 310
48733: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48734: LD_VAR 0 3
48738: PPUSH
48739: CALL_OW 247
48743: PUSH
48744: LD_INT 2
48746: EQUAL
48747: IFFALSE 48760
// ComExitVehicle ( unit ) else
48749: LD_VAR 0 1
48753: PPUSH
48754: CALL_OW 121
48758: GO 48769
// ComExitBuilding ( unit ) ;
48760: LD_VAR 0 1
48764: PPUSH
48765: CALL_OW 122
// result := tmp ;
48769: LD_ADDR_VAR 0 2
48773: PUSH
48774: LD_VAR 0 3
48778: ST_TO_ADDR
// end ;
48779: LD_VAR 0 2
48783: RET
// export function ResetHc ; begin
48784: LD_INT 0
48786: PPUSH
// InitHc ;
48787: CALL_OW 19
// hc_importance := 0 ;
48791: LD_ADDR_OWVAR 32
48795: PUSH
48796: LD_INT 0
48798: ST_TO_ADDR
// end ; end_of_file
48799: LD_VAR 0 1
48803: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
48804: GO 48806
48806: DISABLE
// begin ru_radar := 98 ;
48807: LD_ADDR_EXP 48
48811: PUSH
48812: LD_INT 98
48814: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
48815: LD_ADDR_EXP 49
48819: PUSH
48820: LD_INT 89
48822: ST_TO_ADDR
// us_hack := 99 ;
48823: LD_ADDR_EXP 50
48827: PUSH
48828: LD_INT 99
48830: ST_TO_ADDR
// us_artillery := 97 ;
48831: LD_ADDR_EXP 51
48835: PUSH
48836: LD_INT 97
48838: ST_TO_ADDR
// ar_bio_bomb := 91 ;
48839: LD_ADDR_EXP 52
48843: PUSH
48844: LD_INT 91
48846: ST_TO_ADDR
// tech_Artillery := 80 ;
48847: LD_ADDR_EXP 53
48851: PUSH
48852: LD_INT 80
48854: ST_TO_ADDR
// tech_RadMat := 81 ;
48855: LD_ADDR_EXP 54
48859: PUSH
48860: LD_INT 81
48862: ST_TO_ADDR
// tech_BasicTools := 82 ;
48863: LD_ADDR_EXP 55
48867: PUSH
48868: LD_INT 82
48870: ST_TO_ADDR
// tech_Cargo := 83 ;
48871: LD_ADDR_EXP 56
48875: PUSH
48876: LD_INT 83
48878: ST_TO_ADDR
// tech_Track := 84 ;
48879: LD_ADDR_EXP 57
48883: PUSH
48884: LD_INT 84
48886: ST_TO_ADDR
// tech_Crane := 85 ;
48887: LD_ADDR_EXP 58
48891: PUSH
48892: LD_INT 85
48894: ST_TO_ADDR
// tech_Bulldozer := 86 ;
48895: LD_ADDR_EXP 59
48899: PUSH
48900: LD_INT 86
48902: ST_TO_ADDR
// tech_Hovercraft := 87 ;
48903: LD_ADDR_EXP 60
48907: PUSH
48908: LD_INT 87
48910: ST_TO_ADDR
// end ; end_of_file
48911: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
48912: LD_INT 0
48914: PPUSH
48915: PPUSH
// skirmish := false ;
48916: LD_ADDR_EXP 61
48920: PUSH
48921: LD_INT 0
48923: ST_TO_ADDR
// debug_mc := false ;
48924: LD_ADDR_EXP 62
48928: PUSH
48929: LD_INT 0
48931: ST_TO_ADDR
// mc_bases := [ ] ;
48932: LD_ADDR_EXP 63
48936: PUSH
48937: EMPTY
48938: ST_TO_ADDR
// mc_sides := [ ] ;
48939: LD_ADDR_EXP 89
48943: PUSH
48944: EMPTY
48945: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
48946: LD_ADDR_EXP 64
48950: PUSH
48951: EMPTY
48952: ST_TO_ADDR
// mc_building_repairs := [ ] ;
48953: LD_ADDR_EXP 65
48957: PUSH
48958: EMPTY
48959: ST_TO_ADDR
// mc_need_heal := [ ] ;
48960: LD_ADDR_EXP 66
48964: PUSH
48965: EMPTY
48966: ST_TO_ADDR
// mc_healers := [ ] ;
48967: LD_ADDR_EXP 67
48971: PUSH
48972: EMPTY
48973: ST_TO_ADDR
// mc_build_list := [ ] ;
48974: LD_ADDR_EXP 68
48978: PUSH
48979: EMPTY
48980: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
48981: LD_ADDR_EXP 95
48985: PUSH
48986: EMPTY
48987: ST_TO_ADDR
// mc_builders := [ ] ;
48988: LD_ADDR_EXP 69
48992: PUSH
48993: EMPTY
48994: ST_TO_ADDR
// mc_construct_list := [ ] ;
48995: LD_ADDR_EXP 70
48999: PUSH
49000: EMPTY
49001: ST_TO_ADDR
// mc_turret_list := [ ] ;
49002: LD_ADDR_EXP 71
49006: PUSH
49007: EMPTY
49008: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
49009: LD_ADDR_EXP 72
49013: PUSH
49014: EMPTY
49015: ST_TO_ADDR
// mc_miners := [ ] ;
49016: LD_ADDR_EXP 77
49020: PUSH
49021: EMPTY
49022: ST_TO_ADDR
// mc_mines := [ ] ;
49023: LD_ADDR_EXP 76
49027: PUSH
49028: EMPTY
49029: ST_TO_ADDR
// mc_minefields := [ ] ;
49030: LD_ADDR_EXP 78
49034: PUSH
49035: EMPTY
49036: ST_TO_ADDR
// mc_crates := [ ] ;
49037: LD_ADDR_EXP 79
49041: PUSH
49042: EMPTY
49043: ST_TO_ADDR
// mc_crates_collector := [ ] ;
49044: LD_ADDR_EXP 80
49048: PUSH
49049: EMPTY
49050: ST_TO_ADDR
// mc_crates_area := [ ] ;
49051: LD_ADDR_EXP 81
49055: PUSH
49056: EMPTY
49057: ST_TO_ADDR
// mc_vehicles := [ ] ;
49058: LD_ADDR_EXP 82
49062: PUSH
49063: EMPTY
49064: ST_TO_ADDR
// mc_attack := [ ] ;
49065: LD_ADDR_EXP 83
49069: PUSH
49070: EMPTY
49071: ST_TO_ADDR
// mc_produce := [ ] ;
49072: LD_ADDR_EXP 84
49076: PUSH
49077: EMPTY
49078: ST_TO_ADDR
// mc_defender := [ ] ;
49079: LD_ADDR_EXP 85
49083: PUSH
49084: EMPTY
49085: ST_TO_ADDR
// mc_parking := [ ] ;
49086: LD_ADDR_EXP 87
49090: PUSH
49091: EMPTY
49092: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
49093: LD_ADDR_EXP 73
49097: PUSH
49098: EMPTY
49099: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
49100: LD_ADDR_EXP 75
49104: PUSH
49105: EMPTY
49106: ST_TO_ADDR
// mc_scan := [ ] ;
49107: LD_ADDR_EXP 86
49111: PUSH
49112: EMPTY
49113: ST_TO_ADDR
// mc_scan_area := [ ] ;
49114: LD_ADDR_EXP 88
49118: PUSH
49119: EMPTY
49120: ST_TO_ADDR
// mc_tech := [ ] ;
49121: LD_ADDR_EXP 90
49125: PUSH
49126: EMPTY
49127: ST_TO_ADDR
// mc_class := [ ] ;
49128: LD_ADDR_EXP 104
49132: PUSH
49133: EMPTY
49134: ST_TO_ADDR
// mc_class_case_use := [ ] ;
49135: LD_ADDR_EXP 105
49139: PUSH
49140: EMPTY
49141: ST_TO_ADDR
// end ;
49142: LD_VAR 0 1
49146: RET
// export function MC_Kill ( base ) ; begin
49147: LD_INT 0
49149: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
49150: LD_ADDR_EXP 63
49154: PUSH
49155: LD_EXP 63
49159: PPUSH
49160: LD_VAR 0 1
49164: PPUSH
49165: EMPTY
49166: PPUSH
49167: CALL_OW 1
49171: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
49172: LD_ADDR_EXP 64
49176: PUSH
49177: LD_EXP 64
49181: PPUSH
49182: LD_VAR 0 1
49186: PPUSH
49187: EMPTY
49188: PPUSH
49189: CALL_OW 1
49193: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
49194: LD_ADDR_EXP 65
49198: PUSH
49199: LD_EXP 65
49203: PPUSH
49204: LD_VAR 0 1
49208: PPUSH
49209: EMPTY
49210: PPUSH
49211: CALL_OW 1
49215: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
49216: LD_ADDR_EXP 66
49220: PUSH
49221: LD_EXP 66
49225: PPUSH
49226: LD_VAR 0 1
49230: PPUSH
49231: EMPTY
49232: PPUSH
49233: CALL_OW 1
49237: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
49238: LD_ADDR_EXP 67
49242: PUSH
49243: LD_EXP 67
49247: PPUSH
49248: LD_VAR 0 1
49252: PPUSH
49253: EMPTY
49254: PPUSH
49255: CALL_OW 1
49259: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
49260: LD_ADDR_EXP 68
49264: PUSH
49265: LD_EXP 68
49269: PPUSH
49270: LD_VAR 0 1
49274: PPUSH
49275: EMPTY
49276: PPUSH
49277: CALL_OW 1
49281: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
49282: LD_ADDR_EXP 69
49286: PUSH
49287: LD_EXP 69
49291: PPUSH
49292: LD_VAR 0 1
49296: PPUSH
49297: EMPTY
49298: PPUSH
49299: CALL_OW 1
49303: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
49304: LD_ADDR_EXP 70
49308: PUSH
49309: LD_EXP 70
49313: PPUSH
49314: LD_VAR 0 1
49318: PPUSH
49319: EMPTY
49320: PPUSH
49321: CALL_OW 1
49325: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
49326: LD_ADDR_EXP 71
49330: PUSH
49331: LD_EXP 71
49335: PPUSH
49336: LD_VAR 0 1
49340: PPUSH
49341: EMPTY
49342: PPUSH
49343: CALL_OW 1
49347: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
49348: LD_ADDR_EXP 72
49352: PUSH
49353: LD_EXP 72
49357: PPUSH
49358: LD_VAR 0 1
49362: PPUSH
49363: EMPTY
49364: PPUSH
49365: CALL_OW 1
49369: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
49370: LD_ADDR_EXP 73
49374: PUSH
49375: LD_EXP 73
49379: PPUSH
49380: LD_VAR 0 1
49384: PPUSH
49385: EMPTY
49386: PPUSH
49387: CALL_OW 1
49391: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
49392: LD_ADDR_EXP 74
49396: PUSH
49397: LD_EXP 74
49401: PPUSH
49402: LD_VAR 0 1
49406: PPUSH
49407: LD_INT 0
49409: PPUSH
49410: CALL_OW 1
49414: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
49415: LD_ADDR_EXP 75
49419: PUSH
49420: LD_EXP 75
49424: PPUSH
49425: LD_VAR 0 1
49429: PPUSH
49430: EMPTY
49431: PPUSH
49432: CALL_OW 1
49436: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
49437: LD_ADDR_EXP 76
49441: PUSH
49442: LD_EXP 76
49446: PPUSH
49447: LD_VAR 0 1
49451: PPUSH
49452: EMPTY
49453: PPUSH
49454: CALL_OW 1
49458: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
49459: LD_ADDR_EXP 77
49463: PUSH
49464: LD_EXP 77
49468: PPUSH
49469: LD_VAR 0 1
49473: PPUSH
49474: EMPTY
49475: PPUSH
49476: CALL_OW 1
49480: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
49481: LD_ADDR_EXP 78
49485: PUSH
49486: LD_EXP 78
49490: PPUSH
49491: LD_VAR 0 1
49495: PPUSH
49496: EMPTY
49497: PPUSH
49498: CALL_OW 1
49502: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
49503: LD_ADDR_EXP 79
49507: PUSH
49508: LD_EXP 79
49512: PPUSH
49513: LD_VAR 0 1
49517: PPUSH
49518: EMPTY
49519: PPUSH
49520: CALL_OW 1
49524: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
49525: LD_ADDR_EXP 80
49529: PUSH
49530: LD_EXP 80
49534: PPUSH
49535: LD_VAR 0 1
49539: PPUSH
49540: EMPTY
49541: PPUSH
49542: CALL_OW 1
49546: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
49547: LD_ADDR_EXP 81
49551: PUSH
49552: LD_EXP 81
49556: PPUSH
49557: LD_VAR 0 1
49561: PPUSH
49562: EMPTY
49563: PPUSH
49564: CALL_OW 1
49568: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
49569: LD_ADDR_EXP 82
49573: PUSH
49574: LD_EXP 82
49578: PPUSH
49579: LD_VAR 0 1
49583: PPUSH
49584: EMPTY
49585: PPUSH
49586: CALL_OW 1
49590: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
49591: LD_ADDR_EXP 83
49595: PUSH
49596: LD_EXP 83
49600: PPUSH
49601: LD_VAR 0 1
49605: PPUSH
49606: EMPTY
49607: PPUSH
49608: CALL_OW 1
49612: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
49613: LD_ADDR_EXP 84
49617: PUSH
49618: LD_EXP 84
49622: PPUSH
49623: LD_VAR 0 1
49627: PPUSH
49628: EMPTY
49629: PPUSH
49630: CALL_OW 1
49634: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
49635: LD_ADDR_EXP 85
49639: PUSH
49640: LD_EXP 85
49644: PPUSH
49645: LD_VAR 0 1
49649: PPUSH
49650: EMPTY
49651: PPUSH
49652: CALL_OW 1
49656: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
49657: LD_ADDR_EXP 86
49661: PUSH
49662: LD_EXP 86
49666: PPUSH
49667: LD_VAR 0 1
49671: PPUSH
49672: EMPTY
49673: PPUSH
49674: CALL_OW 1
49678: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
49679: LD_ADDR_EXP 87
49683: PUSH
49684: LD_EXP 87
49688: PPUSH
49689: LD_VAR 0 1
49693: PPUSH
49694: EMPTY
49695: PPUSH
49696: CALL_OW 1
49700: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
49701: LD_ADDR_EXP 88
49705: PUSH
49706: LD_EXP 88
49710: PPUSH
49711: LD_VAR 0 1
49715: PPUSH
49716: EMPTY
49717: PPUSH
49718: CALL_OW 1
49722: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
49723: LD_ADDR_EXP 90
49727: PUSH
49728: LD_EXP 90
49732: PPUSH
49733: LD_VAR 0 1
49737: PPUSH
49738: EMPTY
49739: PPUSH
49740: CALL_OW 1
49744: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
49745: LD_ADDR_EXP 92
49749: PUSH
49750: LD_EXP 92
49754: PPUSH
49755: LD_VAR 0 1
49759: PPUSH
49760: EMPTY
49761: PPUSH
49762: CALL_OW 1
49766: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
49767: LD_ADDR_EXP 93
49771: PUSH
49772: LD_EXP 93
49776: PPUSH
49777: LD_VAR 0 1
49781: PPUSH
49782: EMPTY
49783: PPUSH
49784: CALL_OW 1
49788: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
49789: LD_ADDR_EXP 94
49793: PUSH
49794: LD_EXP 94
49798: PPUSH
49799: LD_VAR 0 1
49803: PPUSH
49804: EMPTY
49805: PPUSH
49806: CALL_OW 1
49810: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
49811: LD_ADDR_EXP 95
49815: PUSH
49816: LD_EXP 95
49820: PPUSH
49821: LD_VAR 0 1
49825: PPUSH
49826: EMPTY
49827: PPUSH
49828: CALL_OW 1
49832: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
49833: LD_ADDR_EXP 96
49837: PUSH
49838: LD_EXP 96
49842: PPUSH
49843: LD_VAR 0 1
49847: PPUSH
49848: EMPTY
49849: PPUSH
49850: CALL_OW 1
49854: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
49855: LD_ADDR_EXP 97
49859: PUSH
49860: LD_EXP 97
49864: PPUSH
49865: LD_VAR 0 1
49869: PPUSH
49870: EMPTY
49871: PPUSH
49872: CALL_OW 1
49876: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
49877: LD_ADDR_EXP 98
49881: PUSH
49882: LD_EXP 98
49886: PPUSH
49887: LD_VAR 0 1
49891: PPUSH
49892: EMPTY
49893: PPUSH
49894: CALL_OW 1
49898: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
49899: LD_ADDR_EXP 99
49903: PUSH
49904: LD_EXP 99
49908: PPUSH
49909: LD_VAR 0 1
49913: PPUSH
49914: EMPTY
49915: PPUSH
49916: CALL_OW 1
49920: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
49921: LD_ADDR_EXP 100
49925: PUSH
49926: LD_EXP 100
49930: PPUSH
49931: LD_VAR 0 1
49935: PPUSH
49936: EMPTY
49937: PPUSH
49938: CALL_OW 1
49942: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
49943: LD_ADDR_EXP 101
49947: PUSH
49948: LD_EXP 101
49952: PPUSH
49953: LD_VAR 0 1
49957: PPUSH
49958: EMPTY
49959: PPUSH
49960: CALL_OW 1
49964: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
49965: LD_ADDR_EXP 102
49969: PUSH
49970: LD_EXP 102
49974: PPUSH
49975: LD_VAR 0 1
49979: PPUSH
49980: EMPTY
49981: PPUSH
49982: CALL_OW 1
49986: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
49987: LD_ADDR_EXP 103
49991: PUSH
49992: LD_EXP 103
49996: PPUSH
49997: LD_VAR 0 1
50001: PPUSH
50002: EMPTY
50003: PPUSH
50004: CALL_OW 1
50008: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
50009: LD_ADDR_EXP 104
50013: PUSH
50014: LD_EXP 104
50018: PPUSH
50019: LD_VAR 0 1
50023: PPUSH
50024: EMPTY
50025: PPUSH
50026: CALL_OW 1
50030: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
50031: LD_ADDR_EXP 105
50035: PUSH
50036: LD_EXP 105
50040: PPUSH
50041: LD_VAR 0 1
50045: PPUSH
50046: LD_INT 0
50048: PPUSH
50049: CALL_OW 1
50053: ST_TO_ADDR
// end ;
50054: LD_VAR 0 2
50058: RET
// export function MC_Add ( side , units ) ; var base ; begin
50059: LD_INT 0
50061: PPUSH
50062: PPUSH
// base := mc_bases + 1 ;
50063: LD_ADDR_VAR 0 4
50067: PUSH
50068: LD_EXP 63
50072: PUSH
50073: LD_INT 1
50075: PLUS
50076: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
50077: LD_ADDR_EXP 89
50081: PUSH
50082: LD_EXP 89
50086: PPUSH
50087: LD_VAR 0 4
50091: PPUSH
50092: LD_VAR 0 1
50096: PPUSH
50097: CALL_OW 1
50101: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
50102: LD_ADDR_EXP 63
50106: PUSH
50107: LD_EXP 63
50111: PPUSH
50112: LD_VAR 0 4
50116: PPUSH
50117: LD_VAR 0 2
50121: PPUSH
50122: CALL_OW 1
50126: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
50127: LD_ADDR_EXP 64
50131: PUSH
50132: LD_EXP 64
50136: PPUSH
50137: LD_VAR 0 4
50141: PPUSH
50142: EMPTY
50143: PPUSH
50144: CALL_OW 1
50148: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
50149: LD_ADDR_EXP 65
50153: PUSH
50154: LD_EXP 65
50158: PPUSH
50159: LD_VAR 0 4
50163: PPUSH
50164: EMPTY
50165: PPUSH
50166: CALL_OW 1
50170: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
50171: LD_ADDR_EXP 66
50175: PUSH
50176: LD_EXP 66
50180: PPUSH
50181: LD_VAR 0 4
50185: PPUSH
50186: EMPTY
50187: PPUSH
50188: CALL_OW 1
50192: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
50193: LD_ADDR_EXP 67
50197: PUSH
50198: LD_EXP 67
50202: PPUSH
50203: LD_VAR 0 4
50207: PPUSH
50208: EMPTY
50209: PPUSH
50210: CALL_OW 1
50214: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
50215: LD_ADDR_EXP 68
50219: PUSH
50220: LD_EXP 68
50224: PPUSH
50225: LD_VAR 0 4
50229: PPUSH
50230: EMPTY
50231: PPUSH
50232: CALL_OW 1
50236: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
50237: LD_ADDR_EXP 69
50241: PUSH
50242: LD_EXP 69
50246: PPUSH
50247: LD_VAR 0 4
50251: PPUSH
50252: EMPTY
50253: PPUSH
50254: CALL_OW 1
50258: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
50259: LD_ADDR_EXP 70
50263: PUSH
50264: LD_EXP 70
50268: PPUSH
50269: LD_VAR 0 4
50273: PPUSH
50274: EMPTY
50275: PPUSH
50276: CALL_OW 1
50280: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
50281: LD_ADDR_EXP 71
50285: PUSH
50286: LD_EXP 71
50290: PPUSH
50291: LD_VAR 0 4
50295: PPUSH
50296: EMPTY
50297: PPUSH
50298: CALL_OW 1
50302: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
50303: LD_ADDR_EXP 72
50307: PUSH
50308: LD_EXP 72
50312: PPUSH
50313: LD_VAR 0 4
50317: PPUSH
50318: EMPTY
50319: PPUSH
50320: CALL_OW 1
50324: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
50325: LD_ADDR_EXP 73
50329: PUSH
50330: LD_EXP 73
50334: PPUSH
50335: LD_VAR 0 4
50339: PPUSH
50340: EMPTY
50341: PPUSH
50342: CALL_OW 1
50346: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
50347: LD_ADDR_EXP 74
50351: PUSH
50352: LD_EXP 74
50356: PPUSH
50357: LD_VAR 0 4
50361: PPUSH
50362: LD_INT 0
50364: PPUSH
50365: CALL_OW 1
50369: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
50370: LD_ADDR_EXP 75
50374: PUSH
50375: LD_EXP 75
50379: PPUSH
50380: LD_VAR 0 4
50384: PPUSH
50385: EMPTY
50386: PPUSH
50387: CALL_OW 1
50391: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
50392: LD_ADDR_EXP 76
50396: PUSH
50397: LD_EXP 76
50401: PPUSH
50402: LD_VAR 0 4
50406: PPUSH
50407: EMPTY
50408: PPUSH
50409: CALL_OW 1
50413: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
50414: LD_ADDR_EXP 77
50418: PUSH
50419: LD_EXP 77
50423: PPUSH
50424: LD_VAR 0 4
50428: PPUSH
50429: EMPTY
50430: PPUSH
50431: CALL_OW 1
50435: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
50436: LD_ADDR_EXP 78
50440: PUSH
50441: LD_EXP 78
50445: PPUSH
50446: LD_VAR 0 4
50450: PPUSH
50451: EMPTY
50452: PPUSH
50453: CALL_OW 1
50457: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
50458: LD_ADDR_EXP 79
50462: PUSH
50463: LD_EXP 79
50467: PPUSH
50468: LD_VAR 0 4
50472: PPUSH
50473: EMPTY
50474: PPUSH
50475: CALL_OW 1
50479: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
50480: LD_ADDR_EXP 80
50484: PUSH
50485: LD_EXP 80
50489: PPUSH
50490: LD_VAR 0 4
50494: PPUSH
50495: EMPTY
50496: PPUSH
50497: CALL_OW 1
50501: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
50502: LD_ADDR_EXP 81
50506: PUSH
50507: LD_EXP 81
50511: PPUSH
50512: LD_VAR 0 4
50516: PPUSH
50517: EMPTY
50518: PPUSH
50519: CALL_OW 1
50523: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
50524: LD_ADDR_EXP 82
50528: PUSH
50529: LD_EXP 82
50533: PPUSH
50534: LD_VAR 0 4
50538: PPUSH
50539: EMPTY
50540: PPUSH
50541: CALL_OW 1
50545: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
50546: LD_ADDR_EXP 83
50550: PUSH
50551: LD_EXP 83
50555: PPUSH
50556: LD_VAR 0 4
50560: PPUSH
50561: EMPTY
50562: PPUSH
50563: CALL_OW 1
50567: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
50568: LD_ADDR_EXP 84
50572: PUSH
50573: LD_EXP 84
50577: PPUSH
50578: LD_VAR 0 4
50582: PPUSH
50583: EMPTY
50584: PPUSH
50585: CALL_OW 1
50589: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
50590: LD_ADDR_EXP 85
50594: PUSH
50595: LD_EXP 85
50599: PPUSH
50600: LD_VAR 0 4
50604: PPUSH
50605: EMPTY
50606: PPUSH
50607: CALL_OW 1
50611: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
50612: LD_ADDR_EXP 86
50616: PUSH
50617: LD_EXP 86
50621: PPUSH
50622: LD_VAR 0 4
50626: PPUSH
50627: EMPTY
50628: PPUSH
50629: CALL_OW 1
50633: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
50634: LD_ADDR_EXP 87
50638: PUSH
50639: LD_EXP 87
50643: PPUSH
50644: LD_VAR 0 4
50648: PPUSH
50649: EMPTY
50650: PPUSH
50651: CALL_OW 1
50655: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
50656: LD_ADDR_EXP 88
50660: PUSH
50661: LD_EXP 88
50665: PPUSH
50666: LD_VAR 0 4
50670: PPUSH
50671: EMPTY
50672: PPUSH
50673: CALL_OW 1
50677: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
50678: LD_ADDR_EXP 90
50682: PUSH
50683: LD_EXP 90
50687: PPUSH
50688: LD_VAR 0 4
50692: PPUSH
50693: EMPTY
50694: PPUSH
50695: CALL_OW 1
50699: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
50700: LD_ADDR_EXP 92
50704: PUSH
50705: LD_EXP 92
50709: PPUSH
50710: LD_VAR 0 4
50714: PPUSH
50715: EMPTY
50716: PPUSH
50717: CALL_OW 1
50721: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
50722: LD_ADDR_EXP 93
50726: PUSH
50727: LD_EXP 93
50731: PPUSH
50732: LD_VAR 0 4
50736: PPUSH
50737: EMPTY
50738: PPUSH
50739: CALL_OW 1
50743: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
50744: LD_ADDR_EXP 94
50748: PUSH
50749: LD_EXP 94
50753: PPUSH
50754: LD_VAR 0 4
50758: PPUSH
50759: EMPTY
50760: PPUSH
50761: CALL_OW 1
50765: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
50766: LD_ADDR_EXP 95
50770: PUSH
50771: LD_EXP 95
50775: PPUSH
50776: LD_VAR 0 4
50780: PPUSH
50781: EMPTY
50782: PPUSH
50783: CALL_OW 1
50787: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
50788: LD_ADDR_EXP 96
50792: PUSH
50793: LD_EXP 96
50797: PPUSH
50798: LD_VAR 0 4
50802: PPUSH
50803: EMPTY
50804: PPUSH
50805: CALL_OW 1
50809: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
50810: LD_ADDR_EXP 97
50814: PUSH
50815: LD_EXP 97
50819: PPUSH
50820: LD_VAR 0 4
50824: PPUSH
50825: EMPTY
50826: PPUSH
50827: CALL_OW 1
50831: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
50832: LD_ADDR_EXP 98
50836: PUSH
50837: LD_EXP 98
50841: PPUSH
50842: LD_VAR 0 4
50846: PPUSH
50847: EMPTY
50848: PPUSH
50849: CALL_OW 1
50853: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
50854: LD_ADDR_EXP 99
50858: PUSH
50859: LD_EXP 99
50863: PPUSH
50864: LD_VAR 0 4
50868: PPUSH
50869: EMPTY
50870: PPUSH
50871: CALL_OW 1
50875: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
50876: LD_ADDR_EXP 100
50880: PUSH
50881: LD_EXP 100
50885: PPUSH
50886: LD_VAR 0 4
50890: PPUSH
50891: EMPTY
50892: PPUSH
50893: CALL_OW 1
50897: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
50898: LD_ADDR_EXP 101
50902: PUSH
50903: LD_EXP 101
50907: PPUSH
50908: LD_VAR 0 4
50912: PPUSH
50913: EMPTY
50914: PPUSH
50915: CALL_OW 1
50919: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
50920: LD_ADDR_EXP 102
50924: PUSH
50925: LD_EXP 102
50929: PPUSH
50930: LD_VAR 0 4
50934: PPUSH
50935: EMPTY
50936: PPUSH
50937: CALL_OW 1
50941: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
50942: LD_ADDR_EXP 103
50946: PUSH
50947: LD_EXP 103
50951: PPUSH
50952: LD_VAR 0 4
50956: PPUSH
50957: EMPTY
50958: PPUSH
50959: CALL_OW 1
50963: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
50964: LD_ADDR_EXP 104
50968: PUSH
50969: LD_EXP 104
50973: PPUSH
50974: LD_VAR 0 4
50978: PPUSH
50979: EMPTY
50980: PPUSH
50981: CALL_OW 1
50985: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
50986: LD_ADDR_EXP 105
50990: PUSH
50991: LD_EXP 105
50995: PPUSH
50996: LD_VAR 0 4
51000: PPUSH
51001: LD_INT 0
51003: PPUSH
51004: CALL_OW 1
51008: ST_TO_ADDR
// result := base ;
51009: LD_ADDR_VAR 0 3
51013: PUSH
51014: LD_VAR 0 4
51018: ST_TO_ADDR
// end ;
51019: LD_VAR 0 3
51023: RET
// export function MC_Start ( ) ; var i ; begin
51024: LD_INT 0
51026: PPUSH
51027: PPUSH
// for i = 1 to mc_bases do
51028: LD_ADDR_VAR 0 2
51032: PUSH
51033: DOUBLE
51034: LD_INT 1
51036: DEC
51037: ST_TO_ADDR
51038: LD_EXP 63
51042: PUSH
51043: FOR_TO
51044: IFFALSE 52121
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
51046: LD_ADDR_EXP 63
51050: PUSH
51051: LD_EXP 63
51055: PPUSH
51056: LD_VAR 0 2
51060: PPUSH
51061: LD_EXP 63
51065: PUSH
51066: LD_VAR 0 2
51070: ARRAY
51071: PUSH
51072: LD_INT 0
51074: DIFF
51075: PPUSH
51076: CALL_OW 1
51080: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
51081: LD_ADDR_EXP 64
51085: PUSH
51086: LD_EXP 64
51090: PPUSH
51091: LD_VAR 0 2
51095: PPUSH
51096: EMPTY
51097: PPUSH
51098: CALL_OW 1
51102: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
51103: LD_ADDR_EXP 65
51107: PUSH
51108: LD_EXP 65
51112: PPUSH
51113: LD_VAR 0 2
51117: PPUSH
51118: EMPTY
51119: PPUSH
51120: CALL_OW 1
51124: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
51125: LD_ADDR_EXP 66
51129: PUSH
51130: LD_EXP 66
51134: PPUSH
51135: LD_VAR 0 2
51139: PPUSH
51140: EMPTY
51141: PPUSH
51142: CALL_OW 1
51146: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
51147: LD_ADDR_EXP 67
51151: PUSH
51152: LD_EXP 67
51156: PPUSH
51157: LD_VAR 0 2
51161: PPUSH
51162: EMPTY
51163: PUSH
51164: EMPTY
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PPUSH
51170: CALL_OW 1
51174: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
51175: LD_ADDR_EXP 68
51179: PUSH
51180: LD_EXP 68
51184: PPUSH
51185: LD_VAR 0 2
51189: PPUSH
51190: EMPTY
51191: PPUSH
51192: CALL_OW 1
51196: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
51197: LD_ADDR_EXP 95
51201: PUSH
51202: LD_EXP 95
51206: PPUSH
51207: LD_VAR 0 2
51211: PPUSH
51212: EMPTY
51213: PPUSH
51214: CALL_OW 1
51218: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
51219: LD_ADDR_EXP 69
51223: PUSH
51224: LD_EXP 69
51228: PPUSH
51229: LD_VAR 0 2
51233: PPUSH
51234: EMPTY
51235: PPUSH
51236: CALL_OW 1
51240: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
51241: LD_ADDR_EXP 70
51245: PUSH
51246: LD_EXP 70
51250: PPUSH
51251: LD_VAR 0 2
51255: PPUSH
51256: EMPTY
51257: PPUSH
51258: CALL_OW 1
51262: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
51263: LD_ADDR_EXP 71
51267: PUSH
51268: LD_EXP 71
51272: PPUSH
51273: LD_VAR 0 2
51277: PPUSH
51278: LD_EXP 63
51282: PUSH
51283: LD_VAR 0 2
51287: ARRAY
51288: PPUSH
51289: LD_INT 2
51291: PUSH
51292: LD_INT 30
51294: PUSH
51295: LD_INT 32
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 30
51304: PUSH
51305: LD_INT 33
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: LIST
51316: PPUSH
51317: CALL_OW 72
51321: PPUSH
51322: CALL_OW 1
51326: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
51327: LD_ADDR_EXP 72
51331: PUSH
51332: LD_EXP 72
51336: PPUSH
51337: LD_VAR 0 2
51341: PPUSH
51342: LD_EXP 63
51346: PUSH
51347: LD_VAR 0 2
51351: ARRAY
51352: PPUSH
51353: LD_INT 2
51355: PUSH
51356: LD_INT 30
51358: PUSH
51359: LD_INT 32
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 30
51368: PUSH
51369: LD_INT 31
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 58
51383: PUSH
51384: EMPTY
51385: LIST
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PPUSH
51391: CALL_OW 72
51395: PPUSH
51396: CALL_OW 1
51400: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
51401: LD_ADDR_EXP 73
51405: PUSH
51406: LD_EXP 73
51410: PPUSH
51411: LD_VAR 0 2
51415: PPUSH
51416: EMPTY
51417: PPUSH
51418: CALL_OW 1
51422: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
51423: LD_ADDR_EXP 77
51427: PUSH
51428: LD_EXP 77
51432: PPUSH
51433: LD_VAR 0 2
51437: PPUSH
51438: EMPTY
51439: PPUSH
51440: CALL_OW 1
51444: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
51445: LD_ADDR_EXP 76
51449: PUSH
51450: LD_EXP 76
51454: PPUSH
51455: LD_VAR 0 2
51459: PPUSH
51460: EMPTY
51461: PPUSH
51462: CALL_OW 1
51466: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
51467: LD_ADDR_EXP 78
51471: PUSH
51472: LD_EXP 78
51476: PPUSH
51477: LD_VAR 0 2
51481: PPUSH
51482: EMPTY
51483: PPUSH
51484: CALL_OW 1
51488: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
51489: LD_ADDR_EXP 79
51493: PUSH
51494: LD_EXP 79
51498: PPUSH
51499: LD_VAR 0 2
51503: PPUSH
51504: EMPTY
51505: PPUSH
51506: CALL_OW 1
51510: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
51511: LD_ADDR_EXP 80
51515: PUSH
51516: LD_EXP 80
51520: PPUSH
51521: LD_VAR 0 2
51525: PPUSH
51526: EMPTY
51527: PPUSH
51528: CALL_OW 1
51532: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
51533: LD_ADDR_EXP 81
51537: PUSH
51538: LD_EXP 81
51542: PPUSH
51543: LD_VAR 0 2
51547: PPUSH
51548: EMPTY
51549: PPUSH
51550: CALL_OW 1
51554: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
51555: LD_ADDR_EXP 82
51559: PUSH
51560: LD_EXP 82
51564: PPUSH
51565: LD_VAR 0 2
51569: PPUSH
51570: EMPTY
51571: PPUSH
51572: CALL_OW 1
51576: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
51577: LD_ADDR_EXP 83
51581: PUSH
51582: LD_EXP 83
51586: PPUSH
51587: LD_VAR 0 2
51591: PPUSH
51592: EMPTY
51593: PPUSH
51594: CALL_OW 1
51598: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
51599: LD_ADDR_EXP 84
51603: PUSH
51604: LD_EXP 84
51608: PPUSH
51609: LD_VAR 0 2
51613: PPUSH
51614: EMPTY
51615: PPUSH
51616: CALL_OW 1
51620: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
51621: LD_ADDR_EXP 85
51625: PUSH
51626: LD_EXP 85
51630: PPUSH
51631: LD_VAR 0 2
51635: PPUSH
51636: EMPTY
51637: PPUSH
51638: CALL_OW 1
51642: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
51643: LD_ADDR_EXP 74
51647: PUSH
51648: LD_EXP 74
51652: PPUSH
51653: LD_VAR 0 2
51657: PPUSH
51658: LD_INT 0
51660: PPUSH
51661: CALL_OW 1
51665: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
51666: LD_ADDR_EXP 87
51670: PUSH
51671: LD_EXP 87
51675: PPUSH
51676: LD_VAR 0 2
51680: PPUSH
51681: LD_INT 0
51683: PPUSH
51684: CALL_OW 1
51688: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
51689: LD_ADDR_EXP 75
51693: PUSH
51694: LD_EXP 75
51698: PPUSH
51699: LD_VAR 0 2
51703: PPUSH
51704: EMPTY
51705: PPUSH
51706: CALL_OW 1
51710: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
51711: LD_ADDR_EXP 86
51715: PUSH
51716: LD_EXP 86
51720: PPUSH
51721: LD_VAR 0 2
51725: PPUSH
51726: LD_INT 0
51728: PPUSH
51729: CALL_OW 1
51733: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
51734: LD_ADDR_EXP 88
51738: PUSH
51739: LD_EXP 88
51743: PPUSH
51744: LD_VAR 0 2
51748: PPUSH
51749: EMPTY
51750: PPUSH
51751: CALL_OW 1
51755: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
51756: LD_ADDR_EXP 91
51760: PUSH
51761: LD_EXP 91
51765: PPUSH
51766: LD_VAR 0 2
51770: PPUSH
51771: LD_INT 0
51773: PPUSH
51774: CALL_OW 1
51778: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
51779: LD_ADDR_EXP 92
51783: PUSH
51784: LD_EXP 92
51788: PPUSH
51789: LD_VAR 0 2
51793: PPUSH
51794: EMPTY
51795: PPUSH
51796: CALL_OW 1
51800: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
51801: LD_ADDR_EXP 93
51805: PUSH
51806: LD_EXP 93
51810: PPUSH
51811: LD_VAR 0 2
51815: PPUSH
51816: EMPTY
51817: PPUSH
51818: CALL_OW 1
51822: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
51823: LD_ADDR_EXP 94
51827: PUSH
51828: LD_EXP 94
51832: PPUSH
51833: LD_VAR 0 2
51837: PPUSH
51838: EMPTY
51839: PPUSH
51840: CALL_OW 1
51844: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
51845: LD_ADDR_EXP 96
51849: PUSH
51850: LD_EXP 96
51854: PPUSH
51855: LD_VAR 0 2
51859: PPUSH
51860: LD_EXP 63
51864: PUSH
51865: LD_VAR 0 2
51869: ARRAY
51870: PPUSH
51871: LD_INT 2
51873: PUSH
51874: LD_INT 30
51876: PUSH
51877: LD_INT 6
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 30
51886: PUSH
51887: LD_INT 7
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 30
51896: PUSH
51897: LD_INT 8
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: PPUSH
51910: CALL_OW 72
51914: PPUSH
51915: CALL_OW 1
51919: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
51920: LD_ADDR_EXP 97
51924: PUSH
51925: LD_EXP 97
51929: PPUSH
51930: LD_VAR 0 2
51934: PPUSH
51935: EMPTY
51936: PPUSH
51937: CALL_OW 1
51941: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
51942: LD_ADDR_EXP 98
51946: PUSH
51947: LD_EXP 98
51951: PPUSH
51952: LD_VAR 0 2
51956: PPUSH
51957: EMPTY
51958: PPUSH
51959: CALL_OW 1
51963: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
51964: LD_ADDR_EXP 99
51968: PUSH
51969: LD_EXP 99
51973: PPUSH
51974: LD_VAR 0 2
51978: PPUSH
51979: EMPTY
51980: PPUSH
51981: CALL_OW 1
51985: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
51986: LD_ADDR_EXP 100
51990: PUSH
51991: LD_EXP 100
51995: PPUSH
51996: LD_VAR 0 2
52000: PPUSH
52001: EMPTY
52002: PPUSH
52003: CALL_OW 1
52007: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
52008: LD_ADDR_EXP 101
52012: PUSH
52013: LD_EXP 101
52017: PPUSH
52018: LD_VAR 0 2
52022: PPUSH
52023: EMPTY
52024: PPUSH
52025: CALL_OW 1
52029: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
52030: LD_ADDR_EXP 102
52034: PUSH
52035: LD_EXP 102
52039: PPUSH
52040: LD_VAR 0 2
52044: PPUSH
52045: EMPTY
52046: PPUSH
52047: CALL_OW 1
52051: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
52052: LD_ADDR_EXP 103
52056: PUSH
52057: LD_EXP 103
52061: PPUSH
52062: LD_VAR 0 2
52066: PPUSH
52067: EMPTY
52068: PPUSH
52069: CALL_OW 1
52073: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
52074: LD_ADDR_EXP 104
52078: PUSH
52079: LD_EXP 104
52083: PPUSH
52084: LD_VAR 0 2
52088: PPUSH
52089: EMPTY
52090: PPUSH
52091: CALL_OW 1
52095: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
52096: LD_ADDR_EXP 105
52100: PUSH
52101: LD_EXP 105
52105: PPUSH
52106: LD_VAR 0 2
52110: PPUSH
52111: LD_INT 0
52113: PPUSH
52114: CALL_OW 1
52118: ST_TO_ADDR
// end ;
52119: GO 51043
52121: POP
52122: POP
// MC_InitSides ( ) ;
52123: CALL 52409 0 0
// MC_InitResearch ( ) ;
52127: CALL 52148 0 0
// CustomInitMacro ( ) ;
52131: CALL 5901 0 0
// skirmish := true ;
52135: LD_ADDR_EXP 61
52139: PUSH
52140: LD_INT 1
52142: ST_TO_ADDR
// end ;
52143: LD_VAR 0 1
52147: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
52148: LD_INT 0
52150: PPUSH
52151: PPUSH
52152: PPUSH
52153: PPUSH
52154: PPUSH
52155: PPUSH
// if not mc_bases then
52156: LD_EXP 63
52160: NOT
52161: IFFALSE 52165
// exit ;
52163: GO 52404
// for i = 1 to 8 do
52165: LD_ADDR_VAR 0 2
52169: PUSH
52170: DOUBLE
52171: LD_INT 1
52173: DEC
52174: ST_TO_ADDR
52175: LD_INT 8
52177: PUSH
52178: FOR_TO
52179: IFFALSE 52205
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
52181: LD_ADDR_EXP 90
52185: PUSH
52186: LD_EXP 90
52190: PPUSH
52191: LD_VAR 0 2
52195: PPUSH
52196: EMPTY
52197: PPUSH
52198: CALL_OW 1
52202: ST_TO_ADDR
52203: GO 52178
52205: POP
52206: POP
// tmp := [ ] ;
52207: LD_ADDR_VAR 0 5
52211: PUSH
52212: EMPTY
52213: ST_TO_ADDR
// for i = 1 to mc_sides do
52214: LD_ADDR_VAR 0 2
52218: PUSH
52219: DOUBLE
52220: LD_INT 1
52222: DEC
52223: ST_TO_ADDR
52224: LD_EXP 89
52228: PUSH
52229: FOR_TO
52230: IFFALSE 52288
// if not mc_sides [ i ] in tmp then
52232: LD_EXP 89
52236: PUSH
52237: LD_VAR 0 2
52241: ARRAY
52242: PUSH
52243: LD_VAR 0 5
52247: IN
52248: NOT
52249: IFFALSE 52286
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
52251: LD_ADDR_VAR 0 5
52255: PUSH
52256: LD_VAR 0 5
52260: PPUSH
52261: LD_VAR 0 5
52265: PUSH
52266: LD_INT 1
52268: PLUS
52269: PPUSH
52270: LD_EXP 89
52274: PUSH
52275: LD_VAR 0 2
52279: ARRAY
52280: PPUSH
52281: CALL_OW 2
52285: ST_TO_ADDR
52286: GO 52229
52288: POP
52289: POP
// if not tmp then
52290: LD_VAR 0 5
52294: NOT
52295: IFFALSE 52299
// exit ;
52297: GO 52404
// for j in tmp do
52299: LD_ADDR_VAR 0 3
52303: PUSH
52304: LD_VAR 0 5
52308: PUSH
52309: FOR_IN
52310: IFFALSE 52402
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
52312: LD_ADDR_VAR 0 6
52316: PUSH
52317: LD_INT 22
52319: PUSH
52320: LD_VAR 0 3
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PPUSH
52329: CALL_OW 69
52333: ST_TO_ADDR
// if not un then
52334: LD_VAR 0 6
52338: NOT
52339: IFFALSE 52343
// continue ;
52341: GO 52309
// nation := GetNation ( un [ 1 ] ) ;
52343: LD_ADDR_VAR 0 4
52347: PUSH
52348: LD_VAR 0 6
52352: PUSH
52353: LD_INT 1
52355: ARRAY
52356: PPUSH
52357: CALL_OW 248
52361: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
52362: LD_ADDR_EXP 90
52366: PUSH
52367: LD_EXP 90
52371: PPUSH
52372: LD_VAR 0 3
52376: PPUSH
52377: LD_VAR 0 3
52381: PPUSH
52382: LD_VAR 0 4
52386: PPUSH
52387: LD_INT 1
52389: PPUSH
52390: CALL 12519 0 3
52394: PPUSH
52395: CALL_OW 1
52399: ST_TO_ADDR
// end ;
52400: GO 52309
52402: POP
52403: POP
// end ;
52404: LD_VAR 0 1
52408: RET
// export function MC_InitSides ( ) ; var i ; begin
52409: LD_INT 0
52411: PPUSH
52412: PPUSH
// if not mc_bases then
52413: LD_EXP 63
52417: NOT
52418: IFFALSE 52422
// exit ;
52420: GO 52496
// for i = 1 to mc_bases do
52422: LD_ADDR_VAR 0 2
52426: PUSH
52427: DOUBLE
52428: LD_INT 1
52430: DEC
52431: ST_TO_ADDR
52432: LD_EXP 63
52436: PUSH
52437: FOR_TO
52438: IFFALSE 52494
// if mc_bases [ i ] then
52440: LD_EXP 63
52444: PUSH
52445: LD_VAR 0 2
52449: ARRAY
52450: IFFALSE 52492
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
52452: LD_ADDR_EXP 89
52456: PUSH
52457: LD_EXP 89
52461: PPUSH
52462: LD_VAR 0 2
52466: PPUSH
52467: LD_EXP 63
52471: PUSH
52472: LD_VAR 0 2
52476: ARRAY
52477: PUSH
52478: LD_INT 1
52480: ARRAY
52481: PPUSH
52482: CALL_OW 255
52486: PPUSH
52487: CALL_OW 1
52491: ST_TO_ADDR
52492: GO 52437
52494: POP
52495: POP
// end ;
52496: LD_VAR 0 1
52500: RET
// every 0 0$01 trigger skirmish do
52501: LD_EXP 61
52505: IFFALSE 52659
52507: GO 52509
52509: DISABLE
// begin enable ;
52510: ENABLE
// MC_CheckBuildings ( ) ;
52511: CALL 57157 0 0
// MC_CheckPeopleLife ( ) ;
52515: CALL 57282 0 0
// RaiseSailEvent ( 100 ) ;
52519: LD_INT 100
52521: PPUSH
52522: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
52526: LD_INT 103
52528: PPUSH
52529: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
52533: LD_INT 104
52535: PPUSH
52536: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
52540: LD_INT 105
52542: PPUSH
52543: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
52547: LD_INT 106
52549: PPUSH
52550: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
52554: LD_INT 107
52556: PPUSH
52557: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
52561: LD_INT 108
52563: PPUSH
52564: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
52568: LD_INT 109
52570: PPUSH
52571: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
52575: LD_INT 110
52577: PPUSH
52578: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
52582: LD_INT 111
52584: PPUSH
52585: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
52589: LD_INT 112
52591: PPUSH
52592: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
52596: LD_INT 113
52598: PPUSH
52599: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
52603: LD_INT 120
52605: PPUSH
52606: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
52610: LD_INT 121
52612: PPUSH
52613: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
52617: LD_INT 122
52619: PPUSH
52620: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
52624: LD_INT 123
52626: PPUSH
52627: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
52631: LD_INT 124
52633: PPUSH
52634: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
52638: LD_INT 125
52640: PPUSH
52641: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
52645: LD_INT 126
52647: PPUSH
52648: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
52652: LD_INT 200
52654: PPUSH
52655: CALL_OW 427
// end ;
52659: END
// on SailEvent ( event ) do begin if event < 100 then
52660: LD_VAR 0 1
52664: PUSH
52665: LD_INT 100
52667: LESS
52668: IFFALSE 52679
// CustomEvent ( event ) ;
52670: LD_VAR 0 1
52674: PPUSH
52675: CALL 5893 0 1
// if event = 100 then
52679: LD_VAR 0 1
52683: PUSH
52684: LD_INT 100
52686: EQUAL
52687: IFFALSE 52693
// MC_ClassManager ( ) ;
52689: CALL 53085 0 0
// if event = 101 then
52693: LD_VAR 0 1
52697: PUSH
52698: LD_INT 101
52700: EQUAL
52701: IFFALSE 52707
// MC_RepairBuildings ( ) ;
52703: CALL 57867 0 0
// if event = 102 then
52707: LD_VAR 0 1
52711: PUSH
52712: LD_INT 102
52714: EQUAL
52715: IFFALSE 52721
// MC_Heal ( ) ;
52717: CALL 58726 0 0
// if event = 103 then
52721: LD_VAR 0 1
52725: PUSH
52726: LD_INT 103
52728: EQUAL
52729: IFFALSE 52735
// MC_Build ( ) ;
52731: CALL 59148 0 0
// if event = 104 then
52735: LD_VAR 0 1
52739: PUSH
52740: LD_INT 104
52742: EQUAL
52743: IFFALSE 52749
// MC_TurretWeapon ( ) ;
52745: CALL 60761 0 0
// if event = 105 then
52749: LD_VAR 0 1
52753: PUSH
52754: LD_INT 105
52756: EQUAL
52757: IFFALSE 52763
// MC_BuildUpgrade ( ) ;
52759: CALL 60312 0 0
// if event = 106 then
52763: LD_VAR 0 1
52767: PUSH
52768: LD_INT 106
52770: EQUAL
52771: IFFALSE 52777
// MC_PlantMines ( ) ;
52773: CALL 61191 0 0
// if event = 107 then
52777: LD_VAR 0 1
52781: PUSH
52782: LD_INT 107
52784: EQUAL
52785: IFFALSE 52791
// MC_CollectCrates ( ) ;
52787: CALL 61989 0 0
// if event = 108 then
52791: LD_VAR 0 1
52795: PUSH
52796: LD_INT 108
52798: EQUAL
52799: IFFALSE 52805
// MC_LinkRemoteControl ( ) ;
52801: CALL 63765 0 0
// if event = 109 then
52805: LD_VAR 0 1
52809: PUSH
52810: LD_INT 109
52812: EQUAL
52813: IFFALSE 52819
// MC_ProduceVehicle ( ) ;
52815: CALL 63946 0 0
// if event = 110 then
52819: LD_VAR 0 1
52823: PUSH
52824: LD_INT 110
52826: EQUAL
52827: IFFALSE 52833
// MC_SendAttack ( ) ;
52829: CALL 64412 0 0
// if event = 111 then
52833: LD_VAR 0 1
52837: PUSH
52838: LD_INT 111
52840: EQUAL
52841: IFFALSE 52847
// MC_Defend ( ) ;
52843: CALL 64520 0 0
// if event = 112 then
52847: LD_VAR 0 1
52851: PUSH
52852: LD_INT 112
52854: EQUAL
52855: IFFALSE 52861
// MC_Research ( ) ;
52857: CALL 65125 0 0
// if event = 113 then
52861: LD_VAR 0 1
52865: PUSH
52866: LD_INT 113
52868: EQUAL
52869: IFFALSE 52875
// MC_MinesTrigger ( ) ;
52871: CALL 66239 0 0
// if event = 120 then
52875: LD_VAR 0 1
52879: PUSH
52880: LD_INT 120
52882: EQUAL
52883: IFFALSE 52889
// MC_RepairVehicle ( ) ;
52885: CALL 66338 0 0
// if event = 121 then
52889: LD_VAR 0 1
52893: PUSH
52894: LD_INT 121
52896: EQUAL
52897: IFFALSE 52903
// MC_TameApe ( ) ;
52899: CALL 67068 0 0
// if event = 122 then
52903: LD_VAR 0 1
52907: PUSH
52908: LD_INT 122
52910: EQUAL
52911: IFFALSE 52917
// MC_ChangeApeClass ( ) ;
52913: CALL 67897 0 0
// if event = 123 then
52917: LD_VAR 0 1
52921: PUSH
52922: LD_INT 123
52924: EQUAL
52925: IFFALSE 52931
// MC_Bazooka ( ) ;
52927: CALL 68547 0 0
// if event = 124 then
52931: LD_VAR 0 1
52935: PUSH
52936: LD_INT 124
52938: EQUAL
52939: IFFALSE 52945
// MC_TeleportExit ( ) ;
52941: CALL 68745 0 0
// if event = 125 then
52945: LD_VAR 0 1
52949: PUSH
52950: LD_INT 125
52952: EQUAL
52953: IFFALSE 52959
// MC_Deposits ( ) ;
52955: CALL 69392 0 0
// if event = 126 then
52959: LD_VAR 0 1
52963: PUSH
52964: LD_INT 126
52966: EQUAL
52967: IFFALSE 52973
// MC_RemoteDriver ( ) ;
52969: CALL 70017 0 0
// if event = 200 then
52973: LD_VAR 0 1
52977: PUSH
52978: LD_INT 200
52980: EQUAL
52981: IFFALSE 52987
// MC_Idle ( ) ;
52983: CALL 71966 0 0
// end ;
52987: PPOPN 1
52989: END
// export function MC_Reset ( base , tag ) ; var i ; begin
52990: LD_INT 0
52992: PPUSH
52993: PPUSH
// if not mc_bases [ base ] or not tag then
52994: LD_EXP 63
52998: PUSH
52999: LD_VAR 0 1
53003: ARRAY
53004: NOT
53005: PUSH
53006: LD_VAR 0 2
53010: NOT
53011: OR
53012: IFFALSE 53016
// exit ;
53014: GO 53080
// for i in mc_bases [ base ] union mc_ape [ base ] do
53016: LD_ADDR_VAR 0 4
53020: PUSH
53021: LD_EXP 63
53025: PUSH
53026: LD_VAR 0 1
53030: ARRAY
53031: PUSH
53032: LD_EXP 92
53036: PUSH
53037: LD_VAR 0 1
53041: ARRAY
53042: UNION
53043: PUSH
53044: FOR_IN
53045: IFFALSE 53078
// if GetTag ( i ) = tag then
53047: LD_VAR 0 4
53051: PPUSH
53052: CALL_OW 110
53056: PUSH
53057: LD_VAR 0 2
53061: EQUAL
53062: IFFALSE 53076
// SetTag ( i , 0 ) ;
53064: LD_VAR 0 4
53068: PPUSH
53069: LD_INT 0
53071: PPUSH
53072: CALL_OW 109
53076: GO 53044
53078: POP
53079: POP
// end ;
53080: LD_VAR 0 3
53084: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
53085: LD_INT 0
53087: PPUSH
53088: PPUSH
53089: PPUSH
53090: PPUSH
53091: PPUSH
53092: PPUSH
53093: PPUSH
53094: PPUSH
// if not mc_bases then
53095: LD_EXP 63
53099: NOT
53100: IFFALSE 53104
// exit ;
53102: GO 53562
// for i = 1 to mc_bases do
53104: LD_ADDR_VAR 0 2
53108: PUSH
53109: DOUBLE
53110: LD_INT 1
53112: DEC
53113: ST_TO_ADDR
53114: LD_EXP 63
53118: PUSH
53119: FOR_TO
53120: IFFALSE 53560
// begin tmp := MC_ClassCheckReq ( i ) ;
53122: LD_ADDR_VAR 0 4
53126: PUSH
53127: LD_VAR 0 2
53131: PPUSH
53132: CALL 53567 0 1
53136: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
53137: LD_ADDR_EXP 104
53141: PUSH
53142: LD_EXP 104
53146: PPUSH
53147: LD_VAR 0 2
53151: PPUSH
53152: LD_VAR 0 4
53156: PPUSH
53157: CALL_OW 1
53161: ST_TO_ADDR
// if not tmp then
53162: LD_VAR 0 4
53166: NOT
53167: IFFALSE 53171
// continue ;
53169: GO 53119
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
53171: LD_ADDR_VAR 0 6
53175: PUSH
53176: LD_EXP 63
53180: PUSH
53181: LD_VAR 0 2
53185: ARRAY
53186: PPUSH
53187: LD_INT 2
53189: PUSH
53190: LD_INT 30
53192: PUSH
53193: LD_INT 4
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 30
53202: PUSH
53203: LD_INT 5
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: LIST
53214: PPUSH
53215: CALL_OW 72
53219: PUSH
53220: LD_EXP 63
53224: PUSH
53225: LD_VAR 0 2
53229: ARRAY
53230: PPUSH
53231: LD_INT 2
53233: PUSH
53234: LD_INT 30
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 30
53246: PUSH
53247: LD_INT 1
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: LIST
53258: PPUSH
53259: CALL_OW 72
53263: PUSH
53264: LD_EXP 63
53268: PUSH
53269: LD_VAR 0 2
53273: ARRAY
53274: PPUSH
53275: LD_INT 30
53277: PUSH
53278: LD_INT 3
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PPUSH
53285: CALL_OW 72
53289: PUSH
53290: LD_EXP 63
53294: PUSH
53295: LD_VAR 0 2
53299: ARRAY
53300: PPUSH
53301: LD_INT 2
53303: PUSH
53304: LD_INT 30
53306: PUSH
53307: LD_INT 6
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 30
53316: PUSH
53317: LD_INT 7
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 30
53326: PUSH
53327: LD_INT 8
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: PPUSH
53340: CALL_OW 72
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: ST_TO_ADDR
// for j = 1 to 4 do
53351: LD_ADDR_VAR 0 3
53355: PUSH
53356: DOUBLE
53357: LD_INT 1
53359: DEC
53360: ST_TO_ADDR
53361: LD_INT 4
53363: PUSH
53364: FOR_TO
53365: IFFALSE 53556
// begin if not tmp [ j ] then
53367: LD_VAR 0 4
53371: PUSH
53372: LD_VAR 0 3
53376: ARRAY
53377: NOT
53378: IFFALSE 53382
// continue ;
53380: GO 53364
// for p in tmp [ j ] do
53382: LD_ADDR_VAR 0 5
53386: PUSH
53387: LD_VAR 0 4
53391: PUSH
53392: LD_VAR 0 3
53396: ARRAY
53397: PUSH
53398: FOR_IN
53399: IFFALSE 53552
// begin if not b [ j ] then
53401: LD_VAR 0 6
53405: PUSH
53406: LD_VAR 0 3
53410: ARRAY
53411: NOT
53412: IFFALSE 53416
// break ;
53414: GO 53552
// e := 0 ;
53416: LD_ADDR_VAR 0 7
53420: PUSH
53421: LD_INT 0
53423: ST_TO_ADDR
// for k in b [ j ] do
53424: LD_ADDR_VAR 0 8
53428: PUSH
53429: LD_VAR 0 6
53433: PUSH
53434: LD_VAR 0 3
53438: ARRAY
53439: PUSH
53440: FOR_IN
53441: IFFALSE 53468
// if IsNotFull ( k ) then
53443: LD_VAR 0 8
53447: PPUSH
53448: CALL 14668 0 1
53452: IFFALSE 53466
// begin e := k ;
53454: LD_ADDR_VAR 0 7
53458: PUSH
53459: LD_VAR 0 8
53463: ST_TO_ADDR
// break ;
53464: GO 53468
// end ;
53466: GO 53440
53468: POP
53469: POP
// if e and not UnitGoingToBuilding ( p , e ) then
53470: LD_VAR 0 7
53474: PUSH
53475: LD_VAR 0 5
53479: PPUSH
53480: LD_VAR 0 7
53484: PPUSH
53485: CALL 47088 0 2
53489: NOT
53490: AND
53491: IFFALSE 53550
// begin if IsInUnit ( p ) then
53493: LD_VAR 0 5
53497: PPUSH
53498: CALL_OW 310
53502: IFFALSE 53513
// ComExitBuilding ( p ) ;
53504: LD_VAR 0 5
53508: PPUSH
53509: CALL_OW 122
// ComEnterUnit ( p , e ) ;
53513: LD_VAR 0 5
53517: PPUSH
53518: LD_VAR 0 7
53522: PPUSH
53523: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
53527: LD_VAR 0 5
53531: PPUSH
53532: LD_VAR 0 3
53536: PPUSH
53537: CALL_OW 183
// AddComExitBuilding ( p ) ;
53541: LD_VAR 0 5
53545: PPUSH
53546: CALL_OW 182
// end ; end ;
53550: GO 53398
53552: POP
53553: POP
// end ;
53554: GO 53364
53556: POP
53557: POP
// end ;
53558: GO 53119
53560: POP
53561: POP
// end ;
53562: LD_VAR 0 1
53566: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
53567: LD_INT 0
53569: PPUSH
53570: PPUSH
53571: PPUSH
53572: PPUSH
53573: PPUSH
53574: PPUSH
53575: PPUSH
53576: PPUSH
53577: PPUSH
53578: PPUSH
53579: PPUSH
53580: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
53581: LD_VAR 0 1
53585: NOT
53586: PUSH
53587: LD_EXP 63
53591: PUSH
53592: LD_VAR 0 1
53596: ARRAY
53597: NOT
53598: OR
53599: PUSH
53600: LD_EXP 63
53604: PUSH
53605: LD_VAR 0 1
53609: ARRAY
53610: PPUSH
53611: LD_INT 2
53613: PUSH
53614: LD_INT 30
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 30
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: LIST
53638: PPUSH
53639: CALL_OW 72
53643: NOT
53644: OR
53645: IFFALSE 53649
// exit ;
53647: GO 57152
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
53649: LD_ADDR_VAR 0 4
53653: PUSH
53654: LD_EXP 63
53658: PUSH
53659: LD_VAR 0 1
53663: ARRAY
53664: PPUSH
53665: LD_INT 2
53667: PUSH
53668: LD_INT 25
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 25
53680: PUSH
53681: LD_INT 2
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 25
53690: PUSH
53691: LD_INT 3
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 25
53700: PUSH
53701: LD_INT 4
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 25
53710: PUSH
53711: LD_INT 5
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 25
53720: PUSH
53721: LD_INT 8
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 25
53730: PUSH
53731: LD_INT 9
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: PPUSH
53748: CALL_OW 72
53752: ST_TO_ADDR
// if not tmp then
53753: LD_VAR 0 4
53757: NOT
53758: IFFALSE 53762
// exit ;
53760: GO 57152
// for i in tmp do
53762: LD_ADDR_VAR 0 3
53766: PUSH
53767: LD_VAR 0 4
53771: PUSH
53772: FOR_IN
53773: IFFALSE 53804
// if GetTag ( i ) then
53775: LD_VAR 0 3
53779: PPUSH
53780: CALL_OW 110
53784: IFFALSE 53802
// tmp := tmp diff i ;
53786: LD_ADDR_VAR 0 4
53790: PUSH
53791: LD_VAR 0 4
53795: PUSH
53796: LD_VAR 0 3
53800: DIFF
53801: ST_TO_ADDR
53802: GO 53772
53804: POP
53805: POP
// if not tmp then
53806: LD_VAR 0 4
53810: NOT
53811: IFFALSE 53815
// exit ;
53813: GO 57152
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
53815: LD_ADDR_VAR 0 5
53819: PUSH
53820: LD_EXP 63
53824: PUSH
53825: LD_VAR 0 1
53829: ARRAY
53830: PPUSH
53831: LD_INT 2
53833: PUSH
53834: LD_INT 25
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 25
53846: PUSH
53847: LD_INT 5
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 25
53856: PUSH
53857: LD_INT 8
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 25
53866: PUSH
53867: LD_INT 9
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: PPUSH
53881: CALL_OW 72
53885: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
53886: LD_ADDR_VAR 0 6
53890: PUSH
53891: LD_EXP 63
53895: PUSH
53896: LD_VAR 0 1
53900: ARRAY
53901: PPUSH
53902: LD_INT 25
53904: PUSH
53905: LD_INT 2
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PPUSH
53912: CALL_OW 72
53916: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
53917: LD_ADDR_VAR 0 7
53921: PUSH
53922: LD_EXP 63
53926: PUSH
53927: LD_VAR 0 1
53931: ARRAY
53932: PPUSH
53933: LD_INT 25
53935: PUSH
53936: LD_INT 3
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PPUSH
53943: CALL_OW 72
53947: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
53948: LD_ADDR_VAR 0 8
53952: PUSH
53953: LD_EXP 63
53957: PUSH
53958: LD_VAR 0 1
53962: ARRAY
53963: PPUSH
53964: LD_INT 25
53966: PUSH
53967: LD_INT 4
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 24
53976: PUSH
53977: LD_INT 251
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PPUSH
53988: CALL_OW 72
53992: ST_TO_ADDR
// if mc_scan [ base ] then
53993: LD_EXP 86
53997: PUSH
53998: LD_VAR 0 1
54002: ARRAY
54003: IFFALSE 54464
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
54005: LD_ADDR_EXP 105
54009: PUSH
54010: LD_EXP 105
54014: PPUSH
54015: LD_VAR 0 1
54019: PPUSH
54020: LD_INT 4
54022: PPUSH
54023: CALL_OW 1
54027: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
54028: LD_ADDR_VAR 0 12
54032: PUSH
54033: LD_EXP 63
54037: PUSH
54038: LD_VAR 0 1
54042: ARRAY
54043: PPUSH
54044: LD_INT 2
54046: PUSH
54047: LD_INT 30
54049: PUSH
54050: LD_INT 4
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 30
54059: PUSH
54060: LD_INT 5
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: LIST
54071: PPUSH
54072: CALL_OW 72
54076: ST_TO_ADDR
// if not b then
54077: LD_VAR 0 12
54081: NOT
54082: IFFALSE 54086
// exit ;
54084: GO 57152
// p := [ ] ;
54086: LD_ADDR_VAR 0 11
54090: PUSH
54091: EMPTY
54092: ST_TO_ADDR
// if sci >= 2 then
54093: LD_VAR 0 8
54097: PUSH
54098: LD_INT 2
54100: GREATEREQUAL
54101: IFFALSE 54132
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
54103: LD_ADDR_VAR 0 8
54107: PUSH
54108: LD_VAR 0 8
54112: PUSH
54113: LD_INT 1
54115: ARRAY
54116: PUSH
54117: LD_VAR 0 8
54121: PUSH
54122: LD_INT 2
54124: ARRAY
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: ST_TO_ADDR
54130: GO 54193
// if sci = 1 then
54132: LD_VAR 0 8
54136: PUSH
54137: LD_INT 1
54139: EQUAL
54140: IFFALSE 54161
// sci := [ sci [ 1 ] ] else
54142: LD_ADDR_VAR 0 8
54146: PUSH
54147: LD_VAR 0 8
54151: PUSH
54152: LD_INT 1
54154: ARRAY
54155: PUSH
54156: EMPTY
54157: LIST
54158: ST_TO_ADDR
54159: GO 54193
// if sci = 0 then
54161: LD_VAR 0 8
54165: PUSH
54166: LD_INT 0
54168: EQUAL
54169: IFFALSE 54193
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
54171: LD_ADDR_VAR 0 11
54175: PUSH
54176: LD_VAR 0 4
54180: PPUSH
54181: LD_INT 4
54183: PPUSH
54184: CALL 46951 0 2
54188: PUSH
54189: LD_INT 1
54191: ARRAY
54192: ST_TO_ADDR
// if eng > 4 then
54193: LD_VAR 0 6
54197: PUSH
54198: LD_INT 4
54200: GREATER
54201: IFFALSE 54247
// for i = eng downto 4 do
54203: LD_ADDR_VAR 0 3
54207: PUSH
54208: DOUBLE
54209: LD_VAR 0 6
54213: INC
54214: ST_TO_ADDR
54215: LD_INT 4
54217: PUSH
54218: FOR_DOWNTO
54219: IFFALSE 54245
// eng := eng diff eng [ i ] ;
54221: LD_ADDR_VAR 0 6
54225: PUSH
54226: LD_VAR 0 6
54230: PUSH
54231: LD_VAR 0 6
54235: PUSH
54236: LD_VAR 0 3
54240: ARRAY
54241: DIFF
54242: ST_TO_ADDR
54243: GO 54218
54245: POP
54246: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
54247: LD_ADDR_VAR 0 4
54251: PUSH
54252: LD_VAR 0 4
54256: PUSH
54257: LD_VAR 0 5
54261: PUSH
54262: LD_VAR 0 6
54266: UNION
54267: PUSH
54268: LD_VAR 0 7
54272: UNION
54273: PUSH
54274: LD_VAR 0 8
54278: UNION
54279: DIFF
54280: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
54281: LD_ADDR_VAR 0 13
54285: PUSH
54286: LD_EXP 63
54290: PUSH
54291: LD_VAR 0 1
54295: ARRAY
54296: PPUSH
54297: LD_INT 2
54299: PUSH
54300: LD_INT 30
54302: PUSH
54303: LD_INT 32
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 30
54312: PUSH
54313: LD_INT 31
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: LIST
54324: PPUSH
54325: CALL_OW 72
54329: PUSH
54330: LD_EXP 63
54334: PUSH
54335: LD_VAR 0 1
54339: ARRAY
54340: PPUSH
54341: LD_INT 2
54343: PUSH
54344: LD_INT 30
54346: PUSH
54347: LD_INT 4
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 30
54356: PUSH
54357: LD_INT 5
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: LIST
54368: PPUSH
54369: CALL_OW 72
54373: PUSH
54374: LD_INT 6
54376: MUL
54377: PLUS
54378: ST_TO_ADDR
// if bcount < tmp then
54379: LD_VAR 0 13
54383: PUSH
54384: LD_VAR 0 4
54388: LESS
54389: IFFALSE 54435
// for i = tmp downto bcount do
54391: LD_ADDR_VAR 0 3
54395: PUSH
54396: DOUBLE
54397: LD_VAR 0 4
54401: INC
54402: ST_TO_ADDR
54403: LD_VAR 0 13
54407: PUSH
54408: FOR_DOWNTO
54409: IFFALSE 54433
// tmp := Delete ( tmp , tmp ) ;
54411: LD_ADDR_VAR 0 4
54415: PUSH
54416: LD_VAR 0 4
54420: PPUSH
54421: LD_VAR 0 4
54425: PPUSH
54426: CALL_OW 3
54430: ST_TO_ADDR
54431: GO 54408
54433: POP
54434: POP
// result := [ tmp , 0 , 0 , p ] ;
54435: LD_ADDR_VAR 0 2
54439: PUSH
54440: LD_VAR 0 4
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: LD_VAR 0 11
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: ST_TO_ADDR
// exit ;
54462: GO 57152
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
54464: LD_EXP 63
54468: PUSH
54469: LD_VAR 0 1
54473: ARRAY
54474: PPUSH
54475: LD_INT 2
54477: PUSH
54478: LD_INT 30
54480: PUSH
54481: LD_INT 6
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 30
54490: PUSH
54491: LD_INT 7
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 30
54500: PUSH
54501: LD_INT 8
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: PPUSH
54514: CALL_OW 72
54518: NOT
54519: PUSH
54520: LD_EXP 63
54524: PUSH
54525: LD_VAR 0 1
54529: ARRAY
54530: PPUSH
54531: LD_INT 30
54533: PUSH
54534: LD_INT 3
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PPUSH
54541: CALL_OW 72
54545: NOT
54546: AND
54547: IFFALSE 54619
// begin if eng = tmp then
54549: LD_VAR 0 6
54553: PUSH
54554: LD_VAR 0 4
54558: EQUAL
54559: IFFALSE 54563
// exit ;
54561: GO 57152
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
54563: LD_ADDR_EXP 105
54567: PUSH
54568: LD_EXP 105
54572: PPUSH
54573: LD_VAR 0 1
54577: PPUSH
54578: LD_INT 1
54580: PPUSH
54581: CALL_OW 1
54585: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
54586: LD_ADDR_VAR 0 2
54590: PUSH
54591: LD_INT 0
54593: PUSH
54594: LD_VAR 0 4
54598: PUSH
54599: LD_VAR 0 6
54603: DIFF
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: ST_TO_ADDR
// exit ;
54617: GO 57152
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
54619: LD_EXP 90
54623: PUSH
54624: LD_EXP 89
54628: PUSH
54629: LD_VAR 0 1
54633: ARRAY
54634: ARRAY
54635: PUSH
54636: LD_EXP 63
54640: PUSH
54641: LD_VAR 0 1
54645: ARRAY
54646: PPUSH
54647: LD_INT 2
54649: PUSH
54650: LD_INT 30
54652: PUSH
54653: LD_INT 6
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 30
54662: PUSH
54663: LD_INT 7
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 30
54672: PUSH
54673: LD_INT 8
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: PPUSH
54686: CALL_OW 72
54690: AND
54691: PUSH
54692: LD_EXP 63
54696: PUSH
54697: LD_VAR 0 1
54701: ARRAY
54702: PPUSH
54703: LD_INT 30
54705: PUSH
54706: LD_INT 3
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PPUSH
54713: CALL_OW 72
54717: NOT
54718: AND
54719: IFFALSE 54933
// begin if sci >= 6 then
54721: LD_VAR 0 8
54725: PUSH
54726: LD_INT 6
54728: GREATEREQUAL
54729: IFFALSE 54733
// exit ;
54731: GO 57152
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
54733: LD_ADDR_EXP 105
54737: PUSH
54738: LD_EXP 105
54742: PPUSH
54743: LD_VAR 0 1
54747: PPUSH
54748: LD_INT 2
54750: PPUSH
54751: CALL_OW 1
54755: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
54756: LD_ADDR_VAR 0 9
54760: PUSH
54761: LD_VAR 0 4
54765: PUSH
54766: LD_VAR 0 8
54770: DIFF
54771: PPUSH
54772: LD_INT 4
54774: PPUSH
54775: CALL 46951 0 2
54779: ST_TO_ADDR
// p := [ ] ;
54780: LD_ADDR_VAR 0 11
54784: PUSH
54785: EMPTY
54786: ST_TO_ADDR
// if sci < 6 and sort > 6 then
54787: LD_VAR 0 8
54791: PUSH
54792: LD_INT 6
54794: LESS
54795: PUSH
54796: LD_VAR 0 9
54800: PUSH
54801: LD_INT 6
54803: GREATER
54804: AND
54805: IFFALSE 54886
// begin for i = 1 to 6 - sci do
54807: LD_ADDR_VAR 0 3
54811: PUSH
54812: DOUBLE
54813: LD_INT 1
54815: DEC
54816: ST_TO_ADDR
54817: LD_INT 6
54819: PUSH
54820: LD_VAR 0 8
54824: MINUS
54825: PUSH
54826: FOR_TO
54827: IFFALSE 54882
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
54829: LD_ADDR_VAR 0 11
54833: PUSH
54834: LD_VAR 0 11
54838: PPUSH
54839: LD_VAR 0 11
54843: PUSH
54844: LD_INT 1
54846: PLUS
54847: PPUSH
54848: LD_VAR 0 9
54852: PUSH
54853: LD_INT 1
54855: ARRAY
54856: PPUSH
54857: CALL_OW 2
54861: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
54862: LD_ADDR_VAR 0 9
54866: PUSH
54867: LD_VAR 0 9
54871: PPUSH
54872: LD_INT 1
54874: PPUSH
54875: CALL_OW 3
54879: ST_TO_ADDR
// end ;
54880: GO 54826
54882: POP
54883: POP
// end else
54884: GO 54906
// if sort then
54886: LD_VAR 0 9
54890: IFFALSE 54906
// p := sort [ 1 ] ;
54892: LD_ADDR_VAR 0 11
54896: PUSH
54897: LD_VAR 0 9
54901: PUSH
54902: LD_INT 1
54904: ARRAY
54905: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
54906: LD_ADDR_VAR 0 2
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: LD_VAR 0 11
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: ST_TO_ADDR
// exit ;
54931: GO 57152
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
54933: LD_EXP 90
54937: PUSH
54938: LD_EXP 89
54942: PUSH
54943: LD_VAR 0 1
54947: ARRAY
54948: ARRAY
54949: PUSH
54950: LD_EXP 63
54954: PUSH
54955: LD_VAR 0 1
54959: ARRAY
54960: PPUSH
54961: LD_INT 2
54963: PUSH
54964: LD_INT 30
54966: PUSH
54967: LD_INT 6
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 30
54976: PUSH
54977: LD_INT 7
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 30
54986: PUSH
54987: LD_INT 8
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: PPUSH
55000: CALL_OW 72
55004: AND
55005: PUSH
55006: LD_EXP 63
55010: PUSH
55011: LD_VAR 0 1
55015: ARRAY
55016: PPUSH
55017: LD_INT 30
55019: PUSH
55020: LD_INT 3
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PPUSH
55027: CALL_OW 72
55031: AND
55032: IFFALSE 55766
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
55034: LD_ADDR_EXP 105
55038: PUSH
55039: LD_EXP 105
55043: PPUSH
55044: LD_VAR 0 1
55048: PPUSH
55049: LD_INT 3
55051: PPUSH
55052: CALL_OW 1
55056: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
55057: LD_ADDR_VAR 0 2
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: LD_INT 0
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: ST_TO_ADDR
// if not eng then
55080: LD_VAR 0 6
55084: NOT
55085: IFFALSE 55148
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
55087: LD_ADDR_VAR 0 11
55091: PUSH
55092: LD_VAR 0 4
55096: PPUSH
55097: LD_INT 2
55099: PPUSH
55100: CALL 46951 0 2
55104: PUSH
55105: LD_INT 1
55107: ARRAY
55108: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
55109: LD_ADDR_VAR 0 2
55113: PUSH
55114: LD_VAR 0 2
55118: PPUSH
55119: LD_INT 2
55121: PPUSH
55122: LD_VAR 0 11
55126: PPUSH
55127: CALL_OW 1
55131: ST_TO_ADDR
// tmp := tmp diff p ;
55132: LD_ADDR_VAR 0 4
55136: PUSH
55137: LD_VAR 0 4
55141: PUSH
55142: LD_VAR 0 11
55146: DIFF
55147: ST_TO_ADDR
// end ; if tmp and sci < 6 then
55148: LD_VAR 0 4
55152: PUSH
55153: LD_VAR 0 8
55157: PUSH
55158: LD_INT 6
55160: LESS
55161: AND
55162: IFFALSE 55350
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
55164: LD_ADDR_VAR 0 9
55168: PUSH
55169: LD_VAR 0 4
55173: PUSH
55174: LD_VAR 0 8
55178: PUSH
55179: LD_VAR 0 7
55183: UNION
55184: DIFF
55185: PPUSH
55186: LD_INT 4
55188: PPUSH
55189: CALL 46951 0 2
55193: ST_TO_ADDR
// p := [ ] ;
55194: LD_ADDR_VAR 0 11
55198: PUSH
55199: EMPTY
55200: ST_TO_ADDR
// if sort then
55201: LD_VAR 0 9
55205: IFFALSE 55321
// for i = 1 to 6 - sci do
55207: LD_ADDR_VAR 0 3
55211: PUSH
55212: DOUBLE
55213: LD_INT 1
55215: DEC
55216: ST_TO_ADDR
55217: LD_INT 6
55219: PUSH
55220: LD_VAR 0 8
55224: MINUS
55225: PUSH
55226: FOR_TO
55227: IFFALSE 55319
// begin if i = sort then
55229: LD_VAR 0 3
55233: PUSH
55234: LD_VAR 0 9
55238: EQUAL
55239: IFFALSE 55243
// break ;
55241: GO 55319
// if GetClass ( i ) = 4 then
55243: LD_VAR 0 3
55247: PPUSH
55248: CALL_OW 257
55252: PUSH
55253: LD_INT 4
55255: EQUAL
55256: IFFALSE 55260
// continue ;
55258: GO 55226
// p := Insert ( p , p + 1 , sort [ i ] ) ;
55260: LD_ADDR_VAR 0 11
55264: PUSH
55265: LD_VAR 0 11
55269: PPUSH
55270: LD_VAR 0 11
55274: PUSH
55275: LD_INT 1
55277: PLUS
55278: PPUSH
55279: LD_VAR 0 9
55283: PUSH
55284: LD_VAR 0 3
55288: ARRAY
55289: PPUSH
55290: CALL_OW 2
55294: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
55295: LD_ADDR_VAR 0 4
55299: PUSH
55300: LD_VAR 0 4
55304: PUSH
55305: LD_VAR 0 9
55309: PUSH
55310: LD_VAR 0 3
55314: ARRAY
55315: DIFF
55316: ST_TO_ADDR
// end ;
55317: GO 55226
55319: POP
55320: POP
// if p then
55321: LD_VAR 0 11
55325: IFFALSE 55350
// result := Replace ( result , 4 , p ) ;
55327: LD_ADDR_VAR 0 2
55331: PUSH
55332: LD_VAR 0 2
55336: PPUSH
55337: LD_INT 4
55339: PPUSH
55340: LD_VAR 0 11
55344: PPUSH
55345: CALL_OW 1
55349: ST_TO_ADDR
// end ; if tmp and mech < 6 then
55350: LD_VAR 0 4
55354: PUSH
55355: LD_VAR 0 7
55359: PUSH
55360: LD_INT 6
55362: LESS
55363: AND
55364: IFFALSE 55552
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
55366: LD_ADDR_VAR 0 9
55370: PUSH
55371: LD_VAR 0 4
55375: PUSH
55376: LD_VAR 0 8
55380: PUSH
55381: LD_VAR 0 7
55385: UNION
55386: DIFF
55387: PPUSH
55388: LD_INT 3
55390: PPUSH
55391: CALL 46951 0 2
55395: ST_TO_ADDR
// p := [ ] ;
55396: LD_ADDR_VAR 0 11
55400: PUSH
55401: EMPTY
55402: ST_TO_ADDR
// if sort then
55403: LD_VAR 0 9
55407: IFFALSE 55523
// for i = 1 to 6 - mech do
55409: LD_ADDR_VAR 0 3
55413: PUSH
55414: DOUBLE
55415: LD_INT 1
55417: DEC
55418: ST_TO_ADDR
55419: LD_INT 6
55421: PUSH
55422: LD_VAR 0 7
55426: MINUS
55427: PUSH
55428: FOR_TO
55429: IFFALSE 55521
// begin if i = sort then
55431: LD_VAR 0 3
55435: PUSH
55436: LD_VAR 0 9
55440: EQUAL
55441: IFFALSE 55445
// break ;
55443: GO 55521
// if GetClass ( i ) = 3 then
55445: LD_VAR 0 3
55449: PPUSH
55450: CALL_OW 257
55454: PUSH
55455: LD_INT 3
55457: EQUAL
55458: IFFALSE 55462
// continue ;
55460: GO 55428
// p := Insert ( p , p + 1 , sort [ i ] ) ;
55462: LD_ADDR_VAR 0 11
55466: PUSH
55467: LD_VAR 0 11
55471: PPUSH
55472: LD_VAR 0 11
55476: PUSH
55477: LD_INT 1
55479: PLUS
55480: PPUSH
55481: LD_VAR 0 9
55485: PUSH
55486: LD_VAR 0 3
55490: ARRAY
55491: PPUSH
55492: CALL_OW 2
55496: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
55497: LD_ADDR_VAR 0 4
55501: PUSH
55502: LD_VAR 0 4
55506: PUSH
55507: LD_VAR 0 9
55511: PUSH
55512: LD_VAR 0 3
55516: ARRAY
55517: DIFF
55518: ST_TO_ADDR
// end ;
55519: GO 55428
55521: POP
55522: POP
// if p then
55523: LD_VAR 0 11
55527: IFFALSE 55552
// result := Replace ( result , 3 , p ) ;
55529: LD_ADDR_VAR 0 2
55533: PUSH
55534: LD_VAR 0 2
55538: PPUSH
55539: LD_INT 3
55541: PPUSH
55542: LD_VAR 0 11
55546: PPUSH
55547: CALL_OW 1
55551: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
55552: LD_VAR 0 4
55556: PUSH
55557: LD_INT 6
55559: GREATER
55560: PUSH
55561: LD_VAR 0 6
55565: PUSH
55566: LD_INT 6
55568: LESS
55569: AND
55570: IFFALSE 55764
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
55572: LD_ADDR_VAR 0 9
55576: PUSH
55577: LD_VAR 0 4
55581: PUSH
55582: LD_VAR 0 8
55586: PUSH
55587: LD_VAR 0 7
55591: UNION
55592: PUSH
55593: LD_VAR 0 6
55597: UNION
55598: DIFF
55599: PPUSH
55600: LD_INT 2
55602: PPUSH
55603: CALL 46951 0 2
55607: ST_TO_ADDR
// p := [ ] ;
55608: LD_ADDR_VAR 0 11
55612: PUSH
55613: EMPTY
55614: ST_TO_ADDR
// if sort then
55615: LD_VAR 0 9
55619: IFFALSE 55735
// for i = 1 to 6 - eng do
55621: LD_ADDR_VAR 0 3
55625: PUSH
55626: DOUBLE
55627: LD_INT 1
55629: DEC
55630: ST_TO_ADDR
55631: LD_INT 6
55633: PUSH
55634: LD_VAR 0 6
55638: MINUS
55639: PUSH
55640: FOR_TO
55641: IFFALSE 55733
// begin if i = sort then
55643: LD_VAR 0 3
55647: PUSH
55648: LD_VAR 0 9
55652: EQUAL
55653: IFFALSE 55657
// break ;
55655: GO 55733
// if GetClass ( i ) = 2 then
55657: LD_VAR 0 3
55661: PPUSH
55662: CALL_OW 257
55666: PUSH
55667: LD_INT 2
55669: EQUAL
55670: IFFALSE 55674
// continue ;
55672: GO 55640
// p := Insert ( p , p + 1 , sort [ i ] ) ;
55674: LD_ADDR_VAR 0 11
55678: PUSH
55679: LD_VAR 0 11
55683: PPUSH
55684: LD_VAR 0 11
55688: PUSH
55689: LD_INT 1
55691: PLUS
55692: PPUSH
55693: LD_VAR 0 9
55697: PUSH
55698: LD_VAR 0 3
55702: ARRAY
55703: PPUSH
55704: CALL_OW 2
55708: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
55709: LD_ADDR_VAR 0 4
55713: PUSH
55714: LD_VAR 0 4
55718: PUSH
55719: LD_VAR 0 9
55723: PUSH
55724: LD_VAR 0 3
55728: ARRAY
55729: DIFF
55730: ST_TO_ADDR
// end ;
55731: GO 55640
55733: POP
55734: POP
// if p then
55735: LD_VAR 0 11
55739: IFFALSE 55764
// result := Replace ( result , 2 , p ) ;
55741: LD_ADDR_VAR 0 2
55745: PUSH
55746: LD_VAR 0 2
55750: PPUSH
55751: LD_INT 2
55753: PPUSH
55754: LD_VAR 0 11
55758: PPUSH
55759: CALL_OW 1
55763: ST_TO_ADDR
// end ; exit ;
55764: GO 57152
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
55766: LD_EXP 90
55770: PUSH
55771: LD_EXP 89
55775: PUSH
55776: LD_VAR 0 1
55780: ARRAY
55781: ARRAY
55782: NOT
55783: PUSH
55784: LD_EXP 63
55788: PUSH
55789: LD_VAR 0 1
55793: ARRAY
55794: PPUSH
55795: LD_INT 30
55797: PUSH
55798: LD_INT 3
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PPUSH
55805: CALL_OW 72
55809: AND
55810: PUSH
55811: LD_EXP 68
55815: PUSH
55816: LD_VAR 0 1
55820: ARRAY
55821: AND
55822: IFFALSE 56430
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
55824: LD_ADDR_EXP 105
55828: PUSH
55829: LD_EXP 105
55833: PPUSH
55834: LD_VAR 0 1
55838: PPUSH
55839: LD_INT 5
55841: PPUSH
55842: CALL_OW 1
55846: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
55847: LD_ADDR_VAR 0 2
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: ST_TO_ADDR
// if sci > 1 then
55870: LD_VAR 0 8
55874: PUSH
55875: LD_INT 1
55877: GREATER
55878: IFFALSE 55906
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
55880: LD_ADDR_VAR 0 4
55884: PUSH
55885: LD_VAR 0 4
55889: PUSH
55890: LD_VAR 0 8
55894: PUSH
55895: LD_VAR 0 8
55899: PUSH
55900: LD_INT 1
55902: ARRAY
55903: DIFF
55904: DIFF
55905: ST_TO_ADDR
// if tmp and not sci then
55906: LD_VAR 0 4
55910: PUSH
55911: LD_VAR 0 8
55915: NOT
55916: AND
55917: IFFALSE 55986
// begin sort := SortBySkill ( tmp , 4 ) ;
55919: LD_ADDR_VAR 0 9
55923: PUSH
55924: LD_VAR 0 4
55928: PPUSH
55929: LD_INT 4
55931: PPUSH
55932: CALL 46951 0 2
55936: ST_TO_ADDR
// if sort then
55937: LD_VAR 0 9
55941: IFFALSE 55957
// p := sort [ 1 ] ;
55943: LD_ADDR_VAR 0 11
55947: PUSH
55948: LD_VAR 0 9
55952: PUSH
55953: LD_INT 1
55955: ARRAY
55956: ST_TO_ADDR
// if p then
55957: LD_VAR 0 11
55961: IFFALSE 55986
// result := Replace ( result , 4 , p ) ;
55963: LD_ADDR_VAR 0 2
55967: PUSH
55968: LD_VAR 0 2
55972: PPUSH
55973: LD_INT 4
55975: PPUSH
55976: LD_VAR 0 11
55980: PPUSH
55981: CALL_OW 1
55985: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
55986: LD_ADDR_VAR 0 4
55990: PUSH
55991: LD_VAR 0 4
55995: PUSH
55996: LD_VAR 0 7
56000: DIFF
56001: ST_TO_ADDR
// if tmp and mech < 6 then
56002: LD_VAR 0 4
56006: PUSH
56007: LD_VAR 0 7
56011: PUSH
56012: LD_INT 6
56014: LESS
56015: AND
56016: IFFALSE 56204
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
56018: LD_ADDR_VAR 0 9
56022: PUSH
56023: LD_VAR 0 4
56027: PUSH
56028: LD_VAR 0 8
56032: PUSH
56033: LD_VAR 0 7
56037: UNION
56038: DIFF
56039: PPUSH
56040: LD_INT 3
56042: PPUSH
56043: CALL 46951 0 2
56047: ST_TO_ADDR
// p := [ ] ;
56048: LD_ADDR_VAR 0 11
56052: PUSH
56053: EMPTY
56054: ST_TO_ADDR
// if sort then
56055: LD_VAR 0 9
56059: IFFALSE 56175
// for i = 1 to 6 - mech do
56061: LD_ADDR_VAR 0 3
56065: PUSH
56066: DOUBLE
56067: LD_INT 1
56069: DEC
56070: ST_TO_ADDR
56071: LD_INT 6
56073: PUSH
56074: LD_VAR 0 7
56078: MINUS
56079: PUSH
56080: FOR_TO
56081: IFFALSE 56173
// begin if i = sort then
56083: LD_VAR 0 3
56087: PUSH
56088: LD_VAR 0 9
56092: EQUAL
56093: IFFALSE 56097
// break ;
56095: GO 56173
// if GetClass ( i ) = 3 then
56097: LD_VAR 0 3
56101: PPUSH
56102: CALL_OW 257
56106: PUSH
56107: LD_INT 3
56109: EQUAL
56110: IFFALSE 56114
// continue ;
56112: GO 56080
// p := Insert ( p , p + 1 , sort [ i ] ) ;
56114: LD_ADDR_VAR 0 11
56118: PUSH
56119: LD_VAR 0 11
56123: PPUSH
56124: LD_VAR 0 11
56128: PUSH
56129: LD_INT 1
56131: PLUS
56132: PPUSH
56133: LD_VAR 0 9
56137: PUSH
56138: LD_VAR 0 3
56142: ARRAY
56143: PPUSH
56144: CALL_OW 2
56148: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
56149: LD_ADDR_VAR 0 4
56153: PUSH
56154: LD_VAR 0 4
56158: PUSH
56159: LD_VAR 0 9
56163: PUSH
56164: LD_VAR 0 3
56168: ARRAY
56169: DIFF
56170: ST_TO_ADDR
// end ;
56171: GO 56080
56173: POP
56174: POP
// if p then
56175: LD_VAR 0 11
56179: IFFALSE 56204
// result := Replace ( result , 3 , p ) ;
56181: LD_ADDR_VAR 0 2
56185: PUSH
56186: LD_VAR 0 2
56190: PPUSH
56191: LD_INT 3
56193: PPUSH
56194: LD_VAR 0 11
56198: PPUSH
56199: CALL_OW 1
56203: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
56204: LD_ADDR_VAR 0 4
56208: PUSH
56209: LD_VAR 0 4
56213: PUSH
56214: LD_VAR 0 6
56218: DIFF
56219: ST_TO_ADDR
// if tmp and eng < 6 then
56220: LD_VAR 0 4
56224: PUSH
56225: LD_VAR 0 6
56229: PUSH
56230: LD_INT 6
56232: LESS
56233: AND
56234: IFFALSE 56428
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
56236: LD_ADDR_VAR 0 9
56240: PUSH
56241: LD_VAR 0 4
56245: PUSH
56246: LD_VAR 0 8
56250: PUSH
56251: LD_VAR 0 7
56255: UNION
56256: PUSH
56257: LD_VAR 0 6
56261: UNION
56262: DIFF
56263: PPUSH
56264: LD_INT 2
56266: PPUSH
56267: CALL 46951 0 2
56271: ST_TO_ADDR
// p := [ ] ;
56272: LD_ADDR_VAR 0 11
56276: PUSH
56277: EMPTY
56278: ST_TO_ADDR
// if sort then
56279: LD_VAR 0 9
56283: IFFALSE 56399
// for i = 1 to 6 - eng do
56285: LD_ADDR_VAR 0 3
56289: PUSH
56290: DOUBLE
56291: LD_INT 1
56293: DEC
56294: ST_TO_ADDR
56295: LD_INT 6
56297: PUSH
56298: LD_VAR 0 6
56302: MINUS
56303: PUSH
56304: FOR_TO
56305: IFFALSE 56397
// begin if i = sort then
56307: LD_VAR 0 3
56311: PUSH
56312: LD_VAR 0 9
56316: EQUAL
56317: IFFALSE 56321
// break ;
56319: GO 56397
// if GetClass ( i ) = 2 then
56321: LD_VAR 0 3
56325: PPUSH
56326: CALL_OW 257
56330: PUSH
56331: LD_INT 2
56333: EQUAL
56334: IFFALSE 56338
// continue ;
56336: GO 56304
// p := Insert ( p , p + 1 , sort [ i ] ) ;
56338: LD_ADDR_VAR 0 11
56342: PUSH
56343: LD_VAR 0 11
56347: PPUSH
56348: LD_VAR 0 11
56352: PUSH
56353: LD_INT 1
56355: PLUS
56356: PPUSH
56357: LD_VAR 0 9
56361: PUSH
56362: LD_VAR 0 3
56366: ARRAY
56367: PPUSH
56368: CALL_OW 2
56372: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
56373: LD_ADDR_VAR 0 4
56377: PUSH
56378: LD_VAR 0 4
56382: PUSH
56383: LD_VAR 0 9
56387: PUSH
56388: LD_VAR 0 3
56392: ARRAY
56393: DIFF
56394: ST_TO_ADDR
// end ;
56395: GO 56304
56397: POP
56398: POP
// if p then
56399: LD_VAR 0 11
56403: IFFALSE 56428
// result := Replace ( result , 2 , p ) ;
56405: LD_ADDR_VAR 0 2
56409: PUSH
56410: LD_VAR 0 2
56414: PPUSH
56415: LD_INT 2
56417: PPUSH
56418: LD_VAR 0 11
56422: PPUSH
56423: CALL_OW 1
56427: ST_TO_ADDR
// end ; exit ;
56428: GO 57152
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
56430: LD_EXP 90
56434: PUSH
56435: LD_EXP 89
56439: PUSH
56440: LD_VAR 0 1
56444: ARRAY
56445: ARRAY
56446: NOT
56447: PUSH
56448: LD_EXP 63
56452: PUSH
56453: LD_VAR 0 1
56457: ARRAY
56458: PPUSH
56459: LD_INT 30
56461: PUSH
56462: LD_INT 3
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PPUSH
56469: CALL_OW 72
56473: AND
56474: PUSH
56475: LD_EXP 68
56479: PUSH
56480: LD_VAR 0 1
56484: ARRAY
56485: NOT
56486: AND
56487: IFFALSE 57152
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
56489: LD_ADDR_EXP 105
56493: PUSH
56494: LD_EXP 105
56498: PPUSH
56499: LD_VAR 0 1
56503: PPUSH
56504: LD_INT 6
56506: PPUSH
56507: CALL_OW 1
56511: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
56512: LD_ADDR_VAR 0 2
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: LD_INT 0
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: ST_TO_ADDR
// if sci >= 1 then
56535: LD_VAR 0 8
56539: PUSH
56540: LD_INT 1
56542: GREATEREQUAL
56543: IFFALSE 56565
// tmp := tmp diff sci [ 1 ] ;
56545: LD_ADDR_VAR 0 4
56549: PUSH
56550: LD_VAR 0 4
56554: PUSH
56555: LD_VAR 0 8
56559: PUSH
56560: LD_INT 1
56562: ARRAY
56563: DIFF
56564: ST_TO_ADDR
// if tmp and not sci then
56565: LD_VAR 0 4
56569: PUSH
56570: LD_VAR 0 8
56574: NOT
56575: AND
56576: IFFALSE 56645
// begin sort := SortBySkill ( tmp , 4 ) ;
56578: LD_ADDR_VAR 0 9
56582: PUSH
56583: LD_VAR 0 4
56587: PPUSH
56588: LD_INT 4
56590: PPUSH
56591: CALL 46951 0 2
56595: ST_TO_ADDR
// if sort then
56596: LD_VAR 0 9
56600: IFFALSE 56616
// p := sort [ 1 ] ;
56602: LD_ADDR_VAR 0 11
56606: PUSH
56607: LD_VAR 0 9
56611: PUSH
56612: LD_INT 1
56614: ARRAY
56615: ST_TO_ADDR
// if p then
56616: LD_VAR 0 11
56620: IFFALSE 56645
// result := Replace ( result , 4 , p ) ;
56622: LD_ADDR_VAR 0 2
56626: PUSH
56627: LD_VAR 0 2
56631: PPUSH
56632: LD_INT 4
56634: PPUSH
56635: LD_VAR 0 11
56639: PPUSH
56640: CALL_OW 1
56644: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
56645: LD_ADDR_VAR 0 4
56649: PUSH
56650: LD_VAR 0 4
56654: PUSH
56655: LD_VAR 0 7
56659: DIFF
56660: ST_TO_ADDR
// if tmp and mech < 6 then
56661: LD_VAR 0 4
56665: PUSH
56666: LD_VAR 0 7
56670: PUSH
56671: LD_INT 6
56673: LESS
56674: AND
56675: IFFALSE 56857
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
56677: LD_ADDR_VAR 0 9
56681: PUSH
56682: LD_VAR 0 4
56686: PUSH
56687: LD_VAR 0 7
56691: DIFF
56692: PPUSH
56693: LD_INT 3
56695: PPUSH
56696: CALL 46951 0 2
56700: ST_TO_ADDR
// p := [ ] ;
56701: LD_ADDR_VAR 0 11
56705: PUSH
56706: EMPTY
56707: ST_TO_ADDR
// if sort then
56708: LD_VAR 0 9
56712: IFFALSE 56828
// for i = 1 to 6 - mech do
56714: LD_ADDR_VAR 0 3
56718: PUSH
56719: DOUBLE
56720: LD_INT 1
56722: DEC
56723: ST_TO_ADDR
56724: LD_INT 6
56726: PUSH
56727: LD_VAR 0 7
56731: MINUS
56732: PUSH
56733: FOR_TO
56734: IFFALSE 56826
// begin if i = sort then
56736: LD_VAR 0 3
56740: PUSH
56741: LD_VAR 0 9
56745: EQUAL
56746: IFFALSE 56750
// break ;
56748: GO 56826
// if GetClass ( i ) = 3 then
56750: LD_VAR 0 3
56754: PPUSH
56755: CALL_OW 257
56759: PUSH
56760: LD_INT 3
56762: EQUAL
56763: IFFALSE 56767
// continue ;
56765: GO 56733
// p := Insert ( p , p + 1 , sort [ i ] ) ;
56767: LD_ADDR_VAR 0 11
56771: PUSH
56772: LD_VAR 0 11
56776: PPUSH
56777: LD_VAR 0 11
56781: PUSH
56782: LD_INT 1
56784: PLUS
56785: PPUSH
56786: LD_VAR 0 9
56790: PUSH
56791: LD_VAR 0 3
56795: ARRAY
56796: PPUSH
56797: CALL_OW 2
56801: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
56802: LD_ADDR_VAR 0 4
56806: PUSH
56807: LD_VAR 0 4
56811: PUSH
56812: LD_VAR 0 9
56816: PUSH
56817: LD_VAR 0 3
56821: ARRAY
56822: DIFF
56823: ST_TO_ADDR
// end ;
56824: GO 56733
56826: POP
56827: POP
// if p then
56828: LD_VAR 0 11
56832: IFFALSE 56857
// result := Replace ( result , 3 , p ) ;
56834: LD_ADDR_VAR 0 2
56838: PUSH
56839: LD_VAR 0 2
56843: PPUSH
56844: LD_INT 3
56846: PPUSH
56847: LD_VAR 0 11
56851: PPUSH
56852: CALL_OW 1
56856: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
56857: LD_ADDR_VAR 0 4
56861: PUSH
56862: LD_VAR 0 4
56866: PUSH
56867: LD_VAR 0 6
56871: DIFF
56872: ST_TO_ADDR
// if tmp and eng < 4 then
56873: LD_VAR 0 4
56877: PUSH
56878: LD_VAR 0 6
56882: PUSH
56883: LD_INT 4
56885: LESS
56886: AND
56887: IFFALSE 57077
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
56889: LD_ADDR_VAR 0 9
56893: PUSH
56894: LD_VAR 0 4
56898: PUSH
56899: LD_VAR 0 7
56903: PUSH
56904: LD_VAR 0 6
56908: UNION
56909: DIFF
56910: PPUSH
56911: LD_INT 2
56913: PPUSH
56914: CALL 46951 0 2
56918: ST_TO_ADDR
// p := [ ] ;
56919: LD_ADDR_VAR 0 11
56923: PUSH
56924: EMPTY
56925: ST_TO_ADDR
// if sort then
56926: LD_VAR 0 9
56930: IFFALSE 57046
// for i = 1 to 4 - eng do
56932: LD_ADDR_VAR 0 3
56936: PUSH
56937: DOUBLE
56938: LD_INT 1
56940: DEC
56941: ST_TO_ADDR
56942: LD_INT 4
56944: PUSH
56945: LD_VAR 0 6
56949: MINUS
56950: PUSH
56951: FOR_TO
56952: IFFALSE 57044
// begin if i = sort then
56954: LD_VAR 0 3
56958: PUSH
56959: LD_VAR 0 9
56963: EQUAL
56964: IFFALSE 56968
// break ;
56966: GO 57044
// if GetClass ( i ) = 2 then
56968: LD_VAR 0 3
56972: PPUSH
56973: CALL_OW 257
56977: PUSH
56978: LD_INT 2
56980: EQUAL
56981: IFFALSE 56985
// continue ;
56983: GO 56951
// p := Insert ( p , p + 1 , sort [ i ] ) ;
56985: LD_ADDR_VAR 0 11
56989: PUSH
56990: LD_VAR 0 11
56994: PPUSH
56995: LD_VAR 0 11
56999: PUSH
57000: LD_INT 1
57002: PLUS
57003: PPUSH
57004: LD_VAR 0 9
57008: PUSH
57009: LD_VAR 0 3
57013: ARRAY
57014: PPUSH
57015: CALL_OW 2
57019: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
57020: LD_ADDR_VAR 0 4
57024: PUSH
57025: LD_VAR 0 4
57029: PUSH
57030: LD_VAR 0 9
57034: PUSH
57035: LD_VAR 0 3
57039: ARRAY
57040: DIFF
57041: ST_TO_ADDR
// end ;
57042: GO 56951
57044: POP
57045: POP
// if p then
57046: LD_VAR 0 11
57050: IFFALSE 57075
// result := Replace ( result , 2 , p ) ;
57052: LD_ADDR_VAR 0 2
57056: PUSH
57057: LD_VAR 0 2
57061: PPUSH
57062: LD_INT 2
57064: PPUSH
57065: LD_VAR 0 11
57069: PPUSH
57070: CALL_OW 1
57074: ST_TO_ADDR
// end else
57075: GO 57121
// for i = eng downto 5 do
57077: LD_ADDR_VAR 0 3
57081: PUSH
57082: DOUBLE
57083: LD_VAR 0 6
57087: INC
57088: ST_TO_ADDR
57089: LD_INT 5
57091: PUSH
57092: FOR_DOWNTO
57093: IFFALSE 57119
// tmp := tmp union eng [ i ] ;
57095: LD_ADDR_VAR 0 4
57099: PUSH
57100: LD_VAR 0 4
57104: PUSH
57105: LD_VAR 0 6
57109: PUSH
57110: LD_VAR 0 3
57114: ARRAY
57115: UNION
57116: ST_TO_ADDR
57117: GO 57092
57119: POP
57120: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
57121: LD_ADDR_VAR 0 2
57125: PUSH
57126: LD_VAR 0 2
57130: PPUSH
57131: LD_INT 1
57133: PPUSH
57134: LD_VAR 0 4
57138: PUSH
57139: LD_VAR 0 5
57143: DIFF
57144: PPUSH
57145: CALL_OW 1
57149: ST_TO_ADDR
// exit ;
57150: GO 57152
// end ; end ;
57152: LD_VAR 0 2
57156: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
57157: LD_INT 0
57159: PPUSH
57160: PPUSH
57161: PPUSH
// if not mc_bases then
57162: LD_EXP 63
57166: NOT
57167: IFFALSE 57171
// exit ;
57169: GO 57277
// for i = 1 to mc_bases do
57171: LD_ADDR_VAR 0 2
57175: PUSH
57176: DOUBLE
57177: LD_INT 1
57179: DEC
57180: ST_TO_ADDR
57181: LD_EXP 63
57185: PUSH
57186: FOR_TO
57187: IFFALSE 57268
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
57189: LD_ADDR_VAR 0 3
57193: PUSH
57194: LD_EXP 63
57198: PUSH
57199: LD_VAR 0 2
57203: ARRAY
57204: PPUSH
57205: LD_INT 21
57207: PUSH
57208: LD_INT 3
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 3
57217: PUSH
57218: LD_INT 24
57220: PUSH
57221: LD_INT 1000
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PPUSH
57236: CALL_OW 72
57240: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
57241: LD_ADDR_EXP 64
57245: PUSH
57246: LD_EXP 64
57250: PPUSH
57251: LD_VAR 0 2
57255: PPUSH
57256: LD_VAR 0 3
57260: PPUSH
57261: CALL_OW 1
57265: ST_TO_ADDR
// end ;
57266: GO 57186
57268: POP
57269: POP
// RaiseSailEvent ( 101 ) ;
57270: LD_INT 101
57272: PPUSH
57273: CALL_OW 427
// end ;
57277: LD_VAR 0 1
57281: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
57282: LD_INT 0
57284: PPUSH
57285: PPUSH
57286: PPUSH
57287: PPUSH
57288: PPUSH
57289: PPUSH
57290: PPUSH
// if not mc_bases then
57291: LD_EXP 63
57295: NOT
57296: IFFALSE 57300
// exit ;
57298: GO 57862
// for i = 1 to mc_bases do
57300: LD_ADDR_VAR 0 2
57304: PUSH
57305: DOUBLE
57306: LD_INT 1
57308: DEC
57309: ST_TO_ADDR
57310: LD_EXP 63
57314: PUSH
57315: FOR_TO
57316: IFFALSE 57853
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
57318: LD_ADDR_VAR 0 5
57322: PUSH
57323: LD_EXP 63
57327: PUSH
57328: LD_VAR 0 2
57332: ARRAY
57333: PUSH
57334: LD_EXP 92
57338: PUSH
57339: LD_VAR 0 2
57343: ARRAY
57344: UNION
57345: PPUSH
57346: LD_INT 21
57348: PUSH
57349: LD_INT 1
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: LD_INT 3
57361: PUSH
57362: LD_INT 54
57364: PUSH
57365: EMPTY
57366: LIST
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 3
57374: PUSH
57375: LD_INT 24
57377: PUSH
57378: LD_INT 800
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: LIST
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PPUSH
57398: CALL_OW 72
57402: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
57403: LD_ADDR_VAR 0 6
57407: PUSH
57408: LD_EXP 63
57412: PUSH
57413: LD_VAR 0 2
57417: ARRAY
57418: PPUSH
57419: LD_INT 21
57421: PUSH
57422: LD_INT 1
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 1
57431: PUSH
57432: LD_INT 3
57434: PUSH
57435: LD_INT 54
57437: PUSH
57438: EMPTY
57439: LIST
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 3
57447: PUSH
57448: LD_INT 24
57450: PUSH
57451: LD_INT 250
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: LIST
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PPUSH
57471: CALL_OW 72
57475: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
57476: LD_ADDR_VAR 0 7
57480: PUSH
57481: LD_VAR 0 5
57485: PUSH
57486: LD_VAR 0 6
57490: DIFF
57491: ST_TO_ADDR
// if not need_heal_1 then
57492: LD_VAR 0 6
57496: NOT
57497: IFFALSE 57530
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
57499: LD_ADDR_EXP 66
57503: PUSH
57504: LD_EXP 66
57508: PPUSH
57509: LD_VAR 0 2
57513: PUSH
57514: LD_INT 1
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PPUSH
57521: EMPTY
57522: PPUSH
57523: CALL 17402 0 3
57527: ST_TO_ADDR
57528: GO 57600
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
57530: LD_ADDR_EXP 66
57534: PUSH
57535: LD_EXP 66
57539: PPUSH
57540: LD_VAR 0 2
57544: PUSH
57545: LD_INT 1
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PPUSH
57552: LD_EXP 66
57556: PUSH
57557: LD_VAR 0 2
57561: ARRAY
57562: PUSH
57563: LD_INT 1
57565: ARRAY
57566: PPUSH
57567: LD_INT 3
57569: PUSH
57570: LD_INT 24
57572: PUSH
57573: LD_INT 1000
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PPUSH
57584: CALL_OW 72
57588: PUSH
57589: LD_VAR 0 6
57593: UNION
57594: PPUSH
57595: CALL 17402 0 3
57599: ST_TO_ADDR
// if not need_heal_2 then
57600: LD_VAR 0 7
57604: NOT
57605: IFFALSE 57638
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
57607: LD_ADDR_EXP 66
57611: PUSH
57612: LD_EXP 66
57616: PPUSH
57617: LD_VAR 0 2
57621: PUSH
57622: LD_INT 2
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PPUSH
57629: EMPTY
57630: PPUSH
57631: CALL 17402 0 3
57635: ST_TO_ADDR
57636: GO 57670
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
57638: LD_ADDR_EXP 66
57642: PUSH
57643: LD_EXP 66
57647: PPUSH
57648: LD_VAR 0 2
57652: PUSH
57653: LD_INT 2
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PPUSH
57660: LD_VAR 0 7
57664: PPUSH
57665: CALL 17402 0 3
57669: ST_TO_ADDR
// if need_heal_2 then
57670: LD_VAR 0 7
57674: IFFALSE 57835
// for j in need_heal_2 do
57676: LD_ADDR_VAR 0 3
57680: PUSH
57681: LD_VAR 0 7
57685: PUSH
57686: FOR_IN
57687: IFFALSE 57833
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
57689: LD_ADDR_VAR 0 5
57693: PUSH
57694: LD_EXP 63
57698: PUSH
57699: LD_VAR 0 2
57703: ARRAY
57704: PPUSH
57705: LD_INT 2
57707: PUSH
57708: LD_INT 30
57710: PUSH
57711: LD_INT 6
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 30
57720: PUSH
57721: LD_INT 7
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 30
57730: PUSH
57731: LD_INT 8
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 30
57740: PUSH
57741: LD_INT 0
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 30
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: PPUSH
57766: CALL_OW 72
57770: ST_TO_ADDR
// if tmp then
57771: LD_VAR 0 5
57775: IFFALSE 57831
// begin k := NearestUnitToUnit ( tmp , j ) ;
57777: LD_ADDR_VAR 0 4
57781: PUSH
57782: LD_VAR 0 5
57786: PPUSH
57787: LD_VAR 0 3
57791: PPUSH
57792: CALL_OW 74
57796: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
57797: LD_VAR 0 3
57801: PPUSH
57802: LD_VAR 0 4
57806: PPUSH
57807: CALL_OW 296
57811: PUSH
57812: LD_INT 5
57814: GREATER
57815: IFFALSE 57831
// ComMoveUnit ( j , k ) ;
57817: LD_VAR 0 3
57821: PPUSH
57822: LD_VAR 0 4
57826: PPUSH
57827: CALL_OW 112
// end ; end ;
57831: GO 57686
57833: POP
57834: POP
// if not need_heal_1 and not need_heal_2 then
57835: LD_VAR 0 6
57839: NOT
57840: PUSH
57841: LD_VAR 0 7
57845: NOT
57846: AND
57847: IFFALSE 57851
// continue ;
57849: GO 57315
// end ;
57851: GO 57315
57853: POP
57854: POP
// RaiseSailEvent ( 102 ) ;
57855: LD_INT 102
57857: PPUSH
57858: CALL_OW 427
// end ;
57862: LD_VAR 0 1
57866: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
57867: LD_INT 0
57869: PPUSH
57870: PPUSH
57871: PPUSH
57872: PPUSH
57873: PPUSH
57874: PPUSH
57875: PPUSH
57876: PPUSH
// if not mc_bases then
57877: LD_EXP 63
57881: NOT
57882: IFFALSE 57886
// exit ;
57884: GO 58721
// for i = 1 to mc_bases do
57886: LD_ADDR_VAR 0 2
57890: PUSH
57891: DOUBLE
57892: LD_INT 1
57894: DEC
57895: ST_TO_ADDR
57896: LD_EXP 63
57900: PUSH
57901: FOR_TO
57902: IFFALSE 58719
// begin if not mc_building_need_repair [ i ] then
57904: LD_EXP 64
57908: PUSH
57909: LD_VAR 0 2
57913: ARRAY
57914: NOT
57915: IFFALSE 58089
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
57917: LD_ADDR_VAR 0 6
57921: PUSH
57922: LD_EXP 82
57926: PUSH
57927: LD_VAR 0 2
57931: ARRAY
57932: PPUSH
57933: LD_INT 3
57935: PUSH
57936: LD_INT 24
57938: PUSH
57939: LD_INT 1000
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 2
57952: PUSH
57953: LD_INT 34
57955: PUSH
57956: LD_INT 13
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 34
57965: PUSH
57966: LD_INT 52
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: LIST
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PPUSH
57982: CALL_OW 72
57986: ST_TO_ADDR
// if cranes then
57987: LD_VAR 0 6
57991: IFFALSE 58053
// for j in cranes do
57993: LD_ADDR_VAR 0 3
57997: PUSH
57998: LD_VAR 0 6
58002: PUSH
58003: FOR_IN
58004: IFFALSE 58051
// if not IsInArea ( j , mc_parking [ i ] ) then
58006: LD_VAR 0 3
58010: PPUSH
58011: LD_EXP 87
58015: PUSH
58016: LD_VAR 0 2
58020: ARRAY
58021: PPUSH
58022: CALL_OW 308
58026: NOT
58027: IFFALSE 58049
// ComMoveToArea ( j , mc_parking [ i ] ) ;
58029: LD_VAR 0 3
58033: PPUSH
58034: LD_EXP 87
58038: PUSH
58039: LD_VAR 0 2
58043: ARRAY
58044: PPUSH
58045: CALL_OW 113
58049: GO 58003
58051: POP
58052: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
58053: LD_ADDR_EXP 65
58057: PUSH
58058: LD_EXP 65
58062: PPUSH
58063: LD_VAR 0 2
58067: PPUSH
58068: EMPTY
58069: PPUSH
58070: CALL_OW 1
58074: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
58075: LD_VAR 0 2
58079: PPUSH
58080: LD_INT 101
58082: PPUSH
58083: CALL 52990 0 2
// continue ;
58087: GO 57901
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
58089: LD_ADDR_EXP 69
58093: PUSH
58094: LD_EXP 69
58098: PPUSH
58099: LD_VAR 0 2
58103: PPUSH
58104: EMPTY
58105: PPUSH
58106: CALL_OW 1
58110: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
58111: LD_VAR 0 2
58115: PPUSH
58116: LD_INT 103
58118: PPUSH
58119: CALL 52990 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
58123: LD_ADDR_VAR 0 5
58127: PUSH
58128: LD_EXP 63
58132: PUSH
58133: LD_VAR 0 2
58137: ARRAY
58138: PUSH
58139: LD_EXP 92
58143: PUSH
58144: LD_VAR 0 2
58148: ARRAY
58149: UNION
58150: PPUSH
58151: LD_INT 2
58153: PUSH
58154: LD_INT 25
58156: PUSH
58157: LD_INT 2
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 25
58166: PUSH
58167: LD_INT 16
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: LIST
58178: PUSH
58179: EMPTY
58180: LIST
58181: PPUSH
58182: CALL_OW 72
58186: PUSH
58187: LD_EXP 66
58191: PUSH
58192: LD_VAR 0 2
58196: ARRAY
58197: PUSH
58198: LD_INT 1
58200: ARRAY
58201: PUSH
58202: LD_EXP 66
58206: PUSH
58207: LD_VAR 0 2
58211: ARRAY
58212: PUSH
58213: LD_INT 2
58215: ARRAY
58216: UNION
58217: DIFF
58218: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
58219: LD_ADDR_VAR 0 6
58223: PUSH
58224: LD_EXP 82
58228: PUSH
58229: LD_VAR 0 2
58233: ARRAY
58234: PPUSH
58235: LD_INT 2
58237: PUSH
58238: LD_INT 34
58240: PUSH
58241: LD_INT 13
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 34
58250: PUSH
58251: LD_INT 52
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: LIST
58262: PPUSH
58263: CALL_OW 72
58267: ST_TO_ADDR
// if cranes then
58268: LD_VAR 0 6
58272: IFFALSE 58408
// begin for j in cranes do
58274: LD_ADDR_VAR 0 3
58278: PUSH
58279: LD_VAR 0 6
58283: PUSH
58284: FOR_IN
58285: IFFALSE 58406
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
58287: LD_VAR 0 3
58291: PPUSH
58292: CALL_OW 256
58296: PUSH
58297: LD_INT 500
58299: GREATEREQUAL
58300: PUSH
58301: LD_VAR 0 3
58305: PPUSH
58306: CALL_OW 314
58310: NOT
58311: AND
58312: IFFALSE 58346
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
58314: LD_VAR 0 3
58318: PPUSH
58319: LD_EXP 64
58323: PUSH
58324: LD_VAR 0 2
58328: ARRAY
58329: PPUSH
58330: LD_VAR 0 3
58334: PPUSH
58335: CALL_OW 74
58339: PPUSH
58340: CALL_OW 130
58344: GO 58404
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
58346: LD_VAR 0 3
58350: PPUSH
58351: CALL_OW 256
58355: PUSH
58356: LD_INT 500
58358: LESS
58359: PUSH
58360: LD_VAR 0 3
58364: PPUSH
58365: LD_EXP 87
58369: PUSH
58370: LD_VAR 0 2
58374: ARRAY
58375: PPUSH
58376: CALL_OW 308
58380: NOT
58381: AND
58382: IFFALSE 58404
// ComMoveToArea ( j , mc_parking [ i ] ) ;
58384: LD_VAR 0 3
58388: PPUSH
58389: LD_EXP 87
58393: PUSH
58394: LD_VAR 0 2
58398: ARRAY
58399: PPUSH
58400: CALL_OW 113
58404: GO 58284
58406: POP
58407: POP
// end ; if tmp > 3 then
58408: LD_VAR 0 5
58412: PUSH
58413: LD_INT 3
58415: GREATER
58416: IFFALSE 58436
// tmp := ShrinkArray ( tmp , 4 ) ;
58418: LD_ADDR_VAR 0 5
58422: PUSH
58423: LD_VAR 0 5
58427: PPUSH
58428: LD_INT 4
58430: PPUSH
58431: CALL 48628 0 2
58435: ST_TO_ADDR
// if not tmp then
58436: LD_VAR 0 5
58440: NOT
58441: IFFALSE 58445
// continue ;
58443: GO 57901
// for j in tmp do
58445: LD_ADDR_VAR 0 3
58449: PUSH
58450: LD_VAR 0 5
58454: PUSH
58455: FOR_IN
58456: IFFALSE 58715
// begin if IsInUnit ( j ) then
58458: LD_VAR 0 3
58462: PPUSH
58463: CALL_OW 310
58467: IFFALSE 58478
// ComExitBuilding ( j ) ;
58469: LD_VAR 0 3
58473: PPUSH
58474: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
58478: LD_VAR 0 3
58482: PUSH
58483: LD_EXP 65
58487: PUSH
58488: LD_VAR 0 2
58492: ARRAY
58493: IN
58494: NOT
58495: IFFALSE 58553
// begin SetTag ( j , 101 ) ;
58497: LD_VAR 0 3
58501: PPUSH
58502: LD_INT 101
58504: PPUSH
58505: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
58509: LD_ADDR_EXP 65
58513: PUSH
58514: LD_EXP 65
58518: PPUSH
58519: LD_VAR 0 2
58523: PUSH
58524: LD_EXP 65
58528: PUSH
58529: LD_VAR 0 2
58533: ARRAY
58534: PUSH
58535: LD_INT 1
58537: PLUS
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PPUSH
58543: LD_VAR 0 3
58547: PPUSH
58548: CALL 17402 0 3
58552: ST_TO_ADDR
// end ; wait ( 1 ) ;
58553: LD_INT 1
58555: PPUSH
58556: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
58560: LD_ADDR_VAR 0 7
58564: PUSH
58565: LD_EXP 64
58569: PUSH
58570: LD_VAR 0 2
58574: ARRAY
58575: ST_TO_ADDR
// if mc_scan [ i ] then
58576: LD_EXP 86
58580: PUSH
58581: LD_VAR 0 2
58585: ARRAY
58586: IFFALSE 58648
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
58588: LD_ADDR_VAR 0 7
58592: PUSH
58593: LD_EXP 64
58597: PUSH
58598: LD_VAR 0 2
58602: ARRAY
58603: PPUSH
58604: LD_INT 3
58606: PUSH
58607: LD_INT 30
58609: PUSH
58610: LD_INT 32
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 30
58619: PUSH
58620: LD_INT 33
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 30
58629: PUSH
58630: LD_INT 31
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: PPUSH
58643: CALL_OW 72
58647: ST_TO_ADDR
// if not to_repair_tmp then
58648: LD_VAR 0 7
58652: NOT
58653: IFFALSE 58657
// continue ;
58655: GO 58455
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
58657: LD_ADDR_VAR 0 8
58661: PUSH
58662: LD_VAR 0 7
58666: PPUSH
58667: LD_VAR 0 3
58671: PPUSH
58672: CALL_OW 74
58676: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 5 then
58677: LD_VAR 0 8
58681: PPUSH
58682: LD_INT 16
58684: PPUSH
58685: CALL 19995 0 2
58689: PUSH
58690: LD_INT 4
58692: ARRAY
58693: PUSH
58694: LD_INT 5
58696: LESS
58697: IFFALSE 58713
// ComRepairBuilding ( j , to_repair ) ;
58699: LD_VAR 0 3
58703: PPUSH
58704: LD_VAR 0 8
58708: PPUSH
58709: CALL_OW 130
// end ;
58713: GO 58455
58715: POP
58716: POP
// end ;
58717: GO 57901
58719: POP
58720: POP
// end ;
58721: LD_VAR 0 1
58725: RET
// export function MC_Heal ; var i , j , tmp ; begin
58726: LD_INT 0
58728: PPUSH
58729: PPUSH
58730: PPUSH
58731: PPUSH
// if not mc_bases then
58732: LD_EXP 63
58736: NOT
58737: IFFALSE 58741
// exit ;
58739: GO 59143
// for i = 1 to mc_bases do
58741: LD_ADDR_VAR 0 2
58745: PUSH
58746: DOUBLE
58747: LD_INT 1
58749: DEC
58750: ST_TO_ADDR
58751: LD_EXP 63
58755: PUSH
58756: FOR_TO
58757: IFFALSE 59141
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
58759: LD_EXP 66
58763: PUSH
58764: LD_VAR 0 2
58768: ARRAY
58769: PUSH
58770: LD_INT 1
58772: ARRAY
58773: NOT
58774: PUSH
58775: LD_EXP 66
58779: PUSH
58780: LD_VAR 0 2
58784: ARRAY
58785: PUSH
58786: LD_INT 2
58788: ARRAY
58789: NOT
58790: AND
58791: IFFALSE 58829
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
58793: LD_ADDR_EXP 67
58797: PUSH
58798: LD_EXP 67
58802: PPUSH
58803: LD_VAR 0 2
58807: PPUSH
58808: EMPTY
58809: PPUSH
58810: CALL_OW 1
58814: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
58815: LD_VAR 0 2
58819: PPUSH
58820: LD_INT 102
58822: PPUSH
58823: CALL 52990 0 2
// continue ;
58827: GO 58756
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
58829: LD_ADDR_VAR 0 4
58833: PUSH
58834: LD_EXP 63
58838: PUSH
58839: LD_VAR 0 2
58843: ARRAY
58844: PPUSH
58845: LD_INT 25
58847: PUSH
58848: LD_INT 4
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PPUSH
58855: CALL_OW 72
58859: ST_TO_ADDR
// if not tmp then
58860: LD_VAR 0 4
58864: NOT
58865: IFFALSE 58869
// continue ;
58867: GO 58756
// if mc_taming [ i ] then
58869: LD_EXP 94
58873: PUSH
58874: LD_VAR 0 2
58878: ARRAY
58879: IFFALSE 58903
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
58881: LD_ADDR_EXP 94
58885: PUSH
58886: LD_EXP 94
58890: PPUSH
58891: LD_VAR 0 2
58895: PPUSH
58896: EMPTY
58897: PPUSH
58898: CALL_OW 1
58902: ST_TO_ADDR
// for j in tmp do
58903: LD_ADDR_VAR 0 3
58907: PUSH
58908: LD_VAR 0 4
58912: PUSH
58913: FOR_IN
58914: IFFALSE 59137
// begin if IsInUnit ( j ) then
58916: LD_VAR 0 3
58920: PPUSH
58921: CALL_OW 310
58925: IFFALSE 58936
// ComExitBuilding ( j ) ;
58927: LD_VAR 0 3
58931: PPUSH
58932: CALL_OW 122
// if not j in mc_healers [ i ] then
58936: LD_VAR 0 3
58940: PUSH
58941: LD_EXP 67
58945: PUSH
58946: LD_VAR 0 2
58950: ARRAY
58951: IN
58952: NOT
58953: IFFALSE 58999
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
58955: LD_ADDR_EXP 67
58959: PUSH
58960: LD_EXP 67
58964: PPUSH
58965: LD_VAR 0 2
58969: PUSH
58970: LD_EXP 67
58974: PUSH
58975: LD_VAR 0 2
58979: ARRAY
58980: PUSH
58981: LD_INT 1
58983: PLUS
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PPUSH
58989: LD_VAR 0 3
58993: PPUSH
58994: CALL 17402 0 3
58998: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
58999: LD_VAR 0 3
59003: PPUSH
59004: CALL_OW 110
59008: PUSH
59009: LD_INT 102
59011: NONEQUAL
59012: IFFALSE 59026
// SetTag ( j , 102 ) ;
59014: LD_VAR 0 3
59018: PPUSH
59019: LD_INT 102
59021: PPUSH
59022: CALL_OW 109
// Wait ( 3 ) ;
59026: LD_INT 3
59028: PPUSH
59029: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
59033: LD_EXP 66
59037: PUSH
59038: LD_VAR 0 2
59042: ARRAY
59043: PUSH
59044: LD_INT 1
59046: ARRAY
59047: IFFALSE 59079
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
59049: LD_VAR 0 3
59053: PPUSH
59054: LD_EXP 66
59058: PUSH
59059: LD_VAR 0 2
59063: ARRAY
59064: PUSH
59065: LD_INT 1
59067: ARRAY
59068: PUSH
59069: LD_INT 1
59071: ARRAY
59072: PPUSH
59073: CALL_OW 128
59077: GO 59135
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
59079: LD_VAR 0 3
59083: PPUSH
59084: CALL_OW 314
59088: NOT
59089: PUSH
59090: LD_EXP 66
59094: PUSH
59095: LD_VAR 0 2
59099: ARRAY
59100: PUSH
59101: LD_INT 2
59103: ARRAY
59104: AND
59105: IFFALSE 59135
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
59107: LD_VAR 0 3
59111: PPUSH
59112: LD_EXP 66
59116: PUSH
59117: LD_VAR 0 2
59121: ARRAY
59122: PUSH
59123: LD_INT 2
59125: ARRAY
59126: PUSH
59127: LD_INT 1
59129: ARRAY
59130: PPUSH
59131: CALL_OW 128
// end ;
59135: GO 58913
59137: POP
59138: POP
// end ;
59139: GO 58756
59141: POP
59142: POP
// end ;
59143: LD_VAR 0 1
59147: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
59148: LD_INT 0
59150: PPUSH
59151: PPUSH
59152: PPUSH
59153: PPUSH
59154: PPUSH
// if not mc_bases then
59155: LD_EXP 63
59159: NOT
59160: IFFALSE 59164
// exit ;
59162: GO 60307
// for i = 1 to mc_bases do
59164: LD_ADDR_VAR 0 2
59168: PUSH
59169: DOUBLE
59170: LD_INT 1
59172: DEC
59173: ST_TO_ADDR
59174: LD_EXP 63
59178: PUSH
59179: FOR_TO
59180: IFFALSE 60305
// begin if mc_scan [ i ] then
59182: LD_EXP 86
59186: PUSH
59187: LD_VAR 0 2
59191: ARRAY
59192: IFFALSE 59196
// continue ;
59194: GO 59179
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
59196: LD_EXP 68
59200: PUSH
59201: LD_VAR 0 2
59205: ARRAY
59206: NOT
59207: PUSH
59208: LD_EXP 70
59212: PUSH
59213: LD_VAR 0 2
59217: ARRAY
59218: NOT
59219: AND
59220: PUSH
59221: LD_EXP 69
59225: PUSH
59226: LD_VAR 0 2
59230: ARRAY
59231: AND
59232: IFFALSE 59270
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
59234: LD_ADDR_EXP 69
59238: PUSH
59239: LD_EXP 69
59243: PPUSH
59244: LD_VAR 0 2
59248: PPUSH
59249: EMPTY
59250: PPUSH
59251: CALL_OW 1
59255: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
59256: LD_VAR 0 2
59260: PPUSH
59261: LD_INT 103
59263: PPUSH
59264: CALL 52990 0 2
// continue ;
59268: GO 59179
// end ; if mc_construct_list [ i ] then
59270: LD_EXP 70
59274: PUSH
59275: LD_VAR 0 2
59279: ARRAY
59280: IFFALSE 59500
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
59282: LD_ADDR_VAR 0 4
59286: PUSH
59287: LD_EXP 63
59291: PUSH
59292: LD_VAR 0 2
59296: ARRAY
59297: PPUSH
59298: LD_INT 25
59300: PUSH
59301: LD_INT 2
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PPUSH
59308: CALL_OW 72
59312: PUSH
59313: LD_EXP 65
59317: PUSH
59318: LD_VAR 0 2
59322: ARRAY
59323: DIFF
59324: ST_TO_ADDR
// if not tmp then
59325: LD_VAR 0 4
59329: NOT
59330: IFFALSE 59334
// continue ;
59332: GO 59179
// for j in tmp do
59334: LD_ADDR_VAR 0 3
59338: PUSH
59339: LD_VAR 0 4
59343: PUSH
59344: FOR_IN
59345: IFFALSE 59496
// begin if not mc_builders [ i ] then
59347: LD_EXP 69
59351: PUSH
59352: LD_VAR 0 2
59356: ARRAY
59357: NOT
59358: IFFALSE 59416
// begin SetTag ( j , 103 ) ;
59360: LD_VAR 0 3
59364: PPUSH
59365: LD_INT 103
59367: PPUSH
59368: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
59372: LD_ADDR_EXP 69
59376: PUSH
59377: LD_EXP 69
59381: PPUSH
59382: LD_VAR 0 2
59386: PUSH
59387: LD_EXP 69
59391: PUSH
59392: LD_VAR 0 2
59396: ARRAY
59397: PUSH
59398: LD_INT 1
59400: PLUS
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PPUSH
59406: LD_VAR 0 3
59410: PPUSH
59411: CALL 17402 0 3
59415: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
59416: LD_VAR 0 3
59420: PPUSH
59421: CALL_OW 310
59425: IFFALSE 59436
// ComExitBuilding ( j ) ;
59427: LD_VAR 0 3
59431: PPUSH
59432: CALL_OW 122
// wait ( 3 ) ;
59436: LD_INT 3
59438: PPUSH
59439: CALL_OW 67
// if not mc_construct_list [ i ] then
59443: LD_EXP 70
59447: PUSH
59448: LD_VAR 0 2
59452: ARRAY
59453: NOT
59454: IFFALSE 59458
// break ;
59456: GO 59496
// if not HasTask ( j ) then
59458: LD_VAR 0 3
59462: PPUSH
59463: CALL_OW 314
59467: NOT
59468: IFFALSE 59494
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
59470: LD_VAR 0 3
59474: PPUSH
59475: LD_EXP 70
59479: PUSH
59480: LD_VAR 0 2
59484: ARRAY
59485: PUSH
59486: LD_INT 1
59488: ARRAY
59489: PPUSH
59490: CALL 20253 0 2
// end ;
59494: GO 59344
59496: POP
59497: POP
// end else
59498: GO 60303
// if mc_build_list [ i ] then
59500: LD_EXP 68
59504: PUSH
59505: LD_VAR 0 2
59509: ARRAY
59510: IFFALSE 60303
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
59512: LD_ADDR_VAR 0 5
59516: PUSH
59517: LD_EXP 63
59521: PUSH
59522: LD_VAR 0 2
59526: ARRAY
59527: PPUSH
59528: LD_INT 2
59530: PUSH
59531: LD_INT 30
59533: PUSH
59534: LD_INT 0
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 30
59543: PUSH
59544: LD_INT 1
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: LIST
59555: PPUSH
59556: CALL_OW 72
59560: ST_TO_ADDR
// if depot then
59561: LD_VAR 0 5
59565: IFFALSE 59583
// depot := depot [ 1 ] else
59567: LD_ADDR_VAR 0 5
59571: PUSH
59572: LD_VAR 0 5
59576: PUSH
59577: LD_INT 1
59579: ARRAY
59580: ST_TO_ADDR
59581: GO 59591
// depot := 0 ;
59583: LD_ADDR_VAR 0 5
59587: PUSH
59588: LD_INT 0
59590: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
59591: LD_EXP 68
59595: PUSH
59596: LD_VAR 0 2
59600: ARRAY
59601: PUSH
59602: LD_INT 1
59604: ARRAY
59605: PUSH
59606: LD_INT 1
59608: ARRAY
59609: PPUSH
59610: CALL 20083 0 1
59614: PUSH
59615: LD_EXP 63
59619: PUSH
59620: LD_VAR 0 2
59624: ARRAY
59625: PPUSH
59626: LD_INT 2
59628: PUSH
59629: LD_INT 30
59631: PUSH
59632: LD_INT 2
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 30
59641: PUSH
59642: LD_INT 3
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: LIST
59653: PPUSH
59654: CALL_OW 72
59658: NOT
59659: AND
59660: IFFALSE 59765
// begin for j = 1 to mc_build_list [ i ] do
59662: LD_ADDR_VAR 0 3
59666: PUSH
59667: DOUBLE
59668: LD_INT 1
59670: DEC
59671: ST_TO_ADDR
59672: LD_EXP 68
59676: PUSH
59677: LD_VAR 0 2
59681: ARRAY
59682: PUSH
59683: FOR_TO
59684: IFFALSE 59763
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
59686: LD_EXP 68
59690: PUSH
59691: LD_VAR 0 2
59695: ARRAY
59696: PUSH
59697: LD_VAR 0 3
59701: ARRAY
59702: PUSH
59703: LD_INT 1
59705: ARRAY
59706: PUSH
59707: LD_INT 2
59709: EQUAL
59710: IFFALSE 59761
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
59712: LD_ADDR_EXP 68
59716: PUSH
59717: LD_EXP 68
59721: PPUSH
59722: LD_VAR 0 2
59726: PPUSH
59727: LD_EXP 68
59731: PUSH
59732: LD_VAR 0 2
59736: ARRAY
59737: PPUSH
59738: LD_VAR 0 3
59742: PPUSH
59743: LD_INT 1
59745: PPUSH
59746: LD_INT 0
59748: PPUSH
59749: CALL 16820 0 4
59753: PPUSH
59754: CALL_OW 1
59758: ST_TO_ADDR
// break ;
59759: GO 59763
// end ;
59761: GO 59683
59763: POP
59764: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
59765: LD_EXP 68
59769: PUSH
59770: LD_VAR 0 2
59774: ARRAY
59775: PUSH
59776: LD_INT 1
59778: ARRAY
59779: PUSH
59780: LD_INT 1
59782: ARRAY
59783: PUSH
59784: LD_INT 0
59786: EQUAL
59787: PUSH
59788: LD_VAR 0 5
59792: PUSH
59793: LD_VAR 0 5
59797: PPUSH
59798: LD_EXP 68
59802: PUSH
59803: LD_VAR 0 2
59807: ARRAY
59808: PUSH
59809: LD_INT 1
59811: ARRAY
59812: PUSH
59813: LD_INT 1
59815: ARRAY
59816: PPUSH
59817: LD_EXP 68
59821: PUSH
59822: LD_VAR 0 2
59826: ARRAY
59827: PUSH
59828: LD_INT 1
59830: ARRAY
59831: PUSH
59832: LD_INT 2
59834: ARRAY
59835: PPUSH
59836: LD_EXP 68
59840: PUSH
59841: LD_VAR 0 2
59845: ARRAY
59846: PUSH
59847: LD_INT 1
59849: ARRAY
59850: PUSH
59851: LD_INT 3
59853: ARRAY
59854: PPUSH
59855: LD_EXP 68
59859: PUSH
59860: LD_VAR 0 2
59864: ARRAY
59865: PUSH
59866: LD_INT 1
59868: ARRAY
59869: PUSH
59870: LD_INT 4
59872: ARRAY
59873: PPUSH
59874: CALL 24817 0 5
59878: AND
59879: OR
59880: IFFALSE 60161
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
59882: LD_ADDR_VAR 0 4
59886: PUSH
59887: LD_EXP 63
59891: PUSH
59892: LD_VAR 0 2
59896: ARRAY
59897: PPUSH
59898: LD_INT 25
59900: PUSH
59901: LD_INT 2
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PPUSH
59908: CALL_OW 72
59912: PUSH
59913: LD_EXP 65
59917: PUSH
59918: LD_VAR 0 2
59922: ARRAY
59923: DIFF
59924: ST_TO_ADDR
// if not tmp then
59925: LD_VAR 0 4
59929: NOT
59930: IFFALSE 59934
// continue ;
59932: GO 59179
// for j in tmp do
59934: LD_ADDR_VAR 0 3
59938: PUSH
59939: LD_VAR 0 4
59943: PUSH
59944: FOR_IN
59945: IFFALSE 60157
// begin if not mc_builders [ i ] then
59947: LD_EXP 69
59951: PUSH
59952: LD_VAR 0 2
59956: ARRAY
59957: NOT
59958: IFFALSE 60016
// begin SetTag ( j , 103 ) ;
59960: LD_VAR 0 3
59964: PPUSH
59965: LD_INT 103
59967: PPUSH
59968: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
59972: LD_ADDR_EXP 69
59976: PUSH
59977: LD_EXP 69
59981: PPUSH
59982: LD_VAR 0 2
59986: PUSH
59987: LD_EXP 69
59991: PUSH
59992: LD_VAR 0 2
59996: ARRAY
59997: PUSH
59998: LD_INT 1
60000: PLUS
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PPUSH
60006: LD_VAR 0 3
60010: PPUSH
60011: CALL 17402 0 3
60015: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
60016: LD_VAR 0 3
60020: PPUSH
60021: CALL_OW 310
60025: IFFALSE 60036
// ComExitBuilding ( j ) ;
60027: LD_VAR 0 3
60031: PPUSH
60032: CALL_OW 122
// wait ( 3 ) ;
60036: LD_INT 3
60038: PPUSH
60039: CALL_OW 67
// if not mc_build_list [ i ] then
60043: LD_EXP 68
60047: PUSH
60048: LD_VAR 0 2
60052: ARRAY
60053: NOT
60054: IFFALSE 60058
// break ;
60056: GO 60157
// if not HasTask ( j ) then
60058: LD_VAR 0 3
60062: PPUSH
60063: CALL_OW 314
60067: NOT
60068: IFFALSE 60155
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
60070: LD_VAR 0 3
60074: PPUSH
60075: LD_EXP 68
60079: PUSH
60080: LD_VAR 0 2
60084: ARRAY
60085: PUSH
60086: LD_INT 1
60088: ARRAY
60089: PUSH
60090: LD_INT 1
60092: ARRAY
60093: PPUSH
60094: LD_EXP 68
60098: PUSH
60099: LD_VAR 0 2
60103: ARRAY
60104: PUSH
60105: LD_INT 1
60107: ARRAY
60108: PUSH
60109: LD_INT 2
60111: ARRAY
60112: PPUSH
60113: LD_EXP 68
60117: PUSH
60118: LD_VAR 0 2
60122: ARRAY
60123: PUSH
60124: LD_INT 1
60126: ARRAY
60127: PUSH
60128: LD_INT 3
60130: ARRAY
60131: PPUSH
60132: LD_EXP 68
60136: PUSH
60137: LD_VAR 0 2
60141: ARRAY
60142: PUSH
60143: LD_INT 1
60145: ARRAY
60146: PUSH
60147: LD_INT 4
60149: ARRAY
60150: PPUSH
60151: CALL_OW 145
// end ;
60155: GO 59944
60157: POP
60158: POP
// end else
60159: GO 60303
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
60161: LD_EXP 63
60165: PUSH
60166: LD_VAR 0 2
60170: ARRAY
60171: PPUSH
60172: LD_EXP 68
60176: PUSH
60177: LD_VAR 0 2
60181: ARRAY
60182: PUSH
60183: LD_INT 1
60185: ARRAY
60186: PUSH
60187: LD_INT 1
60189: ARRAY
60190: PPUSH
60191: LD_EXP 68
60195: PUSH
60196: LD_VAR 0 2
60200: ARRAY
60201: PUSH
60202: LD_INT 1
60204: ARRAY
60205: PUSH
60206: LD_INT 2
60208: ARRAY
60209: PPUSH
60210: LD_EXP 68
60214: PUSH
60215: LD_VAR 0 2
60219: ARRAY
60220: PUSH
60221: LD_INT 1
60223: ARRAY
60224: PUSH
60225: LD_INT 3
60227: ARRAY
60228: PPUSH
60229: LD_EXP 68
60233: PUSH
60234: LD_VAR 0 2
60238: ARRAY
60239: PUSH
60240: LD_INT 1
60242: ARRAY
60243: PUSH
60244: LD_INT 4
60246: ARRAY
60247: PPUSH
60248: CALL 24153 0 5
60252: NOT
60253: IFFALSE 60303
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
60255: LD_ADDR_EXP 68
60259: PUSH
60260: LD_EXP 68
60264: PPUSH
60265: LD_VAR 0 2
60269: PPUSH
60270: LD_EXP 68
60274: PUSH
60275: LD_VAR 0 2
60279: ARRAY
60280: PPUSH
60281: LD_INT 1
60283: PPUSH
60284: LD_INT 1
60286: NEG
60287: PPUSH
60288: LD_INT 0
60290: PPUSH
60291: CALL 16820 0 4
60295: PPUSH
60296: CALL_OW 1
60300: ST_TO_ADDR
// continue ;
60301: GO 59179
// end ; end ; end ;
60303: GO 59179
60305: POP
60306: POP
// end ;
60307: LD_VAR 0 1
60311: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
60312: LD_INT 0
60314: PPUSH
60315: PPUSH
60316: PPUSH
60317: PPUSH
60318: PPUSH
60319: PPUSH
// if not mc_bases then
60320: LD_EXP 63
60324: NOT
60325: IFFALSE 60329
// exit ;
60327: GO 60756
// for i = 1 to mc_bases do
60329: LD_ADDR_VAR 0 2
60333: PUSH
60334: DOUBLE
60335: LD_INT 1
60337: DEC
60338: ST_TO_ADDR
60339: LD_EXP 63
60343: PUSH
60344: FOR_TO
60345: IFFALSE 60754
// begin tmp := mc_build_upgrade [ i ] ;
60347: LD_ADDR_VAR 0 4
60351: PUSH
60352: LD_EXP 95
60356: PUSH
60357: LD_VAR 0 2
60361: ARRAY
60362: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
60363: LD_ADDR_VAR 0 6
60367: PUSH
60368: LD_EXP 96
60372: PUSH
60373: LD_VAR 0 2
60377: ARRAY
60378: PPUSH
60379: LD_INT 2
60381: PUSH
60382: LD_INT 30
60384: PUSH
60385: LD_INT 6
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 30
60394: PUSH
60395: LD_INT 7
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: LIST
60406: PPUSH
60407: CALL_OW 72
60411: ST_TO_ADDR
// if not tmp and not lab then
60412: LD_VAR 0 4
60416: NOT
60417: PUSH
60418: LD_VAR 0 6
60422: NOT
60423: AND
60424: IFFALSE 60428
// continue ;
60426: GO 60344
// if tmp then
60428: LD_VAR 0 4
60432: IFFALSE 60552
// for j in tmp do
60434: LD_ADDR_VAR 0 3
60438: PUSH
60439: LD_VAR 0 4
60443: PUSH
60444: FOR_IN
60445: IFFALSE 60550
// begin if UpgradeCost ( j ) then
60447: LD_VAR 0 3
60451: PPUSH
60452: CALL 23813 0 1
60456: IFFALSE 60548
// begin ComUpgrade ( j ) ;
60458: LD_VAR 0 3
60462: PPUSH
60463: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
60467: LD_ADDR_EXP 95
60471: PUSH
60472: LD_EXP 95
60476: PPUSH
60477: LD_VAR 0 2
60481: PPUSH
60482: LD_EXP 95
60486: PUSH
60487: LD_VAR 0 2
60491: ARRAY
60492: PUSH
60493: LD_VAR 0 3
60497: DIFF
60498: PPUSH
60499: CALL_OW 1
60503: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
60504: LD_ADDR_EXP 70
60508: PUSH
60509: LD_EXP 70
60513: PPUSH
60514: LD_VAR 0 2
60518: PUSH
60519: LD_EXP 70
60523: PUSH
60524: LD_VAR 0 2
60528: ARRAY
60529: PUSH
60530: LD_INT 1
60532: PLUS
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PPUSH
60538: LD_VAR 0 3
60542: PPUSH
60543: CALL 17402 0 3
60547: ST_TO_ADDR
// end ; end ;
60548: GO 60444
60550: POP
60551: POP
// if not lab or not mc_lab_upgrade [ i ] then
60552: LD_VAR 0 6
60556: NOT
60557: PUSH
60558: LD_EXP 97
60562: PUSH
60563: LD_VAR 0 2
60567: ARRAY
60568: NOT
60569: OR
60570: IFFALSE 60574
// continue ;
60572: GO 60344
// for j in lab do
60574: LD_ADDR_VAR 0 3
60578: PUSH
60579: LD_VAR 0 6
60583: PUSH
60584: FOR_IN
60585: IFFALSE 60750
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
60587: LD_VAR 0 3
60591: PPUSH
60592: CALL_OW 266
60596: PUSH
60597: LD_INT 6
60599: PUSH
60600: LD_INT 7
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: IN
60607: PUSH
60608: LD_VAR 0 3
60612: PPUSH
60613: CALL_OW 461
60617: PUSH
60618: LD_INT 1
60620: NONEQUAL
60621: AND
60622: IFFALSE 60748
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
60624: LD_VAR 0 3
60628: PPUSH
60629: LD_EXP 97
60633: PUSH
60634: LD_VAR 0 2
60638: ARRAY
60639: PUSH
60640: LD_INT 1
60642: ARRAY
60643: PPUSH
60644: CALL 24018 0 2
60648: IFFALSE 60748
// begin ComCancel ( j ) ;
60650: LD_VAR 0 3
60654: PPUSH
60655: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
60659: LD_VAR 0 3
60663: PPUSH
60664: LD_EXP 97
60668: PUSH
60669: LD_VAR 0 2
60673: ARRAY
60674: PUSH
60675: LD_INT 1
60677: ARRAY
60678: PPUSH
60679: CALL_OW 207
// if not j in mc_construct_list [ i ] then
60683: LD_VAR 0 3
60687: PUSH
60688: LD_EXP 70
60692: PUSH
60693: LD_VAR 0 2
60697: ARRAY
60698: IN
60699: NOT
60700: IFFALSE 60746
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
60702: LD_ADDR_EXP 70
60706: PUSH
60707: LD_EXP 70
60711: PPUSH
60712: LD_VAR 0 2
60716: PUSH
60717: LD_EXP 70
60721: PUSH
60722: LD_VAR 0 2
60726: ARRAY
60727: PUSH
60728: LD_INT 1
60730: PLUS
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PPUSH
60736: LD_VAR 0 3
60740: PPUSH
60741: CALL 17402 0 3
60745: ST_TO_ADDR
// break ;
60746: GO 60750
// end ; end ; end ;
60748: GO 60584
60750: POP
60751: POP
// end ;
60752: GO 60344
60754: POP
60755: POP
// end ;
60756: LD_VAR 0 1
60760: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
60761: LD_INT 0
60763: PPUSH
60764: PPUSH
60765: PPUSH
60766: PPUSH
60767: PPUSH
60768: PPUSH
60769: PPUSH
60770: PPUSH
60771: PPUSH
// if not mc_bases then
60772: LD_EXP 63
60776: NOT
60777: IFFALSE 60781
// exit ;
60779: GO 61186
// for i = 1 to mc_bases do
60781: LD_ADDR_VAR 0 2
60785: PUSH
60786: DOUBLE
60787: LD_INT 1
60789: DEC
60790: ST_TO_ADDR
60791: LD_EXP 63
60795: PUSH
60796: FOR_TO
60797: IFFALSE 61184
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
60799: LD_EXP 71
60803: PUSH
60804: LD_VAR 0 2
60808: ARRAY
60809: NOT
60810: PUSH
60811: LD_EXP 63
60815: PUSH
60816: LD_VAR 0 2
60820: ARRAY
60821: PPUSH
60822: LD_INT 30
60824: PUSH
60825: LD_INT 3
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PPUSH
60832: CALL_OW 72
60836: NOT
60837: OR
60838: IFFALSE 60842
// continue ;
60840: GO 60796
// busy := false ;
60842: LD_ADDR_VAR 0 8
60846: PUSH
60847: LD_INT 0
60849: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
60850: LD_ADDR_VAR 0 4
60854: PUSH
60855: LD_EXP 63
60859: PUSH
60860: LD_VAR 0 2
60864: ARRAY
60865: PPUSH
60866: LD_INT 30
60868: PUSH
60869: LD_INT 3
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PPUSH
60876: CALL_OW 72
60880: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
60881: LD_ADDR_VAR 0 6
60885: PUSH
60886: LD_EXP 71
60890: PUSH
60891: LD_VAR 0 2
60895: ARRAY
60896: PPUSH
60897: LD_INT 2
60899: PUSH
60900: LD_INT 30
60902: PUSH
60903: LD_INT 32
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 30
60912: PUSH
60913: LD_INT 33
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: LIST
60924: PPUSH
60925: CALL_OW 72
60929: ST_TO_ADDR
// if not t then
60930: LD_VAR 0 6
60934: NOT
60935: IFFALSE 60939
// continue ;
60937: GO 60796
// for j in tmp do
60939: LD_ADDR_VAR 0 3
60943: PUSH
60944: LD_VAR 0 4
60948: PUSH
60949: FOR_IN
60950: IFFALSE 60980
// if not BuildingStatus ( j ) = bs_idle then
60952: LD_VAR 0 3
60956: PPUSH
60957: CALL_OW 461
60961: PUSH
60962: LD_INT 2
60964: EQUAL
60965: NOT
60966: IFFALSE 60978
// begin busy := true ;
60968: LD_ADDR_VAR 0 8
60972: PUSH
60973: LD_INT 1
60975: ST_TO_ADDR
// break ;
60976: GO 60980
// end ;
60978: GO 60949
60980: POP
60981: POP
// if busy then
60982: LD_VAR 0 8
60986: IFFALSE 60990
// continue ;
60988: GO 60796
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
60990: LD_ADDR_VAR 0 7
60994: PUSH
60995: LD_VAR 0 6
60999: PPUSH
61000: LD_INT 35
61002: PUSH
61003: LD_INT 0
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PPUSH
61010: CALL_OW 72
61014: ST_TO_ADDR
// if tw then
61015: LD_VAR 0 7
61019: IFFALSE 61096
// begin tw := tw [ 1 ] ;
61021: LD_ADDR_VAR 0 7
61025: PUSH
61026: LD_VAR 0 7
61030: PUSH
61031: LD_INT 1
61033: ARRAY
61034: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
61035: LD_ADDR_VAR 0 9
61039: PUSH
61040: LD_VAR 0 7
61044: PPUSH
61045: LD_EXP 88
61049: PUSH
61050: LD_VAR 0 2
61054: ARRAY
61055: PPUSH
61056: CALL 22372 0 2
61060: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
61061: LD_EXP 102
61065: PUSH
61066: LD_VAR 0 2
61070: ARRAY
61071: IFFALSE 61094
// if not weapon in mc_allowed_tower_weapons [ i ] then
61073: LD_VAR 0 9
61077: PUSH
61078: LD_EXP 102
61082: PUSH
61083: LD_VAR 0 2
61087: ARRAY
61088: IN
61089: NOT
61090: IFFALSE 61094
// continue ;
61092: GO 60796
// end else
61094: GO 61159
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
61096: LD_ADDR_VAR 0 5
61100: PUSH
61101: LD_EXP 71
61105: PUSH
61106: LD_VAR 0 2
61110: ARRAY
61111: PPUSH
61112: LD_VAR 0 4
61116: PPUSH
61117: CALL 47874 0 2
61121: ST_TO_ADDR
// if not tmp2 then
61122: LD_VAR 0 5
61126: NOT
61127: IFFALSE 61131
// continue ;
61129: GO 60796
// tw := tmp2 [ 1 ] ;
61131: LD_ADDR_VAR 0 7
61135: PUSH
61136: LD_VAR 0 5
61140: PUSH
61141: LD_INT 1
61143: ARRAY
61144: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
61145: LD_ADDR_VAR 0 9
61149: PUSH
61150: LD_VAR 0 5
61154: PUSH
61155: LD_INT 2
61157: ARRAY
61158: ST_TO_ADDR
// end ; if not weapon then
61159: LD_VAR 0 9
61163: NOT
61164: IFFALSE 61168
// continue ;
61166: GO 60796
// ComPlaceWeapon ( tw , weapon ) ;
61168: LD_VAR 0 7
61172: PPUSH
61173: LD_VAR 0 9
61177: PPUSH
61178: CALL_OW 148
// end ;
61182: GO 60796
61184: POP
61185: POP
// end ;
61186: LD_VAR 0 1
61190: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
61191: LD_INT 0
61193: PPUSH
61194: PPUSH
61195: PPUSH
61196: PPUSH
61197: PPUSH
61198: PPUSH
// if not mc_bases then
61199: LD_EXP 63
61203: NOT
61204: IFFALSE 61208
// exit ;
61206: GO 61984
// for i = 1 to mc_bases do
61208: LD_ADDR_VAR 0 2
61212: PUSH
61213: DOUBLE
61214: LD_INT 1
61216: DEC
61217: ST_TO_ADDR
61218: LD_EXP 63
61222: PUSH
61223: FOR_TO
61224: IFFALSE 61982
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
61226: LD_EXP 76
61230: PUSH
61231: LD_VAR 0 2
61235: ARRAY
61236: NOT
61237: PUSH
61238: LD_EXP 76
61242: PUSH
61243: LD_VAR 0 2
61247: ARRAY
61248: PUSH
61249: LD_EXP 77
61253: PUSH
61254: LD_VAR 0 2
61258: ARRAY
61259: EQUAL
61260: OR
61261: PUSH
61262: LD_EXP 86
61266: PUSH
61267: LD_VAR 0 2
61271: ARRAY
61272: OR
61273: IFFALSE 61277
// continue ;
61275: GO 61223
// if mc_miners [ i ] then
61277: LD_EXP 77
61281: PUSH
61282: LD_VAR 0 2
61286: ARRAY
61287: IFFALSE 61669
// begin for j = mc_miners [ i ] downto 1 do
61289: LD_ADDR_VAR 0 3
61293: PUSH
61294: DOUBLE
61295: LD_EXP 77
61299: PUSH
61300: LD_VAR 0 2
61304: ARRAY
61305: INC
61306: ST_TO_ADDR
61307: LD_INT 1
61309: PUSH
61310: FOR_DOWNTO
61311: IFFALSE 61667
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
61313: LD_EXP 77
61317: PUSH
61318: LD_VAR 0 2
61322: ARRAY
61323: PUSH
61324: LD_VAR 0 3
61328: ARRAY
61329: PPUSH
61330: CALL_OW 301
61334: PUSH
61335: LD_EXP 77
61339: PUSH
61340: LD_VAR 0 2
61344: ARRAY
61345: PUSH
61346: LD_VAR 0 3
61350: ARRAY
61351: PPUSH
61352: CALL_OW 257
61356: PUSH
61357: LD_INT 1
61359: NONEQUAL
61360: OR
61361: IFFALSE 61424
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
61363: LD_ADDR_VAR 0 5
61367: PUSH
61368: LD_EXP 77
61372: PUSH
61373: LD_VAR 0 2
61377: ARRAY
61378: PUSH
61379: LD_EXP 77
61383: PUSH
61384: LD_VAR 0 2
61388: ARRAY
61389: PUSH
61390: LD_VAR 0 3
61394: ARRAY
61395: DIFF
61396: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
61397: LD_ADDR_EXP 77
61401: PUSH
61402: LD_EXP 77
61406: PPUSH
61407: LD_VAR 0 2
61411: PPUSH
61412: LD_VAR 0 5
61416: PPUSH
61417: CALL_OW 1
61421: ST_TO_ADDR
// continue ;
61422: GO 61310
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
61424: LD_EXP 77
61428: PUSH
61429: LD_VAR 0 2
61433: ARRAY
61434: PUSH
61435: LD_VAR 0 3
61439: ARRAY
61440: PPUSH
61441: CALL_OW 257
61445: PUSH
61446: LD_INT 1
61448: EQUAL
61449: PUSH
61450: LD_EXP 77
61454: PUSH
61455: LD_VAR 0 2
61459: ARRAY
61460: PUSH
61461: LD_VAR 0 3
61465: ARRAY
61466: PPUSH
61467: CALL_OW 459
61471: NOT
61472: AND
61473: PUSH
61474: LD_EXP 77
61478: PUSH
61479: LD_VAR 0 2
61483: ARRAY
61484: PUSH
61485: LD_VAR 0 3
61489: ARRAY
61490: PPUSH
61491: CALL_OW 314
61495: NOT
61496: AND
61497: IFFALSE 61665
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
61499: LD_EXP 77
61503: PUSH
61504: LD_VAR 0 2
61508: ARRAY
61509: PUSH
61510: LD_VAR 0 3
61514: ARRAY
61515: PPUSH
61516: CALL_OW 310
61520: IFFALSE 61543
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
61522: LD_EXP 77
61526: PUSH
61527: LD_VAR 0 2
61531: ARRAY
61532: PUSH
61533: LD_VAR 0 3
61537: ARRAY
61538: PPUSH
61539: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
61543: LD_EXP 77
61547: PUSH
61548: LD_VAR 0 2
61552: ARRAY
61553: PUSH
61554: LD_VAR 0 3
61558: ARRAY
61559: PPUSH
61560: CALL_OW 314
61564: NOT
61565: IFFALSE 61665
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
61567: LD_EXP 77
61571: PUSH
61572: LD_VAR 0 2
61576: ARRAY
61577: PUSH
61578: LD_VAR 0 3
61582: ARRAY
61583: PPUSH
61584: LD_EXP 76
61588: PUSH
61589: LD_VAR 0 2
61593: ARRAY
61594: PUSH
61595: LD_VAR 0 3
61599: PUSH
61600: LD_EXP 76
61604: PUSH
61605: LD_VAR 0 2
61609: ARRAY
61610: MOD
61611: PUSH
61612: LD_INT 1
61614: PLUS
61615: ARRAY
61616: PUSH
61617: LD_INT 1
61619: ARRAY
61620: PPUSH
61621: LD_EXP 76
61625: PUSH
61626: LD_VAR 0 2
61630: ARRAY
61631: PUSH
61632: LD_VAR 0 3
61636: PUSH
61637: LD_EXP 76
61641: PUSH
61642: LD_VAR 0 2
61646: ARRAY
61647: MOD
61648: PUSH
61649: LD_INT 1
61651: PLUS
61652: ARRAY
61653: PUSH
61654: LD_INT 2
61656: ARRAY
61657: PPUSH
61658: LD_INT 0
61660: PPUSH
61661: CALL_OW 193
// end ; end ;
61665: GO 61310
61667: POP
61668: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
61669: LD_ADDR_VAR 0 5
61673: PUSH
61674: LD_EXP 63
61678: PUSH
61679: LD_VAR 0 2
61683: ARRAY
61684: PPUSH
61685: LD_INT 2
61687: PUSH
61688: LD_INT 30
61690: PUSH
61691: LD_INT 4
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 30
61700: PUSH
61701: LD_INT 5
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 30
61710: PUSH
61711: LD_INT 32
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: PPUSH
61724: CALL_OW 72
61728: ST_TO_ADDR
// if not tmp then
61729: LD_VAR 0 5
61733: NOT
61734: IFFALSE 61738
// continue ;
61736: GO 61223
// list := [ ] ;
61738: LD_ADDR_VAR 0 6
61742: PUSH
61743: EMPTY
61744: ST_TO_ADDR
// for j in tmp do
61745: LD_ADDR_VAR 0 3
61749: PUSH
61750: LD_VAR 0 5
61754: PUSH
61755: FOR_IN
61756: IFFALSE 61825
// begin for k in UnitsInside ( j ) do
61758: LD_ADDR_VAR 0 4
61762: PUSH
61763: LD_VAR 0 3
61767: PPUSH
61768: CALL_OW 313
61772: PUSH
61773: FOR_IN
61774: IFFALSE 61821
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
61776: LD_VAR 0 4
61780: PPUSH
61781: CALL_OW 257
61785: PUSH
61786: LD_INT 1
61788: EQUAL
61789: PUSH
61790: LD_VAR 0 4
61794: PPUSH
61795: CALL_OW 459
61799: NOT
61800: AND
61801: IFFALSE 61819
// list := list ^ k ;
61803: LD_ADDR_VAR 0 6
61807: PUSH
61808: LD_VAR 0 6
61812: PUSH
61813: LD_VAR 0 4
61817: ADD
61818: ST_TO_ADDR
61819: GO 61773
61821: POP
61822: POP
// end ;
61823: GO 61755
61825: POP
61826: POP
// list := list diff mc_miners [ i ] ;
61827: LD_ADDR_VAR 0 6
61831: PUSH
61832: LD_VAR 0 6
61836: PUSH
61837: LD_EXP 77
61841: PUSH
61842: LD_VAR 0 2
61846: ARRAY
61847: DIFF
61848: ST_TO_ADDR
// if not list then
61849: LD_VAR 0 6
61853: NOT
61854: IFFALSE 61858
// continue ;
61856: GO 61223
// k := mc_mines [ i ] - mc_miners [ i ] ;
61858: LD_ADDR_VAR 0 4
61862: PUSH
61863: LD_EXP 76
61867: PUSH
61868: LD_VAR 0 2
61872: ARRAY
61873: PUSH
61874: LD_EXP 77
61878: PUSH
61879: LD_VAR 0 2
61883: ARRAY
61884: MINUS
61885: ST_TO_ADDR
// if k > list then
61886: LD_VAR 0 4
61890: PUSH
61891: LD_VAR 0 6
61895: GREATER
61896: IFFALSE 61908
// k := list ;
61898: LD_ADDR_VAR 0 4
61902: PUSH
61903: LD_VAR 0 6
61907: ST_TO_ADDR
// for j = 1 to k do
61908: LD_ADDR_VAR 0 3
61912: PUSH
61913: DOUBLE
61914: LD_INT 1
61916: DEC
61917: ST_TO_ADDR
61918: LD_VAR 0 4
61922: PUSH
61923: FOR_TO
61924: IFFALSE 61978
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
61926: LD_ADDR_EXP 77
61930: PUSH
61931: LD_EXP 77
61935: PPUSH
61936: LD_VAR 0 2
61940: PUSH
61941: LD_EXP 77
61945: PUSH
61946: LD_VAR 0 2
61950: ARRAY
61951: PUSH
61952: LD_INT 1
61954: PLUS
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PPUSH
61960: LD_VAR 0 6
61964: PUSH
61965: LD_VAR 0 3
61969: ARRAY
61970: PPUSH
61971: CALL 17402 0 3
61975: ST_TO_ADDR
61976: GO 61923
61978: POP
61979: POP
// end ;
61980: GO 61223
61982: POP
61983: POP
// end ;
61984: LD_VAR 0 1
61988: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
61989: LD_INT 0
61991: PPUSH
61992: PPUSH
61993: PPUSH
61994: PPUSH
61995: PPUSH
61996: PPUSH
61997: PPUSH
61998: PPUSH
61999: PPUSH
62000: PPUSH
// if not mc_bases then
62001: LD_EXP 63
62005: NOT
62006: IFFALSE 62010
// exit ;
62008: GO 63760
// for i = 1 to mc_bases do
62010: LD_ADDR_VAR 0 2
62014: PUSH
62015: DOUBLE
62016: LD_INT 1
62018: DEC
62019: ST_TO_ADDR
62020: LD_EXP 63
62024: PUSH
62025: FOR_TO
62026: IFFALSE 63758
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
62028: LD_EXP 63
62032: PUSH
62033: LD_VAR 0 2
62037: ARRAY
62038: NOT
62039: PUSH
62040: LD_EXP 70
62044: PUSH
62045: LD_VAR 0 2
62049: ARRAY
62050: OR
62051: IFFALSE 62055
// continue ;
62053: GO 62025
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
62055: LD_EXP 79
62059: PUSH
62060: LD_VAR 0 2
62064: ARRAY
62065: NOT
62066: PUSH
62067: LD_EXP 80
62071: PUSH
62072: LD_VAR 0 2
62076: ARRAY
62077: AND
62078: IFFALSE 62116
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
62080: LD_ADDR_EXP 80
62084: PUSH
62085: LD_EXP 80
62089: PPUSH
62090: LD_VAR 0 2
62094: PPUSH
62095: EMPTY
62096: PPUSH
62097: CALL_OW 1
62101: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
62102: LD_VAR 0 2
62106: PPUSH
62107: LD_INT 107
62109: PPUSH
62110: CALL 52990 0 2
// continue ;
62114: GO 62025
// end ; target := [ ] ;
62116: LD_ADDR_VAR 0 6
62120: PUSH
62121: EMPTY
62122: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
62123: LD_ADDR_VAR 0 3
62127: PUSH
62128: DOUBLE
62129: LD_EXP 79
62133: PUSH
62134: LD_VAR 0 2
62138: ARRAY
62139: INC
62140: ST_TO_ADDR
62141: LD_INT 1
62143: PUSH
62144: FOR_DOWNTO
62145: IFFALSE 62405
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
62147: LD_EXP 79
62151: PUSH
62152: LD_VAR 0 2
62156: ARRAY
62157: PUSH
62158: LD_VAR 0 3
62162: ARRAY
62163: PUSH
62164: LD_INT 2
62166: ARRAY
62167: PPUSH
62168: LD_EXP 79
62172: PUSH
62173: LD_VAR 0 2
62177: ARRAY
62178: PUSH
62179: LD_VAR 0 3
62183: ARRAY
62184: PUSH
62185: LD_INT 3
62187: ARRAY
62188: PPUSH
62189: CALL_OW 488
62193: PUSH
62194: LD_EXP 79
62198: PUSH
62199: LD_VAR 0 2
62203: ARRAY
62204: PUSH
62205: LD_VAR 0 3
62209: ARRAY
62210: PUSH
62211: LD_INT 2
62213: ARRAY
62214: PPUSH
62215: LD_EXP 79
62219: PUSH
62220: LD_VAR 0 2
62224: ARRAY
62225: PUSH
62226: LD_VAR 0 3
62230: ARRAY
62231: PUSH
62232: LD_INT 3
62234: ARRAY
62235: PPUSH
62236: CALL_OW 284
62240: PUSH
62241: LD_INT 0
62243: EQUAL
62244: AND
62245: IFFALSE 62300
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
62247: LD_ADDR_VAR 0 5
62251: PUSH
62252: LD_EXP 79
62256: PUSH
62257: LD_VAR 0 2
62261: ARRAY
62262: PPUSH
62263: LD_VAR 0 3
62267: PPUSH
62268: CALL_OW 3
62272: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
62273: LD_ADDR_EXP 79
62277: PUSH
62278: LD_EXP 79
62282: PPUSH
62283: LD_VAR 0 2
62287: PPUSH
62288: LD_VAR 0 5
62292: PPUSH
62293: CALL_OW 1
62297: ST_TO_ADDR
// continue ;
62298: GO 62144
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
62300: LD_EXP 63
62304: PUSH
62305: LD_VAR 0 2
62309: ARRAY
62310: PUSH
62311: LD_INT 1
62313: ARRAY
62314: PPUSH
62315: CALL_OW 255
62319: PPUSH
62320: LD_EXP 79
62324: PUSH
62325: LD_VAR 0 2
62329: ARRAY
62330: PUSH
62331: LD_VAR 0 3
62335: ARRAY
62336: PUSH
62337: LD_INT 2
62339: ARRAY
62340: PPUSH
62341: LD_EXP 79
62345: PUSH
62346: LD_VAR 0 2
62350: ARRAY
62351: PUSH
62352: LD_VAR 0 3
62356: ARRAY
62357: PUSH
62358: LD_INT 3
62360: ARRAY
62361: PPUSH
62362: LD_INT 30
62364: PPUSH
62365: CALL 18298 0 4
62369: PUSH
62370: LD_INT 4
62372: ARRAY
62373: PUSH
62374: LD_INT 0
62376: EQUAL
62377: IFFALSE 62403
// begin target := mc_crates [ i ] [ j ] ;
62379: LD_ADDR_VAR 0 6
62383: PUSH
62384: LD_EXP 79
62388: PUSH
62389: LD_VAR 0 2
62393: ARRAY
62394: PUSH
62395: LD_VAR 0 3
62399: ARRAY
62400: ST_TO_ADDR
// break ;
62401: GO 62405
// end ; end ;
62403: GO 62144
62405: POP
62406: POP
// if not target then
62407: LD_VAR 0 6
62411: NOT
62412: IFFALSE 62416
// continue ;
62414: GO 62025
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
62416: LD_ADDR_VAR 0 7
62420: PUSH
62421: LD_EXP 82
62425: PUSH
62426: LD_VAR 0 2
62430: ARRAY
62431: PPUSH
62432: LD_INT 2
62434: PUSH
62435: LD_INT 3
62437: PUSH
62438: LD_INT 58
62440: PUSH
62441: EMPTY
62442: LIST
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 61
62450: PUSH
62451: EMPTY
62452: LIST
62453: PUSH
62454: LD_INT 33
62456: PUSH
62457: LD_INT 5
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 33
62466: PUSH
62467: LD_INT 3
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 2
62483: PUSH
62484: LD_INT 34
62486: PUSH
62487: LD_INT 32
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 34
62496: PUSH
62497: LD_INT 51
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 34
62506: PUSH
62507: LD_INT 12
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PPUSH
62524: CALL_OW 72
62528: ST_TO_ADDR
// if not cargo then
62529: LD_VAR 0 7
62533: NOT
62534: IFFALSE 63177
// begin if mc_crates_collector [ i ] < 5 then
62536: LD_EXP 80
62540: PUSH
62541: LD_VAR 0 2
62545: ARRAY
62546: PUSH
62547: LD_INT 5
62549: LESS
62550: IFFALSE 62916
// begin if mc_ape [ i ] then
62552: LD_EXP 92
62556: PUSH
62557: LD_VAR 0 2
62561: ARRAY
62562: IFFALSE 62609
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
62564: LD_ADDR_VAR 0 5
62568: PUSH
62569: LD_EXP 92
62573: PUSH
62574: LD_VAR 0 2
62578: ARRAY
62579: PPUSH
62580: LD_INT 25
62582: PUSH
62583: LD_INT 16
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 24
62592: PUSH
62593: LD_INT 750
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PPUSH
62604: CALL_OW 72
62608: ST_TO_ADDR
// if not tmp then
62609: LD_VAR 0 5
62613: NOT
62614: IFFALSE 62661
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
62616: LD_ADDR_VAR 0 5
62620: PUSH
62621: LD_EXP 63
62625: PUSH
62626: LD_VAR 0 2
62630: ARRAY
62631: PPUSH
62632: LD_INT 25
62634: PUSH
62635: LD_INT 2
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 24
62644: PUSH
62645: LD_INT 750
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PPUSH
62656: CALL_OW 72
62660: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
62661: LD_EXP 92
62665: PUSH
62666: LD_VAR 0 2
62670: ARRAY
62671: PUSH
62672: LD_EXP 63
62676: PUSH
62677: LD_VAR 0 2
62681: ARRAY
62682: PPUSH
62683: LD_INT 25
62685: PUSH
62686: LD_INT 2
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PUSH
62693: LD_INT 24
62695: PUSH
62696: LD_INT 750
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PPUSH
62707: CALL_OW 72
62711: AND
62712: PUSH
62713: LD_VAR 0 5
62717: PUSH
62718: LD_INT 5
62720: LESS
62721: AND
62722: IFFALSE 62804
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
62724: LD_ADDR_VAR 0 3
62728: PUSH
62729: LD_EXP 63
62733: PUSH
62734: LD_VAR 0 2
62738: ARRAY
62739: PPUSH
62740: LD_INT 25
62742: PUSH
62743: LD_INT 2
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 24
62752: PUSH
62753: LD_INT 750
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PPUSH
62764: CALL_OW 72
62768: PUSH
62769: FOR_IN
62770: IFFALSE 62802
// begin tmp := tmp union j ;
62772: LD_ADDR_VAR 0 5
62776: PUSH
62777: LD_VAR 0 5
62781: PUSH
62782: LD_VAR 0 3
62786: UNION
62787: ST_TO_ADDR
// if tmp >= 5 then
62788: LD_VAR 0 5
62792: PUSH
62793: LD_INT 5
62795: GREATEREQUAL
62796: IFFALSE 62800
// break ;
62798: GO 62802
// end ;
62800: GO 62769
62802: POP
62803: POP
// end ; if not tmp then
62804: LD_VAR 0 5
62808: NOT
62809: IFFALSE 62813
// continue ;
62811: GO 62025
// for j in tmp do
62813: LD_ADDR_VAR 0 3
62817: PUSH
62818: LD_VAR 0 5
62822: PUSH
62823: FOR_IN
62824: IFFALSE 62914
// if not GetTag ( j ) then
62826: LD_VAR 0 3
62830: PPUSH
62831: CALL_OW 110
62835: NOT
62836: IFFALSE 62912
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
62838: LD_ADDR_EXP 80
62842: PUSH
62843: LD_EXP 80
62847: PPUSH
62848: LD_VAR 0 2
62852: PUSH
62853: LD_EXP 80
62857: PUSH
62858: LD_VAR 0 2
62862: ARRAY
62863: PUSH
62864: LD_INT 1
62866: PLUS
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PPUSH
62872: LD_VAR 0 3
62876: PPUSH
62877: CALL 17402 0 3
62881: ST_TO_ADDR
// SetTag ( j , 107 ) ;
62882: LD_VAR 0 3
62886: PPUSH
62887: LD_INT 107
62889: PPUSH
62890: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
62894: LD_EXP 80
62898: PUSH
62899: LD_VAR 0 2
62903: ARRAY
62904: PUSH
62905: LD_INT 5
62907: GREATEREQUAL
62908: IFFALSE 62912
// break ;
62910: GO 62914
// end ;
62912: GO 62823
62914: POP
62915: POP
// end ; if mc_crates_collector [ i ] and target then
62916: LD_EXP 80
62920: PUSH
62921: LD_VAR 0 2
62925: ARRAY
62926: PUSH
62927: LD_VAR 0 6
62931: AND
62932: IFFALSE 63175
// begin if mc_crates_collector [ i ] < target [ 1 ] then
62934: LD_EXP 80
62938: PUSH
62939: LD_VAR 0 2
62943: ARRAY
62944: PUSH
62945: LD_VAR 0 6
62949: PUSH
62950: LD_INT 1
62952: ARRAY
62953: LESS
62954: IFFALSE 62974
// tmp := mc_crates_collector [ i ] else
62956: LD_ADDR_VAR 0 5
62960: PUSH
62961: LD_EXP 80
62965: PUSH
62966: LD_VAR 0 2
62970: ARRAY
62971: ST_TO_ADDR
62972: GO 62988
// tmp := target [ 1 ] ;
62974: LD_ADDR_VAR 0 5
62978: PUSH
62979: LD_VAR 0 6
62983: PUSH
62984: LD_INT 1
62986: ARRAY
62987: ST_TO_ADDR
// k := 0 ;
62988: LD_ADDR_VAR 0 4
62992: PUSH
62993: LD_INT 0
62995: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
62996: LD_ADDR_VAR 0 3
63000: PUSH
63001: LD_EXP 80
63005: PUSH
63006: LD_VAR 0 2
63010: ARRAY
63011: PUSH
63012: FOR_IN
63013: IFFALSE 63173
// begin k := k + 1 ;
63015: LD_ADDR_VAR 0 4
63019: PUSH
63020: LD_VAR 0 4
63024: PUSH
63025: LD_INT 1
63027: PLUS
63028: ST_TO_ADDR
// if k > tmp then
63029: LD_VAR 0 4
63033: PUSH
63034: LD_VAR 0 5
63038: GREATER
63039: IFFALSE 63043
// break ;
63041: GO 63173
// if not GetClass ( j ) in [ 2 , 16 ] then
63043: LD_VAR 0 3
63047: PPUSH
63048: CALL_OW 257
63052: PUSH
63053: LD_INT 2
63055: PUSH
63056: LD_INT 16
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: IN
63063: NOT
63064: IFFALSE 63117
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
63066: LD_ADDR_EXP 80
63070: PUSH
63071: LD_EXP 80
63075: PPUSH
63076: LD_VAR 0 2
63080: PPUSH
63081: LD_EXP 80
63085: PUSH
63086: LD_VAR 0 2
63090: ARRAY
63091: PUSH
63092: LD_VAR 0 3
63096: DIFF
63097: PPUSH
63098: CALL_OW 1
63102: ST_TO_ADDR
// SetTag ( j , 0 ) ;
63103: LD_VAR 0 3
63107: PPUSH
63108: LD_INT 0
63110: PPUSH
63111: CALL_OW 109
// continue ;
63115: GO 63012
// end ; if IsInUnit ( j ) then
63117: LD_VAR 0 3
63121: PPUSH
63122: CALL_OW 310
63126: IFFALSE 63137
// ComExitBuilding ( j ) ;
63128: LD_VAR 0 3
63132: PPUSH
63133: CALL_OW 122
// wait ( 3 ) ;
63137: LD_INT 3
63139: PPUSH
63140: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
63144: LD_VAR 0 3
63148: PPUSH
63149: LD_VAR 0 6
63153: PUSH
63154: LD_INT 2
63156: ARRAY
63157: PPUSH
63158: LD_VAR 0 6
63162: PUSH
63163: LD_INT 3
63165: ARRAY
63166: PPUSH
63167: CALL_OW 117
// end ;
63171: GO 63012
63173: POP
63174: POP
// end ; end else
63175: GO 63756
// begin for j in cargo do
63177: LD_ADDR_VAR 0 3
63181: PUSH
63182: LD_VAR 0 7
63186: PUSH
63187: FOR_IN
63188: IFFALSE 63754
// begin if GetTag ( j ) <> 0 then
63190: LD_VAR 0 3
63194: PPUSH
63195: CALL_OW 110
63199: PUSH
63200: LD_INT 0
63202: NONEQUAL
63203: IFFALSE 63207
// continue ;
63205: GO 63187
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
63207: LD_VAR 0 3
63211: PPUSH
63212: CALL_OW 256
63216: PUSH
63217: LD_INT 1000
63219: LESS
63220: PUSH
63221: LD_VAR 0 3
63225: PPUSH
63226: LD_EXP 87
63230: PUSH
63231: LD_VAR 0 2
63235: ARRAY
63236: PPUSH
63237: CALL_OW 308
63241: NOT
63242: AND
63243: IFFALSE 63265
// ComMoveToArea ( j , mc_parking [ i ] ) ;
63245: LD_VAR 0 3
63249: PPUSH
63250: LD_EXP 87
63254: PUSH
63255: LD_VAR 0 2
63259: ARRAY
63260: PPUSH
63261: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
63265: LD_VAR 0 3
63269: PPUSH
63270: CALL_OW 256
63274: PUSH
63275: LD_INT 1000
63277: LESS
63278: PUSH
63279: LD_VAR 0 3
63283: PPUSH
63284: LD_EXP 87
63288: PUSH
63289: LD_VAR 0 2
63293: ARRAY
63294: PPUSH
63295: CALL_OW 308
63299: AND
63300: IFFALSE 63304
// continue ;
63302: GO 63187
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
63304: LD_VAR 0 3
63308: PPUSH
63309: CALL_OW 262
63313: PUSH
63314: LD_INT 2
63316: EQUAL
63317: PUSH
63318: LD_VAR 0 3
63322: PPUSH
63323: CALL_OW 261
63327: PUSH
63328: LD_INT 15
63330: LESS
63331: AND
63332: IFFALSE 63336
// continue ;
63334: GO 63187
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
63336: LD_VAR 0 3
63340: PPUSH
63341: CALL_OW 262
63345: PUSH
63346: LD_INT 1
63348: EQUAL
63349: PUSH
63350: LD_VAR 0 3
63354: PPUSH
63355: CALL_OW 261
63359: PUSH
63360: LD_INT 10
63362: LESS
63363: AND
63364: IFFALSE 63693
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
63366: LD_ADDR_VAR 0 8
63370: PUSH
63371: LD_EXP 63
63375: PUSH
63376: LD_VAR 0 2
63380: ARRAY
63381: PPUSH
63382: LD_INT 2
63384: PUSH
63385: LD_INT 30
63387: PUSH
63388: LD_INT 0
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 30
63397: PUSH
63398: LD_INT 1
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: LIST
63409: PPUSH
63410: CALL_OW 72
63414: ST_TO_ADDR
// if not depot then
63415: LD_VAR 0 8
63419: NOT
63420: IFFALSE 63424
// continue ;
63422: GO 63187
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
63424: LD_VAR 0 3
63428: PPUSH
63429: LD_VAR 0 8
63433: PPUSH
63434: LD_VAR 0 3
63438: PPUSH
63439: CALL_OW 74
63443: PPUSH
63444: CALL_OW 296
63448: PUSH
63449: LD_INT 6
63451: LESS
63452: IFFALSE 63468
// SetFuel ( j , 100 ) else
63454: LD_VAR 0 3
63458: PPUSH
63459: LD_INT 100
63461: PPUSH
63462: CALL_OW 240
63466: GO 63693
// if GetFuel ( j ) = 0 then
63468: LD_VAR 0 3
63472: PPUSH
63473: CALL_OW 261
63477: PUSH
63478: LD_INT 0
63480: EQUAL
63481: IFFALSE 63693
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
63483: LD_ADDR_EXP 82
63487: PUSH
63488: LD_EXP 82
63492: PPUSH
63493: LD_VAR 0 2
63497: PPUSH
63498: LD_EXP 82
63502: PUSH
63503: LD_VAR 0 2
63507: ARRAY
63508: PUSH
63509: LD_VAR 0 3
63513: DIFF
63514: PPUSH
63515: CALL_OW 1
63519: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
63520: LD_VAR 0 3
63524: PPUSH
63525: CALL_OW 263
63529: PUSH
63530: LD_INT 1
63532: EQUAL
63533: IFFALSE 63549
// ComExitVehicle ( IsInUnit ( j ) ) ;
63535: LD_VAR 0 3
63539: PPUSH
63540: CALL_OW 310
63544: PPUSH
63545: CALL_OW 121
// if GetControl ( j ) = control_remote then
63549: LD_VAR 0 3
63553: PPUSH
63554: CALL_OW 263
63558: PUSH
63559: LD_INT 2
63561: EQUAL
63562: IFFALSE 63573
// ComUnlink ( j ) ;
63564: LD_VAR 0 3
63568: PPUSH
63569: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
63573: LD_ADDR_VAR 0 9
63577: PUSH
63578: LD_VAR 0 2
63582: PPUSH
63583: LD_INT 3
63585: PPUSH
63586: CALL 73046 0 2
63590: ST_TO_ADDR
// if fac then
63591: LD_VAR 0 9
63595: IFFALSE 63691
// begin for k in fac do
63597: LD_ADDR_VAR 0 4
63601: PUSH
63602: LD_VAR 0 9
63606: PUSH
63607: FOR_IN
63608: IFFALSE 63689
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
63610: LD_ADDR_VAR 0 10
63614: PUSH
63615: LD_VAR 0 9
63619: PPUSH
63620: LD_VAR 0 3
63624: PPUSH
63625: CALL_OW 265
63629: PPUSH
63630: LD_VAR 0 3
63634: PPUSH
63635: CALL_OW 262
63639: PPUSH
63640: LD_VAR 0 3
63644: PPUSH
63645: CALL_OW 263
63649: PPUSH
63650: LD_VAR 0 3
63654: PPUSH
63655: CALL_OW 264
63659: PPUSH
63660: CALL 14934 0 5
63664: ST_TO_ADDR
// if components then
63665: LD_VAR 0 10
63669: IFFALSE 63687
// begin MC_InsertProduceList ( i , components ) ;
63671: LD_VAR 0 2
63675: PPUSH
63676: LD_VAR 0 10
63680: PPUSH
63681: CALL 72591 0 2
// break ;
63685: GO 63689
// end ; end ;
63687: GO 63607
63689: POP
63690: POP
// end ; continue ;
63691: GO 63187
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
63693: LD_VAR 0 3
63697: PPUSH
63698: LD_INT 1
63700: PPUSH
63701: CALL_OW 289
63705: PUSH
63706: LD_INT 100
63708: LESS
63709: PUSH
63710: LD_VAR 0 3
63714: PPUSH
63715: CALL_OW 314
63719: NOT
63720: AND
63721: IFFALSE 63750
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
63723: LD_VAR 0 3
63727: PPUSH
63728: LD_VAR 0 6
63732: PUSH
63733: LD_INT 2
63735: ARRAY
63736: PPUSH
63737: LD_VAR 0 6
63741: PUSH
63742: LD_INT 3
63744: ARRAY
63745: PPUSH
63746: CALL_OW 117
// break ;
63750: GO 63754
// end ;
63752: GO 63187
63754: POP
63755: POP
// end ; end ;
63756: GO 62025
63758: POP
63759: POP
// end ;
63760: LD_VAR 0 1
63764: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
63765: LD_INT 0
63767: PPUSH
63768: PPUSH
63769: PPUSH
63770: PPUSH
// if not mc_bases then
63771: LD_EXP 63
63775: NOT
63776: IFFALSE 63780
// exit ;
63778: GO 63941
// for i = 1 to mc_bases do
63780: LD_ADDR_VAR 0 2
63784: PUSH
63785: DOUBLE
63786: LD_INT 1
63788: DEC
63789: ST_TO_ADDR
63790: LD_EXP 63
63794: PUSH
63795: FOR_TO
63796: IFFALSE 63939
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
63798: LD_ADDR_VAR 0 4
63802: PUSH
63803: LD_EXP 82
63807: PUSH
63808: LD_VAR 0 2
63812: ARRAY
63813: PUSH
63814: LD_EXP 85
63818: PUSH
63819: LD_VAR 0 2
63823: ARRAY
63824: UNION
63825: PPUSH
63826: LD_INT 33
63828: PUSH
63829: LD_INT 2
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PPUSH
63836: CALL_OW 72
63840: ST_TO_ADDR
// if tmp then
63841: LD_VAR 0 4
63845: IFFALSE 63937
// for j in tmp do
63847: LD_ADDR_VAR 0 3
63851: PUSH
63852: LD_VAR 0 4
63856: PUSH
63857: FOR_IN
63858: IFFALSE 63935
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
63860: LD_VAR 0 3
63864: PPUSH
63865: CALL_OW 312
63869: NOT
63870: PUSH
63871: LD_VAR 0 3
63875: PPUSH
63876: CALL_OW 256
63880: PUSH
63881: LD_INT 250
63883: GREATEREQUAL
63884: AND
63885: IFFALSE 63898
// Connect ( j ) else
63887: LD_VAR 0 3
63891: PPUSH
63892: CALL 20335 0 1
63896: GO 63933
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
63898: LD_VAR 0 3
63902: PPUSH
63903: CALL_OW 256
63907: PUSH
63908: LD_INT 250
63910: LESS
63911: PUSH
63912: LD_VAR 0 3
63916: PPUSH
63917: CALL_OW 312
63921: AND
63922: IFFALSE 63933
// ComUnlink ( j ) ;
63924: LD_VAR 0 3
63928: PPUSH
63929: CALL_OW 136
63933: GO 63857
63935: POP
63936: POP
// end ;
63937: GO 63795
63939: POP
63940: POP
// end ;
63941: LD_VAR 0 1
63945: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
63946: LD_INT 0
63948: PPUSH
63949: PPUSH
63950: PPUSH
63951: PPUSH
63952: PPUSH
// if not mc_bases then
63953: LD_EXP 63
63957: NOT
63958: IFFALSE 63962
// exit ;
63960: GO 64407
// for i = 1 to mc_bases do
63962: LD_ADDR_VAR 0 2
63966: PUSH
63967: DOUBLE
63968: LD_INT 1
63970: DEC
63971: ST_TO_ADDR
63972: LD_EXP 63
63976: PUSH
63977: FOR_TO
63978: IFFALSE 64405
// begin if not mc_produce [ i ] then
63980: LD_EXP 84
63984: PUSH
63985: LD_VAR 0 2
63989: ARRAY
63990: NOT
63991: IFFALSE 63995
// continue ;
63993: GO 63977
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
63995: LD_ADDR_VAR 0 5
63999: PUSH
64000: LD_EXP 63
64004: PUSH
64005: LD_VAR 0 2
64009: ARRAY
64010: PPUSH
64011: LD_INT 30
64013: PUSH
64014: LD_INT 3
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PPUSH
64021: CALL_OW 72
64025: ST_TO_ADDR
// if not fac then
64026: LD_VAR 0 5
64030: NOT
64031: IFFALSE 64035
// continue ;
64033: GO 63977
// for j in fac do
64035: LD_ADDR_VAR 0 3
64039: PUSH
64040: LD_VAR 0 5
64044: PUSH
64045: FOR_IN
64046: IFFALSE 64401
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
64048: LD_VAR 0 3
64052: PPUSH
64053: CALL_OW 461
64057: PUSH
64058: LD_INT 2
64060: NONEQUAL
64061: PUSH
64062: LD_VAR 0 3
64066: PPUSH
64067: LD_INT 15
64069: PPUSH
64070: CALL 19995 0 2
64074: PUSH
64075: LD_INT 4
64077: ARRAY
64078: OR
64079: IFFALSE 64083
// continue ;
64081: GO 64045
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
64083: LD_VAR 0 3
64087: PPUSH
64088: LD_EXP 84
64092: PUSH
64093: LD_VAR 0 2
64097: ARRAY
64098: PUSH
64099: LD_INT 1
64101: ARRAY
64102: PUSH
64103: LD_INT 1
64105: ARRAY
64106: PPUSH
64107: LD_EXP 84
64111: PUSH
64112: LD_VAR 0 2
64116: ARRAY
64117: PUSH
64118: LD_INT 1
64120: ARRAY
64121: PUSH
64122: LD_INT 2
64124: ARRAY
64125: PPUSH
64126: LD_EXP 84
64130: PUSH
64131: LD_VAR 0 2
64135: ARRAY
64136: PUSH
64137: LD_INT 1
64139: ARRAY
64140: PUSH
64141: LD_INT 3
64143: ARRAY
64144: PPUSH
64145: LD_EXP 84
64149: PUSH
64150: LD_VAR 0 2
64154: ARRAY
64155: PUSH
64156: LD_INT 1
64158: ARRAY
64159: PUSH
64160: LD_INT 4
64162: ARRAY
64163: PPUSH
64164: CALL_OW 448
64168: PUSH
64169: LD_VAR 0 3
64173: PPUSH
64174: LD_EXP 84
64178: PUSH
64179: LD_VAR 0 2
64183: ARRAY
64184: PUSH
64185: LD_INT 1
64187: ARRAY
64188: PUSH
64189: LD_INT 1
64191: ARRAY
64192: PUSH
64193: LD_EXP 84
64197: PUSH
64198: LD_VAR 0 2
64202: ARRAY
64203: PUSH
64204: LD_INT 1
64206: ARRAY
64207: PUSH
64208: LD_INT 2
64210: ARRAY
64211: PUSH
64212: LD_EXP 84
64216: PUSH
64217: LD_VAR 0 2
64221: ARRAY
64222: PUSH
64223: LD_INT 1
64225: ARRAY
64226: PUSH
64227: LD_INT 3
64229: ARRAY
64230: PUSH
64231: LD_EXP 84
64235: PUSH
64236: LD_VAR 0 2
64240: ARRAY
64241: PUSH
64242: LD_INT 1
64244: ARRAY
64245: PUSH
64246: LD_INT 4
64248: ARRAY
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: PPUSH
64256: CALL 23666 0 2
64260: AND
64261: IFFALSE 64399
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
64263: LD_VAR 0 3
64267: PPUSH
64268: LD_EXP 84
64272: PUSH
64273: LD_VAR 0 2
64277: ARRAY
64278: PUSH
64279: LD_INT 1
64281: ARRAY
64282: PUSH
64283: LD_INT 1
64285: ARRAY
64286: PPUSH
64287: LD_EXP 84
64291: PUSH
64292: LD_VAR 0 2
64296: ARRAY
64297: PUSH
64298: LD_INT 1
64300: ARRAY
64301: PUSH
64302: LD_INT 2
64304: ARRAY
64305: PPUSH
64306: LD_EXP 84
64310: PUSH
64311: LD_VAR 0 2
64315: ARRAY
64316: PUSH
64317: LD_INT 1
64319: ARRAY
64320: PUSH
64321: LD_INT 3
64323: ARRAY
64324: PPUSH
64325: LD_EXP 84
64329: PUSH
64330: LD_VAR 0 2
64334: ARRAY
64335: PUSH
64336: LD_INT 1
64338: ARRAY
64339: PUSH
64340: LD_INT 4
64342: ARRAY
64343: PPUSH
64344: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
64348: LD_ADDR_VAR 0 4
64352: PUSH
64353: LD_EXP 84
64357: PUSH
64358: LD_VAR 0 2
64362: ARRAY
64363: PPUSH
64364: LD_INT 1
64366: PPUSH
64367: CALL_OW 3
64371: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
64372: LD_ADDR_EXP 84
64376: PUSH
64377: LD_EXP 84
64381: PPUSH
64382: LD_VAR 0 2
64386: PPUSH
64387: LD_VAR 0 4
64391: PPUSH
64392: CALL_OW 1
64396: ST_TO_ADDR
// break ;
64397: GO 64401
// end ; end ;
64399: GO 64045
64401: POP
64402: POP
// end ;
64403: GO 63977
64405: POP
64406: POP
// end ;
64407: LD_VAR 0 1
64411: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
64412: LD_INT 0
64414: PPUSH
64415: PPUSH
64416: PPUSH
// if not mc_bases then
64417: LD_EXP 63
64421: NOT
64422: IFFALSE 64426
// exit ;
64424: GO 64515
// for i = 1 to mc_bases do
64426: LD_ADDR_VAR 0 2
64430: PUSH
64431: DOUBLE
64432: LD_INT 1
64434: DEC
64435: ST_TO_ADDR
64436: LD_EXP 63
64440: PUSH
64441: FOR_TO
64442: IFFALSE 64513
// begin if mc_attack [ i ] then
64444: LD_EXP 83
64448: PUSH
64449: LD_VAR 0 2
64453: ARRAY
64454: IFFALSE 64511
// begin tmp := mc_attack [ i ] [ 1 ] ;
64456: LD_ADDR_VAR 0 3
64460: PUSH
64461: LD_EXP 83
64465: PUSH
64466: LD_VAR 0 2
64470: ARRAY
64471: PUSH
64472: LD_INT 1
64474: ARRAY
64475: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
64476: LD_ADDR_EXP 83
64480: PUSH
64481: LD_EXP 83
64485: PPUSH
64486: LD_VAR 0 2
64490: PPUSH
64491: EMPTY
64492: PPUSH
64493: CALL_OW 1
64497: ST_TO_ADDR
// Attack ( tmp ) ;
64498: LD_VAR 0 3
64502: PPUSH
64503: CALL 90562 0 1
// exit ;
64507: POP
64508: POP
64509: GO 64515
// end ; end ;
64511: GO 64441
64513: POP
64514: POP
// end ;
64515: LD_VAR 0 1
64519: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
64520: LD_INT 0
64522: PPUSH
64523: PPUSH
64524: PPUSH
64525: PPUSH
64526: PPUSH
64527: PPUSH
64528: PPUSH
// if not mc_bases then
64529: LD_EXP 63
64533: NOT
64534: IFFALSE 64538
// exit ;
64536: GO 65120
// for i = 1 to mc_bases do
64538: LD_ADDR_VAR 0 2
64542: PUSH
64543: DOUBLE
64544: LD_INT 1
64546: DEC
64547: ST_TO_ADDR
64548: LD_EXP 63
64552: PUSH
64553: FOR_TO
64554: IFFALSE 65118
// begin if not mc_bases [ i ] then
64556: LD_EXP 63
64560: PUSH
64561: LD_VAR 0 2
64565: ARRAY
64566: NOT
64567: IFFALSE 64571
// continue ;
64569: GO 64553
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
64571: LD_ADDR_VAR 0 7
64575: PUSH
64576: LD_EXP 63
64580: PUSH
64581: LD_VAR 0 2
64585: ARRAY
64586: PUSH
64587: LD_INT 1
64589: ARRAY
64590: PPUSH
64591: CALL 14238 0 1
64595: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
64596: LD_ADDR_EXP 86
64600: PUSH
64601: LD_EXP 86
64605: PPUSH
64606: LD_VAR 0 2
64610: PPUSH
64611: LD_EXP 63
64615: PUSH
64616: LD_VAR 0 2
64620: ARRAY
64621: PUSH
64622: LD_INT 1
64624: ARRAY
64625: PPUSH
64626: CALL_OW 255
64630: PPUSH
64631: LD_EXP 88
64635: PUSH
64636: LD_VAR 0 2
64640: ARRAY
64641: PPUSH
64642: CALL 14203 0 2
64646: PPUSH
64647: CALL_OW 1
64651: ST_TO_ADDR
// if not mc_scan [ i ] then
64652: LD_EXP 86
64656: PUSH
64657: LD_VAR 0 2
64661: ARRAY
64662: NOT
64663: IFFALSE 64818
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
64665: LD_ADDR_VAR 0 4
64669: PUSH
64670: LD_EXP 63
64674: PUSH
64675: LD_VAR 0 2
64679: ARRAY
64680: PPUSH
64681: LD_INT 2
64683: PUSH
64684: LD_INT 25
64686: PUSH
64687: LD_INT 5
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 25
64696: PUSH
64697: LD_INT 8
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_INT 25
64706: PUSH
64707: LD_INT 9
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: PPUSH
64720: CALL_OW 72
64724: ST_TO_ADDR
// if not tmp then
64725: LD_VAR 0 4
64729: NOT
64730: IFFALSE 64734
// continue ;
64732: GO 64553
// for j in tmp do
64734: LD_ADDR_VAR 0 3
64738: PUSH
64739: LD_VAR 0 4
64743: PUSH
64744: FOR_IN
64745: IFFALSE 64816
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
64747: LD_VAR 0 3
64751: PPUSH
64752: CALL_OW 310
64756: PPUSH
64757: CALL_OW 266
64761: PUSH
64762: LD_INT 5
64764: EQUAL
64765: PUSH
64766: LD_VAR 0 3
64770: PPUSH
64771: CALL_OW 257
64775: PUSH
64776: LD_INT 1
64778: EQUAL
64779: AND
64780: PUSH
64781: LD_VAR 0 3
64785: PPUSH
64786: CALL_OW 459
64790: NOT
64791: AND
64792: PUSH
64793: LD_VAR 0 7
64797: AND
64798: IFFALSE 64814
// ComChangeProfession ( j , class ) ;
64800: LD_VAR 0 3
64804: PPUSH
64805: LD_VAR 0 7
64809: PPUSH
64810: CALL_OW 123
64814: GO 64744
64816: POP
64817: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
64818: LD_EXP 86
64822: PUSH
64823: LD_VAR 0 2
64827: ARRAY
64828: PUSH
64829: LD_EXP 85
64833: PUSH
64834: LD_VAR 0 2
64838: ARRAY
64839: NOT
64840: AND
64841: PUSH
64842: LD_EXP 63
64846: PUSH
64847: LD_VAR 0 2
64851: ARRAY
64852: PPUSH
64853: LD_INT 30
64855: PUSH
64856: LD_INT 32
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PPUSH
64863: CALL_OW 72
64867: NOT
64868: AND
64869: PUSH
64870: LD_EXP 63
64874: PUSH
64875: LD_VAR 0 2
64879: ARRAY
64880: PPUSH
64881: LD_INT 2
64883: PUSH
64884: LD_INT 30
64886: PUSH
64887: LD_INT 4
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 30
64896: PUSH
64897: LD_INT 5
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: LIST
64908: PPUSH
64909: CALL_OW 72
64913: NOT
64914: AND
64915: IFFALSE 65047
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
64917: LD_ADDR_VAR 0 4
64921: PUSH
64922: LD_EXP 63
64926: PUSH
64927: LD_VAR 0 2
64931: ARRAY
64932: PPUSH
64933: LD_INT 2
64935: PUSH
64936: LD_INT 25
64938: PUSH
64939: LD_INT 1
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 25
64948: PUSH
64949: LD_INT 5
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 25
64958: PUSH
64959: LD_INT 8
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 25
64968: PUSH
64969: LD_INT 9
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: EMPTY
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: PPUSH
64983: CALL_OW 72
64987: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
64988: LD_ADDR_VAR 0 4
64992: PUSH
64993: LD_VAR 0 4
64997: PUSH
64998: LD_VAR 0 4
65002: PPUSH
65003: LD_INT 18
65005: PPUSH
65006: CALL 45963 0 2
65010: DIFF
65011: ST_TO_ADDR
// if tmp then
65012: LD_VAR 0 4
65016: IFFALSE 65047
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
65018: LD_VAR 0 2
65022: PPUSH
65023: LD_VAR 0 4
65027: PPUSH
65028: LD_EXP 88
65032: PUSH
65033: LD_VAR 0 2
65037: ARRAY
65038: PPUSH
65039: CALL 95271 0 3
// exit ;
65043: POP
65044: POP
65045: GO 65120
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
65047: LD_EXP 86
65051: PUSH
65052: LD_VAR 0 2
65056: ARRAY
65057: PUSH
65058: LD_EXP 85
65062: PUSH
65063: LD_VAR 0 2
65067: ARRAY
65068: AND
65069: IFFALSE 65116
// begin tmp := mc_defender [ i ] ;
65071: LD_ADDR_VAR 0 4
65075: PUSH
65076: LD_EXP 85
65080: PUSH
65081: LD_VAR 0 2
65085: ARRAY
65086: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
65087: LD_VAR 0 2
65091: PPUSH
65092: LD_VAR 0 4
65096: PPUSH
65097: LD_EXP 86
65101: PUSH
65102: LD_VAR 0 2
65106: ARRAY
65107: PPUSH
65108: CALL 95832 0 3
// exit ;
65112: POP
65113: POP
65114: GO 65120
// end ; end ;
65116: GO 64553
65118: POP
65119: POP
// end ;
65120: LD_VAR 0 1
65124: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
65125: LD_INT 0
65127: PPUSH
65128: PPUSH
65129: PPUSH
65130: PPUSH
65131: PPUSH
65132: PPUSH
65133: PPUSH
65134: PPUSH
65135: PPUSH
65136: PPUSH
65137: PPUSH
// if not mc_bases then
65138: LD_EXP 63
65142: NOT
65143: IFFALSE 65147
// exit ;
65145: GO 66234
// for i = 1 to mc_bases do
65147: LD_ADDR_VAR 0 2
65151: PUSH
65152: DOUBLE
65153: LD_INT 1
65155: DEC
65156: ST_TO_ADDR
65157: LD_EXP 63
65161: PUSH
65162: FOR_TO
65163: IFFALSE 66232
// begin tmp := mc_lab [ i ] ;
65165: LD_ADDR_VAR 0 6
65169: PUSH
65170: LD_EXP 96
65174: PUSH
65175: LD_VAR 0 2
65179: ARRAY
65180: ST_TO_ADDR
// if not tmp then
65181: LD_VAR 0 6
65185: NOT
65186: IFFALSE 65190
// continue ;
65188: GO 65162
// idle_lab := 0 ;
65190: LD_ADDR_VAR 0 11
65194: PUSH
65195: LD_INT 0
65197: ST_TO_ADDR
// for j in tmp do
65198: LD_ADDR_VAR 0 3
65202: PUSH
65203: LD_VAR 0 6
65207: PUSH
65208: FOR_IN
65209: IFFALSE 66228
// begin researching := false ;
65211: LD_ADDR_VAR 0 10
65215: PUSH
65216: LD_INT 0
65218: ST_TO_ADDR
// side := GetSide ( j ) ;
65219: LD_ADDR_VAR 0 4
65223: PUSH
65224: LD_VAR 0 3
65228: PPUSH
65229: CALL_OW 255
65233: ST_TO_ADDR
// if not mc_tech [ side ] then
65234: LD_EXP 90
65238: PUSH
65239: LD_VAR 0 4
65243: ARRAY
65244: NOT
65245: IFFALSE 65249
// continue ;
65247: GO 65208
// if BuildingStatus ( j ) = bs_idle then
65249: LD_VAR 0 3
65253: PPUSH
65254: CALL_OW 461
65258: PUSH
65259: LD_INT 2
65261: EQUAL
65262: IFFALSE 65450
// begin if idle_lab and UnitsInside ( j ) < 6 then
65264: LD_VAR 0 11
65268: PUSH
65269: LD_VAR 0 3
65273: PPUSH
65274: CALL_OW 313
65278: PUSH
65279: LD_INT 6
65281: LESS
65282: AND
65283: IFFALSE 65354
// begin tmp2 := UnitsInside ( idle_lab ) ;
65285: LD_ADDR_VAR 0 9
65289: PUSH
65290: LD_VAR 0 11
65294: PPUSH
65295: CALL_OW 313
65299: ST_TO_ADDR
// if tmp2 then
65300: LD_VAR 0 9
65304: IFFALSE 65346
// for x in tmp2 do
65306: LD_ADDR_VAR 0 7
65310: PUSH
65311: LD_VAR 0 9
65315: PUSH
65316: FOR_IN
65317: IFFALSE 65344
// begin ComExitBuilding ( x ) ;
65319: LD_VAR 0 7
65323: PPUSH
65324: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
65328: LD_VAR 0 7
65332: PPUSH
65333: LD_VAR 0 3
65337: PPUSH
65338: CALL_OW 180
// end ;
65342: GO 65316
65344: POP
65345: POP
// idle_lab := 0 ;
65346: LD_ADDR_VAR 0 11
65350: PUSH
65351: LD_INT 0
65353: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
65354: LD_ADDR_VAR 0 5
65358: PUSH
65359: LD_EXP 90
65363: PUSH
65364: LD_VAR 0 4
65368: ARRAY
65369: PUSH
65370: FOR_IN
65371: IFFALSE 65431
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
65373: LD_VAR 0 3
65377: PPUSH
65378: LD_VAR 0 5
65382: PPUSH
65383: CALL_OW 430
65387: PUSH
65388: LD_VAR 0 4
65392: PPUSH
65393: LD_VAR 0 5
65397: PPUSH
65398: CALL 13308 0 2
65402: AND
65403: IFFALSE 65429
// begin researching := true ;
65405: LD_ADDR_VAR 0 10
65409: PUSH
65410: LD_INT 1
65412: ST_TO_ADDR
// ComResearch ( j , t ) ;
65413: LD_VAR 0 3
65417: PPUSH
65418: LD_VAR 0 5
65422: PPUSH
65423: CALL_OW 124
// break ;
65427: GO 65431
// end ;
65429: GO 65370
65431: POP
65432: POP
// if not researching then
65433: LD_VAR 0 10
65437: NOT
65438: IFFALSE 65450
// idle_lab := j ;
65440: LD_ADDR_VAR 0 11
65444: PUSH
65445: LD_VAR 0 3
65449: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
65450: LD_VAR 0 3
65454: PPUSH
65455: CALL_OW 461
65459: PUSH
65460: LD_INT 10
65462: EQUAL
65463: IFFALSE 66051
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
65465: LD_EXP 92
65469: PUSH
65470: LD_VAR 0 2
65474: ARRAY
65475: NOT
65476: PUSH
65477: LD_EXP 93
65481: PUSH
65482: LD_VAR 0 2
65486: ARRAY
65487: NOT
65488: AND
65489: PUSH
65490: LD_EXP 90
65494: PUSH
65495: LD_VAR 0 4
65499: ARRAY
65500: PUSH
65501: LD_INT 1
65503: GREATER
65504: AND
65505: IFFALSE 65636
// begin ComCancel ( j ) ;
65507: LD_VAR 0 3
65511: PPUSH
65512: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
65516: LD_ADDR_EXP 90
65520: PUSH
65521: LD_EXP 90
65525: PPUSH
65526: LD_VAR 0 4
65530: PPUSH
65531: LD_EXP 90
65535: PUSH
65536: LD_VAR 0 4
65540: ARRAY
65541: PPUSH
65542: LD_EXP 90
65546: PUSH
65547: LD_VAR 0 4
65551: ARRAY
65552: PUSH
65553: LD_INT 1
65555: MINUS
65556: PPUSH
65557: LD_EXP 90
65561: PUSH
65562: LD_VAR 0 4
65566: ARRAY
65567: PPUSH
65568: LD_INT 0
65570: PPUSH
65571: CALL 16820 0 4
65575: PPUSH
65576: CALL_OW 1
65580: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
65581: LD_ADDR_EXP 90
65585: PUSH
65586: LD_EXP 90
65590: PPUSH
65591: LD_VAR 0 4
65595: PPUSH
65596: LD_EXP 90
65600: PUSH
65601: LD_VAR 0 4
65605: ARRAY
65606: PPUSH
65607: LD_EXP 90
65611: PUSH
65612: LD_VAR 0 4
65616: ARRAY
65617: PPUSH
65618: LD_INT 1
65620: PPUSH
65621: LD_INT 0
65623: PPUSH
65624: CALL 16820 0 4
65628: PPUSH
65629: CALL_OW 1
65633: ST_TO_ADDR
// continue ;
65634: GO 65208
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
65636: LD_EXP 92
65640: PUSH
65641: LD_VAR 0 2
65645: ARRAY
65646: PUSH
65647: LD_EXP 93
65651: PUSH
65652: LD_VAR 0 2
65656: ARRAY
65657: NOT
65658: AND
65659: IFFALSE 65786
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
65661: LD_ADDR_EXP 93
65665: PUSH
65666: LD_EXP 93
65670: PPUSH
65671: LD_VAR 0 2
65675: PUSH
65676: LD_EXP 93
65680: PUSH
65681: LD_VAR 0 2
65685: ARRAY
65686: PUSH
65687: LD_INT 1
65689: PLUS
65690: PUSH
65691: EMPTY
65692: LIST
65693: LIST
65694: PPUSH
65695: LD_EXP 92
65699: PUSH
65700: LD_VAR 0 2
65704: ARRAY
65705: PUSH
65706: LD_INT 1
65708: ARRAY
65709: PPUSH
65710: CALL 17402 0 3
65714: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
65715: LD_EXP 92
65719: PUSH
65720: LD_VAR 0 2
65724: ARRAY
65725: PUSH
65726: LD_INT 1
65728: ARRAY
65729: PPUSH
65730: LD_INT 112
65732: PPUSH
65733: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
65737: LD_ADDR_VAR 0 9
65741: PUSH
65742: LD_EXP 92
65746: PUSH
65747: LD_VAR 0 2
65751: ARRAY
65752: PPUSH
65753: LD_INT 1
65755: PPUSH
65756: CALL_OW 3
65760: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
65761: LD_ADDR_EXP 92
65765: PUSH
65766: LD_EXP 92
65770: PPUSH
65771: LD_VAR 0 2
65775: PPUSH
65776: LD_VAR 0 9
65780: PPUSH
65781: CALL_OW 1
65785: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
65786: LD_EXP 92
65790: PUSH
65791: LD_VAR 0 2
65795: ARRAY
65796: PUSH
65797: LD_EXP 93
65801: PUSH
65802: LD_VAR 0 2
65806: ARRAY
65807: AND
65808: PUSH
65809: LD_EXP 93
65813: PUSH
65814: LD_VAR 0 2
65818: ARRAY
65819: PUSH
65820: LD_INT 1
65822: ARRAY
65823: PPUSH
65824: CALL_OW 310
65828: NOT
65829: AND
65830: PUSH
65831: LD_VAR 0 3
65835: PPUSH
65836: CALL_OW 313
65840: PUSH
65841: LD_INT 6
65843: EQUAL
65844: AND
65845: IFFALSE 65901
// begin tmp2 := UnitsInside ( j ) ;
65847: LD_ADDR_VAR 0 9
65851: PUSH
65852: LD_VAR 0 3
65856: PPUSH
65857: CALL_OW 313
65861: ST_TO_ADDR
// if tmp2 = 6 then
65862: LD_VAR 0 9
65866: PUSH
65867: LD_INT 6
65869: EQUAL
65870: IFFALSE 65901
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
65872: LD_VAR 0 9
65876: PUSH
65877: LD_INT 1
65879: ARRAY
65880: PPUSH
65881: LD_INT 112
65883: PPUSH
65884: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
65888: LD_VAR 0 9
65892: PUSH
65893: LD_INT 1
65895: ARRAY
65896: PPUSH
65897: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
65901: LD_EXP 93
65905: PUSH
65906: LD_VAR 0 2
65910: ARRAY
65911: PUSH
65912: LD_EXP 93
65916: PUSH
65917: LD_VAR 0 2
65921: ARRAY
65922: PUSH
65923: LD_INT 1
65925: ARRAY
65926: PPUSH
65927: CALL_OW 314
65931: NOT
65932: AND
65933: PUSH
65934: LD_EXP 93
65938: PUSH
65939: LD_VAR 0 2
65943: ARRAY
65944: PUSH
65945: LD_INT 1
65947: ARRAY
65948: PPUSH
65949: CALL_OW 310
65953: NOT
65954: AND
65955: IFFALSE 65981
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
65957: LD_EXP 93
65961: PUSH
65962: LD_VAR 0 2
65966: ARRAY
65967: PUSH
65968: LD_INT 1
65970: ARRAY
65971: PPUSH
65972: LD_VAR 0 3
65976: PPUSH
65977: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
65981: LD_EXP 93
65985: PUSH
65986: LD_VAR 0 2
65990: ARRAY
65991: PUSH
65992: LD_INT 1
65994: ARRAY
65995: PPUSH
65996: CALL_OW 310
66000: PUSH
66001: LD_EXP 93
66005: PUSH
66006: LD_VAR 0 2
66010: ARRAY
66011: PUSH
66012: LD_INT 1
66014: ARRAY
66015: PPUSH
66016: CALL_OW 310
66020: PPUSH
66021: CALL_OW 461
66025: PUSH
66026: LD_INT 3
66028: NONEQUAL
66029: AND
66030: IFFALSE 66051
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
66032: LD_EXP 93
66036: PUSH
66037: LD_VAR 0 2
66041: ARRAY
66042: PUSH
66043: LD_INT 1
66045: ARRAY
66046: PPUSH
66047: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
66051: LD_VAR 0 3
66055: PPUSH
66056: CALL_OW 461
66060: PUSH
66061: LD_INT 6
66063: EQUAL
66064: PUSH
66065: LD_VAR 0 6
66069: PUSH
66070: LD_INT 1
66072: GREATER
66073: AND
66074: IFFALSE 66226
// begin sci := [ ] ;
66076: LD_ADDR_VAR 0 8
66080: PUSH
66081: EMPTY
66082: ST_TO_ADDR
// for x in ( tmp diff j ) do
66083: LD_ADDR_VAR 0 7
66087: PUSH
66088: LD_VAR 0 6
66092: PUSH
66093: LD_VAR 0 3
66097: DIFF
66098: PUSH
66099: FOR_IN
66100: IFFALSE 66152
// begin if sci = 6 then
66102: LD_VAR 0 8
66106: PUSH
66107: LD_INT 6
66109: EQUAL
66110: IFFALSE 66114
// break ;
66112: GO 66152
// if BuildingStatus ( x ) = bs_idle then
66114: LD_VAR 0 7
66118: PPUSH
66119: CALL_OW 461
66123: PUSH
66124: LD_INT 2
66126: EQUAL
66127: IFFALSE 66150
// sci := sci ^ UnitsInside ( x ) ;
66129: LD_ADDR_VAR 0 8
66133: PUSH
66134: LD_VAR 0 8
66138: PUSH
66139: LD_VAR 0 7
66143: PPUSH
66144: CALL_OW 313
66148: ADD
66149: ST_TO_ADDR
// end ;
66150: GO 66099
66152: POP
66153: POP
// if not sci then
66154: LD_VAR 0 8
66158: NOT
66159: IFFALSE 66163
// continue ;
66161: GO 65208
// for x in sci do
66163: LD_ADDR_VAR 0 7
66167: PUSH
66168: LD_VAR 0 8
66172: PUSH
66173: FOR_IN
66174: IFFALSE 66224
// if IsInUnit ( x ) and not HasTask ( x ) then
66176: LD_VAR 0 7
66180: PPUSH
66181: CALL_OW 310
66185: PUSH
66186: LD_VAR 0 7
66190: PPUSH
66191: CALL_OW 314
66195: NOT
66196: AND
66197: IFFALSE 66222
// begin ComExitBuilding ( x ) ;
66199: LD_VAR 0 7
66203: PPUSH
66204: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
66208: LD_VAR 0 7
66212: PPUSH
66213: LD_VAR 0 3
66217: PPUSH
66218: CALL_OW 180
// end ;
66222: GO 66173
66224: POP
66225: POP
// end ; end ;
66226: GO 65208
66228: POP
66229: POP
// end ;
66230: GO 65162
66232: POP
66233: POP
// end ;
66234: LD_VAR 0 1
66238: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
66239: LD_INT 0
66241: PPUSH
66242: PPUSH
// if not mc_bases then
66243: LD_EXP 63
66247: NOT
66248: IFFALSE 66252
// exit ;
66250: GO 66333
// for i = 1 to mc_bases do
66252: LD_ADDR_VAR 0 2
66256: PUSH
66257: DOUBLE
66258: LD_INT 1
66260: DEC
66261: ST_TO_ADDR
66262: LD_EXP 63
66266: PUSH
66267: FOR_TO
66268: IFFALSE 66331
// if mc_mines [ i ] and mc_miners [ i ] then
66270: LD_EXP 76
66274: PUSH
66275: LD_VAR 0 2
66279: ARRAY
66280: PUSH
66281: LD_EXP 77
66285: PUSH
66286: LD_VAR 0 2
66290: ARRAY
66291: AND
66292: IFFALSE 66329
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
66294: LD_EXP 77
66298: PUSH
66299: LD_VAR 0 2
66303: ARRAY
66304: PUSH
66305: LD_INT 1
66307: ARRAY
66308: PPUSH
66309: CALL_OW 255
66313: PPUSH
66314: LD_EXP 76
66318: PUSH
66319: LD_VAR 0 2
66323: ARRAY
66324: PPUSH
66325: CALL 14391 0 2
66329: GO 66267
66331: POP
66332: POP
// end ;
66333: LD_VAR 0 1
66337: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
66338: LD_INT 0
66340: PPUSH
66341: PPUSH
66342: PPUSH
66343: PPUSH
66344: PPUSH
66345: PPUSH
66346: PPUSH
66347: PPUSH
// if not mc_bases or not mc_parking then
66348: LD_EXP 63
66352: NOT
66353: PUSH
66354: LD_EXP 87
66358: NOT
66359: OR
66360: IFFALSE 66364
// exit ;
66362: GO 67063
// for i = 1 to mc_bases do
66364: LD_ADDR_VAR 0 2
66368: PUSH
66369: DOUBLE
66370: LD_INT 1
66372: DEC
66373: ST_TO_ADDR
66374: LD_EXP 63
66378: PUSH
66379: FOR_TO
66380: IFFALSE 67061
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
66382: LD_EXP 63
66386: PUSH
66387: LD_VAR 0 2
66391: ARRAY
66392: NOT
66393: PUSH
66394: LD_EXP 87
66398: PUSH
66399: LD_VAR 0 2
66403: ARRAY
66404: NOT
66405: OR
66406: IFFALSE 66410
// continue ;
66408: GO 66379
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
66410: LD_ADDR_VAR 0 5
66414: PUSH
66415: LD_EXP 63
66419: PUSH
66420: LD_VAR 0 2
66424: ARRAY
66425: PUSH
66426: LD_INT 1
66428: ARRAY
66429: PPUSH
66430: CALL_OW 255
66434: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
66435: LD_ADDR_VAR 0 6
66439: PUSH
66440: LD_EXP 63
66444: PUSH
66445: LD_VAR 0 2
66449: ARRAY
66450: PPUSH
66451: LD_INT 30
66453: PUSH
66454: LD_INT 3
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PPUSH
66461: CALL_OW 72
66465: ST_TO_ADDR
// if not fac then
66466: LD_VAR 0 6
66470: NOT
66471: IFFALSE 66522
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
66473: LD_ADDR_VAR 0 6
66477: PUSH
66478: LD_EXP 63
66482: PUSH
66483: LD_VAR 0 2
66487: ARRAY
66488: PPUSH
66489: LD_INT 2
66491: PUSH
66492: LD_INT 30
66494: PUSH
66495: LD_INT 0
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 30
66504: PUSH
66505: LD_INT 1
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: LIST
66516: PPUSH
66517: CALL_OW 72
66521: ST_TO_ADDR
// if not fac then
66522: LD_VAR 0 6
66526: NOT
66527: IFFALSE 66531
// continue ;
66529: GO 66379
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
66531: LD_ADDR_VAR 0 7
66535: PUSH
66536: LD_EXP 87
66540: PUSH
66541: LD_VAR 0 2
66545: ARRAY
66546: PPUSH
66547: LD_INT 22
66549: PUSH
66550: LD_VAR 0 5
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 21
66561: PUSH
66562: LD_INT 2
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 3
66571: PUSH
66572: LD_INT 24
66574: PUSH
66575: LD_INT 1000
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: LIST
66590: PPUSH
66591: CALL_OW 70
66595: ST_TO_ADDR
// for j in fac do
66596: LD_ADDR_VAR 0 3
66600: PUSH
66601: LD_VAR 0 6
66605: PUSH
66606: FOR_IN
66607: IFFALSE 66688
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
66609: LD_ADDR_VAR 0 7
66613: PUSH
66614: LD_VAR 0 7
66618: PUSH
66619: LD_INT 22
66621: PUSH
66622: LD_VAR 0 5
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: LD_INT 91
66633: PUSH
66634: LD_VAR 0 3
66638: PUSH
66639: LD_INT 15
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 21
66649: PUSH
66650: LD_INT 2
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 3
66659: PUSH
66660: LD_INT 24
66662: PUSH
66663: LD_INT 1000
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: PPUSH
66680: CALL_OW 69
66684: UNION
66685: ST_TO_ADDR
66686: GO 66606
66688: POP
66689: POP
// if not vehs then
66690: LD_VAR 0 7
66694: NOT
66695: IFFALSE 66721
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
66697: LD_ADDR_EXP 75
66701: PUSH
66702: LD_EXP 75
66706: PPUSH
66707: LD_VAR 0 2
66711: PPUSH
66712: EMPTY
66713: PPUSH
66714: CALL_OW 1
66718: ST_TO_ADDR
// continue ;
66719: GO 66379
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
66721: LD_ADDR_VAR 0 8
66725: PUSH
66726: LD_EXP 63
66730: PUSH
66731: LD_VAR 0 2
66735: ARRAY
66736: PPUSH
66737: LD_INT 30
66739: PUSH
66740: LD_INT 3
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PPUSH
66747: CALL_OW 72
66751: ST_TO_ADDR
// if tmp then
66752: LD_VAR 0 8
66756: IFFALSE 66859
// begin for j in tmp do
66758: LD_ADDR_VAR 0 3
66762: PUSH
66763: LD_VAR 0 8
66767: PUSH
66768: FOR_IN
66769: IFFALSE 66857
// for k in UnitsInside ( j ) do
66771: LD_ADDR_VAR 0 4
66775: PUSH
66776: LD_VAR 0 3
66780: PPUSH
66781: CALL_OW 313
66785: PUSH
66786: FOR_IN
66787: IFFALSE 66853
// if k then
66789: LD_VAR 0 4
66793: IFFALSE 66851
// if not k in mc_repair_vehicle [ i ] then
66795: LD_VAR 0 4
66799: PUSH
66800: LD_EXP 75
66804: PUSH
66805: LD_VAR 0 2
66809: ARRAY
66810: IN
66811: NOT
66812: IFFALSE 66851
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
66814: LD_ADDR_EXP 75
66818: PUSH
66819: LD_EXP 75
66823: PPUSH
66824: LD_VAR 0 2
66828: PPUSH
66829: LD_EXP 75
66833: PUSH
66834: LD_VAR 0 2
66838: ARRAY
66839: PUSH
66840: LD_VAR 0 4
66844: UNION
66845: PPUSH
66846: CALL_OW 1
66850: ST_TO_ADDR
66851: GO 66786
66853: POP
66854: POP
66855: GO 66768
66857: POP
66858: POP
// end ; if not mc_repair_vehicle [ i ] then
66859: LD_EXP 75
66863: PUSH
66864: LD_VAR 0 2
66868: ARRAY
66869: NOT
66870: IFFALSE 66874
// continue ;
66872: GO 66379
// for j in mc_repair_vehicle [ i ] do
66874: LD_ADDR_VAR 0 3
66878: PUSH
66879: LD_EXP 75
66883: PUSH
66884: LD_VAR 0 2
66888: ARRAY
66889: PUSH
66890: FOR_IN
66891: IFFALSE 67057
// begin if GetClass ( j ) <> 3 then
66893: LD_VAR 0 3
66897: PPUSH
66898: CALL_OW 257
66902: PUSH
66903: LD_INT 3
66905: NONEQUAL
66906: IFFALSE 66947
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
66908: LD_ADDR_EXP 75
66912: PUSH
66913: LD_EXP 75
66917: PPUSH
66918: LD_VAR 0 2
66922: PPUSH
66923: LD_EXP 75
66927: PUSH
66928: LD_VAR 0 2
66932: ARRAY
66933: PUSH
66934: LD_VAR 0 3
66938: DIFF
66939: PPUSH
66940: CALL_OW 1
66944: ST_TO_ADDR
// continue ;
66945: GO 66890
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
66947: LD_VAR 0 3
66951: PPUSH
66952: CALL_OW 311
66956: NOT
66957: PUSH
66958: LD_VAR 0 3
66962: PUSH
66963: LD_EXP 66
66967: PUSH
66968: LD_VAR 0 2
66972: ARRAY
66973: PUSH
66974: LD_INT 1
66976: ARRAY
66977: IN
66978: NOT
66979: AND
66980: PUSH
66981: LD_VAR 0 3
66985: PUSH
66986: LD_EXP 66
66990: PUSH
66991: LD_VAR 0 2
66995: ARRAY
66996: PUSH
66997: LD_INT 2
66999: ARRAY
67000: IN
67001: NOT
67002: AND
67003: IFFALSE 67055
// begin if IsInUnit ( j ) then
67005: LD_VAR 0 3
67009: PPUSH
67010: CALL_OW 310
67014: IFFALSE 67025
// ComExitBuilding ( j ) ;
67016: LD_VAR 0 3
67020: PPUSH
67021: CALL_OW 122
// if not HasTask ( j ) then
67025: LD_VAR 0 3
67029: PPUSH
67030: CALL_OW 314
67034: NOT
67035: IFFALSE 67055
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
67037: LD_VAR 0 3
67041: PPUSH
67042: LD_VAR 0 7
67046: PUSH
67047: LD_INT 1
67049: ARRAY
67050: PPUSH
67051: CALL_OW 189
// end ; end ;
67055: GO 66890
67057: POP
67058: POP
// end ;
67059: GO 66379
67061: POP
67062: POP
// end ;
67063: LD_VAR 0 1
67067: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
67068: LD_INT 0
67070: PPUSH
67071: PPUSH
67072: PPUSH
67073: PPUSH
67074: PPUSH
67075: PPUSH
67076: PPUSH
67077: PPUSH
67078: PPUSH
67079: PPUSH
67080: PPUSH
// if not mc_bases then
67081: LD_EXP 63
67085: NOT
67086: IFFALSE 67090
// exit ;
67088: GO 67892
// for i = 1 to mc_bases do
67090: LD_ADDR_VAR 0 2
67094: PUSH
67095: DOUBLE
67096: LD_INT 1
67098: DEC
67099: ST_TO_ADDR
67100: LD_EXP 63
67104: PUSH
67105: FOR_TO
67106: IFFALSE 67890
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
67108: LD_EXP 91
67112: PUSH
67113: LD_VAR 0 2
67117: ARRAY
67118: NOT
67119: PUSH
67120: LD_EXP 66
67124: PUSH
67125: LD_VAR 0 2
67129: ARRAY
67130: PUSH
67131: LD_INT 1
67133: ARRAY
67134: OR
67135: PUSH
67136: LD_EXP 66
67140: PUSH
67141: LD_VAR 0 2
67145: ARRAY
67146: PUSH
67147: LD_INT 2
67149: ARRAY
67150: OR
67151: PUSH
67152: LD_EXP 89
67156: PUSH
67157: LD_VAR 0 2
67161: ARRAY
67162: PPUSH
67163: LD_INT 1
67165: PPUSH
67166: CALL_OW 325
67170: NOT
67171: OR
67172: PUSH
67173: LD_EXP 86
67177: PUSH
67178: LD_VAR 0 2
67182: ARRAY
67183: OR
67184: IFFALSE 67188
// continue ;
67186: GO 67105
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
67188: LD_ADDR_VAR 0 8
67192: PUSH
67193: LD_EXP 63
67197: PUSH
67198: LD_VAR 0 2
67202: ARRAY
67203: PPUSH
67204: LD_INT 25
67206: PUSH
67207: LD_INT 4
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 50
67216: PUSH
67217: EMPTY
67218: LIST
67219: PUSH
67220: LD_INT 3
67222: PUSH
67223: LD_INT 60
67225: PUSH
67226: EMPTY
67227: LIST
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: LIST
67237: PPUSH
67238: CALL_OW 72
67242: PUSH
67243: LD_EXP 67
67247: PUSH
67248: LD_VAR 0 2
67252: ARRAY
67253: DIFF
67254: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
67255: LD_ADDR_VAR 0 9
67259: PUSH
67260: LD_EXP 63
67264: PUSH
67265: LD_VAR 0 2
67269: ARRAY
67270: PPUSH
67271: LD_INT 2
67273: PUSH
67274: LD_INT 30
67276: PUSH
67277: LD_INT 0
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 30
67286: PUSH
67287: LD_INT 1
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: LIST
67298: PPUSH
67299: CALL_OW 72
67303: ST_TO_ADDR
// if not tmp or not dep then
67304: LD_VAR 0 8
67308: NOT
67309: PUSH
67310: LD_VAR 0 9
67314: NOT
67315: OR
67316: IFFALSE 67320
// continue ;
67318: GO 67105
// side := GetSide ( tmp [ 1 ] ) ;
67320: LD_ADDR_VAR 0 11
67324: PUSH
67325: LD_VAR 0 8
67329: PUSH
67330: LD_INT 1
67332: ARRAY
67333: PPUSH
67334: CALL_OW 255
67338: ST_TO_ADDR
// dep := dep [ 1 ] ;
67339: LD_ADDR_VAR 0 9
67343: PUSH
67344: LD_VAR 0 9
67348: PUSH
67349: LD_INT 1
67351: ARRAY
67352: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
67353: LD_ADDR_VAR 0 7
67357: PUSH
67358: LD_EXP 91
67362: PUSH
67363: LD_VAR 0 2
67367: ARRAY
67368: PPUSH
67369: LD_INT 22
67371: PUSH
67372: LD_INT 0
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 25
67381: PUSH
67382: LD_INT 12
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PPUSH
67393: CALL_OW 70
67397: PUSH
67398: LD_INT 22
67400: PUSH
67401: LD_INT 0
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 25
67410: PUSH
67411: LD_INT 12
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 91
67420: PUSH
67421: LD_VAR 0 9
67425: PUSH
67426: LD_INT 20
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: LIST
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: LIST
67438: PPUSH
67439: CALL_OW 69
67443: UNION
67444: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
67445: LD_ADDR_VAR 0 10
67449: PUSH
67450: LD_EXP 91
67454: PUSH
67455: LD_VAR 0 2
67459: ARRAY
67460: PPUSH
67461: LD_INT 81
67463: PUSH
67464: LD_VAR 0 11
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PPUSH
67473: CALL_OW 70
67477: ST_TO_ADDR
// if not apes or danger_at_area then
67478: LD_VAR 0 7
67482: NOT
67483: PUSH
67484: LD_VAR 0 10
67488: OR
67489: IFFALSE 67539
// begin if mc_taming [ i ] then
67491: LD_EXP 94
67495: PUSH
67496: LD_VAR 0 2
67500: ARRAY
67501: IFFALSE 67537
// begin MC_Reset ( i , 121 ) ;
67503: LD_VAR 0 2
67507: PPUSH
67508: LD_INT 121
67510: PPUSH
67511: CALL 52990 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
67515: LD_ADDR_EXP 94
67519: PUSH
67520: LD_EXP 94
67524: PPUSH
67525: LD_VAR 0 2
67529: PPUSH
67530: EMPTY
67531: PPUSH
67532: CALL_OW 1
67536: ST_TO_ADDR
// end ; continue ;
67537: GO 67105
// end ; for j in tmp do
67539: LD_ADDR_VAR 0 3
67543: PUSH
67544: LD_VAR 0 8
67548: PUSH
67549: FOR_IN
67550: IFFALSE 67886
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
67552: LD_VAR 0 3
67556: PUSH
67557: LD_EXP 94
67561: PUSH
67562: LD_VAR 0 2
67566: ARRAY
67567: IN
67568: NOT
67569: PUSH
67570: LD_EXP 94
67574: PUSH
67575: LD_VAR 0 2
67579: ARRAY
67580: PUSH
67581: LD_INT 3
67583: LESS
67584: AND
67585: IFFALSE 67643
// begin SetTag ( j , 121 ) ;
67587: LD_VAR 0 3
67591: PPUSH
67592: LD_INT 121
67594: PPUSH
67595: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
67599: LD_ADDR_EXP 94
67603: PUSH
67604: LD_EXP 94
67608: PPUSH
67609: LD_VAR 0 2
67613: PUSH
67614: LD_EXP 94
67618: PUSH
67619: LD_VAR 0 2
67623: ARRAY
67624: PUSH
67625: LD_INT 1
67627: PLUS
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PPUSH
67633: LD_VAR 0 3
67637: PPUSH
67638: CALL 17402 0 3
67642: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
67643: LD_VAR 0 3
67647: PUSH
67648: LD_EXP 94
67652: PUSH
67653: LD_VAR 0 2
67657: ARRAY
67658: IN
67659: IFFALSE 67884
// begin if GetClass ( j ) <> 4 then
67661: LD_VAR 0 3
67665: PPUSH
67666: CALL_OW 257
67670: PUSH
67671: LD_INT 4
67673: NONEQUAL
67674: IFFALSE 67727
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
67676: LD_ADDR_EXP 94
67680: PUSH
67681: LD_EXP 94
67685: PPUSH
67686: LD_VAR 0 2
67690: PPUSH
67691: LD_EXP 94
67695: PUSH
67696: LD_VAR 0 2
67700: ARRAY
67701: PUSH
67702: LD_VAR 0 3
67706: DIFF
67707: PPUSH
67708: CALL_OW 1
67712: ST_TO_ADDR
// SetTag ( j , 0 ) ;
67713: LD_VAR 0 3
67717: PPUSH
67718: LD_INT 0
67720: PPUSH
67721: CALL_OW 109
// continue ;
67725: GO 67549
// end ; if IsInUnit ( j ) then
67727: LD_VAR 0 3
67731: PPUSH
67732: CALL_OW 310
67736: IFFALSE 67747
// ComExitBuilding ( j ) ;
67738: LD_VAR 0 3
67742: PPUSH
67743: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
67747: LD_ADDR_VAR 0 6
67751: PUSH
67752: LD_VAR 0 7
67756: PPUSH
67757: LD_VAR 0 3
67761: PPUSH
67762: CALL_OW 74
67766: ST_TO_ADDR
// if not ape then
67767: LD_VAR 0 6
67771: NOT
67772: IFFALSE 67776
// break ;
67774: GO 67886
// x := GetX ( ape ) ;
67776: LD_ADDR_VAR 0 4
67780: PUSH
67781: LD_VAR 0 6
67785: PPUSH
67786: CALL_OW 250
67790: ST_TO_ADDR
// y := GetY ( ape ) ;
67791: LD_ADDR_VAR 0 5
67795: PUSH
67796: LD_VAR 0 6
67800: PPUSH
67801: CALL_OW 251
67805: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
67806: LD_VAR 0 4
67810: PPUSH
67811: LD_VAR 0 5
67815: PPUSH
67816: CALL_OW 488
67820: NOT
67821: PUSH
67822: LD_VAR 0 11
67826: PPUSH
67827: LD_VAR 0 4
67831: PPUSH
67832: LD_VAR 0 5
67836: PPUSH
67837: LD_INT 20
67839: PPUSH
67840: CALL 18298 0 4
67844: PUSH
67845: LD_INT 4
67847: ARRAY
67848: OR
67849: IFFALSE 67853
// break ;
67851: GO 67886
// if not HasTask ( j ) then
67853: LD_VAR 0 3
67857: PPUSH
67858: CALL_OW 314
67862: NOT
67863: IFFALSE 67884
// ComTameXY ( j , x , y ) ;
67865: LD_VAR 0 3
67869: PPUSH
67870: LD_VAR 0 4
67874: PPUSH
67875: LD_VAR 0 5
67879: PPUSH
67880: CALL_OW 131
// end ; end ;
67884: GO 67549
67886: POP
67887: POP
// end ;
67888: GO 67105
67890: POP
67891: POP
// end ;
67892: LD_VAR 0 1
67896: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
67897: LD_INT 0
67899: PPUSH
67900: PPUSH
67901: PPUSH
67902: PPUSH
67903: PPUSH
67904: PPUSH
67905: PPUSH
67906: PPUSH
// if not mc_bases then
67907: LD_EXP 63
67911: NOT
67912: IFFALSE 67916
// exit ;
67914: GO 68542
// for i = 1 to mc_bases do
67916: LD_ADDR_VAR 0 2
67920: PUSH
67921: DOUBLE
67922: LD_INT 1
67924: DEC
67925: ST_TO_ADDR
67926: LD_EXP 63
67930: PUSH
67931: FOR_TO
67932: IFFALSE 68540
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
67934: LD_EXP 92
67938: PUSH
67939: LD_VAR 0 2
67943: ARRAY
67944: NOT
67945: PUSH
67946: LD_EXP 92
67950: PUSH
67951: LD_VAR 0 2
67955: ARRAY
67956: PPUSH
67957: LD_INT 25
67959: PUSH
67960: LD_INT 12
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PPUSH
67967: CALL_OW 72
67971: NOT
67972: OR
67973: IFFALSE 67977
// continue ;
67975: GO 67931
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
67977: LD_ADDR_VAR 0 5
67981: PUSH
67982: LD_EXP 92
67986: PUSH
67987: LD_VAR 0 2
67991: ARRAY
67992: PUSH
67993: LD_INT 1
67995: ARRAY
67996: PPUSH
67997: CALL_OW 255
68001: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
68002: LD_VAR 0 5
68006: PPUSH
68007: LD_INT 2
68009: PPUSH
68010: CALL_OW 325
68014: IFFALSE 68267
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
68016: LD_ADDR_VAR 0 4
68020: PUSH
68021: LD_EXP 92
68025: PUSH
68026: LD_VAR 0 2
68030: ARRAY
68031: PPUSH
68032: LD_INT 25
68034: PUSH
68035: LD_INT 16
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PPUSH
68042: CALL_OW 72
68046: ST_TO_ADDR
// if tmp < 6 then
68047: LD_VAR 0 4
68051: PUSH
68052: LD_INT 6
68054: LESS
68055: IFFALSE 68267
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
68057: LD_ADDR_VAR 0 6
68061: PUSH
68062: LD_EXP 63
68066: PUSH
68067: LD_VAR 0 2
68071: ARRAY
68072: PPUSH
68073: LD_INT 2
68075: PUSH
68076: LD_INT 30
68078: PUSH
68079: LD_INT 0
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: PUSH
68086: LD_INT 30
68088: PUSH
68089: LD_INT 1
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: LIST
68100: PPUSH
68101: CALL_OW 72
68105: ST_TO_ADDR
// if depot then
68106: LD_VAR 0 6
68110: IFFALSE 68267
// begin selected := 0 ;
68112: LD_ADDR_VAR 0 7
68116: PUSH
68117: LD_INT 0
68119: ST_TO_ADDR
// for j in depot do
68120: LD_ADDR_VAR 0 3
68124: PUSH
68125: LD_VAR 0 6
68129: PUSH
68130: FOR_IN
68131: IFFALSE 68162
// begin if UnitsInside ( j ) < 6 then
68133: LD_VAR 0 3
68137: PPUSH
68138: CALL_OW 313
68142: PUSH
68143: LD_INT 6
68145: LESS
68146: IFFALSE 68160
// begin selected := j ;
68148: LD_ADDR_VAR 0 7
68152: PUSH
68153: LD_VAR 0 3
68157: ST_TO_ADDR
// break ;
68158: GO 68162
// end ; end ;
68160: GO 68130
68162: POP
68163: POP
// if selected then
68164: LD_VAR 0 7
68168: IFFALSE 68267
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
68170: LD_ADDR_VAR 0 3
68174: PUSH
68175: LD_EXP 92
68179: PUSH
68180: LD_VAR 0 2
68184: ARRAY
68185: PPUSH
68186: LD_INT 25
68188: PUSH
68189: LD_INT 12
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PPUSH
68196: CALL_OW 72
68200: PUSH
68201: FOR_IN
68202: IFFALSE 68265
// if not HasTask ( j ) then
68204: LD_VAR 0 3
68208: PPUSH
68209: CALL_OW 314
68213: NOT
68214: IFFALSE 68263
// begin if not IsInUnit ( j ) then
68216: LD_VAR 0 3
68220: PPUSH
68221: CALL_OW 310
68225: NOT
68226: IFFALSE 68242
// ComEnterUnit ( j , selected ) ;
68228: LD_VAR 0 3
68232: PPUSH
68233: LD_VAR 0 7
68237: PPUSH
68238: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
68242: LD_VAR 0 3
68246: PPUSH
68247: LD_INT 16
68249: PPUSH
68250: CALL_OW 183
// AddComExitBuilding ( j ) ;
68254: LD_VAR 0 3
68258: PPUSH
68259: CALL_OW 182
// end ;
68263: GO 68201
68265: POP
68266: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
68267: LD_VAR 0 5
68271: PPUSH
68272: LD_INT 11
68274: PPUSH
68275: CALL_OW 325
68279: IFFALSE 68538
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
68281: LD_ADDR_VAR 0 4
68285: PUSH
68286: LD_EXP 92
68290: PUSH
68291: LD_VAR 0 2
68295: ARRAY
68296: PPUSH
68297: LD_INT 25
68299: PUSH
68300: LD_INT 16
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PPUSH
68307: CALL_OW 72
68311: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
68312: LD_VAR 0 4
68316: PUSH
68317: LD_INT 6
68319: GREATEREQUAL
68320: PUSH
68321: LD_VAR 0 5
68325: PPUSH
68326: LD_INT 2
68328: PPUSH
68329: CALL_OW 325
68333: NOT
68334: OR
68335: IFFALSE 68538
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
68337: LD_ADDR_VAR 0 8
68341: PUSH
68342: LD_EXP 63
68346: PUSH
68347: LD_VAR 0 2
68351: ARRAY
68352: PPUSH
68353: LD_INT 2
68355: PUSH
68356: LD_INT 30
68358: PUSH
68359: LD_INT 4
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: PUSH
68366: LD_INT 30
68368: PUSH
68369: LD_INT 5
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: LIST
68380: PPUSH
68381: CALL_OW 72
68385: ST_TO_ADDR
// if barracks then
68386: LD_VAR 0 8
68390: IFFALSE 68538
// begin selected := 0 ;
68392: LD_ADDR_VAR 0 7
68396: PUSH
68397: LD_INT 0
68399: ST_TO_ADDR
// for j in barracks do
68400: LD_ADDR_VAR 0 3
68404: PUSH
68405: LD_VAR 0 8
68409: PUSH
68410: FOR_IN
68411: IFFALSE 68442
// begin if UnitsInside ( j ) < 6 then
68413: LD_VAR 0 3
68417: PPUSH
68418: CALL_OW 313
68422: PUSH
68423: LD_INT 6
68425: LESS
68426: IFFALSE 68440
// begin selected := j ;
68428: LD_ADDR_VAR 0 7
68432: PUSH
68433: LD_VAR 0 3
68437: ST_TO_ADDR
// break ;
68438: GO 68442
// end ; end ;
68440: GO 68410
68442: POP
68443: POP
// if selected then
68444: LD_VAR 0 7
68448: IFFALSE 68538
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
68450: LD_ADDR_VAR 0 3
68454: PUSH
68455: LD_EXP 92
68459: PUSH
68460: LD_VAR 0 2
68464: ARRAY
68465: PPUSH
68466: LD_INT 25
68468: PUSH
68469: LD_INT 12
68471: PUSH
68472: EMPTY
68473: LIST
68474: LIST
68475: PPUSH
68476: CALL_OW 72
68480: PUSH
68481: FOR_IN
68482: IFFALSE 68536
// if not IsInUnit ( j ) and not HasTask ( j ) then
68484: LD_VAR 0 3
68488: PPUSH
68489: CALL_OW 310
68493: NOT
68494: PUSH
68495: LD_VAR 0 3
68499: PPUSH
68500: CALL_OW 314
68504: NOT
68505: AND
68506: IFFALSE 68534
// begin ComEnterUnit ( j , selected ) ;
68508: LD_VAR 0 3
68512: PPUSH
68513: LD_VAR 0 7
68517: PPUSH
68518: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
68522: LD_VAR 0 3
68526: PPUSH
68527: LD_INT 15
68529: PPUSH
68530: CALL_OW 183
// end ;
68534: GO 68481
68536: POP
68537: POP
// end ; end ; end ; end ; end ;
68538: GO 67931
68540: POP
68541: POP
// end ;
68542: LD_VAR 0 1
68546: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
68547: LD_INT 0
68549: PPUSH
68550: PPUSH
68551: PPUSH
68552: PPUSH
// if not mc_bases then
68553: LD_EXP 63
68557: NOT
68558: IFFALSE 68562
// exit ;
68560: GO 68740
// for i = 1 to mc_bases do
68562: LD_ADDR_VAR 0 2
68566: PUSH
68567: DOUBLE
68568: LD_INT 1
68570: DEC
68571: ST_TO_ADDR
68572: LD_EXP 63
68576: PUSH
68577: FOR_TO
68578: IFFALSE 68738
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
68580: LD_ADDR_VAR 0 4
68584: PUSH
68585: LD_EXP 63
68589: PUSH
68590: LD_VAR 0 2
68594: ARRAY
68595: PPUSH
68596: LD_INT 25
68598: PUSH
68599: LD_INT 9
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PPUSH
68606: CALL_OW 72
68610: ST_TO_ADDR
// if not tmp then
68611: LD_VAR 0 4
68615: NOT
68616: IFFALSE 68620
// continue ;
68618: GO 68577
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
68620: LD_EXP 89
68624: PUSH
68625: LD_VAR 0 2
68629: ARRAY
68630: PPUSH
68631: LD_INT 29
68633: PPUSH
68634: CALL_OW 325
68638: NOT
68639: PUSH
68640: LD_EXP 89
68644: PUSH
68645: LD_VAR 0 2
68649: ARRAY
68650: PPUSH
68651: LD_INT 28
68653: PPUSH
68654: CALL_OW 325
68658: NOT
68659: AND
68660: IFFALSE 68664
// continue ;
68662: GO 68577
// for j in tmp do
68664: LD_ADDR_VAR 0 3
68668: PUSH
68669: LD_VAR 0 4
68673: PUSH
68674: FOR_IN
68675: IFFALSE 68734
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
68677: LD_VAR 0 3
68681: PUSH
68682: LD_EXP 66
68686: PUSH
68687: LD_VAR 0 2
68691: ARRAY
68692: PUSH
68693: LD_INT 1
68695: ARRAY
68696: IN
68697: NOT
68698: PUSH
68699: LD_VAR 0 3
68703: PUSH
68704: LD_EXP 66
68708: PUSH
68709: LD_VAR 0 2
68713: ARRAY
68714: PUSH
68715: LD_INT 2
68717: ARRAY
68718: IN
68719: NOT
68720: AND
68721: IFFALSE 68732
// ComSpaceTimeShoot ( j ) ;
68723: LD_VAR 0 3
68727: PPUSH
68728: CALL 13399 0 1
68732: GO 68674
68734: POP
68735: POP
// end ;
68736: GO 68577
68738: POP
68739: POP
// end ;
68740: LD_VAR 0 1
68744: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
68745: LD_INT 0
68747: PPUSH
68748: PPUSH
68749: PPUSH
68750: PPUSH
68751: PPUSH
68752: PPUSH
68753: PPUSH
68754: PPUSH
68755: PPUSH
// if not mc_bases then
68756: LD_EXP 63
68760: NOT
68761: IFFALSE 68765
// exit ;
68763: GO 69387
// for i = 1 to mc_bases do
68765: LD_ADDR_VAR 0 2
68769: PUSH
68770: DOUBLE
68771: LD_INT 1
68773: DEC
68774: ST_TO_ADDR
68775: LD_EXP 63
68779: PUSH
68780: FOR_TO
68781: IFFALSE 69385
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
68783: LD_EXP 98
68787: PUSH
68788: LD_VAR 0 2
68792: ARRAY
68793: NOT
68794: PUSH
68795: LD_INT 38
68797: PPUSH
68798: LD_EXP 89
68802: PUSH
68803: LD_VAR 0 2
68807: ARRAY
68808: PPUSH
68809: CALL_OW 321
68813: PUSH
68814: LD_INT 2
68816: NONEQUAL
68817: OR
68818: IFFALSE 68822
// continue ;
68820: GO 68780
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
68822: LD_ADDR_VAR 0 8
68826: PUSH
68827: LD_EXP 63
68831: PUSH
68832: LD_VAR 0 2
68836: ARRAY
68837: PPUSH
68838: LD_INT 30
68840: PUSH
68841: LD_INT 34
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: PPUSH
68848: CALL_OW 72
68852: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
68853: LD_ADDR_VAR 0 9
68857: PUSH
68858: LD_EXP 63
68862: PUSH
68863: LD_VAR 0 2
68867: ARRAY
68868: PPUSH
68869: LD_INT 25
68871: PUSH
68872: LD_INT 4
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PPUSH
68879: CALL_OW 72
68883: PPUSH
68884: LD_INT 0
68886: PPUSH
68887: CALL 45963 0 2
68891: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
68892: LD_VAR 0 9
68896: NOT
68897: PUSH
68898: LD_VAR 0 8
68902: NOT
68903: OR
68904: PUSH
68905: LD_EXP 63
68909: PUSH
68910: LD_VAR 0 2
68914: ARRAY
68915: PPUSH
68916: LD_INT 124
68918: PPUSH
68919: CALL 45963 0 2
68923: OR
68924: IFFALSE 68928
// continue ;
68926: GO 68780
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
68928: LD_EXP 99
68932: PUSH
68933: LD_VAR 0 2
68937: ARRAY
68938: PUSH
68939: LD_EXP 98
68943: PUSH
68944: LD_VAR 0 2
68948: ARRAY
68949: LESS
68950: PUSH
68951: LD_EXP 99
68955: PUSH
68956: LD_VAR 0 2
68960: ARRAY
68961: PUSH
68962: LD_VAR 0 8
68966: LESS
68967: AND
68968: IFFALSE 69383
// begin tmp := sci [ 1 ] ;
68970: LD_ADDR_VAR 0 7
68974: PUSH
68975: LD_VAR 0 9
68979: PUSH
68980: LD_INT 1
68982: ARRAY
68983: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
68984: LD_VAR 0 7
68988: PPUSH
68989: LD_INT 124
68991: PPUSH
68992: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
68996: LD_ADDR_VAR 0 3
69000: PUSH
69001: DOUBLE
69002: LD_EXP 98
69006: PUSH
69007: LD_VAR 0 2
69011: ARRAY
69012: INC
69013: ST_TO_ADDR
69014: LD_EXP 98
69018: PUSH
69019: LD_VAR 0 2
69023: ARRAY
69024: PUSH
69025: FOR_DOWNTO
69026: IFFALSE 69369
// begin if IsInUnit ( tmp ) then
69028: LD_VAR 0 7
69032: PPUSH
69033: CALL_OW 310
69037: IFFALSE 69048
// ComExitBuilding ( tmp ) ;
69039: LD_VAR 0 7
69043: PPUSH
69044: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
69048: LD_INT 35
69050: PPUSH
69051: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
69055: LD_VAR 0 7
69059: PPUSH
69060: CALL_OW 310
69064: NOT
69065: PUSH
69066: LD_VAR 0 7
69070: PPUSH
69071: CALL_OW 314
69075: NOT
69076: AND
69077: IFFALSE 69048
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
69079: LD_ADDR_VAR 0 6
69083: PUSH
69084: LD_VAR 0 7
69088: PPUSH
69089: CALL_OW 250
69093: PUSH
69094: LD_VAR 0 7
69098: PPUSH
69099: CALL_OW 251
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69108: LD_INT 35
69110: PPUSH
69111: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
69115: LD_ADDR_VAR 0 4
69119: PUSH
69120: LD_EXP 98
69124: PUSH
69125: LD_VAR 0 2
69129: ARRAY
69130: PUSH
69131: LD_VAR 0 3
69135: ARRAY
69136: PUSH
69137: LD_INT 1
69139: ARRAY
69140: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
69141: LD_ADDR_VAR 0 5
69145: PUSH
69146: LD_EXP 98
69150: PUSH
69151: LD_VAR 0 2
69155: ARRAY
69156: PUSH
69157: LD_VAR 0 3
69161: ARRAY
69162: PUSH
69163: LD_INT 2
69165: ARRAY
69166: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
69167: LD_VAR 0 7
69171: PPUSH
69172: LD_INT 10
69174: PPUSH
69175: CALL 19995 0 2
69179: PUSH
69180: LD_INT 4
69182: ARRAY
69183: IFFALSE 69221
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
69185: LD_VAR 0 7
69189: PPUSH
69190: LD_VAR 0 6
69194: PUSH
69195: LD_INT 1
69197: ARRAY
69198: PPUSH
69199: LD_VAR 0 6
69203: PUSH
69204: LD_INT 2
69206: ARRAY
69207: PPUSH
69208: CALL_OW 111
// wait ( 0 0$10 ) ;
69212: LD_INT 350
69214: PPUSH
69215: CALL_OW 67
// end else
69219: GO 69247
// begin ComMoveXY ( tmp , x , y ) ;
69221: LD_VAR 0 7
69225: PPUSH
69226: LD_VAR 0 4
69230: PPUSH
69231: LD_VAR 0 5
69235: PPUSH
69236: CALL_OW 111
// wait ( 0 0$3 ) ;
69240: LD_INT 105
69242: PPUSH
69243: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
69247: LD_VAR 0 7
69251: PPUSH
69252: LD_VAR 0 4
69256: PPUSH
69257: LD_VAR 0 5
69261: PPUSH
69262: CALL_OW 307
69266: IFFALSE 69108
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
69268: LD_VAR 0 7
69272: PPUSH
69273: LD_VAR 0 4
69277: PPUSH
69278: LD_VAR 0 5
69282: PPUSH
69283: LD_VAR 0 8
69287: PUSH
69288: LD_VAR 0 3
69292: ARRAY
69293: PPUSH
69294: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
69298: LD_INT 35
69300: PPUSH
69301: CALL_OW 67
// until not HasTask ( tmp ) ;
69305: LD_VAR 0 7
69309: PPUSH
69310: CALL_OW 314
69314: NOT
69315: IFFALSE 69298
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
69317: LD_ADDR_EXP 99
69321: PUSH
69322: LD_EXP 99
69326: PPUSH
69327: LD_VAR 0 2
69331: PUSH
69332: LD_EXP 99
69336: PUSH
69337: LD_VAR 0 2
69341: ARRAY
69342: PUSH
69343: LD_INT 1
69345: PLUS
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: PPUSH
69351: LD_VAR 0 8
69355: PUSH
69356: LD_VAR 0 3
69360: ARRAY
69361: PPUSH
69362: CALL 17402 0 3
69366: ST_TO_ADDR
// end ;
69367: GO 69025
69369: POP
69370: POP
// MC_Reset ( i , 124 ) ;
69371: LD_VAR 0 2
69375: PPUSH
69376: LD_INT 124
69378: PPUSH
69379: CALL 52990 0 2
// end ; end ;
69383: GO 68780
69385: POP
69386: POP
// end ;
69387: LD_VAR 0 1
69391: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
69392: LD_INT 0
69394: PPUSH
69395: PPUSH
69396: PPUSH
// if not mc_bases then
69397: LD_EXP 63
69401: NOT
69402: IFFALSE 69406
// exit ;
69404: GO 70012
// for i = 1 to mc_bases do
69406: LD_ADDR_VAR 0 2
69410: PUSH
69411: DOUBLE
69412: LD_INT 1
69414: DEC
69415: ST_TO_ADDR
69416: LD_EXP 63
69420: PUSH
69421: FOR_TO
69422: IFFALSE 70010
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
69424: LD_ADDR_VAR 0 3
69428: PUSH
69429: LD_EXP 63
69433: PUSH
69434: LD_VAR 0 2
69438: ARRAY
69439: PPUSH
69440: LD_INT 25
69442: PUSH
69443: LD_INT 4
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PPUSH
69450: CALL_OW 72
69454: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
69455: LD_VAR 0 3
69459: NOT
69460: PUSH
69461: LD_EXP 100
69465: PUSH
69466: LD_VAR 0 2
69470: ARRAY
69471: NOT
69472: OR
69473: PUSH
69474: LD_EXP 63
69478: PUSH
69479: LD_VAR 0 2
69483: ARRAY
69484: PPUSH
69485: LD_INT 2
69487: PUSH
69488: LD_INT 30
69490: PUSH
69491: LD_INT 0
69493: PUSH
69494: EMPTY
69495: LIST
69496: LIST
69497: PUSH
69498: LD_INT 30
69500: PUSH
69501: LD_INT 1
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: LIST
69512: PPUSH
69513: CALL_OW 72
69517: NOT
69518: OR
69519: IFFALSE 69569
// begin if mc_deposits_finder [ i ] then
69521: LD_EXP 101
69525: PUSH
69526: LD_VAR 0 2
69530: ARRAY
69531: IFFALSE 69567
// begin MC_Reset ( i , 125 ) ;
69533: LD_VAR 0 2
69537: PPUSH
69538: LD_INT 125
69540: PPUSH
69541: CALL 52990 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
69545: LD_ADDR_EXP 101
69549: PUSH
69550: LD_EXP 101
69554: PPUSH
69555: LD_VAR 0 2
69559: PPUSH
69560: EMPTY
69561: PPUSH
69562: CALL_OW 1
69566: ST_TO_ADDR
// end ; continue ;
69567: GO 69421
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
69569: LD_EXP 100
69573: PUSH
69574: LD_VAR 0 2
69578: ARRAY
69579: PUSH
69580: LD_INT 1
69582: ARRAY
69583: PUSH
69584: LD_INT 3
69586: ARRAY
69587: PUSH
69588: LD_INT 1
69590: EQUAL
69591: PUSH
69592: LD_INT 20
69594: PPUSH
69595: LD_EXP 89
69599: PUSH
69600: LD_VAR 0 2
69604: ARRAY
69605: PPUSH
69606: CALL_OW 321
69610: PUSH
69611: LD_INT 2
69613: NONEQUAL
69614: AND
69615: IFFALSE 69665
// begin if mc_deposits_finder [ i ] then
69617: LD_EXP 101
69621: PUSH
69622: LD_VAR 0 2
69626: ARRAY
69627: IFFALSE 69663
// begin MC_Reset ( i , 125 ) ;
69629: LD_VAR 0 2
69633: PPUSH
69634: LD_INT 125
69636: PPUSH
69637: CALL 52990 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
69641: LD_ADDR_EXP 101
69645: PUSH
69646: LD_EXP 101
69650: PPUSH
69651: LD_VAR 0 2
69655: PPUSH
69656: EMPTY
69657: PPUSH
69658: CALL_OW 1
69662: ST_TO_ADDR
// end ; continue ;
69663: GO 69421
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
69665: LD_EXP 100
69669: PUSH
69670: LD_VAR 0 2
69674: ARRAY
69675: PUSH
69676: LD_INT 1
69678: ARRAY
69679: PUSH
69680: LD_INT 1
69682: ARRAY
69683: PPUSH
69684: LD_EXP 100
69688: PUSH
69689: LD_VAR 0 2
69693: ARRAY
69694: PUSH
69695: LD_INT 1
69697: ARRAY
69698: PUSH
69699: LD_INT 2
69701: ARRAY
69702: PPUSH
69703: LD_EXP 89
69707: PUSH
69708: LD_VAR 0 2
69712: ARRAY
69713: PPUSH
69714: CALL_OW 440
69718: IFFALSE 69761
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
69720: LD_ADDR_EXP 100
69724: PUSH
69725: LD_EXP 100
69729: PPUSH
69730: LD_VAR 0 2
69734: PPUSH
69735: LD_EXP 100
69739: PUSH
69740: LD_VAR 0 2
69744: ARRAY
69745: PPUSH
69746: LD_INT 1
69748: PPUSH
69749: CALL_OW 3
69753: PPUSH
69754: CALL_OW 1
69758: ST_TO_ADDR
69759: GO 70008
// begin if not mc_deposits_finder [ i ] then
69761: LD_EXP 101
69765: PUSH
69766: LD_VAR 0 2
69770: ARRAY
69771: NOT
69772: IFFALSE 69824
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
69774: LD_ADDR_EXP 101
69778: PUSH
69779: LD_EXP 101
69783: PPUSH
69784: LD_VAR 0 2
69788: PPUSH
69789: LD_VAR 0 3
69793: PUSH
69794: LD_INT 1
69796: ARRAY
69797: PUSH
69798: EMPTY
69799: LIST
69800: PPUSH
69801: CALL_OW 1
69805: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
69806: LD_VAR 0 3
69810: PUSH
69811: LD_INT 1
69813: ARRAY
69814: PPUSH
69815: LD_INT 125
69817: PPUSH
69818: CALL_OW 109
// end else
69822: GO 70008
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
69824: LD_EXP 101
69828: PUSH
69829: LD_VAR 0 2
69833: ARRAY
69834: PUSH
69835: LD_INT 1
69837: ARRAY
69838: PPUSH
69839: CALL_OW 310
69843: IFFALSE 69866
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
69845: LD_EXP 101
69849: PUSH
69850: LD_VAR 0 2
69854: ARRAY
69855: PUSH
69856: LD_INT 1
69858: ARRAY
69859: PPUSH
69860: CALL_OW 122
69864: GO 70008
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
69866: LD_EXP 101
69870: PUSH
69871: LD_VAR 0 2
69875: ARRAY
69876: PUSH
69877: LD_INT 1
69879: ARRAY
69880: PPUSH
69881: CALL_OW 314
69885: NOT
69886: PUSH
69887: LD_EXP 101
69891: PUSH
69892: LD_VAR 0 2
69896: ARRAY
69897: PUSH
69898: LD_INT 1
69900: ARRAY
69901: PPUSH
69902: LD_EXP 100
69906: PUSH
69907: LD_VAR 0 2
69911: ARRAY
69912: PUSH
69913: LD_INT 1
69915: ARRAY
69916: PUSH
69917: LD_INT 1
69919: ARRAY
69920: PPUSH
69921: LD_EXP 100
69925: PUSH
69926: LD_VAR 0 2
69930: ARRAY
69931: PUSH
69932: LD_INT 1
69934: ARRAY
69935: PUSH
69936: LD_INT 2
69938: ARRAY
69939: PPUSH
69940: CALL_OW 297
69944: PUSH
69945: LD_INT 6
69947: GREATER
69948: AND
69949: IFFALSE 70008
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
69951: LD_EXP 101
69955: PUSH
69956: LD_VAR 0 2
69960: ARRAY
69961: PUSH
69962: LD_INT 1
69964: ARRAY
69965: PPUSH
69966: LD_EXP 100
69970: PUSH
69971: LD_VAR 0 2
69975: ARRAY
69976: PUSH
69977: LD_INT 1
69979: ARRAY
69980: PUSH
69981: LD_INT 1
69983: ARRAY
69984: PPUSH
69985: LD_EXP 100
69989: PUSH
69990: LD_VAR 0 2
69994: ARRAY
69995: PUSH
69996: LD_INT 1
69998: ARRAY
69999: PUSH
70000: LD_INT 2
70002: ARRAY
70003: PPUSH
70004: CALL_OW 111
// end ; end ; end ;
70008: GO 69421
70010: POP
70011: POP
// end ;
70012: LD_VAR 0 1
70016: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
70017: LD_INT 0
70019: PPUSH
70020: PPUSH
70021: PPUSH
70022: PPUSH
70023: PPUSH
70024: PPUSH
70025: PPUSH
70026: PPUSH
70027: PPUSH
70028: PPUSH
70029: PPUSH
// if not mc_bases then
70030: LD_EXP 63
70034: NOT
70035: IFFALSE 70039
// exit ;
70037: GO 70979
// for i = 1 to mc_bases do
70039: LD_ADDR_VAR 0 2
70043: PUSH
70044: DOUBLE
70045: LD_INT 1
70047: DEC
70048: ST_TO_ADDR
70049: LD_EXP 63
70053: PUSH
70054: FOR_TO
70055: IFFALSE 70977
// begin if not mc_bases [ i ] or mc_scan [ i ] then
70057: LD_EXP 63
70061: PUSH
70062: LD_VAR 0 2
70066: ARRAY
70067: NOT
70068: PUSH
70069: LD_EXP 86
70073: PUSH
70074: LD_VAR 0 2
70078: ARRAY
70079: OR
70080: IFFALSE 70084
// continue ;
70082: GO 70054
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
70084: LD_ADDR_VAR 0 7
70088: PUSH
70089: LD_EXP 63
70093: PUSH
70094: LD_VAR 0 2
70098: ARRAY
70099: PUSH
70100: LD_INT 1
70102: ARRAY
70103: PPUSH
70104: CALL_OW 248
70108: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
70109: LD_VAR 0 7
70113: PUSH
70114: LD_INT 3
70116: EQUAL
70117: PUSH
70118: LD_EXP 82
70122: PUSH
70123: LD_VAR 0 2
70127: ARRAY
70128: PUSH
70129: LD_EXP 85
70133: PUSH
70134: LD_VAR 0 2
70138: ARRAY
70139: UNION
70140: PPUSH
70141: LD_INT 33
70143: PUSH
70144: LD_INT 2
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PPUSH
70151: CALL_OW 72
70155: NOT
70156: OR
70157: IFFALSE 70161
// continue ;
70159: GO 70054
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
70161: LD_ADDR_VAR 0 9
70165: PUSH
70166: LD_EXP 63
70170: PUSH
70171: LD_VAR 0 2
70175: ARRAY
70176: PPUSH
70177: LD_INT 30
70179: PUSH
70180: LD_INT 36
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PPUSH
70187: CALL_OW 72
70191: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
70192: LD_ADDR_VAR 0 10
70196: PUSH
70197: LD_EXP 82
70201: PUSH
70202: LD_VAR 0 2
70206: ARRAY
70207: PPUSH
70208: LD_INT 34
70210: PUSH
70211: LD_INT 31
70213: PUSH
70214: EMPTY
70215: LIST
70216: LIST
70217: PPUSH
70218: CALL_OW 72
70222: ST_TO_ADDR
// if not cts and not mcts then
70223: LD_VAR 0 9
70227: NOT
70228: PUSH
70229: LD_VAR 0 10
70233: NOT
70234: AND
70235: IFFALSE 70239
// continue ;
70237: GO 70054
// x := cts ;
70239: LD_ADDR_VAR 0 11
70243: PUSH
70244: LD_VAR 0 9
70248: ST_TO_ADDR
// if not x then
70249: LD_VAR 0 11
70253: NOT
70254: IFFALSE 70266
// x := mcts ;
70256: LD_ADDR_VAR 0 11
70260: PUSH
70261: LD_VAR 0 10
70265: ST_TO_ADDR
// if not x then
70266: LD_VAR 0 11
70270: NOT
70271: IFFALSE 70275
// continue ;
70273: GO 70054
// if mc_remote_driver [ i ] then
70275: LD_EXP 103
70279: PUSH
70280: LD_VAR 0 2
70284: ARRAY
70285: IFFALSE 70672
// for j in mc_remote_driver [ i ] do
70287: LD_ADDR_VAR 0 3
70291: PUSH
70292: LD_EXP 103
70296: PUSH
70297: LD_VAR 0 2
70301: ARRAY
70302: PUSH
70303: FOR_IN
70304: IFFALSE 70670
// begin if GetClass ( j ) <> 3 then
70306: LD_VAR 0 3
70310: PPUSH
70311: CALL_OW 257
70315: PUSH
70316: LD_INT 3
70318: NONEQUAL
70319: IFFALSE 70372
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
70321: LD_ADDR_EXP 103
70325: PUSH
70326: LD_EXP 103
70330: PPUSH
70331: LD_VAR 0 2
70335: PPUSH
70336: LD_EXP 103
70340: PUSH
70341: LD_VAR 0 2
70345: ARRAY
70346: PUSH
70347: LD_VAR 0 3
70351: DIFF
70352: PPUSH
70353: CALL_OW 1
70357: ST_TO_ADDR
// SetTag ( j , 0 ) ;
70358: LD_VAR 0 3
70362: PPUSH
70363: LD_INT 0
70365: PPUSH
70366: CALL_OW 109
// continue ;
70370: GO 70303
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
70372: LD_EXP 82
70376: PUSH
70377: LD_VAR 0 2
70381: ARRAY
70382: PPUSH
70383: LD_INT 34
70385: PUSH
70386: LD_INT 31
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: PUSH
70393: LD_INT 58
70395: PUSH
70396: EMPTY
70397: LIST
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PPUSH
70403: CALL_OW 72
70407: PUSH
70408: LD_VAR 0 3
70412: PPUSH
70413: CALL 46051 0 1
70417: NOT
70418: AND
70419: IFFALSE 70490
// begin if IsInUnit ( j ) then
70421: LD_VAR 0 3
70425: PPUSH
70426: CALL_OW 310
70430: IFFALSE 70441
// ComExitBuilding ( j ) ;
70432: LD_VAR 0 3
70436: PPUSH
70437: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
70441: LD_VAR 0 3
70445: PPUSH
70446: LD_EXP 82
70450: PUSH
70451: LD_VAR 0 2
70455: ARRAY
70456: PPUSH
70457: LD_INT 34
70459: PUSH
70460: LD_INT 31
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: PUSH
70467: LD_INT 58
70469: PUSH
70470: EMPTY
70471: LIST
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PPUSH
70477: CALL_OW 72
70481: PUSH
70482: LD_INT 1
70484: ARRAY
70485: PPUSH
70486: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
70490: LD_VAR 0 3
70494: PPUSH
70495: CALL_OW 310
70499: NOT
70500: PUSH
70501: LD_VAR 0 3
70505: PPUSH
70506: CALL_OW 310
70510: PPUSH
70511: CALL_OW 266
70515: PUSH
70516: LD_INT 36
70518: NONEQUAL
70519: PUSH
70520: LD_VAR 0 3
70524: PPUSH
70525: CALL 46051 0 1
70529: NOT
70530: AND
70531: OR
70532: IFFALSE 70668
// begin if IsInUnit ( j ) then
70534: LD_VAR 0 3
70538: PPUSH
70539: CALL_OW 310
70543: IFFALSE 70554
// ComExitBuilding ( j ) ;
70545: LD_VAR 0 3
70549: PPUSH
70550: CALL_OW 122
// ct := 0 ;
70554: LD_ADDR_VAR 0 8
70558: PUSH
70559: LD_INT 0
70561: ST_TO_ADDR
// for k in x do
70562: LD_ADDR_VAR 0 4
70566: PUSH
70567: LD_VAR 0 11
70571: PUSH
70572: FOR_IN
70573: IFFALSE 70646
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
70575: LD_VAR 0 4
70579: PPUSH
70580: CALL_OW 264
70584: PUSH
70585: LD_INT 31
70587: EQUAL
70588: PUSH
70589: LD_VAR 0 4
70593: PPUSH
70594: CALL_OW 311
70598: NOT
70599: AND
70600: PUSH
70601: LD_VAR 0 4
70605: PPUSH
70606: CALL_OW 266
70610: PUSH
70611: LD_INT 36
70613: EQUAL
70614: PUSH
70615: LD_VAR 0 4
70619: PPUSH
70620: CALL_OW 313
70624: PUSH
70625: LD_INT 3
70627: LESS
70628: AND
70629: OR
70630: IFFALSE 70644
// begin ct := k ;
70632: LD_ADDR_VAR 0 8
70636: PUSH
70637: LD_VAR 0 4
70641: ST_TO_ADDR
// break ;
70642: GO 70646
// end ;
70644: GO 70572
70646: POP
70647: POP
// if ct then
70648: LD_VAR 0 8
70652: IFFALSE 70668
// ComEnterUnit ( j , ct ) ;
70654: LD_VAR 0 3
70658: PPUSH
70659: LD_VAR 0 8
70663: PPUSH
70664: CALL_OW 120
// end ; end ;
70668: GO 70303
70670: POP
70671: POP
// places := 0 ;
70672: LD_ADDR_VAR 0 5
70676: PUSH
70677: LD_INT 0
70679: ST_TO_ADDR
// for j = 1 to x do
70680: LD_ADDR_VAR 0 3
70684: PUSH
70685: DOUBLE
70686: LD_INT 1
70688: DEC
70689: ST_TO_ADDR
70690: LD_VAR 0 11
70694: PUSH
70695: FOR_TO
70696: IFFALSE 70772
// if GetWeapon ( x [ j ] ) = ar_control_tower then
70698: LD_VAR 0 11
70702: PUSH
70703: LD_VAR 0 3
70707: ARRAY
70708: PPUSH
70709: CALL_OW 264
70713: PUSH
70714: LD_INT 31
70716: EQUAL
70717: IFFALSE 70735
// places := places + 1 else
70719: LD_ADDR_VAR 0 5
70723: PUSH
70724: LD_VAR 0 5
70728: PUSH
70729: LD_INT 1
70731: PLUS
70732: ST_TO_ADDR
70733: GO 70770
// if GetBType ( x [ j ] ) = b_control_tower then
70735: LD_VAR 0 11
70739: PUSH
70740: LD_VAR 0 3
70744: ARRAY
70745: PPUSH
70746: CALL_OW 266
70750: PUSH
70751: LD_INT 36
70753: EQUAL
70754: IFFALSE 70770
// places := places + 3 ;
70756: LD_ADDR_VAR 0 5
70760: PUSH
70761: LD_VAR 0 5
70765: PUSH
70766: LD_INT 3
70768: PLUS
70769: ST_TO_ADDR
70770: GO 70695
70772: POP
70773: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
70774: LD_VAR 0 5
70778: PUSH
70779: LD_INT 0
70781: EQUAL
70782: PUSH
70783: LD_VAR 0 5
70787: PUSH
70788: LD_EXP 103
70792: PUSH
70793: LD_VAR 0 2
70797: ARRAY
70798: LESSEQUAL
70799: OR
70800: IFFALSE 70804
// continue ;
70802: GO 70054
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
70804: LD_ADDR_VAR 0 6
70808: PUSH
70809: LD_EXP 63
70813: PUSH
70814: LD_VAR 0 2
70818: ARRAY
70819: PPUSH
70820: LD_INT 25
70822: PUSH
70823: LD_INT 3
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: PPUSH
70830: CALL_OW 72
70834: PUSH
70835: LD_EXP 103
70839: PUSH
70840: LD_VAR 0 2
70844: ARRAY
70845: DIFF
70846: PPUSH
70847: LD_INT 3
70849: PPUSH
70850: CALL 46951 0 2
70854: ST_TO_ADDR
// for j in tmp do
70855: LD_ADDR_VAR 0 3
70859: PUSH
70860: LD_VAR 0 6
70864: PUSH
70865: FOR_IN
70866: IFFALSE 70901
// if GetTag ( j ) > 0 then
70868: LD_VAR 0 3
70872: PPUSH
70873: CALL_OW 110
70877: PUSH
70878: LD_INT 0
70880: GREATER
70881: IFFALSE 70899
// tmp := tmp diff j ;
70883: LD_ADDR_VAR 0 6
70887: PUSH
70888: LD_VAR 0 6
70892: PUSH
70893: LD_VAR 0 3
70897: DIFF
70898: ST_TO_ADDR
70899: GO 70865
70901: POP
70902: POP
// if not tmp then
70903: LD_VAR 0 6
70907: NOT
70908: IFFALSE 70912
// continue ;
70910: GO 70054
// if places then
70912: LD_VAR 0 5
70916: IFFALSE 70975
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
70918: LD_ADDR_EXP 103
70922: PUSH
70923: LD_EXP 103
70927: PPUSH
70928: LD_VAR 0 2
70932: PPUSH
70933: LD_EXP 103
70937: PUSH
70938: LD_VAR 0 2
70942: ARRAY
70943: PUSH
70944: LD_VAR 0 6
70948: PUSH
70949: LD_INT 1
70951: ARRAY
70952: UNION
70953: PPUSH
70954: CALL_OW 1
70958: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
70959: LD_VAR 0 6
70963: PUSH
70964: LD_INT 1
70966: ARRAY
70967: PPUSH
70968: LD_INT 126
70970: PPUSH
70971: CALL_OW 109
// end ; end ;
70975: GO 70054
70977: POP
70978: POP
// end ;
70979: LD_VAR 0 1
70983: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
70984: LD_INT 0
70986: PPUSH
70987: PPUSH
70988: PPUSH
70989: PPUSH
70990: PPUSH
70991: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
70992: LD_VAR 0 1
70996: NOT
70997: PUSH
70998: LD_VAR 0 2
71002: NOT
71003: OR
71004: PUSH
71005: LD_VAR 0 3
71009: NOT
71010: OR
71011: PUSH
71012: LD_VAR 0 4
71016: PUSH
71017: LD_INT 1
71019: PUSH
71020: LD_INT 2
71022: PUSH
71023: LD_INT 3
71025: PUSH
71026: LD_INT 4
71028: PUSH
71029: LD_INT 5
71031: PUSH
71032: LD_INT 8
71034: PUSH
71035: LD_INT 9
71037: PUSH
71038: LD_INT 15
71040: PUSH
71041: LD_INT 16
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: IN
71055: NOT
71056: OR
71057: IFFALSE 71061
// exit ;
71059: GO 71961
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
71061: LD_ADDR_VAR 0 2
71065: PUSH
71066: LD_VAR 0 2
71070: PPUSH
71071: LD_INT 21
71073: PUSH
71074: LD_INT 3
71076: PUSH
71077: EMPTY
71078: LIST
71079: LIST
71080: PUSH
71081: LD_INT 24
71083: PUSH
71084: LD_INT 250
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PPUSH
71095: CALL_OW 72
71099: ST_TO_ADDR
// case class of 1 , 15 :
71100: LD_VAR 0 4
71104: PUSH
71105: LD_INT 1
71107: DOUBLE
71108: EQUAL
71109: IFTRUE 71119
71111: LD_INT 15
71113: DOUBLE
71114: EQUAL
71115: IFTRUE 71119
71117: GO 71204
71119: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
71120: LD_ADDR_VAR 0 8
71124: PUSH
71125: LD_VAR 0 2
71129: PPUSH
71130: LD_INT 2
71132: PUSH
71133: LD_INT 30
71135: PUSH
71136: LD_INT 32
71138: PUSH
71139: EMPTY
71140: LIST
71141: LIST
71142: PUSH
71143: LD_INT 30
71145: PUSH
71146: LD_INT 31
71148: PUSH
71149: EMPTY
71150: LIST
71151: LIST
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: LIST
71157: PPUSH
71158: CALL_OW 72
71162: PUSH
71163: LD_VAR 0 2
71167: PPUSH
71168: LD_INT 2
71170: PUSH
71171: LD_INT 30
71173: PUSH
71174: LD_INT 4
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: LD_INT 30
71183: PUSH
71184: LD_INT 5
71186: PUSH
71187: EMPTY
71188: LIST
71189: LIST
71190: PUSH
71191: EMPTY
71192: LIST
71193: LIST
71194: LIST
71195: PPUSH
71196: CALL_OW 72
71200: ADD
71201: ST_TO_ADDR
71202: GO 71450
71204: LD_INT 2
71206: DOUBLE
71207: EQUAL
71208: IFTRUE 71218
71210: LD_INT 16
71212: DOUBLE
71213: EQUAL
71214: IFTRUE 71218
71216: GO 71264
71218: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
71219: LD_ADDR_VAR 0 8
71223: PUSH
71224: LD_VAR 0 2
71228: PPUSH
71229: LD_INT 2
71231: PUSH
71232: LD_INT 30
71234: PUSH
71235: LD_INT 0
71237: PUSH
71238: EMPTY
71239: LIST
71240: LIST
71241: PUSH
71242: LD_INT 30
71244: PUSH
71245: LD_INT 1
71247: PUSH
71248: EMPTY
71249: LIST
71250: LIST
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: LIST
71256: PPUSH
71257: CALL_OW 72
71261: ST_TO_ADDR
71262: GO 71450
71264: LD_INT 3
71266: DOUBLE
71267: EQUAL
71268: IFTRUE 71272
71270: GO 71318
71272: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
71273: LD_ADDR_VAR 0 8
71277: PUSH
71278: LD_VAR 0 2
71282: PPUSH
71283: LD_INT 2
71285: PUSH
71286: LD_INT 30
71288: PUSH
71289: LD_INT 2
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: PUSH
71296: LD_INT 30
71298: PUSH
71299: LD_INT 3
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: LIST
71310: PPUSH
71311: CALL_OW 72
71315: ST_TO_ADDR
71316: GO 71450
71318: LD_INT 4
71320: DOUBLE
71321: EQUAL
71322: IFTRUE 71326
71324: GO 71383
71326: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
71327: LD_ADDR_VAR 0 8
71331: PUSH
71332: LD_VAR 0 2
71336: PPUSH
71337: LD_INT 2
71339: PUSH
71340: LD_INT 30
71342: PUSH
71343: LD_INT 6
71345: PUSH
71346: EMPTY
71347: LIST
71348: LIST
71349: PUSH
71350: LD_INT 30
71352: PUSH
71353: LD_INT 7
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: PUSH
71360: LD_INT 30
71362: PUSH
71363: LD_INT 8
71365: PUSH
71366: EMPTY
71367: LIST
71368: LIST
71369: PUSH
71370: EMPTY
71371: LIST
71372: LIST
71373: LIST
71374: LIST
71375: PPUSH
71376: CALL_OW 72
71380: ST_TO_ADDR
71381: GO 71450
71383: LD_INT 5
71385: DOUBLE
71386: EQUAL
71387: IFTRUE 71403
71389: LD_INT 8
71391: DOUBLE
71392: EQUAL
71393: IFTRUE 71403
71395: LD_INT 9
71397: DOUBLE
71398: EQUAL
71399: IFTRUE 71403
71401: GO 71449
71403: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
71404: LD_ADDR_VAR 0 8
71408: PUSH
71409: LD_VAR 0 2
71413: PPUSH
71414: LD_INT 2
71416: PUSH
71417: LD_INT 30
71419: PUSH
71420: LD_INT 4
71422: PUSH
71423: EMPTY
71424: LIST
71425: LIST
71426: PUSH
71427: LD_INT 30
71429: PUSH
71430: LD_INT 5
71432: PUSH
71433: EMPTY
71434: LIST
71435: LIST
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: LIST
71441: PPUSH
71442: CALL_OW 72
71446: ST_TO_ADDR
71447: GO 71450
71449: POP
// if not tmp then
71450: LD_VAR 0 8
71454: NOT
71455: IFFALSE 71459
// exit ;
71457: GO 71961
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
71459: LD_VAR 0 4
71463: PUSH
71464: LD_INT 1
71466: PUSH
71467: LD_INT 15
71469: PUSH
71470: EMPTY
71471: LIST
71472: LIST
71473: IN
71474: PUSH
71475: LD_EXP 72
71479: PUSH
71480: LD_VAR 0 1
71484: ARRAY
71485: AND
71486: IFFALSE 71642
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
71488: LD_ADDR_VAR 0 9
71492: PUSH
71493: LD_EXP 72
71497: PUSH
71498: LD_VAR 0 1
71502: ARRAY
71503: PUSH
71504: LD_INT 1
71506: ARRAY
71507: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
71508: LD_VAR 0 9
71512: PUSH
71513: LD_EXP 73
71517: PUSH
71518: LD_VAR 0 1
71522: ARRAY
71523: IN
71524: NOT
71525: IFFALSE 71640
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
71527: LD_ADDR_EXP 73
71531: PUSH
71532: LD_EXP 73
71536: PPUSH
71537: LD_VAR 0 1
71541: PUSH
71542: LD_EXP 73
71546: PUSH
71547: LD_VAR 0 1
71551: ARRAY
71552: PUSH
71553: LD_INT 1
71555: PLUS
71556: PUSH
71557: EMPTY
71558: LIST
71559: LIST
71560: PPUSH
71561: LD_VAR 0 9
71565: PPUSH
71566: CALL 17402 0 3
71570: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
71571: LD_ADDR_EXP 72
71575: PUSH
71576: LD_EXP 72
71580: PPUSH
71581: LD_VAR 0 1
71585: PPUSH
71586: LD_EXP 72
71590: PUSH
71591: LD_VAR 0 1
71595: ARRAY
71596: PUSH
71597: LD_VAR 0 9
71601: DIFF
71602: PPUSH
71603: CALL_OW 1
71607: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
71608: LD_VAR 0 3
71612: PPUSH
71613: LD_EXP 73
71617: PUSH
71618: LD_VAR 0 1
71622: ARRAY
71623: PUSH
71624: LD_EXP 73
71628: PUSH
71629: LD_VAR 0 1
71633: ARRAY
71634: ARRAY
71635: PPUSH
71636: CALL_OW 120
// end ; exit ;
71640: GO 71961
// end ; if tmp > 1 then
71642: LD_VAR 0 8
71646: PUSH
71647: LD_INT 1
71649: GREATER
71650: IFFALSE 71754
// for i = 2 to tmp do
71652: LD_ADDR_VAR 0 6
71656: PUSH
71657: DOUBLE
71658: LD_INT 2
71660: DEC
71661: ST_TO_ADDR
71662: LD_VAR 0 8
71666: PUSH
71667: FOR_TO
71668: IFFALSE 71752
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
71670: LD_VAR 0 8
71674: PUSH
71675: LD_VAR 0 6
71679: ARRAY
71680: PPUSH
71681: CALL_OW 461
71685: PUSH
71686: LD_INT 6
71688: EQUAL
71689: IFFALSE 71750
// begin x := tmp [ i ] ;
71691: LD_ADDR_VAR 0 9
71695: PUSH
71696: LD_VAR 0 8
71700: PUSH
71701: LD_VAR 0 6
71705: ARRAY
71706: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
71707: LD_ADDR_VAR 0 8
71711: PUSH
71712: LD_VAR 0 8
71716: PPUSH
71717: LD_VAR 0 6
71721: PPUSH
71722: CALL_OW 3
71726: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
71727: LD_ADDR_VAR 0 8
71731: PUSH
71732: LD_VAR 0 8
71736: PPUSH
71737: LD_INT 1
71739: PPUSH
71740: LD_VAR 0 9
71744: PPUSH
71745: CALL_OW 2
71749: ST_TO_ADDR
// end ;
71750: GO 71667
71752: POP
71753: POP
// for i in tmp do
71754: LD_ADDR_VAR 0 6
71758: PUSH
71759: LD_VAR 0 8
71763: PUSH
71764: FOR_IN
71765: IFFALSE 71834
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
71767: LD_VAR 0 6
71771: PPUSH
71772: CALL_OW 313
71776: PUSH
71777: LD_INT 6
71779: LESS
71780: PUSH
71781: LD_VAR 0 6
71785: PPUSH
71786: CALL_OW 266
71790: PUSH
71791: LD_INT 31
71793: PUSH
71794: LD_INT 32
71796: PUSH
71797: EMPTY
71798: LIST
71799: LIST
71800: IN
71801: NOT
71802: AND
71803: PUSH
71804: LD_VAR 0 6
71808: PPUSH
71809: CALL_OW 313
71813: PUSH
71814: LD_INT 0
71816: EQUAL
71817: OR
71818: IFFALSE 71832
// begin j := i ;
71820: LD_ADDR_VAR 0 7
71824: PUSH
71825: LD_VAR 0 6
71829: ST_TO_ADDR
// break ;
71830: GO 71834
// end ; end ;
71832: GO 71764
71834: POP
71835: POP
// if j then
71836: LD_VAR 0 7
71840: IFFALSE 71858
// ComEnterUnit ( unit , j ) else
71842: LD_VAR 0 3
71846: PPUSH
71847: LD_VAR 0 7
71851: PPUSH
71852: CALL_OW 120
71856: GO 71961
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
71858: LD_ADDR_VAR 0 10
71862: PUSH
71863: LD_VAR 0 2
71867: PPUSH
71868: LD_INT 2
71870: PUSH
71871: LD_INT 30
71873: PUSH
71874: LD_INT 0
71876: PUSH
71877: EMPTY
71878: LIST
71879: LIST
71880: PUSH
71881: LD_INT 30
71883: PUSH
71884: LD_INT 1
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: PUSH
71891: EMPTY
71892: LIST
71893: LIST
71894: LIST
71895: PPUSH
71896: CALL_OW 72
71900: ST_TO_ADDR
// if depot then
71901: LD_VAR 0 10
71905: IFFALSE 71961
// begin depot := NearestUnitToUnit ( depot , unit ) ;
71907: LD_ADDR_VAR 0 10
71911: PUSH
71912: LD_VAR 0 10
71916: PPUSH
71917: LD_VAR 0 3
71921: PPUSH
71922: CALL_OW 74
71926: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
71927: LD_VAR 0 3
71931: PPUSH
71932: LD_VAR 0 10
71936: PPUSH
71937: CALL_OW 296
71941: PUSH
71942: LD_INT 10
71944: GREATER
71945: IFFALSE 71961
// ComStandNearbyBuilding ( unit , depot ) ;
71947: LD_VAR 0 3
71951: PPUSH
71952: LD_VAR 0 10
71956: PPUSH
71957: CALL 14016 0 2
// end ; end ; end ;
71961: LD_VAR 0 5
71965: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
71966: LD_INT 0
71968: PPUSH
71969: PPUSH
71970: PPUSH
71971: PPUSH
// if not mc_bases then
71972: LD_EXP 63
71976: NOT
71977: IFFALSE 71981
// exit ;
71979: GO 72220
// for i = 1 to mc_bases do
71981: LD_ADDR_VAR 0 2
71985: PUSH
71986: DOUBLE
71987: LD_INT 1
71989: DEC
71990: ST_TO_ADDR
71991: LD_EXP 63
71995: PUSH
71996: FOR_TO
71997: IFFALSE 72218
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
71999: LD_ADDR_VAR 0 4
72003: PUSH
72004: LD_EXP 63
72008: PUSH
72009: LD_VAR 0 2
72013: ARRAY
72014: PPUSH
72015: LD_INT 21
72017: PUSH
72018: LD_INT 1
72020: PUSH
72021: EMPTY
72022: LIST
72023: LIST
72024: PPUSH
72025: CALL_OW 72
72029: PUSH
72030: LD_EXP 92
72034: PUSH
72035: LD_VAR 0 2
72039: ARRAY
72040: UNION
72041: ST_TO_ADDR
// if not tmp then
72042: LD_VAR 0 4
72046: NOT
72047: IFFALSE 72051
// continue ;
72049: GO 71996
// for j in tmp do
72051: LD_ADDR_VAR 0 3
72055: PUSH
72056: LD_VAR 0 4
72060: PUSH
72061: FOR_IN
72062: IFFALSE 72214
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
72064: LD_VAR 0 3
72068: PPUSH
72069: CALL_OW 110
72073: NOT
72074: PUSH
72075: LD_VAR 0 3
72079: PPUSH
72080: CALL_OW 314
72084: NOT
72085: AND
72086: PUSH
72087: LD_VAR 0 3
72091: PPUSH
72092: CALL_OW 311
72096: NOT
72097: AND
72098: PUSH
72099: LD_VAR 0 3
72103: PPUSH
72104: CALL_OW 310
72108: NOT
72109: AND
72110: PUSH
72111: LD_VAR 0 3
72115: PUSH
72116: LD_EXP 66
72120: PUSH
72121: LD_VAR 0 2
72125: ARRAY
72126: PUSH
72127: LD_INT 1
72129: ARRAY
72130: IN
72131: NOT
72132: AND
72133: PUSH
72134: LD_VAR 0 3
72138: PUSH
72139: LD_EXP 66
72143: PUSH
72144: LD_VAR 0 2
72148: ARRAY
72149: PUSH
72150: LD_INT 2
72152: ARRAY
72153: IN
72154: NOT
72155: AND
72156: PUSH
72157: LD_VAR 0 3
72161: PUSH
72162: LD_EXP 75
72166: PUSH
72167: LD_VAR 0 2
72171: ARRAY
72172: IN
72173: NOT
72174: AND
72175: IFFALSE 72212
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
72177: LD_VAR 0 2
72181: PPUSH
72182: LD_EXP 63
72186: PUSH
72187: LD_VAR 0 2
72191: ARRAY
72192: PPUSH
72193: LD_VAR 0 3
72197: PPUSH
72198: LD_VAR 0 3
72202: PPUSH
72203: CALL_OW 257
72207: PPUSH
72208: CALL 70984 0 4
// end ;
72212: GO 72061
72214: POP
72215: POP
// end ;
72216: GO 71996
72218: POP
72219: POP
// end ;
72220: LD_VAR 0 1
72224: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
72225: LD_INT 0
72227: PPUSH
72228: PPUSH
72229: PPUSH
72230: PPUSH
72231: PPUSH
72232: PPUSH
// if not mc_bases [ base ] then
72233: LD_EXP 63
72237: PUSH
72238: LD_VAR 0 1
72242: ARRAY
72243: NOT
72244: IFFALSE 72248
// exit ;
72246: GO 72430
// tmp := [ ] ;
72248: LD_ADDR_VAR 0 6
72252: PUSH
72253: EMPTY
72254: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
72255: LD_ADDR_VAR 0 7
72259: PUSH
72260: LD_VAR 0 3
72264: PPUSH
72265: LD_INT 0
72267: PPUSH
72268: CALL_OW 517
72272: ST_TO_ADDR
// if not list then
72273: LD_VAR 0 7
72277: NOT
72278: IFFALSE 72282
// exit ;
72280: GO 72430
// for i = 1 to amount do
72282: LD_ADDR_VAR 0 5
72286: PUSH
72287: DOUBLE
72288: LD_INT 1
72290: DEC
72291: ST_TO_ADDR
72292: LD_VAR 0 2
72296: PUSH
72297: FOR_TO
72298: IFFALSE 72378
// begin x := rand ( 1 , list [ 1 ] ) ;
72300: LD_ADDR_VAR 0 8
72304: PUSH
72305: LD_INT 1
72307: PPUSH
72308: LD_VAR 0 7
72312: PUSH
72313: LD_INT 1
72315: ARRAY
72316: PPUSH
72317: CALL_OW 12
72321: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
72322: LD_ADDR_VAR 0 6
72326: PUSH
72327: LD_VAR 0 6
72331: PPUSH
72332: LD_VAR 0 5
72336: PPUSH
72337: LD_VAR 0 7
72341: PUSH
72342: LD_INT 1
72344: ARRAY
72345: PUSH
72346: LD_VAR 0 8
72350: ARRAY
72351: PUSH
72352: LD_VAR 0 7
72356: PUSH
72357: LD_INT 2
72359: ARRAY
72360: PUSH
72361: LD_VAR 0 8
72365: ARRAY
72366: PUSH
72367: EMPTY
72368: LIST
72369: LIST
72370: PPUSH
72371: CALL_OW 1
72375: ST_TO_ADDR
// end ;
72376: GO 72297
72378: POP
72379: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
72380: LD_ADDR_EXP 76
72384: PUSH
72385: LD_EXP 76
72389: PPUSH
72390: LD_VAR 0 1
72394: PPUSH
72395: LD_VAR 0 6
72399: PPUSH
72400: CALL_OW 1
72404: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
72405: LD_ADDR_EXP 78
72409: PUSH
72410: LD_EXP 78
72414: PPUSH
72415: LD_VAR 0 1
72419: PPUSH
72420: LD_VAR 0 3
72424: PPUSH
72425: CALL_OW 1
72429: ST_TO_ADDR
// end ;
72430: LD_VAR 0 4
72434: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
72435: LD_INT 0
72437: PPUSH
// if not mc_bases [ base ] then
72438: LD_EXP 63
72442: PUSH
72443: LD_VAR 0 1
72447: ARRAY
72448: NOT
72449: IFFALSE 72453
// exit ;
72451: GO 72478
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
72453: LD_ADDR_EXP 68
72457: PUSH
72458: LD_EXP 68
72462: PPUSH
72463: LD_VAR 0 1
72467: PPUSH
72468: LD_VAR 0 2
72472: PPUSH
72473: CALL_OW 1
72477: ST_TO_ADDR
// end ;
72478: LD_VAR 0 3
72482: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
72483: LD_INT 0
72485: PPUSH
// if not mc_bases [ base ] then
72486: LD_EXP 63
72490: PUSH
72491: LD_VAR 0 1
72495: ARRAY
72496: NOT
72497: IFFALSE 72501
// exit ;
72499: GO 72538
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
72501: LD_ADDR_EXP 68
72505: PUSH
72506: LD_EXP 68
72510: PPUSH
72511: LD_VAR 0 1
72515: PPUSH
72516: LD_EXP 68
72520: PUSH
72521: LD_VAR 0 1
72525: ARRAY
72526: PUSH
72527: LD_VAR 0 2
72531: UNION
72532: PPUSH
72533: CALL_OW 1
72537: ST_TO_ADDR
// end ;
72538: LD_VAR 0 3
72542: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
72543: LD_INT 0
72545: PPUSH
// if not mc_bases [ base ] then
72546: LD_EXP 63
72550: PUSH
72551: LD_VAR 0 1
72555: ARRAY
72556: NOT
72557: IFFALSE 72561
// exit ;
72559: GO 72586
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
72561: LD_ADDR_EXP 84
72565: PUSH
72566: LD_EXP 84
72570: PPUSH
72571: LD_VAR 0 1
72575: PPUSH
72576: LD_VAR 0 2
72580: PPUSH
72581: CALL_OW 1
72585: ST_TO_ADDR
// end ;
72586: LD_VAR 0 3
72590: RET
// export function MC_InsertProduceList ( base , components ) ; begin
72591: LD_INT 0
72593: PPUSH
// if not mc_bases [ base ] then
72594: LD_EXP 63
72598: PUSH
72599: LD_VAR 0 1
72603: ARRAY
72604: NOT
72605: IFFALSE 72609
// exit ;
72607: GO 72646
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
72609: LD_ADDR_EXP 84
72613: PUSH
72614: LD_EXP 84
72618: PPUSH
72619: LD_VAR 0 1
72623: PPUSH
72624: LD_EXP 84
72628: PUSH
72629: LD_VAR 0 1
72633: ARRAY
72634: PUSH
72635: LD_VAR 0 2
72639: ADD
72640: PPUSH
72641: CALL_OW 1
72645: ST_TO_ADDR
// end ;
72646: LD_VAR 0 3
72650: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
72651: LD_INT 0
72653: PPUSH
// if not mc_bases [ base ] then
72654: LD_EXP 63
72658: PUSH
72659: LD_VAR 0 1
72663: ARRAY
72664: NOT
72665: IFFALSE 72669
// exit ;
72667: GO 72723
// mc_defender := Replace ( mc_defender , base , deflist ) ;
72669: LD_ADDR_EXP 85
72673: PUSH
72674: LD_EXP 85
72678: PPUSH
72679: LD_VAR 0 1
72683: PPUSH
72684: LD_VAR 0 2
72688: PPUSH
72689: CALL_OW 1
72693: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
72694: LD_ADDR_EXP 74
72698: PUSH
72699: LD_EXP 74
72703: PPUSH
72704: LD_VAR 0 1
72708: PPUSH
72709: LD_VAR 0 2
72713: PUSH
72714: LD_INT 0
72716: PLUS
72717: PPUSH
72718: CALL_OW 1
72722: ST_TO_ADDR
// end ;
72723: LD_VAR 0 3
72727: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
72728: LD_INT 0
72730: PPUSH
// if not mc_bases [ base ] then
72731: LD_EXP 63
72735: PUSH
72736: LD_VAR 0 1
72740: ARRAY
72741: NOT
72742: IFFALSE 72746
// exit ;
72744: GO 72771
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
72746: LD_ADDR_EXP 74
72750: PUSH
72751: LD_EXP 74
72755: PPUSH
72756: LD_VAR 0 1
72760: PPUSH
72761: LD_VAR 0 2
72765: PPUSH
72766: CALL_OW 1
72770: ST_TO_ADDR
// end ;
72771: LD_VAR 0 3
72775: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
72776: LD_INT 0
72778: PPUSH
72779: PPUSH
72780: PPUSH
72781: PPUSH
// if not mc_bases [ base ] then
72782: LD_EXP 63
72786: PUSH
72787: LD_VAR 0 1
72791: ARRAY
72792: NOT
72793: IFFALSE 72797
// exit ;
72795: GO 72862
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
72797: LD_ADDR_EXP 83
72801: PUSH
72802: LD_EXP 83
72806: PPUSH
72807: LD_VAR 0 1
72811: PUSH
72812: LD_EXP 83
72816: PUSH
72817: LD_VAR 0 1
72821: ARRAY
72822: PUSH
72823: LD_INT 1
72825: PLUS
72826: PUSH
72827: EMPTY
72828: LIST
72829: LIST
72830: PPUSH
72831: LD_VAR 0 1
72835: PUSH
72836: LD_VAR 0 2
72840: PUSH
72841: LD_VAR 0 3
72845: PUSH
72846: LD_VAR 0 4
72850: PUSH
72851: EMPTY
72852: LIST
72853: LIST
72854: LIST
72855: LIST
72856: PPUSH
72857: CALL 17402 0 3
72861: ST_TO_ADDR
// end ;
72862: LD_VAR 0 5
72866: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
72867: LD_INT 0
72869: PPUSH
// if not mc_bases [ base ] then
72870: LD_EXP 63
72874: PUSH
72875: LD_VAR 0 1
72879: ARRAY
72880: NOT
72881: IFFALSE 72885
// exit ;
72883: GO 72910
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
72885: LD_ADDR_EXP 100
72889: PUSH
72890: LD_EXP 100
72894: PPUSH
72895: LD_VAR 0 1
72899: PPUSH
72900: LD_VAR 0 2
72904: PPUSH
72905: CALL_OW 1
72909: ST_TO_ADDR
// end ;
72910: LD_VAR 0 3
72914: RET
// export function MC_GetMinesField ( base ) ; begin
72915: LD_INT 0
72917: PPUSH
// result := mc_mines [ base ] ;
72918: LD_ADDR_VAR 0 2
72922: PUSH
72923: LD_EXP 76
72927: PUSH
72928: LD_VAR 0 1
72932: ARRAY
72933: ST_TO_ADDR
// end ;
72934: LD_VAR 0 2
72938: RET
// export function MC_GetProduceList ( base ) ; begin
72939: LD_INT 0
72941: PPUSH
// result := mc_produce [ base ] ;
72942: LD_ADDR_VAR 0 2
72946: PUSH
72947: LD_EXP 84
72951: PUSH
72952: LD_VAR 0 1
72956: ARRAY
72957: ST_TO_ADDR
// end ;
72958: LD_VAR 0 2
72962: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
72963: LD_INT 0
72965: PPUSH
72966: PPUSH
// if not mc_bases then
72967: LD_EXP 63
72971: NOT
72972: IFFALSE 72976
// exit ;
72974: GO 73041
// if mc_bases [ base ] then
72976: LD_EXP 63
72980: PUSH
72981: LD_VAR 0 1
72985: ARRAY
72986: IFFALSE 73041
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
72988: LD_ADDR_VAR 0 3
72992: PUSH
72993: LD_EXP 63
72997: PUSH
72998: LD_VAR 0 1
73002: ARRAY
73003: PPUSH
73004: LD_INT 30
73006: PUSH
73007: LD_VAR 0 2
73011: PUSH
73012: EMPTY
73013: LIST
73014: LIST
73015: PPUSH
73016: CALL_OW 72
73020: ST_TO_ADDR
// if result then
73021: LD_VAR 0 3
73025: IFFALSE 73041
// result := result [ 1 ] ;
73027: LD_ADDR_VAR 0 3
73031: PUSH
73032: LD_VAR 0 3
73036: PUSH
73037: LD_INT 1
73039: ARRAY
73040: ST_TO_ADDR
// end ; end ;
73041: LD_VAR 0 3
73045: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
73046: LD_INT 0
73048: PPUSH
73049: PPUSH
// if not mc_bases then
73050: LD_EXP 63
73054: NOT
73055: IFFALSE 73059
// exit ;
73057: GO 73104
// if mc_bases [ base ] then
73059: LD_EXP 63
73063: PUSH
73064: LD_VAR 0 1
73068: ARRAY
73069: IFFALSE 73104
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
73071: LD_ADDR_VAR 0 3
73075: PUSH
73076: LD_EXP 63
73080: PUSH
73081: LD_VAR 0 1
73085: ARRAY
73086: PPUSH
73087: LD_INT 30
73089: PUSH
73090: LD_VAR 0 2
73094: PUSH
73095: EMPTY
73096: LIST
73097: LIST
73098: PPUSH
73099: CALL_OW 72
73103: ST_TO_ADDR
// end ;
73104: LD_VAR 0 3
73108: RET
// export function MC_SetTame ( base , area ) ; begin
73109: LD_INT 0
73111: PPUSH
// if not mc_bases or not base then
73112: LD_EXP 63
73116: NOT
73117: PUSH
73118: LD_VAR 0 1
73122: NOT
73123: OR
73124: IFFALSE 73128
// exit ;
73126: GO 73153
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
73128: LD_ADDR_EXP 91
73132: PUSH
73133: LD_EXP 91
73137: PPUSH
73138: LD_VAR 0 1
73142: PPUSH
73143: LD_VAR 0 2
73147: PPUSH
73148: CALL_OW 1
73152: ST_TO_ADDR
// end ;
73153: LD_VAR 0 3
73157: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
73158: LD_INT 0
73160: PPUSH
73161: PPUSH
// if not mc_bases or not base then
73162: LD_EXP 63
73166: NOT
73167: PUSH
73168: LD_VAR 0 1
73172: NOT
73173: OR
73174: IFFALSE 73178
// exit ;
73176: GO 73280
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
73178: LD_ADDR_VAR 0 4
73182: PUSH
73183: LD_EXP 63
73187: PUSH
73188: LD_VAR 0 1
73192: ARRAY
73193: PPUSH
73194: LD_INT 30
73196: PUSH
73197: LD_VAR 0 2
73201: PUSH
73202: EMPTY
73203: LIST
73204: LIST
73205: PPUSH
73206: CALL_OW 72
73210: ST_TO_ADDR
// if not tmp then
73211: LD_VAR 0 4
73215: NOT
73216: IFFALSE 73220
// exit ;
73218: GO 73280
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
73220: LD_ADDR_EXP 95
73224: PUSH
73225: LD_EXP 95
73229: PPUSH
73230: LD_VAR 0 1
73234: PPUSH
73235: LD_EXP 95
73239: PUSH
73240: LD_VAR 0 1
73244: ARRAY
73245: PPUSH
73246: LD_EXP 95
73250: PUSH
73251: LD_VAR 0 1
73255: ARRAY
73256: PUSH
73257: LD_INT 1
73259: PLUS
73260: PPUSH
73261: LD_VAR 0 4
73265: PUSH
73266: LD_INT 1
73268: ARRAY
73269: PPUSH
73270: CALL_OW 2
73274: PPUSH
73275: CALL_OW 1
73279: ST_TO_ADDR
// end ;
73280: LD_VAR 0 3
73284: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
73285: LD_INT 0
73287: PPUSH
73288: PPUSH
// if not mc_bases or not base or not kinds then
73289: LD_EXP 63
73293: NOT
73294: PUSH
73295: LD_VAR 0 1
73299: NOT
73300: OR
73301: PUSH
73302: LD_VAR 0 2
73306: NOT
73307: OR
73308: IFFALSE 73312
// exit ;
73310: GO 73373
// for i in kinds do
73312: LD_ADDR_VAR 0 4
73316: PUSH
73317: LD_VAR 0 2
73321: PUSH
73322: FOR_IN
73323: IFFALSE 73371
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
73325: LD_ADDR_EXP 97
73329: PUSH
73330: LD_EXP 97
73334: PPUSH
73335: LD_VAR 0 1
73339: PUSH
73340: LD_EXP 97
73344: PUSH
73345: LD_VAR 0 1
73349: ARRAY
73350: PUSH
73351: LD_INT 1
73353: PLUS
73354: PUSH
73355: EMPTY
73356: LIST
73357: LIST
73358: PPUSH
73359: LD_VAR 0 4
73363: PPUSH
73364: CALL 17402 0 3
73368: ST_TO_ADDR
73369: GO 73322
73371: POP
73372: POP
// end ;
73373: LD_VAR 0 3
73377: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
73378: LD_INT 0
73380: PPUSH
// if not mc_bases or not base or not areas then
73381: LD_EXP 63
73385: NOT
73386: PUSH
73387: LD_VAR 0 1
73391: NOT
73392: OR
73393: PUSH
73394: LD_VAR 0 2
73398: NOT
73399: OR
73400: IFFALSE 73404
// exit ;
73402: GO 73429
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
73404: LD_ADDR_EXP 81
73408: PUSH
73409: LD_EXP 81
73413: PPUSH
73414: LD_VAR 0 1
73418: PPUSH
73419: LD_VAR 0 2
73423: PPUSH
73424: CALL_OW 1
73428: ST_TO_ADDR
// end ;
73429: LD_VAR 0 3
73433: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
73434: LD_INT 0
73436: PPUSH
// if not mc_bases or not base or not teleports_exit then
73437: LD_EXP 63
73441: NOT
73442: PUSH
73443: LD_VAR 0 1
73447: NOT
73448: OR
73449: PUSH
73450: LD_VAR 0 2
73454: NOT
73455: OR
73456: IFFALSE 73460
// exit ;
73458: GO 73485
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
73460: LD_ADDR_EXP 98
73464: PUSH
73465: LD_EXP 98
73469: PPUSH
73470: LD_VAR 0 1
73474: PPUSH
73475: LD_VAR 0 2
73479: PPUSH
73480: CALL_OW 1
73484: ST_TO_ADDR
// end ;
73485: LD_VAR 0 3
73489: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
73490: LD_INT 0
73492: PPUSH
73493: PPUSH
73494: PPUSH
// if not mc_bases or not base or not ext_list then
73495: LD_EXP 63
73499: NOT
73500: PUSH
73501: LD_VAR 0 1
73505: NOT
73506: OR
73507: PUSH
73508: LD_VAR 0 5
73512: NOT
73513: OR
73514: IFFALSE 73518
// exit ;
73516: GO 73691
// tmp := GetFacExtXYD ( x , y , d ) ;
73518: LD_ADDR_VAR 0 8
73522: PUSH
73523: LD_VAR 0 2
73527: PPUSH
73528: LD_VAR 0 3
73532: PPUSH
73533: LD_VAR 0 4
73537: PPUSH
73538: CALL 46081 0 3
73542: ST_TO_ADDR
// if not tmp then
73543: LD_VAR 0 8
73547: NOT
73548: IFFALSE 73552
// exit ;
73550: GO 73691
// for i in tmp do
73552: LD_ADDR_VAR 0 7
73556: PUSH
73557: LD_VAR 0 8
73561: PUSH
73562: FOR_IN
73563: IFFALSE 73689
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
73565: LD_ADDR_EXP 68
73569: PUSH
73570: LD_EXP 68
73574: PPUSH
73575: LD_VAR 0 1
73579: PPUSH
73580: LD_EXP 68
73584: PUSH
73585: LD_VAR 0 1
73589: ARRAY
73590: PPUSH
73591: LD_EXP 68
73595: PUSH
73596: LD_VAR 0 1
73600: ARRAY
73601: PUSH
73602: LD_INT 1
73604: PLUS
73605: PPUSH
73606: LD_VAR 0 5
73610: PUSH
73611: LD_INT 1
73613: ARRAY
73614: PUSH
73615: LD_VAR 0 7
73619: PUSH
73620: LD_INT 1
73622: ARRAY
73623: PUSH
73624: LD_VAR 0 7
73628: PUSH
73629: LD_INT 2
73631: ARRAY
73632: PUSH
73633: LD_VAR 0 7
73637: PUSH
73638: LD_INT 3
73640: ARRAY
73641: PUSH
73642: EMPTY
73643: LIST
73644: LIST
73645: LIST
73646: LIST
73647: PPUSH
73648: CALL_OW 2
73652: PPUSH
73653: CALL_OW 1
73657: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
73658: LD_ADDR_VAR 0 5
73662: PUSH
73663: LD_VAR 0 5
73667: PPUSH
73668: LD_INT 1
73670: PPUSH
73671: CALL_OW 3
73675: ST_TO_ADDR
// if not ext_list then
73676: LD_VAR 0 5
73680: NOT
73681: IFFALSE 73687
// exit ;
73683: POP
73684: POP
73685: GO 73691
// end ;
73687: GO 73562
73689: POP
73690: POP
// end ;
73691: LD_VAR 0 6
73695: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
73696: LD_INT 0
73698: PPUSH
// if not mc_bases or not base or not weapon_list then
73699: LD_EXP 63
73703: NOT
73704: PUSH
73705: LD_VAR 0 1
73709: NOT
73710: OR
73711: PUSH
73712: LD_VAR 0 2
73716: NOT
73717: OR
73718: IFFALSE 73722
// exit ;
73720: GO 73747
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
73722: LD_ADDR_EXP 102
73726: PUSH
73727: LD_EXP 102
73731: PPUSH
73732: LD_VAR 0 1
73736: PPUSH
73737: LD_VAR 0 2
73741: PPUSH
73742: CALL_OW 1
73746: ST_TO_ADDR
// end ;
73747: LD_VAR 0 3
73751: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
73752: LD_INT 0
73754: PPUSH
// if not mc_bases or not base or not tech_list then
73755: LD_EXP 63
73759: NOT
73760: PUSH
73761: LD_VAR 0 1
73765: NOT
73766: OR
73767: PUSH
73768: LD_VAR 0 2
73772: NOT
73773: OR
73774: IFFALSE 73778
// exit ;
73776: GO 73803
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
73778: LD_ADDR_EXP 90
73782: PUSH
73783: LD_EXP 90
73787: PPUSH
73788: LD_VAR 0 1
73792: PPUSH
73793: LD_VAR 0 2
73797: PPUSH
73798: CALL_OW 1
73802: ST_TO_ADDR
// end ;
73803: LD_VAR 0 3
73807: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
73808: LD_INT 0
73810: PPUSH
// if not mc_bases or not parking_area or not base then
73811: LD_EXP 63
73815: NOT
73816: PUSH
73817: LD_VAR 0 2
73821: NOT
73822: OR
73823: PUSH
73824: LD_VAR 0 1
73828: NOT
73829: OR
73830: IFFALSE 73834
// exit ;
73832: GO 73859
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
73834: LD_ADDR_EXP 87
73838: PUSH
73839: LD_EXP 87
73843: PPUSH
73844: LD_VAR 0 1
73848: PPUSH
73849: LD_VAR 0 2
73853: PPUSH
73854: CALL_OW 1
73858: ST_TO_ADDR
// end ;
73859: LD_VAR 0 3
73863: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
73864: LD_INT 0
73866: PPUSH
// if not mc_bases or not base or not scan_area then
73867: LD_EXP 63
73871: NOT
73872: PUSH
73873: LD_VAR 0 1
73877: NOT
73878: OR
73879: PUSH
73880: LD_VAR 0 2
73884: NOT
73885: OR
73886: IFFALSE 73890
// exit ;
73888: GO 73915
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
73890: LD_ADDR_EXP 88
73894: PUSH
73895: LD_EXP 88
73899: PPUSH
73900: LD_VAR 0 1
73904: PPUSH
73905: LD_VAR 0 2
73909: PPUSH
73910: CALL_OW 1
73914: ST_TO_ADDR
// end ;
73915: LD_VAR 0 3
73919: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
73920: LD_INT 0
73922: PPUSH
73923: PPUSH
// if not mc_bases or not base then
73924: LD_EXP 63
73928: NOT
73929: PUSH
73930: LD_VAR 0 1
73934: NOT
73935: OR
73936: IFFALSE 73940
// exit ;
73938: GO 74004
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
73940: LD_ADDR_VAR 0 3
73944: PUSH
73945: LD_INT 1
73947: PUSH
73948: LD_INT 2
73950: PUSH
73951: LD_INT 3
73953: PUSH
73954: LD_INT 4
73956: PUSH
73957: LD_INT 11
73959: PUSH
73960: EMPTY
73961: LIST
73962: LIST
73963: LIST
73964: LIST
73965: LIST
73966: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
73967: LD_ADDR_EXP 90
73971: PUSH
73972: LD_EXP 90
73976: PPUSH
73977: LD_VAR 0 1
73981: PPUSH
73982: LD_EXP 90
73986: PUSH
73987: LD_VAR 0 1
73991: ARRAY
73992: PUSH
73993: LD_VAR 0 3
73997: DIFF
73998: PPUSH
73999: CALL_OW 1
74003: ST_TO_ADDR
// end ;
74004: LD_VAR 0 2
74008: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
74009: LD_INT 0
74011: PPUSH
// result := mc_vehicles [ base ] ;
74012: LD_ADDR_VAR 0 3
74016: PUSH
74017: LD_EXP 82
74021: PUSH
74022: LD_VAR 0 1
74026: ARRAY
74027: ST_TO_ADDR
// if onlyCombat then
74028: LD_VAR 0 2
74032: IFFALSE 74197
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
74034: LD_ADDR_VAR 0 3
74038: PUSH
74039: LD_VAR 0 3
74043: PUSH
74044: LD_VAR 0 3
74048: PPUSH
74049: LD_INT 2
74051: PUSH
74052: LD_INT 34
74054: PUSH
74055: LD_INT 12
74057: PUSH
74058: EMPTY
74059: LIST
74060: LIST
74061: PUSH
74062: LD_INT 34
74064: PUSH
74065: LD_INT 51
74067: PUSH
74068: EMPTY
74069: LIST
74070: LIST
74071: PUSH
74072: LD_INT 34
74074: PUSH
74075: LD_EXP 49
74079: PUSH
74080: EMPTY
74081: LIST
74082: LIST
74083: PUSH
74084: LD_INT 34
74086: PUSH
74087: LD_INT 32
74089: PUSH
74090: EMPTY
74091: LIST
74092: LIST
74093: PUSH
74094: LD_INT 34
74096: PUSH
74097: LD_INT 13
74099: PUSH
74100: EMPTY
74101: LIST
74102: LIST
74103: PUSH
74104: LD_INT 34
74106: PUSH
74107: LD_INT 52
74109: PUSH
74110: EMPTY
74111: LIST
74112: LIST
74113: PUSH
74114: LD_INT 34
74116: PUSH
74117: LD_INT 14
74119: PUSH
74120: EMPTY
74121: LIST
74122: LIST
74123: PUSH
74124: LD_INT 34
74126: PUSH
74127: LD_INT 53
74129: PUSH
74130: EMPTY
74131: LIST
74132: LIST
74133: PUSH
74134: LD_INT 34
74136: PUSH
74137: LD_EXP 48
74141: PUSH
74142: EMPTY
74143: LIST
74144: LIST
74145: PUSH
74146: LD_INT 34
74148: PUSH
74149: LD_INT 31
74151: PUSH
74152: EMPTY
74153: LIST
74154: LIST
74155: PUSH
74156: LD_INT 34
74158: PUSH
74159: LD_INT 48
74161: PUSH
74162: EMPTY
74163: LIST
74164: LIST
74165: PUSH
74166: LD_INT 34
74168: PUSH
74169: LD_INT 8
74171: PUSH
74172: EMPTY
74173: LIST
74174: LIST
74175: PUSH
74176: EMPTY
74177: LIST
74178: LIST
74179: LIST
74180: LIST
74181: LIST
74182: LIST
74183: LIST
74184: LIST
74185: LIST
74186: LIST
74187: LIST
74188: LIST
74189: LIST
74190: PPUSH
74191: CALL_OW 72
74195: DIFF
74196: ST_TO_ADDR
// end ; end_of_file
74197: LD_VAR 0 3
74201: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
74202: LD_INT 0
74204: PPUSH
74205: PPUSH
74206: PPUSH
// if not mc_bases or not skirmish then
74207: LD_EXP 63
74211: NOT
74212: PUSH
74213: LD_EXP 61
74217: NOT
74218: OR
74219: IFFALSE 74223
// exit ;
74221: GO 74388
// for i = 1 to mc_bases do
74223: LD_ADDR_VAR 0 4
74227: PUSH
74228: DOUBLE
74229: LD_INT 1
74231: DEC
74232: ST_TO_ADDR
74233: LD_EXP 63
74237: PUSH
74238: FOR_TO
74239: IFFALSE 74386
// begin if sci in mc_bases [ i ] then
74241: LD_VAR 0 2
74245: PUSH
74246: LD_EXP 63
74250: PUSH
74251: LD_VAR 0 4
74255: ARRAY
74256: IN
74257: IFFALSE 74384
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
74259: LD_ADDR_EXP 92
74263: PUSH
74264: LD_EXP 92
74268: PPUSH
74269: LD_VAR 0 4
74273: PUSH
74274: LD_EXP 92
74278: PUSH
74279: LD_VAR 0 4
74283: ARRAY
74284: PUSH
74285: LD_INT 1
74287: PLUS
74288: PUSH
74289: EMPTY
74290: LIST
74291: LIST
74292: PPUSH
74293: LD_VAR 0 1
74297: PPUSH
74298: CALL 17402 0 3
74302: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
74303: LD_ADDR_VAR 0 5
74307: PUSH
74308: LD_EXP 63
74312: PUSH
74313: LD_VAR 0 4
74317: ARRAY
74318: PPUSH
74319: LD_INT 2
74321: PUSH
74322: LD_INT 30
74324: PUSH
74325: LD_INT 0
74327: PUSH
74328: EMPTY
74329: LIST
74330: LIST
74331: PUSH
74332: LD_INT 30
74334: PUSH
74335: LD_INT 1
74337: PUSH
74338: EMPTY
74339: LIST
74340: LIST
74341: PUSH
74342: EMPTY
74343: LIST
74344: LIST
74345: LIST
74346: PPUSH
74347: CALL_OW 72
74351: PPUSH
74352: LD_VAR 0 1
74356: PPUSH
74357: CALL_OW 74
74361: ST_TO_ADDR
// if tmp then
74362: LD_VAR 0 5
74366: IFFALSE 74382
// ComStandNearbyBuilding ( ape , tmp ) ;
74368: LD_VAR 0 1
74372: PPUSH
74373: LD_VAR 0 5
74377: PPUSH
74378: CALL 14016 0 2
// break ;
74382: GO 74386
// end ; end ;
74384: GO 74238
74386: POP
74387: POP
// end ;
74388: LD_VAR 0 3
74392: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
74393: LD_INT 0
74395: PPUSH
74396: PPUSH
74397: PPUSH
// if not mc_bases or not skirmish then
74398: LD_EXP 63
74402: NOT
74403: PUSH
74404: LD_EXP 61
74408: NOT
74409: OR
74410: IFFALSE 74414
// exit ;
74412: GO 74503
// for i = 1 to mc_bases do
74414: LD_ADDR_VAR 0 4
74418: PUSH
74419: DOUBLE
74420: LD_INT 1
74422: DEC
74423: ST_TO_ADDR
74424: LD_EXP 63
74428: PUSH
74429: FOR_TO
74430: IFFALSE 74501
// begin if building in mc_busy_turret_list [ i ] then
74432: LD_VAR 0 1
74436: PUSH
74437: LD_EXP 73
74441: PUSH
74442: LD_VAR 0 4
74446: ARRAY
74447: IN
74448: IFFALSE 74499
// begin tmp := mc_busy_turret_list [ i ] diff building ;
74450: LD_ADDR_VAR 0 5
74454: PUSH
74455: LD_EXP 73
74459: PUSH
74460: LD_VAR 0 4
74464: ARRAY
74465: PUSH
74466: LD_VAR 0 1
74470: DIFF
74471: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
74472: LD_ADDR_EXP 73
74476: PUSH
74477: LD_EXP 73
74481: PPUSH
74482: LD_VAR 0 4
74486: PPUSH
74487: LD_VAR 0 5
74491: PPUSH
74492: CALL_OW 1
74496: ST_TO_ADDR
// break ;
74497: GO 74501
// end ; end ;
74499: GO 74429
74501: POP
74502: POP
// end ;
74503: LD_VAR 0 3
74507: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
74508: LD_INT 0
74510: PPUSH
74511: PPUSH
74512: PPUSH
// if not mc_bases or not skirmish then
74513: LD_EXP 63
74517: NOT
74518: PUSH
74519: LD_EXP 61
74523: NOT
74524: OR
74525: IFFALSE 74529
// exit ;
74527: GO 74728
// for i = 1 to mc_bases do
74529: LD_ADDR_VAR 0 5
74533: PUSH
74534: DOUBLE
74535: LD_INT 1
74537: DEC
74538: ST_TO_ADDR
74539: LD_EXP 63
74543: PUSH
74544: FOR_TO
74545: IFFALSE 74726
// if building in mc_bases [ i ] then
74547: LD_VAR 0 1
74551: PUSH
74552: LD_EXP 63
74556: PUSH
74557: LD_VAR 0 5
74561: ARRAY
74562: IN
74563: IFFALSE 74724
// begin tmp := mc_bases [ i ] diff building ;
74565: LD_ADDR_VAR 0 6
74569: PUSH
74570: LD_EXP 63
74574: PUSH
74575: LD_VAR 0 5
74579: ARRAY
74580: PUSH
74581: LD_VAR 0 1
74585: DIFF
74586: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
74587: LD_ADDR_EXP 63
74591: PUSH
74592: LD_EXP 63
74596: PPUSH
74597: LD_VAR 0 5
74601: PPUSH
74602: LD_VAR 0 6
74606: PPUSH
74607: CALL_OW 1
74611: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
74612: LD_VAR 0 1
74616: PUSH
74617: LD_EXP 71
74621: PUSH
74622: LD_VAR 0 5
74626: ARRAY
74627: IN
74628: IFFALSE 74667
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
74630: LD_ADDR_EXP 71
74634: PUSH
74635: LD_EXP 71
74639: PPUSH
74640: LD_VAR 0 5
74644: PPUSH
74645: LD_EXP 71
74649: PUSH
74650: LD_VAR 0 5
74654: ARRAY
74655: PUSH
74656: LD_VAR 0 1
74660: DIFF
74661: PPUSH
74662: CALL_OW 1
74666: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
74667: LD_VAR 0 1
74671: PUSH
74672: LD_EXP 72
74676: PUSH
74677: LD_VAR 0 5
74681: ARRAY
74682: IN
74683: IFFALSE 74722
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
74685: LD_ADDR_EXP 72
74689: PUSH
74690: LD_EXP 72
74694: PPUSH
74695: LD_VAR 0 5
74699: PPUSH
74700: LD_EXP 72
74704: PUSH
74705: LD_VAR 0 5
74709: ARRAY
74710: PUSH
74711: LD_VAR 0 1
74715: DIFF
74716: PPUSH
74717: CALL_OW 1
74721: ST_TO_ADDR
// break ;
74722: GO 74726
// end ;
74724: GO 74544
74726: POP
74727: POP
// end ;
74728: LD_VAR 0 4
74732: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
74733: LD_INT 0
74735: PPUSH
74736: PPUSH
74737: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
74738: LD_EXP 63
74742: NOT
74743: PUSH
74744: LD_EXP 61
74748: NOT
74749: OR
74750: PUSH
74751: LD_VAR 0 3
74755: PUSH
74756: LD_EXP 89
74760: IN
74761: NOT
74762: OR
74763: IFFALSE 74767
// exit ;
74765: GO 74890
// for i = 1 to mc_vehicles do
74767: LD_ADDR_VAR 0 6
74771: PUSH
74772: DOUBLE
74773: LD_INT 1
74775: DEC
74776: ST_TO_ADDR
74777: LD_EXP 82
74781: PUSH
74782: FOR_TO
74783: IFFALSE 74888
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
74785: LD_VAR 0 2
74789: PUSH
74790: LD_EXP 82
74794: PUSH
74795: LD_VAR 0 6
74799: ARRAY
74800: IN
74801: PUSH
74802: LD_VAR 0 1
74806: PUSH
74807: LD_EXP 82
74811: PUSH
74812: LD_VAR 0 6
74816: ARRAY
74817: IN
74818: OR
74819: IFFALSE 74886
// begin tmp := mc_vehicles [ i ] diff old ;
74821: LD_ADDR_VAR 0 7
74825: PUSH
74826: LD_EXP 82
74830: PUSH
74831: LD_VAR 0 6
74835: ARRAY
74836: PUSH
74837: LD_VAR 0 2
74841: DIFF
74842: ST_TO_ADDR
// tmp := tmp diff new ;
74843: LD_ADDR_VAR 0 7
74847: PUSH
74848: LD_VAR 0 7
74852: PUSH
74853: LD_VAR 0 1
74857: DIFF
74858: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
74859: LD_ADDR_EXP 82
74863: PUSH
74864: LD_EXP 82
74868: PPUSH
74869: LD_VAR 0 6
74873: PPUSH
74874: LD_VAR 0 7
74878: PPUSH
74879: CALL_OW 1
74883: ST_TO_ADDR
// break ;
74884: GO 74888
// end ;
74886: GO 74782
74888: POP
74889: POP
// end ;
74890: LD_VAR 0 5
74894: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
74895: LD_INT 0
74897: PPUSH
74898: PPUSH
74899: PPUSH
74900: PPUSH
// if not mc_bases or not skirmish then
74901: LD_EXP 63
74905: NOT
74906: PUSH
74907: LD_EXP 61
74911: NOT
74912: OR
74913: IFFALSE 74917
// exit ;
74915: GO 75294
// side := GetSide ( vehicle ) ;
74917: LD_ADDR_VAR 0 5
74921: PUSH
74922: LD_VAR 0 1
74926: PPUSH
74927: CALL_OW 255
74931: ST_TO_ADDR
// for i = 1 to mc_bases do
74932: LD_ADDR_VAR 0 4
74936: PUSH
74937: DOUBLE
74938: LD_INT 1
74940: DEC
74941: ST_TO_ADDR
74942: LD_EXP 63
74946: PUSH
74947: FOR_TO
74948: IFFALSE 75292
// begin if factory in mc_bases [ i ] then
74950: LD_VAR 0 2
74954: PUSH
74955: LD_EXP 63
74959: PUSH
74960: LD_VAR 0 4
74964: ARRAY
74965: IN
74966: IFFALSE 75290
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
74968: LD_EXP 85
74972: PUSH
74973: LD_VAR 0 4
74977: ARRAY
74978: PUSH
74979: LD_EXP 74
74983: PUSH
74984: LD_VAR 0 4
74988: ARRAY
74989: LESS
74990: PUSH
74991: LD_VAR 0 1
74995: PPUSH
74996: CALL_OW 264
75000: PUSH
75001: LD_INT 31
75003: PUSH
75004: LD_INT 32
75006: PUSH
75007: LD_INT 51
75009: PUSH
75010: LD_EXP 49
75014: PUSH
75015: LD_INT 12
75017: PUSH
75018: LD_INT 30
75020: PUSH
75021: LD_EXP 48
75025: PUSH
75026: LD_INT 11
75028: PUSH
75029: LD_INT 53
75031: PUSH
75032: LD_INT 14
75034: PUSH
75035: LD_EXP 52
75039: PUSH
75040: LD_INT 29
75042: PUSH
75043: LD_EXP 50
75047: PUSH
75048: LD_INT 13
75050: PUSH
75051: LD_INT 52
75053: PUSH
75054: LD_INT 48
75056: PUSH
75057: LD_INT 8
75059: PUSH
75060: EMPTY
75061: LIST
75062: LIST
75063: LIST
75064: LIST
75065: LIST
75066: LIST
75067: LIST
75068: LIST
75069: LIST
75070: LIST
75071: LIST
75072: LIST
75073: LIST
75074: LIST
75075: LIST
75076: LIST
75077: LIST
75078: IN
75079: NOT
75080: AND
75081: IFFALSE 75129
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
75083: LD_ADDR_EXP 85
75087: PUSH
75088: LD_EXP 85
75092: PPUSH
75093: LD_VAR 0 4
75097: PUSH
75098: LD_EXP 85
75102: PUSH
75103: LD_VAR 0 4
75107: ARRAY
75108: PUSH
75109: LD_INT 1
75111: PLUS
75112: PUSH
75113: EMPTY
75114: LIST
75115: LIST
75116: PPUSH
75117: LD_VAR 0 1
75121: PPUSH
75122: CALL 17402 0 3
75126: ST_TO_ADDR
75127: GO 75173
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
75129: LD_ADDR_EXP 82
75133: PUSH
75134: LD_EXP 82
75138: PPUSH
75139: LD_VAR 0 4
75143: PUSH
75144: LD_EXP 82
75148: PUSH
75149: LD_VAR 0 4
75153: ARRAY
75154: PUSH
75155: LD_INT 1
75157: PLUS
75158: PUSH
75159: EMPTY
75160: LIST
75161: LIST
75162: PPUSH
75163: LD_VAR 0 1
75167: PPUSH
75168: CALL 17402 0 3
75172: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
75173: LD_VAR 0 1
75177: PPUSH
75178: CALL_OW 263
75182: PUSH
75183: LD_INT 2
75185: EQUAL
75186: IFFALSE 75206
// begin repeat wait ( 0 0$1 ) ;
75188: LD_INT 35
75190: PPUSH
75191: CALL_OW 67
// until IsControledBy ( vehicle ) ;
75195: LD_VAR 0 1
75199: PPUSH
75200: CALL_OW 312
75204: IFFALSE 75188
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
75206: LD_VAR 0 1
75210: PPUSH
75211: LD_EXP 87
75215: PUSH
75216: LD_VAR 0 4
75220: ARRAY
75221: PPUSH
75222: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
75226: LD_VAR 0 1
75230: PPUSH
75231: CALL_OW 263
75235: PUSH
75236: LD_INT 1
75238: NONEQUAL
75239: IFFALSE 75243
// break ;
75241: GO 75292
// repeat wait ( 0 0$1 ) ;
75243: LD_INT 35
75245: PPUSH
75246: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
75250: LD_VAR 0 1
75254: PPUSH
75255: LD_EXP 87
75259: PUSH
75260: LD_VAR 0 4
75264: ARRAY
75265: PPUSH
75266: CALL_OW 308
75270: IFFALSE 75243
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
75272: LD_VAR 0 1
75276: PPUSH
75277: CALL_OW 311
75281: PPUSH
75282: CALL_OW 121
// exit ;
75286: POP
75287: POP
75288: GO 75294
// end ; end ;
75290: GO 74947
75292: POP
75293: POP
// end ;
75294: LD_VAR 0 3
75298: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
75299: LD_INT 0
75301: PPUSH
75302: PPUSH
75303: PPUSH
75304: PPUSH
// if not mc_bases or not skirmish then
75305: LD_EXP 63
75309: NOT
75310: PUSH
75311: LD_EXP 61
75315: NOT
75316: OR
75317: IFFALSE 75321
// exit ;
75319: GO 75674
// repeat wait ( 0 0$1 ) ;
75321: LD_INT 35
75323: PPUSH
75324: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
75328: LD_VAR 0 2
75332: PPUSH
75333: LD_VAR 0 3
75337: PPUSH
75338: CALL_OW 284
75342: IFFALSE 75321
// if GetResourceTypeXY ( x , y ) = mat_artefact then
75344: LD_VAR 0 2
75348: PPUSH
75349: LD_VAR 0 3
75353: PPUSH
75354: CALL_OW 283
75358: PUSH
75359: LD_INT 4
75361: EQUAL
75362: IFFALSE 75366
// exit ;
75364: GO 75674
// for i = 1 to mc_bases do
75366: LD_ADDR_VAR 0 7
75370: PUSH
75371: DOUBLE
75372: LD_INT 1
75374: DEC
75375: ST_TO_ADDR
75376: LD_EXP 63
75380: PUSH
75381: FOR_TO
75382: IFFALSE 75672
// begin if mc_crates_area [ i ] then
75384: LD_EXP 81
75388: PUSH
75389: LD_VAR 0 7
75393: ARRAY
75394: IFFALSE 75505
// for j in mc_crates_area [ i ] do
75396: LD_ADDR_VAR 0 8
75400: PUSH
75401: LD_EXP 81
75405: PUSH
75406: LD_VAR 0 7
75410: ARRAY
75411: PUSH
75412: FOR_IN
75413: IFFALSE 75503
// if InArea ( x , y , j ) then
75415: LD_VAR 0 2
75419: PPUSH
75420: LD_VAR 0 3
75424: PPUSH
75425: LD_VAR 0 8
75429: PPUSH
75430: CALL_OW 309
75434: IFFALSE 75501
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
75436: LD_ADDR_EXP 79
75440: PUSH
75441: LD_EXP 79
75445: PPUSH
75446: LD_VAR 0 7
75450: PUSH
75451: LD_EXP 79
75455: PUSH
75456: LD_VAR 0 7
75460: ARRAY
75461: PUSH
75462: LD_INT 1
75464: PLUS
75465: PUSH
75466: EMPTY
75467: LIST
75468: LIST
75469: PPUSH
75470: LD_VAR 0 4
75474: PUSH
75475: LD_VAR 0 2
75479: PUSH
75480: LD_VAR 0 3
75484: PUSH
75485: EMPTY
75486: LIST
75487: LIST
75488: LIST
75489: PPUSH
75490: CALL 17402 0 3
75494: ST_TO_ADDR
// exit ;
75495: POP
75496: POP
75497: POP
75498: POP
75499: GO 75674
// end ;
75501: GO 75412
75503: POP
75504: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
75505: LD_ADDR_VAR 0 9
75509: PUSH
75510: LD_EXP 63
75514: PUSH
75515: LD_VAR 0 7
75519: ARRAY
75520: PPUSH
75521: LD_INT 2
75523: PUSH
75524: LD_INT 30
75526: PUSH
75527: LD_INT 0
75529: PUSH
75530: EMPTY
75531: LIST
75532: LIST
75533: PUSH
75534: LD_INT 30
75536: PUSH
75537: LD_INT 1
75539: PUSH
75540: EMPTY
75541: LIST
75542: LIST
75543: PUSH
75544: EMPTY
75545: LIST
75546: LIST
75547: LIST
75548: PPUSH
75549: CALL_OW 72
75553: ST_TO_ADDR
// if not depot then
75554: LD_VAR 0 9
75558: NOT
75559: IFFALSE 75563
// continue ;
75561: GO 75381
// for j in depot do
75563: LD_ADDR_VAR 0 8
75567: PUSH
75568: LD_VAR 0 9
75572: PUSH
75573: FOR_IN
75574: IFFALSE 75668
// if GetDistUnitXY ( j , x , y ) < 30 then
75576: LD_VAR 0 8
75580: PPUSH
75581: LD_VAR 0 2
75585: PPUSH
75586: LD_VAR 0 3
75590: PPUSH
75591: CALL_OW 297
75595: PUSH
75596: LD_INT 30
75598: LESS
75599: IFFALSE 75666
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
75601: LD_ADDR_EXP 79
75605: PUSH
75606: LD_EXP 79
75610: PPUSH
75611: LD_VAR 0 7
75615: PUSH
75616: LD_EXP 79
75620: PUSH
75621: LD_VAR 0 7
75625: ARRAY
75626: PUSH
75627: LD_INT 1
75629: PLUS
75630: PUSH
75631: EMPTY
75632: LIST
75633: LIST
75634: PPUSH
75635: LD_VAR 0 4
75639: PUSH
75640: LD_VAR 0 2
75644: PUSH
75645: LD_VAR 0 3
75649: PUSH
75650: EMPTY
75651: LIST
75652: LIST
75653: LIST
75654: PPUSH
75655: CALL 17402 0 3
75659: ST_TO_ADDR
// exit ;
75660: POP
75661: POP
75662: POP
75663: POP
75664: GO 75674
// end ;
75666: GO 75573
75668: POP
75669: POP
// end ;
75670: GO 75381
75672: POP
75673: POP
// end ;
75674: LD_VAR 0 6
75678: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
75679: LD_INT 0
75681: PPUSH
75682: PPUSH
75683: PPUSH
75684: PPUSH
// if not mc_bases or not skirmish then
75685: LD_EXP 63
75689: NOT
75690: PUSH
75691: LD_EXP 61
75695: NOT
75696: OR
75697: IFFALSE 75701
// exit ;
75699: GO 75978
// side := GetSide ( lab ) ;
75701: LD_ADDR_VAR 0 4
75705: PUSH
75706: LD_VAR 0 2
75710: PPUSH
75711: CALL_OW 255
75715: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
75716: LD_VAR 0 4
75720: PUSH
75721: LD_EXP 89
75725: IN
75726: NOT
75727: PUSH
75728: LD_EXP 90
75732: NOT
75733: OR
75734: PUSH
75735: LD_EXP 63
75739: NOT
75740: OR
75741: IFFALSE 75745
// exit ;
75743: GO 75978
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
75745: LD_ADDR_EXP 90
75749: PUSH
75750: LD_EXP 90
75754: PPUSH
75755: LD_VAR 0 4
75759: PPUSH
75760: LD_EXP 90
75764: PUSH
75765: LD_VAR 0 4
75769: ARRAY
75770: PUSH
75771: LD_VAR 0 1
75775: DIFF
75776: PPUSH
75777: CALL_OW 1
75781: ST_TO_ADDR
// for i = 1 to mc_bases do
75782: LD_ADDR_VAR 0 5
75786: PUSH
75787: DOUBLE
75788: LD_INT 1
75790: DEC
75791: ST_TO_ADDR
75792: LD_EXP 63
75796: PUSH
75797: FOR_TO
75798: IFFALSE 75976
// begin if lab in mc_bases [ i ] then
75800: LD_VAR 0 2
75804: PUSH
75805: LD_EXP 63
75809: PUSH
75810: LD_VAR 0 5
75814: ARRAY
75815: IN
75816: IFFALSE 75974
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
75818: LD_VAR 0 1
75822: PUSH
75823: LD_INT 11
75825: PUSH
75826: LD_INT 4
75828: PUSH
75829: LD_INT 3
75831: PUSH
75832: LD_INT 2
75834: PUSH
75835: EMPTY
75836: LIST
75837: LIST
75838: LIST
75839: LIST
75840: IN
75841: PUSH
75842: LD_EXP 93
75846: PUSH
75847: LD_VAR 0 5
75851: ARRAY
75852: AND
75853: IFFALSE 75974
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
75855: LD_ADDR_VAR 0 6
75859: PUSH
75860: LD_EXP 93
75864: PUSH
75865: LD_VAR 0 5
75869: ARRAY
75870: PUSH
75871: LD_INT 1
75873: ARRAY
75874: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
75875: LD_ADDR_EXP 93
75879: PUSH
75880: LD_EXP 93
75884: PPUSH
75885: LD_VAR 0 5
75889: PPUSH
75890: EMPTY
75891: PPUSH
75892: CALL_OW 1
75896: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
75897: LD_VAR 0 6
75901: PPUSH
75902: LD_INT 0
75904: PPUSH
75905: CALL_OW 109
// ComExitBuilding ( tmp ) ;
75909: LD_VAR 0 6
75913: PPUSH
75914: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
75918: LD_ADDR_EXP 92
75922: PUSH
75923: LD_EXP 92
75927: PPUSH
75928: LD_VAR 0 5
75932: PPUSH
75933: LD_EXP 92
75937: PUSH
75938: LD_VAR 0 5
75942: ARRAY
75943: PPUSH
75944: LD_INT 1
75946: PPUSH
75947: LD_VAR 0 6
75951: PPUSH
75952: CALL_OW 2
75956: PPUSH
75957: CALL_OW 1
75961: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
75962: LD_VAR 0 5
75966: PPUSH
75967: LD_INT 112
75969: PPUSH
75970: CALL 52990 0 2
// end ; end ; end ;
75974: GO 75797
75976: POP
75977: POP
// end ;
75978: LD_VAR 0 3
75982: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
75983: LD_INT 0
75985: PPUSH
75986: PPUSH
75987: PPUSH
75988: PPUSH
75989: PPUSH
75990: PPUSH
75991: PPUSH
75992: PPUSH
// if not mc_bases or not skirmish then
75993: LD_EXP 63
75997: NOT
75998: PUSH
75999: LD_EXP 61
76003: NOT
76004: OR
76005: IFFALSE 76009
// exit ;
76007: GO 77380
// for i = 1 to mc_bases do
76009: LD_ADDR_VAR 0 3
76013: PUSH
76014: DOUBLE
76015: LD_INT 1
76017: DEC
76018: ST_TO_ADDR
76019: LD_EXP 63
76023: PUSH
76024: FOR_TO
76025: IFFALSE 77378
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
76027: LD_VAR 0 1
76031: PUSH
76032: LD_EXP 63
76036: PUSH
76037: LD_VAR 0 3
76041: ARRAY
76042: IN
76043: PUSH
76044: LD_VAR 0 1
76048: PUSH
76049: LD_EXP 70
76053: PUSH
76054: LD_VAR 0 3
76058: ARRAY
76059: IN
76060: OR
76061: PUSH
76062: LD_VAR 0 1
76066: PUSH
76067: LD_EXP 85
76071: PUSH
76072: LD_VAR 0 3
76076: ARRAY
76077: IN
76078: OR
76079: PUSH
76080: LD_VAR 0 1
76084: PUSH
76085: LD_EXP 82
76089: PUSH
76090: LD_VAR 0 3
76094: ARRAY
76095: IN
76096: OR
76097: PUSH
76098: LD_VAR 0 1
76102: PUSH
76103: LD_EXP 92
76107: PUSH
76108: LD_VAR 0 3
76112: ARRAY
76113: IN
76114: OR
76115: PUSH
76116: LD_VAR 0 1
76120: PUSH
76121: LD_EXP 93
76125: PUSH
76126: LD_VAR 0 3
76130: ARRAY
76131: IN
76132: OR
76133: IFFALSE 77376
// begin if un in mc_ape [ i ] then
76135: LD_VAR 0 1
76139: PUSH
76140: LD_EXP 92
76144: PUSH
76145: LD_VAR 0 3
76149: ARRAY
76150: IN
76151: IFFALSE 76190
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
76153: LD_ADDR_EXP 92
76157: PUSH
76158: LD_EXP 92
76162: PPUSH
76163: LD_VAR 0 3
76167: PPUSH
76168: LD_EXP 92
76172: PUSH
76173: LD_VAR 0 3
76177: ARRAY
76178: PUSH
76179: LD_VAR 0 1
76183: DIFF
76184: PPUSH
76185: CALL_OW 1
76189: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
76190: LD_VAR 0 1
76194: PUSH
76195: LD_EXP 93
76199: PUSH
76200: LD_VAR 0 3
76204: ARRAY
76205: IN
76206: IFFALSE 76230
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
76208: LD_ADDR_EXP 93
76212: PUSH
76213: LD_EXP 93
76217: PPUSH
76218: LD_VAR 0 3
76222: PPUSH
76223: EMPTY
76224: PPUSH
76225: CALL_OW 1
76229: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
76230: LD_VAR 0 1
76234: PPUSH
76235: CALL_OW 247
76239: PUSH
76240: LD_INT 2
76242: EQUAL
76243: PUSH
76244: LD_VAR 0 1
76248: PPUSH
76249: CALL_OW 110
76253: PUSH
76254: LD_INT 20
76256: EQUAL
76257: PUSH
76258: LD_VAR 0 1
76262: PUSH
76263: LD_EXP 85
76267: PUSH
76268: LD_VAR 0 3
76272: ARRAY
76273: IN
76274: OR
76275: PUSH
76276: LD_VAR 0 1
76280: PPUSH
76281: CALL_OW 264
76285: PUSH
76286: LD_INT 12
76288: PUSH
76289: LD_INT 51
76291: PUSH
76292: LD_EXP 49
76296: PUSH
76297: LD_INT 32
76299: PUSH
76300: LD_INT 13
76302: PUSH
76303: LD_INT 52
76305: PUSH
76306: LD_INT 31
76308: PUSH
76309: EMPTY
76310: LIST
76311: LIST
76312: LIST
76313: LIST
76314: LIST
76315: LIST
76316: LIST
76317: IN
76318: OR
76319: AND
76320: IFFALSE 76628
// begin if un in mc_defender [ i ] then
76322: LD_VAR 0 1
76326: PUSH
76327: LD_EXP 85
76331: PUSH
76332: LD_VAR 0 3
76336: ARRAY
76337: IN
76338: IFFALSE 76377
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
76340: LD_ADDR_EXP 85
76344: PUSH
76345: LD_EXP 85
76349: PPUSH
76350: LD_VAR 0 3
76354: PPUSH
76355: LD_EXP 85
76359: PUSH
76360: LD_VAR 0 3
76364: ARRAY
76365: PUSH
76366: LD_VAR 0 1
76370: DIFF
76371: PPUSH
76372: CALL_OW 1
76376: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
76377: LD_ADDR_VAR 0 8
76381: PUSH
76382: LD_VAR 0 3
76386: PPUSH
76387: LD_INT 3
76389: PPUSH
76390: CALL 73046 0 2
76394: ST_TO_ADDR
// if fac then
76395: LD_VAR 0 8
76399: IFFALSE 76628
// begin for j in fac do
76401: LD_ADDR_VAR 0 4
76405: PUSH
76406: LD_VAR 0 8
76410: PUSH
76411: FOR_IN
76412: IFFALSE 76626
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
76414: LD_ADDR_VAR 0 9
76418: PUSH
76419: LD_VAR 0 8
76423: PPUSH
76424: LD_VAR 0 1
76428: PPUSH
76429: CALL_OW 265
76433: PPUSH
76434: LD_VAR 0 1
76438: PPUSH
76439: CALL_OW 262
76443: PPUSH
76444: LD_VAR 0 1
76448: PPUSH
76449: CALL_OW 263
76453: PPUSH
76454: LD_VAR 0 1
76458: PPUSH
76459: CALL_OW 264
76463: PPUSH
76464: CALL 14934 0 5
76468: ST_TO_ADDR
// if components then
76469: LD_VAR 0 9
76473: IFFALSE 76624
// begin if GetWeapon ( un ) = ar_control_tower then
76475: LD_VAR 0 1
76479: PPUSH
76480: CALL_OW 264
76484: PUSH
76485: LD_INT 31
76487: EQUAL
76488: IFFALSE 76605
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
76490: LD_VAR 0 1
76494: PPUSH
76495: CALL_OW 311
76499: PPUSH
76500: LD_INT 0
76502: PPUSH
76503: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
76507: LD_ADDR_EXP 103
76511: PUSH
76512: LD_EXP 103
76516: PPUSH
76517: LD_VAR 0 3
76521: PPUSH
76522: LD_EXP 103
76526: PUSH
76527: LD_VAR 0 3
76531: ARRAY
76532: PUSH
76533: LD_VAR 0 1
76537: PPUSH
76538: CALL_OW 311
76542: DIFF
76543: PPUSH
76544: CALL_OW 1
76548: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
76549: LD_ADDR_VAR 0 7
76553: PUSH
76554: LD_EXP 84
76558: PUSH
76559: LD_VAR 0 3
76563: ARRAY
76564: PPUSH
76565: LD_INT 1
76567: PPUSH
76568: LD_VAR 0 9
76572: PPUSH
76573: CALL_OW 2
76577: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
76578: LD_ADDR_EXP 84
76582: PUSH
76583: LD_EXP 84
76587: PPUSH
76588: LD_VAR 0 3
76592: PPUSH
76593: LD_VAR 0 7
76597: PPUSH
76598: CALL_OW 1
76602: ST_TO_ADDR
// end else
76603: GO 76622
// MC_InsertProduceList ( i , [ components ] ) ;
76605: LD_VAR 0 3
76609: PPUSH
76610: LD_VAR 0 9
76614: PUSH
76615: EMPTY
76616: LIST
76617: PPUSH
76618: CALL 72591 0 2
// break ;
76622: GO 76626
// end ; end ;
76624: GO 76411
76626: POP
76627: POP
// end ; end ; if GetType ( un ) = unit_building then
76628: LD_VAR 0 1
76632: PPUSH
76633: CALL_OW 247
76637: PUSH
76638: LD_INT 3
76640: EQUAL
76641: IFFALSE 77044
// begin btype := GetBType ( un ) ;
76643: LD_ADDR_VAR 0 5
76647: PUSH
76648: LD_VAR 0 1
76652: PPUSH
76653: CALL_OW 266
76657: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
76658: LD_VAR 0 5
76662: PUSH
76663: LD_INT 29
76665: PUSH
76666: LD_INT 30
76668: PUSH
76669: EMPTY
76670: LIST
76671: LIST
76672: IN
76673: IFFALSE 76746
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
76675: LD_VAR 0 1
76679: PPUSH
76680: CALL_OW 250
76684: PPUSH
76685: LD_VAR 0 1
76689: PPUSH
76690: CALL_OW 251
76694: PPUSH
76695: LD_VAR 0 1
76699: PPUSH
76700: CALL_OW 255
76704: PPUSH
76705: CALL_OW 440
76709: NOT
76710: IFFALSE 76746
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
76712: LD_VAR 0 1
76716: PPUSH
76717: CALL_OW 250
76721: PPUSH
76722: LD_VAR 0 1
76726: PPUSH
76727: CALL_OW 251
76731: PPUSH
76732: LD_VAR 0 1
76736: PPUSH
76737: CALL_OW 255
76741: PPUSH
76742: CALL_OW 441
// end ; if btype = b_warehouse then
76746: LD_VAR 0 5
76750: PUSH
76751: LD_INT 1
76753: EQUAL
76754: IFFALSE 76772
// begin btype := b_depot ;
76756: LD_ADDR_VAR 0 5
76760: PUSH
76761: LD_INT 0
76763: ST_TO_ADDR
// pos := 1 ;
76764: LD_ADDR_VAR 0 6
76768: PUSH
76769: LD_INT 1
76771: ST_TO_ADDR
// end ; if btype = b_factory then
76772: LD_VAR 0 5
76776: PUSH
76777: LD_INT 3
76779: EQUAL
76780: IFFALSE 76798
// begin btype := b_workshop ;
76782: LD_ADDR_VAR 0 5
76786: PUSH
76787: LD_INT 2
76789: ST_TO_ADDR
// pos := 1 ;
76790: LD_ADDR_VAR 0 6
76794: PUSH
76795: LD_INT 1
76797: ST_TO_ADDR
// end ; if btype = b_barracks then
76798: LD_VAR 0 5
76802: PUSH
76803: LD_INT 5
76805: EQUAL
76806: IFFALSE 76816
// btype := b_armoury ;
76808: LD_ADDR_VAR 0 5
76812: PUSH
76813: LD_INT 4
76815: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
76816: LD_VAR 0 5
76820: PUSH
76821: LD_INT 7
76823: PUSH
76824: LD_INT 8
76826: PUSH
76827: EMPTY
76828: LIST
76829: LIST
76830: IN
76831: IFFALSE 76841
// btype := b_lab ;
76833: LD_ADDR_VAR 0 5
76837: PUSH
76838: LD_INT 6
76840: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
76841: LD_ADDR_EXP 68
76845: PUSH
76846: LD_EXP 68
76850: PPUSH
76851: LD_VAR 0 3
76855: PUSH
76856: LD_EXP 68
76860: PUSH
76861: LD_VAR 0 3
76865: ARRAY
76866: PUSH
76867: LD_INT 1
76869: PLUS
76870: PUSH
76871: EMPTY
76872: LIST
76873: LIST
76874: PPUSH
76875: LD_VAR 0 5
76879: PUSH
76880: LD_VAR 0 1
76884: PPUSH
76885: CALL_OW 250
76889: PUSH
76890: LD_VAR 0 1
76894: PPUSH
76895: CALL_OW 251
76899: PUSH
76900: LD_VAR 0 1
76904: PPUSH
76905: CALL_OW 254
76909: PUSH
76910: EMPTY
76911: LIST
76912: LIST
76913: LIST
76914: LIST
76915: PPUSH
76916: CALL 17402 0 3
76920: ST_TO_ADDR
// if pos = 1 then
76921: LD_VAR 0 6
76925: PUSH
76926: LD_INT 1
76928: EQUAL
76929: IFFALSE 77044
// begin tmp := mc_build_list [ i ] ;
76931: LD_ADDR_VAR 0 7
76935: PUSH
76936: LD_EXP 68
76940: PUSH
76941: LD_VAR 0 3
76945: ARRAY
76946: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
76947: LD_VAR 0 7
76951: PPUSH
76952: LD_INT 2
76954: PUSH
76955: LD_INT 30
76957: PUSH
76958: LD_INT 0
76960: PUSH
76961: EMPTY
76962: LIST
76963: LIST
76964: PUSH
76965: LD_INT 30
76967: PUSH
76968: LD_INT 1
76970: PUSH
76971: EMPTY
76972: LIST
76973: LIST
76974: PUSH
76975: EMPTY
76976: LIST
76977: LIST
76978: LIST
76979: PPUSH
76980: CALL_OW 72
76984: IFFALSE 76994
// pos := 2 ;
76986: LD_ADDR_VAR 0 6
76990: PUSH
76991: LD_INT 2
76993: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
76994: LD_ADDR_VAR 0 7
76998: PUSH
76999: LD_VAR 0 7
77003: PPUSH
77004: LD_VAR 0 6
77008: PPUSH
77009: LD_VAR 0 7
77013: PPUSH
77014: CALL 17728 0 3
77018: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
77019: LD_ADDR_EXP 68
77023: PUSH
77024: LD_EXP 68
77028: PPUSH
77029: LD_VAR 0 3
77033: PPUSH
77034: LD_VAR 0 7
77038: PPUSH
77039: CALL_OW 1
77043: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
77044: LD_VAR 0 1
77048: PUSH
77049: LD_EXP 63
77053: PUSH
77054: LD_VAR 0 3
77058: ARRAY
77059: IN
77060: IFFALSE 77099
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
77062: LD_ADDR_EXP 63
77066: PUSH
77067: LD_EXP 63
77071: PPUSH
77072: LD_VAR 0 3
77076: PPUSH
77077: LD_EXP 63
77081: PUSH
77082: LD_VAR 0 3
77086: ARRAY
77087: PUSH
77088: LD_VAR 0 1
77092: DIFF
77093: PPUSH
77094: CALL_OW 1
77098: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
77099: LD_VAR 0 1
77103: PUSH
77104: LD_EXP 70
77108: PUSH
77109: LD_VAR 0 3
77113: ARRAY
77114: IN
77115: IFFALSE 77154
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
77117: LD_ADDR_EXP 70
77121: PUSH
77122: LD_EXP 70
77126: PPUSH
77127: LD_VAR 0 3
77131: PPUSH
77132: LD_EXP 70
77136: PUSH
77137: LD_VAR 0 3
77141: ARRAY
77142: PUSH
77143: LD_VAR 0 1
77147: DIFF
77148: PPUSH
77149: CALL_OW 1
77153: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
77154: LD_VAR 0 1
77158: PUSH
77159: LD_EXP 82
77163: PUSH
77164: LD_VAR 0 3
77168: ARRAY
77169: IN
77170: IFFALSE 77209
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
77172: LD_ADDR_EXP 82
77176: PUSH
77177: LD_EXP 82
77181: PPUSH
77182: LD_VAR 0 3
77186: PPUSH
77187: LD_EXP 82
77191: PUSH
77192: LD_VAR 0 3
77196: ARRAY
77197: PUSH
77198: LD_VAR 0 1
77202: DIFF
77203: PPUSH
77204: CALL_OW 1
77208: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
77209: LD_VAR 0 1
77213: PUSH
77214: LD_EXP 85
77218: PUSH
77219: LD_VAR 0 3
77223: ARRAY
77224: IN
77225: IFFALSE 77264
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
77227: LD_ADDR_EXP 85
77231: PUSH
77232: LD_EXP 85
77236: PPUSH
77237: LD_VAR 0 3
77241: PPUSH
77242: LD_EXP 85
77246: PUSH
77247: LD_VAR 0 3
77251: ARRAY
77252: PUSH
77253: LD_VAR 0 1
77257: DIFF
77258: PPUSH
77259: CALL_OW 1
77263: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
77264: LD_VAR 0 1
77268: PUSH
77269: LD_EXP 72
77273: PUSH
77274: LD_VAR 0 3
77278: ARRAY
77279: IN
77280: IFFALSE 77319
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
77282: LD_ADDR_EXP 72
77286: PUSH
77287: LD_EXP 72
77291: PPUSH
77292: LD_VAR 0 3
77296: PPUSH
77297: LD_EXP 72
77301: PUSH
77302: LD_VAR 0 3
77306: ARRAY
77307: PUSH
77308: LD_VAR 0 1
77312: DIFF
77313: PPUSH
77314: CALL_OW 1
77318: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
77319: LD_VAR 0 1
77323: PUSH
77324: LD_EXP 71
77328: PUSH
77329: LD_VAR 0 3
77333: ARRAY
77334: IN
77335: IFFALSE 77374
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
77337: LD_ADDR_EXP 71
77341: PUSH
77342: LD_EXP 71
77346: PPUSH
77347: LD_VAR 0 3
77351: PPUSH
77352: LD_EXP 71
77356: PUSH
77357: LD_VAR 0 3
77361: ARRAY
77362: PUSH
77363: LD_VAR 0 1
77367: DIFF
77368: PPUSH
77369: CALL_OW 1
77373: ST_TO_ADDR
// end ; break ;
77374: GO 77378
// end ;
77376: GO 76024
77378: POP
77379: POP
// end ;
77380: LD_VAR 0 2
77384: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
77385: LD_INT 0
77387: PPUSH
77388: PPUSH
77389: PPUSH
// if not mc_bases or not skirmish then
77390: LD_EXP 63
77394: NOT
77395: PUSH
77396: LD_EXP 61
77400: NOT
77401: OR
77402: IFFALSE 77406
// exit ;
77404: GO 77621
// for i = 1 to mc_bases do
77406: LD_ADDR_VAR 0 3
77410: PUSH
77411: DOUBLE
77412: LD_INT 1
77414: DEC
77415: ST_TO_ADDR
77416: LD_EXP 63
77420: PUSH
77421: FOR_TO
77422: IFFALSE 77619
// begin if building in mc_construct_list [ i ] then
77424: LD_VAR 0 1
77428: PUSH
77429: LD_EXP 70
77433: PUSH
77434: LD_VAR 0 3
77438: ARRAY
77439: IN
77440: IFFALSE 77617
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
77442: LD_ADDR_EXP 70
77446: PUSH
77447: LD_EXP 70
77451: PPUSH
77452: LD_VAR 0 3
77456: PPUSH
77457: LD_EXP 70
77461: PUSH
77462: LD_VAR 0 3
77466: ARRAY
77467: PUSH
77468: LD_VAR 0 1
77472: DIFF
77473: PPUSH
77474: CALL_OW 1
77478: ST_TO_ADDR
// if building in mc_lab [ i ] then
77479: LD_VAR 0 1
77483: PUSH
77484: LD_EXP 96
77488: PUSH
77489: LD_VAR 0 3
77493: ARRAY
77494: IN
77495: IFFALSE 77550
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
77497: LD_ADDR_EXP 97
77501: PUSH
77502: LD_EXP 97
77506: PPUSH
77507: LD_VAR 0 3
77511: PPUSH
77512: LD_EXP 97
77516: PUSH
77517: LD_VAR 0 3
77521: ARRAY
77522: PPUSH
77523: LD_INT 1
77525: PPUSH
77526: LD_EXP 97
77530: PUSH
77531: LD_VAR 0 3
77535: ARRAY
77536: PPUSH
77537: LD_INT 0
77539: PPUSH
77540: CALL 16820 0 4
77544: PPUSH
77545: CALL_OW 1
77549: ST_TO_ADDR
// if not building in mc_bases [ i ] then
77550: LD_VAR 0 1
77554: PUSH
77555: LD_EXP 63
77559: PUSH
77560: LD_VAR 0 3
77564: ARRAY
77565: IN
77566: NOT
77567: IFFALSE 77613
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
77569: LD_ADDR_EXP 63
77573: PUSH
77574: LD_EXP 63
77578: PPUSH
77579: LD_VAR 0 3
77583: PUSH
77584: LD_EXP 63
77588: PUSH
77589: LD_VAR 0 3
77593: ARRAY
77594: PUSH
77595: LD_INT 1
77597: PLUS
77598: PUSH
77599: EMPTY
77600: LIST
77601: LIST
77602: PPUSH
77603: LD_VAR 0 1
77607: PPUSH
77608: CALL 17402 0 3
77612: ST_TO_ADDR
// exit ;
77613: POP
77614: POP
77615: GO 77621
// end ; end ;
77617: GO 77421
77619: POP
77620: POP
// end ;
77621: LD_VAR 0 2
77625: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
77626: LD_INT 0
77628: PPUSH
77629: PPUSH
77630: PPUSH
77631: PPUSH
77632: PPUSH
77633: PPUSH
77634: PPUSH
// if not mc_bases or not skirmish then
77635: LD_EXP 63
77639: NOT
77640: PUSH
77641: LD_EXP 61
77645: NOT
77646: OR
77647: IFFALSE 77651
// exit ;
77649: GO 78312
// for i = 1 to mc_bases do
77651: LD_ADDR_VAR 0 3
77655: PUSH
77656: DOUBLE
77657: LD_INT 1
77659: DEC
77660: ST_TO_ADDR
77661: LD_EXP 63
77665: PUSH
77666: FOR_TO
77667: IFFALSE 78310
// begin if building in mc_construct_list [ i ] then
77669: LD_VAR 0 1
77673: PUSH
77674: LD_EXP 70
77678: PUSH
77679: LD_VAR 0 3
77683: ARRAY
77684: IN
77685: IFFALSE 78308
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
77687: LD_ADDR_EXP 70
77691: PUSH
77692: LD_EXP 70
77696: PPUSH
77697: LD_VAR 0 3
77701: PPUSH
77702: LD_EXP 70
77706: PUSH
77707: LD_VAR 0 3
77711: ARRAY
77712: PUSH
77713: LD_VAR 0 1
77717: DIFF
77718: PPUSH
77719: CALL_OW 1
77723: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
77724: LD_ADDR_EXP 63
77728: PUSH
77729: LD_EXP 63
77733: PPUSH
77734: LD_VAR 0 3
77738: PUSH
77739: LD_EXP 63
77743: PUSH
77744: LD_VAR 0 3
77748: ARRAY
77749: PUSH
77750: LD_INT 1
77752: PLUS
77753: PUSH
77754: EMPTY
77755: LIST
77756: LIST
77757: PPUSH
77758: LD_VAR 0 1
77762: PPUSH
77763: CALL 17402 0 3
77767: ST_TO_ADDR
// btype := GetBType ( building ) ;
77768: LD_ADDR_VAR 0 5
77772: PUSH
77773: LD_VAR 0 1
77777: PPUSH
77778: CALL_OW 266
77782: ST_TO_ADDR
// side := GetSide ( building ) ;
77783: LD_ADDR_VAR 0 8
77787: PUSH
77788: LD_VAR 0 1
77792: PPUSH
77793: CALL_OW 255
77797: ST_TO_ADDR
// if btype = b_lab then
77798: LD_VAR 0 5
77802: PUSH
77803: LD_INT 6
77805: EQUAL
77806: IFFALSE 77856
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
77808: LD_ADDR_EXP 96
77812: PUSH
77813: LD_EXP 96
77817: PPUSH
77818: LD_VAR 0 3
77822: PUSH
77823: LD_EXP 96
77827: PUSH
77828: LD_VAR 0 3
77832: ARRAY
77833: PUSH
77834: LD_INT 1
77836: PLUS
77837: PUSH
77838: EMPTY
77839: LIST
77840: LIST
77841: PPUSH
77842: LD_VAR 0 1
77846: PPUSH
77847: CALL 17402 0 3
77851: ST_TO_ADDR
// exit ;
77852: POP
77853: POP
77854: GO 78312
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
77856: LD_VAR 0 5
77860: PUSH
77861: LD_INT 0
77863: PUSH
77864: LD_INT 2
77866: PUSH
77867: LD_INT 4
77869: PUSH
77870: EMPTY
77871: LIST
77872: LIST
77873: LIST
77874: IN
77875: IFFALSE 77999
// begin if btype = b_armoury then
77877: LD_VAR 0 5
77881: PUSH
77882: LD_INT 4
77884: EQUAL
77885: IFFALSE 77895
// btype := b_barracks ;
77887: LD_ADDR_VAR 0 5
77891: PUSH
77892: LD_INT 5
77894: ST_TO_ADDR
// if btype = b_depot then
77895: LD_VAR 0 5
77899: PUSH
77900: LD_INT 0
77902: EQUAL
77903: IFFALSE 77913
// btype := b_warehouse ;
77905: LD_ADDR_VAR 0 5
77909: PUSH
77910: LD_INT 1
77912: ST_TO_ADDR
// if btype = b_workshop then
77913: LD_VAR 0 5
77917: PUSH
77918: LD_INT 2
77920: EQUAL
77921: IFFALSE 77931
// btype := b_factory ;
77923: LD_ADDR_VAR 0 5
77927: PUSH
77928: LD_INT 3
77930: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
77931: LD_VAR 0 5
77935: PPUSH
77936: LD_VAR 0 8
77940: PPUSH
77941: CALL_OW 323
77945: PUSH
77946: LD_INT 1
77948: EQUAL
77949: IFFALSE 77995
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
77951: LD_ADDR_EXP 95
77955: PUSH
77956: LD_EXP 95
77960: PPUSH
77961: LD_VAR 0 3
77965: PUSH
77966: LD_EXP 95
77970: PUSH
77971: LD_VAR 0 3
77975: ARRAY
77976: PUSH
77977: LD_INT 1
77979: PLUS
77980: PUSH
77981: EMPTY
77982: LIST
77983: LIST
77984: PPUSH
77985: LD_VAR 0 1
77989: PPUSH
77990: CALL 17402 0 3
77994: ST_TO_ADDR
// exit ;
77995: POP
77996: POP
77997: GO 78312
// end ; if btype in [ b_bunker , b_turret ] then
77999: LD_VAR 0 5
78003: PUSH
78004: LD_INT 32
78006: PUSH
78007: LD_INT 33
78009: PUSH
78010: EMPTY
78011: LIST
78012: LIST
78013: IN
78014: IFFALSE 78304
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
78016: LD_ADDR_EXP 71
78020: PUSH
78021: LD_EXP 71
78025: PPUSH
78026: LD_VAR 0 3
78030: PUSH
78031: LD_EXP 71
78035: PUSH
78036: LD_VAR 0 3
78040: ARRAY
78041: PUSH
78042: LD_INT 1
78044: PLUS
78045: PUSH
78046: EMPTY
78047: LIST
78048: LIST
78049: PPUSH
78050: LD_VAR 0 1
78054: PPUSH
78055: CALL 17402 0 3
78059: ST_TO_ADDR
// if btype = b_bunker then
78060: LD_VAR 0 5
78064: PUSH
78065: LD_INT 32
78067: EQUAL
78068: IFFALSE 78304
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
78070: LD_ADDR_EXP 72
78074: PUSH
78075: LD_EXP 72
78079: PPUSH
78080: LD_VAR 0 3
78084: PUSH
78085: LD_EXP 72
78089: PUSH
78090: LD_VAR 0 3
78094: ARRAY
78095: PUSH
78096: LD_INT 1
78098: PLUS
78099: PUSH
78100: EMPTY
78101: LIST
78102: LIST
78103: PPUSH
78104: LD_VAR 0 1
78108: PPUSH
78109: CALL 17402 0 3
78113: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
78114: LD_ADDR_VAR 0 6
78118: PUSH
78119: LD_EXP 63
78123: PUSH
78124: LD_VAR 0 3
78128: ARRAY
78129: PPUSH
78130: LD_INT 25
78132: PUSH
78133: LD_INT 1
78135: PUSH
78136: EMPTY
78137: LIST
78138: LIST
78139: PUSH
78140: LD_INT 3
78142: PUSH
78143: LD_INT 54
78145: PUSH
78146: EMPTY
78147: LIST
78148: PUSH
78149: EMPTY
78150: LIST
78151: LIST
78152: PUSH
78153: EMPTY
78154: LIST
78155: LIST
78156: PPUSH
78157: CALL_OW 72
78161: ST_TO_ADDR
// if tmp then
78162: LD_VAR 0 6
78166: IFFALSE 78172
// exit ;
78168: POP
78169: POP
78170: GO 78312
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
78172: LD_ADDR_VAR 0 6
78176: PUSH
78177: LD_EXP 63
78181: PUSH
78182: LD_VAR 0 3
78186: ARRAY
78187: PPUSH
78188: LD_INT 2
78190: PUSH
78191: LD_INT 30
78193: PUSH
78194: LD_INT 4
78196: PUSH
78197: EMPTY
78198: LIST
78199: LIST
78200: PUSH
78201: LD_INT 30
78203: PUSH
78204: LD_INT 5
78206: PUSH
78207: EMPTY
78208: LIST
78209: LIST
78210: PUSH
78211: EMPTY
78212: LIST
78213: LIST
78214: LIST
78215: PPUSH
78216: CALL_OW 72
78220: ST_TO_ADDR
// if not tmp then
78221: LD_VAR 0 6
78225: NOT
78226: IFFALSE 78232
// exit ;
78228: POP
78229: POP
78230: GO 78312
// for j in tmp do
78232: LD_ADDR_VAR 0 4
78236: PUSH
78237: LD_VAR 0 6
78241: PUSH
78242: FOR_IN
78243: IFFALSE 78302
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
78245: LD_ADDR_VAR 0 7
78249: PUSH
78250: LD_VAR 0 4
78254: PPUSH
78255: CALL_OW 313
78259: PPUSH
78260: LD_INT 25
78262: PUSH
78263: LD_INT 1
78265: PUSH
78266: EMPTY
78267: LIST
78268: LIST
78269: PPUSH
78270: CALL_OW 72
78274: ST_TO_ADDR
// if units then
78275: LD_VAR 0 7
78279: IFFALSE 78300
// begin ComExitBuilding ( units [ 1 ] ) ;
78281: LD_VAR 0 7
78285: PUSH
78286: LD_INT 1
78288: ARRAY
78289: PPUSH
78290: CALL_OW 122
// exit ;
78294: POP
78295: POP
78296: POP
78297: POP
78298: GO 78312
// end ; end ;
78300: GO 78242
78302: POP
78303: POP
// end ; end ; exit ;
78304: POP
78305: POP
78306: GO 78312
// end ; end ;
78308: GO 77666
78310: POP
78311: POP
// end ;
78312: LD_VAR 0 2
78316: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
78317: LD_INT 0
78319: PPUSH
78320: PPUSH
78321: PPUSH
78322: PPUSH
78323: PPUSH
78324: PPUSH
78325: PPUSH
// if not mc_bases or not skirmish then
78326: LD_EXP 63
78330: NOT
78331: PUSH
78332: LD_EXP 61
78336: NOT
78337: OR
78338: IFFALSE 78342
// exit ;
78340: GO 78573
// btype := GetBType ( building ) ;
78342: LD_ADDR_VAR 0 6
78346: PUSH
78347: LD_VAR 0 1
78351: PPUSH
78352: CALL_OW 266
78356: ST_TO_ADDR
// x := GetX ( building ) ;
78357: LD_ADDR_VAR 0 7
78361: PUSH
78362: LD_VAR 0 1
78366: PPUSH
78367: CALL_OW 250
78371: ST_TO_ADDR
// y := GetY ( building ) ;
78372: LD_ADDR_VAR 0 8
78376: PUSH
78377: LD_VAR 0 1
78381: PPUSH
78382: CALL_OW 251
78386: ST_TO_ADDR
// d := GetDir ( building ) ;
78387: LD_ADDR_VAR 0 9
78391: PUSH
78392: LD_VAR 0 1
78396: PPUSH
78397: CALL_OW 254
78401: ST_TO_ADDR
// for i = 1 to mc_bases do
78402: LD_ADDR_VAR 0 4
78406: PUSH
78407: DOUBLE
78408: LD_INT 1
78410: DEC
78411: ST_TO_ADDR
78412: LD_EXP 63
78416: PUSH
78417: FOR_TO
78418: IFFALSE 78571
// begin if not mc_build_list [ i ] then
78420: LD_EXP 68
78424: PUSH
78425: LD_VAR 0 4
78429: ARRAY
78430: NOT
78431: IFFALSE 78435
// continue ;
78433: GO 78417
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
78435: LD_VAR 0 6
78439: PUSH
78440: LD_VAR 0 7
78444: PUSH
78445: LD_VAR 0 8
78449: PUSH
78450: LD_VAR 0 9
78454: PUSH
78455: EMPTY
78456: LIST
78457: LIST
78458: LIST
78459: LIST
78460: PPUSH
78461: LD_EXP 68
78465: PUSH
78466: LD_VAR 0 4
78470: ARRAY
78471: PUSH
78472: LD_INT 1
78474: ARRAY
78475: PPUSH
78476: CALL 23571 0 2
78480: IFFALSE 78569
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
78482: LD_ADDR_EXP 68
78486: PUSH
78487: LD_EXP 68
78491: PPUSH
78492: LD_VAR 0 4
78496: PPUSH
78497: LD_EXP 68
78501: PUSH
78502: LD_VAR 0 4
78506: ARRAY
78507: PPUSH
78508: LD_INT 1
78510: PPUSH
78511: CALL_OW 3
78515: PPUSH
78516: CALL_OW 1
78520: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
78521: LD_ADDR_EXP 70
78525: PUSH
78526: LD_EXP 70
78530: PPUSH
78531: LD_VAR 0 4
78535: PUSH
78536: LD_EXP 70
78540: PUSH
78541: LD_VAR 0 4
78545: ARRAY
78546: PUSH
78547: LD_INT 1
78549: PLUS
78550: PUSH
78551: EMPTY
78552: LIST
78553: LIST
78554: PPUSH
78555: LD_VAR 0 1
78559: PPUSH
78560: CALL 17402 0 3
78564: ST_TO_ADDR
// exit ;
78565: POP
78566: POP
78567: GO 78573
// end ; end ;
78569: GO 78417
78571: POP
78572: POP
// end ;
78573: LD_VAR 0 3
78577: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
78578: LD_INT 0
78580: PPUSH
78581: PPUSH
78582: PPUSH
// if not mc_bases or not skirmish then
78583: LD_EXP 63
78587: NOT
78588: PUSH
78589: LD_EXP 61
78593: NOT
78594: OR
78595: IFFALSE 78599
// exit ;
78597: GO 78789
// for i = 1 to mc_bases do
78599: LD_ADDR_VAR 0 4
78603: PUSH
78604: DOUBLE
78605: LD_INT 1
78607: DEC
78608: ST_TO_ADDR
78609: LD_EXP 63
78613: PUSH
78614: FOR_TO
78615: IFFALSE 78702
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
78617: LD_VAR 0 1
78621: PUSH
78622: LD_EXP 71
78626: PUSH
78627: LD_VAR 0 4
78631: ARRAY
78632: IN
78633: PUSH
78634: LD_VAR 0 1
78638: PUSH
78639: LD_EXP 72
78643: PUSH
78644: LD_VAR 0 4
78648: ARRAY
78649: IN
78650: NOT
78651: AND
78652: IFFALSE 78700
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
78654: LD_ADDR_EXP 72
78658: PUSH
78659: LD_EXP 72
78663: PPUSH
78664: LD_VAR 0 4
78668: PUSH
78669: LD_EXP 72
78673: PUSH
78674: LD_VAR 0 4
78678: ARRAY
78679: PUSH
78680: LD_INT 1
78682: PLUS
78683: PUSH
78684: EMPTY
78685: LIST
78686: LIST
78687: PPUSH
78688: LD_VAR 0 1
78692: PPUSH
78693: CALL 17402 0 3
78697: ST_TO_ADDR
// break ;
78698: GO 78702
// end ; end ;
78700: GO 78614
78702: POP
78703: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
78704: LD_VAR 0 1
78708: PPUSH
78709: CALL_OW 257
78713: PUSH
78714: LD_EXP 89
78718: IN
78719: PUSH
78720: LD_VAR 0 1
78724: PPUSH
78725: CALL_OW 266
78729: PUSH
78730: LD_INT 5
78732: EQUAL
78733: AND
78734: PUSH
78735: LD_VAR 0 2
78739: PPUSH
78740: CALL_OW 110
78744: PUSH
78745: LD_INT 18
78747: NONEQUAL
78748: AND
78749: IFFALSE 78789
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
78751: LD_VAR 0 2
78755: PPUSH
78756: CALL_OW 257
78760: PUSH
78761: LD_INT 5
78763: PUSH
78764: LD_INT 8
78766: PUSH
78767: LD_INT 9
78769: PUSH
78770: EMPTY
78771: LIST
78772: LIST
78773: LIST
78774: IN
78775: IFFALSE 78789
// SetClass ( unit , 1 ) ;
78777: LD_VAR 0 2
78781: PPUSH
78782: LD_INT 1
78784: PPUSH
78785: CALL_OW 336
// end ;
78789: LD_VAR 0 3
78793: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
78794: LD_INT 0
78796: PPUSH
78797: PPUSH
// if not mc_bases or not skirmish then
78798: LD_EXP 63
78802: NOT
78803: PUSH
78804: LD_EXP 61
78808: NOT
78809: OR
78810: IFFALSE 78814
// exit ;
78812: GO 78930
// if GetLives ( abandoned_vehicle ) > 250 then
78814: LD_VAR 0 2
78818: PPUSH
78819: CALL_OW 256
78823: PUSH
78824: LD_INT 250
78826: GREATER
78827: IFFALSE 78831
// exit ;
78829: GO 78930
// for i = 1 to mc_bases do
78831: LD_ADDR_VAR 0 6
78835: PUSH
78836: DOUBLE
78837: LD_INT 1
78839: DEC
78840: ST_TO_ADDR
78841: LD_EXP 63
78845: PUSH
78846: FOR_TO
78847: IFFALSE 78928
// begin if driver in mc_bases [ i ] then
78849: LD_VAR 0 1
78853: PUSH
78854: LD_EXP 63
78858: PUSH
78859: LD_VAR 0 6
78863: ARRAY
78864: IN
78865: IFFALSE 78926
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
78867: LD_VAR 0 1
78871: PPUSH
78872: LD_EXP 63
78876: PUSH
78877: LD_VAR 0 6
78881: ARRAY
78882: PPUSH
78883: LD_INT 2
78885: PUSH
78886: LD_INT 30
78888: PUSH
78889: LD_INT 0
78891: PUSH
78892: EMPTY
78893: LIST
78894: LIST
78895: PUSH
78896: LD_INT 30
78898: PUSH
78899: LD_INT 1
78901: PUSH
78902: EMPTY
78903: LIST
78904: LIST
78905: PUSH
78906: EMPTY
78907: LIST
78908: LIST
78909: LIST
78910: PPUSH
78911: CALL_OW 72
78915: PUSH
78916: LD_INT 1
78918: ARRAY
78919: PPUSH
78920: CALL_OW 112
// break ;
78924: GO 78928
// end ; end ;
78926: GO 78846
78928: POP
78929: POP
// end ; end_of_file end_of_file
78930: LD_VAR 0 5
78934: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
78935: GO 78937
78937: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
78938: LD_STRING initStreamRollete();
78940: PPUSH
78941: CALL_OW 559
// InitStreamMode ;
78945: CALL 78954 0 0
// DefineStreamItems ( ) ;
78949: CALL 79394 0 0
// end ;
78953: END
// function InitStreamMode ; begin
78954: LD_INT 0
78956: PPUSH
// streamModeActive := false ;
78957: LD_ADDR_EXP 106
78961: PUSH
78962: LD_INT 0
78964: ST_TO_ADDR
// normalCounter := 36 ;
78965: LD_ADDR_EXP 107
78969: PUSH
78970: LD_INT 36
78972: ST_TO_ADDR
// hardcoreCounter := 16 ;
78973: LD_ADDR_EXP 108
78977: PUSH
78978: LD_INT 16
78980: ST_TO_ADDR
// sRocket := false ;
78981: LD_ADDR_EXP 111
78985: PUSH
78986: LD_INT 0
78988: ST_TO_ADDR
// sSpeed := false ;
78989: LD_ADDR_EXP 110
78993: PUSH
78994: LD_INT 0
78996: ST_TO_ADDR
// sEngine := false ;
78997: LD_ADDR_EXP 112
79001: PUSH
79002: LD_INT 0
79004: ST_TO_ADDR
// sSpec := false ;
79005: LD_ADDR_EXP 109
79009: PUSH
79010: LD_INT 0
79012: ST_TO_ADDR
// sLevel := false ;
79013: LD_ADDR_EXP 113
79017: PUSH
79018: LD_INT 0
79020: ST_TO_ADDR
// sArmoury := false ;
79021: LD_ADDR_EXP 114
79025: PUSH
79026: LD_INT 0
79028: ST_TO_ADDR
// sRadar := false ;
79029: LD_ADDR_EXP 115
79033: PUSH
79034: LD_INT 0
79036: ST_TO_ADDR
// sBunker := false ;
79037: LD_ADDR_EXP 116
79041: PUSH
79042: LD_INT 0
79044: ST_TO_ADDR
// sHack := false ;
79045: LD_ADDR_EXP 117
79049: PUSH
79050: LD_INT 0
79052: ST_TO_ADDR
// sFire := false ;
79053: LD_ADDR_EXP 118
79057: PUSH
79058: LD_INT 0
79060: ST_TO_ADDR
// sRefresh := false ;
79061: LD_ADDR_EXP 119
79065: PUSH
79066: LD_INT 0
79068: ST_TO_ADDR
// sExp := false ;
79069: LD_ADDR_EXP 120
79073: PUSH
79074: LD_INT 0
79076: ST_TO_ADDR
// sDepot := false ;
79077: LD_ADDR_EXP 121
79081: PUSH
79082: LD_INT 0
79084: ST_TO_ADDR
// sFlag := false ;
79085: LD_ADDR_EXP 122
79089: PUSH
79090: LD_INT 0
79092: ST_TO_ADDR
// sKamikadze := false ;
79093: LD_ADDR_EXP 130
79097: PUSH
79098: LD_INT 0
79100: ST_TO_ADDR
// sTroll := false ;
79101: LD_ADDR_EXP 131
79105: PUSH
79106: LD_INT 0
79108: ST_TO_ADDR
// sSlow := false ;
79109: LD_ADDR_EXP 132
79113: PUSH
79114: LD_INT 0
79116: ST_TO_ADDR
// sLack := false ;
79117: LD_ADDR_EXP 133
79121: PUSH
79122: LD_INT 0
79124: ST_TO_ADDR
// sTank := false ;
79125: LD_ADDR_EXP 135
79129: PUSH
79130: LD_INT 0
79132: ST_TO_ADDR
// sRemote := false ;
79133: LD_ADDR_EXP 136
79137: PUSH
79138: LD_INT 0
79140: ST_TO_ADDR
// sPowell := false ;
79141: LD_ADDR_EXP 137
79145: PUSH
79146: LD_INT 0
79148: ST_TO_ADDR
// sTeleport := false ;
79149: LD_ADDR_EXP 140
79153: PUSH
79154: LD_INT 0
79156: ST_TO_ADDR
// sOilTower := false ;
79157: LD_ADDR_EXP 142
79161: PUSH
79162: LD_INT 0
79164: ST_TO_ADDR
// sShovel := false ;
79165: LD_ADDR_EXP 143
79169: PUSH
79170: LD_INT 0
79172: ST_TO_ADDR
// sSheik := false ;
79173: LD_ADDR_EXP 144
79177: PUSH
79178: LD_INT 0
79180: ST_TO_ADDR
// sEarthquake := false ;
79181: LD_ADDR_EXP 146
79185: PUSH
79186: LD_INT 0
79188: ST_TO_ADDR
// sAI := false ;
79189: LD_ADDR_EXP 147
79193: PUSH
79194: LD_INT 0
79196: ST_TO_ADDR
// sCargo := false ;
79197: LD_ADDR_EXP 150
79201: PUSH
79202: LD_INT 0
79204: ST_TO_ADDR
// sDLaser := false ;
79205: LD_ADDR_EXP 151
79209: PUSH
79210: LD_INT 0
79212: ST_TO_ADDR
// sExchange := false ;
79213: LD_ADDR_EXP 152
79217: PUSH
79218: LD_INT 0
79220: ST_TO_ADDR
// sFac := false ;
79221: LD_ADDR_EXP 153
79225: PUSH
79226: LD_INT 0
79228: ST_TO_ADDR
// sPower := false ;
79229: LD_ADDR_EXP 154
79233: PUSH
79234: LD_INT 0
79236: ST_TO_ADDR
// sRandom := false ;
79237: LD_ADDR_EXP 155
79241: PUSH
79242: LD_INT 0
79244: ST_TO_ADDR
// sShield := false ;
79245: LD_ADDR_EXP 156
79249: PUSH
79250: LD_INT 0
79252: ST_TO_ADDR
// sTime := false ;
79253: LD_ADDR_EXP 157
79257: PUSH
79258: LD_INT 0
79260: ST_TO_ADDR
// sTools := false ;
79261: LD_ADDR_EXP 158
79265: PUSH
79266: LD_INT 0
79268: ST_TO_ADDR
// sSold := false ;
79269: LD_ADDR_EXP 123
79273: PUSH
79274: LD_INT 0
79276: ST_TO_ADDR
// sDiff := false ;
79277: LD_ADDR_EXP 124
79281: PUSH
79282: LD_INT 0
79284: ST_TO_ADDR
// sFog := false ;
79285: LD_ADDR_EXP 127
79289: PUSH
79290: LD_INT 0
79292: ST_TO_ADDR
// sReset := false ;
79293: LD_ADDR_EXP 128
79297: PUSH
79298: LD_INT 0
79300: ST_TO_ADDR
// sSun := false ;
79301: LD_ADDR_EXP 129
79305: PUSH
79306: LD_INT 0
79308: ST_TO_ADDR
// sTiger := false ;
79309: LD_ADDR_EXP 125
79313: PUSH
79314: LD_INT 0
79316: ST_TO_ADDR
// sBomb := false ;
79317: LD_ADDR_EXP 126
79321: PUSH
79322: LD_INT 0
79324: ST_TO_ADDR
// sWound := false ;
79325: LD_ADDR_EXP 134
79329: PUSH
79330: LD_INT 0
79332: ST_TO_ADDR
// sBetray := false ;
79333: LD_ADDR_EXP 138
79337: PUSH
79338: LD_INT 0
79340: ST_TO_ADDR
// sContamin := false ;
79341: LD_ADDR_EXP 139
79345: PUSH
79346: LD_INT 0
79348: ST_TO_ADDR
// sOil := false ;
79349: LD_ADDR_EXP 141
79353: PUSH
79354: LD_INT 0
79356: ST_TO_ADDR
// sStu := false ;
79357: LD_ADDR_EXP 145
79361: PUSH
79362: LD_INT 0
79364: ST_TO_ADDR
// sBazooka := false ;
79365: LD_ADDR_EXP 148
79369: PUSH
79370: LD_INT 0
79372: ST_TO_ADDR
// sMortar := false ;
79373: LD_ADDR_EXP 149
79377: PUSH
79378: LD_INT 0
79380: ST_TO_ADDR
// sRanger := false ;
79381: LD_ADDR_EXP 159
79385: PUSH
79386: LD_INT 0
79388: ST_TO_ADDR
// end ;
79389: LD_VAR 0 1
79393: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
79394: LD_INT 0
79396: PPUSH
79397: PPUSH
79398: PPUSH
79399: PPUSH
79400: PPUSH
// result := [ ] ;
79401: LD_ADDR_VAR 0 1
79405: PUSH
79406: EMPTY
79407: ST_TO_ADDR
// if campaign_id = 1 then
79408: LD_OWVAR 69
79412: PUSH
79413: LD_INT 1
79415: EQUAL
79416: IFFALSE 82354
// begin case mission_number of 1 :
79418: LD_OWVAR 70
79422: PUSH
79423: LD_INT 1
79425: DOUBLE
79426: EQUAL
79427: IFTRUE 79431
79429: GO 79495
79431: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
79432: LD_ADDR_VAR 0 1
79436: PUSH
79437: LD_INT 2
79439: PUSH
79440: LD_INT 4
79442: PUSH
79443: LD_INT 11
79445: PUSH
79446: LD_INT 12
79448: PUSH
79449: LD_INT 15
79451: PUSH
79452: LD_INT 16
79454: PUSH
79455: LD_INT 22
79457: PUSH
79458: LD_INT 23
79460: PUSH
79461: LD_INT 26
79463: PUSH
79464: EMPTY
79465: LIST
79466: LIST
79467: LIST
79468: LIST
79469: LIST
79470: LIST
79471: LIST
79472: LIST
79473: LIST
79474: PUSH
79475: LD_INT 101
79477: PUSH
79478: LD_INT 102
79480: PUSH
79481: LD_INT 106
79483: PUSH
79484: EMPTY
79485: LIST
79486: LIST
79487: LIST
79488: PUSH
79489: EMPTY
79490: LIST
79491: LIST
79492: ST_TO_ADDR
79493: GO 82352
79495: LD_INT 2
79497: DOUBLE
79498: EQUAL
79499: IFTRUE 79503
79501: GO 79575
79503: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
79504: LD_ADDR_VAR 0 1
79508: PUSH
79509: LD_INT 2
79511: PUSH
79512: LD_INT 4
79514: PUSH
79515: LD_INT 11
79517: PUSH
79518: LD_INT 12
79520: PUSH
79521: LD_INT 15
79523: PUSH
79524: LD_INT 16
79526: PUSH
79527: LD_INT 22
79529: PUSH
79530: LD_INT 23
79532: PUSH
79533: LD_INT 26
79535: PUSH
79536: EMPTY
79537: LIST
79538: LIST
79539: LIST
79540: LIST
79541: LIST
79542: LIST
79543: LIST
79544: LIST
79545: LIST
79546: PUSH
79547: LD_INT 101
79549: PUSH
79550: LD_INT 102
79552: PUSH
79553: LD_INT 105
79555: PUSH
79556: LD_INT 106
79558: PUSH
79559: LD_INT 108
79561: PUSH
79562: EMPTY
79563: LIST
79564: LIST
79565: LIST
79566: LIST
79567: LIST
79568: PUSH
79569: EMPTY
79570: LIST
79571: LIST
79572: ST_TO_ADDR
79573: GO 82352
79575: LD_INT 3
79577: DOUBLE
79578: EQUAL
79579: IFTRUE 79583
79581: GO 79659
79583: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
79584: LD_ADDR_VAR 0 1
79588: PUSH
79589: LD_INT 2
79591: PUSH
79592: LD_INT 4
79594: PUSH
79595: LD_INT 5
79597: PUSH
79598: LD_INT 11
79600: PUSH
79601: LD_INT 12
79603: PUSH
79604: LD_INT 15
79606: PUSH
79607: LD_INT 16
79609: PUSH
79610: LD_INT 22
79612: PUSH
79613: LD_INT 26
79615: PUSH
79616: LD_INT 36
79618: PUSH
79619: EMPTY
79620: LIST
79621: LIST
79622: LIST
79623: LIST
79624: LIST
79625: LIST
79626: LIST
79627: LIST
79628: LIST
79629: LIST
79630: PUSH
79631: LD_INT 101
79633: PUSH
79634: LD_INT 102
79636: PUSH
79637: LD_INT 105
79639: PUSH
79640: LD_INT 106
79642: PUSH
79643: LD_INT 108
79645: PUSH
79646: EMPTY
79647: LIST
79648: LIST
79649: LIST
79650: LIST
79651: LIST
79652: PUSH
79653: EMPTY
79654: LIST
79655: LIST
79656: ST_TO_ADDR
79657: GO 82352
79659: LD_INT 4
79661: DOUBLE
79662: EQUAL
79663: IFTRUE 79667
79665: GO 79751
79667: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
79668: LD_ADDR_VAR 0 1
79672: PUSH
79673: LD_INT 2
79675: PUSH
79676: LD_INT 4
79678: PUSH
79679: LD_INT 5
79681: PUSH
79682: LD_INT 8
79684: PUSH
79685: LD_INT 11
79687: PUSH
79688: LD_INT 12
79690: PUSH
79691: LD_INT 15
79693: PUSH
79694: LD_INT 16
79696: PUSH
79697: LD_INT 22
79699: PUSH
79700: LD_INT 23
79702: PUSH
79703: LD_INT 26
79705: PUSH
79706: LD_INT 36
79708: PUSH
79709: EMPTY
79710: LIST
79711: LIST
79712: LIST
79713: LIST
79714: LIST
79715: LIST
79716: LIST
79717: LIST
79718: LIST
79719: LIST
79720: LIST
79721: LIST
79722: PUSH
79723: LD_INT 101
79725: PUSH
79726: LD_INT 102
79728: PUSH
79729: LD_INT 105
79731: PUSH
79732: LD_INT 106
79734: PUSH
79735: LD_INT 108
79737: PUSH
79738: EMPTY
79739: LIST
79740: LIST
79741: LIST
79742: LIST
79743: LIST
79744: PUSH
79745: EMPTY
79746: LIST
79747: LIST
79748: ST_TO_ADDR
79749: GO 82352
79751: LD_INT 5
79753: DOUBLE
79754: EQUAL
79755: IFTRUE 79759
79757: GO 79859
79759: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
79760: LD_ADDR_VAR 0 1
79764: PUSH
79765: LD_INT 2
79767: PUSH
79768: LD_INT 4
79770: PUSH
79771: LD_INT 5
79773: PUSH
79774: LD_INT 6
79776: PUSH
79777: LD_INT 8
79779: PUSH
79780: LD_INT 11
79782: PUSH
79783: LD_INT 12
79785: PUSH
79786: LD_INT 15
79788: PUSH
79789: LD_INT 16
79791: PUSH
79792: LD_INT 22
79794: PUSH
79795: LD_INT 23
79797: PUSH
79798: LD_INT 25
79800: PUSH
79801: LD_INT 26
79803: PUSH
79804: LD_INT 36
79806: PUSH
79807: EMPTY
79808: LIST
79809: LIST
79810: LIST
79811: LIST
79812: LIST
79813: LIST
79814: LIST
79815: LIST
79816: LIST
79817: LIST
79818: LIST
79819: LIST
79820: LIST
79821: LIST
79822: PUSH
79823: LD_INT 101
79825: PUSH
79826: LD_INT 102
79828: PUSH
79829: LD_INT 105
79831: PUSH
79832: LD_INT 106
79834: PUSH
79835: LD_INT 108
79837: PUSH
79838: LD_INT 109
79840: PUSH
79841: LD_INT 112
79843: PUSH
79844: EMPTY
79845: LIST
79846: LIST
79847: LIST
79848: LIST
79849: LIST
79850: LIST
79851: LIST
79852: PUSH
79853: EMPTY
79854: LIST
79855: LIST
79856: ST_TO_ADDR
79857: GO 82352
79859: LD_INT 6
79861: DOUBLE
79862: EQUAL
79863: IFTRUE 79867
79865: GO 79987
79867: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
79868: LD_ADDR_VAR 0 1
79872: PUSH
79873: LD_INT 2
79875: PUSH
79876: LD_INT 4
79878: PUSH
79879: LD_INT 5
79881: PUSH
79882: LD_INT 6
79884: PUSH
79885: LD_INT 8
79887: PUSH
79888: LD_INT 11
79890: PUSH
79891: LD_INT 12
79893: PUSH
79894: LD_INT 15
79896: PUSH
79897: LD_INT 16
79899: PUSH
79900: LD_INT 20
79902: PUSH
79903: LD_INT 21
79905: PUSH
79906: LD_INT 22
79908: PUSH
79909: LD_INT 23
79911: PUSH
79912: LD_INT 25
79914: PUSH
79915: LD_INT 26
79917: PUSH
79918: LD_INT 30
79920: PUSH
79921: LD_INT 31
79923: PUSH
79924: LD_INT 32
79926: PUSH
79927: LD_INT 36
79929: PUSH
79930: EMPTY
79931: LIST
79932: LIST
79933: LIST
79934: LIST
79935: LIST
79936: LIST
79937: LIST
79938: LIST
79939: LIST
79940: LIST
79941: LIST
79942: LIST
79943: LIST
79944: LIST
79945: LIST
79946: LIST
79947: LIST
79948: LIST
79949: LIST
79950: PUSH
79951: LD_INT 101
79953: PUSH
79954: LD_INT 102
79956: PUSH
79957: LD_INT 105
79959: PUSH
79960: LD_INT 106
79962: PUSH
79963: LD_INT 108
79965: PUSH
79966: LD_INT 109
79968: PUSH
79969: LD_INT 112
79971: PUSH
79972: EMPTY
79973: LIST
79974: LIST
79975: LIST
79976: LIST
79977: LIST
79978: LIST
79979: LIST
79980: PUSH
79981: EMPTY
79982: LIST
79983: LIST
79984: ST_TO_ADDR
79985: GO 82352
79987: LD_INT 7
79989: DOUBLE
79990: EQUAL
79991: IFTRUE 79995
79993: GO 80095
79995: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
79996: LD_ADDR_VAR 0 1
80000: PUSH
80001: LD_INT 2
80003: PUSH
80004: LD_INT 4
80006: PUSH
80007: LD_INT 5
80009: PUSH
80010: LD_INT 7
80012: PUSH
80013: LD_INT 11
80015: PUSH
80016: LD_INT 12
80018: PUSH
80019: LD_INT 15
80021: PUSH
80022: LD_INT 16
80024: PUSH
80025: LD_INT 20
80027: PUSH
80028: LD_INT 21
80030: PUSH
80031: LD_INT 22
80033: PUSH
80034: LD_INT 23
80036: PUSH
80037: LD_INT 25
80039: PUSH
80040: LD_INT 26
80042: PUSH
80043: EMPTY
80044: LIST
80045: LIST
80046: LIST
80047: LIST
80048: LIST
80049: LIST
80050: LIST
80051: LIST
80052: LIST
80053: LIST
80054: LIST
80055: LIST
80056: LIST
80057: LIST
80058: PUSH
80059: LD_INT 101
80061: PUSH
80062: LD_INT 102
80064: PUSH
80065: LD_INT 103
80067: PUSH
80068: LD_INT 105
80070: PUSH
80071: LD_INT 106
80073: PUSH
80074: LD_INT 108
80076: PUSH
80077: LD_INT 112
80079: PUSH
80080: EMPTY
80081: LIST
80082: LIST
80083: LIST
80084: LIST
80085: LIST
80086: LIST
80087: LIST
80088: PUSH
80089: EMPTY
80090: LIST
80091: LIST
80092: ST_TO_ADDR
80093: GO 82352
80095: LD_INT 8
80097: DOUBLE
80098: EQUAL
80099: IFTRUE 80103
80101: GO 80231
80103: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
80104: LD_ADDR_VAR 0 1
80108: PUSH
80109: LD_INT 2
80111: PUSH
80112: LD_INT 4
80114: PUSH
80115: LD_INT 5
80117: PUSH
80118: LD_INT 6
80120: PUSH
80121: LD_INT 7
80123: PUSH
80124: LD_INT 8
80126: PUSH
80127: LD_INT 11
80129: PUSH
80130: LD_INT 12
80132: PUSH
80133: LD_INT 15
80135: PUSH
80136: LD_INT 16
80138: PUSH
80139: LD_INT 20
80141: PUSH
80142: LD_INT 21
80144: PUSH
80145: LD_INT 22
80147: PUSH
80148: LD_INT 23
80150: PUSH
80151: LD_INT 25
80153: PUSH
80154: LD_INT 26
80156: PUSH
80157: LD_INT 30
80159: PUSH
80160: LD_INT 31
80162: PUSH
80163: LD_INT 32
80165: PUSH
80166: LD_INT 36
80168: PUSH
80169: EMPTY
80170: LIST
80171: LIST
80172: LIST
80173: LIST
80174: LIST
80175: LIST
80176: LIST
80177: LIST
80178: LIST
80179: LIST
80180: LIST
80181: LIST
80182: LIST
80183: LIST
80184: LIST
80185: LIST
80186: LIST
80187: LIST
80188: LIST
80189: LIST
80190: PUSH
80191: LD_INT 101
80193: PUSH
80194: LD_INT 102
80196: PUSH
80197: LD_INT 103
80199: PUSH
80200: LD_INT 105
80202: PUSH
80203: LD_INT 106
80205: PUSH
80206: LD_INT 108
80208: PUSH
80209: LD_INT 109
80211: PUSH
80212: LD_INT 112
80214: PUSH
80215: EMPTY
80216: LIST
80217: LIST
80218: LIST
80219: LIST
80220: LIST
80221: LIST
80222: LIST
80223: LIST
80224: PUSH
80225: EMPTY
80226: LIST
80227: LIST
80228: ST_TO_ADDR
80229: GO 82352
80231: LD_INT 9
80233: DOUBLE
80234: EQUAL
80235: IFTRUE 80239
80237: GO 80375
80239: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
80240: LD_ADDR_VAR 0 1
80244: PUSH
80245: LD_INT 2
80247: PUSH
80248: LD_INT 4
80250: PUSH
80251: LD_INT 5
80253: PUSH
80254: LD_INT 6
80256: PUSH
80257: LD_INT 7
80259: PUSH
80260: LD_INT 8
80262: PUSH
80263: LD_INT 11
80265: PUSH
80266: LD_INT 12
80268: PUSH
80269: LD_INT 15
80271: PUSH
80272: LD_INT 16
80274: PUSH
80275: LD_INT 20
80277: PUSH
80278: LD_INT 21
80280: PUSH
80281: LD_INT 22
80283: PUSH
80284: LD_INT 23
80286: PUSH
80287: LD_INT 25
80289: PUSH
80290: LD_INT 26
80292: PUSH
80293: LD_INT 28
80295: PUSH
80296: LD_INT 30
80298: PUSH
80299: LD_INT 31
80301: PUSH
80302: LD_INT 32
80304: PUSH
80305: LD_INT 36
80307: PUSH
80308: EMPTY
80309: LIST
80310: LIST
80311: LIST
80312: LIST
80313: LIST
80314: LIST
80315: LIST
80316: LIST
80317: LIST
80318: LIST
80319: LIST
80320: LIST
80321: LIST
80322: LIST
80323: LIST
80324: LIST
80325: LIST
80326: LIST
80327: LIST
80328: LIST
80329: LIST
80330: PUSH
80331: LD_INT 101
80333: PUSH
80334: LD_INT 102
80336: PUSH
80337: LD_INT 103
80339: PUSH
80340: LD_INT 105
80342: PUSH
80343: LD_INT 106
80345: PUSH
80346: LD_INT 108
80348: PUSH
80349: LD_INT 109
80351: PUSH
80352: LD_INT 112
80354: PUSH
80355: LD_INT 114
80357: PUSH
80358: EMPTY
80359: LIST
80360: LIST
80361: LIST
80362: LIST
80363: LIST
80364: LIST
80365: LIST
80366: LIST
80367: LIST
80368: PUSH
80369: EMPTY
80370: LIST
80371: LIST
80372: ST_TO_ADDR
80373: GO 82352
80375: LD_INT 10
80377: DOUBLE
80378: EQUAL
80379: IFTRUE 80383
80381: GO 80567
80383: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
80384: LD_ADDR_VAR 0 1
80388: PUSH
80389: LD_INT 2
80391: PUSH
80392: LD_INT 4
80394: PUSH
80395: LD_INT 5
80397: PUSH
80398: LD_INT 6
80400: PUSH
80401: LD_INT 7
80403: PUSH
80404: LD_INT 8
80406: PUSH
80407: LD_INT 9
80409: PUSH
80410: LD_INT 10
80412: PUSH
80413: LD_INT 11
80415: PUSH
80416: LD_INT 12
80418: PUSH
80419: LD_INT 13
80421: PUSH
80422: LD_INT 14
80424: PUSH
80425: LD_INT 15
80427: PUSH
80428: LD_INT 16
80430: PUSH
80431: LD_INT 17
80433: PUSH
80434: LD_INT 18
80436: PUSH
80437: LD_INT 19
80439: PUSH
80440: LD_INT 20
80442: PUSH
80443: LD_INT 21
80445: PUSH
80446: LD_INT 22
80448: PUSH
80449: LD_INT 23
80451: PUSH
80452: LD_INT 24
80454: PUSH
80455: LD_INT 25
80457: PUSH
80458: LD_INT 26
80460: PUSH
80461: LD_INT 28
80463: PUSH
80464: LD_INT 30
80466: PUSH
80467: LD_INT 31
80469: PUSH
80470: LD_INT 32
80472: PUSH
80473: LD_INT 36
80475: PUSH
80476: EMPTY
80477: LIST
80478: LIST
80479: LIST
80480: LIST
80481: LIST
80482: LIST
80483: LIST
80484: LIST
80485: LIST
80486: LIST
80487: LIST
80488: LIST
80489: LIST
80490: LIST
80491: LIST
80492: LIST
80493: LIST
80494: LIST
80495: LIST
80496: LIST
80497: LIST
80498: LIST
80499: LIST
80500: LIST
80501: LIST
80502: LIST
80503: LIST
80504: LIST
80505: LIST
80506: PUSH
80507: LD_INT 101
80509: PUSH
80510: LD_INT 102
80512: PUSH
80513: LD_INT 103
80515: PUSH
80516: LD_INT 104
80518: PUSH
80519: LD_INT 105
80521: PUSH
80522: LD_INT 106
80524: PUSH
80525: LD_INT 107
80527: PUSH
80528: LD_INT 108
80530: PUSH
80531: LD_INT 109
80533: PUSH
80534: LD_INT 110
80536: PUSH
80537: LD_INT 111
80539: PUSH
80540: LD_INT 112
80542: PUSH
80543: LD_INT 114
80545: PUSH
80546: EMPTY
80547: LIST
80548: LIST
80549: LIST
80550: LIST
80551: LIST
80552: LIST
80553: LIST
80554: LIST
80555: LIST
80556: LIST
80557: LIST
80558: LIST
80559: LIST
80560: PUSH
80561: EMPTY
80562: LIST
80563: LIST
80564: ST_TO_ADDR
80565: GO 82352
80567: LD_INT 11
80569: DOUBLE
80570: EQUAL
80571: IFTRUE 80575
80573: GO 80767
80575: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
80576: LD_ADDR_VAR 0 1
80580: PUSH
80581: LD_INT 2
80583: PUSH
80584: LD_INT 3
80586: PUSH
80587: LD_INT 4
80589: PUSH
80590: LD_INT 5
80592: PUSH
80593: LD_INT 6
80595: PUSH
80596: LD_INT 7
80598: PUSH
80599: LD_INT 8
80601: PUSH
80602: LD_INT 9
80604: PUSH
80605: LD_INT 10
80607: PUSH
80608: LD_INT 11
80610: PUSH
80611: LD_INT 12
80613: PUSH
80614: LD_INT 13
80616: PUSH
80617: LD_INT 14
80619: PUSH
80620: LD_INT 15
80622: PUSH
80623: LD_INT 16
80625: PUSH
80626: LD_INT 17
80628: PUSH
80629: LD_INT 18
80631: PUSH
80632: LD_INT 19
80634: PUSH
80635: LD_INT 20
80637: PUSH
80638: LD_INT 21
80640: PUSH
80641: LD_INT 22
80643: PUSH
80644: LD_INT 23
80646: PUSH
80647: LD_INT 24
80649: PUSH
80650: LD_INT 25
80652: PUSH
80653: LD_INT 26
80655: PUSH
80656: LD_INT 28
80658: PUSH
80659: LD_INT 30
80661: PUSH
80662: LD_INT 31
80664: PUSH
80665: LD_INT 32
80667: PUSH
80668: LD_INT 34
80670: PUSH
80671: LD_INT 36
80673: PUSH
80674: EMPTY
80675: LIST
80676: LIST
80677: LIST
80678: LIST
80679: LIST
80680: LIST
80681: LIST
80682: LIST
80683: LIST
80684: LIST
80685: LIST
80686: LIST
80687: LIST
80688: LIST
80689: LIST
80690: LIST
80691: LIST
80692: LIST
80693: LIST
80694: LIST
80695: LIST
80696: LIST
80697: LIST
80698: LIST
80699: LIST
80700: LIST
80701: LIST
80702: LIST
80703: LIST
80704: LIST
80705: LIST
80706: PUSH
80707: LD_INT 101
80709: PUSH
80710: LD_INT 102
80712: PUSH
80713: LD_INT 103
80715: PUSH
80716: LD_INT 104
80718: PUSH
80719: LD_INT 105
80721: PUSH
80722: LD_INT 106
80724: PUSH
80725: LD_INT 107
80727: PUSH
80728: LD_INT 108
80730: PUSH
80731: LD_INT 109
80733: PUSH
80734: LD_INT 110
80736: PUSH
80737: LD_INT 111
80739: PUSH
80740: LD_INT 112
80742: PUSH
80743: LD_INT 114
80745: PUSH
80746: EMPTY
80747: LIST
80748: LIST
80749: LIST
80750: LIST
80751: LIST
80752: LIST
80753: LIST
80754: LIST
80755: LIST
80756: LIST
80757: LIST
80758: LIST
80759: LIST
80760: PUSH
80761: EMPTY
80762: LIST
80763: LIST
80764: ST_TO_ADDR
80765: GO 82352
80767: LD_INT 12
80769: DOUBLE
80770: EQUAL
80771: IFTRUE 80775
80773: GO 80983
80775: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
80776: LD_ADDR_VAR 0 1
80780: PUSH
80781: LD_INT 1
80783: PUSH
80784: LD_INT 2
80786: PUSH
80787: LD_INT 3
80789: PUSH
80790: LD_INT 4
80792: PUSH
80793: LD_INT 5
80795: PUSH
80796: LD_INT 6
80798: PUSH
80799: LD_INT 7
80801: PUSH
80802: LD_INT 8
80804: PUSH
80805: LD_INT 9
80807: PUSH
80808: LD_INT 10
80810: PUSH
80811: LD_INT 11
80813: PUSH
80814: LD_INT 12
80816: PUSH
80817: LD_INT 13
80819: PUSH
80820: LD_INT 14
80822: PUSH
80823: LD_INT 15
80825: PUSH
80826: LD_INT 16
80828: PUSH
80829: LD_INT 17
80831: PUSH
80832: LD_INT 18
80834: PUSH
80835: LD_INT 19
80837: PUSH
80838: LD_INT 20
80840: PUSH
80841: LD_INT 21
80843: PUSH
80844: LD_INT 22
80846: PUSH
80847: LD_INT 23
80849: PUSH
80850: LD_INT 24
80852: PUSH
80853: LD_INT 25
80855: PUSH
80856: LD_INT 26
80858: PUSH
80859: LD_INT 27
80861: PUSH
80862: LD_INT 28
80864: PUSH
80865: LD_INT 30
80867: PUSH
80868: LD_INT 31
80870: PUSH
80871: LD_INT 32
80873: PUSH
80874: LD_INT 33
80876: PUSH
80877: LD_INT 34
80879: PUSH
80880: LD_INT 36
80882: PUSH
80883: EMPTY
80884: LIST
80885: LIST
80886: LIST
80887: LIST
80888: LIST
80889: LIST
80890: LIST
80891: LIST
80892: LIST
80893: LIST
80894: LIST
80895: LIST
80896: LIST
80897: LIST
80898: LIST
80899: LIST
80900: LIST
80901: LIST
80902: LIST
80903: LIST
80904: LIST
80905: LIST
80906: LIST
80907: LIST
80908: LIST
80909: LIST
80910: LIST
80911: LIST
80912: LIST
80913: LIST
80914: LIST
80915: LIST
80916: LIST
80917: LIST
80918: PUSH
80919: LD_INT 101
80921: PUSH
80922: LD_INT 102
80924: PUSH
80925: LD_INT 103
80927: PUSH
80928: LD_INT 104
80930: PUSH
80931: LD_INT 105
80933: PUSH
80934: LD_INT 106
80936: PUSH
80937: LD_INT 107
80939: PUSH
80940: LD_INT 108
80942: PUSH
80943: LD_INT 109
80945: PUSH
80946: LD_INT 110
80948: PUSH
80949: LD_INT 111
80951: PUSH
80952: LD_INT 112
80954: PUSH
80955: LD_INT 113
80957: PUSH
80958: LD_INT 114
80960: PUSH
80961: EMPTY
80962: LIST
80963: LIST
80964: LIST
80965: LIST
80966: LIST
80967: LIST
80968: LIST
80969: LIST
80970: LIST
80971: LIST
80972: LIST
80973: LIST
80974: LIST
80975: LIST
80976: PUSH
80977: EMPTY
80978: LIST
80979: LIST
80980: ST_TO_ADDR
80981: GO 82352
80983: LD_INT 13
80985: DOUBLE
80986: EQUAL
80987: IFTRUE 80991
80989: GO 81187
80991: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
80992: LD_ADDR_VAR 0 1
80996: PUSH
80997: LD_INT 1
80999: PUSH
81000: LD_INT 2
81002: PUSH
81003: LD_INT 3
81005: PUSH
81006: LD_INT 4
81008: PUSH
81009: LD_INT 5
81011: PUSH
81012: LD_INT 8
81014: PUSH
81015: LD_INT 9
81017: PUSH
81018: LD_INT 10
81020: PUSH
81021: LD_INT 11
81023: PUSH
81024: LD_INT 12
81026: PUSH
81027: LD_INT 14
81029: PUSH
81030: LD_INT 15
81032: PUSH
81033: LD_INT 16
81035: PUSH
81036: LD_INT 17
81038: PUSH
81039: LD_INT 18
81041: PUSH
81042: LD_INT 19
81044: PUSH
81045: LD_INT 20
81047: PUSH
81048: LD_INT 21
81050: PUSH
81051: LD_INT 22
81053: PUSH
81054: LD_INT 23
81056: PUSH
81057: LD_INT 24
81059: PUSH
81060: LD_INT 25
81062: PUSH
81063: LD_INT 26
81065: PUSH
81066: LD_INT 27
81068: PUSH
81069: LD_INT 28
81071: PUSH
81072: LD_INT 30
81074: PUSH
81075: LD_INT 31
81077: PUSH
81078: LD_INT 32
81080: PUSH
81081: LD_INT 33
81083: PUSH
81084: LD_INT 34
81086: PUSH
81087: LD_INT 36
81089: PUSH
81090: EMPTY
81091: LIST
81092: LIST
81093: LIST
81094: LIST
81095: LIST
81096: LIST
81097: LIST
81098: LIST
81099: LIST
81100: LIST
81101: LIST
81102: LIST
81103: LIST
81104: LIST
81105: LIST
81106: LIST
81107: LIST
81108: LIST
81109: LIST
81110: LIST
81111: LIST
81112: LIST
81113: LIST
81114: LIST
81115: LIST
81116: LIST
81117: LIST
81118: LIST
81119: LIST
81120: LIST
81121: LIST
81122: PUSH
81123: LD_INT 101
81125: PUSH
81126: LD_INT 102
81128: PUSH
81129: LD_INT 103
81131: PUSH
81132: LD_INT 104
81134: PUSH
81135: LD_INT 105
81137: PUSH
81138: LD_INT 106
81140: PUSH
81141: LD_INT 107
81143: PUSH
81144: LD_INT 108
81146: PUSH
81147: LD_INT 109
81149: PUSH
81150: LD_INT 110
81152: PUSH
81153: LD_INT 111
81155: PUSH
81156: LD_INT 112
81158: PUSH
81159: LD_INT 113
81161: PUSH
81162: LD_INT 114
81164: PUSH
81165: EMPTY
81166: LIST
81167: LIST
81168: LIST
81169: LIST
81170: LIST
81171: LIST
81172: LIST
81173: LIST
81174: LIST
81175: LIST
81176: LIST
81177: LIST
81178: LIST
81179: LIST
81180: PUSH
81181: EMPTY
81182: LIST
81183: LIST
81184: ST_TO_ADDR
81185: GO 82352
81187: LD_INT 14
81189: DOUBLE
81190: EQUAL
81191: IFTRUE 81195
81193: GO 81407
81195: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
81196: LD_ADDR_VAR 0 1
81200: PUSH
81201: LD_INT 1
81203: PUSH
81204: LD_INT 2
81206: PUSH
81207: LD_INT 3
81209: PUSH
81210: LD_INT 4
81212: PUSH
81213: LD_INT 5
81215: PUSH
81216: LD_INT 6
81218: PUSH
81219: LD_INT 7
81221: PUSH
81222: LD_INT 8
81224: PUSH
81225: LD_INT 9
81227: PUSH
81228: LD_INT 10
81230: PUSH
81231: LD_INT 11
81233: PUSH
81234: LD_INT 12
81236: PUSH
81237: LD_INT 13
81239: PUSH
81240: LD_INT 14
81242: PUSH
81243: LD_INT 15
81245: PUSH
81246: LD_INT 16
81248: PUSH
81249: LD_INT 17
81251: PUSH
81252: LD_INT 18
81254: PUSH
81255: LD_INT 19
81257: PUSH
81258: LD_INT 20
81260: PUSH
81261: LD_INT 21
81263: PUSH
81264: LD_INT 22
81266: PUSH
81267: LD_INT 23
81269: PUSH
81270: LD_INT 24
81272: PUSH
81273: LD_INT 25
81275: PUSH
81276: LD_INT 26
81278: PUSH
81279: LD_INT 27
81281: PUSH
81282: LD_INT 28
81284: PUSH
81285: LD_INT 29
81287: PUSH
81288: LD_INT 30
81290: PUSH
81291: LD_INT 31
81293: PUSH
81294: LD_INT 32
81296: PUSH
81297: LD_INT 33
81299: PUSH
81300: LD_INT 34
81302: PUSH
81303: LD_INT 36
81305: PUSH
81306: EMPTY
81307: LIST
81308: LIST
81309: LIST
81310: LIST
81311: LIST
81312: LIST
81313: LIST
81314: LIST
81315: LIST
81316: LIST
81317: LIST
81318: LIST
81319: LIST
81320: LIST
81321: LIST
81322: LIST
81323: LIST
81324: LIST
81325: LIST
81326: LIST
81327: LIST
81328: LIST
81329: LIST
81330: LIST
81331: LIST
81332: LIST
81333: LIST
81334: LIST
81335: LIST
81336: LIST
81337: LIST
81338: LIST
81339: LIST
81340: LIST
81341: LIST
81342: PUSH
81343: LD_INT 101
81345: PUSH
81346: LD_INT 102
81348: PUSH
81349: LD_INT 103
81351: PUSH
81352: LD_INT 104
81354: PUSH
81355: LD_INT 105
81357: PUSH
81358: LD_INT 106
81360: PUSH
81361: LD_INT 107
81363: PUSH
81364: LD_INT 108
81366: PUSH
81367: LD_INT 109
81369: PUSH
81370: LD_INT 110
81372: PUSH
81373: LD_INT 111
81375: PUSH
81376: LD_INT 112
81378: PUSH
81379: LD_INT 113
81381: PUSH
81382: LD_INT 114
81384: PUSH
81385: EMPTY
81386: LIST
81387: LIST
81388: LIST
81389: LIST
81390: LIST
81391: LIST
81392: LIST
81393: LIST
81394: LIST
81395: LIST
81396: LIST
81397: LIST
81398: LIST
81399: LIST
81400: PUSH
81401: EMPTY
81402: LIST
81403: LIST
81404: ST_TO_ADDR
81405: GO 82352
81407: LD_INT 15
81409: DOUBLE
81410: EQUAL
81411: IFTRUE 81415
81413: GO 81627
81415: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
81416: LD_ADDR_VAR 0 1
81420: PUSH
81421: LD_INT 1
81423: PUSH
81424: LD_INT 2
81426: PUSH
81427: LD_INT 3
81429: PUSH
81430: LD_INT 4
81432: PUSH
81433: LD_INT 5
81435: PUSH
81436: LD_INT 6
81438: PUSH
81439: LD_INT 7
81441: PUSH
81442: LD_INT 8
81444: PUSH
81445: LD_INT 9
81447: PUSH
81448: LD_INT 10
81450: PUSH
81451: LD_INT 11
81453: PUSH
81454: LD_INT 12
81456: PUSH
81457: LD_INT 13
81459: PUSH
81460: LD_INT 14
81462: PUSH
81463: LD_INT 15
81465: PUSH
81466: LD_INT 16
81468: PUSH
81469: LD_INT 17
81471: PUSH
81472: LD_INT 18
81474: PUSH
81475: LD_INT 19
81477: PUSH
81478: LD_INT 20
81480: PUSH
81481: LD_INT 21
81483: PUSH
81484: LD_INT 22
81486: PUSH
81487: LD_INT 23
81489: PUSH
81490: LD_INT 24
81492: PUSH
81493: LD_INT 25
81495: PUSH
81496: LD_INT 26
81498: PUSH
81499: LD_INT 27
81501: PUSH
81502: LD_INT 28
81504: PUSH
81505: LD_INT 29
81507: PUSH
81508: LD_INT 30
81510: PUSH
81511: LD_INT 31
81513: PUSH
81514: LD_INT 32
81516: PUSH
81517: LD_INT 33
81519: PUSH
81520: LD_INT 34
81522: PUSH
81523: LD_INT 36
81525: PUSH
81526: EMPTY
81527: LIST
81528: LIST
81529: LIST
81530: LIST
81531: LIST
81532: LIST
81533: LIST
81534: LIST
81535: LIST
81536: LIST
81537: LIST
81538: LIST
81539: LIST
81540: LIST
81541: LIST
81542: LIST
81543: LIST
81544: LIST
81545: LIST
81546: LIST
81547: LIST
81548: LIST
81549: LIST
81550: LIST
81551: LIST
81552: LIST
81553: LIST
81554: LIST
81555: LIST
81556: LIST
81557: LIST
81558: LIST
81559: LIST
81560: LIST
81561: LIST
81562: PUSH
81563: LD_INT 101
81565: PUSH
81566: LD_INT 102
81568: PUSH
81569: LD_INT 103
81571: PUSH
81572: LD_INT 104
81574: PUSH
81575: LD_INT 105
81577: PUSH
81578: LD_INT 106
81580: PUSH
81581: LD_INT 107
81583: PUSH
81584: LD_INT 108
81586: PUSH
81587: LD_INT 109
81589: PUSH
81590: LD_INT 110
81592: PUSH
81593: LD_INT 111
81595: PUSH
81596: LD_INT 112
81598: PUSH
81599: LD_INT 113
81601: PUSH
81602: LD_INT 114
81604: PUSH
81605: EMPTY
81606: LIST
81607: LIST
81608: LIST
81609: LIST
81610: LIST
81611: LIST
81612: LIST
81613: LIST
81614: LIST
81615: LIST
81616: LIST
81617: LIST
81618: LIST
81619: LIST
81620: PUSH
81621: EMPTY
81622: LIST
81623: LIST
81624: ST_TO_ADDR
81625: GO 82352
81627: LD_INT 16
81629: DOUBLE
81630: EQUAL
81631: IFTRUE 81635
81633: GO 81759
81635: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
81636: LD_ADDR_VAR 0 1
81640: PUSH
81641: LD_INT 2
81643: PUSH
81644: LD_INT 4
81646: PUSH
81647: LD_INT 5
81649: PUSH
81650: LD_INT 7
81652: PUSH
81653: LD_INT 11
81655: PUSH
81656: LD_INT 12
81658: PUSH
81659: LD_INT 15
81661: PUSH
81662: LD_INT 16
81664: PUSH
81665: LD_INT 20
81667: PUSH
81668: LD_INT 21
81670: PUSH
81671: LD_INT 22
81673: PUSH
81674: LD_INT 23
81676: PUSH
81677: LD_INT 25
81679: PUSH
81680: LD_INT 26
81682: PUSH
81683: LD_INT 30
81685: PUSH
81686: LD_INT 31
81688: PUSH
81689: LD_INT 32
81691: PUSH
81692: LD_INT 33
81694: PUSH
81695: LD_INT 34
81697: PUSH
81698: EMPTY
81699: LIST
81700: LIST
81701: LIST
81702: LIST
81703: LIST
81704: LIST
81705: LIST
81706: LIST
81707: LIST
81708: LIST
81709: LIST
81710: LIST
81711: LIST
81712: LIST
81713: LIST
81714: LIST
81715: LIST
81716: LIST
81717: LIST
81718: PUSH
81719: LD_INT 101
81721: PUSH
81722: LD_INT 102
81724: PUSH
81725: LD_INT 103
81727: PUSH
81728: LD_INT 106
81730: PUSH
81731: LD_INT 108
81733: PUSH
81734: LD_INT 112
81736: PUSH
81737: LD_INT 113
81739: PUSH
81740: LD_INT 114
81742: PUSH
81743: EMPTY
81744: LIST
81745: LIST
81746: LIST
81747: LIST
81748: LIST
81749: LIST
81750: LIST
81751: LIST
81752: PUSH
81753: EMPTY
81754: LIST
81755: LIST
81756: ST_TO_ADDR
81757: GO 82352
81759: LD_INT 17
81761: DOUBLE
81762: EQUAL
81763: IFTRUE 81767
81765: GO 81979
81767: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
81768: LD_ADDR_VAR 0 1
81772: PUSH
81773: LD_INT 1
81775: PUSH
81776: LD_INT 2
81778: PUSH
81779: LD_INT 3
81781: PUSH
81782: LD_INT 4
81784: PUSH
81785: LD_INT 5
81787: PUSH
81788: LD_INT 6
81790: PUSH
81791: LD_INT 7
81793: PUSH
81794: LD_INT 8
81796: PUSH
81797: LD_INT 9
81799: PUSH
81800: LD_INT 10
81802: PUSH
81803: LD_INT 11
81805: PUSH
81806: LD_INT 12
81808: PUSH
81809: LD_INT 13
81811: PUSH
81812: LD_INT 14
81814: PUSH
81815: LD_INT 15
81817: PUSH
81818: LD_INT 16
81820: PUSH
81821: LD_INT 17
81823: PUSH
81824: LD_INT 18
81826: PUSH
81827: LD_INT 19
81829: PUSH
81830: LD_INT 20
81832: PUSH
81833: LD_INT 21
81835: PUSH
81836: LD_INT 22
81838: PUSH
81839: LD_INT 23
81841: PUSH
81842: LD_INT 24
81844: PUSH
81845: LD_INT 25
81847: PUSH
81848: LD_INT 26
81850: PUSH
81851: LD_INT 27
81853: PUSH
81854: LD_INT 28
81856: PUSH
81857: LD_INT 29
81859: PUSH
81860: LD_INT 30
81862: PUSH
81863: LD_INT 31
81865: PUSH
81866: LD_INT 32
81868: PUSH
81869: LD_INT 33
81871: PUSH
81872: LD_INT 34
81874: PUSH
81875: LD_INT 36
81877: PUSH
81878: EMPTY
81879: LIST
81880: LIST
81881: LIST
81882: LIST
81883: LIST
81884: LIST
81885: LIST
81886: LIST
81887: LIST
81888: LIST
81889: LIST
81890: LIST
81891: LIST
81892: LIST
81893: LIST
81894: LIST
81895: LIST
81896: LIST
81897: LIST
81898: LIST
81899: LIST
81900: LIST
81901: LIST
81902: LIST
81903: LIST
81904: LIST
81905: LIST
81906: LIST
81907: LIST
81908: LIST
81909: LIST
81910: LIST
81911: LIST
81912: LIST
81913: LIST
81914: PUSH
81915: LD_INT 101
81917: PUSH
81918: LD_INT 102
81920: PUSH
81921: LD_INT 103
81923: PUSH
81924: LD_INT 104
81926: PUSH
81927: LD_INT 105
81929: PUSH
81930: LD_INT 106
81932: PUSH
81933: LD_INT 107
81935: PUSH
81936: LD_INT 108
81938: PUSH
81939: LD_INT 109
81941: PUSH
81942: LD_INT 110
81944: PUSH
81945: LD_INT 111
81947: PUSH
81948: LD_INT 112
81950: PUSH
81951: LD_INT 113
81953: PUSH
81954: LD_INT 114
81956: PUSH
81957: EMPTY
81958: LIST
81959: LIST
81960: LIST
81961: LIST
81962: LIST
81963: LIST
81964: LIST
81965: LIST
81966: LIST
81967: LIST
81968: LIST
81969: LIST
81970: LIST
81971: LIST
81972: PUSH
81973: EMPTY
81974: LIST
81975: LIST
81976: ST_TO_ADDR
81977: GO 82352
81979: LD_INT 18
81981: DOUBLE
81982: EQUAL
81983: IFTRUE 81987
81985: GO 82123
81987: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
81988: LD_ADDR_VAR 0 1
81992: PUSH
81993: LD_INT 2
81995: PUSH
81996: LD_INT 4
81998: PUSH
81999: LD_INT 5
82001: PUSH
82002: LD_INT 7
82004: PUSH
82005: LD_INT 11
82007: PUSH
82008: LD_INT 12
82010: PUSH
82011: LD_INT 15
82013: PUSH
82014: LD_INT 16
82016: PUSH
82017: LD_INT 20
82019: PUSH
82020: LD_INT 21
82022: PUSH
82023: LD_INT 22
82025: PUSH
82026: LD_INT 23
82028: PUSH
82029: LD_INT 25
82031: PUSH
82032: LD_INT 26
82034: PUSH
82035: LD_INT 30
82037: PUSH
82038: LD_INT 31
82040: PUSH
82041: LD_INT 32
82043: PUSH
82044: LD_INT 33
82046: PUSH
82047: LD_INT 34
82049: PUSH
82050: LD_INT 35
82052: PUSH
82053: LD_INT 36
82055: PUSH
82056: EMPTY
82057: LIST
82058: LIST
82059: LIST
82060: LIST
82061: LIST
82062: LIST
82063: LIST
82064: LIST
82065: LIST
82066: LIST
82067: LIST
82068: LIST
82069: LIST
82070: LIST
82071: LIST
82072: LIST
82073: LIST
82074: LIST
82075: LIST
82076: LIST
82077: LIST
82078: PUSH
82079: LD_INT 101
82081: PUSH
82082: LD_INT 102
82084: PUSH
82085: LD_INT 103
82087: PUSH
82088: LD_INT 106
82090: PUSH
82091: LD_INT 108
82093: PUSH
82094: LD_INT 112
82096: PUSH
82097: LD_INT 113
82099: PUSH
82100: LD_INT 114
82102: PUSH
82103: LD_INT 115
82105: PUSH
82106: EMPTY
82107: LIST
82108: LIST
82109: LIST
82110: LIST
82111: LIST
82112: LIST
82113: LIST
82114: LIST
82115: LIST
82116: PUSH
82117: EMPTY
82118: LIST
82119: LIST
82120: ST_TO_ADDR
82121: GO 82352
82123: LD_INT 19
82125: DOUBLE
82126: EQUAL
82127: IFTRUE 82131
82129: GO 82351
82131: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
82132: LD_ADDR_VAR 0 1
82136: PUSH
82137: LD_INT 1
82139: PUSH
82140: LD_INT 2
82142: PUSH
82143: LD_INT 3
82145: PUSH
82146: LD_INT 4
82148: PUSH
82149: LD_INT 5
82151: PUSH
82152: LD_INT 6
82154: PUSH
82155: LD_INT 7
82157: PUSH
82158: LD_INT 8
82160: PUSH
82161: LD_INT 9
82163: PUSH
82164: LD_INT 10
82166: PUSH
82167: LD_INT 11
82169: PUSH
82170: LD_INT 12
82172: PUSH
82173: LD_INT 13
82175: PUSH
82176: LD_INT 14
82178: PUSH
82179: LD_INT 15
82181: PUSH
82182: LD_INT 16
82184: PUSH
82185: LD_INT 17
82187: PUSH
82188: LD_INT 18
82190: PUSH
82191: LD_INT 19
82193: PUSH
82194: LD_INT 20
82196: PUSH
82197: LD_INT 21
82199: PUSH
82200: LD_INT 22
82202: PUSH
82203: LD_INT 23
82205: PUSH
82206: LD_INT 24
82208: PUSH
82209: LD_INT 25
82211: PUSH
82212: LD_INT 26
82214: PUSH
82215: LD_INT 27
82217: PUSH
82218: LD_INT 28
82220: PUSH
82221: LD_INT 29
82223: PUSH
82224: LD_INT 30
82226: PUSH
82227: LD_INT 31
82229: PUSH
82230: LD_INT 32
82232: PUSH
82233: LD_INT 33
82235: PUSH
82236: LD_INT 34
82238: PUSH
82239: LD_INT 35
82241: PUSH
82242: LD_INT 36
82244: PUSH
82245: EMPTY
82246: LIST
82247: LIST
82248: LIST
82249: LIST
82250: LIST
82251: LIST
82252: LIST
82253: LIST
82254: LIST
82255: LIST
82256: LIST
82257: LIST
82258: LIST
82259: LIST
82260: LIST
82261: LIST
82262: LIST
82263: LIST
82264: LIST
82265: LIST
82266: LIST
82267: LIST
82268: LIST
82269: LIST
82270: LIST
82271: LIST
82272: LIST
82273: LIST
82274: LIST
82275: LIST
82276: LIST
82277: LIST
82278: LIST
82279: LIST
82280: LIST
82281: LIST
82282: PUSH
82283: LD_INT 101
82285: PUSH
82286: LD_INT 102
82288: PUSH
82289: LD_INT 103
82291: PUSH
82292: LD_INT 104
82294: PUSH
82295: LD_INT 105
82297: PUSH
82298: LD_INT 106
82300: PUSH
82301: LD_INT 107
82303: PUSH
82304: LD_INT 108
82306: PUSH
82307: LD_INT 109
82309: PUSH
82310: LD_INT 110
82312: PUSH
82313: LD_INT 111
82315: PUSH
82316: LD_INT 112
82318: PUSH
82319: LD_INT 113
82321: PUSH
82322: LD_INT 114
82324: PUSH
82325: LD_INT 115
82327: PUSH
82328: EMPTY
82329: LIST
82330: LIST
82331: LIST
82332: LIST
82333: LIST
82334: LIST
82335: LIST
82336: LIST
82337: LIST
82338: LIST
82339: LIST
82340: LIST
82341: LIST
82342: LIST
82343: LIST
82344: PUSH
82345: EMPTY
82346: LIST
82347: LIST
82348: ST_TO_ADDR
82349: GO 82352
82351: POP
// end else
82352: GO 82571
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
82354: LD_ADDR_VAR 0 1
82358: PUSH
82359: LD_INT 1
82361: PUSH
82362: LD_INT 2
82364: PUSH
82365: LD_INT 3
82367: PUSH
82368: LD_INT 4
82370: PUSH
82371: LD_INT 5
82373: PUSH
82374: LD_INT 6
82376: PUSH
82377: LD_INT 7
82379: PUSH
82380: LD_INT 8
82382: PUSH
82383: LD_INT 9
82385: PUSH
82386: LD_INT 10
82388: PUSH
82389: LD_INT 11
82391: PUSH
82392: LD_INT 12
82394: PUSH
82395: LD_INT 13
82397: PUSH
82398: LD_INT 14
82400: PUSH
82401: LD_INT 15
82403: PUSH
82404: LD_INT 16
82406: PUSH
82407: LD_INT 17
82409: PUSH
82410: LD_INT 18
82412: PUSH
82413: LD_INT 19
82415: PUSH
82416: LD_INT 20
82418: PUSH
82419: LD_INT 21
82421: PUSH
82422: LD_INT 22
82424: PUSH
82425: LD_INT 23
82427: PUSH
82428: LD_INT 24
82430: PUSH
82431: LD_INT 25
82433: PUSH
82434: LD_INT 26
82436: PUSH
82437: LD_INT 27
82439: PUSH
82440: LD_INT 28
82442: PUSH
82443: LD_INT 29
82445: PUSH
82446: LD_INT 30
82448: PUSH
82449: LD_INT 31
82451: PUSH
82452: LD_INT 32
82454: PUSH
82455: LD_INT 33
82457: PUSH
82458: LD_INT 34
82460: PUSH
82461: LD_INT 35
82463: PUSH
82464: LD_INT 36
82466: PUSH
82467: EMPTY
82468: LIST
82469: LIST
82470: LIST
82471: LIST
82472: LIST
82473: LIST
82474: LIST
82475: LIST
82476: LIST
82477: LIST
82478: LIST
82479: LIST
82480: LIST
82481: LIST
82482: LIST
82483: LIST
82484: LIST
82485: LIST
82486: LIST
82487: LIST
82488: LIST
82489: LIST
82490: LIST
82491: LIST
82492: LIST
82493: LIST
82494: LIST
82495: LIST
82496: LIST
82497: LIST
82498: LIST
82499: LIST
82500: LIST
82501: LIST
82502: LIST
82503: LIST
82504: PUSH
82505: LD_INT 101
82507: PUSH
82508: LD_INT 102
82510: PUSH
82511: LD_INT 103
82513: PUSH
82514: LD_INT 104
82516: PUSH
82517: LD_INT 105
82519: PUSH
82520: LD_INT 106
82522: PUSH
82523: LD_INT 107
82525: PUSH
82526: LD_INT 108
82528: PUSH
82529: LD_INT 109
82531: PUSH
82532: LD_INT 110
82534: PUSH
82535: LD_INT 111
82537: PUSH
82538: LD_INT 112
82540: PUSH
82541: LD_INT 113
82543: PUSH
82544: LD_INT 114
82546: PUSH
82547: LD_INT 115
82549: PUSH
82550: EMPTY
82551: LIST
82552: LIST
82553: LIST
82554: LIST
82555: LIST
82556: LIST
82557: LIST
82558: LIST
82559: LIST
82560: LIST
82561: LIST
82562: LIST
82563: LIST
82564: LIST
82565: LIST
82566: PUSH
82567: EMPTY
82568: LIST
82569: LIST
82570: ST_TO_ADDR
// if result then
82571: LD_VAR 0 1
82575: IFFALSE 82864
// begin normal :=  ;
82577: LD_ADDR_VAR 0 3
82581: PUSH
82582: LD_STRING 
82584: ST_TO_ADDR
// hardcore :=  ;
82585: LD_ADDR_VAR 0 4
82589: PUSH
82590: LD_STRING 
82592: ST_TO_ADDR
// for i = 1 to normalCounter do
82593: LD_ADDR_VAR 0 5
82597: PUSH
82598: DOUBLE
82599: LD_INT 1
82601: DEC
82602: ST_TO_ADDR
82603: LD_EXP 107
82607: PUSH
82608: FOR_TO
82609: IFFALSE 82710
// begin tmp := 0 ;
82611: LD_ADDR_VAR 0 2
82615: PUSH
82616: LD_STRING 0
82618: ST_TO_ADDR
// if result [ 1 ] then
82619: LD_VAR 0 1
82623: PUSH
82624: LD_INT 1
82626: ARRAY
82627: IFFALSE 82692
// if result [ 1 ] [ 1 ] = i then
82629: LD_VAR 0 1
82633: PUSH
82634: LD_INT 1
82636: ARRAY
82637: PUSH
82638: LD_INT 1
82640: ARRAY
82641: PUSH
82642: LD_VAR 0 5
82646: EQUAL
82647: IFFALSE 82692
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
82649: LD_ADDR_VAR 0 1
82653: PUSH
82654: LD_VAR 0 1
82658: PPUSH
82659: LD_INT 1
82661: PPUSH
82662: LD_VAR 0 1
82666: PUSH
82667: LD_INT 1
82669: ARRAY
82670: PPUSH
82671: LD_INT 1
82673: PPUSH
82674: CALL_OW 3
82678: PPUSH
82679: CALL_OW 1
82683: ST_TO_ADDR
// tmp := 1 ;
82684: LD_ADDR_VAR 0 2
82688: PUSH
82689: LD_STRING 1
82691: ST_TO_ADDR
// end ; normal := normal & tmp ;
82692: LD_ADDR_VAR 0 3
82696: PUSH
82697: LD_VAR 0 3
82701: PUSH
82702: LD_VAR 0 2
82706: STR
82707: ST_TO_ADDR
// end ;
82708: GO 82608
82710: POP
82711: POP
// for i = 1 to hardcoreCounter do
82712: LD_ADDR_VAR 0 5
82716: PUSH
82717: DOUBLE
82718: LD_INT 1
82720: DEC
82721: ST_TO_ADDR
82722: LD_EXP 108
82726: PUSH
82727: FOR_TO
82728: IFFALSE 82833
// begin tmp := 0 ;
82730: LD_ADDR_VAR 0 2
82734: PUSH
82735: LD_STRING 0
82737: ST_TO_ADDR
// if result [ 2 ] then
82738: LD_VAR 0 1
82742: PUSH
82743: LD_INT 2
82745: ARRAY
82746: IFFALSE 82815
// if result [ 2 ] [ 1 ] = 100 + i then
82748: LD_VAR 0 1
82752: PUSH
82753: LD_INT 2
82755: ARRAY
82756: PUSH
82757: LD_INT 1
82759: ARRAY
82760: PUSH
82761: LD_INT 100
82763: PUSH
82764: LD_VAR 0 5
82768: PLUS
82769: EQUAL
82770: IFFALSE 82815
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
82772: LD_ADDR_VAR 0 1
82776: PUSH
82777: LD_VAR 0 1
82781: PPUSH
82782: LD_INT 2
82784: PPUSH
82785: LD_VAR 0 1
82789: PUSH
82790: LD_INT 2
82792: ARRAY
82793: PPUSH
82794: LD_INT 1
82796: PPUSH
82797: CALL_OW 3
82801: PPUSH
82802: CALL_OW 1
82806: ST_TO_ADDR
// tmp := 1 ;
82807: LD_ADDR_VAR 0 2
82811: PUSH
82812: LD_STRING 1
82814: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
82815: LD_ADDR_VAR 0 4
82819: PUSH
82820: LD_VAR 0 4
82824: PUSH
82825: LD_VAR 0 2
82829: STR
82830: ST_TO_ADDR
// end ;
82831: GO 82727
82833: POP
82834: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
82835: LD_STRING getStreamItemsFromMission("
82837: PUSH
82838: LD_VAR 0 3
82842: STR
82843: PUSH
82844: LD_STRING ","
82846: STR
82847: PUSH
82848: LD_VAR 0 4
82852: STR
82853: PUSH
82854: LD_STRING ")
82856: STR
82857: PPUSH
82858: CALL_OW 559
// end else
82862: GO 82871
// ToLua ( getStreamItemsFromMission("","") ) ;
82864: LD_STRING getStreamItemsFromMission("","")
82866: PPUSH
82867: CALL_OW 559
// end ;
82871: LD_VAR 0 1
82875: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
82876: LD_VAR 0 2
82880: PUSH
82881: LD_INT 100
82883: EQUAL
82884: IFFALSE 83833
// begin if not StreamModeActive then
82886: LD_EXP 106
82890: NOT
82891: IFFALSE 82901
// StreamModeActive := true ;
82893: LD_ADDR_EXP 106
82897: PUSH
82898: LD_INT 1
82900: ST_TO_ADDR
// if p3 = 0 then
82901: LD_VAR 0 3
82905: PUSH
82906: LD_INT 0
82908: EQUAL
82909: IFFALSE 82915
// InitStreamMode ;
82911: CALL 78954 0 0
// if p3 = 1 then
82915: LD_VAR 0 3
82919: PUSH
82920: LD_INT 1
82922: EQUAL
82923: IFFALSE 82933
// sRocket := true ;
82925: LD_ADDR_EXP 111
82929: PUSH
82930: LD_INT 1
82932: ST_TO_ADDR
// if p3 = 2 then
82933: LD_VAR 0 3
82937: PUSH
82938: LD_INT 2
82940: EQUAL
82941: IFFALSE 82951
// sSpeed := true ;
82943: LD_ADDR_EXP 110
82947: PUSH
82948: LD_INT 1
82950: ST_TO_ADDR
// if p3 = 3 then
82951: LD_VAR 0 3
82955: PUSH
82956: LD_INT 3
82958: EQUAL
82959: IFFALSE 82969
// sEngine := true ;
82961: LD_ADDR_EXP 112
82965: PUSH
82966: LD_INT 1
82968: ST_TO_ADDR
// if p3 = 4 then
82969: LD_VAR 0 3
82973: PUSH
82974: LD_INT 4
82976: EQUAL
82977: IFFALSE 82987
// sSpec := true ;
82979: LD_ADDR_EXP 109
82983: PUSH
82984: LD_INT 1
82986: ST_TO_ADDR
// if p3 = 5 then
82987: LD_VAR 0 3
82991: PUSH
82992: LD_INT 5
82994: EQUAL
82995: IFFALSE 83005
// sLevel := true ;
82997: LD_ADDR_EXP 113
83001: PUSH
83002: LD_INT 1
83004: ST_TO_ADDR
// if p3 = 6 then
83005: LD_VAR 0 3
83009: PUSH
83010: LD_INT 6
83012: EQUAL
83013: IFFALSE 83023
// sArmoury := true ;
83015: LD_ADDR_EXP 114
83019: PUSH
83020: LD_INT 1
83022: ST_TO_ADDR
// if p3 = 7 then
83023: LD_VAR 0 3
83027: PUSH
83028: LD_INT 7
83030: EQUAL
83031: IFFALSE 83041
// sRadar := true ;
83033: LD_ADDR_EXP 115
83037: PUSH
83038: LD_INT 1
83040: ST_TO_ADDR
// if p3 = 8 then
83041: LD_VAR 0 3
83045: PUSH
83046: LD_INT 8
83048: EQUAL
83049: IFFALSE 83059
// sBunker := true ;
83051: LD_ADDR_EXP 116
83055: PUSH
83056: LD_INT 1
83058: ST_TO_ADDR
// if p3 = 9 then
83059: LD_VAR 0 3
83063: PUSH
83064: LD_INT 9
83066: EQUAL
83067: IFFALSE 83077
// sHack := true ;
83069: LD_ADDR_EXP 117
83073: PUSH
83074: LD_INT 1
83076: ST_TO_ADDR
// if p3 = 10 then
83077: LD_VAR 0 3
83081: PUSH
83082: LD_INT 10
83084: EQUAL
83085: IFFALSE 83095
// sFire := true ;
83087: LD_ADDR_EXP 118
83091: PUSH
83092: LD_INT 1
83094: ST_TO_ADDR
// if p3 = 11 then
83095: LD_VAR 0 3
83099: PUSH
83100: LD_INT 11
83102: EQUAL
83103: IFFALSE 83113
// sRefresh := true ;
83105: LD_ADDR_EXP 119
83109: PUSH
83110: LD_INT 1
83112: ST_TO_ADDR
// if p3 = 12 then
83113: LD_VAR 0 3
83117: PUSH
83118: LD_INT 12
83120: EQUAL
83121: IFFALSE 83131
// sExp := true ;
83123: LD_ADDR_EXP 120
83127: PUSH
83128: LD_INT 1
83130: ST_TO_ADDR
// if p3 = 13 then
83131: LD_VAR 0 3
83135: PUSH
83136: LD_INT 13
83138: EQUAL
83139: IFFALSE 83149
// sDepot := true ;
83141: LD_ADDR_EXP 121
83145: PUSH
83146: LD_INT 1
83148: ST_TO_ADDR
// if p3 = 14 then
83149: LD_VAR 0 3
83153: PUSH
83154: LD_INT 14
83156: EQUAL
83157: IFFALSE 83167
// sFlag := true ;
83159: LD_ADDR_EXP 122
83163: PUSH
83164: LD_INT 1
83166: ST_TO_ADDR
// if p3 = 15 then
83167: LD_VAR 0 3
83171: PUSH
83172: LD_INT 15
83174: EQUAL
83175: IFFALSE 83185
// sKamikadze := true ;
83177: LD_ADDR_EXP 130
83181: PUSH
83182: LD_INT 1
83184: ST_TO_ADDR
// if p3 = 16 then
83185: LD_VAR 0 3
83189: PUSH
83190: LD_INT 16
83192: EQUAL
83193: IFFALSE 83203
// sTroll := true ;
83195: LD_ADDR_EXP 131
83199: PUSH
83200: LD_INT 1
83202: ST_TO_ADDR
// if p3 = 17 then
83203: LD_VAR 0 3
83207: PUSH
83208: LD_INT 17
83210: EQUAL
83211: IFFALSE 83221
// sSlow := true ;
83213: LD_ADDR_EXP 132
83217: PUSH
83218: LD_INT 1
83220: ST_TO_ADDR
// if p3 = 18 then
83221: LD_VAR 0 3
83225: PUSH
83226: LD_INT 18
83228: EQUAL
83229: IFFALSE 83239
// sLack := true ;
83231: LD_ADDR_EXP 133
83235: PUSH
83236: LD_INT 1
83238: ST_TO_ADDR
// if p3 = 19 then
83239: LD_VAR 0 3
83243: PUSH
83244: LD_INT 19
83246: EQUAL
83247: IFFALSE 83257
// sTank := true ;
83249: LD_ADDR_EXP 135
83253: PUSH
83254: LD_INT 1
83256: ST_TO_ADDR
// if p3 = 20 then
83257: LD_VAR 0 3
83261: PUSH
83262: LD_INT 20
83264: EQUAL
83265: IFFALSE 83275
// sRemote := true ;
83267: LD_ADDR_EXP 136
83271: PUSH
83272: LD_INT 1
83274: ST_TO_ADDR
// if p3 = 21 then
83275: LD_VAR 0 3
83279: PUSH
83280: LD_INT 21
83282: EQUAL
83283: IFFALSE 83293
// sPowell := true ;
83285: LD_ADDR_EXP 137
83289: PUSH
83290: LD_INT 1
83292: ST_TO_ADDR
// if p3 = 22 then
83293: LD_VAR 0 3
83297: PUSH
83298: LD_INT 22
83300: EQUAL
83301: IFFALSE 83311
// sTeleport := true ;
83303: LD_ADDR_EXP 140
83307: PUSH
83308: LD_INT 1
83310: ST_TO_ADDR
// if p3 = 23 then
83311: LD_VAR 0 3
83315: PUSH
83316: LD_INT 23
83318: EQUAL
83319: IFFALSE 83329
// sOilTower := true ;
83321: LD_ADDR_EXP 142
83325: PUSH
83326: LD_INT 1
83328: ST_TO_ADDR
// if p3 = 24 then
83329: LD_VAR 0 3
83333: PUSH
83334: LD_INT 24
83336: EQUAL
83337: IFFALSE 83347
// sShovel := true ;
83339: LD_ADDR_EXP 143
83343: PUSH
83344: LD_INT 1
83346: ST_TO_ADDR
// if p3 = 25 then
83347: LD_VAR 0 3
83351: PUSH
83352: LD_INT 25
83354: EQUAL
83355: IFFALSE 83365
// sSheik := true ;
83357: LD_ADDR_EXP 144
83361: PUSH
83362: LD_INT 1
83364: ST_TO_ADDR
// if p3 = 26 then
83365: LD_VAR 0 3
83369: PUSH
83370: LD_INT 26
83372: EQUAL
83373: IFFALSE 83383
// sEarthquake := true ;
83375: LD_ADDR_EXP 146
83379: PUSH
83380: LD_INT 1
83382: ST_TO_ADDR
// if p3 = 27 then
83383: LD_VAR 0 3
83387: PUSH
83388: LD_INT 27
83390: EQUAL
83391: IFFALSE 83401
// sAI := true ;
83393: LD_ADDR_EXP 147
83397: PUSH
83398: LD_INT 1
83400: ST_TO_ADDR
// if p3 = 28 then
83401: LD_VAR 0 3
83405: PUSH
83406: LD_INT 28
83408: EQUAL
83409: IFFALSE 83419
// sCargo := true ;
83411: LD_ADDR_EXP 150
83415: PUSH
83416: LD_INT 1
83418: ST_TO_ADDR
// if p3 = 29 then
83419: LD_VAR 0 3
83423: PUSH
83424: LD_INT 29
83426: EQUAL
83427: IFFALSE 83437
// sDLaser := true ;
83429: LD_ADDR_EXP 151
83433: PUSH
83434: LD_INT 1
83436: ST_TO_ADDR
// if p3 = 30 then
83437: LD_VAR 0 3
83441: PUSH
83442: LD_INT 30
83444: EQUAL
83445: IFFALSE 83455
// sExchange := true ;
83447: LD_ADDR_EXP 152
83451: PUSH
83452: LD_INT 1
83454: ST_TO_ADDR
// if p3 = 31 then
83455: LD_VAR 0 3
83459: PUSH
83460: LD_INT 31
83462: EQUAL
83463: IFFALSE 83473
// sFac := true ;
83465: LD_ADDR_EXP 153
83469: PUSH
83470: LD_INT 1
83472: ST_TO_ADDR
// if p3 = 32 then
83473: LD_VAR 0 3
83477: PUSH
83478: LD_INT 32
83480: EQUAL
83481: IFFALSE 83491
// sPower := true ;
83483: LD_ADDR_EXP 154
83487: PUSH
83488: LD_INT 1
83490: ST_TO_ADDR
// if p3 = 33 then
83491: LD_VAR 0 3
83495: PUSH
83496: LD_INT 33
83498: EQUAL
83499: IFFALSE 83509
// sRandom := true ;
83501: LD_ADDR_EXP 155
83505: PUSH
83506: LD_INT 1
83508: ST_TO_ADDR
// if p3 = 34 then
83509: LD_VAR 0 3
83513: PUSH
83514: LD_INT 34
83516: EQUAL
83517: IFFALSE 83527
// sShield := true ;
83519: LD_ADDR_EXP 156
83523: PUSH
83524: LD_INT 1
83526: ST_TO_ADDR
// if p3 = 35 then
83527: LD_VAR 0 3
83531: PUSH
83532: LD_INT 35
83534: EQUAL
83535: IFFALSE 83545
// sTime := true ;
83537: LD_ADDR_EXP 157
83541: PUSH
83542: LD_INT 1
83544: ST_TO_ADDR
// if p3 = 36 then
83545: LD_VAR 0 3
83549: PUSH
83550: LD_INT 36
83552: EQUAL
83553: IFFALSE 83563
// sTools := true ;
83555: LD_ADDR_EXP 158
83559: PUSH
83560: LD_INT 1
83562: ST_TO_ADDR
// if p3 = 101 then
83563: LD_VAR 0 3
83567: PUSH
83568: LD_INT 101
83570: EQUAL
83571: IFFALSE 83581
// sSold := true ;
83573: LD_ADDR_EXP 123
83577: PUSH
83578: LD_INT 1
83580: ST_TO_ADDR
// if p3 = 102 then
83581: LD_VAR 0 3
83585: PUSH
83586: LD_INT 102
83588: EQUAL
83589: IFFALSE 83599
// sDiff := true ;
83591: LD_ADDR_EXP 124
83595: PUSH
83596: LD_INT 1
83598: ST_TO_ADDR
// if p3 = 103 then
83599: LD_VAR 0 3
83603: PUSH
83604: LD_INT 103
83606: EQUAL
83607: IFFALSE 83617
// sFog := true ;
83609: LD_ADDR_EXP 127
83613: PUSH
83614: LD_INT 1
83616: ST_TO_ADDR
// if p3 = 104 then
83617: LD_VAR 0 3
83621: PUSH
83622: LD_INT 104
83624: EQUAL
83625: IFFALSE 83635
// sReset := true ;
83627: LD_ADDR_EXP 128
83631: PUSH
83632: LD_INT 1
83634: ST_TO_ADDR
// if p3 = 105 then
83635: LD_VAR 0 3
83639: PUSH
83640: LD_INT 105
83642: EQUAL
83643: IFFALSE 83653
// sSun := true ;
83645: LD_ADDR_EXP 129
83649: PUSH
83650: LD_INT 1
83652: ST_TO_ADDR
// if p3 = 106 then
83653: LD_VAR 0 3
83657: PUSH
83658: LD_INT 106
83660: EQUAL
83661: IFFALSE 83671
// sTiger := true ;
83663: LD_ADDR_EXP 125
83667: PUSH
83668: LD_INT 1
83670: ST_TO_ADDR
// if p3 = 107 then
83671: LD_VAR 0 3
83675: PUSH
83676: LD_INT 107
83678: EQUAL
83679: IFFALSE 83689
// sBomb := true ;
83681: LD_ADDR_EXP 126
83685: PUSH
83686: LD_INT 1
83688: ST_TO_ADDR
// if p3 = 108 then
83689: LD_VAR 0 3
83693: PUSH
83694: LD_INT 108
83696: EQUAL
83697: IFFALSE 83707
// sWound := true ;
83699: LD_ADDR_EXP 134
83703: PUSH
83704: LD_INT 1
83706: ST_TO_ADDR
// if p3 = 109 then
83707: LD_VAR 0 3
83711: PUSH
83712: LD_INT 109
83714: EQUAL
83715: IFFALSE 83725
// sBetray := true ;
83717: LD_ADDR_EXP 138
83721: PUSH
83722: LD_INT 1
83724: ST_TO_ADDR
// if p3 = 110 then
83725: LD_VAR 0 3
83729: PUSH
83730: LD_INT 110
83732: EQUAL
83733: IFFALSE 83743
// sContamin := true ;
83735: LD_ADDR_EXP 139
83739: PUSH
83740: LD_INT 1
83742: ST_TO_ADDR
// if p3 = 111 then
83743: LD_VAR 0 3
83747: PUSH
83748: LD_INT 111
83750: EQUAL
83751: IFFALSE 83761
// sOil := true ;
83753: LD_ADDR_EXP 141
83757: PUSH
83758: LD_INT 1
83760: ST_TO_ADDR
// if p3 = 112 then
83761: LD_VAR 0 3
83765: PUSH
83766: LD_INT 112
83768: EQUAL
83769: IFFALSE 83779
// sStu := true ;
83771: LD_ADDR_EXP 145
83775: PUSH
83776: LD_INT 1
83778: ST_TO_ADDR
// if p3 = 113 then
83779: LD_VAR 0 3
83783: PUSH
83784: LD_INT 113
83786: EQUAL
83787: IFFALSE 83797
// sBazooka := true ;
83789: LD_ADDR_EXP 148
83793: PUSH
83794: LD_INT 1
83796: ST_TO_ADDR
// if p3 = 114 then
83797: LD_VAR 0 3
83801: PUSH
83802: LD_INT 114
83804: EQUAL
83805: IFFALSE 83815
// sMortar := true ;
83807: LD_ADDR_EXP 149
83811: PUSH
83812: LD_INT 1
83814: ST_TO_ADDR
// if p3 = 115 then
83815: LD_VAR 0 3
83819: PUSH
83820: LD_INT 115
83822: EQUAL
83823: IFFALSE 83833
// sRanger := true ;
83825: LD_ADDR_EXP 159
83829: PUSH
83830: LD_INT 1
83832: ST_TO_ADDR
// end ; end ;
83833: PPOPN 6
83835: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
83836: LD_EXP 106
83840: PUSH
83841: LD_EXP 111
83845: AND
83846: IFFALSE 83970
83848: GO 83850
83850: DISABLE
83851: LD_INT 0
83853: PPUSH
83854: PPUSH
// begin enable ;
83855: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
83856: LD_ADDR_VAR 0 2
83860: PUSH
83861: LD_INT 22
83863: PUSH
83864: LD_OWVAR 2
83868: PUSH
83869: EMPTY
83870: LIST
83871: LIST
83872: PUSH
83873: LD_INT 2
83875: PUSH
83876: LD_INT 34
83878: PUSH
83879: LD_INT 7
83881: PUSH
83882: EMPTY
83883: LIST
83884: LIST
83885: PUSH
83886: LD_INT 34
83888: PUSH
83889: LD_INT 45
83891: PUSH
83892: EMPTY
83893: LIST
83894: LIST
83895: PUSH
83896: LD_INT 34
83898: PUSH
83899: LD_INT 28
83901: PUSH
83902: EMPTY
83903: LIST
83904: LIST
83905: PUSH
83906: LD_INT 34
83908: PUSH
83909: LD_INT 47
83911: PUSH
83912: EMPTY
83913: LIST
83914: LIST
83915: PUSH
83916: EMPTY
83917: LIST
83918: LIST
83919: LIST
83920: LIST
83921: LIST
83922: PUSH
83923: EMPTY
83924: LIST
83925: LIST
83926: PPUSH
83927: CALL_OW 69
83931: ST_TO_ADDR
// if not tmp then
83932: LD_VAR 0 2
83936: NOT
83937: IFFALSE 83941
// exit ;
83939: GO 83970
// for i in tmp do
83941: LD_ADDR_VAR 0 1
83945: PUSH
83946: LD_VAR 0 2
83950: PUSH
83951: FOR_IN
83952: IFFALSE 83968
// begin SetLives ( i , 0 ) ;
83954: LD_VAR 0 1
83958: PPUSH
83959: LD_INT 0
83961: PPUSH
83962: CALL_OW 234
// end ;
83966: GO 83951
83968: POP
83969: POP
// end ;
83970: PPOPN 2
83972: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
83973: LD_EXP 106
83977: PUSH
83978: LD_EXP 112
83982: AND
83983: IFFALSE 84067
83985: GO 83987
83987: DISABLE
83988: LD_INT 0
83990: PPUSH
83991: PPUSH
// begin enable ;
83992: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
83993: LD_ADDR_VAR 0 2
83997: PUSH
83998: LD_INT 22
84000: PUSH
84001: LD_OWVAR 2
84005: PUSH
84006: EMPTY
84007: LIST
84008: LIST
84009: PUSH
84010: LD_INT 32
84012: PUSH
84013: LD_INT 3
84015: PUSH
84016: EMPTY
84017: LIST
84018: LIST
84019: PUSH
84020: EMPTY
84021: LIST
84022: LIST
84023: PPUSH
84024: CALL_OW 69
84028: ST_TO_ADDR
// if not tmp then
84029: LD_VAR 0 2
84033: NOT
84034: IFFALSE 84038
// exit ;
84036: GO 84067
// for i in tmp do
84038: LD_ADDR_VAR 0 1
84042: PUSH
84043: LD_VAR 0 2
84047: PUSH
84048: FOR_IN
84049: IFFALSE 84065
// begin SetLives ( i , 0 ) ;
84051: LD_VAR 0 1
84055: PPUSH
84056: LD_INT 0
84058: PPUSH
84059: CALL_OW 234
// end ;
84063: GO 84048
84065: POP
84066: POP
// end ;
84067: PPOPN 2
84069: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
84070: LD_EXP 106
84074: PUSH
84075: LD_EXP 109
84079: AND
84080: IFFALSE 84173
84082: GO 84084
84084: DISABLE
84085: LD_INT 0
84087: PPUSH
// begin enable ;
84088: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
84089: LD_ADDR_VAR 0 1
84093: PUSH
84094: LD_INT 22
84096: PUSH
84097: LD_OWVAR 2
84101: PUSH
84102: EMPTY
84103: LIST
84104: LIST
84105: PUSH
84106: LD_INT 2
84108: PUSH
84109: LD_INT 25
84111: PUSH
84112: LD_INT 5
84114: PUSH
84115: EMPTY
84116: LIST
84117: LIST
84118: PUSH
84119: LD_INT 25
84121: PUSH
84122: LD_INT 9
84124: PUSH
84125: EMPTY
84126: LIST
84127: LIST
84128: PUSH
84129: LD_INT 25
84131: PUSH
84132: LD_INT 8
84134: PUSH
84135: EMPTY
84136: LIST
84137: LIST
84138: PUSH
84139: EMPTY
84140: LIST
84141: LIST
84142: LIST
84143: LIST
84144: PUSH
84145: EMPTY
84146: LIST
84147: LIST
84148: PPUSH
84149: CALL_OW 69
84153: PUSH
84154: FOR_IN
84155: IFFALSE 84171
// begin SetClass ( i , 1 ) ;
84157: LD_VAR 0 1
84161: PPUSH
84162: LD_INT 1
84164: PPUSH
84165: CALL_OW 336
// end ;
84169: GO 84154
84171: POP
84172: POP
// end ;
84173: PPOPN 1
84175: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
84176: LD_EXP 106
84180: PUSH
84181: LD_EXP 110
84185: AND
84186: PUSH
84187: LD_OWVAR 65
84191: PUSH
84192: LD_INT 7
84194: LESS
84195: AND
84196: IFFALSE 84210
84198: GO 84200
84200: DISABLE
// begin enable ;
84201: ENABLE
// game_speed := 7 ;
84202: LD_ADDR_OWVAR 65
84206: PUSH
84207: LD_INT 7
84209: ST_TO_ADDR
// end ;
84210: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
84211: LD_EXP 106
84215: PUSH
84216: LD_EXP 113
84220: AND
84221: IFFALSE 84423
84223: GO 84225
84225: DISABLE
84226: LD_INT 0
84228: PPUSH
84229: PPUSH
84230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
84231: LD_ADDR_VAR 0 3
84235: PUSH
84236: LD_INT 81
84238: PUSH
84239: LD_OWVAR 2
84243: PUSH
84244: EMPTY
84245: LIST
84246: LIST
84247: PUSH
84248: LD_INT 21
84250: PUSH
84251: LD_INT 1
84253: PUSH
84254: EMPTY
84255: LIST
84256: LIST
84257: PUSH
84258: EMPTY
84259: LIST
84260: LIST
84261: PPUSH
84262: CALL_OW 69
84266: ST_TO_ADDR
// if not tmp then
84267: LD_VAR 0 3
84271: NOT
84272: IFFALSE 84276
// exit ;
84274: GO 84423
// if tmp > 5 then
84276: LD_VAR 0 3
84280: PUSH
84281: LD_INT 5
84283: GREATER
84284: IFFALSE 84296
// k := 5 else
84286: LD_ADDR_VAR 0 2
84290: PUSH
84291: LD_INT 5
84293: ST_TO_ADDR
84294: GO 84306
// k := tmp ;
84296: LD_ADDR_VAR 0 2
84300: PUSH
84301: LD_VAR 0 3
84305: ST_TO_ADDR
// for i := 1 to k do
84306: LD_ADDR_VAR 0 1
84310: PUSH
84311: DOUBLE
84312: LD_INT 1
84314: DEC
84315: ST_TO_ADDR
84316: LD_VAR 0 2
84320: PUSH
84321: FOR_TO
84322: IFFALSE 84421
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
84324: LD_VAR 0 3
84328: PUSH
84329: LD_VAR 0 1
84333: ARRAY
84334: PPUSH
84335: LD_VAR 0 1
84339: PUSH
84340: LD_INT 4
84342: MOD
84343: PUSH
84344: LD_INT 1
84346: PLUS
84347: PPUSH
84348: CALL_OW 259
84352: PUSH
84353: LD_INT 10
84355: LESS
84356: IFFALSE 84419
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
84358: LD_VAR 0 3
84362: PUSH
84363: LD_VAR 0 1
84367: ARRAY
84368: PPUSH
84369: LD_VAR 0 1
84373: PUSH
84374: LD_INT 4
84376: MOD
84377: PUSH
84378: LD_INT 1
84380: PLUS
84381: PPUSH
84382: LD_VAR 0 3
84386: PUSH
84387: LD_VAR 0 1
84391: ARRAY
84392: PPUSH
84393: LD_VAR 0 1
84397: PUSH
84398: LD_INT 4
84400: MOD
84401: PUSH
84402: LD_INT 1
84404: PLUS
84405: PPUSH
84406: CALL_OW 259
84410: PUSH
84411: LD_INT 1
84413: PLUS
84414: PPUSH
84415: CALL_OW 237
84419: GO 84321
84421: POP
84422: POP
// end ;
84423: PPOPN 3
84425: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
84426: LD_EXP 106
84430: PUSH
84431: LD_EXP 114
84435: AND
84436: IFFALSE 84456
84438: GO 84440
84440: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
84441: LD_INT 4
84443: PPUSH
84444: LD_OWVAR 2
84448: PPUSH
84449: LD_INT 0
84451: PPUSH
84452: CALL_OW 324
84456: END
// every 0 0$1 trigger StreamModeActive and sShovel do
84457: LD_EXP 106
84461: PUSH
84462: LD_EXP 143
84466: AND
84467: IFFALSE 84487
84469: GO 84471
84471: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
84472: LD_INT 19
84474: PPUSH
84475: LD_OWVAR 2
84479: PPUSH
84480: LD_INT 0
84482: PPUSH
84483: CALL_OW 324
84487: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
84488: LD_EXP 106
84492: PUSH
84493: LD_EXP 115
84497: AND
84498: IFFALSE 84600
84500: GO 84502
84502: DISABLE
84503: LD_INT 0
84505: PPUSH
84506: PPUSH
// begin enable ;
84507: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
84508: LD_ADDR_VAR 0 2
84512: PUSH
84513: LD_INT 22
84515: PUSH
84516: LD_OWVAR 2
84520: PUSH
84521: EMPTY
84522: LIST
84523: LIST
84524: PUSH
84525: LD_INT 2
84527: PUSH
84528: LD_INT 34
84530: PUSH
84531: LD_INT 11
84533: PUSH
84534: EMPTY
84535: LIST
84536: LIST
84537: PUSH
84538: LD_INT 34
84540: PUSH
84541: LD_INT 30
84543: PUSH
84544: EMPTY
84545: LIST
84546: LIST
84547: PUSH
84548: EMPTY
84549: LIST
84550: LIST
84551: LIST
84552: PUSH
84553: EMPTY
84554: LIST
84555: LIST
84556: PPUSH
84557: CALL_OW 69
84561: ST_TO_ADDR
// if not tmp then
84562: LD_VAR 0 2
84566: NOT
84567: IFFALSE 84571
// exit ;
84569: GO 84600
// for i in tmp do
84571: LD_ADDR_VAR 0 1
84575: PUSH
84576: LD_VAR 0 2
84580: PUSH
84581: FOR_IN
84582: IFFALSE 84598
// begin SetLives ( i , 0 ) ;
84584: LD_VAR 0 1
84588: PPUSH
84589: LD_INT 0
84591: PPUSH
84592: CALL_OW 234
// end ;
84596: GO 84581
84598: POP
84599: POP
// end ;
84600: PPOPN 2
84602: END
// every 0 0$1 trigger StreamModeActive and sBunker do
84603: LD_EXP 106
84607: PUSH
84608: LD_EXP 116
84612: AND
84613: IFFALSE 84633
84615: GO 84617
84617: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
84618: LD_INT 32
84620: PPUSH
84621: LD_OWVAR 2
84625: PPUSH
84626: LD_INT 0
84628: PPUSH
84629: CALL_OW 324
84633: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
84634: LD_EXP 106
84638: PUSH
84639: LD_EXP 117
84643: AND
84644: IFFALSE 84825
84646: GO 84648
84648: DISABLE
84649: LD_INT 0
84651: PPUSH
84652: PPUSH
84653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
84654: LD_ADDR_VAR 0 2
84658: PUSH
84659: LD_INT 22
84661: PUSH
84662: LD_OWVAR 2
84666: PUSH
84667: EMPTY
84668: LIST
84669: LIST
84670: PUSH
84671: LD_INT 33
84673: PUSH
84674: LD_INT 3
84676: PUSH
84677: EMPTY
84678: LIST
84679: LIST
84680: PUSH
84681: EMPTY
84682: LIST
84683: LIST
84684: PPUSH
84685: CALL_OW 69
84689: ST_TO_ADDR
// if not tmp then
84690: LD_VAR 0 2
84694: NOT
84695: IFFALSE 84699
// exit ;
84697: GO 84825
// side := 0 ;
84699: LD_ADDR_VAR 0 3
84703: PUSH
84704: LD_INT 0
84706: ST_TO_ADDR
// for i := 1 to 8 do
84707: LD_ADDR_VAR 0 1
84711: PUSH
84712: DOUBLE
84713: LD_INT 1
84715: DEC
84716: ST_TO_ADDR
84717: LD_INT 8
84719: PUSH
84720: FOR_TO
84721: IFFALSE 84769
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
84723: LD_OWVAR 2
84727: PUSH
84728: LD_VAR 0 1
84732: NONEQUAL
84733: PUSH
84734: LD_OWVAR 2
84738: PPUSH
84739: LD_VAR 0 1
84743: PPUSH
84744: CALL_OW 81
84748: PUSH
84749: LD_INT 2
84751: EQUAL
84752: AND
84753: IFFALSE 84767
// begin side := i ;
84755: LD_ADDR_VAR 0 3
84759: PUSH
84760: LD_VAR 0 1
84764: ST_TO_ADDR
// break ;
84765: GO 84769
// end ;
84767: GO 84720
84769: POP
84770: POP
// if not side then
84771: LD_VAR 0 3
84775: NOT
84776: IFFALSE 84780
// exit ;
84778: GO 84825
// for i := 1 to tmp do
84780: LD_ADDR_VAR 0 1
84784: PUSH
84785: DOUBLE
84786: LD_INT 1
84788: DEC
84789: ST_TO_ADDR
84790: LD_VAR 0 2
84794: PUSH
84795: FOR_TO
84796: IFFALSE 84823
// if Prob ( 60 ) then
84798: LD_INT 60
84800: PPUSH
84801: CALL_OW 13
84805: IFFALSE 84821
// SetSide ( i , side ) ;
84807: LD_VAR 0 1
84811: PPUSH
84812: LD_VAR 0 3
84816: PPUSH
84817: CALL_OW 235
84821: GO 84795
84823: POP
84824: POP
// end ;
84825: PPOPN 3
84827: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
84828: LD_EXP 106
84832: PUSH
84833: LD_EXP 119
84837: AND
84838: IFFALSE 84957
84840: GO 84842
84842: DISABLE
84843: LD_INT 0
84845: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
84846: LD_ADDR_VAR 0 1
84850: PUSH
84851: LD_INT 22
84853: PUSH
84854: LD_OWVAR 2
84858: PUSH
84859: EMPTY
84860: LIST
84861: LIST
84862: PUSH
84863: LD_INT 21
84865: PUSH
84866: LD_INT 1
84868: PUSH
84869: EMPTY
84870: LIST
84871: LIST
84872: PUSH
84873: LD_INT 3
84875: PUSH
84876: LD_INT 23
84878: PUSH
84879: LD_INT 0
84881: PUSH
84882: EMPTY
84883: LIST
84884: LIST
84885: PUSH
84886: EMPTY
84887: LIST
84888: LIST
84889: PUSH
84890: EMPTY
84891: LIST
84892: LIST
84893: LIST
84894: PPUSH
84895: CALL_OW 69
84899: PUSH
84900: FOR_IN
84901: IFFALSE 84955
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
84903: LD_VAR 0 1
84907: PPUSH
84908: CALL_OW 257
84912: PUSH
84913: LD_INT 1
84915: PUSH
84916: LD_INT 2
84918: PUSH
84919: LD_INT 3
84921: PUSH
84922: LD_INT 4
84924: PUSH
84925: EMPTY
84926: LIST
84927: LIST
84928: LIST
84929: LIST
84930: IN
84931: IFFALSE 84953
// SetClass ( un , rand ( 1 , 4 ) ) ;
84933: LD_VAR 0 1
84937: PPUSH
84938: LD_INT 1
84940: PPUSH
84941: LD_INT 4
84943: PPUSH
84944: CALL_OW 12
84948: PPUSH
84949: CALL_OW 336
84953: GO 84900
84955: POP
84956: POP
// end ;
84957: PPOPN 1
84959: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
84960: LD_EXP 106
84964: PUSH
84965: LD_EXP 118
84969: AND
84970: IFFALSE 85049
84972: GO 84974
84974: DISABLE
84975: LD_INT 0
84977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
84978: LD_ADDR_VAR 0 1
84982: PUSH
84983: LD_INT 22
84985: PUSH
84986: LD_OWVAR 2
84990: PUSH
84991: EMPTY
84992: LIST
84993: LIST
84994: PUSH
84995: LD_INT 21
84997: PUSH
84998: LD_INT 3
85000: PUSH
85001: EMPTY
85002: LIST
85003: LIST
85004: PUSH
85005: EMPTY
85006: LIST
85007: LIST
85008: PPUSH
85009: CALL_OW 69
85013: ST_TO_ADDR
// if not tmp then
85014: LD_VAR 0 1
85018: NOT
85019: IFFALSE 85023
// exit ;
85021: GO 85049
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
85023: LD_VAR 0 1
85027: PUSH
85028: LD_INT 1
85030: PPUSH
85031: LD_VAR 0 1
85035: PPUSH
85036: CALL_OW 12
85040: ARRAY
85041: PPUSH
85042: LD_INT 100
85044: PPUSH
85045: CALL_OW 234
// end ;
85049: PPOPN 1
85051: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
85052: LD_EXP 106
85056: PUSH
85057: LD_EXP 120
85061: AND
85062: IFFALSE 85160
85064: GO 85066
85066: DISABLE
85067: LD_INT 0
85069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
85070: LD_ADDR_VAR 0 1
85074: PUSH
85075: LD_INT 22
85077: PUSH
85078: LD_OWVAR 2
85082: PUSH
85083: EMPTY
85084: LIST
85085: LIST
85086: PUSH
85087: LD_INT 21
85089: PUSH
85090: LD_INT 1
85092: PUSH
85093: EMPTY
85094: LIST
85095: LIST
85096: PUSH
85097: EMPTY
85098: LIST
85099: LIST
85100: PPUSH
85101: CALL_OW 69
85105: ST_TO_ADDR
// if not tmp then
85106: LD_VAR 0 1
85110: NOT
85111: IFFALSE 85115
// exit ;
85113: GO 85160
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
85115: LD_VAR 0 1
85119: PUSH
85120: LD_INT 1
85122: PPUSH
85123: LD_VAR 0 1
85127: PPUSH
85128: CALL_OW 12
85132: ARRAY
85133: PPUSH
85134: LD_INT 1
85136: PPUSH
85137: LD_INT 4
85139: PPUSH
85140: CALL_OW 12
85144: PPUSH
85145: LD_INT 3000
85147: PPUSH
85148: LD_INT 9000
85150: PPUSH
85151: CALL_OW 12
85155: PPUSH
85156: CALL_OW 492
// end ;
85160: PPOPN 1
85162: END
// every 0 0$1 trigger StreamModeActive and sDepot do
85163: LD_EXP 106
85167: PUSH
85168: LD_EXP 121
85172: AND
85173: IFFALSE 85193
85175: GO 85177
85177: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
85178: LD_INT 1
85180: PPUSH
85181: LD_OWVAR 2
85185: PPUSH
85186: LD_INT 0
85188: PPUSH
85189: CALL_OW 324
85193: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
85194: LD_EXP 106
85198: PUSH
85199: LD_EXP 122
85203: AND
85204: IFFALSE 85287
85206: GO 85208
85208: DISABLE
85209: LD_INT 0
85211: PPUSH
85212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
85213: LD_ADDR_VAR 0 2
85217: PUSH
85218: LD_INT 22
85220: PUSH
85221: LD_OWVAR 2
85225: PUSH
85226: EMPTY
85227: LIST
85228: LIST
85229: PUSH
85230: LD_INT 21
85232: PUSH
85233: LD_INT 3
85235: PUSH
85236: EMPTY
85237: LIST
85238: LIST
85239: PUSH
85240: EMPTY
85241: LIST
85242: LIST
85243: PPUSH
85244: CALL_OW 69
85248: ST_TO_ADDR
// if not tmp then
85249: LD_VAR 0 2
85253: NOT
85254: IFFALSE 85258
// exit ;
85256: GO 85287
// for i in tmp do
85258: LD_ADDR_VAR 0 1
85262: PUSH
85263: LD_VAR 0 2
85267: PUSH
85268: FOR_IN
85269: IFFALSE 85285
// SetBLevel ( i , 10 ) ;
85271: LD_VAR 0 1
85275: PPUSH
85276: LD_INT 10
85278: PPUSH
85279: CALL_OW 241
85283: GO 85268
85285: POP
85286: POP
// end ;
85287: PPOPN 2
85289: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
85290: LD_EXP 106
85294: PUSH
85295: LD_EXP 123
85299: AND
85300: IFFALSE 85411
85302: GO 85304
85304: DISABLE
85305: LD_INT 0
85307: PPUSH
85308: PPUSH
85309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
85310: LD_ADDR_VAR 0 3
85314: PUSH
85315: LD_INT 22
85317: PUSH
85318: LD_OWVAR 2
85322: PUSH
85323: EMPTY
85324: LIST
85325: LIST
85326: PUSH
85327: LD_INT 25
85329: PUSH
85330: LD_INT 1
85332: PUSH
85333: EMPTY
85334: LIST
85335: LIST
85336: PUSH
85337: EMPTY
85338: LIST
85339: LIST
85340: PPUSH
85341: CALL_OW 69
85345: ST_TO_ADDR
// if not tmp then
85346: LD_VAR 0 3
85350: NOT
85351: IFFALSE 85355
// exit ;
85353: GO 85411
// un := tmp [ rand ( 1 , tmp ) ] ;
85355: LD_ADDR_VAR 0 2
85359: PUSH
85360: LD_VAR 0 3
85364: PUSH
85365: LD_INT 1
85367: PPUSH
85368: LD_VAR 0 3
85372: PPUSH
85373: CALL_OW 12
85377: ARRAY
85378: ST_TO_ADDR
// if Crawls ( un ) then
85379: LD_VAR 0 2
85383: PPUSH
85384: CALL_OW 318
85388: IFFALSE 85399
// ComWalk ( un ) ;
85390: LD_VAR 0 2
85394: PPUSH
85395: CALL_OW 138
// SetClass ( un , class_sniper ) ;
85399: LD_VAR 0 2
85403: PPUSH
85404: LD_INT 5
85406: PPUSH
85407: CALL_OW 336
// end ;
85411: PPOPN 3
85413: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
85414: LD_EXP 106
85418: PUSH
85419: LD_EXP 124
85423: AND
85424: PUSH
85425: LD_OWVAR 67
85429: PUSH
85430: LD_INT 3
85432: LESS
85433: AND
85434: IFFALSE 85453
85436: GO 85438
85438: DISABLE
// Difficulty := Difficulty + 1 ;
85439: LD_ADDR_OWVAR 67
85443: PUSH
85444: LD_OWVAR 67
85448: PUSH
85449: LD_INT 1
85451: PLUS
85452: ST_TO_ADDR
85453: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
85454: LD_EXP 106
85458: PUSH
85459: LD_EXP 125
85463: AND
85464: IFFALSE 85567
85466: GO 85468
85468: DISABLE
85469: LD_INT 0
85471: PPUSH
// begin for i := 1 to 5 do
85472: LD_ADDR_VAR 0 1
85476: PUSH
85477: DOUBLE
85478: LD_INT 1
85480: DEC
85481: ST_TO_ADDR
85482: LD_INT 5
85484: PUSH
85485: FOR_TO
85486: IFFALSE 85565
// begin uc_nation := nation_nature ;
85488: LD_ADDR_OWVAR 21
85492: PUSH
85493: LD_INT 0
85495: ST_TO_ADDR
// uc_side := 0 ;
85496: LD_ADDR_OWVAR 20
85500: PUSH
85501: LD_INT 0
85503: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
85504: LD_ADDR_OWVAR 29
85508: PUSH
85509: LD_INT 12
85511: PUSH
85512: LD_INT 12
85514: PUSH
85515: EMPTY
85516: LIST
85517: LIST
85518: ST_TO_ADDR
// hc_agressivity := 20 ;
85519: LD_ADDR_OWVAR 35
85523: PUSH
85524: LD_INT 20
85526: ST_TO_ADDR
// hc_class := class_tiger ;
85527: LD_ADDR_OWVAR 28
85531: PUSH
85532: LD_INT 14
85534: ST_TO_ADDR
// hc_gallery :=  ;
85535: LD_ADDR_OWVAR 33
85539: PUSH
85540: LD_STRING 
85542: ST_TO_ADDR
// hc_name :=  ;
85543: LD_ADDR_OWVAR 26
85547: PUSH
85548: LD_STRING 
85550: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
85551: CALL_OW 44
85555: PPUSH
85556: LD_INT 0
85558: PPUSH
85559: CALL_OW 51
// end ;
85563: GO 85485
85565: POP
85566: POP
// end ;
85567: PPOPN 1
85569: END
// every 0 0$1 trigger StreamModeActive and sBomb do
85570: LD_EXP 106
85574: PUSH
85575: LD_EXP 126
85579: AND
85580: IFFALSE 85589
85582: GO 85584
85584: DISABLE
// StreamSibBomb ;
85585: CALL 85590 0 0
85589: END
// export function StreamSibBomb ; var i , x , y ; begin
85590: LD_INT 0
85592: PPUSH
85593: PPUSH
85594: PPUSH
85595: PPUSH
// result := false ;
85596: LD_ADDR_VAR 0 1
85600: PUSH
85601: LD_INT 0
85603: ST_TO_ADDR
// for i := 1 to 16 do
85604: LD_ADDR_VAR 0 2
85608: PUSH
85609: DOUBLE
85610: LD_INT 1
85612: DEC
85613: ST_TO_ADDR
85614: LD_INT 16
85616: PUSH
85617: FOR_TO
85618: IFFALSE 85817
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
85620: LD_ADDR_VAR 0 3
85624: PUSH
85625: LD_INT 10
85627: PUSH
85628: LD_INT 20
85630: PUSH
85631: LD_INT 30
85633: PUSH
85634: LD_INT 40
85636: PUSH
85637: LD_INT 50
85639: PUSH
85640: LD_INT 60
85642: PUSH
85643: LD_INT 70
85645: PUSH
85646: LD_INT 80
85648: PUSH
85649: LD_INT 90
85651: PUSH
85652: LD_INT 100
85654: PUSH
85655: LD_INT 110
85657: PUSH
85658: LD_INT 120
85660: PUSH
85661: LD_INT 130
85663: PUSH
85664: LD_INT 140
85666: PUSH
85667: LD_INT 150
85669: PUSH
85670: EMPTY
85671: LIST
85672: LIST
85673: LIST
85674: LIST
85675: LIST
85676: LIST
85677: LIST
85678: LIST
85679: LIST
85680: LIST
85681: LIST
85682: LIST
85683: LIST
85684: LIST
85685: LIST
85686: PUSH
85687: LD_INT 1
85689: PPUSH
85690: LD_INT 15
85692: PPUSH
85693: CALL_OW 12
85697: ARRAY
85698: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
85699: LD_ADDR_VAR 0 4
85703: PUSH
85704: LD_INT 10
85706: PUSH
85707: LD_INT 20
85709: PUSH
85710: LD_INT 30
85712: PUSH
85713: LD_INT 40
85715: PUSH
85716: LD_INT 50
85718: PUSH
85719: LD_INT 60
85721: PUSH
85722: LD_INT 70
85724: PUSH
85725: LD_INT 80
85727: PUSH
85728: LD_INT 90
85730: PUSH
85731: LD_INT 100
85733: PUSH
85734: LD_INT 110
85736: PUSH
85737: LD_INT 120
85739: PUSH
85740: LD_INT 130
85742: PUSH
85743: LD_INT 140
85745: PUSH
85746: LD_INT 150
85748: PUSH
85749: EMPTY
85750: LIST
85751: LIST
85752: LIST
85753: LIST
85754: LIST
85755: LIST
85756: LIST
85757: LIST
85758: LIST
85759: LIST
85760: LIST
85761: LIST
85762: LIST
85763: LIST
85764: LIST
85765: PUSH
85766: LD_INT 1
85768: PPUSH
85769: LD_INT 15
85771: PPUSH
85772: CALL_OW 12
85776: ARRAY
85777: ST_TO_ADDR
// if ValidHex ( x , y ) then
85778: LD_VAR 0 3
85782: PPUSH
85783: LD_VAR 0 4
85787: PPUSH
85788: CALL_OW 488
85792: IFFALSE 85815
// begin result := [ x , y ] ;
85794: LD_ADDR_VAR 0 1
85798: PUSH
85799: LD_VAR 0 3
85803: PUSH
85804: LD_VAR 0 4
85808: PUSH
85809: EMPTY
85810: LIST
85811: LIST
85812: ST_TO_ADDR
// break ;
85813: GO 85817
// end ; end ;
85815: GO 85617
85817: POP
85818: POP
// if result then
85819: LD_VAR 0 1
85823: IFFALSE 85883
// begin ToLua ( playSibBomb() ) ;
85825: LD_STRING playSibBomb()
85827: PPUSH
85828: CALL_OW 559
// wait ( 0 0$14 ) ;
85832: LD_INT 490
85834: PPUSH
85835: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
85839: LD_VAR 0 1
85843: PUSH
85844: LD_INT 1
85846: ARRAY
85847: PPUSH
85848: LD_VAR 0 1
85852: PUSH
85853: LD_INT 2
85855: ARRAY
85856: PPUSH
85857: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
85861: LD_VAR 0 1
85865: PUSH
85866: LD_INT 1
85868: ARRAY
85869: PPUSH
85870: LD_VAR 0 1
85874: PUSH
85875: LD_INT 2
85877: ARRAY
85878: PPUSH
85879: CALL_OW 429
// end ; end ;
85883: LD_VAR 0 1
85887: RET
// every 0 0$1 trigger StreamModeActive and sReset do
85888: LD_EXP 106
85892: PUSH
85893: LD_EXP 128
85897: AND
85898: IFFALSE 85910
85900: GO 85902
85902: DISABLE
// YouLost (  ) ;
85903: LD_STRING 
85905: PPUSH
85906: CALL_OW 104
85910: END
// every 0 0$1 trigger StreamModeActive and sFog do
85911: LD_EXP 106
85915: PUSH
85916: LD_EXP 127
85920: AND
85921: IFFALSE 85935
85923: GO 85925
85925: DISABLE
// FogOff ( your_side ) ;
85926: LD_OWVAR 2
85930: PPUSH
85931: CALL_OW 344
85935: END
// every 0 0$1 trigger StreamModeActive and sSun do
85936: LD_EXP 106
85940: PUSH
85941: LD_EXP 129
85945: AND
85946: IFFALSE 85974
85948: GO 85950
85950: DISABLE
// begin solar_recharge_percent := 0 ;
85951: LD_ADDR_OWVAR 79
85955: PUSH
85956: LD_INT 0
85958: ST_TO_ADDR
// wait ( 5 5$00 ) ;
85959: LD_INT 10500
85961: PPUSH
85962: CALL_OW 67
// solar_recharge_percent := 100 ;
85966: LD_ADDR_OWVAR 79
85970: PUSH
85971: LD_INT 100
85973: ST_TO_ADDR
// end ;
85974: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
85975: LD_EXP 106
85979: PUSH
85980: LD_EXP 130
85984: AND
85985: IFFALSE 86224
85987: GO 85989
85989: DISABLE
85990: LD_INT 0
85992: PPUSH
85993: PPUSH
85994: PPUSH
// begin tmp := [ ] ;
85995: LD_ADDR_VAR 0 3
85999: PUSH
86000: EMPTY
86001: ST_TO_ADDR
// for i := 1 to 6 do
86002: LD_ADDR_VAR 0 1
86006: PUSH
86007: DOUBLE
86008: LD_INT 1
86010: DEC
86011: ST_TO_ADDR
86012: LD_INT 6
86014: PUSH
86015: FOR_TO
86016: IFFALSE 86121
// begin uc_nation := nation_nature ;
86018: LD_ADDR_OWVAR 21
86022: PUSH
86023: LD_INT 0
86025: ST_TO_ADDR
// uc_side := 0 ;
86026: LD_ADDR_OWVAR 20
86030: PUSH
86031: LD_INT 0
86033: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
86034: LD_ADDR_OWVAR 29
86038: PUSH
86039: LD_INT 12
86041: PUSH
86042: LD_INT 12
86044: PUSH
86045: EMPTY
86046: LIST
86047: LIST
86048: ST_TO_ADDR
// hc_agressivity := 20 ;
86049: LD_ADDR_OWVAR 35
86053: PUSH
86054: LD_INT 20
86056: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
86057: LD_ADDR_OWVAR 28
86061: PUSH
86062: LD_INT 17
86064: ST_TO_ADDR
// hc_gallery :=  ;
86065: LD_ADDR_OWVAR 33
86069: PUSH
86070: LD_STRING 
86072: ST_TO_ADDR
// hc_name :=  ;
86073: LD_ADDR_OWVAR 26
86077: PUSH
86078: LD_STRING 
86080: ST_TO_ADDR
// un := CreateHuman ;
86081: LD_ADDR_VAR 0 2
86085: PUSH
86086: CALL_OW 44
86090: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
86091: LD_VAR 0 2
86095: PPUSH
86096: LD_INT 1
86098: PPUSH
86099: CALL_OW 51
// tmp := tmp ^ un ;
86103: LD_ADDR_VAR 0 3
86107: PUSH
86108: LD_VAR 0 3
86112: PUSH
86113: LD_VAR 0 2
86117: ADD
86118: ST_TO_ADDR
// end ;
86119: GO 86015
86121: POP
86122: POP
// repeat wait ( 0 0$1 ) ;
86123: LD_INT 35
86125: PPUSH
86126: CALL_OW 67
// for un in tmp do
86130: LD_ADDR_VAR 0 2
86134: PUSH
86135: LD_VAR 0 3
86139: PUSH
86140: FOR_IN
86141: IFFALSE 86215
// begin if IsDead ( un ) then
86143: LD_VAR 0 2
86147: PPUSH
86148: CALL_OW 301
86152: IFFALSE 86172
// begin tmp := tmp diff un ;
86154: LD_ADDR_VAR 0 3
86158: PUSH
86159: LD_VAR 0 3
86163: PUSH
86164: LD_VAR 0 2
86168: DIFF
86169: ST_TO_ADDR
// continue ;
86170: GO 86140
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
86172: LD_VAR 0 2
86176: PPUSH
86177: LD_INT 3
86179: PUSH
86180: LD_INT 22
86182: PUSH
86183: LD_INT 0
86185: PUSH
86186: EMPTY
86187: LIST
86188: LIST
86189: PUSH
86190: EMPTY
86191: LIST
86192: LIST
86193: PPUSH
86194: CALL_OW 69
86198: PPUSH
86199: LD_VAR 0 2
86203: PPUSH
86204: CALL_OW 74
86208: PPUSH
86209: CALL_OW 115
// end ;
86213: GO 86140
86215: POP
86216: POP
// until not tmp ;
86217: LD_VAR 0 3
86221: NOT
86222: IFFALSE 86123
// end ;
86224: PPOPN 3
86226: END
// every 0 0$1 trigger StreamModeActive and sTroll do
86227: LD_EXP 106
86231: PUSH
86232: LD_EXP 131
86236: AND
86237: IFFALSE 86291
86239: GO 86241
86241: DISABLE
// begin ToLua ( displayTroll(); ) ;
86242: LD_STRING displayTroll();
86244: PPUSH
86245: CALL_OW 559
// wait ( 3 3$00 ) ;
86249: LD_INT 6300
86251: PPUSH
86252: CALL_OW 67
// ToLua ( hideTroll(); ) ;
86256: LD_STRING hideTroll();
86258: PPUSH
86259: CALL_OW 559
// wait ( 1 1$00 ) ;
86263: LD_INT 2100
86265: PPUSH
86266: CALL_OW 67
// ToLua ( displayTroll(); ) ;
86270: LD_STRING displayTroll();
86272: PPUSH
86273: CALL_OW 559
// wait ( 1 1$00 ) ;
86277: LD_INT 2100
86279: PPUSH
86280: CALL_OW 67
// ToLua ( hideTroll(); ) ;
86284: LD_STRING hideTroll();
86286: PPUSH
86287: CALL_OW 559
// end ;
86291: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
86292: LD_EXP 106
86296: PUSH
86297: LD_EXP 132
86301: AND
86302: IFFALSE 86365
86304: GO 86306
86306: DISABLE
86307: LD_INT 0
86309: PPUSH
// begin p := 0 ;
86310: LD_ADDR_VAR 0 1
86314: PUSH
86315: LD_INT 0
86317: ST_TO_ADDR
// repeat game_speed := 1 ;
86318: LD_ADDR_OWVAR 65
86322: PUSH
86323: LD_INT 1
86325: ST_TO_ADDR
// wait ( 0 0$1 ) ;
86326: LD_INT 35
86328: PPUSH
86329: CALL_OW 67
// p := p + 1 ;
86333: LD_ADDR_VAR 0 1
86337: PUSH
86338: LD_VAR 0 1
86342: PUSH
86343: LD_INT 1
86345: PLUS
86346: ST_TO_ADDR
// until p >= 60 ;
86347: LD_VAR 0 1
86351: PUSH
86352: LD_INT 60
86354: GREATEREQUAL
86355: IFFALSE 86318
// game_speed := 4 ;
86357: LD_ADDR_OWVAR 65
86361: PUSH
86362: LD_INT 4
86364: ST_TO_ADDR
// end ;
86365: PPOPN 1
86367: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
86368: LD_EXP 106
86372: PUSH
86373: LD_EXP 133
86377: AND
86378: IFFALSE 86524
86380: GO 86382
86382: DISABLE
86383: LD_INT 0
86385: PPUSH
86386: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
86387: LD_ADDR_VAR 0 1
86391: PUSH
86392: LD_INT 22
86394: PUSH
86395: LD_OWVAR 2
86399: PUSH
86400: EMPTY
86401: LIST
86402: LIST
86403: PUSH
86404: LD_INT 2
86406: PUSH
86407: LD_INT 30
86409: PUSH
86410: LD_INT 0
86412: PUSH
86413: EMPTY
86414: LIST
86415: LIST
86416: PUSH
86417: LD_INT 30
86419: PUSH
86420: LD_INT 1
86422: PUSH
86423: EMPTY
86424: LIST
86425: LIST
86426: PUSH
86427: EMPTY
86428: LIST
86429: LIST
86430: LIST
86431: PUSH
86432: EMPTY
86433: LIST
86434: LIST
86435: PPUSH
86436: CALL_OW 69
86440: ST_TO_ADDR
// if not depot then
86441: LD_VAR 0 1
86445: NOT
86446: IFFALSE 86450
// exit ;
86448: GO 86524
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
86450: LD_ADDR_VAR 0 2
86454: PUSH
86455: LD_VAR 0 1
86459: PUSH
86460: LD_INT 1
86462: PPUSH
86463: LD_VAR 0 1
86467: PPUSH
86468: CALL_OW 12
86472: ARRAY
86473: PPUSH
86474: CALL_OW 274
86478: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
86479: LD_VAR 0 2
86483: PPUSH
86484: LD_INT 1
86486: PPUSH
86487: LD_INT 0
86489: PPUSH
86490: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
86494: LD_VAR 0 2
86498: PPUSH
86499: LD_INT 2
86501: PPUSH
86502: LD_INT 0
86504: PPUSH
86505: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
86509: LD_VAR 0 2
86513: PPUSH
86514: LD_INT 3
86516: PPUSH
86517: LD_INT 0
86519: PPUSH
86520: CALL_OW 277
// end ;
86524: PPOPN 2
86526: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
86527: LD_EXP 106
86531: PUSH
86532: LD_EXP 134
86536: AND
86537: IFFALSE 86634
86539: GO 86541
86541: DISABLE
86542: LD_INT 0
86544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
86545: LD_ADDR_VAR 0 1
86549: PUSH
86550: LD_INT 22
86552: PUSH
86553: LD_OWVAR 2
86557: PUSH
86558: EMPTY
86559: LIST
86560: LIST
86561: PUSH
86562: LD_INT 21
86564: PUSH
86565: LD_INT 1
86567: PUSH
86568: EMPTY
86569: LIST
86570: LIST
86571: PUSH
86572: LD_INT 3
86574: PUSH
86575: LD_INT 23
86577: PUSH
86578: LD_INT 0
86580: PUSH
86581: EMPTY
86582: LIST
86583: LIST
86584: PUSH
86585: EMPTY
86586: LIST
86587: LIST
86588: PUSH
86589: EMPTY
86590: LIST
86591: LIST
86592: LIST
86593: PPUSH
86594: CALL_OW 69
86598: ST_TO_ADDR
// if not tmp then
86599: LD_VAR 0 1
86603: NOT
86604: IFFALSE 86608
// exit ;
86606: GO 86634
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
86608: LD_VAR 0 1
86612: PUSH
86613: LD_INT 1
86615: PPUSH
86616: LD_VAR 0 1
86620: PPUSH
86621: CALL_OW 12
86625: ARRAY
86626: PPUSH
86627: LD_INT 200
86629: PPUSH
86630: CALL_OW 234
// end ;
86634: PPOPN 1
86636: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
86637: LD_EXP 106
86641: PUSH
86642: LD_EXP 135
86646: AND
86647: IFFALSE 86726
86649: GO 86651
86651: DISABLE
86652: LD_INT 0
86654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
86655: LD_ADDR_VAR 0 1
86659: PUSH
86660: LD_INT 22
86662: PUSH
86663: LD_OWVAR 2
86667: PUSH
86668: EMPTY
86669: LIST
86670: LIST
86671: PUSH
86672: LD_INT 21
86674: PUSH
86675: LD_INT 2
86677: PUSH
86678: EMPTY
86679: LIST
86680: LIST
86681: PUSH
86682: EMPTY
86683: LIST
86684: LIST
86685: PPUSH
86686: CALL_OW 69
86690: ST_TO_ADDR
// if not tmp then
86691: LD_VAR 0 1
86695: NOT
86696: IFFALSE 86700
// exit ;
86698: GO 86726
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
86700: LD_VAR 0 1
86704: PUSH
86705: LD_INT 1
86707: PPUSH
86708: LD_VAR 0 1
86712: PPUSH
86713: CALL_OW 12
86717: ARRAY
86718: PPUSH
86719: LD_INT 60
86721: PPUSH
86722: CALL_OW 234
// end ;
86726: PPOPN 1
86728: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
86729: LD_EXP 106
86733: PUSH
86734: LD_EXP 136
86738: AND
86739: IFFALSE 86838
86741: GO 86743
86743: DISABLE
86744: LD_INT 0
86746: PPUSH
86747: PPUSH
// begin enable ;
86748: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
86749: LD_ADDR_VAR 0 1
86753: PUSH
86754: LD_INT 22
86756: PUSH
86757: LD_OWVAR 2
86761: PUSH
86762: EMPTY
86763: LIST
86764: LIST
86765: PUSH
86766: LD_INT 61
86768: PUSH
86769: EMPTY
86770: LIST
86771: PUSH
86772: LD_INT 33
86774: PUSH
86775: LD_INT 2
86777: PUSH
86778: EMPTY
86779: LIST
86780: LIST
86781: PUSH
86782: EMPTY
86783: LIST
86784: LIST
86785: LIST
86786: PPUSH
86787: CALL_OW 69
86791: ST_TO_ADDR
// if not tmp then
86792: LD_VAR 0 1
86796: NOT
86797: IFFALSE 86801
// exit ;
86799: GO 86838
// for i in tmp do
86801: LD_ADDR_VAR 0 2
86805: PUSH
86806: LD_VAR 0 1
86810: PUSH
86811: FOR_IN
86812: IFFALSE 86836
// if IsControledBy ( i ) then
86814: LD_VAR 0 2
86818: PPUSH
86819: CALL_OW 312
86823: IFFALSE 86834
// ComUnlink ( i ) ;
86825: LD_VAR 0 2
86829: PPUSH
86830: CALL_OW 136
86834: GO 86811
86836: POP
86837: POP
// end ;
86838: PPOPN 2
86840: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
86841: LD_EXP 106
86845: PUSH
86846: LD_EXP 137
86850: AND
86851: IFFALSE 86991
86853: GO 86855
86855: DISABLE
86856: LD_INT 0
86858: PPUSH
86859: PPUSH
// begin ToLua ( displayPowell(); ) ;
86860: LD_STRING displayPowell();
86862: PPUSH
86863: CALL_OW 559
// uc_side := 0 ;
86867: LD_ADDR_OWVAR 20
86871: PUSH
86872: LD_INT 0
86874: ST_TO_ADDR
// uc_nation := 2 ;
86875: LD_ADDR_OWVAR 21
86879: PUSH
86880: LD_INT 2
86882: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
86883: LD_ADDR_OWVAR 37
86887: PUSH
86888: LD_INT 14
86890: ST_TO_ADDR
// vc_engine := engine_siberite ;
86891: LD_ADDR_OWVAR 39
86895: PUSH
86896: LD_INT 3
86898: ST_TO_ADDR
// vc_control := control_apeman ;
86899: LD_ADDR_OWVAR 38
86903: PUSH
86904: LD_INT 5
86906: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
86907: LD_ADDR_OWVAR 40
86911: PUSH
86912: LD_INT 29
86914: ST_TO_ADDR
// un := CreateVehicle ;
86915: LD_ADDR_VAR 0 2
86919: PUSH
86920: CALL_OW 45
86924: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
86925: LD_VAR 0 2
86929: PPUSH
86930: LD_INT 1
86932: PPUSH
86933: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
86937: LD_INT 35
86939: PPUSH
86940: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
86944: LD_VAR 0 2
86948: PPUSH
86949: LD_INT 22
86951: PUSH
86952: LD_OWVAR 2
86956: PUSH
86957: EMPTY
86958: LIST
86959: LIST
86960: PPUSH
86961: CALL_OW 69
86965: PPUSH
86966: LD_VAR 0 2
86970: PPUSH
86971: CALL_OW 74
86975: PPUSH
86976: CALL_OW 115
// until IsDead ( un ) ;
86980: LD_VAR 0 2
86984: PPUSH
86985: CALL_OW 301
86989: IFFALSE 86937
// end ;
86991: PPOPN 2
86993: END
// every 0 0$1 trigger StreamModeActive and sStu do
86994: LD_EXP 106
86998: PUSH
86999: LD_EXP 145
87003: AND
87004: IFFALSE 87020
87006: GO 87008
87008: DISABLE
// begin ToLua ( displayStucuk(); ) ;
87009: LD_STRING displayStucuk();
87011: PPUSH
87012: CALL_OW 559
// ResetFog ;
87016: CALL_OW 335
// end ;
87020: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
87021: LD_EXP 106
87025: PUSH
87026: LD_EXP 138
87030: AND
87031: IFFALSE 87172
87033: GO 87035
87035: DISABLE
87036: LD_INT 0
87038: PPUSH
87039: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
87040: LD_ADDR_VAR 0 2
87044: PUSH
87045: LD_INT 22
87047: PUSH
87048: LD_OWVAR 2
87052: PUSH
87053: EMPTY
87054: LIST
87055: LIST
87056: PUSH
87057: LD_INT 21
87059: PUSH
87060: LD_INT 1
87062: PUSH
87063: EMPTY
87064: LIST
87065: LIST
87066: PUSH
87067: EMPTY
87068: LIST
87069: LIST
87070: PPUSH
87071: CALL_OW 69
87075: ST_TO_ADDR
// if not tmp then
87076: LD_VAR 0 2
87080: NOT
87081: IFFALSE 87085
// exit ;
87083: GO 87172
// un := tmp [ rand ( 1 , tmp ) ] ;
87085: LD_ADDR_VAR 0 1
87089: PUSH
87090: LD_VAR 0 2
87094: PUSH
87095: LD_INT 1
87097: PPUSH
87098: LD_VAR 0 2
87102: PPUSH
87103: CALL_OW 12
87107: ARRAY
87108: ST_TO_ADDR
// SetSide ( un , 0 ) ;
87109: LD_VAR 0 1
87113: PPUSH
87114: LD_INT 0
87116: PPUSH
87117: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
87121: LD_VAR 0 1
87125: PPUSH
87126: LD_OWVAR 3
87130: PUSH
87131: LD_VAR 0 1
87135: DIFF
87136: PPUSH
87137: LD_VAR 0 1
87141: PPUSH
87142: CALL_OW 74
87146: PPUSH
87147: CALL_OW 115
// wait ( 0 0$20 ) ;
87151: LD_INT 700
87153: PPUSH
87154: CALL_OW 67
// SetSide ( un , your_side ) ;
87158: LD_VAR 0 1
87162: PPUSH
87163: LD_OWVAR 2
87167: PPUSH
87168: CALL_OW 235
// end ;
87172: PPOPN 2
87174: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
87175: LD_EXP 106
87179: PUSH
87180: LD_EXP 139
87184: AND
87185: IFFALSE 87291
87187: GO 87189
87189: DISABLE
87190: LD_INT 0
87192: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
87193: LD_ADDR_VAR 0 1
87197: PUSH
87198: LD_INT 22
87200: PUSH
87201: LD_OWVAR 2
87205: PUSH
87206: EMPTY
87207: LIST
87208: LIST
87209: PUSH
87210: LD_INT 2
87212: PUSH
87213: LD_INT 30
87215: PUSH
87216: LD_INT 0
87218: PUSH
87219: EMPTY
87220: LIST
87221: LIST
87222: PUSH
87223: LD_INT 30
87225: PUSH
87226: LD_INT 1
87228: PUSH
87229: EMPTY
87230: LIST
87231: LIST
87232: PUSH
87233: EMPTY
87234: LIST
87235: LIST
87236: LIST
87237: PUSH
87238: EMPTY
87239: LIST
87240: LIST
87241: PPUSH
87242: CALL_OW 69
87246: ST_TO_ADDR
// if not depot then
87247: LD_VAR 0 1
87251: NOT
87252: IFFALSE 87256
// exit ;
87254: GO 87291
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
87256: LD_VAR 0 1
87260: PUSH
87261: LD_INT 1
87263: ARRAY
87264: PPUSH
87265: CALL_OW 250
87269: PPUSH
87270: LD_VAR 0 1
87274: PUSH
87275: LD_INT 1
87277: ARRAY
87278: PPUSH
87279: CALL_OW 251
87283: PPUSH
87284: LD_INT 70
87286: PPUSH
87287: CALL_OW 495
// end ;
87291: PPOPN 1
87293: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
87294: LD_EXP 106
87298: PUSH
87299: LD_EXP 140
87303: AND
87304: IFFALSE 87515
87306: GO 87308
87308: DISABLE
87309: LD_INT 0
87311: PPUSH
87312: PPUSH
87313: PPUSH
87314: PPUSH
87315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
87316: LD_ADDR_VAR 0 5
87320: PUSH
87321: LD_INT 22
87323: PUSH
87324: LD_OWVAR 2
87328: PUSH
87329: EMPTY
87330: LIST
87331: LIST
87332: PUSH
87333: LD_INT 21
87335: PUSH
87336: LD_INT 1
87338: PUSH
87339: EMPTY
87340: LIST
87341: LIST
87342: PUSH
87343: EMPTY
87344: LIST
87345: LIST
87346: PPUSH
87347: CALL_OW 69
87351: ST_TO_ADDR
// if not tmp then
87352: LD_VAR 0 5
87356: NOT
87357: IFFALSE 87361
// exit ;
87359: GO 87515
// for i in tmp do
87361: LD_ADDR_VAR 0 1
87365: PUSH
87366: LD_VAR 0 5
87370: PUSH
87371: FOR_IN
87372: IFFALSE 87513
// begin d := rand ( 0 , 5 ) ;
87374: LD_ADDR_VAR 0 4
87378: PUSH
87379: LD_INT 0
87381: PPUSH
87382: LD_INT 5
87384: PPUSH
87385: CALL_OW 12
87389: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
87390: LD_ADDR_VAR 0 2
87394: PUSH
87395: LD_VAR 0 1
87399: PPUSH
87400: CALL_OW 250
87404: PPUSH
87405: LD_VAR 0 4
87409: PPUSH
87410: LD_INT 3
87412: PPUSH
87413: LD_INT 12
87415: PPUSH
87416: CALL_OW 12
87420: PPUSH
87421: CALL_OW 272
87425: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
87426: LD_ADDR_VAR 0 3
87430: PUSH
87431: LD_VAR 0 1
87435: PPUSH
87436: CALL_OW 251
87440: PPUSH
87441: LD_VAR 0 4
87445: PPUSH
87446: LD_INT 3
87448: PPUSH
87449: LD_INT 12
87451: PPUSH
87452: CALL_OW 12
87456: PPUSH
87457: CALL_OW 273
87461: ST_TO_ADDR
// if ValidHex ( x , y ) then
87462: LD_VAR 0 2
87466: PPUSH
87467: LD_VAR 0 3
87471: PPUSH
87472: CALL_OW 488
87476: IFFALSE 87511
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
87478: LD_VAR 0 1
87482: PPUSH
87483: LD_VAR 0 2
87487: PPUSH
87488: LD_VAR 0 3
87492: PPUSH
87493: LD_INT 3
87495: PPUSH
87496: LD_INT 6
87498: PPUSH
87499: CALL_OW 12
87503: PPUSH
87504: LD_INT 1
87506: PPUSH
87507: CALL_OW 483
// end ;
87511: GO 87371
87513: POP
87514: POP
// end ;
87515: PPOPN 5
87517: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
87518: LD_EXP 106
87522: PUSH
87523: LD_EXP 141
87527: AND
87528: IFFALSE 87622
87530: GO 87532
87532: DISABLE
87533: LD_INT 0
87535: PPUSH
87536: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
87537: LD_ADDR_VAR 0 2
87541: PUSH
87542: LD_INT 22
87544: PUSH
87545: LD_OWVAR 2
87549: PUSH
87550: EMPTY
87551: LIST
87552: LIST
87553: PUSH
87554: LD_INT 32
87556: PUSH
87557: LD_INT 1
87559: PUSH
87560: EMPTY
87561: LIST
87562: LIST
87563: PUSH
87564: LD_INT 21
87566: PUSH
87567: LD_INT 2
87569: PUSH
87570: EMPTY
87571: LIST
87572: LIST
87573: PUSH
87574: EMPTY
87575: LIST
87576: LIST
87577: LIST
87578: PPUSH
87579: CALL_OW 69
87583: ST_TO_ADDR
// if not tmp then
87584: LD_VAR 0 2
87588: NOT
87589: IFFALSE 87593
// exit ;
87591: GO 87622
// for i in tmp do
87593: LD_ADDR_VAR 0 1
87597: PUSH
87598: LD_VAR 0 2
87602: PUSH
87603: FOR_IN
87604: IFFALSE 87620
// SetFuel ( i , 0 ) ;
87606: LD_VAR 0 1
87610: PPUSH
87611: LD_INT 0
87613: PPUSH
87614: CALL_OW 240
87618: GO 87603
87620: POP
87621: POP
// end ;
87622: PPOPN 2
87624: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
87625: LD_EXP 106
87629: PUSH
87630: LD_EXP 142
87634: AND
87635: IFFALSE 87701
87637: GO 87639
87639: DISABLE
87640: LD_INT 0
87642: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
87643: LD_ADDR_VAR 0 1
87647: PUSH
87648: LD_INT 22
87650: PUSH
87651: LD_OWVAR 2
87655: PUSH
87656: EMPTY
87657: LIST
87658: LIST
87659: PUSH
87660: LD_INT 30
87662: PUSH
87663: LD_INT 29
87665: PUSH
87666: EMPTY
87667: LIST
87668: LIST
87669: PUSH
87670: EMPTY
87671: LIST
87672: LIST
87673: PPUSH
87674: CALL_OW 69
87678: ST_TO_ADDR
// if not tmp then
87679: LD_VAR 0 1
87683: NOT
87684: IFFALSE 87688
// exit ;
87686: GO 87701
// DestroyUnit ( tmp [ 1 ] ) ;
87688: LD_VAR 0 1
87692: PUSH
87693: LD_INT 1
87695: ARRAY
87696: PPUSH
87697: CALL_OW 65
// end ;
87701: PPOPN 1
87703: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
87704: LD_EXP 106
87708: PUSH
87709: LD_EXP 144
87713: AND
87714: IFFALSE 87843
87716: GO 87718
87718: DISABLE
87719: LD_INT 0
87721: PPUSH
// begin uc_side := 0 ;
87722: LD_ADDR_OWVAR 20
87726: PUSH
87727: LD_INT 0
87729: ST_TO_ADDR
// uc_nation := nation_arabian ;
87730: LD_ADDR_OWVAR 21
87734: PUSH
87735: LD_INT 2
87737: ST_TO_ADDR
// hc_gallery :=  ;
87738: LD_ADDR_OWVAR 33
87742: PUSH
87743: LD_STRING 
87745: ST_TO_ADDR
// hc_name :=  ;
87746: LD_ADDR_OWVAR 26
87750: PUSH
87751: LD_STRING 
87753: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
87754: LD_INT 1
87756: PPUSH
87757: LD_INT 11
87759: PPUSH
87760: LD_INT 10
87762: PPUSH
87763: CALL_OW 380
// un := CreateHuman ;
87767: LD_ADDR_VAR 0 1
87771: PUSH
87772: CALL_OW 44
87776: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
87777: LD_VAR 0 1
87781: PPUSH
87782: LD_INT 1
87784: PPUSH
87785: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
87789: LD_INT 35
87791: PPUSH
87792: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
87796: LD_VAR 0 1
87800: PPUSH
87801: LD_INT 22
87803: PUSH
87804: LD_OWVAR 2
87808: PUSH
87809: EMPTY
87810: LIST
87811: LIST
87812: PPUSH
87813: CALL_OW 69
87817: PPUSH
87818: LD_VAR 0 1
87822: PPUSH
87823: CALL_OW 74
87827: PPUSH
87828: CALL_OW 115
// until IsDead ( un ) ;
87832: LD_VAR 0 1
87836: PPUSH
87837: CALL_OW 301
87841: IFFALSE 87789
// end ;
87843: PPOPN 1
87845: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
87846: LD_EXP 106
87850: PUSH
87851: LD_EXP 146
87855: AND
87856: IFFALSE 87868
87858: GO 87860
87860: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
87861: LD_STRING earthquake(getX(game), 0, 32)
87863: PPUSH
87864: CALL_OW 559
87868: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
87869: LD_EXP 106
87873: PUSH
87874: LD_EXP 147
87878: AND
87879: IFFALSE 87970
87881: GO 87883
87883: DISABLE
87884: LD_INT 0
87886: PPUSH
// begin enable ;
87887: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
87888: LD_ADDR_VAR 0 1
87892: PUSH
87893: LD_INT 22
87895: PUSH
87896: LD_OWVAR 2
87900: PUSH
87901: EMPTY
87902: LIST
87903: LIST
87904: PUSH
87905: LD_INT 21
87907: PUSH
87908: LD_INT 2
87910: PUSH
87911: EMPTY
87912: LIST
87913: LIST
87914: PUSH
87915: LD_INT 33
87917: PUSH
87918: LD_INT 3
87920: PUSH
87921: EMPTY
87922: LIST
87923: LIST
87924: PUSH
87925: EMPTY
87926: LIST
87927: LIST
87928: LIST
87929: PPUSH
87930: CALL_OW 69
87934: ST_TO_ADDR
// if not tmp then
87935: LD_VAR 0 1
87939: NOT
87940: IFFALSE 87944
// exit ;
87942: GO 87970
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
87944: LD_VAR 0 1
87948: PUSH
87949: LD_INT 1
87951: PPUSH
87952: LD_VAR 0 1
87956: PPUSH
87957: CALL_OW 12
87961: ARRAY
87962: PPUSH
87963: LD_INT 1
87965: PPUSH
87966: CALL_OW 234
// end ;
87970: PPOPN 1
87972: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
87973: LD_EXP 106
87977: PUSH
87978: LD_EXP 148
87982: AND
87983: IFFALSE 88124
87985: GO 87987
87987: DISABLE
87988: LD_INT 0
87990: PPUSH
87991: PPUSH
87992: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
87993: LD_ADDR_VAR 0 3
87997: PUSH
87998: LD_INT 22
88000: PUSH
88001: LD_OWVAR 2
88005: PUSH
88006: EMPTY
88007: LIST
88008: LIST
88009: PUSH
88010: LD_INT 25
88012: PUSH
88013: LD_INT 1
88015: PUSH
88016: EMPTY
88017: LIST
88018: LIST
88019: PUSH
88020: EMPTY
88021: LIST
88022: LIST
88023: PPUSH
88024: CALL_OW 69
88028: ST_TO_ADDR
// if not tmp then
88029: LD_VAR 0 3
88033: NOT
88034: IFFALSE 88038
// exit ;
88036: GO 88124
// un := tmp [ rand ( 1 , tmp ) ] ;
88038: LD_ADDR_VAR 0 2
88042: PUSH
88043: LD_VAR 0 3
88047: PUSH
88048: LD_INT 1
88050: PPUSH
88051: LD_VAR 0 3
88055: PPUSH
88056: CALL_OW 12
88060: ARRAY
88061: ST_TO_ADDR
// if Crawls ( un ) then
88062: LD_VAR 0 2
88066: PPUSH
88067: CALL_OW 318
88071: IFFALSE 88082
// ComWalk ( un ) ;
88073: LD_VAR 0 2
88077: PPUSH
88078: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
88082: LD_VAR 0 2
88086: PPUSH
88087: LD_INT 9
88089: PPUSH
88090: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
88094: LD_INT 28
88096: PPUSH
88097: LD_OWVAR 2
88101: PPUSH
88102: LD_INT 2
88104: PPUSH
88105: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
88109: LD_INT 29
88111: PPUSH
88112: LD_OWVAR 2
88116: PPUSH
88117: LD_INT 2
88119: PPUSH
88120: CALL_OW 322
// end ;
88124: PPOPN 3
88126: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
88127: LD_EXP 106
88131: PUSH
88132: LD_EXP 149
88136: AND
88137: IFFALSE 88248
88139: GO 88141
88141: DISABLE
88142: LD_INT 0
88144: PPUSH
88145: PPUSH
88146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
88147: LD_ADDR_VAR 0 3
88151: PUSH
88152: LD_INT 22
88154: PUSH
88155: LD_OWVAR 2
88159: PUSH
88160: EMPTY
88161: LIST
88162: LIST
88163: PUSH
88164: LD_INT 25
88166: PUSH
88167: LD_INT 1
88169: PUSH
88170: EMPTY
88171: LIST
88172: LIST
88173: PUSH
88174: EMPTY
88175: LIST
88176: LIST
88177: PPUSH
88178: CALL_OW 69
88182: ST_TO_ADDR
// if not tmp then
88183: LD_VAR 0 3
88187: NOT
88188: IFFALSE 88192
// exit ;
88190: GO 88248
// un := tmp [ rand ( 1 , tmp ) ] ;
88192: LD_ADDR_VAR 0 2
88196: PUSH
88197: LD_VAR 0 3
88201: PUSH
88202: LD_INT 1
88204: PPUSH
88205: LD_VAR 0 3
88209: PPUSH
88210: CALL_OW 12
88214: ARRAY
88215: ST_TO_ADDR
// if Crawls ( un ) then
88216: LD_VAR 0 2
88220: PPUSH
88221: CALL_OW 318
88225: IFFALSE 88236
// ComWalk ( un ) ;
88227: LD_VAR 0 2
88231: PPUSH
88232: CALL_OW 138
// SetClass ( un , class_mortar ) ;
88236: LD_VAR 0 2
88240: PPUSH
88241: LD_INT 8
88243: PPUSH
88244: CALL_OW 336
// end ;
88248: PPOPN 3
88250: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
88251: LD_EXP 106
88255: PUSH
88256: LD_EXP 150
88260: AND
88261: IFFALSE 88405
88263: GO 88265
88265: DISABLE
88266: LD_INT 0
88268: PPUSH
88269: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
88270: LD_ADDR_VAR 0 2
88274: PUSH
88275: LD_INT 22
88277: PUSH
88278: LD_OWVAR 2
88282: PUSH
88283: EMPTY
88284: LIST
88285: LIST
88286: PUSH
88287: LD_INT 21
88289: PUSH
88290: LD_INT 2
88292: PUSH
88293: EMPTY
88294: LIST
88295: LIST
88296: PUSH
88297: LD_INT 2
88299: PUSH
88300: LD_INT 34
88302: PUSH
88303: LD_INT 12
88305: PUSH
88306: EMPTY
88307: LIST
88308: LIST
88309: PUSH
88310: LD_INT 34
88312: PUSH
88313: LD_INT 51
88315: PUSH
88316: EMPTY
88317: LIST
88318: LIST
88319: PUSH
88320: LD_INT 34
88322: PUSH
88323: LD_INT 32
88325: PUSH
88326: EMPTY
88327: LIST
88328: LIST
88329: PUSH
88330: EMPTY
88331: LIST
88332: LIST
88333: LIST
88334: LIST
88335: PUSH
88336: EMPTY
88337: LIST
88338: LIST
88339: LIST
88340: PPUSH
88341: CALL_OW 69
88345: ST_TO_ADDR
// if not tmp then
88346: LD_VAR 0 2
88350: NOT
88351: IFFALSE 88355
// exit ;
88353: GO 88405
// for i in tmp do
88355: LD_ADDR_VAR 0 1
88359: PUSH
88360: LD_VAR 0 2
88364: PUSH
88365: FOR_IN
88366: IFFALSE 88403
// if GetCargo ( i , mat_artifact ) = 0 then
88368: LD_VAR 0 1
88372: PPUSH
88373: LD_INT 4
88375: PPUSH
88376: CALL_OW 289
88380: PUSH
88381: LD_INT 0
88383: EQUAL
88384: IFFALSE 88401
// SetCargo ( i , mat_siberit , 100 ) ;
88386: LD_VAR 0 1
88390: PPUSH
88391: LD_INT 3
88393: PPUSH
88394: LD_INT 100
88396: PPUSH
88397: CALL_OW 290
88401: GO 88365
88403: POP
88404: POP
// end ;
88405: PPOPN 2
88407: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
88408: LD_EXP 106
88412: PUSH
88413: LD_EXP 151
88417: AND
88418: IFFALSE 88601
88420: GO 88422
88422: DISABLE
88423: LD_INT 0
88425: PPUSH
88426: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
88427: LD_ADDR_VAR 0 2
88431: PUSH
88432: LD_INT 22
88434: PUSH
88435: LD_OWVAR 2
88439: PUSH
88440: EMPTY
88441: LIST
88442: LIST
88443: PPUSH
88444: CALL_OW 69
88448: ST_TO_ADDR
// if not tmp then
88449: LD_VAR 0 2
88453: NOT
88454: IFFALSE 88458
// exit ;
88456: GO 88601
// for i := 1 to 2 do
88458: LD_ADDR_VAR 0 1
88462: PUSH
88463: DOUBLE
88464: LD_INT 1
88466: DEC
88467: ST_TO_ADDR
88468: LD_INT 2
88470: PUSH
88471: FOR_TO
88472: IFFALSE 88599
// begin uc_side := your_side ;
88474: LD_ADDR_OWVAR 20
88478: PUSH
88479: LD_OWVAR 2
88483: ST_TO_ADDR
// uc_nation := nation_american ;
88484: LD_ADDR_OWVAR 21
88488: PUSH
88489: LD_INT 1
88491: ST_TO_ADDR
// vc_chassis := us_morphling ;
88492: LD_ADDR_OWVAR 37
88496: PUSH
88497: LD_INT 5
88499: ST_TO_ADDR
// vc_engine := engine_siberite ;
88500: LD_ADDR_OWVAR 39
88504: PUSH
88505: LD_INT 3
88507: ST_TO_ADDR
// vc_control := control_computer ;
88508: LD_ADDR_OWVAR 38
88512: PUSH
88513: LD_INT 3
88515: ST_TO_ADDR
// vc_weapon := us_double_laser ;
88516: LD_ADDR_OWVAR 40
88520: PUSH
88521: LD_INT 10
88523: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
88524: LD_VAR 0 2
88528: PUSH
88529: LD_INT 1
88531: ARRAY
88532: PPUSH
88533: CALL_OW 310
88537: NOT
88538: IFFALSE 88585
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
88540: CALL_OW 45
88544: PPUSH
88545: LD_VAR 0 2
88549: PUSH
88550: LD_INT 1
88552: ARRAY
88553: PPUSH
88554: CALL_OW 250
88558: PPUSH
88559: LD_VAR 0 2
88563: PUSH
88564: LD_INT 1
88566: ARRAY
88567: PPUSH
88568: CALL_OW 251
88572: PPUSH
88573: LD_INT 12
88575: PPUSH
88576: LD_INT 1
88578: PPUSH
88579: CALL_OW 50
88583: GO 88597
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
88585: CALL_OW 45
88589: PPUSH
88590: LD_INT 1
88592: PPUSH
88593: CALL_OW 51
// end ;
88597: GO 88471
88599: POP
88600: POP
// end ;
88601: PPOPN 2
88603: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
88604: LD_EXP 106
88608: PUSH
88609: LD_EXP 152
88613: AND
88614: IFFALSE 88836
88616: GO 88618
88618: DISABLE
88619: LD_INT 0
88621: PPUSH
88622: PPUSH
88623: PPUSH
88624: PPUSH
88625: PPUSH
88626: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
88627: LD_ADDR_VAR 0 6
88631: PUSH
88632: LD_INT 22
88634: PUSH
88635: LD_OWVAR 2
88639: PUSH
88640: EMPTY
88641: LIST
88642: LIST
88643: PUSH
88644: LD_INT 21
88646: PUSH
88647: LD_INT 1
88649: PUSH
88650: EMPTY
88651: LIST
88652: LIST
88653: PUSH
88654: LD_INT 3
88656: PUSH
88657: LD_INT 23
88659: PUSH
88660: LD_INT 0
88662: PUSH
88663: EMPTY
88664: LIST
88665: LIST
88666: PUSH
88667: EMPTY
88668: LIST
88669: LIST
88670: PUSH
88671: EMPTY
88672: LIST
88673: LIST
88674: LIST
88675: PPUSH
88676: CALL_OW 69
88680: ST_TO_ADDR
// if not tmp then
88681: LD_VAR 0 6
88685: NOT
88686: IFFALSE 88690
// exit ;
88688: GO 88836
// s1 := rand ( 1 , 4 ) ;
88690: LD_ADDR_VAR 0 2
88694: PUSH
88695: LD_INT 1
88697: PPUSH
88698: LD_INT 4
88700: PPUSH
88701: CALL_OW 12
88705: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
88706: LD_ADDR_VAR 0 4
88710: PUSH
88711: LD_VAR 0 6
88715: PUSH
88716: LD_INT 1
88718: ARRAY
88719: PPUSH
88720: LD_VAR 0 2
88724: PPUSH
88725: CALL_OW 259
88729: ST_TO_ADDR
// if s1 = 1 then
88730: LD_VAR 0 2
88734: PUSH
88735: LD_INT 1
88737: EQUAL
88738: IFFALSE 88758
// s2 := rand ( 2 , 4 ) else
88740: LD_ADDR_VAR 0 3
88744: PUSH
88745: LD_INT 2
88747: PPUSH
88748: LD_INT 4
88750: PPUSH
88751: CALL_OW 12
88755: ST_TO_ADDR
88756: GO 88766
// s2 := 1 ;
88758: LD_ADDR_VAR 0 3
88762: PUSH
88763: LD_INT 1
88765: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
88766: LD_ADDR_VAR 0 5
88770: PUSH
88771: LD_VAR 0 6
88775: PUSH
88776: LD_INT 1
88778: ARRAY
88779: PPUSH
88780: LD_VAR 0 3
88784: PPUSH
88785: CALL_OW 259
88789: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
88790: LD_VAR 0 6
88794: PUSH
88795: LD_INT 1
88797: ARRAY
88798: PPUSH
88799: LD_VAR 0 2
88803: PPUSH
88804: LD_VAR 0 5
88808: PPUSH
88809: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
88813: LD_VAR 0 6
88817: PUSH
88818: LD_INT 1
88820: ARRAY
88821: PPUSH
88822: LD_VAR 0 3
88826: PPUSH
88827: LD_VAR 0 4
88831: PPUSH
88832: CALL_OW 237
// end ;
88836: PPOPN 6
88838: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
88839: LD_EXP 106
88843: PUSH
88844: LD_EXP 153
88848: AND
88849: IFFALSE 88928
88851: GO 88853
88853: DISABLE
88854: LD_INT 0
88856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
88857: LD_ADDR_VAR 0 1
88861: PUSH
88862: LD_INT 22
88864: PUSH
88865: LD_OWVAR 2
88869: PUSH
88870: EMPTY
88871: LIST
88872: LIST
88873: PUSH
88874: LD_INT 30
88876: PUSH
88877: LD_INT 3
88879: PUSH
88880: EMPTY
88881: LIST
88882: LIST
88883: PUSH
88884: EMPTY
88885: LIST
88886: LIST
88887: PPUSH
88888: CALL_OW 69
88892: ST_TO_ADDR
// if not tmp then
88893: LD_VAR 0 1
88897: NOT
88898: IFFALSE 88902
// exit ;
88900: GO 88928
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
88902: LD_VAR 0 1
88906: PUSH
88907: LD_INT 1
88909: PPUSH
88910: LD_VAR 0 1
88914: PPUSH
88915: CALL_OW 12
88919: ARRAY
88920: PPUSH
88921: LD_INT 1
88923: PPUSH
88924: CALL_OW 234
// end ;
88928: PPOPN 1
88930: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
88931: LD_EXP 106
88935: PUSH
88936: LD_EXP 154
88940: AND
88941: IFFALSE 89053
88943: GO 88945
88945: DISABLE
88946: LD_INT 0
88948: PPUSH
88949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
88950: LD_ADDR_VAR 0 2
88954: PUSH
88955: LD_INT 22
88957: PUSH
88958: LD_OWVAR 2
88962: PUSH
88963: EMPTY
88964: LIST
88965: LIST
88966: PUSH
88967: LD_INT 2
88969: PUSH
88970: LD_INT 30
88972: PUSH
88973: LD_INT 27
88975: PUSH
88976: EMPTY
88977: LIST
88978: LIST
88979: PUSH
88980: LD_INT 30
88982: PUSH
88983: LD_INT 26
88985: PUSH
88986: EMPTY
88987: LIST
88988: LIST
88989: PUSH
88990: LD_INT 30
88992: PUSH
88993: LD_INT 28
88995: PUSH
88996: EMPTY
88997: LIST
88998: LIST
88999: PUSH
89000: EMPTY
89001: LIST
89002: LIST
89003: LIST
89004: LIST
89005: PUSH
89006: EMPTY
89007: LIST
89008: LIST
89009: PPUSH
89010: CALL_OW 69
89014: ST_TO_ADDR
// if not tmp then
89015: LD_VAR 0 2
89019: NOT
89020: IFFALSE 89024
// exit ;
89022: GO 89053
// for i in tmp do
89024: LD_ADDR_VAR 0 1
89028: PUSH
89029: LD_VAR 0 2
89033: PUSH
89034: FOR_IN
89035: IFFALSE 89051
// SetLives ( i , 1 ) ;
89037: LD_VAR 0 1
89041: PPUSH
89042: LD_INT 1
89044: PPUSH
89045: CALL_OW 234
89049: GO 89034
89051: POP
89052: POP
// end ;
89053: PPOPN 2
89055: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
89056: LD_EXP 106
89060: PUSH
89061: LD_EXP 155
89065: AND
89066: IFFALSE 89340
89068: GO 89070
89070: DISABLE
89071: LD_INT 0
89073: PPUSH
89074: PPUSH
89075: PPUSH
// begin i := rand ( 1 , 7 ) ;
89076: LD_ADDR_VAR 0 1
89080: PUSH
89081: LD_INT 1
89083: PPUSH
89084: LD_INT 7
89086: PPUSH
89087: CALL_OW 12
89091: ST_TO_ADDR
// case i of 1 :
89092: LD_VAR 0 1
89096: PUSH
89097: LD_INT 1
89099: DOUBLE
89100: EQUAL
89101: IFTRUE 89105
89103: GO 89115
89105: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
89106: LD_STRING earthquake(getX(game), 0, 32)
89108: PPUSH
89109: CALL_OW 559
89113: GO 89340
89115: LD_INT 2
89117: DOUBLE
89118: EQUAL
89119: IFTRUE 89123
89121: GO 89137
89123: POP
// begin ToLua ( displayStucuk(); ) ;
89124: LD_STRING displayStucuk();
89126: PPUSH
89127: CALL_OW 559
// ResetFog ;
89131: CALL_OW 335
// end ; 3 :
89135: GO 89340
89137: LD_INT 3
89139: DOUBLE
89140: EQUAL
89141: IFTRUE 89145
89143: GO 89249
89145: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
89146: LD_ADDR_VAR 0 2
89150: PUSH
89151: LD_INT 22
89153: PUSH
89154: LD_OWVAR 2
89158: PUSH
89159: EMPTY
89160: LIST
89161: LIST
89162: PUSH
89163: LD_INT 25
89165: PUSH
89166: LD_INT 1
89168: PUSH
89169: EMPTY
89170: LIST
89171: LIST
89172: PUSH
89173: EMPTY
89174: LIST
89175: LIST
89176: PPUSH
89177: CALL_OW 69
89181: ST_TO_ADDR
// if not tmp then
89182: LD_VAR 0 2
89186: NOT
89187: IFFALSE 89191
// exit ;
89189: GO 89340
// un := tmp [ rand ( 1 , tmp ) ] ;
89191: LD_ADDR_VAR 0 3
89195: PUSH
89196: LD_VAR 0 2
89200: PUSH
89201: LD_INT 1
89203: PPUSH
89204: LD_VAR 0 2
89208: PPUSH
89209: CALL_OW 12
89213: ARRAY
89214: ST_TO_ADDR
// if Crawls ( un ) then
89215: LD_VAR 0 3
89219: PPUSH
89220: CALL_OW 318
89224: IFFALSE 89235
// ComWalk ( un ) ;
89226: LD_VAR 0 3
89230: PPUSH
89231: CALL_OW 138
// SetClass ( un , class_mortar ) ;
89235: LD_VAR 0 3
89239: PPUSH
89240: LD_INT 8
89242: PPUSH
89243: CALL_OW 336
// end ; 4 :
89247: GO 89340
89249: LD_INT 4
89251: DOUBLE
89252: EQUAL
89253: IFTRUE 89257
89255: GO 89318
89257: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
89258: LD_ADDR_VAR 0 2
89262: PUSH
89263: LD_INT 22
89265: PUSH
89266: LD_OWVAR 2
89270: PUSH
89271: EMPTY
89272: LIST
89273: LIST
89274: PUSH
89275: LD_INT 30
89277: PUSH
89278: LD_INT 29
89280: PUSH
89281: EMPTY
89282: LIST
89283: LIST
89284: PUSH
89285: EMPTY
89286: LIST
89287: LIST
89288: PPUSH
89289: CALL_OW 69
89293: ST_TO_ADDR
// if not tmp then
89294: LD_VAR 0 2
89298: NOT
89299: IFFALSE 89303
// exit ;
89301: GO 89340
// DestroyUnit ( tmp [ 1 ] ) ;
89303: LD_VAR 0 2
89307: PUSH
89308: LD_INT 1
89310: ARRAY
89311: PPUSH
89312: CALL_OW 65
// end ; 5 .. 7 :
89316: GO 89340
89318: LD_INT 5
89320: DOUBLE
89321: GREATEREQUAL
89322: IFFALSE 89330
89324: LD_INT 7
89326: DOUBLE
89327: LESSEQUAL
89328: IFTRUE 89332
89330: GO 89339
89332: POP
// StreamSibBomb ; end ;
89333: CALL 85590 0 0
89337: GO 89340
89339: POP
// end ;
89340: PPOPN 3
89342: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
89343: LD_EXP 106
89347: PUSH
89348: LD_EXP 156
89352: AND
89353: IFFALSE 89509
89355: GO 89357
89357: DISABLE
89358: LD_INT 0
89360: PPUSH
89361: PPUSH
89362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
89363: LD_ADDR_VAR 0 2
89367: PUSH
89368: LD_INT 81
89370: PUSH
89371: LD_OWVAR 2
89375: PUSH
89376: EMPTY
89377: LIST
89378: LIST
89379: PUSH
89380: LD_INT 2
89382: PUSH
89383: LD_INT 21
89385: PUSH
89386: LD_INT 1
89388: PUSH
89389: EMPTY
89390: LIST
89391: LIST
89392: PUSH
89393: LD_INT 21
89395: PUSH
89396: LD_INT 2
89398: PUSH
89399: EMPTY
89400: LIST
89401: LIST
89402: PUSH
89403: EMPTY
89404: LIST
89405: LIST
89406: LIST
89407: PUSH
89408: EMPTY
89409: LIST
89410: LIST
89411: PPUSH
89412: CALL_OW 69
89416: ST_TO_ADDR
// if not tmp then
89417: LD_VAR 0 2
89421: NOT
89422: IFFALSE 89426
// exit ;
89424: GO 89509
// p := 0 ;
89426: LD_ADDR_VAR 0 3
89430: PUSH
89431: LD_INT 0
89433: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
89434: LD_INT 35
89436: PPUSH
89437: CALL_OW 67
// p := p + 1 ;
89441: LD_ADDR_VAR 0 3
89445: PUSH
89446: LD_VAR 0 3
89450: PUSH
89451: LD_INT 1
89453: PLUS
89454: ST_TO_ADDR
// for i in tmp do
89455: LD_ADDR_VAR 0 1
89459: PUSH
89460: LD_VAR 0 2
89464: PUSH
89465: FOR_IN
89466: IFFALSE 89497
// if GetLives ( i ) < 1000 then
89468: LD_VAR 0 1
89472: PPUSH
89473: CALL_OW 256
89477: PUSH
89478: LD_INT 1000
89480: LESS
89481: IFFALSE 89495
// SetLives ( i , 1000 ) ;
89483: LD_VAR 0 1
89487: PPUSH
89488: LD_INT 1000
89490: PPUSH
89491: CALL_OW 234
89495: GO 89465
89497: POP
89498: POP
// until p > 20 ;
89499: LD_VAR 0 3
89503: PUSH
89504: LD_INT 20
89506: GREATER
89507: IFFALSE 89434
// end ;
89509: PPOPN 3
89511: END
// every 0 0$1 trigger StreamModeActive and sTime do
89512: LD_EXP 106
89516: PUSH
89517: LD_EXP 157
89521: AND
89522: IFFALSE 89557
89524: GO 89526
89526: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
89527: LD_INT 28
89529: PPUSH
89530: LD_OWVAR 2
89534: PPUSH
89535: LD_INT 2
89537: PPUSH
89538: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
89542: LD_INT 30
89544: PPUSH
89545: LD_OWVAR 2
89549: PPUSH
89550: LD_INT 2
89552: PPUSH
89553: CALL_OW 322
// end ;
89557: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
89558: LD_EXP 106
89562: PUSH
89563: LD_EXP 158
89567: AND
89568: IFFALSE 89689
89570: GO 89572
89572: DISABLE
89573: LD_INT 0
89575: PPUSH
89576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
89577: LD_ADDR_VAR 0 2
89581: PUSH
89582: LD_INT 22
89584: PUSH
89585: LD_OWVAR 2
89589: PUSH
89590: EMPTY
89591: LIST
89592: LIST
89593: PUSH
89594: LD_INT 21
89596: PUSH
89597: LD_INT 1
89599: PUSH
89600: EMPTY
89601: LIST
89602: LIST
89603: PUSH
89604: LD_INT 3
89606: PUSH
89607: LD_INT 23
89609: PUSH
89610: LD_INT 0
89612: PUSH
89613: EMPTY
89614: LIST
89615: LIST
89616: PUSH
89617: EMPTY
89618: LIST
89619: LIST
89620: PUSH
89621: EMPTY
89622: LIST
89623: LIST
89624: LIST
89625: PPUSH
89626: CALL_OW 69
89630: ST_TO_ADDR
// if not tmp then
89631: LD_VAR 0 2
89635: NOT
89636: IFFALSE 89640
// exit ;
89638: GO 89689
// for i in tmp do
89640: LD_ADDR_VAR 0 1
89644: PUSH
89645: LD_VAR 0 2
89649: PUSH
89650: FOR_IN
89651: IFFALSE 89687
// begin if Crawls ( i ) then
89653: LD_VAR 0 1
89657: PPUSH
89658: CALL_OW 318
89662: IFFALSE 89673
// ComWalk ( i ) ;
89664: LD_VAR 0 1
89668: PPUSH
89669: CALL_OW 138
// SetClass ( i , 2 ) ;
89673: LD_VAR 0 1
89677: PPUSH
89678: LD_INT 2
89680: PPUSH
89681: CALL_OW 336
// end ;
89685: GO 89650
89687: POP
89688: POP
// end ;
89689: PPOPN 2
89691: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
89692: LD_EXP 106
89696: PUSH
89697: LD_EXP 159
89701: AND
89702: IFFALSE 89983
89704: GO 89706
89706: DISABLE
89707: LD_INT 0
89709: PPUSH
89710: PPUSH
89711: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
89712: LD_OWVAR 2
89716: PPUSH
89717: LD_INT 9
89719: PPUSH
89720: LD_INT 1
89722: PPUSH
89723: LD_INT 1
89725: PPUSH
89726: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
89730: LD_INT 9
89732: PPUSH
89733: LD_OWVAR 2
89737: PPUSH
89738: CALL_OW 343
// uc_side := 9 ;
89742: LD_ADDR_OWVAR 20
89746: PUSH
89747: LD_INT 9
89749: ST_TO_ADDR
// uc_nation := 2 ;
89750: LD_ADDR_OWVAR 21
89754: PUSH
89755: LD_INT 2
89757: ST_TO_ADDR
// hc_name := Dark Warrior ;
89758: LD_ADDR_OWVAR 26
89762: PUSH
89763: LD_STRING Dark Warrior
89765: ST_TO_ADDR
// hc_gallery :=  ;
89766: LD_ADDR_OWVAR 33
89770: PUSH
89771: LD_STRING 
89773: ST_TO_ADDR
// hc_noskilllimit := true ;
89774: LD_ADDR_OWVAR 76
89778: PUSH
89779: LD_INT 1
89781: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
89782: LD_ADDR_OWVAR 31
89786: PUSH
89787: LD_INT 30
89789: PUSH
89790: LD_INT 30
89792: PUSH
89793: LD_INT 30
89795: PUSH
89796: LD_INT 30
89798: PUSH
89799: EMPTY
89800: LIST
89801: LIST
89802: LIST
89803: LIST
89804: ST_TO_ADDR
// un := CreateHuman ;
89805: LD_ADDR_VAR 0 3
89809: PUSH
89810: CALL_OW 44
89814: ST_TO_ADDR
// hc_noskilllimit := false ;
89815: LD_ADDR_OWVAR 76
89819: PUSH
89820: LD_INT 0
89822: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
89823: LD_VAR 0 3
89827: PPUSH
89828: LD_INT 1
89830: PPUSH
89831: CALL_OW 51
// p := 0 ;
89835: LD_ADDR_VAR 0 2
89839: PUSH
89840: LD_INT 0
89842: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
89843: LD_INT 35
89845: PPUSH
89846: CALL_OW 67
// p := p + 1 ;
89850: LD_ADDR_VAR 0 2
89854: PUSH
89855: LD_VAR 0 2
89859: PUSH
89860: LD_INT 1
89862: PLUS
89863: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
89864: LD_VAR 0 3
89868: PPUSH
89869: CALL_OW 256
89873: PUSH
89874: LD_INT 1000
89876: LESS
89877: IFFALSE 89891
// SetLives ( un , 1000 ) ;
89879: LD_VAR 0 3
89883: PPUSH
89884: LD_INT 1000
89886: PPUSH
89887: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
89891: LD_VAR 0 3
89895: PPUSH
89896: LD_INT 81
89898: PUSH
89899: LD_OWVAR 2
89903: PUSH
89904: EMPTY
89905: LIST
89906: LIST
89907: PUSH
89908: LD_INT 91
89910: PUSH
89911: LD_VAR 0 3
89915: PUSH
89916: LD_INT 30
89918: PUSH
89919: EMPTY
89920: LIST
89921: LIST
89922: LIST
89923: PUSH
89924: EMPTY
89925: LIST
89926: LIST
89927: PPUSH
89928: CALL_OW 69
89932: PPUSH
89933: LD_VAR 0 3
89937: PPUSH
89938: CALL_OW 74
89942: PPUSH
89943: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
89947: LD_VAR 0 2
89951: PUSH
89952: LD_INT 60
89954: GREATER
89955: PUSH
89956: LD_VAR 0 3
89960: PPUSH
89961: CALL_OW 301
89965: OR
89966: IFFALSE 89843
// if un then
89968: LD_VAR 0 3
89972: IFFALSE 89983
// RemoveUnit ( un ) ;
89974: LD_VAR 0 3
89978: PPUSH
89979: CALL_OW 64
// end ; end_of_file
89983: PPOPN 3
89985: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
89986: LD_INT 0
89988: PPUSH
89989: PPUSH
89990: PPUSH
89991: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
89992: LD_VAR 0 1
89996: PPUSH
89997: CALL_OW 264
90001: PUSH
90002: LD_EXP 52
90006: EQUAL
90007: IFFALSE 90079
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
90009: LD_INT 68
90011: PPUSH
90012: LD_VAR 0 1
90016: PPUSH
90017: CALL_OW 255
90021: PPUSH
90022: CALL_OW 321
90026: PUSH
90027: LD_INT 2
90029: EQUAL
90030: IFFALSE 90042
// eff := 70 else
90032: LD_ADDR_VAR 0 4
90036: PUSH
90037: LD_INT 70
90039: ST_TO_ADDR
90040: GO 90050
// eff := 30 ;
90042: LD_ADDR_VAR 0 4
90046: PUSH
90047: LD_INT 30
90049: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
90050: LD_VAR 0 1
90054: PPUSH
90055: CALL_OW 250
90059: PPUSH
90060: LD_VAR 0 1
90064: PPUSH
90065: CALL_OW 251
90069: PPUSH
90070: LD_VAR 0 4
90074: PPUSH
90075: CALL_OW 495
// end ; end ;
90079: LD_VAR 0 2
90083: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
90084: LD_INT 0
90086: PPUSH
// end ;
90087: LD_VAR 0 4
90091: RET
// export function SOS_Command ( cmd ) ; begin
90092: LD_INT 0
90094: PPUSH
// end ;
90095: LD_VAR 0 2
90099: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
90100: LD_VAR 0 1
90104: PUSH
90105: LD_INT 255
90107: EQUAL
90108: PUSH
90109: LD_VAR 0 2
90113: PPUSH
90114: CALL_OW 264
90118: PUSH
90119: LD_INT 14
90121: PUSH
90122: LD_INT 53
90124: PUSH
90125: EMPTY
90126: LIST
90127: LIST
90128: IN
90129: AND
90130: PUSH
90131: LD_VAR 0 4
90135: PPUSH
90136: LD_VAR 0 5
90140: PPUSH
90141: CALL_OW 488
90145: AND
90146: IFFALSE 90170
// CutTreeXYR ( unit , x , y , 12 ) ;
90148: LD_VAR 0 2
90152: PPUSH
90153: LD_VAR 0 4
90157: PPUSH
90158: LD_VAR 0 5
90162: PPUSH
90163: LD_INT 12
90165: PPUSH
90166: CALL 90173 0 4
// end ;
90170: PPOPN 5
90172: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
90173: LD_INT 0
90175: PPUSH
90176: PPUSH
90177: PPUSH
90178: PPUSH
90179: PPUSH
90180: PPUSH
90181: PPUSH
90182: PPUSH
90183: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
90184: LD_VAR 0 1
90188: NOT
90189: PUSH
90190: LD_VAR 0 2
90194: PPUSH
90195: LD_VAR 0 3
90199: PPUSH
90200: CALL_OW 488
90204: NOT
90205: OR
90206: PUSH
90207: LD_VAR 0 4
90211: NOT
90212: OR
90213: IFFALSE 90217
// exit ;
90215: GO 90557
// list := [ ] ;
90217: LD_ADDR_VAR 0 13
90221: PUSH
90222: EMPTY
90223: ST_TO_ADDR
// if x - r < 0 then
90224: LD_VAR 0 2
90228: PUSH
90229: LD_VAR 0 4
90233: MINUS
90234: PUSH
90235: LD_INT 0
90237: LESS
90238: IFFALSE 90250
// min_x := 0 else
90240: LD_ADDR_VAR 0 7
90244: PUSH
90245: LD_INT 0
90247: ST_TO_ADDR
90248: GO 90266
// min_x := x - r ;
90250: LD_ADDR_VAR 0 7
90254: PUSH
90255: LD_VAR 0 2
90259: PUSH
90260: LD_VAR 0 4
90264: MINUS
90265: ST_TO_ADDR
// if y - r < 0 then
90266: LD_VAR 0 3
90270: PUSH
90271: LD_VAR 0 4
90275: MINUS
90276: PUSH
90277: LD_INT 0
90279: LESS
90280: IFFALSE 90292
// min_y := 0 else
90282: LD_ADDR_VAR 0 8
90286: PUSH
90287: LD_INT 0
90289: ST_TO_ADDR
90290: GO 90308
// min_y := y - r ;
90292: LD_ADDR_VAR 0 8
90296: PUSH
90297: LD_VAR 0 3
90301: PUSH
90302: LD_VAR 0 4
90306: MINUS
90307: ST_TO_ADDR
// max_x := x + r ;
90308: LD_ADDR_VAR 0 9
90312: PUSH
90313: LD_VAR 0 2
90317: PUSH
90318: LD_VAR 0 4
90322: PLUS
90323: ST_TO_ADDR
// max_y := y + r ;
90324: LD_ADDR_VAR 0 10
90328: PUSH
90329: LD_VAR 0 3
90333: PUSH
90334: LD_VAR 0 4
90338: PLUS
90339: ST_TO_ADDR
// for _x = min_x to max_x do
90340: LD_ADDR_VAR 0 11
90344: PUSH
90345: DOUBLE
90346: LD_VAR 0 7
90350: DEC
90351: ST_TO_ADDR
90352: LD_VAR 0 9
90356: PUSH
90357: FOR_TO
90358: IFFALSE 90475
// for _y = min_y to max_y do
90360: LD_ADDR_VAR 0 12
90364: PUSH
90365: DOUBLE
90366: LD_VAR 0 8
90370: DEC
90371: ST_TO_ADDR
90372: LD_VAR 0 10
90376: PUSH
90377: FOR_TO
90378: IFFALSE 90471
// begin if not ValidHex ( _x , _y ) then
90380: LD_VAR 0 11
90384: PPUSH
90385: LD_VAR 0 12
90389: PPUSH
90390: CALL_OW 488
90394: NOT
90395: IFFALSE 90399
// continue ;
90397: GO 90377
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
90399: LD_VAR 0 11
90403: PPUSH
90404: LD_VAR 0 12
90408: PPUSH
90409: CALL_OW 351
90413: PUSH
90414: LD_VAR 0 11
90418: PPUSH
90419: LD_VAR 0 12
90423: PPUSH
90424: CALL_OW 554
90428: AND
90429: IFFALSE 90469
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
90431: LD_ADDR_VAR 0 13
90435: PUSH
90436: LD_VAR 0 13
90440: PPUSH
90441: LD_VAR 0 13
90445: PUSH
90446: LD_INT 1
90448: PLUS
90449: PPUSH
90450: LD_VAR 0 11
90454: PUSH
90455: LD_VAR 0 12
90459: PUSH
90460: EMPTY
90461: LIST
90462: LIST
90463: PPUSH
90464: CALL_OW 2
90468: ST_TO_ADDR
// end ;
90469: GO 90377
90471: POP
90472: POP
90473: GO 90357
90475: POP
90476: POP
// if not list then
90477: LD_VAR 0 13
90481: NOT
90482: IFFALSE 90486
// exit ;
90484: GO 90557
// for i in list do
90486: LD_ADDR_VAR 0 6
90490: PUSH
90491: LD_VAR 0 13
90495: PUSH
90496: FOR_IN
90497: IFFALSE 90555
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
90499: LD_VAR 0 1
90503: PPUSH
90504: LD_STRING M
90506: PUSH
90507: LD_VAR 0 6
90511: PUSH
90512: LD_INT 1
90514: ARRAY
90515: PUSH
90516: LD_VAR 0 6
90520: PUSH
90521: LD_INT 2
90523: ARRAY
90524: PUSH
90525: LD_INT 0
90527: PUSH
90528: LD_INT 0
90530: PUSH
90531: LD_INT 0
90533: PUSH
90534: LD_INT 0
90536: PUSH
90537: EMPTY
90538: LIST
90539: LIST
90540: LIST
90541: LIST
90542: LIST
90543: LIST
90544: LIST
90545: PUSH
90546: EMPTY
90547: LIST
90548: PPUSH
90549: CALL_OW 447
90553: GO 90496
90555: POP
90556: POP
// end ; end_of_file
90557: LD_VAR 0 5
90561: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
90562: LD_INT 0
90564: PPUSH
90565: PPUSH
90566: PPUSH
90567: PPUSH
90568: PPUSH
90569: PPUSH
90570: PPUSH
90571: PPUSH
90572: PPUSH
90573: PPUSH
90574: PPUSH
90575: PPUSH
90576: PPUSH
90577: PPUSH
90578: PPUSH
90579: PPUSH
90580: PPUSH
90581: PPUSH
90582: PPUSH
90583: PPUSH
90584: PPUSH
90585: PPUSH
90586: PPUSH
90587: PPUSH
90588: PPUSH
90589: PPUSH
90590: PPUSH
90591: PPUSH
90592: PPUSH
90593: PPUSH
90594: PPUSH
90595: PPUSH
90596: PPUSH
90597: PPUSH
// if not list then
90598: LD_VAR 0 1
90602: NOT
90603: IFFALSE 90607
// exit ;
90605: GO 95266
// base := list [ 1 ] ;
90607: LD_ADDR_VAR 0 3
90611: PUSH
90612: LD_VAR 0 1
90616: PUSH
90617: LD_INT 1
90619: ARRAY
90620: ST_TO_ADDR
// group := list [ 2 ] ;
90621: LD_ADDR_VAR 0 4
90625: PUSH
90626: LD_VAR 0 1
90630: PUSH
90631: LD_INT 2
90633: ARRAY
90634: ST_TO_ADDR
// path := list [ 3 ] ;
90635: LD_ADDR_VAR 0 5
90639: PUSH
90640: LD_VAR 0 1
90644: PUSH
90645: LD_INT 3
90647: ARRAY
90648: ST_TO_ADDR
// flags := list [ 4 ] ;
90649: LD_ADDR_VAR 0 6
90653: PUSH
90654: LD_VAR 0 1
90658: PUSH
90659: LD_INT 4
90661: ARRAY
90662: ST_TO_ADDR
// mined := [ ] ;
90663: LD_ADDR_VAR 0 27
90667: PUSH
90668: EMPTY
90669: ST_TO_ADDR
// bombed := [ ] ;
90670: LD_ADDR_VAR 0 28
90674: PUSH
90675: EMPTY
90676: ST_TO_ADDR
// healers := [ ] ;
90677: LD_ADDR_VAR 0 31
90681: PUSH
90682: EMPTY
90683: ST_TO_ADDR
// to_heal := [ ] ;
90684: LD_ADDR_VAR 0 30
90688: PUSH
90689: EMPTY
90690: ST_TO_ADDR
// repairs := [ ] ;
90691: LD_ADDR_VAR 0 33
90695: PUSH
90696: EMPTY
90697: ST_TO_ADDR
// to_repair := [ ] ;
90698: LD_ADDR_VAR 0 32
90702: PUSH
90703: EMPTY
90704: ST_TO_ADDR
// if not group or not path then
90705: LD_VAR 0 4
90709: NOT
90710: PUSH
90711: LD_VAR 0 5
90715: NOT
90716: OR
90717: IFFALSE 90721
// exit ;
90719: GO 95266
// side := GetSide ( group [ 1 ] ) ;
90721: LD_ADDR_VAR 0 35
90725: PUSH
90726: LD_VAR 0 4
90730: PUSH
90731: LD_INT 1
90733: ARRAY
90734: PPUSH
90735: CALL_OW 255
90739: ST_TO_ADDR
// if flags then
90740: LD_VAR 0 6
90744: IFFALSE 90888
// begin f_ignore_area := flags [ 1 ] ;
90746: LD_ADDR_VAR 0 17
90750: PUSH
90751: LD_VAR 0 6
90755: PUSH
90756: LD_INT 1
90758: ARRAY
90759: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
90760: LD_ADDR_VAR 0 18
90764: PUSH
90765: LD_VAR 0 6
90769: PUSH
90770: LD_INT 2
90772: ARRAY
90773: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
90774: LD_ADDR_VAR 0 19
90778: PUSH
90779: LD_VAR 0 6
90783: PUSH
90784: LD_INT 3
90786: ARRAY
90787: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
90788: LD_ADDR_VAR 0 20
90792: PUSH
90793: LD_VAR 0 6
90797: PUSH
90798: LD_INT 4
90800: ARRAY
90801: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
90802: LD_ADDR_VAR 0 21
90806: PUSH
90807: LD_VAR 0 6
90811: PUSH
90812: LD_INT 5
90814: ARRAY
90815: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
90816: LD_ADDR_VAR 0 22
90820: PUSH
90821: LD_VAR 0 6
90825: PUSH
90826: LD_INT 6
90828: ARRAY
90829: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
90830: LD_ADDR_VAR 0 23
90834: PUSH
90835: LD_VAR 0 6
90839: PUSH
90840: LD_INT 7
90842: ARRAY
90843: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
90844: LD_ADDR_VAR 0 24
90848: PUSH
90849: LD_VAR 0 6
90853: PUSH
90854: LD_INT 8
90856: ARRAY
90857: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
90858: LD_ADDR_VAR 0 25
90862: PUSH
90863: LD_VAR 0 6
90867: PUSH
90868: LD_INT 9
90870: ARRAY
90871: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
90872: LD_ADDR_VAR 0 26
90876: PUSH
90877: LD_VAR 0 6
90881: PUSH
90882: LD_INT 10
90884: ARRAY
90885: ST_TO_ADDR
// end else
90886: GO 90968
// begin f_ignore_area := false ;
90888: LD_ADDR_VAR 0 17
90892: PUSH
90893: LD_INT 0
90895: ST_TO_ADDR
// f_capture := false ;
90896: LD_ADDR_VAR 0 18
90900: PUSH
90901: LD_INT 0
90903: ST_TO_ADDR
// f_ignore_civ := false ;
90904: LD_ADDR_VAR 0 19
90908: PUSH
90909: LD_INT 0
90911: ST_TO_ADDR
// f_murder := false ;
90912: LD_ADDR_VAR 0 20
90916: PUSH
90917: LD_INT 0
90919: ST_TO_ADDR
// f_mines := false ;
90920: LD_ADDR_VAR 0 21
90924: PUSH
90925: LD_INT 0
90927: ST_TO_ADDR
// f_repair := false ;
90928: LD_ADDR_VAR 0 22
90932: PUSH
90933: LD_INT 0
90935: ST_TO_ADDR
// f_heal := false ;
90936: LD_ADDR_VAR 0 23
90940: PUSH
90941: LD_INT 0
90943: ST_TO_ADDR
// f_spacetime := false ;
90944: LD_ADDR_VAR 0 24
90948: PUSH
90949: LD_INT 0
90951: ST_TO_ADDR
// f_attack_depot := false ;
90952: LD_ADDR_VAR 0 25
90956: PUSH
90957: LD_INT 0
90959: ST_TO_ADDR
// f_crawl := false ;
90960: LD_ADDR_VAR 0 26
90964: PUSH
90965: LD_INT 0
90967: ST_TO_ADDR
// end ; if f_heal then
90968: LD_VAR 0 23
90972: IFFALSE 90999
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
90974: LD_ADDR_VAR 0 31
90978: PUSH
90979: LD_VAR 0 4
90983: PPUSH
90984: LD_INT 25
90986: PUSH
90987: LD_INT 4
90989: PUSH
90990: EMPTY
90991: LIST
90992: LIST
90993: PPUSH
90994: CALL_OW 72
90998: ST_TO_ADDR
// if f_repair then
90999: LD_VAR 0 22
91003: IFFALSE 91030
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
91005: LD_ADDR_VAR 0 33
91009: PUSH
91010: LD_VAR 0 4
91014: PPUSH
91015: LD_INT 25
91017: PUSH
91018: LD_INT 3
91020: PUSH
91021: EMPTY
91022: LIST
91023: LIST
91024: PPUSH
91025: CALL_OW 72
91029: ST_TO_ADDR
// units_path := [ ] ;
91030: LD_ADDR_VAR 0 16
91034: PUSH
91035: EMPTY
91036: ST_TO_ADDR
// for i = 1 to group do
91037: LD_ADDR_VAR 0 7
91041: PUSH
91042: DOUBLE
91043: LD_INT 1
91045: DEC
91046: ST_TO_ADDR
91047: LD_VAR 0 4
91051: PUSH
91052: FOR_TO
91053: IFFALSE 91082
// units_path := Replace ( units_path , i , path ) ;
91055: LD_ADDR_VAR 0 16
91059: PUSH
91060: LD_VAR 0 16
91064: PPUSH
91065: LD_VAR 0 7
91069: PPUSH
91070: LD_VAR 0 5
91074: PPUSH
91075: CALL_OW 1
91079: ST_TO_ADDR
91080: GO 91052
91082: POP
91083: POP
// repeat for i = group downto 1 do
91084: LD_ADDR_VAR 0 7
91088: PUSH
91089: DOUBLE
91090: LD_VAR 0 4
91094: INC
91095: ST_TO_ADDR
91096: LD_INT 1
91098: PUSH
91099: FOR_DOWNTO
91100: IFFALSE 95222
// begin wait ( 5 ) ;
91102: LD_INT 5
91104: PPUSH
91105: CALL_OW 67
// tmp := [ ] ;
91109: LD_ADDR_VAR 0 14
91113: PUSH
91114: EMPTY
91115: ST_TO_ADDR
// attacking := false ;
91116: LD_ADDR_VAR 0 29
91120: PUSH
91121: LD_INT 0
91123: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
91124: LD_VAR 0 4
91128: PUSH
91129: LD_VAR 0 7
91133: ARRAY
91134: PPUSH
91135: CALL_OW 301
91139: PUSH
91140: LD_VAR 0 4
91144: PUSH
91145: LD_VAR 0 7
91149: ARRAY
91150: NOT
91151: OR
91152: IFFALSE 91261
// begin if GetType ( group [ i ] ) = unit_human then
91154: LD_VAR 0 4
91158: PUSH
91159: LD_VAR 0 7
91163: ARRAY
91164: PPUSH
91165: CALL_OW 247
91169: PUSH
91170: LD_INT 1
91172: EQUAL
91173: IFFALSE 91219
// begin to_heal := to_heal diff group [ i ] ;
91175: LD_ADDR_VAR 0 30
91179: PUSH
91180: LD_VAR 0 30
91184: PUSH
91185: LD_VAR 0 4
91189: PUSH
91190: LD_VAR 0 7
91194: ARRAY
91195: DIFF
91196: ST_TO_ADDR
// healers := healers diff group [ i ] ;
91197: LD_ADDR_VAR 0 31
91201: PUSH
91202: LD_VAR 0 31
91206: PUSH
91207: LD_VAR 0 4
91211: PUSH
91212: LD_VAR 0 7
91216: ARRAY
91217: DIFF
91218: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
91219: LD_ADDR_VAR 0 4
91223: PUSH
91224: LD_VAR 0 4
91228: PPUSH
91229: LD_VAR 0 7
91233: PPUSH
91234: CALL_OW 3
91238: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
91239: LD_ADDR_VAR 0 16
91243: PUSH
91244: LD_VAR 0 16
91248: PPUSH
91249: LD_VAR 0 7
91253: PPUSH
91254: CALL_OW 3
91258: ST_TO_ADDR
// continue ;
91259: GO 91099
// end ; if f_repair then
91261: LD_VAR 0 22
91265: IFFALSE 91754
// begin if GetType ( group [ i ] ) = unit_vehicle then
91267: LD_VAR 0 4
91271: PUSH
91272: LD_VAR 0 7
91276: ARRAY
91277: PPUSH
91278: CALL_OW 247
91282: PUSH
91283: LD_INT 2
91285: EQUAL
91286: IFFALSE 91476
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
91288: LD_VAR 0 4
91292: PUSH
91293: LD_VAR 0 7
91297: ARRAY
91298: PPUSH
91299: CALL_OW 256
91303: PUSH
91304: LD_INT 700
91306: LESS
91307: PUSH
91308: LD_VAR 0 4
91312: PUSH
91313: LD_VAR 0 7
91317: ARRAY
91318: PUSH
91319: LD_VAR 0 32
91323: IN
91324: NOT
91325: AND
91326: IFFALSE 91350
// to_repair := to_repair union group [ i ] ;
91328: LD_ADDR_VAR 0 32
91332: PUSH
91333: LD_VAR 0 32
91337: PUSH
91338: LD_VAR 0 4
91342: PUSH
91343: LD_VAR 0 7
91347: ARRAY
91348: UNION
91349: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
91350: LD_VAR 0 4
91354: PUSH
91355: LD_VAR 0 7
91359: ARRAY
91360: PPUSH
91361: CALL_OW 256
91365: PUSH
91366: LD_INT 1000
91368: EQUAL
91369: PUSH
91370: LD_VAR 0 4
91374: PUSH
91375: LD_VAR 0 7
91379: ARRAY
91380: PUSH
91381: LD_VAR 0 32
91385: IN
91386: AND
91387: IFFALSE 91411
// to_repair := to_repair diff group [ i ] ;
91389: LD_ADDR_VAR 0 32
91393: PUSH
91394: LD_VAR 0 32
91398: PUSH
91399: LD_VAR 0 4
91403: PUSH
91404: LD_VAR 0 7
91408: ARRAY
91409: DIFF
91410: ST_TO_ADDR
// if group [ i ] in to_repair then
91411: LD_VAR 0 4
91415: PUSH
91416: LD_VAR 0 7
91420: ARRAY
91421: PUSH
91422: LD_VAR 0 32
91426: IN
91427: IFFALSE 91474
// begin if not IsInArea ( group [ i ] , f_repair ) then
91429: LD_VAR 0 4
91433: PUSH
91434: LD_VAR 0 7
91438: ARRAY
91439: PPUSH
91440: LD_VAR 0 22
91444: PPUSH
91445: CALL_OW 308
91449: NOT
91450: IFFALSE 91472
// ComMoveToArea ( group [ i ] , f_repair ) ;
91452: LD_VAR 0 4
91456: PUSH
91457: LD_VAR 0 7
91461: ARRAY
91462: PPUSH
91463: LD_VAR 0 22
91467: PPUSH
91468: CALL_OW 113
// continue ;
91472: GO 91099
// end ; end else
91474: GO 91754
// if group [ i ] in repairs then
91476: LD_VAR 0 4
91480: PUSH
91481: LD_VAR 0 7
91485: ARRAY
91486: PUSH
91487: LD_VAR 0 33
91491: IN
91492: IFFALSE 91754
// begin if IsInUnit ( group [ i ] ) then
91494: LD_VAR 0 4
91498: PUSH
91499: LD_VAR 0 7
91503: ARRAY
91504: PPUSH
91505: CALL_OW 310
91509: IFFALSE 91577
// begin z := IsInUnit ( group [ i ] ) ;
91511: LD_ADDR_VAR 0 13
91515: PUSH
91516: LD_VAR 0 4
91520: PUSH
91521: LD_VAR 0 7
91525: ARRAY
91526: PPUSH
91527: CALL_OW 310
91531: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
91532: LD_VAR 0 13
91536: PUSH
91537: LD_VAR 0 32
91541: IN
91542: PUSH
91543: LD_VAR 0 13
91547: PPUSH
91548: LD_VAR 0 22
91552: PPUSH
91553: CALL_OW 308
91557: AND
91558: IFFALSE 91575
// ComExitVehicle ( group [ i ] ) ;
91560: LD_VAR 0 4
91564: PUSH
91565: LD_VAR 0 7
91569: ARRAY
91570: PPUSH
91571: CALL_OW 121
// end else
91575: GO 91754
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
91577: LD_ADDR_VAR 0 13
91581: PUSH
91582: LD_VAR 0 4
91586: PPUSH
91587: LD_INT 95
91589: PUSH
91590: LD_VAR 0 22
91594: PUSH
91595: EMPTY
91596: LIST
91597: LIST
91598: PUSH
91599: LD_INT 58
91601: PUSH
91602: EMPTY
91603: LIST
91604: PUSH
91605: EMPTY
91606: LIST
91607: LIST
91608: PPUSH
91609: CALL_OW 72
91613: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
91614: LD_VAR 0 4
91618: PUSH
91619: LD_VAR 0 7
91623: ARRAY
91624: PPUSH
91625: CALL_OW 314
91629: NOT
91630: IFFALSE 91752
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
91632: LD_ADDR_VAR 0 10
91636: PUSH
91637: LD_VAR 0 13
91641: PPUSH
91642: LD_VAR 0 4
91646: PUSH
91647: LD_VAR 0 7
91651: ARRAY
91652: PPUSH
91653: CALL_OW 74
91657: ST_TO_ADDR
// if not x then
91658: LD_VAR 0 10
91662: NOT
91663: IFFALSE 91667
// continue ;
91665: GO 91099
// if GetLives ( x ) < 1000 then
91667: LD_VAR 0 10
91671: PPUSH
91672: CALL_OW 256
91676: PUSH
91677: LD_INT 1000
91679: LESS
91680: IFFALSE 91704
// ComRepairVehicle ( group [ i ] , x ) else
91682: LD_VAR 0 4
91686: PUSH
91687: LD_VAR 0 7
91691: ARRAY
91692: PPUSH
91693: LD_VAR 0 10
91697: PPUSH
91698: CALL_OW 129
91702: GO 91752
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
91704: LD_VAR 0 23
91708: PUSH
91709: LD_VAR 0 4
91713: PUSH
91714: LD_VAR 0 7
91718: ARRAY
91719: PPUSH
91720: CALL_OW 256
91724: PUSH
91725: LD_INT 1000
91727: LESS
91728: AND
91729: NOT
91730: IFFALSE 91752
// ComEnterUnit ( group [ i ] , x ) ;
91732: LD_VAR 0 4
91736: PUSH
91737: LD_VAR 0 7
91741: ARRAY
91742: PPUSH
91743: LD_VAR 0 10
91747: PPUSH
91748: CALL_OW 120
// end ; continue ;
91752: GO 91099
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
91754: LD_VAR 0 23
91758: PUSH
91759: LD_VAR 0 4
91763: PUSH
91764: LD_VAR 0 7
91768: ARRAY
91769: PPUSH
91770: CALL_OW 247
91774: PUSH
91775: LD_INT 1
91777: EQUAL
91778: AND
91779: IFFALSE 92257
// begin if group [ i ] in healers then
91781: LD_VAR 0 4
91785: PUSH
91786: LD_VAR 0 7
91790: ARRAY
91791: PUSH
91792: LD_VAR 0 31
91796: IN
91797: IFFALSE 92070
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
91799: LD_VAR 0 4
91803: PUSH
91804: LD_VAR 0 7
91808: ARRAY
91809: PPUSH
91810: LD_VAR 0 23
91814: PPUSH
91815: CALL_OW 308
91819: NOT
91820: PUSH
91821: LD_VAR 0 4
91825: PUSH
91826: LD_VAR 0 7
91830: ARRAY
91831: PPUSH
91832: CALL_OW 314
91836: NOT
91837: AND
91838: IFFALSE 91862
// ComMoveToArea ( group [ i ] , f_heal ) else
91840: LD_VAR 0 4
91844: PUSH
91845: LD_VAR 0 7
91849: ARRAY
91850: PPUSH
91851: LD_VAR 0 23
91855: PPUSH
91856: CALL_OW 113
91860: GO 92068
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
91862: LD_VAR 0 4
91866: PUSH
91867: LD_VAR 0 7
91871: ARRAY
91872: PPUSH
91873: CALL 45774 0 1
91877: PPUSH
91878: CALL_OW 256
91882: PUSH
91883: LD_INT 1000
91885: EQUAL
91886: IFFALSE 91905
// ComStop ( group [ i ] ) else
91888: LD_VAR 0 4
91892: PUSH
91893: LD_VAR 0 7
91897: ARRAY
91898: PPUSH
91899: CALL_OW 141
91903: GO 92068
// if not HasTask ( group [ i ] ) and to_heal then
91905: LD_VAR 0 4
91909: PUSH
91910: LD_VAR 0 7
91914: ARRAY
91915: PPUSH
91916: CALL_OW 314
91920: NOT
91921: PUSH
91922: LD_VAR 0 30
91926: AND
91927: IFFALSE 92068
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
91929: LD_ADDR_VAR 0 13
91933: PUSH
91934: LD_VAR 0 30
91938: PPUSH
91939: LD_INT 3
91941: PUSH
91942: LD_INT 54
91944: PUSH
91945: EMPTY
91946: LIST
91947: PUSH
91948: EMPTY
91949: LIST
91950: LIST
91951: PPUSH
91952: CALL_OW 72
91956: PPUSH
91957: LD_VAR 0 4
91961: PUSH
91962: LD_VAR 0 7
91966: ARRAY
91967: PPUSH
91968: CALL_OW 74
91972: ST_TO_ADDR
// if z then
91973: LD_VAR 0 13
91977: IFFALSE 92068
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
91979: LD_INT 91
91981: PUSH
91982: LD_VAR 0 13
91986: PUSH
91987: LD_INT 10
91989: PUSH
91990: EMPTY
91991: LIST
91992: LIST
91993: LIST
91994: PUSH
91995: LD_INT 81
91997: PUSH
91998: LD_VAR 0 13
92002: PPUSH
92003: CALL_OW 255
92007: PUSH
92008: EMPTY
92009: LIST
92010: LIST
92011: PUSH
92012: EMPTY
92013: LIST
92014: LIST
92015: PPUSH
92016: CALL_OW 69
92020: PUSH
92021: LD_INT 0
92023: EQUAL
92024: IFFALSE 92048
// ComHeal ( group [ i ] , z ) else
92026: LD_VAR 0 4
92030: PUSH
92031: LD_VAR 0 7
92035: ARRAY
92036: PPUSH
92037: LD_VAR 0 13
92041: PPUSH
92042: CALL_OW 128
92046: GO 92068
// ComMoveToArea ( group [ i ] , f_heal ) ;
92048: LD_VAR 0 4
92052: PUSH
92053: LD_VAR 0 7
92057: ARRAY
92058: PPUSH
92059: LD_VAR 0 23
92063: PPUSH
92064: CALL_OW 113
// end ; continue ;
92068: GO 91099
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
92070: LD_VAR 0 4
92074: PUSH
92075: LD_VAR 0 7
92079: ARRAY
92080: PPUSH
92081: CALL_OW 256
92085: PUSH
92086: LD_INT 700
92088: LESS
92089: PUSH
92090: LD_VAR 0 4
92094: PUSH
92095: LD_VAR 0 7
92099: ARRAY
92100: PUSH
92101: LD_VAR 0 30
92105: IN
92106: NOT
92107: AND
92108: IFFALSE 92132
// to_heal := to_heal union group [ i ] ;
92110: LD_ADDR_VAR 0 30
92114: PUSH
92115: LD_VAR 0 30
92119: PUSH
92120: LD_VAR 0 4
92124: PUSH
92125: LD_VAR 0 7
92129: ARRAY
92130: UNION
92131: ST_TO_ADDR
// if group [ i ] in to_heal then
92132: LD_VAR 0 4
92136: PUSH
92137: LD_VAR 0 7
92141: ARRAY
92142: PUSH
92143: LD_VAR 0 30
92147: IN
92148: IFFALSE 92257
// begin if GetLives ( group [ i ] ) = 1000 then
92150: LD_VAR 0 4
92154: PUSH
92155: LD_VAR 0 7
92159: ARRAY
92160: PPUSH
92161: CALL_OW 256
92165: PUSH
92166: LD_INT 1000
92168: EQUAL
92169: IFFALSE 92195
// to_heal := to_heal diff group [ i ] else
92171: LD_ADDR_VAR 0 30
92175: PUSH
92176: LD_VAR 0 30
92180: PUSH
92181: LD_VAR 0 4
92185: PUSH
92186: LD_VAR 0 7
92190: ARRAY
92191: DIFF
92192: ST_TO_ADDR
92193: GO 92257
// begin if not IsInArea ( group [ i ] , to_heal ) then
92195: LD_VAR 0 4
92199: PUSH
92200: LD_VAR 0 7
92204: ARRAY
92205: PPUSH
92206: LD_VAR 0 30
92210: PPUSH
92211: CALL_OW 308
92215: NOT
92216: IFFALSE 92240
// ComMoveToArea ( group [ i ] , f_heal ) else
92218: LD_VAR 0 4
92222: PUSH
92223: LD_VAR 0 7
92227: ARRAY
92228: PPUSH
92229: LD_VAR 0 23
92233: PPUSH
92234: CALL_OW 113
92238: GO 92255
// ComHold ( group [ i ] ) ;
92240: LD_VAR 0 4
92244: PUSH
92245: LD_VAR 0 7
92249: ARRAY
92250: PPUSH
92251: CALL_OW 140
// continue ;
92255: GO 91099
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
92257: LD_VAR 0 4
92261: PUSH
92262: LD_VAR 0 7
92266: ARRAY
92267: PPUSH
92268: LD_INT 10
92270: PPUSH
92271: CALL 44194 0 2
92275: NOT
92276: PUSH
92277: LD_VAR 0 16
92281: PUSH
92282: LD_VAR 0 7
92286: ARRAY
92287: PUSH
92288: EMPTY
92289: EQUAL
92290: NOT
92291: AND
92292: IFFALSE 92558
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
92294: LD_VAR 0 4
92298: PUSH
92299: LD_VAR 0 7
92303: ARRAY
92304: PPUSH
92305: CALL_OW 262
92309: PUSH
92310: LD_INT 1
92312: PUSH
92313: LD_INT 2
92315: PUSH
92316: EMPTY
92317: LIST
92318: LIST
92319: IN
92320: IFFALSE 92361
// if GetFuel ( group [ i ] ) < 10 then
92322: LD_VAR 0 4
92326: PUSH
92327: LD_VAR 0 7
92331: ARRAY
92332: PPUSH
92333: CALL_OW 261
92337: PUSH
92338: LD_INT 10
92340: LESS
92341: IFFALSE 92361
// SetFuel ( group [ i ] , 12 ) ;
92343: LD_VAR 0 4
92347: PUSH
92348: LD_VAR 0 7
92352: ARRAY
92353: PPUSH
92354: LD_INT 12
92356: PPUSH
92357: CALL_OW 240
// if units_path [ i ] then
92361: LD_VAR 0 16
92365: PUSH
92366: LD_VAR 0 7
92370: ARRAY
92371: IFFALSE 92556
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
92373: LD_VAR 0 4
92377: PUSH
92378: LD_VAR 0 7
92382: ARRAY
92383: PPUSH
92384: LD_VAR 0 16
92388: PUSH
92389: LD_VAR 0 7
92393: ARRAY
92394: PUSH
92395: LD_INT 1
92397: ARRAY
92398: PUSH
92399: LD_INT 1
92401: ARRAY
92402: PPUSH
92403: LD_VAR 0 16
92407: PUSH
92408: LD_VAR 0 7
92412: ARRAY
92413: PUSH
92414: LD_INT 1
92416: ARRAY
92417: PUSH
92418: LD_INT 2
92420: ARRAY
92421: PPUSH
92422: CALL_OW 297
92426: PUSH
92427: LD_INT 6
92429: GREATER
92430: IFFALSE 92505
// begin if not HasTask ( group [ i ] ) then
92432: LD_VAR 0 4
92436: PUSH
92437: LD_VAR 0 7
92441: ARRAY
92442: PPUSH
92443: CALL_OW 314
92447: NOT
92448: IFFALSE 92503
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
92450: LD_VAR 0 4
92454: PUSH
92455: LD_VAR 0 7
92459: ARRAY
92460: PPUSH
92461: LD_VAR 0 16
92465: PUSH
92466: LD_VAR 0 7
92470: ARRAY
92471: PUSH
92472: LD_INT 1
92474: ARRAY
92475: PUSH
92476: LD_INT 1
92478: ARRAY
92479: PPUSH
92480: LD_VAR 0 16
92484: PUSH
92485: LD_VAR 0 7
92489: ARRAY
92490: PUSH
92491: LD_INT 1
92493: ARRAY
92494: PUSH
92495: LD_INT 2
92497: ARRAY
92498: PPUSH
92499: CALL_OW 114
// end else
92503: GO 92556
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
92505: LD_ADDR_VAR 0 15
92509: PUSH
92510: LD_VAR 0 16
92514: PUSH
92515: LD_VAR 0 7
92519: ARRAY
92520: PPUSH
92521: LD_INT 1
92523: PPUSH
92524: CALL_OW 3
92528: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
92529: LD_ADDR_VAR 0 16
92533: PUSH
92534: LD_VAR 0 16
92538: PPUSH
92539: LD_VAR 0 7
92543: PPUSH
92544: LD_VAR 0 15
92548: PPUSH
92549: CALL_OW 1
92553: ST_TO_ADDR
// continue ;
92554: GO 91099
// end ; end ; end else
92556: GO 95220
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
92558: LD_ADDR_VAR 0 14
92562: PUSH
92563: LD_INT 81
92565: PUSH
92566: LD_VAR 0 4
92570: PUSH
92571: LD_VAR 0 7
92575: ARRAY
92576: PPUSH
92577: CALL_OW 255
92581: PUSH
92582: EMPTY
92583: LIST
92584: LIST
92585: PPUSH
92586: CALL_OW 69
92590: ST_TO_ADDR
// if not tmp then
92591: LD_VAR 0 14
92595: NOT
92596: IFFALSE 92600
// continue ;
92598: GO 91099
// if f_ignore_area then
92600: LD_VAR 0 17
92604: IFFALSE 92692
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
92606: LD_ADDR_VAR 0 15
92610: PUSH
92611: LD_VAR 0 14
92615: PPUSH
92616: LD_INT 3
92618: PUSH
92619: LD_INT 92
92621: PUSH
92622: LD_VAR 0 17
92626: PUSH
92627: LD_INT 1
92629: ARRAY
92630: PUSH
92631: LD_VAR 0 17
92635: PUSH
92636: LD_INT 2
92638: ARRAY
92639: PUSH
92640: LD_VAR 0 17
92644: PUSH
92645: LD_INT 3
92647: ARRAY
92648: PUSH
92649: EMPTY
92650: LIST
92651: LIST
92652: LIST
92653: LIST
92654: PUSH
92655: EMPTY
92656: LIST
92657: LIST
92658: PPUSH
92659: CALL_OW 72
92663: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
92664: LD_VAR 0 14
92668: PUSH
92669: LD_VAR 0 15
92673: DIFF
92674: IFFALSE 92692
// tmp := tmp diff tmp2 ;
92676: LD_ADDR_VAR 0 14
92680: PUSH
92681: LD_VAR 0 14
92685: PUSH
92686: LD_VAR 0 15
92690: DIFF
92691: ST_TO_ADDR
// end ; if not f_murder then
92692: LD_VAR 0 20
92696: NOT
92697: IFFALSE 92755
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
92699: LD_ADDR_VAR 0 15
92703: PUSH
92704: LD_VAR 0 14
92708: PPUSH
92709: LD_INT 3
92711: PUSH
92712: LD_INT 50
92714: PUSH
92715: EMPTY
92716: LIST
92717: PUSH
92718: EMPTY
92719: LIST
92720: LIST
92721: PPUSH
92722: CALL_OW 72
92726: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
92727: LD_VAR 0 14
92731: PUSH
92732: LD_VAR 0 15
92736: DIFF
92737: IFFALSE 92755
// tmp := tmp diff tmp2 ;
92739: LD_ADDR_VAR 0 14
92743: PUSH
92744: LD_VAR 0 14
92748: PUSH
92749: LD_VAR 0 15
92753: DIFF
92754: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
92755: LD_ADDR_VAR 0 14
92759: PUSH
92760: LD_VAR 0 4
92764: PUSH
92765: LD_VAR 0 7
92769: ARRAY
92770: PPUSH
92771: LD_VAR 0 14
92775: PPUSH
92776: LD_INT 1
92778: PPUSH
92779: LD_INT 1
92781: PPUSH
92782: CALL 17837 0 4
92786: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
92787: LD_VAR 0 4
92791: PUSH
92792: LD_VAR 0 7
92796: ARRAY
92797: PPUSH
92798: CALL_OW 257
92802: PUSH
92803: LD_INT 1
92805: EQUAL
92806: IFFALSE 93254
// begin if WantPlant ( group [ i ] ) then
92808: LD_VAR 0 4
92812: PUSH
92813: LD_VAR 0 7
92817: ARRAY
92818: PPUSH
92819: CALL 17338 0 1
92823: IFFALSE 92827
// continue ;
92825: GO 91099
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
92827: LD_VAR 0 18
92831: PUSH
92832: LD_VAR 0 4
92836: PUSH
92837: LD_VAR 0 7
92841: ARRAY
92842: PPUSH
92843: CALL_OW 310
92847: NOT
92848: AND
92849: PUSH
92850: LD_VAR 0 14
92854: PUSH
92855: LD_INT 1
92857: ARRAY
92858: PUSH
92859: LD_VAR 0 14
92863: PPUSH
92864: LD_INT 21
92866: PUSH
92867: LD_INT 2
92869: PUSH
92870: EMPTY
92871: LIST
92872: LIST
92873: PUSH
92874: LD_INT 58
92876: PUSH
92877: EMPTY
92878: LIST
92879: PUSH
92880: EMPTY
92881: LIST
92882: LIST
92883: PPUSH
92884: CALL_OW 72
92888: IN
92889: AND
92890: IFFALSE 92926
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
92892: LD_VAR 0 4
92896: PUSH
92897: LD_VAR 0 7
92901: ARRAY
92902: PPUSH
92903: LD_VAR 0 14
92907: PUSH
92908: LD_INT 1
92910: ARRAY
92911: PPUSH
92912: CALL_OW 120
// attacking := true ;
92916: LD_ADDR_VAR 0 29
92920: PUSH
92921: LD_INT 1
92923: ST_TO_ADDR
// continue ;
92924: GO 91099
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
92926: LD_VAR 0 26
92930: PUSH
92931: LD_VAR 0 4
92935: PUSH
92936: LD_VAR 0 7
92940: ARRAY
92941: PPUSH
92942: CALL_OW 257
92946: PUSH
92947: LD_INT 1
92949: EQUAL
92950: AND
92951: PUSH
92952: LD_VAR 0 4
92956: PUSH
92957: LD_VAR 0 7
92961: ARRAY
92962: PPUSH
92963: CALL_OW 256
92967: PUSH
92968: LD_INT 800
92970: LESS
92971: AND
92972: PUSH
92973: LD_VAR 0 4
92977: PUSH
92978: LD_VAR 0 7
92982: ARRAY
92983: PPUSH
92984: CALL_OW 318
92988: NOT
92989: AND
92990: IFFALSE 93007
// ComCrawl ( group [ i ] ) ;
92992: LD_VAR 0 4
92996: PUSH
92997: LD_VAR 0 7
93001: ARRAY
93002: PPUSH
93003: CALL_OW 137
// if f_mines then
93007: LD_VAR 0 21
93011: IFFALSE 93254
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
93013: LD_VAR 0 14
93017: PUSH
93018: LD_INT 1
93020: ARRAY
93021: PPUSH
93022: CALL_OW 247
93026: PUSH
93027: LD_INT 3
93029: EQUAL
93030: PUSH
93031: LD_VAR 0 14
93035: PUSH
93036: LD_INT 1
93038: ARRAY
93039: PUSH
93040: LD_VAR 0 27
93044: IN
93045: NOT
93046: AND
93047: IFFALSE 93254
// begin x := GetX ( tmp [ 1 ] ) ;
93049: LD_ADDR_VAR 0 10
93053: PUSH
93054: LD_VAR 0 14
93058: PUSH
93059: LD_INT 1
93061: ARRAY
93062: PPUSH
93063: CALL_OW 250
93067: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
93068: LD_ADDR_VAR 0 11
93072: PUSH
93073: LD_VAR 0 14
93077: PUSH
93078: LD_INT 1
93080: ARRAY
93081: PPUSH
93082: CALL_OW 251
93086: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
93087: LD_ADDR_VAR 0 12
93091: PUSH
93092: LD_VAR 0 4
93096: PUSH
93097: LD_VAR 0 7
93101: ARRAY
93102: PPUSH
93103: CALL 44279 0 1
93107: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
93108: LD_VAR 0 4
93112: PUSH
93113: LD_VAR 0 7
93117: ARRAY
93118: PPUSH
93119: LD_VAR 0 10
93123: PPUSH
93124: LD_VAR 0 11
93128: PPUSH
93129: LD_VAR 0 14
93133: PUSH
93134: LD_INT 1
93136: ARRAY
93137: PPUSH
93138: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
93142: LD_VAR 0 4
93146: PUSH
93147: LD_VAR 0 7
93151: ARRAY
93152: PPUSH
93153: LD_VAR 0 10
93157: PPUSH
93158: LD_VAR 0 12
93162: PPUSH
93163: LD_INT 7
93165: PPUSH
93166: CALL_OW 272
93170: PPUSH
93171: LD_VAR 0 11
93175: PPUSH
93176: LD_VAR 0 12
93180: PPUSH
93181: LD_INT 7
93183: PPUSH
93184: CALL_OW 273
93188: PPUSH
93189: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
93193: LD_VAR 0 4
93197: PUSH
93198: LD_VAR 0 7
93202: ARRAY
93203: PPUSH
93204: LD_INT 71
93206: PPUSH
93207: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
93211: LD_ADDR_VAR 0 27
93215: PUSH
93216: LD_VAR 0 27
93220: PPUSH
93221: LD_VAR 0 27
93225: PUSH
93226: LD_INT 1
93228: PLUS
93229: PPUSH
93230: LD_VAR 0 14
93234: PUSH
93235: LD_INT 1
93237: ARRAY
93238: PPUSH
93239: CALL_OW 1
93243: ST_TO_ADDR
// attacking := true ;
93244: LD_ADDR_VAR 0 29
93248: PUSH
93249: LD_INT 1
93251: ST_TO_ADDR
// continue ;
93252: GO 91099
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
93254: LD_VAR 0 4
93258: PUSH
93259: LD_VAR 0 7
93263: ARRAY
93264: PPUSH
93265: CALL_OW 257
93269: PUSH
93270: LD_INT 17
93272: EQUAL
93273: PUSH
93274: LD_VAR 0 4
93278: PUSH
93279: LD_VAR 0 7
93283: ARRAY
93284: PPUSH
93285: CALL_OW 110
93289: PUSH
93290: LD_INT 71
93292: EQUAL
93293: NOT
93294: AND
93295: IFFALSE 93441
// begin attacking := false ;
93297: LD_ADDR_VAR 0 29
93301: PUSH
93302: LD_INT 0
93304: ST_TO_ADDR
// k := 5 ;
93305: LD_ADDR_VAR 0 9
93309: PUSH
93310: LD_INT 5
93312: ST_TO_ADDR
// if tmp < k then
93313: LD_VAR 0 14
93317: PUSH
93318: LD_VAR 0 9
93322: LESS
93323: IFFALSE 93335
// k := tmp ;
93325: LD_ADDR_VAR 0 9
93329: PUSH
93330: LD_VAR 0 14
93334: ST_TO_ADDR
// for j = 1 to k do
93335: LD_ADDR_VAR 0 8
93339: PUSH
93340: DOUBLE
93341: LD_INT 1
93343: DEC
93344: ST_TO_ADDR
93345: LD_VAR 0 9
93349: PUSH
93350: FOR_TO
93351: IFFALSE 93439
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
93353: LD_VAR 0 14
93357: PUSH
93358: LD_VAR 0 8
93362: ARRAY
93363: PUSH
93364: LD_VAR 0 14
93368: PPUSH
93369: LD_INT 58
93371: PUSH
93372: EMPTY
93373: LIST
93374: PPUSH
93375: CALL_OW 72
93379: IN
93380: NOT
93381: IFFALSE 93437
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
93383: LD_VAR 0 4
93387: PUSH
93388: LD_VAR 0 7
93392: ARRAY
93393: PPUSH
93394: LD_VAR 0 14
93398: PUSH
93399: LD_VAR 0 8
93403: ARRAY
93404: PPUSH
93405: CALL_OW 115
// attacking := true ;
93409: LD_ADDR_VAR 0 29
93413: PUSH
93414: LD_INT 1
93416: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
93417: LD_VAR 0 4
93421: PUSH
93422: LD_VAR 0 7
93426: ARRAY
93427: PPUSH
93428: LD_INT 71
93430: PPUSH
93431: CALL_OW 109
// continue ;
93435: GO 93350
// end ; end ;
93437: GO 93350
93439: POP
93440: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
93441: LD_VAR 0 4
93445: PUSH
93446: LD_VAR 0 7
93450: ARRAY
93451: PPUSH
93452: CALL_OW 257
93456: PUSH
93457: LD_INT 8
93459: EQUAL
93460: PUSH
93461: LD_VAR 0 4
93465: PUSH
93466: LD_VAR 0 7
93470: ARRAY
93471: PPUSH
93472: CALL_OW 264
93476: PUSH
93477: LD_INT 28
93479: PUSH
93480: LD_INT 45
93482: PUSH
93483: LD_INT 7
93485: PUSH
93486: LD_INT 47
93488: PUSH
93489: EMPTY
93490: LIST
93491: LIST
93492: LIST
93493: LIST
93494: IN
93495: OR
93496: IFFALSE 93752
// begin attacking := false ;
93498: LD_ADDR_VAR 0 29
93502: PUSH
93503: LD_INT 0
93505: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
93506: LD_VAR 0 14
93510: PUSH
93511: LD_INT 1
93513: ARRAY
93514: PPUSH
93515: CALL_OW 266
93519: PUSH
93520: LD_INT 32
93522: PUSH
93523: LD_INT 31
93525: PUSH
93526: LD_INT 33
93528: PUSH
93529: LD_INT 4
93531: PUSH
93532: LD_INT 5
93534: PUSH
93535: EMPTY
93536: LIST
93537: LIST
93538: LIST
93539: LIST
93540: LIST
93541: IN
93542: IFFALSE 93728
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
93544: LD_ADDR_VAR 0 9
93548: PUSH
93549: LD_VAR 0 14
93553: PUSH
93554: LD_INT 1
93556: ARRAY
93557: PPUSH
93558: CALL_OW 266
93562: PPUSH
93563: LD_VAR 0 14
93567: PUSH
93568: LD_INT 1
93570: ARRAY
93571: PPUSH
93572: CALL_OW 250
93576: PPUSH
93577: LD_VAR 0 14
93581: PUSH
93582: LD_INT 1
93584: ARRAY
93585: PPUSH
93586: CALL_OW 251
93590: PPUSH
93591: LD_VAR 0 14
93595: PUSH
93596: LD_INT 1
93598: ARRAY
93599: PPUSH
93600: CALL_OW 254
93604: PPUSH
93605: LD_VAR 0 14
93609: PUSH
93610: LD_INT 1
93612: ARRAY
93613: PPUSH
93614: CALL_OW 248
93618: PPUSH
93619: LD_INT 0
93621: PPUSH
93622: CALL 25649 0 6
93626: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
93627: LD_ADDR_VAR 0 8
93631: PUSH
93632: LD_VAR 0 4
93636: PUSH
93637: LD_VAR 0 7
93641: ARRAY
93642: PPUSH
93643: LD_VAR 0 9
93647: PPUSH
93648: CALL 44319 0 2
93652: ST_TO_ADDR
// if j then
93653: LD_VAR 0 8
93657: IFFALSE 93726
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
93659: LD_VAR 0 8
93663: PUSH
93664: LD_INT 1
93666: ARRAY
93667: PPUSH
93668: LD_VAR 0 8
93672: PUSH
93673: LD_INT 2
93675: ARRAY
93676: PPUSH
93677: CALL_OW 488
93681: IFFALSE 93726
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
93683: LD_VAR 0 4
93687: PUSH
93688: LD_VAR 0 7
93692: ARRAY
93693: PPUSH
93694: LD_VAR 0 8
93698: PUSH
93699: LD_INT 1
93701: ARRAY
93702: PPUSH
93703: LD_VAR 0 8
93707: PUSH
93708: LD_INT 2
93710: ARRAY
93711: PPUSH
93712: CALL_OW 116
// attacking := true ;
93716: LD_ADDR_VAR 0 29
93720: PUSH
93721: LD_INT 1
93723: ST_TO_ADDR
// continue ;
93724: GO 91099
// end ; end else
93726: GO 93752
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
93728: LD_VAR 0 4
93732: PUSH
93733: LD_VAR 0 7
93737: ARRAY
93738: PPUSH
93739: LD_VAR 0 14
93743: PUSH
93744: LD_INT 1
93746: ARRAY
93747: PPUSH
93748: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
93752: LD_VAR 0 4
93756: PUSH
93757: LD_VAR 0 7
93761: ARRAY
93762: PPUSH
93763: CALL_OW 265
93767: PUSH
93768: LD_INT 11
93770: EQUAL
93771: IFFALSE 94049
// begin k := 10 ;
93773: LD_ADDR_VAR 0 9
93777: PUSH
93778: LD_INT 10
93780: ST_TO_ADDR
// x := 0 ;
93781: LD_ADDR_VAR 0 10
93785: PUSH
93786: LD_INT 0
93788: ST_TO_ADDR
// if tmp < k then
93789: LD_VAR 0 14
93793: PUSH
93794: LD_VAR 0 9
93798: LESS
93799: IFFALSE 93811
// k := tmp ;
93801: LD_ADDR_VAR 0 9
93805: PUSH
93806: LD_VAR 0 14
93810: ST_TO_ADDR
// for j = k downto 1 do
93811: LD_ADDR_VAR 0 8
93815: PUSH
93816: DOUBLE
93817: LD_VAR 0 9
93821: INC
93822: ST_TO_ADDR
93823: LD_INT 1
93825: PUSH
93826: FOR_DOWNTO
93827: IFFALSE 93902
// begin if GetType ( tmp [ j ] ) = unit_human then
93829: LD_VAR 0 14
93833: PUSH
93834: LD_VAR 0 8
93838: ARRAY
93839: PPUSH
93840: CALL_OW 247
93844: PUSH
93845: LD_INT 1
93847: EQUAL
93848: IFFALSE 93900
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
93850: LD_VAR 0 4
93854: PUSH
93855: LD_VAR 0 7
93859: ARRAY
93860: PPUSH
93861: LD_VAR 0 14
93865: PUSH
93866: LD_VAR 0 8
93870: ARRAY
93871: PPUSH
93872: CALL 44590 0 2
// x := tmp [ j ] ;
93876: LD_ADDR_VAR 0 10
93880: PUSH
93881: LD_VAR 0 14
93885: PUSH
93886: LD_VAR 0 8
93890: ARRAY
93891: ST_TO_ADDR
// attacking := true ;
93892: LD_ADDR_VAR 0 29
93896: PUSH
93897: LD_INT 1
93899: ST_TO_ADDR
// end ; end ;
93900: GO 93826
93902: POP
93903: POP
// if not x then
93904: LD_VAR 0 10
93908: NOT
93909: IFFALSE 94049
// begin attacking := true ;
93911: LD_ADDR_VAR 0 29
93915: PUSH
93916: LD_INT 1
93918: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
93919: LD_VAR 0 4
93923: PUSH
93924: LD_VAR 0 7
93928: ARRAY
93929: PPUSH
93930: CALL_OW 250
93934: PPUSH
93935: LD_VAR 0 4
93939: PUSH
93940: LD_VAR 0 7
93944: ARRAY
93945: PPUSH
93946: CALL_OW 251
93950: PPUSH
93951: CALL_OW 546
93955: PUSH
93956: LD_INT 2
93958: ARRAY
93959: PUSH
93960: LD_VAR 0 14
93964: PUSH
93965: LD_INT 1
93967: ARRAY
93968: PPUSH
93969: CALL_OW 250
93973: PPUSH
93974: LD_VAR 0 14
93978: PUSH
93979: LD_INT 1
93981: ARRAY
93982: PPUSH
93983: CALL_OW 251
93987: PPUSH
93988: CALL_OW 546
93992: PUSH
93993: LD_INT 2
93995: ARRAY
93996: EQUAL
93997: IFFALSE 94025
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
93999: LD_VAR 0 4
94003: PUSH
94004: LD_VAR 0 7
94008: ARRAY
94009: PPUSH
94010: LD_VAR 0 14
94014: PUSH
94015: LD_INT 1
94017: ARRAY
94018: PPUSH
94019: CALL 44590 0 2
94023: GO 94049
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
94025: LD_VAR 0 4
94029: PUSH
94030: LD_VAR 0 7
94034: ARRAY
94035: PPUSH
94036: LD_VAR 0 14
94040: PUSH
94041: LD_INT 1
94043: ARRAY
94044: PPUSH
94045: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
94049: LD_VAR 0 4
94053: PUSH
94054: LD_VAR 0 7
94058: ARRAY
94059: PPUSH
94060: CALL_OW 264
94064: PUSH
94065: LD_INT 29
94067: EQUAL
94068: IFFALSE 94434
// begin if WantsToAttack ( group [ i ] ) in bombed then
94070: LD_VAR 0 4
94074: PUSH
94075: LD_VAR 0 7
94079: ARRAY
94080: PPUSH
94081: CALL_OW 319
94085: PUSH
94086: LD_VAR 0 28
94090: IN
94091: IFFALSE 94095
// continue ;
94093: GO 91099
// k := 8 ;
94095: LD_ADDR_VAR 0 9
94099: PUSH
94100: LD_INT 8
94102: ST_TO_ADDR
// x := 0 ;
94103: LD_ADDR_VAR 0 10
94107: PUSH
94108: LD_INT 0
94110: ST_TO_ADDR
// if tmp < k then
94111: LD_VAR 0 14
94115: PUSH
94116: LD_VAR 0 9
94120: LESS
94121: IFFALSE 94133
// k := tmp ;
94123: LD_ADDR_VAR 0 9
94127: PUSH
94128: LD_VAR 0 14
94132: ST_TO_ADDR
// for j = 1 to k do
94133: LD_ADDR_VAR 0 8
94137: PUSH
94138: DOUBLE
94139: LD_INT 1
94141: DEC
94142: ST_TO_ADDR
94143: LD_VAR 0 9
94147: PUSH
94148: FOR_TO
94149: IFFALSE 94281
// begin if GetType ( tmp [ j ] ) = unit_building then
94151: LD_VAR 0 14
94155: PUSH
94156: LD_VAR 0 8
94160: ARRAY
94161: PPUSH
94162: CALL_OW 247
94166: PUSH
94167: LD_INT 3
94169: EQUAL
94170: IFFALSE 94279
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
94172: LD_VAR 0 14
94176: PUSH
94177: LD_VAR 0 8
94181: ARRAY
94182: PUSH
94183: LD_VAR 0 28
94187: IN
94188: NOT
94189: PUSH
94190: LD_VAR 0 14
94194: PUSH
94195: LD_VAR 0 8
94199: ARRAY
94200: PPUSH
94201: CALL_OW 313
94205: AND
94206: IFFALSE 94279
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
94208: LD_VAR 0 4
94212: PUSH
94213: LD_VAR 0 7
94217: ARRAY
94218: PPUSH
94219: LD_VAR 0 14
94223: PUSH
94224: LD_VAR 0 8
94228: ARRAY
94229: PPUSH
94230: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
94234: LD_ADDR_VAR 0 28
94238: PUSH
94239: LD_VAR 0 28
94243: PPUSH
94244: LD_VAR 0 28
94248: PUSH
94249: LD_INT 1
94251: PLUS
94252: PPUSH
94253: LD_VAR 0 14
94257: PUSH
94258: LD_VAR 0 8
94262: ARRAY
94263: PPUSH
94264: CALL_OW 1
94268: ST_TO_ADDR
// attacking := true ;
94269: LD_ADDR_VAR 0 29
94273: PUSH
94274: LD_INT 1
94276: ST_TO_ADDR
// break ;
94277: GO 94281
// end ; end ;
94279: GO 94148
94281: POP
94282: POP
// if not attacking and f_attack_depot then
94283: LD_VAR 0 29
94287: NOT
94288: PUSH
94289: LD_VAR 0 25
94293: AND
94294: IFFALSE 94389
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
94296: LD_ADDR_VAR 0 13
94300: PUSH
94301: LD_VAR 0 14
94305: PPUSH
94306: LD_INT 2
94308: PUSH
94309: LD_INT 30
94311: PUSH
94312: LD_INT 0
94314: PUSH
94315: EMPTY
94316: LIST
94317: LIST
94318: PUSH
94319: LD_INT 30
94321: PUSH
94322: LD_INT 1
94324: PUSH
94325: EMPTY
94326: LIST
94327: LIST
94328: PUSH
94329: EMPTY
94330: LIST
94331: LIST
94332: LIST
94333: PPUSH
94334: CALL_OW 72
94338: ST_TO_ADDR
// if z then
94339: LD_VAR 0 13
94343: IFFALSE 94389
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
94345: LD_VAR 0 4
94349: PUSH
94350: LD_VAR 0 7
94354: ARRAY
94355: PPUSH
94356: LD_VAR 0 13
94360: PPUSH
94361: LD_VAR 0 4
94365: PUSH
94366: LD_VAR 0 7
94370: ARRAY
94371: PPUSH
94372: CALL_OW 74
94376: PPUSH
94377: CALL_OW 115
// attacking := true ;
94381: LD_ADDR_VAR 0 29
94385: PUSH
94386: LD_INT 1
94388: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
94389: LD_VAR 0 4
94393: PUSH
94394: LD_VAR 0 7
94398: ARRAY
94399: PPUSH
94400: CALL_OW 256
94404: PUSH
94405: LD_INT 500
94407: LESS
94408: IFFALSE 94434
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
94410: LD_VAR 0 4
94414: PUSH
94415: LD_VAR 0 7
94419: ARRAY
94420: PPUSH
94421: LD_VAR 0 14
94425: PUSH
94426: LD_INT 1
94428: ARRAY
94429: PPUSH
94430: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
94434: LD_VAR 0 4
94438: PUSH
94439: LD_VAR 0 7
94443: ARRAY
94444: PPUSH
94445: CALL_OW 264
94449: PUSH
94450: LD_INT 49
94452: EQUAL
94453: IFFALSE 94574
// begin if not HasTask ( group [ i ] ) then
94455: LD_VAR 0 4
94459: PUSH
94460: LD_VAR 0 7
94464: ARRAY
94465: PPUSH
94466: CALL_OW 314
94470: NOT
94471: IFFALSE 94574
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
94473: LD_ADDR_VAR 0 9
94477: PUSH
94478: LD_INT 81
94480: PUSH
94481: LD_VAR 0 4
94485: PUSH
94486: LD_VAR 0 7
94490: ARRAY
94491: PPUSH
94492: CALL_OW 255
94496: PUSH
94497: EMPTY
94498: LIST
94499: LIST
94500: PPUSH
94501: CALL_OW 69
94505: PPUSH
94506: LD_VAR 0 4
94510: PUSH
94511: LD_VAR 0 7
94515: ARRAY
94516: PPUSH
94517: CALL_OW 74
94521: ST_TO_ADDR
// if k then
94522: LD_VAR 0 9
94526: IFFALSE 94574
// if GetDistUnits ( group [ i ] , k ) > 10 then
94528: LD_VAR 0 4
94532: PUSH
94533: LD_VAR 0 7
94537: ARRAY
94538: PPUSH
94539: LD_VAR 0 9
94543: PPUSH
94544: CALL_OW 296
94548: PUSH
94549: LD_INT 10
94551: GREATER
94552: IFFALSE 94574
// ComMoveUnit ( group [ i ] , k ) ;
94554: LD_VAR 0 4
94558: PUSH
94559: LD_VAR 0 7
94563: ARRAY
94564: PPUSH
94565: LD_VAR 0 9
94569: PPUSH
94570: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
94574: LD_VAR 0 4
94578: PUSH
94579: LD_VAR 0 7
94583: ARRAY
94584: PPUSH
94585: CALL_OW 256
94589: PUSH
94590: LD_INT 250
94592: LESS
94593: PUSH
94594: LD_VAR 0 4
94598: PUSH
94599: LD_VAR 0 7
94603: ARRAY
94604: PUSH
94605: LD_INT 21
94607: PUSH
94608: LD_INT 2
94610: PUSH
94611: EMPTY
94612: LIST
94613: LIST
94614: PUSH
94615: LD_INT 23
94617: PUSH
94618: LD_INT 2
94620: PUSH
94621: EMPTY
94622: LIST
94623: LIST
94624: PUSH
94625: EMPTY
94626: LIST
94627: LIST
94628: PPUSH
94629: CALL_OW 69
94633: IN
94634: AND
94635: IFFALSE 94760
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
94637: LD_ADDR_VAR 0 9
94641: PUSH
94642: LD_OWVAR 3
94646: PUSH
94647: LD_VAR 0 4
94651: PUSH
94652: LD_VAR 0 7
94656: ARRAY
94657: DIFF
94658: PPUSH
94659: LD_VAR 0 4
94663: PUSH
94664: LD_VAR 0 7
94668: ARRAY
94669: PPUSH
94670: CALL_OW 74
94674: ST_TO_ADDR
// if not k then
94675: LD_VAR 0 9
94679: NOT
94680: IFFALSE 94684
// continue ;
94682: GO 91099
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
94684: LD_VAR 0 9
94688: PUSH
94689: LD_INT 81
94691: PUSH
94692: LD_VAR 0 4
94696: PUSH
94697: LD_VAR 0 7
94701: ARRAY
94702: PPUSH
94703: CALL_OW 255
94707: PUSH
94708: EMPTY
94709: LIST
94710: LIST
94711: PPUSH
94712: CALL_OW 69
94716: IN
94717: PUSH
94718: LD_VAR 0 9
94722: PPUSH
94723: LD_VAR 0 4
94727: PUSH
94728: LD_VAR 0 7
94732: ARRAY
94733: PPUSH
94734: CALL_OW 296
94738: PUSH
94739: LD_INT 5
94741: LESS
94742: AND
94743: IFFALSE 94760
// ComAutodestruct ( group [ i ] ) ;
94745: LD_VAR 0 4
94749: PUSH
94750: LD_VAR 0 7
94754: ARRAY
94755: PPUSH
94756: CALL 44488 0 1
// end ; if f_attack_depot then
94760: LD_VAR 0 25
94764: IFFALSE 94876
// begin k := 6 ;
94766: LD_ADDR_VAR 0 9
94770: PUSH
94771: LD_INT 6
94773: ST_TO_ADDR
// if tmp < k then
94774: LD_VAR 0 14
94778: PUSH
94779: LD_VAR 0 9
94783: LESS
94784: IFFALSE 94796
// k := tmp ;
94786: LD_ADDR_VAR 0 9
94790: PUSH
94791: LD_VAR 0 14
94795: ST_TO_ADDR
// for j = 1 to k do
94796: LD_ADDR_VAR 0 8
94800: PUSH
94801: DOUBLE
94802: LD_INT 1
94804: DEC
94805: ST_TO_ADDR
94806: LD_VAR 0 9
94810: PUSH
94811: FOR_TO
94812: IFFALSE 94874
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
94814: LD_VAR 0 8
94818: PPUSH
94819: CALL_OW 266
94823: PUSH
94824: LD_INT 0
94826: PUSH
94827: LD_INT 1
94829: PUSH
94830: EMPTY
94831: LIST
94832: LIST
94833: IN
94834: IFFALSE 94872
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
94836: LD_VAR 0 4
94840: PUSH
94841: LD_VAR 0 7
94845: ARRAY
94846: PPUSH
94847: LD_VAR 0 14
94851: PUSH
94852: LD_VAR 0 8
94856: ARRAY
94857: PPUSH
94858: CALL_OW 115
// attacking := true ;
94862: LD_ADDR_VAR 0 29
94866: PUSH
94867: LD_INT 1
94869: ST_TO_ADDR
// break ;
94870: GO 94874
// end ;
94872: GO 94811
94874: POP
94875: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
94876: LD_VAR 0 4
94880: PUSH
94881: LD_VAR 0 7
94885: ARRAY
94886: PPUSH
94887: CALL_OW 302
94891: PUSH
94892: LD_VAR 0 29
94896: NOT
94897: AND
94898: IFFALSE 95220
// begin if GetTag ( group [ i ] ) = 71 then
94900: LD_VAR 0 4
94904: PUSH
94905: LD_VAR 0 7
94909: ARRAY
94910: PPUSH
94911: CALL_OW 110
94915: PUSH
94916: LD_INT 71
94918: EQUAL
94919: IFFALSE 94960
// begin if HasTask ( group [ i ] ) then
94921: LD_VAR 0 4
94925: PUSH
94926: LD_VAR 0 7
94930: ARRAY
94931: PPUSH
94932: CALL_OW 314
94936: IFFALSE 94942
// continue else
94938: GO 91099
94940: GO 94960
// SetTag ( group [ i ] , 0 ) ;
94942: LD_VAR 0 4
94946: PUSH
94947: LD_VAR 0 7
94951: ARRAY
94952: PPUSH
94953: LD_INT 0
94955: PPUSH
94956: CALL_OW 109
// end ; k := 8 ;
94960: LD_ADDR_VAR 0 9
94964: PUSH
94965: LD_INT 8
94967: ST_TO_ADDR
// x := 0 ;
94968: LD_ADDR_VAR 0 10
94972: PUSH
94973: LD_INT 0
94975: ST_TO_ADDR
// if tmp < k then
94976: LD_VAR 0 14
94980: PUSH
94981: LD_VAR 0 9
94985: LESS
94986: IFFALSE 94998
// k := tmp ;
94988: LD_ADDR_VAR 0 9
94992: PUSH
94993: LD_VAR 0 14
94997: ST_TO_ADDR
// for j = 1 to k do
94998: LD_ADDR_VAR 0 8
95002: PUSH
95003: DOUBLE
95004: LD_INT 1
95006: DEC
95007: ST_TO_ADDR
95008: LD_VAR 0 9
95012: PUSH
95013: FOR_TO
95014: IFFALSE 95112
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
95016: LD_VAR 0 14
95020: PUSH
95021: LD_VAR 0 8
95025: ARRAY
95026: PPUSH
95027: CALL_OW 247
95031: PUSH
95032: LD_INT 1
95034: EQUAL
95035: PUSH
95036: LD_VAR 0 14
95040: PUSH
95041: LD_VAR 0 8
95045: ARRAY
95046: PPUSH
95047: CALL_OW 256
95051: PUSH
95052: LD_INT 250
95054: LESS
95055: PUSH
95056: LD_VAR 0 20
95060: AND
95061: PUSH
95062: LD_VAR 0 20
95066: NOT
95067: PUSH
95068: LD_VAR 0 14
95072: PUSH
95073: LD_VAR 0 8
95077: ARRAY
95078: PPUSH
95079: CALL_OW 256
95083: PUSH
95084: LD_INT 250
95086: GREATEREQUAL
95087: AND
95088: OR
95089: AND
95090: IFFALSE 95110
// begin x := tmp [ j ] ;
95092: LD_ADDR_VAR 0 10
95096: PUSH
95097: LD_VAR 0 14
95101: PUSH
95102: LD_VAR 0 8
95106: ARRAY
95107: ST_TO_ADDR
// break ;
95108: GO 95112
// end ;
95110: GO 95013
95112: POP
95113: POP
// if x then
95114: LD_VAR 0 10
95118: IFFALSE 95142
// ComAttackUnit ( group [ i ] , x ) else
95120: LD_VAR 0 4
95124: PUSH
95125: LD_VAR 0 7
95129: ARRAY
95130: PPUSH
95131: LD_VAR 0 10
95135: PPUSH
95136: CALL_OW 115
95140: GO 95166
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
95142: LD_VAR 0 4
95146: PUSH
95147: LD_VAR 0 7
95151: ARRAY
95152: PPUSH
95153: LD_VAR 0 14
95157: PUSH
95158: LD_INT 1
95160: ARRAY
95161: PPUSH
95162: CALL_OW 115
// if not HasTask ( group [ i ] ) then
95166: LD_VAR 0 4
95170: PUSH
95171: LD_VAR 0 7
95175: ARRAY
95176: PPUSH
95177: CALL_OW 314
95181: NOT
95182: IFFALSE 95220
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
95184: LD_VAR 0 4
95188: PUSH
95189: LD_VAR 0 7
95193: ARRAY
95194: PPUSH
95195: LD_VAR 0 14
95199: PPUSH
95200: LD_VAR 0 4
95204: PUSH
95205: LD_VAR 0 7
95209: ARRAY
95210: PPUSH
95211: CALL_OW 74
95215: PPUSH
95216: CALL_OW 115
// end ; end ; end ;
95220: GO 91099
95222: POP
95223: POP
// wait ( 0 0$2 ) ;
95224: LD_INT 70
95226: PPUSH
95227: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
95231: LD_VAR 0 4
95235: NOT
95236: PUSH
95237: LD_VAR 0 4
95241: PUSH
95242: EMPTY
95243: EQUAL
95244: OR
95245: PUSH
95246: LD_INT 81
95248: PUSH
95249: LD_VAR 0 35
95253: PUSH
95254: EMPTY
95255: LIST
95256: LIST
95257: PPUSH
95258: CALL_OW 69
95262: NOT
95263: OR
95264: IFFALSE 91084
// end ;
95266: LD_VAR 0 2
95270: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
95271: LD_INT 0
95273: PPUSH
95274: PPUSH
95275: PPUSH
95276: PPUSH
95277: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
95278: LD_VAR 0 1
95282: NOT
95283: PUSH
95284: LD_EXP 63
95288: PUSH
95289: LD_VAR 0 1
95293: ARRAY
95294: NOT
95295: OR
95296: PUSH
95297: LD_VAR 0 2
95301: NOT
95302: OR
95303: PUSH
95304: LD_VAR 0 3
95308: NOT
95309: OR
95310: IFFALSE 95314
// exit ;
95312: GO 95827
// side := mc_sides [ base ] ;
95314: LD_ADDR_VAR 0 6
95318: PUSH
95319: LD_EXP 89
95323: PUSH
95324: LD_VAR 0 1
95328: ARRAY
95329: ST_TO_ADDR
// if not side then
95330: LD_VAR 0 6
95334: NOT
95335: IFFALSE 95339
// exit ;
95337: GO 95827
// for i in solds do
95339: LD_ADDR_VAR 0 7
95343: PUSH
95344: LD_VAR 0 2
95348: PUSH
95349: FOR_IN
95350: IFFALSE 95411
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
95352: LD_VAR 0 7
95356: PPUSH
95357: CALL_OW 310
95361: PPUSH
95362: CALL_OW 266
95366: PUSH
95367: LD_INT 32
95369: PUSH
95370: LD_INT 31
95372: PUSH
95373: EMPTY
95374: LIST
95375: LIST
95376: IN
95377: IFFALSE 95397
// solds := solds diff i else
95379: LD_ADDR_VAR 0 2
95383: PUSH
95384: LD_VAR 0 2
95388: PUSH
95389: LD_VAR 0 7
95393: DIFF
95394: ST_TO_ADDR
95395: GO 95409
// SetTag ( i , 18 ) ;
95397: LD_VAR 0 7
95401: PPUSH
95402: LD_INT 18
95404: PPUSH
95405: CALL_OW 109
95409: GO 95349
95411: POP
95412: POP
// if not solds then
95413: LD_VAR 0 2
95417: NOT
95418: IFFALSE 95422
// exit ;
95420: GO 95827
// repeat wait ( 0 0$1 ) ;
95422: LD_INT 35
95424: PPUSH
95425: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
95429: LD_ADDR_VAR 0 5
95433: PUSH
95434: LD_VAR 0 6
95438: PPUSH
95439: LD_VAR 0 3
95443: PPUSH
95444: CALL 14203 0 2
95448: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
95449: LD_EXP 63
95453: PUSH
95454: LD_VAR 0 1
95458: ARRAY
95459: NOT
95460: PUSH
95461: LD_EXP 63
95465: PUSH
95466: LD_VAR 0 1
95470: ARRAY
95471: PUSH
95472: EMPTY
95473: EQUAL
95474: OR
95475: IFFALSE 95512
// begin for i in solds do
95477: LD_ADDR_VAR 0 7
95481: PUSH
95482: LD_VAR 0 2
95486: PUSH
95487: FOR_IN
95488: IFFALSE 95501
// ComStop ( i ) ;
95490: LD_VAR 0 7
95494: PPUSH
95495: CALL_OW 141
95499: GO 95487
95501: POP
95502: POP
// solds := [ ] ;
95503: LD_ADDR_VAR 0 2
95507: PUSH
95508: EMPTY
95509: ST_TO_ADDR
// exit ;
95510: GO 95827
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
95512: LD_VAR 0 5
95516: NOT
95517: PUSH
95518: LD_VAR 0 5
95522: PUSH
95523: LD_INT 3
95525: GREATER
95526: OR
95527: PUSH
95528: LD_EXP 85
95532: PUSH
95533: LD_VAR 0 1
95537: ARRAY
95538: OR
95539: IFFALSE 95580
// begin for i in solds do
95541: LD_ADDR_VAR 0 7
95545: PUSH
95546: LD_VAR 0 2
95550: PUSH
95551: FOR_IN
95552: IFFALSE 95576
// if HasTask ( i ) then
95554: LD_VAR 0 7
95558: PPUSH
95559: CALL_OW 314
95563: IFFALSE 95574
// ComStop ( i ) ;
95565: LD_VAR 0 7
95569: PPUSH
95570: CALL_OW 141
95574: GO 95551
95576: POP
95577: POP
// break ;
95578: GO 95815
// end ; for i in solds do
95580: LD_ADDR_VAR 0 7
95584: PUSH
95585: LD_VAR 0 2
95589: PUSH
95590: FOR_IN
95591: IFFALSE 95807
// begin if IsInUnit ( i ) then
95593: LD_VAR 0 7
95597: PPUSH
95598: CALL_OW 310
95602: IFFALSE 95613
// ComExitBuilding ( i ) ;
95604: LD_VAR 0 7
95608: PPUSH
95609: CALL_OW 122
// if GetLives ( i ) > 333 then
95613: LD_VAR 0 7
95617: PPUSH
95618: CALL_OW 256
95622: PUSH
95623: LD_INT 333
95625: GREATER
95626: IFFALSE 95654
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
95628: LD_VAR 0 7
95632: PPUSH
95633: LD_VAR 0 5
95637: PPUSH
95638: LD_VAR 0 7
95642: PPUSH
95643: CALL_OW 74
95647: PPUSH
95648: CALL_OW 115
95652: GO 95805
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
95654: LD_ADDR_VAR 0 8
95658: PUSH
95659: LD_EXP 63
95663: PUSH
95664: LD_VAR 0 1
95668: ARRAY
95669: PPUSH
95670: LD_INT 2
95672: PUSH
95673: LD_INT 30
95675: PUSH
95676: LD_INT 0
95678: PUSH
95679: EMPTY
95680: LIST
95681: LIST
95682: PUSH
95683: LD_INT 30
95685: PUSH
95686: LD_INT 1
95688: PUSH
95689: EMPTY
95690: LIST
95691: LIST
95692: PUSH
95693: LD_INT 30
95695: PUSH
95696: LD_INT 6
95698: PUSH
95699: EMPTY
95700: LIST
95701: LIST
95702: PUSH
95703: EMPTY
95704: LIST
95705: LIST
95706: LIST
95707: LIST
95708: PPUSH
95709: CALL_OW 72
95713: PPUSH
95714: LD_VAR 0 7
95718: PPUSH
95719: CALL_OW 74
95723: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
95724: LD_VAR 0 7
95728: PPUSH
95729: LD_VAR 0 8
95733: PPUSH
95734: CALL_OW 250
95738: PPUSH
95739: LD_INT 3
95741: PPUSH
95742: LD_INT 5
95744: PPUSH
95745: CALL_OW 272
95749: PPUSH
95750: LD_VAR 0 8
95754: PPUSH
95755: CALL_OW 251
95759: PPUSH
95760: LD_INT 3
95762: PPUSH
95763: LD_INT 5
95765: PPUSH
95766: CALL_OW 273
95770: PPUSH
95771: CALL_OW 111
// SetTag ( i , 0 ) ;
95775: LD_VAR 0 7
95779: PPUSH
95780: LD_INT 0
95782: PPUSH
95783: CALL_OW 109
// solds := solds diff i ;
95787: LD_ADDR_VAR 0 2
95791: PUSH
95792: LD_VAR 0 2
95796: PUSH
95797: LD_VAR 0 7
95801: DIFF
95802: ST_TO_ADDR
// continue ;
95803: GO 95590
// end ; end ;
95805: GO 95590
95807: POP
95808: POP
// until solds ;
95809: LD_VAR 0 2
95813: IFFALSE 95422
// MC_Reset ( base , 18 ) ;
95815: LD_VAR 0 1
95819: PPUSH
95820: LD_INT 18
95822: PPUSH
95823: CALL 52990 0 2
// end ;
95827: LD_VAR 0 4
95831: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
95832: LD_INT 0
95834: PPUSH
95835: PPUSH
95836: PPUSH
95837: PPUSH
95838: PPUSH
95839: PPUSH
95840: PPUSH
95841: PPUSH
95842: PPUSH
95843: PPUSH
95844: PPUSH
95845: PPUSH
95846: PPUSH
95847: PPUSH
95848: PPUSH
95849: PPUSH
95850: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
95851: LD_ADDR_VAR 0 13
95855: PUSH
95856: LD_EXP 63
95860: PUSH
95861: LD_VAR 0 1
95865: ARRAY
95866: PPUSH
95867: LD_INT 25
95869: PUSH
95870: LD_INT 3
95872: PUSH
95873: EMPTY
95874: LIST
95875: LIST
95876: PPUSH
95877: CALL_OW 72
95881: ST_TO_ADDR
// if mc_remote_driver [ base ] then
95882: LD_EXP 103
95886: PUSH
95887: LD_VAR 0 1
95891: ARRAY
95892: IFFALSE 95916
// mechs := mechs diff mc_remote_driver [ base ] ;
95894: LD_ADDR_VAR 0 13
95898: PUSH
95899: LD_VAR 0 13
95903: PUSH
95904: LD_EXP 103
95908: PUSH
95909: LD_VAR 0 1
95913: ARRAY
95914: DIFF
95915: ST_TO_ADDR
// for i in mechs do
95916: LD_ADDR_VAR 0 5
95920: PUSH
95921: LD_VAR 0 13
95925: PUSH
95926: FOR_IN
95927: IFFALSE 95962
// if GetTag ( i ) > 0 then
95929: LD_VAR 0 5
95933: PPUSH
95934: CALL_OW 110
95938: PUSH
95939: LD_INT 0
95941: GREATER
95942: IFFALSE 95960
// mechs := mechs diff i ;
95944: LD_ADDR_VAR 0 13
95948: PUSH
95949: LD_VAR 0 13
95953: PUSH
95954: LD_VAR 0 5
95958: DIFF
95959: ST_TO_ADDR
95960: GO 95926
95962: POP
95963: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
95964: LD_ADDR_VAR 0 9
95968: PUSH
95969: LD_EXP 63
95973: PUSH
95974: LD_VAR 0 1
95978: ARRAY
95979: PPUSH
95980: LD_INT 2
95982: PUSH
95983: LD_INT 25
95985: PUSH
95986: LD_INT 1
95988: PUSH
95989: EMPTY
95990: LIST
95991: LIST
95992: PUSH
95993: LD_INT 25
95995: PUSH
95996: LD_INT 5
95998: PUSH
95999: EMPTY
96000: LIST
96001: LIST
96002: PUSH
96003: LD_INT 25
96005: PUSH
96006: LD_INT 8
96008: PUSH
96009: EMPTY
96010: LIST
96011: LIST
96012: PUSH
96013: LD_INT 25
96015: PUSH
96016: LD_INT 9
96018: PUSH
96019: EMPTY
96020: LIST
96021: LIST
96022: PUSH
96023: EMPTY
96024: LIST
96025: LIST
96026: LIST
96027: LIST
96028: LIST
96029: PPUSH
96030: CALL_OW 72
96034: ST_TO_ADDR
// if not defenders and not solds then
96035: LD_VAR 0 2
96039: NOT
96040: PUSH
96041: LD_VAR 0 9
96045: NOT
96046: AND
96047: IFFALSE 96051
// exit ;
96049: GO 97677
// depot_under_attack := false ;
96051: LD_ADDR_VAR 0 17
96055: PUSH
96056: LD_INT 0
96058: ST_TO_ADDR
// sold_defenders := [ ] ;
96059: LD_ADDR_VAR 0 18
96063: PUSH
96064: EMPTY
96065: ST_TO_ADDR
// if mechs then
96066: LD_VAR 0 13
96070: IFFALSE 96199
// for i in defenders do
96072: LD_ADDR_VAR 0 5
96076: PUSH
96077: LD_VAR 0 2
96081: PUSH
96082: FOR_IN
96083: IFFALSE 96197
// begin SetTag ( i , 20 ) ;
96085: LD_VAR 0 5
96089: PPUSH
96090: LD_INT 20
96092: PPUSH
96093: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
96097: LD_VAR 0 5
96101: PPUSH
96102: CALL_OW 263
96106: PUSH
96107: LD_INT 1
96109: EQUAL
96110: PUSH
96111: LD_VAR 0 5
96115: PPUSH
96116: CALL_OW 311
96120: NOT
96121: AND
96122: PUSH
96123: LD_VAR 0 13
96127: AND
96128: IFFALSE 96195
// begin un := mechs [ 1 ] ;
96130: LD_ADDR_VAR 0 11
96134: PUSH
96135: LD_VAR 0 13
96139: PUSH
96140: LD_INT 1
96142: ARRAY
96143: ST_TO_ADDR
// ComExitBuilding ( un ) ;
96144: LD_VAR 0 11
96148: PPUSH
96149: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
96153: LD_VAR 0 11
96157: PPUSH
96158: LD_VAR 0 5
96162: PPUSH
96163: CALL_OW 180
// SetTag ( un , 19 ) ;
96167: LD_VAR 0 11
96171: PPUSH
96172: LD_INT 19
96174: PPUSH
96175: CALL_OW 109
// mechs := mechs diff un ;
96179: LD_ADDR_VAR 0 13
96183: PUSH
96184: LD_VAR 0 13
96188: PUSH
96189: LD_VAR 0 11
96193: DIFF
96194: ST_TO_ADDR
// end ; end ;
96195: GO 96082
96197: POP
96198: POP
// if solds then
96199: LD_VAR 0 9
96203: IFFALSE 96262
// for i in solds do
96205: LD_ADDR_VAR 0 5
96209: PUSH
96210: LD_VAR 0 9
96214: PUSH
96215: FOR_IN
96216: IFFALSE 96260
// if not GetTag ( i ) then
96218: LD_VAR 0 5
96222: PPUSH
96223: CALL_OW 110
96227: NOT
96228: IFFALSE 96258
// begin defenders := defenders union i ;
96230: LD_ADDR_VAR 0 2
96234: PUSH
96235: LD_VAR 0 2
96239: PUSH
96240: LD_VAR 0 5
96244: UNION
96245: ST_TO_ADDR
// SetTag ( i , 18 ) ;
96246: LD_VAR 0 5
96250: PPUSH
96251: LD_INT 18
96253: PPUSH
96254: CALL_OW 109
// end ;
96258: GO 96215
96260: POP
96261: POP
// repeat wait ( 0 0$1 ) ;
96262: LD_INT 35
96264: PPUSH
96265: CALL_OW 67
// enemy := mc_scan [ base ] ;
96269: LD_ADDR_VAR 0 3
96273: PUSH
96274: LD_EXP 86
96278: PUSH
96279: LD_VAR 0 1
96283: ARRAY
96284: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
96285: LD_EXP 63
96289: PUSH
96290: LD_VAR 0 1
96294: ARRAY
96295: NOT
96296: PUSH
96297: LD_EXP 63
96301: PUSH
96302: LD_VAR 0 1
96306: ARRAY
96307: PUSH
96308: EMPTY
96309: EQUAL
96310: OR
96311: IFFALSE 96348
// begin for i in defenders do
96313: LD_ADDR_VAR 0 5
96317: PUSH
96318: LD_VAR 0 2
96322: PUSH
96323: FOR_IN
96324: IFFALSE 96337
// ComStop ( i ) ;
96326: LD_VAR 0 5
96330: PPUSH
96331: CALL_OW 141
96335: GO 96323
96337: POP
96338: POP
// defenders := [ ] ;
96339: LD_ADDR_VAR 0 2
96343: PUSH
96344: EMPTY
96345: ST_TO_ADDR
// exit ;
96346: GO 97677
// end ; for i in defenders do
96348: LD_ADDR_VAR 0 5
96352: PUSH
96353: LD_VAR 0 2
96357: PUSH
96358: FOR_IN
96359: IFFALSE 97177
// begin e := NearestUnitToUnit ( enemy , i ) ;
96361: LD_ADDR_VAR 0 14
96365: PUSH
96366: LD_VAR 0 3
96370: PPUSH
96371: LD_VAR 0 5
96375: PPUSH
96376: CALL_OW 74
96380: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
96381: LD_ADDR_VAR 0 8
96385: PUSH
96386: LD_EXP 63
96390: PUSH
96391: LD_VAR 0 1
96395: ARRAY
96396: PPUSH
96397: LD_INT 2
96399: PUSH
96400: LD_INT 30
96402: PUSH
96403: LD_INT 0
96405: PUSH
96406: EMPTY
96407: LIST
96408: LIST
96409: PUSH
96410: LD_INT 30
96412: PUSH
96413: LD_INT 1
96415: PUSH
96416: EMPTY
96417: LIST
96418: LIST
96419: PUSH
96420: EMPTY
96421: LIST
96422: LIST
96423: LIST
96424: PPUSH
96425: CALL_OW 72
96429: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
96430: LD_ADDR_VAR 0 17
96434: PUSH
96435: LD_VAR 0 8
96439: NOT
96440: PUSH
96441: LD_VAR 0 8
96445: PPUSH
96446: LD_INT 3
96448: PUSH
96449: LD_INT 24
96451: PUSH
96452: LD_INT 600
96454: PUSH
96455: EMPTY
96456: LIST
96457: LIST
96458: PUSH
96459: EMPTY
96460: LIST
96461: LIST
96462: PPUSH
96463: CALL_OW 72
96467: OR
96468: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
96469: LD_VAR 0 5
96473: PPUSH
96474: CALL_OW 247
96478: PUSH
96479: LD_INT 2
96481: DOUBLE
96482: EQUAL
96483: IFTRUE 96487
96485: GO 96883
96487: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
96488: LD_VAR 0 5
96492: PPUSH
96493: CALL_OW 256
96497: PUSH
96498: LD_INT 650
96500: GREATER
96501: PUSH
96502: LD_VAR 0 5
96506: PPUSH
96507: LD_VAR 0 14
96511: PPUSH
96512: CALL_OW 296
96516: PUSH
96517: LD_INT 40
96519: LESS
96520: PUSH
96521: LD_VAR 0 14
96525: PPUSH
96526: LD_EXP 88
96530: PUSH
96531: LD_VAR 0 1
96535: ARRAY
96536: PPUSH
96537: CALL_OW 308
96541: OR
96542: AND
96543: IFFALSE 96665
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
96545: LD_VAR 0 5
96549: PPUSH
96550: CALL_OW 262
96554: PUSH
96555: LD_INT 1
96557: EQUAL
96558: PUSH
96559: LD_VAR 0 5
96563: PPUSH
96564: CALL_OW 261
96568: PUSH
96569: LD_INT 30
96571: LESS
96572: AND
96573: PUSH
96574: LD_VAR 0 8
96578: AND
96579: IFFALSE 96649
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
96581: LD_VAR 0 5
96585: PPUSH
96586: LD_VAR 0 8
96590: PPUSH
96591: LD_VAR 0 5
96595: PPUSH
96596: CALL_OW 74
96600: PPUSH
96601: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
96605: LD_VAR 0 5
96609: PPUSH
96610: LD_VAR 0 8
96614: PPUSH
96615: LD_VAR 0 5
96619: PPUSH
96620: CALL_OW 74
96624: PPUSH
96625: CALL_OW 296
96629: PUSH
96630: LD_INT 6
96632: LESS
96633: IFFALSE 96647
// SetFuel ( i , 100 ) ;
96635: LD_VAR 0 5
96639: PPUSH
96640: LD_INT 100
96642: PPUSH
96643: CALL_OW 240
// end else
96647: GO 96663
// ComAttackUnit ( i , e ) ;
96649: LD_VAR 0 5
96653: PPUSH
96654: LD_VAR 0 14
96658: PPUSH
96659: CALL_OW 115
// end else
96663: GO 96766
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
96665: LD_VAR 0 14
96669: PPUSH
96670: LD_EXP 88
96674: PUSH
96675: LD_VAR 0 1
96679: ARRAY
96680: PPUSH
96681: CALL_OW 308
96685: NOT
96686: PUSH
96687: LD_VAR 0 5
96691: PPUSH
96692: LD_VAR 0 14
96696: PPUSH
96697: CALL_OW 296
96701: PUSH
96702: LD_INT 40
96704: GREATEREQUAL
96705: AND
96706: PUSH
96707: LD_VAR 0 5
96711: PPUSH
96712: CALL_OW 256
96716: PUSH
96717: LD_INT 650
96719: LESSEQUAL
96720: OR
96721: PUSH
96722: LD_VAR 0 5
96726: PPUSH
96727: LD_EXP 87
96731: PUSH
96732: LD_VAR 0 1
96736: ARRAY
96737: PPUSH
96738: CALL_OW 308
96742: NOT
96743: AND
96744: IFFALSE 96766
// ComMoveToArea ( i , mc_parking [ base ] ) ;
96746: LD_VAR 0 5
96750: PPUSH
96751: LD_EXP 87
96755: PUSH
96756: LD_VAR 0 1
96760: ARRAY
96761: PPUSH
96762: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
96766: LD_VAR 0 5
96770: PPUSH
96771: CALL_OW 256
96775: PUSH
96776: LD_INT 998
96778: LESS
96779: PUSH
96780: LD_VAR 0 5
96784: PPUSH
96785: CALL_OW 263
96789: PUSH
96790: LD_INT 1
96792: EQUAL
96793: AND
96794: PUSH
96795: LD_VAR 0 5
96799: PPUSH
96800: CALL_OW 311
96804: AND
96805: PUSH
96806: LD_VAR 0 5
96810: PPUSH
96811: LD_EXP 87
96815: PUSH
96816: LD_VAR 0 1
96820: ARRAY
96821: PPUSH
96822: CALL_OW 308
96826: AND
96827: IFFALSE 96881
// begin mech := IsDrivenBy ( i ) ;
96829: LD_ADDR_VAR 0 10
96833: PUSH
96834: LD_VAR 0 5
96838: PPUSH
96839: CALL_OW 311
96843: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
96844: LD_VAR 0 10
96848: PPUSH
96849: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
96853: LD_VAR 0 10
96857: PPUSH
96858: LD_VAR 0 5
96862: PPUSH
96863: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
96867: LD_VAR 0 10
96871: PPUSH
96872: LD_VAR 0 5
96876: PPUSH
96877: CALL_OW 180
// end ; end ; unit_human :
96881: GO 97148
96883: LD_INT 1
96885: DOUBLE
96886: EQUAL
96887: IFTRUE 96891
96889: GO 97147
96891: POP
// begin b := IsInUnit ( i ) ;
96892: LD_ADDR_VAR 0 19
96896: PUSH
96897: LD_VAR 0 5
96901: PPUSH
96902: CALL_OW 310
96906: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
96907: LD_ADDR_VAR 0 20
96911: PUSH
96912: LD_VAR 0 19
96916: NOT
96917: PUSH
96918: LD_VAR 0 19
96922: PPUSH
96923: CALL_OW 266
96927: PUSH
96928: LD_INT 32
96930: PUSH
96931: LD_INT 31
96933: PUSH
96934: EMPTY
96935: LIST
96936: LIST
96937: IN
96938: OR
96939: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
96940: LD_VAR 0 17
96944: PUSH
96945: LD_VAR 0 2
96949: PPUSH
96950: LD_INT 21
96952: PUSH
96953: LD_INT 2
96955: PUSH
96956: EMPTY
96957: LIST
96958: LIST
96959: PPUSH
96960: CALL_OW 72
96964: PUSH
96965: LD_INT 1
96967: LESSEQUAL
96968: OR
96969: PUSH
96970: LD_VAR 0 20
96974: AND
96975: PUSH
96976: LD_VAR 0 5
96980: PUSH
96981: LD_VAR 0 18
96985: IN
96986: NOT
96987: AND
96988: IFFALSE 97081
// begin if b then
96990: LD_VAR 0 19
96994: IFFALSE 97043
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
96996: LD_VAR 0 19
97000: PPUSH
97001: LD_VAR 0 3
97005: PPUSH
97006: LD_VAR 0 19
97010: PPUSH
97011: CALL_OW 74
97015: PPUSH
97016: CALL_OW 296
97020: PUSH
97021: LD_INT 10
97023: LESS
97024: PUSH
97025: LD_VAR 0 19
97029: PPUSH
97030: CALL_OW 461
97034: PUSH
97035: LD_INT 7
97037: NONEQUAL
97038: AND
97039: IFFALSE 97043
// continue ;
97041: GO 96358
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
97043: LD_ADDR_VAR 0 18
97047: PUSH
97048: LD_VAR 0 18
97052: PPUSH
97053: LD_VAR 0 18
97057: PUSH
97058: LD_INT 1
97060: PLUS
97061: PPUSH
97062: LD_VAR 0 5
97066: PPUSH
97067: CALL_OW 1
97071: ST_TO_ADDR
// ComExitBuilding ( i ) ;
97072: LD_VAR 0 5
97076: PPUSH
97077: CALL_OW 122
// end ; if sold_defenders then
97081: LD_VAR 0 18
97085: IFFALSE 97145
// if i in sold_defenders then
97087: LD_VAR 0 5
97091: PUSH
97092: LD_VAR 0 18
97096: IN
97097: IFFALSE 97145
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
97099: LD_VAR 0 5
97103: PPUSH
97104: CALL_OW 314
97108: NOT
97109: PUSH
97110: LD_VAR 0 5
97114: PPUSH
97115: LD_VAR 0 14
97119: PPUSH
97120: CALL_OW 296
97124: PUSH
97125: LD_INT 30
97127: LESS
97128: AND
97129: IFFALSE 97145
// ComAttackUnit ( i , e ) ;
97131: LD_VAR 0 5
97135: PPUSH
97136: LD_VAR 0 14
97140: PPUSH
97141: CALL_OW 115
// end ; end ; end ;
97145: GO 97148
97147: POP
// if IsDead ( i ) then
97148: LD_VAR 0 5
97152: PPUSH
97153: CALL_OW 301
97157: IFFALSE 97175
// defenders := defenders diff i ;
97159: LD_ADDR_VAR 0 2
97163: PUSH
97164: LD_VAR 0 2
97168: PUSH
97169: LD_VAR 0 5
97173: DIFF
97174: ST_TO_ADDR
// end ;
97175: GO 96358
97177: POP
97178: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
97179: LD_VAR 0 3
97183: NOT
97184: PUSH
97185: LD_VAR 0 2
97189: NOT
97190: OR
97191: PUSH
97192: LD_EXP 63
97196: PUSH
97197: LD_VAR 0 1
97201: ARRAY
97202: NOT
97203: OR
97204: IFFALSE 96262
// MC_Reset ( base , 18 ) ;
97206: LD_VAR 0 1
97210: PPUSH
97211: LD_INT 18
97213: PPUSH
97214: CALL 52990 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
97218: LD_ADDR_VAR 0 2
97222: PUSH
97223: LD_VAR 0 2
97227: PUSH
97228: LD_VAR 0 2
97232: PPUSH
97233: LD_INT 2
97235: PUSH
97236: LD_INT 25
97238: PUSH
97239: LD_INT 1
97241: PUSH
97242: EMPTY
97243: LIST
97244: LIST
97245: PUSH
97246: LD_INT 25
97248: PUSH
97249: LD_INT 5
97251: PUSH
97252: EMPTY
97253: LIST
97254: LIST
97255: PUSH
97256: LD_INT 25
97258: PUSH
97259: LD_INT 8
97261: PUSH
97262: EMPTY
97263: LIST
97264: LIST
97265: PUSH
97266: LD_INT 25
97268: PUSH
97269: LD_INT 9
97271: PUSH
97272: EMPTY
97273: LIST
97274: LIST
97275: PUSH
97276: EMPTY
97277: LIST
97278: LIST
97279: LIST
97280: LIST
97281: LIST
97282: PPUSH
97283: CALL_OW 72
97287: DIFF
97288: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
97289: LD_VAR 0 3
97293: NOT
97294: PUSH
97295: LD_VAR 0 2
97299: PPUSH
97300: LD_INT 21
97302: PUSH
97303: LD_INT 2
97305: PUSH
97306: EMPTY
97307: LIST
97308: LIST
97309: PPUSH
97310: CALL_OW 72
97314: AND
97315: IFFALSE 97653
// begin tmp := FilterByTag ( defenders , 19 ) ;
97317: LD_ADDR_VAR 0 12
97321: PUSH
97322: LD_VAR 0 2
97326: PPUSH
97327: LD_INT 19
97329: PPUSH
97330: CALL 45963 0 2
97334: ST_TO_ADDR
// if tmp then
97335: LD_VAR 0 12
97339: IFFALSE 97409
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
97341: LD_ADDR_VAR 0 12
97345: PUSH
97346: LD_VAR 0 12
97350: PPUSH
97351: LD_INT 25
97353: PUSH
97354: LD_INT 3
97356: PUSH
97357: EMPTY
97358: LIST
97359: LIST
97360: PPUSH
97361: CALL_OW 72
97365: ST_TO_ADDR
// if tmp then
97366: LD_VAR 0 12
97370: IFFALSE 97409
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
97372: LD_ADDR_EXP 75
97376: PUSH
97377: LD_EXP 75
97381: PPUSH
97382: LD_VAR 0 1
97386: PPUSH
97387: LD_EXP 75
97391: PUSH
97392: LD_VAR 0 1
97396: ARRAY
97397: PUSH
97398: LD_VAR 0 12
97402: UNION
97403: PPUSH
97404: CALL_OW 1
97408: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
97409: LD_VAR 0 1
97413: PPUSH
97414: LD_INT 19
97416: PPUSH
97417: CALL 52990 0 2
// repeat wait ( 0 0$1 ) ;
97421: LD_INT 35
97423: PPUSH
97424: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
97428: LD_EXP 63
97432: PUSH
97433: LD_VAR 0 1
97437: ARRAY
97438: NOT
97439: PUSH
97440: LD_EXP 63
97444: PUSH
97445: LD_VAR 0 1
97449: ARRAY
97450: PUSH
97451: EMPTY
97452: EQUAL
97453: OR
97454: IFFALSE 97491
// begin for i in defenders do
97456: LD_ADDR_VAR 0 5
97460: PUSH
97461: LD_VAR 0 2
97465: PUSH
97466: FOR_IN
97467: IFFALSE 97480
// ComStop ( i ) ;
97469: LD_VAR 0 5
97473: PPUSH
97474: CALL_OW 141
97478: GO 97466
97480: POP
97481: POP
// defenders := [ ] ;
97482: LD_ADDR_VAR 0 2
97486: PUSH
97487: EMPTY
97488: ST_TO_ADDR
// exit ;
97489: GO 97677
// end ; for i in defenders do
97491: LD_ADDR_VAR 0 5
97495: PUSH
97496: LD_VAR 0 2
97500: PUSH
97501: FOR_IN
97502: IFFALSE 97591
// begin if not IsInArea ( i , mc_parking [ base ] ) then
97504: LD_VAR 0 5
97508: PPUSH
97509: LD_EXP 87
97513: PUSH
97514: LD_VAR 0 1
97518: ARRAY
97519: PPUSH
97520: CALL_OW 308
97524: NOT
97525: IFFALSE 97549
// ComMoveToArea ( i , mc_parking [ base ] ) else
97527: LD_VAR 0 5
97531: PPUSH
97532: LD_EXP 87
97536: PUSH
97537: LD_VAR 0 1
97541: ARRAY
97542: PPUSH
97543: CALL_OW 113
97547: GO 97589
// if GetControl ( i ) = control_manual then
97549: LD_VAR 0 5
97553: PPUSH
97554: CALL_OW 263
97558: PUSH
97559: LD_INT 1
97561: EQUAL
97562: IFFALSE 97589
// if IsDrivenBy ( i ) then
97564: LD_VAR 0 5
97568: PPUSH
97569: CALL_OW 311
97573: IFFALSE 97589
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
97575: LD_VAR 0 5
97579: PPUSH
97580: CALL_OW 311
97584: PPUSH
97585: CALL_OW 121
// end ;
97589: GO 97501
97591: POP
97592: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
97593: LD_VAR 0 2
97597: PPUSH
97598: LD_INT 95
97600: PUSH
97601: LD_EXP 87
97605: PUSH
97606: LD_VAR 0 1
97610: ARRAY
97611: PUSH
97612: EMPTY
97613: LIST
97614: LIST
97615: PPUSH
97616: CALL_OW 72
97620: PUSH
97621: LD_VAR 0 2
97625: EQUAL
97626: PUSH
97627: LD_EXP 86
97631: PUSH
97632: LD_VAR 0 1
97636: ARRAY
97637: OR
97638: PUSH
97639: LD_EXP 63
97643: PUSH
97644: LD_VAR 0 1
97648: ARRAY
97649: NOT
97650: OR
97651: IFFALSE 97421
// end ; MC_Reset ( base , 19 ) ;
97653: LD_VAR 0 1
97657: PPUSH
97658: LD_INT 19
97660: PPUSH
97661: CALL 52990 0 2
// MC_Reset ( base , 20 ) ;
97665: LD_VAR 0 1
97669: PPUSH
97670: LD_INT 20
97672: PPUSH
97673: CALL 52990 0 2
// end ;
97677: LD_VAR 0 4
97681: RET
