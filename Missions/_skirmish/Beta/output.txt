// export MissionStart ; export southAreaBlocker ; starting begin southAreaBlocker = true ;
   0: LD_ADDR_EXP 2
   4: PUSH
   5: LD_INT 1
   7: ST_TO_ADDR
// ResetFog ;
   8: CALL_OW 335
// AnimateTrees ( true ) ;
  12: LD_INT 1
  14: PPUSH
  15: CALL_OW 573
// RevealFogArea ( 1 , BetaArea ) ;
  19: LD_INT 1
  21: PPUSH
  22: LD_INT 8
  24: PPUSH
  25: CALL_OW 332
// GameType ;
  29: CALL 5584 0 0
// SetBName ( BetaA , beta ) ;
  33: LD_INT 1
  35: PPUSH
  36: LD_STRING beta
  38: PPUSH
  39: CALL_OW 500
// SetBName ( BetaB , beta ) ;
  43: LD_INT 3
  45: PPUSH
  46: LD_STRING beta
  48: PPUSH
  49: CALL_OW 500
// SetResourceType ( GetBase ( BetaA ) , mat_cans , startCrates [ 1 ] ) ;
  53: LD_INT 1
  55: PPUSH
  56: CALL_OW 274
  60: PPUSH
  61: LD_INT 1
  63: PPUSH
  64: LD_EXP 43
  68: PUSH
  69: LD_INT 1
  71: ARRAY
  72: PPUSH
  73: CALL_OW 277
// SetResourceType ( GetBase ( BetaB ) , mat_cans , startCrates [ 2 ] ) ;
  77: LD_INT 3
  79: PPUSH
  80: CALL_OW 274
  84: PPUSH
  85: LD_INT 1
  87: PPUSH
  88: LD_EXP 43
  92: PUSH
  93: LD_INT 2
  95: ARRAY
  96: PPUSH
  97: CALL_OW 277
// PrepareHeroes ;
 101: CALL 2747 0 0
// PrepareBeta ;
 105: CALL 3136 0 0
// HideArea ( 1 , SouthArea ) ;
 109: LD_INT 1
 111: PPUSH
 112: LD_INT 16
 114: PPUSH
 115: CALL_OW 333
// InGameOn ;
 119: CALL_OW 8
// ComHold ( Brighton ) ;
 123: LD_EXP 9
 127: PPUSH
 128: CALL_OW 140
// CenterNowOnUnits ( Brighton ) ;
 132: LD_EXP 9
 136: PPUSH
 137: CALL_OW 87
// ComMoveXY ( Megan , 50 , 42 ) ;
 141: LD_EXP 11
 145: PPUSH
 146: LD_INT 50
 148: PPUSH
 149: LD_INT 42
 151: PPUSH
 152: CALL_OW 111
// repeat wait ( 0 0$1 ) until GetDistUnits ( Megan , Brighton ) < 3 ;
 156: LD_INT 35
 158: PPUSH
 159: CALL_OW 67
 163: LD_EXP 11
 167: PPUSH
 168: LD_EXP 9
 172: PPUSH
 173: CALL_OW 296
 177: PUSH
 178: LD_INT 3
 180: LESS
 181: IFFALSE 156
// ComTurnUnit ( Megan , Brighton ) ;
 183: LD_EXP 11
 187: PPUSH
 188: LD_EXP 9
 192: PPUSH
 193: CALL_OW 119
// Say ( Megan , DMegan-1a ) ;
 197: LD_EXP 11
 201: PPUSH
 202: LD_STRING DMegan-1a
 204: PPUSH
 205: CALL_OW 88
// wait ( 0 0$0.3 ) ;
 209: LD_INT 10
 211: PPUSH
 212: CALL_OW 67
// ComTurnUnit ( Brighton , Megan ) ;
 216: LD_EXP 9
 220: PPUSH
 221: LD_EXP 11
 225: PPUSH
 226: CALL_OW 119
// Say ( Brighton , DBrighton-1a ) ;
 230: LD_EXP 9
 234: PPUSH
 235: LD_STRING DBrighton-1a
 237: PPUSH
 238: CALL_OW 88
// Say ( Megan , DMegan-2a ) ;
 242: LD_EXP 11
 246: PPUSH
 247: LD_STRING DMegan-2a
 249: PPUSH
 250: CALL_OW 88
// Say ( Brighton , DBrighton-2a ) ;
 254: LD_EXP 9
 258: PPUSH
 259: LD_STRING DBrighton-2a
 261: PPUSH
 262: CALL_OW 88
// Say ( Megan , DMegan-3a ) ;
 266: LD_EXP 11
 270: PPUSH
 271: LD_STRING DMegan-3a
 273: PPUSH
 274: CALL_OW 88
// Say ( Brighton , DBrighton-3a ) ;
 278: LD_EXP 9
 282: PPUSH
 283: LD_STRING DBrighton-3a
 285: PPUSH
 286: CALL_OW 88
// Say ( Megan , DMegan-4a ) ;
 290: LD_EXP 11
 294: PPUSH
 295: LD_STRING DMegan-4a
 297: PPUSH
 298: CALL_OW 88
// ComMoveXY ( Megan , 40 , 37 ) ;
 302: LD_EXP 11
 306: PPUSH
 307: LD_INT 40
 309: PPUSH
 310: LD_INT 37
 312: PPUSH
 313: CALL_OW 111
// AddComTurnUnit ( Megan , Brighton ) ;
 317: LD_EXP 11
 321: PPUSH
 322: LD_EXP 9
 326: PPUSH
 327: CALL_OW 179
// ComMoveXY ( Palmer , 50 , 42 ) ;
 331: LD_EXP 10
 335: PPUSH
 336: LD_INT 50
 338: PPUSH
 339: LD_INT 42
 341: PPUSH
 342: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 346: LD_INT 35
 348: PPUSH
 349: CALL_OW 67
// until GetDistUnits ( Brighton , Palmer ) < 6 ;
 353: LD_EXP 9
 357: PPUSH
 358: LD_EXP 10
 362: PPUSH
 363: CALL_OW 296
 367: PUSH
 368: LD_INT 6
 370: LESS
 371: IFFALSE 346
// ComTurnUnit ( Brighton , Palmer ) ;
 373: LD_EXP 9
 377: PPUSH
 378: LD_EXP 10
 382: PPUSH
 383: CALL_OW 119
// ComTurnUnit ( Palmer , Brighton ) ;
 387: LD_EXP 10
 391: PPUSH
 392: LD_EXP 9
 396: PPUSH
 397: CALL_OW 119
// Say ( Megan , DMegan-5a ) ;
 401: LD_EXP 11
 405: PPUSH
 406: LD_STRING DMegan-5a
 408: PPUSH
 409: CALL_OW 88
// Say ( Palmer , DPalmer-1 ) ;
 413: LD_EXP 10
 417: PPUSH
 418: LD_STRING DPalmer-1
 420: PPUSH
 421: CALL_OW 88
// Say ( Brighton , DBrighton-1 ) ;
 425: LD_EXP 9
 429: PPUSH
 430: LD_STRING DBrighton-1
 432: PPUSH
 433: CALL_OW 88
// Say ( Palmer , DPalmer-2 ) ;
 437: LD_EXP 10
 441: PPUSH
 442: LD_STRING DPalmer-2
 444: PPUSH
 445: CALL_OW 88
// Say ( Brighton , DBrighton-2 ) ;
 449: LD_EXP 9
 453: PPUSH
 454: LD_STRING DBrighton-2
 456: PPUSH
 457: CALL_OW 88
// Say ( Palmer , DPalmer-3 ) ;
 461: LD_EXP 10
 465: PPUSH
 466: LD_STRING DPalmer-3
 468: PPUSH
 469: CALL_OW 88
// Say ( Brighton , DBrighton-3 ) ;
 473: LD_EXP 9
 477: PPUSH
 478: LD_STRING DBrighton-3
 480: PPUSH
 481: CALL_OW 88
// Say ( Palmer , DPalmer-4 ) ;
 485: LD_EXP 10
 489: PPUSH
 490: LD_STRING DPalmer-4
 492: PPUSH
 493: CALL_OW 88
// ComEnterUnit ( Palmer , AmTower ) ;
 497: LD_EXP 10
 501: PPUSH
 502: LD_INT 6
 504: PPUSH
 505: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
 509: LD_INT 35
 511: PPUSH
 512: CALL_OW 67
// until IsInUnit ( Palmer ) = AmTower ;
 516: LD_EXP 10
 520: PPUSH
 521: CALL_OW 310
 525: PUSH
 526: LD_INT 6
 528: EQUAL
 529: IFFALSE 509
// SayRadio ( Palmer , DPalmer-5 ) ;
 531: LD_EXP 10
 535: PPUSH
 536: LD_STRING DPalmer-5
 538: PPUSH
 539: CALL_OW 94
// ComMoveXY ( Brighton , 59 , 36 ) ;
 543: LD_EXP 9
 547: PPUSH
 548: LD_INT 59
 550: PPUSH
 551: LD_INT 36
 553: PPUSH
 554: CALL_OW 111
// ComMoveXY ( Megan , 60 , 35 ) ;
 558: LD_EXP 11
 562: PPUSH
 563: LD_INT 60
 565: PPUSH
 566: LD_INT 35
 568: PPUSH
 569: CALL_OW 111
// ComMoveXY ( Palmer , 60 , 34 ) ;
 573: LD_EXP 10
 577: PPUSH
 578: LD_INT 60
 580: PPUSH
 581: LD_INT 34
 583: PPUSH
 584: CALL_OW 111
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 588: LD_EXP 9
 592: PPUSH
 593: LD_INT 99
 595: PPUSH
 596: LD_INT 37
 598: PPUSH
 599: CALL_OW 178
// AddComTurnUnit ( Megan , Brighton ) ;
 603: LD_EXP 11
 607: PPUSH
 608: LD_EXP 9
 612: PPUSH
 613: CALL_OW 179
// AddComTurnUnit ( Palmer , Brighton ) ;
 617: LD_EXP 10
 621: PPUSH
 622: LD_EXP 9
 626: PPUSH
 627: CALL_OW 179
// CenterOnXY ( 64 , 40 ) ;
 631: LD_INT 64
 633: PPUSH
 634: LD_INT 40
 636: PPUSH
 637: CALL_OW 84
// ComMeeting ( BetaSquad , SpotArea ) ;
 641: LD_EXP 12
 645: PPUSH
 646: LD_INT 13
 648: PPUSH
 649: CALL 12579 0 2
// wait ( 0 0$30 ) ;
 653: LD_INT 1050
 655: PPUSH
 656: CALL_OW 67
// Say ( Brighton , DBrighton-4 ) ;
 660: LD_EXP 9
 664: PPUSH
 665: LD_STRING DBrighton-4
 667: PPUSH
 668: CALL_OW 88
// Say ( Brighton , DBrighton-5 ) ;
 672: LD_EXP 9
 676: PPUSH
 677: LD_STRING DBrighton-5
 679: PPUSH
 680: CALL_OW 88
// AddComTurnUnit ( Brighton , Megan ) ;
 684: LD_EXP 9
 688: PPUSH
 689: LD_EXP 11
 693: PPUSH
 694: CALL_OW 179
// Say ( Brighton , DBrighton-6 ) ;
 698: LD_EXP 9
 702: PPUSH
 703: LD_STRING DBrighton-6
 705: PPUSH
 706: CALL_OW 88
// Say ( Megan , DMegan-1 ) ;
 710: LD_EXP 11
 714: PPUSH
 715: LD_STRING DMegan-1
 717: PPUSH
 718: CALL_OW 88
// Say ( Brighton , DBrighton-7 ) ;
 722: LD_EXP 9
 726: PPUSH
 727: LD_STRING DBrighton-7
 729: PPUSH
 730: CALL_OW 88
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 734: LD_EXP 9
 738: PPUSH
 739: LD_INT 99
 741: PPUSH
 742: LD_INT 37
 744: PPUSH
 745: CALL_OW 178
// Say ( Brighton , DBrighton-8 ) ;
 749: LD_EXP 9
 753: PPUSH
 754: LD_STRING DBrighton-8
 756: PPUSH
 757: CALL_OW 88
// ChangeMissionObjectives ( C1 ) ;
 761: LD_STRING C1
 763: PPUSH
 764: CALL_OW 337
// InGameOff ;
 768: CALL_OW 9
// SaveForQuickRestart ;
 772: CALL_OW 22
// MissionStart := true ;
 776: LD_ADDR_EXP 1
 780: PUSH
 781: LD_INT 1
 783: ST_TO_ADDR
// PrepareRUBase_v2 ;
 784: CALL 4859 0 0
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
 788: LD_ADDR_EXP 64
 792: PUSH
 793: LD_EXP 64
 797: PPUSH
 798: LD_INT 1
 800: PPUSH
 801: LD_INT 22
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PPUSH
 811: CALL_OW 69
 815: PPUSH
 816: CALL_OW 1
 820: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , RU_SecondPersonnel ) ;
 821: LD_ADDR_EXP 64
 825: PUSH
 826: LD_EXP 64
 830: PPUSH
 831: LD_INT 2
 833: PPUSH
 834: LD_EXP 36
 838: PPUSH
 839: CALL_OW 1
 843: ST_TO_ADDR
// MC_Start ( ) ;
 844: CALL 52042 0 0
// music_nat := 1 ;
 848: LD_ADDR_OWVAR 71
 852: PUSH
 853: LD_INT 1
 855: ST_TO_ADDR
// end ;
 856: END
// every 1 trigger southAreaBlocker do var unit ;
 857: LD_EXP 2
 861: IFFALSE 1022
 863: GO 865
 865: DISABLE
 866: LD_INT 0
 868: PPUSH
// begin enable ;
 869: ENABLE
// if FilterUnitsInArea ( SouthArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) = 0 then
 870: LD_INT 16
 872: PPUSH
 873: LD_INT 22
 875: PUSH
 876: LD_INT 1
 878: PUSH
 879: EMPTY
 880: LIST
 881: LIST
 882: PUSH
 883: LD_INT 2
 885: PUSH
 886: LD_INT 21
 888: PUSH
 889: LD_INT 1
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: PUSH
 896: LD_INT 21
 898: PUSH
 899: LD_INT 2
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PPUSH
 915: CALL_OW 70
 919: PUSH
 920: LD_INT 0
 922: EQUAL
 923: IFFALSE 927
// exit ;
 925: GO 1022
// for unit in FilterUnitsInArea ( SouthArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 927: LD_ADDR_VAR 0 1
 931: PUSH
 932: LD_INT 16
 934: PPUSH
 935: LD_INT 22
 937: PUSH
 938: LD_INT 1
 940: PUSH
 941: EMPTY
 942: LIST
 943: LIST
 944: PUSH
 945: LD_INT 2
 947: PUSH
 948: LD_INT 21
 950: PUSH
 951: LD_INT 1
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PUSH
 958: LD_INT 21
 960: PUSH
 961: LD_INT 2
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: LIST
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PPUSH
 977: CALL_OW 70
 981: PUSH
 982: FOR_IN
 983: IFFALSE 1020
// ComMoveXY ( unit , GetX ( unit ) , GetY ( unit ) - 2 ) ;
 985: LD_VAR 0 1
 989: PPUSH
 990: LD_VAR 0 1
 994: PPUSH
 995: CALL_OW 250
 999: PPUSH
1000: LD_VAR 0 1
1004: PPUSH
1005: CALL_OW 251
1009: PUSH
1010: LD_INT 2
1012: MINUS
1013: PPUSH
1014: CALL_OW 111
1018: GO 982
1020: POP
1021: POP
// end ;
1022: PPOPN 1
1024: END
// export ArmadaArrived , FirstAssaultRepelled ; export RuSpeaker ; every 0 0$1 trigger MissionStart do var i , tmp ;
1025: LD_EXP 1
1029: IFFALSE 1662
1031: GO 1033
1033: DISABLE
1034: LD_INT 0
1036: PPUSH
1037: PPUSH
// begin wait ( ruArrival ) ;
1038: LD_EXP 42
1042: PPUSH
1043: CALL_OW 67
// PrepareRUArmada ;
1047: CALL 3718 0 0
// wait ( 0 0$3 ) ;
1051: LD_INT 105
1053: PPUSH
1054: CALL_OW 67
// tmp := AreaToList ( RUArrivalParkingArea , 0 ) ;
1058: LD_ADDR_VAR 0 2
1062: PUSH
1063: LD_INT 15
1065: PPUSH
1066: LD_INT 0
1068: PPUSH
1069: CALL_OW 517
1073: ST_TO_ADDR
// for i = 1 to RUArmada do
1074: LD_ADDR_VAR 0 1
1078: PUSH
1079: DOUBLE
1080: LD_INT 1
1082: DEC
1083: ST_TO_ADDR
1084: LD_EXP 17
1088: PUSH
1089: FOR_TO
1090: IFFALSE 1139
// ComMoveXY ( RUArmada [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1092: LD_EXP 17
1096: PUSH
1097: LD_VAR 0 1
1101: ARRAY
1102: PPUSH
1103: LD_VAR 0 2
1107: PUSH
1108: LD_INT 1
1110: ARRAY
1111: PUSH
1112: LD_VAR 0 1
1116: ARRAY
1117: PPUSH
1118: LD_VAR 0 2
1122: PUSH
1123: LD_INT 2
1125: ARRAY
1126: PUSH
1127: LD_VAR 0 1
1131: ARRAY
1132: PPUSH
1133: CALL_OW 111
1137: GO 1089
1139: POP
1140: POP
// ArmadaArrived := true ;
1141: LD_ADDR_EXP 3
1145: PUSH
1146: LD_INT 1
1148: ST_TO_ADDR
// Say ( Palmer , DPalmer-A1 ) ;
1149: LD_EXP 10
1153: PPUSH
1154: LD_STRING DPalmer-A1
1156: PPUSH
1157: CALL_OW 88
// Say ( Brighton , DBrighton-A1 ) ;
1161: LD_EXP 9
1165: PPUSH
1166: LD_STRING DBrighton-A1
1168: PPUSH
1169: CALL_OW 88
// wait ( 0 0$20 ) ;
1173: LD_INT 700
1175: PPUSH
1176: CALL_OW 67
// PrepareRUBase ;
1180: CALL 4443 0 0
// wait ( 1 1$20 ) ;
1184: LD_INT 2800
1186: PPUSH
1187: CALL_OW 67
// PrepareRUBulldozers ;
1191: CALL 4330 0 0
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
1195: LD_EXP 18
1199: PUSH
1200: LD_INT 1
1202: ARRAY
1203: PPUSH
1204: LD_INT 9
1206: PPUSH
1207: CALL 12436 0 2
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
1211: LD_EXP 18
1215: PUSH
1216: LD_INT 2
1218: ARRAY
1219: PPUSH
1220: LD_INT 11
1222: PPUSH
1223: CALL 12436 0 2
// DoNotAttack ( 1 , Bulldozers [ 1 ] ) ;
1227: LD_INT 1
1229: PPUSH
1230: LD_EXP 18
1234: PUSH
1235: LD_INT 1
1237: ARRAY
1238: PPUSH
1239: CALL_OW 471
// DoNotAttack ( 1 , Bulldozers [ 2 ] ) ;
1243: LD_INT 1
1245: PPUSH
1246: LD_EXP 18
1250: PUSH
1251: LD_INT 2
1253: ARRAY
1254: PPUSH
1255: CALL_OW 471
// wait ( 0 0$50 ) ;
1259: LD_INT 1750
1261: PPUSH
1262: CALL_OW 67
// ShowArea ( 1 , SouthArea ) ;
1266: LD_INT 1
1268: PPUSH
1269: LD_INT 16
1271: PPUSH
1272: CALL_OW 334
// InGameOn ;
1276: CALL_OW 8
// PlaceSeeing ( 95 , 93 , 1 , - 30 ) ;
1280: LD_INT 95
1282: PPUSH
1283: LD_INT 93
1285: PPUSH
1286: LD_INT 1
1288: PPUSH
1289: LD_INT 30
1291: NEG
1292: PPUSH
1293: CALL_OW 330
// ComMoveXY ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) , 63 , 39 ) ;
1297: LD_INT 10
1299: PPUSH
1300: LD_INT 22
1302: PUSH
1303: LD_INT 1
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: PPUSH
1310: CALL_OW 70
1314: PPUSH
1315: LD_INT 63
1317: PPUSH
1318: LD_INT 39
1320: PPUSH
1321: CALL_OW 111
// CenterOnXY ( 95 , 93 ) ;
1325: LD_INT 95
1327: PPUSH
1328: LD_INT 93
1330: PPUSH
1331: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
1335: LD_INT 35
1337: PPUSH
1338: CALL_OW 67
// if not HasTask ( Bulldozers [ 1 ] ) then
1342: LD_EXP 18
1346: PUSH
1347: LD_INT 1
1349: ARRAY
1350: PPUSH
1351: CALL_OW 314
1355: NOT
1356: IFFALSE 1374
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
1358: LD_EXP 18
1362: PUSH
1363: LD_INT 1
1365: ARRAY
1366: PPUSH
1367: LD_INT 9
1369: PPUSH
1370: CALL 12436 0 2
// if not HasTask ( Bulldozers [ 2 ] ) then
1374: LD_EXP 18
1378: PUSH
1379: LD_INT 2
1381: ARRAY
1382: PPUSH
1383: CALL_OW 314
1387: NOT
1388: IFFALSE 1406
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
1390: LD_EXP 18
1394: PUSH
1395: LD_INT 2
1397: ARRAY
1398: PPUSH
1399: LD_INT 11
1401: PPUSH
1402: CALL 12436 0 2
// until ListEnvironmentArea ( BulldozerArea ) < 2 or ListEnvironmentArea ( BulldozerArea2 ) < 2 or IsDead ( Bulldozers [ 1 ] ) ;
1406: LD_INT 9
1408: PPUSH
1409: CALL_OW 353
1413: PUSH
1414: LD_INT 2
1416: LESS
1417: PUSH
1418: LD_INT 11
1420: PPUSH
1421: CALL_OW 353
1425: PUSH
1426: LD_INT 2
1428: LESS
1429: OR
1430: PUSH
1431: LD_EXP 18
1435: PUSH
1436: LD_INT 1
1438: ARRAY
1439: PPUSH
1440: CALL_OW 301
1444: OR
1445: IFFALSE 1335
// if UnitFilter ( Bulldozers , [ f_ok ] ) then
1447: LD_EXP 18
1451: PPUSH
1452: LD_INT 50
1454: PUSH
1455: EMPTY
1456: LIST
1457: PPUSH
1458: CALL_OW 72
1462: IFFALSE 1515
// begin wait ( 0 0$10 ) ;
1464: LD_INT 350
1466: PPUSH
1467: CALL_OW 67
// ComMoveXY ( Bulldozers , 120 , 131 ) ;
1471: LD_EXP 18
1475: PPUSH
1476: LD_INT 120
1478: PPUSH
1479: LD_INT 131
1481: PPUSH
1482: CALL_OW 111
// for i in Bulldozers do
1486: LD_ADDR_VAR 0 1
1490: PUSH
1491: LD_EXP 18
1495: PUSH
1496: FOR_IN
1497: IFFALSE 1513
// NormalAttack ( 1 , i ) ;
1499: LD_INT 1
1501: PPUSH
1502: LD_VAR 0 1
1506: PPUSH
1507: CALL_OW 472
1511: GO 1496
1513: POP
1514: POP
// end ; wait ( 0 0$10 ) ;
1515: LD_INT 350
1517: PPUSH
1518: CALL_OW 67
// RemoveSeeing ( 95 , 93 , 1 ) ;
1522: LD_INT 95
1524: PPUSH
1525: LD_INT 93
1527: PPUSH
1528: LD_INT 1
1530: PPUSH
1531: CALL_OW 331
// southAreaBlocker = false ;
1535: LD_ADDR_EXP 2
1539: PUSH
1540: LD_INT 0
1542: ST_TO_ADDR
// wait ( 0 0$3 ) ;
1543: LD_INT 105
1545: PPUSH
1546: CALL_OW 67
// InGameOff ;
1550: CALL_OW 9
// SayEffect ( DRuSol-A1 ) ;
1554: LD_STRING DRuSol-A1
1556: PPUSH
1557: CALL_OW 96
// AssaultStarted := true ;
1561: LD_ADDR_EXP 8
1565: PUSH
1566: LD_INT 1
1568: ST_TO_ADDR
// wait ( 0 0$2 ) ;
1569: LD_INT 70
1571: PPUSH
1572: CALL_OW 67
// Say ( Yashin , DDeath-Yas-1 ) ;
1576: LD_EXP 13
1580: PPUSH
1581: LD_STRING DDeath-Yas-1
1583: PPUSH
1584: CALL_OW 88
// Say ( Gaydar , DDeath-Gay-2 ) ;
1588: LD_EXP 15
1592: PPUSH
1593: LD_STRING DDeath-Gay-2
1595: PPUSH
1596: CALL_OW 88
// wait ( 0 0$2 ) ;
1600: LD_INT 70
1602: PPUSH
1603: CALL_OW 67
// Say ( Popov , DDeath-Pop-1 ) ;
1607: LD_EXP 14
1611: PPUSH
1612: LD_STRING DDeath-Pop-1
1614: PPUSH
1615: CALL_OW 88
// Say ( Gaydar , DDeath-Gay-1 ) ;
1619: LD_EXP 15
1623: PPUSH
1624: LD_STRING DDeath-Gay-1
1626: PPUSH
1627: CALL_OW 88
// wait ( 0 0$5 ) ;
1631: LD_INT 175
1633: PPUSH
1634: CALL_OW 67
// Say ( Sevi , DDeath-Vse-1 ) ;
1638: LD_EXP 16
1642: PPUSH
1643: LD_STRING DDeath-Vse-1
1645: PPUSH
1646: CALL_OW 88
// Say ( Popov , DDeath-Pop-2 ) ;
1650: LD_EXP 14
1654: PPUSH
1655: LD_STRING DDeath-Pop-2
1657: PPUSH
1658: CALL_OW 88
// end ;
1662: PPOPN 2
1664: END
// every 0 0$1 trigger AssaultStarted do var i , tmp ;
1665: LD_EXP 8
1669: IFFALSE 2121
1671: GO 1673
1673: DISABLE
1674: LD_INT 0
1676: PPUSH
1677: PPUSH
// begin PriorityAttack ( 6 , BetaA ) ;
1678: LD_INT 6
1680: PPUSH
1681: LD_INT 1
1683: PPUSH
1684: CALL_OW 470
// PriorityAttack ( 6 , BetaB ) ;
1688: LD_INT 6
1690: PPUSH
1691: LD_INT 3
1693: PPUSH
1694: CALL_OW 470
// repeat for i in RuArmada do
1698: LD_ADDR_VAR 0 1
1702: PUSH
1703: LD_EXP 17
1707: PUSH
1708: FOR_IN
1709: IFFALSE 1747
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
1711: LD_VAR 0 1
1715: PPUSH
1716: LD_INT 22
1718: PUSH
1719: LD_INT 1
1721: PUSH
1722: EMPTY
1723: LIST
1724: LIST
1725: PPUSH
1726: CALL_OW 69
1730: PPUSH
1731: LD_VAR 0 1
1735: PPUSH
1736: CALL_OW 74
1740: PPUSH
1741: CALL_OW 115
1745: GO 1708
1747: POP
1748: POP
// wait ( 0 0$1 ) until FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_type , unit_human ] ] ) < 10 and IsDead ( Yashin ) and IsDead ( Popov ) and IsDead ( Gaydar ) and IsDead ( Sevi ) ;
1749: LD_INT 35
1751: PPUSH
1752: CALL_OW 67
1756: LD_INT 1
1758: PUSH
1759: LD_INT 22
1761: PUSH
1762: LD_INT 6
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: PUSH
1769: LD_INT 21
1771: PUSH
1772: LD_INT 1
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: LIST
1783: PPUSH
1784: CALL_OW 69
1788: PUSH
1789: LD_INT 10
1791: LESS
1792: PUSH
1793: LD_EXP 13
1797: PPUSH
1798: CALL_OW 301
1802: AND
1803: PUSH
1804: LD_EXP 14
1808: PPUSH
1809: CALL_OW 301
1813: AND
1814: PUSH
1815: LD_EXP 15
1819: PPUSH
1820: CALL_OW 301
1824: AND
1825: PUSH
1826: LD_EXP 16
1830: PPUSH
1831: CALL_OW 301
1835: AND
1836: IFFALSE 1698
// AssaultStarted := false ;
1838: LD_ADDR_EXP 8
1842: PUSH
1843: LD_INT 0
1845: ST_TO_ADDR
// ComMoveToArea ( FilterAllUnits ( [ f_side , 6 ] ) , RUArrivalArea ) ;
1846: LD_INT 22
1848: PUSH
1849: LD_INT 6
1851: PUSH
1852: EMPTY
1853: LIST
1854: LIST
1855: PPUSH
1856: CALL_OW 69
1860: PPUSH
1861: LD_INT 5
1863: PPUSH
1864: CALL_OW 113
// RuSpeaker := FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_sex , sex_male ] , [ f_type , unit_human ] , [ f_lives , 500 ] ] ) ;
1868: LD_ADDR_EXP 5
1872: PUSH
1873: LD_INT 1
1875: PUSH
1876: LD_INT 22
1878: PUSH
1879: LD_INT 6
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: PUSH
1886: LD_INT 26
1888: PUSH
1889: LD_INT 1
1891: PUSH
1892: EMPTY
1893: LIST
1894: LIST
1895: PUSH
1896: LD_INT 21
1898: PUSH
1899: LD_INT 1
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 24
1908: PUSH
1909: LD_INT 500
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: PPUSH
1923: CALL_OW 69
1927: ST_TO_ADDR
// if RuSpeaker then
1928: LD_EXP 5
1932: IFFALSE 1950
// Say ( RuSpeaker [ 1 ] , DRuSol-A2 ) ;
1934: LD_EXP 5
1938: PUSH
1939: LD_INT 1
1941: ARRAY
1942: PPUSH
1943: LD_STRING DRuSol-A2
1945: PPUSH
1946: CALL_OW 88
// wait ( 0 0$30 ) ;
1950: LD_INT 1050
1952: PPUSH
1953: CALL_OW 67
// DialogueOn ;
1957: CALL_OW 6
// Say ( Brighton , DBrighton-B1 ) ;
1961: LD_EXP 9
1965: PPUSH
1966: LD_STRING DBrighton-B1
1968: PPUSH
1969: CALL_OW 88
// Say ( Palmer , DPalmer-B1 ) ;
1973: LD_EXP 10
1977: PPUSH
1978: LD_STRING DPalmer-B1
1980: PPUSH
1981: CALL_OW 88
// Say ( Brighton , DBrighton-B2 ) ;
1985: LD_EXP 9
1989: PPUSH
1990: LD_STRING DBrighton-B2
1992: PPUSH
1993: CALL_OW 88
// SayRadio ( Burlak , DBurlak-B1 ) ;
1997: LD_EXP 19
2001: PPUSH
2002: LD_STRING DBurlak-B1
2004: PPUSH
2005: CALL_OW 94
// Say ( Brighton , DBrighton-B3 ) ;
2009: LD_EXP 9
2013: PPUSH
2014: LD_STRING DBrighton-B3
2016: PPUSH
2017: CALL_OW 88
// Say ( Palmer , DPalmer-B2 ) ;
2021: LD_EXP 10
2025: PPUSH
2026: LD_STRING DPalmer-B2
2028: PPUSH
2029: CALL_OW 88
// Say ( Brighton , DBrighton-B4 ) ;
2033: LD_EXP 9
2037: PPUSH
2038: LD_STRING DBrighton-B4
2040: PPUSH
2041: CALL_OW 88
// Say ( Brighton , DBrighton-B5 ) ;
2045: LD_EXP 9
2049: PPUSH
2050: LD_STRING DBrighton-B5
2052: PPUSH
2053: CALL_OW 88
// DialogueOff ;
2057: CALL_OW 7
// ChangeMissionObjectives ( C2 ) ;
2061: LD_STRING C2
2063: PPUSH
2064: CALL_OW 337
// FirstAssaultRepelled := true ;
2068: LD_ADDR_EXP 4
2072: PUSH
2073: LD_INT 1
2075: ST_TO_ADDR
// RemoveUnit ( Bulldozers [ 1 ] ) ;
2076: LD_EXP 18
2080: PUSH
2081: LD_INT 1
2083: ARRAY
2084: PPUSH
2085: CALL_OW 64
// RemoveUnit ( Bulldozers [ 2 ] ) ;
2089: LD_EXP 18
2093: PUSH
2094: LD_INT 2
2096: ARRAY
2097: PPUSH
2098: CALL_OW 64
// AddComExitVehicle ( FilterAllUnits ( [ f_side , 6 ] ) ) ;
2102: LD_INT 22
2104: PUSH
2105: LD_INT 6
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: PPUSH
2112: CALL_OW 69
2116: PPUSH
2117: CALL_OW 181
// end ;
2121: PPOPN 2
2123: END
// every 0 0$1 trigger FirstAssaultRepelled do var unit , insideUnit ;
2124: LD_EXP 4
2128: IFFALSE 2293
2130: GO 2132
2132: DISABLE
2133: LD_INT 0
2135: PPUSH
2136: PPUSH
// begin enable ;
2137: ENABLE
// if FilterUnitsInArea ( RUArrivalArea , [ [ f_side , 6 ] ] ) = 0 then
2138: LD_INT 5
2140: PPUSH
2141: LD_INT 22
2143: PUSH
2144: LD_INT 6
2146: PUSH
2147: EMPTY
2148: LIST
2149: LIST
2150: PUSH
2151: EMPTY
2152: LIST
2153: PPUSH
2154: CALL_OW 70
2158: PUSH
2159: LD_INT 0
2161: EQUAL
2162: IFFALSE 2166
// exit ;
2164: GO 2293
// for unit in FilterUnitsInArea ( RUArrivalArea , [ [ f_side , 6 ] ] ) do
2166: LD_ADDR_VAR 0 1
2170: PUSH
2171: LD_INT 5
2173: PPUSH
2174: LD_INT 22
2176: PUSH
2177: LD_INT 6
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: PUSH
2184: EMPTY
2185: LIST
2186: PPUSH
2187: CALL_OW 70
2191: PUSH
2192: FOR_IN
2193: IFFALSE 2291
// begin SetSide ( unit , 3 ) ;
2195: LD_VAR 0 1
2199: PPUSH
2200: LD_INT 3
2202: PPUSH
2203: CALL_OW 235
// if ( GetType ( unit ) = unit_vehicle ) then
2207: LD_VAR 0 1
2211: PPUSH
2212: CALL_OW 247
2216: PUSH
2217: LD_INT 2
2219: EQUAL
2220: IFFALSE 2256
// for insideUnit in UnitsInside ( unit ) do
2222: LD_ADDR_VAR 0 2
2226: PUSH
2227: LD_VAR 0 1
2231: PPUSH
2232: CALL_OW 313
2236: PUSH
2237: FOR_IN
2238: IFFALSE 2254
// SetSide ( insideUnit , 3 ) ;
2240: LD_VAR 0 2
2244: PPUSH
2245: LD_INT 3
2247: PPUSH
2248: CALL_OW 235
2252: GO 2237
2254: POP
2255: POP
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
2256: LD_ADDR_EXP 64
2260: PUSH
2261: LD_EXP 64
2265: PPUSH
2266: LD_INT 1
2268: PPUSH
2269: LD_INT 22
2271: PUSH
2272: LD_INT 3
2274: PUSH
2275: EMPTY
2276: LIST
2277: LIST
2278: PPUSH
2279: CALL_OW 69
2283: PPUSH
2284: CALL_OW 1
2288: ST_TO_ADDR
// end ;
2289: GO 2192
2291: POP
2292: POP
// end ;
2293: PPOPN 2
2295: END
// every 0 0$1 trigger FirstAssaultRepelled and jmmArrival > 0 0$00 do
2296: LD_EXP 4
2300: PUSH
2301: LD_EXP 41
2305: PUSH
2306: LD_INT 0
2308: GREATER
2309: AND
2310: IFFALSE 2330
2312: GO 2314
2314: DISABLE
// begin enable ;
2315: ENABLE
// jmmArrival := jmmArrival - 0 0$01 ;
2316: LD_ADDR_EXP 41
2320: PUSH
2321: LD_EXP 41
2325: PUSH
2326: LD_INT 35
2328: MINUS
2329: ST_TO_ADDR
// end ;
2330: END
// export JMM_Arrived ; every 0 0$1 trigger jmmArrival = 0 0$00 do
2331: LD_EXP 41
2335: PUSH
2336: LD_INT 0
2338: EQUAL
2339: IFFALSE 2445
2341: GO 2343
2343: DISABLE
// begin JMMReinforcement ;
2344: CALL 5187 0 0
// DialogueOn ;
2348: CALL_OW 6
// CenterOnUnits ( JMM ) ;
2352: LD_EXP 37
2356: PPUSH
2357: CALL_OW 85
// Say ( JMM , DJMM-F1 ) ;
2361: LD_EXP 37
2365: PPUSH
2366: LD_STRING DJMM-F1
2368: PPUSH
2369: CALL_OW 88
// if RussiansDefeated then
2373: LD_EXP 44
2377: IFFALSE 2403
// begin AddMedal ( Russians , 1 ) ;
2379: LD_STRING Russians
2381: PPUSH
2382: LD_INT 1
2384: PPUSH
2385: CALL_OW 101
// Say ( Brighton , DBrighton-F1a ) ;
2389: LD_EXP 9
2393: PPUSH
2394: LD_STRING DBrighton-F1a
2396: PPUSH
2397: CALL_OW 88
// end else
2401: GO 2433
// begin AddMedal ( Russians , - 1 ) ;
2403: LD_STRING Russians
2405: PPUSH
2406: LD_INT 1
2408: NEG
2409: PPUSH
2410: CALL_OW 101
// Say ( Brighton , DBrighton-F1 ) ;
2414: LD_EXP 9
2418: PPUSH
2419: LD_STRING DBrighton-F1
2421: PPUSH
2422: CALL_OW 88
// ChangeMissionObjectives ( C3 ) ;
2426: LD_STRING C3
2428: PPUSH
2429: CALL_OW 337
// end ; DialogueOff ;
2433: CALL_OW 7
// JMM_Arrived := true ;
2437: LD_ADDR_EXP 6
2441: PUSH
2442: LD_INT 1
2444: ST_TO_ADDR
// end ;
2445: END
// every 0 0$1 trigger JMM_Arrived and See ( 1 , Burlak ) do
2446: LD_EXP 6
2450: PUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_EXP 19
2458: PPUSH
2459: CALL_OW 292
2463: AND
2464: IFFALSE 2493
2466: GO 2468
2468: DISABLE
// begin Say ( Burlak , DBurlak ) ;
2469: LD_EXP 19
2473: PPUSH
2474: LD_STRING DBurlak
2476: PPUSH
2477: CALL_OW 88
// Say ( JMM , DJMM ) ;
2481: LD_EXP 37
2485: PPUSH
2486: LD_STRING DJMM
2488: PPUSH
2489: CALL_OW 88
// end ;
2493: END
// export LaserBuilt ; every 0 0$1 trigger FilterAllUnits ( [ f_and , [ f_side , 1 ] , [ f_or , [ f_weapon , us_laser ] , [ f_bweapon , us_laser ] ] ] ) > 1 do
2494: LD_INT 1
2496: PUSH
2497: LD_INT 22
2499: PUSH
2500: LD_INT 1
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PUSH
2507: LD_INT 2
2509: PUSH
2510: LD_INT 34
2512: PUSH
2513: LD_INT 9
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: PUSH
2520: LD_INT 35
2522: PUSH
2523: LD_INT 9
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: PUSH
2530: EMPTY
2531: LIST
2532: LIST
2533: LIST
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: LIST
2539: PPUSH
2540: CALL_OW 69
2544: PUSH
2545: LD_INT 1
2547: GREATER
2548: IFFALSE 2561
2550: GO 2552
2552: DISABLE
// LaserBuilt := true ;
2553: LD_ADDR_EXP 7
2557: PUSH
2558: LD_INT 1
2560: ST_TO_ADDR
2561: END
// export AssaultStarted ; every 0 0$1 trigger AssaultStarted and See ( 6 , NearestUnitToUnit ( FilterAllUnits ( [ f_and , [ [ f_side , 1 ] , [ f_bweapon , us_laser ] ] ] ) , IsInUnit ( Sevi ) ) ) do
2562: LD_EXP 8
2566: PUSH
2567: LD_INT 6
2569: PPUSH
2570: LD_INT 1
2572: PUSH
2573: LD_INT 22
2575: PUSH
2576: LD_INT 1
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: PUSH
2583: LD_INT 35
2585: PUSH
2586: LD_INT 9
2588: PUSH
2589: EMPTY
2590: LIST
2591: LIST
2592: PUSH
2593: EMPTY
2594: LIST
2595: LIST
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: PPUSH
2601: CALL_OW 69
2605: PPUSH
2606: LD_EXP 16
2610: PPUSH
2611: CALL_OW 310
2615: PPUSH
2616: CALL_OW 74
2620: PPUSH
2621: CALL_OW 292
2625: AND
2626: IFFALSE 2655
2628: GO 2630
2630: DISABLE
// begin Say ( Sevi , DDeath-Vse-2 ) ;
2631: LD_EXP 16
2635: PPUSH
2636: LD_STRING DDeath-Vse-2
2638: PPUSH
2639: CALL_OW 88
// Say ( Yashin , DDeath-Yas-2 ) ;
2643: LD_EXP 13
2647: PPUSH
2648: LD_STRING DDeath-Yas-2
2650: PPUSH
2651: CALL_OW 88
// end ;
2655: END
// every 0 0$1 trigger MissionStart and GetResourceArea ( CratesArea , mat_cans ) < 20 do
2656: LD_EXP 1
2660: PUSH
2661: LD_INT 12
2663: PPUSH
2664: LD_INT 1
2666: PPUSH
2667: CALL_OW 287
2671: PUSH
2672: LD_INT 20
2674: LESS
2675: AND
2676: IFFALSE 2718
2678: GO 2680
2680: DISABLE
// begin wait ( rand ( 0 0$50 , 2 2$20 ) ) ;
2681: LD_INT 1750
2683: PPUSH
2684: LD_INT 4900
2686: PPUSH
2687: CALL_OW 12
2691: PPUSH
2692: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
2696: LD_INT 2
2698: PPUSH
2699: LD_INT 5
2701: PPUSH
2702: CALL_OW 12
2706: PPUSH
2707: LD_INT 12
2709: PPUSH
2710: LD_INT 1
2712: PPUSH
2713: CALL_OW 55
// enable ;
2717: ENABLE
// end ;
2718: END
// every 0 0$1 trigger MissionStart do
2719: LD_EXP 1
2723: IFFALSE 2746
2725: GO 2727
2727: DISABLE
// begin enable ;
2728: ENABLE
// display_Strings := [ #tick , tick ] ;
2729: LD_ADDR_OWVAR 47
2733: PUSH
2734: LD_STRING #tick
2736: PUSH
2737: LD_OWVAR 1
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: ST_TO_ADDR
// end ; end_of_file
2746: END
// export Brighton , Palmer , Megan ; export BetaSquad ; export function PrepareHeroes ; begin
2747: LD_INT 0
2749: PPUSH
// uc_side := 1 ;
2750: LD_ADDR_OWVAR 20
2754: PUSH
2755: LD_INT 1
2757: ST_TO_ADDR
// hc_class = class_soldier ;
2758: LD_ADDR_OWVAR 28
2762: PUSH
2763: LD_INT 1
2765: ST_TO_ADDR
// uc_nation := nation_american ;
2766: LD_ADDR_OWVAR 21
2770: PUSH
2771: LD_INT 1
2773: ST_TO_ADDR
// hc_sex = sex_male ;
2774: LD_ADDR_OWVAR 27
2778: PUSH
2779: LD_INT 1
2781: ST_TO_ADDR
// hc_importance = 110 ;
2782: LD_ADDR_OWVAR 32
2786: PUSH
2787: LD_INT 110
2789: ST_TO_ADDR
// hc_basic_skills = [ 5 , 4 , 5 , 3 ] ;
2790: LD_ADDR_OWVAR 30
2794: PUSH
2795: LD_INT 5
2797: PUSH
2798: LD_INT 4
2800: PUSH
2801: LD_INT 5
2803: PUSH
2804: LD_INT 3
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: ST_TO_ADDR
// hc_skills = [ 9 , 6 , 7 , 6 ] ;
2813: LD_ADDR_OWVAR 31
2817: PUSH
2818: LD_INT 9
2820: PUSH
2821: LD_INT 6
2823: PUSH
2824: LD_INT 7
2826: PUSH
2827: LD_INT 6
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: LIST
2834: LIST
2835: ST_TO_ADDR
// hc_attr = [ 12 , 10 ] ;
2836: LD_ADDR_OWVAR 29
2840: PUSH
2841: LD_INT 12
2843: PUSH
2844: LD_INT 10
2846: PUSH
2847: EMPTY
2848: LIST
2849: LIST
2850: ST_TO_ADDR
// hc_name := Gerard Brighton ;
2851: LD_ADDR_OWVAR 26
2855: PUSH
2856: LD_STRING Gerard Brighton
2858: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2859: LD_ADDR_OWVAR 33
2863: PUSH
2864: LD_STRING Beta_Skirmish
2866: ST_TO_ADDR
// hc_face_number := 1 ;
2867: LD_ADDR_OWVAR 34
2871: PUSH
2872: LD_INT 1
2874: ST_TO_ADDR
// Brighton := CreateHuman ;
2875: LD_ADDR_EXP 9
2879: PUSH
2880: CALL_OW 44
2884: ST_TO_ADDR
// uc_nation := nation_american ;
2885: LD_ADDR_OWVAR 21
2889: PUSH
2890: LD_INT 1
2892: ST_TO_ADDR
// hc_importance = 80 ;
2893: LD_ADDR_OWVAR 32
2897: PUSH
2898: LD_INT 80
2900: ST_TO_ADDR
// hc_sex = sex_male ;
2901: LD_ADDR_OWVAR 27
2905: PUSH
2906: LD_INT 1
2908: ST_TO_ADDR
// hc_basic_skills = [ 5 , 5 , 3 , 1 ] ;
2909: LD_ADDR_OWVAR 30
2913: PUSH
2914: LD_INT 5
2916: PUSH
2917: LD_INT 5
2919: PUSH
2920: LD_INT 3
2922: PUSH
2923: LD_INT 1
2925: PUSH
2926: EMPTY
2927: LIST
2928: LIST
2929: LIST
2930: LIST
2931: ST_TO_ADDR
// hc_skills = [ 7 , 6 , 5 , 3 ] ;
2932: LD_ADDR_OWVAR 31
2936: PUSH
2937: LD_INT 7
2939: PUSH
2940: LD_INT 6
2942: PUSH
2943: LD_INT 5
2945: PUSH
2946: LD_INT 3
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: LIST
2953: LIST
2954: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
2955: LD_ADDR_OWVAR 29
2959: PUSH
2960: LD_INT 10
2962: PUSH
2963: LD_INT 10
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: ST_TO_ADDR
// hc_name := Brian Palmer ;
2970: LD_ADDR_OWVAR 26
2974: PUSH
2975: LD_STRING Brian Palmer
2977: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2978: LD_ADDR_OWVAR 33
2982: PUSH
2983: LD_STRING Beta_Skirmish
2985: ST_TO_ADDR
// hc_face_number := 3 ;
2986: LD_ADDR_OWVAR 34
2990: PUSH
2991: LD_INT 3
2993: ST_TO_ADDR
// Palmer := CreateHuman ;
2994: LD_ADDR_EXP 10
2998: PUSH
2999: CALL_OW 44
3003: ST_TO_ADDR
// hc_class = class_scientistic ;
3004: LD_ADDR_OWVAR 28
3008: PUSH
3009: LD_INT 4
3011: ST_TO_ADDR
// uc_nation := nation_american ;
3012: LD_ADDR_OWVAR 21
3016: PUSH
3017: LD_INT 1
3019: ST_TO_ADDR
// hc_importance = 70 ;
3020: LD_ADDR_OWVAR 32
3024: PUSH
3025: LD_INT 70
3027: ST_TO_ADDR
// hc_sex = sex_female ;
3028: LD_ADDR_OWVAR 27
3032: PUSH
3033: LD_INT 2
3035: ST_TO_ADDR
// hc_basic_skills = [ 3 , 2 , 4 , 6 ] ;
3036: LD_ADDR_OWVAR 30
3040: PUSH
3041: LD_INT 3
3043: PUSH
3044: LD_INT 2
3046: PUSH
3047: LD_INT 4
3049: PUSH
3050: LD_INT 6
3052: PUSH
3053: EMPTY
3054: LIST
3055: LIST
3056: LIST
3057: LIST
3058: ST_TO_ADDR
// hc_skills = [ 4 , 2 , 5 , 8 ] ;
3059: LD_ADDR_OWVAR 31
3063: PUSH
3064: LD_INT 4
3066: PUSH
3067: LD_INT 2
3069: PUSH
3070: LD_INT 5
3072: PUSH
3073: LD_INT 8
3075: PUSH
3076: EMPTY
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
3082: LD_ADDR_OWVAR 29
3086: PUSH
3087: LD_INT 10
3089: PUSH
3090: LD_INT 10
3092: PUSH
3093: EMPTY
3094: LIST
3095: LIST
3096: ST_TO_ADDR
// hc_name := Megan Armitage ;
3097: LD_ADDR_OWVAR 26
3101: PUSH
3102: LD_STRING Megan Armitage
3104: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
3105: LD_ADDR_OWVAR 33
3109: PUSH
3110: LD_STRING Beta_Skirmish
3112: ST_TO_ADDR
// hc_face_number := 4 ;
3113: LD_ADDR_OWVAR 34
3117: PUSH
3118: LD_INT 4
3120: ST_TO_ADDR
// Megan := CreateHuman ;
3121: LD_ADDR_EXP 11
3125: PUSH
3126: CALL_OW 44
3130: ST_TO_ADDR
// end ;
3131: LD_VAR 0 1
3135: RET
// export function PrepareBeta ; var i , filter , un , soldiers ; begin
3136: LD_INT 0
3138: PPUSH
3139: PPUSH
3140: PPUSH
3141: PPUSH
3142: PPUSH
// uc_side := 1 ;
3143: LD_ADDR_OWVAR 20
3147: PUSH
3148: LD_INT 1
3150: ST_TO_ADDR
// uc_nation := nation_american ;
3151: LD_ADDR_OWVAR 21
3155: PUSH
3156: LD_INT 1
3158: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
3159: LD_ADDR_VAR 0 2
3163: PUSH
3164: LD_INT 22
3166: PUSH
3167: LD_INT 1
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: PUSH
3174: LD_INT 30
3176: PUSH
3177: LD_INT 32
3179: PUSH
3180: EMPTY
3181: LIST
3182: LIST
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: PPUSH
3188: CALL_OW 69
3192: PUSH
3193: FOR_IN
3194: IFFALSE 3249
// PlaceWeaponTurret ( i , [ us_light_gun , us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun , us_gatling_gun ] [ rand ( 1 , 7 ) ] ) ;
3196: LD_VAR 0 2
3200: PPUSH
3201: LD_INT 3
3203: PUSH
3204: LD_INT 3
3206: PUSH
3207: LD_INT 4
3209: PUSH
3210: LD_INT 5
3212: PUSH
3213: LD_INT 11
3215: PUSH
3216: LD_INT 3
3218: PUSH
3219: LD_INT 4
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: LIST
3229: LIST
3230: PUSH
3231: LD_INT 1
3233: PPUSH
3234: LD_INT 7
3236: PPUSH
3237: CALL_OW 12
3241: ARRAY
3242: PPUSH
3243: CALL_OW 431
3247: GO 3193
3249: POP
3250: POP
// hc_name :=  ;
3251: LD_ADDR_OWVAR 26
3255: PUSH
3256: LD_STRING 
3258: ST_TO_ADDR
// hc_gallery :=  ;
3259: LD_ADDR_OWVAR 33
3263: PUSH
3264: LD_STRING 
3266: ST_TO_ADDR
// for i = 1 to [ 6 , 5 , 5 ] [ Difficulty ] do
3267: LD_ADDR_VAR 0 2
3271: PUSH
3272: DOUBLE
3273: LD_INT 1
3275: DEC
3276: ST_TO_ADDR
3277: LD_INT 6
3279: PUSH
3280: LD_INT 5
3282: PUSH
3283: LD_INT 5
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: LIST
3290: PUSH
3291: LD_OWVAR 67
3295: ARRAY
3296: PUSH
3297: FOR_TO
3298: IFFALSE 3356
// begin PrepareSoldier ( 1 , game_skill ) ;
3300: LD_INT 1
3302: PPUSH
3303: LD_EXP 39
3307: PPUSH
3308: CALL_OW 381
// un := CreateHuman ;
3312: LD_ADDR_VAR 0 4
3316: PUSH
3317: CALL_OW 44
3321: ST_TO_ADDR
// filter := filter ^ un ;
3322: LD_ADDR_VAR 0 3
3326: PUSH
3327: LD_VAR 0 3
3331: PUSH
3332: LD_VAR 0 4
3336: ADD
3337: ST_TO_ADDR
// soldiers := soldiers ^ un ;
3338: LD_ADDR_VAR 0 5
3342: PUSH
3343: LD_VAR 0 5
3347: PUSH
3348: LD_VAR 0 4
3352: ADD
3353: ST_TO_ADDR
// end ;
3354: GO 3297
3356: POP
3357: POP
// for i = 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3358: LD_ADDR_VAR 0 2
3362: PUSH
3363: DOUBLE
3364: LD_INT 1
3366: DEC
3367: ST_TO_ADDR
3368: LD_INT 3
3370: PUSH
3371: LD_INT 2
3373: PUSH
3374: LD_INT 2
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: LIST
3381: PUSH
3382: LD_OWVAR 67
3386: ARRAY
3387: PUSH
3388: FOR_TO
3389: IFFALSE 3443
// begin PrepareEngineer ( 0 , game_skill ) ;
3391: LD_INT 0
3393: PPUSH
3394: LD_EXP 39
3398: PPUSH
3399: CALL_OW 382
// un := CreateHuman ;
3403: LD_ADDR_VAR 0 4
3407: PUSH
3408: CALL_OW 44
3412: ST_TO_ADDR
// filter := filter ^ un ;
3413: LD_ADDR_VAR 0 3
3417: PUSH
3418: LD_VAR 0 3
3422: PUSH
3423: LD_VAR 0 4
3427: ADD
3428: ST_TO_ADDR
// PlaceHumanInUnit ( un , BetaB ) ;
3429: LD_VAR 0 4
3433: PPUSH
3434: LD_INT 3
3436: PPUSH
3437: CALL_OW 52
// end ;
3441: GO 3388
3443: POP
3444: POP
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
3445: LD_ADDR_VAR 0 2
3449: PUSH
3450: DOUBLE
3451: LD_INT 1
3453: DEC
3454: ST_TO_ADDR
3455: LD_INT 4
3457: PUSH
3458: LD_INT 3
3460: PUSH
3461: LD_INT 3
3463: PUSH
3464: EMPTY
3465: LIST
3466: LIST
3467: LIST
3468: PUSH
3469: LD_OWVAR 67
3473: ARRAY
3474: PUSH
3475: FOR_TO
3476: IFFALSE 3530
// begin PrepareMechanic ( 0 , game_skill ) ;
3478: LD_INT 0
3480: PPUSH
3481: LD_EXP 39
3485: PPUSH
3486: CALL_OW 383
// un := CreateHuman ;
3490: LD_ADDR_VAR 0 4
3494: PUSH
3495: CALL_OW 44
3499: ST_TO_ADDR
// filter := filter ^ un ;
3500: LD_ADDR_VAR 0 3
3504: PUSH
3505: LD_VAR 0 3
3509: PUSH
3510: LD_VAR 0 4
3514: ADD
3515: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmFac ) ;
3516: LD_VAR 0 4
3520: PPUSH
3521: LD_INT 8
3523: PPUSH
3524: CALL_OW 52
// end ;
3528: GO 3475
3530: POP
3531: POP
// for i = 1 to 2 do
3532: LD_ADDR_VAR 0 2
3536: PUSH
3537: DOUBLE
3538: LD_INT 1
3540: DEC
3541: ST_TO_ADDR
3542: LD_INT 2
3544: PUSH
3545: FOR_TO
3546: IFFALSE 3600
// begin PrepareScientist ( 0 , game_skill ) ;
3548: LD_INT 0
3550: PPUSH
3551: LD_EXP 39
3555: PPUSH
3556: CALL_OW 384
// un := CreateHuman ;
3560: LD_ADDR_VAR 0 4
3564: PUSH
3565: CALL_OW 44
3569: ST_TO_ADDR
// filter := filter ^ un ;
3570: LD_ADDR_VAR 0 3
3574: PUSH
3575: LD_VAR 0 3
3579: PUSH
3580: LD_VAR 0 4
3584: ADD
3585: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmLab ) ;
3586: LD_VAR 0 4
3590: PPUSH
3591: LD_INT 14
3593: PPUSH
3594: CALL_OW 52
// end ;
3598: GO 3545
3600: POP
3601: POP
// for i = 1 to soldiers do
3602: LD_ADDR_VAR 0 2
3606: PUSH
3607: DOUBLE
3608: LD_INT 1
3610: DEC
3611: ST_TO_ADDR
3612: LD_VAR 0 5
3616: PUSH
3617: FOR_TO
3618: IFFALSE 3643
// PlaceUnitArea ( soldiers [ i ] , spawn_area , false ) ;
3620: LD_VAR 0 5
3624: PUSH
3625: LD_VAR 0 2
3629: ARRAY
3630: PPUSH
3631: LD_INT 1
3633: PPUSH
3634: LD_INT 0
3636: PPUSH
3637: CALL_OW 49
3641: GO 3617
3643: POP
3644: POP
// PlaceUnitXY ( Brighton , 51 , 43 , false ) ;
3645: LD_EXP 9
3649: PPUSH
3650: LD_INT 51
3652: PPUSH
3653: LD_INT 43
3655: PPUSH
3656: LD_INT 0
3658: PPUSH
3659: CALL_OW 48
// PlaceUnitXY ( Palmer , 55 , 58 , false ) ;
3663: LD_EXP 10
3667: PPUSH
3668: LD_INT 55
3670: PPUSH
3671: LD_INT 58
3673: PPUSH
3674: LD_INT 0
3676: PPUSH
3677: CALL_OW 48
// PlaceUnitXY ( Megan , 39 , 36 , false ) ;
3681: LD_EXP 11
3685: PPUSH
3686: LD_INT 39
3688: PPUSH
3689: LD_INT 36
3691: PPUSH
3692: LD_INT 0
3694: PPUSH
3695: CALL_OW 48
// BetaSquad := filter diff 0 ;
3699: LD_ADDR_EXP 12
3703: PUSH
3704: LD_VAR 0 3
3708: PUSH
3709: LD_INT 0
3711: DIFF
3712: ST_TO_ADDR
// end ;
3713: LD_VAR 0 1
3717: RET
// export Yashin , Popov , Gaydar , Sevi ; export RUArmada ; export function PrepareRUArmada ; var i , vehicle , soldiers , un , vehs ; begin
3718: LD_INT 0
3720: PPUSH
3721: PPUSH
3722: PPUSH
3723: PPUSH
3724: PPUSH
3725: PPUSH
// uc_side := 6 ;
3726: LD_ADDR_OWVAR 20
3730: PUSH
3731: LD_INT 6
3733: ST_TO_ADDR
// uc_nation := nation_russian ;
3734: LD_ADDR_OWVAR 21
3738: PUSH
3739: LD_INT 3
3741: ST_TO_ADDR
// soldiers := [ ] ;
3742: LD_ADDR_VAR 0 4
3746: PUSH
3747: EMPTY
3748: ST_TO_ADDR
// vehs := [ ] ;
3749: LD_ADDR_VAR 0 6
3753: PUSH
3754: EMPTY
3755: ST_TO_ADDR
// RUArmada := [ ] ;
3756: LD_ADDR_EXP 17
3760: PUSH
3761: EMPTY
3762: ST_TO_ADDR
// Yashin := NewCharacter ( Yashin ) ;
3763: LD_ADDR_EXP 13
3767: PUSH
3768: LD_STRING Yashin
3770: PPUSH
3771: CALL_OW 25
3775: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
3776: LD_ADDR_EXP 14
3780: PUSH
3781: LD_STRING Popov
3783: PPUSH
3784: CALL_OW 25
3788: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
3789: LD_ADDR_EXP 15
3793: PUSH
3794: LD_STRING Gaydar
3796: PPUSH
3797: CALL_OW 25
3801: ST_TO_ADDR
// Sevi := NewCharacter ( Vsevolod ) ;
3802: LD_ADDR_EXP 16
3806: PUSH
3807: LD_STRING Vsevolod
3809: PPUSH
3810: CALL_OW 25
3814: ST_TO_ADDR
// for i = 1 to 16 do
3815: LD_ADDR_VAR 0 2
3819: PUSH
3820: DOUBLE
3821: LD_INT 1
3823: DEC
3824: ST_TO_ADDR
3825: LD_INT 16
3827: PUSH
3828: FOR_TO
3829: IFFALSE 3871
// begin PrepareSoldier ( 0 , game_eskill ) ;
3831: LD_INT 0
3833: PPUSH
3834: LD_EXP 40
3838: PPUSH
3839: CALL_OW 381
// un := CreateHuman ;
3843: LD_ADDR_VAR 0 5
3847: PUSH
3848: CALL_OW 44
3852: ST_TO_ADDR
// soldiers := soldiers ^ un ;
3853: LD_ADDR_VAR 0 4
3857: PUSH
3858: LD_VAR 0 4
3862: PUSH
3863: LD_VAR 0 5
3867: ADD
3868: ST_TO_ADDR
// end ;
3869: GO 3828
3871: POP
3872: POP
// soldiers := Yashin ^ Popov ^ Gaydar ^ Sevi ^ soldiers ;
3873: LD_ADDR_VAR 0 4
3877: PUSH
3878: LD_EXP 13
3882: PUSH
3883: LD_EXP 14
3887: ADD
3888: PUSH
3889: LD_EXP 15
3893: ADD
3894: PUSH
3895: LD_EXP 16
3899: ADD
3900: PUSH
3901: LD_VAR 0 4
3905: ADD
3906: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_heavy_gun , 100 ) ;
3907: LD_INT 24
3909: PPUSH
3910: LD_INT 3
3912: PPUSH
3913: LD_INT 1
3915: PPUSH
3916: LD_INT 46
3918: PPUSH
3919: LD_INT 100
3921: PPUSH
3922: CALL 18290 0 5
// for i = 1 to 8 do
3926: LD_ADDR_VAR 0 2
3930: PUSH
3931: DOUBLE
3932: LD_INT 1
3934: DEC
3935: ST_TO_ADDR
3936: LD_INT 8
3938: PUSH
3939: FOR_TO
3940: IFFALSE 4023
// begin vehicle := CreateVehicle ;
3942: LD_ADDR_VAR 0 3
3946: PUSH
3947: CALL_OW 45
3951: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
3952: LD_VAR 0 4
3956: PUSH
3957: LD_INT 1
3959: ARRAY
3960: PPUSH
3961: LD_VAR 0 3
3965: PPUSH
3966: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
3970: LD_ADDR_VAR 0 4
3974: PUSH
3975: LD_VAR 0 4
3979: PUSH
3980: LD_VAR 0 4
3984: PUSH
3985: LD_INT 1
3987: ARRAY
3988: DIFF
3989: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
3990: LD_VAR 0 3
3994: PPUSH
3995: LD_INT 5
3997: PPUSH
3998: LD_INT 0
4000: PPUSH
4001: CALL_OW 49
// vehs := vehs ^ vehicle ;
4005: LD_ADDR_VAR 0 6
4009: PUSH
4010: LD_VAR 0 6
4014: PUSH
4015: LD_VAR 0 3
4019: ADD
4020: ST_TO_ADDR
// end ;
4021: GO 3939
4023: POP
4024: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
4025: LD_INT 24
4027: PPUSH
4028: LD_INT 3
4030: PPUSH
4031: LD_INT 1
4033: PPUSH
4034: LD_INT 43
4036: PPUSH
4037: LD_INT 100
4039: PPUSH
4040: CALL 18290 0 5
// for i = 1 to 8 do
4044: LD_ADDR_VAR 0 2
4048: PUSH
4049: DOUBLE
4050: LD_INT 1
4052: DEC
4053: ST_TO_ADDR
4054: LD_INT 8
4056: PUSH
4057: FOR_TO
4058: IFFALSE 4141
// begin vehicle := CreateVehicle ;
4060: LD_ADDR_VAR 0 3
4064: PUSH
4065: CALL_OW 45
4069: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
4070: LD_VAR 0 4
4074: PUSH
4075: LD_INT 1
4077: ARRAY
4078: PPUSH
4079: LD_VAR 0 3
4083: PPUSH
4084: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
4088: LD_ADDR_VAR 0 4
4092: PUSH
4093: LD_VAR 0 4
4097: PUSH
4098: LD_VAR 0 4
4102: PUSH
4103: LD_INT 1
4105: ARRAY
4106: DIFF
4107: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4108: LD_VAR 0 3
4112: PPUSH
4113: LD_INT 5
4115: PPUSH
4116: LD_INT 0
4118: PPUSH
4119: CALL_OW 49
// vehs := vehs ^ vehicle ;
4123: LD_ADDR_VAR 0 6
4127: PUSH
4128: LD_VAR 0 6
4132: PUSH
4133: LD_VAR 0 3
4137: ADD
4138: ST_TO_ADDR
// end ;
4139: GO 4057
4141: POP
4142: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gun , 100 ) ;
4143: LD_INT 22
4145: PPUSH
4146: LD_INT 3
4148: PPUSH
4149: LD_INT 1
4151: PPUSH
4152: LD_INT 44
4154: PPUSH
4155: LD_INT 100
4157: PPUSH
4158: CALL 18290 0 5
// for i = 1 to 4 do
4162: LD_ADDR_VAR 0 2
4166: PUSH
4167: DOUBLE
4168: LD_INT 1
4170: DEC
4171: ST_TO_ADDR
4172: LD_INT 4
4174: PUSH
4175: FOR_TO
4176: IFFALSE 4259
// begin vehicle := CreateVehicle ;
4178: LD_ADDR_VAR 0 3
4182: PUSH
4183: CALL_OW 45
4187: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
4188: LD_VAR 0 4
4192: PUSH
4193: LD_INT 1
4195: ARRAY
4196: PPUSH
4197: LD_VAR 0 3
4201: PPUSH
4202: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
4206: LD_ADDR_VAR 0 4
4210: PUSH
4211: LD_VAR 0 4
4215: PUSH
4216: LD_VAR 0 4
4220: PUSH
4221: LD_INT 1
4223: ARRAY
4224: DIFF
4225: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4226: LD_VAR 0 3
4230: PPUSH
4231: LD_INT 5
4233: PPUSH
4234: LD_INT 0
4236: PPUSH
4237: CALL_OW 49
// vehs := vehs ^ vehicle ;
4241: LD_ADDR_VAR 0 6
4245: PUSH
4246: LD_VAR 0 6
4250: PUSH
4251: LD_VAR 0 3
4255: ADD
4256: ST_TO_ADDR
// end ;
4257: GO 4175
4259: POP
4260: POP
// RUArmada := vehs ;
4261: LD_ADDR_EXP 17
4265: PUSH
4266: LD_VAR 0 6
4270: ST_TO_ADDR
// SetMark ( [ IsInUnit ( Yashin ) , IsInUnit ( Popov ) , IsInUnit ( Gaydar ) , IsInUnit ( Sevi ) ] , - 6 ) ;
4271: LD_EXP 13
4275: PPUSH
4276: CALL_OW 310
4280: PUSH
4281: LD_EXP 14
4285: PPUSH
4286: CALL_OW 310
4290: PUSH
4291: LD_EXP 15
4295: PPUSH
4296: CALL_OW 310
4300: PUSH
4301: LD_EXP 16
4305: PPUSH
4306: CALL_OW 310
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: PPUSH
4317: LD_INT 6
4319: NEG
4320: PPUSH
4321: CALL_OW 242
// end ;
4325: LD_VAR 0 1
4329: RET
// export Bulldozers ; export function PrepareRUBulldozers ; var i , vehicle ; begin
4330: LD_INT 0
4332: PPUSH
4333: PPUSH
4334: PPUSH
// uc_side := 6 ;
4335: LD_ADDR_OWVAR 20
4339: PUSH
4340: LD_INT 6
4342: ST_TO_ADDR
// uc_nation := nation_russian ;
4343: LD_ADDR_OWVAR 21
4347: PUSH
4348: LD_INT 3
4350: ST_TO_ADDR
// Bulldozers := [ ] ;
4351: LD_ADDR_EXP 18
4355: PUSH
4356: EMPTY
4357: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
4358: LD_INT 24
4360: PPUSH
4361: LD_INT 3
4363: PPUSH
4364: LD_INT 3
4366: PPUSH
4367: LD_INT 53
4369: PPUSH
4370: LD_INT 100
4372: PPUSH
4373: CALL 18290 0 5
// for i = 1 to 2 do
4377: LD_ADDR_VAR 0 2
4381: PUSH
4382: DOUBLE
4383: LD_INT 1
4385: DEC
4386: ST_TO_ADDR
4387: LD_INT 2
4389: PUSH
4390: FOR_TO
4391: IFFALSE 4436
// begin vehicle := CreateVehicle ;
4393: LD_ADDR_VAR 0 3
4397: PUSH
4398: CALL_OW 45
4402: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4403: LD_VAR 0 3
4407: PPUSH
4408: LD_INT 5
4410: PPUSH
4411: LD_INT 0
4413: PPUSH
4414: CALL_OW 49
// Bulldozers := Bulldozers ^ vehicle ;
4418: LD_ADDR_EXP 18
4422: PUSH
4423: LD_EXP 18
4427: PUSH
4428: LD_VAR 0 3
4432: ADD
4433: ST_TO_ADDR
// end ;
4434: GO 4390
4436: POP
4437: POP
// end ;
4438: LD_VAR 0 1
4442: RET
// export Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ; export function PrepareRUBase ; var i , filter , un ; begin
4443: LD_INT 0
4445: PPUSH
4446: PPUSH
4447: PPUSH
4448: PPUSH
// uc_side := 3 ;
4449: LD_ADDR_OWVAR 20
4453: PUSH
4454: LD_INT 3
4456: ST_TO_ADDR
// uc_nation := nation_russian ;
4457: LD_ADDR_OWVAR 21
4461: PUSH
4462: LD_INT 3
4464: ST_TO_ADDR
// hc_name :=  ;
4465: LD_ADDR_OWVAR 26
4469: PUSH
4470: LD_STRING 
4472: ST_TO_ADDR
// hc_gallery :=  ;
4473: LD_ADDR_OWVAR 33
4477: PUSH
4478: LD_STRING 
4480: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
4481: LD_ADDR_EXP 19
4485: PUSH
4486: LD_STRING Burlak
4488: PPUSH
4489: CALL_OW 25
4493: ST_TO_ADDR
// Gleb := NewCharacter ( Gleb ) ;
4494: LD_ADDR_EXP 20
4498: PUSH
4499: LD_STRING Gleb
4501: PPUSH
4502: CALL_OW 25
4506: ST_TO_ADDR
// Furmanov := NewCharacter ( Furmanov ) ;
4507: LD_ADDR_EXP 21
4511: PUSH
4512: LD_STRING Furmanov
4514: PPUSH
4515: CALL_OW 25
4519: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
4520: LD_ADDR_EXP 22
4524: PUSH
4525: LD_STRING Titov
4527: PPUSH
4528: CALL_OW 25
4532: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
4533: LD_ADDR_EXP 23
4537: PUSH
4538: LD_STRING Scholtze
4540: PPUSH
4541: CALL_OW 25
4545: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
4546: LD_ADDR_EXP 24
4550: PUSH
4551: LD_STRING Dolgov
4553: PPUSH
4554: CALL_OW 25
4558: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
4559: LD_ADDR_EXP 25
4563: PUSH
4564: LD_STRING Kapitsova
4566: PPUSH
4567: CALL_OW 25
4571: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
4572: LD_ADDR_EXP 26
4576: PUSH
4577: LD_STRING Karamazov
4579: PPUSH
4580: CALL_OW 25
4584: ST_TO_ADDR
// Kirlenkova := NewCharacter ( Kirlenkova ) ;
4585: LD_ADDR_EXP 27
4589: PUSH
4590: LD_STRING Kirlenkova
4592: PPUSH
4593: CALL_OW 25
4597: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
4598: LD_ADDR_EXP 28
4602: PUSH
4603: LD_STRING Kovalyuk
4605: PPUSH
4606: CALL_OW 25
4610: ST_TO_ADDR
// Kozlov := NewCharacter ( Kozlov ) ;
4611: LD_ADDR_EXP 29
4615: PUSH
4616: LD_STRING Kozlov
4618: PPUSH
4619: CALL_OW 25
4623: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
4624: LD_ADDR_EXP 30
4628: PUSH
4629: LD_STRING Kuzmov
4631: PPUSH
4632: CALL_OW 25
4636: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
4637: LD_ADDR_EXP 31
4641: PUSH
4642: LD_STRING Lipshchin
4644: PPUSH
4645: CALL_OW 25
4649: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
4650: LD_ADDR_EXP 32
4654: PUSH
4655: LD_STRING Oblukov
4657: PPUSH
4658: CALL_OW 25
4662: ST_TO_ADDR
// Xavier2 := NewCharacter ( Xavier2 ) ;
4663: LD_ADDR_EXP 33
4667: PUSH
4668: LD_STRING Xavier2
4670: PPUSH
4671: CALL_OW 25
4675: ST_TO_ADDR
// Gnyevko := NewCharacter ( Gnyevko ) ;
4676: LD_ADDR_EXP 34
4680: PUSH
4681: LD_STRING Gnyevko
4683: PPUSH
4684: CALL_OW 25
4688: ST_TO_ADDR
// Belkov := NewCharacter ( Belkov ) ;
4689: LD_ADDR_EXP 35
4693: PUSH
4694: LD_STRING Belkov
4696: PPUSH
4697: CALL_OW 25
4701: ST_TO_ADDR
// filter := [ Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ] ;
4702: LD_ADDR_VAR 0 3
4706: PUSH
4707: LD_EXP 19
4711: PUSH
4712: LD_EXP 20
4716: PUSH
4717: LD_EXP 21
4721: PUSH
4722: LD_EXP 22
4726: PUSH
4727: LD_EXP 23
4731: PUSH
4732: LD_EXP 24
4736: PUSH
4737: LD_EXP 25
4741: PUSH
4742: LD_EXP 26
4746: PUSH
4747: LD_EXP 27
4751: PUSH
4752: LD_EXP 28
4756: PUSH
4757: LD_EXP 29
4761: PUSH
4762: LD_EXP 30
4766: PUSH
4767: LD_EXP 31
4771: PUSH
4772: LD_EXP 32
4776: PUSH
4777: LD_EXP 33
4781: PUSH
4782: LD_EXP 34
4786: PUSH
4787: LD_EXP 35
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: ST_TO_ADDR
// for i = 1 to filter do
4811: LD_ADDR_VAR 0 2
4815: PUSH
4816: DOUBLE
4817: LD_INT 1
4819: DEC
4820: ST_TO_ADDR
4821: LD_VAR 0 3
4825: PUSH
4826: FOR_TO
4827: IFFALSE 4852
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4829: LD_VAR 0 3
4833: PUSH
4834: LD_VAR 0 2
4838: ARRAY
4839: PPUSH
4840: LD_INT 6
4842: PPUSH
4843: LD_INT 0
4845: PPUSH
4846: CALL_OW 49
4850: GO 4826
4852: POP
4853: POP
// end ;
4854: LD_VAR 0 1
4858: RET
// export RU_SecondPersonnel ; export function PrepareRUBase_v2 ; var i , filter , un ; begin
4859: LD_INT 0
4861: PPUSH
4862: PPUSH
4863: PPUSH
4864: PPUSH
// uc_side := 3 ;
4865: LD_ADDR_OWVAR 20
4869: PUSH
4870: LD_INT 3
4872: ST_TO_ADDR
// uc_nation := nation_russian ;
4873: LD_ADDR_OWVAR 21
4877: PUSH
4878: LD_INT 3
4880: ST_TO_ADDR
// hc_name :=  ;
4881: LD_ADDR_OWVAR 26
4885: PUSH
4886: LD_STRING 
4888: ST_TO_ADDR
// hc_gallery :=  ;
4889: LD_ADDR_OWVAR 33
4893: PUSH
4894: LD_STRING 
4896: ST_TO_ADDR
// for i = 1 to 8 do
4897: LD_ADDR_VAR 0 2
4901: PUSH
4902: DOUBLE
4903: LD_INT 1
4905: DEC
4906: ST_TO_ADDR
4907: LD_INT 8
4909: PUSH
4910: FOR_TO
4911: IFFALSE 4953
// begin PrepareSoldier ( 0 , game_eskill ) ;
4913: LD_INT 0
4915: PPUSH
4916: LD_EXP 40
4920: PPUSH
4921: CALL_OW 381
// un := CreateHuman ;
4925: LD_ADDR_VAR 0 4
4929: PUSH
4930: CALL_OW 44
4934: ST_TO_ADDR
// filter := filter ^ un ;
4935: LD_ADDR_VAR 0 3
4939: PUSH
4940: LD_VAR 0 3
4944: PUSH
4945: LD_VAR 0 4
4949: ADD
4950: ST_TO_ADDR
// end ;
4951: GO 4910
4953: POP
4954: POP
// for i = 1 to 4 do
4955: LD_ADDR_VAR 0 2
4959: PUSH
4960: DOUBLE
4961: LD_INT 1
4963: DEC
4964: ST_TO_ADDR
4965: LD_INT 4
4967: PUSH
4968: FOR_TO
4969: IFFALSE 5011
// begin PrepareEngineer ( 0 , game_eskill ) ;
4971: LD_INT 0
4973: PPUSH
4974: LD_EXP 40
4978: PPUSH
4979: CALL_OW 382
// un := CreateHuman ;
4983: LD_ADDR_VAR 0 4
4987: PUSH
4988: CALL_OW 44
4992: ST_TO_ADDR
// filter := filter ^ un ;
4993: LD_ADDR_VAR 0 3
4997: PUSH
4998: LD_VAR 0 3
5002: PUSH
5003: LD_VAR 0 4
5007: ADD
5008: ST_TO_ADDR
// end ;
5009: GO 4968
5011: POP
5012: POP
// for i = 1 to 6 do
5013: LD_ADDR_VAR 0 2
5017: PUSH
5018: DOUBLE
5019: LD_INT 1
5021: DEC
5022: ST_TO_ADDR
5023: LD_INT 6
5025: PUSH
5026: FOR_TO
5027: IFFALSE 5069
// begin PrepareMechanic ( 0 , game_eskill ) ;
5029: LD_INT 0
5031: PPUSH
5032: LD_EXP 40
5036: PPUSH
5037: CALL_OW 383
// un := CreateHuman ;
5041: LD_ADDR_VAR 0 4
5045: PUSH
5046: CALL_OW 44
5050: ST_TO_ADDR
// filter := filter ^ un ;
5051: LD_ADDR_VAR 0 3
5055: PUSH
5056: LD_VAR 0 3
5060: PUSH
5061: LD_VAR 0 4
5065: ADD
5066: ST_TO_ADDR
// end ;
5067: GO 5026
5069: POP
5070: POP
// for i = 1 to 4 do
5071: LD_ADDR_VAR 0 2
5075: PUSH
5076: DOUBLE
5077: LD_INT 1
5079: DEC
5080: ST_TO_ADDR
5081: LD_INT 4
5083: PUSH
5084: FOR_TO
5085: IFFALSE 5127
// begin PrepareScientist ( 0 , game_eskill ) ;
5087: LD_INT 0
5089: PPUSH
5090: LD_EXP 40
5094: PPUSH
5095: CALL_OW 384
// un := CreateHuman ;
5099: LD_ADDR_VAR 0 4
5103: PUSH
5104: CALL_OW 44
5108: ST_TO_ADDR
// filter := filter ^ un ;
5109: LD_ADDR_VAR 0 3
5113: PUSH
5114: LD_VAR 0 3
5118: PUSH
5119: LD_VAR 0 4
5123: ADD
5124: ST_TO_ADDR
// end ;
5125: GO 5084
5127: POP
5128: POP
// for i = 1 to filter do
5129: LD_ADDR_VAR 0 2
5133: PUSH
5134: DOUBLE
5135: LD_INT 1
5137: DEC
5138: ST_TO_ADDR
5139: LD_VAR 0 3
5143: PUSH
5144: FOR_TO
5145: IFFALSE 5170
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
5147: LD_VAR 0 3
5151: PUSH
5152: LD_VAR 0 2
5156: ARRAY
5157: PPUSH
5158: LD_INT 6
5160: PPUSH
5161: LD_INT 0
5163: PPUSH
5164: CALL_OW 49
5168: GO 5144
5170: POP
5171: POP
// RU_SecondPersonnel := filter ;
5172: LD_ADDR_EXP 36
5176: PUSH
5177: LD_VAR 0 3
5181: ST_TO_ADDR
// end ;
5182: LD_VAR 0 1
5186: RET
// export JMM ; export function JMMReinforcement ; var i , soldiers , un , vehs , vehicle , mechs ; begin
5187: LD_INT 0
5189: PPUSH
5190: PPUSH
5191: PPUSH
5192: PPUSH
5193: PPUSH
5194: PPUSH
5195: PPUSH
// uc_side := 1 ;
5196: LD_ADDR_OWVAR 20
5200: PUSH
5201: LD_INT 1
5203: ST_TO_ADDR
// uc_nation := nation_american ;
5204: LD_ADDR_OWVAR 21
5208: PUSH
5209: LD_INT 1
5211: ST_TO_ADDR
// JMM := NewCharacter ( JMM ) ;
5212: LD_ADDR_EXP 37
5216: PUSH
5217: LD_STRING JMM
5219: PPUSH
5220: CALL_OW 25
5224: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
5225: LD_EXP 37
5229: PPUSH
5230: LD_INT 1
5232: PPUSH
5233: CALL_OW 233
// PlaceUnitArea ( JMM , JMMArrivalArea , false ) ;
5237: LD_EXP 37
5241: PPUSH
5242: LD_INT 7
5244: PPUSH
5245: LD_INT 0
5247: PPUSH
5248: CALL_OW 49
// mechs := [ ] ;
5252: LD_ADDR_VAR 0 7
5256: PUSH
5257: EMPTY
5258: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
5259: LD_ADDR_VAR 0 2
5263: PUSH
5264: DOUBLE
5265: LD_INT 1
5267: DEC
5268: ST_TO_ADDR
5269: LD_INT 4
5271: PUSH
5272: LD_INT 3
5274: PUSH
5275: LD_INT 3
5277: PUSH
5278: EMPTY
5279: LIST
5280: LIST
5281: LIST
5282: PUSH
5283: LD_OWVAR 67
5287: ARRAY
5288: PUSH
5289: FOR_TO
5290: IFFALSE 5351
// begin PrepareSoldier ( 0 , game_skill + 1 ) ;
5292: LD_INT 0
5294: PPUSH
5295: LD_EXP 39
5299: PUSH
5300: LD_INT 1
5302: PLUS
5303: PPUSH
5304: CALL_OW 381
// un := CreateHuman ;
5308: LD_ADDR_VAR 0 4
5312: PUSH
5313: CALL_OW 44
5317: ST_TO_ADDR
// soldiers := soldiers ^ un ;
5318: LD_ADDR_VAR 0 3
5322: PUSH
5323: LD_VAR 0 3
5327: PUSH
5328: LD_VAR 0 4
5332: ADD
5333: ST_TO_ADDR
// PlaceUnitArea ( un , JMMArrivalArea , false ) ;
5334: LD_VAR 0 4
5338: PPUSH
5339: LD_INT 7
5341: PPUSH
5342: LD_INT 0
5344: PPUSH
5345: CALL_OW 49
// end ;
5349: GO 5289
5351: POP
5352: POP
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
5353: LD_ADDR_VAR 0 2
5357: PUSH
5358: DOUBLE
5359: LD_INT 1
5361: DEC
5362: ST_TO_ADDR
5363: LD_INT 7
5365: PUSH
5366: LD_INT 6
5368: PUSH
5369: LD_INT 4
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: LIST
5376: PUSH
5377: LD_OWVAR 67
5381: ARRAY
5382: PUSH
5383: FOR_TO
5384: IFFALSE 5430
// begin PrepareMechanic ( 0 , game_skill + 1 ) ;
5386: LD_INT 0
5388: PPUSH
5389: LD_EXP 39
5393: PUSH
5394: LD_INT 1
5396: PLUS
5397: PPUSH
5398: CALL_OW 383
// un := CreateHuman ;
5402: LD_ADDR_VAR 0 4
5406: PUSH
5407: CALL_OW 44
5411: ST_TO_ADDR
// mechs := mechs ^ un ;
5412: LD_ADDR_VAR 0 7
5416: PUSH
5417: LD_VAR 0 7
5421: PUSH
5422: LD_VAR 0 4
5426: ADD
5427: ST_TO_ADDR
// end ;
5428: GO 5383
5430: POP
5431: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_double_gun , 100 ) ;
5432: LD_INT 3
5434: PPUSH
5435: LD_INT 3
5437: PPUSH
5438: LD_INT 1
5440: PPUSH
5441: LD_INT 5
5443: PPUSH
5444: LD_INT 100
5446: PPUSH
5447: CALL 18290 0 5
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
5451: LD_ADDR_VAR 0 2
5455: PUSH
5456: DOUBLE
5457: LD_INT 1
5459: DEC
5460: ST_TO_ADDR
5461: LD_INT 7
5463: PUSH
5464: LD_INT 6
5466: PUSH
5467: LD_INT 4
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: LIST
5474: PUSH
5475: LD_OWVAR 67
5479: ARRAY
5480: PUSH
5481: FOR_TO
5482: IFFALSE 5577
// begin vehicle := CreateVehicle ;
5484: LD_ADDR_VAR 0 6
5488: PUSH
5489: CALL_OW 45
5493: ST_TO_ADDR
// PlaceHumanInUnit ( mechs [ 1 ] , vehicle ) ;
5494: LD_VAR 0 7
5498: PUSH
5499: LD_INT 1
5501: ARRAY
5502: PPUSH
5503: LD_VAR 0 6
5507: PPUSH
5508: CALL_OW 52
// mechs := mechs diff mechs [ 1 ] ;
5512: LD_ADDR_VAR 0 7
5516: PUSH
5517: LD_VAR 0 7
5521: PUSH
5522: LD_VAR 0 7
5526: PUSH
5527: LD_INT 1
5529: ARRAY
5530: DIFF
5531: ST_TO_ADDR
// SetDir ( vehicle , 1 ) ;
5532: LD_VAR 0 6
5536: PPUSH
5537: LD_INT 1
5539: PPUSH
5540: CALL_OW 233
// PlaceUnitArea ( vehicle , JMMArrivalArea , false ) ;
5544: LD_VAR 0 6
5548: PPUSH
5549: LD_INT 7
5551: PPUSH
5552: LD_INT 0
5554: PPUSH
5555: CALL_OW 49
// vehs := vehs ^ vehicle ;
5559: LD_ADDR_VAR 0 5
5563: PUSH
5564: LD_VAR 0 5
5568: PUSH
5569: LD_VAR 0 6
5573: ADD
5574: ST_TO_ADDR
// end ;
5575: GO 5481
5577: POP
5578: POP
// end ; end_of_file
5579: LD_VAR 0 1
5583: RET
// export game_diff ; export game_skill , game_eskill ; export jmmArrival , ruArrival ; export startCrates ; export function GameType ; var i , ruStartTechs ; begin
5584: LD_INT 0
5586: PPUSH
5587: PPUSH
5588: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
5589: LD_ADDR_OWVAR 67
5593: PUSH
5594: LD_INT 0
5596: PPUSH
5597: CALL_OW 426
5601: ST_TO_ADDR
// game_diff := Difficulty ;
5602: LD_ADDR_EXP 38
5606: PUSH
5607: LD_OWVAR 67
5611: ST_TO_ADDR
// game_skill := [ 7 , 6 , 6 ] [ game_diff ] ;
5612: LD_ADDR_EXP 39
5616: PUSH
5617: LD_INT 7
5619: PUSH
5620: LD_INT 6
5622: PUSH
5623: LD_INT 6
5625: PUSH
5626: EMPTY
5627: LIST
5628: LIST
5629: LIST
5630: PUSH
5631: LD_EXP 38
5635: ARRAY
5636: ST_TO_ADDR
// game_eskill := [ 6 , 7 , 8 ] [ game_diff ] ;
5637: LD_ADDR_EXP 40
5641: PUSH
5642: LD_INT 6
5644: PUSH
5645: LD_INT 7
5647: PUSH
5648: LD_INT 8
5650: PUSH
5651: EMPTY
5652: LIST
5653: LIST
5654: LIST
5655: PUSH
5656: LD_EXP 38
5660: ARRAY
5661: ST_TO_ADDR
// ruArrival := [ 5 5$00 , 3 3$00 , 2 2$00 ] [ game_diff ] ;
5662: LD_ADDR_EXP 42
5666: PUSH
5667: LD_INT 10500
5669: PUSH
5670: LD_INT 6300
5672: PUSH
5673: LD_INT 4200
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: LIST
5680: PUSH
5681: LD_EXP 38
5685: ARRAY
5686: ST_TO_ADDR
// jmmArrival := [ 35 35$00 , 45 45$00 , 55 55$00 ] [ game_diff ] ;
5687: LD_ADDR_EXP 41
5691: PUSH
5692: LD_INT 73500
5694: PUSH
5695: LD_INT 94500
5697: PUSH
5698: LD_INT 115500
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: LIST
5705: PUSH
5706: LD_EXP 38
5710: ARRAY
5711: ST_TO_ADDR
// ruStartTechs = [ [ tech_Weap1 ] , [ tech_Weap1 , tech_Comp1 ] , [ tech_Weap1 , tech_Weap2 , tech_Comp1 ] ] ;
5712: LD_ADDR_VAR 0 3
5716: PUSH
5717: LD_INT 51
5719: PUSH
5720: EMPTY
5721: LIST
5722: PUSH
5723: LD_INT 51
5725: PUSH
5726: LD_INT 57
5728: PUSH
5729: EMPTY
5730: LIST
5731: LIST
5732: PUSH
5733: LD_INT 51
5735: PUSH
5736: LD_INT 52
5738: PUSH
5739: LD_INT 57
5741: PUSH
5742: EMPTY
5743: LIST
5744: LIST
5745: LIST
5746: PUSH
5747: EMPTY
5748: LIST
5749: LIST
5750: LIST
5751: ST_TO_ADDR
// startCrates = [ [ 300 , 350 ] , [ 230 , 200 ] , [ 150 , 100 ] ] [ game_diff ] ;
5752: LD_ADDR_EXP 43
5756: PUSH
5757: LD_INT 300
5759: PUSH
5760: LD_INT 350
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_INT 230
5769: PUSH
5770: LD_INT 200
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PUSH
5777: LD_INT 150
5779: PUSH
5780: LD_INT 100
5782: PUSH
5783: EMPTY
5784: LIST
5785: LIST
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: LIST
5791: PUSH
5792: LD_EXP 38
5796: ARRAY
5797: ST_TO_ADDR
// for i := 1 to ruStartTechs [ game_diff ] do
5798: LD_ADDR_VAR 0 2
5802: PUSH
5803: DOUBLE
5804: LD_INT 1
5806: DEC
5807: ST_TO_ADDR
5808: LD_VAR 0 3
5812: PUSH
5813: LD_EXP 38
5817: ARRAY
5818: PUSH
5819: FOR_TO
5820: IFFALSE 5878
// begin SetTech ( ruStartTechs [ game_diff ] [ i ] , 3 , state_researched ) ;
5822: LD_VAR 0 3
5826: PUSH
5827: LD_EXP 38
5831: ARRAY
5832: PUSH
5833: LD_VAR 0 2
5837: ARRAY
5838: PPUSH
5839: LD_INT 3
5841: PPUSH
5842: LD_INT 2
5844: PPUSH
5845: CALL_OW 322
// SetTech ( ruStartTechs [ game_diff ] [ i ] , 6 , state_researched ) ;
5849: LD_VAR 0 3
5853: PUSH
5854: LD_EXP 38
5858: ARRAY
5859: PUSH
5860: LD_VAR 0 2
5864: ARRAY
5865: PPUSH
5866: LD_INT 6
5868: PPUSH
5869: LD_INT 2
5871: PPUSH
5872: CALL_OW 322
// end ;
5876: GO 5819
5878: POP
5879: POP
// end ; end_of_file
5880: LD_VAR 0 1
5884: RET
// export function CustomEvent ( event ) ; begin
5885: LD_INT 0
5887: PPUSH
// end ;
5888: LD_VAR 0 2
5892: RET
// export function CustomInitMacro ( ) ; begin
5893: LD_INT 0
5895: PPUSH
// MC_SetScanArea ( 1 , RU_Base_Area ) ;
5896: LD_INT 1
5898: PPUSH
5899: LD_INT 3
5901: PPUSH
5902: CALL 74882 0 2
// MC_SetParkingArea ( 1 , RU_Base_Parking ) ;
5906: LD_INT 1
5908: PPUSH
5909: LD_INT 4
5911: PPUSH
5912: CALL 74826 0 2
// MC_SetDepositsXY ( 1 , [ [ 136 , 130 , 0 ] , [ 145 , 123 , 0 ] , ] ) ;
5916: LD_INT 1
5918: PPUSH
5919: LD_INT 136
5921: PUSH
5922: LD_INT 130
5924: PUSH
5925: LD_INT 0
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: LIST
5932: PUSH
5933: LD_INT 145
5935: PUSH
5936: LD_INT 123
5938: PUSH
5939: LD_INT 0
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: LIST
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: PPUSH
5951: CALL 73885 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
5955: LD_INT 1
5957: PPUSH
5958: LD_INT 43
5960: PUSH
5961: LD_INT 46
5963: PUSH
5964: LD_INT 45
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: LIST
5971: PPUSH
5972: CALL 74714 0 2
// MC_SetCratesArea ( 1 , RU_Base_Area ) ;
5976: LD_INT 1
5978: PPUSH
5979: LD_INT 3
5981: PPUSH
5982: CALL 74396 0 2
// MC_SetTame ( 1 , RU_Base_Area ) ;
5986: LD_INT 1
5988: PPUSH
5989: LD_INT 3
5991: PPUSH
5992: CALL 74127 0 2
// MC_SetDefenderLimit ( 1 , 8 ) ;
5996: LD_INT 1
5998: PPUSH
5999: LD_INT 8
6001: PPUSH
6002: CALL 73746 0 2
// MC_SetProduceList ( 1 , [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] ] ) ;
6006: LD_INT 1
6008: PPUSH
6009: LD_INT 22
6011: PUSH
6012: LD_INT 1
6014: PUSH
6015: LD_INT 3
6017: PUSH
6018: LD_INT 43
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: PUSH
6027: LD_INT 22
6029: PUSH
6030: LD_INT 1
6032: PUSH
6033: LD_INT 3
6035: PUSH
6036: LD_INT 44
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: PUSH
6045: LD_INT 22
6047: PUSH
6048: LD_INT 1
6050: PUSH
6051: LD_INT 3
6053: PUSH
6054: LD_INT 45
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: PUSH
6063: LD_INT 24
6065: PUSH
6066: LD_INT 1
6068: PUSH
6069: LD_INT 3
6071: PUSH
6072: LD_INT 43
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: PUSH
6081: LD_INT 24
6083: PUSH
6084: LD_INT 1
6086: PUSH
6087: LD_INT 3
6089: PUSH
6090: LD_INT 43
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: PUSH
6099: LD_INT 24
6101: PUSH
6102: LD_INT 1
6104: PUSH
6105: LD_INT 3
6107: PUSH
6108: LD_INT 46
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: PUSH
6117: LD_INT 22
6119: PUSH
6120: LD_INT 1
6122: PUSH
6123: LD_INT 3
6125: PUSH
6126: LD_INT 43
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: PUSH
6135: LD_INT 22
6137: PUSH
6138: LD_INT 1
6140: PUSH
6141: LD_INT 3
6143: PUSH
6144: LD_INT 44
6146: PUSH
6147: EMPTY
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: PPUSH
6163: CALL 73561 0 2
// MC_SetBuildingList ( 1 , [ [ b_depot , 127 , 125 , 5 ] , [ b_lab , 124 , 132 , 0 ] , [ b_oil_mine , 136 , 130 , 1 ] , [ b_armoury , 118 , 114 , 2 ] , [ b_oil_mine , 145 , 123 , 1 ] , [ b_oil_power , 150 , 135 , 1 ] , [ b_oil_power , 140 , 134 , 2 ] , [ b_oil_power , 137 , 121 , 5 ] , [ b_workshop , 155 , 130 , 0 ] , [ b_bunker , 155 , 130 , 0 ] , [ b_bunker , 130 , 114 , 3 ] , [ b_bunker , 142 , 115 , 3 ] , [ b_bunker , 153 , 120 , 3 ] , ] ) ;
6167: LD_INT 1
6169: PPUSH
6170: LD_INT 0
6172: PUSH
6173: LD_INT 127
6175: PUSH
6176: LD_INT 125
6178: PUSH
6179: LD_INT 5
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: PUSH
6188: LD_INT 6
6190: PUSH
6191: LD_INT 124
6193: PUSH
6194: LD_INT 132
6196: PUSH
6197: LD_INT 0
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: PUSH
6206: LD_INT 29
6208: PUSH
6209: LD_INT 136
6211: PUSH
6212: LD_INT 130
6214: PUSH
6215: LD_INT 1
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 4
6226: PUSH
6227: LD_INT 118
6229: PUSH
6230: LD_INT 114
6232: PUSH
6233: LD_INT 2
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: PUSH
6242: LD_INT 29
6244: PUSH
6245: LD_INT 145
6247: PUSH
6248: LD_INT 123
6250: PUSH
6251: LD_INT 1
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: PUSH
6260: LD_INT 26
6262: PUSH
6263: LD_INT 150
6265: PUSH
6266: LD_INT 135
6268: PUSH
6269: LD_INT 1
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: PUSH
6278: LD_INT 26
6280: PUSH
6281: LD_INT 140
6283: PUSH
6284: LD_INT 134
6286: PUSH
6287: LD_INT 2
6289: PUSH
6290: EMPTY
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: PUSH
6296: LD_INT 26
6298: PUSH
6299: LD_INT 137
6301: PUSH
6302: LD_INT 121
6304: PUSH
6305: LD_INT 5
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: PUSH
6314: LD_INT 2
6316: PUSH
6317: LD_INT 155
6319: PUSH
6320: LD_INT 130
6322: PUSH
6323: LD_INT 0
6325: PUSH
6326: EMPTY
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: PUSH
6332: LD_INT 32
6334: PUSH
6335: LD_INT 155
6337: PUSH
6338: LD_INT 130
6340: PUSH
6341: LD_INT 0
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: PUSH
6350: LD_INT 32
6352: PUSH
6353: LD_INT 130
6355: PUSH
6356: LD_INT 114
6358: PUSH
6359: LD_INT 3
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: PUSH
6368: LD_INT 32
6370: PUSH
6371: LD_INT 142
6373: PUSH
6374: LD_INT 115
6376: PUSH
6377: LD_INT 3
6379: PUSH
6380: EMPTY
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: PUSH
6386: LD_INT 32
6388: PUSH
6389: LD_INT 153
6391: PUSH
6392: LD_INT 120
6394: PUSH
6395: LD_INT 3
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: PPUSH
6419: CALL 73453 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_computer ] ) ;
6423: LD_INT 1
6425: PPUSH
6426: LD_INT 10
6428: PUSH
6429: LD_INT 12
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: PPUSH
6436: CALL 74303 0 2
// MC_SetFactoryExtension ( 1 , 155 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
6440: LD_INT 1
6442: PPUSH
6443: LD_INT 155
6445: PPUSH
6446: LD_INT 130
6448: PPUSH
6449: LD_INT 0
6451: PPUSH
6452: LD_INT 24
6454: PUSH
6455: LD_INT 16
6457: PUSH
6458: LD_INT 17
6460: PUSH
6461: LD_INT 18
6463: PUSH
6464: LD_INT 21
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: PPUSH
6474: CALL 74508 0 5
// MC_SetScanArea ( 2 , RU_Base_Area ) ;
6478: LD_INT 2
6480: PPUSH
6481: LD_INT 3
6483: PPUSH
6484: CALL 74882 0 2
// MC_SetParkingArea ( 2 , RU_Base_Parking ) ;
6488: LD_INT 2
6490: PPUSH
6491: LD_INT 4
6493: PPUSH
6494: CALL 74826 0 2
// MC_SetDepositsXY ( 2 , [ [ 84 , 125 , 1 ] , ] ) ;
6498: LD_INT 2
6500: PPUSH
6501: LD_INT 84
6503: PUSH
6504: LD_INT 125
6506: PUSH
6507: LD_INT 1
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: LIST
6514: PUSH
6515: EMPTY
6516: LIST
6517: PPUSH
6518: CALL 73885 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
6522: LD_INT 2
6524: PPUSH
6525: LD_INT 43
6527: PUSH
6528: LD_INT 46
6530: PUSH
6531: LD_INT 45
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: PPUSH
6539: CALL 74714 0 2
// MC_SetCratesArea ( 2 , RU_Base_Area ) ;
6543: LD_INT 2
6545: PPUSH
6546: LD_INT 3
6548: PPUSH
6549: CALL 74396 0 2
// MC_SetTame ( 2 , RU_Base_Area ) ;
6553: LD_INT 2
6555: PPUSH
6556: LD_INT 3
6558: PPUSH
6559: CALL 74127 0 2
// MC_SetDefenderLimit ( 2 , 8 ) ;
6563: LD_INT 2
6565: PPUSH
6566: LD_INT 8
6568: PPUSH
6569: CALL 73746 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] ] ) ;
6573: LD_INT 2
6575: PPUSH
6576: LD_INT 22
6578: PUSH
6579: LD_INT 3
6581: PUSH
6582: LD_INT 3
6584: PUSH
6585: LD_INT 43
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: PUSH
6594: LD_INT 22
6596: PUSH
6597: LD_INT 3
6599: PUSH
6600: LD_INT 3
6602: PUSH
6603: LD_INT 44
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: PUSH
6612: LD_INT 22
6614: PUSH
6615: LD_INT 3
6617: PUSH
6618: LD_INT 3
6620: PUSH
6621: LD_INT 45
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: PUSH
6630: LD_INT 24
6632: PUSH
6633: LD_INT 3
6635: PUSH
6636: LD_INT 3
6638: PUSH
6639: LD_INT 43
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: PUSH
6648: LD_INT 24
6650: PUSH
6651: LD_INT 3
6653: PUSH
6654: LD_INT 3
6656: PUSH
6657: LD_INT 43
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: PUSH
6666: LD_INT 24
6668: PUSH
6669: LD_INT 3
6671: PUSH
6672: LD_INT 3
6674: PUSH
6675: LD_INT 46
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: PUSH
6684: LD_INT 22
6686: PUSH
6687: LD_INT 3
6689: PUSH
6690: LD_INT 3
6692: PUSH
6693: LD_INT 43
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: PUSH
6702: LD_INT 22
6704: PUSH
6705: LD_INT 3
6707: PUSH
6708: LD_INT 3
6710: PUSH
6711: LD_INT 44
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: PPUSH
6730: CALL 73561 0 2
// MC_SetBuildingList ( 2 , [ [ b_depot , 96 , 125 , 0 ] , [ b_lab , 74 , 122 , 1 ] , [ b_siberite_mine , 84 , 125 , 1 ] , [ b_siberite_power , 86 , 128 , 1 ] , [ b_siberite_power , 85 , 130 , 2 ] , [ b_siberite_power , 88 , 132 , 5 ] , [ b_workshop , 106 , 130 , 0 ] , [ b_armoury , 99 , 114 , 3 ] , [ b_bunker , 72 , 112 , 2 ] , [ b_bunker , 78 , 110 , 3 ] , [ b_bunker , 84 , 110 , 2 ] , [ b_bunker , 105 , 117 , 3 ] , ] ) ;
6734: LD_INT 2
6736: PPUSH
6737: LD_INT 0
6739: PUSH
6740: LD_INT 96
6742: PUSH
6743: LD_INT 125
6745: PUSH
6746: LD_INT 0
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: PUSH
6755: LD_INT 6
6757: PUSH
6758: LD_INT 74
6760: PUSH
6761: LD_INT 122
6763: PUSH
6764: LD_INT 1
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: PUSH
6773: LD_INT 30
6775: PUSH
6776: LD_INT 84
6778: PUSH
6779: LD_INT 125
6781: PUSH
6782: LD_INT 1
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: PUSH
6791: LD_INT 28
6793: PUSH
6794: LD_INT 86
6796: PUSH
6797: LD_INT 128
6799: PUSH
6800: LD_INT 1
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: PUSH
6809: LD_INT 28
6811: PUSH
6812: LD_INT 85
6814: PUSH
6815: LD_INT 130
6817: PUSH
6818: LD_INT 2
6820: PUSH
6821: EMPTY
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: PUSH
6827: LD_INT 28
6829: PUSH
6830: LD_INT 88
6832: PUSH
6833: LD_INT 132
6835: PUSH
6836: LD_INT 5
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: PUSH
6845: LD_INT 2
6847: PUSH
6848: LD_INT 106
6850: PUSH
6851: LD_INT 130
6853: PUSH
6854: LD_INT 0
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: PUSH
6863: LD_INT 4
6865: PUSH
6866: LD_INT 99
6868: PUSH
6869: LD_INT 114
6871: PUSH
6872: LD_INT 3
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: PUSH
6881: LD_INT 32
6883: PUSH
6884: LD_INT 72
6886: PUSH
6887: LD_INT 112
6889: PUSH
6890: LD_INT 2
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: PUSH
6899: LD_INT 32
6901: PUSH
6902: LD_INT 78
6904: PUSH
6905: LD_INT 110
6907: PUSH
6908: LD_INT 3
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: PUSH
6917: LD_INT 32
6919: PUSH
6920: LD_INT 84
6922: PUSH
6923: LD_INT 110
6925: PUSH
6926: LD_INT 2
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: PUSH
6935: LD_INT 32
6937: PUSH
6938: LD_INT 105
6940: PUSH
6941: LD_INT 117
6943: PUSH
6944: LD_INT 3
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: PPUSH
6967: CALL 73453 0 2
// MC_SetLabKind ( 2 , [ b_lab_spacetime , b_lab_siberium ] ) ;
6971: LD_INT 2
6973: PPUSH
6974: LD_INT 14
6976: PUSH
6977: LD_INT 11
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: PPUSH
6984: CALL 74303 0 2
// MC_SetFactoryExtension ( 2 , 106 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
6988: LD_INT 2
6990: PPUSH
6991: LD_INT 106
6993: PPUSH
6994: LD_INT 130
6996: PPUSH
6997: LD_INT 0
6999: PPUSH
7000: LD_INT 24
7002: PUSH
7003: LD_INT 16
7005: PUSH
7006: LD_INT 17
7008: PUSH
7009: LD_INT 18
7011: PUSH
7012: LD_INT 21
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: PPUSH
7022: CALL 74508 0 5
// end ;
7026: LD_VAR 0 1
7030: RET
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
7031: LD_INT 22
7033: PUSH
7034: LD_INT 3
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PUSH
7041: LD_INT 30
7043: PUSH
7044: LD_INT 3
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: PPUSH
7055: CALL_OW 69
7059: IFFALSE 8202
7061: GO 7063
7063: DISABLE
7064: LD_INT 0
7066: PPUSH
7067: PPUSH
7068: PPUSH
7069: PPUSH
7070: PPUSH
7071: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
7072: LD_INT 6300
7074: PUSH
7075: LD_INT 4200
7077: PUSH
7078: LD_INT 2100
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: LIST
7085: PUSH
7086: LD_OWVAR 67
7090: ARRAY
7091: PPUSH
7092: CALL_OW 67
// base := 2 ;
7096: LD_ADDR_VAR 0 2
7100: PUSH
7101: LD_INT 2
7103: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
7104: LD_INT 22
7106: PUSH
7107: LD_INT 3
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: PUSH
7114: LD_INT 30
7116: PUSH
7117: LD_INT 3
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PPUSH
7128: CALL_OW 69
7132: NOT
7133: IFFALSE 7137
// continue ;
7135: GO 7072
// case Rand ( 1 , 3 ) of 1 :
7137: LD_INT 1
7139: PPUSH
7140: LD_INT 3
7142: PPUSH
7143: CALL_OW 12
7147: PUSH
7148: LD_INT 1
7150: DOUBLE
7151: EQUAL
7152: IFTRUE 7156
7154: GO 7332
7156: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
7157: LD_ADDR_VAR 0 3
7161: PUSH
7162: LD_INT 22
7164: PUSH
7165: LD_INT 3
7167: PUSH
7168: LD_INT 3
7170: PUSH
7171: LD_INT 43
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: PUSH
7180: LD_INT 24
7182: PUSH
7183: LD_INT 3
7185: PUSH
7186: LD_INT 3
7188: PUSH
7189: LD_INT 46
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 24
7200: PUSH
7201: LD_INT 3
7203: PUSH
7204: LD_INT 3
7206: PUSH
7207: LD_INT 43
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: PUSH
7216: LD_INT 24
7218: PUSH
7219: LD_INT 3
7221: PUSH
7222: LD_INT 3
7224: PUSH
7225: LD_INT 46
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: PUSH
7234: LD_INT 22
7236: PUSH
7237: LD_INT 3
7239: PUSH
7240: LD_INT 3
7242: PUSH
7243: LD_INT 45
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: PUSH
7252: LD_INT 22
7254: PUSH
7255: LD_INT 3
7257: PUSH
7258: LD_INT 3
7260: PUSH
7261: LD_INT 43
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: PUSH
7270: LD_INT 24
7272: PUSH
7273: LD_INT 3
7275: PUSH
7276: LD_INT 3
7278: PUSH
7279: LD_INT 46
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: PUSH
7288: LD_INT 22
7290: PUSH
7291: LD_INT 3
7293: PUSH
7294: LD_INT 3
7296: PUSH
7297: LD_INT 45
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7316: LD_VAR 0 2
7320: PPUSH
7321: LD_VAR 0 3
7325: PPUSH
7326: CALL 73609 0 2
// end ; 2 :
7330: GO 7663
7332: LD_INT 2
7334: DOUBLE
7335: EQUAL
7336: IFTRUE 7340
7338: GO 7478
7340: POP
// begin tmp := [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
7341: LD_ADDR_VAR 0 3
7345: PUSH
7346: LD_INT 24
7348: PUSH
7349: LD_INT 3
7351: PUSH
7352: LD_INT 3
7354: PUSH
7355: LD_INT 43
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: PUSH
7364: LD_INT 24
7366: PUSH
7367: LD_INT 3
7369: PUSH
7370: LD_INT 3
7372: PUSH
7373: LD_INT 46
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: PUSH
7382: LD_INT 24
7384: PUSH
7385: LD_INT 3
7387: PUSH
7388: LD_INT 3
7390: PUSH
7391: LD_INT 43
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: PUSH
7400: LD_INT 24
7402: PUSH
7403: LD_INT 3
7405: PUSH
7406: LD_INT 3
7408: PUSH
7409: LD_INT 46
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: PUSH
7418: LD_INT 22
7420: PUSH
7421: LD_INT 3
7423: PUSH
7424: LD_INT 3
7426: PUSH
7427: LD_INT 45
7429: PUSH
7430: EMPTY
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: PUSH
7436: LD_INT 22
7438: PUSH
7439: LD_INT 3
7441: PUSH
7442: LD_INT 3
7444: PUSH
7445: LD_INT 45
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7462: LD_VAR 0 2
7466: PPUSH
7467: LD_VAR 0 3
7471: PPUSH
7472: CALL 73609 0 2
// end ; 3 :
7476: GO 7663
7478: LD_INT 3
7480: DOUBLE
7481: EQUAL
7482: IFTRUE 7486
7484: GO 7662
7486: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
7487: LD_ADDR_VAR 0 3
7491: PUSH
7492: LD_INT 22
7494: PUSH
7495: LD_INT 3
7497: PUSH
7498: LD_INT 3
7500: PUSH
7501: LD_INT 43
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: PUSH
7510: LD_INT 24
7512: PUSH
7513: LD_INT 3
7515: PUSH
7516: LD_INT 3
7518: PUSH
7519: LD_INT 46
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: PUSH
7528: LD_INT 22
7530: PUSH
7531: LD_INT 3
7533: PUSH
7534: LD_INT 3
7536: PUSH
7537: LD_INT 43
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: PUSH
7546: LD_INT 24
7548: PUSH
7549: LD_INT 3
7551: PUSH
7552: LD_INT 3
7554: PUSH
7555: LD_INT 46
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 22
7566: PUSH
7567: LD_INT 3
7569: PUSH
7570: LD_INT 3
7572: PUSH
7573: LD_INT 45
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: PUSH
7582: LD_INT 22
7584: PUSH
7585: LD_INT 3
7587: PUSH
7588: LD_INT 3
7590: PUSH
7591: LD_INT 43
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: PUSH
7600: LD_INT 24
7602: PUSH
7603: LD_INT 3
7605: PUSH
7606: LD_INT 3
7608: PUSH
7609: LD_INT 46
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: PUSH
7618: LD_INT 22
7620: PUSH
7621: LD_INT 3
7623: PUSH
7624: LD_INT 3
7626: PUSH
7627: LD_INT 45
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: LIST
7645: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7646: LD_VAR 0 2
7650: PPUSH
7651: LD_VAR 0 3
7655: PPUSH
7656: CALL 73609 0 2
// end ; end ;
7660: GO 7663
7662: POP
// repeat wait ( 0 0$1 ) ;
7663: LD_INT 35
7665: PPUSH
7666: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
7670: LD_VAR 0 2
7674: PPUSH
7675: CALL 73957 0 1
7679: PUSH
7680: LD_INT 0
7682: EQUAL
7683: IFFALSE 7663
// wait ( 0 0$30 ) ;
7685: LD_INT 1050
7687: PPUSH
7688: CALL_OW 67
// _target := [ [ 86 , 77 ] , [ 63 , 38 ] ] ;
7692: LD_ADDR_VAR 0 5
7696: PUSH
7697: LD_INT 86
7699: PUSH
7700: LD_INT 77
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: PUSH
7707: LD_INT 63
7709: PUSH
7710: LD_INT 38
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
7721: LD_ADDR_VAR 0 4
7725: PUSH
7726: LD_INT 0
7728: PUSH
7729: LD_INT 0
7731: PUSH
7732: LD_INT 0
7734: PUSH
7735: LD_INT 1
7737: PUSH
7738: LD_INT 0
7740: PUSH
7741: LD_INT 0
7743: PUSH
7744: LD_INT 0
7746: PUSH
7747: LD_INT 0
7749: PUSH
7750: LD_INT 1
7752: PUSH
7753: LD_INT 0
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
7768: LD_ADDR_VAR 0 6
7772: PUSH
7773: LD_EXP 83
7777: PUSH
7778: LD_VAR 0 2
7782: ARRAY
7783: PUSH
7784: LD_EXP 86
7788: PUSH
7789: LD_VAR 0 2
7793: ARRAY
7794: DIFF
7795: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
7796: LD_ADDR_EXP 83
7800: PUSH
7801: LD_EXP 83
7805: PPUSH
7806: LD_VAR 0 2
7810: PPUSH
7811: LD_EXP 83
7815: PUSH
7816: LD_VAR 0 2
7820: ARRAY
7821: PUSH
7822: LD_VAR 0 6
7826: DIFF
7827: PPUSH
7828: CALL_OW 1
7832: ST_TO_ADDR
// if not attackers then
7833: LD_VAR 0 6
7837: NOT
7838: IFFALSE 7842
// continue ;
7840: GO 7072
// repeat wait ( 0 0$1 ) ;
7842: LD_INT 35
7844: PPUSH
7845: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
7849: LD_VAR 0 6
7853: PPUSH
7854: LD_INT 60
7856: PUSH
7857: EMPTY
7858: LIST
7859: PPUSH
7860: CALL_OW 72
7864: NOT
7865: IFFALSE 7842
// repeat wait ( 0 0$1 ) ;
7867: LD_INT 35
7869: PPUSH
7870: CALL_OW 67
// for i in attackers do
7874: LD_ADDR_VAR 0 1
7878: PUSH
7879: LD_VAR 0 6
7883: PUSH
7884: FOR_IN
7885: IFFALSE 8169
// begin if IsDead ( i ) then
7887: LD_VAR 0 1
7891: PPUSH
7892: CALL_OW 301
7896: IFFALSE 7914
// attackers := attackers diff i ;
7898: LD_ADDR_VAR 0 6
7902: PUSH
7903: LD_VAR 0 6
7907: PUSH
7908: LD_VAR 0 1
7912: DIFF
7913: ST_TO_ADDR
// if not HasTask ( i ) then
7914: LD_VAR 0 1
7918: PPUSH
7919: CALL_OW 314
7923: NOT
7924: IFFALSE 8167
// begin if not GetTag ( i ) then
7926: LD_VAR 0 1
7930: PPUSH
7931: CALL_OW 110
7935: NOT
7936: IFFALSE 8028
// begin ComAgressiveMove ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) ;
7938: LD_VAR 0 1
7942: PPUSH
7943: LD_VAR 0 5
7947: PUSH
7948: LD_INT 1
7950: ARRAY
7951: PUSH
7952: LD_INT 1
7954: ARRAY
7955: PPUSH
7956: LD_VAR 0 5
7960: PUSH
7961: LD_INT 1
7963: ARRAY
7964: PUSH
7965: LD_INT 2
7967: ARRAY
7968: PPUSH
7969: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) < 8 then
7973: LD_VAR 0 1
7977: PPUSH
7978: LD_VAR 0 5
7982: PUSH
7983: LD_INT 1
7985: ARRAY
7986: PUSH
7987: LD_INT 1
7989: ARRAY
7990: PPUSH
7991: LD_VAR 0 5
7995: PUSH
7996: LD_INT 1
7998: ARRAY
7999: PUSH
8000: LD_INT 2
8002: ARRAY
8003: PPUSH
8004: CALL_OW 297
8008: PUSH
8009: LD_INT 8
8011: LESS
8012: IFFALSE 8026
// SetTag ( i , 1 ) ;
8014: LD_VAR 0 1
8018: PPUSH
8019: LD_INT 1
8021: PPUSH
8022: CALL_OW 109
// end else
8026: GO 8167
// if GetTag ( i ) = 1 then
8028: LD_VAR 0 1
8032: PPUSH
8033: CALL_OW 110
8037: PUSH
8038: LD_INT 1
8040: EQUAL
8041: IFFALSE 8133
// begin ComAgressiveMove ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) ;
8043: LD_VAR 0 1
8047: PPUSH
8048: LD_VAR 0 5
8052: PUSH
8053: LD_INT 2
8055: ARRAY
8056: PUSH
8057: LD_INT 1
8059: ARRAY
8060: PPUSH
8061: LD_VAR 0 5
8065: PUSH
8066: LD_INT 2
8068: ARRAY
8069: PUSH
8070: LD_INT 2
8072: ARRAY
8073: PPUSH
8074: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) < 8 then
8078: LD_VAR 0 1
8082: PPUSH
8083: LD_VAR 0 5
8087: PUSH
8088: LD_INT 2
8090: ARRAY
8091: PUSH
8092: LD_INT 1
8094: ARRAY
8095: PPUSH
8096: LD_VAR 0 5
8100: PUSH
8101: LD_INT 2
8103: ARRAY
8104: PUSH
8105: LD_INT 2
8107: ARRAY
8108: PPUSH
8109: CALL_OW 297
8113: PUSH
8114: LD_INT 8
8116: LESS
8117: IFFALSE 8131
// SetTag ( i , 2 ) ;
8119: LD_VAR 0 1
8123: PPUSH
8124: LD_INT 2
8126: PPUSH
8127: CALL_OW 109
// end else
8131: GO 8167
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
8133: LD_VAR 0 1
8137: PPUSH
8138: LD_INT 81
8140: PUSH
8141: LD_INT 3
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: PPUSH
8148: CALL_OW 69
8152: PPUSH
8153: LD_VAR 0 1
8157: PPUSH
8158: CALL_OW 74
8162: PPUSH
8163: CALL_OW 115
// end ; end ;
8167: GO 7884
8169: POP
8170: POP
// until not attackers ;
8171: LD_VAR 0 6
8175: NOT
8176: IFFALSE 7867
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
8178: LD_EXP 64
8182: PUSH
8183: LD_VAR 0 2
8187: ARRAY
8188: PPUSH
8189: LD_INT 50
8191: PUSH
8192: EMPTY
8193: LIST
8194: PPUSH
8195: CALL_OW 72
8199: NOT
8200: IFFALSE 7072
// end ;
8202: PPOPN 6
8204: END
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
8205: LD_INT 22
8207: PUSH
8208: LD_INT 3
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: PUSH
8215: LD_INT 30
8217: PUSH
8218: LD_INT 3
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: PPUSH
8229: CALL_OW 69
8233: IFFALSE 9417
8235: GO 8237
8237: DISABLE
8238: LD_INT 0
8240: PPUSH
8241: PPUSH
8242: PPUSH
8243: PPUSH
8244: PPUSH
8245: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
8246: LD_INT 6300
8248: PUSH
8249: LD_INT 4200
8251: PUSH
8252: LD_INT 2100
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: LIST
8259: PUSH
8260: LD_OWVAR 67
8264: ARRAY
8265: PPUSH
8266: CALL_OW 67
// base := 1 ;
8270: LD_ADDR_VAR 0 2
8274: PUSH
8275: LD_INT 1
8277: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
8278: LD_INT 22
8280: PUSH
8281: LD_INT 3
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: PUSH
8288: LD_INT 30
8290: PUSH
8291: LD_INT 3
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: PPUSH
8302: CALL_OW 69
8306: NOT
8307: IFFALSE 8311
// continue ;
8309: GO 8246
// case Rand ( 1 , 3 ) of 1 :
8311: LD_INT 1
8313: PPUSH
8314: LD_INT 3
8316: PPUSH
8317: CALL_OW 12
8321: PUSH
8322: LD_INT 1
8324: DOUBLE
8325: EQUAL
8326: IFTRUE 8330
8328: GO 8506
8330: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
8331: LD_ADDR_VAR 0 3
8335: PUSH
8336: LD_INT 22
8338: PUSH
8339: LD_INT 1
8341: PUSH
8342: LD_INT 3
8344: PUSH
8345: LD_INT 43
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: PUSH
8354: LD_INT 24
8356: PUSH
8357: LD_INT 1
8359: PUSH
8360: LD_INT 3
8362: PUSH
8363: LD_INT 46
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: PUSH
8372: LD_INT 24
8374: PUSH
8375: LD_INT 1
8377: PUSH
8378: LD_INT 3
8380: PUSH
8381: LD_INT 43
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: PUSH
8390: LD_INT 24
8392: PUSH
8393: LD_INT 1
8395: PUSH
8396: LD_INT 3
8398: PUSH
8399: LD_INT 46
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: PUSH
8408: LD_INT 22
8410: PUSH
8411: LD_INT 1
8413: PUSH
8414: LD_INT 3
8416: PUSH
8417: LD_INT 45
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: LIST
8424: LIST
8425: PUSH
8426: LD_INT 22
8428: PUSH
8429: LD_INT 1
8431: PUSH
8432: LD_INT 3
8434: PUSH
8435: LD_INT 43
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: PUSH
8444: LD_INT 24
8446: PUSH
8447: LD_INT 1
8449: PUSH
8450: LD_INT 3
8452: PUSH
8453: LD_INT 46
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: PUSH
8462: LD_INT 22
8464: PUSH
8465: LD_INT 1
8467: PUSH
8468: LD_INT 3
8470: PUSH
8471: LD_INT 45
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
8490: LD_VAR 0 2
8494: PPUSH
8495: LD_VAR 0 3
8499: PPUSH
8500: CALL 73609 0 2
// end ; 2 :
8504: GO 8875
8506: LD_INT 2
8508: DOUBLE
8509: EQUAL
8510: IFTRUE 8514
8512: GO 8690
8514: POP
// begin tmp := [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
8515: LD_ADDR_VAR 0 3
8519: PUSH
8520: LD_INT 24
8522: PUSH
8523: LD_INT 1
8525: PUSH
8526: LD_INT 3
8528: PUSH
8529: LD_INT 43
8531: PUSH
8532: EMPTY
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: PUSH
8538: LD_INT 24
8540: PUSH
8541: LD_INT 1
8543: PUSH
8544: LD_INT 3
8546: PUSH
8547: LD_INT 46
8549: PUSH
8550: EMPTY
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: PUSH
8556: LD_INT 24
8558: PUSH
8559: LD_INT 1
8561: PUSH
8562: LD_INT 3
8564: PUSH
8565: LD_INT 43
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: PUSH
8574: LD_INT 24
8576: PUSH
8577: LD_INT 1
8579: PUSH
8580: LD_INT 3
8582: PUSH
8583: LD_INT 46
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: PUSH
8592: LD_INT 22
8594: PUSH
8595: LD_INT 1
8597: PUSH
8598: LD_INT 3
8600: PUSH
8601: LD_INT 45
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: PUSH
8610: LD_INT 22
8612: PUSH
8613: LD_INT 1
8615: PUSH
8616: LD_INT 3
8618: PUSH
8619: LD_INT 45
8621: PUSH
8622: EMPTY
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: PUSH
8628: LD_INT 22
8630: PUSH
8631: LD_INT 1
8633: PUSH
8634: LD_INT 3
8636: PUSH
8637: LD_INT 45
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: PUSH
8646: LD_INT 22
8648: PUSH
8649: LD_INT 1
8651: PUSH
8652: LD_INT 3
8654: PUSH
8655: LD_INT 45
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
8674: LD_VAR 0 2
8678: PPUSH
8679: LD_VAR 0 3
8683: PPUSH
8684: CALL 73609 0 2
// end ; 3 :
8688: GO 8875
8690: LD_INT 3
8692: DOUBLE
8693: EQUAL
8694: IFTRUE 8698
8696: GO 8874
8698: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
8699: LD_ADDR_VAR 0 3
8703: PUSH
8704: LD_INT 22
8706: PUSH
8707: LD_INT 1
8709: PUSH
8710: LD_INT 3
8712: PUSH
8713: LD_INT 43
8715: PUSH
8716: EMPTY
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: PUSH
8722: LD_INT 24
8724: PUSH
8725: LD_INT 1
8727: PUSH
8728: LD_INT 3
8730: PUSH
8731: LD_INT 46
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: PUSH
8740: LD_INT 22
8742: PUSH
8743: LD_INT 1
8745: PUSH
8746: LD_INT 3
8748: PUSH
8749: LD_INT 43
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: PUSH
8758: LD_INT 24
8760: PUSH
8761: LD_INT 1
8763: PUSH
8764: LD_INT 3
8766: PUSH
8767: LD_INT 46
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: PUSH
8776: LD_INT 22
8778: PUSH
8779: LD_INT 1
8781: PUSH
8782: LD_INT 3
8784: PUSH
8785: LD_INT 45
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: PUSH
8794: LD_INT 22
8796: PUSH
8797: LD_INT 1
8799: PUSH
8800: LD_INT 3
8802: PUSH
8803: LD_INT 43
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: PUSH
8812: LD_INT 24
8814: PUSH
8815: LD_INT 1
8817: PUSH
8818: LD_INT 3
8820: PUSH
8821: LD_INT 46
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: PUSH
8830: LD_INT 22
8832: PUSH
8833: LD_INT 1
8835: PUSH
8836: LD_INT 3
8838: PUSH
8839: LD_INT 45
8841: PUSH
8842: EMPTY
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
8858: LD_VAR 0 2
8862: PPUSH
8863: LD_VAR 0 3
8867: PPUSH
8868: CALL 73609 0 2
// end ; end ;
8872: GO 8875
8874: POP
// repeat wait ( 0 0$1 ) ;
8875: LD_INT 35
8877: PPUSH
8878: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 8 ;
8882: LD_VAR 0 2
8886: PPUSH
8887: LD_INT 1
8889: PPUSH
8890: CALL 75027 0 2
8894: PUSH
8895: LD_INT 8
8897: GREATEREQUAL
8898: IFFALSE 8875
// wait ( 0 0$30 ) ;
8900: LD_INT 1050
8902: PPUSH
8903: CALL_OW 67
// _target := [ [ 144 , 65 ] , [ 63 , 38 ] ] ;
8907: LD_ADDR_VAR 0 5
8911: PUSH
8912: LD_INT 144
8914: PUSH
8915: LD_INT 65
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PUSH
8922: LD_INT 63
8924: PUSH
8925: LD_INT 38
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
8936: LD_ADDR_VAR 0 4
8940: PUSH
8941: LD_INT 0
8943: PUSH
8944: LD_INT 0
8946: PUSH
8947: LD_INT 0
8949: PUSH
8950: LD_INT 1
8952: PUSH
8953: LD_INT 0
8955: PUSH
8956: LD_INT 0
8958: PUSH
8959: LD_INT 0
8961: PUSH
8962: LD_INT 0
8964: PUSH
8965: LD_INT 1
8967: PUSH
8968: LD_INT 0
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
8983: LD_ADDR_VAR 0 6
8987: PUSH
8988: LD_EXP 83
8992: PUSH
8993: LD_VAR 0 2
8997: ARRAY
8998: PUSH
8999: LD_EXP 86
9003: PUSH
9004: LD_VAR 0 2
9008: ARRAY
9009: DIFF
9010: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
9011: LD_ADDR_EXP 83
9015: PUSH
9016: LD_EXP 83
9020: PPUSH
9021: LD_VAR 0 2
9025: PPUSH
9026: LD_EXP 83
9030: PUSH
9031: LD_VAR 0 2
9035: ARRAY
9036: PUSH
9037: LD_VAR 0 6
9041: DIFF
9042: PPUSH
9043: CALL_OW 1
9047: ST_TO_ADDR
// if not attackers then
9048: LD_VAR 0 6
9052: NOT
9053: IFFALSE 9057
// continue ;
9055: GO 8246
// repeat wait ( 0 0$1 ) ;
9057: LD_INT 35
9059: PPUSH
9060: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
9064: LD_VAR 0 6
9068: PPUSH
9069: LD_INT 60
9071: PUSH
9072: EMPTY
9073: LIST
9074: PPUSH
9075: CALL_OW 72
9079: NOT
9080: IFFALSE 9057
// repeat wait ( 0 0$1 ) ;
9082: LD_INT 35
9084: PPUSH
9085: CALL_OW 67
// for i in attackers do
9089: LD_ADDR_VAR 0 1
9093: PUSH
9094: LD_VAR 0 6
9098: PUSH
9099: FOR_IN
9100: IFFALSE 9384
// begin if IsDead ( i ) then
9102: LD_VAR 0 1
9106: PPUSH
9107: CALL_OW 301
9111: IFFALSE 9129
// attackers := attackers diff i ;
9113: LD_ADDR_VAR 0 6
9117: PUSH
9118: LD_VAR 0 6
9122: PUSH
9123: LD_VAR 0 1
9127: DIFF
9128: ST_TO_ADDR
// if not HasTask ( i ) then
9129: LD_VAR 0 1
9133: PPUSH
9134: CALL_OW 314
9138: NOT
9139: IFFALSE 9382
// begin if not GetTag ( i ) then
9141: LD_VAR 0 1
9145: PPUSH
9146: CALL_OW 110
9150: NOT
9151: IFFALSE 9243
// begin ComAgressiveMove ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) ;
9153: LD_VAR 0 1
9157: PPUSH
9158: LD_VAR 0 5
9162: PUSH
9163: LD_INT 1
9165: ARRAY
9166: PUSH
9167: LD_INT 1
9169: ARRAY
9170: PPUSH
9171: LD_VAR 0 5
9175: PUSH
9176: LD_INT 1
9178: ARRAY
9179: PUSH
9180: LD_INT 2
9182: ARRAY
9183: PPUSH
9184: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) < 8 then
9188: LD_VAR 0 1
9192: PPUSH
9193: LD_VAR 0 5
9197: PUSH
9198: LD_INT 1
9200: ARRAY
9201: PUSH
9202: LD_INT 1
9204: ARRAY
9205: PPUSH
9206: LD_VAR 0 5
9210: PUSH
9211: LD_INT 1
9213: ARRAY
9214: PUSH
9215: LD_INT 2
9217: ARRAY
9218: PPUSH
9219: CALL_OW 297
9223: PUSH
9224: LD_INT 8
9226: LESS
9227: IFFALSE 9241
// SetTag ( i , 1 ) ;
9229: LD_VAR 0 1
9233: PPUSH
9234: LD_INT 1
9236: PPUSH
9237: CALL_OW 109
// end else
9241: GO 9382
// if GetTag ( i ) = 1 then
9243: LD_VAR 0 1
9247: PPUSH
9248: CALL_OW 110
9252: PUSH
9253: LD_INT 1
9255: EQUAL
9256: IFFALSE 9348
// begin ComAgressiveMove ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) ;
9258: LD_VAR 0 1
9262: PPUSH
9263: LD_VAR 0 5
9267: PUSH
9268: LD_INT 2
9270: ARRAY
9271: PUSH
9272: LD_INT 1
9274: ARRAY
9275: PPUSH
9276: LD_VAR 0 5
9280: PUSH
9281: LD_INT 2
9283: ARRAY
9284: PUSH
9285: LD_INT 2
9287: ARRAY
9288: PPUSH
9289: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) < 8 then
9293: LD_VAR 0 1
9297: PPUSH
9298: LD_VAR 0 5
9302: PUSH
9303: LD_INT 2
9305: ARRAY
9306: PUSH
9307: LD_INT 1
9309: ARRAY
9310: PPUSH
9311: LD_VAR 0 5
9315: PUSH
9316: LD_INT 2
9318: ARRAY
9319: PUSH
9320: LD_INT 2
9322: ARRAY
9323: PPUSH
9324: CALL_OW 297
9328: PUSH
9329: LD_INT 8
9331: LESS
9332: IFFALSE 9346
// SetTag ( i , 2 ) ;
9334: LD_VAR 0 1
9338: PPUSH
9339: LD_INT 2
9341: PPUSH
9342: CALL_OW 109
// end else
9346: GO 9382
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
9348: LD_VAR 0 1
9352: PPUSH
9353: LD_INT 81
9355: PUSH
9356: LD_INT 3
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: PPUSH
9363: CALL_OW 69
9367: PPUSH
9368: LD_VAR 0 1
9372: PPUSH
9373: CALL_OW 74
9377: PPUSH
9378: CALL_OW 115
// end ; end ;
9382: GO 9099
9384: POP
9385: POP
// until not attackers ;
9386: LD_VAR 0 6
9390: NOT
9391: IFFALSE 9082
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
9393: LD_EXP 64
9397: PUSH
9398: LD_VAR 0 2
9402: ARRAY
9403: PPUSH
9404: LD_INT 50
9406: PUSH
9407: EMPTY
9408: LIST
9409: PPUSH
9410: CALL_OW 72
9414: NOT
9415: IFFALSE 8246
// end ;
9417: PPOPN 6
9419: END
// export RussiansDefeated ; every 0 0$1 trigger FirstAssaultRepelled and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
9420: LD_EXP 4
9424: PUSH
9425: LD_INT 22
9427: PUSH
9428: LD_INT 3
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PUSH
9435: LD_INT 21
9437: PUSH
9438: LD_INT 1
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: PPUSH
9449: CALL_OW 69
9453: PUSH
9454: LD_INT 0
9456: EQUAL
9457: AND
9458: IFFALSE 9471
9460: GO 9462
9462: DISABLE
// RussiansDefeated := true ;
9463: LD_ADDR_EXP 44
9467: PUSH
9468: LD_INT 1
9470: ST_TO_ADDR
9471: END
// every 0 0$1 trigger FirstAssaultRepelled and not JMM_Arrived do var i , un , filter , soldiers , bazookas , vehs , vehicle , medics , squad , attackers , _target , flags ;
9472: LD_EXP 4
9476: PUSH
9477: LD_EXP 6
9481: NOT
9482: AND
9483: IFFALSE 10907
9485: GO 9487
9487: DISABLE
9488: LD_INT 0
9490: PPUSH
9491: PPUSH
9492: PPUSH
9493: PPUSH
9494: PPUSH
9495: PPUSH
9496: PPUSH
9497: PPUSH
9498: PPUSH
9499: PPUSH
9500: PPUSH
9501: PPUSH
// begin wait ( [ Rand ( 4 4$00 , 4 4$30 ) , Rand ( 4 4$30 , 3 3$30 ) , Rand ( 3 3$00 , 2 2$00 ) ] [ Difficulty ] ) ;
9502: LD_INT 8400
9504: PPUSH
9505: LD_INT 9450
9507: PPUSH
9508: CALL_OW 12
9512: PUSH
9513: LD_INT 9450
9515: PPUSH
9516: LD_INT 7350
9518: PPUSH
9519: CALL_OW 12
9523: PUSH
9524: LD_INT 6300
9526: PPUSH
9527: LD_INT 4200
9529: PPUSH
9530: CALL_OW 12
9534: PUSH
9535: EMPTY
9536: LIST
9537: LIST
9538: LIST
9539: PUSH
9540: LD_OWVAR 67
9544: ARRAY
9545: PPUSH
9546: CALL_OW 67
// filter := [ ] ;
9550: LD_ADDR_VAR 0 3
9554: PUSH
9555: EMPTY
9556: ST_TO_ADDR
// soldiers := [ Rand ( 2 , 3 ) , Rand ( 3 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
9557: LD_ADDR_VAR 0 4
9561: PUSH
9562: LD_INT 2
9564: PPUSH
9565: LD_INT 3
9567: PPUSH
9568: CALL_OW 12
9572: PUSH
9573: LD_INT 3
9575: PPUSH
9576: LD_INT 4
9578: PPUSH
9579: CALL_OW 12
9583: PUSH
9584: LD_INT 3
9586: PPUSH
9587: LD_INT 5
9589: PPUSH
9590: CALL_OW 12
9594: PUSH
9595: EMPTY
9596: LIST
9597: LIST
9598: LIST
9599: PUSH
9600: LD_OWVAR 67
9604: ARRAY
9605: ST_TO_ADDR
// bazookas := [ 1 , Rand ( 1 , 2 ) , Rand ( 2 , 3 ) ] [ Difficulty ] ;
9606: LD_ADDR_VAR 0 5
9610: PUSH
9611: LD_INT 1
9613: PUSH
9614: LD_INT 1
9616: PPUSH
9617: LD_INT 2
9619: PPUSH
9620: CALL_OW 12
9624: PUSH
9625: LD_INT 2
9627: PPUSH
9628: LD_INT 3
9630: PPUSH
9631: CALL_OW 12
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: LIST
9640: PUSH
9641: LD_OWVAR 67
9645: ARRAY
9646: ST_TO_ADDR
// vehs := [ Rand ( 2 , 3 ) , Rand ( 2 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
9647: LD_ADDR_VAR 0 6
9651: PUSH
9652: LD_INT 2
9654: PPUSH
9655: LD_INT 3
9657: PPUSH
9658: CALL_OW 12
9662: PUSH
9663: LD_INT 2
9665: PPUSH
9666: LD_INT 4
9668: PPUSH
9669: CALL_OW 12
9673: PUSH
9674: LD_INT 3
9676: PPUSH
9677: LD_INT 5
9679: PPUSH
9680: CALL_OW 12
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: LIST
9689: PUSH
9690: LD_OWVAR 67
9694: ARRAY
9695: ST_TO_ADDR
// medics := [ 1 , 2 , 2 ] [ Difficulty ] ;
9696: LD_ADDR_VAR 0 8
9700: PUSH
9701: LD_INT 1
9703: PUSH
9704: LD_INT 2
9706: PUSH
9707: LD_INT 2
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: LIST
9714: PUSH
9715: LD_OWVAR 67
9719: ARRAY
9720: ST_TO_ADDR
// uc_side := 3 ;
9721: LD_ADDR_OWVAR 20
9725: PUSH
9726: LD_INT 3
9728: ST_TO_ADDR
// uc_nation := nation_russian ;
9729: LD_ADDR_OWVAR 21
9733: PUSH
9734: LD_INT 3
9736: ST_TO_ADDR
// for i = 1 to soldiers do
9737: LD_ADDR_VAR 0 1
9741: PUSH
9742: DOUBLE
9743: LD_INT 1
9745: DEC
9746: ST_TO_ADDR
9747: LD_VAR 0 4
9751: PUSH
9752: FOR_TO
9753: IFFALSE 9795
// begin PrepareSoldier ( 0 , game_eskill ) ;
9755: LD_INT 0
9757: PPUSH
9758: LD_EXP 40
9762: PPUSH
9763: CALL_OW 381
// un := CreateHuman ;
9767: LD_ADDR_VAR 0 2
9771: PUSH
9772: CALL_OW 44
9776: ST_TO_ADDR
// filter := filter ^ un ;
9777: LD_ADDR_VAR 0 3
9781: PUSH
9782: LD_VAR 0 3
9786: PUSH
9787: LD_VAR 0 2
9791: ADD
9792: ST_TO_ADDR
// end ;
9793: GO 9752
9795: POP
9796: POP
// for i = 1 to bazookas do
9797: LD_ADDR_VAR 0 1
9801: PUSH
9802: DOUBLE
9803: LD_INT 1
9805: DEC
9806: ST_TO_ADDR
9807: LD_VAR 0 5
9811: PUSH
9812: FOR_TO
9813: IFFALSE 9863
// begin PrepareSoldier ( 0 , game_eskill ) ;
9815: LD_INT 0
9817: PPUSH
9818: LD_EXP 40
9822: PPUSH
9823: CALL_OW 381
// hc_class := class_bazooker ;
9827: LD_ADDR_OWVAR 28
9831: PUSH
9832: LD_INT 9
9834: ST_TO_ADDR
// un := CreateHuman ;
9835: LD_ADDR_VAR 0 2
9839: PUSH
9840: CALL_OW 44
9844: ST_TO_ADDR
// filter := filter ^ un ;
9845: LD_ADDR_VAR 0 3
9849: PUSH
9850: LD_VAR 0 3
9854: PUSH
9855: LD_VAR 0 2
9859: ADD
9860: ST_TO_ADDR
// end ;
9861: GO 9812
9863: POP
9864: POP
// for i = 1 to medics do
9865: LD_ADDR_VAR 0 1
9869: PUSH
9870: DOUBLE
9871: LD_INT 1
9873: DEC
9874: ST_TO_ADDR
9875: LD_VAR 0 8
9879: PUSH
9880: FOR_TO
9881: IFFALSE 9923
// begin PrepareScientist ( 0 , game_eskill ) ;
9883: LD_INT 0
9885: PPUSH
9886: LD_EXP 40
9890: PPUSH
9891: CALL_OW 384
// un := CreateHuman ;
9895: LD_ADDR_VAR 0 2
9899: PUSH
9900: CALL_OW 44
9904: ST_TO_ADDR
// filter := filter ^ un ;
9905: LD_ADDR_VAR 0 3
9909: PUSH
9910: LD_VAR 0 3
9914: PUSH
9915: LD_VAR 0 2
9919: ADD
9920: ST_TO_ADDR
// end ;
9921: GO 9880
9923: POP
9924: POP
// for i = 1 to vehs do
9925: LD_ADDR_VAR 0 1
9929: PUSH
9930: DOUBLE
9931: LD_INT 1
9933: DEC
9934: ST_TO_ADDR
9935: LD_VAR 0 6
9939: PUSH
9940: FOR_TO
9941: IFFALSE 10133
// begin case Rand ( 1 , 5 ) of 1 :
9943: LD_INT 1
9945: PPUSH
9946: LD_INT 5
9948: PPUSH
9949: CALL_OW 12
9953: PUSH
9954: LD_INT 1
9956: DOUBLE
9957: EQUAL
9958: IFTRUE 9962
9960: GO 9984
9962: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 2 :
9963: LD_INT 22
9965: PPUSH
9966: LD_INT 3
9968: PPUSH
9969: LD_INT 3
9971: PPUSH
9972: LD_INT 43
9974: PPUSH
9975: LD_INT 100
9977: PPUSH
9978: CALL 18290 0 5
9982: GO 10105
9984: LD_INT 2
9986: DOUBLE
9987: EQUAL
9988: IFTRUE 9992
9990: GO 10014
9992: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gun , 100 ) ; 3 :
9993: LD_INT 22
9995: PPUSH
9996: LD_INT 3
9998: PPUSH
9999: LD_INT 3
10001: PPUSH
10002: LD_INT 44
10004: PPUSH
10005: LD_INT 100
10007: PPUSH
10008: CALL 18290 0 5
10012: GO 10105
10014: LD_INT 3
10016: DOUBLE
10017: EQUAL
10018: IFTRUE 10022
10020: GO 10044
10022: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher , 100 ) ; 4 :
10023: LD_INT 22
10025: PPUSH
10026: LD_INT 3
10028: PPUSH
10029: LD_INT 3
10031: PPUSH
10032: LD_INT 45
10034: PPUSH
10035: LD_INT 100
10037: PPUSH
10038: CALL 18290 0 5
10042: GO 10105
10044: LD_INT 4
10046: DOUBLE
10047: EQUAL
10048: IFTRUE 10052
10050: GO 10074
10052: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 5 :
10053: LD_INT 24
10055: PPUSH
10056: LD_INT 3
10058: PPUSH
10059: LD_INT 3
10061: PPUSH
10062: LD_INT 43
10064: PPUSH
10065: LD_INT 100
10067: PPUSH
10068: CALL 18290 0 5
10072: GO 10105
10074: LD_INT 5
10076: DOUBLE
10077: EQUAL
10078: IFTRUE 10082
10080: GO 10104
10082: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun , 100 ) ; end ;
10083: LD_INT 24
10085: PPUSH
10086: LD_INT 3
10088: PPUSH
10089: LD_INT 3
10091: PPUSH
10092: LD_INT 46
10094: PPUSH
10095: LD_INT 100
10097: PPUSH
10098: CALL 18290 0 5
10102: GO 10105
10104: POP
// vehicle := CreateVehicle ;
10105: LD_ADDR_VAR 0 7
10109: PUSH
10110: CALL_OW 45
10114: ST_TO_ADDR
// filter := filter ^ vehicle ;
10115: LD_ADDR_VAR 0 3
10119: PUSH
10120: LD_VAR 0 3
10124: PUSH
10125: LD_VAR 0 7
10129: ADD
10130: ST_TO_ADDR
// end ;
10131: GO 9940
10133: POP
10134: POP
// for i = 1 to filter do
10135: LD_ADDR_VAR 0 1
10139: PUSH
10140: DOUBLE
10141: LD_INT 1
10143: DEC
10144: ST_TO_ADDR
10145: LD_VAR 0 3
10149: PUSH
10150: FOR_TO
10151: IFFALSE 10176
// PlaceUnitArea ( filter [ i ] , RUAttackSpawn1 , false ) ;
10153: LD_VAR 0 3
10157: PUSH
10158: LD_VAR 0 1
10162: ARRAY
10163: PPUSH
10164: LD_INT 14
10166: PPUSH
10167: LD_INT 0
10169: PPUSH
10170: CALL_OW 49
10174: GO 10150
10176: POP
10177: POP
// case Rand ( 1 , 3 ) of 1 :
10178: LD_INT 1
10180: PPUSH
10181: LD_INT 3
10183: PPUSH
10184: CALL_OW 12
10188: PUSH
10189: LD_INT 1
10191: DOUBLE
10192: EQUAL
10193: IFTRUE 10197
10195: GO 10251
10197: POP
// _target := [ [ 165 , 114 ] , [ 104 , 108 ] , [ 86 , 77 ] , [ 63 , 38 ] ] ; 2 :
10198: LD_ADDR_VAR 0 11
10202: PUSH
10203: LD_INT 165
10205: PUSH
10206: LD_INT 114
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: PUSH
10213: LD_INT 104
10215: PUSH
10216: LD_INT 108
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: PUSH
10223: LD_INT 86
10225: PUSH
10226: LD_INT 77
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: PUSH
10233: LD_INT 63
10235: PUSH
10236: LD_INT 38
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: ST_TO_ADDR
10249: GO 10376
10251: LD_INT 2
10253: DOUBLE
10254: EQUAL
10255: IFTRUE 10259
10257: GO 10313
10259: POP
// _target := [ [ 165 , 114 ] , [ 146 , 71 ] , [ 112 , 41 ] , [ 63 , 38 ] ] ; 3 :
10260: LD_ADDR_VAR 0 11
10264: PUSH
10265: LD_INT 165
10267: PUSH
10268: LD_INT 114
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: PUSH
10275: LD_INT 146
10277: PUSH
10278: LD_INT 71
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: PUSH
10285: LD_INT 112
10287: PUSH
10288: LD_INT 41
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PUSH
10295: LD_INT 63
10297: PUSH
10298: LD_INT 38
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: ST_TO_ADDR
10311: GO 10376
10313: LD_INT 3
10315: DOUBLE
10316: EQUAL
10317: IFTRUE 10321
10319: GO 10375
10321: POP
// _target := [ [ 165 , 114 ] , [ 63 , 99 ] , [ 55 , 77 ] , [ 63 , 38 ] ] ; end ;
10322: LD_ADDR_VAR 0 11
10326: PUSH
10327: LD_INT 165
10329: PUSH
10330: LD_INT 114
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 63
10339: PUSH
10340: LD_INT 99
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: LD_INT 55
10349: PUSH
10350: LD_INT 77
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PUSH
10357: LD_INT 63
10359: PUSH
10360: LD_INT 38
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: ST_TO_ADDR
10373: GO 10376
10375: POP
// attackers := filter ;
10376: LD_ADDR_VAR 0 10
10380: PUSH
10381: LD_VAR 0 3
10385: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10386: LD_INT 35
10388: PPUSH
10389: CALL_OW 67
// for i in attackers do
10393: LD_ADDR_VAR 0 1
10397: PUSH
10398: LD_VAR 0 10
10402: PUSH
10403: FOR_IN
10404: IFFALSE 10898
// begin if IsDead ( i ) then
10406: LD_VAR 0 1
10410: PPUSH
10411: CALL_OW 301
10415: IFFALSE 10433
// attackers := attackers diff i ;
10417: LD_ADDR_VAR 0 10
10421: PUSH
10422: LD_VAR 0 10
10426: PUSH
10427: LD_VAR 0 1
10431: DIFF
10432: ST_TO_ADDR
// if not HasTask ( i ) then
10433: LD_VAR 0 1
10437: PPUSH
10438: CALL_OW 314
10442: NOT
10443: IFFALSE 10896
// begin if not GetTag ( i ) then
10445: LD_VAR 0 1
10449: PPUSH
10450: CALL_OW 110
10454: NOT
10455: IFFALSE 10547
// begin ComAgressiveMove ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) ;
10457: LD_VAR 0 1
10461: PPUSH
10462: LD_VAR 0 11
10466: PUSH
10467: LD_INT 1
10469: ARRAY
10470: PUSH
10471: LD_INT 1
10473: ARRAY
10474: PPUSH
10475: LD_VAR 0 11
10479: PUSH
10480: LD_INT 1
10482: ARRAY
10483: PUSH
10484: LD_INT 2
10486: ARRAY
10487: PPUSH
10488: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 1 ] [ 1 ] , _target [ 1 ] [ 2 ] ) < 8 then
10492: LD_VAR 0 1
10496: PPUSH
10497: LD_VAR 0 11
10501: PUSH
10502: LD_INT 1
10504: ARRAY
10505: PUSH
10506: LD_INT 1
10508: ARRAY
10509: PPUSH
10510: LD_VAR 0 11
10514: PUSH
10515: LD_INT 1
10517: ARRAY
10518: PUSH
10519: LD_INT 2
10521: ARRAY
10522: PPUSH
10523: CALL_OW 297
10527: PUSH
10528: LD_INT 8
10530: LESS
10531: IFFALSE 10545
// SetTag ( i , 1 ) ;
10533: LD_VAR 0 1
10537: PPUSH
10538: LD_INT 1
10540: PPUSH
10541: CALL_OW 109
// end else
10545: GO 10896
// if GetTag ( i ) = 1 then
10547: LD_VAR 0 1
10551: PPUSH
10552: CALL_OW 110
10556: PUSH
10557: LD_INT 1
10559: EQUAL
10560: IFFALSE 10652
// begin ComAgressiveMove ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) ;
10562: LD_VAR 0 1
10566: PPUSH
10567: LD_VAR 0 11
10571: PUSH
10572: LD_INT 2
10574: ARRAY
10575: PUSH
10576: LD_INT 1
10578: ARRAY
10579: PPUSH
10580: LD_VAR 0 11
10584: PUSH
10585: LD_INT 2
10587: ARRAY
10588: PUSH
10589: LD_INT 2
10591: ARRAY
10592: PPUSH
10593: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 2 ] [ 1 ] , _target [ 2 ] [ 2 ] ) < 8 then
10597: LD_VAR 0 1
10601: PPUSH
10602: LD_VAR 0 11
10606: PUSH
10607: LD_INT 2
10609: ARRAY
10610: PUSH
10611: LD_INT 1
10613: ARRAY
10614: PPUSH
10615: LD_VAR 0 11
10619: PUSH
10620: LD_INT 2
10622: ARRAY
10623: PUSH
10624: LD_INT 2
10626: ARRAY
10627: PPUSH
10628: CALL_OW 297
10632: PUSH
10633: LD_INT 8
10635: LESS
10636: IFFALSE 10650
// SetTag ( i , 2 ) ;
10638: LD_VAR 0 1
10642: PPUSH
10643: LD_INT 2
10645: PPUSH
10646: CALL_OW 109
// end else
10650: GO 10896
// if GetTag ( i ) = 2 then
10652: LD_VAR 0 1
10656: PPUSH
10657: CALL_OW 110
10661: PUSH
10662: LD_INT 2
10664: EQUAL
10665: IFFALSE 10757
// begin ComAgressiveMove ( i , _target [ 3 ] [ 1 ] , _target [ 3 ] [ 2 ] ) ;
10667: LD_VAR 0 1
10671: PPUSH
10672: LD_VAR 0 11
10676: PUSH
10677: LD_INT 3
10679: ARRAY
10680: PUSH
10681: LD_INT 1
10683: ARRAY
10684: PPUSH
10685: LD_VAR 0 11
10689: PUSH
10690: LD_INT 3
10692: ARRAY
10693: PUSH
10694: LD_INT 2
10696: ARRAY
10697: PPUSH
10698: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 3 ] [ 1 ] , _target [ 3 ] [ 2 ] ) < 8 then
10702: LD_VAR 0 1
10706: PPUSH
10707: LD_VAR 0 11
10711: PUSH
10712: LD_INT 3
10714: ARRAY
10715: PUSH
10716: LD_INT 1
10718: ARRAY
10719: PPUSH
10720: LD_VAR 0 11
10724: PUSH
10725: LD_INT 3
10727: ARRAY
10728: PUSH
10729: LD_INT 2
10731: ARRAY
10732: PPUSH
10733: CALL_OW 297
10737: PUSH
10738: LD_INT 8
10740: LESS
10741: IFFALSE 10755
// SetTag ( i , 3 ) ;
10743: LD_VAR 0 1
10747: PPUSH
10748: LD_INT 3
10750: PPUSH
10751: CALL_OW 109
// end else
10755: GO 10896
// if GetTag ( i ) = 3 then
10757: LD_VAR 0 1
10761: PPUSH
10762: CALL_OW 110
10766: PUSH
10767: LD_INT 3
10769: EQUAL
10770: IFFALSE 10862
// begin ComAgressiveMove ( i , _target [ 4 ] [ 1 ] , _target [ 4 ] [ 2 ] ) ;
10772: LD_VAR 0 1
10776: PPUSH
10777: LD_VAR 0 11
10781: PUSH
10782: LD_INT 4
10784: ARRAY
10785: PUSH
10786: LD_INT 1
10788: ARRAY
10789: PPUSH
10790: LD_VAR 0 11
10794: PUSH
10795: LD_INT 4
10797: ARRAY
10798: PUSH
10799: LD_INT 2
10801: ARRAY
10802: PPUSH
10803: CALL_OW 114
// if GetDistUnitXY ( i , _target [ 4 ] [ 1 ] , _target [ 4 ] [ 2 ] ) < 8 then
10807: LD_VAR 0 1
10811: PPUSH
10812: LD_VAR 0 11
10816: PUSH
10817: LD_INT 4
10819: ARRAY
10820: PUSH
10821: LD_INT 1
10823: ARRAY
10824: PPUSH
10825: LD_VAR 0 11
10829: PUSH
10830: LD_INT 4
10832: ARRAY
10833: PUSH
10834: LD_INT 2
10836: ARRAY
10837: PPUSH
10838: CALL_OW 297
10842: PUSH
10843: LD_INT 8
10845: LESS
10846: IFFALSE 10860
// SetTag ( i , 4 ) ;
10848: LD_VAR 0 1
10852: PPUSH
10853: LD_INT 4
10855: PPUSH
10856: CALL_OW 109
// end else
10860: GO 10896
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
10862: LD_VAR 0 1
10866: PPUSH
10867: LD_INT 81
10869: PUSH
10870: LD_INT 3
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: PPUSH
10877: CALL_OW 69
10881: PPUSH
10882: LD_VAR 0 1
10886: PPUSH
10887: CALL_OW 74
10891: PPUSH
10892: CALL_OW 115
// end ; end ;
10896: GO 10403
10898: POP
10899: POP
// until not attackers ;
10900: LD_VAR 0 10
10904: NOT
10905: IFFALSE 10386
// end ;
10907: PPOPN 12
10909: END
// every 0 0$1 do var i , tmp ;
10910: GO 10912
10912: DISABLE
10913: LD_INT 0
10915: PPUSH
10916: PPUSH
// begin enable ;
10917: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
10918: LD_ADDR_VAR 0 2
10922: PUSH
10923: LD_INT 3
10925: PUSH
10926: LD_INT 22
10928: PUSH
10929: LD_INT 1
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: PUSH
10940: LD_INT 32
10942: PUSH
10943: LD_INT 1
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: PPUSH
10954: CALL_OW 69
10958: ST_TO_ADDR
// if tmp then
10959: LD_VAR 0 2
10963: IFFALSE 11009
// for i in tmp do
10965: LD_ADDR_VAR 0 1
10969: PUSH
10970: LD_VAR 0 2
10974: PUSH
10975: FOR_IN
10976: IFFALSE 11007
// if GetFuel ( i ) < 3 then
10978: LD_VAR 0 1
10982: PPUSH
10983: CALL_OW 261
10987: PUSH
10988: LD_INT 3
10990: LESS
10991: IFFALSE 11005
// SetFuel ( i , 3 ) ;
10993: LD_VAR 0 1
10997: PPUSH
10998: LD_INT 3
11000: PPUSH
11001: CALL_OW 240
11005: GO 10975
11007: POP
11008: POP
// end ;
11009: PPOPN 2
11011: END
// every 0 0$1 trigger ( FilterUnitsInArea ( RU_Base_Area , [ f_side , 1 ] ) and not JMMArrival ) or ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) and not FirstAssaultRepelled ) do
11012: LD_INT 3
11014: PPUSH
11015: LD_INT 22
11017: PUSH
11018: LD_INT 1
11020: PUSH
11021: EMPTY
11022: LIST
11023: LIST
11024: PPUSH
11025: CALL_OW 70
11029: PUSH
11030: LD_EXP 41
11034: NOT
11035: AND
11036: PUSH
11037: LD_INT 10
11039: PPUSH
11040: LD_INT 22
11042: PUSH
11043: LD_INT 1
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PPUSH
11050: CALL_OW 70
11054: PUSH
11055: LD_EXP 4
11059: NOT
11060: AND
11061: OR
11062: IFFALSE 11071
11064: GO 11066
11066: DISABLE
// Antirush ;
11067: CALL 11072 0 0
11071: END
// export function Antirush ; var i , veh , tmp , num ; begin
11072: LD_INT 0
11074: PPUSH
11075: PPUSH
11076: PPUSH
11077: PPUSH
11078: PPUSH
// tmp := [ ] ;
11079: LD_ADDR_VAR 0 4
11083: PUSH
11084: EMPTY
11085: ST_TO_ADDR
// if not FirstAssaultRepelled then
11086: LD_EXP 4
11090: NOT
11091: IFFALSE 11103
// num := 18 else
11093: LD_ADDR_VAR 0 5
11097: PUSH
11098: LD_INT 18
11100: ST_TO_ADDR
11101: GO 11111
// num := 12 ;
11103: LD_ADDR_VAR 0 5
11107: PUSH
11108: LD_INT 12
11110: ST_TO_ADDR
// num := num - [ 4 , 2 , 0 ] [ Difficulty ] ;
11111: LD_ADDR_VAR 0 5
11115: PUSH
11116: LD_VAR 0 5
11120: PUSH
11121: LD_INT 4
11123: PUSH
11124: LD_INT 2
11126: PUSH
11127: LD_INT 0
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: LIST
11134: PUSH
11135: LD_OWVAR 67
11139: ARRAY
11140: MINUS
11141: ST_TO_ADDR
// for i := 1 to num do
11142: LD_ADDR_VAR 0 2
11146: PUSH
11147: DOUBLE
11148: LD_INT 1
11150: DEC
11151: ST_TO_ADDR
11152: LD_VAR 0 5
11156: PUSH
11157: FOR_TO
11158: IFFALSE 11297
// begin uc_side := 3 ;
11160: LD_ADDR_OWVAR 20
11164: PUSH
11165: LD_INT 3
11167: ST_TO_ADDR
// uc_nation := 3 ;
11168: LD_ADDR_OWVAR 21
11172: PUSH
11173: LD_INT 3
11175: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_siberite , control_computer , [ ru_heavy_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] , 100 ) ;
11176: LD_INT 23
11178: PPUSH
11179: LD_INT 3
11181: PPUSH
11182: LD_INT 3
11184: PPUSH
11185: LD_INT 46
11187: PUSH
11188: LD_INT 43
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: PUSH
11195: LD_INT 1
11197: PPUSH
11198: LD_INT 2
11200: PPUSH
11201: CALL_OW 12
11205: ARRAY
11206: PPUSH
11207: LD_INT 100
11209: PPUSH
11210: CALL 18290 0 5
// veh := CreateVehicle ;
11214: LD_ADDR_VAR 0 3
11218: PUSH
11219: CALL_OW 45
11223: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
11224: LD_VAR 0 3
11228: PPUSH
11229: LD_INT 5
11231: PPUSH
11232: CALL_OW 233
// PlaceUnitXYR ( veh , 199 , 135 , 3 , false ) ;
11236: LD_VAR 0 3
11240: PPUSH
11241: LD_INT 199
11243: PPUSH
11244: LD_INT 135
11246: PPUSH
11247: LD_INT 3
11249: PPUSH
11250: LD_INT 0
11252: PPUSH
11253: CALL_OW 50
// tmp := tmp ^ veh ;
11257: LD_ADDR_VAR 0 4
11261: PUSH
11262: LD_VAR 0 4
11266: PUSH
11267: LD_VAR 0 3
11271: ADD
11272: ST_TO_ADDR
// ComMoveXY ( veh , 173 , 118 ) ;
11273: LD_VAR 0 3
11277: PPUSH
11278: LD_INT 173
11280: PPUSH
11281: LD_INT 118
11283: PPUSH
11284: CALL_OW 111
// wait ( 0 0$2 ) ;
11288: LD_INT 70
11290: PPUSH
11291: CALL_OW 67
// end ;
11295: GO 11157
11297: POP
11298: POP
// repeat wait ( 0 0$1 ) ;
11299: LD_INT 35
11301: PPUSH
11302: CALL_OW 67
// for i in tmp do
11306: LD_ADDR_VAR 0 2
11310: PUSH
11311: LD_VAR 0 4
11315: PUSH
11316: FOR_IN
11317: IFFALSE 11384
// if IsDead ( i ) then
11319: LD_VAR 0 2
11323: PPUSH
11324: CALL_OW 301
11328: IFFALSE 11348
// tmp := tmp diff i else
11330: LD_ADDR_VAR 0 4
11334: PUSH
11335: LD_VAR 0 4
11339: PUSH
11340: LD_VAR 0 2
11344: DIFF
11345: ST_TO_ADDR
11346: GO 11382
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
11348: LD_VAR 0 2
11352: PPUSH
11353: LD_INT 22
11355: PUSH
11356: LD_INT 1
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: PPUSH
11363: CALL_OW 69
11367: PPUSH
11368: LD_VAR 0 2
11372: PPUSH
11373: CALL_OW 74
11377: PPUSH
11378: CALL_OW 115
11382: GO 11316
11384: POP
11385: POP
// until not tmp ;
11386: LD_VAR 0 4
11390: NOT
11391: IFFALSE 11299
// end ; end_of_file
11393: LD_VAR 0 1
11397: RET
// export Losses ; on UnitDestroyed ( un ) do begin if un = Brighton then
11398: LD_VAR 0 1
11402: PUSH
11403: LD_EXP 9
11407: EQUAL
11408: IFFALSE 11424
// begin wait ( 0 0$1 ) ;
11410: LD_INT 35
11412: PPUSH
11413: CALL_OW 67
// YouLost ( Brighton ) ;
11417: LD_STRING Brighton
11419: PPUSH
11420: CALL_OW 104
// end ; if un = JMM then
11424: LD_VAR 0 1
11428: PUSH
11429: LD_EXP 37
11433: EQUAL
11434: IFFALSE 11450
// begin wait ( 0 0$1 ) ;
11436: LD_INT 35
11438: PPUSH
11439: CALL_OW 67
// YouLost ( JMM ) ;
11443: LD_STRING JMM
11445: PPUSH
11446: CALL_OW 104
// end ; if un = Megan then
11450: LD_VAR 0 1
11454: PUSH
11455: LD_EXP 11
11459: EQUAL
11460: IFFALSE 11474
// begin Say ( Brighton , DBrighton-MeganDeath ) ;
11462: LD_EXP 9
11466: PPUSH
11467: LD_STRING DBrighton-MeganDeath
11469: PPUSH
11470: CALL_OW 88
// end ; if un = Palmer then
11474: LD_VAR 0 1
11478: PUSH
11479: LD_EXP 10
11483: EQUAL
11484: IFFALSE 11498
// begin Say ( Brighton , DBrighton-PalmerDeath ) ;
11486: LD_EXP 9
11490: PPUSH
11491: LD_STRING DBrighton-PalmerDeath
11493: PPUSH
11494: CALL_OW 88
// end ; if un = Burlak then
11498: LD_VAR 0 1
11502: PUSH
11503: LD_EXP 19
11507: EQUAL
11508: IFFALSE 11540
// begin if JMM_Arrived then
11510: LD_EXP 6
11514: IFFALSE 11528
// Say ( JMM , DJMM-BurlakDead ) ;
11516: LD_EXP 37
11520: PPUSH
11521: LD_STRING DJMM-BurlakDead
11523: PPUSH
11524: CALL_OW 88
// Say ( Palmer , DSol-BurlakDead ) ;
11528: LD_EXP 10
11532: PPUSH
11533: LD_STRING DSol-BurlakDead
11535: PPUSH
11536: CALL_OW 88
// end ; if un = BetaA or un = BetaB then
11540: LD_VAR 0 1
11544: PUSH
11545: LD_INT 1
11547: EQUAL
11548: PUSH
11549: LD_VAR 0 1
11553: PUSH
11554: LD_INT 3
11556: EQUAL
11557: OR
11558: IFFALSE 11574
// begin wait ( 0 0$1 ) ;
11560: LD_INT 35
11562: PPUSH
11563: CALL_OW 67
// YouLost ( Depot ) ;
11567: LD_STRING Depot
11569: PPUSH
11570: CALL_OW 104
// end ; if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
11574: LD_VAR 0 1
11578: PPUSH
11579: CALL_OW 255
11583: PUSH
11584: LD_INT 1
11586: EQUAL
11587: PUSH
11588: LD_VAR 0 1
11592: PPUSH
11593: CALL_OW 247
11597: PUSH
11598: LD_INT 1
11600: EQUAL
11601: AND
11602: IFFALSE 11618
// Losses := Losses + 1 ;
11604: LD_ADDR_EXP 45
11608: PUSH
11609: LD_EXP 45
11613: PUSH
11614: LD_INT 1
11616: PLUS
11617: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
11618: LD_VAR 0 1
11622: PPUSH
11623: CALL 77001 0 1
// end ;
11627: PPOPN 1
11629: END
// on UnitGoesToRed ( un ) do begin if un = Yashin then
11630: LD_VAR 0 1
11634: PUSH
11635: LD_EXP 13
11639: EQUAL
11640: IFFALSE 11654
// ForceSay ( Yashin , DDeath-Yas-3 ) ;
11642: LD_EXP 13
11646: PPUSH
11647: LD_STRING DDeath-Yas-3
11649: PPUSH
11650: CALL_OW 91
// if un = Popov then
11654: LD_VAR 0 1
11658: PUSH
11659: LD_EXP 14
11663: EQUAL
11664: IFFALSE 11678
// ForceSay ( Popov , DDeath-Pop-3 ) ;
11666: LD_EXP 14
11670: PPUSH
11671: LD_STRING DDeath-Pop-3
11673: PPUSH
11674: CALL_OW 91
// if un = Gaydar then
11678: LD_VAR 0 1
11682: PUSH
11683: LD_EXP 15
11687: EQUAL
11688: IFFALSE 11702
// ForceSay ( Gaydar , DDeath-Gay-3 ) ;
11690: LD_EXP 15
11694: PPUSH
11695: LD_STRING DDeath-Gay-3
11697: PPUSH
11698: CALL_OW 91
// if un = Sevi then
11702: LD_VAR 0 1
11706: PUSH
11707: LD_EXP 16
11711: EQUAL
11712: IFFALSE 11726
// ForceSay ( Sevi , DDeath-Vse-3 ) ;
11714: LD_EXP 16
11718: PPUSH
11719: LD_STRING DDeath-Vse-3
11721: PPUSH
11722: CALL_OW 91
// end ;
11726: PPOPN 1
11728: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_laser then
11729: LD_VAR 0 1
11733: PUSH
11734: LD_INT 10
11736: EQUAL
11737: IFFALSE 11775
// begin Say ( Brighton , DBrighton-C1 ) ;
11739: LD_EXP 9
11743: PPUSH
11744: LD_STRING DBrighton-C1
11746: PPUSH
11747: CALL_OW 88
// Say ( Megan , DMegan-C1 ) ;
11751: LD_EXP 11
11755: PPUSH
11756: LD_STRING DMegan-C1
11758: PPUSH
11759: CALL_OW 88
// Say ( Brighton , DBrighton-C2 ) ;
11763: LD_EXP 9
11767: PPUSH
11768: LD_STRING DBrighton-C2
11770: PPUSH
11771: CALL_OW 88
// end ; MCE_ResearchComplete ( tech , lab ) ;
11775: LD_VAR 0 1
11779: PPUSH
11780: LD_VAR 0 2
11784: PPUSH
11785: CALL 76697 0 2
// end ;
11789: PPOPN 2
11791: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
11792: LD_VAR 0 1
11796: PPUSH
11797: LD_VAR 0 2
11801: PPUSH
11802: CALL 79335 0 2
// end ;
11806: PPOPN 2
11808: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
11809: LD_VAR 0 1
11813: PPUSH
11814: CALL 78403 0 1
// end ;
11818: PPOPN 1
11820: END
// export RUFirstDepot ; on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 then
11821: LD_VAR 0 1
11825: PPUSH
11826: CALL_OW 266
11830: PUSH
11831: LD_INT 0
11833: EQUAL
11834: PUSH
11835: LD_VAR 0 1
11839: PPUSH
11840: CALL_OW 255
11844: PUSH
11845: LD_INT 3
11847: EQUAL
11848: AND
11849: IFFALSE 11911
// begin SetResourceType ( GetBase ( b ) , mat_cans , 10000 ) ;
11851: LD_VAR 0 1
11855: PPUSH
11856: CALL_OW 274
11860: PPUSH
11861: LD_INT 1
11863: PPUSH
11864: LD_INT 10000
11866: PPUSH
11867: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
11871: LD_VAR 0 1
11875: PPUSH
11876: CALL_OW 274
11880: PPUSH
11881: LD_INT 2
11883: PPUSH
11884: LD_INT 250
11886: PPUSH
11887: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 100 ) ;
11891: LD_VAR 0 1
11895: PPUSH
11896: CALL_OW 274
11900: PPUSH
11901: LD_INT 3
11903: PPUSH
11904: LD_INT 100
11906: PPUSH
11907: CALL_OW 277
// end ; MCE_BuildingComplete ( b ) ;
11911: LD_VAR 0 1
11915: PPUSH
11916: CALL 78644 0 1
// end ;
11920: PPOPN 1
11922: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
11923: LD_VAR 0 1
11927: PPUSH
11928: LD_VAR 0 2
11932: PPUSH
11933: LD_VAR 0 3
11937: PPUSH
11938: LD_VAR 0 4
11942: PPUSH
11943: LD_VAR 0 5
11947: PPUSH
11948: CALL 76317 0 5
// end ;
11952: PPOPN 5
11954: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
11955: LD_VAR 0 1
11959: PPUSH
11960: LD_VAR 0 2
11964: PPUSH
11965: CALL 75913 0 2
// end ;
11969: PPOPN 2
11971: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
11972: LD_VAR 0 1
11976: PPUSH
11977: LD_VAR 0 2
11981: PPUSH
11982: LD_VAR 0 3
11986: PPUSH
11987: LD_VAR 0 4
11991: PPUSH
11992: CALL 75751 0 4
// end ;
11996: PPOPN 4
11998: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
11999: LD_VAR 0 1
12003: PPUSH
12004: LD_VAR 0 2
12008: PPUSH
12009: LD_VAR 0 3
12013: PPUSH
12014: CALL 75526 0 3
// end ;
12018: PPOPN 3
12020: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
12021: LD_VAR 0 1
12025: PPUSH
12026: LD_VAR 0 2
12030: PPUSH
12031: CALL 75411 0 2
// end ;
12035: PPOPN 2
12037: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
12038: LD_VAR 0 1
12042: PPUSH
12043: LD_VAR 0 2
12047: PPUSH
12048: CALL 79596 0 2
// end ;
12052: PPOPN 2
12054: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin if GetSide ( driver ) = 6 then
12055: LD_VAR 0 1
12059: PPUSH
12060: CALL_OW 255
12064: PUSH
12065: LD_INT 6
12067: EQUAL
12068: IFFALSE 12198
// begin if driver in [ Yashin , Sevi , Gaydar , Popov ] then
12070: LD_VAR 0 1
12074: PUSH
12075: LD_EXP 13
12079: PUSH
12080: LD_EXP 16
12084: PUSH
12085: LD_EXP 15
12089: PUSH
12090: LD_EXP 14
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: IN
12101: IFFALSE 12105
// exit ;
12103: GO 12222
// if AssaultStarted then
12105: LD_EXP 8
12109: IFFALSE 12183
// case Rand ( 1 , 4 ) of 1 .. 3 :
12111: LD_INT 1
12113: PPUSH
12114: LD_INT 4
12116: PPUSH
12117: CALL_OW 12
12121: PUSH
12122: LD_INT 1
12124: DOUBLE
12125: GREATEREQUAL
12126: IFFALSE 12134
12128: LD_INT 3
12130: DOUBLE
12131: LESSEQUAL
12132: IFTRUE 12136
12134: GO 12154
12136: POP
// ComAgressiveMove ( driver , 67 , 37 ) ; 4 :
12137: LD_VAR 0 1
12141: PPUSH
12142: LD_INT 67
12144: PPUSH
12145: LD_INT 37
12147: PPUSH
12148: CALL_OW 114
12152: GO 12181
12154: LD_INT 4
12156: DOUBLE
12157: EQUAL
12158: IFTRUE 12162
12160: GO 12180
12162: POP
// ComMoveXY ( driver , 120 , 131 ) ; end else
12163: LD_VAR 0 1
12167: PPUSH
12168: LD_INT 120
12170: PPUSH
12171: LD_INT 131
12173: PPUSH
12174: CALL_OW 111
12178: GO 12181
12180: POP
12181: GO 12198
// ComMoveXY ( driver , 120 , 131 ) ;
12183: LD_VAR 0 1
12187: PPUSH
12188: LD_INT 120
12190: PPUSH
12191: LD_INT 131
12193: PPUSH
12194: CALL_OW 111
// end ; MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
12198: LD_VAR 0 1
12202: PPUSH
12203: LD_VAR 0 2
12207: PPUSH
12208: LD_VAR 0 3
12212: PPUSH
12213: LD_VAR 0 4
12217: PPUSH
12218: CALL 79812 0 4
// end ;
12222: PPOPN 4
12224: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
12225: LD_VAR 0 1
12229: PPUSH
12230: LD_VAR 0 2
12234: PPUSH
12235: CALL 75220 0 2
// end ;
12239: PPOPN 2
12241: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
12242: LD_VAR 0 1
12246: PPUSH
12247: CALL 91110 0 1
// end ; end_of_file
12251: PPOPN 1
12253: END
// every 0 0$1 trigger JMM_Arrived and RussiansDefeated do
12254: LD_EXP 6
12258: PUSH
12259: LD_EXP 44
12263: AND
12264: IFFALSE 12435
12266: GO 12268
12268: DISABLE
// begin wait ( 0 0$2 ) ;
12269: LD_INT 70
12271: PPUSH
12272: CALL_OW 67
// Say ( Brighton , DBrighton-G1 ) ;
12276: LD_EXP 9
12280: PPUSH
12281: LD_STRING DBrighton-G1
12283: PPUSH
12284: CALL_OW 88
// if Losses < 1 then
12288: LD_EXP 45
12292: PUSH
12293: LD_INT 1
12295: LESS
12296: IFFALSE 12310
// AddMedal ( Losses , 1 ) else
12298: LD_STRING Losses
12300: PPUSH
12301: LD_INT 1
12303: PPUSH
12304: CALL_OW 101
12308: GO 12343
// if Losses < 5 then
12310: LD_EXP 45
12314: PUSH
12315: LD_INT 5
12317: LESS
12318: IFFALSE 12332
// AddMedal ( Losses , 2 ) else
12320: LD_STRING Losses
12322: PPUSH
12323: LD_INT 2
12325: PPUSH
12326: CALL_OW 101
12330: GO 12343
// AddMedal ( Losses , - 1 ) ;
12332: LD_STRING Losses
12334: PPUSH
12335: LD_INT 1
12337: NEG
12338: PPUSH
12339: CALL_OW 101
// if LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
12343: LD_EXP 7
12347: PUSH
12348: LD_INT 10
12350: PPUSH
12351: LD_INT 1
12353: PPUSH
12354: CALL_OW 321
12358: PUSH
12359: LD_INT 2
12361: EQUAL
12362: AND
12363: IFFALSE 12377
// AddMedal ( Laser , 1 ) else
12365: LD_STRING Laser
12367: PPUSH
12368: LD_INT 1
12370: PPUSH
12371: CALL_OW 101
12375: GO 12424
// if not LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
12377: LD_EXP 7
12381: NOT
12382: PUSH
12383: LD_INT 10
12385: PPUSH
12386: LD_INT 1
12388: PPUSH
12389: CALL_OW 321
12393: PUSH
12394: LD_INT 2
12396: EQUAL
12397: AND
12398: IFFALSE 12413
// AddMedal ( Laser , - 1 ) else
12400: LD_STRING Laser
12402: PPUSH
12403: LD_INT 1
12405: NEG
12406: PPUSH
12407: CALL_OW 101
12411: GO 12424
// AddMedal ( Laser , - 2 ) ;
12413: LD_STRING Laser
12415: PPUSH
12416: LD_INT 2
12418: NEG
12419: PPUSH
12420: CALL_OW 101
// GiveMedals ( BaseMain ) ;
12424: LD_STRING BaseMain
12426: PPUSH
12427: CALL_OW 102
// YouWin ;
12431: CALL_OW 103
// end ; end_of_file
12435: END
// export rows ; export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
12436: LD_INT 0
12438: PPUSH
12439: PPUSH
// area = ListEnvironmentArea ( area ) ;
12440: LD_ADDR_VAR 0 2
12444: PUSH
12445: LD_VAR 0 2
12449: PPUSH
12450: CALL_OW 353
12454: ST_TO_ADDR
// if bulldozer > 0 then
12455: LD_VAR 0 1
12459: PUSH
12460: LD_INT 0
12462: GREATER
12463: IFFALSE 12574
// for i = area downto 1 do
12465: LD_ADDR_VAR 0 4
12469: PUSH
12470: DOUBLE
12471: LD_VAR 0 2
12475: INC
12476: ST_TO_ADDR
12477: LD_INT 1
12479: PUSH
12480: FOR_DOWNTO
12481: IFFALSE 12572
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
12483: LD_VAR 0 2
12487: PUSH
12488: LD_VAR 0 4
12492: ARRAY
12493: PUSH
12494: LD_INT 1
12496: ARRAY
12497: PPUSH
12498: LD_VAR 0 2
12502: PUSH
12503: LD_VAR 0 4
12507: ARRAY
12508: PUSH
12509: LD_INT 2
12511: ARRAY
12512: PPUSH
12513: CALL_OW 351
12517: IFFALSE 12570
// if not HasTask ( bulldozer ) then
12519: LD_VAR 0 1
12523: PPUSH
12524: CALL_OW 314
12528: NOT
12529: IFFALSE 12570
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
12531: LD_VAR 0 1
12535: PPUSH
12536: LD_VAR 0 2
12540: PUSH
12541: LD_VAR 0 4
12545: ARRAY
12546: PUSH
12547: LD_INT 1
12549: ARRAY
12550: PPUSH
12551: LD_VAR 0 2
12555: PUSH
12556: LD_VAR 0 4
12560: ARRAY
12561: PUSH
12562: LD_INT 2
12564: ARRAY
12565: PPUSH
12566: CALL_OW 171
12570: GO 12480
12572: POP
12573: POP
// end ;
12574: LD_VAR 0 3
12578: RET
// export function ComMeeting ( team , area ) ; var i , x , tmp , offset , sold_team , civil_team ; begin
12579: LD_INT 0
12581: PPUSH
12582: PPUSH
12583: PPUSH
12584: PPUSH
12585: PPUSH
12586: PPUSH
12587: PPUSH
// sold_team = UnitFilter ( team , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) ;
12588: LD_ADDR_VAR 0 8
12592: PUSH
12593: LD_VAR 0 1
12597: PPUSH
12598: LD_INT 22
12600: PUSH
12601: LD_INT 1
12603: PUSH
12604: EMPTY
12605: LIST
12606: LIST
12607: PUSH
12608: LD_INT 21
12610: PUSH
12611: LD_INT 1
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: PUSH
12618: LD_INT 25
12620: PUSH
12621: LD_INT 1
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: LIST
12632: PPUSH
12633: CALL_OW 72
12637: ST_TO_ADDR
// civil_team = UnitFilter ( team , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , class_soldier ] ] ] ) ;
12638: LD_ADDR_VAR 0 9
12642: PUSH
12643: LD_VAR 0 1
12647: PPUSH
12648: LD_INT 22
12650: PUSH
12651: LD_INT 1
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: PUSH
12658: LD_INT 21
12660: PUSH
12661: LD_INT 1
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PUSH
12668: LD_INT 3
12670: PUSH
12671: LD_INT 25
12673: PUSH
12674: LD_INT 1
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: LIST
12689: PPUSH
12690: CALL_OW 72
12694: ST_TO_ADDR
// rows = MakeRows ( sold_team , civil_team ) ;
12695: LD_ADDR_EXP 47
12699: PUSH
12700: LD_VAR 0 8
12704: PPUSH
12705: LD_VAR 0 9
12709: PPUSH
12710: CALL 13103 0 2
12714: ST_TO_ADDR
// offset = 0 ;
12715: LD_ADDR_VAR 0 7
12719: PUSH
12720: LD_INT 0
12722: ST_TO_ADDR
// for i := 1 to sold_team do
12723: LD_ADDR_VAR 0 4
12727: PUSH
12728: DOUBLE
12729: LD_INT 1
12731: DEC
12732: ST_TO_ADDR
12733: LD_VAR 0 8
12737: PUSH
12738: FOR_TO
12739: IFFALSE 12870
// begin if IsInUnit ( sold_team [ i ] ) then
12741: LD_VAR 0 8
12745: PUSH
12746: LD_VAR 0 4
12750: ARRAY
12751: PPUSH
12752: CALL_OW 310
12756: IFFALSE 12773
// ComExitBuilding ( sold_team [ i ] ) ;
12758: LD_VAR 0 8
12762: PUSH
12763: LD_VAR 0 4
12767: ARRAY
12768: PPUSH
12769: CALL_OW 122
// AddComMoveXY ( sold_team [ i ] , rows [ 1 ] [ i + offset ] , rows [ 1 ] [ i + 1 + offset ] ) ;
12773: LD_VAR 0 8
12777: PUSH
12778: LD_VAR 0 4
12782: ARRAY
12783: PPUSH
12784: LD_EXP 47
12788: PUSH
12789: LD_INT 1
12791: ARRAY
12792: PUSH
12793: LD_VAR 0 4
12797: PUSH
12798: LD_VAR 0 7
12802: PLUS
12803: ARRAY
12804: PPUSH
12805: LD_EXP 47
12809: PUSH
12810: LD_INT 1
12812: ARRAY
12813: PUSH
12814: LD_VAR 0 4
12818: PUSH
12819: LD_INT 1
12821: PLUS
12822: PUSH
12823: LD_VAR 0 7
12827: PLUS
12828: ARRAY
12829: PPUSH
12830: CALL_OW 171
// AddComTurnUnit ( sold_team [ i ] , Brighton ) ;
12834: LD_VAR 0 8
12838: PUSH
12839: LD_VAR 0 4
12843: ARRAY
12844: PPUSH
12845: LD_EXP 9
12849: PPUSH
12850: CALL_OW 179
// offset = offset + 1 ;
12854: LD_ADDR_VAR 0 7
12858: PUSH
12859: LD_VAR 0 7
12863: PUSH
12864: LD_INT 1
12866: PLUS
12867: ST_TO_ADDR
// end ;
12868: GO 12738
12870: POP
12871: POP
// offset = 0 ;
12872: LD_ADDR_VAR 0 7
12876: PUSH
12877: LD_INT 0
12879: ST_TO_ADDR
// tmp = 1 ;
12880: LD_ADDR_VAR 0 6
12884: PUSH
12885: LD_INT 1
12887: ST_TO_ADDR
// for i := 2 to rows do
12888: LD_ADDR_VAR 0 4
12892: PUSH
12893: DOUBLE
12894: LD_INT 2
12896: DEC
12897: ST_TO_ADDR
12898: LD_EXP 47
12902: PUSH
12903: FOR_TO
12904: IFFALSE 13096
// begin for x := 1 to sold_team do
12906: LD_ADDR_VAR 0 5
12910: PUSH
12911: DOUBLE
12912: LD_INT 1
12914: DEC
12915: ST_TO_ADDR
12916: LD_VAR 0 8
12920: PUSH
12921: FOR_TO
12922: IFFALSE 13084
// begin if IsInUnit ( civil_team [ tmp ] ) then
12924: LD_VAR 0 9
12928: PUSH
12929: LD_VAR 0 6
12933: ARRAY
12934: PPUSH
12935: CALL_OW 310
12939: IFFALSE 12956
// ComExitBuilding ( civil_team [ tmp ] ) ;
12941: LD_VAR 0 9
12945: PUSH
12946: LD_VAR 0 6
12950: ARRAY
12951: PPUSH
12952: CALL_OW 122
// AddComMoveXY ( civil_team [ tmp ] , rows [ i ] [ x + offset ] , rows [ i ] [ x + 1 + offset ] ) ;
12956: LD_VAR 0 9
12960: PUSH
12961: LD_VAR 0 6
12965: ARRAY
12966: PPUSH
12967: LD_EXP 47
12971: PUSH
12972: LD_VAR 0 4
12976: ARRAY
12977: PUSH
12978: LD_VAR 0 5
12982: PUSH
12983: LD_VAR 0 7
12987: PLUS
12988: ARRAY
12989: PPUSH
12990: LD_EXP 47
12994: PUSH
12995: LD_VAR 0 4
12999: ARRAY
13000: PUSH
13001: LD_VAR 0 5
13005: PUSH
13006: LD_INT 1
13008: PLUS
13009: PUSH
13010: LD_VAR 0 7
13014: PLUS
13015: ARRAY
13016: PPUSH
13017: CALL_OW 171
// AddComTurnUnit ( civil_team [ tmp ] , Brighton ) ;
13021: LD_VAR 0 9
13025: PUSH
13026: LD_VAR 0 6
13030: ARRAY
13031: PPUSH
13032: LD_EXP 9
13036: PPUSH
13037: CALL_OW 179
// offset = offset + 1 ;
13041: LD_ADDR_VAR 0 7
13045: PUSH
13046: LD_VAR 0 7
13050: PUSH
13051: LD_INT 1
13053: PLUS
13054: ST_TO_ADDR
// if not ( tmp = civil_team ) then
13055: LD_VAR 0 6
13059: PUSH
13060: LD_VAR 0 9
13064: EQUAL
13065: NOT
13066: IFFALSE 13082
// tmp = tmp + 1 ;
13068: LD_ADDR_VAR 0 6
13072: PUSH
13073: LD_VAR 0 6
13077: PUSH
13078: LD_INT 1
13080: PLUS
13081: ST_TO_ADDR
// end ;
13082: GO 12921
13084: POP
13085: POP
// offset = 0 ;
13086: LD_ADDR_VAR 0 7
13090: PUSH
13091: LD_INT 0
13093: ST_TO_ADDR
// end ;
13094: GO 12903
13096: POP
13097: POP
// end ;
13098: LD_VAR 0 3
13102: RET
// export function MakeRows ( sold_team , civil_team ) ; var i , x , start_pos , row_size , new_row , result_rows , civil_rows , offsetX , offsetY ; begin
13103: LD_INT 0
13105: PPUSH
13106: PPUSH
13107: PPUSH
13108: PPUSH
13109: PPUSH
13110: PPUSH
13111: PPUSH
13112: PPUSH
13113: PPUSH
13114: PPUSH
// start_pos = [ 65 , 34 ] ;
13115: LD_ADDR_VAR 0 6
13119: PUSH
13120: LD_INT 65
13122: PUSH
13123: LD_INT 34
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: ST_TO_ADDR
// row_size = 0 ;
13130: LD_ADDR_VAR 0 7
13134: PUSH
13135: LD_INT 0
13137: ST_TO_ADDR
// result_rows = [ ] ;
13138: LD_ADDR_VAR 0 9
13142: PUSH
13143: EMPTY
13144: ST_TO_ADDR
// new_row = [ ] ;
13145: LD_ADDR_VAR 0 8
13149: PUSH
13150: EMPTY
13151: ST_TO_ADDR
// for i := 1 to sold_team do
13152: LD_ADDR_VAR 0 4
13156: PUSH
13157: DOUBLE
13158: LD_INT 1
13160: DEC
13161: ST_TO_ADDR
13162: LD_VAR 0 1
13166: PUSH
13167: FOR_TO
13168: IFFALSE 13222
// begin new_row = new_row ^ start_pos [ 1 ] ^ start_pos [ 2 ] + i ;
13170: LD_ADDR_VAR 0 8
13174: PUSH
13175: LD_VAR 0 8
13179: PUSH
13180: LD_VAR 0 6
13184: PUSH
13185: LD_INT 1
13187: ARRAY
13188: ADD
13189: PUSH
13190: LD_VAR 0 6
13194: PUSH
13195: LD_INT 2
13197: ARRAY
13198: PUSH
13199: LD_VAR 0 4
13203: PLUS
13204: ADD
13205: ST_TO_ADDR
// row_size = row_size + 1 ;
13206: LD_ADDR_VAR 0 7
13210: PUSH
13211: LD_VAR 0 7
13215: PUSH
13216: LD_INT 1
13218: PLUS
13219: ST_TO_ADDR
// end ;
13220: GO 13167
13222: POP
13223: POP
// result_rows = result_rows ^ [ new_row ] ;
13224: LD_ADDR_VAR 0 9
13228: PUSH
13229: LD_VAR 0 9
13233: PUSH
13234: LD_VAR 0 8
13238: PUSH
13239: EMPTY
13240: LIST
13241: ADD
13242: ST_TO_ADDR
// civil_rows = civil_team div sold_team ;
13243: LD_ADDR_VAR 0 10
13247: PUSH
13248: LD_VAR 0 2
13252: PUSH
13253: LD_VAR 0 1
13257: DIV
13258: ST_TO_ADDR
// if ( civil_rows mod sold_team > 0 ) then
13259: LD_VAR 0 10
13263: PUSH
13264: LD_VAR 0 1
13268: MOD
13269: PUSH
13270: LD_INT 0
13272: GREATER
13273: IFFALSE 13289
// civil_rows = civil_rows + 1 ;
13275: LD_ADDR_VAR 0 10
13279: PUSH
13280: LD_VAR 0 10
13284: PUSH
13285: LD_INT 1
13287: PLUS
13288: ST_TO_ADDR
// offsetX = 2 ;
13289: LD_ADDR_VAR 0 11
13293: PUSH
13294: LD_INT 2
13296: ST_TO_ADDR
// offsetY = 1 ;
13297: LD_ADDR_VAR 0 12
13301: PUSH
13302: LD_INT 1
13304: ST_TO_ADDR
// for i := 1 to civil_rows do
13305: LD_ADDR_VAR 0 4
13309: PUSH
13310: DOUBLE
13311: LD_INT 1
13313: DEC
13314: ST_TO_ADDR
13315: LD_VAR 0 10
13319: PUSH
13320: FOR_TO
13321: IFFALSE 13449
// begin new_row = [ ] ;
13323: LD_ADDR_VAR 0 8
13327: PUSH
13328: EMPTY
13329: ST_TO_ADDR
// for x := 1 to row_size do
13330: LD_ADDR_VAR 0 5
13334: PUSH
13335: DOUBLE
13336: LD_INT 1
13338: DEC
13339: ST_TO_ADDR
13340: LD_VAR 0 7
13344: PUSH
13345: FOR_TO
13346: IFFALSE 13398
// begin new_row = new_row ^ start_pos [ 1 ] + offsetX ^ start_pos [ 2 ] + offsetY + x ;
13348: LD_ADDR_VAR 0 8
13352: PUSH
13353: LD_VAR 0 8
13357: PUSH
13358: LD_VAR 0 6
13362: PUSH
13363: LD_INT 1
13365: ARRAY
13366: PUSH
13367: LD_VAR 0 11
13371: PLUS
13372: ADD
13373: PUSH
13374: LD_VAR 0 6
13378: PUSH
13379: LD_INT 2
13381: ARRAY
13382: PUSH
13383: LD_VAR 0 12
13387: PLUS
13388: PUSH
13389: LD_VAR 0 5
13393: PLUS
13394: ADD
13395: ST_TO_ADDR
// end ;
13396: GO 13345
13398: POP
13399: POP
// result_rows = result_rows ^ [ new_row ] ;
13400: LD_ADDR_VAR 0 9
13404: PUSH
13405: LD_VAR 0 9
13409: PUSH
13410: LD_VAR 0 8
13414: PUSH
13415: EMPTY
13416: LIST
13417: ADD
13418: ST_TO_ADDR
// offsetX = offsetX + 2 ;
13419: LD_ADDR_VAR 0 11
13423: PUSH
13424: LD_VAR 0 11
13428: PUSH
13429: LD_INT 2
13431: PLUS
13432: ST_TO_ADDR
// offsetY = offsetY + 1 ;
13433: LD_ADDR_VAR 0 12
13437: PUSH
13438: LD_VAR 0 12
13442: PUSH
13443: LD_INT 1
13445: PLUS
13446: ST_TO_ADDR
// end ;
13447: GO 13320
13449: POP
13450: POP
// result = result_rows ;
13451: LD_ADDR_VAR 0 3
13455: PUSH
13456: LD_VAR 0 9
13460: ST_TO_ADDR
// end ; end_of_file
13461: LD_VAR 0 3
13465: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
13466: LD_INT 0
13468: PPUSH
13469: PPUSH
// if exist_mode then
13470: LD_VAR 0 2
13474: IFFALSE 13499
// unit := CreateCharacter ( prefix & ident ) else
13476: LD_ADDR_VAR 0 5
13480: PUSH
13481: LD_VAR 0 3
13485: PUSH
13486: LD_VAR 0 1
13490: STR
13491: PPUSH
13492: CALL_OW 34
13496: ST_TO_ADDR
13497: GO 13514
// unit := NewCharacter ( ident ) ;
13499: LD_ADDR_VAR 0 5
13503: PUSH
13504: LD_VAR 0 1
13508: PPUSH
13509: CALL_OW 25
13513: ST_TO_ADDR
// result := unit ;
13514: LD_ADDR_VAR 0 4
13518: PUSH
13519: LD_VAR 0 5
13523: ST_TO_ADDR
// end ;
13524: LD_VAR 0 4
13528: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
13529: LD_INT 0
13531: PPUSH
13532: PPUSH
// if not side or not nation then
13533: LD_VAR 0 1
13537: NOT
13538: PUSH
13539: LD_VAR 0 2
13543: NOT
13544: OR
13545: IFFALSE 13549
// exit ;
13547: GO 14313
// case nation of nation_american :
13549: LD_VAR 0 2
13553: PUSH
13554: LD_INT 1
13556: DOUBLE
13557: EQUAL
13558: IFTRUE 13562
13560: GO 13776
13562: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
13563: LD_ADDR_VAR 0 4
13567: PUSH
13568: LD_INT 35
13570: PUSH
13571: LD_INT 45
13573: PUSH
13574: LD_INT 46
13576: PUSH
13577: LD_INT 47
13579: PUSH
13580: LD_INT 82
13582: PUSH
13583: LD_INT 83
13585: PUSH
13586: LD_INT 84
13588: PUSH
13589: LD_INT 85
13591: PUSH
13592: LD_INT 86
13594: PUSH
13595: LD_INT 1
13597: PUSH
13598: LD_INT 2
13600: PUSH
13601: LD_INT 6
13603: PUSH
13604: LD_INT 15
13606: PUSH
13607: LD_INT 16
13609: PUSH
13610: LD_INT 7
13612: PUSH
13613: LD_INT 12
13615: PUSH
13616: LD_INT 13
13618: PUSH
13619: LD_INT 10
13621: PUSH
13622: LD_INT 14
13624: PUSH
13625: LD_INT 20
13627: PUSH
13628: LD_INT 21
13630: PUSH
13631: LD_INT 22
13633: PUSH
13634: LD_INT 25
13636: PUSH
13637: LD_INT 32
13639: PUSH
13640: LD_INT 27
13642: PUSH
13643: LD_INT 36
13645: PUSH
13646: LD_INT 69
13648: PUSH
13649: LD_INT 39
13651: PUSH
13652: LD_INT 34
13654: PUSH
13655: LD_INT 40
13657: PUSH
13658: LD_INT 48
13660: PUSH
13661: LD_INT 49
13663: PUSH
13664: LD_INT 50
13666: PUSH
13667: LD_INT 51
13669: PUSH
13670: LD_INT 52
13672: PUSH
13673: LD_INT 53
13675: PUSH
13676: LD_INT 54
13678: PUSH
13679: LD_INT 55
13681: PUSH
13682: LD_INT 56
13684: PUSH
13685: LD_INT 57
13687: PUSH
13688: LD_INT 58
13690: PUSH
13691: LD_INT 59
13693: PUSH
13694: LD_INT 60
13696: PUSH
13697: LD_INT 61
13699: PUSH
13700: LD_INT 62
13702: PUSH
13703: LD_INT 80
13705: PUSH
13706: LD_INT 82
13708: PUSH
13709: LD_INT 83
13711: PUSH
13712: LD_INT 84
13714: PUSH
13715: LD_INT 85
13717: PUSH
13718: LD_INT 86
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: ST_TO_ADDR
13774: GO 14237
13776: LD_INT 2
13778: DOUBLE
13779: EQUAL
13780: IFTRUE 13784
13782: GO 14006
13784: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
13785: LD_ADDR_VAR 0 4
13789: PUSH
13790: LD_INT 35
13792: PUSH
13793: LD_INT 45
13795: PUSH
13796: LD_INT 46
13798: PUSH
13799: LD_INT 47
13801: PUSH
13802: LD_INT 82
13804: PUSH
13805: LD_INT 83
13807: PUSH
13808: LD_INT 84
13810: PUSH
13811: LD_INT 85
13813: PUSH
13814: LD_INT 87
13816: PUSH
13817: LD_INT 70
13819: PUSH
13820: LD_INT 1
13822: PUSH
13823: LD_INT 11
13825: PUSH
13826: LD_INT 3
13828: PUSH
13829: LD_INT 4
13831: PUSH
13832: LD_INT 5
13834: PUSH
13835: LD_INT 6
13837: PUSH
13838: LD_INT 15
13840: PUSH
13841: LD_INT 18
13843: PUSH
13844: LD_INT 7
13846: PUSH
13847: LD_INT 17
13849: PUSH
13850: LD_INT 8
13852: PUSH
13853: LD_INT 20
13855: PUSH
13856: LD_INT 21
13858: PUSH
13859: LD_INT 22
13861: PUSH
13862: LD_INT 72
13864: PUSH
13865: LD_INT 26
13867: PUSH
13868: LD_INT 69
13870: PUSH
13871: LD_INT 39
13873: PUSH
13874: LD_INT 40
13876: PUSH
13877: LD_INT 41
13879: PUSH
13880: LD_INT 42
13882: PUSH
13883: LD_INT 43
13885: PUSH
13886: LD_INT 48
13888: PUSH
13889: LD_INT 49
13891: PUSH
13892: LD_INT 50
13894: PUSH
13895: LD_INT 51
13897: PUSH
13898: LD_INT 52
13900: PUSH
13901: LD_INT 53
13903: PUSH
13904: LD_INT 54
13906: PUSH
13907: LD_INT 55
13909: PUSH
13910: LD_INT 56
13912: PUSH
13913: LD_INT 60
13915: PUSH
13916: LD_INT 61
13918: PUSH
13919: LD_INT 62
13921: PUSH
13922: LD_INT 66
13924: PUSH
13925: LD_INT 67
13927: PUSH
13928: LD_INT 68
13930: PUSH
13931: LD_INT 81
13933: PUSH
13934: LD_INT 82
13936: PUSH
13937: LD_INT 83
13939: PUSH
13940: LD_INT 84
13942: PUSH
13943: LD_INT 85
13945: PUSH
13946: LD_INT 87
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: ST_TO_ADDR
14004: GO 14237
14006: LD_INT 3
14008: DOUBLE
14009: EQUAL
14010: IFTRUE 14014
14012: GO 14236
14014: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
14015: LD_ADDR_VAR 0 4
14019: PUSH
14020: LD_INT 46
14022: PUSH
14023: LD_INT 47
14025: PUSH
14026: LD_INT 1
14028: PUSH
14029: LD_INT 2
14031: PUSH
14032: LD_INT 82
14034: PUSH
14035: LD_INT 83
14037: PUSH
14038: LD_INT 84
14040: PUSH
14041: LD_INT 85
14043: PUSH
14044: LD_INT 86
14046: PUSH
14047: LD_INT 11
14049: PUSH
14050: LD_INT 9
14052: PUSH
14053: LD_INT 20
14055: PUSH
14056: LD_INT 19
14058: PUSH
14059: LD_INT 21
14061: PUSH
14062: LD_INT 24
14064: PUSH
14065: LD_INT 22
14067: PUSH
14068: LD_INT 25
14070: PUSH
14071: LD_INT 28
14073: PUSH
14074: LD_INT 29
14076: PUSH
14077: LD_INT 30
14079: PUSH
14080: LD_INT 31
14082: PUSH
14083: LD_INT 37
14085: PUSH
14086: LD_INT 38
14088: PUSH
14089: LD_INT 32
14091: PUSH
14092: LD_INT 27
14094: PUSH
14095: LD_INT 33
14097: PUSH
14098: LD_INT 69
14100: PUSH
14101: LD_INT 39
14103: PUSH
14104: LD_INT 34
14106: PUSH
14107: LD_INT 40
14109: PUSH
14110: LD_INT 71
14112: PUSH
14113: LD_INT 23
14115: PUSH
14116: LD_INT 44
14118: PUSH
14119: LD_INT 48
14121: PUSH
14122: LD_INT 49
14124: PUSH
14125: LD_INT 50
14127: PUSH
14128: LD_INT 51
14130: PUSH
14131: LD_INT 52
14133: PUSH
14134: LD_INT 53
14136: PUSH
14137: LD_INT 54
14139: PUSH
14140: LD_INT 55
14142: PUSH
14143: LD_INT 56
14145: PUSH
14146: LD_INT 57
14148: PUSH
14149: LD_INT 58
14151: PUSH
14152: LD_INT 59
14154: PUSH
14155: LD_INT 63
14157: PUSH
14158: LD_INT 64
14160: PUSH
14161: LD_INT 65
14163: PUSH
14164: LD_INT 82
14166: PUSH
14167: LD_INT 83
14169: PUSH
14170: LD_INT 84
14172: PUSH
14173: LD_INT 85
14175: PUSH
14176: LD_INT 86
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: ST_TO_ADDR
14234: GO 14237
14236: POP
// if state > - 1 and state < 3 then
14237: LD_VAR 0 3
14241: PUSH
14242: LD_INT 1
14244: NEG
14245: GREATER
14246: PUSH
14247: LD_VAR 0 3
14251: PUSH
14252: LD_INT 3
14254: LESS
14255: AND
14256: IFFALSE 14313
// for i in result do
14258: LD_ADDR_VAR 0 5
14262: PUSH
14263: LD_VAR 0 4
14267: PUSH
14268: FOR_IN
14269: IFFALSE 14311
// if GetTech ( i , side ) <> state then
14271: LD_VAR 0 5
14275: PPUSH
14276: LD_VAR 0 1
14280: PPUSH
14281: CALL_OW 321
14285: PUSH
14286: LD_VAR 0 3
14290: NONEQUAL
14291: IFFALSE 14309
// result := result diff i ;
14293: LD_ADDR_VAR 0 4
14297: PUSH
14298: LD_VAR 0 4
14302: PUSH
14303: LD_VAR 0 5
14307: DIFF
14308: ST_TO_ADDR
14309: GO 14268
14311: POP
14312: POP
// end ;
14313: LD_VAR 0 4
14317: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
14318: LD_INT 0
14320: PPUSH
14321: PPUSH
14322: PPUSH
// result := true ;
14323: LD_ADDR_VAR 0 3
14327: PUSH
14328: LD_INT 1
14330: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
14331: LD_ADDR_VAR 0 5
14335: PUSH
14336: LD_VAR 0 2
14340: PPUSH
14341: CALL_OW 480
14345: ST_TO_ADDR
// if not tmp then
14346: LD_VAR 0 5
14350: NOT
14351: IFFALSE 14355
// exit ;
14353: GO 14404
// for i in tmp do
14355: LD_ADDR_VAR 0 4
14359: PUSH
14360: LD_VAR 0 5
14364: PUSH
14365: FOR_IN
14366: IFFALSE 14402
// if GetTech ( i , side ) <> state_researched then
14368: LD_VAR 0 4
14372: PPUSH
14373: LD_VAR 0 1
14377: PPUSH
14378: CALL_OW 321
14382: PUSH
14383: LD_INT 2
14385: NONEQUAL
14386: IFFALSE 14400
// begin result := false ;
14388: LD_ADDR_VAR 0 3
14392: PUSH
14393: LD_INT 0
14395: ST_TO_ADDR
// exit ;
14396: POP
14397: POP
14398: GO 14404
// end ;
14400: GO 14365
14402: POP
14403: POP
// end ;
14404: LD_VAR 0 3
14408: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
14409: LD_INT 0
14411: PPUSH
14412: PPUSH
14413: PPUSH
14414: PPUSH
14415: PPUSH
14416: PPUSH
14417: PPUSH
14418: PPUSH
14419: PPUSH
14420: PPUSH
14421: PPUSH
14422: PPUSH
14423: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
14424: LD_VAR 0 1
14428: NOT
14429: PUSH
14430: LD_VAR 0 1
14434: PPUSH
14435: CALL_OW 257
14439: PUSH
14440: LD_INT 9
14442: NONEQUAL
14443: OR
14444: IFFALSE 14448
// exit ;
14446: GO 15021
// side := GetSide ( unit ) ;
14448: LD_ADDR_VAR 0 9
14452: PUSH
14453: LD_VAR 0 1
14457: PPUSH
14458: CALL_OW 255
14462: ST_TO_ADDR
// tech_space := tech_spacanom ;
14463: LD_ADDR_VAR 0 12
14467: PUSH
14468: LD_INT 29
14470: ST_TO_ADDR
// tech_time := tech_taurad ;
14471: LD_ADDR_VAR 0 13
14475: PUSH
14476: LD_INT 28
14478: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
14479: LD_ADDR_VAR 0 11
14483: PUSH
14484: LD_VAR 0 1
14488: PPUSH
14489: CALL_OW 310
14493: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
14494: LD_VAR 0 11
14498: PPUSH
14499: CALL_OW 247
14503: PUSH
14504: LD_INT 2
14506: EQUAL
14507: IFFALSE 14511
// exit ;
14509: GO 15021
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14511: LD_ADDR_VAR 0 8
14515: PUSH
14516: LD_INT 81
14518: PUSH
14519: LD_VAR 0 9
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: LD_INT 3
14530: PUSH
14531: LD_INT 21
14533: PUSH
14534: LD_INT 3
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: PPUSH
14549: CALL_OW 69
14553: ST_TO_ADDR
// if not tmp then
14554: LD_VAR 0 8
14558: NOT
14559: IFFALSE 14563
// exit ;
14561: GO 15021
// if in_unit then
14563: LD_VAR 0 11
14567: IFFALSE 14591
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
14569: LD_ADDR_VAR 0 10
14573: PUSH
14574: LD_VAR 0 8
14578: PPUSH
14579: LD_VAR 0 11
14583: PPUSH
14584: CALL_OW 74
14588: ST_TO_ADDR
14589: GO 14611
// enemy := NearestUnitToUnit ( tmp , unit ) ;
14591: LD_ADDR_VAR 0 10
14595: PUSH
14596: LD_VAR 0 8
14600: PPUSH
14601: LD_VAR 0 1
14605: PPUSH
14606: CALL_OW 74
14610: ST_TO_ADDR
// if not enemy then
14611: LD_VAR 0 10
14615: NOT
14616: IFFALSE 14620
// exit ;
14618: GO 15021
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
14620: LD_VAR 0 11
14624: PUSH
14625: LD_VAR 0 11
14629: PPUSH
14630: LD_VAR 0 10
14634: PPUSH
14635: CALL_OW 296
14639: PUSH
14640: LD_INT 13
14642: GREATER
14643: AND
14644: PUSH
14645: LD_VAR 0 1
14649: PPUSH
14650: LD_VAR 0 10
14654: PPUSH
14655: CALL_OW 296
14659: PUSH
14660: LD_INT 12
14662: GREATER
14663: OR
14664: IFFALSE 14668
// exit ;
14666: GO 15021
// missile := [ 1 ] ;
14668: LD_ADDR_VAR 0 14
14672: PUSH
14673: LD_INT 1
14675: PUSH
14676: EMPTY
14677: LIST
14678: ST_TO_ADDR
// if Researched ( side , tech_space ) then
14679: LD_VAR 0 9
14683: PPUSH
14684: LD_VAR 0 12
14688: PPUSH
14689: CALL_OW 325
14693: IFFALSE 14722
// missile := Insert ( missile , missile + 1 , 2 ) ;
14695: LD_ADDR_VAR 0 14
14699: PUSH
14700: LD_VAR 0 14
14704: PPUSH
14705: LD_VAR 0 14
14709: PUSH
14710: LD_INT 1
14712: PLUS
14713: PPUSH
14714: LD_INT 2
14716: PPUSH
14717: CALL_OW 2
14721: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
14722: LD_VAR 0 9
14726: PPUSH
14727: LD_VAR 0 13
14731: PPUSH
14732: CALL_OW 325
14736: PUSH
14737: LD_VAR 0 10
14741: PPUSH
14742: CALL_OW 255
14746: PPUSH
14747: LD_VAR 0 13
14751: PPUSH
14752: CALL_OW 325
14756: NOT
14757: AND
14758: IFFALSE 14787
// missile := Insert ( missile , missile + 1 , 3 ) ;
14760: LD_ADDR_VAR 0 14
14764: PUSH
14765: LD_VAR 0 14
14769: PPUSH
14770: LD_VAR 0 14
14774: PUSH
14775: LD_INT 1
14777: PLUS
14778: PPUSH
14779: LD_INT 3
14781: PPUSH
14782: CALL_OW 2
14786: ST_TO_ADDR
// if missile < 2 then
14787: LD_VAR 0 14
14791: PUSH
14792: LD_INT 2
14794: LESS
14795: IFFALSE 14799
// exit ;
14797: GO 15021
// x := GetX ( enemy ) ;
14799: LD_ADDR_VAR 0 4
14803: PUSH
14804: LD_VAR 0 10
14808: PPUSH
14809: CALL_OW 250
14813: ST_TO_ADDR
// y := GetY ( enemy ) ;
14814: LD_ADDR_VAR 0 5
14818: PUSH
14819: LD_VAR 0 10
14823: PPUSH
14824: CALL_OW 251
14828: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
14829: LD_ADDR_VAR 0 6
14833: PUSH
14834: LD_VAR 0 4
14838: PUSH
14839: LD_INT 1
14841: NEG
14842: PPUSH
14843: LD_INT 1
14845: PPUSH
14846: CALL_OW 12
14850: PLUS
14851: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
14852: LD_ADDR_VAR 0 7
14856: PUSH
14857: LD_VAR 0 5
14861: PUSH
14862: LD_INT 1
14864: NEG
14865: PPUSH
14866: LD_INT 1
14868: PPUSH
14869: CALL_OW 12
14873: PLUS
14874: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14875: LD_VAR 0 6
14879: PPUSH
14880: LD_VAR 0 7
14884: PPUSH
14885: CALL_OW 488
14889: NOT
14890: IFFALSE 14912
// begin _x := x ;
14892: LD_ADDR_VAR 0 6
14896: PUSH
14897: LD_VAR 0 4
14901: ST_TO_ADDR
// _y := y ;
14902: LD_ADDR_VAR 0 7
14906: PUSH
14907: LD_VAR 0 5
14911: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
14912: LD_ADDR_VAR 0 3
14916: PUSH
14917: LD_INT 1
14919: PPUSH
14920: LD_VAR 0 14
14924: PPUSH
14925: CALL_OW 12
14929: ST_TO_ADDR
// case i of 1 :
14930: LD_VAR 0 3
14934: PUSH
14935: LD_INT 1
14937: DOUBLE
14938: EQUAL
14939: IFTRUE 14943
14941: GO 14960
14943: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
14944: LD_VAR 0 1
14948: PPUSH
14949: LD_VAR 0 10
14953: PPUSH
14954: CALL_OW 115
14958: GO 15021
14960: LD_INT 2
14962: DOUBLE
14963: EQUAL
14964: IFTRUE 14968
14966: GO 14990
14968: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
14969: LD_VAR 0 1
14973: PPUSH
14974: LD_VAR 0 6
14978: PPUSH
14979: LD_VAR 0 7
14983: PPUSH
14984: CALL_OW 153
14988: GO 15021
14990: LD_INT 3
14992: DOUBLE
14993: EQUAL
14994: IFTRUE 14998
14996: GO 15020
14998: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
14999: LD_VAR 0 1
15003: PPUSH
15004: LD_VAR 0 6
15008: PPUSH
15009: LD_VAR 0 7
15013: PPUSH
15014: CALL_OW 154
15018: GO 15021
15020: POP
// end ;
15021: LD_VAR 0 2
15025: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
15026: LD_INT 0
15028: PPUSH
15029: PPUSH
15030: PPUSH
15031: PPUSH
15032: PPUSH
15033: PPUSH
// if not unit or not building then
15034: LD_VAR 0 1
15038: NOT
15039: PUSH
15040: LD_VAR 0 2
15044: NOT
15045: OR
15046: IFFALSE 15050
// exit ;
15048: GO 15208
// x := GetX ( building ) ;
15050: LD_ADDR_VAR 0 5
15054: PUSH
15055: LD_VAR 0 2
15059: PPUSH
15060: CALL_OW 250
15064: ST_TO_ADDR
// y := GetY ( building ) ;
15065: LD_ADDR_VAR 0 6
15069: PUSH
15070: LD_VAR 0 2
15074: PPUSH
15075: CALL_OW 251
15079: ST_TO_ADDR
// for i = 0 to 5 do
15080: LD_ADDR_VAR 0 4
15084: PUSH
15085: DOUBLE
15086: LD_INT 0
15088: DEC
15089: ST_TO_ADDR
15090: LD_INT 5
15092: PUSH
15093: FOR_TO
15094: IFFALSE 15206
// begin _x := ShiftX ( x , i , 3 ) ;
15096: LD_ADDR_VAR 0 7
15100: PUSH
15101: LD_VAR 0 5
15105: PPUSH
15106: LD_VAR 0 4
15110: PPUSH
15111: LD_INT 3
15113: PPUSH
15114: CALL_OW 272
15118: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
15119: LD_ADDR_VAR 0 8
15123: PUSH
15124: LD_VAR 0 6
15128: PPUSH
15129: LD_VAR 0 4
15133: PPUSH
15134: LD_INT 3
15136: PPUSH
15137: CALL_OW 273
15141: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15142: LD_VAR 0 7
15146: PPUSH
15147: LD_VAR 0 8
15151: PPUSH
15152: CALL_OW 488
15156: NOT
15157: IFFALSE 15161
// continue ;
15159: GO 15093
// if HexInfo ( _x , _y ) = 0 then
15161: LD_VAR 0 7
15165: PPUSH
15166: LD_VAR 0 8
15170: PPUSH
15171: CALL_OW 428
15175: PUSH
15176: LD_INT 0
15178: EQUAL
15179: IFFALSE 15204
// begin ComMoveXY ( unit , _x , _y ) ;
15181: LD_VAR 0 1
15185: PPUSH
15186: LD_VAR 0 7
15190: PPUSH
15191: LD_VAR 0 8
15195: PPUSH
15196: CALL_OW 111
// exit ;
15200: POP
15201: POP
15202: GO 15208
// end ; end ;
15204: GO 15093
15206: POP
15207: POP
// end ;
15208: LD_VAR 0 3
15212: RET
// export function ScanBase ( side , base_area ) ; begin
15213: LD_INT 0
15215: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
15216: LD_ADDR_VAR 0 3
15220: PUSH
15221: LD_VAR 0 2
15225: PPUSH
15226: LD_INT 81
15228: PUSH
15229: LD_VAR 0 1
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PPUSH
15238: CALL_OW 70
15242: ST_TO_ADDR
// end ;
15243: LD_VAR 0 3
15247: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
15248: LD_INT 0
15250: PPUSH
15251: PPUSH
15252: PPUSH
15253: PPUSH
// result := false ;
15254: LD_ADDR_VAR 0 2
15258: PUSH
15259: LD_INT 0
15261: ST_TO_ADDR
// side := GetSide ( unit ) ;
15262: LD_ADDR_VAR 0 3
15266: PUSH
15267: LD_VAR 0 1
15271: PPUSH
15272: CALL_OW 255
15276: ST_TO_ADDR
// nat := GetNation ( unit ) ;
15277: LD_ADDR_VAR 0 4
15281: PUSH
15282: LD_VAR 0 1
15286: PPUSH
15287: CALL_OW 248
15291: ST_TO_ADDR
// case nat of 1 :
15292: LD_VAR 0 4
15296: PUSH
15297: LD_INT 1
15299: DOUBLE
15300: EQUAL
15301: IFTRUE 15305
15303: GO 15316
15305: POP
// tech := tech_lassight ; 2 :
15306: LD_ADDR_VAR 0 5
15310: PUSH
15311: LD_INT 12
15313: ST_TO_ADDR
15314: GO 15355
15316: LD_INT 2
15318: DOUBLE
15319: EQUAL
15320: IFTRUE 15324
15322: GO 15335
15324: POP
// tech := tech_mortar ; 3 :
15325: LD_ADDR_VAR 0 5
15329: PUSH
15330: LD_INT 41
15332: ST_TO_ADDR
15333: GO 15355
15335: LD_INT 3
15337: DOUBLE
15338: EQUAL
15339: IFTRUE 15343
15341: GO 15354
15343: POP
// tech := tech_bazooka ; end ;
15344: LD_ADDR_VAR 0 5
15348: PUSH
15349: LD_INT 44
15351: ST_TO_ADDR
15352: GO 15355
15354: POP
// if Researched ( side , tech ) then
15355: LD_VAR 0 3
15359: PPUSH
15360: LD_VAR 0 5
15364: PPUSH
15365: CALL_OW 325
15369: IFFALSE 15396
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
15371: LD_ADDR_VAR 0 2
15375: PUSH
15376: LD_INT 5
15378: PUSH
15379: LD_INT 8
15381: PUSH
15382: LD_INT 9
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: LIST
15389: PUSH
15390: LD_VAR 0 4
15394: ARRAY
15395: ST_TO_ADDR
// end ;
15396: LD_VAR 0 2
15400: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
15401: LD_INT 0
15403: PPUSH
15404: PPUSH
15405: PPUSH
// if not mines then
15406: LD_VAR 0 2
15410: NOT
15411: IFFALSE 15415
// exit ;
15413: GO 15559
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15415: LD_ADDR_VAR 0 5
15419: PUSH
15420: LD_INT 81
15422: PUSH
15423: LD_VAR 0 1
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: PUSH
15432: LD_INT 3
15434: PUSH
15435: LD_INT 21
15437: PUSH
15438: LD_INT 3
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PPUSH
15453: CALL_OW 69
15457: ST_TO_ADDR
// for i in mines do
15458: LD_ADDR_VAR 0 4
15462: PUSH
15463: LD_VAR 0 2
15467: PUSH
15468: FOR_IN
15469: IFFALSE 15557
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
15471: LD_VAR 0 4
15475: PUSH
15476: LD_INT 1
15478: ARRAY
15479: PPUSH
15480: LD_VAR 0 4
15484: PUSH
15485: LD_INT 2
15487: ARRAY
15488: PPUSH
15489: CALL_OW 458
15493: NOT
15494: IFFALSE 15498
// continue ;
15496: GO 15468
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
15498: LD_VAR 0 4
15502: PUSH
15503: LD_INT 1
15505: ARRAY
15506: PPUSH
15507: LD_VAR 0 4
15511: PUSH
15512: LD_INT 2
15514: ARRAY
15515: PPUSH
15516: CALL_OW 428
15520: PUSH
15521: LD_VAR 0 5
15525: IN
15526: IFFALSE 15555
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
15528: LD_VAR 0 4
15532: PUSH
15533: LD_INT 1
15535: ARRAY
15536: PPUSH
15537: LD_VAR 0 4
15541: PUSH
15542: LD_INT 2
15544: ARRAY
15545: PPUSH
15546: LD_VAR 0 1
15550: PPUSH
15551: CALL_OW 456
// end ;
15555: GO 15468
15557: POP
15558: POP
// end ;
15559: LD_VAR 0 3
15563: RET
// export function Count ( array ) ; var i ; begin
15564: LD_INT 0
15566: PPUSH
15567: PPUSH
// result := 0 ;
15568: LD_ADDR_VAR 0 2
15572: PUSH
15573: LD_INT 0
15575: ST_TO_ADDR
// for i in array do
15576: LD_ADDR_VAR 0 3
15580: PUSH
15581: LD_VAR 0 1
15585: PUSH
15586: FOR_IN
15587: IFFALSE 15611
// if i then
15589: LD_VAR 0 3
15593: IFFALSE 15609
// result := result + 1 ;
15595: LD_ADDR_VAR 0 2
15599: PUSH
15600: LD_VAR 0 2
15604: PUSH
15605: LD_INT 1
15607: PLUS
15608: ST_TO_ADDR
15609: GO 15586
15611: POP
15612: POP
// end ;
15613: LD_VAR 0 2
15617: RET
// export function IsEmpty ( building ) ; begin
15618: LD_INT 0
15620: PPUSH
// if not building then
15621: LD_VAR 0 1
15625: NOT
15626: IFFALSE 15630
// exit ;
15628: GO 15673
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
15630: LD_ADDR_VAR 0 2
15634: PUSH
15635: LD_VAR 0 1
15639: PUSH
15640: LD_INT 22
15642: PUSH
15643: LD_VAR 0 1
15647: PPUSH
15648: CALL_OW 255
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: LD_INT 58
15659: PUSH
15660: EMPTY
15661: LIST
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PPUSH
15667: CALL_OW 69
15671: IN
15672: ST_TO_ADDR
// end ;
15673: LD_VAR 0 2
15677: RET
// export function IsNotFull ( building ) ; begin
15678: LD_INT 0
15680: PPUSH
// if not building then
15681: LD_VAR 0 1
15685: NOT
15686: IFFALSE 15690
// exit ;
15688: GO 15709
// result := UnitsInside ( building ) < 6 ;
15690: LD_ADDR_VAR 0 2
15694: PUSH
15695: LD_VAR 0 1
15699: PPUSH
15700: CALL_OW 313
15704: PUSH
15705: LD_INT 6
15707: LESS
15708: ST_TO_ADDR
// end ;
15709: LD_VAR 0 2
15713: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
15714: LD_INT 0
15716: PPUSH
15717: PPUSH
15718: PPUSH
15719: PPUSH
// tmp := [ ] ;
15720: LD_ADDR_VAR 0 3
15724: PUSH
15725: EMPTY
15726: ST_TO_ADDR
// list := [ ] ;
15727: LD_ADDR_VAR 0 5
15731: PUSH
15732: EMPTY
15733: ST_TO_ADDR
// for i = 16 to 25 do
15734: LD_ADDR_VAR 0 4
15738: PUSH
15739: DOUBLE
15740: LD_INT 16
15742: DEC
15743: ST_TO_ADDR
15744: LD_INT 25
15746: PUSH
15747: FOR_TO
15748: IFFALSE 15821
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
15750: LD_ADDR_VAR 0 3
15754: PUSH
15755: LD_VAR 0 3
15759: PUSH
15760: LD_INT 22
15762: PUSH
15763: LD_VAR 0 1
15767: PPUSH
15768: CALL_OW 255
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: PUSH
15777: LD_INT 91
15779: PUSH
15780: LD_VAR 0 1
15784: PUSH
15785: LD_INT 6
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: LIST
15792: PUSH
15793: LD_INT 30
15795: PUSH
15796: LD_VAR 0 4
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: LIST
15809: PUSH
15810: EMPTY
15811: LIST
15812: PPUSH
15813: CALL_OW 69
15817: ADD
15818: ST_TO_ADDR
15819: GO 15747
15821: POP
15822: POP
// for i = 1 to tmp do
15823: LD_ADDR_VAR 0 4
15827: PUSH
15828: DOUBLE
15829: LD_INT 1
15831: DEC
15832: ST_TO_ADDR
15833: LD_VAR 0 3
15837: PUSH
15838: FOR_TO
15839: IFFALSE 15927
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
15841: LD_ADDR_VAR 0 5
15845: PUSH
15846: LD_VAR 0 5
15850: PUSH
15851: LD_VAR 0 3
15855: PUSH
15856: LD_VAR 0 4
15860: ARRAY
15861: PPUSH
15862: CALL_OW 266
15866: PUSH
15867: LD_VAR 0 3
15871: PUSH
15872: LD_VAR 0 4
15876: ARRAY
15877: PPUSH
15878: CALL_OW 250
15882: PUSH
15883: LD_VAR 0 3
15887: PUSH
15888: LD_VAR 0 4
15892: ARRAY
15893: PPUSH
15894: CALL_OW 251
15898: PUSH
15899: LD_VAR 0 3
15903: PUSH
15904: LD_VAR 0 4
15908: ARRAY
15909: PPUSH
15910: CALL_OW 254
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: PUSH
15921: EMPTY
15922: LIST
15923: ADD
15924: ST_TO_ADDR
15925: GO 15838
15927: POP
15928: POP
// result := list ;
15929: LD_ADDR_VAR 0 2
15933: PUSH
15934: LD_VAR 0 5
15938: ST_TO_ADDR
// end ;
15939: LD_VAR 0 2
15943: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
15944: LD_INT 0
15946: PPUSH
15947: PPUSH
15948: PPUSH
15949: PPUSH
15950: PPUSH
15951: PPUSH
15952: PPUSH
// if not factory then
15953: LD_VAR 0 1
15957: NOT
15958: IFFALSE 15962
// exit ;
15960: GO 16555
// if control = control_apeman then
15962: LD_VAR 0 4
15966: PUSH
15967: LD_INT 5
15969: EQUAL
15970: IFFALSE 16079
// begin tmp := UnitsInside ( factory ) ;
15972: LD_ADDR_VAR 0 8
15976: PUSH
15977: LD_VAR 0 1
15981: PPUSH
15982: CALL_OW 313
15986: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
15987: LD_VAR 0 8
15991: PPUSH
15992: LD_INT 25
15994: PUSH
15995: LD_INT 12
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PPUSH
16002: CALL_OW 72
16006: NOT
16007: IFFALSE 16017
// control := control_manual ;
16009: LD_ADDR_VAR 0 4
16013: PUSH
16014: LD_INT 1
16016: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
16017: LD_ADDR_VAR 0 8
16021: PUSH
16022: LD_VAR 0 1
16026: PPUSH
16027: CALL 15714 0 1
16031: ST_TO_ADDR
// if tmp then
16032: LD_VAR 0 8
16036: IFFALSE 16079
// begin for i in tmp do
16038: LD_ADDR_VAR 0 7
16042: PUSH
16043: LD_VAR 0 8
16047: PUSH
16048: FOR_IN
16049: IFFALSE 16077
// if i [ 1 ] = b_ext_radio then
16051: LD_VAR 0 7
16055: PUSH
16056: LD_INT 1
16058: ARRAY
16059: PUSH
16060: LD_INT 22
16062: EQUAL
16063: IFFALSE 16075
// begin control := control_remote ;
16065: LD_ADDR_VAR 0 4
16069: PUSH
16070: LD_INT 2
16072: ST_TO_ADDR
// break ;
16073: GO 16077
// end ;
16075: GO 16048
16077: POP
16078: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16079: LD_VAR 0 1
16083: PPUSH
16084: LD_VAR 0 2
16088: PPUSH
16089: LD_VAR 0 3
16093: PPUSH
16094: LD_VAR 0 4
16098: PPUSH
16099: LD_VAR 0 5
16103: PPUSH
16104: CALL_OW 448
16108: IFFALSE 16143
// begin result := [ chassis , engine , control , weapon ] ;
16110: LD_ADDR_VAR 0 6
16114: PUSH
16115: LD_VAR 0 2
16119: PUSH
16120: LD_VAR 0 3
16124: PUSH
16125: LD_VAR 0 4
16129: PUSH
16130: LD_VAR 0 5
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: ST_TO_ADDR
// exit ;
16141: GO 16555
// end ; _chassis := AvailableChassisList ( factory ) ;
16143: LD_ADDR_VAR 0 9
16147: PUSH
16148: LD_VAR 0 1
16152: PPUSH
16153: CALL_OW 475
16157: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
16158: LD_ADDR_VAR 0 11
16162: PUSH
16163: LD_VAR 0 1
16167: PPUSH
16168: CALL_OW 476
16172: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
16173: LD_ADDR_VAR 0 12
16177: PUSH
16178: LD_VAR 0 1
16182: PPUSH
16183: CALL_OW 477
16187: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
16188: LD_ADDR_VAR 0 10
16192: PUSH
16193: LD_VAR 0 1
16197: PPUSH
16198: CALL_OW 478
16202: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
16203: LD_VAR 0 9
16207: NOT
16208: PUSH
16209: LD_VAR 0 11
16213: NOT
16214: OR
16215: PUSH
16216: LD_VAR 0 12
16220: NOT
16221: OR
16222: PUSH
16223: LD_VAR 0 10
16227: NOT
16228: OR
16229: IFFALSE 16264
// begin result := [ chassis , engine , control , weapon ] ;
16231: LD_ADDR_VAR 0 6
16235: PUSH
16236: LD_VAR 0 2
16240: PUSH
16241: LD_VAR 0 3
16245: PUSH
16246: LD_VAR 0 4
16250: PUSH
16251: LD_VAR 0 5
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: ST_TO_ADDR
// exit ;
16262: GO 16555
// end ; if not chassis in _chassis then
16264: LD_VAR 0 2
16268: PUSH
16269: LD_VAR 0 9
16273: IN
16274: NOT
16275: IFFALSE 16301
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
16277: LD_ADDR_VAR 0 2
16281: PUSH
16282: LD_VAR 0 9
16286: PUSH
16287: LD_INT 1
16289: PPUSH
16290: LD_VAR 0 9
16294: PPUSH
16295: CALL_OW 12
16299: ARRAY
16300: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
16301: LD_VAR 0 2
16305: PPUSH
16306: LD_VAR 0 3
16310: PPUSH
16311: CALL 16560 0 2
16315: NOT
16316: IFFALSE 16375
// repeat engine := _engine [ 1 ] ;
16318: LD_ADDR_VAR 0 3
16322: PUSH
16323: LD_VAR 0 11
16327: PUSH
16328: LD_INT 1
16330: ARRAY
16331: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
16332: LD_ADDR_VAR 0 11
16336: PUSH
16337: LD_VAR 0 11
16341: PPUSH
16342: LD_INT 1
16344: PPUSH
16345: CALL_OW 3
16349: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
16350: LD_VAR 0 2
16354: PPUSH
16355: LD_VAR 0 3
16359: PPUSH
16360: CALL 16560 0 2
16364: PUSH
16365: LD_VAR 0 11
16369: PUSH
16370: EMPTY
16371: EQUAL
16372: OR
16373: IFFALSE 16318
// if not control in _control then
16375: LD_VAR 0 4
16379: PUSH
16380: LD_VAR 0 12
16384: IN
16385: NOT
16386: IFFALSE 16412
// control := _control [ rand ( 1 , _control ) ] ;
16388: LD_ADDR_VAR 0 4
16392: PUSH
16393: LD_VAR 0 12
16397: PUSH
16398: LD_INT 1
16400: PPUSH
16401: LD_VAR 0 12
16405: PPUSH
16406: CALL_OW 12
16410: ARRAY
16411: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
16412: LD_VAR 0 2
16416: PPUSH
16417: LD_VAR 0 5
16421: PPUSH
16422: CALL 16780 0 2
16426: NOT
16427: IFFALSE 16486
// repeat weapon := _weapon [ 1 ] ;
16429: LD_ADDR_VAR 0 5
16433: PUSH
16434: LD_VAR 0 10
16438: PUSH
16439: LD_INT 1
16441: ARRAY
16442: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
16443: LD_ADDR_VAR 0 10
16447: PUSH
16448: LD_VAR 0 10
16452: PPUSH
16453: LD_INT 1
16455: PPUSH
16456: CALL_OW 3
16460: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
16461: LD_VAR 0 2
16465: PPUSH
16466: LD_VAR 0 5
16470: PPUSH
16471: CALL 16780 0 2
16475: PUSH
16476: LD_VAR 0 10
16480: PUSH
16481: EMPTY
16482: EQUAL
16483: OR
16484: IFFALSE 16429
// result := [ ] ;
16486: LD_ADDR_VAR 0 6
16490: PUSH
16491: EMPTY
16492: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16493: LD_VAR 0 1
16497: PPUSH
16498: LD_VAR 0 2
16502: PPUSH
16503: LD_VAR 0 3
16507: PPUSH
16508: LD_VAR 0 4
16512: PPUSH
16513: LD_VAR 0 5
16517: PPUSH
16518: CALL_OW 448
16522: IFFALSE 16555
// result := [ chassis , engine , control , weapon ] ;
16524: LD_ADDR_VAR 0 6
16528: PUSH
16529: LD_VAR 0 2
16533: PUSH
16534: LD_VAR 0 3
16538: PUSH
16539: LD_VAR 0 4
16543: PUSH
16544: LD_VAR 0 5
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: ST_TO_ADDR
// end ;
16555: LD_VAR 0 6
16559: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
16560: LD_INT 0
16562: PPUSH
// if not chassis or not engine then
16563: LD_VAR 0 1
16567: NOT
16568: PUSH
16569: LD_VAR 0 2
16573: NOT
16574: OR
16575: IFFALSE 16579
// exit ;
16577: GO 16775
// case engine of engine_solar :
16579: LD_VAR 0 2
16583: PUSH
16584: LD_INT 2
16586: DOUBLE
16587: EQUAL
16588: IFTRUE 16592
16590: GO 16630
16592: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
16593: LD_ADDR_VAR 0 3
16597: PUSH
16598: LD_INT 11
16600: PUSH
16601: LD_INT 12
16603: PUSH
16604: LD_INT 13
16606: PUSH
16607: LD_INT 14
16609: PUSH
16610: LD_INT 1
16612: PUSH
16613: LD_INT 2
16615: PUSH
16616: LD_INT 3
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: ST_TO_ADDR
16628: GO 16759
16630: LD_INT 1
16632: DOUBLE
16633: EQUAL
16634: IFTRUE 16638
16636: GO 16700
16638: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
16639: LD_ADDR_VAR 0 3
16643: PUSH
16644: LD_INT 11
16646: PUSH
16647: LD_INT 12
16649: PUSH
16650: LD_INT 13
16652: PUSH
16653: LD_INT 14
16655: PUSH
16656: LD_INT 1
16658: PUSH
16659: LD_INT 2
16661: PUSH
16662: LD_INT 3
16664: PUSH
16665: LD_INT 4
16667: PUSH
16668: LD_INT 5
16670: PUSH
16671: LD_INT 21
16673: PUSH
16674: LD_INT 23
16676: PUSH
16677: LD_INT 22
16679: PUSH
16680: LD_INT 24
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: ST_TO_ADDR
16698: GO 16759
16700: LD_INT 3
16702: DOUBLE
16703: EQUAL
16704: IFTRUE 16708
16706: GO 16758
16708: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16709: LD_ADDR_VAR 0 3
16713: PUSH
16714: LD_INT 13
16716: PUSH
16717: LD_INT 14
16719: PUSH
16720: LD_INT 2
16722: PUSH
16723: LD_INT 3
16725: PUSH
16726: LD_INT 4
16728: PUSH
16729: LD_INT 5
16731: PUSH
16732: LD_INT 21
16734: PUSH
16735: LD_INT 22
16737: PUSH
16738: LD_INT 23
16740: PUSH
16741: LD_INT 24
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: ST_TO_ADDR
16756: GO 16759
16758: POP
// result := ( chassis in result ) ;
16759: LD_ADDR_VAR 0 3
16763: PUSH
16764: LD_VAR 0 1
16768: PUSH
16769: LD_VAR 0 3
16773: IN
16774: ST_TO_ADDR
// end ;
16775: LD_VAR 0 3
16779: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
16780: LD_INT 0
16782: PPUSH
// if not chassis or not weapon then
16783: LD_VAR 0 1
16787: NOT
16788: PUSH
16789: LD_VAR 0 2
16793: NOT
16794: OR
16795: IFFALSE 16799
// exit ;
16797: GO 17825
// case weapon of us_machine_gun :
16799: LD_VAR 0 2
16803: PUSH
16804: LD_INT 2
16806: DOUBLE
16807: EQUAL
16808: IFTRUE 16812
16810: GO 16842
16812: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
16813: LD_ADDR_VAR 0 3
16817: PUSH
16818: LD_INT 1
16820: PUSH
16821: LD_INT 2
16823: PUSH
16824: LD_INT 3
16826: PUSH
16827: LD_INT 4
16829: PUSH
16830: LD_INT 5
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: ST_TO_ADDR
16840: GO 17809
16842: LD_INT 3
16844: DOUBLE
16845: EQUAL
16846: IFTRUE 16850
16848: GO 16880
16850: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
16851: LD_ADDR_VAR 0 3
16855: PUSH
16856: LD_INT 1
16858: PUSH
16859: LD_INT 2
16861: PUSH
16862: LD_INT 3
16864: PUSH
16865: LD_INT 4
16867: PUSH
16868: LD_INT 5
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: ST_TO_ADDR
16878: GO 17809
16880: LD_INT 11
16882: DOUBLE
16883: EQUAL
16884: IFTRUE 16888
16886: GO 16918
16888: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
16889: LD_ADDR_VAR 0 3
16893: PUSH
16894: LD_INT 1
16896: PUSH
16897: LD_INT 2
16899: PUSH
16900: LD_INT 3
16902: PUSH
16903: LD_INT 4
16905: PUSH
16906: LD_INT 5
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: ST_TO_ADDR
16916: GO 17809
16918: LD_INT 4
16920: DOUBLE
16921: EQUAL
16922: IFTRUE 16926
16924: GO 16952
16926: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
16927: LD_ADDR_VAR 0 3
16931: PUSH
16932: LD_INT 2
16934: PUSH
16935: LD_INT 3
16937: PUSH
16938: LD_INT 4
16940: PUSH
16941: LD_INT 5
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: ST_TO_ADDR
16950: GO 17809
16952: LD_INT 5
16954: DOUBLE
16955: EQUAL
16956: IFTRUE 16960
16958: GO 16986
16960: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
16961: LD_ADDR_VAR 0 3
16965: PUSH
16966: LD_INT 2
16968: PUSH
16969: LD_INT 3
16971: PUSH
16972: LD_INT 4
16974: PUSH
16975: LD_INT 5
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: ST_TO_ADDR
16984: GO 17809
16986: LD_INT 9
16988: DOUBLE
16989: EQUAL
16990: IFTRUE 16994
16992: GO 17020
16994: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
16995: LD_ADDR_VAR 0 3
16999: PUSH
17000: LD_INT 2
17002: PUSH
17003: LD_INT 3
17005: PUSH
17006: LD_INT 4
17008: PUSH
17009: LD_INT 5
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: ST_TO_ADDR
17018: GO 17809
17020: LD_INT 7
17022: DOUBLE
17023: EQUAL
17024: IFTRUE 17028
17026: GO 17054
17028: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
17029: LD_ADDR_VAR 0 3
17033: PUSH
17034: LD_INT 2
17036: PUSH
17037: LD_INT 3
17039: PUSH
17040: LD_INT 4
17042: PUSH
17043: LD_INT 5
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: ST_TO_ADDR
17052: GO 17809
17054: LD_INT 12
17056: DOUBLE
17057: EQUAL
17058: IFTRUE 17062
17060: GO 17088
17062: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
17063: LD_ADDR_VAR 0 3
17067: PUSH
17068: LD_INT 2
17070: PUSH
17071: LD_INT 3
17073: PUSH
17074: LD_INT 4
17076: PUSH
17077: LD_INT 5
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: ST_TO_ADDR
17086: GO 17809
17088: LD_INT 13
17090: DOUBLE
17091: EQUAL
17092: IFTRUE 17096
17094: GO 17122
17096: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
17097: LD_ADDR_VAR 0 3
17101: PUSH
17102: LD_INT 2
17104: PUSH
17105: LD_INT 3
17107: PUSH
17108: LD_INT 4
17110: PUSH
17111: LD_INT 5
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: ST_TO_ADDR
17120: GO 17809
17122: LD_INT 14
17124: DOUBLE
17125: EQUAL
17126: IFTRUE 17130
17128: GO 17148
17130: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
17131: LD_ADDR_VAR 0 3
17135: PUSH
17136: LD_INT 4
17138: PUSH
17139: LD_INT 5
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: ST_TO_ADDR
17146: GO 17809
17148: LD_INT 6
17150: DOUBLE
17151: EQUAL
17152: IFTRUE 17156
17154: GO 17174
17156: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
17157: LD_ADDR_VAR 0 3
17161: PUSH
17162: LD_INT 4
17164: PUSH
17165: LD_INT 5
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: ST_TO_ADDR
17172: GO 17809
17174: LD_INT 10
17176: DOUBLE
17177: EQUAL
17178: IFTRUE 17182
17180: GO 17200
17182: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
17183: LD_ADDR_VAR 0 3
17187: PUSH
17188: LD_INT 4
17190: PUSH
17191: LD_INT 5
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: ST_TO_ADDR
17198: GO 17809
17200: LD_INT 22
17202: DOUBLE
17203: EQUAL
17204: IFTRUE 17208
17206: GO 17234
17208: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
17209: LD_ADDR_VAR 0 3
17213: PUSH
17214: LD_INT 11
17216: PUSH
17217: LD_INT 12
17219: PUSH
17220: LD_INT 13
17222: PUSH
17223: LD_INT 14
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: ST_TO_ADDR
17232: GO 17809
17234: LD_INT 23
17236: DOUBLE
17237: EQUAL
17238: IFTRUE 17242
17240: GO 17268
17242: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
17243: LD_ADDR_VAR 0 3
17247: PUSH
17248: LD_INT 11
17250: PUSH
17251: LD_INT 12
17253: PUSH
17254: LD_INT 13
17256: PUSH
17257: LD_INT 14
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: ST_TO_ADDR
17266: GO 17809
17268: LD_INT 24
17270: DOUBLE
17271: EQUAL
17272: IFTRUE 17276
17274: GO 17302
17276: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
17277: LD_ADDR_VAR 0 3
17281: PUSH
17282: LD_INT 11
17284: PUSH
17285: LD_INT 12
17287: PUSH
17288: LD_INT 13
17290: PUSH
17291: LD_INT 14
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: ST_TO_ADDR
17300: GO 17809
17302: LD_INT 30
17304: DOUBLE
17305: EQUAL
17306: IFTRUE 17310
17308: GO 17336
17310: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
17311: LD_ADDR_VAR 0 3
17315: PUSH
17316: LD_INT 11
17318: PUSH
17319: LD_INT 12
17321: PUSH
17322: LD_INT 13
17324: PUSH
17325: LD_INT 14
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: ST_TO_ADDR
17334: GO 17809
17336: LD_INT 25
17338: DOUBLE
17339: EQUAL
17340: IFTRUE 17344
17342: GO 17362
17344: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
17345: LD_ADDR_VAR 0 3
17349: PUSH
17350: LD_INT 13
17352: PUSH
17353: LD_INT 14
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: ST_TO_ADDR
17360: GO 17809
17362: LD_INT 27
17364: DOUBLE
17365: EQUAL
17366: IFTRUE 17370
17368: GO 17388
17370: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
17371: LD_ADDR_VAR 0 3
17375: PUSH
17376: LD_INT 13
17378: PUSH
17379: LD_INT 14
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: ST_TO_ADDR
17386: GO 17809
17388: LD_INT 28
17390: DOUBLE
17391: EQUAL
17392: IFTRUE 17396
17394: GO 17414
17396: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
17397: LD_ADDR_VAR 0 3
17401: PUSH
17402: LD_INT 13
17404: PUSH
17405: LD_INT 14
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: ST_TO_ADDR
17412: GO 17809
17414: LD_INT 29
17416: DOUBLE
17417: EQUAL
17418: IFTRUE 17422
17420: GO 17440
17422: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
17423: LD_ADDR_VAR 0 3
17427: PUSH
17428: LD_INT 13
17430: PUSH
17431: LD_INT 14
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: ST_TO_ADDR
17438: GO 17809
17440: LD_INT 31
17442: DOUBLE
17443: EQUAL
17444: IFTRUE 17448
17446: GO 17466
17448: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
17449: LD_ADDR_VAR 0 3
17453: PUSH
17454: LD_INT 13
17456: PUSH
17457: LD_INT 14
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: ST_TO_ADDR
17464: GO 17809
17466: LD_INT 26
17468: DOUBLE
17469: EQUAL
17470: IFTRUE 17474
17472: GO 17492
17474: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
17475: LD_ADDR_VAR 0 3
17479: PUSH
17480: LD_INT 13
17482: PUSH
17483: LD_INT 14
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: ST_TO_ADDR
17490: GO 17809
17492: LD_INT 42
17494: DOUBLE
17495: EQUAL
17496: IFTRUE 17500
17498: GO 17526
17500: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
17501: LD_ADDR_VAR 0 3
17505: PUSH
17506: LD_INT 21
17508: PUSH
17509: LD_INT 22
17511: PUSH
17512: LD_INT 23
17514: PUSH
17515: LD_INT 24
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: ST_TO_ADDR
17524: GO 17809
17526: LD_INT 43
17528: DOUBLE
17529: EQUAL
17530: IFTRUE 17534
17532: GO 17560
17534: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
17535: LD_ADDR_VAR 0 3
17539: PUSH
17540: LD_INT 21
17542: PUSH
17543: LD_INT 22
17545: PUSH
17546: LD_INT 23
17548: PUSH
17549: LD_INT 24
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: ST_TO_ADDR
17558: GO 17809
17560: LD_INT 44
17562: DOUBLE
17563: EQUAL
17564: IFTRUE 17568
17566: GO 17594
17568: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
17569: LD_ADDR_VAR 0 3
17573: PUSH
17574: LD_INT 21
17576: PUSH
17577: LD_INT 22
17579: PUSH
17580: LD_INT 23
17582: PUSH
17583: LD_INT 24
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: ST_TO_ADDR
17592: GO 17809
17594: LD_INT 45
17596: DOUBLE
17597: EQUAL
17598: IFTRUE 17602
17600: GO 17628
17602: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
17603: LD_ADDR_VAR 0 3
17607: PUSH
17608: LD_INT 21
17610: PUSH
17611: LD_INT 22
17613: PUSH
17614: LD_INT 23
17616: PUSH
17617: LD_INT 24
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: ST_TO_ADDR
17626: GO 17809
17628: LD_INT 49
17630: DOUBLE
17631: EQUAL
17632: IFTRUE 17636
17634: GO 17662
17636: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
17637: LD_ADDR_VAR 0 3
17641: PUSH
17642: LD_INT 21
17644: PUSH
17645: LD_INT 22
17647: PUSH
17648: LD_INT 23
17650: PUSH
17651: LD_INT 24
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: ST_TO_ADDR
17660: GO 17809
17662: LD_INT 51
17664: DOUBLE
17665: EQUAL
17666: IFTRUE 17670
17668: GO 17696
17670: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
17671: LD_ADDR_VAR 0 3
17675: PUSH
17676: LD_INT 21
17678: PUSH
17679: LD_INT 22
17681: PUSH
17682: LD_INT 23
17684: PUSH
17685: LD_INT 24
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: ST_TO_ADDR
17694: GO 17809
17696: LD_INT 52
17698: DOUBLE
17699: EQUAL
17700: IFTRUE 17704
17702: GO 17730
17704: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
17705: LD_ADDR_VAR 0 3
17709: PUSH
17710: LD_INT 21
17712: PUSH
17713: LD_INT 22
17715: PUSH
17716: LD_INT 23
17718: PUSH
17719: LD_INT 24
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: ST_TO_ADDR
17728: GO 17809
17730: LD_INT 53
17732: DOUBLE
17733: EQUAL
17734: IFTRUE 17738
17736: GO 17756
17738: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
17739: LD_ADDR_VAR 0 3
17743: PUSH
17744: LD_INT 23
17746: PUSH
17747: LD_INT 24
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: ST_TO_ADDR
17754: GO 17809
17756: LD_INT 46
17758: DOUBLE
17759: EQUAL
17760: IFTRUE 17764
17762: GO 17782
17764: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
17765: LD_ADDR_VAR 0 3
17769: PUSH
17770: LD_INT 23
17772: PUSH
17773: LD_INT 24
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: ST_TO_ADDR
17780: GO 17809
17782: LD_INT 47
17784: DOUBLE
17785: EQUAL
17786: IFTRUE 17790
17788: GO 17808
17790: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17791: LD_ADDR_VAR 0 3
17795: PUSH
17796: LD_INT 23
17798: PUSH
17799: LD_INT 24
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: ST_TO_ADDR
17806: GO 17809
17808: POP
// result := ( chassis in result ) ;
17809: LD_ADDR_VAR 0 3
17813: PUSH
17814: LD_VAR 0 1
17818: PUSH
17819: LD_VAR 0 3
17823: IN
17824: ST_TO_ADDR
// end ;
17825: LD_VAR 0 3
17829: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
17830: LD_INT 0
17832: PPUSH
17833: PPUSH
17834: PPUSH
17835: PPUSH
17836: PPUSH
17837: PPUSH
17838: PPUSH
// result := array ;
17839: LD_ADDR_VAR 0 5
17843: PUSH
17844: LD_VAR 0 1
17848: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
17849: LD_VAR 0 1
17853: NOT
17854: PUSH
17855: LD_VAR 0 2
17859: NOT
17860: OR
17861: PUSH
17862: LD_VAR 0 3
17866: NOT
17867: OR
17868: PUSH
17869: LD_VAR 0 2
17873: PUSH
17874: LD_VAR 0 1
17878: GREATER
17879: OR
17880: PUSH
17881: LD_VAR 0 3
17885: PUSH
17886: LD_VAR 0 1
17890: GREATER
17891: OR
17892: IFFALSE 17896
// exit ;
17894: GO 18192
// if direction then
17896: LD_VAR 0 4
17900: IFFALSE 17964
// begin d := 1 ;
17902: LD_ADDR_VAR 0 9
17906: PUSH
17907: LD_INT 1
17909: ST_TO_ADDR
// if i_from > i_to then
17910: LD_VAR 0 2
17914: PUSH
17915: LD_VAR 0 3
17919: GREATER
17920: IFFALSE 17946
// length := ( array - i_from ) + i_to else
17922: LD_ADDR_VAR 0 11
17926: PUSH
17927: LD_VAR 0 1
17931: PUSH
17932: LD_VAR 0 2
17936: MINUS
17937: PUSH
17938: LD_VAR 0 3
17942: PLUS
17943: ST_TO_ADDR
17944: GO 17962
// length := i_to - i_from ;
17946: LD_ADDR_VAR 0 11
17950: PUSH
17951: LD_VAR 0 3
17955: PUSH
17956: LD_VAR 0 2
17960: MINUS
17961: ST_TO_ADDR
// end else
17962: GO 18025
// begin d := - 1 ;
17964: LD_ADDR_VAR 0 9
17968: PUSH
17969: LD_INT 1
17971: NEG
17972: ST_TO_ADDR
// if i_from > i_to then
17973: LD_VAR 0 2
17977: PUSH
17978: LD_VAR 0 3
17982: GREATER
17983: IFFALSE 18003
// length := i_from - i_to else
17985: LD_ADDR_VAR 0 11
17989: PUSH
17990: LD_VAR 0 2
17994: PUSH
17995: LD_VAR 0 3
17999: MINUS
18000: ST_TO_ADDR
18001: GO 18025
// length := ( array - i_to ) + i_from ;
18003: LD_ADDR_VAR 0 11
18007: PUSH
18008: LD_VAR 0 1
18012: PUSH
18013: LD_VAR 0 3
18017: MINUS
18018: PUSH
18019: LD_VAR 0 2
18023: PLUS
18024: ST_TO_ADDR
// end ; if not length then
18025: LD_VAR 0 11
18029: NOT
18030: IFFALSE 18034
// exit ;
18032: GO 18192
// tmp := array ;
18034: LD_ADDR_VAR 0 10
18038: PUSH
18039: LD_VAR 0 1
18043: ST_TO_ADDR
// for i = 1 to length do
18044: LD_ADDR_VAR 0 6
18048: PUSH
18049: DOUBLE
18050: LD_INT 1
18052: DEC
18053: ST_TO_ADDR
18054: LD_VAR 0 11
18058: PUSH
18059: FOR_TO
18060: IFFALSE 18180
// begin for j = 1 to array do
18062: LD_ADDR_VAR 0 7
18066: PUSH
18067: DOUBLE
18068: LD_INT 1
18070: DEC
18071: ST_TO_ADDR
18072: LD_VAR 0 1
18076: PUSH
18077: FOR_TO
18078: IFFALSE 18166
// begin k := j + d ;
18080: LD_ADDR_VAR 0 8
18084: PUSH
18085: LD_VAR 0 7
18089: PUSH
18090: LD_VAR 0 9
18094: PLUS
18095: ST_TO_ADDR
// if k > array then
18096: LD_VAR 0 8
18100: PUSH
18101: LD_VAR 0 1
18105: GREATER
18106: IFFALSE 18116
// k := 1 ;
18108: LD_ADDR_VAR 0 8
18112: PUSH
18113: LD_INT 1
18115: ST_TO_ADDR
// if not k then
18116: LD_VAR 0 8
18120: NOT
18121: IFFALSE 18133
// k := array ;
18123: LD_ADDR_VAR 0 8
18127: PUSH
18128: LD_VAR 0 1
18132: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
18133: LD_ADDR_VAR 0 10
18137: PUSH
18138: LD_VAR 0 10
18142: PPUSH
18143: LD_VAR 0 8
18147: PPUSH
18148: LD_VAR 0 1
18152: PUSH
18153: LD_VAR 0 7
18157: ARRAY
18158: PPUSH
18159: CALL_OW 1
18163: ST_TO_ADDR
// end ;
18164: GO 18077
18166: POP
18167: POP
// array := tmp ;
18168: LD_ADDR_VAR 0 1
18172: PUSH
18173: LD_VAR 0 10
18177: ST_TO_ADDR
// end ;
18178: GO 18059
18180: POP
18181: POP
// result := array ;
18182: LD_ADDR_VAR 0 5
18186: PUSH
18187: LD_VAR 0 1
18191: ST_TO_ADDR
// end ;
18192: LD_VAR 0 5
18196: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
18197: LD_INT 0
18199: PPUSH
18200: PPUSH
// result := 0 ;
18201: LD_ADDR_VAR 0 3
18205: PUSH
18206: LD_INT 0
18208: ST_TO_ADDR
// if not array or not value in array then
18209: LD_VAR 0 1
18213: NOT
18214: PUSH
18215: LD_VAR 0 2
18219: PUSH
18220: LD_VAR 0 1
18224: IN
18225: NOT
18226: OR
18227: IFFALSE 18231
// exit ;
18229: GO 18285
// for i = 1 to array do
18231: LD_ADDR_VAR 0 4
18235: PUSH
18236: DOUBLE
18237: LD_INT 1
18239: DEC
18240: ST_TO_ADDR
18241: LD_VAR 0 1
18245: PUSH
18246: FOR_TO
18247: IFFALSE 18283
// if value = array [ i ] then
18249: LD_VAR 0 2
18253: PUSH
18254: LD_VAR 0 1
18258: PUSH
18259: LD_VAR 0 4
18263: ARRAY
18264: EQUAL
18265: IFFALSE 18281
// begin result := i ;
18267: LD_ADDR_VAR 0 3
18271: PUSH
18272: LD_VAR 0 4
18276: ST_TO_ADDR
// exit ;
18277: POP
18278: POP
18279: GO 18285
// end ;
18281: GO 18246
18283: POP
18284: POP
// end ;
18285: LD_VAR 0 3
18289: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
18290: LD_INT 0
18292: PPUSH
// vc_chassis := chassis ;
18293: LD_ADDR_OWVAR 37
18297: PUSH
18298: LD_VAR 0 1
18302: ST_TO_ADDR
// vc_engine := engine ;
18303: LD_ADDR_OWVAR 39
18307: PUSH
18308: LD_VAR 0 2
18312: ST_TO_ADDR
// vc_control := control ;
18313: LD_ADDR_OWVAR 38
18317: PUSH
18318: LD_VAR 0 3
18322: ST_TO_ADDR
// vc_weapon := weapon ;
18323: LD_ADDR_OWVAR 40
18327: PUSH
18328: LD_VAR 0 4
18332: ST_TO_ADDR
// vc_fuel_battery := fuel ;
18333: LD_ADDR_OWVAR 41
18337: PUSH
18338: LD_VAR 0 5
18342: ST_TO_ADDR
// end ;
18343: LD_VAR 0 6
18347: RET
// export function WantPlant ( unit ) ; var task ; begin
18348: LD_INT 0
18350: PPUSH
18351: PPUSH
// result := false ;
18352: LD_ADDR_VAR 0 2
18356: PUSH
18357: LD_INT 0
18359: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
18360: LD_ADDR_VAR 0 3
18364: PUSH
18365: LD_VAR 0 1
18369: PPUSH
18370: CALL_OW 437
18374: ST_TO_ADDR
// if task then
18375: LD_VAR 0 3
18379: IFFALSE 18407
// if task [ 1 ] [ 1 ] = p then
18381: LD_VAR 0 3
18385: PUSH
18386: LD_INT 1
18388: ARRAY
18389: PUSH
18390: LD_INT 1
18392: ARRAY
18393: PUSH
18394: LD_STRING p
18396: EQUAL
18397: IFFALSE 18407
// result := true ;
18399: LD_ADDR_VAR 0 2
18403: PUSH
18404: LD_INT 1
18406: ST_TO_ADDR
// end ;
18407: LD_VAR 0 2
18411: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
18412: LD_INT 0
18414: PPUSH
18415: PPUSH
18416: PPUSH
18417: PPUSH
// if pos < 1 then
18418: LD_VAR 0 2
18422: PUSH
18423: LD_INT 1
18425: LESS
18426: IFFALSE 18430
// exit ;
18428: GO 18733
// if pos = 1 then
18430: LD_VAR 0 2
18434: PUSH
18435: LD_INT 1
18437: EQUAL
18438: IFFALSE 18471
// result := Replace ( arr , pos [ 1 ] , value ) else
18440: LD_ADDR_VAR 0 4
18444: PUSH
18445: LD_VAR 0 1
18449: PPUSH
18450: LD_VAR 0 2
18454: PUSH
18455: LD_INT 1
18457: ARRAY
18458: PPUSH
18459: LD_VAR 0 3
18463: PPUSH
18464: CALL_OW 1
18468: ST_TO_ADDR
18469: GO 18733
// begin tmp := arr ;
18471: LD_ADDR_VAR 0 6
18475: PUSH
18476: LD_VAR 0 1
18480: ST_TO_ADDR
// s_arr := [ tmp ] ;
18481: LD_ADDR_VAR 0 7
18485: PUSH
18486: LD_VAR 0 6
18490: PUSH
18491: EMPTY
18492: LIST
18493: ST_TO_ADDR
// for i = 1 to pos - 1 do
18494: LD_ADDR_VAR 0 5
18498: PUSH
18499: DOUBLE
18500: LD_INT 1
18502: DEC
18503: ST_TO_ADDR
18504: LD_VAR 0 2
18508: PUSH
18509: LD_INT 1
18511: MINUS
18512: PUSH
18513: FOR_TO
18514: IFFALSE 18559
// begin tmp := tmp [ pos [ i ] ] ;
18516: LD_ADDR_VAR 0 6
18520: PUSH
18521: LD_VAR 0 6
18525: PUSH
18526: LD_VAR 0 2
18530: PUSH
18531: LD_VAR 0 5
18535: ARRAY
18536: ARRAY
18537: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
18538: LD_ADDR_VAR 0 7
18542: PUSH
18543: LD_VAR 0 7
18547: PUSH
18548: LD_VAR 0 6
18552: PUSH
18553: EMPTY
18554: LIST
18555: ADD
18556: ST_TO_ADDR
// end ;
18557: GO 18513
18559: POP
18560: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
18561: LD_ADDR_VAR 0 6
18565: PUSH
18566: LD_VAR 0 6
18570: PPUSH
18571: LD_VAR 0 2
18575: PUSH
18576: LD_VAR 0 2
18580: ARRAY
18581: PPUSH
18582: LD_VAR 0 3
18586: PPUSH
18587: CALL_OW 1
18591: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
18592: LD_ADDR_VAR 0 7
18596: PUSH
18597: LD_VAR 0 7
18601: PPUSH
18602: LD_VAR 0 7
18606: PPUSH
18607: LD_VAR 0 6
18611: PPUSH
18612: CALL_OW 1
18616: ST_TO_ADDR
// for i = s_arr downto 2 do
18617: LD_ADDR_VAR 0 5
18621: PUSH
18622: DOUBLE
18623: LD_VAR 0 7
18627: INC
18628: ST_TO_ADDR
18629: LD_INT 2
18631: PUSH
18632: FOR_DOWNTO
18633: IFFALSE 18717
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
18635: LD_ADDR_VAR 0 6
18639: PUSH
18640: LD_VAR 0 7
18644: PUSH
18645: LD_VAR 0 5
18649: PUSH
18650: LD_INT 1
18652: MINUS
18653: ARRAY
18654: PPUSH
18655: LD_VAR 0 2
18659: PUSH
18660: LD_VAR 0 5
18664: PUSH
18665: LD_INT 1
18667: MINUS
18668: ARRAY
18669: PPUSH
18670: LD_VAR 0 7
18674: PUSH
18675: LD_VAR 0 5
18679: ARRAY
18680: PPUSH
18681: CALL_OW 1
18685: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
18686: LD_ADDR_VAR 0 7
18690: PUSH
18691: LD_VAR 0 7
18695: PPUSH
18696: LD_VAR 0 5
18700: PUSH
18701: LD_INT 1
18703: MINUS
18704: PPUSH
18705: LD_VAR 0 6
18709: PPUSH
18710: CALL_OW 1
18714: ST_TO_ADDR
// end ;
18715: GO 18632
18717: POP
18718: POP
// result := s_arr [ 1 ] ;
18719: LD_ADDR_VAR 0 4
18723: PUSH
18724: LD_VAR 0 7
18728: PUSH
18729: LD_INT 1
18731: ARRAY
18732: ST_TO_ADDR
// end ; end ;
18733: LD_VAR 0 4
18737: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
18738: LD_INT 0
18740: PPUSH
18741: PPUSH
// if not list then
18742: LD_VAR 0 1
18746: NOT
18747: IFFALSE 18751
// exit ;
18749: GO 18842
// i := list [ pos1 ] ;
18751: LD_ADDR_VAR 0 5
18755: PUSH
18756: LD_VAR 0 1
18760: PUSH
18761: LD_VAR 0 2
18765: ARRAY
18766: ST_TO_ADDR
// if not i then
18767: LD_VAR 0 5
18771: NOT
18772: IFFALSE 18776
// exit ;
18774: GO 18842
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
18776: LD_ADDR_VAR 0 1
18780: PUSH
18781: LD_VAR 0 1
18785: PPUSH
18786: LD_VAR 0 2
18790: PPUSH
18791: LD_VAR 0 1
18795: PUSH
18796: LD_VAR 0 3
18800: ARRAY
18801: PPUSH
18802: CALL_OW 1
18806: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
18807: LD_ADDR_VAR 0 1
18811: PUSH
18812: LD_VAR 0 1
18816: PPUSH
18817: LD_VAR 0 3
18821: PPUSH
18822: LD_VAR 0 5
18826: PPUSH
18827: CALL_OW 1
18831: ST_TO_ADDR
// result := list ;
18832: LD_ADDR_VAR 0 4
18836: PUSH
18837: LD_VAR 0 1
18841: ST_TO_ADDR
// end ;
18842: LD_VAR 0 4
18846: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
18847: LD_INT 0
18849: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
18850: LD_ADDR_VAR 0 5
18854: PUSH
18855: LD_VAR 0 1
18859: PPUSH
18860: CALL_OW 250
18864: PPUSH
18865: LD_VAR 0 1
18869: PPUSH
18870: CALL_OW 251
18874: PPUSH
18875: LD_VAR 0 2
18879: PPUSH
18880: LD_VAR 0 3
18884: PPUSH
18885: LD_VAR 0 4
18889: PPUSH
18890: CALL 18900 0 5
18894: ST_TO_ADDR
// end ;
18895: LD_VAR 0 5
18899: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
18900: LD_INT 0
18902: PPUSH
18903: PPUSH
18904: PPUSH
18905: PPUSH
// if not list then
18906: LD_VAR 0 3
18910: NOT
18911: IFFALSE 18915
// exit ;
18913: GO 19303
// result := [ ] ;
18915: LD_ADDR_VAR 0 6
18919: PUSH
18920: EMPTY
18921: ST_TO_ADDR
// for i in list do
18922: LD_ADDR_VAR 0 7
18926: PUSH
18927: LD_VAR 0 3
18931: PUSH
18932: FOR_IN
18933: IFFALSE 19135
// begin tmp := GetDistUnitXY ( i , x , y ) ;
18935: LD_ADDR_VAR 0 9
18939: PUSH
18940: LD_VAR 0 7
18944: PPUSH
18945: LD_VAR 0 1
18949: PPUSH
18950: LD_VAR 0 2
18954: PPUSH
18955: CALL_OW 297
18959: ST_TO_ADDR
// if not result then
18960: LD_VAR 0 6
18964: NOT
18965: IFFALSE 18991
// result := [ [ i , tmp ] ] else
18967: LD_ADDR_VAR 0 6
18971: PUSH
18972: LD_VAR 0 7
18976: PUSH
18977: LD_VAR 0 9
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: EMPTY
18987: LIST
18988: ST_TO_ADDR
18989: GO 19133
// begin if result [ result ] [ 2 ] < tmp then
18991: LD_VAR 0 6
18995: PUSH
18996: LD_VAR 0 6
19000: ARRAY
19001: PUSH
19002: LD_INT 2
19004: ARRAY
19005: PUSH
19006: LD_VAR 0 9
19010: LESS
19011: IFFALSE 19053
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
19013: LD_ADDR_VAR 0 6
19017: PUSH
19018: LD_VAR 0 6
19022: PPUSH
19023: LD_VAR 0 6
19027: PUSH
19028: LD_INT 1
19030: PLUS
19031: PPUSH
19032: LD_VAR 0 7
19036: PUSH
19037: LD_VAR 0 9
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PPUSH
19046: CALL_OW 2
19050: ST_TO_ADDR
19051: GO 19133
// for j = 1 to result do
19053: LD_ADDR_VAR 0 8
19057: PUSH
19058: DOUBLE
19059: LD_INT 1
19061: DEC
19062: ST_TO_ADDR
19063: LD_VAR 0 6
19067: PUSH
19068: FOR_TO
19069: IFFALSE 19131
// begin if tmp < result [ j ] [ 2 ] then
19071: LD_VAR 0 9
19075: PUSH
19076: LD_VAR 0 6
19080: PUSH
19081: LD_VAR 0 8
19085: ARRAY
19086: PUSH
19087: LD_INT 2
19089: ARRAY
19090: LESS
19091: IFFALSE 19129
// begin result := Insert ( result , j , [ i , tmp ] ) ;
19093: LD_ADDR_VAR 0 6
19097: PUSH
19098: LD_VAR 0 6
19102: PPUSH
19103: LD_VAR 0 8
19107: PPUSH
19108: LD_VAR 0 7
19112: PUSH
19113: LD_VAR 0 9
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PPUSH
19122: CALL_OW 2
19126: ST_TO_ADDR
// break ;
19127: GO 19131
// end ; end ;
19129: GO 19068
19131: POP
19132: POP
// end ; end ;
19133: GO 18932
19135: POP
19136: POP
// if result and not asc then
19137: LD_VAR 0 6
19141: PUSH
19142: LD_VAR 0 4
19146: NOT
19147: AND
19148: IFFALSE 19223
// begin tmp := result ;
19150: LD_ADDR_VAR 0 9
19154: PUSH
19155: LD_VAR 0 6
19159: ST_TO_ADDR
// for i = tmp downto 1 do
19160: LD_ADDR_VAR 0 7
19164: PUSH
19165: DOUBLE
19166: LD_VAR 0 9
19170: INC
19171: ST_TO_ADDR
19172: LD_INT 1
19174: PUSH
19175: FOR_DOWNTO
19176: IFFALSE 19221
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
19178: LD_ADDR_VAR 0 6
19182: PUSH
19183: LD_VAR 0 6
19187: PPUSH
19188: LD_VAR 0 9
19192: PUSH
19193: LD_VAR 0 7
19197: MINUS
19198: PUSH
19199: LD_INT 1
19201: PLUS
19202: PPUSH
19203: LD_VAR 0 9
19207: PUSH
19208: LD_VAR 0 7
19212: ARRAY
19213: PPUSH
19214: CALL_OW 1
19218: ST_TO_ADDR
19219: GO 19175
19221: POP
19222: POP
// end ; tmp := [ ] ;
19223: LD_ADDR_VAR 0 9
19227: PUSH
19228: EMPTY
19229: ST_TO_ADDR
// if mode then
19230: LD_VAR 0 5
19234: IFFALSE 19303
// begin for i = 1 to result do
19236: LD_ADDR_VAR 0 7
19240: PUSH
19241: DOUBLE
19242: LD_INT 1
19244: DEC
19245: ST_TO_ADDR
19246: LD_VAR 0 6
19250: PUSH
19251: FOR_TO
19252: IFFALSE 19291
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
19254: LD_ADDR_VAR 0 9
19258: PUSH
19259: LD_VAR 0 9
19263: PPUSH
19264: LD_VAR 0 7
19268: PPUSH
19269: LD_VAR 0 6
19273: PUSH
19274: LD_VAR 0 7
19278: ARRAY
19279: PUSH
19280: LD_INT 1
19282: ARRAY
19283: PPUSH
19284: CALL_OW 1
19288: ST_TO_ADDR
19289: GO 19251
19291: POP
19292: POP
// result := tmp ;
19293: LD_ADDR_VAR 0 6
19297: PUSH
19298: LD_VAR 0 9
19302: ST_TO_ADDR
// end ; end ;
19303: LD_VAR 0 6
19307: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
19308: LD_INT 0
19310: PPUSH
19311: PPUSH
19312: PPUSH
19313: PPUSH
19314: PPUSH
19315: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
19316: LD_ADDR_VAR 0 5
19320: PUSH
19321: LD_INT 0
19323: PUSH
19324: LD_INT 0
19326: PUSH
19327: LD_INT 0
19329: PUSH
19330: EMPTY
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: ST_TO_ADDR
// if not x or not y then
19338: LD_VAR 0 2
19342: NOT
19343: PUSH
19344: LD_VAR 0 3
19348: NOT
19349: OR
19350: IFFALSE 19354
// exit ;
19352: GO 21000
// if not range then
19354: LD_VAR 0 4
19358: NOT
19359: IFFALSE 19369
// range := 10 ;
19361: LD_ADDR_VAR 0 4
19365: PUSH
19366: LD_INT 10
19368: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19369: LD_ADDR_VAR 0 8
19373: PUSH
19374: LD_INT 81
19376: PUSH
19377: LD_VAR 0 1
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 92
19388: PUSH
19389: LD_VAR 0 2
19393: PUSH
19394: LD_VAR 0 3
19398: PUSH
19399: LD_VAR 0 4
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 3
19412: PUSH
19413: LD_INT 21
19415: PUSH
19416: LD_INT 3
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: LIST
19431: PPUSH
19432: CALL_OW 69
19436: ST_TO_ADDR
// if not tmp then
19437: LD_VAR 0 8
19441: NOT
19442: IFFALSE 19446
// exit ;
19444: GO 21000
// for i in tmp do
19446: LD_ADDR_VAR 0 6
19450: PUSH
19451: LD_VAR 0 8
19455: PUSH
19456: FOR_IN
19457: IFFALSE 20975
// begin points := [ 0 , 0 , 0 ] ;
19459: LD_ADDR_VAR 0 9
19463: PUSH
19464: LD_INT 0
19466: PUSH
19467: LD_INT 0
19469: PUSH
19470: LD_INT 0
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: LIST
19477: ST_TO_ADDR
// bpoints := 1 ;
19478: LD_ADDR_VAR 0 10
19482: PUSH
19483: LD_INT 1
19485: ST_TO_ADDR
// case GetType ( i ) of unit_human :
19486: LD_VAR 0 6
19490: PPUSH
19491: CALL_OW 247
19495: PUSH
19496: LD_INT 1
19498: DOUBLE
19499: EQUAL
19500: IFTRUE 19504
19502: GO 20082
19504: POP
// begin if GetClass ( i ) = 1 then
19505: LD_VAR 0 6
19509: PPUSH
19510: CALL_OW 257
19514: PUSH
19515: LD_INT 1
19517: EQUAL
19518: IFFALSE 19539
// points := [ 10 , 5 , 3 ] ;
19520: LD_ADDR_VAR 0 9
19524: PUSH
19525: LD_INT 10
19527: PUSH
19528: LD_INT 5
19530: PUSH
19531: LD_INT 3
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: LIST
19538: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
19539: LD_VAR 0 6
19543: PPUSH
19544: CALL_OW 257
19548: PUSH
19549: LD_INT 2
19551: PUSH
19552: LD_INT 3
19554: PUSH
19555: LD_INT 4
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: LIST
19562: IN
19563: IFFALSE 19584
// points := [ 3 , 2 , 1 ] ;
19565: LD_ADDR_VAR 0 9
19569: PUSH
19570: LD_INT 3
19572: PUSH
19573: LD_INT 2
19575: PUSH
19576: LD_INT 1
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: LIST
19583: ST_TO_ADDR
// if GetClass ( i ) = 5 then
19584: LD_VAR 0 6
19588: PPUSH
19589: CALL_OW 257
19593: PUSH
19594: LD_INT 5
19596: EQUAL
19597: IFFALSE 19618
// points := [ 130 , 5 , 2 ] ;
19599: LD_ADDR_VAR 0 9
19603: PUSH
19604: LD_INT 130
19606: PUSH
19607: LD_INT 5
19609: PUSH
19610: LD_INT 2
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: LIST
19617: ST_TO_ADDR
// if GetClass ( i ) = 8 then
19618: LD_VAR 0 6
19622: PPUSH
19623: CALL_OW 257
19627: PUSH
19628: LD_INT 8
19630: EQUAL
19631: IFFALSE 19652
// points := [ 35 , 35 , 30 ] ;
19633: LD_ADDR_VAR 0 9
19637: PUSH
19638: LD_INT 35
19640: PUSH
19641: LD_INT 35
19643: PUSH
19644: LD_INT 30
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: LIST
19651: ST_TO_ADDR
// if GetClass ( i ) = 9 then
19652: LD_VAR 0 6
19656: PPUSH
19657: CALL_OW 257
19661: PUSH
19662: LD_INT 9
19664: EQUAL
19665: IFFALSE 19686
// points := [ 20 , 55 , 40 ] ;
19667: LD_ADDR_VAR 0 9
19671: PUSH
19672: LD_INT 20
19674: PUSH
19675: LD_INT 55
19677: PUSH
19678: LD_INT 40
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: LIST
19685: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
19686: LD_VAR 0 6
19690: PPUSH
19691: CALL_OW 257
19695: PUSH
19696: LD_INT 12
19698: PUSH
19699: LD_INT 16
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: IN
19706: IFFALSE 19727
// points := [ 5 , 3 , 2 ] ;
19708: LD_ADDR_VAR 0 9
19712: PUSH
19713: LD_INT 5
19715: PUSH
19716: LD_INT 3
19718: PUSH
19719: LD_INT 2
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: LIST
19726: ST_TO_ADDR
// if GetClass ( i ) = 17 then
19727: LD_VAR 0 6
19731: PPUSH
19732: CALL_OW 257
19736: PUSH
19737: LD_INT 17
19739: EQUAL
19740: IFFALSE 19761
// points := [ 100 , 50 , 75 ] ;
19742: LD_ADDR_VAR 0 9
19746: PUSH
19747: LD_INT 100
19749: PUSH
19750: LD_INT 50
19752: PUSH
19753: LD_INT 75
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: LIST
19760: ST_TO_ADDR
// if GetClass ( i ) = 15 then
19761: LD_VAR 0 6
19765: PPUSH
19766: CALL_OW 257
19770: PUSH
19771: LD_INT 15
19773: EQUAL
19774: IFFALSE 19795
// points := [ 10 , 5 , 3 ] ;
19776: LD_ADDR_VAR 0 9
19780: PUSH
19781: LD_INT 10
19783: PUSH
19784: LD_INT 5
19786: PUSH
19787: LD_INT 3
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: LIST
19794: ST_TO_ADDR
// if GetClass ( i ) = 14 then
19795: LD_VAR 0 6
19799: PPUSH
19800: CALL_OW 257
19804: PUSH
19805: LD_INT 14
19807: EQUAL
19808: IFFALSE 19829
// points := [ 10 , 0 , 0 ] ;
19810: LD_ADDR_VAR 0 9
19814: PUSH
19815: LD_INT 10
19817: PUSH
19818: LD_INT 0
19820: PUSH
19821: LD_INT 0
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: LIST
19828: ST_TO_ADDR
// if GetClass ( i ) = 11 then
19829: LD_VAR 0 6
19833: PPUSH
19834: CALL_OW 257
19838: PUSH
19839: LD_INT 11
19841: EQUAL
19842: IFFALSE 19863
// points := [ 30 , 10 , 5 ] ;
19844: LD_ADDR_VAR 0 9
19848: PUSH
19849: LD_INT 30
19851: PUSH
19852: LD_INT 10
19854: PUSH
19855: LD_INT 5
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: LIST
19862: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
19863: LD_VAR 0 1
19867: PPUSH
19868: LD_INT 5
19870: PPUSH
19871: CALL_OW 321
19875: PUSH
19876: LD_INT 2
19878: EQUAL
19879: IFFALSE 19896
// bpoints := bpoints * 1.8 ;
19881: LD_ADDR_VAR 0 10
19885: PUSH
19886: LD_VAR 0 10
19890: PUSH
19891: LD_REAL  1.80000000000000E+0000
19894: MUL
19895: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
19896: LD_VAR 0 6
19900: PPUSH
19901: CALL_OW 257
19905: PUSH
19906: LD_INT 1
19908: PUSH
19909: LD_INT 2
19911: PUSH
19912: LD_INT 3
19914: PUSH
19915: LD_INT 4
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: IN
19924: PUSH
19925: LD_VAR 0 1
19929: PPUSH
19930: LD_INT 51
19932: PPUSH
19933: CALL_OW 321
19937: PUSH
19938: LD_INT 2
19940: EQUAL
19941: AND
19942: IFFALSE 19959
// bpoints := bpoints * 1.2 ;
19944: LD_ADDR_VAR 0 10
19948: PUSH
19949: LD_VAR 0 10
19953: PUSH
19954: LD_REAL  1.20000000000000E+0000
19957: MUL
19958: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
19959: LD_VAR 0 6
19963: PPUSH
19964: CALL_OW 257
19968: PUSH
19969: LD_INT 5
19971: PUSH
19972: LD_INT 7
19974: PUSH
19975: LD_INT 9
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: LIST
19982: IN
19983: PUSH
19984: LD_VAR 0 1
19988: PPUSH
19989: LD_INT 52
19991: PPUSH
19992: CALL_OW 321
19996: PUSH
19997: LD_INT 2
19999: EQUAL
20000: AND
20001: IFFALSE 20018
// bpoints := bpoints * 1.5 ;
20003: LD_ADDR_VAR 0 10
20007: PUSH
20008: LD_VAR 0 10
20012: PUSH
20013: LD_REAL  1.50000000000000E+0000
20016: MUL
20017: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
20018: LD_VAR 0 1
20022: PPUSH
20023: LD_INT 66
20025: PPUSH
20026: CALL_OW 321
20030: PUSH
20031: LD_INT 2
20033: EQUAL
20034: IFFALSE 20051
// bpoints := bpoints * 1.1 ;
20036: LD_ADDR_VAR 0 10
20040: PUSH
20041: LD_VAR 0 10
20045: PUSH
20046: LD_REAL  1.10000000000000E+0000
20049: MUL
20050: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
20051: LD_ADDR_VAR 0 10
20055: PUSH
20056: LD_VAR 0 10
20060: PUSH
20061: LD_VAR 0 6
20065: PPUSH
20066: LD_INT 1
20068: PPUSH
20069: CALL_OW 259
20073: PUSH
20074: LD_REAL  1.15000000000000E+0000
20077: MUL
20078: MUL
20079: ST_TO_ADDR
// end ; unit_vehicle :
20080: GO 20904
20082: LD_INT 2
20084: DOUBLE
20085: EQUAL
20086: IFTRUE 20090
20088: GO 20892
20090: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
20091: LD_VAR 0 6
20095: PPUSH
20096: CALL_OW 264
20100: PUSH
20101: LD_INT 2
20103: PUSH
20104: LD_INT 42
20106: PUSH
20107: LD_INT 24
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: LIST
20114: IN
20115: IFFALSE 20136
// points := [ 25 , 5 , 3 ] ;
20117: LD_ADDR_VAR 0 9
20121: PUSH
20122: LD_INT 25
20124: PUSH
20125: LD_INT 5
20127: PUSH
20128: LD_INT 3
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: LIST
20135: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
20136: LD_VAR 0 6
20140: PPUSH
20141: CALL_OW 264
20145: PUSH
20146: LD_INT 4
20148: PUSH
20149: LD_INT 43
20151: PUSH
20152: LD_INT 25
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: LIST
20159: IN
20160: IFFALSE 20181
// points := [ 40 , 15 , 5 ] ;
20162: LD_ADDR_VAR 0 9
20166: PUSH
20167: LD_INT 40
20169: PUSH
20170: LD_INT 15
20172: PUSH
20173: LD_INT 5
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: LIST
20180: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
20181: LD_VAR 0 6
20185: PPUSH
20186: CALL_OW 264
20190: PUSH
20191: LD_INT 3
20193: PUSH
20194: LD_INT 23
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: IN
20201: IFFALSE 20222
// points := [ 7 , 25 , 8 ] ;
20203: LD_ADDR_VAR 0 9
20207: PUSH
20208: LD_INT 7
20210: PUSH
20211: LD_INT 25
20213: PUSH
20214: LD_INT 8
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: LIST
20221: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
20222: LD_VAR 0 6
20226: PPUSH
20227: CALL_OW 264
20231: PUSH
20232: LD_INT 5
20234: PUSH
20235: LD_INT 27
20237: PUSH
20238: LD_INT 44
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: LIST
20245: IN
20246: IFFALSE 20267
// points := [ 14 , 50 , 16 ] ;
20248: LD_ADDR_VAR 0 9
20252: PUSH
20253: LD_INT 14
20255: PUSH
20256: LD_INT 50
20258: PUSH
20259: LD_INT 16
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: LIST
20266: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
20267: LD_VAR 0 6
20271: PPUSH
20272: CALL_OW 264
20276: PUSH
20277: LD_INT 6
20279: PUSH
20280: LD_INT 46
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: IN
20287: IFFALSE 20308
// points := [ 32 , 120 , 70 ] ;
20289: LD_ADDR_VAR 0 9
20293: PUSH
20294: LD_INT 32
20296: PUSH
20297: LD_INT 120
20299: PUSH
20300: LD_INT 70
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: LIST
20307: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
20308: LD_VAR 0 6
20312: PPUSH
20313: CALL_OW 264
20317: PUSH
20318: LD_INT 7
20320: PUSH
20321: LD_INT 28
20323: PUSH
20324: LD_INT 45
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: LIST
20331: IN
20332: IFFALSE 20353
// points := [ 35 , 20 , 45 ] ;
20334: LD_ADDR_VAR 0 9
20338: PUSH
20339: LD_INT 35
20341: PUSH
20342: LD_INT 20
20344: PUSH
20345: LD_INT 45
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: LIST
20352: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
20353: LD_VAR 0 6
20357: PPUSH
20358: CALL_OW 264
20362: PUSH
20363: LD_INT 47
20365: PUSH
20366: EMPTY
20367: LIST
20368: IN
20369: IFFALSE 20390
// points := [ 67 , 45 , 75 ] ;
20371: LD_ADDR_VAR 0 9
20375: PUSH
20376: LD_INT 67
20378: PUSH
20379: LD_INT 45
20381: PUSH
20382: LD_INT 75
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: LIST
20389: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
20390: LD_VAR 0 6
20394: PPUSH
20395: CALL_OW 264
20399: PUSH
20400: LD_INT 26
20402: PUSH
20403: EMPTY
20404: LIST
20405: IN
20406: IFFALSE 20427
// points := [ 120 , 30 , 80 ] ;
20408: LD_ADDR_VAR 0 9
20412: PUSH
20413: LD_INT 120
20415: PUSH
20416: LD_INT 30
20418: PUSH
20419: LD_INT 80
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: LIST
20426: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
20427: LD_VAR 0 6
20431: PPUSH
20432: CALL_OW 264
20436: PUSH
20437: LD_INT 22
20439: PUSH
20440: EMPTY
20441: LIST
20442: IN
20443: IFFALSE 20464
// points := [ 40 , 1 , 1 ] ;
20445: LD_ADDR_VAR 0 9
20449: PUSH
20450: LD_INT 40
20452: PUSH
20453: LD_INT 1
20455: PUSH
20456: LD_INT 1
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: LIST
20463: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
20464: LD_VAR 0 6
20468: PPUSH
20469: CALL_OW 264
20473: PUSH
20474: LD_INT 29
20476: PUSH
20477: EMPTY
20478: LIST
20479: IN
20480: IFFALSE 20501
// points := [ 70 , 200 , 400 ] ;
20482: LD_ADDR_VAR 0 9
20486: PUSH
20487: LD_INT 70
20489: PUSH
20490: LD_INT 200
20492: PUSH
20493: LD_INT 400
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: LIST
20500: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
20501: LD_VAR 0 6
20505: PPUSH
20506: CALL_OW 264
20510: PUSH
20511: LD_INT 14
20513: PUSH
20514: LD_INT 53
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: IN
20521: IFFALSE 20542
// points := [ 40 , 10 , 20 ] ;
20523: LD_ADDR_VAR 0 9
20527: PUSH
20528: LD_INT 40
20530: PUSH
20531: LD_INT 10
20533: PUSH
20534: LD_INT 20
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: LIST
20541: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
20542: LD_VAR 0 6
20546: PPUSH
20547: CALL_OW 264
20551: PUSH
20552: LD_INT 9
20554: PUSH
20555: EMPTY
20556: LIST
20557: IN
20558: IFFALSE 20579
// points := [ 5 , 70 , 20 ] ;
20560: LD_ADDR_VAR 0 9
20564: PUSH
20565: LD_INT 5
20567: PUSH
20568: LD_INT 70
20570: PUSH
20571: LD_INT 20
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: LIST
20578: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
20579: LD_VAR 0 6
20583: PPUSH
20584: CALL_OW 264
20588: PUSH
20589: LD_INT 10
20591: PUSH
20592: EMPTY
20593: LIST
20594: IN
20595: IFFALSE 20616
// points := [ 35 , 110 , 70 ] ;
20597: LD_ADDR_VAR 0 9
20601: PUSH
20602: LD_INT 35
20604: PUSH
20605: LD_INT 110
20607: PUSH
20608: LD_INT 70
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: LIST
20615: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
20616: LD_VAR 0 6
20620: PPUSH
20621: CALL_OW 265
20625: PUSH
20626: LD_INT 25
20628: EQUAL
20629: IFFALSE 20650
// points := [ 80 , 65 , 100 ] ;
20631: LD_ADDR_VAR 0 9
20635: PUSH
20636: LD_INT 80
20638: PUSH
20639: LD_INT 65
20641: PUSH
20642: LD_INT 100
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: LIST
20649: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
20650: LD_VAR 0 6
20654: PPUSH
20655: CALL_OW 263
20659: PUSH
20660: LD_INT 1
20662: EQUAL
20663: IFFALSE 20698
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
20665: LD_ADDR_VAR 0 10
20669: PUSH
20670: LD_VAR 0 10
20674: PUSH
20675: LD_VAR 0 6
20679: PPUSH
20680: CALL_OW 311
20684: PPUSH
20685: LD_INT 3
20687: PPUSH
20688: CALL_OW 259
20692: PUSH
20693: LD_INT 4
20695: MUL
20696: MUL
20697: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
20698: LD_VAR 0 6
20702: PPUSH
20703: CALL_OW 263
20707: PUSH
20708: LD_INT 2
20710: EQUAL
20711: IFFALSE 20762
// begin j := IsControledBy ( i ) ;
20713: LD_ADDR_VAR 0 7
20717: PUSH
20718: LD_VAR 0 6
20722: PPUSH
20723: CALL_OW 312
20727: ST_TO_ADDR
// if j then
20728: LD_VAR 0 7
20732: IFFALSE 20762
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
20734: LD_ADDR_VAR 0 10
20738: PUSH
20739: LD_VAR 0 10
20743: PUSH
20744: LD_VAR 0 7
20748: PPUSH
20749: LD_INT 3
20751: PPUSH
20752: CALL_OW 259
20756: PUSH
20757: LD_INT 3
20759: MUL
20760: MUL
20761: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
20762: LD_VAR 0 6
20766: PPUSH
20767: CALL_OW 264
20771: PUSH
20772: LD_INT 5
20774: PUSH
20775: LD_INT 6
20777: PUSH
20778: LD_INT 46
20780: PUSH
20781: LD_INT 44
20783: PUSH
20784: LD_INT 47
20786: PUSH
20787: LD_INT 45
20789: PUSH
20790: LD_INT 28
20792: PUSH
20793: LD_INT 7
20795: PUSH
20796: LD_INT 27
20798: PUSH
20799: LD_INT 29
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: IN
20814: PUSH
20815: LD_VAR 0 1
20819: PPUSH
20820: LD_INT 52
20822: PPUSH
20823: CALL_OW 321
20827: PUSH
20828: LD_INT 2
20830: EQUAL
20831: AND
20832: IFFALSE 20849
// bpoints := bpoints * 1.2 ;
20834: LD_ADDR_VAR 0 10
20838: PUSH
20839: LD_VAR 0 10
20843: PUSH
20844: LD_REAL  1.20000000000000E+0000
20847: MUL
20848: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
20849: LD_VAR 0 6
20853: PPUSH
20854: CALL_OW 264
20858: PUSH
20859: LD_INT 6
20861: PUSH
20862: LD_INT 46
20864: PUSH
20865: LD_INT 47
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: LIST
20872: IN
20873: IFFALSE 20890
// bpoints := bpoints * 1.2 ;
20875: LD_ADDR_VAR 0 10
20879: PUSH
20880: LD_VAR 0 10
20884: PUSH
20885: LD_REAL  1.20000000000000E+0000
20888: MUL
20889: ST_TO_ADDR
// end ; unit_building :
20890: GO 20904
20892: LD_INT 3
20894: DOUBLE
20895: EQUAL
20896: IFTRUE 20900
20898: GO 20903
20900: POP
// ; end ;
20901: GO 20904
20903: POP
// for j = 1 to 3 do
20904: LD_ADDR_VAR 0 7
20908: PUSH
20909: DOUBLE
20910: LD_INT 1
20912: DEC
20913: ST_TO_ADDR
20914: LD_INT 3
20916: PUSH
20917: FOR_TO
20918: IFFALSE 20971
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
20920: LD_ADDR_VAR 0 5
20924: PUSH
20925: LD_VAR 0 5
20929: PPUSH
20930: LD_VAR 0 7
20934: PPUSH
20935: LD_VAR 0 5
20939: PUSH
20940: LD_VAR 0 7
20944: ARRAY
20945: PUSH
20946: LD_VAR 0 9
20950: PUSH
20951: LD_VAR 0 7
20955: ARRAY
20956: PUSH
20957: LD_VAR 0 10
20961: MUL
20962: PLUS
20963: PPUSH
20964: CALL_OW 1
20968: ST_TO_ADDR
20969: GO 20917
20971: POP
20972: POP
// end ;
20973: GO 19456
20975: POP
20976: POP
// result := Replace ( result , 4 , tmp ) ;
20977: LD_ADDR_VAR 0 5
20981: PUSH
20982: LD_VAR 0 5
20986: PPUSH
20987: LD_INT 4
20989: PPUSH
20990: LD_VAR 0 8
20994: PPUSH
20995: CALL_OW 1
20999: ST_TO_ADDR
// end ;
21000: LD_VAR 0 5
21004: RET
// export function DangerAtRange ( unit , range ) ; begin
21005: LD_INT 0
21007: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
21008: LD_ADDR_VAR 0 3
21012: PUSH
21013: LD_VAR 0 1
21017: PPUSH
21018: CALL_OW 255
21022: PPUSH
21023: LD_VAR 0 1
21027: PPUSH
21028: CALL_OW 250
21032: PPUSH
21033: LD_VAR 0 1
21037: PPUSH
21038: CALL_OW 251
21042: PPUSH
21043: LD_VAR 0 2
21047: PPUSH
21048: CALL 19308 0 4
21052: ST_TO_ADDR
// end ;
21053: LD_VAR 0 3
21057: RET
// export function DangerInArea ( side , area ) ; begin
21058: LD_INT 0
21060: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
21061: LD_ADDR_VAR 0 3
21065: PUSH
21066: LD_VAR 0 2
21070: PPUSH
21071: LD_INT 81
21073: PUSH
21074: LD_VAR 0 1
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PPUSH
21083: CALL_OW 70
21087: ST_TO_ADDR
// end ;
21088: LD_VAR 0 3
21092: RET
// export function IsExtension ( b ) ; begin
21093: LD_INT 0
21095: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
21096: LD_ADDR_VAR 0 2
21100: PUSH
21101: LD_VAR 0 1
21105: PUSH
21106: LD_INT 23
21108: PUSH
21109: LD_INT 20
21111: PUSH
21112: LD_INT 22
21114: PUSH
21115: LD_INT 17
21117: PUSH
21118: LD_INT 24
21120: PUSH
21121: LD_INT 21
21123: PUSH
21124: LD_INT 19
21126: PUSH
21127: LD_INT 16
21129: PUSH
21130: LD_INT 25
21132: PUSH
21133: LD_INT 18
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: IN
21148: ST_TO_ADDR
// end ;
21149: LD_VAR 0 2
21153: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
21154: LD_INT 0
21156: PPUSH
21157: PPUSH
21158: PPUSH
// result := [ ] ;
21159: LD_ADDR_VAR 0 3
21163: PUSH
21164: EMPTY
21165: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
21166: LD_ADDR_VAR 0 4
21170: PUSH
21171: LD_VAR 0 2
21175: PPUSH
21176: LD_INT 21
21178: PUSH
21179: LD_INT 3
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PPUSH
21186: CALL_OW 70
21190: ST_TO_ADDR
// if not tmp then
21191: LD_VAR 0 4
21195: NOT
21196: IFFALSE 21200
// exit ;
21198: GO 21258
// for i in tmp do
21200: LD_ADDR_VAR 0 5
21204: PUSH
21205: LD_VAR 0 4
21209: PUSH
21210: FOR_IN
21211: IFFALSE 21246
// if GetBase ( i ) <> base then
21213: LD_VAR 0 5
21217: PPUSH
21218: CALL_OW 274
21222: PUSH
21223: LD_VAR 0 1
21227: NONEQUAL
21228: IFFALSE 21244
// ComLinkToBase ( base , i ) ;
21230: LD_VAR 0 1
21234: PPUSH
21235: LD_VAR 0 5
21239: PPUSH
21240: CALL_OW 169
21244: GO 21210
21246: POP
21247: POP
// result := tmp ;
21248: LD_ADDR_VAR 0 3
21252: PUSH
21253: LD_VAR 0 4
21257: ST_TO_ADDR
// end ;
21258: LD_VAR 0 3
21262: RET
// export function ComComplete ( unit , b ) ; var i ; begin
21263: LD_INT 0
21265: PPUSH
21266: PPUSH
// if BuildingStatus ( b ) = bs_build then
21267: LD_VAR 0 2
21271: PPUSH
21272: CALL_OW 461
21276: PUSH
21277: LD_INT 1
21279: EQUAL
21280: IFFALSE 21340
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
21282: LD_VAR 0 1
21286: PPUSH
21287: LD_STRING h
21289: PUSH
21290: LD_VAR 0 2
21294: PPUSH
21295: CALL_OW 250
21299: PUSH
21300: LD_VAR 0 2
21304: PPUSH
21305: CALL_OW 251
21309: PUSH
21310: LD_VAR 0 2
21314: PUSH
21315: LD_INT 0
21317: PUSH
21318: LD_INT 0
21320: PUSH
21321: LD_INT 0
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: PUSH
21333: EMPTY
21334: LIST
21335: PPUSH
21336: CALL_OW 446
// end ;
21340: LD_VAR 0 3
21344: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
21345: LD_INT 0
21347: PPUSH
21348: PPUSH
21349: PPUSH
21350: PPUSH
21351: PPUSH
21352: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
21353: LD_VAR 0 1
21357: NOT
21358: PUSH
21359: LD_VAR 0 1
21363: PPUSH
21364: CALL_OW 263
21368: PUSH
21369: LD_INT 2
21371: EQUAL
21372: NOT
21373: OR
21374: IFFALSE 21378
// exit ;
21376: GO 21694
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
21378: LD_ADDR_VAR 0 6
21382: PUSH
21383: LD_INT 22
21385: PUSH
21386: LD_VAR 0 1
21390: PPUSH
21391: CALL_OW 255
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: PUSH
21400: LD_INT 2
21402: PUSH
21403: LD_INT 30
21405: PUSH
21406: LD_INT 36
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: PUSH
21413: LD_INT 34
21415: PUSH
21416: LD_INT 31
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: LIST
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PPUSH
21432: CALL_OW 69
21436: ST_TO_ADDR
// if not tmp then
21437: LD_VAR 0 6
21441: NOT
21442: IFFALSE 21446
// exit ;
21444: GO 21694
// result := [ ] ;
21446: LD_ADDR_VAR 0 2
21450: PUSH
21451: EMPTY
21452: ST_TO_ADDR
// for i in tmp do
21453: LD_ADDR_VAR 0 3
21457: PUSH
21458: LD_VAR 0 6
21462: PUSH
21463: FOR_IN
21464: IFFALSE 21535
// begin t := UnitsInside ( i ) ;
21466: LD_ADDR_VAR 0 4
21470: PUSH
21471: LD_VAR 0 3
21475: PPUSH
21476: CALL_OW 313
21480: ST_TO_ADDR
// if t then
21481: LD_VAR 0 4
21485: IFFALSE 21533
// for j in t do
21487: LD_ADDR_VAR 0 7
21491: PUSH
21492: LD_VAR 0 4
21496: PUSH
21497: FOR_IN
21498: IFFALSE 21531
// result := Insert ( result , result + 1 , j ) ;
21500: LD_ADDR_VAR 0 2
21504: PUSH
21505: LD_VAR 0 2
21509: PPUSH
21510: LD_VAR 0 2
21514: PUSH
21515: LD_INT 1
21517: PLUS
21518: PPUSH
21519: LD_VAR 0 7
21523: PPUSH
21524: CALL_OW 2
21528: ST_TO_ADDR
21529: GO 21497
21531: POP
21532: POP
// end ;
21533: GO 21463
21535: POP
21536: POP
// if not result then
21537: LD_VAR 0 2
21541: NOT
21542: IFFALSE 21546
// exit ;
21544: GO 21694
// mech := result [ 1 ] ;
21546: LD_ADDR_VAR 0 5
21550: PUSH
21551: LD_VAR 0 2
21555: PUSH
21556: LD_INT 1
21558: ARRAY
21559: ST_TO_ADDR
// if result > 1 then
21560: LD_VAR 0 2
21564: PUSH
21565: LD_INT 1
21567: GREATER
21568: IFFALSE 21680
// for i = 2 to result do
21570: LD_ADDR_VAR 0 3
21574: PUSH
21575: DOUBLE
21576: LD_INT 2
21578: DEC
21579: ST_TO_ADDR
21580: LD_VAR 0 2
21584: PUSH
21585: FOR_TO
21586: IFFALSE 21678
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
21588: LD_ADDR_VAR 0 4
21592: PUSH
21593: LD_VAR 0 2
21597: PUSH
21598: LD_VAR 0 3
21602: ARRAY
21603: PPUSH
21604: LD_INT 3
21606: PPUSH
21607: CALL_OW 259
21611: PUSH
21612: LD_VAR 0 2
21616: PUSH
21617: LD_VAR 0 3
21621: ARRAY
21622: PPUSH
21623: CALL_OW 432
21627: MINUS
21628: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
21629: LD_VAR 0 4
21633: PUSH
21634: LD_VAR 0 5
21638: PPUSH
21639: LD_INT 3
21641: PPUSH
21642: CALL_OW 259
21646: PUSH
21647: LD_VAR 0 5
21651: PPUSH
21652: CALL_OW 432
21656: MINUS
21657: GREATEREQUAL
21658: IFFALSE 21676
// mech := result [ i ] ;
21660: LD_ADDR_VAR 0 5
21664: PUSH
21665: LD_VAR 0 2
21669: PUSH
21670: LD_VAR 0 3
21674: ARRAY
21675: ST_TO_ADDR
// end ;
21676: GO 21585
21678: POP
21679: POP
// ComLinkTo ( vehicle , mech ) ;
21680: LD_VAR 0 1
21684: PPUSH
21685: LD_VAR 0 5
21689: PPUSH
21690: CALL_OW 135
// end ;
21694: LD_VAR 0 2
21698: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
21699: LD_INT 0
21701: PPUSH
21702: PPUSH
21703: PPUSH
21704: PPUSH
21705: PPUSH
21706: PPUSH
21707: PPUSH
21708: PPUSH
21709: PPUSH
21710: PPUSH
21711: PPUSH
21712: PPUSH
21713: PPUSH
// result := [ ] ;
21714: LD_ADDR_VAR 0 7
21718: PUSH
21719: EMPTY
21720: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
21721: LD_VAR 0 1
21725: PPUSH
21726: CALL_OW 266
21730: PUSH
21731: LD_INT 0
21733: PUSH
21734: LD_INT 1
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: IN
21741: NOT
21742: IFFALSE 21746
// exit ;
21744: GO 23377
// if name then
21746: LD_VAR 0 3
21750: IFFALSE 21766
// SetBName ( base_dep , name ) ;
21752: LD_VAR 0 1
21756: PPUSH
21757: LD_VAR 0 3
21761: PPUSH
21762: CALL_OW 500
// base := GetBase ( base_dep ) ;
21766: LD_ADDR_VAR 0 15
21770: PUSH
21771: LD_VAR 0 1
21775: PPUSH
21776: CALL_OW 274
21780: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
21781: LD_ADDR_VAR 0 16
21785: PUSH
21786: LD_VAR 0 1
21790: PPUSH
21791: CALL_OW 255
21795: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
21796: LD_ADDR_VAR 0 17
21800: PUSH
21801: LD_VAR 0 1
21805: PPUSH
21806: CALL_OW 248
21810: ST_TO_ADDR
// if sources then
21811: LD_VAR 0 5
21815: IFFALSE 21862
// for i = 1 to 3 do
21817: LD_ADDR_VAR 0 8
21821: PUSH
21822: DOUBLE
21823: LD_INT 1
21825: DEC
21826: ST_TO_ADDR
21827: LD_INT 3
21829: PUSH
21830: FOR_TO
21831: IFFALSE 21860
// AddResourceType ( base , i , sources [ i ] ) ;
21833: LD_VAR 0 15
21837: PPUSH
21838: LD_VAR 0 8
21842: PPUSH
21843: LD_VAR 0 5
21847: PUSH
21848: LD_VAR 0 8
21852: ARRAY
21853: PPUSH
21854: CALL_OW 276
21858: GO 21830
21860: POP
21861: POP
// buildings := GetBaseBuildings ( base , area ) ;
21862: LD_ADDR_VAR 0 18
21866: PUSH
21867: LD_VAR 0 15
21871: PPUSH
21872: LD_VAR 0 2
21876: PPUSH
21877: CALL 21154 0 2
21881: ST_TO_ADDR
// InitHc ;
21882: CALL_OW 19
// InitUc ;
21886: CALL_OW 18
// uc_side := side ;
21890: LD_ADDR_OWVAR 20
21894: PUSH
21895: LD_VAR 0 16
21899: ST_TO_ADDR
// uc_nation := nation ;
21900: LD_ADDR_OWVAR 21
21904: PUSH
21905: LD_VAR 0 17
21909: ST_TO_ADDR
// if buildings then
21910: LD_VAR 0 18
21914: IFFALSE 23236
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
21916: LD_ADDR_VAR 0 19
21920: PUSH
21921: LD_VAR 0 18
21925: PPUSH
21926: LD_INT 2
21928: PUSH
21929: LD_INT 30
21931: PUSH
21932: LD_INT 29
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: LD_INT 30
21941: PUSH
21942: LD_INT 30
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: LIST
21953: PPUSH
21954: CALL_OW 72
21958: ST_TO_ADDR
// if tmp then
21959: LD_VAR 0 19
21963: IFFALSE 22011
// for i in tmp do
21965: LD_ADDR_VAR 0 8
21969: PUSH
21970: LD_VAR 0 19
21974: PUSH
21975: FOR_IN
21976: IFFALSE 22009
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
21978: LD_VAR 0 8
21982: PPUSH
21983: CALL_OW 250
21987: PPUSH
21988: LD_VAR 0 8
21992: PPUSH
21993: CALL_OW 251
21997: PPUSH
21998: LD_VAR 0 16
22002: PPUSH
22003: CALL_OW 441
22007: GO 21975
22009: POP
22010: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
22011: LD_VAR 0 18
22015: PPUSH
22016: LD_INT 2
22018: PUSH
22019: LD_INT 30
22021: PUSH
22022: LD_INT 32
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 30
22031: PUSH
22032: LD_INT 33
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: LIST
22043: PPUSH
22044: CALL_OW 72
22048: IFFALSE 22136
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
22050: LD_ADDR_VAR 0 8
22054: PUSH
22055: LD_VAR 0 18
22059: PPUSH
22060: LD_INT 2
22062: PUSH
22063: LD_INT 30
22065: PUSH
22066: LD_INT 32
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 30
22075: PUSH
22076: LD_INT 33
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: LIST
22087: PPUSH
22088: CALL_OW 72
22092: PUSH
22093: FOR_IN
22094: IFFALSE 22134
// begin if not GetBWeapon ( i ) then
22096: LD_VAR 0 8
22100: PPUSH
22101: CALL_OW 269
22105: NOT
22106: IFFALSE 22132
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
22108: LD_VAR 0 8
22112: PPUSH
22113: LD_VAR 0 8
22117: PPUSH
22118: LD_VAR 0 2
22122: PPUSH
22123: CALL 23382 0 2
22127: PPUSH
22128: CALL_OW 431
// end ;
22132: GO 22093
22134: POP
22135: POP
// end ; for i = 1 to personel do
22136: LD_ADDR_VAR 0 8
22140: PUSH
22141: DOUBLE
22142: LD_INT 1
22144: DEC
22145: ST_TO_ADDR
22146: LD_VAR 0 6
22150: PUSH
22151: FOR_TO
22152: IFFALSE 23216
// begin if i > 4 then
22154: LD_VAR 0 8
22158: PUSH
22159: LD_INT 4
22161: GREATER
22162: IFFALSE 22166
// break ;
22164: GO 23216
// case i of 1 :
22166: LD_VAR 0 8
22170: PUSH
22171: LD_INT 1
22173: DOUBLE
22174: EQUAL
22175: IFTRUE 22179
22177: GO 22259
22179: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
22180: LD_ADDR_VAR 0 12
22184: PUSH
22185: LD_VAR 0 18
22189: PPUSH
22190: LD_INT 22
22192: PUSH
22193: LD_VAR 0 16
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 58
22204: PUSH
22205: EMPTY
22206: LIST
22207: PUSH
22208: LD_INT 2
22210: PUSH
22211: LD_INT 30
22213: PUSH
22214: LD_INT 32
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 30
22223: PUSH
22224: LD_INT 4
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 30
22233: PUSH
22234: LD_INT 5
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: PUSH
22247: EMPTY
22248: LIST
22249: LIST
22250: LIST
22251: PPUSH
22252: CALL_OW 72
22256: ST_TO_ADDR
22257: GO 22481
22259: LD_INT 2
22261: DOUBLE
22262: EQUAL
22263: IFTRUE 22267
22265: GO 22329
22267: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
22268: LD_ADDR_VAR 0 12
22272: PUSH
22273: LD_VAR 0 18
22277: PPUSH
22278: LD_INT 22
22280: PUSH
22281: LD_VAR 0 16
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 2
22292: PUSH
22293: LD_INT 30
22295: PUSH
22296: LD_INT 0
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 30
22305: PUSH
22306: LD_INT 1
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: LIST
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PPUSH
22322: CALL_OW 72
22326: ST_TO_ADDR
22327: GO 22481
22329: LD_INT 3
22331: DOUBLE
22332: EQUAL
22333: IFTRUE 22337
22335: GO 22399
22337: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
22338: LD_ADDR_VAR 0 12
22342: PUSH
22343: LD_VAR 0 18
22347: PPUSH
22348: LD_INT 22
22350: PUSH
22351: LD_VAR 0 16
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 2
22362: PUSH
22363: LD_INT 30
22365: PUSH
22366: LD_INT 2
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 30
22375: PUSH
22376: LD_INT 3
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: LIST
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PPUSH
22392: CALL_OW 72
22396: ST_TO_ADDR
22397: GO 22481
22399: LD_INT 4
22401: DOUBLE
22402: EQUAL
22403: IFTRUE 22407
22405: GO 22480
22407: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
22408: LD_ADDR_VAR 0 12
22412: PUSH
22413: LD_VAR 0 18
22417: PPUSH
22418: LD_INT 22
22420: PUSH
22421: LD_VAR 0 16
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PUSH
22430: LD_INT 2
22432: PUSH
22433: LD_INT 30
22435: PUSH
22436: LD_INT 6
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PUSH
22443: LD_INT 30
22445: PUSH
22446: LD_INT 7
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 30
22455: PUSH
22456: LD_INT 8
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PPUSH
22473: CALL_OW 72
22477: ST_TO_ADDR
22478: GO 22481
22480: POP
// if i = 1 then
22481: LD_VAR 0 8
22485: PUSH
22486: LD_INT 1
22488: EQUAL
22489: IFFALSE 22600
// begin tmp := [ ] ;
22491: LD_ADDR_VAR 0 19
22495: PUSH
22496: EMPTY
22497: ST_TO_ADDR
// for j in f do
22498: LD_ADDR_VAR 0 9
22502: PUSH
22503: LD_VAR 0 12
22507: PUSH
22508: FOR_IN
22509: IFFALSE 22582
// if GetBType ( j ) = b_bunker then
22511: LD_VAR 0 9
22515: PPUSH
22516: CALL_OW 266
22520: PUSH
22521: LD_INT 32
22523: EQUAL
22524: IFFALSE 22551
// tmp := Insert ( tmp , 1 , j ) else
22526: LD_ADDR_VAR 0 19
22530: PUSH
22531: LD_VAR 0 19
22535: PPUSH
22536: LD_INT 1
22538: PPUSH
22539: LD_VAR 0 9
22543: PPUSH
22544: CALL_OW 2
22548: ST_TO_ADDR
22549: GO 22580
// tmp := Insert ( tmp , tmp + 1 , j ) ;
22551: LD_ADDR_VAR 0 19
22555: PUSH
22556: LD_VAR 0 19
22560: PPUSH
22561: LD_VAR 0 19
22565: PUSH
22566: LD_INT 1
22568: PLUS
22569: PPUSH
22570: LD_VAR 0 9
22574: PPUSH
22575: CALL_OW 2
22579: ST_TO_ADDR
22580: GO 22508
22582: POP
22583: POP
// if tmp then
22584: LD_VAR 0 19
22588: IFFALSE 22600
// f := tmp ;
22590: LD_ADDR_VAR 0 12
22594: PUSH
22595: LD_VAR 0 19
22599: ST_TO_ADDR
// end ; x := personel [ i ] ;
22600: LD_ADDR_VAR 0 13
22604: PUSH
22605: LD_VAR 0 6
22609: PUSH
22610: LD_VAR 0 8
22614: ARRAY
22615: ST_TO_ADDR
// if x = - 1 then
22616: LD_VAR 0 13
22620: PUSH
22621: LD_INT 1
22623: NEG
22624: EQUAL
22625: IFFALSE 22834
// begin for j in f do
22627: LD_ADDR_VAR 0 9
22631: PUSH
22632: LD_VAR 0 12
22636: PUSH
22637: FOR_IN
22638: IFFALSE 22830
// repeat InitHc ;
22640: CALL_OW 19
// if GetBType ( j ) = b_barracks then
22644: LD_VAR 0 9
22648: PPUSH
22649: CALL_OW 266
22653: PUSH
22654: LD_INT 5
22656: EQUAL
22657: IFFALSE 22727
// begin if UnitsInside ( j ) < 3 then
22659: LD_VAR 0 9
22663: PPUSH
22664: CALL_OW 313
22668: PUSH
22669: LD_INT 3
22671: LESS
22672: IFFALSE 22708
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22674: LD_INT 0
22676: PPUSH
22677: LD_INT 5
22679: PUSH
22680: LD_INT 8
22682: PUSH
22683: LD_INT 9
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: LIST
22690: PUSH
22691: LD_VAR 0 17
22695: ARRAY
22696: PPUSH
22697: LD_VAR 0 4
22701: PPUSH
22702: CALL_OW 380
22706: GO 22725
// PrepareHuman ( false , i , skill ) ;
22708: LD_INT 0
22710: PPUSH
22711: LD_VAR 0 8
22715: PPUSH
22716: LD_VAR 0 4
22720: PPUSH
22721: CALL_OW 380
// end else
22725: GO 22744
// PrepareHuman ( false , i , skill ) ;
22727: LD_INT 0
22729: PPUSH
22730: LD_VAR 0 8
22734: PPUSH
22735: LD_VAR 0 4
22739: PPUSH
22740: CALL_OW 380
// un := CreateHuman ;
22744: LD_ADDR_VAR 0 14
22748: PUSH
22749: CALL_OW 44
22753: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22754: LD_ADDR_VAR 0 7
22758: PUSH
22759: LD_VAR 0 7
22763: PPUSH
22764: LD_INT 1
22766: PPUSH
22767: LD_VAR 0 14
22771: PPUSH
22772: CALL_OW 2
22776: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
22777: LD_VAR 0 14
22781: PPUSH
22782: LD_VAR 0 9
22786: PPUSH
22787: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
22791: LD_VAR 0 9
22795: PPUSH
22796: CALL_OW 313
22800: PUSH
22801: LD_INT 6
22803: EQUAL
22804: PUSH
22805: LD_VAR 0 9
22809: PPUSH
22810: CALL_OW 266
22814: PUSH
22815: LD_INT 32
22817: PUSH
22818: LD_INT 31
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: IN
22825: OR
22826: IFFALSE 22640
22828: GO 22637
22830: POP
22831: POP
// end else
22832: GO 23214
// for j = 1 to x do
22834: LD_ADDR_VAR 0 9
22838: PUSH
22839: DOUBLE
22840: LD_INT 1
22842: DEC
22843: ST_TO_ADDR
22844: LD_VAR 0 13
22848: PUSH
22849: FOR_TO
22850: IFFALSE 23212
// begin InitHc ;
22852: CALL_OW 19
// if not f then
22856: LD_VAR 0 12
22860: NOT
22861: IFFALSE 22950
// begin PrepareHuman ( false , i , skill ) ;
22863: LD_INT 0
22865: PPUSH
22866: LD_VAR 0 8
22870: PPUSH
22871: LD_VAR 0 4
22875: PPUSH
22876: CALL_OW 380
// un := CreateHuman ;
22880: LD_ADDR_VAR 0 14
22884: PUSH
22885: CALL_OW 44
22889: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22890: LD_ADDR_VAR 0 7
22894: PUSH
22895: LD_VAR 0 7
22899: PPUSH
22900: LD_INT 1
22902: PPUSH
22903: LD_VAR 0 14
22907: PPUSH
22908: CALL_OW 2
22912: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22913: LD_VAR 0 14
22917: PPUSH
22918: LD_VAR 0 1
22922: PPUSH
22923: CALL_OW 250
22927: PPUSH
22928: LD_VAR 0 1
22932: PPUSH
22933: CALL_OW 251
22937: PPUSH
22938: LD_INT 10
22940: PPUSH
22941: LD_INT 0
22943: PPUSH
22944: CALL_OW 50
// continue ;
22948: GO 22849
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
22950: LD_VAR 0 12
22954: PUSH
22955: LD_INT 1
22957: ARRAY
22958: PPUSH
22959: CALL_OW 313
22963: PUSH
22964: LD_VAR 0 12
22968: PUSH
22969: LD_INT 1
22971: ARRAY
22972: PPUSH
22973: CALL_OW 266
22977: PUSH
22978: LD_INT 32
22980: PUSH
22981: LD_INT 31
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: IN
22988: AND
22989: PUSH
22990: LD_VAR 0 12
22994: PUSH
22995: LD_INT 1
22997: ARRAY
22998: PPUSH
22999: CALL_OW 313
23003: PUSH
23004: LD_INT 6
23006: EQUAL
23007: OR
23008: IFFALSE 23028
// f := Delete ( f , 1 ) ;
23010: LD_ADDR_VAR 0 12
23014: PUSH
23015: LD_VAR 0 12
23019: PPUSH
23020: LD_INT 1
23022: PPUSH
23023: CALL_OW 3
23027: ST_TO_ADDR
// if not f then
23028: LD_VAR 0 12
23032: NOT
23033: IFFALSE 23051
// begin x := x + 2 ;
23035: LD_ADDR_VAR 0 13
23039: PUSH
23040: LD_VAR 0 13
23044: PUSH
23045: LD_INT 2
23047: PLUS
23048: ST_TO_ADDR
// continue ;
23049: GO 22849
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
23051: LD_VAR 0 12
23055: PUSH
23056: LD_INT 1
23058: ARRAY
23059: PPUSH
23060: CALL_OW 266
23064: PUSH
23065: LD_INT 5
23067: EQUAL
23068: IFFALSE 23142
// begin if UnitsInside ( f [ 1 ] ) < 3 then
23070: LD_VAR 0 12
23074: PUSH
23075: LD_INT 1
23077: ARRAY
23078: PPUSH
23079: CALL_OW 313
23083: PUSH
23084: LD_INT 3
23086: LESS
23087: IFFALSE 23123
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23089: LD_INT 0
23091: PPUSH
23092: LD_INT 5
23094: PUSH
23095: LD_INT 8
23097: PUSH
23098: LD_INT 9
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: LIST
23105: PUSH
23106: LD_VAR 0 17
23110: ARRAY
23111: PPUSH
23112: LD_VAR 0 4
23116: PPUSH
23117: CALL_OW 380
23121: GO 23140
// PrepareHuman ( false , i , skill ) ;
23123: LD_INT 0
23125: PPUSH
23126: LD_VAR 0 8
23130: PPUSH
23131: LD_VAR 0 4
23135: PPUSH
23136: CALL_OW 380
// end else
23140: GO 23159
// PrepareHuman ( false , i , skill ) ;
23142: LD_INT 0
23144: PPUSH
23145: LD_VAR 0 8
23149: PPUSH
23150: LD_VAR 0 4
23154: PPUSH
23155: CALL_OW 380
// un := CreateHuman ;
23159: LD_ADDR_VAR 0 14
23163: PUSH
23164: CALL_OW 44
23168: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23169: LD_ADDR_VAR 0 7
23173: PUSH
23174: LD_VAR 0 7
23178: PPUSH
23179: LD_INT 1
23181: PPUSH
23182: LD_VAR 0 14
23186: PPUSH
23187: CALL_OW 2
23191: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
23192: LD_VAR 0 14
23196: PPUSH
23197: LD_VAR 0 12
23201: PUSH
23202: LD_INT 1
23204: ARRAY
23205: PPUSH
23206: CALL_OW 52
// end ;
23210: GO 22849
23212: POP
23213: POP
// end ;
23214: GO 22151
23216: POP
23217: POP
// result := result ^ buildings ;
23218: LD_ADDR_VAR 0 7
23222: PUSH
23223: LD_VAR 0 7
23227: PUSH
23228: LD_VAR 0 18
23232: ADD
23233: ST_TO_ADDR
// end else
23234: GO 23377
// begin for i = 1 to personel do
23236: LD_ADDR_VAR 0 8
23240: PUSH
23241: DOUBLE
23242: LD_INT 1
23244: DEC
23245: ST_TO_ADDR
23246: LD_VAR 0 6
23250: PUSH
23251: FOR_TO
23252: IFFALSE 23375
// begin if i > 4 then
23254: LD_VAR 0 8
23258: PUSH
23259: LD_INT 4
23261: GREATER
23262: IFFALSE 23266
// break ;
23264: GO 23375
// x := personel [ i ] ;
23266: LD_ADDR_VAR 0 13
23270: PUSH
23271: LD_VAR 0 6
23275: PUSH
23276: LD_VAR 0 8
23280: ARRAY
23281: ST_TO_ADDR
// if x = - 1 then
23282: LD_VAR 0 13
23286: PUSH
23287: LD_INT 1
23289: NEG
23290: EQUAL
23291: IFFALSE 23295
// continue ;
23293: GO 23251
// PrepareHuman ( false , i , skill ) ;
23295: LD_INT 0
23297: PPUSH
23298: LD_VAR 0 8
23302: PPUSH
23303: LD_VAR 0 4
23307: PPUSH
23308: CALL_OW 380
// un := CreateHuman ;
23312: LD_ADDR_VAR 0 14
23316: PUSH
23317: CALL_OW 44
23321: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23322: LD_VAR 0 14
23326: PPUSH
23327: LD_VAR 0 1
23331: PPUSH
23332: CALL_OW 250
23336: PPUSH
23337: LD_VAR 0 1
23341: PPUSH
23342: CALL_OW 251
23346: PPUSH
23347: LD_INT 10
23349: PPUSH
23350: LD_INT 0
23352: PPUSH
23353: CALL_OW 50
// result := result ^ un ;
23357: LD_ADDR_VAR 0 7
23361: PUSH
23362: LD_VAR 0 7
23366: PUSH
23367: LD_VAR 0 14
23371: ADD
23372: ST_TO_ADDR
// end ;
23373: GO 23251
23375: POP
23376: POP
// end ; end ;
23377: LD_VAR 0 7
23381: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
23382: LD_INT 0
23384: PPUSH
23385: PPUSH
23386: PPUSH
23387: PPUSH
23388: PPUSH
23389: PPUSH
23390: PPUSH
23391: PPUSH
23392: PPUSH
23393: PPUSH
23394: PPUSH
23395: PPUSH
23396: PPUSH
23397: PPUSH
23398: PPUSH
23399: PPUSH
// result := false ;
23400: LD_ADDR_VAR 0 3
23404: PUSH
23405: LD_INT 0
23407: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
23408: LD_VAR 0 1
23412: NOT
23413: PUSH
23414: LD_VAR 0 1
23418: PPUSH
23419: CALL_OW 266
23423: PUSH
23424: LD_INT 32
23426: PUSH
23427: LD_INT 33
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: IN
23434: NOT
23435: OR
23436: IFFALSE 23440
// exit ;
23438: GO 24576
// nat := GetNation ( tower ) ;
23440: LD_ADDR_VAR 0 12
23444: PUSH
23445: LD_VAR 0 1
23449: PPUSH
23450: CALL_OW 248
23454: ST_TO_ADDR
// side := GetSide ( tower ) ;
23455: LD_ADDR_VAR 0 16
23459: PUSH
23460: LD_VAR 0 1
23464: PPUSH
23465: CALL_OW 255
23469: ST_TO_ADDR
// x := GetX ( tower ) ;
23470: LD_ADDR_VAR 0 10
23474: PUSH
23475: LD_VAR 0 1
23479: PPUSH
23480: CALL_OW 250
23484: ST_TO_ADDR
// y := GetY ( tower ) ;
23485: LD_ADDR_VAR 0 11
23489: PUSH
23490: LD_VAR 0 1
23494: PPUSH
23495: CALL_OW 251
23499: ST_TO_ADDR
// if not x or not y then
23500: LD_VAR 0 10
23504: NOT
23505: PUSH
23506: LD_VAR 0 11
23510: NOT
23511: OR
23512: IFFALSE 23516
// exit ;
23514: GO 24576
// weapon := 0 ;
23516: LD_ADDR_VAR 0 18
23520: PUSH
23521: LD_INT 0
23523: ST_TO_ADDR
// fac_list := [ ] ;
23524: LD_ADDR_VAR 0 17
23528: PUSH
23529: EMPTY
23530: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
23531: LD_ADDR_VAR 0 6
23535: PUSH
23536: LD_VAR 0 1
23540: PPUSH
23541: CALL_OW 274
23545: PPUSH
23546: LD_VAR 0 2
23550: PPUSH
23551: CALL 21154 0 2
23555: PPUSH
23556: LD_INT 30
23558: PUSH
23559: LD_INT 3
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PPUSH
23566: CALL_OW 72
23570: ST_TO_ADDR
// if not factories then
23571: LD_VAR 0 6
23575: NOT
23576: IFFALSE 23580
// exit ;
23578: GO 24576
// for i in factories do
23580: LD_ADDR_VAR 0 8
23584: PUSH
23585: LD_VAR 0 6
23589: PUSH
23590: FOR_IN
23591: IFFALSE 23616
// fac_list := fac_list union AvailableWeaponList ( i ) ;
23593: LD_ADDR_VAR 0 17
23597: PUSH
23598: LD_VAR 0 17
23602: PUSH
23603: LD_VAR 0 8
23607: PPUSH
23608: CALL_OW 478
23612: UNION
23613: ST_TO_ADDR
23614: GO 23590
23616: POP
23617: POP
// if not fac_list then
23618: LD_VAR 0 17
23622: NOT
23623: IFFALSE 23627
// exit ;
23625: GO 24576
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
23627: LD_ADDR_VAR 0 5
23631: PUSH
23632: LD_INT 4
23634: PUSH
23635: LD_INT 5
23637: PUSH
23638: LD_INT 9
23640: PUSH
23641: LD_INT 10
23643: PUSH
23644: LD_INT 6
23646: PUSH
23647: LD_INT 7
23649: PUSH
23650: LD_INT 11
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: PUSH
23662: LD_INT 27
23664: PUSH
23665: LD_INT 28
23667: PUSH
23668: LD_INT 26
23670: PUSH
23671: LD_INT 30
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: PUSH
23680: LD_INT 43
23682: PUSH
23683: LD_INT 44
23685: PUSH
23686: LD_INT 46
23688: PUSH
23689: LD_INT 45
23691: PUSH
23692: LD_INT 47
23694: PUSH
23695: LD_INT 49
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: LIST
23710: PUSH
23711: LD_VAR 0 12
23715: ARRAY
23716: ST_TO_ADDR
// for i in list do
23717: LD_ADDR_VAR 0 8
23721: PUSH
23722: LD_VAR 0 5
23726: PUSH
23727: FOR_IN
23728: IFFALSE 23761
// if not i in fac_list then
23730: LD_VAR 0 8
23734: PUSH
23735: LD_VAR 0 17
23739: IN
23740: NOT
23741: IFFALSE 23759
// list := list diff i ;
23743: LD_ADDR_VAR 0 5
23747: PUSH
23748: LD_VAR 0 5
23752: PUSH
23753: LD_VAR 0 8
23757: DIFF
23758: ST_TO_ADDR
23759: GO 23727
23761: POP
23762: POP
// if not list then
23763: LD_VAR 0 5
23767: NOT
23768: IFFALSE 23772
// exit ;
23770: GO 24576
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
23772: LD_VAR 0 12
23776: PUSH
23777: LD_INT 3
23779: EQUAL
23780: PUSH
23781: LD_INT 49
23783: PUSH
23784: LD_VAR 0 5
23788: IN
23789: AND
23790: PUSH
23791: LD_INT 31
23793: PPUSH
23794: LD_VAR 0 16
23798: PPUSH
23799: CALL_OW 321
23803: PUSH
23804: LD_INT 2
23806: EQUAL
23807: AND
23808: IFFALSE 23868
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
23810: LD_INT 22
23812: PUSH
23813: LD_VAR 0 16
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 35
23824: PUSH
23825: LD_INT 49
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 91
23834: PUSH
23835: LD_VAR 0 1
23839: PUSH
23840: LD_INT 10
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: LIST
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: LIST
23852: PPUSH
23853: CALL_OW 69
23857: NOT
23858: IFFALSE 23868
// weapon := ru_time_lapser ;
23860: LD_ADDR_VAR 0 18
23864: PUSH
23865: LD_INT 49
23867: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
23868: LD_VAR 0 12
23872: PUSH
23873: LD_INT 1
23875: PUSH
23876: LD_INT 2
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: IN
23883: PUSH
23884: LD_INT 11
23886: PUSH
23887: LD_VAR 0 5
23891: IN
23892: PUSH
23893: LD_INT 30
23895: PUSH
23896: LD_VAR 0 5
23900: IN
23901: OR
23902: AND
23903: PUSH
23904: LD_INT 6
23906: PPUSH
23907: LD_VAR 0 16
23911: PPUSH
23912: CALL_OW 321
23916: PUSH
23917: LD_INT 2
23919: EQUAL
23920: AND
23921: IFFALSE 24086
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
23923: LD_INT 22
23925: PUSH
23926: LD_VAR 0 16
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 2
23937: PUSH
23938: LD_INT 35
23940: PUSH
23941: LD_INT 11
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 35
23950: PUSH
23951: LD_INT 30
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: LIST
23962: PUSH
23963: LD_INT 91
23965: PUSH
23966: LD_VAR 0 1
23970: PUSH
23971: LD_INT 18
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: LIST
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: LIST
23983: PPUSH
23984: CALL_OW 69
23988: NOT
23989: PUSH
23990: LD_INT 22
23992: PUSH
23993: LD_VAR 0 16
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 2
24004: PUSH
24005: LD_INT 30
24007: PUSH
24008: LD_INT 32
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 30
24017: PUSH
24018: LD_INT 33
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 91
24032: PUSH
24033: LD_VAR 0 1
24037: PUSH
24038: LD_INT 12
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: LIST
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: LIST
24050: PUSH
24051: EMPTY
24052: LIST
24053: PPUSH
24054: CALL_OW 69
24058: PUSH
24059: LD_INT 2
24061: GREATER
24062: AND
24063: IFFALSE 24086
// weapon := [ us_radar , ar_radar ] [ nat ] ;
24065: LD_ADDR_VAR 0 18
24069: PUSH
24070: LD_INT 11
24072: PUSH
24073: LD_INT 30
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_VAR 0 12
24084: ARRAY
24085: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
24086: LD_VAR 0 18
24090: NOT
24091: PUSH
24092: LD_INT 40
24094: PPUSH
24095: LD_VAR 0 16
24099: PPUSH
24100: CALL_OW 321
24104: PUSH
24105: LD_INT 2
24107: EQUAL
24108: AND
24109: PUSH
24110: LD_INT 7
24112: PUSH
24113: LD_VAR 0 5
24117: IN
24118: PUSH
24119: LD_INT 28
24121: PUSH
24122: LD_VAR 0 5
24126: IN
24127: OR
24128: PUSH
24129: LD_INT 45
24131: PUSH
24132: LD_VAR 0 5
24136: IN
24137: OR
24138: AND
24139: IFFALSE 24393
// begin hex := GetHexInfo ( x , y ) ;
24141: LD_ADDR_VAR 0 4
24145: PUSH
24146: LD_VAR 0 10
24150: PPUSH
24151: LD_VAR 0 11
24155: PPUSH
24156: CALL_OW 546
24160: ST_TO_ADDR
// if hex [ 1 ] then
24161: LD_VAR 0 4
24165: PUSH
24166: LD_INT 1
24168: ARRAY
24169: IFFALSE 24173
// exit ;
24171: GO 24576
// height := hex [ 2 ] ;
24173: LD_ADDR_VAR 0 15
24177: PUSH
24178: LD_VAR 0 4
24182: PUSH
24183: LD_INT 2
24185: ARRAY
24186: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
24187: LD_ADDR_VAR 0 14
24191: PUSH
24192: LD_INT 0
24194: PUSH
24195: LD_INT 2
24197: PUSH
24198: LD_INT 3
24200: PUSH
24201: LD_INT 5
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: ST_TO_ADDR
// for i in tmp do
24210: LD_ADDR_VAR 0 8
24214: PUSH
24215: LD_VAR 0 14
24219: PUSH
24220: FOR_IN
24221: IFFALSE 24391
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
24223: LD_ADDR_VAR 0 9
24227: PUSH
24228: LD_VAR 0 10
24232: PPUSH
24233: LD_VAR 0 8
24237: PPUSH
24238: LD_INT 5
24240: PPUSH
24241: CALL_OW 272
24245: PUSH
24246: LD_VAR 0 11
24250: PPUSH
24251: LD_VAR 0 8
24255: PPUSH
24256: LD_INT 5
24258: PPUSH
24259: CALL_OW 273
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
24268: LD_VAR 0 9
24272: PUSH
24273: LD_INT 1
24275: ARRAY
24276: PPUSH
24277: LD_VAR 0 9
24281: PUSH
24282: LD_INT 2
24284: ARRAY
24285: PPUSH
24286: CALL_OW 488
24290: IFFALSE 24389
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
24292: LD_ADDR_VAR 0 4
24296: PUSH
24297: LD_VAR 0 9
24301: PUSH
24302: LD_INT 1
24304: ARRAY
24305: PPUSH
24306: LD_VAR 0 9
24310: PUSH
24311: LD_INT 2
24313: ARRAY
24314: PPUSH
24315: CALL_OW 546
24319: ST_TO_ADDR
// if hex [ 1 ] then
24320: LD_VAR 0 4
24324: PUSH
24325: LD_INT 1
24327: ARRAY
24328: IFFALSE 24332
// continue ;
24330: GO 24220
// h := hex [ 2 ] ;
24332: LD_ADDR_VAR 0 13
24336: PUSH
24337: LD_VAR 0 4
24341: PUSH
24342: LD_INT 2
24344: ARRAY
24345: ST_TO_ADDR
// if h + 7 < height then
24346: LD_VAR 0 13
24350: PUSH
24351: LD_INT 7
24353: PLUS
24354: PUSH
24355: LD_VAR 0 15
24359: LESS
24360: IFFALSE 24389
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
24362: LD_ADDR_VAR 0 18
24366: PUSH
24367: LD_INT 7
24369: PUSH
24370: LD_INT 28
24372: PUSH
24373: LD_INT 45
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: LIST
24380: PUSH
24381: LD_VAR 0 12
24385: ARRAY
24386: ST_TO_ADDR
// break ;
24387: GO 24391
// end ; end ; end ;
24389: GO 24220
24391: POP
24392: POP
// end ; if not weapon then
24393: LD_VAR 0 18
24397: NOT
24398: IFFALSE 24458
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
24400: LD_ADDR_VAR 0 5
24404: PUSH
24405: LD_VAR 0 5
24409: PUSH
24410: LD_INT 11
24412: PUSH
24413: LD_INT 30
24415: PUSH
24416: LD_INT 49
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: LIST
24423: DIFF
24424: ST_TO_ADDR
// if not list then
24425: LD_VAR 0 5
24429: NOT
24430: IFFALSE 24434
// exit ;
24432: GO 24576
// weapon := list [ rand ( 1 , list ) ] ;
24434: LD_ADDR_VAR 0 18
24438: PUSH
24439: LD_VAR 0 5
24443: PUSH
24444: LD_INT 1
24446: PPUSH
24447: LD_VAR 0 5
24451: PPUSH
24452: CALL_OW 12
24456: ARRAY
24457: ST_TO_ADDR
// end ; if weapon then
24458: LD_VAR 0 18
24462: IFFALSE 24576
// begin tmp := CostOfWeapon ( weapon ) ;
24464: LD_ADDR_VAR 0 14
24468: PUSH
24469: LD_VAR 0 18
24473: PPUSH
24474: CALL_OW 451
24478: ST_TO_ADDR
// j := GetBase ( tower ) ;
24479: LD_ADDR_VAR 0 9
24483: PUSH
24484: LD_VAR 0 1
24488: PPUSH
24489: CALL_OW 274
24493: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
24494: LD_VAR 0 9
24498: PPUSH
24499: LD_INT 1
24501: PPUSH
24502: CALL_OW 275
24506: PUSH
24507: LD_VAR 0 14
24511: PUSH
24512: LD_INT 1
24514: ARRAY
24515: GREATEREQUAL
24516: PUSH
24517: LD_VAR 0 9
24521: PPUSH
24522: LD_INT 2
24524: PPUSH
24525: CALL_OW 275
24529: PUSH
24530: LD_VAR 0 14
24534: PUSH
24535: LD_INT 2
24537: ARRAY
24538: GREATEREQUAL
24539: AND
24540: PUSH
24541: LD_VAR 0 9
24545: PPUSH
24546: LD_INT 3
24548: PPUSH
24549: CALL_OW 275
24553: PUSH
24554: LD_VAR 0 14
24558: PUSH
24559: LD_INT 3
24561: ARRAY
24562: GREATEREQUAL
24563: AND
24564: IFFALSE 24576
// result := weapon ;
24566: LD_ADDR_VAR 0 3
24570: PUSH
24571: LD_VAR 0 18
24575: ST_TO_ADDR
// end ; end ;
24576: LD_VAR 0 3
24580: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
24581: LD_INT 0
24583: PPUSH
24584: PPUSH
// result := true ;
24585: LD_ADDR_VAR 0 3
24589: PUSH
24590: LD_INT 1
24592: ST_TO_ADDR
// if array1 = array2 then
24593: LD_VAR 0 1
24597: PUSH
24598: LD_VAR 0 2
24602: EQUAL
24603: IFFALSE 24663
// begin for i = 1 to array1 do
24605: LD_ADDR_VAR 0 4
24609: PUSH
24610: DOUBLE
24611: LD_INT 1
24613: DEC
24614: ST_TO_ADDR
24615: LD_VAR 0 1
24619: PUSH
24620: FOR_TO
24621: IFFALSE 24659
// if array1 [ i ] <> array2 [ i ] then
24623: LD_VAR 0 1
24627: PUSH
24628: LD_VAR 0 4
24632: ARRAY
24633: PUSH
24634: LD_VAR 0 2
24638: PUSH
24639: LD_VAR 0 4
24643: ARRAY
24644: NONEQUAL
24645: IFFALSE 24657
// begin result := false ;
24647: LD_ADDR_VAR 0 3
24651: PUSH
24652: LD_INT 0
24654: ST_TO_ADDR
// break ;
24655: GO 24659
// end ;
24657: GO 24620
24659: POP
24660: POP
// end else
24661: GO 24671
// result := false ;
24663: LD_ADDR_VAR 0 3
24667: PUSH
24668: LD_INT 0
24670: ST_TO_ADDR
// end ;
24671: LD_VAR 0 3
24675: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
24676: LD_INT 0
24678: PPUSH
24679: PPUSH
24680: PPUSH
// pom := GetBase ( fac ) ;
24681: LD_ADDR_VAR 0 5
24685: PUSH
24686: LD_VAR 0 1
24690: PPUSH
24691: CALL_OW 274
24695: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
24696: LD_ADDR_VAR 0 4
24700: PUSH
24701: LD_VAR 0 2
24705: PUSH
24706: LD_INT 1
24708: ARRAY
24709: PPUSH
24710: LD_VAR 0 2
24714: PUSH
24715: LD_INT 2
24717: ARRAY
24718: PPUSH
24719: LD_VAR 0 2
24723: PUSH
24724: LD_INT 3
24726: ARRAY
24727: PPUSH
24728: LD_VAR 0 2
24732: PUSH
24733: LD_INT 4
24735: ARRAY
24736: PPUSH
24737: CALL_OW 449
24741: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24742: LD_ADDR_VAR 0 3
24746: PUSH
24747: LD_VAR 0 5
24751: PPUSH
24752: LD_INT 1
24754: PPUSH
24755: CALL_OW 275
24759: PUSH
24760: LD_VAR 0 4
24764: PUSH
24765: LD_INT 1
24767: ARRAY
24768: GREATEREQUAL
24769: PUSH
24770: LD_VAR 0 5
24774: PPUSH
24775: LD_INT 2
24777: PPUSH
24778: CALL_OW 275
24782: PUSH
24783: LD_VAR 0 4
24787: PUSH
24788: LD_INT 2
24790: ARRAY
24791: GREATEREQUAL
24792: AND
24793: PUSH
24794: LD_VAR 0 5
24798: PPUSH
24799: LD_INT 3
24801: PPUSH
24802: CALL_OW 275
24806: PUSH
24807: LD_VAR 0 4
24811: PUSH
24812: LD_INT 3
24814: ARRAY
24815: GREATEREQUAL
24816: AND
24817: ST_TO_ADDR
// end ;
24818: LD_VAR 0 3
24822: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
24823: LD_INT 0
24825: PPUSH
24826: PPUSH
24827: PPUSH
24828: PPUSH
// pom := GetBase ( building ) ;
24829: LD_ADDR_VAR 0 3
24833: PUSH
24834: LD_VAR 0 1
24838: PPUSH
24839: CALL_OW 274
24843: ST_TO_ADDR
// if not pom then
24844: LD_VAR 0 3
24848: NOT
24849: IFFALSE 24853
// exit ;
24851: GO 25023
// btype := GetBType ( building ) ;
24853: LD_ADDR_VAR 0 5
24857: PUSH
24858: LD_VAR 0 1
24862: PPUSH
24863: CALL_OW 266
24867: ST_TO_ADDR
// if btype = b_armoury then
24868: LD_VAR 0 5
24872: PUSH
24873: LD_INT 4
24875: EQUAL
24876: IFFALSE 24886
// btype := b_barracks ;
24878: LD_ADDR_VAR 0 5
24882: PUSH
24883: LD_INT 5
24885: ST_TO_ADDR
// if btype = b_depot then
24886: LD_VAR 0 5
24890: PUSH
24891: LD_INT 0
24893: EQUAL
24894: IFFALSE 24904
// btype := b_warehouse ;
24896: LD_ADDR_VAR 0 5
24900: PUSH
24901: LD_INT 1
24903: ST_TO_ADDR
// if btype = b_workshop then
24904: LD_VAR 0 5
24908: PUSH
24909: LD_INT 2
24911: EQUAL
24912: IFFALSE 24922
// btype := b_factory ;
24914: LD_ADDR_VAR 0 5
24918: PUSH
24919: LD_INT 3
24921: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24922: LD_ADDR_VAR 0 4
24926: PUSH
24927: LD_VAR 0 5
24931: PPUSH
24932: LD_VAR 0 1
24936: PPUSH
24937: CALL_OW 248
24941: PPUSH
24942: CALL_OW 450
24946: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24947: LD_ADDR_VAR 0 2
24951: PUSH
24952: LD_VAR 0 3
24956: PPUSH
24957: LD_INT 1
24959: PPUSH
24960: CALL_OW 275
24964: PUSH
24965: LD_VAR 0 4
24969: PUSH
24970: LD_INT 1
24972: ARRAY
24973: GREATEREQUAL
24974: PUSH
24975: LD_VAR 0 3
24979: PPUSH
24980: LD_INT 2
24982: PPUSH
24983: CALL_OW 275
24987: PUSH
24988: LD_VAR 0 4
24992: PUSH
24993: LD_INT 2
24995: ARRAY
24996: GREATEREQUAL
24997: AND
24998: PUSH
24999: LD_VAR 0 3
25003: PPUSH
25004: LD_INT 3
25006: PPUSH
25007: CALL_OW 275
25011: PUSH
25012: LD_VAR 0 4
25016: PUSH
25017: LD_INT 3
25019: ARRAY
25020: GREATEREQUAL
25021: AND
25022: ST_TO_ADDR
// end ;
25023: LD_VAR 0 2
25027: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
25028: LD_INT 0
25030: PPUSH
25031: PPUSH
25032: PPUSH
// pom := GetBase ( building ) ;
25033: LD_ADDR_VAR 0 4
25037: PUSH
25038: LD_VAR 0 1
25042: PPUSH
25043: CALL_OW 274
25047: ST_TO_ADDR
// if not pom then
25048: LD_VAR 0 4
25052: NOT
25053: IFFALSE 25057
// exit ;
25055: GO 25158
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25057: LD_ADDR_VAR 0 5
25061: PUSH
25062: LD_VAR 0 2
25066: PPUSH
25067: LD_VAR 0 1
25071: PPUSH
25072: CALL_OW 248
25076: PPUSH
25077: CALL_OW 450
25081: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25082: LD_ADDR_VAR 0 3
25086: PUSH
25087: LD_VAR 0 4
25091: PPUSH
25092: LD_INT 1
25094: PPUSH
25095: CALL_OW 275
25099: PUSH
25100: LD_VAR 0 5
25104: PUSH
25105: LD_INT 1
25107: ARRAY
25108: GREATEREQUAL
25109: PUSH
25110: LD_VAR 0 4
25114: PPUSH
25115: LD_INT 2
25117: PPUSH
25118: CALL_OW 275
25122: PUSH
25123: LD_VAR 0 5
25127: PUSH
25128: LD_INT 2
25130: ARRAY
25131: GREATEREQUAL
25132: AND
25133: PUSH
25134: LD_VAR 0 4
25138: PPUSH
25139: LD_INT 3
25141: PPUSH
25142: CALL_OW 275
25146: PUSH
25147: LD_VAR 0 5
25151: PUSH
25152: LD_INT 3
25154: ARRAY
25155: GREATEREQUAL
25156: AND
25157: ST_TO_ADDR
// end ;
25158: LD_VAR 0 3
25162: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
25163: LD_INT 0
25165: PPUSH
25166: PPUSH
25167: PPUSH
25168: PPUSH
25169: PPUSH
25170: PPUSH
25171: PPUSH
25172: PPUSH
25173: PPUSH
25174: PPUSH
// result := false ;
25175: LD_ADDR_VAR 0 6
25179: PUSH
25180: LD_INT 0
25182: ST_TO_ADDR
// if not base or not btype or not x or not y then
25183: LD_VAR 0 1
25187: NOT
25188: PUSH
25189: LD_VAR 0 2
25193: NOT
25194: OR
25195: PUSH
25196: LD_VAR 0 3
25200: NOT
25201: OR
25202: PUSH
25203: LD_VAR 0 4
25207: NOT
25208: OR
25209: IFFALSE 25213
// exit ;
25211: GO 25822
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
25213: LD_ADDR_VAR 0 12
25217: PUSH
25218: LD_VAR 0 2
25222: PPUSH
25223: LD_VAR 0 3
25227: PPUSH
25228: LD_VAR 0 4
25232: PPUSH
25233: LD_VAR 0 5
25237: PPUSH
25238: LD_VAR 0 1
25242: PUSH
25243: LD_INT 1
25245: ARRAY
25246: PPUSH
25247: CALL_OW 248
25251: PPUSH
25252: LD_INT 0
25254: PPUSH
25255: CALL 26659 0 6
25259: ST_TO_ADDR
// if not hexes then
25260: LD_VAR 0 12
25264: NOT
25265: IFFALSE 25269
// exit ;
25267: GO 25822
// for i = 1 to hexes do
25269: LD_ADDR_VAR 0 7
25273: PUSH
25274: DOUBLE
25275: LD_INT 1
25277: DEC
25278: ST_TO_ADDR
25279: LD_VAR 0 12
25283: PUSH
25284: FOR_TO
25285: IFFALSE 25820
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25287: LD_ADDR_VAR 0 11
25291: PUSH
25292: LD_VAR 0 12
25296: PUSH
25297: LD_VAR 0 7
25301: ARRAY
25302: PUSH
25303: LD_INT 1
25305: ARRAY
25306: PPUSH
25307: LD_VAR 0 12
25311: PUSH
25312: LD_VAR 0 7
25316: ARRAY
25317: PUSH
25318: LD_INT 2
25320: ARRAY
25321: PPUSH
25322: CALL_OW 428
25326: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
25327: LD_VAR 0 12
25331: PUSH
25332: LD_VAR 0 7
25336: ARRAY
25337: PUSH
25338: LD_INT 1
25340: ARRAY
25341: PPUSH
25342: LD_VAR 0 12
25346: PUSH
25347: LD_VAR 0 7
25351: ARRAY
25352: PUSH
25353: LD_INT 2
25355: ARRAY
25356: PPUSH
25357: CALL_OW 351
25361: PUSH
25362: LD_VAR 0 12
25366: PUSH
25367: LD_VAR 0 7
25371: ARRAY
25372: PUSH
25373: LD_INT 1
25375: ARRAY
25376: PPUSH
25377: LD_VAR 0 12
25381: PUSH
25382: LD_VAR 0 7
25386: ARRAY
25387: PUSH
25388: LD_INT 2
25390: ARRAY
25391: PPUSH
25392: CALL_OW 488
25396: NOT
25397: OR
25398: PUSH
25399: LD_VAR 0 11
25403: PPUSH
25404: CALL_OW 247
25408: PUSH
25409: LD_INT 3
25411: EQUAL
25412: OR
25413: IFFALSE 25419
// exit ;
25415: POP
25416: POP
25417: GO 25822
// if not tmp or not tmp in base then
25419: LD_VAR 0 11
25423: NOT
25424: PUSH
25425: LD_VAR 0 11
25429: PUSH
25430: LD_VAR 0 1
25434: IN
25435: NOT
25436: OR
25437: IFFALSE 25441
// continue ;
25439: GO 25284
// result := true ;
25441: LD_ADDR_VAR 0 6
25445: PUSH
25446: LD_INT 1
25448: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25449: LD_ADDR_VAR 0 15
25453: PUSH
25454: LD_VAR 0 1
25458: PPUSH
25459: LD_INT 22
25461: PUSH
25462: LD_VAR 0 11
25466: PPUSH
25467: CALL_OW 255
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 2
25478: PUSH
25479: LD_INT 30
25481: PUSH
25482: LD_INT 0
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 30
25491: PUSH
25492: LD_INT 1
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: LIST
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PPUSH
25508: CALL_OW 72
25512: ST_TO_ADDR
// if dep then
25513: LD_VAR 0 15
25517: IFFALSE 25653
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
25519: LD_ADDR_VAR 0 14
25523: PUSH
25524: LD_VAR 0 15
25528: PUSH
25529: LD_INT 1
25531: ARRAY
25532: PPUSH
25533: CALL_OW 250
25537: PPUSH
25538: LD_VAR 0 15
25542: PUSH
25543: LD_INT 1
25545: ARRAY
25546: PPUSH
25547: CALL_OW 254
25551: PPUSH
25552: LD_INT 5
25554: PPUSH
25555: CALL_OW 272
25559: PUSH
25560: LD_VAR 0 15
25564: PUSH
25565: LD_INT 1
25567: ARRAY
25568: PPUSH
25569: CALL_OW 251
25573: PPUSH
25574: LD_VAR 0 15
25578: PUSH
25579: LD_INT 1
25581: ARRAY
25582: PPUSH
25583: CALL_OW 254
25587: PPUSH
25588: LD_INT 5
25590: PPUSH
25591: CALL_OW 273
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
25600: LD_VAR 0 14
25604: PUSH
25605: LD_INT 1
25607: ARRAY
25608: PPUSH
25609: LD_VAR 0 14
25613: PUSH
25614: LD_INT 2
25616: ARRAY
25617: PPUSH
25618: CALL_OW 488
25622: IFFALSE 25653
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
25624: LD_VAR 0 11
25628: PPUSH
25629: LD_VAR 0 14
25633: PUSH
25634: LD_INT 1
25636: ARRAY
25637: PPUSH
25638: LD_VAR 0 14
25642: PUSH
25643: LD_INT 2
25645: ARRAY
25646: PPUSH
25647: CALL_OW 111
// continue ;
25651: GO 25284
// end ; end ; r := GetDir ( tmp ) ;
25653: LD_ADDR_VAR 0 13
25657: PUSH
25658: LD_VAR 0 11
25662: PPUSH
25663: CALL_OW 254
25667: ST_TO_ADDR
// if r = 5 then
25668: LD_VAR 0 13
25672: PUSH
25673: LD_INT 5
25675: EQUAL
25676: IFFALSE 25686
// r := 0 ;
25678: LD_ADDR_VAR 0 13
25682: PUSH
25683: LD_INT 0
25685: ST_TO_ADDR
// for j = r to 5 do
25686: LD_ADDR_VAR 0 8
25690: PUSH
25691: DOUBLE
25692: LD_VAR 0 13
25696: DEC
25697: ST_TO_ADDR
25698: LD_INT 5
25700: PUSH
25701: FOR_TO
25702: IFFALSE 25816
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
25704: LD_ADDR_VAR 0 9
25708: PUSH
25709: LD_VAR 0 11
25713: PPUSH
25714: CALL_OW 250
25718: PPUSH
25719: LD_VAR 0 8
25723: PPUSH
25724: LD_INT 2
25726: PPUSH
25727: CALL_OW 272
25731: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
25732: LD_ADDR_VAR 0 10
25736: PUSH
25737: LD_VAR 0 11
25741: PPUSH
25742: CALL_OW 251
25746: PPUSH
25747: LD_VAR 0 8
25751: PPUSH
25752: LD_INT 2
25754: PPUSH
25755: CALL_OW 273
25759: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
25760: LD_VAR 0 9
25764: PPUSH
25765: LD_VAR 0 10
25769: PPUSH
25770: CALL_OW 488
25774: PUSH
25775: LD_VAR 0 9
25779: PPUSH
25780: LD_VAR 0 10
25784: PPUSH
25785: CALL_OW 428
25789: NOT
25790: AND
25791: IFFALSE 25814
// begin ComMoveXY ( tmp , _x , _y ) ;
25793: LD_VAR 0 11
25797: PPUSH
25798: LD_VAR 0 9
25802: PPUSH
25803: LD_VAR 0 10
25807: PPUSH
25808: CALL_OW 111
// break ;
25812: GO 25816
// end ; end ;
25814: GO 25701
25816: POP
25817: POP
// end ;
25818: GO 25284
25820: POP
25821: POP
// end ;
25822: LD_VAR 0 6
25826: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
25827: LD_INT 0
25829: PPUSH
25830: PPUSH
25831: PPUSH
25832: PPUSH
25833: PPUSH
25834: PPUSH
25835: PPUSH
25836: PPUSH
25837: PPUSH
25838: PPUSH
// result := false ;
25839: LD_ADDR_VAR 0 6
25843: PUSH
25844: LD_INT 0
25846: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25847: LD_VAR 0 1
25851: NOT
25852: PUSH
25853: LD_VAR 0 1
25857: PPUSH
25858: CALL_OW 266
25862: PUSH
25863: LD_INT 0
25865: PUSH
25866: LD_INT 1
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: IN
25873: NOT
25874: OR
25875: PUSH
25876: LD_VAR 0 2
25880: NOT
25881: OR
25882: PUSH
25883: LD_VAR 0 5
25887: PUSH
25888: LD_INT 0
25890: PUSH
25891: LD_INT 1
25893: PUSH
25894: LD_INT 2
25896: PUSH
25897: LD_INT 3
25899: PUSH
25900: LD_INT 4
25902: PUSH
25903: LD_INT 5
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: IN
25914: NOT
25915: OR
25916: PUSH
25917: LD_VAR 0 3
25921: PPUSH
25922: LD_VAR 0 4
25926: PPUSH
25927: CALL_OW 488
25931: NOT
25932: OR
25933: IFFALSE 25937
// exit ;
25935: GO 26654
// pom := GetBase ( depot ) ;
25937: LD_ADDR_VAR 0 10
25941: PUSH
25942: LD_VAR 0 1
25946: PPUSH
25947: CALL_OW 274
25951: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
25952: LD_ADDR_VAR 0 11
25956: PUSH
25957: LD_VAR 0 2
25961: PPUSH
25962: LD_VAR 0 1
25966: PPUSH
25967: CALL_OW 248
25971: PPUSH
25972: CALL_OW 450
25976: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
25977: LD_VAR 0 10
25981: PPUSH
25982: LD_INT 1
25984: PPUSH
25985: CALL_OW 275
25989: PUSH
25990: LD_VAR 0 11
25994: PUSH
25995: LD_INT 1
25997: ARRAY
25998: GREATEREQUAL
25999: PUSH
26000: LD_VAR 0 10
26004: PPUSH
26005: LD_INT 2
26007: PPUSH
26008: CALL_OW 275
26012: PUSH
26013: LD_VAR 0 11
26017: PUSH
26018: LD_INT 2
26020: ARRAY
26021: GREATEREQUAL
26022: AND
26023: PUSH
26024: LD_VAR 0 10
26028: PPUSH
26029: LD_INT 3
26031: PPUSH
26032: CALL_OW 275
26036: PUSH
26037: LD_VAR 0 11
26041: PUSH
26042: LD_INT 3
26044: ARRAY
26045: GREATEREQUAL
26046: AND
26047: NOT
26048: IFFALSE 26052
// exit ;
26050: GO 26654
// if GetBType ( depot ) = b_depot then
26052: LD_VAR 0 1
26056: PPUSH
26057: CALL_OW 266
26061: PUSH
26062: LD_INT 0
26064: EQUAL
26065: IFFALSE 26077
// dist := 28 else
26067: LD_ADDR_VAR 0 14
26071: PUSH
26072: LD_INT 28
26074: ST_TO_ADDR
26075: GO 26085
// dist := 36 ;
26077: LD_ADDR_VAR 0 14
26081: PUSH
26082: LD_INT 36
26084: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
26085: LD_VAR 0 1
26089: PPUSH
26090: LD_VAR 0 3
26094: PPUSH
26095: LD_VAR 0 4
26099: PPUSH
26100: CALL_OW 297
26104: PUSH
26105: LD_VAR 0 14
26109: GREATER
26110: IFFALSE 26114
// exit ;
26112: GO 26654
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
26114: LD_ADDR_VAR 0 12
26118: PUSH
26119: LD_VAR 0 2
26123: PPUSH
26124: LD_VAR 0 3
26128: PPUSH
26129: LD_VAR 0 4
26133: PPUSH
26134: LD_VAR 0 5
26138: PPUSH
26139: LD_VAR 0 1
26143: PPUSH
26144: CALL_OW 248
26148: PPUSH
26149: LD_INT 0
26151: PPUSH
26152: CALL 26659 0 6
26156: ST_TO_ADDR
// if not hexes then
26157: LD_VAR 0 12
26161: NOT
26162: IFFALSE 26166
// exit ;
26164: GO 26654
// hex := GetHexInfo ( x , y ) ;
26166: LD_ADDR_VAR 0 15
26170: PUSH
26171: LD_VAR 0 3
26175: PPUSH
26176: LD_VAR 0 4
26180: PPUSH
26181: CALL_OW 546
26185: ST_TO_ADDR
// if hex [ 1 ] then
26186: LD_VAR 0 15
26190: PUSH
26191: LD_INT 1
26193: ARRAY
26194: IFFALSE 26198
// exit ;
26196: GO 26654
// height := hex [ 2 ] ;
26198: LD_ADDR_VAR 0 13
26202: PUSH
26203: LD_VAR 0 15
26207: PUSH
26208: LD_INT 2
26210: ARRAY
26211: ST_TO_ADDR
// for i = 1 to hexes do
26212: LD_ADDR_VAR 0 7
26216: PUSH
26217: DOUBLE
26218: LD_INT 1
26220: DEC
26221: ST_TO_ADDR
26222: LD_VAR 0 12
26226: PUSH
26227: FOR_TO
26228: IFFALSE 26558
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
26230: LD_VAR 0 12
26234: PUSH
26235: LD_VAR 0 7
26239: ARRAY
26240: PUSH
26241: LD_INT 1
26243: ARRAY
26244: PPUSH
26245: LD_VAR 0 12
26249: PUSH
26250: LD_VAR 0 7
26254: ARRAY
26255: PUSH
26256: LD_INT 2
26258: ARRAY
26259: PPUSH
26260: CALL_OW 488
26264: NOT
26265: PUSH
26266: LD_VAR 0 12
26270: PUSH
26271: LD_VAR 0 7
26275: ARRAY
26276: PUSH
26277: LD_INT 1
26279: ARRAY
26280: PPUSH
26281: LD_VAR 0 12
26285: PUSH
26286: LD_VAR 0 7
26290: ARRAY
26291: PUSH
26292: LD_INT 2
26294: ARRAY
26295: PPUSH
26296: CALL_OW 428
26300: PUSH
26301: LD_INT 0
26303: GREATER
26304: OR
26305: PUSH
26306: LD_VAR 0 12
26310: PUSH
26311: LD_VAR 0 7
26315: ARRAY
26316: PUSH
26317: LD_INT 1
26319: ARRAY
26320: PPUSH
26321: LD_VAR 0 12
26325: PUSH
26326: LD_VAR 0 7
26330: ARRAY
26331: PUSH
26332: LD_INT 2
26334: ARRAY
26335: PPUSH
26336: CALL_OW 351
26340: OR
26341: IFFALSE 26347
// exit ;
26343: POP
26344: POP
26345: GO 26654
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26347: LD_ADDR_VAR 0 8
26351: PUSH
26352: LD_VAR 0 12
26356: PUSH
26357: LD_VAR 0 7
26361: ARRAY
26362: PUSH
26363: LD_INT 1
26365: ARRAY
26366: PPUSH
26367: LD_VAR 0 12
26371: PUSH
26372: LD_VAR 0 7
26376: ARRAY
26377: PUSH
26378: LD_INT 2
26380: ARRAY
26381: PPUSH
26382: CALL_OW 546
26386: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
26387: LD_VAR 0 8
26391: PUSH
26392: LD_INT 1
26394: ARRAY
26395: PUSH
26396: LD_VAR 0 8
26400: PUSH
26401: LD_INT 2
26403: ARRAY
26404: PUSH
26405: LD_VAR 0 13
26409: PUSH
26410: LD_INT 2
26412: PLUS
26413: GREATER
26414: OR
26415: PUSH
26416: LD_VAR 0 8
26420: PUSH
26421: LD_INT 2
26423: ARRAY
26424: PUSH
26425: LD_VAR 0 13
26429: PUSH
26430: LD_INT 2
26432: MINUS
26433: LESS
26434: OR
26435: PUSH
26436: LD_VAR 0 8
26440: PUSH
26441: LD_INT 3
26443: ARRAY
26444: PUSH
26445: LD_INT 0
26447: PUSH
26448: LD_INT 8
26450: PUSH
26451: LD_INT 9
26453: PUSH
26454: LD_INT 10
26456: PUSH
26457: LD_INT 11
26459: PUSH
26460: LD_INT 12
26462: PUSH
26463: LD_INT 13
26465: PUSH
26466: LD_INT 16
26468: PUSH
26469: LD_INT 17
26471: PUSH
26472: LD_INT 18
26474: PUSH
26475: LD_INT 19
26477: PUSH
26478: LD_INT 20
26480: PUSH
26481: LD_INT 21
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: IN
26499: NOT
26500: OR
26501: PUSH
26502: LD_VAR 0 8
26506: PUSH
26507: LD_INT 5
26509: ARRAY
26510: NOT
26511: OR
26512: PUSH
26513: LD_VAR 0 8
26517: PUSH
26518: LD_INT 6
26520: ARRAY
26521: PUSH
26522: LD_INT 1
26524: PUSH
26525: LD_INT 2
26527: PUSH
26528: LD_INT 7
26530: PUSH
26531: LD_INT 9
26533: PUSH
26534: LD_INT 10
26536: PUSH
26537: LD_INT 11
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: IN
26548: NOT
26549: OR
26550: IFFALSE 26556
// exit ;
26552: POP
26553: POP
26554: GO 26654
// end ;
26556: GO 26227
26558: POP
26559: POP
// side := GetSide ( depot ) ;
26560: LD_ADDR_VAR 0 9
26564: PUSH
26565: LD_VAR 0 1
26569: PPUSH
26570: CALL_OW 255
26574: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
26575: LD_VAR 0 9
26579: PPUSH
26580: LD_VAR 0 3
26584: PPUSH
26585: LD_VAR 0 4
26589: PPUSH
26590: LD_INT 20
26592: PPUSH
26593: CALL 19308 0 4
26597: PUSH
26598: LD_INT 4
26600: ARRAY
26601: IFFALSE 26605
// exit ;
26603: GO 26654
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
26605: LD_VAR 0 2
26609: PUSH
26610: LD_INT 29
26612: PUSH
26613: LD_INT 30
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: IN
26620: PUSH
26621: LD_VAR 0 3
26625: PPUSH
26626: LD_VAR 0 4
26630: PPUSH
26631: LD_VAR 0 9
26635: PPUSH
26636: CALL_OW 440
26640: NOT
26641: AND
26642: IFFALSE 26646
// exit ;
26644: GO 26654
// result := true ;
26646: LD_ADDR_VAR 0 6
26650: PUSH
26651: LD_INT 1
26653: ST_TO_ADDR
// end ;
26654: LD_VAR 0 6
26658: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
26659: LD_INT 0
26661: PPUSH
26662: PPUSH
26663: PPUSH
26664: PPUSH
26665: PPUSH
26666: PPUSH
26667: PPUSH
26668: PPUSH
26669: PPUSH
26670: PPUSH
26671: PPUSH
26672: PPUSH
26673: PPUSH
26674: PPUSH
26675: PPUSH
26676: PPUSH
26677: PPUSH
26678: PPUSH
26679: PPUSH
26680: PPUSH
26681: PPUSH
26682: PPUSH
26683: PPUSH
26684: PPUSH
26685: PPUSH
26686: PPUSH
26687: PPUSH
26688: PPUSH
26689: PPUSH
26690: PPUSH
26691: PPUSH
26692: PPUSH
26693: PPUSH
26694: PPUSH
26695: PPUSH
26696: PPUSH
26697: PPUSH
26698: PPUSH
26699: PPUSH
26700: PPUSH
26701: PPUSH
26702: PPUSH
26703: PPUSH
26704: PPUSH
26705: PPUSH
26706: PPUSH
26707: PPUSH
26708: PPUSH
26709: PPUSH
26710: PPUSH
26711: PPUSH
26712: PPUSH
26713: PPUSH
26714: PPUSH
26715: PPUSH
26716: PPUSH
26717: PPUSH
26718: PPUSH
// result = [ ] ;
26719: LD_ADDR_VAR 0 7
26723: PUSH
26724: EMPTY
26725: ST_TO_ADDR
// temp_list = [ ] ;
26726: LD_ADDR_VAR 0 9
26730: PUSH
26731: EMPTY
26732: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26733: LD_VAR 0 4
26737: PUSH
26738: LD_INT 0
26740: PUSH
26741: LD_INT 1
26743: PUSH
26744: LD_INT 2
26746: PUSH
26747: LD_INT 3
26749: PUSH
26750: LD_INT 4
26752: PUSH
26753: LD_INT 5
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: IN
26764: NOT
26765: PUSH
26766: LD_VAR 0 1
26770: PUSH
26771: LD_INT 0
26773: PUSH
26774: LD_INT 1
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: IN
26781: PUSH
26782: LD_VAR 0 5
26786: PUSH
26787: LD_INT 1
26789: PUSH
26790: LD_INT 2
26792: PUSH
26793: LD_INT 3
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: LIST
26800: IN
26801: NOT
26802: AND
26803: OR
26804: IFFALSE 26808
// exit ;
26806: GO 45199
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26808: LD_VAR 0 1
26812: PUSH
26813: LD_INT 6
26815: PUSH
26816: LD_INT 7
26818: PUSH
26819: LD_INT 8
26821: PUSH
26822: LD_INT 13
26824: PUSH
26825: LD_INT 12
26827: PUSH
26828: LD_INT 15
26830: PUSH
26831: LD_INT 11
26833: PUSH
26834: LD_INT 14
26836: PUSH
26837: LD_INT 10
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: IN
26851: IFFALSE 26861
// btype = b_lab ;
26853: LD_ADDR_VAR 0 1
26857: PUSH
26858: LD_INT 6
26860: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26861: LD_VAR 0 6
26865: PUSH
26866: LD_INT 0
26868: PUSH
26869: LD_INT 1
26871: PUSH
26872: LD_INT 2
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: LIST
26879: IN
26880: NOT
26881: PUSH
26882: LD_VAR 0 1
26886: PUSH
26887: LD_INT 0
26889: PUSH
26890: LD_INT 1
26892: PUSH
26893: LD_INT 2
26895: PUSH
26896: LD_INT 3
26898: PUSH
26899: LD_INT 6
26901: PUSH
26902: LD_INT 36
26904: PUSH
26905: LD_INT 4
26907: PUSH
26908: LD_INT 5
26910: PUSH
26911: LD_INT 31
26913: PUSH
26914: LD_INT 32
26916: PUSH
26917: LD_INT 33
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: IN
26933: NOT
26934: PUSH
26935: LD_VAR 0 6
26939: PUSH
26940: LD_INT 1
26942: EQUAL
26943: AND
26944: OR
26945: PUSH
26946: LD_VAR 0 1
26950: PUSH
26951: LD_INT 2
26953: PUSH
26954: LD_INT 3
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: IN
26961: NOT
26962: PUSH
26963: LD_VAR 0 6
26967: PUSH
26968: LD_INT 2
26970: EQUAL
26971: AND
26972: OR
26973: IFFALSE 26983
// mode = 0 ;
26975: LD_ADDR_VAR 0 6
26979: PUSH
26980: LD_INT 0
26982: ST_TO_ADDR
// case mode of 0 :
26983: LD_VAR 0 6
26987: PUSH
26988: LD_INT 0
26990: DOUBLE
26991: EQUAL
26992: IFTRUE 26996
26994: GO 38449
26996: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26997: LD_ADDR_VAR 0 11
27001: PUSH
27002: LD_INT 0
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 0
27014: PUSH
27015: LD_INT 1
27017: NEG
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: LD_INT 1
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 1
27035: PUSH
27036: LD_INT 1
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 0
27045: PUSH
27046: LD_INT 1
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 1
27055: NEG
27056: PUSH
27057: LD_INT 0
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 1
27066: NEG
27067: PUSH
27068: LD_INT 1
27070: NEG
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 1
27078: NEG
27079: PUSH
27080: LD_INT 2
27082: NEG
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: LD_INT 2
27093: NEG
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 1
27101: PUSH
27102: LD_INT 1
27104: NEG
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 1
27112: PUSH
27113: LD_INT 2
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 0
27122: PUSH
27123: LD_INT 2
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 1
27132: NEG
27133: PUSH
27134: LD_INT 1
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 1
27143: PUSH
27144: LD_INT 3
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 0
27153: PUSH
27154: LD_INT 3
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 1
27163: NEG
27164: PUSH
27165: LD_INT 2
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27190: LD_ADDR_VAR 0 12
27194: PUSH
27195: LD_INT 0
27197: PUSH
27198: LD_INT 0
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 0
27207: PUSH
27208: LD_INT 1
27210: NEG
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 1
27218: PUSH
27219: LD_INT 0
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 1
27228: PUSH
27229: LD_INT 1
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 0
27238: PUSH
27239: LD_INT 1
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: LD_INT 1
27248: NEG
27249: PUSH
27250: LD_INT 0
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 1
27259: NEG
27260: PUSH
27261: LD_INT 1
27263: NEG
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 1
27271: PUSH
27272: LD_INT 1
27274: NEG
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 2
27282: PUSH
27283: LD_INT 0
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 2
27292: PUSH
27293: LD_INT 1
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 1
27302: NEG
27303: PUSH
27304: LD_INT 1
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 2
27313: NEG
27314: PUSH
27315: LD_INT 0
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 2
27324: NEG
27325: PUSH
27326: LD_INT 1
27328: NEG
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 2
27336: NEG
27337: PUSH
27338: LD_INT 1
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 3
27347: NEG
27348: PUSH
27349: LD_INT 0
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 3
27358: NEG
27359: PUSH
27360: LD_INT 1
27362: NEG
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27386: LD_ADDR_VAR 0 13
27390: PUSH
27391: LD_INT 0
27393: PUSH
27394: LD_INT 0
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 0
27403: PUSH
27404: LD_INT 1
27406: NEG
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 1
27414: PUSH
27415: LD_INT 0
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: LD_INT 1
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 0
27434: PUSH
27435: LD_INT 1
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 1
27444: NEG
27445: PUSH
27446: LD_INT 0
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 1
27455: NEG
27456: PUSH
27457: LD_INT 1
27459: NEG
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 1
27467: NEG
27468: PUSH
27469: LD_INT 2
27471: NEG
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 2
27479: PUSH
27480: LD_INT 1
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 2
27489: PUSH
27490: LD_INT 2
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 1
27499: PUSH
27500: LD_INT 2
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 2
27509: NEG
27510: PUSH
27511: LD_INT 1
27513: NEG
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 2
27521: NEG
27522: PUSH
27523: LD_INT 2
27525: NEG
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 2
27533: NEG
27534: PUSH
27535: LD_INT 3
27537: NEG
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: PUSH
27543: LD_INT 3
27545: NEG
27546: PUSH
27547: LD_INT 2
27549: NEG
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 3
27557: NEG
27558: PUSH
27559: LD_INT 3
27561: NEG
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27585: LD_ADDR_VAR 0 14
27589: PUSH
27590: LD_INT 0
27592: PUSH
27593: LD_INT 0
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 0
27602: PUSH
27603: LD_INT 1
27605: NEG
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 1
27613: PUSH
27614: LD_INT 0
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 1
27623: PUSH
27624: LD_INT 1
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 0
27633: PUSH
27634: LD_INT 1
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 1
27643: NEG
27644: PUSH
27645: LD_INT 0
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 1
27654: NEG
27655: PUSH
27656: LD_INT 1
27658: NEG
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 1
27666: NEG
27667: PUSH
27668: LD_INT 2
27670: NEG
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 0
27678: PUSH
27679: LD_INT 2
27681: NEG
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: LD_INT 1
27689: PUSH
27690: LD_INT 1
27692: NEG
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 1
27700: PUSH
27701: LD_INT 2
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 0
27710: PUSH
27711: LD_INT 2
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 1
27720: NEG
27721: PUSH
27722: LD_INT 1
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: LD_INT 1
27731: NEG
27732: PUSH
27733: LD_INT 3
27735: NEG
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PUSH
27741: LD_INT 0
27743: PUSH
27744: LD_INT 3
27746: NEG
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 1
27754: PUSH
27755: LD_INT 2
27757: NEG
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27781: LD_ADDR_VAR 0 15
27785: PUSH
27786: LD_INT 0
27788: PUSH
27789: LD_INT 0
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 0
27798: PUSH
27799: LD_INT 1
27801: NEG
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 1
27809: PUSH
27810: LD_INT 0
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 1
27819: PUSH
27820: LD_INT 1
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 0
27829: PUSH
27830: LD_INT 1
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 1
27839: NEG
27840: PUSH
27841: LD_INT 0
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 1
27850: NEG
27851: PUSH
27852: LD_INT 1
27854: NEG
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 1
27862: PUSH
27863: LD_INT 1
27865: NEG
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 2
27873: PUSH
27874: LD_INT 0
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 2
27883: PUSH
27884: LD_INT 1
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 1
27893: NEG
27894: PUSH
27895: LD_INT 1
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 2
27904: NEG
27905: PUSH
27906: LD_INT 0
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 2
27915: NEG
27916: PUSH
27917: LD_INT 1
27919: NEG
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 2
27927: PUSH
27928: LD_INT 1
27930: NEG
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 3
27938: PUSH
27939: LD_INT 0
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 3
27948: PUSH
27949: LD_INT 1
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27974: LD_ADDR_VAR 0 16
27978: PUSH
27979: LD_INT 0
27981: PUSH
27982: LD_INT 0
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 0
27991: PUSH
27992: LD_INT 1
27994: NEG
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 1
28002: PUSH
28003: LD_INT 0
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 1
28012: PUSH
28013: LD_INT 1
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 0
28022: PUSH
28023: LD_INT 1
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 1
28032: NEG
28033: PUSH
28034: LD_INT 0
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: LD_INT 1
28043: NEG
28044: PUSH
28045: LD_INT 1
28047: NEG
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 1
28055: NEG
28056: PUSH
28057: LD_INT 2
28059: NEG
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 2
28067: PUSH
28068: LD_INT 1
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 2
28077: PUSH
28078: LD_INT 2
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 1
28087: PUSH
28088: LD_INT 2
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: LD_INT 2
28097: NEG
28098: PUSH
28099: LD_INT 1
28101: NEG
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: LD_INT 2
28109: NEG
28110: PUSH
28111: LD_INT 2
28113: NEG
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 3
28121: PUSH
28122: LD_INT 2
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 3
28131: PUSH
28132: LD_INT 3
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 2
28141: PUSH
28142: LD_INT 3
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28167: LD_ADDR_VAR 0 17
28171: PUSH
28172: LD_INT 0
28174: PUSH
28175: LD_INT 0
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 0
28184: PUSH
28185: LD_INT 1
28187: NEG
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: LD_INT 1
28195: PUSH
28196: LD_INT 0
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 1
28205: PUSH
28206: LD_INT 1
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 0
28215: PUSH
28216: LD_INT 1
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 1
28225: NEG
28226: PUSH
28227: LD_INT 0
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 1
28236: NEG
28237: PUSH
28238: LD_INT 1
28240: NEG
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: LD_INT 1
28248: NEG
28249: PUSH
28250: LD_INT 2
28252: NEG
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 0
28260: PUSH
28261: LD_INT 2
28263: NEG
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 1
28271: PUSH
28272: LD_INT 1
28274: NEG
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 2
28282: PUSH
28283: LD_INT 0
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 2
28292: PUSH
28293: LD_INT 1
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 2
28302: PUSH
28303: LD_INT 2
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: LD_INT 1
28312: PUSH
28313: LD_INT 2
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 0
28322: PUSH
28323: LD_INT 2
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 1
28332: NEG
28333: PUSH
28334: LD_INT 1
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 2
28343: NEG
28344: PUSH
28345: LD_INT 0
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 2
28354: NEG
28355: PUSH
28356: LD_INT 1
28358: NEG
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 2
28366: NEG
28367: PUSH
28368: LD_INT 2
28370: NEG
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28397: LD_ADDR_VAR 0 18
28401: PUSH
28402: LD_INT 0
28404: PUSH
28405: LD_INT 0
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 0
28414: PUSH
28415: LD_INT 1
28417: NEG
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 1
28425: PUSH
28426: LD_INT 0
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 1
28435: PUSH
28436: LD_INT 1
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: LD_INT 0
28445: PUSH
28446: LD_INT 1
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 1
28455: NEG
28456: PUSH
28457: LD_INT 0
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: LD_INT 1
28466: NEG
28467: PUSH
28468: LD_INT 1
28470: NEG
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 1
28478: NEG
28479: PUSH
28480: LD_INT 2
28482: NEG
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 0
28490: PUSH
28491: LD_INT 2
28493: NEG
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 1
28501: PUSH
28502: LD_INT 1
28504: NEG
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 2
28512: PUSH
28513: LD_INT 0
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 2
28522: PUSH
28523: LD_INT 1
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 2
28532: PUSH
28533: LD_INT 2
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 1
28542: PUSH
28543: LD_INT 2
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: LD_INT 2
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 1
28562: NEG
28563: PUSH
28564: LD_INT 1
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 2
28573: NEG
28574: PUSH
28575: LD_INT 0
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 2
28584: NEG
28585: PUSH
28586: LD_INT 1
28588: NEG
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 2
28596: NEG
28597: PUSH
28598: LD_INT 2
28600: NEG
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28627: LD_ADDR_VAR 0 19
28631: PUSH
28632: LD_INT 0
28634: PUSH
28635: LD_INT 0
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 0
28644: PUSH
28645: LD_INT 1
28647: NEG
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 1
28655: PUSH
28656: LD_INT 0
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: PUSH
28663: LD_INT 1
28665: PUSH
28666: LD_INT 1
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 0
28675: PUSH
28676: LD_INT 1
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PUSH
28683: LD_INT 1
28685: NEG
28686: PUSH
28687: LD_INT 0
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: LD_INT 1
28696: NEG
28697: PUSH
28698: LD_INT 1
28700: NEG
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: LD_INT 1
28708: NEG
28709: PUSH
28710: LD_INT 2
28712: NEG
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 0
28720: PUSH
28721: LD_INT 2
28723: NEG
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 1
28731: PUSH
28732: LD_INT 1
28734: NEG
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 2
28742: PUSH
28743: LD_INT 0
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 2
28752: PUSH
28753: LD_INT 1
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 2
28762: PUSH
28763: LD_INT 2
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: LD_INT 1
28772: PUSH
28773: LD_INT 2
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 0
28782: PUSH
28783: LD_INT 2
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 1
28792: NEG
28793: PUSH
28794: LD_INT 1
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 2
28803: NEG
28804: PUSH
28805: LD_INT 0
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 2
28814: NEG
28815: PUSH
28816: LD_INT 1
28818: NEG
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 2
28826: NEG
28827: PUSH
28828: LD_INT 2
28830: NEG
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28857: LD_ADDR_VAR 0 20
28861: PUSH
28862: LD_INT 0
28864: PUSH
28865: LD_INT 0
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 0
28874: PUSH
28875: LD_INT 1
28877: NEG
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: LD_INT 1
28885: PUSH
28886: LD_INT 0
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 1
28895: PUSH
28896: LD_INT 1
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 0
28905: PUSH
28906: LD_INT 1
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 1
28915: NEG
28916: PUSH
28917: LD_INT 0
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 1
28926: NEG
28927: PUSH
28928: LD_INT 1
28930: NEG
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 1
28938: NEG
28939: PUSH
28940: LD_INT 2
28942: NEG
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 0
28950: PUSH
28951: LD_INT 2
28953: NEG
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 1
28961: PUSH
28962: LD_INT 1
28964: NEG
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 2
28972: PUSH
28973: LD_INT 0
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 2
28982: PUSH
28983: LD_INT 1
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 2
28992: PUSH
28993: LD_INT 2
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 1
29002: PUSH
29003: LD_INT 2
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 0
29012: PUSH
29013: LD_INT 2
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 1
29022: NEG
29023: PUSH
29024: LD_INT 1
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 2
29033: NEG
29034: PUSH
29035: LD_INT 0
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 2
29044: NEG
29045: PUSH
29046: LD_INT 1
29048: NEG
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 2
29056: NEG
29057: PUSH
29058: LD_INT 2
29060: NEG
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29087: LD_ADDR_VAR 0 21
29091: PUSH
29092: LD_INT 0
29094: PUSH
29095: LD_INT 0
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 0
29104: PUSH
29105: LD_INT 1
29107: NEG
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 1
29115: PUSH
29116: LD_INT 0
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: LD_INT 1
29125: PUSH
29126: LD_INT 1
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 0
29135: PUSH
29136: LD_INT 1
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 1
29145: NEG
29146: PUSH
29147: LD_INT 0
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 1
29156: NEG
29157: PUSH
29158: LD_INT 1
29160: NEG
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 1
29168: NEG
29169: PUSH
29170: LD_INT 2
29172: NEG
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 0
29180: PUSH
29181: LD_INT 2
29183: NEG
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 1
29191: PUSH
29192: LD_INT 1
29194: NEG
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 2
29202: PUSH
29203: LD_INT 0
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 2
29212: PUSH
29213: LD_INT 1
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 2
29222: PUSH
29223: LD_INT 2
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: LD_INT 1
29232: PUSH
29233: LD_INT 2
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 0
29242: PUSH
29243: LD_INT 2
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 1
29252: NEG
29253: PUSH
29254: LD_INT 1
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 2
29263: NEG
29264: PUSH
29265: LD_INT 0
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 2
29274: NEG
29275: PUSH
29276: LD_INT 1
29278: NEG
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 2
29286: NEG
29287: PUSH
29288: LD_INT 2
29290: NEG
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29317: LD_ADDR_VAR 0 22
29321: PUSH
29322: LD_INT 0
29324: PUSH
29325: LD_INT 0
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: PUSH
29332: LD_INT 0
29334: PUSH
29335: LD_INT 1
29337: NEG
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 1
29345: PUSH
29346: LD_INT 0
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 1
29355: PUSH
29356: LD_INT 1
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 0
29365: PUSH
29366: LD_INT 1
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 1
29375: NEG
29376: PUSH
29377: LD_INT 0
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 1
29386: NEG
29387: PUSH
29388: LD_INT 1
29390: NEG
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 1
29398: NEG
29399: PUSH
29400: LD_INT 2
29402: NEG
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 0
29410: PUSH
29411: LD_INT 2
29413: NEG
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 1
29421: PUSH
29422: LD_INT 1
29424: NEG
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 2
29432: PUSH
29433: LD_INT 0
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 2
29442: PUSH
29443: LD_INT 1
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 2
29452: PUSH
29453: LD_INT 2
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 1
29462: PUSH
29463: LD_INT 2
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 0
29472: PUSH
29473: LD_INT 2
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 1
29482: NEG
29483: PUSH
29484: LD_INT 1
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 2
29493: NEG
29494: PUSH
29495: LD_INT 0
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: LD_INT 2
29504: NEG
29505: PUSH
29506: LD_INT 1
29508: NEG
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 2
29516: NEG
29517: PUSH
29518: LD_INT 2
29520: NEG
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29547: LD_ADDR_VAR 0 23
29551: PUSH
29552: LD_INT 0
29554: PUSH
29555: LD_INT 0
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 0
29564: PUSH
29565: LD_INT 1
29567: NEG
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: LD_INT 1
29575: PUSH
29576: LD_INT 0
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 1
29585: PUSH
29586: LD_INT 1
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 0
29595: PUSH
29596: LD_INT 1
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 1
29605: NEG
29606: PUSH
29607: LD_INT 0
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 1
29616: NEG
29617: PUSH
29618: LD_INT 1
29620: NEG
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 1
29628: NEG
29629: PUSH
29630: LD_INT 2
29632: NEG
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 0
29640: PUSH
29641: LD_INT 2
29643: NEG
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 1
29651: PUSH
29652: LD_INT 1
29654: NEG
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: LD_INT 2
29662: PUSH
29663: LD_INT 0
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 2
29672: PUSH
29673: LD_INT 1
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 2
29682: PUSH
29683: LD_INT 2
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 1
29692: PUSH
29693: LD_INT 2
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 0
29702: PUSH
29703: LD_INT 2
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 1
29712: NEG
29713: PUSH
29714: LD_INT 1
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 2
29723: NEG
29724: PUSH
29725: LD_INT 0
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 2
29734: NEG
29735: PUSH
29736: LD_INT 1
29738: NEG
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 2
29746: NEG
29747: PUSH
29748: LD_INT 2
29750: NEG
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 2
29758: NEG
29759: PUSH
29760: LD_INT 3
29762: NEG
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 1
29770: NEG
29771: PUSH
29772: LD_INT 3
29774: NEG
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 1
29782: PUSH
29783: LD_INT 2
29785: NEG
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 2
29793: PUSH
29794: LD_INT 1
29796: NEG
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29827: LD_ADDR_VAR 0 24
29831: PUSH
29832: LD_INT 0
29834: PUSH
29835: LD_INT 0
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 0
29844: PUSH
29845: LD_INT 1
29847: NEG
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 1
29855: PUSH
29856: LD_INT 0
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 1
29865: PUSH
29866: LD_INT 1
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 0
29875: PUSH
29876: LD_INT 1
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 1
29885: NEG
29886: PUSH
29887: LD_INT 0
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 1
29896: NEG
29897: PUSH
29898: LD_INT 1
29900: NEG
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 1
29908: NEG
29909: PUSH
29910: LD_INT 2
29912: NEG
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 0
29920: PUSH
29921: LD_INT 2
29923: NEG
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 1
29931: PUSH
29932: LD_INT 1
29934: NEG
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 2
29942: PUSH
29943: LD_INT 0
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 2
29952: PUSH
29953: LD_INT 1
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 2
29962: PUSH
29963: LD_INT 2
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 1
29972: PUSH
29973: LD_INT 2
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 0
29982: PUSH
29983: LD_INT 2
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 1
29992: NEG
29993: PUSH
29994: LD_INT 1
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 2
30003: NEG
30004: PUSH
30005: LD_INT 0
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 2
30014: NEG
30015: PUSH
30016: LD_INT 1
30018: NEG
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 2
30026: NEG
30027: PUSH
30028: LD_INT 2
30030: NEG
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: LD_INT 1
30038: PUSH
30039: LD_INT 2
30041: NEG
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 2
30049: PUSH
30050: LD_INT 1
30052: NEG
30053: PUSH
30054: EMPTY
30055: LIST
30056: LIST
30057: PUSH
30058: LD_INT 3
30060: PUSH
30061: LD_INT 1
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 3
30070: PUSH
30071: LD_INT 2
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
30103: LD_ADDR_VAR 0 25
30107: PUSH
30108: LD_INT 0
30110: PUSH
30111: LD_INT 0
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 0
30120: PUSH
30121: LD_INT 1
30123: NEG
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 1
30131: PUSH
30132: LD_INT 0
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: LD_INT 1
30141: PUSH
30142: LD_INT 1
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 0
30151: PUSH
30152: LD_INT 1
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 1
30161: NEG
30162: PUSH
30163: LD_INT 0
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 1
30172: NEG
30173: PUSH
30174: LD_INT 1
30176: NEG
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 1
30184: NEG
30185: PUSH
30186: LD_INT 2
30188: NEG
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 0
30196: PUSH
30197: LD_INT 2
30199: NEG
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 1
30207: PUSH
30208: LD_INT 1
30210: NEG
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 2
30218: PUSH
30219: LD_INT 0
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 2
30228: PUSH
30229: LD_INT 1
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 2
30238: PUSH
30239: LD_INT 2
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 1
30248: PUSH
30249: LD_INT 2
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 0
30258: PUSH
30259: LD_INT 2
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 1
30268: NEG
30269: PUSH
30270: LD_INT 1
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 2
30279: NEG
30280: PUSH
30281: LD_INT 0
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 2
30290: NEG
30291: PUSH
30292: LD_INT 1
30294: NEG
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 2
30302: NEG
30303: PUSH
30304: LD_INT 2
30306: NEG
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 3
30314: PUSH
30315: LD_INT 1
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 3
30324: PUSH
30325: LD_INT 2
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 2
30334: PUSH
30335: LD_INT 3
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 1
30344: PUSH
30345: LD_INT 3
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30377: LD_ADDR_VAR 0 26
30381: PUSH
30382: LD_INT 0
30384: PUSH
30385: LD_INT 0
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 0
30394: PUSH
30395: LD_INT 1
30397: NEG
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 1
30405: PUSH
30406: LD_INT 0
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 1
30415: PUSH
30416: LD_INT 1
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 0
30425: PUSH
30426: LD_INT 1
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 1
30435: NEG
30436: PUSH
30437: LD_INT 0
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 1
30446: NEG
30447: PUSH
30448: LD_INT 1
30450: NEG
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 1
30458: NEG
30459: PUSH
30460: LD_INT 2
30462: NEG
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 0
30470: PUSH
30471: LD_INT 2
30473: NEG
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 1
30481: PUSH
30482: LD_INT 1
30484: NEG
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 2
30492: PUSH
30493: LD_INT 0
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 2
30502: PUSH
30503: LD_INT 1
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 2
30512: PUSH
30513: LD_INT 2
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 1
30522: PUSH
30523: LD_INT 2
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 0
30532: PUSH
30533: LD_INT 2
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 1
30542: NEG
30543: PUSH
30544: LD_INT 1
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 2
30553: NEG
30554: PUSH
30555: LD_INT 0
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 2
30564: NEG
30565: PUSH
30566: LD_INT 1
30568: NEG
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 2
30576: NEG
30577: PUSH
30578: LD_INT 2
30580: NEG
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 2
30588: PUSH
30589: LD_INT 3
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 1
30598: PUSH
30599: LD_INT 3
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 1
30608: NEG
30609: PUSH
30610: LD_INT 2
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 2
30619: NEG
30620: PUSH
30621: LD_INT 1
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30653: LD_ADDR_VAR 0 27
30657: PUSH
30658: LD_INT 0
30660: PUSH
30661: LD_INT 0
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 0
30670: PUSH
30671: LD_INT 1
30673: NEG
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 1
30681: PUSH
30682: LD_INT 0
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 1
30691: PUSH
30692: LD_INT 1
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 0
30701: PUSH
30702: LD_INT 1
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 1
30711: NEG
30712: PUSH
30713: LD_INT 0
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 1
30722: NEG
30723: PUSH
30724: LD_INT 1
30726: NEG
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 1
30734: NEG
30735: PUSH
30736: LD_INT 2
30738: NEG
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 0
30746: PUSH
30747: LD_INT 2
30749: NEG
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 1
30757: PUSH
30758: LD_INT 1
30760: NEG
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 2
30768: PUSH
30769: LD_INT 0
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 2
30778: PUSH
30779: LD_INT 1
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: LD_INT 2
30788: PUSH
30789: LD_INT 2
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 1
30798: PUSH
30799: LD_INT 2
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 0
30808: PUSH
30809: LD_INT 2
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 1
30818: NEG
30819: PUSH
30820: LD_INT 1
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 2
30829: NEG
30830: PUSH
30831: LD_INT 0
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: LD_INT 2
30840: NEG
30841: PUSH
30842: LD_INT 1
30844: NEG
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 2
30852: NEG
30853: PUSH
30854: LD_INT 2
30856: NEG
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 1
30864: NEG
30865: PUSH
30866: LD_INT 2
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 2
30875: NEG
30876: PUSH
30877: LD_INT 1
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 3
30886: NEG
30887: PUSH
30888: LD_INT 1
30890: NEG
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 3
30898: NEG
30899: PUSH
30900: LD_INT 2
30902: NEG
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30933: LD_ADDR_VAR 0 28
30937: PUSH
30938: LD_INT 0
30940: PUSH
30941: LD_INT 0
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 0
30950: PUSH
30951: LD_INT 1
30953: NEG
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 1
30961: PUSH
30962: LD_INT 0
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 1
30971: PUSH
30972: LD_INT 1
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: LD_INT 0
30981: PUSH
30982: LD_INT 1
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: LD_INT 1
30991: NEG
30992: PUSH
30993: LD_INT 0
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 1
31002: NEG
31003: PUSH
31004: LD_INT 1
31006: NEG
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 1
31014: NEG
31015: PUSH
31016: LD_INT 2
31018: NEG
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 0
31026: PUSH
31027: LD_INT 2
31029: NEG
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: LD_INT 1
31037: PUSH
31038: LD_INT 1
31040: NEG
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 2
31048: PUSH
31049: LD_INT 0
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 2
31058: PUSH
31059: LD_INT 1
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 2
31068: PUSH
31069: LD_INT 2
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 1
31078: PUSH
31079: LD_INT 2
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: LD_INT 0
31088: PUSH
31089: LD_INT 2
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 1
31098: NEG
31099: PUSH
31100: LD_INT 1
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 2
31109: NEG
31110: PUSH
31111: LD_INT 0
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 2
31120: NEG
31121: PUSH
31122: LD_INT 1
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 2
31132: NEG
31133: PUSH
31134: LD_INT 2
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 2
31144: NEG
31145: PUSH
31146: LD_INT 3
31148: NEG
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 1
31156: NEG
31157: PUSH
31158: LD_INT 3
31160: NEG
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 3
31168: NEG
31169: PUSH
31170: LD_INT 1
31172: NEG
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 3
31180: NEG
31181: PUSH
31182: LD_INT 2
31184: NEG
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31215: LD_ADDR_VAR 0 29
31219: PUSH
31220: LD_INT 0
31222: PUSH
31223: LD_INT 0
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 0
31232: PUSH
31233: LD_INT 1
31235: NEG
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 1
31243: PUSH
31244: LD_INT 0
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 1
31253: PUSH
31254: LD_INT 1
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 0
31263: PUSH
31264: LD_INT 1
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 1
31273: NEG
31274: PUSH
31275: LD_INT 0
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 1
31284: NEG
31285: PUSH
31286: LD_INT 1
31288: NEG
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 1
31296: NEG
31297: PUSH
31298: LD_INT 2
31300: NEG
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 0
31308: PUSH
31309: LD_INT 2
31311: NEG
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 1
31319: PUSH
31320: LD_INT 1
31322: NEG
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 2
31330: PUSH
31331: LD_INT 0
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 2
31340: PUSH
31341: LD_INT 1
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 1
31350: PUSH
31351: LD_INT 2
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 0
31360: PUSH
31361: LD_INT 2
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 1
31370: NEG
31371: PUSH
31372: LD_INT 1
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 2
31381: NEG
31382: PUSH
31383: LD_INT 1
31385: NEG
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 2
31393: NEG
31394: PUSH
31395: LD_INT 2
31397: NEG
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 2
31405: NEG
31406: PUSH
31407: LD_INT 3
31409: NEG
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 2
31417: PUSH
31418: LD_INT 1
31420: NEG
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 3
31428: PUSH
31429: LD_INT 1
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 1
31438: PUSH
31439: LD_INT 3
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 1
31448: NEG
31449: PUSH
31450: LD_INT 2
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 3
31459: NEG
31460: PUSH
31461: LD_INT 2
31463: NEG
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31494: LD_ADDR_VAR 0 30
31498: PUSH
31499: LD_INT 0
31501: PUSH
31502: LD_INT 0
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 0
31511: PUSH
31512: LD_INT 1
31514: NEG
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 1
31522: PUSH
31523: LD_INT 0
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 1
31532: PUSH
31533: LD_INT 1
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 0
31542: PUSH
31543: LD_INT 1
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 1
31552: NEG
31553: PUSH
31554: LD_INT 0
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 1
31563: NEG
31564: PUSH
31565: LD_INT 1
31567: NEG
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 1
31575: NEG
31576: PUSH
31577: LD_INT 2
31579: NEG
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 0
31587: PUSH
31588: LD_INT 2
31590: NEG
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 1
31598: PUSH
31599: LD_INT 1
31601: NEG
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 2
31609: PUSH
31610: LD_INT 0
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 2
31619: PUSH
31620: LD_INT 1
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 2
31629: PUSH
31630: LD_INT 2
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 1
31639: PUSH
31640: LD_INT 2
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 1
31649: NEG
31650: PUSH
31651: LD_INT 1
31653: PUSH
31654: EMPTY
31655: LIST
31656: LIST
31657: PUSH
31658: LD_INT 2
31660: NEG
31661: PUSH
31662: LD_INT 0
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 2
31671: NEG
31672: PUSH
31673: LD_INT 1
31675: NEG
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 1
31683: NEG
31684: PUSH
31685: LD_INT 3
31687: NEG
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 1
31695: PUSH
31696: LD_INT 2
31698: NEG
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 3
31706: PUSH
31707: LD_INT 2
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 2
31716: PUSH
31717: LD_INT 3
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 2
31726: NEG
31727: PUSH
31728: LD_INT 1
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 3
31737: NEG
31738: PUSH
31739: LD_INT 1
31741: NEG
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31772: LD_ADDR_VAR 0 31
31776: PUSH
31777: LD_INT 0
31779: PUSH
31780: LD_INT 0
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 0
31789: PUSH
31790: LD_INT 1
31792: NEG
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 1
31800: PUSH
31801: LD_INT 0
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 1
31810: PUSH
31811: LD_INT 1
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 0
31820: PUSH
31821: LD_INT 1
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 1
31830: NEG
31831: PUSH
31832: LD_INT 0
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 1
31841: NEG
31842: PUSH
31843: LD_INT 1
31845: NEG
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 1
31853: NEG
31854: PUSH
31855: LD_INT 2
31857: NEG
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 1
31865: PUSH
31866: LD_INT 1
31868: NEG
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 2
31876: PUSH
31877: LD_INT 0
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 2
31886: PUSH
31887: LD_INT 1
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 2
31896: PUSH
31897: LD_INT 2
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 1
31906: PUSH
31907: LD_INT 2
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 0
31916: PUSH
31917: LD_INT 2
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 1
31926: NEG
31927: PUSH
31928: LD_INT 1
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 2
31937: NEG
31938: PUSH
31939: LD_INT 1
31941: NEG
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 2
31949: NEG
31950: PUSH
31951: LD_INT 2
31953: NEG
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 2
31961: NEG
31962: PUSH
31963: LD_INT 3
31965: NEG
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 2
31973: PUSH
31974: LD_INT 1
31976: NEG
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 3
31984: PUSH
31985: LD_INT 1
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 1
31994: PUSH
31995: LD_INT 3
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 1
32004: NEG
32005: PUSH
32006: LD_INT 2
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 3
32015: NEG
32016: PUSH
32017: LD_INT 2
32019: NEG
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32050: LD_ADDR_VAR 0 32
32054: PUSH
32055: LD_INT 0
32057: PUSH
32058: LD_INT 0
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 0
32067: PUSH
32068: LD_INT 1
32070: NEG
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 1
32078: PUSH
32079: LD_INT 0
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 1
32088: PUSH
32089: LD_INT 1
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 0
32098: PUSH
32099: LD_INT 1
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 1
32108: NEG
32109: PUSH
32110: LD_INT 0
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 1
32119: NEG
32120: PUSH
32121: LD_INT 1
32123: NEG
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 1
32131: NEG
32132: PUSH
32133: LD_INT 2
32135: NEG
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 0
32143: PUSH
32144: LD_INT 2
32146: NEG
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 1
32154: PUSH
32155: LD_INT 1
32157: NEG
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 2
32165: PUSH
32166: LD_INT 1
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 2
32175: PUSH
32176: LD_INT 2
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 1
32185: PUSH
32186: LD_INT 2
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 0
32195: PUSH
32196: LD_INT 2
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 1
32205: NEG
32206: PUSH
32207: LD_INT 1
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 2
32216: NEG
32217: PUSH
32218: LD_INT 0
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 2
32227: NEG
32228: PUSH
32229: LD_INT 1
32231: NEG
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 1
32239: NEG
32240: PUSH
32241: LD_INT 3
32243: NEG
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 1
32251: PUSH
32252: LD_INT 2
32254: NEG
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 3
32262: PUSH
32263: LD_INT 2
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 2
32272: PUSH
32273: LD_INT 3
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 2
32282: NEG
32283: PUSH
32284: LD_INT 1
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 3
32293: NEG
32294: PUSH
32295: LD_INT 1
32297: NEG
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32328: LD_ADDR_VAR 0 33
32332: PUSH
32333: LD_INT 0
32335: PUSH
32336: LD_INT 0
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 0
32345: PUSH
32346: LD_INT 1
32348: NEG
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 1
32356: PUSH
32357: LD_INT 0
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 1
32366: PUSH
32367: LD_INT 1
32369: PUSH
32370: EMPTY
32371: LIST
32372: LIST
32373: PUSH
32374: LD_INT 0
32376: PUSH
32377: LD_INT 1
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 1
32386: NEG
32387: PUSH
32388: LD_INT 0
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 1
32397: NEG
32398: PUSH
32399: LD_INT 1
32401: NEG
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 1
32409: NEG
32410: PUSH
32411: LD_INT 2
32413: NEG
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 1
32421: PUSH
32422: LD_INT 1
32424: NEG
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 2
32432: PUSH
32433: LD_INT 0
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 2
32442: PUSH
32443: LD_INT 1
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 1
32452: PUSH
32453: LD_INT 2
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 0
32462: PUSH
32463: LD_INT 2
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 1
32472: NEG
32473: PUSH
32474: LD_INT 1
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 2
32483: NEG
32484: PUSH
32485: LD_INT 0
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 2
32494: NEG
32495: PUSH
32496: LD_INT 1
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 2
32506: NEG
32507: PUSH
32508: LD_INT 2
32510: NEG
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 2
32518: NEG
32519: PUSH
32520: LD_INT 3
32522: NEG
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 2
32530: PUSH
32531: LD_INT 1
32533: NEG
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 3
32541: PUSH
32542: LD_INT 1
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 1
32551: PUSH
32552: LD_INT 3
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 1
32561: NEG
32562: PUSH
32563: LD_INT 2
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 3
32572: NEG
32573: PUSH
32574: LD_INT 2
32576: NEG
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32607: LD_ADDR_VAR 0 34
32611: PUSH
32612: LD_INT 0
32614: PUSH
32615: LD_INT 0
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 0
32624: PUSH
32625: LD_INT 1
32627: NEG
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 1
32635: PUSH
32636: LD_INT 0
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 1
32645: PUSH
32646: LD_INT 1
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 0
32655: PUSH
32656: LD_INT 1
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: LD_INT 1
32665: NEG
32666: PUSH
32667: LD_INT 0
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 1
32676: NEG
32677: PUSH
32678: LD_INT 1
32680: NEG
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 1
32688: NEG
32689: PUSH
32690: LD_INT 2
32692: NEG
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 0
32700: PUSH
32701: LD_INT 2
32703: NEG
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 1
32711: PUSH
32712: LD_INT 1
32714: NEG
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 2
32722: PUSH
32723: LD_INT 1
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 2
32732: PUSH
32733: LD_INT 2
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 1
32742: PUSH
32743: LD_INT 2
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 1
32752: NEG
32753: PUSH
32754: LD_INT 1
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 2
32763: NEG
32764: PUSH
32765: LD_INT 0
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 2
32774: NEG
32775: PUSH
32776: LD_INT 1
32778: NEG
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 2
32786: NEG
32787: PUSH
32788: LD_INT 2
32790: NEG
32791: PUSH
32792: EMPTY
32793: LIST
32794: LIST
32795: PUSH
32796: LD_INT 1
32798: NEG
32799: PUSH
32800: LD_INT 3
32802: NEG
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 1
32810: PUSH
32811: LD_INT 2
32813: NEG
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 3
32821: PUSH
32822: LD_INT 2
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 2
32831: PUSH
32832: LD_INT 3
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 2
32841: NEG
32842: PUSH
32843: LD_INT 1
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 3
32852: NEG
32853: PUSH
32854: LD_INT 1
32856: NEG
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32887: LD_ADDR_VAR 0 35
32891: PUSH
32892: LD_INT 0
32894: PUSH
32895: LD_INT 0
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 0
32904: PUSH
32905: LD_INT 1
32907: NEG
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: LD_INT 1
32915: PUSH
32916: LD_INT 0
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PUSH
32923: LD_INT 1
32925: PUSH
32926: LD_INT 1
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 0
32935: PUSH
32936: LD_INT 1
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 1
32945: NEG
32946: PUSH
32947: LD_INT 0
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 1
32956: NEG
32957: PUSH
32958: LD_INT 1
32960: NEG
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 2
32968: PUSH
32969: LD_INT 1
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 2
32978: NEG
32979: PUSH
32980: LD_INT 1
32982: NEG
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32999: LD_ADDR_VAR 0 36
33003: PUSH
33004: LD_INT 0
33006: PUSH
33007: LD_INT 0
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 0
33016: PUSH
33017: LD_INT 1
33019: NEG
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 1
33027: PUSH
33028: LD_INT 0
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 1
33037: PUSH
33038: LD_INT 1
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 0
33047: PUSH
33048: LD_INT 1
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 1
33057: NEG
33058: PUSH
33059: LD_INT 0
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 1
33068: NEG
33069: PUSH
33070: LD_INT 1
33072: NEG
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 1
33080: NEG
33081: PUSH
33082: LD_INT 2
33084: NEG
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 1
33092: PUSH
33093: LD_INT 2
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33111: LD_ADDR_VAR 0 37
33115: PUSH
33116: LD_INT 0
33118: PUSH
33119: LD_INT 0
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 0
33128: PUSH
33129: LD_INT 1
33131: NEG
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 1
33139: PUSH
33140: LD_INT 0
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 1
33149: PUSH
33150: LD_INT 1
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 0
33159: PUSH
33160: LD_INT 1
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 1
33169: NEG
33170: PUSH
33171: LD_INT 0
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 1
33180: NEG
33181: PUSH
33182: LD_INT 1
33184: NEG
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 1
33192: PUSH
33193: LD_INT 1
33195: NEG
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 1
33203: NEG
33204: PUSH
33205: LD_INT 1
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33223: LD_ADDR_VAR 0 38
33227: PUSH
33228: LD_INT 0
33230: PUSH
33231: LD_INT 0
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 0
33240: PUSH
33241: LD_INT 1
33243: NEG
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 1
33251: PUSH
33252: LD_INT 0
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 1
33261: PUSH
33262: LD_INT 1
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 0
33271: PUSH
33272: LD_INT 1
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 1
33281: NEG
33282: PUSH
33283: LD_INT 0
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 1
33292: NEG
33293: PUSH
33294: LD_INT 1
33296: NEG
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 2
33304: PUSH
33305: LD_INT 1
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 2
33314: NEG
33315: PUSH
33316: LD_INT 1
33318: NEG
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33335: LD_ADDR_VAR 0 39
33339: PUSH
33340: LD_INT 0
33342: PUSH
33343: LD_INT 0
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 0
33352: PUSH
33353: LD_INT 1
33355: NEG
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 1
33363: PUSH
33364: LD_INT 0
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 1
33373: PUSH
33374: LD_INT 1
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 0
33383: PUSH
33384: LD_INT 1
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 1
33393: NEG
33394: PUSH
33395: LD_INT 0
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 1
33404: NEG
33405: PUSH
33406: LD_INT 1
33408: NEG
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 1
33416: NEG
33417: PUSH
33418: LD_INT 2
33420: NEG
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 1
33428: PUSH
33429: LD_INT 2
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33447: LD_ADDR_VAR 0 40
33451: PUSH
33452: LD_INT 0
33454: PUSH
33455: LD_INT 0
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 0
33464: PUSH
33465: LD_INT 1
33467: NEG
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 1
33475: PUSH
33476: LD_INT 0
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 1
33485: PUSH
33486: LD_INT 1
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 0
33495: PUSH
33496: LD_INT 1
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 1
33505: NEG
33506: PUSH
33507: LD_INT 0
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 1
33516: NEG
33517: PUSH
33518: LD_INT 1
33520: NEG
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 1
33528: PUSH
33529: LD_INT 1
33531: NEG
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 1
33539: NEG
33540: PUSH
33541: LD_INT 1
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33559: LD_ADDR_VAR 0 41
33563: PUSH
33564: LD_INT 0
33566: PUSH
33567: LD_INT 0
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 0
33576: PUSH
33577: LD_INT 1
33579: NEG
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 1
33587: PUSH
33588: LD_INT 0
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 1
33597: PUSH
33598: LD_INT 1
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 0
33607: PUSH
33608: LD_INT 1
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 1
33617: NEG
33618: PUSH
33619: LD_INT 0
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 1
33628: NEG
33629: PUSH
33630: LD_INT 1
33632: NEG
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 1
33640: NEG
33641: PUSH
33642: LD_INT 2
33644: NEG
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 1
33652: PUSH
33653: LD_INT 1
33655: NEG
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 2
33663: PUSH
33664: LD_INT 0
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: PUSH
33671: LD_INT 2
33673: PUSH
33674: LD_INT 1
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 2
33683: PUSH
33684: LD_INT 2
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 1
33693: PUSH
33694: LD_INT 2
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 1
33703: NEG
33704: PUSH
33705: LD_INT 1
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 2
33714: NEG
33715: PUSH
33716: LD_INT 0
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 2
33725: NEG
33726: PUSH
33727: LD_INT 1
33729: NEG
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 2
33737: NEG
33738: PUSH
33739: LD_INT 2
33741: NEG
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 2
33749: NEG
33750: PUSH
33751: LD_INT 3
33753: NEG
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 2
33761: PUSH
33762: LD_INT 1
33764: NEG
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 3
33772: PUSH
33773: LD_INT 0
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 3
33782: PUSH
33783: LD_INT 1
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 3
33792: PUSH
33793: LD_INT 2
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 3
33802: PUSH
33803: LD_INT 3
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 2
33812: PUSH
33813: LD_INT 3
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 2
33822: NEG
33823: PUSH
33824: LD_INT 1
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 3
33833: NEG
33834: PUSH
33835: LD_INT 0
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 3
33844: NEG
33845: PUSH
33846: LD_INT 1
33848: NEG
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 3
33856: NEG
33857: PUSH
33858: LD_INT 2
33860: NEG
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 3
33868: NEG
33869: PUSH
33870: LD_INT 3
33872: NEG
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33909: LD_ADDR_VAR 0 42
33913: PUSH
33914: LD_INT 0
33916: PUSH
33917: LD_INT 0
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 0
33926: PUSH
33927: LD_INT 1
33929: NEG
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 1
33937: PUSH
33938: LD_INT 0
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 1
33947: PUSH
33948: LD_INT 1
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 0
33957: PUSH
33958: LD_INT 1
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 1
33967: NEG
33968: PUSH
33969: LD_INT 0
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 1
33978: NEG
33979: PUSH
33980: LD_INT 1
33982: NEG
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 1
33990: NEG
33991: PUSH
33992: LD_INT 2
33994: NEG
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 0
34002: PUSH
34003: LD_INT 2
34005: NEG
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 1
34013: PUSH
34014: LD_INT 1
34016: NEG
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 2
34024: PUSH
34025: LD_INT 1
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 2
34034: PUSH
34035: LD_INT 2
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 1
34044: PUSH
34045: LD_INT 2
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 0
34054: PUSH
34055: LD_INT 2
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 1
34064: NEG
34065: PUSH
34066: LD_INT 1
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 2
34075: NEG
34076: PUSH
34077: LD_INT 1
34079: NEG
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 2
34087: NEG
34088: PUSH
34089: LD_INT 2
34091: NEG
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 2
34099: NEG
34100: PUSH
34101: LD_INT 3
34103: NEG
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 1
34111: NEG
34112: PUSH
34113: LD_INT 3
34115: NEG
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 0
34123: PUSH
34124: LD_INT 3
34126: NEG
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 1
34134: PUSH
34135: LD_INT 2
34137: NEG
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 3
34145: PUSH
34146: LD_INT 2
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 3
34155: PUSH
34156: LD_INT 3
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 2
34165: PUSH
34166: LD_INT 3
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 1
34175: PUSH
34176: LD_INT 3
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: LD_INT 0
34185: PUSH
34186: LD_INT 3
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 1
34195: NEG
34196: PUSH
34197: LD_INT 2
34199: PUSH
34200: EMPTY
34201: LIST
34202: LIST
34203: PUSH
34204: LD_INT 3
34206: NEG
34207: PUSH
34208: LD_INT 2
34210: NEG
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 3
34218: NEG
34219: PUSH
34220: LD_INT 3
34222: NEG
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34259: LD_ADDR_VAR 0 43
34263: PUSH
34264: LD_INT 0
34266: PUSH
34267: LD_INT 0
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 0
34276: PUSH
34277: LD_INT 1
34279: NEG
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: PUSH
34285: LD_INT 1
34287: PUSH
34288: LD_INT 0
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 1
34297: PUSH
34298: LD_INT 1
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 0
34307: PUSH
34308: LD_INT 1
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 1
34317: NEG
34318: PUSH
34319: LD_INT 0
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 1
34328: NEG
34329: PUSH
34330: LD_INT 1
34332: NEG
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 1
34340: NEG
34341: PUSH
34342: LD_INT 2
34344: NEG
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 0
34352: PUSH
34353: LD_INT 2
34355: NEG
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 1
34363: PUSH
34364: LD_INT 1
34366: NEG
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 2
34374: PUSH
34375: LD_INT 0
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 2
34384: PUSH
34385: LD_INT 1
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 1
34394: PUSH
34395: LD_INT 2
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 0
34404: PUSH
34405: LD_INT 2
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 1
34414: NEG
34415: PUSH
34416: LD_INT 1
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 2
34425: NEG
34426: PUSH
34427: LD_INT 0
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 2
34436: NEG
34437: PUSH
34438: LD_INT 1
34440: NEG
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 1
34448: NEG
34449: PUSH
34450: LD_INT 3
34452: NEG
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 0
34460: PUSH
34461: LD_INT 3
34463: NEG
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 1
34471: PUSH
34472: LD_INT 2
34474: NEG
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 2
34482: PUSH
34483: LD_INT 1
34485: NEG
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 3
34493: PUSH
34494: LD_INT 0
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 3
34503: PUSH
34504: LD_INT 1
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 1
34513: PUSH
34514: LD_INT 3
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 0
34523: PUSH
34524: LD_INT 3
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 1
34533: NEG
34534: PUSH
34535: LD_INT 2
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 2
34544: NEG
34545: PUSH
34546: LD_INT 1
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: PUSH
34553: LD_INT 3
34555: NEG
34556: PUSH
34557: LD_INT 0
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 3
34566: NEG
34567: PUSH
34568: LD_INT 1
34570: NEG
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34607: LD_ADDR_VAR 0 44
34611: PUSH
34612: LD_INT 0
34614: PUSH
34615: LD_INT 0
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 0
34624: PUSH
34625: LD_INT 1
34627: NEG
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 1
34635: PUSH
34636: LD_INT 0
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 1
34645: PUSH
34646: LD_INT 1
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 0
34655: PUSH
34656: LD_INT 1
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 1
34665: NEG
34666: PUSH
34667: LD_INT 0
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 1
34676: NEG
34677: PUSH
34678: LD_INT 1
34680: NEG
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: LD_INT 1
34688: NEG
34689: PUSH
34690: LD_INT 2
34692: NEG
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 1
34700: PUSH
34701: LD_INT 1
34703: NEG
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 2
34711: PUSH
34712: LD_INT 0
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 2
34721: PUSH
34722: LD_INT 1
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 2
34731: PUSH
34732: LD_INT 2
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 1
34741: PUSH
34742: LD_INT 2
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 1
34751: NEG
34752: PUSH
34753: LD_INT 1
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 2
34762: NEG
34763: PUSH
34764: LD_INT 0
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 2
34773: NEG
34774: PUSH
34775: LD_INT 1
34777: NEG
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 2
34785: NEG
34786: PUSH
34787: LD_INT 2
34789: NEG
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 2
34797: NEG
34798: PUSH
34799: LD_INT 3
34801: NEG
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 2
34809: PUSH
34810: LD_INT 1
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 3
34820: PUSH
34821: LD_INT 0
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 3
34830: PUSH
34831: LD_INT 1
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: LD_INT 3
34840: PUSH
34841: LD_INT 2
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: PUSH
34848: LD_INT 3
34850: PUSH
34851: LD_INT 3
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 2
34860: PUSH
34861: LD_INT 3
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 2
34870: NEG
34871: PUSH
34872: LD_INT 1
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 3
34881: NEG
34882: PUSH
34883: LD_INT 0
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 3
34892: NEG
34893: PUSH
34894: LD_INT 1
34896: NEG
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 3
34904: NEG
34905: PUSH
34906: LD_INT 2
34908: NEG
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 3
34916: NEG
34917: PUSH
34918: LD_INT 3
34920: NEG
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34957: LD_ADDR_VAR 0 45
34961: PUSH
34962: LD_INT 0
34964: PUSH
34965: LD_INT 0
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 0
34974: PUSH
34975: LD_INT 1
34977: NEG
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 1
34985: PUSH
34986: LD_INT 0
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 1
34995: PUSH
34996: LD_INT 1
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: LD_INT 0
35005: PUSH
35006: LD_INT 1
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: PUSH
35013: LD_INT 1
35015: NEG
35016: PUSH
35017: LD_INT 0
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 1
35026: NEG
35027: PUSH
35028: LD_INT 1
35030: NEG
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 1
35038: NEG
35039: PUSH
35040: LD_INT 2
35042: NEG
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 0
35050: PUSH
35051: LD_INT 2
35053: NEG
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 1
35061: PUSH
35062: LD_INT 1
35064: NEG
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 2
35072: PUSH
35073: LD_INT 1
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 2
35082: PUSH
35083: LD_INT 2
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: PUSH
35090: LD_INT 1
35092: PUSH
35093: LD_INT 2
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 0
35102: PUSH
35103: LD_INT 2
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 1
35112: NEG
35113: PUSH
35114: LD_INT 1
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 2
35123: NEG
35124: PUSH
35125: LD_INT 1
35127: NEG
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 2
35135: NEG
35136: PUSH
35137: LD_INT 2
35139: NEG
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 2
35147: NEG
35148: PUSH
35149: LD_INT 3
35151: NEG
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 1
35159: NEG
35160: PUSH
35161: LD_INT 3
35163: NEG
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 0
35171: PUSH
35172: LD_INT 3
35174: NEG
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 1
35182: PUSH
35183: LD_INT 2
35185: NEG
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 3
35193: PUSH
35194: LD_INT 2
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 3
35203: PUSH
35204: LD_INT 3
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 2
35213: PUSH
35214: LD_INT 3
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: LD_INT 3
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 0
35233: PUSH
35234: LD_INT 3
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 1
35243: NEG
35244: PUSH
35245: LD_INT 2
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 3
35254: NEG
35255: PUSH
35256: LD_INT 2
35258: NEG
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 3
35266: NEG
35267: PUSH
35268: LD_INT 3
35270: NEG
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35307: LD_ADDR_VAR 0 46
35311: PUSH
35312: LD_INT 0
35314: PUSH
35315: LD_INT 0
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 0
35324: PUSH
35325: LD_INT 1
35327: NEG
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 1
35335: PUSH
35336: LD_INT 0
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 1
35345: PUSH
35346: LD_INT 1
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 0
35355: PUSH
35356: LD_INT 1
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 1
35365: NEG
35366: PUSH
35367: LD_INT 0
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 1
35376: NEG
35377: PUSH
35378: LD_INT 1
35380: NEG
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PUSH
35386: LD_INT 1
35388: NEG
35389: PUSH
35390: LD_INT 2
35392: NEG
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 0
35400: PUSH
35401: LD_INT 2
35403: NEG
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: LD_INT 1
35411: PUSH
35412: LD_INT 1
35414: NEG
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 2
35422: PUSH
35423: LD_INT 0
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 2
35432: PUSH
35433: LD_INT 1
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 1
35442: PUSH
35443: LD_INT 2
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 0
35452: PUSH
35453: LD_INT 2
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 1
35462: NEG
35463: PUSH
35464: LD_INT 1
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 2
35473: NEG
35474: PUSH
35475: LD_INT 0
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 2
35484: NEG
35485: PUSH
35486: LD_INT 1
35488: NEG
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: LD_INT 1
35496: NEG
35497: PUSH
35498: LD_INT 3
35500: NEG
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 0
35508: PUSH
35509: LD_INT 3
35511: NEG
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 1
35519: PUSH
35520: LD_INT 2
35522: NEG
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 2
35530: PUSH
35531: LD_INT 1
35533: NEG
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 3
35541: PUSH
35542: LD_INT 0
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 3
35551: PUSH
35552: LD_INT 1
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 1
35561: PUSH
35562: LD_INT 3
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 0
35571: PUSH
35572: LD_INT 3
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 1
35581: NEG
35582: PUSH
35583: LD_INT 2
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 2
35592: NEG
35593: PUSH
35594: LD_INT 1
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 3
35603: NEG
35604: PUSH
35605: LD_INT 0
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 3
35614: NEG
35615: PUSH
35616: LD_INT 1
35618: NEG
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35655: LD_ADDR_VAR 0 47
35659: PUSH
35660: LD_INT 0
35662: PUSH
35663: LD_INT 0
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 0
35672: PUSH
35673: LD_INT 1
35675: NEG
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 1
35683: PUSH
35684: LD_INT 0
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 1
35693: PUSH
35694: LD_INT 1
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 0
35703: PUSH
35704: LD_INT 1
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 1
35713: NEG
35714: PUSH
35715: LD_INT 0
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 1
35724: NEG
35725: PUSH
35726: LD_INT 1
35728: NEG
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 1
35736: NEG
35737: PUSH
35738: LD_INT 2
35740: NEG
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: LD_INT 2
35751: NEG
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 1
35759: PUSH
35760: LD_INT 1
35762: NEG
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 2
35770: NEG
35771: PUSH
35772: LD_INT 1
35774: NEG
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 2
35782: NEG
35783: PUSH
35784: LD_INT 2
35786: NEG
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35806: LD_ADDR_VAR 0 48
35810: PUSH
35811: LD_INT 0
35813: PUSH
35814: LD_INT 0
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 0
35823: PUSH
35824: LD_INT 1
35826: NEG
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 1
35834: PUSH
35835: LD_INT 0
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 1
35844: PUSH
35845: LD_INT 1
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 0
35854: PUSH
35855: LD_INT 1
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 1
35864: NEG
35865: PUSH
35866: LD_INT 0
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 1
35875: NEG
35876: PUSH
35877: LD_INT 1
35879: NEG
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 1
35887: NEG
35888: PUSH
35889: LD_INT 2
35891: NEG
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 0
35899: PUSH
35900: LD_INT 2
35902: NEG
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 1
35910: PUSH
35911: LD_INT 1
35913: NEG
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 2
35921: PUSH
35922: LD_INT 0
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 2
35931: PUSH
35932: LD_INT 1
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35953: LD_ADDR_VAR 0 49
35957: PUSH
35958: LD_INT 0
35960: PUSH
35961: LD_INT 0
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 0
35970: PUSH
35971: LD_INT 1
35973: NEG
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 1
35981: PUSH
35982: LD_INT 0
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 1
35991: PUSH
35992: LD_INT 1
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 0
36001: PUSH
36002: LD_INT 1
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 1
36011: NEG
36012: PUSH
36013: LD_INT 0
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 1
36022: NEG
36023: PUSH
36024: LD_INT 1
36026: NEG
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 1
36034: PUSH
36035: LD_INT 1
36037: NEG
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 2
36045: PUSH
36046: LD_INT 0
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 2
36055: PUSH
36056: LD_INT 1
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 2
36065: PUSH
36066: LD_INT 2
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 1
36075: PUSH
36076: LD_INT 2
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36097: LD_ADDR_VAR 0 50
36101: PUSH
36102: LD_INT 0
36104: PUSH
36105: LD_INT 0
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 0
36114: PUSH
36115: LD_INT 1
36117: NEG
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 1
36125: PUSH
36126: LD_INT 0
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 1
36135: PUSH
36136: LD_INT 1
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 0
36145: PUSH
36146: LD_INT 1
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 1
36155: NEG
36156: PUSH
36157: LD_INT 0
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 1
36166: NEG
36167: PUSH
36168: LD_INT 1
36170: NEG
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 2
36178: PUSH
36179: LD_INT 1
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 2
36188: PUSH
36189: LD_INT 2
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 1
36198: PUSH
36199: LD_INT 2
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 0
36208: PUSH
36209: LD_INT 2
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 1
36218: NEG
36219: PUSH
36220: LD_INT 1
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36241: LD_ADDR_VAR 0 51
36245: PUSH
36246: LD_INT 0
36248: PUSH
36249: LD_INT 0
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 0
36258: PUSH
36259: LD_INT 1
36261: NEG
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 1
36269: PUSH
36270: LD_INT 0
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 1
36279: PUSH
36280: LD_INT 1
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 0
36289: PUSH
36290: LD_INT 1
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 1
36299: NEG
36300: PUSH
36301: LD_INT 0
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 1
36310: NEG
36311: PUSH
36312: LD_INT 1
36314: NEG
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 1
36322: PUSH
36323: LD_INT 2
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: LD_INT 0
36332: PUSH
36333: LD_INT 2
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 1
36342: NEG
36343: PUSH
36344: LD_INT 1
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: LD_INT 2
36353: NEG
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 2
36364: NEG
36365: PUSH
36366: LD_INT 1
36368: NEG
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36388: LD_ADDR_VAR 0 52
36392: PUSH
36393: LD_INT 0
36395: PUSH
36396: LD_INT 0
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 0
36405: PUSH
36406: LD_INT 1
36408: NEG
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 1
36416: PUSH
36417: LD_INT 0
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 1
36426: PUSH
36427: LD_INT 1
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 0
36436: PUSH
36437: LD_INT 1
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 1
36446: NEG
36447: PUSH
36448: LD_INT 0
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 1
36457: NEG
36458: PUSH
36459: LD_INT 1
36461: NEG
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 1
36469: NEG
36470: PUSH
36471: LD_INT 2
36473: NEG
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 1
36481: NEG
36482: PUSH
36483: LD_INT 1
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 2
36492: NEG
36493: PUSH
36494: LD_INT 0
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 2
36503: NEG
36504: PUSH
36505: LD_INT 1
36507: NEG
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 2
36515: NEG
36516: PUSH
36517: LD_INT 2
36519: NEG
36520: PUSH
36521: EMPTY
36522: LIST
36523: LIST
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36539: LD_ADDR_VAR 0 53
36543: PUSH
36544: LD_INT 0
36546: PUSH
36547: LD_INT 0
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: LD_INT 0
36556: PUSH
36557: LD_INT 1
36559: NEG
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 1
36567: PUSH
36568: LD_INT 0
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 1
36577: PUSH
36578: LD_INT 1
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 0
36587: PUSH
36588: LD_INT 1
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 1
36597: NEG
36598: PUSH
36599: LD_INT 0
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 1
36608: NEG
36609: PUSH
36610: LD_INT 1
36612: NEG
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 1
36620: NEG
36621: PUSH
36622: LD_INT 2
36624: NEG
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 0
36632: PUSH
36633: LD_INT 2
36635: NEG
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 1
36643: PUSH
36644: LD_INT 1
36646: NEG
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 2
36654: PUSH
36655: LD_INT 0
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 2
36664: PUSH
36665: LD_INT 1
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 2
36674: PUSH
36675: LD_INT 2
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 1
36684: PUSH
36685: LD_INT 2
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 0
36694: PUSH
36695: LD_INT 2
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 1
36704: NEG
36705: PUSH
36706: LD_INT 1
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 2
36715: NEG
36716: PUSH
36717: LD_INT 0
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 2
36726: NEG
36727: PUSH
36728: LD_INT 1
36730: NEG
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 2
36738: NEG
36739: PUSH
36740: LD_INT 2
36742: NEG
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36769: LD_ADDR_VAR 0 54
36773: PUSH
36774: LD_INT 0
36776: PUSH
36777: LD_INT 0
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 0
36786: PUSH
36787: LD_INT 1
36789: NEG
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 1
36797: PUSH
36798: LD_INT 0
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 1
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 0
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 1
36827: NEG
36828: PUSH
36829: LD_INT 0
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: LD_INT 1
36842: NEG
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 1
36850: NEG
36851: PUSH
36852: LD_INT 2
36854: NEG
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 0
36862: PUSH
36863: LD_INT 2
36865: NEG
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 1
36873: PUSH
36874: LD_INT 1
36876: NEG
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 2
36884: PUSH
36885: LD_INT 0
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 2
36894: PUSH
36895: LD_INT 1
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 2
36904: PUSH
36905: LD_INT 2
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 1
36914: PUSH
36915: LD_INT 2
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 0
36924: PUSH
36925: LD_INT 2
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 1
36934: NEG
36935: PUSH
36936: LD_INT 1
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 2
36945: NEG
36946: PUSH
36947: LD_INT 0
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 2
36956: NEG
36957: PUSH
36958: LD_INT 1
36960: NEG
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 2
36968: NEG
36969: PUSH
36970: LD_INT 2
36972: NEG
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36999: LD_ADDR_VAR 0 55
37003: PUSH
37004: LD_INT 0
37006: PUSH
37007: LD_INT 0
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 0
37016: PUSH
37017: LD_INT 1
37019: NEG
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 1
37027: PUSH
37028: LD_INT 0
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 1
37037: PUSH
37038: LD_INT 1
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 0
37047: PUSH
37048: LD_INT 1
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 1
37057: NEG
37058: PUSH
37059: LD_INT 0
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 1
37068: NEG
37069: PUSH
37070: LD_INT 1
37072: NEG
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: PUSH
37078: LD_INT 1
37080: NEG
37081: PUSH
37082: LD_INT 2
37084: NEG
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 0
37092: PUSH
37093: LD_INT 2
37095: NEG
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 1
37103: PUSH
37104: LD_INT 1
37106: NEG
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 2
37114: PUSH
37115: LD_INT 0
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 2
37124: PUSH
37125: LD_INT 1
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 2
37134: PUSH
37135: LD_INT 2
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 1
37144: PUSH
37145: LD_INT 2
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: LD_INT 2
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 1
37164: NEG
37165: PUSH
37166: LD_INT 1
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 2
37175: NEG
37176: PUSH
37177: LD_INT 0
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 2
37186: NEG
37187: PUSH
37188: LD_INT 1
37190: NEG
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 2
37198: NEG
37199: PUSH
37200: LD_INT 2
37202: NEG
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37229: LD_ADDR_VAR 0 56
37233: PUSH
37234: LD_INT 0
37236: PUSH
37237: LD_INT 0
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 0
37246: PUSH
37247: LD_INT 1
37249: NEG
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 1
37257: PUSH
37258: LD_INT 0
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 1
37267: PUSH
37268: LD_INT 1
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 0
37277: PUSH
37278: LD_INT 1
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 1
37287: NEG
37288: PUSH
37289: LD_INT 0
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: LD_INT 1
37298: NEG
37299: PUSH
37300: LD_INT 1
37302: NEG
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 1
37310: NEG
37311: PUSH
37312: LD_INT 2
37314: NEG
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 0
37322: PUSH
37323: LD_INT 2
37325: NEG
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 1
37333: PUSH
37334: LD_INT 1
37336: NEG
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 2
37344: PUSH
37345: LD_INT 0
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 2
37354: PUSH
37355: LD_INT 1
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 2
37364: PUSH
37365: LD_INT 2
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 1
37374: PUSH
37375: LD_INT 2
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 0
37384: PUSH
37385: LD_INT 2
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 1
37394: NEG
37395: PUSH
37396: LD_INT 1
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 2
37405: NEG
37406: PUSH
37407: LD_INT 0
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 2
37416: NEG
37417: PUSH
37418: LD_INT 1
37420: NEG
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 2
37428: NEG
37429: PUSH
37430: LD_INT 2
37432: NEG
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37459: LD_ADDR_VAR 0 57
37463: PUSH
37464: LD_INT 0
37466: PUSH
37467: LD_INT 0
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 0
37476: PUSH
37477: LD_INT 1
37479: NEG
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: LD_INT 0
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 1
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 0
37507: PUSH
37508: LD_INT 1
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 1
37517: NEG
37518: PUSH
37519: LD_INT 0
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 1
37528: NEG
37529: PUSH
37530: LD_INT 1
37532: NEG
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 1
37540: NEG
37541: PUSH
37542: LD_INT 2
37544: NEG
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 0
37552: PUSH
37553: LD_INT 2
37555: NEG
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 1
37563: PUSH
37564: LD_INT 1
37566: NEG
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 2
37574: PUSH
37575: LD_INT 0
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 2
37584: PUSH
37585: LD_INT 1
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 2
37594: PUSH
37595: LD_INT 2
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 1
37604: PUSH
37605: LD_INT 2
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 0
37614: PUSH
37615: LD_INT 2
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 1
37624: NEG
37625: PUSH
37626: LD_INT 1
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 2
37635: NEG
37636: PUSH
37637: LD_INT 0
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 2
37646: NEG
37647: PUSH
37648: LD_INT 1
37650: NEG
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 2
37658: NEG
37659: PUSH
37660: LD_INT 2
37662: NEG
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37689: LD_ADDR_VAR 0 58
37693: PUSH
37694: LD_INT 0
37696: PUSH
37697: LD_INT 0
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 0
37706: PUSH
37707: LD_INT 1
37709: NEG
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 1
37717: PUSH
37718: LD_INT 0
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 1
37727: PUSH
37728: LD_INT 1
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 0
37737: PUSH
37738: LD_INT 1
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 1
37747: NEG
37748: PUSH
37749: LD_INT 0
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 1
37758: NEG
37759: PUSH
37760: LD_INT 1
37762: NEG
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 1
37770: NEG
37771: PUSH
37772: LD_INT 2
37774: NEG
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 0
37782: PUSH
37783: LD_INT 2
37785: NEG
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 1
37793: PUSH
37794: LD_INT 1
37796: NEG
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 2
37804: PUSH
37805: LD_INT 0
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 2
37814: PUSH
37815: LD_INT 1
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 2
37824: PUSH
37825: LD_INT 2
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 1
37834: PUSH
37835: LD_INT 2
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 0
37844: PUSH
37845: LD_INT 2
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 1
37854: NEG
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 2
37865: NEG
37866: PUSH
37867: LD_INT 0
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 2
37876: NEG
37877: PUSH
37878: LD_INT 1
37880: NEG
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 2
37888: NEG
37889: PUSH
37890: LD_INT 2
37892: NEG
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37919: LD_ADDR_VAR 0 59
37923: PUSH
37924: LD_INT 0
37926: PUSH
37927: LD_INT 0
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 0
37936: PUSH
37937: LD_INT 1
37939: NEG
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 1
37947: PUSH
37948: LD_INT 0
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 1
37957: PUSH
37958: LD_INT 1
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 0
37967: PUSH
37968: LD_INT 1
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 1
37977: NEG
37978: PUSH
37979: LD_INT 0
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 1
37988: NEG
37989: PUSH
37990: LD_INT 1
37992: NEG
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38007: LD_ADDR_VAR 0 60
38011: PUSH
38012: LD_INT 0
38014: PUSH
38015: LD_INT 0
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 0
38024: PUSH
38025: LD_INT 1
38027: NEG
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 1
38035: PUSH
38036: LD_INT 0
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 1
38045: PUSH
38046: LD_INT 1
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 0
38055: PUSH
38056: LD_INT 1
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 1
38065: NEG
38066: PUSH
38067: LD_INT 0
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 1
38076: NEG
38077: PUSH
38078: LD_INT 1
38080: NEG
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38095: LD_ADDR_VAR 0 61
38099: PUSH
38100: LD_INT 0
38102: PUSH
38103: LD_INT 0
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 0
38112: PUSH
38113: LD_INT 1
38115: NEG
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 1
38123: PUSH
38124: LD_INT 0
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 1
38133: PUSH
38134: LD_INT 1
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 0
38143: PUSH
38144: LD_INT 1
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 1
38153: NEG
38154: PUSH
38155: LD_INT 0
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 1
38164: NEG
38165: PUSH
38166: LD_INT 1
38168: NEG
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38183: LD_ADDR_VAR 0 62
38187: PUSH
38188: LD_INT 0
38190: PUSH
38191: LD_INT 0
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 0
38200: PUSH
38201: LD_INT 1
38203: NEG
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 1
38211: PUSH
38212: LD_INT 0
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 1
38221: PUSH
38222: LD_INT 1
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 0
38231: PUSH
38232: LD_INT 1
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 1
38241: NEG
38242: PUSH
38243: LD_INT 0
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 1
38252: NEG
38253: PUSH
38254: LD_INT 1
38256: NEG
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38271: LD_ADDR_VAR 0 63
38275: PUSH
38276: LD_INT 0
38278: PUSH
38279: LD_INT 0
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 0
38288: PUSH
38289: LD_INT 1
38291: NEG
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 1
38299: PUSH
38300: LD_INT 0
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 1
38309: PUSH
38310: LD_INT 1
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: LD_INT 1
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 1
38329: NEG
38330: PUSH
38331: LD_INT 0
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 1
38340: NEG
38341: PUSH
38342: LD_INT 1
38344: NEG
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38359: LD_ADDR_VAR 0 64
38363: PUSH
38364: LD_INT 0
38366: PUSH
38367: LD_INT 0
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 0
38376: PUSH
38377: LD_INT 1
38379: NEG
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 1
38387: PUSH
38388: LD_INT 0
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 1
38397: PUSH
38398: LD_INT 1
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 0
38407: PUSH
38408: LD_INT 1
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 1
38417: NEG
38418: PUSH
38419: LD_INT 0
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 1
38428: NEG
38429: PUSH
38430: LD_INT 1
38432: NEG
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: ST_TO_ADDR
// end ; 1 :
38447: GO 44344
38449: LD_INT 1
38451: DOUBLE
38452: EQUAL
38453: IFTRUE 38457
38455: GO 41080
38457: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38458: LD_ADDR_VAR 0 11
38462: PUSH
38463: LD_INT 1
38465: NEG
38466: PUSH
38467: LD_INT 3
38469: NEG
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 0
38477: PUSH
38478: LD_INT 3
38480: NEG
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 1
38488: PUSH
38489: LD_INT 2
38491: NEG
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: LIST
38501: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38502: LD_ADDR_VAR 0 12
38506: PUSH
38507: LD_INT 2
38509: PUSH
38510: LD_INT 1
38512: NEG
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 3
38520: PUSH
38521: LD_INT 0
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 3
38530: PUSH
38531: LD_INT 1
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: LIST
38542: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38543: LD_ADDR_VAR 0 13
38547: PUSH
38548: LD_INT 3
38550: PUSH
38551: LD_INT 2
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 3
38560: PUSH
38561: LD_INT 3
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 2
38570: PUSH
38571: LD_INT 3
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: LIST
38582: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38583: LD_ADDR_VAR 0 14
38587: PUSH
38588: LD_INT 1
38590: PUSH
38591: LD_INT 3
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 0
38600: PUSH
38601: LD_INT 3
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 1
38610: NEG
38611: PUSH
38612: LD_INT 2
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: LIST
38623: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38624: LD_ADDR_VAR 0 15
38628: PUSH
38629: LD_INT 2
38631: NEG
38632: PUSH
38633: LD_INT 1
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 3
38642: NEG
38643: PUSH
38644: LD_INT 0
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: LD_INT 3
38653: NEG
38654: PUSH
38655: LD_INT 1
38657: NEG
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: LIST
38667: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38668: LD_ADDR_VAR 0 16
38672: PUSH
38673: LD_INT 2
38675: NEG
38676: PUSH
38677: LD_INT 3
38679: NEG
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 3
38687: NEG
38688: PUSH
38689: LD_INT 2
38691: NEG
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 3
38699: NEG
38700: PUSH
38701: LD_INT 3
38703: NEG
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: LIST
38713: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38714: LD_ADDR_VAR 0 17
38718: PUSH
38719: LD_INT 1
38721: NEG
38722: PUSH
38723: LD_INT 3
38725: NEG
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 0
38733: PUSH
38734: LD_INT 3
38736: NEG
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 1
38744: PUSH
38745: LD_INT 2
38747: NEG
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: LIST
38757: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38758: LD_ADDR_VAR 0 18
38762: PUSH
38763: LD_INT 2
38765: PUSH
38766: LD_INT 1
38768: NEG
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 3
38776: PUSH
38777: LD_INT 0
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 3
38786: PUSH
38787: LD_INT 1
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: LIST
38798: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38799: LD_ADDR_VAR 0 19
38803: PUSH
38804: LD_INT 3
38806: PUSH
38807: LD_INT 2
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 3
38816: PUSH
38817: LD_INT 3
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 2
38826: PUSH
38827: LD_INT 3
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: LIST
38838: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38839: LD_ADDR_VAR 0 20
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: LD_INT 3
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 0
38856: PUSH
38857: LD_INT 3
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 1
38866: NEG
38867: PUSH
38868: LD_INT 2
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: LIST
38879: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38880: LD_ADDR_VAR 0 21
38884: PUSH
38885: LD_INT 2
38887: NEG
38888: PUSH
38889: LD_INT 1
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 3
38898: NEG
38899: PUSH
38900: LD_INT 0
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 3
38909: NEG
38910: PUSH
38911: LD_INT 1
38913: NEG
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: LIST
38923: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38924: LD_ADDR_VAR 0 22
38928: PUSH
38929: LD_INT 2
38931: NEG
38932: PUSH
38933: LD_INT 3
38935: NEG
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 3
38943: NEG
38944: PUSH
38945: LD_INT 2
38947: NEG
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 3
38955: NEG
38956: PUSH
38957: LD_INT 3
38959: NEG
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: LIST
38969: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
38970: LD_ADDR_VAR 0 23
38974: PUSH
38975: LD_INT 0
38977: PUSH
38978: LD_INT 3
38980: NEG
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 1
38988: NEG
38989: PUSH
38990: LD_INT 4
38992: NEG
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 1
39000: PUSH
39001: LD_INT 3
39003: NEG
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: LIST
39013: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
39014: LD_ADDR_VAR 0 24
39018: PUSH
39019: LD_INT 3
39021: PUSH
39022: LD_INT 0
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 3
39031: PUSH
39032: LD_INT 1
39034: NEG
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 4
39042: PUSH
39043: LD_INT 1
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: LIST
39054: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
39055: LD_ADDR_VAR 0 25
39059: PUSH
39060: LD_INT 3
39062: PUSH
39063: LD_INT 3
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 4
39072: PUSH
39073: LD_INT 3
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 3
39082: PUSH
39083: LD_INT 4
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: LIST
39094: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
39095: LD_ADDR_VAR 0 26
39099: PUSH
39100: LD_INT 0
39102: PUSH
39103: LD_INT 3
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 1
39112: PUSH
39113: LD_INT 4
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 1
39122: NEG
39123: PUSH
39124: LD_INT 3
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: LIST
39135: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
39136: LD_ADDR_VAR 0 27
39140: PUSH
39141: LD_INT 3
39143: NEG
39144: PUSH
39145: LD_INT 0
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 3
39154: NEG
39155: PUSH
39156: LD_INT 1
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 4
39165: NEG
39166: PUSH
39167: LD_INT 1
39169: NEG
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: LIST
39179: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
39180: LD_ADDR_VAR 0 28
39184: PUSH
39185: LD_INT 3
39187: NEG
39188: PUSH
39189: LD_INT 3
39191: NEG
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 3
39199: NEG
39200: PUSH
39201: LD_INT 4
39203: NEG
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 4
39211: NEG
39212: PUSH
39213: LD_INT 3
39215: NEG
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: LIST
39225: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
39226: LD_ADDR_VAR 0 29
39230: PUSH
39231: LD_INT 1
39233: NEG
39234: PUSH
39235: LD_INT 3
39237: NEG
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 0
39245: PUSH
39246: LD_INT 3
39248: NEG
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 1
39256: PUSH
39257: LD_INT 2
39259: NEG
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 1
39267: NEG
39268: PUSH
39269: LD_INT 4
39271: NEG
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 0
39279: PUSH
39280: LD_INT 4
39282: NEG
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 1
39290: PUSH
39291: LD_INT 3
39293: NEG
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 1
39301: NEG
39302: PUSH
39303: LD_INT 5
39305: NEG
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 0
39313: PUSH
39314: LD_INT 5
39316: NEG
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 1
39324: PUSH
39325: LD_INT 4
39327: NEG
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 1
39335: NEG
39336: PUSH
39337: LD_INT 6
39339: NEG
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: LD_INT 6
39350: NEG
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 1
39358: PUSH
39359: LD_INT 5
39361: NEG
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
39381: LD_ADDR_VAR 0 30
39385: PUSH
39386: LD_INT 2
39388: PUSH
39389: LD_INT 1
39391: NEG
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 3
39399: PUSH
39400: LD_INT 0
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 3
39409: PUSH
39410: LD_INT 1
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 3
39419: PUSH
39420: LD_INT 1
39422: NEG
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 4
39430: PUSH
39431: LD_INT 0
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 4
39440: PUSH
39441: LD_INT 1
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 4
39450: PUSH
39451: LD_INT 1
39453: NEG
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 5
39461: PUSH
39462: LD_INT 0
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 5
39471: PUSH
39472: LD_INT 1
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 5
39481: PUSH
39482: LD_INT 1
39484: NEG
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 6
39492: PUSH
39493: LD_INT 0
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 6
39502: PUSH
39503: LD_INT 1
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
39524: LD_ADDR_VAR 0 31
39528: PUSH
39529: LD_INT 3
39531: PUSH
39532: LD_INT 2
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 3
39541: PUSH
39542: LD_INT 3
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 2
39551: PUSH
39552: LD_INT 3
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 4
39561: PUSH
39562: LD_INT 3
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 4
39571: PUSH
39572: LD_INT 4
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 3
39581: PUSH
39582: LD_INT 4
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 5
39591: PUSH
39592: LD_INT 4
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 5
39601: PUSH
39602: LD_INT 5
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 4
39611: PUSH
39612: LD_INT 5
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 6
39621: PUSH
39622: LD_INT 5
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 6
39631: PUSH
39632: LD_INT 6
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 5
39641: PUSH
39642: LD_INT 6
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
39663: LD_ADDR_VAR 0 32
39667: PUSH
39668: LD_INT 1
39670: PUSH
39671: LD_INT 3
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 0
39680: PUSH
39681: LD_INT 3
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 1
39690: NEG
39691: PUSH
39692: LD_INT 2
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 1
39701: PUSH
39702: LD_INT 4
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 0
39711: PUSH
39712: LD_INT 4
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 1
39721: NEG
39722: PUSH
39723: LD_INT 3
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 1
39732: PUSH
39733: LD_INT 5
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 0
39742: PUSH
39743: LD_INT 5
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 1
39752: NEG
39753: PUSH
39754: LD_INT 4
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 1
39763: PUSH
39764: LD_INT 6
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 0
39773: PUSH
39774: LD_INT 6
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 1
39783: NEG
39784: PUSH
39785: LD_INT 5
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39806: LD_ADDR_VAR 0 33
39810: PUSH
39811: LD_INT 2
39813: NEG
39814: PUSH
39815: LD_INT 1
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 3
39824: NEG
39825: PUSH
39826: LD_INT 0
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 3
39835: NEG
39836: PUSH
39837: LD_INT 1
39839: NEG
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 3
39847: NEG
39848: PUSH
39849: LD_INT 1
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 4
39858: NEG
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 4
39869: NEG
39870: PUSH
39871: LD_INT 1
39873: NEG
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 4
39881: NEG
39882: PUSH
39883: LD_INT 1
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 5
39892: NEG
39893: PUSH
39894: LD_INT 0
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 5
39903: NEG
39904: PUSH
39905: LD_INT 1
39907: NEG
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 5
39915: NEG
39916: PUSH
39917: LD_INT 1
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 6
39926: NEG
39927: PUSH
39928: LD_INT 0
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 6
39937: NEG
39938: PUSH
39939: LD_INT 1
39941: NEG
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
39961: LD_ADDR_VAR 0 34
39965: PUSH
39966: LD_INT 2
39968: NEG
39969: PUSH
39970: LD_INT 3
39972: NEG
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 3
39980: NEG
39981: PUSH
39982: LD_INT 2
39984: NEG
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 3
39992: NEG
39993: PUSH
39994: LD_INT 3
39996: NEG
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 3
40004: NEG
40005: PUSH
40006: LD_INT 4
40008: NEG
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 4
40016: NEG
40017: PUSH
40018: LD_INT 3
40020: NEG
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 4
40028: NEG
40029: PUSH
40030: LD_INT 4
40032: NEG
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 4
40040: NEG
40041: PUSH
40042: LD_INT 5
40044: NEG
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 5
40052: NEG
40053: PUSH
40054: LD_INT 4
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 5
40064: NEG
40065: PUSH
40066: LD_INT 5
40068: NEG
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 5
40076: NEG
40077: PUSH
40078: LD_INT 6
40080: NEG
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 6
40088: NEG
40089: PUSH
40090: LD_INT 5
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 6
40100: NEG
40101: PUSH
40102: LD_INT 6
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
40124: LD_ADDR_VAR 0 41
40128: PUSH
40129: LD_INT 0
40131: PUSH
40132: LD_INT 2
40134: NEG
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 1
40142: NEG
40143: PUSH
40144: LD_INT 3
40146: NEG
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 1
40154: PUSH
40155: LD_INT 2
40157: NEG
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: LIST
40167: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
40168: LD_ADDR_VAR 0 42
40172: PUSH
40173: LD_INT 2
40175: PUSH
40176: LD_INT 0
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 2
40185: PUSH
40186: LD_INT 1
40188: NEG
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 3
40196: PUSH
40197: LD_INT 1
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: LIST
40208: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
40209: LD_ADDR_VAR 0 43
40213: PUSH
40214: LD_INT 2
40216: PUSH
40217: LD_INT 2
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 3
40226: PUSH
40227: LD_INT 2
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 2
40236: PUSH
40237: LD_INT 3
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: LIST
40248: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
40249: LD_ADDR_VAR 0 44
40253: PUSH
40254: LD_INT 0
40256: PUSH
40257: LD_INT 2
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 1
40266: PUSH
40267: LD_INT 3
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: LD_INT 2
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: LIST
40289: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40290: LD_ADDR_VAR 0 45
40294: PUSH
40295: LD_INT 2
40297: NEG
40298: PUSH
40299: LD_INT 0
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 2
40308: NEG
40309: PUSH
40310: LD_INT 1
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 3
40319: NEG
40320: PUSH
40321: LD_INT 1
40323: NEG
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: LIST
40333: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
40334: LD_ADDR_VAR 0 46
40338: PUSH
40339: LD_INT 2
40341: NEG
40342: PUSH
40343: LD_INT 2
40345: NEG
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 2
40353: NEG
40354: PUSH
40355: LD_INT 3
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 3
40365: NEG
40366: PUSH
40367: LD_INT 2
40369: NEG
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: LIST
40379: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
40380: LD_ADDR_VAR 0 47
40384: PUSH
40385: LD_INT 2
40387: NEG
40388: PUSH
40389: LD_INT 3
40391: NEG
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 1
40399: NEG
40400: PUSH
40401: LD_INT 3
40403: NEG
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40413: LD_ADDR_VAR 0 48
40417: PUSH
40418: LD_INT 1
40420: PUSH
40421: LD_INT 2
40423: NEG
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 2
40431: PUSH
40432: LD_INT 1
40434: NEG
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
40444: LD_ADDR_VAR 0 49
40448: PUSH
40449: LD_INT 3
40451: PUSH
40452: LD_INT 1
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 3
40461: PUSH
40462: LD_INT 2
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
40473: LD_ADDR_VAR 0 50
40477: PUSH
40478: LD_INT 2
40480: PUSH
40481: LD_INT 3
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 1
40490: PUSH
40491: LD_INT 3
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40502: LD_ADDR_VAR 0 51
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: LD_INT 2
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 2
40520: NEG
40521: PUSH
40522: LD_INT 1
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40533: LD_ADDR_VAR 0 52
40537: PUSH
40538: LD_INT 3
40540: NEG
40541: PUSH
40542: LD_INT 1
40544: NEG
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 3
40552: NEG
40553: PUSH
40554: LD_INT 2
40556: NEG
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40566: LD_ADDR_VAR 0 53
40570: PUSH
40571: LD_INT 1
40573: NEG
40574: PUSH
40575: LD_INT 3
40577: NEG
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: LD_INT 3
40588: NEG
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 1
40596: PUSH
40597: LD_INT 2
40599: NEG
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: LIST
40609: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40610: LD_ADDR_VAR 0 54
40614: PUSH
40615: LD_INT 2
40617: PUSH
40618: LD_INT 1
40620: NEG
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 3
40628: PUSH
40629: LD_INT 0
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 3
40638: PUSH
40639: LD_INT 1
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: LIST
40650: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40651: LD_ADDR_VAR 0 55
40655: PUSH
40656: LD_INT 3
40658: PUSH
40659: LD_INT 2
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 3
40668: PUSH
40669: LD_INT 3
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 2
40678: PUSH
40679: LD_INT 3
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: LIST
40690: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40691: LD_ADDR_VAR 0 56
40695: PUSH
40696: LD_INT 1
40698: PUSH
40699: LD_INT 3
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 0
40708: PUSH
40709: LD_INT 3
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 1
40718: NEG
40719: PUSH
40720: LD_INT 2
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: LIST
40731: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40732: LD_ADDR_VAR 0 57
40736: PUSH
40737: LD_INT 2
40739: NEG
40740: PUSH
40741: LD_INT 1
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 3
40750: NEG
40751: PUSH
40752: LD_INT 0
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 3
40761: NEG
40762: PUSH
40763: LD_INT 1
40765: NEG
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: LIST
40775: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40776: LD_ADDR_VAR 0 58
40780: PUSH
40781: LD_INT 2
40783: NEG
40784: PUSH
40785: LD_INT 3
40787: NEG
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 3
40795: NEG
40796: PUSH
40797: LD_INT 2
40799: NEG
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 3
40807: NEG
40808: PUSH
40809: LD_INT 3
40811: NEG
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: LIST
40821: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40822: LD_ADDR_VAR 0 59
40826: PUSH
40827: LD_INT 1
40829: NEG
40830: PUSH
40831: LD_INT 2
40833: NEG
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: LD_INT 2
40844: NEG
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 1
40852: PUSH
40853: LD_INT 1
40855: NEG
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: LIST
40865: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40866: LD_ADDR_VAR 0 60
40870: PUSH
40871: LD_INT 1
40873: PUSH
40874: LD_INT 1
40876: NEG
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 2
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 2
40894: PUSH
40895: LD_INT 1
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: LIST
40906: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40907: LD_ADDR_VAR 0 61
40911: PUSH
40912: LD_INT 2
40914: PUSH
40915: LD_INT 1
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 2
40924: PUSH
40925: LD_INT 2
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 1
40934: PUSH
40935: LD_INT 2
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: LIST
40946: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40947: LD_ADDR_VAR 0 62
40951: PUSH
40952: LD_INT 1
40954: PUSH
40955: LD_INT 2
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 0
40964: PUSH
40965: LD_INT 2
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 1
40974: NEG
40975: PUSH
40976: LD_INT 1
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: LIST
40987: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40988: LD_ADDR_VAR 0 63
40992: PUSH
40993: LD_INT 1
40995: NEG
40996: PUSH
40997: LD_INT 1
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 2
41006: NEG
41007: PUSH
41008: LD_INT 0
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 2
41017: NEG
41018: PUSH
41019: LD_INT 1
41021: NEG
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: LIST
41031: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41032: LD_ADDR_VAR 0 64
41036: PUSH
41037: LD_INT 1
41039: NEG
41040: PUSH
41041: LD_INT 2
41043: NEG
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 2
41051: NEG
41052: PUSH
41053: LD_INT 1
41055: NEG
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 2
41063: NEG
41064: PUSH
41065: LD_INT 2
41067: NEG
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: LIST
41077: ST_TO_ADDR
// end ; 2 :
41078: GO 44344
41080: LD_INT 2
41082: DOUBLE
41083: EQUAL
41084: IFTRUE 41088
41086: GO 44343
41088: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
41089: LD_ADDR_VAR 0 29
41093: PUSH
41094: LD_INT 4
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 4
41106: PUSH
41107: LD_INT 1
41109: NEG
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 5
41117: PUSH
41118: LD_INT 0
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 5
41127: PUSH
41128: LD_INT 1
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 4
41137: PUSH
41138: LD_INT 1
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 3
41147: PUSH
41148: LD_INT 0
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 3
41157: PUSH
41158: LD_INT 1
41160: NEG
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 3
41168: PUSH
41169: LD_INT 2
41171: NEG
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 5
41179: PUSH
41180: LD_INT 2
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 3
41189: PUSH
41190: LD_INT 3
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 3
41199: PUSH
41200: LD_INT 2
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 4
41209: PUSH
41210: LD_INT 3
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 4
41219: PUSH
41220: LD_INT 4
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 3
41229: PUSH
41230: LD_INT 4
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 2
41239: PUSH
41240: LD_INT 3
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 2
41249: PUSH
41250: LD_INT 2
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 4
41259: PUSH
41260: LD_INT 2
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 2
41269: PUSH
41270: LD_INT 4
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 0
41279: PUSH
41280: LD_INT 4
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: LD_INT 3
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 1
41299: PUSH
41300: LD_INT 4
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 1
41309: PUSH
41310: LD_INT 5
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 0
41319: PUSH
41320: LD_INT 5
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 1
41329: NEG
41330: PUSH
41331: LD_INT 4
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 1
41340: NEG
41341: PUSH
41342: LD_INT 3
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 2
41351: PUSH
41352: LD_INT 5
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 2
41361: NEG
41362: PUSH
41363: LD_INT 3
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 3
41372: NEG
41373: PUSH
41374: LD_INT 0
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 3
41383: NEG
41384: PUSH
41385: LD_INT 1
41387: NEG
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 2
41395: NEG
41396: PUSH
41397: LD_INT 0
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 2
41406: NEG
41407: PUSH
41408: LD_INT 1
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 3
41417: NEG
41418: PUSH
41419: LD_INT 1
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 4
41428: NEG
41429: PUSH
41430: LD_INT 0
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 4
41439: NEG
41440: PUSH
41441: LD_INT 1
41443: NEG
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 4
41451: NEG
41452: PUSH
41453: LD_INT 2
41455: NEG
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 2
41463: NEG
41464: PUSH
41465: LD_INT 2
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 4
41474: NEG
41475: PUSH
41476: LD_INT 4
41478: NEG
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 4
41486: NEG
41487: PUSH
41488: LD_INT 5
41490: NEG
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 3
41498: NEG
41499: PUSH
41500: LD_INT 4
41502: NEG
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 3
41510: NEG
41511: PUSH
41512: LD_INT 3
41514: NEG
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 4
41522: NEG
41523: PUSH
41524: LD_INT 3
41526: NEG
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 5
41534: NEG
41535: PUSH
41536: LD_INT 4
41538: NEG
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 5
41546: NEG
41547: PUSH
41548: LD_INT 5
41550: NEG
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 3
41558: NEG
41559: PUSH
41560: LD_INT 5
41562: NEG
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 5
41570: NEG
41571: PUSH
41572: LD_INT 3
41574: NEG
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
41627: LD_ADDR_VAR 0 30
41631: PUSH
41632: LD_INT 4
41634: PUSH
41635: LD_INT 4
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 4
41644: PUSH
41645: LD_INT 3
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 5
41654: PUSH
41655: LD_INT 4
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 5
41664: PUSH
41665: LD_INT 5
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 4
41674: PUSH
41675: LD_INT 5
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 3
41684: PUSH
41685: LD_INT 4
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 3
41694: PUSH
41695: LD_INT 3
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 5
41704: PUSH
41705: LD_INT 3
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 3
41714: PUSH
41715: LD_INT 5
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 0
41724: PUSH
41725: LD_INT 3
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 0
41734: PUSH
41735: LD_INT 2
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 1
41744: PUSH
41745: LD_INT 3
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 1
41754: PUSH
41755: LD_INT 4
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: LD_INT 4
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 1
41774: NEG
41775: PUSH
41776: LD_INT 3
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 1
41785: NEG
41786: PUSH
41787: LD_INT 2
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 2
41796: PUSH
41797: LD_INT 4
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 2
41806: NEG
41807: PUSH
41808: LD_INT 2
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 4
41817: NEG
41818: PUSH
41819: LD_INT 0
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 4
41828: NEG
41829: PUSH
41830: LD_INT 1
41832: NEG
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 3
41840: NEG
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 3
41851: NEG
41852: PUSH
41853: LD_INT 1
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: PUSH
41860: LD_INT 4
41862: NEG
41863: PUSH
41864: LD_INT 1
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 5
41873: NEG
41874: PUSH
41875: LD_INT 0
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 5
41884: NEG
41885: PUSH
41886: LD_INT 1
41888: NEG
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 5
41896: NEG
41897: PUSH
41898: LD_INT 2
41900: NEG
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 3
41908: NEG
41909: PUSH
41910: LD_INT 2
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 3
41919: NEG
41920: PUSH
41921: LD_INT 3
41923: NEG
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 3
41931: NEG
41932: PUSH
41933: LD_INT 4
41935: NEG
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 2
41943: NEG
41944: PUSH
41945: LD_INT 3
41947: NEG
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 2
41955: NEG
41956: PUSH
41957: LD_INT 2
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 3
41967: NEG
41968: PUSH
41969: LD_INT 2
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 4
41979: NEG
41980: PUSH
41981: LD_INT 3
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 4
41991: NEG
41992: PUSH
41993: LD_INT 4
41995: NEG
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 2
42003: NEG
42004: PUSH
42005: LD_INT 4
42007: NEG
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 4
42015: NEG
42016: PUSH
42017: LD_INT 2
42019: NEG
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: LD_INT 4
42030: NEG
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 0
42038: PUSH
42039: LD_INT 5
42041: NEG
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: LD_INT 4
42052: NEG
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 1
42060: PUSH
42061: LD_INT 3
42063: NEG
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 0
42071: PUSH
42072: LD_INT 3
42074: NEG
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 1
42082: NEG
42083: PUSH
42084: LD_INT 4
42086: NEG
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 1
42094: NEG
42095: PUSH
42096: LD_INT 5
42098: NEG
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 2
42106: PUSH
42107: LD_INT 3
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 2
42117: NEG
42118: PUSH
42119: LD_INT 5
42121: NEG
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
42174: LD_ADDR_VAR 0 31
42178: PUSH
42179: LD_INT 0
42181: PUSH
42182: LD_INT 4
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 0
42191: PUSH
42192: LD_INT 3
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 1
42201: PUSH
42202: LD_INT 4
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 1
42211: PUSH
42212: LD_INT 5
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 0
42221: PUSH
42222: LD_INT 5
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: NEG
42232: PUSH
42233: LD_INT 4
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 1
42242: NEG
42243: PUSH
42244: LD_INT 3
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 2
42253: PUSH
42254: LD_INT 5
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 2
42263: NEG
42264: PUSH
42265: LD_INT 3
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 3
42274: NEG
42275: PUSH
42276: LD_INT 0
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 3
42285: NEG
42286: PUSH
42287: LD_INT 1
42289: NEG
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 2
42297: NEG
42298: PUSH
42299: LD_INT 0
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 2
42308: NEG
42309: PUSH
42310: LD_INT 1
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 3
42319: NEG
42320: PUSH
42321: LD_INT 1
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 4
42330: NEG
42331: PUSH
42332: LD_INT 0
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 4
42341: NEG
42342: PUSH
42343: LD_INT 1
42345: NEG
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 4
42353: NEG
42354: PUSH
42355: LD_INT 2
42357: NEG
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 2
42365: NEG
42366: PUSH
42367: LD_INT 2
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 4
42376: NEG
42377: PUSH
42378: LD_INT 4
42380: NEG
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 4
42388: NEG
42389: PUSH
42390: LD_INT 5
42392: NEG
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 3
42400: NEG
42401: PUSH
42402: LD_INT 4
42404: NEG
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 3
42412: NEG
42413: PUSH
42414: LD_INT 3
42416: NEG
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 4
42424: NEG
42425: PUSH
42426: LD_INT 3
42428: NEG
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 5
42436: NEG
42437: PUSH
42438: LD_INT 4
42440: NEG
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 5
42448: NEG
42449: PUSH
42450: LD_INT 5
42452: NEG
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 3
42460: NEG
42461: PUSH
42462: LD_INT 5
42464: NEG
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 5
42472: NEG
42473: PUSH
42474: LD_INT 3
42476: NEG
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 0
42484: PUSH
42485: LD_INT 3
42487: NEG
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 0
42495: PUSH
42496: LD_INT 4
42498: NEG
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: LD_INT 3
42509: NEG
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 1
42517: PUSH
42518: LD_INT 2
42520: NEG
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: LD_INT 2
42531: NEG
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 1
42539: NEG
42540: PUSH
42541: LD_INT 3
42543: NEG
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 1
42551: NEG
42552: PUSH
42553: LD_INT 4
42555: NEG
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 2
42563: PUSH
42564: LD_INT 2
42566: NEG
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 2
42574: NEG
42575: PUSH
42576: LD_INT 4
42578: NEG
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 4
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 4
42596: PUSH
42597: LD_INT 1
42599: NEG
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 5
42607: PUSH
42608: LD_INT 0
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 5
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 4
42627: PUSH
42628: LD_INT 1
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 3
42637: PUSH
42638: LD_INT 0
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 3
42647: PUSH
42648: LD_INT 1
42650: NEG
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 3
42658: PUSH
42659: LD_INT 2
42661: NEG
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 5
42669: PUSH
42670: LD_INT 2
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42724: LD_ADDR_VAR 0 32
42728: PUSH
42729: LD_INT 4
42731: NEG
42732: PUSH
42733: LD_INT 0
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 4
42742: NEG
42743: PUSH
42744: LD_INT 1
42746: NEG
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 3
42754: NEG
42755: PUSH
42756: LD_INT 0
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 3
42765: NEG
42766: PUSH
42767: LD_INT 1
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 4
42776: NEG
42777: PUSH
42778: LD_INT 1
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 5
42787: NEG
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 5
42798: NEG
42799: PUSH
42800: LD_INT 1
42802: NEG
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 5
42810: NEG
42811: PUSH
42812: LD_INT 2
42814: NEG
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 3
42822: NEG
42823: PUSH
42824: LD_INT 2
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 3
42833: NEG
42834: PUSH
42835: LD_INT 3
42837: NEG
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 3
42845: NEG
42846: PUSH
42847: LD_INT 4
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 2
42857: NEG
42858: PUSH
42859: LD_INT 3
42861: NEG
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 2
42869: NEG
42870: PUSH
42871: LD_INT 2
42873: NEG
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 3
42881: NEG
42882: PUSH
42883: LD_INT 2
42885: NEG
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 4
42893: NEG
42894: PUSH
42895: LD_INT 3
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 4
42905: NEG
42906: PUSH
42907: LD_INT 4
42909: NEG
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 2
42917: NEG
42918: PUSH
42919: LD_INT 4
42921: NEG
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 4
42929: NEG
42930: PUSH
42931: LD_INT 2
42933: NEG
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: LD_INT 4
42944: NEG
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: LD_INT 5
42955: NEG
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 1
42963: PUSH
42964: LD_INT 4
42966: NEG
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 1
42974: PUSH
42975: LD_INT 3
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: LD_INT 3
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 1
42996: NEG
42997: PUSH
42998: LD_INT 4
43000: NEG
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: LD_INT 5
43012: NEG
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 2
43020: PUSH
43021: LD_INT 3
43023: NEG
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 2
43031: NEG
43032: PUSH
43033: LD_INT 5
43035: NEG
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 3
43043: PUSH
43044: LD_INT 0
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 3
43053: PUSH
43054: LD_INT 1
43056: NEG
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 4
43064: PUSH
43065: LD_INT 0
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 4
43074: PUSH
43075: LD_INT 1
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 3
43084: PUSH
43085: LD_INT 1
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 2
43094: PUSH
43095: LD_INT 0
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 2
43104: PUSH
43105: LD_INT 1
43107: NEG
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 2
43115: PUSH
43116: LD_INT 2
43118: NEG
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 4
43126: PUSH
43127: LD_INT 2
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 4
43136: PUSH
43137: LD_INT 4
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 4
43146: PUSH
43147: LD_INT 3
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 5
43156: PUSH
43157: LD_INT 4
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 5
43166: PUSH
43167: LD_INT 5
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 4
43176: PUSH
43177: LD_INT 5
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 3
43186: PUSH
43187: LD_INT 4
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 3
43196: PUSH
43197: LD_INT 3
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 5
43206: PUSH
43207: LD_INT 3
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 3
43216: PUSH
43217: LD_INT 5
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
43271: LD_ADDR_VAR 0 33
43275: PUSH
43276: LD_INT 4
43278: NEG
43279: PUSH
43280: LD_INT 4
43282: NEG
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 4
43290: NEG
43291: PUSH
43292: LD_INT 5
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 3
43302: NEG
43303: PUSH
43304: LD_INT 4
43306: NEG
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 3
43314: NEG
43315: PUSH
43316: LD_INT 3
43318: NEG
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 4
43326: NEG
43327: PUSH
43328: LD_INT 3
43330: NEG
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 5
43338: NEG
43339: PUSH
43340: LD_INT 4
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 5
43350: NEG
43351: PUSH
43352: LD_INT 5
43354: NEG
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 3
43362: NEG
43363: PUSH
43364: LD_INT 5
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 5
43374: NEG
43375: PUSH
43376: LD_INT 3
43378: NEG
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 0
43386: PUSH
43387: LD_INT 3
43389: NEG
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 0
43397: PUSH
43398: LD_INT 4
43400: NEG
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: LD_INT 3
43411: NEG
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 1
43419: PUSH
43420: LD_INT 2
43422: NEG
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 0
43430: PUSH
43431: LD_INT 2
43433: NEG
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 1
43441: NEG
43442: PUSH
43443: LD_INT 3
43445: NEG
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: LD_INT 4
43457: NEG
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 2
43465: PUSH
43466: LD_INT 2
43468: NEG
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 2
43476: NEG
43477: PUSH
43478: LD_INT 4
43480: NEG
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 4
43488: PUSH
43489: LD_INT 0
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 4
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 5
43509: PUSH
43510: LD_INT 0
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 5
43519: PUSH
43520: LD_INT 1
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 4
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 3
43539: PUSH
43540: LD_INT 0
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 3
43549: PUSH
43550: LD_INT 1
43552: NEG
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 3
43560: PUSH
43561: LD_INT 2
43563: NEG
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 5
43571: PUSH
43572: LD_INT 2
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 3
43581: PUSH
43582: LD_INT 3
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 3
43591: PUSH
43592: LD_INT 2
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 4
43601: PUSH
43602: LD_INT 3
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 4
43611: PUSH
43612: LD_INT 4
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 3
43621: PUSH
43622: LD_INT 4
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 2
43631: PUSH
43632: LD_INT 3
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 2
43641: PUSH
43642: LD_INT 2
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 4
43651: PUSH
43652: LD_INT 2
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 2
43661: PUSH
43662: LD_INT 4
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: LD_INT 4
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 0
43681: PUSH
43682: LD_INT 3
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: PUSH
43692: LD_INT 4
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: PUSH
43702: LD_INT 5
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 0
43711: PUSH
43712: LD_INT 5
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 1
43721: NEG
43722: PUSH
43723: LD_INT 4
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: NEG
43733: PUSH
43734: LD_INT 3
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 2
43743: PUSH
43744: LD_INT 5
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 2
43753: NEG
43754: PUSH
43755: LD_INT 3
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43809: LD_ADDR_VAR 0 34
43813: PUSH
43814: LD_INT 0
43816: PUSH
43817: LD_INT 4
43819: NEG
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: LD_INT 5
43830: NEG
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 1
43838: PUSH
43839: LD_INT 4
43841: NEG
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 1
43849: PUSH
43850: LD_INT 3
43852: NEG
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: LD_INT 3
43863: NEG
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 1
43871: NEG
43872: PUSH
43873: LD_INT 4
43875: NEG
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 1
43883: NEG
43884: PUSH
43885: LD_INT 5
43887: NEG
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 2
43895: PUSH
43896: LD_INT 3
43898: NEG
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 2
43906: NEG
43907: PUSH
43908: LD_INT 5
43910: NEG
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 3
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 3
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 4
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 4
43949: PUSH
43950: LD_INT 1
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 3
43959: PUSH
43960: LD_INT 1
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 2
43969: PUSH
43970: LD_INT 0
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 2
43979: PUSH
43980: LD_INT 1
43982: NEG
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 2
43990: PUSH
43991: LD_INT 2
43993: NEG
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 4
44001: PUSH
44002: LD_INT 2
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 4
44011: PUSH
44012: LD_INT 4
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 4
44021: PUSH
44022: LD_INT 3
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 5
44031: PUSH
44032: LD_INT 4
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 5
44041: PUSH
44042: LD_INT 5
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 4
44051: PUSH
44052: LD_INT 5
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 3
44061: PUSH
44062: LD_INT 4
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 3
44071: PUSH
44072: LD_INT 3
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 5
44081: PUSH
44082: LD_INT 3
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 3
44091: PUSH
44092: LD_INT 5
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: LD_INT 3
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 0
44111: PUSH
44112: LD_INT 2
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 1
44121: PUSH
44122: LD_INT 3
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: LD_INT 4
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: LD_INT 4
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 1
44151: NEG
44152: PUSH
44153: LD_INT 3
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 1
44162: NEG
44163: PUSH
44164: LD_INT 2
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 2
44173: PUSH
44174: LD_INT 4
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 2
44183: NEG
44184: PUSH
44185: LD_INT 2
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 4
44194: NEG
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 4
44205: NEG
44206: PUSH
44207: LD_INT 1
44209: NEG
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 3
44217: NEG
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 3
44228: NEG
44229: PUSH
44230: LD_INT 1
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 4
44239: NEG
44240: PUSH
44241: LD_INT 1
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 5
44250: NEG
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 5
44261: NEG
44262: PUSH
44263: LD_INT 1
44265: NEG
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 5
44273: NEG
44274: PUSH
44275: LD_INT 2
44277: NEG
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 3
44285: NEG
44286: PUSH
44287: LD_INT 2
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: ST_TO_ADDR
// end ; end ;
44341: GO 44344
44343: POP
// case btype of b_depot , b_warehouse :
44344: LD_VAR 0 1
44348: PUSH
44349: LD_INT 0
44351: DOUBLE
44352: EQUAL
44353: IFTRUE 44363
44355: LD_INT 1
44357: DOUBLE
44358: EQUAL
44359: IFTRUE 44363
44361: GO 44564
44363: POP
// case nation of nation_american :
44364: LD_VAR 0 5
44368: PUSH
44369: LD_INT 1
44371: DOUBLE
44372: EQUAL
44373: IFTRUE 44377
44375: GO 44433
44377: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
44378: LD_ADDR_VAR 0 9
44382: PUSH
44383: LD_VAR 0 11
44387: PUSH
44388: LD_VAR 0 12
44392: PUSH
44393: LD_VAR 0 13
44397: PUSH
44398: LD_VAR 0 14
44402: PUSH
44403: LD_VAR 0 15
44407: PUSH
44408: LD_VAR 0 16
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: PUSH
44421: LD_VAR 0 4
44425: PUSH
44426: LD_INT 1
44428: PLUS
44429: ARRAY
44430: ST_TO_ADDR
44431: GO 44562
44433: LD_INT 2
44435: DOUBLE
44436: EQUAL
44437: IFTRUE 44441
44439: GO 44497
44441: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
44442: LD_ADDR_VAR 0 9
44446: PUSH
44447: LD_VAR 0 17
44451: PUSH
44452: LD_VAR 0 18
44456: PUSH
44457: LD_VAR 0 19
44461: PUSH
44462: LD_VAR 0 20
44466: PUSH
44467: LD_VAR 0 21
44471: PUSH
44472: LD_VAR 0 22
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: PUSH
44485: LD_VAR 0 4
44489: PUSH
44490: LD_INT 1
44492: PLUS
44493: ARRAY
44494: ST_TO_ADDR
44495: GO 44562
44497: LD_INT 3
44499: DOUBLE
44500: EQUAL
44501: IFTRUE 44505
44503: GO 44561
44505: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
44506: LD_ADDR_VAR 0 9
44510: PUSH
44511: LD_VAR 0 23
44515: PUSH
44516: LD_VAR 0 24
44520: PUSH
44521: LD_VAR 0 25
44525: PUSH
44526: LD_VAR 0 26
44530: PUSH
44531: LD_VAR 0 27
44535: PUSH
44536: LD_VAR 0 28
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: PUSH
44549: LD_VAR 0 4
44553: PUSH
44554: LD_INT 1
44556: PLUS
44557: ARRAY
44558: ST_TO_ADDR
44559: GO 44562
44561: POP
44562: GO 45117
44564: LD_INT 2
44566: DOUBLE
44567: EQUAL
44568: IFTRUE 44578
44570: LD_INT 3
44572: DOUBLE
44573: EQUAL
44574: IFTRUE 44578
44576: GO 44634
44578: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
44579: LD_ADDR_VAR 0 9
44583: PUSH
44584: LD_VAR 0 29
44588: PUSH
44589: LD_VAR 0 30
44593: PUSH
44594: LD_VAR 0 31
44598: PUSH
44599: LD_VAR 0 32
44603: PUSH
44604: LD_VAR 0 33
44608: PUSH
44609: LD_VAR 0 34
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: PUSH
44622: LD_VAR 0 4
44626: PUSH
44627: LD_INT 1
44629: PLUS
44630: ARRAY
44631: ST_TO_ADDR
44632: GO 45117
44634: LD_INT 16
44636: DOUBLE
44637: EQUAL
44638: IFTRUE 44696
44640: LD_INT 17
44642: DOUBLE
44643: EQUAL
44644: IFTRUE 44696
44646: LD_INT 18
44648: DOUBLE
44649: EQUAL
44650: IFTRUE 44696
44652: LD_INT 19
44654: DOUBLE
44655: EQUAL
44656: IFTRUE 44696
44658: LD_INT 22
44660: DOUBLE
44661: EQUAL
44662: IFTRUE 44696
44664: LD_INT 20
44666: DOUBLE
44667: EQUAL
44668: IFTRUE 44696
44670: LD_INT 21
44672: DOUBLE
44673: EQUAL
44674: IFTRUE 44696
44676: LD_INT 23
44678: DOUBLE
44679: EQUAL
44680: IFTRUE 44696
44682: LD_INT 24
44684: DOUBLE
44685: EQUAL
44686: IFTRUE 44696
44688: LD_INT 25
44690: DOUBLE
44691: EQUAL
44692: IFTRUE 44696
44694: GO 44752
44696: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
44697: LD_ADDR_VAR 0 9
44701: PUSH
44702: LD_VAR 0 35
44706: PUSH
44707: LD_VAR 0 36
44711: PUSH
44712: LD_VAR 0 37
44716: PUSH
44717: LD_VAR 0 38
44721: PUSH
44722: LD_VAR 0 39
44726: PUSH
44727: LD_VAR 0 40
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: PUSH
44740: LD_VAR 0 4
44744: PUSH
44745: LD_INT 1
44747: PLUS
44748: ARRAY
44749: ST_TO_ADDR
44750: GO 45117
44752: LD_INT 6
44754: DOUBLE
44755: EQUAL
44756: IFTRUE 44808
44758: LD_INT 7
44760: DOUBLE
44761: EQUAL
44762: IFTRUE 44808
44764: LD_INT 8
44766: DOUBLE
44767: EQUAL
44768: IFTRUE 44808
44770: LD_INT 13
44772: DOUBLE
44773: EQUAL
44774: IFTRUE 44808
44776: LD_INT 12
44778: DOUBLE
44779: EQUAL
44780: IFTRUE 44808
44782: LD_INT 15
44784: DOUBLE
44785: EQUAL
44786: IFTRUE 44808
44788: LD_INT 11
44790: DOUBLE
44791: EQUAL
44792: IFTRUE 44808
44794: LD_INT 14
44796: DOUBLE
44797: EQUAL
44798: IFTRUE 44808
44800: LD_INT 10
44802: DOUBLE
44803: EQUAL
44804: IFTRUE 44808
44806: GO 44864
44808: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
44809: LD_ADDR_VAR 0 9
44813: PUSH
44814: LD_VAR 0 41
44818: PUSH
44819: LD_VAR 0 42
44823: PUSH
44824: LD_VAR 0 43
44828: PUSH
44829: LD_VAR 0 44
44833: PUSH
44834: LD_VAR 0 45
44838: PUSH
44839: LD_VAR 0 46
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: PUSH
44852: LD_VAR 0 4
44856: PUSH
44857: LD_INT 1
44859: PLUS
44860: ARRAY
44861: ST_TO_ADDR
44862: GO 45117
44864: LD_INT 36
44866: DOUBLE
44867: EQUAL
44868: IFTRUE 44872
44870: GO 44928
44872: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44873: LD_ADDR_VAR 0 9
44877: PUSH
44878: LD_VAR 0 47
44882: PUSH
44883: LD_VAR 0 48
44887: PUSH
44888: LD_VAR 0 49
44892: PUSH
44893: LD_VAR 0 50
44897: PUSH
44898: LD_VAR 0 51
44902: PUSH
44903: LD_VAR 0 52
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: PUSH
44916: LD_VAR 0 4
44920: PUSH
44921: LD_INT 1
44923: PLUS
44924: ARRAY
44925: ST_TO_ADDR
44926: GO 45117
44928: LD_INT 4
44930: DOUBLE
44931: EQUAL
44932: IFTRUE 44954
44934: LD_INT 5
44936: DOUBLE
44937: EQUAL
44938: IFTRUE 44954
44940: LD_INT 34
44942: DOUBLE
44943: EQUAL
44944: IFTRUE 44954
44946: LD_INT 37
44948: DOUBLE
44949: EQUAL
44950: IFTRUE 44954
44952: GO 45010
44954: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
44955: LD_ADDR_VAR 0 9
44959: PUSH
44960: LD_VAR 0 53
44964: PUSH
44965: LD_VAR 0 54
44969: PUSH
44970: LD_VAR 0 55
44974: PUSH
44975: LD_VAR 0 56
44979: PUSH
44980: LD_VAR 0 57
44984: PUSH
44985: LD_VAR 0 58
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: PUSH
44998: LD_VAR 0 4
45002: PUSH
45003: LD_INT 1
45005: PLUS
45006: ARRAY
45007: ST_TO_ADDR
45008: GO 45117
45010: LD_INT 31
45012: DOUBLE
45013: EQUAL
45014: IFTRUE 45060
45016: LD_INT 32
45018: DOUBLE
45019: EQUAL
45020: IFTRUE 45060
45022: LD_INT 33
45024: DOUBLE
45025: EQUAL
45026: IFTRUE 45060
45028: LD_INT 27
45030: DOUBLE
45031: EQUAL
45032: IFTRUE 45060
45034: LD_INT 26
45036: DOUBLE
45037: EQUAL
45038: IFTRUE 45060
45040: LD_INT 28
45042: DOUBLE
45043: EQUAL
45044: IFTRUE 45060
45046: LD_INT 29
45048: DOUBLE
45049: EQUAL
45050: IFTRUE 45060
45052: LD_INT 30
45054: DOUBLE
45055: EQUAL
45056: IFTRUE 45060
45058: GO 45116
45060: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
45061: LD_ADDR_VAR 0 9
45065: PUSH
45066: LD_VAR 0 59
45070: PUSH
45071: LD_VAR 0 60
45075: PUSH
45076: LD_VAR 0 61
45080: PUSH
45081: LD_VAR 0 62
45085: PUSH
45086: LD_VAR 0 63
45090: PUSH
45091: LD_VAR 0 64
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: PUSH
45104: LD_VAR 0 4
45108: PUSH
45109: LD_INT 1
45111: PLUS
45112: ARRAY
45113: ST_TO_ADDR
45114: GO 45117
45116: POP
// temp_list2 = [ ] ;
45117: LD_ADDR_VAR 0 10
45121: PUSH
45122: EMPTY
45123: ST_TO_ADDR
// for i in temp_list do
45124: LD_ADDR_VAR 0 8
45128: PUSH
45129: LD_VAR 0 9
45133: PUSH
45134: FOR_IN
45135: IFFALSE 45187
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
45137: LD_ADDR_VAR 0 10
45141: PUSH
45142: LD_VAR 0 10
45146: PUSH
45147: LD_VAR 0 8
45151: PUSH
45152: LD_INT 1
45154: ARRAY
45155: PUSH
45156: LD_VAR 0 2
45160: PLUS
45161: PUSH
45162: LD_VAR 0 8
45166: PUSH
45167: LD_INT 2
45169: ARRAY
45170: PUSH
45171: LD_VAR 0 3
45175: PLUS
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: EMPTY
45182: LIST
45183: ADD
45184: ST_TO_ADDR
45185: GO 45134
45187: POP
45188: POP
// result = temp_list2 ;
45189: LD_ADDR_VAR 0 7
45193: PUSH
45194: LD_VAR 0 10
45198: ST_TO_ADDR
// end ;
45199: LD_VAR 0 7
45203: RET
// export function EnemyInRange ( unit , dist ) ; begin
45204: LD_INT 0
45206: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
45207: LD_ADDR_VAR 0 3
45211: PUSH
45212: LD_VAR 0 1
45216: PPUSH
45217: CALL_OW 255
45221: PPUSH
45222: LD_VAR 0 1
45226: PPUSH
45227: CALL_OW 250
45231: PPUSH
45232: LD_VAR 0 1
45236: PPUSH
45237: CALL_OW 251
45241: PPUSH
45242: LD_VAR 0 2
45246: PPUSH
45247: CALL 19308 0 4
45251: PUSH
45252: LD_INT 4
45254: ARRAY
45255: ST_TO_ADDR
// end ;
45256: LD_VAR 0 3
45260: RET
// export function PlayerSeeMe ( unit ) ; begin
45261: LD_INT 0
45263: PPUSH
// result := See ( your_side , unit ) ;
45264: LD_ADDR_VAR 0 2
45268: PUSH
45269: LD_OWVAR 2
45273: PPUSH
45274: LD_VAR 0 1
45278: PPUSH
45279: CALL_OW 292
45283: ST_TO_ADDR
// end ;
45284: LD_VAR 0 2
45288: RET
// export function ReverseDir ( unit ) ; begin
45289: LD_INT 0
45291: PPUSH
// if not unit then
45292: LD_VAR 0 1
45296: NOT
45297: IFFALSE 45301
// exit ;
45299: GO 45324
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
45301: LD_ADDR_VAR 0 2
45305: PUSH
45306: LD_VAR 0 1
45310: PPUSH
45311: CALL_OW 254
45315: PUSH
45316: LD_INT 3
45318: PLUS
45319: PUSH
45320: LD_INT 6
45322: MOD
45323: ST_TO_ADDR
// end ;
45324: LD_VAR 0 2
45328: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
45329: LD_INT 0
45331: PPUSH
45332: PPUSH
45333: PPUSH
45334: PPUSH
45335: PPUSH
// if not hexes then
45336: LD_VAR 0 2
45340: NOT
45341: IFFALSE 45345
// exit ;
45343: GO 45493
// dist := 9999 ;
45345: LD_ADDR_VAR 0 5
45349: PUSH
45350: LD_INT 9999
45352: ST_TO_ADDR
// for i = 1 to hexes do
45353: LD_ADDR_VAR 0 4
45357: PUSH
45358: DOUBLE
45359: LD_INT 1
45361: DEC
45362: ST_TO_ADDR
45363: LD_VAR 0 2
45367: PUSH
45368: FOR_TO
45369: IFFALSE 45481
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
45371: LD_VAR 0 1
45375: PPUSH
45376: LD_VAR 0 2
45380: PUSH
45381: LD_VAR 0 4
45385: ARRAY
45386: PUSH
45387: LD_INT 1
45389: ARRAY
45390: PPUSH
45391: LD_VAR 0 2
45395: PUSH
45396: LD_VAR 0 4
45400: ARRAY
45401: PUSH
45402: LD_INT 2
45404: ARRAY
45405: PPUSH
45406: CALL_OW 297
45410: PUSH
45411: LD_VAR 0 5
45415: LESS
45416: IFFALSE 45479
// begin hex := hexes [ i ] ;
45418: LD_ADDR_VAR 0 7
45422: PUSH
45423: LD_VAR 0 2
45427: PUSH
45428: LD_VAR 0 4
45432: ARRAY
45433: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45434: LD_ADDR_VAR 0 5
45438: PUSH
45439: LD_VAR 0 1
45443: PPUSH
45444: LD_VAR 0 2
45448: PUSH
45449: LD_VAR 0 4
45453: ARRAY
45454: PUSH
45455: LD_INT 1
45457: ARRAY
45458: PPUSH
45459: LD_VAR 0 2
45463: PUSH
45464: LD_VAR 0 4
45468: ARRAY
45469: PUSH
45470: LD_INT 2
45472: ARRAY
45473: PPUSH
45474: CALL_OW 297
45478: ST_TO_ADDR
// end ; end ;
45479: GO 45368
45481: POP
45482: POP
// result := hex ;
45483: LD_ADDR_VAR 0 3
45487: PUSH
45488: LD_VAR 0 7
45492: ST_TO_ADDR
// end ;
45493: LD_VAR 0 3
45497: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
45498: LD_INT 0
45500: PPUSH
45501: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
45502: LD_VAR 0 1
45506: NOT
45507: PUSH
45508: LD_VAR 0 1
45512: PUSH
45513: LD_INT 21
45515: PUSH
45516: LD_INT 2
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 23
45525: PUSH
45526: LD_INT 2
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PPUSH
45537: CALL_OW 69
45541: IN
45542: NOT
45543: OR
45544: IFFALSE 45548
// exit ;
45546: GO 45595
// for i = 1 to 3 do
45548: LD_ADDR_VAR 0 3
45552: PUSH
45553: DOUBLE
45554: LD_INT 1
45556: DEC
45557: ST_TO_ADDR
45558: LD_INT 3
45560: PUSH
45561: FOR_TO
45562: IFFALSE 45593
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
45564: LD_VAR 0 1
45568: PPUSH
45569: CALL_OW 250
45573: PPUSH
45574: LD_VAR 0 1
45578: PPUSH
45579: CALL_OW 251
45583: PPUSH
45584: LD_INT 1
45586: PPUSH
45587: CALL_OW 453
45591: GO 45561
45593: POP
45594: POP
// end ;
45595: LD_VAR 0 2
45599: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
45600: LD_INT 0
45602: PPUSH
45603: PPUSH
45604: PPUSH
45605: PPUSH
45606: PPUSH
45607: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
45608: LD_VAR 0 1
45612: NOT
45613: PUSH
45614: LD_VAR 0 2
45618: NOT
45619: OR
45620: PUSH
45621: LD_VAR 0 1
45625: PPUSH
45626: CALL_OW 314
45630: OR
45631: IFFALSE 45635
// exit ;
45633: GO 46076
// x := GetX ( enemy_unit ) ;
45635: LD_ADDR_VAR 0 7
45639: PUSH
45640: LD_VAR 0 2
45644: PPUSH
45645: CALL_OW 250
45649: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
45650: LD_ADDR_VAR 0 8
45654: PUSH
45655: LD_VAR 0 2
45659: PPUSH
45660: CALL_OW 251
45664: ST_TO_ADDR
// if not x or not y then
45665: LD_VAR 0 7
45669: NOT
45670: PUSH
45671: LD_VAR 0 8
45675: NOT
45676: OR
45677: IFFALSE 45681
// exit ;
45679: GO 46076
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45681: LD_ADDR_VAR 0 6
45685: PUSH
45686: LD_VAR 0 7
45690: PPUSH
45691: LD_INT 0
45693: PPUSH
45694: LD_INT 4
45696: PPUSH
45697: CALL_OW 272
45701: PUSH
45702: LD_VAR 0 8
45706: PPUSH
45707: LD_INT 0
45709: PPUSH
45710: LD_INT 4
45712: PPUSH
45713: CALL_OW 273
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_VAR 0 7
45726: PPUSH
45727: LD_INT 1
45729: PPUSH
45730: LD_INT 4
45732: PPUSH
45733: CALL_OW 272
45737: PUSH
45738: LD_VAR 0 8
45742: PPUSH
45743: LD_INT 1
45745: PPUSH
45746: LD_INT 4
45748: PPUSH
45749: CALL_OW 273
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_VAR 0 7
45762: PPUSH
45763: LD_INT 2
45765: PPUSH
45766: LD_INT 4
45768: PPUSH
45769: CALL_OW 272
45773: PUSH
45774: LD_VAR 0 8
45778: PPUSH
45779: LD_INT 2
45781: PPUSH
45782: LD_INT 4
45784: PPUSH
45785: CALL_OW 273
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_VAR 0 7
45798: PPUSH
45799: LD_INT 3
45801: PPUSH
45802: LD_INT 4
45804: PPUSH
45805: CALL_OW 272
45809: PUSH
45810: LD_VAR 0 8
45814: PPUSH
45815: LD_INT 3
45817: PPUSH
45818: LD_INT 4
45820: PPUSH
45821: CALL_OW 273
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_VAR 0 7
45834: PPUSH
45835: LD_INT 4
45837: PPUSH
45838: LD_INT 4
45840: PPUSH
45841: CALL_OW 272
45845: PUSH
45846: LD_VAR 0 8
45850: PPUSH
45851: LD_INT 4
45853: PPUSH
45854: LD_INT 4
45856: PPUSH
45857: CALL_OW 273
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_VAR 0 7
45870: PPUSH
45871: LD_INT 5
45873: PPUSH
45874: LD_INT 4
45876: PPUSH
45877: CALL_OW 272
45881: PUSH
45882: LD_VAR 0 8
45886: PPUSH
45887: LD_INT 5
45889: PPUSH
45890: LD_INT 4
45892: PPUSH
45893: CALL_OW 273
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: ST_TO_ADDR
// for i = tmp downto 1 do
45910: LD_ADDR_VAR 0 4
45914: PUSH
45915: DOUBLE
45916: LD_VAR 0 6
45920: INC
45921: ST_TO_ADDR
45922: LD_INT 1
45924: PUSH
45925: FOR_DOWNTO
45926: IFFALSE 46027
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
45928: LD_VAR 0 6
45932: PUSH
45933: LD_VAR 0 4
45937: ARRAY
45938: PUSH
45939: LD_INT 1
45941: ARRAY
45942: PPUSH
45943: LD_VAR 0 6
45947: PUSH
45948: LD_VAR 0 4
45952: ARRAY
45953: PUSH
45954: LD_INT 2
45956: ARRAY
45957: PPUSH
45958: CALL_OW 488
45962: NOT
45963: PUSH
45964: LD_VAR 0 6
45968: PUSH
45969: LD_VAR 0 4
45973: ARRAY
45974: PUSH
45975: LD_INT 1
45977: ARRAY
45978: PPUSH
45979: LD_VAR 0 6
45983: PUSH
45984: LD_VAR 0 4
45988: ARRAY
45989: PUSH
45990: LD_INT 2
45992: ARRAY
45993: PPUSH
45994: CALL_OW 428
45998: PUSH
45999: LD_INT 0
46001: NONEQUAL
46002: OR
46003: IFFALSE 46025
// tmp := Delete ( tmp , i ) ;
46005: LD_ADDR_VAR 0 6
46009: PUSH
46010: LD_VAR 0 6
46014: PPUSH
46015: LD_VAR 0 4
46019: PPUSH
46020: CALL_OW 3
46024: ST_TO_ADDR
46025: GO 45925
46027: POP
46028: POP
// j := GetClosestHex ( unit , tmp ) ;
46029: LD_ADDR_VAR 0 5
46033: PUSH
46034: LD_VAR 0 1
46038: PPUSH
46039: LD_VAR 0 6
46043: PPUSH
46044: CALL 45329 0 2
46048: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
46049: LD_VAR 0 1
46053: PPUSH
46054: LD_VAR 0 5
46058: PUSH
46059: LD_INT 1
46061: ARRAY
46062: PPUSH
46063: LD_VAR 0 5
46067: PUSH
46068: LD_INT 2
46070: ARRAY
46071: PPUSH
46072: CALL_OW 111
// end ;
46076: LD_VAR 0 3
46080: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
46081: LD_INT 0
46083: PPUSH
46084: PPUSH
46085: PPUSH
// uc_side = 0 ;
46086: LD_ADDR_OWVAR 20
46090: PUSH
46091: LD_INT 0
46093: ST_TO_ADDR
// uc_nation = 0 ;
46094: LD_ADDR_OWVAR 21
46098: PUSH
46099: LD_INT 0
46101: ST_TO_ADDR
// InitHc ;
46102: CALL_OW 19
// InitVc ;
46106: CALL_OW 20
// if mastodonts then
46110: LD_VAR 0 6
46114: IFFALSE 46181
// for i = 1 to mastodonts do
46116: LD_ADDR_VAR 0 11
46120: PUSH
46121: DOUBLE
46122: LD_INT 1
46124: DEC
46125: ST_TO_ADDR
46126: LD_VAR 0 6
46130: PUSH
46131: FOR_TO
46132: IFFALSE 46179
// begin vc_chassis := 31 ;
46134: LD_ADDR_OWVAR 37
46138: PUSH
46139: LD_INT 31
46141: ST_TO_ADDR
// vc_control := control_rider ;
46142: LD_ADDR_OWVAR 38
46146: PUSH
46147: LD_INT 4
46149: ST_TO_ADDR
// animal := CreateVehicle ;
46150: LD_ADDR_VAR 0 12
46154: PUSH
46155: CALL_OW 45
46159: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46160: LD_VAR 0 12
46164: PPUSH
46165: LD_VAR 0 8
46169: PPUSH
46170: LD_INT 0
46172: PPUSH
46173: CALL 48250 0 3
// end ;
46177: GO 46131
46179: POP
46180: POP
// if horses then
46181: LD_VAR 0 5
46185: IFFALSE 46252
// for i = 1 to horses do
46187: LD_ADDR_VAR 0 11
46191: PUSH
46192: DOUBLE
46193: LD_INT 1
46195: DEC
46196: ST_TO_ADDR
46197: LD_VAR 0 5
46201: PUSH
46202: FOR_TO
46203: IFFALSE 46250
// begin hc_class := 21 ;
46205: LD_ADDR_OWVAR 28
46209: PUSH
46210: LD_INT 21
46212: ST_TO_ADDR
// hc_gallery :=  ;
46213: LD_ADDR_OWVAR 33
46217: PUSH
46218: LD_STRING 
46220: ST_TO_ADDR
// animal := CreateHuman ;
46221: LD_ADDR_VAR 0 12
46225: PUSH
46226: CALL_OW 44
46230: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46231: LD_VAR 0 12
46235: PPUSH
46236: LD_VAR 0 8
46240: PPUSH
46241: LD_INT 0
46243: PPUSH
46244: CALL 48250 0 3
// end ;
46248: GO 46202
46250: POP
46251: POP
// if birds then
46252: LD_VAR 0 1
46256: IFFALSE 46323
// for i = 1 to birds do
46258: LD_ADDR_VAR 0 11
46262: PUSH
46263: DOUBLE
46264: LD_INT 1
46266: DEC
46267: ST_TO_ADDR
46268: LD_VAR 0 1
46272: PUSH
46273: FOR_TO
46274: IFFALSE 46321
// begin hc_class = 18 ;
46276: LD_ADDR_OWVAR 28
46280: PUSH
46281: LD_INT 18
46283: ST_TO_ADDR
// hc_gallery =  ;
46284: LD_ADDR_OWVAR 33
46288: PUSH
46289: LD_STRING 
46291: ST_TO_ADDR
// animal := CreateHuman ;
46292: LD_ADDR_VAR 0 12
46296: PUSH
46297: CALL_OW 44
46301: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46302: LD_VAR 0 12
46306: PPUSH
46307: LD_VAR 0 8
46311: PPUSH
46312: LD_INT 0
46314: PPUSH
46315: CALL 48250 0 3
// end ;
46319: GO 46273
46321: POP
46322: POP
// if tigers then
46323: LD_VAR 0 2
46327: IFFALSE 46411
// for i = 1 to tigers do
46329: LD_ADDR_VAR 0 11
46333: PUSH
46334: DOUBLE
46335: LD_INT 1
46337: DEC
46338: ST_TO_ADDR
46339: LD_VAR 0 2
46343: PUSH
46344: FOR_TO
46345: IFFALSE 46409
// begin hc_class = class_tiger ;
46347: LD_ADDR_OWVAR 28
46351: PUSH
46352: LD_INT 14
46354: ST_TO_ADDR
// hc_gallery =  ;
46355: LD_ADDR_OWVAR 33
46359: PUSH
46360: LD_STRING 
46362: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46363: LD_ADDR_OWVAR 35
46367: PUSH
46368: LD_INT 7
46370: NEG
46371: PPUSH
46372: LD_INT 7
46374: PPUSH
46375: CALL_OW 12
46379: ST_TO_ADDR
// animal := CreateHuman ;
46380: LD_ADDR_VAR 0 12
46384: PUSH
46385: CALL_OW 44
46389: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46390: LD_VAR 0 12
46394: PPUSH
46395: LD_VAR 0 8
46399: PPUSH
46400: LD_INT 0
46402: PPUSH
46403: CALL 48250 0 3
// end ;
46407: GO 46344
46409: POP
46410: POP
// if apemans then
46411: LD_VAR 0 3
46415: IFFALSE 46538
// for i = 1 to apemans do
46417: LD_ADDR_VAR 0 11
46421: PUSH
46422: DOUBLE
46423: LD_INT 1
46425: DEC
46426: ST_TO_ADDR
46427: LD_VAR 0 3
46431: PUSH
46432: FOR_TO
46433: IFFALSE 46536
// begin hc_class = class_apeman ;
46435: LD_ADDR_OWVAR 28
46439: PUSH
46440: LD_INT 12
46442: ST_TO_ADDR
// hc_gallery =  ;
46443: LD_ADDR_OWVAR 33
46447: PUSH
46448: LD_STRING 
46450: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
46451: LD_ADDR_OWVAR 35
46455: PUSH
46456: LD_INT 5
46458: NEG
46459: PPUSH
46460: LD_INT 5
46462: PPUSH
46463: CALL_OW 12
46467: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46468: LD_ADDR_OWVAR 31
46472: PUSH
46473: LD_INT 1
46475: PPUSH
46476: LD_INT 3
46478: PPUSH
46479: CALL_OW 12
46483: PUSH
46484: LD_INT 1
46486: PPUSH
46487: LD_INT 3
46489: PPUSH
46490: CALL_OW 12
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: ST_TO_ADDR
// animal := CreateHuman ;
46507: LD_ADDR_VAR 0 12
46511: PUSH
46512: CALL_OW 44
46516: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46517: LD_VAR 0 12
46521: PPUSH
46522: LD_VAR 0 8
46526: PPUSH
46527: LD_INT 0
46529: PPUSH
46530: CALL 48250 0 3
// end ;
46534: GO 46432
46536: POP
46537: POP
// if enchidnas then
46538: LD_VAR 0 4
46542: IFFALSE 46609
// for i = 1 to enchidnas do
46544: LD_ADDR_VAR 0 11
46548: PUSH
46549: DOUBLE
46550: LD_INT 1
46552: DEC
46553: ST_TO_ADDR
46554: LD_VAR 0 4
46558: PUSH
46559: FOR_TO
46560: IFFALSE 46607
// begin hc_class = 13 ;
46562: LD_ADDR_OWVAR 28
46566: PUSH
46567: LD_INT 13
46569: ST_TO_ADDR
// hc_gallery =  ;
46570: LD_ADDR_OWVAR 33
46574: PUSH
46575: LD_STRING 
46577: ST_TO_ADDR
// animal := CreateHuman ;
46578: LD_ADDR_VAR 0 12
46582: PUSH
46583: CALL_OW 44
46587: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46588: LD_VAR 0 12
46592: PPUSH
46593: LD_VAR 0 8
46597: PPUSH
46598: LD_INT 0
46600: PPUSH
46601: CALL 48250 0 3
// end ;
46605: GO 46559
46607: POP
46608: POP
// if fishes then
46609: LD_VAR 0 7
46613: IFFALSE 46680
// for i = 1 to fishes do
46615: LD_ADDR_VAR 0 11
46619: PUSH
46620: DOUBLE
46621: LD_INT 1
46623: DEC
46624: ST_TO_ADDR
46625: LD_VAR 0 7
46629: PUSH
46630: FOR_TO
46631: IFFALSE 46678
// begin hc_class = 20 ;
46633: LD_ADDR_OWVAR 28
46637: PUSH
46638: LD_INT 20
46640: ST_TO_ADDR
// hc_gallery =  ;
46641: LD_ADDR_OWVAR 33
46645: PUSH
46646: LD_STRING 
46648: ST_TO_ADDR
// animal := CreateHuman ;
46649: LD_ADDR_VAR 0 12
46653: PUSH
46654: CALL_OW 44
46658: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46659: LD_VAR 0 12
46663: PPUSH
46664: LD_VAR 0 9
46668: PPUSH
46669: LD_INT 0
46671: PPUSH
46672: CALL 48250 0 3
// end ;
46676: GO 46630
46678: POP
46679: POP
// end ;
46680: LD_VAR 0 10
46684: RET
// export function WantHeal ( sci , unit ) ; begin
46685: LD_INT 0
46687: PPUSH
// if GetTaskList ( sci ) > 0 then
46688: LD_VAR 0 1
46692: PPUSH
46693: CALL_OW 437
46697: PUSH
46698: LD_INT 0
46700: GREATER
46701: IFFALSE 46771
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46703: LD_VAR 0 1
46707: PPUSH
46708: CALL_OW 437
46712: PUSH
46713: LD_INT 1
46715: ARRAY
46716: PUSH
46717: LD_INT 1
46719: ARRAY
46720: PUSH
46721: LD_STRING l
46723: EQUAL
46724: PUSH
46725: LD_VAR 0 1
46729: PPUSH
46730: CALL_OW 437
46734: PUSH
46735: LD_INT 1
46737: ARRAY
46738: PUSH
46739: LD_INT 4
46741: ARRAY
46742: PUSH
46743: LD_VAR 0 2
46747: EQUAL
46748: AND
46749: IFFALSE 46761
// result := true else
46751: LD_ADDR_VAR 0 3
46755: PUSH
46756: LD_INT 1
46758: ST_TO_ADDR
46759: GO 46769
// result := false ;
46761: LD_ADDR_VAR 0 3
46765: PUSH
46766: LD_INT 0
46768: ST_TO_ADDR
// end else
46769: GO 46779
// result := false ;
46771: LD_ADDR_VAR 0 3
46775: PUSH
46776: LD_INT 0
46778: ST_TO_ADDR
// end ;
46779: LD_VAR 0 3
46783: RET
// export function HealTarget ( sci ) ; begin
46784: LD_INT 0
46786: PPUSH
// if not sci then
46787: LD_VAR 0 1
46791: NOT
46792: IFFALSE 46796
// exit ;
46794: GO 46861
// result := 0 ;
46796: LD_ADDR_VAR 0 2
46800: PUSH
46801: LD_INT 0
46803: ST_TO_ADDR
// if GetTaskList ( sci ) then
46804: LD_VAR 0 1
46808: PPUSH
46809: CALL_OW 437
46813: IFFALSE 46861
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46815: LD_VAR 0 1
46819: PPUSH
46820: CALL_OW 437
46824: PUSH
46825: LD_INT 1
46827: ARRAY
46828: PUSH
46829: LD_INT 1
46831: ARRAY
46832: PUSH
46833: LD_STRING l
46835: EQUAL
46836: IFFALSE 46861
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46838: LD_ADDR_VAR 0 2
46842: PUSH
46843: LD_VAR 0 1
46847: PPUSH
46848: CALL_OW 437
46852: PUSH
46853: LD_INT 1
46855: ARRAY
46856: PUSH
46857: LD_INT 4
46859: ARRAY
46860: ST_TO_ADDR
// end ;
46861: LD_VAR 0 2
46865: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
46866: LD_INT 0
46868: PPUSH
46869: PPUSH
46870: PPUSH
46871: PPUSH
// if not base_units then
46872: LD_VAR 0 1
46876: NOT
46877: IFFALSE 46881
// exit ;
46879: GO 46968
// result := false ;
46881: LD_ADDR_VAR 0 2
46885: PUSH
46886: LD_INT 0
46888: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
46889: LD_ADDR_VAR 0 5
46893: PUSH
46894: LD_VAR 0 1
46898: PPUSH
46899: LD_INT 21
46901: PUSH
46902: LD_INT 3
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PPUSH
46909: CALL_OW 72
46913: ST_TO_ADDR
// if not tmp then
46914: LD_VAR 0 5
46918: NOT
46919: IFFALSE 46923
// exit ;
46921: GO 46968
// for i in tmp do
46923: LD_ADDR_VAR 0 3
46927: PUSH
46928: LD_VAR 0 5
46932: PUSH
46933: FOR_IN
46934: IFFALSE 46966
// begin result := EnemyInRange ( i , 22 ) ;
46936: LD_ADDR_VAR 0 2
46940: PUSH
46941: LD_VAR 0 3
46945: PPUSH
46946: LD_INT 22
46948: PPUSH
46949: CALL 45204 0 2
46953: ST_TO_ADDR
// if result then
46954: LD_VAR 0 2
46958: IFFALSE 46964
// exit ;
46960: POP
46961: POP
46962: GO 46968
// end ;
46964: GO 46933
46966: POP
46967: POP
// end ;
46968: LD_VAR 0 2
46972: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
46973: LD_INT 0
46975: PPUSH
46976: PPUSH
// if not units then
46977: LD_VAR 0 1
46981: NOT
46982: IFFALSE 46986
// exit ;
46984: GO 47056
// result := [ ] ;
46986: LD_ADDR_VAR 0 3
46990: PUSH
46991: EMPTY
46992: ST_TO_ADDR
// for i in units do
46993: LD_ADDR_VAR 0 4
46997: PUSH
46998: LD_VAR 0 1
47002: PUSH
47003: FOR_IN
47004: IFFALSE 47054
// if GetTag ( i ) = tag then
47006: LD_VAR 0 4
47010: PPUSH
47011: CALL_OW 110
47015: PUSH
47016: LD_VAR 0 2
47020: EQUAL
47021: IFFALSE 47052
// result := Insert ( result , result + 1 , i ) ;
47023: LD_ADDR_VAR 0 3
47027: PUSH
47028: LD_VAR 0 3
47032: PPUSH
47033: LD_VAR 0 3
47037: PUSH
47038: LD_INT 1
47040: PLUS
47041: PPUSH
47042: LD_VAR 0 4
47046: PPUSH
47047: CALL_OW 2
47051: ST_TO_ADDR
47052: GO 47003
47054: POP
47055: POP
// end ;
47056: LD_VAR 0 3
47060: RET
// export function IsDriver ( un ) ; begin
47061: LD_INT 0
47063: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
47064: LD_ADDR_VAR 0 2
47068: PUSH
47069: LD_VAR 0 1
47073: PUSH
47074: LD_INT 55
47076: PUSH
47077: EMPTY
47078: LIST
47079: PPUSH
47080: CALL_OW 69
47084: IN
47085: ST_TO_ADDR
// end ;
47086: LD_VAR 0 2
47090: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
47091: LD_INT 0
47093: PPUSH
47094: PPUSH
// list := [ ] ;
47095: LD_ADDR_VAR 0 5
47099: PUSH
47100: EMPTY
47101: ST_TO_ADDR
// case d of 0 :
47102: LD_VAR 0 3
47106: PUSH
47107: LD_INT 0
47109: DOUBLE
47110: EQUAL
47111: IFTRUE 47115
47113: GO 47248
47115: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
47116: LD_ADDR_VAR 0 5
47120: PUSH
47121: LD_VAR 0 1
47125: PUSH
47126: LD_INT 4
47128: MINUS
47129: PUSH
47130: LD_VAR 0 2
47134: PUSH
47135: LD_INT 4
47137: MINUS
47138: PUSH
47139: LD_INT 2
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: LIST
47146: PUSH
47147: LD_VAR 0 1
47151: PUSH
47152: LD_INT 3
47154: MINUS
47155: PUSH
47156: LD_VAR 0 2
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: LIST
47168: PUSH
47169: LD_VAR 0 1
47173: PUSH
47174: LD_INT 4
47176: PLUS
47177: PUSH
47178: LD_VAR 0 2
47182: PUSH
47183: LD_INT 4
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: LIST
47190: PUSH
47191: LD_VAR 0 1
47195: PUSH
47196: LD_INT 3
47198: PLUS
47199: PUSH
47200: LD_VAR 0 2
47204: PUSH
47205: LD_INT 3
47207: PLUS
47208: PUSH
47209: LD_INT 5
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: LIST
47216: PUSH
47217: LD_VAR 0 1
47221: PUSH
47222: LD_VAR 0 2
47226: PUSH
47227: LD_INT 4
47229: PLUS
47230: PUSH
47231: LD_INT 0
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: LIST
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: ST_TO_ADDR
// end ; 1 :
47246: GO 47946
47248: LD_INT 1
47250: DOUBLE
47251: EQUAL
47252: IFTRUE 47256
47254: GO 47389
47256: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
47257: LD_ADDR_VAR 0 5
47261: PUSH
47262: LD_VAR 0 1
47266: PUSH
47267: LD_VAR 0 2
47271: PUSH
47272: LD_INT 4
47274: MINUS
47275: PUSH
47276: LD_INT 3
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: LIST
47283: PUSH
47284: LD_VAR 0 1
47288: PUSH
47289: LD_INT 3
47291: MINUS
47292: PUSH
47293: LD_VAR 0 2
47297: PUSH
47298: LD_INT 3
47300: MINUS
47301: PUSH
47302: LD_INT 2
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: LIST
47309: PUSH
47310: LD_VAR 0 1
47314: PUSH
47315: LD_INT 4
47317: MINUS
47318: PUSH
47319: LD_VAR 0 2
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: LIST
47331: PUSH
47332: LD_VAR 0 1
47336: PUSH
47337: LD_VAR 0 2
47341: PUSH
47342: LD_INT 3
47344: PLUS
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: LIST
47353: PUSH
47354: LD_VAR 0 1
47358: PUSH
47359: LD_INT 4
47361: PLUS
47362: PUSH
47363: LD_VAR 0 2
47367: PUSH
47368: LD_INT 4
47370: PLUS
47371: PUSH
47372: LD_INT 5
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: LIST
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: ST_TO_ADDR
// end ; 2 :
47387: GO 47946
47389: LD_INT 2
47391: DOUBLE
47392: EQUAL
47393: IFTRUE 47397
47395: GO 47526
47397: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
47398: LD_ADDR_VAR 0 5
47402: PUSH
47403: LD_VAR 0 1
47407: PUSH
47408: LD_VAR 0 2
47412: PUSH
47413: LD_INT 3
47415: MINUS
47416: PUSH
47417: LD_INT 3
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: LIST
47424: PUSH
47425: LD_VAR 0 1
47429: PUSH
47430: LD_INT 4
47432: PLUS
47433: PUSH
47434: LD_VAR 0 2
47438: PUSH
47439: LD_INT 4
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: LIST
47446: PUSH
47447: LD_VAR 0 1
47451: PUSH
47452: LD_VAR 0 2
47456: PUSH
47457: LD_INT 4
47459: PLUS
47460: PUSH
47461: LD_INT 0
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: LIST
47468: PUSH
47469: LD_VAR 0 1
47473: PUSH
47474: LD_INT 3
47476: MINUS
47477: PUSH
47478: LD_VAR 0 2
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: LIST
47490: PUSH
47491: LD_VAR 0 1
47495: PUSH
47496: LD_INT 4
47498: MINUS
47499: PUSH
47500: LD_VAR 0 2
47504: PUSH
47505: LD_INT 4
47507: MINUS
47508: PUSH
47509: LD_INT 2
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: LIST
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: ST_TO_ADDR
// end ; 3 :
47524: GO 47946
47526: LD_INT 3
47528: DOUBLE
47529: EQUAL
47530: IFTRUE 47534
47532: GO 47667
47534: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
47535: LD_ADDR_VAR 0 5
47539: PUSH
47540: LD_VAR 0 1
47544: PUSH
47545: LD_INT 3
47547: PLUS
47548: PUSH
47549: LD_VAR 0 2
47553: PUSH
47554: LD_INT 4
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: LIST
47561: PUSH
47562: LD_VAR 0 1
47566: PUSH
47567: LD_INT 4
47569: PLUS
47570: PUSH
47571: LD_VAR 0 2
47575: PUSH
47576: LD_INT 4
47578: PLUS
47579: PUSH
47580: LD_INT 5
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: LIST
47587: PUSH
47588: LD_VAR 0 1
47592: PUSH
47593: LD_INT 4
47595: MINUS
47596: PUSH
47597: LD_VAR 0 2
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: LIST
47609: PUSH
47610: LD_VAR 0 1
47614: PUSH
47615: LD_VAR 0 2
47619: PUSH
47620: LD_INT 4
47622: MINUS
47623: PUSH
47624: LD_INT 3
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: LIST
47631: PUSH
47632: LD_VAR 0 1
47636: PUSH
47637: LD_INT 3
47639: MINUS
47640: PUSH
47641: LD_VAR 0 2
47645: PUSH
47646: LD_INT 3
47648: MINUS
47649: PUSH
47650: LD_INT 2
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: LIST
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: ST_TO_ADDR
// end ; 4 :
47665: GO 47946
47667: LD_INT 4
47669: DOUBLE
47670: EQUAL
47671: IFTRUE 47675
47673: GO 47808
47675: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
47676: LD_ADDR_VAR 0 5
47680: PUSH
47681: LD_VAR 0 1
47685: PUSH
47686: LD_VAR 0 2
47690: PUSH
47691: LD_INT 4
47693: PLUS
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: LIST
47702: PUSH
47703: LD_VAR 0 1
47707: PUSH
47708: LD_INT 3
47710: PLUS
47711: PUSH
47712: LD_VAR 0 2
47716: PUSH
47717: LD_INT 3
47719: PLUS
47720: PUSH
47721: LD_INT 5
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: LIST
47728: PUSH
47729: LD_VAR 0 1
47733: PUSH
47734: LD_INT 4
47736: PLUS
47737: PUSH
47738: LD_VAR 0 2
47742: PUSH
47743: LD_INT 4
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: LIST
47750: PUSH
47751: LD_VAR 0 1
47755: PUSH
47756: LD_VAR 0 2
47760: PUSH
47761: LD_INT 3
47763: MINUS
47764: PUSH
47765: LD_INT 3
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: LIST
47772: PUSH
47773: LD_VAR 0 1
47777: PUSH
47778: LD_INT 4
47780: MINUS
47781: PUSH
47782: LD_VAR 0 2
47786: PUSH
47787: LD_INT 4
47789: MINUS
47790: PUSH
47791: LD_INT 2
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: LIST
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: ST_TO_ADDR
// end ; 5 :
47806: GO 47946
47808: LD_INT 5
47810: DOUBLE
47811: EQUAL
47812: IFTRUE 47816
47814: GO 47945
47816: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
47817: LD_ADDR_VAR 0 5
47821: PUSH
47822: LD_VAR 0 1
47826: PUSH
47827: LD_INT 4
47829: MINUS
47830: PUSH
47831: LD_VAR 0 2
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: LIST
47843: PUSH
47844: LD_VAR 0 1
47848: PUSH
47849: LD_VAR 0 2
47853: PUSH
47854: LD_INT 4
47856: MINUS
47857: PUSH
47858: LD_INT 3
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: LIST
47865: PUSH
47866: LD_VAR 0 1
47870: PUSH
47871: LD_INT 4
47873: PLUS
47874: PUSH
47875: LD_VAR 0 2
47879: PUSH
47880: LD_INT 4
47882: PLUS
47883: PUSH
47884: LD_INT 5
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: LIST
47891: PUSH
47892: LD_VAR 0 1
47896: PUSH
47897: LD_INT 3
47899: PLUS
47900: PUSH
47901: LD_VAR 0 2
47905: PUSH
47906: LD_INT 4
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: LIST
47913: PUSH
47914: LD_VAR 0 1
47918: PUSH
47919: LD_VAR 0 2
47923: PUSH
47924: LD_INT 3
47926: PLUS
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: LIST
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: ST_TO_ADDR
// end ; end ;
47943: GO 47946
47945: POP
// result := list ;
47946: LD_ADDR_VAR 0 4
47950: PUSH
47951: LD_VAR 0 5
47955: ST_TO_ADDR
// end ;
47956: LD_VAR 0 4
47960: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
47961: LD_INT 0
47963: PPUSH
47964: PPUSH
47965: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
47966: LD_VAR 0 1
47970: NOT
47971: PUSH
47972: LD_VAR 0 2
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: LD_INT 2
47982: PUSH
47983: LD_INT 3
47985: PUSH
47986: LD_INT 4
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: IN
47995: NOT
47996: OR
47997: IFFALSE 48001
// exit ;
47999: GO 48093
// tmp := [ ] ;
48001: LD_ADDR_VAR 0 5
48005: PUSH
48006: EMPTY
48007: ST_TO_ADDR
// for i in units do
48008: LD_ADDR_VAR 0 4
48012: PUSH
48013: LD_VAR 0 1
48017: PUSH
48018: FOR_IN
48019: IFFALSE 48062
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
48021: LD_ADDR_VAR 0 5
48025: PUSH
48026: LD_VAR 0 5
48030: PPUSH
48031: LD_VAR 0 5
48035: PUSH
48036: LD_INT 1
48038: PLUS
48039: PPUSH
48040: LD_VAR 0 4
48044: PPUSH
48045: LD_VAR 0 2
48049: PPUSH
48050: CALL_OW 259
48054: PPUSH
48055: CALL_OW 2
48059: ST_TO_ADDR
48060: GO 48018
48062: POP
48063: POP
// if not tmp then
48064: LD_VAR 0 5
48068: NOT
48069: IFFALSE 48073
// exit ;
48071: GO 48093
// result := SortListByListDesc ( units , tmp ) ;
48073: LD_ADDR_VAR 0 3
48077: PUSH
48078: LD_VAR 0 1
48082: PPUSH
48083: LD_VAR 0 5
48087: PPUSH
48088: CALL_OW 77
48092: ST_TO_ADDR
// end ;
48093: LD_VAR 0 3
48097: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
48098: LD_INT 0
48100: PPUSH
48101: PPUSH
48102: PPUSH
// x := GetX ( building ) ;
48103: LD_ADDR_VAR 0 4
48107: PUSH
48108: LD_VAR 0 2
48112: PPUSH
48113: CALL_OW 250
48117: ST_TO_ADDR
// y := GetY ( building ) ;
48118: LD_ADDR_VAR 0 5
48122: PUSH
48123: LD_VAR 0 2
48127: PPUSH
48128: CALL_OW 251
48132: ST_TO_ADDR
// if GetTaskList ( unit ) then
48133: LD_VAR 0 1
48137: PPUSH
48138: CALL_OW 437
48142: IFFALSE 48237
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48144: LD_STRING e
48146: PUSH
48147: LD_VAR 0 1
48151: PPUSH
48152: CALL_OW 437
48156: PUSH
48157: LD_INT 1
48159: ARRAY
48160: PUSH
48161: LD_INT 1
48163: ARRAY
48164: EQUAL
48165: PUSH
48166: LD_VAR 0 4
48170: PUSH
48171: LD_VAR 0 1
48175: PPUSH
48176: CALL_OW 437
48180: PUSH
48181: LD_INT 1
48183: ARRAY
48184: PUSH
48185: LD_INT 2
48187: ARRAY
48188: EQUAL
48189: AND
48190: PUSH
48191: LD_VAR 0 5
48195: PUSH
48196: LD_VAR 0 1
48200: PPUSH
48201: CALL_OW 437
48205: PUSH
48206: LD_INT 1
48208: ARRAY
48209: PUSH
48210: LD_INT 3
48212: ARRAY
48213: EQUAL
48214: AND
48215: IFFALSE 48227
// result := true else
48217: LD_ADDR_VAR 0 3
48221: PUSH
48222: LD_INT 1
48224: ST_TO_ADDR
48225: GO 48235
// result := false ;
48227: LD_ADDR_VAR 0 3
48231: PUSH
48232: LD_INT 0
48234: ST_TO_ADDR
// end else
48235: GO 48245
// result := false ;
48237: LD_ADDR_VAR 0 3
48241: PUSH
48242: LD_INT 0
48244: ST_TO_ADDR
// end ;
48245: LD_VAR 0 3
48249: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
48250: LD_INT 0
48252: PPUSH
48253: PPUSH
48254: PPUSH
48255: PPUSH
// if not unit or not area then
48256: LD_VAR 0 1
48260: NOT
48261: PUSH
48262: LD_VAR 0 2
48266: NOT
48267: OR
48268: IFFALSE 48272
// exit ;
48270: GO 48436
// tmp := AreaToList ( area , i ) ;
48272: LD_ADDR_VAR 0 6
48276: PUSH
48277: LD_VAR 0 2
48281: PPUSH
48282: LD_VAR 0 5
48286: PPUSH
48287: CALL_OW 517
48291: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
48292: LD_ADDR_VAR 0 5
48296: PUSH
48297: DOUBLE
48298: LD_INT 1
48300: DEC
48301: ST_TO_ADDR
48302: LD_VAR 0 6
48306: PUSH
48307: LD_INT 1
48309: ARRAY
48310: PUSH
48311: FOR_TO
48312: IFFALSE 48434
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
48314: LD_ADDR_VAR 0 7
48318: PUSH
48319: LD_VAR 0 6
48323: PUSH
48324: LD_INT 1
48326: ARRAY
48327: PUSH
48328: LD_VAR 0 5
48332: ARRAY
48333: PUSH
48334: LD_VAR 0 6
48338: PUSH
48339: LD_INT 2
48341: ARRAY
48342: PUSH
48343: LD_VAR 0 5
48347: ARRAY
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
48353: LD_VAR 0 7
48357: PUSH
48358: LD_INT 1
48360: ARRAY
48361: PPUSH
48362: LD_VAR 0 7
48366: PUSH
48367: LD_INT 2
48369: ARRAY
48370: PPUSH
48371: CALL_OW 428
48375: PUSH
48376: LD_INT 0
48378: EQUAL
48379: IFFALSE 48432
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
48381: LD_VAR 0 1
48385: PPUSH
48386: LD_VAR 0 7
48390: PUSH
48391: LD_INT 1
48393: ARRAY
48394: PPUSH
48395: LD_VAR 0 7
48399: PUSH
48400: LD_INT 2
48402: ARRAY
48403: PPUSH
48404: LD_VAR 0 3
48408: PPUSH
48409: CALL_OW 48
// result := IsPlaced ( unit ) ;
48413: LD_ADDR_VAR 0 4
48417: PUSH
48418: LD_VAR 0 1
48422: PPUSH
48423: CALL_OW 305
48427: ST_TO_ADDR
// exit ;
48428: POP
48429: POP
48430: GO 48436
// end ; end ;
48432: GO 48311
48434: POP
48435: POP
// end ;
48436: LD_VAR 0 4
48440: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
48441: LD_INT 0
48443: PPUSH
48444: PPUSH
48445: PPUSH
// if not side or side > 8 then
48446: LD_VAR 0 1
48450: NOT
48451: PUSH
48452: LD_VAR 0 1
48456: PUSH
48457: LD_INT 8
48459: GREATER
48460: OR
48461: IFFALSE 48465
// exit ;
48463: GO 48652
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
48465: LD_ADDR_VAR 0 4
48469: PUSH
48470: LD_INT 22
48472: PUSH
48473: LD_VAR 0 1
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 21
48484: PUSH
48485: LD_INT 3
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PPUSH
48496: CALL_OW 69
48500: ST_TO_ADDR
// if not tmp then
48501: LD_VAR 0 4
48505: NOT
48506: IFFALSE 48510
// exit ;
48508: GO 48652
// enable_addtolog := true ;
48510: LD_ADDR_OWVAR 81
48514: PUSH
48515: LD_INT 1
48517: ST_TO_ADDR
// AddToLog ( [ ) ;
48518: LD_STRING [
48520: PPUSH
48521: CALL_OW 561
// for i in tmp do
48525: LD_ADDR_VAR 0 3
48529: PUSH
48530: LD_VAR 0 4
48534: PUSH
48535: FOR_IN
48536: IFFALSE 48643
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
48538: LD_STRING [
48540: PUSH
48541: LD_VAR 0 3
48545: PPUSH
48546: CALL_OW 266
48550: STR
48551: PUSH
48552: LD_STRING , 
48554: STR
48555: PUSH
48556: LD_VAR 0 3
48560: PPUSH
48561: CALL_OW 250
48565: STR
48566: PUSH
48567: LD_STRING , 
48569: STR
48570: PUSH
48571: LD_VAR 0 3
48575: PPUSH
48576: CALL_OW 251
48580: STR
48581: PUSH
48582: LD_STRING , 
48584: STR
48585: PUSH
48586: LD_VAR 0 3
48590: PPUSH
48591: CALL_OW 254
48595: STR
48596: PUSH
48597: LD_STRING , 
48599: STR
48600: PUSH
48601: LD_VAR 0 3
48605: PPUSH
48606: LD_INT 1
48608: PPUSH
48609: CALL_OW 268
48613: STR
48614: PUSH
48615: LD_STRING , 
48617: STR
48618: PUSH
48619: LD_VAR 0 3
48623: PPUSH
48624: LD_INT 2
48626: PPUSH
48627: CALL_OW 268
48631: STR
48632: PUSH
48633: LD_STRING ],
48635: STR
48636: PPUSH
48637: CALL_OW 561
// end ;
48641: GO 48535
48643: POP
48644: POP
// AddToLog ( ]; ) ;
48645: LD_STRING ];
48647: PPUSH
48648: CALL_OW 561
// end ;
48652: LD_VAR 0 2
48656: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
48657: LD_INT 0
48659: PPUSH
48660: PPUSH
48661: PPUSH
48662: PPUSH
48663: PPUSH
// if not area or not rate or not max then
48664: LD_VAR 0 1
48668: NOT
48669: PUSH
48670: LD_VAR 0 2
48674: NOT
48675: OR
48676: PUSH
48677: LD_VAR 0 4
48681: NOT
48682: OR
48683: IFFALSE 48687
// exit ;
48685: GO 48879
// while 1 do
48687: LD_INT 1
48689: IFFALSE 48879
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
48691: LD_ADDR_VAR 0 9
48695: PUSH
48696: LD_VAR 0 1
48700: PPUSH
48701: LD_INT 1
48703: PPUSH
48704: CALL_OW 287
48708: PUSH
48709: LD_INT 10
48711: MUL
48712: ST_TO_ADDR
// r := rate / 10 ;
48713: LD_ADDR_VAR 0 7
48717: PUSH
48718: LD_VAR 0 2
48722: PUSH
48723: LD_INT 10
48725: DIVREAL
48726: ST_TO_ADDR
// time := 1 1$00 ;
48727: LD_ADDR_VAR 0 8
48731: PUSH
48732: LD_INT 2100
48734: ST_TO_ADDR
// if amount < min then
48735: LD_VAR 0 9
48739: PUSH
48740: LD_VAR 0 3
48744: LESS
48745: IFFALSE 48763
// r := r * 2 else
48747: LD_ADDR_VAR 0 7
48751: PUSH
48752: LD_VAR 0 7
48756: PUSH
48757: LD_INT 2
48759: MUL
48760: ST_TO_ADDR
48761: GO 48789
// if amount > max then
48763: LD_VAR 0 9
48767: PUSH
48768: LD_VAR 0 4
48772: GREATER
48773: IFFALSE 48789
// r := r / 2 ;
48775: LD_ADDR_VAR 0 7
48779: PUSH
48780: LD_VAR 0 7
48784: PUSH
48785: LD_INT 2
48787: DIVREAL
48788: ST_TO_ADDR
// time := time / r ;
48789: LD_ADDR_VAR 0 8
48793: PUSH
48794: LD_VAR 0 8
48798: PUSH
48799: LD_VAR 0 7
48803: DIVREAL
48804: ST_TO_ADDR
// if time < 0 then
48805: LD_VAR 0 8
48809: PUSH
48810: LD_INT 0
48812: LESS
48813: IFFALSE 48830
// time := time * - 1 ;
48815: LD_ADDR_VAR 0 8
48819: PUSH
48820: LD_VAR 0 8
48824: PUSH
48825: LD_INT 1
48827: NEG
48828: MUL
48829: ST_TO_ADDR
// wait ( time ) ;
48830: LD_VAR 0 8
48834: PPUSH
48835: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
48839: LD_INT 35
48841: PPUSH
48842: LD_INT 875
48844: PPUSH
48845: CALL_OW 12
48849: PPUSH
48850: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
48854: LD_INT 1
48856: PPUSH
48857: LD_INT 5
48859: PPUSH
48860: CALL_OW 12
48864: PPUSH
48865: LD_VAR 0 1
48869: PPUSH
48870: LD_INT 1
48872: PPUSH
48873: CALL_OW 55
// end ;
48877: GO 48687
// end ;
48879: LD_VAR 0 5
48883: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
48884: LD_INT 0
48886: PPUSH
48887: PPUSH
48888: PPUSH
48889: PPUSH
48890: PPUSH
48891: PPUSH
48892: PPUSH
48893: PPUSH
// if not turrets or not factories then
48894: LD_VAR 0 1
48898: NOT
48899: PUSH
48900: LD_VAR 0 2
48904: NOT
48905: OR
48906: IFFALSE 48910
// exit ;
48908: GO 49217
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
48910: LD_ADDR_VAR 0 10
48914: PUSH
48915: LD_INT 5
48917: PUSH
48918: LD_INT 6
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 2
48927: PUSH
48928: LD_INT 4
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 3
48937: PUSH
48938: LD_INT 5
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 24
48952: PUSH
48953: LD_INT 25
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 23
48962: PUSH
48963: LD_INT 27
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 42
48976: PUSH
48977: LD_INT 43
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 44
48986: PUSH
48987: LD_INT 46
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 45
48996: PUSH
48997: LD_INT 47
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: LIST
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: LIST
49013: ST_TO_ADDR
// result := [ ] ;
49014: LD_ADDR_VAR 0 3
49018: PUSH
49019: EMPTY
49020: ST_TO_ADDR
// for i in turrets do
49021: LD_ADDR_VAR 0 4
49025: PUSH
49026: LD_VAR 0 1
49030: PUSH
49031: FOR_IN
49032: IFFALSE 49215
// begin nat := GetNation ( i ) ;
49034: LD_ADDR_VAR 0 7
49038: PUSH
49039: LD_VAR 0 4
49043: PPUSH
49044: CALL_OW 248
49048: ST_TO_ADDR
// weapon := 0 ;
49049: LD_ADDR_VAR 0 8
49053: PUSH
49054: LD_INT 0
49056: ST_TO_ADDR
// if not nat then
49057: LD_VAR 0 7
49061: NOT
49062: IFFALSE 49066
// continue ;
49064: GO 49031
// for j in list [ nat ] do
49066: LD_ADDR_VAR 0 5
49070: PUSH
49071: LD_VAR 0 10
49075: PUSH
49076: LD_VAR 0 7
49080: ARRAY
49081: PUSH
49082: FOR_IN
49083: IFFALSE 49124
// if GetBWeapon ( i ) = j [ 1 ] then
49085: LD_VAR 0 4
49089: PPUSH
49090: CALL_OW 269
49094: PUSH
49095: LD_VAR 0 5
49099: PUSH
49100: LD_INT 1
49102: ARRAY
49103: EQUAL
49104: IFFALSE 49122
// begin weapon := j [ 2 ] ;
49106: LD_ADDR_VAR 0 8
49110: PUSH
49111: LD_VAR 0 5
49115: PUSH
49116: LD_INT 2
49118: ARRAY
49119: ST_TO_ADDR
// break ;
49120: GO 49124
// end ;
49122: GO 49082
49124: POP
49125: POP
// if not weapon then
49126: LD_VAR 0 8
49130: NOT
49131: IFFALSE 49135
// continue ;
49133: GO 49031
// for k in factories do
49135: LD_ADDR_VAR 0 6
49139: PUSH
49140: LD_VAR 0 2
49144: PUSH
49145: FOR_IN
49146: IFFALSE 49211
// begin weapons := AvailableWeaponList ( k ) ;
49148: LD_ADDR_VAR 0 9
49152: PUSH
49153: LD_VAR 0 6
49157: PPUSH
49158: CALL_OW 478
49162: ST_TO_ADDR
// if not weapons then
49163: LD_VAR 0 9
49167: NOT
49168: IFFALSE 49172
// continue ;
49170: GO 49145
// if weapon in weapons then
49172: LD_VAR 0 8
49176: PUSH
49177: LD_VAR 0 9
49181: IN
49182: IFFALSE 49209
// begin result := [ i , weapon ] ;
49184: LD_ADDR_VAR 0 3
49188: PUSH
49189: LD_VAR 0 4
49193: PUSH
49194: LD_VAR 0 8
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: ST_TO_ADDR
// exit ;
49203: POP
49204: POP
49205: POP
49206: POP
49207: GO 49217
// end ; end ;
49209: GO 49145
49211: POP
49212: POP
// end ;
49213: GO 49031
49215: POP
49216: POP
// end ;
49217: LD_VAR 0 3
49221: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
49222: LD_INT 0
49224: PPUSH
// if not side or side > 8 then
49225: LD_VAR 0 3
49229: NOT
49230: PUSH
49231: LD_VAR 0 3
49235: PUSH
49236: LD_INT 8
49238: GREATER
49239: OR
49240: IFFALSE 49244
// exit ;
49242: GO 49303
// if not range then
49244: LD_VAR 0 4
49248: NOT
49249: IFFALSE 49260
// range := - 12 ;
49251: LD_ADDR_VAR 0 4
49255: PUSH
49256: LD_INT 12
49258: NEG
49259: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
49260: LD_VAR 0 1
49264: PPUSH
49265: LD_VAR 0 2
49269: PPUSH
49270: LD_VAR 0 3
49274: PPUSH
49275: LD_VAR 0 4
49279: PPUSH
49280: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
49284: LD_VAR 0 1
49288: PPUSH
49289: LD_VAR 0 2
49293: PPUSH
49294: LD_VAR 0 3
49298: PPUSH
49299: CALL_OW 331
// end ;
49303: LD_VAR 0 5
49307: RET
// export function Video ( mode ) ; begin
49308: LD_INT 0
49310: PPUSH
// ingame_video = mode ;
49311: LD_ADDR_OWVAR 52
49315: PUSH
49316: LD_VAR 0 1
49320: ST_TO_ADDR
// interface_hidden = mode ;
49321: LD_ADDR_OWVAR 54
49325: PUSH
49326: LD_VAR 0 1
49330: ST_TO_ADDR
// end ;
49331: LD_VAR 0 2
49335: RET
// export function Join ( array , element ) ; begin
49336: LD_INT 0
49338: PPUSH
// result := array ^ element ;
49339: LD_ADDR_VAR 0 3
49343: PUSH
49344: LD_VAR 0 1
49348: PUSH
49349: LD_VAR 0 2
49353: ADD
49354: ST_TO_ADDR
// end ;
49355: LD_VAR 0 3
49359: RET
// export function JoinUnion ( array , element ) ; begin
49360: LD_INT 0
49362: PPUSH
// result := array union element ;
49363: LD_ADDR_VAR 0 3
49367: PUSH
49368: LD_VAR 0 1
49372: PUSH
49373: LD_VAR 0 2
49377: UNION
49378: ST_TO_ADDR
// end ;
49379: LD_VAR 0 3
49383: RET
// export function GetBehemoths ( side ) ; begin
49384: LD_INT 0
49386: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
49387: LD_ADDR_VAR 0 2
49391: PUSH
49392: LD_INT 22
49394: PUSH
49395: LD_VAR 0 1
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 31
49406: PUSH
49407: LD_INT 25
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PPUSH
49418: CALL_OW 69
49422: ST_TO_ADDR
// end ;
49423: LD_VAR 0 2
49427: RET
// export function Shuffle ( array ) ; var i , index ; begin
49428: LD_INT 0
49430: PPUSH
49431: PPUSH
49432: PPUSH
// result := [ ] ;
49433: LD_ADDR_VAR 0 2
49437: PUSH
49438: EMPTY
49439: ST_TO_ADDR
// if not array then
49440: LD_VAR 0 1
49444: NOT
49445: IFFALSE 49449
// exit ;
49447: GO 49548
// Randomize ;
49449: CALL_OW 10
// for i = array downto 1 do
49453: LD_ADDR_VAR 0 3
49457: PUSH
49458: DOUBLE
49459: LD_VAR 0 1
49463: INC
49464: ST_TO_ADDR
49465: LD_INT 1
49467: PUSH
49468: FOR_DOWNTO
49469: IFFALSE 49546
// begin index := rand ( 1 , array ) ;
49471: LD_ADDR_VAR 0 4
49475: PUSH
49476: LD_INT 1
49478: PPUSH
49479: LD_VAR 0 1
49483: PPUSH
49484: CALL_OW 12
49488: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
49489: LD_ADDR_VAR 0 2
49493: PUSH
49494: LD_VAR 0 2
49498: PPUSH
49499: LD_VAR 0 2
49503: PUSH
49504: LD_INT 1
49506: PLUS
49507: PPUSH
49508: LD_VAR 0 1
49512: PUSH
49513: LD_VAR 0 4
49517: ARRAY
49518: PPUSH
49519: CALL_OW 2
49523: ST_TO_ADDR
// array := Delete ( array , index ) ;
49524: LD_ADDR_VAR 0 1
49528: PUSH
49529: LD_VAR 0 1
49533: PPUSH
49534: LD_VAR 0 4
49538: PPUSH
49539: CALL_OW 3
49543: ST_TO_ADDR
// end ;
49544: GO 49468
49546: POP
49547: POP
// end ;
49548: LD_VAR 0 2
49552: RET
// export function GetBaseMaterials ( base ) ; begin
49553: LD_INT 0
49555: PPUSH
// result := [ 0 , 0 , 0 ] ;
49556: LD_ADDR_VAR 0 2
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: LD_INT 0
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: LIST
49574: ST_TO_ADDR
// if not base then
49575: LD_VAR 0 1
49579: NOT
49580: IFFALSE 49584
// exit ;
49582: GO 49633
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
49584: LD_ADDR_VAR 0 2
49588: PUSH
49589: LD_VAR 0 1
49593: PPUSH
49594: LD_INT 1
49596: PPUSH
49597: CALL_OW 275
49601: PUSH
49602: LD_VAR 0 1
49606: PPUSH
49607: LD_INT 2
49609: PPUSH
49610: CALL_OW 275
49614: PUSH
49615: LD_VAR 0 1
49619: PPUSH
49620: LD_INT 3
49622: PPUSH
49623: CALL_OW 275
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: LIST
49632: ST_TO_ADDR
// end ;
49633: LD_VAR 0 2
49637: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
49638: LD_INT 0
49640: PPUSH
49641: PPUSH
// result := array ;
49642: LD_ADDR_VAR 0 3
49646: PUSH
49647: LD_VAR 0 1
49651: ST_TO_ADDR
// if size > 0 then
49652: LD_VAR 0 2
49656: PUSH
49657: LD_INT 0
49659: GREATER
49660: IFFALSE 49706
// for i := array downto size do
49662: LD_ADDR_VAR 0 4
49666: PUSH
49667: DOUBLE
49668: LD_VAR 0 1
49672: INC
49673: ST_TO_ADDR
49674: LD_VAR 0 2
49678: PUSH
49679: FOR_DOWNTO
49680: IFFALSE 49704
// result := Delete ( result , result ) ;
49682: LD_ADDR_VAR 0 3
49686: PUSH
49687: LD_VAR 0 3
49691: PPUSH
49692: LD_VAR 0 3
49696: PPUSH
49697: CALL_OW 3
49701: ST_TO_ADDR
49702: GO 49679
49704: POP
49705: POP
// end ;
49706: LD_VAR 0 3
49710: RET
// export function ComExit ( unit ) ; var tmp ; begin
49711: LD_INT 0
49713: PPUSH
49714: PPUSH
// if not IsInUnit ( unit ) then
49715: LD_VAR 0 1
49719: PPUSH
49720: CALL_OW 310
49724: NOT
49725: IFFALSE 49729
// exit ;
49727: GO 49789
// tmp := IsInUnit ( unit ) ;
49729: LD_ADDR_VAR 0 3
49733: PUSH
49734: LD_VAR 0 1
49738: PPUSH
49739: CALL_OW 310
49743: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
49744: LD_VAR 0 3
49748: PPUSH
49749: CALL_OW 247
49753: PUSH
49754: LD_INT 2
49756: EQUAL
49757: IFFALSE 49770
// ComExitVehicle ( unit ) else
49759: LD_VAR 0 1
49763: PPUSH
49764: CALL_OW 121
49768: GO 49779
// ComExitBuilding ( unit ) ;
49770: LD_VAR 0 1
49774: PPUSH
49775: CALL_OW 122
// result := tmp ;
49779: LD_ADDR_VAR 0 2
49783: PUSH
49784: LD_VAR 0 3
49788: ST_TO_ADDR
// end ;
49789: LD_VAR 0 2
49793: RET
// export function ResetHc ; begin
49794: LD_INT 0
49796: PPUSH
// InitHc ;
49797: CALL_OW 19
// hc_importance := 0 ;
49801: LD_ADDR_OWVAR 32
49805: PUSH
49806: LD_INT 0
49808: ST_TO_ADDR
// end ; end_of_file
49809: LD_VAR 0 1
49813: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
49814: GO 49816
49816: DISABLE
// begin ru_radar := 98 ;
49817: LD_ADDR_EXP 48
49821: PUSH
49822: LD_INT 98
49824: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
49825: LD_ADDR_EXP 49
49829: PUSH
49830: LD_INT 89
49832: ST_TO_ADDR
// us_hack := 99 ;
49833: LD_ADDR_EXP 50
49837: PUSH
49838: LD_INT 99
49840: ST_TO_ADDR
// us_artillery := 97 ;
49841: LD_ADDR_EXP 51
49845: PUSH
49846: LD_INT 97
49848: ST_TO_ADDR
// ar_bio_bomb := 91 ;
49849: LD_ADDR_EXP 52
49853: PUSH
49854: LD_INT 91
49856: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
49857: LD_ADDR_EXP 53
49861: PUSH
49862: LD_INT 92
49864: ST_TO_ADDR
// tech_Artillery := 80 ;
49865: LD_ADDR_EXP 54
49869: PUSH
49870: LD_INT 80
49872: ST_TO_ADDR
// tech_RadMat := 81 ;
49873: LD_ADDR_EXP 55
49877: PUSH
49878: LD_INT 81
49880: ST_TO_ADDR
// tech_BasicTools := 82 ;
49881: LD_ADDR_EXP 56
49885: PUSH
49886: LD_INT 82
49888: ST_TO_ADDR
// tech_Cargo := 83 ;
49889: LD_ADDR_EXP 57
49893: PUSH
49894: LD_INT 83
49896: ST_TO_ADDR
// tech_Track := 84 ;
49897: LD_ADDR_EXP 58
49901: PUSH
49902: LD_INT 84
49904: ST_TO_ADDR
// tech_Crane := 85 ;
49905: LD_ADDR_EXP 59
49909: PUSH
49910: LD_INT 85
49912: ST_TO_ADDR
// tech_Bulldozer := 86 ;
49913: LD_ADDR_EXP 60
49917: PUSH
49918: LD_INT 86
49920: ST_TO_ADDR
// tech_Hovercraft := 87 ;
49921: LD_ADDR_EXP 61
49925: PUSH
49926: LD_INT 87
49928: ST_TO_ADDR
// end ; end_of_file
49929: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
49930: LD_INT 0
49932: PPUSH
49933: PPUSH
// skirmish := false ;
49934: LD_ADDR_EXP 62
49938: PUSH
49939: LD_INT 0
49941: ST_TO_ADDR
// debug_mc := false ;
49942: LD_ADDR_EXP 63
49946: PUSH
49947: LD_INT 0
49949: ST_TO_ADDR
// mc_bases := [ ] ;
49950: LD_ADDR_EXP 64
49954: PUSH
49955: EMPTY
49956: ST_TO_ADDR
// mc_sides := [ ] ;
49957: LD_ADDR_EXP 90
49961: PUSH
49962: EMPTY
49963: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
49964: LD_ADDR_EXP 65
49968: PUSH
49969: EMPTY
49970: ST_TO_ADDR
// mc_building_repairs := [ ] ;
49971: LD_ADDR_EXP 66
49975: PUSH
49976: EMPTY
49977: ST_TO_ADDR
// mc_need_heal := [ ] ;
49978: LD_ADDR_EXP 67
49982: PUSH
49983: EMPTY
49984: ST_TO_ADDR
// mc_healers := [ ] ;
49985: LD_ADDR_EXP 68
49989: PUSH
49990: EMPTY
49991: ST_TO_ADDR
// mc_build_list := [ ] ;
49992: LD_ADDR_EXP 69
49996: PUSH
49997: EMPTY
49998: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
49999: LD_ADDR_EXP 96
50003: PUSH
50004: EMPTY
50005: ST_TO_ADDR
// mc_builders := [ ] ;
50006: LD_ADDR_EXP 70
50010: PUSH
50011: EMPTY
50012: ST_TO_ADDR
// mc_construct_list := [ ] ;
50013: LD_ADDR_EXP 71
50017: PUSH
50018: EMPTY
50019: ST_TO_ADDR
// mc_turret_list := [ ] ;
50020: LD_ADDR_EXP 72
50024: PUSH
50025: EMPTY
50026: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
50027: LD_ADDR_EXP 73
50031: PUSH
50032: EMPTY
50033: ST_TO_ADDR
// mc_miners := [ ] ;
50034: LD_ADDR_EXP 78
50038: PUSH
50039: EMPTY
50040: ST_TO_ADDR
// mc_mines := [ ] ;
50041: LD_ADDR_EXP 77
50045: PUSH
50046: EMPTY
50047: ST_TO_ADDR
// mc_minefields := [ ] ;
50048: LD_ADDR_EXP 79
50052: PUSH
50053: EMPTY
50054: ST_TO_ADDR
// mc_crates := [ ] ;
50055: LD_ADDR_EXP 80
50059: PUSH
50060: EMPTY
50061: ST_TO_ADDR
// mc_crates_collector := [ ] ;
50062: LD_ADDR_EXP 81
50066: PUSH
50067: EMPTY
50068: ST_TO_ADDR
// mc_crates_area := [ ] ;
50069: LD_ADDR_EXP 82
50073: PUSH
50074: EMPTY
50075: ST_TO_ADDR
// mc_vehicles := [ ] ;
50076: LD_ADDR_EXP 83
50080: PUSH
50081: EMPTY
50082: ST_TO_ADDR
// mc_attack := [ ] ;
50083: LD_ADDR_EXP 84
50087: PUSH
50088: EMPTY
50089: ST_TO_ADDR
// mc_produce := [ ] ;
50090: LD_ADDR_EXP 85
50094: PUSH
50095: EMPTY
50096: ST_TO_ADDR
// mc_defender := [ ] ;
50097: LD_ADDR_EXP 86
50101: PUSH
50102: EMPTY
50103: ST_TO_ADDR
// mc_parking := [ ] ;
50104: LD_ADDR_EXP 88
50108: PUSH
50109: EMPTY
50110: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
50111: LD_ADDR_EXP 74
50115: PUSH
50116: EMPTY
50117: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
50118: LD_ADDR_EXP 76
50122: PUSH
50123: EMPTY
50124: ST_TO_ADDR
// mc_scan := [ ] ;
50125: LD_ADDR_EXP 87
50129: PUSH
50130: EMPTY
50131: ST_TO_ADDR
// mc_scan_area := [ ] ;
50132: LD_ADDR_EXP 89
50136: PUSH
50137: EMPTY
50138: ST_TO_ADDR
// mc_tech := [ ] ;
50139: LD_ADDR_EXP 91
50143: PUSH
50144: EMPTY
50145: ST_TO_ADDR
// mc_class := [ ] ;
50146: LD_ADDR_EXP 105
50150: PUSH
50151: EMPTY
50152: ST_TO_ADDR
// mc_class_case_use := [ ] ;
50153: LD_ADDR_EXP 106
50157: PUSH
50158: EMPTY
50159: ST_TO_ADDR
// end ;
50160: LD_VAR 0 1
50164: RET
// export function MC_Kill ( base ) ; begin
50165: LD_INT 0
50167: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
50168: LD_ADDR_EXP 64
50172: PUSH
50173: LD_EXP 64
50177: PPUSH
50178: LD_VAR 0 1
50182: PPUSH
50183: EMPTY
50184: PPUSH
50185: CALL_OW 1
50189: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
50190: LD_ADDR_EXP 65
50194: PUSH
50195: LD_EXP 65
50199: PPUSH
50200: LD_VAR 0 1
50204: PPUSH
50205: EMPTY
50206: PPUSH
50207: CALL_OW 1
50211: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
50212: LD_ADDR_EXP 66
50216: PUSH
50217: LD_EXP 66
50221: PPUSH
50222: LD_VAR 0 1
50226: PPUSH
50227: EMPTY
50228: PPUSH
50229: CALL_OW 1
50233: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
50234: LD_ADDR_EXP 67
50238: PUSH
50239: LD_EXP 67
50243: PPUSH
50244: LD_VAR 0 1
50248: PPUSH
50249: EMPTY
50250: PPUSH
50251: CALL_OW 1
50255: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
50256: LD_ADDR_EXP 68
50260: PUSH
50261: LD_EXP 68
50265: PPUSH
50266: LD_VAR 0 1
50270: PPUSH
50271: EMPTY
50272: PPUSH
50273: CALL_OW 1
50277: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
50278: LD_ADDR_EXP 69
50282: PUSH
50283: LD_EXP 69
50287: PPUSH
50288: LD_VAR 0 1
50292: PPUSH
50293: EMPTY
50294: PPUSH
50295: CALL_OW 1
50299: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
50300: LD_ADDR_EXP 70
50304: PUSH
50305: LD_EXP 70
50309: PPUSH
50310: LD_VAR 0 1
50314: PPUSH
50315: EMPTY
50316: PPUSH
50317: CALL_OW 1
50321: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
50322: LD_ADDR_EXP 71
50326: PUSH
50327: LD_EXP 71
50331: PPUSH
50332: LD_VAR 0 1
50336: PPUSH
50337: EMPTY
50338: PPUSH
50339: CALL_OW 1
50343: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
50344: LD_ADDR_EXP 72
50348: PUSH
50349: LD_EXP 72
50353: PPUSH
50354: LD_VAR 0 1
50358: PPUSH
50359: EMPTY
50360: PPUSH
50361: CALL_OW 1
50365: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
50366: LD_ADDR_EXP 73
50370: PUSH
50371: LD_EXP 73
50375: PPUSH
50376: LD_VAR 0 1
50380: PPUSH
50381: EMPTY
50382: PPUSH
50383: CALL_OW 1
50387: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
50388: LD_ADDR_EXP 74
50392: PUSH
50393: LD_EXP 74
50397: PPUSH
50398: LD_VAR 0 1
50402: PPUSH
50403: EMPTY
50404: PPUSH
50405: CALL_OW 1
50409: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
50410: LD_ADDR_EXP 75
50414: PUSH
50415: LD_EXP 75
50419: PPUSH
50420: LD_VAR 0 1
50424: PPUSH
50425: LD_INT 0
50427: PPUSH
50428: CALL_OW 1
50432: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
50433: LD_ADDR_EXP 76
50437: PUSH
50438: LD_EXP 76
50442: PPUSH
50443: LD_VAR 0 1
50447: PPUSH
50448: EMPTY
50449: PPUSH
50450: CALL_OW 1
50454: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
50455: LD_ADDR_EXP 77
50459: PUSH
50460: LD_EXP 77
50464: PPUSH
50465: LD_VAR 0 1
50469: PPUSH
50470: EMPTY
50471: PPUSH
50472: CALL_OW 1
50476: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
50477: LD_ADDR_EXP 78
50481: PUSH
50482: LD_EXP 78
50486: PPUSH
50487: LD_VAR 0 1
50491: PPUSH
50492: EMPTY
50493: PPUSH
50494: CALL_OW 1
50498: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
50499: LD_ADDR_EXP 79
50503: PUSH
50504: LD_EXP 79
50508: PPUSH
50509: LD_VAR 0 1
50513: PPUSH
50514: EMPTY
50515: PPUSH
50516: CALL_OW 1
50520: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
50521: LD_ADDR_EXP 80
50525: PUSH
50526: LD_EXP 80
50530: PPUSH
50531: LD_VAR 0 1
50535: PPUSH
50536: EMPTY
50537: PPUSH
50538: CALL_OW 1
50542: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
50543: LD_ADDR_EXP 81
50547: PUSH
50548: LD_EXP 81
50552: PPUSH
50553: LD_VAR 0 1
50557: PPUSH
50558: EMPTY
50559: PPUSH
50560: CALL_OW 1
50564: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
50565: LD_ADDR_EXP 82
50569: PUSH
50570: LD_EXP 82
50574: PPUSH
50575: LD_VAR 0 1
50579: PPUSH
50580: EMPTY
50581: PPUSH
50582: CALL_OW 1
50586: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
50587: LD_ADDR_EXP 83
50591: PUSH
50592: LD_EXP 83
50596: PPUSH
50597: LD_VAR 0 1
50601: PPUSH
50602: EMPTY
50603: PPUSH
50604: CALL_OW 1
50608: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
50609: LD_ADDR_EXP 84
50613: PUSH
50614: LD_EXP 84
50618: PPUSH
50619: LD_VAR 0 1
50623: PPUSH
50624: EMPTY
50625: PPUSH
50626: CALL_OW 1
50630: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
50631: LD_ADDR_EXP 85
50635: PUSH
50636: LD_EXP 85
50640: PPUSH
50641: LD_VAR 0 1
50645: PPUSH
50646: EMPTY
50647: PPUSH
50648: CALL_OW 1
50652: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
50653: LD_ADDR_EXP 86
50657: PUSH
50658: LD_EXP 86
50662: PPUSH
50663: LD_VAR 0 1
50667: PPUSH
50668: EMPTY
50669: PPUSH
50670: CALL_OW 1
50674: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
50675: LD_ADDR_EXP 87
50679: PUSH
50680: LD_EXP 87
50684: PPUSH
50685: LD_VAR 0 1
50689: PPUSH
50690: EMPTY
50691: PPUSH
50692: CALL_OW 1
50696: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
50697: LD_ADDR_EXP 88
50701: PUSH
50702: LD_EXP 88
50706: PPUSH
50707: LD_VAR 0 1
50711: PPUSH
50712: EMPTY
50713: PPUSH
50714: CALL_OW 1
50718: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
50719: LD_ADDR_EXP 89
50723: PUSH
50724: LD_EXP 89
50728: PPUSH
50729: LD_VAR 0 1
50733: PPUSH
50734: EMPTY
50735: PPUSH
50736: CALL_OW 1
50740: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
50741: LD_ADDR_EXP 91
50745: PUSH
50746: LD_EXP 91
50750: PPUSH
50751: LD_VAR 0 1
50755: PPUSH
50756: EMPTY
50757: PPUSH
50758: CALL_OW 1
50762: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
50763: LD_ADDR_EXP 93
50767: PUSH
50768: LD_EXP 93
50772: PPUSH
50773: LD_VAR 0 1
50777: PPUSH
50778: EMPTY
50779: PPUSH
50780: CALL_OW 1
50784: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
50785: LD_ADDR_EXP 94
50789: PUSH
50790: LD_EXP 94
50794: PPUSH
50795: LD_VAR 0 1
50799: PPUSH
50800: EMPTY
50801: PPUSH
50802: CALL_OW 1
50806: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
50807: LD_ADDR_EXP 95
50811: PUSH
50812: LD_EXP 95
50816: PPUSH
50817: LD_VAR 0 1
50821: PPUSH
50822: EMPTY
50823: PPUSH
50824: CALL_OW 1
50828: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
50829: LD_ADDR_EXP 96
50833: PUSH
50834: LD_EXP 96
50838: PPUSH
50839: LD_VAR 0 1
50843: PPUSH
50844: EMPTY
50845: PPUSH
50846: CALL_OW 1
50850: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
50851: LD_ADDR_EXP 97
50855: PUSH
50856: LD_EXP 97
50860: PPUSH
50861: LD_VAR 0 1
50865: PPUSH
50866: EMPTY
50867: PPUSH
50868: CALL_OW 1
50872: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
50873: LD_ADDR_EXP 98
50877: PUSH
50878: LD_EXP 98
50882: PPUSH
50883: LD_VAR 0 1
50887: PPUSH
50888: EMPTY
50889: PPUSH
50890: CALL_OW 1
50894: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
50895: LD_ADDR_EXP 99
50899: PUSH
50900: LD_EXP 99
50904: PPUSH
50905: LD_VAR 0 1
50909: PPUSH
50910: EMPTY
50911: PPUSH
50912: CALL_OW 1
50916: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
50917: LD_ADDR_EXP 100
50921: PUSH
50922: LD_EXP 100
50926: PPUSH
50927: LD_VAR 0 1
50931: PPUSH
50932: EMPTY
50933: PPUSH
50934: CALL_OW 1
50938: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
50939: LD_ADDR_EXP 101
50943: PUSH
50944: LD_EXP 101
50948: PPUSH
50949: LD_VAR 0 1
50953: PPUSH
50954: EMPTY
50955: PPUSH
50956: CALL_OW 1
50960: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
50961: LD_ADDR_EXP 102
50965: PUSH
50966: LD_EXP 102
50970: PPUSH
50971: LD_VAR 0 1
50975: PPUSH
50976: EMPTY
50977: PPUSH
50978: CALL_OW 1
50982: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
50983: LD_ADDR_EXP 103
50987: PUSH
50988: LD_EXP 103
50992: PPUSH
50993: LD_VAR 0 1
50997: PPUSH
50998: EMPTY
50999: PPUSH
51000: CALL_OW 1
51004: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
51005: LD_ADDR_EXP 104
51009: PUSH
51010: LD_EXP 104
51014: PPUSH
51015: LD_VAR 0 1
51019: PPUSH
51020: EMPTY
51021: PPUSH
51022: CALL_OW 1
51026: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
51027: LD_ADDR_EXP 105
51031: PUSH
51032: LD_EXP 105
51036: PPUSH
51037: LD_VAR 0 1
51041: PPUSH
51042: EMPTY
51043: PPUSH
51044: CALL_OW 1
51048: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
51049: LD_ADDR_EXP 106
51053: PUSH
51054: LD_EXP 106
51058: PPUSH
51059: LD_VAR 0 1
51063: PPUSH
51064: LD_INT 0
51066: PPUSH
51067: CALL_OW 1
51071: ST_TO_ADDR
// end ;
51072: LD_VAR 0 2
51076: RET
// export function MC_Add ( side , units ) ; var base ; begin
51077: LD_INT 0
51079: PPUSH
51080: PPUSH
// base := mc_bases + 1 ;
51081: LD_ADDR_VAR 0 4
51085: PUSH
51086: LD_EXP 64
51090: PUSH
51091: LD_INT 1
51093: PLUS
51094: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
51095: LD_ADDR_EXP 90
51099: PUSH
51100: LD_EXP 90
51104: PPUSH
51105: LD_VAR 0 4
51109: PPUSH
51110: LD_VAR 0 1
51114: PPUSH
51115: CALL_OW 1
51119: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
51120: LD_ADDR_EXP 64
51124: PUSH
51125: LD_EXP 64
51129: PPUSH
51130: LD_VAR 0 4
51134: PPUSH
51135: LD_VAR 0 2
51139: PPUSH
51140: CALL_OW 1
51144: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
51145: LD_ADDR_EXP 65
51149: PUSH
51150: LD_EXP 65
51154: PPUSH
51155: LD_VAR 0 4
51159: PPUSH
51160: EMPTY
51161: PPUSH
51162: CALL_OW 1
51166: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
51167: LD_ADDR_EXP 66
51171: PUSH
51172: LD_EXP 66
51176: PPUSH
51177: LD_VAR 0 4
51181: PPUSH
51182: EMPTY
51183: PPUSH
51184: CALL_OW 1
51188: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
51189: LD_ADDR_EXP 67
51193: PUSH
51194: LD_EXP 67
51198: PPUSH
51199: LD_VAR 0 4
51203: PPUSH
51204: EMPTY
51205: PPUSH
51206: CALL_OW 1
51210: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
51211: LD_ADDR_EXP 68
51215: PUSH
51216: LD_EXP 68
51220: PPUSH
51221: LD_VAR 0 4
51225: PPUSH
51226: EMPTY
51227: PPUSH
51228: CALL_OW 1
51232: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
51233: LD_ADDR_EXP 69
51237: PUSH
51238: LD_EXP 69
51242: PPUSH
51243: LD_VAR 0 4
51247: PPUSH
51248: EMPTY
51249: PPUSH
51250: CALL_OW 1
51254: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
51255: LD_ADDR_EXP 70
51259: PUSH
51260: LD_EXP 70
51264: PPUSH
51265: LD_VAR 0 4
51269: PPUSH
51270: EMPTY
51271: PPUSH
51272: CALL_OW 1
51276: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
51277: LD_ADDR_EXP 71
51281: PUSH
51282: LD_EXP 71
51286: PPUSH
51287: LD_VAR 0 4
51291: PPUSH
51292: EMPTY
51293: PPUSH
51294: CALL_OW 1
51298: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
51299: LD_ADDR_EXP 72
51303: PUSH
51304: LD_EXP 72
51308: PPUSH
51309: LD_VAR 0 4
51313: PPUSH
51314: EMPTY
51315: PPUSH
51316: CALL_OW 1
51320: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
51321: LD_ADDR_EXP 73
51325: PUSH
51326: LD_EXP 73
51330: PPUSH
51331: LD_VAR 0 4
51335: PPUSH
51336: EMPTY
51337: PPUSH
51338: CALL_OW 1
51342: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
51343: LD_ADDR_EXP 74
51347: PUSH
51348: LD_EXP 74
51352: PPUSH
51353: LD_VAR 0 4
51357: PPUSH
51358: EMPTY
51359: PPUSH
51360: CALL_OW 1
51364: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
51365: LD_ADDR_EXP 75
51369: PUSH
51370: LD_EXP 75
51374: PPUSH
51375: LD_VAR 0 4
51379: PPUSH
51380: LD_INT 0
51382: PPUSH
51383: CALL_OW 1
51387: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
51388: LD_ADDR_EXP 76
51392: PUSH
51393: LD_EXP 76
51397: PPUSH
51398: LD_VAR 0 4
51402: PPUSH
51403: EMPTY
51404: PPUSH
51405: CALL_OW 1
51409: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
51410: LD_ADDR_EXP 77
51414: PUSH
51415: LD_EXP 77
51419: PPUSH
51420: LD_VAR 0 4
51424: PPUSH
51425: EMPTY
51426: PPUSH
51427: CALL_OW 1
51431: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
51432: LD_ADDR_EXP 78
51436: PUSH
51437: LD_EXP 78
51441: PPUSH
51442: LD_VAR 0 4
51446: PPUSH
51447: EMPTY
51448: PPUSH
51449: CALL_OW 1
51453: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
51454: LD_ADDR_EXP 79
51458: PUSH
51459: LD_EXP 79
51463: PPUSH
51464: LD_VAR 0 4
51468: PPUSH
51469: EMPTY
51470: PPUSH
51471: CALL_OW 1
51475: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
51476: LD_ADDR_EXP 80
51480: PUSH
51481: LD_EXP 80
51485: PPUSH
51486: LD_VAR 0 4
51490: PPUSH
51491: EMPTY
51492: PPUSH
51493: CALL_OW 1
51497: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
51498: LD_ADDR_EXP 81
51502: PUSH
51503: LD_EXP 81
51507: PPUSH
51508: LD_VAR 0 4
51512: PPUSH
51513: EMPTY
51514: PPUSH
51515: CALL_OW 1
51519: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
51520: LD_ADDR_EXP 82
51524: PUSH
51525: LD_EXP 82
51529: PPUSH
51530: LD_VAR 0 4
51534: PPUSH
51535: EMPTY
51536: PPUSH
51537: CALL_OW 1
51541: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
51542: LD_ADDR_EXP 83
51546: PUSH
51547: LD_EXP 83
51551: PPUSH
51552: LD_VAR 0 4
51556: PPUSH
51557: EMPTY
51558: PPUSH
51559: CALL_OW 1
51563: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
51564: LD_ADDR_EXP 84
51568: PUSH
51569: LD_EXP 84
51573: PPUSH
51574: LD_VAR 0 4
51578: PPUSH
51579: EMPTY
51580: PPUSH
51581: CALL_OW 1
51585: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
51586: LD_ADDR_EXP 85
51590: PUSH
51591: LD_EXP 85
51595: PPUSH
51596: LD_VAR 0 4
51600: PPUSH
51601: EMPTY
51602: PPUSH
51603: CALL_OW 1
51607: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
51608: LD_ADDR_EXP 86
51612: PUSH
51613: LD_EXP 86
51617: PPUSH
51618: LD_VAR 0 4
51622: PPUSH
51623: EMPTY
51624: PPUSH
51625: CALL_OW 1
51629: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
51630: LD_ADDR_EXP 87
51634: PUSH
51635: LD_EXP 87
51639: PPUSH
51640: LD_VAR 0 4
51644: PPUSH
51645: EMPTY
51646: PPUSH
51647: CALL_OW 1
51651: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
51652: LD_ADDR_EXP 88
51656: PUSH
51657: LD_EXP 88
51661: PPUSH
51662: LD_VAR 0 4
51666: PPUSH
51667: EMPTY
51668: PPUSH
51669: CALL_OW 1
51673: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
51674: LD_ADDR_EXP 89
51678: PUSH
51679: LD_EXP 89
51683: PPUSH
51684: LD_VAR 0 4
51688: PPUSH
51689: EMPTY
51690: PPUSH
51691: CALL_OW 1
51695: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
51696: LD_ADDR_EXP 91
51700: PUSH
51701: LD_EXP 91
51705: PPUSH
51706: LD_VAR 0 4
51710: PPUSH
51711: EMPTY
51712: PPUSH
51713: CALL_OW 1
51717: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
51718: LD_ADDR_EXP 93
51722: PUSH
51723: LD_EXP 93
51727: PPUSH
51728: LD_VAR 0 4
51732: PPUSH
51733: EMPTY
51734: PPUSH
51735: CALL_OW 1
51739: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
51740: LD_ADDR_EXP 94
51744: PUSH
51745: LD_EXP 94
51749: PPUSH
51750: LD_VAR 0 4
51754: PPUSH
51755: EMPTY
51756: PPUSH
51757: CALL_OW 1
51761: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
51762: LD_ADDR_EXP 95
51766: PUSH
51767: LD_EXP 95
51771: PPUSH
51772: LD_VAR 0 4
51776: PPUSH
51777: EMPTY
51778: PPUSH
51779: CALL_OW 1
51783: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
51784: LD_ADDR_EXP 96
51788: PUSH
51789: LD_EXP 96
51793: PPUSH
51794: LD_VAR 0 4
51798: PPUSH
51799: EMPTY
51800: PPUSH
51801: CALL_OW 1
51805: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
51806: LD_ADDR_EXP 97
51810: PUSH
51811: LD_EXP 97
51815: PPUSH
51816: LD_VAR 0 4
51820: PPUSH
51821: EMPTY
51822: PPUSH
51823: CALL_OW 1
51827: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
51828: LD_ADDR_EXP 98
51832: PUSH
51833: LD_EXP 98
51837: PPUSH
51838: LD_VAR 0 4
51842: PPUSH
51843: EMPTY
51844: PPUSH
51845: CALL_OW 1
51849: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
51850: LD_ADDR_EXP 99
51854: PUSH
51855: LD_EXP 99
51859: PPUSH
51860: LD_VAR 0 4
51864: PPUSH
51865: EMPTY
51866: PPUSH
51867: CALL_OW 1
51871: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
51872: LD_ADDR_EXP 100
51876: PUSH
51877: LD_EXP 100
51881: PPUSH
51882: LD_VAR 0 4
51886: PPUSH
51887: EMPTY
51888: PPUSH
51889: CALL_OW 1
51893: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
51894: LD_ADDR_EXP 101
51898: PUSH
51899: LD_EXP 101
51903: PPUSH
51904: LD_VAR 0 4
51908: PPUSH
51909: EMPTY
51910: PPUSH
51911: CALL_OW 1
51915: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
51916: LD_ADDR_EXP 102
51920: PUSH
51921: LD_EXP 102
51925: PPUSH
51926: LD_VAR 0 4
51930: PPUSH
51931: EMPTY
51932: PPUSH
51933: CALL_OW 1
51937: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
51938: LD_ADDR_EXP 103
51942: PUSH
51943: LD_EXP 103
51947: PPUSH
51948: LD_VAR 0 4
51952: PPUSH
51953: EMPTY
51954: PPUSH
51955: CALL_OW 1
51959: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
51960: LD_ADDR_EXP 104
51964: PUSH
51965: LD_EXP 104
51969: PPUSH
51970: LD_VAR 0 4
51974: PPUSH
51975: EMPTY
51976: PPUSH
51977: CALL_OW 1
51981: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
51982: LD_ADDR_EXP 105
51986: PUSH
51987: LD_EXP 105
51991: PPUSH
51992: LD_VAR 0 4
51996: PPUSH
51997: EMPTY
51998: PPUSH
51999: CALL_OW 1
52003: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
52004: LD_ADDR_EXP 106
52008: PUSH
52009: LD_EXP 106
52013: PPUSH
52014: LD_VAR 0 4
52018: PPUSH
52019: LD_INT 0
52021: PPUSH
52022: CALL_OW 1
52026: ST_TO_ADDR
// result := base ;
52027: LD_ADDR_VAR 0 3
52031: PUSH
52032: LD_VAR 0 4
52036: ST_TO_ADDR
// end ;
52037: LD_VAR 0 3
52041: RET
// export function MC_Start ( ) ; var i ; begin
52042: LD_INT 0
52044: PPUSH
52045: PPUSH
// for i = 1 to mc_bases do
52046: LD_ADDR_VAR 0 2
52050: PUSH
52051: DOUBLE
52052: LD_INT 1
52054: DEC
52055: ST_TO_ADDR
52056: LD_EXP 64
52060: PUSH
52061: FOR_TO
52062: IFFALSE 53139
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
52064: LD_ADDR_EXP 64
52068: PUSH
52069: LD_EXP 64
52073: PPUSH
52074: LD_VAR 0 2
52078: PPUSH
52079: LD_EXP 64
52083: PUSH
52084: LD_VAR 0 2
52088: ARRAY
52089: PUSH
52090: LD_INT 0
52092: DIFF
52093: PPUSH
52094: CALL_OW 1
52098: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
52099: LD_ADDR_EXP 65
52103: PUSH
52104: LD_EXP 65
52108: PPUSH
52109: LD_VAR 0 2
52113: PPUSH
52114: EMPTY
52115: PPUSH
52116: CALL_OW 1
52120: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
52121: LD_ADDR_EXP 66
52125: PUSH
52126: LD_EXP 66
52130: PPUSH
52131: LD_VAR 0 2
52135: PPUSH
52136: EMPTY
52137: PPUSH
52138: CALL_OW 1
52142: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
52143: LD_ADDR_EXP 67
52147: PUSH
52148: LD_EXP 67
52152: PPUSH
52153: LD_VAR 0 2
52157: PPUSH
52158: EMPTY
52159: PPUSH
52160: CALL_OW 1
52164: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
52165: LD_ADDR_EXP 68
52169: PUSH
52170: LD_EXP 68
52174: PPUSH
52175: LD_VAR 0 2
52179: PPUSH
52180: EMPTY
52181: PUSH
52182: EMPTY
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PPUSH
52188: CALL_OW 1
52192: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
52193: LD_ADDR_EXP 69
52197: PUSH
52198: LD_EXP 69
52202: PPUSH
52203: LD_VAR 0 2
52207: PPUSH
52208: EMPTY
52209: PPUSH
52210: CALL_OW 1
52214: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
52215: LD_ADDR_EXP 96
52219: PUSH
52220: LD_EXP 96
52224: PPUSH
52225: LD_VAR 0 2
52229: PPUSH
52230: EMPTY
52231: PPUSH
52232: CALL_OW 1
52236: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
52237: LD_ADDR_EXP 70
52241: PUSH
52242: LD_EXP 70
52246: PPUSH
52247: LD_VAR 0 2
52251: PPUSH
52252: EMPTY
52253: PPUSH
52254: CALL_OW 1
52258: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
52259: LD_ADDR_EXP 71
52263: PUSH
52264: LD_EXP 71
52268: PPUSH
52269: LD_VAR 0 2
52273: PPUSH
52274: EMPTY
52275: PPUSH
52276: CALL_OW 1
52280: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
52281: LD_ADDR_EXP 72
52285: PUSH
52286: LD_EXP 72
52290: PPUSH
52291: LD_VAR 0 2
52295: PPUSH
52296: LD_EXP 64
52300: PUSH
52301: LD_VAR 0 2
52305: ARRAY
52306: PPUSH
52307: LD_INT 2
52309: PUSH
52310: LD_INT 30
52312: PUSH
52313: LD_INT 32
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 30
52322: PUSH
52323: LD_INT 33
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: LIST
52334: PPUSH
52335: CALL_OW 72
52339: PPUSH
52340: CALL_OW 1
52344: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
52345: LD_ADDR_EXP 73
52349: PUSH
52350: LD_EXP 73
52354: PPUSH
52355: LD_VAR 0 2
52359: PPUSH
52360: LD_EXP 64
52364: PUSH
52365: LD_VAR 0 2
52369: ARRAY
52370: PPUSH
52371: LD_INT 2
52373: PUSH
52374: LD_INT 30
52376: PUSH
52377: LD_INT 32
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 30
52386: PUSH
52387: LD_INT 31
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 58
52401: PUSH
52402: EMPTY
52403: LIST
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PPUSH
52409: CALL_OW 72
52413: PPUSH
52414: CALL_OW 1
52418: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
52419: LD_ADDR_EXP 74
52423: PUSH
52424: LD_EXP 74
52428: PPUSH
52429: LD_VAR 0 2
52433: PPUSH
52434: EMPTY
52435: PPUSH
52436: CALL_OW 1
52440: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
52441: LD_ADDR_EXP 78
52445: PUSH
52446: LD_EXP 78
52450: PPUSH
52451: LD_VAR 0 2
52455: PPUSH
52456: EMPTY
52457: PPUSH
52458: CALL_OW 1
52462: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
52463: LD_ADDR_EXP 77
52467: PUSH
52468: LD_EXP 77
52472: PPUSH
52473: LD_VAR 0 2
52477: PPUSH
52478: EMPTY
52479: PPUSH
52480: CALL_OW 1
52484: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
52485: LD_ADDR_EXP 79
52489: PUSH
52490: LD_EXP 79
52494: PPUSH
52495: LD_VAR 0 2
52499: PPUSH
52500: EMPTY
52501: PPUSH
52502: CALL_OW 1
52506: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
52507: LD_ADDR_EXP 80
52511: PUSH
52512: LD_EXP 80
52516: PPUSH
52517: LD_VAR 0 2
52521: PPUSH
52522: EMPTY
52523: PPUSH
52524: CALL_OW 1
52528: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
52529: LD_ADDR_EXP 81
52533: PUSH
52534: LD_EXP 81
52538: PPUSH
52539: LD_VAR 0 2
52543: PPUSH
52544: EMPTY
52545: PPUSH
52546: CALL_OW 1
52550: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
52551: LD_ADDR_EXP 82
52555: PUSH
52556: LD_EXP 82
52560: PPUSH
52561: LD_VAR 0 2
52565: PPUSH
52566: EMPTY
52567: PPUSH
52568: CALL_OW 1
52572: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
52573: LD_ADDR_EXP 83
52577: PUSH
52578: LD_EXP 83
52582: PPUSH
52583: LD_VAR 0 2
52587: PPUSH
52588: EMPTY
52589: PPUSH
52590: CALL_OW 1
52594: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
52595: LD_ADDR_EXP 84
52599: PUSH
52600: LD_EXP 84
52604: PPUSH
52605: LD_VAR 0 2
52609: PPUSH
52610: EMPTY
52611: PPUSH
52612: CALL_OW 1
52616: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
52617: LD_ADDR_EXP 85
52621: PUSH
52622: LD_EXP 85
52626: PPUSH
52627: LD_VAR 0 2
52631: PPUSH
52632: EMPTY
52633: PPUSH
52634: CALL_OW 1
52638: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
52639: LD_ADDR_EXP 86
52643: PUSH
52644: LD_EXP 86
52648: PPUSH
52649: LD_VAR 0 2
52653: PPUSH
52654: EMPTY
52655: PPUSH
52656: CALL_OW 1
52660: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
52661: LD_ADDR_EXP 75
52665: PUSH
52666: LD_EXP 75
52670: PPUSH
52671: LD_VAR 0 2
52675: PPUSH
52676: LD_INT 0
52678: PPUSH
52679: CALL_OW 1
52683: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
52684: LD_ADDR_EXP 88
52688: PUSH
52689: LD_EXP 88
52693: PPUSH
52694: LD_VAR 0 2
52698: PPUSH
52699: LD_INT 0
52701: PPUSH
52702: CALL_OW 1
52706: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
52707: LD_ADDR_EXP 76
52711: PUSH
52712: LD_EXP 76
52716: PPUSH
52717: LD_VAR 0 2
52721: PPUSH
52722: EMPTY
52723: PPUSH
52724: CALL_OW 1
52728: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
52729: LD_ADDR_EXP 87
52733: PUSH
52734: LD_EXP 87
52738: PPUSH
52739: LD_VAR 0 2
52743: PPUSH
52744: LD_INT 0
52746: PPUSH
52747: CALL_OW 1
52751: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
52752: LD_ADDR_EXP 89
52756: PUSH
52757: LD_EXP 89
52761: PPUSH
52762: LD_VAR 0 2
52766: PPUSH
52767: EMPTY
52768: PPUSH
52769: CALL_OW 1
52773: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
52774: LD_ADDR_EXP 92
52778: PUSH
52779: LD_EXP 92
52783: PPUSH
52784: LD_VAR 0 2
52788: PPUSH
52789: LD_INT 0
52791: PPUSH
52792: CALL_OW 1
52796: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
52797: LD_ADDR_EXP 93
52801: PUSH
52802: LD_EXP 93
52806: PPUSH
52807: LD_VAR 0 2
52811: PPUSH
52812: EMPTY
52813: PPUSH
52814: CALL_OW 1
52818: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
52819: LD_ADDR_EXP 94
52823: PUSH
52824: LD_EXP 94
52828: PPUSH
52829: LD_VAR 0 2
52833: PPUSH
52834: EMPTY
52835: PPUSH
52836: CALL_OW 1
52840: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
52841: LD_ADDR_EXP 95
52845: PUSH
52846: LD_EXP 95
52850: PPUSH
52851: LD_VAR 0 2
52855: PPUSH
52856: EMPTY
52857: PPUSH
52858: CALL_OW 1
52862: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
52863: LD_ADDR_EXP 97
52867: PUSH
52868: LD_EXP 97
52872: PPUSH
52873: LD_VAR 0 2
52877: PPUSH
52878: LD_EXP 64
52882: PUSH
52883: LD_VAR 0 2
52887: ARRAY
52888: PPUSH
52889: LD_INT 2
52891: PUSH
52892: LD_INT 30
52894: PUSH
52895: LD_INT 6
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 30
52904: PUSH
52905: LD_INT 7
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 30
52914: PUSH
52915: LD_INT 8
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: PPUSH
52928: CALL_OW 72
52932: PPUSH
52933: CALL_OW 1
52937: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
52938: LD_ADDR_EXP 98
52942: PUSH
52943: LD_EXP 98
52947: PPUSH
52948: LD_VAR 0 2
52952: PPUSH
52953: EMPTY
52954: PPUSH
52955: CALL_OW 1
52959: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
52960: LD_ADDR_EXP 99
52964: PUSH
52965: LD_EXP 99
52969: PPUSH
52970: LD_VAR 0 2
52974: PPUSH
52975: EMPTY
52976: PPUSH
52977: CALL_OW 1
52981: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
52982: LD_ADDR_EXP 100
52986: PUSH
52987: LD_EXP 100
52991: PPUSH
52992: LD_VAR 0 2
52996: PPUSH
52997: EMPTY
52998: PPUSH
52999: CALL_OW 1
53003: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
53004: LD_ADDR_EXP 101
53008: PUSH
53009: LD_EXP 101
53013: PPUSH
53014: LD_VAR 0 2
53018: PPUSH
53019: EMPTY
53020: PPUSH
53021: CALL_OW 1
53025: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
53026: LD_ADDR_EXP 102
53030: PUSH
53031: LD_EXP 102
53035: PPUSH
53036: LD_VAR 0 2
53040: PPUSH
53041: EMPTY
53042: PPUSH
53043: CALL_OW 1
53047: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
53048: LD_ADDR_EXP 103
53052: PUSH
53053: LD_EXP 103
53057: PPUSH
53058: LD_VAR 0 2
53062: PPUSH
53063: EMPTY
53064: PPUSH
53065: CALL_OW 1
53069: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
53070: LD_ADDR_EXP 104
53074: PUSH
53075: LD_EXP 104
53079: PPUSH
53080: LD_VAR 0 2
53084: PPUSH
53085: EMPTY
53086: PPUSH
53087: CALL_OW 1
53091: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
53092: LD_ADDR_EXP 105
53096: PUSH
53097: LD_EXP 105
53101: PPUSH
53102: LD_VAR 0 2
53106: PPUSH
53107: EMPTY
53108: PPUSH
53109: CALL_OW 1
53113: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
53114: LD_ADDR_EXP 106
53118: PUSH
53119: LD_EXP 106
53123: PPUSH
53124: LD_VAR 0 2
53128: PPUSH
53129: LD_INT 0
53131: PPUSH
53132: CALL_OW 1
53136: ST_TO_ADDR
// end ;
53137: GO 52061
53139: POP
53140: POP
// MC_InitSides ( ) ;
53141: CALL 53427 0 0
// MC_InitResearch ( ) ;
53145: CALL 53166 0 0
// CustomInitMacro ( ) ;
53149: CALL 5893 0 0
// skirmish := true ;
53153: LD_ADDR_EXP 62
53157: PUSH
53158: LD_INT 1
53160: ST_TO_ADDR
// end ;
53161: LD_VAR 0 1
53165: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
53166: LD_INT 0
53168: PPUSH
53169: PPUSH
53170: PPUSH
53171: PPUSH
53172: PPUSH
53173: PPUSH
// if not mc_bases then
53174: LD_EXP 64
53178: NOT
53179: IFFALSE 53183
// exit ;
53181: GO 53422
// for i = 1 to 8 do
53183: LD_ADDR_VAR 0 2
53187: PUSH
53188: DOUBLE
53189: LD_INT 1
53191: DEC
53192: ST_TO_ADDR
53193: LD_INT 8
53195: PUSH
53196: FOR_TO
53197: IFFALSE 53223
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
53199: LD_ADDR_EXP 91
53203: PUSH
53204: LD_EXP 91
53208: PPUSH
53209: LD_VAR 0 2
53213: PPUSH
53214: EMPTY
53215: PPUSH
53216: CALL_OW 1
53220: ST_TO_ADDR
53221: GO 53196
53223: POP
53224: POP
// tmp := [ ] ;
53225: LD_ADDR_VAR 0 5
53229: PUSH
53230: EMPTY
53231: ST_TO_ADDR
// for i = 1 to mc_sides do
53232: LD_ADDR_VAR 0 2
53236: PUSH
53237: DOUBLE
53238: LD_INT 1
53240: DEC
53241: ST_TO_ADDR
53242: LD_EXP 90
53246: PUSH
53247: FOR_TO
53248: IFFALSE 53306
// if not mc_sides [ i ] in tmp then
53250: LD_EXP 90
53254: PUSH
53255: LD_VAR 0 2
53259: ARRAY
53260: PUSH
53261: LD_VAR 0 5
53265: IN
53266: NOT
53267: IFFALSE 53304
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
53269: LD_ADDR_VAR 0 5
53273: PUSH
53274: LD_VAR 0 5
53278: PPUSH
53279: LD_VAR 0 5
53283: PUSH
53284: LD_INT 1
53286: PLUS
53287: PPUSH
53288: LD_EXP 90
53292: PUSH
53293: LD_VAR 0 2
53297: ARRAY
53298: PPUSH
53299: CALL_OW 2
53303: ST_TO_ADDR
53304: GO 53247
53306: POP
53307: POP
// if not tmp then
53308: LD_VAR 0 5
53312: NOT
53313: IFFALSE 53317
// exit ;
53315: GO 53422
// for j in tmp do
53317: LD_ADDR_VAR 0 3
53321: PUSH
53322: LD_VAR 0 5
53326: PUSH
53327: FOR_IN
53328: IFFALSE 53420
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
53330: LD_ADDR_VAR 0 6
53334: PUSH
53335: LD_INT 22
53337: PUSH
53338: LD_VAR 0 3
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PPUSH
53347: CALL_OW 69
53351: ST_TO_ADDR
// if not un then
53352: LD_VAR 0 6
53356: NOT
53357: IFFALSE 53361
// continue ;
53359: GO 53327
// nation := GetNation ( un [ 1 ] ) ;
53361: LD_ADDR_VAR 0 4
53365: PUSH
53366: LD_VAR 0 6
53370: PUSH
53371: LD_INT 1
53373: ARRAY
53374: PPUSH
53375: CALL_OW 248
53379: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
53380: LD_ADDR_EXP 91
53384: PUSH
53385: LD_EXP 91
53389: PPUSH
53390: LD_VAR 0 3
53394: PPUSH
53395: LD_VAR 0 3
53399: PPUSH
53400: LD_VAR 0 4
53404: PPUSH
53405: LD_INT 1
53407: PPUSH
53408: CALL 13529 0 3
53412: PPUSH
53413: CALL_OW 1
53417: ST_TO_ADDR
// end ;
53418: GO 53327
53420: POP
53421: POP
// end ;
53422: LD_VAR 0 1
53426: RET
// export function MC_InitSides ( ) ; var i ; begin
53427: LD_INT 0
53429: PPUSH
53430: PPUSH
// if not mc_bases then
53431: LD_EXP 64
53435: NOT
53436: IFFALSE 53440
// exit ;
53438: GO 53514
// for i = 1 to mc_bases do
53440: LD_ADDR_VAR 0 2
53444: PUSH
53445: DOUBLE
53446: LD_INT 1
53448: DEC
53449: ST_TO_ADDR
53450: LD_EXP 64
53454: PUSH
53455: FOR_TO
53456: IFFALSE 53512
// if mc_bases [ i ] then
53458: LD_EXP 64
53462: PUSH
53463: LD_VAR 0 2
53467: ARRAY
53468: IFFALSE 53510
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
53470: LD_ADDR_EXP 90
53474: PUSH
53475: LD_EXP 90
53479: PPUSH
53480: LD_VAR 0 2
53484: PPUSH
53485: LD_EXP 64
53489: PUSH
53490: LD_VAR 0 2
53494: ARRAY
53495: PUSH
53496: LD_INT 1
53498: ARRAY
53499: PPUSH
53500: CALL_OW 255
53504: PPUSH
53505: CALL_OW 1
53509: ST_TO_ADDR
53510: GO 53455
53512: POP
53513: POP
// end ;
53514: LD_VAR 0 1
53518: RET
// every 0 0$01 trigger skirmish do
53519: LD_EXP 62
53523: IFFALSE 53677
53525: GO 53527
53527: DISABLE
// begin enable ;
53528: ENABLE
// MC_CheckBuildings ( ) ;
53529: CALL 58175 0 0
// MC_CheckPeopleLife ( ) ;
53533: CALL 58300 0 0
// RaiseSailEvent ( 100 ) ;
53537: LD_INT 100
53539: PPUSH
53540: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
53544: LD_INT 103
53546: PPUSH
53547: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
53551: LD_INT 104
53553: PPUSH
53554: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
53558: LD_INT 105
53560: PPUSH
53561: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
53565: LD_INT 106
53567: PPUSH
53568: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
53572: LD_INT 107
53574: PPUSH
53575: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
53579: LD_INT 108
53581: PPUSH
53582: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
53586: LD_INT 109
53588: PPUSH
53589: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
53593: LD_INT 110
53595: PPUSH
53596: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
53600: LD_INT 111
53602: PPUSH
53603: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
53607: LD_INT 112
53609: PPUSH
53610: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
53614: LD_INT 113
53616: PPUSH
53617: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
53621: LD_INT 120
53623: PPUSH
53624: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
53628: LD_INT 121
53630: PPUSH
53631: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
53635: LD_INT 122
53637: PPUSH
53638: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
53642: LD_INT 123
53644: PPUSH
53645: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
53649: LD_INT 124
53651: PPUSH
53652: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
53656: LD_INT 125
53658: PPUSH
53659: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
53663: LD_INT 126
53665: PPUSH
53666: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
53670: LD_INT 200
53672: PPUSH
53673: CALL_OW 427
// end ;
53677: END
// on SailEvent ( event ) do begin if event < 100 then
53678: LD_VAR 0 1
53682: PUSH
53683: LD_INT 100
53685: LESS
53686: IFFALSE 53697
// CustomEvent ( event ) ;
53688: LD_VAR 0 1
53692: PPUSH
53693: CALL 5885 0 1
// if event = 100 then
53697: LD_VAR 0 1
53701: PUSH
53702: LD_INT 100
53704: EQUAL
53705: IFFALSE 53711
// MC_ClassManager ( ) ;
53707: CALL 54103 0 0
// if event = 101 then
53711: LD_VAR 0 1
53715: PUSH
53716: LD_INT 101
53718: EQUAL
53719: IFFALSE 53725
// MC_RepairBuildings ( ) ;
53721: CALL 58885 0 0
// if event = 102 then
53725: LD_VAR 0 1
53729: PUSH
53730: LD_INT 102
53732: EQUAL
53733: IFFALSE 53739
// MC_Heal ( ) ;
53735: CALL 59744 0 0
// if event = 103 then
53739: LD_VAR 0 1
53743: PUSH
53744: LD_INT 103
53746: EQUAL
53747: IFFALSE 53753
// MC_Build ( ) ;
53749: CALL 60166 0 0
// if event = 104 then
53753: LD_VAR 0 1
53757: PUSH
53758: LD_INT 104
53760: EQUAL
53761: IFFALSE 53767
// MC_TurretWeapon ( ) ;
53763: CALL 61779 0 0
// if event = 105 then
53767: LD_VAR 0 1
53771: PUSH
53772: LD_INT 105
53774: EQUAL
53775: IFFALSE 53781
// MC_BuildUpgrade ( ) ;
53777: CALL 61330 0 0
// if event = 106 then
53781: LD_VAR 0 1
53785: PUSH
53786: LD_INT 106
53788: EQUAL
53789: IFFALSE 53795
// MC_PlantMines ( ) ;
53791: CALL 62209 0 0
// if event = 107 then
53795: LD_VAR 0 1
53799: PUSH
53800: LD_INT 107
53802: EQUAL
53803: IFFALSE 53809
// MC_CollectCrates ( ) ;
53805: CALL 63007 0 0
// if event = 108 then
53809: LD_VAR 0 1
53813: PUSH
53814: LD_INT 108
53816: EQUAL
53817: IFFALSE 53823
// MC_LinkRemoteControl ( ) ;
53819: CALL 64783 0 0
// if event = 109 then
53823: LD_VAR 0 1
53827: PUSH
53828: LD_INT 109
53830: EQUAL
53831: IFFALSE 53837
// MC_ProduceVehicle ( ) ;
53833: CALL 64964 0 0
// if event = 110 then
53837: LD_VAR 0 1
53841: PUSH
53842: LD_INT 110
53844: EQUAL
53845: IFFALSE 53851
// MC_SendAttack ( ) ;
53847: CALL 65430 0 0
// if event = 111 then
53851: LD_VAR 0 1
53855: PUSH
53856: LD_INT 111
53858: EQUAL
53859: IFFALSE 53865
// MC_Defend ( ) ;
53861: CALL 65538 0 0
// if event = 112 then
53865: LD_VAR 0 1
53869: PUSH
53870: LD_INT 112
53872: EQUAL
53873: IFFALSE 53879
// MC_Research ( ) ;
53875: CALL 66143 0 0
// if event = 113 then
53879: LD_VAR 0 1
53883: PUSH
53884: LD_INT 113
53886: EQUAL
53887: IFFALSE 53893
// MC_MinesTrigger ( ) ;
53889: CALL 67257 0 0
// if event = 120 then
53893: LD_VAR 0 1
53897: PUSH
53898: LD_INT 120
53900: EQUAL
53901: IFFALSE 53907
// MC_RepairVehicle ( ) ;
53903: CALL 67356 0 0
// if event = 121 then
53907: LD_VAR 0 1
53911: PUSH
53912: LD_INT 121
53914: EQUAL
53915: IFFALSE 53921
// MC_TameApe ( ) ;
53917: CALL 68086 0 0
// if event = 122 then
53921: LD_VAR 0 1
53925: PUSH
53926: LD_INT 122
53928: EQUAL
53929: IFFALSE 53935
// MC_ChangeApeClass ( ) ;
53931: CALL 68915 0 0
// if event = 123 then
53935: LD_VAR 0 1
53939: PUSH
53940: LD_INT 123
53942: EQUAL
53943: IFFALSE 53949
// MC_Bazooka ( ) ;
53945: CALL 69565 0 0
// if event = 124 then
53949: LD_VAR 0 1
53953: PUSH
53954: LD_INT 124
53956: EQUAL
53957: IFFALSE 53963
// MC_TeleportExit ( ) ;
53959: CALL 69763 0 0
// if event = 125 then
53963: LD_VAR 0 1
53967: PUSH
53968: LD_INT 125
53970: EQUAL
53971: IFFALSE 53977
// MC_Deposits ( ) ;
53973: CALL 70410 0 0
// if event = 126 then
53977: LD_VAR 0 1
53981: PUSH
53982: LD_INT 126
53984: EQUAL
53985: IFFALSE 53991
// MC_RemoteDriver ( ) ;
53987: CALL 71035 0 0
// if event = 200 then
53991: LD_VAR 0 1
53995: PUSH
53996: LD_INT 200
53998: EQUAL
53999: IFFALSE 54005
// MC_Idle ( ) ;
54001: CALL 72984 0 0
// end ;
54005: PPOPN 1
54007: END
// export function MC_Reset ( base , tag ) ; var i ; begin
54008: LD_INT 0
54010: PPUSH
54011: PPUSH
// if not mc_bases [ base ] or not tag then
54012: LD_EXP 64
54016: PUSH
54017: LD_VAR 0 1
54021: ARRAY
54022: NOT
54023: PUSH
54024: LD_VAR 0 2
54028: NOT
54029: OR
54030: IFFALSE 54034
// exit ;
54032: GO 54098
// for i in mc_bases [ base ] union mc_ape [ base ] do
54034: LD_ADDR_VAR 0 4
54038: PUSH
54039: LD_EXP 64
54043: PUSH
54044: LD_VAR 0 1
54048: ARRAY
54049: PUSH
54050: LD_EXP 93
54054: PUSH
54055: LD_VAR 0 1
54059: ARRAY
54060: UNION
54061: PUSH
54062: FOR_IN
54063: IFFALSE 54096
// if GetTag ( i ) = tag then
54065: LD_VAR 0 4
54069: PPUSH
54070: CALL_OW 110
54074: PUSH
54075: LD_VAR 0 2
54079: EQUAL
54080: IFFALSE 54094
// SetTag ( i , 0 ) ;
54082: LD_VAR 0 4
54086: PPUSH
54087: LD_INT 0
54089: PPUSH
54090: CALL_OW 109
54094: GO 54062
54096: POP
54097: POP
// end ;
54098: LD_VAR 0 3
54102: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
54103: LD_INT 0
54105: PPUSH
54106: PPUSH
54107: PPUSH
54108: PPUSH
54109: PPUSH
54110: PPUSH
54111: PPUSH
54112: PPUSH
// if not mc_bases then
54113: LD_EXP 64
54117: NOT
54118: IFFALSE 54122
// exit ;
54120: GO 54580
// for i = 1 to mc_bases do
54122: LD_ADDR_VAR 0 2
54126: PUSH
54127: DOUBLE
54128: LD_INT 1
54130: DEC
54131: ST_TO_ADDR
54132: LD_EXP 64
54136: PUSH
54137: FOR_TO
54138: IFFALSE 54578
// begin tmp := MC_ClassCheckReq ( i ) ;
54140: LD_ADDR_VAR 0 4
54144: PUSH
54145: LD_VAR 0 2
54149: PPUSH
54150: CALL 54585 0 1
54154: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
54155: LD_ADDR_EXP 105
54159: PUSH
54160: LD_EXP 105
54164: PPUSH
54165: LD_VAR 0 2
54169: PPUSH
54170: LD_VAR 0 4
54174: PPUSH
54175: CALL_OW 1
54179: ST_TO_ADDR
// if not tmp then
54180: LD_VAR 0 4
54184: NOT
54185: IFFALSE 54189
// continue ;
54187: GO 54137
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
54189: LD_ADDR_VAR 0 6
54193: PUSH
54194: LD_EXP 64
54198: PUSH
54199: LD_VAR 0 2
54203: ARRAY
54204: PPUSH
54205: LD_INT 2
54207: PUSH
54208: LD_INT 30
54210: PUSH
54211: LD_INT 4
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 30
54220: PUSH
54221: LD_INT 5
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: LIST
54232: PPUSH
54233: CALL_OW 72
54237: PUSH
54238: LD_EXP 64
54242: PUSH
54243: LD_VAR 0 2
54247: ARRAY
54248: PPUSH
54249: LD_INT 2
54251: PUSH
54252: LD_INT 30
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 30
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: LIST
54276: PPUSH
54277: CALL_OW 72
54281: PUSH
54282: LD_EXP 64
54286: PUSH
54287: LD_VAR 0 2
54291: ARRAY
54292: PPUSH
54293: LD_INT 30
54295: PUSH
54296: LD_INT 3
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PPUSH
54303: CALL_OW 72
54307: PUSH
54308: LD_EXP 64
54312: PUSH
54313: LD_VAR 0 2
54317: ARRAY
54318: PPUSH
54319: LD_INT 2
54321: PUSH
54322: LD_INT 30
54324: PUSH
54325: LD_INT 6
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 30
54334: PUSH
54335: LD_INT 7
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 30
54344: PUSH
54345: LD_INT 8
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: PPUSH
54358: CALL_OW 72
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: ST_TO_ADDR
// for j = 1 to 4 do
54369: LD_ADDR_VAR 0 3
54373: PUSH
54374: DOUBLE
54375: LD_INT 1
54377: DEC
54378: ST_TO_ADDR
54379: LD_INT 4
54381: PUSH
54382: FOR_TO
54383: IFFALSE 54574
// begin if not tmp [ j ] then
54385: LD_VAR 0 4
54389: PUSH
54390: LD_VAR 0 3
54394: ARRAY
54395: NOT
54396: IFFALSE 54400
// continue ;
54398: GO 54382
// for p in tmp [ j ] do
54400: LD_ADDR_VAR 0 5
54404: PUSH
54405: LD_VAR 0 4
54409: PUSH
54410: LD_VAR 0 3
54414: ARRAY
54415: PUSH
54416: FOR_IN
54417: IFFALSE 54570
// begin if not b [ j ] then
54419: LD_VAR 0 6
54423: PUSH
54424: LD_VAR 0 3
54428: ARRAY
54429: NOT
54430: IFFALSE 54434
// break ;
54432: GO 54570
// e := 0 ;
54434: LD_ADDR_VAR 0 7
54438: PUSH
54439: LD_INT 0
54441: ST_TO_ADDR
// for k in b [ j ] do
54442: LD_ADDR_VAR 0 8
54446: PUSH
54447: LD_VAR 0 6
54451: PUSH
54452: LD_VAR 0 3
54456: ARRAY
54457: PUSH
54458: FOR_IN
54459: IFFALSE 54486
// if IsNotFull ( k ) then
54461: LD_VAR 0 8
54465: PPUSH
54466: CALL 15678 0 1
54470: IFFALSE 54484
// begin e := k ;
54472: LD_ADDR_VAR 0 7
54476: PUSH
54477: LD_VAR 0 8
54481: ST_TO_ADDR
// break ;
54482: GO 54486
// end ;
54484: GO 54458
54486: POP
54487: POP
// if e and not UnitGoingToBuilding ( p , e ) then
54488: LD_VAR 0 7
54492: PUSH
54493: LD_VAR 0 5
54497: PPUSH
54498: LD_VAR 0 7
54502: PPUSH
54503: CALL 48098 0 2
54507: NOT
54508: AND
54509: IFFALSE 54568
// begin if IsInUnit ( p ) then
54511: LD_VAR 0 5
54515: PPUSH
54516: CALL_OW 310
54520: IFFALSE 54531
// ComExitBuilding ( p ) ;
54522: LD_VAR 0 5
54526: PPUSH
54527: CALL_OW 122
// ComEnterUnit ( p , e ) ;
54531: LD_VAR 0 5
54535: PPUSH
54536: LD_VAR 0 7
54540: PPUSH
54541: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
54545: LD_VAR 0 5
54549: PPUSH
54550: LD_VAR 0 3
54554: PPUSH
54555: CALL_OW 183
// AddComExitBuilding ( p ) ;
54559: LD_VAR 0 5
54563: PPUSH
54564: CALL_OW 182
// end ; end ;
54568: GO 54416
54570: POP
54571: POP
// end ;
54572: GO 54382
54574: POP
54575: POP
// end ;
54576: GO 54137
54578: POP
54579: POP
// end ;
54580: LD_VAR 0 1
54584: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
54585: LD_INT 0
54587: PPUSH
54588: PPUSH
54589: PPUSH
54590: PPUSH
54591: PPUSH
54592: PPUSH
54593: PPUSH
54594: PPUSH
54595: PPUSH
54596: PPUSH
54597: PPUSH
54598: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
54599: LD_VAR 0 1
54603: NOT
54604: PUSH
54605: LD_EXP 64
54609: PUSH
54610: LD_VAR 0 1
54614: ARRAY
54615: NOT
54616: OR
54617: PUSH
54618: LD_EXP 64
54622: PUSH
54623: LD_VAR 0 1
54627: ARRAY
54628: PPUSH
54629: LD_INT 2
54631: PUSH
54632: LD_INT 30
54634: PUSH
54635: LD_INT 0
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 30
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: LIST
54656: PPUSH
54657: CALL_OW 72
54661: NOT
54662: OR
54663: IFFALSE 54667
// exit ;
54665: GO 58170
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
54667: LD_ADDR_VAR 0 4
54671: PUSH
54672: LD_EXP 64
54676: PUSH
54677: LD_VAR 0 1
54681: ARRAY
54682: PPUSH
54683: LD_INT 2
54685: PUSH
54686: LD_INT 25
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 25
54698: PUSH
54699: LD_INT 2
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 25
54708: PUSH
54709: LD_INT 3
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 25
54718: PUSH
54719: LD_INT 4
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 25
54728: PUSH
54729: LD_INT 5
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 25
54738: PUSH
54739: LD_INT 8
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 25
54748: PUSH
54749: LD_INT 9
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: PPUSH
54766: CALL_OW 72
54770: ST_TO_ADDR
// if not tmp then
54771: LD_VAR 0 4
54775: NOT
54776: IFFALSE 54780
// exit ;
54778: GO 58170
// for i in tmp do
54780: LD_ADDR_VAR 0 3
54784: PUSH
54785: LD_VAR 0 4
54789: PUSH
54790: FOR_IN
54791: IFFALSE 54822
// if GetTag ( i ) then
54793: LD_VAR 0 3
54797: PPUSH
54798: CALL_OW 110
54802: IFFALSE 54820
// tmp := tmp diff i ;
54804: LD_ADDR_VAR 0 4
54808: PUSH
54809: LD_VAR 0 4
54813: PUSH
54814: LD_VAR 0 3
54818: DIFF
54819: ST_TO_ADDR
54820: GO 54790
54822: POP
54823: POP
// if not tmp then
54824: LD_VAR 0 4
54828: NOT
54829: IFFALSE 54833
// exit ;
54831: GO 58170
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
54833: LD_ADDR_VAR 0 5
54837: PUSH
54838: LD_EXP 64
54842: PUSH
54843: LD_VAR 0 1
54847: ARRAY
54848: PPUSH
54849: LD_INT 2
54851: PUSH
54852: LD_INT 25
54854: PUSH
54855: LD_INT 1
54857: PUSH
54858: EMPTY
54859: LIST
54860: LIST
54861: PUSH
54862: LD_INT 25
54864: PUSH
54865: LD_INT 5
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 25
54874: PUSH
54875: LD_INT 8
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 25
54884: PUSH
54885: LD_INT 9
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: PPUSH
54899: CALL_OW 72
54903: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
54904: LD_ADDR_VAR 0 6
54908: PUSH
54909: LD_EXP 64
54913: PUSH
54914: LD_VAR 0 1
54918: ARRAY
54919: PPUSH
54920: LD_INT 25
54922: PUSH
54923: LD_INT 2
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PPUSH
54930: CALL_OW 72
54934: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
54935: LD_ADDR_VAR 0 7
54939: PUSH
54940: LD_EXP 64
54944: PUSH
54945: LD_VAR 0 1
54949: ARRAY
54950: PPUSH
54951: LD_INT 25
54953: PUSH
54954: LD_INT 3
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PPUSH
54961: CALL_OW 72
54965: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
54966: LD_ADDR_VAR 0 8
54970: PUSH
54971: LD_EXP 64
54975: PUSH
54976: LD_VAR 0 1
54980: ARRAY
54981: PPUSH
54982: LD_INT 25
54984: PUSH
54985: LD_INT 4
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 24
54994: PUSH
54995: LD_INT 251
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PPUSH
55006: CALL_OW 72
55010: ST_TO_ADDR
// if mc_scan [ base ] then
55011: LD_EXP 87
55015: PUSH
55016: LD_VAR 0 1
55020: ARRAY
55021: IFFALSE 55482
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
55023: LD_ADDR_EXP 106
55027: PUSH
55028: LD_EXP 106
55032: PPUSH
55033: LD_VAR 0 1
55037: PPUSH
55038: LD_INT 4
55040: PPUSH
55041: CALL_OW 1
55045: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
55046: LD_ADDR_VAR 0 12
55050: PUSH
55051: LD_EXP 64
55055: PUSH
55056: LD_VAR 0 1
55060: ARRAY
55061: PPUSH
55062: LD_INT 2
55064: PUSH
55065: LD_INT 30
55067: PUSH
55068: LD_INT 4
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 30
55077: PUSH
55078: LD_INT 5
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: LIST
55089: PPUSH
55090: CALL_OW 72
55094: ST_TO_ADDR
// if not b then
55095: LD_VAR 0 12
55099: NOT
55100: IFFALSE 55104
// exit ;
55102: GO 58170
// p := [ ] ;
55104: LD_ADDR_VAR 0 11
55108: PUSH
55109: EMPTY
55110: ST_TO_ADDR
// if sci >= 2 then
55111: LD_VAR 0 8
55115: PUSH
55116: LD_INT 2
55118: GREATEREQUAL
55119: IFFALSE 55150
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
55121: LD_ADDR_VAR 0 8
55125: PUSH
55126: LD_VAR 0 8
55130: PUSH
55131: LD_INT 1
55133: ARRAY
55134: PUSH
55135: LD_VAR 0 8
55139: PUSH
55140: LD_INT 2
55142: ARRAY
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: ST_TO_ADDR
55148: GO 55211
// if sci = 1 then
55150: LD_VAR 0 8
55154: PUSH
55155: LD_INT 1
55157: EQUAL
55158: IFFALSE 55179
// sci := [ sci [ 1 ] ] else
55160: LD_ADDR_VAR 0 8
55164: PUSH
55165: LD_VAR 0 8
55169: PUSH
55170: LD_INT 1
55172: ARRAY
55173: PUSH
55174: EMPTY
55175: LIST
55176: ST_TO_ADDR
55177: GO 55211
// if sci = 0 then
55179: LD_VAR 0 8
55183: PUSH
55184: LD_INT 0
55186: EQUAL
55187: IFFALSE 55211
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
55189: LD_ADDR_VAR 0 11
55193: PUSH
55194: LD_VAR 0 4
55198: PPUSH
55199: LD_INT 4
55201: PPUSH
55202: CALL 47961 0 2
55206: PUSH
55207: LD_INT 1
55209: ARRAY
55210: ST_TO_ADDR
// if eng > 4 then
55211: LD_VAR 0 6
55215: PUSH
55216: LD_INT 4
55218: GREATER
55219: IFFALSE 55265
// for i = eng downto 4 do
55221: LD_ADDR_VAR 0 3
55225: PUSH
55226: DOUBLE
55227: LD_VAR 0 6
55231: INC
55232: ST_TO_ADDR
55233: LD_INT 4
55235: PUSH
55236: FOR_DOWNTO
55237: IFFALSE 55263
// eng := eng diff eng [ i ] ;
55239: LD_ADDR_VAR 0 6
55243: PUSH
55244: LD_VAR 0 6
55248: PUSH
55249: LD_VAR 0 6
55253: PUSH
55254: LD_VAR 0 3
55258: ARRAY
55259: DIFF
55260: ST_TO_ADDR
55261: GO 55236
55263: POP
55264: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
55265: LD_ADDR_VAR 0 4
55269: PUSH
55270: LD_VAR 0 4
55274: PUSH
55275: LD_VAR 0 5
55279: PUSH
55280: LD_VAR 0 6
55284: UNION
55285: PUSH
55286: LD_VAR 0 7
55290: UNION
55291: PUSH
55292: LD_VAR 0 8
55296: UNION
55297: DIFF
55298: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
55299: LD_ADDR_VAR 0 13
55303: PUSH
55304: LD_EXP 64
55308: PUSH
55309: LD_VAR 0 1
55313: ARRAY
55314: PPUSH
55315: LD_INT 2
55317: PUSH
55318: LD_INT 30
55320: PUSH
55321: LD_INT 32
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 30
55330: PUSH
55331: LD_INT 31
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: LIST
55342: PPUSH
55343: CALL_OW 72
55347: PUSH
55348: LD_EXP 64
55352: PUSH
55353: LD_VAR 0 1
55357: ARRAY
55358: PPUSH
55359: LD_INT 2
55361: PUSH
55362: LD_INT 30
55364: PUSH
55365: LD_INT 4
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 30
55374: PUSH
55375: LD_INT 5
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: LIST
55386: PPUSH
55387: CALL_OW 72
55391: PUSH
55392: LD_INT 6
55394: MUL
55395: PLUS
55396: ST_TO_ADDR
// if bcount < tmp then
55397: LD_VAR 0 13
55401: PUSH
55402: LD_VAR 0 4
55406: LESS
55407: IFFALSE 55453
// for i = tmp downto bcount do
55409: LD_ADDR_VAR 0 3
55413: PUSH
55414: DOUBLE
55415: LD_VAR 0 4
55419: INC
55420: ST_TO_ADDR
55421: LD_VAR 0 13
55425: PUSH
55426: FOR_DOWNTO
55427: IFFALSE 55451
// tmp := Delete ( tmp , tmp ) ;
55429: LD_ADDR_VAR 0 4
55433: PUSH
55434: LD_VAR 0 4
55438: PPUSH
55439: LD_VAR 0 4
55443: PPUSH
55444: CALL_OW 3
55448: ST_TO_ADDR
55449: GO 55426
55451: POP
55452: POP
// result := [ tmp , 0 , 0 , p ] ;
55453: LD_ADDR_VAR 0 2
55457: PUSH
55458: LD_VAR 0 4
55462: PUSH
55463: LD_INT 0
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: LD_VAR 0 11
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: ST_TO_ADDR
// exit ;
55480: GO 58170
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
55482: LD_EXP 64
55486: PUSH
55487: LD_VAR 0 1
55491: ARRAY
55492: PPUSH
55493: LD_INT 2
55495: PUSH
55496: LD_INT 30
55498: PUSH
55499: LD_INT 6
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 30
55508: PUSH
55509: LD_INT 7
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 30
55518: PUSH
55519: LD_INT 8
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: PPUSH
55532: CALL_OW 72
55536: NOT
55537: PUSH
55538: LD_EXP 64
55542: PUSH
55543: LD_VAR 0 1
55547: ARRAY
55548: PPUSH
55549: LD_INT 30
55551: PUSH
55552: LD_INT 3
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PPUSH
55559: CALL_OW 72
55563: NOT
55564: AND
55565: IFFALSE 55637
// begin if eng = tmp then
55567: LD_VAR 0 6
55571: PUSH
55572: LD_VAR 0 4
55576: EQUAL
55577: IFFALSE 55581
// exit ;
55579: GO 58170
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
55581: LD_ADDR_EXP 106
55585: PUSH
55586: LD_EXP 106
55590: PPUSH
55591: LD_VAR 0 1
55595: PPUSH
55596: LD_INT 1
55598: PPUSH
55599: CALL_OW 1
55603: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
55604: LD_ADDR_VAR 0 2
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: LD_VAR 0 4
55616: PUSH
55617: LD_VAR 0 6
55621: DIFF
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: ST_TO_ADDR
// exit ;
55635: GO 58170
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
55637: LD_EXP 91
55641: PUSH
55642: LD_EXP 90
55646: PUSH
55647: LD_VAR 0 1
55651: ARRAY
55652: ARRAY
55653: PUSH
55654: LD_EXP 64
55658: PUSH
55659: LD_VAR 0 1
55663: ARRAY
55664: PPUSH
55665: LD_INT 2
55667: PUSH
55668: LD_INT 30
55670: PUSH
55671: LD_INT 6
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 30
55680: PUSH
55681: LD_INT 7
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 30
55690: PUSH
55691: LD_INT 8
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: PPUSH
55704: CALL_OW 72
55708: AND
55709: PUSH
55710: LD_EXP 64
55714: PUSH
55715: LD_VAR 0 1
55719: ARRAY
55720: PPUSH
55721: LD_INT 30
55723: PUSH
55724: LD_INT 3
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PPUSH
55731: CALL_OW 72
55735: NOT
55736: AND
55737: IFFALSE 55951
// begin if sci >= 6 then
55739: LD_VAR 0 8
55743: PUSH
55744: LD_INT 6
55746: GREATEREQUAL
55747: IFFALSE 55751
// exit ;
55749: GO 58170
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
55751: LD_ADDR_EXP 106
55755: PUSH
55756: LD_EXP 106
55760: PPUSH
55761: LD_VAR 0 1
55765: PPUSH
55766: LD_INT 2
55768: PPUSH
55769: CALL_OW 1
55773: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
55774: LD_ADDR_VAR 0 9
55778: PUSH
55779: LD_VAR 0 4
55783: PUSH
55784: LD_VAR 0 8
55788: DIFF
55789: PPUSH
55790: LD_INT 4
55792: PPUSH
55793: CALL 47961 0 2
55797: ST_TO_ADDR
// p := [ ] ;
55798: LD_ADDR_VAR 0 11
55802: PUSH
55803: EMPTY
55804: ST_TO_ADDR
// if sci < 6 and sort > 6 then
55805: LD_VAR 0 8
55809: PUSH
55810: LD_INT 6
55812: LESS
55813: PUSH
55814: LD_VAR 0 9
55818: PUSH
55819: LD_INT 6
55821: GREATER
55822: AND
55823: IFFALSE 55904
// begin for i = 1 to 6 - sci do
55825: LD_ADDR_VAR 0 3
55829: PUSH
55830: DOUBLE
55831: LD_INT 1
55833: DEC
55834: ST_TO_ADDR
55835: LD_INT 6
55837: PUSH
55838: LD_VAR 0 8
55842: MINUS
55843: PUSH
55844: FOR_TO
55845: IFFALSE 55900
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
55847: LD_ADDR_VAR 0 11
55851: PUSH
55852: LD_VAR 0 11
55856: PPUSH
55857: LD_VAR 0 11
55861: PUSH
55862: LD_INT 1
55864: PLUS
55865: PPUSH
55866: LD_VAR 0 9
55870: PUSH
55871: LD_INT 1
55873: ARRAY
55874: PPUSH
55875: CALL_OW 2
55879: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
55880: LD_ADDR_VAR 0 9
55884: PUSH
55885: LD_VAR 0 9
55889: PPUSH
55890: LD_INT 1
55892: PPUSH
55893: CALL_OW 3
55897: ST_TO_ADDR
// end ;
55898: GO 55844
55900: POP
55901: POP
// end else
55902: GO 55924
// if sort then
55904: LD_VAR 0 9
55908: IFFALSE 55924
// p := sort [ 1 ] ;
55910: LD_ADDR_VAR 0 11
55914: PUSH
55915: LD_VAR 0 9
55919: PUSH
55920: LD_INT 1
55922: ARRAY
55923: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
55924: LD_ADDR_VAR 0 2
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: LD_VAR 0 11
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: ST_TO_ADDR
// exit ;
55949: GO 58170
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
55951: LD_EXP 91
55955: PUSH
55956: LD_EXP 90
55960: PUSH
55961: LD_VAR 0 1
55965: ARRAY
55966: ARRAY
55967: PUSH
55968: LD_EXP 64
55972: PUSH
55973: LD_VAR 0 1
55977: ARRAY
55978: PPUSH
55979: LD_INT 2
55981: PUSH
55982: LD_INT 30
55984: PUSH
55985: LD_INT 6
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 30
55994: PUSH
55995: LD_INT 7
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 30
56004: PUSH
56005: LD_INT 8
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: PPUSH
56018: CALL_OW 72
56022: AND
56023: PUSH
56024: LD_EXP 64
56028: PUSH
56029: LD_VAR 0 1
56033: ARRAY
56034: PPUSH
56035: LD_INT 30
56037: PUSH
56038: LD_INT 3
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PPUSH
56045: CALL_OW 72
56049: AND
56050: IFFALSE 56784
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
56052: LD_ADDR_EXP 106
56056: PUSH
56057: LD_EXP 106
56061: PPUSH
56062: LD_VAR 0 1
56066: PPUSH
56067: LD_INT 3
56069: PPUSH
56070: CALL_OW 1
56074: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
56075: LD_ADDR_VAR 0 2
56079: PUSH
56080: LD_INT 0
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: ST_TO_ADDR
// if not eng then
56098: LD_VAR 0 6
56102: NOT
56103: IFFALSE 56166
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
56105: LD_ADDR_VAR 0 11
56109: PUSH
56110: LD_VAR 0 4
56114: PPUSH
56115: LD_INT 2
56117: PPUSH
56118: CALL 47961 0 2
56122: PUSH
56123: LD_INT 1
56125: ARRAY
56126: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
56127: LD_ADDR_VAR 0 2
56131: PUSH
56132: LD_VAR 0 2
56136: PPUSH
56137: LD_INT 2
56139: PPUSH
56140: LD_VAR 0 11
56144: PPUSH
56145: CALL_OW 1
56149: ST_TO_ADDR
// tmp := tmp diff p ;
56150: LD_ADDR_VAR 0 4
56154: PUSH
56155: LD_VAR 0 4
56159: PUSH
56160: LD_VAR 0 11
56164: DIFF
56165: ST_TO_ADDR
// end ; if tmp and sci < 6 then
56166: LD_VAR 0 4
56170: PUSH
56171: LD_VAR 0 8
56175: PUSH
56176: LD_INT 6
56178: LESS
56179: AND
56180: IFFALSE 56368
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
56182: LD_ADDR_VAR 0 9
56186: PUSH
56187: LD_VAR 0 4
56191: PUSH
56192: LD_VAR 0 8
56196: PUSH
56197: LD_VAR 0 7
56201: UNION
56202: DIFF
56203: PPUSH
56204: LD_INT 4
56206: PPUSH
56207: CALL 47961 0 2
56211: ST_TO_ADDR
// p := [ ] ;
56212: LD_ADDR_VAR 0 11
56216: PUSH
56217: EMPTY
56218: ST_TO_ADDR
// if sort then
56219: LD_VAR 0 9
56223: IFFALSE 56339
// for i = 1 to 6 - sci do
56225: LD_ADDR_VAR 0 3
56229: PUSH
56230: DOUBLE
56231: LD_INT 1
56233: DEC
56234: ST_TO_ADDR
56235: LD_INT 6
56237: PUSH
56238: LD_VAR 0 8
56242: MINUS
56243: PUSH
56244: FOR_TO
56245: IFFALSE 56337
// begin if i = sort then
56247: LD_VAR 0 3
56251: PUSH
56252: LD_VAR 0 9
56256: EQUAL
56257: IFFALSE 56261
// break ;
56259: GO 56337
// if GetClass ( i ) = 4 then
56261: LD_VAR 0 3
56265: PPUSH
56266: CALL_OW 257
56270: PUSH
56271: LD_INT 4
56273: EQUAL
56274: IFFALSE 56278
// continue ;
56276: GO 56244
// p := Insert ( p , p + 1 , sort [ i ] ) ;
56278: LD_ADDR_VAR 0 11
56282: PUSH
56283: LD_VAR 0 11
56287: PPUSH
56288: LD_VAR 0 11
56292: PUSH
56293: LD_INT 1
56295: PLUS
56296: PPUSH
56297: LD_VAR 0 9
56301: PUSH
56302: LD_VAR 0 3
56306: ARRAY
56307: PPUSH
56308: CALL_OW 2
56312: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
56313: LD_ADDR_VAR 0 4
56317: PUSH
56318: LD_VAR 0 4
56322: PUSH
56323: LD_VAR 0 9
56327: PUSH
56328: LD_VAR 0 3
56332: ARRAY
56333: DIFF
56334: ST_TO_ADDR
// end ;
56335: GO 56244
56337: POP
56338: POP
// if p then
56339: LD_VAR 0 11
56343: IFFALSE 56368
// result := Replace ( result , 4 , p ) ;
56345: LD_ADDR_VAR 0 2
56349: PUSH
56350: LD_VAR 0 2
56354: PPUSH
56355: LD_INT 4
56357: PPUSH
56358: LD_VAR 0 11
56362: PPUSH
56363: CALL_OW 1
56367: ST_TO_ADDR
// end ; if tmp and mech < 6 then
56368: LD_VAR 0 4
56372: PUSH
56373: LD_VAR 0 7
56377: PUSH
56378: LD_INT 6
56380: LESS
56381: AND
56382: IFFALSE 56570
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
56384: LD_ADDR_VAR 0 9
56388: PUSH
56389: LD_VAR 0 4
56393: PUSH
56394: LD_VAR 0 8
56398: PUSH
56399: LD_VAR 0 7
56403: UNION
56404: DIFF
56405: PPUSH
56406: LD_INT 3
56408: PPUSH
56409: CALL 47961 0 2
56413: ST_TO_ADDR
// p := [ ] ;
56414: LD_ADDR_VAR 0 11
56418: PUSH
56419: EMPTY
56420: ST_TO_ADDR
// if sort then
56421: LD_VAR 0 9
56425: IFFALSE 56541
// for i = 1 to 6 - mech do
56427: LD_ADDR_VAR 0 3
56431: PUSH
56432: DOUBLE
56433: LD_INT 1
56435: DEC
56436: ST_TO_ADDR
56437: LD_INT 6
56439: PUSH
56440: LD_VAR 0 7
56444: MINUS
56445: PUSH
56446: FOR_TO
56447: IFFALSE 56539
// begin if i = sort then
56449: LD_VAR 0 3
56453: PUSH
56454: LD_VAR 0 9
56458: EQUAL
56459: IFFALSE 56463
// break ;
56461: GO 56539
// if GetClass ( i ) = 3 then
56463: LD_VAR 0 3
56467: PPUSH
56468: CALL_OW 257
56472: PUSH
56473: LD_INT 3
56475: EQUAL
56476: IFFALSE 56480
// continue ;
56478: GO 56446
// p := Insert ( p , p + 1 , sort [ i ] ) ;
56480: LD_ADDR_VAR 0 11
56484: PUSH
56485: LD_VAR 0 11
56489: PPUSH
56490: LD_VAR 0 11
56494: PUSH
56495: LD_INT 1
56497: PLUS
56498: PPUSH
56499: LD_VAR 0 9
56503: PUSH
56504: LD_VAR 0 3
56508: ARRAY
56509: PPUSH
56510: CALL_OW 2
56514: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
56515: LD_ADDR_VAR 0 4
56519: PUSH
56520: LD_VAR 0 4
56524: PUSH
56525: LD_VAR 0 9
56529: PUSH
56530: LD_VAR 0 3
56534: ARRAY
56535: DIFF
56536: ST_TO_ADDR
// end ;
56537: GO 56446
56539: POP
56540: POP
// if p then
56541: LD_VAR 0 11
56545: IFFALSE 56570
// result := Replace ( result , 3 , p ) ;
56547: LD_ADDR_VAR 0 2
56551: PUSH
56552: LD_VAR 0 2
56556: PPUSH
56557: LD_INT 3
56559: PPUSH
56560: LD_VAR 0 11
56564: PPUSH
56565: CALL_OW 1
56569: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
56570: LD_VAR 0 4
56574: PUSH
56575: LD_INT 6
56577: GREATER
56578: PUSH
56579: LD_VAR 0 6
56583: PUSH
56584: LD_INT 6
56586: LESS
56587: AND
56588: IFFALSE 56782
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
56590: LD_ADDR_VAR 0 9
56594: PUSH
56595: LD_VAR 0 4
56599: PUSH
56600: LD_VAR 0 8
56604: PUSH
56605: LD_VAR 0 7
56609: UNION
56610: PUSH
56611: LD_VAR 0 6
56615: UNION
56616: DIFF
56617: PPUSH
56618: LD_INT 2
56620: PPUSH
56621: CALL 47961 0 2
56625: ST_TO_ADDR
// p := [ ] ;
56626: LD_ADDR_VAR 0 11
56630: PUSH
56631: EMPTY
56632: ST_TO_ADDR
// if sort then
56633: LD_VAR 0 9
56637: IFFALSE 56753
// for i = 1 to 6 - eng do
56639: LD_ADDR_VAR 0 3
56643: PUSH
56644: DOUBLE
56645: LD_INT 1
56647: DEC
56648: ST_TO_ADDR
56649: LD_INT 6
56651: PUSH
56652: LD_VAR 0 6
56656: MINUS
56657: PUSH
56658: FOR_TO
56659: IFFALSE 56751
// begin if i = sort then
56661: LD_VAR 0 3
56665: PUSH
56666: LD_VAR 0 9
56670: EQUAL
56671: IFFALSE 56675
// break ;
56673: GO 56751
// if GetClass ( i ) = 2 then
56675: LD_VAR 0 3
56679: PPUSH
56680: CALL_OW 257
56684: PUSH
56685: LD_INT 2
56687: EQUAL
56688: IFFALSE 56692
// continue ;
56690: GO 56658
// p := Insert ( p , p + 1 , sort [ i ] ) ;
56692: LD_ADDR_VAR 0 11
56696: PUSH
56697: LD_VAR 0 11
56701: PPUSH
56702: LD_VAR 0 11
56706: PUSH
56707: LD_INT 1
56709: PLUS
56710: PPUSH
56711: LD_VAR 0 9
56715: PUSH
56716: LD_VAR 0 3
56720: ARRAY
56721: PPUSH
56722: CALL_OW 2
56726: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
56727: LD_ADDR_VAR 0 4
56731: PUSH
56732: LD_VAR 0 4
56736: PUSH
56737: LD_VAR 0 9
56741: PUSH
56742: LD_VAR 0 3
56746: ARRAY
56747: DIFF
56748: ST_TO_ADDR
// end ;
56749: GO 56658
56751: POP
56752: POP
// if p then
56753: LD_VAR 0 11
56757: IFFALSE 56782
// result := Replace ( result , 2 , p ) ;
56759: LD_ADDR_VAR 0 2
56763: PUSH
56764: LD_VAR 0 2
56768: PPUSH
56769: LD_INT 2
56771: PPUSH
56772: LD_VAR 0 11
56776: PPUSH
56777: CALL_OW 1
56781: ST_TO_ADDR
// end ; exit ;
56782: GO 58170
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
56784: LD_EXP 91
56788: PUSH
56789: LD_EXP 90
56793: PUSH
56794: LD_VAR 0 1
56798: ARRAY
56799: ARRAY
56800: NOT
56801: PUSH
56802: LD_EXP 64
56806: PUSH
56807: LD_VAR 0 1
56811: ARRAY
56812: PPUSH
56813: LD_INT 30
56815: PUSH
56816: LD_INT 3
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PPUSH
56823: CALL_OW 72
56827: AND
56828: PUSH
56829: LD_EXP 69
56833: PUSH
56834: LD_VAR 0 1
56838: ARRAY
56839: AND
56840: IFFALSE 57448
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
56842: LD_ADDR_EXP 106
56846: PUSH
56847: LD_EXP 106
56851: PPUSH
56852: LD_VAR 0 1
56856: PPUSH
56857: LD_INT 5
56859: PPUSH
56860: CALL_OW 1
56864: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
56865: LD_ADDR_VAR 0 2
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: LD_INT 0
56875: PUSH
56876: LD_INT 0
56878: PUSH
56879: LD_INT 0
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: ST_TO_ADDR
// if sci > 1 then
56888: LD_VAR 0 8
56892: PUSH
56893: LD_INT 1
56895: GREATER
56896: IFFALSE 56924
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
56898: LD_ADDR_VAR 0 4
56902: PUSH
56903: LD_VAR 0 4
56907: PUSH
56908: LD_VAR 0 8
56912: PUSH
56913: LD_VAR 0 8
56917: PUSH
56918: LD_INT 1
56920: ARRAY
56921: DIFF
56922: DIFF
56923: ST_TO_ADDR
// if tmp and not sci then
56924: LD_VAR 0 4
56928: PUSH
56929: LD_VAR 0 8
56933: NOT
56934: AND
56935: IFFALSE 57004
// begin sort := SortBySkill ( tmp , 4 ) ;
56937: LD_ADDR_VAR 0 9
56941: PUSH
56942: LD_VAR 0 4
56946: PPUSH
56947: LD_INT 4
56949: PPUSH
56950: CALL 47961 0 2
56954: ST_TO_ADDR
// if sort then
56955: LD_VAR 0 9
56959: IFFALSE 56975
// p := sort [ 1 ] ;
56961: LD_ADDR_VAR 0 11
56965: PUSH
56966: LD_VAR 0 9
56970: PUSH
56971: LD_INT 1
56973: ARRAY
56974: ST_TO_ADDR
// if p then
56975: LD_VAR 0 11
56979: IFFALSE 57004
// result := Replace ( result , 4 , p ) ;
56981: LD_ADDR_VAR 0 2
56985: PUSH
56986: LD_VAR 0 2
56990: PPUSH
56991: LD_INT 4
56993: PPUSH
56994: LD_VAR 0 11
56998: PPUSH
56999: CALL_OW 1
57003: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
57004: LD_ADDR_VAR 0 4
57008: PUSH
57009: LD_VAR 0 4
57013: PUSH
57014: LD_VAR 0 7
57018: DIFF
57019: ST_TO_ADDR
// if tmp and mech < 6 then
57020: LD_VAR 0 4
57024: PUSH
57025: LD_VAR 0 7
57029: PUSH
57030: LD_INT 6
57032: LESS
57033: AND
57034: IFFALSE 57222
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
57036: LD_ADDR_VAR 0 9
57040: PUSH
57041: LD_VAR 0 4
57045: PUSH
57046: LD_VAR 0 8
57050: PUSH
57051: LD_VAR 0 7
57055: UNION
57056: DIFF
57057: PPUSH
57058: LD_INT 3
57060: PPUSH
57061: CALL 47961 0 2
57065: ST_TO_ADDR
// p := [ ] ;
57066: LD_ADDR_VAR 0 11
57070: PUSH
57071: EMPTY
57072: ST_TO_ADDR
// if sort then
57073: LD_VAR 0 9
57077: IFFALSE 57193
// for i = 1 to 6 - mech do
57079: LD_ADDR_VAR 0 3
57083: PUSH
57084: DOUBLE
57085: LD_INT 1
57087: DEC
57088: ST_TO_ADDR
57089: LD_INT 6
57091: PUSH
57092: LD_VAR 0 7
57096: MINUS
57097: PUSH
57098: FOR_TO
57099: IFFALSE 57191
// begin if i = sort then
57101: LD_VAR 0 3
57105: PUSH
57106: LD_VAR 0 9
57110: EQUAL
57111: IFFALSE 57115
// break ;
57113: GO 57191
// if GetClass ( i ) = 3 then
57115: LD_VAR 0 3
57119: PPUSH
57120: CALL_OW 257
57124: PUSH
57125: LD_INT 3
57127: EQUAL
57128: IFFALSE 57132
// continue ;
57130: GO 57098
// p := Insert ( p , p + 1 , sort [ i ] ) ;
57132: LD_ADDR_VAR 0 11
57136: PUSH
57137: LD_VAR 0 11
57141: PPUSH
57142: LD_VAR 0 11
57146: PUSH
57147: LD_INT 1
57149: PLUS
57150: PPUSH
57151: LD_VAR 0 9
57155: PUSH
57156: LD_VAR 0 3
57160: ARRAY
57161: PPUSH
57162: CALL_OW 2
57166: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
57167: LD_ADDR_VAR 0 4
57171: PUSH
57172: LD_VAR 0 4
57176: PUSH
57177: LD_VAR 0 9
57181: PUSH
57182: LD_VAR 0 3
57186: ARRAY
57187: DIFF
57188: ST_TO_ADDR
// end ;
57189: GO 57098
57191: POP
57192: POP
// if p then
57193: LD_VAR 0 11
57197: IFFALSE 57222
// result := Replace ( result , 3 , p ) ;
57199: LD_ADDR_VAR 0 2
57203: PUSH
57204: LD_VAR 0 2
57208: PPUSH
57209: LD_INT 3
57211: PPUSH
57212: LD_VAR 0 11
57216: PPUSH
57217: CALL_OW 1
57221: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
57222: LD_ADDR_VAR 0 4
57226: PUSH
57227: LD_VAR 0 4
57231: PUSH
57232: LD_VAR 0 6
57236: DIFF
57237: ST_TO_ADDR
// if tmp and eng < 6 then
57238: LD_VAR 0 4
57242: PUSH
57243: LD_VAR 0 6
57247: PUSH
57248: LD_INT 6
57250: LESS
57251: AND
57252: IFFALSE 57446
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
57254: LD_ADDR_VAR 0 9
57258: PUSH
57259: LD_VAR 0 4
57263: PUSH
57264: LD_VAR 0 8
57268: PUSH
57269: LD_VAR 0 7
57273: UNION
57274: PUSH
57275: LD_VAR 0 6
57279: UNION
57280: DIFF
57281: PPUSH
57282: LD_INT 2
57284: PPUSH
57285: CALL 47961 0 2
57289: ST_TO_ADDR
// p := [ ] ;
57290: LD_ADDR_VAR 0 11
57294: PUSH
57295: EMPTY
57296: ST_TO_ADDR
// if sort then
57297: LD_VAR 0 9
57301: IFFALSE 57417
// for i = 1 to 6 - eng do
57303: LD_ADDR_VAR 0 3
57307: PUSH
57308: DOUBLE
57309: LD_INT 1
57311: DEC
57312: ST_TO_ADDR
57313: LD_INT 6
57315: PUSH
57316: LD_VAR 0 6
57320: MINUS
57321: PUSH
57322: FOR_TO
57323: IFFALSE 57415
// begin if i = sort then
57325: LD_VAR 0 3
57329: PUSH
57330: LD_VAR 0 9
57334: EQUAL
57335: IFFALSE 57339
// break ;
57337: GO 57415
// if GetClass ( i ) = 2 then
57339: LD_VAR 0 3
57343: PPUSH
57344: CALL_OW 257
57348: PUSH
57349: LD_INT 2
57351: EQUAL
57352: IFFALSE 57356
// continue ;
57354: GO 57322
// p := Insert ( p , p + 1 , sort [ i ] ) ;
57356: LD_ADDR_VAR 0 11
57360: PUSH
57361: LD_VAR 0 11
57365: PPUSH
57366: LD_VAR 0 11
57370: PUSH
57371: LD_INT 1
57373: PLUS
57374: PPUSH
57375: LD_VAR 0 9
57379: PUSH
57380: LD_VAR 0 3
57384: ARRAY
57385: PPUSH
57386: CALL_OW 2
57390: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
57391: LD_ADDR_VAR 0 4
57395: PUSH
57396: LD_VAR 0 4
57400: PUSH
57401: LD_VAR 0 9
57405: PUSH
57406: LD_VAR 0 3
57410: ARRAY
57411: DIFF
57412: ST_TO_ADDR
// end ;
57413: GO 57322
57415: POP
57416: POP
// if p then
57417: LD_VAR 0 11
57421: IFFALSE 57446
// result := Replace ( result , 2 , p ) ;
57423: LD_ADDR_VAR 0 2
57427: PUSH
57428: LD_VAR 0 2
57432: PPUSH
57433: LD_INT 2
57435: PPUSH
57436: LD_VAR 0 11
57440: PPUSH
57441: CALL_OW 1
57445: ST_TO_ADDR
// end ; exit ;
57446: GO 58170
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
57448: LD_EXP 91
57452: PUSH
57453: LD_EXP 90
57457: PUSH
57458: LD_VAR 0 1
57462: ARRAY
57463: ARRAY
57464: NOT
57465: PUSH
57466: LD_EXP 64
57470: PUSH
57471: LD_VAR 0 1
57475: ARRAY
57476: PPUSH
57477: LD_INT 30
57479: PUSH
57480: LD_INT 3
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PPUSH
57487: CALL_OW 72
57491: AND
57492: PUSH
57493: LD_EXP 69
57497: PUSH
57498: LD_VAR 0 1
57502: ARRAY
57503: NOT
57504: AND
57505: IFFALSE 58170
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
57507: LD_ADDR_EXP 106
57511: PUSH
57512: LD_EXP 106
57516: PPUSH
57517: LD_VAR 0 1
57521: PPUSH
57522: LD_INT 6
57524: PPUSH
57525: CALL_OW 1
57529: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
57530: LD_ADDR_VAR 0 2
57534: PUSH
57535: LD_INT 0
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: LD_INT 0
57543: PUSH
57544: LD_INT 0
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: ST_TO_ADDR
// if sci >= 1 then
57553: LD_VAR 0 8
57557: PUSH
57558: LD_INT 1
57560: GREATEREQUAL
57561: IFFALSE 57583
// tmp := tmp diff sci [ 1 ] ;
57563: LD_ADDR_VAR 0 4
57567: PUSH
57568: LD_VAR 0 4
57572: PUSH
57573: LD_VAR 0 8
57577: PUSH
57578: LD_INT 1
57580: ARRAY
57581: DIFF
57582: ST_TO_ADDR
// if tmp and not sci then
57583: LD_VAR 0 4
57587: PUSH
57588: LD_VAR 0 8
57592: NOT
57593: AND
57594: IFFALSE 57663
// begin sort := SortBySkill ( tmp , 4 ) ;
57596: LD_ADDR_VAR 0 9
57600: PUSH
57601: LD_VAR 0 4
57605: PPUSH
57606: LD_INT 4
57608: PPUSH
57609: CALL 47961 0 2
57613: ST_TO_ADDR
// if sort then
57614: LD_VAR 0 9
57618: IFFALSE 57634
// p := sort [ 1 ] ;
57620: LD_ADDR_VAR 0 11
57624: PUSH
57625: LD_VAR 0 9
57629: PUSH
57630: LD_INT 1
57632: ARRAY
57633: ST_TO_ADDR
// if p then
57634: LD_VAR 0 11
57638: IFFALSE 57663
// result := Replace ( result , 4 , p ) ;
57640: LD_ADDR_VAR 0 2
57644: PUSH
57645: LD_VAR 0 2
57649: PPUSH
57650: LD_INT 4
57652: PPUSH
57653: LD_VAR 0 11
57657: PPUSH
57658: CALL_OW 1
57662: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
57663: LD_ADDR_VAR 0 4
57667: PUSH
57668: LD_VAR 0 4
57672: PUSH
57673: LD_VAR 0 7
57677: DIFF
57678: ST_TO_ADDR
// if tmp and mech < 6 then
57679: LD_VAR 0 4
57683: PUSH
57684: LD_VAR 0 7
57688: PUSH
57689: LD_INT 6
57691: LESS
57692: AND
57693: IFFALSE 57875
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
57695: LD_ADDR_VAR 0 9
57699: PUSH
57700: LD_VAR 0 4
57704: PUSH
57705: LD_VAR 0 7
57709: DIFF
57710: PPUSH
57711: LD_INT 3
57713: PPUSH
57714: CALL 47961 0 2
57718: ST_TO_ADDR
// p := [ ] ;
57719: LD_ADDR_VAR 0 11
57723: PUSH
57724: EMPTY
57725: ST_TO_ADDR
// if sort then
57726: LD_VAR 0 9
57730: IFFALSE 57846
// for i = 1 to 6 - mech do
57732: LD_ADDR_VAR 0 3
57736: PUSH
57737: DOUBLE
57738: LD_INT 1
57740: DEC
57741: ST_TO_ADDR
57742: LD_INT 6
57744: PUSH
57745: LD_VAR 0 7
57749: MINUS
57750: PUSH
57751: FOR_TO
57752: IFFALSE 57844
// begin if i = sort then
57754: LD_VAR 0 3
57758: PUSH
57759: LD_VAR 0 9
57763: EQUAL
57764: IFFALSE 57768
// break ;
57766: GO 57844
// if GetClass ( i ) = 3 then
57768: LD_VAR 0 3
57772: PPUSH
57773: CALL_OW 257
57777: PUSH
57778: LD_INT 3
57780: EQUAL
57781: IFFALSE 57785
// continue ;
57783: GO 57751
// p := Insert ( p , p + 1 , sort [ i ] ) ;
57785: LD_ADDR_VAR 0 11
57789: PUSH
57790: LD_VAR 0 11
57794: PPUSH
57795: LD_VAR 0 11
57799: PUSH
57800: LD_INT 1
57802: PLUS
57803: PPUSH
57804: LD_VAR 0 9
57808: PUSH
57809: LD_VAR 0 3
57813: ARRAY
57814: PPUSH
57815: CALL_OW 2
57819: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
57820: LD_ADDR_VAR 0 4
57824: PUSH
57825: LD_VAR 0 4
57829: PUSH
57830: LD_VAR 0 9
57834: PUSH
57835: LD_VAR 0 3
57839: ARRAY
57840: DIFF
57841: ST_TO_ADDR
// end ;
57842: GO 57751
57844: POP
57845: POP
// if p then
57846: LD_VAR 0 11
57850: IFFALSE 57875
// result := Replace ( result , 3 , p ) ;
57852: LD_ADDR_VAR 0 2
57856: PUSH
57857: LD_VAR 0 2
57861: PPUSH
57862: LD_INT 3
57864: PPUSH
57865: LD_VAR 0 11
57869: PPUSH
57870: CALL_OW 1
57874: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
57875: LD_ADDR_VAR 0 4
57879: PUSH
57880: LD_VAR 0 4
57884: PUSH
57885: LD_VAR 0 6
57889: DIFF
57890: ST_TO_ADDR
// if tmp and eng < 4 then
57891: LD_VAR 0 4
57895: PUSH
57896: LD_VAR 0 6
57900: PUSH
57901: LD_INT 4
57903: LESS
57904: AND
57905: IFFALSE 58095
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
57907: LD_ADDR_VAR 0 9
57911: PUSH
57912: LD_VAR 0 4
57916: PUSH
57917: LD_VAR 0 7
57921: PUSH
57922: LD_VAR 0 6
57926: UNION
57927: DIFF
57928: PPUSH
57929: LD_INT 2
57931: PPUSH
57932: CALL 47961 0 2
57936: ST_TO_ADDR
// p := [ ] ;
57937: LD_ADDR_VAR 0 11
57941: PUSH
57942: EMPTY
57943: ST_TO_ADDR
// if sort then
57944: LD_VAR 0 9
57948: IFFALSE 58064
// for i = 1 to 4 - eng do
57950: LD_ADDR_VAR 0 3
57954: PUSH
57955: DOUBLE
57956: LD_INT 1
57958: DEC
57959: ST_TO_ADDR
57960: LD_INT 4
57962: PUSH
57963: LD_VAR 0 6
57967: MINUS
57968: PUSH
57969: FOR_TO
57970: IFFALSE 58062
// begin if i = sort then
57972: LD_VAR 0 3
57976: PUSH
57977: LD_VAR 0 9
57981: EQUAL
57982: IFFALSE 57986
// break ;
57984: GO 58062
// if GetClass ( i ) = 2 then
57986: LD_VAR 0 3
57990: PPUSH
57991: CALL_OW 257
57995: PUSH
57996: LD_INT 2
57998: EQUAL
57999: IFFALSE 58003
// continue ;
58001: GO 57969
// p := Insert ( p , p + 1 , sort [ i ] ) ;
58003: LD_ADDR_VAR 0 11
58007: PUSH
58008: LD_VAR 0 11
58012: PPUSH
58013: LD_VAR 0 11
58017: PUSH
58018: LD_INT 1
58020: PLUS
58021: PPUSH
58022: LD_VAR 0 9
58026: PUSH
58027: LD_VAR 0 3
58031: ARRAY
58032: PPUSH
58033: CALL_OW 2
58037: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
58038: LD_ADDR_VAR 0 4
58042: PUSH
58043: LD_VAR 0 4
58047: PUSH
58048: LD_VAR 0 9
58052: PUSH
58053: LD_VAR 0 3
58057: ARRAY
58058: DIFF
58059: ST_TO_ADDR
// end ;
58060: GO 57969
58062: POP
58063: POP
// if p then
58064: LD_VAR 0 11
58068: IFFALSE 58093
// result := Replace ( result , 2 , p ) ;
58070: LD_ADDR_VAR 0 2
58074: PUSH
58075: LD_VAR 0 2
58079: PPUSH
58080: LD_INT 2
58082: PPUSH
58083: LD_VAR 0 11
58087: PPUSH
58088: CALL_OW 1
58092: ST_TO_ADDR
// end else
58093: GO 58139
// for i = eng downto 5 do
58095: LD_ADDR_VAR 0 3
58099: PUSH
58100: DOUBLE
58101: LD_VAR 0 6
58105: INC
58106: ST_TO_ADDR
58107: LD_INT 5
58109: PUSH
58110: FOR_DOWNTO
58111: IFFALSE 58137
// tmp := tmp union eng [ i ] ;
58113: LD_ADDR_VAR 0 4
58117: PUSH
58118: LD_VAR 0 4
58122: PUSH
58123: LD_VAR 0 6
58127: PUSH
58128: LD_VAR 0 3
58132: ARRAY
58133: UNION
58134: ST_TO_ADDR
58135: GO 58110
58137: POP
58138: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
58139: LD_ADDR_VAR 0 2
58143: PUSH
58144: LD_VAR 0 2
58148: PPUSH
58149: LD_INT 1
58151: PPUSH
58152: LD_VAR 0 4
58156: PUSH
58157: LD_VAR 0 5
58161: DIFF
58162: PPUSH
58163: CALL_OW 1
58167: ST_TO_ADDR
// exit ;
58168: GO 58170
// end ; end ;
58170: LD_VAR 0 2
58174: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
58175: LD_INT 0
58177: PPUSH
58178: PPUSH
58179: PPUSH
// if not mc_bases then
58180: LD_EXP 64
58184: NOT
58185: IFFALSE 58189
// exit ;
58187: GO 58295
// for i = 1 to mc_bases do
58189: LD_ADDR_VAR 0 2
58193: PUSH
58194: DOUBLE
58195: LD_INT 1
58197: DEC
58198: ST_TO_ADDR
58199: LD_EXP 64
58203: PUSH
58204: FOR_TO
58205: IFFALSE 58286
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
58207: LD_ADDR_VAR 0 3
58211: PUSH
58212: LD_EXP 64
58216: PUSH
58217: LD_VAR 0 2
58221: ARRAY
58222: PPUSH
58223: LD_INT 21
58225: PUSH
58226: LD_INT 3
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 3
58235: PUSH
58236: LD_INT 24
58238: PUSH
58239: LD_INT 1000
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PPUSH
58254: CALL_OW 72
58258: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
58259: LD_ADDR_EXP 65
58263: PUSH
58264: LD_EXP 65
58268: PPUSH
58269: LD_VAR 0 2
58273: PPUSH
58274: LD_VAR 0 3
58278: PPUSH
58279: CALL_OW 1
58283: ST_TO_ADDR
// end ;
58284: GO 58204
58286: POP
58287: POP
// RaiseSailEvent ( 101 ) ;
58288: LD_INT 101
58290: PPUSH
58291: CALL_OW 427
// end ;
58295: LD_VAR 0 1
58299: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
58300: LD_INT 0
58302: PPUSH
58303: PPUSH
58304: PPUSH
58305: PPUSH
58306: PPUSH
58307: PPUSH
58308: PPUSH
// if not mc_bases then
58309: LD_EXP 64
58313: NOT
58314: IFFALSE 58318
// exit ;
58316: GO 58880
// for i = 1 to mc_bases do
58318: LD_ADDR_VAR 0 2
58322: PUSH
58323: DOUBLE
58324: LD_INT 1
58326: DEC
58327: ST_TO_ADDR
58328: LD_EXP 64
58332: PUSH
58333: FOR_TO
58334: IFFALSE 58871
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
58336: LD_ADDR_VAR 0 5
58340: PUSH
58341: LD_EXP 64
58345: PUSH
58346: LD_VAR 0 2
58350: ARRAY
58351: PUSH
58352: LD_EXP 93
58356: PUSH
58357: LD_VAR 0 2
58361: ARRAY
58362: UNION
58363: PPUSH
58364: LD_INT 21
58366: PUSH
58367: LD_INT 1
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 1
58376: PUSH
58377: LD_INT 3
58379: PUSH
58380: LD_INT 54
58382: PUSH
58383: EMPTY
58384: LIST
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 3
58392: PUSH
58393: LD_INT 24
58395: PUSH
58396: LD_INT 800
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: LIST
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PPUSH
58416: CALL_OW 72
58420: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
58421: LD_ADDR_VAR 0 6
58425: PUSH
58426: LD_EXP 64
58430: PUSH
58431: LD_VAR 0 2
58435: ARRAY
58436: PPUSH
58437: LD_INT 21
58439: PUSH
58440: LD_INT 1
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 1
58449: PUSH
58450: LD_INT 3
58452: PUSH
58453: LD_INT 54
58455: PUSH
58456: EMPTY
58457: LIST
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 3
58465: PUSH
58466: LD_INT 24
58468: PUSH
58469: LD_INT 250
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: LIST
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PPUSH
58489: CALL_OW 72
58493: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
58494: LD_ADDR_VAR 0 7
58498: PUSH
58499: LD_VAR 0 5
58503: PUSH
58504: LD_VAR 0 6
58508: DIFF
58509: ST_TO_ADDR
// if not need_heal_1 then
58510: LD_VAR 0 6
58514: NOT
58515: IFFALSE 58548
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
58517: LD_ADDR_EXP 67
58521: PUSH
58522: LD_EXP 67
58526: PPUSH
58527: LD_VAR 0 2
58531: PUSH
58532: LD_INT 1
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PPUSH
58539: EMPTY
58540: PPUSH
58541: CALL 18412 0 3
58545: ST_TO_ADDR
58546: GO 58618
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
58548: LD_ADDR_EXP 67
58552: PUSH
58553: LD_EXP 67
58557: PPUSH
58558: LD_VAR 0 2
58562: PUSH
58563: LD_INT 1
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PPUSH
58570: LD_EXP 67
58574: PUSH
58575: LD_VAR 0 2
58579: ARRAY
58580: PUSH
58581: LD_INT 1
58583: ARRAY
58584: PPUSH
58585: LD_INT 3
58587: PUSH
58588: LD_INT 24
58590: PUSH
58591: LD_INT 1000
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PPUSH
58602: CALL_OW 72
58606: PUSH
58607: LD_VAR 0 6
58611: UNION
58612: PPUSH
58613: CALL 18412 0 3
58617: ST_TO_ADDR
// if not need_heal_2 then
58618: LD_VAR 0 7
58622: NOT
58623: IFFALSE 58656
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
58625: LD_ADDR_EXP 67
58629: PUSH
58630: LD_EXP 67
58634: PPUSH
58635: LD_VAR 0 2
58639: PUSH
58640: LD_INT 2
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PPUSH
58647: EMPTY
58648: PPUSH
58649: CALL 18412 0 3
58653: ST_TO_ADDR
58654: GO 58688
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
58656: LD_ADDR_EXP 67
58660: PUSH
58661: LD_EXP 67
58665: PPUSH
58666: LD_VAR 0 2
58670: PUSH
58671: LD_INT 2
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PPUSH
58678: LD_VAR 0 7
58682: PPUSH
58683: CALL 18412 0 3
58687: ST_TO_ADDR
// if need_heal_2 then
58688: LD_VAR 0 7
58692: IFFALSE 58853
// for j in need_heal_2 do
58694: LD_ADDR_VAR 0 3
58698: PUSH
58699: LD_VAR 0 7
58703: PUSH
58704: FOR_IN
58705: IFFALSE 58851
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58707: LD_ADDR_VAR 0 5
58711: PUSH
58712: LD_EXP 64
58716: PUSH
58717: LD_VAR 0 2
58721: ARRAY
58722: PPUSH
58723: LD_INT 2
58725: PUSH
58726: LD_INT 30
58728: PUSH
58729: LD_INT 6
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 30
58738: PUSH
58739: LD_INT 7
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 30
58748: PUSH
58749: LD_INT 8
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 30
58758: PUSH
58759: LD_INT 0
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 30
58768: PUSH
58769: LD_INT 1
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: PPUSH
58784: CALL_OW 72
58788: ST_TO_ADDR
// if tmp then
58789: LD_VAR 0 5
58793: IFFALSE 58849
// begin k := NearestUnitToUnit ( tmp , j ) ;
58795: LD_ADDR_VAR 0 4
58799: PUSH
58800: LD_VAR 0 5
58804: PPUSH
58805: LD_VAR 0 3
58809: PPUSH
58810: CALL_OW 74
58814: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
58815: LD_VAR 0 3
58819: PPUSH
58820: LD_VAR 0 4
58824: PPUSH
58825: CALL_OW 296
58829: PUSH
58830: LD_INT 5
58832: GREATER
58833: IFFALSE 58849
// ComMoveUnit ( j , k ) ;
58835: LD_VAR 0 3
58839: PPUSH
58840: LD_VAR 0 4
58844: PPUSH
58845: CALL_OW 112
// end ; end ;
58849: GO 58704
58851: POP
58852: POP
// if not need_heal_1 and not need_heal_2 then
58853: LD_VAR 0 6
58857: NOT
58858: PUSH
58859: LD_VAR 0 7
58863: NOT
58864: AND
58865: IFFALSE 58869
// continue ;
58867: GO 58333
// end ;
58869: GO 58333
58871: POP
58872: POP
// RaiseSailEvent ( 102 ) ;
58873: LD_INT 102
58875: PPUSH
58876: CALL_OW 427
// end ;
58880: LD_VAR 0 1
58884: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
58885: LD_INT 0
58887: PPUSH
58888: PPUSH
58889: PPUSH
58890: PPUSH
58891: PPUSH
58892: PPUSH
58893: PPUSH
58894: PPUSH
// if not mc_bases then
58895: LD_EXP 64
58899: NOT
58900: IFFALSE 58904
// exit ;
58902: GO 59739
// for i = 1 to mc_bases do
58904: LD_ADDR_VAR 0 2
58908: PUSH
58909: DOUBLE
58910: LD_INT 1
58912: DEC
58913: ST_TO_ADDR
58914: LD_EXP 64
58918: PUSH
58919: FOR_TO
58920: IFFALSE 59737
// begin if not mc_building_need_repair [ i ] then
58922: LD_EXP 65
58926: PUSH
58927: LD_VAR 0 2
58931: ARRAY
58932: NOT
58933: IFFALSE 59107
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
58935: LD_ADDR_VAR 0 6
58939: PUSH
58940: LD_EXP 83
58944: PUSH
58945: LD_VAR 0 2
58949: ARRAY
58950: PPUSH
58951: LD_INT 3
58953: PUSH
58954: LD_INT 24
58956: PUSH
58957: LD_INT 1000
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 2
58970: PUSH
58971: LD_INT 34
58973: PUSH
58974: LD_INT 13
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 34
58983: PUSH
58984: LD_INT 52
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: LIST
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PPUSH
59000: CALL_OW 72
59004: ST_TO_ADDR
// if cranes then
59005: LD_VAR 0 6
59009: IFFALSE 59071
// for j in cranes do
59011: LD_ADDR_VAR 0 3
59015: PUSH
59016: LD_VAR 0 6
59020: PUSH
59021: FOR_IN
59022: IFFALSE 59069
// if not IsInArea ( j , mc_parking [ i ] ) then
59024: LD_VAR 0 3
59028: PPUSH
59029: LD_EXP 88
59033: PUSH
59034: LD_VAR 0 2
59038: ARRAY
59039: PPUSH
59040: CALL_OW 308
59044: NOT
59045: IFFALSE 59067
// ComMoveToArea ( j , mc_parking [ i ] ) ;
59047: LD_VAR 0 3
59051: PPUSH
59052: LD_EXP 88
59056: PUSH
59057: LD_VAR 0 2
59061: ARRAY
59062: PPUSH
59063: CALL_OW 113
59067: GO 59021
59069: POP
59070: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
59071: LD_ADDR_EXP 66
59075: PUSH
59076: LD_EXP 66
59080: PPUSH
59081: LD_VAR 0 2
59085: PPUSH
59086: EMPTY
59087: PPUSH
59088: CALL_OW 1
59092: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
59093: LD_VAR 0 2
59097: PPUSH
59098: LD_INT 101
59100: PPUSH
59101: CALL 54008 0 2
// continue ;
59105: GO 58919
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
59107: LD_ADDR_EXP 70
59111: PUSH
59112: LD_EXP 70
59116: PPUSH
59117: LD_VAR 0 2
59121: PPUSH
59122: EMPTY
59123: PPUSH
59124: CALL_OW 1
59128: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
59129: LD_VAR 0 2
59133: PPUSH
59134: LD_INT 103
59136: PPUSH
59137: CALL 54008 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
59141: LD_ADDR_VAR 0 5
59145: PUSH
59146: LD_EXP 64
59150: PUSH
59151: LD_VAR 0 2
59155: ARRAY
59156: PUSH
59157: LD_EXP 93
59161: PUSH
59162: LD_VAR 0 2
59166: ARRAY
59167: UNION
59168: PPUSH
59169: LD_INT 2
59171: PUSH
59172: LD_INT 25
59174: PUSH
59175: LD_INT 2
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 25
59184: PUSH
59185: LD_INT 16
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: LIST
59196: PUSH
59197: EMPTY
59198: LIST
59199: PPUSH
59200: CALL_OW 72
59204: PUSH
59205: LD_EXP 67
59209: PUSH
59210: LD_VAR 0 2
59214: ARRAY
59215: PUSH
59216: LD_INT 1
59218: ARRAY
59219: PUSH
59220: LD_EXP 67
59224: PUSH
59225: LD_VAR 0 2
59229: ARRAY
59230: PUSH
59231: LD_INT 2
59233: ARRAY
59234: UNION
59235: DIFF
59236: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
59237: LD_ADDR_VAR 0 6
59241: PUSH
59242: LD_EXP 83
59246: PUSH
59247: LD_VAR 0 2
59251: ARRAY
59252: PPUSH
59253: LD_INT 2
59255: PUSH
59256: LD_INT 34
59258: PUSH
59259: LD_INT 13
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 34
59268: PUSH
59269: LD_INT 52
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: LIST
59280: PPUSH
59281: CALL_OW 72
59285: ST_TO_ADDR
// if cranes then
59286: LD_VAR 0 6
59290: IFFALSE 59426
// begin for j in cranes do
59292: LD_ADDR_VAR 0 3
59296: PUSH
59297: LD_VAR 0 6
59301: PUSH
59302: FOR_IN
59303: IFFALSE 59424
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
59305: LD_VAR 0 3
59309: PPUSH
59310: CALL_OW 256
59314: PUSH
59315: LD_INT 500
59317: GREATEREQUAL
59318: PUSH
59319: LD_VAR 0 3
59323: PPUSH
59324: CALL_OW 314
59328: NOT
59329: AND
59330: IFFALSE 59364
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
59332: LD_VAR 0 3
59336: PPUSH
59337: LD_EXP 65
59341: PUSH
59342: LD_VAR 0 2
59346: ARRAY
59347: PPUSH
59348: LD_VAR 0 3
59352: PPUSH
59353: CALL_OW 74
59357: PPUSH
59358: CALL_OW 130
59362: GO 59422
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
59364: LD_VAR 0 3
59368: PPUSH
59369: CALL_OW 256
59373: PUSH
59374: LD_INT 500
59376: LESS
59377: PUSH
59378: LD_VAR 0 3
59382: PPUSH
59383: LD_EXP 88
59387: PUSH
59388: LD_VAR 0 2
59392: ARRAY
59393: PPUSH
59394: CALL_OW 308
59398: NOT
59399: AND
59400: IFFALSE 59422
// ComMoveToArea ( j , mc_parking [ i ] ) ;
59402: LD_VAR 0 3
59406: PPUSH
59407: LD_EXP 88
59411: PUSH
59412: LD_VAR 0 2
59416: ARRAY
59417: PPUSH
59418: CALL_OW 113
59422: GO 59302
59424: POP
59425: POP
// end ; if tmp > 3 then
59426: LD_VAR 0 5
59430: PUSH
59431: LD_INT 3
59433: GREATER
59434: IFFALSE 59454
// tmp := ShrinkArray ( tmp , 4 ) ;
59436: LD_ADDR_VAR 0 5
59440: PUSH
59441: LD_VAR 0 5
59445: PPUSH
59446: LD_INT 4
59448: PPUSH
59449: CALL 49638 0 2
59453: ST_TO_ADDR
// if not tmp then
59454: LD_VAR 0 5
59458: NOT
59459: IFFALSE 59463
// continue ;
59461: GO 58919
// for j in tmp do
59463: LD_ADDR_VAR 0 3
59467: PUSH
59468: LD_VAR 0 5
59472: PUSH
59473: FOR_IN
59474: IFFALSE 59733
// begin if IsInUnit ( j ) then
59476: LD_VAR 0 3
59480: PPUSH
59481: CALL_OW 310
59485: IFFALSE 59496
// ComExitBuilding ( j ) ;
59487: LD_VAR 0 3
59491: PPUSH
59492: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
59496: LD_VAR 0 3
59500: PUSH
59501: LD_EXP 66
59505: PUSH
59506: LD_VAR 0 2
59510: ARRAY
59511: IN
59512: NOT
59513: IFFALSE 59571
// begin SetTag ( j , 101 ) ;
59515: LD_VAR 0 3
59519: PPUSH
59520: LD_INT 101
59522: PPUSH
59523: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
59527: LD_ADDR_EXP 66
59531: PUSH
59532: LD_EXP 66
59536: PPUSH
59537: LD_VAR 0 2
59541: PUSH
59542: LD_EXP 66
59546: PUSH
59547: LD_VAR 0 2
59551: ARRAY
59552: PUSH
59553: LD_INT 1
59555: PLUS
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PPUSH
59561: LD_VAR 0 3
59565: PPUSH
59566: CALL 18412 0 3
59570: ST_TO_ADDR
// end ; wait ( 1 ) ;
59571: LD_INT 1
59573: PPUSH
59574: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
59578: LD_ADDR_VAR 0 7
59582: PUSH
59583: LD_EXP 65
59587: PUSH
59588: LD_VAR 0 2
59592: ARRAY
59593: ST_TO_ADDR
// if mc_scan [ i ] then
59594: LD_EXP 87
59598: PUSH
59599: LD_VAR 0 2
59603: ARRAY
59604: IFFALSE 59666
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
59606: LD_ADDR_VAR 0 7
59610: PUSH
59611: LD_EXP 65
59615: PUSH
59616: LD_VAR 0 2
59620: ARRAY
59621: PPUSH
59622: LD_INT 3
59624: PUSH
59625: LD_INT 30
59627: PUSH
59628: LD_INT 32
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 30
59637: PUSH
59638: LD_INT 33
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 30
59647: PUSH
59648: LD_INT 31
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: PPUSH
59661: CALL_OW 72
59665: ST_TO_ADDR
// if not to_repair_tmp then
59666: LD_VAR 0 7
59670: NOT
59671: IFFALSE 59675
// continue ;
59673: GO 59473
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
59675: LD_ADDR_VAR 0 8
59679: PUSH
59680: LD_VAR 0 7
59684: PPUSH
59685: LD_VAR 0 3
59689: PPUSH
59690: CALL_OW 74
59694: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 5 then
59695: LD_VAR 0 8
59699: PPUSH
59700: LD_INT 16
59702: PPUSH
59703: CALL 21005 0 2
59707: PUSH
59708: LD_INT 4
59710: ARRAY
59711: PUSH
59712: LD_INT 5
59714: LESS
59715: IFFALSE 59731
// ComRepairBuilding ( j , to_repair ) ;
59717: LD_VAR 0 3
59721: PPUSH
59722: LD_VAR 0 8
59726: PPUSH
59727: CALL_OW 130
// end ;
59731: GO 59473
59733: POP
59734: POP
// end ;
59735: GO 58919
59737: POP
59738: POP
// end ;
59739: LD_VAR 0 1
59743: RET
// export function MC_Heal ; var i , j , tmp ; begin
59744: LD_INT 0
59746: PPUSH
59747: PPUSH
59748: PPUSH
59749: PPUSH
// if not mc_bases then
59750: LD_EXP 64
59754: NOT
59755: IFFALSE 59759
// exit ;
59757: GO 60161
// for i = 1 to mc_bases do
59759: LD_ADDR_VAR 0 2
59763: PUSH
59764: DOUBLE
59765: LD_INT 1
59767: DEC
59768: ST_TO_ADDR
59769: LD_EXP 64
59773: PUSH
59774: FOR_TO
59775: IFFALSE 60159
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
59777: LD_EXP 67
59781: PUSH
59782: LD_VAR 0 2
59786: ARRAY
59787: PUSH
59788: LD_INT 1
59790: ARRAY
59791: NOT
59792: PUSH
59793: LD_EXP 67
59797: PUSH
59798: LD_VAR 0 2
59802: ARRAY
59803: PUSH
59804: LD_INT 2
59806: ARRAY
59807: NOT
59808: AND
59809: IFFALSE 59847
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
59811: LD_ADDR_EXP 68
59815: PUSH
59816: LD_EXP 68
59820: PPUSH
59821: LD_VAR 0 2
59825: PPUSH
59826: EMPTY
59827: PPUSH
59828: CALL_OW 1
59832: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
59833: LD_VAR 0 2
59837: PPUSH
59838: LD_INT 102
59840: PPUSH
59841: CALL 54008 0 2
// continue ;
59845: GO 59774
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
59847: LD_ADDR_VAR 0 4
59851: PUSH
59852: LD_EXP 64
59856: PUSH
59857: LD_VAR 0 2
59861: ARRAY
59862: PPUSH
59863: LD_INT 25
59865: PUSH
59866: LD_INT 4
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PPUSH
59873: CALL_OW 72
59877: ST_TO_ADDR
// if not tmp then
59878: LD_VAR 0 4
59882: NOT
59883: IFFALSE 59887
// continue ;
59885: GO 59774
// if mc_taming [ i ] then
59887: LD_EXP 95
59891: PUSH
59892: LD_VAR 0 2
59896: ARRAY
59897: IFFALSE 59921
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
59899: LD_ADDR_EXP 95
59903: PUSH
59904: LD_EXP 95
59908: PPUSH
59909: LD_VAR 0 2
59913: PPUSH
59914: EMPTY
59915: PPUSH
59916: CALL_OW 1
59920: ST_TO_ADDR
// for j in tmp do
59921: LD_ADDR_VAR 0 3
59925: PUSH
59926: LD_VAR 0 4
59930: PUSH
59931: FOR_IN
59932: IFFALSE 60155
// begin if IsInUnit ( j ) then
59934: LD_VAR 0 3
59938: PPUSH
59939: CALL_OW 310
59943: IFFALSE 59954
// ComExitBuilding ( j ) ;
59945: LD_VAR 0 3
59949: PPUSH
59950: CALL_OW 122
// if not j in mc_healers [ i ] then
59954: LD_VAR 0 3
59958: PUSH
59959: LD_EXP 68
59963: PUSH
59964: LD_VAR 0 2
59968: ARRAY
59969: IN
59970: NOT
59971: IFFALSE 60017
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
59973: LD_ADDR_EXP 68
59977: PUSH
59978: LD_EXP 68
59982: PPUSH
59983: LD_VAR 0 2
59987: PUSH
59988: LD_EXP 68
59992: PUSH
59993: LD_VAR 0 2
59997: ARRAY
59998: PUSH
59999: LD_INT 1
60001: PLUS
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PPUSH
60007: LD_VAR 0 3
60011: PPUSH
60012: CALL 18412 0 3
60016: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
60017: LD_VAR 0 3
60021: PPUSH
60022: CALL_OW 110
60026: PUSH
60027: LD_INT 102
60029: NONEQUAL
60030: IFFALSE 60044
// SetTag ( j , 102 ) ;
60032: LD_VAR 0 3
60036: PPUSH
60037: LD_INT 102
60039: PPUSH
60040: CALL_OW 109
// Wait ( 3 ) ;
60044: LD_INT 3
60046: PPUSH
60047: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
60051: LD_EXP 67
60055: PUSH
60056: LD_VAR 0 2
60060: ARRAY
60061: PUSH
60062: LD_INT 1
60064: ARRAY
60065: IFFALSE 60097
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
60067: LD_VAR 0 3
60071: PPUSH
60072: LD_EXP 67
60076: PUSH
60077: LD_VAR 0 2
60081: ARRAY
60082: PUSH
60083: LD_INT 1
60085: ARRAY
60086: PUSH
60087: LD_INT 1
60089: ARRAY
60090: PPUSH
60091: CALL_OW 128
60095: GO 60153
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
60097: LD_VAR 0 3
60101: PPUSH
60102: CALL_OW 314
60106: NOT
60107: PUSH
60108: LD_EXP 67
60112: PUSH
60113: LD_VAR 0 2
60117: ARRAY
60118: PUSH
60119: LD_INT 2
60121: ARRAY
60122: AND
60123: IFFALSE 60153
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
60125: LD_VAR 0 3
60129: PPUSH
60130: LD_EXP 67
60134: PUSH
60135: LD_VAR 0 2
60139: ARRAY
60140: PUSH
60141: LD_INT 2
60143: ARRAY
60144: PUSH
60145: LD_INT 1
60147: ARRAY
60148: PPUSH
60149: CALL_OW 128
// end ;
60153: GO 59931
60155: POP
60156: POP
// end ;
60157: GO 59774
60159: POP
60160: POP
// end ;
60161: LD_VAR 0 1
60165: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
60166: LD_INT 0
60168: PPUSH
60169: PPUSH
60170: PPUSH
60171: PPUSH
60172: PPUSH
// if not mc_bases then
60173: LD_EXP 64
60177: NOT
60178: IFFALSE 60182
// exit ;
60180: GO 61325
// for i = 1 to mc_bases do
60182: LD_ADDR_VAR 0 2
60186: PUSH
60187: DOUBLE
60188: LD_INT 1
60190: DEC
60191: ST_TO_ADDR
60192: LD_EXP 64
60196: PUSH
60197: FOR_TO
60198: IFFALSE 61323
// begin if mc_scan [ i ] then
60200: LD_EXP 87
60204: PUSH
60205: LD_VAR 0 2
60209: ARRAY
60210: IFFALSE 60214
// continue ;
60212: GO 60197
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
60214: LD_EXP 69
60218: PUSH
60219: LD_VAR 0 2
60223: ARRAY
60224: NOT
60225: PUSH
60226: LD_EXP 71
60230: PUSH
60231: LD_VAR 0 2
60235: ARRAY
60236: NOT
60237: AND
60238: PUSH
60239: LD_EXP 70
60243: PUSH
60244: LD_VAR 0 2
60248: ARRAY
60249: AND
60250: IFFALSE 60288
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
60252: LD_ADDR_EXP 70
60256: PUSH
60257: LD_EXP 70
60261: PPUSH
60262: LD_VAR 0 2
60266: PPUSH
60267: EMPTY
60268: PPUSH
60269: CALL_OW 1
60273: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
60274: LD_VAR 0 2
60278: PPUSH
60279: LD_INT 103
60281: PPUSH
60282: CALL 54008 0 2
// continue ;
60286: GO 60197
// end ; if mc_construct_list [ i ] then
60288: LD_EXP 71
60292: PUSH
60293: LD_VAR 0 2
60297: ARRAY
60298: IFFALSE 60518
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
60300: LD_ADDR_VAR 0 4
60304: PUSH
60305: LD_EXP 64
60309: PUSH
60310: LD_VAR 0 2
60314: ARRAY
60315: PPUSH
60316: LD_INT 25
60318: PUSH
60319: LD_INT 2
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PPUSH
60326: CALL_OW 72
60330: PUSH
60331: LD_EXP 66
60335: PUSH
60336: LD_VAR 0 2
60340: ARRAY
60341: DIFF
60342: ST_TO_ADDR
// if not tmp then
60343: LD_VAR 0 4
60347: NOT
60348: IFFALSE 60352
// continue ;
60350: GO 60197
// for j in tmp do
60352: LD_ADDR_VAR 0 3
60356: PUSH
60357: LD_VAR 0 4
60361: PUSH
60362: FOR_IN
60363: IFFALSE 60514
// begin if not mc_builders [ i ] then
60365: LD_EXP 70
60369: PUSH
60370: LD_VAR 0 2
60374: ARRAY
60375: NOT
60376: IFFALSE 60434
// begin SetTag ( j , 103 ) ;
60378: LD_VAR 0 3
60382: PPUSH
60383: LD_INT 103
60385: PPUSH
60386: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
60390: LD_ADDR_EXP 70
60394: PUSH
60395: LD_EXP 70
60399: PPUSH
60400: LD_VAR 0 2
60404: PUSH
60405: LD_EXP 70
60409: PUSH
60410: LD_VAR 0 2
60414: ARRAY
60415: PUSH
60416: LD_INT 1
60418: PLUS
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PPUSH
60424: LD_VAR 0 3
60428: PPUSH
60429: CALL 18412 0 3
60433: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
60434: LD_VAR 0 3
60438: PPUSH
60439: CALL_OW 310
60443: IFFALSE 60454
// ComExitBuilding ( j ) ;
60445: LD_VAR 0 3
60449: PPUSH
60450: CALL_OW 122
// wait ( 3 ) ;
60454: LD_INT 3
60456: PPUSH
60457: CALL_OW 67
// if not mc_construct_list [ i ] then
60461: LD_EXP 71
60465: PUSH
60466: LD_VAR 0 2
60470: ARRAY
60471: NOT
60472: IFFALSE 60476
// break ;
60474: GO 60514
// if not HasTask ( j ) then
60476: LD_VAR 0 3
60480: PPUSH
60481: CALL_OW 314
60485: NOT
60486: IFFALSE 60512
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
60488: LD_VAR 0 3
60492: PPUSH
60493: LD_EXP 71
60497: PUSH
60498: LD_VAR 0 2
60502: ARRAY
60503: PUSH
60504: LD_INT 1
60506: ARRAY
60507: PPUSH
60508: CALL 21263 0 2
// end ;
60512: GO 60362
60514: POP
60515: POP
// end else
60516: GO 61321
// if mc_build_list [ i ] then
60518: LD_EXP 69
60522: PUSH
60523: LD_VAR 0 2
60527: ARRAY
60528: IFFALSE 61321
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
60530: LD_ADDR_VAR 0 5
60534: PUSH
60535: LD_EXP 64
60539: PUSH
60540: LD_VAR 0 2
60544: ARRAY
60545: PPUSH
60546: LD_INT 2
60548: PUSH
60549: LD_INT 30
60551: PUSH
60552: LD_INT 0
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 30
60561: PUSH
60562: LD_INT 1
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: LIST
60573: PPUSH
60574: CALL_OW 72
60578: ST_TO_ADDR
// if depot then
60579: LD_VAR 0 5
60583: IFFALSE 60601
// depot := depot [ 1 ] else
60585: LD_ADDR_VAR 0 5
60589: PUSH
60590: LD_VAR 0 5
60594: PUSH
60595: LD_INT 1
60597: ARRAY
60598: ST_TO_ADDR
60599: GO 60609
// depot := 0 ;
60601: LD_ADDR_VAR 0 5
60605: PUSH
60606: LD_INT 0
60608: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
60609: LD_EXP 69
60613: PUSH
60614: LD_VAR 0 2
60618: ARRAY
60619: PUSH
60620: LD_INT 1
60622: ARRAY
60623: PUSH
60624: LD_INT 1
60626: ARRAY
60627: PPUSH
60628: CALL 21093 0 1
60632: PUSH
60633: LD_EXP 64
60637: PUSH
60638: LD_VAR 0 2
60642: ARRAY
60643: PPUSH
60644: LD_INT 2
60646: PUSH
60647: LD_INT 30
60649: PUSH
60650: LD_INT 2
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 30
60659: PUSH
60660: LD_INT 3
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: LIST
60671: PPUSH
60672: CALL_OW 72
60676: NOT
60677: AND
60678: IFFALSE 60783
// begin for j = 1 to mc_build_list [ i ] do
60680: LD_ADDR_VAR 0 3
60684: PUSH
60685: DOUBLE
60686: LD_INT 1
60688: DEC
60689: ST_TO_ADDR
60690: LD_EXP 69
60694: PUSH
60695: LD_VAR 0 2
60699: ARRAY
60700: PUSH
60701: FOR_TO
60702: IFFALSE 60781
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
60704: LD_EXP 69
60708: PUSH
60709: LD_VAR 0 2
60713: ARRAY
60714: PUSH
60715: LD_VAR 0 3
60719: ARRAY
60720: PUSH
60721: LD_INT 1
60723: ARRAY
60724: PUSH
60725: LD_INT 2
60727: EQUAL
60728: IFFALSE 60779
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
60730: LD_ADDR_EXP 69
60734: PUSH
60735: LD_EXP 69
60739: PPUSH
60740: LD_VAR 0 2
60744: PPUSH
60745: LD_EXP 69
60749: PUSH
60750: LD_VAR 0 2
60754: ARRAY
60755: PPUSH
60756: LD_VAR 0 3
60760: PPUSH
60761: LD_INT 1
60763: PPUSH
60764: LD_INT 0
60766: PPUSH
60767: CALL 17830 0 4
60771: PPUSH
60772: CALL_OW 1
60776: ST_TO_ADDR
// break ;
60777: GO 60781
// end ;
60779: GO 60701
60781: POP
60782: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
60783: LD_EXP 69
60787: PUSH
60788: LD_VAR 0 2
60792: ARRAY
60793: PUSH
60794: LD_INT 1
60796: ARRAY
60797: PUSH
60798: LD_INT 1
60800: ARRAY
60801: PUSH
60802: LD_INT 0
60804: EQUAL
60805: PUSH
60806: LD_VAR 0 5
60810: PUSH
60811: LD_VAR 0 5
60815: PPUSH
60816: LD_EXP 69
60820: PUSH
60821: LD_VAR 0 2
60825: ARRAY
60826: PUSH
60827: LD_INT 1
60829: ARRAY
60830: PUSH
60831: LD_INT 1
60833: ARRAY
60834: PPUSH
60835: LD_EXP 69
60839: PUSH
60840: LD_VAR 0 2
60844: ARRAY
60845: PUSH
60846: LD_INT 1
60848: ARRAY
60849: PUSH
60850: LD_INT 2
60852: ARRAY
60853: PPUSH
60854: LD_EXP 69
60858: PUSH
60859: LD_VAR 0 2
60863: ARRAY
60864: PUSH
60865: LD_INT 1
60867: ARRAY
60868: PUSH
60869: LD_INT 3
60871: ARRAY
60872: PPUSH
60873: LD_EXP 69
60877: PUSH
60878: LD_VAR 0 2
60882: ARRAY
60883: PUSH
60884: LD_INT 1
60886: ARRAY
60887: PUSH
60888: LD_INT 4
60890: ARRAY
60891: PPUSH
60892: CALL 25827 0 5
60896: AND
60897: OR
60898: IFFALSE 61179
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
60900: LD_ADDR_VAR 0 4
60904: PUSH
60905: LD_EXP 64
60909: PUSH
60910: LD_VAR 0 2
60914: ARRAY
60915: PPUSH
60916: LD_INT 25
60918: PUSH
60919: LD_INT 2
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PPUSH
60926: CALL_OW 72
60930: PUSH
60931: LD_EXP 66
60935: PUSH
60936: LD_VAR 0 2
60940: ARRAY
60941: DIFF
60942: ST_TO_ADDR
// if not tmp then
60943: LD_VAR 0 4
60947: NOT
60948: IFFALSE 60952
// continue ;
60950: GO 60197
// for j in tmp do
60952: LD_ADDR_VAR 0 3
60956: PUSH
60957: LD_VAR 0 4
60961: PUSH
60962: FOR_IN
60963: IFFALSE 61175
// begin if not mc_builders [ i ] then
60965: LD_EXP 70
60969: PUSH
60970: LD_VAR 0 2
60974: ARRAY
60975: NOT
60976: IFFALSE 61034
// begin SetTag ( j , 103 ) ;
60978: LD_VAR 0 3
60982: PPUSH
60983: LD_INT 103
60985: PPUSH
60986: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
60990: LD_ADDR_EXP 70
60994: PUSH
60995: LD_EXP 70
60999: PPUSH
61000: LD_VAR 0 2
61004: PUSH
61005: LD_EXP 70
61009: PUSH
61010: LD_VAR 0 2
61014: ARRAY
61015: PUSH
61016: LD_INT 1
61018: PLUS
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PPUSH
61024: LD_VAR 0 3
61028: PPUSH
61029: CALL 18412 0 3
61033: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
61034: LD_VAR 0 3
61038: PPUSH
61039: CALL_OW 310
61043: IFFALSE 61054
// ComExitBuilding ( j ) ;
61045: LD_VAR 0 3
61049: PPUSH
61050: CALL_OW 122
// wait ( 3 ) ;
61054: LD_INT 3
61056: PPUSH
61057: CALL_OW 67
// if not mc_build_list [ i ] then
61061: LD_EXP 69
61065: PUSH
61066: LD_VAR 0 2
61070: ARRAY
61071: NOT
61072: IFFALSE 61076
// break ;
61074: GO 61175
// if not HasTask ( j ) then
61076: LD_VAR 0 3
61080: PPUSH
61081: CALL_OW 314
61085: NOT
61086: IFFALSE 61173
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
61088: LD_VAR 0 3
61092: PPUSH
61093: LD_EXP 69
61097: PUSH
61098: LD_VAR 0 2
61102: ARRAY
61103: PUSH
61104: LD_INT 1
61106: ARRAY
61107: PUSH
61108: LD_INT 1
61110: ARRAY
61111: PPUSH
61112: LD_EXP 69
61116: PUSH
61117: LD_VAR 0 2
61121: ARRAY
61122: PUSH
61123: LD_INT 1
61125: ARRAY
61126: PUSH
61127: LD_INT 2
61129: ARRAY
61130: PPUSH
61131: LD_EXP 69
61135: PUSH
61136: LD_VAR 0 2
61140: ARRAY
61141: PUSH
61142: LD_INT 1
61144: ARRAY
61145: PUSH
61146: LD_INT 3
61148: ARRAY
61149: PPUSH
61150: LD_EXP 69
61154: PUSH
61155: LD_VAR 0 2
61159: ARRAY
61160: PUSH
61161: LD_INT 1
61163: ARRAY
61164: PUSH
61165: LD_INT 4
61167: ARRAY
61168: PPUSH
61169: CALL_OW 145
// end ;
61173: GO 60962
61175: POP
61176: POP
// end else
61177: GO 61321
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
61179: LD_EXP 64
61183: PUSH
61184: LD_VAR 0 2
61188: ARRAY
61189: PPUSH
61190: LD_EXP 69
61194: PUSH
61195: LD_VAR 0 2
61199: ARRAY
61200: PUSH
61201: LD_INT 1
61203: ARRAY
61204: PUSH
61205: LD_INT 1
61207: ARRAY
61208: PPUSH
61209: LD_EXP 69
61213: PUSH
61214: LD_VAR 0 2
61218: ARRAY
61219: PUSH
61220: LD_INT 1
61222: ARRAY
61223: PUSH
61224: LD_INT 2
61226: ARRAY
61227: PPUSH
61228: LD_EXP 69
61232: PUSH
61233: LD_VAR 0 2
61237: ARRAY
61238: PUSH
61239: LD_INT 1
61241: ARRAY
61242: PUSH
61243: LD_INT 3
61245: ARRAY
61246: PPUSH
61247: LD_EXP 69
61251: PUSH
61252: LD_VAR 0 2
61256: ARRAY
61257: PUSH
61258: LD_INT 1
61260: ARRAY
61261: PUSH
61262: LD_INT 4
61264: ARRAY
61265: PPUSH
61266: CALL 25163 0 5
61270: NOT
61271: IFFALSE 61321
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
61273: LD_ADDR_EXP 69
61277: PUSH
61278: LD_EXP 69
61282: PPUSH
61283: LD_VAR 0 2
61287: PPUSH
61288: LD_EXP 69
61292: PUSH
61293: LD_VAR 0 2
61297: ARRAY
61298: PPUSH
61299: LD_INT 1
61301: PPUSH
61302: LD_INT 1
61304: NEG
61305: PPUSH
61306: LD_INT 0
61308: PPUSH
61309: CALL 17830 0 4
61313: PPUSH
61314: CALL_OW 1
61318: ST_TO_ADDR
// continue ;
61319: GO 60197
// end ; end ; end ;
61321: GO 60197
61323: POP
61324: POP
// end ;
61325: LD_VAR 0 1
61329: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
61330: LD_INT 0
61332: PPUSH
61333: PPUSH
61334: PPUSH
61335: PPUSH
61336: PPUSH
61337: PPUSH
// if not mc_bases then
61338: LD_EXP 64
61342: NOT
61343: IFFALSE 61347
// exit ;
61345: GO 61774
// for i = 1 to mc_bases do
61347: LD_ADDR_VAR 0 2
61351: PUSH
61352: DOUBLE
61353: LD_INT 1
61355: DEC
61356: ST_TO_ADDR
61357: LD_EXP 64
61361: PUSH
61362: FOR_TO
61363: IFFALSE 61772
// begin tmp := mc_build_upgrade [ i ] ;
61365: LD_ADDR_VAR 0 4
61369: PUSH
61370: LD_EXP 96
61374: PUSH
61375: LD_VAR 0 2
61379: ARRAY
61380: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
61381: LD_ADDR_VAR 0 6
61385: PUSH
61386: LD_EXP 97
61390: PUSH
61391: LD_VAR 0 2
61395: ARRAY
61396: PPUSH
61397: LD_INT 2
61399: PUSH
61400: LD_INT 30
61402: PUSH
61403: LD_INT 6
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 30
61412: PUSH
61413: LD_INT 7
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: LIST
61424: PPUSH
61425: CALL_OW 72
61429: ST_TO_ADDR
// if not tmp and not lab then
61430: LD_VAR 0 4
61434: NOT
61435: PUSH
61436: LD_VAR 0 6
61440: NOT
61441: AND
61442: IFFALSE 61446
// continue ;
61444: GO 61362
// if tmp then
61446: LD_VAR 0 4
61450: IFFALSE 61570
// for j in tmp do
61452: LD_ADDR_VAR 0 3
61456: PUSH
61457: LD_VAR 0 4
61461: PUSH
61462: FOR_IN
61463: IFFALSE 61568
// begin if UpgradeCost ( j ) then
61465: LD_VAR 0 3
61469: PPUSH
61470: CALL 24823 0 1
61474: IFFALSE 61566
// begin ComUpgrade ( j ) ;
61476: LD_VAR 0 3
61480: PPUSH
61481: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
61485: LD_ADDR_EXP 96
61489: PUSH
61490: LD_EXP 96
61494: PPUSH
61495: LD_VAR 0 2
61499: PPUSH
61500: LD_EXP 96
61504: PUSH
61505: LD_VAR 0 2
61509: ARRAY
61510: PUSH
61511: LD_VAR 0 3
61515: DIFF
61516: PPUSH
61517: CALL_OW 1
61521: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
61522: LD_ADDR_EXP 71
61526: PUSH
61527: LD_EXP 71
61531: PPUSH
61532: LD_VAR 0 2
61536: PUSH
61537: LD_EXP 71
61541: PUSH
61542: LD_VAR 0 2
61546: ARRAY
61547: PUSH
61548: LD_INT 1
61550: PLUS
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PPUSH
61556: LD_VAR 0 3
61560: PPUSH
61561: CALL 18412 0 3
61565: ST_TO_ADDR
// end ; end ;
61566: GO 61462
61568: POP
61569: POP
// if not lab or not mc_lab_upgrade [ i ] then
61570: LD_VAR 0 6
61574: NOT
61575: PUSH
61576: LD_EXP 98
61580: PUSH
61581: LD_VAR 0 2
61585: ARRAY
61586: NOT
61587: OR
61588: IFFALSE 61592
// continue ;
61590: GO 61362
// for j in lab do
61592: LD_ADDR_VAR 0 3
61596: PUSH
61597: LD_VAR 0 6
61601: PUSH
61602: FOR_IN
61603: IFFALSE 61768
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
61605: LD_VAR 0 3
61609: PPUSH
61610: CALL_OW 266
61614: PUSH
61615: LD_INT 6
61617: PUSH
61618: LD_INT 7
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: IN
61625: PUSH
61626: LD_VAR 0 3
61630: PPUSH
61631: CALL_OW 461
61635: PUSH
61636: LD_INT 1
61638: NONEQUAL
61639: AND
61640: IFFALSE 61766
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
61642: LD_VAR 0 3
61646: PPUSH
61647: LD_EXP 98
61651: PUSH
61652: LD_VAR 0 2
61656: ARRAY
61657: PUSH
61658: LD_INT 1
61660: ARRAY
61661: PPUSH
61662: CALL 25028 0 2
61666: IFFALSE 61766
// begin ComCancel ( j ) ;
61668: LD_VAR 0 3
61672: PPUSH
61673: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
61677: LD_VAR 0 3
61681: PPUSH
61682: LD_EXP 98
61686: PUSH
61687: LD_VAR 0 2
61691: ARRAY
61692: PUSH
61693: LD_INT 1
61695: ARRAY
61696: PPUSH
61697: CALL_OW 207
// if not j in mc_construct_list [ i ] then
61701: LD_VAR 0 3
61705: PUSH
61706: LD_EXP 71
61710: PUSH
61711: LD_VAR 0 2
61715: ARRAY
61716: IN
61717: NOT
61718: IFFALSE 61764
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
61720: LD_ADDR_EXP 71
61724: PUSH
61725: LD_EXP 71
61729: PPUSH
61730: LD_VAR 0 2
61734: PUSH
61735: LD_EXP 71
61739: PUSH
61740: LD_VAR 0 2
61744: ARRAY
61745: PUSH
61746: LD_INT 1
61748: PLUS
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PPUSH
61754: LD_VAR 0 3
61758: PPUSH
61759: CALL 18412 0 3
61763: ST_TO_ADDR
// break ;
61764: GO 61768
// end ; end ; end ;
61766: GO 61602
61768: POP
61769: POP
// end ;
61770: GO 61362
61772: POP
61773: POP
// end ;
61774: LD_VAR 0 1
61778: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
61779: LD_INT 0
61781: PPUSH
61782: PPUSH
61783: PPUSH
61784: PPUSH
61785: PPUSH
61786: PPUSH
61787: PPUSH
61788: PPUSH
61789: PPUSH
// if not mc_bases then
61790: LD_EXP 64
61794: NOT
61795: IFFALSE 61799
// exit ;
61797: GO 62204
// for i = 1 to mc_bases do
61799: LD_ADDR_VAR 0 2
61803: PUSH
61804: DOUBLE
61805: LD_INT 1
61807: DEC
61808: ST_TO_ADDR
61809: LD_EXP 64
61813: PUSH
61814: FOR_TO
61815: IFFALSE 62202
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
61817: LD_EXP 72
61821: PUSH
61822: LD_VAR 0 2
61826: ARRAY
61827: NOT
61828: PUSH
61829: LD_EXP 64
61833: PUSH
61834: LD_VAR 0 2
61838: ARRAY
61839: PPUSH
61840: LD_INT 30
61842: PUSH
61843: LD_INT 3
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PPUSH
61850: CALL_OW 72
61854: NOT
61855: OR
61856: IFFALSE 61860
// continue ;
61858: GO 61814
// busy := false ;
61860: LD_ADDR_VAR 0 8
61864: PUSH
61865: LD_INT 0
61867: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
61868: LD_ADDR_VAR 0 4
61872: PUSH
61873: LD_EXP 64
61877: PUSH
61878: LD_VAR 0 2
61882: ARRAY
61883: PPUSH
61884: LD_INT 30
61886: PUSH
61887: LD_INT 3
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PPUSH
61894: CALL_OW 72
61898: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
61899: LD_ADDR_VAR 0 6
61903: PUSH
61904: LD_EXP 72
61908: PUSH
61909: LD_VAR 0 2
61913: ARRAY
61914: PPUSH
61915: LD_INT 2
61917: PUSH
61918: LD_INT 30
61920: PUSH
61921: LD_INT 32
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 30
61930: PUSH
61931: LD_INT 33
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: LIST
61942: PPUSH
61943: CALL_OW 72
61947: ST_TO_ADDR
// if not t then
61948: LD_VAR 0 6
61952: NOT
61953: IFFALSE 61957
// continue ;
61955: GO 61814
// for j in tmp do
61957: LD_ADDR_VAR 0 3
61961: PUSH
61962: LD_VAR 0 4
61966: PUSH
61967: FOR_IN
61968: IFFALSE 61998
// if not BuildingStatus ( j ) = bs_idle then
61970: LD_VAR 0 3
61974: PPUSH
61975: CALL_OW 461
61979: PUSH
61980: LD_INT 2
61982: EQUAL
61983: NOT
61984: IFFALSE 61996
// begin busy := true ;
61986: LD_ADDR_VAR 0 8
61990: PUSH
61991: LD_INT 1
61993: ST_TO_ADDR
// break ;
61994: GO 61998
// end ;
61996: GO 61967
61998: POP
61999: POP
// if busy then
62000: LD_VAR 0 8
62004: IFFALSE 62008
// continue ;
62006: GO 61814
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
62008: LD_ADDR_VAR 0 7
62012: PUSH
62013: LD_VAR 0 6
62017: PPUSH
62018: LD_INT 35
62020: PUSH
62021: LD_INT 0
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PPUSH
62028: CALL_OW 72
62032: ST_TO_ADDR
// if tw then
62033: LD_VAR 0 7
62037: IFFALSE 62114
// begin tw := tw [ 1 ] ;
62039: LD_ADDR_VAR 0 7
62043: PUSH
62044: LD_VAR 0 7
62048: PUSH
62049: LD_INT 1
62051: ARRAY
62052: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
62053: LD_ADDR_VAR 0 9
62057: PUSH
62058: LD_VAR 0 7
62062: PPUSH
62063: LD_EXP 89
62067: PUSH
62068: LD_VAR 0 2
62072: ARRAY
62073: PPUSH
62074: CALL 23382 0 2
62078: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
62079: LD_EXP 103
62083: PUSH
62084: LD_VAR 0 2
62088: ARRAY
62089: IFFALSE 62112
// if not weapon in mc_allowed_tower_weapons [ i ] then
62091: LD_VAR 0 9
62095: PUSH
62096: LD_EXP 103
62100: PUSH
62101: LD_VAR 0 2
62105: ARRAY
62106: IN
62107: NOT
62108: IFFALSE 62112
// continue ;
62110: GO 61814
// end else
62112: GO 62177
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
62114: LD_ADDR_VAR 0 5
62118: PUSH
62119: LD_EXP 72
62123: PUSH
62124: LD_VAR 0 2
62128: ARRAY
62129: PPUSH
62130: LD_VAR 0 4
62134: PPUSH
62135: CALL 48884 0 2
62139: ST_TO_ADDR
// if not tmp2 then
62140: LD_VAR 0 5
62144: NOT
62145: IFFALSE 62149
// continue ;
62147: GO 61814
// tw := tmp2 [ 1 ] ;
62149: LD_ADDR_VAR 0 7
62153: PUSH
62154: LD_VAR 0 5
62158: PUSH
62159: LD_INT 1
62161: ARRAY
62162: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
62163: LD_ADDR_VAR 0 9
62167: PUSH
62168: LD_VAR 0 5
62172: PUSH
62173: LD_INT 2
62175: ARRAY
62176: ST_TO_ADDR
// end ; if not weapon then
62177: LD_VAR 0 9
62181: NOT
62182: IFFALSE 62186
// continue ;
62184: GO 61814
// ComPlaceWeapon ( tw , weapon ) ;
62186: LD_VAR 0 7
62190: PPUSH
62191: LD_VAR 0 9
62195: PPUSH
62196: CALL_OW 148
// end ;
62200: GO 61814
62202: POP
62203: POP
// end ;
62204: LD_VAR 0 1
62208: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
62209: LD_INT 0
62211: PPUSH
62212: PPUSH
62213: PPUSH
62214: PPUSH
62215: PPUSH
62216: PPUSH
// if not mc_bases then
62217: LD_EXP 64
62221: NOT
62222: IFFALSE 62226
// exit ;
62224: GO 63002
// for i = 1 to mc_bases do
62226: LD_ADDR_VAR 0 2
62230: PUSH
62231: DOUBLE
62232: LD_INT 1
62234: DEC
62235: ST_TO_ADDR
62236: LD_EXP 64
62240: PUSH
62241: FOR_TO
62242: IFFALSE 63000
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
62244: LD_EXP 77
62248: PUSH
62249: LD_VAR 0 2
62253: ARRAY
62254: NOT
62255: PUSH
62256: LD_EXP 77
62260: PUSH
62261: LD_VAR 0 2
62265: ARRAY
62266: PUSH
62267: LD_EXP 78
62271: PUSH
62272: LD_VAR 0 2
62276: ARRAY
62277: EQUAL
62278: OR
62279: PUSH
62280: LD_EXP 87
62284: PUSH
62285: LD_VAR 0 2
62289: ARRAY
62290: OR
62291: IFFALSE 62295
// continue ;
62293: GO 62241
// if mc_miners [ i ] then
62295: LD_EXP 78
62299: PUSH
62300: LD_VAR 0 2
62304: ARRAY
62305: IFFALSE 62687
// begin for j = mc_miners [ i ] downto 1 do
62307: LD_ADDR_VAR 0 3
62311: PUSH
62312: DOUBLE
62313: LD_EXP 78
62317: PUSH
62318: LD_VAR 0 2
62322: ARRAY
62323: INC
62324: ST_TO_ADDR
62325: LD_INT 1
62327: PUSH
62328: FOR_DOWNTO
62329: IFFALSE 62685
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
62331: LD_EXP 78
62335: PUSH
62336: LD_VAR 0 2
62340: ARRAY
62341: PUSH
62342: LD_VAR 0 3
62346: ARRAY
62347: PPUSH
62348: CALL_OW 301
62352: PUSH
62353: LD_EXP 78
62357: PUSH
62358: LD_VAR 0 2
62362: ARRAY
62363: PUSH
62364: LD_VAR 0 3
62368: ARRAY
62369: PPUSH
62370: CALL_OW 257
62374: PUSH
62375: LD_INT 1
62377: NONEQUAL
62378: OR
62379: IFFALSE 62442
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
62381: LD_ADDR_VAR 0 5
62385: PUSH
62386: LD_EXP 78
62390: PUSH
62391: LD_VAR 0 2
62395: ARRAY
62396: PUSH
62397: LD_EXP 78
62401: PUSH
62402: LD_VAR 0 2
62406: ARRAY
62407: PUSH
62408: LD_VAR 0 3
62412: ARRAY
62413: DIFF
62414: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
62415: LD_ADDR_EXP 78
62419: PUSH
62420: LD_EXP 78
62424: PPUSH
62425: LD_VAR 0 2
62429: PPUSH
62430: LD_VAR 0 5
62434: PPUSH
62435: CALL_OW 1
62439: ST_TO_ADDR
// continue ;
62440: GO 62328
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
62442: LD_EXP 78
62446: PUSH
62447: LD_VAR 0 2
62451: ARRAY
62452: PUSH
62453: LD_VAR 0 3
62457: ARRAY
62458: PPUSH
62459: CALL_OW 257
62463: PUSH
62464: LD_INT 1
62466: EQUAL
62467: PUSH
62468: LD_EXP 78
62472: PUSH
62473: LD_VAR 0 2
62477: ARRAY
62478: PUSH
62479: LD_VAR 0 3
62483: ARRAY
62484: PPUSH
62485: CALL_OW 459
62489: NOT
62490: AND
62491: PUSH
62492: LD_EXP 78
62496: PUSH
62497: LD_VAR 0 2
62501: ARRAY
62502: PUSH
62503: LD_VAR 0 3
62507: ARRAY
62508: PPUSH
62509: CALL_OW 314
62513: NOT
62514: AND
62515: IFFALSE 62683
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
62517: LD_EXP 78
62521: PUSH
62522: LD_VAR 0 2
62526: ARRAY
62527: PUSH
62528: LD_VAR 0 3
62532: ARRAY
62533: PPUSH
62534: CALL_OW 310
62538: IFFALSE 62561
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
62540: LD_EXP 78
62544: PUSH
62545: LD_VAR 0 2
62549: ARRAY
62550: PUSH
62551: LD_VAR 0 3
62555: ARRAY
62556: PPUSH
62557: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
62561: LD_EXP 78
62565: PUSH
62566: LD_VAR 0 2
62570: ARRAY
62571: PUSH
62572: LD_VAR 0 3
62576: ARRAY
62577: PPUSH
62578: CALL_OW 314
62582: NOT
62583: IFFALSE 62683
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
62585: LD_EXP 78
62589: PUSH
62590: LD_VAR 0 2
62594: ARRAY
62595: PUSH
62596: LD_VAR 0 3
62600: ARRAY
62601: PPUSH
62602: LD_EXP 77
62606: PUSH
62607: LD_VAR 0 2
62611: ARRAY
62612: PUSH
62613: LD_VAR 0 3
62617: PUSH
62618: LD_EXP 77
62622: PUSH
62623: LD_VAR 0 2
62627: ARRAY
62628: MOD
62629: PUSH
62630: LD_INT 1
62632: PLUS
62633: ARRAY
62634: PUSH
62635: LD_INT 1
62637: ARRAY
62638: PPUSH
62639: LD_EXP 77
62643: PUSH
62644: LD_VAR 0 2
62648: ARRAY
62649: PUSH
62650: LD_VAR 0 3
62654: PUSH
62655: LD_EXP 77
62659: PUSH
62660: LD_VAR 0 2
62664: ARRAY
62665: MOD
62666: PUSH
62667: LD_INT 1
62669: PLUS
62670: ARRAY
62671: PUSH
62672: LD_INT 2
62674: ARRAY
62675: PPUSH
62676: LD_INT 0
62678: PPUSH
62679: CALL_OW 193
// end ; end ;
62683: GO 62328
62685: POP
62686: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
62687: LD_ADDR_VAR 0 5
62691: PUSH
62692: LD_EXP 64
62696: PUSH
62697: LD_VAR 0 2
62701: ARRAY
62702: PPUSH
62703: LD_INT 2
62705: PUSH
62706: LD_INT 30
62708: PUSH
62709: LD_INT 4
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 30
62718: PUSH
62719: LD_INT 5
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 30
62728: PUSH
62729: LD_INT 32
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: PPUSH
62742: CALL_OW 72
62746: ST_TO_ADDR
// if not tmp then
62747: LD_VAR 0 5
62751: NOT
62752: IFFALSE 62756
// continue ;
62754: GO 62241
// list := [ ] ;
62756: LD_ADDR_VAR 0 6
62760: PUSH
62761: EMPTY
62762: ST_TO_ADDR
// for j in tmp do
62763: LD_ADDR_VAR 0 3
62767: PUSH
62768: LD_VAR 0 5
62772: PUSH
62773: FOR_IN
62774: IFFALSE 62843
// begin for k in UnitsInside ( j ) do
62776: LD_ADDR_VAR 0 4
62780: PUSH
62781: LD_VAR 0 3
62785: PPUSH
62786: CALL_OW 313
62790: PUSH
62791: FOR_IN
62792: IFFALSE 62839
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
62794: LD_VAR 0 4
62798: PPUSH
62799: CALL_OW 257
62803: PUSH
62804: LD_INT 1
62806: EQUAL
62807: PUSH
62808: LD_VAR 0 4
62812: PPUSH
62813: CALL_OW 459
62817: NOT
62818: AND
62819: IFFALSE 62837
// list := list ^ k ;
62821: LD_ADDR_VAR 0 6
62825: PUSH
62826: LD_VAR 0 6
62830: PUSH
62831: LD_VAR 0 4
62835: ADD
62836: ST_TO_ADDR
62837: GO 62791
62839: POP
62840: POP
// end ;
62841: GO 62773
62843: POP
62844: POP
// list := list diff mc_miners [ i ] ;
62845: LD_ADDR_VAR 0 6
62849: PUSH
62850: LD_VAR 0 6
62854: PUSH
62855: LD_EXP 78
62859: PUSH
62860: LD_VAR 0 2
62864: ARRAY
62865: DIFF
62866: ST_TO_ADDR
// if not list then
62867: LD_VAR 0 6
62871: NOT
62872: IFFALSE 62876
// continue ;
62874: GO 62241
// k := mc_mines [ i ] - mc_miners [ i ] ;
62876: LD_ADDR_VAR 0 4
62880: PUSH
62881: LD_EXP 77
62885: PUSH
62886: LD_VAR 0 2
62890: ARRAY
62891: PUSH
62892: LD_EXP 78
62896: PUSH
62897: LD_VAR 0 2
62901: ARRAY
62902: MINUS
62903: ST_TO_ADDR
// if k > list then
62904: LD_VAR 0 4
62908: PUSH
62909: LD_VAR 0 6
62913: GREATER
62914: IFFALSE 62926
// k := list ;
62916: LD_ADDR_VAR 0 4
62920: PUSH
62921: LD_VAR 0 6
62925: ST_TO_ADDR
// for j = 1 to k do
62926: LD_ADDR_VAR 0 3
62930: PUSH
62931: DOUBLE
62932: LD_INT 1
62934: DEC
62935: ST_TO_ADDR
62936: LD_VAR 0 4
62940: PUSH
62941: FOR_TO
62942: IFFALSE 62996
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
62944: LD_ADDR_EXP 78
62948: PUSH
62949: LD_EXP 78
62953: PPUSH
62954: LD_VAR 0 2
62958: PUSH
62959: LD_EXP 78
62963: PUSH
62964: LD_VAR 0 2
62968: ARRAY
62969: PUSH
62970: LD_INT 1
62972: PLUS
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PPUSH
62978: LD_VAR 0 6
62982: PUSH
62983: LD_VAR 0 3
62987: ARRAY
62988: PPUSH
62989: CALL 18412 0 3
62993: ST_TO_ADDR
62994: GO 62941
62996: POP
62997: POP
// end ;
62998: GO 62241
63000: POP
63001: POP
// end ;
63002: LD_VAR 0 1
63006: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
63007: LD_INT 0
63009: PPUSH
63010: PPUSH
63011: PPUSH
63012: PPUSH
63013: PPUSH
63014: PPUSH
63015: PPUSH
63016: PPUSH
63017: PPUSH
63018: PPUSH
// if not mc_bases then
63019: LD_EXP 64
63023: NOT
63024: IFFALSE 63028
// exit ;
63026: GO 64778
// for i = 1 to mc_bases do
63028: LD_ADDR_VAR 0 2
63032: PUSH
63033: DOUBLE
63034: LD_INT 1
63036: DEC
63037: ST_TO_ADDR
63038: LD_EXP 64
63042: PUSH
63043: FOR_TO
63044: IFFALSE 64776
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
63046: LD_EXP 64
63050: PUSH
63051: LD_VAR 0 2
63055: ARRAY
63056: NOT
63057: PUSH
63058: LD_EXP 71
63062: PUSH
63063: LD_VAR 0 2
63067: ARRAY
63068: OR
63069: IFFALSE 63073
// continue ;
63071: GO 63043
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
63073: LD_EXP 80
63077: PUSH
63078: LD_VAR 0 2
63082: ARRAY
63083: NOT
63084: PUSH
63085: LD_EXP 81
63089: PUSH
63090: LD_VAR 0 2
63094: ARRAY
63095: AND
63096: IFFALSE 63134
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
63098: LD_ADDR_EXP 81
63102: PUSH
63103: LD_EXP 81
63107: PPUSH
63108: LD_VAR 0 2
63112: PPUSH
63113: EMPTY
63114: PPUSH
63115: CALL_OW 1
63119: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
63120: LD_VAR 0 2
63124: PPUSH
63125: LD_INT 107
63127: PPUSH
63128: CALL 54008 0 2
// continue ;
63132: GO 63043
// end ; target := [ ] ;
63134: LD_ADDR_VAR 0 6
63138: PUSH
63139: EMPTY
63140: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
63141: LD_ADDR_VAR 0 3
63145: PUSH
63146: DOUBLE
63147: LD_EXP 80
63151: PUSH
63152: LD_VAR 0 2
63156: ARRAY
63157: INC
63158: ST_TO_ADDR
63159: LD_INT 1
63161: PUSH
63162: FOR_DOWNTO
63163: IFFALSE 63423
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
63165: LD_EXP 80
63169: PUSH
63170: LD_VAR 0 2
63174: ARRAY
63175: PUSH
63176: LD_VAR 0 3
63180: ARRAY
63181: PUSH
63182: LD_INT 2
63184: ARRAY
63185: PPUSH
63186: LD_EXP 80
63190: PUSH
63191: LD_VAR 0 2
63195: ARRAY
63196: PUSH
63197: LD_VAR 0 3
63201: ARRAY
63202: PUSH
63203: LD_INT 3
63205: ARRAY
63206: PPUSH
63207: CALL_OW 488
63211: PUSH
63212: LD_EXP 80
63216: PUSH
63217: LD_VAR 0 2
63221: ARRAY
63222: PUSH
63223: LD_VAR 0 3
63227: ARRAY
63228: PUSH
63229: LD_INT 2
63231: ARRAY
63232: PPUSH
63233: LD_EXP 80
63237: PUSH
63238: LD_VAR 0 2
63242: ARRAY
63243: PUSH
63244: LD_VAR 0 3
63248: ARRAY
63249: PUSH
63250: LD_INT 3
63252: ARRAY
63253: PPUSH
63254: CALL_OW 284
63258: PUSH
63259: LD_INT 0
63261: EQUAL
63262: AND
63263: IFFALSE 63318
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
63265: LD_ADDR_VAR 0 5
63269: PUSH
63270: LD_EXP 80
63274: PUSH
63275: LD_VAR 0 2
63279: ARRAY
63280: PPUSH
63281: LD_VAR 0 3
63285: PPUSH
63286: CALL_OW 3
63290: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
63291: LD_ADDR_EXP 80
63295: PUSH
63296: LD_EXP 80
63300: PPUSH
63301: LD_VAR 0 2
63305: PPUSH
63306: LD_VAR 0 5
63310: PPUSH
63311: CALL_OW 1
63315: ST_TO_ADDR
// continue ;
63316: GO 63162
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
63318: LD_EXP 64
63322: PUSH
63323: LD_VAR 0 2
63327: ARRAY
63328: PUSH
63329: LD_INT 1
63331: ARRAY
63332: PPUSH
63333: CALL_OW 255
63337: PPUSH
63338: LD_EXP 80
63342: PUSH
63343: LD_VAR 0 2
63347: ARRAY
63348: PUSH
63349: LD_VAR 0 3
63353: ARRAY
63354: PUSH
63355: LD_INT 2
63357: ARRAY
63358: PPUSH
63359: LD_EXP 80
63363: PUSH
63364: LD_VAR 0 2
63368: ARRAY
63369: PUSH
63370: LD_VAR 0 3
63374: ARRAY
63375: PUSH
63376: LD_INT 3
63378: ARRAY
63379: PPUSH
63380: LD_INT 30
63382: PPUSH
63383: CALL 19308 0 4
63387: PUSH
63388: LD_INT 4
63390: ARRAY
63391: PUSH
63392: LD_INT 0
63394: EQUAL
63395: IFFALSE 63421
// begin target := mc_crates [ i ] [ j ] ;
63397: LD_ADDR_VAR 0 6
63401: PUSH
63402: LD_EXP 80
63406: PUSH
63407: LD_VAR 0 2
63411: ARRAY
63412: PUSH
63413: LD_VAR 0 3
63417: ARRAY
63418: ST_TO_ADDR
// break ;
63419: GO 63423
// end ; end ;
63421: GO 63162
63423: POP
63424: POP
// if not target then
63425: LD_VAR 0 6
63429: NOT
63430: IFFALSE 63434
// continue ;
63432: GO 63043
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
63434: LD_ADDR_VAR 0 7
63438: PUSH
63439: LD_EXP 83
63443: PUSH
63444: LD_VAR 0 2
63448: ARRAY
63449: PPUSH
63450: LD_INT 2
63452: PUSH
63453: LD_INT 3
63455: PUSH
63456: LD_INT 58
63458: PUSH
63459: EMPTY
63460: LIST
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 61
63468: PUSH
63469: EMPTY
63470: LIST
63471: PUSH
63472: LD_INT 33
63474: PUSH
63475: LD_INT 5
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 33
63484: PUSH
63485: LD_INT 3
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 2
63501: PUSH
63502: LD_INT 34
63504: PUSH
63505: LD_INT 32
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: LD_INT 34
63514: PUSH
63515: LD_INT 51
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 34
63524: PUSH
63525: LD_INT 12
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PPUSH
63542: CALL_OW 72
63546: ST_TO_ADDR
// if not cargo then
63547: LD_VAR 0 7
63551: NOT
63552: IFFALSE 64195
// begin if mc_crates_collector [ i ] < 5 then
63554: LD_EXP 81
63558: PUSH
63559: LD_VAR 0 2
63563: ARRAY
63564: PUSH
63565: LD_INT 5
63567: LESS
63568: IFFALSE 63934
// begin if mc_ape [ i ] then
63570: LD_EXP 93
63574: PUSH
63575: LD_VAR 0 2
63579: ARRAY
63580: IFFALSE 63627
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
63582: LD_ADDR_VAR 0 5
63586: PUSH
63587: LD_EXP 93
63591: PUSH
63592: LD_VAR 0 2
63596: ARRAY
63597: PPUSH
63598: LD_INT 25
63600: PUSH
63601: LD_INT 16
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 24
63610: PUSH
63611: LD_INT 750
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PPUSH
63622: CALL_OW 72
63626: ST_TO_ADDR
// if not tmp then
63627: LD_VAR 0 5
63631: NOT
63632: IFFALSE 63679
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
63634: LD_ADDR_VAR 0 5
63638: PUSH
63639: LD_EXP 64
63643: PUSH
63644: LD_VAR 0 2
63648: ARRAY
63649: PPUSH
63650: LD_INT 25
63652: PUSH
63653: LD_INT 2
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: PUSH
63660: LD_INT 24
63662: PUSH
63663: LD_INT 750
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PPUSH
63674: CALL_OW 72
63678: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
63679: LD_EXP 93
63683: PUSH
63684: LD_VAR 0 2
63688: ARRAY
63689: PUSH
63690: LD_EXP 64
63694: PUSH
63695: LD_VAR 0 2
63699: ARRAY
63700: PPUSH
63701: LD_INT 25
63703: PUSH
63704: LD_INT 2
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 24
63713: PUSH
63714: LD_INT 750
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PPUSH
63725: CALL_OW 72
63729: AND
63730: PUSH
63731: LD_VAR 0 5
63735: PUSH
63736: LD_INT 5
63738: LESS
63739: AND
63740: IFFALSE 63822
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
63742: LD_ADDR_VAR 0 3
63746: PUSH
63747: LD_EXP 64
63751: PUSH
63752: LD_VAR 0 2
63756: ARRAY
63757: PPUSH
63758: LD_INT 25
63760: PUSH
63761: LD_INT 2
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 24
63770: PUSH
63771: LD_INT 750
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PPUSH
63782: CALL_OW 72
63786: PUSH
63787: FOR_IN
63788: IFFALSE 63820
// begin tmp := tmp union j ;
63790: LD_ADDR_VAR 0 5
63794: PUSH
63795: LD_VAR 0 5
63799: PUSH
63800: LD_VAR 0 3
63804: UNION
63805: ST_TO_ADDR
// if tmp >= 5 then
63806: LD_VAR 0 5
63810: PUSH
63811: LD_INT 5
63813: GREATEREQUAL
63814: IFFALSE 63818
// break ;
63816: GO 63820
// end ;
63818: GO 63787
63820: POP
63821: POP
// end ; if not tmp then
63822: LD_VAR 0 5
63826: NOT
63827: IFFALSE 63831
// continue ;
63829: GO 63043
// for j in tmp do
63831: LD_ADDR_VAR 0 3
63835: PUSH
63836: LD_VAR 0 5
63840: PUSH
63841: FOR_IN
63842: IFFALSE 63932
// if not GetTag ( j ) then
63844: LD_VAR 0 3
63848: PPUSH
63849: CALL_OW 110
63853: NOT
63854: IFFALSE 63930
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
63856: LD_ADDR_EXP 81
63860: PUSH
63861: LD_EXP 81
63865: PPUSH
63866: LD_VAR 0 2
63870: PUSH
63871: LD_EXP 81
63875: PUSH
63876: LD_VAR 0 2
63880: ARRAY
63881: PUSH
63882: LD_INT 1
63884: PLUS
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PPUSH
63890: LD_VAR 0 3
63894: PPUSH
63895: CALL 18412 0 3
63899: ST_TO_ADDR
// SetTag ( j , 107 ) ;
63900: LD_VAR 0 3
63904: PPUSH
63905: LD_INT 107
63907: PPUSH
63908: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
63912: LD_EXP 81
63916: PUSH
63917: LD_VAR 0 2
63921: ARRAY
63922: PUSH
63923: LD_INT 5
63925: GREATEREQUAL
63926: IFFALSE 63930
// break ;
63928: GO 63932
// end ;
63930: GO 63841
63932: POP
63933: POP
// end ; if mc_crates_collector [ i ] and target then
63934: LD_EXP 81
63938: PUSH
63939: LD_VAR 0 2
63943: ARRAY
63944: PUSH
63945: LD_VAR 0 6
63949: AND
63950: IFFALSE 64193
// begin if mc_crates_collector [ i ] < target [ 1 ] then
63952: LD_EXP 81
63956: PUSH
63957: LD_VAR 0 2
63961: ARRAY
63962: PUSH
63963: LD_VAR 0 6
63967: PUSH
63968: LD_INT 1
63970: ARRAY
63971: LESS
63972: IFFALSE 63992
// tmp := mc_crates_collector [ i ] else
63974: LD_ADDR_VAR 0 5
63978: PUSH
63979: LD_EXP 81
63983: PUSH
63984: LD_VAR 0 2
63988: ARRAY
63989: ST_TO_ADDR
63990: GO 64006
// tmp := target [ 1 ] ;
63992: LD_ADDR_VAR 0 5
63996: PUSH
63997: LD_VAR 0 6
64001: PUSH
64002: LD_INT 1
64004: ARRAY
64005: ST_TO_ADDR
// k := 0 ;
64006: LD_ADDR_VAR 0 4
64010: PUSH
64011: LD_INT 0
64013: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
64014: LD_ADDR_VAR 0 3
64018: PUSH
64019: LD_EXP 81
64023: PUSH
64024: LD_VAR 0 2
64028: ARRAY
64029: PUSH
64030: FOR_IN
64031: IFFALSE 64191
// begin k := k + 1 ;
64033: LD_ADDR_VAR 0 4
64037: PUSH
64038: LD_VAR 0 4
64042: PUSH
64043: LD_INT 1
64045: PLUS
64046: ST_TO_ADDR
// if k > tmp then
64047: LD_VAR 0 4
64051: PUSH
64052: LD_VAR 0 5
64056: GREATER
64057: IFFALSE 64061
// break ;
64059: GO 64191
// if not GetClass ( j ) in [ 2 , 16 ] then
64061: LD_VAR 0 3
64065: PPUSH
64066: CALL_OW 257
64070: PUSH
64071: LD_INT 2
64073: PUSH
64074: LD_INT 16
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: IN
64081: NOT
64082: IFFALSE 64135
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
64084: LD_ADDR_EXP 81
64088: PUSH
64089: LD_EXP 81
64093: PPUSH
64094: LD_VAR 0 2
64098: PPUSH
64099: LD_EXP 81
64103: PUSH
64104: LD_VAR 0 2
64108: ARRAY
64109: PUSH
64110: LD_VAR 0 3
64114: DIFF
64115: PPUSH
64116: CALL_OW 1
64120: ST_TO_ADDR
// SetTag ( j , 0 ) ;
64121: LD_VAR 0 3
64125: PPUSH
64126: LD_INT 0
64128: PPUSH
64129: CALL_OW 109
// continue ;
64133: GO 64030
// end ; if IsInUnit ( j ) then
64135: LD_VAR 0 3
64139: PPUSH
64140: CALL_OW 310
64144: IFFALSE 64155
// ComExitBuilding ( j ) ;
64146: LD_VAR 0 3
64150: PPUSH
64151: CALL_OW 122
// wait ( 3 ) ;
64155: LD_INT 3
64157: PPUSH
64158: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
64162: LD_VAR 0 3
64166: PPUSH
64167: LD_VAR 0 6
64171: PUSH
64172: LD_INT 2
64174: ARRAY
64175: PPUSH
64176: LD_VAR 0 6
64180: PUSH
64181: LD_INT 3
64183: ARRAY
64184: PPUSH
64185: CALL_OW 117
// end ;
64189: GO 64030
64191: POP
64192: POP
// end ; end else
64193: GO 64774
// begin for j in cargo do
64195: LD_ADDR_VAR 0 3
64199: PUSH
64200: LD_VAR 0 7
64204: PUSH
64205: FOR_IN
64206: IFFALSE 64772
// begin if GetTag ( j ) <> 0 then
64208: LD_VAR 0 3
64212: PPUSH
64213: CALL_OW 110
64217: PUSH
64218: LD_INT 0
64220: NONEQUAL
64221: IFFALSE 64225
// continue ;
64223: GO 64205
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
64225: LD_VAR 0 3
64229: PPUSH
64230: CALL_OW 256
64234: PUSH
64235: LD_INT 1000
64237: LESS
64238: PUSH
64239: LD_VAR 0 3
64243: PPUSH
64244: LD_EXP 88
64248: PUSH
64249: LD_VAR 0 2
64253: ARRAY
64254: PPUSH
64255: CALL_OW 308
64259: NOT
64260: AND
64261: IFFALSE 64283
// ComMoveToArea ( j , mc_parking [ i ] ) ;
64263: LD_VAR 0 3
64267: PPUSH
64268: LD_EXP 88
64272: PUSH
64273: LD_VAR 0 2
64277: ARRAY
64278: PPUSH
64279: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
64283: LD_VAR 0 3
64287: PPUSH
64288: CALL_OW 256
64292: PUSH
64293: LD_INT 1000
64295: LESS
64296: PUSH
64297: LD_VAR 0 3
64301: PPUSH
64302: LD_EXP 88
64306: PUSH
64307: LD_VAR 0 2
64311: ARRAY
64312: PPUSH
64313: CALL_OW 308
64317: AND
64318: IFFALSE 64322
// continue ;
64320: GO 64205
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
64322: LD_VAR 0 3
64326: PPUSH
64327: CALL_OW 262
64331: PUSH
64332: LD_INT 2
64334: EQUAL
64335: PUSH
64336: LD_VAR 0 3
64340: PPUSH
64341: CALL_OW 261
64345: PUSH
64346: LD_INT 15
64348: LESS
64349: AND
64350: IFFALSE 64354
// continue ;
64352: GO 64205
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
64354: LD_VAR 0 3
64358: PPUSH
64359: CALL_OW 262
64363: PUSH
64364: LD_INT 1
64366: EQUAL
64367: PUSH
64368: LD_VAR 0 3
64372: PPUSH
64373: CALL_OW 261
64377: PUSH
64378: LD_INT 10
64380: LESS
64381: AND
64382: IFFALSE 64711
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
64384: LD_ADDR_VAR 0 8
64388: PUSH
64389: LD_EXP 64
64393: PUSH
64394: LD_VAR 0 2
64398: ARRAY
64399: PPUSH
64400: LD_INT 2
64402: PUSH
64403: LD_INT 30
64405: PUSH
64406: LD_INT 0
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 30
64415: PUSH
64416: LD_INT 1
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: LIST
64427: PPUSH
64428: CALL_OW 72
64432: ST_TO_ADDR
// if not depot then
64433: LD_VAR 0 8
64437: NOT
64438: IFFALSE 64442
// continue ;
64440: GO 64205
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
64442: LD_VAR 0 3
64446: PPUSH
64447: LD_VAR 0 8
64451: PPUSH
64452: LD_VAR 0 3
64456: PPUSH
64457: CALL_OW 74
64461: PPUSH
64462: CALL_OW 296
64466: PUSH
64467: LD_INT 6
64469: LESS
64470: IFFALSE 64486
// SetFuel ( j , 100 ) else
64472: LD_VAR 0 3
64476: PPUSH
64477: LD_INT 100
64479: PPUSH
64480: CALL_OW 240
64484: GO 64711
// if GetFuel ( j ) = 0 then
64486: LD_VAR 0 3
64490: PPUSH
64491: CALL_OW 261
64495: PUSH
64496: LD_INT 0
64498: EQUAL
64499: IFFALSE 64711
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
64501: LD_ADDR_EXP 83
64505: PUSH
64506: LD_EXP 83
64510: PPUSH
64511: LD_VAR 0 2
64515: PPUSH
64516: LD_EXP 83
64520: PUSH
64521: LD_VAR 0 2
64525: ARRAY
64526: PUSH
64527: LD_VAR 0 3
64531: DIFF
64532: PPUSH
64533: CALL_OW 1
64537: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
64538: LD_VAR 0 3
64542: PPUSH
64543: CALL_OW 263
64547: PUSH
64548: LD_INT 1
64550: EQUAL
64551: IFFALSE 64567
// ComExitVehicle ( IsInUnit ( j ) ) ;
64553: LD_VAR 0 3
64557: PPUSH
64558: CALL_OW 310
64562: PPUSH
64563: CALL_OW 121
// if GetControl ( j ) = control_remote then
64567: LD_VAR 0 3
64571: PPUSH
64572: CALL_OW 263
64576: PUSH
64577: LD_INT 2
64579: EQUAL
64580: IFFALSE 64591
// ComUnlink ( j ) ;
64582: LD_VAR 0 3
64586: PPUSH
64587: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
64591: LD_ADDR_VAR 0 9
64595: PUSH
64596: LD_VAR 0 2
64600: PPUSH
64601: LD_INT 3
64603: PPUSH
64604: CALL 74064 0 2
64608: ST_TO_ADDR
// if fac then
64609: LD_VAR 0 9
64613: IFFALSE 64709
// begin for k in fac do
64615: LD_ADDR_VAR 0 4
64619: PUSH
64620: LD_VAR 0 9
64624: PUSH
64625: FOR_IN
64626: IFFALSE 64707
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
64628: LD_ADDR_VAR 0 10
64632: PUSH
64633: LD_VAR 0 9
64637: PPUSH
64638: LD_VAR 0 3
64642: PPUSH
64643: CALL_OW 265
64647: PPUSH
64648: LD_VAR 0 3
64652: PPUSH
64653: CALL_OW 262
64657: PPUSH
64658: LD_VAR 0 3
64662: PPUSH
64663: CALL_OW 263
64667: PPUSH
64668: LD_VAR 0 3
64672: PPUSH
64673: CALL_OW 264
64677: PPUSH
64678: CALL 15944 0 5
64682: ST_TO_ADDR
// if components then
64683: LD_VAR 0 10
64687: IFFALSE 64705
// begin MC_InsertProduceList ( i , components ) ;
64689: LD_VAR 0 2
64693: PPUSH
64694: LD_VAR 0 10
64698: PPUSH
64699: CALL 73609 0 2
// break ;
64703: GO 64707
// end ; end ;
64705: GO 64625
64707: POP
64708: POP
// end ; continue ;
64709: GO 64205
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
64711: LD_VAR 0 3
64715: PPUSH
64716: LD_INT 1
64718: PPUSH
64719: CALL_OW 289
64723: PUSH
64724: LD_INT 100
64726: LESS
64727: PUSH
64728: LD_VAR 0 3
64732: PPUSH
64733: CALL_OW 314
64737: NOT
64738: AND
64739: IFFALSE 64768
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
64741: LD_VAR 0 3
64745: PPUSH
64746: LD_VAR 0 6
64750: PUSH
64751: LD_INT 2
64753: ARRAY
64754: PPUSH
64755: LD_VAR 0 6
64759: PUSH
64760: LD_INT 3
64762: ARRAY
64763: PPUSH
64764: CALL_OW 117
// break ;
64768: GO 64772
// end ;
64770: GO 64205
64772: POP
64773: POP
// end ; end ;
64774: GO 63043
64776: POP
64777: POP
// end ;
64778: LD_VAR 0 1
64782: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
64783: LD_INT 0
64785: PPUSH
64786: PPUSH
64787: PPUSH
64788: PPUSH
// if not mc_bases then
64789: LD_EXP 64
64793: NOT
64794: IFFALSE 64798
// exit ;
64796: GO 64959
// for i = 1 to mc_bases do
64798: LD_ADDR_VAR 0 2
64802: PUSH
64803: DOUBLE
64804: LD_INT 1
64806: DEC
64807: ST_TO_ADDR
64808: LD_EXP 64
64812: PUSH
64813: FOR_TO
64814: IFFALSE 64957
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
64816: LD_ADDR_VAR 0 4
64820: PUSH
64821: LD_EXP 83
64825: PUSH
64826: LD_VAR 0 2
64830: ARRAY
64831: PUSH
64832: LD_EXP 86
64836: PUSH
64837: LD_VAR 0 2
64841: ARRAY
64842: UNION
64843: PPUSH
64844: LD_INT 33
64846: PUSH
64847: LD_INT 2
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PPUSH
64854: CALL_OW 72
64858: ST_TO_ADDR
// if tmp then
64859: LD_VAR 0 4
64863: IFFALSE 64955
// for j in tmp do
64865: LD_ADDR_VAR 0 3
64869: PUSH
64870: LD_VAR 0 4
64874: PUSH
64875: FOR_IN
64876: IFFALSE 64953
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
64878: LD_VAR 0 3
64882: PPUSH
64883: CALL_OW 312
64887: NOT
64888: PUSH
64889: LD_VAR 0 3
64893: PPUSH
64894: CALL_OW 256
64898: PUSH
64899: LD_INT 250
64901: GREATEREQUAL
64902: AND
64903: IFFALSE 64916
// Connect ( j ) else
64905: LD_VAR 0 3
64909: PPUSH
64910: CALL 21345 0 1
64914: GO 64951
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
64916: LD_VAR 0 3
64920: PPUSH
64921: CALL_OW 256
64925: PUSH
64926: LD_INT 250
64928: LESS
64929: PUSH
64930: LD_VAR 0 3
64934: PPUSH
64935: CALL_OW 312
64939: AND
64940: IFFALSE 64951
// ComUnlink ( j ) ;
64942: LD_VAR 0 3
64946: PPUSH
64947: CALL_OW 136
64951: GO 64875
64953: POP
64954: POP
// end ;
64955: GO 64813
64957: POP
64958: POP
// end ;
64959: LD_VAR 0 1
64963: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
64964: LD_INT 0
64966: PPUSH
64967: PPUSH
64968: PPUSH
64969: PPUSH
64970: PPUSH
// if not mc_bases then
64971: LD_EXP 64
64975: NOT
64976: IFFALSE 64980
// exit ;
64978: GO 65425
// for i = 1 to mc_bases do
64980: LD_ADDR_VAR 0 2
64984: PUSH
64985: DOUBLE
64986: LD_INT 1
64988: DEC
64989: ST_TO_ADDR
64990: LD_EXP 64
64994: PUSH
64995: FOR_TO
64996: IFFALSE 65423
// begin if not mc_produce [ i ] then
64998: LD_EXP 85
65002: PUSH
65003: LD_VAR 0 2
65007: ARRAY
65008: NOT
65009: IFFALSE 65013
// continue ;
65011: GO 64995
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
65013: LD_ADDR_VAR 0 5
65017: PUSH
65018: LD_EXP 64
65022: PUSH
65023: LD_VAR 0 2
65027: ARRAY
65028: PPUSH
65029: LD_INT 30
65031: PUSH
65032: LD_INT 3
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PPUSH
65039: CALL_OW 72
65043: ST_TO_ADDR
// if not fac then
65044: LD_VAR 0 5
65048: NOT
65049: IFFALSE 65053
// continue ;
65051: GO 64995
// for j in fac do
65053: LD_ADDR_VAR 0 3
65057: PUSH
65058: LD_VAR 0 5
65062: PUSH
65063: FOR_IN
65064: IFFALSE 65419
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
65066: LD_VAR 0 3
65070: PPUSH
65071: CALL_OW 461
65075: PUSH
65076: LD_INT 2
65078: NONEQUAL
65079: PUSH
65080: LD_VAR 0 3
65084: PPUSH
65085: LD_INT 15
65087: PPUSH
65088: CALL 21005 0 2
65092: PUSH
65093: LD_INT 4
65095: ARRAY
65096: OR
65097: IFFALSE 65101
// continue ;
65099: GO 65063
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
65101: LD_VAR 0 3
65105: PPUSH
65106: LD_EXP 85
65110: PUSH
65111: LD_VAR 0 2
65115: ARRAY
65116: PUSH
65117: LD_INT 1
65119: ARRAY
65120: PUSH
65121: LD_INT 1
65123: ARRAY
65124: PPUSH
65125: LD_EXP 85
65129: PUSH
65130: LD_VAR 0 2
65134: ARRAY
65135: PUSH
65136: LD_INT 1
65138: ARRAY
65139: PUSH
65140: LD_INT 2
65142: ARRAY
65143: PPUSH
65144: LD_EXP 85
65148: PUSH
65149: LD_VAR 0 2
65153: ARRAY
65154: PUSH
65155: LD_INT 1
65157: ARRAY
65158: PUSH
65159: LD_INT 3
65161: ARRAY
65162: PPUSH
65163: LD_EXP 85
65167: PUSH
65168: LD_VAR 0 2
65172: ARRAY
65173: PUSH
65174: LD_INT 1
65176: ARRAY
65177: PUSH
65178: LD_INT 4
65180: ARRAY
65181: PPUSH
65182: CALL_OW 448
65186: PUSH
65187: LD_VAR 0 3
65191: PPUSH
65192: LD_EXP 85
65196: PUSH
65197: LD_VAR 0 2
65201: ARRAY
65202: PUSH
65203: LD_INT 1
65205: ARRAY
65206: PUSH
65207: LD_INT 1
65209: ARRAY
65210: PUSH
65211: LD_EXP 85
65215: PUSH
65216: LD_VAR 0 2
65220: ARRAY
65221: PUSH
65222: LD_INT 1
65224: ARRAY
65225: PUSH
65226: LD_INT 2
65228: ARRAY
65229: PUSH
65230: LD_EXP 85
65234: PUSH
65235: LD_VAR 0 2
65239: ARRAY
65240: PUSH
65241: LD_INT 1
65243: ARRAY
65244: PUSH
65245: LD_INT 3
65247: ARRAY
65248: PUSH
65249: LD_EXP 85
65253: PUSH
65254: LD_VAR 0 2
65258: ARRAY
65259: PUSH
65260: LD_INT 1
65262: ARRAY
65263: PUSH
65264: LD_INT 4
65266: ARRAY
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: PPUSH
65274: CALL 24676 0 2
65278: AND
65279: IFFALSE 65417
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
65281: LD_VAR 0 3
65285: PPUSH
65286: LD_EXP 85
65290: PUSH
65291: LD_VAR 0 2
65295: ARRAY
65296: PUSH
65297: LD_INT 1
65299: ARRAY
65300: PUSH
65301: LD_INT 1
65303: ARRAY
65304: PPUSH
65305: LD_EXP 85
65309: PUSH
65310: LD_VAR 0 2
65314: ARRAY
65315: PUSH
65316: LD_INT 1
65318: ARRAY
65319: PUSH
65320: LD_INT 2
65322: ARRAY
65323: PPUSH
65324: LD_EXP 85
65328: PUSH
65329: LD_VAR 0 2
65333: ARRAY
65334: PUSH
65335: LD_INT 1
65337: ARRAY
65338: PUSH
65339: LD_INT 3
65341: ARRAY
65342: PPUSH
65343: LD_EXP 85
65347: PUSH
65348: LD_VAR 0 2
65352: ARRAY
65353: PUSH
65354: LD_INT 1
65356: ARRAY
65357: PUSH
65358: LD_INT 4
65360: ARRAY
65361: PPUSH
65362: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
65366: LD_ADDR_VAR 0 4
65370: PUSH
65371: LD_EXP 85
65375: PUSH
65376: LD_VAR 0 2
65380: ARRAY
65381: PPUSH
65382: LD_INT 1
65384: PPUSH
65385: CALL_OW 3
65389: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
65390: LD_ADDR_EXP 85
65394: PUSH
65395: LD_EXP 85
65399: PPUSH
65400: LD_VAR 0 2
65404: PPUSH
65405: LD_VAR 0 4
65409: PPUSH
65410: CALL_OW 1
65414: ST_TO_ADDR
// break ;
65415: GO 65419
// end ; end ;
65417: GO 65063
65419: POP
65420: POP
// end ;
65421: GO 64995
65423: POP
65424: POP
// end ;
65425: LD_VAR 0 1
65429: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
65430: LD_INT 0
65432: PPUSH
65433: PPUSH
65434: PPUSH
// if not mc_bases then
65435: LD_EXP 64
65439: NOT
65440: IFFALSE 65444
// exit ;
65442: GO 65533
// for i = 1 to mc_bases do
65444: LD_ADDR_VAR 0 2
65448: PUSH
65449: DOUBLE
65450: LD_INT 1
65452: DEC
65453: ST_TO_ADDR
65454: LD_EXP 64
65458: PUSH
65459: FOR_TO
65460: IFFALSE 65531
// begin if mc_attack [ i ] then
65462: LD_EXP 84
65466: PUSH
65467: LD_VAR 0 2
65471: ARRAY
65472: IFFALSE 65529
// begin tmp := mc_attack [ i ] [ 1 ] ;
65474: LD_ADDR_VAR 0 3
65478: PUSH
65479: LD_EXP 84
65483: PUSH
65484: LD_VAR 0 2
65488: ARRAY
65489: PUSH
65490: LD_INT 1
65492: ARRAY
65493: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
65494: LD_ADDR_EXP 84
65498: PUSH
65499: LD_EXP 84
65503: PPUSH
65504: LD_VAR 0 2
65508: PPUSH
65509: EMPTY
65510: PPUSH
65511: CALL_OW 1
65515: ST_TO_ADDR
// Attack ( tmp ) ;
65516: LD_VAR 0 3
65520: PPUSH
65521: CALL 91580 0 1
// exit ;
65525: POP
65526: POP
65527: GO 65533
// end ; end ;
65529: GO 65459
65531: POP
65532: POP
// end ;
65533: LD_VAR 0 1
65537: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
65538: LD_INT 0
65540: PPUSH
65541: PPUSH
65542: PPUSH
65543: PPUSH
65544: PPUSH
65545: PPUSH
65546: PPUSH
// if not mc_bases then
65547: LD_EXP 64
65551: NOT
65552: IFFALSE 65556
// exit ;
65554: GO 66138
// for i = 1 to mc_bases do
65556: LD_ADDR_VAR 0 2
65560: PUSH
65561: DOUBLE
65562: LD_INT 1
65564: DEC
65565: ST_TO_ADDR
65566: LD_EXP 64
65570: PUSH
65571: FOR_TO
65572: IFFALSE 66136
// begin if not mc_bases [ i ] then
65574: LD_EXP 64
65578: PUSH
65579: LD_VAR 0 2
65583: ARRAY
65584: NOT
65585: IFFALSE 65589
// continue ;
65587: GO 65571
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
65589: LD_ADDR_VAR 0 7
65593: PUSH
65594: LD_EXP 64
65598: PUSH
65599: LD_VAR 0 2
65603: ARRAY
65604: PUSH
65605: LD_INT 1
65607: ARRAY
65608: PPUSH
65609: CALL 15248 0 1
65613: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
65614: LD_ADDR_EXP 87
65618: PUSH
65619: LD_EXP 87
65623: PPUSH
65624: LD_VAR 0 2
65628: PPUSH
65629: LD_EXP 64
65633: PUSH
65634: LD_VAR 0 2
65638: ARRAY
65639: PUSH
65640: LD_INT 1
65642: ARRAY
65643: PPUSH
65644: CALL_OW 255
65648: PPUSH
65649: LD_EXP 89
65653: PUSH
65654: LD_VAR 0 2
65658: ARRAY
65659: PPUSH
65660: CALL 15213 0 2
65664: PPUSH
65665: CALL_OW 1
65669: ST_TO_ADDR
// if not mc_scan [ i ] then
65670: LD_EXP 87
65674: PUSH
65675: LD_VAR 0 2
65679: ARRAY
65680: NOT
65681: IFFALSE 65836
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
65683: LD_ADDR_VAR 0 4
65687: PUSH
65688: LD_EXP 64
65692: PUSH
65693: LD_VAR 0 2
65697: ARRAY
65698: PPUSH
65699: LD_INT 2
65701: PUSH
65702: LD_INT 25
65704: PUSH
65705: LD_INT 5
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 25
65714: PUSH
65715: LD_INT 8
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 25
65724: PUSH
65725: LD_INT 9
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: PPUSH
65738: CALL_OW 72
65742: ST_TO_ADDR
// if not tmp then
65743: LD_VAR 0 4
65747: NOT
65748: IFFALSE 65752
// continue ;
65750: GO 65571
// for j in tmp do
65752: LD_ADDR_VAR 0 3
65756: PUSH
65757: LD_VAR 0 4
65761: PUSH
65762: FOR_IN
65763: IFFALSE 65834
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
65765: LD_VAR 0 3
65769: PPUSH
65770: CALL_OW 310
65774: PPUSH
65775: CALL_OW 266
65779: PUSH
65780: LD_INT 5
65782: EQUAL
65783: PUSH
65784: LD_VAR 0 3
65788: PPUSH
65789: CALL_OW 257
65793: PUSH
65794: LD_INT 1
65796: EQUAL
65797: AND
65798: PUSH
65799: LD_VAR 0 3
65803: PPUSH
65804: CALL_OW 459
65808: NOT
65809: AND
65810: PUSH
65811: LD_VAR 0 7
65815: AND
65816: IFFALSE 65832
// ComChangeProfession ( j , class ) ;
65818: LD_VAR 0 3
65822: PPUSH
65823: LD_VAR 0 7
65827: PPUSH
65828: CALL_OW 123
65832: GO 65762
65834: POP
65835: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
65836: LD_EXP 87
65840: PUSH
65841: LD_VAR 0 2
65845: ARRAY
65846: PUSH
65847: LD_EXP 86
65851: PUSH
65852: LD_VAR 0 2
65856: ARRAY
65857: NOT
65858: AND
65859: PUSH
65860: LD_EXP 64
65864: PUSH
65865: LD_VAR 0 2
65869: ARRAY
65870: PPUSH
65871: LD_INT 30
65873: PUSH
65874: LD_INT 32
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PPUSH
65881: CALL_OW 72
65885: NOT
65886: AND
65887: PUSH
65888: LD_EXP 64
65892: PUSH
65893: LD_VAR 0 2
65897: ARRAY
65898: PPUSH
65899: LD_INT 2
65901: PUSH
65902: LD_INT 30
65904: PUSH
65905: LD_INT 4
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 30
65914: PUSH
65915: LD_INT 5
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: LIST
65926: PPUSH
65927: CALL_OW 72
65931: NOT
65932: AND
65933: IFFALSE 66065
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
65935: LD_ADDR_VAR 0 4
65939: PUSH
65940: LD_EXP 64
65944: PUSH
65945: LD_VAR 0 2
65949: ARRAY
65950: PPUSH
65951: LD_INT 2
65953: PUSH
65954: LD_INT 25
65956: PUSH
65957: LD_INT 1
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 25
65966: PUSH
65967: LD_INT 5
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 25
65976: PUSH
65977: LD_INT 8
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 25
65986: PUSH
65987: LD_INT 9
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: PPUSH
66001: CALL_OW 72
66005: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
66006: LD_ADDR_VAR 0 4
66010: PUSH
66011: LD_VAR 0 4
66015: PUSH
66016: LD_VAR 0 4
66020: PPUSH
66021: LD_INT 18
66023: PPUSH
66024: CALL 46973 0 2
66028: DIFF
66029: ST_TO_ADDR
// if tmp then
66030: LD_VAR 0 4
66034: IFFALSE 66065
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
66036: LD_VAR 0 2
66040: PPUSH
66041: LD_VAR 0 4
66045: PPUSH
66046: LD_EXP 89
66050: PUSH
66051: LD_VAR 0 2
66055: ARRAY
66056: PPUSH
66057: CALL 96289 0 3
// exit ;
66061: POP
66062: POP
66063: GO 66138
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
66065: LD_EXP 87
66069: PUSH
66070: LD_VAR 0 2
66074: ARRAY
66075: PUSH
66076: LD_EXP 86
66080: PUSH
66081: LD_VAR 0 2
66085: ARRAY
66086: AND
66087: IFFALSE 66134
// begin tmp := mc_defender [ i ] ;
66089: LD_ADDR_VAR 0 4
66093: PUSH
66094: LD_EXP 86
66098: PUSH
66099: LD_VAR 0 2
66103: ARRAY
66104: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
66105: LD_VAR 0 2
66109: PPUSH
66110: LD_VAR 0 4
66114: PPUSH
66115: LD_EXP 87
66119: PUSH
66120: LD_VAR 0 2
66124: ARRAY
66125: PPUSH
66126: CALL 96850 0 3
// exit ;
66130: POP
66131: POP
66132: GO 66138
// end ; end ;
66134: GO 65571
66136: POP
66137: POP
// end ;
66138: LD_VAR 0 1
66142: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
66143: LD_INT 0
66145: PPUSH
66146: PPUSH
66147: PPUSH
66148: PPUSH
66149: PPUSH
66150: PPUSH
66151: PPUSH
66152: PPUSH
66153: PPUSH
66154: PPUSH
66155: PPUSH
// if not mc_bases then
66156: LD_EXP 64
66160: NOT
66161: IFFALSE 66165
// exit ;
66163: GO 67252
// for i = 1 to mc_bases do
66165: LD_ADDR_VAR 0 2
66169: PUSH
66170: DOUBLE
66171: LD_INT 1
66173: DEC
66174: ST_TO_ADDR
66175: LD_EXP 64
66179: PUSH
66180: FOR_TO
66181: IFFALSE 67250
// begin tmp := mc_lab [ i ] ;
66183: LD_ADDR_VAR 0 6
66187: PUSH
66188: LD_EXP 97
66192: PUSH
66193: LD_VAR 0 2
66197: ARRAY
66198: ST_TO_ADDR
// if not tmp then
66199: LD_VAR 0 6
66203: NOT
66204: IFFALSE 66208
// continue ;
66206: GO 66180
// idle_lab := 0 ;
66208: LD_ADDR_VAR 0 11
66212: PUSH
66213: LD_INT 0
66215: ST_TO_ADDR
// for j in tmp do
66216: LD_ADDR_VAR 0 3
66220: PUSH
66221: LD_VAR 0 6
66225: PUSH
66226: FOR_IN
66227: IFFALSE 67246
// begin researching := false ;
66229: LD_ADDR_VAR 0 10
66233: PUSH
66234: LD_INT 0
66236: ST_TO_ADDR
// side := GetSide ( j ) ;
66237: LD_ADDR_VAR 0 4
66241: PUSH
66242: LD_VAR 0 3
66246: PPUSH
66247: CALL_OW 255
66251: ST_TO_ADDR
// if not mc_tech [ side ] then
66252: LD_EXP 91
66256: PUSH
66257: LD_VAR 0 4
66261: ARRAY
66262: NOT
66263: IFFALSE 66267
// continue ;
66265: GO 66226
// if BuildingStatus ( j ) = bs_idle then
66267: LD_VAR 0 3
66271: PPUSH
66272: CALL_OW 461
66276: PUSH
66277: LD_INT 2
66279: EQUAL
66280: IFFALSE 66468
// begin if idle_lab and UnitsInside ( j ) < 6 then
66282: LD_VAR 0 11
66286: PUSH
66287: LD_VAR 0 3
66291: PPUSH
66292: CALL_OW 313
66296: PUSH
66297: LD_INT 6
66299: LESS
66300: AND
66301: IFFALSE 66372
// begin tmp2 := UnitsInside ( idle_lab ) ;
66303: LD_ADDR_VAR 0 9
66307: PUSH
66308: LD_VAR 0 11
66312: PPUSH
66313: CALL_OW 313
66317: ST_TO_ADDR
// if tmp2 then
66318: LD_VAR 0 9
66322: IFFALSE 66364
// for x in tmp2 do
66324: LD_ADDR_VAR 0 7
66328: PUSH
66329: LD_VAR 0 9
66333: PUSH
66334: FOR_IN
66335: IFFALSE 66362
// begin ComExitBuilding ( x ) ;
66337: LD_VAR 0 7
66341: PPUSH
66342: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
66346: LD_VAR 0 7
66350: PPUSH
66351: LD_VAR 0 3
66355: PPUSH
66356: CALL_OW 180
// end ;
66360: GO 66334
66362: POP
66363: POP
// idle_lab := 0 ;
66364: LD_ADDR_VAR 0 11
66368: PUSH
66369: LD_INT 0
66371: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
66372: LD_ADDR_VAR 0 5
66376: PUSH
66377: LD_EXP 91
66381: PUSH
66382: LD_VAR 0 4
66386: ARRAY
66387: PUSH
66388: FOR_IN
66389: IFFALSE 66449
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
66391: LD_VAR 0 3
66395: PPUSH
66396: LD_VAR 0 5
66400: PPUSH
66401: CALL_OW 430
66405: PUSH
66406: LD_VAR 0 4
66410: PPUSH
66411: LD_VAR 0 5
66415: PPUSH
66416: CALL 14318 0 2
66420: AND
66421: IFFALSE 66447
// begin researching := true ;
66423: LD_ADDR_VAR 0 10
66427: PUSH
66428: LD_INT 1
66430: ST_TO_ADDR
// ComResearch ( j , t ) ;
66431: LD_VAR 0 3
66435: PPUSH
66436: LD_VAR 0 5
66440: PPUSH
66441: CALL_OW 124
// break ;
66445: GO 66449
// end ;
66447: GO 66388
66449: POP
66450: POP
// if not researching then
66451: LD_VAR 0 10
66455: NOT
66456: IFFALSE 66468
// idle_lab := j ;
66458: LD_ADDR_VAR 0 11
66462: PUSH
66463: LD_VAR 0 3
66467: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
66468: LD_VAR 0 3
66472: PPUSH
66473: CALL_OW 461
66477: PUSH
66478: LD_INT 10
66480: EQUAL
66481: IFFALSE 67069
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
66483: LD_EXP 93
66487: PUSH
66488: LD_VAR 0 2
66492: ARRAY
66493: NOT
66494: PUSH
66495: LD_EXP 94
66499: PUSH
66500: LD_VAR 0 2
66504: ARRAY
66505: NOT
66506: AND
66507: PUSH
66508: LD_EXP 91
66512: PUSH
66513: LD_VAR 0 4
66517: ARRAY
66518: PUSH
66519: LD_INT 1
66521: GREATER
66522: AND
66523: IFFALSE 66654
// begin ComCancel ( j ) ;
66525: LD_VAR 0 3
66529: PPUSH
66530: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
66534: LD_ADDR_EXP 91
66538: PUSH
66539: LD_EXP 91
66543: PPUSH
66544: LD_VAR 0 4
66548: PPUSH
66549: LD_EXP 91
66553: PUSH
66554: LD_VAR 0 4
66558: ARRAY
66559: PPUSH
66560: LD_EXP 91
66564: PUSH
66565: LD_VAR 0 4
66569: ARRAY
66570: PUSH
66571: LD_INT 1
66573: MINUS
66574: PPUSH
66575: LD_EXP 91
66579: PUSH
66580: LD_VAR 0 4
66584: ARRAY
66585: PPUSH
66586: LD_INT 0
66588: PPUSH
66589: CALL 17830 0 4
66593: PPUSH
66594: CALL_OW 1
66598: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
66599: LD_ADDR_EXP 91
66603: PUSH
66604: LD_EXP 91
66608: PPUSH
66609: LD_VAR 0 4
66613: PPUSH
66614: LD_EXP 91
66618: PUSH
66619: LD_VAR 0 4
66623: ARRAY
66624: PPUSH
66625: LD_EXP 91
66629: PUSH
66630: LD_VAR 0 4
66634: ARRAY
66635: PPUSH
66636: LD_INT 1
66638: PPUSH
66639: LD_INT 0
66641: PPUSH
66642: CALL 17830 0 4
66646: PPUSH
66647: CALL_OW 1
66651: ST_TO_ADDR
// continue ;
66652: GO 66226
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
66654: LD_EXP 93
66658: PUSH
66659: LD_VAR 0 2
66663: ARRAY
66664: PUSH
66665: LD_EXP 94
66669: PUSH
66670: LD_VAR 0 2
66674: ARRAY
66675: NOT
66676: AND
66677: IFFALSE 66804
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
66679: LD_ADDR_EXP 94
66683: PUSH
66684: LD_EXP 94
66688: PPUSH
66689: LD_VAR 0 2
66693: PUSH
66694: LD_EXP 94
66698: PUSH
66699: LD_VAR 0 2
66703: ARRAY
66704: PUSH
66705: LD_INT 1
66707: PLUS
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PPUSH
66713: LD_EXP 93
66717: PUSH
66718: LD_VAR 0 2
66722: ARRAY
66723: PUSH
66724: LD_INT 1
66726: ARRAY
66727: PPUSH
66728: CALL 18412 0 3
66732: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
66733: LD_EXP 93
66737: PUSH
66738: LD_VAR 0 2
66742: ARRAY
66743: PUSH
66744: LD_INT 1
66746: ARRAY
66747: PPUSH
66748: LD_INT 112
66750: PPUSH
66751: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
66755: LD_ADDR_VAR 0 9
66759: PUSH
66760: LD_EXP 93
66764: PUSH
66765: LD_VAR 0 2
66769: ARRAY
66770: PPUSH
66771: LD_INT 1
66773: PPUSH
66774: CALL_OW 3
66778: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
66779: LD_ADDR_EXP 93
66783: PUSH
66784: LD_EXP 93
66788: PPUSH
66789: LD_VAR 0 2
66793: PPUSH
66794: LD_VAR 0 9
66798: PPUSH
66799: CALL_OW 1
66803: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
66804: LD_EXP 93
66808: PUSH
66809: LD_VAR 0 2
66813: ARRAY
66814: PUSH
66815: LD_EXP 94
66819: PUSH
66820: LD_VAR 0 2
66824: ARRAY
66825: AND
66826: PUSH
66827: LD_EXP 94
66831: PUSH
66832: LD_VAR 0 2
66836: ARRAY
66837: PUSH
66838: LD_INT 1
66840: ARRAY
66841: PPUSH
66842: CALL_OW 310
66846: NOT
66847: AND
66848: PUSH
66849: LD_VAR 0 3
66853: PPUSH
66854: CALL_OW 313
66858: PUSH
66859: LD_INT 6
66861: EQUAL
66862: AND
66863: IFFALSE 66919
// begin tmp2 := UnitsInside ( j ) ;
66865: LD_ADDR_VAR 0 9
66869: PUSH
66870: LD_VAR 0 3
66874: PPUSH
66875: CALL_OW 313
66879: ST_TO_ADDR
// if tmp2 = 6 then
66880: LD_VAR 0 9
66884: PUSH
66885: LD_INT 6
66887: EQUAL
66888: IFFALSE 66919
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
66890: LD_VAR 0 9
66894: PUSH
66895: LD_INT 1
66897: ARRAY
66898: PPUSH
66899: LD_INT 112
66901: PPUSH
66902: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
66906: LD_VAR 0 9
66910: PUSH
66911: LD_INT 1
66913: ARRAY
66914: PPUSH
66915: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
66919: LD_EXP 94
66923: PUSH
66924: LD_VAR 0 2
66928: ARRAY
66929: PUSH
66930: LD_EXP 94
66934: PUSH
66935: LD_VAR 0 2
66939: ARRAY
66940: PUSH
66941: LD_INT 1
66943: ARRAY
66944: PPUSH
66945: CALL_OW 314
66949: NOT
66950: AND
66951: PUSH
66952: LD_EXP 94
66956: PUSH
66957: LD_VAR 0 2
66961: ARRAY
66962: PUSH
66963: LD_INT 1
66965: ARRAY
66966: PPUSH
66967: CALL_OW 310
66971: NOT
66972: AND
66973: IFFALSE 66999
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
66975: LD_EXP 94
66979: PUSH
66980: LD_VAR 0 2
66984: ARRAY
66985: PUSH
66986: LD_INT 1
66988: ARRAY
66989: PPUSH
66990: LD_VAR 0 3
66994: PPUSH
66995: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
66999: LD_EXP 94
67003: PUSH
67004: LD_VAR 0 2
67008: ARRAY
67009: PUSH
67010: LD_INT 1
67012: ARRAY
67013: PPUSH
67014: CALL_OW 310
67018: PUSH
67019: LD_EXP 94
67023: PUSH
67024: LD_VAR 0 2
67028: ARRAY
67029: PUSH
67030: LD_INT 1
67032: ARRAY
67033: PPUSH
67034: CALL_OW 310
67038: PPUSH
67039: CALL_OW 461
67043: PUSH
67044: LD_INT 3
67046: NONEQUAL
67047: AND
67048: IFFALSE 67069
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
67050: LD_EXP 94
67054: PUSH
67055: LD_VAR 0 2
67059: ARRAY
67060: PUSH
67061: LD_INT 1
67063: ARRAY
67064: PPUSH
67065: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
67069: LD_VAR 0 3
67073: PPUSH
67074: CALL_OW 461
67078: PUSH
67079: LD_INT 6
67081: EQUAL
67082: PUSH
67083: LD_VAR 0 6
67087: PUSH
67088: LD_INT 1
67090: GREATER
67091: AND
67092: IFFALSE 67244
// begin sci := [ ] ;
67094: LD_ADDR_VAR 0 8
67098: PUSH
67099: EMPTY
67100: ST_TO_ADDR
// for x in ( tmp diff j ) do
67101: LD_ADDR_VAR 0 7
67105: PUSH
67106: LD_VAR 0 6
67110: PUSH
67111: LD_VAR 0 3
67115: DIFF
67116: PUSH
67117: FOR_IN
67118: IFFALSE 67170
// begin if sci = 6 then
67120: LD_VAR 0 8
67124: PUSH
67125: LD_INT 6
67127: EQUAL
67128: IFFALSE 67132
// break ;
67130: GO 67170
// if BuildingStatus ( x ) = bs_idle then
67132: LD_VAR 0 7
67136: PPUSH
67137: CALL_OW 461
67141: PUSH
67142: LD_INT 2
67144: EQUAL
67145: IFFALSE 67168
// sci := sci ^ UnitsInside ( x ) ;
67147: LD_ADDR_VAR 0 8
67151: PUSH
67152: LD_VAR 0 8
67156: PUSH
67157: LD_VAR 0 7
67161: PPUSH
67162: CALL_OW 313
67166: ADD
67167: ST_TO_ADDR
// end ;
67168: GO 67117
67170: POP
67171: POP
// if not sci then
67172: LD_VAR 0 8
67176: NOT
67177: IFFALSE 67181
// continue ;
67179: GO 66226
// for x in sci do
67181: LD_ADDR_VAR 0 7
67185: PUSH
67186: LD_VAR 0 8
67190: PUSH
67191: FOR_IN
67192: IFFALSE 67242
// if IsInUnit ( x ) and not HasTask ( x ) then
67194: LD_VAR 0 7
67198: PPUSH
67199: CALL_OW 310
67203: PUSH
67204: LD_VAR 0 7
67208: PPUSH
67209: CALL_OW 314
67213: NOT
67214: AND
67215: IFFALSE 67240
// begin ComExitBuilding ( x ) ;
67217: LD_VAR 0 7
67221: PPUSH
67222: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
67226: LD_VAR 0 7
67230: PPUSH
67231: LD_VAR 0 3
67235: PPUSH
67236: CALL_OW 180
// end ;
67240: GO 67191
67242: POP
67243: POP
// end ; end ;
67244: GO 66226
67246: POP
67247: POP
// end ;
67248: GO 66180
67250: POP
67251: POP
// end ;
67252: LD_VAR 0 1
67256: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
67257: LD_INT 0
67259: PPUSH
67260: PPUSH
// if not mc_bases then
67261: LD_EXP 64
67265: NOT
67266: IFFALSE 67270
// exit ;
67268: GO 67351
// for i = 1 to mc_bases do
67270: LD_ADDR_VAR 0 2
67274: PUSH
67275: DOUBLE
67276: LD_INT 1
67278: DEC
67279: ST_TO_ADDR
67280: LD_EXP 64
67284: PUSH
67285: FOR_TO
67286: IFFALSE 67349
// if mc_mines [ i ] and mc_miners [ i ] then
67288: LD_EXP 77
67292: PUSH
67293: LD_VAR 0 2
67297: ARRAY
67298: PUSH
67299: LD_EXP 78
67303: PUSH
67304: LD_VAR 0 2
67308: ARRAY
67309: AND
67310: IFFALSE 67347
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
67312: LD_EXP 78
67316: PUSH
67317: LD_VAR 0 2
67321: ARRAY
67322: PUSH
67323: LD_INT 1
67325: ARRAY
67326: PPUSH
67327: CALL_OW 255
67331: PPUSH
67332: LD_EXP 77
67336: PUSH
67337: LD_VAR 0 2
67341: ARRAY
67342: PPUSH
67343: CALL 15401 0 2
67347: GO 67285
67349: POP
67350: POP
// end ;
67351: LD_VAR 0 1
67355: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
67356: LD_INT 0
67358: PPUSH
67359: PPUSH
67360: PPUSH
67361: PPUSH
67362: PPUSH
67363: PPUSH
67364: PPUSH
67365: PPUSH
// if not mc_bases or not mc_parking then
67366: LD_EXP 64
67370: NOT
67371: PUSH
67372: LD_EXP 88
67376: NOT
67377: OR
67378: IFFALSE 67382
// exit ;
67380: GO 68081
// for i = 1 to mc_bases do
67382: LD_ADDR_VAR 0 2
67386: PUSH
67387: DOUBLE
67388: LD_INT 1
67390: DEC
67391: ST_TO_ADDR
67392: LD_EXP 64
67396: PUSH
67397: FOR_TO
67398: IFFALSE 68079
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
67400: LD_EXP 64
67404: PUSH
67405: LD_VAR 0 2
67409: ARRAY
67410: NOT
67411: PUSH
67412: LD_EXP 88
67416: PUSH
67417: LD_VAR 0 2
67421: ARRAY
67422: NOT
67423: OR
67424: IFFALSE 67428
// continue ;
67426: GO 67397
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
67428: LD_ADDR_VAR 0 5
67432: PUSH
67433: LD_EXP 64
67437: PUSH
67438: LD_VAR 0 2
67442: ARRAY
67443: PUSH
67444: LD_INT 1
67446: ARRAY
67447: PPUSH
67448: CALL_OW 255
67452: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
67453: LD_ADDR_VAR 0 6
67457: PUSH
67458: LD_EXP 64
67462: PUSH
67463: LD_VAR 0 2
67467: ARRAY
67468: PPUSH
67469: LD_INT 30
67471: PUSH
67472: LD_INT 3
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PPUSH
67479: CALL_OW 72
67483: ST_TO_ADDR
// if not fac then
67484: LD_VAR 0 6
67488: NOT
67489: IFFALSE 67540
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
67491: LD_ADDR_VAR 0 6
67495: PUSH
67496: LD_EXP 64
67500: PUSH
67501: LD_VAR 0 2
67505: ARRAY
67506: PPUSH
67507: LD_INT 2
67509: PUSH
67510: LD_INT 30
67512: PUSH
67513: LD_INT 0
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 30
67522: PUSH
67523: LD_INT 1
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: LIST
67534: PPUSH
67535: CALL_OW 72
67539: ST_TO_ADDR
// if not fac then
67540: LD_VAR 0 6
67544: NOT
67545: IFFALSE 67549
// continue ;
67547: GO 67397
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
67549: LD_ADDR_VAR 0 7
67553: PUSH
67554: LD_EXP 88
67558: PUSH
67559: LD_VAR 0 2
67563: ARRAY
67564: PPUSH
67565: LD_INT 22
67567: PUSH
67568: LD_VAR 0 5
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: LD_INT 21
67579: PUSH
67580: LD_INT 2
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PUSH
67587: LD_INT 3
67589: PUSH
67590: LD_INT 24
67592: PUSH
67593: LD_INT 1000
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: LIST
67608: PPUSH
67609: CALL_OW 70
67613: ST_TO_ADDR
// for j in fac do
67614: LD_ADDR_VAR 0 3
67618: PUSH
67619: LD_VAR 0 6
67623: PUSH
67624: FOR_IN
67625: IFFALSE 67706
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
67627: LD_ADDR_VAR 0 7
67631: PUSH
67632: LD_VAR 0 7
67636: PUSH
67637: LD_INT 22
67639: PUSH
67640: LD_VAR 0 5
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 91
67651: PUSH
67652: LD_VAR 0 3
67656: PUSH
67657: LD_INT 15
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 21
67667: PUSH
67668: LD_INT 2
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 3
67677: PUSH
67678: LD_INT 24
67680: PUSH
67681: LD_INT 1000
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: PPUSH
67698: CALL_OW 69
67702: UNION
67703: ST_TO_ADDR
67704: GO 67624
67706: POP
67707: POP
// if not vehs then
67708: LD_VAR 0 7
67712: NOT
67713: IFFALSE 67739
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
67715: LD_ADDR_EXP 76
67719: PUSH
67720: LD_EXP 76
67724: PPUSH
67725: LD_VAR 0 2
67729: PPUSH
67730: EMPTY
67731: PPUSH
67732: CALL_OW 1
67736: ST_TO_ADDR
// continue ;
67737: GO 67397
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
67739: LD_ADDR_VAR 0 8
67743: PUSH
67744: LD_EXP 64
67748: PUSH
67749: LD_VAR 0 2
67753: ARRAY
67754: PPUSH
67755: LD_INT 30
67757: PUSH
67758: LD_INT 3
67760: PUSH
67761: EMPTY
67762: LIST
67763: LIST
67764: PPUSH
67765: CALL_OW 72
67769: ST_TO_ADDR
// if tmp then
67770: LD_VAR 0 8
67774: IFFALSE 67877
// begin for j in tmp do
67776: LD_ADDR_VAR 0 3
67780: PUSH
67781: LD_VAR 0 8
67785: PUSH
67786: FOR_IN
67787: IFFALSE 67875
// for k in UnitsInside ( j ) do
67789: LD_ADDR_VAR 0 4
67793: PUSH
67794: LD_VAR 0 3
67798: PPUSH
67799: CALL_OW 313
67803: PUSH
67804: FOR_IN
67805: IFFALSE 67871
// if k then
67807: LD_VAR 0 4
67811: IFFALSE 67869
// if not k in mc_repair_vehicle [ i ] then
67813: LD_VAR 0 4
67817: PUSH
67818: LD_EXP 76
67822: PUSH
67823: LD_VAR 0 2
67827: ARRAY
67828: IN
67829: NOT
67830: IFFALSE 67869
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
67832: LD_ADDR_EXP 76
67836: PUSH
67837: LD_EXP 76
67841: PPUSH
67842: LD_VAR 0 2
67846: PPUSH
67847: LD_EXP 76
67851: PUSH
67852: LD_VAR 0 2
67856: ARRAY
67857: PUSH
67858: LD_VAR 0 4
67862: UNION
67863: PPUSH
67864: CALL_OW 1
67868: ST_TO_ADDR
67869: GO 67804
67871: POP
67872: POP
67873: GO 67786
67875: POP
67876: POP
// end ; if not mc_repair_vehicle [ i ] then
67877: LD_EXP 76
67881: PUSH
67882: LD_VAR 0 2
67886: ARRAY
67887: NOT
67888: IFFALSE 67892
// continue ;
67890: GO 67397
// for j in mc_repair_vehicle [ i ] do
67892: LD_ADDR_VAR 0 3
67896: PUSH
67897: LD_EXP 76
67901: PUSH
67902: LD_VAR 0 2
67906: ARRAY
67907: PUSH
67908: FOR_IN
67909: IFFALSE 68075
// begin if GetClass ( j ) <> 3 then
67911: LD_VAR 0 3
67915: PPUSH
67916: CALL_OW 257
67920: PUSH
67921: LD_INT 3
67923: NONEQUAL
67924: IFFALSE 67965
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
67926: LD_ADDR_EXP 76
67930: PUSH
67931: LD_EXP 76
67935: PPUSH
67936: LD_VAR 0 2
67940: PPUSH
67941: LD_EXP 76
67945: PUSH
67946: LD_VAR 0 2
67950: ARRAY
67951: PUSH
67952: LD_VAR 0 3
67956: DIFF
67957: PPUSH
67958: CALL_OW 1
67962: ST_TO_ADDR
// continue ;
67963: GO 67908
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
67965: LD_VAR 0 3
67969: PPUSH
67970: CALL_OW 311
67974: NOT
67975: PUSH
67976: LD_VAR 0 3
67980: PUSH
67981: LD_EXP 67
67985: PUSH
67986: LD_VAR 0 2
67990: ARRAY
67991: PUSH
67992: LD_INT 1
67994: ARRAY
67995: IN
67996: NOT
67997: AND
67998: PUSH
67999: LD_VAR 0 3
68003: PUSH
68004: LD_EXP 67
68008: PUSH
68009: LD_VAR 0 2
68013: ARRAY
68014: PUSH
68015: LD_INT 2
68017: ARRAY
68018: IN
68019: NOT
68020: AND
68021: IFFALSE 68073
// begin if IsInUnit ( j ) then
68023: LD_VAR 0 3
68027: PPUSH
68028: CALL_OW 310
68032: IFFALSE 68043
// ComExitBuilding ( j ) ;
68034: LD_VAR 0 3
68038: PPUSH
68039: CALL_OW 122
// if not HasTask ( j ) then
68043: LD_VAR 0 3
68047: PPUSH
68048: CALL_OW 314
68052: NOT
68053: IFFALSE 68073
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
68055: LD_VAR 0 3
68059: PPUSH
68060: LD_VAR 0 7
68064: PUSH
68065: LD_INT 1
68067: ARRAY
68068: PPUSH
68069: CALL_OW 189
// end ; end ;
68073: GO 67908
68075: POP
68076: POP
// end ;
68077: GO 67397
68079: POP
68080: POP
// end ;
68081: LD_VAR 0 1
68085: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
68086: LD_INT 0
68088: PPUSH
68089: PPUSH
68090: PPUSH
68091: PPUSH
68092: PPUSH
68093: PPUSH
68094: PPUSH
68095: PPUSH
68096: PPUSH
68097: PPUSH
68098: PPUSH
// if not mc_bases then
68099: LD_EXP 64
68103: NOT
68104: IFFALSE 68108
// exit ;
68106: GO 68910
// for i = 1 to mc_bases do
68108: LD_ADDR_VAR 0 2
68112: PUSH
68113: DOUBLE
68114: LD_INT 1
68116: DEC
68117: ST_TO_ADDR
68118: LD_EXP 64
68122: PUSH
68123: FOR_TO
68124: IFFALSE 68908
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
68126: LD_EXP 92
68130: PUSH
68131: LD_VAR 0 2
68135: ARRAY
68136: NOT
68137: PUSH
68138: LD_EXP 67
68142: PUSH
68143: LD_VAR 0 2
68147: ARRAY
68148: PUSH
68149: LD_INT 1
68151: ARRAY
68152: OR
68153: PUSH
68154: LD_EXP 67
68158: PUSH
68159: LD_VAR 0 2
68163: ARRAY
68164: PUSH
68165: LD_INT 2
68167: ARRAY
68168: OR
68169: PUSH
68170: LD_EXP 90
68174: PUSH
68175: LD_VAR 0 2
68179: ARRAY
68180: PPUSH
68181: LD_INT 1
68183: PPUSH
68184: CALL_OW 325
68188: NOT
68189: OR
68190: PUSH
68191: LD_EXP 87
68195: PUSH
68196: LD_VAR 0 2
68200: ARRAY
68201: OR
68202: IFFALSE 68206
// continue ;
68204: GO 68123
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
68206: LD_ADDR_VAR 0 8
68210: PUSH
68211: LD_EXP 64
68215: PUSH
68216: LD_VAR 0 2
68220: ARRAY
68221: PPUSH
68222: LD_INT 25
68224: PUSH
68225: LD_INT 4
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 50
68234: PUSH
68235: EMPTY
68236: LIST
68237: PUSH
68238: LD_INT 3
68240: PUSH
68241: LD_INT 60
68243: PUSH
68244: EMPTY
68245: LIST
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: LIST
68255: PPUSH
68256: CALL_OW 72
68260: PUSH
68261: LD_EXP 68
68265: PUSH
68266: LD_VAR 0 2
68270: ARRAY
68271: DIFF
68272: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
68273: LD_ADDR_VAR 0 9
68277: PUSH
68278: LD_EXP 64
68282: PUSH
68283: LD_VAR 0 2
68287: ARRAY
68288: PPUSH
68289: LD_INT 2
68291: PUSH
68292: LD_INT 30
68294: PUSH
68295: LD_INT 0
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 30
68304: PUSH
68305: LD_INT 1
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: LIST
68316: PPUSH
68317: CALL_OW 72
68321: ST_TO_ADDR
// if not tmp or not dep then
68322: LD_VAR 0 8
68326: NOT
68327: PUSH
68328: LD_VAR 0 9
68332: NOT
68333: OR
68334: IFFALSE 68338
// continue ;
68336: GO 68123
// side := GetSide ( tmp [ 1 ] ) ;
68338: LD_ADDR_VAR 0 11
68342: PUSH
68343: LD_VAR 0 8
68347: PUSH
68348: LD_INT 1
68350: ARRAY
68351: PPUSH
68352: CALL_OW 255
68356: ST_TO_ADDR
// dep := dep [ 1 ] ;
68357: LD_ADDR_VAR 0 9
68361: PUSH
68362: LD_VAR 0 9
68366: PUSH
68367: LD_INT 1
68369: ARRAY
68370: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
68371: LD_ADDR_VAR 0 7
68375: PUSH
68376: LD_EXP 92
68380: PUSH
68381: LD_VAR 0 2
68385: ARRAY
68386: PPUSH
68387: LD_INT 22
68389: PUSH
68390: LD_INT 0
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 25
68399: PUSH
68400: LD_INT 12
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PPUSH
68411: CALL_OW 70
68415: PUSH
68416: LD_INT 22
68418: PUSH
68419: LD_INT 0
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: PUSH
68426: LD_INT 25
68428: PUSH
68429: LD_INT 12
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 91
68438: PUSH
68439: LD_VAR 0 9
68443: PUSH
68444: LD_INT 20
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: LIST
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: LIST
68456: PPUSH
68457: CALL_OW 69
68461: UNION
68462: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
68463: LD_ADDR_VAR 0 10
68467: PUSH
68468: LD_EXP 92
68472: PUSH
68473: LD_VAR 0 2
68477: ARRAY
68478: PPUSH
68479: LD_INT 81
68481: PUSH
68482: LD_VAR 0 11
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PPUSH
68491: CALL_OW 70
68495: ST_TO_ADDR
// if not apes or danger_at_area then
68496: LD_VAR 0 7
68500: NOT
68501: PUSH
68502: LD_VAR 0 10
68506: OR
68507: IFFALSE 68557
// begin if mc_taming [ i ] then
68509: LD_EXP 95
68513: PUSH
68514: LD_VAR 0 2
68518: ARRAY
68519: IFFALSE 68555
// begin MC_Reset ( i , 121 ) ;
68521: LD_VAR 0 2
68525: PPUSH
68526: LD_INT 121
68528: PPUSH
68529: CALL 54008 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
68533: LD_ADDR_EXP 95
68537: PUSH
68538: LD_EXP 95
68542: PPUSH
68543: LD_VAR 0 2
68547: PPUSH
68548: EMPTY
68549: PPUSH
68550: CALL_OW 1
68554: ST_TO_ADDR
// end ; continue ;
68555: GO 68123
// end ; for j in tmp do
68557: LD_ADDR_VAR 0 3
68561: PUSH
68562: LD_VAR 0 8
68566: PUSH
68567: FOR_IN
68568: IFFALSE 68904
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
68570: LD_VAR 0 3
68574: PUSH
68575: LD_EXP 95
68579: PUSH
68580: LD_VAR 0 2
68584: ARRAY
68585: IN
68586: NOT
68587: PUSH
68588: LD_EXP 95
68592: PUSH
68593: LD_VAR 0 2
68597: ARRAY
68598: PUSH
68599: LD_INT 3
68601: LESS
68602: AND
68603: IFFALSE 68661
// begin SetTag ( j , 121 ) ;
68605: LD_VAR 0 3
68609: PPUSH
68610: LD_INT 121
68612: PPUSH
68613: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
68617: LD_ADDR_EXP 95
68621: PUSH
68622: LD_EXP 95
68626: PPUSH
68627: LD_VAR 0 2
68631: PUSH
68632: LD_EXP 95
68636: PUSH
68637: LD_VAR 0 2
68641: ARRAY
68642: PUSH
68643: LD_INT 1
68645: PLUS
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PPUSH
68651: LD_VAR 0 3
68655: PPUSH
68656: CALL 18412 0 3
68660: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
68661: LD_VAR 0 3
68665: PUSH
68666: LD_EXP 95
68670: PUSH
68671: LD_VAR 0 2
68675: ARRAY
68676: IN
68677: IFFALSE 68902
// begin if GetClass ( j ) <> 4 then
68679: LD_VAR 0 3
68683: PPUSH
68684: CALL_OW 257
68688: PUSH
68689: LD_INT 4
68691: NONEQUAL
68692: IFFALSE 68745
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
68694: LD_ADDR_EXP 95
68698: PUSH
68699: LD_EXP 95
68703: PPUSH
68704: LD_VAR 0 2
68708: PPUSH
68709: LD_EXP 95
68713: PUSH
68714: LD_VAR 0 2
68718: ARRAY
68719: PUSH
68720: LD_VAR 0 3
68724: DIFF
68725: PPUSH
68726: CALL_OW 1
68730: ST_TO_ADDR
// SetTag ( j , 0 ) ;
68731: LD_VAR 0 3
68735: PPUSH
68736: LD_INT 0
68738: PPUSH
68739: CALL_OW 109
// continue ;
68743: GO 68567
// end ; if IsInUnit ( j ) then
68745: LD_VAR 0 3
68749: PPUSH
68750: CALL_OW 310
68754: IFFALSE 68765
// ComExitBuilding ( j ) ;
68756: LD_VAR 0 3
68760: PPUSH
68761: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
68765: LD_ADDR_VAR 0 6
68769: PUSH
68770: LD_VAR 0 7
68774: PPUSH
68775: LD_VAR 0 3
68779: PPUSH
68780: CALL_OW 74
68784: ST_TO_ADDR
// if not ape then
68785: LD_VAR 0 6
68789: NOT
68790: IFFALSE 68794
// break ;
68792: GO 68904
// x := GetX ( ape ) ;
68794: LD_ADDR_VAR 0 4
68798: PUSH
68799: LD_VAR 0 6
68803: PPUSH
68804: CALL_OW 250
68808: ST_TO_ADDR
// y := GetY ( ape ) ;
68809: LD_ADDR_VAR 0 5
68813: PUSH
68814: LD_VAR 0 6
68818: PPUSH
68819: CALL_OW 251
68823: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
68824: LD_VAR 0 4
68828: PPUSH
68829: LD_VAR 0 5
68833: PPUSH
68834: CALL_OW 488
68838: NOT
68839: PUSH
68840: LD_VAR 0 11
68844: PPUSH
68845: LD_VAR 0 4
68849: PPUSH
68850: LD_VAR 0 5
68854: PPUSH
68855: LD_INT 20
68857: PPUSH
68858: CALL 19308 0 4
68862: PUSH
68863: LD_INT 4
68865: ARRAY
68866: OR
68867: IFFALSE 68871
// break ;
68869: GO 68904
// if not HasTask ( j ) then
68871: LD_VAR 0 3
68875: PPUSH
68876: CALL_OW 314
68880: NOT
68881: IFFALSE 68902
// ComTameXY ( j , x , y ) ;
68883: LD_VAR 0 3
68887: PPUSH
68888: LD_VAR 0 4
68892: PPUSH
68893: LD_VAR 0 5
68897: PPUSH
68898: CALL_OW 131
// end ; end ;
68902: GO 68567
68904: POP
68905: POP
// end ;
68906: GO 68123
68908: POP
68909: POP
// end ;
68910: LD_VAR 0 1
68914: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
68915: LD_INT 0
68917: PPUSH
68918: PPUSH
68919: PPUSH
68920: PPUSH
68921: PPUSH
68922: PPUSH
68923: PPUSH
68924: PPUSH
// if not mc_bases then
68925: LD_EXP 64
68929: NOT
68930: IFFALSE 68934
// exit ;
68932: GO 69560
// for i = 1 to mc_bases do
68934: LD_ADDR_VAR 0 2
68938: PUSH
68939: DOUBLE
68940: LD_INT 1
68942: DEC
68943: ST_TO_ADDR
68944: LD_EXP 64
68948: PUSH
68949: FOR_TO
68950: IFFALSE 69558
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
68952: LD_EXP 93
68956: PUSH
68957: LD_VAR 0 2
68961: ARRAY
68962: NOT
68963: PUSH
68964: LD_EXP 93
68968: PUSH
68969: LD_VAR 0 2
68973: ARRAY
68974: PPUSH
68975: LD_INT 25
68977: PUSH
68978: LD_INT 12
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PPUSH
68985: CALL_OW 72
68989: NOT
68990: OR
68991: IFFALSE 68995
// continue ;
68993: GO 68949
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
68995: LD_ADDR_VAR 0 5
68999: PUSH
69000: LD_EXP 93
69004: PUSH
69005: LD_VAR 0 2
69009: ARRAY
69010: PUSH
69011: LD_INT 1
69013: ARRAY
69014: PPUSH
69015: CALL_OW 255
69019: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
69020: LD_VAR 0 5
69024: PPUSH
69025: LD_INT 2
69027: PPUSH
69028: CALL_OW 325
69032: IFFALSE 69285
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
69034: LD_ADDR_VAR 0 4
69038: PUSH
69039: LD_EXP 93
69043: PUSH
69044: LD_VAR 0 2
69048: ARRAY
69049: PPUSH
69050: LD_INT 25
69052: PUSH
69053: LD_INT 16
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PPUSH
69060: CALL_OW 72
69064: ST_TO_ADDR
// if tmp < 6 then
69065: LD_VAR 0 4
69069: PUSH
69070: LD_INT 6
69072: LESS
69073: IFFALSE 69285
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
69075: LD_ADDR_VAR 0 6
69079: PUSH
69080: LD_EXP 64
69084: PUSH
69085: LD_VAR 0 2
69089: ARRAY
69090: PPUSH
69091: LD_INT 2
69093: PUSH
69094: LD_INT 30
69096: PUSH
69097: LD_INT 0
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 30
69106: PUSH
69107: LD_INT 1
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: LIST
69118: PPUSH
69119: CALL_OW 72
69123: ST_TO_ADDR
// if depot then
69124: LD_VAR 0 6
69128: IFFALSE 69285
// begin selected := 0 ;
69130: LD_ADDR_VAR 0 7
69134: PUSH
69135: LD_INT 0
69137: ST_TO_ADDR
// for j in depot do
69138: LD_ADDR_VAR 0 3
69142: PUSH
69143: LD_VAR 0 6
69147: PUSH
69148: FOR_IN
69149: IFFALSE 69180
// begin if UnitsInside ( j ) < 6 then
69151: LD_VAR 0 3
69155: PPUSH
69156: CALL_OW 313
69160: PUSH
69161: LD_INT 6
69163: LESS
69164: IFFALSE 69178
// begin selected := j ;
69166: LD_ADDR_VAR 0 7
69170: PUSH
69171: LD_VAR 0 3
69175: ST_TO_ADDR
// break ;
69176: GO 69180
// end ; end ;
69178: GO 69148
69180: POP
69181: POP
// if selected then
69182: LD_VAR 0 7
69186: IFFALSE 69285
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
69188: LD_ADDR_VAR 0 3
69192: PUSH
69193: LD_EXP 93
69197: PUSH
69198: LD_VAR 0 2
69202: ARRAY
69203: PPUSH
69204: LD_INT 25
69206: PUSH
69207: LD_INT 12
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PPUSH
69214: CALL_OW 72
69218: PUSH
69219: FOR_IN
69220: IFFALSE 69283
// if not HasTask ( j ) then
69222: LD_VAR 0 3
69226: PPUSH
69227: CALL_OW 314
69231: NOT
69232: IFFALSE 69281
// begin if not IsInUnit ( j ) then
69234: LD_VAR 0 3
69238: PPUSH
69239: CALL_OW 310
69243: NOT
69244: IFFALSE 69260
// ComEnterUnit ( j , selected ) ;
69246: LD_VAR 0 3
69250: PPUSH
69251: LD_VAR 0 7
69255: PPUSH
69256: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
69260: LD_VAR 0 3
69264: PPUSH
69265: LD_INT 16
69267: PPUSH
69268: CALL_OW 183
// AddComExitBuilding ( j ) ;
69272: LD_VAR 0 3
69276: PPUSH
69277: CALL_OW 182
// end ;
69281: GO 69219
69283: POP
69284: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
69285: LD_VAR 0 5
69289: PPUSH
69290: LD_INT 11
69292: PPUSH
69293: CALL_OW 325
69297: IFFALSE 69556
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
69299: LD_ADDR_VAR 0 4
69303: PUSH
69304: LD_EXP 93
69308: PUSH
69309: LD_VAR 0 2
69313: ARRAY
69314: PPUSH
69315: LD_INT 25
69317: PUSH
69318: LD_INT 16
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PPUSH
69325: CALL_OW 72
69329: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
69330: LD_VAR 0 4
69334: PUSH
69335: LD_INT 6
69337: GREATEREQUAL
69338: PUSH
69339: LD_VAR 0 5
69343: PPUSH
69344: LD_INT 2
69346: PPUSH
69347: CALL_OW 325
69351: NOT
69352: OR
69353: IFFALSE 69556
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
69355: LD_ADDR_VAR 0 8
69359: PUSH
69360: LD_EXP 64
69364: PUSH
69365: LD_VAR 0 2
69369: ARRAY
69370: PPUSH
69371: LD_INT 2
69373: PUSH
69374: LD_INT 30
69376: PUSH
69377: LD_INT 4
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: LD_INT 30
69386: PUSH
69387: LD_INT 5
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: LIST
69398: PPUSH
69399: CALL_OW 72
69403: ST_TO_ADDR
// if barracks then
69404: LD_VAR 0 8
69408: IFFALSE 69556
// begin selected := 0 ;
69410: LD_ADDR_VAR 0 7
69414: PUSH
69415: LD_INT 0
69417: ST_TO_ADDR
// for j in barracks do
69418: LD_ADDR_VAR 0 3
69422: PUSH
69423: LD_VAR 0 8
69427: PUSH
69428: FOR_IN
69429: IFFALSE 69460
// begin if UnitsInside ( j ) < 6 then
69431: LD_VAR 0 3
69435: PPUSH
69436: CALL_OW 313
69440: PUSH
69441: LD_INT 6
69443: LESS
69444: IFFALSE 69458
// begin selected := j ;
69446: LD_ADDR_VAR 0 7
69450: PUSH
69451: LD_VAR 0 3
69455: ST_TO_ADDR
// break ;
69456: GO 69460
// end ; end ;
69458: GO 69428
69460: POP
69461: POP
// if selected then
69462: LD_VAR 0 7
69466: IFFALSE 69556
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
69468: LD_ADDR_VAR 0 3
69472: PUSH
69473: LD_EXP 93
69477: PUSH
69478: LD_VAR 0 2
69482: ARRAY
69483: PPUSH
69484: LD_INT 25
69486: PUSH
69487: LD_INT 12
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: PPUSH
69494: CALL_OW 72
69498: PUSH
69499: FOR_IN
69500: IFFALSE 69554
// if not IsInUnit ( j ) and not HasTask ( j ) then
69502: LD_VAR 0 3
69506: PPUSH
69507: CALL_OW 310
69511: NOT
69512: PUSH
69513: LD_VAR 0 3
69517: PPUSH
69518: CALL_OW 314
69522: NOT
69523: AND
69524: IFFALSE 69552
// begin ComEnterUnit ( j , selected ) ;
69526: LD_VAR 0 3
69530: PPUSH
69531: LD_VAR 0 7
69535: PPUSH
69536: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
69540: LD_VAR 0 3
69544: PPUSH
69545: LD_INT 15
69547: PPUSH
69548: CALL_OW 183
// end ;
69552: GO 69499
69554: POP
69555: POP
// end ; end ; end ; end ; end ;
69556: GO 68949
69558: POP
69559: POP
// end ;
69560: LD_VAR 0 1
69564: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
69565: LD_INT 0
69567: PPUSH
69568: PPUSH
69569: PPUSH
69570: PPUSH
// if not mc_bases then
69571: LD_EXP 64
69575: NOT
69576: IFFALSE 69580
// exit ;
69578: GO 69758
// for i = 1 to mc_bases do
69580: LD_ADDR_VAR 0 2
69584: PUSH
69585: DOUBLE
69586: LD_INT 1
69588: DEC
69589: ST_TO_ADDR
69590: LD_EXP 64
69594: PUSH
69595: FOR_TO
69596: IFFALSE 69756
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
69598: LD_ADDR_VAR 0 4
69602: PUSH
69603: LD_EXP 64
69607: PUSH
69608: LD_VAR 0 2
69612: ARRAY
69613: PPUSH
69614: LD_INT 25
69616: PUSH
69617: LD_INT 9
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: PPUSH
69624: CALL_OW 72
69628: ST_TO_ADDR
// if not tmp then
69629: LD_VAR 0 4
69633: NOT
69634: IFFALSE 69638
// continue ;
69636: GO 69595
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
69638: LD_EXP 90
69642: PUSH
69643: LD_VAR 0 2
69647: ARRAY
69648: PPUSH
69649: LD_INT 29
69651: PPUSH
69652: CALL_OW 325
69656: NOT
69657: PUSH
69658: LD_EXP 90
69662: PUSH
69663: LD_VAR 0 2
69667: ARRAY
69668: PPUSH
69669: LD_INT 28
69671: PPUSH
69672: CALL_OW 325
69676: NOT
69677: AND
69678: IFFALSE 69682
// continue ;
69680: GO 69595
// for j in tmp do
69682: LD_ADDR_VAR 0 3
69686: PUSH
69687: LD_VAR 0 4
69691: PUSH
69692: FOR_IN
69693: IFFALSE 69752
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
69695: LD_VAR 0 3
69699: PUSH
69700: LD_EXP 67
69704: PUSH
69705: LD_VAR 0 2
69709: ARRAY
69710: PUSH
69711: LD_INT 1
69713: ARRAY
69714: IN
69715: NOT
69716: PUSH
69717: LD_VAR 0 3
69721: PUSH
69722: LD_EXP 67
69726: PUSH
69727: LD_VAR 0 2
69731: ARRAY
69732: PUSH
69733: LD_INT 2
69735: ARRAY
69736: IN
69737: NOT
69738: AND
69739: IFFALSE 69750
// ComSpaceTimeShoot ( j ) ;
69741: LD_VAR 0 3
69745: PPUSH
69746: CALL 14409 0 1
69750: GO 69692
69752: POP
69753: POP
// end ;
69754: GO 69595
69756: POP
69757: POP
// end ;
69758: LD_VAR 0 1
69762: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
69763: LD_INT 0
69765: PPUSH
69766: PPUSH
69767: PPUSH
69768: PPUSH
69769: PPUSH
69770: PPUSH
69771: PPUSH
69772: PPUSH
69773: PPUSH
// if not mc_bases then
69774: LD_EXP 64
69778: NOT
69779: IFFALSE 69783
// exit ;
69781: GO 70405
// for i = 1 to mc_bases do
69783: LD_ADDR_VAR 0 2
69787: PUSH
69788: DOUBLE
69789: LD_INT 1
69791: DEC
69792: ST_TO_ADDR
69793: LD_EXP 64
69797: PUSH
69798: FOR_TO
69799: IFFALSE 70403
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
69801: LD_EXP 99
69805: PUSH
69806: LD_VAR 0 2
69810: ARRAY
69811: NOT
69812: PUSH
69813: LD_INT 38
69815: PPUSH
69816: LD_EXP 90
69820: PUSH
69821: LD_VAR 0 2
69825: ARRAY
69826: PPUSH
69827: CALL_OW 321
69831: PUSH
69832: LD_INT 2
69834: NONEQUAL
69835: OR
69836: IFFALSE 69840
// continue ;
69838: GO 69798
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
69840: LD_ADDR_VAR 0 8
69844: PUSH
69845: LD_EXP 64
69849: PUSH
69850: LD_VAR 0 2
69854: ARRAY
69855: PPUSH
69856: LD_INT 30
69858: PUSH
69859: LD_INT 34
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: PPUSH
69866: CALL_OW 72
69870: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
69871: LD_ADDR_VAR 0 9
69875: PUSH
69876: LD_EXP 64
69880: PUSH
69881: LD_VAR 0 2
69885: ARRAY
69886: PPUSH
69887: LD_INT 25
69889: PUSH
69890: LD_INT 4
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PPUSH
69897: CALL_OW 72
69901: PPUSH
69902: LD_INT 0
69904: PPUSH
69905: CALL 46973 0 2
69909: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
69910: LD_VAR 0 9
69914: NOT
69915: PUSH
69916: LD_VAR 0 8
69920: NOT
69921: OR
69922: PUSH
69923: LD_EXP 64
69927: PUSH
69928: LD_VAR 0 2
69932: ARRAY
69933: PPUSH
69934: LD_INT 124
69936: PPUSH
69937: CALL 46973 0 2
69941: OR
69942: IFFALSE 69946
// continue ;
69944: GO 69798
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
69946: LD_EXP 100
69950: PUSH
69951: LD_VAR 0 2
69955: ARRAY
69956: PUSH
69957: LD_EXP 99
69961: PUSH
69962: LD_VAR 0 2
69966: ARRAY
69967: LESS
69968: PUSH
69969: LD_EXP 100
69973: PUSH
69974: LD_VAR 0 2
69978: ARRAY
69979: PUSH
69980: LD_VAR 0 8
69984: LESS
69985: AND
69986: IFFALSE 70401
// begin tmp := sci [ 1 ] ;
69988: LD_ADDR_VAR 0 7
69992: PUSH
69993: LD_VAR 0 9
69997: PUSH
69998: LD_INT 1
70000: ARRAY
70001: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
70002: LD_VAR 0 7
70006: PPUSH
70007: LD_INT 124
70009: PPUSH
70010: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
70014: LD_ADDR_VAR 0 3
70018: PUSH
70019: DOUBLE
70020: LD_EXP 99
70024: PUSH
70025: LD_VAR 0 2
70029: ARRAY
70030: INC
70031: ST_TO_ADDR
70032: LD_EXP 99
70036: PUSH
70037: LD_VAR 0 2
70041: ARRAY
70042: PUSH
70043: FOR_DOWNTO
70044: IFFALSE 70387
// begin if IsInUnit ( tmp ) then
70046: LD_VAR 0 7
70050: PPUSH
70051: CALL_OW 310
70055: IFFALSE 70066
// ComExitBuilding ( tmp ) ;
70057: LD_VAR 0 7
70061: PPUSH
70062: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
70066: LD_INT 35
70068: PPUSH
70069: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
70073: LD_VAR 0 7
70077: PPUSH
70078: CALL_OW 310
70082: NOT
70083: PUSH
70084: LD_VAR 0 7
70088: PPUSH
70089: CALL_OW 314
70093: NOT
70094: AND
70095: IFFALSE 70066
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
70097: LD_ADDR_VAR 0 6
70101: PUSH
70102: LD_VAR 0 7
70106: PPUSH
70107: CALL_OW 250
70111: PUSH
70112: LD_VAR 0 7
70116: PPUSH
70117: CALL_OW 251
70121: PUSH
70122: EMPTY
70123: LIST
70124: LIST
70125: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
70126: LD_INT 35
70128: PPUSH
70129: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
70133: LD_ADDR_VAR 0 4
70137: PUSH
70138: LD_EXP 99
70142: PUSH
70143: LD_VAR 0 2
70147: ARRAY
70148: PUSH
70149: LD_VAR 0 3
70153: ARRAY
70154: PUSH
70155: LD_INT 1
70157: ARRAY
70158: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
70159: LD_ADDR_VAR 0 5
70163: PUSH
70164: LD_EXP 99
70168: PUSH
70169: LD_VAR 0 2
70173: ARRAY
70174: PUSH
70175: LD_VAR 0 3
70179: ARRAY
70180: PUSH
70181: LD_INT 2
70183: ARRAY
70184: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
70185: LD_VAR 0 7
70189: PPUSH
70190: LD_INT 10
70192: PPUSH
70193: CALL 21005 0 2
70197: PUSH
70198: LD_INT 4
70200: ARRAY
70201: IFFALSE 70239
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
70203: LD_VAR 0 7
70207: PPUSH
70208: LD_VAR 0 6
70212: PUSH
70213: LD_INT 1
70215: ARRAY
70216: PPUSH
70217: LD_VAR 0 6
70221: PUSH
70222: LD_INT 2
70224: ARRAY
70225: PPUSH
70226: CALL_OW 111
// wait ( 0 0$10 ) ;
70230: LD_INT 350
70232: PPUSH
70233: CALL_OW 67
// end else
70237: GO 70265
// begin ComMoveXY ( tmp , x , y ) ;
70239: LD_VAR 0 7
70243: PPUSH
70244: LD_VAR 0 4
70248: PPUSH
70249: LD_VAR 0 5
70253: PPUSH
70254: CALL_OW 111
// wait ( 0 0$3 ) ;
70258: LD_INT 105
70260: PPUSH
70261: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
70265: LD_VAR 0 7
70269: PPUSH
70270: LD_VAR 0 4
70274: PPUSH
70275: LD_VAR 0 5
70279: PPUSH
70280: CALL_OW 307
70284: IFFALSE 70126
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
70286: LD_VAR 0 7
70290: PPUSH
70291: LD_VAR 0 4
70295: PPUSH
70296: LD_VAR 0 5
70300: PPUSH
70301: LD_VAR 0 8
70305: PUSH
70306: LD_VAR 0 3
70310: ARRAY
70311: PPUSH
70312: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
70316: LD_INT 35
70318: PPUSH
70319: CALL_OW 67
// until not HasTask ( tmp ) ;
70323: LD_VAR 0 7
70327: PPUSH
70328: CALL_OW 314
70332: NOT
70333: IFFALSE 70316
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
70335: LD_ADDR_EXP 100
70339: PUSH
70340: LD_EXP 100
70344: PPUSH
70345: LD_VAR 0 2
70349: PUSH
70350: LD_EXP 100
70354: PUSH
70355: LD_VAR 0 2
70359: ARRAY
70360: PUSH
70361: LD_INT 1
70363: PLUS
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PPUSH
70369: LD_VAR 0 8
70373: PUSH
70374: LD_VAR 0 3
70378: ARRAY
70379: PPUSH
70380: CALL 18412 0 3
70384: ST_TO_ADDR
// end ;
70385: GO 70043
70387: POP
70388: POP
// MC_Reset ( i , 124 ) ;
70389: LD_VAR 0 2
70393: PPUSH
70394: LD_INT 124
70396: PPUSH
70397: CALL 54008 0 2
// end ; end ;
70401: GO 69798
70403: POP
70404: POP
// end ;
70405: LD_VAR 0 1
70409: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
70410: LD_INT 0
70412: PPUSH
70413: PPUSH
70414: PPUSH
// if not mc_bases then
70415: LD_EXP 64
70419: NOT
70420: IFFALSE 70424
// exit ;
70422: GO 71030
// for i = 1 to mc_bases do
70424: LD_ADDR_VAR 0 2
70428: PUSH
70429: DOUBLE
70430: LD_INT 1
70432: DEC
70433: ST_TO_ADDR
70434: LD_EXP 64
70438: PUSH
70439: FOR_TO
70440: IFFALSE 71028
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
70442: LD_ADDR_VAR 0 3
70446: PUSH
70447: LD_EXP 64
70451: PUSH
70452: LD_VAR 0 2
70456: ARRAY
70457: PPUSH
70458: LD_INT 25
70460: PUSH
70461: LD_INT 4
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: PPUSH
70468: CALL_OW 72
70472: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
70473: LD_VAR 0 3
70477: NOT
70478: PUSH
70479: LD_EXP 101
70483: PUSH
70484: LD_VAR 0 2
70488: ARRAY
70489: NOT
70490: OR
70491: PUSH
70492: LD_EXP 64
70496: PUSH
70497: LD_VAR 0 2
70501: ARRAY
70502: PPUSH
70503: LD_INT 2
70505: PUSH
70506: LD_INT 30
70508: PUSH
70509: LD_INT 0
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: PUSH
70516: LD_INT 30
70518: PUSH
70519: LD_INT 1
70521: PUSH
70522: EMPTY
70523: LIST
70524: LIST
70525: PUSH
70526: EMPTY
70527: LIST
70528: LIST
70529: LIST
70530: PPUSH
70531: CALL_OW 72
70535: NOT
70536: OR
70537: IFFALSE 70587
// begin if mc_deposits_finder [ i ] then
70539: LD_EXP 102
70543: PUSH
70544: LD_VAR 0 2
70548: ARRAY
70549: IFFALSE 70585
// begin MC_Reset ( i , 125 ) ;
70551: LD_VAR 0 2
70555: PPUSH
70556: LD_INT 125
70558: PPUSH
70559: CALL 54008 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
70563: LD_ADDR_EXP 102
70567: PUSH
70568: LD_EXP 102
70572: PPUSH
70573: LD_VAR 0 2
70577: PPUSH
70578: EMPTY
70579: PPUSH
70580: CALL_OW 1
70584: ST_TO_ADDR
// end ; continue ;
70585: GO 70439
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
70587: LD_EXP 101
70591: PUSH
70592: LD_VAR 0 2
70596: ARRAY
70597: PUSH
70598: LD_INT 1
70600: ARRAY
70601: PUSH
70602: LD_INT 3
70604: ARRAY
70605: PUSH
70606: LD_INT 1
70608: EQUAL
70609: PUSH
70610: LD_INT 20
70612: PPUSH
70613: LD_EXP 90
70617: PUSH
70618: LD_VAR 0 2
70622: ARRAY
70623: PPUSH
70624: CALL_OW 321
70628: PUSH
70629: LD_INT 2
70631: NONEQUAL
70632: AND
70633: IFFALSE 70683
// begin if mc_deposits_finder [ i ] then
70635: LD_EXP 102
70639: PUSH
70640: LD_VAR 0 2
70644: ARRAY
70645: IFFALSE 70681
// begin MC_Reset ( i , 125 ) ;
70647: LD_VAR 0 2
70651: PPUSH
70652: LD_INT 125
70654: PPUSH
70655: CALL 54008 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
70659: LD_ADDR_EXP 102
70663: PUSH
70664: LD_EXP 102
70668: PPUSH
70669: LD_VAR 0 2
70673: PPUSH
70674: EMPTY
70675: PPUSH
70676: CALL_OW 1
70680: ST_TO_ADDR
// end ; continue ;
70681: GO 70439
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
70683: LD_EXP 101
70687: PUSH
70688: LD_VAR 0 2
70692: ARRAY
70693: PUSH
70694: LD_INT 1
70696: ARRAY
70697: PUSH
70698: LD_INT 1
70700: ARRAY
70701: PPUSH
70702: LD_EXP 101
70706: PUSH
70707: LD_VAR 0 2
70711: ARRAY
70712: PUSH
70713: LD_INT 1
70715: ARRAY
70716: PUSH
70717: LD_INT 2
70719: ARRAY
70720: PPUSH
70721: LD_EXP 90
70725: PUSH
70726: LD_VAR 0 2
70730: ARRAY
70731: PPUSH
70732: CALL_OW 440
70736: IFFALSE 70779
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
70738: LD_ADDR_EXP 101
70742: PUSH
70743: LD_EXP 101
70747: PPUSH
70748: LD_VAR 0 2
70752: PPUSH
70753: LD_EXP 101
70757: PUSH
70758: LD_VAR 0 2
70762: ARRAY
70763: PPUSH
70764: LD_INT 1
70766: PPUSH
70767: CALL_OW 3
70771: PPUSH
70772: CALL_OW 1
70776: ST_TO_ADDR
70777: GO 71026
// begin if not mc_deposits_finder [ i ] then
70779: LD_EXP 102
70783: PUSH
70784: LD_VAR 0 2
70788: ARRAY
70789: NOT
70790: IFFALSE 70842
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
70792: LD_ADDR_EXP 102
70796: PUSH
70797: LD_EXP 102
70801: PPUSH
70802: LD_VAR 0 2
70806: PPUSH
70807: LD_VAR 0 3
70811: PUSH
70812: LD_INT 1
70814: ARRAY
70815: PUSH
70816: EMPTY
70817: LIST
70818: PPUSH
70819: CALL_OW 1
70823: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
70824: LD_VAR 0 3
70828: PUSH
70829: LD_INT 1
70831: ARRAY
70832: PPUSH
70833: LD_INT 125
70835: PPUSH
70836: CALL_OW 109
// end else
70840: GO 71026
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
70842: LD_EXP 102
70846: PUSH
70847: LD_VAR 0 2
70851: ARRAY
70852: PUSH
70853: LD_INT 1
70855: ARRAY
70856: PPUSH
70857: CALL_OW 310
70861: IFFALSE 70884
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
70863: LD_EXP 102
70867: PUSH
70868: LD_VAR 0 2
70872: ARRAY
70873: PUSH
70874: LD_INT 1
70876: ARRAY
70877: PPUSH
70878: CALL_OW 122
70882: GO 71026
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
70884: LD_EXP 102
70888: PUSH
70889: LD_VAR 0 2
70893: ARRAY
70894: PUSH
70895: LD_INT 1
70897: ARRAY
70898: PPUSH
70899: CALL_OW 314
70903: NOT
70904: PUSH
70905: LD_EXP 102
70909: PUSH
70910: LD_VAR 0 2
70914: ARRAY
70915: PUSH
70916: LD_INT 1
70918: ARRAY
70919: PPUSH
70920: LD_EXP 101
70924: PUSH
70925: LD_VAR 0 2
70929: ARRAY
70930: PUSH
70931: LD_INT 1
70933: ARRAY
70934: PUSH
70935: LD_INT 1
70937: ARRAY
70938: PPUSH
70939: LD_EXP 101
70943: PUSH
70944: LD_VAR 0 2
70948: ARRAY
70949: PUSH
70950: LD_INT 1
70952: ARRAY
70953: PUSH
70954: LD_INT 2
70956: ARRAY
70957: PPUSH
70958: CALL_OW 297
70962: PUSH
70963: LD_INT 6
70965: GREATER
70966: AND
70967: IFFALSE 71026
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
70969: LD_EXP 102
70973: PUSH
70974: LD_VAR 0 2
70978: ARRAY
70979: PUSH
70980: LD_INT 1
70982: ARRAY
70983: PPUSH
70984: LD_EXP 101
70988: PUSH
70989: LD_VAR 0 2
70993: ARRAY
70994: PUSH
70995: LD_INT 1
70997: ARRAY
70998: PUSH
70999: LD_INT 1
71001: ARRAY
71002: PPUSH
71003: LD_EXP 101
71007: PUSH
71008: LD_VAR 0 2
71012: ARRAY
71013: PUSH
71014: LD_INT 1
71016: ARRAY
71017: PUSH
71018: LD_INT 2
71020: ARRAY
71021: PPUSH
71022: CALL_OW 111
// end ; end ; end ;
71026: GO 70439
71028: POP
71029: POP
// end ;
71030: LD_VAR 0 1
71034: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
71035: LD_INT 0
71037: PPUSH
71038: PPUSH
71039: PPUSH
71040: PPUSH
71041: PPUSH
71042: PPUSH
71043: PPUSH
71044: PPUSH
71045: PPUSH
71046: PPUSH
71047: PPUSH
// if not mc_bases then
71048: LD_EXP 64
71052: NOT
71053: IFFALSE 71057
// exit ;
71055: GO 71997
// for i = 1 to mc_bases do
71057: LD_ADDR_VAR 0 2
71061: PUSH
71062: DOUBLE
71063: LD_INT 1
71065: DEC
71066: ST_TO_ADDR
71067: LD_EXP 64
71071: PUSH
71072: FOR_TO
71073: IFFALSE 71995
// begin if not mc_bases [ i ] or mc_scan [ i ] then
71075: LD_EXP 64
71079: PUSH
71080: LD_VAR 0 2
71084: ARRAY
71085: NOT
71086: PUSH
71087: LD_EXP 87
71091: PUSH
71092: LD_VAR 0 2
71096: ARRAY
71097: OR
71098: IFFALSE 71102
// continue ;
71100: GO 71072
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
71102: LD_ADDR_VAR 0 7
71106: PUSH
71107: LD_EXP 64
71111: PUSH
71112: LD_VAR 0 2
71116: ARRAY
71117: PUSH
71118: LD_INT 1
71120: ARRAY
71121: PPUSH
71122: CALL_OW 248
71126: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
71127: LD_VAR 0 7
71131: PUSH
71132: LD_INT 3
71134: EQUAL
71135: PUSH
71136: LD_EXP 83
71140: PUSH
71141: LD_VAR 0 2
71145: ARRAY
71146: PUSH
71147: LD_EXP 86
71151: PUSH
71152: LD_VAR 0 2
71156: ARRAY
71157: UNION
71158: PPUSH
71159: LD_INT 33
71161: PUSH
71162: LD_INT 2
71164: PUSH
71165: EMPTY
71166: LIST
71167: LIST
71168: PPUSH
71169: CALL_OW 72
71173: NOT
71174: OR
71175: IFFALSE 71179
// continue ;
71177: GO 71072
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
71179: LD_ADDR_VAR 0 9
71183: PUSH
71184: LD_EXP 64
71188: PUSH
71189: LD_VAR 0 2
71193: ARRAY
71194: PPUSH
71195: LD_INT 30
71197: PUSH
71198: LD_INT 36
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: PPUSH
71205: CALL_OW 72
71209: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
71210: LD_ADDR_VAR 0 10
71214: PUSH
71215: LD_EXP 83
71219: PUSH
71220: LD_VAR 0 2
71224: ARRAY
71225: PPUSH
71226: LD_INT 34
71228: PUSH
71229: LD_INT 31
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PPUSH
71236: CALL_OW 72
71240: ST_TO_ADDR
// if not cts and not mcts then
71241: LD_VAR 0 9
71245: NOT
71246: PUSH
71247: LD_VAR 0 10
71251: NOT
71252: AND
71253: IFFALSE 71257
// continue ;
71255: GO 71072
// x := cts ;
71257: LD_ADDR_VAR 0 11
71261: PUSH
71262: LD_VAR 0 9
71266: ST_TO_ADDR
// if not x then
71267: LD_VAR 0 11
71271: NOT
71272: IFFALSE 71284
// x := mcts ;
71274: LD_ADDR_VAR 0 11
71278: PUSH
71279: LD_VAR 0 10
71283: ST_TO_ADDR
// if not x then
71284: LD_VAR 0 11
71288: NOT
71289: IFFALSE 71293
// continue ;
71291: GO 71072
// if mc_remote_driver [ i ] then
71293: LD_EXP 104
71297: PUSH
71298: LD_VAR 0 2
71302: ARRAY
71303: IFFALSE 71690
// for j in mc_remote_driver [ i ] do
71305: LD_ADDR_VAR 0 3
71309: PUSH
71310: LD_EXP 104
71314: PUSH
71315: LD_VAR 0 2
71319: ARRAY
71320: PUSH
71321: FOR_IN
71322: IFFALSE 71688
// begin if GetClass ( j ) <> 3 then
71324: LD_VAR 0 3
71328: PPUSH
71329: CALL_OW 257
71333: PUSH
71334: LD_INT 3
71336: NONEQUAL
71337: IFFALSE 71390
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
71339: LD_ADDR_EXP 104
71343: PUSH
71344: LD_EXP 104
71348: PPUSH
71349: LD_VAR 0 2
71353: PPUSH
71354: LD_EXP 104
71358: PUSH
71359: LD_VAR 0 2
71363: ARRAY
71364: PUSH
71365: LD_VAR 0 3
71369: DIFF
71370: PPUSH
71371: CALL_OW 1
71375: ST_TO_ADDR
// SetTag ( j , 0 ) ;
71376: LD_VAR 0 3
71380: PPUSH
71381: LD_INT 0
71383: PPUSH
71384: CALL_OW 109
// continue ;
71388: GO 71321
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
71390: LD_EXP 83
71394: PUSH
71395: LD_VAR 0 2
71399: ARRAY
71400: PPUSH
71401: LD_INT 34
71403: PUSH
71404: LD_INT 31
71406: PUSH
71407: EMPTY
71408: LIST
71409: LIST
71410: PUSH
71411: LD_INT 58
71413: PUSH
71414: EMPTY
71415: LIST
71416: PUSH
71417: EMPTY
71418: LIST
71419: LIST
71420: PPUSH
71421: CALL_OW 72
71425: PUSH
71426: LD_VAR 0 3
71430: PPUSH
71431: CALL 47061 0 1
71435: NOT
71436: AND
71437: IFFALSE 71508
// begin if IsInUnit ( j ) then
71439: LD_VAR 0 3
71443: PPUSH
71444: CALL_OW 310
71448: IFFALSE 71459
// ComExitBuilding ( j ) ;
71450: LD_VAR 0 3
71454: PPUSH
71455: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
71459: LD_VAR 0 3
71463: PPUSH
71464: LD_EXP 83
71468: PUSH
71469: LD_VAR 0 2
71473: ARRAY
71474: PPUSH
71475: LD_INT 34
71477: PUSH
71478: LD_INT 31
71480: PUSH
71481: EMPTY
71482: LIST
71483: LIST
71484: PUSH
71485: LD_INT 58
71487: PUSH
71488: EMPTY
71489: LIST
71490: PUSH
71491: EMPTY
71492: LIST
71493: LIST
71494: PPUSH
71495: CALL_OW 72
71499: PUSH
71500: LD_INT 1
71502: ARRAY
71503: PPUSH
71504: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
71508: LD_VAR 0 3
71512: PPUSH
71513: CALL_OW 310
71517: NOT
71518: PUSH
71519: LD_VAR 0 3
71523: PPUSH
71524: CALL_OW 310
71528: PPUSH
71529: CALL_OW 266
71533: PUSH
71534: LD_INT 36
71536: NONEQUAL
71537: PUSH
71538: LD_VAR 0 3
71542: PPUSH
71543: CALL 47061 0 1
71547: NOT
71548: AND
71549: OR
71550: IFFALSE 71686
// begin if IsInUnit ( j ) then
71552: LD_VAR 0 3
71556: PPUSH
71557: CALL_OW 310
71561: IFFALSE 71572
// ComExitBuilding ( j ) ;
71563: LD_VAR 0 3
71567: PPUSH
71568: CALL_OW 122
// ct := 0 ;
71572: LD_ADDR_VAR 0 8
71576: PUSH
71577: LD_INT 0
71579: ST_TO_ADDR
// for k in x do
71580: LD_ADDR_VAR 0 4
71584: PUSH
71585: LD_VAR 0 11
71589: PUSH
71590: FOR_IN
71591: IFFALSE 71664
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
71593: LD_VAR 0 4
71597: PPUSH
71598: CALL_OW 264
71602: PUSH
71603: LD_INT 31
71605: EQUAL
71606: PUSH
71607: LD_VAR 0 4
71611: PPUSH
71612: CALL_OW 311
71616: NOT
71617: AND
71618: PUSH
71619: LD_VAR 0 4
71623: PPUSH
71624: CALL_OW 266
71628: PUSH
71629: LD_INT 36
71631: EQUAL
71632: PUSH
71633: LD_VAR 0 4
71637: PPUSH
71638: CALL_OW 313
71642: PUSH
71643: LD_INT 3
71645: LESS
71646: AND
71647: OR
71648: IFFALSE 71662
// begin ct := k ;
71650: LD_ADDR_VAR 0 8
71654: PUSH
71655: LD_VAR 0 4
71659: ST_TO_ADDR
// break ;
71660: GO 71664
// end ;
71662: GO 71590
71664: POP
71665: POP
// if ct then
71666: LD_VAR 0 8
71670: IFFALSE 71686
// ComEnterUnit ( j , ct ) ;
71672: LD_VAR 0 3
71676: PPUSH
71677: LD_VAR 0 8
71681: PPUSH
71682: CALL_OW 120
// end ; end ;
71686: GO 71321
71688: POP
71689: POP
// places := 0 ;
71690: LD_ADDR_VAR 0 5
71694: PUSH
71695: LD_INT 0
71697: ST_TO_ADDR
// for j = 1 to x do
71698: LD_ADDR_VAR 0 3
71702: PUSH
71703: DOUBLE
71704: LD_INT 1
71706: DEC
71707: ST_TO_ADDR
71708: LD_VAR 0 11
71712: PUSH
71713: FOR_TO
71714: IFFALSE 71790
// if GetWeapon ( x [ j ] ) = ar_control_tower then
71716: LD_VAR 0 11
71720: PUSH
71721: LD_VAR 0 3
71725: ARRAY
71726: PPUSH
71727: CALL_OW 264
71731: PUSH
71732: LD_INT 31
71734: EQUAL
71735: IFFALSE 71753
// places := places + 1 else
71737: LD_ADDR_VAR 0 5
71741: PUSH
71742: LD_VAR 0 5
71746: PUSH
71747: LD_INT 1
71749: PLUS
71750: ST_TO_ADDR
71751: GO 71788
// if GetBType ( x [ j ] ) = b_control_tower then
71753: LD_VAR 0 11
71757: PUSH
71758: LD_VAR 0 3
71762: ARRAY
71763: PPUSH
71764: CALL_OW 266
71768: PUSH
71769: LD_INT 36
71771: EQUAL
71772: IFFALSE 71788
// places := places + 3 ;
71774: LD_ADDR_VAR 0 5
71778: PUSH
71779: LD_VAR 0 5
71783: PUSH
71784: LD_INT 3
71786: PLUS
71787: ST_TO_ADDR
71788: GO 71713
71790: POP
71791: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
71792: LD_VAR 0 5
71796: PUSH
71797: LD_INT 0
71799: EQUAL
71800: PUSH
71801: LD_VAR 0 5
71805: PUSH
71806: LD_EXP 104
71810: PUSH
71811: LD_VAR 0 2
71815: ARRAY
71816: LESSEQUAL
71817: OR
71818: IFFALSE 71822
// continue ;
71820: GO 71072
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
71822: LD_ADDR_VAR 0 6
71826: PUSH
71827: LD_EXP 64
71831: PUSH
71832: LD_VAR 0 2
71836: ARRAY
71837: PPUSH
71838: LD_INT 25
71840: PUSH
71841: LD_INT 3
71843: PUSH
71844: EMPTY
71845: LIST
71846: LIST
71847: PPUSH
71848: CALL_OW 72
71852: PUSH
71853: LD_EXP 104
71857: PUSH
71858: LD_VAR 0 2
71862: ARRAY
71863: DIFF
71864: PPUSH
71865: LD_INT 3
71867: PPUSH
71868: CALL 47961 0 2
71872: ST_TO_ADDR
// for j in tmp do
71873: LD_ADDR_VAR 0 3
71877: PUSH
71878: LD_VAR 0 6
71882: PUSH
71883: FOR_IN
71884: IFFALSE 71919
// if GetTag ( j ) > 0 then
71886: LD_VAR 0 3
71890: PPUSH
71891: CALL_OW 110
71895: PUSH
71896: LD_INT 0
71898: GREATER
71899: IFFALSE 71917
// tmp := tmp diff j ;
71901: LD_ADDR_VAR 0 6
71905: PUSH
71906: LD_VAR 0 6
71910: PUSH
71911: LD_VAR 0 3
71915: DIFF
71916: ST_TO_ADDR
71917: GO 71883
71919: POP
71920: POP
// if not tmp then
71921: LD_VAR 0 6
71925: NOT
71926: IFFALSE 71930
// continue ;
71928: GO 71072
// if places then
71930: LD_VAR 0 5
71934: IFFALSE 71993
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
71936: LD_ADDR_EXP 104
71940: PUSH
71941: LD_EXP 104
71945: PPUSH
71946: LD_VAR 0 2
71950: PPUSH
71951: LD_EXP 104
71955: PUSH
71956: LD_VAR 0 2
71960: ARRAY
71961: PUSH
71962: LD_VAR 0 6
71966: PUSH
71967: LD_INT 1
71969: ARRAY
71970: UNION
71971: PPUSH
71972: CALL_OW 1
71976: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
71977: LD_VAR 0 6
71981: PUSH
71982: LD_INT 1
71984: ARRAY
71985: PPUSH
71986: LD_INT 126
71988: PPUSH
71989: CALL_OW 109
// end ; end ;
71993: GO 71072
71995: POP
71996: POP
// end ;
71997: LD_VAR 0 1
72001: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
72002: LD_INT 0
72004: PPUSH
72005: PPUSH
72006: PPUSH
72007: PPUSH
72008: PPUSH
72009: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
72010: LD_VAR 0 1
72014: NOT
72015: PUSH
72016: LD_VAR 0 2
72020: NOT
72021: OR
72022: PUSH
72023: LD_VAR 0 3
72027: NOT
72028: OR
72029: PUSH
72030: LD_VAR 0 4
72034: PUSH
72035: LD_INT 1
72037: PUSH
72038: LD_INT 2
72040: PUSH
72041: LD_INT 3
72043: PUSH
72044: LD_INT 4
72046: PUSH
72047: LD_INT 5
72049: PUSH
72050: LD_INT 8
72052: PUSH
72053: LD_INT 9
72055: PUSH
72056: LD_INT 15
72058: PUSH
72059: LD_INT 16
72061: PUSH
72062: EMPTY
72063: LIST
72064: LIST
72065: LIST
72066: LIST
72067: LIST
72068: LIST
72069: LIST
72070: LIST
72071: LIST
72072: IN
72073: NOT
72074: OR
72075: IFFALSE 72079
// exit ;
72077: GO 72979
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
72079: LD_ADDR_VAR 0 2
72083: PUSH
72084: LD_VAR 0 2
72088: PPUSH
72089: LD_INT 21
72091: PUSH
72092: LD_INT 3
72094: PUSH
72095: EMPTY
72096: LIST
72097: LIST
72098: PUSH
72099: LD_INT 24
72101: PUSH
72102: LD_INT 250
72104: PUSH
72105: EMPTY
72106: LIST
72107: LIST
72108: PUSH
72109: EMPTY
72110: LIST
72111: LIST
72112: PPUSH
72113: CALL_OW 72
72117: ST_TO_ADDR
// case class of 1 , 15 :
72118: LD_VAR 0 4
72122: PUSH
72123: LD_INT 1
72125: DOUBLE
72126: EQUAL
72127: IFTRUE 72137
72129: LD_INT 15
72131: DOUBLE
72132: EQUAL
72133: IFTRUE 72137
72135: GO 72222
72137: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
72138: LD_ADDR_VAR 0 8
72142: PUSH
72143: LD_VAR 0 2
72147: PPUSH
72148: LD_INT 2
72150: PUSH
72151: LD_INT 30
72153: PUSH
72154: LD_INT 32
72156: PUSH
72157: EMPTY
72158: LIST
72159: LIST
72160: PUSH
72161: LD_INT 30
72163: PUSH
72164: LD_INT 31
72166: PUSH
72167: EMPTY
72168: LIST
72169: LIST
72170: PUSH
72171: EMPTY
72172: LIST
72173: LIST
72174: LIST
72175: PPUSH
72176: CALL_OW 72
72180: PUSH
72181: LD_VAR 0 2
72185: PPUSH
72186: LD_INT 2
72188: PUSH
72189: LD_INT 30
72191: PUSH
72192: LD_INT 4
72194: PUSH
72195: EMPTY
72196: LIST
72197: LIST
72198: PUSH
72199: LD_INT 30
72201: PUSH
72202: LD_INT 5
72204: PUSH
72205: EMPTY
72206: LIST
72207: LIST
72208: PUSH
72209: EMPTY
72210: LIST
72211: LIST
72212: LIST
72213: PPUSH
72214: CALL_OW 72
72218: ADD
72219: ST_TO_ADDR
72220: GO 72468
72222: LD_INT 2
72224: DOUBLE
72225: EQUAL
72226: IFTRUE 72236
72228: LD_INT 16
72230: DOUBLE
72231: EQUAL
72232: IFTRUE 72236
72234: GO 72282
72236: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
72237: LD_ADDR_VAR 0 8
72241: PUSH
72242: LD_VAR 0 2
72246: PPUSH
72247: LD_INT 2
72249: PUSH
72250: LD_INT 30
72252: PUSH
72253: LD_INT 0
72255: PUSH
72256: EMPTY
72257: LIST
72258: LIST
72259: PUSH
72260: LD_INT 30
72262: PUSH
72263: LD_INT 1
72265: PUSH
72266: EMPTY
72267: LIST
72268: LIST
72269: PUSH
72270: EMPTY
72271: LIST
72272: LIST
72273: LIST
72274: PPUSH
72275: CALL_OW 72
72279: ST_TO_ADDR
72280: GO 72468
72282: LD_INT 3
72284: DOUBLE
72285: EQUAL
72286: IFTRUE 72290
72288: GO 72336
72290: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
72291: LD_ADDR_VAR 0 8
72295: PUSH
72296: LD_VAR 0 2
72300: PPUSH
72301: LD_INT 2
72303: PUSH
72304: LD_INT 30
72306: PUSH
72307: LD_INT 2
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: PUSH
72314: LD_INT 30
72316: PUSH
72317: LD_INT 3
72319: PUSH
72320: EMPTY
72321: LIST
72322: LIST
72323: PUSH
72324: EMPTY
72325: LIST
72326: LIST
72327: LIST
72328: PPUSH
72329: CALL_OW 72
72333: ST_TO_ADDR
72334: GO 72468
72336: LD_INT 4
72338: DOUBLE
72339: EQUAL
72340: IFTRUE 72344
72342: GO 72401
72344: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
72345: LD_ADDR_VAR 0 8
72349: PUSH
72350: LD_VAR 0 2
72354: PPUSH
72355: LD_INT 2
72357: PUSH
72358: LD_INT 30
72360: PUSH
72361: LD_INT 6
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PUSH
72368: LD_INT 30
72370: PUSH
72371: LD_INT 7
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: PUSH
72378: LD_INT 30
72380: PUSH
72381: LD_INT 8
72383: PUSH
72384: EMPTY
72385: LIST
72386: LIST
72387: PUSH
72388: EMPTY
72389: LIST
72390: LIST
72391: LIST
72392: LIST
72393: PPUSH
72394: CALL_OW 72
72398: ST_TO_ADDR
72399: GO 72468
72401: LD_INT 5
72403: DOUBLE
72404: EQUAL
72405: IFTRUE 72421
72407: LD_INT 8
72409: DOUBLE
72410: EQUAL
72411: IFTRUE 72421
72413: LD_INT 9
72415: DOUBLE
72416: EQUAL
72417: IFTRUE 72421
72419: GO 72467
72421: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
72422: LD_ADDR_VAR 0 8
72426: PUSH
72427: LD_VAR 0 2
72431: PPUSH
72432: LD_INT 2
72434: PUSH
72435: LD_INT 30
72437: PUSH
72438: LD_INT 4
72440: PUSH
72441: EMPTY
72442: LIST
72443: LIST
72444: PUSH
72445: LD_INT 30
72447: PUSH
72448: LD_INT 5
72450: PUSH
72451: EMPTY
72452: LIST
72453: LIST
72454: PUSH
72455: EMPTY
72456: LIST
72457: LIST
72458: LIST
72459: PPUSH
72460: CALL_OW 72
72464: ST_TO_ADDR
72465: GO 72468
72467: POP
// if not tmp then
72468: LD_VAR 0 8
72472: NOT
72473: IFFALSE 72477
// exit ;
72475: GO 72979
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
72477: LD_VAR 0 4
72481: PUSH
72482: LD_INT 1
72484: PUSH
72485: LD_INT 15
72487: PUSH
72488: EMPTY
72489: LIST
72490: LIST
72491: IN
72492: PUSH
72493: LD_EXP 73
72497: PUSH
72498: LD_VAR 0 1
72502: ARRAY
72503: AND
72504: IFFALSE 72660
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
72506: LD_ADDR_VAR 0 9
72510: PUSH
72511: LD_EXP 73
72515: PUSH
72516: LD_VAR 0 1
72520: ARRAY
72521: PUSH
72522: LD_INT 1
72524: ARRAY
72525: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
72526: LD_VAR 0 9
72530: PUSH
72531: LD_EXP 74
72535: PUSH
72536: LD_VAR 0 1
72540: ARRAY
72541: IN
72542: NOT
72543: IFFALSE 72658
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
72545: LD_ADDR_EXP 74
72549: PUSH
72550: LD_EXP 74
72554: PPUSH
72555: LD_VAR 0 1
72559: PUSH
72560: LD_EXP 74
72564: PUSH
72565: LD_VAR 0 1
72569: ARRAY
72570: PUSH
72571: LD_INT 1
72573: PLUS
72574: PUSH
72575: EMPTY
72576: LIST
72577: LIST
72578: PPUSH
72579: LD_VAR 0 9
72583: PPUSH
72584: CALL 18412 0 3
72588: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
72589: LD_ADDR_EXP 73
72593: PUSH
72594: LD_EXP 73
72598: PPUSH
72599: LD_VAR 0 1
72603: PPUSH
72604: LD_EXP 73
72608: PUSH
72609: LD_VAR 0 1
72613: ARRAY
72614: PUSH
72615: LD_VAR 0 9
72619: DIFF
72620: PPUSH
72621: CALL_OW 1
72625: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
72626: LD_VAR 0 3
72630: PPUSH
72631: LD_EXP 74
72635: PUSH
72636: LD_VAR 0 1
72640: ARRAY
72641: PUSH
72642: LD_EXP 74
72646: PUSH
72647: LD_VAR 0 1
72651: ARRAY
72652: ARRAY
72653: PPUSH
72654: CALL_OW 120
// end ; exit ;
72658: GO 72979
// end ; if tmp > 1 then
72660: LD_VAR 0 8
72664: PUSH
72665: LD_INT 1
72667: GREATER
72668: IFFALSE 72772
// for i = 2 to tmp do
72670: LD_ADDR_VAR 0 6
72674: PUSH
72675: DOUBLE
72676: LD_INT 2
72678: DEC
72679: ST_TO_ADDR
72680: LD_VAR 0 8
72684: PUSH
72685: FOR_TO
72686: IFFALSE 72770
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
72688: LD_VAR 0 8
72692: PUSH
72693: LD_VAR 0 6
72697: ARRAY
72698: PPUSH
72699: CALL_OW 461
72703: PUSH
72704: LD_INT 6
72706: EQUAL
72707: IFFALSE 72768
// begin x := tmp [ i ] ;
72709: LD_ADDR_VAR 0 9
72713: PUSH
72714: LD_VAR 0 8
72718: PUSH
72719: LD_VAR 0 6
72723: ARRAY
72724: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
72725: LD_ADDR_VAR 0 8
72729: PUSH
72730: LD_VAR 0 8
72734: PPUSH
72735: LD_VAR 0 6
72739: PPUSH
72740: CALL_OW 3
72744: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
72745: LD_ADDR_VAR 0 8
72749: PUSH
72750: LD_VAR 0 8
72754: PPUSH
72755: LD_INT 1
72757: PPUSH
72758: LD_VAR 0 9
72762: PPUSH
72763: CALL_OW 2
72767: ST_TO_ADDR
// end ;
72768: GO 72685
72770: POP
72771: POP
// for i in tmp do
72772: LD_ADDR_VAR 0 6
72776: PUSH
72777: LD_VAR 0 8
72781: PUSH
72782: FOR_IN
72783: IFFALSE 72852
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
72785: LD_VAR 0 6
72789: PPUSH
72790: CALL_OW 313
72794: PUSH
72795: LD_INT 6
72797: LESS
72798: PUSH
72799: LD_VAR 0 6
72803: PPUSH
72804: CALL_OW 266
72808: PUSH
72809: LD_INT 31
72811: PUSH
72812: LD_INT 32
72814: PUSH
72815: EMPTY
72816: LIST
72817: LIST
72818: IN
72819: NOT
72820: AND
72821: PUSH
72822: LD_VAR 0 6
72826: PPUSH
72827: CALL_OW 313
72831: PUSH
72832: LD_INT 0
72834: EQUAL
72835: OR
72836: IFFALSE 72850
// begin j := i ;
72838: LD_ADDR_VAR 0 7
72842: PUSH
72843: LD_VAR 0 6
72847: ST_TO_ADDR
// break ;
72848: GO 72852
// end ; end ;
72850: GO 72782
72852: POP
72853: POP
// if j then
72854: LD_VAR 0 7
72858: IFFALSE 72876
// ComEnterUnit ( unit , j ) else
72860: LD_VAR 0 3
72864: PPUSH
72865: LD_VAR 0 7
72869: PPUSH
72870: CALL_OW 120
72874: GO 72979
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72876: LD_ADDR_VAR 0 10
72880: PUSH
72881: LD_VAR 0 2
72885: PPUSH
72886: LD_INT 2
72888: PUSH
72889: LD_INT 30
72891: PUSH
72892: LD_INT 0
72894: PUSH
72895: EMPTY
72896: LIST
72897: LIST
72898: PUSH
72899: LD_INT 30
72901: PUSH
72902: LD_INT 1
72904: PUSH
72905: EMPTY
72906: LIST
72907: LIST
72908: PUSH
72909: EMPTY
72910: LIST
72911: LIST
72912: LIST
72913: PPUSH
72914: CALL_OW 72
72918: ST_TO_ADDR
// if depot then
72919: LD_VAR 0 10
72923: IFFALSE 72979
// begin depot := NearestUnitToUnit ( depot , unit ) ;
72925: LD_ADDR_VAR 0 10
72929: PUSH
72930: LD_VAR 0 10
72934: PPUSH
72935: LD_VAR 0 3
72939: PPUSH
72940: CALL_OW 74
72944: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
72945: LD_VAR 0 3
72949: PPUSH
72950: LD_VAR 0 10
72954: PPUSH
72955: CALL_OW 296
72959: PUSH
72960: LD_INT 10
72962: GREATER
72963: IFFALSE 72979
// ComStandNearbyBuilding ( unit , depot ) ;
72965: LD_VAR 0 3
72969: PPUSH
72970: LD_VAR 0 10
72974: PPUSH
72975: CALL 15026 0 2
// end ; end ; end ;
72979: LD_VAR 0 5
72983: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
72984: LD_INT 0
72986: PPUSH
72987: PPUSH
72988: PPUSH
72989: PPUSH
// if not mc_bases then
72990: LD_EXP 64
72994: NOT
72995: IFFALSE 72999
// exit ;
72997: GO 73238
// for i = 1 to mc_bases do
72999: LD_ADDR_VAR 0 2
73003: PUSH
73004: DOUBLE
73005: LD_INT 1
73007: DEC
73008: ST_TO_ADDR
73009: LD_EXP 64
73013: PUSH
73014: FOR_TO
73015: IFFALSE 73236
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
73017: LD_ADDR_VAR 0 4
73021: PUSH
73022: LD_EXP 64
73026: PUSH
73027: LD_VAR 0 2
73031: ARRAY
73032: PPUSH
73033: LD_INT 21
73035: PUSH
73036: LD_INT 1
73038: PUSH
73039: EMPTY
73040: LIST
73041: LIST
73042: PPUSH
73043: CALL_OW 72
73047: PUSH
73048: LD_EXP 93
73052: PUSH
73053: LD_VAR 0 2
73057: ARRAY
73058: UNION
73059: ST_TO_ADDR
// if not tmp then
73060: LD_VAR 0 4
73064: NOT
73065: IFFALSE 73069
// continue ;
73067: GO 73014
// for j in tmp do
73069: LD_ADDR_VAR 0 3
73073: PUSH
73074: LD_VAR 0 4
73078: PUSH
73079: FOR_IN
73080: IFFALSE 73232
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
73082: LD_VAR 0 3
73086: PPUSH
73087: CALL_OW 110
73091: NOT
73092: PUSH
73093: LD_VAR 0 3
73097: PPUSH
73098: CALL_OW 314
73102: NOT
73103: AND
73104: PUSH
73105: LD_VAR 0 3
73109: PPUSH
73110: CALL_OW 311
73114: NOT
73115: AND
73116: PUSH
73117: LD_VAR 0 3
73121: PPUSH
73122: CALL_OW 310
73126: NOT
73127: AND
73128: PUSH
73129: LD_VAR 0 3
73133: PUSH
73134: LD_EXP 67
73138: PUSH
73139: LD_VAR 0 2
73143: ARRAY
73144: PUSH
73145: LD_INT 1
73147: ARRAY
73148: IN
73149: NOT
73150: AND
73151: PUSH
73152: LD_VAR 0 3
73156: PUSH
73157: LD_EXP 67
73161: PUSH
73162: LD_VAR 0 2
73166: ARRAY
73167: PUSH
73168: LD_INT 2
73170: ARRAY
73171: IN
73172: NOT
73173: AND
73174: PUSH
73175: LD_VAR 0 3
73179: PUSH
73180: LD_EXP 76
73184: PUSH
73185: LD_VAR 0 2
73189: ARRAY
73190: IN
73191: NOT
73192: AND
73193: IFFALSE 73230
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
73195: LD_VAR 0 2
73199: PPUSH
73200: LD_EXP 64
73204: PUSH
73205: LD_VAR 0 2
73209: ARRAY
73210: PPUSH
73211: LD_VAR 0 3
73215: PPUSH
73216: LD_VAR 0 3
73220: PPUSH
73221: CALL_OW 257
73225: PPUSH
73226: CALL 72002 0 4
// end ;
73230: GO 73079
73232: POP
73233: POP
// end ;
73234: GO 73014
73236: POP
73237: POP
// end ;
73238: LD_VAR 0 1
73242: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
73243: LD_INT 0
73245: PPUSH
73246: PPUSH
73247: PPUSH
73248: PPUSH
73249: PPUSH
73250: PPUSH
// if not mc_bases [ base ] then
73251: LD_EXP 64
73255: PUSH
73256: LD_VAR 0 1
73260: ARRAY
73261: NOT
73262: IFFALSE 73266
// exit ;
73264: GO 73448
// tmp := [ ] ;
73266: LD_ADDR_VAR 0 6
73270: PUSH
73271: EMPTY
73272: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
73273: LD_ADDR_VAR 0 7
73277: PUSH
73278: LD_VAR 0 3
73282: PPUSH
73283: LD_INT 0
73285: PPUSH
73286: CALL_OW 517
73290: ST_TO_ADDR
// if not list then
73291: LD_VAR 0 7
73295: NOT
73296: IFFALSE 73300
// exit ;
73298: GO 73448
// for i = 1 to amount do
73300: LD_ADDR_VAR 0 5
73304: PUSH
73305: DOUBLE
73306: LD_INT 1
73308: DEC
73309: ST_TO_ADDR
73310: LD_VAR 0 2
73314: PUSH
73315: FOR_TO
73316: IFFALSE 73396
// begin x := rand ( 1 , list [ 1 ] ) ;
73318: LD_ADDR_VAR 0 8
73322: PUSH
73323: LD_INT 1
73325: PPUSH
73326: LD_VAR 0 7
73330: PUSH
73331: LD_INT 1
73333: ARRAY
73334: PPUSH
73335: CALL_OW 12
73339: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
73340: LD_ADDR_VAR 0 6
73344: PUSH
73345: LD_VAR 0 6
73349: PPUSH
73350: LD_VAR 0 5
73354: PPUSH
73355: LD_VAR 0 7
73359: PUSH
73360: LD_INT 1
73362: ARRAY
73363: PUSH
73364: LD_VAR 0 8
73368: ARRAY
73369: PUSH
73370: LD_VAR 0 7
73374: PUSH
73375: LD_INT 2
73377: ARRAY
73378: PUSH
73379: LD_VAR 0 8
73383: ARRAY
73384: PUSH
73385: EMPTY
73386: LIST
73387: LIST
73388: PPUSH
73389: CALL_OW 1
73393: ST_TO_ADDR
// end ;
73394: GO 73315
73396: POP
73397: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
73398: LD_ADDR_EXP 77
73402: PUSH
73403: LD_EXP 77
73407: PPUSH
73408: LD_VAR 0 1
73412: PPUSH
73413: LD_VAR 0 6
73417: PPUSH
73418: CALL_OW 1
73422: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
73423: LD_ADDR_EXP 79
73427: PUSH
73428: LD_EXP 79
73432: PPUSH
73433: LD_VAR 0 1
73437: PPUSH
73438: LD_VAR 0 3
73442: PPUSH
73443: CALL_OW 1
73447: ST_TO_ADDR
// end ;
73448: LD_VAR 0 4
73452: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
73453: LD_INT 0
73455: PPUSH
// if not mc_bases [ base ] then
73456: LD_EXP 64
73460: PUSH
73461: LD_VAR 0 1
73465: ARRAY
73466: NOT
73467: IFFALSE 73471
// exit ;
73469: GO 73496
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
73471: LD_ADDR_EXP 69
73475: PUSH
73476: LD_EXP 69
73480: PPUSH
73481: LD_VAR 0 1
73485: PPUSH
73486: LD_VAR 0 2
73490: PPUSH
73491: CALL_OW 1
73495: ST_TO_ADDR
// end ;
73496: LD_VAR 0 3
73500: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
73501: LD_INT 0
73503: PPUSH
// if not mc_bases [ base ] then
73504: LD_EXP 64
73508: PUSH
73509: LD_VAR 0 1
73513: ARRAY
73514: NOT
73515: IFFALSE 73519
// exit ;
73517: GO 73556
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
73519: LD_ADDR_EXP 69
73523: PUSH
73524: LD_EXP 69
73528: PPUSH
73529: LD_VAR 0 1
73533: PPUSH
73534: LD_EXP 69
73538: PUSH
73539: LD_VAR 0 1
73543: ARRAY
73544: PUSH
73545: LD_VAR 0 2
73549: UNION
73550: PPUSH
73551: CALL_OW 1
73555: ST_TO_ADDR
// end ;
73556: LD_VAR 0 3
73560: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
73561: LD_INT 0
73563: PPUSH
// if not mc_bases [ base ] then
73564: LD_EXP 64
73568: PUSH
73569: LD_VAR 0 1
73573: ARRAY
73574: NOT
73575: IFFALSE 73579
// exit ;
73577: GO 73604
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
73579: LD_ADDR_EXP 85
73583: PUSH
73584: LD_EXP 85
73588: PPUSH
73589: LD_VAR 0 1
73593: PPUSH
73594: LD_VAR 0 2
73598: PPUSH
73599: CALL_OW 1
73603: ST_TO_ADDR
// end ;
73604: LD_VAR 0 3
73608: RET
// export function MC_InsertProduceList ( base , components ) ; begin
73609: LD_INT 0
73611: PPUSH
// if not mc_bases [ base ] then
73612: LD_EXP 64
73616: PUSH
73617: LD_VAR 0 1
73621: ARRAY
73622: NOT
73623: IFFALSE 73627
// exit ;
73625: GO 73664
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
73627: LD_ADDR_EXP 85
73631: PUSH
73632: LD_EXP 85
73636: PPUSH
73637: LD_VAR 0 1
73641: PPUSH
73642: LD_EXP 85
73646: PUSH
73647: LD_VAR 0 1
73651: ARRAY
73652: PUSH
73653: LD_VAR 0 2
73657: ADD
73658: PPUSH
73659: CALL_OW 1
73663: ST_TO_ADDR
// end ;
73664: LD_VAR 0 3
73668: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
73669: LD_INT 0
73671: PPUSH
// if not mc_bases [ base ] then
73672: LD_EXP 64
73676: PUSH
73677: LD_VAR 0 1
73681: ARRAY
73682: NOT
73683: IFFALSE 73687
// exit ;
73685: GO 73741
// mc_defender := Replace ( mc_defender , base , deflist ) ;
73687: LD_ADDR_EXP 86
73691: PUSH
73692: LD_EXP 86
73696: PPUSH
73697: LD_VAR 0 1
73701: PPUSH
73702: LD_VAR 0 2
73706: PPUSH
73707: CALL_OW 1
73711: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
73712: LD_ADDR_EXP 75
73716: PUSH
73717: LD_EXP 75
73721: PPUSH
73722: LD_VAR 0 1
73726: PPUSH
73727: LD_VAR 0 2
73731: PUSH
73732: LD_INT 0
73734: PLUS
73735: PPUSH
73736: CALL_OW 1
73740: ST_TO_ADDR
// end ;
73741: LD_VAR 0 3
73745: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
73746: LD_INT 0
73748: PPUSH
// if not mc_bases [ base ] then
73749: LD_EXP 64
73753: PUSH
73754: LD_VAR 0 1
73758: ARRAY
73759: NOT
73760: IFFALSE 73764
// exit ;
73762: GO 73789
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
73764: LD_ADDR_EXP 75
73768: PUSH
73769: LD_EXP 75
73773: PPUSH
73774: LD_VAR 0 1
73778: PPUSH
73779: LD_VAR 0 2
73783: PPUSH
73784: CALL_OW 1
73788: ST_TO_ADDR
// end ;
73789: LD_VAR 0 3
73793: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
73794: LD_INT 0
73796: PPUSH
73797: PPUSH
73798: PPUSH
73799: PPUSH
// if not mc_bases [ base ] then
73800: LD_EXP 64
73804: PUSH
73805: LD_VAR 0 1
73809: ARRAY
73810: NOT
73811: IFFALSE 73815
// exit ;
73813: GO 73880
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
73815: LD_ADDR_EXP 84
73819: PUSH
73820: LD_EXP 84
73824: PPUSH
73825: LD_VAR 0 1
73829: PUSH
73830: LD_EXP 84
73834: PUSH
73835: LD_VAR 0 1
73839: ARRAY
73840: PUSH
73841: LD_INT 1
73843: PLUS
73844: PUSH
73845: EMPTY
73846: LIST
73847: LIST
73848: PPUSH
73849: LD_VAR 0 1
73853: PUSH
73854: LD_VAR 0 2
73858: PUSH
73859: LD_VAR 0 3
73863: PUSH
73864: LD_VAR 0 4
73868: PUSH
73869: EMPTY
73870: LIST
73871: LIST
73872: LIST
73873: LIST
73874: PPUSH
73875: CALL 18412 0 3
73879: ST_TO_ADDR
// end ;
73880: LD_VAR 0 5
73884: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
73885: LD_INT 0
73887: PPUSH
// if not mc_bases [ base ] then
73888: LD_EXP 64
73892: PUSH
73893: LD_VAR 0 1
73897: ARRAY
73898: NOT
73899: IFFALSE 73903
// exit ;
73901: GO 73928
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
73903: LD_ADDR_EXP 101
73907: PUSH
73908: LD_EXP 101
73912: PPUSH
73913: LD_VAR 0 1
73917: PPUSH
73918: LD_VAR 0 2
73922: PPUSH
73923: CALL_OW 1
73927: ST_TO_ADDR
// end ;
73928: LD_VAR 0 3
73932: RET
// export function MC_GetMinesField ( base ) ; begin
73933: LD_INT 0
73935: PPUSH
// result := mc_mines [ base ] ;
73936: LD_ADDR_VAR 0 2
73940: PUSH
73941: LD_EXP 77
73945: PUSH
73946: LD_VAR 0 1
73950: ARRAY
73951: ST_TO_ADDR
// end ;
73952: LD_VAR 0 2
73956: RET
// export function MC_GetProduceList ( base ) ; begin
73957: LD_INT 0
73959: PPUSH
// result := mc_produce [ base ] ;
73960: LD_ADDR_VAR 0 2
73964: PUSH
73965: LD_EXP 85
73969: PUSH
73970: LD_VAR 0 1
73974: ARRAY
73975: ST_TO_ADDR
// end ;
73976: LD_VAR 0 2
73980: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
73981: LD_INT 0
73983: PPUSH
73984: PPUSH
// if not mc_bases then
73985: LD_EXP 64
73989: NOT
73990: IFFALSE 73994
// exit ;
73992: GO 74059
// if mc_bases [ base ] then
73994: LD_EXP 64
73998: PUSH
73999: LD_VAR 0 1
74003: ARRAY
74004: IFFALSE 74059
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
74006: LD_ADDR_VAR 0 3
74010: PUSH
74011: LD_EXP 64
74015: PUSH
74016: LD_VAR 0 1
74020: ARRAY
74021: PPUSH
74022: LD_INT 30
74024: PUSH
74025: LD_VAR 0 2
74029: PUSH
74030: EMPTY
74031: LIST
74032: LIST
74033: PPUSH
74034: CALL_OW 72
74038: ST_TO_ADDR
// if result then
74039: LD_VAR 0 3
74043: IFFALSE 74059
// result := result [ 1 ] ;
74045: LD_ADDR_VAR 0 3
74049: PUSH
74050: LD_VAR 0 3
74054: PUSH
74055: LD_INT 1
74057: ARRAY
74058: ST_TO_ADDR
// end ; end ;
74059: LD_VAR 0 3
74063: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
74064: LD_INT 0
74066: PPUSH
74067: PPUSH
// if not mc_bases then
74068: LD_EXP 64
74072: NOT
74073: IFFALSE 74077
// exit ;
74075: GO 74122
// if mc_bases [ base ] then
74077: LD_EXP 64
74081: PUSH
74082: LD_VAR 0 1
74086: ARRAY
74087: IFFALSE 74122
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
74089: LD_ADDR_VAR 0 3
74093: PUSH
74094: LD_EXP 64
74098: PUSH
74099: LD_VAR 0 1
74103: ARRAY
74104: PPUSH
74105: LD_INT 30
74107: PUSH
74108: LD_VAR 0 2
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: PPUSH
74117: CALL_OW 72
74121: ST_TO_ADDR
// end ;
74122: LD_VAR 0 3
74126: RET
// export function MC_SetTame ( base , area ) ; begin
74127: LD_INT 0
74129: PPUSH
// if not mc_bases or not base then
74130: LD_EXP 64
74134: NOT
74135: PUSH
74136: LD_VAR 0 1
74140: NOT
74141: OR
74142: IFFALSE 74146
// exit ;
74144: GO 74171
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
74146: LD_ADDR_EXP 92
74150: PUSH
74151: LD_EXP 92
74155: PPUSH
74156: LD_VAR 0 1
74160: PPUSH
74161: LD_VAR 0 2
74165: PPUSH
74166: CALL_OW 1
74170: ST_TO_ADDR
// end ;
74171: LD_VAR 0 3
74175: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
74176: LD_INT 0
74178: PPUSH
74179: PPUSH
// if not mc_bases or not base then
74180: LD_EXP 64
74184: NOT
74185: PUSH
74186: LD_VAR 0 1
74190: NOT
74191: OR
74192: IFFALSE 74196
// exit ;
74194: GO 74298
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
74196: LD_ADDR_VAR 0 4
74200: PUSH
74201: LD_EXP 64
74205: PUSH
74206: LD_VAR 0 1
74210: ARRAY
74211: PPUSH
74212: LD_INT 30
74214: PUSH
74215: LD_VAR 0 2
74219: PUSH
74220: EMPTY
74221: LIST
74222: LIST
74223: PPUSH
74224: CALL_OW 72
74228: ST_TO_ADDR
// if not tmp then
74229: LD_VAR 0 4
74233: NOT
74234: IFFALSE 74238
// exit ;
74236: GO 74298
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
74238: LD_ADDR_EXP 96
74242: PUSH
74243: LD_EXP 96
74247: PPUSH
74248: LD_VAR 0 1
74252: PPUSH
74253: LD_EXP 96
74257: PUSH
74258: LD_VAR 0 1
74262: ARRAY
74263: PPUSH
74264: LD_EXP 96
74268: PUSH
74269: LD_VAR 0 1
74273: ARRAY
74274: PUSH
74275: LD_INT 1
74277: PLUS
74278: PPUSH
74279: LD_VAR 0 4
74283: PUSH
74284: LD_INT 1
74286: ARRAY
74287: PPUSH
74288: CALL_OW 2
74292: PPUSH
74293: CALL_OW 1
74297: ST_TO_ADDR
// end ;
74298: LD_VAR 0 3
74302: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
74303: LD_INT 0
74305: PPUSH
74306: PPUSH
// if not mc_bases or not base or not kinds then
74307: LD_EXP 64
74311: NOT
74312: PUSH
74313: LD_VAR 0 1
74317: NOT
74318: OR
74319: PUSH
74320: LD_VAR 0 2
74324: NOT
74325: OR
74326: IFFALSE 74330
// exit ;
74328: GO 74391
// for i in kinds do
74330: LD_ADDR_VAR 0 4
74334: PUSH
74335: LD_VAR 0 2
74339: PUSH
74340: FOR_IN
74341: IFFALSE 74389
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
74343: LD_ADDR_EXP 98
74347: PUSH
74348: LD_EXP 98
74352: PPUSH
74353: LD_VAR 0 1
74357: PUSH
74358: LD_EXP 98
74362: PUSH
74363: LD_VAR 0 1
74367: ARRAY
74368: PUSH
74369: LD_INT 1
74371: PLUS
74372: PUSH
74373: EMPTY
74374: LIST
74375: LIST
74376: PPUSH
74377: LD_VAR 0 4
74381: PPUSH
74382: CALL 18412 0 3
74386: ST_TO_ADDR
74387: GO 74340
74389: POP
74390: POP
// end ;
74391: LD_VAR 0 3
74395: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
74396: LD_INT 0
74398: PPUSH
// if not mc_bases or not base or not areas then
74399: LD_EXP 64
74403: NOT
74404: PUSH
74405: LD_VAR 0 1
74409: NOT
74410: OR
74411: PUSH
74412: LD_VAR 0 2
74416: NOT
74417: OR
74418: IFFALSE 74422
// exit ;
74420: GO 74447
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
74422: LD_ADDR_EXP 82
74426: PUSH
74427: LD_EXP 82
74431: PPUSH
74432: LD_VAR 0 1
74436: PPUSH
74437: LD_VAR 0 2
74441: PPUSH
74442: CALL_OW 1
74446: ST_TO_ADDR
// end ;
74447: LD_VAR 0 3
74451: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
74452: LD_INT 0
74454: PPUSH
// if not mc_bases or not base or not teleports_exit then
74455: LD_EXP 64
74459: NOT
74460: PUSH
74461: LD_VAR 0 1
74465: NOT
74466: OR
74467: PUSH
74468: LD_VAR 0 2
74472: NOT
74473: OR
74474: IFFALSE 74478
// exit ;
74476: GO 74503
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
74478: LD_ADDR_EXP 99
74482: PUSH
74483: LD_EXP 99
74487: PPUSH
74488: LD_VAR 0 1
74492: PPUSH
74493: LD_VAR 0 2
74497: PPUSH
74498: CALL_OW 1
74502: ST_TO_ADDR
// end ;
74503: LD_VAR 0 3
74507: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
74508: LD_INT 0
74510: PPUSH
74511: PPUSH
74512: PPUSH
// if not mc_bases or not base or not ext_list then
74513: LD_EXP 64
74517: NOT
74518: PUSH
74519: LD_VAR 0 1
74523: NOT
74524: OR
74525: PUSH
74526: LD_VAR 0 5
74530: NOT
74531: OR
74532: IFFALSE 74536
// exit ;
74534: GO 74709
// tmp := GetFacExtXYD ( x , y , d ) ;
74536: LD_ADDR_VAR 0 8
74540: PUSH
74541: LD_VAR 0 2
74545: PPUSH
74546: LD_VAR 0 3
74550: PPUSH
74551: LD_VAR 0 4
74555: PPUSH
74556: CALL 47091 0 3
74560: ST_TO_ADDR
// if not tmp then
74561: LD_VAR 0 8
74565: NOT
74566: IFFALSE 74570
// exit ;
74568: GO 74709
// for i in tmp do
74570: LD_ADDR_VAR 0 7
74574: PUSH
74575: LD_VAR 0 8
74579: PUSH
74580: FOR_IN
74581: IFFALSE 74707
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
74583: LD_ADDR_EXP 69
74587: PUSH
74588: LD_EXP 69
74592: PPUSH
74593: LD_VAR 0 1
74597: PPUSH
74598: LD_EXP 69
74602: PUSH
74603: LD_VAR 0 1
74607: ARRAY
74608: PPUSH
74609: LD_EXP 69
74613: PUSH
74614: LD_VAR 0 1
74618: ARRAY
74619: PUSH
74620: LD_INT 1
74622: PLUS
74623: PPUSH
74624: LD_VAR 0 5
74628: PUSH
74629: LD_INT 1
74631: ARRAY
74632: PUSH
74633: LD_VAR 0 7
74637: PUSH
74638: LD_INT 1
74640: ARRAY
74641: PUSH
74642: LD_VAR 0 7
74646: PUSH
74647: LD_INT 2
74649: ARRAY
74650: PUSH
74651: LD_VAR 0 7
74655: PUSH
74656: LD_INT 3
74658: ARRAY
74659: PUSH
74660: EMPTY
74661: LIST
74662: LIST
74663: LIST
74664: LIST
74665: PPUSH
74666: CALL_OW 2
74670: PPUSH
74671: CALL_OW 1
74675: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
74676: LD_ADDR_VAR 0 5
74680: PUSH
74681: LD_VAR 0 5
74685: PPUSH
74686: LD_INT 1
74688: PPUSH
74689: CALL_OW 3
74693: ST_TO_ADDR
// if not ext_list then
74694: LD_VAR 0 5
74698: NOT
74699: IFFALSE 74705
// exit ;
74701: POP
74702: POP
74703: GO 74709
// end ;
74705: GO 74580
74707: POP
74708: POP
// end ;
74709: LD_VAR 0 6
74713: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
74714: LD_INT 0
74716: PPUSH
// if not mc_bases or not base or not weapon_list then
74717: LD_EXP 64
74721: NOT
74722: PUSH
74723: LD_VAR 0 1
74727: NOT
74728: OR
74729: PUSH
74730: LD_VAR 0 2
74734: NOT
74735: OR
74736: IFFALSE 74740
// exit ;
74738: GO 74765
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
74740: LD_ADDR_EXP 103
74744: PUSH
74745: LD_EXP 103
74749: PPUSH
74750: LD_VAR 0 1
74754: PPUSH
74755: LD_VAR 0 2
74759: PPUSH
74760: CALL_OW 1
74764: ST_TO_ADDR
// end ;
74765: LD_VAR 0 3
74769: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
74770: LD_INT 0
74772: PPUSH
// if not mc_bases or not base or not tech_list then
74773: LD_EXP 64
74777: NOT
74778: PUSH
74779: LD_VAR 0 1
74783: NOT
74784: OR
74785: PUSH
74786: LD_VAR 0 2
74790: NOT
74791: OR
74792: IFFALSE 74796
// exit ;
74794: GO 74821
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
74796: LD_ADDR_EXP 91
74800: PUSH
74801: LD_EXP 91
74805: PPUSH
74806: LD_VAR 0 1
74810: PPUSH
74811: LD_VAR 0 2
74815: PPUSH
74816: CALL_OW 1
74820: ST_TO_ADDR
// end ;
74821: LD_VAR 0 3
74825: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
74826: LD_INT 0
74828: PPUSH
// if not mc_bases or not parking_area or not base then
74829: LD_EXP 64
74833: NOT
74834: PUSH
74835: LD_VAR 0 2
74839: NOT
74840: OR
74841: PUSH
74842: LD_VAR 0 1
74846: NOT
74847: OR
74848: IFFALSE 74852
// exit ;
74850: GO 74877
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
74852: LD_ADDR_EXP 88
74856: PUSH
74857: LD_EXP 88
74861: PPUSH
74862: LD_VAR 0 1
74866: PPUSH
74867: LD_VAR 0 2
74871: PPUSH
74872: CALL_OW 1
74876: ST_TO_ADDR
// end ;
74877: LD_VAR 0 3
74881: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
74882: LD_INT 0
74884: PPUSH
// if not mc_bases or not base or not scan_area then
74885: LD_EXP 64
74889: NOT
74890: PUSH
74891: LD_VAR 0 1
74895: NOT
74896: OR
74897: PUSH
74898: LD_VAR 0 2
74902: NOT
74903: OR
74904: IFFALSE 74908
// exit ;
74906: GO 74933
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
74908: LD_ADDR_EXP 89
74912: PUSH
74913: LD_EXP 89
74917: PPUSH
74918: LD_VAR 0 1
74922: PPUSH
74923: LD_VAR 0 2
74927: PPUSH
74928: CALL_OW 1
74932: ST_TO_ADDR
// end ;
74933: LD_VAR 0 3
74937: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
74938: LD_INT 0
74940: PPUSH
74941: PPUSH
// if not mc_bases or not base then
74942: LD_EXP 64
74946: NOT
74947: PUSH
74948: LD_VAR 0 1
74952: NOT
74953: OR
74954: IFFALSE 74958
// exit ;
74956: GO 75022
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
74958: LD_ADDR_VAR 0 3
74962: PUSH
74963: LD_INT 1
74965: PUSH
74966: LD_INT 2
74968: PUSH
74969: LD_INT 3
74971: PUSH
74972: LD_INT 4
74974: PUSH
74975: LD_INT 11
74977: PUSH
74978: EMPTY
74979: LIST
74980: LIST
74981: LIST
74982: LIST
74983: LIST
74984: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
74985: LD_ADDR_EXP 91
74989: PUSH
74990: LD_EXP 91
74994: PPUSH
74995: LD_VAR 0 1
74999: PPUSH
75000: LD_EXP 91
75004: PUSH
75005: LD_VAR 0 1
75009: ARRAY
75010: PUSH
75011: LD_VAR 0 3
75015: DIFF
75016: PPUSH
75017: CALL_OW 1
75021: ST_TO_ADDR
// end ;
75022: LD_VAR 0 2
75026: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
75027: LD_INT 0
75029: PPUSH
// result := mc_vehicles [ base ] ;
75030: LD_ADDR_VAR 0 3
75034: PUSH
75035: LD_EXP 83
75039: PUSH
75040: LD_VAR 0 1
75044: ARRAY
75045: ST_TO_ADDR
// if onlyCombat then
75046: LD_VAR 0 2
75050: IFFALSE 75215
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
75052: LD_ADDR_VAR 0 3
75056: PUSH
75057: LD_VAR 0 3
75061: PUSH
75062: LD_VAR 0 3
75066: PPUSH
75067: LD_INT 2
75069: PUSH
75070: LD_INT 34
75072: PUSH
75073: LD_INT 12
75075: PUSH
75076: EMPTY
75077: LIST
75078: LIST
75079: PUSH
75080: LD_INT 34
75082: PUSH
75083: LD_INT 51
75085: PUSH
75086: EMPTY
75087: LIST
75088: LIST
75089: PUSH
75090: LD_INT 34
75092: PUSH
75093: LD_EXP 49
75097: PUSH
75098: EMPTY
75099: LIST
75100: LIST
75101: PUSH
75102: LD_INT 34
75104: PUSH
75105: LD_INT 32
75107: PUSH
75108: EMPTY
75109: LIST
75110: LIST
75111: PUSH
75112: LD_INT 34
75114: PUSH
75115: LD_INT 13
75117: PUSH
75118: EMPTY
75119: LIST
75120: LIST
75121: PUSH
75122: LD_INT 34
75124: PUSH
75125: LD_INT 52
75127: PUSH
75128: EMPTY
75129: LIST
75130: LIST
75131: PUSH
75132: LD_INT 34
75134: PUSH
75135: LD_INT 14
75137: PUSH
75138: EMPTY
75139: LIST
75140: LIST
75141: PUSH
75142: LD_INT 34
75144: PUSH
75145: LD_INT 53
75147: PUSH
75148: EMPTY
75149: LIST
75150: LIST
75151: PUSH
75152: LD_INT 34
75154: PUSH
75155: LD_EXP 48
75159: PUSH
75160: EMPTY
75161: LIST
75162: LIST
75163: PUSH
75164: LD_INT 34
75166: PUSH
75167: LD_INT 31
75169: PUSH
75170: EMPTY
75171: LIST
75172: LIST
75173: PUSH
75174: LD_INT 34
75176: PUSH
75177: LD_INT 48
75179: PUSH
75180: EMPTY
75181: LIST
75182: LIST
75183: PUSH
75184: LD_INT 34
75186: PUSH
75187: LD_INT 8
75189: PUSH
75190: EMPTY
75191: LIST
75192: LIST
75193: PUSH
75194: EMPTY
75195: LIST
75196: LIST
75197: LIST
75198: LIST
75199: LIST
75200: LIST
75201: LIST
75202: LIST
75203: LIST
75204: LIST
75205: LIST
75206: LIST
75207: LIST
75208: PPUSH
75209: CALL_OW 72
75213: DIFF
75214: ST_TO_ADDR
// end ; end_of_file
75215: LD_VAR 0 3
75219: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
75220: LD_INT 0
75222: PPUSH
75223: PPUSH
75224: PPUSH
// if not mc_bases or not skirmish then
75225: LD_EXP 64
75229: NOT
75230: PUSH
75231: LD_EXP 62
75235: NOT
75236: OR
75237: IFFALSE 75241
// exit ;
75239: GO 75406
// for i = 1 to mc_bases do
75241: LD_ADDR_VAR 0 4
75245: PUSH
75246: DOUBLE
75247: LD_INT 1
75249: DEC
75250: ST_TO_ADDR
75251: LD_EXP 64
75255: PUSH
75256: FOR_TO
75257: IFFALSE 75404
// begin if sci in mc_bases [ i ] then
75259: LD_VAR 0 2
75263: PUSH
75264: LD_EXP 64
75268: PUSH
75269: LD_VAR 0 4
75273: ARRAY
75274: IN
75275: IFFALSE 75402
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
75277: LD_ADDR_EXP 93
75281: PUSH
75282: LD_EXP 93
75286: PPUSH
75287: LD_VAR 0 4
75291: PUSH
75292: LD_EXP 93
75296: PUSH
75297: LD_VAR 0 4
75301: ARRAY
75302: PUSH
75303: LD_INT 1
75305: PLUS
75306: PUSH
75307: EMPTY
75308: LIST
75309: LIST
75310: PPUSH
75311: LD_VAR 0 1
75315: PPUSH
75316: CALL 18412 0 3
75320: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
75321: LD_ADDR_VAR 0 5
75325: PUSH
75326: LD_EXP 64
75330: PUSH
75331: LD_VAR 0 4
75335: ARRAY
75336: PPUSH
75337: LD_INT 2
75339: PUSH
75340: LD_INT 30
75342: PUSH
75343: LD_INT 0
75345: PUSH
75346: EMPTY
75347: LIST
75348: LIST
75349: PUSH
75350: LD_INT 30
75352: PUSH
75353: LD_INT 1
75355: PUSH
75356: EMPTY
75357: LIST
75358: LIST
75359: PUSH
75360: EMPTY
75361: LIST
75362: LIST
75363: LIST
75364: PPUSH
75365: CALL_OW 72
75369: PPUSH
75370: LD_VAR 0 1
75374: PPUSH
75375: CALL_OW 74
75379: ST_TO_ADDR
// if tmp then
75380: LD_VAR 0 5
75384: IFFALSE 75400
// ComStandNearbyBuilding ( ape , tmp ) ;
75386: LD_VAR 0 1
75390: PPUSH
75391: LD_VAR 0 5
75395: PPUSH
75396: CALL 15026 0 2
// break ;
75400: GO 75404
// end ; end ;
75402: GO 75256
75404: POP
75405: POP
// end ;
75406: LD_VAR 0 3
75410: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
75411: LD_INT 0
75413: PPUSH
75414: PPUSH
75415: PPUSH
// if not mc_bases or not skirmish then
75416: LD_EXP 64
75420: NOT
75421: PUSH
75422: LD_EXP 62
75426: NOT
75427: OR
75428: IFFALSE 75432
// exit ;
75430: GO 75521
// for i = 1 to mc_bases do
75432: LD_ADDR_VAR 0 4
75436: PUSH
75437: DOUBLE
75438: LD_INT 1
75440: DEC
75441: ST_TO_ADDR
75442: LD_EXP 64
75446: PUSH
75447: FOR_TO
75448: IFFALSE 75519
// begin if building in mc_busy_turret_list [ i ] then
75450: LD_VAR 0 1
75454: PUSH
75455: LD_EXP 74
75459: PUSH
75460: LD_VAR 0 4
75464: ARRAY
75465: IN
75466: IFFALSE 75517
// begin tmp := mc_busy_turret_list [ i ] diff building ;
75468: LD_ADDR_VAR 0 5
75472: PUSH
75473: LD_EXP 74
75477: PUSH
75478: LD_VAR 0 4
75482: ARRAY
75483: PUSH
75484: LD_VAR 0 1
75488: DIFF
75489: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
75490: LD_ADDR_EXP 74
75494: PUSH
75495: LD_EXP 74
75499: PPUSH
75500: LD_VAR 0 4
75504: PPUSH
75505: LD_VAR 0 5
75509: PPUSH
75510: CALL_OW 1
75514: ST_TO_ADDR
// break ;
75515: GO 75519
// end ; end ;
75517: GO 75447
75519: POP
75520: POP
// end ;
75521: LD_VAR 0 3
75525: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
75526: LD_INT 0
75528: PPUSH
75529: PPUSH
75530: PPUSH
// if not mc_bases or not skirmish then
75531: LD_EXP 64
75535: NOT
75536: PUSH
75537: LD_EXP 62
75541: NOT
75542: OR
75543: IFFALSE 75547
// exit ;
75545: GO 75746
// for i = 1 to mc_bases do
75547: LD_ADDR_VAR 0 5
75551: PUSH
75552: DOUBLE
75553: LD_INT 1
75555: DEC
75556: ST_TO_ADDR
75557: LD_EXP 64
75561: PUSH
75562: FOR_TO
75563: IFFALSE 75744
// if building in mc_bases [ i ] then
75565: LD_VAR 0 1
75569: PUSH
75570: LD_EXP 64
75574: PUSH
75575: LD_VAR 0 5
75579: ARRAY
75580: IN
75581: IFFALSE 75742
// begin tmp := mc_bases [ i ] diff building ;
75583: LD_ADDR_VAR 0 6
75587: PUSH
75588: LD_EXP 64
75592: PUSH
75593: LD_VAR 0 5
75597: ARRAY
75598: PUSH
75599: LD_VAR 0 1
75603: DIFF
75604: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
75605: LD_ADDR_EXP 64
75609: PUSH
75610: LD_EXP 64
75614: PPUSH
75615: LD_VAR 0 5
75619: PPUSH
75620: LD_VAR 0 6
75624: PPUSH
75625: CALL_OW 1
75629: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
75630: LD_VAR 0 1
75634: PUSH
75635: LD_EXP 72
75639: PUSH
75640: LD_VAR 0 5
75644: ARRAY
75645: IN
75646: IFFALSE 75685
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
75648: LD_ADDR_EXP 72
75652: PUSH
75653: LD_EXP 72
75657: PPUSH
75658: LD_VAR 0 5
75662: PPUSH
75663: LD_EXP 72
75667: PUSH
75668: LD_VAR 0 5
75672: ARRAY
75673: PUSH
75674: LD_VAR 0 1
75678: DIFF
75679: PPUSH
75680: CALL_OW 1
75684: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
75685: LD_VAR 0 1
75689: PUSH
75690: LD_EXP 73
75694: PUSH
75695: LD_VAR 0 5
75699: ARRAY
75700: IN
75701: IFFALSE 75740
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
75703: LD_ADDR_EXP 73
75707: PUSH
75708: LD_EXP 73
75712: PPUSH
75713: LD_VAR 0 5
75717: PPUSH
75718: LD_EXP 73
75722: PUSH
75723: LD_VAR 0 5
75727: ARRAY
75728: PUSH
75729: LD_VAR 0 1
75733: DIFF
75734: PPUSH
75735: CALL_OW 1
75739: ST_TO_ADDR
// break ;
75740: GO 75744
// end ;
75742: GO 75562
75744: POP
75745: POP
// end ;
75746: LD_VAR 0 4
75750: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
75751: LD_INT 0
75753: PPUSH
75754: PPUSH
75755: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
75756: LD_EXP 64
75760: NOT
75761: PUSH
75762: LD_EXP 62
75766: NOT
75767: OR
75768: PUSH
75769: LD_VAR 0 3
75773: PUSH
75774: LD_EXP 90
75778: IN
75779: NOT
75780: OR
75781: IFFALSE 75785
// exit ;
75783: GO 75908
// for i = 1 to mc_vehicles do
75785: LD_ADDR_VAR 0 6
75789: PUSH
75790: DOUBLE
75791: LD_INT 1
75793: DEC
75794: ST_TO_ADDR
75795: LD_EXP 83
75799: PUSH
75800: FOR_TO
75801: IFFALSE 75906
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
75803: LD_VAR 0 2
75807: PUSH
75808: LD_EXP 83
75812: PUSH
75813: LD_VAR 0 6
75817: ARRAY
75818: IN
75819: PUSH
75820: LD_VAR 0 1
75824: PUSH
75825: LD_EXP 83
75829: PUSH
75830: LD_VAR 0 6
75834: ARRAY
75835: IN
75836: OR
75837: IFFALSE 75904
// begin tmp := mc_vehicles [ i ] diff old ;
75839: LD_ADDR_VAR 0 7
75843: PUSH
75844: LD_EXP 83
75848: PUSH
75849: LD_VAR 0 6
75853: ARRAY
75854: PUSH
75855: LD_VAR 0 2
75859: DIFF
75860: ST_TO_ADDR
// tmp := tmp diff new ;
75861: LD_ADDR_VAR 0 7
75865: PUSH
75866: LD_VAR 0 7
75870: PUSH
75871: LD_VAR 0 1
75875: DIFF
75876: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
75877: LD_ADDR_EXP 83
75881: PUSH
75882: LD_EXP 83
75886: PPUSH
75887: LD_VAR 0 6
75891: PPUSH
75892: LD_VAR 0 7
75896: PPUSH
75897: CALL_OW 1
75901: ST_TO_ADDR
// break ;
75902: GO 75906
// end ;
75904: GO 75800
75906: POP
75907: POP
// end ;
75908: LD_VAR 0 5
75912: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
75913: LD_INT 0
75915: PPUSH
75916: PPUSH
75917: PPUSH
75918: PPUSH
// if not mc_bases or not skirmish then
75919: LD_EXP 64
75923: NOT
75924: PUSH
75925: LD_EXP 62
75929: NOT
75930: OR
75931: IFFALSE 75935
// exit ;
75933: GO 76312
// side := GetSide ( vehicle ) ;
75935: LD_ADDR_VAR 0 5
75939: PUSH
75940: LD_VAR 0 1
75944: PPUSH
75945: CALL_OW 255
75949: ST_TO_ADDR
// for i = 1 to mc_bases do
75950: LD_ADDR_VAR 0 4
75954: PUSH
75955: DOUBLE
75956: LD_INT 1
75958: DEC
75959: ST_TO_ADDR
75960: LD_EXP 64
75964: PUSH
75965: FOR_TO
75966: IFFALSE 76310
// begin if factory in mc_bases [ i ] then
75968: LD_VAR 0 2
75972: PUSH
75973: LD_EXP 64
75977: PUSH
75978: LD_VAR 0 4
75982: ARRAY
75983: IN
75984: IFFALSE 76308
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
75986: LD_EXP 86
75990: PUSH
75991: LD_VAR 0 4
75995: ARRAY
75996: PUSH
75997: LD_EXP 75
76001: PUSH
76002: LD_VAR 0 4
76006: ARRAY
76007: LESS
76008: PUSH
76009: LD_VAR 0 1
76013: PPUSH
76014: CALL_OW 264
76018: PUSH
76019: LD_INT 31
76021: PUSH
76022: LD_INT 32
76024: PUSH
76025: LD_INT 51
76027: PUSH
76028: LD_EXP 49
76032: PUSH
76033: LD_INT 12
76035: PUSH
76036: LD_INT 30
76038: PUSH
76039: LD_EXP 48
76043: PUSH
76044: LD_INT 11
76046: PUSH
76047: LD_INT 53
76049: PUSH
76050: LD_INT 14
76052: PUSH
76053: LD_EXP 52
76057: PUSH
76058: LD_INT 29
76060: PUSH
76061: LD_EXP 50
76065: PUSH
76066: LD_INT 13
76068: PUSH
76069: LD_INT 52
76071: PUSH
76072: LD_INT 48
76074: PUSH
76075: LD_INT 8
76077: PUSH
76078: EMPTY
76079: LIST
76080: LIST
76081: LIST
76082: LIST
76083: LIST
76084: LIST
76085: LIST
76086: LIST
76087: LIST
76088: LIST
76089: LIST
76090: LIST
76091: LIST
76092: LIST
76093: LIST
76094: LIST
76095: LIST
76096: IN
76097: NOT
76098: AND
76099: IFFALSE 76147
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
76101: LD_ADDR_EXP 86
76105: PUSH
76106: LD_EXP 86
76110: PPUSH
76111: LD_VAR 0 4
76115: PUSH
76116: LD_EXP 86
76120: PUSH
76121: LD_VAR 0 4
76125: ARRAY
76126: PUSH
76127: LD_INT 1
76129: PLUS
76130: PUSH
76131: EMPTY
76132: LIST
76133: LIST
76134: PPUSH
76135: LD_VAR 0 1
76139: PPUSH
76140: CALL 18412 0 3
76144: ST_TO_ADDR
76145: GO 76191
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
76147: LD_ADDR_EXP 83
76151: PUSH
76152: LD_EXP 83
76156: PPUSH
76157: LD_VAR 0 4
76161: PUSH
76162: LD_EXP 83
76166: PUSH
76167: LD_VAR 0 4
76171: ARRAY
76172: PUSH
76173: LD_INT 1
76175: PLUS
76176: PUSH
76177: EMPTY
76178: LIST
76179: LIST
76180: PPUSH
76181: LD_VAR 0 1
76185: PPUSH
76186: CALL 18412 0 3
76190: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
76191: LD_VAR 0 1
76195: PPUSH
76196: CALL_OW 263
76200: PUSH
76201: LD_INT 2
76203: EQUAL
76204: IFFALSE 76224
// begin repeat wait ( 0 0$1 ) ;
76206: LD_INT 35
76208: PPUSH
76209: CALL_OW 67
// until IsControledBy ( vehicle ) ;
76213: LD_VAR 0 1
76217: PPUSH
76218: CALL_OW 312
76222: IFFALSE 76206
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
76224: LD_VAR 0 1
76228: PPUSH
76229: LD_EXP 88
76233: PUSH
76234: LD_VAR 0 4
76238: ARRAY
76239: PPUSH
76240: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
76244: LD_VAR 0 1
76248: PPUSH
76249: CALL_OW 263
76253: PUSH
76254: LD_INT 1
76256: NONEQUAL
76257: IFFALSE 76261
// break ;
76259: GO 76310
// repeat wait ( 0 0$1 ) ;
76261: LD_INT 35
76263: PPUSH
76264: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
76268: LD_VAR 0 1
76272: PPUSH
76273: LD_EXP 88
76277: PUSH
76278: LD_VAR 0 4
76282: ARRAY
76283: PPUSH
76284: CALL_OW 308
76288: IFFALSE 76261
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
76290: LD_VAR 0 1
76294: PPUSH
76295: CALL_OW 311
76299: PPUSH
76300: CALL_OW 121
// exit ;
76304: POP
76305: POP
76306: GO 76312
// end ; end ;
76308: GO 75965
76310: POP
76311: POP
// end ;
76312: LD_VAR 0 3
76316: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
76317: LD_INT 0
76319: PPUSH
76320: PPUSH
76321: PPUSH
76322: PPUSH
// if not mc_bases or not skirmish then
76323: LD_EXP 64
76327: NOT
76328: PUSH
76329: LD_EXP 62
76333: NOT
76334: OR
76335: IFFALSE 76339
// exit ;
76337: GO 76692
// repeat wait ( 0 0$1 ) ;
76339: LD_INT 35
76341: PPUSH
76342: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
76346: LD_VAR 0 2
76350: PPUSH
76351: LD_VAR 0 3
76355: PPUSH
76356: CALL_OW 284
76360: IFFALSE 76339
// if GetResourceTypeXY ( x , y ) = mat_artefact then
76362: LD_VAR 0 2
76366: PPUSH
76367: LD_VAR 0 3
76371: PPUSH
76372: CALL_OW 283
76376: PUSH
76377: LD_INT 4
76379: EQUAL
76380: IFFALSE 76384
// exit ;
76382: GO 76692
// for i = 1 to mc_bases do
76384: LD_ADDR_VAR 0 7
76388: PUSH
76389: DOUBLE
76390: LD_INT 1
76392: DEC
76393: ST_TO_ADDR
76394: LD_EXP 64
76398: PUSH
76399: FOR_TO
76400: IFFALSE 76690
// begin if mc_crates_area [ i ] then
76402: LD_EXP 82
76406: PUSH
76407: LD_VAR 0 7
76411: ARRAY
76412: IFFALSE 76523
// for j in mc_crates_area [ i ] do
76414: LD_ADDR_VAR 0 8
76418: PUSH
76419: LD_EXP 82
76423: PUSH
76424: LD_VAR 0 7
76428: ARRAY
76429: PUSH
76430: FOR_IN
76431: IFFALSE 76521
// if InArea ( x , y , j ) then
76433: LD_VAR 0 2
76437: PPUSH
76438: LD_VAR 0 3
76442: PPUSH
76443: LD_VAR 0 8
76447: PPUSH
76448: CALL_OW 309
76452: IFFALSE 76519
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
76454: LD_ADDR_EXP 80
76458: PUSH
76459: LD_EXP 80
76463: PPUSH
76464: LD_VAR 0 7
76468: PUSH
76469: LD_EXP 80
76473: PUSH
76474: LD_VAR 0 7
76478: ARRAY
76479: PUSH
76480: LD_INT 1
76482: PLUS
76483: PUSH
76484: EMPTY
76485: LIST
76486: LIST
76487: PPUSH
76488: LD_VAR 0 4
76492: PUSH
76493: LD_VAR 0 2
76497: PUSH
76498: LD_VAR 0 3
76502: PUSH
76503: EMPTY
76504: LIST
76505: LIST
76506: LIST
76507: PPUSH
76508: CALL 18412 0 3
76512: ST_TO_ADDR
// exit ;
76513: POP
76514: POP
76515: POP
76516: POP
76517: GO 76692
// end ;
76519: GO 76430
76521: POP
76522: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76523: LD_ADDR_VAR 0 9
76527: PUSH
76528: LD_EXP 64
76532: PUSH
76533: LD_VAR 0 7
76537: ARRAY
76538: PPUSH
76539: LD_INT 2
76541: PUSH
76542: LD_INT 30
76544: PUSH
76545: LD_INT 0
76547: PUSH
76548: EMPTY
76549: LIST
76550: LIST
76551: PUSH
76552: LD_INT 30
76554: PUSH
76555: LD_INT 1
76557: PUSH
76558: EMPTY
76559: LIST
76560: LIST
76561: PUSH
76562: EMPTY
76563: LIST
76564: LIST
76565: LIST
76566: PPUSH
76567: CALL_OW 72
76571: ST_TO_ADDR
// if not depot then
76572: LD_VAR 0 9
76576: NOT
76577: IFFALSE 76581
// continue ;
76579: GO 76399
// for j in depot do
76581: LD_ADDR_VAR 0 8
76585: PUSH
76586: LD_VAR 0 9
76590: PUSH
76591: FOR_IN
76592: IFFALSE 76686
// if GetDistUnitXY ( j , x , y ) < 30 then
76594: LD_VAR 0 8
76598: PPUSH
76599: LD_VAR 0 2
76603: PPUSH
76604: LD_VAR 0 3
76608: PPUSH
76609: CALL_OW 297
76613: PUSH
76614: LD_INT 30
76616: LESS
76617: IFFALSE 76684
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
76619: LD_ADDR_EXP 80
76623: PUSH
76624: LD_EXP 80
76628: PPUSH
76629: LD_VAR 0 7
76633: PUSH
76634: LD_EXP 80
76638: PUSH
76639: LD_VAR 0 7
76643: ARRAY
76644: PUSH
76645: LD_INT 1
76647: PLUS
76648: PUSH
76649: EMPTY
76650: LIST
76651: LIST
76652: PPUSH
76653: LD_VAR 0 4
76657: PUSH
76658: LD_VAR 0 2
76662: PUSH
76663: LD_VAR 0 3
76667: PUSH
76668: EMPTY
76669: LIST
76670: LIST
76671: LIST
76672: PPUSH
76673: CALL 18412 0 3
76677: ST_TO_ADDR
// exit ;
76678: POP
76679: POP
76680: POP
76681: POP
76682: GO 76692
// end ;
76684: GO 76591
76686: POP
76687: POP
// end ;
76688: GO 76399
76690: POP
76691: POP
// end ;
76692: LD_VAR 0 6
76696: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
76697: LD_INT 0
76699: PPUSH
76700: PPUSH
76701: PPUSH
76702: PPUSH
// if not mc_bases or not skirmish then
76703: LD_EXP 64
76707: NOT
76708: PUSH
76709: LD_EXP 62
76713: NOT
76714: OR
76715: IFFALSE 76719
// exit ;
76717: GO 76996
// side := GetSide ( lab ) ;
76719: LD_ADDR_VAR 0 4
76723: PUSH
76724: LD_VAR 0 2
76728: PPUSH
76729: CALL_OW 255
76733: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
76734: LD_VAR 0 4
76738: PUSH
76739: LD_EXP 90
76743: IN
76744: NOT
76745: PUSH
76746: LD_EXP 91
76750: NOT
76751: OR
76752: PUSH
76753: LD_EXP 64
76757: NOT
76758: OR
76759: IFFALSE 76763
// exit ;
76761: GO 76996
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
76763: LD_ADDR_EXP 91
76767: PUSH
76768: LD_EXP 91
76772: PPUSH
76773: LD_VAR 0 4
76777: PPUSH
76778: LD_EXP 91
76782: PUSH
76783: LD_VAR 0 4
76787: ARRAY
76788: PUSH
76789: LD_VAR 0 1
76793: DIFF
76794: PPUSH
76795: CALL_OW 1
76799: ST_TO_ADDR
// for i = 1 to mc_bases do
76800: LD_ADDR_VAR 0 5
76804: PUSH
76805: DOUBLE
76806: LD_INT 1
76808: DEC
76809: ST_TO_ADDR
76810: LD_EXP 64
76814: PUSH
76815: FOR_TO
76816: IFFALSE 76994
// begin if lab in mc_bases [ i ] then
76818: LD_VAR 0 2
76822: PUSH
76823: LD_EXP 64
76827: PUSH
76828: LD_VAR 0 5
76832: ARRAY
76833: IN
76834: IFFALSE 76992
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
76836: LD_VAR 0 1
76840: PUSH
76841: LD_INT 11
76843: PUSH
76844: LD_INT 4
76846: PUSH
76847: LD_INT 3
76849: PUSH
76850: LD_INT 2
76852: PUSH
76853: EMPTY
76854: LIST
76855: LIST
76856: LIST
76857: LIST
76858: IN
76859: PUSH
76860: LD_EXP 94
76864: PUSH
76865: LD_VAR 0 5
76869: ARRAY
76870: AND
76871: IFFALSE 76992
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
76873: LD_ADDR_VAR 0 6
76877: PUSH
76878: LD_EXP 94
76882: PUSH
76883: LD_VAR 0 5
76887: ARRAY
76888: PUSH
76889: LD_INT 1
76891: ARRAY
76892: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
76893: LD_ADDR_EXP 94
76897: PUSH
76898: LD_EXP 94
76902: PPUSH
76903: LD_VAR 0 5
76907: PPUSH
76908: EMPTY
76909: PPUSH
76910: CALL_OW 1
76914: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
76915: LD_VAR 0 6
76919: PPUSH
76920: LD_INT 0
76922: PPUSH
76923: CALL_OW 109
// ComExitBuilding ( tmp ) ;
76927: LD_VAR 0 6
76931: PPUSH
76932: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
76936: LD_ADDR_EXP 93
76940: PUSH
76941: LD_EXP 93
76945: PPUSH
76946: LD_VAR 0 5
76950: PPUSH
76951: LD_EXP 93
76955: PUSH
76956: LD_VAR 0 5
76960: ARRAY
76961: PPUSH
76962: LD_INT 1
76964: PPUSH
76965: LD_VAR 0 6
76969: PPUSH
76970: CALL_OW 2
76974: PPUSH
76975: CALL_OW 1
76979: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
76980: LD_VAR 0 5
76984: PPUSH
76985: LD_INT 112
76987: PPUSH
76988: CALL 54008 0 2
// end ; end ; end ;
76992: GO 76815
76994: POP
76995: POP
// end ;
76996: LD_VAR 0 3
77000: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
77001: LD_INT 0
77003: PPUSH
77004: PPUSH
77005: PPUSH
77006: PPUSH
77007: PPUSH
77008: PPUSH
77009: PPUSH
77010: PPUSH
// if not mc_bases or not skirmish then
77011: LD_EXP 64
77015: NOT
77016: PUSH
77017: LD_EXP 62
77021: NOT
77022: OR
77023: IFFALSE 77027
// exit ;
77025: GO 78398
// for i = 1 to mc_bases do
77027: LD_ADDR_VAR 0 3
77031: PUSH
77032: DOUBLE
77033: LD_INT 1
77035: DEC
77036: ST_TO_ADDR
77037: LD_EXP 64
77041: PUSH
77042: FOR_TO
77043: IFFALSE 78396
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
77045: LD_VAR 0 1
77049: PUSH
77050: LD_EXP 64
77054: PUSH
77055: LD_VAR 0 3
77059: ARRAY
77060: IN
77061: PUSH
77062: LD_VAR 0 1
77066: PUSH
77067: LD_EXP 71
77071: PUSH
77072: LD_VAR 0 3
77076: ARRAY
77077: IN
77078: OR
77079: PUSH
77080: LD_VAR 0 1
77084: PUSH
77085: LD_EXP 86
77089: PUSH
77090: LD_VAR 0 3
77094: ARRAY
77095: IN
77096: OR
77097: PUSH
77098: LD_VAR 0 1
77102: PUSH
77103: LD_EXP 83
77107: PUSH
77108: LD_VAR 0 3
77112: ARRAY
77113: IN
77114: OR
77115: PUSH
77116: LD_VAR 0 1
77120: PUSH
77121: LD_EXP 93
77125: PUSH
77126: LD_VAR 0 3
77130: ARRAY
77131: IN
77132: OR
77133: PUSH
77134: LD_VAR 0 1
77138: PUSH
77139: LD_EXP 94
77143: PUSH
77144: LD_VAR 0 3
77148: ARRAY
77149: IN
77150: OR
77151: IFFALSE 78394
// begin if un in mc_ape [ i ] then
77153: LD_VAR 0 1
77157: PUSH
77158: LD_EXP 93
77162: PUSH
77163: LD_VAR 0 3
77167: ARRAY
77168: IN
77169: IFFALSE 77208
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
77171: LD_ADDR_EXP 93
77175: PUSH
77176: LD_EXP 93
77180: PPUSH
77181: LD_VAR 0 3
77185: PPUSH
77186: LD_EXP 93
77190: PUSH
77191: LD_VAR 0 3
77195: ARRAY
77196: PUSH
77197: LD_VAR 0 1
77201: DIFF
77202: PPUSH
77203: CALL_OW 1
77207: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
77208: LD_VAR 0 1
77212: PUSH
77213: LD_EXP 94
77217: PUSH
77218: LD_VAR 0 3
77222: ARRAY
77223: IN
77224: IFFALSE 77248
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
77226: LD_ADDR_EXP 94
77230: PUSH
77231: LD_EXP 94
77235: PPUSH
77236: LD_VAR 0 3
77240: PPUSH
77241: EMPTY
77242: PPUSH
77243: CALL_OW 1
77247: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
77248: LD_VAR 0 1
77252: PPUSH
77253: CALL_OW 247
77257: PUSH
77258: LD_INT 2
77260: EQUAL
77261: PUSH
77262: LD_VAR 0 1
77266: PPUSH
77267: CALL_OW 110
77271: PUSH
77272: LD_INT 20
77274: EQUAL
77275: PUSH
77276: LD_VAR 0 1
77280: PUSH
77281: LD_EXP 86
77285: PUSH
77286: LD_VAR 0 3
77290: ARRAY
77291: IN
77292: OR
77293: PUSH
77294: LD_VAR 0 1
77298: PPUSH
77299: CALL_OW 264
77303: PUSH
77304: LD_INT 12
77306: PUSH
77307: LD_INT 51
77309: PUSH
77310: LD_EXP 49
77314: PUSH
77315: LD_INT 32
77317: PUSH
77318: LD_INT 13
77320: PUSH
77321: LD_INT 52
77323: PUSH
77324: LD_INT 31
77326: PUSH
77327: EMPTY
77328: LIST
77329: LIST
77330: LIST
77331: LIST
77332: LIST
77333: LIST
77334: LIST
77335: IN
77336: OR
77337: AND
77338: IFFALSE 77646
// begin if un in mc_defender [ i ] then
77340: LD_VAR 0 1
77344: PUSH
77345: LD_EXP 86
77349: PUSH
77350: LD_VAR 0 3
77354: ARRAY
77355: IN
77356: IFFALSE 77395
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
77358: LD_ADDR_EXP 86
77362: PUSH
77363: LD_EXP 86
77367: PPUSH
77368: LD_VAR 0 3
77372: PPUSH
77373: LD_EXP 86
77377: PUSH
77378: LD_VAR 0 3
77382: ARRAY
77383: PUSH
77384: LD_VAR 0 1
77388: DIFF
77389: PPUSH
77390: CALL_OW 1
77394: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
77395: LD_ADDR_VAR 0 8
77399: PUSH
77400: LD_VAR 0 3
77404: PPUSH
77405: LD_INT 3
77407: PPUSH
77408: CALL 74064 0 2
77412: ST_TO_ADDR
// if fac then
77413: LD_VAR 0 8
77417: IFFALSE 77646
// begin for j in fac do
77419: LD_ADDR_VAR 0 4
77423: PUSH
77424: LD_VAR 0 8
77428: PUSH
77429: FOR_IN
77430: IFFALSE 77644
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
77432: LD_ADDR_VAR 0 9
77436: PUSH
77437: LD_VAR 0 8
77441: PPUSH
77442: LD_VAR 0 1
77446: PPUSH
77447: CALL_OW 265
77451: PPUSH
77452: LD_VAR 0 1
77456: PPUSH
77457: CALL_OW 262
77461: PPUSH
77462: LD_VAR 0 1
77466: PPUSH
77467: CALL_OW 263
77471: PPUSH
77472: LD_VAR 0 1
77476: PPUSH
77477: CALL_OW 264
77481: PPUSH
77482: CALL 15944 0 5
77486: ST_TO_ADDR
// if components then
77487: LD_VAR 0 9
77491: IFFALSE 77642
// begin if GetWeapon ( un ) = ar_control_tower then
77493: LD_VAR 0 1
77497: PPUSH
77498: CALL_OW 264
77502: PUSH
77503: LD_INT 31
77505: EQUAL
77506: IFFALSE 77623
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
77508: LD_VAR 0 1
77512: PPUSH
77513: CALL_OW 311
77517: PPUSH
77518: LD_INT 0
77520: PPUSH
77521: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
77525: LD_ADDR_EXP 104
77529: PUSH
77530: LD_EXP 104
77534: PPUSH
77535: LD_VAR 0 3
77539: PPUSH
77540: LD_EXP 104
77544: PUSH
77545: LD_VAR 0 3
77549: ARRAY
77550: PUSH
77551: LD_VAR 0 1
77555: PPUSH
77556: CALL_OW 311
77560: DIFF
77561: PPUSH
77562: CALL_OW 1
77566: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
77567: LD_ADDR_VAR 0 7
77571: PUSH
77572: LD_EXP 85
77576: PUSH
77577: LD_VAR 0 3
77581: ARRAY
77582: PPUSH
77583: LD_INT 1
77585: PPUSH
77586: LD_VAR 0 9
77590: PPUSH
77591: CALL_OW 2
77595: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
77596: LD_ADDR_EXP 85
77600: PUSH
77601: LD_EXP 85
77605: PPUSH
77606: LD_VAR 0 3
77610: PPUSH
77611: LD_VAR 0 7
77615: PPUSH
77616: CALL_OW 1
77620: ST_TO_ADDR
// end else
77621: GO 77640
// MC_InsertProduceList ( i , [ components ] ) ;
77623: LD_VAR 0 3
77627: PPUSH
77628: LD_VAR 0 9
77632: PUSH
77633: EMPTY
77634: LIST
77635: PPUSH
77636: CALL 73609 0 2
// break ;
77640: GO 77644
// end ; end ;
77642: GO 77429
77644: POP
77645: POP
// end ; end ; if GetType ( un ) = unit_building then
77646: LD_VAR 0 1
77650: PPUSH
77651: CALL_OW 247
77655: PUSH
77656: LD_INT 3
77658: EQUAL
77659: IFFALSE 78062
// begin btype := GetBType ( un ) ;
77661: LD_ADDR_VAR 0 5
77665: PUSH
77666: LD_VAR 0 1
77670: PPUSH
77671: CALL_OW 266
77675: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
77676: LD_VAR 0 5
77680: PUSH
77681: LD_INT 29
77683: PUSH
77684: LD_INT 30
77686: PUSH
77687: EMPTY
77688: LIST
77689: LIST
77690: IN
77691: IFFALSE 77764
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
77693: LD_VAR 0 1
77697: PPUSH
77698: CALL_OW 250
77702: PPUSH
77703: LD_VAR 0 1
77707: PPUSH
77708: CALL_OW 251
77712: PPUSH
77713: LD_VAR 0 1
77717: PPUSH
77718: CALL_OW 255
77722: PPUSH
77723: CALL_OW 440
77727: NOT
77728: IFFALSE 77764
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
77730: LD_VAR 0 1
77734: PPUSH
77735: CALL_OW 250
77739: PPUSH
77740: LD_VAR 0 1
77744: PPUSH
77745: CALL_OW 251
77749: PPUSH
77750: LD_VAR 0 1
77754: PPUSH
77755: CALL_OW 255
77759: PPUSH
77760: CALL_OW 441
// end ; if btype = b_warehouse then
77764: LD_VAR 0 5
77768: PUSH
77769: LD_INT 1
77771: EQUAL
77772: IFFALSE 77790
// begin btype := b_depot ;
77774: LD_ADDR_VAR 0 5
77778: PUSH
77779: LD_INT 0
77781: ST_TO_ADDR
// pos := 1 ;
77782: LD_ADDR_VAR 0 6
77786: PUSH
77787: LD_INT 1
77789: ST_TO_ADDR
// end ; if btype = b_factory then
77790: LD_VAR 0 5
77794: PUSH
77795: LD_INT 3
77797: EQUAL
77798: IFFALSE 77816
// begin btype := b_workshop ;
77800: LD_ADDR_VAR 0 5
77804: PUSH
77805: LD_INT 2
77807: ST_TO_ADDR
// pos := 1 ;
77808: LD_ADDR_VAR 0 6
77812: PUSH
77813: LD_INT 1
77815: ST_TO_ADDR
// end ; if btype = b_barracks then
77816: LD_VAR 0 5
77820: PUSH
77821: LD_INT 5
77823: EQUAL
77824: IFFALSE 77834
// btype := b_armoury ;
77826: LD_ADDR_VAR 0 5
77830: PUSH
77831: LD_INT 4
77833: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
77834: LD_VAR 0 5
77838: PUSH
77839: LD_INT 7
77841: PUSH
77842: LD_INT 8
77844: PUSH
77845: EMPTY
77846: LIST
77847: LIST
77848: IN
77849: IFFALSE 77859
// btype := b_lab ;
77851: LD_ADDR_VAR 0 5
77855: PUSH
77856: LD_INT 6
77858: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
77859: LD_ADDR_EXP 69
77863: PUSH
77864: LD_EXP 69
77868: PPUSH
77869: LD_VAR 0 3
77873: PUSH
77874: LD_EXP 69
77878: PUSH
77879: LD_VAR 0 3
77883: ARRAY
77884: PUSH
77885: LD_INT 1
77887: PLUS
77888: PUSH
77889: EMPTY
77890: LIST
77891: LIST
77892: PPUSH
77893: LD_VAR 0 5
77897: PUSH
77898: LD_VAR 0 1
77902: PPUSH
77903: CALL_OW 250
77907: PUSH
77908: LD_VAR 0 1
77912: PPUSH
77913: CALL_OW 251
77917: PUSH
77918: LD_VAR 0 1
77922: PPUSH
77923: CALL_OW 254
77927: PUSH
77928: EMPTY
77929: LIST
77930: LIST
77931: LIST
77932: LIST
77933: PPUSH
77934: CALL 18412 0 3
77938: ST_TO_ADDR
// if pos = 1 then
77939: LD_VAR 0 6
77943: PUSH
77944: LD_INT 1
77946: EQUAL
77947: IFFALSE 78062
// begin tmp := mc_build_list [ i ] ;
77949: LD_ADDR_VAR 0 7
77953: PUSH
77954: LD_EXP 69
77958: PUSH
77959: LD_VAR 0 3
77963: ARRAY
77964: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
77965: LD_VAR 0 7
77969: PPUSH
77970: LD_INT 2
77972: PUSH
77973: LD_INT 30
77975: PUSH
77976: LD_INT 0
77978: PUSH
77979: EMPTY
77980: LIST
77981: LIST
77982: PUSH
77983: LD_INT 30
77985: PUSH
77986: LD_INT 1
77988: PUSH
77989: EMPTY
77990: LIST
77991: LIST
77992: PUSH
77993: EMPTY
77994: LIST
77995: LIST
77996: LIST
77997: PPUSH
77998: CALL_OW 72
78002: IFFALSE 78012
// pos := 2 ;
78004: LD_ADDR_VAR 0 6
78008: PUSH
78009: LD_INT 2
78011: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
78012: LD_ADDR_VAR 0 7
78016: PUSH
78017: LD_VAR 0 7
78021: PPUSH
78022: LD_VAR 0 6
78026: PPUSH
78027: LD_VAR 0 7
78031: PPUSH
78032: CALL 18738 0 3
78036: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
78037: LD_ADDR_EXP 69
78041: PUSH
78042: LD_EXP 69
78046: PPUSH
78047: LD_VAR 0 3
78051: PPUSH
78052: LD_VAR 0 7
78056: PPUSH
78057: CALL_OW 1
78061: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
78062: LD_VAR 0 1
78066: PUSH
78067: LD_EXP 64
78071: PUSH
78072: LD_VAR 0 3
78076: ARRAY
78077: IN
78078: IFFALSE 78117
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
78080: LD_ADDR_EXP 64
78084: PUSH
78085: LD_EXP 64
78089: PPUSH
78090: LD_VAR 0 3
78094: PPUSH
78095: LD_EXP 64
78099: PUSH
78100: LD_VAR 0 3
78104: ARRAY
78105: PUSH
78106: LD_VAR 0 1
78110: DIFF
78111: PPUSH
78112: CALL_OW 1
78116: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
78117: LD_VAR 0 1
78121: PUSH
78122: LD_EXP 71
78126: PUSH
78127: LD_VAR 0 3
78131: ARRAY
78132: IN
78133: IFFALSE 78172
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
78135: LD_ADDR_EXP 71
78139: PUSH
78140: LD_EXP 71
78144: PPUSH
78145: LD_VAR 0 3
78149: PPUSH
78150: LD_EXP 71
78154: PUSH
78155: LD_VAR 0 3
78159: ARRAY
78160: PUSH
78161: LD_VAR 0 1
78165: DIFF
78166: PPUSH
78167: CALL_OW 1
78171: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
78172: LD_VAR 0 1
78176: PUSH
78177: LD_EXP 83
78181: PUSH
78182: LD_VAR 0 3
78186: ARRAY
78187: IN
78188: IFFALSE 78227
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
78190: LD_ADDR_EXP 83
78194: PUSH
78195: LD_EXP 83
78199: PPUSH
78200: LD_VAR 0 3
78204: PPUSH
78205: LD_EXP 83
78209: PUSH
78210: LD_VAR 0 3
78214: ARRAY
78215: PUSH
78216: LD_VAR 0 1
78220: DIFF
78221: PPUSH
78222: CALL_OW 1
78226: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
78227: LD_VAR 0 1
78231: PUSH
78232: LD_EXP 86
78236: PUSH
78237: LD_VAR 0 3
78241: ARRAY
78242: IN
78243: IFFALSE 78282
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
78245: LD_ADDR_EXP 86
78249: PUSH
78250: LD_EXP 86
78254: PPUSH
78255: LD_VAR 0 3
78259: PPUSH
78260: LD_EXP 86
78264: PUSH
78265: LD_VAR 0 3
78269: ARRAY
78270: PUSH
78271: LD_VAR 0 1
78275: DIFF
78276: PPUSH
78277: CALL_OW 1
78281: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
78282: LD_VAR 0 1
78286: PUSH
78287: LD_EXP 73
78291: PUSH
78292: LD_VAR 0 3
78296: ARRAY
78297: IN
78298: IFFALSE 78337
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
78300: LD_ADDR_EXP 73
78304: PUSH
78305: LD_EXP 73
78309: PPUSH
78310: LD_VAR 0 3
78314: PPUSH
78315: LD_EXP 73
78319: PUSH
78320: LD_VAR 0 3
78324: ARRAY
78325: PUSH
78326: LD_VAR 0 1
78330: DIFF
78331: PPUSH
78332: CALL_OW 1
78336: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
78337: LD_VAR 0 1
78341: PUSH
78342: LD_EXP 72
78346: PUSH
78347: LD_VAR 0 3
78351: ARRAY
78352: IN
78353: IFFALSE 78392
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
78355: LD_ADDR_EXP 72
78359: PUSH
78360: LD_EXP 72
78364: PPUSH
78365: LD_VAR 0 3
78369: PPUSH
78370: LD_EXP 72
78374: PUSH
78375: LD_VAR 0 3
78379: ARRAY
78380: PUSH
78381: LD_VAR 0 1
78385: DIFF
78386: PPUSH
78387: CALL_OW 1
78391: ST_TO_ADDR
// end ; break ;
78392: GO 78396
// end ;
78394: GO 77042
78396: POP
78397: POP
// end ;
78398: LD_VAR 0 2
78402: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
78403: LD_INT 0
78405: PPUSH
78406: PPUSH
78407: PPUSH
// if not mc_bases or not skirmish then
78408: LD_EXP 64
78412: NOT
78413: PUSH
78414: LD_EXP 62
78418: NOT
78419: OR
78420: IFFALSE 78424
// exit ;
78422: GO 78639
// for i = 1 to mc_bases do
78424: LD_ADDR_VAR 0 3
78428: PUSH
78429: DOUBLE
78430: LD_INT 1
78432: DEC
78433: ST_TO_ADDR
78434: LD_EXP 64
78438: PUSH
78439: FOR_TO
78440: IFFALSE 78637
// begin if building in mc_construct_list [ i ] then
78442: LD_VAR 0 1
78446: PUSH
78447: LD_EXP 71
78451: PUSH
78452: LD_VAR 0 3
78456: ARRAY
78457: IN
78458: IFFALSE 78635
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
78460: LD_ADDR_EXP 71
78464: PUSH
78465: LD_EXP 71
78469: PPUSH
78470: LD_VAR 0 3
78474: PPUSH
78475: LD_EXP 71
78479: PUSH
78480: LD_VAR 0 3
78484: ARRAY
78485: PUSH
78486: LD_VAR 0 1
78490: DIFF
78491: PPUSH
78492: CALL_OW 1
78496: ST_TO_ADDR
// if building in mc_lab [ i ] then
78497: LD_VAR 0 1
78501: PUSH
78502: LD_EXP 97
78506: PUSH
78507: LD_VAR 0 3
78511: ARRAY
78512: IN
78513: IFFALSE 78568
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
78515: LD_ADDR_EXP 98
78519: PUSH
78520: LD_EXP 98
78524: PPUSH
78525: LD_VAR 0 3
78529: PPUSH
78530: LD_EXP 98
78534: PUSH
78535: LD_VAR 0 3
78539: ARRAY
78540: PPUSH
78541: LD_INT 1
78543: PPUSH
78544: LD_EXP 98
78548: PUSH
78549: LD_VAR 0 3
78553: ARRAY
78554: PPUSH
78555: LD_INT 0
78557: PPUSH
78558: CALL 17830 0 4
78562: PPUSH
78563: CALL_OW 1
78567: ST_TO_ADDR
// if not building in mc_bases [ i ] then
78568: LD_VAR 0 1
78572: PUSH
78573: LD_EXP 64
78577: PUSH
78578: LD_VAR 0 3
78582: ARRAY
78583: IN
78584: NOT
78585: IFFALSE 78631
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
78587: LD_ADDR_EXP 64
78591: PUSH
78592: LD_EXP 64
78596: PPUSH
78597: LD_VAR 0 3
78601: PUSH
78602: LD_EXP 64
78606: PUSH
78607: LD_VAR 0 3
78611: ARRAY
78612: PUSH
78613: LD_INT 1
78615: PLUS
78616: PUSH
78617: EMPTY
78618: LIST
78619: LIST
78620: PPUSH
78621: LD_VAR 0 1
78625: PPUSH
78626: CALL 18412 0 3
78630: ST_TO_ADDR
// exit ;
78631: POP
78632: POP
78633: GO 78639
// end ; end ;
78635: GO 78439
78637: POP
78638: POP
// end ;
78639: LD_VAR 0 2
78643: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
78644: LD_INT 0
78646: PPUSH
78647: PPUSH
78648: PPUSH
78649: PPUSH
78650: PPUSH
78651: PPUSH
78652: PPUSH
// if not mc_bases or not skirmish then
78653: LD_EXP 64
78657: NOT
78658: PUSH
78659: LD_EXP 62
78663: NOT
78664: OR
78665: IFFALSE 78669
// exit ;
78667: GO 79330
// for i = 1 to mc_bases do
78669: LD_ADDR_VAR 0 3
78673: PUSH
78674: DOUBLE
78675: LD_INT 1
78677: DEC
78678: ST_TO_ADDR
78679: LD_EXP 64
78683: PUSH
78684: FOR_TO
78685: IFFALSE 79328
// begin if building in mc_construct_list [ i ] then
78687: LD_VAR 0 1
78691: PUSH
78692: LD_EXP 71
78696: PUSH
78697: LD_VAR 0 3
78701: ARRAY
78702: IN
78703: IFFALSE 79326
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
78705: LD_ADDR_EXP 71
78709: PUSH
78710: LD_EXP 71
78714: PPUSH
78715: LD_VAR 0 3
78719: PPUSH
78720: LD_EXP 71
78724: PUSH
78725: LD_VAR 0 3
78729: ARRAY
78730: PUSH
78731: LD_VAR 0 1
78735: DIFF
78736: PPUSH
78737: CALL_OW 1
78741: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
78742: LD_ADDR_EXP 64
78746: PUSH
78747: LD_EXP 64
78751: PPUSH
78752: LD_VAR 0 3
78756: PUSH
78757: LD_EXP 64
78761: PUSH
78762: LD_VAR 0 3
78766: ARRAY
78767: PUSH
78768: LD_INT 1
78770: PLUS
78771: PUSH
78772: EMPTY
78773: LIST
78774: LIST
78775: PPUSH
78776: LD_VAR 0 1
78780: PPUSH
78781: CALL 18412 0 3
78785: ST_TO_ADDR
// btype := GetBType ( building ) ;
78786: LD_ADDR_VAR 0 5
78790: PUSH
78791: LD_VAR 0 1
78795: PPUSH
78796: CALL_OW 266
78800: ST_TO_ADDR
// side := GetSide ( building ) ;
78801: LD_ADDR_VAR 0 8
78805: PUSH
78806: LD_VAR 0 1
78810: PPUSH
78811: CALL_OW 255
78815: ST_TO_ADDR
// if btype = b_lab then
78816: LD_VAR 0 5
78820: PUSH
78821: LD_INT 6
78823: EQUAL
78824: IFFALSE 78874
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
78826: LD_ADDR_EXP 97
78830: PUSH
78831: LD_EXP 97
78835: PPUSH
78836: LD_VAR 0 3
78840: PUSH
78841: LD_EXP 97
78845: PUSH
78846: LD_VAR 0 3
78850: ARRAY
78851: PUSH
78852: LD_INT 1
78854: PLUS
78855: PUSH
78856: EMPTY
78857: LIST
78858: LIST
78859: PPUSH
78860: LD_VAR 0 1
78864: PPUSH
78865: CALL 18412 0 3
78869: ST_TO_ADDR
// exit ;
78870: POP
78871: POP
78872: GO 79330
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
78874: LD_VAR 0 5
78878: PUSH
78879: LD_INT 0
78881: PUSH
78882: LD_INT 2
78884: PUSH
78885: LD_INT 4
78887: PUSH
78888: EMPTY
78889: LIST
78890: LIST
78891: LIST
78892: IN
78893: IFFALSE 79017
// begin if btype = b_armoury then
78895: LD_VAR 0 5
78899: PUSH
78900: LD_INT 4
78902: EQUAL
78903: IFFALSE 78913
// btype := b_barracks ;
78905: LD_ADDR_VAR 0 5
78909: PUSH
78910: LD_INT 5
78912: ST_TO_ADDR
// if btype = b_depot then
78913: LD_VAR 0 5
78917: PUSH
78918: LD_INT 0
78920: EQUAL
78921: IFFALSE 78931
// btype := b_warehouse ;
78923: LD_ADDR_VAR 0 5
78927: PUSH
78928: LD_INT 1
78930: ST_TO_ADDR
// if btype = b_workshop then
78931: LD_VAR 0 5
78935: PUSH
78936: LD_INT 2
78938: EQUAL
78939: IFFALSE 78949
// btype := b_factory ;
78941: LD_ADDR_VAR 0 5
78945: PUSH
78946: LD_INT 3
78948: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
78949: LD_VAR 0 5
78953: PPUSH
78954: LD_VAR 0 8
78958: PPUSH
78959: CALL_OW 323
78963: PUSH
78964: LD_INT 1
78966: EQUAL
78967: IFFALSE 79013
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
78969: LD_ADDR_EXP 96
78973: PUSH
78974: LD_EXP 96
78978: PPUSH
78979: LD_VAR 0 3
78983: PUSH
78984: LD_EXP 96
78988: PUSH
78989: LD_VAR 0 3
78993: ARRAY
78994: PUSH
78995: LD_INT 1
78997: PLUS
78998: PUSH
78999: EMPTY
79000: LIST
79001: LIST
79002: PPUSH
79003: LD_VAR 0 1
79007: PPUSH
79008: CALL 18412 0 3
79012: ST_TO_ADDR
// exit ;
79013: POP
79014: POP
79015: GO 79330
// end ; if btype in [ b_bunker , b_turret ] then
79017: LD_VAR 0 5
79021: PUSH
79022: LD_INT 32
79024: PUSH
79025: LD_INT 33
79027: PUSH
79028: EMPTY
79029: LIST
79030: LIST
79031: IN
79032: IFFALSE 79322
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
79034: LD_ADDR_EXP 72
79038: PUSH
79039: LD_EXP 72
79043: PPUSH
79044: LD_VAR 0 3
79048: PUSH
79049: LD_EXP 72
79053: PUSH
79054: LD_VAR 0 3
79058: ARRAY
79059: PUSH
79060: LD_INT 1
79062: PLUS
79063: PUSH
79064: EMPTY
79065: LIST
79066: LIST
79067: PPUSH
79068: LD_VAR 0 1
79072: PPUSH
79073: CALL 18412 0 3
79077: ST_TO_ADDR
// if btype = b_bunker then
79078: LD_VAR 0 5
79082: PUSH
79083: LD_INT 32
79085: EQUAL
79086: IFFALSE 79322
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
79088: LD_ADDR_EXP 73
79092: PUSH
79093: LD_EXP 73
79097: PPUSH
79098: LD_VAR 0 3
79102: PUSH
79103: LD_EXP 73
79107: PUSH
79108: LD_VAR 0 3
79112: ARRAY
79113: PUSH
79114: LD_INT 1
79116: PLUS
79117: PUSH
79118: EMPTY
79119: LIST
79120: LIST
79121: PPUSH
79122: LD_VAR 0 1
79126: PPUSH
79127: CALL 18412 0 3
79131: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
79132: LD_ADDR_VAR 0 6
79136: PUSH
79137: LD_EXP 64
79141: PUSH
79142: LD_VAR 0 3
79146: ARRAY
79147: PPUSH
79148: LD_INT 25
79150: PUSH
79151: LD_INT 1
79153: PUSH
79154: EMPTY
79155: LIST
79156: LIST
79157: PUSH
79158: LD_INT 3
79160: PUSH
79161: LD_INT 54
79163: PUSH
79164: EMPTY
79165: LIST
79166: PUSH
79167: EMPTY
79168: LIST
79169: LIST
79170: PUSH
79171: EMPTY
79172: LIST
79173: LIST
79174: PPUSH
79175: CALL_OW 72
79179: ST_TO_ADDR
// if tmp then
79180: LD_VAR 0 6
79184: IFFALSE 79190
// exit ;
79186: POP
79187: POP
79188: GO 79330
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
79190: LD_ADDR_VAR 0 6
79194: PUSH
79195: LD_EXP 64
79199: PUSH
79200: LD_VAR 0 3
79204: ARRAY
79205: PPUSH
79206: LD_INT 2
79208: PUSH
79209: LD_INT 30
79211: PUSH
79212: LD_INT 4
79214: PUSH
79215: EMPTY
79216: LIST
79217: LIST
79218: PUSH
79219: LD_INT 30
79221: PUSH
79222: LD_INT 5
79224: PUSH
79225: EMPTY
79226: LIST
79227: LIST
79228: PUSH
79229: EMPTY
79230: LIST
79231: LIST
79232: LIST
79233: PPUSH
79234: CALL_OW 72
79238: ST_TO_ADDR
// if not tmp then
79239: LD_VAR 0 6
79243: NOT
79244: IFFALSE 79250
// exit ;
79246: POP
79247: POP
79248: GO 79330
// for j in tmp do
79250: LD_ADDR_VAR 0 4
79254: PUSH
79255: LD_VAR 0 6
79259: PUSH
79260: FOR_IN
79261: IFFALSE 79320
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
79263: LD_ADDR_VAR 0 7
79267: PUSH
79268: LD_VAR 0 4
79272: PPUSH
79273: CALL_OW 313
79277: PPUSH
79278: LD_INT 25
79280: PUSH
79281: LD_INT 1
79283: PUSH
79284: EMPTY
79285: LIST
79286: LIST
79287: PPUSH
79288: CALL_OW 72
79292: ST_TO_ADDR
// if units then
79293: LD_VAR 0 7
79297: IFFALSE 79318
// begin ComExitBuilding ( units [ 1 ] ) ;
79299: LD_VAR 0 7
79303: PUSH
79304: LD_INT 1
79306: ARRAY
79307: PPUSH
79308: CALL_OW 122
// exit ;
79312: POP
79313: POP
79314: POP
79315: POP
79316: GO 79330
// end ; end ;
79318: GO 79260
79320: POP
79321: POP
// end ; end ; exit ;
79322: POP
79323: POP
79324: GO 79330
// end ; end ;
79326: GO 78684
79328: POP
79329: POP
// end ;
79330: LD_VAR 0 2
79334: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
79335: LD_INT 0
79337: PPUSH
79338: PPUSH
79339: PPUSH
79340: PPUSH
79341: PPUSH
79342: PPUSH
79343: PPUSH
// if not mc_bases or not skirmish then
79344: LD_EXP 64
79348: NOT
79349: PUSH
79350: LD_EXP 62
79354: NOT
79355: OR
79356: IFFALSE 79360
// exit ;
79358: GO 79591
// btype := GetBType ( building ) ;
79360: LD_ADDR_VAR 0 6
79364: PUSH
79365: LD_VAR 0 1
79369: PPUSH
79370: CALL_OW 266
79374: ST_TO_ADDR
// x := GetX ( building ) ;
79375: LD_ADDR_VAR 0 7
79379: PUSH
79380: LD_VAR 0 1
79384: PPUSH
79385: CALL_OW 250
79389: ST_TO_ADDR
// y := GetY ( building ) ;
79390: LD_ADDR_VAR 0 8
79394: PUSH
79395: LD_VAR 0 1
79399: PPUSH
79400: CALL_OW 251
79404: ST_TO_ADDR
// d := GetDir ( building ) ;
79405: LD_ADDR_VAR 0 9
79409: PUSH
79410: LD_VAR 0 1
79414: PPUSH
79415: CALL_OW 254
79419: ST_TO_ADDR
// for i = 1 to mc_bases do
79420: LD_ADDR_VAR 0 4
79424: PUSH
79425: DOUBLE
79426: LD_INT 1
79428: DEC
79429: ST_TO_ADDR
79430: LD_EXP 64
79434: PUSH
79435: FOR_TO
79436: IFFALSE 79589
// begin if not mc_build_list [ i ] then
79438: LD_EXP 69
79442: PUSH
79443: LD_VAR 0 4
79447: ARRAY
79448: NOT
79449: IFFALSE 79453
// continue ;
79451: GO 79435
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
79453: LD_VAR 0 6
79457: PUSH
79458: LD_VAR 0 7
79462: PUSH
79463: LD_VAR 0 8
79467: PUSH
79468: LD_VAR 0 9
79472: PUSH
79473: EMPTY
79474: LIST
79475: LIST
79476: LIST
79477: LIST
79478: PPUSH
79479: LD_EXP 69
79483: PUSH
79484: LD_VAR 0 4
79488: ARRAY
79489: PUSH
79490: LD_INT 1
79492: ARRAY
79493: PPUSH
79494: CALL 24581 0 2
79498: IFFALSE 79587
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
79500: LD_ADDR_EXP 69
79504: PUSH
79505: LD_EXP 69
79509: PPUSH
79510: LD_VAR 0 4
79514: PPUSH
79515: LD_EXP 69
79519: PUSH
79520: LD_VAR 0 4
79524: ARRAY
79525: PPUSH
79526: LD_INT 1
79528: PPUSH
79529: CALL_OW 3
79533: PPUSH
79534: CALL_OW 1
79538: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
79539: LD_ADDR_EXP 71
79543: PUSH
79544: LD_EXP 71
79548: PPUSH
79549: LD_VAR 0 4
79553: PUSH
79554: LD_EXP 71
79558: PUSH
79559: LD_VAR 0 4
79563: ARRAY
79564: PUSH
79565: LD_INT 1
79567: PLUS
79568: PUSH
79569: EMPTY
79570: LIST
79571: LIST
79572: PPUSH
79573: LD_VAR 0 1
79577: PPUSH
79578: CALL 18412 0 3
79582: ST_TO_ADDR
// exit ;
79583: POP
79584: POP
79585: GO 79591
// end ; end ;
79587: GO 79435
79589: POP
79590: POP
// end ;
79591: LD_VAR 0 3
79595: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
79596: LD_INT 0
79598: PPUSH
79599: PPUSH
79600: PPUSH
// if not mc_bases or not skirmish then
79601: LD_EXP 64
79605: NOT
79606: PUSH
79607: LD_EXP 62
79611: NOT
79612: OR
79613: IFFALSE 79617
// exit ;
79615: GO 79807
// for i = 1 to mc_bases do
79617: LD_ADDR_VAR 0 4
79621: PUSH
79622: DOUBLE
79623: LD_INT 1
79625: DEC
79626: ST_TO_ADDR
79627: LD_EXP 64
79631: PUSH
79632: FOR_TO
79633: IFFALSE 79720
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
79635: LD_VAR 0 1
79639: PUSH
79640: LD_EXP 72
79644: PUSH
79645: LD_VAR 0 4
79649: ARRAY
79650: IN
79651: PUSH
79652: LD_VAR 0 1
79656: PUSH
79657: LD_EXP 73
79661: PUSH
79662: LD_VAR 0 4
79666: ARRAY
79667: IN
79668: NOT
79669: AND
79670: IFFALSE 79718
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
79672: LD_ADDR_EXP 73
79676: PUSH
79677: LD_EXP 73
79681: PPUSH
79682: LD_VAR 0 4
79686: PUSH
79687: LD_EXP 73
79691: PUSH
79692: LD_VAR 0 4
79696: ARRAY
79697: PUSH
79698: LD_INT 1
79700: PLUS
79701: PUSH
79702: EMPTY
79703: LIST
79704: LIST
79705: PPUSH
79706: LD_VAR 0 1
79710: PPUSH
79711: CALL 18412 0 3
79715: ST_TO_ADDR
// break ;
79716: GO 79720
// end ; end ;
79718: GO 79632
79720: POP
79721: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
79722: LD_VAR 0 1
79726: PPUSH
79727: CALL_OW 257
79731: PUSH
79732: LD_EXP 90
79736: IN
79737: PUSH
79738: LD_VAR 0 1
79742: PPUSH
79743: CALL_OW 266
79747: PUSH
79748: LD_INT 5
79750: EQUAL
79751: AND
79752: PUSH
79753: LD_VAR 0 2
79757: PPUSH
79758: CALL_OW 110
79762: PUSH
79763: LD_INT 18
79765: NONEQUAL
79766: AND
79767: IFFALSE 79807
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
79769: LD_VAR 0 2
79773: PPUSH
79774: CALL_OW 257
79778: PUSH
79779: LD_INT 5
79781: PUSH
79782: LD_INT 8
79784: PUSH
79785: LD_INT 9
79787: PUSH
79788: EMPTY
79789: LIST
79790: LIST
79791: LIST
79792: IN
79793: IFFALSE 79807
// SetClass ( unit , 1 ) ;
79795: LD_VAR 0 2
79799: PPUSH
79800: LD_INT 1
79802: PPUSH
79803: CALL_OW 336
// end ;
79807: LD_VAR 0 3
79811: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
79812: LD_INT 0
79814: PPUSH
79815: PPUSH
// if not mc_bases or not skirmish then
79816: LD_EXP 64
79820: NOT
79821: PUSH
79822: LD_EXP 62
79826: NOT
79827: OR
79828: IFFALSE 79832
// exit ;
79830: GO 79948
// if GetLives ( abandoned_vehicle ) > 250 then
79832: LD_VAR 0 2
79836: PPUSH
79837: CALL_OW 256
79841: PUSH
79842: LD_INT 250
79844: GREATER
79845: IFFALSE 79849
// exit ;
79847: GO 79948
// for i = 1 to mc_bases do
79849: LD_ADDR_VAR 0 6
79853: PUSH
79854: DOUBLE
79855: LD_INT 1
79857: DEC
79858: ST_TO_ADDR
79859: LD_EXP 64
79863: PUSH
79864: FOR_TO
79865: IFFALSE 79946
// begin if driver in mc_bases [ i ] then
79867: LD_VAR 0 1
79871: PUSH
79872: LD_EXP 64
79876: PUSH
79877: LD_VAR 0 6
79881: ARRAY
79882: IN
79883: IFFALSE 79944
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
79885: LD_VAR 0 1
79889: PPUSH
79890: LD_EXP 64
79894: PUSH
79895: LD_VAR 0 6
79899: ARRAY
79900: PPUSH
79901: LD_INT 2
79903: PUSH
79904: LD_INT 30
79906: PUSH
79907: LD_INT 0
79909: PUSH
79910: EMPTY
79911: LIST
79912: LIST
79913: PUSH
79914: LD_INT 30
79916: PUSH
79917: LD_INT 1
79919: PUSH
79920: EMPTY
79921: LIST
79922: LIST
79923: PUSH
79924: EMPTY
79925: LIST
79926: LIST
79927: LIST
79928: PPUSH
79929: CALL_OW 72
79933: PUSH
79934: LD_INT 1
79936: ARRAY
79937: PPUSH
79938: CALL_OW 112
// break ;
79942: GO 79946
// end ; end ;
79944: GO 79864
79946: POP
79947: POP
// end ; end_of_file end_of_file
79948: LD_VAR 0 5
79952: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
79953: GO 79955
79955: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
79956: LD_STRING initStreamRollete();
79958: PPUSH
79959: CALL_OW 559
// InitStreamMode ;
79963: CALL 79972 0 0
// DefineStreamItems ( ) ;
79967: CALL 80412 0 0
// end ;
79971: END
// function InitStreamMode ; begin
79972: LD_INT 0
79974: PPUSH
// streamModeActive := false ;
79975: LD_ADDR_EXP 107
79979: PUSH
79980: LD_INT 0
79982: ST_TO_ADDR
// normalCounter := 36 ;
79983: LD_ADDR_EXP 108
79987: PUSH
79988: LD_INT 36
79990: ST_TO_ADDR
// hardcoreCounter := 16 ;
79991: LD_ADDR_EXP 109
79995: PUSH
79996: LD_INT 16
79998: ST_TO_ADDR
// sRocket := false ;
79999: LD_ADDR_EXP 112
80003: PUSH
80004: LD_INT 0
80006: ST_TO_ADDR
// sSpeed := false ;
80007: LD_ADDR_EXP 111
80011: PUSH
80012: LD_INT 0
80014: ST_TO_ADDR
// sEngine := false ;
80015: LD_ADDR_EXP 113
80019: PUSH
80020: LD_INT 0
80022: ST_TO_ADDR
// sSpec := false ;
80023: LD_ADDR_EXP 110
80027: PUSH
80028: LD_INT 0
80030: ST_TO_ADDR
// sLevel := false ;
80031: LD_ADDR_EXP 114
80035: PUSH
80036: LD_INT 0
80038: ST_TO_ADDR
// sArmoury := false ;
80039: LD_ADDR_EXP 115
80043: PUSH
80044: LD_INT 0
80046: ST_TO_ADDR
// sRadar := false ;
80047: LD_ADDR_EXP 116
80051: PUSH
80052: LD_INT 0
80054: ST_TO_ADDR
// sBunker := false ;
80055: LD_ADDR_EXP 117
80059: PUSH
80060: LD_INT 0
80062: ST_TO_ADDR
// sHack := false ;
80063: LD_ADDR_EXP 118
80067: PUSH
80068: LD_INT 0
80070: ST_TO_ADDR
// sFire := false ;
80071: LD_ADDR_EXP 119
80075: PUSH
80076: LD_INT 0
80078: ST_TO_ADDR
// sRefresh := false ;
80079: LD_ADDR_EXP 120
80083: PUSH
80084: LD_INT 0
80086: ST_TO_ADDR
// sExp := false ;
80087: LD_ADDR_EXP 121
80091: PUSH
80092: LD_INT 0
80094: ST_TO_ADDR
// sDepot := false ;
80095: LD_ADDR_EXP 122
80099: PUSH
80100: LD_INT 0
80102: ST_TO_ADDR
// sFlag := false ;
80103: LD_ADDR_EXP 123
80107: PUSH
80108: LD_INT 0
80110: ST_TO_ADDR
// sKamikadze := false ;
80111: LD_ADDR_EXP 131
80115: PUSH
80116: LD_INT 0
80118: ST_TO_ADDR
// sTroll := false ;
80119: LD_ADDR_EXP 132
80123: PUSH
80124: LD_INT 0
80126: ST_TO_ADDR
// sSlow := false ;
80127: LD_ADDR_EXP 133
80131: PUSH
80132: LD_INT 0
80134: ST_TO_ADDR
// sLack := false ;
80135: LD_ADDR_EXP 134
80139: PUSH
80140: LD_INT 0
80142: ST_TO_ADDR
// sTank := false ;
80143: LD_ADDR_EXP 136
80147: PUSH
80148: LD_INT 0
80150: ST_TO_ADDR
// sRemote := false ;
80151: LD_ADDR_EXP 137
80155: PUSH
80156: LD_INT 0
80158: ST_TO_ADDR
// sPowell := false ;
80159: LD_ADDR_EXP 138
80163: PUSH
80164: LD_INT 0
80166: ST_TO_ADDR
// sTeleport := false ;
80167: LD_ADDR_EXP 141
80171: PUSH
80172: LD_INT 0
80174: ST_TO_ADDR
// sOilTower := false ;
80175: LD_ADDR_EXP 143
80179: PUSH
80180: LD_INT 0
80182: ST_TO_ADDR
// sShovel := false ;
80183: LD_ADDR_EXP 144
80187: PUSH
80188: LD_INT 0
80190: ST_TO_ADDR
// sSheik := false ;
80191: LD_ADDR_EXP 145
80195: PUSH
80196: LD_INT 0
80198: ST_TO_ADDR
// sEarthquake := false ;
80199: LD_ADDR_EXP 147
80203: PUSH
80204: LD_INT 0
80206: ST_TO_ADDR
// sAI := false ;
80207: LD_ADDR_EXP 148
80211: PUSH
80212: LD_INT 0
80214: ST_TO_ADDR
// sCargo := false ;
80215: LD_ADDR_EXP 151
80219: PUSH
80220: LD_INT 0
80222: ST_TO_ADDR
// sDLaser := false ;
80223: LD_ADDR_EXP 152
80227: PUSH
80228: LD_INT 0
80230: ST_TO_ADDR
// sExchange := false ;
80231: LD_ADDR_EXP 153
80235: PUSH
80236: LD_INT 0
80238: ST_TO_ADDR
// sFac := false ;
80239: LD_ADDR_EXP 154
80243: PUSH
80244: LD_INT 0
80246: ST_TO_ADDR
// sPower := false ;
80247: LD_ADDR_EXP 155
80251: PUSH
80252: LD_INT 0
80254: ST_TO_ADDR
// sRandom := false ;
80255: LD_ADDR_EXP 156
80259: PUSH
80260: LD_INT 0
80262: ST_TO_ADDR
// sShield := false ;
80263: LD_ADDR_EXP 157
80267: PUSH
80268: LD_INT 0
80270: ST_TO_ADDR
// sTime := false ;
80271: LD_ADDR_EXP 158
80275: PUSH
80276: LD_INT 0
80278: ST_TO_ADDR
// sTools := false ;
80279: LD_ADDR_EXP 159
80283: PUSH
80284: LD_INT 0
80286: ST_TO_ADDR
// sSold := false ;
80287: LD_ADDR_EXP 124
80291: PUSH
80292: LD_INT 0
80294: ST_TO_ADDR
// sDiff := false ;
80295: LD_ADDR_EXP 125
80299: PUSH
80300: LD_INT 0
80302: ST_TO_ADDR
// sFog := false ;
80303: LD_ADDR_EXP 128
80307: PUSH
80308: LD_INT 0
80310: ST_TO_ADDR
// sReset := false ;
80311: LD_ADDR_EXP 129
80315: PUSH
80316: LD_INT 0
80318: ST_TO_ADDR
// sSun := false ;
80319: LD_ADDR_EXP 130
80323: PUSH
80324: LD_INT 0
80326: ST_TO_ADDR
// sTiger := false ;
80327: LD_ADDR_EXP 126
80331: PUSH
80332: LD_INT 0
80334: ST_TO_ADDR
// sBomb := false ;
80335: LD_ADDR_EXP 127
80339: PUSH
80340: LD_INT 0
80342: ST_TO_ADDR
// sWound := false ;
80343: LD_ADDR_EXP 135
80347: PUSH
80348: LD_INT 0
80350: ST_TO_ADDR
// sBetray := false ;
80351: LD_ADDR_EXP 139
80355: PUSH
80356: LD_INT 0
80358: ST_TO_ADDR
// sContamin := false ;
80359: LD_ADDR_EXP 140
80363: PUSH
80364: LD_INT 0
80366: ST_TO_ADDR
// sOil := false ;
80367: LD_ADDR_EXP 142
80371: PUSH
80372: LD_INT 0
80374: ST_TO_ADDR
// sStu := false ;
80375: LD_ADDR_EXP 146
80379: PUSH
80380: LD_INT 0
80382: ST_TO_ADDR
// sBazooka := false ;
80383: LD_ADDR_EXP 149
80387: PUSH
80388: LD_INT 0
80390: ST_TO_ADDR
// sMortar := false ;
80391: LD_ADDR_EXP 150
80395: PUSH
80396: LD_INT 0
80398: ST_TO_ADDR
// sRanger := false ;
80399: LD_ADDR_EXP 160
80403: PUSH
80404: LD_INT 0
80406: ST_TO_ADDR
// end ;
80407: LD_VAR 0 1
80411: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
80412: LD_INT 0
80414: PPUSH
80415: PPUSH
80416: PPUSH
80417: PPUSH
80418: PPUSH
// result := [ ] ;
80419: LD_ADDR_VAR 0 1
80423: PUSH
80424: EMPTY
80425: ST_TO_ADDR
// if campaign_id = 1 then
80426: LD_OWVAR 69
80430: PUSH
80431: LD_INT 1
80433: EQUAL
80434: IFFALSE 83372
// begin case mission_number of 1 :
80436: LD_OWVAR 70
80440: PUSH
80441: LD_INT 1
80443: DOUBLE
80444: EQUAL
80445: IFTRUE 80449
80447: GO 80513
80449: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
80450: LD_ADDR_VAR 0 1
80454: PUSH
80455: LD_INT 2
80457: PUSH
80458: LD_INT 4
80460: PUSH
80461: LD_INT 11
80463: PUSH
80464: LD_INT 12
80466: PUSH
80467: LD_INT 15
80469: PUSH
80470: LD_INT 16
80472: PUSH
80473: LD_INT 22
80475: PUSH
80476: LD_INT 23
80478: PUSH
80479: LD_INT 26
80481: PUSH
80482: EMPTY
80483: LIST
80484: LIST
80485: LIST
80486: LIST
80487: LIST
80488: LIST
80489: LIST
80490: LIST
80491: LIST
80492: PUSH
80493: LD_INT 101
80495: PUSH
80496: LD_INT 102
80498: PUSH
80499: LD_INT 106
80501: PUSH
80502: EMPTY
80503: LIST
80504: LIST
80505: LIST
80506: PUSH
80507: EMPTY
80508: LIST
80509: LIST
80510: ST_TO_ADDR
80511: GO 83370
80513: LD_INT 2
80515: DOUBLE
80516: EQUAL
80517: IFTRUE 80521
80519: GO 80593
80521: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
80522: LD_ADDR_VAR 0 1
80526: PUSH
80527: LD_INT 2
80529: PUSH
80530: LD_INT 4
80532: PUSH
80533: LD_INT 11
80535: PUSH
80536: LD_INT 12
80538: PUSH
80539: LD_INT 15
80541: PUSH
80542: LD_INT 16
80544: PUSH
80545: LD_INT 22
80547: PUSH
80548: LD_INT 23
80550: PUSH
80551: LD_INT 26
80553: PUSH
80554: EMPTY
80555: LIST
80556: LIST
80557: LIST
80558: LIST
80559: LIST
80560: LIST
80561: LIST
80562: LIST
80563: LIST
80564: PUSH
80565: LD_INT 101
80567: PUSH
80568: LD_INT 102
80570: PUSH
80571: LD_INT 105
80573: PUSH
80574: LD_INT 106
80576: PUSH
80577: LD_INT 108
80579: PUSH
80580: EMPTY
80581: LIST
80582: LIST
80583: LIST
80584: LIST
80585: LIST
80586: PUSH
80587: EMPTY
80588: LIST
80589: LIST
80590: ST_TO_ADDR
80591: GO 83370
80593: LD_INT 3
80595: DOUBLE
80596: EQUAL
80597: IFTRUE 80601
80599: GO 80677
80601: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
80602: LD_ADDR_VAR 0 1
80606: PUSH
80607: LD_INT 2
80609: PUSH
80610: LD_INT 4
80612: PUSH
80613: LD_INT 5
80615: PUSH
80616: LD_INT 11
80618: PUSH
80619: LD_INT 12
80621: PUSH
80622: LD_INT 15
80624: PUSH
80625: LD_INT 16
80627: PUSH
80628: LD_INT 22
80630: PUSH
80631: LD_INT 26
80633: PUSH
80634: LD_INT 36
80636: PUSH
80637: EMPTY
80638: LIST
80639: LIST
80640: LIST
80641: LIST
80642: LIST
80643: LIST
80644: LIST
80645: LIST
80646: LIST
80647: LIST
80648: PUSH
80649: LD_INT 101
80651: PUSH
80652: LD_INT 102
80654: PUSH
80655: LD_INT 105
80657: PUSH
80658: LD_INT 106
80660: PUSH
80661: LD_INT 108
80663: PUSH
80664: EMPTY
80665: LIST
80666: LIST
80667: LIST
80668: LIST
80669: LIST
80670: PUSH
80671: EMPTY
80672: LIST
80673: LIST
80674: ST_TO_ADDR
80675: GO 83370
80677: LD_INT 4
80679: DOUBLE
80680: EQUAL
80681: IFTRUE 80685
80683: GO 80769
80685: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
80686: LD_ADDR_VAR 0 1
80690: PUSH
80691: LD_INT 2
80693: PUSH
80694: LD_INT 4
80696: PUSH
80697: LD_INT 5
80699: PUSH
80700: LD_INT 8
80702: PUSH
80703: LD_INT 11
80705: PUSH
80706: LD_INT 12
80708: PUSH
80709: LD_INT 15
80711: PUSH
80712: LD_INT 16
80714: PUSH
80715: LD_INT 22
80717: PUSH
80718: LD_INT 23
80720: PUSH
80721: LD_INT 26
80723: PUSH
80724: LD_INT 36
80726: PUSH
80727: EMPTY
80728: LIST
80729: LIST
80730: LIST
80731: LIST
80732: LIST
80733: LIST
80734: LIST
80735: LIST
80736: LIST
80737: LIST
80738: LIST
80739: LIST
80740: PUSH
80741: LD_INT 101
80743: PUSH
80744: LD_INT 102
80746: PUSH
80747: LD_INT 105
80749: PUSH
80750: LD_INT 106
80752: PUSH
80753: LD_INT 108
80755: PUSH
80756: EMPTY
80757: LIST
80758: LIST
80759: LIST
80760: LIST
80761: LIST
80762: PUSH
80763: EMPTY
80764: LIST
80765: LIST
80766: ST_TO_ADDR
80767: GO 83370
80769: LD_INT 5
80771: DOUBLE
80772: EQUAL
80773: IFTRUE 80777
80775: GO 80877
80777: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
80778: LD_ADDR_VAR 0 1
80782: PUSH
80783: LD_INT 2
80785: PUSH
80786: LD_INT 4
80788: PUSH
80789: LD_INT 5
80791: PUSH
80792: LD_INT 6
80794: PUSH
80795: LD_INT 8
80797: PUSH
80798: LD_INT 11
80800: PUSH
80801: LD_INT 12
80803: PUSH
80804: LD_INT 15
80806: PUSH
80807: LD_INT 16
80809: PUSH
80810: LD_INT 22
80812: PUSH
80813: LD_INT 23
80815: PUSH
80816: LD_INT 25
80818: PUSH
80819: LD_INT 26
80821: PUSH
80822: LD_INT 36
80824: PUSH
80825: EMPTY
80826: LIST
80827: LIST
80828: LIST
80829: LIST
80830: LIST
80831: LIST
80832: LIST
80833: LIST
80834: LIST
80835: LIST
80836: LIST
80837: LIST
80838: LIST
80839: LIST
80840: PUSH
80841: LD_INT 101
80843: PUSH
80844: LD_INT 102
80846: PUSH
80847: LD_INT 105
80849: PUSH
80850: LD_INT 106
80852: PUSH
80853: LD_INT 108
80855: PUSH
80856: LD_INT 109
80858: PUSH
80859: LD_INT 112
80861: PUSH
80862: EMPTY
80863: LIST
80864: LIST
80865: LIST
80866: LIST
80867: LIST
80868: LIST
80869: LIST
80870: PUSH
80871: EMPTY
80872: LIST
80873: LIST
80874: ST_TO_ADDR
80875: GO 83370
80877: LD_INT 6
80879: DOUBLE
80880: EQUAL
80881: IFTRUE 80885
80883: GO 81005
80885: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
80886: LD_ADDR_VAR 0 1
80890: PUSH
80891: LD_INT 2
80893: PUSH
80894: LD_INT 4
80896: PUSH
80897: LD_INT 5
80899: PUSH
80900: LD_INT 6
80902: PUSH
80903: LD_INT 8
80905: PUSH
80906: LD_INT 11
80908: PUSH
80909: LD_INT 12
80911: PUSH
80912: LD_INT 15
80914: PUSH
80915: LD_INT 16
80917: PUSH
80918: LD_INT 20
80920: PUSH
80921: LD_INT 21
80923: PUSH
80924: LD_INT 22
80926: PUSH
80927: LD_INT 23
80929: PUSH
80930: LD_INT 25
80932: PUSH
80933: LD_INT 26
80935: PUSH
80936: LD_INT 30
80938: PUSH
80939: LD_INT 31
80941: PUSH
80942: LD_INT 32
80944: PUSH
80945: LD_INT 36
80947: PUSH
80948: EMPTY
80949: LIST
80950: LIST
80951: LIST
80952: LIST
80953: LIST
80954: LIST
80955: LIST
80956: LIST
80957: LIST
80958: LIST
80959: LIST
80960: LIST
80961: LIST
80962: LIST
80963: LIST
80964: LIST
80965: LIST
80966: LIST
80967: LIST
80968: PUSH
80969: LD_INT 101
80971: PUSH
80972: LD_INT 102
80974: PUSH
80975: LD_INT 105
80977: PUSH
80978: LD_INT 106
80980: PUSH
80981: LD_INT 108
80983: PUSH
80984: LD_INT 109
80986: PUSH
80987: LD_INT 112
80989: PUSH
80990: EMPTY
80991: LIST
80992: LIST
80993: LIST
80994: LIST
80995: LIST
80996: LIST
80997: LIST
80998: PUSH
80999: EMPTY
81000: LIST
81001: LIST
81002: ST_TO_ADDR
81003: GO 83370
81005: LD_INT 7
81007: DOUBLE
81008: EQUAL
81009: IFTRUE 81013
81011: GO 81113
81013: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
81014: LD_ADDR_VAR 0 1
81018: PUSH
81019: LD_INT 2
81021: PUSH
81022: LD_INT 4
81024: PUSH
81025: LD_INT 5
81027: PUSH
81028: LD_INT 7
81030: PUSH
81031: LD_INT 11
81033: PUSH
81034: LD_INT 12
81036: PUSH
81037: LD_INT 15
81039: PUSH
81040: LD_INT 16
81042: PUSH
81043: LD_INT 20
81045: PUSH
81046: LD_INT 21
81048: PUSH
81049: LD_INT 22
81051: PUSH
81052: LD_INT 23
81054: PUSH
81055: LD_INT 25
81057: PUSH
81058: LD_INT 26
81060: PUSH
81061: EMPTY
81062: LIST
81063: LIST
81064: LIST
81065: LIST
81066: LIST
81067: LIST
81068: LIST
81069: LIST
81070: LIST
81071: LIST
81072: LIST
81073: LIST
81074: LIST
81075: LIST
81076: PUSH
81077: LD_INT 101
81079: PUSH
81080: LD_INT 102
81082: PUSH
81083: LD_INT 103
81085: PUSH
81086: LD_INT 105
81088: PUSH
81089: LD_INT 106
81091: PUSH
81092: LD_INT 108
81094: PUSH
81095: LD_INT 112
81097: PUSH
81098: EMPTY
81099: LIST
81100: LIST
81101: LIST
81102: LIST
81103: LIST
81104: LIST
81105: LIST
81106: PUSH
81107: EMPTY
81108: LIST
81109: LIST
81110: ST_TO_ADDR
81111: GO 83370
81113: LD_INT 8
81115: DOUBLE
81116: EQUAL
81117: IFTRUE 81121
81119: GO 81249
81121: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
81122: LD_ADDR_VAR 0 1
81126: PUSH
81127: LD_INT 2
81129: PUSH
81130: LD_INT 4
81132: PUSH
81133: LD_INT 5
81135: PUSH
81136: LD_INT 6
81138: PUSH
81139: LD_INT 7
81141: PUSH
81142: LD_INT 8
81144: PUSH
81145: LD_INT 11
81147: PUSH
81148: LD_INT 12
81150: PUSH
81151: LD_INT 15
81153: PUSH
81154: LD_INT 16
81156: PUSH
81157: LD_INT 20
81159: PUSH
81160: LD_INT 21
81162: PUSH
81163: LD_INT 22
81165: PUSH
81166: LD_INT 23
81168: PUSH
81169: LD_INT 25
81171: PUSH
81172: LD_INT 26
81174: PUSH
81175: LD_INT 30
81177: PUSH
81178: LD_INT 31
81180: PUSH
81181: LD_INT 32
81183: PUSH
81184: LD_INT 36
81186: PUSH
81187: EMPTY
81188: LIST
81189: LIST
81190: LIST
81191: LIST
81192: LIST
81193: LIST
81194: LIST
81195: LIST
81196: LIST
81197: LIST
81198: LIST
81199: LIST
81200: LIST
81201: LIST
81202: LIST
81203: LIST
81204: LIST
81205: LIST
81206: LIST
81207: LIST
81208: PUSH
81209: LD_INT 101
81211: PUSH
81212: LD_INT 102
81214: PUSH
81215: LD_INT 103
81217: PUSH
81218: LD_INT 105
81220: PUSH
81221: LD_INT 106
81223: PUSH
81224: LD_INT 108
81226: PUSH
81227: LD_INT 109
81229: PUSH
81230: LD_INT 112
81232: PUSH
81233: EMPTY
81234: LIST
81235: LIST
81236: LIST
81237: LIST
81238: LIST
81239: LIST
81240: LIST
81241: LIST
81242: PUSH
81243: EMPTY
81244: LIST
81245: LIST
81246: ST_TO_ADDR
81247: GO 83370
81249: LD_INT 9
81251: DOUBLE
81252: EQUAL
81253: IFTRUE 81257
81255: GO 81393
81257: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
81258: LD_ADDR_VAR 0 1
81262: PUSH
81263: LD_INT 2
81265: PUSH
81266: LD_INT 4
81268: PUSH
81269: LD_INT 5
81271: PUSH
81272: LD_INT 6
81274: PUSH
81275: LD_INT 7
81277: PUSH
81278: LD_INT 8
81280: PUSH
81281: LD_INT 11
81283: PUSH
81284: LD_INT 12
81286: PUSH
81287: LD_INT 15
81289: PUSH
81290: LD_INT 16
81292: PUSH
81293: LD_INT 20
81295: PUSH
81296: LD_INT 21
81298: PUSH
81299: LD_INT 22
81301: PUSH
81302: LD_INT 23
81304: PUSH
81305: LD_INT 25
81307: PUSH
81308: LD_INT 26
81310: PUSH
81311: LD_INT 28
81313: PUSH
81314: LD_INT 30
81316: PUSH
81317: LD_INT 31
81319: PUSH
81320: LD_INT 32
81322: PUSH
81323: LD_INT 36
81325: PUSH
81326: EMPTY
81327: LIST
81328: LIST
81329: LIST
81330: LIST
81331: LIST
81332: LIST
81333: LIST
81334: LIST
81335: LIST
81336: LIST
81337: LIST
81338: LIST
81339: LIST
81340: LIST
81341: LIST
81342: LIST
81343: LIST
81344: LIST
81345: LIST
81346: LIST
81347: LIST
81348: PUSH
81349: LD_INT 101
81351: PUSH
81352: LD_INT 102
81354: PUSH
81355: LD_INT 103
81357: PUSH
81358: LD_INT 105
81360: PUSH
81361: LD_INT 106
81363: PUSH
81364: LD_INT 108
81366: PUSH
81367: LD_INT 109
81369: PUSH
81370: LD_INT 112
81372: PUSH
81373: LD_INT 114
81375: PUSH
81376: EMPTY
81377: LIST
81378: LIST
81379: LIST
81380: LIST
81381: LIST
81382: LIST
81383: LIST
81384: LIST
81385: LIST
81386: PUSH
81387: EMPTY
81388: LIST
81389: LIST
81390: ST_TO_ADDR
81391: GO 83370
81393: LD_INT 10
81395: DOUBLE
81396: EQUAL
81397: IFTRUE 81401
81399: GO 81585
81401: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
81402: LD_ADDR_VAR 0 1
81406: PUSH
81407: LD_INT 2
81409: PUSH
81410: LD_INT 4
81412: PUSH
81413: LD_INT 5
81415: PUSH
81416: LD_INT 6
81418: PUSH
81419: LD_INT 7
81421: PUSH
81422: LD_INT 8
81424: PUSH
81425: LD_INT 9
81427: PUSH
81428: LD_INT 10
81430: PUSH
81431: LD_INT 11
81433: PUSH
81434: LD_INT 12
81436: PUSH
81437: LD_INT 13
81439: PUSH
81440: LD_INT 14
81442: PUSH
81443: LD_INT 15
81445: PUSH
81446: LD_INT 16
81448: PUSH
81449: LD_INT 17
81451: PUSH
81452: LD_INT 18
81454: PUSH
81455: LD_INT 19
81457: PUSH
81458: LD_INT 20
81460: PUSH
81461: LD_INT 21
81463: PUSH
81464: LD_INT 22
81466: PUSH
81467: LD_INT 23
81469: PUSH
81470: LD_INT 24
81472: PUSH
81473: LD_INT 25
81475: PUSH
81476: LD_INT 26
81478: PUSH
81479: LD_INT 28
81481: PUSH
81482: LD_INT 30
81484: PUSH
81485: LD_INT 31
81487: PUSH
81488: LD_INT 32
81490: PUSH
81491: LD_INT 36
81493: PUSH
81494: EMPTY
81495: LIST
81496: LIST
81497: LIST
81498: LIST
81499: LIST
81500: LIST
81501: LIST
81502: LIST
81503: LIST
81504: LIST
81505: LIST
81506: LIST
81507: LIST
81508: LIST
81509: LIST
81510: LIST
81511: LIST
81512: LIST
81513: LIST
81514: LIST
81515: LIST
81516: LIST
81517: LIST
81518: LIST
81519: LIST
81520: LIST
81521: LIST
81522: LIST
81523: LIST
81524: PUSH
81525: LD_INT 101
81527: PUSH
81528: LD_INT 102
81530: PUSH
81531: LD_INT 103
81533: PUSH
81534: LD_INT 104
81536: PUSH
81537: LD_INT 105
81539: PUSH
81540: LD_INT 106
81542: PUSH
81543: LD_INT 107
81545: PUSH
81546: LD_INT 108
81548: PUSH
81549: LD_INT 109
81551: PUSH
81552: LD_INT 110
81554: PUSH
81555: LD_INT 111
81557: PUSH
81558: LD_INT 112
81560: PUSH
81561: LD_INT 114
81563: PUSH
81564: EMPTY
81565: LIST
81566: LIST
81567: LIST
81568: LIST
81569: LIST
81570: LIST
81571: LIST
81572: LIST
81573: LIST
81574: LIST
81575: LIST
81576: LIST
81577: LIST
81578: PUSH
81579: EMPTY
81580: LIST
81581: LIST
81582: ST_TO_ADDR
81583: GO 83370
81585: LD_INT 11
81587: DOUBLE
81588: EQUAL
81589: IFTRUE 81593
81591: GO 81785
81593: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
81594: LD_ADDR_VAR 0 1
81598: PUSH
81599: LD_INT 2
81601: PUSH
81602: LD_INT 3
81604: PUSH
81605: LD_INT 4
81607: PUSH
81608: LD_INT 5
81610: PUSH
81611: LD_INT 6
81613: PUSH
81614: LD_INT 7
81616: PUSH
81617: LD_INT 8
81619: PUSH
81620: LD_INT 9
81622: PUSH
81623: LD_INT 10
81625: PUSH
81626: LD_INT 11
81628: PUSH
81629: LD_INT 12
81631: PUSH
81632: LD_INT 13
81634: PUSH
81635: LD_INT 14
81637: PUSH
81638: LD_INT 15
81640: PUSH
81641: LD_INT 16
81643: PUSH
81644: LD_INT 17
81646: PUSH
81647: LD_INT 18
81649: PUSH
81650: LD_INT 19
81652: PUSH
81653: LD_INT 20
81655: PUSH
81656: LD_INT 21
81658: PUSH
81659: LD_INT 22
81661: PUSH
81662: LD_INT 23
81664: PUSH
81665: LD_INT 24
81667: PUSH
81668: LD_INT 25
81670: PUSH
81671: LD_INT 26
81673: PUSH
81674: LD_INT 28
81676: PUSH
81677: LD_INT 30
81679: PUSH
81680: LD_INT 31
81682: PUSH
81683: LD_INT 32
81685: PUSH
81686: LD_INT 34
81688: PUSH
81689: LD_INT 36
81691: PUSH
81692: EMPTY
81693: LIST
81694: LIST
81695: LIST
81696: LIST
81697: LIST
81698: LIST
81699: LIST
81700: LIST
81701: LIST
81702: LIST
81703: LIST
81704: LIST
81705: LIST
81706: LIST
81707: LIST
81708: LIST
81709: LIST
81710: LIST
81711: LIST
81712: LIST
81713: LIST
81714: LIST
81715: LIST
81716: LIST
81717: LIST
81718: LIST
81719: LIST
81720: LIST
81721: LIST
81722: LIST
81723: LIST
81724: PUSH
81725: LD_INT 101
81727: PUSH
81728: LD_INT 102
81730: PUSH
81731: LD_INT 103
81733: PUSH
81734: LD_INT 104
81736: PUSH
81737: LD_INT 105
81739: PUSH
81740: LD_INT 106
81742: PUSH
81743: LD_INT 107
81745: PUSH
81746: LD_INT 108
81748: PUSH
81749: LD_INT 109
81751: PUSH
81752: LD_INT 110
81754: PUSH
81755: LD_INT 111
81757: PUSH
81758: LD_INT 112
81760: PUSH
81761: LD_INT 114
81763: PUSH
81764: EMPTY
81765: LIST
81766: LIST
81767: LIST
81768: LIST
81769: LIST
81770: LIST
81771: LIST
81772: LIST
81773: LIST
81774: LIST
81775: LIST
81776: LIST
81777: LIST
81778: PUSH
81779: EMPTY
81780: LIST
81781: LIST
81782: ST_TO_ADDR
81783: GO 83370
81785: LD_INT 12
81787: DOUBLE
81788: EQUAL
81789: IFTRUE 81793
81791: GO 82001
81793: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
81794: LD_ADDR_VAR 0 1
81798: PUSH
81799: LD_INT 1
81801: PUSH
81802: LD_INT 2
81804: PUSH
81805: LD_INT 3
81807: PUSH
81808: LD_INT 4
81810: PUSH
81811: LD_INT 5
81813: PUSH
81814: LD_INT 6
81816: PUSH
81817: LD_INT 7
81819: PUSH
81820: LD_INT 8
81822: PUSH
81823: LD_INT 9
81825: PUSH
81826: LD_INT 10
81828: PUSH
81829: LD_INT 11
81831: PUSH
81832: LD_INT 12
81834: PUSH
81835: LD_INT 13
81837: PUSH
81838: LD_INT 14
81840: PUSH
81841: LD_INT 15
81843: PUSH
81844: LD_INT 16
81846: PUSH
81847: LD_INT 17
81849: PUSH
81850: LD_INT 18
81852: PUSH
81853: LD_INT 19
81855: PUSH
81856: LD_INT 20
81858: PUSH
81859: LD_INT 21
81861: PUSH
81862: LD_INT 22
81864: PUSH
81865: LD_INT 23
81867: PUSH
81868: LD_INT 24
81870: PUSH
81871: LD_INT 25
81873: PUSH
81874: LD_INT 26
81876: PUSH
81877: LD_INT 27
81879: PUSH
81880: LD_INT 28
81882: PUSH
81883: LD_INT 30
81885: PUSH
81886: LD_INT 31
81888: PUSH
81889: LD_INT 32
81891: PUSH
81892: LD_INT 33
81894: PUSH
81895: LD_INT 34
81897: PUSH
81898: LD_INT 36
81900: PUSH
81901: EMPTY
81902: LIST
81903: LIST
81904: LIST
81905: LIST
81906: LIST
81907: LIST
81908: LIST
81909: LIST
81910: LIST
81911: LIST
81912: LIST
81913: LIST
81914: LIST
81915: LIST
81916: LIST
81917: LIST
81918: LIST
81919: LIST
81920: LIST
81921: LIST
81922: LIST
81923: LIST
81924: LIST
81925: LIST
81926: LIST
81927: LIST
81928: LIST
81929: LIST
81930: LIST
81931: LIST
81932: LIST
81933: LIST
81934: LIST
81935: LIST
81936: PUSH
81937: LD_INT 101
81939: PUSH
81940: LD_INT 102
81942: PUSH
81943: LD_INT 103
81945: PUSH
81946: LD_INT 104
81948: PUSH
81949: LD_INT 105
81951: PUSH
81952: LD_INT 106
81954: PUSH
81955: LD_INT 107
81957: PUSH
81958: LD_INT 108
81960: PUSH
81961: LD_INT 109
81963: PUSH
81964: LD_INT 110
81966: PUSH
81967: LD_INT 111
81969: PUSH
81970: LD_INT 112
81972: PUSH
81973: LD_INT 113
81975: PUSH
81976: LD_INT 114
81978: PUSH
81979: EMPTY
81980: LIST
81981: LIST
81982: LIST
81983: LIST
81984: LIST
81985: LIST
81986: LIST
81987: LIST
81988: LIST
81989: LIST
81990: LIST
81991: LIST
81992: LIST
81993: LIST
81994: PUSH
81995: EMPTY
81996: LIST
81997: LIST
81998: ST_TO_ADDR
81999: GO 83370
82001: LD_INT 13
82003: DOUBLE
82004: EQUAL
82005: IFTRUE 82009
82007: GO 82205
82009: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
82010: LD_ADDR_VAR 0 1
82014: PUSH
82015: LD_INT 1
82017: PUSH
82018: LD_INT 2
82020: PUSH
82021: LD_INT 3
82023: PUSH
82024: LD_INT 4
82026: PUSH
82027: LD_INT 5
82029: PUSH
82030: LD_INT 8
82032: PUSH
82033: LD_INT 9
82035: PUSH
82036: LD_INT 10
82038: PUSH
82039: LD_INT 11
82041: PUSH
82042: LD_INT 12
82044: PUSH
82045: LD_INT 14
82047: PUSH
82048: LD_INT 15
82050: PUSH
82051: LD_INT 16
82053: PUSH
82054: LD_INT 17
82056: PUSH
82057: LD_INT 18
82059: PUSH
82060: LD_INT 19
82062: PUSH
82063: LD_INT 20
82065: PUSH
82066: LD_INT 21
82068: PUSH
82069: LD_INT 22
82071: PUSH
82072: LD_INT 23
82074: PUSH
82075: LD_INT 24
82077: PUSH
82078: LD_INT 25
82080: PUSH
82081: LD_INT 26
82083: PUSH
82084: LD_INT 27
82086: PUSH
82087: LD_INT 28
82089: PUSH
82090: LD_INT 30
82092: PUSH
82093: LD_INT 31
82095: PUSH
82096: LD_INT 32
82098: PUSH
82099: LD_INT 33
82101: PUSH
82102: LD_INT 34
82104: PUSH
82105: LD_INT 36
82107: PUSH
82108: EMPTY
82109: LIST
82110: LIST
82111: LIST
82112: LIST
82113: LIST
82114: LIST
82115: LIST
82116: LIST
82117: LIST
82118: LIST
82119: LIST
82120: LIST
82121: LIST
82122: LIST
82123: LIST
82124: LIST
82125: LIST
82126: LIST
82127: LIST
82128: LIST
82129: LIST
82130: LIST
82131: LIST
82132: LIST
82133: LIST
82134: LIST
82135: LIST
82136: LIST
82137: LIST
82138: LIST
82139: LIST
82140: PUSH
82141: LD_INT 101
82143: PUSH
82144: LD_INT 102
82146: PUSH
82147: LD_INT 103
82149: PUSH
82150: LD_INT 104
82152: PUSH
82153: LD_INT 105
82155: PUSH
82156: LD_INT 106
82158: PUSH
82159: LD_INT 107
82161: PUSH
82162: LD_INT 108
82164: PUSH
82165: LD_INT 109
82167: PUSH
82168: LD_INT 110
82170: PUSH
82171: LD_INT 111
82173: PUSH
82174: LD_INT 112
82176: PUSH
82177: LD_INT 113
82179: PUSH
82180: LD_INT 114
82182: PUSH
82183: EMPTY
82184: LIST
82185: LIST
82186: LIST
82187: LIST
82188: LIST
82189: LIST
82190: LIST
82191: LIST
82192: LIST
82193: LIST
82194: LIST
82195: LIST
82196: LIST
82197: LIST
82198: PUSH
82199: EMPTY
82200: LIST
82201: LIST
82202: ST_TO_ADDR
82203: GO 83370
82205: LD_INT 14
82207: DOUBLE
82208: EQUAL
82209: IFTRUE 82213
82211: GO 82425
82213: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
82214: LD_ADDR_VAR 0 1
82218: PUSH
82219: LD_INT 1
82221: PUSH
82222: LD_INT 2
82224: PUSH
82225: LD_INT 3
82227: PUSH
82228: LD_INT 4
82230: PUSH
82231: LD_INT 5
82233: PUSH
82234: LD_INT 6
82236: PUSH
82237: LD_INT 7
82239: PUSH
82240: LD_INT 8
82242: PUSH
82243: LD_INT 9
82245: PUSH
82246: LD_INT 10
82248: PUSH
82249: LD_INT 11
82251: PUSH
82252: LD_INT 12
82254: PUSH
82255: LD_INT 13
82257: PUSH
82258: LD_INT 14
82260: PUSH
82261: LD_INT 15
82263: PUSH
82264: LD_INT 16
82266: PUSH
82267: LD_INT 17
82269: PUSH
82270: LD_INT 18
82272: PUSH
82273: LD_INT 19
82275: PUSH
82276: LD_INT 20
82278: PUSH
82279: LD_INT 21
82281: PUSH
82282: LD_INT 22
82284: PUSH
82285: LD_INT 23
82287: PUSH
82288: LD_INT 24
82290: PUSH
82291: LD_INT 25
82293: PUSH
82294: LD_INT 26
82296: PUSH
82297: LD_INT 27
82299: PUSH
82300: LD_INT 28
82302: PUSH
82303: LD_INT 29
82305: PUSH
82306: LD_INT 30
82308: PUSH
82309: LD_INT 31
82311: PUSH
82312: LD_INT 32
82314: PUSH
82315: LD_INT 33
82317: PUSH
82318: LD_INT 34
82320: PUSH
82321: LD_INT 36
82323: PUSH
82324: EMPTY
82325: LIST
82326: LIST
82327: LIST
82328: LIST
82329: LIST
82330: LIST
82331: LIST
82332: LIST
82333: LIST
82334: LIST
82335: LIST
82336: LIST
82337: LIST
82338: LIST
82339: LIST
82340: LIST
82341: LIST
82342: LIST
82343: LIST
82344: LIST
82345: LIST
82346: LIST
82347: LIST
82348: LIST
82349: LIST
82350: LIST
82351: LIST
82352: LIST
82353: LIST
82354: LIST
82355: LIST
82356: LIST
82357: LIST
82358: LIST
82359: LIST
82360: PUSH
82361: LD_INT 101
82363: PUSH
82364: LD_INT 102
82366: PUSH
82367: LD_INT 103
82369: PUSH
82370: LD_INT 104
82372: PUSH
82373: LD_INT 105
82375: PUSH
82376: LD_INT 106
82378: PUSH
82379: LD_INT 107
82381: PUSH
82382: LD_INT 108
82384: PUSH
82385: LD_INT 109
82387: PUSH
82388: LD_INT 110
82390: PUSH
82391: LD_INT 111
82393: PUSH
82394: LD_INT 112
82396: PUSH
82397: LD_INT 113
82399: PUSH
82400: LD_INT 114
82402: PUSH
82403: EMPTY
82404: LIST
82405: LIST
82406: LIST
82407: LIST
82408: LIST
82409: LIST
82410: LIST
82411: LIST
82412: LIST
82413: LIST
82414: LIST
82415: LIST
82416: LIST
82417: LIST
82418: PUSH
82419: EMPTY
82420: LIST
82421: LIST
82422: ST_TO_ADDR
82423: GO 83370
82425: LD_INT 15
82427: DOUBLE
82428: EQUAL
82429: IFTRUE 82433
82431: GO 82645
82433: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
82434: LD_ADDR_VAR 0 1
82438: PUSH
82439: LD_INT 1
82441: PUSH
82442: LD_INT 2
82444: PUSH
82445: LD_INT 3
82447: PUSH
82448: LD_INT 4
82450: PUSH
82451: LD_INT 5
82453: PUSH
82454: LD_INT 6
82456: PUSH
82457: LD_INT 7
82459: PUSH
82460: LD_INT 8
82462: PUSH
82463: LD_INT 9
82465: PUSH
82466: LD_INT 10
82468: PUSH
82469: LD_INT 11
82471: PUSH
82472: LD_INT 12
82474: PUSH
82475: LD_INT 13
82477: PUSH
82478: LD_INT 14
82480: PUSH
82481: LD_INT 15
82483: PUSH
82484: LD_INT 16
82486: PUSH
82487: LD_INT 17
82489: PUSH
82490: LD_INT 18
82492: PUSH
82493: LD_INT 19
82495: PUSH
82496: LD_INT 20
82498: PUSH
82499: LD_INT 21
82501: PUSH
82502: LD_INT 22
82504: PUSH
82505: LD_INT 23
82507: PUSH
82508: LD_INT 24
82510: PUSH
82511: LD_INT 25
82513: PUSH
82514: LD_INT 26
82516: PUSH
82517: LD_INT 27
82519: PUSH
82520: LD_INT 28
82522: PUSH
82523: LD_INT 29
82525: PUSH
82526: LD_INT 30
82528: PUSH
82529: LD_INT 31
82531: PUSH
82532: LD_INT 32
82534: PUSH
82535: LD_INT 33
82537: PUSH
82538: LD_INT 34
82540: PUSH
82541: LD_INT 36
82543: PUSH
82544: EMPTY
82545: LIST
82546: LIST
82547: LIST
82548: LIST
82549: LIST
82550: LIST
82551: LIST
82552: LIST
82553: LIST
82554: LIST
82555: LIST
82556: LIST
82557: LIST
82558: LIST
82559: LIST
82560: LIST
82561: LIST
82562: LIST
82563: LIST
82564: LIST
82565: LIST
82566: LIST
82567: LIST
82568: LIST
82569: LIST
82570: LIST
82571: LIST
82572: LIST
82573: LIST
82574: LIST
82575: LIST
82576: LIST
82577: LIST
82578: LIST
82579: LIST
82580: PUSH
82581: LD_INT 101
82583: PUSH
82584: LD_INT 102
82586: PUSH
82587: LD_INT 103
82589: PUSH
82590: LD_INT 104
82592: PUSH
82593: LD_INT 105
82595: PUSH
82596: LD_INT 106
82598: PUSH
82599: LD_INT 107
82601: PUSH
82602: LD_INT 108
82604: PUSH
82605: LD_INT 109
82607: PUSH
82608: LD_INT 110
82610: PUSH
82611: LD_INT 111
82613: PUSH
82614: LD_INT 112
82616: PUSH
82617: LD_INT 113
82619: PUSH
82620: LD_INT 114
82622: PUSH
82623: EMPTY
82624: LIST
82625: LIST
82626: LIST
82627: LIST
82628: LIST
82629: LIST
82630: LIST
82631: LIST
82632: LIST
82633: LIST
82634: LIST
82635: LIST
82636: LIST
82637: LIST
82638: PUSH
82639: EMPTY
82640: LIST
82641: LIST
82642: ST_TO_ADDR
82643: GO 83370
82645: LD_INT 16
82647: DOUBLE
82648: EQUAL
82649: IFTRUE 82653
82651: GO 82777
82653: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
82654: LD_ADDR_VAR 0 1
82658: PUSH
82659: LD_INT 2
82661: PUSH
82662: LD_INT 4
82664: PUSH
82665: LD_INT 5
82667: PUSH
82668: LD_INT 7
82670: PUSH
82671: LD_INT 11
82673: PUSH
82674: LD_INT 12
82676: PUSH
82677: LD_INT 15
82679: PUSH
82680: LD_INT 16
82682: PUSH
82683: LD_INT 20
82685: PUSH
82686: LD_INT 21
82688: PUSH
82689: LD_INT 22
82691: PUSH
82692: LD_INT 23
82694: PUSH
82695: LD_INT 25
82697: PUSH
82698: LD_INT 26
82700: PUSH
82701: LD_INT 30
82703: PUSH
82704: LD_INT 31
82706: PUSH
82707: LD_INT 32
82709: PUSH
82710: LD_INT 33
82712: PUSH
82713: LD_INT 34
82715: PUSH
82716: EMPTY
82717: LIST
82718: LIST
82719: LIST
82720: LIST
82721: LIST
82722: LIST
82723: LIST
82724: LIST
82725: LIST
82726: LIST
82727: LIST
82728: LIST
82729: LIST
82730: LIST
82731: LIST
82732: LIST
82733: LIST
82734: LIST
82735: LIST
82736: PUSH
82737: LD_INT 101
82739: PUSH
82740: LD_INT 102
82742: PUSH
82743: LD_INT 103
82745: PUSH
82746: LD_INT 106
82748: PUSH
82749: LD_INT 108
82751: PUSH
82752: LD_INT 112
82754: PUSH
82755: LD_INT 113
82757: PUSH
82758: LD_INT 114
82760: PUSH
82761: EMPTY
82762: LIST
82763: LIST
82764: LIST
82765: LIST
82766: LIST
82767: LIST
82768: LIST
82769: LIST
82770: PUSH
82771: EMPTY
82772: LIST
82773: LIST
82774: ST_TO_ADDR
82775: GO 83370
82777: LD_INT 17
82779: DOUBLE
82780: EQUAL
82781: IFTRUE 82785
82783: GO 82997
82785: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
82786: LD_ADDR_VAR 0 1
82790: PUSH
82791: LD_INT 1
82793: PUSH
82794: LD_INT 2
82796: PUSH
82797: LD_INT 3
82799: PUSH
82800: LD_INT 4
82802: PUSH
82803: LD_INT 5
82805: PUSH
82806: LD_INT 6
82808: PUSH
82809: LD_INT 7
82811: PUSH
82812: LD_INT 8
82814: PUSH
82815: LD_INT 9
82817: PUSH
82818: LD_INT 10
82820: PUSH
82821: LD_INT 11
82823: PUSH
82824: LD_INT 12
82826: PUSH
82827: LD_INT 13
82829: PUSH
82830: LD_INT 14
82832: PUSH
82833: LD_INT 15
82835: PUSH
82836: LD_INT 16
82838: PUSH
82839: LD_INT 17
82841: PUSH
82842: LD_INT 18
82844: PUSH
82845: LD_INT 19
82847: PUSH
82848: LD_INT 20
82850: PUSH
82851: LD_INT 21
82853: PUSH
82854: LD_INT 22
82856: PUSH
82857: LD_INT 23
82859: PUSH
82860: LD_INT 24
82862: PUSH
82863: LD_INT 25
82865: PUSH
82866: LD_INT 26
82868: PUSH
82869: LD_INT 27
82871: PUSH
82872: LD_INT 28
82874: PUSH
82875: LD_INT 29
82877: PUSH
82878: LD_INT 30
82880: PUSH
82881: LD_INT 31
82883: PUSH
82884: LD_INT 32
82886: PUSH
82887: LD_INT 33
82889: PUSH
82890: LD_INT 34
82892: PUSH
82893: LD_INT 36
82895: PUSH
82896: EMPTY
82897: LIST
82898: LIST
82899: LIST
82900: LIST
82901: LIST
82902: LIST
82903: LIST
82904: LIST
82905: LIST
82906: LIST
82907: LIST
82908: LIST
82909: LIST
82910: LIST
82911: LIST
82912: LIST
82913: LIST
82914: LIST
82915: LIST
82916: LIST
82917: LIST
82918: LIST
82919: LIST
82920: LIST
82921: LIST
82922: LIST
82923: LIST
82924: LIST
82925: LIST
82926: LIST
82927: LIST
82928: LIST
82929: LIST
82930: LIST
82931: LIST
82932: PUSH
82933: LD_INT 101
82935: PUSH
82936: LD_INT 102
82938: PUSH
82939: LD_INT 103
82941: PUSH
82942: LD_INT 104
82944: PUSH
82945: LD_INT 105
82947: PUSH
82948: LD_INT 106
82950: PUSH
82951: LD_INT 107
82953: PUSH
82954: LD_INT 108
82956: PUSH
82957: LD_INT 109
82959: PUSH
82960: LD_INT 110
82962: PUSH
82963: LD_INT 111
82965: PUSH
82966: LD_INT 112
82968: PUSH
82969: LD_INT 113
82971: PUSH
82972: LD_INT 114
82974: PUSH
82975: EMPTY
82976: LIST
82977: LIST
82978: LIST
82979: LIST
82980: LIST
82981: LIST
82982: LIST
82983: LIST
82984: LIST
82985: LIST
82986: LIST
82987: LIST
82988: LIST
82989: LIST
82990: PUSH
82991: EMPTY
82992: LIST
82993: LIST
82994: ST_TO_ADDR
82995: GO 83370
82997: LD_INT 18
82999: DOUBLE
83000: EQUAL
83001: IFTRUE 83005
83003: GO 83141
83005: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
83006: LD_ADDR_VAR 0 1
83010: PUSH
83011: LD_INT 2
83013: PUSH
83014: LD_INT 4
83016: PUSH
83017: LD_INT 5
83019: PUSH
83020: LD_INT 7
83022: PUSH
83023: LD_INT 11
83025: PUSH
83026: LD_INT 12
83028: PUSH
83029: LD_INT 15
83031: PUSH
83032: LD_INT 16
83034: PUSH
83035: LD_INT 20
83037: PUSH
83038: LD_INT 21
83040: PUSH
83041: LD_INT 22
83043: PUSH
83044: LD_INT 23
83046: PUSH
83047: LD_INT 25
83049: PUSH
83050: LD_INT 26
83052: PUSH
83053: LD_INT 30
83055: PUSH
83056: LD_INT 31
83058: PUSH
83059: LD_INT 32
83061: PUSH
83062: LD_INT 33
83064: PUSH
83065: LD_INT 34
83067: PUSH
83068: LD_INT 35
83070: PUSH
83071: LD_INT 36
83073: PUSH
83074: EMPTY
83075: LIST
83076: LIST
83077: LIST
83078: LIST
83079: LIST
83080: LIST
83081: LIST
83082: LIST
83083: LIST
83084: LIST
83085: LIST
83086: LIST
83087: LIST
83088: LIST
83089: LIST
83090: LIST
83091: LIST
83092: LIST
83093: LIST
83094: LIST
83095: LIST
83096: PUSH
83097: LD_INT 101
83099: PUSH
83100: LD_INT 102
83102: PUSH
83103: LD_INT 103
83105: PUSH
83106: LD_INT 106
83108: PUSH
83109: LD_INT 108
83111: PUSH
83112: LD_INT 112
83114: PUSH
83115: LD_INT 113
83117: PUSH
83118: LD_INT 114
83120: PUSH
83121: LD_INT 115
83123: PUSH
83124: EMPTY
83125: LIST
83126: LIST
83127: LIST
83128: LIST
83129: LIST
83130: LIST
83131: LIST
83132: LIST
83133: LIST
83134: PUSH
83135: EMPTY
83136: LIST
83137: LIST
83138: ST_TO_ADDR
83139: GO 83370
83141: LD_INT 19
83143: DOUBLE
83144: EQUAL
83145: IFTRUE 83149
83147: GO 83369
83149: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
83150: LD_ADDR_VAR 0 1
83154: PUSH
83155: LD_INT 1
83157: PUSH
83158: LD_INT 2
83160: PUSH
83161: LD_INT 3
83163: PUSH
83164: LD_INT 4
83166: PUSH
83167: LD_INT 5
83169: PUSH
83170: LD_INT 6
83172: PUSH
83173: LD_INT 7
83175: PUSH
83176: LD_INT 8
83178: PUSH
83179: LD_INT 9
83181: PUSH
83182: LD_INT 10
83184: PUSH
83185: LD_INT 11
83187: PUSH
83188: LD_INT 12
83190: PUSH
83191: LD_INT 13
83193: PUSH
83194: LD_INT 14
83196: PUSH
83197: LD_INT 15
83199: PUSH
83200: LD_INT 16
83202: PUSH
83203: LD_INT 17
83205: PUSH
83206: LD_INT 18
83208: PUSH
83209: LD_INT 19
83211: PUSH
83212: LD_INT 20
83214: PUSH
83215: LD_INT 21
83217: PUSH
83218: LD_INT 22
83220: PUSH
83221: LD_INT 23
83223: PUSH
83224: LD_INT 24
83226: PUSH
83227: LD_INT 25
83229: PUSH
83230: LD_INT 26
83232: PUSH
83233: LD_INT 27
83235: PUSH
83236: LD_INT 28
83238: PUSH
83239: LD_INT 29
83241: PUSH
83242: LD_INT 30
83244: PUSH
83245: LD_INT 31
83247: PUSH
83248: LD_INT 32
83250: PUSH
83251: LD_INT 33
83253: PUSH
83254: LD_INT 34
83256: PUSH
83257: LD_INT 35
83259: PUSH
83260: LD_INT 36
83262: PUSH
83263: EMPTY
83264: LIST
83265: LIST
83266: LIST
83267: LIST
83268: LIST
83269: LIST
83270: LIST
83271: LIST
83272: LIST
83273: LIST
83274: LIST
83275: LIST
83276: LIST
83277: LIST
83278: LIST
83279: LIST
83280: LIST
83281: LIST
83282: LIST
83283: LIST
83284: LIST
83285: LIST
83286: LIST
83287: LIST
83288: LIST
83289: LIST
83290: LIST
83291: LIST
83292: LIST
83293: LIST
83294: LIST
83295: LIST
83296: LIST
83297: LIST
83298: LIST
83299: LIST
83300: PUSH
83301: LD_INT 101
83303: PUSH
83304: LD_INT 102
83306: PUSH
83307: LD_INT 103
83309: PUSH
83310: LD_INT 104
83312: PUSH
83313: LD_INT 105
83315: PUSH
83316: LD_INT 106
83318: PUSH
83319: LD_INT 107
83321: PUSH
83322: LD_INT 108
83324: PUSH
83325: LD_INT 109
83327: PUSH
83328: LD_INT 110
83330: PUSH
83331: LD_INT 111
83333: PUSH
83334: LD_INT 112
83336: PUSH
83337: LD_INT 113
83339: PUSH
83340: LD_INT 114
83342: PUSH
83343: LD_INT 115
83345: PUSH
83346: EMPTY
83347: LIST
83348: LIST
83349: LIST
83350: LIST
83351: LIST
83352: LIST
83353: LIST
83354: LIST
83355: LIST
83356: LIST
83357: LIST
83358: LIST
83359: LIST
83360: LIST
83361: LIST
83362: PUSH
83363: EMPTY
83364: LIST
83365: LIST
83366: ST_TO_ADDR
83367: GO 83370
83369: POP
// end else
83370: GO 83589
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
83372: LD_ADDR_VAR 0 1
83376: PUSH
83377: LD_INT 1
83379: PUSH
83380: LD_INT 2
83382: PUSH
83383: LD_INT 3
83385: PUSH
83386: LD_INT 4
83388: PUSH
83389: LD_INT 5
83391: PUSH
83392: LD_INT 6
83394: PUSH
83395: LD_INT 7
83397: PUSH
83398: LD_INT 8
83400: PUSH
83401: LD_INT 9
83403: PUSH
83404: LD_INT 10
83406: PUSH
83407: LD_INT 11
83409: PUSH
83410: LD_INT 12
83412: PUSH
83413: LD_INT 13
83415: PUSH
83416: LD_INT 14
83418: PUSH
83419: LD_INT 15
83421: PUSH
83422: LD_INT 16
83424: PUSH
83425: LD_INT 17
83427: PUSH
83428: LD_INT 18
83430: PUSH
83431: LD_INT 19
83433: PUSH
83434: LD_INT 20
83436: PUSH
83437: LD_INT 21
83439: PUSH
83440: LD_INT 22
83442: PUSH
83443: LD_INT 23
83445: PUSH
83446: LD_INT 24
83448: PUSH
83449: LD_INT 25
83451: PUSH
83452: LD_INT 26
83454: PUSH
83455: LD_INT 27
83457: PUSH
83458: LD_INT 28
83460: PUSH
83461: LD_INT 29
83463: PUSH
83464: LD_INT 30
83466: PUSH
83467: LD_INT 31
83469: PUSH
83470: LD_INT 32
83472: PUSH
83473: LD_INT 33
83475: PUSH
83476: LD_INT 34
83478: PUSH
83479: LD_INT 35
83481: PUSH
83482: LD_INT 36
83484: PUSH
83485: EMPTY
83486: LIST
83487: LIST
83488: LIST
83489: LIST
83490: LIST
83491: LIST
83492: LIST
83493: LIST
83494: LIST
83495: LIST
83496: LIST
83497: LIST
83498: LIST
83499: LIST
83500: LIST
83501: LIST
83502: LIST
83503: LIST
83504: LIST
83505: LIST
83506: LIST
83507: LIST
83508: LIST
83509: LIST
83510: LIST
83511: LIST
83512: LIST
83513: LIST
83514: LIST
83515: LIST
83516: LIST
83517: LIST
83518: LIST
83519: LIST
83520: LIST
83521: LIST
83522: PUSH
83523: LD_INT 101
83525: PUSH
83526: LD_INT 102
83528: PUSH
83529: LD_INT 103
83531: PUSH
83532: LD_INT 104
83534: PUSH
83535: LD_INT 105
83537: PUSH
83538: LD_INT 106
83540: PUSH
83541: LD_INT 107
83543: PUSH
83544: LD_INT 108
83546: PUSH
83547: LD_INT 109
83549: PUSH
83550: LD_INT 110
83552: PUSH
83553: LD_INT 111
83555: PUSH
83556: LD_INT 112
83558: PUSH
83559: LD_INT 113
83561: PUSH
83562: LD_INT 114
83564: PUSH
83565: LD_INT 115
83567: PUSH
83568: EMPTY
83569: LIST
83570: LIST
83571: LIST
83572: LIST
83573: LIST
83574: LIST
83575: LIST
83576: LIST
83577: LIST
83578: LIST
83579: LIST
83580: LIST
83581: LIST
83582: LIST
83583: LIST
83584: PUSH
83585: EMPTY
83586: LIST
83587: LIST
83588: ST_TO_ADDR
// if result then
83589: LD_VAR 0 1
83593: IFFALSE 83882
// begin normal :=  ;
83595: LD_ADDR_VAR 0 3
83599: PUSH
83600: LD_STRING 
83602: ST_TO_ADDR
// hardcore :=  ;
83603: LD_ADDR_VAR 0 4
83607: PUSH
83608: LD_STRING 
83610: ST_TO_ADDR
// for i = 1 to normalCounter do
83611: LD_ADDR_VAR 0 5
83615: PUSH
83616: DOUBLE
83617: LD_INT 1
83619: DEC
83620: ST_TO_ADDR
83621: LD_EXP 108
83625: PUSH
83626: FOR_TO
83627: IFFALSE 83728
// begin tmp := 0 ;
83629: LD_ADDR_VAR 0 2
83633: PUSH
83634: LD_STRING 0
83636: ST_TO_ADDR
// if result [ 1 ] then
83637: LD_VAR 0 1
83641: PUSH
83642: LD_INT 1
83644: ARRAY
83645: IFFALSE 83710
// if result [ 1 ] [ 1 ] = i then
83647: LD_VAR 0 1
83651: PUSH
83652: LD_INT 1
83654: ARRAY
83655: PUSH
83656: LD_INT 1
83658: ARRAY
83659: PUSH
83660: LD_VAR 0 5
83664: EQUAL
83665: IFFALSE 83710
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
83667: LD_ADDR_VAR 0 1
83671: PUSH
83672: LD_VAR 0 1
83676: PPUSH
83677: LD_INT 1
83679: PPUSH
83680: LD_VAR 0 1
83684: PUSH
83685: LD_INT 1
83687: ARRAY
83688: PPUSH
83689: LD_INT 1
83691: PPUSH
83692: CALL_OW 3
83696: PPUSH
83697: CALL_OW 1
83701: ST_TO_ADDR
// tmp := 1 ;
83702: LD_ADDR_VAR 0 2
83706: PUSH
83707: LD_STRING 1
83709: ST_TO_ADDR
// end ; normal := normal & tmp ;
83710: LD_ADDR_VAR 0 3
83714: PUSH
83715: LD_VAR 0 3
83719: PUSH
83720: LD_VAR 0 2
83724: STR
83725: ST_TO_ADDR
// end ;
83726: GO 83626
83728: POP
83729: POP
// for i = 1 to hardcoreCounter do
83730: LD_ADDR_VAR 0 5
83734: PUSH
83735: DOUBLE
83736: LD_INT 1
83738: DEC
83739: ST_TO_ADDR
83740: LD_EXP 109
83744: PUSH
83745: FOR_TO
83746: IFFALSE 83851
// begin tmp := 0 ;
83748: LD_ADDR_VAR 0 2
83752: PUSH
83753: LD_STRING 0
83755: ST_TO_ADDR
// if result [ 2 ] then
83756: LD_VAR 0 1
83760: PUSH
83761: LD_INT 2
83763: ARRAY
83764: IFFALSE 83833
// if result [ 2 ] [ 1 ] = 100 + i then
83766: LD_VAR 0 1
83770: PUSH
83771: LD_INT 2
83773: ARRAY
83774: PUSH
83775: LD_INT 1
83777: ARRAY
83778: PUSH
83779: LD_INT 100
83781: PUSH
83782: LD_VAR 0 5
83786: PLUS
83787: EQUAL
83788: IFFALSE 83833
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
83790: LD_ADDR_VAR 0 1
83794: PUSH
83795: LD_VAR 0 1
83799: PPUSH
83800: LD_INT 2
83802: PPUSH
83803: LD_VAR 0 1
83807: PUSH
83808: LD_INT 2
83810: ARRAY
83811: PPUSH
83812: LD_INT 1
83814: PPUSH
83815: CALL_OW 3
83819: PPUSH
83820: CALL_OW 1
83824: ST_TO_ADDR
// tmp := 1 ;
83825: LD_ADDR_VAR 0 2
83829: PUSH
83830: LD_STRING 1
83832: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
83833: LD_ADDR_VAR 0 4
83837: PUSH
83838: LD_VAR 0 4
83842: PUSH
83843: LD_VAR 0 2
83847: STR
83848: ST_TO_ADDR
// end ;
83849: GO 83745
83851: POP
83852: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
83853: LD_STRING getStreamItemsFromMission("
83855: PUSH
83856: LD_VAR 0 3
83860: STR
83861: PUSH
83862: LD_STRING ","
83864: STR
83865: PUSH
83866: LD_VAR 0 4
83870: STR
83871: PUSH
83872: LD_STRING ")
83874: STR
83875: PPUSH
83876: CALL_OW 559
// end else
83880: GO 83889
// ToLua ( getStreamItemsFromMission("","") ) ;
83882: LD_STRING getStreamItemsFromMission("","")
83884: PPUSH
83885: CALL_OW 559
// end ;
83889: LD_VAR 0 1
83893: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
83894: LD_VAR 0 2
83898: PUSH
83899: LD_INT 100
83901: EQUAL
83902: IFFALSE 84851
// begin if not StreamModeActive then
83904: LD_EXP 107
83908: NOT
83909: IFFALSE 83919
// StreamModeActive := true ;
83911: LD_ADDR_EXP 107
83915: PUSH
83916: LD_INT 1
83918: ST_TO_ADDR
// if p3 = 0 then
83919: LD_VAR 0 3
83923: PUSH
83924: LD_INT 0
83926: EQUAL
83927: IFFALSE 83933
// InitStreamMode ;
83929: CALL 79972 0 0
// if p3 = 1 then
83933: LD_VAR 0 3
83937: PUSH
83938: LD_INT 1
83940: EQUAL
83941: IFFALSE 83951
// sRocket := true ;
83943: LD_ADDR_EXP 112
83947: PUSH
83948: LD_INT 1
83950: ST_TO_ADDR
// if p3 = 2 then
83951: LD_VAR 0 3
83955: PUSH
83956: LD_INT 2
83958: EQUAL
83959: IFFALSE 83969
// sSpeed := true ;
83961: LD_ADDR_EXP 111
83965: PUSH
83966: LD_INT 1
83968: ST_TO_ADDR
// if p3 = 3 then
83969: LD_VAR 0 3
83973: PUSH
83974: LD_INT 3
83976: EQUAL
83977: IFFALSE 83987
// sEngine := true ;
83979: LD_ADDR_EXP 113
83983: PUSH
83984: LD_INT 1
83986: ST_TO_ADDR
// if p3 = 4 then
83987: LD_VAR 0 3
83991: PUSH
83992: LD_INT 4
83994: EQUAL
83995: IFFALSE 84005
// sSpec := true ;
83997: LD_ADDR_EXP 110
84001: PUSH
84002: LD_INT 1
84004: ST_TO_ADDR
// if p3 = 5 then
84005: LD_VAR 0 3
84009: PUSH
84010: LD_INT 5
84012: EQUAL
84013: IFFALSE 84023
// sLevel := true ;
84015: LD_ADDR_EXP 114
84019: PUSH
84020: LD_INT 1
84022: ST_TO_ADDR
// if p3 = 6 then
84023: LD_VAR 0 3
84027: PUSH
84028: LD_INT 6
84030: EQUAL
84031: IFFALSE 84041
// sArmoury := true ;
84033: LD_ADDR_EXP 115
84037: PUSH
84038: LD_INT 1
84040: ST_TO_ADDR
// if p3 = 7 then
84041: LD_VAR 0 3
84045: PUSH
84046: LD_INT 7
84048: EQUAL
84049: IFFALSE 84059
// sRadar := true ;
84051: LD_ADDR_EXP 116
84055: PUSH
84056: LD_INT 1
84058: ST_TO_ADDR
// if p3 = 8 then
84059: LD_VAR 0 3
84063: PUSH
84064: LD_INT 8
84066: EQUAL
84067: IFFALSE 84077
// sBunker := true ;
84069: LD_ADDR_EXP 117
84073: PUSH
84074: LD_INT 1
84076: ST_TO_ADDR
// if p3 = 9 then
84077: LD_VAR 0 3
84081: PUSH
84082: LD_INT 9
84084: EQUAL
84085: IFFALSE 84095
// sHack := true ;
84087: LD_ADDR_EXP 118
84091: PUSH
84092: LD_INT 1
84094: ST_TO_ADDR
// if p3 = 10 then
84095: LD_VAR 0 3
84099: PUSH
84100: LD_INT 10
84102: EQUAL
84103: IFFALSE 84113
// sFire := true ;
84105: LD_ADDR_EXP 119
84109: PUSH
84110: LD_INT 1
84112: ST_TO_ADDR
// if p3 = 11 then
84113: LD_VAR 0 3
84117: PUSH
84118: LD_INT 11
84120: EQUAL
84121: IFFALSE 84131
// sRefresh := true ;
84123: LD_ADDR_EXP 120
84127: PUSH
84128: LD_INT 1
84130: ST_TO_ADDR
// if p3 = 12 then
84131: LD_VAR 0 3
84135: PUSH
84136: LD_INT 12
84138: EQUAL
84139: IFFALSE 84149
// sExp := true ;
84141: LD_ADDR_EXP 121
84145: PUSH
84146: LD_INT 1
84148: ST_TO_ADDR
// if p3 = 13 then
84149: LD_VAR 0 3
84153: PUSH
84154: LD_INT 13
84156: EQUAL
84157: IFFALSE 84167
// sDepot := true ;
84159: LD_ADDR_EXP 122
84163: PUSH
84164: LD_INT 1
84166: ST_TO_ADDR
// if p3 = 14 then
84167: LD_VAR 0 3
84171: PUSH
84172: LD_INT 14
84174: EQUAL
84175: IFFALSE 84185
// sFlag := true ;
84177: LD_ADDR_EXP 123
84181: PUSH
84182: LD_INT 1
84184: ST_TO_ADDR
// if p3 = 15 then
84185: LD_VAR 0 3
84189: PUSH
84190: LD_INT 15
84192: EQUAL
84193: IFFALSE 84203
// sKamikadze := true ;
84195: LD_ADDR_EXP 131
84199: PUSH
84200: LD_INT 1
84202: ST_TO_ADDR
// if p3 = 16 then
84203: LD_VAR 0 3
84207: PUSH
84208: LD_INT 16
84210: EQUAL
84211: IFFALSE 84221
// sTroll := true ;
84213: LD_ADDR_EXP 132
84217: PUSH
84218: LD_INT 1
84220: ST_TO_ADDR
// if p3 = 17 then
84221: LD_VAR 0 3
84225: PUSH
84226: LD_INT 17
84228: EQUAL
84229: IFFALSE 84239
// sSlow := true ;
84231: LD_ADDR_EXP 133
84235: PUSH
84236: LD_INT 1
84238: ST_TO_ADDR
// if p3 = 18 then
84239: LD_VAR 0 3
84243: PUSH
84244: LD_INT 18
84246: EQUAL
84247: IFFALSE 84257
// sLack := true ;
84249: LD_ADDR_EXP 134
84253: PUSH
84254: LD_INT 1
84256: ST_TO_ADDR
// if p3 = 19 then
84257: LD_VAR 0 3
84261: PUSH
84262: LD_INT 19
84264: EQUAL
84265: IFFALSE 84275
// sTank := true ;
84267: LD_ADDR_EXP 136
84271: PUSH
84272: LD_INT 1
84274: ST_TO_ADDR
// if p3 = 20 then
84275: LD_VAR 0 3
84279: PUSH
84280: LD_INT 20
84282: EQUAL
84283: IFFALSE 84293
// sRemote := true ;
84285: LD_ADDR_EXP 137
84289: PUSH
84290: LD_INT 1
84292: ST_TO_ADDR
// if p3 = 21 then
84293: LD_VAR 0 3
84297: PUSH
84298: LD_INT 21
84300: EQUAL
84301: IFFALSE 84311
// sPowell := true ;
84303: LD_ADDR_EXP 138
84307: PUSH
84308: LD_INT 1
84310: ST_TO_ADDR
// if p3 = 22 then
84311: LD_VAR 0 3
84315: PUSH
84316: LD_INT 22
84318: EQUAL
84319: IFFALSE 84329
// sTeleport := true ;
84321: LD_ADDR_EXP 141
84325: PUSH
84326: LD_INT 1
84328: ST_TO_ADDR
// if p3 = 23 then
84329: LD_VAR 0 3
84333: PUSH
84334: LD_INT 23
84336: EQUAL
84337: IFFALSE 84347
// sOilTower := true ;
84339: LD_ADDR_EXP 143
84343: PUSH
84344: LD_INT 1
84346: ST_TO_ADDR
// if p3 = 24 then
84347: LD_VAR 0 3
84351: PUSH
84352: LD_INT 24
84354: EQUAL
84355: IFFALSE 84365
// sShovel := true ;
84357: LD_ADDR_EXP 144
84361: PUSH
84362: LD_INT 1
84364: ST_TO_ADDR
// if p3 = 25 then
84365: LD_VAR 0 3
84369: PUSH
84370: LD_INT 25
84372: EQUAL
84373: IFFALSE 84383
// sSheik := true ;
84375: LD_ADDR_EXP 145
84379: PUSH
84380: LD_INT 1
84382: ST_TO_ADDR
// if p3 = 26 then
84383: LD_VAR 0 3
84387: PUSH
84388: LD_INT 26
84390: EQUAL
84391: IFFALSE 84401
// sEarthquake := true ;
84393: LD_ADDR_EXP 147
84397: PUSH
84398: LD_INT 1
84400: ST_TO_ADDR
// if p3 = 27 then
84401: LD_VAR 0 3
84405: PUSH
84406: LD_INT 27
84408: EQUAL
84409: IFFALSE 84419
// sAI := true ;
84411: LD_ADDR_EXP 148
84415: PUSH
84416: LD_INT 1
84418: ST_TO_ADDR
// if p3 = 28 then
84419: LD_VAR 0 3
84423: PUSH
84424: LD_INT 28
84426: EQUAL
84427: IFFALSE 84437
// sCargo := true ;
84429: LD_ADDR_EXP 151
84433: PUSH
84434: LD_INT 1
84436: ST_TO_ADDR
// if p3 = 29 then
84437: LD_VAR 0 3
84441: PUSH
84442: LD_INT 29
84444: EQUAL
84445: IFFALSE 84455
// sDLaser := true ;
84447: LD_ADDR_EXP 152
84451: PUSH
84452: LD_INT 1
84454: ST_TO_ADDR
// if p3 = 30 then
84455: LD_VAR 0 3
84459: PUSH
84460: LD_INT 30
84462: EQUAL
84463: IFFALSE 84473
// sExchange := true ;
84465: LD_ADDR_EXP 153
84469: PUSH
84470: LD_INT 1
84472: ST_TO_ADDR
// if p3 = 31 then
84473: LD_VAR 0 3
84477: PUSH
84478: LD_INT 31
84480: EQUAL
84481: IFFALSE 84491
// sFac := true ;
84483: LD_ADDR_EXP 154
84487: PUSH
84488: LD_INT 1
84490: ST_TO_ADDR
// if p3 = 32 then
84491: LD_VAR 0 3
84495: PUSH
84496: LD_INT 32
84498: EQUAL
84499: IFFALSE 84509
// sPower := true ;
84501: LD_ADDR_EXP 155
84505: PUSH
84506: LD_INT 1
84508: ST_TO_ADDR
// if p3 = 33 then
84509: LD_VAR 0 3
84513: PUSH
84514: LD_INT 33
84516: EQUAL
84517: IFFALSE 84527
// sRandom := true ;
84519: LD_ADDR_EXP 156
84523: PUSH
84524: LD_INT 1
84526: ST_TO_ADDR
// if p3 = 34 then
84527: LD_VAR 0 3
84531: PUSH
84532: LD_INT 34
84534: EQUAL
84535: IFFALSE 84545
// sShield := true ;
84537: LD_ADDR_EXP 157
84541: PUSH
84542: LD_INT 1
84544: ST_TO_ADDR
// if p3 = 35 then
84545: LD_VAR 0 3
84549: PUSH
84550: LD_INT 35
84552: EQUAL
84553: IFFALSE 84563
// sTime := true ;
84555: LD_ADDR_EXP 158
84559: PUSH
84560: LD_INT 1
84562: ST_TO_ADDR
// if p3 = 36 then
84563: LD_VAR 0 3
84567: PUSH
84568: LD_INT 36
84570: EQUAL
84571: IFFALSE 84581
// sTools := true ;
84573: LD_ADDR_EXP 159
84577: PUSH
84578: LD_INT 1
84580: ST_TO_ADDR
// if p3 = 101 then
84581: LD_VAR 0 3
84585: PUSH
84586: LD_INT 101
84588: EQUAL
84589: IFFALSE 84599
// sSold := true ;
84591: LD_ADDR_EXP 124
84595: PUSH
84596: LD_INT 1
84598: ST_TO_ADDR
// if p3 = 102 then
84599: LD_VAR 0 3
84603: PUSH
84604: LD_INT 102
84606: EQUAL
84607: IFFALSE 84617
// sDiff := true ;
84609: LD_ADDR_EXP 125
84613: PUSH
84614: LD_INT 1
84616: ST_TO_ADDR
// if p3 = 103 then
84617: LD_VAR 0 3
84621: PUSH
84622: LD_INT 103
84624: EQUAL
84625: IFFALSE 84635
// sFog := true ;
84627: LD_ADDR_EXP 128
84631: PUSH
84632: LD_INT 1
84634: ST_TO_ADDR
// if p3 = 104 then
84635: LD_VAR 0 3
84639: PUSH
84640: LD_INT 104
84642: EQUAL
84643: IFFALSE 84653
// sReset := true ;
84645: LD_ADDR_EXP 129
84649: PUSH
84650: LD_INT 1
84652: ST_TO_ADDR
// if p3 = 105 then
84653: LD_VAR 0 3
84657: PUSH
84658: LD_INT 105
84660: EQUAL
84661: IFFALSE 84671
// sSun := true ;
84663: LD_ADDR_EXP 130
84667: PUSH
84668: LD_INT 1
84670: ST_TO_ADDR
// if p3 = 106 then
84671: LD_VAR 0 3
84675: PUSH
84676: LD_INT 106
84678: EQUAL
84679: IFFALSE 84689
// sTiger := true ;
84681: LD_ADDR_EXP 126
84685: PUSH
84686: LD_INT 1
84688: ST_TO_ADDR
// if p3 = 107 then
84689: LD_VAR 0 3
84693: PUSH
84694: LD_INT 107
84696: EQUAL
84697: IFFALSE 84707
// sBomb := true ;
84699: LD_ADDR_EXP 127
84703: PUSH
84704: LD_INT 1
84706: ST_TO_ADDR
// if p3 = 108 then
84707: LD_VAR 0 3
84711: PUSH
84712: LD_INT 108
84714: EQUAL
84715: IFFALSE 84725
// sWound := true ;
84717: LD_ADDR_EXP 135
84721: PUSH
84722: LD_INT 1
84724: ST_TO_ADDR
// if p3 = 109 then
84725: LD_VAR 0 3
84729: PUSH
84730: LD_INT 109
84732: EQUAL
84733: IFFALSE 84743
// sBetray := true ;
84735: LD_ADDR_EXP 139
84739: PUSH
84740: LD_INT 1
84742: ST_TO_ADDR
// if p3 = 110 then
84743: LD_VAR 0 3
84747: PUSH
84748: LD_INT 110
84750: EQUAL
84751: IFFALSE 84761
// sContamin := true ;
84753: LD_ADDR_EXP 140
84757: PUSH
84758: LD_INT 1
84760: ST_TO_ADDR
// if p3 = 111 then
84761: LD_VAR 0 3
84765: PUSH
84766: LD_INT 111
84768: EQUAL
84769: IFFALSE 84779
// sOil := true ;
84771: LD_ADDR_EXP 142
84775: PUSH
84776: LD_INT 1
84778: ST_TO_ADDR
// if p3 = 112 then
84779: LD_VAR 0 3
84783: PUSH
84784: LD_INT 112
84786: EQUAL
84787: IFFALSE 84797
// sStu := true ;
84789: LD_ADDR_EXP 146
84793: PUSH
84794: LD_INT 1
84796: ST_TO_ADDR
// if p3 = 113 then
84797: LD_VAR 0 3
84801: PUSH
84802: LD_INT 113
84804: EQUAL
84805: IFFALSE 84815
// sBazooka := true ;
84807: LD_ADDR_EXP 149
84811: PUSH
84812: LD_INT 1
84814: ST_TO_ADDR
// if p3 = 114 then
84815: LD_VAR 0 3
84819: PUSH
84820: LD_INT 114
84822: EQUAL
84823: IFFALSE 84833
// sMortar := true ;
84825: LD_ADDR_EXP 150
84829: PUSH
84830: LD_INT 1
84832: ST_TO_ADDR
// if p3 = 115 then
84833: LD_VAR 0 3
84837: PUSH
84838: LD_INT 115
84840: EQUAL
84841: IFFALSE 84851
// sRanger := true ;
84843: LD_ADDR_EXP 160
84847: PUSH
84848: LD_INT 1
84850: ST_TO_ADDR
// end ; end ;
84851: PPOPN 6
84853: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
84854: LD_EXP 107
84858: PUSH
84859: LD_EXP 112
84863: AND
84864: IFFALSE 84988
84866: GO 84868
84868: DISABLE
84869: LD_INT 0
84871: PPUSH
84872: PPUSH
// begin enable ;
84873: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
84874: LD_ADDR_VAR 0 2
84878: PUSH
84879: LD_INT 22
84881: PUSH
84882: LD_OWVAR 2
84886: PUSH
84887: EMPTY
84888: LIST
84889: LIST
84890: PUSH
84891: LD_INT 2
84893: PUSH
84894: LD_INT 34
84896: PUSH
84897: LD_INT 7
84899: PUSH
84900: EMPTY
84901: LIST
84902: LIST
84903: PUSH
84904: LD_INT 34
84906: PUSH
84907: LD_INT 45
84909: PUSH
84910: EMPTY
84911: LIST
84912: LIST
84913: PUSH
84914: LD_INT 34
84916: PUSH
84917: LD_INT 28
84919: PUSH
84920: EMPTY
84921: LIST
84922: LIST
84923: PUSH
84924: LD_INT 34
84926: PUSH
84927: LD_INT 47
84929: PUSH
84930: EMPTY
84931: LIST
84932: LIST
84933: PUSH
84934: EMPTY
84935: LIST
84936: LIST
84937: LIST
84938: LIST
84939: LIST
84940: PUSH
84941: EMPTY
84942: LIST
84943: LIST
84944: PPUSH
84945: CALL_OW 69
84949: ST_TO_ADDR
// if not tmp then
84950: LD_VAR 0 2
84954: NOT
84955: IFFALSE 84959
// exit ;
84957: GO 84988
// for i in tmp do
84959: LD_ADDR_VAR 0 1
84963: PUSH
84964: LD_VAR 0 2
84968: PUSH
84969: FOR_IN
84970: IFFALSE 84986
// begin SetLives ( i , 0 ) ;
84972: LD_VAR 0 1
84976: PPUSH
84977: LD_INT 0
84979: PPUSH
84980: CALL_OW 234
// end ;
84984: GO 84969
84986: POP
84987: POP
// end ;
84988: PPOPN 2
84990: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
84991: LD_EXP 107
84995: PUSH
84996: LD_EXP 113
85000: AND
85001: IFFALSE 85085
85003: GO 85005
85005: DISABLE
85006: LD_INT 0
85008: PPUSH
85009: PPUSH
// begin enable ;
85010: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
85011: LD_ADDR_VAR 0 2
85015: PUSH
85016: LD_INT 22
85018: PUSH
85019: LD_OWVAR 2
85023: PUSH
85024: EMPTY
85025: LIST
85026: LIST
85027: PUSH
85028: LD_INT 32
85030: PUSH
85031: LD_INT 3
85033: PUSH
85034: EMPTY
85035: LIST
85036: LIST
85037: PUSH
85038: EMPTY
85039: LIST
85040: LIST
85041: PPUSH
85042: CALL_OW 69
85046: ST_TO_ADDR
// if not tmp then
85047: LD_VAR 0 2
85051: NOT
85052: IFFALSE 85056
// exit ;
85054: GO 85085
// for i in tmp do
85056: LD_ADDR_VAR 0 1
85060: PUSH
85061: LD_VAR 0 2
85065: PUSH
85066: FOR_IN
85067: IFFALSE 85083
// begin SetLives ( i , 0 ) ;
85069: LD_VAR 0 1
85073: PPUSH
85074: LD_INT 0
85076: PPUSH
85077: CALL_OW 234
// end ;
85081: GO 85066
85083: POP
85084: POP
// end ;
85085: PPOPN 2
85087: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
85088: LD_EXP 107
85092: PUSH
85093: LD_EXP 110
85097: AND
85098: IFFALSE 85191
85100: GO 85102
85102: DISABLE
85103: LD_INT 0
85105: PPUSH
// begin enable ;
85106: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
85107: LD_ADDR_VAR 0 1
85111: PUSH
85112: LD_INT 22
85114: PUSH
85115: LD_OWVAR 2
85119: PUSH
85120: EMPTY
85121: LIST
85122: LIST
85123: PUSH
85124: LD_INT 2
85126: PUSH
85127: LD_INT 25
85129: PUSH
85130: LD_INT 5
85132: PUSH
85133: EMPTY
85134: LIST
85135: LIST
85136: PUSH
85137: LD_INT 25
85139: PUSH
85140: LD_INT 9
85142: PUSH
85143: EMPTY
85144: LIST
85145: LIST
85146: PUSH
85147: LD_INT 25
85149: PUSH
85150: LD_INT 8
85152: PUSH
85153: EMPTY
85154: LIST
85155: LIST
85156: PUSH
85157: EMPTY
85158: LIST
85159: LIST
85160: LIST
85161: LIST
85162: PUSH
85163: EMPTY
85164: LIST
85165: LIST
85166: PPUSH
85167: CALL_OW 69
85171: PUSH
85172: FOR_IN
85173: IFFALSE 85189
// begin SetClass ( i , 1 ) ;
85175: LD_VAR 0 1
85179: PPUSH
85180: LD_INT 1
85182: PPUSH
85183: CALL_OW 336
// end ;
85187: GO 85172
85189: POP
85190: POP
// end ;
85191: PPOPN 1
85193: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
85194: LD_EXP 107
85198: PUSH
85199: LD_EXP 111
85203: AND
85204: PUSH
85205: LD_OWVAR 65
85209: PUSH
85210: LD_INT 7
85212: LESS
85213: AND
85214: IFFALSE 85228
85216: GO 85218
85218: DISABLE
// begin enable ;
85219: ENABLE
// game_speed := 7 ;
85220: LD_ADDR_OWVAR 65
85224: PUSH
85225: LD_INT 7
85227: ST_TO_ADDR
// end ;
85228: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
85229: LD_EXP 107
85233: PUSH
85234: LD_EXP 114
85238: AND
85239: IFFALSE 85441
85241: GO 85243
85243: DISABLE
85244: LD_INT 0
85246: PPUSH
85247: PPUSH
85248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
85249: LD_ADDR_VAR 0 3
85253: PUSH
85254: LD_INT 81
85256: PUSH
85257: LD_OWVAR 2
85261: PUSH
85262: EMPTY
85263: LIST
85264: LIST
85265: PUSH
85266: LD_INT 21
85268: PUSH
85269: LD_INT 1
85271: PUSH
85272: EMPTY
85273: LIST
85274: LIST
85275: PUSH
85276: EMPTY
85277: LIST
85278: LIST
85279: PPUSH
85280: CALL_OW 69
85284: ST_TO_ADDR
// if not tmp then
85285: LD_VAR 0 3
85289: NOT
85290: IFFALSE 85294
// exit ;
85292: GO 85441
// if tmp > 5 then
85294: LD_VAR 0 3
85298: PUSH
85299: LD_INT 5
85301: GREATER
85302: IFFALSE 85314
// k := 5 else
85304: LD_ADDR_VAR 0 2
85308: PUSH
85309: LD_INT 5
85311: ST_TO_ADDR
85312: GO 85324
// k := tmp ;
85314: LD_ADDR_VAR 0 2
85318: PUSH
85319: LD_VAR 0 3
85323: ST_TO_ADDR
// for i := 1 to k do
85324: LD_ADDR_VAR 0 1
85328: PUSH
85329: DOUBLE
85330: LD_INT 1
85332: DEC
85333: ST_TO_ADDR
85334: LD_VAR 0 2
85338: PUSH
85339: FOR_TO
85340: IFFALSE 85439
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
85342: LD_VAR 0 3
85346: PUSH
85347: LD_VAR 0 1
85351: ARRAY
85352: PPUSH
85353: LD_VAR 0 1
85357: PUSH
85358: LD_INT 4
85360: MOD
85361: PUSH
85362: LD_INT 1
85364: PLUS
85365: PPUSH
85366: CALL_OW 259
85370: PUSH
85371: LD_INT 10
85373: LESS
85374: IFFALSE 85437
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
85376: LD_VAR 0 3
85380: PUSH
85381: LD_VAR 0 1
85385: ARRAY
85386: PPUSH
85387: LD_VAR 0 1
85391: PUSH
85392: LD_INT 4
85394: MOD
85395: PUSH
85396: LD_INT 1
85398: PLUS
85399: PPUSH
85400: LD_VAR 0 3
85404: PUSH
85405: LD_VAR 0 1
85409: ARRAY
85410: PPUSH
85411: LD_VAR 0 1
85415: PUSH
85416: LD_INT 4
85418: MOD
85419: PUSH
85420: LD_INT 1
85422: PLUS
85423: PPUSH
85424: CALL_OW 259
85428: PUSH
85429: LD_INT 1
85431: PLUS
85432: PPUSH
85433: CALL_OW 237
85437: GO 85339
85439: POP
85440: POP
// end ;
85441: PPOPN 3
85443: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
85444: LD_EXP 107
85448: PUSH
85449: LD_EXP 115
85453: AND
85454: IFFALSE 85474
85456: GO 85458
85458: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
85459: LD_INT 4
85461: PPUSH
85462: LD_OWVAR 2
85466: PPUSH
85467: LD_INT 0
85469: PPUSH
85470: CALL_OW 324
85474: END
// every 0 0$1 trigger StreamModeActive and sShovel do
85475: LD_EXP 107
85479: PUSH
85480: LD_EXP 144
85484: AND
85485: IFFALSE 85505
85487: GO 85489
85489: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
85490: LD_INT 19
85492: PPUSH
85493: LD_OWVAR 2
85497: PPUSH
85498: LD_INT 0
85500: PPUSH
85501: CALL_OW 324
85505: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
85506: LD_EXP 107
85510: PUSH
85511: LD_EXP 116
85515: AND
85516: IFFALSE 85618
85518: GO 85520
85520: DISABLE
85521: LD_INT 0
85523: PPUSH
85524: PPUSH
// begin enable ;
85525: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
85526: LD_ADDR_VAR 0 2
85530: PUSH
85531: LD_INT 22
85533: PUSH
85534: LD_OWVAR 2
85538: PUSH
85539: EMPTY
85540: LIST
85541: LIST
85542: PUSH
85543: LD_INT 2
85545: PUSH
85546: LD_INT 34
85548: PUSH
85549: LD_INT 11
85551: PUSH
85552: EMPTY
85553: LIST
85554: LIST
85555: PUSH
85556: LD_INT 34
85558: PUSH
85559: LD_INT 30
85561: PUSH
85562: EMPTY
85563: LIST
85564: LIST
85565: PUSH
85566: EMPTY
85567: LIST
85568: LIST
85569: LIST
85570: PUSH
85571: EMPTY
85572: LIST
85573: LIST
85574: PPUSH
85575: CALL_OW 69
85579: ST_TO_ADDR
// if not tmp then
85580: LD_VAR 0 2
85584: NOT
85585: IFFALSE 85589
// exit ;
85587: GO 85618
// for i in tmp do
85589: LD_ADDR_VAR 0 1
85593: PUSH
85594: LD_VAR 0 2
85598: PUSH
85599: FOR_IN
85600: IFFALSE 85616
// begin SetLives ( i , 0 ) ;
85602: LD_VAR 0 1
85606: PPUSH
85607: LD_INT 0
85609: PPUSH
85610: CALL_OW 234
// end ;
85614: GO 85599
85616: POP
85617: POP
// end ;
85618: PPOPN 2
85620: END
// every 0 0$1 trigger StreamModeActive and sBunker do
85621: LD_EXP 107
85625: PUSH
85626: LD_EXP 117
85630: AND
85631: IFFALSE 85651
85633: GO 85635
85635: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
85636: LD_INT 32
85638: PPUSH
85639: LD_OWVAR 2
85643: PPUSH
85644: LD_INT 0
85646: PPUSH
85647: CALL_OW 324
85651: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
85652: LD_EXP 107
85656: PUSH
85657: LD_EXP 118
85661: AND
85662: IFFALSE 85843
85664: GO 85666
85666: DISABLE
85667: LD_INT 0
85669: PPUSH
85670: PPUSH
85671: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
85672: LD_ADDR_VAR 0 2
85676: PUSH
85677: LD_INT 22
85679: PUSH
85680: LD_OWVAR 2
85684: PUSH
85685: EMPTY
85686: LIST
85687: LIST
85688: PUSH
85689: LD_INT 33
85691: PUSH
85692: LD_INT 3
85694: PUSH
85695: EMPTY
85696: LIST
85697: LIST
85698: PUSH
85699: EMPTY
85700: LIST
85701: LIST
85702: PPUSH
85703: CALL_OW 69
85707: ST_TO_ADDR
// if not tmp then
85708: LD_VAR 0 2
85712: NOT
85713: IFFALSE 85717
// exit ;
85715: GO 85843
// side := 0 ;
85717: LD_ADDR_VAR 0 3
85721: PUSH
85722: LD_INT 0
85724: ST_TO_ADDR
// for i := 1 to 8 do
85725: LD_ADDR_VAR 0 1
85729: PUSH
85730: DOUBLE
85731: LD_INT 1
85733: DEC
85734: ST_TO_ADDR
85735: LD_INT 8
85737: PUSH
85738: FOR_TO
85739: IFFALSE 85787
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
85741: LD_OWVAR 2
85745: PUSH
85746: LD_VAR 0 1
85750: NONEQUAL
85751: PUSH
85752: LD_OWVAR 2
85756: PPUSH
85757: LD_VAR 0 1
85761: PPUSH
85762: CALL_OW 81
85766: PUSH
85767: LD_INT 2
85769: EQUAL
85770: AND
85771: IFFALSE 85785
// begin side := i ;
85773: LD_ADDR_VAR 0 3
85777: PUSH
85778: LD_VAR 0 1
85782: ST_TO_ADDR
// break ;
85783: GO 85787
// end ;
85785: GO 85738
85787: POP
85788: POP
// if not side then
85789: LD_VAR 0 3
85793: NOT
85794: IFFALSE 85798
// exit ;
85796: GO 85843
// for i := 1 to tmp do
85798: LD_ADDR_VAR 0 1
85802: PUSH
85803: DOUBLE
85804: LD_INT 1
85806: DEC
85807: ST_TO_ADDR
85808: LD_VAR 0 2
85812: PUSH
85813: FOR_TO
85814: IFFALSE 85841
// if Prob ( 60 ) then
85816: LD_INT 60
85818: PPUSH
85819: CALL_OW 13
85823: IFFALSE 85839
// SetSide ( i , side ) ;
85825: LD_VAR 0 1
85829: PPUSH
85830: LD_VAR 0 3
85834: PPUSH
85835: CALL_OW 235
85839: GO 85813
85841: POP
85842: POP
// end ;
85843: PPOPN 3
85845: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
85846: LD_EXP 107
85850: PUSH
85851: LD_EXP 120
85855: AND
85856: IFFALSE 85975
85858: GO 85860
85860: DISABLE
85861: LD_INT 0
85863: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
85864: LD_ADDR_VAR 0 1
85868: PUSH
85869: LD_INT 22
85871: PUSH
85872: LD_OWVAR 2
85876: PUSH
85877: EMPTY
85878: LIST
85879: LIST
85880: PUSH
85881: LD_INT 21
85883: PUSH
85884: LD_INT 1
85886: PUSH
85887: EMPTY
85888: LIST
85889: LIST
85890: PUSH
85891: LD_INT 3
85893: PUSH
85894: LD_INT 23
85896: PUSH
85897: LD_INT 0
85899: PUSH
85900: EMPTY
85901: LIST
85902: LIST
85903: PUSH
85904: EMPTY
85905: LIST
85906: LIST
85907: PUSH
85908: EMPTY
85909: LIST
85910: LIST
85911: LIST
85912: PPUSH
85913: CALL_OW 69
85917: PUSH
85918: FOR_IN
85919: IFFALSE 85973
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
85921: LD_VAR 0 1
85925: PPUSH
85926: CALL_OW 257
85930: PUSH
85931: LD_INT 1
85933: PUSH
85934: LD_INT 2
85936: PUSH
85937: LD_INT 3
85939: PUSH
85940: LD_INT 4
85942: PUSH
85943: EMPTY
85944: LIST
85945: LIST
85946: LIST
85947: LIST
85948: IN
85949: IFFALSE 85971
// SetClass ( un , rand ( 1 , 4 ) ) ;
85951: LD_VAR 0 1
85955: PPUSH
85956: LD_INT 1
85958: PPUSH
85959: LD_INT 4
85961: PPUSH
85962: CALL_OW 12
85966: PPUSH
85967: CALL_OW 336
85971: GO 85918
85973: POP
85974: POP
// end ;
85975: PPOPN 1
85977: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
85978: LD_EXP 107
85982: PUSH
85983: LD_EXP 119
85987: AND
85988: IFFALSE 86067
85990: GO 85992
85992: DISABLE
85993: LD_INT 0
85995: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
85996: LD_ADDR_VAR 0 1
86000: PUSH
86001: LD_INT 22
86003: PUSH
86004: LD_OWVAR 2
86008: PUSH
86009: EMPTY
86010: LIST
86011: LIST
86012: PUSH
86013: LD_INT 21
86015: PUSH
86016: LD_INT 3
86018: PUSH
86019: EMPTY
86020: LIST
86021: LIST
86022: PUSH
86023: EMPTY
86024: LIST
86025: LIST
86026: PPUSH
86027: CALL_OW 69
86031: ST_TO_ADDR
// if not tmp then
86032: LD_VAR 0 1
86036: NOT
86037: IFFALSE 86041
// exit ;
86039: GO 86067
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
86041: LD_VAR 0 1
86045: PUSH
86046: LD_INT 1
86048: PPUSH
86049: LD_VAR 0 1
86053: PPUSH
86054: CALL_OW 12
86058: ARRAY
86059: PPUSH
86060: LD_INT 100
86062: PPUSH
86063: CALL_OW 234
// end ;
86067: PPOPN 1
86069: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
86070: LD_EXP 107
86074: PUSH
86075: LD_EXP 121
86079: AND
86080: IFFALSE 86178
86082: GO 86084
86084: DISABLE
86085: LD_INT 0
86087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
86088: LD_ADDR_VAR 0 1
86092: PUSH
86093: LD_INT 22
86095: PUSH
86096: LD_OWVAR 2
86100: PUSH
86101: EMPTY
86102: LIST
86103: LIST
86104: PUSH
86105: LD_INT 21
86107: PUSH
86108: LD_INT 1
86110: PUSH
86111: EMPTY
86112: LIST
86113: LIST
86114: PUSH
86115: EMPTY
86116: LIST
86117: LIST
86118: PPUSH
86119: CALL_OW 69
86123: ST_TO_ADDR
// if not tmp then
86124: LD_VAR 0 1
86128: NOT
86129: IFFALSE 86133
// exit ;
86131: GO 86178
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
86133: LD_VAR 0 1
86137: PUSH
86138: LD_INT 1
86140: PPUSH
86141: LD_VAR 0 1
86145: PPUSH
86146: CALL_OW 12
86150: ARRAY
86151: PPUSH
86152: LD_INT 1
86154: PPUSH
86155: LD_INT 4
86157: PPUSH
86158: CALL_OW 12
86162: PPUSH
86163: LD_INT 3000
86165: PPUSH
86166: LD_INT 9000
86168: PPUSH
86169: CALL_OW 12
86173: PPUSH
86174: CALL_OW 492
// end ;
86178: PPOPN 1
86180: END
// every 0 0$1 trigger StreamModeActive and sDepot do
86181: LD_EXP 107
86185: PUSH
86186: LD_EXP 122
86190: AND
86191: IFFALSE 86211
86193: GO 86195
86195: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
86196: LD_INT 1
86198: PPUSH
86199: LD_OWVAR 2
86203: PPUSH
86204: LD_INT 0
86206: PPUSH
86207: CALL_OW 324
86211: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
86212: LD_EXP 107
86216: PUSH
86217: LD_EXP 123
86221: AND
86222: IFFALSE 86305
86224: GO 86226
86226: DISABLE
86227: LD_INT 0
86229: PPUSH
86230: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
86231: LD_ADDR_VAR 0 2
86235: PUSH
86236: LD_INT 22
86238: PUSH
86239: LD_OWVAR 2
86243: PUSH
86244: EMPTY
86245: LIST
86246: LIST
86247: PUSH
86248: LD_INT 21
86250: PUSH
86251: LD_INT 3
86253: PUSH
86254: EMPTY
86255: LIST
86256: LIST
86257: PUSH
86258: EMPTY
86259: LIST
86260: LIST
86261: PPUSH
86262: CALL_OW 69
86266: ST_TO_ADDR
// if not tmp then
86267: LD_VAR 0 2
86271: NOT
86272: IFFALSE 86276
// exit ;
86274: GO 86305
// for i in tmp do
86276: LD_ADDR_VAR 0 1
86280: PUSH
86281: LD_VAR 0 2
86285: PUSH
86286: FOR_IN
86287: IFFALSE 86303
// SetBLevel ( i , 10 ) ;
86289: LD_VAR 0 1
86293: PPUSH
86294: LD_INT 10
86296: PPUSH
86297: CALL_OW 241
86301: GO 86286
86303: POP
86304: POP
// end ;
86305: PPOPN 2
86307: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
86308: LD_EXP 107
86312: PUSH
86313: LD_EXP 124
86317: AND
86318: IFFALSE 86429
86320: GO 86322
86322: DISABLE
86323: LD_INT 0
86325: PPUSH
86326: PPUSH
86327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
86328: LD_ADDR_VAR 0 3
86332: PUSH
86333: LD_INT 22
86335: PUSH
86336: LD_OWVAR 2
86340: PUSH
86341: EMPTY
86342: LIST
86343: LIST
86344: PUSH
86345: LD_INT 25
86347: PUSH
86348: LD_INT 1
86350: PUSH
86351: EMPTY
86352: LIST
86353: LIST
86354: PUSH
86355: EMPTY
86356: LIST
86357: LIST
86358: PPUSH
86359: CALL_OW 69
86363: ST_TO_ADDR
// if not tmp then
86364: LD_VAR 0 3
86368: NOT
86369: IFFALSE 86373
// exit ;
86371: GO 86429
// un := tmp [ rand ( 1 , tmp ) ] ;
86373: LD_ADDR_VAR 0 2
86377: PUSH
86378: LD_VAR 0 3
86382: PUSH
86383: LD_INT 1
86385: PPUSH
86386: LD_VAR 0 3
86390: PPUSH
86391: CALL_OW 12
86395: ARRAY
86396: ST_TO_ADDR
// if Crawls ( un ) then
86397: LD_VAR 0 2
86401: PPUSH
86402: CALL_OW 318
86406: IFFALSE 86417
// ComWalk ( un ) ;
86408: LD_VAR 0 2
86412: PPUSH
86413: CALL_OW 138
// SetClass ( un , class_sniper ) ;
86417: LD_VAR 0 2
86421: PPUSH
86422: LD_INT 5
86424: PPUSH
86425: CALL_OW 336
// end ;
86429: PPOPN 3
86431: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
86432: LD_EXP 107
86436: PUSH
86437: LD_EXP 125
86441: AND
86442: PUSH
86443: LD_OWVAR 67
86447: PUSH
86448: LD_INT 3
86450: LESS
86451: AND
86452: IFFALSE 86471
86454: GO 86456
86456: DISABLE
// Difficulty := Difficulty + 1 ;
86457: LD_ADDR_OWVAR 67
86461: PUSH
86462: LD_OWVAR 67
86466: PUSH
86467: LD_INT 1
86469: PLUS
86470: ST_TO_ADDR
86471: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
86472: LD_EXP 107
86476: PUSH
86477: LD_EXP 126
86481: AND
86482: IFFALSE 86585
86484: GO 86486
86486: DISABLE
86487: LD_INT 0
86489: PPUSH
// begin for i := 1 to 5 do
86490: LD_ADDR_VAR 0 1
86494: PUSH
86495: DOUBLE
86496: LD_INT 1
86498: DEC
86499: ST_TO_ADDR
86500: LD_INT 5
86502: PUSH
86503: FOR_TO
86504: IFFALSE 86583
// begin uc_nation := nation_nature ;
86506: LD_ADDR_OWVAR 21
86510: PUSH
86511: LD_INT 0
86513: ST_TO_ADDR
// uc_side := 0 ;
86514: LD_ADDR_OWVAR 20
86518: PUSH
86519: LD_INT 0
86521: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
86522: LD_ADDR_OWVAR 29
86526: PUSH
86527: LD_INT 12
86529: PUSH
86530: LD_INT 12
86532: PUSH
86533: EMPTY
86534: LIST
86535: LIST
86536: ST_TO_ADDR
// hc_agressivity := 20 ;
86537: LD_ADDR_OWVAR 35
86541: PUSH
86542: LD_INT 20
86544: ST_TO_ADDR
// hc_class := class_tiger ;
86545: LD_ADDR_OWVAR 28
86549: PUSH
86550: LD_INT 14
86552: ST_TO_ADDR
// hc_gallery :=  ;
86553: LD_ADDR_OWVAR 33
86557: PUSH
86558: LD_STRING 
86560: ST_TO_ADDR
// hc_name :=  ;
86561: LD_ADDR_OWVAR 26
86565: PUSH
86566: LD_STRING 
86568: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
86569: CALL_OW 44
86573: PPUSH
86574: LD_INT 0
86576: PPUSH
86577: CALL_OW 51
// end ;
86581: GO 86503
86583: POP
86584: POP
// end ;
86585: PPOPN 1
86587: END
// every 0 0$1 trigger StreamModeActive and sBomb do
86588: LD_EXP 107
86592: PUSH
86593: LD_EXP 127
86597: AND
86598: IFFALSE 86607
86600: GO 86602
86602: DISABLE
// StreamSibBomb ;
86603: CALL 86608 0 0
86607: END
// export function StreamSibBomb ; var i , x , y ; begin
86608: LD_INT 0
86610: PPUSH
86611: PPUSH
86612: PPUSH
86613: PPUSH
// result := false ;
86614: LD_ADDR_VAR 0 1
86618: PUSH
86619: LD_INT 0
86621: ST_TO_ADDR
// for i := 1 to 16 do
86622: LD_ADDR_VAR 0 2
86626: PUSH
86627: DOUBLE
86628: LD_INT 1
86630: DEC
86631: ST_TO_ADDR
86632: LD_INT 16
86634: PUSH
86635: FOR_TO
86636: IFFALSE 86835
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
86638: LD_ADDR_VAR 0 3
86642: PUSH
86643: LD_INT 10
86645: PUSH
86646: LD_INT 20
86648: PUSH
86649: LD_INT 30
86651: PUSH
86652: LD_INT 40
86654: PUSH
86655: LD_INT 50
86657: PUSH
86658: LD_INT 60
86660: PUSH
86661: LD_INT 70
86663: PUSH
86664: LD_INT 80
86666: PUSH
86667: LD_INT 90
86669: PUSH
86670: LD_INT 100
86672: PUSH
86673: LD_INT 110
86675: PUSH
86676: LD_INT 120
86678: PUSH
86679: LD_INT 130
86681: PUSH
86682: LD_INT 140
86684: PUSH
86685: LD_INT 150
86687: PUSH
86688: EMPTY
86689: LIST
86690: LIST
86691: LIST
86692: LIST
86693: LIST
86694: LIST
86695: LIST
86696: LIST
86697: LIST
86698: LIST
86699: LIST
86700: LIST
86701: LIST
86702: LIST
86703: LIST
86704: PUSH
86705: LD_INT 1
86707: PPUSH
86708: LD_INT 15
86710: PPUSH
86711: CALL_OW 12
86715: ARRAY
86716: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
86717: LD_ADDR_VAR 0 4
86721: PUSH
86722: LD_INT 10
86724: PUSH
86725: LD_INT 20
86727: PUSH
86728: LD_INT 30
86730: PUSH
86731: LD_INT 40
86733: PUSH
86734: LD_INT 50
86736: PUSH
86737: LD_INT 60
86739: PUSH
86740: LD_INT 70
86742: PUSH
86743: LD_INT 80
86745: PUSH
86746: LD_INT 90
86748: PUSH
86749: LD_INT 100
86751: PUSH
86752: LD_INT 110
86754: PUSH
86755: LD_INT 120
86757: PUSH
86758: LD_INT 130
86760: PUSH
86761: LD_INT 140
86763: PUSH
86764: LD_INT 150
86766: PUSH
86767: EMPTY
86768: LIST
86769: LIST
86770: LIST
86771: LIST
86772: LIST
86773: LIST
86774: LIST
86775: LIST
86776: LIST
86777: LIST
86778: LIST
86779: LIST
86780: LIST
86781: LIST
86782: LIST
86783: PUSH
86784: LD_INT 1
86786: PPUSH
86787: LD_INT 15
86789: PPUSH
86790: CALL_OW 12
86794: ARRAY
86795: ST_TO_ADDR
// if ValidHex ( x , y ) then
86796: LD_VAR 0 3
86800: PPUSH
86801: LD_VAR 0 4
86805: PPUSH
86806: CALL_OW 488
86810: IFFALSE 86833
// begin result := [ x , y ] ;
86812: LD_ADDR_VAR 0 1
86816: PUSH
86817: LD_VAR 0 3
86821: PUSH
86822: LD_VAR 0 4
86826: PUSH
86827: EMPTY
86828: LIST
86829: LIST
86830: ST_TO_ADDR
// break ;
86831: GO 86835
// end ; end ;
86833: GO 86635
86835: POP
86836: POP
// if result then
86837: LD_VAR 0 1
86841: IFFALSE 86901
// begin ToLua ( playSibBomb() ) ;
86843: LD_STRING playSibBomb()
86845: PPUSH
86846: CALL_OW 559
// wait ( 0 0$14 ) ;
86850: LD_INT 490
86852: PPUSH
86853: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
86857: LD_VAR 0 1
86861: PUSH
86862: LD_INT 1
86864: ARRAY
86865: PPUSH
86866: LD_VAR 0 1
86870: PUSH
86871: LD_INT 2
86873: ARRAY
86874: PPUSH
86875: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
86879: LD_VAR 0 1
86883: PUSH
86884: LD_INT 1
86886: ARRAY
86887: PPUSH
86888: LD_VAR 0 1
86892: PUSH
86893: LD_INT 2
86895: ARRAY
86896: PPUSH
86897: CALL_OW 429
// end ; end ;
86901: LD_VAR 0 1
86905: RET
// every 0 0$1 trigger StreamModeActive and sReset do
86906: LD_EXP 107
86910: PUSH
86911: LD_EXP 129
86915: AND
86916: IFFALSE 86928
86918: GO 86920
86920: DISABLE
// YouLost (  ) ;
86921: LD_STRING 
86923: PPUSH
86924: CALL_OW 104
86928: END
// every 0 0$1 trigger StreamModeActive and sFog do
86929: LD_EXP 107
86933: PUSH
86934: LD_EXP 128
86938: AND
86939: IFFALSE 86953
86941: GO 86943
86943: DISABLE
// FogOff ( your_side ) ;
86944: LD_OWVAR 2
86948: PPUSH
86949: CALL_OW 344
86953: END
// every 0 0$1 trigger StreamModeActive and sSun do
86954: LD_EXP 107
86958: PUSH
86959: LD_EXP 130
86963: AND
86964: IFFALSE 86992
86966: GO 86968
86968: DISABLE
// begin solar_recharge_percent := 0 ;
86969: LD_ADDR_OWVAR 79
86973: PUSH
86974: LD_INT 0
86976: ST_TO_ADDR
// wait ( 5 5$00 ) ;
86977: LD_INT 10500
86979: PPUSH
86980: CALL_OW 67
// solar_recharge_percent := 100 ;
86984: LD_ADDR_OWVAR 79
86988: PUSH
86989: LD_INT 100
86991: ST_TO_ADDR
// end ;
86992: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
86993: LD_EXP 107
86997: PUSH
86998: LD_EXP 131
87002: AND
87003: IFFALSE 87242
87005: GO 87007
87007: DISABLE
87008: LD_INT 0
87010: PPUSH
87011: PPUSH
87012: PPUSH
// begin tmp := [ ] ;
87013: LD_ADDR_VAR 0 3
87017: PUSH
87018: EMPTY
87019: ST_TO_ADDR
// for i := 1 to 6 do
87020: LD_ADDR_VAR 0 1
87024: PUSH
87025: DOUBLE
87026: LD_INT 1
87028: DEC
87029: ST_TO_ADDR
87030: LD_INT 6
87032: PUSH
87033: FOR_TO
87034: IFFALSE 87139
// begin uc_nation := nation_nature ;
87036: LD_ADDR_OWVAR 21
87040: PUSH
87041: LD_INT 0
87043: ST_TO_ADDR
// uc_side := 0 ;
87044: LD_ADDR_OWVAR 20
87048: PUSH
87049: LD_INT 0
87051: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
87052: LD_ADDR_OWVAR 29
87056: PUSH
87057: LD_INT 12
87059: PUSH
87060: LD_INT 12
87062: PUSH
87063: EMPTY
87064: LIST
87065: LIST
87066: ST_TO_ADDR
// hc_agressivity := 20 ;
87067: LD_ADDR_OWVAR 35
87071: PUSH
87072: LD_INT 20
87074: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
87075: LD_ADDR_OWVAR 28
87079: PUSH
87080: LD_INT 17
87082: ST_TO_ADDR
// hc_gallery :=  ;
87083: LD_ADDR_OWVAR 33
87087: PUSH
87088: LD_STRING 
87090: ST_TO_ADDR
// hc_name :=  ;
87091: LD_ADDR_OWVAR 26
87095: PUSH
87096: LD_STRING 
87098: ST_TO_ADDR
// un := CreateHuman ;
87099: LD_ADDR_VAR 0 2
87103: PUSH
87104: CALL_OW 44
87108: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
87109: LD_VAR 0 2
87113: PPUSH
87114: LD_INT 1
87116: PPUSH
87117: CALL_OW 51
// tmp := tmp ^ un ;
87121: LD_ADDR_VAR 0 3
87125: PUSH
87126: LD_VAR 0 3
87130: PUSH
87131: LD_VAR 0 2
87135: ADD
87136: ST_TO_ADDR
// end ;
87137: GO 87033
87139: POP
87140: POP
// repeat wait ( 0 0$1 ) ;
87141: LD_INT 35
87143: PPUSH
87144: CALL_OW 67
// for un in tmp do
87148: LD_ADDR_VAR 0 2
87152: PUSH
87153: LD_VAR 0 3
87157: PUSH
87158: FOR_IN
87159: IFFALSE 87233
// begin if IsDead ( un ) then
87161: LD_VAR 0 2
87165: PPUSH
87166: CALL_OW 301
87170: IFFALSE 87190
// begin tmp := tmp diff un ;
87172: LD_ADDR_VAR 0 3
87176: PUSH
87177: LD_VAR 0 3
87181: PUSH
87182: LD_VAR 0 2
87186: DIFF
87187: ST_TO_ADDR
// continue ;
87188: GO 87158
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
87190: LD_VAR 0 2
87194: PPUSH
87195: LD_INT 3
87197: PUSH
87198: LD_INT 22
87200: PUSH
87201: LD_INT 0
87203: PUSH
87204: EMPTY
87205: LIST
87206: LIST
87207: PUSH
87208: EMPTY
87209: LIST
87210: LIST
87211: PPUSH
87212: CALL_OW 69
87216: PPUSH
87217: LD_VAR 0 2
87221: PPUSH
87222: CALL_OW 74
87226: PPUSH
87227: CALL_OW 115
// end ;
87231: GO 87158
87233: POP
87234: POP
// until not tmp ;
87235: LD_VAR 0 3
87239: NOT
87240: IFFALSE 87141
// end ;
87242: PPOPN 3
87244: END
// every 0 0$1 trigger StreamModeActive and sTroll do
87245: LD_EXP 107
87249: PUSH
87250: LD_EXP 132
87254: AND
87255: IFFALSE 87309
87257: GO 87259
87259: DISABLE
// begin ToLua ( displayTroll(); ) ;
87260: LD_STRING displayTroll();
87262: PPUSH
87263: CALL_OW 559
// wait ( 3 3$00 ) ;
87267: LD_INT 6300
87269: PPUSH
87270: CALL_OW 67
// ToLua ( hideTroll(); ) ;
87274: LD_STRING hideTroll();
87276: PPUSH
87277: CALL_OW 559
// wait ( 1 1$00 ) ;
87281: LD_INT 2100
87283: PPUSH
87284: CALL_OW 67
// ToLua ( displayTroll(); ) ;
87288: LD_STRING displayTroll();
87290: PPUSH
87291: CALL_OW 559
// wait ( 1 1$00 ) ;
87295: LD_INT 2100
87297: PPUSH
87298: CALL_OW 67
// ToLua ( hideTroll(); ) ;
87302: LD_STRING hideTroll();
87304: PPUSH
87305: CALL_OW 559
// end ;
87309: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
87310: LD_EXP 107
87314: PUSH
87315: LD_EXP 133
87319: AND
87320: IFFALSE 87383
87322: GO 87324
87324: DISABLE
87325: LD_INT 0
87327: PPUSH
// begin p := 0 ;
87328: LD_ADDR_VAR 0 1
87332: PUSH
87333: LD_INT 0
87335: ST_TO_ADDR
// repeat game_speed := 1 ;
87336: LD_ADDR_OWVAR 65
87340: PUSH
87341: LD_INT 1
87343: ST_TO_ADDR
// wait ( 0 0$1 ) ;
87344: LD_INT 35
87346: PPUSH
87347: CALL_OW 67
// p := p + 1 ;
87351: LD_ADDR_VAR 0 1
87355: PUSH
87356: LD_VAR 0 1
87360: PUSH
87361: LD_INT 1
87363: PLUS
87364: ST_TO_ADDR
// until p >= 60 ;
87365: LD_VAR 0 1
87369: PUSH
87370: LD_INT 60
87372: GREATEREQUAL
87373: IFFALSE 87336
// game_speed := 4 ;
87375: LD_ADDR_OWVAR 65
87379: PUSH
87380: LD_INT 4
87382: ST_TO_ADDR
// end ;
87383: PPOPN 1
87385: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
87386: LD_EXP 107
87390: PUSH
87391: LD_EXP 134
87395: AND
87396: IFFALSE 87542
87398: GO 87400
87400: DISABLE
87401: LD_INT 0
87403: PPUSH
87404: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
87405: LD_ADDR_VAR 0 1
87409: PUSH
87410: LD_INT 22
87412: PUSH
87413: LD_OWVAR 2
87417: PUSH
87418: EMPTY
87419: LIST
87420: LIST
87421: PUSH
87422: LD_INT 2
87424: PUSH
87425: LD_INT 30
87427: PUSH
87428: LD_INT 0
87430: PUSH
87431: EMPTY
87432: LIST
87433: LIST
87434: PUSH
87435: LD_INT 30
87437: PUSH
87438: LD_INT 1
87440: PUSH
87441: EMPTY
87442: LIST
87443: LIST
87444: PUSH
87445: EMPTY
87446: LIST
87447: LIST
87448: LIST
87449: PUSH
87450: EMPTY
87451: LIST
87452: LIST
87453: PPUSH
87454: CALL_OW 69
87458: ST_TO_ADDR
// if not depot then
87459: LD_VAR 0 1
87463: NOT
87464: IFFALSE 87468
// exit ;
87466: GO 87542
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
87468: LD_ADDR_VAR 0 2
87472: PUSH
87473: LD_VAR 0 1
87477: PUSH
87478: LD_INT 1
87480: PPUSH
87481: LD_VAR 0 1
87485: PPUSH
87486: CALL_OW 12
87490: ARRAY
87491: PPUSH
87492: CALL_OW 274
87496: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
87497: LD_VAR 0 2
87501: PPUSH
87502: LD_INT 1
87504: PPUSH
87505: LD_INT 0
87507: PPUSH
87508: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
87512: LD_VAR 0 2
87516: PPUSH
87517: LD_INT 2
87519: PPUSH
87520: LD_INT 0
87522: PPUSH
87523: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
87527: LD_VAR 0 2
87531: PPUSH
87532: LD_INT 3
87534: PPUSH
87535: LD_INT 0
87537: PPUSH
87538: CALL_OW 277
// end ;
87542: PPOPN 2
87544: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
87545: LD_EXP 107
87549: PUSH
87550: LD_EXP 135
87554: AND
87555: IFFALSE 87652
87557: GO 87559
87559: DISABLE
87560: LD_INT 0
87562: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
87563: LD_ADDR_VAR 0 1
87567: PUSH
87568: LD_INT 22
87570: PUSH
87571: LD_OWVAR 2
87575: PUSH
87576: EMPTY
87577: LIST
87578: LIST
87579: PUSH
87580: LD_INT 21
87582: PUSH
87583: LD_INT 1
87585: PUSH
87586: EMPTY
87587: LIST
87588: LIST
87589: PUSH
87590: LD_INT 3
87592: PUSH
87593: LD_INT 23
87595: PUSH
87596: LD_INT 0
87598: PUSH
87599: EMPTY
87600: LIST
87601: LIST
87602: PUSH
87603: EMPTY
87604: LIST
87605: LIST
87606: PUSH
87607: EMPTY
87608: LIST
87609: LIST
87610: LIST
87611: PPUSH
87612: CALL_OW 69
87616: ST_TO_ADDR
// if not tmp then
87617: LD_VAR 0 1
87621: NOT
87622: IFFALSE 87626
// exit ;
87624: GO 87652
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
87626: LD_VAR 0 1
87630: PUSH
87631: LD_INT 1
87633: PPUSH
87634: LD_VAR 0 1
87638: PPUSH
87639: CALL_OW 12
87643: ARRAY
87644: PPUSH
87645: LD_INT 200
87647: PPUSH
87648: CALL_OW 234
// end ;
87652: PPOPN 1
87654: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
87655: LD_EXP 107
87659: PUSH
87660: LD_EXP 136
87664: AND
87665: IFFALSE 87744
87667: GO 87669
87669: DISABLE
87670: LD_INT 0
87672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
87673: LD_ADDR_VAR 0 1
87677: PUSH
87678: LD_INT 22
87680: PUSH
87681: LD_OWVAR 2
87685: PUSH
87686: EMPTY
87687: LIST
87688: LIST
87689: PUSH
87690: LD_INT 21
87692: PUSH
87693: LD_INT 2
87695: PUSH
87696: EMPTY
87697: LIST
87698: LIST
87699: PUSH
87700: EMPTY
87701: LIST
87702: LIST
87703: PPUSH
87704: CALL_OW 69
87708: ST_TO_ADDR
// if not tmp then
87709: LD_VAR 0 1
87713: NOT
87714: IFFALSE 87718
// exit ;
87716: GO 87744
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
87718: LD_VAR 0 1
87722: PUSH
87723: LD_INT 1
87725: PPUSH
87726: LD_VAR 0 1
87730: PPUSH
87731: CALL_OW 12
87735: ARRAY
87736: PPUSH
87737: LD_INT 60
87739: PPUSH
87740: CALL_OW 234
// end ;
87744: PPOPN 1
87746: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
87747: LD_EXP 107
87751: PUSH
87752: LD_EXP 137
87756: AND
87757: IFFALSE 87856
87759: GO 87761
87761: DISABLE
87762: LD_INT 0
87764: PPUSH
87765: PPUSH
// begin enable ;
87766: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
87767: LD_ADDR_VAR 0 1
87771: PUSH
87772: LD_INT 22
87774: PUSH
87775: LD_OWVAR 2
87779: PUSH
87780: EMPTY
87781: LIST
87782: LIST
87783: PUSH
87784: LD_INT 61
87786: PUSH
87787: EMPTY
87788: LIST
87789: PUSH
87790: LD_INT 33
87792: PUSH
87793: LD_INT 2
87795: PUSH
87796: EMPTY
87797: LIST
87798: LIST
87799: PUSH
87800: EMPTY
87801: LIST
87802: LIST
87803: LIST
87804: PPUSH
87805: CALL_OW 69
87809: ST_TO_ADDR
// if not tmp then
87810: LD_VAR 0 1
87814: NOT
87815: IFFALSE 87819
// exit ;
87817: GO 87856
// for i in tmp do
87819: LD_ADDR_VAR 0 2
87823: PUSH
87824: LD_VAR 0 1
87828: PUSH
87829: FOR_IN
87830: IFFALSE 87854
// if IsControledBy ( i ) then
87832: LD_VAR 0 2
87836: PPUSH
87837: CALL_OW 312
87841: IFFALSE 87852
// ComUnlink ( i ) ;
87843: LD_VAR 0 2
87847: PPUSH
87848: CALL_OW 136
87852: GO 87829
87854: POP
87855: POP
// end ;
87856: PPOPN 2
87858: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
87859: LD_EXP 107
87863: PUSH
87864: LD_EXP 138
87868: AND
87869: IFFALSE 88009
87871: GO 87873
87873: DISABLE
87874: LD_INT 0
87876: PPUSH
87877: PPUSH
// begin ToLua ( displayPowell(); ) ;
87878: LD_STRING displayPowell();
87880: PPUSH
87881: CALL_OW 559
// uc_side := 0 ;
87885: LD_ADDR_OWVAR 20
87889: PUSH
87890: LD_INT 0
87892: ST_TO_ADDR
// uc_nation := 2 ;
87893: LD_ADDR_OWVAR 21
87897: PUSH
87898: LD_INT 2
87900: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
87901: LD_ADDR_OWVAR 37
87905: PUSH
87906: LD_INT 14
87908: ST_TO_ADDR
// vc_engine := engine_siberite ;
87909: LD_ADDR_OWVAR 39
87913: PUSH
87914: LD_INT 3
87916: ST_TO_ADDR
// vc_control := control_apeman ;
87917: LD_ADDR_OWVAR 38
87921: PUSH
87922: LD_INT 5
87924: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
87925: LD_ADDR_OWVAR 40
87929: PUSH
87930: LD_INT 29
87932: ST_TO_ADDR
// un := CreateVehicle ;
87933: LD_ADDR_VAR 0 2
87937: PUSH
87938: CALL_OW 45
87942: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
87943: LD_VAR 0 2
87947: PPUSH
87948: LD_INT 1
87950: PPUSH
87951: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
87955: LD_INT 35
87957: PPUSH
87958: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
87962: LD_VAR 0 2
87966: PPUSH
87967: LD_INT 22
87969: PUSH
87970: LD_OWVAR 2
87974: PUSH
87975: EMPTY
87976: LIST
87977: LIST
87978: PPUSH
87979: CALL_OW 69
87983: PPUSH
87984: LD_VAR 0 2
87988: PPUSH
87989: CALL_OW 74
87993: PPUSH
87994: CALL_OW 115
// until IsDead ( un ) ;
87998: LD_VAR 0 2
88002: PPUSH
88003: CALL_OW 301
88007: IFFALSE 87955
// end ;
88009: PPOPN 2
88011: END
// every 0 0$1 trigger StreamModeActive and sStu do
88012: LD_EXP 107
88016: PUSH
88017: LD_EXP 146
88021: AND
88022: IFFALSE 88038
88024: GO 88026
88026: DISABLE
// begin ToLua ( displayStucuk(); ) ;
88027: LD_STRING displayStucuk();
88029: PPUSH
88030: CALL_OW 559
// ResetFog ;
88034: CALL_OW 335
// end ;
88038: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
88039: LD_EXP 107
88043: PUSH
88044: LD_EXP 139
88048: AND
88049: IFFALSE 88190
88051: GO 88053
88053: DISABLE
88054: LD_INT 0
88056: PPUSH
88057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
88058: LD_ADDR_VAR 0 2
88062: PUSH
88063: LD_INT 22
88065: PUSH
88066: LD_OWVAR 2
88070: PUSH
88071: EMPTY
88072: LIST
88073: LIST
88074: PUSH
88075: LD_INT 21
88077: PUSH
88078: LD_INT 1
88080: PUSH
88081: EMPTY
88082: LIST
88083: LIST
88084: PUSH
88085: EMPTY
88086: LIST
88087: LIST
88088: PPUSH
88089: CALL_OW 69
88093: ST_TO_ADDR
// if not tmp then
88094: LD_VAR 0 2
88098: NOT
88099: IFFALSE 88103
// exit ;
88101: GO 88190
// un := tmp [ rand ( 1 , tmp ) ] ;
88103: LD_ADDR_VAR 0 1
88107: PUSH
88108: LD_VAR 0 2
88112: PUSH
88113: LD_INT 1
88115: PPUSH
88116: LD_VAR 0 2
88120: PPUSH
88121: CALL_OW 12
88125: ARRAY
88126: ST_TO_ADDR
// SetSide ( un , 0 ) ;
88127: LD_VAR 0 1
88131: PPUSH
88132: LD_INT 0
88134: PPUSH
88135: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
88139: LD_VAR 0 1
88143: PPUSH
88144: LD_OWVAR 3
88148: PUSH
88149: LD_VAR 0 1
88153: DIFF
88154: PPUSH
88155: LD_VAR 0 1
88159: PPUSH
88160: CALL_OW 74
88164: PPUSH
88165: CALL_OW 115
// wait ( 0 0$20 ) ;
88169: LD_INT 700
88171: PPUSH
88172: CALL_OW 67
// SetSide ( un , your_side ) ;
88176: LD_VAR 0 1
88180: PPUSH
88181: LD_OWVAR 2
88185: PPUSH
88186: CALL_OW 235
// end ;
88190: PPOPN 2
88192: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
88193: LD_EXP 107
88197: PUSH
88198: LD_EXP 140
88202: AND
88203: IFFALSE 88309
88205: GO 88207
88207: DISABLE
88208: LD_INT 0
88210: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
88211: LD_ADDR_VAR 0 1
88215: PUSH
88216: LD_INT 22
88218: PUSH
88219: LD_OWVAR 2
88223: PUSH
88224: EMPTY
88225: LIST
88226: LIST
88227: PUSH
88228: LD_INT 2
88230: PUSH
88231: LD_INT 30
88233: PUSH
88234: LD_INT 0
88236: PUSH
88237: EMPTY
88238: LIST
88239: LIST
88240: PUSH
88241: LD_INT 30
88243: PUSH
88244: LD_INT 1
88246: PUSH
88247: EMPTY
88248: LIST
88249: LIST
88250: PUSH
88251: EMPTY
88252: LIST
88253: LIST
88254: LIST
88255: PUSH
88256: EMPTY
88257: LIST
88258: LIST
88259: PPUSH
88260: CALL_OW 69
88264: ST_TO_ADDR
// if not depot then
88265: LD_VAR 0 1
88269: NOT
88270: IFFALSE 88274
// exit ;
88272: GO 88309
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
88274: LD_VAR 0 1
88278: PUSH
88279: LD_INT 1
88281: ARRAY
88282: PPUSH
88283: CALL_OW 250
88287: PPUSH
88288: LD_VAR 0 1
88292: PUSH
88293: LD_INT 1
88295: ARRAY
88296: PPUSH
88297: CALL_OW 251
88301: PPUSH
88302: LD_INT 70
88304: PPUSH
88305: CALL_OW 495
// end ;
88309: PPOPN 1
88311: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
88312: LD_EXP 107
88316: PUSH
88317: LD_EXP 141
88321: AND
88322: IFFALSE 88533
88324: GO 88326
88326: DISABLE
88327: LD_INT 0
88329: PPUSH
88330: PPUSH
88331: PPUSH
88332: PPUSH
88333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
88334: LD_ADDR_VAR 0 5
88338: PUSH
88339: LD_INT 22
88341: PUSH
88342: LD_OWVAR 2
88346: PUSH
88347: EMPTY
88348: LIST
88349: LIST
88350: PUSH
88351: LD_INT 21
88353: PUSH
88354: LD_INT 1
88356: PUSH
88357: EMPTY
88358: LIST
88359: LIST
88360: PUSH
88361: EMPTY
88362: LIST
88363: LIST
88364: PPUSH
88365: CALL_OW 69
88369: ST_TO_ADDR
// if not tmp then
88370: LD_VAR 0 5
88374: NOT
88375: IFFALSE 88379
// exit ;
88377: GO 88533
// for i in tmp do
88379: LD_ADDR_VAR 0 1
88383: PUSH
88384: LD_VAR 0 5
88388: PUSH
88389: FOR_IN
88390: IFFALSE 88531
// begin d := rand ( 0 , 5 ) ;
88392: LD_ADDR_VAR 0 4
88396: PUSH
88397: LD_INT 0
88399: PPUSH
88400: LD_INT 5
88402: PPUSH
88403: CALL_OW 12
88407: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
88408: LD_ADDR_VAR 0 2
88412: PUSH
88413: LD_VAR 0 1
88417: PPUSH
88418: CALL_OW 250
88422: PPUSH
88423: LD_VAR 0 4
88427: PPUSH
88428: LD_INT 3
88430: PPUSH
88431: LD_INT 12
88433: PPUSH
88434: CALL_OW 12
88438: PPUSH
88439: CALL_OW 272
88443: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
88444: LD_ADDR_VAR 0 3
88448: PUSH
88449: LD_VAR 0 1
88453: PPUSH
88454: CALL_OW 251
88458: PPUSH
88459: LD_VAR 0 4
88463: PPUSH
88464: LD_INT 3
88466: PPUSH
88467: LD_INT 12
88469: PPUSH
88470: CALL_OW 12
88474: PPUSH
88475: CALL_OW 273
88479: ST_TO_ADDR
// if ValidHex ( x , y ) then
88480: LD_VAR 0 2
88484: PPUSH
88485: LD_VAR 0 3
88489: PPUSH
88490: CALL_OW 488
88494: IFFALSE 88529
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
88496: LD_VAR 0 1
88500: PPUSH
88501: LD_VAR 0 2
88505: PPUSH
88506: LD_VAR 0 3
88510: PPUSH
88511: LD_INT 3
88513: PPUSH
88514: LD_INT 6
88516: PPUSH
88517: CALL_OW 12
88521: PPUSH
88522: LD_INT 1
88524: PPUSH
88525: CALL_OW 483
// end ;
88529: GO 88389
88531: POP
88532: POP
// end ;
88533: PPOPN 5
88535: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
88536: LD_EXP 107
88540: PUSH
88541: LD_EXP 142
88545: AND
88546: IFFALSE 88640
88548: GO 88550
88550: DISABLE
88551: LD_INT 0
88553: PPUSH
88554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
88555: LD_ADDR_VAR 0 2
88559: PUSH
88560: LD_INT 22
88562: PUSH
88563: LD_OWVAR 2
88567: PUSH
88568: EMPTY
88569: LIST
88570: LIST
88571: PUSH
88572: LD_INT 32
88574: PUSH
88575: LD_INT 1
88577: PUSH
88578: EMPTY
88579: LIST
88580: LIST
88581: PUSH
88582: LD_INT 21
88584: PUSH
88585: LD_INT 2
88587: PUSH
88588: EMPTY
88589: LIST
88590: LIST
88591: PUSH
88592: EMPTY
88593: LIST
88594: LIST
88595: LIST
88596: PPUSH
88597: CALL_OW 69
88601: ST_TO_ADDR
// if not tmp then
88602: LD_VAR 0 2
88606: NOT
88607: IFFALSE 88611
// exit ;
88609: GO 88640
// for i in tmp do
88611: LD_ADDR_VAR 0 1
88615: PUSH
88616: LD_VAR 0 2
88620: PUSH
88621: FOR_IN
88622: IFFALSE 88638
// SetFuel ( i , 0 ) ;
88624: LD_VAR 0 1
88628: PPUSH
88629: LD_INT 0
88631: PPUSH
88632: CALL_OW 240
88636: GO 88621
88638: POP
88639: POP
// end ;
88640: PPOPN 2
88642: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
88643: LD_EXP 107
88647: PUSH
88648: LD_EXP 143
88652: AND
88653: IFFALSE 88719
88655: GO 88657
88657: DISABLE
88658: LD_INT 0
88660: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
88661: LD_ADDR_VAR 0 1
88665: PUSH
88666: LD_INT 22
88668: PUSH
88669: LD_OWVAR 2
88673: PUSH
88674: EMPTY
88675: LIST
88676: LIST
88677: PUSH
88678: LD_INT 30
88680: PUSH
88681: LD_INT 29
88683: PUSH
88684: EMPTY
88685: LIST
88686: LIST
88687: PUSH
88688: EMPTY
88689: LIST
88690: LIST
88691: PPUSH
88692: CALL_OW 69
88696: ST_TO_ADDR
// if not tmp then
88697: LD_VAR 0 1
88701: NOT
88702: IFFALSE 88706
// exit ;
88704: GO 88719
// DestroyUnit ( tmp [ 1 ] ) ;
88706: LD_VAR 0 1
88710: PUSH
88711: LD_INT 1
88713: ARRAY
88714: PPUSH
88715: CALL_OW 65
// end ;
88719: PPOPN 1
88721: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
88722: LD_EXP 107
88726: PUSH
88727: LD_EXP 145
88731: AND
88732: IFFALSE 88861
88734: GO 88736
88736: DISABLE
88737: LD_INT 0
88739: PPUSH
// begin uc_side := 0 ;
88740: LD_ADDR_OWVAR 20
88744: PUSH
88745: LD_INT 0
88747: ST_TO_ADDR
// uc_nation := nation_arabian ;
88748: LD_ADDR_OWVAR 21
88752: PUSH
88753: LD_INT 2
88755: ST_TO_ADDR
// hc_gallery :=  ;
88756: LD_ADDR_OWVAR 33
88760: PUSH
88761: LD_STRING 
88763: ST_TO_ADDR
// hc_name :=  ;
88764: LD_ADDR_OWVAR 26
88768: PUSH
88769: LD_STRING 
88771: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
88772: LD_INT 1
88774: PPUSH
88775: LD_INT 11
88777: PPUSH
88778: LD_INT 10
88780: PPUSH
88781: CALL_OW 380
// un := CreateHuman ;
88785: LD_ADDR_VAR 0 1
88789: PUSH
88790: CALL_OW 44
88794: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
88795: LD_VAR 0 1
88799: PPUSH
88800: LD_INT 1
88802: PPUSH
88803: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
88807: LD_INT 35
88809: PPUSH
88810: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
88814: LD_VAR 0 1
88818: PPUSH
88819: LD_INT 22
88821: PUSH
88822: LD_OWVAR 2
88826: PUSH
88827: EMPTY
88828: LIST
88829: LIST
88830: PPUSH
88831: CALL_OW 69
88835: PPUSH
88836: LD_VAR 0 1
88840: PPUSH
88841: CALL_OW 74
88845: PPUSH
88846: CALL_OW 115
// until IsDead ( un ) ;
88850: LD_VAR 0 1
88854: PPUSH
88855: CALL_OW 301
88859: IFFALSE 88807
// end ;
88861: PPOPN 1
88863: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
88864: LD_EXP 107
88868: PUSH
88869: LD_EXP 147
88873: AND
88874: IFFALSE 88886
88876: GO 88878
88878: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
88879: LD_STRING earthquake(getX(game), 0, 32)
88881: PPUSH
88882: CALL_OW 559
88886: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
88887: LD_EXP 107
88891: PUSH
88892: LD_EXP 148
88896: AND
88897: IFFALSE 88988
88899: GO 88901
88901: DISABLE
88902: LD_INT 0
88904: PPUSH
// begin enable ;
88905: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
88906: LD_ADDR_VAR 0 1
88910: PUSH
88911: LD_INT 22
88913: PUSH
88914: LD_OWVAR 2
88918: PUSH
88919: EMPTY
88920: LIST
88921: LIST
88922: PUSH
88923: LD_INT 21
88925: PUSH
88926: LD_INT 2
88928: PUSH
88929: EMPTY
88930: LIST
88931: LIST
88932: PUSH
88933: LD_INT 33
88935: PUSH
88936: LD_INT 3
88938: PUSH
88939: EMPTY
88940: LIST
88941: LIST
88942: PUSH
88943: EMPTY
88944: LIST
88945: LIST
88946: LIST
88947: PPUSH
88948: CALL_OW 69
88952: ST_TO_ADDR
// if not tmp then
88953: LD_VAR 0 1
88957: NOT
88958: IFFALSE 88962
// exit ;
88960: GO 88988
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
88962: LD_VAR 0 1
88966: PUSH
88967: LD_INT 1
88969: PPUSH
88970: LD_VAR 0 1
88974: PPUSH
88975: CALL_OW 12
88979: ARRAY
88980: PPUSH
88981: LD_INT 1
88983: PPUSH
88984: CALL_OW 234
// end ;
88988: PPOPN 1
88990: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
88991: LD_EXP 107
88995: PUSH
88996: LD_EXP 149
89000: AND
89001: IFFALSE 89142
89003: GO 89005
89005: DISABLE
89006: LD_INT 0
89008: PPUSH
89009: PPUSH
89010: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
89011: LD_ADDR_VAR 0 3
89015: PUSH
89016: LD_INT 22
89018: PUSH
89019: LD_OWVAR 2
89023: PUSH
89024: EMPTY
89025: LIST
89026: LIST
89027: PUSH
89028: LD_INT 25
89030: PUSH
89031: LD_INT 1
89033: PUSH
89034: EMPTY
89035: LIST
89036: LIST
89037: PUSH
89038: EMPTY
89039: LIST
89040: LIST
89041: PPUSH
89042: CALL_OW 69
89046: ST_TO_ADDR
// if not tmp then
89047: LD_VAR 0 3
89051: NOT
89052: IFFALSE 89056
// exit ;
89054: GO 89142
// un := tmp [ rand ( 1 , tmp ) ] ;
89056: LD_ADDR_VAR 0 2
89060: PUSH
89061: LD_VAR 0 3
89065: PUSH
89066: LD_INT 1
89068: PPUSH
89069: LD_VAR 0 3
89073: PPUSH
89074: CALL_OW 12
89078: ARRAY
89079: ST_TO_ADDR
// if Crawls ( un ) then
89080: LD_VAR 0 2
89084: PPUSH
89085: CALL_OW 318
89089: IFFALSE 89100
// ComWalk ( un ) ;
89091: LD_VAR 0 2
89095: PPUSH
89096: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
89100: LD_VAR 0 2
89104: PPUSH
89105: LD_INT 9
89107: PPUSH
89108: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
89112: LD_INT 28
89114: PPUSH
89115: LD_OWVAR 2
89119: PPUSH
89120: LD_INT 2
89122: PPUSH
89123: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
89127: LD_INT 29
89129: PPUSH
89130: LD_OWVAR 2
89134: PPUSH
89135: LD_INT 2
89137: PPUSH
89138: CALL_OW 322
// end ;
89142: PPOPN 3
89144: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
89145: LD_EXP 107
89149: PUSH
89150: LD_EXP 150
89154: AND
89155: IFFALSE 89266
89157: GO 89159
89159: DISABLE
89160: LD_INT 0
89162: PPUSH
89163: PPUSH
89164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
89165: LD_ADDR_VAR 0 3
89169: PUSH
89170: LD_INT 22
89172: PUSH
89173: LD_OWVAR 2
89177: PUSH
89178: EMPTY
89179: LIST
89180: LIST
89181: PUSH
89182: LD_INT 25
89184: PUSH
89185: LD_INT 1
89187: PUSH
89188: EMPTY
89189: LIST
89190: LIST
89191: PUSH
89192: EMPTY
89193: LIST
89194: LIST
89195: PPUSH
89196: CALL_OW 69
89200: ST_TO_ADDR
// if not tmp then
89201: LD_VAR 0 3
89205: NOT
89206: IFFALSE 89210
// exit ;
89208: GO 89266
// un := tmp [ rand ( 1 , tmp ) ] ;
89210: LD_ADDR_VAR 0 2
89214: PUSH
89215: LD_VAR 0 3
89219: PUSH
89220: LD_INT 1
89222: PPUSH
89223: LD_VAR 0 3
89227: PPUSH
89228: CALL_OW 12
89232: ARRAY
89233: ST_TO_ADDR
// if Crawls ( un ) then
89234: LD_VAR 0 2
89238: PPUSH
89239: CALL_OW 318
89243: IFFALSE 89254
// ComWalk ( un ) ;
89245: LD_VAR 0 2
89249: PPUSH
89250: CALL_OW 138
// SetClass ( un , class_mortar ) ;
89254: LD_VAR 0 2
89258: PPUSH
89259: LD_INT 8
89261: PPUSH
89262: CALL_OW 336
// end ;
89266: PPOPN 3
89268: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
89269: LD_EXP 107
89273: PUSH
89274: LD_EXP 151
89278: AND
89279: IFFALSE 89423
89281: GO 89283
89283: DISABLE
89284: LD_INT 0
89286: PPUSH
89287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
89288: LD_ADDR_VAR 0 2
89292: PUSH
89293: LD_INT 22
89295: PUSH
89296: LD_OWVAR 2
89300: PUSH
89301: EMPTY
89302: LIST
89303: LIST
89304: PUSH
89305: LD_INT 21
89307: PUSH
89308: LD_INT 2
89310: PUSH
89311: EMPTY
89312: LIST
89313: LIST
89314: PUSH
89315: LD_INT 2
89317: PUSH
89318: LD_INT 34
89320: PUSH
89321: LD_INT 12
89323: PUSH
89324: EMPTY
89325: LIST
89326: LIST
89327: PUSH
89328: LD_INT 34
89330: PUSH
89331: LD_INT 51
89333: PUSH
89334: EMPTY
89335: LIST
89336: LIST
89337: PUSH
89338: LD_INT 34
89340: PUSH
89341: LD_INT 32
89343: PUSH
89344: EMPTY
89345: LIST
89346: LIST
89347: PUSH
89348: EMPTY
89349: LIST
89350: LIST
89351: LIST
89352: LIST
89353: PUSH
89354: EMPTY
89355: LIST
89356: LIST
89357: LIST
89358: PPUSH
89359: CALL_OW 69
89363: ST_TO_ADDR
// if not tmp then
89364: LD_VAR 0 2
89368: NOT
89369: IFFALSE 89373
// exit ;
89371: GO 89423
// for i in tmp do
89373: LD_ADDR_VAR 0 1
89377: PUSH
89378: LD_VAR 0 2
89382: PUSH
89383: FOR_IN
89384: IFFALSE 89421
// if GetCargo ( i , mat_artifact ) = 0 then
89386: LD_VAR 0 1
89390: PPUSH
89391: LD_INT 4
89393: PPUSH
89394: CALL_OW 289
89398: PUSH
89399: LD_INT 0
89401: EQUAL
89402: IFFALSE 89419
// SetCargo ( i , mat_siberit , 100 ) ;
89404: LD_VAR 0 1
89408: PPUSH
89409: LD_INT 3
89411: PPUSH
89412: LD_INT 100
89414: PPUSH
89415: CALL_OW 290
89419: GO 89383
89421: POP
89422: POP
// end ;
89423: PPOPN 2
89425: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
89426: LD_EXP 107
89430: PUSH
89431: LD_EXP 152
89435: AND
89436: IFFALSE 89619
89438: GO 89440
89440: DISABLE
89441: LD_INT 0
89443: PPUSH
89444: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
89445: LD_ADDR_VAR 0 2
89449: PUSH
89450: LD_INT 22
89452: PUSH
89453: LD_OWVAR 2
89457: PUSH
89458: EMPTY
89459: LIST
89460: LIST
89461: PPUSH
89462: CALL_OW 69
89466: ST_TO_ADDR
// if not tmp then
89467: LD_VAR 0 2
89471: NOT
89472: IFFALSE 89476
// exit ;
89474: GO 89619
// for i := 1 to 2 do
89476: LD_ADDR_VAR 0 1
89480: PUSH
89481: DOUBLE
89482: LD_INT 1
89484: DEC
89485: ST_TO_ADDR
89486: LD_INT 2
89488: PUSH
89489: FOR_TO
89490: IFFALSE 89617
// begin uc_side := your_side ;
89492: LD_ADDR_OWVAR 20
89496: PUSH
89497: LD_OWVAR 2
89501: ST_TO_ADDR
// uc_nation := nation_american ;
89502: LD_ADDR_OWVAR 21
89506: PUSH
89507: LD_INT 1
89509: ST_TO_ADDR
// vc_chassis := us_morphling ;
89510: LD_ADDR_OWVAR 37
89514: PUSH
89515: LD_INT 5
89517: ST_TO_ADDR
// vc_engine := engine_siberite ;
89518: LD_ADDR_OWVAR 39
89522: PUSH
89523: LD_INT 3
89525: ST_TO_ADDR
// vc_control := control_computer ;
89526: LD_ADDR_OWVAR 38
89530: PUSH
89531: LD_INT 3
89533: ST_TO_ADDR
// vc_weapon := us_double_laser ;
89534: LD_ADDR_OWVAR 40
89538: PUSH
89539: LD_INT 10
89541: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
89542: LD_VAR 0 2
89546: PUSH
89547: LD_INT 1
89549: ARRAY
89550: PPUSH
89551: CALL_OW 310
89555: NOT
89556: IFFALSE 89603
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
89558: CALL_OW 45
89562: PPUSH
89563: LD_VAR 0 2
89567: PUSH
89568: LD_INT 1
89570: ARRAY
89571: PPUSH
89572: CALL_OW 250
89576: PPUSH
89577: LD_VAR 0 2
89581: PUSH
89582: LD_INT 1
89584: ARRAY
89585: PPUSH
89586: CALL_OW 251
89590: PPUSH
89591: LD_INT 12
89593: PPUSH
89594: LD_INT 1
89596: PPUSH
89597: CALL_OW 50
89601: GO 89615
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
89603: CALL_OW 45
89607: PPUSH
89608: LD_INT 1
89610: PPUSH
89611: CALL_OW 51
// end ;
89615: GO 89489
89617: POP
89618: POP
// end ;
89619: PPOPN 2
89621: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
89622: LD_EXP 107
89626: PUSH
89627: LD_EXP 153
89631: AND
89632: IFFALSE 89854
89634: GO 89636
89636: DISABLE
89637: LD_INT 0
89639: PPUSH
89640: PPUSH
89641: PPUSH
89642: PPUSH
89643: PPUSH
89644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
89645: LD_ADDR_VAR 0 6
89649: PUSH
89650: LD_INT 22
89652: PUSH
89653: LD_OWVAR 2
89657: PUSH
89658: EMPTY
89659: LIST
89660: LIST
89661: PUSH
89662: LD_INT 21
89664: PUSH
89665: LD_INT 1
89667: PUSH
89668: EMPTY
89669: LIST
89670: LIST
89671: PUSH
89672: LD_INT 3
89674: PUSH
89675: LD_INT 23
89677: PUSH
89678: LD_INT 0
89680: PUSH
89681: EMPTY
89682: LIST
89683: LIST
89684: PUSH
89685: EMPTY
89686: LIST
89687: LIST
89688: PUSH
89689: EMPTY
89690: LIST
89691: LIST
89692: LIST
89693: PPUSH
89694: CALL_OW 69
89698: ST_TO_ADDR
// if not tmp then
89699: LD_VAR 0 6
89703: NOT
89704: IFFALSE 89708
// exit ;
89706: GO 89854
// s1 := rand ( 1 , 4 ) ;
89708: LD_ADDR_VAR 0 2
89712: PUSH
89713: LD_INT 1
89715: PPUSH
89716: LD_INT 4
89718: PPUSH
89719: CALL_OW 12
89723: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
89724: LD_ADDR_VAR 0 4
89728: PUSH
89729: LD_VAR 0 6
89733: PUSH
89734: LD_INT 1
89736: ARRAY
89737: PPUSH
89738: LD_VAR 0 2
89742: PPUSH
89743: CALL_OW 259
89747: ST_TO_ADDR
// if s1 = 1 then
89748: LD_VAR 0 2
89752: PUSH
89753: LD_INT 1
89755: EQUAL
89756: IFFALSE 89776
// s2 := rand ( 2 , 4 ) else
89758: LD_ADDR_VAR 0 3
89762: PUSH
89763: LD_INT 2
89765: PPUSH
89766: LD_INT 4
89768: PPUSH
89769: CALL_OW 12
89773: ST_TO_ADDR
89774: GO 89784
// s2 := 1 ;
89776: LD_ADDR_VAR 0 3
89780: PUSH
89781: LD_INT 1
89783: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
89784: LD_ADDR_VAR 0 5
89788: PUSH
89789: LD_VAR 0 6
89793: PUSH
89794: LD_INT 1
89796: ARRAY
89797: PPUSH
89798: LD_VAR 0 3
89802: PPUSH
89803: CALL_OW 259
89807: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
89808: LD_VAR 0 6
89812: PUSH
89813: LD_INT 1
89815: ARRAY
89816: PPUSH
89817: LD_VAR 0 2
89821: PPUSH
89822: LD_VAR 0 5
89826: PPUSH
89827: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
89831: LD_VAR 0 6
89835: PUSH
89836: LD_INT 1
89838: ARRAY
89839: PPUSH
89840: LD_VAR 0 3
89844: PPUSH
89845: LD_VAR 0 4
89849: PPUSH
89850: CALL_OW 237
// end ;
89854: PPOPN 6
89856: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
89857: LD_EXP 107
89861: PUSH
89862: LD_EXP 154
89866: AND
89867: IFFALSE 89946
89869: GO 89871
89871: DISABLE
89872: LD_INT 0
89874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
89875: LD_ADDR_VAR 0 1
89879: PUSH
89880: LD_INT 22
89882: PUSH
89883: LD_OWVAR 2
89887: PUSH
89888: EMPTY
89889: LIST
89890: LIST
89891: PUSH
89892: LD_INT 30
89894: PUSH
89895: LD_INT 3
89897: PUSH
89898: EMPTY
89899: LIST
89900: LIST
89901: PUSH
89902: EMPTY
89903: LIST
89904: LIST
89905: PPUSH
89906: CALL_OW 69
89910: ST_TO_ADDR
// if not tmp then
89911: LD_VAR 0 1
89915: NOT
89916: IFFALSE 89920
// exit ;
89918: GO 89946
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
89920: LD_VAR 0 1
89924: PUSH
89925: LD_INT 1
89927: PPUSH
89928: LD_VAR 0 1
89932: PPUSH
89933: CALL_OW 12
89937: ARRAY
89938: PPUSH
89939: LD_INT 1
89941: PPUSH
89942: CALL_OW 234
// end ;
89946: PPOPN 1
89948: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
89949: LD_EXP 107
89953: PUSH
89954: LD_EXP 155
89958: AND
89959: IFFALSE 90071
89961: GO 89963
89963: DISABLE
89964: LD_INT 0
89966: PPUSH
89967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
89968: LD_ADDR_VAR 0 2
89972: PUSH
89973: LD_INT 22
89975: PUSH
89976: LD_OWVAR 2
89980: PUSH
89981: EMPTY
89982: LIST
89983: LIST
89984: PUSH
89985: LD_INT 2
89987: PUSH
89988: LD_INT 30
89990: PUSH
89991: LD_INT 27
89993: PUSH
89994: EMPTY
89995: LIST
89996: LIST
89997: PUSH
89998: LD_INT 30
90000: PUSH
90001: LD_INT 26
90003: PUSH
90004: EMPTY
90005: LIST
90006: LIST
90007: PUSH
90008: LD_INT 30
90010: PUSH
90011: LD_INT 28
90013: PUSH
90014: EMPTY
90015: LIST
90016: LIST
90017: PUSH
90018: EMPTY
90019: LIST
90020: LIST
90021: LIST
90022: LIST
90023: PUSH
90024: EMPTY
90025: LIST
90026: LIST
90027: PPUSH
90028: CALL_OW 69
90032: ST_TO_ADDR
// if not tmp then
90033: LD_VAR 0 2
90037: NOT
90038: IFFALSE 90042
// exit ;
90040: GO 90071
// for i in tmp do
90042: LD_ADDR_VAR 0 1
90046: PUSH
90047: LD_VAR 0 2
90051: PUSH
90052: FOR_IN
90053: IFFALSE 90069
// SetLives ( i , 1 ) ;
90055: LD_VAR 0 1
90059: PPUSH
90060: LD_INT 1
90062: PPUSH
90063: CALL_OW 234
90067: GO 90052
90069: POP
90070: POP
// end ;
90071: PPOPN 2
90073: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
90074: LD_EXP 107
90078: PUSH
90079: LD_EXP 156
90083: AND
90084: IFFALSE 90358
90086: GO 90088
90088: DISABLE
90089: LD_INT 0
90091: PPUSH
90092: PPUSH
90093: PPUSH
// begin i := rand ( 1 , 7 ) ;
90094: LD_ADDR_VAR 0 1
90098: PUSH
90099: LD_INT 1
90101: PPUSH
90102: LD_INT 7
90104: PPUSH
90105: CALL_OW 12
90109: ST_TO_ADDR
// case i of 1 :
90110: LD_VAR 0 1
90114: PUSH
90115: LD_INT 1
90117: DOUBLE
90118: EQUAL
90119: IFTRUE 90123
90121: GO 90133
90123: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
90124: LD_STRING earthquake(getX(game), 0, 32)
90126: PPUSH
90127: CALL_OW 559
90131: GO 90358
90133: LD_INT 2
90135: DOUBLE
90136: EQUAL
90137: IFTRUE 90141
90139: GO 90155
90141: POP
// begin ToLua ( displayStucuk(); ) ;
90142: LD_STRING displayStucuk();
90144: PPUSH
90145: CALL_OW 559
// ResetFog ;
90149: CALL_OW 335
// end ; 3 :
90153: GO 90358
90155: LD_INT 3
90157: DOUBLE
90158: EQUAL
90159: IFTRUE 90163
90161: GO 90267
90163: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
90164: LD_ADDR_VAR 0 2
90168: PUSH
90169: LD_INT 22
90171: PUSH
90172: LD_OWVAR 2
90176: PUSH
90177: EMPTY
90178: LIST
90179: LIST
90180: PUSH
90181: LD_INT 25
90183: PUSH
90184: LD_INT 1
90186: PUSH
90187: EMPTY
90188: LIST
90189: LIST
90190: PUSH
90191: EMPTY
90192: LIST
90193: LIST
90194: PPUSH
90195: CALL_OW 69
90199: ST_TO_ADDR
// if not tmp then
90200: LD_VAR 0 2
90204: NOT
90205: IFFALSE 90209
// exit ;
90207: GO 90358
// un := tmp [ rand ( 1 , tmp ) ] ;
90209: LD_ADDR_VAR 0 3
90213: PUSH
90214: LD_VAR 0 2
90218: PUSH
90219: LD_INT 1
90221: PPUSH
90222: LD_VAR 0 2
90226: PPUSH
90227: CALL_OW 12
90231: ARRAY
90232: ST_TO_ADDR
// if Crawls ( un ) then
90233: LD_VAR 0 3
90237: PPUSH
90238: CALL_OW 318
90242: IFFALSE 90253
// ComWalk ( un ) ;
90244: LD_VAR 0 3
90248: PPUSH
90249: CALL_OW 138
// SetClass ( un , class_mortar ) ;
90253: LD_VAR 0 3
90257: PPUSH
90258: LD_INT 8
90260: PPUSH
90261: CALL_OW 336
// end ; 4 :
90265: GO 90358
90267: LD_INT 4
90269: DOUBLE
90270: EQUAL
90271: IFTRUE 90275
90273: GO 90336
90275: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
90276: LD_ADDR_VAR 0 2
90280: PUSH
90281: LD_INT 22
90283: PUSH
90284: LD_OWVAR 2
90288: PUSH
90289: EMPTY
90290: LIST
90291: LIST
90292: PUSH
90293: LD_INT 30
90295: PUSH
90296: LD_INT 29
90298: PUSH
90299: EMPTY
90300: LIST
90301: LIST
90302: PUSH
90303: EMPTY
90304: LIST
90305: LIST
90306: PPUSH
90307: CALL_OW 69
90311: ST_TO_ADDR
// if not tmp then
90312: LD_VAR 0 2
90316: NOT
90317: IFFALSE 90321
// exit ;
90319: GO 90358
// DestroyUnit ( tmp [ 1 ] ) ;
90321: LD_VAR 0 2
90325: PUSH
90326: LD_INT 1
90328: ARRAY
90329: PPUSH
90330: CALL_OW 65
// end ; 5 .. 7 :
90334: GO 90358
90336: LD_INT 5
90338: DOUBLE
90339: GREATEREQUAL
90340: IFFALSE 90348
90342: LD_INT 7
90344: DOUBLE
90345: LESSEQUAL
90346: IFTRUE 90350
90348: GO 90357
90350: POP
// StreamSibBomb ; end ;
90351: CALL 86608 0 0
90355: GO 90358
90357: POP
// end ;
90358: PPOPN 3
90360: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
90361: LD_EXP 107
90365: PUSH
90366: LD_EXP 157
90370: AND
90371: IFFALSE 90527
90373: GO 90375
90375: DISABLE
90376: LD_INT 0
90378: PPUSH
90379: PPUSH
90380: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
90381: LD_ADDR_VAR 0 2
90385: PUSH
90386: LD_INT 81
90388: PUSH
90389: LD_OWVAR 2
90393: PUSH
90394: EMPTY
90395: LIST
90396: LIST
90397: PUSH
90398: LD_INT 2
90400: PUSH
90401: LD_INT 21
90403: PUSH
90404: LD_INT 1
90406: PUSH
90407: EMPTY
90408: LIST
90409: LIST
90410: PUSH
90411: LD_INT 21
90413: PUSH
90414: LD_INT 2
90416: PUSH
90417: EMPTY
90418: LIST
90419: LIST
90420: PUSH
90421: EMPTY
90422: LIST
90423: LIST
90424: LIST
90425: PUSH
90426: EMPTY
90427: LIST
90428: LIST
90429: PPUSH
90430: CALL_OW 69
90434: ST_TO_ADDR
// if not tmp then
90435: LD_VAR 0 2
90439: NOT
90440: IFFALSE 90444
// exit ;
90442: GO 90527
// p := 0 ;
90444: LD_ADDR_VAR 0 3
90448: PUSH
90449: LD_INT 0
90451: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
90452: LD_INT 35
90454: PPUSH
90455: CALL_OW 67
// p := p + 1 ;
90459: LD_ADDR_VAR 0 3
90463: PUSH
90464: LD_VAR 0 3
90468: PUSH
90469: LD_INT 1
90471: PLUS
90472: ST_TO_ADDR
// for i in tmp do
90473: LD_ADDR_VAR 0 1
90477: PUSH
90478: LD_VAR 0 2
90482: PUSH
90483: FOR_IN
90484: IFFALSE 90515
// if GetLives ( i ) < 1000 then
90486: LD_VAR 0 1
90490: PPUSH
90491: CALL_OW 256
90495: PUSH
90496: LD_INT 1000
90498: LESS
90499: IFFALSE 90513
// SetLives ( i , 1000 ) ;
90501: LD_VAR 0 1
90505: PPUSH
90506: LD_INT 1000
90508: PPUSH
90509: CALL_OW 234
90513: GO 90483
90515: POP
90516: POP
// until p > 20 ;
90517: LD_VAR 0 3
90521: PUSH
90522: LD_INT 20
90524: GREATER
90525: IFFALSE 90452
// end ;
90527: PPOPN 3
90529: END
// every 0 0$1 trigger StreamModeActive and sTime do
90530: LD_EXP 107
90534: PUSH
90535: LD_EXP 158
90539: AND
90540: IFFALSE 90575
90542: GO 90544
90544: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
90545: LD_INT 28
90547: PPUSH
90548: LD_OWVAR 2
90552: PPUSH
90553: LD_INT 2
90555: PPUSH
90556: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
90560: LD_INT 30
90562: PPUSH
90563: LD_OWVAR 2
90567: PPUSH
90568: LD_INT 2
90570: PPUSH
90571: CALL_OW 322
// end ;
90575: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
90576: LD_EXP 107
90580: PUSH
90581: LD_EXP 159
90585: AND
90586: IFFALSE 90707
90588: GO 90590
90590: DISABLE
90591: LD_INT 0
90593: PPUSH
90594: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
90595: LD_ADDR_VAR 0 2
90599: PUSH
90600: LD_INT 22
90602: PUSH
90603: LD_OWVAR 2
90607: PUSH
90608: EMPTY
90609: LIST
90610: LIST
90611: PUSH
90612: LD_INT 21
90614: PUSH
90615: LD_INT 1
90617: PUSH
90618: EMPTY
90619: LIST
90620: LIST
90621: PUSH
90622: LD_INT 3
90624: PUSH
90625: LD_INT 23
90627: PUSH
90628: LD_INT 0
90630: PUSH
90631: EMPTY
90632: LIST
90633: LIST
90634: PUSH
90635: EMPTY
90636: LIST
90637: LIST
90638: PUSH
90639: EMPTY
90640: LIST
90641: LIST
90642: LIST
90643: PPUSH
90644: CALL_OW 69
90648: ST_TO_ADDR
// if not tmp then
90649: LD_VAR 0 2
90653: NOT
90654: IFFALSE 90658
// exit ;
90656: GO 90707
// for i in tmp do
90658: LD_ADDR_VAR 0 1
90662: PUSH
90663: LD_VAR 0 2
90667: PUSH
90668: FOR_IN
90669: IFFALSE 90705
// begin if Crawls ( i ) then
90671: LD_VAR 0 1
90675: PPUSH
90676: CALL_OW 318
90680: IFFALSE 90691
// ComWalk ( i ) ;
90682: LD_VAR 0 1
90686: PPUSH
90687: CALL_OW 138
// SetClass ( i , 2 ) ;
90691: LD_VAR 0 1
90695: PPUSH
90696: LD_INT 2
90698: PPUSH
90699: CALL_OW 336
// end ;
90703: GO 90668
90705: POP
90706: POP
// end ;
90707: PPOPN 2
90709: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
90710: LD_EXP 107
90714: PUSH
90715: LD_EXP 160
90719: AND
90720: IFFALSE 91001
90722: GO 90724
90724: DISABLE
90725: LD_INT 0
90727: PPUSH
90728: PPUSH
90729: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
90730: LD_OWVAR 2
90734: PPUSH
90735: LD_INT 9
90737: PPUSH
90738: LD_INT 1
90740: PPUSH
90741: LD_INT 1
90743: PPUSH
90744: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
90748: LD_INT 9
90750: PPUSH
90751: LD_OWVAR 2
90755: PPUSH
90756: CALL_OW 343
// uc_side := 9 ;
90760: LD_ADDR_OWVAR 20
90764: PUSH
90765: LD_INT 9
90767: ST_TO_ADDR
// uc_nation := 2 ;
90768: LD_ADDR_OWVAR 21
90772: PUSH
90773: LD_INT 2
90775: ST_TO_ADDR
// hc_name := Dark Warrior ;
90776: LD_ADDR_OWVAR 26
90780: PUSH
90781: LD_STRING Dark Warrior
90783: ST_TO_ADDR
// hc_gallery :=  ;
90784: LD_ADDR_OWVAR 33
90788: PUSH
90789: LD_STRING 
90791: ST_TO_ADDR
// hc_noskilllimit := true ;
90792: LD_ADDR_OWVAR 76
90796: PUSH
90797: LD_INT 1
90799: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
90800: LD_ADDR_OWVAR 31
90804: PUSH
90805: LD_INT 30
90807: PUSH
90808: LD_INT 30
90810: PUSH
90811: LD_INT 30
90813: PUSH
90814: LD_INT 30
90816: PUSH
90817: EMPTY
90818: LIST
90819: LIST
90820: LIST
90821: LIST
90822: ST_TO_ADDR
// un := CreateHuman ;
90823: LD_ADDR_VAR 0 3
90827: PUSH
90828: CALL_OW 44
90832: ST_TO_ADDR
// hc_noskilllimit := false ;
90833: LD_ADDR_OWVAR 76
90837: PUSH
90838: LD_INT 0
90840: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
90841: LD_VAR 0 3
90845: PPUSH
90846: LD_INT 1
90848: PPUSH
90849: CALL_OW 51
// p := 0 ;
90853: LD_ADDR_VAR 0 2
90857: PUSH
90858: LD_INT 0
90860: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
90861: LD_INT 35
90863: PPUSH
90864: CALL_OW 67
// p := p + 1 ;
90868: LD_ADDR_VAR 0 2
90872: PUSH
90873: LD_VAR 0 2
90877: PUSH
90878: LD_INT 1
90880: PLUS
90881: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
90882: LD_VAR 0 3
90886: PPUSH
90887: CALL_OW 256
90891: PUSH
90892: LD_INT 1000
90894: LESS
90895: IFFALSE 90909
// SetLives ( un , 1000 ) ;
90897: LD_VAR 0 3
90901: PPUSH
90902: LD_INT 1000
90904: PPUSH
90905: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
90909: LD_VAR 0 3
90913: PPUSH
90914: LD_INT 81
90916: PUSH
90917: LD_OWVAR 2
90921: PUSH
90922: EMPTY
90923: LIST
90924: LIST
90925: PUSH
90926: LD_INT 91
90928: PUSH
90929: LD_VAR 0 3
90933: PUSH
90934: LD_INT 30
90936: PUSH
90937: EMPTY
90938: LIST
90939: LIST
90940: LIST
90941: PUSH
90942: EMPTY
90943: LIST
90944: LIST
90945: PPUSH
90946: CALL_OW 69
90950: PPUSH
90951: LD_VAR 0 3
90955: PPUSH
90956: CALL_OW 74
90960: PPUSH
90961: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
90965: LD_VAR 0 2
90969: PUSH
90970: LD_INT 60
90972: GREATER
90973: PUSH
90974: LD_VAR 0 3
90978: PPUSH
90979: CALL_OW 301
90983: OR
90984: IFFALSE 90861
// if un then
90986: LD_VAR 0 3
90990: IFFALSE 91001
// RemoveUnit ( un ) ;
90992: LD_VAR 0 3
90996: PPUSH
90997: CALL_OW 64
// end ; end_of_file
91001: PPOPN 3
91003: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
91004: LD_INT 0
91006: PPUSH
91007: PPUSH
91008: PPUSH
91009: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
91010: LD_VAR 0 1
91014: PPUSH
91015: CALL_OW 264
91019: PUSH
91020: LD_EXP 52
91024: EQUAL
91025: IFFALSE 91097
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
91027: LD_INT 68
91029: PPUSH
91030: LD_VAR 0 1
91034: PPUSH
91035: CALL_OW 255
91039: PPUSH
91040: CALL_OW 321
91044: PUSH
91045: LD_INT 2
91047: EQUAL
91048: IFFALSE 91060
// eff := 70 else
91050: LD_ADDR_VAR 0 4
91054: PUSH
91055: LD_INT 70
91057: ST_TO_ADDR
91058: GO 91068
// eff := 30 ;
91060: LD_ADDR_VAR 0 4
91064: PUSH
91065: LD_INT 30
91067: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
91068: LD_VAR 0 1
91072: PPUSH
91073: CALL_OW 250
91077: PPUSH
91078: LD_VAR 0 1
91082: PPUSH
91083: CALL_OW 251
91087: PPUSH
91088: LD_VAR 0 4
91092: PPUSH
91093: CALL_OW 495
// end ; end ;
91097: LD_VAR 0 2
91101: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
91102: LD_INT 0
91104: PPUSH
// end ;
91105: LD_VAR 0 4
91109: RET
// export function SOS_Command ( cmd ) ; begin
91110: LD_INT 0
91112: PPUSH
// end ;
91113: LD_VAR 0 2
91117: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
91118: LD_VAR 0 1
91122: PUSH
91123: LD_INT 255
91125: EQUAL
91126: PUSH
91127: LD_VAR 0 2
91131: PPUSH
91132: CALL_OW 264
91136: PUSH
91137: LD_INT 14
91139: PUSH
91140: LD_INT 53
91142: PUSH
91143: EMPTY
91144: LIST
91145: LIST
91146: IN
91147: AND
91148: PUSH
91149: LD_VAR 0 4
91153: PPUSH
91154: LD_VAR 0 5
91158: PPUSH
91159: CALL_OW 488
91163: AND
91164: IFFALSE 91188
// CutTreeXYR ( unit , x , y , 12 ) ;
91166: LD_VAR 0 2
91170: PPUSH
91171: LD_VAR 0 4
91175: PPUSH
91176: LD_VAR 0 5
91180: PPUSH
91181: LD_INT 12
91183: PPUSH
91184: CALL 91191 0 4
// end ;
91188: PPOPN 5
91190: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
91191: LD_INT 0
91193: PPUSH
91194: PPUSH
91195: PPUSH
91196: PPUSH
91197: PPUSH
91198: PPUSH
91199: PPUSH
91200: PPUSH
91201: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
91202: LD_VAR 0 1
91206: NOT
91207: PUSH
91208: LD_VAR 0 2
91212: PPUSH
91213: LD_VAR 0 3
91217: PPUSH
91218: CALL_OW 488
91222: NOT
91223: OR
91224: PUSH
91225: LD_VAR 0 4
91229: NOT
91230: OR
91231: IFFALSE 91235
// exit ;
91233: GO 91575
// list := [ ] ;
91235: LD_ADDR_VAR 0 13
91239: PUSH
91240: EMPTY
91241: ST_TO_ADDR
// if x - r < 0 then
91242: LD_VAR 0 2
91246: PUSH
91247: LD_VAR 0 4
91251: MINUS
91252: PUSH
91253: LD_INT 0
91255: LESS
91256: IFFALSE 91268
// min_x := 0 else
91258: LD_ADDR_VAR 0 7
91262: PUSH
91263: LD_INT 0
91265: ST_TO_ADDR
91266: GO 91284
// min_x := x - r ;
91268: LD_ADDR_VAR 0 7
91272: PUSH
91273: LD_VAR 0 2
91277: PUSH
91278: LD_VAR 0 4
91282: MINUS
91283: ST_TO_ADDR
// if y - r < 0 then
91284: LD_VAR 0 3
91288: PUSH
91289: LD_VAR 0 4
91293: MINUS
91294: PUSH
91295: LD_INT 0
91297: LESS
91298: IFFALSE 91310
// min_y := 0 else
91300: LD_ADDR_VAR 0 8
91304: PUSH
91305: LD_INT 0
91307: ST_TO_ADDR
91308: GO 91326
// min_y := y - r ;
91310: LD_ADDR_VAR 0 8
91314: PUSH
91315: LD_VAR 0 3
91319: PUSH
91320: LD_VAR 0 4
91324: MINUS
91325: ST_TO_ADDR
// max_x := x + r ;
91326: LD_ADDR_VAR 0 9
91330: PUSH
91331: LD_VAR 0 2
91335: PUSH
91336: LD_VAR 0 4
91340: PLUS
91341: ST_TO_ADDR
// max_y := y + r ;
91342: LD_ADDR_VAR 0 10
91346: PUSH
91347: LD_VAR 0 3
91351: PUSH
91352: LD_VAR 0 4
91356: PLUS
91357: ST_TO_ADDR
// for _x = min_x to max_x do
91358: LD_ADDR_VAR 0 11
91362: PUSH
91363: DOUBLE
91364: LD_VAR 0 7
91368: DEC
91369: ST_TO_ADDR
91370: LD_VAR 0 9
91374: PUSH
91375: FOR_TO
91376: IFFALSE 91493
// for _y = min_y to max_y do
91378: LD_ADDR_VAR 0 12
91382: PUSH
91383: DOUBLE
91384: LD_VAR 0 8
91388: DEC
91389: ST_TO_ADDR
91390: LD_VAR 0 10
91394: PUSH
91395: FOR_TO
91396: IFFALSE 91489
// begin if not ValidHex ( _x , _y ) then
91398: LD_VAR 0 11
91402: PPUSH
91403: LD_VAR 0 12
91407: PPUSH
91408: CALL_OW 488
91412: NOT
91413: IFFALSE 91417
// continue ;
91415: GO 91395
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
91417: LD_VAR 0 11
91421: PPUSH
91422: LD_VAR 0 12
91426: PPUSH
91427: CALL_OW 351
91431: PUSH
91432: LD_VAR 0 11
91436: PPUSH
91437: LD_VAR 0 12
91441: PPUSH
91442: CALL_OW 554
91446: AND
91447: IFFALSE 91487
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
91449: LD_ADDR_VAR 0 13
91453: PUSH
91454: LD_VAR 0 13
91458: PPUSH
91459: LD_VAR 0 13
91463: PUSH
91464: LD_INT 1
91466: PLUS
91467: PPUSH
91468: LD_VAR 0 11
91472: PUSH
91473: LD_VAR 0 12
91477: PUSH
91478: EMPTY
91479: LIST
91480: LIST
91481: PPUSH
91482: CALL_OW 2
91486: ST_TO_ADDR
// end ;
91487: GO 91395
91489: POP
91490: POP
91491: GO 91375
91493: POP
91494: POP
// if not list then
91495: LD_VAR 0 13
91499: NOT
91500: IFFALSE 91504
// exit ;
91502: GO 91575
// for i in list do
91504: LD_ADDR_VAR 0 6
91508: PUSH
91509: LD_VAR 0 13
91513: PUSH
91514: FOR_IN
91515: IFFALSE 91573
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
91517: LD_VAR 0 1
91521: PPUSH
91522: LD_STRING M
91524: PUSH
91525: LD_VAR 0 6
91529: PUSH
91530: LD_INT 1
91532: ARRAY
91533: PUSH
91534: LD_VAR 0 6
91538: PUSH
91539: LD_INT 2
91541: ARRAY
91542: PUSH
91543: LD_INT 0
91545: PUSH
91546: LD_INT 0
91548: PUSH
91549: LD_INT 0
91551: PUSH
91552: LD_INT 0
91554: PUSH
91555: EMPTY
91556: LIST
91557: LIST
91558: LIST
91559: LIST
91560: LIST
91561: LIST
91562: LIST
91563: PUSH
91564: EMPTY
91565: LIST
91566: PPUSH
91567: CALL_OW 447
91571: GO 91514
91573: POP
91574: POP
// end ; end_of_file
91575: LD_VAR 0 5
91579: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
91580: LD_INT 0
91582: PPUSH
91583: PPUSH
91584: PPUSH
91585: PPUSH
91586: PPUSH
91587: PPUSH
91588: PPUSH
91589: PPUSH
91590: PPUSH
91591: PPUSH
91592: PPUSH
91593: PPUSH
91594: PPUSH
91595: PPUSH
91596: PPUSH
91597: PPUSH
91598: PPUSH
91599: PPUSH
91600: PPUSH
91601: PPUSH
91602: PPUSH
91603: PPUSH
91604: PPUSH
91605: PPUSH
91606: PPUSH
91607: PPUSH
91608: PPUSH
91609: PPUSH
91610: PPUSH
91611: PPUSH
91612: PPUSH
91613: PPUSH
91614: PPUSH
91615: PPUSH
// if not list then
91616: LD_VAR 0 1
91620: NOT
91621: IFFALSE 91625
// exit ;
91623: GO 96284
// base := list [ 1 ] ;
91625: LD_ADDR_VAR 0 3
91629: PUSH
91630: LD_VAR 0 1
91634: PUSH
91635: LD_INT 1
91637: ARRAY
91638: ST_TO_ADDR
// group := list [ 2 ] ;
91639: LD_ADDR_VAR 0 4
91643: PUSH
91644: LD_VAR 0 1
91648: PUSH
91649: LD_INT 2
91651: ARRAY
91652: ST_TO_ADDR
// path := list [ 3 ] ;
91653: LD_ADDR_VAR 0 5
91657: PUSH
91658: LD_VAR 0 1
91662: PUSH
91663: LD_INT 3
91665: ARRAY
91666: ST_TO_ADDR
// flags := list [ 4 ] ;
91667: LD_ADDR_VAR 0 6
91671: PUSH
91672: LD_VAR 0 1
91676: PUSH
91677: LD_INT 4
91679: ARRAY
91680: ST_TO_ADDR
// mined := [ ] ;
91681: LD_ADDR_VAR 0 27
91685: PUSH
91686: EMPTY
91687: ST_TO_ADDR
// bombed := [ ] ;
91688: LD_ADDR_VAR 0 28
91692: PUSH
91693: EMPTY
91694: ST_TO_ADDR
// healers := [ ] ;
91695: LD_ADDR_VAR 0 31
91699: PUSH
91700: EMPTY
91701: ST_TO_ADDR
// to_heal := [ ] ;
91702: LD_ADDR_VAR 0 30
91706: PUSH
91707: EMPTY
91708: ST_TO_ADDR
// repairs := [ ] ;
91709: LD_ADDR_VAR 0 33
91713: PUSH
91714: EMPTY
91715: ST_TO_ADDR
// to_repair := [ ] ;
91716: LD_ADDR_VAR 0 32
91720: PUSH
91721: EMPTY
91722: ST_TO_ADDR
// if not group or not path then
91723: LD_VAR 0 4
91727: NOT
91728: PUSH
91729: LD_VAR 0 5
91733: NOT
91734: OR
91735: IFFALSE 91739
// exit ;
91737: GO 96284
// side := GetSide ( group [ 1 ] ) ;
91739: LD_ADDR_VAR 0 35
91743: PUSH
91744: LD_VAR 0 4
91748: PUSH
91749: LD_INT 1
91751: ARRAY
91752: PPUSH
91753: CALL_OW 255
91757: ST_TO_ADDR
// if flags then
91758: LD_VAR 0 6
91762: IFFALSE 91906
// begin f_ignore_area := flags [ 1 ] ;
91764: LD_ADDR_VAR 0 17
91768: PUSH
91769: LD_VAR 0 6
91773: PUSH
91774: LD_INT 1
91776: ARRAY
91777: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
91778: LD_ADDR_VAR 0 18
91782: PUSH
91783: LD_VAR 0 6
91787: PUSH
91788: LD_INT 2
91790: ARRAY
91791: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
91792: LD_ADDR_VAR 0 19
91796: PUSH
91797: LD_VAR 0 6
91801: PUSH
91802: LD_INT 3
91804: ARRAY
91805: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
91806: LD_ADDR_VAR 0 20
91810: PUSH
91811: LD_VAR 0 6
91815: PUSH
91816: LD_INT 4
91818: ARRAY
91819: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
91820: LD_ADDR_VAR 0 21
91824: PUSH
91825: LD_VAR 0 6
91829: PUSH
91830: LD_INT 5
91832: ARRAY
91833: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
91834: LD_ADDR_VAR 0 22
91838: PUSH
91839: LD_VAR 0 6
91843: PUSH
91844: LD_INT 6
91846: ARRAY
91847: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
91848: LD_ADDR_VAR 0 23
91852: PUSH
91853: LD_VAR 0 6
91857: PUSH
91858: LD_INT 7
91860: ARRAY
91861: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
91862: LD_ADDR_VAR 0 24
91866: PUSH
91867: LD_VAR 0 6
91871: PUSH
91872: LD_INT 8
91874: ARRAY
91875: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
91876: LD_ADDR_VAR 0 25
91880: PUSH
91881: LD_VAR 0 6
91885: PUSH
91886: LD_INT 9
91888: ARRAY
91889: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
91890: LD_ADDR_VAR 0 26
91894: PUSH
91895: LD_VAR 0 6
91899: PUSH
91900: LD_INT 10
91902: ARRAY
91903: ST_TO_ADDR
// end else
91904: GO 91986
// begin f_ignore_area := false ;
91906: LD_ADDR_VAR 0 17
91910: PUSH
91911: LD_INT 0
91913: ST_TO_ADDR
// f_capture := false ;
91914: LD_ADDR_VAR 0 18
91918: PUSH
91919: LD_INT 0
91921: ST_TO_ADDR
// f_ignore_civ := false ;
91922: LD_ADDR_VAR 0 19
91926: PUSH
91927: LD_INT 0
91929: ST_TO_ADDR
// f_murder := false ;
91930: LD_ADDR_VAR 0 20
91934: PUSH
91935: LD_INT 0
91937: ST_TO_ADDR
// f_mines := false ;
91938: LD_ADDR_VAR 0 21
91942: PUSH
91943: LD_INT 0
91945: ST_TO_ADDR
// f_repair := false ;
91946: LD_ADDR_VAR 0 22
91950: PUSH
91951: LD_INT 0
91953: ST_TO_ADDR
// f_heal := false ;
91954: LD_ADDR_VAR 0 23
91958: PUSH
91959: LD_INT 0
91961: ST_TO_ADDR
// f_spacetime := false ;
91962: LD_ADDR_VAR 0 24
91966: PUSH
91967: LD_INT 0
91969: ST_TO_ADDR
// f_attack_depot := false ;
91970: LD_ADDR_VAR 0 25
91974: PUSH
91975: LD_INT 0
91977: ST_TO_ADDR
// f_crawl := false ;
91978: LD_ADDR_VAR 0 26
91982: PUSH
91983: LD_INT 0
91985: ST_TO_ADDR
// end ; if f_heal then
91986: LD_VAR 0 23
91990: IFFALSE 92017
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
91992: LD_ADDR_VAR 0 31
91996: PUSH
91997: LD_VAR 0 4
92001: PPUSH
92002: LD_INT 25
92004: PUSH
92005: LD_INT 4
92007: PUSH
92008: EMPTY
92009: LIST
92010: LIST
92011: PPUSH
92012: CALL_OW 72
92016: ST_TO_ADDR
// if f_repair then
92017: LD_VAR 0 22
92021: IFFALSE 92048
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
92023: LD_ADDR_VAR 0 33
92027: PUSH
92028: LD_VAR 0 4
92032: PPUSH
92033: LD_INT 25
92035: PUSH
92036: LD_INT 3
92038: PUSH
92039: EMPTY
92040: LIST
92041: LIST
92042: PPUSH
92043: CALL_OW 72
92047: ST_TO_ADDR
// units_path := [ ] ;
92048: LD_ADDR_VAR 0 16
92052: PUSH
92053: EMPTY
92054: ST_TO_ADDR
// for i = 1 to group do
92055: LD_ADDR_VAR 0 7
92059: PUSH
92060: DOUBLE
92061: LD_INT 1
92063: DEC
92064: ST_TO_ADDR
92065: LD_VAR 0 4
92069: PUSH
92070: FOR_TO
92071: IFFALSE 92100
// units_path := Replace ( units_path , i , path ) ;
92073: LD_ADDR_VAR 0 16
92077: PUSH
92078: LD_VAR 0 16
92082: PPUSH
92083: LD_VAR 0 7
92087: PPUSH
92088: LD_VAR 0 5
92092: PPUSH
92093: CALL_OW 1
92097: ST_TO_ADDR
92098: GO 92070
92100: POP
92101: POP
// repeat for i = group downto 1 do
92102: LD_ADDR_VAR 0 7
92106: PUSH
92107: DOUBLE
92108: LD_VAR 0 4
92112: INC
92113: ST_TO_ADDR
92114: LD_INT 1
92116: PUSH
92117: FOR_DOWNTO
92118: IFFALSE 96240
// begin wait ( 5 ) ;
92120: LD_INT 5
92122: PPUSH
92123: CALL_OW 67
// tmp := [ ] ;
92127: LD_ADDR_VAR 0 14
92131: PUSH
92132: EMPTY
92133: ST_TO_ADDR
// attacking := false ;
92134: LD_ADDR_VAR 0 29
92138: PUSH
92139: LD_INT 0
92141: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
92142: LD_VAR 0 4
92146: PUSH
92147: LD_VAR 0 7
92151: ARRAY
92152: PPUSH
92153: CALL_OW 301
92157: PUSH
92158: LD_VAR 0 4
92162: PUSH
92163: LD_VAR 0 7
92167: ARRAY
92168: NOT
92169: OR
92170: IFFALSE 92279
// begin if GetType ( group [ i ] ) = unit_human then
92172: LD_VAR 0 4
92176: PUSH
92177: LD_VAR 0 7
92181: ARRAY
92182: PPUSH
92183: CALL_OW 247
92187: PUSH
92188: LD_INT 1
92190: EQUAL
92191: IFFALSE 92237
// begin to_heal := to_heal diff group [ i ] ;
92193: LD_ADDR_VAR 0 30
92197: PUSH
92198: LD_VAR 0 30
92202: PUSH
92203: LD_VAR 0 4
92207: PUSH
92208: LD_VAR 0 7
92212: ARRAY
92213: DIFF
92214: ST_TO_ADDR
// healers := healers diff group [ i ] ;
92215: LD_ADDR_VAR 0 31
92219: PUSH
92220: LD_VAR 0 31
92224: PUSH
92225: LD_VAR 0 4
92229: PUSH
92230: LD_VAR 0 7
92234: ARRAY
92235: DIFF
92236: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
92237: LD_ADDR_VAR 0 4
92241: PUSH
92242: LD_VAR 0 4
92246: PPUSH
92247: LD_VAR 0 7
92251: PPUSH
92252: CALL_OW 3
92256: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
92257: LD_ADDR_VAR 0 16
92261: PUSH
92262: LD_VAR 0 16
92266: PPUSH
92267: LD_VAR 0 7
92271: PPUSH
92272: CALL_OW 3
92276: ST_TO_ADDR
// continue ;
92277: GO 92117
// end ; if f_repair then
92279: LD_VAR 0 22
92283: IFFALSE 92772
// begin if GetType ( group [ i ] ) = unit_vehicle then
92285: LD_VAR 0 4
92289: PUSH
92290: LD_VAR 0 7
92294: ARRAY
92295: PPUSH
92296: CALL_OW 247
92300: PUSH
92301: LD_INT 2
92303: EQUAL
92304: IFFALSE 92494
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
92306: LD_VAR 0 4
92310: PUSH
92311: LD_VAR 0 7
92315: ARRAY
92316: PPUSH
92317: CALL_OW 256
92321: PUSH
92322: LD_INT 700
92324: LESS
92325: PUSH
92326: LD_VAR 0 4
92330: PUSH
92331: LD_VAR 0 7
92335: ARRAY
92336: PUSH
92337: LD_VAR 0 32
92341: IN
92342: NOT
92343: AND
92344: IFFALSE 92368
// to_repair := to_repair union group [ i ] ;
92346: LD_ADDR_VAR 0 32
92350: PUSH
92351: LD_VAR 0 32
92355: PUSH
92356: LD_VAR 0 4
92360: PUSH
92361: LD_VAR 0 7
92365: ARRAY
92366: UNION
92367: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
92368: LD_VAR 0 4
92372: PUSH
92373: LD_VAR 0 7
92377: ARRAY
92378: PPUSH
92379: CALL_OW 256
92383: PUSH
92384: LD_INT 1000
92386: EQUAL
92387: PUSH
92388: LD_VAR 0 4
92392: PUSH
92393: LD_VAR 0 7
92397: ARRAY
92398: PUSH
92399: LD_VAR 0 32
92403: IN
92404: AND
92405: IFFALSE 92429
// to_repair := to_repair diff group [ i ] ;
92407: LD_ADDR_VAR 0 32
92411: PUSH
92412: LD_VAR 0 32
92416: PUSH
92417: LD_VAR 0 4
92421: PUSH
92422: LD_VAR 0 7
92426: ARRAY
92427: DIFF
92428: ST_TO_ADDR
// if group [ i ] in to_repair then
92429: LD_VAR 0 4
92433: PUSH
92434: LD_VAR 0 7
92438: ARRAY
92439: PUSH
92440: LD_VAR 0 32
92444: IN
92445: IFFALSE 92492
// begin if not IsInArea ( group [ i ] , f_repair ) then
92447: LD_VAR 0 4
92451: PUSH
92452: LD_VAR 0 7
92456: ARRAY
92457: PPUSH
92458: LD_VAR 0 22
92462: PPUSH
92463: CALL_OW 308
92467: NOT
92468: IFFALSE 92490
// ComMoveToArea ( group [ i ] , f_repair ) ;
92470: LD_VAR 0 4
92474: PUSH
92475: LD_VAR 0 7
92479: ARRAY
92480: PPUSH
92481: LD_VAR 0 22
92485: PPUSH
92486: CALL_OW 113
// continue ;
92490: GO 92117
// end ; end else
92492: GO 92772
// if group [ i ] in repairs then
92494: LD_VAR 0 4
92498: PUSH
92499: LD_VAR 0 7
92503: ARRAY
92504: PUSH
92505: LD_VAR 0 33
92509: IN
92510: IFFALSE 92772
// begin if IsInUnit ( group [ i ] ) then
92512: LD_VAR 0 4
92516: PUSH
92517: LD_VAR 0 7
92521: ARRAY
92522: PPUSH
92523: CALL_OW 310
92527: IFFALSE 92595
// begin z := IsInUnit ( group [ i ] ) ;
92529: LD_ADDR_VAR 0 13
92533: PUSH
92534: LD_VAR 0 4
92538: PUSH
92539: LD_VAR 0 7
92543: ARRAY
92544: PPUSH
92545: CALL_OW 310
92549: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
92550: LD_VAR 0 13
92554: PUSH
92555: LD_VAR 0 32
92559: IN
92560: PUSH
92561: LD_VAR 0 13
92565: PPUSH
92566: LD_VAR 0 22
92570: PPUSH
92571: CALL_OW 308
92575: AND
92576: IFFALSE 92593
// ComExitVehicle ( group [ i ] ) ;
92578: LD_VAR 0 4
92582: PUSH
92583: LD_VAR 0 7
92587: ARRAY
92588: PPUSH
92589: CALL_OW 121
// end else
92593: GO 92772
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
92595: LD_ADDR_VAR 0 13
92599: PUSH
92600: LD_VAR 0 4
92604: PPUSH
92605: LD_INT 95
92607: PUSH
92608: LD_VAR 0 22
92612: PUSH
92613: EMPTY
92614: LIST
92615: LIST
92616: PUSH
92617: LD_INT 58
92619: PUSH
92620: EMPTY
92621: LIST
92622: PUSH
92623: EMPTY
92624: LIST
92625: LIST
92626: PPUSH
92627: CALL_OW 72
92631: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
92632: LD_VAR 0 4
92636: PUSH
92637: LD_VAR 0 7
92641: ARRAY
92642: PPUSH
92643: CALL_OW 314
92647: NOT
92648: IFFALSE 92770
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
92650: LD_ADDR_VAR 0 10
92654: PUSH
92655: LD_VAR 0 13
92659: PPUSH
92660: LD_VAR 0 4
92664: PUSH
92665: LD_VAR 0 7
92669: ARRAY
92670: PPUSH
92671: CALL_OW 74
92675: ST_TO_ADDR
// if not x then
92676: LD_VAR 0 10
92680: NOT
92681: IFFALSE 92685
// continue ;
92683: GO 92117
// if GetLives ( x ) < 1000 then
92685: LD_VAR 0 10
92689: PPUSH
92690: CALL_OW 256
92694: PUSH
92695: LD_INT 1000
92697: LESS
92698: IFFALSE 92722
// ComRepairVehicle ( group [ i ] , x ) else
92700: LD_VAR 0 4
92704: PUSH
92705: LD_VAR 0 7
92709: ARRAY
92710: PPUSH
92711: LD_VAR 0 10
92715: PPUSH
92716: CALL_OW 129
92720: GO 92770
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
92722: LD_VAR 0 23
92726: PUSH
92727: LD_VAR 0 4
92731: PUSH
92732: LD_VAR 0 7
92736: ARRAY
92737: PPUSH
92738: CALL_OW 256
92742: PUSH
92743: LD_INT 1000
92745: LESS
92746: AND
92747: NOT
92748: IFFALSE 92770
// ComEnterUnit ( group [ i ] , x ) ;
92750: LD_VAR 0 4
92754: PUSH
92755: LD_VAR 0 7
92759: ARRAY
92760: PPUSH
92761: LD_VAR 0 10
92765: PPUSH
92766: CALL_OW 120
// end ; continue ;
92770: GO 92117
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
92772: LD_VAR 0 23
92776: PUSH
92777: LD_VAR 0 4
92781: PUSH
92782: LD_VAR 0 7
92786: ARRAY
92787: PPUSH
92788: CALL_OW 247
92792: PUSH
92793: LD_INT 1
92795: EQUAL
92796: AND
92797: IFFALSE 93275
// begin if group [ i ] in healers then
92799: LD_VAR 0 4
92803: PUSH
92804: LD_VAR 0 7
92808: ARRAY
92809: PUSH
92810: LD_VAR 0 31
92814: IN
92815: IFFALSE 93088
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
92817: LD_VAR 0 4
92821: PUSH
92822: LD_VAR 0 7
92826: ARRAY
92827: PPUSH
92828: LD_VAR 0 23
92832: PPUSH
92833: CALL_OW 308
92837: NOT
92838: PUSH
92839: LD_VAR 0 4
92843: PUSH
92844: LD_VAR 0 7
92848: ARRAY
92849: PPUSH
92850: CALL_OW 314
92854: NOT
92855: AND
92856: IFFALSE 92880
// ComMoveToArea ( group [ i ] , f_heal ) else
92858: LD_VAR 0 4
92862: PUSH
92863: LD_VAR 0 7
92867: ARRAY
92868: PPUSH
92869: LD_VAR 0 23
92873: PPUSH
92874: CALL_OW 113
92878: GO 93086
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
92880: LD_VAR 0 4
92884: PUSH
92885: LD_VAR 0 7
92889: ARRAY
92890: PPUSH
92891: CALL 46784 0 1
92895: PPUSH
92896: CALL_OW 256
92900: PUSH
92901: LD_INT 1000
92903: EQUAL
92904: IFFALSE 92923
// ComStop ( group [ i ] ) else
92906: LD_VAR 0 4
92910: PUSH
92911: LD_VAR 0 7
92915: ARRAY
92916: PPUSH
92917: CALL_OW 141
92921: GO 93086
// if not HasTask ( group [ i ] ) and to_heal then
92923: LD_VAR 0 4
92927: PUSH
92928: LD_VAR 0 7
92932: ARRAY
92933: PPUSH
92934: CALL_OW 314
92938: NOT
92939: PUSH
92940: LD_VAR 0 30
92944: AND
92945: IFFALSE 93086
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
92947: LD_ADDR_VAR 0 13
92951: PUSH
92952: LD_VAR 0 30
92956: PPUSH
92957: LD_INT 3
92959: PUSH
92960: LD_INT 54
92962: PUSH
92963: EMPTY
92964: LIST
92965: PUSH
92966: EMPTY
92967: LIST
92968: LIST
92969: PPUSH
92970: CALL_OW 72
92974: PPUSH
92975: LD_VAR 0 4
92979: PUSH
92980: LD_VAR 0 7
92984: ARRAY
92985: PPUSH
92986: CALL_OW 74
92990: ST_TO_ADDR
// if z then
92991: LD_VAR 0 13
92995: IFFALSE 93086
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
92997: LD_INT 91
92999: PUSH
93000: LD_VAR 0 13
93004: PUSH
93005: LD_INT 10
93007: PUSH
93008: EMPTY
93009: LIST
93010: LIST
93011: LIST
93012: PUSH
93013: LD_INT 81
93015: PUSH
93016: LD_VAR 0 13
93020: PPUSH
93021: CALL_OW 255
93025: PUSH
93026: EMPTY
93027: LIST
93028: LIST
93029: PUSH
93030: EMPTY
93031: LIST
93032: LIST
93033: PPUSH
93034: CALL_OW 69
93038: PUSH
93039: LD_INT 0
93041: EQUAL
93042: IFFALSE 93066
// ComHeal ( group [ i ] , z ) else
93044: LD_VAR 0 4
93048: PUSH
93049: LD_VAR 0 7
93053: ARRAY
93054: PPUSH
93055: LD_VAR 0 13
93059: PPUSH
93060: CALL_OW 128
93064: GO 93086
// ComMoveToArea ( group [ i ] , f_heal ) ;
93066: LD_VAR 0 4
93070: PUSH
93071: LD_VAR 0 7
93075: ARRAY
93076: PPUSH
93077: LD_VAR 0 23
93081: PPUSH
93082: CALL_OW 113
// end ; continue ;
93086: GO 92117
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
93088: LD_VAR 0 4
93092: PUSH
93093: LD_VAR 0 7
93097: ARRAY
93098: PPUSH
93099: CALL_OW 256
93103: PUSH
93104: LD_INT 700
93106: LESS
93107: PUSH
93108: LD_VAR 0 4
93112: PUSH
93113: LD_VAR 0 7
93117: ARRAY
93118: PUSH
93119: LD_VAR 0 30
93123: IN
93124: NOT
93125: AND
93126: IFFALSE 93150
// to_heal := to_heal union group [ i ] ;
93128: LD_ADDR_VAR 0 30
93132: PUSH
93133: LD_VAR 0 30
93137: PUSH
93138: LD_VAR 0 4
93142: PUSH
93143: LD_VAR 0 7
93147: ARRAY
93148: UNION
93149: ST_TO_ADDR
// if group [ i ] in to_heal then
93150: LD_VAR 0 4
93154: PUSH
93155: LD_VAR 0 7
93159: ARRAY
93160: PUSH
93161: LD_VAR 0 30
93165: IN
93166: IFFALSE 93275
// begin if GetLives ( group [ i ] ) = 1000 then
93168: LD_VAR 0 4
93172: PUSH
93173: LD_VAR 0 7
93177: ARRAY
93178: PPUSH
93179: CALL_OW 256
93183: PUSH
93184: LD_INT 1000
93186: EQUAL
93187: IFFALSE 93213
// to_heal := to_heal diff group [ i ] else
93189: LD_ADDR_VAR 0 30
93193: PUSH
93194: LD_VAR 0 30
93198: PUSH
93199: LD_VAR 0 4
93203: PUSH
93204: LD_VAR 0 7
93208: ARRAY
93209: DIFF
93210: ST_TO_ADDR
93211: GO 93275
// begin if not IsInArea ( group [ i ] , to_heal ) then
93213: LD_VAR 0 4
93217: PUSH
93218: LD_VAR 0 7
93222: ARRAY
93223: PPUSH
93224: LD_VAR 0 30
93228: PPUSH
93229: CALL_OW 308
93233: NOT
93234: IFFALSE 93258
// ComMoveToArea ( group [ i ] , f_heal ) else
93236: LD_VAR 0 4
93240: PUSH
93241: LD_VAR 0 7
93245: ARRAY
93246: PPUSH
93247: LD_VAR 0 23
93251: PPUSH
93252: CALL_OW 113
93256: GO 93273
// ComHold ( group [ i ] ) ;
93258: LD_VAR 0 4
93262: PUSH
93263: LD_VAR 0 7
93267: ARRAY
93268: PPUSH
93269: CALL_OW 140
// continue ;
93273: GO 92117
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
93275: LD_VAR 0 4
93279: PUSH
93280: LD_VAR 0 7
93284: ARRAY
93285: PPUSH
93286: LD_INT 10
93288: PPUSH
93289: CALL 45204 0 2
93293: NOT
93294: PUSH
93295: LD_VAR 0 16
93299: PUSH
93300: LD_VAR 0 7
93304: ARRAY
93305: PUSH
93306: EMPTY
93307: EQUAL
93308: NOT
93309: AND
93310: IFFALSE 93576
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
93312: LD_VAR 0 4
93316: PUSH
93317: LD_VAR 0 7
93321: ARRAY
93322: PPUSH
93323: CALL_OW 262
93327: PUSH
93328: LD_INT 1
93330: PUSH
93331: LD_INT 2
93333: PUSH
93334: EMPTY
93335: LIST
93336: LIST
93337: IN
93338: IFFALSE 93379
// if GetFuel ( group [ i ] ) < 10 then
93340: LD_VAR 0 4
93344: PUSH
93345: LD_VAR 0 7
93349: ARRAY
93350: PPUSH
93351: CALL_OW 261
93355: PUSH
93356: LD_INT 10
93358: LESS
93359: IFFALSE 93379
// SetFuel ( group [ i ] , 12 ) ;
93361: LD_VAR 0 4
93365: PUSH
93366: LD_VAR 0 7
93370: ARRAY
93371: PPUSH
93372: LD_INT 12
93374: PPUSH
93375: CALL_OW 240
// if units_path [ i ] then
93379: LD_VAR 0 16
93383: PUSH
93384: LD_VAR 0 7
93388: ARRAY
93389: IFFALSE 93574
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
93391: LD_VAR 0 4
93395: PUSH
93396: LD_VAR 0 7
93400: ARRAY
93401: PPUSH
93402: LD_VAR 0 16
93406: PUSH
93407: LD_VAR 0 7
93411: ARRAY
93412: PUSH
93413: LD_INT 1
93415: ARRAY
93416: PUSH
93417: LD_INT 1
93419: ARRAY
93420: PPUSH
93421: LD_VAR 0 16
93425: PUSH
93426: LD_VAR 0 7
93430: ARRAY
93431: PUSH
93432: LD_INT 1
93434: ARRAY
93435: PUSH
93436: LD_INT 2
93438: ARRAY
93439: PPUSH
93440: CALL_OW 297
93444: PUSH
93445: LD_INT 6
93447: GREATER
93448: IFFALSE 93523
// begin if not HasTask ( group [ i ] ) then
93450: LD_VAR 0 4
93454: PUSH
93455: LD_VAR 0 7
93459: ARRAY
93460: PPUSH
93461: CALL_OW 314
93465: NOT
93466: IFFALSE 93521
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
93468: LD_VAR 0 4
93472: PUSH
93473: LD_VAR 0 7
93477: ARRAY
93478: PPUSH
93479: LD_VAR 0 16
93483: PUSH
93484: LD_VAR 0 7
93488: ARRAY
93489: PUSH
93490: LD_INT 1
93492: ARRAY
93493: PUSH
93494: LD_INT 1
93496: ARRAY
93497: PPUSH
93498: LD_VAR 0 16
93502: PUSH
93503: LD_VAR 0 7
93507: ARRAY
93508: PUSH
93509: LD_INT 1
93511: ARRAY
93512: PUSH
93513: LD_INT 2
93515: ARRAY
93516: PPUSH
93517: CALL_OW 114
// end else
93521: GO 93574
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
93523: LD_ADDR_VAR 0 15
93527: PUSH
93528: LD_VAR 0 16
93532: PUSH
93533: LD_VAR 0 7
93537: ARRAY
93538: PPUSH
93539: LD_INT 1
93541: PPUSH
93542: CALL_OW 3
93546: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
93547: LD_ADDR_VAR 0 16
93551: PUSH
93552: LD_VAR 0 16
93556: PPUSH
93557: LD_VAR 0 7
93561: PPUSH
93562: LD_VAR 0 15
93566: PPUSH
93567: CALL_OW 1
93571: ST_TO_ADDR
// continue ;
93572: GO 92117
// end ; end ; end else
93574: GO 96238
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
93576: LD_ADDR_VAR 0 14
93580: PUSH
93581: LD_INT 81
93583: PUSH
93584: LD_VAR 0 4
93588: PUSH
93589: LD_VAR 0 7
93593: ARRAY
93594: PPUSH
93595: CALL_OW 255
93599: PUSH
93600: EMPTY
93601: LIST
93602: LIST
93603: PPUSH
93604: CALL_OW 69
93608: ST_TO_ADDR
// if not tmp then
93609: LD_VAR 0 14
93613: NOT
93614: IFFALSE 93618
// continue ;
93616: GO 92117
// if f_ignore_area then
93618: LD_VAR 0 17
93622: IFFALSE 93710
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
93624: LD_ADDR_VAR 0 15
93628: PUSH
93629: LD_VAR 0 14
93633: PPUSH
93634: LD_INT 3
93636: PUSH
93637: LD_INT 92
93639: PUSH
93640: LD_VAR 0 17
93644: PUSH
93645: LD_INT 1
93647: ARRAY
93648: PUSH
93649: LD_VAR 0 17
93653: PUSH
93654: LD_INT 2
93656: ARRAY
93657: PUSH
93658: LD_VAR 0 17
93662: PUSH
93663: LD_INT 3
93665: ARRAY
93666: PUSH
93667: EMPTY
93668: LIST
93669: LIST
93670: LIST
93671: LIST
93672: PUSH
93673: EMPTY
93674: LIST
93675: LIST
93676: PPUSH
93677: CALL_OW 72
93681: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
93682: LD_VAR 0 14
93686: PUSH
93687: LD_VAR 0 15
93691: DIFF
93692: IFFALSE 93710
// tmp := tmp diff tmp2 ;
93694: LD_ADDR_VAR 0 14
93698: PUSH
93699: LD_VAR 0 14
93703: PUSH
93704: LD_VAR 0 15
93708: DIFF
93709: ST_TO_ADDR
// end ; if not f_murder then
93710: LD_VAR 0 20
93714: NOT
93715: IFFALSE 93773
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
93717: LD_ADDR_VAR 0 15
93721: PUSH
93722: LD_VAR 0 14
93726: PPUSH
93727: LD_INT 3
93729: PUSH
93730: LD_INT 50
93732: PUSH
93733: EMPTY
93734: LIST
93735: PUSH
93736: EMPTY
93737: LIST
93738: LIST
93739: PPUSH
93740: CALL_OW 72
93744: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
93745: LD_VAR 0 14
93749: PUSH
93750: LD_VAR 0 15
93754: DIFF
93755: IFFALSE 93773
// tmp := tmp diff tmp2 ;
93757: LD_ADDR_VAR 0 14
93761: PUSH
93762: LD_VAR 0 14
93766: PUSH
93767: LD_VAR 0 15
93771: DIFF
93772: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
93773: LD_ADDR_VAR 0 14
93777: PUSH
93778: LD_VAR 0 4
93782: PUSH
93783: LD_VAR 0 7
93787: ARRAY
93788: PPUSH
93789: LD_VAR 0 14
93793: PPUSH
93794: LD_INT 1
93796: PPUSH
93797: LD_INT 1
93799: PPUSH
93800: CALL 18847 0 4
93804: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
93805: LD_VAR 0 4
93809: PUSH
93810: LD_VAR 0 7
93814: ARRAY
93815: PPUSH
93816: CALL_OW 257
93820: PUSH
93821: LD_INT 1
93823: EQUAL
93824: IFFALSE 94272
// begin if WantPlant ( group [ i ] ) then
93826: LD_VAR 0 4
93830: PUSH
93831: LD_VAR 0 7
93835: ARRAY
93836: PPUSH
93837: CALL 18348 0 1
93841: IFFALSE 93845
// continue ;
93843: GO 92117
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
93845: LD_VAR 0 18
93849: PUSH
93850: LD_VAR 0 4
93854: PUSH
93855: LD_VAR 0 7
93859: ARRAY
93860: PPUSH
93861: CALL_OW 310
93865: NOT
93866: AND
93867: PUSH
93868: LD_VAR 0 14
93872: PUSH
93873: LD_INT 1
93875: ARRAY
93876: PUSH
93877: LD_VAR 0 14
93881: PPUSH
93882: LD_INT 21
93884: PUSH
93885: LD_INT 2
93887: PUSH
93888: EMPTY
93889: LIST
93890: LIST
93891: PUSH
93892: LD_INT 58
93894: PUSH
93895: EMPTY
93896: LIST
93897: PUSH
93898: EMPTY
93899: LIST
93900: LIST
93901: PPUSH
93902: CALL_OW 72
93906: IN
93907: AND
93908: IFFALSE 93944
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
93910: LD_VAR 0 4
93914: PUSH
93915: LD_VAR 0 7
93919: ARRAY
93920: PPUSH
93921: LD_VAR 0 14
93925: PUSH
93926: LD_INT 1
93928: ARRAY
93929: PPUSH
93930: CALL_OW 120
// attacking := true ;
93934: LD_ADDR_VAR 0 29
93938: PUSH
93939: LD_INT 1
93941: ST_TO_ADDR
// continue ;
93942: GO 92117
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
93944: LD_VAR 0 26
93948: PUSH
93949: LD_VAR 0 4
93953: PUSH
93954: LD_VAR 0 7
93958: ARRAY
93959: PPUSH
93960: CALL_OW 257
93964: PUSH
93965: LD_INT 1
93967: EQUAL
93968: AND
93969: PUSH
93970: LD_VAR 0 4
93974: PUSH
93975: LD_VAR 0 7
93979: ARRAY
93980: PPUSH
93981: CALL_OW 256
93985: PUSH
93986: LD_INT 800
93988: LESS
93989: AND
93990: PUSH
93991: LD_VAR 0 4
93995: PUSH
93996: LD_VAR 0 7
94000: ARRAY
94001: PPUSH
94002: CALL_OW 318
94006: NOT
94007: AND
94008: IFFALSE 94025
// ComCrawl ( group [ i ] ) ;
94010: LD_VAR 0 4
94014: PUSH
94015: LD_VAR 0 7
94019: ARRAY
94020: PPUSH
94021: CALL_OW 137
// if f_mines then
94025: LD_VAR 0 21
94029: IFFALSE 94272
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
94031: LD_VAR 0 14
94035: PUSH
94036: LD_INT 1
94038: ARRAY
94039: PPUSH
94040: CALL_OW 247
94044: PUSH
94045: LD_INT 3
94047: EQUAL
94048: PUSH
94049: LD_VAR 0 14
94053: PUSH
94054: LD_INT 1
94056: ARRAY
94057: PUSH
94058: LD_VAR 0 27
94062: IN
94063: NOT
94064: AND
94065: IFFALSE 94272
// begin x := GetX ( tmp [ 1 ] ) ;
94067: LD_ADDR_VAR 0 10
94071: PUSH
94072: LD_VAR 0 14
94076: PUSH
94077: LD_INT 1
94079: ARRAY
94080: PPUSH
94081: CALL_OW 250
94085: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
94086: LD_ADDR_VAR 0 11
94090: PUSH
94091: LD_VAR 0 14
94095: PUSH
94096: LD_INT 1
94098: ARRAY
94099: PPUSH
94100: CALL_OW 251
94104: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
94105: LD_ADDR_VAR 0 12
94109: PUSH
94110: LD_VAR 0 4
94114: PUSH
94115: LD_VAR 0 7
94119: ARRAY
94120: PPUSH
94121: CALL 45289 0 1
94125: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
94126: LD_VAR 0 4
94130: PUSH
94131: LD_VAR 0 7
94135: ARRAY
94136: PPUSH
94137: LD_VAR 0 10
94141: PPUSH
94142: LD_VAR 0 11
94146: PPUSH
94147: LD_VAR 0 14
94151: PUSH
94152: LD_INT 1
94154: ARRAY
94155: PPUSH
94156: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
94160: LD_VAR 0 4
94164: PUSH
94165: LD_VAR 0 7
94169: ARRAY
94170: PPUSH
94171: LD_VAR 0 10
94175: PPUSH
94176: LD_VAR 0 12
94180: PPUSH
94181: LD_INT 7
94183: PPUSH
94184: CALL_OW 272
94188: PPUSH
94189: LD_VAR 0 11
94193: PPUSH
94194: LD_VAR 0 12
94198: PPUSH
94199: LD_INT 7
94201: PPUSH
94202: CALL_OW 273
94206: PPUSH
94207: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
94211: LD_VAR 0 4
94215: PUSH
94216: LD_VAR 0 7
94220: ARRAY
94221: PPUSH
94222: LD_INT 71
94224: PPUSH
94225: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
94229: LD_ADDR_VAR 0 27
94233: PUSH
94234: LD_VAR 0 27
94238: PPUSH
94239: LD_VAR 0 27
94243: PUSH
94244: LD_INT 1
94246: PLUS
94247: PPUSH
94248: LD_VAR 0 14
94252: PUSH
94253: LD_INT 1
94255: ARRAY
94256: PPUSH
94257: CALL_OW 1
94261: ST_TO_ADDR
// attacking := true ;
94262: LD_ADDR_VAR 0 29
94266: PUSH
94267: LD_INT 1
94269: ST_TO_ADDR
// continue ;
94270: GO 92117
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
94272: LD_VAR 0 4
94276: PUSH
94277: LD_VAR 0 7
94281: ARRAY
94282: PPUSH
94283: CALL_OW 257
94287: PUSH
94288: LD_INT 17
94290: EQUAL
94291: PUSH
94292: LD_VAR 0 4
94296: PUSH
94297: LD_VAR 0 7
94301: ARRAY
94302: PPUSH
94303: CALL_OW 110
94307: PUSH
94308: LD_INT 71
94310: EQUAL
94311: NOT
94312: AND
94313: IFFALSE 94459
// begin attacking := false ;
94315: LD_ADDR_VAR 0 29
94319: PUSH
94320: LD_INT 0
94322: ST_TO_ADDR
// k := 5 ;
94323: LD_ADDR_VAR 0 9
94327: PUSH
94328: LD_INT 5
94330: ST_TO_ADDR
// if tmp < k then
94331: LD_VAR 0 14
94335: PUSH
94336: LD_VAR 0 9
94340: LESS
94341: IFFALSE 94353
// k := tmp ;
94343: LD_ADDR_VAR 0 9
94347: PUSH
94348: LD_VAR 0 14
94352: ST_TO_ADDR
// for j = 1 to k do
94353: LD_ADDR_VAR 0 8
94357: PUSH
94358: DOUBLE
94359: LD_INT 1
94361: DEC
94362: ST_TO_ADDR
94363: LD_VAR 0 9
94367: PUSH
94368: FOR_TO
94369: IFFALSE 94457
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
94371: LD_VAR 0 14
94375: PUSH
94376: LD_VAR 0 8
94380: ARRAY
94381: PUSH
94382: LD_VAR 0 14
94386: PPUSH
94387: LD_INT 58
94389: PUSH
94390: EMPTY
94391: LIST
94392: PPUSH
94393: CALL_OW 72
94397: IN
94398: NOT
94399: IFFALSE 94455
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
94401: LD_VAR 0 4
94405: PUSH
94406: LD_VAR 0 7
94410: ARRAY
94411: PPUSH
94412: LD_VAR 0 14
94416: PUSH
94417: LD_VAR 0 8
94421: ARRAY
94422: PPUSH
94423: CALL_OW 115
// attacking := true ;
94427: LD_ADDR_VAR 0 29
94431: PUSH
94432: LD_INT 1
94434: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
94435: LD_VAR 0 4
94439: PUSH
94440: LD_VAR 0 7
94444: ARRAY
94445: PPUSH
94446: LD_INT 71
94448: PPUSH
94449: CALL_OW 109
// continue ;
94453: GO 94368
// end ; end ;
94455: GO 94368
94457: POP
94458: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
94459: LD_VAR 0 4
94463: PUSH
94464: LD_VAR 0 7
94468: ARRAY
94469: PPUSH
94470: CALL_OW 257
94474: PUSH
94475: LD_INT 8
94477: EQUAL
94478: PUSH
94479: LD_VAR 0 4
94483: PUSH
94484: LD_VAR 0 7
94488: ARRAY
94489: PPUSH
94490: CALL_OW 264
94494: PUSH
94495: LD_INT 28
94497: PUSH
94498: LD_INT 45
94500: PUSH
94501: LD_INT 7
94503: PUSH
94504: LD_INT 47
94506: PUSH
94507: EMPTY
94508: LIST
94509: LIST
94510: LIST
94511: LIST
94512: IN
94513: OR
94514: IFFALSE 94770
// begin attacking := false ;
94516: LD_ADDR_VAR 0 29
94520: PUSH
94521: LD_INT 0
94523: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
94524: LD_VAR 0 14
94528: PUSH
94529: LD_INT 1
94531: ARRAY
94532: PPUSH
94533: CALL_OW 266
94537: PUSH
94538: LD_INT 32
94540: PUSH
94541: LD_INT 31
94543: PUSH
94544: LD_INT 33
94546: PUSH
94547: LD_INT 4
94549: PUSH
94550: LD_INT 5
94552: PUSH
94553: EMPTY
94554: LIST
94555: LIST
94556: LIST
94557: LIST
94558: LIST
94559: IN
94560: IFFALSE 94746
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
94562: LD_ADDR_VAR 0 9
94566: PUSH
94567: LD_VAR 0 14
94571: PUSH
94572: LD_INT 1
94574: ARRAY
94575: PPUSH
94576: CALL_OW 266
94580: PPUSH
94581: LD_VAR 0 14
94585: PUSH
94586: LD_INT 1
94588: ARRAY
94589: PPUSH
94590: CALL_OW 250
94594: PPUSH
94595: LD_VAR 0 14
94599: PUSH
94600: LD_INT 1
94602: ARRAY
94603: PPUSH
94604: CALL_OW 251
94608: PPUSH
94609: LD_VAR 0 14
94613: PUSH
94614: LD_INT 1
94616: ARRAY
94617: PPUSH
94618: CALL_OW 254
94622: PPUSH
94623: LD_VAR 0 14
94627: PUSH
94628: LD_INT 1
94630: ARRAY
94631: PPUSH
94632: CALL_OW 248
94636: PPUSH
94637: LD_INT 0
94639: PPUSH
94640: CALL 26659 0 6
94644: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
94645: LD_ADDR_VAR 0 8
94649: PUSH
94650: LD_VAR 0 4
94654: PUSH
94655: LD_VAR 0 7
94659: ARRAY
94660: PPUSH
94661: LD_VAR 0 9
94665: PPUSH
94666: CALL 45329 0 2
94670: ST_TO_ADDR
// if j then
94671: LD_VAR 0 8
94675: IFFALSE 94744
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
94677: LD_VAR 0 8
94681: PUSH
94682: LD_INT 1
94684: ARRAY
94685: PPUSH
94686: LD_VAR 0 8
94690: PUSH
94691: LD_INT 2
94693: ARRAY
94694: PPUSH
94695: CALL_OW 488
94699: IFFALSE 94744
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
94701: LD_VAR 0 4
94705: PUSH
94706: LD_VAR 0 7
94710: ARRAY
94711: PPUSH
94712: LD_VAR 0 8
94716: PUSH
94717: LD_INT 1
94719: ARRAY
94720: PPUSH
94721: LD_VAR 0 8
94725: PUSH
94726: LD_INT 2
94728: ARRAY
94729: PPUSH
94730: CALL_OW 116
// attacking := true ;
94734: LD_ADDR_VAR 0 29
94738: PUSH
94739: LD_INT 1
94741: ST_TO_ADDR
// continue ;
94742: GO 92117
// end ; end else
94744: GO 94770
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
94746: LD_VAR 0 4
94750: PUSH
94751: LD_VAR 0 7
94755: ARRAY
94756: PPUSH
94757: LD_VAR 0 14
94761: PUSH
94762: LD_INT 1
94764: ARRAY
94765: PPUSH
94766: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
94770: LD_VAR 0 4
94774: PUSH
94775: LD_VAR 0 7
94779: ARRAY
94780: PPUSH
94781: CALL_OW 265
94785: PUSH
94786: LD_INT 11
94788: EQUAL
94789: IFFALSE 95067
// begin k := 10 ;
94791: LD_ADDR_VAR 0 9
94795: PUSH
94796: LD_INT 10
94798: ST_TO_ADDR
// x := 0 ;
94799: LD_ADDR_VAR 0 10
94803: PUSH
94804: LD_INT 0
94806: ST_TO_ADDR
// if tmp < k then
94807: LD_VAR 0 14
94811: PUSH
94812: LD_VAR 0 9
94816: LESS
94817: IFFALSE 94829
// k := tmp ;
94819: LD_ADDR_VAR 0 9
94823: PUSH
94824: LD_VAR 0 14
94828: ST_TO_ADDR
// for j = k downto 1 do
94829: LD_ADDR_VAR 0 8
94833: PUSH
94834: DOUBLE
94835: LD_VAR 0 9
94839: INC
94840: ST_TO_ADDR
94841: LD_INT 1
94843: PUSH
94844: FOR_DOWNTO
94845: IFFALSE 94920
// begin if GetType ( tmp [ j ] ) = unit_human then
94847: LD_VAR 0 14
94851: PUSH
94852: LD_VAR 0 8
94856: ARRAY
94857: PPUSH
94858: CALL_OW 247
94862: PUSH
94863: LD_INT 1
94865: EQUAL
94866: IFFALSE 94918
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
94868: LD_VAR 0 4
94872: PUSH
94873: LD_VAR 0 7
94877: ARRAY
94878: PPUSH
94879: LD_VAR 0 14
94883: PUSH
94884: LD_VAR 0 8
94888: ARRAY
94889: PPUSH
94890: CALL 45600 0 2
// x := tmp [ j ] ;
94894: LD_ADDR_VAR 0 10
94898: PUSH
94899: LD_VAR 0 14
94903: PUSH
94904: LD_VAR 0 8
94908: ARRAY
94909: ST_TO_ADDR
// attacking := true ;
94910: LD_ADDR_VAR 0 29
94914: PUSH
94915: LD_INT 1
94917: ST_TO_ADDR
// end ; end ;
94918: GO 94844
94920: POP
94921: POP
// if not x then
94922: LD_VAR 0 10
94926: NOT
94927: IFFALSE 95067
// begin attacking := true ;
94929: LD_ADDR_VAR 0 29
94933: PUSH
94934: LD_INT 1
94936: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
94937: LD_VAR 0 4
94941: PUSH
94942: LD_VAR 0 7
94946: ARRAY
94947: PPUSH
94948: CALL_OW 250
94952: PPUSH
94953: LD_VAR 0 4
94957: PUSH
94958: LD_VAR 0 7
94962: ARRAY
94963: PPUSH
94964: CALL_OW 251
94968: PPUSH
94969: CALL_OW 546
94973: PUSH
94974: LD_INT 2
94976: ARRAY
94977: PUSH
94978: LD_VAR 0 14
94982: PUSH
94983: LD_INT 1
94985: ARRAY
94986: PPUSH
94987: CALL_OW 250
94991: PPUSH
94992: LD_VAR 0 14
94996: PUSH
94997: LD_INT 1
94999: ARRAY
95000: PPUSH
95001: CALL_OW 251
95005: PPUSH
95006: CALL_OW 546
95010: PUSH
95011: LD_INT 2
95013: ARRAY
95014: EQUAL
95015: IFFALSE 95043
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
95017: LD_VAR 0 4
95021: PUSH
95022: LD_VAR 0 7
95026: ARRAY
95027: PPUSH
95028: LD_VAR 0 14
95032: PUSH
95033: LD_INT 1
95035: ARRAY
95036: PPUSH
95037: CALL 45600 0 2
95041: GO 95067
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
95043: LD_VAR 0 4
95047: PUSH
95048: LD_VAR 0 7
95052: ARRAY
95053: PPUSH
95054: LD_VAR 0 14
95058: PUSH
95059: LD_INT 1
95061: ARRAY
95062: PPUSH
95063: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
95067: LD_VAR 0 4
95071: PUSH
95072: LD_VAR 0 7
95076: ARRAY
95077: PPUSH
95078: CALL_OW 264
95082: PUSH
95083: LD_INT 29
95085: EQUAL
95086: IFFALSE 95452
// begin if WantsToAttack ( group [ i ] ) in bombed then
95088: LD_VAR 0 4
95092: PUSH
95093: LD_VAR 0 7
95097: ARRAY
95098: PPUSH
95099: CALL_OW 319
95103: PUSH
95104: LD_VAR 0 28
95108: IN
95109: IFFALSE 95113
// continue ;
95111: GO 92117
// k := 8 ;
95113: LD_ADDR_VAR 0 9
95117: PUSH
95118: LD_INT 8
95120: ST_TO_ADDR
// x := 0 ;
95121: LD_ADDR_VAR 0 10
95125: PUSH
95126: LD_INT 0
95128: ST_TO_ADDR
// if tmp < k then
95129: LD_VAR 0 14
95133: PUSH
95134: LD_VAR 0 9
95138: LESS
95139: IFFALSE 95151
// k := tmp ;
95141: LD_ADDR_VAR 0 9
95145: PUSH
95146: LD_VAR 0 14
95150: ST_TO_ADDR
// for j = 1 to k do
95151: LD_ADDR_VAR 0 8
95155: PUSH
95156: DOUBLE
95157: LD_INT 1
95159: DEC
95160: ST_TO_ADDR
95161: LD_VAR 0 9
95165: PUSH
95166: FOR_TO
95167: IFFALSE 95299
// begin if GetType ( tmp [ j ] ) = unit_building then
95169: LD_VAR 0 14
95173: PUSH
95174: LD_VAR 0 8
95178: ARRAY
95179: PPUSH
95180: CALL_OW 247
95184: PUSH
95185: LD_INT 3
95187: EQUAL
95188: IFFALSE 95297
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
95190: LD_VAR 0 14
95194: PUSH
95195: LD_VAR 0 8
95199: ARRAY
95200: PUSH
95201: LD_VAR 0 28
95205: IN
95206: NOT
95207: PUSH
95208: LD_VAR 0 14
95212: PUSH
95213: LD_VAR 0 8
95217: ARRAY
95218: PPUSH
95219: CALL_OW 313
95223: AND
95224: IFFALSE 95297
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
95226: LD_VAR 0 4
95230: PUSH
95231: LD_VAR 0 7
95235: ARRAY
95236: PPUSH
95237: LD_VAR 0 14
95241: PUSH
95242: LD_VAR 0 8
95246: ARRAY
95247: PPUSH
95248: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
95252: LD_ADDR_VAR 0 28
95256: PUSH
95257: LD_VAR 0 28
95261: PPUSH
95262: LD_VAR 0 28
95266: PUSH
95267: LD_INT 1
95269: PLUS
95270: PPUSH
95271: LD_VAR 0 14
95275: PUSH
95276: LD_VAR 0 8
95280: ARRAY
95281: PPUSH
95282: CALL_OW 1
95286: ST_TO_ADDR
// attacking := true ;
95287: LD_ADDR_VAR 0 29
95291: PUSH
95292: LD_INT 1
95294: ST_TO_ADDR
// break ;
95295: GO 95299
// end ; end ;
95297: GO 95166
95299: POP
95300: POP
// if not attacking and f_attack_depot then
95301: LD_VAR 0 29
95305: NOT
95306: PUSH
95307: LD_VAR 0 25
95311: AND
95312: IFFALSE 95407
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
95314: LD_ADDR_VAR 0 13
95318: PUSH
95319: LD_VAR 0 14
95323: PPUSH
95324: LD_INT 2
95326: PUSH
95327: LD_INT 30
95329: PUSH
95330: LD_INT 0
95332: PUSH
95333: EMPTY
95334: LIST
95335: LIST
95336: PUSH
95337: LD_INT 30
95339: PUSH
95340: LD_INT 1
95342: PUSH
95343: EMPTY
95344: LIST
95345: LIST
95346: PUSH
95347: EMPTY
95348: LIST
95349: LIST
95350: LIST
95351: PPUSH
95352: CALL_OW 72
95356: ST_TO_ADDR
// if z then
95357: LD_VAR 0 13
95361: IFFALSE 95407
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
95363: LD_VAR 0 4
95367: PUSH
95368: LD_VAR 0 7
95372: ARRAY
95373: PPUSH
95374: LD_VAR 0 13
95378: PPUSH
95379: LD_VAR 0 4
95383: PUSH
95384: LD_VAR 0 7
95388: ARRAY
95389: PPUSH
95390: CALL_OW 74
95394: PPUSH
95395: CALL_OW 115
// attacking := true ;
95399: LD_ADDR_VAR 0 29
95403: PUSH
95404: LD_INT 1
95406: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
95407: LD_VAR 0 4
95411: PUSH
95412: LD_VAR 0 7
95416: ARRAY
95417: PPUSH
95418: CALL_OW 256
95422: PUSH
95423: LD_INT 500
95425: LESS
95426: IFFALSE 95452
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
95428: LD_VAR 0 4
95432: PUSH
95433: LD_VAR 0 7
95437: ARRAY
95438: PPUSH
95439: LD_VAR 0 14
95443: PUSH
95444: LD_INT 1
95446: ARRAY
95447: PPUSH
95448: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
95452: LD_VAR 0 4
95456: PUSH
95457: LD_VAR 0 7
95461: ARRAY
95462: PPUSH
95463: CALL_OW 264
95467: PUSH
95468: LD_INT 49
95470: EQUAL
95471: IFFALSE 95592
// begin if not HasTask ( group [ i ] ) then
95473: LD_VAR 0 4
95477: PUSH
95478: LD_VAR 0 7
95482: ARRAY
95483: PPUSH
95484: CALL_OW 314
95488: NOT
95489: IFFALSE 95592
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
95491: LD_ADDR_VAR 0 9
95495: PUSH
95496: LD_INT 81
95498: PUSH
95499: LD_VAR 0 4
95503: PUSH
95504: LD_VAR 0 7
95508: ARRAY
95509: PPUSH
95510: CALL_OW 255
95514: PUSH
95515: EMPTY
95516: LIST
95517: LIST
95518: PPUSH
95519: CALL_OW 69
95523: PPUSH
95524: LD_VAR 0 4
95528: PUSH
95529: LD_VAR 0 7
95533: ARRAY
95534: PPUSH
95535: CALL_OW 74
95539: ST_TO_ADDR
// if k then
95540: LD_VAR 0 9
95544: IFFALSE 95592
// if GetDistUnits ( group [ i ] , k ) > 10 then
95546: LD_VAR 0 4
95550: PUSH
95551: LD_VAR 0 7
95555: ARRAY
95556: PPUSH
95557: LD_VAR 0 9
95561: PPUSH
95562: CALL_OW 296
95566: PUSH
95567: LD_INT 10
95569: GREATER
95570: IFFALSE 95592
// ComMoveUnit ( group [ i ] , k ) ;
95572: LD_VAR 0 4
95576: PUSH
95577: LD_VAR 0 7
95581: ARRAY
95582: PPUSH
95583: LD_VAR 0 9
95587: PPUSH
95588: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
95592: LD_VAR 0 4
95596: PUSH
95597: LD_VAR 0 7
95601: ARRAY
95602: PPUSH
95603: CALL_OW 256
95607: PUSH
95608: LD_INT 250
95610: LESS
95611: PUSH
95612: LD_VAR 0 4
95616: PUSH
95617: LD_VAR 0 7
95621: ARRAY
95622: PUSH
95623: LD_INT 21
95625: PUSH
95626: LD_INT 2
95628: PUSH
95629: EMPTY
95630: LIST
95631: LIST
95632: PUSH
95633: LD_INT 23
95635: PUSH
95636: LD_INT 2
95638: PUSH
95639: EMPTY
95640: LIST
95641: LIST
95642: PUSH
95643: EMPTY
95644: LIST
95645: LIST
95646: PPUSH
95647: CALL_OW 69
95651: IN
95652: AND
95653: IFFALSE 95778
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
95655: LD_ADDR_VAR 0 9
95659: PUSH
95660: LD_OWVAR 3
95664: PUSH
95665: LD_VAR 0 4
95669: PUSH
95670: LD_VAR 0 7
95674: ARRAY
95675: DIFF
95676: PPUSH
95677: LD_VAR 0 4
95681: PUSH
95682: LD_VAR 0 7
95686: ARRAY
95687: PPUSH
95688: CALL_OW 74
95692: ST_TO_ADDR
// if not k then
95693: LD_VAR 0 9
95697: NOT
95698: IFFALSE 95702
// continue ;
95700: GO 92117
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
95702: LD_VAR 0 9
95706: PUSH
95707: LD_INT 81
95709: PUSH
95710: LD_VAR 0 4
95714: PUSH
95715: LD_VAR 0 7
95719: ARRAY
95720: PPUSH
95721: CALL_OW 255
95725: PUSH
95726: EMPTY
95727: LIST
95728: LIST
95729: PPUSH
95730: CALL_OW 69
95734: IN
95735: PUSH
95736: LD_VAR 0 9
95740: PPUSH
95741: LD_VAR 0 4
95745: PUSH
95746: LD_VAR 0 7
95750: ARRAY
95751: PPUSH
95752: CALL_OW 296
95756: PUSH
95757: LD_INT 5
95759: LESS
95760: AND
95761: IFFALSE 95778
// ComAutodestruct ( group [ i ] ) ;
95763: LD_VAR 0 4
95767: PUSH
95768: LD_VAR 0 7
95772: ARRAY
95773: PPUSH
95774: CALL 45498 0 1
// end ; if f_attack_depot then
95778: LD_VAR 0 25
95782: IFFALSE 95894
// begin k := 6 ;
95784: LD_ADDR_VAR 0 9
95788: PUSH
95789: LD_INT 6
95791: ST_TO_ADDR
// if tmp < k then
95792: LD_VAR 0 14
95796: PUSH
95797: LD_VAR 0 9
95801: LESS
95802: IFFALSE 95814
// k := tmp ;
95804: LD_ADDR_VAR 0 9
95808: PUSH
95809: LD_VAR 0 14
95813: ST_TO_ADDR
// for j = 1 to k do
95814: LD_ADDR_VAR 0 8
95818: PUSH
95819: DOUBLE
95820: LD_INT 1
95822: DEC
95823: ST_TO_ADDR
95824: LD_VAR 0 9
95828: PUSH
95829: FOR_TO
95830: IFFALSE 95892
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
95832: LD_VAR 0 8
95836: PPUSH
95837: CALL_OW 266
95841: PUSH
95842: LD_INT 0
95844: PUSH
95845: LD_INT 1
95847: PUSH
95848: EMPTY
95849: LIST
95850: LIST
95851: IN
95852: IFFALSE 95890
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
95854: LD_VAR 0 4
95858: PUSH
95859: LD_VAR 0 7
95863: ARRAY
95864: PPUSH
95865: LD_VAR 0 14
95869: PUSH
95870: LD_VAR 0 8
95874: ARRAY
95875: PPUSH
95876: CALL_OW 115
// attacking := true ;
95880: LD_ADDR_VAR 0 29
95884: PUSH
95885: LD_INT 1
95887: ST_TO_ADDR
// break ;
95888: GO 95892
// end ;
95890: GO 95829
95892: POP
95893: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
95894: LD_VAR 0 4
95898: PUSH
95899: LD_VAR 0 7
95903: ARRAY
95904: PPUSH
95905: CALL_OW 302
95909: PUSH
95910: LD_VAR 0 29
95914: NOT
95915: AND
95916: IFFALSE 96238
// begin if GetTag ( group [ i ] ) = 71 then
95918: LD_VAR 0 4
95922: PUSH
95923: LD_VAR 0 7
95927: ARRAY
95928: PPUSH
95929: CALL_OW 110
95933: PUSH
95934: LD_INT 71
95936: EQUAL
95937: IFFALSE 95978
// begin if HasTask ( group [ i ] ) then
95939: LD_VAR 0 4
95943: PUSH
95944: LD_VAR 0 7
95948: ARRAY
95949: PPUSH
95950: CALL_OW 314
95954: IFFALSE 95960
// continue else
95956: GO 92117
95958: GO 95978
// SetTag ( group [ i ] , 0 ) ;
95960: LD_VAR 0 4
95964: PUSH
95965: LD_VAR 0 7
95969: ARRAY
95970: PPUSH
95971: LD_INT 0
95973: PPUSH
95974: CALL_OW 109
// end ; k := 8 ;
95978: LD_ADDR_VAR 0 9
95982: PUSH
95983: LD_INT 8
95985: ST_TO_ADDR
// x := 0 ;
95986: LD_ADDR_VAR 0 10
95990: PUSH
95991: LD_INT 0
95993: ST_TO_ADDR
// if tmp < k then
95994: LD_VAR 0 14
95998: PUSH
95999: LD_VAR 0 9
96003: LESS
96004: IFFALSE 96016
// k := tmp ;
96006: LD_ADDR_VAR 0 9
96010: PUSH
96011: LD_VAR 0 14
96015: ST_TO_ADDR
// for j = 1 to k do
96016: LD_ADDR_VAR 0 8
96020: PUSH
96021: DOUBLE
96022: LD_INT 1
96024: DEC
96025: ST_TO_ADDR
96026: LD_VAR 0 9
96030: PUSH
96031: FOR_TO
96032: IFFALSE 96130
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
96034: LD_VAR 0 14
96038: PUSH
96039: LD_VAR 0 8
96043: ARRAY
96044: PPUSH
96045: CALL_OW 247
96049: PUSH
96050: LD_INT 1
96052: EQUAL
96053: PUSH
96054: LD_VAR 0 14
96058: PUSH
96059: LD_VAR 0 8
96063: ARRAY
96064: PPUSH
96065: CALL_OW 256
96069: PUSH
96070: LD_INT 250
96072: LESS
96073: PUSH
96074: LD_VAR 0 20
96078: AND
96079: PUSH
96080: LD_VAR 0 20
96084: NOT
96085: PUSH
96086: LD_VAR 0 14
96090: PUSH
96091: LD_VAR 0 8
96095: ARRAY
96096: PPUSH
96097: CALL_OW 256
96101: PUSH
96102: LD_INT 250
96104: GREATEREQUAL
96105: AND
96106: OR
96107: AND
96108: IFFALSE 96128
// begin x := tmp [ j ] ;
96110: LD_ADDR_VAR 0 10
96114: PUSH
96115: LD_VAR 0 14
96119: PUSH
96120: LD_VAR 0 8
96124: ARRAY
96125: ST_TO_ADDR
// break ;
96126: GO 96130
// end ;
96128: GO 96031
96130: POP
96131: POP
// if x then
96132: LD_VAR 0 10
96136: IFFALSE 96160
// ComAttackUnit ( group [ i ] , x ) else
96138: LD_VAR 0 4
96142: PUSH
96143: LD_VAR 0 7
96147: ARRAY
96148: PPUSH
96149: LD_VAR 0 10
96153: PPUSH
96154: CALL_OW 115
96158: GO 96184
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
96160: LD_VAR 0 4
96164: PUSH
96165: LD_VAR 0 7
96169: ARRAY
96170: PPUSH
96171: LD_VAR 0 14
96175: PUSH
96176: LD_INT 1
96178: ARRAY
96179: PPUSH
96180: CALL_OW 115
// if not HasTask ( group [ i ] ) then
96184: LD_VAR 0 4
96188: PUSH
96189: LD_VAR 0 7
96193: ARRAY
96194: PPUSH
96195: CALL_OW 314
96199: NOT
96200: IFFALSE 96238
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
96202: LD_VAR 0 4
96206: PUSH
96207: LD_VAR 0 7
96211: ARRAY
96212: PPUSH
96213: LD_VAR 0 14
96217: PPUSH
96218: LD_VAR 0 4
96222: PUSH
96223: LD_VAR 0 7
96227: ARRAY
96228: PPUSH
96229: CALL_OW 74
96233: PPUSH
96234: CALL_OW 115
// end ; end ; end ;
96238: GO 92117
96240: POP
96241: POP
// wait ( 0 0$2 ) ;
96242: LD_INT 70
96244: PPUSH
96245: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
96249: LD_VAR 0 4
96253: NOT
96254: PUSH
96255: LD_VAR 0 4
96259: PUSH
96260: EMPTY
96261: EQUAL
96262: OR
96263: PUSH
96264: LD_INT 81
96266: PUSH
96267: LD_VAR 0 35
96271: PUSH
96272: EMPTY
96273: LIST
96274: LIST
96275: PPUSH
96276: CALL_OW 69
96280: NOT
96281: OR
96282: IFFALSE 92102
// end ;
96284: LD_VAR 0 2
96288: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
96289: LD_INT 0
96291: PPUSH
96292: PPUSH
96293: PPUSH
96294: PPUSH
96295: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
96296: LD_VAR 0 1
96300: NOT
96301: PUSH
96302: LD_EXP 64
96306: PUSH
96307: LD_VAR 0 1
96311: ARRAY
96312: NOT
96313: OR
96314: PUSH
96315: LD_VAR 0 2
96319: NOT
96320: OR
96321: PUSH
96322: LD_VAR 0 3
96326: NOT
96327: OR
96328: IFFALSE 96332
// exit ;
96330: GO 96845
// side := mc_sides [ base ] ;
96332: LD_ADDR_VAR 0 6
96336: PUSH
96337: LD_EXP 90
96341: PUSH
96342: LD_VAR 0 1
96346: ARRAY
96347: ST_TO_ADDR
// if not side then
96348: LD_VAR 0 6
96352: NOT
96353: IFFALSE 96357
// exit ;
96355: GO 96845
// for i in solds do
96357: LD_ADDR_VAR 0 7
96361: PUSH
96362: LD_VAR 0 2
96366: PUSH
96367: FOR_IN
96368: IFFALSE 96429
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
96370: LD_VAR 0 7
96374: PPUSH
96375: CALL_OW 310
96379: PPUSH
96380: CALL_OW 266
96384: PUSH
96385: LD_INT 32
96387: PUSH
96388: LD_INT 31
96390: PUSH
96391: EMPTY
96392: LIST
96393: LIST
96394: IN
96395: IFFALSE 96415
// solds := solds diff i else
96397: LD_ADDR_VAR 0 2
96401: PUSH
96402: LD_VAR 0 2
96406: PUSH
96407: LD_VAR 0 7
96411: DIFF
96412: ST_TO_ADDR
96413: GO 96427
// SetTag ( i , 18 ) ;
96415: LD_VAR 0 7
96419: PPUSH
96420: LD_INT 18
96422: PPUSH
96423: CALL_OW 109
96427: GO 96367
96429: POP
96430: POP
// if not solds then
96431: LD_VAR 0 2
96435: NOT
96436: IFFALSE 96440
// exit ;
96438: GO 96845
// repeat wait ( 0 0$1 ) ;
96440: LD_INT 35
96442: PPUSH
96443: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
96447: LD_ADDR_VAR 0 5
96451: PUSH
96452: LD_VAR 0 6
96456: PPUSH
96457: LD_VAR 0 3
96461: PPUSH
96462: CALL 15213 0 2
96466: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
96467: LD_EXP 64
96471: PUSH
96472: LD_VAR 0 1
96476: ARRAY
96477: NOT
96478: PUSH
96479: LD_EXP 64
96483: PUSH
96484: LD_VAR 0 1
96488: ARRAY
96489: PUSH
96490: EMPTY
96491: EQUAL
96492: OR
96493: IFFALSE 96530
// begin for i in solds do
96495: LD_ADDR_VAR 0 7
96499: PUSH
96500: LD_VAR 0 2
96504: PUSH
96505: FOR_IN
96506: IFFALSE 96519
// ComStop ( i ) ;
96508: LD_VAR 0 7
96512: PPUSH
96513: CALL_OW 141
96517: GO 96505
96519: POP
96520: POP
// solds := [ ] ;
96521: LD_ADDR_VAR 0 2
96525: PUSH
96526: EMPTY
96527: ST_TO_ADDR
// exit ;
96528: GO 96845
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
96530: LD_VAR 0 5
96534: NOT
96535: PUSH
96536: LD_VAR 0 5
96540: PUSH
96541: LD_INT 3
96543: GREATER
96544: OR
96545: PUSH
96546: LD_EXP 86
96550: PUSH
96551: LD_VAR 0 1
96555: ARRAY
96556: OR
96557: IFFALSE 96598
// begin for i in solds do
96559: LD_ADDR_VAR 0 7
96563: PUSH
96564: LD_VAR 0 2
96568: PUSH
96569: FOR_IN
96570: IFFALSE 96594
// if HasTask ( i ) then
96572: LD_VAR 0 7
96576: PPUSH
96577: CALL_OW 314
96581: IFFALSE 96592
// ComStop ( i ) ;
96583: LD_VAR 0 7
96587: PPUSH
96588: CALL_OW 141
96592: GO 96569
96594: POP
96595: POP
// break ;
96596: GO 96833
// end ; for i in solds do
96598: LD_ADDR_VAR 0 7
96602: PUSH
96603: LD_VAR 0 2
96607: PUSH
96608: FOR_IN
96609: IFFALSE 96825
// begin if IsInUnit ( i ) then
96611: LD_VAR 0 7
96615: PPUSH
96616: CALL_OW 310
96620: IFFALSE 96631
// ComExitBuilding ( i ) ;
96622: LD_VAR 0 7
96626: PPUSH
96627: CALL_OW 122
// if GetLives ( i ) > 333 then
96631: LD_VAR 0 7
96635: PPUSH
96636: CALL_OW 256
96640: PUSH
96641: LD_INT 333
96643: GREATER
96644: IFFALSE 96672
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
96646: LD_VAR 0 7
96650: PPUSH
96651: LD_VAR 0 5
96655: PPUSH
96656: LD_VAR 0 7
96660: PPUSH
96661: CALL_OW 74
96665: PPUSH
96666: CALL_OW 115
96670: GO 96823
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
96672: LD_ADDR_VAR 0 8
96676: PUSH
96677: LD_EXP 64
96681: PUSH
96682: LD_VAR 0 1
96686: ARRAY
96687: PPUSH
96688: LD_INT 2
96690: PUSH
96691: LD_INT 30
96693: PUSH
96694: LD_INT 0
96696: PUSH
96697: EMPTY
96698: LIST
96699: LIST
96700: PUSH
96701: LD_INT 30
96703: PUSH
96704: LD_INT 1
96706: PUSH
96707: EMPTY
96708: LIST
96709: LIST
96710: PUSH
96711: LD_INT 30
96713: PUSH
96714: LD_INT 6
96716: PUSH
96717: EMPTY
96718: LIST
96719: LIST
96720: PUSH
96721: EMPTY
96722: LIST
96723: LIST
96724: LIST
96725: LIST
96726: PPUSH
96727: CALL_OW 72
96731: PPUSH
96732: LD_VAR 0 7
96736: PPUSH
96737: CALL_OW 74
96741: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
96742: LD_VAR 0 7
96746: PPUSH
96747: LD_VAR 0 8
96751: PPUSH
96752: CALL_OW 250
96756: PPUSH
96757: LD_INT 3
96759: PPUSH
96760: LD_INT 5
96762: PPUSH
96763: CALL_OW 272
96767: PPUSH
96768: LD_VAR 0 8
96772: PPUSH
96773: CALL_OW 251
96777: PPUSH
96778: LD_INT 3
96780: PPUSH
96781: LD_INT 5
96783: PPUSH
96784: CALL_OW 273
96788: PPUSH
96789: CALL_OW 111
// SetTag ( i , 0 ) ;
96793: LD_VAR 0 7
96797: PPUSH
96798: LD_INT 0
96800: PPUSH
96801: CALL_OW 109
// solds := solds diff i ;
96805: LD_ADDR_VAR 0 2
96809: PUSH
96810: LD_VAR 0 2
96814: PUSH
96815: LD_VAR 0 7
96819: DIFF
96820: ST_TO_ADDR
// continue ;
96821: GO 96608
// end ; end ;
96823: GO 96608
96825: POP
96826: POP
// until solds ;
96827: LD_VAR 0 2
96831: IFFALSE 96440
// MC_Reset ( base , 18 ) ;
96833: LD_VAR 0 1
96837: PPUSH
96838: LD_INT 18
96840: PPUSH
96841: CALL 54008 0 2
// end ;
96845: LD_VAR 0 4
96849: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
96850: LD_INT 0
96852: PPUSH
96853: PPUSH
96854: PPUSH
96855: PPUSH
96856: PPUSH
96857: PPUSH
96858: PPUSH
96859: PPUSH
96860: PPUSH
96861: PPUSH
96862: PPUSH
96863: PPUSH
96864: PPUSH
96865: PPUSH
96866: PPUSH
96867: PPUSH
96868: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
96869: LD_ADDR_VAR 0 13
96873: PUSH
96874: LD_EXP 64
96878: PUSH
96879: LD_VAR 0 1
96883: ARRAY
96884: PPUSH
96885: LD_INT 25
96887: PUSH
96888: LD_INT 3
96890: PUSH
96891: EMPTY
96892: LIST
96893: LIST
96894: PPUSH
96895: CALL_OW 72
96899: ST_TO_ADDR
// if mc_remote_driver [ base ] then
96900: LD_EXP 104
96904: PUSH
96905: LD_VAR 0 1
96909: ARRAY
96910: IFFALSE 96934
// mechs := mechs diff mc_remote_driver [ base ] ;
96912: LD_ADDR_VAR 0 13
96916: PUSH
96917: LD_VAR 0 13
96921: PUSH
96922: LD_EXP 104
96926: PUSH
96927: LD_VAR 0 1
96931: ARRAY
96932: DIFF
96933: ST_TO_ADDR
// for i in mechs do
96934: LD_ADDR_VAR 0 5
96938: PUSH
96939: LD_VAR 0 13
96943: PUSH
96944: FOR_IN
96945: IFFALSE 96980
// if GetTag ( i ) > 0 then
96947: LD_VAR 0 5
96951: PPUSH
96952: CALL_OW 110
96956: PUSH
96957: LD_INT 0
96959: GREATER
96960: IFFALSE 96978
// mechs := mechs diff i ;
96962: LD_ADDR_VAR 0 13
96966: PUSH
96967: LD_VAR 0 13
96971: PUSH
96972: LD_VAR 0 5
96976: DIFF
96977: ST_TO_ADDR
96978: GO 96944
96980: POP
96981: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
96982: LD_ADDR_VAR 0 9
96986: PUSH
96987: LD_EXP 64
96991: PUSH
96992: LD_VAR 0 1
96996: ARRAY
96997: PPUSH
96998: LD_INT 2
97000: PUSH
97001: LD_INT 25
97003: PUSH
97004: LD_INT 1
97006: PUSH
97007: EMPTY
97008: LIST
97009: LIST
97010: PUSH
97011: LD_INT 25
97013: PUSH
97014: LD_INT 5
97016: PUSH
97017: EMPTY
97018: LIST
97019: LIST
97020: PUSH
97021: LD_INT 25
97023: PUSH
97024: LD_INT 8
97026: PUSH
97027: EMPTY
97028: LIST
97029: LIST
97030: PUSH
97031: LD_INT 25
97033: PUSH
97034: LD_INT 9
97036: PUSH
97037: EMPTY
97038: LIST
97039: LIST
97040: PUSH
97041: EMPTY
97042: LIST
97043: LIST
97044: LIST
97045: LIST
97046: LIST
97047: PPUSH
97048: CALL_OW 72
97052: ST_TO_ADDR
// if not defenders and not solds then
97053: LD_VAR 0 2
97057: NOT
97058: PUSH
97059: LD_VAR 0 9
97063: NOT
97064: AND
97065: IFFALSE 97069
// exit ;
97067: GO 98695
// depot_under_attack := false ;
97069: LD_ADDR_VAR 0 17
97073: PUSH
97074: LD_INT 0
97076: ST_TO_ADDR
// sold_defenders := [ ] ;
97077: LD_ADDR_VAR 0 18
97081: PUSH
97082: EMPTY
97083: ST_TO_ADDR
// if mechs then
97084: LD_VAR 0 13
97088: IFFALSE 97217
// for i in defenders do
97090: LD_ADDR_VAR 0 5
97094: PUSH
97095: LD_VAR 0 2
97099: PUSH
97100: FOR_IN
97101: IFFALSE 97215
// begin SetTag ( i , 20 ) ;
97103: LD_VAR 0 5
97107: PPUSH
97108: LD_INT 20
97110: PPUSH
97111: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
97115: LD_VAR 0 5
97119: PPUSH
97120: CALL_OW 263
97124: PUSH
97125: LD_INT 1
97127: EQUAL
97128: PUSH
97129: LD_VAR 0 5
97133: PPUSH
97134: CALL_OW 311
97138: NOT
97139: AND
97140: PUSH
97141: LD_VAR 0 13
97145: AND
97146: IFFALSE 97213
// begin un := mechs [ 1 ] ;
97148: LD_ADDR_VAR 0 11
97152: PUSH
97153: LD_VAR 0 13
97157: PUSH
97158: LD_INT 1
97160: ARRAY
97161: ST_TO_ADDR
// ComExitBuilding ( un ) ;
97162: LD_VAR 0 11
97166: PPUSH
97167: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
97171: LD_VAR 0 11
97175: PPUSH
97176: LD_VAR 0 5
97180: PPUSH
97181: CALL_OW 180
// SetTag ( un , 19 ) ;
97185: LD_VAR 0 11
97189: PPUSH
97190: LD_INT 19
97192: PPUSH
97193: CALL_OW 109
// mechs := mechs diff un ;
97197: LD_ADDR_VAR 0 13
97201: PUSH
97202: LD_VAR 0 13
97206: PUSH
97207: LD_VAR 0 11
97211: DIFF
97212: ST_TO_ADDR
// end ; end ;
97213: GO 97100
97215: POP
97216: POP
// if solds then
97217: LD_VAR 0 9
97221: IFFALSE 97280
// for i in solds do
97223: LD_ADDR_VAR 0 5
97227: PUSH
97228: LD_VAR 0 9
97232: PUSH
97233: FOR_IN
97234: IFFALSE 97278
// if not GetTag ( i ) then
97236: LD_VAR 0 5
97240: PPUSH
97241: CALL_OW 110
97245: NOT
97246: IFFALSE 97276
// begin defenders := defenders union i ;
97248: LD_ADDR_VAR 0 2
97252: PUSH
97253: LD_VAR 0 2
97257: PUSH
97258: LD_VAR 0 5
97262: UNION
97263: ST_TO_ADDR
// SetTag ( i , 18 ) ;
97264: LD_VAR 0 5
97268: PPUSH
97269: LD_INT 18
97271: PPUSH
97272: CALL_OW 109
// end ;
97276: GO 97233
97278: POP
97279: POP
// repeat wait ( 0 0$1 ) ;
97280: LD_INT 35
97282: PPUSH
97283: CALL_OW 67
// enemy := mc_scan [ base ] ;
97287: LD_ADDR_VAR 0 3
97291: PUSH
97292: LD_EXP 87
97296: PUSH
97297: LD_VAR 0 1
97301: ARRAY
97302: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
97303: LD_EXP 64
97307: PUSH
97308: LD_VAR 0 1
97312: ARRAY
97313: NOT
97314: PUSH
97315: LD_EXP 64
97319: PUSH
97320: LD_VAR 0 1
97324: ARRAY
97325: PUSH
97326: EMPTY
97327: EQUAL
97328: OR
97329: IFFALSE 97366
// begin for i in defenders do
97331: LD_ADDR_VAR 0 5
97335: PUSH
97336: LD_VAR 0 2
97340: PUSH
97341: FOR_IN
97342: IFFALSE 97355
// ComStop ( i ) ;
97344: LD_VAR 0 5
97348: PPUSH
97349: CALL_OW 141
97353: GO 97341
97355: POP
97356: POP
// defenders := [ ] ;
97357: LD_ADDR_VAR 0 2
97361: PUSH
97362: EMPTY
97363: ST_TO_ADDR
// exit ;
97364: GO 98695
// end ; for i in defenders do
97366: LD_ADDR_VAR 0 5
97370: PUSH
97371: LD_VAR 0 2
97375: PUSH
97376: FOR_IN
97377: IFFALSE 98195
// begin e := NearestUnitToUnit ( enemy , i ) ;
97379: LD_ADDR_VAR 0 14
97383: PUSH
97384: LD_VAR 0 3
97388: PPUSH
97389: LD_VAR 0 5
97393: PPUSH
97394: CALL_OW 74
97398: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
97399: LD_ADDR_VAR 0 8
97403: PUSH
97404: LD_EXP 64
97408: PUSH
97409: LD_VAR 0 1
97413: ARRAY
97414: PPUSH
97415: LD_INT 2
97417: PUSH
97418: LD_INT 30
97420: PUSH
97421: LD_INT 0
97423: PUSH
97424: EMPTY
97425: LIST
97426: LIST
97427: PUSH
97428: LD_INT 30
97430: PUSH
97431: LD_INT 1
97433: PUSH
97434: EMPTY
97435: LIST
97436: LIST
97437: PUSH
97438: EMPTY
97439: LIST
97440: LIST
97441: LIST
97442: PPUSH
97443: CALL_OW 72
97447: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
97448: LD_ADDR_VAR 0 17
97452: PUSH
97453: LD_VAR 0 8
97457: NOT
97458: PUSH
97459: LD_VAR 0 8
97463: PPUSH
97464: LD_INT 3
97466: PUSH
97467: LD_INT 24
97469: PUSH
97470: LD_INT 600
97472: PUSH
97473: EMPTY
97474: LIST
97475: LIST
97476: PUSH
97477: EMPTY
97478: LIST
97479: LIST
97480: PPUSH
97481: CALL_OW 72
97485: OR
97486: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
97487: LD_VAR 0 5
97491: PPUSH
97492: CALL_OW 247
97496: PUSH
97497: LD_INT 2
97499: DOUBLE
97500: EQUAL
97501: IFTRUE 97505
97503: GO 97901
97505: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
97506: LD_VAR 0 5
97510: PPUSH
97511: CALL_OW 256
97515: PUSH
97516: LD_INT 650
97518: GREATER
97519: PUSH
97520: LD_VAR 0 5
97524: PPUSH
97525: LD_VAR 0 14
97529: PPUSH
97530: CALL_OW 296
97534: PUSH
97535: LD_INT 40
97537: LESS
97538: PUSH
97539: LD_VAR 0 14
97543: PPUSH
97544: LD_EXP 89
97548: PUSH
97549: LD_VAR 0 1
97553: ARRAY
97554: PPUSH
97555: CALL_OW 308
97559: OR
97560: AND
97561: IFFALSE 97683
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
97563: LD_VAR 0 5
97567: PPUSH
97568: CALL_OW 262
97572: PUSH
97573: LD_INT 1
97575: EQUAL
97576: PUSH
97577: LD_VAR 0 5
97581: PPUSH
97582: CALL_OW 261
97586: PUSH
97587: LD_INT 30
97589: LESS
97590: AND
97591: PUSH
97592: LD_VAR 0 8
97596: AND
97597: IFFALSE 97667
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
97599: LD_VAR 0 5
97603: PPUSH
97604: LD_VAR 0 8
97608: PPUSH
97609: LD_VAR 0 5
97613: PPUSH
97614: CALL_OW 74
97618: PPUSH
97619: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
97623: LD_VAR 0 5
97627: PPUSH
97628: LD_VAR 0 8
97632: PPUSH
97633: LD_VAR 0 5
97637: PPUSH
97638: CALL_OW 74
97642: PPUSH
97643: CALL_OW 296
97647: PUSH
97648: LD_INT 6
97650: LESS
97651: IFFALSE 97665
// SetFuel ( i , 100 ) ;
97653: LD_VAR 0 5
97657: PPUSH
97658: LD_INT 100
97660: PPUSH
97661: CALL_OW 240
// end else
97665: GO 97681
// ComAttackUnit ( i , e ) ;
97667: LD_VAR 0 5
97671: PPUSH
97672: LD_VAR 0 14
97676: PPUSH
97677: CALL_OW 115
// end else
97681: GO 97784
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
97683: LD_VAR 0 14
97687: PPUSH
97688: LD_EXP 89
97692: PUSH
97693: LD_VAR 0 1
97697: ARRAY
97698: PPUSH
97699: CALL_OW 308
97703: NOT
97704: PUSH
97705: LD_VAR 0 5
97709: PPUSH
97710: LD_VAR 0 14
97714: PPUSH
97715: CALL_OW 296
97719: PUSH
97720: LD_INT 40
97722: GREATEREQUAL
97723: AND
97724: PUSH
97725: LD_VAR 0 5
97729: PPUSH
97730: CALL_OW 256
97734: PUSH
97735: LD_INT 650
97737: LESSEQUAL
97738: OR
97739: PUSH
97740: LD_VAR 0 5
97744: PPUSH
97745: LD_EXP 88
97749: PUSH
97750: LD_VAR 0 1
97754: ARRAY
97755: PPUSH
97756: CALL_OW 308
97760: NOT
97761: AND
97762: IFFALSE 97784
// ComMoveToArea ( i , mc_parking [ base ] ) ;
97764: LD_VAR 0 5
97768: PPUSH
97769: LD_EXP 88
97773: PUSH
97774: LD_VAR 0 1
97778: ARRAY
97779: PPUSH
97780: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
97784: LD_VAR 0 5
97788: PPUSH
97789: CALL_OW 256
97793: PUSH
97794: LD_INT 998
97796: LESS
97797: PUSH
97798: LD_VAR 0 5
97802: PPUSH
97803: CALL_OW 263
97807: PUSH
97808: LD_INT 1
97810: EQUAL
97811: AND
97812: PUSH
97813: LD_VAR 0 5
97817: PPUSH
97818: CALL_OW 311
97822: AND
97823: PUSH
97824: LD_VAR 0 5
97828: PPUSH
97829: LD_EXP 88
97833: PUSH
97834: LD_VAR 0 1
97838: ARRAY
97839: PPUSH
97840: CALL_OW 308
97844: AND
97845: IFFALSE 97899
// begin mech := IsDrivenBy ( i ) ;
97847: LD_ADDR_VAR 0 10
97851: PUSH
97852: LD_VAR 0 5
97856: PPUSH
97857: CALL_OW 311
97861: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
97862: LD_VAR 0 10
97866: PPUSH
97867: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
97871: LD_VAR 0 10
97875: PPUSH
97876: LD_VAR 0 5
97880: PPUSH
97881: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
97885: LD_VAR 0 10
97889: PPUSH
97890: LD_VAR 0 5
97894: PPUSH
97895: CALL_OW 180
// end ; end ; unit_human :
97899: GO 98166
97901: LD_INT 1
97903: DOUBLE
97904: EQUAL
97905: IFTRUE 97909
97907: GO 98165
97909: POP
// begin b := IsInUnit ( i ) ;
97910: LD_ADDR_VAR 0 19
97914: PUSH
97915: LD_VAR 0 5
97919: PPUSH
97920: CALL_OW 310
97924: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
97925: LD_ADDR_VAR 0 20
97929: PUSH
97930: LD_VAR 0 19
97934: NOT
97935: PUSH
97936: LD_VAR 0 19
97940: PPUSH
97941: CALL_OW 266
97945: PUSH
97946: LD_INT 32
97948: PUSH
97949: LD_INT 31
97951: PUSH
97952: EMPTY
97953: LIST
97954: LIST
97955: IN
97956: OR
97957: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
97958: LD_VAR 0 17
97962: PUSH
97963: LD_VAR 0 2
97967: PPUSH
97968: LD_INT 21
97970: PUSH
97971: LD_INT 2
97973: PUSH
97974: EMPTY
97975: LIST
97976: LIST
97977: PPUSH
97978: CALL_OW 72
97982: PUSH
97983: LD_INT 1
97985: LESSEQUAL
97986: OR
97987: PUSH
97988: LD_VAR 0 20
97992: AND
97993: PUSH
97994: LD_VAR 0 5
97998: PUSH
97999: LD_VAR 0 18
98003: IN
98004: NOT
98005: AND
98006: IFFALSE 98099
// begin if b then
98008: LD_VAR 0 19
98012: IFFALSE 98061
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
98014: LD_VAR 0 19
98018: PPUSH
98019: LD_VAR 0 3
98023: PPUSH
98024: LD_VAR 0 19
98028: PPUSH
98029: CALL_OW 74
98033: PPUSH
98034: CALL_OW 296
98038: PUSH
98039: LD_INT 10
98041: LESS
98042: PUSH
98043: LD_VAR 0 19
98047: PPUSH
98048: CALL_OW 461
98052: PUSH
98053: LD_INT 7
98055: NONEQUAL
98056: AND
98057: IFFALSE 98061
// continue ;
98059: GO 97376
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
98061: LD_ADDR_VAR 0 18
98065: PUSH
98066: LD_VAR 0 18
98070: PPUSH
98071: LD_VAR 0 18
98075: PUSH
98076: LD_INT 1
98078: PLUS
98079: PPUSH
98080: LD_VAR 0 5
98084: PPUSH
98085: CALL_OW 1
98089: ST_TO_ADDR
// ComExitBuilding ( i ) ;
98090: LD_VAR 0 5
98094: PPUSH
98095: CALL_OW 122
// end ; if sold_defenders then
98099: LD_VAR 0 18
98103: IFFALSE 98163
// if i in sold_defenders then
98105: LD_VAR 0 5
98109: PUSH
98110: LD_VAR 0 18
98114: IN
98115: IFFALSE 98163
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
98117: LD_VAR 0 5
98121: PPUSH
98122: CALL_OW 314
98126: NOT
98127: PUSH
98128: LD_VAR 0 5
98132: PPUSH
98133: LD_VAR 0 14
98137: PPUSH
98138: CALL_OW 296
98142: PUSH
98143: LD_INT 30
98145: LESS
98146: AND
98147: IFFALSE 98163
// ComAttackUnit ( i , e ) ;
98149: LD_VAR 0 5
98153: PPUSH
98154: LD_VAR 0 14
98158: PPUSH
98159: CALL_OW 115
// end ; end ; end ;
98163: GO 98166
98165: POP
// if IsDead ( i ) then
98166: LD_VAR 0 5
98170: PPUSH
98171: CALL_OW 301
98175: IFFALSE 98193
// defenders := defenders diff i ;
98177: LD_ADDR_VAR 0 2
98181: PUSH
98182: LD_VAR 0 2
98186: PUSH
98187: LD_VAR 0 5
98191: DIFF
98192: ST_TO_ADDR
// end ;
98193: GO 97376
98195: POP
98196: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
98197: LD_VAR 0 3
98201: NOT
98202: PUSH
98203: LD_VAR 0 2
98207: NOT
98208: OR
98209: PUSH
98210: LD_EXP 64
98214: PUSH
98215: LD_VAR 0 1
98219: ARRAY
98220: NOT
98221: OR
98222: IFFALSE 97280
// MC_Reset ( base , 18 ) ;
98224: LD_VAR 0 1
98228: PPUSH
98229: LD_INT 18
98231: PPUSH
98232: CALL 54008 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
98236: LD_ADDR_VAR 0 2
98240: PUSH
98241: LD_VAR 0 2
98245: PUSH
98246: LD_VAR 0 2
98250: PPUSH
98251: LD_INT 2
98253: PUSH
98254: LD_INT 25
98256: PUSH
98257: LD_INT 1
98259: PUSH
98260: EMPTY
98261: LIST
98262: LIST
98263: PUSH
98264: LD_INT 25
98266: PUSH
98267: LD_INT 5
98269: PUSH
98270: EMPTY
98271: LIST
98272: LIST
98273: PUSH
98274: LD_INT 25
98276: PUSH
98277: LD_INT 8
98279: PUSH
98280: EMPTY
98281: LIST
98282: LIST
98283: PUSH
98284: LD_INT 25
98286: PUSH
98287: LD_INT 9
98289: PUSH
98290: EMPTY
98291: LIST
98292: LIST
98293: PUSH
98294: EMPTY
98295: LIST
98296: LIST
98297: LIST
98298: LIST
98299: LIST
98300: PPUSH
98301: CALL_OW 72
98305: DIFF
98306: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
98307: LD_VAR 0 3
98311: NOT
98312: PUSH
98313: LD_VAR 0 2
98317: PPUSH
98318: LD_INT 21
98320: PUSH
98321: LD_INT 2
98323: PUSH
98324: EMPTY
98325: LIST
98326: LIST
98327: PPUSH
98328: CALL_OW 72
98332: AND
98333: IFFALSE 98671
// begin tmp := FilterByTag ( defenders , 19 ) ;
98335: LD_ADDR_VAR 0 12
98339: PUSH
98340: LD_VAR 0 2
98344: PPUSH
98345: LD_INT 19
98347: PPUSH
98348: CALL 46973 0 2
98352: ST_TO_ADDR
// if tmp then
98353: LD_VAR 0 12
98357: IFFALSE 98427
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
98359: LD_ADDR_VAR 0 12
98363: PUSH
98364: LD_VAR 0 12
98368: PPUSH
98369: LD_INT 25
98371: PUSH
98372: LD_INT 3
98374: PUSH
98375: EMPTY
98376: LIST
98377: LIST
98378: PPUSH
98379: CALL_OW 72
98383: ST_TO_ADDR
// if tmp then
98384: LD_VAR 0 12
98388: IFFALSE 98427
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
98390: LD_ADDR_EXP 76
98394: PUSH
98395: LD_EXP 76
98399: PPUSH
98400: LD_VAR 0 1
98404: PPUSH
98405: LD_EXP 76
98409: PUSH
98410: LD_VAR 0 1
98414: ARRAY
98415: PUSH
98416: LD_VAR 0 12
98420: UNION
98421: PPUSH
98422: CALL_OW 1
98426: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
98427: LD_VAR 0 1
98431: PPUSH
98432: LD_INT 19
98434: PPUSH
98435: CALL 54008 0 2
// repeat wait ( 0 0$1 ) ;
98439: LD_INT 35
98441: PPUSH
98442: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
98446: LD_EXP 64
98450: PUSH
98451: LD_VAR 0 1
98455: ARRAY
98456: NOT
98457: PUSH
98458: LD_EXP 64
98462: PUSH
98463: LD_VAR 0 1
98467: ARRAY
98468: PUSH
98469: EMPTY
98470: EQUAL
98471: OR
98472: IFFALSE 98509
// begin for i in defenders do
98474: LD_ADDR_VAR 0 5
98478: PUSH
98479: LD_VAR 0 2
98483: PUSH
98484: FOR_IN
98485: IFFALSE 98498
// ComStop ( i ) ;
98487: LD_VAR 0 5
98491: PPUSH
98492: CALL_OW 141
98496: GO 98484
98498: POP
98499: POP
// defenders := [ ] ;
98500: LD_ADDR_VAR 0 2
98504: PUSH
98505: EMPTY
98506: ST_TO_ADDR
// exit ;
98507: GO 98695
// end ; for i in defenders do
98509: LD_ADDR_VAR 0 5
98513: PUSH
98514: LD_VAR 0 2
98518: PUSH
98519: FOR_IN
98520: IFFALSE 98609
// begin if not IsInArea ( i , mc_parking [ base ] ) then
98522: LD_VAR 0 5
98526: PPUSH
98527: LD_EXP 88
98531: PUSH
98532: LD_VAR 0 1
98536: ARRAY
98537: PPUSH
98538: CALL_OW 308
98542: NOT
98543: IFFALSE 98567
// ComMoveToArea ( i , mc_parking [ base ] ) else
98545: LD_VAR 0 5
98549: PPUSH
98550: LD_EXP 88
98554: PUSH
98555: LD_VAR 0 1
98559: ARRAY
98560: PPUSH
98561: CALL_OW 113
98565: GO 98607
// if GetControl ( i ) = control_manual then
98567: LD_VAR 0 5
98571: PPUSH
98572: CALL_OW 263
98576: PUSH
98577: LD_INT 1
98579: EQUAL
98580: IFFALSE 98607
// if IsDrivenBy ( i ) then
98582: LD_VAR 0 5
98586: PPUSH
98587: CALL_OW 311
98591: IFFALSE 98607
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
98593: LD_VAR 0 5
98597: PPUSH
98598: CALL_OW 311
98602: PPUSH
98603: CALL_OW 121
// end ;
98607: GO 98519
98609: POP
98610: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
98611: LD_VAR 0 2
98615: PPUSH
98616: LD_INT 95
98618: PUSH
98619: LD_EXP 88
98623: PUSH
98624: LD_VAR 0 1
98628: ARRAY
98629: PUSH
98630: EMPTY
98631: LIST
98632: LIST
98633: PPUSH
98634: CALL_OW 72
98638: PUSH
98639: LD_VAR 0 2
98643: EQUAL
98644: PUSH
98645: LD_EXP 87
98649: PUSH
98650: LD_VAR 0 1
98654: ARRAY
98655: OR
98656: PUSH
98657: LD_EXP 64
98661: PUSH
98662: LD_VAR 0 1
98666: ARRAY
98667: NOT
98668: OR
98669: IFFALSE 98439
// end ; MC_Reset ( base , 19 ) ;
98671: LD_VAR 0 1
98675: PPUSH
98676: LD_INT 19
98678: PPUSH
98679: CALL 54008 0 2
// MC_Reset ( base , 20 ) ;
98683: LD_VAR 0 1
98687: PPUSH
98688: LD_INT 20
98690: PPUSH
98691: CALL 54008 0 2
// end ;
98695: LD_VAR 0 4
98699: RET
