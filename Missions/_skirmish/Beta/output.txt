// export MissionStart ; export southAreaBlocker ; starting begin southAreaBlocker = true ;
   0: LD_ADDR_EXP 2
   4: PUSH
   5: LD_INT 1
   7: ST_TO_ADDR
// ResetFog ;
   8: CALL_OW 335
// AnimateTrees ( true ) ;
  12: LD_INT 1
  14: PPUSH
  15: CALL_OW 573
// RevealFogArea ( 1 , BetaArea ) ;
  19: LD_INT 1
  21: PPUSH
  22: LD_INT 8
  24: PPUSH
  25: CALL_OW 332
// GameType ;
  29: CALL 5644 0 0
// SetBName ( BetaA , beta ) ;
  33: LD_INT 1
  35: PPUSH
  36: LD_STRING beta
  38: PPUSH
  39: CALL_OW 500
// SetBName ( BetaB , beta ) ;
  43: LD_INT 3
  45: PPUSH
  46: LD_STRING beta
  48: PPUSH
  49: CALL_OW 500
// SetResourceType ( GetBase ( BetaA ) , mat_cans , startCrates [ 1 ] ) ;
  53: LD_INT 1
  55: PPUSH
  56: CALL_OW 274
  60: PPUSH
  61: LD_INT 1
  63: PPUSH
  64: LD_EXP 43
  68: PUSH
  69: LD_INT 1
  71: ARRAY
  72: PPUSH
  73: CALL_OW 277
// SetResourceType ( GetBase ( BetaB ) , mat_cans , startCrates [ 2 ] ) ;
  77: LD_INT 3
  79: PPUSH
  80: CALL_OW 274
  84: PPUSH
  85: LD_INT 1
  87: PPUSH
  88: LD_EXP 43
  92: PUSH
  93: LD_INT 2
  95: ARRAY
  96: PPUSH
  97: CALL_OW 277
// PrepareHeroes ;
 101: CALL 2807 0 0
// PrepareBeta ;
 105: CALL 3196 0 0
// HideArea ( 1 , SouthArea ) ;
 109: LD_INT 1
 111: PPUSH
 112: LD_INT 16
 114: PPUSH
 115: CALL_OW 333
// InGameOn ;
 119: CALL_OW 8
// ComHold ( Brighton ) ;
 123: LD_EXP 9
 127: PPUSH
 128: CALL_OW 140
// CenterNowOnUnits ( Brighton ) ;
 132: LD_EXP 9
 136: PPUSH
 137: CALL_OW 87
// ComMoveXY ( Megan , 50 , 42 ) ;
 141: LD_EXP 11
 145: PPUSH
 146: LD_INT 50
 148: PPUSH
 149: LD_INT 42
 151: PPUSH
 152: CALL_OW 111
// repeat wait ( 0 0$1 ) until GetDistUnits ( Megan , Brighton ) < 3 ;
 156: LD_INT 35
 158: PPUSH
 159: CALL_OW 67
 163: LD_EXP 11
 167: PPUSH
 168: LD_EXP 9
 172: PPUSH
 173: CALL_OW 296
 177: PUSH
 178: LD_INT 3
 180: LESS
 181: IFFALSE 156
// ComTurnUnit ( Megan , Brighton ) ;
 183: LD_EXP 11
 187: PPUSH
 188: LD_EXP 9
 192: PPUSH
 193: CALL_OW 119
// Say ( Megan , DMegan-1a ) ;
 197: LD_EXP 11
 201: PPUSH
 202: LD_STRING DMegan-1a
 204: PPUSH
 205: CALL_OW 88
// wait ( 0 0$0.3 ) ;
 209: LD_INT 10
 211: PPUSH
 212: CALL_OW 67
// ComTurnUnit ( Brighton , Megan ) ;
 216: LD_EXP 9
 220: PPUSH
 221: LD_EXP 11
 225: PPUSH
 226: CALL_OW 119
// Say ( Brighton , DBrighton-1a ) ;
 230: LD_EXP 9
 234: PPUSH
 235: LD_STRING DBrighton-1a
 237: PPUSH
 238: CALL_OW 88
// Say ( Megan , DMegan-2a ) ;
 242: LD_EXP 11
 246: PPUSH
 247: LD_STRING DMegan-2a
 249: PPUSH
 250: CALL_OW 88
// Say ( Brighton , DBrighton-2a ) ;
 254: LD_EXP 9
 258: PPUSH
 259: LD_STRING DBrighton-2a
 261: PPUSH
 262: CALL_OW 88
// Say ( Megan , DMegan-3a ) ;
 266: LD_EXP 11
 270: PPUSH
 271: LD_STRING DMegan-3a
 273: PPUSH
 274: CALL_OW 88
// Say ( Brighton , DBrighton-3a ) ;
 278: LD_EXP 9
 282: PPUSH
 283: LD_STRING DBrighton-3a
 285: PPUSH
 286: CALL_OW 88
// Say ( Megan , DMegan-4a ) ;
 290: LD_EXP 11
 294: PPUSH
 295: LD_STRING DMegan-4a
 297: PPUSH
 298: CALL_OW 88
// ComMoveXY ( Megan , 40 , 37 ) ;
 302: LD_EXP 11
 306: PPUSH
 307: LD_INT 40
 309: PPUSH
 310: LD_INT 37
 312: PPUSH
 313: CALL_OW 111
// AddComTurnUnit ( Megan , Brighton ) ;
 317: LD_EXP 11
 321: PPUSH
 322: LD_EXP 9
 326: PPUSH
 327: CALL_OW 179
// ComMoveXY ( Palmer , 50 , 42 ) ;
 331: LD_EXP 10
 335: PPUSH
 336: LD_INT 50
 338: PPUSH
 339: LD_INT 42
 341: PPUSH
 342: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 346: LD_INT 35
 348: PPUSH
 349: CALL_OW 67
// until GetDistUnits ( Brighton , Palmer ) < 6 ;
 353: LD_EXP 9
 357: PPUSH
 358: LD_EXP 10
 362: PPUSH
 363: CALL_OW 296
 367: PUSH
 368: LD_INT 6
 370: LESS
 371: IFFALSE 346
// ComTurnUnit ( Brighton , Palmer ) ;
 373: LD_EXP 9
 377: PPUSH
 378: LD_EXP 10
 382: PPUSH
 383: CALL_OW 119
// ComTurnUnit ( Palmer , Brighton ) ;
 387: LD_EXP 10
 391: PPUSH
 392: LD_EXP 9
 396: PPUSH
 397: CALL_OW 119
// Say ( Megan , DMegan-5a ) ;
 401: LD_EXP 11
 405: PPUSH
 406: LD_STRING DMegan-5a
 408: PPUSH
 409: CALL_OW 88
// Say ( Palmer , DPalmer-1 ) ;
 413: LD_EXP 10
 417: PPUSH
 418: LD_STRING DPalmer-1
 420: PPUSH
 421: CALL_OW 88
// Say ( Brighton , DBrighton-1 ) ;
 425: LD_EXP 9
 429: PPUSH
 430: LD_STRING DBrighton-1
 432: PPUSH
 433: CALL_OW 88
// Say ( Palmer , DPalmer-2 ) ;
 437: LD_EXP 10
 441: PPUSH
 442: LD_STRING DPalmer-2
 444: PPUSH
 445: CALL_OW 88
// Say ( Brighton , DBrighton-2 ) ;
 449: LD_EXP 9
 453: PPUSH
 454: LD_STRING DBrighton-2
 456: PPUSH
 457: CALL_OW 88
// Say ( Palmer , DPalmer-3 ) ;
 461: LD_EXP 10
 465: PPUSH
 466: LD_STRING DPalmer-3
 468: PPUSH
 469: CALL_OW 88
// Say ( Brighton , DBrighton-3 ) ;
 473: LD_EXP 9
 477: PPUSH
 478: LD_STRING DBrighton-3
 480: PPUSH
 481: CALL_OW 88
// Say ( Palmer , DPalmer-4 ) ;
 485: LD_EXP 10
 489: PPUSH
 490: LD_STRING DPalmer-4
 492: PPUSH
 493: CALL_OW 88
// ComEnterUnit ( Palmer , AmTower ) ;
 497: LD_EXP 10
 501: PPUSH
 502: LD_INT 6
 504: PPUSH
 505: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
 509: LD_INT 35
 511: PPUSH
 512: CALL_OW 67
// until IsInUnit ( Palmer ) = AmTower ;
 516: LD_EXP 10
 520: PPUSH
 521: CALL_OW 310
 525: PUSH
 526: LD_INT 6
 528: EQUAL
 529: IFFALSE 509
// SayRadio ( Palmer , DPalmer-5 ) ;
 531: LD_EXP 10
 535: PPUSH
 536: LD_STRING DPalmer-5
 538: PPUSH
 539: CALL_OW 94
// ComMoveXY ( Brighton , 59 , 36 ) ;
 543: LD_EXP 9
 547: PPUSH
 548: LD_INT 59
 550: PPUSH
 551: LD_INT 36
 553: PPUSH
 554: CALL_OW 111
// ComMoveXY ( Megan , 60 , 35 ) ;
 558: LD_EXP 11
 562: PPUSH
 563: LD_INT 60
 565: PPUSH
 566: LD_INT 35
 568: PPUSH
 569: CALL_OW 111
// ComMoveXY ( Palmer , 60 , 34 ) ;
 573: LD_EXP 10
 577: PPUSH
 578: LD_INT 60
 580: PPUSH
 581: LD_INT 34
 583: PPUSH
 584: CALL_OW 111
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 588: LD_EXP 9
 592: PPUSH
 593: LD_INT 99
 595: PPUSH
 596: LD_INT 37
 598: PPUSH
 599: CALL_OW 178
// AddComTurnUnit ( Megan , Brighton ) ;
 603: LD_EXP 11
 607: PPUSH
 608: LD_EXP 9
 612: PPUSH
 613: CALL_OW 179
// AddComTurnUnit ( Palmer , Brighton ) ;
 617: LD_EXP 10
 621: PPUSH
 622: LD_EXP 9
 626: PPUSH
 627: CALL_OW 179
// CenterOnXY ( 64 , 40 ) ;
 631: LD_INT 64
 633: PPUSH
 634: LD_INT 40
 636: PPUSH
 637: CALL_OW 84
// ComMeeting ( BetaSquad , SpotArea ) ;
 641: LD_EXP 12
 645: PPUSH
 646: LD_INT 13
 648: PPUSH
 649: CALL 11621 0 2
// wait ( 0 0$30 ) ;
 653: LD_INT 1050
 655: PPUSH
 656: CALL_OW 67
// Say ( Brighton , DBrighton-4 ) ;
 660: LD_EXP 9
 664: PPUSH
 665: LD_STRING DBrighton-4
 667: PPUSH
 668: CALL_OW 88
// Say ( Brighton , DBrighton-5 ) ;
 672: LD_EXP 9
 676: PPUSH
 677: LD_STRING DBrighton-5
 679: PPUSH
 680: CALL_OW 88
// AddComTurnUnit ( Brighton , Megan ) ;
 684: LD_EXP 9
 688: PPUSH
 689: LD_EXP 11
 693: PPUSH
 694: CALL_OW 179
// Say ( Brighton , DBrighton-6 ) ;
 698: LD_EXP 9
 702: PPUSH
 703: LD_STRING DBrighton-6
 705: PPUSH
 706: CALL_OW 88
// Say ( Megan , DMegan-1 ) ;
 710: LD_EXP 11
 714: PPUSH
 715: LD_STRING DMegan-1
 717: PPUSH
 718: CALL_OW 88
// Say ( Brighton , DBrighton-7 ) ;
 722: LD_EXP 9
 726: PPUSH
 727: LD_STRING DBrighton-7
 729: PPUSH
 730: CALL_OW 88
// AddComTurnXY ( Brighton , 99 , 37 ) ;
 734: LD_EXP 9
 738: PPUSH
 739: LD_INT 99
 741: PPUSH
 742: LD_INT 37
 744: PPUSH
 745: CALL_OW 178
// Say ( Brighton , DBrighton-8 ) ;
 749: LD_EXP 9
 753: PPUSH
 754: LD_STRING DBrighton-8
 756: PPUSH
 757: CALL_OW 88
// ChangeMissionObjectives ( C1 ) ;
 761: LD_STRING C1
 763: PPUSH
 764: CALL_OW 337
// InGameOff ;
 768: CALL_OW 9
// SaveForQuickRestart ;
 772: CALL_OW 22
// MissionStart := true ;
 776: LD_ADDR_EXP 1
 780: PUSH
 781: LD_INT 1
 783: ST_TO_ADDR
// PrepareRUBase_v2 ;
 784: CALL 4919 0 0
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
 788: LD_ADDR_EXP 63
 792: PUSH
 793: LD_EXP 63
 797: PPUSH
 798: LD_INT 1
 800: PPUSH
 801: LD_INT 22
 803: PUSH
 804: LD_INT 3
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PPUSH
 811: CALL_OW 69
 815: PPUSH
 816: CALL_OW 1
 820: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , 2 , RU_SecondPersonnel ) ;
 821: LD_ADDR_EXP 63
 825: PUSH
 826: LD_EXP 63
 830: PPUSH
 831: LD_INT 2
 833: PPUSH
 834: LD_EXP 36
 838: PPUSH
 839: CALL_OW 1
 843: ST_TO_ADDR
// MC_Start ( ) ;
 844: CALL 51076 0 0
// music_nat := 1 ;
 848: LD_ADDR_OWVAR 71
 852: PUSH
 853: LD_INT 1
 855: ST_TO_ADDR
// end ;
 856: END
// every 1 trigger southAreaBlocker do var unit ;
 857: LD_EXP 2
 861: IFFALSE 1022
 863: GO 865
 865: DISABLE
 866: LD_INT 0
 868: PPUSH
// begin enable ;
 869: ENABLE
// if FilterUnitsInArea ( SouthArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) = 0 then
 870: LD_INT 16
 872: PPUSH
 873: LD_INT 22
 875: PUSH
 876: LD_INT 1
 878: PUSH
 879: EMPTY
 880: LIST
 881: LIST
 882: PUSH
 883: LD_INT 2
 885: PUSH
 886: LD_INT 21
 888: PUSH
 889: LD_INT 1
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: PUSH
 896: LD_INT 21
 898: PUSH
 899: LD_INT 2
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: LIST
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PPUSH
 915: CALL_OW 70
 919: PUSH
 920: LD_INT 0
 922: EQUAL
 923: IFFALSE 927
// exit ;
 925: GO 1022
// for unit in FilterUnitsInArea ( SouthArea , [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 927: LD_ADDR_VAR 0 1
 931: PUSH
 932: LD_INT 16
 934: PPUSH
 935: LD_INT 22
 937: PUSH
 938: LD_INT 1
 940: PUSH
 941: EMPTY
 942: LIST
 943: LIST
 944: PUSH
 945: LD_INT 2
 947: PUSH
 948: LD_INT 21
 950: PUSH
 951: LD_INT 1
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PUSH
 958: LD_INT 21
 960: PUSH
 961: LD_INT 2
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: LIST
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PPUSH
 977: CALL_OW 70
 981: PUSH
 982: FOR_IN
 983: IFFALSE 1020
// begin ComMoveXY ( unit , GetX ( unit ) , GetY ( unit ) - 2 ) ;
 985: LD_VAR 0 1
 989: PPUSH
 990: LD_VAR 0 1
 994: PPUSH
 995: CALL_OW 250
 999: PPUSH
1000: LD_VAR 0 1
1004: PPUSH
1005: CALL_OW 251
1009: PUSH
1010: LD_INT 2
1012: MINUS
1013: PPUSH
1014: CALL_OW 111
// end ;
1018: GO 982
1020: POP
1021: POP
// end ;
1022: PPOPN 1
1024: END
// export ArmadaArrived , FirstAssaultRepelled ; export RuSpeaker ; every 0 0$1 trigger MissionStart do var i , tmp ;
1025: LD_EXP 1
1029: IFFALSE 1650
1031: GO 1033
1033: DISABLE
1034: LD_INT 0
1036: PPUSH
1037: PPUSH
// begin wait ( ruArrival ) ;
1038: LD_EXP 42
1042: PPUSH
1043: CALL_OW 67
// PrepareRUArmada ;
1047: CALL 3778 0 0
// wait ( 0 0$3 ) ;
1051: LD_INT 105
1053: PPUSH
1054: CALL_OW 67
// tmp := AreaToList ( RUArrivalParkingArea , 0 ) ;
1058: LD_ADDR_VAR 0 2
1062: PUSH
1063: LD_INT 15
1065: PPUSH
1066: LD_INT 0
1068: PPUSH
1069: CALL_OW 517
1073: ST_TO_ADDR
// for i = 1 to RUArmada do
1074: LD_ADDR_VAR 0 1
1078: PUSH
1079: DOUBLE
1080: LD_INT 1
1082: DEC
1083: ST_TO_ADDR
1084: LD_EXP 17
1088: PUSH
1089: FOR_TO
1090: IFFALSE 1139
// ComMoveXY ( RUArmada [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1092: LD_EXP 17
1096: PUSH
1097: LD_VAR 0 1
1101: ARRAY
1102: PPUSH
1103: LD_VAR 0 2
1107: PUSH
1108: LD_INT 1
1110: ARRAY
1111: PUSH
1112: LD_VAR 0 1
1116: ARRAY
1117: PPUSH
1118: LD_VAR 0 2
1122: PUSH
1123: LD_INT 2
1125: ARRAY
1126: PUSH
1127: LD_VAR 0 1
1131: ARRAY
1132: PPUSH
1133: CALL_OW 111
1137: GO 1089
1139: POP
1140: POP
// ArmadaArrived := true ;
1141: LD_ADDR_EXP 3
1145: PUSH
1146: LD_INT 1
1148: ST_TO_ADDR
// Say ( Palmer , DPalmer-A1 ) ;
1149: LD_EXP 10
1153: PPUSH
1154: LD_STRING DPalmer-A1
1156: PPUSH
1157: CALL_OW 88
// Say ( Brighton , DBrighton-A1 ) ;
1161: LD_EXP 9
1165: PPUSH
1166: LD_STRING DBrighton-A1
1168: PPUSH
1169: CALL_OW 88
// wait ( 0 0$20 ) ;
1173: LD_INT 700
1175: PPUSH
1176: CALL_OW 67
// PrepareRUBase ;
1180: CALL 4503 0 0
// wait ( 1 1$20 ) ;
1184: LD_INT 2800
1186: PPUSH
1187: CALL_OW 67
// PrepareRUBulldozers ;
1191: CALL 4390 0 0
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
1195: LD_EXP 18
1199: PUSH
1200: LD_INT 1
1202: ARRAY
1203: PPUSH
1204: LD_INT 9
1206: PPUSH
1207: CALL 11478 0 2
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
1211: LD_EXP 18
1215: PUSH
1216: LD_INT 2
1218: ARRAY
1219: PPUSH
1220: LD_INT 11
1222: PPUSH
1223: CALL 11478 0 2
// DoNotAttack ( 1 , Bulldozers [ 1 ] ) ;
1227: LD_INT 1
1229: PPUSH
1230: LD_EXP 18
1234: PUSH
1235: LD_INT 1
1237: ARRAY
1238: PPUSH
1239: CALL_OW 471
// DoNotAttack ( 1 , Bulldozers [ 2 ] ) ;
1243: LD_INT 1
1245: PPUSH
1246: LD_EXP 18
1250: PUSH
1251: LD_INT 2
1253: ARRAY
1254: PPUSH
1255: CALL_OW 471
// wait ( 0 0$30 ) ;
1259: LD_INT 1050
1261: PPUSH
1262: CALL_OW 67
// ShowArea ( 1 , SouthArea ) ;
1266: LD_INT 1
1268: PPUSH
1269: LD_INT 16
1271: PPUSH
1272: CALL_OW 334
// InGameOn ;
1276: CALL_OW 8
// PlaceSeeing ( 95 , 93 , 1 , - 30 ) ;
1280: LD_INT 95
1282: PPUSH
1283: LD_INT 93
1285: PPUSH
1286: LD_INT 1
1288: PPUSH
1289: LD_INT 30
1291: NEG
1292: PPUSH
1293: CALL_OW 330
// ComMoveXY ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) , 63 , 39 ) ;
1297: LD_INT 10
1299: PPUSH
1300: LD_INT 22
1302: PUSH
1303: LD_INT 1
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: PPUSH
1310: CALL_OW 70
1314: PPUSH
1315: LD_INT 63
1317: PPUSH
1318: LD_INT 39
1320: PPUSH
1321: CALL_OW 111
// CenterOnXY ( 95 , 93 ) ;
1325: LD_INT 95
1327: PPUSH
1328: LD_INT 93
1330: PPUSH
1331: CALL_OW 84
// repeat wait ( 0 0$1 ) ;
1335: LD_INT 35
1337: PPUSH
1338: CALL_OW 67
// if not HasTask ( Bulldozers [ 1 ] ) then
1342: LD_EXP 18
1346: PUSH
1347: LD_INT 1
1349: ARRAY
1350: PPUSH
1351: CALL_OW 314
1355: NOT
1356: IFFALSE 1374
// CutTreeInArea ( Bulldozers [ 1 ] , BulldozerArea ) ;
1358: LD_EXP 18
1362: PUSH
1363: LD_INT 1
1365: ARRAY
1366: PPUSH
1367: LD_INT 9
1369: PPUSH
1370: CALL 11478 0 2
// if not HasTask ( Bulldozers [ 2 ] ) then
1374: LD_EXP 18
1378: PUSH
1379: LD_INT 2
1381: ARRAY
1382: PPUSH
1383: CALL_OW 314
1387: NOT
1388: IFFALSE 1406
// CutTreeInArea ( Bulldozers [ 2 ] , BulldozerArea2 ) ;
1390: LD_EXP 18
1394: PUSH
1395: LD_INT 2
1397: ARRAY
1398: PPUSH
1399: LD_INT 11
1401: PPUSH
1402: CALL 11478 0 2
// until ListEnvironmentArea ( BulldozerArea ) < 2 or ListEnvironmentArea ( BulldozerArea2 ) < 2 or IsDead ( Bulldozers [ 1 ] ) ;
1406: LD_INT 9
1408: PPUSH
1409: CALL_OW 353
1413: PUSH
1414: LD_INT 2
1416: LESS
1417: PUSH
1418: LD_INT 11
1420: PPUSH
1421: CALL_OW 353
1425: PUSH
1426: LD_INT 2
1428: LESS
1429: OR
1430: PUSH
1431: LD_EXP 18
1435: PUSH
1436: LD_INT 1
1438: ARRAY
1439: PPUSH
1440: CALL_OW 301
1444: OR
1445: IFFALSE 1335
// if UnitFilter ( Bulldozers , [ f_ok ] ) then
1447: LD_EXP 18
1451: PPUSH
1452: LD_INT 50
1454: PUSH
1455: EMPTY
1456: LIST
1457: PPUSH
1458: CALL_OW 72
1462: IFFALSE 1515
// begin wait ( 0 0$10 ) ;
1464: LD_INT 350
1466: PPUSH
1467: CALL_OW 67
// ComMoveXY ( Bulldozers , 120 , 131 ) ;
1471: LD_EXP 18
1475: PPUSH
1476: LD_INT 120
1478: PPUSH
1479: LD_INT 131
1481: PPUSH
1482: CALL_OW 111
// for i in Bulldozers do
1486: LD_ADDR_VAR 0 1
1490: PUSH
1491: LD_EXP 18
1495: PUSH
1496: FOR_IN
1497: IFFALSE 1513
// NormalAttack ( 1 , i ) ;
1499: LD_INT 1
1501: PPUSH
1502: LD_VAR 0 1
1506: PPUSH
1507: CALL_OW 472
1511: GO 1496
1513: POP
1514: POP
// end ; wait ( 0 0$10 ) ;
1515: LD_INT 350
1517: PPUSH
1518: CALL_OW 67
// RemoveSeeing ( 95 , 93 , 1 ) ;
1522: LD_INT 95
1524: PPUSH
1525: LD_INT 93
1527: PPUSH
1528: LD_INT 1
1530: PPUSH
1531: CALL_OW 331
// southAreaBlocker = false ;
1535: LD_ADDR_EXP 2
1539: PUSH
1540: LD_INT 0
1542: ST_TO_ADDR
// Say ( Yashin , DDeath-Yas-1 ) ;
1543: LD_EXP 13
1547: PPUSH
1548: LD_STRING DDeath-Yas-1
1550: PPUSH
1551: CALL_OW 88
// SayEffect ( DRuSol-A1 ) ;
1555: LD_STRING DRuSol-A1
1557: PPUSH
1558: CALL_OW 96
// wait ( 0 0$2 ) ;
1562: LD_INT 70
1564: PPUSH
1565: CALL_OW 67
// InGameOff ;
1569: CALL_OW 9
// AssaultStarted := true ;
1573: LD_ADDR_EXP 8
1577: PUSH
1578: LD_INT 1
1580: ST_TO_ADDR
// wait ( 0 0$2 ) ;
1581: LD_INT 70
1583: PPUSH
1584: CALL_OW 67
// Say ( Gaydar , DDeath-Gay-2 ) ;
1588: LD_EXP 15
1592: PPUSH
1593: LD_STRING DDeath-Gay-2
1595: PPUSH
1596: CALL_OW 88
// wait ( 0 0$20 ) ;
1600: LD_INT 700
1602: PPUSH
1603: CALL_OW 67
// Say ( Popov , DDeath-Pop-1 ) ;
1607: LD_EXP 14
1611: PPUSH
1612: LD_STRING DDeath-Pop-1
1614: PPUSH
1615: CALL_OW 88
// Say ( Gaydar , DDeath-Gay-1 ) ;
1619: LD_EXP 15
1623: PPUSH
1624: LD_STRING DDeath-Gay-1
1626: PPUSH
1627: CALL_OW 88
// wait ( 0 0$5 ) ;
1631: LD_INT 175
1633: PPUSH
1634: CALL_OW 67
// Say ( Sevi , DDeath-Vse-1 ) ;
1638: LD_EXP 16
1642: PPUSH
1643: LD_STRING DDeath-Vse-1
1645: PPUSH
1646: CALL_OW 88
// end ;
1650: PPOPN 2
1652: END
// every 0 0$1 trigger AssaultStarted do var i , tmp ;
1653: LD_EXP 8
1657: IFFALSE 2178
1659: GO 1661
1661: DISABLE
1662: LD_INT 0
1664: PPUSH
1665: PPUSH
// begin PriorityAttack ( 6 , BetaA ) ;
1666: LD_INT 6
1668: PPUSH
1669: LD_INT 1
1671: PPUSH
1672: CALL_OW 470
// PriorityAttack ( 6 , BetaB ) ;
1676: LD_INT 6
1678: PPUSH
1679: LD_INT 3
1681: PPUSH
1682: CALL_OW 470
// repeat for i in RuArmada do
1686: LD_ADDR_VAR 0 1
1690: PUSH
1691: LD_EXP 17
1695: PUSH
1696: FOR_IN
1697: IFFALSE 1735
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
1699: LD_VAR 0 1
1703: PPUSH
1704: LD_INT 22
1706: PUSH
1707: LD_INT 1
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: PPUSH
1714: CALL_OW 69
1718: PPUSH
1719: LD_VAR 0 1
1723: PPUSH
1724: CALL_OW 74
1728: PPUSH
1729: CALL_OW 115
1733: GO 1696
1735: POP
1736: POP
// wait ( 0 0$1 ) until FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_type , unit_human ] ] ) < 10 and IsDead ( Yashin ) and IsDead ( Popov ) and IsDead ( Gaydar ) and IsDead ( Sevi ) ;
1737: LD_INT 35
1739: PPUSH
1740: CALL_OW 67
1744: LD_INT 1
1746: PUSH
1747: LD_INT 22
1749: PUSH
1750: LD_INT 6
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: PUSH
1757: LD_INT 21
1759: PUSH
1760: LD_INT 1
1762: PUSH
1763: EMPTY
1764: LIST
1765: LIST
1766: PUSH
1767: EMPTY
1768: LIST
1769: LIST
1770: LIST
1771: PPUSH
1772: CALL_OW 69
1776: PUSH
1777: LD_INT 10
1779: LESS
1780: PUSH
1781: LD_EXP 13
1785: PPUSH
1786: CALL_OW 301
1790: AND
1791: PUSH
1792: LD_EXP 14
1796: PPUSH
1797: CALL_OW 301
1801: AND
1802: PUSH
1803: LD_EXP 15
1807: PPUSH
1808: CALL_OW 301
1812: AND
1813: PUSH
1814: LD_EXP 16
1818: PPUSH
1819: CALL_OW 301
1823: AND
1824: IFFALSE 1686
// AssaultStarted := false ;
1826: LD_ADDR_EXP 8
1830: PUSH
1831: LD_INT 0
1833: ST_TO_ADDR
// ComMoveToArea ( FilterAllUnits ( [ f_side , 6 ] ) , RUArrivalArea ) ;
1834: LD_INT 22
1836: PUSH
1837: LD_INT 6
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: PPUSH
1844: CALL_OW 69
1848: PPUSH
1849: LD_INT 5
1851: PPUSH
1852: CALL_OW 113
// RuSpeaker := FilterAllUnits ( [ f_and , [ f_side , 6 ] , [ f_sex , sex_male ] , [ f_type , unit_human ] , [ f_lives , 500 ] ] ) ;
1856: LD_ADDR_EXP 5
1860: PUSH
1861: LD_INT 1
1863: PUSH
1864: LD_INT 22
1866: PUSH
1867: LD_INT 6
1869: PUSH
1870: EMPTY
1871: LIST
1872: LIST
1873: PUSH
1874: LD_INT 26
1876: PUSH
1877: LD_INT 1
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: PUSH
1884: LD_INT 21
1886: PUSH
1887: LD_INT 1
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: PUSH
1894: LD_INT 24
1896: PUSH
1897: LD_INT 500
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: PPUSH
1911: CALL_OW 69
1915: ST_TO_ADDR
// if RuSpeaker then
1916: LD_EXP 5
1920: IFFALSE 1938
// Say ( RuSpeaker [ 1 ] , DRuSol-A2 ) ;
1922: LD_EXP 5
1926: PUSH
1927: LD_INT 1
1929: ARRAY
1930: PPUSH
1931: LD_STRING DRuSol-A2
1933: PPUSH
1934: CALL_OW 88
// wait ( 0 0$30 ) ;
1938: LD_INT 1050
1940: PPUSH
1941: CALL_OW 67
// DialogueOn ;
1945: CALL_OW 6
// Say ( Brighton , DBrighton-B1 ) ;
1949: LD_EXP 9
1953: PPUSH
1954: LD_STRING DBrighton-B1
1956: PPUSH
1957: CALL_OW 88
// Say ( Palmer , DPalmer-B1 ) ;
1961: LD_EXP 10
1965: PPUSH
1966: LD_STRING DPalmer-B1
1968: PPUSH
1969: CALL_OW 88
// Say ( Brighton , DBrighton-B2 ) ;
1973: LD_EXP 9
1977: PPUSH
1978: LD_STRING DBrighton-B2
1980: PPUSH
1981: CALL_OW 88
// SayRadio ( Burlak , DBurlak-B1 ) ;
1985: LD_EXP 19
1989: PPUSH
1990: LD_STRING DBurlak-B1
1992: PPUSH
1993: CALL_OW 94
// Say ( Brighton , DBrighton-B3 ) ;
1997: LD_EXP 9
2001: PPUSH
2002: LD_STRING DBrighton-B3
2004: PPUSH
2005: CALL_OW 88
// Say ( Palmer , DPalmer-B2 ) ;
2009: LD_EXP 10
2013: PPUSH
2014: LD_STRING DPalmer-B2
2016: PPUSH
2017: CALL_OW 88
// Say ( Brighton , DBrighton-B4 ) ;
2021: LD_EXP 9
2025: PPUSH
2026: LD_STRING DBrighton-B4
2028: PPUSH
2029: CALL_OW 88
// Say ( Brighton , DBrighton-B5 ) ;
2033: LD_EXP 9
2037: PPUSH
2038: LD_STRING DBrighton-B5
2040: PPUSH
2041: CALL_OW 88
// DialogueOff ;
2045: CALL_OW 7
// ChangeMissionObjectives ( C2 ) ;
2049: LD_STRING C2
2051: PPUSH
2052: CALL_OW 337
// FirstAssaultRepelled := true ;
2056: LD_ADDR_EXP 4
2060: PUSH
2061: LD_INT 1
2063: ST_TO_ADDR
// RemoveUnit ( Bulldozers [ 1 ] ) ;
2064: LD_EXP 18
2068: PUSH
2069: LD_INT 1
2071: ARRAY
2072: PPUSH
2073: CALL_OW 64
// RemoveUnit ( Bulldozers [ 2 ] ) ;
2077: LD_EXP 18
2081: PUSH
2082: LD_INT 2
2084: ARRAY
2085: PPUSH
2086: CALL_OW 64
// AddComExitVehicle ( FilterAllUnits ( [ f_side , 6 ] ) ) ;
2090: LD_INT 22
2092: PUSH
2093: LD_INT 6
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: PPUSH
2100: CALL_OW 69
2104: PPUSH
2105: CALL_OW 181
// SetSide ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_lives , 251 ] ] ) , 3 ) ;
2109: LD_INT 22
2111: PUSH
2112: LD_INT 6
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: PUSH
2119: LD_INT 24
2121: PUSH
2122: LD_INT 251
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: PPUSH
2133: CALL_OW 69
2137: PPUSH
2138: LD_INT 3
2140: PPUSH
2141: CALL_OW 235
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
2145: LD_ADDR_EXP 63
2149: PUSH
2150: LD_EXP 63
2154: PPUSH
2155: LD_INT 1
2157: PPUSH
2158: LD_INT 22
2160: PUSH
2161: LD_INT 3
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: PPUSH
2168: CALL_OW 69
2172: PPUSH
2173: CALL_OW 1
2177: ST_TO_ADDR
// end ;
2178: PPOPN 2
2180: END
// every 0 0$1 trigger FirstAssaultRepelled do var unit , insideUnit ;
2181: LD_EXP 4
2185: IFFALSE 2350
2187: GO 2189
2189: DISABLE
2190: LD_INT 0
2192: PPUSH
2193: PPUSH
// begin enable ;
2194: ENABLE
// if FilterUnitsInArea ( RUArrivalArea , [ [ f_side , 6 ] ] ) = 0 then
2195: LD_INT 5
2197: PPUSH
2198: LD_INT 22
2200: PUSH
2201: LD_INT 6
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: PUSH
2208: EMPTY
2209: LIST
2210: PPUSH
2211: CALL_OW 70
2215: PUSH
2216: LD_INT 0
2218: EQUAL
2219: IFFALSE 2223
// exit ;
2221: GO 2350
// for unit in FilterUnitsInArea ( RUArrivalArea , [ [ f_side , 6 ] ] ) do
2223: LD_ADDR_VAR 0 1
2227: PUSH
2228: LD_INT 5
2230: PPUSH
2231: LD_INT 22
2233: PUSH
2234: LD_INT 6
2236: PUSH
2237: EMPTY
2238: LIST
2239: LIST
2240: PUSH
2241: EMPTY
2242: LIST
2243: PPUSH
2244: CALL_OW 70
2248: PUSH
2249: FOR_IN
2250: IFFALSE 2348
// begin SetSide ( unit , 3 ) ;
2252: LD_VAR 0 1
2256: PPUSH
2257: LD_INT 3
2259: PPUSH
2260: CALL_OW 235
// if ( GetType ( unit ) = unit_vehicle ) then
2264: LD_VAR 0 1
2268: PPUSH
2269: CALL_OW 247
2273: PUSH
2274: LD_INT 2
2276: EQUAL
2277: IFFALSE 2313
// for insideUnit in UnitsInside ( unit ) do
2279: LD_ADDR_VAR 0 2
2283: PUSH
2284: LD_VAR 0 1
2288: PPUSH
2289: CALL_OW 313
2293: PUSH
2294: FOR_IN
2295: IFFALSE 2311
// SetSide ( insideUnit , 3 ) ;
2297: LD_VAR 0 2
2301: PPUSH
2302: LD_INT 3
2304: PPUSH
2305: CALL_OW 235
2309: GO 2294
2311: POP
2312: POP
// mc_bases := Replace ( mc_bases , 1 , FilterAllUnits ( [ f_side , 3 ] ) ) ;
2313: LD_ADDR_EXP 63
2317: PUSH
2318: LD_EXP 63
2322: PPUSH
2323: LD_INT 1
2325: PPUSH
2326: LD_INT 22
2328: PUSH
2329: LD_INT 3
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: PPUSH
2336: CALL_OW 69
2340: PPUSH
2341: CALL_OW 1
2345: ST_TO_ADDR
// end ;
2346: GO 2249
2348: POP
2349: POP
// end ;
2350: PPOPN 2
2352: END
// every 0 0$1 trigger FirstAssaultRepelled and jmmArrival > 0 0$00 do
2353: LD_EXP 4
2357: PUSH
2358: LD_EXP 41
2362: PUSH
2363: LD_INT 0
2365: GREATER
2366: AND
2367: IFFALSE 2387
2369: GO 2371
2371: DISABLE
// begin enable ;
2372: ENABLE
// jmmArrival := jmmArrival - 0 0$01 ;
2373: LD_ADDR_EXP 41
2377: PUSH
2378: LD_EXP 41
2382: PUSH
2383: LD_INT 35
2385: MINUS
2386: ST_TO_ADDR
// end ;
2387: END
// export JMM_Arrived ; every 0 0$1 trigger jmmArrival = 0 0$00 do
2388: LD_EXP 41
2392: PUSH
2393: LD_INT 0
2395: EQUAL
2396: IFFALSE 2502
2398: GO 2400
2400: DISABLE
// begin JMMReinforcement ;
2401: CALL 5247 0 0
// DialogueOn ;
2405: CALL_OW 6
// CenterOnUnits ( JMM ) ;
2409: LD_EXP 37
2413: PPUSH
2414: CALL_OW 85
// Say ( JMM , DJMM-F1 ) ;
2418: LD_EXP 37
2422: PPUSH
2423: LD_STRING DJMM-F1
2425: PPUSH
2426: CALL_OW 88
// if RussiansDefeated then
2430: LD_EXP 44
2434: IFFALSE 2460
// begin AddMedal ( Russians , 1 ) ;
2436: LD_STRING Russians
2438: PPUSH
2439: LD_INT 1
2441: PPUSH
2442: CALL_OW 101
// Say ( Brighton , DBrighton-F1a ) ;
2446: LD_EXP 9
2450: PPUSH
2451: LD_STRING DBrighton-F1a
2453: PPUSH
2454: CALL_OW 88
// end else
2458: GO 2490
// begin AddMedal ( Russians , - 1 ) ;
2460: LD_STRING Russians
2462: PPUSH
2463: LD_INT 1
2465: NEG
2466: PPUSH
2467: CALL_OW 101
// Say ( Brighton , DBrighton-F1 ) ;
2471: LD_EXP 9
2475: PPUSH
2476: LD_STRING DBrighton-F1
2478: PPUSH
2479: CALL_OW 88
// ChangeMissionObjectives ( C3 ) ;
2483: LD_STRING C3
2485: PPUSH
2486: CALL_OW 337
// end ; DialogueOff ;
2490: CALL_OW 7
// JMM_Arrived := true ;
2494: LD_ADDR_EXP 6
2498: PUSH
2499: LD_INT 1
2501: ST_TO_ADDR
// end ;
2502: END
// every 0 0$1 trigger JMM_Arrived and See ( 1 , Burlak ) do
2503: LD_EXP 6
2507: PUSH
2508: LD_INT 1
2510: PPUSH
2511: LD_EXP 19
2515: PPUSH
2516: CALL_OW 292
2520: AND
2521: IFFALSE 2550
2523: GO 2525
2525: DISABLE
// begin Say ( Burlak , DBurlak ) ;
2526: LD_EXP 19
2530: PPUSH
2531: LD_STRING DBurlak
2533: PPUSH
2534: CALL_OW 88
// Say ( JMM , DJMM ) ;
2538: LD_EXP 37
2542: PPUSH
2543: LD_STRING DJMM
2545: PPUSH
2546: CALL_OW 88
// end ;
2550: END
// export LaserBuilt ; every 0 0$1 trigger FilterAllUnits ( [ f_and , [ f_side , 1 ] , [ f_or , [ f_weapon , us_laser ] , [ f_bweapon , us_laser ] ] ] ) > 1 do
2551: LD_INT 1
2553: PUSH
2554: LD_INT 22
2556: PUSH
2557: LD_INT 1
2559: PUSH
2560: EMPTY
2561: LIST
2562: LIST
2563: PUSH
2564: LD_INT 2
2566: PUSH
2567: LD_INT 34
2569: PUSH
2570: LD_INT 9
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: LD_INT 35
2579: PUSH
2580: LD_INT 9
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: LIST
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: LIST
2596: PPUSH
2597: CALL_OW 69
2601: PUSH
2602: LD_INT 1
2604: GREATER
2605: IFFALSE 2618
2607: GO 2609
2609: DISABLE
// begin LaserBuilt := true ;
2610: LD_ADDR_EXP 7
2614: PUSH
2615: LD_INT 1
2617: ST_TO_ADDR
// end ;
2618: END
// export AssaultStarted ; every 0 0$1 trigger AssaultStarted and See ( 6 , NearestUnitToUnit ( FilterAllUnits ( [ f_and , [ [ f_side , 1 ] , [ f_bweapon , us_laser ] ] ] ) , IsInUnit ( Sevi ) ) ) do
2619: LD_EXP 8
2623: PUSH
2624: LD_INT 6
2626: PPUSH
2627: LD_INT 1
2629: PUSH
2630: LD_INT 22
2632: PUSH
2633: LD_INT 1
2635: PUSH
2636: EMPTY
2637: LIST
2638: LIST
2639: PUSH
2640: LD_INT 35
2642: PUSH
2643: LD_INT 9
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: PPUSH
2658: CALL_OW 69
2662: PPUSH
2663: LD_EXP 16
2667: PPUSH
2668: CALL_OW 310
2672: PPUSH
2673: CALL_OW 74
2677: PPUSH
2678: CALL_OW 292
2682: AND
2683: IFFALSE 2719
2685: GO 2687
2687: DISABLE
// begin wait ( 0 0$5 ) ;
2688: LD_INT 175
2690: PPUSH
2691: CALL_OW 67
// Say ( Sevi , DDeath-Vse-2 ) ;
2695: LD_EXP 16
2699: PPUSH
2700: LD_STRING DDeath-Vse-2
2702: PPUSH
2703: CALL_OW 88
// Say ( Yashin , DDeath-Yas-2 ) ;
2707: LD_EXP 13
2711: PPUSH
2712: LD_STRING DDeath-Yas-2
2714: PPUSH
2715: CALL_OW 88
// end ;
2719: END
// every 0 0$1 trigger AssaultStarted do
2720: LD_EXP 8
2724: IFFALSE 2748
2726: GO 2728
2728: DISABLE
// begin wait ( 0 0$20 ) ;
2729: LD_INT 700
2731: PPUSH
2732: CALL_OW 67
// Say ( Popov , DDeath-Pop-2 ) ;
2736: LD_EXP 14
2740: PPUSH
2741: LD_STRING DDeath-Pop-2
2743: PPUSH
2744: CALL_OW 88
// end ;
2748: END
// every 0 0$1 trigger MissionStart do
2749: LD_EXP 1
2753: IFFALSE 2795
2755: GO 2757
2757: DISABLE
// begin wait ( rand ( 0 0$50 , 2 2$20 ) ) ;
2758: LD_INT 1750
2760: PPUSH
2761: LD_INT 4900
2763: PPUSH
2764: CALL_OW 12
2768: PPUSH
2769: CALL_OW 67
// CreateCratesArea ( Rand ( 2 , 5 ) , CratesArea , true ) ;
2773: LD_INT 2
2775: PPUSH
2776: LD_INT 5
2778: PPUSH
2779: CALL_OW 12
2783: PPUSH
2784: LD_INT 12
2786: PPUSH
2787: LD_INT 1
2789: PPUSH
2790: CALL_OW 55
// enable ;
2794: ENABLE
// end ;
2795: END
// every 0 0$1 trigger MissionStart do
2796: LD_EXP 1
2800: IFFALSE 2806
2802: GO 2804
2804: DISABLE
// begin enable ;
2805: ENABLE
// end ; end_of_file
2806: END
// export Brighton , Palmer , Megan ; export BetaSquad ; export function PrepareHeroes ; begin
2807: LD_INT 0
2809: PPUSH
// uc_side := 1 ;
2810: LD_ADDR_OWVAR 20
2814: PUSH
2815: LD_INT 1
2817: ST_TO_ADDR
// hc_class = class_soldier ;
2818: LD_ADDR_OWVAR 28
2822: PUSH
2823: LD_INT 1
2825: ST_TO_ADDR
// uc_nation := nation_american ;
2826: LD_ADDR_OWVAR 21
2830: PUSH
2831: LD_INT 1
2833: ST_TO_ADDR
// hc_sex = sex_male ;
2834: LD_ADDR_OWVAR 27
2838: PUSH
2839: LD_INT 1
2841: ST_TO_ADDR
// hc_importance = 110 ;
2842: LD_ADDR_OWVAR 32
2846: PUSH
2847: LD_INT 110
2849: ST_TO_ADDR
// hc_basic_skills = [ 5 , 4 , 5 , 3 ] ;
2850: LD_ADDR_OWVAR 30
2854: PUSH
2855: LD_INT 5
2857: PUSH
2858: LD_INT 4
2860: PUSH
2861: LD_INT 5
2863: PUSH
2864: LD_INT 3
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: LIST
2871: LIST
2872: ST_TO_ADDR
// hc_skills = [ 9 , 6 , 7 , 6 ] ;
2873: LD_ADDR_OWVAR 31
2877: PUSH
2878: LD_INT 9
2880: PUSH
2881: LD_INT 6
2883: PUSH
2884: LD_INT 7
2886: PUSH
2887: LD_INT 6
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: LIST
2894: LIST
2895: ST_TO_ADDR
// hc_attr = [ 12 , 10 ] ;
2896: LD_ADDR_OWVAR 29
2900: PUSH
2901: LD_INT 12
2903: PUSH
2904: LD_INT 10
2906: PUSH
2907: EMPTY
2908: LIST
2909: LIST
2910: ST_TO_ADDR
// hc_name := Gerard Brighton ;
2911: LD_ADDR_OWVAR 26
2915: PUSH
2916: LD_STRING Gerard Brighton
2918: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
2919: LD_ADDR_OWVAR 33
2923: PUSH
2924: LD_STRING Beta_Skirmish
2926: ST_TO_ADDR
// hc_face_number := 1 ;
2927: LD_ADDR_OWVAR 34
2931: PUSH
2932: LD_INT 1
2934: ST_TO_ADDR
// Brighton := CreateHuman ;
2935: LD_ADDR_EXP 9
2939: PUSH
2940: CALL_OW 44
2944: ST_TO_ADDR
// uc_nation := nation_american ;
2945: LD_ADDR_OWVAR 21
2949: PUSH
2950: LD_INT 1
2952: ST_TO_ADDR
// hc_importance = 80 ;
2953: LD_ADDR_OWVAR 32
2957: PUSH
2958: LD_INT 80
2960: ST_TO_ADDR
// hc_sex = sex_male ;
2961: LD_ADDR_OWVAR 27
2965: PUSH
2966: LD_INT 1
2968: ST_TO_ADDR
// hc_basic_skills = [ 5 , 5 , 3 , 1 ] ;
2969: LD_ADDR_OWVAR 30
2973: PUSH
2974: LD_INT 5
2976: PUSH
2977: LD_INT 5
2979: PUSH
2980: LD_INT 3
2982: PUSH
2983: LD_INT 1
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: LIST
2990: LIST
2991: ST_TO_ADDR
// hc_skills = [ 7 , 6 , 5 , 3 ] ;
2992: LD_ADDR_OWVAR 31
2996: PUSH
2997: LD_INT 7
2999: PUSH
3000: LD_INT 6
3002: PUSH
3003: LD_INT 5
3005: PUSH
3006: LD_INT 3
3008: PUSH
3009: EMPTY
3010: LIST
3011: LIST
3012: LIST
3013: LIST
3014: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
3015: LD_ADDR_OWVAR 29
3019: PUSH
3020: LD_INT 10
3022: PUSH
3023: LD_INT 10
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: ST_TO_ADDR
// hc_name := Brian Palmer ;
3030: LD_ADDR_OWVAR 26
3034: PUSH
3035: LD_STRING Brian Palmer
3037: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
3038: LD_ADDR_OWVAR 33
3042: PUSH
3043: LD_STRING Beta_Skirmish
3045: ST_TO_ADDR
// hc_face_number := 3 ;
3046: LD_ADDR_OWVAR 34
3050: PUSH
3051: LD_INT 3
3053: ST_TO_ADDR
// Palmer := CreateHuman ;
3054: LD_ADDR_EXP 10
3058: PUSH
3059: CALL_OW 44
3063: ST_TO_ADDR
// hc_class = class_scientistic ;
3064: LD_ADDR_OWVAR 28
3068: PUSH
3069: LD_INT 4
3071: ST_TO_ADDR
// uc_nation := nation_american ;
3072: LD_ADDR_OWVAR 21
3076: PUSH
3077: LD_INT 1
3079: ST_TO_ADDR
// hc_importance = 70 ;
3080: LD_ADDR_OWVAR 32
3084: PUSH
3085: LD_INT 70
3087: ST_TO_ADDR
// hc_sex = sex_female ;
3088: LD_ADDR_OWVAR 27
3092: PUSH
3093: LD_INT 2
3095: ST_TO_ADDR
// hc_basic_skills = [ 3 , 2 , 4 , 6 ] ;
3096: LD_ADDR_OWVAR 30
3100: PUSH
3101: LD_INT 3
3103: PUSH
3104: LD_INT 2
3106: PUSH
3107: LD_INT 4
3109: PUSH
3110: LD_INT 6
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: LIST
3117: LIST
3118: ST_TO_ADDR
// hc_skills = [ 4 , 2 , 5 , 8 ] ;
3119: LD_ADDR_OWVAR 31
3123: PUSH
3124: LD_INT 4
3126: PUSH
3127: LD_INT 2
3129: PUSH
3130: LD_INT 5
3132: PUSH
3133: LD_INT 8
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
3142: LD_ADDR_OWVAR 29
3146: PUSH
3147: LD_INT 10
3149: PUSH
3150: LD_INT 10
3152: PUSH
3153: EMPTY
3154: LIST
3155: LIST
3156: ST_TO_ADDR
// hc_name := Megan Armitage ;
3157: LD_ADDR_OWVAR 26
3161: PUSH
3162: LD_STRING Megan Armitage
3164: ST_TO_ADDR
// hc_gallery := Beta_Skirmish ;
3165: LD_ADDR_OWVAR 33
3169: PUSH
3170: LD_STRING Beta_Skirmish
3172: ST_TO_ADDR
// hc_face_number := 4 ;
3173: LD_ADDR_OWVAR 34
3177: PUSH
3178: LD_INT 4
3180: ST_TO_ADDR
// Megan := CreateHuman ;
3181: LD_ADDR_EXP 11
3185: PUSH
3186: CALL_OW 44
3190: ST_TO_ADDR
// end ;
3191: LD_VAR 0 1
3195: RET
// export function PrepareBeta ; var i , filter , un , soldiers ; begin
3196: LD_INT 0
3198: PPUSH
3199: PPUSH
3200: PPUSH
3201: PPUSH
3202: PPUSH
// uc_side := 1 ;
3203: LD_ADDR_OWVAR 20
3207: PUSH
3208: LD_INT 1
3210: ST_TO_ADDR
// uc_nation := nation_american ;
3211: LD_ADDR_OWVAR 21
3215: PUSH
3216: LD_INT 1
3218: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) do
3219: LD_ADDR_VAR 0 2
3223: PUSH
3224: LD_INT 22
3226: PUSH
3227: LD_INT 1
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: PUSH
3234: LD_INT 30
3236: PUSH
3237: LD_INT 32
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PPUSH
3248: CALL_OW 69
3252: PUSH
3253: FOR_IN
3254: IFFALSE 3309
// PlaceWeaponTurret ( i , [ us_light_gun , us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun , us_gatling_gun ] [ rand ( 1 , 7 ) ] ) ;
3256: LD_VAR 0 2
3260: PPUSH
3261: LD_INT 3
3263: PUSH
3264: LD_INT 3
3266: PUSH
3267: LD_INT 4
3269: PUSH
3270: LD_INT 5
3272: PUSH
3273: LD_INT 11
3275: PUSH
3276: LD_INT 3
3278: PUSH
3279: LD_INT 4
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: LIST
3289: LIST
3290: PUSH
3291: LD_INT 1
3293: PPUSH
3294: LD_INT 7
3296: PPUSH
3297: CALL_OW 12
3301: ARRAY
3302: PPUSH
3303: CALL_OW 431
3307: GO 3253
3309: POP
3310: POP
// hc_name :=  ;
3311: LD_ADDR_OWVAR 26
3315: PUSH
3316: LD_STRING 
3318: ST_TO_ADDR
// hc_gallery :=  ;
3319: LD_ADDR_OWVAR 33
3323: PUSH
3324: LD_STRING 
3326: ST_TO_ADDR
// for i = 1 to [ 6 , 5 , 5 ] [ Difficulty ] do
3327: LD_ADDR_VAR 0 2
3331: PUSH
3332: DOUBLE
3333: LD_INT 1
3335: DEC
3336: ST_TO_ADDR
3337: LD_INT 6
3339: PUSH
3340: LD_INT 5
3342: PUSH
3343: LD_INT 5
3345: PUSH
3346: EMPTY
3347: LIST
3348: LIST
3349: LIST
3350: PUSH
3351: LD_OWVAR 67
3355: ARRAY
3356: PUSH
3357: FOR_TO
3358: IFFALSE 3416
// begin PrepareSoldier ( 1 , game_skill ) ;
3360: LD_INT 1
3362: PPUSH
3363: LD_EXP 39
3367: PPUSH
3368: CALL_OW 381
// un := CreateHuman ;
3372: LD_ADDR_VAR 0 4
3376: PUSH
3377: CALL_OW 44
3381: ST_TO_ADDR
// filter := filter ^ un ;
3382: LD_ADDR_VAR 0 3
3386: PUSH
3387: LD_VAR 0 3
3391: PUSH
3392: LD_VAR 0 4
3396: ADD
3397: ST_TO_ADDR
// soldiers := soldiers ^ un ;
3398: LD_ADDR_VAR 0 5
3402: PUSH
3403: LD_VAR 0 5
3407: PUSH
3408: LD_VAR 0 4
3412: ADD
3413: ST_TO_ADDR
// end ;
3414: GO 3357
3416: POP
3417: POP
// for i = 1 to [ 3 , 2 , 2 ] [ Difficulty ] do
3418: LD_ADDR_VAR 0 2
3422: PUSH
3423: DOUBLE
3424: LD_INT 1
3426: DEC
3427: ST_TO_ADDR
3428: LD_INT 3
3430: PUSH
3431: LD_INT 2
3433: PUSH
3434: LD_INT 2
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: LIST
3441: PUSH
3442: LD_OWVAR 67
3446: ARRAY
3447: PUSH
3448: FOR_TO
3449: IFFALSE 3503
// begin PrepareEngineer ( 0 , game_skill ) ;
3451: LD_INT 0
3453: PPUSH
3454: LD_EXP 39
3458: PPUSH
3459: CALL_OW 382
// un := CreateHuman ;
3463: LD_ADDR_VAR 0 4
3467: PUSH
3468: CALL_OW 44
3472: ST_TO_ADDR
// filter := filter ^ un ;
3473: LD_ADDR_VAR 0 3
3477: PUSH
3478: LD_VAR 0 3
3482: PUSH
3483: LD_VAR 0 4
3487: ADD
3488: ST_TO_ADDR
// PlaceHumanInUnit ( un , BetaB ) ;
3489: LD_VAR 0 4
3493: PPUSH
3494: LD_INT 3
3496: PPUSH
3497: CALL_OW 52
// end ;
3501: GO 3448
3503: POP
3504: POP
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
3505: LD_ADDR_VAR 0 2
3509: PUSH
3510: DOUBLE
3511: LD_INT 1
3513: DEC
3514: ST_TO_ADDR
3515: LD_INT 4
3517: PUSH
3518: LD_INT 3
3520: PUSH
3521: LD_INT 3
3523: PUSH
3524: EMPTY
3525: LIST
3526: LIST
3527: LIST
3528: PUSH
3529: LD_OWVAR 67
3533: ARRAY
3534: PUSH
3535: FOR_TO
3536: IFFALSE 3590
// begin PrepareMechanic ( 0 , game_skill ) ;
3538: LD_INT 0
3540: PPUSH
3541: LD_EXP 39
3545: PPUSH
3546: CALL_OW 383
// un := CreateHuman ;
3550: LD_ADDR_VAR 0 4
3554: PUSH
3555: CALL_OW 44
3559: ST_TO_ADDR
// filter := filter ^ un ;
3560: LD_ADDR_VAR 0 3
3564: PUSH
3565: LD_VAR 0 3
3569: PUSH
3570: LD_VAR 0 4
3574: ADD
3575: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmFac ) ;
3576: LD_VAR 0 4
3580: PPUSH
3581: LD_INT 8
3583: PPUSH
3584: CALL_OW 52
// end ;
3588: GO 3535
3590: POP
3591: POP
// for i = 1 to 2 do
3592: LD_ADDR_VAR 0 2
3596: PUSH
3597: DOUBLE
3598: LD_INT 1
3600: DEC
3601: ST_TO_ADDR
3602: LD_INT 2
3604: PUSH
3605: FOR_TO
3606: IFFALSE 3660
// begin PrepareScientist ( 0 , game_skill ) ;
3608: LD_INT 0
3610: PPUSH
3611: LD_EXP 39
3615: PPUSH
3616: CALL_OW 384
// un := CreateHuman ;
3620: LD_ADDR_VAR 0 4
3624: PUSH
3625: CALL_OW 44
3629: ST_TO_ADDR
// filter := filter ^ un ;
3630: LD_ADDR_VAR 0 3
3634: PUSH
3635: LD_VAR 0 3
3639: PUSH
3640: LD_VAR 0 4
3644: ADD
3645: ST_TO_ADDR
// PlaceHumanInUnit ( un , AmLab ) ;
3646: LD_VAR 0 4
3650: PPUSH
3651: LD_INT 14
3653: PPUSH
3654: CALL_OW 52
// end ;
3658: GO 3605
3660: POP
3661: POP
// for i = 1 to soldiers do
3662: LD_ADDR_VAR 0 2
3666: PUSH
3667: DOUBLE
3668: LD_INT 1
3670: DEC
3671: ST_TO_ADDR
3672: LD_VAR 0 5
3676: PUSH
3677: FOR_TO
3678: IFFALSE 3703
// PlaceUnitArea ( soldiers [ i ] , spawn_area , false ) ;
3680: LD_VAR 0 5
3684: PUSH
3685: LD_VAR 0 2
3689: ARRAY
3690: PPUSH
3691: LD_INT 1
3693: PPUSH
3694: LD_INT 0
3696: PPUSH
3697: CALL_OW 49
3701: GO 3677
3703: POP
3704: POP
// PlaceUnitXY ( Brighton , 51 , 43 , false ) ;
3705: LD_EXP 9
3709: PPUSH
3710: LD_INT 51
3712: PPUSH
3713: LD_INT 43
3715: PPUSH
3716: LD_INT 0
3718: PPUSH
3719: CALL_OW 48
// PlaceUnitXY ( Palmer , 55 , 58 , false ) ;
3723: LD_EXP 10
3727: PPUSH
3728: LD_INT 55
3730: PPUSH
3731: LD_INT 58
3733: PPUSH
3734: LD_INT 0
3736: PPUSH
3737: CALL_OW 48
// PlaceUnitXY ( Megan , 39 , 36 , false ) ;
3741: LD_EXP 11
3745: PPUSH
3746: LD_INT 39
3748: PPUSH
3749: LD_INT 36
3751: PPUSH
3752: LD_INT 0
3754: PPUSH
3755: CALL_OW 48
// BetaSquad := filter diff 0 ;
3759: LD_ADDR_EXP 12
3763: PUSH
3764: LD_VAR 0 3
3768: PUSH
3769: LD_INT 0
3771: DIFF
3772: ST_TO_ADDR
// end ;
3773: LD_VAR 0 1
3777: RET
// export Yashin , Popov , Gaydar , Sevi ; export RUArmada ; export function PrepareRUArmada ; var i , vehicle , soldiers , un , vehs ; begin
3778: LD_INT 0
3780: PPUSH
3781: PPUSH
3782: PPUSH
3783: PPUSH
3784: PPUSH
3785: PPUSH
// uc_side := 6 ;
3786: LD_ADDR_OWVAR 20
3790: PUSH
3791: LD_INT 6
3793: ST_TO_ADDR
// uc_nation := nation_russian ;
3794: LD_ADDR_OWVAR 21
3798: PUSH
3799: LD_INT 3
3801: ST_TO_ADDR
// soldiers := [ ] ;
3802: LD_ADDR_VAR 0 4
3806: PUSH
3807: EMPTY
3808: ST_TO_ADDR
// vehs := [ ] ;
3809: LD_ADDR_VAR 0 6
3813: PUSH
3814: EMPTY
3815: ST_TO_ADDR
// RUArmada := [ ] ;
3816: LD_ADDR_EXP 17
3820: PUSH
3821: EMPTY
3822: ST_TO_ADDR
// Yashin := NewCharacter ( Yashin ) ;
3823: LD_ADDR_EXP 13
3827: PUSH
3828: LD_STRING Yashin
3830: PPUSH
3831: CALL_OW 25
3835: ST_TO_ADDR
// Popov := NewCharacter ( Popov ) ;
3836: LD_ADDR_EXP 14
3840: PUSH
3841: LD_STRING Popov
3843: PPUSH
3844: CALL_OW 25
3848: ST_TO_ADDR
// Gaydar := NewCharacter ( Gaydar ) ;
3849: LD_ADDR_EXP 15
3853: PUSH
3854: LD_STRING Gaydar
3856: PPUSH
3857: CALL_OW 25
3861: ST_TO_ADDR
// Sevi := NewCharacter ( Vsevolod ) ;
3862: LD_ADDR_EXP 16
3866: PUSH
3867: LD_STRING Vsevolod
3869: PPUSH
3870: CALL_OW 25
3874: ST_TO_ADDR
// for i = 1 to 16 do
3875: LD_ADDR_VAR 0 2
3879: PUSH
3880: DOUBLE
3881: LD_INT 1
3883: DEC
3884: ST_TO_ADDR
3885: LD_INT 16
3887: PUSH
3888: FOR_TO
3889: IFFALSE 3931
// begin PrepareSoldier ( 0 , game_eskill ) ;
3891: LD_INT 0
3893: PPUSH
3894: LD_EXP 40
3898: PPUSH
3899: CALL_OW 381
// un := CreateHuman ;
3903: LD_ADDR_VAR 0 5
3907: PUSH
3908: CALL_OW 44
3912: ST_TO_ADDR
// soldiers := soldiers ^ un ;
3913: LD_ADDR_VAR 0 4
3917: PUSH
3918: LD_VAR 0 4
3922: PUSH
3923: LD_VAR 0 5
3927: ADD
3928: ST_TO_ADDR
// end ;
3929: GO 3888
3931: POP
3932: POP
// soldiers := Yashin ^ Popov ^ Gaydar ^ Sevi ^ soldiers ;
3933: LD_ADDR_VAR 0 4
3937: PUSH
3938: LD_EXP 13
3942: PUSH
3943: LD_EXP 14
3947: ADD
3948: PUSH
3949: LD_EXP 15
3953: ADD
3954: PUSH
3955: LD_EXP 16
3959: ADD
3960: PUSH
3961: LD_VAR 0 4
3965: ADD
3966: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_heavy_gun , 100 ) ;
3967: LD_INT 24
3969: PPUSH
3970: LD_INT 3
3972: PPUSH
3973: LD_INT 1
3975: PPUSH
3976: LD_INT 46
3978: PPUSH
3979: LD_INT 100
3981: PPUSH
3982: CALL 17332 0 5
// for i = 1 to 8 do
3986: LD_ADDR_VAR 0 2
3990: PUSH
3991: DOUBLE
3992: LD_INT 1
3994: DEC
3995: ST_TO_ADDR
3996: LD_INT 8
3998: PUSH
3999: FOR_TO
4000: IFFALSE 4083
// begin vehicle := CreateVehicle ;
4002: LD_ADDR_VAR 0 3
4006: PUSH
4007: CALL_OW 45
4011: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
4012: LD_VAR 0 4
4016: PUSH
4017: LD_INT 1
4019: ARRAY
4020: PPUSH
4021: LD_VAR 0 3
4025: PPUSH
4026: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
4030: LD_ADDR_VAR 0 4
4034: PUSH
4035: LD_VAR 0 4
4039: PUSH
4040: LD_VAR 0 4
4044: PUSH
4045: LD_INT 1
4047: ARRAY
4048: DIFF
4049: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4050: LD_VAR 0 3
4054: PPUSH
4055: LD_INT 5
4057: PPUSH
4058: LD_INT 0
4060: PPUSH
4061: CALL_OW 49
// vehs := vehs ^ vehicle ;
4065: LD_ADDR_VAR 0 6
4069: PUSH
4070: LD_VAR 0 6
4074: PUSH
4075: LD_VAR 0 3
4079: ADD
4080: ST_TO_ADDR
// end ;
4081: GO 3999
4083: POP
4084: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_manual , ru_gatling_gun , 100 ) ;
4085: LD_INT 24
4087: PPUSH
4088: LD_INT 3
4090: PPUSH
4091: LD_INT 1
4093: PPUSH
4094: LD_INT 43
4096: PPUSH
4097: LD_INT 100
4099: PPUSH
4100: CALL 17332 0 5
// for i = 1 to 8 do
4104: LD_ADDR_VAR 0 2
4108: PUSH
4109: DOUBLE
4110: LD_INT 1
4112: DEC
4113: ST_TO_ADDR
4114: LD_INT 8
4116: PUSH
4117: FOR_TO
4118: IFFALSE 4201
// begin vehicle := CreateVehicle ;
4120: LD_ADDR_VAR 0 3
4124: PUSH
4125: CALL_OW 45
4129: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
4130: LD_VAR 0 4
4134: PUSH
4135: LD_INT 1
4137: ARRAY
4138: PPUSH
4139: LD_VAR 0 3
4143: PPUSH
4144: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
4148: LD_ADDR_VAR 0 4
4152: PUSH
4153: LD_VAR 0 4
4157: PUSH
4158: LD_VAR 0 4
4162: PUSH
4163: LD_INT 1
4165: ARRAY
4166: DIFF
4167: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4168: LD_VAR 0 3
4172: PPUSH
4173: LD_INT 5
4175: PPUSH
4176: LD_INT 0
4178: PPUSH
4179: CALL_OW 49
// vehs := vehs ^ vehicle ;
4183: LD_ADDR_VAR 0 6
4187: PUSH
4188: LD_VAR 0 6
4192: PUSH
4193: LD_VAR 0 3
4197: ADD
4198: ST_TO_ADDR
// end ;
4199: GO 4117
4201: POP
4202: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_gun , 100 ) ;
4203: LD_INT 22
4205: PPUSH
4206: LD_INT 3
4208: PPUSH
4209: LD_INT 1
4211: PPUSH
4212: LD_INT 44
4214: PPUSH
4215: LD_INT 100
4217: PPUSH
4218: CALL 17332 0 5
// for i = 1 to 4 do
4222: LD_ADDR_VAR 0 2
4226: PUSH
4227: DOUBLE
4228: LD_INT 1
4230: DEC
4231: ST_TO_ADDR
4232: LD_INT 4
4234: PUSH
4235: FOR_TO
4236: IFFALSE 4319
// begin vehicle := CreateVehicle ;
4238: LD_ADDR_VAR 0 3
4242: PUSH
4243: CALL_OW 45
4247: ST_TO_ADDR
// PlaceHumanInUnit ( soldiers [ 1 ] , vehicle ) ;
4248: LD_VAR 0 4
4252: PUSH
4253: LD_INT 1
4255: ARRAY
4256: PPUSH
4257: LD_VAR 0 3
4261: PPUSH
4262: CALL_OW 52
// soldiers := soldiers diff soldiers [ 1 ] ;
4266: LD_ADDR_VAR 0 4
4270: PUSH
4271: LD_VAR 0 4
4275: PUSH
4276: LD_VAR 0 4
4280: PUSH
4281: LD_INT 1
4283: ARRAY
4284: DIFF
4285: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4286: LD_VAR 0 3
4290: PPUSH
4291: LD_INT 5
4293: PPUSH
4294: LD_INT 0
4296: PPUSH
4297: CALL_OW 49
// vehs := vehs ^ vehicle ;
4301: LD_ADDR_VAR 0 6
4305: PUSH
4306: LD_VAR 0 6
4310: PUSH
4311: LD_VAR 0 3
4315: ADD
4316: ST_TO_ADDR
// end ;
4317: GO 4235
4319: POP
4320: POP
// RUArmada := vehs ;
4321: LD_ADDR_EXP 17
4325: PUSH
4326: LD_VAR 0 6
4330: ST_TO_ADDR
// SetMark ( [ IsInUnit ( Yashin ) , IsInUnit ( Popov ) , IsInUnit ( Gaydar ) , IsInUnit ( Sevi ) ] , - 6 ) ;
4331: LD_EXP 13
4335: PPUSH
4336: CALL_OW 310
4340: PUSH
4341: LD_EXP 14
4345: PPUSH
4346: CALL_OW 310
4350: PUSH
4351: LD_EXP 15
4355: PPUSH
4356: CALL_OW 310
4360: PUSH
4361: LD_EXP 16
4365: PPUSH
4366: CALL_OW 310
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: PPUSH
4377: LD_INT 6
4379: NEG
4380: PPUSH
4381: CALL_OW 242
// end ;
4385: LD_VAR 0 1
4389: RET
// export Bulldozers ; export function PrepareRUBulldozers ; var i , vehicle ; begin
4390: LD_INT 0
4392: PPUSH
4393: PPUSH
4394: PPUSH
// uc_side := 6 ;
4395: LD_ADDR_OWVAR 20
4399: PUSH
4400: LD_INT 6
4402: ST_TO_ADDR
// uc_nation := nation_russian ;
4403: LD_ADDR_OWVAR 21
4407: PUSH
4408: LD_INT 3
4410: ST_TO_ADDR
// Bulldozers := [ ] ;
4411: LD_ADDR_EXP 18
4415: PUSH
4416: EMPTY
4417: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_bulldozer , 100 ) ;
4418: LD_INT 24
4420: PPUSH
4421: LD_INT 3
4423: PPUSH
4424: LD_INT 3
4426: PPUSH
4427: LD_INT 53
4429: PPUSH
4430: LD_INT 100
4432: PPUSH
4433: CALL 17332 0 5
// for i = 1 to 2 do
4437: LD_ADDR_VAR 0 2
4441: PUSH
4442: DOUBLE
4443: LD_INT 1
4445: DEC
4446: ST_TO_ADDR
4447: LD_INT 2
4449: PUSH
4450: FOR_TO
4451: IFFALSE 4496
// begin vehicle := CreateVehicle ;
4453: LD_ADDR_VAR 0 3
4457: PUSH
4458: CALL_OW 45
4462: ST_TO_ADDR
// PlaceUnitArea ( vehicle , RUArrivalArea , false ) ;
4463: LD_VAR 0 3
4467: PPUSH
4468: LD_INT 5
4470: PPUSH
4471: LD_INT 0
4473: PPUSH
4474: CALL_OW 49
// Bulldozers := Bulldozers ^ vehicle ;
4478: LD_ADDR_EXP 18
4482: PUSH
4483: LD_EXP 18
4487: PUSH
4488: LD_VAR 0 3
4492: ADD
4493: ST_TO_ADDR
// end ;
4494: GO 4450
4496: POP
4497: POP
// end ;
4498: LD_VAR 0 1
4502: RET
// export Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ; export function PrepareRUBase ; var i , filter , un ; begin
4503: LD_INT 0
4505: PPUSH
4506: PPUSH
4507: PPUSH
4508: PPUSH
// uc_side := 3 ;
4509: LD_ADDR_OWVAR 20
4513: PUSH
4514: LD_INT 3
4516: ST_TO_ADDR
// uc_nation := nation_russian ;
4517: LD_ADDR_OWVAR 21
4521: PUSH
4522: LD_INT 3
4524: ST_TO_ADDR
// hc_name :=  ;
4525: LD_ADDR_OWVAR 26
4529: PUSH
4530: LD_STRING 
4532: ST_TO_ADDR
// hc_gallery :=  ;
4533: LD_ADDR_OWVAR 33
4537: PUSH
4538: LD_STRING 
4540: ST_TO_ADDR
// Burlak := NewCharacter ( Burlak ) ;
4541: LD_ADDR_EXP 19
4545: PUSH
4546: LD_STRING Burlak
4548: PPUSH
4549: CALL_OW 25
4553: ST_TO_ADDR
// Gleb := NewCharacter ( Gleb ) ;
4554: LD_ADDR_EXP 20
4558: PUSH
4559: LD_STRING Gleb
4561: PPUSH
4562: CALL_OW 25
4566: ST_TO_ADDR
// Furmanov := NewCharacter ( Furmanov ) ;
4567: LD_ADDR_EXP 21
4571: PUSH
4572: LD_STRING Furmanov
4574: PPUSH
4575: CALL_OW 25
4579: ST_TO_ADDR
// Titov := NewCharacter ( Titov ) ;
4580: LD_ADDR_EXP 22
4584: PUSH
4585: LD_STRING Titov
4587: PPUSH
4588: CALL_OW 25
4592: ST_TO_ADDR
// Scholtze := NewCharacter ( Scholtze ) ;
4593: LD_ADDR_EXP 23
4597: PUSH
4598: LD_STRING Scholtze
4600: PPUSH
4601: CALL_OW 25
4605: ST_TO_ADDR
// Dolgov := NewCharacter ( Dolgov ) ;
4606: LD_ADDR_EXP 24
4610: PUSH
4611: LD_STRING Dolgov
4613: PPUSH
4614: CALL_OW 25
4618: ST_TO_ADDR
// Kapitsova := NewCharacter ( Kapitsova ) ;
4619: LD_ADDR_EXP 25
4623: PUSH
4624: LD_STRING Kapitsova
4626: PPUSH
4627: CALL_OW 25
4631: ST_TO_ADDR
// Karamazov := NewCharacter ( Karamazov ) ;
4632: LD_ADDR_EXP 26
4636: PUSH
4637: LD_STRING Karamazov
4639: PPUSH
4640: CALL_OW 25
4644: ST_TO_ADDR
// Kirlenkova := NewCharacter ( Kirlenkova ) ;
4645: LD_ADDR_EXP 27
4649: PUSH
4650: LD_STRING Kirlenkova
4652: PPUSH
4653: CALL_OW 25
4657: ST_TO_ADDR
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
4658: LD_ADDR_EXP 28
4662: PUSH
4663: LD_STRING Kovalyuk
4665: PPUSH
4666: CALL_OW 25
4670: ST_TO_ADDR
// Kozlov := NewCharacter ( Kozlov ) ;
4671: LD_ADDR_EXP 29
4675: PUSH
4676: LD_STRING Kozlov
4678: PPUSH
4679: CALL_OW 25
4683: ST_TO_ADDR
// Kuzmov := NewCharacter ( Kuzmov ) ;
4684: LD_ADDR_EXP 30
4688: PUSH
4689: LD_STRING Kuzmov
4691: PPUSH
4692: CALL_OW 25
4696: ST_TO_ADDR
// Lipshchin := NewCharacter ( Lipshchin ) ;
4697: LD_ADDR_EXP 31
4701: PUSH
4702: LD_STRING Lipshchin
4704: PPUSH
4705: CALL_OW 25
4709: ST_TO_ADDR
// Oblukov := NewCharacter ( Oblukov ) ;
4710: LD_ADDR_EXP 32
4714: PUSH
4715: LD_STRING Oblukov
4717: PPUSH
4718: CALL_OW 25
4722: ST_TO_ADDR
// Xavier2 := NewCharacter ( Xavier2 ) ;
4723: LD_ADDR_EXP 33
4727: PUSH
4728: LD_STRING Xavier2
4730: PPUSH
4731: CALL_OW 25
4735: ST_TO_ADDR
// Gnyevko := NewCharacter ( Gnyevko ) ;
4736: LD_ADDR_EXP 34
4740: PUSH
4741: LD_STRING Gnyevko
4743: PPUSH
4744: CALL_OW 25
4748: ST_TO_ADDR
// Belkov := NewCharacter ( Belkov ) ;
4749: LD_ADDR_EXP 35
4753: PUSH
4754: LD_STRING Belkov
4756: PPUSH
4757: CALL_OW 25
4761: ST_TO_ADDR
// filter := [ Burlak , Gleb , Furmanov , Titov , Scholtze , Dolgov , Kapitsova , Karamazov , Kirlenkova , Kovalyuk , Kozlov , Kuzmov , Lipshchin , Oblukov , Xavier2 , Gnyevko , Belkov ] ;
4762: LD_ADDR_VAR 0 3
4766: PUSH
4767: LD_EXP 19
4771: PUSH
4772: LD_EXP 20
4776: PUSH
4777: LD_EXP 21
4781: PUSH
4782: LD_EXP 22
4786: PUSH
4787: LD_EXP 23
4791: PUSH
4792: LD_EXP 24
4796: PUSH
4797: LD_EXP 25
4801: PUSH
4802: LD_EXP 26
4806: PUSH
4807: LD_EXP 27
4811: PUSH
4812: LD_EXP 28
4816: PUSH
4817: LD_EXP 29
4821: PUSH
4822: LD_EXP 30
4826: PUSH
4827: LD_EXP 31
4831: PUSH
4832: LD_EXP 32
4836: PUSH
4837: LD_EXP 33
4841: PUSH
4842: LD_EXP 34
4846: PUSH
4847: LD_EXP 35
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: ST_TO_ADDR
// for i = 1 to filter do
4871: LD_ADDR_VAR 0 2
4875: PUSH
4876: DOUBLE
4877: LD_INT 1
4879: DEC
4880: ST_TO_ADDR
4881: LD_VAR 0 3
4885: PUSH
4886: FOR_TO
4887: IFFALSE 4912
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
4889: LD_VAR 0 3
4893: PUSH
4894: LD_VAR 0 2
4898: ARRAY
4899: PPUSH
4900: LD_INT 6
4902: PPUSH
4903: LD_INT 0
4905: PPUSH
4906: CALL_OW 49
4910: GO 4886
4912: POP
4913: POP
// end ;
4914: LD_VAR 0 1
4918: RET
// export RU_SecondPersonnel ; export function PrepareRUBase_v2 ; var i , filter , un ; begin
4919: LD_INT 0
4921: PPUSH
4922: PPUSH
4923: PPUSH
4924: PPUSH
// uc_side := 3 ;
4925: LD_ADDR_OWVAR 20
4929: PUSH
4930: LD_INT 3
4932: ST_TO_ADDR
// uc_nation := nation_russian ;
4933: LD_ADDR_OWVAR 21
4937: PUSH
4938: LD_INT 3
4940: ST_TO_ADDR
// hc_name :=  ;
4941: LD_ADDR_OWVAR 26
4945: PUSH
4946: LD_STRING 
4948: ST_TO_ADDR
// hc_gallery :=  ;
4949: LD_ADDR_OWVAR 33
4953: PUSH
4954: LD_STRING 
4956: ST_TO_ADDR
// for i = 1 to 8 do
4957: LD_ADDR_VAR 0 2
4961: PUSH
4962: DOUBLE
4963: LD_INT 1
4965: DEC
4966: ST_TO_ADDR
4967: LD_INT 8
4969: PUSH
4970: FOR_TO
4971: IFFALSE 5013
// begin PrepareSoldier ( 0 , game_eskill ) ;
4973: LD_INT 0
4975: PPUSH
4976: LD_EXP 40
4980: PPUSH
4981: CALL_OW 381
// un := CreateHuman ;
4985: LD_ADDR_VAR 0 4
4989: PUSH
4990: CALL_OW 44
4994: ST_TO_ADDR
// filter := filter ^ un ;
4995: LD_ADDR_VAR 0 3
4999: PUSH
5000: LD_VAR 0 3
5004: PUSH
5005: LD_VAR 0 4
5009: ADD
5010: ST_TO_ADDR
// end ;
5011: GO 4970
5013: POP
5014: POP
// for i = 1 to 4 do
5015: LD_ADDR_VAR 0 2
5019: PUSH
5020: DOUBLE
5021: LD_INT 1
5023: DEC
5024: ST_TO_ADDR
5025: LD_INT 4
5027: PUSH
5028: FOR_TO
5029: IFFALSE 5071
// begin PrepareEngineer ( 0 , game_eskill ) ;
5031: LD_INT 0
5033: PPUSH
5034: LD_EXP 40
5038: PPUSH
5039: CALL_OW 382
// un := CreateHuman ;
5043: LD_ADDR_VAR 0 4
5047: PUSH
5048: CALL_OW 44
5052: ST_TO_ADDR
// filter := filter ^ un ;
5053: LD_ADDR_VAR 0 3
5057: PUSH
5058: LD_VAR 0 3
5062: PUSH
5063: LD_VAR 0 4
5067: ADD
5068: ST_TO_ADDR
// end ;
5069: GO 5028
5071: POP
5072: POP
// for i = 1 to 6 do
5073: LD_ADDR_VAR 0 2
5077: PUSH
5078: DOUBLE
5079: LD_INT 1
5081: DEC
5082: ST_TO_ADDR
5083: LD_INT 6
5085: PUSH
5086: FOR_TO
5087: IFFALSE 5129
// begin PrepareMechanic ( 0 , game_eskill ) ;
5089: LD_INT 0
5091: PPUSH
5092: LD_EXP 40
5096: PPUSH
5097: CALL_OW 383
// un := CreateHuman ;
5101: LD_ADDR_VAR 0 4
5105: PUSH
5106: CALL_OW 44
5110: ST_TO_ADDR
// filter := filter ^ un ;
5111: LD_ADDR_VAR 0 3
5115: PUSH
5116: LD_VAR 0 3
5120: PUSH
5121: LD_VAR 0 4
5125: ADD
5126: ST_TO_ADDR
// end ;
5127: GO 5086
5129: POP
5130: POP
// for i = 1 to 4 do
5131: LD_ADDR_VAR 0 2
5135: PUSH
5136: DOUBLE
5137: LD_INT 1
5139: DEC
5140: ST_TO_ADDR
5141: LD_INT 4
5143: PUSH
5144: FOR_TO
5145: IFFALSE 5187
// begin PrepareScientist ( 0 , game_eskill ) ;
5147: LD_INT 0
5149: PPUSH
5150: LD_EXP 40
5154: PPUSH
5155: CALL_OW 384
// un := CreateHuman ;
5159: LD_ADDR_VAR 0 4
5163: PUSH
5164: CALL_OW 44
5168: ST_TO_ADDR
// filter := filter ^ un ;
5169: LD_ADDR_VAR 0 3
5173: PUSH
5174: LD_VAR 0 3
5178: PUSH
5179: LD_VAR 0 4
5183: ADD
5184: ST_TO_ADDR
// end ;
5185: GO 5144
5187: POP
5188: POP
// for i = 1 to filter do
5189: LD_ADDR_VAR 0 2
5193: PUSH
5194: DOUBLE
5195: LD_INT 1
5197: DEC
5198: ST_TO_ADDR
5199: LD_VAR 0 3
5203: PUSH
5204: FOR_TO
5205: IFFALSE 5230
// PlaceUnitArea ( filter [ i ] , RUArrivalArea2 , false ) ;
5207: LD_VAR 0 3
5211: PUSH
5212: LD_VAR 0 2
5216: ARRAY
5217: PPUSH
5218: LD_INT 6
5220: PPUSH
5221: LD_INT 0
5223: PPUSH
5224: CALL_OW 49
5228: GO 5204
5230: POP
5231: POP
// RU_SecondPersonnel := filter ;
5232: LD_ADDR_EXP 36
5236: PUSH
5237: LD_VAR 0 3
5241: ST_TO_ADDR
// end ;
5242: LD_VAR 0 1
5246: RET
// export JMM ; export function JMMReinforcement ; var i , soldiers , un , vehs , vehicle , mechs ; begin
5247: LD_INT 0
5249: PPUSH
5250: PPUSH
5251: PPUSH
5252: PPUSH
5253: PPUSH
5254: PPUSH
5255: PPUSH
// uc_side := 1 ;
5256: LD_ADDR_OWVAR 20
5260: PUSH
5261: LD_INT 1
5263: ST_TO_ADDR
// uc_nation := nation_american ;
5264: LD_ADDR_OWVAR 21
5268: PUSH
5269: LD_INT 1
5271: ST_TO_ADDR
// JMM := NewCharacter ( JMM ) ;
5272: LD_ADDR_EXP 37
5276: PUSH
5277: LD_STRING JMM
5279: PPUSH
5280: CALL_OW 25
5284: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
5285: LD_EXP 37
5289: PPUSH
5290: LD_INT 1
5292: PPUSH
5293: CALL_OW 233
// PlaceUnitArea ( JMM , JMMArrivalArea , false ) ;
5297: LD_EXP 37
5301: PPUSH
5302: LD_INT 7
5304: PPUSH
5305: LD_INT 0
5307: PPUSH
5308: CALL_OW 49
// mechs := [ ] ;
5312: LD_ADDR_VAR 0 7
5316: PUSH
5317: EMPTY
5318: ST_TO_ADDR
// for i = 1 to [ 4 , 3 , 3 ] [ Difficulty ] do
5319: LD_ADDR_VAR 0 2
5323: PUSH
5324: DOUBLE
5325: LD_INT 1
5327: DEC
5328: ST_TO_ADDR
5329: LD_INT 4
5331: PUSH
5332: LD_INT 3
5334: PUSH
5335: LD_INT 3
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: LIST
5342: PUSH
5343: LD_OWVAR 67
5347: ARRAY
5348: PUSH
5349: FOR_TO
5350: IFFALSE 5411
// begin PrepareSoldier ( 0 , game_skill + 1 ) ;
5352: LD_INT 0
5354: PPUSH
5355: LD_EXP 39
5359: PUSH
5360: LD_INT 1
5362: PLUS
5363: PPUSH
5364: CALL_OW 381
// un := CreateHuman ;
5368: LD_ADDR_VAR 0 4
5372: PUSH
5373: CALL_OW 44
5377: ST_TO_ADDR
// soldiers := soldiers ^ un ;
5378: LD_ADDR_VAR 0 3
5382: PUSH
5383: LD_VAR 0 3
5387: PUSH
5388: LD_VAR 0 4
5392: ADD
5393: ST_TO_ADDR
// PlaceUnitArea ( un , JMMArrivalArea , false ) ;
5394: LD_VAR 0 4
5398: PPUSH
5399: LD_INT 7
5401: PPUSH
5402: LD_INT 0
5404: PPUSH
5405: CALL_OW 49
// end ;
5409: GO 5349
5411: POP
5412: POP
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
5413: LD_ADDR_VAR 0 2
5417: PUSH
5418: DOUBLE
5419: LD_INT 1
5421: DEC
5422: ST_TO_ADDR
5423: LD_INT 7
5425: PUSH
5426: LD_INT 6
5428: PUSH
5429: LD_INT 4
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: LIST
5436: PUSH
5437: LD_OWVAR 67
5441: ARRAY
5442: PUSH
5443: FOR_TO
5444: IFFALSE 5490
// begin PrepareMechanic ( 0 , game_skill + 1 ) ;
5446: LD_INT 0
5448: PPUSH
5449: LD_EXP 39
5453: PUSH
5454: LD_INT 1
5456: PLUS
5457: PPUSH
5458: CALL_OW 383
// un := CreateHuman ;
5462: LD_ADDR_VAR 0 4
5466: PUSH
5467: CALL_OW 44
5471: ST_TO_ADDR
// mechs := mechs ^ un ;
5472: LD_ADDR_VAR 0 7
5476: PUSH
5477: LD_VAR 0 7
5481: PUSH
5482: LD_VAR 0 4
5486: ADD
5487: ST_TO_ADDR
// end ;
5488: GO 5443
5490: POP
5491: POP
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_manual , us_double_gun , 100 ) ;
5492: LD_INT 3
5494: PPUSH
5495: LD_INT 3
5497: PPUSH
5498: LD_INT 1
5500: PPUSH
5501: LD_INT 5
5503: PPUSH
5504: LD_INT 100
5506: PPUSH
5507: CALL 17332 0 5
// for i = 1 to [ 7 , 6 , 4 ] [ Difficulty ] do
5511: LD_ADDR_VAR 0 2
5515: PUSH
5516: DOUBLE
5517: LD_INT 1
5519: DEC
5520: ST_TO_ADDR
5521: LD_INT 7
5523: PUSH
5524: LD_INT 6
5526: PUSH
5527: LD_INT 4
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: LIST
5534: PUSH
5535: LD_OWVAR 67
5539: ARRAY
5540: PUSH
5541: FOR_TO
5542: IFFALSE 5637
// begin vehicle := CreateVehicle ;
5544: LD_ADDR_VAR 0 6
5548: PUSH
5549: CALL_OW 45
5553: ST_TO_ADDR
// PlaceHumanInUnit ( mechs [ 1 ] , vehicle ) ;
5554: LD_VAR 0 7
5558: PUSH
5559: LD_INT 1
5561: ARRAY
5562: PPUSH
5563: LD_VAR 0 6
5567: PPUSH
5568: CALL_OW 52
// mechs := mechs diff mechs [ 1 ] ;
5572: LD_ADDR_VAR 0 7
5576: PUSH
5577: LD_VAR 0 7
5581: PUSH
5582: LD_VAR 0 7
5586: PUSH
5587: LD_INT 1
5589: ARRAY
5590: DIFF
5591: ST_TO_ADDR
// SetDir ( vehicle , 1 ) ;
5592: LD_VAR 0 6
5596: PPUSH
5597: LD_INT 1
5599: PPUSH
5600: CALL_OW 233
// PlaceUnitArea ( vehicle , JMMArrivalArea , false ) ;
5604: LD_VAR 0 6
5608: PPUSH
5609: LD_INT 7
5611: PPUSH
5612: LD_INT 0
5614: PPUSH
5615: CALL_OW 49
// vehs := vehs ^ vehicle ;
5619: LD_ADDR_VAR 0 5
5623: PUSH
5624: LD_VAR 0 5
5628: PUSH
5629: LD_VAR 0 6
5633: ADD
5634: ST_TO_ADDR
// end ;
5635: GO 5541
5637: POP
5638: POP
// end ; end_of_file
5639: LD_VAR 0 1
5643: RET
// export game_diff ; export game_skill , game_eskill ; export jmmArrival , ruArrival ; export startCrates ; export function GameType ; var i , ruStartTechs ; begin
5644: LD_INT 0
5646: PPUSH
5647: PPUSH
5648: PPUSH
// Difficulty := GetMultiplayerSetting ( 0 ) ;
5649: LD_ADDR_OWVAR 67
5653: PUSH
5654: LD_INT 0
5656: PPUSH
5657: CALL_OW 426
5661: ST_TO_ADDR
// game_diff := Difficulty ;
5662: LD_ADDR_EXP 38
5666: PUSH
5667: LD_OWVAR 67
5671: ST_TO_ADDR
// game_skill := [ 7 , 6 , 6 ] [ game_diff ] ;
5672: LD_ADDR_EXP 39
5676: PUSH
5677: LD_INT 7
5679: PUSH
5680: LD_INT 6
5682: PUSH
5683: LD_INT 6
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: LIST
5690: PUSH
5691: LD_EXP 38
5695: ARRAY
5696: ST_TO_ADDR
// game_eskill := [ 6 , 7 , 8 ] [ game_diff ] ;
5697: LD_ADDR_EXP 40
5701: PUSH
5702: LD_INT 6
5704: PUSH
5705: LD_INT 7
5707: PUSH
5708: LD_INT 8
5710: PUSH
5711: EMPTY
5712: LIST
5713: LIST
5714: LIST
5715: PUSH
5716: LD_EXP 38
5720: ARRAY
5721: ST_TO_ADDR
// ruArrival := [ 5 5$00 , 3 3$00 , 2 2$00 ] [ game_diff ] ;
5722: LD_ADDR_EXP 42
5726: PUSH
5727: LD_INT 10500
5729: PUSH
5730: LD_INT 6300
5732: PUSH
5733: LD_INT 4200
5735: PUSH
5736: EMPTY
5737: LIST
5738: LIST
5739: LIST
5740: PUSH
5741: LD_EXP 38
5745: ARRAY
5746: ST_TO_ADDR
// jmmArrival := [ 35 35$00 , 45 45$00 , 55 55$00 ] [ game_diff ] ;
5747: LD_ADDR_EXP 41
5751: PUSH
5752: LD_INT 73500
5754: PUSH
5755: LD_INT 94500
5757: PUSH
5758: LD_INT 115500
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: LIST
5765: PUSH
5766: LD_EXP 38
5770: ARRAY
5771: ST_TO_ADDR
// ruStartTechs = [ [ tech_Weap1 ] , [ tech_Weap1 , tech_Comp1 ] , [ tech_Weap1 , tech_Weap2 , tech_Comp1 ] ] ;
5772: LD_ADDR_VAR 0 3
5776: PUSH
5777: LD_INT 51
5779: PUSH
5780: EMPTY
5781: LIST
5782: PUSH
5783: LD_INT 51
5785: PUSH
5786: LD_INT 57
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: PUSH
5793: LD_INT 51
5795: PUSH
5796: LD_INT 52
5798: PUSH
5799: LD_INT 57
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: LIST
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: LIST
5811: ST_TO_ADDR
// startCrates = [ [ 300 , 350 ] , [ 230 , 200 ] , [ 150 , 100 ] ] [ game_diff ] ;
5812: LD_ADDR_EXP 43
5816: PUSH
5817: LD_INT 300
5819: PUSH
5820: LD_INT 350
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: PUSH
5827: LD_INT 230
5829: PUSH
5830: LD_INT 200
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: PUSH
5837: LD_INT 150
5839: PUSH
5840: LD_INT 100
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PUSH
5847: EMPTY
5848: LIST
5849: LIST
5850: LIST
5851: PUSH
5852: LD_EXP 38
5856: ARRAY
5857: ST_TO_ADDR
// for i := 1 to ruStartTechs [ game_diff ] do
5858: LD_ADDR_VAR 0 2
5862: PUSH
5863: DOUBLE
5864: LD_INT 1
5866: DEC
5867: ST_TO_ADDR
5868: LD_VAR 0 3
5872: PUSH
5873: LD_EXP 38
5877: ARRAY
5878: PUSH
5879: FOR_TO
5880: IFFALSE 5938
// begin SetTech ( ruStartTechs [ game_diff ] [ i ] , 3 , state_researched ) ;
5882: LD_VAR 0 3
5886: PUSH
5887: LD_EXP 38
5891: ARRAY
5892: PUSH
5893: LD_VAR 0 2
5897: ARRAY
5898: PPUSH
5899: LD_INT 3
5901: PPUSH
5902: LD_INT 2
5904: PPUSH
5905: CALL_OW 322
// SetTech ( ruStartTechs [ game_diff ] [ i ] , 6 , state_researched ) ;
5909: LD_VAR 0 3
5913: PUSH
5914: LD_EXP 38
5918: ARRAY
5919: PUSH
5920: LD_VAR 0 2
5924: ARRAY
5925: PPUSH
5926: LD_INT 6
5928: PPUSH
5929: LD_INT 2
5931: PPUSH
5932: CALL_OW 322
// end ;
5936: GO 5879
5938: POP
5939: POP
// end ; end_of_file
5940: LD_VAR 0 1
5944: RET
// export function CustomEvent ( event ) ; begin
5945: LD_INT 0
5947: PPUSH
// end ;
5948: LD_VAR 0 2
5952: RET
// export function CustomInitMacro ( ) ; begin
5953: LD_INT 0
5955: PPUSH
// MC_SetScanArea ( 1 , RU_Base_Area ) ;
5956: LD_INT 1
5958: PPUSH
5959: LD_INT 3
5961: PPUSH
5962: CALL 73916 0 2
// MC_SetParkingArea ( 1 , RU_Base_Parking ) ;
5966: LD_INT 1
5968: PPUSH
5969: LD_INT 4
5971: PPUSH
5972: CALL 73860 0 2
// MC_SetDepositsXY ( 1 , [ [ 136 , 130 , 0 ] , [ 145 , 123 , 0 ] , ] ) ;
5976: LD_INT 1
5978: PPUSH
5979: LD_INT 136
5981: PUSH
5982: LD_INT 130
5984: PUSH
5985: LD_INT 0
5987: PUSH
5988: EMPTY
5989: LIST
5990: LIST
5991: LIST
5992: PUSH
5993: LD_INT 145
5995: PUSH
5996: LD_INT 123
5998: PUSH
5999: LD_INT 0
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: LIST
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PPUSH
6011: CALL 72919 0 2
// MC_SetAllowedTurretWeapons ( 1 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
6015: LD_INT 1
6017: PPUSH
6018: LD_INT 43
6020: PUSH
6021: LD_INT 46
6023: PUSH
6024: LD_INT 45
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: LIST
6031: PPUSH
6032: CALL 73748 0 2
// MC_SetCratesArea ( 1 , RU_Base_Area ) ;
6036: LD_INT 1
6038: PPUSH
6039: LD_INT 3
6041: PPUSH
6042: CALL 73430 0 2
// MC_SetTame ( 1 , RU_Base_Area ) ;
6046: LD_INT 1
6048: PPUSH
6049: LD_INT 3
6051: PPUSH
6052: CALL 73161 0 2
// MC_SetDefenderLimit ( 1 , 8 ) ;
6056: LD_INT 1
6058: PPUSH
6059: LD_INT 8
6061: PPUSH
6062: CALL 72780 0 2
// MC_SetProduceList ( 1 , [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gun ] ] ) ;
6066: LD_INT 1
6068: PPUSH
6069: LD_INT 22
6071: PUSH
6072: LD_INT 1
6074: PUSH
6075: LD_INT 3
6077: PUSH
6078: LD_INT 43
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: LIST
6085: LIST
6086: PUSH
6087: LD_INT 22
6089: PUSH
6090: LD_INT 1
6092: PUSH
6093: LD_INT 3
6095: PUSH
6096: LD_INT 44
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: PUSH
6105: LD_INT 22
6107: PUSH
6108: LD_INT 1
6110: PUSH
6111: LD_INT 3
6113: PUSH
6114: LD_INT 45
6116: PUSH
6117: EMPTY
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: PUSH
6123: LD_INT 24
6125: PUSH
6126: LD_INT 1
6128: PUSH
6129: LD_INT 3
6131: PUSH
6132: LD_INT 43
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: PUSH
6141: LD_INT 24
6143: PUSH
6144: LD_INT 1
6146: PUSH
6147: LD_INT 3
6149: PUSH
6150: LD_INT 43
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: PUSH
6159: LD_INT 24
6161: PUSH
6162: LD_INT 1
6164: PUSH
6165: LD_INT 3
6167: PUSH
6168: LD_INT 46
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: LIST
6175: LIST
6176: PUSH
6177: LD_INT 22
6179: PUSH
6180: LD_INT 1
6182: PUSH
6183: LD_INT 3
6185: PUSH
6186: LD_INT 43
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: PUSH
6195: LD_INT 22
6197: PUSH
6198: LD_INT 1
6200: PUSH
6201: LD_INT 3
6203: PUSH
6204: LD_INT 44
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: PUSH
6213: EMPTY
6214: LIST
6215: LIST
6216: LIST
6217: LIST
6218: LIST
6219: LIST
6220: LIST
6221: LIST
6222: PPUSH
6223: CALL 72595 0 2
// MC_SetBuildingList ( 1 , [ [ b_depot , 127 , 125 , 5 ] , [ b_lab , 124 , 132 , 0 ] , [ b_oil_mine , 136 , 130 , 1 ] , [ b_armoury , 118 , 114 , 2 ] , [ b_oil_mine , 145 , 123 , 1 ] , [ b_oil_power , 150 , 135 , 1 ] , [ b_oil_power , 140 , 134 , 2 ] , [ b_oil_power , 137 , 121 , 5 ] , [ b_workshop , 155 , 130 , 0 ] , [ b_bunker , 155 , 130 , 0 ] , [ b_bunker , 130 , 114 , 3 ] , [ b_bunker , 142 , 115 , 3 ] , [ b_bunker , 153 , 120 , 3 ] , ] ) ;
6227: LD_INT 1
6229: PPUSH
6230: LD_INT 0
6232: PUSH
6233: LD_INT 127
6235: PUSH
6236: LD_INT 125
6238: PUSH
6239: LD_INT 5
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: PUSH
6248: LD_INT 6
6250: PUSH
6251: LD_INT 124
6253: PUSH
6254: LD_INT 132
6256: PUSH
6257: LD_INT 0
6259: PUSH
6260: EMPTY
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: PUSH
6266: LD_INT 29
6268: PUSH
6269: LD_INT 136
6271: PUSH
6272: LD_INT 130
6274: PUSH
6275: LD_INT 1
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: PUSH
6284: LD_INT 4
6286: PUSH
6287: LD_INT 118
6289: PUSH
6290: LD_INT 114
6292: PUSH
6293: LD_INT 2
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: PUSH
6302: LD_INT 29
6304: PUSH
6305: LD_INT 145
6307: PUSH
6308: LD_INT 123
6310: PUSH
6311: LD_INT 1
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: PUSH
6320: LD_INT 26
6322: PUSH
6323: LD_INT 150
6325: PUSH
6326: LD_INT 135
6328: PUSH
6329: LD_INT 1
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: PUSH
6338: LD_INT 26
6340: PUSH
6341: LD_INT 140
6343: PUSH
6344: LD_INT 134
6346: PUSH
6347: LD_INT 2
6349: PUSH
6350: EMPTY
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: PUSH
6356: LD_INT 26
6358: PUSH
6359: LD_INT 137
6361: PUSH
6362: LD_INT 121
6364: PUSH
6365: LD_INT 5
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: PUSH
6374: LD_INT 2
6376: PUSH
6377: LD_INT 155
6379: PUSH
6380: LD_INT 130
6382: PUSH
6383: LD_INT 0
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: PUSH
6392: LD_INT 32
6394: PUSH
6395: LD_INT 155
6397: PUSH
6398: LD_INT 130
6400: PUSH
6401: LD_INT 0
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: PUSH
6410: LD_INT 32
6412: PUSH
6413: LD_INT 130
6415: PUSH
6416: LD_INT 114
6418: PUSH
6419: LD_INT 3
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: PUSH
6428: LD_INT 32
6430: PUSH
6431: LD_INT 142
6433: PUSH
6434: LD_INT 115
6436: PUSH
6437: LD_INT 3
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: PUSH
6446: LD_INT 32
6448: PUSH
6449: LD_INT 153
6451: PUSH
6452: LD_INT 120
6454: PUSH
6455: LD_INT 3
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: PUSH
6464: EMPTY
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: PPUSH
6479: CALL 72487 0 2
// MC_SetLabKind ( 1 , [ b_lab_weapon , b_lab_computer ] ) ;
6483: LD_INT 1
6485: PPUSH
6486: LD_INT 10
6488: PUSH
6489: LD_INT 12
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: PPUSH
6496: CALL 73337 0 2
// MC_SetFactoryExtension ( 1 , 155 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
6500: LD_INT 1
6502: PPUSH
6503: LD_INT 155
6505: PPUSH
6506: LD_INT 130
6508: PPUSH
6509: LD_INT 0
6511: PPUSH
6512: LD_INT 24
6514: PUSH
6515: LD_INT 16
6517: PUSH
6518: LD_INT 17
6520: PUSH
6521: LD_INT 18
6523: PUSH
6524: LD_INT 21
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: PPUSH
6534: CALL 73542 0 5
// MC_SetScanArea ( 2 , RU_Base_Area ) ;
6538: LD_INT 2
6540: PPUSH
6541: LD_INT 3
6543: PPUSH
6544: CALL 73916 0 2
// MC_SetParkingArea ( 2 , RU_Base_Parking ) ;
6548: LD_INT 2
6550: PPUSH
6551: LD_INT 4
6553: PPUSH
6554: CALL 73860 0 2
// MC_SetDepositsXY ( 2 , [ [ 84 , 125 , 1 ] , ] ) ;
6558: LD_INT 2
6560: PPUSH
6561: LD_INT 84
6563: PUSH
6564: LD_INT 125
6566: PUSH
6567: LD_INT 1
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: LIST
6574: PUSH
6575: EMPTY
6576: LIST
6577: PPUSH
6578: CALL 72919 0 2
// MC_SetAllowedTurretWeapons ( 2 , [ ru_gatling_gun , ru_heavy_gun , ru_rocket_launcher ] ) ;
6582: LD_INT 2
6584: PPUSH
6585: LD_INT 43
6587: PUSH
6588: LD_INT 46
6590: PUSH
6591: LD_INT 45
6593: PUSH
6594: EMPTY
6595: LIST
6596: LIST
6597: LIST
6598: PPUSH
6599: CALL 73748 0 2
// MC_SetCratesArea ( 2 , RU_Base_Area ) ;
6603: LD_INT 2
6605: PPUSH
6606: LD_INT 3
6608: PPUSH
6609: CALL 73430 0 2
// MC_SetTame ( 2 , RU_Base_Area ) ;
6613: LD_INT 2
6615: PPUSH
6616: LD_INT 3
6618: PPUSH
6619: CALL 73161 0 2
// MC_SetDefenderLimit ( 2 , 8 ) ;
6623: LD_INT 2
6625: PPUSH
6626: LD_INT 8
6628: PPUSH
6629: CALL 72780 0 2
// MC_SetProduceList ( 2 , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gun ] ] ) ;
6633: LD_INT 2
6635: PPUSH
6636: LD_INT 22
6638: PUSH
6639: LD_INT 3
6641: PUSH
6642: LD_INT 3
6644: PUSH
6645: LD_INT 43
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: PUSH
6654: LD_INT 22
6656: PUSH
6657: LD_INT 3
6659: PUSH
6660: LD_INT 3
6662: PUSH
6663: LD_INT 44
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: PUSH
6672: LD_INT 22
6674: PUSH
6675: LD_INT 3
6677: PUSH
6678: LD_INT 3
6680: PUSH
6681: LD_INT 45
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: PUSH
6690: LD_INT 24
6692: PUSH
6693: LD_INT 3
6695: PUSH
6696: LD_INT 3
6698: PUSH
6699: LD_INT 43
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 24
6710: PUSH
6711: LD_INT 3
6713: PUSH
6714: LD_INT 3
6716: PUSH
6717: LD_INT 43
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: PUSH
6726: LD_INT 24
6728: PUSH
6729: LD_INT 3
6731: PUSH
6732: LD_INT 3
6734: PUSH
6735: LD_INT 46
6737: PUSH
6738: EMPTY
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: PUSH
6744: LD_INT 22
6746: PUSH
6747: LD_INT 3
6749: PUSH
6750: LD_INT 3
6752: PUSH
6753: LD_INT 43
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: PUSH
6762: LD_INT 22
6764: PUSH
6765: LD_INT 3
6767: PUSH
6768: LD_INT 3
6770: PUSH
6771: LD_INT 44
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: PPUSH
6790: CALL 72595 0 2
// MC_SetBuildingList ( 2 , [ [ b_depot , 96 , 125 , 0 ] , [ b_lab , 74 , 122 , 1 ] , [ b_siberite_mine , 84 , 125 , 1 ] , [ b_siberite_power , 86 , 128 , 1 ] , [ b_siberite_power , 85 , 130 , 2 ] , [ b_siberite_power , 88 , 132 , 5 ] , [ b_workshop , 106 , 130 , 0 ] , [ b_armoury , 99 , 114 , 3 ] , [ b_bunker , 72 , 112 , 2 ] , [ b_bunker , 78 , 110 , 3 ] , [ b_bunker , 84 , 110 , 2 ] , [ b_bunker , 105 , 117 , 3 ] , ] ) ;
6794: LD_INT 2
6796: PPUSH
6797: LD_INT 0
6799: PUSH
6800: LD_INT 96
6802: PUSH
6803: LD_INT 125
6805: PUSH
6806: LD_INT 0
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: PUSH
6815: LD_INT 6
6817: PUSH
6818: LD_INT 74
6820: PUSH
6821: LD_INT 122
6823: PUSH
6824: LD_INT 1
6826: PUSH
6827: EMPTY
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: PUSH
6833: LD_INT 30
6835: PUSH
6836: LD_INT 84
6838: PUSH
6839: LD_INT 125
6841: PUSH
6842: LD_INT 1
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: PUSH
6851: LD_INT 28
6853: PUSH
6854: LD_INT 86
6856: PUSH
6857: LD_INT 128
6859: PUSH
6860: LD_INT 1
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: PUSH
6869: LD_INT 28
6871: PUSH
6872: LD_INT 85
6874: PUSH
6875: LD_INT 130
6877: PUSH
6878: LD_INT 2
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: PUSH
6887: LD_INT 28
6889: PUSH
6890: LD_INT 88
6892: PUSH
6893: LD_INT 132
6895: PUSH
6896: LD_INT 5
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: LIST
6903: LIST
6904: PUSH
6905: LD_INT 2
6907: PUSH
6908: LD_INT 106
6910: PUSH
6911: LD_INT 130
6913: PUSH
6914: LD_INT 0
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: PUSH
6923: LD_INT 4
6925: PUSH
6926: LD_INT 99
6928: PUSH
6929: LD_INT 114
6931: PUSH
6932: LD_INT 3
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: PUSH
6941: LD_INT 32
6943: PUSH
6944: LD_INT 72
6946: PUSH
6947: LD_INT 112
6949: PUSH
6950: LD_INT 2
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: PUSH
6959: LD_INT 32
6961: PUSH
6962: LD_INT 78
6964: PUSH
6965: LD_INT 110
6967: PUSH
6968: LD_INT 3
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: PUSH
6977: LD_INT 32
6979: PUSH
6980: LD_INT 84
6982: PUSH
6983: LD_INT 110
6985: PUSH
6986: LD_INT 2
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: PUSH
6995: LD_INT 32
6997: PUSH
6998: LD_INT 105
7000: PUSH
7001: LD_INT 117
7003: PUSH
7004: LD_INT 3
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: PPUSH
7027: CALL 72487 0 2
// MC_SetLabKind ( 2 , [ b_lab_spacetime , b_lab_siberium ] ) ;
7031: LD_INT 2
7033: PPUSH
7034: LD_INT 14
7036: PUSH
7037: LD_INT 11
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PPUSH
7044: CALL 73337 0 2
// MC_SetFactoryExtension ( 2 , 106 , 130 , 0 , [ b_ext_computer , b_ext_track , b_ext_gun , b_ext_rocket , b_ext_siberium ] ) ;
7048: LD_INT 2
7050: PPUSH
7051: LD_INT 106
7053: PPUSH
7054: LD_INT 130
7056: PPUSH
7057: LD_INT 0
7059: PPUSH
7060: LD_INT 24
7062: PUSH
7063: LD_INT 16
7065: PUSH
7066: LD_INT 17
7068: PUSH
7069: LD_INT 18
7071: PUSH
7072: LD_INT 21
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: PPUSH
7082: CALL 73542 0 5
// end ;
7086: LD_VAR 0 1
7090: RET
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
7091: LD_INT 22
7093: PUSH
7094: LD_INT 3
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PUSH
7101: LD_INT 30
7103: PUSH
7104: LD_INT 3
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PPUSH
7115: CALL_OW 69
7119: IFFALSE 7975
7121: GO 7123
7123: DISABLE
7124: LD_INT 0
7126: PPUSH
7127: PPUSH
7128: PPUSH
7129: PPUSH
7130: PPUSH
7131: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
7132: LD_INT 6300
7134: PUSH
7135: LD_INT 4200
7137: PUSH
7138: LD_INT 2100
7140: PUSH
7141: EMPTY
7142: LIST
7143: LIST
7144: LIST
7145: PUSH
7146: LD_OWVAR 67
7150: ARRAY
7151: PPUSH
7152: CALL_OW 67
// base := 2 ;
7156: LD_ADDR_VAR 0 2
7160: PUSH
7161: LD_INT 2
7163: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
7164: LD_INT 22
7166: PUSH
7167: LD_INT 3
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: PUSH
7174: LD_INT 30
7176: PUSH
7177: LD_INT 3
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PPUSH
7188: CALL_OW 69
7192: NOT
7193: IFFALSE 7197
// continue ;
7195: GO 7132
// case Rand ( 1 , 3 ) of 1 :
7197: LD_INT 1
7199: PPUSH
7200: LD_INT 3
7202: PPUSH
7203: CALL_OW 12
7207: PUSH
7208: LD_INT 1
7210: DOUBLE
7211: EQUAL
7212: IFTRUE 7216
7214: GO 7392
7216: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
7217: LD_ADDR_VAR 0 3
7221: PUSH
7222: LD_INT 22
7224: PUSH
7225: LD_INT 3
7227: PUSH
7228: LD_INT 3
7230: PUSH
7231: LD_INT 43
7233: PUSH
7234: EMPTY
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: PUSH
7240: LD_INT 24
7242: PUSH
7243: LD_INT 3
7245: PUSH
7246: LD_INT 3
7248: PUSH
7249: LD_INT 46
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: PUSH
7258: LD_INT 24
7260: PUSH
7261: LD_INT 3
7263: PUSH
7264: LD_INT 3
7266: PUSH
7267: LD_INT 43
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: PUSH
7276: LD_INT 24
7278: PUSH
7279: LD_INT 3
7281: PUSH
7282: LD_INT 3
7284: PUSH
7285: LD_INT 46
7287: PUSH
7288: EMPTY
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: PUSH
7294: LD_INT 22
7296: PUSH
7297: LD_INT 3
7299: PUSH
7300: LD_INT 3
7302: PUSH
7303: LD_INT 45
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: PUSH
7312: LD_INT 22
7314: PUSH
7315: LD_INT 3
7317: PUSH
7318: LD_INT 3
7320: PUSH
7321: LD_INT 43
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: PUSH
7330: LD_INT 24
7332: PUSH
7333: LD_INT 3
7335: PUSH
7336: LD_INT 3
7338: PUSH
7339: LD_INT 46
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: PUSH
7348: LD_INT 22
7350: PUSH
7351: LD_INT 3
7353: PUSH
7354: LD_INT 3
7356: PUSH
7357: LD_INT 45
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7376: LD_VAR 0 2
7380: PPUSH
7381: LD_VAR 0 3
7385: PPUSH
7386: CALL 72643 0 2
// end ; 2 :
7390: GO 7723
7392: LD_INT 2
7394: DOUBLE
7395: EQUAL
7396: IFTRUE 7400
7398: GO 7538
7400: POP
// begin tmp := [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
7401: LD_ADDR_VAR 0 3
7405: PUSH
7406: LD_INT 24
7408: PUSH
7409: LD_INT 3
7411: PUSH
7412: LD_INT 3
7414: PUSH
7415: LD_INT 43
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: PUSH
7424: LD_INT 24
7426: PUSH
7427: LD_INT 3
7429: PUSH
7430: LD_INT 3
7432: PUSH
7433: LD_INT 46
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: PUSH
7442: LD_INT 24
7444: PUSH
7445: LD_INT 3
7447: PUSH
7448: LD_INT 3
7450: PUSH
7451: LD_INT 43
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: PUSH
7460: LD_INT 24
7462: PUSH
7463: LD_INT 3
7465: PUSH
7466: LD_INT 3
7468: PUSH
7469: LD_INT 46
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: PUSH
7478: LD_INT 22
7480: PUSH
7481: LD_INT 3
7483: PUSH
7484: LD_INT 3
7486: PUSH
7487: LD_INT 45
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: PUSH
7496: LD_INT 22
7498: PUSH
7499: LD_INT 3
7501: PUSH
7502: LD_INT 3
7504: PUSH
7505: LD_INT 45
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: LIST
7518: LIST
7519: LIST
7520: LIST
7521: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7522: LD_VAR 0 2
7526: PPUSH
7527: LD_VAR 0 3
7531: PPUSH
7532: CALL 72643 0 2
// end ; 3 :
7536: GO 7723
7538: LD_INT 3
7540: DOUBLE
7541: EQUAL
7542: IFTRUE 7546
7544: GO 7722
7546: POP
// begin tmp := [ [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher ] ] ;
7547: LD_ADDR_VAR 0 3
7551: PUSH
7552: LD_INT 22
7554: PUSH
7555: LD_INT 3
7557: PUSH
7558: LD_INT 3
7560: PUSH
7561: LD_INT 43
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: PUSH
7570: LD_INT 24
7572: PUSH
7573: LD_INT 3
7575: PUSH
7576: LD_INT 3
7578: PUSH
7579: LD_INT 46
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: PUSH
7588: LD_INT 22
7590: PUSH
7591: LD_INT 3
7593: PUSH
7594: LD_INT 3
7596: PUSH
7597: LD_INT 43
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: PUSH
7606: LD_INT 24
7608: PUSH
7609: LD_INT 3
7611: PUSH
7612: LD_INT 3
7614: PUSH
7615: LD_INT 46
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: PUSH
7624: LD_INT 22
7626: PUSH
7627: LD_INT 3
7629: PUSH
7630: LD_INT 3
7632: PUSH
7633: LD_INT 45
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: PUSH
7642: LD_INT 22
7644: PUSH
7645: LD_INT 3
7647: PUSH
7648: LD_INT 3
7650: PUSH
7651: LD_INT 43
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: PUSH
7660: LD_INT 24
7662: PUSH
7663: LD_INT 3
7665: PUSH
7666: LD_INT 3
7668: PUSH
7669: LD_INT 46
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: PUSH
7678: LD_INT 22
7680: PUSH
7681: LD_INT 3
7683: PUSH
7684: LD_INT 3
7686: PUSH
7687: LD_INT 45
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
7706: LD_VAR 0 2
7710: PPUSH
7711: LD_VAR 0 3
7715: PPUSH
7716: CALL 72643 0 2
// end ; end ;
7720: GO 7723
7722: POP
// repeat wait ( 0 0$1 ) ;
7723: LD_INT 35
7725: PPUSH
7726: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
7730: LD_VAR 0 2
7734: PPUSH
7735: CALL 72991 0 1
7739: PUSH
7740: LD_INT 0
7742: EQUAL
7743: IFFALSE 7723
// wait ( 0 0$30 ) ;
7745: LD_INT 1050
7747: PPUSH
7748: CALL_OW 67
// _target := [ [ 86 , 77 ] , [ 63 , 38 ] ] ;
7752: LD_ADDR_VAR 0 5
7756: PUSH
7757: LD_INT 86
7759: PUSH
7760: LD_INT 77
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PUSH
7767: LD_INT 63
7769: PUSH
7770: LD_INT 38
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
7781: LD_ADDR_VAR 0 4
7785: PUSH
7786: LD_INT 0
7788: PUSH
7789: LD_INT 0
7791: PUSH
7792: LD_INT 0
7794: PUSH
7795: LD_INT 1
7797: PUSH
7798: LD_INT 0
7800: PUSH
7801: LD_INT 0
7803: PUSH
7804: LD_INT 0
7806: PUSH
7807: LD_INT 0
7809: PUSH
7810: LD_INT 1
7812: PUSH
7813: LD_INT 0
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
7828: LD_ADDR_VAR 0 6
7832: PUSH
7833: LD_EXP 82
7837: PUSH
7838: LD_VAR 0 2
7842: ARRAY
7843: PUSH
7844: LD_EXP 85
7848: PUSH
7849: LD_VAR 0 2
7853: ARRAY
7854: DIFF
7855: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
7856: LD_ADDR_EXP 82
7860: PUSH
7861: LD_EXP 82
7865: PPUSH
7866: LD_VAR 0 2
7870: PPUSH
7871: LD_EXP 82
7875: PUSH
7876: LD_VAR 0 2
7880: ARRAY
7881: PUSH
7882: LD_VAR 0 6
7886: DIFF
7887: PPUSH
7888: CALL_OW 1
7892: ST_TO_ADDR
// if not attackers then
7893: LD_VAR 0 6
7897: NOT
7898: IFFALSE 7902
// continue ;
7900: GO 7132
// repeat wait ( 0 0$1 ) ;
7902: LD_INT 35
7904: PPUSH
7905: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
7909: LD_VAR 0 6
7913: PPUSH
7914: LD_INT 60
7916: PUSH
7917: EMPTY
7918: LIST
7919: PPUSH
7920: CALL_OW 72
7924: NOT
7925: IFFALSE 7902
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
7927: LD_VAR 0 2
7931: PPUSH
7932: LD_VAR 0 6
7936: PPUSH
7937: LD_VAR 0 5
7941: PPUSH
7942: LD_VAR 0 4
7946: PPUSH
7947: CALL 72828 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
7951: LD_EXP 63
7955: PUSH
7956: LD_VAR 0 2
7960: ARRAY
7961: PPUSH
7962: LD_INT 50
7964: PUSH
7965: EMPTY
7966: LIST
7967: PPUSH
7968: CALL_OW 72
7972: NOT
7973: IFFALSE 7132
// end ;
7975: PPOPN 6
7977: END
// every 1 1$00 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) do var i , base , tmp , flags , _target , attackers ;
7978: LD_INT 22
7980: PUSH
7981: LD_INT 3
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PUSH
7988: LD_INT 30
7990: PUSH
7991: LD_INT 3
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: PPUSH
8002: CALL_OW 69
8006: IFFALSE 8903
8008: GO 8010
8010: DISABLE
8011: LD_INT 0
8013: PPUSH
8014: PPUSH
8015: PPUSH
8016: PPUSH
8017: PPUSH
8018: PPUSH
// begin repeat wait ( [ 3 3$00 , 2 2$00 , 1 1$00 ] [ Difficulty ] ) ;
8019: LD_INT 6300
8021: PUSH
8022: LD_INT 4200
8024: PUSH
8025: LD_INT 2100
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: LIST
8032: PUSH
8033: LD_OWVAR 67
8037: ARRAY
8038: PPUSH
8039: CALL_OW 67
// base := 1 ;
8043: LD_ADDR_VAR 0 2
8047: PUSH
8048: LD_INT 1
8050: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
8051: LD_INT 22
8053: PUSH
8054: LD_INT 3
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: PUSH
8061: LD_INT 30
8063: PUSH
8064: LD_INT 3
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: PPUSH
8075: CALL_OW 69
8079: NOT
8080: IFFALSE 8084
// continue ;
8082: GO 8019
// case Rand ( 1 , 3 ) of 1 :
8084: LD_INT 1
8086: PPUSH
8087: LD_INT 3
8089: PPUSH
8090: CALL_OW 12
8094: PUSH
8095: LD_INT 1
8097: DOUBLE
8098: EQUAL
8099: IFTRUE 8103
8101: GO 8279
8103: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
8104: LD_ADDR_VAR 0 3
8108: PUSH
8109: LD_INT 22
8111: PUSH
8112: LD_INT 1
8114: PUSH
8115: LD_INT 3
8117: PUSH
8118: LD_INT 43
8120: PUSH
8121: EMPTY
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: PUSH
8127: LD_INT 24
8129: PUSH
8130: LD_INT 1
8132: PUSH
8133: LD_INT 3
8135: PUSH
8136: LD_INT 46
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: PUSH
8145: LD_INT 24
8147: PUSH
8148: LD_INT 1
8150: PUSH
8151: LD_INT 3
8153: PUSH
8154: LD_INT 43
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: PUSH
8163: LD_INT 24
8165: PUSH
8166: LD_INT 1
8168: PUSH
8169: LD_INT 3
8171: PUSH
8172: LD_INT 46
8174: PUSH
8175: EMPTY
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: PUSH
8181: LD_INT 22
8183: PUSH
8184: LD_INT 1
8186: PUSH
8187: LD_INT 3
8189: PUSH
8190: LD_INT 45
8192: PUSH
8193: EMPTY
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: PUSH
8199: LD_INT 22
8201: PUSH
8202: LD_INT 1
8204: PUSH
8205: LD_INT 3
8207: PUSH
8208: LD_INT 43
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: PUSH
8217: LD_INT 24
8219: PUSH
8220: LD_INT 1
8222: PUSH
8223: LD_INT 3
8225: PUSH
8226: LD_INT 46
8228: PUSH
8229: EMPTY
8230: LIST
8231: LIST
8232: LIST
8233: LIST
8234: PUSH
8235: LD_INT 22
8237: PUSH
8238: LD_INT 1
8240: PUSH
8241: LD_INT 3
8243: PUSH
8244: LD_INT 45
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
8263: LD_VAR 0 2
8267: PPUSH
8268: LD_VAR 0 3
8272: PPUSH
8273: CALL 72643 0 2
// end ; 2 :
8277: GO 8648
8279: LD_INT 2
8281: DOUBLE
8282: EQUAL
8283: IFTRUE 8287
8285: GO 8463
8287: POP
// begin tmp := [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
8288: LD_ADDR_VAR 0 3
8292: PUSH
8293: LD_INT 24
8295: PUSH
8296: LD_INT 1
8298: PUSH
8299: LD_INT 3
8301: PUSH
8302: LD_INT 43
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: PUSH
8311: LD_INT 24
8313: PUSH
8314: LD_INT 1
8316: PUSH
8317: LD_INT 3
8319: PUSH
8320: LD_INT 46
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: PUSH
8329: LD_INT 24
8331: PUSH
8332: LD_INT 1
8334: PUSH
8335: LD_INT 3
8337: PUSH
8338: LD_INT 43
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: PUSH
8347: LD_INT 24
8349: PUSH
8350: LD_INT 1
8352: PUSH
8353: LD_INT 3
8355: PUSH
8356: LD_INT 46
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: PUSH
8365: LD_INT 22
8367: PUSH
8368: LD_INT 1
8370: PUSH
8371: LD_INT 3
8373: PUSH
8374: LD_INT 45
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: PUSH
8383: LD_INT 22
8385: PUSH
8386: LD_INT 1
8388: PUSH
8389: LD_INT 3
8391: PUSH
8392: LD_INT 45
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: PUSH
8401: LD_INT 22
8403: PUSH
8404: LD_INT 1
8406: PUSH
8407: LD_INT 3
8409: PUSH
8410: LD_INT 45
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: PUSH
8419: LD_INT 22
8421: PUSH
8422: LD_INT 1
8424: PUSH
8425: LD_INT 3
8427: PUSH
8428: LD_INT 45
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: LIST
8435: LIST
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
8447: LD_VAR 0 2
8451: PPUSH
8452: LD_VAR 0 3
8456: PPUSH
8457: CALL 72643 0 2
// end ; 3 :
8461: GO 8648
8463: LD_INT 3
8465: DOUBLE
8466: EQUAL
8467: IFTRUE 8471
8469: GO 8647
8471: POP
// begin tmp := [ [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
8472: LD_ADDR_VAR 0 3
8476: PUSH
8477: LD_INT 22
8479: PUSH
8480: LD_INT 1
8482: PUSH
8483: LD_INT 3
8485: PUSH
8486: LD_INT 43
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: PUSH
8495: LD_INT 24
8497: PUSH
8498: LD_INT 1
8500: PUSH
8501: LD_INT 3
8503: PUSH
8504: LD_INT 46
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: PUSH
8513: LD_INT 22
8515: PUSH
8516: LD_INT 1
8518: PUSH
8519: LD_INT 3
8521: PUSH
8522: LD_INT 43
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: PUSH
8531: LD_INT 24
8533: PUSH
8534: LD_INT 1
8536: PUSH
8537: LD_INT 3
8539: PUSH
8540: LD_INT 46
8542: PUSH
8543: EMPTY
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: PUSH
8549: LD_INT 22
8551: PUSH
8552: LD_INT 1
8554: PUSH
8555: LD_INT 3
8557: PUSH
8558: LD_INT 45
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: PUSH
8567: LD_INT 22
8569: PUSH
8570: LD_INT 1
8572: PUSH
8573: LD_INT 3
8575: PUSH
8576: LD_INT 43
8578: PUSH
8579: EMPTY
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: PUSH
8585: LD_INT 24
8587: PUSH
8588: LD_INT 1
8590: PUSH
8591: LD_INT 3
8593: PUSH
8594: LD_INT 46
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: LIST
8601: LIST
8602: PUSH
8603: LD_INT 22
8605: PUSH
8606: LD_INT 1
8608: PUSH
8609: LD_INT 3
8611: PUSH
8612: LD_INT 45
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: PUSH
8621: EMPTY
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
8631: LD_VAR 0 2
8635: PPUSH
8636: LD_VAR 0 3
8640: PPUSH
8641: CALL 72643 0 2
// end ; end ;
8645: GO 8648
8647: POP
// repeat wait ( 0 0$1 ) ;
8648: LD_INT 35
8650: PPUSH
8651: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 8 ;
8655: LD_VAR 0 2
8659: PPUSH
8660: LD_INT 1
8662: PPUSH
8663: CALL 74061 0 2
8667: PUSH
8668: LD_INT 8
8670: GREATEREQUAL
8671: IFFALSE 8648
// wait ( 0 0$30 ) ;
8673: LD_INT 1050
8675: PPUSH
8676: CALL_OW 67
// _target := [ [ 144 , 65 ] , [ 63 , 38 ] ] ;
8680: LD_ADDR_VAR 0 5
8684: PUSH
8685: LD_INT 144
8687: PUSH
8688: LD_INT 65
8690: PUSH
8691: EMPTY
8692: LIST
8693: LIST
8694: PUSH
8695: LD_INT 63
8697: PUSH
8698: LD_INT 38
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 1 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
8709: LD_ADDR_VAR 0 4
8713: PUSH
8714: LD_INT 0
8716: PUSH
8717: LD_INT 0
8719: PUSH
8720: LD_INT 0
8722: PUSH
8723: LD_INT 1
8725: PUSH
8726: LD_INT 0
8728: PUSH
8729: LD_INT 0
8731: PUSH
8732: LD_INT 0
8734: PUSH
8735: LD_INT 0
8737: PUSH
8738: LD_INT 1
8740: PUSH
8741: LD_INT 0
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] ) ;
8756: LD_ADDR_VAR 0 6
8760: PUSH
8761: LD_EXP 82
8765: PUSH
8766: LD_VAR 0 2
8770: ARRAY
8771: PUSH
8772: LD_EXP 85
8776: PUSH
8777: LD_VAR 0 2
8781: ARRAY
8782: DIFF
8783: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
8784: LD_ADDR_EXP 82
8788: PUSH
8789: LD_EXP 82
8793: PPUSH
8794: LD_VAR 0 2
8798: PPUSH
8799: LD_EXP 82
8803: PUSH
8804: LD_VAR 0 2
8808: ARRAY
8809: PUSH
8810: LD_VAR 0 6
8814: DIFF
8815: PPUSH
8816: CALL_OW 1
8820: ST_TO_ADDR
// if not attackers then
8821: LD_VAR 0 6
8825: NOT
8826: IFFALSE 8830
// continue ;
8828: GO 8019
// repeat wait ( 0 0$1 ) ;
8830: LD_INT 35
8832: PPUSH
8833: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
8837: LD_VAR 0 6
8841: PPUSH
8842: LD_INT 60
8844: PUSH
8845: EMPTY
8846: LIST
8847: PPUSH
8848: CALL_OW 72
8852: NOT
8853: IFFALSE 8830
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
8855: LD_VAR 0 2
8859: PPUSH
8860: LD_VAR 0 6
8864: PPUSH
8865: LD_VAR 0 5
8869: PPUSH
8870: LD_VAR 0 4
8874: PPUSH
8875: CALL 72828 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
8879: LD_EXP 63
8883: PUSH
8884: LD_VAR 0 2
8888: ARRAY
8889: PPUSH
8890: LD_INT 50
8892: PUSH
8893: EMPTY
8894: LIST
8895: PPUSH
8896: CALL_OW 72
8900: NOT
8901: IFFALSE 8019
// end ;
8903: PPOPN 6
8905: END
// export RussiansDefeated ; every 0 0$1 trigger FirstAssaultRepelled and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
8906: LD_EXP 4
8910: PUSH
8911: LD_INT 22
8913: PUSH
8914: LD_INT 3
8916: PUSH
8917: EMPTY
8918: LIST
8919: LIST
8920: PUSH
8921: LD_INT 21
8923: PUSH
8924: LD_INT 1
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: PPUSH
8935: CALL_OW 69
8939: PUSH
8940: LD_INT 0
8942: EQUAL
8943: AND
8944: IFFALSE 8957
8946: GO 8948
8948: DISABLE
// begin RussiansDefeated := true ;
8949: LD_ADDR_EXP 44
8953: PUSH
8954: LD_INT 1
8956: ST_TO_ADDR
// end ;
8957: END
// every 0 0$1 trigger FirstAssaultRepelled and not JMM_Arrived do var i , un , filter , soldiers , bazookas , vehs , vehicle , medics , squad , attackers , _target , flags ;
8958: LD_EXP 4
8962: PUSH
8963: LD_EXP 6
8967: NOT
8968: AND
8969: IFFALSE 9942
8971: GO 8973
8973: DISABLE
8974: LD_INT 0
8976: PPUSH
8977: PPUSH
8978: PPUSH
8979: PPUSH
8980: PPUSH
8981: PPUSH
8982: PPUSH
8983: PPUSH
8984: PPUSH
8985: PPUSH
8986: PPUSH
8987: PPUSH
// begin wait ( [ Rand ( 4 4$00 , 4 4$30 ) , Rand ( 4 4$30 , 3 3$30 ) , Rand ( 3 3$00 , 2 2$00 ) ] [ Difficulty ] ) ;
8988: LD_INT 8400
8990: PPUSH
8991: LD_INT 9450
8993: PPUSH
8994: CALL_OW 12
8998: PUSH
8999: LD_INT 9450
9001: PPUSH
9002: LD_INT 7350
9004: PPUSH
9005: CALL_OW 12
9009: PUSH
9010: LD_INT 6300
9012: PPUSH
9013: LD_INT 4200
9015: PPUSH
9016: CALL_OW 12
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: LIST
9025: PUSH
9026: LD_OWVAR 67
9030: ARRAY
9031: PPUSH
9032: CALL_OW 67
// filter := [ ] ;
9036: LD_ADDR_VAR 0 3
9040: PUSH
9041: EMPTY
9042: ST_TO_ADDR
// soldiers := [ Rand ( 2 , 3 ) , Rand ( 3 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
9043: LD_ADDR_VAR 0 4
9047: PUSH
9048: LD_INT 2
9050: PPUSH
9051: LD_INT 3
9053: PPUSH
9054: CALL_OW 12
9058: PUSH
9059: LD_INT 3
9061: PPUSH
9062: LD_INT 4
9064: PPUSH
9065: CALL_OW 12
9069: PUSH
9070: LD_INT 3
9072: PPUSH
9073: LD_INT 5
9075: PPUSH
9076: CALL_OW 12
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: LIST
9085: PUSH
9086: LD_OWVAR 67
9090: ARRAY
9091: ST_TO_ADDR
// bazookas := [ 1 , Rand ( 1 , 2 ) , Rand ( 2 , 3 ) ] [ Difficulty ] ;
9092: LD_ADDR_VAR 0 5
9096: PUSH
9097: LD_INT 1
9099: PUSH
9100: LD_INT 1
9102: PPUSH
9103: LD_INT 2
9105: PPUSH
9106: CALL_OW 12
9110: PUSH
9111: LD_INT 2
9113: PPUSH
9114: LD_INT 3
9116: PPUSH
9117: CALL_OW 12
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: LIST
9126: PUSH
9127: LD_OWVAR 67
9131: ARRAY
9132: ST_TO_ADDR
// vehs := [ Rand ( 2 , 3 ) , Rand ( 2 , 4 ) , Rand ( 3 , 5 ) ] [ Difficulty ] ;
9133: LD_ADDR_VAR 0 6
9137: PUSH
9138: LD_INT 2
9140: PPUSH
9141: LD_INT 3
9143: PPUSH
9144: CALL_OW 12
9148: PUSH
9149: LD_INT 2
9151: PPUSH
9152: LD_INT 4
9154: PPUSH
9155: CALL_OW 12
9159: PUSH
9160: LD_INT 3
9162: PPUSH
9163: LD_INT 5
9165: PPUSH
9166: CALL_OW 12
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: LIST
9175: PUSH
9176: LD_OWVAR 67
9180: ARRAY
9181: ST_TO_ADDR
// medics := [ 1 , 2 , 2 ] [ Difficulty ] ;
9182: LD_ADDR_VAR 0 8
9186: PUSH
9187: LD_INT 1
9189: PUSH
9190: LD_INT 2
9192: PUSH
9193: LD_INT 2
9195: PUSH
9196: EMPTY
9197: LIST
9198: LIST
9199: LIST
9200: PUSH
9201: LD_OWVAR 67
9205: ARRAY
9206: ST_TO_ADDR
// uc_side := 3 ;
9207: LD_ADDR_OWVAR 20
9211: PUSH
9212: LD_INT 3
9214: ST_TO_ADDR
// uc_nation := nation_russian ;
9215: LD_ADDR_OWVAR 21
9219: PUSH
9220: LD_INT 3
9222: ST_TO_ADDR
// for i = 1 to soldiers do
9223: LD_ADDR_VAR 0 1
9227: PUSH
9228: DOUBLE
9229: LD_INT 1
9231: DEC
9232: ST_TO_ADDR
9233: LD_VAR 0 4
9237: PUSH
9238: FOR_TO
9239: IFFALSE 9281
// begin PrepareSoldier ( 0 , game_eskill ) ;
9241: LD_INT 0
9243: PPUSH
9244: LD_EXP 40
9248: PPUSH
9249: CALL_OW 381
// un := CreateHuman ;
9253: LD_ADDR_VAR 0 2
9257: PUSH
9258: CALL_OW 44
9262: ST_TO_ADDR
// filter := filter ^ un ;
9263: LD_ADDR_VAR 0 3
9267: PUSH
9268: LD_VAR 0 3
9272: PUSH
9273: LD_VAR 0 2
9277: ADD
9278: ST_TO_ADDR
// end ;
9279: GO 9238
9281: POP
9282: POP
// for i = 1 to bazookas do
9283: LD_ADDR_VAR 0 1
9287: PUSH
9288: DOUBLE
9289: LD_INT 1
9291: DEC
9292: ST_TO_ADDR
9293: LD_VAR 0 5
9297: PUSH
9298: FOR_TO
9299: IFFALSE 9349
// begin PrepareSoldier ( 0 , game_eskill ) ;
9301: LD_INT 0
9303: PPUSH
9304: LD_EXP 40
9308: PPUSH
9309: CALL_OW 381
// hc_class := class_bazooker ;
9313: LD_ADDR_OWVAR 28
9317: PUSH
9318: LD_INT 9
9320: ST_TO_ADDR
// un := CreateHuman ;
9321: LD_ADDR_VAR 0 2
9325: PUSH
9326: CALL_OW 44
9330: ST_TO_ADDR
// filter := filter ^ un ;
9331: LD_ADDR_VAR 0 3
9335: PUSH
9336: LD_VAR 0 3
9340: PUSH
9341: LD_VAR 0 2
9345: ADD
9346: ST_TO_ADDR
// end ;
9347: GO 9298
9349: POP
9350: POP
// for i = 1 to medics do
9351: LD_ADDR_VAR 0 1
9355: PUSH
9356: DOUBLE
9357: LD_INT 1
9359: DEC
9360: ST_TO_ADDR
9361: LD_VAR 0 8
9365: PUSH
9366: FOR_TO
9367: IFFALSE 9409
// begin PrepareScientist ( 0 , game_eskill ) ;
9369: LD_INT 0
9371: PPUSH
9372: LD_EXP 40
9376: PPUSH
9377: CALL_OW 384
// un := CreateHuman ;
9381: LD_ADDR_VAR 0 2
9385: PUSH
9386: CALL_OW 44
9390: ST_TO_ADDR
// filter := filter ^ un ;
9391: LD_ADDR_VAR 0 3
9395: PUSH
9396: LD_VAR 0 3
9400: PUSH
9401: LD_VAR 0 2
9405: ADD
9406: ST_TO_ADDR
// end ;
9407: GO 9366
9409: POP
9410: POP
// for i = 1 to vehs do
9411: LD_ADDR_VAR 0 1
9415: PUSH
9416: DOUBLE
9417: LD_INT 1
9419: DEC
9420: ST_TO_ADDR
9421: LD_VAR 0 6
9425: PUSH
9426: FOR_TO
9427: IFFALSE 9619
// begin case Rand ( 1 , 5 ) of 1 :
9429: LD_INT 1
9431: PPUSH
9432: LD_INT 5
9434: PPUSH
9435: CALL_OW 12
9439: PUSH
9440: LD_INT 1
9442: DOUBLE
9443: EQUAL
9444: IFTRUE 9448
9446: GO 9470
9448: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 2 :
9449: LD_INT 22
9451: PPUSH
9452: LD_INT 3
9454: PPUSH
9455: LD_INT 3
9457: PPUSH
9458: LD_INT 43
9460: PPUSH
9461: LD_INT 100
9463: PPUSH
9464: CALL 17332 0 5
9468: GO 9591
9470: LD_INT 2
9472: DOUBLE
9473: EQUAL
9474: IFTRUE 9478
9476: GO 9500
9478: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_gun , 100 ) ; 3 :
9479: LD_INT 22
9481: PPUSH
9482: LD_INT 3
9484: PPUSH
9485: LD_INT 3
9487: PPUSH
9488: LD_INT 44
9490: PPUSH
9491: LD_INT 100
9493: PPUSH
9494: CALL 17332 0 5
9498: GO 9591
9500: LD_INT 3
9502: DOUBLE
9503: EQUAL
9504: IFTRUE 9508
9506: GO 9530
9508: POP
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_rocket_launcher , 100 ) ; 4 :
9509: LD_INT 22
9511: PPUSH
9512: LD_INT 3
9514: PPUSH
9515: LD_INT 3
9517: PPUSH
9518: LD_INT 45
9520: PPUSH
9521: LD_INT 100
9523: PPUSH
9524: CALL 17332 0 5
9528: GO 9591
9530: LD_INT 4
9532: DOUBLE
9533: EQUAL
9534: IFTRUE 9538
9536: GO 9560
9538: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_gatling_gun , 100 ) ; 5 :
9539: LD_INT 24
9541: PPUSH
9542: LD_INT 3
9544: PPUSH
9545: LD_INT 3
9547: PPUSH
9548: LD_INT 43
9550: PPUSH
9551: LD_INT 100
9553: PPUSH
9554: CALL 17332 0 5
9558: GO 9591
9560: LD_INT 5
9562: DOUBLE
9563: EQUAL
9564: IFTRUE 9568
9566: GO 9590
9568: POP
// PrepareVehicle ( ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun , 100 ) ; end ;
9569: LD_INT 24
9571: PPUSH
9572: LD_INT 3
9574: PPUSH
9575: LD_INT 3
9577: PPUSH
9578: LD_INT 46
9580: PPUSH
9581: LD_INT 100
9583: PPUSH
9584: CALL 17332 0 5
9588: GO 9591
9590: POP
// vehicle := CreateVehicle ;
9591: LD_ADDR_VAR 0 7
9595: PUSH
9596: CALL_OW 45
9600: ST_TO_ADDR
// filter := filter ^ vehicle ;
9601: LD_ADDR_VAR 0 3
9605: PUSH
9606: LD_VAR 0 3
9610: PUSH
9611: LD_VAR 0 7
9615: ADD
9616: ST_TO_ADDR
// end ;
9617: GO 9426
9619: POP
9620: POP
// for i = 1 to filter do
9621: LD_ADDR_VAR 0 1
9625: PUSH
9626: DOUBLE
9627: LD_INT 1
9629: DEC
9630: ST_TO_ADDR
9631: LD_VAR 0 3
9635: PUSH
9636: FOR_TO
9637: IFFALSE 9662
// PlaceUnitArea ( filter [ i ] , RUAttackSpawn1 , false ) ;
9639: LD_VAR 0 3
9643: PUSH
9644: LD_VAR 0 1
9648: ARRAY
9649: PPUSH
9650: LD_INT 14
9652: PPUSH
9653: LD_INT 0
9655: PPUSH
9656: CALL_OW 49
9660: GO 9636
9662: POP
9663: POP
// case Rand ( 1 , 3 ) of 1 :
9664: LD_INT 1
9666: PPUSH
9667: LD_INT 3
9669: PPUSH
9670: CALL_OW 12
9674: PUSH
9675: LD_INT 1
9677: DOUBLE
9678: EQUAL
9679: IFTRUE 9683
9681: GO 9737
9683: POP
// _target := [ [ 165 , 114 ] , [ 104 , 108 ] , [ 86 , 77 ] , [ 63 , 38 ] ] ; 2 :
9684: LD_ADDR_VAR 0 11
9688: PUSH
9689: LD_INT 165
9691: PUSH
9692: LD_INT 114
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: PUSH
9699: LD_INT 104
9701: PUSH
9702: LD_INT 108
9704: PUSH
9705: EMPTY
9706: LIST
9707: LIST
9708: PUSH
9709: LD_INT 86
9711: PUSH
9712: LD_INT 77
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: PUSH
9719: LD_INT 63
9721: PUSH
9722: LD_INT 38
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: ST_TO_ADDR
9735: GO 9862
9737: LD_INT 2
9739: DOUBLE
9740: EQUAL
9741: IFTRUE 9745
9743: GO 9799
9745: POP
// _target := [ [ 165 , 114 ] , [ 146 , 71 ] , [ 112 , 41 ] , [ 63 , 38 ] ] ; 3 :
9746: LD_ADDR_VAR 0 11
9750: PUSH
9751: LD_INT 165
9753: PUSH
9754: LD_INT 114
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: PUSH
9761: LD_INT 146
9763: PUSH
9764: LD_INT 71
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: PUSH
9771: LD_INT 112
9773: PUSH
9774: LD_INT 41
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: PUSH
9781: LD_INT 63
9783: PUSH
9784: LD_INT 38
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: ST_TO_ADDR
9797: GO 9862
9799: LD_INT 3
9801: DOUBLE
9802: EQUAL
9803: IFTRUE 9807
9805: GO 9861
9807: POP
// _target := [ [ 165 , 114 ] , [ 63 , 99 ] , [ 55 , 77 ] , [ 63 , 38 ] ] ; end ;
9808: LD_ADDR_VAR 0 11
9812: PUSH
9813: LD_INT 165
9815: PUSH
9816: LD_INT 114
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: PUSH
9823: LD_INT 63
9825: PUSH
9826: LD_INT 99
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 55
9835: PUSH
9836: LD_INT 77
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PUSH
9843: LD_INT 63
9845: PUSH
9846: LD_INT 38
9848: PUSH
9849: EMPTY
9850: LIST
9851: LIST
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: ST_TO_ADDR
9859: GO 9862
9861: POP
// attackers := filter ;
9862: LD_ADDR_VAR 0 10
9866: PUSH
9867: LD_VAR 0 3
9871: ST_TO_ADDR
// flags := [ 0 , 1 , 0 , 1 , 1 , 0 , 0 , 0 , 1 , 1 ] ;
9872: LD_ADDR_VAR 0 12
9876: PUSH
9877: LD_INT 0
9879: PUSH
9880: LD_INT 1
9882: PUSH
9883: LD_INT 0
9885: PUSH
9886: LD_INT 1
9888: PUSH
9889: LD_INT 1
9891: PUSH
9892: LD_INT 0
9894: PUSH
9895: LD_INT 0
9897: PUSH
9898: LD_INT 0
9900: PUSH
9901: LD_INT 1
9903: PUSH
9904: LD_INT 1
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: ST_TO_ADDR
// MC_PrepareAttack ( 1 , attackers , _target , flags ) ;
9919: LD_INT 1
9921: PPUSH
9922: LD_VAR 0 10
9926: PPUSH
9927: LD_VAR 0 11
9931: PPUSH
9932: LD_VAR 0 12
9936: PPUSH
9937: CALL 72828 0 4
// enable ;
9941: ENABLE
// end ;
9942: PPOPN 12
9944: END
// every 0 0$1 do var i , tmp ;
9945: GO 9947
9947: DISABLE
9948: LD_INT 0
9950: PPUSH
9951: PPUSH
// begin enable ;
9952: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
9953: LD_ADDR_VAR 0 2
9957: PUSH
9958: LD_INT 3
9960: PUSH
9961: LD_INT 22
9963: PUSH
9964: LD_INT 1
9966: PUSH
9967: EMPTY
9968: LIST
9969: LIST
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: PUSH
9975: LD_INT 32
9977: PUSH
9978: LD_INT 1
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PPUSH
9989: CALL_OW 69
9993: ST_TO_ADDR
// if tmp then
9994: LD_VAR 0 2
9998: IFFALSE 10044
// for i in tmp do
10000: LD_ADDR_VAR 0 1
10004: PUSH
10005: LD_VAR 0 2
10009: PUSH
10010: FOR_IN
10011: IFFALSE 10042
// if GetFuel ( i ) < 3 then
10013: LD_VAR 0 1
10017: PPUSH
10018: CALL_OW 261
10022: PUSH
10023: LD_INT 3
10025: LESS
10026: IFFALSE 10040
// SetFuel ( i , 3 ) ;
10028: LD_VAR 0 1
10032: PPUSH
10033: LD_INT 3
10035: PPUSH
10036: CALL_OW 240
10040: GO 10010
10042: POP
10043: POP
// end ;
10044: PPOPN 2
10046: END
// every 0 0$1 trigger ( FilterUnitsInArea ( RU_Base_Area , [ f_side , 1 ] ) and not JMMArrival ) or ( FilterUnitsInArea ( US_BackOffArea , [ f_side , 1 ] ) and not FirstAssaultRepelled ) do var i , veh , tmp ;
10047: LD_INT 3
10049: PPUSH
10050: LD_INT 22
10052: PUSH
10053: LD_INT 1
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PPUSH
10060: CALL_OW 70
10064: PUSH
10065: LD_EXP 41
10069: NOT
10070: AND
10071: PUSH
10072: LD_INT 10
10074: PPUSH
10075: LD_INT 22
10077: PUSH
10078: LD_INT 1
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PPUSH
10085: CALL_OW 70
10089: PUSH
10090: LD_EXP 4
10094: NOT
10095: AND
10096: OR
10097: IFFALSE 10111
10099: GO 10101
10101: DISABLE
10102: LD_INT 0
10104: PPUSH
10105: PPUSH
10106: PPUSH
// begin Antirush ;
10107: CALL 10114 0 0
// end ;
10111: PPOPN 3
10113: END
// export function Antirush ; var i , veh , tmp , num ; begin
10114: LD_INT 0
10116: PPUSH
10117: PPUSH
10118: PPUSH
10119: PPUSH
10120: PPUSH
// tmp := [ ] ;
10121: LD_ADDR_VAR 0 4
10125: PUSH
10126: EMPTY
10127: ST_TO_ADDR
// if not FirstAssaultRepelled then
10128: LD_EXP 4
10132: NOT
10133: IFFALSE 10145
// num := 18 else
10135: LD_ADDR_VAR 0 5
10139: PUSH
10140: LD_INT 18
10142: ST_TO_ADDR
10143: GO 10153
// num := 12 ;
10145: LD_ADDR_VAR 0 5
10149: PUSH
10150: LD_INT 12
10152: ST_TO_ADDR
// num := num - [ 4 , 2 , 0 ] [ Difficulty ] ;
10153: LD_ADDR_VAR 0 5
10157: PUSH
10158: LD_VAR 0 5
10162: PUSH
10163: LD_INT 4
10165: PUSH
10166: LD_INT 2
10168: PUSH
10169: LD_INT 0
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: LIST
10176: PUSH
10177: LD_OWVAR 67
10181: ARRAY
10182: MINUS
10183: ST_TO_ADDR
// for i := 1 to num do
10184: LD_ADDR_VAR 0 2
10188: PUSH
10189: DOUBLE
10190: LD_INT 1
10192: DEC
10193: ST_TO_ADDR
10194: LD_VAR 0 5
10198: PUSH
10199: FOR_TO
10200: IFFALSE 10339
// begin uc_side := 3 ;
10202: LD_ADDR_OWVAR 20
10206: PUSH
10207: LD_INT 3
10209: ST_TO_ADDR
// uc_nation := 3 ;
10210: LD_ADDR_OWVAR 21
10214: PUSH
10215: LD_INT 3
10217: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_siberite , control_computer , [ ru_heavy_gun , ru_gatling_gun ] [ rand ( 1 , 2 ) ] , 100 ) ;
10218: LD_INT 23
10220: PPUSH
10221: LD_INT 3
10223: PPUSH
10224: LD_INT 3
10226: PPUSH
10227: LD_INT 46
10229: PUSH
10230: LD_INT 43
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: PUSH
10237: LD_INT 1
10239: PPUSH
10240: LD_INT 2
10242: PPUSH
10243: CALL_OW 12
10247: ARRAY
10248: PPUSH
10249: LD_INT 100
10251: PPUSH
10252: CALL 17332 0 5
// veh := CreateVehicle ;
10256: LD_ADDR_VAR 0 3
10260: PUSH
10261: CALL_OW 45
10265: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
10266: LD_VAR 0 3
10270: PPUSH
10271: LD_INT 5
10273: PPUSH
10274: CALL_OW 233
// PlaceUnitXYR ( veh , 199 , 135 , 3 , false ) ;
10278: LD_VAR 0 3
10282: PPUSH
10283: LD_INT 199
10285: PPUSH
10286: LD_INT 135
10288: PPUSH
10289: LD_INT 3
10291: PPUSH
10292: LD_INT 0
10294: PPUSH
10295: CALL_OW 50
// tmp := tmp ^ veh ;
10299: LD_ADDR_VAR 0 4
10303: PUSH
10304: LD_VAR 0 4
10308: PUSH
10309: LD_VAR 0 3
10313: ADD
10314: ST_TO_ADDR
// ComMoveXY ( veh , 173 , 118 ) ;
10315: LD_VAR 0 3
10319: PPUSH
10320: LD_INT 173
10322: PPUSH
10323: LD_INT 118
10325: PPUSH
10326: CALL_OW 111
// wait ( 0 0$2 ) ;
10330: LD_INT 70
10332: PPUSH
10333: CALL_OW 67
// end ;
10337: GO 10199
10339: POP
10340: POP
// repeat wait ( 0 0$1 ) ;
10341: LD_INT 35
10343: PPUSH
10344: CALL_OW 67
// for i in tmp do
10348: LD_ADDR_VAR 0 2
10352: PUSH
10353: LD_VAR 0 4
10357: PUSH
10358: FOR_IN
10359: IFFALSE 10426
// if IsDead ( i ) then
10361: LD_VAR 0 2
10365: PPUSH
10366: CALL_OW 301
10370: IFFALSE 10390
// tmp := tmp diff i else
10372: LD_ADDR_VAR 0 4
10376: PUSH
10377: LD_VAR 0 4
10381: PUSH
10382: LD_VAR 0 2
10386: DIFF
10387: ST_TO_ADDR
10388: GO 10424
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
10390: LD_VAR 0 2
10394: PPUSH
10395: LD_INT 22
10397: PUSH
10398: LD_INT 1
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: PPUSH
10405: CALL_OW 69
10409: PPUSH
10410: LD_VAR 0 2
10414: PPUSH
10415: CALL_OW 74
10419: PPUSH
10420: CALL_OW 115
10424: GO 10358
10426: POP
10427: POP
// until not tmp ;
10428: LD_VAR 0 4
10432: NOT
10433: IFFALSE 10341
// end ; end_of_file
10435: LD_VAR 0 1
10439: RET
// export Losses ; on UnitDestroyed ( un ) do begin if un = Brighton then
10440: LD_VAR 0 1
10444: PUSH
10445: LD_EXP 9
10449: EQUAL
10450: IFFALSE 10466
// begin wait ( 0 0$1 ) ;
10452: LD_INT 35
10454: PPUSH
10455: CALL_OW 67
// YouLost ( Brighton ) ;
10459: LD_STRING Brighton
10461: PPUSH
10462: CALL_OW 104
// end ; if un = JMM then
10466: LD_VAR 0 1
10470: PUSH
10471: LD_EXP 37
10475: EQUAL
10476: IFFALSE 10492
// begin wait ( 0 0$1 ) ;
10478: LD_INT 35
10480: PPUSH
10481: CALL_OW 67
// YouLost ( JMM ) ;
10485: LD_STRING JMM
10487: PPUSH
10488: CALL_OW 104
// end ; if un = Megan then
10492: LD_VAR 0 1
10496: PUSH
10497: LD_EXP 11
10501: EQUAL
10502: IFFALSE 10516
// begin Say ( Brighton , DBrighton-MeganDeath ) ;
10504: LD_EXP 9
10508: PPUSH
10509: LD_STRING DBrighton-MeganDeath
10511: PPUSH
10512: CALL_OW 88
// end ; if un = Palmer then
10516: LD_VAR 0 1
10520: PUSH
10521: LD_EXP 10
10525: EQUAL
10526: IFFALSE 10540
// begin Say ( Brighton , DBrighton-PalmerDeath ) ;
10528: LD_EXP 9
10532: PPUSH
10533: LD_STRING DBrighton-PalmerDeath
10535: PPUSH
10536: CALL_OW 88
// end ; if un = Burlak then
10540: LD_VAR 0 1
10544: PUSH
10545: LD_EXP 19
10549: EQUAL
10550: IFFALSE 10582
// begin if JMM_Arrived then
10552: LD_EXP 6
10556: IFFALSE 10570
// Say ( JMM , DJMM-BurlakDead ) ;
10558: LD_EXP 37
10562: PPUSH
10563: LD_STRING DJMM-BurlakDead
10565: PPUSH
10566: CALL_OW 88
// Say ( Palmer , DSol-BurlakDead ) ;
10570: LD_EXP 10
10574: PPUSH
10575: LD_STRING DSol-BurlakDead
10577: PPUSH
10578: CALL_OW 88
// end ; if un = BetaA or un = BetaB then
10582: LD_VAR 0 1
10586: PUSH
10587: LD_INT 1
10589: EQUAL
10590: PUSH
10591: LD_VAR 0 1
10595: PUSH
10596: LD_INT 3
10598: EQUAL
10599: OR
10600: IFFALSE 10616
// begin wait ( 0 0$1 ) ;
10602: LD_INT 35
10604: PPUSH
10605: CALL_OW 67
// YouLost ( Depot ) ;
10609: LD_STRING Depot
10611: PPUSH
10612: CALL_OW 104
// end ; if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
10616: LD_VAR 0 1
10620: PPUSH
10621: CALL_OW 255
10625: PUSH
10626: LD_INT 1
10628: EQUAL
10629: PUSH
10630: LD_VAR 0 1
10634: PPUSH
10635: CALL_OW 247
10639: PUSH
10640: LD_INT 1
10642: EQUAL
10643: AND
10644: IFFALSE 10660
// Losses := Losses + 1 ;
10646: LD_ADDR_EXP 45
10650: PUSH
10651: LD_EXP 45
10655: PUSH
10656: LD_INT 1
10658: PLUS
10659: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
10660: LD_VAR 0 1
10664: PPUSH
10665: CALL 76035 0 1
// end ;
10669: PPOPN 1
10671: END
// on UnitGoesToRed ( un ) do begin if un = Yashin then
10672: LD_VAR 0 1
10676: PUSH
10677: LD_EXP 13
10681: EQUAL
10682: IFFALSE 10696
// ForceSay ( Yashin , DDeath-Yas-3 ) ;
10684: LD_EXP 13
10688: PPUSH
10689: LD_STRING DDeath-Yas-3
10691: PPUSH
10692: CALL_OW 91
// if un = Popov then
10696: LD_VAR 0 1
10700: PUSH
10701: LD_EXP 14
10705: EQUAL
10706: IFFALSE 10720
// ForceSay ( Popov , DDeath-Pop-3 ) ;
10708: LD_EXP 14
10712: PPUSH
10713: LD_STRING DDeath-Pop-3
10715: PPUSH
10716: CALL_OW 91
// if un = Gaydar then
10720: LD_VAR 0 1
10724: PUSH
10725: LD_EXP 15
10729: EQUAL
10730: IFFALSE 10744
// ForceSay ( Gaydar , DDeath-Gay-3 ) ;
10732: LD_EXP 15
10736: PPUSH
10737: LD_STRING DDeath-Gay-3
10739: PPUSH
10740: CALL_OW 91
// if un = Sevi then
10744: LD_VAR 0 1
10748: PUSH
10749: LD_EXP 16
10753: EQUAL
10754: IFFALSE 10768
// ForceSay ( Sevi , DDeath-Vse-3 ) ;
10756: LD_EXP 16
10760: PPUSH
10761: LD_STRING DDeath-Vse-3
10763: PPUSH
10764: CALL_OW 91
// end ;
10768: PPOPN 1
10770: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_laser then
10771: LD_VAR 0 1
10775: PUSH
10776: LD_INT 10
10778: EQUAL
10779: IFFALSE 10817
// begin Say ( Brighton , DBrighton-C1 ) ;
10781: LD_EXP 9
10785: PPUSH
10786: LD_STRING DBrighton-C1
10788: PPUSH
10789: CALL_OW 88
// Say ( Megan , DMegan-C1 ) ;
10793: LD_EXP 11
10797: PPUSH
10798: LD_STRING DMegan-C1
10800: PPUSH
10801: CALL_OW 88
// Say ( Brighton , DBrighton-C2 ) ;
10805: LD_EXP 9
10809: PPUSH
10810: LD_STRING DBrighton-C2
10812: PPUSH
10813: CALL_OW 88
// end ; MCE_ResearchComplete ( tech , lab ) ;
10817: LD_VAR 0 1
10821: PPUSH
10822: LD_VAR 0 2
10826: PPUSH
10827: CALL 75731 0 2
// end ;
10831: PPOPN 2
10833: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
10834: LD_VAR 0 1
10838: PPUSH
10839: LD_VAR 0 2
10843: PPUSH
10844: CALL 78369 0 2
// end ;
10848: PPOPN 2
10850: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
10851: LD_VAR 0 1
10855: PPUSH
10856: CALL 77437 0 1
// end ;
10860: PPOPN 1
10862: END
// export RUFirstDepot ; on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 3 then
10863: LD_VAR 0 1
10867: PPUSH
10868: CALL_OW 266
10872: PUSH
10873: LD_INT 0
10875: EQUAL
10876: PUSH
10877: LD_VAR 0 1
10881: PPUSH
10882: CALL_OW 255
10886: PUSH
10887: LD_INT 3
10889: EQUAL
10890: AND
10891: IFFALSE 10953
// begin SetResourceType ( GetBase ( b ) , mat_cans , 10000 ) ;
10893: LD_VAR 0 1
10897: PPUSH
10898: CALL_OW 274
10902: PPUSH
10903: LD_INT 1
10905: PPUSH
10906: LD_INT 10000
10908: PPUSH
10909: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
10913: LD_VAR 0 1
10917: PPUSH
10918: CALL_OW 274
10922: PPUSH
10923: LD_INT 2
10925: PPUSH
10926: LD_INT 250
10928: PPUSH
10929: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 100 ) ;
10933: LD_VAR 0 1
10937: PPUSH
10938: CALL_OW 274
10942: PPUSH
10943: LD_INT 3
10945: PPUSH
10946: LD_INT 100
10948: PPUSH
10949: CALL_OW 277
// end ; MCE_BuildingComplete ( b ) ;
10953: LD_VAR 0 1
10957: PPUSH
10958: CALL 77678 0 1
// end ;
10962: PPOPN 1
10964: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
10965: LD_VAR 0 1
10969: PPUSH
10970: LD_VAR 0 2
10974: PPUSH
10975: LD_VAR 0 3
10979: PPUSH
10980: LD_VAR 0 4
10984: PPUSH
10985: LD_VAR 0 5
10989: PPUSH
10990: CALL 75351 0 5
// end ;
10994: PPOPN 5
10996: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
10997: LD_VAR 0 1
11001: PPUSH
11002: LD_VAR 0 2
11006: PPUSH
11007: CALL 74947 0 2
// end ;
11011: PPOPN 2
11013: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
11014: LD_VAR 0 1
11018: PPUSH
11019: LD_VAR 0 2
11023: PPUSH
11024: LD_VAR 0 3
11028: PPUSH
11029: LD_VAR 0 4
11033: PPUSH
11034: CALL 74785 0 4
// end ;
11038: PPOPN 4
11040: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
11041: LD_VAR 0 1
11045: PPUSH
11046: LD_VAR 0 2
11050: PPUSH
11051: LD_VAR 0 3
11055: PPUSH
11056: CALL 74560 0 3
// end ;
11060: PPOPN 3
11062: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
11063: LD_VAR 0 1
11067: PPUSH
11068: LD_VAR 0 2
11072: PPUSH
11073: CALL 74445 0 2
// end ;
11077: PPOPN 2
11079: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
11080: LD_VAR 0 1
11084: PPUSH
11085: LD_VAR 0 2
11089: PPUSH
11090: CALL 78630 0 2
// end ;
11094: PPOPN 2
11096: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin if GetSide ( driver ) = 6 then
11097: LD_VAR 0 1
11101: PPUSH
11102: CALL_OW 255
11106: PUSH
11107: LD_INT 6
11109: EQUAL
11110: IFFALSE 11240
// begin if driver in [ Yashin , Sevi , Gaydar , Popov ] then
11112: LD_VAR 0 1
11116: PUSH
11117: LD_EXP 13
11121: PUSH
11122: LD_EXP 16
11126: PUSH
11127: LD_EXP 15
11131: PUSH
11132: LD_EXP 14
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: IN
11143: IFFALSE 11147
// exit ;
11145: GO 11264
// if AssaultStarted then
11147: LD_EXP 8
11151: IFFALSE 11225
// case Rand ( 1 , 4 ) of 1 .. 3 :
11153: LD_INT 1
11155: PPUSH
11156: LD_INT 4
11158: PPUSH
11159: CALL_OW 12
11163: PUSH
11164: LD_INT 1
11166: DOUBLE
11167: GREATEREQUAL
11168: IFFALSE 11176
11170: LD_INT 3
11172: DOUBLE
11173: LESSEQUAL
11174: IFTRUE 11178
11176: GO 11196
11178: POP
// ComAgressiveMove ( driver , 67 , 37 ) ; 4 :
11179: LD_VAR 0 1
11183: PPUSH
11184: LD_INT 67
11186: PPUSH
11187: LD_INT 37
11189: PPUSH
11190: CALL_OW 114
11194: GO 11223
11196: LD_INT 4
11198: DOUBLE
11199: EQUAL
11200: IFTRUE 11204
11202: GO 11222
11204: POP
// ComMoveXY ( driver , 120 , 131 ) ; end else
11205: LD_VAR 0 1
11209: PPUSH
11210: LD_INT 120
11212: PPUSH
11213: LD_INT 131
11215: PPUSH
11216: CALL_OW 111
11220: GO 11223
11222: POP
11223: GO 11240
// ComMoveXY ( driver , 120 , 131 ) ;
11225: LD_VAR 0 1
11229: PPUSH
11230: LD_INT 120
11232: PPUSH
11233: LD_INT 131
11235: PPUSH
11236: CALL_OW 111
// end ; MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
11240: LD_VAR 0 1
11244: PPUSH
11245: LD_VAR 0 2
11249: PPUSH
11250: LD_VAR 0 3
11254: PPUSH
11255: LD_VAR 0 4
11259: PPUSH
11260: CALL 78846 0 4
// end ;
11264: PPOPN 4
11266: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
11267: LD_VAR 0 1
11271: PPUSH
11272: LD_VAR 0 2
11276: PPUSH
11277: CALL 74254 0 2
// end ;
11281: PPOPN 2
11283: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
11284: LD_VAR 0 1
11288: PPUSH
11289: CALL 90144 0 1
// end ; end_of_file
11293: PPOPN 1
11295: END
// every 0 0$1 trigger JMM_Arrived and RussiansDefeated do
11296: LD_EXP 6
11300: PUSH
11301: LD_EXP 44
11305: AND
11306: IFFALSE 11477
11308: GO 11310
11310: DISABLE
// begin wait ( 0 0$2 ) ;
11311: LD_INT 70
11313: PPUSH
11314: CALL_OW 67
// Say ( Brighton , DBrighton-G1 ) ;
11318: LD_EXP 9
11322: PPUSH
11323: LD_STRING DBrighton-G1
11325: PPUSH
11326: CALL_OW 88
// if Losses < 1 then
11330: LD_EXP 45
11334: PUSH
11335: LD_INT 1
11337: LESS
11338: IFFALSE 11352
// AddMedal ( Losses , 1 ) else
11340: LD_STRING Losses
11342: PPUSH
11343: LD_INT 1
11345: PPUSH
11346: CALL_OW 101
11350: GO 11385
// if Losses < 5 then
11352: LD_EXP 45
11356: PUSH
11357: LD_INT 5
11359: LESS
11360: IFFALSE 11374
// AddMedal ( Losses , 2 ) else
11362: LD_STRING Losses
11364: PPUSH
11365: LD_INT 2
11367: PPUSH
11368: CALL_OW 101
11372: GO 11385
// AddMedal ( Losses , - 1 ) ;
11374: LD_STRING Losses
11376: PPUSH
11377: LD_INT 1
11379: NEG
11380: PPUSH
11381: CALL_OW 101
// if LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
11385: LD_EXP 7
11389: PUSH
11390: LD_INT 10
11392: PPUSH
11393: LD_INT 1
11395: PPUSH
11396: CALL_OW 321
11400: PUSH
11401: LD_INT 2
11403: EQUAL
11404: AND
11405: IFFALSE 11419
// AddMedal ( Laser , 1 ) else
11407: LD_STRING Laser
11409: PPUSH
11410: LD_INT 1
11412: PPUSH
11413: CALL_OW 101
11417: GO 11466
// if not LaserBuilt and GetTech ( tech_laser , 1 ) = state_researched then
11419: LD_EXP 7
11423: NOT
11424: PUSH
11425: LD_INT 10
11427: PPUSH
11428: LD_INT 1
11430: PPUSH
11431: CALL_OW 321
11435: PUSH
11436: LD_INT 2
11438: EQUAL
11439: AND
11440: IFFALSE 11455
// AddMedal ( Laser , - 1 ) else
11442: LD_STRING Laser
11444: PPUSH
11445: LD_INT 1
11447: NEG
11448: PPUSH
11449: CALL_OW 101
11453: GO 11466
// AddMedal ( Laser , - 2 ) ;
11455: LD_STRING Laser
11457: PPUSH
11458: LD_INT 2
11460: NEG
11461: PPUSH
11462: CALL_OW 101
// GiveMedals ( BaseMain ) ;
11466: LD_STRING BaseMain
11468: PPUSH
11469: CALL_OW 102
// YouWin ;
11473: CALL_OW 103
// end ; end_of_file
11477: END
// export rows ; export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
11478: LD_INT 0
11480: PPUSH
11481: PPUSH
// area = ListEnvironmentArea ( area ) ;
11482: LD_ADDR_VAR 0 2
11486: PUSH
11487: LD_VAR 0 2
11491: PPUSH
11492: CALL_OW 353
11496: ST_TO_ADDR
// if bulldozer > 0 then
11497: LD_VAR 0 1
11501: PUSH
11502: LD_INT 0
11504: GREATER
11505: IFFALSE 11616
// for i = area downto 1 do
11507: LD_ADDR_VAR 0 4
11511: PUSH
11512: DOUBLE
11513: LD_VAR 0 2
11517: INC
11518: ST_TO_ADDR
11519: LD_INT 1
11521: PUSH
11522: FOR_DOWNTO
11523: IFFALSE 11614
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
11525: LD_VAR 0 2
11529: PUSH
11530: LD_VAR 0 4
11534: ARRAY
11535: PUSH
11536: LD_INT 1
11538: ARRAY
11539: PPUSH
11540: LD_VAR 0 2
11544: PUSH
11545: LD_VAR 0 4
11549: ARRAY
11550: PUSH
11551: LD_INT 2
11553: ARRAY
11554: PPUSH
11555: CALL_OW 351
11559: IFFALSE 11612
// if not HasTask ( bulldozer ) then
11561: LD_VAR 0 1
11565: PPUSH
11566: CALL_OW 314
11570: NOT
11571: IFFALSE 11612
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
11573: LD_VAR 0 1
11577: PPUSH
11578: LD_VAR 0 2
11582: PUSH
11583: LD_VAR 0 4
11587: ARRAY
11588: PUSH
11589: LD_INT 1
11591: ARRAY
11592: PPUSH
11593: LD_VAR 0 2
11597: PUSH
11598: LD_VAR 0 4
11602: ARRAY
11603: PUSH
11604: LD_INT 2
11606: ARRAY
11607: PPUSH
11608: CALL_OW 171
11612: GO 11522
11614: POP
11615: POP
// end ;
11616: LD_VAR 0 3
11620: RET
// export function ComMeeting ( team , area ) ; var i , x , tmp , offset , sold_team , civil_team ; begin
11621: LD_INT 0
11623: PPUSH
11624: PPUSH
11625: PPUSH
11626: PPUSH
11627: PPUSH
11628: PPUSH
11629: PPUSH
// sold_team = UnitFilter ( team , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_soldier ] ] ) ;
11630: LD_ADDR_VAR 0 8
11634: PUSH
11635: LD_VAR 0 1
11639: PPUSH
11640: LD_INT 22
11642: PUSH
11643: LD_INT 1
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: LD_INT 21
11652: PUSH
11653: LD_INT 1
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: PUSH
11660: LD_INT 25
11662: PUSH
11663: LD_INT 1
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: LIST
11674: PPUSH
11675: CALL_OW 72
11679: ST_TO_ADDR
// civil_team = UnitFilter ( team , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_class , class_soldier ] ] ] ) ;
11680: LD_ADDR_VAR 0 9
11684: PUSH
11685: LD_VAR 0 1
11689: PPUSH
11690: LD_INT 22
11692: PUSH
11693: LD_INT 1
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: PUSH
11700: LD_INT 21
11702: PUSH
11703: LD_INT 1
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: PUSH
11710: LD_INT 3
11712: PUSH
11713: LD_INT 25
11715: PUSH
11716: LD_INT 1
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: LIST
11731: PPUSH
11732: CALL_OW 72
11736: ST_TO_ADDR
// rows = MakeRows ( sold_team , civil_team ) ;
11737: LD_ADDR_EXP 47
11741: PUSH
11742: LD_VAR 0 8
11746: PPUSH
11747: LD_VAR 0 9
11751: PPUSH
11752: CALL 12145 0 2
11756: ST_TO_ADDR
// offset = 0 ;
11757: LD_ADDR_VAR 0 7
11761: PUSH
11762: LD_INT 0
11764: ST_TO_ADDR
// for i := 1 to sold_team do
11765: LD_ADDR_VAR 0 4
11769: PUSH
11770: DOUBLE
11771: LD_INT 1
11773: DEC
11774: ST_TO_ADDR
11775: LD_VAR 0 8
11779: PUSH
11780: FOR_TO
11781: IFFALSE 11912
// begin if IsInUnit ( sold_team [ i ] ) then
11783: LD_VAR 0 8
11787: PUSH
11788: LD_VAR 0 4
11792: ARRAY
11793: PPUSH
11794: CALL_OW 310
11798: IFFALSE 11815
// ComExitBuilding ( sold_team [ i ] ) ;
11800: LD_VAR 0 8
11804: PUSH
11805: LD_VAR 0 4
11809: ARRAY
11810: PPUSH
11811: CALL_OW 122
// AddComMoveXY ( sold_team [ i ] , rows [ 1 ] [ i + offset ] , rows [ 1 ] [ i + 1 + offset ] ) ;
11815: LD_VAR 0 8
11819: PUSH
11820: LD_VAR 0 4
11824: ARRAY
11825: PPUSH
11826: LD_EXP 47
11830: PUSH
11831: LD_INT 1
11833: ARRAY
11834: PUSH
11835: LD_VAR 0 4
11839: PUSH
11840: LD_VAR 0 7
11844: PLUS
11845: ARRAY
11846: PPUSH
11847: LD_EXP 47
11851: PUSH
11852: LD_INT 1
11854: ARRAY
11855: PUSH
11856: LD_VAR 0 4
11860: PUSH
11861: LD_INT 1
11863: PLUS
11864: PUSH
11865: LD_VAR 0 7
11869: PLUS
11870: ARRAY
11871: PPUSH
11872: CALL_OW 171
// AddComTurnUnit ( sold_team [ i ] , Brighton ) ;
11876: LD_VAR 0 8
11880: PUSH
11881: LD_VAR 0 4
11885: ARRAY
11886: PPUSH
11887: LD_EXP 9
11891: PPUSH
11892: CALL_OW 179
// offset = offset + 1 ;
11896: LD_ADDR_VAR 0 7
11900: PUSH
11901: LD_VAR 0 7
11905: PUSH
11906: LD_INT 1
11908: PLUS
11909: ST_TO_ADDR
// end ;
11910: GO 11780
11912: POP
11913: POP
// offset = 0 ;
11914: LD_ADDR_VAR 0 7
11918: PUSH
11919: LD_INT 0
11921: ST_TO_ADDR
// tmp = 1 ;
11922: LD_ADDR_VAR 0 6
11926: PUSH
11927: LD_INT 1
11929: ST_TO_ADDR
// for i := 2 to rows do
11930: LD_ADDR_VAR 0 4
11934: PUSH
11935: DOUBLE
11936: LD_INT 2
11938: DEC
11939: ST_TO_ADDR
11940: LD_EXP 47
11944: PUSH
11945: FOR_TO
11946: IFFALSE 12138
// begin for x := 1 to sold_team do
11948: LD_ADDR_VAR 0 5
11952: PUSH
11953: DOUBLE
11954: LD_INT 1
11956: DEC
11957: ST_TO_ADDR
11958: LD_VAR 0 8
11962: PUSH
11963: FOR_TO
11964: IFFALSE 12126
// begin if IsInUnit ( civil_team [ tmp ] ) then
11966: LD_VAR 0 9
11970: PUSH
11971: LD_VAR 0 6
11975: ARRAY
11976: PPUSH
11977: CALL_OW 310
11981: IFFALSE 11998
// ComExitBuilding ( civil_team [ tmp ] ) ;
11983: LD_VAR 0 9
11987: PUSH
11988: LD_VAR 0 6
11992: ARRAY
11993: PPUSH
11994: CALL_OW 122
// AddComMoveXY ( civil_team [ tmp ] , rows [ i ] [ x + offset ] , rows [ i ] [ x + 1 + offset ] ) ;
11998: LD_VAR 0 9
12002: PUSH
12003: LD_VAR 0 6
12007: ARRAY
12008: PPUSH
12009: LD_EXP 47
12013: PUSH
12014: LD_VAR 0 4
12018: ARRAY
12019: PUSH
12020: LD_VAR 0 5
12024: PUSH
12025: LD_VAR 0 7
12029: PLUS
12030: ARRAY
12031: PPUSH
12032: LD_EXP 47
12036: PUSH
12037: LD_VAR 0 4
12041: ARRAY
12042: PUSH
12043: LD_VAR 0 5
12047: PUSH
12048: LD_INT 1
12050: PLUS
12051: PUSH
12052: LD_VAR 0 7
12056: PLUS
12057: ARRAY
12058: PPUSH
12059: CALL_OW 171
// AddComTurnUnit ( civil_team [ tmp ] , Brighton ) ;
12063: LD_VAR 0 9
12067: PUSH
12068: LD_VAR 0 6
12072: ARRAY
12073: PPUSH
12074: LD_EXP 9
12078: PPUSH
12079: CALL_OW 179
// offset = offset + 1 ;
12083: LD_ADDR_VAR 0 7
12087: PUSH
12088: LD_VAR 0 7
12092: PUSH
12093: LD_INT 1
12095: PLUS
12096: ST_TO_ADDR
// if not ( tmp = civil_team ) then
12097: LD_VAR 0 6
12101: PUSH
12102: LD_VAR 0 9
12106: EQUAL
12107: NOT
12108: IFFALSE 12124
// tmp = tmp + 1 ;
12110: LD_ADDR_VAR 0 6
12114: PUSH
12115: LD_VAR 0 6
12119: PUSH
12120: LD_INT 1
12122: PLUS
12123: ST_TO_ADDR
// end ;
12124: GO 11963
12126: POP
12127: POP
// offset = 0 ;
12128: LD_ADDR_VAR 0 7
12132: PUSH
12133: LD_INT 0
12135: ST_TO_ADDR
// end ;
12136: GO 11945
12138: POP
12139: POP
// end ;
12140: LD_VAR 0 3
12144: RET
// export function MakeRows ( sold_team , civil_team ) ; var i , x , start_pos , row_size , new_row , result_rows , civil_rows , offsetX , offsetY ; begin
12145: LD_INT 0
12147: PPUSH
12148: PPUSH
12149: PPUSH
12150: PPUSH
12151: PPUSH
12152: PPUSH
12153: PPUSH
12154: PPUSH
12155: PPUSH
12156: PPUSH
// start_pos = [ 65 , 34 ] ;
12157: LD_ADDR_VAR 0 6
12161: PUSH
12162: LD_INT 65
12164: PUSH
12165: LD_INT 34
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: ST_TO_ADDR
// row_size = 0 ;
12172: LD_ADDR_VAR 0 7
12176: PUSH
12177: LD_INT 0
12179: ST_TO_ADDR
// result_rows = [ ] ;
12180: LD_ADDR_VAR 0 9
12184: PUSH
12185: EMPTY
12186: ST_TO_ADDR
// new_row = [ ] ;
12187: LD_ADDR_VAR 0 8
12191: PUSH
12192: EMPTY
12193: ST_TO_ADDR
// for i := 1 to sold_team do
12194: LD_ADDR_VAR 0 4
12198: PUSH
12199: DOUBLE
12200: LD_INT 1
12202: DEC
12203: ST_TO_ADDR
12204: LD_VAR 0 1
12208: PUSH
12209: FOR_TO
12210: IFFALSE 12264
// begin new_row = new_row ^ start_pos [ 1 ] ^ start_pos [ 2 ] + i ;
12212: LD_ADDR_VAR 0 8
12216: PUSH
12217: LD_VAR 0 8
12221: PUSH
12222: LD_VAR 0 6
12226: PUSH
12227: LD_INT 1
12229: ARRAY
12230: ADD
12231: PUSH
12232: LD_VAR 0 6
12236: PUSH
12237: LD_INT 2
12239: ARRAY
12240: PUSH
12241: LD_VAR 0 4
12245: PLUS
12246: ADD
12247: ST_TO_ADDR
// row_size = row_size + 1 ;
12248: LD_ADDR_VAR 0 7
12252: PUSH
12253: LD_VAR 0 7
12257: PUSH
12258: LD_INT 1
12260: PLUS
12261: ST_TO_ADDR
// end ;
12262: GO 12209
12264: POP
12265: POP
// result_rows = result_rows ^ [ new_row ] ;
12266: LD_ADDR_VAR 0 9
12270: PUSH
12271: LD_VAR 0 9
12275: PUSH
12276: LD_VAR 0 8
12280: PUSH
12281: EMPTY
12282: LIST
12283: ADD
12284: ST_TO_ADDR
// civil_rows = civil_team div sold_team ;
12285: LD_ADDR_VAR 0 10
12289: PUSH
12290: LD_VAR 0 2
12294: PUSH
12295: LD_VAR 0 1
12299: DIV
12300: ST_TO_ADDR
// if ( civil_rows mod sold_team > 0 ) then
12301: LD_VAR 0 10
12305: PUSH
12306: LD_VAR 0 1
12310: MOD
12311: PUSH
12312: LD_INT 0
12314: GREATER
12315: IFFALSE 12331
// civil_rows = civil_rows + 1 ;
12317: LD_ADDR_VAR 0 10
12321: PUSH
12322: LD_VAR 0 10
12326: PUSH
12327: LD_INT 1
12329: PLUS
12330: ST_TO_ADDR
// offsetX = 2 ;
12331: LD_ADDR_VAR 0 11
12335: PUSH
12336: LD_INT 2
12338: ST_TO_ADDR
// offsetY = 1 ;
12339: LD_ADDR_VAR 0 12
12343: PUSH
12344: LD_INT 1
12346: ST_TO_ADDR
// for i := 1 to civil_rows do
12347: LD_ADDR_VAR 0 4
12351: PUSH
12352: DOUBLE
12353: LD_INT 1
12355: DEC
12356: ST_TO_ADDR
12357: LD_VAR 0 10
12361: PUSH
12362: FOR_TO
12363: IFFALSE 12491
// begin new_row = [ ] ;
12365: LD_ADDR_VAR 0 8
12369: PUSH
12370: EMPTY
12371: ST_TO_ADDR
// for x := 1 to row_size do
12372: LD_ADDR_VAR 0 5
12376: PUSH
12377: DOUBLE
12378: LD_INT 1
12380: DEC
12381: ST_TO_ADDR
12382: LD_VAR 0 7
12386: PUSH
12387: FOR_TO
12388: IFFALSE 12440
// begin new_row = new_row ^ start_pos [ 1 ] + offsetX ^ start_pos [ 2 ] + offsetY + x ;
12390: LD_ADDR_VAR 0 8
12394: PUSH
12395: LD_VAR 0 8
12399: PUSH
12400: LD_VAR 0 6
12404: PUSH
12405: LD_INT 1
12407: ARRAY
12408: PUSH
12409: LD_VAR 0 11
12413: PLUS
12414: ADD
12415: PUSH
12416: LD_VAR 0 6
12420: PUSH
12421: LD_INT 2
12423: ARRAY
12424: PUSH
12425: LD_VAR 0 12
12429: PLUS
12430: PUSH
12431: LD_VAR 0 5
12435: PLUS
12436: ADD
12437: ST_TO_ADDR
// end ;
12438: GO 12387
12440: POP
12441: POP
// result_rows = result_rows ^ [ new_row ] ;
12442: LD_ADDR_VAR 0 9
12446: PUSH
12447: LD_VAR 0 9
12451: PUSH
12452: LD_VAR 0 8
12456: PUSH
12457: EMPTY
12458: LIST
12459: ADD
12460: ST_TO_ADDR
// offsetX = offsetX + 2 ;
12461: LD_ADDR_VAR 0 11
12465: PUSH
12466: LD_VAR 0 11
12470: PUSH
12471: LD_INT 2
12473: PLUS
12474: ST_TO_ADDR
// offsetY = offsetY + 1 ;
12475: LD_ADDR_VAR 0 12
12479: PUSH
12480: LD_VAR 0 12
12484: PUSH
12485: LD_INT 1
12487: PLUS
12488: ST_TO_ADDR
// end ;
12489: GO 12362
12491: POP
12492: POP
// result = result_rows ;
12493: LD_ADDR_VAR 0 3
12497: PUSH
12498: LD_VAR 0 9
12502: ST_TO_ADDR
// end ; end_of_file
12503: LD_VAR 0 3
12507: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
12508: LD_INT 0
12510: PPUSH
12511: PPUSH
// if exist_mode then
12512: LD_VAR 0 2
12516: IFFALSE 12541
// unit := CreateCharacter ( prefix & ident ) else
12518: LD_ADDR_VAR 0 5
12522: PUSH
12523: LD_VAR 0 3
12527: PUSH
12528: LD_VAR 0 1
12532: STR
12533: PPUSH
12534: CALL_OW 34
12538: ST_TO_ADDR
12539: GO 12556
// unit := NewCharacter ( ident ) ;
12541: LD_ADDR_VAR 0 5
12545: PUSH
12546: LD_VAR 0 1
12550: PPUSH
12551: CALL_OW 25
12555: ST_TO_ADDR
// result := unit ;
12556: LD_ADDR_VAR 0 4
12560: PUSH
12561: LD_VAR 0 5
12565: ST_TO_ADDR
// end ;
12566: LD_VAR 0 4
12570: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
12571: LD_INT 0
12573: PPUSH
12574: PPUSH
// if not side or not nation then
12575: LD_VAR 0 1
12579: NOT
12580: PUSH
12581: LD_VAR 0 2
12585: NOT
12586: OR
12587: IFFALSE 12591
// exit ;
12589: GO 13355
// case nation of nation_american :
12591: LD_VAR 0 2
12595: PUSH
12596: LD_INT 1
12598: DOUBLE
12599: EQUAL
12600: IFTRUE 12604
12602: GO 12818
12604: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
12605: LD_ADDR_VAR 0 4
12609: PUSH
12610: LD_INT 35
12612: PUSH
12613: LD_INT 45
12615: PUSH
12616: LD_INT 46
12618: PUSH
12619: LD_INT 47
12621: PUSH
12622: LD_INT 82
12624: PUSH
12625: LD_INT 83
12627: PUSH
12628: LD_INT 84
12630: PUSH
12631: LD_INT 85
12633: PUSH
12634: LD_INT 86
12636: PUSH
12637: LD_INT 1
12639: PUSH
12640: LD_INT 2
12642: PUSH
12643: LD_INT 6
12645: PUSH
12646: LD_INT 15
12648: PUSH
12649: LD_INT 16
12651: PUSH
12652: LD_INT 7
12654: PUSH
12655: LD_INT 12
12657: PUSH
12658: LD_INT 13
12660: PUSH
12661: LD_INT 10
12663: PUSH
12664: LD_INT 14
12666: PUSH
12667: LD_INT 20
12669: PUSH
12670: LD_INT 21
12672: PUSH
12673: LD_INT 22
12675: PUSH
12676: LD_INT 25
12678: PUSH
12679: LD_INT 32
12681: PUSH
12682: LD_INT 27
12684: PUSH
12685: LD_INT 36
12687: PUSH
12688: LD_INT 69
12690: PUSH
12691: LD_INT 39
12693: PUSH
12694: LD_INT 34
12696: PUSH
12697: LD_INT 40
12699: PUSH
12700: LD_INT 48
12702: PUSH
12703: LD_INT 49
12705: PUSH
12706: LD_INT 50
12708: PUSH
12709: LD_INT 51
12711: PUSH
12712: LD_INT 52
12714: PUSH
12715: LD_INT 53
12717: PUSH
12718: LD_INT 54
12720: PUSH
12721: LD_INT 55
12723: PUSH
12724: LD_INT 56
12726: PUSH
12727: LD_INT 57
12729: PUSH
12730: LD_INT 58
12732: PUSH
12733: LD_INT 59
12735: PUSH
12736: LD_INT 60
12738: PUSH
12739: LD_INT 61
12741: PUSH
12742: LD_INT 62
12744: PUSH
12745: LD_INT 80
12747: PUSH
12748: LD_INT 82
12750: PUSH
12751: LD_INT 83
12753: PUSH
12754: LD_INT 84
12756: PUSH
12757: LD_INT 85
12759: PUSH
12760: LD_INT 86
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: ST_TO_ADDR
12816: GO 13279
12818: LD_INT 2
12820: DOUBLE
12821: EQUAL
12822: IFTRUE 12826
12824: GO 13048
12826: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
12827: LD_ADDR_VAR 0 4
12831: PUSH
12832: LD_INT 35
12834: PUSH
12835: LD_INT 45
12837: PUSH
12838: LD_INT 46
12840: PUSH
12841: LD_INT 47
12843: PUSH
12844: LD_INT 82
12846: PUSH
12847: LD_INT 83
12849: PUSH
12850: LD_INT 84
12852: PUSH
12853: LD_INT 85
12855: PUSH
12856: LD_INT 87
12858: PUSH
12859: LD_INT 70
12861: PUSH
12862: LD_INT 1
12864: PUSH
12865: LD_INT 11
12867: PUSH
12868: LD_INT 3
12870: PUSH
12871: LD_INT 4
12873: PUSH
12874: LD_INT 5
12876: PUSH
12877: LD_INT 6
12879: PUSH
12880: LD_INT 15
12882: PUSH
12883: LD_INT 18
12885: PUSH
12886: LD_INT 7
12888: PUSH
12889: LD_INT 17
12891: PUSH
12892: LD_INT 8
12894: PUSH
12895: LD_INT 20
12897: PUSH
12898: LD_INT 21
12900: PUSH
12901: LD_INT 22
12903: PUSH
12904: LD_INT 72
12906: PUSH
12907: LD_INT 26
12909: PUSH
12910: LD_INT 69
12912: PUSH
12913: LD_INT 39
12915: PUSH
12916: LD_INT 40
12918: PUSH
12919: LD_INT 41
12921: PUSH
12922: LD_INT 42
12924: PUSH
12925: LD_INT 43
12927: PUSH
12928: LD_INT 48
12930: PUSH
12931: LD_INT 49
12933: PUSH
12934: LD_INT 50
12936: PUSH
12937: LD_INT 51
12939: PUSH
12940: LD_INT 52
12942: PUSH
12943: LD_INT 53
12945: PUSH
12946: LD_INT 54
12948: PUSH
12949: LD_INT 55
12951: PUSH
12952: LD_INT 56
12954: PUSH
12955: LD_INT 60
12957: PUSH
12958: LD_INT 61
12960: PUSH
12961: LD_INT 62
12963: PUSH
12964: LD_INT 66
12966: PUSH
12967: LD_INT 67
12969: PUSH
12970: LD_INT 68
12972: PUSH
12973: LD_INT 81
12975: PUSH
12976: LD_INT 82
12978: PUSH
12979: LD_INT 83
12981: PUSH
12982: LD_INT 84
12984: PUSH
12985: LD_INT 85
12987: PUSH
12988: LD_INT 87
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: ST_TO_ADDR
13046: GO 13279
13048: LD_INT 3
13050: DOUBLE
13051: EQUAL
13052: IFTRUE 13056
13054: GO 13278
13056: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
13057: LD_ADDR_VAR 0 4
13061: PUSH
13062: LD_INT 46
13064: PUSH
13065: LD_INT 47
13067: PUSH
13068: LD_INT 1
13070: PUSH
13071: LD_INT 2
13073: PUSH
13074: LD_INT 82
13076: PUSH
13077: LD_INT 83
13079: PUSH
13080: LD_INT 84
13082: PUSH
13083: LD_INT 85
13085: PUSH
13086: LD_INT 86
13088: PUSH
13089: LD_INT 11
13091: PUSH
13092: LD_INT 9
13094: PUSH
13095: LD_INT 20
13097: PUSH
13098: LD_INT 19
13100: PUSH
13101: LD_INT 21
13103: PUSH
13104: LD_INT 24
13106: PUSH
13107: LD_INT 22
13109: PUSH
13110: LD_INT 25
13112: PUSH
13113: LD_INT 28
13115: PUSH
13116: LD_INT 29
13118: PUSH
13119: LD_INT 30
13121: PUSH
13122: LD_INT 31
13124: PUSH
13125: LD_INT 37
13127: PUSH
13128: LD_INT 38
13130: PUSH
13131: LD_INT 32
13133: PUSH
13134: LD_INT 27
13136: PUSH
13137: LD_INT 33
13139: PUSH
13140: LD_INT 69
13142: PUSH
13143: LD_INT 39
13145: PUSH
13146: LD_INT 34
13148: PUSH
13149: LD_INT 40
13151: PUSH
13152: LD_INT 71
13154: PUSH
13155: LD_INT 23
13157: PUSH
13158: LD_INT 44
13160: PUSH
13161: LD_INT 48
13163: PUSH
13164: LD_INT 49
13166: PUSH
13167: LD_INT 50
13169: PUSH
13170: LD_INT 51
13172: PUSH
13173: LD_INT 52
13175: PUSH
13176: LD_INT 53
13178: PUSH
13179: LD_INT 54
13181: PUSH
13182: LD_INT 55
13184: PUSH
13185: LD_INT 56
13187: PUSH
13188: LD_INT 57
13190: PUSH
13191: LD_INT 58
13193: PUSH
13194: LD_INT 59
13196: PUSH
13197: LD_INT 63
13199: PUSH
13200: LD_INT 64
13202: PUSH
13203: LD_INT 65
13205: PUSH
13206: LD_INT 82
13208: PUSH
13209: LD_INT 83
13211: PUSH
13212: LD_INT 84
13214: PUSH
13215: LD_INT 85
13217: PUSH
13218: LD_INT 86
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: ST_TO_ADDR
13276: GO 13279
13278: POP
// if state > - 1 and state < 3 then
13279: LD_VAR 0 3
13283: PUSH
13284: LD_INT 1
13286: NEG
13287: GREATER
13288: PUSH
13289: LD_VAR 0 3
13293: PUSH
13294: LD_INT 3
13296: LESS
13297: AND
13298: IFFALSE 13355
// for i in result do
13300: LD_ADDR_VAR 0 5
13304: PUSH
13305: LD_VAR 0 4
13309: PUSH
13310: FOR_IN
13311: IFFALSE 13353
// if GetTech ( i , side ) <> state then
13313: LD_VAR 0 5
13317: PPUSH
13318: LD_VAR 0 1
13322: PPUSH
13323: CALL_OW 321
13327: PUSH
13328: LD_VAR 0 3
13332: NONEQUAL
13333: IFFALSE 13351
// result := result diff i ;
13335: LD_ADDR_VAR 0 4
13339: PUSH
13340: LD_VAR 0 4
13344: PUSH
13345: LD_VAR 0 5
13349: DIFF
13350: ST_TO_ADDR
13351: GO 13310
13353: POP
13354: POP
// end ;
13355: LD_VAR 0 4
13359: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
13360: LD_INT 0
13362: PPUSH
13363: PPUSH
13364: PPUSH
// result := true ;
13365: LD_ADDR_VAR 0 3
13369: PUSH
13370: LD_INT 1
13372: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
13373: LD_ADDR_VAR 0 5
13377: PUSH
13378: LD_VAR 0 2
13382: PPUSH
13383: CALL_OW 480
13387: ST_TO_ADDR
// if not tmp then
13388: LD_VAR 0 5
13392: NOT
13393: IFFALSE 13397
// exit ;
13395: GO 13446
// for i in tmp do
13397: LD_ADDR_VAR 0 4
13401: PUSH
13402: LD_VAR 0 5
13406: PUSH
13407: FOR_IN
13408: IFFALSE 13444
// if GetTech ( i , side ) <> state_researched then
13410: LD_VAR 0 4
13414: PPUSH
13415: LD_VAR 0 1
13419: PPUSH
13420: CALL_OW 321
13424: PUSH
13425: LD_INT 2
13427: NONEQUAL
13428: IFFALSE 13442
// begin result := false ;
13430: LD_ADDR_VAR 0 3
13434: PUSH
13435: LD_INT 0
13437: ST_TO_ADDR
// exit ;
13438: POP
13439: POP
13440: GO 13446
// end ;
13442: GO 13407
13444: POP
13445: POP
// end ;
13446: LD_VAR 0 3
13450: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
13451: LD_INT 0
13453: PPUSH
13454: PPUSH
13455: PPUSH
13456: PPUSH
13457: PPUSH
13458: PPUSH
13459: PPUSH
13460: PPUSH
13461: PPUSH
13462: PPUSH
13463: PPUSH
13464: PPUSH
13465: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
13466: LD_VAR 0 1
13470: NOT
13471: PUSH
13472: LD_VAR 0 1
13476: PPUSH
13477: CALL_OW 257
13481: PUSH
13482: LD_INT 9
13484: NONEQUAL
13485: OR
13486: IFFALSE 13490
// exit ;
13488: GO 14063
// side := GetSide ( unit ) ;
13490: LD_ADDR_VAR 0 9
13494: PUSH
13495: LD_VAR 0 1
13499: PPUSH
13500: CALL_OW 255
13504: ST_TO_ADDR
// tech_space := tech_spacanom ;
13505: LD_ADDR_VAR 0 12
13509: PUSH
13510: LD_INT 29
13512: ST_TO_ADDR
// tech_time := tech_taurad ;
13513: LD_ADDR_VAR 0 13
13517: PUSH
13518: LD_INT 28
13520: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
13521: LD_ADDR_VAR 0 11
13525: PUSH
13526: LD_VAR 0 1
13530: PPUSH
13531: CALL_OW 310
13535: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
13536: LD_VAR 0 11
13540: PPUSH
13541: CALL_OW 247
13545: PUSH
13546: LD_INT 2
13548: EQUAL
13549: IFFALSE 13553
// exit ;
13551: GO 14063
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13553: LD_ADDR_VAR 0 8
13557: PUSH
13558: LD_INT 81
13560: PUSH
13561: LD_VAR 0 9
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 3
13572: PUSH
13573: LD_INT 21
13575: PUSH
13576: LD_INT 3
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: PPUSH
13591: CALL_OW 69
13595: ST_TO_ADDR
// if not tmp then
13596: LD_VAR 0 8
13600: NOT
13601: IFFALSE 13605
// exit ;
13603: GO 14063
// if in_unit then
13605: LD_VAR 0 11
13609: IFFALSE 13633
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
13611: LD_ADDR_VAR 0 10
13615: PUSH
13616: LD_VAR 0 8
13620: PPUSH
13621: LD_VAR 0 11
13625: PPUSH
13626: CALL_OW 74
13630: ST_TO_ADDR
13631: GO 13653
// enemy := NearestUnitToUnit ( tmp , unit ) ;
13633: LD_ADDR_VAR 0 10
13637: PUSH
13638: LD_VAR 0 8
13642: PPUSH
13643: LD_VAR 0 1
13647: PPUSH
13648: CALL_OW 74
13652: ST_TO_ADDR
// if not enemy then
13653: LD_VAR 0 10
13657: NOT
13658: IFFALSE 13662
// exit ;
13660: GO 14063
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
13662: LD_VAR 0 11
13666: PUSH
13667: LD_VAR 0 11
13671: PPUSH
13672: LD_VAR 0 10
13676: PPUSH
13677: CALL_OW 296
13681: PUSH
13682: LD_INT 13
13684: GREATER
13685: AND
13686: PUSH
13687: LD_VAR 0 1
13691: PPUSH
13692: LD_VAR 0 10
13696: PPUSH
13697: CALL_OW 296
13701: PUSH
13702: LD_INT 12
13704: GREATER
13705: OR
13706: IFFALSE 13710
// exit ;
13708: GO 14063
// missile := [ 1 ] ;
13710: LD_ADDR_VAR 0 14
13714: PUSH
13715: LD_INT 1
13717: PUSH
13718: EMPTY
13719: LIST
13720: ST_TO_ADDR
// if Researched ( side , tech_space ) then
13721: LD_VAR 0 9
13725: PPUSH
13726: LD_VAR 0 12
13730: PPUSH
13731: CALL_OW 325
13735: IFFALSE 13764
// missile := Insert ( missile , missile + 1 , 2 ) ;
13737: LD_ADDR_VAR 0 14
13741: PUSH
13742: LD_VAR 0 14
13746: PPUSH
13747: LD_VAR 0 14
13751: PUSH
13752: LD_INT 1
13754: PLUS
13755: PPUSH
13756: LD_INT 2
13758: PPUSH
13759: CALL_OW 2
13763: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
13764: LD_VAR 0 9
13768: PPUSH
13769: LD_VAR 0 13
13773: PPUSH
13774: CALL_OW 325
13778: PUSH
13779: LD_VAR 0 10
13783: PPUSH
13784: CALL_OW 255
13788: PPUSH
13789: LD_VAR 0 13
13793: PPUSH
13794: CALL_OW 325
13798: NOT
13799: AND
13800: IFFALSE 13829
// missile := Insert ( missile , missile + 1 , 3 ) ;
13802: LD_ADDR_VAR 0 14
13806: PUSH
13807: LD_VAR 0 14
13811: PPUSH
13812: LD_VAR 0 14
13816: PUSH
13817: LD_INT 1
13819: PLUS
13820: PPUSH
13821: LD_INT 3
13823: PPUSH
13824: CALL_OW 2
13828: ST_TO_ADDR
// if missile < 2 then
13829: LD_VAR 0 14
13833: PUSH
13834: LD_INT 2
13836: LESS
13837: IFFALSE 13841
// exit ;
13839: GO 14063
// x := GetX ( enemy ) ;
13841: LD_ADDR_VAR 0 4
13845: PUSH
13846: LD_VAR 0 10
13850: PPUSH
13851: CALL_OW 250
13855: ST_TO_ADDR
// y := GetY ( enemy ) ;
13856: LD_ADDR_VAR 0 5
13860: PUSH
13861: LD_VAR 0 10
13865: PPUSH
13866: CALL_OW 251
13870: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
13871: LD_ADDR_VAR 0 6
13875: PUSH
13876: LD_VAR 0 4
13880: PUSH
13881: LD_INT 1
13883: NEG
13884: PPUSH
13885: LD_INT 1
13887: PPUSH
13888: CALL_OW 12
13892: PLUS
13893: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
13894: LD_ADDR_VAR 0 7
13898: PUSH
13899: LD_VAR 0 5
13903: PUSH
13904: LD_INT 1
13906: NEG
13907: PPUSH
13908: LD_INT 1
13910: PPUSH
13911: CALL_OW 12
13915: PLUS
13916: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
13917: LD_VAR 0 6
13921: PPUSH
13922: LD_VAR 0 7
13926: PPUSH
13927: CALL_OW 488
13931: NOT
13932: IFFALSE 13954
// begin _x := x ;
13934: LD_ADDR_VAR 0 6
13938: PUSH
13939: LD_VAR 0 4
13943: ST_TO_ADDR
// _y := y ;
13944: LD_ADDR_VAR 0 7
13948: PUSH
13949: LD_VAR 0 5
13953: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
13954: LD_ADDR_VAR 0 3
13958: PUSH
13959: LD_INT 1
13961: PPUSH
13962: LD_VAR 0 14
13966: PPUSH
13967: CALL_OW 12
13971: ST_TO_ADDR
// case i of 1 :
13972: LD_VAR 0 3
13976: PUSH
13977: LD_INT 1
13979: DOUBLE
13980: EQUAL
13981: IFTRUE 13985
13983: GO 14002
13985: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
13986: LD_VAR 0 1
13990: PPUSH
13991: LD_VAR 0 10
13995: PPUSH
13996: CALL_OW 115
14000: GO 14063
14002: LD_INT 2
14004: DOUBLE
14005: EQUAL
14006: IFTRUE 14010
14008: GO 14032
14010: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
14011: LD_VAR 0 1
14015: PPUSH
14016: LD_VAR 0 6
14020: PPUSH
14021: LD_VAR 0 7
14025: PPUSH
14026: CALL_OW 153
14030: GO 14063
14032: LD_INT 3
14034: DOUBLE
14035: EQUAL
14036: IFTRUE 14040
14038: GO 14062
14040: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
14041: LD_VAR 0 1
14045: PPUSH
14046: LD_VAR 0 6
14050: PPUSH
14051: LD_VAR 0 7
14055: PPUSH
14056: CALL_OW 154
14060: GO 14063
14062: POP
// end ;
14063: LD_VAR 0 2
14067: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
14068: LD_INT 0
14070: PPUSH
14071: PPUSH
14072: PPUSH
14073: PPUSH
14074: PPUSH
14075: PPUSH
// if not unit or not building then
14076: LD_VAR 0 1
14080: NOT
14081: PUSH
14082: LD_VAR 0 2
14086: NOT
14087: OR
14088: IFFALSE 14092
// exit ;
14090: GO 14250
// x := GetX ( building ) ;
14092: LD_ADDR_VAR 0 5
14096: PUSH
14097: LD_VAR 0 2
14101: PPUSH
14102: CALL_OW 250
14106: ST_TO_ADDR
// y := GetY ( building ) ;
14107: LD_ADDR_VAR 0 6
14111: PUSH
14112: LD_VAR 0 2
14116: PPUSH
14117: CALL_OW 251
14121: ST_TO_ADDR
// for i = 0 to 5 do
14122: LD_ADDR_VAR 0 4
14126: PUSH
14127: DOUBLE
14128: LD_INT 0
14130: DEC
14131: ST_TO_ADDR
14132: LD_INT 5
14134: PUSH
14135: FOR_TO
14136: IFFALSE 14248
// begin _x := ShiftX ( x , i , 3 ) ;
14138: LD_ADDR_VAR 0 7
14142: PUSH
14143: LD_VAR 0 5
14147: PPUSH
14148: LD_VAR 0 4
14152: PPUSH
14153: LD_INT 3
14155: PPUSH
14156: CALL_OW 272
14160: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
14161: LD_ADDR_VAR 0 8
14165: PUSH
14166: LD_VAR 0 6
14170: PPUSH
14171: LD_VAR 0 4
14175: PPUSH
14176: LD_INT 3
14178: PPUSH
14179: CALL_OW 273
14183: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14184: LD_VAR 0 7
14188: PPUSH
14189: LD_VAR 0 8
14193: PPUSH
14194: CALL_OW 488
14198: NOT
14199: IFFALSE 14203
// continue ;
14201: GO 14135
// if HexInfo ( _x , _y ) = 0 then
14203: LD_VAR 0 7
14207: PPUSH
14208: LD_VAR 0 8
14212: PPUSH
14213: CALL_OW 428
14217: PUSH
14218: LD_INT 0
14220: EQUAL
14221: IFFALSE 14246
// begin ComMoveXY ( unit , _x , _y ) ;
14223: LD_VAR 0 1
14227: PPUSH
14228: LD_VAR 0 7
14232: PPUSH
14233: LD_VAR 0 8
14237: PPUSH
14238: CALL_OW 111
// exit ;
14242: POP
14243: POP
14244: GO 14250
// end ; end ;
14246: GO 14135
14248: POP
14249: POP
// end ;
14250: LD_VAR 0 3
14254: RET
// export function ScanBase ( side , base_area ) ; begin
14255: LD_INT 0
14257: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
14258: LD_ADDR_VAR 0 3
14262: PUSH
14263: LD_VAR 0 2
14267: PPUSH
14268: LD_INT 81
14270: PUSH
14271: LD_VAR 0 1
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: PPUSH
14280: CALL_OW 70
14284: ST_TO_ADDR
// end ;
14285: LD_VAR 0 3
14289: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
14290: LD_INT 0
14292: PPUSH
14293: PPUSH
14294: PPUSH
14295: PPUSH
// result := false ;
14296: LD_ADDR_VAR 0 2
14300: PUSH
14301: LD_INT 0
14303: ST_TO_ADDR
// side := GetSide ( unit ) ;
14304: LD_ADDR_VAR 0 3
14308: PUSH
14309: LD_VAR 0 1
14313: PPUSH
14314: CALL_OW 255
14318: ST_TO_ADDR
// nat := GetNation ( unit ) ;
14319: LD_ADDR_VAR 0 4
14323: PUSH
14324: LD_VAR 0 1
14328: PPUSH
14329: CALL_OW 248
14333: ST_TO_ADDR
// case nat of 1 :
14334: LD_VAR 0 4
14338: PUSH
14339: LD_INT 1
14341: DOUBLE
14342: EQUAL
14343: IFTRUE 14347
14345: GO 14358
14347: POP
// tech := tech_lassight ; 2 :
14348: LD_ADDR_VAR 0 5
14352: PUSH
14353: LD_INT 12
14355: ST_TO_ADDR
14356: GO 14397
14358: LD_INT 2
14360: DOUBLE
14361: EQUAL
14362: IFTRUE 14366
14364: GO 14377
14366: POP
// tech := tech_mortar ; 3 :
14367: LD_ADDR_VAR 0 5
14371: PUSH
14372: LD_INT 41
14374: ST_TO_ADDR
14375: GO 14397
14377: LD_INT 3
14379: DOUBLE
14380: EQUAL
14381: IFTRUE 14385
14383: GO 14396
14385: POP
// tech := tech_bazooka ; end ;
14386: LD_ADDR_VAR 0 5
14390: PUSH
14391: LD_INT 44
14393: ST_TO_ADDR
14394: GO 14397
14396: POP
// if Researched ( side , tech ) then
14397: LD_VAR 0 3
14401: PPUSH
14402: LD_VAR 0 5
14406: PPUSH
14407: CALL_OW 325
14411: IFFALSE 14438
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
14413: LD_ADDR_VAR 0 2
14417: PUSH
14418: LD_INT 5
14420: PUSH
14421: LD_INT 8
14423: PUSH
14424: LD_INT 9
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: LIST
14431: PUSH
14432: LD_VAR 0 4
14436: ARRAY
14437: ST_TO_ADDR
// end ;
14438: LD_VAR 0 2
14442: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
14443: LD_INT 0
14445: PPUSH
14446: PPUSH
14447: PPUSH
// if not mines then
14448: LD_VAR 0 2
14452: NOT
14453: IFFALSE 14457
// exit ;
14455: GO 14601
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14457: LD_ADDR_VAR 0 5
14461: PUSH
14462: LD_INT 81
14464: PUSH
14465: LD_VAR 0 1
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PUSH
14474: LD_INT 3
14476: PUSH
14477: LD_INT 21
14479: PUSH
14480: LD_INT 3
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PUSH
14491: EMPTY
14492: LIST
14493: LIST
14494: PPUSH
14495: CALL_OW 69
14499: ST_TO_ADDR
// for i in mines do
14500: LD_ADDR_VAR 0 4
14504: PUSH
14505: LD_VAR 0 2
14509: PUSH
14510: FOR_IN
14511: IFFALSE 14599
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
14513: LD_VAR 0 4
14517: PUSH
14518: LD_INT 1
14520: ARRAY
14521: PPUSH
14522: LD_VAR 0 4
14526: PUSH
14527: LD_INT 2
14529: ARRAY
14530: PPUSH
14531: CALL_OW 458
14535: NOT
14536: IFFALSE 14540
// continue ;
14538: GO 14510
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
14540: LD_VAR 0 4
14544: PUSH
14545: LD_INT 1
14547: ARRAY
14548: PPUSH
14549: LD_VAR 0 4
14553: PUSH
14554: LD_INT 2
14556: ARRAY
14557: PPUSH
14558: CALL_OW 428
14562: PUSH
14563: LD_VAR 0 5
14567: IN
14568: IFFALSE 14597
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
14570: LD_VAR 0 4
14574: PUSH
14575: LD_INT 1
14577: ARRAY
14578: PPUSH
14579: LD_VAR 0 4
14583: PUSH
14584: LD_INT 2
14586: ARRAY
14587: PPUSH
14588: LD_VAR 0 1
14592: PPUSH
14593: CALL_OW 456
// end ;
14597: GO 14510
14599: POP
14600: POP
// end ;
14601: LD_VAR 0 3
14605: RET
// export function Count ( array ) ; var i ; begin
14606: LD_INT 0
14608: PPUSH
14609: PPUSH
// result := 0 ;
14610: LD_ADDR_VAR 0 2
14614: PUSH
14615: LD_INT 0
14617: ST_TO_ADDR
// for i in array do
14618: LD_ADDR_VAR 0 3
14622: PUSH
14623: LD_VAR 0 1
14627: PUSH
14628: FOR_IN
14629: IFFALSE 14653
// if i then
14631: LD_VAR 0 3
14635: IFFALSE 14651
// result := result + 1 ;
14637: LD_ADDR_VAR 0 2
14641: PUSH
14642: LD_VAR 0 2
14646: PUSH
14647: LD_INT 1
14649: PLUS
14650: ST_TO_ADDR
14651: GO 14628
14653: POP
14654: POP
// end ;
14655: LD_VAR 0 2
14659: RET
// export function IsEmpty ( building ) ; begin
14660: LD_INT 0
14662: PPUSH
// if not building then
14663: LD_VAR 0 1
14667: NOT
14668: IFFALSE 14672
// exit ;
14670: GO 14715
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
14672: LD_ADDR_VAR 0 2
14676: PUSH
14677: LD_VAR 0 1
14681: PUSH
14682: LD_INT 22
14684: PUSH
14685: LD_VAR 0 1
14689: PPUSH
14690: CALL_OW 255
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: PUSH
14699: LD_INT 58
14701: PUSH
14702: EMPTY
14703: LIST
14704: PUSH
14705: EMPTY
14706: LIST
14707: LIST
14708: PPUSH
14709: CALL_OW 69
14713: IN
14714: ST_TO_ADDR
// end ;
14715: LD_VAR 0 2
14719: RET
// export function IsNotFull ( building ) ; begin
14720: LD_INT 0
14722: PPUSH
// if not building then
14723: LD_VAR 0 1
14727: NOT
14728: IFFALSE 14732
// exit ;
14730: GO 14751
// result := UnitsInside ( building ) < 6 ;
14732: LD_ADDR_VAR 0 2
14736: PUSH
14737: LD_VAR 0 1
14741: PPUSH
14742: CALL_OW 313
14746: PUSH
14747: LD_INT 6
14749: LESS
14750: ST_TO_ADDR
// end ;
14751: LD_VAR 0 2
14755: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
14756: LD_INT 0
14758: PPUSH
14759: PPUSH
14760: PPUSH
14761: PPUSH
// tmp := [ ] ;
14762: LD_ADDR_VAR 0 3
14766: PUSH
14767: EMPTY
14768: ST_TO_ADDR
// list := [ ] ;
14769: LD_ADDR_VAR 0 5
14773: PUSH
14774: EMPTY
14775: ST_TO_ADDR
// for i = 16 to 25 do
14776: LD_ADDR_VAR 0 4
14780: PUSH
14781: DOUBLE
14782: LD_INT 16
14784: DEC
14785: ST_TO_ADDR
14786: LD_INT 25
14788: PUSH
14789: FOR_TO
14790: IFFALSE 14863
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
14792: LD_ADDR_VAR 0 3
14796: PUSH
14797: LD_VAR 0 3
14801: PUSH
14802: LD_INT 22
14804: PUSH
14805: LD_VAR 0 1
14809: PPUSH
14810: CALL_OW 255
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: PUSH
14819: LD_INT 91
14821: PUSH
14822: LD_VAR 0 1
14826: PUSH
14827: LD_INT 6
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: LIST
14834: PUSH
14835: LD_INT 30
14837: PUSH
14838: LD_VAR 0 4
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: LIST
14851: PUSH
14852: EMPTY
14853: LIST
14854: PPUSH
14855: CALL_OW 69
14859: ADD
14860: ST_TO_ADDR
14861: GO 14789
14863: POP
14864: POP
// for i = 1 to tmp do
14865: LD_ADDR_VAR 0 4
14869: PUSH
14870: DOUBLE
14871: LD_INT 1
14873: DEC
14874: ST_TO_ADDR
14875: LD_VAR 0 3
14879: PUSH
14880: FOR_TO
14881: IFFALSE 14969
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
14883: LD_ADDR_VAR 0 5
14887: PUSH
14888: LD_VAR 0 5
14892: PUSH
14893: LD_VAR 0 3
14897: PUSH
14898: LD_VAR 0 4
14902: ARRAY
14903: PPUSH
14904: CALL_OW 266
14908: PUSH
14909: LD_VAR 0 3
14913: PUSH
14914: LD_VAR 0 4
14918: ARRAY
14919: PPUSH
14920: CALL_OW 250
14924: PUSH
14925: LD_VAR 0 3
14929: PUSH
14930: LD_VAR 0 4
14934: ARRAY
14935: PPUSH
14936: CALL_OW 251
14940: PUSH
14941: LD_VAR 0 3
14945: PUSH
14946: LD_VAR 0 4
14950: ARRAY
14951: PPUSH
14952: CALL_OW 254
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: PUSH
14963: EMPTY
14964: LIST
14965: ADD
14966: ST_TO_ADDR
14967: GO 14880
14969: POP
14970: POP
// result := list ;
14971: LD_ADDR_VAR 0 2
14975: PUSH
14976: LD_VAR 0 5
14980: ST_TO_ADDR
// end ;
14981: LD_VAR 0 2
14985: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
14986: LD_INT 0
14988: PPUSH
14989: PPUSH
14990: PPUSH
14991: PPUSH
14992: PPUSH
14993: PPUSH
14994: PPUSH
// if not factory then
14995: LD_VAR 0 1
14999: NOT
15000: IFFALSE 15004
// exit ;
15002: GO 15597
// if control = control_apeman then
15004: LD_VAR 0 4
15008: PUSH
15009: LD_INT 5
15011: EQUAL
15012: IFFALSE 15121
// begin tmp := UnitsInside ( factory ) ;
15014: LD_ADDR_VAR 0 8
15018: PUSH
15019: LD_VAR 0 1
15023: PPUSH
15024: CALL_OW 313
15028: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
15029: LD_VAR 0 8
15033: PPUSH
15034: LD_INT 25
15036: PUSH
15037: LD_INT 12
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PPUSH
15044: CALL_OW 72
15048: NOT
15049: IFFALSE 15059
// control := control_manual ;
15051: LD_ADDR_VAR 0 4
15055: PUSH
15056: LD_INT 1
15058: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
15059: LD_ADDR_VAR 0 8
15063: PUSH
15064: LD_VAR 0 1
15068: PPUSH
15069: CALL 14756 0 1
15073: ST_TO_ADDR
// if tmp then
15074: LD_VAR 0 8
15078: IFFALSE 15121
// begin for i in tmp do
15080: LD_ADDR_VAR 0 7
15084: PUSH
15085: LD_VAR 0 8
15089: PUSH
15090: FOR_IN
15091: IFFALSE 15119
// if i [ 1 ] = b_ext_radio then
15093: LD_VAR 0 7
15097: PUSH
15098: LD_INT 1
15100: ARRAY
15101: PUSH
15102: LD_INT 22
15104: EQUAL
15105: IFFALSE 15117
// begin control := control_remote ;
15107: LD_ADDR_VAR 0 4
15111: PUSH
15112: LD_INT 2
15114: ST_TO_ADDR
// break ;
15115: GO 15119
// end ;
15117: GO 15090
15119: POP
15120: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15121: LD_VAR 0 1
15125: PPUSH
15126: LD_VAR 0 2
15130: PPUSH
15131: LD_VAR 0 3
15135: PPUSH
15136: LD_VAR 0 4
15140: PPUSH
15141: LD_VAR 0 5
15145: PPUSH
15146: CALL_OW 448
15150: IFFALSE 15185
// begin result := [ chassis , engine , control , weapon ] ;
15152: LD_ADDR_VAR 0 6
15156: PUSH
15157: LD_VAR 0 2
15161: PUSH
15162: LD_VAR 0 3
15166: PUSH
15167: LD_VAR 0 4
15171: PUSH
15172: LD_VAR 0 5
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: ST_TO_ADDR
// exit ;
15183: GO 15597
// end ; _chassis := AvailableChassisList ( factory ) ;
15185: LD_ADDR_VAR 0 9
15189: PUSH
15190: LD_VAR 0 1
15194: PPUSH
15195: CALL_OW 475
15199: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
15200: LD_ADDR_VAR 0 11
15204: PUSH
15205: LD_VAR 0 1
15209: PPUSH
15210: CALL_OW 476
15214: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
15215: LD_ADDR_VAR 0 12
15219: PUSH
15220: LD_VAR 0 1
15224: PPUSH
15225: CALL_OW 477
15229: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
15230: LD_ADDR_VAR 0 10
15234: PUSH
15235: LD_VAR 0 1
15239: PPUSH
15240: CALL_OW 478
15244: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
15245: LD_VAR 0 9
15249: NOT
15250: PUSH
15251: LD_VAR 0 11
15255: NOT
15256: OR
15257: PUSH
15258: LD_VAR 0 12
15262: NOT
15263: OR
15264: PUSH
15265: LD_VAR 0 10
15269: NOT
15270: OR
15271: IFFALSE 15306
// begin result := [ chassis , engine , control , weapon ] ;
15273: LD_ADDR_VAR 0 6
15277: PUSH
15278: LD_VAR 0 2
15282: PUSH
15283: LD_VAR 0 3
15287: PUSH
15288: LD_VAR 0 4
15292: PUSH
15293: LD_VAR 0 5
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: ST_TO_ADDR
// exit ;
15304: GO 15597
// end ; if not chassis in _chassis then
15306: LD_VAR 0 2
15310: PUSH
15311: LD_VAR 0 9
15315: IN
15316: NOT
15317: IFFALSE 15343
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
15319: LD_ADDR_VAR 0 2
15323: PUSH
15324: LD_VAR 0 9
15328: PUSH
15329: LD_INT 1
15331: PPUSH
15332: LD_VAR 0 9
15336: PPUSH
15337: CALL_OW 12
15341: ARRAY
15342: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
15343: LD_VAR 0 2
15347: PPUSH
15348: LD_VAR 0 3
15352: PPUSH
15353: CALL 15602 0 2
15357: NOT
15358: IFFALSE 15417
// repeat engine := _engine [ 1 ] ;
15360: LD_ADDR_VAR 0 3
15364: PUSH
15365: LD_VAR 0 11
15369: PUSH
15370: LD_INT 1
15372: ARRAY
15373: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
15374: LD_ADDR_VAR 0 11
15378: PUSH
15379: LD_VAR 0 11
15383: PPUSH
15384: LD_INT 1
15386: PPUSH
15387: CALL_OW 3
15391: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
15392: LD_VAR 0 2
15396: PPUSH
15397: LD_VAR 0 3
15401: PPUSH
15402: CALL 15602 0 2
15406: PUSH
15407: LD_VAR 0 11
15411: PUSH
15412: EMPTY
15413: EQUAL
15414: OR
15415: IFFALSE 15360
// if not control in _control then
15417: LD_VAR 0 4
15421: PUSH
15422: LD_VAR 0 12
15426: IN
15427: NOT
15428: IFFALSE 15454
// control := _control [ rand ( 1 , _control ) ] ;
15430: LD_ADDR_VAR 0 4
15434: PUSH
15435: LD_VAR 0 12
15439: PUSH
15440: LD_INT 1
15442: PPUSH
15443: LD_VAR 0 12
15447: PPUSH
15448: CALL_OW 12
15452: ARRAY
15453: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
15454: LD_VAR 0 2
15458: PPUSH
15459: LD_VAR 0 5
15463: PPUSH
15464: CALL 15822 0 2
15468: NOT
15469: IFFALSE 15528
// repeat weapon := _weapon [ 1 ] ;
15471: LD_ADDR_VAR 0 5
15475: PUSH
15476: LD_VAR 0 10
15480: PUSH
15481: LD_INT 1
15483: ARRAY
15484: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
15485: LD_ADDR_VAR 0 10
15489: PUSH
15490: LD_VAR 0 10
15494: PPUSH
15495: LD_INT 1
15497: PPUSH
15498: CALL_OW 3
15502: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
15503: LD_VAR 0 2
15507: PPUSH
15508: LD_VAR 0 5
15512: PPUSH
15513: CALL 15822 0 2
15517: PUSH
15518: LD_VAR 0 10
15522: PUSH
15523: EMPTY
15524: EQUAL
15525: OR
15526: IFFALSE 15471
// result := [ ] ;
15528: LD_ADDR_VAR 0 6
15532: PUSH
15533: EMPTY
15534: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15535: LD_VAR 0 1
15539: PPUSH
15540: LD_VAR 0 2
15544: PPUSH
15545: LD_VAR 0 3
15549: PPUSH
15550: LD_VAR 0 4
15554: PPUSH
15555: LD_VAR 0 5
15559: PPUSH
15560: CALL_OW 448
15564: IFFALSE 15597
// result := [ chassis , engine , control , weapon ] ;
15566: LD_ADDR_VAR 0 6
15570: PUSH
15571: LD_VAR 0 2
15575: PUSH
15576: LD_VAR 0 3
15580: PUSH
15581: LD_VAR 0 4
15585: PUSH
15586: LD_VAR 0 5
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: ST_TO_ADDR
// end ;
15597: LD_VAR 0 6
15601: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
15602: LD_INT 0
15604: PPUSH
// if not chassis or not engine then
15605: LD_VAR 0 1
15609: NOT
15610: PUSH
15611: LD_VAR 0 2
15615: NOT
15616: OR
15617: IFFALSE 15621
// exit ;
15619: GO 15817
// case engine of engine_solar :
15621: LD_VAR 0 2
15625: PUSH
15626: LD_INT 2
15628: DOUBLE
15629: EQUAL
15630: IFTRUE 15634
15632: GO 15672
15634: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
15635: LD_ADDR_VAR 0 3
15639: PUSH
15640: LD_INT 11
15642: PUSH
15643: LD_INT 12
15645: PUSH
15646: LD_INT 13
15648: PUSH
15649: LD_INT 14
15651: PUSH
15652: LD_INT 1
15654: PUSH
15655: LD_INT 2
15657: PUSH
15658: LD_INT 3
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: ST_TO_ADDR
15670: GO 15801
15672: LD_INT 1
15674: DOUBLE
15675: EQUAL
15676: IFTRUE 15680
15678: GO 15742
15680: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
15681: LD_ADDR_VAR 0 3
15685: PUSH
15686: LD_INT 11
15688: PUSH
15689: LD_INT 12
15691: PUSH
15692: LD_INT 13
15694: PUSH
15695: LD_INT 14
15697: PUSH
15698: LD_INT 1
15700: PUSH
15701: LD_INT 2
15703: PUSH
15704: LD_INT 3
15706: PUSH
15707: LD_INT 4
15709: PUSH
15710: LD_INT 5
15712: PUSH
15713: LD_INT 21
15715: PUSH
15716: LD_INT 23
15718: PUSH
15719: LD_INT 22
15721: PUSH
15722: LD_INT 24
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: ST_TO_ADDR
15740: GO 15801
15742: LD_INT 3
15744: DOUBLE
15745: EQUAL
15746: IFTRUE 15750
15748: GO 15800
15750: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15751: LD_ADDR_VAR 0 3
15755: PUSH
15756: LD_INT 13
15758: PUSH
15759: LD_INT 14
15761: PUSH
15762: LD_INT 2
15764: PUSH
15765: LD_INT 3
15767: PUSH
15768: LD_INT 4
15770: PUSH
15771: LD_INT 5
15773: PUSH
15774: LD_INT 21
15776: PUSH
15777: LD_INT 22
15779: PUSH
15780: LD_INT 23
15782: PUSH
15783: LD_INT 24
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: ST_TO_ADDR
15798: GO 15801
15800: POP
// result := ( chassis in result ) ;
15801: LD_ADDR_VAR 0 3
15805: PUSH
15806: LD_VAR 0 1
15810: PUSH
15811: LD_VAR 0 3
15815: IN
15816: ST_TO_ADDR
// end ;
15817: LD_VAR 0 3
15821: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
15822: LD_INT 0
15824: PPUSH
// if not chassis or not weapon then
15825: LD_VAR 0 1
15829: NOT
15830: PUSH
15831: LD_VAR 0 2
15835: NOT
15836: OR
15837: IFFALSE 15841
// exit ;
15839: GO 16867
// case weapon of us_machine_gun :
15841: LD_VAR 0 2
15845: PUSH
15846: LD_INT 2
15848: DOUBLE
15849: EQUAL
15850: IFTRUE 15854
15852: GO 15884
15854: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
15855: LD_ADDR_VAR 0 3
15859: PUSH
15860: LD_INT 1
15862: PUSH
15863: LD_INT 2
15865: PUSH
15866: LD_INT 3
15868: PUSH
15869: LD_INT 4
15871: PUSH
15872: LD_INT 5
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: ST_TO_ADDR
15882: GO 16851
15884: LD_INT 3
15886: DOUBLE
15887: EQUAL
15888: IFTRUE 15892
15890: GO 15922
15892: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
15893: LD_ADDR_VAR 0 3
15897: PUSH
15898: LD_INT 1
15900: PUSH
15901: LD_INT 2
15903: PUSH
15904: LD_INT 3
15906: PUSH
15907: LD_INT 4
15909: PUSH
15910: LD_INT 5
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: ST_TO_ADDR
15920: GO 16851
15922: LD_INT 11
15924: DOUBLE
15925: EQUAL
15926: IFTRUE 15930
15928: GO 15960
15930: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
15931: LD_ADDR_VAR 0 3
15935: PUSH
15936: LD_INT 1
15938: PUSH
15939: LD_INT 2
15941: PUSH
15942: LD_INT 3
15944: PUSH
15945: LD_INT 4
15947: PUSH
15948: LD_INT 5
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: ST_TO_ADDR
15958: GO 16851
15960: LD_INT 4
15962: DOUBLE
15963: EQUAL
15964: IFTRUE 15968
15966: GO 15994
15968: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
15969: LD_ADDR_VAR 0 3
15973: PUSH
15974: LD_INT 2
15976: PUSH
15977: LD_INT 3
15979: PUSH
15980: LD_INT 4
15982: PUSH
15983: LD_INT 5
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: ST_TO_ADDR
15992: GO 16851
15994: LD_INT 5
15996: DOUBLE
15997: EQUAL
15998: IFTRUE 16002
16000: GO 16028
16002: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
16003: LD_ADDR_VAR 0 3
16007: PUSH
16008: LD_INT 2
16010: PUSH
16011: LD_INT 3
16013: PUSH
16014: LD_INT 4
16016: PUSH
16017: LD_INT 5
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: ST_TO_ADDR
16026: GO 16851
16028: LD_INT 9
16030: DOUBLE
16031: EQUAL
16032: IFTRUE 16036
16034: GO 16062
16036: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
16037: LD_ADDR_VAR 0 3
16041: PUSH
16042: LD_INT 2
16044: PUSH
16045: LD_INT 3
16047: PUSH
16048: LD_INT 4
16050: PUSH
16051: LD_INT 5
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: ST_TO_ADDR
16060: GO 16851
16062: LD_INT 7
16064: DOUBLE
16065: EQUAL
16066: IFTRUE 16070
16068: GO 16096
16070: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
16071: LD_ADDR_VAR 0 3
16075: PUSH
16076: LD_INT 2
16078: PUSH
16079: LD_INT 3
16081: PUSH
16082: LD_INT 4
16084: PUSH
16085: LD_INT 5
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: ST_TO_ADDR
16094: GO 16851
16096: LD_INT 12
16098: DOUBLE
16099: EQUAL
16100: IFTRUE 16104
16102: GO 16130
16104: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
16105: LD_ADDR_VAR 0 3
16109: PUSH
16110: LD_INT 2
16112: PUSH
16113: LD_INT 3
16115: PUSH
16116: LD_INT 4
16118: PUSH
16119: LD_INT 5
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: ST_TO_ADDR
16128: GO 16851
16130: LD_INT 13
16132: DOUBLE
16133: EQUAL
16134: IFTRUE 16138
16136: GO 16164
16138: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
16139: LD_ADDR_VAR 0 3
16143: PUSH
16144: LD_INT 2
16146: PUSH
16147: LD_INT 3
16149: PUSH
16150: LD_INT 4
16152: PUSH
16153: LD_INT 5
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: ST_TO_ADDR
16162: GO 16851
16164: LD_INT 14
16166: DOUBLE
16167: EQUAL
16168: IFTRUE 16172
16170: GO 16190
16172: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
16173: LD_ADDR_VAR 0 3
16177: PUSH
16178: LD_INT 4
16180: PUSH
16181: LD_INT 5
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: ST_TO_ADDR
16188: GO 16851
16190: LD_INT 6
16192: DOUBLE
16193: EQUAL
16194: IFTRUE 16198
16196: GO 16216
16198: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
16199: LD_ADDR_VAR 0 3
16203: PUSH
16204: LD_INT 4
16206: PUSH
16207: LD_INT 5
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: ST_TO_ADDR
16214: GO 16851
16216: LD_INT 10
16218: DOUBLE
16219: EQUAL
16220: IFTRUE 16224
16222: GO 16242
16224: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
16225: LD_ADDR_VAR 0 3
16229: PUSH
16230: LD_INT 4
16232: PUSH
16233: LD_INT 5
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: ST_TO_ADDR
16240: GO 16851
16242: LD_INT 22
16244: DOUBLE
16245: EQUAL
16246: IFTRUE 16250
16248: GO 16276
16250: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
16251: LD_ADDR_VAR 0 3
16255: PUSH
16256: LD_INT 11
16258: PUSH
16259: LD_INT 12
16261: PUSH
16262: LD_INT 13
16264: PUSH
16265: LD_INT 14
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: ST_TO_ADDR
16274: GO 16851
16276: LD_INT 23
16278: DOUBLE
16279: EQUAL
16280: IFTRUE 16284
16282: GO 16310
16284: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
16285: LD_ADDR_VAR 0 3
16289: PUSH
16290: LD_INT 11
16292: PUSH
16293: LD_INT 12
16295: PUSH
16296: LD_INT 13
16298: PUSH
16299: LD_INT 14
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: ST_TO_ADDR
16308: GO 16851
16310: LD_INT 24
16312: DOUBLE
16313: EQUAL
16314: IFTRUE 16318
16316: GO 16344
16318: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
16319: LD_ADDR_VAR 0 3
16323: PUSH
16324: LD_INT 11
16326: PUSH
16327: LD_INT 12
16329: PUSH
16330: LD_INT 13
16332: PUSH
16333: LD_INT 14
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: ST_TO_ADDR
16342: GO 16851
16344: LD_INT 30
16346: DOUBLE
16347: EQUAL
16348: IFTRUE 16352
16350: GO 16378
16352: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
16353: LD_ADDR_VAR 0 3
16357: PUSH
16358: LD_INT 11
16360: PUSH
16361: LD_INT 12
16363: PUSH
16364: LD_INT 13
16366: PUSH
16367: LD_INT 14
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: ST_TO_ADDR
16376: GO 16851
16378: LD_INT 25
16380: DOUBLE
16381: EQUAL
16382: IFTRUE 16386
16384: GO 16404
16386: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
16387: LD_ADDR_VAR 0 3
16391: PUSH
16392: LD_INT 13
16394: PUSH
16395: LD_INT 14
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: ST_TO_ADDR
16402: GO 16851
16404: LD_INT 27
16406: DOUBLE
16407: EQUAL
16408: IFTRUE 16412
16410: GO 16430
16412: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
16413: LD_ADDR_VAR 0 3
16417: PUSH
16418: LD_INT 13
16420: PUSH
16421: LD_INT 14
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: ST_TO_ADDR
16428: GO 16851
16430: LD_INT 28
16432: DOUBLE
16433: EQUAL
16434: IFTRUE 16438
16436: GO 16456
16438: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
16439: LD_ADDR_VAR 0 3
16443: PUSH
16444: LD_INT 13
16446: PUSH
16447: LD_INT 14
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: ST_TO_ADDR
16454: GO 16851
16456: LD_INT 29
16458: DOUBLE
16459: EQUAL
16460: IFTRUE 16464
16462: GO 16482
16464: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
16465: LD_ADDR_VAR 0 3
16469: PUSH
16470: LD_INT 13
16472: PUSH
16473: LD_INT 14
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: ST_TO_ADDR
16480: GO 16851
16482: LD_INT 31
16484: DOUBLE
16485: EQUAL
16486: IFTRUE 16490
16488: GO 16508
16490: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
16491: LD_ADDR_VAR 0 3
16495: PUSH
16496: LD_INT 13
16498: PUSH
16499: LD_INT 14
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: ST_TO_ADDR
16506: GO 16851
16508: LD_INT 26
16510: DOUBLE
16511: EQUAL
16512: IFTRUE 16516
16514: GO 16534
16516: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
16517: LD_ADDR_VAR 0 3
16521: PUSH
16522: LD_INT 13
16524: PUSH
16525: LD_INT 14
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: ST_TO_ADDR
16532: GO 16851
16534: LD_INT 42
16536: DOUBLE
16537: EQUAL
16538: IFTRUE 16542
16540: GO 16568
16542: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
16543: LD_ADDR_VAR 0 3
16547: PUSH
16548: LD_INT 21
16550: PUSH
16551: LD_INT 22
16553: PUSH
16554: LD_INT 23
16556: PUSH
16557: LD_INT 24
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: ST_TO_ADDR
16566: GO 16851
16568: LD_INT 43
16570: DOUBLE
16571: EQUAL
16572: IFTRUE 16576
16574: GO 16602
16576: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
16577: LD_ADDR_VAR 0 3
16581: PUSH
16582: LD_INT 21
16584: PUSH
16585: LD_INT 22
16587: PUSH
16588: LD_INT 23
16590: PUSH
16591: LD_INT 24
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: ST_TO_ADDR
16600: GO 16851
16602: LD_INT 44
16604: DOUBLE
16605: EQUAL
16606: IFTRUE 16610
16608: GO 16636
16610: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
16611: LD_ADDR_VAR 0 3
16615: PUSH
16616: LD_INT 21
16618: PUSH
16619: LD_INT 22
16621: PUSH
16622: LD_INT 23
16624: PUSH
16625: LD_INT 24
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: ST_TO_ADDR
16634: GO 16851
16636: LD_INT 45
16638: DOUBLE
16639: EQUAL
16640: IFTRUE 16644
16642: GO 16670
16644: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
16645: LD_ADDR_VAR 0 3
16649: PUSH
16650: LD_INT 21
16652: PUSH
16653: LD_INT 22
16655: PUSH
16656: LD_INT 23
16658: PUSH
16659: LD_INT 24
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: ST_TO_ADDR
16668: GO 16851
16670: LD_INT 49
16672: DOUBLE
16673: EQUAL
16674: IFTRUE 16678
16676: GO 16704
16678: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
16679: LD_ADDR_VAR 0 3
16683: PUSH
16684: LD_INT 21
16686: PUSH
16687: LD_INT 22
16689: PUSH
16690: LD_INT 23
16692: PUSH
16693: LD_INT 24
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: ST_TO_ADDR
16702: GO 16851
16704: LD_INT 51
16706: DOUBLE
16707: EQUAL
16708: IFTRUE 16712
16710: GO 16738
16712: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
16713: LD_ADDR_VAR 0 3
16717: PUSH
16718: LD_INT 21
16720: PUSH
16721: LD_INT 22
16723: PUSH
16724: LD_INT 23
16726: PUSH
16727: LD_INT 24
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: ST_TO_ADDR
16736: GO 16851
16738: LD_INT 52
16740: DOUBLE
16741: EQUAL
16742: IFTRUE 16746
16744: GO 16772
16746: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
16747: LD_ADDR_VAR 0 3
16751: PUSH
16752: LD_INT 21
16754: PUSH
16755: LD_INT 22
16757: PUSH
16758: LD_INT 23
16760: PUSH
16761: LD_INT 24
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: ST_TO_ADDR
16770: GO 16851
16772: LD_INT 53
16774: DOUBLE
16775: EQUAL
16776: IFTRUE 16780
16778: GO 16798
16780: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
16781: LD_ADDR_VAR 0 3
16785: PUSH
16786: LD_INT 23
16788: PUSH
16789: LD_INT 24
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: ST_TO_ADDR
16796: GO 16851
16798: LD_INT 46
16800: DOUBLE
16801: EQUAL
16802: IFTRUE 16806
16804: GO 16824
16806: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
16807: LD_ADDR_VAR 0 3
16811: PUSH
16812: LD_INT 23
16814: PUSH
16815: LD_INT 24
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: ST_TO_ADDR
16822: GO 16851
16824: LD_INT 47
16826: DOUBLE
16827: EQUAL
16828: IFTRUE 16832
16830: GO 16850
16832: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16833: LD_ADDR_VAR 0 3
16837: PUSH
16838: LD_INT 23
16840: PUSH
16841: LD_INT 24
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: ST_TO_ADDR
16848: GO 16851
16850: POP
// result := ( chassis in result ) ;
16851: LD_ADDR_VAR 0 3
16855: PUSH
16856: LD_VAR 0 1
16860: PUSH
16861: LD_VAR 0 3
16865: IN
16866: ST_TO_ADDR
// end ;
16867: LD_VAR 0 3
16871: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
16872: LD_INT 0
16874: PPUSH
16875: PPUSH
16876: PPUSH
16877: PPUSH
16878: PPUSH
16879: PPUSH
16880: PPUSH
// result := array ;
16881: LD_ADDR_VAR 0 5
16885: PUSH
16886: LD_VAR 0 1
16890: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
16891: LD_VAR 0 1
16895: NOT
16896: PUSH
16897: LD_VAR 0 2
16901: NOT
16902: OR
16903: PUSH
16904: LD_VAR 0 3
16908: NOT
16909: OR
16910: PUSH
16911: LD_VAR 0 2
16915: PUSH
16916: LD_VAR 0 1
16920: GREATER
16921: OR
16922: PUSH
16923: LD_VAR 0 3
16927: PUSH
16928: LD_VAR 0 1
16932: GREATER
16933: OR
16934: IFFALSE 16938
// exit ;
16936: GO 17234
// if direction then
16938: LD_VAR 0 4
16942: IFFALSE 17006
// begin d := 1 ;
16944: LD_ADDR_VAR 0 9
16948: PUSH
16949: LD_INT 1
16951: ST_TO_ADDR
// if i_from > i_to then
16952: LD_VAR 0 2
16956: PUSH
16957: LD_VAR 0 3
16961: GREATER
16962: IFFALSE 16988
// length := ( array - i_from ) + i_to else
16964: LD_ADDR_VAR 0 11
16968: PUSH
16969: LD_VAR 0 1
16973: PUSH
16974: LD_VAR 0 2
16978: MINUS
16979: PUSH
16980: LD_VAR 0 3
16984: PLUS
16985: ST_TO_ADDR
16986: GO 17004
// length := i_to - i_from ;
16988: LD_ADDR_VAR 0 11
16992: PUSH
16993: LD_VAR 0 3
16997: PUSH
16998: LD_VAR 0 2
17002: MINUS
17003: ST_TO_ADDR
// end else
17004: GO 17067
// begin d := - 1 ;
17006: LD_ADDR_VAR 0 9
17010: PUSH
17011: LD_INT 1
17013: NEG
17014: ST_TO_ADDR
// if i_from > i_to then
17015: LD_VAR 0 2
17019: PUSH
17020: LD_VAR 0 3
17024: GREATER
17025: IFFALSE 17045
// length := i_from - i_to else
17027: LD_ADDR_VAR 0 11
17031: PUSH
17032: LD_VAR 0 2
17036: PUSH
17037: LD_VAR 0 3
17041: MINUS
17042: ST_TO_ADDR
17043: GO 17067
// length := ( array - i_to ) + i_from ;
17045: LD_ADDR_VAR 0 11
17049: PUSH
17050: LD_VAR 0 1
17054: PUSH
17055: LD_VAR 0 3
17059: MINUS
17060: PUSH
17061: LD_VAR 0 2
17065: PLUS
17066: ST_TO_ADDR
// end ; if not length then
17067: LD_VAR 0 11
17071: NOT
17072: IFFALSE 17076
// exit ;
17074: GO 17234
// tmp := array ;
17076: LD_ADDR_VAR 0 10
17080: PUSH
17081: LD_VAR 0 1
17085: ST_TO_ADDR
// for i = 1 to length do
17086: LD_ADDR_VAR 0 6
17090: PUSH
17091: DOUBLE
17092: LD_INT 1
17094: DEC
17095: ST_TO_ADDR
17096: LD_VAR 0 11
17100: PUSH
17101: FOR_TO
17102: IFFALSE 17222
// begin for j = 1 to array do
17104: LD_ADDR_VAR 0 7
17108: PUSH
17109: DOUBLE
17110: LD_INT 1
17112: DEC
17113: ST_TO_ADDR
17114: LD_VAR 0 1
17118: PUSH
17119: FOR_TO
17120: IFFALSE 17208
// begin k := j + d ;
17122: LD_ADDR_VAR 0 8
17126: PUSH
17127: LD_VAR 0 7
17131: PUSH
17132: LD_VAR 0 9
17136: PLUS
17137: ST_TO_ADDR
// if k > array then
17138: LD_VAR 0 8
17142: PUSH
17143: LD_VAR 0 1
17147: GREATER
17148: IFFALSE 17158
// k := 1 ;
17150: LD_ADDR_VAR 0 8
17154: PUSH
17155: LD_INT 1
17157: ST_TO_ADDR
// if not k then
17158: LD_VAR 0 8
17162: NOT
17163: IFFALSE 17175
// k := array ;
17165: LD_ADDR_VAR 0 8
17169: PUSH
17170: LD_VAR 0 1
17174: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
17175: LD_ADDR_VAR 0 10
17179: PUSH
17180: LD_VAR 0 10
17184: PPUSH
17185: LD_VAR 0 8
17189: PPUSH
17190: LD_VAR 0 1
17194: PUSH
17195: LD_VAR 0 7
17199: ARRAY
17200: PPUSH
17201: CALL_OW 1
17205: ST_TO_ADDR
// end ;
17206: GO 17119
17208: POP
17209: POP
// array := tmp ;
17210: LD_ADDR_VAR 0 1
17214: PUSH
17215: LD_VAR 0 10
17219: ST_TO_ADDR
// end ;
17220: GO 17101
17222: POP
17223: POP
// result := array ;
17224: LD_ADDR_VAR 0 5
17228: PUSH
17229: LD_VAR 0 1
17233: ST_TO_ADDR
// end ;
17234: LD_VAR 0 5
17238: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
17239: LD_INT 0
17241: PPUSH
17242: PPUSH
// result := 0 ;
17243: LD_ADDR_VAR 0 3
17247: PUSH
17248: LD_INT 0
17250: ST_TO_ADDR
// if not array or not value in array then
17251: LD_VAR 0 1
17255: NOT
17256: PUSH
17257: LD_VAR 0 2
17261: PUSH
17262: LD_VAR 0 1
17266: IN
17267: NOT
17268: OR
17269: IFFALSE 17273
// exit ;
17271: GO 17327
// for i = 1 to array do
17273: LD_ADDR_VAR 0 4
17277: PUSH
17278: DOUBLE
17279: LD_INT 1
17281: DEC
17282: ST_TO_ADDR
17283: LD_VAR 0 1
17287: PUSH
17288: FOR_TO
17289: IFFALSE 17325
// if value = array [ i ] then
17291: LD_VAR 0 2
17295: PUSH
17296: LD_VAR 0 1
17300: PUSH
17301: LD_VAR 0 4
17305: ARRAY
17306: EQUAL
17307: IFFALSE 17323
// begin result := i ;
17309: LD_ADDR_VAR 0 3
17313: PUSH
17314: LD_VAR 0 4
17318: ST_TO_ADDR
// exit ;
17319: POP
17320: POP
17321: GO 17327
// end ;
17323: GO 17288
17325: POP
17326: POP
// end ;
17327: LD_VAR 0 3
17331: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
17332: LD_INT 0
17334: PPUSH
// vc_chassis := chassis ;
17335: LD_ADDR_OWVAR 37
17339: PUSH
17340: LD_VAR 0 1
17344: ST_TO_ADDR
// vc_engine := engine ;
17345: LD_ADDR_OWVAR 39
17349: PUSH
17350: LD_VAR 0 2
17354: ST_TO_ADDR
// vc_control := control ;
17355: LD_ADDR_OWVAR 38
17359: PUSH
17360: LD_VAR 0 3
17364: ST_TO_ADDR
// vc_weapon := weapon ;
17365: LD_ADDR_OWVAR 40
17369: PUSH
17370: LD_VAR 0 4
17374: ST_TO_ADDR
// vc_fuel_battery := fuel ;
17375: LD_ADDR_OWVAR 41
17379: PUSH
17380: LD_VAR 0 5
17384: ST_TO_ADDR
// end ;
17385: LD_VAR 0 6
17389: RET
// export function WantPlant ( unit ) ; var task ; begin
17390: LD_INT 0
17392: PPUSH
17393: PPUSH
// result := false ;
17394: LD_ADDR_VAR 0 2
17398: PUSH
17399: LD_INT 0
17401: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
17402: LD_ADDR_VAR 0 3
17406: PUSH
17407: LD_VAR 0 1
17411: PPUSH
17412: CALL_OW 437
17416: ST_TO_ADDR
// if task then
17417: LD_VAR 0 3
17421: IFFALSE 17449
// if task [ 1 ] [ 1 ] = p then
17423: LD_VAR 0 3
17427: PUSH
17428: LD_INT 1
17430: ARRAY
17431: PUSH
17432: LD_INT 1
17434: ARRAY
17435: PUSH
17436: LD_STRING p
17438: EQUAL
17439: IFFALSE 17449
// result := true ;
17441: LD_ADDR_VAR 0 2
17445: PUSH
17446: LD_INT 1
17448: ST_TO_ADDR
// end ;
17449: LD_VAR 0 2
17453: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
17454: LD_INT 0
17456: PPUSH
17457: PPUSH
17458: PPUSH
17459: PPUSH
// if pos < 1 then
17460: LD_VAR 0 2
17464: PUSH
17465: LD_INT 1
17467: LESS
17468: IFFALSE 17472
// exit ;
17470: GO 17775
// if pos = 1 then
17472: LD_VAR 0 2
17476: PUSH
17477: LD_INT 1
17479: EQUAL
17480: IFFALSE 17513
// result := Replace ( arr , pos [ 1 ] , value ) else
17482: LD_ADDR_VAR 0 4
17486: PUSH
17487: LD_VAR 0 1
17491: PPUSH
17492: LD_VAR 0 2
17496: PUSH
17497: LD_INT 1
17499: ARRAY
17500: PPUSH
17501: LD_VAR 0 3
17505: PPUSH
17506: CALL_OW 1
17510: ST_TO_ADDR
17511: GO 17775
// begin tmp := arr ;
17513: LD_ADDR_VAR 0 6
17517: PUSH
17518: LD_VAR 0 1
17522: ST_TO_ADDR
// s_arr := [ tmp ] ;
17523: LD_ADDR_VAR 0 7
17527: PUSH
17528: LD_VAR 0 6
17532: PUSH
17533: EMPTY
17534: LIST
17535: ST_TO_ADDR
// for i = 1 to pos - 1 do
17536: LD_ADDR_VAR 0 5
17540: PUSH
17541: DOUBLE
17542: LD_INT 1
17544: DEC
17545: ST_TO_ADDR
17546: LD_VAR 0 2
17550: PUSH
17551: LD_INT 1
17553: MINUS
17554: PUSH
17555: FOR_TO
17556: IFFALSE 17601
// begin tmp := tmp [ pos [ i ] ] ;
17558: LD_ADDR_VAR 0 6
17562: PUSH
17563: LD_VAR 0 6
17567: PUSH
17568: LD_VAR 0 2
17572: PUSH
17573: LD_VAR 0 5
17577: ARRAY
17578: ARRAY
17579: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
17580: LD_ADDR_VAR 0 7
17584: PUSH
17585: LD_VAR 0 7
17589: PUSH
17590: LD_VAR 0 6
17594: PUSH
17595: EMPTY
17596: LIST
17597: ADD
17598: ST_TO_ADDR
// end ;
17599: GO 17555
17601: POP
17602: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
17603: LD_ADDR_VAR 0 6
17607: PUSH
17608: LD_VAR 0 6
17612: PPUSH
17613: LD_VAR 0 2
17617: PUSH
17618: LD_VAR 0 2
17622: ARRAY
17623: PPUSH
17624: LD_VAR 0 3
17628: PPUSH
17629: CALL_OW 1
17633: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
17634: LD_ADDR_VAR 0 7
17638: PUSH
17639: LD_VAR 0 7
17643: PPUSH
17644: LD_VAR 0 7
17648: PPUSH
17649: LD_VAR 0 6
17653: PPUSH
17654: CALL_OW 1
17658: ST_TO_ADDR
// for i = s_arr downto 2 do
17659: LD_ADDR_VAR 0 5
17663: PUSH
17664: DOUBLE
17665: LD_VAR 0 7
17669: INC
17670: ST_TO_ADDR
17671: LD_INT 2
17673: PUSH
17674: FOR_DOWNTO
17675: IFFALSE 17759
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
17677: LD_ADDR_VAR 0 6
17681: PUSH
17682: LD_VAR 0 7
17686: PUSH
17687: LD_VAR 0 5
17691: PUSH
17692: LD_INT 1
17694: MINUS
17695: ARRAY
17696: PPUSH
17697: LD_VAR 0 2
17701: PUSH
17702: LD_VAR 0 5
17706: PUSH
17707: LD_INT 1
17709: MINUS
17710: ARRAY
17711: PPUSH
17712: LD_VAR 0 7
17716: PUSH
17717: LD_VAR 0 5
17721: ARRAY
17722: PPUSH
17723: CALL_OW 1
17727: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
17728: LD_ADDR_VAR 0 7
17732: PUSH
17733: LD_VAR 0 7
17737: PPUSH
17738: LD_VAR 0 5
17742: PUSH
17743: LD_INT 1
17745: MINUS
17746: PPUSH
17747: LD_VAR 0 6
17751: PPUSH
17752: CALL_OW 1
17756: ST_TO_ADDR
// end ;
17757: GO 17674
17759: POP
17760: POP
// result := s_arr [ 1 ] ;
17761: LD_ADDR_VAR 0 4
17765: PUSH
17766: LD_VAR 0 7
17770: PUSH
17771: LD_INT 1
17773: ARRAY
17774: ST_TO_ADDR
// end ; end ;
17775: LD_VAR 0 4
17779: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
17780: LD_INT 0
17782: PPUSH
17783: PPUSH
// if not list then
17784: LD_VAR 0 1
17788: NOT
17789: IFFALSE 17793
// exit ;
17791: GO 17884
// i := list [ pos1 ] ;
17793: LD_ADDR_VAR 0 5
17797: PUSH
17798: LD_VAR 0 1
17802: PUSH
17803: LD_VAR 0 2
17807: ARRAY
17808: ST_TO_ADDR
// if not i then
17809: LD_VAR 0 5
17813: NOT
17814: IFFALSE 17818
// exit ;
17816: GO 17884
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
17818: LD_ADDR_VAR 0 1
17822: PUSH
17823: LD_VAR 0 1
17827: PPUSH
17828: LD_VAR 0 2
17832: PPUSH
17833: LD_VAR 0 1
17837: PUSH
17838: LD_VAR 0 3
17842: ARRAY
17843: PPUSH
17844: CALL_OW 1
17848: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
17849: LD_ADDR_VAR 0 1
17853: PUSH
17854: LD_VAR 0 1
17858: PPUSH
17859: LD_VAR 0 3
17863: PPUSH
17864: LD_VAR 0 5
17868: PPUSH
17869: CALL_OW 1
17873: ST_TO_ADDR
// result := list ;
17874: LD_ADDR_VAR 0 4
17878: PUSH
17879: LD_VAR 0 1
17883: ST_TO_ADDR
// end ;
17884: LD_VAR 0 4
17888: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
17889: LD_INT 0
17891: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
17892: LD_ADDR_VAR 0 5
17896: PUSH
17897: LD_VAR 0 1
17901: PPUSH
17902: CALL_OW 250
17906: PPUSH
17907: LD_VAR 0 1
17911: PPUSH
17912: CALL_OW 251
17916: PPUSH
17917: LD_VAR 0 2
17921: PPUSH
17922: LD_VAR 0 3
17926: PPUSH
17927: LD_VAR 0 4
17931: PPUSH
17932: CALL 17942 0 5
17936: ST_TO_ADDR
// end ;
17937: LD_VAR 0 5
17941: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
17942: LD_INT 0
17944: PPUSH
17945: PPUSH
17946: PPUSH
17947: PPUSH
// if not list then
17948: LD_VAR 0 3
17952: NOT
17953: IFFALSE 17957
// exit ;
17955: GO 18345
// result := [ ] ;
17957: LD_ADDR_VAR 0 6
17961: PUSH
17962: EMPTY
17963: ST_TO_ADDR
// for i in list do
17964: LD_ADDR_VAR 0 7
17968: PUSH
17969: LD_VAR 0 3
17973: PUSH
17974: FOR_IN
17975: IFFALSE 18177
// begin tmp := GetDistUnitXY ( i , x , y ) ;
17977: LD_ADDR_VAR 0 9
17981: PUSH
17982: LD_VAR 0 7
17986: PPUSH
17987: LD_VAR 0 1
17991: PPUSH
17992: LD_VAR 0 2
17996: PPUSH
17997: CALL_OW 297
18001: ST_TO_ADDR
// if not result then
18002: LD_VAR 0 6
18006: NOT
18007: IFFALSE 18033
// result := [ [ i , tmp ] ] else
18009: LD_ADDR_VAR 0 6
18013: PUSH
18014: LD_VAR 0 7
18018: PUSH
18019: LD_VAR 0 9
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: EMPTY
18029: LIST
18030: ST_TO_ADDR
18031: GO 18175
// begin if result [ result ] [ 2 ] < tmp then
18033: LD_VAR 0 6
18037: PUSH
18038: LD_VAR 0 6
18042: ARRAY
18043: PUSH
18044: LD_INT 2
18046: ARRAY
18047: PUSH
18048: LD_VAR 0 9
18052: LESS
18053: IFFALSE 18095
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
18055: LD_ADDR_VAR 0 6
18059: PUSH
18060: LD_VAR 0 6
18064: PPUSH
18065: LD_VAR 0 6
18069: PUSH
18070: LD_INT 1
18072: PLUS
18073: PPUSH
18074: LD_VAR 0 7
18078: PUSH
18079: LD_VAR 0 9
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PPUSH
18088: CALL_OW 2
18092: ST_TO_ADDR
18093: GO 18175
// for j = 1 to result do
18095: LD_ADDR_VAR 0 8
18099: PUSH
18100: DOUBLE
18101: LD_INT 1
18103: DEC
18104: ST_TO_ADDR
18105: LD_VAR 0 6
18109: PUSH
18110: FOR_TO
18111: IFFALSE 18173
// begin if tmp < result [ j ] [ 2 ] then
18113: LD_VAR 0 9
18117: PUSH
18118: LD_VAR 0 6
18122: PUSH
18123: LD_VAR 0 8
18127: ARRAY
18128: PUSH
18129: LD_INT 2
18131: ARRAY
18132: LESS
18133: IFFALSE 18171
// begin result := Insert ( result , j , [ i , tmp ] ) ;
18135: LD_ADDR_VAR 0 6
18139: PUSH
18140: LD_VAR 0 6
18144: PPUSH
18145: LD_VAR 0 8
18149: PPUSH
18150: LD_VAR 0 7
18154: PUSH
18155: LD_VAR 0 9
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PPUSH
18164: CALL_OW 2
18168: ST_TO_ADDR
// break ;
18169: GO 18173
// end ; end ;
18171: GO 18110
18173: POP
18174: POP
// end ; end ;
18175: GO 17974
18177: POP
18178: POP
// if result and not asc then
18179: LD_VAR 0 6
18183: PUSH
18184: LD_VAR 0 4
18188: NOT
18189: AND
18190: IFFALSE 18265
// begin tmp := result ;
18192: LD_ADDR_VAR 0 9
18196: PUSH
18197: LD_VAR 0 6
18201: ST_TO_ADDR
// for i = tmp downto 1 do
18202: LD_ADDR_VAR 0 7
18206: PUSH
18207: DOUBLE
18208: LD_VAR 0 9
18212: INC
18213: ST_TO_ADDR
18214: LD_INT 1
18216: PUSH
18217: FOR_DOWNTO
18218: IFFALSE 18263
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
18220: LD_ADDR_VAR 0 6
18224: PUSH
18225: LD_VAR 0 6
18229: PPUSH
18230: LD_VAR 0 9
18234: PUSH
18235: LD_VAR 0 7
18239: MINUS
18240: PUSH
18241: LD_INT 1
18243: PLUS
18244: PPUSH
18245: LD_VAR 0 9
18249: PUSH
18250: LD_VAR 0 7
18254: ARRAY
18255: PPUSH
18256: CALL_OW 1
18260: ST_TO_ADDR
18261: GO 18217
18263: POP
18264: POP
// end ; tmp := [ ] ;
18265: LD_ADDR_VAR 0 9
18269: PUSH
18270: EMPTY
18271: ST_TO_ADDR
// if mode then
18272: LD_VAR 0 5
18276: IFFALSE 18345
// begin for i = 1 to result do
18278: LD_ADDR_VAR 0 7
18282: PUSH
18283: DOUBLE
18284: LD_INT 1
18286: DEC
18287: ST_TO_ADDR
18288: LD_VAR 0 6
18292: PUSH
18293: FOR_TO
18294: IFFALSE 18333
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
18296: LD_ADDR_VAR 0 9
18300: PUSH
18301: LD_VAR 0 9
18305: PPUSH
18306: LD_VAR 0 7
18310: PPUSH
18311: LD_VAR 0 6
18315: PUSH
18316: LD_VAR 0 7
18320: ARRAY
18321: PUSH
18322: LD_INT 1
18324: ARRAY
18325: PPUSH
18326: CALL_OW 1
18330: ST_TO_ADDR
18331: GO 18293
18333: POP
18334: POP
// result := tmp ;
18335: LD_ADDR_VAR 0 6
18339: PUSH
18340: LD_VAR 0 9
18344: ST_TO_ADDR
// end ; end ;
18345: LD_VAR 0 6
18349: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
18350: LD_INT 0
18352: PPUSH
18353: PPUSH
18354: PPUSH
18355: PPUSH
18356: PPUSH
18357: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
18358: LD_ADDR_VAR 0 5
18362: PUSH
18363: LD_INT 0
18365: PUSH
18366: LD_INT 0
18368: PUSH
18369: LD_INT 0
18371: PUSH
18372: EMPTY
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: ST_TO_ADDR
// if not x or not y then
18380: LD_VAR 0 2
18384: NOT
18385: PUSH
18386: LD_VAR 0 3
18390: NOT
18391: OR
18392: IFFALSE 18396
// exit ;
18394: GO 20042
// if not range then
18396: LD_VAR 0 4
18400: NOT
18401: IFFALSE 18411
// range := 10 ;
18403: LD_ADDR_VAR 0 4
18407: PUSH
18408: LD_INT 10
18410: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18411: LD_ADDR_VAR 0 8
18415: PUSH
18416: LD_INT 81
18418: PUSH
18419: LD_VAR 0 1
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 92
18430: PUSH
18431: LD_VAR 0 2
18435: PUSH
18436: LD_VAR 0 3
18440: PUSH
18441: LD_VAR 0 4
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: PUSH
18452: LD_INT 3
18454: PUSH
18455: LD_INT 21
18457: PUSH
18458: LD_INT 3
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: LIST
18473: PPUSH
18474: CALL_OW 69
18478: ST_TO_ADDR
// if not tmp then
18479: LD_VAR 0 8
18483: NOT
18484: IFFALSE 18488
// exit ;
18486: GO 20042
// for i in tmp do
18488: LD_ADDR_VAR 0 6
18492: PUSH
18493: LD_VAR 0 8
18497: PUSH
18498: FOR_IN
18499: IFFALSE 20017
// begin points := [ 0 , 0 , 0 ] ;
18501: LD_ADDR_VAR 0 9
18505: PUSH
18506: LD_INT 0
18508: PUSH
18509: LD_INT 0
18511: PUSH
18512: LD_INT 0
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: LIST
18519: ST_TO_ADDR
// bpoints := 1 ;
18520: LD_ADDR_VAR 0 10
18524: PUSH
18525: LD_INT 1
18527: ST_TO_ADDR
// case GetType ( i ) of unit_human :
18528: LD_VAR 0 6
18532: PPUSH
18533: CALL_OW 247
18537: PUSH
18538: LD_INT 1
18540: DOUBLE
18541: EQUAL
18542: IFTRUE 18546
18544: GO 19124
18546: POP
// begin if GetClass ( i ) = 1 then
18547: LD_VAR 0 6
18551: PPUSH
18552: CALL_OW 257
18556: PUSH
18557: LD_INT 1
18559: EQUAL
18560: IFFALSE 18581
// points := [ 10 , 5 , 3 ] ;
18562: LD_ADDR_VAR 0 9
18566: PUSH
18567: LD_INT 10
18569: PUSH
18570: LD_INT 5
18572: PUSH
18573: LD_INT 3
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: LIST
18580: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
18581: LD_VAR 0 6
18585: PPUSH
18586: CALL_OW 257
18590: PUSH
18591: LD_INT 2
18593: PUSH
18594: LD_INT 3
18596: PUSH
18597: LD_INT 4
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: LIST
18604: IN
18605: IFFALSE 18626
// points := [ 3 , 2 , 1 ] ;
18607: LD_ADDR_VAR 0 9
18611: PUSH
18612: LD_INT 3
18614: PUSH
18615: LD_INT 2
18617: PUSH
18618: LD_INT 1
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: LIST
18625: ST_TO_ADDR
// if GetClass ( i ) = 5 then
18626: LD_VAR 0 6
18630: PPUSH
18631: CALL_OW 257
18635: PUSH
18636: LD_INT 5
18638: EQUAL
18639: IFFALSE 18660
// points := [ 130 , 5 , 2 ] ;
18641: LD_ADDR_VAR 0 9
18645: PUSH
18646: LD_INT 130
18648: PUSH
18649: LD_INT 5
18651: PUSH
18652: LD_INT 2
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: LIST
18659: ST_TO_ADDR
// if GetClass ( i ) = 8 then
18660: LD_VAR 0 6
18664: PPUSH
18665: CALL_OW 257
18669: PUSH
18670: LD_INT 8
18672: EQUAL
18673: IFFALSE 18694
// points := [ 35 , 35 , 30 ] ;
18675: LD_ADDR_VAR 0 9
18679: PUSH
18680: LD_INT 35
18682: PUSH
18683: LD_INT 35
18685: PUSH
18686: LD_INT 30
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: LIST
18693: ST_TO_ADDR
// if GetClass ( i ) = 9 then
18694: LD_VAR 0 6
18698: PPUSH
18699: CALL_OW 257
18703: PUSH
18704: LD_INT 9
18706: EQUAL
18707: IFFALSE 18728
// points := [ 20 , 55 , 40 ] ;
18709: LD_ADDR_VAR 0 9
18713: PUSH
18714: LD_INT 20
18716: PUSH
18717: LD_INT 55
18719: PUSH
18720: LD_INT 40
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: LIST
18727: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
18728: LD_VAR 0 6
18732: PPUSH
18733: CALL_OW 257
18737: PUSH
18738: LD_INT 12
18740: PUSH
18741: LD_INT 16
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: IN
18748: IFFALSE 18769
// points := [ 5 , 3 , 2 ] ;
18750: LD_ADDR_VAR 0 9
18754: PUSH
18755: LD_INT 5
18757: PUSH
18758: LD_INT 3
18760: PUSH
18761: LD_INT 2
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: LIST
18768: ST_TO_ADDR
// if GetClass ( i ) = 17 then
18769: LD_VAR 0 6
18773: PPUSH
18774: CALL_OW 257
18778: PUSH
18779: LD_INT 17
18781: EQUAL
18782: IFFALSE 18803
// points := [ 100 , 50 , 75 ] ;
18784: LD_ADDR_VAR 0 9
18788: PUSH
18789: LD_INT 100
18791: PUSH
18792: LD_INT 50
18794: PUSH
18795: LD_INT 75
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: LIST
18802: ST_TO_ADDR
// if GetClass ( i ) = 15 then
18803: LD_VAR 0 6
18807: PPUSH
18808: CALL_OW 257
18812: PUSH
18813: LD_INT 15
18815: EQUAL
18816: IFFALSE 18837
// points := [ 10 , 5 , 3 ] ;
18818: LD_ADDR_VAR 0 9
18822: PUSH
18823: LD_INT 10
18825: PUSH
18826: LD_INT 5
18828: PUSH
18829: LD_INT 3
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: LIST
18836: ST_TO_ADDR
// if GetClass ( i ) = 14 then
18837: LD_VAR 0 6
18841: PPUSH
18842: CALL_OW 257
18846: PUSH
18847: LD_INT 14
18849: EQUAL
18850: IFFALSE 18871
// points := [ 10 , 0 , 0 ] ;
18852: LD_ADDR_VAR 0 9
18856: PUSH
18857: LD_INT 10
18859: PUSH
18860: LD_INT 0
18862: PUSH
18863: LD_INT 0
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: LIST
18870: ST_TO_ADDR
// if GetClass ( i ) = 11 then
18871: LD_VAR 0 6
18875: PPUSH
18876: CALL_OW 257
18880: PUSH
18881: LD_INT 11
18883: EQUAL
18884: IFFALSE 18905
// points := [ 30 , 10 , 5 ] ;
18886: LD_ADDR_VAR 0 9
18890: PUSH
18891: LD_INT 30
18893: PUSH
18894: LD_INT 10
18896: PUSH
18897: LD_INT 5
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: LIST
18904: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
18905: LD_VAR 0 1
18909: PPUSH
18910: LD_INT 5
18912: PPUSH
18913: CALL_OW 321
18917: PUSH
18918: LD_INT 2
18920: EQUAL
18921: IFFALSE 18938
// bpoints := bpoints * 1.8 ;
18923: LD_ADDR_VAR 0 10
18927: PUSH
18928: LD_VAR 0 10
18932: PUSH
18933: LD_REAL  1.80000000000000E+0000
18936: MUL
18937: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
18938: LD_VAR 0 6
18942: PPUSH
18943: CALL_OW 257
18947: PUSH
18948: LD_INT 1
18950: PUSH
18951: LD_INT 2
18953: PUSH
18954: LD_INT 3
18956: PUSH
18957: LD_INT 4
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: IN
18966: PUSH
18967: LD_VAR 0 1
18971: PPUSH
18972: LD_INT 51
18974: PPUSH
18975: CALL_OW 321
18979: PUSH
18980: LD_INT 2
18982: EQUAL
18983: AND
18984: IFFALSE 19001
// bpoints := bpoints * 1.2 ;
18986: LD_ADDR_VAR 0 10
18990: PUSH
18991: LD_VAR 0 10
18995: PUSH
18996: LD_REAL  1.20000000000000E+0000
18999: MUL
19000: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
19001: LD_VAR 0 6
19005: PPUSH
19006: CALL_OW 257
19010: PUSH
19011: LD_INT 5
19013: PUSH
19014: LD_INT 7
19016: PUSH
19017: LD_INT 9
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: LIST
19024: IN
19025: PUSH
19026: LD_VAR 0 1
19030: PPUSH
19031: LD_INT 52
19033: PPUSH
19034: CALL_OW 321
19038: PUSH
19039: LD_INT 2
19041: EQUAL
19042: AND
19043: IFFALSE 19060
// bpoints := bpoints * 1.5 ;
19045: LD_ADDR_VAR 0 10
19049: PUSH
19050: LD_VAR 0 10
19054: PUSH
19055: LD_REAL  1.50000000000000E+0000
19058: MUL
19059: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
19060: LD_VAR 0 1
19064: PPUSH
19065: LD_INT 66
19067: PPUSH
19068: CALL_OW 321
19072: PUSH
19073: LD_INT 2
19075: EQUAL
19076: IFFALSE 19093
// bpoints := bpoints * 1.1 ;
19078: LD_ADDR_VAR 0 10
19082: PUSH
19083: LD_VAR 0 10
19087: PUSH
19088: LD_REAL  1.10000000000000E+0000
19091: MUL
19092: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
19093: LD_ADDR_VAR 0 10
19097: PUSH
19098: LD_VAR 0 10
19102: PUSH
19103: LD_VAR 0 6
19107: PPUSH
19108: LD_INT 1
19110: PPUSH
19111: CALL_OW 259
19115: PUSH
19116: LD_REAL  1.15000000000000E+0000
19119: MUL
19120: MUL
19121: ST_TO_ADDR
// end ; unit_vehicle :
19122: GO 19946
19124: LD_INT 2
19126: DOUBLE
19127: EQUAL
19128: IFTRUE 19132
19130: GO 19934
19132: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
19133: LD_VAR 0 6
19137: PPUSH
19138: CALL_OW 264
19142: PUSH
19143: LD_INT 2
19145: PUSH
19146: LD_INT 42
19148: PUSH
19149: LD_INT 24
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: LIST
19156: IN
19157: IFFALSE 19178
// points := [ 25 , 5 , 3 ] ;
19159: LD_ADDR_VAR 0 9
19163: PUSH
19164: LD_INT 25
19166: PUSH
19167: LD_INT 5
19169: PUSH
19170: LD_INT 3
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: LIST
19177: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
19178: LD_VAR 0 6
19182: PPUSH
19183: CALL_OW 264
19187: PUSH
19188: LD_INT 4
19190: PUSH
19191: LD_INT 43
19193: PUSH
19194: LD_INT 25
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: LIST
19201: IN
19202: IFFALSE 19223
// points := [ 40 , 15 , 5 ] ;
19204: LD_ADDR_VAR 0 9
19208: PUSH
19209: LD_INT 40
19211: PUSH
19212: LD_INT 15
19214: PUSH
19215: LD_INT 5
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: LIST
19222: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
19223: LD_VAR 0 6
19227: PPUSH
19228: CALL_OW 264
19232: PUSH
19233: LD_INT 3
19235: PUSH
19236: LD_INT 23
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: IN
19243: IFFALSE 19264
// points := [ 7 , 25 , 8 ] ;
19245: LD_ADDR_VAR 0 9
19249: PUSH
19250: LD_INT 7
19252: PUSH
19253: LD_INT 25
19255: PUSH
19256: LD_INT 8
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: LIST
19263: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
19264: LD_VAR 0 6
19268: PPUSH
19269: CALL_OW 264
19273: PUSH
19274: LD_INT 5
19276: PUSH
19277: LD_INT 27
19279: PUSH
19280: LD_INT 44
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: LIST
19287: IN
19288: IFFALSE 19309
// points := [ 14 , 50 , 16 ] ;
19290: LD_ADDR_VAR 0 9
19294: PUSH
19295: LD_INT 14
19297: PUSH
19298: LD_INT 50
19300: PUSH
19301: LD_INT 16
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: LIST
19308: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
19309: LD_VAR 0 6
19313: PPUSH
19314: CALL_OW 264
19318: PUSH
19319: LD_INT 6
19321: PUSH
19322: LD_INT 46
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: IN
19329: IFFALSE 19350
// points := [ 32 , 120 , 70 ] ;
19331: LD_ADDR_VAR 0 9
19335: PUSH
19336: LD_INT 32
19338: PUSH
19339: LD_INT 120
19341: PUSH
19342: LD_INT 70
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: LIST
19349: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
19350: LD_VAR 0 6
19354: PPUSH
19355: CALL_OW 264
19359: PUSH
19360: LD_INT 7
19362: PUSH
19363: LD_INT 28
19365: PUSH
19366: LD_INT 45
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: LIST
19373: IN
19374: IFFALSE 19395
// points := [ 35 , 20 , 45 ] ;
19376: LD_ADDR_VAR 0 9
19380: PUSH
19381: LD_INT 35
19383: PUSH
19384: LD_INT 20
19386: PUSH
19387: LD_INT 45
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: LIST
19394: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
19395: LD_VAR 0 6
19399: PPUSH
19400: CALL_OW 264
19404: PUSH
19405: LD_INT 47
19407: PUSH
19408: EMPTY
19409: LIST
19410: IN
19411: IFFALSE 19432
// points := [ 67 , 45 , 75 ] ;
19413: LD_ADDR_VAR 0 9
19417: PUSH
19418: LD_INT 67
19420: PUSH
19421: LD_INT 45
19423: PUSH
19424: LD_INT 75
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: LIST
19431: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
19432: LD_VAR 0 6
19436: PPUSH
19437: CALL_OW 264
19441: PUSH
19442: LD_INT 26
19444: PUSH
19445: EMPTY
19446: LIST
19447: IN
19448: IFFALSE 19469
// points := [ 120 , 30 , 80 ] ;
19450: LD_ADDR_VAR 0 9
19454: PUSH
19455: LD_INT 120
19457: PUSH
19458: LD_INT 30
19460: PUSH
19461: LD_INT 80
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: LIST
19468: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
19469: LD_VAR 0 6
19473: PPUSH
19474: CALL_OW 264
19478: PUSH
19479: LD_INT 22
19481: PUSH
19482: EMPTY
19483: LIST
19484: IN
19485: IFFALSE 19506
// points := [ 40 , 1 , 1 ] ;
19487: LD_ADDR_VAR 0 9
19491: PUSH
19492: LD_INT 40
19494: PUSH
19495: LD_INT 1
19497: PUSH
19498: LD_INT 1
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: LIST
19505: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
19506: LD_VAR 0 6
19510: PPUSH
19511: CALL_OW 264
19515: PUSH
19516: LD_INT 29
19518: PUSH
19519: EMPTY
19520: LIST
19521: IN
19522: IFFALSE 19543
// points := [ 70 , 200 , 400 ] ;
19524: LD_ADDR_VAR 0 9
19528: PUSH
19529: LD_INT 70
19531: PUSH
19532: LD_INT 200
19534: PUSH
19535: LD_INT 400
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: LIST
19542: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
19543: LD_VAR 0 6
19547: PPUSH
19548: CALL_OW 264
19552: PUSH
19553: LD_INT 14
19555: PUSH
19556: LD_INT 53
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: IN
19563: IFFALSE 19584
// points := [ 40 , 10 , 20 ] ;
19565: LD_ADDR_VAR 0 9
19569: PUSH
19570: LD_INT 40
19572: PUSH
19573: LD_INT 10
19575: PUSH
19576: LD_INT 20
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: LIST
19583: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
19584: LD_VAR 0 6
19588: PPUSH
19589: CALL_OW 264
19593: PUSH
19594: LD_INT 9
19596: PUSH
19597: EMPTY
19598: LIST
19599: IN
19600: IFFALSE 19621
// points := [ 5 , 70 , 20 ] ;
19602: LD_ADDR_VAR 0 9
19606: PUSH
19607: LD_INT 5
19609: PUSH
19610: LD_INT 70
19612: PUSH
19613: LD_INT 20
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: LIST
19620: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
19621: LD_VAR 0 6
19625: PPUSH
19626: CALL_OW 264
19630: PUSH
19631: LD_INT 10
19633: PUSH
19634: EMPTY
19635: LIST
19636: IN
19637: IFFALSE 19658
// points := [ 35 , 110 , 70 ] ;
19639: LD_ADDR_VAR 0 9
19643: PUSH
19644: LD_INT 35
19646: PUSH
19647: LD_INT 110
19649: PUSH
19650: LD_INT 70
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: LIST
19657: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
19658: LD_VAR 0 6
19662: PPUSH
19663: CALL_OW 265
19667: PUSH
19668: LD_INT 25
19670: EQUAL
19671: IFFALSE 19692
// points := [ 80 , 65 , 100 ] ;
19673: LD_ADDR_VAR 0 9
19677: PUSH
19678: LD_INT 80
19680: PUSH
19681: LD_INT 65
19683: PUSH
19684: LD_INT 100
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: LIST
19691: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
19692: LD_VAR 0 6
19696: PPUSH
19697: CALL_OW 263
19701: PUSH
19702: LD_INT 1
19704: EQUAL
19705: IFFALSE 19740
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
19707: LD_ADDR_VAR 0 10
19711: PUSH
19712: LD_VAR 0 10
19716: PUSH
19717: LD_VAR 0 6
19721: PPUSH
19722: CALL_OW 311
19726: PPUSH
19727: LD_INT 3
19729: PPUSH
19730: CALL_OW 259
19734: PUSH
19735: LD_INT 4
19737: MUL
19738: MUL
19739: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
19740: LD_VAR 0 6
19744: PPUSH
19745: CALL_OW 263
19749: PUSH
19750: LD_INT 2
19752: EQUAL
19753: IFFALSE 19804
// begin j := IsControledBy ( i ) ;
19755: LD_ADDR_VAR 0 7
19759: PUSH
19760: LD_VAR 0 6
19764: PPUSH
19765: CALL_OW 312
19769: ST_TO_ADDR
// if j then
19770: LD_VAR 0 7
19774: IFFALSE 19804
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
19776: LD_ADDR_VAR 0 10
19780: PUSH
19781: LD_VAR 0 10
19785: PUSH
19786: LD_VAR 0 7
19790: PPUSH
19791: LD_INT 3
19793: PPUSH
19794: CALL_OW 259
19798: PUSH
19799: LD_INT 3
19801: MUL
19802: MUL
19803: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
19804: LD_VAR 0 6
19808: PPUSH
19809: CALL_OW 264
19813: PUSH
19814: LD_INT 5
19816: PUSH
19817: LD_INT 6
19819: PUSH
19820: LD_INT 46
19822: PUSH
19823: LD_INT 44
19825: PUSH
19826: LD_INT 47
19828: PUSH
19829: LD_INT 45
19831: PUSH
19832: LD_INT 28
19834: PUSH
19835: LD_INT 7
19837: PUSH
19838: LD_INT 27
19840: PUSH
19841: LD_INT 29
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: IN
19856: PUSH
19857: LD_VAR 0 1
19861: PPUSH
19862: LD_INT 52
19864: PPUSH
19865: CALL_OW 321
19869: PUSH
19870: LD_INT 2
19872: EQUAL
19873: AND
19874: IFFALSE 19891
// bpoints := bpoints * 1.2 ;
19876: LD_ADDR_VAR 0 10
19880: PUSH
19881: LD_VAR 0 10
19885: PUSH
19886: LD_REAL  1.20000000000000E+0000
19889: MUL
19890: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
19891: LD_VAR 0 6
19895: PPUSH
19896: CALL_OW 264
19900: PUSH
19901: LD_INT 6
19903: PUSH
19904: LD_INT 46
19906: PUSH
19907: LD_INT 47
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: LIST
19914: IN
19915: IFFALSE 19932
// bpoints := bpoints * 1.2 ;
19917: LD_ADDR_VAR 0 10
19921: PUSH
19922: LD_VAR 0 10
19926: PUSH
19927: LD_REAL  1.20000000000000E+0000
19930: MUL
19931: ST_TO_ADDR
// end ; unit_building :
19932: GO 19946
19934: LD_INT 3
19936: DOUBLE
19937: EQUAL
19938: IFTRUE 19942
19940: GO 19945
19942: POP
// ; end ;
19943: GO 19946
19945: POP
// for j = 1 to 3 do
19946: LD_ADDR_VAR 0 7
19950: PUSH
19951: DOUBLE
19952: LD_INT 1
19954: DEC
19955: ST_TO_ADDR
19956: LD_INT 3
19958: PUSH
19959: FOR_TO
19960: IFFALSE 20013
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
19962: LD_ADDR_VAR 0 5
19966: PUSH
19967: LD_VAR 0 5
19971: PPUSH
19972: LD_VAR 0 7
19976: PPUSH
19977: LD_VAR 0 5
19981: PUSH
19982: LD_VAR 0 7
19986: ARRAY
19987: PUSH
19988: LD_VAR 0 9
19992: PUSH
19993: LD_VAR 0 7
19997: ARRAY
19998: PUSH
19999: LD_VAR 0 10
20003: MUL
20004: PLUS
20005: PPUSH
20006: CALL_OW 1
20010: ST_TO_ADDR
20011: GO 19959
20013: POP
20014: POP
// end ;
20015: GO 18498
20017: POP
20018: POP
// result := Replace ( result , 4 , tmp ) ;
20019: LD_ADDR_VAR 0 5
20023: PUSH
20024: LD_VAR 0 5
20028: PPUSH
20029: LD_INT 4
20031: PPUSH
20032: LD_VAR 0 8
20036: PPUSH
20037: CALL_OW 1
20041: ST_TO_ADDR
// end ;
20042: LD_VAR 0 5
20046: RET
// export function DangerAtRange ( unit , range ) ; begin
20047: LD_INT 0
20049: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
20050: LD_ADDR_VAR 0 3
20054: PUSH
20055: LD_VAR 0 1
20059: PPUSH
20060: CALL_OW 255
20064: PPUSH
20065: LD_VAR 0 1
20069: PPUSH
20070: CALL_OW 250
20074: PPUSH
20075: LD_VAR 0 1
20079: PPUSH
20080: CALL_OW 251
20084: PPUSH
20085: LD_VAR 0 2
20089: PPUSH
20090: CALL 18350 0 4
20094: ST_TO_ADDR
// end ;
20095: LD_VAR 0 3
20099: RET
// export function DangerInArea ( side , area ) ; begin
20100: LD_INT 0
20102: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
20103: LD_ADDR_VAR 0 3
20107: PUSH
20108: LD_VAR 0 2
20112: PPUSH
20113: LD_INT 81
20115: PUSH
20116: LD_VAR 0 1
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PPUSH
20125: CALL_OW 70
20129: ST_TO_ADDR
// end ;
20130: LD_VAR 0 3
20134: RET
// export function IsExtension ( b ) ; begin
20135: LD_INT 0
20137: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
20138: LD_ADDR_VAR 0 2
20142: PUSH
20143: LD_VAR 0 1
20147: PUSH
20148: LD_INT 23
20150: PUSH
20151: LD_INT 20
20153: PUSH
20154: LD_INT 22
20156: PUSH
20157: LD_INT 17
20159: PUSH
20160: LD_INT 24
20162: PUSH
20163: LD_INT 21
20165: PUSH
20166: LD_INT 19
20168: PUSH
20169: LD_INT 16
20171: PUSH
20172: LD_INT 25
20174: PUSH
20175: LD_INT 18
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: IN
20190: ST_TO_ADDR
// end ;
20191: LD_VAR 0 2
20195: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
20196: LD_INT 0
20198: PPUSH
20199: PPUSH
20200: PPUSH
// result := [ ] ;
20201: LD_ADDR_VAR 0 3
20205: PUSH
20206: EMPTY
20207: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
20208: LD_ADDR_VAR 0 4
20212: PUSH
20213: LD_VAR 0 2
20217: PPUSH
20218: LD_INT 21
20220: PUSH
20221: LD_INT 3
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: PPUSH
20228: CALL_OW 70
20232: ST_TO_ADDR
// if not tmp then
20233: LD_VAR 0 4
20237: NOT
20238: IFFALSE 20242
// exit ;
20240: GO 20300
// for i in tmp do
20242: LD_ADDR_VAR 0 5
20246: PUSH
20247: LD_VAR 0 4
20251: PUSH
20252: FOR_IN
20253: IFFALSE 20288
// if GetBase ( i ) <> base then
20255: LD_VAR 0 5
20259: PPUSH
20260: CALL_OW 274
20264: PUSH
20265: LD_VAR 0 1
20269: NONEQUAL
20270: IFFALSE 20286
// ComLinkToBase ( base , i ) ;
20272: LD_VAR 0 1
20276: PPUSH
20277: LD_VAR 0 5
20281: PPUSH
20282: CALL_OW 169
20286: GO 20252
20288: POP
20289: POP
// result := tmp ;
20290: LD_ADDR_VAR 0 3
20294: PUSH
20295: LD_VAR 0 4
20299: ST_TO_ADDR
// end ;
20300: LD_VAR 0 3
20304: RET
// export function ComComplete ( unit , b ) ; var i ; begin
20305: LD_INT 0
20307: PPUSH
20308: PPUSH
// if BuildingStatus ( b ) = bs_build then
20309: LD_VAR 0 2
20313: PPUSH
20314: CALL_OW 461
20318: PUSH
20319: LD_INT 1
20321: EQUAL
20322: IFFALSE 20382
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
20324: LD_VAR 0 1
20328: PPUSH
20329: LD_STRING h
20331: PUSH
20332: LD_VAR 0 2
20336: PPUSH
20337: CALL_OW 250
20341: PUSH
20342: LD_VAR 0 2
20346: PPUSH
20347: CALL_OW 251
20351: PUSH
20352: LD_VAR 0 2
20356: PUSH
20357: LD_INT 0
20359: PUSH
20360: LD_INT 0
20362: PUSH
20363: LD_INT 0
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: PUSH
20375: EMPTY
20376: LIST
20377: PPUSH
20378: CALL_OW 446
// end ;
20382: LD_VAR 0 3
20386: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
20387: LD_INT 0
20389: PPUSH
20390: PPUSH
20391: PPUSH
20392: PPUSH
20393: PPUSH
20394: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
20395: LD_VAR 0 1
20399: NOT
20400: PUSH
20401: LD_VAR 0 1
20405: PPUSH
20406: CALL_OW 263
20410: PUSH
20411: LD_INT 2
20413: EQUAL
20414: NOT
20415: OR
20416: IFFALSE 20420
// exit ;
20418: GO 20736
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
20420: LD_ADDR_VAR 0 6
20424: PUSH
20425: LD_INT 22
20427: PUSH
20428: LD_VAR 0 1
20432: PPUSH
20433: CALL_OW 255
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 2
20444: PUSH
20445: LD_INT 30
20447: PUSH
20448: LD_INT 36
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 34
20457: PUSH
20458: LD_INT 31
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: LIST
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PPUSH
20474: CALL_OW 69
20478: ST_TO_ADDR
// if not tmp then
20479: LD_VAR 0 6
20483: NOT
20484: IFFALSE 20488
// exit ;
20486: GO 20736
// result := [ ] ;
20488: LD_ADDR_VAR 0 2
20492: PUSH
20493: EMPTY
20494: ST_TO_ADDR
// for i in tmp do
20495: LD_ADDR_VAR 0 3
20499: PUSH
20500: LD_VAR 0 6
20504: PUSH
20505: FOR_IN
20506: IFFALSE 20577
// begin t := UnitsInside ( i ) ;
20508: LD_ADDR_VAR 0 4
20512: PUSH
20513: LD_VAR 0 3
20517: PPUSH
20518: CALL_OW 313
20522: ST_TO_ADDR
// if t then
20523: LD_VAR 0 4
20527: IFFALSE 20575
// for j in t do
20529: LD_ADDR_VAR 0 7
20533: PUSH
20534: LD_VAR 0 4
20538: PUSH
20539: FOR_IN
20540: IFFALSE 20573
// result := Insert ( result , result + 1 , j ) ;
20542: LD_ADDR_VAR 0 2
20546: PUSH
20547: LD_VAR 0 2
20551: PPUSH
20552: LD_VAR 0 2
20556: PUSH
20557: LD_INT 1
20559: PLUS
20560: PPUSH
20561: LD_VAR 0 7
20565: PPUSH
20566: CALL_OW 2
20570: ST_TO_ADDR
20571: GO 20539
20573: POP
20574: POP
// end ;
20575: GO 20505
20577: POP
20578: POP
// if not result then
20579: LD_VAR 0 2
20583: NOT
20584: IFFALSE 20588
// exit ;
20586: GO 20736
// mech := result [ 1 ] ;
20588: LD_ADDR_VAR 0 5
20592: PUSH
20593: LD_VAR 0 2
20597: PUSH
20598: LD_INT 1
20600: ARRAY
20601: ST_TO_ADDR
// if result > 1 then
20602: LD_VAR 0 2
20606: PUSH
20607: LD_INT 1
20609: GREATER
20610: IFFALSE 20722
// for i = 2 to result do
20612: LD_ADDR_VAR 0 3
20616: PUSH
20617: DOUBLE
20618: LD_INT 2
20620: DEC
20621: ST_TO_ADDR
20622: LD_VAR 0 2
20626: PUSH
20627: FOR_TO
20628: IFFALSE 20720
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
20630: LD_ADDR_VAR 0 4
20634: PUSH
20635: LD_VAR 0 2
20639: PUSH
20640: LD_VAR 0 3
20644: ARRAY
20645: PPUSH
20646: LD_INT 3
20648: PPUSH
20649: CALL_OW 259
20653: PUSH
20654: LD_VAR 0 2
20658: PUSH
20659: LD_VAR 0 3
20663: ARRAY
20664: PPUSH
20665: CALL_OW 432
20669: MINUS
20670: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
20671: LD_VAR 0 4
20675: PUSH
20676: LD_VAR 0 5
20680: PPUSH
20681: LD_INT 3
20683: PPUSH
20684: CALL_OW 259
20688: PUSH
20689: LD_VAR 0 5
20693: PPUSH
20694: CALL_OW 432
20698: MINUS
20699: GREATEREQUAL
20700: IFFALSE 20718
// mech := result [ i ] ;
20702: LD_ADDR_VAR 0 5
20706: PUSH
20707: LD_VAR 0 2
20711: PUSH
20712: LD_VAR 0 3
20716: ARRAY
20717: ST_TO_ADDR
// end ;
20718: GO 20627
20720: POP
20721: POP
// ComLinkTo ( vehicle , mech ) ;
20722: LD_VAR 0 1
20726: PPUSH
20727: LD_VAR 0 5
20731: PPUSH
20732: CALL_OW 135
// end ;
20736: LD_VAR 0 2
20740: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
20741: LD_INT 0
20743: PPUSH
20744: PPUSH
20745: PPUSH
20746: PPUSH
20747: PPUSH
20748: PPUSH
20749: PPUSH
20750: PPUSH
20751: PPUSH
20752: PPUSH
20753: PPUSH
20754: PPUSH
20755: PPUSH
// result := [ ] ;
20756: LD_ADDR_VAR 0 7
20760: PUSH
20761: EMPTY
20762: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
20763: LD_VAR 0 1
20767: PPUSH
20768: CALL_OW 266
20772: PUSH
20773: LD_INT 0
20775: PUSH
20776: LD_INT 1
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: IN
20783: NOT
20784: IFFALSE 20788
// exit ;
20786: GO 22419
// if name then
20788: LD_VAR 0 3
20792: IFFALSE 20808
// SetBName ( base_dep , name ) ;
20794: LD_VAR 0 1
20798: PPUSH
20799: LD_VAR 0 3
20803: PPUSH
20804: CALL_OW 500
// base := GetBase ( base_dep ) ;
20808: LD_ADDR_VAR 0 15
20812: PUSH
20813: LD_VAR 0 1
20817: PPUSH
20818: CALL_OW 274
20822: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
20823: LD_ADDR_VAR 0 16
20827: PUSH
20828: LD_VAR 0 1
20832: PPUSH
20833: CALL_OW 255
20837: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
20838: LD_ADDR_VAR 0 17
20842: PUSH
20843: LD_VAR 0 1
20847: PPUSH
20848: CALL_OW 248
20852: ST_TO_ADDR
// if sources then
20853: LD_VAR 0 5
20857: IFFALSE 20904
// for i = 1 to 3 do
20859: LD_ADDR_VAR 0 8
20863: PUSH
20864: DOUBLE
20865: LD_INT 1
20867: DEC
20868: ST_TO_ADDR
20869: LD_INT 3
20871: PUSH
20872: FOR_TO
20873: IFFALSE 20902
// AddResourceType ( base , i , sources [ i ] ) ;
20875: LD_VAR 0 15
20879: PPUSH
20880: LD_VAR 0 8
20884: PPUSH
20885: LD_VAR 0 5
20889: PUSH
20890: LD_VAR 0 8
20894: ARRAY
20895: PPUSH
20896: CALL_OW 276
20900: GO 20872
20902: POP
20903: POP
// buildings := GetBaseBuildings ( base , area ) ;
20904: LD_ADDR_VAR 0 18
20908: PUSH
20909: LD_VAR 0 15
20913: PPUSH
20914: LD_VAR 0 2
20918: PPUSH
20919: CALL 20196 0 2
20923: ST_TO_ADDR
// InitHc ;
20924: CALL_OW 19
// InitUc ;
20928: CALL_OW 18
// uc_side := side ;
20932: LD_ADDR_OWVAR 20
20936: PUSH
20937: LD_VAR 0 16
20941: ST_TO_ADDR
// uc_nation := nation ;
20942: LD_ADDR_OWVAR 21
20946: PUSH
20947: LD_VAR 0 17
20951: ST_TO_ADDR
// if buildings then
20952: LD_VAR 0 18
20956: IFFALSE 22278
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
20958: LD_ADDR_VAR 0 19
20962: PUSH
20963: LD_VAR 0 18
20967: PPUSH
20968: LD_INT 2
20970: PUSH
20971: LD_INT 30
20973: PUSH
20974: LD_INT 29
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 30
20983: PUSH
20984: LD_INT 30
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: LIST
20995: PPUSH
20996: CALL_OW 72
21000: ST_TO_ADDR
// if tmp then
21001: LD_VAR 0 19
21005: IFFALSE 21053
// for i in tmp do
21007: LD_ADDR_VAR 0 8
21011: PUSH
21012: LD_VAR 0 19
21016: PUSH
21017: FOR_IN
21018: IFFALSE 21051
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
21020: LD_VAR 0 8
21024: PPUSH
21025: CALL_OW 250
21029: PPUSH
21030: LD_VAR 0 8
21034: PPUSH
21035: CALL_OW 251
21039: PPUSH
21040: LD_VAR 0 16
21044: PPUSH
21045: CALL_OW 441
21049: GO 21017
21051: POP
21052: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
21053: LD_VAR 0 18
21057: PPUSH
21058: LD_INT 2
21060: PUSH
21061: LD_INT 30
21063: PUSH
21064: LD_INT 32
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 30
21073: PUSH
21074: LD_INT 33
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: LIST
21085: PPUSH
21086: CALL_OW 72
21090: IFFALSE 21178
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
21092: LD_ADDR_VAR 0 8
21096: PUSH
21097: LD_VAR 0 18
21101: PPUSH
21102: LD_INT 2
21104: PUSH
21105: LD_INT 30
21107: PUSH
21108: LD_INT 32
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 30
21117: PUSH
21118: LD_INT 33
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: LIST
21129: PPUSH
21130: CALL_OW 72
21134: PUSH
21135: FOR_IN
21136: IFFALSE 21176
// begin if not GetBWeapon ( i ) then
21138: LD_VAR 0 8
21142: PPUSH
21143: CALL_OW 269
21147: NOT
21148: IFFALSE 21174
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
21150: LD_VAR 0 8
21154: PPUSH
21155: LD_VAR 0 8
21159: PPUSH
21160: LD_VAR 0 2
21164: PPUSH
21165: CALL 22424 0 2
21169: PPUSH
21170: CALL_OW 431
// end ;
21174: GO 21135
21176: POP
21177: POP
// end ; for i = 1 to personel do
21178: LD_ADDR_VAR 0 8
21182: PUSH
21183: DOUBLE
21184: LD_INT 1
21186: DEC
21187: ST_TO_ADDR
21188: LD_VAR 0 6
21192: PUSH
21193: FOR_TO
21194: IFFALSE 22258
// begin if i > 4 then
21196: LD_VAR 0 8
21200: PUSH
21201: LD_INT 4
21203: GREATER
21204: IFFALSE 21208
// break ;
21206: GO 22258
// case i of 1 :
21208: LD_VAR 0 8
21212: PUSH
21213: LD_INT 1
21215: DOUBLE
21216: EQUAL
21217: IFTRUE 21221
21219: GO 21301
21221: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
21222: LD_ADDR_VAR 0 12
21226: PUSH
21227: LD_VAR 0 18
21231: PPUSH
21232: LD_INT 22
21234: PUSH
21235: LD_VAR 0 16
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: LD_INT 58
21246: PUSH
21247: EMPTY
21248: LIST
21249: PUSH
21250: LD_INT 2
21252: PUSH
21253: LD_INT 30
21255: PUSH
21256: LD_INT 32
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: PUSH
21263: LD_INT 30
21265: PUSH
21266: LD_INT 4
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: PUSH
21273: LD_INT 30
21275: PUSH
21276: LD_INT 5
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: LIST
21293: PPUSH
21294: CALL_OW 72
21298: ST_TO_ADDR
21299: GO 21523
21301: LD_INT 2
21303: DOUBLE
21304: EQUAL
21305: IFTRUE 21309
21307: GO 21371
21309: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
21310: LD_ADDR_VAR 0 12
21314: PUSH
21315: LD_VAR 0 18
21319: PPUSH
21320: LD_INT 22
21322: PUSH
21323: LD_VAR 0 16
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 2
21334: PUSH
21335: LD_INT 30
21337: PUSH
21338: LD_INT 0
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 30
21347: PUSH
21348: LD_INT 1
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: LIST
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PPUSH
21364: CALL_OW 72
21368: ST_TO_ADDR
21369: GO 21523
21371: LD_INT 3
21373: DOUBLE
21374: EQUAL
21375: IFTRUE 21379
21377: GO 21441
21379: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
21380: LD_ADDR_VAR 0 12
21384: PUSH
21385: LD_VAR 0 18
21389: PPUSH
21390: LD_INT 22
21392: PUSH
21393: LD_VAR 0 16
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: PUSH
21402: LD_INT 2
21404: PUSH
21405: LD_INT 30
21407: PUSH
21408: LD_INT 2
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 30
21417: PUSH
21418: LD_INT 3
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: LIST
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: PPUSH
21434: CALL_OW 72
21438: ST_TO_ADDR
21439: GO 21523
21441: LD_INT 4
21443: DOUBLE
21444: EQUAL
21445: IFTRUE 21449
21447: GO 21522
21449: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
21450: LD_ADDR_VAR 0 12
21454: PUSH
21455: LD_VAR 0 18
21459: PPUSH
21460: LD_INT 22
21462: PUSH
21463: LD_VAR 0 16
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 2
21474: PUSH
21475: LD_INT 30
21477: PUSH
21478: LD_INT 6
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 30
21487: PUSH
21488: LD_INT 7
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 30
21497: PUSH
21498: LD_INT 8
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PPUSH
21515: CALL_OW 72
21519: ST_TO_ADDR
21520: GO 21523
21522: POP
// if i = 1 then
21523: LD_VAR 0 8
21527: PUSH
21528: LD_INT 1
21530: EQUAL
21531: IFFALSE 21642
// begin tmp := [ ] ;
21533: LD_ADDR_VAR 0 19
21537: PUSH
21538: EMPTY
21539: ST_TO_ADDR
// for j in f do
21540: LD_ADDR_VAR 0 9
21544: PUSH
21545: LD_VAR 0 12
21549: PUSH
21550: FOR_IN
21551: IFFALSE 21624
// if GetBType ( j ) = b_bunker then
21553: LD_VAR 0 9
21557: PPUSH
21558: CALL_OW 266
21562: PUSH
21563: LD_INT 32
21565: EQUAL
21566: IFFALSE 21593
// tmp := Insert ( tmp , 1 , j ) else
21568: LD_ADDR_VAR 0 19
21572: PUSH
21573: LD_VAR 0 19
21577: PPUSH
21578: LD_INT 1
21580: PPUSH
21581: LD_VAR 0 9
21585: PPUSH
21586: CALL_OW 2
21590: ST_TO_ADDR
21591: GO 21622
// tmp := Insert ( tmp , tmp + 1 , j ) ;
21593: LD_ADDR_VAR 0 19
21597: PUSH
21598: LD_VAR 0 19
21602: PPUSH
21603: LD_VAR 0 19
21607: PUSH
21608: LD_INT 1
21610: PLUS
21611: PPUSH
21612: LD_VAR 0 9
21616: PPUSH
21617: CALL_OW 2
21621: ST_TO_ADDR
21622: GO 21550
21624: POP
21625: POP
// if tmp then
21626: LD_VAR 0 19
21630: IFFALSE 21642
// f := tmp ;
21632: LD_ADDR_VAR 0 12
21636: PUSH
21637: LD_VAR 0 19
21641: ST_TO_ADDR
// end ; x := personel [ i ] ;
21642: LD_ADDR_VAR 0 13
21646: PUSH
21647: LD_VAR 0 6
21651: PUSH
21652: LD_VAR 0 8
21656: ARRAY
21657: ST_TO_ADDR
// if x = - 1 then
21658: LD_VAR 0 13
21662: PUSH
21663: LD_INT 1
21665: NEG
21666: EQUAL
21667: IFFALSE 21876
// begin for j in f do
21669: LD_ADDR_VAR 0 9
21673: PUSH
21674: LD_VAR 0 12
21678: PUSH
21679: FOR_IN
21680: IFFALSE 21872
// repeat InitHc ;
21682: CALL_OW 19
// if GetBType ( j ) = b_barracks then
21686: LD_VAR 0 9
21690: PPUSH
21691: CALL_OW 266
21695: PUSH
21696: LD_INT 5
21698: EQUAL
21699: IFFALSE 21769
// begin if UnitsInside ( j ) < 3 then
21701: LD_VAR 0 9
21705: PPUSH
21706: CALL_OW 313
21710: PUSH
21711: LD_INT 3
21713: LESS
21714: IFFALSE 21750
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21716: LD_INT 0
21718: PPUSH
21719: LD_INT 5
21721: PUSH
21722: LD_INT 8
21724: PUSH
21725: LD_INT 9
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: LIST
21732: PUSH
21733: LD_VAR 0 17
21737: ARRAY
21738: PPUSH
21739: LD_VAR 0 4
21743: PPUSH
21744: CALL_OW 380
21748: GO 21767
// PrepareHuman ( false , i , skill ) ;
21750: LD_INT 0
21752: PPUSH
21753: LD_VAR 0 8
21757: PPUSH
21758: LD_VAR 0 4
21762: PPUSH
21763: CALL_OW 380
// end else
21767: GO 21786
// PrepareHuman ( false , i , skill ) ;
21769: LD_INT 0
21771: PPUSH
21772: LD_VAR 0 8
21776: PPUSH
21777: LD_VAR 0 4
21781: PPUSH
21782: CALL_OW 380
// un := CreateHuman ;
21786: LD_ADDR_VAR 0 14
21790: PUSH
21791: CALL_OW 44
21795: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21796: LD_ADDR_VAR 0 7
21800: PUSH
21801: LD_VAR 0 7
21805: PPUSH
21806: LD_INT 1
21808: PPUSH
21809: LD_VAR 0 14
21813: PPUSH
21814: CALL_OW 2
21818: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
21819: LD_VAR 0 14
21823: PPUSH
21824: LD_VAR 0 9
21828: PPUSH
21829: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
21833: LD_VAR 0 9
21837: PPUSH
21838: CALL_OW 313
21842: PUSH
21843: LD_INT 6
21845: EQUAL
21846: PUSH
21847: LD_VAR 0 9
21851: PPUSH
21852: CALL_OW 266
21856: PUSH
21857: LD_INT 32
21859: PUSH
21860: LD_INT 31
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: IN
21867: OR
21868: IFFALSE 21682
21870: GO 21679
21872: POP
21873: POP
// end else
21874: GO 22256
// for j = 1 to x do
21876: LD_ADDR_VAR 0 9
21880: PUSH
21881: DOUBLE
21882: LD_INT 1
21884: DEC
21885: ST_TO_ADDR
21886: LD_VAR 0 13
21890: PUSH
21891: FOR_TO
21892: IFFALSE 22254
// begin InitHc ;
21894: CALL_OW 19
// if not f then
21898: LD_VAR 0 12
21902: NOT
21903: IFFALSE 21992
// begin PrepareHuman ( false , i , skill ) ;
21905: LD_INT 0
21907: PPUSH
21908: LD_VAR 0 8
21912: PPUSH
21913: LD_VAR 0 4
21917: PPUSH
21918: CALL_OW 380
// un := CreateHuman ;
21922: LD_ADDR_VAR 0 14
21926: PUSH
21927: CALL_OW 44
21931: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21932: LD_ADDR_VAR 0 7
21936: PUSH
21937: LD_VAR 0 7
21941: PPUSH
21942: LD_INT 1
21944: PPUSH
21945: LD_VAR 0 14
21949: PPUSH
21950: CALL_OW 2
21954: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21955: LD_VAR 0 14
21959: PPUSH
21960: LD_VAR 0 1
21964: PPUSH
21965: CALL_OW 250
21969: PPUSH
21970: LD_VAR 0 1
21974: PPUSH
21975: CALL_OW 251
21979: PPUSH
21980: LD_INT 10
21982: PPUSH
21983: LD_INT 0
21985: PPUSH
21986: CALL_OW 50
// continue ;
21990: GO 21891
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
21992: LD_VAR 0 12
21996: PUSH
21997: LD_INT 1
21999: ARRAY
22000: PPUSH
22001: CALL_OW 313
22005: PUSH
22006: LD_VAR 0 12
22010: PUSH
22011: LD_INT 1
22013: ARRAY
22014: PPUSH
22015: CALL_OW 266
22019: PUSH
22020: LD_INT 32
22022: PUSH
22023: LD_INT 31
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: IN
22030: AND
22031: PUSH
22032: LD_VAR 0 12
22036: PUSH
22037: LD_INT 1
22039: ARRAY
22040: PPUSH
22041: CALL_OW 313
22045: PUSH
22046: LD_INT 6
22048: EQUAL
22049: OR
22050: IFFALSE 22070
// f := Delete ( f , 1 ) ;
22052: LD_ADDR_VAR 0 12
22056: PUSH
22057: LD_VAR 0 12
22061: PPUSH
22062: LD_INT 1
22064: PPUSH
22065: CALL_OW 3
22069: ST_TO_ADDR
// if not f then
22070: LD_VAR 0 12
22074: NOT
22075: IFFALSE 22093
// begin x := x + 2 ;
22077: LD_ADDR_VAR 0 13
22081: PUSH
22082: LD_VAR 0 13
22086: PUSH
22087: LD_INT 2
22089: PLUS
22090: ST_TO_ADDR
// continue ;
22091: GO 21891
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
22093: LD_VAR 0 12
22097: PUSH
22098: LD_INT 1
22100: ARRAY
22101: PPUSH
22102: CALL_OW 266
22106: PUSH
22107: LD_INT 5
22109: EQUAL
22110: IFFALSE 22184
// begin if UnitsInside ( f [ 1 ] ) < 3 then
22112: LD_VAR 0 12
22116: PUSH
22117: LD_INT 1
22119: ARRAY
22120: PPUSH
22121: CALL_OW 313
22125: PUSH
22126: LD_INT 3
22128: LESS
22129: IFFALSE 22165
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22131: LD_INT 0
22133: PPUSH
22134: LD_INT 5
22136: PUSH
22137: LD_INT 8
22139: PUSH
22140: LD_INT 9
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: LIST
22147: PUSH
22148: LD_VAR 0 17
22152: ARRAY
22153: PPUSH
22154: LD_VAR 0 4
22158: PPUSH
22159: CALL_OW 380
22163: GO 22182
// PrepareHuman ( false , i , skill ) ;
22165: LD_INT 0
22167: PPUSH
22168: LD_VAR 0 8
22172: PPUSH
22173: LD_VAR 0 4
22177: PPUSH
22178: CALL_OW 380
// end else
22182: GO 22201
// PrepareHuman ( false , i , skill ) ;
22184: LD_INT 0
22186: PPUSH
22187: LD_VAR 0 8
22191: PPUSH
22192: LD_VAR 0 4
22196: PPUSH
22197: CALL_OW 380
// un := CreateHuman ;
22201: LD_ADDR_VAR 0 14
22205: PUSH
22206: CALL_OW 44
22210: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22211: LD_ADDR_VAR 0 7
22215: PUSH
22216: LD_VAR 0 7
22220: PPUSH
22221: LD_INT 1
22223: PPUSH
22224: LD_VAR 0 14
22228: PPUSH
22229: CALL_OW 2
22233: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
22234: LD_VAR 0 14
22238: PPUSH
22239: LD_VAR 0 12
22243: PUSH
22244: LD_INT 1
22246: ARRAY
22247: PPUSH
22248: CALL_OW 52
// end ;
22252: GO 21891
22254: POP
22255: POP
// end ;
22256: GO 21193
22258: POP
22259: POP
// result := result ^ buildings ;
22260: LD_ADDR_VAR 0 7
22264: PUSH
22265: LD_VAR 0 7
22269: PUSH
22270: LD_VAR 0 18
22274: ADD
22275: ST_TO_ADDR
// end else
22276: GO 22419
// begin for i = 1 to personel do
22278: LD_ADDR_VAR 0 8
22282: PUSH
22283: DOUBLE
22284: LD_INT 1
22286: DEC
22287: ST_TO_ADDR
22288: LD_VAR 0 6
22292: PUSH
22293: FOR_TO
22294: IFFALSE 22417
// begin if i > 4 then
22296: LD_VAR 0 8
22300: PUSH
22301: LD_INT 4
22303: GREATER
22304: IFFALSE 22308
// break ;
22306: GO 22417
// x := personel [ i ] ;
22308: LD_ADDR_VAR 0 13
22312: PUSH
22313: LD_VAR 0 6
22317: PUSH
22318: LD_VAR 0 8
22322: ARRAY
22323: ST_TO_ADDR
// if x = - 1 then
22324: LD_VAR 0 13
22328: PUSH
22329: LD_INT 1
22331: NEG
22332: EQUAL
22333: IFFALSE 22337
// continue ;
22335: GO 22293
// PrepareHuman ( false , i , skill ) ;
22337: LD_INT 0
22339: PPUSH
22340: LD_VAR 0 8
22344: PPUSH
22345: LD_VAR 0 4
22349: PPUSH
22350: CALL_OW 380
// un := CreateHuman ;
22354: LD_ADDR_VAR 0 14
22358: PUSH
22359: CALL_OW 44
22363: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22364: LD_VAR 0 14
22368: PPUSH
22369: LD_VAR 0 1
22373: PPUSH
22374: CALL_OW 250
22378: PPUSH
22379: LD_VAR 0 1
22383: PPUSH
22384: CALL_OW 251
22388: PPUSH
22389: LD_INT 10
22391: PPUSH
22392: LD_INT 0
22394: PPUSH
22395: CALL_OW 50
// result := result ^ un ;
22399: LD_ADDR_VAR 0 7
22403: PUSH
22404: LD_VAR 0 7
22408: PUSH
22409: LD_VAR 0 14
22413: ADD
22414: ST_TO_ADDR
// end ;
22415: GO 22293
22417: POP
22418: POP
// end ; end ;
22419: LD_VAR 0 7
22423: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
22424: LD_INT 0
22426: PPUSH
22427: PPUSH
22428: PPUSH
22429: PPUSH
22430: PPUSH
22431: PPUSH
22432: PPUSH
22433: PPUSH
22434: PPUSH
22435: PPUSH
22436: PPUSH
22437: PPUSH
22438: PPUSH
22439: PPUSH
22440: PPUSH
22441: PPUSH
// result := false ;
22442: LD_ADDR_VAR 0 3
22446: PUSH
22447: LD_INT 0
22449: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
22450: LD_VAR 0 1
22454: NOT
22455: PUSH
22456: LD_VAR 0 1
22460: PPUSH
22461: CALL_OW 266
22465: PUSH
22466: LD_INT 32
22468: PUSH
22469: LD_INT 33
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: IN
22476: NOT
22477: OR
22478: IFFALSE 22482
// exit ;
22480: GO 23618
// nat := GetNation ( tower ) ;
22482: LD_ADDR_VAR 0 12
22486: PUSH
22487: LD_VAR 0 1
22491: PPUSH
22492: CALL_OW 248
22496: ST_TO_ADDR
// side := GetSide ( tower ) ;
22497: LD_ADDR_VAR 0 16
22501: PUSH
22502: LD_VAR 0 1
22506: PPUSH
22507: CALL_OW 255
22511: ST_TO_ADDR
// x := GetX ( tower ) ;
22512: LD_ADDR_VAR 0 10
22516: PUSH
22517: LD_VAR 0 1
22521: PPUSH
22522: CALL_OW 250
22526: ST_TO_ADDR
// y := GetY ( tower ) ;
22527: LD_ADDR_VAR 0 11
22531: PUSH
22532: LD_VAR 0 1
22536: PPUSH
22537: CALL_OW 251
22541: ST_TO_ADDR
// if not x or not y then
22542: LD_VAR 0 10
22546: NOT
22547: PUSH
22548: LD_VAR 0 11
22552: NOT
22553: OR
22554: IFFALSE 22558
// exit ;
22556: GO 23618
// weapon := 0 ;
22558: LD_ADDR_VAR 0 18
22562: PUSH
22563: LD_INT 0
22565: ST_TO_ADDR
// fac_list := [ ] ;
22566: LD_ADDR_VAR 0 17
22570: PUSH
22571: EMPTY
22572: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
22573: LD_ADDR_VAR 0 6
22577: PUSH
22578: LD_VAR 0 1
22582: PPUSH
22583: CALL_OW 274
22587: PPUSH
22588: LD_VAR 0 2
22592: PPUSH
22593: CALL 20196 0 2
22597: PPUSH
22598: LD_INT 30
22600: PUSH
22601: LD_INT 3
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PPUSH
22608: CALL_OW 72
22612: ST_TO_ADDR
// if not factories then
22613: LD_VAR 0 6
22617: NOT
22618: IFFALSE 22622
// exit ;
22620: GO 23618
// for i in factories do
22622: LD_ADDR_VAR 0 8
22626: PUSH
22627: LD_VAR 0 6
22631: PUSH
22632: FOR_IN
22633: IFFALSE 22658
// fac_list := fac_list union AvailableWeaponList ( i ) ;
22635: LD_ADDR_VAR 0 17
22639: PUSH
22640: LD_VAR 0 17
22644: PUSH
22645: LD_VAR 0 8
22649: PPUSH
22650: CALL_OW 478
22654: UNION
22655: ST_TO_ADDR
22656: GO 22632
22658: POP
22659: POP
// if not fac_list then
22660: LD_VAR 0 17
22664: NOT
22665: IFFALSE 22669
// exit ;
22667: GO 23618
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
22669: LD_ADDR_VAR 0 5
22673: PUSH
22674: LD_INT 4
22676: PUSH
22677: LD_INT 5
22679: PUSH
22680: LD_INT 9
22682: PUSH
22683: LD_INT 10
22685: PUSH
22686: LD_INT 6
22688: PUSH
22689: LD_INT 7
22691: PUSH
22692: LD_INT 11
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 27
22706: PUSH
22707: LD_INT 28
22709: PUSH
22710: LD_INT 26
22712: PUSH
22713: LD_INT 30
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: PUSH
22722: LD_INT 43
22724: PUSH
22725: LD_INT 44
22727: PUSH
22728: LD_INT 46
22730: PUSH
22731: LD_INT 45
22733: PUSH
22734: LD_INT 47
22736: PUSH
22737: LD_INT 49
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: LIST
22752: PUSH
22753: LD_VAR 0 12
22757: ARRAY
22758: ST_TO_ADDR
// for i in list do
22759: LD_ADDR_VAR 0 8
22763: PUSH
22764: LD_VAR 0 5
22768: PUSH
22769: FOR_IN
22770: IFFALSE 22803
// if not i in fac_list then
22772: LD_VAR 0 8
22776: PUSH
22777: LD_VAR 0 17
22781: IN
22782: NOT
22783: IFFALSE 22801
// list := list diff i ;
22785: LD_ADDR_VAR 0 5
22789: PUSH
22790: LD_VAR 0 5
22794: PUSH
22795: LD_VAR 0 8
22799: DIFF
22800: ST_TO_ADDR
22801: GO 22769
22803: POP
22804: POP
// if not list then
22805: LD_VAR 0 5
22809: NOT
22810: IFFALSE 22814
// exit ;
22812: GO 23618
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
22814: LD_VAR 0 12
22818: PUSH
22819: LD_INT 3
22821: EQUAL
22822: PUSH
22823: LD_INT 49
22825: PUSH
22826: LD_VAR 0 5
22830: IN
22831: AND
22832: PUSH
22833: LD_INT 31
22835: PPUSH
22836: LD_VAR 0 16
22840: PPUSH
22841: CALL_OW 321
22845: PUSH
22846: LD_INT 2
22848: EQUAL
22849: AND
22850: IFFALSE 22910
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
22852: LD_INT 22
22854: PUSH
22855: LD_VAR 0 16
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: LD_INT 35
22866: PUSH
22867: LD_INT 49
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 91
22876: PUSH
22877: LD_VAR 0 1
22881: PUSH
22882: LD_INT 10
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: LIST
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: LIST
22894: PPUSH
22895: CALL_OW 69
22899: NOT
22900: IFFALSE 22910
// weapon := ru_time_lapser ;
22902: LD_ADDR_VAR 0 18
22906: PUSH
22907: LD_INT 49
22909: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
22910: LD_VAR 0 12
22914: PUSH
22915: LD_INT 1
22917: PUSH
22918: LD_INT 2
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: IN
22925: PUSH
22926: LD_INT 11
22928: PUSH
22929: LD_VAR 0 5
22933: IN
22934: PUSH
22935: LD_INT 30
22937: PUSH
22938: LD_VAR 0 5
22942: IN
22943: OR
22944: AND
22945: PUSH
22946: LD_INT 6
22948: PPUSH
22949: LD_VAR 0 16
22953: PPUSH
22954: CALL_OW 321
22958: PUSH
22959: LD_INT 2
22961: EQUAL
22962: AND
22963: IFFALSE 23128
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
22965: LD_INT 22
22967: PUSH
22968: LD_VAR 0 16
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PUSH
22977: LD_INT 2
22979: PUSH
22980: LD_INT 35
22982: PUSH
22983: LD_INT 11
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 35
22992: PUSH
22993: LD_INT 30
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 91
23007: PUSH
23008: LD_VAR 0 1
23012: PUSH
23013: LD_INT 18
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: LIST
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: LIST
23025: PPUSH
23026: CALL_OW 69
23030: NOT
23031: PUSH
23032: LD_INT 22
23034: PUSH
23035: LD_VAR 0 16
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 2
23046: PUSH
23047: LD_INT 30
23049: PUSH
23050: LD_INT 32
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 30
23059: PUSH
23060: LD_INT 33
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 91
23074: PUSH
23075: LD_VAR 0 1
23079: PUSH
23080: LD_INT 12
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: LIST
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: LIST
23092: PUSH
23093: EMPTY
23094: LIST
23095: PPUSH
23096: CALL_OW 69
23100: PUSH
23101: LD_INT 2
23103: GREATER
23104: AND
23105: IFFALSE 23128
// weapon := [ us_radar , ar_radar ] [ nat ] ;
23107: LD_ADDR_VAR 0 18
23111: PUSH
23112: LD_INT 11
23114: PUSH
23115: LD_INT 30
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: PUSH
23122: LD_VAR 0 12
23126: ARRAY
23127: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
23128: LD_VAR 0 18
23132: NOT
23133: PUSH
23134: LD_INT 40
23136: PPUSH
23137: LD_VAR 0 16
23141: PPUSH
23142: CALL_OW 321
23146: PUSH
23147: LD_INT 2
23149: EQUAL
23150: AND
23151: PUSH
23152: LD_INT 7
23154: PUSH
23155: LD_VAR 0 5
23159: IN
23160: PUSH
23161: LD_INT 28
23163: PUSH
23164: LD_VAR 0 5
23168: IN
23169: OR
23170: PUSH
23171: LD_INT 45
23173: PUSH
23174: LD_VAR 0 5
23178: IN
23179: OR
23180: AND
23181: IFFALSE 23435
// begin hex := GetHexInfo ( x , y ) ;
23183: LD_ADDR_VAR 0 4
23187: PUSH
23188: LD_VAR 0 10
23192: PPUSH
23193: LD_VAR 0 11
23197: PPUSH
23198: CALL_OW 546
23202: ST_TO_ADDR
// if hex [ 1 ] then
23203: LD_VAR 0 4
23207: PUSH
23208: LD_INT 1
23210: ARRAY
23211: IFFALSE 23215
// exit ;
23213: GO 23618
// height := hex [ 2 ] ;
23215: LD_ADDR_VAR 0 15
23219: PUSH
23220: LD_VAR 0 4
23224: PUSH
23225: LD_INT 2
23227: ARRAY
23228: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
23229: LD_ADDR_VAR 0 14
23233: PUSH
23234: LD_INT 0
23236: PUSH
23237: LD_INT 2
23239: PUSH
23240: LD_INT 3
23242: PUSH
23243: LD_INT 5
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: ST_TO_ADDR
// for i in tmp do
23252: LD_ADDR_VAR 0 8
23256: PUSH
23257: LD_VAR 0 14
23261: PUSH
23262: FOR_IN
23263: IFFALSE 23433
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
23265: LD_ADDR_VAR 0 9
23269: PUSH
23270: LD_VAR 0 10
23274: PPUSH
23275: LD_VAR 0 8
23279: PPUSH
23280: LD_INT 5
23282: PPUSH
23283: CALL_OW 272
23287: PUSH
23288: LD_VAR 0 11
23292: PPUSH
23293: LD_VAR 0 8
23297: PPUSH
23298: LD_INT 5
23300: PPUSH
23301: CALL_OW 273
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
23310: LD_VAR 0 9
23314: PUSH
23315: LD_INT 1
23317: ARRAY
23318: PPUSH
23319: LD_VAR 0 9
23323: PUSH
23324: LD_INT 2
23326: ARRAY
23327: PPUSH
23328: CALL_OW 488
23332: IFFALSE 23431
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
23334: LD_ADDR_VAR 0 4
23338: PUSH
23339: LD_VAR 0 9
23343: PUSH
23344: LD_INT 1
23346: ARRAY
23347: PPUSH
23348: LD_VAR 0 9
23352: PUSH
23353: LD_INT 2
23355: ARRAY
23356: PPUSH
23357: CALL_OW 546
23361: ST_TO_ADDR
// if hex [ 1 ] then
23362: LD_VAR 0 4
23366: PUSH
23367: LD_INT 1
23369: ARRAY
23370: IFFALSE 23374
// continue ;
23372: GO 23262
// h := hex [ 2 ] ;
23374: LD_ADDR_VAR 0 13
23378: PUSH
23379: LD_VAR 0 4
23383: PUSH
23384: LD_INT 2
23386: ARRAY
23387: ST_TO_ADDR
// if h + 7 < height then
23388: LD_VAR 0 13
23392: PUSH
23393: LD_INT 7
23395: PLUS
23396: PUSH
23397: LD_VAR 0 15
23401: LESS
23402: IFFALSE 23431
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
23404: LD_ADDR_VAR 0 18
23408: PUSH
23409: LD_INT 7
23411: PUSH
23412: LD_INT 28
23414: PUSH
23415: LD_INT 45
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: LIST
23422: PUSH
23423: LD_VAR 0 12
23427: ARRAY
23428: ST_TO_ADDR
// break ;
23429: GO 23433
// end ; end ; end ;
23431: GO 23262
23433: POP
23434: POP
// end ; if not weapon then
23435: LD_VAR 0 18
23439: NOT
23440: IFFALSE 23500
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
23442: LD_ADDR_VAR 0 5
23446: PUSH
23447: LD_VAR 0 5
23451: PUSH
23452: LD_INT 11
23454: PUSH
23455: LD_INT 30
23457: PUSH
23458: LD_INT 49
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: LIST
23465: DIFF
23466: ST_TO_ADDR
// if not list then
23467: LD_VAR 0 5
23471: NOT
23472: IFFALSE 23476
// exit ;
23474: GO 23618
// weapon := list [ rand ( 1 , list ) ] ;
23476: LD_ADDR_VAR 0 18
23480: PUSH
23481: LD_VAR 0 5
23485: PUSH
23486: LD_INT 1
23488: PPUSH
23489: LD_VAR 0 5
23493: PPUSH
23494: CALL_OW 12
23498: ARRAY
23499: ST_TO_ADDR
// end ; if weapon then
23500: LD_VAR 0 18
23504: IFFALSE 23618
// begin tmp := CostOfWeapon ( weapon ) ;
23506: LD_ADDR_VAR 0 14
23510: PUSH
23511: LD_VAR 0 18
23515: PPUSH
23516: CALL_OW 451
23520: ST_TO_ADDR
// j := GetBase ( tower ) ;
23521: LD_ADDR_VAR 0 9
23525: PUSH
23526: LD_VAR 0 1
23530: PPUSH
23531: CALL_OW 274
23535: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
23536: LD_VAR 0 9
23540: PPUSH
23541: LD_INT 1
23543: PPUSH
23544: CALL_OW 275
23548: PUSH
23549: LD_VAR 0 14
23553: PUSH
23554: LD_INT 1
23556: ARRAY
23557: GREATEREQUAL
23558: PUSH
23559: LD_VAR 0 9
23563: PPUSH
23564: LD_INT 2
23566: PPUSH
23567: CALL_OW 275
23571: PUSH
23572: LD_VAR 0 14
23576: PUSH
23577: LD_INT 2
23579: ARRAY
23580: GREATEREQUAL
23581: AND
23582: PUSH
23583: LD_VAR 0 9
23587: PPUSH
23588: LD_INT 3
23590: PPUSH
23591: CALL_OW 275
23595: PUSH
23596: LD_VAR 0 14
23600: PUSH
23601: LD_INT 3
23603: ARRAY
23604: GREATEREQUAL
23605: AND
23606: IFFALSE 23618
// result := weapon ;
23608: LD_ADDR_VAR 0 3
23612: PUSH
23613: LD_VAR 0 18
23617: ST_TO_ADDR
// end ; end ;
23618: LD_VAR 0 3
23622: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
23623: LD_INT 0
23625: PPUSH
23626: PPUSH
// result := true ;
23627: LD_ADDR_VAR 0 3
23631: PUSH
23632: LD_INT 1
23634: ST_TO_ADDR
// if array1 = array2 then
23635: LD_VAR 0 1
23639: PUSH
23640: LD_VAR 0 2
23644: EQUAL
23645: IFFALSE 23705
// begin for i = 1 to array1 do
23647: LD_ADDR_VAR 0 4
23651: PUSH
23652: DOUBLE
23653: LD_INT 1
23655: DEC
23656: ST_TO_ADDR
23657: LD_VAR 0 1
23661: PUSH
23662: FOR_TO
23663: IFFALSE 23701
// if array1 [ i ] <> array2 [ i ] then
23665: LD_VAR 0 1
23669: PUSH
23670: LD_VAR 0 4
23674: ARRAY
23675: PUSH
23676: LD_VAR 0 2
23680: PUSH
23681: LD_VAR 0 4
23685: ARRAY
23686: NONEQUAL
23687: IFFALSE 23699
// begin result := false ;
23689: LD_ADDR_VAR 0 3
23693: PUSH
23694: LD_INT 0
23696: ST_TO_ADDR
// break ;
23697: GO 23701
// end ;
23699: GO 23662
23701: POP
23702: POP
// end else
23703: GO 23713
// result := false ;
23705: LD_ADDR_VAR 0 3
23709: PUSH
23710: LD_INT 0
23712: ST_TO_ADDR
// end ;
23713: LD_VAR 0 3
23717: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
23718: LD_INT 0
23720: PPUSH
23721: PPUSH
23722: PPUSH
// pom := GetBase ( fac ) ;
23723: LD_ADDR_VAR 0 5
23727: PUSH
23728: LD_VAR 0 1
23732: PPUSH
23733: CALL_OW 274
23737: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
23738: LD_ADDR_VAR 0 4
23742: PUSH
23743: LD_VAR 0 2
23747: PUSH
23748: LD_INT 1
23750: ARRAY
23751: PPUSH
23752: LD_VAR 0 2
23756: PUSH
23757: LD_INT 2
23759: ARRAY
23760: PPUSH
23761: LD_VAR 0 2
23765: PUSH
23766: LD_INT 3
23768: ARRAY
23769: PPUSH
23770: LD_VAR 0 2
23774: PUSH
23775: LD_INT 4
23777: ARRAY
23778: PPUSH
23779: CALL_OW 449
23783: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23784: LD_ADDR_VAR 0 3
23788: PUSH
23789: LD_VAR 0 5
23793: PPUSH
23794: LD_INT 1
23796: PPUSH
23797: CALL_OW 275
23801: PUSH
23802: LD_VAR 0 4
23806: PUSH
23807: LD_INT 1
23809: ARRAY
23810: GREATEREQUAL
23811: PUSH
23812: LD_VAR 0 5
23816: PPUSH
23817: LD_INT 2
23819: PPUSH
23820: CALL_OW 275
23824: PUSH
23825: LD_VAR 0 4
23829: PUSH
23830: LD_INT 2
23832: ARRAY
23833: GREATEREQUAL
23834: AND
23835: PUSH
23836: LD_VAR 0 5
23840: PPUSH
23841: LD_INT 3
23843: PPUSH
23844: CALL_OW 275
23848: PUSH
23849: LD_VAR 0 4
23853: PUSH
23854: LD_INT 3
23856: ARRAY
23857: GREATEREQUAL
23858: AND
23859: ST_TO_ADDR
// end ;
23860: LD_VAR 0 3
23864: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
23865: LD_INT 0
23867: PPUSH
23868: PPUSH
23869: PPUSH
23870: PPUSH
// pom := GetBase ( building ) ;
23871: LD_ADDR_VAR 0 3
23875: PUSH
23876: LD_VAR 0 1
23880: PPUSH
23881: CALL_OW 274
23885: ST_TO_ADDR
// if not pom then
23886: LD_VAR 0 3
23890: NOT
23891: IFFALSE 23895
// exit ;
23893: GO 24065
// btype := GetBType ( building ) ;
23895: LD_ADDR_VAR 0 5
23899: PUSH
23900: LD_VAR 0 1
23904: PPUSH
23905: CALL_OW 266
23909: ST_TO_ADDR
// if btype = b_armoury then
23910: LD_VAR 0 5
23914: PUSH
23915: LD_INT 4
23917: EQUAL
23918: IFFALSE 23928
// btype := b_barracks ;
23920: LD_ADDR_VAR 0 5
23924: PUSH
23925: LD_INT 5
23927: ST_TO_ADDR
// if btype = b_depot then
23928: LD_VAR 0 5
23932: PUSH
23933: LD_INT 0
23935: EQUAL
23936: IFFALSE 23946
// btype := b_warehouse ;
23938: LD_ADDR_VAR 0 5
23942: PUSH
23943: LD_INT 1
23945: ST_TO_ADDR
// if btype = b_workshop then
23946: LD_VAR 0 5
23950: PUSH
23951: LD_INT 2
23953: EQUAL
23954: IFFALSE 23964
// btype := b_factory ;
23956: LD_ADDR_VAR 0 5
23960: PUSH
23961: LD_INT 3
23963: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23964: LD_ADDR_VAR 0 4
23968: PUSH
23969: LD_VAR 0 5
23973: PPUSH
23974: LD_VAR 0 1
23978: PPUSH
23979: CALL_OW 248
23983: PPUSH
23984: CALL_OW 450
23988: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23989: LD_ADDR_VAR 0 2
23993: PUSH
23994: LD_VAR 0 3
23998: PPUSH
23999: LD_INT 1
24001: PPUSH
24002: CALL_OW 275
24006: PUSH
24007: LD_VAR 0 4
24011: PUSH
24012: LD_INT 1
24014: ARRAY
24015: GREATEREQUAL
24016: PUSH
24017: LD_VAR 0 3
24021: PPUSH
24022: LD_INT 2
24024: PPUSH
24025: CALL_OW 275
24029: PUSH
24030: LD_VAR 0 4
24034: PUSH
24035: LD_INT 2
24037: ARRAY
24038: GREATEREQUAL
24039: AND
24040: PUSH
24041: LD_VAR 0 3
24045: PPUSH
24046: LD_INT 3
24048: PPUSH
24049: CALL_OW 275
24053: PUSH
24054: LD_VAR 0 4
24058: PUSH
24059: LD_INT 3
24061: ARRAY
24062: GREATEREQUAL
24063: AND
24064: ST_TO_ADDR
// end ;
24065: LD_VAR 0 2
24069: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
24070: LD_INT 0
24072: PPUSH
24073: PPUSH
24074: PPUSH
// pom := GetBase ( building ) ;
24075: LD_ADDR_VAR 0 4
24079: PUSH
24080: LD_VAR 0 1
24084: PPUSH
24085: CALL_OW 274
24089: ST_TO_ADDR
// if not pom then
24090: LD_VAR 0 4
24094: NOT
24095: IFFALSE 24099
// exit ;
24097: GO 24200
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24099: LD_ADDR_VAR 0 5
24103: PUSH
24104: LD_VAR 0 2
24108: PPUSH
24109: LD_VAR 0 1
24113: PPUSH
24114: CALL_OW 248
24118: PPUSH
24119: CALL_OW 450
24123: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24124: LD_ADDR_VAR 0 3
24128: PUSH
24129: LD_VAR 0 4
24133: PPUSH
24134: LD_INT 1
24136: PPUSH
24137: CALL_OW 275
24141: PUSH
24142: LD_VAR 0 5
24146: PUSH
24147: LD_INT 1
24149: ARRAY
24150: GREATEREQUAL
24151: PUSH
24152: LD_VAR 0 4
24156: PPUSH
24157: LD_INT 2
24159: PPUSH
24160: CALL_OW 275
24164: PUSH
24165: LD_VAR 0 5
24169: PUSH
24170: LD_INT 2
24172: ARRAY
24173: GREATEREQUAL
24174: AND
24175: PUSH
24176: LD_VAR 0 4
24180: PPUSH
24181: LD_INT 3
24183: PPUSH
24184: CALL_OW 275
24188: PUSH
24189: LD_VAR 0 5
24193: PUSH
24194: LD_INT 3
24196: ARRAY
24197: GREATEREQUAL
24198: AND
24199: ST_TO_ADDR
// end ;
24200: LD_VAR 0 3
24204: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
24205: LD_INT 0
24207: PPUSH
24208: PPUSH
24209: PPUSH
24210: PPUSH
24211: PPUSH
24212: PPUSH
24213: PPUSH
24214: PPUSH
24215: PPUSH
24216: PPUSH
// result := false ;
24217: LD_ADDR_VAR 0 6
24221: PUSH
24222: LD_INT 0
24224: ST_TO_ADDR
// if not base or not btype or not x or not y then
24225: LD_VAR 0 1
24229: NOT
24230: PUSH
24231: LD_VAR 0 2
24235: NOT
24236: OR
24237: PUSH
24238: LD_VAR 0 3
24242: NOT
24243: OR
24244: PUSH
24245: LD_VAR 0 4
24249: NOT
24250: OR
24251: IFFALSE 24255
// exit ;
24253: GO 24864
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
24255: LD_ADDR_VAR 0 12
24259: PUSH
24260: LD_VAR 0 2
24264: PPUSH
24265: LD_VAR 0 3
24269: PPUSH
24270: LD_VAR 0 4
24274: PPUSH
24275: LD_VAR 0 5
24279: PPUSH
24280: LD_VAR 0 1
24284: PUSH
24285: LD_INT 1
24287: ARRAY
24288: PPUSH
24289: CALL_OW 248
24293: PPUSH
24294: LD_INT 0
24296: PPUSH
24297: CALL 25701 0 6
24301: ST_TO_ADDR
// if not hexes then
24302: LD_VAR 0 12
24306: NOT
24307: IFFALSE 24311
// exit ;
24309: GO 24864
// for i = 1 to hexes do
24311: LD_ADDR_VAR 0 7
24315: PUSH
24316: DOUBLE
24317: LD_INT 1
24319: DEC
24320: ST_TO_ADDR
24321: LD_VAR 0 12
24325: PUSH
24326: FOR_TO
24327: IFFALSE 24862
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24329: LD_ADDR_VAR 0 11
24333: PUSH
24334: LD_VAR 0 12
24338: PUSH
24339: LD_VAR 0 7
24343: ARRAY
24344: PUSH
24345: LD_INT 1
24347: ARRAY
24348: PPUSH
24349: LD_VAR 0 12
24353: PUSH
24354: LD_VAR 0 7
24358: ARRAY
24359: PUSH
24360: LD_INT 2
24362: ARRAY
24363: PPUSH
24364: CALL_OW 428
24368: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
24369: LD_VAR 0 12
24373: PUSH
24374: LD_VAR 0 7
24378: ARRAY
24379: PUSH
24380: LD_INT 1
24382: ARRAY
24383: PPUSH
24384: LD_VAR 0 12
24388: PUSH
24389: LD_VAR 0 7
24393: ARRAY
24394: PUSH
24395: LD_INT 2
24397: ARRAY
24398: PPUSH
24399: CALL_OW 351
24403: PUSH
24404: LD_VAR 0 12
24408: PUSH
24409: LD_VAR 0 7
24413: ARRAY
24414: PUSH
24415: LD_INT 1
24417: ARRAY
24418: PPUSH
24419: LD_VAR 0 12
24423: PUSH
24424: LD_VAR 0 7
24428: ARRAY
24429: PUSH
24430: LD_INT 2
24432: ARRAY
24433: PPUSH
24434: CALL_OW 488
24438: NOT
24439: OR
24440: PUSH
24441: LD_VAR 0 11
24445: PPUSH
24446: CALL_OW 247
24450: PUSH
24451: LD_INT 3
24453: EQUAL
24454: OR
24455: IFFALSE 24461
// exit ;
24457: POP
24458: POP
24459: GO 24864
// if not tmp or not tmp in base then
24461: LD_VAR 0 11
24465: NOT
24466: PUSH
24467: LD_VAR 0 11
24471: PUSH
24472: LD_VAR 0 1
24476: IN
24477: NOT
24478: OR
24479: IFFALSE 24483
// continue ;
24481: GO 24326
// result := true ;
24483: LD_ADDR_VAR 0 6
24487: PUSH
24488: LD_INT 1
24490: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24491: LD_ADDR_VAR 0 15
24495: PUSH
24496: LD_VAR 0 1
24500: PPUSH
24501: LD_INT 22
24503: PUSH
24504: LD_VAR 0 11
24508: PPUSH
24509: CALL_OW 255
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: LD_INT 2
24520: PUSH
24521: LD_INT 30
24523: PUSH
24524: LD_INT 0
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 30
24533: PUSH
24534: LD_INT 1
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: EMPTY
24542: LIST
24543: LIST
24544: LIST
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PPUSH
24550: CALL_OW 72
24554: ST_TO_ADDR
// if dep then
24555: LD_VAR 0 15
24559: IFFALSE 24695
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
24561: LD_ADDR_VAR 0 14
24565: PUSH
24566: LD_VAR 0 15
24570: PUSH
24571: LD_INT 1
24573: ARRAY
24574: PPUSH
24575: CALL_OW 250
24579: PPUSH
24580: LD_VAR 0 15
24584: PUSH
24585: LD_INT 1
24587: ARRAY
24588: PPUSH
24589: CALL_OW 254
24593: PPUSH
24594: LD_INT 5
24596: PPUSH
24597: CALL_OW 272
24601: PUSH
24602: LD_VAR 0 15
24606: PUSH
24607: LD_INT 1
24609: ARRAY
24610: PPUSH
24611: CALL_OW 251
24615: PPUSH
24616: LD_VAR 0 15
24620: PUSH
24621: LD_INT 1
24623: ARRAY
24624: PPUSH
24625: CALL_OW 254
24629: PPUSH
24630: LD_INT 5
24632: PPUSH
24633: CALL_OW 273
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
24642: LD_VAR 0 14
24646: PUSH
24647: LD_INT 1
24649: ARRAY
24650: PPUSH
24651: LD_VAR 0 14
24655: PUSH
24656: LD_INT 2
24658: ARRAY
24659: PPUSH
24660: CALL_OW 488
24664: IFFALSE 24695
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
24666: LD_VAR 0 11
24670: PPUSH
24671: LD_VAR 0 14
24675: PUSH
24676: LD_INT 1
24678: ARRAY
24679: PPUSH
24680: LD_VAR 0 14
24684: PUSH
24685: LD_INT 2
24687: ARRAY
24688: PPUSH
24689: CALL_OW 111
// continue ;
24693: GO 24326
// end ; end ; r := GetDir ( tmp ) ;
24695: LD_ADDR_VAR 0 13
24699: PUSH
24700: LD_VAR 0 11
24704: PPUSH
24705: CALL_OW 254
24709: ST_TO_ADDR
// if r = 5 then
24710: LD_VAR 0 13
24714: PUSH
24715: LD_INT 5
24717: EQUAL
24718: IFFALSE 24728
// r := 0 ;
24720: LD_ADDR_VAR 0 13
24724: PUSH
24725: LD_INT 0
24727: ST_TO_ADDR
// for j = r to 5 do
24728: LD_ADDR_VAR 0 8
24732: PUSH
24733: DOUBLE
24734: LD_VAR 0 13
24738: DEC
24739: ST_TO_ADDR
24740: LD_INT 5
24742: PUSH
24743: FOR_TO
24744: IFFALSE 24858
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
24746: LD_ADDR_VAR 0 9
24750: PUSH
24751: LD_VAR 0 11
24755: PPUSH
24756: CALL_OW 250
24760: PPUSH
24761: LD_VAR 0 8
24765: PPUSH
24766: LD_INT 2
24768: PPUSH
24769: CALL_OW 272
24773: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
24774: LD_ADDR_VAR 0 10
24778: PUSH
24779: LD_VAR 0 11
24783: PPUSH
24784: CALL_OW 251
24788: PPUSH
24789: LD_VAR 0 8
24793: PPUSH
24794: LD_INT 2
24796: PPUSH
24797: CALL_OW 273
24801: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
24802: LD_VAR 0 9
24806: PPUSH
24807: LD_VAR 0 10
24811: PPUSH
24812: CALL_OW 488
24816: PUSH
24817: LD_VAR 0 9
24821: PPUSH
24822: LD_VAR 0 10
24826: PPUSH
24827: CALL_OW 428
24831: NOT
24832: AND
24833: IFFALSE 24856
// begin ComMoveXY ( tmp , _x , _y ) ;
24835: LD_VAR 0 11
24839: PPUSH
24840: LD_VAR 0 9
24844: PPUSH
24845: LD_VAR 0 10
24849: PPUSH
24850: CALL_OW 111
// break ;
24854: GO 24858
// end ; end ;
24856: GO 24743
24858: POP
24859: POP
// end ;
24860: GO 24326
24862: POP
24863: POP
// end ;
24864: LD_VAR 0 6
24868: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
24869: LD_INT 0
24871: PPUSH
24872: PPUSH
24873: PPUSH
24874: PPUSH
24875: PPUSH
24876: PPUSH
24877: PPUSH
24878: PPUSH
24879: PPUSH
24880: PPUSH
// result := false ;
24881: LD_ADDR_VAR 0 6
24885: PUSH
24886: LD_INT 0
24888: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
24889: LD_VAR 0 1
24893: NOT
24894: PUSH
24895: LD_VAR 0 1
24899: PPUSH
24900: CALL_OW 266
24904: PUSH
24905: LD_INT 0
24907: PUSH
24908: LD_INT 1
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: IN
24915: NOT
24916: OR
24917: PUSH
24918: LD_VAR 0 2
24922: NOT
24923: OR
24924: PUSH
24925: LD_VAR 0 5
24929: PUSH
24930: LD_INT 0
24932: PUSH
24933: LD_INT 1
24935: PUSH
24936: LD_INT 2
24938: PUSH
24939: LD_INT 3
24941: PUSH
24942: LD_INT 4
24944: PUSH
24945: LD_INT 5
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: IN
24956: NOT
24957: OR
24958: PUSH
24959: LD_VAR 0 3
24963: PPUSH
24964: LD_VAR 0 4
24968: PPUSH
24969: CALL_OW 488
24973: NOT
24974: OR
24975: IFFALSE 24979
// exit ;
24977: GO 25696
// pom := GetBase ( depot ) ;
24979: LD_ADDR_VAR 0 10
24983: PUSH
24984: LD_VAR 0 1
24988: PPUSH
24989: CALL_OW 274
24993: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
24994: LD_ADDR_VAR 0 11
24998: PUSH
24999: LD_VAR 0 2
25003: PPUSH
25004: LD_VAR 0 1
25008: PPUSH
25009: CALL_OW 248
25013: PPUSH
25014: CALL_OW 450
25018: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
25019: LD_VAR 0 10
25023: PPUSH
25024: LD_INT 1
25026: PPUSH
25027: CALL_OW 275
25031: PUSH
25032: LD_VAR 0 11
25036: PUSH
25037: LD_INT 1
25039: ARRAY
25040: GREATEREQUAL
25041: PUSH
25042: LD_VAR 0 10
25046: PPUSH
25047: LD_INT 2
25049: PPUSH
25050: CALL_OW 275
25054: PUSH
25055: LD_VAR 0 11
25059: PUSH
25060: LD_INT 2
25062: ARRAY
25063: GREATEREQUAL
25064: AND
25065: PUSH
25066: LD_VAR 0 10
25070: PPUSH
25071: LD_INT 3
25073: PPUSH
25074: CALL_OW 275
25078: PUSH
25079: LD_VAR 0 11
25083: PUSH
25084: LD_INT 3
25086: ARRAY
25087: GREATEREQUAL
25088: AND
25089: NOT
25090: IFFALSE 25094
// exit ;
25092: GO 25696
// if GetBType ( depot ) = b_depot then
25094: LD_VAR 0 1
25098: PPUSH
25099: CALL_OW 266
25103: PUSH
25104: LD_INT 0
25106: EQUAL
25107: IFFALSE 25119
// dist := 28 else
25109: LD_ADDR_VAR 0 14
25113: PUSH
25114: LD_INT 28
25116: ST_TO_ADDR
25117: GO 25127
// dist := 36 ;
25119: LD_ADDR_VAR 0 14
25123: PUSH
25124: LD_INT 36
25126: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
25127: LD_VAR 0 1
25131: PPUSH
25132: LD_VAR 0 3
25136: PPUSH
25137: LD_VAR 0 4
25141: PPUSH
25142: CALL_OW 297
25146: PUSH
25147: LD_VAR 0 14
25151: GREATER
25152: IFFALSE 25156
// exit ;
25154: GO 25696
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
25156: LD_ADDR_VAR 0 12
25160: PUSH
25161: LD_VAR 0 2
25165: PPUSH
25166: LD_VAR 0 3
25170: PPUSH
25171: LD_VAR 0 4
25175: PPUSH
25176: LD_VAR 0 5
25180: PPUSH
25181: LD_VAR 0 1
25185: PPUSH
25186: CALL_OW 248
25190: PPUSH
25191: LD_INT 0
25193: PPUSH
25194: CALL 25701 0 6
25198: ST_TO_ADDR
// if not hexes then
25199: LD_VAR 0 12
25203: NOT
25204: IFFALSE 25208
// exit ;
25206: GO 25696
// hex := GetHexInfo ( x , y ) ;
25208: LD_ADDR_VAR 0 15
25212: PUSH
25213: LD_VAR 0 3
25217: PPUSH
25218: LD_VAR 0 4
25222: PPUSH
25223: CALL_OW 546
25227: ST_TO_ADDR
// if hex [ 1 ] then
25228: LD_VAR 0 15
25232: PUSH
25233: LD_INT 1
25235: ARRAY
25236: IFFALSE 25240
// exit ;
25238: GO 25696
// height := hex [ 2 ] ;
25240: LD_ADDR_VAR 0 13
25244: PUSH
25245: LD_VAR 0 15
25249: PUSH
25250: LD_INT 2
25252: ARRAY
25253: ST_TO_ADDR
// for i = 1 to hexes do
25254: LD_ADDR_VAR 0 7
25258: PUSH
25259: DOUBLE
25260: LD_INT 1
25262: DEC
25263: ST_TO_ADDR
25264: LD_VAR 0 12
25268: PUSH
25269: FOR_TO
25270: IFFALSE 25600
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
25272: LD_VAR 0 12
25276: PUSH
25277: LD_VAR 0 7
25281: ARRAY
25282: PUSH
25283: LD_INT 1
25285: ARRAY
25286: PPUSH
25287: LD_VAR 0 12
25291: PUSH
25292: LD_VAR 0 7
25296: ARRAY
25297: PUSH
25298: LD_INT 2
25300: ARRAY
25301: PPUSH
25302: CALL_OW 488
25306: NOT
25307: PUSH
25308: LD_VAR 0 12
25312: PUSH
25313: LD_VAR 0 7
25317: ARRAY
25318: PUSH
25319: LD_INT 1
25321: ARRAY
25322: PPUSH
25323: LD_VAR 0 12
25327: PUSH
25328: LD_VAR 0 7
25332: ARRAY
25333: PUSH
25334: LD_INT 2
25336: ARRAY
25337: PPUSH
25338: CALL_OW 428
25342: PUSH
25343: LD_INT 0
25345: GREATER
25346: OR
25347: PUSH
25348: LD_VAR 0 12
25352: PUSH
25353: LD_VAR 0 7
25357: ARRAY
25358: PUSH
25359: LD_INT 1
25361: ARRAY
25362: PPUSH
25363: LD_VAR 0 12
25367: PUSH
25368: LD_VAR 0 7
25372: ARRAY
25373: PUSH
25374: LD_INT 2
25376: ARRAY
25377: PPUSH
25378: CALL_OW 351
25382: OR
25383: IFFALSE 25389
// exit ;
25385: POP
25386: POP
25387: GO 25696
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25389: LD_ADDR_VAR 0 8
25393: PUSH
25394: LD_VAR 0 12
25398: PUSH
25399: LD_VAR 0 7
25403: ARRAY
25404: PUSH
25405: LD_INT 1
25407: ARRAY
25408: PPUSH
25409: LD_VAR 0 12
25413: PUSH
25414: LD_VAR 0 7
25418: ARRAY
25419: PUSH
25420: LD_INT 2
25422: ARRAY
25423: PPUSH
25424: CALL_OW 546
25428: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
25429: LD_VAR 0 8
25433: PUSH
25434: LD_INT 1
25436: ARRAY
25437: PUSH
25438: LD_VAR 0 8
25442: PUSH
25443: LD_INT 2
25445: ARRAY
25446: PUSH
25447: LD_VAR 0 13
25451: PUSH
25452: LD_INT 2
25454: PLUS
25455: GREATER
25456: OR
25457: PUSH
25458: LD_VAR 0 8
25462: PUSH
25463: LD_INT 2
25465: ARRAY
25466: PUSH
25467: LD_VAR 0 13
25471: PUSH
25472: LD_INT 2
25474: MINUS
25475: LESS
25476: OR
25477: PUSH
25478: LD_VAR 0 8
25482: PUSH
25483: LD_INT 3
25485: ARRAY
25486: PUSH
25487: LD_INT 0
25489: PUSH
25490: LD_INT 8
25492: PUSH
25493: LD_INT 9
25495: PUSH
25496: LD_INT 10
25498: PUSH
25499: LD_INT 11
25501: PUSH
25502: LD_INT 12
25504: PUSH
25505: LD_INT 13
25507: PUSH
25508: LD_INT 16
25510: PUSH
25511: LD_INT 17
25513: PUSH
25514: LD_INT 18
25516: PUSH
25517: LD_INT 19
25519: PUSH
25520: LD_INT 20
25522: PUSH
25523: LD_INT 21
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: IN
25541: NOT
25542: OR
25543: PUSH
25544: LD_VAR 0 8
25548: PUSH
25549: LD_INT 5
25551: ARRAY
25552: NOT
25553: OR
25554: PUSH
25555: LD_VAR 0 8
25559: PUSH
25560: LD_INT 6
25562: ARRAY
25563: PUSH
25564: LD_INT 1
25566: PUSH
25567: LD_INT 2
25569: PUSH
25570: LD_INT 7
25572: PUSH
25573: LD_INT 9
25575: PUSH
25576: LD_INT 10
25578: PUSH
25579: LD_INT 11
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: IN
25590: NOT
25591: OR
25592: IFFALSE 25598
// exit ;
25594: POP
25595: POP
25596: GO 25696
// end ;
25598: GO 25269
25600: POP
25601: POP
// side := GetSide ( depot ) ;
25602: LD_ADDR_VAR 0 9
25606: PUSH
25607: LD_VAR 0 1
25611: PPUSH
25612: CALL_OW 255
25616: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
25617: LD_VAR 0 9
25621: PPUSH
25622: LD_VAR 0 3
25626: PPUSH
25627: LD_VAR 0 4
25631: PPUSH
25632: LD_INT 20
25634: PPUSH
25635: CALL 18350 0 4
25639: PUSH
25640: LD_INT 4
25642: ARRAY
25643: IFFALSE 25647
// exit ;
25645: GO 25696
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
25647: LD_VAR 0 2
25651: PUSH
25652: LD_INT 29
25654: PUSH
25655: LD_INT 30
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: IN
25662: PUSH
25663: LD_VAR 0 3
25667: PPUSH
25668: LD_VAR 0 4
25672: PPUSH
25673: LD_VAR 0 9
25677: PPUSH
25678: CALL_OW 440
25682: NOT
25683: AND
25684: IFFALSE 25688
// exit ;
25686: GO 25696
// result := true ;
25688: LD_ADDR_VAR 0 6
25692: PUSH
25693: LD_INT 1
25695: ST_TO_ADDR
// end ;
25696: LD_VAR 0 6
25700: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
25701: LD_INT 0
25703: PPUSH
25704: PPUSH
25705: PPUSH
25706: PPUSH
25707: PPUSH
25708: PPUSH
25709: PPUSH
25710: PPUSH
25711: PPUSH
25712: PPUSH
25713: PPUSH
25714: PPUSH
25715: PPUSH
25716: PPUSH
25717: PPUSH
25718: PPUSH
25719: PPUSH
25720: PPUSH
25721: PPUSH
25722: PPUSH
25723: PPUSH
25724: PPUSH
25725: PPUSH
25726: PPUSH
25727: PPUSH
25728: PPUSH
25729: PPUSH
25730: PPUSH
25731: PPUSH
25732: PPUSH
25733: PPUSH
25734: PPUSH
25735: PPUSH
25736: PPUSH
25737: PPUSH
25738: PPUSH
25739: PPUSH
25740: PPUSH
25741: PPUSH
25742: PPUSH
25743: PPUSH
25744: PPUSH
25745: PPUSH
25746: PPUSH
25747: PPUSH
25748: PPUSH
25749: PPUSH
25750: PPUSH
25751: PPUSH
25752: PPUSH
25753: PPUSH
25754: PPUSH
25755: PPUSH
25756: PPUSH
25757: PPUSH
25758: PPUSH
25759: PPUSH
25760: PPUSH
// result = [ ] ;
25761: LD_ADDR_VAR 0 7
25765: PUSH
25766: EMPTY
25767: ST_TO_ADDR
// temp_list = [ ] ;
25768: LD_ADDR_VAR 0 9
25772: PUSH
25773: EMPTY
25774: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
25775: LD_VAR 0 4
25779: PUSH
25780: LD_INT 0
25782: PUSH
25783: LD_INT 1
25785: PUSH
25786: LD_INT 2
25788: PUSH
25789: LD_INT 3
25791: PUSH
25792: LD_INT 4
25794: PUSH
25795: LD_INT 5
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: IN
25806: NOT
25807: PUSH
25808: LD_VAR 0 1
25812: PUSH
25813: LD_INT 0
25815: PUSH
25816: LD_INT 1
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: IN
25823: PUSH
25824: LD_VAR 0 5
25828: PUSH
25829: LD_INT 1
25831: PUSH
25832: LD_INT 2
25834: PUSH
25835: LD_INT 3
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: LIST
25842: IN
25843: NOT
25844: AND
25845: OR
25846: IFFALSE 25850
// exit ;
25848: GO 44241
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
25850: LD_VAR 0 1
25854: PUSH
25855: LD_INT 6
25857: PUSH
25858: LD_INT 7
25860: PUSH
25861: LD_INT 8
25863: PUSH
25864: LD_INT 13
25866: PUSH
25867: LD_INT 12
25869: PUSH
25870: LD_INT 15
25872: PUSH
25873: LD_INT 11
25875: PUSH
25876: LD_INT 14
25878: PUSH
25879: LD_INT 10
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: IN
25893: IFFALSE 25903
// btype = b_lab ;
25895: LD_ADDR_VAR 0 1
25899: PUSH
25900: LD_INT 6
25902: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
25903: LD_VAR 0 6
25907: PUSH
25908: LD_INT 0
25910: PUSH
25911: LD_INT 1
25913: PUSH
25914: LD_INT 2
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: LIST
25921: IN
25922: NOT
25923: PUSH
25924: LD_VAR 0 1
25928: PUSH
25929: LD_INT 0
25931: PUSH
25932: LD_INT 1
25934: PUSH
25935: LD_INT 2
25937: PUSH
25938: LD_INT 3
25940: PUSH
25941: LD_INT 6
25943: PUSH
25944: LD_INT 36
25946: PUSH
25947: LD_INT 4
25949: PUSH
25950: LD_INT 5
25952: PUSH
25953: LD_INT 31
25955: PUSH
25956: LD_INT 32
25958: PUSH
25959: LD_INT 33
25961: PUSH
25962: EMPTY
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: IN
25975: NOT
25976: PUSH
25977: LD_VAR 0 6
25981: PUSH
25982: LD_INT 1
25984: EQUAL
25985: AND
25986: OR
25987: PUSH
25988: LD_VAR 0 1
25992: PUSH
25993: LD_INT 2
25995: PUSH
25996: LD_INT 3
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: IN
26003: NOT
26004: PUSH
26005: LD_VAR 0 6
26009: PUSH
26010: LD_INT 2
26012: EQUAL
26013: AND
26014: OR
26015: IFFALSE 26025
// mode = 0 ;
26017: LD_ADDR_VAR 0 6
26021: PUSH
26022: LD_INT 0
26024: ST_TO_ADDR
// case mode of 0 :
26025: LD_VAR 0 6
26029: PUSH
26030: LD_INT 0
26032: DOUBLE
26033: EQUAL
26034: IFTRUE 26038
26036: GO 37491
26038: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26039: LD_ADDR_VAR 0 11
26043: PUSH
26044: LD_INT 0
26046: PUSH
26047: LD_INT 0
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 0
26056: PUSH
26057: LD_INT 1
26059: NEG
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: LD_INT 1
26067: PUSH
26068: LD_INT 0
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: LD_INT 1
26077: PUSH
26078: LD_INT 1
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: LD_INT 0
26087: PUSH
26088: LD_INT 1
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 1
26097: NEG
26098: PUSH
26099: LD_INT 0
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 1
26108: NEG
26109: PUSH
26110: LD_INT 1
26112: NEG
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 1
26120: NEG
26121: PUSH
26122: LD_INT 2
26124: NEG
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 0
26132: PUSH
26133: LD_INT 2
26135: NEG
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 1
26143: PUSH
26144: LD_INT 1
26146: NEG
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 1
26154: PUSH
26155: LD_INT 2
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PUSH
26162: LD_INT 0
26164: PUSH
26165: LD_INT 2
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 1
26174: NEG
26175: PUSH
26176: LD_INT 1
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: LD_INT 1
26185: PUSH
26186: LD_INT 3
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 0
26195: PUSH
26196: LD_INT 3
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 1
26205: NEG
26206: PUSH
26207: LD_INT 2
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26232: LD_ADDR_VAR 0 12
26236: PUSH
26237: LD_INT 0
26239: PUSH
26240: LD_INT 0
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 0
26249: PUSH
26250: LD_INT 1
26252: NEG
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 1
26260: PUSH
26261: LD_INT 0
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 1
26270: PUSH
26271: LD_INT 1
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 0
26280: PUSH
26281: LD_INT 1
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 1
26290: NEG
26291: PUSH
26292: LD_INT 0
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 1
26301: NEG
26302: PUSH
26303: LD_INT 1
26305: NEG
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 1
26313: PUSH
26314: LD_INT 1
26316: NEG
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 2
26324: PUSH
26325: LD_INT 0
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 2
26334: PUSH
26335: LD_INT 1
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 1
26344: NEG
26345: PUSH
26346: LD_INT 1
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 2
26355: NEG
26356: PUSH
26357: LD_INT 0
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 2
26366: NEG
26367: PUSH
26368: LD_INT 1
26370: NEG
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 2
26378: NEG
26379: PUSH
26380: LD_INT 1
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 3
26389: NEG
26390: PUSH
26391: LD_INT 0
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: LD_INT 3
26400: NEG
26401: PUSH
26402: LD_INT 1
26404: NEG
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26428: LD_ADDR_VAR 0 13
26432: PUSH
26433: LD_INT 0
26435: PUSH
26436: LD_INT 0
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 0
26445: PUSH
26446: LD_INT 1
26448: NEG
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 1
26456: PUSH
26457: LD_INT 0
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 1
26466: PUSH
26467: LD_INT 1
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 0
26476: PUSH
26477: LD_INT 1
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: LD_INT 1
26486: NEG
26487: PUSH
26488: LD_INT 0
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 1
26497: NEG
26498: PUSH
26499: LD_INT 1
26501: NEG
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 1
26509: NEG
26510: PUSH
26511: LD_INT 2
26513: NEG
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 2
26521: PUSH
26522: LD_INT 1
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 2
26531: PUSH
26532: LD_INT 2
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 1
26541: PUSH
26542: LD_INT 2
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 2
26551: NEG
26552: PUSH
26553: LD_INT 1
26555: NEG
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 2
26563: NEG
26564: PUSH
26565: LD_INT 2
26567: NEG
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 2
26575: NEG
26576: PUSH
26577: LD_INT 3
26579: NEG
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 3
26587: NEG
26588: PUSH
26589: LD_INT 2
26591: NEG
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: LD_INT 3
26599: NEG
26600: PUSH
26601: LD_INT 3
26603: NEG
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26627: LD_ADDR_VAR 0 14
26631: PUSH
26632: LD_INT 0
26634: PUSH
26635: LD_INT 0
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 0
26644: PUSH
26645: LD_INT 1
26647: NEG
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PUSH
26653: LD_INT 1
26655: PUSH
26656: LD_INT 0
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 1
26665: PUSH
26666: LD_INT 1
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 0
26675: PUSH
26676: LD_INT 1
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 1
26685: NEG
26686: PUSH
26687: LD_INT 0
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 1
26696: NEG
26697: PUSH
26698: LD_INT 1
26700: NEG
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 1
26708: NEG
26709: PUSH
26710: LD_INT 2
26712: NEG
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 0
26720: PUSH
26721: LD_INT 2
26723: NEG
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 1
26731: PUSH
26732: LD_INT 1
26734: NEG
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 1
26742: PUSH
26743: LD_INT 2
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 0
26752: PUSH
26753: LD_INT 2
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 1
26762: NEG
26763: PUSH
26764: LD_INT 1
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 1
26773: NEG
26774: PUSH
26775: LD_INT 3
26777: NEG
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 0
26785: PUSH
26786: LD_INT 3
26788: NEG
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 1
26796: PUSH
26797: LD_INT 2
26799: NEG
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26823: LD_ADDR_VAR 0 15
26827: PUSH
26828: LD_INT 0
26830: PUSH
26831: LD_INT 0
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 0
26840: PUSH
26841: LD_INT 1
26843: NEG
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 1
26851: PUSH
26852: LD_INT 0
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 1
26861: PUSH
26862: LD_INT 1
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 0
26871: PUSH
26872: LD_INT 1
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 1
26881: NEG
26882: PUSH
26883: LD_INT 0
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PUSH
26890: LD_INT 1
26892: NEG
26893: PUSH
26894: LD_INT 1
26896: NEG
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: LD_INT 1
26904: PUSH
26905: LD_INT 1
26907: NEG
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 2
26915: PUSH
26916: LD_INT 0
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 2
26925: PUSH
26926: LD_INT 1
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 1
26935: NEG
26936: PUSH
26937: LD_INT 1
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PUSH
26944: LD_INT 2
26946: NEG
26947: PUSH
26948: LD_INT 0
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 2
26957: NEG
26958: PUSH
26959: LD_INT 1
26961: NEG
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 2
26969: PUSH
26970: LD_INT 1
26972: NEG
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 3
26980: PUSH
26981: LD_INT 0
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 3
26990: PUSH
26991: LD_INT 1
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27016: LD_ADDR_VAR 0 16
27020: PUSH
27021: LD_INT 0
27023: PUSH
27024: LD_INT 0
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 0
27033: PUSH
27034: LD_INT 1
27036: NEG
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 1
27044: PUSH
27045: LD_INT 0
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 1
27054: PUSH
27055: LD_INT 1
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 0
27064: PUSH
27065: LD_INT 1
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: LD_INT 1
27074: NEG
27075: PUSH
27076: LD_INT 0
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 1
27085: NEG
27086: PUSH
27087: LD_INT 1
27089: NEG
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 1
27097: NEG
27098: PUSH
27099: LD_INT 2
27101: NEG
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 2
27109: PUSH
27110: LD_INT 1
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 2
27119: PUSH
27120: LD_INT 2
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 1
27129: PUSH
27130: LD_INT 2
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 2
27139: NEG
27140: PUSH
27141: LD_INT 1
27143: NEG
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 2
27151: NEG
27152: PUSH
27153: LD_INT 2
27155: NEG
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 3
27163: PUSH
27164: LD_INT 2
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 3
27173: PUSH
27174: LD_INT 3
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 2
27183: PUSH
27184: LD_INT 3
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27209: LD_ADDR_VAR 0 17
27213: PUSH
27214: LD_INT 0
27216: PUSH
27217: LD_INT 0
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 0
27226: PUSH
27227: LD_INT 1
27229: NEG
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 1
27237: PUSH
27238: LD_INT 0
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 1
27247: PUSH
27248: LD_INT 1
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 0
27257: PUSH
27258: LD_INT 1
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 1
27267: NEG
27268: PUSH
27269: LD_INT 0
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 1
27278: NEG
27279: PUSH
27280: LD_INT 1
27282: NEG
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 1
27290: NEG
27291: PUSH
27292: LD_INT 2
27294: NEG
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 0
27302: PUSH
27303: LD_INT 2
27305: NEG
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 1
27313: PUSH
27314: LD_INT 1
27316: NEG
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 2
27324: PUSH
27325: LD_INT 0
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 2
27334: PUSH
27335: LD_INT 1
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 2
27344: PUSH
27345: LD_INT 2
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 1
27354: PUSH
27355: LD_INT 2
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 0
27364: PUSH
27365: LD_INT 2
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: PUSH
27372: LD_INT 1
27374: NEG
27375: PUSH
27376: LD_INT 1
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: LD_INT 2
27385: NEG
27386: PUSH
27387: LD_INT 0
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PUSH
27394: LD_INT 2
27396: NEG
27397: PUSH
27398: LD_INT 1
27400: NEG
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 2
27408: NEG
27409: PUSH
27410: LD_INT 2
27412: NEG
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27439: LD_ADDR_VAR 0 18
27443: PUSH
27444: LD_INT 0
27446: PUSH
27447: LD_INT 0
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 0
27456: PUSH
27457: LD_INT 1
27459: NEG
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 1
27467: PUSH
27468: LD_INT 0
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 1
27477: PUSH
27478: LD_INT 1
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 0
27487: PUSH
27488: LD_INT 1
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 1
27497: NEG
27498: PUSH
27499: LD_INT 0
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 1
27508: NEG
27509: PUSH
27510: LD_INT 1
27512: NEG
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 1
27520: NEG
27521: PUSH
27522: LD_INT 2
27524: NEG
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: LD_INT 0
27532: PUSH
27533: LD_INT 2
27535: NEG
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 1
27543: PUSH
27544: LD_INT 1
27546: NEG
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 2
27554: PUSH
27555: LD_INT 0
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 2
27564: PUSH
27565: LD_INT 1
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 2
27574: PUSH
27575: LD_INT 2
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 1
27584: PUSH
27585: LD_INT 2
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 0
27594: PUSH
27595: LD_INT 2
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 1
27604: NEG
27605: PUSH
27606: LD_INT 1
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 2
27615: NEG
27616: PUSH
27617: LD_INT 0
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PUSH
27624: LD_INT 2
27626: NEG
27627: PUSH
27628: LD_INT 1
27630: NEG
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 2
27638: NEG
27639: PUSH
27640: LD_INT 2
27642: NEG
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27669: LD_ADDR_VAR 0 19
27673: PUSH
27674: LD_INT 0
27676: PUSH
27677: LD_INT 0
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 0
27686: PUSH
27687: LD_INT 1
27689: NEG
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 1
27697: PUSH
27698: LD_INT 0
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 1
27707: PUSH
27708: LD_INT 1
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 0
27717: PUSH
27718: LD_INT 1
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 1
27727: NEG
27728: PUSH
27729: LD_INT 0
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 1
27738: NEG
27739: PUSH
27740: LD_INT 1
27742: NEG
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 1
27750: NEG
27751: PUSH
27752: LD_INT 2
27754: NEG
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PUSH
27760: LD_INT 0
27762: PUSH
27763: LD_INT 2
27765: NEG
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 1
27773: PUSH
27774: LD_INT 1
27776: NEG
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PUSH
27782: LD_INT 2
27784: PUSH
27785: LD_INT 0
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PUSH
27792: LD_INT 2
27794: PUSH
27795: LD_INT 1
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: LD_INT 2
27804: PUSH
27805: LD_INT 2
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PUSH
27812: LD_INT 1
27814: PUSH
27815: LD_INT 2
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PUSH
27822: LD_INT 0
27824: PUSH
27825: LD_INT 2
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 1
27834: NEG
27835: PUSH
27836: LD_INT 1
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 2
27845: NEG
27846: PUSH
27847: LD_INT 0
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 2
27856: NEG
27857: PUSH
27858: LD_INT 1
27860: NEG
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 2
27868: NEG
27869: PUSH
27870: LD_INT 2
27872: NEG
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27899: LD_ADDR_VAR 0 20
27903: PUSH
27904: LD_INT 0
27906: PUSH
27907: LD_INT 0
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: LD_INT 0
27916: PUSH
27917: LD_INT 1
27919: NEG
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 1
27927: PUSH
27928: LD_INT 0
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: LD_INT 1
27937: PUSH
27938: LD_INT 1
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: LD_INT 0
27947: PUSH
27948: LD_INT 1
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 1
27957: NEG
27958: PUSH
27959: LD_INT 0
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: LD_INT 1
27968: NEG
27969: PUSH
27970: LD_INT 1
27972: NEG
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 1
27980: NEG
27981: PUSH
27982: LD_INT 2
27984: NEG
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 0
27992: PUSH
27993: LD_INT 2
27995: NEG
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 1
28003: PUSH
28004: LD_INT 1
28006: NEG
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: PUSH
28012: LD_INT 2
28014: PUSH
28015: LD_INT 0
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 2
28024: PUSH
28025: LD_INT 1
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 2
28034: PUSH
28035: LD_INT 2
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 1
28044: PUSH
28045: LD_INT 2
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 0
28054: PUSH
28055: LD_INT 2
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 1
28064: NEG
28065: PUSH
28066: LD_INT 1
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 2
28075: NEG
28076: PUSH
28077: LD_INT 0
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 2
28086: NEG
28087: PUSH
28088: LD_INT 1
28090: NEG
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 2
28098: NEG
28099: PUSH
28100: LD_INT 2
28102: NEG
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28129: LD_ADDR_VAR 0 21
28133: PUSH
28134: LD_INT 0
28136: PUSH
28137: LD_INT 0
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_INT 0
28146: PUSH
28147: LD_INT 1
28149: NEG
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: LD_INT 1
28157: PUSH
28158: LD_INT 0
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 1
28167: PUSH
28168: LD_INT 1
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 0
28177: PUSH
28178: LD_INT 1
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: PUSH
28185: LD_INT 1
28187: NEG
28188: PUSH
28189: LD_INT 0
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 1
28198: NEG
28199: PUSH
28200: LD_INT 1
28202: NEG
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 1
28210: NEG
28211: PUSH
28212: LD_INT 2
28214: NEG
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 0
28222: PUSH
28223: LD_INT 2
28225: NEG
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 1
28233: PUSH
28234: LD_INT 1
28236: NEG
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 2
28244: PUSH
28245: LD_INT 0
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 2
28254: PUSH
28255: LD_INT 1
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 2
28264: PUSH
28265: LD_INT 2
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 1
28274: PUSH
28275: LD_INT 2
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: LD_INT 0
28284: PUSH
28285: LD_INT 2
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: LD_INT 1
28294: NEG
28295: PUSH
28296: LD_INT 1
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 2
28305: NEG
28306: PUSH
28307: LD_INT 0
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: LD_INT 2
28316: NEG
28317: PUSH
28318: LD_INT 1
28320: NEG
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 2
28328: NEG
28329: PUSH
28330: LD_INT 2
28332: NEG
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28359: LD_ADDR_VAR 0 22
28363: PUSH
28364: LD_INT 0
28366: PUSH
28367: LD_INT 0
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 0
28376: PUSH
28377: LD_INT 1
28379: NEG
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 1
28387: PUSH
28388: LD_INT 0
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 1
28397: PUSH
28398: LD_INT 1
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 0
28407: PUSH
28408: LD_INT 1
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: LD_INT 1
28417: NEG
28418: PUSH
28419: LD_INT 0
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 1
28428: NEG
28429: PUSH
28430: LD_INT 1
28432: NEG
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 1
28440: NEG
28441: PUSH
28442: LD_INT 2
28444: NEG
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 0
28452: PUSH
28453: LD_INT 2
28455: NEG
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 1
28463: PUSH
28464: LD_INT 1
28466: NEG
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 2
28474: PUSH
28475: LD_INT 0
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 2
28484: PUSH
28485: LD_INT 1
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 2
28494: PUSH
28495: LD_INT 2
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 1
28504: PUSH
28505: LD_INT 2
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: LD_INT 0
28514: PUSH
28515: LD_INT 2
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 1
28524: NEG
28525: PUSH
28526: LD_INT 1
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 2
28535: NEG
28536: PUSH
28537: LD_INT 0
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PUSH
28544: LD_INT 2
28546: NEG
28547: PUSH
28548: LD_INT 1
28550: NEG
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 2
28558: NEG
28559: PUSH
28560: LD_INT 2
28562: NEG
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28589: LD_ADDR_VAR 0 23
28593: PUSH
28594: LD_INT 0
28596: PUSH
28597: LD_INT 0
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 0
28606: PUSH
28607: LD_INT 1
28609: NEG
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 1
28617: PUSH
28618: LD_INT 0
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: LD_INT 1
28627: PUSH
28628: LD_INT 1
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: LD_INT 0
28637: PUSH
28638: LD_INT 1
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 1
28647: NEG
28648: PUSH
28649: LD_INT 0
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 1
28658: NEG
28659: PUSH
28660: LD_INT 1
28662: NEG
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 1
28670: NEG
28671: PUSH
28672: LD_INT 2
28674: NEG
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 0
28682: PUSH
28683: LD_INT 2
28685: NEG
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 1
28693: PUSH
28694: LD_INT 1
28696: NEG
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 2
28704: PUSH
28705: LD_INT 0
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 2
28714: PUSH
28715: LD_INT 1
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 2
28724: PUSH
28725: LD_INT 2
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 1
28734: PUSH
28735: LD_INT 2
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 0
28744: PUSH
28745: LD_INT 2
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 1
28754: NEG
28755: PUSH
28756: LD_INT 1
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 2
28765: NEG
28766: PUSH
28767: LD_INT 0
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 2
28776: NEG
28777: PUSH
28778: LD_INT 1
28780: NEG
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 2
28788: NEG
28789: PUSH
28790: LD_INT 2
28792: NEG
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PUSH
28798: LD_INT 2
28800: NEG
28801: PUSH
28802: LD_INT 3
28804: NEG
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PUSH
28810: LD_INT 1
28812: NEG
28813: PUSH
28814: LD_INT 3
28816: NEG
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 1
28824: PUSH
28825: LD_INT 2
28827: NEG
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PUSH
28833: LD_INT 2
28835: PUSH
28836: LD_INT 1
28838: NEG
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
28869: LD_ADDR_VAR 0 24
28873: PUSH
28874: LD_INT 0
28876: PUSH
28877: LD_INT 0
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 0
28886: PUSH
28887: LD_INT 1
28889: NEG
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: LD_INT 1
28897: PUSH
28898: LD_INT 0
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 1
28907: PUSH
28908: LD_INT 1
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 0
28917: PUSH
28918: LD_INT 1
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 1
28927: NEG
28928: PUSH
28929: LD_INT 0
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 1
28938: NEG
28939: PUSH
28940: LD_INT 1
28942: NEG
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 1
28950: NEG
28951: PUSH
28952: LD_INT 2
28954: NEG
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: LD_INT 0
28962: PUSH
28963: LD_INT 2
28965: NEG
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 1
28973: PUSH
28974: LD_INT 1
28976: NEG
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: LD_INT 2
28984: PUSH
28985: LD_INT 0
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 2
28994: PUSH
28995: LD_INT 1
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 2
29004: PUSH
29005: LD_INT 2
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 1
29014: PUSH
29015: LD_INT 2
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 0
29024: PUSH
29025: LD_INT 2
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 1
29034: NEG
29035: PUSH
29036: LD_INT 1
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 2
29045: NEG
29046: PUSH
29047: LD_INT 0
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 2
29056: NEG
29057: PUSH
29058: LD_INT 1
29060: NEG
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 2
29068: NEG
29069: PUSH
29070: LD_INT 2
29072: NEG
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: LD_INT 1
29080: PUSH
29081: LD_INT 2
29083: NEG
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PUSH
29089: LD_INT 2
29091: PUSH
29092: LD_INT 1
29094: NEG
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 3
29102: PUSH
29103: LD_INT 1
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 3
29112: PUSH
29113: LD_INT 2
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: LIST
29144: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
29145: LD_ADDR_VAR 0 25
29149: PUSH
29150: LD_INT 0
29152: PUSH
29153: LD_INT 0
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 0
29162: PUSH
29163: LD_INT 1
29165: NEG
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 1
29173: PUSH
29174: LD_INT 0
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 1
29183: PUSH
29184: LD_INT 1
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: LD_INT 0
29193: PUSH
29194: LD_INT 1
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: LD_INT 1
29203: NEG
29204: PUSH
29205: LD_INT 0
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 1
29214: NEG
29215: PUSH
29216: LD_INT 1
29218: NEG
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 1
29226: NEG
29227: PUSH
29228: LD_INT 2
29230: NEG
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 0
29238: PUSH
29239: LD_INT 2
29241: NEG
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 1
29249: PUSH
29250: LD_INT 1
29252: NEG
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 2
29260: PUSH
29261: LD_INT 0
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 2
29270: PUSH
29271: LD_INT 1
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: LD_INT 2
29280: PUSH
29281: LD_INT 2
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 1
29290: PUSH
29291: LD_INT 2
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 0
29300: PUSH
29301: LD_INT 2
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: LD_INT 1
29310: NEG
29311: PUSH
29312: LD_INT 1
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 2
29321: NEG
29322: PUSH
29323: LD_INT 0
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: PUSH
29330: LD_INT 2
29332: NEG
29333: PUSH
29334: LD_INT 1
29336: NEG
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: LD_INT 2
29344: NEG
29345: PUSH
29346: LD_INT 2
29348: NEG
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: LD_INT 3
29356: PUSH
29357: LD_INT 1
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 3
29366: PUSH
29367: LD_INT 2
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: LD_INT 2
29376: PUSH
29377: LD_INT 3
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 1
29386: PUSH
29387: LD_INT 3
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29419: LD_ADDR_VAR 0 26
29423: PUSH
29424: LD_INT 0
29426: PUSH
29427: LD_INT 0
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 0
29436: PUSH
29437: LD_INT 1
29439: NEG
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 1
29447: PUSH
29448: LD_INT 0
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 1
29457: PUSH
29458: LD_INT 1
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 0
29467: PUSH
29468: LD_INT 1
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 1
29477: NEG
29478: PUSH
29479: LD_INT 0
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 1
29488: NEG
29489: PUSH
29490: LD_INT 1
29492: NEG
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: LD_INT 1
29500: NEG
29501: PUSH
29502: LD_INT 2
29504: NEG
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 0
29512: PUSH
29513: LD_INT 2
29515: NEG
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 1
29523: PUSH
29524: LD_INT 1
29526: NEG
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 2
29534: PUSH
29535: LD_INT 0
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 2
29544: PUSH
29545: LD_INT 1
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 2
29554: PUSH
29555: LD_INT 2
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: LD_INT 1
29564: PUSH
29565: LD_INT 2
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 0
29574: PUSH
29575: LD_INT 2
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 1
29584: NEG
29585: PUSH
29586: LD_INT 1
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 2
29595: NEG
29596: PUSH
29597: LD_INT 0
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 2
29606: NEG
29607: PUSH
29608: LD_INT 1
29610: NEG
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 2
29618: NEG
29619: PUSH
29620: LD_INT 2
29622: NEG
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 2
29630: PUSH
29631: LD_INT 3
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 1
29640: PUSH
29641: LD_INT 3
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: LD_INT 1
29650: NEG
29651: PUSH
29652: LD_INT 2
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PUSH
29659: LD_INT 2
29661: NEG
29662: PUSH
29663: LD_INT 1
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29695: LD_ADDR_VAR 0 27
29699: PUSH
29700: LD_INT 0
29702: PUSH
29703: LD_INT 0
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 0
29712: PUSH
29713: LD_INT 1
29715: NEG
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 1
29723: PUSH
29724: LD_INT 0
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 1
29733: PUSH
29734: LD_INT 1
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 0
29743: PUSH
29744: LD_INT 1
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 1
29753: NEG
29754: PUSH
29755: LD_INT 0
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: LD_INT 1
29764: NEG
29765: PUSH
29766: LD_INT 1
29768: NEG
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 1
29776: NEG
29777: PUSH
29778: LD_INT 2
29780: NEG
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 0
29788: PUSH
29789: LD_INT 2
29791: NEG
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 1
29799: PUSH
29800: LD_INT 1
29802: NEG
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 2
29810: PUSH
29811: LD_INT 0
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 2
29820: PUSH
29821: LD_INT 1
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 2
29830: PUSH
29831: LD_INT 2
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 1
29840: PUSH
29841: LD_INT 2
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 0
29850: PUSH
29851: LD_INT 2
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 1
29860: NEG
29861: PUSH
29862: LD_INT 1
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: LD_INT 2
29871: NEG
29872: PUSH
29873: LD_INT 0
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 2
29882: NEG
29883: PUSH
29884: LD_INT 1
29886: NEG
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 2
29894: NEG
29895: PUSH
29896: LD_INT 2
29898: NEG
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 1
29906: NEG
29907: PUSH
29908: LD_INT 2
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 2
29917: NEG
29918: PUSH
29919: LD_INT 1
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 3
29928: NEG
29929: PUSH
29930: LD_INT 1
29932: NEG
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 3
29940: NEG
29941: PUSH
29942: LD_INT 2
29944: NEG
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29975: LD_ADDR_VAR 0 28
29979: PUSH
29980: LD_INT 0
29982: PUSH
29983: LD_INT 0
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 0
29992: PUSH
29993: LD_INT 1
29995: NEG
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 1
30003: PUSH
30004: LD_INT 0
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: LD_INT 1
30013: PUSH
30014: LD_INT 1
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 0
30023: PUSH
30024: LD_INT 1
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 1
30033: NEG
30034: PUSH
30035: LD_INT 0
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 1
30044: NEG
30045: PUSH
30046: LD_INT 1
30048: NEG
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 1
30056: NEG
30057: PUSH
30058: LD_INT 2
30060: NEG
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 0
30068: PUSH
30069: LD_INT 2
30071: NEG
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 1
30079: PUSH
30080: LD_INT 1
30082: NEG
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: LD_INT 2
30090: PUSH
30091: LD_INT 0
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: LD_INT 2
30100: PUSH
30101: LD_INT 1
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 2
30110: PUSH
30111: LD_INT 2
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 1
30120: PUSH
30121: LD_INT 2
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 0
30130: PUSH
30131: LD_INT 2
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 1
30140: NEG
30141: PUSH
30142: LD_INT 1
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 2
30151: NEG
30152: PUSH
30153: LD_INT 0
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 2
30162: NEG
30163: PUSH
30164: LD_INT 1
30166: NEG
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 2
30174: NEG
30175: PUSH
30176: LD_INT 2
30178: NEG
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 2
30186: NEG
30187: PUSH
30188: LD_INT 3
30190: NEG
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 1
30198: NEG
30199: PUSH
30200: LD_INT 3
30202: NEG
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 3
30210: NEG
30211: PUSH
30212: LD_INT 1
30214: NEG
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 3
30222: NEG
30223: PUSH
30224: LD_INT 2
30226: NEG
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30257: LD_ADDR_VAR 0 29
30261: PUSH
30262: LD_INT 0
30264: PUSH
30265: LD_INT 0
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 0
30274: PUSH
30275: LD_INT 1
30277: NEG
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 1
30285: PUSH
30286: LD_INT 0
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 1
30295: PUSH
30296: LD_INT 1
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 0
30305: PUSH
30306: LD_INT 1
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 1
30315: NEG
30316: PUSH
30317: LD_INT 0
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 1
30326: NEG
30327: PUSH
30328: LD_INT 1
30330: NEG
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 1
30338: NEG
30339: PUSH
30340: LD_INT 2
30342: NEG
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 0
30350: PUSH
30351: LD_INT 2
30353: NEG
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 1
30361: PUSH
30362: LD_INT 1
30364: NEG
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 2
30372: PUSH
30373: LD_INT 0
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 2
30382: PUSH
30383: LD_INT 1
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 1
30392: PUSH
30393: LD_INT 2
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 0
30402: PUSH
30403: LD_INT 2
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 1
30412: NEG
30413: PUSH
30414: LD_INT 1
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 2
30423: NEG
30424: PUSH
30425: LD_INT 1
30427: NEG
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 2
30435: NEG
30436: PUSH
30437: LD_INT 2
30439: NEG
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 2
30447: NEG
30448: PUSH
30449: LD_INT 3
30451: NEG
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 2
30459: PUSH
30460: LD_INT 1
30462: NEG
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 3
30470: PUSH
30471: LD_INT 1
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 1
30480: PUSH
30481: LD_INT 3
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 1
30490: NEG
30491: PUSH
30492: LD_INT 2
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 3
30501: NEG
30502: PUSH
30503: LD_INT 2
30505: NEG
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30536: LD_ADDR_VAR 0 30
30540: PUSH
30541: LD_INT 0
30543: PUSH
30544: LD_INT 0
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 0
30553: PUSH
30554: LD_INT 1
30556: NEG
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 1
30564: PUSH
30565: LD_INT 0
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 1
30574: PUSH
30575: LD_INT 1
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 0
30584: PUSH
30585: LD_INT 1
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 1
30594: NEG
30595: PUSH
30596: LD_INT 0
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 1
30605: NEG
30606: PUSH
30607: LD_INT 1
30609: NEG
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 1
30617: NEG
30618: PUSH
30619: LD_INT 2
30621: NEG
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 0
30629: PUSH
30630: LD_INT 2
30632: NEG
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 1
30640: PUSH
30641: LD_INT 1
30643: NEG
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 2
30651: PUSH
30652: LD_INT 0
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 2
30661: PUSH
30662: LD_INT 1
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 2
30671: PUSH
30672: LD_INT 2
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 1
30681: PUSH
30682: LD_INT 2
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 1
30691: NEG
30692: PUSH
30693: LD_INT 1
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 2
30702: NEG
30703: PUSH
30704: LD_INT 0
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 2
30713: NEG
30714: PUSH
30715: LD_INT 1
30717: NEG
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: LD_INT 1
30725: NEG
30726: PUSH
30727: LD_INT 3
30729: NEG
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 1
30737: PUSH
30738: LD_INT 2
30740: NEG
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 3
30748: PUSH
30749: LD_INT 2
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 2
30758: PUSH
30759: LD_INT 3
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 2
30768: NEG
30769: PUSH
30770: LD_INT 1
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 3
30779: NEG
30780: PUSH
30781: LD_INT 1
30783: NEG
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30814: LD_ADDR_VAR 0 31
30818: PUSH
30819: LD_INT 0
30821: PUSH
30822: LD_INT 0
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 0
30831: PUSH
30832: LD_INT 1
30834: NEG
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 1
30842: PUSH
30843: LD_INT 0
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 1
30852: PUSH
30853: LD_INT 1
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 0
30862: PUSH
30863: LD_INT 1
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 1
30872: NEG
30873: PUSH
30874: LD_INT 0
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 1
30883: NEG
30884: PUSH
30885: LD_INT 1
30887: NEG
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 1
30895: NEG
30896: PUSH
30897: LD_INT 2
30899: NEG
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 1
30907: PUSH
30908: LD_INT 1
30910: NEG
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 2
30918: PUSH
30919: LD_INT 0
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 2
30928: PUSH
30929: LD_INT 1
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 2
30938: PUSH
30939: LD_INT 2
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 1
30948: PUSH
30949: LD_INT 2
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: LD_INT 0
30958: PUSH
30959: LD_INT 2
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: LD_INT 1
30968: NEG
30969: PUSH
30970: LD_INT 1
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 2
30979: NEG
30980: PUSH
30981: LD_INT 1
30983: NEG
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: LD_INT 2
30991: NEG
30992: PUSH
30993: LD_INT 2
30995: NEG
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 2
31003: NEG
31004: PUSH
31005: LD_INT 3
31007: NEG
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 2
31015: PUSH
31016: LD_INT 1
31018: NEG
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 3
31026: PUSH
31027: LD_INT 1
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 1
31036: PUSH
31037: LD_INT 3
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 1
31046: NEG
31047: PUSH
31048: LD_INT 2
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 3
31057: NEG
31058: PUSH
31059: LD_INT 2
31061: NEG
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31092: LD_ADDR_VAR 0 32
31096: PUSH
31097: LD_INT 0
31099: PUSH
31100: LD_INT 0
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 0
31109: PUSH
31110: LD_INT 1
31112: NEG
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 1
31120: PUSH
31121: LD_INT 0
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 1
31130: PUSH
31131: LD_INT 1
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 0
31140: PUSH
31141: LD_INT 1
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 1
31150: NEG
31151: PUSH
31152: LD_INT 0
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 1
31161: NEG
31162: PUSH
31163: LD_INT 1
31165: NEG
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 1
31173: NEG
31174: PUSH
31175: LD_INT 2
31177: NEG
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 0
31185: PUSH
31186: LD_INT 2
31188: NEG
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 1
31196: PUSH
31197: LD_INT 1
31199: NEG
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 2
31207: PUSH
31208: LD_INT 1
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 2
31217: PUSH
31218: LD_INT 2
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 1
31227: PUSH
31228: LD_INT 2
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 0
31237: PUSH
31238: LD_INT 2
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 1
31247: NEG
31248: PUSH
31249: LD_INT 1
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 2
31258: NEG
31259: PUSH
31260: LD_INT 0
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 2
31269: NEG
31270: PUSH
31271: LD_INT 1
31273: NEG
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 1
31281: NEG
31282: PUSH
31283: LD_INT 3
31285: NEG
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 1
31293: PUSH
31294: LD_INT 2
31296: NEG
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 3
31304: PUSH
31305: LD_INT 2
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 2
31314: PUSH
31315: LD_INT 3
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 2
31324: NEG
31325: PUSH
31326: LD_INT 1
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 3
31335: NEG
31336: PUSH
31337: LD_INT 1
31339: NEG
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31370: LD_ADDR_VAR 0 33
31374: PUSH
31375: LD_INT 0
31377: PUSH
31378: LD_INT 0
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 0
31387: PUSH
31388: LD_INT 1
31390: NEG
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 1
31398: PUSH
31399: LD_INT 0
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 1
31408: PUSH
31409: LD_INT 1
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 0
31418: PUSH
31419: LD_INT 1
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 1
31428: NEG
31429: PUSH
31430: LD_INT 0
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 1
31439: NEG
31440: PUSH
31441: LD_INT 1
31443: NEG
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 1
31451: NEG
31452: PUSH
31453: LD_INT 2
31455: NEG
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 1
31463: PUSH
31464: LD_INT 1
31466: NEG
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 2
31474: PUSH
31475: LD_INT 0
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 2
31484: PUSH
31485: LD_INT 1
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 1
31494: PUSH
31495: LD_INT 2
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 0
31504: PUSH
31505: LD_INT 2
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 1
31514: NEG
31515: PUSH
31516: LD_INT 1
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 2
31525: NEG
31526: PUSH
31527: LD_INT 0
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 2
31536: NEG
31537: PUSH
31538: LD_INT 1
31540: NEG
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 2
31548: NEG
31549: PUSH
31550: LD_INT 2
31552: NEG
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 2
31560: NEG
31561: PUSH
31562: LD_INT 3
31564: NEG
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 2
31572: PUSH
31573: LD_INT 1
31575: NEG
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: PUSH
31581: LD_INT 3
31583: PUSH
31584: LD_INT 1
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 1
31593: PUSH
31594: LD_INT 3
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 1
31603: NEG
31604: PUSH
31605: LD_INT 2
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 3
31614: NEG
31615: PUSH
31616: LD_INT 2
31618: NEG
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31649: LD_ADDR_VAR 0 34
31653: PUSH
31654: LD_INT 0
31656: PUSH
31657: LD_INT 0
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 0
31666: PUSH
31667: LD_INT 1
31669: NEG
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 1
31677: PUSH
31678: LD_INT 0
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 1
31687: PUSH
31688: LD_INT 1
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 0
31697: PUSH
31698: LD_INT 1
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 1
31707: NEG
31708: PUSH
31709: LD_INT 0
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 1
31718: NEG
31719: PUSH
31720: LD_INT 1
31722: NEG
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 1
31730: NEG
31731: PUSH
31732: LD_INT 2
31734: NEG
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 0
31742: PUSH
31743: LD_INT 2
31745: NEG
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 1
31753: PUSH
31754: LD_INT 1
31756: NEG
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 2
31764: PUSH
31765: LD_INT 1
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 2
31774: PUSH
31775: LD_INT 2
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 1
31784: PUSH
31785: LD_INT 2
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 1
31794: NEG
31795: PUSH
31796: LD_INT 1
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 2
31805: NEG
31806: PUSH
31807: LD_INT 0
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 2
31816: NEG
31817: PUSH
31818: LD_INT 1
31820: NEG
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 2
31828: NEG
31829: PUSH
31830: LD_INT 2
31832: NEG
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 1
31840: NEG
31841: PUSH
31842: LD_INT 3
31844: NEG
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 1
31852: PUSH
31853: LD_INT 2
31855: NEG
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 3
31863: PUSH
31864: LD_INT 2
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 2
31873: PUSH
31874: LD_INT 3
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 2
31883: NEG
31884: PUSH
31885: LD_INT 1
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 3
31894: NEG
31895: PUSH
31896: LD_INT 1
31898: NEG
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31929: LD_ADDR_VAR 0 35
31933: PUSH
31934: LD_INT 0
31936: PUSH
31937: LD_INT 0
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 0
31946: PUSH
31947: LD_INT 1
31949: NEG
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: LD_INT 1
31957: PUSH
31958: LD_INT 0
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 1
31967: PUSH
31968: LD_INT 1
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 0
31977: PUSH
31978: LD_INT 1
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 1
31987: NEG
31988: PUSH
31989: LD_INT 0
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 1
31998: NEG
31999: PUSH
32000: LD_INT 1
32002: NEG
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 2
32010: PUSH
32011: LD_INT 1
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 2
32020: NEG
32021: PUSH
32022: LD_INT 1
32024: NEG
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32041: LD_ADDR_VAR 0 36
32045: PUSH
32046: LD_INT 0
32048: PUSH
32049: LD_INT 0
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 0
32058: PUSH
32059: LD_INT 1
32061: NEG
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 1
32069: PUSH
32070: LD_INT 0
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 1
32079: PUSH
32080: LD_INT 1
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 0
32089: PUSH
32090: LD_INT 1
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 1
32099: NEG
32100: PUSH
32101: LD_INT 0
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 1
32110: NEG
32111: PUSH
32112: LD_INT 1
32114: NEG
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 1
32122: NEG
32123: PUSH
32124: LD_INT 2
32126: NEG
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 1
32134: PUSH
32135: LD_INT 2
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32153: LD_ADDR_VAR 0 37
32157: PUSH
32158: LD_INT 0
32160: PUSH
32161: LD_INT 0
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 0
32170: PUSH
32171: LD_INT 1
32173: NEG
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 1
32181: PUSH
32182: LD_INT 0
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 1
32191: PUSH
32192: LD_INT 1
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 0
32201: PUSH
32202: LD_INT 1
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 1
32211: NEG
32212: PUSH
32213: LD_INT 0
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 1
32222: NEG
32223: PUSH
32224: LD_INT 1
32226: NEG
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 1
32234: PUSH
32235: LD_INT 1
32237: NEG
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 1
32245: NEG
32246: PUSH
32247: LD_INT 1
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32265: LD_ADDR_VAR 0 38
32269: PUSH
32270: LD_INT 0
32272: PUSH
32273: LD_INT 0
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 0
32282: PUSH
32283: LD_INT 1
32285: NEG
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 1
32293: PUSH
32294: LD_INT 0
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 1
32303: PUSH
32304: LD_INT 1
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 0
32313: PUSH
32314: LD_INT 1
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 1
32323: NEG
32324: PUSH
32325: LD_INT 0
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 1
32334: NEG
32335: PUSH
32336: LD_INT 1
32338: NEG
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 2
32346: PUSH
32347: LD_INT 1
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 2
32356: NEG
32357: PUSH
32358: LD_INT 1
32360: NEG
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32377: LD_ADDR_VAR 0 39
32381: PUSH
32382: LD_INT 0
32384: PUSH
32385: LD_INT 0
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 0
32394: PUSH
32395: LD_INT 1
32397: NEG
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 1
32405: PUSH
32406: LD_INT 0
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 1
32415: PUSH
32416: LD_INT 1
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 0
32425: PUSH
32426: LD_INT 1
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 1
32435: NEG
32436: PUSH
32437: LD_INT 0
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 1
32446: NEG
32447: PUSH
32448: LD_INT 1
32450: NEG
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 1
32458: NEG
32459: PUSH
32460: LD_INT 2
32462: NEG
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 1
32470: PUSH
32471: LD_INT 2
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32489: LD_ADDR_VAR 0 40
32493: PUSH
32494: LD_INT 0
32496: PUSH
32497: LD_INT 0
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 0
32506: PUSH
32507: LD_INT 1
32509: NEG
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 1
32517: PUSH
32518: LD_INT 0
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 1
32527: PUSH
32528: LD_INT 1
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 0
32537: PUSH
32538: LD_INT 1
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 1
32547: NEG
32548: PUSH
32549: LD_INT 0
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 1
32558: NEG
32559: PUSH
32560: LD_INT 1
32562: NEG
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 1
32570: PUSH
32571: LD_INT 1
32573: NEG
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 1
32581: NEG
32582: PUSH
32583: LD_INT 1
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32601: LD_ADDR_VAR 0 41
32605: PUSH
32606: LD_INT 0
32608: PUSH
32609: LD_INT 0
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 0
32618: PUSH
32619: LD_INT 1
32621: NEG
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 1
32629: PUSH
32630: LD_INT 0
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 1
32639: PUSH
32640: LD_INT 1
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 0
32649: PUSH
32650: LD_INT 1
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 1
32659: NEG
32660: PUSH
32661: LD_INT 0
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 1
32670: NEG
32671: PUSH
32672: LD_INT 1
32674: NEG
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 1
32682: NEG
32683: PUSH
32684: LD_INT 2
32686: NEG
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 1
32694: PUSH
32695: LD_INT 1
32697: NEG
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 2
32705: PUSH
32706: LD_INT 0
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 2
32715: PUSH
32716: LD_INT 1
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 2
32725: PUSH
32726: LD_INT 2
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 1
32735: PUSH
32736: LD_INT 2
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 1
32745: NEG
32746: PUSH
32747: LD_INT 1
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 2
32756: NEG
32757: PUSH
32758: LD_INT 0
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 2
32767: NEG
32768: PUSH
32769: LD_INT 1
32771: NEG
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 2
32779: NEG
32780: PUSH
32781: LD_INT 2
32783: NEG
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 2
32791: NEG
32792: PUSH
32793: LD_INT 3
32795: NEG
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 2
32803: PUSH
32804: LD_INT 1
32806: NEG
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 3
32814: PUSH
32815: LD_INT 0
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 3
32824: PUSH
32825: LD_INT 1
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 3
32834: PUSH
32835: LD_INT 2
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 3
32844: PUSH
32845: LD_INT 3
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 2
32854: PUSH
32855: LD_INT 3
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 2
32864: NEG
32865: PUSH
32866: LD_INT 1
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 3
32875: NEG
32876: PUSH
32877: LD_INT 0
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 3
32886: NEG
32887: PUSH
32888: LD_INT 1
32890: NEG
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 3
32898: NEG
32899: PUSH
32900: LD_INT 2
32902: NEG
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 3
32910: NEG
32911: PUSH
32912: LD_INT 3
32914: NEG
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32951: LD_ADDR_VAR 0 42
32955: PUSH
32956: LD_INT 0
32958: PUSH
32959: LD_INT 0
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 0
32968: PUSH
32969: LD_INT 1
32971: NEG
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 1
32979: PUSH
32980: LD_INT 0
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 1
32989: PUSH
32990: LD_INT 1
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 0
32999: PUSH
33000: LD_INT 1
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 1
33009: NEG
33010: PUSH
33011: LD_INT 0
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 1
33020: NEG
33021: PUSH
33022: LD_INT 1
33024: NEG
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 1
33032: NEG
33033: PUSH
33034: LD_INT 2
33036: NEG
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 0
33044: PUSH
33045: LD_INT 2
33047: NEG
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 1
33055: PUSH
33056: LD_INT 1
33058: NEG
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 2
33066: PUSH
33067: LD_INT 1
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 2
33076: PUSH
33077: LD_INT 2
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 1
33086: PUSH
33087: LD_INT 2
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 0
33096: PUSH
33097: LD_INT 2
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 1
33106: NEG
33107: PUSH
33108: LD_INT 1
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 2
33117: NEG
33118: PUSH
33119: LD_INT 1
33121: NEG
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 2
33129: NEG
33130: PUSH
33131: LD_INT 2
33133: NEG
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 2
33141: NEG
33142: PUSH
33143: LD_INT 3
33145: NEG
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 1
33153: NEG
33154: PUSH
33155: LD_INT 3
33157: NEG
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 0
33165: PUSH
33166: LD_INT 3
33168: NEG
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 1
33176: PUSH
33177: LD_INT 2
33179: NEG
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 3
33187: PUSH
33188: LD_INT 2
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 3
33197: PUSH
33198: LD_INT 3
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 2
33207: PUSH
33208: LD_INT 3
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 1
33217: PUSH
33218: LD_INT 3
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 0
33227: PUSH
33228: LD_INT 3
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 1
33237: NEG
33238: PUSH
33239: LD_INT 2
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: LD_INT 3
33248: NEG
33249: PUSH
33250: LD_INT 2
33252: NEG
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 3
33260: NEG
33261: PUSH
33262: LD_INT 3
33264: NEG
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33301: LD_ADDR_VAR 0 43
33305: PUSH
33306: LD_INT 0
33308: PUSH
33309: LD_INT 0
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 0
33318: PUSH
33319: LD_INT 1
33321: NEG
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 1
33329: PUSH
33330: LD_INT 0
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 1
33339: PUSH
33340: LD_INT 1
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 0
33349: PUSH
33350: LD_INT 1
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 1
33359: NEG
33360: PUSH
33361: LD_INT 0
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 1
33370: NEG
33371: PUSH
33372: LD_INT 1
33374: NEG
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 1
33382: NEG
33383: PUSH
33384: LD_INT 2
33386: NEG
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 0
33394: PUSH
33395: LD_INT 2
33397: NEG
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 1
33405: PUSH
33406: LD_INT 1
33408: NEG
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 2
33416: PUSH
33417: LD_INT 0
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 2
33426: PUSH
33427: LD_INT 1
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 1
33436: PUSH
33437: LD_INT 2
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 0
33446: PUSH
33447: LD_INT 2
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 1
33456: NEG
33457: PUSH
33458: LD_INT 1
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: PUSH
33465: LD_INT 2
33467: NEG
33468: PUSH
33469: LD_INT 0
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 2
33478: NEG
33479: PUSH
33480: LD_INT 1
33482: NEG
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 1
33490: NEG
33491: PUSH
33492: LD_INT 3
33494: NEG
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 0
33502: PUSH
33503: LD_INT 3
33505: NEG
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 1
33513: PUSH
33514: LD_INT 2
33516: NEG
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 2
33524: PUSH
33525: LD_INT 1
33527: NEG
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 3
33535: PUSH
33536: LD_INT 0
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 3
33545: PUSH
33546: LD_INT 1
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 1
33555: PUSH
33556: LD_INT 3
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 0
33565: PUSH
33566: LD_INT 3
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: LD_INT 1
33575: NEG
33576: PUSH
33577: LD_INT 2
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 2
33586: NEG
33587: PUSH
33588: LD_INT 1
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 3
33597: NEG
33598: PUSH
33599: LD_INT 0
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: PUSH
33606: LD_INT 3
33608: NEG
33609: PUSH
33610: LD_INT 1
33612: NEG
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33649: LD_ADDR_VAR 0 44
33653: PUSH
33654: LD_INT 0
33656: PUSH
33657: LD_INT 0
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: LD_INT 0
33666: PUSH
33667: LD_INT 1
33669: NEG
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 1
33677: PUSH
33678: LD_INT 0
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 1
33687: PUSH
33688: LD_INT 1
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 0
33697: PUSH
33698: LD_INT 1
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 1
33707: NEG
33708: PUSH
33709: LD_INT 0
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 1
33718: NEG
33719: PUSH
33720: LD_INT 1
33722: NEG
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 1
33730: NEG
33731: PUSH
33732: LD_INT 2
33734: NEG
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 1
33742: PUSH
33743: LD_INT 1
33745: NEG
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 2
33753: PUSH
33754: LD_INT 0
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 2
33763: PUSH
33764: LD_INT 1
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 2
33773: PUSH
33774: LD_INT 2
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 1
33783: PUSH
33784: LD_INT 2
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 1
33793: NEG
33794: PUSH
33795: LD_INT 1
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 2
33804: NEG
33805: PUSH
33806: LD_INT 0
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: LD_INT 2
33815: NEG
33816: PUSH
33817: LD_INT 1
33819: NEG
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 2
33827: NEG
33828: PUSH
33829: LD_INT 2
33831: NEG
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 2
33839: NEG
33840: PUSH
33841: LD_INT 3
33843: NEG
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 2
33851: PUSH
33852: LD_INT 1
33854: NEG
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 3
33862: PUSH
33863: LD_INT 0
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 3
33872: PUSH
33873: LD_INT 1
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 3
33882: PUSH
33883: LD_INT 2
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 3
33892: PUSH
33893: LD_INT 3
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 2
33902: PUSH
33903: LD_INT 3
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 2
33912: NEG
33913: PUSH
33914: LD_INT 1
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 3
33923: NEG
33924: PUSH
33925: LD_INT 0
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 3
33934: NEG
33935: PUSH
33936: LD_INT 1
33938: NEG
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 3
33946: NEG
33947: PUSH
33948: LD_INT 2
33950: NEG
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 3
33958: NEG
33959: PUSH
33960: LD_INT 3
33962: NEG
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33999: LD_ADDR_VAR 0 45
34003: PUSH
34004: LD_INT 0
34006: PUSH
34007: LD_INT 0
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 0
34016: PUSH
34017: LD_INT 1
34019: NEG
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 1
34027: PUSH
34028: LD_INT 0
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 1
34037: PUSH
34038: LD_INT 1
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 0
34047: PUSH
34048: LD_INT 1
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 1
34057: NEG
34058: PUSH
34059: LD_INT 0
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: LD_INT 1
34068: NEG
34069: PUSH
34070: LD_INT 1
34072: NEG
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 1
34080: NEG
34081: PUSH
34082: LD_INT 2
34084: NEG
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 0
34092: PUSH
34093: LD_INT 2
34095: NEG
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 1
34103: PUSH
34104: LD_INT 1
34106: NEG
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 2
34114: PUSH
34115: LD_INT 1
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 2
34124: PUSH
34125: LD_INT 2
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 1
34134: PUSH
34135: LD_INT 2
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 0
34144: PUSH
34145: LD_INT 2
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 1
34154: NEG
34155: PUSH
34156: LD_INT 1
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 2
34165: NEG
34166: PUSH
34167: LD_INT 1
34169: NEG
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 2
34177: NEG
34178: PUSH
34179: LD_INT 2
34181: NEG
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 2
34189: NEG
34190: PUSH
34191: LD_INT 3
34193: NEG
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 1
34201: NEG
34202: PUSH
34203: LD_INT 3
34205: NEG
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 0
34213: PUSH
34214: LD_INT 3
34216: NEG
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 1
34224: PUSH
34225: LD_INT 2
34227: NEG
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 3
34235: PUSH
34236: LD_INT 2
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 3
34245: PUSH
34246: LD_INT 3
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 2
34255: PUSH
34256: LD_INT 3
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 1
34265: PUSH
34266: LD_INT 3
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 0
34275: PUSH
34276: LD_INT 3
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 1
34285: NEG
34286: PUSH
34287: LD_INT 2
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 3
34296: NEG
34297: PUSH
34298: LD_INT 2
34300: NEG
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: LD_INT 3
34308: NEG
34309: PUSH
34310: LD_INT 3
34312: NEG
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34349: LD_ADDR_VAR 0 46
34353: PUSH
34354: LD_INT 0
34356: PUSH
34357: LD_INT 0
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 0
34366: PUSH
34367: LD_INT 1
34369: NEG
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 1
34377: PUSH
34378: LD_INT 0
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 1
34387: PUSH
34388: LD_INT 1
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 0
34397: PUSH
34398: LD_INT 1
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 1
34407: NEG
34408: PUSH
34409: LD_INT 0
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 1
34418: NEG
34419: PUSH
34420: LD_INT 1
34422: NEG
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 1
34430: NEG
34431: PUSH
34432: LD_INT 2
34434: NEG
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 0
34442: PUSH
34443: LD_INT 2
34445: NEG
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 1
34453: PUSH
34454: LD_INT 1
34456: NEG
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 2
34464: PUSH
34465: LD_INT 0
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 2
34474: PUSH
34475: LD_INT 1
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: LD_INT 1
34484: PUSH
34485: LD_INT 2
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PUSH
34492: LD_INT 0
34494: PUSH
34495: LD_INT 2
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 1
34504: NEG
34505: PUSH
34506: LD_INT 1
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 2
34515: NEG
34516: PUSH
34517: LD_INT 0
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 2
34526: NEG
34527: PUSH
34528: LD_INT 1
34530: NEG
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 1
34538: NEG
34539: PUSH
34540: LD_INT 3
34542: NEG
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 0
34550: PUSH
34551: LD_INT 3
34553: NEG
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 1
34561: PUSH
34562: LD_INT 2
34564: NEG
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 2
34572: PUSH
34573: LD_INT 1
34575: NEG
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 3
34583: PUSH
34584: LD_INT 0
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: LD_INT 3
34593: PUSH
34594: LD_INT 1
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 1
34603: PUSH
34604: LD_INT 3
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 0
34613: PUSH
34614: LD_INT 3
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 1
34623: NEG
34624: PUSH
34625: LD_INT 2
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 2
34634: NEG
34635: PUSH
34636: LD_INT 1
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 3
34645: NEG
34646: PUSH
34647: LD_INT 0
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 3
34656: NEG
34657: PUSH
34658: LD_INT 1
34660: NEG
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34697: LD_ADDR_VAR 0 47
34701: PUSH
34702: LD_INT 0
34704: PUSH
34705: LD_INT 0
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: PUSH
34712: LD_INT 0
34714: PUSH
34715: LD_INT 1
34717: NEG
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 1
34725: PUSH
34726: LD_INT 0
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 1
34735: PUSH
34736: LD_INT 1
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 0
34745: PUSH
34746: LD_INT 1
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 1
34755: NEG
34756: PUSH
34757: LD_INT 0
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 1
34766: NEG
34767: PUSH
34768: LD_INT 1
34770: NEG
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 1
34778: NEG
34779: PUSH
34780: LD_INT 2
34782: NEG
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 0
34790: PUSH
34791: LD_INT 2
34793: NEG
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 1
34801: PUSH
34802: LD_INT 1
34804: NEG
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 2
34812: NEG
34813: PUSH
34814: LD_INT 1
34816: NEG
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 2
34824: NEG
34825: PUSH
34826: LD_INT 2
34828: NEG
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34848: LD_ADDR_VAR 0 48
34852: PUSH
34853: LD_INT 0
34855: PUSH
34856: LD_INT 0
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 0
34865: PUSH
34866: LD_INT 1
34868: NEG
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 1
34876: PUSH
34877: LD_INT 0
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 1
34886: PUSH
34887: LD_INT 1
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 0
34896: PUSH
34897: LD_INT 1
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 1
34906: NEG
34907: PUSH
34908: LD_INT 0
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 1
34917: NEG
34918: PUSH
34919: LD_INT 1
34921: NEG
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 1
34929: NEG
34930: PUSH
34931: LD_INT 2
34933: NEG
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 0
34941: PUSH
34942: LD_INT 2
34944: NEG
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 1
34952: PUSH
34953: LD_INT 1
34955: NEG
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 2
34963: PUSH
34964: LD_INT 0
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 2
34973: PUSH
34974: LD_INT 1
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34995: LD_ADDR_VAR 0 49
34999: PUSH
35000: LD_INT 0
35002: PUSH
35003: LD_INT 0
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 0
35012: PUSH
35013: LD_INT 1
35015: NEG
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 1
35023: PUSH
35024: LD_INT 0
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 1
35033: PUSH
35034: LD_INT 1
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 0
35043: PUSH
35044: LD_INT 1
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 1
35053: NEG
35054: PUSH
35055: LD_INT 0
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 1
35064: NEG
35065: PUSH
35066: LD_INT 1
35068: NEG
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 1
35076: PUSH
35077: LD_INT 1
35079: NEG
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 2
35087: PUSH
35088: LD_INT 0
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 2
35097: PUSH
35098: LD_INT 1
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 2
35107: PUSH
35108: LD_INT 2
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 1
35117: PUSH
35118: LD_INT 2
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35139: LD_ADDR_VAR 0 50
35143: PUSH
35144: LD_INT 0
35146: PUSH
35147: LD_INT 0
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 0
35156: PUSH
35157: LD_INT 1
35159: NEG
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 1
35167: PUSH
35168: LD_INT 0
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 1
35177: PUSH
35178: LD_INT 1
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: LD_INT 0
35187: PUSH
35188: LD_INT 1
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 1
35197: NEG
35198: PUSH
35199: LD_INT 0
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 1
35208: NEG
35209: PUSH
35210: LD_INT 1
35212: NEG
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 2
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 2
35230: PUSH
35231: LD_INT 2
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 1
35240: PUSH
35241: LD_INT 2
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 0
35250: PUSH
35251: LD_INT 2
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 1
35260: NEG
35261: PUSH
35262: LD_INT 1
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35283: LD_ADDR_VAR 0 51
35287: PUSH
35288: LD_INT 0
35290: PUSH
35291: LD_INT 0
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 0
35300: PUSH
35301: LD_INT 1
35303: NEG
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 1
35311: PUSH
35312: LD_INT 0
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 1
35321: PUSH
35322: LD_INT 1
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 0
35331: PUSH
35332: LD_INT 1
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 1
35341: NEG
35342: PUSH
35343: LD_INT 0
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 1
35352: NEG
35353: PUSH
35354: LD_INT 1
35356: NEG
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 1
35364: PUSH
35365: LD_INT 2
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 0
35374: PUSH
35375: LD_INT 2
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 1
35384: NEG
35385: PUSH
35386: LD_INT 1
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 2
35395: NEG
35396: PUSH
35397: LD_INT 0
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 2
35406: NEG
35407: PUSH
35408: LD_INT 1
35410: NEG
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35430: LD_ADDR_VAR 0 52
35434: PUSH
35435: LD_INT 0
35437: PUSH
35438: LD_INT 0
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 0
35447: PUSH
35448: LD_INT 1
35450: NEG
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 1
35458: PUSH
35459: LD_INT 0
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 1
35468: PUSH
35469: LD_INT 1
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 0
35478: PUSH
35479: LD_INT 1
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 1
35488: NEG
35489: PUSH
35490: LD_INT 0
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 1
35499: NEG
35500: PUSH
35501: LD_INT 1
35503: NEG
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 1
35511: NEG
35512: PUSH
35513: LD_INT 2
35515: NEG
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 1
35523: NEG
35524: PUSH
35525: LD_INT 1
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 2
35534: NEG
35535: PUSH
35536: LD_INT 0
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 2
35545: NEG
35546: PUSH
35547: LD_INT 1
35549: NEG
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 2
35557: NEG
35558: PUSH
35559: LD_INT 2
35561: NEG
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35581: LD_ADDR_VAR 0 53
35585: PUSH
35586: LD_INT 0
35588: PUSH
35589: LD_INT 0
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 0
35598: PUSH
35599: LD_INT 1
35601: NEG
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 1
35609: PUSH
35610: LD_INT 0
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 1
35619: PUSH
35620: LD_INT 1
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 0
35629: PUSH
35630: LD_INT 1
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 1
35639: NEG
35640: PUSH
35641: LD_INT 0
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 1
35650: NEG
35651: PUSH
35652: LD_INT 1
35654: NEG
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 1
35662: NEG
35663: PUSH
35664: LD_INT 2
35666: NEG
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 0
35674: PUSH
35675: LD_INT 2
35677: NEG
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 1
35685: PUSH
35686: LD_INT 1
35688: NEG
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 2
35696: PUSH
35697: LD_INT 0
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 2
35706: PUSH
35707: LD_INT 1
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 2
35716: PUSH
35717: LD_INT 2
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 1
35726: PUSH
35727: LD_INT 2
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 0
35736: PUSH
35737: LD_INT 2
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 1
35746: NEG
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 2
35757: NEG
35758: PUSH
35759: LD_INT 0
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 2
35768: NEG
35769: PUSH
35770: LD_INT 1
35772: NEG
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 2
35780: NEG
35781: PUSH
35782: LD_INT 2
35784: NEG
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35811: LD_ADDR_VAR 0 54
35815: PUSH
35816: LD_INT 0
35818: PUSH
35819: LD_INT 0
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 0
35828: PUSH
35829: LD_INT 1
35831: NEG
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 1
35839: PUSH
35840: LD_INT 0
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 1
35849: PUSH
35850: LD_INT 1
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 0
35859: PUSH
35860: LD_INT 1
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 1
35869: NEG
35870: PUSH
35871: LD_INT 0
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 1
35880: NEG
35881: PUSH
35882: LD_INT 1
35884: NEG
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 1
35892: NEG
35893: PUSH
35894: LD_INT 2
35896: NEG
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 0
35904: PUSH
35905: LD_INT 2
35907: NEG
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 1
35915: PUSH
35916: LD_INT 1
35918: NEG
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 2
35926: PUSH
35927: LD_INT 0
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 2
35936: PUSH
35937: LD_INT 1
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 2
35946: PUSH
35947: LD_INT 2
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: PUSH
35954: LD_INT 1
35956: PUSH
35957: LD_INT 2
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 0
35966: PUSH
35967: LD_INT 2
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 1
35976: NEG
35977: PUSH
35978: LD_INT 1
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 2
35987: NEG
35988: PUSH
35989: LD_INT 0
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 2
35998: NEG
35999: PUSH
36000: LD_INT 1
36002: NEG
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 2
36010: NEG
36011: PUSH
36012: LD_INT 2
36014: NEG
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36041: LD_ADDR_VAR 0 55
36045: PUSH
36046: LD_INT 0
36048: PUSH
36049: LD_INT 0
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 0
36058: PUSH
36059: LD_INT 1
36061: NEG
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 1
36069: PUSH
36070: LD_INT 0
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PUSH
36077: LD_INT 1
36079: PUSH
36080: LD_INT 1
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 0
36089: PUSH
36090: LD_INT 1
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 1
36099: NEG
36100: PUSH
36101: LD_INT 0
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 1
36110: NEG
36111: PUSH
36112: LD_INT 1
36114: NEG
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 1
36122: NEG
36123: PUSH
36124: LD_INT 2
36126: NEG
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 0
36134: PUSH
36135: LD_INT 2
36137: NEG
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 1
36145: PUSH
36146: LD_INT 1
36148: NEG
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 2
36156: PUSH
36157: LD_INT 0
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 2
36166: PUSH
36167: LD_INT 1
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 2
36176: PUSH
36177: LD_INT 2
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 1
36186: PUSH
36187: LD_INT 2
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 0
36196: PUSH
36197: LD_INT 2
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 1
36206: NEG
36207: PUSH
36208: LD_INT 1
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 2
36217: NEG
36218: PUSH
36219: LD_INT 0
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 2
36228: NEG
36229: PUSH
36230: LD_INT 1
36232: NEG
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 2
36240: NEG
36241: PUSH
36242: LD_INT 2
36244: NEG
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36271: LD_ADDR_VAR 0 56
36275: PUSH
36276: LD_INT 0
36278: PUSH
36279: LD_INT 0
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 0
36288: PUSH
36289: LD_INT 1
36291: NEG
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 1
36299: PUSH
36300: LD_INT 0
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: LD_INT 1
36309: PUSH
36310: LD_INT 1
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 0
36319: PUSH
36320: LD_INT 1
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 1
36329: NEG
36330: PUSH
36331: LD_INT 0
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 1
36340: NEG
36341: PUSH
36342: LD_INT 1
36344: NEG
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 1
36352: NEG
36353: PUSH
36354: LD_INT 2
36356: NEG
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 0
36364: PUSH
36365: LD_INT 2
36367: NEG
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 1
36375: PUSH
36376: LD_INT 1
36378: NEG
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 2
36386: PUSH
36387: LD_INT 0
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 2
36396: PUSH
36397: LD_INT 1
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 2
36406: PUSH
36407: LD_INT 2
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 1
36416: PUSH
36417: LD_INT 2
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 0
36426: PUSH
36427: LD_INT 2
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 1
36436: NEG
36437: PUSH
36438: LD_INT 1
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 2
36447: NEG
36448: PUSH
36449: LD_INT 0
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 2
36458: NEG
36459: PUSH
36460: LD_INT 1
36462: NEG
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 2
36470: NEG
36471: PUSH
36472: LD_INT 2
36474: NEG
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36501: LD_ADDR_VAR 0 57
36505: PUSH
36506: LD_INT 0
36508: PUSH
36509: LD_INT 0
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 0
36518: PUSH
36519: LD_INT 1
36521: NEG
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 1
36529: PUSH
36530: LD_INT 0
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PUSH
36537: LD_INT 1
36539: PUSH
36540: LD_INT 1
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 0
36549: PUSH
36550: LD_INT 1
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 1
36559: NEG
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 1
36570: NEG
36571: PUSH
36572: LD_INT 1
36574: NEG
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 1
36582: NEG
36583: PUSH
36584: LD_INT 2
36586: NEG
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 0
36594: PUSH
36595: LD_INT 2
36597: NEG
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 1
36605: PUSH
36606: LD_INT 1
36608: NEG
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 2
36616: PUSH
36617: LD_INT 0
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 2
36626: PUSH
36627: LD_INT 1
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 2
36636: PUSH
36637: LD_INT 2
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 1
36646: PUSH
36647: LD_INT 2
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 0
36656: PUSH
36657: LD_INT 2
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 1
36666: NEG
36667: PUSH
36668: LD_INT 1
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 2
36677: NEG
36678: PUSH
36679: LD_INT 0
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PUSH
36686: LD_INT 2
36688: NEG
36689: PUSH
36690: LD_INT 1
36692: NEG
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 2
36700: NEG
36701: PUSH
36702: LD_INT 2
36704: NEG
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36731: LD_ADDR_VAR 0 58
36735: PUSH
36736: LD_INT 0
36738: PUSH
36739: LD_INT 0
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 0
36748: PUSH
36749: LD_INT 1
36751: NEG
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 1
36759: PUSH
36760: LD_INT 0
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: PUSH
36767: LD_INT 1
36769: PUSH
36770: LD_INT 1
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 0
36779: PUSH
36780: LD_INT 1
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 1
36789: NEG
36790: PUSH
36791: LD_INT 0
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 1
36800: NEG
36801: PUSH
36802: LD_INT 1
36804: NEG
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 1
36812: NEG
36813: PUSH
36814: LD_INT 2
36816: NEG
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 0
36824: PUSH
36825: LD_INT 2
36827: NEG
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 1
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 2
36846: PUSH
36847: LD_INT 0
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 2
36856: PUSH
36857: LD_INT 1
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 2
36866: PUSH
36867: LD_INT 2
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 1
36876: PUSH
36877: LD_INT 2
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 0
36886: PUSH
36887: LD_INT 2
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 1
36896: NEG
36897: PUSH
36898: LD_INT 1
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 2
36907: NEG
36908: PUSH
36909: LD_INT 0
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 2
36918: NEG
36919: PUSH
36920: LD_INT 1
36922: NEG
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 2
36930: NEG
36931: PUSH
36932: LD_INT 2
36934: NEG
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36961: LD_ADDR_VAR 0 59
36965: PUSH
36966: LD_INT 0
36968: PUSH
36969: LD_INT 0
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 0
36978: PUSH
36979: LD_INT 1
36981: NEG
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 1
36989: PUSH
36990: LD_INT 0
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 1
36999: PUSH
37000: LD_INT 1
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 0
37009: PUSH
37010: LD_INT 1
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 1
37019: NEG
37020: PUSH
37021: LD_INT 0
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 1
37030: NEG
37031: PUSH
37032: LD_INT 1
37034: NEG
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37049: LD_ADDR_VAR 0 60
37053: PUSH
37054: LD_INT 0
37056: PUSH
37057: LD_INT 0
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 0
37066: PUSH
37067: LD_INT 1
37069: NEG
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 1
37077: PUSH
37078: LD_INT 0
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 1
37087: PUSH
37088: LD_INT 1
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 0
37097: PUSH
37098: LD_INT 1
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 1
37107: NEG
37108: PUSH
37109: LD_INT 0
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 1
37118: NEG
37119: PUSH
37120: LD_INT 1
37122: NEG
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37137: LD_ADDR_VAR 0 61
37141: PUSH
37142: LD_INT 0
37144: PUSH
37145: LD_INT 0
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: LD_INT 1
37157: NEG
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 1
37165: PUSH
37166: LD_INT 0
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 1
37175: PUSH
37176: LD_INT 1
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 0
37185: PUSH
37186: LD_INT 1
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 1
37195: NEG
37196: PUSH
37197: LD_INT 0
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 1
37206: NEG
37207: PUSH
37208: LD_INT 1
37210: NEG
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37225: LD_ADDR_VAR 0 62
37229: PUSH
37230: LD_INT 0
37232: PUSH
37233: LD_INT 0
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 0
37242: PUSH
37243: LD_INT 1
37245: NEG
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 1
37253: PUSH
37254: LD_INT 0
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 1
37263: PUSH
37264: LD_INT 1
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 0
37273: PUSH
37274: LD_INT 1
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 1
37283: NEG
37284: PUSH
37285: LD_INT 0
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 1
37294: NEG
37295: PUSH
37296: LD_INT 1
37298: NEG
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37313: LD_ADDR_VAR 0 63
37317: PUSH
37318: LD_INT 0
37320: PUSH
37321: LD_INT 0
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 0
37330: PUSH
37331: LD_INT 1
37333: NEG
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 1
37341: PUSH
37342: LD_INT 0
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 1
37351: PUSH
37352: LD_INT 1
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 0
37361: PUSH
37362: LD_INT 1
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 1
37371: NEG
37372: PUSH
37373: LD_INT 0
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 1
37382: NEG
37383: PUSH
37384: LD_INT 1
37386: NEG
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37401: LD_ADDR_VAR 0 64
37405: PUSH
37406: LD_INT 0
37408: PUSH
37409: LD_INT 0
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 0
37418: PUSH
37419: LD_INT 1
37421: NEG
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 1
37429: PUSH
37430: LD_INT 0
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 1
37439: PUSH
37440: LD_INT 1
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 0
37449: PUSH
37450: LD_INT 1
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 1
37459: NEG
37460: PUSH
37461: LD_INT 0
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 1
37470: NEG
37471: PUSH
37472: LD_INT 1
37474: NEG
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: ST_TO_ADDR
// end ; 1 :
37489: GO 43386
37491: LD_INT 1
37493: DOUBLE
37494: EQUAL
37495: IFTRUE 37499
37497: GO 40122
37499: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37500: LD_ADDR_VAR 0 11
37504: PUSH
37505: LD_INT 1
37507: NEG
37508: PUSH
37509: LD_INT 3
37511: NEG
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 0
37519: PUSH
37520: LD_INT 3
37522: NEG
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 1
37530: PUSH
37531: LD_INT 2
37533: NEG
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: LIST
37543: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37544: LD_ADDR_VAR 0 12
37548: PUSH
37549: LD_INT 2
37551: PUSH
37552: LD_INT 1
37554: NEG
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 3
37562: PUSH
37563: LD_INT 0
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 3
37572: PUSH
37573: LD_INT 1
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: LIST
37584: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37585: LD_ADDR_VAR 0 13
37589: PUSH
37590: LD_INT 3
37592: PUSH
37593: LD_INT 2
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 3
37602: PUSH
37603: LD_INT 3
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 2
37612: PUSH
37613: LD_INT 3
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: LIST
37624: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37625: LD_ADDR_VAR 0 14
37629: PUSH
37630: LD_INT 1
37632: PUSH
37633: LD_INT 3
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 0
37642: PUSH
37643: LD_INT 3
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: LD_INT 1
37652: NEG
37653: PUSH
37654: LD_INT 2
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: LIST
37665: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37666: LD_ADDR_VAR 0 15
37670: PUSH
37671: LD_INT 2
37673: NEG
37674: PUSH
37675: LD_INT 1
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 3
37684: NEG
37685: PUSH
37686: LD_INT 0
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 3
37695: NEG
37696: PUSH
37697: LD_INT 1
37699: NEG
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: LIST
37709: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37710: LD_ADDR_VAR 0 16
37714: PUSH
37715: LD_INT 2
37717: NEG
37718: PUSH
37719: LD_INT 3
37721: NEG
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 3
37729: NEG
37730: PUSH
37731: LD_INT 2
37733: NEG
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 3
37741: NEG
37742: PUSH
37743: LD_INT 3
37745: NEG
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: LIST
37755: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37756: LD_ADDR_VAR 0 17
37760: PUSH
37761: LD_INT 1
37763: NEG
37764: PUSH
37765: LD_INT 3
37767: NEG
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 0
37775: PUSH
37776: LD_INT 3
37778: NEG
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 1
37786: PUSH
37787: LD_INT 2
37789: NEG
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: LIST
37799: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37800: LD_ADDR_VAR 0 18
37804: PUSH
37805: LD_INT 2
37807: PUSH
37808: LD_INT 1
37810: NEG
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 3
37818: PUSH
37819: LD_INT 0
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 3
37828: PUSH
37829: LD_INT 1
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: LIST
37840: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37841: LD_ADDR_VAR 0 19
37845: PUSH
37846: LD_INT 3
37848: PUSH
37849: LD_INT 2
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 3
37858: PUSH
37859: LD_INT 3
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 2
37868: PUSH
37869: LD_INT 3
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: LIST
37880: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37881: LD_ADDR_VAR 0 20
37885: PUSH
37886: LD_INT 1
37888: PUSH
37889: LD_INT 3
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 0
37898: PUSH
37899: LD_INT 3
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: LD_INT 1
37908: NEG
37909: PUSH
37910: LD_INT 2
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: LIST
37921: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37922: LD_ADDR_VAR 0 21
37926: PUSH
37927: LD_INT 2
37929: NEG
37930: PUSH
37931: LD_INT 1
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 3
37940: NEG
37941: PUSH
37942: LD_INT 0
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 3
37951: NEG
37952: PUSH
37953: LD_INT 1
37955: NEG
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: LIST
37965: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37966: LD_ADDR_VAR 0 22
37970: PUSH
37971: LD_INT 2
37973: NEG
37974: PUSH
37975: LD_INT 3
37977: NEG
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 3
37985: NEG
37986: PUSH
37987: LD_INT 2
37989: NEG
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 3
37997: NEG
37998: PUSH
37999: LD_INT 3
38001: NEG
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: LIST
38011: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
38012: LD_ADDR_VAR 0 23
38016: PUSH
38017: LD_INT 0
38019: PUSH
38020: LD_INT 3
38022: NEG
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 1
38030: NEG
38031: PUSH
38032: LD_INT 4
38034: NEG
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 1
38042: PUSH
38043: LD_INT 3
38045: NEG
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: LIST
38055: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
38056: LD_ADDR_VAR 0 24
38060: PUSH
38061: LD_INT 3
38063: PUSH
38064: LD_INT 0
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 3
38073: PUSH
38074: LD_INT 1
38076: NEG
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 4
38084: PUSH
38085: LD_INT 1
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: LIST
38096: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
38097: LD_ADDR_VAR 0 25
38101: PUSH
38102: LD_INT 3
38104: PUSH
38105: LD_INT 3
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 4
38114: PUSH
38115: LD_INT 3
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 3
38124: PUSH
38125: LD_INT 4
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: LIST
38136: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
38137: LD_ADDR_VAR 0 26
38141: PUSH
38142: LD_INT 0
38144: PUSH
38145: LD_INT 3
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: LD_INT 1
38154: PUSH
38155: LD_INT 4
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 1
38164: NEG
38165: PUSH
38166: LD_INT 3
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: LIST
38177: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
38178: LD_ADDR_VAR 0 27
38182: PUSH
38183: LD_INT 3
38185: NEG
38186: PUSH
38187: LD_INT 0
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 3
38196: NEG
38197: PUSH
38198: LD_INT 1
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 4
38207: NEG
38208: PUSH
38209: LD_INT 1
38211: NEG
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: LIST
38221: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
38222: LD_ADDR_VAR 0 28
38226: PUSH
38227: LD_INT 3
38229: NEG
38230: PUSH
38231: LD_INT 3
38233: NEG
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 3
38241: NEG
38242: PUSH
38243: LD_INT 4
38245: NEG
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 4
38253: NEG
38254: PUSH
38255: LD_INT 3
38257: NEG
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: LIST
38267: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
38268: LD_ADDR_VAR 0 29
38272: PUSH
38273: LD_INT 1
38275: NEG
38276: PUSH
38277: LD_INT 3
38279: NEG
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 0
38287: PUSH
38288: LD_INT 3
38290: NEG
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 1
38298: PUSH
38299: LD_INT 2
38301: NEG
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 1
38309: NEG
38310: PUSH
38311: LD_INT 4
38313: NEG
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 0
38321: PUSH
38322: LD_INT 4
38324: NEG
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 1
38332: PUSH
38333: LD_INT 3
38335: NEG
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 1
38343: NEG
38344: PUSH
38345: LD_INT 5
38347: NEG
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 0
38355: PUSH
38356: LD_INT 5
38358: NEG
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 1
38366: PUSH
38367: LD_INT 4
38369: NEG
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 1
38377: NEG
38378: PUSH
38379: LD_INT 6
38381: NEG
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 0
38389: PUSH
38390: LD_INT 6
38392: NEG
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 1
38400: PUSH
38401: LD_INT 5
38403: NEG
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
38423: LD_ADDR_VAR 0 30
38427: PUSH
38428: LD_INT 2
38430: PUSH
38431: LD_INT 1
38433: NEG
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 3
38441: PUSH
38442: LD_INT 0
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 3
38451: PUSH
38452: LD_INT 1
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 3
38461: PUSH
38462: LD_INT 1
38464: NEG
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 4
38472: PUSH
38473: LD_INT 0
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 4
38482: PUSH
38483: LD_INT 1
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 4
38492: PUSH
38493: LD_INT 1
38495: NEG
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 5
38503: PUSH
38504: LD_INT 0
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 5
38513: PUSH
38514: LD_INT 1
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 5
38523: PUSH
38524: LD_INT 1
38526: NEG
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 6
38534: PUSH
38535: LD_INT 0
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 6
38544: PUSH
38545: LD_INT 1
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
38566: LD_ADDR_VAR 0 31
38570: PUSH
38571: LD_INT 3
38573: PUSH
38574: LD_INT 2
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 3
38583: PUSH
38584: LD_INT 3
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 2
38593: PUSH
38594: LD_INT 3
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 4
38603: PUSH
38604: LD_INT 3
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 4
38613: PUSH
38614: LD_INT 4
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 3
38623: PUSH
38624: LD_INT 4
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 5
38633: PUSH
38634: LD_INT 4
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 5
38643: PUSH
38644: LD_INT 5
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: LD_INT 4
38653: PUSH
38654: LD_INT 5
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 6
38663: PUSH
38664: LD_INT 5
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 6
38673: PUSH
38674: LD_INT 6
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 5
38683: PUSH
38684: LD_INT 6
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38705: LD_ADDR_VAR 0 32
38709: PUSH
38710: LD_INT 1
38712: PUSH
38713: LD_INT 3
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 0
38722: PUSH
38723: LD_INT 3
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 1
38732: NEG
38733: PUSH
38734: LD_INT 2
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 1
38743: PUSH
38744: LD_INT 4
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 0
38753: PUSH
38754: LD_INT 4
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 1
38763: NEG
38764: PUSH
38765: LD_INT 3
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 1
38774: PUSH
38775: LD_INT 5
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 0
38784: PUSH
38785: LD_INT 5
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 1
38794: NEG
38795: PUSH
38796: LD_INT 4
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 1
38805: PUSH
38806: LD_INT 6
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 0
38815: PUSH
38816: LD_INT 6
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 1
38825: NEG
38826: PUSH
38827: LD_INT 5
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
38848: LD_ADDR_VAR 0 33
38852: PUSH
38853: LD_INT 2
38855: NEG
38856: PUSH
38857: LD_INT 1
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 3
38866: NEG
38867: PUSH
38868: LD_INT 0
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 3
38877: NEG
38878: PUSH
38879: LD_INT 1
38881: NEG
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 3
38889: NEG
38890: PUSH
38891: LD_INT 1
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 4
38900: NEG
38901: PUSH
38902: LD_INT 0
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 4
38911: NEG
38912: PUSH
38913: LD_INT 1
38915: NEG
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 4
38923: NEG
38924: PUSH
38925: LD_INT 1
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 5
38934: NEG
38935: PUSH
38936: LD_INT 0
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 5
38945: NEG
38946: PUSH
38947: LD_INT 1
38949: NEG
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 5
38957: NEG
38958: PUSH
38959: LD_INT 1
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 6
38968: NEG
38969: PUSH
38970: LD_INT 0
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 6
38979: NEG
38980: PUSH
38981: LD_INT 1
38983: NEG
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
39003: LD_ADDR_VAR 0 34
39007: PUSH
39008: LD_INT 2
39010: NEG
39011: PUSH
39012: LD_INT 3
39014: NEG
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 3
39022: NEG
39023: PUSH
39024: LD_INT 2
39026: NEG
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 3
39034: NEG
39035: PUSH
39036: LD_INT 3
39038: NEG
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 3
39046: NEG
39047: PUSH
39048: LD_INT 4
39050: NEG
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 4
39058: NEG
39059: PUSH
39060: LD_INT 3
39062: NEG
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 4
39070: NEG
39071: PUSH
39072: LD_INT 4
39074: NEG
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 4
39082: NEG
39083: PUSH
39084: LD_INT 5
39086: NEG
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 5
39094: NEG
39095: PUSH
39096: LD_INT 4
39098: NEG
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 5
39106: NEG
39107: PUSH
39108: LD_INT 5
39110: NEG
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 5
39118: NEG
39119: PUSH
39120: LD_INT 6
39122: NEG
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 6
39130: NEG
39131: PUSH
39132: LD_INT 5
39134: NEG
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 6
39142: NEG
39143: PUSH
39144: LD_INT 6
39146: NEG
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
39166: LD_ADDR_VAR 0 41
39170: PUSH
39171: LD_INT 0
39173: PUSH
39174: LD_INT 2
39176: NEG
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 1
39184: NEG
39185: PUSH
39186: LD_INT 3
39188: NEG
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 1
39196: PUSH
39197: LD_INT 2
39199: NEG
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: LIST
39209: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
39210: LD_ADDR_VAR 0 42
39214: PUSH
39215: LD_INT 2
39217: PUSH
39218: LD_INT 0
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 2
39227: PUSH
39228: LD_INT 1
39230: NEG
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 3
39238: PUSH
39239: LD_INT 1
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: LIST
39250: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
39251: LD_ADDR_VAR 0 43
39255: PUSH
39256: LD_INT 2
39258: PUSH
39259: LD_INT 2
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 3
39268: PUSH
39269: LD_INT 2
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 2
39278: PUSH
39279: LD_INT 3
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: LIST
39290: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
39291: LD_ADDR_VAR 0 44
39295: PUSH
39296: LD_INT 0
39298: PUSH
39299: LD_INT 2
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 1
39308: PUSH
39309: LD_INT 3
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 1
39318: NEG
39319: PUSH
39320: LD_INT 2
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: LIST
39331: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39332: LD_ADDR_VAR 0 45
39336: PUSH
39337: LD_INT 2
39339: NEG
39340: PUSH
39341: LD_INT 0
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 2
39350: NEG
39351: PUSH
39352: LD_INT 1
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 3
39361: NEG
39362: PUSH
39363: LD_INT 1
39365: NEG
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: LIST
39375: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
39376: LD_ADDR_VAR 0 46
39380: PUSH
39381: LD_INT 2
39383: NEG
39384: PUSH
39385: LD_INT 2
39387: NEG
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 2
39395: NEG
39396: PUSH
39397: LD_INT 3
39399: NEG
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 3
39407: NEG
39408: PUSH
39409: LD_INT 2
39411: NEG
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: LIST
39421: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
39422: LD_ADDR_VAR 0 47
39426: PUSH
39427: LD_INT 2
39429: NEG
39430: PUSH
39431: LD_INT 3
39433: NEG
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 1
39441: NEG
39442: PUSH
39443: LD_INT 3
39445: NEG
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39455: LD_ADDR_VAR 0 48
39459: PUSH
39460: LD_INT 1
39462: PUSH
39463: LD_INT 2
39465: NEG
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 2
39473: PUSH
39474: LD_INT 1
39476: NEG
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
39486: LD_ADDR_VAR 0 49
39490: PUSH
39491: LD_INT 3
39493: PUSH
39494: LD_INT 1
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 3
39503: PUSH
39504: LD_INT 2
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
39515: LD_ADDR_VAR 0 50
39519: PUSH
39520: LD_INT 2
39522: PUSH
39523: LD_INT 3
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 1
39532: PUSH
39533: LD_INT 3
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39544: LD_ADDR_VAR 0 51
39548: PUSH
39549: LD_INT 1
39551: NEG
39552: PUSH
39553: LD_INT 2
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 2
39562: NEG
39563: PUSH
39564: LD_INT 1
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39575: LD_ADDR_VAR 0 52
39579: PUSH
39580: LD_INT 3
39582: NEG
39583: PUSH
39584: LD_INT 1
39586: NEG
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 3
39594: NEG
39595: PUSH
39596: LD_INT 2
39598: NEG
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39608: LD_ADDR_VAR 0 53
39612: PUSH
39613: LD_INT 1
39615: NEG
39616: PUSH
39617: LD_INT 3
39619: NEG
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 0
39627: PUSH
39628: LD_INT 3
39630: NEG
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 1
39638: PUSH
39639: LD_INT 2
39641: NEG
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: LIST
39651: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39652: LD_ADDR_VAR 0 54
39656: PUSH
39657: LD_INT 2
39659: PUSH
39660: LD_INT 1
39662: NEG
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 3
39670: PUSH
39671: LD_INT 0
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 3
39680: PUSH
39681: LD_INT 1
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: LIST
39692: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39693: LD_ADDR_VAR 0 55
39697: PUSH
39698: LD_INT 3
39700: PUSH
39701: LD_INT 2
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 3
39710: PUSH
39711: LD_INT 3
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 2
39720: PUSH
39721: LD_INT 3
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: LIST
39732: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39733: LD_ADDR_VAR 0 56
39737: PUSH
39738: LD_INT 1
39740: PUSH
39741: LD_INT 3
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 0
39750: PUSH
39751: LD_INT 3
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 1
39760: NEG
39761: PUSH
39762: LD_INT 2
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: LIST
39773: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39774: LD_ADDR_VAR 0 57
39778: PUSH
39779: LD_INT 2
39781: NEG
39782: PUSH
39783: LD_INT 1
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 3
39792: NEG
39793: PUSH
39794: LD_INT 0
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 3
39803: NEG
39804: PUSH
39805: LD_INT 1
39807: NEG
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: LIST
39817: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39818: LD_ADDR_VAR 0 58
39822: PUSH
39823: LD_INT 2
39825: NEG
39826: PUSH
39827: LD_INT 3
39829: NEG
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 3
39837: NEG
39838: PUSH
39839: LD_INT 2
39841: NEG
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 3
39849: NEG
39850: PUSH
39851: LD_INT 3
39853: NEG
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: LIST
39863: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
39864: LD_ADDR_VAR 0 59
39868: PUSH
39869: LD_INT 1
39871: NEG
39872: PUSH
39873: LD_INT 2
39875: NEG
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 0
39883: PUSH
39884: LD_INT 2
39886: NEG
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 1
39894: PUSH
39895: LD_INT 1
39897: NEG
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: LIST
39907: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39908: LD_ADDR_VAR 0 60
39912: PUSH
39913: LD_INT 1
39915: PUSH
39916: LD_INT 1
39918: NEG
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 2
39926: PUSH
39927: LD_INT 0
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 2
39936: PUSH
39937: LD_INT 1
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: LIST
39948: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39949: LD_ADDR_VAR 0 61
39953: PUSH
39954: LD_INT 2
39956: PUSH
39957: LD_INT 1
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 2
39966: PUSH
39967: LD_INT 2
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 1
39976: PUSH
39977: LD_INT 2
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: LIST
39988: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39989: LD_ADDR_VAR 0 62
39993: PUSH
39994: LD_INT 1
39996: PUSH
39997: LD_INT 2
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 0
40006: PUSH
40007: LD_INT 2
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 1
40016: NEG
40017: PUSH
40018: LD_INT 1
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: LIST
40029: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40030: LD_ADDR_VAR 0 63
40034: PUSH
40035: LD_INT 1
40037: NEG
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 2
40048: NEG
40049: PUSH
40050: LD_INT 0
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 2
40059: NEG
40060: PUSH
40061: LD_INT 1
40063: NEG
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: LIST
40073: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40074: LD_ADDR_VAR 0 64
40078: PUSH
40079: LD_INT 1
40081: NEG
40082: PUSH
40083: LD_INT 2
40085: NEG
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 2
40093: NEG
40094: PUSH
40095: LD_INT 1
40097: NEG
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 2
40105: NEG
40106: PUSH
40107: LD_INT 2
40109: NEG
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: LIST
40119: ST_TO_ADDR
// end ; 2 :
40120: GO 43386
40122: LD_INT 2
40124: DOUBLE
40125: EQUAL
40126: IFTRUE 40130
40128: GO 43385
40130: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
40131: LD_ADDR_VAR 0 29
40135: PUSH
40136: LD_INT 4
40138: PUSH
40139: LD_INT 0
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 4
40148: PUSH
40149: LD_INT 1
40151: NEG
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 5
40159: PUSH
40160: LD_INT 0
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 5
40169: PUSH
40170: LD_INT 1
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 4
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 3
40189: PUSH
40190: LD_INT 0
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 3
40199: PUSH
40200: LD_INT 1
40202: NEG
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 3
40210: PUSH
40211: LD_INT 2
40213: NEG
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 5
40221: PUSH
40222: LD_INT 2
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 3
40231: PUSH
40232: LD_INT 3
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 3
40241: PUSH
40242: LD_INT 2
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 4
40251: PUSH
40252: LD_INT 3
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 4
40261: PUSH
40262: LD_INT 4
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 3
40271: PUSH
40272: LD_INT 4
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 2
40281: PUSH
40282: LD_INT 3
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 2
40291: PUSH
40292: LD_INT 2
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 4
40301: PUSH
40302: LD_INT 2
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 2
40311: PUSH
40312: LD_INT 4
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 0
40321: PUSH
40322: LD_INT 4
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 0
40331: PUSH
40332: LD_INT 3
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 1
40341: PUSH
40342: LD_INT 4
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 1
40351: PUSH
40352: LD_INT 5
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 0
40361: PUSH
40362: LD_INT 5
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: LD_INT 4
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 1
40382: NEG
40383: PUSH
40384: LD_INT 3
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 2
40393: PUSH
40394: LD_INT 5
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 2
40403: NEG
40404: PUSH
40405: LD_INT 3
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 3
40414: NEG
40415: PUSH
40416: LD_INT 0
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 3
40425: NEG
40426: PUSH
40427: LD_INT 1
40429: NEG
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 2
40437: NEG
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 2
40448: NEG
40449: PUSH
40450: LD_INT 1
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 3
40459: NEG
40460: PUSH
40461: LD_INT 1
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 4
40470: NEG
40471: PUSH
40472: LD_INT 0
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 4
40481: NEG
40482: PUSH
40483: LD_INT 1
40485: NEG
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 4
40493: NEG
40494: PUSH
40495: LD_INT 2
40497: NEG
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 2
40505: NEG
40506: PUSH
40507: LD_INT 2
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 4
40516: NEG
40517: PUSH
40518: LD_INT 4
40520: NEG
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 4
40528: NEG
40529: PUSH
40530: LD_INT 5
40532: NEG
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 3
40540: NEG
40541: PUSH
40542: LD_INT 4
40544: NEG
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 3
40552: NEG
40553: PUSH
40554: LD_INT 3
40556: NEG
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 4
40564: NEG
40565: PUSH
40566: LD_INT 3
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 5
40576: NEG
40577: PUSH
40578: LD_INT 4
40580: NEG
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 5
40588: NEG
40589: PUSH
40590: LD_INT 5
40592: NEG
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 3
40600: NEG
40601: PUSH
40602: LD_INT 5
40604: NEG
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 5
40612: NEG
40613: PUSH
40614: LD_INT 3
40616: NEG
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
40669: LD_ADDR_VAR 0 30
40673: PUSH
40674: LD_INT 4
40676: PUSH
40677: LD_INT 4
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 4
40686: PUSH
40687: LD_INT 3
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 5
40696: PUSH
40697: LD_INT 4
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 5
40706: PUSH
40707: LD_INT 5
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 4
40716: PUSH
40717: LD_INT 5
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 3
40726: PUSH
40727: LD_INT 4
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 3
40736: PUSH
40737: LD_INT 3
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 5
40746: PUSH
40747: LD_INT 3
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 3
40756: PUSH
40757: LD_INT 5
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 0
40766: PUSH
40767: LD_INT 3
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 0
40776: PUSH
40777: LD_INT 2
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 1
40786: PUSH
40787: LD_INT 3
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 1
40796: PUSH
40797: LD_INT 4
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: LD_INT 4
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 1
40816: NEG
40817: PUSH
40818: LD_INT 3
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 1
40827: NEG
40828: PUSH
40829: LD_INT 2
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 2
40838: PUSH
40839: LD_INT 4
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 2
40848: NEG
40849: PUSH
40850: LD_INT 2
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 4
40859: NEG
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 4
40870: NEG
40871: PUSH
40872: LD_INT 1
40874: NEG
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 3
40882: NEG
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 3
40893: NEG
40894: PUSH
40895: LD_INT 1
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 4
40904: NEG
40905: PUSH
40906: LD_INT 1
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 5
40915: NEG
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 5
40926: NEG
40927: PUSH
40928: LD_INT 1
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 5
40938: NEG
40939: PUSH
40940: LD_INT 2
40942: NEG
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 3
40950: NEG
40951: PUSH
40952: LD_INT 2
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 3
40961: NEG
40962: PUSH
40963: LD_INT 3
40965: NEG
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 3
40973: NEG
40974: PUSH
40975: LD_INT 4
40977: NEG
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 2
40985: NEG
40986: PUSH
40987: LD_INT 3
40989: NEG
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 2
40997: NEG
40998: PUSH
40999: LD_INT 2
41001: NEG
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 3
41009: NEG
41010: PUSH
41011: LD_INT 2
41013: NEG
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 4
41021: NEG
41022: PUSH
41023: LD_INT 3
41025: NEG
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 4
41033: NEG
41034: PUSH
41035: LD_INT 4
41037: NEG
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 2
41045: NEG
41046: PUSH
41047: LD_INT 4
41049: NEG
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 4
41057: NEG
41058: PUSH
41059: LD_INT 2
41061: NEG
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 0
41069: PUSH
41070: LD_INT 4
41072: NEG
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: LD_INT 5
41083: NEG
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 1
41091: PUSH
41092: LD_INT 4
41094: NEG
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 1
41102: PUSH
41103: LD_INT 3
41105: NEG
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 0
41113: PUSH
41114: LD_INT 3
41116: NEG
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 1
41124: NEG
41125: PUSH
41126: LD_INT 4
41128: NEG
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 1
41136: NEG
41137: PUSH
41138: LD_INT 5
41140: NEG
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 2
41148: PUSH
41149: LD_INT 3
41151: NEG
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 2
41159: NEG
41160: PUSH
41161: LD_INT 5
41163: NEG
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
41216: LD_ADDR_VAR 0 31
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: LD_INT 4
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 0
41233: PUSH
41234: LD_INT 3
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 1
41243: PUSH
41244: LD_INT 4
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 1
41253: PUSH
41254: LD_INT 5
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 0
41263: PUSH
41264: LD_INT 5
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 1
41273: NEG
41274: PUSH
41275: LD_INT 4
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 1
41284: NEG
41285: PUSH
41286: LD_INT 3
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 2
41295: PUSH
41296: LD_INT 5
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 2
41305: NEG
41306: PUSH
41307: LD_INT 3
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 3
41316: NEG
41317: PUSH
41318: LD_INT 0
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 3
41327: NEG
41328: PUSH
41329: LD_INT 1
41331: NEG
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 2
41339: NEG
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 2
41350: NEG
41351: PUSH
41352: LD_INT 1
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 3
41361: NEG
41362: PUSH
41363: LD_INT 1
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 4
41372: NEG
41373: PUSH
41374: LD_INT 0
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 4
41383: NEG
41384: PUSH
41385: LD_INT 1
41387: NEG
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 4
41395: NEG
41396: PUSH
41397: LD_INT 2
41399: NEG
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 2
41407: NEG
41408: PUSH
41409: LD_INT 2
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 4
41418: NEG
41419: PUSH
41420: LD_INT 4
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 4
41430: NEG
41431: PUSH
41432: LD_INT 5
41434: NEG
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 3
41442: NEG
41443: PUSH
41444: LD_INT 4
41446: NEG
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 3
41454: NEG
41455: PUSH
41456: LD_INT 3
41458: NEG
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 4
41466: NEG
41467: PUSH
41468: LD_INT 3
41470: NEG
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 5
41478: NEG
41479: PUSH
41480: LD_INT 4
41482: NEG
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 5
41490: NEG
41491: PUSH
41492: LD_INT 5
41494: NEG
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 3
41502: NEG
41503: PUSH
41504: LD_INT 5
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 5
41514: NEG
41515: PUSH
41516: LD_INT 3
41518: NEG
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 0
41526: PUSH
41527: LD_INT 3
41529: NEG
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 0
41537: PUSH
41538: LD_INT 4
41540: NEG
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 1
41548: PUSH
41549: LD_INT 3
41551: NEG
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 1
41559: PUSH
41560: LD_INT 2
41562: NEG
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 0
41570: PUSH
41571: LD_INT 2
41573: NEG
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 1
41581: NEG
41582: PUSH
41583: LD_INT 3
41585: NEG
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: NEG
41594: PUSH
41595: LD_INT 4
41597: NEG
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 2
41605: PUSH
41606: LD_INT 2
41608: NEG
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 2
41616: NEG
41617: PUSH
41618: LD_INT 4
41620: NEG
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 4
41628: PUSH
41629: LD_INT 0
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 4
41638: PUSH
41639: LD_INT 1
41641: NEG
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 5
41649: PUSH
41650: LD_INT 0
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 5
41659: PUSH
41660: LD_INT 1
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 4
41669: PUSH
41670: LD_INT 1
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 3
41679: PUSH
41680: LD_INT 0
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 3
41689: PUSH
41690: LD_INT 1
41692: NEG
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 3
41700: PUSH
41701: LD_INT 2
41703: NEG
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 5
41711: PUSH
41712: LD_INT 2
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
41766: LD_ADDR_VAR 0 32
41770: PUSH
41771: LD_INT 4
41773: NEG
41774: PUSH
41775: LD_INT 0
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 4
41784: NEG
41785: PUSH
41786: LD_INT 1
41788: NEG
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 3
41796: NEG
41797: PUSH
41798: LD_INT 0
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 3
41807: NEG
41808: PUSH
41809: LD_INT 1
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 4
41818: NEG
41819: PUSH
41820: LD_INT 1
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 5
41829: NEG
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 5
41840: NEG
41841: PUSH
41842: LD_INT 1
41844: NEG
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 5
41852: NEG
41853: PUSH
41854: LD_INT 2
41856: NEG
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 3
41864: NEG
41865: PUSH
41866: LD_INT 2
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 3
41875: NEG
41876: PUSH
41877: LD_INT 3
41879: NEG
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 3
41887: NEG
41888: PUSH
41889: LD_INT 4
41891: NEG
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 2
41899: NEG
41900: PUSH
41901: LD_INT 3
41903: NEG
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 2
41911: NEG
41912: PUSH
41913: LD_INT 2
41915: NEG
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 3
41923: NEG
41924: PUSH
41925: LD_INT 2
41927: NEG
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 4
41935: NEG
41936: PUSH
41937: LD_INT 3
41939: NEG
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 4
41947: NEG
41948: PUSH
41949: LD_INT 4
41951: NEG
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 2
41959: NEG
41960: PUSH
41961: LD_INT 4
41963: NEG
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 4
41971: NEG
41972: PUSH
41973: LD_INT 2
41975: NEG
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 0
41983: PUSH
41984: LD_INT 4
41986: NEG
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 0
41994: PUSH
41995: LD_INT 5
41997: NEG
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 1
42005: PUSH
42006: LD_INT 4
42008: NEG
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 1
42016: PUSH
42017: LD_INT 3
42019: NEG
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: LD_INT 3
42030: NEG
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 1
42038: NEG
42039: PUSH
42040: LD_INT 4
42042: NEG
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 1
42050: NEG
42051: PUSH
42052: LD_INT 5
42054: NEG
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 2
42062: PUSH
42063: LD_INT 3
42065: NEG
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 2
42073: NEG
42074: PUSH
42075: LD_INT 5
42077: NEG
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 3
42085: PUSH
42086: LD_INT 0
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 3
42095: PUSH
42096: LD_INT 1
42098: NEG
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 4
42106: PUSH
42107: LD_INT 0
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 4
42116: PUSH
42117: LD_INT 1
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 3
42126: PUSH
42127: LD_INT 1
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 2
42136: PUSH
42137: LD_INT 0
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 2
42146: PUSH
42147: LD_INT 1
42149: NEG
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 2
42157: PUSH
42158: LD_INT 2
42160: NEG
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 4
42168: PUSH
42169: LD_INT 2
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 4
42178: PUSH
42179: LD_INT 4
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 4
42188: PUSH
42189: LD_INT 3
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 5
42198: PUSH
42199: LD_INT 4
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 5
42208: PUSH
42209: LD_INT 5
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 4
42218: PUSH
42219: LD_INT 5
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 3
42228: PUSH
42229: LD_INT 4
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 3
42238: PUSH
42239: LD_INT 3
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 5
42248: PUSH
42249: LD_INT 3
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 3
42258: PUSH
42259: LD_INT 5
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
42313: LD_ADDR_VAR 0 33
42317: PUSH
42318: LD_INT 4
42320: NEG
42321: PUSH
42322: LD_INT 4
42324: NEG
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 4
42332: NEG
42333: PUSH
42334: LD_INT 5
42336: NEG
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 3
42344: NEG
42345: PUSH
42346: LD_INT 4
42348: NEG
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 3
42356: NEG
42357: PUSH
42358: LD_INT 3
42360: NEG
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 4
42368: NEG
42369: PUSH
42370: LD_INT 3
42372: NEG
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 5
42380: NEG
42381: PUSH
42382: LD_INT 4
42384: NEG
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 5
42392: NEG
42393: PUSH
42394: LD_INT 5
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 3
42404: NEG
42405: PUSH
42406: LD_INT 5
42408: NEG
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 5
42416: NEG
42417: PUSH
42418: LD_INT 3
42420: NEG
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: LD_INT 3
42431: NEG
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 0
42439: PUSH
42440: LD_INT 4
42442: NEG
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 1
42450: PUSH
42451: LD_INT 3
42453: NEG
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 1
42461: PUSH
42462: LD_INT 2
42464: NEG
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 0
42472: PUSH
42473: LD_INT 2
42475: NEG
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 1
42483: NEG
42484: PUSH
42485: LD_INT 3
42487: NEG
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 1
42495: NEG
42496: PUSH
42497: LD_INT 4
42499: NEG
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 2
42507: PUSH
42508: LD_INT 2
42510: NEG
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 2
42518: NEG
42519: PUSH
42520: LD_INT 4
42522: NEG
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 4
42530: PUSH
42531: LD_INT 0
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 4
42540: PUSH
42541: LD_INT 1
42543: NEG
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 5
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 5
42561: PUSH
42562: LD_INT 1
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 4
42571: PUSH
42572: LD_INT 1
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 3
42581: PUSH
42582: LD_INT 0
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 3
42591: PUSH
42592: LD_INT 1
42594: NEG
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 3
42602: PUSH
42603: LD_INT 2
42605: NEG
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 5
42613: PUSH
42614: LD_INT 2
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 3
42623: PUSH
42624: LD_INT 3
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 3
42633: PUSH
42634: LD_INT 2
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 4
42643: PUSH
42644: LD_INT 3
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 4
42653: PUSH
42654: LD_INT 4
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 3
42663: PUSH
42664: LD_INT 4
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 2
42673: PUSH
42674: LD_INT 3
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 2
42683: PUSH
42684: LD_INT 2
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 4
42693: PUSH
42694: LD_INT 2
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 2
42703: PUSH
42704: LD_INT 4
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: LD_INT 4
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 0
42723: PUSH
42724: LD_INT 3
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 1
42733: PUSH
42734: LD_INT 4
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 1
42743: PUSH
42744: LD_INT 5
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: LD_INT 5
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: LD_INT 4
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 1
42774: NEG
42775: PUSH
42776: LD_INT 3
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 2
42785: PUSH
42786: LD_INT 5
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 2
42795: NEG
42796: PUSH
42797: LD_INT 3
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
42851: LD_ADDR_VAR 0 34
42855: PUSH
42856: LD_INT 0
42858: PUSH
42859: LD_INT 4
42861: NEG
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 0
42869: PUSH
42870: LD_INT 5
42872: NEG
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 1
42880: PUSH
42881: LD_INT 4
42883: NEG
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 1
42891: PUSH
42892: LD_INT 3
42894: NEG
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: LD_INT 3
42905: NEG
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 1
42913: NEG
42914: PUSH
42915: LD_INT 4
42917: NEG
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 1
42925: NEG
42926: PUSH
42927: LD_INT 5
42929: NEG
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 2
42937: PUSH
42938: LD_INT 3
42940: NEG
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 2
42948: NEG
42949: PUSH
42950: LD_INT 5
42952: NEG
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 3
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 3
42970: PUSH
42971: LD_INT 1
42973: NEG
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 4
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 4
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 3
43001: PUSH
43002: LD_INT 1
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 2
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 2
43021: PUSH
43022: LD_INT 1
43024: NEG
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 2
43032: PUSH
43033: LD_INT 2
43035: NEG
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 4
43043: PUSH
43044: LD_INT 2
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 4
43053: PUSH
43054: LD_INT 4
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 4
43063: PUSH
43064: LD_INT 3
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 5
43073: PUSH
43074: LD_INT 4
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 5
43083: PUSH
43084: LD_INT 5
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 4
43093: PUSH
43094: LD_INT 5
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 3
43103: PUSH
43104: LD_INT 4
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 3
43113: PUSH
43114: LD_INT 3
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 5
43123: PUSH
43124: LD_INT 3
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 3
43133: PUSH
43134: LD_INT 5
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 0
43143: PUSH
43144: LD_INT 3
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 0
43153: PUSH
43154: LD_INT 2
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 1
43163: PUSH
43164: LD_INT 3
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 1
43173: PUSH
43174: LD_INT 4
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: LD_INT 4
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 1
43193: NEG
43194: PUSH
43195: LD_INT 3
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 1
43204: NEG
43205: PUSH
43206: LD_INT 2
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 2
43215: PUSH
43216: LD_INT 4
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 2
43225: NEG
43226: PUSH
43227: LD_INT 2
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 4
43236: NEG
43237: PUSH
43238: LD_INT 0
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 4
43247: NEG
43248: PUSH
43249: LD_INT 1
43251: NEG
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 3
43259: NEG
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 3
43270: NEG
43271: PUSH
43272: LD_INT 1
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 4
43281: NEG
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 5
43292: NEG
43293: PUSH
43294: LD_INT 0
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 5
43303: NEG
43304: PUSH
43305: LD_INT 1
43307: NEG
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 5
43315: NEG
43316: PUSH
43317: LD_INT 2
43319: NEG
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 3
43327: NEG
43328: PUSH
43329: LD_INT 2
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: ST_TO_ADDR
// end ; end ;
43383: GO 43386
43385: POP
// case btype of b_depot , b_warehouse :
43386: LD_VAR 0 1
43390: PUSH
43391: LD_INT 0
43393: DOUBLE
43394: EQUAL
43395: IFTRUE 43405
43397: LD_INT 1
43399: DOUBLE
43400: EQUAL
43401: IFTRUE 43405
43403: GO 43606
43405: POP
// case nation of nation_american :
43406: LD_VAR 0 5
43410: PUSH
43411: LD_INT 1
43413: DOUBLE
43414: EQUAL
43415: IFTRUE 43419
43417: GO 43475
43419: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
43420: LD_ADDR_VAR 0 9
43424: PUSH
43425: LD_VAR 0 11
43429: PUSH
43430: LD_VAR 0 12
43434: PUSH
43435: LD_VAR 0 13
43439: PUSH
43440: LD_VAR 0 14
43444: PUSH
43445: LD_VAR 0 15
43449: PUSH
43450: LD_VAR 0 16
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: PUSH
43463: LD_VAR 0 4
43467: PUSH
43468: LD_INT 1
43470: PLUS
43471: ARRAY
43472: ST_TO_ADDR
43473: GO 43604
43475: LD_INT 2
43477: DOUBLE
43478: EQUAL
43479: IFTRUE 43483
43481: GO 43539
43483: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
43484: LD_ADDR_VAR 0 9
43488: PUSH
43489: LD_VAR 0 17
43493: PUSH
43494: LD_VAR 0 18
43498: PUSH
43499: LD_VAR 0 19
43503: PUSH
43504: LD_VAR 0 20
43508: PUSH
43509: LD_VAR 0 21
43513: PUSH
43514: LD_VAR 0 22
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: PUSH
43527: LD_VAR 0 4
43531: PUSH
43532: LD_INT 1
43534: PLUS
43535: ARRAY
43536: ST_TO_ADDR
43537: GO 43604
43539: LD_INT 3
43541: DOUBLE
43542: EQUAL
43543: IFTRUE 43547
43545: GO 43603
43547: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
43548: LD_ADDR_VAR 0 9
43552: PUSH
43553: LD_VAR 0 23
43557: PUSH
43558: LD_VAR 0 24
43562: PUSH
43563: LD_VAR 0 25
43567: PUSH
43568: LD_VAR 0 26
43572: PUSH
43573: LD_VAR 0 27
43577: PUSH
43578: LD_VAR 0 28
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: PUSH
43591: LD_VAR 0 4
43595: PUSH
43596: LD_INT 1
43598: PLUS
43599: ARRAY
43600: ST_TO_ADDR
43601: GO 43604
43603: POP
43604: GO 44159
43606: LD_INT 2
43608: DOUBLE
43609: EQUAL
43610: IFTRUE 43620
43612: LD_INT 3
43614: DOUBLE
43615: EQUAL
43616: IFTRUE 43620
43618: GO 43676
43620: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
43621: LD_ADDR_VAR 0 9
43625: PUSH
43626: LD_VAR 0 29
43630: PUSH
43631: LD_VAR 0 30
43635: PUSH
43636: LD_VAR 0 31
43640: PUSH
43641: LD_VAR 0 32
43645: PUSH
43646: LD_VAR 0 33
43650: PUSH
43651: LD_VAR 0 34
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: PUSH
43664: LD_VAR 0 4
43668: PUSH
43669: LD_INT 1
43671: PLUS
43672: ARRAY
43673: ST_TO_ADDR
43674: GO 44159
43676: LD_INT 16
43678: DOUBLE
43679: EQUAL
43680: IFTRUE 43738
43682: LD_INT 17
43684: DOUBLE
43685: EQUAL
43686: IFTRUE 43738
43688: LD_INT 18
43690: DOUBLE
43691: EQUAL
43692: IFTRUE 43738
43694: LD_INT 19
43696: DOUBLE
43697: EQUAL
43698: IFTRUE 43738
43700: LD_INT 22
43702: DOUBLE
43703: EQUAL
43704: IFTRUE 43738
43706: LD_INT 20
43708: DOUBLE
43709: EQUAL
43710: IFTRUE 43738
43712: LD_INT 21
43714: DOUBLE
43715: EQUAL
43716: IFTRUE 43738
43718: LD_INT 23
43720: DOUBLE
43721: EQUAL
43722: IFTRUE 43738
43724: LD_INT 24
43726: DOUBLE
43727: EQUAL
43728: IFTRUE 43738
43730: LD_INT 25
43732: DOUBLE
43733: EQUAL
43734: IFTRUE 43738
43736: GO 43794
43738: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
43739: LD_ADDR_VAR 0 9
43743: PUSH
43744: LD_VAR 0 35
43748: PUSH
43749: LD_VAR 0 36
43753: PUSH
43754: LD_VAR 0 37
43758: PUSH
43759: LD_VAR 0 38
43763: PUSH
43764: LD_VAR 0 39
43768: PUSH
43769: LD_VAR 0 40
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: PUSH
43782: LD_VAR 0 4
43786: PUSH
43787: LD_INT 1
43789: PLUS
43790: ARRAY
43791: ST_TO_ADDR
43792: GO 44159
43794: LD_INT 6
43796: DOUBLE
43797: EQUAL
43798: IFTRUE 43850
43800: LD_INT 7
43802: DOUBLE
43803: EQUAL
43804: IFTRUE 43850
43806: LD_INT 8
43808: DOUBLE
43809: EQUAL
43810: IFTRUE 43850
43812: LD_INT 13
43814: DOUBLE
43815: EQUAL
43816: IFTRUE 43850
43818: LD_INT 12
43820: DOUBLE
43821: EQUAL
43822: IFTRUE 43850
43824: LD_INT 15
43826: DOUBLE
43827: EQUAL
43828: IFTRUE 43850
43830: LD_INT 11
43832: DOUBLE
43833: EQUAL
43834: IFTRUE 43850
43836: LD_INT 14
43838: DOUBLE
43839: EQUAL
43840: IFTRUE 43850
43842: LD_INT 10
43844: DOUBLE
43845: EQUAL
43846: IFTRUE 43850
43848: GO 43906
43850: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
43851: LD_ADDR_VAR 0 9
43855: PUSH
43856: LD_VAR 0 41
43860: PUSH
43861: LD_VAR 0 42
43865: PUSH
43866: LD_VAR 0 43
43870: PUSH
43871: LD_VAR 0 44
43875: PUSH
43876: LD_VAR 0 45
43880: PUSH
43881: LD_VAR 0 46
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: PUSH
43894: LD_VAR 0 4
43898: PUSH
43899: LD_INT 1
43901: PLUS
43902: ARRAY
43903: ST_TO_ADDR
43904: GO 44159
43906: LD_INT 36
43908: DOUBLE
43909: EQUAL
43910: IFTRUE 43914
43912: GO 43970
43914: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
43915: LD_ADDR_VAR 0 9
43919: PUSH
43920: LD_VAR 0 47
43924: PUSH
43925: LD_VAR 0 48
43929: PUSH
43930: LD_VAR 0 49
43934: PUSH
43935: LD_VAR 0 50
43939: PUSH
43940: LD_VAR 0 51
43944: PUSH
43945: LD_VAR 0 52
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: PUSH
43958: LD_VAR 0 4
43962: PUSH
43963: LD_INT 1
43965: PLUS
43966: ARRAY
43967: ST_TO_ADDR
43968: GO 44159
43970: LD_INT 4
43972: DOUBLE
43973: EQUAL
43974: IFTRUE 43996
43976: LD_INT 5
43978: DOUBLE
43979: EQUAL
43980: IFTRUE 43996
43982: LD_INT 34
43984: DOUBLE
43985: EQUAL
43986: IFTRUE 43996
43988: LD_INT 37
43990: DOUBLE
43991: EQUAL
43992: IFTRUE 43996
43994: GO 44052
43996: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
43997: LD_ADDR_VAR 0 9
44001: PUSH
44002: LD_VAR 0 53
44006: PUSH
44007: LD_VAR 0 54
44011: PUSH
44012: LD_VAR 0 55
44016: PUSH
44017: LD_VAR 0 56
44021: PUSH
44022: LD_VAR 0 57
44026: PUSH
44027: LD_VAR 0 58
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: PUSH
44040: LD_VAR 0 4
44044: PUSH
44045: LD_INT 1
44047: PLUS
44048: ARRAY
44049: ST_TO_ADDR
44050: GO 44159
44052: LD_INT 31
44054: DOUBLE
44055: EQUAL
44056: IFTRUE 44102
44058: LD_INT 32
44060: DOUBLE
44061: EQUAL
44062: IFTRUE 44102
44064: LD_INT 33
44066: DOUBLE
44067: EQUAL
44068: IFTRUE 44102
44070: LD_INT 27
44072: DOUBLE
44073: EQUAL
44074: IFTRUE 44102
44076: LD_INT 26
44078: DOUBLE
44079: EQUAL
44080: IFTRUE 44102
44082: LD_INT 28
44084: DOUBLE
44085: EQUAL
44086: IFTRUE 44102
44088: LD_INT 29
44090: DOUBLE
44091: EQUAL
44092: IFTRUE 44102
44094: LD_INT 30
44096: DOUBLE
44097: EQUAL
44098: IFTRUE 44102
44100: GO 44158
44102: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
44103: LD_ADDR_VAR 0 9
44107: PUSH
44108: LD_VAR 0 59
44112: PUSH
44113: LD_VAR 0 60
44117: PUSH
44118: LD_VAR 0 61
44122: PUSH
44123: LD_VAR 0 62
44127: PUSH
44128: LD_VAR 0 63
44132: PUSH
44133: LD_VAR 0 64
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: PUSH
44146: LD_VAR 0 4
44150: PUSH
44151: LD_INT 1
44153: PLUS
44154: ARRAY
44155: ST_TO_ADDR
44156: GO 44159
44158: POP
// temp_list2 = [ ] ;
44159: LD_ADDR_VAR 0 10
44163: PUSH
44164: EMPTY
44165: ST_TO_ADDR
// for i in temp_list do
44166: LD_ADDR_VAR 0 8
44170: PUSH
44171: LD_VAR 0 9
44175: PUSH
44176: FOR_IN
44177: IFFALSE 44229
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
44179: LD_ADDR_VAR 0 10
44183: PUSH
44184: LD_VAR 0 10
44188: PUSH
44189: LD_VAR 0 8
44193: PUSH
44194: LD_INT 1
44196: ARRAY
44197: PUSH
44198: LD_VAR 0 2
44202: PLUS
44203: PUSH
44204: LD_VAR 0 8
44208: PUSH
44209: LD_INT 2
44211: ARRAY
44212: PUSH
44213: LD_VAR 0 3
44217: PLUS
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: EMPTY
44224: LIST
44225: ADD
44226: ST_TO_ADDR
44227: GO 44176
44229: POP
44230: POP
// result = temp_list2 ;
44231: LD_ADDR_VAR 0 7
44235: PUSH
44236: LD_VAR 0 10
44240: ST_TO_ADDR
// end ;
44241: LD_VAR 0 7
44245: RET
// export function EnemyInRange ( unit , dist ) ; begin
44246: LD_INT 0
44248: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
44249: LD_ADDR_VAR 0 3
44253: PUSH
44254: LD_VAR 0 1
44258: PPUSH
44259: CALL_OW 255
44263: PPUSH
44264: LD_VAR 0 1
44268: PPUSH
44269: CALL_OW 250
44273: PPUSH
44274: LD_VAR 0 1
44278: PPUSH
44279: CALL_OW 251
44283: PPUSH
44284: LD_VAR 0 2
44288: PPUSH
44289: CALL 18350 0 4
44293: PUSH
44294: LD_INT 4
44296: ARRAY
44297: ST_TO_ADDR
// end ;
44298: LD_VAR 0 3
44302: RET
// export function PlayerSeeMe ( unit ) ; begin
44303: LD_INT 0
44305: PPUSH
// result := See ( your_side , unit ) ;
44306: LD_ADDR_VAR 0 2
44310: PUSH
44311: LD_OWVAR 2
44315: PPUSH
44316: LD_VAR 0 1
44320: PPUSH
44321: CALL_OW 292
44325: ST_TO_ADDR
// end ;
44326: LD_VAR 0 2
44330: RET
// export function ReverseDir ( unit ) ; begin
44331: LD_INT 0
44333: PPUSH
// if not unit then
44334: LD_VAR 0 1
44338: NOT
44339: IFFALSE 44343
// exit ;
44341: GO 44366
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
44343: LD_ADDR_VAR 0 2
44347: PUSH
44348: LD_VAR 0 1
44352: PPUSH
44353: CALL_OW 254
44357: PUSH
44358: LD_INT 3
44360: PLUS
44361: PUSH
44362: LD_INT 6
44364: MOD
44365: ST_TO_ADDR
// end ;
44366: LD_VAR 0 2
44370: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
44371: LD_INT 0
44373: PPUSH
44374: PPUSH
44375: PPUSH
44376: PPUSH
44377: PPUSH
// if not hexes then
44378: LD_VAR 0 2
44382: NOT
44383: IFFALSE 44387
// exit ;
44385: GO 44535
// dist := 9999 ;
44387: LD_ADDR_VAR 0 5
44391: PUSH
44392: LD_INT 9999
44394: ST_TO_ADDR
// for i = 1 to hexes do
44395: LD_ADDR_VAR 0 4
44399: PUSH
44400: DOUBLE
44401: LD_INT 1
44403: DEC
44404: ST_TO_ADDR
44405: LD_VAR 0 2
44409: PUSH
44410: FOR_TO
44411: IFFALSE 44523
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
44413: LD_VAR 0 1
44417: PPUSH
44418: LD_VAR 0 2
44422: PUSH
44423: LD_VAR 0 4
44427: ARRAY
44428: PUSH
44429: LD_INT 1
44431: ARRAY
44432: PPUSH
44433: LD_VAR 0 2
44437: PUSH
44438: LD_VAR 0 4
44442: ARRAY
44443: PUSH
44444: LD_INT 2
44446: ARRAY
44447: PPUSH
44448: CALL_OW 297
44452: PUSH
44453: LD_VAR 0 5
44457: LESS
44458: IFFALSE 44521
// begin hex := hexes [ i ] ;
44460: LD_ADDR_VAR 0 7
44464: PUSH
44465: LD_VAR 0 2
44469: PUSH
44470: LD_VAR 0 4
44474: ARRAY
44475: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44476: LD_ADDR_VAR 0 5
44480: PUSH
44481: LD_VAR 0 1
44485: PPUSH
44486: LD_VAR 0 2
44490: PUSH
44491: LD_VAR 0 4
44495: ARRAY
44496: PUSH
44497: LD_INT 1
44499: ARRAY
44500: PPUSH
44501: LD_VAR 0 2
44505: PUSH
44506: LD_VAR 0 4
44510: ARRAY
44511: PUSH
44512: LD_INT 2
44514: ARRAY
44515: PPUSH
44516: CALL_OW 297
44520: ST_TO_ADDR
// end ; end ;
44521: GO 44410
44523: POP
44524: POP
// result := hex ;
44525: LD_ADDR_VAR 0 3
44529: PUSH
44530: LD_VAR 0 7
44534: ST_TO_ADDR
// end ;
44535: LD_VAR 0 3
44539: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
44540: LD_INT 0
44542: PPUSH
44543: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
44544: LD_VAR 0 1
44548: NOT
44549: PUSH
44550: LD_VAR 0 1
44554: PUSH
44555: LD_INT 21
44557: PUSH
44558: LD_INT 2
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 23
44567: PUSH
44568: LD_INT 2
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PPUSH
44579: CALL_OW 69
44583: IN
44584: NOT
44585: OR
44586: IFFALSE 44590
// exit ;
44588: GO 44637
// for i = 1 to 3 do
44590: LD_ADDR_VAR 0 3
44594: PUSH
44595: DOUBLE
44596: LD_INT 1
44598: DEC
44599: ST_TO_ADDR
44600: LD_INT 3
44602: PUSH
44603: FOR_TO
44604: IFFALSE 44635
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
44606: LD_VAR 0 1
44610: PPUSH
44611: CALL_OW 250
44615: PPUSH
44616: LD_VAR 0 1
44620: PPUSH
44621: CALL_OW 251
44625: PPUSH
44626: LD_INT 1
44628: PPUSH
44629: CALL_OW 453
44633: GO 44603
44635: POP
44636: POP
// end ;
44637: LD_VAR 0 2
44641: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44642: LD_INT 0
44644: PPUSH
44645: PPUSH
44646: PPUSH
44647: PPUSH
44648: PPUSH
44649: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
44650: LD_VAR 0 1
44654: NOT
44655: PUSH
44656: LD_VAR 0 2
44660: NOT
44661: OR
44662: PUSH
44663: LD_VAR 0 1
44667: PPUSH
44668: CALL_OW 314
44672: OR
44673: IFFALSE 44677
// exit ;
44675: GO 45118
// x := GetX ( enemy_unit ) ;
44677: LD_ADDR_VAR 0 7
44681: PUSH
44682: LD_VAR 0 2
44686: PPUSH
44687: CALL_OW 250
44691: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
44692: LD_ADDR_VAR 0 8
44696: PUSH
44697: LD_VAR 0 2
44701: PPUSH
44702: CALL_OW 251
44706: ST_TO_ADDR
// if not x or not y then
44707: LD_VAR 0 7
44711: NOT
44712: PUSH
44713: LD_VAR 0 8
44717: NOT
44718: OR
44719: IFFALSE 44723
// exit ;
44721: GO 45118
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
44723: LD_ADDR_VAR 0 6
44727: PUSH
44728: LD_VAR 0 7
44732: PPUSH
44733: LD_INT 0
44735: PPUSH
44736: LD_INT 4
44738: PPUSH
44739: CALL_OW 272
44743: PUSH
44744: LD_VAR 0 8
44748: PPUSH
44749: LD_INT 0
44751: PPUSH
44752: LD_INT 4
44754: PPUSH
44755: CALL_OW 273
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_VAR 0 7
44768: PPUSH
44769: LD_INT 1
44771: PPUSH
44772: LD_INT 4
44774: PPUSH
44775: CALL_OW 272
44779: PUSH
44780: LD_VAR 0 8
44784: PPUSH
44785: LD_INT 1
44787: PPUSH
44788: LD_INT 4
44790: PPUSH
44791: CALL_OW 273
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_VAR 0 7
44804: PPUSH
44805: LD_INT 2
44807: PPUSH
44808: LD_INT 4
44810: PPUSH
44811: CALL_OW 272
44815: PUSH
44816: LD_VAR 0 8
44820: PPUSH
44821: LD_INT 2
44823: PPUSH
44824: LD_INT 4
44826: PPUSH
44827: CALL_OW 273
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_VAR 0 7
44840: PPUSH
44841: LD_INT 3
44843: PPUSH
44844: LD_INT 4
44846: PPUSH
44847: CALL_OW 272
44851: PUSH
44852: LD_VAR 0 8
44856: PPUSH
44857: LD_INT 3
44859: PPUSH
44860: LD_INT 4
44862: PPUSH
44863: CALL_OW 273
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_VAR 0 7
44876: PPUSH
44877: LD_INT 4
44879: PPUSH
44880: LD_INT 4
44882: PPUSH
44883: CALL_OW 272
44887: PUSH
44888: LD_VAR 0 8
44892: PPUSH
44893: LD_INT 4
44895: PPUSH
44896: LD_INT 4
44898: PPUSH
44899: CALL_OW 273
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_VAR 0 7
44912: PPUSH
44913: LD_INT 5
44915: PPUSH
44916: LD_INT 4
44918: PPUSH
44919: CALL_OW 272
44923: PUSH
44924: LD_VAR 0 8
44928: PPUSH
44929: LD_INT 5
44931: PPUSH
44932: LD_INT 4
44934: PPUSH
44935: CALL_OW 273
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: ST_TO_ADDR
// for i = tmp downto 1 do
44952: LD_ADDR_VAR 0 4
44956: PUSH
44957: DOUBLE
44958: LD_VAR 0 6
44962: INC
44963: ST_TO_ADDR
44964: LD_INT 1
44966: PUSH
44967: FOR_DOWNTO
44968: IFFALSE 45069
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
44970: LD_VAR 0 6
44974: PUSH
44975: LD_VAR 0 4
44979: ARRAY
44980: PUSH
44981: LD_INT 1
44983: ARRAY
44984: PPUSH
44985: LD_VAR 0 6
44989: PUSH
44990: LD_VAR 0 4
44994: ARRAY
44995: PUSH
44996: LD_INT 2
44998: ARRAY
44999: PPUSH
45000: CALL_OW 488
45004: NOT
45005: PUSH
45006: LD_VAR 0 6
45010: PUSH
45011: LD_VAR 0 4
45015: ARRAY
45016: PUSH
45017: LD_INT 1
45019: ARRAY
45020: PPUSH
45021: LD_VAR 0 6
45025: PUSH
45026: LD_VAR 0 4
45030: ARRAY
45031: PUSH
45032: LD_INT 2
45034: ARRAY
45035: PPUSH
45036: CALL_OW 428
45040: PUSH
45041: LD_INT 0
45043: NONEQUAL
45044: OR
45045: IFFALSE 45067
// tmp := Delete ( tmp , i ) ;
45047: LD_ADDR_VAR 0 6
45051: PUSH
45052: LD_VAR 0 6
45056: PPUSH
45057: LD_VAR 0 4
45061: PPUSH
45062: CALL_OW 3
45066: ST_TO_ADDR
45067: GO 44967
45069: POP
45070: POP
// j := GetClosestHex ( unit , tmp ) ;
45071: LD_ADDR_VAR 0 5
45075: PUSH
45076: LD_VAR 0 1
45080: PPUSH
45081: LD_VAR 0 6
45085: PPUSH
45086: CALL 44371 0 2
45090: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
45091: LD_VAR 0 1
45095: PPUSH
45096: LD_VAR 0 5
45100: PUSH
45101: LD_INT 1
45103: ARRAY
45104: PPUSH
45105: LD_VAR 0 5
45109: PUSH
45110: LD_INT 2
45112: ARRAY
45113: PPUSH
45114: CALL_OW 111
// end ;
45118: LD_VAR 0 3
45122: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
45123: LD_INT 0
45125: PPUSH
45126: PPUSH
45127: PPUSH
// uc_side = 0 ;
45128: LD_ADDR_OWVAR 20
45132: PUSH
45133: LD_INT 0
45135: ST_TO_ADDR
// uc_nation = 0 ;
45136: LD_ADDR_OWVAR 21
45140: PUSH
45141: LD_INT 0
45143: ST_TO_ADDR
// InitHc ;
45144: CALL_OW 19
// InitVc ;
45148: CALL_OW 20
// if mastodonts then
45152: LD_VAR 0 6
45156: IFFALSE 45223
// for i = 1 to mastodonts do
45158: LD_ADDR_VAR 0 11
45162: PUSH
45163: DOUBLE
45164: LD_INT 1
45166: DEC
45167: ST_TO_ADDR
45168: LD_VAR 0 6
45172: PUSH
45173: FOR_TO
45174: IFFALSE 45221
// begin vc_chassis := 31 ;
45176: LD_ADDR_OWVAR 37
45180: PUSH
45181: LD_INT 31
45183: ST_TO_ADDR
// vc_control := control_rider ;
45184: LD_ADDR_OWVAR 38
45188: PUSH
45189: LD_INT 4
45191: ST_TO_ADDR
// animal := CreateVehicle ;
45192: LD_ADDR_VAR 0 12
45196: PUSH
45197: CALL_OW 45
45201: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45202: LD_VAR 0 12
45206: PPUSH
45207: LD_VAR 0 8
45211: PPUSH
45212: LD_INT 0
45214: PPUSH
45215: CALL 47292 0 3
// end ;
45219: GO 45173
45221: POP
45222: POP
// if horses then
45223: LD_VAR 0 5
45227: IFFALSE 45294
// for i = 1 to horses do
45229: LD_ADDR_VAR 0 11
45233: PUSH
45234: DOUBLE
45235: LD_INT 1
45237: DEC
45238: ST_TO_ADDR
45239: LD_VAR 0 5
45243: PUSH
45244: FOR_TO
45245: IFFALSE 45292
// begin hc_class := 21 ;
45247: LD_ADDR_OWVAR 28
45251: PUSH
45252: LD_INT 21
45254: ST_TO_ADDR
// hc_gallery :=  ;
45255: LD_ADDR_OWVAR 33
45259: PUSH
45260: LD_STRING 
45262: ST_TO_ADDR
// animal := CreateHuman ;
45263: LD_ADDR_VAR 0 12
45267: PUSH
45268: CALL_OW 44
45272: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45273: LD_VAR 0 12
45277: PPUSH
45278: LD_VAR 0 8
45282: PPUSH
45283: LD_INT 0
45285: PPUSH
45286: CALL 47292 0 3
// end ;
45290: GO 45244
45292: POP
45293: POP
// if birds then
45294: LD_VAR 0 1
45298: IFFALSE 45365
// for i = 1 to birds do
45300: LD_ADDR_VAR 0 11
45304: PUSH
45305: DOUBLE
45306: LD_INT 1
45308: DEC
45309: ST_TO_ADDR
45310: LD_VAR 0 1
45314: PUSH
45315: FOR_TO
45316: IFFALSE 45363
// begin hc_class = 18 ;
45318: LD_ADDR_OWVAR 28
45322: PUSH
45323: LD_INT 18
45325: ST_TO_ADDR
// hc_gallery =  ;
45326: LD_ADDR_OWVAR 33
45330: PUSH
45331: LD_STRING 
45333: ST_TO_ADDR
// animal := CreateHuman ;
45334: LD_ADDR_VAR 0 12
45338: PUSH
45339: CALL_OW 44
45343: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45344: LD_VAR 0 12
45348: PPUSH
45349: LD_VAR 0 8
45353: PPUSH
45354: LD_INT 0
45356: PPUSH
45357: CALL 47292 0 3
// end ;
45361: GO 45315
45363: POP
45364: POP
// if tigers then
45365: LD_VAR 0 2
45369: IFFALSE 45453
// for i = 1 to tigers do
45371: LD_ADDR_VAR 0 11
45375: PUSH
45376: DOUBLE
45377: LD_INT 1
45379: DEC
45380: ST_TO_ADDR
45381: LD_VAR 0 2
45385: PUSH
45386: FOR_TO
45387: IFFALSE 45451
// begin hc_class = class_tiger ;
45389: LD_ADDR_OWVAR 28
45393: PUSH
45394: LD_INT 14
45396: ST_TO_ADDR
// hc_gallery =  ;
45397: LD_ADDR_OWVAR 33
45401: PUSH
45402: LD_STRING 
45404: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45405: LD_ADDR_OWVAR 35
45409: PUSH
45410: LD_INT 7
45412: NEG
45413: PPUSH
45414: LD_INT 7
45416: PPUSH
45417: CALL_OW 12
45421: ST_TO_ADDR
// animal := CreateHuman ;
45422: LD_ADDR_VAR 0 12
45426: PUSH
45427: CALL_OW 44
45431: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45432: LD_VAR 0 12
45436: PPUSH
45437: LD_VAR 0 8
45441: PPUSH
45442: LD_INT 0
45444: PPUSH
45445: CALL 47292 0 3
// end ;
45449: GO 45386
45451: POP
45452: POP
// if apemans then
45453: LD_VAR 0 3
45457: IFFALSE 45580
// for i = 1 to apemans do
45459: LD_ADDR_VAR 0 11
45463: PUSH
45464: DOUBLE
45465: LD_INT 1
45467: DEC
45468: ST_TO_ADDR
45469: LD_VAR 0 3
45473: PUSH
45474: FOR_TO
45475: IFFALSE 45578
// begin hc_class = class_apeman ;
45477: LD_ADDR_OWVAR 28
45481: PUSH
45482: LD_INT 12
45484: ST_TO_ADDR
// hc_gallery =  ;
45485: LD_ADDR_OWVAR 33
45489: PUSH
45490: LD_STRING 
45492: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
45493: LD_ADDR_OWVAR 35
45497: PUSH
45498: LD_INT 5
45500: NEG
45501: PPUSH
45502: LD_INT 5
45504: PPUSH
45505: CALL_OW 12
45509: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45510: LD_ADDR_OWVAR 31
45514: PUSH
45515: LD_INT 1
45517: PPUSH
45518: LD_INT 3
45520: PPUSH
45521: CALL_OW 12
45525: PUSH
45526: LD_INT 1
45528: PPUSH
45529: LD_INT 3
45531: PPUSH
45532: CALL_OW 12
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: LD_INT 0
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: ST_TO_ADDR
// animal := CreateHuman ;
45549: LD_ADDR_VAR 0 12
45553: PUSH
45554: CALL_OW 44
45558: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45559: LD_VAR 0 12
45563: PPUSH
45564: LD_VAR 0 8
45568: PPUSH
45569: LD_INT 0
45571: PPUSH
45572: CALL 47292 0 3
// end ;
45576: GO 45474
45578: POP
45579: POP
// if enchidnas then
45580: LD_VAR 0 4
45584: IFFALSE 45651
// for i = 1 to enchidnas do
45586: LD_ADDR_VAR 0 11
45590: PUSH
45591: DOUBLE
45592: LD_INT 1
45594: DEC
45595: ST_TO_ADDR
45596: LD_VAR 0 4
45600: PUSH
45601: FOR_TO
45602: IFFALSE 45649
// begin hc_class = 13 ;
45604: LD_ADDR_OWVAR 28
45608: PUSH
45609: LD_INT 13
45611: ST_TO_ADDR
// hc_gallery =  ;
45612: LD_ADDR_OWVAR 33
45616: PUSH
45617: LD_STRING 
45619: ST_TO_ADDR
// animal := CreateHuman ;
45620: LD_ADDR_VAR 0 12
45624: PUSH
45625: CALL_OW 44
45629: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45630: LD_VAR 0 12
45634: PPUSH
45635: LD_VAR 0 8
45639: PPUSH
45640: LD_INT 0
45642: PPUSH
45643: CALL 47292 0 3
// end ;
45647: GO 45601
45649: POP
45650: POP
// if fishes then
45651: LD_VAR 0 7
45655: IFFALSE 45722
// for i = 1 to fishes do
45657: LD_ADDR_VAR 0 11
45661: PUSH
45662: DOUBLE
45663: LD_INT 1
45665: DEC
45666: ST_TO_ADDR
45667: LD_VAR 0 7
45671: PUSH
45672: FOR_TO
45673: IFFALSE 45720
// begin hc_class = 20 ;
45675: LD_ADDR_OWVAR 28
45679: PUSH
45680: LD_INT 20
45682: ST_TO_ADDR
// hc_gallery =  ;
45683: LD_ADDR_OWVAR 33
45687: PUSH
45688: LD_STRING 
45690: ST_TO_ADDR
// animal := CreateHuman ;
45691: LD_ADDR_VAR 0 12
45695: PUSH
45696: CALL_OW 44
45700: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45701: LD_VAR 0 12
45705: PPUSH
45706: LD_VAR 0 9
45710: PPUSH
45711: LD_INT 0
45713: PPUSH
45714: CALL 47292 0 3
// end ;
45718: GO 45672
45720: POP
45721: POP
// end ;
45722: LD_VAR 0 10
45726: RET
// export function WantHeal ( sci , unit ) ; begin
45727: LD_INT 0
45729: PPUSH
// if GetTaskList ( sci ) > 0 then
45730: LD_VAR 0 1
45734: PPUSH
45735: CALL_OW 437
45739: PUSH
45740: LD_INT 0
45742: GREATER
45743: IFFALSE 45813
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45745: LD_VAR 0 1
45749: PPUSH
45750: CALL_OW 437
45754: PUSH
45755: LD_INT 1
45757: ARRAY
45758: PUSH
45759: LD_INT 1
45761: ARRAY
45762: PUSH
45763: LD_STRING l
45765: EQUAL
45766: PUSH
45767: LD_VAR 0 1
45771: PPUSH
45772: CALL_OW 437
45776: PUSH
45777: LD_INT 1
45779: ARRAY
45780: PUSH
45781: LD_INT 4
45783: ARRAY
45784: PUSH
45785: LD_VAR 0 2
45789: EQUAL
45790: AND
45791: IFFALSE 45803
// result := true else
45793: LD_ADDR_VAR 0 3
45797: PUSH
45798: LD_INT 1
45800: ST_TO_ADDR
45801: GO 45811
// result := false ;
45803: LD_ADDR_VAR 0 3
45807: PUSH
45808: LD_INT 0
45810: ST_TO_ADDR
// end else
45811: GO 45821
// result := false ;
45813: LD_ADDR_VAR 0 3
45817: PUSH
45818: LD_INT 0
45820: ST_TO_ADDR
// end ;
45821: LD_VAR 0 3
45825: RET
// export function HealTarget ( sci ) ; begin
45826: LD_INT 0
45828: PPUSH
// if not sci then
45829: LD_VAR 0 1
45833: NOT
45834: IFFALSE 45838
// exit ;
45836: GO 45903
// result := 0 ;
45838: LD_ADDR_VAR 0 2
45842: PUSH
45843: LD_INT 0
45845: ST_TO_ADDR
// if GetTaskList ( sci ) then
45846: LD_VAR 0 1
45850: PPUSH
45851: CALL_OW 437
45855: IFFALSE 45903
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45857: LD_VAR 0 1
45861: PPUSH
45862: CALL_OW 437
45866: PUSH
45867: LD_INT 1
45869: ARRAY
45870: PUSH
45871: LD_INT 1
45873: ARRAY
45874: PUSH
45875: LD_STRING l
45877: EQUAL
45878: IFFALSE 45903
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45880: LD_ADDR_VAR 0 2
45884: PUSH
45885: LD_VAR 0 1
45889: PPUSH
45890: CALL_OW 437
45894: PUSH
45895: LD_INT 1
45897: ARRAY
45898: PUSH
45899: LD_INT 4
45901: ARRAY
45902: ST_TO_ADDR
// end ;
45903: LD_VAR 0 2
45907: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45908: LD_INT 0
45910: PPUSH
45911: PPUSH
45912: PPUSH
45913: PPUSH
// if not base_units then
45914: LD_VAR 0 1
45918: NOT
45919: IFFALSE 45923
// exit ;
45921: GO 46010
// result := false ;
45923: LD_ADDR_VAR 0 2
45927: PUSH
45928: LD_INT 0
45930: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45931: LD_ADDR_VAR 0 5
45935: PUSH
45936: LD_VAR 0 1
45940: PPUSH
45941: LD_INT 21
45943: PUSH
45944: LD_INT 3
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PPUSH
45951: CALL_OW 72
45955: ST_TO_ADDR
// if not tmp then
45956: LD_VAR 0 5
45960: NOT
45961: IFFALSE 45965
// exit ;
45963: GO 46010
// for i in tmp do
45965: LD_ADDR_VAR 0 3
45969: PUSH
45970: LD_VAR 0 5
45974: PUSH
45975: FOR_IN
45976: IFFALSE 46008
// begin result := EnemyInRange ( i , 22 ) ;
45978: LD_ADDR_VAR 0 2
45982: PUSH
45983: LD_VAR 0 3
45987: PPUSH
45988: LD_INT 22
45990: PPUSH
45991: CALL 44246 0 2
45995: ST_TO_ADDR
// if result then
45996: LD_VAR 0 2
46000: IFFALSE 46006
// exit ;
46002: POP
46003: POP
46004: GO 46010
// end ;
46006: GO 45975
46008: POP
46009: POP
// end ;
46010: LD_VAR 0 2
46014: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
46015: LD_INT 0
46017: PPUSH
46018: PPUSH
// if not units then
46019: LD_VAR 0 1
46023: NOT
46024: IFFALSE 46028
// exit ;
46026: GO 46098
// result := [ ] ;
46028: LD_ADDR_VAR 0 3
46032: PUSH
46033: EMPTY
46034: ST_TO_ADDR
// for i in units do
46035: LD_ADDR_VAR 0 4
46039: PUSH
46040: LD_VAR 0 1
46044: PUSH
46045: FOR_IN
46046: IFFALSE 46096
// if GetTag ( i ) = tag then
46048: LD_VAR 0 4
46052: PPUSH
46053: CALL_OW 110
46057: PUSH
46058: LD_VAR 0 2
46062: EQUAL
46063: IFFALSE 46094
// result := Insert ( result , result + 1 , i ) ;
46065: LD_ADDR_VAR 0 3
46069: PUSH
46070: LD_VAR 0 3
46074: PPUSH
46075: LD_VAR 0 3
46079: PUSH
46080: LD_INT 1
46082: PLUS
46083: PPUSH
46084: LD_VAR 0 4
46088: PPUSH
46089: CALL_OW 2
46093: ST_TO_ADDR
46094: GO 46045
46096: POP
46097: POP
// end ;
46098: LD_VAR 0 3
46102: RET
// export function IsDriver ( un ) ; begin
46103: LD_INT 0
46105: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
46106: LD_ADDR_VAR 0 2
46110: PUSH
46111: LD_VAR 0 1
46115: PUSH
46116: LD_INT 55
46118: PUSH
46119: EMPTY
46120: LIST
46121: PPUSH
46122: CALL_OW 69
46126: IN
46127: ST_TO_ADDR
// end ;
46128: LD_VAR 0 2
46132: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
46133: LD_INT 0
46135: PPUSH
46136: PPUSH
// list := [ ] ;
46137: LD_ADDR_VAR 0 5
46141: PUSH
46142: EMPTY
46143: ST_TO_ADDR
// case d of 0 :
46144: LD_VAR 0 3
46148: PUSH
46149: LD_INT 0
46151: DOUBLE
46152: EQUAL
46153: IFTRUE 46157
46155: GO 46290
46157: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
46158: LD_ADDR_VAR 0 5
46162: PUSH
46163: LD_VAR 0 1
46167: PUSH
46168: LD_INT 4
46170: MINUS
46171: PUSH
46172: LD_VAR 0 2
46176: PUSH
46177: LD_INT 4
46179: MINUS
46180: PUSH
46181: LD_INT 2
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: LIST
46188: PUSH
46189: LD_VAR 0 1
46193: PUSH
46194: LD_INT 3
46196: MINUS
46197: PUSH
46198: LD_VAR 0 2
46202: PUSH
46203: LD_INT 1
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: LIST
46210: PUSH
46211: LD_VAR 0 1
46215: PUSH
46216: LD_INT 4
46218: PLUS
46219: PUSH
46220: LD_VAR 0 2
46224: PUSH
46225: LD_INT 4
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: LIST
46232: PUSH
46233: LD_VAR 0 1
46237: PUSH
46238: LD_INT 3
46240: PLUS
46241: PUSH
46242: LD_VAR 0 2
46246: PUSH
46247: LD_INT 3
46249: PLUS
46250: PUSH
46251: LD_INT 5
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: LIST
46258: PUSH
46259: LD_VAR 0 1
46263: PUSH
46264: LD_VAR 0 2
46268: PUSH
46269: LD_INT 4
46271: PLUS
46272: PUSH
46273: LD_INT 0
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: LIST
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: ST_TO_ADDR
// end ; 1 :
46288: GO 46988
46290: LD_INT 1
46292: DOUBLE
46293: EQUAL
46294: IFTRUE 46298
46296: GO 46431
46298: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
46299: LD_ADDR_VAR 0 5
46303: PUSH
46304: LD_VAR 0 1
46308: PUSH
46309: LD_VAR 0 2
46313: PUSH
46314: LD_INT 4
46316: MINUS
46317: PUSH
46318: LD_INT 3
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: LIST
46325: PUSH
46326: LD_VAR 0 1
46330: PUSH
46331: LD_INT 3
46333: MINUS
46334: PUSH
46335: LD_VAR 0 2
46339: PUSH
46340: LD_INT 3
46342: MINUS
46343: PUSH
46344: LD_INT 2
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: LIST
46351: PUSH
46352: LD_VAR 0 1
46356: PUSH
46357: LD_INT 4
46359: MINUS
46360: PUSH
46361: LD_VAR 0 2
46365: PUSH
46366: LD_INT 1
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: LIST
46373: PUSH
46374: LD_VAR 0 1
46378: PUSH
46379: LD_VAR 0 2
46383: PUSH
46384: LD_INT 3
46386: PLUS
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: LIST
46395: PUSH
46396: LD_VAR 0 1
46400: PUSH
46401: LD_INT 4
46403: PLUS
46404: PUSH
46405: LD_VAR 0 2
46409: PUSH
46410: LD_INT 4
46412: PLUS
46413: PUSH
46414: LD_INT 5
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: LIST
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: ST_TO_ADDR
// end ; 2 :
46429: GO 46988
46431: LD_INT 2
46433: DOUBLE
46434: EQUAL
46435: IFTRUE 46439
46437: GO 46568
46439: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
46440: LD_ADDR_VAR 0 5
46444: PUSH
46445: LD_VAR 0 1
46449: PUSH
46450: LD_VAR 0 2
46454: PUSH
46455: LD_INT 3
46457: MINUS
46458: PUSH
46459: LD_INT 3
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: LIST
46466: PUSH
46467: LD_VAR 0 1
46471: PUSH
46472: LD_INT 4
46474: PLUS
46475: PUSH
46476: LD_VAR 0 2
46480: PUSH
46481: LD_INT 4
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: LIST
46488: PUSH
46489: LD_VAR 0 1
46493: PUSH
46494: LD_VAR 0 2
46498: PUSH
46499: LD_INT 4
46501: PLUS
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: LIST
46510: PUSH
46511: LD_VAR 0 1
46515: PUSH
46516: LD_INT 3
46518: MINUS
46519: PUSH
46520: LD_VAR 0 2
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: LIST
46532: PUSH
46533: LD_VAR 0 1
46537: PUSH
46538: LD_INT 4
46540: MINUS
46541: PUSH
46542: LD_VAR 0 2
46546: PUSH
46547: LD_INT 4
46549: MINUS
46550: PUSH
46551: LD_INT 2
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: LIST
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: ST_TO_ADDR
// end ; 3 :
46566: GO 46988
46568: LD_INT 3
46570: DOUBLE
46571: EQUAL
46572: IFTRUE 46576
46574: GO 46709
46576: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46577: LD_ADDR_VAR 0 5
46581: PUSH
46582: LD_VAR 0 1
46586: PUSH
46587: LD_INT 3
46589: PLUS
46590: PUSH
46591: LD_VAR 0 2
46595: PUSH
46596: LD_INT 4
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: LIST
46603: PUSH
46604: LD_VAR 0 1
46608: PUSH
46609: LD_INT 4
46611: PLUS
46612: PUSH
46613: LD_VAR 0 2
46617: PUSH
46618: LD_INT 4
46620: PLUS
46621: PUSH
46622: LD_INT 5
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: LIST
46629: PUSH
46630: LD_VAR 0 1
46634: PUSH
46635: LD_INT 4
46637: MINUS
46638: PUSH
46639: LD_VAR 0 2
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: LIST
46651: PUSH
46652: LD_VAR 0 1
46656: PUSH
46657: LD_VAR 0 2
46661: PUSH
46662: LD_INT 4
46664: MINUS
46665: PUSH
46666: LD_INT 3
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: LIST
46673: PUSH
46674: LD_VAR 0 1
46678: PUSH
46679: LD_INT 3
46681: MINUS
46682: PUSH
46683: LD_VAR 0 2
46687: PUSH
46688: LD_INT 3
46690: MINUS
46691: PUSH
46692: LD_INT 2
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: LIST
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: ST_TO_ADDR
// end ; 4 :
46707: GO 46988
46709: LD_INT 4
46711: DOUBLE
46712: EQUAL
46713: IFTRUE 46717
46715: GO 46850
46717: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
46718: LD_ADDR_VAR 0 5
46722: PUSH
46723: LD_VAR 0 1
46727: PUSH
46728: LD_VAR 0 2
46732: PUSH
46733: LD_INT 4
46735: PLUS
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: LIST
46744: PUSH
46745: LD_VAR 0 1
46749: PUSH
46750: LD_INT 3
46752: PLUS
46753: PUSH
46754: LD_VAR 0 2
46758: PUSH
46759: LD_INT 3
46761: PLUS
46762: PUSH
46763: LD_INT 5
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: LIST
46770: PUSH
46771: LD_VAR 0 1
46775: PUSH
46776: LD_INT 4
46778: PLUS
46779: PUSH
46780: LD_VAR 0 2
46784: PUSH
46785: LD_INT 4
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: LIST
46792: PUSH
46793: LD_VAR 0 1
46797: PUSH
46798: LD_VAR 0 2
46802: PUSH
46803: LD_INT 3
46805: MINUS
46806: PUSH
46807: LD_INT 3
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: LIST
46814: PUSH
46815: LD_VAR 0 1
46819: PUSH
46820: LD_INT 4
46822: MINUS
46823: PUSH
46824: LD_VAR 0 2
46828: PUSH
46829: LD_INT 4
46831: MINUS
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: LIST
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: ST_TO_ADDR
// end ; 5 :
46848: GO 46988
46850: LD_INT 5
46852: DOUBLE
46853: EQUAL
46854: IFTRUE 46858
46856: GO 46987
46858: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46859: LD_ADDR_VAR 0 5
46863: PUSH
46864: LD_VAR 0 1
46868: PUSH
46869: LD_INT 4
46871: MINUS
46872: PUSH
46873: LD_VAR 0 2
46877: PUSH
46878: LD_INT 1
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: LIST
46885: PUSH
46886: LD_VAR 0 1
46890: PUSH
46891: LD_VAR 0 2
46895: PUSH
46896: LD_INT 4
46898: MINUS
46899: PUSH
46900: LD_INT 3
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: LIST
46907: PUSH
46908: LD_VAR 0 1
46912: PUSH
46913: LD_INT 4
46915: PLUS
46916: PUSH
46917: LD_VAR 0 2
46921: PUSH
46922: LD_INT 4
46924: PLUS
46925: PUSH
46926: LD_INT 5
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: LIST
46933: PUSH
46934: LD_VAR 0 1
46938: PUSH
46939: LD_INT 3
46941: PLUS
46942: PUSH
46943: LD_VAR 0 2
46947: PUSH
46948: LD_INT 4
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: LIST
46955: PUSH
46956: LD_VAR 0 1
46960: PUSH
46961: LD_VAR 0 2
46965: PUSH
46966: LD_INT 3
46968: PLUS
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: LIST
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: ST_TO_ADDR
// end ; end ;
46985: GO 46988
46987: POP
// result := list ;
46988: LD_ADDR_VAR 0 4
46992: PUSH
46993: LD_VAR 0 5
46997: ST_TO_ADDR
// end ;
46998: LD_VAR 0 4
47002: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
47003: LD_INT 0
47005: PPUSH
47006: PPUSH
47007: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
47008: LD_VAR 0 1
47012: NOT
47013: PUSH
47014: LD_VAR 0 2
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: LD_INT 2
47024: PUSH
47025: LD_INT 3
47027: PUSH
47028: LD_INT 4
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: IN
47037: NOT
47038: OR
47039: IFFALSE 47043
// exit ;
47041: GO 47135
// tmp := [ ] ;
47043: LD_ADDR_VAR 0 5
47047: PUSH
47048: EMPTY
47049: ST_TO_ADDR
// for i in units do
47050: LD_ADDR_VAR 0 4
47054: PUSH
47055: LD_VAR 0 1
47059: PUSH
47060: FOR_IN
47061: IFFALSE 47104
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
47063: LD_ADDR_VAR 0 5
47067: PUSH
47068: LD_VAR 0 5
47072: PPUSH
47073: LD_VAR 0 5
47077: PUSH
47078: LD_INT 1
47080: PLUS
47081: PPUSH
47082: LD_VAR 0 4
47086: PPUSH
47087: LD_VAR 0 2
47091: PPUSH
47092: CALL_OW 259
47096: PPUSH
47097: CALL_OW 2
47101: ST_TO_ADDR
47102: GO 47060
47104: POP
47105: POP
// if not tmp then
47106: LD_VAR 0 5
47110: NOT
47111: IFFALSE 47115
// exit ;
47113: GO 47135
// result := SortListByListDesc ( units , tmp ) ;
47115: LD_ADDR_VAR 0 3
47119: PUSH
47120: LD_VAR 0 1
47124: PPUSH
47125: LD_VAR 0 5
47129: PPUSH
47130: CALL_OW 77
47134: ST_TO_ADDR
// end ;
47135: LD_VAR 0 3
47139: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
47140: LD_INT 0
47142: PPUSH
47143: PPUSH
47144: PPUSH
// x := GetX ( building ) ;
47145: LD_ADDR_VAR 0 4
47149: PUSH
47150: LD_VAR 0 2
47154: PPUSH
47155: CALL_OW 250
47159: ST_TO_ADDR
// y := GetY ( building ) ;
47160: LD_ADDR_VAR 0 5
47164: PUSH
47165: LD_VAR 0 2
47169: PPUSH
47170: CALL_OW 251
47174: ST_TO_ADDR
// if GetTaskList ( unit ) then
47175: LD_VAR 0 1
47179: PPUSH
47180: CALL_OW 437
47184: IFFALSE 47279
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47186: LD_STRING e
47188: PUSH
47189: LD_VAR 0 1
47193: PPUSH
47194: CALL_OW 437
47198: PUSH
47199: LD_INT 1
47201: ARRAY
47202: PUSH
47203: LD_INT 1
47205: ARRAY
47206: EQUAL
47207: PUSH
47208: LD_VAR 0 4
47212: PUSH
47213: LD_VAR 0 1
47217: PPUSH
47218: CALL_OW 437
47222: PUSH
47223: LD_INT 1
47225: ARRAY
47226: PUSH
47227: LD_INT 2
47229: ARRAY
47230: EQUAL
47231: AND
47232: PUSH
47233: LD_VAR 0 5
47237: PUSH
47238: LD_VAR 0 1
47242: PPUSH
47243: CALL_OW 437
47247: PUSH
47248: LD_INT 1
47250: ARRAY
47251: PUSH
47252: LD_INT 3
47254: ARRAY
47255: EQUAL
47256: AND
47257: IFFALSE 47269
// result := true else
47259: LD_ADDR_VAR 0 3
47263: PUSH
47264: LD_INT 1
47266: ST_TO_ADDR
47267: GO 47277
// result := false ;
47269: LD_ADDR_VAR 0 3
47273: PUSH
47274: LD_INT 0
47276: ST_TO_ADDR
// end else
47277: GO 47287
// result := false ;
47279: LD_ADDR_VAR 0 3
47283: PUSH
47284: LD_INT 0
47286: ST_TO_ADDR
// end ;
47287: LD_VAR 0 3
47291: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
47292: LD_INT 0
47294: PPUSH
47295: PPUSH
47296: PPUSH
47297: PPUSH
// if not unit or not area then
47298: LD_VAR 0 1
47302: NOT
47303: PUSH
47304: LD_VAR 0 2
47308: NOT
47309: OR
47310: IFFALSE 47314
// exit ;
47312: GO 47478
// tmp := AreaToList ( area , i ) ;
47314: LD_ADDR_VAR 0 6
47318: PUSH
47319: LD_VAR 0 2
47323: PPUSH
47324: LD_VAR 0 5
47328: PPUSH
47329: CALL_OW 517
47333: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
47334: LD_ADDR_VAR 0 5
47338: PUSH
47339: DOUBLE
47340: LD_INT 1
47342: DEC
47343: ST_TO_ADDR
47344: LD_VAR 0 6
47348: PUSH
47349: LD_INT 1
47351: ARRAY
47352: PUSH
47353: FOR_TO
47354: IFFALSE 47476
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
47356: LD_ADDR_VAR 0 7
47360: PUSH
47361: LD_VAR 0 6
47365: PUSH
47366: LD_INT 1
47368: ARRAY
47369: PUSH
47370: LD_VAR 0 5
47374: ARRAY
47375: PUSH
47376: LD_VAR 0 6
47380: PUSH
47381: LD_INT 2
47383: ARRAY
47384: PUSH
47385: LD_VAR 0 5
47389: ARRAY
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
47395: LD_VAR 0 7
47399: PUSH
47400: LD_INT 1
47402: ARRAY
47403: PPUSH
47404: LD_VAR 0 7
47408: PUSH
47409: LD_INT 2
47411: ARRAY
47412: PPUSH
47413: CALL_OW 428
47417: PUSH
47418: LD_INT 0
47420: EQUAL
47421: IFFALSE 47474
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
47423: LD_VAR 0 1
47427: PPUSH
47428: LD_VAR 0 7
47432: PUSH
47433: LD_INT 1
47435: ARRAY
47436: PPUSH
47437: LD_VAR 0 7
47441: PUSH
47442: LD_INT 2
47444: ARRAY
47445: PPUSH
47446: LD_VAR 0 3
47450: PPUSH
47451: CALL_OW 48
// result := IsPlaced ( unit ) ;
47455: LD_ADDR_VAR 0 4
47459: PUSH
47460: LD_VAR 0 1
47464: PPUSH
47465: CALL_OW 305
47469: ST_TO_ADDR
// exit ;
47470: POP
47471: POP
47472: GO 47478
// end ; end ;
47474: GO 47353
47476: POP
47477: POP
// end ;
47478: LD_VAR 0 4
47482: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47483: LD_INT 0
47485: PPUSH
47486: PPUSH
47487: PPUSH
// if not side or side > 8 then
47488: LD_VAR 0 1
47492: NOT
47493: PUSH
47494: LD_VAR 0 1
47498: PUSH
47499: LD_INT 8
47501: GREATER
47502: OR
47503: IFFALSE 47507
// exit ;
47505: GO 47694
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47507: LD_ADDR_VAR 0 4
47511: PUSH
47512: LD_INT 22
47514: PUSH
47515: LD_VAR 0 1
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 21
47526: PUSH
47527: LD_INT 3
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PPUSH
47538: CALL_OW 69
47542: ST_TO_ADDR
// if not tmp then
47543: LD_VAR 0 4
47547: NOT
47548: IFFALSE 47552
// exit ;
47550: GO 47694
// enable_addtolog := true ;
47552: LD_ADDR_OWVAR 81
47556: PUSH
47557: LD_INT 1
47559: ST_TO_ADDR
// AddToLog ( [ ) ;
47560: LD_STRING [
47562: PPUSH
47563: CALL_OW 561
// for i in tmp do
47567: LD_ADDR_VAR 0 3
47571: PUSH
47572: LD_VAR 0 4
47576: PUSH
47577: FOR_IN
47578: IFFALSE 47685
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
47580: LD_STRING [
47582: PUSH
47583: LD_VAR 0 3
47587: PPUSH
47588: CALL_OW 266
47592: STR
47593: PUSH
47594: LD_STRING , 
47596: STR
47597: PUSH
47598: LD_VAR 0 3
47602: PPUSH
47603: CALL_OW 250
47607: STR
47608: PUSH
47609: LD_STRING , 
47611: STR
47612: PUSH
47613: LD_VAR 0 3
47617: PPUSH
47618: CALL_OW 251
47622: STR
47623: PUSH
47624: LD_STRING , 
47626: STR
47627: PUSH
47628: LD_VAR 0 3
47632: PPUSH
47633: CALL_OW 254
47637: STR
47638: PUSH
47639: LD_STRING , 
47641: STR
47642: PUSH
47643: LD_VAR 0 3
47647: PPUSH
47648: LD_INT 1
47650: PPUSH
47651: CALL_OW 268
47655: STR
47656: PUSH
47657: LD_STRING , 
47659: STR
47660: PUSH
47661: LD_VAR 0 3
47665: PPUSH
47666: LD_INT 2
47668: PPUSH
47669: CALL_OW 268
47673: STR
47674: PUSH
47675: LD_STRING ],
47677: STR
47678: PPUSH
47679: CALL_OW 561
// end ;
47683: GO 47577
47685: POP
47686: POP
// AddToLog ( ]; ) ;
47687: LD_STRING ];
47689: PPUSH
47690: CALL_OW 561
// end ;
47694: LD_VAR 0 2
47698: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47699: LD_INT 0
47701: PPUSH
47702: PPUSH
47703: PPUSH
47704: PPUSH
47705: PPUSH
// if not area or not rate or not max then
47706: LD_VAR 0 1
47710: NOT
47711: PUSH
47712: LD_VAR 0 2
47716: NOT
47717: OR
47718: PUSH
47719: LD_VAR 0 4
47723: NOT
47724: OR
47725: IFFALSE 47729
// exit ;
47727: GO 47921
// while 1 do
47729: LD_INT 1
47731: IFFALSE 47921
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
47733: LD_ADDR_VAR 0 9
47737: PUSH
47738: LD_VAR 0 1
47742: PPUSH
47743: LD_INT 1
47745: PPUSH
47746: CALL_OW 287
47750: PUSH
47751: LD_INT 10
47753: MUL
47754: ST_TO_ADDR
// r := rate / 10 ;
47755: LD_ADDR_VAR 0 7
47759: PUSH
47760: LD_VAR 0 2
47764: PUSH
47765: LD_INT 10
47767: DIVREAL
47768: ST_TO_ADDR
// time := 1 1$00 ;
47769: LD_ADDR_VAR 0 8
47773: PUSH
47774: LD_INT 2100
47776: ST_TO_ADDR
// if amount < min then
47777: LD_VAR 0 9
47781: PUSH
47782: LD_VAR 0 3
47786: LESS
47787: IFFALSE 47805
// r := r * 2 else
47789: LD_ADDR_VAR 0 7
47793: PUSH
47794: LD_VAR 0 7
47798: PUSH
47799: LD_INT 2
47801: MUL
47802: ST_TO_ADDR
47803: GO 47831
// if amount > max then
47805: LD_VAR 0 9
47809: PUSH
47810: LD_VAR 0 4
47814: GREATER
47815: IFFALSE 47831
// r := r / 2 ;
47817: LD_ADDR_VAR 0 7
47821: PUSH
47822: LD_VAR 0 7
47826: PUSH
47827: LD_INT 2
47829: DIVREAL
47830: ST_TO_ADDR
// time := time / r ;
47831: LD_ADDR_VAR 0 8
47835: PUSH
47836: LD_VAR 0 8
47840: PUSH
47841: LD_VAR 0 7
47845: DIVREAL
47846: ST_TO_ADDR
// if time < 0 then
47847: LD_VAR 0 8
47851: PUSH
47852: LD_INT 0
47854: LESS
47855: IFFALSE 47872
// time := time * - 1 ;
47857: LD_ADDR_VAR 0 8
47861: PUSH
47862: LD_VAR 0 8
47866: PUSH
47867: LD_INT 1
47869: NEG
47870: MUL
47871: ST_TO_ADDR
// wait ( time ) ;
47872: LD_VAR 0 8
47876: PPUSH
47877: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
47881: LD_INT 35
47883: PPUSH
47884: LD_INT 875
47886: PPUSH
47887: CALL_OW 12
47891: PPUSH
47892: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47896: LD_INT 1
47898: PPUSH
47899: LD_INT 5
47901: PPUSH
47902: CALL_OW 12
47906: PPUSH
47907: LD_VAR 0 1
47911: PPUSH
47912: LD_INT 1
47914: PPUSH
47915: CALL_OW 55
// end ;
47919: GO 47729
// end ;
47921: LD_VAR 0 5
47925: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47926: LD_INT 0
47928: PPUSH
47929: PPUSH
47930: PPUSH
47931: PPUSH
47932: PPUSH
47933: PPUSH
47934: PPUSH
47935: PPUSH
// if not turrets or not factories then
47936: LD_VAR 0 1
47940: NOT
47941: PUSH
47942: LD_VAR 0 2
47946: NOT
47947: OR
47948: IFFALSE 47952
// exit ;
47950: GO 48259
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47952: LD_ADDR_VAR 0 10
47956: PUSH
47957: LD_INT 5
47959: PUSH
47960: LD_INT 6
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 2
47969: PUSH
47970: LD_INT 4
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 3
47979: PUSH
47980: LD_INT 5
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 24
47994: PUSH
47995: LD_INT 25
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 23
48004: PUSH
48005: LD_INT 27
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 42
48018: PUSH
48019: LD_INT 43
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 44
48028: PUSH
48029: LD_INT 46
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 45
48038: PUSH
48039: LD_INT 47
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: LIST
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: LIST
48055: ST_TO_ADDR
// result := [ ] ;
48056: LD_ADDR_VAR 0 3
48060: PUSH
48061: EMPTY
48062: ST_TO_ADDR
// for i in turrets do
48063: LD_ADDR_VAR 0 4
48067: PUSH
48068: LD_VAR 0 1
48072: PUSH
48073: FOR_IN
48074: IFFALSE 48257
// begin nat := GetNation ( i ) ;
48076: LD_ADDR_VAR 0 7
48080: PUSH
48081: LD_VAR 0 4
48085: PPUSH
48086: CALL_OW 248
48090: ST_TO_ADDR
// weapon := 0 ;
48091: LD_ADDR_VAR 0 8
48095: PUSH
48096: LD_INT 0
48098: ST_TO_ADDR
// if not nat then
48099: LD_VAR 0 7
48103: NOT
48104: IFFALSE 48108
// continue ;
48106: GO 48073
// for j in list [ nat ] do
48108: LD_ADDR_VAR 0 5
48112: PUSH
48113: LD_VAR 0 10
48117: PUSH
48118: LD_VAR 0 7
48122: ARRAY
48123: PUSH
48124: FOR_IN
48125: IFFALSE 48166
// if GetBWeapon ( i ) = j [ 1 ] then
48127: LD_VAR 0 4
48131: PPUSH
48132: CALL_OW 269
48136: PUSH
48137: LD_VAR 0 5
48141: PUSH
48142: LD_INT 1
48144: ARRAY
48145: EQUAL
48146: IFFALSE 48164
// begin weapon := j [ 2 ] ;
48148: LD_ADDR_VAR 0 8
48152: PUSH
48153: LD_VAR 0 5
48157: PUSH
48158: LD_INT 2
48160: ARRAY
48161: ST_TO_ADDR
// break ;
48162: GO 48166
// end ;
48164: GO 48124
48166: POP
48167: POP
// if not weapon then
48168: LD_VAR 0 8
48172: NOT
48173: IFFALSE 48177
// continue ;
48175: GO 48073
// for k in factories do
48177: LD_ADDR_VAR 0 6
48181: PUSH
48182: LD_VAR 0 2
48186: PUSH
48187: FOR_IN
48188: IFFALSE 48253
// begin weapons := AvailableWeaponList ( k ) ;
48190: LD_ADDR_VAR 0 9
48194: PUSH
48195: LD_VAR 0 6
48199: PPUSH
48200: CALL_OW 478
48204: ST_TO_ADDR
// if not weapons then
48205: LD_VAR 0 9
48209: NOT
48210: IFFALSE 48214
// continue ;
48212: GO 48187
// if weapon in weapons then
48214: LD_VAR 0 8
48218: PUSH
48219: LD_VAR 0 9
48223: IN
48224: IFFALSE 48251
// begin result := [ i , weapon ] ;
48226: LD_ADDR_VAR 0 3
48230: PUSH
48231: LD_VAR 0 4
48235: PUSH
48236: LD_VAR 0 8
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: ST_TO_ADDR
// exit ;
48245: POP
48246: POP
48247: POP
48248: POP
48249: GO 48259
// end ; end ;
48251: GO 48187
48253: POP
48254: POP
// end ;
48255: GO 48073
48257: POP
48258: POP
// end ;
48259: LD_VAR 0 3
48263: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
48264: LD_INT 0
48266: PPUSH
// if not side or side > 8 then
48267: LD_VAR 0 3
48271: NOT
48272: PUSH
48273: LD_VAR 0 3
48277: PUSH
48278: LD_INT 8
48280: GREATER
48281: OR
48282: IFFALSE 48286
// exit ;
48284: GO 48345
// if not range then
48286: LD_VAR 0 4
48290: NOT
48291: IFFALSE 48302
// range := - 12 ;
48293: LD_ADDR_VAR 0 4
48297: PUSH
48298: LD_INT 12
48300: NEG
48301: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
48302: LD_VAR 0 1
48306: PPUSH
48307: LD_VAR 0 2
48311: PPUSH
48312: LD_VAR 0 3
48316: PPUSH
48317: LD_VAR 0 4
48321: PPUSH
48322: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
48326: LD_VAR 0 1
48330: PPUSH
48331: LD_VAR 0 2
48335: PPUSH
48336: LD_VAR 0 3
48340: PPUSH
48341: CALL_OW 331
// end ;
48345: LD_VAR 0 5
48349: RET
// export function Video ( mode ) ; begin
48350: LD_INT 0
48352: PPUSH
// ingame_video = mode ;
48353: LD_ADDR_OWVAR 52
48357: PUSH
48358: LD_VAR 0 1
48362: ST_TO_ADDR
// interface_hidden = mode ;
48363: LD_ADDR_OWVAR 54
48367: PUSH
48368: LD_VAR 0 1
48372: ST_TO_ADDR
// end ;
48373: LD_VAR 0 2
48377: RET
// export function Join ( array , element ) ; begin
48378: LD_INT 0
48380: PPUSH
// result := array ^ element ;
48381: LD_ADDR_VAR 0 3
48385: PUSH
48386: LD_VAR 0 1
48390: PUSH
48391: LD_VAR 0 2
48395: ADD
48396: ST_TO_ADDR
// end ;
48397: LD_VAR 0 3
48401: RET
// export function JoinUnion ( array , element ) ; begin
48402: LD_INT 0
48404: PPUSH
// result := array union element ;
48405: LD_ADDR_VAR 0 3
48409: PUSH
48410: LD_VAR 0 1
48414: PUSH
48415: LD_VAR 0 2
48419: UNION
48420: ST_TO_ADDR
// end ;
48421: LD_VAR 0 3
48425: RET
// export function GetBehemoths ( side ) ; begin
48426: LD_INT 0
48428: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
48429: LD_ADDR_VAR 0 2
48433: PUSH
48434: LD_INT 22
48436: PUSH
48437: LD_VAR 0 1
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 31
48448: PUSH
48449: LD_INT 25
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PPUSH
48460: CALL_OW 69
48464: ST_TO_ADDR
// end ;
48465: LD_VAR 0 2
48469: RET
// export function Shuffle ( array ) ; var i , index ; begin
48470: LD_INT 0
48472: PPUSH
48473: PPUSH
48474: PPUSH
// result := [ ] ;
48475: LD_ADDR_VAR 0 2
48479: PUSH
48480: EMPTY
48481: ST_TO_ADDR
// if not array then
48482: LD_VAR 0 1
48486: NOT
48487: IFFALSE 48491
// exit ;
48489: GO 48590
// Randomize ;
48491: CALL_OW 10
// for i = array downto 1 do
48495: LD_ADDR_VAR 0 3
48499: PUSH
48500: DOUBLE
48501: LD_VAR 0 1
48505: INC
48506: ST_TO_ADDR
48507: LD_INT 1
48509: PUSH
48510: FOR_DOWNTO
48511: IFFALSE 48588
// begin index := rand ( 1 , array ) ;
48513: LD_ADDR_VAR 0 4
48517: PUSH
48518: LD_INT 1
48520: PPUSH
48521: LD_VAR 0 1
48525: PPUSH
48526: CALL_OW 12
48530: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
48531: LD_ADDR_VAR 0 2
48535: PUSH
48536: LD_VAR 0 2
48540: PPUSH
48541: LD_VAR 0 2
48545: PUSH
48546: LD_INT 1
48548: PLUS
48549: PPUSH
48550: LD_VAR 0 1
48554: PUSH
48555: LD_VAR 0 4
48559: ARRAY
48560: PPUSH
48561: CALL_OW 2
48565: ST_TO_ADDR
// array := Delete ( array , index ) ;
48566: LD_ADDR_VAR 0 1
48570: PUSH
48571: LD_VAR 0 1
48575: PPUSH
48576: LD_VAR 0 4
48580: PPUSH
48581: CALL_OW 3
48585: ST_TO_ADDR
// end ;
48586: GO 48510
48588: POP
48589: POP
// end ;
48590: LD_VAR 0 2
48594: RET
// export function GetBaseMaterials ( base ) ; begin
48595: LD_INT 0
48597: PPUSH
// result := [ 0 , 0 , 0 ] ;
48598: LD_ADDR_VAR 0 2
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: LIST
48616: ST_TO_ADDR
// if not base then
48617: LD_VAR 0 1
48621: NOT
48622: IFFALSE 48626
// exit ;
48624: GO 48675
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
48626: LD_ADDR_VAR 0 2
48630: PUSH
48631: LD_VAR 0 1
48635: PPUSH
48636: LD_INT 1
48638: PPUSH
48639: CALL_OW 275
48643: PUSH
48644: LD_VAR 0 1
48648: PPUSH
48649: LD_INT 2
48651: PPUSH
48652: CALL_OW 275
48656: PUSH
48657: LD_VAR 0 1
48661: PPUSH
48662: LD_INT 3
48664: PPUSH
48665: CALL_OW 275
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: LIST
48674: ST_TO_ADDR
// end ;
48675: LD_VAR 0 2
48679: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48680: LD_INT 0
48682: PPUSH
48683: PPUSH
// result := array ;
48684: LD_ADDR_VAR 0 3
48688: PUSH
48689: LD_VAR 0 1
48693: ST_TO_ADDR
// if size > 0 then
48694: LD_VAR 0 2
48698: PUSH
48699: LD_INT 0
48701: GREATER
48702: IFFALSE 48748
// for i := array downto size do
48704: LD_ADDR_VAR 0 4
48708: PUSH
48709: DOUBLE
48710: LD_VAR 0 1
48714: INC
48715: ST_TO_ADDR
48716: LD_VAR 0 2
48720: PUSH
48721: FOR_DOWNTO
48722: IFFALSE 48746
// result := Delete ( result , result ) ;
48724: LD_ADDR_VAR 0 3
48728: PUSH
48729: LD_VAR 0 3
48733: PPUSH
48734: LD_VAR 0 3
48738: PPUSH
48739: CALL_OW 3
48743: ST_TO_ADDR
48744: GO 48721
48746: POP
48747: POP
// end ;
48748: LD_VAR 0 3
48752: RET
// export function ComExit ( unit ) ; var tmp ; begin
48753: LD_INT 0
48755: PPUSH
48756: PPUSH
// if not IsInUnit ( unit ) then
48757: LD_VAR 0 1
48761: PPUSH
48762: CALL_OW 310
48766: NOT
48767: IFFALSE 48771
// exit ;
48769: GO 48831
// tmp := IsInUnit ( unit ) ;
48771: LD_ADDR_VAR 0 3
48775: PUSH
48776: LD_VAR 0 1
48780: PPUSH
48781: CALL_OW 310
48785: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48786: LD_VAR 0 3
48790: PPUSH
48791: CALL_OW 247
48795: PUSH
48796: LD_INT 2
48798: EQUAL
48799: IFFALSE 48812
// ComExitVehicle ( unit ) else
48801: LD_VAR 0 1
48805: PPUSH
48806: CALL_OW 121
48810: GO 48821
// ComExitBuilding ( unit ) ;
48812: LD_VAR 0 1
48816: PPUSH
48817: CALL_OW 122
// result := tmp ;
48821: LD_ADDR_VAR 0 2
48825: PUSH
48826: LD_VAR 0 3
48830: ST_TO_ADDR
// end ;
48831: LD_VAR 0 2
48835: RET
// export function ResetHc ; begin
48836: LD_INT 0
48838: PPUSH
// InitHc ;
48839: CALL_OW 19
// hc_importance := 0 ;
48843: LD_ADDR_OWVAR 32
48847: PUSH
48848: LD_INT 0
48850: ST_TO_ADDR
// end ; end_of_file
48851: LD_VAR 0 1
48855: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
48856: GO 48858
48858: DISABLE
// begin ru_radar := 98 ;
48859: LD_ADDR_EXP 48
48863: PUSH
48864: LD_INT 98
48866: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
48867: LD_ADDR_EXP 49
48871: PUSH
48872: LD_INT 89
48874: ST_TO_ADDR
// us_hack := 99 ;
48875: LD_ADDR_EXP 50
48879: PUSH
48880: LD_INT 99
48882: ST_TO_ADDR
// us_artillery := 97 ;
48883: LD_ADDR_EXP 51
48887: PUSH
48888: LD_INT 97
48890: ST_TO_ADDR
// ar_bio_bomb := 91 ;
48891: LD_ADDR_EXP 52
48895: PUSH
48896: LD_INT 91
48898: ST_TO_ADDR
// tech_Artillery := 80 ;
48899: LD_ADDR_EXP 53
48903: PUSH
48904: LD_INT 80
48906: ST_TO_ADDR
// tech_RadMat := 81 ;
48907: LD_ADDR_EXP 54
48911: PUSH
48912: LD_INT 81
48914: ST_TO_ADDR
// tech_BasicTools := 82 ;
48915: LD_ADDR_EXP 55
48919: PUSH
48920: LD_INT 82
48922: ST_TO_ADDR
// tech_Cargo := 83 ;
48923: LD_ADDR_EXP 56
48927: PUSH
48928: LD_INT 83
48930: ST_TO_ADDR
// tech_Track := 84 ;
48931: LD_ADDR_EXP 57
48935: PUSH
48936: LD_INT 84
48938: ST_TO_ADDR
// tech_Crane := 85 ;
48939: LD_ADDR_EXP 58
48943: PUSH
48944: LD_INT 85
48946: ST_TO_ADDR
// tech_Bulldozer := 86 ;
48947: LD_ADDR_EXP 59
48951: PUSH
48952: LD_INT 86
48954: ST_TO_ADDR
// tech_Hovercraft := 87 ;
48955: LD_ADDR_EXP 60
48959: PUSH
48960: LD_INT 87
48962: ST_TO_ADDR
// end ; end_of_file
48963: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
48964: LD_INT 0
48966: PPUSH
48967: PPUSH
// skirmish := false ;
48968: LD_ADDR_EXP 61
48972: PUSH
48973: LD_INT 0
48975: ST_TO_ADDR
// debug_mc := false ;
48976: LD_ADDR_EXP 62
48980: PUSH
48981: LD_INT 0
48983: ST_TO_ADDR
// mc_bases := [ ] ;
48984: LD_ADDR_EXP 63
48988: PUSH
48989: EMPTY
48990: ST_TO_ADDR
// mc_sides := [ ] ;
48991: LD_ADDR_EXP 89
48995: PUSH
48996: EMPTY
48997: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
48998: LD_ADDR_EXP 64
49002: PUSH
49003: EMPTY
49004: ST_TO_ADDR
// mc_building_repairs := [ ] ;
49005: LD_ADDR_EXP 65
49009: PUSH
49010: EMPTY
49011: ST_TO_ADDR
// mc_need_heal := [ ] ;
49012: LD_ADDR_EXP 66
49016: PUSH
49017: EMPTY
49018: ST_TO_ADDR
// mc_healers := [ ] ;
49019: LD_ADDR_EXP 67
49023: PUSH
49024: EMPTY
49025: ST_TO_ADDR
// mc_build_list := [ ] ;
49026: LD_ADDR_EXP 68
49030: PUSH
49031: EMPTY
49032: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
49033: LD_ADDR_EXP 95
49037: PUSH
49038: EMPTY
49039: ST_TO_ADDR
// mc_builders := [ ] ;
49040: LD_ADDR_EXP 69
49044: PUSH
49045: EMPTY
49046: ST_TO_ADDR
// mc_construct_list := [ ] ;
49047: LD_ADDR_EXP 70
49051: PUSH
49052: EMPTY
49053: ST_TO_ADDR
// mc_turret_list := [ ] ;
49054: LD_ADDR_EXP 71
49058: PUSH
49059: EMPTY
49060: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
49061: LD_ADDR_EXP 72
49065: PUSH
49066: EMPTY
49067: ST_TO_ADDR
// mc_miners := [ ] ;
49068: LD_ADDR_EXP 77
49072: PUSH
49073: EMPTY
49074: ST_TO_ADDR
// mc_mines := [ ] ;
49075: LD_ADDR_EXP 76
49079: PUSH
49080: EMPTY
49081: ST_TO_ADDR
// mc_minefields := [ ] ;
49082: LD_ADDR_EXP 78
49086: PUSH
49087: EMPTY
49088: ST_TO_ADDR
// mc_crates := [ ] ;
49089: LD_ADDR_EXP 79
49093: PUSH
49094: EMPTY
49095: ST_TO_ADDR
// mc_crates_collector := [ ] ;
49096: LD_ADDR_EXP 80
49100: PUSH
49101: EMPTY
49102: ST_TO_ADDR
// mc_crates_area := [ ] ;
49103: LD_ADDR_EXP 81
49107: PUSH
49108: EMPTY
49109: ST_TO_ADDR
// mc_vehicles := [ ] ;
49110: LD_ADDR_EXP 82
49114: PUSH
49115: EMPTY
49116: ST_TO_ADDR
// mc_attack := [ ] ;
49117: LD_ADDR_EXP 83
49121: PUSH
49122: EMPTY
49123: ST_TO_ADDR
// mc_produce := [ ] ;
49124: LD_ADDR_EXP 84
49128: PUSH
49129: EMPTY
49130: ST_TO_ADDR
// mc_defender := [ ] ;
49131: LD_ADDR_EXP 85
49135: PUSH
49136: EMPTY
49137: ST_TO_ADDR
// mc_parking := [ ] ;
49138: LD_ADDR_EXP 87
49142: PUSH
49143: EMPTY
49144: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
49145: LD_ADDR_EXP 73
49149: PUSH
49150: EMPTY
49151: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
49152: LD_ADDR_EXP 75
49156: PUSH
49157: EMPTY
49158: ST_TO_ADDR
// mc_scan := [ ] ;
49159: LD_ADDR_EXP 86
49163: PUSH
49164: EMPTY
49165: ST_TO_ADDR
// mc_scan_area := [ ] ;
49166: LD_ADDR_EXP 88
49170: PUSH
49171: EMPTY
49172: ST_TO_ADDR
// mc_tech := [ ] ;
49173: LD_ADDR_EXP 90
49177: PUSH
49178: EMPTY
49179: ST_TO_ADDR
// mc_class := [ ] ;
49180: LD_ADDR_EXP 104
49184: PUSH
49185: EMPTY
49186: ST_TO_ADDR
// mc_class_case_use := [ ] ;
49187: LD_ADDR_EXP 105
49191: PUSH
49192: EMPTY
49193: ST_TO_ADDR
// end ;
49194: LD_VAR 0 1
49198: RET
// export function MC_Kill ( base ) ; begin
49199: LD_INT 0
49201: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
49202: LD_ADDR_EXP 63
49206: PUSH
49207: LD_EXP 63
49211: PPUSH
49212: LD_VAR 0 1
49216: PPUSH
49217: EMPTY
49218: PPUSH
49219: CALL_OW 1
49223: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
49224: LD_ADDR_EXP 64
49228: PUSH
49229: LD_EXP 64
49233: PPUSH
49234: LD_VAR 0 1
49238: PPUSH
49239: EMPTY
49240: PPUSH
49241: CALL_OW 1
49245: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
49246: LD_ADDR_EXP 65
49250: PUSH
49251: LD_EXP 65
49255: PPUSH
49256: LD_VAR 0 1
49260: PPUSH
49261: EMPTY
49262: PPUSH
49263: CALL_OW 1
49267: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
49268: LD_ADDR_EXP 66
49272: PUSH
49273: LD_EXP 66
49277: PPUSH
49278: LD_VAR 0 1
49282: PPUSH
49283: EMPTY
49284: PPUSH
49285: CALL_OW 1
49289: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
49290: LD_ADDR_EXP 67
49294: PUSH
49295: LD_EXP 67
49299: PPUSH
49300: LD_VAR 0 1
49304: PPUSH
49305: EMPTY
49306: PPUSH
49307: CALL_OW 1
49311: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
49312: LD_ADDR_EXP 68
49316: PUSH
49317: LD_EXP 68
49321: PPUSH
49322: LD_VAR 0 1
49326: PPUSH
49327: EMPTY
49328: PPUSH
49329: CALL_OW 1
49333: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
49334: LD_ADDR_EXP 69
49338: PUSH
49339: LD_EXP 69
49343: PPUSH
49344: LD_VAR 0 1
49348: PPUSH
49349: EMPTY
49350: PPUSH
49351: CALL_OW 1
49355: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
49356: LD_ADDR_EXP 70
49360: PUSH
49361: LD_EXP 70
49365: PPUSH
49366: LD_VAR 0 1
49370: PPUSH
49371: EMPTY
49372: PPUSH
49373: CALL_OW 1
49377: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
49378: LD_ADDR_EXP 71
49382: PUSH
49383: LD_EXP 71
49387: PPUSH
49388: LD_VAR 0 1
49392: PPUSH
49393: EMPTY
49394: PPUSH
49395: CALL_OW 1
49399: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
49400: LD_ADDR_EXP 72
49404: PUSH
49405: LD_EXP 72
49409: PPUSH
49410: LD_VAR 0 1
49414: PPUSH
49415: EMPTY
49416: PPUSH
49417: CALL_OW 1
49421: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
49422: LD_ADDR_EXP 73
49426: PUSH
49427: LD_EXP 73
49431: PPUSH
49432: LD_VAR 0 1
49436: PPUSH
49437: EMPTY
49438: PPUSH
49439: CALL_OW 1
49443: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
49444: LD_ADDR_EXP 74
49448: PUSH
49449: LD_EXP 74
49453: PPUSH
49454: LD_VAR 0 1
49458: PPUSH
49459: LD_INT 0
49461: PPUSH
49462: CALL_OW 1
49466: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
49467: LD_ADDR_EXP 75
49471: PUSH
49472: LD_EXP 75
49476: PPUSH
49477: LD_VAR 0 1
49481: PPUSH
49482: EMPTY
49483: PPUSH
49484: CALL_OW 1
49488: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
49489: LD_ADDR_EXP 76
49493: PUSH
49494: LD_EXP 76
49498: PPUSH
49499: LD_VAR 0 1
49503: PPUSH
49504: EMPTY
49505: PPUSH
49506: CALL_OW 1
49510: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
49511: LD_ADDR_EXP 77
49515: PUSH
49516: LD_EXP 77
49520: PPUSH
49521: LD_VAR 0 1
49525: PPUSH
49526: EMPTY
49527: PPUSH
49528: CALL_OW 1
49532: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
49533: LD_ADDR_EXP 78
49537: PUSH
49538: LD_EXP 78
49542: PPUSH
49543: LD_VAR 0 1
49547: PPUSH
49548: EMPTY
49549: PPUSH
49550: CALL_OW 1
49554: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
49555: LD_ADDR_EXP 79
49559: PUSH
49560: LD_EXP 79
49564: PPUSH
49565: LD_VAR 0 1
49569: PPUSH
49570: EMPTY
49571: PPUSH
49572: CALL_OW 1
49576: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
49577: LD_ADDR_EXP 80
49581: PUSH
49582: LD_EXP 80
49586: PPUSH
49587: LD_VAR 0 1
49591: PPUSH
49592: EMPTY
49593: PPUSH
49594: CALL_OW 1
49598: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
49599: LD_ADDR_EXP 81
49603: PUSH
49604: LD_EXP 81
49608: PPUSH
49609: LD_VAR 0 1
49613: PPUSH
49614: EMPTY
49615: PPUSH
49616: CALL_OW 1
49620: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
49621: LD_ADDR_EXP 82
49625: PUSH
49626: LD_EXP 82
49630: PPUSH
49631: LD_VAR 0 1
49635: PPUSH
49636: EMPTY
49637: PPUSH
49638: CALL_OW 1
49642: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
49643: LD_ADDR_EXP 83
49647: PUSH
49648: LD_EXP 83
49652: PPUSH
49653: LD_VAR 0 1
49657: PPUSH
49658: EMPTY
49659: PPUSH
49660: CALL_OW 1
49664: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
49665: LD_ADDR_EXP 84
49669: PUSH
49670: LD_EXP 84
49674: PPUSH
49675: LD_VAR 0 1
49679: PPUSH
49680: EMPTY
49681: PPUSH
49682: CALL_OW 1
49686: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
49687: LD_ADDR_EXP 85
49691: PUSH
49692: LD_EXP 85
49696: PPUSH
49697: LD_VAR 0 1
49701: PPUSH
49702: EMPTY
49703: PPUSH
49704: CALL_OW 1
49708: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
49709: LD_ADDR_EXP 86
49713: PUSH
49714: LD_EXP 86
49718: PPUSH
49719: LD_VAR 0 1
49723: PPUSH
49724: EMPTY
49725: PPUSH
49726: CALL_OW 1
49730: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
49731: LD_ADDR_EXP 87
49735: PUSH
49736: LD_EXP 87
49740: PPUSH
49741: LD_VAR 0 1
49745: PPUSH
49746: EMPTY
49747: PPUSH
49748: CALL_OW 1
49752: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
49753: LD_ADDR_EXP 88
49757: PUSH
49758: LD_EXP 88
49762: PPUSH
49763: LD_VAR 0 1
49767: PPUSH
49768: EMPTY
49769: PPUSH
49770: CALL_OW 1
49774: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
49775: LD_ADDR_EXP 90
49779: PUSH
49780: LD_EXP 90
49784: PPUSH
49785: LD_VAR 0 1
49789: PPUSH
49790: EMPTY
49791: PPUSH
49792: CALL_OW 1
49796: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
49797: LD_ADDR_EXP 92
49801: PUSH
49802: LD_EXP 92
49806: PPUSH
49807: LD_VAR 0 1
49811: PPUSH
49812: EMPTY
49813: PPUSH
49814: CALL_OW 1
49818: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
49819: LD_ADDR_EXP 93
49823: PUSH
49824: LD_EXP 93
49828: PPUSH
49829: LD_VAR 0 1
49833: PPUSH
49834: EMPTY
49835: PPUSH
49836: CALL_OW 1
49840: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
49841: LD_ADDR_EXP 94
49845: PUSH
49846: LD_EXP 94
49850: PPUSH
49851: LD_VAR 0 1
49855: PPUSH
49856: EMPTY
49857: PPUSH
49858: CALL_OW 1
49862: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
49863: LD_ADDR_EXP 95
49867: PUSH
49868: LD_EXP 95
49872: PPUSH
49873: LD_VAR 0 1
49877: PPUSH
49878: EMPTY
49879: PPUSH
49880: CALL_OW 1
49884: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
49885: LD_ADDR_EXP 96
49889: PUSH
49890: LD_EXP 96
49894: PPUSH
49895: LD_VAR 0 1
49899: PPUSH
49900: EMPTY
49901: PPUSH
49902: CALL_OW 1
49906: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
49907: LD_ADDR_EXP 97
49911: PUSH
49912: LD_EXP 97
49916: PPUSH
49917: LD_VAR 0 1
49921: PPUSH
49922: EMPTY
49923: PPUSH
49924: CALL_OW 1
49928: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
49929: LD_ADDR_EXP 98
49933: PUSH
49934: LD_EXP 98
49938: PPUSH
49939: LD_VAR 0 1
49943: PPUSH
49944: EMPTY
49945: PPUSH
49946: CALL_OW 1
49950: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
49951: LD_ADDR_EXP 99
49955: PUSH
49956: LD_EXP 99
49960: PPUSH
49961: LD_VAR 0 1
49965: PPUSH
49966: EMPTY
49967: PPUSH
49968: CALL_OW 1
49972: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
49973: LD_ADDR_EXP 100
49977: PUSH
49978: LD_EXP 100
49982: PPUSH
49983: LD_VAR 0 1
49987: PPUSH
49988: EMPTY
49989: PPUSH
49990: CALL_OW 1
49994: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
49995: LD_ADDR_EXP 101
49999: PUSH
50000: LD_EXP 101
50004: PPUSH
50005: LD_VAR 0 1
50009: PPUSH
50010: EMPTY
50011: PPUSH
50012: CALL_OW 1
50016: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
50017: LD_ADDR_EXP 102
50021: PUSH
50022: LD_EXP 102
50026: PPUSH
50027: LD_VAR 0 1
50031: PPUSH
50032: EMPTY
50033: PPUSH
50034: CALL_OW 1
50038: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
50039: LD_ADDR_EXP 103
50043: PUSH
50044: LD_EXP 103
50048: PPUSH
50049: LD_VAR 0 1
50053: PPUSH
50054: EMPTY
50055: PPUSH
50056: CALL_OW 1
50060: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
50061: LD_ADDR_EXP 104
50065: PUSH
50066: LD_EXP 104
50070: PPUSH
50071: LD_VAR 0 1
50075: PPUSH
50076: EMPTY
50077: PPUSH
50078: CALL_OW 1
50082: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
50083: LD_ADDR_EXP 105
50087: PUSH
50088: LD_EXP 105
50092: PPUSH
50093: LD_VAR 0 1
50097: PPUSH
50098: LD_INT 0
50100: PPUSH
50101: CALL_OW 1
50105: ST_TO_ADDR
// end ;
50106: LD_VAR 0 2
50110: RET
// export function MC_Add ( side , units ) ; var base ; begin
50111: LD_INT 0
50113: PPUSH
50114: PPUSH
// base := mc_bases + 1 ;
50115: LD_ADDR_VAR 0 4
50119: PUSH
50120: LD_EXP 63
50124: PUSH
50125: LD_INT 1
50127: PLUS
50128: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
50129: LD_ADDR_EXP 89
50133: PUSH
50134: LD_EXP 89
50138: PPUSH
50139: LD_VAR 0 4
50143: PPUSH
50144: LD_VAR 0 1
50148: PPUSH
50149: CALL_OW 1
50153: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
50154: LD_ADDR_EXP 63
50158: PUSH
50159: LD_EXP 63
50163: PPUSH
50164: LD_VAR 0 4
50168: PPUSH
50169: LD_VAR 0 2
50173: PPUSH
50174: CALL_OW 1
50178: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
50179: LD_ADDR_EXP 64
50183: PUSH
50184: LD_EXP 64
50188: PPUSH
50189: LD_VAR 0 4
50193: PPUSH
50194: EMPTY
50195: PPUSH
50196: CALL_OW 1
50200: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
50201: LD_ADDR_EXP 65
50205: PUSH
50206: LD_EXP 65
50210: PPUSH
50211: LD_VAR 0 4
50215: PPUSH
50216: EMPTY
50217: PPUSH
50218: CALL_OW 1
50222: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
50223: LD_ADDR_EXP 66
50227: PUSH
50228: LD_EXP 66
50232: PPUSH
50233: LD_VAR 0 4
50237: PPUSH
50238: EMPTY
50239: PPUSH
50240: CALL_OW 1
50244: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
50245: LD_ADDR_EXP 67
50249: PUSH
50250: LD_EXP 67
50254: PPUSH
50255: LD_VAR 0 4
50259: PPUSH
50260: EMPTY
50261: PPUSH
50262: CALL_OW 1
50266: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
50267: LD_ADDR_EXP 68
50271: PUSH
50272: LD_EXP 68
50276: PPUSH
50277: LD_VAR 0 4
50281: PPUSH
50282: EMPTY
50283: PPUSH
50284: CALL_OW 1
50288: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
50289: LD_ADDR_EXP 69
50293: PUSH
50294: LD_EXP 69
50298: PPUSH
50299: LD_VAR 0 4
50303: PPUSH
50304: EMPTY
50305: PPUSH
50306: CALL_OW 1
50310: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
50311: LD_ADDR_EXP 70
50315: PUSH
50316: LD_EXP 70
50320: PPUSH
50321: LD_VAR 0 4
50325: PPUSH
50326: EMPTY
50327: PPUSH
50328: CALL_OW 1
50332: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
50333: LD_ADDR_EXP 71
50337: PUSH
50338: LD_EXP 71
50342: PPUSH
50343: LD_VAR 0 4
50347: PPUSH
50348: EMPTY
50349: PPUSH
50350: CALL_OW 1
50354: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
50355: LD_ADDR_EXP 72
50359: PUSH
50360: LD_EXP 72
50364: PPUSH
50365: LD_VAR 0 4
50369: PPUSH
50370: EMPTY
50371: PPUSH
50372: CALL_OW 1
50376: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
50377: LD_ADDR_EXP 73
50381: PUSH
50382: LD_EXP 73
50386: PPUSH
50387: LD_VAR 0 4
50391: PPUSH
50392: EMPTY
50393: PPUSH
50394: CALL_OW 1
50398: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
50399: LD_ADDR_EXP 74
50403: PUSH
50404: LD_EXP 74
50408: PPUSH
50409: LD_VAR 0 4
50413: PPUSH
50414: LD_INT 0
50416: PPUSH
50417: CALL_OW 1
50421: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
50422: LD_ADDR_EXP 75
50426: PUSH
50427: LD_EXP 75
50431: PPUSH
50432: LD_VAR 0 4
50436: PPUSH
50437: EMPTY
50438: PPUSH
50439: CALL_OW 1
50443: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
50444: LD_ADDR_EXP 76
50448: PUSH
50449: LD_EXP 76
50453: PPUSH
50454: LD_VAR 0 4
50458: PPUSH
50459: EMPTY
50460: PPUSH
50461: CALL_OW 1
50465: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
50466: LD_ADDR_EXP 77
50470: PUSH
50471: LD_EXP 77
50475: PPUSH
50476: LD_VAR 0 4
50480: PPUSH
50481: EMPTY
50482: PPUSH
50483: CALL_OW 1
50487: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
50488: LD_ADDR_EXP 78
50492: PUSH
50493: LD_EXP 78
50497: PPUSH
50498: LD_VAR 0 4
50502: PPUSH
50503: EMPTY
50504: PPUSH
50505: CALL_OW 1
50509: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
50510: LD_ADDR_EXP 79
50514: PUSH
50515: LD_EXP 79
50519: PPUSH
50520: LD_VAR 0 4
50524: PPUSH
50525: EMPTY
50526: PPUSH
50527: CALL_OW 1
50531: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
50532: LD_ADDR_EXP 80
50536: PUSH
50537: LD_EXP 80
50541: PPUSH
50542: LD_VAR 0 4
50546: PPUSH
50547: EMPTY
50548: PPUSH
50549: CALL_OW 1
50553: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
50554: LD_ADDR_EXP 81
50558: PUSH
50559: LD_EXP 81
50563: PPUSH
50564: LD_VAR 0 4
50568: PPUSH
50569: EMPTY
50570: PPUSH
50571: CALL_OW 1
50575: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
50576: LD_ADDR_EXP 82
50580: PUSH
50581: LD_EXP 82
50585: PPUSH
50586: LD_VAR 0 4
50590: PPUSH
50591: EMPTY
50592: PPUSH
50593: CALL_OW 1
50597: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
50598: LD_ADDR_EXP 83
50602: PUSH
50603: LD_EXP 83
50607: PPUSH
50608: LD_VAR 0 4
50612: PPUSH
50613: EMPTY
50614: PPUSH
50615: CALL_OW 1
50619: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
50620: LD_ADDR_EXP 84
50624: PUSH
50625: LD_EXP 84
50629: PPUSH
50630: LD_VAR 0 4
50634: PPUSH
50635: EMPTY
50636: PPUSH
50637: CALL_OW 1
50641: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
50642: LD_ADDR_EXP 85
50646: PUSH
50647: LD_EXP 85
50651: PPUSH
50652: LD_VAR 0 4
50656: PPUSH
50657: EMPTY
50658: PPUSH
50659: CALL_OW 1
50663: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
50664: LD_ADDR_EXP 86
50668: PUSH
50669: LD_EXP 86
50673: PPUSH
50674: LD_VAR 0 4
50678: PPUSH
50679: EMPTY
50680: PPUSH
50681: CALL_OW 1
50685: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
50686: LD_ADDR_EXP 87
50690: PUSH
50691: LD_EXP 87
50695: PPUSH
50696: LD_VAR 0 4
50700: PPUSH
50701: EMPTY
50702: PPUSH
50703: CALL_OW 1
50707: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
50708: LD_ADDR_EXP 88
50712: PUSH
50713: LD_EXP 88
50717: PPUSH
50718: LD_VAR 0 4
50722: PPUSH
50723: EMPTY
50724: PPUSH
50725: CALL_OW 1
50729: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
50730: LD_ADDR_EXP 90
50734: PUSH
50735: LD_EXP 90
50739: PPUSH
50740: LD_VAR 0 4
50744: PPUSH
50745: EMPTY
50746: PPUSH
50747: CALL_OW 1
50751: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
50752: LD_ADDR_EXP 92
50756: PUSH
50757: LD_EXP 92
50761: PPUSH
50762: LD_VAR 0 4
50766: PPUSH
50767: EMPTY
50768: PPUSH
50769: CALL_OW 1
50773: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
50774: LD_ADDR_EXP 93
50778: PUSH
50779: LD_EXP 93
50783: PPUSH
50784: LD_VAR 0 4
50788: PPUSH
50789: EMPTY
50790: PPUSH
50791: CALL_OW 1
50795: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
50796: LD_ADDR_EXP 94
50800: PUSH
50801: LD_EXP 94
50805: PPUSH
50806: LD_VAR 0 4
50810: PPUSH
50811: EMPTY
50812: PPUSH
50813: CALL_OW 1
50817: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
50818: LD_ADDR_EXP 95
50822: PUSH
50823: LD_EXP 95
50827: PPUSH
50828: LD_VAR 0 4
50832: PPUSH
50833: EMPTY
50834: PPUSH
50835: CALL_OW 1
50839: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
50840: LD_ADDR_EXP 96
50844: PUSH
50845: LD_EXP 96
50849: PPUSH
50850: LD_VAR 0 4
50854: PPUSH
50855: EMPTY
50856: PPUSH
50857: CALL_OW 1
50861: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
50862: LD_ADDR_EXP 97
50866: PUSH
50867: LD_EXP 97
50871: PPUSH
50872: LD_VAR 0 4
50876: PPUSH
50877: EMPTY
50878: PPUSH
50879: CALL_OW 1
50883: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
50884: LD_ADDR_EXP 98
50888: PUSH
50889: LD_EXP 98
50893: PPUSH
50894: LD_VAR 0 4
50898: PPUSH
50899: EMPTY
50900: PPUSH
50901: CALL_OW 1
50905: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
50906: LD_ADDR_EXP 99
50910: PUSH
50911: LD_EXP 99
50915: PPUSH
50916: LD_VAR 0 4
50920: PPUSH
50921: EMPTY
50922: PPUSH
50923: CALL_OW 1
50927: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
50928: LD_ADDR_EXP 100
50932: PUSH
50933: LD_EXP 100
50937: PPUSH
50938: LD_VAR 0 4
50942: PPUSH
50943: EMPTY
50944: PPUSH
50945: CALL_OW 1
50949: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
50950: LD_ADDR_EXP 101
50954: PUSH
50955: LD_EXP 101
50959: PPUSH
50960: LD_VAR 0 4
50964: PPUSH
50965: EMPTY
50966: PPUSH
50967: CALL_OW 1
50971: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
50972: LD_ADDR_EXP 102
50976: PUSH
50977: LD_EXP 102
50981: PPUSH
50982: LD_VAR 0 4
50986: PPUSH
50987: EMPTY
50988: PPUSH
50989: CALL_OW 1
50993: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
50994: LD_ADDR_EXP 103
50998: PUSH
50999: LD_EXP 103
51003: PPUSH
51004: LD_VAR 0 4
51008: PPUSH
51009: EMPTY
51010: PPUSH
51011: CALL_OW 1
51015: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
51016: LD_ADDR_EXP 104
51020: PUSH
51021: LD_EXP 104
51025: PPUSH
51026: LD_VAR 0 4
51030: PPUSH
51031: EMPTY
51032: PPUSH
51033: CALL_OW 1
51037: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
51038: LD_ADDR_EXP 105
51042: PUSH
51043: LD_EXP 105
51047: PPUSH
51048: LD_VAR 0 4
51052: PPUSH
51053: LD_INT 0
51055: PPUSH
51056: CALL_OW 1
51060: ST_TO_ADDR
// result := base ;
51061: LD_ADDR_VAR 0 3
51065: PUSH
51066: LD_VAR 0 4
51070: ST_TO_ADDR
// end ;
51071: LD_VAR 0 3
51075: RET
// export function MC_Start ( ) ; var i ; begin
51076: LD_INT 0
51078: PPUSH
51079: PPUSH
// for i = 1 to mc_bases do
51080: LD_ADDR_VAR 0 2
51084: PUSH
51085: DOUBLE
51086: LD_INT 1
51088: DEC
51089: ST_TO_ADDR
51090: LD_EXP 63
51094: PUSH
51095: FOR_TO
51096: IFFALSE 52173
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
51098: LD_ADDR_EXP 63
51102: PUSH
51103: LD_EXP 63
51107: PPUSH
51108: LD_VAR 0 2
51112: PPUSH
51113: LD_EXP 63
51117: PUSH
51118: LD_VAR 0 2
51122: ARRAY
51123: PUSH
51124: LD_INT 0
51126: DIFF
51127: PPUSH
51128: CALL_OW 1
51132: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
51133: LD_ADDR_EXP 64
51137: PUSH
51138: LD_EXP 64
51142: PPUSH
51143: LD_VAR 0 2
51147: PPUSH
51148: EMPTY
51149: PPUSH
51150: CALL_OW 1
51154: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
51155: LD_ADDR_EXP 65
51159: PUSH
51160: LD_EXP 65
51164: PPUSH
51165: LD_VAR 0 2
51169: PPUSH
51170: EMPTY
51171: PPUSH
51172: CALL_OW 1
51176: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
51177: LD_ADDR_EXP 66
51181: PUSH
51182: LD_EXP 66
51186: PPUSH
51187: LD_VAR 0 2
51191: PPUSH
51192: EMPTY
51193: PPUSH
51194: CALL_OW 1
51198: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
51199: LD_ADDR_EXP 67
51203: PUSH
51204: LD_EXP 67
51208: PPUSH
51209: LD_VAR 0 2
51213: PPUSH
51214: EMPTY
51215: PUSH
51216: EMPTY
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PPUSH
51222: CALL_OW 1
51226: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
51227: LD_ADDR_EXP 68
51231: PUSH
51232: LD_EXP 68
51236: PPUSH
51237: LD_VAR 0 2
51241: PPUSH
51242: EMPTY
51243: PPUSH
51244: CALL_OW 1
51248: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
51249: LD_ADDR_EXP 95
51253: PUSH
51254: LD_EXP 95
51258: PPUSH
51259: LD_VAR 0 2
51263: PPUSH
51264: EMPTY
51265: PPUSH
51266: CALL_OW 1
51270: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
51271: LD_ADDR_EXP 69
51275: PUSH
51276: LD_EXP 69
51280: PPUSH
51281: LD_VAR 0 2
51285: PPUSH
51286: EMPTY
51287: PPUSH
51288: CALL_OW 1
51292: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
51293: LD_ADDR_EXP 70
51297: PUSH
51298: LD_EXP 70
51302: PPUSH
51303: LD_VAR 0 2
51307: PPUSH
51308: EMPTY
51309: PPUSH
51310: CALL_OW 1
51314: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
51315: LD_ADDR_EXP 71
51319: PUSH
51320: LD_EXP 71
51324: PPUSH
51325: LD_VAR 0 2
51329: PPUSH
51330: LD_EXP 63
51334: PUSH
51335: LD_VAR 0 2
51339: ARRAY
51340: PPUSH
51341: LD_INT 2
51343: PUSH
51344: LD_INT 30
51346: PUSH
51347: LD_INT 32
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 30
51356: PUSH
51357: LD_INT 33
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: LIST
51368: PPUSH
51369: CALL_OW 72
51373: PPUSH
51374: CALL_OW 1
51378: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
51379: LD_ADDR_EXP 72
51383: PUSH
51384: LD_EXP 72
51388: PPUSH
51389: LD_VAR 0 2
51393: PPUSH
51394: LD_EXP 63
51398: PUSH
51399: LD_VAR 0 2
51403: ARRAY
51404: PPUSH
51405: LD_INT 2
51407: PUSH
51408: LD_INT 30
51410: PUSH
51411: LD_INT 32
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 30
51420: PUSH
51421: LD_INT 31
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 58
51435: PUSH
51436: EMPTY
51437: LIST
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PPUSH
51443: CALL_OW 72
51447: PPUSH
51448: CALL_OW 1
51452: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
51453: LD_ADDR_EXP 73
51457: PUSH
51458: LD_EXP 73
51462: PPUSH
51463: LD_VAR 0 2
51467: PPUSH
51468: EMPTY
51469: PPUSH
51470: CALL_OW 1
51474: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
51475: LD_ADDR_EXP 77
51479: PUSH
51480: LD_EXP 77
51484: PPUSH
51485: LD_VAR 0 2
51489: PPUSH
51490: EMPTY
51491: PPUSH
51492: CALL_OW 1
51496: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
51497: LD_ADDR_EXP 76
51501: PUSH
51502: LD_EXP 76
51506: PPUSH
51507: LD_VAR 0 2
51511: PPUSH
51512: EMPTY
51513: PPUSH
51514: CALL_OW 1
51518: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
51519: LD_ADDR_EXP 78
51523: PUSH
51524: LD_EXP 78
51528: PPUSH
51529: LD_VAR 0 2
51533: PPUSH
51534: EMPTY
51535: PPUSH
51536: CALL_OW 1
51540: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
51541: LD_ADDR_EXP 79
51545: PUSH
51546: LD_EXP 79
51550: PPUSH
51551: LD_VAR 0 2
51555: PPUSH
51556: EMPTY
51557: PPUSH
51558: CALL_OW 1
51562: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
51563: LD_ADDR_EXP 80
51567: PUSH
51568: LD_EXP 80
51572: PPUSH
51573: LD_VAR 0 2
51577: PPUSH
51578: EMPTY
51579: PPUSH
51580: CALL_OW 1
51584: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
51585: LD_ADDR_EXP 81
51589: PUSH
51590: LD_EXP 81
51594: PPUSH
51595: LD_VAR 0 2
51599: PPUSH
51600: EMPTY
51601: PPUSH
51602: CALL_OW 1
51606: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
51607: LD_ADDR_EXP 82
51611: PUSH
51612: LD_EXP 82
51616: PPUSH
51617: LD_VAR 0 2
51621: PPUSH
51622: EMPTY
51623: PPUSH
51624: CALL_OW 1
51628: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
51629: LD_ADDR_EXP 83
51633: PUSH
51634: LD_EXP 83
51638: PPUSH
51639: LD_VAR 0 2
51643: PPUSH
51644: EMPTY
51645: PPUSH
51646: CALL_OW 1
51650: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
51651: LD_ADDR_EXP 84
51655: PUSH
51656: LD_EXP 84
51660: PPUSH
51661: LD_VAR 0 2
51665: PPUSH
51666: EMPTY
51667: PPUSH
51668: CALL_OW 1
51672: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
51673: LD_ADDR_EXP 85
51677: PUSH
51678: LD_EXP 85
51682: PPUSH
51683: LD_VAR 0 2
51687: PPUSH
51688: EMPTY
51689: PPUSH
51690: CALL_OW 1
51694: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
51695: LD_ADDR_EXP 74
51699: PUSH
51700: LD_EXP 74
51704: PPUSH
51705: LD_VAR 0 2
51709: PPUSH
51710: LD_INT 0
51712: PPUSH
51713: CALL_OW 1
51717: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
51718: LD_ADDR_EXP 87
51722: PUSH
51723: LD_EXP 87
51727: PPUSH
51728: LD_VAR 0 2
51732: PPUSH
51733: LD_INT 0
51735: PPUSH
51736: CALL_OW 1
51740: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
51741: LD_ADDR_EXP 75
51745: PUSH
51746: LD_EXP 75
51750: PPUSH
51751: LD_VAR 0 2
51755: PPUSH
51756: EMPTY
51757: PPUSH
51758: CALL_OW 1
51762: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
51763: LD_ADDR_EXP 86
51767: PUSH
51768: LD_EXP 86
51772: PPUSH
51773: LD_VAR 0 2
51777: PPUSH
51778: LD_INT 0
51780: PPUSH
51781: CALL_OW 1
51785: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
51786: LD_ADDR_EXP 88
51790: PUSH
51791: LD_EXP 88
51795: PPUSH
51796: LD_VAR 0 2
51800: PPUSH
51801: EMPTY
51802: PPUSH
51803: CALL_OW 1
51807: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
51808: LD_ADDR_EXP 91
51812: PUSH
51813: LD_EXP 91
51817: PPUSH
51818: LD_VAR 0 2
51822: PPUSH
51823: LD_INT 0
51825: PPUSH
51826: CALL_OW 1
51830: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
51831: LD_ADDR_EXP 92
51835: PUSH
51836: LD_EXP 92
51840: PPUSH
51841: LD_VAR 0 2
51845: PPUSH
51846: EMPTY
51847: PPUSH
51848: CALL_OW 1
51852: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
51853: LD_ADDR_EXP 93
51857: PUSH
51858: LD_EXP 93
51862: PPUSH
51863: LD_VAR 0 2
51867: PPUSH
51868: EMPTY
51869: PPUSH
51870: CALL_OW 1
51874: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
51875: LD_ADDR_EXP 94
51879: PUSH
51880: LD_EXP 94
51884: PPUSH
51885: LD_VAR 0 2
51889: PPUSH
51890: EMPTY
51891: PPUSH
51892: CALL_OW 1
51896: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
51897: LD_ADDR_EXP 96
51901: PUSH
51902: LD_EXP 96
51906: PPUSH
51907: LD_VAR 0 2
51911: PPUSH
51912: LD_EXP 63
51916: PUSH
51917: LD_VAR 0 2
51921: ARRAY
51922: PPUSH
51923: LD_INT 2
51925: PUSH
51926: LD_INT 30
51928: PUSH
51929: LD_INT 6
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 30
51938: PUSH
51939: LD_INT 7
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 30
51948: PUSH
51949: LD_INT 8
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: PPUSH
51962: CALL_OW 72
51966: PPUSH
51967: CALL_OW 1
51971: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
51972: LD_ADDR_EXP 97
51976: PUSH
51977: LD_EXP 97
51981: PPUSH
51982: LD_VAR 0 2
51986: PPUSH
51987: EMPTY
51988: PPUSH
51989: CALL_OW 1
51993: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
51994: LD_ADDR_EXP 98
51998: PUSH
51999: LD_EXP 98
52003: PPUSH
52004: LD_VAR 0 2
52008: PPUSH
52009: EMPTY
52010: PPUSH
52011: CALL_OW 1
52015: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
52016: LD_ADDR_EXP 99
52020: PUSH
52021: LD_EXP 99
52025: PPUSH
52026: LD_VAR 0 2
52030: PPUSH
52031: EMPTY
52032: PPUSH
52033: CALL_OW 1
52037: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
52038: LD_ADDR_EXP 100
52042: PUSH
52043: LD_EXP 100
52047: PPUSH
52048: LD_VAR 0 2
52052: PPUSH
52053: EMPTY
52054: PPUSH
52055: CALL_OW 1
52059: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
52060: LD_ADDR_EXP 101
52064: PUSH
52065: LD_EXP 101
52069: PPUSH
52070: LD_VAR 0 2
52074: PPUSH
52075: EMPTY
52076: PPUSH
52077: CALL_OW 1
52081: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
52082: LD_ADDR_EXP 102
52086: PUSH
52087: LD_EXP 102
52091: PPUSH
52092: LD_VAR 0 2
52096: PPUSH
52097: EMPTY
52098: PPUSH
52099: CALL_OW 1
52103: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
52104: LD_ADDR_EXP 103
52108: PUSH
52109: LD_EXP 103
52113: PPUSH
52114: LD_VAR 0 2
52118: PPUSH
52119: EMPTY
52120: PPUSH
52121: CALL_OW 1
52125: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
52126: LD_ADDR_EXP 104
52130: PUSH
52131: LD_EXP 104
52135: PPUSH
52136: LD_VAR 0 2
52140: PPUSH
52141: EMPTY
52142: PPUSH
52143: CALL_OW 1
52147: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
52148: LD_ADDR_EXP 105
52152: PUSH
52153: LD_EXP 105
52157: PPUSH
52158: LD_VAR 0 2
52162: PPUSH
52163: LD_INT 0
52165: PPUSH
52166: CALL_OW 1
52170: ST_TO_ADDR
// end ;
52171: GO 51095
52173: POP
52174: POP
// MC_InitSides ( ) ;
52175: CALL 52461 0 0
// MC_InitResearch ( ) ;
52179: CALL 52200 0 0
// CustomInitMacro ( ) ;
52183: CALL 5953 0 0
// skirmish := true ;
52187: LD_ADDR_EXP 61
52191: PUSH
52192: LD_INT 1
52194: ST_TO_ADDR
// end ;
52195: LD_VAR 0 1
52199: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
52200: LD_INT 0
52202: PPUSH
52203: PPUSH
52204: PPUSH
52205: PPUSH
52206: PPUSH
52207: PPUSH
// if not mc_bases then
52208: LD_EXP 63
52212: NOT
52213: IFFALSE 52217
// exit ;
52215: GO 52456
// for i = 1 to 8 do
52217: LD_ADDR_VAR 0 2
52221: PUSH
52222: DOUBLE
52223: LD_INT 1
52225: DEC
52226: ST_TO_ADDR
52227: LD_INT 8
52229: PUSH
52230: FOR_TO
52231: IFFALSE 52257
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
52233: LD_ADDR_EXP 90
52237: PUSH
52238: LD_EXP 90
52242: PPUSH
52243: LD_VAR 0 2
52247: PPUSH
52248: EMPTY
52249: PPUSH
52250: CALL_OW 1
52254: ST_TO_ADDR
52255: GO 52230
52257: POP
52258: POP
// tmp := [ ] ;
52259: LD_ADDR_VAR 0 5
52263: PUSH
52264: EMPTY
52265: ST_TO_ADDR
// for i = 1 to mc_sides do
52266: LD_ADDR_VAR 0 2
52270: PUSH
52271: DOUBLE
52272: LD_INT 1
52274: DEC
52275: ST_TO_ADDR
52276: LD_EXP 89
52280: PUSH
52281: FOR_TO
52282: IFFALSE 52340
// if not mc_sides [ i ] in tmp then
52284: LD_EXP 89
52288: PUSH
52289: LD_VAR 0 2
52293: ARRAY
52294: PUSH
52295: LD_VAR 0 5
52299: IN
52300: NOT
52301: IFFALSE 52338
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
52303: LD_ADDR_VAR 0 5
52307: PUSH
52308: LD_VAR 0 5
52312: PPUSH
52313: LD_VAR 0 5
52317: PUSH
52318: LD_INT 1
52320: PLUS
52321: PPUSH
52322: LD_EXP 89
52326: PUSH
52327: LD_VAR 0 2
52331: ARRAY
52332: PPUSH
52333: CALL_OW 2
52337: ST_TO_ADDR
52338: GO 52281
52340: POP
52341: POP
// if not tmp then
52342: LD_VAR 0 5
52346: NOT
52347: IFFALSE 52351
// exit ;
52349: GO 52456
// for j in tmp do
52351: LD_ADDR_VAR 0 3
52355: PUSH
52356: LD_VAR 0 5
52360: PUSH
52361: FOR_IN
52362: IFFALSE 52454
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
52364: LD_ADDR_VAR 0 6
52368: PUSH
52369: LD_INT 22
52371: PUSH
52372: LD_VAR 0 3
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PPUSH
52381: CALL_OW 69
52385: ST_TO_ADDR
// if not un then
52386: LD_VAR 0 6
52390: NOT
52391: IFFALSE 52395
// continue ;
52393: GO 52361
// nation := GetNation ( un [ 1 ] ) ;
52395: LD_ADDR_VAR 0 4
52399: PUSH
52400: LD_VAR 0 6
52404: PUSH
52405: LD_INT 1
52407: ARRAY
52408: PPUSH
52409: CALL_OW 248
52413: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
52414: LD_ADDR_EXP 90
52418: PUSH
52419: LD_EXP 90
52423: PPUSH
52424: LD_VAR 0 3
52428: PPUSH
52429: LD_VAR 0 3
52433: PPUSH
52434: LD_VAR 0 4
52438: PPUSH
52439: LD_INT 1
52441: PPUSH
52442: CALL 12571 0 3
52446: PPUSH
52447: CALL_OW 1
52451: ST_TO_ADDR
// end ;
52452: GO 52361
52454: POP
52455: POP
// end ;
52456: LD_VAR 0 1
52460: RET
// export function MC_InitSides ( ) ; var i ; begin
52461: LD_INT 0
52463: PPUSH
52464: PPUSH
// if not mc_bases then
52465: LD_EXP 63
52469: NOT
52470: IFFALSE 52474
// exit ;
52472: GO 52548
// for i = 1 to mc_bases do
52474: LD_ADDR_VAR 0 2
52478: PUSH
52479: DOUBLE
52480: LD_INT 1
52482: DEC
52483: ST_TO_ADDR
52484: LD_EXP 63
52488: PUSH
52489: FOR_TO
52490: IFFALSE 52546
// if mc_bases [ i ] then
52492: LD_EXP 63
52496: PUSH
52497: LD_VAR 0 2
52501: ARRAY
52502: IFFALSE 52544
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
52504: LD_ADDR_EXP 89
52508: PUSH
52509: LD_EXP 89
52513: PPUSH
52514: LD_VAR 0 2
52518: PPUSH
52519: LD_EXP 63
52523: PUSH
52524: LD_VAR 0 2
52528: ARRAY
52529: PUSH
52530: LD_INT 1
52532: ARRAY
52533: PPUSH
52534: CALL_OW 255
52538: PPUSH
52539: CALL_OW 1
52543: ST_TO_ADDR
52544: GO 52489
52546: POP
52547: POP
// end ;
52548: LD_VAR 0 1
52552: RET
// every 0 0$01 trigger skirmish do
52553: LD_EXP 61
52557: IFFALSE 52711
52559: GO 52561
52561: DISABLE
// begin enable ;
52562: ENABLE
// MC_CheckBuildings ( ) ;
52563: CALL 57209 0 0
// MC_CheckPeopleLife ( ) ;
52567: CALL 57334 0 0
// RaiseSailEvent ( 100 ) ;
52571: LD_INT 100
52573: PPUSH
52574: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
52578: LD_INT 103
52580: PPUSH
52581: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
52585: LD_INT 104
52587: PPUSH
52588: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
52592: LD_INT 105
52594: PPUSH
52595: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
52599: LD_INT 106
52601: PPUSH
52602: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
52606: LD_INT 107
52608: PPUSH
52609: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
52613: LD_INT 108
52615: PPUSH
52616: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
52620: LD_INT 109
52622: PPUSH
52623: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
52627: LD_INT 110
52629: PPUSH
52630: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
52634: LD_INT 111
52636: PPUSH
52637: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
52641: LD_INT 112
52643: PPUSH
52644: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
52648: LD_INT 113
52650: PPUSH
52651: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
52655: LD_INT 120
52657: PPUSH
52658: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
52662: LD_INT 121
52664: PPUSH
52665: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
52669: LD_INT 122
52671: PPUSH
52672: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
52676: LD_INT 123
52678: PPUSH
52679: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
52683: LD_INT 124
52685: PPUSH
52686: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
52690: LD_INT 125
52692: PPUSH
52693: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
52697: LD_INT 126
52699: PPUSH
52700: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
52704: LD_INT 200
52706: PPUSH
52707: CALL_OW 427
// end ;
52711: END
// on SailEvent ( event ) do begin if event < 100 then
52712: LD_VAR 0 1
52716: PUSH
52717: LD_INT 100
52719: LESS
52720: IFFALSE 52731
// CustomEvent ( event ) ;
52722: LD_VAR 0 1
52726: PPUSH
52727: CALL 5945 0 1
// if event = 100 then
52731: LD_VAR 0 1
52735: PUSH
52736: LD_INT 100
52738: EQUAL
52739: IFFALSE 52745
// MC_ClassManager ( ) ;
52741: CALL 53137 0 0
// if event = 101 then
52745: LD_VAR 0 1
52749: PUSH
52750: LD_INT 101
52752: EQUAL
52753: IFFALSE 52759
// MC_RepairBuildings ( ) ;
52755: CALL 57919 0 0
// if event = 102 then
52759: LD_VAR 0 1
52763: PUSH
52764: LD_INT 102
52766: EQUAL
52767: IFFALSE 52773
// MC_Heal ( ) ;
52769: CALL 58778 0 0
// if event = 103 then
52773: LD_VAR 0 1
52777: PUSH
52778: LD_INT 103
52780: EQUAL
52781: IFFALSE 52787
// MC_Build ( ) ;
52783: CALL 59200 0 0
// if event = 104 then
52787: LD_VAR 0 1
52791: PUSH
52792: LD_INT 104
52794: EQUAL
52795: IFFALSE 52801
// MC_TurretWeapon ( ) ;
52797: CALL 60813 0 0
// if event = 105 then
52801: LD_VAR 0 1
52805: PUSH
52806: LD_INT 105
52808: EQUAL
52809: IFFALSE 52815
// MC_BuildUpgrade ( ) ;
52811: CALL 60364 0 0
// if event = 106 then
52815: LD_VAR 0 1
52819: PUSH
52820: LD_INT 106
52822: EQUAL
52823: IFFALSE 52829
// MC_PlantMines ( ) ;
52825: CALL 61243 0 0
// if event = 107 then
52829: LD_VAR 0 1
52833: PUSH
52834: LD_INT 107
52836: EQUAL
52837: IFFALSE 52843
// MC_CollectCrates ( ) ;
52839: CALL 62041 0 0
// if event = 108 then
52843: LD_VAR 0 1
52847: PUSH
52848: LD_INT 108
52850: EQUAL
52851: IFFALSE 52857
// MC_LinkRemoteControl ( ) ;
52853: CALL 63817 0 0
// if event = 109 then
52857: LD_VAR 0 1
52861: PUSH
52862: LD_INT 109
52864: EQUAL
52865: IFFALSE 52871
// MC_ProduceVehicle ( ) ;
52867: CALL 63998 0 0
// if event = 110 then
52871: LD_VAR 0 1
52875: PUSH
52876: LD_INT 110
52878: EQUAL
52879: IFFALSE 52885
// MC_SendAttack ( ) ;
52881: CALL 64464 0 0
// if event = 111 then
52885: LD_VAR 0 1
52889: PUSH
52890: LD_INT 111
52892: EQUAL
52893: IFFALSE 52899
// MC_Defend ( ) ;
52895: CALL 64572 0 0
// if event = 112 then
52899: LD_VAR 0 1
52903: PUSH
52904: LD_INT 112
52906: EQUAL
52907: IFFALSE 52913
// MC_Research ( ) ;
52909: CALL 65177 0 0
// if event = 113 then
52913: LD_VAR 0 1
52917: PUSH
52918: LD_INT 113
52920: EQUAL
52921: IFFALSE 52927
// MC_MinesTrigger ( ) ;
52923: CALL 66291 0 0
// if event = 120 then
52927: LD_VAR 0 1
52931: PUSH
52932: LD_INT 120
52934: EQUAL
52935: IFFALSE 52941
// MC_RepairVehicle ( ) ;
52937: CALL 66390 0 0
// if event = 121 then
52941: LD_VAR 0 1
52945: PUSH
52946: LD_INT 121
52948: EQUAL
52949: IFFALSE 52955
// MC_TameApe ( ) ;
52951: CALL 67120 0 0
// if event = 122 then
52955: LD_VAR 0 1
52959: PUSH
52960: LD_INT 122
52962: EQUAL
52963: IFFALSE 52969
// MC_ChangeApeClass ( ) ;
52965: CALL 67949 0 0
// if event = 123 then
52969: LD_VAR 0 1
52973: PUSH
52974: LD_INT 123
52976: EQUAL
52977: IFFALSE 52983
// MC_Bazooka ( ) ;
52979: CALL 68599 0 0
// if event = 124 then
52983: LD_VAR 0 1
52987: PUSH
52988: LD_INT 124
52990: EQUAL
52991: IFFALSE 52997
// MC_TeleportExit ( ) ;
52993: CALL 68797 0 0
// if event = 125 then
52997: LD_VAR 0 1
53001: PUSH
53002: LD_INT 125
53004: EQUAL
53005: IFFALSE 53011
// MC_Deposits ( ) ;
53007: CALL 69444 0 0
// if event = 126 then
53011: LD_VAR 0 1
53015: PUSH
53016: LD_INT 126
53018: EQUAL
53019: IFFALSE 53025
// MC_RemoteDriver ( ) ;
53021: CALL 70069 0 0
// if event = 200 then
53025: LD_VAR 0 1
53029: PUSH
53030: LD_INT 200
53032: EQUAL
53033: IFFALSE 53039
// MC_Idle ( ) ;
53035: CALL 72018 0 0
// end ;
53039: PPOPN 1
53041: END
// export function MC_Reset ( base , tag ) ; var i ; begin
53042: LD_INT 0
53044: PPUSH
53045: PPUSH
// if not mc_bases [ base ] or not tag then
53046: LD_EXP 63
53050: PUSH
53051: LD_VAR 0 1
53055: ARRAY
53056: NOT
53057: PUSH
53058: LD_VAR 0 2
53062: NOT
53063: OR
53064: IFFALSE 53068
// exit ;
53066: GO 53132
// for i in mc_bases [ base ] union mc_ape [ base ] do
53068: LD_ADDR_VAR 0 4
53072: PUSH
53073: LD_EXP 63
53077: PUSH
53078: LD_VAR 0 1
53082: ARRAY
53083: PUSH
53084: LD_EXP 92
53088: PUSH
53089: LD_VAR 0 1
53093: ARRAY
53094: UNION
53095: PUSH
53096: FOR_IN
53097: IFFALSE 53130
// if GetTag ( i ) = tag then
53099: LD_VAR 0 4
53103: PPUSH
53104: CALL_OW 110
53108: PUSH
53109: LD_VAR 0 2
53113: EQUAL
53114: IFFALSE 53128
// SetTag ( i , 0 ) ;
53116: LD_VAR 0 4
53120: PPUSH
53121: LD_INT 0
53123: PPUSH
53124: CALL_OW 109
53128: GO 53096
53130: POP
53131: POP
// end ;
53132: LD_VAR 0 3
53136: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
53137: LD_INT 0
53139: PPUSH
53140: PPUSH
53141: PPUSH
53142: PPUSH
53143: PPUSH
53144: PPUSH
53145: PPUSH
53146: PPUSH
// if not mc_bases then
53147: LD_EXP 63
53151: NOT
53152: IFFALSE 53156
// exit ;
53154: GO 53614
// for i = 1 to mc_bases do
53156: LD_ADDR_VAR 0 2
53160: PUSH
53161: DOUBLE
53162: LD_INT 1
53164: DEC
53165: ST_TO_ADDR
53166: LD_EXP 63
53170: PUSH
53171: FOR_TO
53172: IFFALSE 53612
// begin tmp := MC_ClassCheckReq ( i ) ;
53174: LD_ADDR_VAR 0 4
53178: PUSH
53179: LD_VAR 0 2
53183: PPUSH
53184: CALL 53619 0 1
53188: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
53189: LD_ADDR_EXP 104
53193: PUSH
53194: LD_EXP 104
53198: PPUSH
53199: LD_VAR 0 2
53203: PPUSH
53204: LD_VAR 0 4
53208: PPUSH
53209: CALL_OW 1
53213: ST_TO_ADDR
// if not tmp then
53214: LD_VAR 0 4
53218: NOT
53219: IFFALSE 53223
// continue ;
53221: GO 53171
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
53223: LD_ADDR_VAR 0 6
53227: PUSH
53228: LD_EXP 63
53232: PUSH
53233: LD_VAR 0 2
53237: ARRAY
53238: PPUSH
53239: LD_INT 2
53241: PUSH
53242: LD_INT 30
53244: PUSH
53245: LD_INT 4
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 30
53254: PUSH
53255: LD_INT 5
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: LIST
53266: PPUSH
53267: CALL_OW 72
53271: PUSH
53272: LD_EXP 63
53276: PUSH
53277: LD_VAR 0 2
53281: ARRAY
53282: PPUSH
53283: LD_INT 2
53285: PUSH
53286: LD_INT 30
53288: PUSH
53289: LD_INT 0
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 30
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: LIST
53310: PPUSH
53311: CALL_OW 72
53315: PUSH
53316: LD_EXP 63
53320: PUSH
53321: LD_VAR 0 2
53325: ARRAY
53326: PPUSH
53327: LD_INT 30
53329: PUSH
53330: LD_INT 3
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PPUSH
53337: CALL_OW 72
53341: PUSH
53342: LD_EXP 63
53346: PUSH
53347: LD_VAR 0 2
53351: ARRAY
53352: PPUSH
53353: LD_INT 2
53355: PUSH
53356: LD_INT 30
53358: PUSH
53359: LD_INT 6
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 30
53368: PUSH
53369: LD_INT 7
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 30
53378: PUSH
53379: LD_INT 8
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: PPUSH
53392: CALL_OW 72
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: ST_TO_ADDR
// for j = 1 to 4 do
53403: LD_ADDR_VAR 0 3
53407: PUSH
53408: DOUBLE
53409: LD_INT 1
53411: DEC
53412: ST_TO_ADDR
53413: LD_INT 4
53415: PUSH
53416: FOR_TO
53417: IFFALSE 53608
// begin if not tmp [ j ] then
53419: LD_VAR 0 4
53423: PUSH
53424: LD_VAR 0 3
53428: ARRAY
53429: NOT
53430: IFFALSE 53434
// continue ;
53432: GO 53416
// for p in tmp [ j ] do
53434: LD_ADDR_VAR 0 5
53438: PUSH
53439: LD_VAR 0 4
53443: PUSH
53444: LD_VAR 0 3
53448: ARRAY
53449: PUSH
53450: FOR_IN
53451: IFFALSE 53604
// begin if not b [ j ] then
53453: LD_VAR 0 6
53457: PUSH
53458: LD_VAR 0 3
53462: ARRAY
53463: NOT
53464: IFFALSE 53468
// break ;
53466: GO 53604
// e := 0 ;
53468: LD_ADDR_VAR 0 7
53472: PUSH
53473: LD_INT 0
53475: ST_TO_ADDR
// for k in b [ j ] do
53476: LD_ADDR_VAR 0 8
53480: PUSH
53481: LD_VAR 0 6
53485: PUSH
53486: LD_VAR 0 3
53490: ARRAY
53491: PUSH
53492: FOR_IN
53493: IFFALSE 53520
// if IsNotFull ( k ) then
53495: LD_VAR 0 8
53499: PPUSH
53500: CALL 14720 0 1
53504: IFFALSE 53518
// begin e := k ;
53506: LD_ADDR_VAR 0 7
53510: PUSH
53511: LD_VAR 0 8
53515: ST_TO_ADDR
// break ;
53516: GO 53520
// end ;
53518: GO 53492
53520: POP
53521: POP
// if e and not UnitGoingToBuilding ( p , e ) then
53522: LD_VAR 0 7
53526: PUSH
53527: LD_VAR 0 5
53531: PPUSH
53532: LD_VAR 0 7
53536: PPUSH
53537: CALL 47140 0 2
53541: NOT
53542: AND
53543: IFFALSE 53602
// begin if IsInUnit ( p ) then
53545: LD_VAR 0 5
53549: PPUSH
53550: CALL_OW 310
53554: IFFALSE 53565
// ComExitBuilding ( p ) ;
53556: LD_VAR 0 5
53560: PPUSH
53561: CALL_OW 122
// ComEnterUnit ( p , e ) ;
53565: LD_VAR 0 5
53569: PPUSH
53570: LD_VAR 0 7
53574: PPUSH
53575: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
53579: LD_VAR 0 5
53583: PPUSH
53584: LD_VAR 0 3
53588: PPUSH
53589: CALL_OW 183
// AddComExitBuilding ( p ) ;
53593: LD_VAR 0 5
53597: PPUSH
53598: CALL_OW 182
// end ; end ;
53602: GO 53450
53604: POP
53605: POP
// end ;
53606: GO 53416
53608: POP
53609: POP
// end ;
53610: GO 53171
53612: POP
53613: POP
// end ;
53614: LD_VAR 0 1
53618: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
53619: LD_INT 0
53621: PPUSH
53622: PPUSH
53623: PPUSH
53624: PPUSH
53625: PPUSH
53626: PPUSH
53627: PPUSH
53628: PPUSH
53629: PPUSH
53630: PPUSH
53631: PPUSH
53632: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
53633: LD_VAR 0 1
53637: NOT
53638: PUSH
53639: LD_EXP 63
53643: PUSH
53644: LD_VAR 0 1
53648: ARRAY
53649: NOT
53650: OR
53651: PUSH
53652: LD_EXP 63
53656: PUSH
53657: LD_VAR 0 1
53661: ARRAY
53662: PPUSH
53663: LD_INT 2
53665: PUSH
53666: LD_INT 30
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 30
53678: PUSH
53679: LD_INT 1
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: LIST
53690: PPUSH
53691: CALL_OW 72
53695: NOT
53696: OR
53697: IFFALSE 53701
// exit ;
53699: GO 57204
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
53701: LD_ADDR_VAR 0 4
53705: PUSH
53706: LD_EXP 63
53710: PUSH
53711: LD_VAR 0 1
53715: ARRAY
53716: PPUSH
53717: LD_INT 2
53719: PUSH
53720: LD_INT 25
53722: PUSH
53723: LD_INT 1
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 25
53732: PUSH
53733: LD_INT 2
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 25
53742: PUSH
53743: LD_INT 3
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 25
53752: PUSH
53753: LD_INT 4
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 25
53762: PUSH
53763: LD_INT 5
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 25
53772: PUSH
53773: LD_INT 8
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 25
53782: PUSH
53783: LD_INT 9
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: PPUSH
53800: CALL_OW 72
53804: ST_TO_ADDR
// if not tmp then
53805: LD_VAR 0 4
53809: NOT
53810: IFFALSE 53814
// exit ;
53812: GO 57204
// for i in tmp do
53814: LD_ADDR_VAR 0 3
53818: PUSH
53819: LD_VAR 0 4
53823: PUSH
53824: FOR_IN
53825: IFFALSE 53856
// if GetTag ( i ) then
53827: LD_VAR 0 3
53831: PPUSH
53832: CALL_OW 110
53836: IFFALSE 53854
// tmp := tmp diff i ;
53838: LD_ADDR_VAR 0 4
53842: PUSH
53843: LD_VAR 0 4
53847: PUSH
53848: LD_VAR 0 3
53852: DIFF
53853: ST_TO_ADDR
53854: GO 53824
53856: POP
53857: POP
// if not tmp then
53858: LD_VAR 0 4
53862: NOT
53863: IFFALSE 53867
// exit ;
53865: GO 57204
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
53867: LD_ADDR_VAR 0 5
53871: PUSH
53872: LD_EXP 63
53876: PUSH
53877: LD_VAR 0 1
53881: ARRAY
53882: PPUSH
53883: LD_INT 2
53885: PUSH
53886: LD_INT 25
53888: PUSH
53889: LD_INT 1
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 25
53898: PUSH
53899: LD_INT 5
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 25
53908: PUSH
53909: LD_INT 8
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 25
53918: PUSH
53919: LD_INT 9
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: PPUSH
53933: CALL_OW 72
53937: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
53938: LD_ADDR_VAR 0 6
53942: PUSH
53943: LD_EXP 63
53947: PUSH
53948: LD_VAR 0 1
53952: ARRAY
53953: PPUSH
53954: LD_INT 25
53956: PUSH
53957: LD_INT 2
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PPUSH
53964: CALL_OW 72
53968: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
53969: LD_ADDR_VAR 0 7
53973: PUSH
53974: LD_EXP 63
53978: PUSH
53979: LD_VAR 0 1
53983: ARRAY
53984: PPUSH
53985: LD_INT 25
53987: PUSH
53988: LD_INT 3
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PPUSH
53995: CALL_OW 72
53999: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
54000: LD_ADDR_VAR 0 8
54004: PUSH
54005: LD_EXP 63
54009: PUSH
54010: LD_VAR 0 1
54014: ARRAY
54015: PPUSH
54016: LD_INT 25
54018: PUSH
54019: LD_INT 4
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 24
54028: PUSH
54029: LD_INT 251
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PPUSH
54040: CALL_OW 72
54044: ST_TO_ADDR
// if mc_scan [ base ] then
54045: LD_EXP 86
54049: PUSH
54050: LD_VAR 0 1
54054: ARRAY
54055: IFFALSE 54516
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
54057: LD_ADDR_EXP 105
54061: PUSH
54062: LD_EXP 105
54066: PPUSH
54067: LD_VAR 0 1
54071: PPUSH
54072: LD_INT 4
54074: PPUSH
54075: CALL_OW 1
54079: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
54080: LD_ADDR_VAR 0 12
54084: PUSH
54085: LD_EXP 63
54089: PUSH
54090: LD_VAR 0 1
54094: ARRAY
54095: PPUSH
54096: LD_INT 2
54098: PUSH
54099: LD_INT 30
54101: PUSH
54102: LD_INT 4
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 30
54111: PUSH
54112: LD_INT 5
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: LIST
54123: PPUSH
54124: CALL_OW 72
54128: ST_TO_ADDR
// if not b then
54129: LD_VAR 0 12
54133: NOT
54134: IFFALSE 54138
// exit ;
54136: GO 57204
// p := [ ] ;
54138: LD_ADDR_VAR 0 11
54142: PUSH
54143: EMPTY
54144: ST_TO_ADDR
// if sci >= 2 then
54145: LD_VAR 0 8
54149: PUSH
54150: LD_INT 2
54152: GREATEREQUAL
54153: IFFALSE 54184
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
54155: LD_ADDR_VAR 0 8
54159: PUSH
54160: LD_VAR 0 8
54164: PUSH
54165: LD_INT 1
54167: ARRAY
54168: PUSH
54169: LD_VAR 0 8
54173: PUSH
54174: LD_INT 2
54176: ARRAY
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: ST_TO_ADDR
54182: GO 54245
// if sci = 1 then
54184: LD_VAR 0 8
54188: PUSH
54189: LD_INT 1
54191: EQUAL
54192: IFFALSE 54213
// sci := [ sci [ 1 ] ] else
54194: LD_ADDR_VAR 0 8
54198: PUSH
54199: LD_VAR 0 8
54203: PUSH
54204: LD_INT 1
54206: ARRAY
54207: PUSH
54208: EMPTY
54209: LIST
54210: ST_TO_ADDR
54211: GO 54245
// if sci = 0 then
54213: LD_VAR 0 8
54217: PUSH
54218: LD_INT 0
54220: EQUAL
54221: IFFALSE 54245
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
54223: LD_ADDR_VAR 0 11
54227: PUSH
54228: LD_VAR 0 4
54232: PPUSH
54233: LD_INT 4
54235: PPUSH
54236: CALL 47003 0 2
54240: PUSH
54241: LD_INT 1
54243: ARRAY
54244: ST_TO_ADDR
// if eng > 4 then
54245: LD_VAR 0 6
54249: PUSH
54250: LD_INT 4
54252: GREATER
54253: IFFALSE 54299
// for i = eng downto 4 do
54255: LD_ADDR_VAR 0 3
54259: PUSH
54260: DOUBLE
54261: LD_VAR 0 6
54265: INC
54266: ST_TO_ADDR
54267: LD_INT 4
54269: PUSH
54270: FOR_DOWNTO
54271: IFFALSE 54297
// eng := eng diff eng [ i ] ;
54273: LD_ADDR_VAR 0 6
54277: PUSH
54278: LD_VAR 0 6
54282: PUSH
54283: LD_VAR 0 6
54287: PUSH
54288: LD_VAR 0 3
54292: ARRAY
54293: DIFF
54294: ST_TO_ADDR
54295: GO 54270
54297: POP
54298: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
54299: LD_ADDR_VAR 0 4
54303: PUSH
54304: LD_VAR 0 4
54308: PUSH
54309: LD_VAR 0 5
54313: PUSH
54314: LD_VAR 0 6
54318: UNION
54319: PUSH
54320: LD_VAR 0 7
54324: UNION
54325: PUSH
54326: LD_VAR 0 8
54330: UNION
54331: DIFF
54332: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
54333: LD_ADDR_VAR 0 13
54337: PUSH
54338: LD_EXP 63
54342: PUSH
54343: LD_VAR 0 1
54347: ARRAY
54348: PPUSH
54349: LD_INT 2
54351: PUSH
54352: LD_INT 30
54354: PUSH
54355: LD_INT 32
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 30
54364: PUSH
54365: LD_INT 31
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: LIST
54376: PPUSH
54377: CALL_OW 72
54381: PUSH
54382: LD_EXP 63
54386: PUSH
54387: LD_VAR 0 1
54391: ARRAY
54392: PPUSH
54393: LD_INT 2
54395: PUSH
54396: LD_INT 30
54398: PUSH
54399: LD_INT 4
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 30
54408: PUSH
54409: LD_INT 5
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: LIST
54420: PPUSH
54421: CALL_OW 72
54425: PUSH
54426: LD_INT 6
54428: MUL
54429: PLUS
54430: ST_TO_ADDR
// if bcount < tmp then
54431: LD_VAR 0 13
54435: PUSH
54436: LD_VAR 0 4
54440: LESS
54441: IFFALSE 54487
// for i = tmp downto bcount do
54443: LD_ADDR_VAR 0 3
54447: PUSH
54448: DOUBLE
54449: LD_VAR 0 4
54453: INC
54454: ST_TO_ADDR
54455: LD_VAR 0 13
54459: PUSH
54460: FOR_DOWNTO
54461: IFFALSE 54485
// tmp := Delete ( tmp , tmp ) ;
54463: LD_ADDR_VAR 0 4
54467: PUSH
54468: LD_VAR 0 4
54472: PPUSH
54473: LD_VAR 0 4
54477: PPUSH
54478: CALL_OW 3
54482: ST_TO_ADDR
54483: GO 54460
54485: POP
54486: POP
// result := [ tmp , 0 , 0 , p ] ;
54487: LD_ADDR_VAR 0 2
54491: PUSH
54492: LD_VAR 0 4
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: LD_VAR 0 11
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: ST_TO_ADDR
// exit ;
54514: GO 57204
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
54516: LD_EXP 63
54520: PUSH
54521: LD_VAR 0 1
54525: ARRAY
54526: PPUSH
54527: LD_INT 2
54529: PUSH
54530: LD_INT 30
54532: PUSH
54533: LD_INT 6
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 30
54542: PUSH
54543: LD_INT 7
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 30
54552: PUSH
54553: LD_INT 8
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: PPUSH
54566: CALL_OW 72
54570: NOT
54571: PUSH
54572: LD_EXP 63
54576: PUSH
54577: LD_VAR 0 1
54581: ARRAY
54582: PPUSH
54583: LD_INT 30
54585: PUSH
54586: LD_INT 3
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PPUSH
54593: CALL_OW 72
54597: NOT
54598: AND
54599: IFFALSE 54671
// begin if eng = tmp then
54601: LD_VAR 0 6
54605: PUSH
54606: LD_VAR 0 4
54610: EQUAL
54611: IFFALSE 54615
// exit ;
54613: GO 57204
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
54615: LD_ADDR_EXP 105
54619: PUSH
54620: LD_EXP 105
54624: PPUSH
54625: LD_VAR 0 1
54629: PPUSH
54630: LD_INT 1
54632: PPUSH
54633: CALL_OW 1
54637: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
54638: LD_ADDR_VAR 0 2
54642: PUSH
54643: LD_INT 0
54645: PUSH
54646: LD_VAR 0 4
54650: PUSH
54651: LD_VAR 0 6
54655: DIFF
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: LD_INT 0
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: ST_TO_ADDR
// exit ;
54669: GO 57204
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
54671: LD_EXP 90
54675: PUSH
54676: LD_EXP 89
54680: PUSH
54681: LD_VAR 0 1
54685: ARRAY
54686: ARRAY
54687: PUSH
54688: LD_EXP 63
54692: PUSH
54693: LD_VAR 0 1
54697: ARRAY
54698: PPUSH
54699: LD_INT 2
54701: PUSH
54702: LD_INT 30
54704: PUSH
54705: LD_INT 6
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 30
54714: PUSH
54715: LD_INT 7
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 30
54724: PUSH
54725: LD_INT 8
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: PPUSH
54738: CALL_OW 72
54742: AND
54743: PUSH
54744: LD_EXP 63
54748: PUSH
54749: LD_VAR 0 1
54753: ARRAY
54754: PPUSH
54755: LD_INT 30
54757: PUSH
54758: LD_INT 3
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PPUSH
54765: CALL_OW 72
54769: NOT
54770: AND
54771: IFFALSE 54985
// begin if sci >= 6 then
54773: LD_VAR 0 8
54777: PUSH
54778: LD_INT 6
54780: GREATEREQUAL
54781: IFFALSE 54785
// exit ;
54783: GO 57204
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
54785: LD_ADDR_EXP 105
54789: PUSH
54790: LD_EXP 105
54794: PPUSH
54795: LD_VAR 0 1
54799: PPUSH
54800: LD_INT 2
54802: PPUSH
54803: CALL_OW 1
54807: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
54808: LD_ADDR_VAR 0 9
54812: PUSH
54813: LD_VAR 0 4
54817: PUSH
54818: LD_VAR 0 8
54822: DIFF
54823: PPUSH
54824: LD_INT 4
54826: PPUSH
54827: CALL 47003 0 2
54831: ST_TO_ADDR
// p := [ ] ;
54832: LD_ADDR_VAR 0 11
54836: PUSH
54837: EMPTY
54838: ST_TO_ADDR
// if sci < 6 and sort > 6 then
54839: LD_VAR 0 8
54843: PUSH
54844: LD_INT 6
54846: LESS
54847: PUSH
54848: LD_VAR 0 9
54852: PUSH
54853: LD_INT 6
54855: GREATER
54856: AND
54857: IFFALSE 54938
// begin for i = 1 to 6 - sci do
54859: LD_ADDR_VAR 0 3
54863: PUSH
54864: DOUBLE
54865: LD_INT 1
54867: DEC
54868: ST_TO_ADDR
54869: LD_INT 6
54871: PUSH
54872: LD_VAR 0 8
54876: MINUS
54877: PUSH
54878: FOR_TO
54879: IFFALSE 54934
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
54881: LD_ADDR_VAR 0 11
54885: PUSH
54886: LD_VAR 0 11
54890: PPUSH
54891: LD_VAR 0 11
54895: PUSH
54896: LD_INT 1
54898: PLUS
54899: PPUSH
54900: LD_VAR 0 9
54904: PUSH
54905: LD_INT 1
54907: ARRAY
54908: PPUSH
54909: CALL_OW 2
54913: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
54914: LD_ADDR_VAR 0 9
54918: PUSH
54919: LD_VAR 0 9
54923: PPUSH
54924: LD_INT 1
54926: PPUSH
54927: CALL_OW 3
54931: ST_TO_ADDR
// end ;
54932: GO 54878
54934: POP
54935: POP
// end else
54936: GO 54958
// if sort then
54938: LD_VAR 0 9
54942: IFFALSE 54958
// p := sort [ 1 ] ;
54944: LD_ADDR_VAR 0 11
54948: PUSH
54949: LD_VAR 0 9
54953: PUSH
54954: LD_INT 1
54956: ARRAY
54957: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
54958: LD_ADDR_VAR 0 2
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: LD_VAR 0 11
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: ST_TO_ADDR
// exit ;
54983: GO 57204
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
54985: LD_EXP 90
54989: PUSH
54990: LD_EXP 89
54994: PUSH
54995: LD_VAR 0 1
54999: ARRAY
55000: ARRAY
55001: PUSH
55002: LD_EXP 63
55006: PUSH
55007: LD_VAR 0 1
55011: ARRAY
55012: PPUSH
55013: LD_INT 2
55015: PUSH
55016: LD_INT 30
55018: PUSH
55019: LD_INT 6
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 30
55028: PUSH
55029: LD_INT 7
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 30
55038: PUSH
55039: LD_INT 8
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: PPUSH
55052: CALL_OW 72
55056: AND
55057: PUSH
55058: LD_EXP 63
55062: PUSH
55063: LD_VAR 0 1
55067: ARRAY
55068: PPUSH
55069: LD_INT 30
55071: PUSH
55072: LD_INT 3
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PPUSH
55079: CALL_OW 72
55083: AND
55084: IFFALSE 55818
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
55086: LD_ADDR_EXP 105
55090: PUSH
55091: LD_EXP 105
55095: PPUSH
55096: LD_VAR 0 1
55100: PPUSH
55101: LD_INT 3
55103: PPUSH
55104: CALL_OW 1
55108: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
55109: LD_ADDR_VAR 0 2
55113: PUSH
55114: LD_INT 0
55116: PUSH
55117: LD_INT 0
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: LD_INT 0
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: ST_TO_ADDR
// if not eng then
55132: LD_VAR 0 6
55136: NOT
55137: IFFALSE 55200
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
55139: LD_ADDR_VAR 0 11
55143: PUSH
55144: LD_VAR 0 4
55148: PPUSH
55149: LD_INT 2
55151: PPUSH
55152: CALL 47003 0 2
55156: PUSH
55157: LD_INT 1
55159: ARRAY
55160: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
55161: LD_ADDR_VAR 0 2
55165: PUSH
55166: LD_VAR 0 2
55170: PPUSH
55171: LD_INT 2
55173: PPUSH
55174: LD_VAR 0 11
55178: PPUSH
55179: CALL_OW 1
55183: ST_TO_ADDR
// tmp := tmp diff p ;
55184: LD_ADDR_VAR 0 4
55188: PUSH
55189: LD_VAR 0 4
55193: PUSH
55194: LD_VAR 0 11
55198: DIFF
55199: ST_TO_ADDR
// end ; if tmp and sci < 6 then
55200: LD_VAR 0 4
55204: PUSH
55205: LD_VAR 0 8
55209: PUSH
55210: LD_INT 6
55212: LESS
55213: AND
55214: IFFALSE 55402
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
55216: LD_ADDR_VAR 0 9
55220: PUSH
55221: LD_VAR 0 4
55225: PUSH
55226: LD_VAR 0 8
55230: PUSH
55231: LD_VAR 0 7
55235: UNION
55236: DIFF
55237: PPUSH
55238: LD_INT 4
55240: PPUSH
55241: CALL 47003 0 2
55245: ST_TO_ADDR
// p := [ ] ;
55246: LD_ADDR_VAR 0 11
55250: PUSH
55251: EMPTY
55252: ST_TO_ADDR
// if sort then
55253: LD_VAR 0 9
55257: IFFALSE 55373
// for i = 1 to 6 - sci do
55259: LD_ADDR_VAR 0 3
55263: PUSH
55264: DOUBLE
55265: LD_INT 1
55267: DEC
55268: ST_TO_ADDR
55269: LD_INT 6
55271: PUSH
55272: LD_VAR 0 8
55276: MINUS
55277: PUSH
55278: FOR_TO
55279: IFFALSE 55371
// begin if i = sort then
55281: LD_VAR 0 3
55285: PUSH
55286: LD_VAR 0 9
55290: EQUAL
55291: IFFALSE 55295
// break ;
55293: GO 55371
// if GetClass ( i ) = 4 then
55295: LD_VAR 0 3
55299: PPUSH
55300: CALL_OW 257
55304: PUSH
55305: LD_INT 4
55307: EQUAL
55308: IFFALSE 55312
// continue ;
55310: GO 55278
// p := Insert ( p , p + 1 , sort [ i ] ) ;
55312: LD_ADDR_VAR 0 11
55316: PUSH
55317: LD_VAR 0 11
55321: PPUSH
55322: LD_VAR 0 11
55326: PUSH
55327: LD_INT 1
55329: PLUS
55330: PPUSH
55331: LD_VAR 0 9
55335: PUSH
55336: LD_VAR 0 3
55340: ARRAY
55341: PPUSH
55342: CALL_OW 2
55346: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
55347: LD_ADDR_VAR 0 4
55351: PUSH
55352: LD_VAR 0 4
55356: PUSH
55357: LD_VAR 0 9
55361: PUSH
55362: LD_VAR 0 3
55366: ARRAY
55367: DIFF
55368: ST_TO_ADDR
// end ;
55369: GO 55278
55371: POP
55372: POP
// if p then
55373: LD_VAR 0 11
55377: IFFALSE 55402
// result := Replace ( result , 4 , p ) ;
55379: LD_ADDR_VAR 0 2
55383: PUSH
55384: LD_VAR 0 2
55388: PPUSH
55389: LD_INT 4
55391: PPUSH
55392: LD_VAR 0 11
55396: PPUSH
55397: CALL_OW 1
55401: ST_TO_ADDR
// end ; if tmp and mech < 6 then
55402: LD_VAR 0 4
55406: PUSH
55407: LD_VAR 0 7
55411: PUSH
55412: LD_INT 6
55414: LESS
55415: AND
55416: IFFALSE 55604
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
55418: LD_ADDR_VAR 0 9
55422: PUSH
55423: LD_VAR 0 4
55427: PUSH
55428: LD_VAR 0 8
55432: PUSH
55433: LD_VAR 0 7
55437: UNION
55438: DIFF
55439: PPUSH
55440: LD_INT 3
55442: PPUSH
55443: CALL 47003 0 2
55447: ST_TO_ADDR
// p := [ ] ;
55448: LD_ADDR_VAR 0 11
55452: PUSH
55453: EMPTY
55454: ST_TO_ADDR
// if sort then
55455: LD_VAR 0 9
55459: IFFALSE 55575
// for i = 1 to 6 - mech do
55461: LD_ADDR_VAR 0 3
55465: PUSH
55466: DOUBLE
55467: LD_INT 1
55469: DEC
55470: ST_TO_ADDR
55471: LD_INT 6
55473: PUSH
55474: LD_VAR 0 7
55478: MINUS
55479: PUSH
55480: FOR_TO
55481: IFFALSE 55573
// begin if i = sort then
55483: LD_VAR 0 3
55487: PUSH
55488: LD_VAR 0 9
55492: EQUAL
55493: IFFALSE 55497
// break ;
55495: GO 55573
// if GetClass ( i ) = 3 then
55497: LD_VAR 0 3
55501: PPUSH
55502: CALL_OW 257
55506: PUSH
55507: LD_INT 3
55509: EQUAL
55510: IFFALSE 55514
// continue ;
55512: GO 55480
// p := Insert ( p , p + 1 , sort [ i ] ) ;
55514: LD_ADDR_VAR 0 11
55518: PUSH
55519: LD_VAR 0 11
55523: PPUSH
55524: LD_VAR 0 11
55528: PUSH
55529: LD_INT 1
55531: PLUS
55532: PPUSH
55533: LD_VAR 0 9
55537: PUSH
55538: LD_VAR 0 3
55542: ARRAY
55543: PPUSH
55544: CALL_OW 2
55548: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
55549: LD_ADDR_VAR 0 4
55553: PUSH
55554: LD_VAR 0 4
55558: PUSH
55559: LD_VAR 0 9
55563: PUSH
55564: LD_VAR 0 3
55568: ARRAY
55569: DIFF
55570: ST_TO_ADDR
// end ;
55571: GO 55480
55573: POP
55574: POP
// if p then
55575: LD_VAR 0 11
55579: IFFALSE 55604
// result := Replace ( result , 3 , p ) ;
55581: LD_ADDR_VAR 0 2
55585: PUSH
55586: LD_VAR 0 2
55590: PPUSH
55591: LD_INT 3
55593: PPUSH
55594: LD_VAR 0 11
55598: PPUSH
55599: CALL_OW 1
55603: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
55604: LD_VAR 0 4
55608: PUSH
55609: LD_INT 6
55611: GREATER
55612: PUSH
55613: LD_VAR 0 6
55617: PUSH
55618: LD_INT 6
55620: LESS
55621: AND
55622: IFFALSE 55816
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
55624: LD_ADDR_VAR 0 9
55628: PUSH
55629: LD_VAR 0 4
55633: PUSH
55634: LD_VAR 0 8
55638: PUSH
55639: LD_VAR 0 7
55643: UNION
55644: PUSH
55645: LD_VAR 0 6
55649: UNION
55650: DIFF
55651: PPUSH
55652: LD_INT 2
55654: PPUSH
55655: CALL 47003 0 2
55659: ST_TO_ADDR
// p := [ ] ;
55660: LD_ADDR_VAR 0 11
55664: PUSH
55665: EMPTY
55666: ST_TO_ADDR
// if sort then
55667: LD_VAR 0 9
55671: IFFALSE 55787
// for i = 1 to 6 - eng do
55673: LD_ADDR_VAR 0 3
55677: PUSH
55678: DOUBLE
55679: LD_INT 1
55681: DEC
55682: ST_TO_ADDR
55683: LD_INT 6
55685: PUSH
55686: LD_VAR 0 6
55690: MINUS
55691: PUSH
55692: FOR_TO
55693: IFFALSE 55785
// begin if i = sort then
55695: LD_VAR 0 3
55699: PUSH
55700: LD_VAR 0 9
55704: EQUAL
55705: IFFALSE 55709
// break ;
55707: GO 55785
// if GetClass ( i ) = 2 then
55709: LD_VAR 0 3
55713: PPUSH
55714: CALL_OW 257
55718: PUSH
55719: LD_INT 2
55721: EQUAL
55722: IFFALSE 55726
// continue ;
55724: GO 55692
// p := Insert ( p , p + 1 , sort [ i ] ) ;
55726: LD_ADDR_VAR 0 11
55730: PUSH
55731: LD_VAR 0 11
55735: PPUSH
55736: LD_VAR 0 11
55740: PUSH
55741: LD_INT 1
55743: PLUS
55744: PPUSH
55745: LD_VAR 0 9
55749: PUSH
55750: LD_VAR 0 3
55754: ARRAY
55755: PPUSH
55756: CALL_OW 2
55760: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
55761: LD_ADDR_VAR 0 4
55765: PUSH
55766: LD_VAR 0 4
55770: PUSH
55771: LD_VAR 0 9
55775: PUSH
55776: LD_VAR 0 3
55780: ARRAY
55781: DIFF
55782: ST_TO_ADDR
// end ;
55783: GO 55692
55785: POP
55786: POP
// if p then
55787: LD_VAR 0 11
55791: IFFALSE 55816
// result := Replace ( result , 2 , p ) ;
55793: LD_ADDR_VAR 0 2
55797: PUSH
55798: LD_VAR 0 2
55802: PPUSH
55803: LD_INT 2
55805: PPUSH
55806: LD_VAR 0 11
55810: PPUSH
55811: CALL_OW 1
55815: ST_TO_ADDR
// end ; exit ;
55816: GO 57204
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
55818: LD_EXP 90
55822: PUSH
55823: LD_EXP 89
55827: PUSH
55828: LD_VAR 0 1
55832: ARRAY
55833: ARRAY
55834: NOT
55835: PUSH
55836: LD_EXP 63
55840: PUSH
55841: LD_VAR 0 1
55845: ARRAY
55846: PPUSH
55847: LD_INT 30
55849: PUSH
55850: LD_INT 3
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PPUSH
55857: CALL_OW 72
55861: AND
55862: PUSH
55863: LD_EXP 68
55867: PUSH
55868: LD_VAR 0 1
55872: ARRAY
55873: AND
55874: IFFALSE 56482
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
55876: LD_ADDR_EXP 105
55880: PUSH
55881: LD_EXP 105
55885: PPUSH
55886: LD_VAR 0 1
55890: PPUSH
55891: LD_INT 5
55893: PPUSH
55894: CALL_OW 1
55898: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
55899: LD_ADDR_VAR 0 2
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: LD_INT 0
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: ST_TO_ADDR
// if sci > 1 then
55922: LD_VAR 0 8
55926: PUSH
55927: LD_INT 1
55929: GREATER
55930: IFFALSE 55958
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
55932: LD_ADDR_VAR 0 4
55936: PUSH
55937: LD_VAR 0 4
55941: PUSH
55942: LD_VAR 0 8
55946: PUSH
55947: LD_VAR 0 8
55951: PUSH
55952: LD_INT 1
55954: ARRAY
55955: DIFF
55956: DIFF
55957: ST_TO_ADDR
// if tmp and not sci then
55958: LD_VAR 0 4
55962: PUSH
55963: LD_VAR 0 8
55967: NOT
55968: AND
55969: IFFALSE 56038
// begin sort := SortBySkill ( tmp , 4 ) ;
55971: LD_ADDR_VAR 0 9
55975: PUSH
55976: LD_VAR 0 4
55980: PPUSH
55981: LD_INT 4
55983: PPUSH
55984: CALL 47003 0 2
55988: ST_TO_ADDR
// if sort then
55989: LD_VAR 0 9
55993: IFFALSE 56009
// p := sort [ 1 ] ;
55995: LD_ADDR_VAR 0 11
55999: PUSH
56000: LD_VAR 0 9
56004: PUSH
56005: LD_INT 1
56007: ARRAY
56008: ST_TO_ADDR
// if p then
56009: LD_VAR 0 11
56013: IFFALSE 56038
// result := Replace ( result , 4 , p ) ;
56015: LD_ADDR_VAR 0 2
56019: PUSH
56020: LD_VAR 0 2
56024: PPUSH
56025: LD_INT 4
56027: PPUSH
56028: LD_VAR 0 11
56032: PPUSH
56033: CALL_OW 1
56037: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
56038: LD_ADDR_VAR 0 4
56042: PUSH
56043: LD_VAR 0 4
56047: PUSH
56048: LD_VAR 0 7
56052: DIFF
56053: ST_TO_ADDR
// if tmp and mech < 6 then
56054: LD_VAR 0 4
56058: PUSH
56059: LD_VAR 0 7
56063: PUSH
56064: LD_INT 6
56066: LESS
56067: AND
56068: IFFALSE 56256
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
56070: LD_ADDR_VAR 0 9
56074: PUSH
56075: LD_VAR 0 4
56079: PUSH
56080: LD_VAR 0 8
56084: PUSH
56085: LD_VAR 0 7
56089: UNION
56090: DIFF
56091: PPUSH
56092: LD_INT 3
56094: PPUSH
56095: CALL 47003 0 2
56099: ST_TO_ADDR
// p := [ ] ;
56100: LD_ADDR_VAR 0 11
56104: PUSH
56105: EMPTY
56106: ST_TO_ADDR
// if sort then
56107: LD_VAR 0 9
56111: IFFALSE 56227
// for i = 1 to 6 - mech do
56113: LD_ADDR_VAR 0 3
56117: PUSH
56118: DOUBLE
56119: LD_INT 1
56121: DEC
56122: ST_TO_ADDR
56123: LD_INT 6
56125: PUSH
56126: LD_VAR 0 7
56130: MINUS
56131: PUSH
56132: FOR_TO
56133: IFFALSE 56225
// begin if i = sort then
56135: LD_VAR 0 3
56139: PUSH
56140: LD_VAR 0 9
56144: EQUAL
56145: IFFALSE 56149
// break ;
56147: GO 56225
// if GetClass ( i ) = 3 then
56149: LD_VAR 0 3
56153: PPUSH
56154: CALL_OW 257
56158: PUSH
56159: LD_INT 3
56161: EQUAL
56162: IFFALSE 56166
// continue ;
56164: GO 56132
// p := Insert ( p , p + 1 , sort [ i ] ) ;
56166: LD_ADDR_VAR 0 11
56170: PUSH
56171: LD_VAR 0 11
56175: PPUSH
56176: LD_VAR 0 11
56180: PUSH
56181: LD_INT 1
56183: PLUS
56184: PPUSH
56185: LD_VAR 0 9
56189: PUSH
56190: LD_VAR 0 3
56194: ARRAY
56195: PPUSH
56196: CALL_OW 2
56200: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
56201: LD_ADDR_VAR 0 4
56205: PUSH
56206: LD_VAR 0 4
56210: PUSH
56211: LD_VAR 0 9
56215: PUSH
56216: LD_VAR 0 3
56220: ARRAY
56221: DIFF
56222: ST_TO_ADDR
// end ;
56223: GO 56132
56225: POP
56226: POP
// if p then
56227: LD_VAR 0 11
56231: IFFALSE 56256
// result := Replace ( result , 3 , p ) ;
56233: LD_ADDR_VAR 0 2
56237: PUSH
56238: LD_VAR 0 2
56242: PPUSH
56243: LD_INT 3
56245: PPUSH
56246: LD_VAR 0 11
56250: PPUSH
56251: CALL_OW 1
56255: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
56256: LD_ADDR_VAR 0 4
56260: PUSH
56261: LD_VAR 0 4
56265: PUSH
56266: LD_VAR 0 6
56270: DIFF
56271: ST_TO_ADDR
// if tmp and eng < 6 then
56272: LD_VAR 0 4
56276: PUSH
56277: LD_VAR 0 6
56281: PUSH
56282: LD_INT 6
56284: LESS
56285: AND
56286: IFFALSE 56480
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
56288: LD_ADDR_VAR 0 9
56292: PUSH
56293: LD_VAR 0 4
56297: PUSH
56298: LD_VAR 0 8
56302: PUSH
56303: LD_VAR 0 7
56307: UNION
56308: PUSH
56309: LD_VAR 0 6
56313: UNION
56314: DIFF
56315: PPUSH
56316: LD_INT 2
56318: PPUSH
56319: CALL 47003 0 2
56323: ST_TO_ADDR
// p := [ ] ;
56324: LD_ADDR_VAR 0 11
56328: PUSH
56329: EMPTY
56330: ST_TO_ADDR
// if sort then
56331: LD_VAR 0 9
56335: IFFALSE 56451
// for i = 1 to 6 - eng do
56337: LD_ADDR_VAR 0 3
56341: PUSH
56342: DOUBLE
56343: LD_INT 1
56345: DEC
56346: ST_TO_ADDR
56347: LD_INT 6
56349: PUSH
56350: LD_VAR 0 6
56354: MINUS
56355: PUSH
56356: FOR_TO
56357: IFFALSE 56449
// begin if i = sort then
56359: LD_VAR 0 3
56363: PUSH
56364: LD_VAR 0 9
56368: EQUAL
56369: IFFALSE 56373
// break ;
56371: GO 56449
// if GetClass ( i ) = 2 then
56373: LD_VAR 0 3
56377: PPUSH
56378: CALL_OW 257
56382: PUSH
56383: LD_INT 2
56385: EQUAL
56386: IFFALSE 56390
// continue ;
56388: GO 56356
// p := Insert ( p , p + 1 , sort [ i ] ) ;
56390: LD_ADDR_VAR 0 11
56394: PUSH
56395: LD_VAR 0 11
56399: PPUSH
56400: LD_VAR 0 11
56404: PUSH
56405: LD_INT 1
56407: PLUS
56408: PPUSH
56409: LD_VAR 0 9
56413: PUSH
56414: LD_VAR 0 3
56418: ARRAY
56419: PPUSH
56420: CALL_OW 2
56424: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
56425: LD_ADDR_VAR 0 4
56429: PUSH
56430: LD_VAR 0 4
56434: PUSH
56435: LD_VAR 0 9
56439: PUSH
56440: LD_VAR 0 3
56444: ARRAY
56445: DIFF
56446: ST_TO_ADDR
// end ;
56447: GO 56356
56449: POP
56450: POP
// if p then
56451: LD_VAR 0 11
56455: IFFALSE 56480
// result := Replace ( result , 2 , p ) ;
56457: LD_ADDR_VAR 0 2
56461: PUSH
56462: LD_VAR 0 2
56466: PPUSH
56467: LD_INT 2
56469: PPUSH
56470: LD_VAR 0 11
56474: PPUSH
56475: CALL_OW 1
56479: ST_TO_ADDR
// end ; exit ;
56480: GO 57204
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
56482: LD_EXP 90
56486: PUSH
56487: LD_EXP 89
56491: PUSH
56492: LD_VAR 0 1
56496: ARRAY
56497: ARRAY
56498: NOT
56499: PUSH
56500: LD_EXP 63
56504: PUSH
56505: LD_VAR 0 1
56509: ARRAY
56510: PPUSH
56511: LD_INT 30
56513: PUSH
56514: LD_INT 3
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PPUSH
56521: CALL_OW 72
56525: AND
56526: PUSH
56527: LD_EXP 68
56531: PUSH
56532: LD_VAR 0 1
56536: ARRAY
56537: NOT
56538: AND
56539: IFFALSE 57204
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
56541: LD_ADDR_EXP 105
56545: PUSH
56546: LD_EXP 105
56550: PPUSH
56551: LD_VAR 0 1
56555: PPUSH
56556: LD_INT 6
56558: PPUSH
56559: CALL_OW 1
56563: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
56564: LD_ADDR_VAR 0 2
56568: PUSH
56569: LD_INT 0
56571: PUSH
56572: LD_INT 0
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: ST_TO_ADDR
// if sci >= 1 then
56587: LD_VAR 0 8
56591: PUSH
56592: LD_INT 1
56594: GREATEREQUAL
56595: IFFALSE 56617
// tmp := tmp diff sci [ 1 ] ;
56597: LD_ADDR_VAR 0 4
56601: PUSH
56602: LD_VAR 0 4
56606: PUSH
56607: LD_VAR 0 8
56611: PUSH
56612: LD_INT 1
56614: ARRAY
56615: DIFF
56616: ST_TO_ADDR
// if tmp and not sci then
56617: LD_VAR 0 4
56621: PUSH
56622: LD_VAR 0 8
56626: NOT
56627: AND
56628: IFFALSE 56697
// begin sort := SortBySkill ( tmp , 4 ) ;
56630: LD_ADDR_VAR 0 9
56634: PUSH
56635: LD_VAR 0 4
56639: PPUSH
56640: LD_INT 4
56642: PPUSH
56643: CALL 47003 0 2
56647: ST_TO_ADDR
// if sort then
56648: LD_VAR 0 9
56652: IFFALSE 56668
// p := sort [ 1 ] ;
56654: LD_ADDR_VAR 0 11
56658: PUSH
56659: LD_VAR 0 9
56663: PUSH
56664: LD_INT 1
56666: ARRAY
56667: ST_TO_ADDR
// if p then
56668: LD_VAR 0 11
56672: IFFALSE 56697
// result := Replace ( result , 4 , p ) ;
56674: LD_ADDR_VAR 0 2
56678: PUSH
56679: LD_VAR 0 2
56683: PPUSH
56684: LD_INT 4
56686: PPUSH
56687: LD_VAR 0 11
56691: PPUSH
56692: CALL_OW 1
56696: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
56697: LD_ADDR_VAR 0 4
56701: PUSH
56702: LD_VAR 0 4
56706: PUSH
56707: LD_VAR 0 7
56711: DIFF
56712: ST_TO_ADDR
// if tmp and mech < 6 then
56713: LD_VAR 0 4
56717: PUSH
56718: LD_VAR 0 7
56722: PUSH
56723: LD_INT 6
56725: LESS
56726: AND
56727: IFFALSE 56909
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
56729: LD_ADDR_VAR 0 9
56733: PUSH
56734: LD_VAR 0 4
56738: PUSH
56739: LD_VAR 0 7
56743: DIFF
56744: PPUSH
56745: LD_INT 3
56747: PPUSH
56748: CALL 47003 0 2
56752: ST_TO_ADDR
// p := [ ] ;
56753: LD_ADDR_VAR 0 11
56757: PUSH
56758: EMPTY
56759: ST_TO_ADDR
// if sort then
56760: LD_VAR 0 9
56764: IFFALSE 56880
// for i = 1 to 6 - mech do
56766: LD_ADDR_VAR 0 3
56770: PUSH
56771: DOUBLE
56772: LD_INT 1
56774: DEC
56775: ST_TO_ADDR
56776: LD_INT 6
56778: PUSH
56779: LD_VAR 0 7
56783: MINUS
56784: PUSH
56785: FOR_TO
56786: IFFALSE 56878
// begin if i = sort then
56788: LD_VAR 0 3
56792: PUSH
56793: LD_VAR 0 9
56797: EQUAL
56798: IFFALSE 56802
// break ;
56800: GO 56878
// if GetClass ( i ) = 3 then
56802: LD_VAR 0 3
56806: PPUSH
56807: CALL_OW 257
56811: PUSH
56812: LD_INT 3
56814: EQUAL
56815: IFFALSE 56819
// continue ;
56817: GO 56785
// p := Insert ( p , p + 1 , sort [ i ] ) ;
56819: LD_ADDR_VAR 0 11
56823: PUSH
56824: LD_VAR 0 11
56828: PPUSH
56829: LD_VAR 0 11
56833: PUSH
56834: LD_INT 1
56836: PLUS
56837: PPUSH
56838: LD_VAR 0 9
56842: PUSH
56843: LD_VAR 0 3
56847: ARRAY
56848: PPUSH
56849: CALL_OW 2
56853: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
56854: LD_ADDR_VAR 0 4
56858: PUSH
56859: LD_VAR 0 4
56863: PUSH
56864: LD_VAR 0 9
56868: PUSH
56869: LD_VAR 0 3
56873: ARRAY
56874: DIFF
56875: ST_TO_ADDR
// end ;
56876: GO 56785
56878: POP
56879: POP
// if p then
56880: LD_VAR 0 11
56884: IFFALSE 56909
// result := Replace ( result , 3 , p ) ;
56886: LD_ADDR_VAR 0 2
56890: PUSH
56891: LD_VAR 0 2
56895: PPUSH
56896: LD_INT 3
56898: PPUSH
56899: LD_VAR 0 11
56903: PPUSH
56904: CALL_OW 1
56908: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
56909: LD_ADDR_VAR 0 4
56913: PUSH
56914: LD_VAR 0 4
56918: PUSH
56919: LD_VAR 0 6
56923: DIFF
56924: ST_TO_ADDR
// if tmp and eng < 4 then
56925: LD_VAR 0 4
56929: PUSH
56930: LD_VAR 0 6
56934: PUSH
56935: LD_INT 4
56937: LESS
56938: AND
56939: IFFALSE 57129
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
56941: LD_ADDR_VAR 0 9
56945: PUSH
56946: LD_VAR 0 4
56950: PUSH
56951: LD_VAR 0 7
56955: PUSH
56956: LD_VAR 0 6
56960: UNION
56961: DIFF
56962: PPUSH
56963: LD_INT 2
56965: PPUSH
56966: CALL 47003 0 2
56970: ST_TO_ADDR
// p := [ ] ;
56971: LD_ADDR_VAR 0 11
56975: PUSH
56976: EMPTY
56977: ST_TO_ADDR
// if sort then
56978: LD_VAR 0 9
56982: IFFALSE 57098
// for i = 1 to 4 - eng do
56984: LD_ADDR_VAR 0 3
56988: PUSH
56989: DOUBLE
56990: LD_INT 1
56992: DEC
56993: ST_TO_ADDR
56994: LD_INT 4
56996: PUSH
56997: LD_VAR 0 6
57001: MINUS
57002: PUSH
57003: FOR_TO
57004: IFFALSE 57096
// begin if i = sort then
57006: LD_VAR 0 3
57010: PUSH
57011: LD_VAR 0 9
57015: EQUAL
57016: IFFALSE 57020
// break ;
57018: GO 57096
// if GetClass ( i ) = 2 then
57020: LD_VAR 0 3
57024: PPUSH
57025: CALL_OW 257
57029: PUSH
57030: LD_INT 2
57032: EQUAL
57033: IFFALSE 57037
// continue ;
57035: GO 57003
// p := Insert ( p , p + 1 , sort [ i ] ) ;
57037: LD_ADDR_VAR 0 11
57041: PUSH
57042: LD_VAR 0 11
57046: PPUSH
57047: LD_VAR 0 11
57051: PUSH
57052: LD_INT 1
57054: PLUS
57055: PPUSH
57056: LD_VAR 0 9
57060: PUSH
57061: LD_VAR 0 3
57065: ARRAY
57066: PPUSH
57067: CALL_OW 2
57071: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
57072: LD_ADDR_VAR 0 4
57076: PUSH
57077: LD_VAR 0 4
57081: PUSH
57082: LD_VAR 0 9
57086: PUSH
57087: LD_VAR 0 3
57091: ARRAY
57092: DIFF
57093: ST_TO_ADDR
// end ;
57094: GO 57003
57096: POP
57097: POP
// if p then
57098: LD_VAR 0 11
57102: IFFALSE 57127
// result := Replace ( result , 2 , p ) ;
57104: LD_ADDR_VAR 0 2
57108: PUSH
57109: LD_VAR 0 2
57113: PPUSH
57114: LD_INT 2
57116: PPUSH
57117: LD_VAR 0 11
57121: PPUSH
57122: CALL_OW 1
57126: ST_TO_ADDR
// end else
57127: GO 57173
// for i = eng downto 5 do
57129: LD_ADDR_VAR 0 3
57133: PUSH
57134: DOUBLE
57135: LD_VAR 0 6
57139: INC
57140: ST_TO_ADDR
57141: LD_INT 5
57143: PUSH
57144: FOR_DOWNTO
57145: IFFALSE 57171
// tmp := tmp union eng [ i ] ;
57147: LD_ADDR_VAR 0 4
57151: PUSH
57152: LD_VAR 0 4
57156: PUSH
57157: LD_VAR 0 6
57161: PUSH
57162: LD_VAR 0 3
57166: ARRAY
57167: UNION
57168: ST_TO_ADDR
57169: GO 57144
57171: POP
57172: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
57173: LD_ADDR_VAR 0 2
57177: PUSH
57178: LD_VAR 0 2
57182: PPUSH
57183: LD_INT 1
57185: PPUSH
57186: LD_VAR 0 4
57190: PUSH
57191: LD_VAR 0 5
57195: DIFF
57196: PPUSH
57197: CALL_OW 1
57201: ST_TO_ADDR
// exit ;
57202: GO 57204
// end ; end ;
57204: LD_VAR 0 2
57208: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
57209: LD_INT 0
57211: PPUSH
57212: PPUSH
57213: PPUSH
// if not mc_bases then
57214: LD_EXP 63
57218: NOT
57219: IFFALSE 57223
// exit ;
57221: GO 57329
// for i = 1 to mc_bases do
57223: LD_ADDR_VAR 0 2
57227: PUSH
57228: DOUBLE
57229: LD_INT 1
57231: DEC
57232: ST_TO_ADDR
57233: LD_EXP 63
57237: PUSH
57238: FOR_TO
57239: IFFALSE 57320
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
57241: LD_ADDR_VAR 0 3
57245: PUSH
57246: LD_EXP 63
57250: PUSH
57251: LD_VAR 0 2
57255: ARRAY
57256: PPUSH
57257: LD_INT 21
57259: PUSH
57260: LD_INT 3
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 3
57269: PUSH
57270: LD_INT 24
57272: PUSH
57273: LD_INT 1000
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PPUSH
57288: CALL_OW 72
57292: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
57293: LD_ADDR_EXP 64
57297: PUSH
57298: LD_EXP 64
57302: PPUSH
57303: LD_VAR 0 2
57307: PPUSH
57308: LD_VAR 0 3
57312: PPUSH
57313: CALL_OW 1
57317: ST_TO_ADDR
// end ;
57318: GO 57238
57320: POP
57321: POP
// RaiseSailEvent ( 101 ) ;
57322: LD_INT 101
57324: PPUSH
57325: CALL_OW 427
// end ;
57329: LD_VAR 0 1
57333: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
57334: LD_INT 0
57336: PPUSH
57337: PPUSH
57338: PPUSH
57339: PPUSH
57340: PPUSH
57341: PPUSH
57342: PPUSH
// if not mc_bases then
57343: LD_EXP 63
57347: NOT
57348: IFFALSE 57352
// exit ;
57350: GO 57914
// for i = 1 to mc_bases do
57352: LD_ADDR_VAR 0 2
57356: PUSH
57357: DOUBLE
57358: LD_INT 1
57360: DEC
57361: ST_TO_ADDR
57362: LD_EXP 63
57366: PUSH
57367: FOR_TO
57368: IFFALSE 57905
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
57370: LD_ADDR_VAR 0 5
57374: PUSH
57375: LD_EXP 63
57379: PUSH
57380: LD_VAR 0 2
57384: ARRAY
57385: PUSH
57386: LD_EXP 92
57390: PUSH
57391: LD_VAR 0 2
57395: ARRAY
57396: UNION
57397: PPUSH
57398: LD_INT 21
57400: PUSH
57401: LD_INT 1
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: LD_INT 3
57413: PUSH
57414: LD_INT 54
57416: PUSH
57417: EMPTY
57418: LIST
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 3
57426: PUSH
57427: LD_INT 24
57429: PUSH
57430: LD_INT 800
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: LIST
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PPUSH
57450: CALL_OW 72
57454: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
57455: LD_ADDR_VAR 0 6
57459: PUSH
57460: LD_EXP 63
57464: PUSH
57465: LD_VAR 0 2
57469: ARRAY
57470: PPUSH
57471: LD_INT 21
57473: PUSH
57474: LD_INT 1
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 1
57483: PUSH
57484: LD_INT 3
57486: PUSH
57487: LD_INT 54
57489: PUSH
57490: EMPTY
57491: LIST
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 3
57499: PUSH
57500: LD_INT 24
57502: PUSH
57503: LD_INT 250
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: LIST
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PPUSH
57523: CALL_OW 72
57527: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
57528: LD_ADDR_VAR 0 7
57532: PUSH
57533: LD_VAR 0 5
57537: PUSH
57538: LD_VAR 0 6
57542: DIFF
57543: ST_TO_ADDR
// if not need_heal_1 then
57544: LD_VAR 0 6
57548: NOT
57549: IFFALSE 57582
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
57551: LD_ADDR_EXP 66
57555: PUSH
57556: LD_EXP 66
57560: PPUSH
57561: LD_VAR 0 2
57565: PUSH
57566: LD_INT 1
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PPUSH
57573: EMPTY
57574: PPUSH
57575: CALL 17454 0 3
57579: ST_TO_ADDR
57580: GO 57652
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
57582: LD_ADDR_EXP 66
57586: PUSH
57587: LD_EXP 66
57591: PPUSH
57592: LD_VAR 0 2
57596: PUSH
57597: LD_INT 1
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PPUSH
57604: LD_EXP 66
57608: PUSH
57609: LD_VAR 0 2
57613: ARRAY
57614: PUSH
57615: LD_INT 1
57617: ARRAY
57618: PPUSH
57619: LD_INT 3
57621: PUSH
57622: LD_INT 24
57624: PUSH
57625: LD_INT 1000
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PPUSH
57636: CALL_OW 72
57640: PUSH
57641: LD_VAR 0 6
57645: UNION
57646: PPUSH
57647: CALL 17454 0 3
57651: ST_TO_ADDR
// if not need_heal_2 then
57652: LD_VAR 0 7
57656: NOT
57657: IFFALSE 57690
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
57659: LD_ADDR_EXP 66
57663: PUSH
57664: LD_EXP 66
57668: PPUSH
57669: LD_VAR 0 2
57673: PUSH
57674: LD_INT 2
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PPUSH
57681: EMPTY
57682: PPUSH
57683: CALL 17454 0 3
57687: ST_TO_ADDR
57688: GO 57722
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
57690: LD_ADDR_EXP 66
57694: PUSH
57695: LD_EXP 66
57699: PPUSH
57700: LD_VAR 0 2
57704: PUSH
57705: LD_INT 2
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PPUSH
57712: LD_VAR 0 7
57716: PPUSH
57717: CALL 17454 0 3
57721: ST_TO_ADDR
// if need_heal_2 then
57722: LD_VAR 0 7
57726: IFFALSE 57887
// for j in need_heal_2 do
57728: LD_ADDR_VAR 0 3
57732: PUSH
57733: LD_VAR 0 7
57737: PUSH
57738: FOR_IN
57739: IFFALSE 57885
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
57741: LD_ADDR_VAR 0 5
57745: PUSH
57746: LD_EXP 63
57750: PUSH
57751: LD_VAR 0 2
57755: ARRAY
57756: PPUSH
57757: LD_INT 2
57759: PUSH
57760: LD_INT 30
57762: PUSH
57763: LD_INT 6
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 30
57772: PUSH
57773: LD_INT 7
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 30
57782: PUSH
57783: LD_INT 8
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 30
57792: PUSH
57793: LD_INT 0
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 30
57802: PUSH
57803: LD_INT 1
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: PPUSH
57818: CALL_OW 72
57822: ST_TO_ADDR
// if tmp then
57823: LD_VAR 0 5
57827: IFFALSE 57883
// begin k := NearestUnitToUnit ( tmp , j ) ;
57829: LD_ADDR_VAR 0 4
57833: PUSH
57834: LD_VAR 0 5
57838: PPUSH
57839: LD_VAR 0 3
57843: PPUSH
57844: CALL_OW 74
57848: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
57849: LD_VAR 0 3
57853: PPUSH
57854: LD_VAR 0 4
57858: PPUSH
57859: CALL_OW 296
57863: PUSH
57864: LD_INT 5
57866: GREATER
57867: IFFALSE 57883
// ComMoveUnit ( j , k ) ;
57869: LD_VAR 0 3
57873: PPUSH
57874: LD_VAR 0 4
57878: PPUSH
57879: CALL_OW 112
// end ; end ;
57883: GO 57738
57885: POP
57886: POP
// if not need_heal_1 and not need_heal_2 then
57887: LD_VAR 0 6
57891: NOT
57892: PUSH
57893: LD_VAR 0 7
57897: NOT
57898: AND
57899: IFFALSE 57903
// continue ;
57901: GO 57367
// end ;
57903: GO 57367
57905: POP
57906: POP
// RaiseSailEvent ( 102 ) ;
57907: LD_INT 102
57909: PPUSH
57910: CALL_OW 427
// end ;
57914: LD_VAR 0 1
57918: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
57919: LD_INT 0
57921: PPUSH
57922: PPUSH
57923: PPUSH
57924: PPUSH
57925: PPUSH
57926: PPUSH
57927: PPUSH
57928: PPUSH
// if not mc_bases then
57929: LD_EXP 63
57933: NOT
57934: IFFALSE 57938
// exit ;
57936: GO 58773
// for i = 1 to mc_bases do
57938: LD_ADDR_VAR 0 2
57942: PUSH
57943: DOUBLE
57944: LD_INT 1
57946: DEC
57947: ST_TO_ADDR
57948: LD_EXP 63
57952: PUSH
57953: FOR_TO
57954: IFFALSE 58771
// begin if not mc_building_need_repair [ i ] then
57956: LD_EXP 64
57960: PUSH
57961: LD_VAR 0 2
57965: ARRAY
57966: NOT
57967: IFFALSE 58141
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
57969: LD_ADDR_VAR 0 6
57973: PUSH
57974: LD_EXP 82
57978: PUSH
57979: LD_VAR 0 2
57983: ARRAY
57984: PPUSH
57985: LD_INT 3
57987: PUSH
57988: LD_INT 24
57990: PUSH
57991: LD_INT 1000
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 2
58004: PUSH
58005: LD_INT 34
58007: PUSH
58008: LD_INT 13
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 34
58017: PUSH
58018: LD_INT 52
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: LIST
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PPUSH
58034: CALL_OW 72
58038: ST_TO_ADDR
// if cranes then
58039: LD_VAR 0 6
58043: IFFALSE 58105
// for j in cranes do
58045: LD_ADDR_VAR 0 3
58049: PUSH
58050: LD_VAR 0 6
58054: PUSH
58055: FOR_IN
58056: IFFALSE 58103
// if not IsInArea ( j , mc_parking [ i ] ) then
58058: LD_VAR 0 3
58062: PPUSH
58063: LD_EXP 87
58067: PUSH
58068: LD_VAR 0 2
58072: ARRAY
58073: PPUSH
58074: CALL_OW 308
58078: NOT
58079: IFFALSE 58101
// ComMoveToArea ( j , mc_parking [ i ] ) ;
58081: LD_VAR 0 3
58085: PPUSH
58086: LD_EXP 87
58090: PUSH
58091: LD_VAR 0 2
58095: ARRAY
58096: PPUSH
58097: CALL_OW 113
58101: GO 58055
58103: POP
58104: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
58105: LD_ADDR_EXP 65
58109: PUSH
58110: LD_EXP 65
58114: PPUSH
58115: LD_VAR 0 2
58119: PPUSH
58120: EMPTY
58121: PPUSH
58122: CALL_OW 1
58126: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
58127: LD_VAR 0 2
58131: PPUSH
58132: LD_INT 101
58134: PPUSH
58135: CALL 53042 0 2
// continue ;
58139: GO 57953
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
58141: LD_ADDR_EXP 69
58145: PUSH
58146: LD_EXP 69
58150: PPUSH
58151: LD_VAR 0 2
58155: PPUSH
58156: EMPTY
58157: PPUSH
58158: CALL_OW 1
58162: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
58163: LD_VAR 0 2
58167: PPUSH
58168: LD_INT 103
58170: PPUSH
58171: CALL 53042 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
58175: LD_ADDR_VAR 0 5
58179: PUSH
58180: LD_EXP 63
58184: PUSH
58185: LD_VAR 0 2
58189: ARRAY
58190: PUSH
58191: LD_EXP 92
58195: PUSH
58196: LD_VAR 0 2
58200: ARRAY
58201: UNION
58202: PPUSH
58203: LD_INT 2
58205: PUSH
58206: LD_INT 25
58208: PUSH
58209: LD_INT 2
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 25
58218: PUSH
58219: LD_INT 16
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: LIST
58230: PUSH
58231: EMPTY
58232: LIST
58233: PPUSH
58234: CALL_OW 72
58238: PUSH
58239: LD_EXP 66
58243: PUSH
58244: LD_VAR 0 2
58248: ARRAY
58249: PUSH
58250: LD_INT 1
58252: ARRAY
58253: PUSH
58254: LD_EXP 66
58258: PUSH
58259: LD_VAR 0 2
58263: ARRAY
58264: PUSH
58265: LD_INT 2
58267: ARRAY
58268: UNION
58269: DIFF
58270: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
58271: LD_ADDR_VAR 0 6
58275: PUSH
58276: LD_EXP 82
58280: PUSH
58281: LD_VAR 0 2
58285: ARRAY
58286: PPUSH
58287: LD_INT 2
58289: PUSH
58290: LD_INT 34
58292: PUSH
58293: LD_INT 13
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 34
58302: PUSH
58303: LD_INT 52
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: LIST
58314: PPUSH
58315: CALL_OW 72
58319: ST_TO_ADDR
// if cranes then
58320: LD_VAR 0 6
58324: IFFALSE 58460
// begin for j in cranes do
58326: LD_ADDR_VAR 0 3
58330: PUSH
58331: LD_VAR 0 6
58335: PUSH
58336: FOR_IN
58337: IFFALSE 58458
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
58339: LD_VAR 0 3
58343: PPUSH
58344: CALL_OW 256
58348: PUSH
58349: LD_INT 500
58351: GREATEREQUAL
58352: PUSH
58353: LD_VAR 0 3
58357: PPUSH
58358: CALL_OW 314
58362: NOT
58363: AND
58364: IFFALSE 58398
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
58366: LD_VAR 0 3
58370: PPUSH
58371: LD_EXP 64
58375: PUSH
58376: LD_VAR 0 2
58380: ARRAY
58381: PPUSH
58382: LD_VAR 0 3
58386: PPUSH
58387: CALL_OW 74
58391: PPUSH
58392: CALL_OW 130
58396: GO 58456
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
58398: LD_VAR 0 3
58402: PPUSH
58403: CALL_OW 256
58407: PUSH
58408: LD_INT 500
58410: LESS
58411: PUSH
58412: LD_VAR 0 3
58416: PPUSH
58417: LD_EXP 87
58421: PUSH
58422: LD_VAR 0 2
58426: ARRAY
58427: PPUSH
58428: CALL_OW 308
58432: NOT
58433: AND
58434: IFFALSE 58456
// ComMoveToArea ( j , mc_parking [ i ] ) ;
58436: LD_VAR 0 3
58440: PPUSH
58441: LD_EXP 87
58445: PUSH
58446: LD_VAR 0 2
58450: ARRAY
58451: PPUSH
58452: CALL_OW 113
58456: GO 58336
58458: POP
58459: POP
// end ; if tmp > 3 then
58460: LD_VAR 0 5
58464: PUSH
58465: LD_INT 3
58467: GREATER
58468: IFFALSE 58488
// tmp := ShrinkArray ( tmp , 4 ) ;
58470: LD_ADDR_VAR 0 5
58474: PUSH
58475: LD_VAR 0 5
58479: PPUSH
58480: LD_INT 4
58482: PPUSH
58483: CALL 48680 0 2
58487: ST_TO_ADDR
// if not tmp then
58488: LD_VAR 0 5
58492: NOT
58493: IFFALSE 58497
// continue ;
58495: GO 57953
// for j in tmp do
58497: LD_ADDR_VAR 0 3
58501: PUSH
58502: LD_VAR 0 5
58506: PUSH
58507: FOR_IN
58508: IFFALSE 58767
// begin if IsInUnit ( j ) then
58510: LD_VAR 0 3
58514: PPUSH
58515: CALL_OW 310
58519: IFFALSE 58530
// ComExitBuilding ( j ) ;
58521: LD_VAR 0 3
58525: PPUSH
58526: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
58530: LD_VAR 0 3
58534: PUSH
58535: LD_EXP 65
58539: PUSH
58540: LD_VAR 0 2
58544: ARRAY
58545: IN
58546: NOT
58547: IFFALSE 58605
// begin SetTag ( j , 101 ) ;
58549: LD_VAR 0 3
58553: PPUSH
58554: LD_INT 101
58556: PPUSH
58557: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
58561: LD_ADDR_EXP 65
58565: PUSH
58566: LD_EXP 65
58570: PPUSH
58571: LD_VAR 0 2
58575: PUSH
58576: LD_EXP 65
58580: PUSH
58581: LD_VAR 0 2
58585: ARRAY
58586: PUSH
58587: LD_INT 1
58589: PLUS
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PPUSH
58595: LD_VAR 0 3
58599: PPUSH
58600: CALL 17454 0 3
58604: ST_TO_ADDR
// end ; wait ( 1 ) ;
58605: LD_INT 1
58607: PPUSH
58608: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
58612: LD_ADDR_VAR 0 7
58616: PUSH
58617: LD_EXP 64
58621: PUSH
58622: LD_VAR 0 2
58626: ARRAY
58627: ST_TO_ADDR
// if mc_scan [ i ] then
58628: LD_EXP 86
58632: PUSH
58633: LD_VAR 0 2
58637: ARRAY
58638: IFFALSE 58700
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
58640: LD_ADDR_VAR 0 7
58644: PUSH
58645: LD_EXP 64
58649: PUSH
58650: LD_VAR 0 2
58654: ARRAY
58655: PPUSH
58656: LD_INT 3
58658: PUSH
58659: LD_INT 30
58661: PUSH
58662: LD_INT 32
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 30
58671: PUSH
58672: LD_INT 33
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 30
58681: PUSH
58682: LD_INT 31
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: PPUSH
58695: CALL_OW 72
58699: ST_TO_ADDR
// if not to_repair_tmp then
58700: LD_VAR 0 7
58704: NOT
58705: IFFALSE 58709
// continue ;
58707: GO 58507
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
58709: LD_ADDR_VAR 0 8
58713: PUSH
58714: LD_VAR 0 7
58718: PPUSH
58719: LD_VAR 0 3
58723: PPUSH
58724: CALL_OW 74
58728: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 5 then
58729: LD_VAR 0 8
58733: PPUSH
58734: LD_INT 16
58736: PPUSH
58737: CALL 20047 0 2
58741: PUSH
58742: LD_INT 4
58744: ARRAY
58745: PUSH
58746: LD_INT 5
58748: LESS
58749: IFFALSE 58765
// ComRepairBuilding ( j , to_repair ) ;
58751: LD_VAR 0 3
58755: PPUSH
58756: LD_VAR 0 8
58760: PPUSH
58761: CALL_OW 130
// end ;
58765: GO 58507
58767: POP
58768: POP
// end ;
58769: GO 57953
58771: POP
58772: POP
// end ;
58773: LD_VAR 0 1
58777: RET
// export function MC_Heal ; var i , j , tmp ; begin
58778: LD_INT 0
58780: PPUSH
58781: PPUSH
58782: PPUSH
58783: PPUSH
// if not mc_bases then
58784: LD_EXP 63
58788: NOT
58789: IFFALSE 58793
// exit ;
58791: GO 59195
// for i = 1 to mc_bases do
58793: LD_ADDR_VAR 0 2
58797: PUSH
58798: DOUBLE
58799: LD_INT 1
58801: DEC
58802: ST_TO_ADDR
58803: LD_EXP 63
58807: PUSH
58808: FOR_TO
58809: IFFALSE 59193
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
58811: LD_EXP 66
58815: PUSH
58816: LD_VAR 0 2
58820: ARRAY
58821: PUSH
58822: LD_INT 1
58824: ARRAY
58825: NOT
58826: PUSH
58827: LD_EXP 66
58831: PUSH
58832: LD_VAR 0 2
58836: ARRAY
58837: PUSH
58838: LD_INT 2
58840: ARRAY
58841: NOT
58842: AND
58843: IFFALSE 58881
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
58845: LD_ADDR_EXP 67
58849: PUSH
58850: LD_EXP 67
58854: PPUSH
58855: LD_VAR 0 2
58859: PPUSH
58860: EMPTY
58861: PPUSH
58862: CALL_OW 1
58866: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
58867: LD_VAR 0 2
58871: PPUSH
58872: LD_INT 102
58874: PPUSH
58875: CALL 53042 0 2
// continue ;
58879: GO 58808
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
58881: LD_ADDR_VAR 0 4
58885: PUSH
58886: LD_EXP 63
58890: PUSH
58891: LD_VAR 0 2
58895: ARRAY
58896: PPUSH
58897: LD_INT 25
58899: PUSH
58900: LD_INT 4
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PPUSH
58907: CALL_OW 72
58911: ST_TO_ADDR
// if not tmp then
58912: LD_VAR 0 4
58916: NOT
58917: IFFALSE 58921
// continue ;
58919: GO 58808
// if mc_taming [ i ] then
58921: LD_EXP 94
58925: PUSH
58926: LD_VAR 0 2
58930: ARRAY
58931: IFFALSE 58955
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
58933: LD_ADDR_EXP 94
58937: PUSH
58938: LD_EXP 94
58942: PPUSH
58943: LD_VAR 0 2
58947: PPUSH
58948: EMPTY
58949: PPUSH
58950: CALL_OW 1
58954: ST_TO_ADDR
// for j in tmp do
58955: LD_ADDR_VAR 0 3
58959: PUSH
58960: LD_VAR 0 4
58964: PUSH
58965: FOR_IN
58966: IFFALSE 59189
// begin if IsInUnit ( j ) then
58968: LD_VAR 0 3
58972: PPUSH
58973: CALL_OW 310
58977: IFFALSE 58988
// ComExitBuilding ( j ) ;
58979: LD_VAR 0 3
58983: PPUSH
58984: CALL_OW 122
// if not j in mc_healers [ i ] then
58988: LD_VAR 0 3
58992: PUSH
58993: LD_EXP 67
58997: PUSH
58998: LD_VAR 0 2
59002: ARRAY
59003: IN
59004: NOT
59005: IFFALSE 59051
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
59007: LD_ADDR_EXP 67
59011: PUSH
59012: LD_EXP 67
59016: PPUSH
59017: LD_VAR 0 2
59021: PUSH
59022: LD_EXP 67
59026: PUSH
59027: LD_VAR 0 2
59031: ARRAY
59032: PUSH
59033: LD_INT 1
59035: PLUS
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PPUSH
59041: LD_VAR 0 3
59045: PPUSH
59046: CALL 17454 0 3
59050: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
59051: LD_VAR 0 3
59055: PPUSH
59056: CALL_OW 110
59060: PUSH
59061: LD_INT 102
59063: NONEQUAL
59064: IFFALSE 59078
// SetTag ( j , 102 ) ;
59066: LD_VAR 0 3
59070: PPUSH
59071: LD_INT 102
59073: PPUSH
59074: CALL_OW 109
// Wait ( 3 ) ;
59078: LD_INT 3
59080: PPUSH
59081: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
59085: LD_EXP 66
59089: PUSH
59090: LD_VAR 0 2
59094: ARRAY
59095: PUSH
59096: LD_INT 1
59098: ARRAY
59099: IFFALSE 59131
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
59101: LD_VAR 0 3
59105: PPUSH
59106: LD_EXP 66
59110: PUSH
59111: LD_VAR 0 2
59115: ARRAY
59116: PUSH
59117: LD_INT 1
59119: ARRAY
59120: PUSH
59121: LD_INT 1
59123: ARRAY
59124: PPUSH
59125: CALL_OW 128
59129: GO 59187
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
59131: LD_VAR 0 3
59135: PPUSH
59136: CALL_OW 314
59140: NOT
59141: PUSH
59142: LD_EXP 66
59146: PUSH
59147: LD_VAR 0 2
59151: ARRAY
59152: PUSH
59153: LD_INT 2
59155: ARRAY
59156: AND
59157: IFFALSE 59187
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
59159: LD_VAR 0 3
59163: PPUSH
59164: LD_EXP 66
59168: PUSH
59169: LD_VAR 0 2
59173: ARRAY
59174: PUSH
59175: LD_INT 2
59177: ARRAY
59178: PUSH
59179: LD_INT 1
59181: ARRAY
59182: PPUSH
59183: CALL_OW 128
// end ;
59187: GO 58965
59189: POP
59190: POP
// end ;
59191: GO 58808
59193: POP
59194: POP
// end ;
59195: LD_VAR 0 1
59199: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
59200: LD_INT 0
59202: PPUSH
59203: PPUSH
59204: PPUSH
59205: PPUSH
59206: PPUSH
// if not mc_bases then
59207: LD_EXP 63
59211: NOT
59212: IFFALSE 59216
// exit ;
59214: GO 60359
// for i = 1 to mc_bases do
59216: LD_ADDR_VAR 0 2
59220: PUSH
59221: DOUBLE
59222: LD_INT 1
59224: DEC
59225: ST_TO_ADDR
59226: LD_EXP 63
59230: PUSH
59231: FOR_TO
59232: IFFALSE 60357
// begin if mc_scan [ i ] then
59234: LD_EXP 86
59238: PUSH
59239: LD_VAR 0 2
59243: ARRAY
59244: IFFALSE 59248
// continue ;
59246: GO 59231
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
59248: LD_EXP 68
59252: PUSH
59253: LD_VAR 0 2
59257: ARRAY
59258: NOT
59259: PUSH
59260: LD_EXP 70
59264: PUSH
59265: LD_VAR 0 2
59269: ARRAY
59270: NOT
59271: AND
59272: PUSH
59273: LD_EXP 69
59277: PUSH
59278: LD_VAR 0 2
59282: ARRAY
59283: AND
59284: IFFALSE 59322
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
59286: LD_ADDR_EXP 69
59290: PUSH
59291: LD_EXP 69
59295: PPUSH
59296: LD_VAR 0 2
59300: PPUSH
59301: EMPTY
59302: PPUSH
59303: CALL_OW 1
59307: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
59308: LD_VAR 0 2
59312: PPUSH
59313: LD_INT 103
59315: PPUSH
59316: CALL 53042 0 2
// continue ;
59320: GO 59231
// end ; if mc_construct_list [ i ] then
59322: LD_EXP 70
59326: PUSH
59327: LD_VAR 0 2
59331: ARRAY
59332: IFFALSE 59552
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
59334: LD_ADDR_VAR 0 4
59338: PUSH
59339: LD_EXP 63
59343: PUSH
59344: LD_VAR 0 2
59348: ARRAY
59349: PPUSH
59350: LD_INT 25
59352: PUSH
59353: LD_INT 2
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PPUSH
59360: CALL_OW 72
59364: PUSH
59365: LD_EXP 65
59369: PUSH
59370: LD_VAR 0 2
59374: ARRAY
59375: DIFF
59376: ST_TO_ADDR
// if not tmp then
59377: LD_VAR 0 4
59381: NOT
59382: IFFALSE 59386
// continue ;
59384: GO 59231
// for j in tmp do
59386: LD_ADDR_VAR 0 3
59390: PUSH
59391: LD_VAR 0 4
59395: PUSH
59396: FOR_IN
59397: IFFALSE 59548
// begin if not mc_builders [ i ] then
59399: LD_EXP 69
59403: PUSH
59404: LD_VAR 0 2
59408: ARRAY
59409: NOT
59410: IFFALSE 59468
// begin SetTag ( j , 103 ) ;
59412: LD_VAR 0 3
59416: PPUSH
59417: LD_INT 103
59419: PPUSH
59420: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
59424: LD_ADDR_EXP 69
59428: PUSH
59429: LD_EXP 69
59433: PPUSH
59434: LD_VAR 0 2
59438: PUSH
59439: LD_EXP 69
59443: PUSH
59444: LD_VAR 0 2
59448: ARRAY
59449: PUSH
59450: LD_INT 1
59452: PLUS
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PPUSH
59458: LD_VAR 0 3
59462: PPUSH
59463: CALL 17454 0 3
59467: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
59468: LD_VAR 0 3
59472: PPUSH
59473: CALL_OW 310
59477: IFFALSE 59488
// ComExitBuilding ( j ) ;
59479: LD_VAR 0 3
59483: PPUSH
59484: CALL_OW 122
// wait ( 3 ) ;
59488: LD_INT 3
59490: PPUSH
59491: CALL_OW 67
// if not mc_construct_list [ i ] then
59495: LD_EXP 70
59499: PUSH
59500: LD_VAR 0 2
59504: ARRAY
59505: NOT
59506: IFFALSE 59510
// break ;
59508: GO 59548
// if not HasTask ( j ) then
59510: LD_VAR 0 3
59514: PPUSH
59515: CALL_OW 314
59519: NOT
59520: IFFALSE 59546
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
59522: LD_VAR 0 3
59526: PPUSH
59527: LD_EXP 70
59531: PUSH
59532: LD_VAR 0 2
59536: ARRAY
59537: PUSH
59538: LD_INT 1
59540: ARRAY
59541: PPUSH
59542: CALL 20305 0 2
// end ;
59546: GO 59396
59548: POP
59549: POP
// end else
59550: GO 60355
// if mc_build_list [ i ] then
59552: LD_EXP 68
59556: PUSH
59557: LD_VAR 0 2
59561: ARRAY
59562: IFFALSE 60355
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
59564: LD_ADDR_VAR 0 5
59568: PUSH
59569: LD_EXP 63
59573: PUSH
59574: LD_VAR 0 2
59578: ARRAY
59579: PPUSH
59580: LD_INT 2
59582: PUSH
59583: LD_INT 30
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 30
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: LIST
59607: PPUSH
59608: CALL_OW 72
59612: ST_TO_ADDR
// if depot then
59613: LD_VAR 0 5
59617: IFFALSE 59635
// depot := depot [ 1 ] else
59619: LD_ADDR_VAR 0 5
59623: PUSH
59624: LD_VAR 0 5
59628: PUSH
59629: LD_INT 1
59631: ARRAY
59632: ST_TO_ADDR
59633: GO 59643
// depot := 0 ;
59635: LD_ADDR_VAR 0 5
59639: PUSH
59640: LD_INT 0
59642: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
59643: LD_EXP 68
59647: PUSH
59648: LD_VAR 0 2
59652: ARRAY
59653: PUSH
59654: LD_INT 1
59656: ARRAY
59657: PUSH
59658: LD_INT 1
59660: ARRAY
59661: PPUSH
59662: CALL 20135 0 1
59666: PUSH
59667: LD_EXP 63
59671: PUSH
59672: LD_VAR 0 2
59676: ARRAY
59677: PPUSH
59678: LD_INT 2
59680: PUSH
59681: LD_INT 30
59683: PUSH
59684: LD_INT 2
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 30
59693: PUSH
59694: LD_INT 3
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: LIST
59705: PPUSH
59706: CALL_OW 72
59710: NOT
59711: AND
59712: IFFALSE 59817
// begin for j = 1 to mc_build_list [ i ] do
59714: LD_ADDR_VAR 0 3
59718: PUSH
59719: DOUBLE
59720: LD_INT 1
59722: DEC
59723: ST_TO_ADDR
59724: LD_EXP 68
59728: PUSH
59729: LD_VAR 0 2
59733: ARRAY
59734: PUSH
59735: FOR_TO
59736: IFFALSE 59815
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
59738: LD_EXP 68
59742: PUSH
59743: LD_VAR 0 2
59747: ARRAY
59748: PUSH
59749: LD_VAR 0 3
59753: ARRAY
59754: PUSH
59755: LD_INT 1
59757: ARRAY
59758: PUSH
59759: LD_INT 2
59761: EQUAL
59762: IFFALSE 59813
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
59764: LD_ADDR_EXP 68
59768: PUSH
59769: LD_EXP 68
59773: PPUSH
59774: LD_VAR 0 2
59778: PPUSH
59779: LD_EXP 68
59783: PUSH
59784: LD_VAR 0 2
59788: ARRAY
59789: PPUSH
59790: LD_VAR 0 3
59794: PPUSH
59795: LD_INT 1
59797: PPUSH
59798: LD_INT 0
59800: PPUSH
59801: CALL 16872 0 4
59805: PPUSH
59806: CALL_OW 1
59810: ST_TO_ADDR
// break ;
59811: GO 59815
// end ;
59813: GO 59735
59815: POP
59816: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
59817: LD_EXP 68
59821: PUSH
59822: LD_VAR 0 2
59826: ARRAY
59827: PUSH
59828: LD_INT 1
59830: ARRAY
59831: PUSH
59832: LD_INT 1
59834: ARRAY
59835: PUSH
59836: LD_INT 0
59838: EQUAL
59839: PUSH
59840: LD_VAR 0 5
59844: PUSH
59845: LD_VAR 0 5
59849: PPUSH
59850: LD_EXP 68
59854: PUSH
59855: LD_VAR 0 2
59859: ARRAY
59860: PUSH
59861: LD_INT 1
59863: ARRAY
59864: PUSH
59865: LD_INT 1
59867: ARRAY
59868: PPUSH
59869: LD_EXP 68
59873: PUSH
59874: LD_VAR 0 2
59878: ARRAY
59879: PUSH
59880: LD_INT 1
59882: ARRAY
59883: PUSH
59884: LD_INT 2
59886: ARRAY
59887: PPUSH
59888: LD_EXP 68
59892: PUSH
59893: LD_VAR 0 2
59897: ARRAY
59898: PUSH
59899: LD_INT 1
59901: ARRAY
59902: PUSH
59903: LD_INT 3
59905: ARRAY
59906: PPUSH
59907: LD_EXP 68
59911: PUSH
59912: LD_VAR 0 2
59916: ARRAY
59917: PUSH
59918: LD_INT 1
59920: ARRAY
59921: PUSH
59922: LD_INT 4
59924: ARRAY
59925: PPUSH
59926: CALL 24869 0 5
59930: AND
59931: OR
59932: IFFALSE 60213
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
59934: LD_ADDR_VAR 0 4
59938: PUSH
59939: LD_EXP 63
59943: PUSH
59944: LD_VAR 0 2
59948: ARRAY
59949: PPUSH
59950: LD_INT 25
59952: PUSH
59953: LD_INT 2
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PPUSH
59960: CALL_OW 72
59964: PUSH
59965: LD_EXP 65
59969: PUSH
59970: LD_VAR 0 2
59974: ARRAY
59975: DIFF
59976: ST_TO_ADDR
// if not tmp then
59977: LD_VAR 0 4
59981: NOT
59982: IFFALSE 59986
// continue ;
59984: GO 59231
// for j in tmp do
59986: LD_ADDR_VAR 0 3
59990: PUSH
59991: LD_VAR 0 4
59995: PUSH
59996: FOR_IN
59997: IFFALSE 60209
// begin if not mc_builders [ i ] then
59999: LD_EXP 69
60003: PUSH
60004: LD_VAR 0 2
60008: ARRAY
60009: NOT
60010: IFFALSE 60068
// begin SetTag ( j , 103 ) ;
60012: LD_VAR 0 3
60016: PPUSH
60017: LD_INT 103
60019: PPUSH
60020: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
60024: LD_ADDR_EXP 69
60028: PUSH
60029: LD_EXP 69
60033: PPUSH
60034: LD_VAR 0 2
60038: PUSH
60039: LD_EXP 69
60043: PUSH
60044: LD_VAR 0 2
60048: ARRAY
60049: PUSH
60050: LD_INT 1
60052: PLUS
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PPUSH
60058: LD_VAR 0 3
60062: PPUSH
60063: CALL 17454 0 3
60067: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
60068: LD_VAR 0 3
60072: PPUSH
60073: CALL_OW 310
60077: IFFALSE 60088
// ComExitBuilding ( j ) ;
60079: LD_VAR 0 3
60083: PPUSH
60084: CALL_OW 122
// wait ( 3 ) ;
60088: LD_INT 3
60090: PPUSH
60091: CALL_OW 67
// if not mc_build_list [ i ] then
60095: LD_EXP 68
60099: PUSH
60100: LD_VAR 0 2
60104: ARRAY
60105: NOT
60106: IFFALSE 60110
// break ;
60108: GO 60209
// if not HasTask ( j ) then
60110: LD_VAR 0 3
60114: PPUSH
60115: CALL_OW 314
60119: NOT
60120: IFFALSE 60207
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
60122: LD_VAR 0 3
60126: PPUSH
60127: LD_EXP 68
60131: PUSH
60132: LD_VAR 0 2
60136: ARRAY
60137: PUSH
60138: LD_INT 1
60140: ARRAY
60141: PUSH
60142: LD_INT 1
60144: ARRAY
60145: PPUSH
60146: LD_EXP 68
60150: PUSH
60151: LD_VAR 0 2
60155: ARRAY
60156: PUSH
60157: LD_INT 1
60159: ARRAY
60160: PUSH
60161: LD_INT 2
60163: ARRAY
60164: PPUSH
60165: LD_EXP 68
60169: PUSH
60170: LD_VAR 0 2
60174: ARRAY
60175: PUSH
60176: LD_INT 1
60178: ARRAY
60179: PUSH
60180: LD_INT 3
60182: ARRAY
60183: PPUSH
60184: LD_EXP 68
60188: PUSH
60189: LD_VAR 0 2
60193: ARRAY
60194: PUSH
60195: LD_INT 1
60197: ARRAY
60198: PUSH
60199: LD_INT 4
60201: ARRAY
60202: PPUSH
60203: CALL_OW 145
// end ;
60207: GO 59996
60209: POP
60210: POP
// end else
60211: GO 60355
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
60213: LD_EXP 63
60217: PUSH
60218: LD_VAR 0 2
60222: ARRAY
60223: PPUSH
60224: LD_EXP 68
60228: PUSH
60229: LD_VAR 0 2
60233: ARRAY
60234: PUSH
60235: LD_INT 1
60237: ARRAY
60238: PUSH
60239: LD_INT 1
60241: ARRAY
60242: PPUSH
60243: LD_EXP 68
60247: PUSH
60248: LD_VAR 0 2
60252: ARRAY
60253: PUSH
60254: LD_INT 1
60256: ARRAY
60257: PUSH
60258: LD_INT 2
60260: ARRAY
60261: PPUSH
60262: LD_EXP 68
60266: PUSH
60267: LD_VAR 0 2
60271: ARRAY
60272: PUSH
60273: LD_INT 1
60275: ARRAY
60276: PUSH
60277: LD_INT 3
60279: ARRAY
60280: PPUSH
60281: LD_EXP 68
60285: PUSH
60286: LD_VAR 0 2
60290: ARRAY
60291: PUSH
60292: LD_INT 1
60294: ARRAY
60295: PUSH
60296: LD_INT 4
60298: ARRAY
60299: PPUSH
60300: CALL 24205 0 5
60304: NOT
60305: IFFALSE 60355
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
60307: LD_ADDR_EXP 68
60311: PUSH
60312: LD_EXP 68
60316: PPUSH
60317: LD_VAR 0 2
60321: PPUSH
60322: LD_EXP 68
60326: PUSH
60327: LD_VAR 0 2
60331: ARRAY
60332: PPUSH
60333: LD_INT 1
60335: PPUSH
60336: LD_INT 1
60338: NEG
60339: PPUSH
60340: LD_INT 0
60342: PPUSH
60343: CALL 16872 0 4
60347: PPUSH
60348: CALL_OW 1
60352: ST_TO_ADDR
// continue ;
60353: GO 59231
// end ; end ; end ;
60355: GO 59231
60357: POP
60358: POP
// end ;
60359: LD_VAR 0 1
60363: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
60364: LD_INT 0
60366: PPUSH
60367: PPUSH
60368: PPUSH
60369: PPUSH
60370: PPUSH
60371: PPUSH
// if not mc_bases then
60372: LD_EXP 63
60376: NOT
60377: IFFALSE 60381
// exit ;
60379: GO 60808
// for i = 1 to mc_bases do
60381: LD_ADDR_VAR 0 2
60385: PUSH
60386: DOUBLE
60387: LD_INT 1
60389: DEC
60390: ST_TO_ADDR
60391: LD_EXP 63
60395: PUSH
60396: FOR_TO
60397: IFFALSE 60806
// begin tmp := mc_build_upgrade [ i ] ;
60399: LD_ADDR_VAR 0 4
60403: PUSH
60404: LD_EXP 95
60408: PUSH
60409: LD_VAR 0 2
60413: ARRAY
60414: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
60415: LD_ADDR_VAR 0 6
60419: PUSH
60420: LD_EXP 96
60424: PUSH
60425: LD_VAR 0 2
60429: ARRAY
60430: PPUSH
60431: LD_INT 2
60433: PUSH
60434: LD_INT 30
60436: PUSH
60437: LD_INT 6
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 30
60446: PUSH
60447: LD_INT 7
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: LIST
60458: PPUSH
60459: CALL_OW 72
60463: ST_TO_ADDR
// if not tmp and not lab then
60464: LD_VAR 0 4
60468: NOT
60469: PUSH
60470: LD_VAR 0 6
60474: NOT
60475: AND
60476: IFFALSE 60480
// continue ;
60478: GO 60396
// if tmp then
60480: LD_VAR 0 4
60484: IFFALSE 60604
// for j in tmp do
60486: LD_ADDR_VAR 0 3
60490: PUSH
60491: LD_VAR 0 4
60495: PUSH
60496: FOR_IN
60497: IFFALSE 60602
// begin if UpgradeCost ( j ) then
60499: LD_VAR 0 3
60503: PPUSH
60504: CALL 23865 0 1
60508: IFFALSE 60600
// begin ComUpgrade ( j ) ;
60510: LD_VAR 0 3
60514: PPUSH
60515: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
60519: LD_ADDR_EXP 95
60523: PUSH
60524: LD_EXP 95
60528: PPUSH
60529: LD_VAR 0 2
60533: PPUSH
60534: LD_EXP 95
60538: PUSH
60539: LD_VAR 0 2
60543: ARRAY
60544: PUSH
60545: LD_VAR 0 3
60549: DIFF
60550: PPUSH
60551: CALL_OW 1
60555: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
60556: LD_ADDR_EXP 70
60560: PUSH
60561: LD_EXP 70
60565: PPUSH
60566: LD_VAR 0 2
60570: PUSH
60571: LD_EXP 70
60575: PUSH
60576: LD_VAR 0 2
60580: ARRAY
60581: PUSH
60582: LD_INT 1
60584: PLUS
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PPUSH
60590: LD_VAR 0 3
60594: PPUSH
60595: CALL 17454 0 3
60599: ST_TO_ADDR
// end ; end ;
60600: GO 60496
60602: POP
60603: POP
// if not lab or not mc_lab_upgrade [ i ] then
60604: LD_VAR 0 6
60608: NOT
60609: PUSH
60610: LD_EXP 97
60614: PUSH
60615: LD_VAR 0 2
60619: ARRAY
60620: NOT
60621: OR
60622: IFFALSE 60626
// continue ;
60624: GO 60396
// for j in lab do
60626: LD_ADDR_VAR 0 3
60630: PUSH
60631: LD_VAR 0 6
60635: PUSH
60636: FOR_IN
60637: IFFALSE 60802
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
60639: LD_VAR 0 3
60643: PPUSH
60644: CALL_OW 266
60648: PUSH
60649: LD_INT 6
60651: PUSH
60652: LD_INT 7
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: IN
60659: PUSH
60660: LD_VAR 0 3
60664: PPUSH
60665: CALL_OW 461
60669: PUSH
60670: LD_INT 1
60672: NONEQUAL
60673: AND
60674: IFFALSE 60800
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
60676: LD_VAR 0 3
60680: PPUSH
60681: LD_EXP 97
60685: PUSH
60686: LD_VAR 0 2
60690: ARRAY
60691: PUSH
60692: LD_INT 1
60694: ARRAY
60695: PPUSH
60696: CALL 24070 0 2
60700: IFFALSE 60800
// begin ComCancel ( j ) ;
60702: LD_VAR 0 3
60706: PPUSH
60707: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
60711: LD_VAR 0 3
60715: PPUSH
60716: LD_EXP 97
60720: PUSH
60721: LD_VAR 0 2
60725: ARRAY
60726: PUSH
60727: LD_INT 1
60729: ARRAY
60730: PPUSH
60731: CALL_OW 207
// if not j in mc_construct_list [ i ] then
60735: LD_VAR 0 3
60739: PUSH
60740: LD_EXP 70
60744: PUSH
60745: LD_VAR 0 2
60749: ARRAY
60750: IN
60751: NOT
60752: IFFALSE 60798
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
60754: LD_ADDR_EXP 70
60758: PUSH
60759: LD_EXP 70
60763: PPUSH
60764: LD_VAR 0 2
60768: PUSH
60769: LD_EXP 70
60773: PUSH
60774: LD_VAR 0 2
60778: ARRAY
60779: PUSH
60780: LD_INT 1
60782: PLUS
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PPUSH
60788: LD_VAR 0 3
60792: PPUSH
60793: CALL 17454 0 3
60797: ST_TO_ADDR
// break ;
60798: GO 60802
// end ; end ; end ;
60800: GO 60636
60802: POP
60803: POP
// end ;
60804: GO 60396
60806: POP
60807: POP
// end ;
60808: LD_VAR 0 1
60812: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
60813: LD_INT 0
60815: PPUSH
60816: PPUSH
60817: PPUSH
60818: PPUSH
60819: PPUSH
60820: PPUSH
60821: PPUSH
60822: PPUSH
60823: PPUSH
// if not mc_bases then
60824: LD_EXP 63
60828: NOT
60829: IFFALSE 60833
// exit ;
60831: GO 61238
// for i = 1 to mc_bases do
60833: LD_ADDR_VAR 0 2
60837: PUSH
60838: DOUBLE
60839: LD_INT 1
60841: DEC
60842: ST_TO_ADDR
60843: LD_EXP 63
60847: PUSH
60848: FOR_TO
60849: IFFALSE 61236
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
60851: LD_EXP 71
60855: PUSH
60856: LD_VAR 0 2
60860: ARRAY
60861: NOT
60862: PUSH
60863: LD_EXP 63
60867: PUSH
60868: LD_VAR 0 2
60872: ARRAY
60873: PPUSH
60874: LD_INT 30
60876: PUSH
60877: LD_INT 3
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PPUSH
60884: CALL_OW 72
60888: NOT
60889: OR
60890: IFFALSE 60894
// continue ;
60892: GO 60848
// busy := false ;
60894: LD_ADDR_VAR 0 8
60898: PUSH
60899: LD_INT 0
60901: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
60902: LD_ADDR_VAR 0 4
60906: PUSH
60907: LD_EXP 63
60911: PUSH
60912: LD_VAR 0 2
60916: ARRAY
60917: PPUSH
60918: LD_INT 30
60920: PUSH
60921: LD_INT 3
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PPUSH
60928: CALL_OW 72
60932: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
60933: LD_ADDR_VAR 0 6
60937: PUSH
60938: LD_EXP 71
60942: PUSH
60943: LD_VAR 0 2
60947: ARRAY
60948: PPUSH
60949: LD_INT 2
60951: PUSH
60952: LD_INT 30
60954: PUSH
60955: LD_INT 32
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 30
60964: PUSH
60965: LD_INT 33
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: LIST
60976: PPUSH
60977: CALL_OW 72
60981: ST_TO_ADDR
// if not t then
60982: LD_VAR 0 6
60986: NOT
60987: IFFALSE 60991
// continue ;
60989: GO 60848
// for j in tmp do
60991: LD_ADDR_VAR 0 3
60995: PUSH
60996: LD_VAR 0 4
61000: PUSH
61001: FOR_IN
61002: IFFALSE 61032
// if not BuildingStatus ( j ) = bs_idle then
61004: LD_VAR 0 3
61008: PPUSH
61009: CALL_OW 461
61013: PUSH
61014: LD_INT 2
61016: EQUAL
61017: NOT
61018: IFFALSE 61030
// begin busy := true ;
61020: LD_ADDR_VAR 0 8
61024: PUSH
61025: LD_INT 1
61027: ST_TO_ADDR
// break ;
61028: GO 61032
// end ;
61030: GO 61001
61032: POP
61033: POP
// if busy then
61034: LD_VAR 0 8
61038: IFFALSE 61042
// continue ;
61040: GO 60848
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
61042: LD_ADDR_VAR 0 7
61046: PUSH
61047: LD_VAR 0 6
61051: PPUSH
61052: LD_INT 35
61054: PUSH
61055: LD_INT 0
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PPUSH
61062: CALL_OW 72
61066: ST_TO_ADDR
// if tw then
61067: LD_VAR 0 7
61071: IFFALSE 61148
// begin tw := tw [ 1 ] ;
61073: LD_ADDR_VAR 0 7
61077: PUSH
61078: LD_VAR 0 7
61082: PUSH
61083: LD_INT 1
61085: ARRAY
61086: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
61087: LD_ADDR_VAR 0 9
61091: PUSH
61092: LD_VAR 0 7
61096: PPUSH
61097: LD_EXP 88
61101: PUSH
61102: LD_VAR 0 2
61106: ARRAY
61107: PPUSH
61108: CALL 22424 0 2
61112: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
61113: LD_EXP 102
61117: PUSH
61118: LD_VAR 0 2
61122: ARRAY
61123: IFFALSE 61146
// if not weapon in mc_allowed_tower_weapons [ i ] then
61125: LD_VAR 0 9
61129: PUSH
61130: LD_EXP 102
61134: PUSH
61135: LD_VAR 0 2
61139: ARRAY
61140: IN
61141: NOT
61142: IFFALSE 61146
// continue ;
61144: GO 60848
// end else
61146: GO 61211
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
61148: LD_ADDR_VAR 0 5
61152: PUSH
61153: LD_EXP 71
61157: PUSH
61158: LD_VAR 0 2
61162: ARRAY
61163: PPUSH
61164: LD_VAR 0 4
61168: PPUSH
61169: CALL 47926 0 2
61173: ST_TO_ADDR
// if not tmp2 then
61174: LD_VAR 0 5
61178: NOT
61179: IFFALSE 61183
// continue ;
61181: GO 60848
// tw := tmp2 [ 1 ] ;
61183: LD_ADDR_VAR 0 7
61187: PUSH
61188: LD_VAR 0 5
61192: PUSH
61193: LD_INT 1
61195: ARRAY
61196: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
61197: LD_ADDR_VAR 0 9
61201: PUSH
61202: LD_VAR 0 5
61206: PUSH
61207: LD_INT 2
61209: ARRAY
61210: ST_TO_ADDR
// end ; if not weapon then
61211: LD_VAR 0 9
61215: NOT
61216: IFFALSE 61220
// continue ;
61218: GO 60848
// ComPlaceWeapon ( tw , weapon ) ;
61220: LD_VAR 0 7
61224: PPUSH
61225: LD_VAR 0 9
61229: PPUSH
61230: CALL_OW 148
// end ;
61234: GO 60848
61236: POP
61237: POP
// end ;
61238: LD_VAR 0 1
61242: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
61243: LD_INT 0
61245: PPUSH
61246: PPUSH
61247: PPUSH
61248: PPUSH
61249: PPUSH
61250: PPUSH
// if not mc_bases then
61251: LD_EXP 63
61255: NOT
61256: IFFALSE 61260
// exit ;
61258: GO 62036
// for i = 1 to mc_bases do
61260: LD_ADDR_VAR 0 2
61264: PUSH
61265: DOUBLE
61266: LD_INT 1
61268: DEC
61269: ST_TO_ADDR
61270: LD_EXP 63
61274: PUSH
61275: FOR_TO
61276: IFFALSE 62034
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
61278: LD_EXP 76
61282: PUSH
61283: LD_VAR 0 2
61287: ARRAY
61288: NOT
61289: PUSH
61290: LD_EXP 76
61294: PUSH
61295: LD_VAR 0 2
61299: ARRAY
61300: PUSH
61301: LD_EXP 77
61305: PUSH
61306: LD_VAR 0 2
61310: ARRAY
61311: EQUAL
61312: OR
61313: PUSH
61314: LD_EXP 86
61318: PUSH
61319: LD_VAR 0 2
61323: ARRAY
61324: OR
61325: IFFALSE 61329
// continue ;
61327: GO 61275
// if mc_miners [ i ] then
61329: LD_EXP 77
61333: PUSH
61334: LD_VAR 0 2
61338: ARRAY
61339: IFFALSE 61721
// begin for j = mc_miners [ i ] downto 1 do
61341: LD_ADDR_VAR 0 3
61345: PUSH
61346: DOUBLE
61347: LD_EXP 77
61351: PUSH
61352: LD_VAR 0 2
61356: ARRAY
61357: INC
61358: ST_TO_ADDR
61359: LD_INT 1
61361: PUSH
61362: FOR_DOWNTO
61363: IFFALSE 61719
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
61365: LD_EXP 77
61369: PUSH
61370: LD_VAR 0 2
61374: ARRAY
61375: PUSH
61376: LD_VAR 0 3
61380: ARRAY
61381: PPUSH
61382: CALL_OW 301
61386: PUSH
61387: LD_EXP 77
61391: PUSH
61392: LD_VAR 0 2
61396: ARRAY
61397: PUSH
61398: LD_VAR 0 3
61402: ARRAY
61403: PPUSH
61404: CALL_OW 257
61408: PUSH
61409: LD_INT 1
61411: NONEQUAL
61412: OR
61413: IFFALSE 61476
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
61415: LD_ADDR_VAR 0 5
61419: PUSH
61420: LD_EXP 77
61424: PUSH
61425: LD_VAR 0 2
61429: ARRAY
61430: PUSH
61431: LD_EXP 77
61435: PUSH
61436: LD_VAR 0 2
61440: ARRAY
61441: PUSH
61442: LD_VAR 0 3
61446: ARRAY
61447: DIFF
61448: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
61449: LD_ADDR_EXP 77
61453: PUSH
61454: LD_EXP 77
61458: PPUSH
61459: LD_VAR 0 2
61463: PPUSH
61464: LD_VAR 0 5
61468: PPUSH
61469: CALL_OW 1
61473: ST_TO_ADDR
// continue ;
61474: GO 61362
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
61476: LD_EXP 77
61480: PUSH
61481: LD_VAR 0 2
61485: ARRAY
61486: PUSH
61487: LD_VAR 0 3
61491: ARRAY
61492: PPUSH
61493: CALL_OW 257
61497: PUSH
61498: LD_INT 1
61500: EQUAL
61501: PUSH
61502: LD_EXP 77
61506: PUSH
61507: LD_VAR 0 2
61511: ARRAY
61512: PUSH
61513: LD_VAR 0 3
61517: ARRAY
61518: PPUSH
61519: CALL_OW 459
61523: NOT
61524: AND
61525: PUSH
61526: LD_EXP 77
61530: PUSH
61531: LD_VAR 0 2
61535: ARRAY
61536: PUSH
61537: LD_VAR 0 3
61541: ARRAY
61542: PPUSH
61543: CALL_OW 314
61547: NOT
61548: AND
61549: IFFALSE 61717
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
61551: LD_EXP 77
61555: PUSH
61556: LD_VAR 0 2
61560: ARRAY
61561: PUSH
61562: LD_VAR 0 3
61566: ARRAY
61567: PPUSH
61568: CALL_OW 310
61572: IFFALSE 61595
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
61574: LD_EXP 77
61578: PUSH
61579: LD_VAR 0 2
61583: ARRAY
61584: PUSH
61585: LD_VAR 0 3
61589: ARRAY
61590: PPUSH
61591: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
61595: LD_EXP 77
61599: PUSH
61600: LD_VAR 0 2
61604: ARRAY
61605: PUSH
61606: LD_VAR 0 3
61610: ARRAY
61611: PPUSH
61612: CALL_OW 314
61616: NOT
61617: IFFALSE 61717
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
61619: LD_EXP 77
61623: PUSH
61624: LD_VAR 0 2
61628: ARRAY
61629: PUSH
61630: LD_VAR 0 3
61634: ARRAY
61635: PPUSH
61636: LD_EXP 76
61640: PUSH
61641: LD_VAR 0 2
61645: ARRAY
61646: PUSH
61647: LD_VAR 0 3
61651: PUSH
61652: LD_EXP 76
61656: PUSH
61657: LD_VAR 0 2
61661: ARRAY
61662: MOD
61663: PUSH
61664: LD_INT 1
61666: PLUS
61667: ARRAY
61668: PUSH
61669: LD_INT 1
61671: ARRAY
61672: PPUSH
61673: LD_EXP 76
61677: PUSH
61678: LD_VAR 0 2
61682: ARRAY
61683: PUSH
61684: LD_VAR 0 3
61688: PUSH
61689: LD_EXP 76
61693: PUSH
61694: LD_VAR 0 2
61698: ARRAY
61699: MOD
61700: PUSH
61701: LD_INT 1
61703: PLUS
61704: ARRAY
61705: PUSH
61706: LD_INT 2
61708: ARRAY
61709: PPUSH
61710: LD_INT 0
61712: PPUSH
61713: CALL_OW 193
// end ; end ;
61717: GO 61362
61719: POP
61720: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
61721: LD_ADDR_VAR 0 5
61725: PUSH
61726: LD_EXP 63
61730: PUSH
61731: LD_VAR 0 2
61735: ARRAY
61736: PPUSH
61737: LD_INT 2
61739: PUSH
61740: LD_INT 30
61742: PUSH
61743: LD_INT 4
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 30
61752: PUSH
61753: LD_INT 5
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 30
61762: PUSH
61763: LD_INT 32
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: PPUSH
61776: CALL_OW 72
61780: ST_TO_ADDR
// if not tmp then
61781: LD_VAR 0 5
61785: NOT
61786: IFFALSE 61790
// continue ;
61788: GO 61275
// list := [ ] ;
61790: LD_ADDR_VAR 0 6
61794: PUSH
61795: EMPTY
61796: ST_TO_ADDR
// for j in tmp do
61797: LD_ADDR_VAR 0 3
61801: PUSH
61802: LD_VAR 0 5
61806: PUSH
61807: FOR_IN
61808: IFFALSE 61877
// begin for k in UnitsInside ( j ) do
61810: LD_ADDR_VAR 0 4
61814: PUSH
61815: LD_VAR 0 3
61819: PPUSH
61820: CALL_OW 313
61824: PUSH
61825: FOR_IN
61826: IFFALSE 61873
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
61828: LD_VAR 0 4
61832: PPUSH
61833: CALL_OW 257
61837: PUSH
61838: LD_INT 1
61840: EQUAL
61841: PUSH
61842: LD_VAR 0 4
61846: PPUSH
61847: CALL_OW 459
61851: NOT
61852: AND
61853: IFFALSE 61871
// list := list ^ k ;
61855: LD_ADDR_VAR 0 6
61859: PUSH
61860: LD_VAR 0 6
61864: PUSH
61865: LD_VAR 0 4
61869: ADD
61870: ST_TO_ADDR
61871: GO 61825
61873: POP
61874: POP
// end ;
61875: GO 61807
61877: POP
61878: POP
// list := list diff mc_miners [ i ] ;
61879: LD_ADDR_VAR 0 6
61883: PUSH
61884: LD_VAR 0 6
61888: PUSH
61889: LD_EXP 77
61893: PUSH
61894: LD_VAR 0 2
61898: ARRAY
61899: DIFF
61900: ST_TO_ADDR
// if not list then
61901: LD_VAR 0 6
61905: NOT
61906: IFFALSE 61910
// continue ;
61908: GO 61275
// k := mc_mines [ i ] - mc_miners [ i ] ;
61910: LD_ADDR_VAR 0 4
61914: PUSH
61915: LD_EXP 76
61919: PUSH
61920: LD_VAR 0 2
61924: ARRAY
61925: PUSH
61926: LD_EXP 77
61930: PUSH
61931: LD_VAR 0 2
61935: ARRAY
61936: MINUS
61937: ST_TO_ADDR
// if k > list then
61938: LD_VAR 0 4
61942: PUSH
61943: LD_VAR 0 6
61947: GREATER
61948: IFFALSE 61960
// k := list ;
61950: LD_ADDR_VAR 0 4
61954: PUSH
61955: LD_VAR 0 6
61959: ST_TO_ADDR
// for j = 1 to k do
61960: LD_ADDR_VAR 0 3
61964: PUSH
61965: DOUBLE
61966: LD_INT 1
61968: DEC
61969: ST_TO_ADDR
61970: LD_VAR 0 4
61974: PUSH
61975: FOR_TO
61976: IFFALSE 62030
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
61978: LD_ADDR_EXP 77
61982: PUSH
61983: LD_EXP 77
61987: PPUSH
61988: LD_VAR 0 2
61992: PUSH
61993: LD_EXP 77
61997: PUSH
61998: LD_VAR 0 2
62002: ARRAY
62003: PUSH
62004: LD_INT 1
62006: PLUS
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PPUSH
62012: LD_VAR 0 6
62016: PUSH
62017: LD_VAR 0 3
62021: ARRAY
62022: PPUSH
62023: CALL 17454 0 3
62027: ST_TO_ADDR
62028: GO 61975
62030: POP
62031: POP
// end ;
62032: GO 61275
62034: POP
62035: POP
// end ;
62036: LD_VAR 0 1
62040: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
62041: LD_INT 0
62043: PPUSH
62044: PPUSH
62045: PPUSH
62046: PPUSH
62047: PPUSH
62048: PPUSH
62049: PPUSH
62050: PPUSH
62051: PPUSH
62052: PPUSH
// if not mc_bases then
62053: LD_EXP 63
62057: NOT
62058: IFFALSE 62062
// exit ;
62060: GO 63812
// for i = 1 to mc_bases do
62062: LD_ADDR_VAR 0 2
62066: PUSH
62067: DOUBLE
62068: LD_INT 1
62070: DEC
62071: ST_TO_ADDR
62072: LD_EXP 63
62076: PUSH
62077: FOR_TO
62078: IFFALSE 63810
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
62080: LD_EXP 63
62084: PUSH
62085: LD_VAR 0 2
62089: ARRAY
62090: NOT
62091: PUSH
62092: LD_EXP 70
62096: PUSH
62097: LD_VAR 0 2
62101: ARRAY
62102: OR
62103: IFFALSE 62107
// continue ;
62105: GO 62077
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
62107: LD_EXP 79
62111: PUSH
62112: LD_VAR 0 2
62116: ARRAY
62117: NOT
62118: PUSH
62119: LD_EXP 80
62123: PUSH
62124: LD_VAR 0 2
62128: ARRAY
62129: AND
62130: IFFALSE 62168
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
62132: LD_ADDR_EXP 80
62136: PUSH
62137: LD_EXP 80
62141: PPUSH
62142: LD_VAR 0 2
62146: PPUSH
62147: EMPTY
62148: PPUSH
62149: CALL_OW 1
62153: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
62154: LD_VAR 0 2
62158: PPUSH
62159: LD_INT 107
62161: PPUSH
62162: CALL 53042 0 2
// continue ;
62166: GO 62077
// end ; target := [ ] ;
62168: LD_ADDR_VAR 0 6
62172: PUSH
62173: EMPTY
62174: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
62175: LD_ADDR_VAR 0 3
62179: PUSH
62180: DOUBLE
62181: LD_EXP 79
62185: PUSH
62186: LD_VAR 0 2
62190: ARRAY
62191: INC
62192: ST_TO_ADDR
62193: LD_INT 1
62195: PUSH
62196: FOR_DOWNTO
62197: IFFALSE 62457
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
62199: LD_EXP 79
62203: PUSH
62204: LD_VAR 0 2
62208: ARRAY
62209: PUSH
62210: LD_VAR 0 3
62214: ARRAY
62215: PUSH
62216: LD_INT 2
62218: ARRAY
62219: PPUSH
62220: LD_EXP 79
62224: PUSH
62225: LD_VAR 0 2
62229: ARRAY
62230: PUSH
62231: LD_VAR 0 3
62235: ARRAY
62236: PUSH
62237: LD_INT 3
62239: ARRAY
62240: PPUSH
62241: CALL_OW 488
62245: PUSH
62246: LD_EXP 79
62250: PUSH
62251: LD_VAR 0 2
62255: ARRAY
62256: PUSH
62257: LD_VAR 0 3
62261: ARRAY
62262: PUSH
62263: LD_INT 2
62265: ARRAY
62266: PPUSH
62267: LD_EXP 79
62271: PUSH
62272: LD_VAR 0 2
62276: ARRAY
62277: PUSH
62278: LD_VAR 0 3
62282: ARRAY
62283: PUSH
62284: LD_INT 3
62286: ARRAY
62287: PPUSH
62288: CALL_OW 284
62292: PUSH
62293: LD_INT 0
62295: EQUAL
62296: AND
62297: IFFALSE 62352
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
62299: LD_ADDR_VAR 0 5
62303: PUSH
62304: LD_EXP 79
62308: PUSH
62309: LD_VAR 0 2
62313: ARRAY
62314: PPUSH
62315: LD_VAR 0 3
62319: PPUSH
62320: CALL_OW 3
62324: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
62325: LD_ADDR_EXP 79
62329: PUSH
62330: LD_EXP 79
62334: PPUSH
62335: LD_VAR 0 2
62339: PPUSH
62340: LD_VAR 0 5
62344: PPUSH
62345: CALL_OW 1
62349: ST_TO_ADDR
// continue ;
62350: GO 62196
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
62352: LD_EXP 63
62356: PUSH
62357: LD_VAR 0 2
62361: ARRAY
62362: PUSH
62363: LD_INT 1
62365: ARRAY
62366: PPUSH
62367: CALL_OW 255
62371: PPUSH
62372: LD_EXP 79
62376: PUSH
62377: LD_VAR 0 2
62381: ARRAY
62382: PUSH
62383: LD_VAR 0 3
62387: ARRAY
62388: PUSH
62389: LD_INT 2
62391: ARRAY
62392: PPUSH
62393: LD_EXP 79
62397: PUSH
62398: LD_VAR 0 2
62402: ARRAY
62403: PUSH
62404: LD_VAR 0 3
62408: ARRAY
62409: PUSH
62410: LD_INT 3
62412: ARRAY
62413: PPUSH
62414: LD_INT 30
62416: PPUSH
62417: CALL 18350 0 4
62421: PUSH
62422: LD_INT 4
62424: ARRAY
62425: PUSH
62426: LD_INT 0
62428: EQUAL
62429: IFFALSE 62455
// begin target := mc_crates [ i ] [ j ] ;
62431: LD_ADDR_VAR 0 6
62435: PUSH
62436: LD_EXP 79
62440: PUSH
62441: LD_VAR 0 2
62445: ARRAY
62446: PUSH
62447: LD_VAR 0 3
62451: ARRAY
62452: ST_TO_ADDR
// break ;
62453: GO 62457
// end ; end ;
62455: GO 62196
62457: POP
62458: POP
// if not target then
62459: LD_VAR 0 6
62463: NOT
62464: IFFALSE 62468
// continue ;
62466: GO 62077
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
62468: LD_ADDR_VAR 0 7
62472: PUSH
62473: LD_EXP 82
62477: PUSH
62478: LD_VAR 0 2
62482: ARRAY
62483: PPUSH
62484: LD_INT 2
62486: PUSH
62487: LD_INT 3
62489: PUSH
62490: LD_INT 58
62492: PUSH
62493: EMPTY
62494: LIST
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 61
62502: PUSH
62503: EMPTY
62504: LIST
62505: PUSH
62506: LD_INT 33
62508: PUSH
62509: LD_INT 5
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 33
62518: PUSH
62519: LD_INT 3
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 2
62535: PUSH
62536: LD_INT 34
62538: PUSH
62539: LD_INT 32
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 34
62548: PUSH
62549: LD_INT 51
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 34
62558: PUSH
62559: LD_INT 12
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PPUSH
62576: CALL_OW 72
62580: ST_TO_ADDR
// if not cargo then
62581: LD_VAR 0 7
62585: NOT
62586: IFFALSE 63229
// begin if mc_crates_collector [ i ] < 5 then
62588: LD_EXP 80
62592: PUSH
62593: LD_VAR 0 2
62597: ARRAY
62598: PUSH
62599: LD_INT 5
62601: LESS
62602: IFFALSE 62968
// begin if mc_ape [ i ] then
62604: LD_EXP 92
62608: PUSH
62609: LD_VAR 0 2
62613: ARRAY
62614: IFFALSE 62661
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
62616: LD_ADDR_VAR 0 5
62620: PUSH
62621: LD_EXP 92
62625: PUSH
62626: LD_VAR 0 2
62630: ARRAY
62631: PPUSH
62632: LD_INT 25
62634: PUSH
62635: LD_INT 16
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 24
62644: PUSH
62645: LD_INT 750
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PPUSH
62656: CALL_OW 72
62660: ST_TO_ADDR
// if not tmp then
62661: LD_VAR 0 5
62665: NOT
62666: IFFALSE 62713
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
62668: LD_ADDR_VAR 0 5
62672: PUSH
62673: LD_EXP 63
62677: PUSH
62678: LD_VAR 0 2
62682: ARRAY
62683: PPUSH
62684: LD_INT 25
62686: PUSH
62687: LD_INT 2
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 24
62696: PUSH
62697: LD_INT 750
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PPUSH
62708: CALL_OW 72
62712: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
62713: LD_EXP 92
62717: PUSH
62718: LD_VAR 0 2
62722: ARRAY
62723: PUSH
62724: LD_EXP 63
62728: PUSH
62729: LD_VAR 0 2
62733: ARRAY
62734: PPUSH
62735: LD_INT 25
62737: PUSH
62738: LD_INT 2
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 24
62747: PUSH
62748: LD_INT 750
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PPUSH
62759: CALL_OW 72
62763: AND
62764: PUSH
62765: LD_VAR 0 5
62769: PUSH
62770: LD_INT 5
62772: LESS
62773: AND
62774: IFFALSE 62856
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
62776: LD_ADDR_VAR 0 3
62780: PUSH
62781: LD_EXP 63
62785: PUSH
62786: LD_VAR 0 2
62790: ARRAY
62791: PPUSH
62792: LD_INT 25
62794: PUSH
62795: LD_INT 2
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 24
62804: PUSH
62805: LD_INT 750
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PPUSH
62816: CALL_OW 72
62820: PUSH
62821: FOR_IN
62822: IFFALSE 62854
// begin tmp := tmp union j ;
62824: LD_ADDR_VAR 0 5
62828: PUSH
62829: LD_VAR 0 5
62833: PUSH
62834: LD_VAR 0 3
62838: UNION
62839: ST_TO_ADDR
// if tmp >= 5 then
62840: LD_VAR 0 5
62844: PUSH
62845: LD_INT 5
62847: GREATEREQUAL
62848: IFFALSE 62852
// break ;
62850: GO 62854
// end ;
62852: GO 62821
62854: POP
62855: POP
// end ; if not tmp then
62856: LD_VAR 0 5
62860: NOT
62861: IFFALSE 62865
// continue ;
62863: GO 62077
// for j in tmp do
62865: LD_ADDR_VAR 0 3
62869: PUSH
62870: LD_VAR 0 5
62874: PUSH
62875: FOR_IN
62876: IFFALSE 62966
// if not GetTag ( j ) then
62878: LD_VAR 0 3
62882: PPUSH
62883: CALL_OW 110
62887: NOT
62888: IFFALSE 62964
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
62890: LD_ADDR_EXP 80
62894: PUSH
62895: LD_EXP 80
62899: PPUSH
62900: LD_VAR 0 2
62904: PUSH
62905: LD_EXP 80
62909: PUSH
62910: LD_VAR 0 2
62914: ARRAY
62915: PUSH
62916: LD_INT 1
62918: PLUS
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PPUSH
62924: LD_VAR 0 3
62928: PPUSH
62929: CALL 17454 0 3
62933: ST_TO_ADDR
// SetTag ( j , 107 ) ;
62934: LD_VAR 0 3
62938: PPUSH
62939: LD_INT 107
62941: PPUSH
62942: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
62946: LD_EXP 80
62950: PUSH
62951: LD_VAR 0 2
62955: ARRAY
62956: PUSH
62957: LD_INT 5
62959: GREATEREQUAL
62960: IFFALSE 62964
// break ;
62962: GO 62966
// end ;
62964: GO 62875
62966: POP
62967: POP
// end ; if mc_crates_collector [ i ] and target then
62968: LD_EXP 80
62972: PUSH
62973: LD_VAR 0 2
62977: ARRAY
62978: PUSH
62979: LD_VAR 0 6
62983: AND
62984: IFFALSE 63227
// begin if mc_crates_collector [ i ] < target [ 1 ] then
62986: LD_EXP 80
62990: PUSH
62991: LD_VAR 0 2
62995: ARRAY
62996: PUSH
62997: LD_VAR 0 6
63001: PUSH
63002: LD_INT 1
63004: ARRAY
63005: LESS
63006: IFFALSE 63026
// tmp := mc_crates_collector [ i ] else
63008: LD_ADDR_VAR 0 5
63012: PUSH
63013: LD_EXP 80
63017: PUSH
63018: LD_VAR 0 2
63022: ARRAY
63023: ST_TO_ADDR
63024: GO 63040
// tmp := target [ 1 ] ;
63026: LD_ADDR_VAR 0 5
63030: PUSH
63031: LD_VAR 0 6
63035: PUSH
63036: LD_INT 1
63038: ARRAY
63039: ST_TO_ADDR
// k := 0 ;
63040: LD_ADDR_VAR 0 4
63044: PUSH
63045: LD_INT 0
63047: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
63048: LD_ADDR_VAR 0 3
63052: PUSH
63053: LD_EXP 80
63057: PUSH
63058: LD_VAR 0 2
63062: ARRAY
63063: PUSH
63064: FOR_IN
63065: IFFALSE 63225
// begin k := k + 1 ;
63067: LD_ADDR_VAR 0 4
63071: PUSH
63072: LD_VAR 0 4
63076: PUSH
63077: LD_INT 1
63079: PLUS
63080: ST_TO_ADDR
// if k > tmp then
63081: LD_VAR 0 4
63085: PUSH
63086: LD_VAR 0 5
63090: GREATER
63091: IFFALSE 63095
// break ;
63093: GO 63225
// if not GetClass ( j ) in [ 2 , 16 ] then
63095: LD_VAR 0 3
63099: PPUSH
63100: CALL_OW 257
63104: PUSH
63105: LD_INT 2
63107: PUSH
63108: LD_INT 16
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: IN
63115: NOT
63116: IFFALSE 63169
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
63118: LD_ADDR_EXP 80
63122: PUSH
63123: LD_EXP 80
63127: PPUSH
63128: LD_VAR 0 2
63132: PPUSH
63133: LD_EXP 80
63137: PUSH
63138: LD_VAR 0 2
63142: ARRAY
63143: PUSH
63144: LD_VAR 0 3
63148: DIFF
63149: PPUSH
63150: CALL_OW 1
63154: ST_TO_ADDR
// SetTag ( j , 0 ) ;
63155: LD_VAR 0 3
63159: PPUSH
63160: LD_INT 0
63162: PPUSH
63163: CALL_OW 109
// continue ;
63167: GO 63064
// end ; if IsInUnit ( j ) then
63169: LD_VAR 0 3
63173: PPUSH
63174: CALL_OW 310
63178: IFFALSE 63189
// ComExitBuilding ( j ) ;
63180: LD_VAR 0 3
63184: PPUSH
63185: CALL_OW 122
// wait ( 3 ) ;
63189: LD_INT 3
63191: PPUSH
63192: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
63196: LD_VAR 0 3
63200: PPUSH
63201: LD_VAR 0 6
63205: PUSH
63206: LD_INT 2
63208: ARRAY
63209: PPUSH
63210: LD_VAR 0 6
63214: PUSH
63215: LD_INT 3
63217: ARRAY
63218: PPUSH
63219: CALL_OW 117
// end ;
63223: GO 63064
63225: POP
63226: POP
// end ; end else
63227: GO 63808
// begin for j in cargo do
63229: LD_ADDR_VAR 0 3
63233: PUSH
63234: LD_VAR 0 7
63238: PUSH
63239: FOR_IN
63240: IFFALSE 63806
// begin if GetTag ( j ) <> 0 then
63242: LD_VAR 0 3
63246: PPUSH
63247: CALL_OW 110
63251: PUSH
63252: LD_INT 0
63254: NONEQUAL
63255: IFFALSE 63259
// continue ;
63257: GO 63239
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
63259: LD_VAR 0 3
63263: PPUSH
63264: CALL_OW 256
63268: PUSH
63269: LD_INT 1000
63271: LESS
63272: PUSH
63273: LD_VAR 0 3
63277: PPUSH
63278: LD_EXP 87
63282: PUSH
63283: LD_VAR 0 2
63287: ARRAY
63288: PPUSH
63289: CALL_OW 308
63293: NOT
63294: AND
63295: IFFALSE 63317
// ComMoveToArea ( j , mc_parking [ i ] ) ;
63297: LD_VAR 0 3
63301: PPUSH
63302: LD_EXP 87
63306: PUSH
63307: LD_VAR 0 2
63311: ARRAY
63312: PPUSH
63313: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
63317: LD_VAR 0 3
63321: PPUSH
63322: CALL_OW 256
63326: PUSH
63327: LD_INT 1000
63329: LESS
63330: PUSH
63331: LD_VAR 0 3
63335: PPUSH
63336: LD_EXP 87
63340: PUSH
63341: LD_VAR 0 2
63345: ARRAY
63346: PPUSH
63347: CALL_OW 308
63351: AND
63352: IFFALSE 63356
// continue ;
63354: GO 63239
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
63356: LD_VAR 0 3
63360: PPUSH
63361: CALL_OW 262
63365: PUSH
63366: LD_INT 2
63368: EQUAL
63369: PUSH
63370: LD_VAR 0 3
63374: PPUSH
63375: CALL_OW 261
63379: PUSH
63380: LD_INT 15
63382: LESS
63383: AND
63384: IFFALSE 63388
// continue ;
63386: GO 63239
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
63388: LD_VAR 0 3
63392: PPUSH
63393: CALL_OW 262
63397: PUSH
63398: LD_INT 1
63400: EQUAL
63401: PUSH
63402: LD_VAR 0 3
63406: PPUSH
63407: CALL_OW 261
63411: PUSH
63412: LD_INT 10
63414: LESS
63415: AND
63416: IFFALSE 63745
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
63418: LD_ADDR_VAR 0 8
63422: PUSH
63423: LD_EXP 63
63427: PUSH
63428: LD_VAR 0 2
63432: ARRAY
63433: PPUSH
63434: LD_INT 2
63436: PUSH
63437: LD_INT 30
63439: PUSH
63440: LD_INT 0
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 30
63449: PUSH
63450: LD_INT 1
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: LIST
63461: PPUSH
63462: CALL_OW 72
63466: ST_TO_ADDR
// if not depot then
63467: LD_VAR 0 8
63471: NOT
63472: IFFALSE 63476
// continue ;
63474: GO 63239
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
63476: LD_VAR 0 3
63480: PPUSH
63481: LD_VAR 0 8
63485: PPUSH
63486: LD_VAR 0 3
63490: PPUSH
63491: CALL_OW 74
63495: PPUSH
63496: CALL_OW 296
63500: PUSH
63501: LD_INT 6
63503: LESS
63504: IFFALSE 63520
// SetFuel ( j , 100 ) else
63506: LD_VAR 0 3
63510: PPUSH
63511: LD_INT 100
63513: PPUSH
63514: CALL_OW 240
63518: GO 63745
// if GetFuel ( j ) = 0 then
63520: LD_VAR 0 3
63524: PPUSH
63525: CALL_OW 261
63529: PUSH
63530: LD_INT 0
63532: EQUAL
63533: IFFALSE 63745
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
63535: LD_ADDR_EXP 82
63539: PUSH
63540: LD_EXP 82
63544: PPUSH
63545: LD_VAR 0 2
63549: PPUSH
63550: LD_EXP 82
63554: PUSH
63555: LD_VAR 0 2
63559: ARRAY
63560: PUSH
63561: LD_VAR 0 3
63565: DIFF
63566: PPUSH
63567: CALL_OW 1
63571: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
63572: LD_VAR 0 3
63576: PPUSH
63577: CALL_OW 263
63581: PUSH
63582: LD_INT 1
63584: EQUAL
63585: IFFALSE 63601
// ComExitVehicle ( IsInUnit ( j ) ) ;
63587: LD_VAR 0 3
63591: PPUSH
63592: CALL_OW 310
63596: PPUSH
63597: CALL_OW 121
// if GetControl ( j ) = control_remote then
63601: LD_VAR 0 3
63605: PPUSH
63606: CALL_OW 263
63610: PUSH
63611: LD_INT 2
63613: EQUAL
63614: IFFALSE 63625
// ComUnlink ( j ) ;
63616: LD_VAR 0 3
63620: PPUSH
63621: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
63625: LD_ADDR_VAR 0 9
63629: PUSH
63630: LD_VAR 0 2
63634: PPUSH
63635: LD_INT 3
63637: PPUSH
63638: CALL 73098 0 2
63642: ST_TO_ADDR
// if fac then
63643: LD_VAR 0 9
63647: IFFALSE 63743
// begin for k in fac do
63649: LD_ADDR_VAR 0 4
63653: PUSH
63654: LD_VAR 0 9
63658: PUSH
63659: FOR_IN
63660: IFFALSE 63741
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
63662: LD_ADDR_VAR 0 10
63666: PUSH
63667: LD_VAR 0 9
63671: PPUSH
63672: LD_VAR 0 3
63676: PPUSH
63677: CALL_OW 265
63681: PPUSH
63682: LD_VAR 0 3
63686: PPUSH
63687: CALL_OW 262
63691: PPUSH
63692: LD_VAR 0 3
63696: PPUSH
63697: CALL_OW 263
63701: PPUSH
63702: LD_VAR 0 3
63706: PPUSH
63707: CALL_OW 264
63711: PPUSH
63712: CALL 14986 0 5
63716: ST_TO_ADDR
// if components then
63717: LD_VAR 0 10
63721: IFFALSE 63739
// begin MC_InsertProduceList ( i , components ) ;
63723: LD_VAR 0 2
63727: PPUSH
63728: LD_VAR 0 10
63732: PPUSH
63733: CALL 72643 0 2
// break ;
63737: GO 63741
// end ; end ;
63739: GO 63659
63741: POP
63742: POP
// end ; continue ;
63743: GO 63239
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
63745: LD_VAR 0 3
63749: PPUSH
63750: LD_INT 1
63752: PPUSH
63753: CALL_OW 289
63757: PUSH
63758: LD_INT 100
63760: LESS
63761: PUSH
63762: LD_VAR 0 3
63766: PPUSH
63767: CALL_OW 314
63771: NOT
63772: AND
63773: IFFALSE 63802
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
63775: LD_VAR 0 3
63779: PPUSH
63780: LD_VAR 0 6
63784: PUSH
63785: LD_INT 2
63787: ARRAY
63788: PPUSH
63789: LD_VAR 0 6
63793: PUSH
63794: LD_INT 3
63796: ARRAY
63797: PPUSH
63798: CALL_OW 117
// break ;
63802: GO 63806
// end ;
63804: GO 63239
63806: POP
63807: POP
// end ; end ;
63808: GO 62077
63810: POP
63811: POP
// end ;
63812: LD_VAR 0 1
63816: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
63817: LD_INT 0
63819: PPUSH
63820: PPUSH
63821: PPUSH
63822: PPUSH
// if not mc_bases then
63823: LD_EXP 63
63827: NOT
63828: IFFALSE 63832
// exit ;
63830: GO 63993
// for i = 1 to mc_bases do
63832: LD_ADDR_VAR 0 2
63836: PUSH
63837: DOUBLE
63838: LD_INT 1
63840: DEC
63841: ST_TO_ADDR
63842: LD_EXP 63
63846: PUSH
63847: FOR_TO
63848: IFFALSE 63991
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
63850: LD_ADDR_VAR 0 4
63854: PUSH
63855: LD_EXP 82
63859: PUSH
63860: LD_VAR 0 2
63864: ARRAY
63865: PUSH
63866: LD_EXP 85
63870: PUSH
63871: LD_VAR 0 2
63875: ARRAY
63876: UNION
63877: PPUSH
63878: LD_INT 33
63880: PUSH
63881: LD_INT 2
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PPUSH
63888: CALL_OW 72
63892: ST_TO_ADDR
// if tmp then
63893: LD_VAR 0 4
63897: IFFALSE 63989
// for j in tmp do
63899: LD_ADDR_VAR 0 3
63903: PUSH
63904: LD_VAR 0 4
63908: PUSH
63909: FOR_IN
63910: IFFALSE 63987
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
63912: LD_VAR 0 3
63916: PPUSH
63917: CALL_OW 312
63921: NOT
63922: PUSH
63923: LD_VAR 0 3
63927: PPUSH
63928: CALL_OW 256
63932: PUSH
63933: LD_INT 250
63935: GREATEREQUAL
63936: AND
63937: IFFALSE 63950
// Connect ( j ) else
63939: LD_VAR 0 3
63943: PPUSH
63944: CALL 20387 0 1
63948: GO 63985
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
63950: LD_VAR 0 3
63954: PPUSH
63955: CALL_OW 256
63959: PUSH
63960: LD_INT 250
63962: LESS
63963: PUSH
63964: LD_VAR 0 3
63968: PPUSH
63969: CALL_OW 312
63973: AND
63974: IFFALSE 63985
// ComUnlink ( j ) ;
63976: LD_VAR 0 3
63980: PPUSH
63981: CALL_OW 136
63985: GO 63909
63987: POP
63988: POP
// end ;
63989: GO 63847
63991: POP
63992: POP
// end ;
63993: LD_VAR 0 1
63997: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
63998: LD_INT 0
64000: PPUSH
64001: PPUSH
64002: PPUSH
64003: PPUSH
64004: PPUSH
// if not mc_bases then
64005: LD_EXP 63
64009: NOT
64010: IFFALSE 64014
// exit ;
64012: GO 64459
// for i = 1 to mc_bases do
64014: LD_ADDR_VAR 0 2
64018: PUSH
64019: DOUBLE
64020: LD_INT 1
64022: DEC
64023: ST_TO_ADDR
64024: LD_EXP 63
64028: PUSH
64029: FOR_TO
64030: IFFALSE 64457
// begin if not mc_produce [ i ] then
64032: LD_EXP 84
64036: PUSH
64037: LD_VAR 0 2
64041: ARRAY
64042: NOT
64043: IFFALSE 64047
// continue ;
64045: GO 64029
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
64047: LD_ADDR_VAR 0 5
64051: PUSH
64052: LD_EXP 63
64056: PUSH
64057: LD_VAR 0 2
64061: ARRAY
64062: PPUSH
64063: LD_INT 30
64065: PUSH
64066: LD_INT 3
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PPUSH
64073: CALL_OW 72
64077: ST_TO_ADDR
// if not fac then
64078: LD_VAR 0 5
64082: NOT
64083: IFFALSE 64087
// continue ;
64085: GO 64029
// for j in fac do
64087: LD_ADDR_VAR 0 3
64091: PUSH
64092: LD_VAR 0 5
64096: PUSH
64097: FOR_IN
64098: IFFALSE 64453
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
64100: LD_VAR 0 3
64104: PPUSH
64105: CALL_OW 461
64109: PUSH
64110: LD_INT 2
64112: NONEQUAL
64113: PUSH
64114: LD_VAR 0 3
64118: PPUSH
64119: LD_INT 15
64121: PPUSH
64122: CALL 20047 0 2
64126: PUSH
64127: LD_INT 4
64129: ARRAY
64130: OR
64131: IFFALSE 64135
// continue ;
64133: GO 64097
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
64135: LD_VAR 0 3
64139: PPUSH
64140: LD_EXP 84
64144: PUSH
64145: LD_VAR 0 2
64149: ARRAY
64150: PUSH
64151: LD_INT 1
64153: ARRAY
64154: PUSH
64155: LD_INT 1
64157: ARRAY
64158: PPUSH
64159: LD_EXP 84
64163: PUSH
64164: LD_VAR 0 2
64168: ARRAY
64169: PUSH
64170: LD_INT 1
64172: ARRAY
64173: PUSH
64174: LD_INT 2
64176: ARRAY
64177: PPUSH
64178: LD_EXP 84
64182: PUSH
64183: LD_VAR 0 2
64187: ARRAY
64188: PUSH
64189: LD_INT 1
64191: ARRAY
64192: PUSH
64193: LD_INT 3
64195: ARRAY
64196: PPUSH
64197: LD_EXP 84
64201: PUSH
64202: LD_VAR 0 2
64206: ARRAY
64207: PUSH
64208: LD_INT 1
64210: ARRAY
64211: PUSH
64212: LD_INT 4
64214: ARRAY
64215: PPUSH
64216: CALL_OW 448
64220: PUSH
64221: LD_VAR 0 3
64225: PPUSH
64226: LD_EXP 84
64230: PUSH
64231: LD_VAR 0 2
64235: ARRAY
64236: PUSH
64237: LD_INT 1
64239: ARRAY
64240: PUSH
64241: LD_INT 1
64243: ARRAY
64244: PUSH
64245: LD_EXP 84
64249: PUSH
64250: LD_VAR 0 2
64254: ARRAY
64255: PUSH
64256: LD_INT 1
64258: ARRAY
64259: PUSH
64260: LD_INT 2
64262: ARRAY
64263: PUSH
64264: LD_EXP 84
64268: PUSH
64269: LD_VAR 0 2
64273: ARRAY
64274: PUSH
64275: LD_INT 1
64277: ARRAY
64278: PUSH
64279: LD_INT 3
64281: ARRAY
64282: PUSH
64283: LD_EXP 84
64287: PUSH
64288: LD_VAR 0 2
64292: ARRAY
64293: PUSH
64294: LD_INT 1
64296: ARRAY
64297: PUSH
64298: LD_INT 4
64300: ARRAY
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: PPUSH
64308: CALL 23718 0 2
64312: AND
64313: IFFALSE 64451
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
64315: LD_VAR 0 3
64319: PPUSH
64320: LD_EXP 84
64324: PUSH
64325: LD_VAR 0 2
64329: ARRAY
64330: PUSH
64331: LD_INT 1
64333: ARRAY
64334: PUSH
64335: LD_INT 1
64337: ARRAY
64338: PPUSH
64339: LD_EXP 84
64343: PUSH
64344: LD_VAR 0 2
64348: ARRAY
64349: PUSH
64350: LD_INT 1
64352: ARRAY
64353: PUSH
64354: LD_INT 2
64356: ARRAY
64357: PPUSH
64358: LD_EXP 84
64362: PUSH
64363: LD_VAR 0 2
64367: ARRAY
64368: PUSH
64369: LD_INT 1
64371: ARRAY
64372: PUSH
64373: LD_INT 3
64375: ARRAY
64376: PPUSH
64377: LD_EXP 84
64381: PUSH
64382: LD_VAR 0 2
64386: ARRAY
64387: PUSH
64388: LD_INT 1
64390: ARRAY
64391: PUSH
64392: LD_INT 4
64394: ARRAY
64395: PPUSH
64396: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
64400: LD_ADDR_VAR 0 4
64404: PUSH
64405: LD_EXP 84
64409: PUSH
64410: LD_VAR 0 2
64414: ARRAY
64415: PPUSH
64416: LD_INT 1
64418: PPUSH
64419: CALL_OW 3
64423: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
64424: LD_ADDR_EXP 84
64428: PUSH
64429: LD_EXP 84
64433: PPUSH
64434: LD_VAR 0 2
64438: PPUSH
64439: LD_VAR 0 4
64443: PPUSH
64444: CALL_OW 1
64448: ST_TO_ADDR
// break ;
64449: GO 64453
// end ; end ;
64451: GO 64097
64453: POP
64454: POP
// end ;
64455: GO 64029
64457: POP
64458: POP
// end ;
64459: LD_VAR 0 1
64463: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
64464: LD_INT 0
64466: PPUSH
64467: PPUSH
64468: PPUSH
// if not mc_bases then
64469: LD_EXP 63
64473: NOT
64474: IFFALSE 64478
// exit ;
64476: GO 64567
// for i = 1 to mc_bases do
64478: LD_ADDR_VAR 0 2
64482: PUSH
64483: DOUBLE
64484: LD_INT 1
64486: DEC
64487: ST_TO_ADDR
64488: LD_EXP 63
64492: PUSH
64493: FOR_TO
64494: IFFALSE 64565
// begin if mc_attack [ i ] then
64496: LD_EXP 83
64500: PUSH
64501: LD_VAR 0 2
64505: ARRAY
64506: IFFALSE 64563
// begin tmp := mc_attack [ i ] [ 1 ] ;
64508: LD_ADDR_VAR 0 3
64512: PUSH
64513: LD_EXP 83
64517: PUSH
64518: LD_VAR 0 2
64522: ARRAY
64523: PUSH
64524: LD_INT 1
64526: ARRAY
64527: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
64528: LD_ADDR_EXP 83
64532: PUSH
64533: LD_EXP 83
64537: PPUSH
64538: LD_VAR 0 2
64542: PPUSH
64543: EMPTY
64544: PPUSH
64545: CALL_OW 1
64549: ST_TO_ADDR
// Attack ( tmp ) ;
64550: LD_VAR 0 3
64554: PPUSH
64555: CALL 90614 0 1
// exit ;
64559: POP
64560: POP
64561: GO 64567
// end ; end ;
64563: GO 64493
64565: POP
64566: POP
// end ;
64567: LD_VAR 0 1
64571: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
64572: LD_INT 0
64574: PPUSH
64575: PPUSH
64576: PPUSH
64577: PPUSH
64578: PPUSH
64579: PPUSH
64580: PPUSH
// if not mc_bases then
64581: LD_EXP 63
64585: NOT
64586: IFFALSE 64590
// exit ;
64588: GO 65172
// for i = 1 to mc_bases do
64590: LD_ADDR_VAR 0 2
64594: PUSH
64595: DOUBLE
64596: LD_INT 1
64598: DEC
64599: ST_TO_ADDR
64600: LD_EXP 63
64604: PUSH
64605: FOR_TO
64606: IFFALSE 65170
// begin if not mc_bases [ i ] then
64608: LD_EXP 63
64612: PUSH
64613: LD_VAR 0 2
64617: ARRAY
64618: NOT
64619: IFFALSE 64623
// continue ;
64621: GO 64605
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
64623: LD_ADDR_VAR 0 7
64627: PUSH
64628: LD_EXP 63
64632: PUSH
64633: LD_VAR 0 2
64637: ARRAY
64638: PUSH
64639: LD_INT 1
64641: ARRAY
64642: PPUSH
64643: CALL 14290 0 1
64647: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
64648: LD_ADDR_EXP 86
64652: PUSH
64653: LD_EXP 86
64657: PPUSH
64658: LD_VAR 0 2
64662: PPUSH
64663: LD_EXP 63
64667: PUSH
64668: LD_VAR 0 2
64672: ARRAY
64673: PUSH
64674: LD_INT 1
64676: ARRAY
64677: PPUSH
64678: CALL_OW 255
64682: PPUSH
64683: LD_EXP 88
64687: PUSH
64688: LD_VAR 0 2
64692: ARRAY
64693: PPUSH
64694: CALL 14255 0 2
64698: PPUSH
64699: CALL_OW 1
64703: ST_TO_ADDR
// if not mc_scan [ i ] then
64704: LD_EXP 86
64708: PUSH
64709: LD_VAR 0 2
64713: ARRAY
64714: NOT
64715: IFFALSE 64870
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
64717: LD_ADDR_VAR 0 4
64721: PUSH
64722: LD_EXP 63
64726: PUSH
64727: LD_VAR 0 2
64731: ARRAY
64732: PPUSH
64733: LD_INT 2
64735: PUSH
64736: LD_INT 25
64738: PUSH
64739: LD_INT 5
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 25
64748: PUSH
64749: LD_INT 8
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 25
64758: PUSH
64759: LD_INT 9
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: PPUSH
64772: CALL_OW 72
64776: ST_TO_ADDR
// if not tmp then
64777: LD_VAR 0 4
64781: NOT
64782: IFFALSE 64786
// continue ;
64784: GO 64605
// for j in tmp do
64786: LD_ADDR_VAR 0 3
64790: PUSH
64791: LD_VAR 0 4
64795: PUSH
64796: FOR_IN
64797: IFFALSE 64868
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
64799: LD_VAR 0 3
64803: PPUSH
64804: CALL_OW 310
64808: PPUSH
64809: CALL_OW 266
64813: PUSH
64814: LD_INT 5
64816: EQUAL
64817: PUSH
64818: LD_VAR 0 3
64822: PPUSH
64823: CALL_OW 257
64827: PUSH
64828: LD_INT 1
64830: EQUAL
64831: AND
64832: PUSH
64833: LD_VAR 0 3
64837: PPUSH
64838: CALL_OW 459
64842: NOT
64843: AND
64844: PUSH
64845: LD_VAR 0 7
64849: AND
64850: IFFALSE 64866
// ComChangeProfession ( j , class ) ;
64852: LD_VAR 0 3
64856: PPUSH
64857: LD_VAR 0 7
64861: PPUSH
64862: CALL_OW 123
64866: GO 64796
64868: POP
64869: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
64870: LD_EXP 86
64874: PUSH
64875: LD_VAR 0 2
64879: ARRAY
64880: PUSH
64881: LD_EXP 85
64885: PUSH
64886: LD_VAR 0 2
64890: ARRAY
64891: NOT
64892: AND
64893: PUSH
64894: LD_EXP 63
64898: PUSH
64899: LD_VAR 0 2
64903: ARRAY
64904: PPUSH
64905: LD_INT 30
64907: PUSH
64908: LD_INT 32
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PPUSH
64915: CALL_OW 72
64919: NOT
64920: AND
64921: PUSH
64922: LD_EXP 63
64926: PUSH
64927: LD_VAR 0 2
64931: ARRAY
64932: PPUSH
64933: LD_INT 2
64935: PUSH
64936: LD_INT 30
64938: PUSH
64939: LD_INT 4
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 30
64948: PUSH
64949: LD_INT 5
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: LIST
64960: PPUSH
64961: CALL_OW 72
64965: NOT
64966: AND
64967: IFFALSE 65099
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
64969: LD_ADDR_VAR 0 4
64973: PUSH
64974: LD_EXP 63
64978: PUSH
64979: LD_VAR 0 2
64983: ARRAY
64984: PPUSH
64985: LD_INT 2
64987: PUSH
64988: LD_INT 25
64990: PUSH
64991: LD_INT 1
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: LD_INT 25
65000: PUSH
65001: LD_INT 5
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 25
65010: PUSH
65011: LD_INT 8
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 25
65020: PUSH
65021: LD_INT 9
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: LIST
65034: PPUSH
65035: CALL_OW 72
65039: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
65040: LD_ADDR_VAR 0 4
65044: PUSH
65045: LD_VAR 0 4
65049: PUSH
65050: LD_VAR 0 4
65054: PPUSH
65055: LD_INT 18
65057: PPUSH
65058: CALL 46015 0 2
65062: DIFF
65063: ST_TO_ADDR
// if tmp then
65064: LD_VAR 0 4
65068: IFFALSE 65099
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
65070: LD_VAR 0 2
65074: PPUSH
65075: LD_VAR 0 4
65079: PPUSH
65080: LD_EXP 88
65084: PUSH
65085: LD_VAR 0 2
65089: ARRAY
65090: PPUSH
65091: CALL 95323 0 3
// exit ;
65095: POP
65096: POP
65097: GO 65172
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
65099: LD_EXP 86
65103: PUSH
65104: LD_VAR 0 2
65108: ARRAY
65109: PUSH
65110: LD_EXP 85
65114: PUSH
65115: LD_VAR 0 2
65119: ARRAY
65120: AND
65121: IFFALSE 65168
// begin tmp := mc_defender [ i ] ;
65123: LD_ADDR_VAR 0 4
65127: PUSH
65128: LD_EXP 85
65132: PUSH
65133: LD_VAR 0 2
65137: ARRAY
65138: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
65139: LD_VAR 0 2
65143: PPUSH
65144: LD_VAR 0 4
65148: PPUSH
65149: LD_EXP 86
65153: PUSH
65154: LD_VAR 0 2
65158: ARRAY
65159: PPUSH
65160: CALL 95884 0 3
// exit ;
65164: POP
65165: POP
65166: GO 65172
// end ; end ;
65168: GO 64605
65170: POP
65171: POP
// end ;
65172: LD_VAR 0 1
65176: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
65177: LD_INT 0
65179: PPUSH
65180: PPUSH
65181: PPUSH
65182: PPUSH
65183: PPUSH
65184: PPUSH
65185: PPUSH
65186: PPUSH
65187: PPUSH
65188: PPUSH
65189: PPUSH
// if not mc_bases then
65190: LD_EXP 63
65194: NOT
65195: IFFALSE 65199
// exit ;
65197: GO 66286
// for i = 1 to mc_bases do
65199: LD_ADDR_VAR 0 2
65203: PUSH
65204: DOUBLE
65205: LD_INT 1
65207: DEC
65208: ST_TO_ADDR
65209: LD_EXP 63
65213: PUSH
65214: FOR_TO
65215: IFFALSE 66284
// begin tmp := mc_lab [ i ] ;
65217: LD_ADDR_VAR 0 6
65221: PUSH
65222: LD_EXP 96
65226: PUSH
65227: LD_VAR 0 2
65231: ARRAY
65232: ST_TO_ADDR
// if not tmp then
65233: LD_VAR 0 6
65237: NOT
65238: IFFALSE 65242
// continue ;
65240: GO 65214
// idle_lab := 0 ;
65242: LD_ADDR_VAR 0 11
65246: PUSH
65247: LD_INT 0
65249: ST_TO_ADDR
// for j in tmp do
65250: LD_ADDR_VAR 0 3
65254: PUSH
65255: LD_VAR 0 6
65259: PUSH
65260: FOR_IN
65261: IFFALSE 66280
// begin researching := false ;
65263: LD_ADDR_VAR 0 10
65267: PUSH
65268: LD_INT 0
65270: ST_TO_ADDR
// side := GetSide ( j ) ;
65271: LD_ADDR_VAR 0 4
65275: PUSH
65276: LD_VAR 0 3
65280: PPUSH
65281: CALL_OW 255
65285: ST_TO_ADDR
// if not mc_tech [ side ] then
65286: LD_EXP 90
65290: PUSH
65291: LD_VAR 0 4
65295: ARRAY
65296: NOT
65297: IFFALSE 65301
// continue ;
65299: GO 65260
// if BuildingStatus ( j ) = bs_idle then
65301: LD_VAR 0 3
65305: PPUSH
65306: CALL_OW 461
65310: PUSH
65311: LD_INT 2
65313: EQUAL
65314: IFFALSE 65502
// begin if idle_lab and UnitsInside ( j ) < 6 then
65316: LD_VAR 0 11
65320: PUSH
65321: LD_VAR 0 3
65325: PPUSH
65326: CALL_OW 313
65330: PUSH
65331: LD_INT 6
65333: LESS
65334: AND
65335: IFFALSE 65406
// begin tmp2 := UnitsInside ( idle_lab ) ;
65337: LD_ADDR_VAR 0 9
65341: PUSH
65342: LD_VAR 0 11
65346: PPUSH
65347: CALL_OW 313
65351: ST_TO_ADDR
// if tmp2 then
65352: LD_VAR 0 9
65356: IFFALSE 65398
// for x in tmp2 do
65358: LD_ADDR_VAR 0 7
65362: PUSH
65363: LD_VAR 0 9
65367: PUSH
65368: FOR_IN
65369: IFFALSE 65396
// begin ComExitBuilding ( x ) ;
65371: LD_VAR 0 7
65375: PPUSH
65376: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
65380: LD_VAR 0 7
65384: PPUSH
65385: LD_VAR 0 3
65389: PPUSH
65390: CALL_OW 180
// end ;
65394: GO 65368
65396: POP
65397: POP
// idle_lab := 0 ;
65398: LD_ADDR_VAR 0 11
65402: PUSH
65403: LD_INT 0
65405: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
65406: LD_ADDR_VAR 0 5
65410: PUSH
65411: LD_EXP 90
65415: PUSH
65416: LD_VAR 0 4
65420: ARRAY
65421: PUSH
65422: FOR_IN
65423: IFFALSE 65483
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
65425: LD_VAR 0 3
65429: PPUSH
65430: LD_VAR 0 5
65434: PPUSH
65435: CALL_OW 430
65439: PUSH
65440: LD_VAR 0 4
65444: PPUSH
65445: LD_VAR 0 5
65449: PPUSH
65450: CALL 13360 0 2
65454: AND
65455: IFFALSE 65481
// begin researching := true ;
65457: LD_ADDR_VAR 0 10
65461: PUSH
65462: LD_INT 1
65464: ST_TO_ADDR
// ComResearch ( j , t ) ;
65465: LD_VAR 0 3
65469: PPUSH
65470: LD_VAR 0 5
65474: PPUSH
65475: CALL_OW 124
// break ;
65479: GO 65483
// end ;
65481: GO 65422
65483: POP
65484: POP
// if not researching then
65485: LD_VAR 0 10
65489: NOT
65490: IFFALSE 65502
// idle_lab := j ;
65492: LD_ADDR_VAR 0 11
65496: PUSH
65497: LD_VAR 0 3
65501: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
65502: LD_VAR 0 3
65506: PPUSH
65507: CALL_OW 461
65511: PUSH
65512: LD_INT 10
65514: EQUAL
65515: IFFALSE 66103
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
65517: LD_EXP 92
65521: PUSH
65522: LD_VAR 0 2
65526: ARRAY
65527: NOT
65528: PUSH
65529: LD_EXP 93
65533: PUSH
65534: LD_VAR 0 2
65538: ARRAY
65539: NOT
65540: AND
65541: PUSH
65542: LD_EXP 90
65546: PUSH
65547: LD_VAR 0 4
65551: ARRAY
65552: PUSH
65553: LD_INT 1
65555: GREATER
65556: AND
65557: IFFALSE 65688
// begin ComCancel ( j ) ;
65559: LD_VAR 0 3
65563: PPUSH
65564: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
65568: LD_ADDR_EXP 90
65572: PUSH
65573: LD_EXP 90
65577: PPUSH
65578: LD_VAR 0 4
65582: PPUSH
65583: LD_EXP 90
65587: PUSH
65588: LD_VAR 0 4
65592: ARRAY
65593: PPUSH
65594: LD_EXP 90
65598: PUSH
65599: LD_VAR 0 4
65603: ARRAY
65604: PUSH
65605: LD_INT 1
65607: MINUS
65608: PPUSH
65609: LD_EXP 90
65613: PUSH
65614: LD_VAR 0 4
65618: ARRAY
65619: PPUSH
65620: LD_INT 0
65622: PPUSH
65623: CALL 16872 0 4
65627: PPUSH
65628: CALL_OW 1
65632: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
65633: LD_ADDR_EXP 90
65637: PUSH
65638: LD_EXP 90
65642: PPUSH
65643: LD_VAR 0 4
65647: PPUSH
65648: LD_EXP 90
65652: PUSH
65653: LD_VAR 0 4
65657: ARRAY
65658: PPUSH
65659: LD_EXP 90
65663: PUSH
65664: LD_VAR 0 4
65668: ARRAY
65669: PPUSH
65670: LD_INT 1
65672: PPUSH
65673: LD_INT 0
65675: PPUSH
65676: CALL 16872 0 4
65680: PPUSH
65681: CALL_OW 1
65685: ST_TO_ADDR
// continue ;
65686: GO 65260
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
65688: LD_EXP 92
65692: PUSH
65693: LD_VAR 0 2
65697: ARRAY
65698: PUSH
65699: LD_EXP 93
65703: PUSH
65704: LD_VAR 0 2
65708: ARRAY
65709: NOT
65710: AND
65711: IFFALSE 65838
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
65713: LD_ADDR_EXP 93
65717: PUSH
65718: LD_EXP 93
65722: PPUSH
65723: LD_VAR 0 2
65727: PUSH
65728: LD_EXP 93
65732: PUSH
65733: LD_VAR 0 2
65737: ARRAY
65738: PUSH
65739: LD_INT 1
65741: PLUS
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PPUSH
65747: LD_EXP 92
65751: PUSH
65752: LD_VAR 0 2
65756: ARRAY
65757: PUSH
65758: LD_INT 1
65760: ARRAY
65761: PPUSH
65762: CALL 17454 0 3
65766: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
65767: LD_EXP 92
65771: PUSH
65772: LD_VAR 0 2
65776: ARRAY
65777: PUSH
65778: LD_INT 1
65780: ARRAY
65781: PPUSH
65782: LD_INT 112
65784: PPUSH
65785: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
65789: LD_ADDR_VAR 0 9
65793: PUSH
65794: LD_EXP 92
65798: PUSH
65799: LD_VAR 0 2
65803: ARRAY
65804: PPUSH
65805: LD_INT 1
65807: PPUSH
65808: CALL_OW 3
65812: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
65813: LD_ADDR_EXP 92
65817: PUSH
65818: LD_EXP 92
65822: PPUSH
65823: LD_VAR 0 2
65827: PPUSH
65828: LD_VAR 0 9
65832: PPUSH
65833: CALL_OW 1
65837: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
65838: LD_EXP 92
65842: PUSH
65843: LD_VAR 0 2
65847: ARRAY
65848: PUSH
65849: LD_EXP 93
65853: PUSH
65854: LD_VAR 0 2
65858: ARRAY
65859: AND
65860: PUSH
65861: LD_EXP 93
65865: PUSH
65866: LD_VAR 0 2
65870: ARRAY
65871: PUSH
65872: LD_INT 1
65874: ARRAY
65875: PPUSH
65876: CALL_OW 310
65880: NOT
65881: AND
65882: PUSH
65883: LD_VAR 0 3
65887: PPUSH
65888: CALL_OW 313
65892: PUSH
65893: LD_INT 6
65895: EQUAL
65896: AND
65897: IFFALSE 65953
// begin tmp2 := UnitsInside ( j ) ;
65899: LD_ADDR_VAR 0 9
65903: PUSH
65904: LD_VAR 0 3
65908: PPUSH
65909: CALL_OW 313
65913: ST_TO_ADDR
// if tmp2 = 6 then
65914: LD_VAR 0 9
65918: PUSH
65919: LD_INT 6
65921: EQUAL
65922: IFFALSE 65953
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
65924: LD_VAR 0 9
65928: PUSH
65929: LD_INT 1
65931: ARRAY
65932: PPUSH
65933: LD_INT 112
65935: PPUSH
65936: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
65940: LD_VAR 0 9
65944: PUSH
65945: LD_INT 1
65947: ARRAY
65948: PPUSH
65949: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
65953: LD_EXP 93
65957: PUSH
65958: LD_VAR 0 2
65962: ARRAY
65963: PUSH
65964: LD_EXP 93
65968: PUSH
65969: LD_VAR 0 2
65973: ARRAY
65974: PUSH
65975: LD_INT 1
65977: ARRAY
65978: PPUSH
65979: CALL_OW 314
65983: NOT
65984: AND
65985: PUSH
65986: LD_EXP 93
65990: PUSH
65991: LD_VAR 0 2
65995: ARRAY
65996: PUSH
65997: LD_INT 1
65999: ARRAY
66000: PPUSH
66001: CALL_OW 310
66005: NOT
66006: AND
66007: IFFALSE 66033
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
66009: LD_EXP 93
66013: PUSH
66014: LD_VAR 0 2
66018: ARRAY
66019: PUSH
66020: LD_INT 1
66022: ARRAY
66023: PPUSH
66024: LD_VAR 0 3
66028: PPUSH
66029: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
66033: LD_EXP 93
66037: PUSH
66038: LD_VAR 0 2
66042: ARRAY
66043: PUSH
66044: LD_INT 1
66046: ARRAY
66047: PPUSH
66048: CALL_OW 310
66052: PUSH
66053: LD_EXP 93
66057: PUSH
66058: LD_VAR 0 2
66062: ARRAY
66063: PUSH
66064: LD_INT 1
66066: ARRAY
66067: PPUSH
66068: CALL_OW 310
66072: PPUSH
66073: CALL_OW 461
66077: PUSH
66078: LD_INT 3
66080: NONEQUAL
66081: AND
66082: IFFALSE 66103
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
66084: LD_EXP 93
66088: PUSH
66089: LD_VAR 0 2
66093: ARRAY
66094: PUSH
66095: LD_INT 1
66097: ARRAY
66098: PPUSH
66099: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
66103: LD_VAR 0 3
66107: PPUSH
66108: CALL_OW 461
66112: PUSH
66113: LD_INT 6
66115: EQUAL
66116: PUSH
66117: LD_VAR 0 6
66121: PUSH
66122: LD_INT 1
66124: GREATER
66125: AND
66126: IFFALSE 66278
// begin sci := [ ] ;
66128: LD_ADDR_VAR 0 8
66132: PUSH
66133: EMPTY
66134: ST_TO_ADDR
// for x in ( tmp diff j ) do
66135: LD_ADDR_VAR 0 7
66139: PUSH
66140: LD_VAR 0 6
66144: PUSH
66145: LD_VAR 0 3
66149: DIFF
66150: PUSH
66151: FOR_IN
66152: IFFALSE 66204
// begin if sci = 6 then
66154: LD_VAR 0 8
66158: PUSH
66159: LD_INT 6
66161: EQUAL
66162: IFFALSE 66166
// break ;
66164: GO 66204
// if BuildingStatus ( x ) = bs_idle then
66166: LD_VAR 0 7
66170: PPUSH
66171: CALL_OW 461
66175: PUSH
66176: LD_INT 2
66178: EQUAL
66179: IFFALSE 66202
// sci := sci ^ UnitsInside ( x ) ;
66181: LD_ADDR_VAR 0 8
66185: PUSH
66186: LD_VAR 0 8
66190: PUSH
66191: LD_VAR 0 7
66195: PPUSH
66196: CALL_OW 313
66200: ADD
66201: ST_TO_ADDR
// end ;
66202: GO 66151
66204: POP
66205: POP
// if not sci then
66206: LD_VAR 0 8
66210: NOT
66211: IFFALSE 66215
// continue ;
66213: GO 65260
// for x in sci do
66215: LD_ADDR_VAR 0 7
66219: PUSH
66220: LD_VAR 0 8
66224: PUSH
66225: FOR_IN
66226: IFFALSE 66276
// if IsInUnit ( x ) and not HasTask ( x ) then
66228: LD_VAR 0 7
66232: PPUSH
66233: CALL_OW 310
66237: PUSH
66238: LD_VAR 0 7
66242: PPUSH
66243: CALL_OW 314
66247: NOT
66248: AND
66249: IFFALSE 66274
// begin ComExitBuilding ( x ) ;
66251: LD_VAR 0 7
66255: PPUSH
66256: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
66260: LD_VAR 0 7
66264: PPUSH
66265: LD_VAR 0 3
66269: PPUSH
66270: CALL_OW 180
// end ;
66274: GO 66225
66276: POP
66277: POP
// end ; end ;
66278: GO 65260
66280: POP
66281: POP
// end ;
66282: GO 65214
66284: POP
66285: POP
// end ;
66286: LD_VAR 0 1
66290: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
66291: LD_INT 0
66293: PPUSH
66294: PPUSH
// if not mc_bases then
66295: LD_EXP 63
66299: NOT
66300: IFFALSE 66304
// exit ;
66302: GO 66385
// for i = 1 to mc_bases do
66304: LD_ADDR_VAR 0 2
66308: PUSH
66309: DOUBLE
66310: LD_INT 1
66312: DEC
66313: ST_TO_ADDR
66314: LD_EXP 63
66318: PUSH
66319: FOR_TO
66320: IFFALSE 66383
// if mc_mines [ i ] and mc_miners [ i ] then
66322: LD_EXP 76
66326: PUSH
66327: LD_VAR 0 2
66331: ARRAY
66332: PUSH
66333: LD_EXP 77
66337: PUSH
66338: LD_VAR 0 2
66342: ARRAY
66343: AND
66344: IFFALSE 66381
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
66346: LD_EXP 77
66350: PUSH
66351: LD_VAR 0 2
66355: ARRAY
66356: PUSH
66357: LD_INT 1
66359: ARRAY
66360: PPUSH
66361: CALL_OW 255
66365: PPUSH
66366: LD_EXP 76
66370: PUSH
66371: LD_VAR 0 2
66375: ARRAY
66376: PPUSH
66377: CALL 14443 0 2
66381: GO 66319
66383: POP
66384: POP
// end ;
66385: LD_VAR 0 1
66389: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
66390: LD_INT 0
66392: PPUSH
66393: PPUSH
66394: PPUSH
66395: PPUSH
66396: PPUSH
66397: PPUSH
66398: PPUSH
66399: PPUSH
// if not mc_bases or not mc_parking then
66400: LD_EXP 63
66404: NOT
66405: PUSH
66406: LD_EXP 87
66410: NOT
66411: OR
66412: IFFALSE 66416
// exit ;
66414: GO 67115
// for i = 1 to mc_bases do
66416: LD_ADDR_VAR 0 2
66420: PUSH
66421: DOUBLE
66422: LD_INT 1
66424: DEC
66425: ST_TO_ADDR
66426: LD_EXP 63
66430: PUSH
66431: FOR_TO
66432: IFFALSE 67113
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
66434: LD_EXP 63
66438: PUSH
66439: LD_VAR 0 2
66443: ARRAY
66444: NOT
66445: PUSH
66446: LD_EXP 87
66450: PUSH
66451: LD_VAR 0 2
66455: ARRAY
66456: NOT
66457: OR
66458: IFFALSE 66462
// continue ;
66460: GO 66431
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
66462: LD_ADDR_VAR 0 5
66466: PUSH
66467: LD_EXP 63
66471: PUSH
66472: LD_VAR 0 2
66476: ARRAY
66477: PUSH
66478: LD_INT 1
66480: ARRAY
66481: PPUSH
66482: CALL_OW 255
66486: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
66487: LD_ADDR_VAR 0 6
66491: PUSH
66492: LD_EXP 63
66496: PUSH
66497: LD_VAR 0 2
66501: ARRAY
66502: PPUSH
66503: LD_INT 30
66505: PUSH
66506: LD_INT 3
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PPUSH
66513: CALL_OW 72
66517: ST_TO_ADDR
// if not fac then
66518: LD_VAR 0 6
66522: NOT
66523: IFFALSE 66574
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
66525: LD_ADDR_VAR 0 6
66529: PUSH
66530: LD_EXP 63
66534: PUSH
66535: LD_VAR 0 2
66539: ARRAY
66540: PPUSH
66541: LD_INT 2
66543: PUSH
66544: LD_INT 30
66546: PUSH
66547: LD_INT 0
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 30
66556: PUSH
66557: LD_INT 1
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: LIST
66568: PPUSH
66569: CALL_OW 72
66573: ST_TO_ADDR
// if not fac then
66574: LD_VAR 0 6
66578: NOT
66579: IFFALSE 66583
// continue ;
66581: GO 66431
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
66583: LD_ADDR_VAR 0 7
66587: PUSH
66588: LD_EXP 87
66592: PUSH
66593: LD_VAR 0 2
66597: ARRAY
66598: PPUSH
66599: LD_INT 22
66601: PUSH
66602: LD_VAR 0 5
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 21
66613: PUSH
66614: LD_INT 2
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: LD_INT 3
66623: PUSH
66624: LD_INT 24
66626: PUSH
66627: LD_INT 1000
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: LIST
66642: PPUSH
66643: CALL_OW 70
66647: ST_TO_ADDR
// for j in fac do
66648: LD_ADDR_VAR 0 3
66652: PUSH
66653: LD_VAR 0 6
66657: PUSH
66658: FOR_IN
66659: IFFALSE 66740
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
66661: LD_ADDR_VAR 0 7
66665: PUSH
66666: LD_VAR 0 7
66670: PUSH
66671: LD_INT 22
66673: PUSH
66674: LD_VAR 0 5
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 91
66685: PUSH
66686: LD_VAR 0 3
66690: PUSH
66691: LD_INT 15
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 21
66701: PUSH
66702: LD_INT 2
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 3
66711: PUSH
66712: LD_INT 24
66714: PUSH
66715: LD_INT 1000
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: PPUSH
66732: CALL_OW 69
66736: UNION
66737: ST_TO_ADDR
66738: GO 66658
66740: POP
66741: POP
// if not vehs then
66742: LD_VAR 0 7
66746: NOT
66747: IFFALSE 66773
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
66749: LD_ADDR_EXP 75
66753: PUSH
66754: LD_EXP 75
66758: PPUSH
66759: LD_VAR 0 2
66763: PPUSH
66764: EMPTY
66765: PPUSH
66766: CALL_OW 1
66770: ST_TO_ADDR
// continue ;
66771: GO 66431
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
66773: LD_ADDR_VAR 0 8
66777: PUSH
66778: LD_EXP 63
66782: PUSH
66783: LD_VAR 0 2
66787: ARRAY
66788: PPUSH
66789: LD_INT 30
66791: PUSH
66792: LD_INT 3
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PPUSH
66799: CALL_OW 72
66803: ST_TO_ADDR
// if tmp then
66804: LD_VAR 0 8
66808: IFFALSE 66911
// begin for j in tmp do
66810: LD_ADDR_VAR 0 3
66814: PUSH
66815: LD_VAR 0 8
66819: PUSH
66820: FOR_IN
66821: IFFALSE 66909
// for k in UnitsInside ( j ) do
66823: LD_ADDR_VAR 0 4
66827: PUSH
66828: LD_VAR 0 3
66832: PPUSH
66833: CALL_OW 313
66837: PUSH
66838: FOR_IN
66839: IFFALSE 66905
// if k then
66841: LD_VAR 0 4
66845: IFFALSE 66903
// if not k in mc_repair_vehicle [ i ] then
66847: LD_VAR 0 4
66851: PUSH
66852: LD_EXP 75
66856: PUSH
66857: LD_VAR 0 2
66861: ARRAY
66862: IN
66863: NOT
66864: IFFALSE 66903
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
66866: LD_ADDR_EXP 75
66870: PUSH
66871: LD_EXP 75
66875: PPUSH
66876: LD_VAR 0 2
66880: PPUSH
66881: LD_EXP 75
66885: PUSH
66886: LD_VAR 0 2
66890: ARRAY
66891: PUSH
66892: LD_VAR 0 4
66896: UNION
66897: PPUSH
66898: CALL_OW 1
66902: ST_TO_ADDR
66903: GO 66838
66905: POP
66906: POP
66907: GO 66820
66909: POP
66910: POP
// end ; if not mc_repair_vehicle [ i ] then
66911: LD_EXP 75
66915: PUSH
66916: LD_VAR 0 2
66920: ARRAY
66921: NOT
66922: IFFALSE 66926
// continue ;
66924: GO 66431
// for j in mc_repair_vehicle [ i ] do
66926: LD_ADDR_VAR 0 3
66930: PUSH
66931: LD_EXP 75
66935: PUSH
66936: LD_VAR 0 2
66940: ARRAY
66941: PUSH
66942: FOR_IN
66943: IFFALSE 67109
// begin if GetClass ( j ) <> 3 then
66945: LD_VAR 0 3
66949: PPUSH
66950: CALL_OW 257
66954: PUSH
66955: LD_INT 3
66957: NONEQUAL
66958: IFFALSE 66999
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
66960: LD_ADDR_EXP 75
66964: PUSH
66965: LD_EXP 75
66969: PPUSH
66970: LD_VAR 0 2
66974: PPUSH
66975: LD_EXP 75
66979: PUSH
66980: LD_VAR 0 2
66984: ARRAY
66985: PUSH
66986: LD_VAR 0 3
66990: DIFF
66991: PPUSH
66992: CALL_OW 1
66996: ST_TO_ADDR
// continue ;
66997: GO 66942
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
66999: LD_VAR 0 3
67003: PPUSH
67004: CALL_OW 311
67008: NOT
67009: PUSH
67010: LD_VAR 0 3
67014: PUSH
67015: LD_EXP 66
67019: PUSH
67020: LD_VAR 0 2
67024: ARRAY
67025: PUSH
67026: LD_INT 1
67028: ARRAY
67029: IN
67030: NOT
67031: AND
67032: PUSH
67033: LD_VAR 0 3
67037: PUSH
67038: LD_EXP 66
67042: PUSH
67043: LD_VAR 0 2
67047: ARRAY
67048: PUSH
67049: LD_INT 2
67051: ARRAY
67052: IN
67053: NOT
67054: AND
67055: IFFALSE 67107
// begin if IsInUnit ( j ) then
67057: LD_VAR 0 3
67061: PPUSH
67062: CALL_OW 310
67066: IFFALSE 67077
// ComExitBuilding ( j ) ;
67068: LD_VAR 0 3
67072: PPUSH
67073: CALL_OW 122
// if not HasTask ( j ) then
67077: LD_VAR 0 3
67081: PPUSH
67082: CALL_OW 314
67086: NOT
67087: IFFALSE 67107
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
67089: LD_VAR 0 3
67093: PPUSH
67094: LD_VAR 0 7
67098: PUSH
67099: LD_INT 1
67101: ARRAY
67102: PPUSH
67103: CALL_OW 189
// end ; end ;
67107: GO 66942
67109: POP
67110: POP
// end ;
67111: GO 66431
67113: POP
67114: POP
// end ;
67115: LD_VAR 0 1
67119: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
67120: LD_INT 0
67122: PPUSH
67123: PPUSH
67124: PPUSH
67125: PPUSH
67126: PPUSH
67127: PPUSH
67128: PPUSH
67129: PPUSH
67130: PPUSH
67131: PPUSH
67132: PPUSH
// if not mc_bases then
67133: LD_EXP 63
67137: NOT
67138: IFFALSE 67142
// exit ;
67140: GO 67944
// for i = 1 to mc_bases do
67142: LD_ADDR_VAR 0 2
67146: PUSH
67147: DOUBLE
67148: LD_INT 1
67150: DEC
67151: ST_TO_ADDR
67152: LD_EXP 63
67156: PUSH
67157: FOR_TO
67158: IFFALSE 67942
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
67160: LD_EXP 91
67164: PUSH
67165: LD_VAR 0 2
67169: ARRAY
67170: NOT
67171: PUSH
67172: LD_EXP 66
67176: PUSH
67177: LD_VAR 0 2
67181: ARRAY
67182: PUSH
67183: LD_INT 1
67185: ARRAY
67186: OR
67187: PUSH
67188: LD_EXP 66
67192: PUSH
67193: LD_VAR 0 2
67197: ARRAY
67198: PUSH
67199: LD_INT 2
67201: ARRAY
67202: OR
67203: PUSH
67204: LD_EXP 89
67208: PUSH
67209: LD_VAR 0 2
67213: ARRAY
67214: PPUSH
67215: LD_INT 1
67217: PPUSH
67218: CALL_OW 325
67222: NOT
67223: OR
67224: PUSH
67225: LD_EXP 86
67229: PUSH
67230: LD_VAR 0 2
67234: ARRAY
67235: OR
67236: IFFALSE 67240
// continue ;
67238: GO 67157
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
67240: LD_ADDR_VAR 0 8
67244: PUSH
67245: LD_EXP 63
67249: PUSH
67250: LD_VAR 0 2
67254: ARRAY
67255: PPUSH
67256: LD_INT 25
67258: PUSH
67259: LD_INT 4
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: PUSH
67266: LD_INT 50
67268: PUSH
67269: EMPTY
67270: LIST
67271: PUSH
67272: LD_INT 3
67274: PUSH
67275: LD_INT 60
67277: PUSH
67278: EMPTY
67279: LIST
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: LIST
67289: PPUSH
67290: CALL_OW 72
67294: PUSH
67295: LD_EXP 67
67299: PUSH
67300: LD_VAR 0 2
67304: ARRAY
67305: DIFF
67306: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
67307: LD_ADDR_VAR 0 9
67311: PUSH
67312: LD_EXP 63
67316: PUSH
67317: LD_VAR 0 2
67321: ARRAY
67322: PPUSH
67323: LD_INT 2
67325: PUSH
67326: LD_INT 30
67328: PUSH
67329: LD_INT 0
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 30
67338: PUSH
67339: LD_INT 1
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: LIST
67350: PPUSH
67351: CALL_OW 72
67355: ST_TO_ADDR
// if not tmp or not dep then
67356: LD_VAR 0 8
67360: NOT
67361: PUSH
67362: LD_VAR 0 9
67366: NOT
67367: OR
67368: IFFALSE 67372
// continue ;
67370: GO 67157
// side := GetSide ( tmp [ 1 ] ) ;
67372: LD_ADDR_VAR 0 11
67376: PUSH
67377: LD_VAR 0 8
67381: PUSH
67382: LD_INT 1
67384: ARRAY
67385: PPUSH
67386: CALL_OW 255
67390: ST_TO_ADDR
// dep := dep [ 1 ] ;
67391: LD_ADDR_VAR 0 9
67395: PUSH
67396: LD_VAR 0 9
67400: PUSH
67401: LD_INT 1
67403: ARRAY
67404: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
67405: LD_ADDR_VAR 0 7
67409: PUSH
67410: LD_EXP 91
67414: PUSH
67415: LD_VAR 0 2
67419: ARRAY
67420: PPUSH
67421: LD_INT 22
67423: PUSH
67424: LD_INT 0
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 25
67433: PUSH
67434: LD_INT 12
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PPUSH
67445: CALL_OW 70
67449: PUSH
67450: LD_INT 22
67452: PUSH
67453: LD_INT 0
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: LD_INT 25
67462: PUSH
67463: LD_INT 12
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 91
67472: PUSH
67473: LD_VAR 0 9
67477: PUSH
67478: LD_INT 20
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: LIST
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: LIST
67490: PPUSH
67491: CALL_OW 69
67495: UNION
67496: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
67497: LD_ADDR_VAR 0 10
67501: PUSH
67502: LD_EXP 91
67506: PUSH
67507: LD_VAR 0 2
67511: ARRAY
67512: PPUSH
67513: LD_INT 81
67515: PUSH
67516: LD_VAR 0 11
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PPUSH
67525: CALL_OW 70
67529: ST_TO_ADDR
// if not apes or danger_at_area then
67530: LD_VAR 0 7
67534: NOT
67535: PUSH
67536: LD_VAR 0 10
67540: OR
67541: IFFALSE 67591
// begin if mc_taming [ i ] then
67543: LD_EXP 94
67547: PUSH
67548: LD_VAR 0 2
67552: ARRAY
67553: IFFALSE 67589
// begin MC_Reset ( i , 121 ) ;
67555: LD_VAR 0 2
67559: PPUSH
67560: LD_INT 121
67562: PPUSH
67563: CALL 53042 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
67567: LD_ADDR_EXP 94
67571: PUSH
67572: LD_EXP 94
67576: PPUSH
67577: LD_VAR 0 2
67581: PPUSH
67582: EMPTY
67583: PPUSH
67584: CALL_OW 1
67588: ST_TO_ADDR
// end ; continue ;
67589: GO 67157
// end ; for j in tmp do
67591: LD_ADDR_VAR 0 3
67595: PUSH
67596: LD_VAR 0 8
67600: PUSH
67601: FOR_IN
67602: IFFALSE 67938
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
67604: LD_VAR 0 3
67608: PUSH
67609: LD_EXP 94
67613: PUSH
67614: LD_VAR 0 2
67618: ARRAY
67619: IN
67620: NOT
67621: PUSH
67622: LD_EXP 94
67626: PUSH
67627: LD_VAR 0 2
67631: ARRAY
67632: PUSH
67633: LD_INT 3
67635: LESS
67636: AND
67637: IFFALSE 67695
// begin SetTag ( j , 121 ) ;
67639: LD_VAR 0 3
67643: PPUSH
67644: LD_INT 121
67646: PPUSH
67647: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
67651: LD_ADDR_EXP 94
67655: PUSH
67656: LD_EXP 94
67660: PPUSH
67661: LD_VAR 0 2
67665: PUSH
67666: LD_EXP 94
67670: PUSH
67671: LD_VAR 0 2
67675: ARRAY
67676: PUSH
67677: LD_INT 1
67679: PLUS
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PPUSH
67685: LD_VAR 0 3
67689: PPUSH
67690: CALL 17454 0 3
67694: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
67695: LD_VAR 0 3
67699: PUSH
67700: LD_EXP 94
67704: PUSH
67705: LD_VAR 0 2
67709: ARRAY
67710: IN
67711: IFFALSE 67936
// begin if GetClass ( j ) <> 4 then
67713: LD_VAR 0 3
67717: PPUSH
67718: CALL_OW 257
67722: PUSH
67723: LD_INT 4
67725: NONEQUAL
67726: IFFALSE 67779
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
67728: LD_ADDR_EXP 94
67732: PUSH
67733: LD_EXP 94
67737: PPUSH
67738: LD_VAR 0 2
67742: PPUSH
67743: LD_EXP 94
67747: PUSH
67748: LD_VAR 0 2
67752: ARRAY
67753: PUSH
67754: LD_VAR 0 3
67758: DIFF
67759: PPUSH
67760: CALL_OW 1
67764: ST_TO_ADDR
// SetTag ( j , 0 ) ;
67765: LD_VAR 0 3
67769: PPUSH
67770: LD_INT 0
67772: PPUSH
67773: CALL_OW 109
// continue ;
67777: GO 67601
// end ; if IsInUnit ( j ) then
67779: LD_VAR 0 3
67783: PPUSH
67784: CALL_OW 310
67788: IFFALSE 67799
// ComExitBuilding ( j ) ;
67790: LD_VAR 0 3
67794: PPUSH
67795: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
67799: LD_ADDR_VAR 0 6
67803: PUSH
67804: LD_VAR 0 7
67808: PPUSH
67809: LD_VAR 0 3
67813: PPUSH
67814: CALL_OW 74
67818: ST_TO_ADDR
// if not ape then
67819: LD_VAR 0 6
67823: NOT
67824: IFFALSE 67828
// break ;
67826: GO 67938
// x := GetX ( ape ) ;
67828: LD_ADDR_VAR 0 4
67832: PUSH
67833: LD_VAR 0 6
67837: PPUSH
67838: CALL_OW 250
67842: ST_TO_ADDR
// y := GetY ( ape ) ;
67843: LD_ADDR_VAR 0 5
67847: PUSH
67848: LD_VAR 0 6
67852: PPUSH
67853: CALL_OW 251
67857: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
67858: LD_VAR 0 4
67862: PPUSH
67863: LD_VAR 0 5
67867: PPUSH
67868: CALL_OW 488
67872: NOT
67873: PUSH
67874: LD_VAR 0 11
67878: PPUSH
67879: LD_VAR 0 4
67883: PPUSH
67884: LD_VAR 0 5
67888: PPUSH
67889: LD_INT 20
67891: PPUSH
67892: CALL 18350 0 4
67896: PUSH
67897: LD_INT 4
67899: ARRAY
67900: OR
67901: IFFALSE 67905
// break ;
67903: GO 67938
// if not HasTask ( j ) then
67905: LD_VAR 0 3
67909: PPUSH
67910: CALL_OW 314
67914: NOT
67915: IFFALSE 67936
// ComTameXY ( j , x , y ) ;
67917: LD_VAR 0 3
67921: PPUSH
67922: LD_VAR 0 4
67926: PPUSH
67927: LD_VAR 0 5
67931: PPUSH
67932: CALL_OW 131
// end ; end ;
67936: GO 67601
67938: POP
67939: POP
// end ;
67940: GO 67157
67942: POP
67943: POP
// end ;
67944: LD_VAR 0 1
67948: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
67949: LD_INT 0
67951: PPUSH
67952: PPUSH
67953: PPUSH
67954: PPUSH
67955: PPUSH
67956: PPUSH
67957: PPUSH
67958: PPUSH
// if not mc_bases then
67959: LD_EXP 63
67963: NOT
67964: IFFALSE 67968
// exit ;
67966: GO 68594
// for i = 1 to mc_bases do
67968: LD_ADDR_VAR 0 2
67972: PUSH
67973: DOUBLE
67974: LD_INT 1
67976: DEC
67977: ST_TO_ADDR
67978: LD_EXP 63
67982: PUSH
67983: FOR_TO
67984: IFFALSE 68592
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
67986: LD_EXP 92
67990: PUSH
67991: LD_VAR 0 2
67995: ARRAY
67996: NOT
67997: PUSH
67998: LD_EXP 92
68002: PUSH
68003: LD_VAR 0 2
68007: ARRAY
68008: PPUSH
68009: LD_INT 25
68011: PUSH
68012: LD_INT 12
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PPUSH
68019: CALL_OW 72
68023: NOT
68024: OR
68025: IFFALSE 68029
// continue ;
68027: GO 67983
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
68029: LD_ADDR_VAR 0 5
68033: PUSH
68034: LD_EXP 92
68038: PUSH
68039: LD_VAR 0 2
68043: ARRAY
68044: PUSH
68045: LD_INT 1
68047: ARRAY
68048: PPUSH
68049: CALL_OW 255
68053: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
68054: LD_VAR 0 5
68058: PPUSH
68059: LD_INT 2
68061: PPUSH
68062: CALL_OW 325
68066: IFFALSE 68319
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
68068: LD_ADDR_VAR 0 4
68072: PUSH
68073: LD_EXP 92
68077: PUSH
68078: LD_VAR 0 2
68082: ARRAY
68083: PPUSH
68084: LD_INT 25
68086: PUSH
68087: LD_INT 16
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PPUSH
68094: CALL_OW 72
68098: ST_TO_ADDR
// if tmp < 6 then
68099: LD_VAR 0 4
68103: PUSH
68104: LD_INT 6
68106: LESS
68107: IFFALSE 68319
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
68109: LD_ADDR_VAR 0 6
68113: PUSH
68114: LD_EXP 63
68118: PUSH
68119: LD_VAR 0 2
68123: ARRAY
68124: PPUSH
68125: LD_INT 2
68127: PUSH
68128: LD_INT 30
68130: PUSH
68131: LD_INT 0
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 30
68140: PUSH
68141: LD_INT 1
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: LIST
68152: PPUSH
68153: CALL_OW 72
68157: ST_TO_ADDR
// if depot then
68158: LD_VAR 0 6
68162: IFFALSE 68319
// begin selected := 0 ;
68164: LD_ADDR_VAR 0 7
68168: PUSH
68169: LD_INT 0
68171: ST_TO_ADDR
// for j in depot do
68172: LD_ADDR_VAR 0 3
68176: PUSH
68177: LD_VAR 0 6
68181: PUSH
68182: FOR_IN
68183: IFFALSE 68214
// begin if UnitsInside ( j ) < 6 then
68185: LD_VAR 0 3
68189: PPUSH
68190: CALL_OW 313
68194: PUSH
68195: LD_INT 6
68197: LESS
68198: IFFALSE 68212
// begin selected := j ;
68200: LD_ADDR_VAR 0 7
68204: PUSH
68205: LD_VAR 0 3
68209: ST_TO_ADDR
// break ;
68210: GO 68214
// end ; end ;
68212: GO 68182
68214: POP
68215: POP
// if selected then
68216: LD_VAR 0 7
68220: IFFALSE 68319
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
68222: LD_ADDR_VAR 0 3
68226: PUSH
68227: LD_EXP 92
68231: PUSH
68232: LD_VAR 0 2
68236: ARRAY
68237: PPUSH
68238: LD_INT 25
68240: PUSH
68241: LD_INT 12
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: PPUSH
68248: CALL_OW 72
68252: PUSH
68253: FOR_IN
68254: IFFALSE 68317
// if not HasTask ( j ) then
68256: LD_VAR 0 3
68260: PPUSH
68261: CALL_OW 314
68265: NOT
68266: IFFALSE 68315
// begin if not IsInUnit ( j ) then
68268: LD_VAR 0 3
68272: PPUSH
68273: CALL_OW 310
68277: NOT
68278: IFFALSE 68294
// ComEnterUnit ( j , selected ) ;
68280: LD_VAR 0 3
68284: PPUSH
68285: LD_VAR 0 7
68289: PPUSH
68290: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
68294: LD_VAR 0 3
68298: PPUSH
68299: LD_INT 16
68301: PPUSH
68302: CALL_OW 183
// AddComExitBuilding ( j ) ;
68306: LD_VAR 0 3
68310: PPUSH
68311: CALL_OW 182
// end ;
68315: GO 68253
68317: POP
68318: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
68319: LD_VAR 0 5
68323: PPUSH
68324: LD_INT 11
68326: PPUSH
68327: CALL_OW 325
68331: IFFALSE 68590
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
68333: LD_ADDR_VAR 0 4
68337: PUSH
68338: LD_EXP 92
68342: PUSH
68343: LD_VAR 0 2
68347: ARRAY
68348: PPUSH
68349: LD_INT 25
68351: PUSH
68352: LD_INT 16
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PPUSH
68359: CALL_OW 72
68363: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
68364: LD_VAR 0 4
68368: PUSH
68369: LD_INT 6
68371: GREATEREQUAL
68372: PUSH
68373: LD_VAR 0 5
68377: PPUSH
68378: LD_INT 2
68380: PPUSH
68381: CALL_OW 325
68385: NOT
68386: OR
68387: IFFALSE 68590
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
68389: LD_ADDR_VAR 0 8
68393: PUSH
68394: LD_EXP 63
68398: PUSH
68399: LD_VAR 0 2
68403: ARRAY
68404: PPUSH
68405: LD_INT 2
68407: PUSH
68408: LD_INT 30
68410: PUSH
68411: LD_INT 4
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PUSH
68418: LD_INT 30
68420: PUSH
68421: LD_INT 5
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: LIST
68432: PPUSH
68433: CALL_OW 72
68437: ST_TO_ADDR
// if barracks then
68438: LD_VAR 0 8
68442: IFFALSE 68590
// begin selected := 0 ;
68444: LD_ADDR_VAR 0 7
68448: PUSH
68449: LD_INT 0
68451: ST_TO_ADDR
// for j in barracks do
68452: LD_ADDR_VAR 0 3
68456: PUSH
68457: LD_VAR 0 8
68461: PUSH
68462: FOR_IN
68463: IFFALSE 68494
// begin if UnitsInside ( j ) < 6 then
68465: LD_VAR 0 3
68469: PPUSH
68470: CALL_OW 313
68474: PUSH
68475: LD_INT 6
68477: LESS
68478: IFFALSE 68492
// begin selected := j ;
68480: LD_ADDR_VAR 0 7
68484: PUSH
68485: LD_VAR 0 3
68489: ST_TO_ADDR
// break ;
68490: GO 68494
// end ; end ;
68492: GO 68462
68494: POP
68495: POP
// if selected then
68496: LD_VAR 0 7
68500: IFFALSE 68590
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
68502: LD_ADDR_VAR 0 3
68506: PUSH
68507: LD_EXP 92
68511: PUSH
68512: LD_VAR 0 2
68516: ARRAY
68517: PPUSH
68518: LD_INT 25
68520: PUSH
68521: LD_INT 12
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PPUSH
68528: CALL_OW 72
68532: PUSH
68533: FOR_IN
68534: IFFALSE 68588
// if not IsInUnit ( j ) and not HasTask ( j ) then
68536: LD_VAR 0 3
68540: PPUSH
68541: CALL_OW 310
68545: NOT
68546: PUSH
68547: LD_VAR 0 3
68551: PPUSH
68552: CALL_OW 314
68556: NOT
68557: AND
68558: IFFALSE 68586
// begin ComEnterUnit ( j , selected ) ;
68560: LD_VAR 0 3
68564: PPUSH
68565: LD_VAR 0 7
68569: PPUSH
68570: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
68574: LD_VAR 0 3
68578: PPUSH
68579: LD_INT 15
68581: PPUSH
68582: CALL_OW 183
// end ;
68586: GO 68533
68588: POP
68589: POP
// end ; end ; end ; end ; end ;
68590: GO 67983
68592: POP
68593: POP
// end ;
68594: LD_VAR 0 1
68598: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
68599: LD_INT 0
68601: PPUSH
68602: PPUSH
68603: PPUSH
68604: PPUSH
// if not mc_bases then
68605: LD_EXP 63
68609: NOT
68610: IFFALSE 68614
// exit ;
68612: GO 68792
// for i = 1 to mc_bases do
68614: LD_ADDR_VAR 0 2
68618: PUSH
68619: DOUBLE
68620: LD_INT 1
68622: DEC
68623: ST_TO_ADDR
68624: LD_EXP 63
68628: PUSH
68629: FOR_TO
68630: IFFALSE 68790
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
68632: LD_ADDR_VAR 0 4
68636: PUSH
68637: LD_EXP 63
68641: PUSH
68642: LD_VAR 0 2
68646: ARRAY
68647: PPUSH
68648: LD_INT 25
68650: PUSH
68651: LD_INT 9
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PPUSH
68658: CALL_OW 72
68662: ST_TO_ADDR
// if not tmp then
68663: LD_VAR 0 4
68667: NOT
68668: IFFALSE 68672
// continue ;
68670: GO 68629
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
68672: LD_EXP 89
68676: PUSH
68677: LD_VAR 0 2
68681: ARRAY
68682: PPUSH
68683: LD_INT 29
68685: PPUSH
68686: CALL_OW 325
68690: NOT
68691: PUSH
68692: LD_EXP 89
68696: PUSH
68697: LD_VAR 0 2
68701: ARRAY
68702: PPUSH
68703: LD_INT 28
68705: PPUSH
68706: CALL_OW 325
68710: NOT
68711: AND
68712: IFFALSE 68716
// continue ;
68714: GO 68629
// for j in tmp do
68716: LD_ADDR_VAR 0 3
68720: PUSH
68721: LD_VAR 0 4
68725: PUSH
68726: FOR_IN
68727: IFFALSE 68786
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
68729: LD_VAR 0 3
68733: PUSH
68734: LD_EXP 66
68738: PUSH
68739: LD_VAR 0 2
68743: ARRAY
68744: PUSH
68745: LD_INT 1
68747: ARRAY
68748: IN
68749: NOT
68750: PUSH
68751: LD_VAR 0 3
68755: PUSH
68756: LD_EXP 66
68760: PUSH
68761: LD_VAR 0 2
68765: ARRAY
68766: PUSH
68767: LD_INT 2
68769: ARRAY
68770: IN
68771: NOT
68772: AND
68773: IFFALSE 68784
// ComSpaceTimeShoot ( j ) ;
68775: LD_VAR 0 3
68779: PPUSH
68780: CALL 13451 0 1
68784: GO 68726
68786: POP
68787: POP
// end ;
68788: GO 68629
68790: POP
68791: POP
// end ;
68792: LD_VAR 0 1
68796: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
68797: LD_INT 0
68799: PPUSH
68800: PPUSH
68801: PPUSH
68802: PPUSH
68803: PPUSH
68804: PPUSH
68805: PPUSH
68806: PPUSH
68807: PPUSH
// if not mc_bases then
68808: LD_EXP 63
68812: NOT
68813: IFFALSE 68817
// exit ;
68815: GO 69439
// for i = 1 to mc_bases do
68817: LD_ADDR_VAR 0 2
68821: PUSH
68822: DOUBLE
68823: LD_INT 1
68825: DEC
68826: ST_TO_ADDR
68827: LD_EXP 63
68831: PUSH
68832: FOR_TO
68833: IFFALSE 69437
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
68835: LD_EXP 98
68839: PUSH
68840: LD_VAR 0 2
68844: ARRAY
68845: NOT
68846: PUSH
68847: LD_INT 38
68849: PPUSH
68850: LD_EXP 89
68854: PUSH
68855: LD_VAR 0 2
68859: ARRAY
68860: PPUSH
68861: CALL_OW 321
68865: PUSH
68866: LD_INT 2
68868: NONEQUAL
68869: OR
68870: IFFALSE 68874
// continue ;
68872: GO 68832
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
68874: LD_ADDR_VAR 0 8
68878: PUSH
68879: LD_EXP 63
68883: PUSH
68884: LD_VAR 0 2
68888: ARRAY
68889: PPUSH
68890: LD_INT 30
68892: PUSH
68893: LD_INT 34
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PPUSH
68900: CALL_OW 72
68904: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
68905: LD_ADDR_VAR 0 9
68909: PUSH
68910: LD_EXP 63
68914: PUSH
68915: LD_VAR 0 2
68919: ARRAY
68920: PPUSH
68921: LD_INT 25
68923: PUSH
68924: LD_INT 4
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: PPUSH
68931: CALL_OW 72
68935: PPUSH
68936: LD_INT 0
68938: PPUSH
68939: CALL 46015 0 2
68943: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
68944: LD_VAR 0 9
68948: NOT
68949: PUSH
68950: LD_VAR 0 8
68954: NOT
68955: OR
68956: PUSH
68957: LD_EXP 63
68961: PUSH
68962: LD_VAR 0 2
68966: ARRAY
68967: PPUSH
68968: LD_INT 124
68970: PPUSH
68971: CALL 46015 0 2
68975: OR
68976: IFFALSE 68980
// continue ;
68978: GO 68832
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
68980: LD_EXP 99
68984: PUSH
68985: LD_VAR 0 2
68989: ARRAY
68990: PUSH
68991: LD_EXP 98
68995: PUSH
68996: LD_VAR 0 2
69000: ARRAY
69001: LESS
69002: PUSH
69003: LD_EXP 99
69007: PUSH
69008: LD_VAR 0 2
69012: ARRAY
69013: PUSH
69014: LD_VAR 0 8
69018: LESS
69019: AND
69020: IFFALSE 69435
// begin tmp := sci [ 1 ] ;
69022: LD_ADDR_VAR 0 7
69026: PUSH
69027: LD_VAR 0 9
69031: PUSH
69032: LD_INT 1
69034: ARRAY
69035: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
69036: LD_VAR 0 7
69040: PPUSH
69041: LD_INT 124
69043: PPUSH
69044: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
69048: LD_ADDR_VAR 0 3
69052: PUSH
69053: DOUBLE
69054: LD_EXP 98
69058: PUSH
69059: LD_VAR 0 2
69063: ARRAY
69064: INC
69065: ST_TO_ADDR
69066: LD_EXP 98
69070: PUSH
69071: LD_VAR 0 2
69075: ARRAY
69076: PUSH
69077: FOR_DOWNTO
69078: IFFALSE 69421
// begin if IsInUnit ( tmp ) then
69080: LD_VAR 0 7
69084: PPUSH
69085: CALL_OW 310
69089: IFFALSE 69100
// ComExitBuilding ( tmp ) ;
69091: LD_VAR 0 7
69095: PPUSH
69096: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
69100: LD_INT 35
69102: PPUSH
69103: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
69107: LD_VAR 0 7
69111: PPUSH
69112: CALL_OW 310
69116: NOT
69117: PUSH
69118: LD_VAR 0 7
69122: PPUSH
69123: CALL_OW 314
69127: NOT
69128: AND
69129: IFFALSE 69100
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
69131: LD_ADDR_VAR 0 6
69135: PUSH
69136: LD_VAR 0 7
69140: PPUSH
69141: CALL_OW 250
69145: PUSH
69146: LD_VAR 0 7
69150: PPUSH
69151: CALL_OW 251
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69160: LD_INT 35
69162: PPUSH
69163: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
69167: LD_ADDR_VAR 0 4
69171: PUSH
69172: LD_EXP 98
69176: PUSH
69177: LD_VAR 0 2
69181: ARRAY
69182: PUSH
69183: LD_VAR 0 3
69187: ARRAY
69188: PUSH
69189: LD_INT 1
69191: ARRAY
69192: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
69193: LD_ADDR_VAR 0 5
69197: PUSH
69198: LD_EXP 98
69202: PUSH
69203: LD_VAR 0 2
69207: ARRAY
69208: PUSH
69209: LD_VAR 0 3
69213: ARRAY
69214: PUSH
69215: LD_INT 2
69217: ARRAY
69218: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
69219: LD_VAR 0 7
69223: PPUSH
69224: LD_INT 10
69226: PPUSH
69227: CALL 20047 0 2
69231: PUSH
69232: LD_INT 4
69234: ARRAY
69235: IFFALSE 69273
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
69237: LD_VAR 0 7
69241: PPUSH
69242: LD_VAR 0 6
69246: PUSH
69247: LD_INT 1
69249: ARRAY
69250: PPUSH
69251: LD_VAR 0 6
69255: PUSH
69256: LD_INT 2
69258: ARRAY
69259: PPUSH
69260: CALL_OW 111
// wait ( 0 0$10 ) ;
69264: LD_INT 350
69266: PPUSH
69267: CALL_OW 67
// end else
69271: GO 69299
// begin ComMoveXY ( tmp , x , y ) ;
69273: LD_VAR 0 7
69277: PPUSH
69278: LD_VAR 0 4
69282: PPUSH
69283: LD_VAR 0 5
69287: PPUSH
69288: CALL_OW 111
// wait ( 0 0$3 ) ;
69292: LD_INT 105
69294: PPUSH
69295: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
69299: LD_VAR 0 7
69303: PPUSH
69304: LD_VAR 0 4
69308: PPUSH
69309: LD_VAR 0 5
69313: PPUSH
69314: CALL_OW 307
69318: IFFALSE 69160
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
69320: LD_VAR 0 7
69324: PPUSH
69325: LD_VAR 0 4
69329: PPUSH
69330: LD_VAR 0 5
69334: PPUSH
69335: LD_VAR 0 8
69339: PUSH
69340: LD_VAR 0 3
69344: ARRAY
69345: PPUSH
69346: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
69350: LD_INT 35
69352: PPUSH
69353: CALL_OW 67
// until not HasTask ( tmp ) ;
69357: LD_VAR 0 7
69361: PPUSH
69362: CALL_OW 314
69366: NOT
69367: IFFALSE 69350
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
69369: LD_ADDR_EXP 99
69373: PUSH
69374: LD_EXP 99
69378: PPUSH
69379: LD_VAR 0 2
69383: PUSH
69384: LD_EXP 99
69388: PUSH
69389: LD_VAR 0 2
69393: ARRAY
69394: PUSH
69395: LD_INT 1
69397: PLUS
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: PPUSH
69403: LD_VAR 0 8
69407: PUSH
69408: LD_VAR 0 3
69412: ARRAY
69413: PPUSH
69414: CALL 17454 0 3
69418: ST_TO_ADDR
// end ;
69419: GO 69077
69421: POP
69422: POP
// MC_Reset ( i , 124 ) ;
69423: LD_VAR 0 2
69427: PPUSH
69428: LD_INT 124
69430: PPUSH
69431: CALL 53042 0 2
// end ; end ;
69435: GO 68832
69437: POP
69438: POP
// end ;
69439: LD_VAR 0 1
69443: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
69444: LD_INT 0
69446: PPUSH
69447: PPUSH
69448: PPUSH
// if not mc_bases then
69449: LD_EXP 63
69453: NOT
69454: IFFALSE 69458
// exit ;
69456: GO 70064
// for i = 1 to mc_bases do
69458: LD_ADDR_VAR 0 2
69462: PUSH
69463: DOUBLE
69464: LD_INT 1
69466: DEC
69467: ST_TO_ADDR
69468: LD_EXP 63
69472: PUSH
69473: FOR_TO
69474: IFFALSE 70062
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
69476: LD_ADDR_VAR 0 3
69480: PUSH
69481: LD_EXP 63
69485: PUSH
69486: LD_VAR 0 2
69490: ARRAY
69491: PPUSH
69492: LD_INT 25
69494: PUSH
69495: LD_INT 4
69497: PUSH
69498: EMPTY
69499: LIST
69500: LIST
69501: PPUSH
69502: CALL_OW 72
69506: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
69507: LD_VAR 0 3
69511: NOT
69512: PUSH
69513: LD_EXP 100
69517: PUSH
69518: LD_VAR 0 2
69522: ARRAY
69523: NOT
69524: OR
69525: PUSH
69526: LD_EXP 63
69530: PUSH
69531: LD_VAR 0 2
69535: ARRAY
69536: PPUSH
69537: LD_INT 2
69539: PUSH
69540: LD_INT 30
69542: PUSH
69543: LD_INT 0
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: PUSH
69550: LD_INT 30
69552: PUSH
69553: LD_INT 1
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: LIST
69564: PPUSH
69565: CALL_OW 72
69569: NOT
69570: OR
69571: IFFALSE 69621
// begin if mc_deposits_finder [ i ] then
69573: LD_EXP 101
69577: PUSH
69578: LD_VAR 0 2
69582: ARRAY
69583: IFFALSE 69619
// begin MC_Reset ( i , 125 ) ;
69585: LD_VAR 0 2
69589: PPUSH
69590: LD_INT 125
69592: PPUSH
69593: CALL 53042 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
69597: LD_ADDR_EXP 101
69601: PUSH
69602: LD_EXP 101
69606: PPUSH
69607: LD_VAR 0 2
69611: PPUSH
69612: EMPTY
69613: PPUSH
69614: CALL_OW 1
69618: ST_TO_ADDR
// end ; continue ;
69619: GO 69473
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
69621: LD_EXP 100
69625: PUSH
69626: LD_VAR 0 2
69630: ARRAY
69631: PUSH
69632: LD_INT 1
69634: ARRAY
69635: PUSH
69636: LD_INT 3
69638: ARRAY
69639: PUSH
69640: LD_INT 1
69642: EQUAL
69643: PUSH
69644: LD_INT 20
69646: PPUSH
69647: LD_EXP 89
69651: PUSH
69652: LD_VAR 0 2
69656: ARRAY
69657: PPUSH
69658: CALL_OW 321
69662: PUSH
69663: LD_INT 2
69665: NONEQUAL
69666: AND
69667: IFFALSE 69717
// begin if mc_deposits_finder [ i ] then
69669: LD_EXP 101
69673: PUSH
69674: LD_VAR 0 2
69678: ARRAY
69679: IFFALSE 69715
// begin MC_Reset ( i , 125 ) ;
69681: LD_VAR 0 2
69685: PPUSH
69686: LD_INT 125
69688: PPUSH
69689: CALL 53042 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
69693: LD_ADDR_EXP 101
69697: PUSH
69698: LD_EXP 101
69702: PPUSH
69703: LD_VAR 0 2
69707: PPUSH
69708: EMPTY
69709: PPUSH
69710: CALL_OW 1
69714: ST_TO_ADDR
// end ; continue ;
69715: GO 69473
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
69717: LD_EXP 100
69721: PUSH
69722: LD_VAR 0 2
69726: ARRAY
69727: PUSH
69728: LD_INT 1
69730: ARRAY
69731: PUSH
69732: LD_INT 1
69734: ARRAY
69735: PPUSH
69736: LD_EXP 100
69740: PUSH
69741: LD_VAR 0 2
69745: ARRAY
69746: PUSH
69747: LD_INT 1
69749: ARRAY
69750: PUSH
69751: LD_INT 2
69753: ARRAY
69754: PPUSH
69755: LD_EXP 89
69759: PUSH
69760: LD_VAR 0 2
69764: ARRAY
69765: PPUSH
69766: CALL_OW 440
69770: IFFALSE 69813
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
69772: LD_ADDR_EXP 100
69776: PUSH
69777: LD_EXP 100
69781: PPUSH
69782: LD_VAR 0 2
69786: PPUSH
69787: LD_EXP 100
69791: PUSH
69792: LD_VAR 0 2
69796: ARRAY
69797: PPUSH
69798: LD_INT 1
69800: PPUSH
69801: CALL_OW 3
69805: PPUSH
69806: CALL_OW 1
69810: ST_TO_ADDR
69811: GO 70060
// begin if not mc_deposits_finder [ i ] then
69813: LD_EXP 101
69817: PUSH
69818: LD_VAR 0 2
69822: ARRAY
69823: NOT
69824: IFFALSE 69876
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
69826: LD_ADDR_EXP 101
69830: PUSH
69831: LD_EXP 101
69835: PPUSH
69836: LD_VAR 0 2
69840: PPUSH
69841: LD_VAR 0 3
69845: PUSH
69846: LD_INT 1
69848: ARRAY
69849: PUSH
69850: EMPTY
69851: LIST
69852: PPUSH
69853: CALL_OW 1
69857: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
69858: LD_VAR 0 3
69862: PUSH
69863: LD_INT 1
69865: ARRAY
69866: PPUSH
69867: LD_INT 125
69869: PPUSH
69870: CALL_OW 109
// end else
69874: GO 70060
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
69876: LD_EXP 101
69880: PUSH
69881: LD_VAR 0 2
69885: ARRAY
69886: PUSH
69887: LD_INT 1
69889: ARRAY
69890: PPUSH
69891: CALL_OW 310
69895: IFFALSE 69918
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
69897: LD_EXP 101
69901: PUSH
69902: LD_VAR 0 2
69906: ARRAY
69907: PUSH
69908: LD_INT 1
69910: ARRAY
69911: PPUSH
69912: CALL_OW 122
69916: GO 70060
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
69918: LD_EXP 101
69922: PUSH
69923: LD_VAR 0 2
69927: ARRAY
69928: PUSH
69929: LD_INT 1
69931: ARRAY
69932: PPUSH
69933: CALL_OW 314
69937: NOT
69938: PUSH
69939: LD_EXP 101
69943: PUSH
69944: LD_VAR 0 2
69948: ARRAY
69949: PUSH
69950: LD_INT 1
69952: ARRAY
69953: PPUSH
69954: LD_EXP 100
69958: PUSH
69959: LD_VAR 0 2
69963: ARRAY
69964: PUSH
69965: LD_INT 1
69967: ARRAY
69968: PUSH
69969: LD_INT 1
69971: ARRAY
69972: PPUSH
69973: LD_EXP 100
69977: PUSH
69978: LD_VAR 0 2
69982: ARRAY
69983: PUSH
69984: LD_INT 1
69986: ARRAY
69987: PUSH
69988: LD_INT 2
69990: ARRAY
69991: PPUSH
69992: CALL_OW 297
69996: PUSH
69997: LD_INT 6
69999: GREATER
70000: AND
70001: IFFALSE 70060
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
70003: LD_EXP 101
70007: PUSH
70008: LD_VAR 0 2
70012: ARRAY
70013: PUSH
70014: LD_INT 1
70016: ARRAY
70017: PPUSH
70018: LD_EXP 100
70022: PUSH
70023: LD_VAR 0 2
70027: ARRAY
70028: PUSH
70029: LD_INT 1
70031: ARRAY
70032: PUSH
70033: LD_INT 1
70035: ARRAY
70036: PPUSH
70037: LD_EXP 100
70041: PUSH
70042: LD_VAR 0 2
70046: ARRAY
70047: PUSH
70048: LD_INT 1
70050: ARRAY
70051: PUSH
70052: LD_INT 2
70054: ARRAY
70055: PPUSH
70056: CALL_OW 111
// end ; end ; end ;
70060: GO 69473
70062: POP
70063: POP
// end ;
70064: LD_VAR 0 1
70068: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
70069: LD_INT 0
70071: PPUSH
70072: PPUSH
70073: PPUSH
70074: PPUSH
70075: PPUSH
70076: PPUSH
70077: PPUSH
70078: PPUSH
70079: PPUSH
70080: PPUSH
70081: PPUSH
// if not mc_bases then
70082: LD_EXP 63
70086: NOT
70087: IFFALSE 70091
// exit ;
70089: GO 71031
// for i = 1 to mc_bases do
70091: LD_ADDR_VAR 0 2
70095: PUSH
70096: DOUBLE
70097: LD_INT 1
70099: DEC
70100: ST_TO_ADDR
70101: LD_EXP 63
70105: PUSH
70106: FOR_TO
70107: IFFALSE 71029
// begin if not mc_bases [ i ] or mc_scan [ i ] then
70109: LD_EXP 63
70113: PUSH
70114: LD_VAR 0 2
70118: ARRAY
70119: NOT
70120: PUSH
70121: LD_EXP 86
70125: PUSH
70126: LD_VAR 0 2
70130: ARRAY
70131: OR
70132: IFFALSE 70136
// continue ;
70134: GO 70106
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
70136: LD_ADDR_VAR 0 7
70140: PUSH
70141: LD_EXP 63
70145: PUSH
70146: LD_VAR 0 2
70150: ARRAY
70151: PUSH
70152: LD_INT 1
70154: ARRAY
70155: PPUSH
70156: CALL_OW 248
70160: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
70161: LD_VAR 0 7
70165: PUSH
70166: LD_INT 3
70168: EQUAL
70169: PUSH
70170: LD_EXP 82
70174: PUSH
70175: LD_VAR 0 2
70179: ARRAY
70180: PUSH
70181: LD_EXP 85
70185: PUSH
70186: LD_VAR 0 2
70190: ARRAY
70191: UNION
70192: PPUSH
70193: LD_INT 33
70195: PUSH
70196: LD_INT 2
70198: PUSH
70199: EMPTY
70200: LIST
70201: LIST
70202: PPUSH
70203: CALL_OW 72
70207: NOT
70208: OR
70209: IFFALSE 70213
// continue ;
70211: GO 70106
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
70213: LD_ADDR_VAR 0 9
70217: PUSH
70218: LD_EXP 63
70222: PUSH
70223: LD_VAR 0 2
70227: ARRAY
70228: PPUSH
70229: LD_INT 30
70231: PUSH
70232: LD_INT 36
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: PPUSH
70239: CALL_OW 72
70243: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
70244: LD_ADDR_VAR 0 10
70248: PUSH
70249: LD_EXP 82
70253: PUSH
70254: LD_VAR 0 2
70258: ARRAY
70259: PPUSH
70260: LD_INT 34
70262: PUSH
70263: LD_INT 31
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PPUSH
70270: CALL_OW 72
70274: ST_TO_ADDR
// if not cts and not mcts then
70275: LD_VAR 0 9
70279: NOT
70280: PUSH
70281: LD_VAR 0 10
70285: NOT
70286: AND
70287: IFFALSE 70291
// continue ;
70289: GO 70106
// x := cts ;
70291: LD_ADDR_VAR 0 11
70295: PUSH
70296: LD_VAR 0 9
70300: ST_TO_ADDR
// if not x then
70301: LD_VAR 0 11
70305: NOT
70306: IFFALSE 70318
// x := mcts ;
70308: LD_ADDR_VAR 0 11
70312: PUSH
70313: LD_VAR 0 10
70317: ST_TO_ADDR
// if not x then
70318: LD_VAR 0 11
70322: NOT
70323: IFFALSE 70327
// continue ;
70325: GO 70106
// if mc_remote_driver [ i ] then
70327: LD_EXP 103
70331: PUSH
70332: LD_VAR 0 2
70336: ARRAY
70337: IFFALSE 70724
// for j in mc_remote_driver [ i ] do
70339: LD_ADDR_VAR 0 3
70343: PUSH
70344: LD_EXP 103
70348: PUSH
70349: LD_VAR 0 2
70353: ARRAY
70354: PUSH
70355: FOR_IN
70356: IFFALSE 70722
// begin if GetClass ( j ) <> 3 then
70358: LD_VAR 0 3
70362: PPUSH
70363: CALL_OW 257
70367: PUSH
70368: LD_INT 3
70370: NONEQUAL
70371: IFFALSE 70424
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
70373: LD_ADDR_EXP 103
70377: PUSH
70378: LD_EXP 103
70382: PPUSH
70383: LD_VAR 0 2
70387: PPUSH
70388: LD_EXP 103
70392: PUSH
70393: LD_VAR 0 2
70397: ARRAY
70398: PUSH
70399: LD_VAR 0 3
70403: DIFF
70404: PPUSH
70405: CALL_OW 1
70409: ST_TO_ADDR
// SetTag ( j , 0 ) ;
70410: LD_VAR 0 3
70414: PPUSH
70415: LD_INT 0
70417: PPUSH
70418: CALL_OW 109
// continue ;
70422: GO 70355
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
70424: LD_EXP 82
70428: PUSH
70429: LD_VAR 0 2
70433: ARRAY
70434: PPUSH
70435: LD_INT 34
70437: PUSH
70438: LD_INT 31
70440: PUSH
70441: EMPTY
70442: LIST
70443: LIST
70444: PUSH
70445: LD_INT 58
70447: PUSH
70448: EMPTY
70449: LIST
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: PPUSH
70455: CALL_OW 72
70459: PUSH
70460: LD_VAR 0 3
70464: PPUSH
70465: CALL 46103 0 1
70469: NOT
70470: AND
70471: IFFALSE 70542
// begin if IsInUnit ( j ) then
70473: LD_VAR 0 3
70477: PPUSH
70478: CALL_OW 310
70482: IFFALSE 70493
// ComExitBuilding ( j ) ;
70484: LD_VAR 0 3
70488: PPUSH
70489: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
70493: LD_VAR 0 3
70497: PPUSH
70498: LD_EXP 82
70502: PUSH
70503: LD_VAR 0 2
70507: ARRAY
70508: PPUSH
70509: LD_INT 34
70511: PUSH
70512: LD_INT 31
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: PUSH
70519: LD_INT 58
70521: PUSH
70522: EMPTY
70523: LIST
70524: PUSH
70525: EMPTY
70526: LIST
70527: LIST
70528: PPUSH
70529: CALL_OW 72
70533: PUSH
70534: LD_INT 1
70536: ARRAY
70537: PPUSH
70538: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
70542: LD_VAR 0 3
70546: PPUSH
70547: CALL_OW 310
70551: NOT
70552: PUSH
70553: LD_VAR 0 3
70557: PPUSH
70558: CALL_OW 310
70562: PPUSH
70563: CALL_OW 266
70567: PUSH
70568: LD_INT 36
70570: NONEQUAL
70571: PUSH
70572: LD_VAR 0 3
70576: PPUSH
70577: CALL 46103 0 1
70581: NOT
70582: AND
70583: OR
70584: IFFALSE 70720
// begin if IsInUnit ( j ) then
70586: LD_VAR 0 3
70590: PPUSH
70591: CALL_OW 310
70595: IFFALSE 70606
// ComExitBuilding ( j ) ;
70597: LD_VAR 0 3
70601: PPUSH
70602: CALL_OW 122
// ct := 0 ;
70606: LD_ADDR_VAR 0 8
70610: PUSH
70611: LD_INT 0
70613: ST_TO_ADDR
// for k in x do
70614: LD_ADDR_VAR 0 4
70618: PUSH
70619: LD_VAR 0 11
70623: PUSH
70624: FOR_IN
70625: IFFALSE 70698
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
70627: LD_VAR 0 4
70631: PPUSH
70632: CALL_OW 264
70636: PUSH
70637: LD_INT 31
70639: EQUAL
70640: PUSH
70641: LD_VAR 0 4
70645: PPUSH
70646: CALL_OW 311
70650: NOT
70651: AND
70652: PUSH
70653: LD_VAR 0 4
70657: PPUSH
70658: CALL_OW 266
70662: PUSH
70663: LD_INT 36
70665: EQUAL
70666: PUSH
70667: LD_VAR 0 4
70671: PPUSH
70672: CALL_OW 313
70676: PUSH
70677: LD_INT 3
70679: LESS
70680: AND
70681: OR
70682: IFFALSE 70696
// begin ct := k ;
70684: LD_ADDR_VAR 0 8
70688: PUSH
70689: LD_VAR 0 4
70693: ST_TO_ADDR
// break ;
70694: GO 70698
// end ;
70696: GO 70624
70698: POP
70699: POP
// if ct then
70700: LD_VAR 0 8
70704: IFFALSE 70720
// ComEnterUnit ( j , ct ) ;
70706: LD_VAR 0 3
70710: PPUSH
70711: LD_VAR 0 8
70715: PPUSH
70716: CALL_OW 120
// end ; end ;
70720: GO 70355
70722: POP
70723: POP
// places := 0 ;
70724: LD_ADDR_VAR 0 5
70728: PUSH
70729: LD_INT 0
70731: ST_TO_ADDR
// for j = 1 to x do
70732: LD_ADDR_VAR 0 3
70736: PUSH
70737: DOUBLE
70738: LD_INT 1
70740: DEC
70741: ST_TO_ADDR
70742: LD_VAR 0 11
70746: PUSH
70747: FOR_TO
70748: IFFALSE 70824
// if GetWeapon ( x [ j ] ) = ar_control_tower then
70750: LD_VAR 0 11
70754: PUSH
70755: LD_VAR 0 3
70759: ARRAY
70760: PPUSH
70761: CALL_OW 264
70765: PUSH
70766: LD_INT 31
70768: EQUAL
70769: IFFALSE 70787
// places := places + 1 else
70771: LD_ADDR_VAR 0 5
70775: PUSH
70776: LD_VAR 0 5
70780: PUSH
70781: LD_INT 1
70783: PLUS
70784: ST_TO_ADDR
70785: GO 70822
// if GetBType ( x [ j ] ) = b_control_tower then
70787: LD_VAR 0 11
70791: PUSH
70792: LD_VAR 0 3
70796: ARRAY
70797: PPUSH
70798: CALL_OW 266
70802: PUSH
70803: LD_INT 36
70805: EQUAL
70806: IFFALSE 70822
// places := places + 3 ;
70808: LD_ADDR_VAR 0 5
70812: PUSH
70813: LD_VAR 0 5
70817: PUSH
70818: LD_INT 3
70820: PLUS
70821: ST_TO_ADDR
70822: GO 70747
70824: POP
70825: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
70826: LD_VAR 0 5
70830: PUSH
70831: LD_INT 0
70833: EQUAL
70834: PUSH
70835: LD_VAR 0 5
70839: PUSH
70840: LD_EXP 103
70844: PUSH
70845: LD_VAR 0 2
70849: ARRAY
70850: LESSEQUAL
70851: OR
70852: IFFALSE 70856
// continue ;
70854: GO 70106
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
70856: LD_ADDR_VAR 0 6
70860: PUSH
70861: LD_EXP 63
70865: PUSH
70866: LD_VAR 0 2
70870: ARRAY
70871: PPUSH
70872: LD_INT 25
70874: PUSH
70875: LD_INT 3
70877: PUSH
70878: EMPTY
70879: LIST
70880: LIST
70881: PPUSH
70882: CALL_OW 72
70886: PUSH
70887: LD_EXP 103
70891: PUSH
70892: LD_VAR 0 2
70896: ARRAY
70897: DIFF
70898: PPUSH
70899: LD_INT 3
70901: PPUSH
70902: CALL 47003 0 2
70906: ST_TO_ADDR
// for j in tmp do
70907: LD_ADDR_VAR 0 3
70911: PUSH
70912: LD_VAR 0 6
70916: PUSH
70917: FOR_IN
70918: IFFALSE 70953
// if GetTag ( j ) > 0 then
70920: LD_VAR 0 3
70924: PPUSH
70925: CALL_OW 110
70929: PUSH
70930: LD_INT 0
70932: GREATER
70933: IFFALSE 70951
// tmp := tmp diff j ;
70935: LD_ADDR_VAR 0 6
70939: PUSH
70940: LD_VAR 0 6
70944: PUSH
70945: LD_VAR 0 3
70949: DIFF
70950: ST_TO_ADDR
70951: GO 70917
70953: POP
70954: POP
// if not tmp then
70955: LD_VAR 0 6
70959: NOT
70960: IFFALSE 70964
// continue ;
70962: GO 70106
// if places then
70964: LD_VAR 0 5
70968: IFFALSE 71027
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
70970: LD_ADDR_EXP 103
70974: PUSH
70975: LD_EXP 103
70979: PPUSH
70980: LD_VAR 0 2
70984: PPUSH
70985: LD_EXP 103
70989: PUSH
70990: LD_VAR 0 2
70994: ARRAY
70995: PUSH
70996: LD_VAR 0 6
71000: PUSH
71001: LD_INT 1
71003: ARRAY
71004: UNION
71005: PPUSH
71006: CALL_OW 1
71010: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
71011: LD_VAR 0 6
71015: PUSH
71016: LD_INT 1
71018: ARRAY
71019: PPUSH
71020: LD_INT 126
71022: PPUSH
71023: CALL_OW 109
// end ; end ;
71027: GO 70106
71029: POP
71030: POP
// end ;
71031: LD_VAR 0 1
71035: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
71036: LD_INT 0
71038: PPUSH
71039: PPUSH
71040: PPUSH
71041: PPUSH
71042: PPUSH
71043: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
71044: LD_VAR 0 1
71048: NOT
71049: PUSH
71050: LD_VAR 0 2
71054: NOT
71055: OR
71056: PUSH
71057: LD_VAR 0 3
71061: NOT
71062: OR
71063: PUSH
71064: LD_VAR 0 4
71068: PUSH
71069: LD_INT 1
71071: PUSH
71072: LD_INT 2
71074: PUSH
71075: LD_INT 3
71077: PUSH
71078: LD_INT 4
71080: PUSH
71081: LD_INT 5
71083: PUSH
71084: LD_INT 8
71086: PUSH
71087: LD_INT 9
71089: PUSH
71090: LD_INT 15
71092: PUSH
71093: LD_INT 16
71095: PUSH
71096: EMPTY
71097: LIST
71098: LIST
71099: LIST
71100: LIST
71101: LIST
71102: LIST
71103: LIST
71104: LIST
71105: LIST
71106: IN
71107: NOT
71108: OR
71109: IFFALSE 71113
// exit ;
71111: GO 72013
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
71113: LD_ADDR_VAR 0 2
71117: PUSH
71118: LD_VAR 0 2
71122: PPUSH
71123: LD_INT 21
71125: PUSH
71126: LD_INT 3
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: PUSH
71133: LD_INT 24
71135: PUSH
71136: LD_INT 250
71138: PUSH
71139: EMPTY
71140: LIST
71141: LIST
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: PPUSH
71147: CALL_OW 72
71151: ST_TO_ADDR
// case class of 1 , 15 :
71152: LD_VAR 0 4
71156: PUSH
71157: LD_INT 1
71159: DOUBLE
71160: EQUAL
71161: IFTRUE 71171
71163: LD_INT 15
71165: DOUBLE
71166: EQUAL
71167: IFTRUE 71171
71169: GO 71256
71171: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
71172: LD_ADDR_VAR 0 8
71176: PUSH
71177: LD_VAR 0 2
71181: PPUSH
71182: LD_INT 2
71184: PUSH
71185: LD_INT 30
71187: PUSH
71188: LD_INT 32
71190: PUSH
71191: EMPTY
71192: LIST
71193: LIST
71194: PUSH
71195: LD_INT 30
71197: PUSH
71198: LD_INT 31
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: PUSH
71205: EMPTY
71206: LIST
71207: LIST
71208: LIST
71209: PPUSH
71210: CALL_OW 72
71214: PUSH
71215: LD_VAR 0 2
71219: PPUSH
71220: LD_INT 2
71222: PUSH
71223: LD_INT 30
71225: PUSH
71226: LD_INT 4
71228: PUSH
71229: EMPTY
71230: LIST
71231: LIST
71232: PUSH
71233: LD_INT 30
71235: PUSH
71236: LD_INT 5
71238: PUSH
71239: EMPTY
71240: LIST
71241: LIST
71242: PUSH
71243: EMPTY
71244: LIST
71245: LIST
71246: LIST
71247: PPUSH
71248: CALL_OW 72
71252: ADD
71253: ST_TO_ADDR
71254: GO 71502
71256: LD_INT 2
71258: DOUBLE
71259: EQUAL
71260: IFTRUE 71270
71262: LD_INT 16
71264: DOUBLE
71265: EQUAL
71266: IFTRUE 71270
71268: GO 71316
71270: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
71271: LD_ADDR_VAR 0 8
71275: PUSH
71276: LD_VAR 0 2
71280: PPUSH
71281: LD_INT 2
71283: PUSH
71284: LD_INT 30
71286: PUSH
71287: LD_INT 0
71289: PUSH
71290: EMPTY
71291: LIST
71292: LIST
71293: PUSH
71294: LD_INT 30
71296: PUSH
71297: LD_INT 1
71299: PUSH
71300: EMPTY
71301: LIST
71302: LIST
71303: PUSH
71304: EMPTY
71305: LIST
71306: LIST
71307: LIST
71308: PPUSH
71309: CALL_OW 72
71313: ST_TO_ADDR
71314: GO 71502
71316: LD_INT 3
71318: DOUBLE
71319: EQUAL
71320: IFTRUE 71324
71322: GO 71370
71324: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
71325: LD_ADDR_VAR 0 8
71329: PUSH
71330: LD_VAR 0 2
71334: PPUSH
71335: LD_INT 2
71337: PUSH
71338: LD_INT 30
71340: PUSH
71341: LD_INT 2
71343: PUSH
71344: EMPTY
71345: LIST
71346: LIST
71347: PUSH
71348: LD_INT 30
71350: PUSH
71351: LD_INT 3
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: LIST
71362: PPUSH
71363: CALL_OW 72
71367: ST_TO_ADDR
71368: GO 71502
71370: LD_INT 4
71372: DOUBLE
71373: EQUAL
71374: IFTRUE 71378
71376: GO 71435
71378: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
71379: LD_ADDR_VAR 0 8
71383: PUSH
71384: LD_VAR 0 2
71388: PPUSH
71389: LD_INT 2
71391: PUSH
71392: LD_INT 30
71394: PUSH
71395: LD_INT 6
71397: PUSH
71398: EMPTY
71399: LIST
71400: LIST
71401: PUSH
71402: LD_INT 30
71404: PUSH
71405: LD_INT 7
71407: PUSH
71408: EMPTY
71409: LIST
71410: LIST
71411: PUSH
71412: LD_INT 30
71414: PUSH
71415: LD_INT 8
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: PUSH
71422: EMPTY
71423: LIST
71424: LIST
71425: LIST
71426: LIST
71427: PPUSH
71428: CALL_OW 72
71432: ST_TO_ADDR
71433: GO 71502
71435: LD_INT 5
71437: DOUBLE
71438: EQUAL
71439: IFTRUE 71455
71441: LD_INT 8
71443: DOUBLE
71444: EQUAL
71445: IFTRUE 71455
71447: LD_INT 9
71449: DOUBLE
71450: EQUAL
71451: IFTRUE 71455
71453: GO 71501
71455: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
71456: LD_ADDR_VAR 0 8
71460: PUSH
71461: LD_VAR 0 2
71465: PPUSH
71466: LD_INT 2
71468: PUSH
71469: LD_INT 30
71471: PUSH
71472: LD_INT 4
71474: PUSH
71475: EMPTY
71476: LIST
71477: LIST
71478: PUSH
71479: LD_INT 30
71481: PUSH
71482: LD_INT 5
71484: PUSH
71485: EMPTY
71486: LIST
71487: LIST
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: LIST
71493: PPUSH
71494: CALL_OW 72
71498: ST_TO_ADDR
71499: GO 71502
71501: POP
// if not tmp then
71502: LD_VAR 0 8
71506: NOT
71507: IFFALSE 71511
// exit ;
71509: GO 72013
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
71511: LD_VAR 0 4
71515: PUSH
71516: LD_INT 1
71518: PUSH
71519: LD_INT 15
71521: PUSH
71522: EMPTY
71523: LIST
71524: LIST
71525: IN
71526: PUSH
71527: LD_EXP 72
71531: PUSH
71532: LD_VAR 0 1
71536: ARRAY
71537: AND
71538: IFFALSE 71694
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
71540: LD_ADDR_VAR 0 9
71544: PUSH
71545: LD_EXP 72
71549: PUSH
71550: LD_VAR 0 1
71554: ARRAY
71555: PUSH
71556: LD_INT 1
71558: ARRAY
71559: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
71560: LD_VAR 0 9
71564: PUSH
71565: LD_EXP 73
71569: PUSH
71570: LD_VAR 0 1
71574: ARRAY
71575: IN
71576: NOT
71577: IFFALSE 71692
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
71579: LD_ADDR_EXP 73
71583: PUSH
71584: LD_EXP 73
71588: PPUSH
71589: LD_VAR 0 1
71593: PUSH
71594: LD_EXP 73
71598: PUSH
71599: LD_VAR 0 1
71603: ARRAY
71604: PUSH
71605: LD_INT 1
71607: PLUS
71608: PUSH
71609: EMPTY
71610: LIST
71611: LIST
71612: PPUSH
71613: LD_VAR 0 9
71617: PPUSH
71618: CALL 17454 0 3
71622: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
71623: LD_ADDR_EXP 72
71627: PUSH
71628: LD_EXP 72
71632: PPUSH
71633: LD_VAR 0 1
71637: PPUSH
71638: LD_EXP 72
71642: PUSH
71643: LD_VAR 0 1
71647: ARRAY
71648: PUSH
71649: LD_VAR 0 9
71653: DIFF
71654: PPUSH
71655: CALL_OW 1
71659: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
71660: LD_VAR 0 3
71664: PPUSH
71665: LD_EXP 73
71669: PUSH
71670: LD_VAR 0 1
71674: ARRAY
71675: PUSH
71676: LD_EXP 73
71680: PUSH
71681: LD_VAR 0 1
71685: ARRAY
71686: ARRAY
71687: PPUSH
71688: CALL_OW 120
// end ; exit ;
71692: GO 72013
// end ; if tmp > 1 then
71694: LD_VAR 0 8
71698: PUSH
71699: LD_INT 1
71701: GREATER
71702: IFFALSE 71806
// for i = 2 to tmp do
71704: LD_ADDR_VAR 0 6
71708: PUSH
71709: DOUBLE
71710: LD_INT 2
71712: DEC
71713: ST_TO_ADDR
71714: LD_VAR 0 8
71718: PUSH
71719: FOR_TO
71720: IFFALSE 71804
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
71722: LD_VAR 0 8
71726: PUSH
71727: LD_VAR 0 6
71731: ARRAY
71732: PPUSH
71733: CALL_OW 461
71737: PUSH
71738: LD_INT 6
71740: EQUAL
71741: IFFALSE 71802
// begin x := tmp [ i ] ;
71743: LD_ADDR_VAR 0 9
71747: PUSH
71748: LD_VAR 0 8
71752: PUSH
71753: LD_VAR 0 6
71757: ARRAY
71758: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
71759: LD_ADDR_VAR 0 8
71763: PUSH
71764: LD_VAR 0 8
71768: PPUSH
71769: LD_VAR 0 6
71773: PPUSH
71774: CALL_OW 3
71778: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
71779: LD_ADDR_VAR 0 8
71783: PUSH
71784: LD_VAR 0 8
71788: PPUSH
71789: LD_INT 1
71791: PPUSH
71792: LD_VAR 0 9
71796: PPUSH
71797: CALL_OW 2
71801: ST_TO_ADDR
// end ;
71802: GO 71719
71804: POP
71805: POP
// for i in tmp do
71806: LD_ADDR_VAR 0 6
71810: PUSH
71811: LD_VAR 0 8
71815: PUSH
71816: FOR_IN
71817: IFFALSE 71886
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
71819: LD_VAR 0 6
71823: PPUSH
71824: CALL_OW 313
71828: PUSH
71829: LD_INT 6
71831: LESS
71832: PUSH
71833: LD_VAR 0 6
71837: PPUSH
71838: CALL_OW 266
71842: PUSH
71843: LD_INT 31
71845: PUSH
71846: LD_INT 32
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: IN
71853: NOT
71854: AND
71855: PUSH
71856: LD_VAR 0 6
71860: PPUSH
71861: CALL_OW 313
71865: PUSH
71866: LD_INT 0
71868: EQUAL
71869: OR
71870: IFFALSE 71884
// begin j := i ;
71872: LD_ADDR_VAR 0 7
71876: PUSH
71877: LD_VAR 0 6
71881: ST_TO_ADDR
// break ;
71882: GO 71886
// end ; end ;
71884: GO 71816
71886: POP
71887: POP
// if j then
71888: LD_VAR 0 7
71892: IFFALSE 71910
// ComEnterUnit ( unit , j ) else
71894: LD_VAR 0 3
71898: PPUSH
71899: LD_VAR 0 7
71903: PPUSH
71904: CALL_OW 120
71908: GO 72013
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
71910: LD_ADDR_VAR 0 10
71914: PUSH
71915: LD_VAR 0 2
71919: PPUSH
71920: LD_INT 2
71922: PUSH
71923: LD_INT 30
71925: PUSH
71926: LD_INT 0
71928: PUSH
71929: EMPTY
71930: LIST
71931: LIST
71932: PUSH
71933: LD_INT 30
71935: PUSH
71936: LD_INT 1
71938: PUSH
71939: EMPTY
71940: LIST
71941: LIST
71942: PUSH
71943: EMPTY
71944: LIST
71945: LIST
71946: LIST
71947: PPUSH
71948: CALL_OW 72
71952: ST_TO_ADDR
// if depot then
71953: LD_VAR 0 10
71957: IFFALSE 72013
// begin depot := NearestUnitToUnit ( depot , unit ) ;
71959: LD_ADDR_VAR 0 10
71963: PUSH
71964: LD_VAR 0 10
71968: PPUSH
71969: LD_VAR 0 3
71973: PPUSH
71974: CALL_OW 74
71978: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
71979: LD_VAR 0 3
71983: PPUSH
71984: LD_VAR 0 10
71988: PPUSH
71989: CALL_OW 296
71993: PUSH
71994: LD_INT 10
71996: GREATER
71997: IFFALSE 72013
// ComStandNearbyBuilding ( unit , depot ) ;
71999: LD_VAR 0 3
72003: PPUSH
72004: LD_VAR 0 10
72008: PPUSH
72009: CALL 14068 0 2
// end ; end ; end ;
72013: LD_VAR 0 5
72017: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
72018: LD_INT 0
72020: PPUSH
72021: PPUSH
72022: PPUSH
72023: PPUSH
// if not mc_bases then
72024: LD_EXP 63
72028: NOT
72029: IFFALSE 72033
// exit ;
72031: GO 72272
// for i = 1 to mc_bases do
72033: LD_ADDR_VAR 0 2
72037: PUSH
72038: DOUBLE
72039: LD_INT 1
72041: DEC
72042: ST_TO_ADDR
72043: LD_EXP 63
72047: PUSH
72048: FOR_TO
72049: IFFALSE 72270
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
72051: LD_ADDR_VAR 0 4
72055: PUSH
72056: LD_EXP 63
72060: PUSH
72061: LD_VAR 0 2
72065: ARRAY
72066: PPUSH
72067: LD_INT 21
72069: PUSH
72070: LD_INT 1
72072: PUSH
72073: EMPTY
72074: LIST
72075: LIST
72076: PPUSH
72077: CALL_OW 72
72081: PUSH
72082: LD_EXP 92
72086: PUSH
72087: LD_VAR 0 2
72091: ARRAY
72092: UNION
72093: ST_TO_ADDR
// if not tmp then
72094: LD_VAR 0 4
72098: NOT
72099: IFFALSE 72103
// continue ;
72101: GO 72048
// for j in tmp do
72103: LD_ADDR_VAR 0 3
72107: PUSH
72108: LD_VAR 0 4
72112: PUSH
72113: FOR_IN
72114: IFFALSE 72266
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
72116: LD_VAR 0 3
72120: PPUSH
72121: CALL_OW 110
72125: NOT
72126: PUSH
72127: LD_VAR 0 3
72131: PPUSH
72132: CALL_OW 314
72136: NOT
72137: AND
72138: PUSH
72139: LD_VAR 0 3
72143: PPUSH
72144: CALL_OW 311
72148: NOT
72149: AND
72150: PUSH
72151: LD_VAR 0 3
72155: PPUSH
72156: CALL_OW 310
72160: NOT
72161: AND
72162: PUSH
72163: LD_VAR 0 3
72167: PUSH
72168: LD_EXP 66
72172: PUSH
72173: LD_VAR 0 2
72177: ARRAY
72178: PUSH
72179: LD_INT 1
72181: ARRAY
72182: IN
72183: NOT
72184: AND
72185: PUSH
72186: LD_VAR 0 3
72190: PUSH
72191: LD_EXP 66
72195: PUSH
72196: LD_VAR 0 2
72200: ARRAY
72201: PUSH
72202: LD_INT 2
72204: ARRAY
72205: IN
72206: NOT
72207: AND
72208: PUSH
72209: LD_VAR 0 3
72213: PUSH
72214: LD_EXP 75
72218: PUSH
72219: LD_VAR 0 2
72223: ARRAY
72224: IN
72225: NOT
72226: AND
72227: IFFALSE 72264
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
72229: LD_VAR 0 2
72233: PPUSH
72234: LD_EXP 63
72238: PUSH
72239: LD_VAR 0 2
72243: ARRAY
72244: PPUSH
72245: LD_VAR 0 3
72249: PPUSH
72250: LD_VAR 0 3
72254: PPUSH
72255: CALL_OW 257
72259: PPUSH
72260: CALL 71036 0 4
// end ;
72264: GO 72113
72266: POP
72267: POP
// end ;
72268: GO 72048
72270: POP
72271: POP
// end ;
72272: LD_VAR 0 1
72276: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
72277: LD_INT 0
72279: PPUSH
72280: PPUSH
72281: PPUSH
72282: PPUSH
72283: PPUSH
72284: PPUSH
// if not mc_bases [ base ] then
72285: LD_EXP 63
72289: PUSH
72290: LD_VAR 0 1
72294: ARRAY
72295: NOT
72296: IFFALSE 72300
// exit ;
72298: GO 72482
// tmp := [ ] ;
72300: LD_ADDR_VAR 0 6
72304: PUSH
72305: EMPTY
72306: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
72307: LD_ADDR_VAR 0 7
72311: PUSH
72312: LD_VAR 0 3
72316: PPUSH
72317: LD_INT 0
72319: PPUSH
72320: CALL_OW 517
72324: ST_TO_ADDR
// if not list then
72325: LD_VAR 0 7
72329: NOT
72330: IFFALSE 72334
// exit ;
72332: GO 72482
// for i = 1 to amount do
72334: LD_ADDR_VAR 0 5
72338: PUSH
72339: DOUBLE
72340: LD_INT 1
72342: DEC
72343: ST_TO_ADDR
72344: LD_VAR 0 2
72348: PUSH
72349: FOR_TO
72350: IFFALSE 72430
// begin x := rand ( 1 , list [ 1 ] ) ;
72352: LD_ADDR_VAR 0 8
72356: PUSH
72357: LD_INT 1
72359: PPUSH
72360: LD_VAR 0 7
72364: PUSH
72365: LD_INT 1
72367: ARRAY
72368: PPUSH
72369: CALL_OW 12
72373: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
72374: LD_ADDR_VAR 0 6
72378: PUSH
72379: LD_VAR 0 6
72383: PPUSH
72384: LD_VAR 0 5
72388: PPUSH
72389: LD_VAR 0 7
72393: PUSH
72394: LD_INT 1
72396: ARRAY
72397: PUSH
72398: LD_VAR 0 8
72402: ARRAY
72403: PUSH
72404: LD_VAR 0 7
72408: PUSH
72409: LD_INT 2
72411: ARRAY
72412: PUSH
72413: LD_VAR 0 8
72417: ARRAY
72418: PUSH
72419: EMPTY
72420: LIST
72421: LIST
72422: PPUSH
72423: CALL_OW 1
72427: ST_TO_ADDR
// end ;
72428: GO 72349
72430: POP
72431: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
72432: LD_ADDR_EXP 76
72436: PUSH
72437: LD_EXP 76
72441: PPUSH
72442: LD_VAR 0 1
72446: PPUSH
72447: LD_VAR 0 6
72451: PPUSH
72452: CALL_OW 1
72456: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
72457: LD_ADDR_EXP 78
72461: PUSH
72462: LD_EXP 78
72466: PPUSH
72467: LD_VAR 0 1
72471: PPUSH
72472: LD_VAR 0 3
72476: PPUSH
72477: CALL_OW 1
72481: ST_TO_ADDR
// end ;
72482: LD_VAR 0 4
72486: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
72487: LD_INT 0
72489: PPUSH
// if not mc_bases [ base ] then
72490: LD_EXP 63
72494: PUSH
72495: LD_VAR 0 1
72499: ARRAY
72500: NOT
72501: IFFALSE 72505
// exit ;
72503: GO 72530
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
72505: LD_ADDR_EXP 68
72509: PUSH
72510: LD_EXP 68
72514: PPUSH
72515: LD_VAR 0 1
72519: PPUSH
72520: LD_VAR 0 2
72524: PPUSH
72525: CALL_OW 1
72529: ST_TO_ADDR
// end ;
72530: LD_VAR 0 3
72534: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
72535: LD_INT 0
72537: PPUSH
// if not mc_bases [ base ] then
72538: LD_EXP 63
72542: PUSH
72543: LD_VAR 0 1
72547: ARRAY
72548: NOT
72549: IFFALSE 72553
// exit ;
72551: GO 72590
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
72553: LD_ADDR_EXP 68
72557: PUSH
72558: LD_EXP 68
72562: PPUSH
72563: LD_VAR 0 1
72567: PPUSH
72568: LD_EXP 68
72572: PUSH
72573: LD_VAR 0 1
72577: ARRAY
72578: PUSH
72579: LD_VAR 0 2
72583: UNION
72584: PPUSH
72585: CALL_OW 1
72589: ST_TO_ADDR
// end ;
72590: LD_VAR 0 3
72594: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
72595: LD_INT 0
72597: PPUSH
// if not mc_bases [ base ] then
72598: LD_EXP 63
72602: PUSH
72603: LD_VAR 0 1
72607: ARRAY
72608: NOT
72609: IFFALSE 72613
// exit ;
72611: GO 72638
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
72613: LD_ADDR_EXP 84
72617: PUSH
72618: LD_EXP 84
72622: PPUSH
72623: LD_VAR 0 1
72627: PPUSH
72628: LD_VAR 0 2
72632: PPUSH
72633: CALL_OW 1
72637: ST_TO_ADDR
// end ;
72638: LD_VAR 0 3
72642: RET
// export function MC_InsertProduceList ( base , components ) ; begin
72643: LD_INT 0
72645: PPUSH
// if not mc_bases [ base ] then
72646: LD_EXP 63
72650: PUSH
72651: LD_VAR 0 1
72655: ARRAY
72656: NOT
72657: IFFALSE 72661
// exit ;
72659: GO 72698
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
72661: LD_ADDR_EXP 84
72665: PUSH
72666: LD_EXP 84
72670: PPUSH
72671: LD_VAR 0 1
72675: PPUSH
72676: LD_EXP 84
72680: PUSH
72681: LD_VAR 0 1
72685: ARRAY
72686: PUSH
72687: LD_VAR 0 2
72691: ADD
72692: PPUSH
72693: CALL_OW 1
72697: ST_TO_ADDR
// end ;
72698: LD_VAR 0 3
72702: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
72703: LD_INT 0
72705: PPUSH
// if not mc_bases [ base ] then
72706: LD_EXP 63
72710: PUSH
72711: LD_VAR 0 1
72715: ARRAY
72716: NOT
72717: IFFALSE 72721
// exit ;
72719: GO 72775
// mc_defender := Replace ( mc_defender , base , deflist ) ;
72721: LD_ADDR_EXP 85
72725: PUSH
72726: LD_EXP 85
72730: PPUSH
72731: LD_VAR 0 1
72735: PPUSH
72736: LD_VAR 0 2
72740: PPUSH
72741: CALL_OW 1
72745: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
72746: LD_ADDR_EXP 74
72750: PUSH
72751: LD_EXP 74
72755: PPUSH
72756: LD_VAR 0 1
72760: PPUSH
72761: LD_VAR 0 2
72765: PUSH
72766: LD_INT 0
72768: PLUS
72769: PPUSH
72770: CALL_OW 1
72774: ST_TO_ADDR
// end ;
72775: LD_VAR 0 3
72779: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
72780: LD_INT 0
72782: PPUSH
// if not mc_bases [ base ] then
72783: LD_EXP 63
72787: PUSH
72788: LD_VAR 0 1
72792: ARRAY
72793: NOT
72794: IFFALSE 72798
// exit ;
72796: GO 72823
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
72798: LD_ADDR_EXP 74
72802: PUSH
72803: LD_EXP 74
72807: PPUSH
72808: LD_VAR 0 1
72812: PPUSH
72813: LD_VAR 0 2
72817: PPUSH
72818: CALL_OW 1
72822: ST_TO_ADDR
// end ;
72823: LD_VAR 0 3
72827: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
72828: LD_INT 0
72830: PPUSH
72831: PPUSH
72832: PPUSH
72833: PPUSH
// if not mc_bases [ base ] then
72834: LD_EXP 63
72838: PUSH
72839: LD_VAR 0 1
72843: ARRAY
72844: NOT
72845: IFFALSE 72849
// exit ;
72847: GO 72914
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
72849: LD_ADDR_EXP 83
72853: PUSH
72854: LD_EXP 83
72858: PPUSH
72859: LD_VAR 0 1
72863: PUSH
72864: LD_EXP 83
72868: PUSH
72869: LD_VAR 0 1
72873: ARRAY
72874: PUSH
72875: LD_INT 1
72877: PLUS
72878: PUSH
72879: EMPTY
72880: LIST
72881: LIST
72882: PPUSH
72883: LD_VAR 0 1
72887: PUSH
72888: LD_VAR 0 2
72892: PUSH
72893: LD_VAR 0 3
72897: PUSH
72898: LD_VAR 0 4
72902: PUSH
72903: EMPTY
72904: LIST
72905: LIST
72906: LIST
72907: LIST
72908: PPUSH
72909: CALL 17454 0 3
72913: ST_TO_ADDR
// end ;
72914: LD_VAR 0 5
72918: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
72919: LD_INT 0
72921: PPUSH
// if not mc_bases [ base ] then
72922: LD_EXP 63
72926: PUSH
72927: LD_VAR 0 1
72931: ARRAY
72932: NOT
72933: IFFALSE 72937
// exit ;
72935: GO 72962
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
72937: LD_ADDR_EXP 100
72941: PUSH
72942: LD_EXP 100
72946: PPUSH
72947: LD_VAR 0 1
72951: PPUSH
72952: LD_VAR 0 2
72956: PPUSH
72957: CALL_OW 1
72961: ST_TO_ADDR
// end ;
72962: LD_VAR 0 3
72966: RET
// export function MC_GetMinesField ( base ) ; begin
72967: LD_INT 0
72969: PPUSH
// result := mc_mines [ base ] ;
72970: LD_ADDR_VAR 0 2
72974: PUSH
72975: LD_EXP 76
72979: PUSH
72980: LD_VAR 0 1
72984: ARRAY
72985: ST_TO_ADDR
// end ;
72986: LD_VAR 0 2
72990: RET
// export function MC_GetProduceList ( base ) ; begin
72991: LD_INT 0
72993: PPUSH
// result := mc_produce [ base ] ;
72994: LD_ADDR_VAR 0 2
72998: PUSH
72999: LD_EXP 84
73003: PUSH
73004: LD_VAR 0 1
73008: ARRAY
73009: ST_TO_ADDR
// end ;
73010: LD_VAR 0 2
73014: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
73015: LD_INT 0
73017: PPUSH
73018: PPUSH
// if not mc_bases then
73019: LD_EXP 63
73023: NOT
73024: IFFALSE 73028
// exit ;
73026: GO 73093
// if mc_bases [ base ] then
73028: LD_EXP 63
73032: PUSH
73033: LD_VAR 0 1
73037: ARRAY
73038: IFFALSE 73093
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
73040: LD_ADDR_VAR 0 3
73044: PUSH
73045: LD_EXP 63
73049: PUSH
73050: LD_VAR 0 1
73054: ARRAY
73055: PPUSH
73056: LD_INT 30
73058: PUSH
73059: LD_VAR 0 2
73063: PUSH
73064: EMPTY
73065: LIST
73066: LIST
73067: PPUSH
73068: CALL_OW 72
73072: ST_TO_ADDR
// if result then
73073: LD_VAR 0 3
73077: IFFALSE 73093
// result := result [ 1 ] ;
73079: LD_ADDR_VAR 0 3
73083: PUSH
73084: LD_VAR 0 3
73088: PUSH
73089: LD_INT 1
73091: ARRAY
73092: ST_TO_ADDR
// end ; end ;
73093: LD_VAR 0 3
73097: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
73098: LD_INT 0
73100: PPUSH
73101: PPUSH
// if not mc_bases then
73102: LD_EXP 63
73106: NOT
73107: IFFALSE 73111
// exit ;
73109: GO 73156
// if mc_bases [ base ] then
73111: LD_EXP 63
73115: PUSH
73116: LD_VAR 0 1
73120: ARRAY
73121: IFFALSE 73156
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
73123: LD_ADDR_VAR 0 3
73127: PUSH
73128: LD_EXP 63
73132: PUSH
73133: LD_VAR 0 1
73137: ARRAY
73138: PPUSH
73139: LD_INT 30
73141: PUSH
73142: LD_VAR 0 2
73146: PUSH
73147: EMPTY
73148: LIST
73149: LIST
73150: PPUSH
73151: CALL_OW 72
73155: ST_TO_ADDR
// end ;
73156: LD_VAR 0 3
73160: RET
// export function MC_SetTame ( base , area ) ; begin
73161: LD_INT 0
73163: PPUSH
// if not mc_bases or not base then
73164: LD_EXP 63
73168: NOT
73169: PUSH
73170: LD_VAR 0 1
73174: NOT
73175: OR
73176: IFFALSE 73180
// exit ;
73178: GO 73205
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
73180: LD_ADDR_EXP 91
73184: PUSH
73185: LD_EXP 91
73189: PPUSH
73190: LD_VAR 0 1
73194: PPUSH
73195: LD_VAR 0 2
73199: PPUSH
73200: CALL_OW 1
73204: ST_TO_ADDR
// end ;
73205: LD_VAR 0 3
73209: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
73210: LD_INT 0
73212: PPUSH
73213: PPUSH
// if not mc_bases or not base then
73214: LD_EXP 63
73218: NOT
73219: PUSH
73220: LD_VAR 0 1
73224: NOT
73225: OR
73226: IFFALSE 73230
// exit ;
73228: GO 73332
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
73230: LD_ADDR_VAR 0 4
73234: PUSH
73235: LD_EXP 63
73239: PUSH
73240: LD_VAR 0 1
73244: ARRAY
73245: PPUSH
73246: LD_INT 30
73248: PUSH
73249: LD_VAR 0 2
73253: PUSH
73254: EMPTY
73255: LIST
73256: LIST
73257: PPUSH
73258: CALL_OW 72
73262: ST_TO_ADDR
// if not tmp then
73263: LD_VAR 0 4
73267: NOT
73268: IFFALSE 73272
// exit ;
73270: GO 73332
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
73272: LD_ADDR_EXP 95
73276: PUSH
73277: LD_EXP 95
73281: PPUSH
73282: LD_VAR 0 1
73286: PPUSH
73287: LD_EXP 95
73291: PUSH
73292: LD_VAR 0 1
73296: ARRAY
73297: PPUSH
73298: LD_EXP 95
73302: PUSH
73303: LD_VAR 0 1
73307: ARRAY
73308: PUSH
73309: LD_INT 1
73311: PLUS
73312: PPUSH
73313: LD_VAR 0 4
73317: PUSH
73318: LD_INT 1
73320: ARRAY
73321: PPUSH
73322: CALL_OW 2
73326: PPUSH
73327: CALL_OW 1
73331: ST_TO_ADDR
// end ;
73332: LD_VAR 0 3
73336: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
73337: LD_INT 0
73339: PPUSH
73340: PPUSH
// if not mc_bases or not base or not kinds then
73341: LD_EXP 63
73345: NOT
73346: PUSH
73347: LD_VAR 0 1
73351: NOT
73352: OR
73353: PUSH
73354: LD_VAR 0 2
73358: NOT
73359: OR
73360: IFFALSE 73364
// exit ;
73362: GO 73425
// for i in kinds do
73364: LD_ADDR_VAR 0 4
73368: PUSH
73369: LD_VAR 0 2
73373: PUSH
73374: FOR_IN
73375: IFFALSE 73423
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
73377: LD_ADDR_EXP 97
73381: PUSH
73382: LD_EXP 97
73386: PPUSH
73387: LD_VAR 0 1
73391: PUSH
73392: LD_EXP 97
73396: PUSH
73397: LD_VAR 0 1
73401: ARRAY
73402: PUSH
73403: LD_INT 1
73405: PLUS
73406: PUSH
73407: EMPTY
73408: LIST
73409: LIST
73410: PPUSH
73411: LD_VAR 0 4
73415: PPUSH
73416: CALL 17454 0 3
73420: ST_TO_ADDR
73421: GO 73374
73423: POP
73424: POP
// end ;
73425: LD_VAR 0 3
73429: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
73430: LD_INT 0
73432: PPUSH
// if not mc_bases or not base or not areas then
73433: LD_EXP 63
73437: NOT
73438: PUSH
73439: LD_VAR 0 1
73443: NOT
73444: OR
73445: PUSH
73446: LD_VAR 0 2
73450: NOT
73451: OR
73452: IFFALSE 73456
// exit ;
73454: GO 73481
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
73456: LD_ADDR_EXP 81
73460: PUSH
73461: LD_EXP 81
73465: PPUSH
73466: LD_VAR 0 1
73470: PPUSH
73471: LD_VAR 0 2
73475: PPUSH
73476: CALL_OW 1
73480: ST_TO_ADDR
// end ;
73481: LD_VAR 0 3
73485: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
73486: LD_INT 0
73488: PPUSH
// if not mc_bases or not base or not teleports_exit then
73489: LD_EXP 63
73493: NOT
73494: PUSH
73495: LD_VAR 0 1
73499: NOT
73500: OR
73501: PUSH
73502: LD_VAR 0 2
73506: NOT
73507: OR
73508: IFFALSE 73512
// exit ;
73510: GO 73537
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
73512: LD_ADDR_EXP 98
73516: PUSH
73517: LD_EXP 98
73521: PPUSH
73522: LD_VAR 0 1
73526: PPUSH
73527: LD_VAR 0 2
73531: PPUSH
73532: CALL_OW 1
73536: ST_TO_ADDR
// end ;
73537: LD_VAR 0 3
73541: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
73542: LD_INT 0
73544: PPUSH
73545: PPUSH
73546: PPUSH
// if not mc_bases or not base or not ext_list then
73547: LD_EXP 63
73551: NOT
73552: PUSH
73553: LD_VAR 0 1
73557: NOT
73558: OR
73559: PUSH
73560: LD_VAR 0 5
73564: NOT
73565: OR
73566: IFFALSE 73570
// exit ;
73568: GO 73743
// tmp := GetFacExtXYD ( x , y , d ) ;
73570: LD_ADDR_VAR 0 8
73574: PUSH
73575: LD_VAR 0 2
73579: PPUSH
73580: LD_VAR 0 3
73584: PPUSH
73585: LD_VAR 0 4
73589: PPUSH
73590: CALL 46133 0 3
73594: ST_TO_ADDR
// if not tmp then
73595: LD_VAR 0 8
73599: NOT
73600: IFFALSE 73604
// exit ;
73602: GO 73743
// for i in tmp do
73604: LD_ADDR_VAR 0 7
73608: PUSH
73609: LD_VAR 0 8
73613: PUSH
73614: FOR_IN
73615: IFFALSE 73741
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
73617: LD_ADDR_EXP 68
73621: PUSH
73622: LD_EXP 68
73626: PPUSH
73627: LD_VAR 0 1
73631: PPUSH
73632: LD_EXP 68
73636: PUSH
73637: LD_VAR 0 1
73641: ARRAY
73642: PPUSH
73643: LD_EXP 68
73647: PUSH
73648: LD_VAR 0 1
73652: ARRAY
73653: PUSH
73654: LD_INT 1
73656: PLUS
73657: PPUSH
73658: LD_VAR 0 5
73662: PUSH
73663: LD_INT 1
73665: ARRAY
73666: PUSH
73667: LD_VAR 0 7
73671: PUSH
73672: LD_INT 1
73674: ARRAY
73675: PUSH
73676: LD_VAR 0 7
73680: PUSH
73681: LD_INT 2
73683: ARRAY
73684: PUSH
73685: LD_VAR 0 7
73689: PUSH
73690: LD_INT 3
73692: ARRAY
73693: PUSH
73694: EMPTY
73695: LIST
73696: LIST
73697: LIST
73698: LIST
73699: PPUSH
73700: CALL_OW 2
73704: PPUSH
73705: CALL_OW 1
73709: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
73710: LD_ADDR_VAR 0 5
73714: PUSH
73715: LD_VAR 0 5
73719: PPUSH
73720: LD_INT 1
73722: PPUSH
73723: CALL_OW 3
73727: ST_TO_ADDR
// if not ext_list then
73728: LD_VAR 0 5
73732: NOT
73733: IFFALSE 73739
// exit ;
73735: POP
73736: POP
73737: GO 73743
// end ;
73739: GO 73614
73741: POP
73742: POP
// end ;
73743: LD_VAR 0 6
73747: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
73748: LD_INT 0
73750: PPUSH
// if not mc_bases or not base or not weapon_list then
73751: LD_EXP 63
73755: NOT
73756: PUSH
73757: LD_VAR 0 1
73761: NOT
73762: OR
73763: PUSH
73764: LD_VAR 0 2
73768: NOT
73769: OR
73770: IFFALSE 73774
// exit ;
73772: GO 73799
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
73774: LD_ADDR_EXP 102
73778: PUSH
73779: LD_EXP 102
73783: PPUSH
73784: LD_VAR 0 1
73788: PPUSH
73789: LD_VAR 0 2
73793: PPUSH
73794: CALL_OW 1
73798: ST_TO_ADDR
// end ;
73799: LD_VAR 0 3
73803: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
73804: LD_INT 0
73806: PPUSH
// if not mc_bases or not base or not tech_list then
73807: LD_EXP 63
73811: NOT
73812: PUSH
73813: LD_VAR 0 1
73817: NOT
73818: OR
73819: PUSH
73820: LD_VAR 0 2
73824: NOT
73825: OR
73826: IFFALSE 73830
// exit ;
73828: GO 73855
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
73830: LD_ADDR_EXP 90
73834: PUSH
73835: LD_EXP 90
73839: PPUSH
73840: LD_VAR 0 1
73844: PPUSH
73845: LD_VAR 0 2
73849: PPUSH
73850: CALL_OW 1
73854: ST_TO_ADDR
// end ;
73855: LD_VAR 0 3
73859: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
73860: LD_INT 0
73862: PPUSH
// if not mc_bases or not parking_area or not base then
73863: LD_EXP 63
73867: NOT
73868: PUSH
73869: LD_VAR 0 2
73873: NOT
73874: OR
73875: PUSH
73876: LD_VAR 0 1
73880: NOT
73881: OR
73882: IFFALSE 73886
// exit ;
73884: GO 73911
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
73886: LD_ADDR_EXP 87
73890: PUSH
73891: LD_EXP 87
73895: PPUSH
73896: LD_VAR 0 1
73900: PPUSH
73901: LD_VAR 0 2
73905: PPUSH
73906: CALL_OW 1
73910: ST_TO_ADDR
// end ;
73911: LD_VAR 0 3
73915: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
73916: LD_INT 0
73918: PPUSH
// if not mc_bases or not base or not scan_area then
73919: LD_EXP 63
73923: NOT
73924: PUSH
73925: LD_VAR 0 1
73929: NOT
73930: OR
73931: PUSH
73932: LD_VAR 0 2
73936: NOT
73937: OR
73938: IFFALSE 73942
// exit ;
73940: GO 73967
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
73942: LD_ADDR_EXP 88
73946: PUSH
73947: LD_EXP 88
73951: PPUSH
73952: LD_VAR 0 1
73956: PPUSH
73957: LD_VAR 0 2
73961: PPUSH
73962: CALL_OW 1
73966: ST_TO_ADDR
// end ;
73967: LD_VAR 0 3
73971: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
73972: LD_INT 0
73974: PPUSH
73975: PPUSH
// if not mc_bases or not base then
73976: LD_EXP 63
73980: NOT
73981: PUSH
73982: LD_VAR 0 1
73986: NOT
73987: OR
73988: IFFALSE 73992
// exit ;
73990: GO 74056
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
73992: LD_ADDR_VAR 0 3
73996: PUSH
73997: LD_INT 1
73999: PUSH
74000: LD_INT 2
74002: PUSH
74003: LD_INT 3
74005: PUSH
74006: LD_INT 4
74008: PUSH
74009: LD_INT 11
74011: PUSH
74012: EMPTY
74013: LIST
74014: LIST
74015: LIST
74016: LIST
74017: LIST
74018: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
74019: LD_ADDR_EXP 90
74023: PUSH
74024: LD_EXP 90
74028: PPUSH
74029: LD_VAR 0 1
74033: PPUSH
74034: LD_EXP 90
74038: PUSH
74039: LD_VAR 0 1
74043: ARRAY
74044: PUSH
74045: LD_VAR 0 3
74049: DIFF
74050: PPUSH
74051: CALL_OW 1
74055: ST_TO_ADDR
// end ;
74056: LD_VAR 0 2
74060: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
74061: LD_INT 0
74063: PPUSH
// result := mc_vehicles [ base ] ;
74064: LD_ADDR_VAR 0 3
74068: PUSH
74069: LD_EXP 82
74073: PUSH
74074: LD_VAR 0 1
74078: ARRAY
74079: ST_TO_ADDR
// if onlyCombat then
74080: LD_VAR 0 2
74084: IFFALSE 74249
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
74086: LD_ADDR_VAR 0 3
74090: PUSH
74091: LD_VAR 0 3
74095: PUSH
74096: LD_VAR 0 3
74100: PPUSH
74101: LD_INT 2
74103: PUSH
74104: LD_INT 34
74106: PUSH
74107: LD_INT 12
74109: PUSH
74110: EMPTY
74111: LIST
74112: LIST
74113: PUSH
74114: LD_INT 34
74116: PUSH
74117: LD_INT 51
74119: PUSH
74120: EMPTY
74121: LIST
74122: LIST
74123: PUSH
74124: LD_INT 34
74126: PUSH
74127: LD_EXP 49
74131: PUSH
74132: EMPTY
74133: LIST
74134: LIST
74135: PUSH
74136: LD_INT 34
74138: PUSH
74139: LD_INT 32
74141: PUSH
74142: EMPTY
74143: LIST
74144: LIST
74145: PUSH
74146: LD_INT 34
74148: PUSH
74149: LD_INT 13
74151: PUSH
74152: EMPTY
74153: LIST
74154: LIST
74155: PUSH
74156: LD_INT 34
74158: PUSH
74159: LD_INT 52
74161: PUSH
74162: EMPTY
74163: LIST
74164: LIST
74165: PUSH
74166: LD_INT 34
74168: PUSH
74169: LD_INT 14
74171: PUSH
74172: EMPTY
74173: LIST
74174: LIST
74175: PUSH
74176: LD_INT 34
74178: PUSH
74179: LD_INT 53
74181: PUSH
74182: EMPTY
74183: LIST
74184: LIST
74185: PUSH
74186: LD_INT 34
74188: PUSH
74189: LD_EXP 48
74193: PUSH
74194: EMPTY
74195: LIST
74196: LIST
74197: PUSH
74198: LD_INT 34
74200: PUSH
74201: LD_INT 31
74203: PUSH
74204: EMPTY
74205: LIST
74206: LIST
74207: PUSH
74208: LD_INT 34
74210: PUSH
74211: LD_INT 48
74213: PUSH
74214: EMPTY
74215: LIST
74216: LIST
74217: PUSH
74218: LD_INT 34
74220: PUSH
74221: LD_INT 8
74223: PUSH
74224: EMPTY
74225: LIST
74226: LIST
74227: PUSH
74228: EMPTY
74229: LIST
74230: LIST
74231: LIST
74232: LIST
74233: LIST
74234: LIST
74235: LIST
74236: LIST
74237: LIST
74238: LIST
74239: LIST
74240: LIST
74241: LIST
74242: PPUSH
74243: CALL_OW 72
74247: DIFF
74248: ST_TO_ADDR
// end ; end_of_file
74249: LD_VAR 0 3
74253: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
74254: LD_INT 0
74256: PPUSH
74257: PPUSH
74258: PPUSH
// if not mc_bases or not skirmish then
74259: LD_EXP 63
74263: NOT
74264: PUSH
74265: LD_EXP 61
74269: NOT
74270: OR
74271: IFFALSE 74275
// exit ;
74273: GO 74440
// for i = 1 to mc_bases do
74275: LD_ADDR_VAR 0 4
74279: PUSH
74280: DOUBLE
74281: LD_INT 1
74283: DEC
74284: ST_TO_ADDR
74285: LD_EXP 63
74289: PUSH
74290: FOR_TO
74291: IFFALSE 74438
// begin if sci in mc_bases [ i ] then
74293: LD_VAR 0 2
74297: PUSH
74298: LD_EXP 63
74302: PUSH
74303: LD_VAR 0 4
74307: ARRAY
74308: IN
74309: IFFALSE 74436
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
74311: LD_ADDR_EXP 92
74315: PUSH
74316: LD_EXP 92
74320: PPUSH
74321: LD_VAR 0 4
74325: PUSH
74326: LD_EXP 92
74330: PUSH
74331: LD_VAR 0 4
74335: ARRAY
74336: PUSH
74337: LD_INT 1
74339: PLUS
74340: PUSH
74341: EMPTY
74342: LIST
74343: LIST
74344: PPUSH
74345: LD_VAR 0 1
74349: PPUSH
74350: CALL 17454 0 3
74354: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
74355: LD_ADDR_VAR 0 5
74359: PUSH
74360: LD_EXP 63
74364: PUSH
74365: LD_VAR 0 4
74369: ARRAY
74370: PPUSH
74371: LD_INT 2
74373: PUSH
74374: LD_INT 30
74376: PUSH
74377: LD_INT 0
74379: PUSH
74380: EMPTY
74381: LIST
74382: LIST
74383: PUSH
74384: LD_INT 30
74386: PUSH
74387: LD_INT 1
74389: PUSH
74390: EMPTY
74391: LIST
74392: LIST
74393: PUSH
74394: EMPTY
74395: LIST
74396: LIST
74397: LIST
74398: PPUSH
74399: CALL_OW 72
74403: PPUSH
74404: LD_VAR 0 1
74408: PPUSH
74409: CALL_OW 74
74413: ST_TO_ADDR
// if tmp then
74414: LD_VAR 0 5
74418: IFFALSE 74434
// ComStandNearbyBuilding ( ape , tmp ) ;
74420: LD_VAR 0 1
74424: PPUSH
74425: LD_VAR 0 5
74429: PPUSH
74430: CALL 14068 0 2
// break ;
74434: GO 74438
// end ; end ;
74436: GO 74290
74438: POP
74439: POP
// end ;
74440: LD_VAR 0 3
74444: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
74445: LD_INT 0
74447: PPUSH
74448: PPUSH
74449: PPUSH
// if not mc_bases or not skirmish then
74450: LD_EXP 63
74454: NOT
74455: PUSH
74456: LD_EXP 61
74460: NOT
74461: OR
74462: IFFALSE 74466
// exit ;
74464: GO 74555
// for i = 1 to mc_bases do
74466: LD_ADDR_VAR 0 4
74470: PUSH
74471: DOUBLE
74472: LD_INT 1
74474: DEC
74475: ST_TO_ADDR
74476: LD_EXP 63
74480: PUSH
74481: FOR_TO
74482: IFFALSE 74553
// begin if building in mc_busy_turret_list [ i ] then
74484: LD_VAR 0 1
74488: PUSH
74489: LD_EXP 73
74493: PUSH
74494: LD_VAR 0 4
74498: ARRAY
74499: IN
74500: IFFALSE 74551
// begin tmp := mc_busy_turret_list [ i ] diff building ;
74502: LD_ADDR_VAR 0 5
74506: PUSH
74507: LD_EXP 73
74511: PUSH
74512: LD_VAR 0 4
74516: ARRAY
74517: PUSH
74518: LD_VAR 0 1
74522: DIFF
74523: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
74524: LD_ADDR_EXP 73
74528: PUSH
74529: LD_EXP 73
74533: PPUSH
74534: LD_VAR 0 4
74538: PPUSH
74539: LD_VAR 0 5
74543: PPUSH
74544: CALL_OW 1
74548: ST_TO_ADDR
// break ;
74549: GO 74553
// end ; end ;
74551: GO 74481
74553: POP
74554: POP
// end ;
74555: LD_VAR 0 3
74559: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
74560: LD_INT 0
74562: PPUSH
74563: PPUSH
74564: PPUSH
// if not mc_bases or not skirmish then
74565: LD_EXP 63
74569: NOT
74570: PUSH
74571: LD_EXP 61
74575: NOT
74576: OR
74577: IFFALSE 74581
// exit ;
74579: GO 74780
// for i = 1 to mc_bases do
74581: LD_ADDR_VAR 0 5
74585: PUSH
74586: DOUBLE
74587: LD_INT 1
74589: DEC
74590: ST_TO_ADDR
74591: LD_EXP 63
74595: PUSH
74596: FOR_TO
74597: IFFALSE 74778
// if building in mc_bases [ i ] then
74599: LD_VAR 0 1
74603: PUSH
74604: LD_EXP 63
74608: PUSH
74609: LD_VAR 0 5
74613: ARRAY
74614: IN
74615: IFFALSE 74776
// begin tmp := mc_bases [ i ] diff building ;
74617: LD_ADDR_VAR 0 6
74621: PUSH
74622: LD_EXP 63
74626: PUSH
74627: LD_VAR 0 5
74631: ARRAY
74632: PUSH
74633: LD_VAR 0 1
74637: DIFF
74638: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
74639: LD_ADDR_EXP 63
74643: PUSH
74644: LD_EXP 63
74648: PPUSH
74649: LD_VAR 0 5
74653: PPUSH
74654: LD_VAR 0 6
74658: PPUSH
74659: CALL_OW 1
74663: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
74664: LD_VAR 0 1
74668: PUSH
74669: LD_EXP 71
74673: PUSH
74674: LD_VAR 0 5
74678: ARRAY
74679: IN
74680: IFFALSE 74719
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
74682: LD_ADDR_EXP 71
74686: PUSH
74687: LD_EXP 71
74691: PPUSH
74692: LD_VAR 0 5
74696: PPUSH
74697: LD_EXP 71
74701: PUSH
74702: LD_VAR 0 5
74706: ARRAY
74707: PUSH
74708: LD_VAR 0 1
74712: DIFF
74713: PPUSH
74714: CALL_OW 1
74718: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
74719: LD_VAR 0 1
74723: PUSH
74724: LD_EXP 72
74728: PUSH
74729: LD_VAR 0 5
74733: ARRAY
74734: IN
74735: IFFALSE 74774
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
74737: LD_ADDR_EXP 72
74741: PUSH
74742: LD_EXP 72
74746: PPUSH
74747: LD_VAR 0 5
74751: PPUSH
74752: LD_EXP 72
74756: PUSH
74757: LD_VAR 0 5
74761: ARRAY
74762: PUSH
74763: LD_VAR 0 1
74767: DIFF
74768: PPUSH
74769: CALL_OW 1
74773: ST_TO_ADDR
// break ;
74774: GO 74778
// end ;
74776: GO 74596
74778: POP
74779: POP
// end ;
74780: LD_VAR 0 4
74784: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
74785: LD_INT 0
74787: PPUSH
74788: PPUSH
74789: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
74790: LD_EXP 63
74794: NOT
74795: PUSH
74796: LD_EXP 61
74800: NOT
74801: OR
74802: PUSH
74803: LD_VAR 0 3
74807: PUSH
74808: LD_EXP 89
74812: IN
74813: NOT
74814: OR
74815: IFFALSE 74819
// exit ;
74817: GO 74942
// for i = 1 to mc_vehicles do
74819: LD_ADDR_VAR 0 6
74823: PUSH
74824: DOUBLE
74825: LD_INT 1
74827: DEC
74828: ST_TO_ADDR
74829: LD_EXP 82
74833: PUSH
74834: FOR_TO
74835: IFFALSE 74940
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
74837: LD_VAR 0 2
74841: PUSH
74842: LD_EXP 82
74846: PUSH
74847: LD_VAR 0 6
74851: ARRAY
74852: IN
74853: PUSH
74854: LD_VAR 0 1
74858: PUSH
74859: LD_EXP 82
74863: PUSH
74864: LD_VAR 0 6
74868: ARRAY
74869: IN
74870: OR
74871: IFFALSE 74938
// begin tmp := mc_vehicles [ i ] diff old ;
74873: LD_ADDR_VAR 0 7
74877: PUSH
74878: LD_EXP 82
74882: PUSH
74883: LD_VAR 0 6
74887: ARRAY
74888: PUSH
74889: LD_VAR 0 2
74893: DIFF
74894: ST_TO_ADDR
// tmp := tmp diff new ;
74895: LD_ADDR_VAR 0 7
74899: PUSH
74900: LD_VAR 0 7
74904: PUSH
74905: LD_VAR 0 1
74909: DIFF
74910: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
74911: LD_ADDR_EXP 82
74915: PUSH
74916: LD_EXP 82
74920: PPUSH
74921: LD_VAR 0 6
74925: PPUSH
74926: LD_VAR 0 7
74930: PPUSH
74931: CALL_OW 1
74935: ST_TO_ADDR
// break ;
74936: GO 74940
// end ;
74938: GO 74834
74940: POP
74941: POP
// end ;
74942: LD_VAR 0 5
74946: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
74947: LD_INT 0
74949: PPUSH
74950: PPUSH
74951: PPUSH
74952: PPUSH
// if not mc_bases or not skirmish then
74953: LD_EXP 63
74957: NOT
74958: PUSH
74959: LD_EXP 61
74963: NOT
74964: OR
74965: IFFALSE 74969
// exit ;
74967: GO 75346
// side := GetSide ( vehicle ) ;
74969: LD_ADDR_VAR 0 5
74973: PUSH
74974: LD_VAR 0 1
74978: PPUSH
74979: CALL_OW 255
74983: ST_TO_ADDR
// for i = 1 to mc_bases do
74984: LD_ADDR_VAR 0 4
74988: PUSH
74989: DOUBLE
74990: LD_INT 1
74992: DEC
74993: ST_TO_ADDR
74994: LD_EXP 63
74998: PUSH
74999: FOR_TO
75000: IFFALSE 75344
// begin if factory in mc_bases [ i ] then
75002: LD_VAR 0 2
75006: PUSH
75007: LD_EXP 63
75011: PUSH
75012: LD_VAR 0 4
75016: ARRAY
75017: IN
75018: IFFALSE 75342
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
75020: LD_EXP 85
75024: PUSH
75025: LD_VAR 0 4
75029: ARRAY
75030: PUSH
75031: LD_EXP 74
75035: PUSH
75036: LD_VAR 0 4
75040: ARRAY
75041: LESS
75042: PUSH
75043: LD_VAR 0 1
75047: PPUSH
75048: CALL_OW 264
75052: PUSH
75053: LD_INT 31
75055: PUSH
75056: LD_INT 32
75058: PUSH
75059: LD_INT 51
75061: PUSH
75062: LD_EXP 49
75066: PUSH
75067: LD_INT 12
75069: PUSH
75070: LD_INT 30
75072: PUSH
75073: LD_EXP 48
75077: PUSH
75078: LD_INT 11
75080: PUSH
75081: LD_INT 53
75083: PUSH
75084: LD_INT 14
75086: PUSH
75087: LD_EXP 52
75091: PUSH
75092: LD_INT 29
75094: PUSH
75095: LD_EXP 50
75099: PUSH
75100: LD_INT 13
75102: PUSH
75103: LD_INT 52
75105: PUSH
75106: LD_INT 48
75108: PUSH
75109: LD_INT 8
75111: PUSH
75112: EMPTY
75113: LIST
75114: LIST
75115: LIST
75116: LIST
75117: LIST
75118: LIST
75119: LIST
75120: LIST
75121: LIST
75122: LIST
75123: LIST
75124: LIST
75125: LIST
75126: LIST
75127: LIST
75128: LIST
75129: LIST
75130: IN
75131: NOT
75132: AND
75133: IFFALSE 75181
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
75135: LD_ADDR_EXP 85
75139: PUSH
75140: LD_EXP 85
75144: PPUSH
75145: LD_VAR 0 4
75149: PUSH
75150: LD_EXP 85
75154: PUSH
75155: LD_VAR 0 4
75159: ARRAY
75160: PUSH
75161: LD_INT 1
75163: PLUS
75164: PUSH
75165: EMPTY
75166: LIST
75167: LIST
75168: PPUSH
75169: LD_VAR 0 1
75173: PPUSH
75174: CALL 17454 0 3
75178: ST_TO_ADDR
75179: GO 75225
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
75181: LD_ADDR_EXP 82
75185: PUSH
75186: LD_EXP 82
75190: PPUSH
75191: LD_VAR 0 4
75195: PUSH
75196: LD_EXP 82
75200: PUSH
75201: LD_VAR 0 4
75205: ARRAY
75206: PUSH
75207: LD_INT 1
75209: PLUS
75210: PUSH
75211: EMPTY
75212: LIST
75213: LIST
75214: PPUSH
75215: LD_VAR 0 1
75219: PPUSH
75220: CALL 17454 0 3
75224: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
75225: LD_VAR 0 1
75229: PPUSH
75230: CALL_OW 263
75234: PUSH
75235: LD_INT 2
75237: EQUAL
75238: IFFALSE 75258
// begin repeat wait ( 0 0$1 ) ;
75240: LD_INT 35
75242: PPUSH
75243: CALL_OW 67
// until IsControledBy ( vehicle ) ;
75247: LD_VAR 0 1
75251: PPUSH
75252: CALL_OW 312
75256: IFFALSE 75240
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
75258: LD_VAR 0 1
75262: PPUSH
75263: LD_EXP 87
75267: PUSH
75268: LD_VAR 0 4
75272: ARRAY
75273: PPUSH
75274: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
75278: LD_VAR 0 1
75282: PPUSH
75283: CALL_OW 263
75287: PUSH
75288: LD_INT 1
75290: NONEQUAL
75291: IFFALSE 75295
// break ;
75293: GO 75344
// repeat wait ( 0 0$1 ) ;
75295: LD_INT 35
75297: PPUSH
75298: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
75302: LD_VAR 0 1
75306: PPUSH
75307: LD_EXP 87
75311: PUSH
75312: LD_VAR 0 4
75316: ARRAY
75317: PPUSH
75318: CALL_OW 308
75322: IFFALSE 75295
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
75324: LD_VAR 0 1
75328: PPUSH
75329: CALL_OW 311
75333: PPUSH
75334: CALL_OW 121
// exit ;
75338: POP
75339: POP
75340: GO 75346
// end ; end ;
75342: GO 74999
75344: POP
75345: POP
// end ;
75346: LD_VAR 0 3
75350: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
75351: LD_INT 0
75353: PPUSH
75354: PPUSH
75355: PPUSH
75356: PPUSH
// if not mc_bases or not skirmish then
75357: LD_EXP 63
75361: NOT
75362: PUSH
75363: LD_EXP 61
75367: NOT
75368: OR
75369: IFFALSE 75373
// exit ;
75371: GO 75726
// repeat wait ( 0 0$1 ) ;
75373: LD_INT 35
75375: PPUSH
75376: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
75380: LD_VAR 0 2
75384: PPUSH
75385: LD_VAR 0 3
75389: PPUSH
75390: CALL_OW 284
75394: IFFALSE 75373
// if GetResourceTypeXY ( x , y ) = mat_artefact then
75396: LD_VAR 0 2
75400: PPUSH
75401: LD_VAR 0 3
75405: PPUSH
75406: CALL_OW 283
75410: PUSH
75411: LD_INT 4
75413: EQUAL
75414: IFFALSE 75418
// exit ;
75416: GO 75726
// for i = 1 to mc_bases do
75418: LD_ADDR_VAR 0 7
75422: PUSH
75423: DOUBLE
75424: LD_INT 1
75426: DEC
75427: ST_TO_ADDR
75428: LD_EXP 63
75432: PUSH
75433: FOR_TO
75434: IFFALSE 75724
// begin if mc_crates_area [ i ] then
75436: LD_EXP 81
75440: PUSH
75441: LD_VAR 0 7
75445: ARRAY
75446: IFFALSE 75557
// for j in mc_crates_area [ i ] do
75448: LD_ADDR_VAR 0 8
75452: PUSH
75453: LD_EXP 81
75457: PUSH
75458: LD_VAR 0 7
75462: ARRAY
75463: PUSH
75464: FOR_IN
75465: IFFALSE 75555
// if InArea ( x , y , j ) then
75467: LD_VAR 0 2
75471: PPUSH
75472: LD_VAR 0 3
75476: PPUSH
75477: LD_VAR 0 8
75481: PPUSH
75482: CALL_OW 309
75486: IFFALSE 75553
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
75488: LD_ADDR_EXP 79
75492: PUSH
75493: LD_EXP 79
75497: PPUSH
75498: LD_VAR 0 7
75502: PUSH
75503: LD_EXP 79
75507: PUSH
75508: LD_VAR 0 7
75512: ARRAY
75513: PUSH
75514: LD_INT 1
75516: PLUS
75517: PUSH
75518: EMPTY
75519: LIST
75520: LIST
75521: PPUSH
75522: LD_VAR 0 4
75526: PUSH
75527: LD_VAR 0 2
75531: PUSH
75532: LD_VAR 0 3
75536: PUSH
75537: EMPTY
75538: LIST
75539: LIST
75540: LIST
75541: PPUSH
75542: CALL 17454 0 3
75546: ST_TO_ADDR
// exit ;
75547: POP
75548: POP
75549: POP
75550: POP
75551: GO 75726
// end ;
75553: GO 75464
75555: POP
75556: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
75557: LD_ADDR_VAR 0 9
75561: PUSH
75562: LD_EXP 63
75566: PUSH
75567: LD_VAR 0 7
75571: ARRAY
75572: PPUSH
75573: LD_INT 2
75575: PUSH
75576: LD_INT 30
75578: PUSH
75579: LD_INT 0
75581: PUSH
75582: EMPTY
75583: LIST
75584: LIST
75585: PUSH
75586: LD_INT 30
75588: PUSH
75589: LD_INT 1
75591: PUSH
75592: EMPTY
75593: LIST
75594: LIST
75595: PUSH
75596: EMPTY
75597: LIST
75598: LIST
75599: LIST
75600: PPUSH
75601: CALL_OW 72
75605: ST_TO_ADDR
// if not depot then
75606: LD_VAR 0 9
75610: NOT
75611: IFFALSE 75615
// continue ;
75613: GO 75433
// for j in depot do
75615: LD_ADDR_VAR 0 8
75619: PUSH
75620: LD_VAR 0 9
75624: PUSH
75625: FOR_IN
75626: IFFALSE 75720
// if GetDistUnitXY ( j , x , y ) < 30 then
75628: LD_VAR 0 8
75632: PPUSH
75633: LD_VAR 0 2
75637: PPUSH
75638: LD_VAR 0 3
75642: PPUSH
75643: CALL_OW 297
75647: PUSH
75648: LD_INT 30
75650: LESS
75651: IFFALSE 75718
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
75653: LD_ADDR_EXP 79
75657: PUSH
75658: LD_EXP 79
75662: PPUSH
75663: LD_VAR 0 7
75667: PUSH
75668: LD_EXP 79
75672: PUSH
75673: LD_VAR 0 7
75677: ARRAY
75678: PUSH
75679: LD_INT 1
75681: PLUS
75682: PUSH
75683: EMPTY
75684: LIST
75685: LIST
75686: PPUSH
75687: LD_VAR 0 4
75691: PUSH
75692: LD_VAR 0 2
75696: PUSH
75697: LD_VAR 0 3
75701: PUSH
75702: EMPTY
75703: LIST
75704: LIST
75705: LIST
75706: PPUSH
75707: CALL 17454 0 3
75711: ST_TO_ADDR
// exit ;
75712: POP
75713: POP
75714: POP
75715: POP
75716: GO 75726
// end ;
75718: GO 75625
75720: POP
75721: POP
// end ;
75722: GO 75433
75724: POP
75725: POP
// end ;
75726: LD_VAR 0 6
75730: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
75731: LD_INT 0
75733: PPUSH
75734: PPUSH
75735: PPUSH
75736: PPUSH
// if not mc_bases or not skirmish then
75737: LD_EXP 63
75741: NOT
75742: PUSH
75743: LD_EXP 61
75747: NOT
75748: OR
75749: IFFALSE 75753
// exit ;
75751: GO 76030
// side := GetSide ( lab ) ;
75753: LD_ADDR_VAR 0 4
75757: PUSH
75758: LD_VAR 0 2
75762: PPUSH
75763: CALL_OW 255
75767: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
75768: LD_VAR 0 4
75772: PUSH
75773: LD_EXP 89
75777: IN
75778: NOT
75779: PUSH
75780: LD_EXP 90
75784: NOT
75785: OR
75786: PUSH
75787: LD_EXP 63
75791: NOT
75792: OR
75793: IFFALSE 75797
// exit ;
75795: GO 76030
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
75797: LD_ADDR_EXP 90
75801: PUSH
75802: LD_EXP 90
75806: PPUSH
75807: LD_VAR 0 4
75811: PPUSH
75812: LD_EXP 90
75816: PUSH
75817: LD_VAR 0 4
75821: ARRAY
75822: PUSH
75823: LD_VAR 0 1
75827: DIFF
75828: PPUSH
75829: CALL_OW 1
75833: ST_TO_ADDR
// for i = 1 to mc_bases do
75834: LD_ADDR_VAR 0 5
75838: PUSH
75839: DOUBLE
75840: LD_INT 1
75842: DEC
75843: ST_TO_ADDR
75844: LD_EXP 63
75848: PUSH
75849: FOR_TO
75850: IFFALSE 76028
// begin if lab in mc_bases [ i ] then
75852: LD_VAR 0 2
75856: PUSH
75857: LD_EXP 63
75861: PUSH
75862: LD_VAR 0 5
75866: ARRAY
75867: IN
75868: IFFALSE 76026
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
75870: LD_VAR 0 1
75874: PUSH
75875: LD_INT 11
75877: PUSH
75878: LD_INT 4
75880: PUSH
75881: LD_INT 3
75883: PUSH
75884: LD_INT 2
75886: PUSH
75887: EMPTY
75888: LIST
75889: LIST
75890: LIST
75891: LIST
75892: IN
75893: PUSH
75894: LD_EXP 93
75898: PUSH
75899: LD_VAR 0 5
75903: ARRAY
75904: AND
75905: IFFALSE 76026
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
75907: LD_ADDR_VAR 0 6
75911: PUSH
75912: LD_EXP 93
75916: PUSH
75917: LD_VAR 0 5
75921: ARRAY
75922: PUSH
75923: LD_INT 1
75925: ARRAY
75926: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
75927: LD_ADDR_EXP 93
75931: PUSH
75932: LD_EXP 93
75936: PPUSH
75937: LD_VAR 0 5
75941: PPUSH
75942: EMPTY
75943: PPUSH
75944: CALL_OW 1
75948: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
75949: LD_VAR 0 6
75953: PPUSH
75954: LD_INT 0
75956: PPUSH
75957: CALL_OW 109
// ComExitBuilding ( tmp ) ;
75961: LD_VAR 0 6
75965: PPUSH
75966: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
75970: LD_ADDR_EXP 92
75974: PUSH
75975: LD_EXP 92
75979: PPUSH
75980: LD_VAR 0 5
75984: PPUSH
75985: LD_EXP 92
75989: PUSH
75990: LD_VAR 0 5
75994: ARRAY
75995: PPUSH
75996: LD_INT 1
75998: PPUSH
75999: LD_VAR 0 6
76003: PPUSH
76004: CALL_OW 2
76008: PPUSH
76009: CALL_OW 1
76013: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
76014: LD_VAR 0 5
76018: PPUSH
76019: LD_INT 112
76021: PPUSH
76022: CALL 53042 0 2
// end ; end ; end ;
76026: GO 75849
76028: POP
76029: POP
// end ;
76030: LD_VAR 0 3
76034: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
76035: LD_INT 0
76037: PPUSH
76038: PPUSH
76039: PPUSH
76040: PPUSH
76041: PPUSH
76042: PPUSH
76043: PPUSH
76044: PPUSH
// if not mc_bases or not skirmish then
76045: LD_EXP 63
76049: NOT
76050: PUSH
76051: LD_EXP 61
76055: NOT
76056: OR
76057: IFFALSE 76061
// exit ;
76059: GO 77432
// for i = 1 to mc_bases do
76061: LD_ADDR_VAR 0 3
76065: PUSH
76066: DOUBLE
76067: LD_INT 1
76069: DEC
76070: ST_TO_ADDR
76071: LD_EXP 63
76075: PUSH
76076: FOR_TO
76077: IFFALSE 77430
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
76079: LD_VAR 0 1
76083: PUSH
76084: LD_EXP 63
76088: PUSH
76089: LD_VAR 0 3
76093: ARRAY
76094: IN
76095: PUSH
76096: LD_VAR 0 1
76100: PUSH
76101: LD_EXP 70
76105: PUSH
76106: LD_VAR 0 3
76110: ARRAY
76111: IN
76112: OR
76113: PUSH
76114: LD_VAR 0 1
76118: PUSH
76119: LD_EXP 85
76123: PUSH
76124: LD_VAR 0 3
76128: ARRAY
76129: IN
76130: OR
76131: PUSH
76132: LD_VAR 0 1
76136: PUSH
76137: LD_EXP 82
76141: PUSH
76142: LD_VAR 0 3
76146: ARRAY
76147: IN
76148: OR
76149: PUSH
76150: LD_VAR 0 1
76154: PUSH
76155: LD_EXP 92
76159: PUSH
76160: LD_VAR 0 3
76164: ARRAY
76165: IN
76166: OR
76167: PUSH
76168: LD_VAR 0 1
76172: PUSH
76173: LD_EXP 93
76177: PUSH
76178: LD_VAR 0 3
76182: ARRAY
76183: IN
76184: OR
76185: IFFALSE 77428
// begin if un in mc_ape [ i ] then
76187: LD_VAR 0 1
76191: PUSH
76192: LD_EXP 92
76196: PUSH
76197: LD_VAR 0 3
76201: ARRAY
76202: IN
76203: IFFALSE 76242
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
76205: LD_ADDR_EXP 92
76209: PUSH
76210: LD_EXP 92
76214: PPUSH
76215: LD_VAR 0 3
76219: PPUSH
76220: LD_EXP 92
76224: PUSH
76225: LD_VAR 0 3
76229: ARRAY
76230: PUSH
76231: LD_VAR 0 1
76235: DIFF
76236: PPUSH
76237: CALL_OW 1
76241: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
76242: LD_VAR 0 1
76246: PUSH
76247: LD_EXP 93
76251: PUSH
76252: LD_VAR 0 3
76256: ARRAY
76257: IN
76258: IFFALSE 76282
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
76260: LD_ADDR_EXP 93
76264: PUSH
76265: LD_EXP 93
76269: PPUSH
76270: LD_VAR 0 3
76274: PPUSH
76275: EMPTY
76276: PPUSH
76277: CALL_OW 1
76281: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
76282: LD_VAR 0 1
76286: PPUSH
76287: CALL_OW 247
76291: PUSH
76292: LD_INT 2
76294: EQUAL
76295: PUSH
76296: LD_VAR 0 1
76300: PPUSH
76301: CALL_OW 110
76305: PUSH
76306: LD_INT 20
76308: EQUAL
76309: PUSH
76310: LD_VAR 0 1
76314: PUSH
76315: LD_EXP 85
76319: PUSH
76320: LD_VAR 0 3
76324: ARRAY
76325: IN
76326: OR
76327: PUSH
76328: LD_VAR 0 1
76332: PPUSH
76333: CALL_OW 264
76337: PUSH
76338: LD_INT 12
76340: PUSH
76341: LD_INT 51
76343: PUSH
76344: LD_EXP 49
76348: PUSH
76349: LD_INT 32
76351: PUSH
76352: LD_INT 13
76354: PUSH
76355: LD_INT 52
76357: PUSH
76358: LD_INT 31
76360: PUSH
76361: EMPTY
76362: LIST
76363: LIST
76364: LIST
76365: LIST
76366: LIST
76367: LIST
76368: LIST
76369: IN
76370: OR
76371: AND
76372: IFFALSE 76680
// begin if un in mc_defender [ i ] then
76374: LD_VAR 0 1
76378: PUSH
76379: LD_EXP 85
76383: PUSH
76384: LD_VAR 0 3
76388: ARRAY
76389: IN
76390: IFFALSE 76429
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
76392: LD_ADDR_EXP 85
76396: PUSH
76397: LD_EXP 85
76401: PPUSH
76402: LD_VAR 0 3
76406: PPUSH
76407: LD_EXP 85
76411: PUSH
76412: LD_VAR 0 3
76416: ARRAY
76417: PUSH
76418: LD_VAR 0 1
76422: DIFF
76423: PPUSH
76424: CALL_OW 1
76428: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
76429: LD_ADDR_VAR 0 8
76433: PUSH
76434: LD_VAR 0 3
76438: PPUSH
76439: LD_INT 3
76441: PPUSH
76442: CALL 73098 0 2
76446: ST_TO_ADDR
// if fac then
76447: LD_VAR 0 8
76451: IFFALSE 76680
// begin for j in fac do
76453: LD_ADDR_VAR 0 4
76457: PUSH
76458: LD_VAR 0 8
76462: PUSH
76463: FOR_IN
76464: IFFALSE 76678
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
76466: LD_ADDR_VAR 0 9
76470: PUSH
76471: LD_VAR 0 8
76475: PPUSH
76476: LD_VAR 0 1
76480: PPUSH
76481: CALL_OW 265
76485: PPUSH
76486: LD_VAR 0 1
76490: PPUSH
76491: CALL_OW 262
76495: PPUSH
76496: LD_VAR 0 1
76500: PPUSH
76501: CALL_OW 263
76505: PPUSH
76506: LD_VAR 0 1
76510: PPUSH
76511: CALL_OW 264
76515: PPUSH
76516: CALL 14986 0 5
76520: ST_TO_ADDR
// if components then
76521: LD_VAR 0 9
76525: IFFALSE 76676
// begin if GetWeapon ( un ) = ar_control_tower then
76527: LD_VAR 0 1
76531: PPUSH
76532: CALL_OW 264
76536: PUSH
76537: LD_INT 31
76539: EQUAL
76540: IFFALSE 76657
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
76542: LD_VAR 0 1
76546: PPUSH
76547: CALL_OW 311
76551: PPUSH
76552: LD_INT 0
76554: PPUSH
76555: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
76559: LD_ADDR_EXP 103
76563: PUSH
76564: LD_EXP 103
76568: PPUSH
76569: LD_VAR 0 3
76573: PPUSH
76574: LD_EXP 103
76578: PUSH
76579: LD_VAR 0 3
76583: ARRAY
76584: PUSH
76585: LD_VAR 0 1
76589: PPUSH
76590: CALL_OW 311
76594: DIFF
76595: PPUSH
76596: CALL_OW 1
76600: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
76601: LD_ADDR_VAR 0 7
76605: PUSH
76606: LD_EXP 84
76610: PUSH
76611: LD_VAR 0 3
76615: ARRAY
76616: PPUSH
76617: LD_INT 1
76619: PPUSH
76620: LD_VAR 0 9
76624: PPUSH
76625: CALL_OW 2
76629: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
76630: LD_ADDR_EXP 84
76634: PUSH
76635: LD_EXP 84
76639: PPUSH
76640: LD_VAR 0 3
76644: PPUSH
76645: LD_VAR 0 7
76649: PPUSH
76650: CALL_OW 1
76654: ST_TO_ADDR
// end else
76655: GO 76674
// MC_InsertProduceList ( i , [ components ] ) ;
76657: LD_VAR 0 3
76661: PPUSH
76662: LD_VAR 0 9
76666: PUSH
76667: EMPTY
76668: LIST
76669: PPUSH
76670: CALL 72643 0 2
// break ;
76674: GO 76678
// end ; end ;
76676: GO 76463
76678: POP
76679: POP
// end ; end ; if GetType ( un ) = unit_building then
76680: LD_VAR 0 1
76684: PPUSH
76685: CALL_OW 247
76689: PUSH
76690: LD_INT 3
76692: EQUAL
76693: IFFALSE 77096
// begin btype := GetBType ( un ) ;
76695: LD_ADDR_VAR 0 5
76699: PUSH
76700: LD_VAR 0 1
76704: PPUSH
76705: CALL_OW 266
76709: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
76710: LD_VAR 0 5
76714: PUSH
76715: LD_INT 29
76717: PUSH
76718: LD_INT 30
76720: PUSH
76721: EMPTY
76722: LIST
76723: LIST
76724: IN
76725: IFFALSE 76798
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
76727: LD_VAR 0 1
76731: PPUSH
76732: CALL_OW 250
76736: PPUSH
76737: LD_VAR 0 1
76741: PPUSH
76742: CALL_OW 251
76746: PPUSH
76747: LD_VAR 0 1
76751: PPUSH
76752: CALL_OW 255
76756: PPUSH
76757: CALL_OW 440
76761: NOT
76762: IFFALSE 76798
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
76764: LD_VAR 0 1
76768: PPUSH
76769: CALL_OW 250
76773: PPUSH
76774: LD_VAR 0 1
76778: PPUSH
76779: CALL_OW 251
76783: PPUSH
76784: LD_VAR 0 1
76788: PPUSH
76789: CALL_OW 255
76793: PPUSH
76794: CALL_OW 441
// end ; if btype = b_warehouse then
76798: LD_VAR 0 5
76802: PUSH
76803: LD_INT 1
76805: EQUAL
76806: IFFALSE 76824
// begin btype := b_depot ;
76808: LD_ADDR_VAR 0 5
76812: PUSH
76813: LD_INT 0
76815: ST_TO_ADDR
// pos := 1 ;
76816: LD_ADDR_VAR 0 6
76820: PUSH
76821: LD_INT 1
76823: ST_TO_ADDR
// end ; if btype = b_factory then
76824: LD_VAR 0 5
76828: PUSH
76829: LD_INT 3
76831: EQUAL
76832: IFFALSE 76850
// begin btype := b_workshop ;
76834: LD_ADDR_VAR 0 5
76838: PUSH
76839: LD_INT 2
76841: ST_TO_ADDR
// pos := 1 ;
76842: LD_ADDR_VAR 0 6
76846: PUSH
76847: LD_INT 1
76849: ST_TO_ADDR
// end ; if btype = b_barracks then
76850: LD_VAR 0 5
76854: PUSH
76855: LD_INT 5
76857: EQUAL
76858: IFFALSE 76868
// btype := b_armoury ;
76860: LD_ADDR_VAR 0 5
76864: PUSH
76865: LD_INT 4
76867: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
76868: LD_VAR 0 5
76872: PUSH
76873: LD_INT 7
76875: PUSH
76876: LD_INT 8
76878: PUSH
76879: EMPTY
76880: LIST
76881: LIST
76882: IN
76883: IFFALSE 76893
// btype := b_lab ;
76885: LD_ADDR_VAR 0 5
76889: PUSH
76890: LD_INT 6
76892: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
76893: LD_ADDR_EXP 68
76897: PUSH
76898: LD_EXP 68
76902: PPUSH
76903: LD_VAR 0 3
76907: PUSH
76908: LD_EXP 68
76912: PUSH
76913: LD_VAR 0 3
76917: ARRAY
76918: PUSH
76919: LD_INT 1
76921: PLUS
76922: PUSH
76923: EMPTY
76924: LIST
76925: LIST
76926: PPUSH
76927: LD_VAR 0 5
76931: PUSH
76932: LD_VAR 0 1
76936: PPUSH
76937: CALL_OW 250
76941: PUSH
76942: LD_VAR 0 1
76946: PPUSH
76947: CALL_OW 251
76951: PUSH
76952: LD_VAR 0 1
76956: PPUSH
76957: CALL_OW 254
76961: PUSH
76962: EMPTY
76963: LIST
76964: LIST
76965: LIST
76966: LIST
76967: PPUSH
76968: CALL 17454 0 3
76972: ST_TO_ADDR
// if pos = 1 then
76973: LD_VAR 0 6
76977: PUSH
76978: LD_INT 1
76980: EQUAL
76981: IFFALSE 77096
// begin tmp := mc_build_list [ i ] ;
76983: LD_ADDR_VAR 0 7
76987: PUSH
76988: LD_EXP 68
76992: PUSH
76993: LD_VAR 0 3
76997: ARRAY
76998: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
76999: LD_VAR 0 7
77003: PPUSH
77004: LD_INT 2
77006: PUSH
77007: LD_INT 30
77009: PUSH
77010: LD_INT 0
77012: PUSH
77013: EMPTY
77014: LIST
77015: LIST
77016: PUSH
77017: LD_INT 30
77019: PUSH
77020: LD_INT 1
77022: PUSH
77023: EMPTY
77024: LIST
77025: LIST
77026: PUSH
77027: EMPTY
77028: LIST
77029: LIST
77030: LIST
77031: PPUSH
77032: CALL_OW 72
77036: IFFALSE 77046
// pos := 2 ;
77038: LD_ADDR_VAR 0 6
77042: PUSH
77043: LD_INT 2
77045: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
77046: LD_ADDR_VAR 0 7
77050: PUSH
77051: LD_VAR 0 7
77055: PPUSH
77056: LD_VAR 0 6
77060: PPUSH
77061: LD_VAR 0 7
77065: PPUSH
77066: CALL 17780 0 3
77070: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
77071: LD_ADDR_EXP 68
77075: PUSH
77076: LD_EXP 68
77080: PPUSH
77081: LD_VAR 0 3
77085: PPUSH
77086: LD_VAR 0 7
77090: PPUSH
77091: CALL_OW 1
77095: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
77096: LD_VAR 0 1
77100: PUSH
77101: LD_EXP 63
77105: PUSH
77106: LD_VAR 0 3
77110: ARRAY
77111: IN
77112: IFFALSE 77151
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
77114: LD_ADDR_EXP 63
77118: PUSH
77119: LD_EXP 63
77123: PPUSH
77124: LD_VAR 0 3
77128: PPUSH
77129: LD_EXP 63
77133: PUSH
77134: LD_VAR 0 3
77138: ARRAY
77139: PUSH
77140: LD_VAR 0 1
77144: DIFF
77145: PPUSH
77146: CALL_OW 1
77150: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
77151: LD_VAR 0 1
77155: PUSH
77156: LD_EXP 70
77160: PUSH
77161: LD_VAR 0 3
77165: ARRAY
77166: IN
77167: IFFALSE 77206
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
77169: LD_ADDR_EXP 70
77173: PUSH
77174: LD_EXP 70
77178: PPUSH
77179: LD_VAR 0 3
77183: PPUSH
77184: LD_EXP 70
77188: PUSH
77189: LD_VAR 0 3
77193: ARRAY
77194: PUSH
77195: LD_VAR 0 1
77199: DIFF
77200: PPUSH
77201: CALL_OW 1
77205: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
77206: LD_VAR 0 1
77210: PUSH
77211: LD_EXP 82
77215: PUSH
77216: LD_VAR 0 3
77220: ARRAY
77221: IN
77222: IFFALSE 77261
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
77224: LD_ADDR_EXP 82
77228: PUSH
77229: LD_EXP 82
77233: PPUSH
77234: LD_VAR 0 3
77238: PPUSH
77239: LD_EXP 82
77243: PUSH
77244: LD_VAR 0 3
77248: ARRAY
77249: PUSH
77250: LD_VAR 0 1
77254: DIFF
77255: PPUSH
77256: CALL_OW 1
77260: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
77261: LD_VAR 0 1
77265: PUSH
77266: LD_EXP 85
77270: PUSH
77271: LD_VAR 0 3
77275: ARRAY
77276: IN
77277: IFFALSE 77316
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
77279: LD_ADDR_EXP 85
77283: PUSH
77284: LD_EXP 85
77288: PPUSH
77289: LD_VAR 0 3
77293: PPUSH
77294: LD_EXP 85
77298: PUSH
77299: LD_VAR 0 3
77303: ARRAY
77304: PUSH
77305: LD_VAR 0 1
77309: DIFF
77310: PPUSH
77311: CALL_OW 1
77315: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
77316: LD_VAR 0 1
77320: PUSH
77321: LD_EXP 72
77325: PUSH
77326: LD_VAR 0 3
77330: ARRAY
77331: IN
77332: IFFALSE 77371
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
77334: LD_ADDR_EXP 72
77338: PUSH
77339: LD_EXP 72
77343: PPUSH
77344: LD_VAR 0 3
77348: PPUSH
77349: LD_EXP 72
77353: PUSH
77354: LD_VAR 0 3
77358: ARRAY
77359: PUSH
77360: LD_VAR 0 1
77364: DIFF
77365: PPUSH
77366: CALL_OW 1
77370: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
77371: LD_VAR 0 1
77375: PUSH
77376: LD_EXP 71
77380: PUSH
77381: LD_VAR 0 3
77385: ARRAY
77386: IN
77387: IFFALSE 77426
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
77389: LD_ADDR_EXP 71
77393: PUSH
77394: LD_EXP 71
77398: PPUSH
77399: LD_VAR 0 3
77403: PPUSH
77404: LD_EXP 71
77408: PUSH
77409: LD_VAR 0 3
77413: ARRAY
77414: PUSH
77415: LD_VAR 0 1
77419: DIFF
77420: PPUSH
77421: CALL_OW 1
77425: ST_TO_ADDR
// end ; break ;
77426: GO 77430
// end ;
77428: GO 76076
77430: POP
77431: POP
// end ;
77432: LD_VAR 0 2
77436: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
77437: LD_INT 0
77439: PPUSH
77440: PPUSH
77441: PPUSH
// if not mc_bases or not skirmish then
77442: LD_EXP 63
77446: NOT
77447: PUSH
77448: LD_EXP 61
77452: NOT
77453: OR
77454: IFFALSE 77458
// exit ;
77456: GO 77673
// for i = 1 to mc_bases do
77458: LD_ADDR_VAR 0 3
77462: PUSH
77463: DOUBLE
77464: LD_INT 1
77466: DEC
77467: ST_TO_ADDR
77468: LD_EXP 63
77472: PUSH
77473: FOR_TO
77474: IFFALSE 77671
// begin if building in mc_construct_list [ i ] then
77476: LD_VAR 0 1
77480: PUSH
77481: LD_EXP 70
77485: PUSH
77486: LD_VAR 0 3
77490: ARRAY
77491: IN
77492: IFFALSE 77669
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
77494: LD_ADDR_EXP 70
77498: PUSH
77499: LD_EXP 70
77503: PPUSH
77504: LD_VAR 0 3
77508: PPUSH
77509: LD_EXP 70
77513: PUSH
77514: LD_VAR 0 3
77518: ARRAY
77519: PUSH
77520: LD_VAR 0 1
77524: DIFF
77525: PPUSH
77526: CALL_OW 1
77530: ST_TO_ADDR
// if building in mc_lab [ i ] then
77531: LD_VAR 0 1
77535: PUSH
77536: LD_EXP 96
77540: PUSH
77541: LD_VAR 0 3
77545: ARRAY
77546: IN
77547: IFFALSE 77602
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
77549: LD_ADDR_EXP 97
77553: PUSH
77554: LD_EXP 97
77558: PPUSH
77559: LD_VAR 0 3
77563: PPUSH
77564: LD_EXP 97
77568: PUSH
77569: LD_VAR 0 3
77573: ARRAY
77574: PPUSH
77575: LD_INT 1
77577: PPUSH
77578: LD_EXP 97
77582: PUSH
77583: LD_VAR 0 3
77587: ARRAY
77588: PPUSH
77589: LD_INT 0
77591: PPUSH
77592: CALL 16872 0 4
77596: PPUSH
77597: CALL_OW 1
77601: ST_TO_ADDR
// if not building in mc_bases [ i ] then
77602: LD_VAR 0 1
77606: PUSH
77607: LD_EXP 63
77611: PUSH
77612: LD_VAR 0 3
77616: ARRAY
77617: IN
77618: NOT
77619: IFFALSE 77665
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
77621: LD_ADDR_EXP 63
77625: PUSH
77626: LD_EXP 63
77630: PPUSH
77631: LD_VAR 0 3
77635: PUSH
77636: LD_EXP 63
77640: PUSH
77641: LD_VAR 0 3
77645: ARRAY
77646: PUSH
77647: LD_INT 1
77649: PLUS
77650: PUSH
77651: EMPTY
77652: LIST
77653: LIST
77654: PPUSH
77655: LD_VAR 0 1
77659: PPUSH
77660: CALL 17454 0 3
77664: ST_TO_ADDR
// exit ;
77665: POP
77666: POP
77667: GO 77673
// end ; end ;
77669: GO 77473
77671: POP
77672: POP
// end ;
77673: LD_VAR 0 2
77677: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
77678: LD_INT 0
77680: PPUSH
77681: PPUSH
77682: PPUSH
77683: PPUSH
77684: PPUSH
77685: PPUSH
77686: PPUSH
// if not mc_bases or not skirmish then
77687: LD_EXP 63
77691: NOT
77692: PUSH
77693: LD_EXP 61
77697: NOT
77698: OR
77699: IFFALSE 77703
// exit ;
77701: GO 78364
// for i = 1 to mc_bases do
77703: LD_ADDR_VAR 0 3
77707: PUSH
77708: DOUBLE
77709: LD_INT 1
77711: DEC
77712: ST_TO_ADDR
77713: LD_EXP 63
77717: PUSH
77718: FOR_TO
77719: IFFALSE 78362
// begin if building in mc_construct_list [ i ] then
77721: LD_VAR 0 1
77725: PUSH
77726: LD_EXP 70
77730: PUSH
77731: LD_VAR 0 3
77735: ARRAY
77736: IN
77737: IFFALSE 78360
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
77739: LD_ADDR_EXP 70
77743: PUSH
77744: LD_EXP 70
77748: PPUSH
77749: LD_VAR 0 3
77753: PPUSH
77754: LD_EXP 70
77758: PUSH
77759: LD_VAR 0 3
77763: ARRAY
77764: PUSH
77765: LD_VAR 0 1
77769: DIFF
77770: PPUSH
77771: CALL_OW 1
77775: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
77776: LD_ADDR_EXP 63
77780: PUSH
77781: LD_EXP 63
77785: PPUSH
77786: LD_VAR 0 3
77790: PUSH
77791: LD_EXP 63
77795: PUSH
77796: LD_VAR 0 3
77800: ARRAY
77801: PUSH
77802: LD_INT 1
77804: PLUS
77805: PUSH
77806: EMPTY
77807: LIST
77808: LIST
77809: PPUSH
77810: LD_VAR 0 1
77814: PPUSH
77815: CALL 17454 0 3
77819: ST_TO_ADDR
// btype := GetBType ( building ) ;
77820: LD_ADDR_VAR 0 5
77824: PUSH
77825: LD_VAR 0 1
77829: PPUSH
77830: CALL_OW 266
77834: ST_TO_ADDR
// side := GetSide ( building ) ;
77835: LD_ADDR_VAR 0 8
77839: PUSH
77840: LD_VAR 0 1
77844: PPUSH
77845: CALL_OW 255
77849: ST_TO_ADDR
// if btype = b_lab then
77850: LD_VAR 0 5
77854: PUSH
77855: LD_INT 6
77857: EQUAL
77858: IFFALSE 77908
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
77860: LD_ADDR_EXP 96
77864: PUSH
77865: LD_EXP 96
77869: PPUSH
77870: LD_VAR 0 3
77874: PUSH
77875: LD_EXP 96
77879: PUSH
77880: LD_VAR 0 3
77884: ARRAY
77885: PUSH
77886: LD_INT 1
77888: PLUS
77889: PUSH
77890: EMPTY
77891: LIST
77892: LIST
77893: PPUSH
77894: LD_VAR 0 1
77898: PPUSH
77899: CALL 17454 0 3
77903: ST_TO_ADDR
// exit ;
77904: POP
77905: POP
77906: GO 78364
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
77908: LD_VAR 0 5
77912: PUSH
77913: LD_INT 0
77915: PUSH
77916: LD_INT 2
77918: PUSH
77919: LD_INT 4
77921: PUSH
77922: EMPTY
77923: LIST
77924: LIST
77925: LIST
77926: IN
77927: IFFALSE 78051
// begin if btype = b_armoury then
77929: LD_VAR 0 5
77933: PUSH
77934: LD_INT 4
77936: EQUAL
77937: IFFALSE 77947
// btype := b_barracks ;
77939: LD_ADDR_VAR 0 5
77943: PUSH
77944: LD_INT 5
77946: ST_TO_ADDR
// if btype = b_depot then
77947: LD_VAR 0 5
77951: PUSH
77952: LD_INT 0
77954: EQUAL
77955: IFFALSE 77965
// btype := b_warehouse ;
77957: LD_ADDR_VAR 0 5
77961: PUSH
77962: LD_INT 1
77964: ST_TO_ADDR
// if btype = b_workshop then
77965: LD_VAR 0 5
77969: PUSH
77970: LD_INT 2
77972: EQUAL
77973: IFFALSE 77983
// btype := b_factory ;
77975: LD_ADDR_VAR 0 5
77979: PUSH
77980: LD_INT 3
77982: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
77983: LD_VAR 0 5
77987: PPUSH
77988: LD_VAR 0 8
77992: PPUSH
77993: CALL_OW 323
77997: PUSH
77998: LD_INT 1
78000: EQUAL
78001: IFFALSE 78047
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
78003: LD_ADDR_EXP 95
78007: PUSH
78008: LD_EXP 95
78012: PPUSH
78013: LD_VAR 0 3
78017: PUSH
78018: LD_EXP 95
78022: PUSH
78023: LD_VAR 0 3
78027: ARRAY
78028: PUSH
78029: LD_INT 1
78031: PLUS
78032: PUSH
78033: EMPTY
78034: LIST
78035: LIST
78036: PPUSH
78037: LD_VAR 0 1
78041: PPUSH
78042: CALL 17454 0 3
78046: ST_TO_ADDR
// exit ;
78047: POP
78048: POP
78049: GO 78364
// end ; if btype in [ b_bunker , b_turret ] then
78051: LD_VAR 0 5
78055: PUSH
78056: LD_INT 32
78058: PUSH
78059: LD_INT 33
78061: PUSH
78062: EMPTY
78063: LIST
78064: LIST
78065: IN
78066: IFFALSE 78356
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
78068: LD_ADDR_EXP 71
78072: PUSH
78073: LD_EXP 71
78077: PPUSH
78078: LD_VAR 0 3
78082: PUSH
78083: LD_EXP 71
78087: PUSH
78088: LD_VAR 0 3
78092: ARRAY
78093: PUSH
78094: LD_INT 1
78096: PLUS
78097: PUSH
78098: EMPTY
78099: LIST
78100: LIST
78101: PPUSH
78102: LD_VAR 0 1
78106: PPUSH
78107: CALL 17454 0 3
78111: ST_TO_ADDR
// if btype = b_bunker then
78112: LD_VAR 0 5
78116: PUSH
78117: LD_INT 32
78119: EQUAL
78120: IFFALSE 78356
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
78122: LD_ADDR_EXP 72
78126: PUSH
78127: LD_EXP 72
78131: PPUSH
78132: LD_VAR 0 3
78136: PUSH
78137: LD_EXP 72
78141: PUSH
78142: LD_VAR 0 3
78146: ARRAY
78147: PUSH
78148: LD_INT 1
78150: PLUS
78151: PUSH
78152: EMPTY
78153: LIST
78154: LIST
78155: PPUSH
78156: LD_VAR 0 1
78160: PPUSH
78161: CALL 17454 0 3
78165: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
78166: LD_ADDR_VAR 0 6
78170: PUSH
78171: LD_EXP 63
78175: PUSH
78176: LD_VAR 0 3
78180: ARRAY
78181: PPUSH
78182: LD_INT 25
78184: PUSH
78185: LD_INT 1
78187: PUSH
78188: EMPTY
78189: LIST
78190: LIST
78191: PUSH
78192: LD_INT 3
78194: PUSH
78195: LD_INT 54
78197: PUSH
78198: EMPTY
78199: LIST
78200: PUSH
78201: EMPTY
78202: LIST
78203: LIST
78204: PUSH
78205: EMPTY
78206: LIST
78207: LIST
78208: PPUSH
78209: CALL_OW 72
78213: ST_TO_ADDR
// if tmp then
78214: LD_VAR 0 6
78218: IFFALSE 78224
// exit ;
78220: POP
78221: POP
78222: GO 78364
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
78224: LD_ADDR_VAR 0 6
78228: PUSH
78229: LD_EXP 63
78233: PUSH
78234: LD_VAR 0 3
78238: ARRAY
78239: PPUSH
78240: LD_INT 2
78242: PUSH
78243: LD_INT 30
78245: PUSH
78246: LD_INT 4
78248: PUSH
78249: EMPTY
78250: LIST
78251: LIST
78252: PUSH
78253: LD_INT 30
78255: PUSH
78256: LD_INT 5
78258: PUSH
78259: EMPTY
78260: LIST
78261: LIST
78262: PUSH
78263: EMPTY
78264: LIST
78265: LIST
78266: LIST
78267: PPUSH
78268: CALL_OW 72
78272: ST_TO_ADDR
// if not tmp then
78273: LD_VAR 0 6
78277: NOT
78278: IFFALSE 78284
// exit ;
78280: POP
78281: POP
78282: GO 78364
// for j in tmp do
78284: LD_ADDR_VAR 0 4
78288: PUSH
78289: LD_VAR 0 6
78293: PUSH
78294: FOR_IN
78295: IFFALSE 78354
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
78297: LD_ADDR_VAR 0 7
78301: PUSH
78302: LD_VAR 0 4
78306: PPUSH
78307: CALL_OW 313
78311: PPUSH
78312: LD_INT 25
78314: PUSH
78315: LD_INT 1
78317: PUSH
78318: EMPTY
78319: LIST
78320: LIST
78321: PPUSH
78322: CALL_OW 72
78326: ST_TO_ADDR
// if units then
78327: LD_VAR 0 7
78331: IFFALSE 78352
// begin ComExitBuilding ( units [ 1 ] ) ;
78333: LD_VAR 0 7
78337: PUSH
78338: LD_INT 1
78340: ARRAY
78341: PPUSH
78342: CALL_OW 122
// exit ;
78346: POP
78347: POP
78348: POP
78349: POP
78350: GO 78364
// end ; end ;
78352: GO 78294
78354: POP
78355: POP
// end ; end ; exit ;
78356: POP
78357: POP
78358: GO 78364
// end ; end ;
78360: GO 77718
78362: POP
78363: POP
// end ;
78364: LD_VAR 0 2
78368: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
78369: LD_INT 0
78371: PPUSH
78372: PPUSH
78373: PPUSH
78374: PPUSH
78375: PPUSH
78376: PPUSH
78377: PPUSH
// if not mc_bases or not skirmish then
78378: LD_EXP 63
78382: NOT
78383: PUSH
78384: LD_EXP 61
78388: NOT
78389: OR
78390: IFFALSE 78394
// exit ;
78392: GO 78625
// btype := GetBType ( building ) ;
78394: LD_ADDR_VAR 0 6
78398: PUSH
78399: LD_VAR 0 1
78403: PPUSH
78404: CALL_OW 266
78408: ST_TO_ADDR
// x := GetX ( building ) ;
78409: LD_ADDR_VAR 0 7
78413: PUSH
78414: LD_VAR 0 1
78418: PPUSH
78419: CALL_OW 250
78423: ST_TO_ADDR
// y := GetY ( building ) ;
78424: LD_ADDR_VAR 0 8
78428: PUSH
78429: LD_VAR 0 1
78433: PPUSH
78434: CALL_OW 251
78438: ST_TO_ADDR
// d := GetDir ( building ) ;
78439: LD_ADDR_VAR 0 9
78443: PUSH
78444: LD_VAR 0 1
78448: PPUSH
78449: CALL_OW 254
78453: ST_TO_ADDR
// for i = 1 to mc_bases do
78454: LD_ADDR_VAR 0 4
78458: PUSH
78459: DOUBLE
78460: LD_INT 1
78462: DEC
78463: ST_TO_ADDR
78464: LD_EXP 63
78468: PUSH
78469: FOR_TO
78470: IFFALSE 78623
// begin if not mc_build_list [ i ] then
78472: LD_EXP 68
78476: PUSH
78477: LD_VAR 0 4
78481: ARRAY
78482: NOT
78483: IFFALSE 78487
// continue ;
78485: GO 78469
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
78487: LD_VAR 0 6
78491: PUSH
78492: LD_VAR 0 7
78496: PUSH
78497: LD_VAR 0 8
78501: PUSH
78502: LD_VAR 0 9
78506: PUSH
78507: EMPTY
78508: LIST
78509: LIST
78510: LIST
78511: LIST
78512: PPUSH
78513: LD_EXP 68
78517: PUSH
78518: LD_VAR 0 4
78522: ARRAY
78523: PUSH
78524: LD_INT 1
78526: ARRAY
78527: PPUSH
78528: CALL 23623 0 2
78532: IFFALSE 78621
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
78534: LD_ADDR_EXP 68
78538: PUSH
78539: LD_EXP 68
78543: PPUSH
78544: LD_VAR 0 4
78548: PPUSH
78549: LD_EXP 68
78553: PUSH
78554: LD_VAR 0 4
78558: ARRAY
78559: PPUSH
78560: LD_INT 1
78562: PPUSH
78563: CALL_OW 3
78567: PPUSH
78568: CALL_OW 1
78572: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
78573: LD_ADDR_EXP 70
78577: PUSH
78578: LD_EXP 70
78582: PPUSH
78583: LD_VAR 0 4
78587: PUSH
78588: LD_EXP 70
78592: PUSH
78593: LD_VAR 0 4
78597: ARRAY
78598: PUSH
78599: LD_INT 1
78601: PLUS
78602: PUSH
78603: EMPTY
78604: LIST
78605: LIST
78606: PPUSH
78607: LD_VAR 0 1
78611: PPUSH
78612: CALL 17454 0 3
78616: ST_TO_ADDR
// exit ;
78617: POP
78618: POP
78619: GO 78625
// end ; end ;
78621: GO 78469
78623: POP
78624: POP
// end ;
78625: LD_VAR 0 3
78629: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
78630: LD_INT 0
78632: PPUSH
78633: PPUSH
78634: PPUSH
// if not mc_bases or not skirmish then
78635: LD_EXP 63
78639: NOT
78640: PUSH
78641: LD_EXP 61
78645: NOT
78646: OR
78647: IFFALSE 78651
// exit ;
78649: GO 78841
// for i = 1 to mc_bases do
78651: LD_ADDR_VAR 0 4
78655: PUSH
78656: DOUBLE
78657: LD_INT 1
78659: DEC
78660: ST_TO_ADDR
78661: LD_EXP 63
78665: PUSH
78666: FOR_TO
78667: IFFALSE 78754
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
78669: LD_VAR 0 1
78673: PUSH
78674: LD_EXP 71
78678: PUSH
78679: LD_VAR 0 4
78683: ARRAY
78684: IN
78685: PUSH
78686: LD_VAR 0 1
78690: PUSH
78691: LD_EXP 72
78695: PUSH
78696: LD_VAR 0 4
78700: ARRAY
78701: IN
78702: NOT
78703: AND
78704: IFFALSE 78752
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
78706: LD_ADDR_EXP 72
78710: PUSH
78711: LD_EXP 72
78715: PPUSH
78716: LD_VAR 0 4
78720: PUSH
78721: LD_EXP 72
78725: PUSH
78726: LD_VAR 0 4
78730: ARRAY
78731: PUSH
78732: LD_INT 1
78734: PLUS
78735: PUSH
78736: EMPTY
78737: LIST
78738: LIST
78739: PPUSH
78740: LD_VAR 0 1
78744: PPUSH
78745: CALL 17454 0 3
78749: ST_TO_ADDR
// break ;
78750: GO 78754
// end ; end ;
78752: GO 78666
78754: POP
78755: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
78756: LD_VAR 0 1
78760: PPUSH
78761: CALL_OW 257
78765: PUSH
78766: LD_EXP 89
78770: IN
78771: PUSH
78772: LD_VAR 0 1
78776: PPUSH
78777: CALL_OW 266
78781: PUSH
78782: LD_INT 5
78784: EQUAL
78785: AND
78786: PUSH
78787: LD_VAR 0 2
78791: PPUSH
78792: CALL_OW 110
78796: PUSH
78797: LD_INT 18
78799: NONEQUAL
78800: AND
78801: IFFALSE 78841
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
78803: LD_VAR 0 2
78807: PPUSH
78808: CALL_OW 257
78812: PUSH
78813: LD_INT 5
78815: PUSH
78816: LD_INT 8
78818: PUSH
78819: LD_INT 9
78821: PUSH
78822: EMPTY
78823: LIST
78824: LIST
78825: LIST
78826: IN
78827: IFFALSE 78841
// SetClass ( unit , 1 ) ;
78829: LD_VAR 0 2
78833: PPUSH
78834: LD_INT 1
78836: PPUSH
78837: CALL_OW 336
// end ;
78841: LD_VAR 0 3
78845: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
78846: LD_INT 0
78848: PPUSH
78849: PPUSH
// if not mc_bases or not skirmish then
78850: LD_EXP 63
78854: NOT
78855: PUSH
78856: LD_EXP 61
78860: NOT
78861: OR
78862: IFFALSE 78866
// exit ;
78864: GO 78982
// if GetLives ( abandoned_vehicle ) > 250 then
78866: LD_VAR 0 2
78870: PPUSH
78871: CALL_OW 256
78875: PUSH
78876: LD_INT 250
78878: GREATER
78879: IFFALSE 78883
// exit ;
78881: GO 78982
// for i = 1 to mc_bases do
78883: LD_ADDR_VAR 0 6
78887: PUSH
78888: DOUBLE
78889: LD_INT 1
78891: DEC
78892: ST_TO_ADDR
78893: LD_EXP 63
78897: PUSH
78898: FOR_TO
78899: IFFALSE 78980
// begin if driver in mc_bases [ i ] then
78901: LD_VAR 0 1
78905: PUSH
78906: LD_EXP 63
78910: PUSH
78911: LD_VAR 0 6
78915: ARRAY
78916: IN
78917: IFFALSE 78978
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
78919: LD_VAR 0 1
78923: PPUSH
78924: LD_EXP 63
78928: PUSH
78929: LD_VAR 0 6
78933: ARRAY
78934: PPUSH
78935: LD_INT 2
78937: PUSH
78938: LD_INT 30
78940: PUSH
78941: LD_INT 0
78943: PUSH
78944: EMPTY
78945: LIST
78946: LIST
78947: PUSH
78948: LD_INT 30
78950: PUSH
78951: LD_INT 1
78953: PUSH
78954: EMPTY
78955: LIST
78956: LIST
78957: PUSH
78958: EMPTY
78959: LIST
78960: LIST
78961: LIST
78962: PPUSH
78963: CALL_OW 72
78967: PUSH
78968: LD_INT 1
78970: ARRAY
78971: PPUSH
78972: CALL_OW 112
// break ;
78976: GO 78980
// end ; end ;
78978: GO 78898
78980: POP
78981: POP
// end ; end_of_file end_of_file
78982: LD_VAR 0 5
78986: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
78987: GO 78989
78989: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
78990: LD_STRING initStreamRollete();
78992: PPUSH
78993: CALL_OW 559
// InitStreamMode ;
78997: CALL 79006 0 0
// DefineStreamItems ( ) ;
79001: CALL 79446 0 0
// end ;
79005: END
// function InitStreamMode ; begin
79006: LD_INT 0
79008: PPUSH
// streamModeActive := false ;
79009: LD_ADDR_EXP 106
79013: PUSH
79014: LD_INT 0
79016: ST_TO_ADDR
// normalCounter := 36 ;
79017: LD_ADDR_EXP 107
79021: PUSH
79022: LD_INT 36
79024: ST_TO_ADDR
// hardcoreCounter := 16 ;
79025: LD_ADDR_EXP 108
79029: PUSH
79030: LD_INT 16
79032: ST_TO_ADDR
// sRocket := false ;
79033: LD_ADDR_EXP 111
79037: PUSH
79038: LD_INT 0
79040: ST_TO_ADDR
// sSpeed := false ;
79041: LD_ADDR_EXP 110
79045: PUSH
79046: LD_INT 0
79048: ST_TO_ADDR
// sEngine := false ;
79049: LD_ADDR_EXP 112
79053: PUSH
79054: LD_INT 0
79056: ST_TO_ADDR
// sSpec := false ;
79057: LD_ADDR_EXP 109
79061: PUSH
79062: LD_INT 0
79064: ST_TO_ADDR
// sLevel := false ;
79065: LD_ADDR_EXP 113
79069: PUSH
79070: LD_INT 0
79072: ST_TO_ADDR
// sArmoury := false ;
79073: LD_ADDR_EXP 114
79077: PUSH
79078: LD_INT 0
79080: ST_TO_ADDR
// sRadar := false ;
79081: LD_ADDR_EXP 115
79085: PUSH
79086: LD_INT 0
79088: ST_TO_ADDR
// sBunker := false ;
79089: LD_ADDR_EXP 116
79093: PUSH
79094: LD_INT 0
79096: ST_TO_ADDR
// sHack := false ;
79097: LD_ADDR_EXP 117
79101: PUSH
79102: LD_INT 0
79104: ST_TO_ADDR
// sFire := false ;
79105: LD_ADDR_EXP 118
79109: PUSH
79110: LD_INT 0
79112: ST_TO_ADDR
// sRefresh := false ;
79113: LD_ADDR_EXP 119
79117: PUSH
79118: LD_INT 0
79120: ST_TO_ADDR
// sExp := false ;
79121: LD_ADDR_EXP 120
79125: PUSH
79126: LD_INT 0
79128: ST_TO_ADDR
// sDepot := false ;
79129: LD_ADDR_EXP 121
79133: PUSH
79134: LD_INT 0
79136: ST_TO_ADDR
// sFlag := false ;
79137: LD_ADDR_EXP 122
79141: PUSH
79142: LD_INT 0
79144: ST_TO_ADDR
// sKamikadze := false ;
79145: LD_ADDR_EXP 130
79149: PUSH
79150: LD_INT 0
79152: ST_TO_ADDR
// sTroll := false ;
79153: LD_ADDR_EXP 131
79157: PUSH
79158: LD_INT 0
79160: ST_TO_ADDR
// sSlow := false ;
79161: LD_ADDR_EXP 132
79165: PUSH
79166: LD_INT 0
79168: ST_TO_ADDR
// sLack := false ;
79169: LD_ADDR_EXP 133
79173: PUSH
79174: LD_INT 0
79176: ST_TO_ADDR
// sTank := false ;
79177: LD_ADDR_EXP 135
79181: PUSH
79182: LD_INT 0
79184: ST_TO_ADDR
// sRemote := false ;
79185: LD_ADDR_EXP 136
79189: PUSH
79190: LD_INT 0
79192: ST_TO_ADDR
// sPowell := false ;
79193: LD_ADDR_EXP 137
79197: PUSH
79198: LD_INT 0
79200: ST_TO_ADDR
// sTeleport := false ;
79201: LD_ADDR_EXP 140
79205: PUSH
79206: LD_INT 0
79208: ST_TO_ADDR
// sOilTower := false ;
79209: LD_ADDR_EXP 142
79213: PUSH
79214: LD_INT 0
79216: ST_TO_ADDR
// sShovel := false ;
79217: LD_ADDR_EXP 143
79221: PUSH
79222: LD_INT 0
79224: ST_TO_ADDR
// sSheik := false ;
79225: LD_ADDR_EXP 144
79229: PUSH
79230: LD_INT 0
79232: ST_TO_ADDR
// sEarthquake := false ;
79233: LD_ADDR_EXP 146
79237: PUSH
79238: LD_INT 0
79240: ST_TO_ADDR
// sAI := false ;
79241: LD_ADDR_EXP 147
79245: PUSH
79246: LD_INT 0
79248: ST_TO_ADDR
// sCargo := false ;
79249: LD_ADDR_EXP 150
79253: PUSH
79254: LD_INT 0
79256: ST_TO_ADDR
// sDLaser := false ;
79257: LD_ADDR_EXP 151
79261: PUSH
79262: LD_INT 0
79264: ST_TO_ADDR
// sExchange := false ;
79265: LD_ADDR_EXP 152
79269: PUSH
79270: LD_INT 0
79272: ST_TO_ADDR
// sFac := false ;
79273: LD_ADDR_EXP 153
79277: PUSH
79278: LD_INT 0
79280: ST_TO_ADDR
// sPower := false ;
79281: LD_ADDR_EXP 154
79285: PUSH
79286: LD_INT 0
79288: ST_TO_ADDR
// sRandom := false ;
79289: LD_ADDR_EXP 155
79293: PUSH
79294: LD_INT 0
79296: ST_TO_ADDR
// sShield := false ;
79297: LD_ADDR_EXP 156
79301: PUSH
79302: LD_INT 0
79304: ST_TO_ADDR
// sTime := false ;
79305: LD_ADDR_EXP 157
79309: PUSH
79310: LD_INT 0
79312: ST_TO_ADDR
// sTools := false ;
79313: LD_ADDR_EXP 158
79317: PUSH
79318: LD_INT 0
79320: ST_TO_ADDR
// sSold := false ;
79321: LD_ADDR_EXP 123
79325: PUSH
79326: LD_INT 0
79328: ST_TO_ADDR
// sDiff := false ;
79329: LD_ADDR_EXP 124
79333: PUSH
79334: LD_INT 0
79336: ST_TO_ADDR
// sFog := false ;
79337: LD_ADDR_EXP 127
79341: PUSH
79342: LD_INT 0
79344: ST_TO_ADDR
// sReset := false ;
79345: LD_ADDR_EXP 128
79349: PUSH
79350: LD_INT 0
79352: ST_TO_ADDR
// sSun := false ;
79353: LD_ADDR_EXP 129
79357: PUSH
79358: LD_INT 0
79360: ST_TO_ADDR
// sTiger := false ;
79361: LD_ADDR_EXP 125
79365: PUSH
79366: LD_INT 0
79368: ST_TO_ADDR
// sBomb := false ;
79369: LD_ADDR_EXP 126
79373: PUSH
79374: LD_INT 0
79376: ST_TO_ADDR
// sWound := false ;
79377: LD_ADDR_EXP 134
79381: PUSH
79382: LD_INT 0
79384: ST_TO_ADDR
// sBetray := false ;
79385: LD_ADDR_EXP 138
79389: PUSH
79390: LD_INT 0
79392: ST_TO_ADDR
// sContamin := false ;
79393: LD_ADDR_EXP 139
79397: PUSH
79398: LD_INT 0
79400: ST_TO_ADDR
// sOil := false ;
79401: LD_ADDR_EXP 141
79405: PUSH
79406: LD_INT 0
79408: ST_TO_ADDR
// sStu := false ;
79409: LD_ADDR_EXP 145
79413: PUSH
79414: LD_INT 0
79416: ST_TO_ADDR
// sBazooka := false ;
79417: LD_ADDR_EXP 148
79421: PUSH
79422: LD_INT 0
79424: ST_TO_ADDR
// sMortar := false ;
79425: LD_ADDR_EXP 149
79429: PUSH
79430: LD_INT 0
79432: ST_TO_ADDR
// sRanger := false ;
79433: LD_ADDR_EXP 159
79437: PUSH
79438: LD_INT 0
79440: ST_TO_ADDR
// end ;
79441: LD_VAR 0 1
79445: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
79446: LD_INT 0
79448: PPUSH
79449: PPUSH
79450: PPUSH
79451: PPUSH
79452: PPUSH
// result := [ ] ;
79453: LD_ADDR_VAR 0 1
79457: PUSH
79458: EMPTY
79459: ST_TO_ADDR
// if campaign_id = 1 then
79460: LD_OWVAR 69
79464: PUSH
79465: LD_INT 1
79467: EQUAL
79468: IFFALSE 82406
// begin case mission_number of 1 :
79470: LD_OWVAR 70
79474: PUSH
79475: LD_INT 1
79477: DOUBLE
79478: EQUAL
79479: IFTRUE 79483
79481: GO 79547
79483: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
79484: LD_ADDR_VAR 0 1
79488: PUSH
79489: LD_INT 2
79491: PUSH
79492: LD_INT 4
79494: PUSH
79495: LD_INT 11
79497: PUSH
79498: LD_INT 12
79500: PUSH
79501: LD_INT 15
79503: PUSH
79504: LD_INT 16
79506: PUSH
79507: LD_INT 22
79509: PUSH
79510: LD_INT 23
79512: PUSH
79513: LD_INT 26
79515: PUSH
79516: EMPTY
79517: LIST
79518: LIST
79519: LIST
79520: LIST
79521: LIST
79522: LIST
79523: LIST
79524: LIST
79525: LIST
79526: PUSH
79527: LD_INT 101
79529: PUSH
79530: LD_INT 102
79532: PUSH
79533: LD_INT 106
79535: PUSH
79536: EMPTY
79537: LIST
79538: LIST
79539: LIST
79540: PUSH
79541: EMPTY
79542: LIST
79543: LIST
79544: ST_TO_ADDR
79545: GO 82404
79547: LD_INT 2
79549: DOUBLE
79550: EQUAL
79551: IFTRUE 79555
79553: GO 79627
79555: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
79556: LD_ADDR_VAR 0 1
79560: PUSH
79561: LD_INT 2
79563: PUSH
79564: LD_INT 4
79566: PUSH
79567: LD_INT 11
79569: PUSH
79570: LD_INT 12
79572: PUSH
79573: LD_INT 15
79575: PUSH
79576: LD_INT 16
79578: PUSH
79579: LD_INT 22
79581: PUSH
79582: LD_INT 23
79584: PUSH
79585: LD_INT 26
79587: PUSH
79588: EMPTY
79589: LIST
79590: LIST
79591: LIST
79592: LIST
79593: LIST
79594: LIST
79595: LIST
79596: LIST
79597: LIST
79598: PUSH
79599: LD_INT 101
79601: PUSH
79602: LD_INT 102
79604: PUSH
79605: LD_INT 105
79607: PUSH
79608: LD_INT 106
79610: PUSH
79611: LD_INT 108
79613: PUSH
79614: EMPTY
79615: LIST
79616: LIST
79617: LIST
79618: LIST
79619: LIST
79620: PUSH
79621: EMPTY
79622: LIST
79623: LIST
79624: ST_TO_ADDR
79625: GO 82404
79627: LD_INT 3
79629: DOUBLE
79630: EQUAL
79631: IFTRUE 79635
79633: GO 79711
79635: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
79636: LD_ADDR_VAR 0 1
79640: PUSH
79641: LD_INT 2
79643: PUSH
79644: LD_INT 4
79646: PUSH
79647: LD_INT 5
79649: PUSH
79650: LD_INT 11
79652: PUSH
79653: LD_INT 12
79655: PUSH
79656: LD_INT 15
79658: PUSH
79659: LD_INT 16
79661: PUSH
79662: LD_INT 22
79664: PUSH
79665: LD_INT 26
79667: PUSH
79668: LD_INT 36
79670: PUSH
79671: EMPTY
79672: LIST
79673: LIST
79674: LIST
79675: LIST
79676: LIST
79677: LIST
79678: LIST
79679: LIST
79680: LIST
79681: LIST
79682: PUSH
79683: LD_INT 101
79685: PUSH
79686: LD_INT 102
79688: PUSH
79689: LD_INT 105
79691: PUSH
79692: LD_INT 106
79694: PUSH
79695: LD_INT 108
79697: PUSH
79698: EMPTY
79699: LIST
79700: LIST
79701: LIST
79702: LIST
79703: LIST
79704: PUSH
79705: EMPTY
79706: LIST
79707: LIST
79708: ST_TO_ADDR
79709: GO 82404
79711: LD_INT 4
79713: DOUBLE
79714: EQUAL
79715: IFTRUE 79719
79717: GO 79803
79719: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
79720: LD_ADDR_VAR 0 1
79724: PUSH
79725: LD_INT 2
79727: PUSH
79728: LD_INT 4
79730: PUSH
79731: LD_INT 5
79733: PUSH
79734: LD_INT 8
79736: PUSH
79737: LD_INT 11
79739: PUSH
79740: LD_INT 12
79742: PUSH
79743: LD_INT 15
79745: PUSH
79746: LD_INT 16
79748: PUSH
79749: LD_INT 22
79751: PUSH
79752: LD_INT 23
79754: PUSH
79755: LD_INT 26
79757: PUSH
79758: LD_INT 36
79760: PUSH
79761: EMPTY
79762: LIST
79763: LIST
79764: LIST
79765: LIST
79766: LIST
79767: LIST
79768: LIST
79769: LIST
79770: LIST
79771: LIST
79772: LIST
79773: LIST
79774: PUSH
79775: LD_INT 101
79777: PUSH
79778: LD_INT 102
79780: PUSH
79781: LD_INT 105
79783: PUSH
79784: LD_INT 106
79786: PUSH
79787: LD_INT 108
79789: PUSH
79790: EMPTY
79791: LIST
79792: LIST
79793: LIST
79794: LIST
79795: LIST
79796: PUSH
79797: EMPTY
79798: LIST
79799: LIST
79800: ST_TO_ADDR
79801: GO 82404
79803: LD_INT 5
79805: DOUBLE
79806: EQUAL
79807: IFTRUE 79811
79809: GO 79911
79811: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
79812: LD_ADDR_VAR 0 1
79816: PUSH
79817: LD_INT 2
79819: PUSH
79820: LD_INT 4
79822: PUSH
79823: LD_INT 5
79825: PUSH
79826: LD_INT 6
79828: PUSH
79829: LD_INT 8
79831: PUSH
79832: LD_INT 11
79834: PUSH
79835: LD_INT 12
79837: PUSH
79838: LD_INT 15
79840: PUSH
79841: LD_INT 16
79843: PUSH
79844: LD_INT 22
79846: PUSH
79847: LD_INT 23
79849: PUSH
79850: LD_INT 25
79852: PUSH
79853: LD_INT 26
79855: PUSH
79856: LD_INT 36
79858: PUSH
79859: EMPTY
79860: LIST
79861: LIST
79862: LIST
79863: LIST
79864: LIST
79865: LIST
79866: LIST
79867: LIST
79868: LIST
79869: LIST
79870: LIST
79871: LIST
79872: LIST
79873: LIST
79874: PUSH
79875: LD_INT 101
79877: PUSH
79878: LD_INT 102
79880: PUSH
79881: LD_INT 105
79883: PUSH
79884: LD_INT 106
79886: PUSH
79887: LD_INT 108
79889: PUSH
79890: LD_INT 109
79892: PUSH
79893: LD_INT 112
79895: PUSH
79896: EMPTY
79897: LIST
79898: LIST
79899: LIST
79900: LIST
79901: LIST
79902: LIST
79903: LIST
79904: PUSH
79905: EMPTY
79906: LIST
79907: LIST
79908: ST_TO_ADDR
79909: GO 82404
79911: LD_INT 6
79913: DOUBLE
79914: EQUAL
79915: IFTRUE 79919
79917: GO 80039
79919: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
79920: LD_ADDR_VAR 0 1
79924: PUSH
79925: LD_INT 2
79927: PUSH
79928: LD_INT 4
79930: PUSH
79931: LD_INT 5
79933: PUSH
79934: LD_INT 6
79936: PUSH
79937: LD_INT 8
79939: PUSH
79940: LD_INT 11
79942: PUSH
79943: LD_INT 12
79945: PUSH
79946: LD_INT 15
79948: PUSH
79949: LD_INT 16
79951: PUSH
79952: LD_INT 20
79954: PUSH
79955: LD_INT 21
79957: PUSH
79958: LD_INT 22
79960: PUSH
79961: LD_INT 23
79963: PUSH
79964: LD_INT 25
79966: PUSH
79967: LD_INT 26
79969: PUSH
79970: LD_INT 30
79972: PUSH
79973: LD_INT 31
79975: PUSH
79976: LD_INT 32
79978: PUSH
79979: LD_INT 36
79981: PUSH
79982: EMPTY
79983: LIST
79984: LIST
79985: LIST
79986: LIST
79987: LIST
79988: LIST
79989: LIST
79990: LIST
79991: LIST
79992: LIST
79993: LIST
79994: LIST
79995: LIST
79996: LIST
79997: LIST
79998: LIST
79999: LIST
80000: LIST
80001: LIST
80002: PUSH
80003: LD_INT 101
80005: PUSH
80006: LD_INT 102
80008: PUSH
80009: LD_INT 105
80011: PUSH
80012: LD_INT 106
80014: PUSH
80015: LD_INT 108
80017: PUSH
80018: LD_INT 109
80020: PUSH
80021: LD_INT 112
80023: PUSH
80024: EMPTY
80025: LIST
80026: LIST
80027: LIST
80028: LIST
80029: LIST
80030: LIST
80031: LIST
80032: PUSH
80033: EMPTY
80034: LIST
80035: LIST
80036: ST_TO_ADDR
80037: GO 82404
80039: LD_INT 7
80041: DOUBLE
80042: EQUAL
80043: IFTRUE 80047
80045: GO 80147
80047: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
80048: LD_ADDR_VAR 0 1
80052: PUSH
80053: LD_INT 2
80055: PUSH
80056: LD_INT 4
80058: PUSH
80059: LD_INT 5
80061: PUSH
80062: LD_INT 7
80064: PUSH
80065: LD_INT 11
80067: PUSH
80068: LD_INT 12
80070: PUSH
80071: LD_INT 15
80073: PUSH
80074: LD_INT 16
80076: PUSH
80077: LD_INT 20
80079: PUSH
80080: LD_INT 21
80082: PUSH
80083: LD_INT 22
80085: PUSH
80086: LD_INT 23
80088: PUSH
80089: LD_INT 25
80091: PUSH
80092: LD_INT 26
80094: PUSH
80095: EMPTY
80096: LIST
80097: LIST
80098: LIST
80099: LIST
80100: LIST
80101: LIST
80102: LIST
80103: LIST
80104: LIST
80105: LIST
80106: LIST
80107: LIST
80108: LIST
80109: LIST
80110: PUSH
80111: LD_INT 101
80113: PUSH
80114: LD_INT 102
80116: PUSH
80117: LD_INT 103
80119: PUSH
80120: LD_INT 105
80122: PUSH
80123: LD_INT 106
80125: PUSH
80126: LD_INT 108
80128: PUSH
80129: LD_INT 112
80131: PUSH
80132: EMPTY
80133: LIST
80134: LIST
80135: LIST
80136: LIST
80137: LIST
80138: LIST
80139: LIST
80140: PUSH
80141: EMPTY
80142: LIST
80143: LIST
80144: ST_TO_ADDR
80145: GO 82404
80147: LD_INT 8
80149: DOUBLE
80150: EQUAL
80151: IFTRUE 80155
80153: GO 80283
80155: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
80156: LD_ADDR_VAR 0 1
80160: PUSH
80161: LD_INT 2
80163: PUSH
80164: LD_INT 4
80166: PUSH
80167: LD_INT 5
80169: PUSH
80170: LD_INT 6
80172: PUSH
80173: LD_INT 7
80175: PUSH
80176: LD_INT 8
80178: PUSH
80179: LD_INT 11
80181: PUSH
80182: LD_INT 12
80184: PUSH
80185: LD_INT 15
80187: PUSH
80188: LD_INT 16
80190: PUSH
80191: LD_INT 20
80193: PUSH
80194: LD_INT 21
80196: PUSH
80197: LD_INT 22
80199: PUSH
80200: LD_INT 23
80202: PUSH
80203: LD_INT 25
80205: PUSH
80206: LD_INT 26
80208: PUSH
80209: LD_INT 30
80211: PUSH
80212: LD_INT 31
80214: PUSH
80215: LD_INT 32
80217: PUSH
80218: LD_INT 36
80220: PUSH
80221: EMPTY
80222: LIST
80223: LIST
80224: LIST
80225: LIST
80226: LIST
80227: LIST
80228: LIST
80229: LIST
80230: LIST
80231: LIST
80232: LIST
80233: LIST
80234: LIST
80235: LIST
80236: LIST
80237: LIST
80238: LIST
80239: LIST
80240: LIST
80241: LIST
80242: PUSH
80243: LD_INT 101
80245: PUSH
80246: LD_INT 102
80248: PUSH
80249: LD_INT 103
80251: PUSH
80252: LD_INT 105
80254: PUSH
80255: LD_INT 106
80257: PUSH
80258: LD_INT 108
80260: PUSH
80261: LD_INT 109
80263: PUSH
80264: LD_INT 112
80266: PUSH
80267: EMPTY
80268: LIST
80269: LIST
80270: LIST
80271: LIST
80272: LIST
80273: LIST
80274: LIST
80275: LIST
80276: PUSH
80277: EMPTY
80278: LIST
80279: LIST
80280: ST_TO_ADDR
80281: GO 82404
80283: LD_INT 9
80285: DOUBLE
80286: EQUAL
80287: IFTRUE 80291
80289: GO 80427
80291: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
80292: LD_ADDR_VAR 0 1
80296: PUSH
80297: LD_INT 2
80299: PUSH
80300: LD_INT 4
80302: PUSH
80303: LD_INT 5
80305: PUSH
80306: LD_INT 6
80308: PUSH
80309: LD_INT 7
80311: PUSH
80312: LD_INT 8
80314: PUSH
80315: LD_INT 11
80317: PUSH
80318: LD_INT 12
80320: PUSH
80321: LD_INT 15
80323: PUSH
80324: LD_INT 16
80326: PUSH
80327: LD_INT 20
80329: PUSH
80330: LD_INT 21
80332: PUSH
80333: LD_INT 22
80335: PUSH
80336: LD_INT 23
80338: PUSH
80339: LD_INT 25
80341: PUSH
80342: LD_INT 26
80344: PUSH
80345: LD_INT 28
80347: PUSH
80348: LD_INT 30
80350: PUSH
80351: LD_INT 31
80353: PUSH
80354: LD_INT 32
80356: PUSH
80357: LD_INT 36
80359: PUSH
80360: EMPTY
80361: LIST
80362: LIST
80363: LIST
80364: LIST
80365: LIST
80366: LIST
80367: LIST
80368: LIST
80369: LIST
80370: LIST
80371: LIST
80372: LIST
80373: LIST
80374: LIST
80375: LIST
80376: LIST
80377: LIST
80378: LIST
80379: LIST
80380: LIST
80381: LIST
80382: PUSH
80383: LD_INT 101
80385: PUSH
80386: LD_INT 102
80388: PUSH
80389: LD_INT 103
80391: PUSH
80392: LD_INT 105
80394: PUSH
80395: LD_INT 106
80397: PUSH
80398: LD_INT 108
80400: PUSH
80401: LD_INT 109
80403: PUSH
80404: LD_INT 112
80406: PUSH
80407: LD_INT 114
80409: PUSH
80410: EMPTY
80411: LIST
80412: LIST
80413: LIST
80414: LIST
80415: LIST
80416: LIST
80417: LIST
80418: LIST
80419: LIST
80420: PUSH
80421: EMPTY
80422: LIST
80423: LIST
80424: ST_TO_ADDR
80425: GO 82404
80427: LD_INT 10
80429: DOUBLE
80430: EQUAL
80431: IFTRUE 80435
80433: GO 80619
80435: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
80436: LD_ADDR_VAR 0 1
80440: PUSH
80441: LD_INT 2
80443: PUSH
80444: LD_INT 4
80446: PUSH
80447: LD_INT 5
80449: PUSH
80450: LD_INT 6
80452: PUSH
80453: LD_INT 7
80455: PUSH
80456: LD_INT 8
80458: PUSH
80459: LD_INT 9
80461: PUSH
80462: LD_INT 10
80464: PUSH
80465: LD_INT 11
80467: PUSH
80468: LD_INT 12
80470: PUSH
80471: LD_INT 13
80473: PUSH
80474: LD_INT 14
80476: PUSH
80477: LD_INT 15
80479: PUSH
80480: LD_INT 16
80482: PUSH
80483: LD_INT 17
80485: PUSH
80486: LD_INT 18
80488: PUSH
80489: LD_INT 19
80491: PUSH
80492: LD_INT 20
80494: PUSH
80495: LD_INT 21
80497: PUSH
80498: LD_INT 22
80500: PUSH
80501: LD_INT 23
80503: PUSH
80504: LD_INT 24
80506: PUSH
80507: LD_INT 25
80509: PUSH
80510: LD_INT 26
80512: PUSH
80513: LD_INT 28
80515: PUSH
80516: LD_INT 30
80518: PUSH
80519: LD_INT 31
80521: PUSH
80522: LD_INT 32
80524: PUSH
80525: LD_INT 36
80527: PUSH
80528: EMPTY
80529: LIST
80530: LIST
80531: LIST
80532: LIST
80533: LIST
80534: LIST
80535: LIST
80536: LIST
80537: LIST
80538: LIST
80539: LIST
80540: LIST
80541: LIST
80542: LIST
80543: LIST
80544: LIST
80545: LIST
80546: LIST
80547: LIST
80548: LIST
80549: LIST
80550: LIST
80551: LIST
80552: LIST
80553: LIST
80554: LIST
80555: LIST
80556: LIST
80557: LIST
80558: PUSH
80559: LD_INT 101
80561: PUSH
80562: LD_INT 102
80564: PUSH
80565: LD_INT 103
80567: PUSH
80568: LD_INT 104
80570: PUSH
80571: LD_INT 105
80573: PUSH
80574: LD_INT 106
80576: PUSH
80577: LD_INT 107
80579: PUSH
80580: LD_INT 108
80582: PUSH
80583: LD_INT 109
80585: PUSH
80586: LD_INT 110
80588: PUSH
80589: LD_INT 111
80591: PUSH
80592: LD_INT 112
80594: PUSH
80595: LD_INT 114
80597: PUSH
80598: EMPTY
80599: LIST
80600: LIST
80601: LIST
80602: LIST
80603: LIST
80604: LIST
80605: LIST
80606: LIST
80607: LIST
80608: LIST
80609: LIST
80610: LIST
80611: LIST
80612: PUSH
80613: EMPTY
80614: LIST
80615: LIST
80616: ST_TO_ADDR
80617: GO 82404
80619: LD_INT 11
80621: DOUBLE
80622: EQUAL
80623: IFTRUE 80627
80625: GO 80819
80627: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
80628: LD_ADDR_VAR 0 1
80632: PUSH
80633: LD_INT 2
80635: PUSH
80636: LD_INT 3
80638: PUSH
80639: LD_INT 4
80641: PUSH
80642: LD_INT 5
80644: PUSH
80645: LD_INT 6
80647: PUSH
80648: LD_INT 7
80650: PUSH
80651: LD_INT 8
80653: PUSH
80654: LD_INT 9
80656: PUSH
80657: LD_INT 10
80659: PUSH
80660: LD_INT 11
80662: PUSH
80663: LD_INT 12
80665: PUSH
80666: LD_INT 13
80668: PUSH
80669: LD_INT 14
80671: PUSH
80672: LD_INT 15
80674: PUSH
80675: LD_INT 16
80677: PUSH
80678: LD_INT 17
80680: PUSH
80681: LD_INT 18
80683: PUSH
80684: LD_INT 19
80686: PUSH
80687: LD_INT 20
80689: PUSH
80690: LD_INT 21
80692: PUSH
80693: LD_INT 22
80695: PUSH
80696: LD_INT 23
80698: PUSH
80699: LD_INT 24
80701: PUSH
80702: LD_INT 25
80704: PUSH
80705: LD_INT 26
80707: PUSH
80708: LD_INT 28
80710: PUSH
80711: LD_INT 30
80713: PUSH
80714: LD_INT 31
80716: PUSH
80717: LD_INT 32
80719: PUSH
80720: LD_INT 34
80722: PUSH
80723: LD_INT 36
80725: PUSH
80726: EMPTY
80727: LIST
80728: LIST
80729: LIST
80730: LIST
80731: LIST
80732: LIST
80733: LIST
80734: LIST
80735: LIST
80736: LIST
80737: LIST
80738: LIST
80739: LIST
80740: LIST
80741: LIST
80742: LIST
80743: LIST
80744: LIST
80745: LIST
80746: LIST
80747: LIST
80748: LIST
80749: LIST
80750: LIST
80751: LIST
80752: LIST
80753: LIST
80754: LIST
80755: LIST
80756: LIST
80757: LIST
80758: PUSH
80759: LD_INT 101
80761: PUSH
80762: LD_INT 102
80764: PUSH
80765: LD_INT 103
80767: PUSH
80768: LD_INT 104
80770: PUSH
80771: LD_INT 105
80773: PUSH
80774: LD_INT 106
80776: PUSH
80777: LD_INT 107
80779: PUSH
80780: LD_INT 108
80782: PUSH
80783: LD_INT 109
80785: PUSH
80786: LD_INT 110
80788: PUSH
80789: LD_INT 111
80791: PUSH
80792: LD_INT 112
80794: PUSH
80795: LD_INT 114
80797: PUSH
80798: EMPTY
80799: LIST
80800: LIST
80801: LIST
80802: LIST
80803: LIST
80804: LIST
80805: LIST
80806: LIST
80807: LIST
80808: LIST
80809: LIST
80810: LIST
80811: LIST
80812: PUSH
80813: EMPTY
80814: LIST
80815: LIST
80816: ST_TO_ADDR
80817: GO 82404
80819: LD_INT 12
80821: DOUBLE
80822: EQUAL
80823: IFTRUE 80827
80825: GO 81035
80827: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
80828: LD_ADDR_VAR 0 1
80832: PUSH
80833: LD_INT 1
80835: PUSH
80836: LD_INT 2
80838: PUSH
80839: LD_INT 3
80841: PUSH
80842: LD_INT 4
80844: PUSH
80845: LD_INT 5
80847: PUSH
80848: LD_INT 6
80850: PUSH
80851: LD_INT 7
80853: PUSH
80854: LD_INT 8
80856: PUSH
80857: LD_INT 9
80859: PUSH
80860: LD_INT 10
80862: PUSH
80863: LD_INT 11
80865: PUSH
80866: LD_INT 12
80868: PUSH
80869: LD_INT 13
80871: PUSH
80872: LD_INT 14
80874: PUSH
80875: LD_INT 15
80877: PUSH
80878: LD_INT 16
80880: PUSH
80881: LD_INT 17
80883: PUSH
80884: LD_INT 18
80886: PUSH
80887: LD_INT 19
80889: PUSH
80890: LD_INT 20
80892: PUSH
80893: LD_INT 21
80895: PUSH
80896: LD_INT 22
80898: PUSH
80899: LD_INT 23
80901: PUSH
80902: LD_INT 24
80904: PUSH
80905: LD_INT 25
80907: PUSH
80908: LD_INT 26
80910: PUSH
80911: LD_INT 27
80913: PUSH
80914: LD_INT 28
80916: PUSH
80917: LD_INT 30
80919: PUSH
80920: LD_INT 31
80922: PUSH
80923: LD_INT 32
80925: PUSH
80926: LD_INT 33
80928: PUSH
80929: LD_INT 34
80931: PUSH
80932: LD_INT 36
80934: PUSH
80935: EMPTY
80936: LIST
80937: LIST
80938: LIST
80939: LIST
80940: LIST
80941: LIST
80942: LIST
80943: LIST
80944: LIST
80945: LIST
80946: LIST
80947: LIST
80948: LIST
80949: LIST
80950: LIST
80951: LIST
80952: LIST
80953: LIST
80954: LIST
80955: LIST
80956: LIST
80957: LIST
80958: LIST
80959: LIST
80960: LIST
80961: LIST
80962: LIST
80963: LIST
80964: LIST
80965: LIST
80966: LIST
80967: LIST
80968: LIST
80969: LIST
80970: PUSH
80971: LD_INT 101
80973: PUSH
80974: LD_INT 102
80976: PUSH
80977: LD_INT 103
80979: PUSH
80980: LD_INT 104
80982: PUSH
80983: LD_INT 105
80985: PUSH
80986: LD_INT 106
80988: PUSH
80989: LD_INT 107
80991: PUSH
80992: LD_INT 108
80994: PUSH
80995: LD_INT 109
80997: PUSH
80998: LD_INT 110
81000: PUSH
81001: LD_INT 111
81003: PUSH
81004: LD_INT 112
81006: PUSH
81007: LD_INT 113
81009: PUSH
81010: LD_INT 114
81012: PUSH
81013: EMPTY
81014: LIST
81015: LIST
81016: LIST
81017: LIST
81018: LIST
81019: LIST
81020: LIST
81021: LIST
81022: LIST
81023: LIST
81024: LIST
81025: LIST
81026: LIST
81027: LIST
81028: PUSH
81029: EMPTY
81030: LIST
81031: LIST
81032: ST_TO_ADDR
81033: GO 82404
81035: LD_INT 13
81037: DOUBLE
81038: EQUAL
81039: IFTRUE 81043
81041: GO 81239
81043: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
81044: LD_ADDR_VAR 0 1
81048: PUSH
81049: LD_INT 1
81051: PUSH
81052: LD_INT 2
81054: PUSH
81055: LD_INT 3
81057: PUSH
81058: LD_INT 4
81060: PUSH
81061: LD_INT 5
81063: PUSH
81064: LD_INT 8
81066: PUSH
81067: LD_INT 9
81069: PUSH
81070: LD_INT 10
81072: PUSH
81073: LD_INT 11
81075: PUSH
81076: LD_INT 12
81078: PUSH
81079: LD_INT 14
81081: PUSH
81082: LD_INT 15
81084: PUSH
81085: LD_INT 16
81087: PUSH
81088: LD_INT 17
81090: PUSH
81091: LD_INT 18
81093: PUSH
81094: LD_INT 19
81096: PUSH
81097: LD_INT 20
81099: PUSH
81100: LD_INT 21
81102: PUSH
81103: LD_INT 22
81105: PUSH
81106: LD_INT 23
81108: PUSH
81109: LD_INT 24
81111: PUSH
81112: LD_INT 25
81114: PUSH
81115: LD_INT 26
81117: PUSH
81118: LD_INT 27
81120: PUSH
81121: LD_INT 28
81123: PUSH
81124: LD_INT 30
81126: PUSH
81127: LD_INT 31
81129: PUSH
81130: LD_INT 32
81132: PUSH
81133: LD_INT 33
81135: PUSH
81136: LD_INT 34
81138: PUSH
81139: LD_INT 36
81141: PUSH
81142: EMPTY
81143: LIST
81144: LIST
81145: LIST
81146: LIST
81147: LIST
81148: LIST
81149: LIST
81150: LIST
81151: LIST
81152: LIST
81153: LIST
81154: LIST
81155: LIST
81156: LIST
81157: LIST
81158: LIST
81159: LIST
81160: LIST
81161: LIST
81162: LIST
81163: LIST
81164: LIST
81165: LIST
81166: LIST
81167: LIST
81168: LIST
81169: LIST
81170: LIST
81171: LIST
81172: LIST
81173: LIST
81174: PUSH
81175: LD_INT 101
81177: PUSH
81178: LD_INT 102
81180: PUSH
81181: LD_INT 103
81183: PUSH
81184: LD_INT 104
81186: PUSH
81187: LD_INT 105
81189: PUSH
81190: LD_INT 106
81192: PUSH
81193: LD_INT 107
81195: PUSH
81196: LD_INT 108
81198: PUSH
81199: LD_INT 109
81201: PUSH
81202: LD_INT 110
81204: PUSH
81205: LD_INT 111
81207: PUSH
81208: LD_INT 112
81210: PUSH
81211: LD_INT 113
81213: PUSH
81214: LD_INT 114
81216: PUSH
81217: EMPTY
81218: LIST
81219: LIST
81220: LIST
81221: LIST
81222: LIST
81223: LIST
81224: LIST
81225: LIST
81226: LIST
81227: LIST
81228: LIST
81229: LIST
81230: LIST
81231: LIST
81232: PUSH
81233: EMPTY
81234: LIST
81235: LIST
81236: ST_TO_ADDR
81237: GO 82404
81239: LD_INT 14
81241: DOUBLE
81242: EQUAL
81243: IFTRUE 81247
81245: GO 81459
81247: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
81248: LD_ADDR_VAR 0 1
81252: PUSH
81253: LD_INT 1
81255: PUSH
81256: LD_INT 2
81258: PUSH
81259: LD_INT 3
81261: PUSH
81262: LD_INT 4
81264: PUSH
81265: LD_INT 5
81267: PUSH
81268: LD_INT 6
81270: PUSH
81271: LD_INT 7
81273: PUSH
81274: LD_INT 8
81276: PUSH
81277: LD_INT 9
81279: PUSH
81280: LD_INT 10
81282: PUSH
81283: LD_INT 11
81285: PUSH
81286: LD_INT 12
81288: PUSH
81289: LD_INT 13
81291: PUSH
81292: LD_INT 14
81294: PUSH
81295: LD_INT 15
81297: PUSH
81298: LD_INT 16
81300: PUSH
81301: LD_INT 17
81303: PUSH
81304: LD_INT 18
81306: PUSH
81307: LD_INT 19
81309: PUSH
81310: LD_INT 20
81312: PUSH
81313: LD_INT 21
81315: PUSH
81316: LD_INT 22
81318: PUSH
81319: LD_INT 23
81321: PUSH
81322: LD_INT 24
81324: PUSH
81325: LD_INT 25
81327: PUSH
81328: LD_INT 26
81330: PUSH
81331: LD_INT 27
81333: PUSH
81334: LD_INT 28
81336: PUSH
81337: LD_INT 29
81339: PUSH
81340: LD_INT 30
81342: PUSH
81343: LD_INT 31
81345: PUSH
81346: LD_INT 32
81348: PUSH
81349: LD_INT 33
81351: PUSH
81352: LD_INT 34
81354: PUSH
81355: LD_INT 36
81357: PUSH
81358: EMPTY
81359: LIST
81360: LIST
81361: LIST
81362: LIST
81363: LIST
81364: LIST
81365: LIST
81366: LIST
81367: LIST
81368: LIST
81369: LIST
81370: LIST
81371: LIST
81372: LIST
81373: LIST
81374: LIST
81375: LIST
81376: LIST
81377: LIST
81378: LIST
81379: LIST
81380: LIST
81381: LIST
81382: LIST
81383: LIST
81384: LIST
81385: LIST
81386: LIST
81387: LIST
81388: LIST
81389: LIST
81390: LIST
81391: LIST
81392: LIST
81393: LIST
81394: PUSH
81395: LD_INT 101
81397: PUSH
81398: LD_INT 102
81400: PUSH
81401: LD_INT 103
81403: PUSH
81404: LD_INT 104
81406: PUSH
81407: LD_INT 105
81409: PUSH
81410: LD_INT 106
81412: PUSH
81413: LD_INT 107
81415: PUSH
81416: LD_INT 108
81418: PUSH
81419: LD_INT 109
81421: PUSH
81422: LD_INT 110
81424: PUSH
81425: LD_INT 111
81427: PUSH
81428: LD_INT 112
81430: PUSH
81431: LD_INT 113
81433: PUSH
81434: LD_INT 114
81436: PUSH
81437: EMPTY
81438: LIST
81439: LIST
81440: LIST
81441: LIST
81442: LIST
81443: LIST
81444: LIST
81445: LIST
81446: LIST
81447: LIST
81448: LIST
81449: LIST
81450: LIST
81451: LIST
81452: PUSH
81453: EMPTY
81454: LIST
81455: LIST
81456: ST_TO_ADDR
81457: GO 82404
81459: LD_INT 15
81461: DOUBLE
81462: EQUAL
81463: IFTRUE 81467
81465: GO 81679
81467: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
81468: LD_ADDR_VAR 0 1
81472: PUSH
81473: LD_INT 1
81475: PUSH
81476: LD_INT 2
81478: PUSH
81479: LD_INT 3
81481: PUSH
81482: LD_INT 4
81484: PUSH
81485: LD_INT 5
81487: PUSH
81488: LD_INT 6
81490: PUSH
81491: LD_INT 7
81493: PUSH
81494: LD_INT 8
81496: PUSH
81497: LD_INT 9
81499: PUSH
81500: LD_INT 10
81502: PUSH
81503: LD_INT 11
81505: PUSH
81506: LD_INT 12
81508: PUSH
81509: LD_INT 13
81511: PUSH
81512: LD_INT 14
81514: PUSH
81515: LD_INT 15
81517: PUSH
81518: LD_INT 16
81520: PUSH
81521: LD_INT 17
81523: PUSH
81524: LD_INT 18
81526: PUSH
81527: LD_INT 19
81529: PUSH
81530: LD_INT 20
81532: PUSH
81533: LD_INT 21
81535: PUSH
81536: LD_INT 22
81538: PUSH
81539: LD_INT 23
81541: PUSH
81542: LD_INT 24
81544: PUSH
81545: LD_INT 25
81547: PUSH
81548: LD_INT 26
81550: PUSH
81551: LD_INT 27
81553: PUSH
81554: LD_INT 28
81556: PUSH
81557: LD_INT 29
81559: PUSH
81560: LD_INT 30
81562: PUSH
81563: LD_INT 31
81565: PUSH
81566: LD_INT 32
81568: PUSH
81569: LD_INT 33
81571: PUSH
81572: LD_INT 34
81574: PUSH
81575: LD_INT 36
81577: PUSH
81578: EMPTY
81579: LIST
81580: LIST
81581: LIST
81582: LIST
81583: LIST
81584: LIST
81585: LIST
81586: LIST
81587: LIST
81588: LIST
81589: LIST
81590: LIST
81591: LIST
81592: LIST
81593: LIST
81594: LIST
81595: LIST
81596: LIST
81597: LIST
81598: LIST
81599: LIST
81600: LIST
81601: LIST
81602: LIST
81603: LIST
81604: LIST
81605: LIST
81606: LIST
81607: LIST
81608: LIST
81609: LIST
81610: LIST
81611: LIST
81612: LIST
81613: LIST
81614: PUSH
81615: LD_INT 101
81617: PUSH
81618: LD_INT 102
81620: PUSH
81621: LD_INT 103
81623: PUSH
81624: LD_INT 104
81626: PUSH
81627: LD_INT 105
81629: PUSH
81630: LD_INT 106
81632: PUSH
81633: LD_INT 107
81635: PUSH
81636: LD_INT 108
81638: PUSH
81639: LD_INT 109
81641: PUSH
81642: LD_INT 110
81644: PUSH
81645: LD_INT 111
81647: PUSH
81648: LD_INT 112
81650: PUSH
81651: LD_INT 113
81653: PUSH
81654: LD_INT 114
81656: PUSH
81657: EMPTY
81658: LIST
81659: LIST
81660: LIST
81661: LIST
81662: LIST
81663: LIST
81664: LIST
81665: LIST
81666: LIST
81667: LIST
81668: LIST
81669: LIST
81670: LIST
81671: LIST
81672: PUSH
81673: EMPTY
81674: LIST
81675: LIST
81676: ST_TO_ADDR
81677: GO 82404
81679: LD_INT 16
81681: DOUBLE
81682: EQUAL
81683: IFTRUE 81687
81685: GO 81811
81687: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
81688: LD_ADDR_VAR 0 1
81692: PUSH
81693: LD_INT 2
81695: PUSH
81696: LD_INT 4
81698: PUSH
81699: LD_INT 5
81701: PUSH
81702: LD_INT 7
81704: PUSH
81705: LD_INT 11
81707: PUSH
81708: LD_INT 12
81710: PUSH
81711: LD_INT 15
81713: PUSH
81714: LD_INT 16
81716: PUSH
81717: LD_INT 20
81719: PUSH
81720: LD_INT 21
81722: PUSH
81723: LD_INT 22
81725: PUSH
81726: LD_INT 23
81728: PUSH
81729: LD_INT 25
81731: PUSH
81732: LD_INT 26
81734: PUSH
81735: LD_INT 30
81737: PUSH
81738: LD_INT 31
81740: PUSH
81741: LD_INT 32
81743: PUSH
81744: LD_INT 33
81746: PUSH
81747: LD_INT 34
81749: PUSH
81750: EMPTY
81751: LIST
81752: LIST
81753: LIST
81754: LIST
81755: LIST
81756: LIST
81757: LIST
81758: LIST
81759: LIST
81760: LIST
81761: LIST
81762: LIST
81763: LIST
81764: LIST
81765: LIST
81766: LIST
81767: LIST
81768: LIST
81769: LIST
81770: PUSH
81771: LD_INT 101
81773: PUSH
81774: LD_INT 102
81776: PUSH
81777: LD_INT 103
81779: PUSH
81780: LD_INT 106
81782: PUSH
81783: LD_INT 108
81785: PUSH
81786: LD_INT 112
81788: PUSH
81789: LD_INT 113
81791: PUSH
81792: LD_INT 114
81794: PUSH
81795: EMPTY
81796: LIST
81797: LIST
81798: LIST
81799: LIST
81800: LIST
81801: LIST
81802: LIST
81803: LIST
81804: PUSH
81805: EMPTY
81806: LIST
81807: LIST
81808: ST_TO_ADDR
81809: GO 82404
81811: LD_INT 17
81813: DOUBLE
81814: EQUAL
81815: IFTRUE 81819
81817: GO 82031
81819: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
81820: LD_ADDR_VAR 0 1
81824: PUSH
81825: LD_INT 1
81827: PUSH
81828: LD_INT 2
81830: PUSH
81831: LD_INT 3
81833: PUSH
81834: LD_INT 4
81836: PUSH
81837: LD_INT 5
81839: PUSH
81840: LD_INT 6
81842: PUSH
81843: LD_INT 7
81845: PUSH
81846: LD_INT 8
81848: PUSH
81849: LD_INT 9
81851: PUSH
81852: LD_INT 10
81854: PUSH
81855: LD_INT 11
81857: PUSH
81858: LD_INT 12
81860: PUSH
81861: LD_INT 13
81863: PUSH
81864: LD_INT 14
81866: PUSH
81867: LD_INT 15
81869: PUSH
81870: LD_INT 16
81872: PUSH
81873: LD_INT 17
81875: PUSH
81876: LD_INT 18
81878: PUSH
81879: LD_INT 19
81881: PUSH
81882: LD_INT 20
81884: PUSH
81885: LD_INT 21
81887: PUSH
81888: LD_INT 22
81890: PUSH
81891: LD_INT 23
81893: PUSH
81894: LD_INT 24
81896: PUSH
81897: LD_INT 25
81899: PUSH
81900: LD_INT 26
81902: PUSH
81903: LD_INT 27
81905: PUSH
81906: LD_INT 28
81908: PUSH
81909: LD_INT 29
81911: PUSH
81912: LD_INT 30
81914: PUSH
81915: LD_INT 31
81917: PUSH
81918: LD_INT 32
81920: PUSH
81921: LD_INT 33
81923: PUSH
81924: LD_INT 34
81926: PUSH
81927: LD_INT 36
81929: PUSH
81930: EMPTY
81931: LIST
81932: LIST
81933: LIST
81934: LIST
81935: LIST
81936: LIST
81937: LIST
81938: LIST
81939: LIST
81940: LIST
81941: LIST
81942: LIST
81943: LIST
81944: LIST
81945: LIST
81946: LIST
81947: LIST
81948: LIST
81949: LIST
81950: LIST
81951: LIST
81952: LIST
81953: LIST
81954: LIST
81955: LIST
81956: LIST
81957: LIST
81958: LIST
81959: LIST
81960: LIST
81961: LIST
81962: LIST
81963: LIST
81964: LIST
81965: LIST
81966: PUSH
81967: LD_INT 101
81969: PUSH
81970: LD_INT 102
81972: PUSH
81973: LD_INT 103
81975: PUSH
81976: LD_INT 104
81978: PUSH
81979: LD_INT 105
81981: PUSH
81982: LD_INT 106
81984: PUSH
81985: LD_INT 107
81987: PUSH
81988: LD_INT 108
81990: PUSH
81991: LD_INT 109
81993: PUSH
81994: LD_INT 110
81996: PUSH
81997: LD_INT 111
81999: PUSH
82000: LD_INT 112
82002: PUSH
82003: LD_INT 113
82005: PUSH
82006: LD_INT 114
82008: PUSH
82009: EMPTY
82010: LIST
82011: LIST
82012: LIST
82013: LIST
82014: LIST
82015: LIST
82016: LIST
82017: LIST
82018: LIST
82019: LIST
82020: LIST
82021: LIST
82022: LIST
82023: LIST
82024: PUSH
82025: EMPTY
82026: LIST
82027: LIST
82028: ST_TO_ADDR
82029: GO 82404
82031: LD_INT 18
82033: DOUBLE
82034: EQUAL
82035: IFTRUE 82039
82037: GO 82175
82039: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
82040: LD_ADDR_VAR 0 1
82044: PUSH
82045: LD_INT 2
82047: PUSH
82048: LD_INT 4
82050: PUSH
82051: LD_INT 5
82053: PUSH
82054: LD_INT 7
82056: PUSH
82057: LD_INT 11
82059: PUSH
82060: LD_INT 12
82062: PUSH
82063: LD_INT 15
82065: PUSH
82066: LD_INT 16
82068: PUSH
82069: LD_INT 20
82071: PUSH
82072: LD_INT 21
82074: PUSH
82075: LD_INT 22
82077: PUSH
82078: LD_INT 23
82080: PUSH
82081: LD_INT 25
82083: PUSH
82084: LD_INT 26
82086: PUSH
82087: LD_INT 30
82089: PUSH
82090: LD_INT 31
82092: PUSH
82093: LD_INT 32
82095: PUSH
82096: LD_INT 33
82098: PUSH
82099: LD_INT 34
82101: PUSH
82102: LD_INT 35
82104: PUSH
82105: LD_INT 36
82107: PUSH
82108: EMPTY
82109: LIST
82110: LIST
82111: LIST
82112: LIST
82113: LIST
82114: LIST
82115: LIST
82116: LIST
82117: LIST
82118: LIST
82119: LIST
82120: LIST
82121: LIST
82122: LIST
82123: LIST
82124: LIST
82125: LIST
82126: LIST
82127: LIST
82128: LIST
82129: LIST
82130: PUSH
82131: LD_INT 101
82133: PUSH
82134: LD_INT 102
82136: PUSH
82137: LD_INT 103
82139: PUSH
82140: LD_INT 106
82142: PUSH
82143: LD_INT 108
82145: PUSH
82146: LD_INT 112
82148: PUSH
82149: LD_INT 113
82151: PUSH
82152: LD_INT 114
82154: PUSH
82155: LD_INT 115
82157: PUSH
82158: EMPTY
82159: LIST
82160: LIST
82161: LIST
82162: LIST
82163: LIST
82164: LIST
82165: LIST
82166: LIST
82167: LIST
82168: PUSH
82169: EMPTY
82170: LIST
82171: LIST
82172: ST_TO_ADDR
82173: GO 82404
82175: LD_INT 19
82177: DOUBLE
82178: EQUAL
82179: IFTRUE 82183
82181: GO 82403
82183: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
82184: LD_ADDR_VAR 0 1
82188: PUSH
82189: LD_INT 1
82191: PUSH
82192: LD_INT 2
82194: PUSH
82195: LD_INT 3
82197: PUSH
82198: LD_INT 4
82200: PUSH
82201: LD_INT 5
82203: PUSH
82204: LD_INT 6
82206: PUSH
82207: LD_INT 7
82209: PUSH
82210: LD_INT 8
82212: PUSH
82213: LD_INT 9
82215: PUSH
82216: LD_INT 10
82218: PUSH
82219: LD_INT 11
82221: PUSH
82222: LD_INT 12
82224: PUSH
82225: LD_INT 13
82227: PUSH
82228: LD_INT 14
82230: PUSH
82231: LD_INT 15
82233: PUSH
82234: LD_INT 16
82236: PUSH
82237: LD_INT 17
82239: PUSH
82240: LD_INT 18
82242: PUSH
82243: LD_INT 19
82245: PUSH
82246: LD_INT 20
82248: PUSH
82249: LD_INT 21
82251: PUSH
82252: LD_INT 22
82254: PUSH
82255: LD_INT 23
82257: PUSH
82258: LD_INT 24
82260: PUSH
82261: LD_INT 25
82263: PUSH
82264: LD_INT 26
82266: PUSH
82267: LD_INT 27
82269: PUSH
82270: LD_INT 28
82272: PUSH
82273: LD_INT 29
82275: PUSH
82276: LD_INT 30
82278: PUSH
82279: LD_INT 31
82281: PUSH
82282: LD_INT 32
82284: PUSH
82285: LD_INT 33
82287: PUSH
82288: LD_INT 34
82290: PUSH
82291: LD_INT 35
82293: PUSH
82294: LD_INT 36
82296: PUSH
82297: EMPTY
82298: LIST
82299: LIST
82300: LIST
82301: LIST
82302: LIST
82303: LIST
82304: LIST
82305: LIST
82306: LIST
82307: LIST
82308: LIST
82309: LIST
82310: LIST
82311: LIST
82312: LIST
82313: LIST
82314: LIST
82315: LIST
82316: LIST
82317: LIST
82318: LIST
82319: LIST
82320: LIST
82321: LIST
82322: LIST
82323: LIST
82324: LIST
82325: LIST
82326: LIST
82327: LIST
82328: LIST
82329: LIST
82330: LIST
82331: LIST
82332: LIST
82333: LIST
82334: PUSH
82335: LD_INT 101
82337: PUSH
82338: LD_INT 102
82340: PUSH
82341: LD_INT 103
82343: PUSH
82344: LD_INT 104
82346: PUSH
82347: LD_INT 105
82349: PUSH
82350: LD_INT 106
82352: PUSH
82353: LD_INT 107
82355: PUSH
82356: LD_INT 108
82358: PUSH
82359: LD_INT 109
82361: PUSH
82362: LD_INT 110
82364: PUSH
82365: LD_INT 111
82367: PUSH
82368: LD_INT 112
82370: PUSH
82371: LD_INT 113
82373: PUSH
82374: LD_INT 114
82376: PUSH
82377: LD_INT 115
82379: PUSH
82380: EMPTY
82381: LIST
82382: LIST
82383: LIST
82384: LIST
82385: LIST
82386: LIST
82387: LIST
82388: LIST
82389: LIST
82390: LIST
82391: LIST
82392: LIST
82393: LIST
82394: LIST
82395: LIST
82396: PUSH
82397: EMPTY
82398: LIST
82399: LIST
82400: ST_TO_ADDR
82401: GO 82404
82403: POP
// end else
82404: GO 82623
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
82406: LD_ADDR_VAR 0 1
82410: PUSH
82411: LD_INT 1
82413: PUSH
82414: LD_INT 2
82416: PUSH
82417: LD_INT 3
82419: PUSH
82420: LD_INT 4
82422: PUSH
82423: LD_INT 5
82425: PUSH
82426: LD_INT 6
82428: PUSH
82429: LD_INT 7
82431: PUSH
82432: LD_INT 8
82434: PUSH
82435: LD_INT 9
82437: PUSH
82438: LD_INT 10
82440: PUSH
82441: LD_INT 11
82443: PUSH
82444: LD_INT 12
82446: PUSH
82447: LD_INT 13
82449: PUSH
82450: LD_INT 14
82452: PUSH
82453: LD_INT 15
82455: PUSH
82456: LD_INT 16
82458: PUSH
82459: LD_INT 17
82461: PUSH
82462: LD_INT 18
82464: PUSH
82465: LD_INT 19
82467: PUSH
82468: LD_INT 20
82470: PUSH
82471: LD_INT 21
82473: PUSH
82474: LD_INT 22
82476: PUSH
82477: LD_INT 23
82479: PUSH
82480: LD_INT 24
82482: PUSH
82483: LD_INT 25
82485: PUSH
82486: LD_INT 26
82488: PUSH
82489: LD_INT 27
82491: PUSH
82492: LD_INT 28
82494: PUSH
82495: LD_INT 29
82497: PUSH
82498: LD_INT 30
82500: PUSH
82501: LD_INT 31
82503: PUSH
82504: LD_INT 32
82506: PUSH
82507: LD_INT 33
82509: PUSH
82510: LD_INT 34
82512: PUSH
82513: LD_INT 35
82515: PUSH
82516: LD_INT 36
82518: PUSH
82519: EMPTY
82520: LIST
82521: LIST
82522: LIST
82523: LIST
82524: LIST
82525: LIST
82526: LIST
82527: LIST
82528: LIST
82529: LIST
82530: LIST
82531: LIST
82532: LIST
82533: LIST
82534: LIST
82535: LIST
82536: LIST
82537: LIST
82538: LIST
82539: LIST
82540: LIST
82541: LIST
82542: LIST
82543: LIST
82544: LIST
82545: LIST
82546: LIST
82547: LIST
82548: LIST
82549: LIST
82550: LIST
82551: LIST
82552: LIST
82553: LIST
82554: LIST
82555: LIST
82556: PUSH
82557: LD_INT 101
82559: PUSH
82560: LD_INT 102
82562: PUSH
82563: LD_INT 103
82565: PUSH
82566: LD_INT 104
82568: PUSH
82569: LD_INT 105
82571: PUSH
82572: LD_INT 106
82574: PUSH
82575: LD_INT 107
82577: PUSH
82578: LD_INT 108
82580: PUSH
82581: LD_INT 109
82583: PUSH
82584: LD_INT 110
82586: PUSH
82587: LD_INT 111
82589: PUSH
82590: LD_INT 112
82592: PUSH
82593: LD_INT 113
82595: PUSH
82596: LD_INT 114
82598: PUSH
82599: LD_INT 115
82601: PUSH
82602: EMPTY
82603: LIST
82604: LIST
82605: LIST
82606: LIST
82607: LIST
82608: LIST
82609: LIST
82610: LIST
82611: LIST
82612: LIST
82613: LIST
82614: LIST
82615: LIST
82616: LIST
82617: LIST
82618: PUSH
82619: EMPTY
82620: LIST
82621: LIST
82622: ST_TO_ADDR
// if result then
82623: LD_VAR 0 1
82627: IFFALSE 82916
// begin normal :=  ;
82629: LD_ADDR_VAR 0 3
82633: PUSH
82634: LD_STRING 
82636: ST_TO_ADDR
// hardcore :=  ;
82637: LD_ADDR_VAR 0 4
82641: PUSH
82642: LD_STRING 
82644: ST_TO_ADDR
// for i = 1 to normalCounter do
82645: LD_ADDR_VAR 0 5
82649: PUSH
82650: DOUBLE
82651: LD_INT 1
82653: DEC
82654: ST_TO_ADDR
82655: LD_EXP 107
82659: PUSH
82660: FOR_TO
82661: IFFALSE 82762
// begin tmp := 0 ;
82663: LD_ADDR_VAR 0 2
82667: PUSH
82668: LD_STRING 0
82670: ST_TO_ADDR
// if result [ 1 ] then
82671: LD_VAR 0 1
82675: PUSH
82676: LD_INT 1
82678: ARRAY
82679: IFFALSE 82744
// if result [ 1 ] [ 1 ] = i then
82681: LD_VAR 0 1
82685: PUSH
82686: LD_INT 1
82688: ARRAY
82689: PUSH
82690: LD_INT 1
82692: ARRAY
82693: PUSH
82694: LD_VAR 0 5
82698: EQUAL
82699: IFFALSE 82744
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
82701: LD_ADDR_VAR 0 1
82705: PUSH
82706: LD_VAR 0 1
82710: PPUSH
82711: LD_INT 1
82713: PPUSH
82714: LD_VAR 0 1
82718: PUSH
82719: LD_INT 1
82721: ARRAY
82722: PPUSH
82723: LD_INT 1
82725: PPUSH
82726: CALL_OW 3
82730: PPUSH
82731: CALL_OW 1
82735: ST_TO_ADDR
// tmp := 1 ;
82736: LD_ADDR_VAR 0 2
82740: PUSH
82741: LD_STRING 1
82743: ST_TO_ADDR
// end ; normal := normal & tmp ;
82744: LD_ADDR_VAR 0 3
82748: PUSH
82749: LD_VAR 0 3
82753: PUSH
82754: LD_VAR 0 2
82758: STR
82759: ST_TO_ADDR
// end ;
82760: GO 82660
82762: POP
82763: POP
// for i = 1 to hardcoreCounter do
82764: LD_ADDR_VAR 0 5
82768: PUSH
82769: DOUBLE
82770: LD_INT 1
82772: DEC
82773: ST_TO_ADDR
82774: LD_EXP 108
82778: PUSH
82779: FOR_TO
82780: IFFALSE 82885
// begin tmp := 0 ;
82782: LD_ADDR_VAR 0 2
82786: PUSH
82787: LD_STRING 0
82789: ST_TO_ADDR
// if result [ 2 ] then
82790: LD_VAR 0 1
82794: PUSH
82795: LD_INT 2
82797: ARRAY
82798: IFFALSE 82867
// if result [ 2 ] [ 1 ] = 100 + i then
82800: LD_VAR 0 1
82804: PUSH
82805: LD_INT 2
82807: ARRAY
82808: PUSH
82809: LD_INT 1
82811: ARRAY
82812: PUSH
82813: LD_INT 100
82815: PUSH
82816: LD_VAR 0 5
82820: PLUS
82821: EQUAL
82822: IFFALSE 82867
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
82824: LD_ADDR_VAR 0 1
82828: PUSH
82829: LD_VAR 0 1
82833: PPUSH
82834: LD_INT 2
82836: PPUSH
82837: LD_VAR 0 1
82841: PUSH
82842: LD_INT 2
82844: ARRAY
82845: PPUSH
82846: LD_INT 1
82848: PPUSH
82849: CALL_OW 3
82853: PPUSH
82854: CALL_OW 1
82858: ST_TO_ADDR
// tmp := 1 ;
82859: LD_ADDR_VAR 0 2
82863: PUSH
82864: LD_STRING 1
82866: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
82867: LD_ADDR_VAR 0 4
82871: PUSH
82872: LD_VAR 0 4
82876: PUSH
82877: LD_VAR 0 2
82881: STR
82882: ST_TO_ADDR
// end ;
82883: GO 82779
82885: POP
82886: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
82887: LD_STRING getStreamItemsFromMission("
82889: PUSH
82890: LD_VAR 0 3
82894: STR
82895: PUSH
82896: LD_STRING ","
82898: STR
82899: PUSH
82900: LD_VAR 0 4
82904: STR
82905: PUSH
82906: LD_STRING ")
82908: STR
82909: PPUSH
82910: CALL_OW 559
// end else
82914: GO 82923
// ToLua ( getStreamItemsFromMission("","") ) ;
82916: LD_STRING getStreamItemsFromMission("","")
82918: PPUSH
82919: CALL_OW 559
// end ;
82923: LD_VAR 0 1
82927: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
82928: LD_VAR 0 2
82932: PUSH
82933: LD_INT 100
82935: EQUAL
82936: IFFALSE 83885
// begin if not StreamModeActive then
82938: LD_EXP 106
82942: NOT
82943: IFFALSE 82953
// StreamModeActive := true ;
82945: LD_ADDR_EXP 106
82949: PUSH
82950: LD_INT 1
82952: ST_TO_ADDR
// if p3 = 0 then
82953: LD_VAR 0 3
82957: PUSH
82958: LD_INT 0
82960: EQUAL
82961: IFFALSE 82967
// InitStreamMode ;
82963: CALL 79006 0 0
// if p3 = 1 then
82967: LD_VAR 0 3
82971: PUSH
82972: LD_INT 1
82974: EQUAL
82975: IFFALSE 82985
// sRocket := true ;
82977: LD_ADDR_EXP 111
82981: PUSH
82982: LD_INT 1
82984: ST_TO_ADDR
// if p3 = 2 then
82985: LD_VAR 0 3
82989: PUSH
82990: LD_INT 2
82992: EQUAL
82993: IFFALSE 83003
// sSpeed := true ;
82995: LD_ADDR_EXP 110
82999: PUSH
83000: LD_INT 1
83002: ST_TO_ADDR
// if p3 = 3 then
83003: LD_VAR 0 3
83007: PUSH
83008: LD_INT 3
83010: EQUAL
83011: IFFALSE 83021
// sEngine := true ;
83013: LD_ADDR_EXP 112
83017: PUSH
83018: LD_INT 1
83020: ST_TO_ADDR
// if p3 = 4 then
83021: LD_VAR 0 3
83025: PUSH
83026: LD_INT 4
83028: EQUAL
83029: IFFALSE 83039
// sSpec := true ;
83031: LD_ADDR_EXP 109
83035: PUSH
83036: LD_INT 1
83038: ST_TO_ADDR
// if p3 = 5 then
83039: LD_VAR 0 3
83043: PUSH
83044: LD_INT 5
83046: EQUAL
83047: IFFALSE 83057
// sLevel := true ;
83049: LD_ADDR_EXP 113
83053: PUSH
83054: LD_INT 1
83056: ST_TO_ADDR
// if p3 = 6 then
83057: LD_VAR 0 3
83061: PUSH
83062: LD_INT 6
83064: EQUAL
83065: IFFALSE 83075
// sArmoury := true ;
83067: LD_ADDR_EXP 114
83071: PUSH
83072: LD_INT 1
83074: ST_TO_ADDR
// if p3 = 7 then
83075: LD_VAR 0 3
83079: PUSH
83080: LD_INT 7
83082: EQUAL
83083: IFFALSE 83093
// sRadar := true ;
83085: LD_ADDR_EXP 115
83089: PUSH
83090: LD_INT 1
83092: ST_TO_ADDR
// if p3 = 8 then
83093: LD_VAR 0 3
83097: PUSH
83098: LD_INT 8
83100: EQUAL
83101: IFFALSE 83111
// sBunker := true ;
83103: LD_ADDR_EXP 116
83107: PUSH
83108: LD_INT 1
83110: ST_TO_ADDR
// if p3 = 9 then
83111: LD_VAR 0 3
83115: PUSH
83116: LD_INT 9
83118: EQUAL
83119: IFFALSE 83129
// sHack := true ;
83121: LD_ADDR_EXP 117
83125: PUSH
83126: LD_INT 1
83128: ST_TO_ADDR
// if p3 = 10 then
83129: LD_VAR 0 3
83133: PUSH
83134: LD_INT 10
83136: EQUAL
83137: IFFALSE 83147
// sFire := true ;
83139: LD_ADDR_EXP 118
83143: PUSH
83144: LD_INT 1
83146: ST_TO_ADDR
// if p3 = 11 then
83147: LD_VAR 0 3
83151: PUSH
83152: LD_INT 11
83154: EQUAL
83155: IFFALSE 83165
// sRefresh := true ;
83157: LD_ADDR_EXP 119
83161: PUSH
83162: LD_INT 1
83164: ST_TO_ADDR
// if p3 = 12 then
83165: LD_VAR 0 3
83169: PUSH
83170: LD_INT 12
83172: EQUAL
83173: IFFALSE 83183
// sExp := true ;
83175: LD_ADDR_EXP 120
83179: PUSH
83180: LD_INT 1
83182: ST_TO_ADDR
// if p3 = 13 then
83183: LD_VAR 0 3
83187: PUSH
83188: LD_INT 13
83190: EQUAL
83191: IFFALSE 83201
// sDepot := true ;
83193: LD_ADDR_EXP 121
83197: PUSH
83198: LD_INT 1
83200: ST_TO_ADDR
// if p3 = 14 then
83201: LD_VAR 0 3
83205: PUSH
83206: LD_INT 14
83208: EQUAL
83209: IFFALSE 83219
// sFlag := true ;
83211: LD_ADDR_EXP 122
83215: PUSH
83216: LD_INT 1
83218: ST_TO_ADDR
// if p3 = 15 then
83219: LD_VAR 0 3
83223: PUSH
83224: LD_INT 15
83226: EQUAL
83227: IFFALSE 83237
// sKamikadze := true ;
83229: LD_ADDR_EXP 130
83233: PUSH
83234: LD_INT 1
83236: ST_TO_ADDR
// if p3 = 16 then
83237: LD_VAR 0 3
83241: PUSH
83242: LD_INT 16
83244: EQUAL
83245: IFFALSE 83255
// sTroll := true ;
83247: LD_ADDR_EXP 131
83251: PUSH
83252: LD_INT 1
83254: ST_TO_ADDR
// if p3 = 17 then
83255: LD_VAR 0 3
83259: PUSH
83260: LD_INT 17
83262: EQUAL
83263: IFFALSE 83273
// sSlow := true ;
83265: LD_ADDR_EXP 132
83269: PUSH
83270: LD_INT 1
83272: ST_TO_ADDR
// if p3 = 18 then
83273: LD_VAR 0 3
83277: PUSH
83278: LD_INT 18
83280: EQUAL
83281: IFFALSE 83291
// sLack := true ;
83283: LD_ADDR_EXP 133
83287: PUSH
83288: LD_INT 1
83290: ST_TO_ADDR
// if p3 = 19 then
83291: LD_VAR 0 3
83295: PUSH
83296: LD_INT 19
83298: EQUAL
83299: IFFALSE 83309
// sTank := true ;
83301: LD_ADDR_EXP 135
83305: PUSH
83306: LD_INT 1
83308: ST_TO_ADDR
// if p3 = 20 then
83309: LD_VAR 0 3
83313: PUSH
83314: LD_INT 20
83316: EQUAL
83317: IFFALSE 83327
// sRemote := true ;
83319: LD_ADDR_EXP 136
83323: PUSH
83324: LD_INT 1
83326: ST_TO_ADDR
// if p3 = 21 then
83327: LD_VAR 0 3
83331: PUSH
83332: LD_INT 21
83334: EQUAL
83335: IFFALSE 83345
// sPowell := true ;
83337: LD_ADDR_EXP 137
83341: PUSH
83342: LD_INT 1
83344: ST_TO_ADDR
// if p3 = 22 then
83345: LD_VAR 0 3
83349: PUSH
83350: LD_INT 22
83352: EQUAL
83353: IFFALSE 83363
// sTeleport := true ;
83355: LD_ADDR_EXP 140
83359: PUSH
83360: LD_INT 1
83362: ST_TO_ADDR
// if p3 = 23 then
83363: LD_VAR 0 3
83367: PUSH
83368: LD_INT 23
83370: EQUAL
83371: IFFALSE 83381
// sOilTower := true ;
83373: LD_ADDR_EXP 142
83377: PUSH
83378: LD_INT 1
83380: ST_TO_ADDR
// if p3 = 24 then
83381: LD_VAR 0 3
83385: PUSH
83386: LD_INT 24
83388: EQUAL
83389: IFFALSE 83399
// sShovel := true ;
83391: LD_ADDR_EXP 143
83395: PUSH
83396: LD_INT 1
83398: ST_TO_ADDR
// if p3 = 25 then
83399: LD_VAR 0 3
83403: PUSH
83404: LD_INT 25
83406: EQUAL
83407: IFFALSE 83417
// sSheik := true ;
83409: LD_ADDR_EXP 144
83413: PUSH
83414: LD_INT 1
83416: ST_TO_ADDR
// if p3 = 26 then
83417: LD_VAR 0 3
83421: PUSH
83422: LD_INT 26
83424: EQUAL
83425: IFFALSE 83435
// sEarthquake := true ;
83427: LD_ADDR_EXP 146
83431: PUSH
83432: LD_INT 1
83434: ST_TO_ADDR
// if p3 = 27 then
83435: LD_VAR 0 3
83439: PUSH
83440: LD_INT 27
83442: EQUAL
83443: IFFALSE 83453
// sAI := true ;
83445: LD_ADDR_EXP 147
83449: PUSH
83450: LD_INT 1
83452: ST_TO_ADDR
// if p3 = 28 then
83453: LD_VAR 0 3
83457: PUSH
83458: LD_INT 28
83460: EQUAL
83461: IFFALSE 83471
// sCargo := true ;
83463: LD_ADDR_EXP 150
83467: PUSH
83468: LD_INT 1
83470: ST_TO_ADDR
// if p3 = 29 then
83471: LD_VAR 0 3
83475: PUSH
83476: LD_INT 29
83478: EQUAL
83479: IFFALSE 83489
// sDLaser := true ;
83481: LD_ADDR_EXP 151
83485: PUSH
83486: LD_INT 1
83488: ST_TO_ADDR
// if p3 = 30 then
83489: LD_VAR 0 3
83493: PUSH
83494: LD_INT 30
83496: EQUAL
83497: IFFALSE 83507
// sExchange := true ;
83499: LD_ADDR_EXP 152
83503: PUSH
83504: LD_INT 1
83506: ST_TO_ADDR
// if p3 = 31 then
83507: LD_VAR 0 3
83511: PUSH
83512: LD_INT 31
83514: EQUAL
83515: IFFALSE 83525
// sFac := true ;
83517: LD_ADDR_EXP 153
83521: PUSH
83522: LD_INT 1
83524: ST_TO_ADDR
// if p3 = 32 then
83525: LD_VAR 0 3
83529: PUSH
83530: LD_INT 32
83532: EQUAL
83533: IFFALSE 83543
// sPower := true ;
83535: LD_ADDR_EXP 154
83539: PUSH
83540: LD_INT 1
83542: ST_TO_ADDR
// if p3 = 33 then
83543: LD_VAR 0 3
83547: PUSH
83548: LD_INT 33
83550: EQUAL
83551: IFFALSE 83561
// sRandom := true ;
83553: LD_ADDR_EXP 155
83557: PUSH
83558: LD_INT 1
83560: ST_TO_ADDR
// if p3 = 34 then
83561: LD_VAR 0 3
83565: PUSH
83566: LD_INT 34
83568: EQUAL
83569: IFFALSE 83579
// sShield := true ;
83571: LD_ADDR_EXP 156
83575: PUSH
83576: LD_INT 1
83578: ST_TO_ADDR
// if p3 = 35 then
83579: LD_VAR 0 3
83583: PUSH
83584: LD_INT 35
83586: EQUAL
83587: IFFALSE 83597
// sTime := true ;
83589: LD_ADDR_EXP 157
83593: PUSH
83594: LD_INT 1
83596: ST_TO_ADDR
// if p3 = 36 then
83597: LD_VAR 0 3
83601: PUSH
83602: LD_INT 36
83604: EQUAL
83605: IFFALSE 83615
// sTools := true ;
83607: LD_ADDR_EXP 158
83611: PUSH
83612: LD_INT 1
83614: ST_TO_ADDR
// if p3 = 101 then
83615: LD_VAR 0 3
83619: PUSH
83620: LD_INT 101
83622: EQUAL
83623: IFFALSE 83633
// sSold := true ;
83625: LD_ADDR_EXP 123
83629: PUSH
83630: LD_INT 1
83632: ST_TO_ADDR
// if p3 = 102 then
83633: LD_VAR 0 3
83637: PUSH
83638: LD_INT 102
83640: EQUAL
83641: IFFALSE 83651
// sDiff := true ;
83643: LD_ADDR_EXP 124
83647: PUSH
83648: LD_INT 1
83650: ST_TO_ADDR
// if p3 = 103 then
83651: LD_VAR 0 3
83655: PUSH
83656: LD_INT 103
83658: EQUAL
83659: IFFALSE 83669
// sFog := true ;
83661: LD_ADDR_EXP 127
83665: PUSH
83666: LD_INT 1
83668: ST_TO_ADDR
// if p3 = 104 then
83669: LD_VAR 0 3
83673: PUSH
83674: LD_INT 104
83676: EQUAL
83677: IFFALSE 83687
// sReset := true ;
83679: LD_ADDR_EXP 128
83683: PUSH
83684: LD_INT 1
83686: ST_TO_ADDR
// if p3 = 105 then
83687: LD_VAR 0 3
83691: PUSH
83692: LD_INT 105
83694: EQUAL
83695: IFFALSE 83705
// sSun := true ;
83697: LD_ADDR_EXP 129
83701: PUSH
83702: LD_INT 1
83704: ST_TO_ADDR
// if p3 = 106 then
83705: LD_VAR 0 3
83709: PUSH
83710: LD_INT 106
83712: EQUAL
83713: IFFALSE 83723
// sTiger := true ;
83715: LD_ADDR_EXP 125
83719: PUSH
83720: LD_INT 1
83722: ST_TO_ADDR
// if p3 = 107 then
83723: LD_VAR 0 3
83727: PUSH
83728: LD_INT 107
83730: EQUAL
83731: IFFALSE 83741
// sBomb := true ;
83733: LD_ADDR_EXP 126
83737: PUSH
83738: LD_INT 1
83740: ST_TO_ADDR
// if p3 = 108 then
83741: LD_VAR 0 3
83745: PUSH
83746: LD_INT 108
83748: EQUAL
83749: IFFALSE 83759
// sWound := true ;
83751: LD_ADDR_EXP 134
83755: PUSH
83756: LD_INT 1
83758: ST_TO_ADDR
// if p3 = 109 then
83759: LD_VAR 0 3
83763: PUSH
83764: LD_INT 109
83766: EQUAL
83767: IFFALSE 83777
// sBetray := true ;
83769: LD_ADDR_EXP 138
83773: PUSH
83774: LD_INT 1
83776: ST_TO_ADDR
// if p3 = 110 then
83777: LD_VAR 0 3
83781: PUSH
83782: LD_INT 110
83784: EQUAL
83785: IFFALSE 83795
// sContamin := true ;
83787: LD_ADDR_EXP 139
83791: PUSH
83792: LD_INT 1
83794: ST_TO_ADDR
// if p3 = 111 then
83795: LD_VAR 0 3
83799: PUSH
83800: LD_INT 111
83802: EQUAL
83803: IFFALSE 83813
// sOil := true ;
83805: LD_ADDR_EXP 141
83809: PUSH
83810: LD_INT 1
83812: ST_TO_ADDR
// if p3 = 112 then
83813: LD_VAR 0 3
83817: PUSH
83818: LD_INT 112
83820: EQUAL
83821: IFFALSE 83831
// sStu := true ;
83823: LD_ADDR_EXP 145
83827: PUSH
83828: LD_INT 1
83830: ST_TO_ADDR
// if p3 = 113 then
83831: LD_VAR 0 3
83835: PUSH
83836: LD_INT 113
83838: EQUAL
83839: IFFALSE 83849
// sBazooka := true ;
83841: LD_ADDR_EXP 148
83845: PUSH
83846: LD_INT 1
83848: ST_TO_ADDR
// if p3 = 114 then
83849: LD_VAR 0 3
83853: PUSH
83854: LD_INT 114
83856: EQUAL
83857: IFFALSE 83867
// sMortar := true ;
83859: LD_ADDR_EXP 149
83863: PUSH
83864: LD_INT 1
83866: ST_TO_ADDR
// if p3 = 115 then
83867: LD_VAR 0 3
83871: PUSH
83872: LD_INT 115
83874: EQUAL
83875: IFFALSE 83885
// sRanger := true ;
83877: LD_ADDR_EXP 159
83881: PUSH
83882: LD_INT 1
83884: ST_TO_ADDR
// end ; end ;
83885: PPOPN 6
83887: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
83888: LD_EXP 106
83892: PUSH
83893: LD_EXP 111
83897: AND
83898: IFFALSE 84022
83900: GO 83902
83902: DISABLE
83903: LD_INT 0
83905: PPUSH
83906: PPUSH
// begin enable ;
83907: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
83908: LD_ADDR_VAR 0 2
83912: PUSH
83913: LD_INT 22
83915: PUSH
83916: LD_OWVAR 2
83920: PUSH
83921: EMPTY
83922: LIST
83923: LIST
83924: PUSH
83925: LD_INT 2
83927: PUSH
83928: LD_INT 34
83930: PUSH
83931: LD_INT 7
83933: PUSH
83934: EMPTY
83935: LIST
83936: LIST
83937: PUSH
83938: LD_INT 34
83940: PUSH
83941: LD_INT 45
83943: PUSH
83944: EMPTY
83945: LIST
83946: LIST
83947: PUSH
83948: LD_INT 34
83950: PUSH
83951: LD_INT 28
83953: PUSH
83954: EMPTY
83955: LIST
83956: LIST
83957: PUSH
83958: LD_INT 34
83960: PUSH
83961: LD_INT 47
83963: PUSH
83964: EMPTY
83965: LIST
83966: LIST
83967: PUSH
83968: EMPTY
83969: LIST
83970: LIST
83971: LIST
83972: LIST
83973: LIST
83974: PUSH
83975: EMPTY
83976: LIST
83977: LIST
83978: PPUSH
83979: CALL_OW 69
83983: ST_TO_ADDR
// if not tmp then
83984: LD_VAR 0 2
83988: NOT
83989: IFFALSE 83993
// exit ;
83991: GO 84022
// for i in tmp do
83993: LD_ADDR_VAR 0 1
83997: PUSH
83998: LD_VAR 0 2
84002: PUSH
84003: FOR_IN
84004: IFFALSE 84020
// begin SetLives ( i , 0 ) ;
84006: LD_VAR 0 1
84010: PPUSH
84011: LD_INT 0
84013: PPUSH
84014: CALL_OW 234
// end ;
84018: GO 84003
84020: POP
84021: POP
// end ;
84022: PPOPN 2
84024: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
84025: LD_EXP 106
84029: PUSH
84030: LD_EXP 112
84034: AND
84035: IFFALSE 84119
84037: GO 84039
84039: DISABLE
84040: LD_INT 0
84042: PPUSH
84043: PPUSH
// begin enable ;
84044: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
84045: LD_ADDR_VAR 0 2
84049: PUSH
84050: LD_INT 22
84052: PUSH
84053: LD_OWVAR 2
84057: PUSH
84058: EMPTY
84059: LIST
84060: LIST
84061: PUSH
84062: LD_INT 32
84064: PUSH
84065: LD_INT 3
84067: PUSH
84068: EMPTY
84069: LIST
84070: LIST
84071: PUSH
84072: EMPTY
84073: LIST
84074: LIST
84075: PPUSH
84076: CALL_OW 69
84080: ST_TO_ADDR
// if not tmp then
84081: LD_VAR 0 2
84085: NOT
84086: IFFALSE 84090
// exit ;
84088: GO 84119
// for i in tmp do
84090: LD_ADDR_VAR 0 1
84094: PUSH
84095: LD_VAR 0 2
84099: PUSH
84100: FOR_IN
84101: IFFALSE 84117
// begin SetLives ( i , 0 ) ;
84103: LD_VAR 0 1
84107: PPUSH
84108: LD_INT 0
84110: PPUSH
84111: CALL_OW 234
// end ;
84115: GO 84100
84117: POP
84118: POP
// end ;
84119: PPOPN 2
84121: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
84122: LD_EXP 106
84126: PUSH
84127: LD_EXP 109
84131: AND
84132: IFFALSE 84225
84134: GO 84136
84136: DISABLE
84137: LD_INT 0
84139: PPUSH
// begin enable ;
84140: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
84141: LD_ADDR_VAR 0 1
84145: PUSH
84146: LD_INT 22
84148: PUSH
84149: LD_OWVAR 2
84153: PUSH
84154: EMPTY
84155: LIST
84156: LIST
84157: PUSH
84158: LD_INT 2
84160: PUSH
84161: LD_INT 25
84163: PUSH
84164: LD_INT 5
84166: PUSH
84167: EMPTY
84168: LIST
84169: LIST
84170: PUSH
84171: LD_INT 25
84173: PUSH
84174: LD_INT 9
84176: PUSH
84177: EMPTY
84178: LIST
84179: LIST
84180: PUSH
84181: LD_INT 25
84183: PUSH
84184: LD_INT 8
84186: PUSH
84187: EMPTY
84188: LIST
84189: LIST
84190: PUSH
84191: EMPTY
84192: LIST
84193: LIST
84194: LIST
84195: LIST
84196: PUSH
84197: EMPTY
84198: LIST
84199: LIST
84200: PPUSH
84201: CALL_OW 69
84205: PUSH
84206: FOR_IN
84207: IFFALSE 84223
// begin SetClass ( i , 1 ) ;
84209: LD_VAR 0 1
84213: PPUSH
84214: LD_INT 1
84216: PPUSH
84217: CALL_OW 336
// end ;
84221: GO 84206
84223: POP
84224: POP
// end ;
84225: PPOPN 1
84227: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
84228: LD_EXP 106
84232: PUSH
84233: LD_EXP 110
84237: AND
84238: PUSH
84239: LD_OWVAR 65
84243: PUSH
84244: LD_INT 7
84246: LESS
84247: AND
84248: IFFALSE 84262
84250: GO 84252
84252: DISABLE
// begin enable ;
84253: ENABLE
// game_speed := 7 ;
84254: LD_ADDR_OWVAR 65
84258: PUSH
84259: LD_INT 7
84261: ST_TO_ADDR
// end ;
84262: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
84263: LD_EXP 106
84267: PUSH
84268: LD_EXP 113
84272: AND
84273: IFFALSE 84475
84275: GO 84277
84277: DISABLE
84278: LD_INT 0
84280: PPUSH
84281: PPUSH
84282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
84283: LD_ADDR_VAR 0 3
84287: PUSH
84288: LD_INT 81
84290: PUSH
84291: LD_OWVAR 2
84295: PUSH
84296: EMPTY
84297: LIST
84298: LIST
84299: PUSH
84300: LD_INT 21
84302: PUSH
84303: LD_INT 1
84305: PUSH
84306: EMPTY
84307: LIST
84308: LIST
84309: PUSH
84310: EMPTY
84311: LIST
84312: LIST
84313: PPUSH
84314: CALL_OW 69
84318: ST_TO_ADDR
// if not tmp then
84319: LD_VAR 0 3
84323: NOT
84324: IFFALSE 84328
// exit ;
84326: GO 84475
// if tmp > 5 then
84328: LD_VAR 0 3
84332: PUSH
84333: LD_INT 5
84335: GREATER
84336: IFFALSE 84348
// k := 5 else
84338: LD_ADDR_VAR 0 2
84342: PUSH
84343: LD_INT 5
84345: ST_TO_ADDR
84346: GO 84358
// k := tmp ;
84348: LD_ADDR_VAR 0 2
84352: PUSH
84353: LD_VAR 0 3
84357: ST_TO_ADDR
// for i := 1 to k do
84358: LD_ADDR_VAR 0 1
84362: PUSH
84363: DOUBLE
84364: LD_INT 1
84366: DEC
84367: ST_TO_ADDR
84368: LD_VAR 0 2
84372: PUSH
84373: FOR_TO
84374: IFFALSE 84473
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
84376: LD_VAR 0 3
84380: PUSH
84381: LD_VAR 0 1
84385: ARRAY
84386: PPUSH
84387: LD_VAR 0 1
84391: PUSH
84392: LD_INT 4
84394: MOD
84395: PUSH
84396: LD_INT 1
84398: PLUS
84399: PPUSH
84400: CALL_OW 259
84404: PUSH
84405: LD_INT 10
84407: LESS
84408: IFFALSE 84471
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
84410: LD_VAR 0 3
84414: PUSH
84415: LD_VAR 0 1
84419: ARRAY
84420: PPUSH
84421: LD_VAR 0 1
84425: PUSH
84426: LD_INT 4
84428: MOD
84429: PUSH
84430: LD_INT 1
84432: PLUS
84433: PPUSH
84434: LD_VAR 0 3
84438: PUSH
84439: LD_VAR 0 1
84443: ARRAY
84444: PPUSH
84445: LD_VAR 0 1
84449: PUSH
84450: LD_INT 4
84452: MOD
84453: PUSH
84454: LD_INT 1
84456: PLUS
84457: PPUSH
84458: CALL_OW 259
84462: PUSH
84463: LD_INT 1
84465: PLUS
84466: PPUSH
84467: CALL_OW 237
84471: GO 84373
84473: POP
84474: POP
// end ;
84475: PPOPN 3
84477: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
84478: LD_EXP 106
84482: PUSH
84483: LD_EXP 114
84487: AND
84488: IFFALSE 84508
84490: GO 84492
84492: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
84493: LD_INT 4
84495: PPUSH
84496: LD_OWVAR 2
84500: PPUSH
84501: LD_INT 0
84503: PPUSH
84504: CALL_OW 324
84508: END
// every 0 0$1 trigger StreamModeActive and sShovel do
84509: LD_EXP 106
84513: PUSH
84514: LD_EXP 143
84518: AND
84519: IFFALSE 84539
84521: GO 84523
84523: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
84524: LD_INT 19
84526: PPUSH
84527: LD_OWVAR 2
84531: PPUSH
84532: LD_INT 0
84534: PPUSH
84535: CALL_OW 324
84539: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
84540: LD_EXP 106
84544: PUSH
84545: LD_EXP 115
84549: AND
84550: IFFALSE 84652
84552: GO 84554
84554: DISABLE
84555: LD_INT 0
84557: PPUSH
84558: PPUSH
// begin enable ;
84559: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
84560: LD_ADDR_VAR 0 2
84564: PUSH
84565: LD_INT 22
84567: PUSH
84568: LD_OWVAR 2
84572: PUSH
84573: EMPTY
84574: LIST
84575: LIST
84576: PUSH
84577: LD_INT 2
84579: PUSH
84580: LD_INT 34
84582: PUSH
84583: LD_INT 11
84585: PUSH
84586: EMPTY
84587: LIST
84588: LIST
84589: PUSH
84590: LD_INT 34
84592: PUSH
84593: LD_INT 30
84595: PUSH
84596: EMPTY
84597: LIST
84598: LIST
84599: PUSH
84600: EMPTY
84601: LIST
84602: LIST
84603: LIST
84604: PUSH
84605: EMPTY
84606: LIST
84607: LIST
84608: PPUSH
84609: CALL_OW 69
84613: ST_TO_ADDR
// if not tmp then
84614: LD_VAR 0 2
84618: NOT
84619: IFFALSE 84623
// exit ;
84621: GO 84652
// for i in tmp do
84623: LD_ADDR_VAR 0 1
84627: PUSH
84628: LD_VAR 0 2
84632: PUSH
84633: FOR_IN
84634: IFFALSE 84650
// begin SetLives ( i , 0 ) ;
84636: LD_VAR 0 1
84640: PPUSH
84641: LD_INT 0
84643: PPUSH
84644: CALL_OW 234
// end ;
84648: GO 84633
84650: POP
84651: POP
// end ;
84652: PPOPN 2
84654: END
// every 0 0$1 trigger StreamModeActive and sBunker do
84655: LD_EXP 106
84659: PUSH
84660: LD_EXP 116
84664: AND
84665: IFFALSE 84685
84667: GO 84669
84669: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
84670: LD_INT 32
84672: PPUSH
84673: LD_OWVAR 2
84677: PPUSH
84678: LD_INT 0
84680: PPUSH
84681: CALL_OW 324
84685: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
84686: LD_EXP 106
84690: PUSH
84691: LD_EXP 117
84695: AND
84696: IFFALSE 84877
84698: GO 84700
84700: DISABLE
84701: LD_INT 0
84703: PPUSH
84704: PPUSH
84705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
84706: LD_ADDR_VAR 0 2
84710: PUSH
84711: LD_INT 22
84713: PUSH
84714: LD_OWVAR 2
84718: PUSH
84719: EMPTY
84720: LIST
84721: LIST
84722: PUSH
84723: LD_INT 33
84725: PUSH
84726: LD_INT 3
84728: PUSH
84729: EMPTY
84730: LIST
84731: LIST
84732: PUSH
84733: EMPTY
84734: LIST
84735: LIST
84736: PPUSH
84737: CALL_OW 69
84741: ST_TO_ADDR
// if not tmp then
84742: LD_VAR 0 2
84746: NOT
84747: IFFALSE 84751
// exit ;
84749: GO 84877
// side := 0 ;
84751: LD_ADDR_VAR 0 3
84755: PUSH
84756: LD_INT 0
84758: ST_TO_ADDR
// for i := 1 to 8 do
84759: LD_ADDR_VAR 0 1
84763: PUSH
84764: DOUBLE
84765: LD_INT 1
84767: DEC
84768: ST_TO_ADDR
84769: LD_INT 8
84771: PUSH
84772: FOR_TO
84773: IFFALSE 84821
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
84775: LD_OWVAR 2
84779: PUSH
84780: LD_VAR 0 1
84784: NONEQUAL
84785: PUSH
84786: LD_OWVAR 2
84790: PPUSH
84791: LD_VAR 0 1
84795: PPUSH
84796: CALL_OW 81
84800: PUSH
84801: LD_INT 2
84803: EQUAL
84804: AND
84805: IFFALSE 84819
// begin side := i ;
84807: LD_ADDR_VAR 0 3
84811: PUSH
84812: LD_VAR 0 1
84816: ST_TO_ADDR
// break ;
84817: GO 84821
// end ;
84819: GO 84772
84821: POP
84822: POP
// if not side then
84823: LD_VAR 0 3
84827: NOT
84828: IFFALSE 84832
// exit ;
84830: GO 84877
// for i := 1 to tmp do
84832: LD_ADDR_VAR 0 1
84836: PUSH
84837: DOUBLE
84838: LD_INT 1
84840: DEC
84841: ST_TO_ADDR
84842: LD_VAR 0 2
84846: PUSH
84847: FOR_TO
84848: IFFALSE 84875
// if Prob ( 60 ) then
84850: LD_INT 60
84852: PPUSH
84853: CALL_OW 13
84857: IFFALSE 84873
// SetSide ( i , side ) ;
84859: LD_VAR 0 1
84863: PPUSH
84864: LD_VAR 0 3
84868: PPUSH
84869: CALL_OW 235
84873: GO 84847
84875: POP
84876: POP
// end ;
84877: PPOPN 3
84879: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
84880: LD_EXP 106
84884: PUSH
84885: LD_EXP 119
84889: AND
84890: IFFALSE 85009
84892: GO 84894
84894: DISABLE
84895: LD_INT 0
84897: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
84898: LD_ADDR_VAR 0 1
84902: PUSH
84903: LD_INT 22
84905: PUSH
84906: LD_OWVAR 2
84910: PUSH
84911: EMPTY
84912: LIST
84913: LIST
84914: PUSH
84915: LD_INT 21
84917: PUSH
84918: LD_INT 1
84920: PUSH
84921: EMPTY
84922: LIST
84923: LIST
84924: PUSH
84925: LD_INT 3
84927: PUSH
84928: LD_INT 23
84930: PUSH
84931: LD_INT 0
84933: PUSH
84934: EMPTY
84935: LIST
84936: LIST
84937: PUSH
84938: EMPTY
84939: LIST
84940: LIST
84941: PUSH
84942: EMPTY
84943: LIST
84944: LIST
84945: LIST
84946: PPUSH
84947: CALL_OW 69
84951: PUSH
84952: FOR_IN
84953: IFFALSE 85007
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
84955: LD_VAR 0 1
84959: PPUSH
84960: CALL_OW 257
84964: PUSH
84965: LD_INT 1
84967: PUSH
84968: LD_INT 2
84970: PUSH
84971: LD_INT 3
84973: PUSH
84974: LD_INT 4
84976: PUSH
84977: EMPTY
84978: LIST
84979: LIST
84980: LIST
84981: LIST
84982: IN
84983: IFFALSE 85005
// SetClass ( un , rand ( 1 , 4 ) ) ;
84985: LD_VAR 0 1
84989: PPUSH
84990: LD_INT 1
84992: PPUSH
84993: LD_INT 4
84995: PPUSH
84996: CALL_OW 12
85000: PPUSH
85001: CALL_OW 336
85005: GO 84952
85007: POP
85008: POP
// end ;
85009: PPOPN 1
85011: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
85012: LD_EXP 106
85016: PUSH
85017: LD_EXP 118
85021: AND
85022: IFFALSE 85101
85024: GO 85026
85026: DISABLE
85027: LD_INT 0
85029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
85030: LD_ADDR_VAR 0 1
85034: PUSH
85035: LD_INT 22
85037: PUSH
85038: LD_OWVAR 2
85042: PUSH
85043: EMPTY
85044: LIST
85045: LIST
85046: PUSH
85047: LD_INT 21
85049: PUSH
85050: LD_INT 3
85052: PUSH
85053: EMPTY
85054: LIST
85055: LIST
85056: PUSH
85057: EMPTY
85058: LIST
85059: LIST
85060: PPUSH
85061: CALL_OW 69
85065: ST_TO_ADDR
// if not tmp then
85066: LD_VAR 0 1
85070: NOT
85071: IFFALSE 85075
// exit ;
85073: GO 85101
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
85075: LD_VAR 0 1
85079: PUSH
85080: LD_INT 1
85082: PPUSH
85083: LD_VAR 0 1
85087: PPUSH
85088: CALL_OW 12
85092: ARRAY
85093: PPUSH
85094: LD_INT 100
85096: PPUSH
85097: CALL_OW 234
// end ;
85101: PPOPN 1
85103: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
85104: LD_EXP 106
85108: PUSH
85109: LD_EXP 120
85113: AND
85114: IFFALSE 85212
85116: GO 85118
85118: DISABLE
85119: LD_INT 0
85121: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
85122: LD_ADDR_VAR 0 1
85126: PUSH
85127: LD_INT 22
85129: PUSH
85130: LD_OWVAR 2
85134: PUSH
85135: EMPTY
85136: LIST
85137: LIST
85138: PUSH
85139: LD_INT 21
85141: PUSH
85142: LD_INT 1
85144: PUSH
85145: EMPTY
85146: LIST
85147: LIST
85148: PUSH
85149: EMPTY
85150: LIST
85151: LIST
85152: PPUSH
85153: CALL_OW 69
85157: ST_TO_ADDR
// if not tmp then
85158: LD_VAR 0 1
85162: NOT
85163: IFFALSE 85167
// exit ;
85165: GO 85212
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
85167: LD_VAR 0 1
85171: PUSH
85172: LD_INT 1
85174: PPUSH
85175: LD_VAR 0 1
85179: PPUSH
85180: CALL_OW 12
85184: ARRAY
85185: PPUSH
85186: LD_INT 1
85188: PPUSH
85189: LD_INT 4
85191: PPUSH
85192: CALL_OW 12
85196: PPUSH
85197: LD_INT 3000
85199: PPUSH
85200: LD_INT 9000
85202: PPUSH
85203: CALL_OW 12
85207: PPUSH
85208: CALL_OW 492
// end ;
85212: PPOPN 1
85214: END
// every 0 0$1 trigger StreamModeActive and sDepot do
85215: LD_EXP 106
85219: PUSH
85220: LD_EXP 121
85224: AND
85225: IFFALSE 85245
85227: GO 85229
85229: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
85230: LD_INT 1
85232: PPUSH
85233: LD_OWVAR 2
85237: PPUSH
85238: LD_INT 0
85240: PPUSH
85241: CALL_OW 324
85245: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
85246: LD_EXP 106
85250: PUSH
85251: LD_EXP 122
85255: AND
85256: IFFALSE 85339
85258: GO 85260
85260: DISABLE
85261: LD_INT 0
85263: PPUSH
85264: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
85265: LD_ADDR_VAR 0 2
85269: PUSH
85270: LD_INT 22
85272: PUSH
85273: LD_OWVAR 2
85277: PUSH
85278: EMPTY
85279: LIST
85280: LIST
85281: PUSH
85282: LD_INT 21
85284: PUSH
85285: LD_INT 3
85287: PUSH
85288: EMPTY
85289: LIST
85290: LIST
85291: PUSH
85292: EMPTY
85293: LIST
85294: LIST
85295: PPUSH
85296: CALL_OW 69
85300: ST_TO_ADDR
// if not tmp then
85301: LD_VAR 0 2
85305: NOT
85306: IFFALSE 85310
// exit ;
85308: GO 85339
// for i in tmp do
85310: LD_ADDR_VAR 0 1
85314: PUSH
85315: LD_VAR 0 2
85319: PUSH
85320: FOR_IN
85321: IFFALSE 85337
// SetBLevel ( i , 10 ) ;
85323: LD_VAR 0 1
85327: PPUSH
85328: LD_INT 10
85330: PPUSH
85331: CALL_OW 241
85335: GO 85320
85337: POP
85338: POP
// end ;
85339: PPOPN 2
85341: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
85342: LD_EXP 106
85346: PUSH
85347: LD_EXP 123
85351: AND
85352: IFFALSE 85463
85354: GO 85356
85356: DISABLE
85357: LD_INT 0
85359: PPUSH
85360: PPUSH
85361: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
85362: LD_ADDR_VAR 0 3
85366: PUSH
85367: LD_INT 22
85369: PUSH
85370: LD_OWVAR 2
85374: PUSH
85375: EMPTY
85376: LIST
85377: LIST
85378: PUSH
85379: LD_INT 25
85381: PUSH
85382: LD_INT 1
85384: PUSH
85385: EMPTY
85386: LIST
85387: LIST
85388: PUSH
85389: EMPTY
85390: LIST
85391: LIST
85392: PPUSH
85393: CALL_OW 69
85397: ST_TO_ADDR
// if not tmp then
85398: LD_VAR 0 3
85402: NOT
85403: IFFALSE 85407
// exit ;
85405: GO 85463
// un := tmp [ rand ( 1 , tmp ) ] ;
85407: LD_ADDR_VAR 0 2
85411: PUSH
85412: LD_VAR 0 3
85416: PUSH
85417: LD_INT 1
85419: PPUSH
85420: LD_VAR 0 3
85424: PPUSH
85425: CALL_OW 12
85429: ARRAY
85430: ST_TO_ADDR
// if Crawls ( un ) then
85431: LD_VAR 0 2
85435: PPUSH
85436: CALL_OW 318
85440: IFFALSE 85451
// ComWalk ( un ) ;
85442: LD_VAR 0 2
85446: PPUSH
85447: CALL_OW 138
// SetClass ( un , class_sniper ) ;
85451: LD_VAR 0 2
85455: PPUSH
85456: LD_INT 5
85458: PPUSH
85459: CALL_OW 336
// end ;
85463: PPOPN 3
85465: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
85466: LD_EXP 106
85470: PUSH
85471: LD_EXP 124
85475: AND
85476: PUSH
85477: LD_OWVAR 67
85481: PUSH
85482: LD_INT 3
85484: LESS
85485: AND
85486: IFFALSE 85505
85488: GO 85490
85490: DISABLE
// Difficulty := Difficulty + 1 ;
85491: LD_ADDR_OWVAR 67
85495: PUSH
85496: LD_OWVAR 67
85500: PUSH
85501: LD_INT 1
85503: PLUS
85504: ST_TO_ADDR
85505: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
85506: LD_EXP 106
85510: PUSH
85511: LD_EXP 125
85515: AND
85516: IFFALSE 85619
85518: GO 85520
85520: DISABLE
85521: LD_INT 0
85523: PPUSH
// begin for i := 1 to 5 do
85524: LD_ADDR_VAR 0 1
85528: PUSH
85529: DOUBLE
85530: LD_INT 1
85532: DEC
85533: ST_TO_ADDR
85534: LD_INT 5
85536: PUSH
85537: FOR_TO
85538: IFFALSE 85617
// begin uc_nation := nation_nature ;
85540: LD_ADDR_OWVAR 21
85544: PUSH
85545: LD_INT 0
85547: ST_TO_ADDR
// uc_side := 0 ;
85548: LD_ADDR_OWVAR 20
85552: PUSH
85553: LD_INT 0
85555: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
85556: LD_ADDR_OWVAR 29
85560: PUSH
85561: LD_INT 12
85563: PUSH
85564: LD_INT 12
85566: PUSH
85567: EMPTY
85568: LIST
85569: LIST
85570: ST_TO_ADDR
// hc_agressivity := 20 ;
85571: LD_ADDR_OWVAR 35
85575: PUSH
85576: LD_INT 20
85578: ST_TO_ADDR
// hc_class := class_tiger ;
85579: LD_ADDR_OWVAR 28
85583: PUSH
85584: LD_INT 14
85586: ST_TO_ADDR
// hc_gallery :=  ;
85587: LD_ADDR_OWVAR 33
85591: PUSH
85592: LD_STRING 
85594: ST_TO_ADDR
// hc_name :=  ;
85595: LD_ADDR_OWVAR 26
85599: PUSH
85600: LD_STRING 
85602: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
85603: CALL_OW 44
85607: PPUSH
85608: LD_INT 0
85610: PPUSH
85611: CALL_OW 51
// end ;
85615: GO 85537
85617: POP
85618: POP
// end ;
85619: PPOPN 1
85621: END
// every 0 0$1 trigger StreamModeActive and sBomb do
85622: LD_EXP 106
85626: PUSH
85627: LD_EXP 126
85631: AND
85632: IFFALSE 85641
85634: GO 85636
85636: DISABLE
// StreamSibBomb ;
85637: CALL 85642 0 0
85641: END
// export function StreamSibBomb ; var i , x , y ; begin
85642: LD_INT 0
85644: PPUSH
85645: PPUSH
85646: PPUSH
85647: PPUSH
// result := false ;
85648: LD_ADDR_VAR 0 1
85652: PUSH
85653: LD_INT 0
85655: ST_TO_ADDR
// for i := 1 to 16 do
85656: LD_ADDR_VAR 0 2
85660: PUSH
85661: DOUBLE
85662: LD_INT 1
85664: DEC
85665: ST_TO_ADDR
85666: LD_INT 16
85668: PUSH
85669: FOR_TO
85670: IFFALSE 85869
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
85672: LD_ADDR_VAR 0 3
85676: PUSH
85677: LD_INT 10
85679: PUSH
85680: LD_INT 20
85682: PUSH
85683: LD_INT 30
85685: PUSH
85686: LD_INT 40
85688: PUSH
85689: LD_INT 50
85691: PUSH
85692: LD_INT 60
85694: PUSH
85695: LD_INT 70
85697: PUSH
85698: LD_INT 80
85700: PUSH
85701: LD_INT 90
85703: PUSH
85704: LD_INT 100
85706: PUSH
85707: LD_INT 110
85709: PUSH
85710: LD_INT 120
85712: PUSH
85713: LD_INT 130
85715: PUSH
85716: LD_INT 140
85718: PUSH
85719: LD_INT 150
85721: PUSH
85722: EMPTY
85723: LIST
85724: LIST
85725: LIST
85726: LIST
85727: LIST
85728: LIST
85729: LIST
85730: LIST
85731: LIST
85732: LIST
85733: LIST
85734: LIST
85735: LIST
85736: LIST
85737: LIST
85738: PUSH
85739: LD_INT 1
85741: PPUSH
85742: LD_INT 15
85744: PPUSH
85745: CALL_OW 12
85749: ARRAY
85750: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
85751: LD_ADDR_VAR 0 4
85755: PUSH
85756: LD_INT 10
85758: PUSH
85759: LD_INT 20
85761: PUSH
85762: LD_INT 30
85764: PUSH
85765: LD_INT 40
85767: PUSH
85768: LD_INT 50
85770: PUSH
85771: LD_INT 60
85773: PUSH
85774: LD_INT 70
85776: PUSH
85777: LD_INT 80
85779: PUSH
85780: LD_INT 90
85782: PUSH
85783: LD_INT 100
85785: PUSH
85786: LD_INT 110
85788: PUSH
85789: LD_INT 120
85791: PUSH
85792: LD_INT 130
85794: PUSH
85795: LD_INT 140
85797: PUSH
85798: LD_INT 150
85800: PUSH
85801: EMPTY
85802: LIST
85803: LIST
85804: LIST
85805: LIST
85806: LIST
85807: LIST
85808: LIST
85809: LIST
85810: LIST
85811: LIST
85812: LIST
85813: LIST
85814: LIST
85815: LIST
85816: LIST
85817: PUSH
85818: LD_INT 1
85820: PPUSH
85821: LD_INT 15
85823: PPUSH
85824: CALL_OW 12
85828: ARRAY
85829: ST_TO_ADDR
// if ValidHex ( x , y ) then
85830: LD_VAR 0 3
85834: PPUSH
85835: LD_VAR 0 4
85839: PPUSH
85840: CALL_OW 488
85844: IFFALSE 85867
// begin result := [ x , y ] ;
85846: LD_ADDR_VAR 0 1
85850: PUSH
85851: LD_VAR 0 3
85855: PUSH
85856: LD_VAR 0 4
85860: PUSH
85861: EMPTY
85862: LIST
85863: LIST
85864: ST_TO_ADDR
// break ;
85865: GO 85869
// end ; end ;
85867: GO 85669
85869: POP
85870: POP
// if result then
85871: LD_VAR 0 1
85875: IFFALSE 85935
// begin ToLua ( playSibBomb() ) ;
85877: LD_STRING playSibBomb()
85879: PPUSH
85880: CALL_OW 559
// wait ( 0 0$14 ) ;
85884: LD_INT 490
85886: PPUSH
85887: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
85891: LD_VAR 0 1
85895: PUSH
85896: LD_INT 1
85898: ARRAY
85899: PPUSH
85900: LD_VAR 0 1
85904: PUSH
85905: LD_INT 2
85907: ARRAY
85908: PPUSH
85909: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
85913: LD_VAR 0 1
85917: PUSH
85918: LD_INT 1
85920: ARRAY
85921: PPUSH
85922: LD_VAR 0 1
85926: PUSH
85927: LD_INT 2
85929: ARRAY
85930: PPUSH
85931: CALL_OW 429
// end ; end ;
85935: LD_VAR 0 1
85939: RET
// every 0 0$1 trigger StreamModeActive and sReset do
85940: LD_EXP 106
85944: PUSH
85945: LD_EXP 128
85949: AND
85950: IFFALSE 85962
85952: GO 85954
85954: DISABLE
// YouLost (  ) ;
85955: LD_STRING 
85957: PPUSH
85958: CALL_OW 104
85962: END
// every 0 0$1 trigger StreamModeActive and sFog do
85963: LD_EXP 106
85967: PUSH
85968: LD_EXP 127
85972: AND
85973: IFFALSE 85987
85975: GO 85977
85977: DISABLE
// FogOff ( your_side ) ;
85978: LD_OWVAR 2
85982: PPUSH
85983: CALL_OW 344
85987: END
// every 0 0$1 trigger StreamModeActive and sSun do
85988: LD_EXP 106
85992: PUSH
85993: LD_EXP 129
85997: AND
85998: IFFALSE 86026
86000: GO 86002
86002: DISABLE
// begin solar_recharge_percent := 0 ;
86003: LD_ADDR_OWVAR 79
86007: PUSH
86008: LD_INT 0
86010: ST_TO_ADDR
// wait ( 5 5$00 ) ;
86011: LD_INT 10500
86013: PPUSH
86014: CALL_OW 67
// solar_recharge_percent := 100 ;
86018: LD_ADDR_OWVAR 79
86022: PUSH
86023: LD_INT 100
86025: ST_TO_ADDR
// end ;
86026: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
86027: LD_EXP 106
86031: PUSH
86032: LD_EXP 130
86036: AND
86037: IFFALSE 86276
86039: GO 86041
86041: DISABLE
86042: LD_INT 0
86044: PPUSH
86045: PPUSH
86046: PPUSH
// begin tmp := [ ] ;
86047: LD_ADDR_VAR 0 3
86051: PUSH
86052: EMPTY
86053: ST_TO_ADDR
// for i := 1 to 6 do
86054: LD_ADDR_VAR 0 1
86058: PUSH
86059: DOUBLE
86060: LD_INT 1
86062: DEC
86063: ST_TO_ADDR
86064: LD_INT 6
86066: PUSH
86067: FOR_TO
86068: IFFALSE 86173
// begin uc_nation := nation_nature ;
86070: LD_ADDR_OWVAR 21
86074: PUSH
86075: LD_INT 0
86077: ST_TO_ADDR
// uc_side := 0 ;
86078: LD_ADDR_OWVAR 20
86082: PUSH
86083: LD_INT 0
86085: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
86086: LD_ADDR_OWVAR 29
86090: PUSH
86091: LD_INT 12
86093: PUSH
86094: LD_INT 12
86096: PUSH
86097: EMPTY
86098: LIST
86099: LIST
86100: ST_TO_ADDR
// hc_agressivity := 20 ;
86101: LD_ADDR_OWVAR 35
86105: PUSH
86106: LD_INT 20
86108: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
86109: LD_ADDR_OWVAR 28
86113: PUSH
86114: LD_INT 17
86116: ST_TO_ADDR
// hc_gallery :=  ;
86117: LD_ADDR_OWVAR 33
86121: PUSH
86122: LD_STRING 
86124: ST_TO_ADDR
// hc_name :=  ;
86125: LD_ADDR_OWVAR 26
86129: PUSH
86130: LD_STRING 
86132: ST_TO_ADDR
// un := CreateHuman ;
86133: LD_ADDR_VAR 0 2
86137: PUSH
86138: CALL_OW 44
86142: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
86143: LD_VAR 0 2
86147: PPUSH
86148: LD_INT 1
86150: PPUSH
86151: CALL_OW 51
// tmp := tmp ^ un ;
86155: LD_ADDR_VAR 0 3
86159: PUSH
86160: LD_VAR 0 3
86164: PUSH
86165: LD_VAR 0 2
86169: ADD
86170: ST_TO_ADDR
// end ;
86171: GO 86067
86173: POP
86174: POP
// repeat wait ( 0 0$1 ) ;
86175: LD_INT 35
86177: PPUSH
86178: CALL_OW 67
// for un in tmp do
86182: LD_ADDR_VAR 0 2
86186: PUSH
86187: LD_VAR 0 3
86191: PUSH
86192: FOR_IN
86193: IFFALSE 86267
// begin if IsDead ( un ) then
86195: LD_VAR 0 2
86199: PPUSH
86200: CALL_OW 301
86204: IFFALSE 86224
// begin tmp := tmp diff un ;
86206: LD_ADDR_VAR 0 3
86210: PUSH
86211: LD_VAR 0 3
86215: PUSH
86216: LD_VAR 0 2
86220: DIFF
86221: ST_TO_ADDR
// continue ;
86222: GO 86192
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
86224: LD_VAR 0 2
86228: PPUSH
86229: LD_INT 3
86231: PUSH
86232: LD_INT 22
86234: PUSH
86235: LD_INT 0
86237: PUSH
86238: EMPTY
86239: LIST
86240: LIST
86241: PUSH
86242: EMPTY
86243: LIST
86244: LIST
86245: PPUSH
86246: CALL_OW 69
86250: PPUSH
86251: LD_VAR 0 2
86255: PPUSH
86256: CALL_OW 74
86260: PPUSH
86261: CALL_OW 115
// end ;
86265: GO 86192
86267: POP
86268: POP
// until not tmp ;
86269: LD_VAR 0 3
86273: NOT
86274: IFFALSE 86175
// end ;
86276: PPOPN 3
86278: END
// every 0 0$1 trigger StreamModeActive and sTroll do
86279: LD_EXP 106
86283: PUSH
86284: LD_EXP 131
86288: AND
86289: IFFALSE 86343
86291: GO 86293
86293: DISABLE
// begin ToLua ( displayTroll(); ) ;
86294: LD_STRING displayTroll();
86296: PPUSH
86297: CALL_OW 559
// wait ( 3 3$00 ) ;
86301: LD_INT 6300
86303: PPUSH
86304: CALL_OW 67
// ToLua ( hideTroll(); ) ;
86308: LD_STRING hideTroll();
86310: PPUSH
86311: CALL_OW 559
// wait ( 1 1$00 ) ;
86315: LD_INT 2100
86317: PPUSH
86318: CALL_OW 67
// ToLua ( displayTroll(); ) ;
86322: LD_STRING displayTroll();
86324: PPUSH
86325: CALL_OW 559
// wait ( 1 1$00 ) ;
86329: LD_INT 2100
86331: PPUSH
86332: CALL_OW 67
// ToLua ( hideTroll(); ) ;
86336: LD_STRING hideTroll();
86338: PPUSH
86339: CALL_OW 559
// end ;
86343: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
86344: LD_EXP 106
86348: PUSH
86349: LD_EXP 132
86353: AND
86354: IFFALSE 86417
86356: GO 86358
86358: DISABLE
86359: LD_INT 0
86361: PPUSH
// begin p := 0 ;
86362: LD_ADDR_VAR 0 1
86366: PUSH
86367: LD_INT 0
86369: ST_TO_ADDR
// repeat game_speed := 1 ;
86370: LD_ADDR_OWVAR 65
86374: PUSH
86375: LD_INT 1
86377: ST_TO_ADDR
// wait ( 0 0$1 ) ;
86378: LD_INT 35
86380: PPUSH
86381: CALL_OW 67
// p := p + 1 ;
86385: LD_ADDR_VAR 0 1
86389: PUSH
86390: LD_VAR 0 1
86394: PUSH
86395: LD_INT 1
86397: PLUS
86398: ST_TO_ADDR
// until p >= 60 ;
86399: LD_VAR 0 1
86403: PUSH
86404: LD_INT 60
86406: GREATEREQUAL
86407: IFFALSE 86370
// game_speed := 4 ;
86409: LD_ADDR_OWVAR 65
86413: PUSH
86414: LD_INT 4
86416: ST_TO_ADDR
// end ;
86417: PPOPN 1
86419: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
86420: LD_EXP 106
86424: PUSH
86425: LD_EXP 133
86429: AND
86430: IFFALSE 86576
86432: GO 86434
86434: DISABLE
86435: LD_INT 0
86437: PPUSH
86438: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
86439: LD_ADDR_VAR 0 1
86443: PUSH
86444: LD_INT 22
86446: PUSH
86447: LD_OWVAR 2
86451: PUSH
86452: EMPTY
86453: LIST
86454: LIST
86455: PUSH
86456: LD_INT 2
86458: PUSH
86459: LD_INT 30
86461: PUSH
86462: LD_INT 0
86464: PUSH
86465: EMPTY
86466: LIST
86467: LIST
86468: PUSH
86469: LD_INT 30
86471: PUSH
86472: LD_INT 1
86474: PUSH
86475: EMPTY
86476: LIST
86477: LIST
86478: PUSH
86479: EMPTY
86480: LIST
86481: LIST
86482: LIST
86483: PUSH
86484: EMPTY
86485: LIST
86486: LIST
86487: PPUSH
86488: CALL_OW 69
86492: ST_TO_ADDR
// if not depot then
86493: LD_VAR 0 1
86497: NOT
86498: IFFALSE 86502
// exit ;
86500: GO 86576
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
86502: LD_ADDR_VAR 0 2
86506: PUSH
86507: LD_VAR 0 1
86511: PUSH
86512: LD_INT 1
86514: PPUSH
86515: LD_VAR 0 1
86519: PPUSH
86520: CALL_OW 12
86524: ARRAY
86525: PPUSH
86526: CALL_OW 274
86530: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
86531: LD_VAR 0 2
86535: PPUSH
86536: LD_INT 1
86538: PPUSH
86539: LD_INT 0
86541: PPUSH
86542: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
86546: LD_VAR 0 2
86550: PPUSH
86551: LD_INT 2
86553: PPUSH
86554: LD_INT 0
86556: PPUSH
86557: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
86561: LD_VAR 0 2
86565: PPUSH
86566: LD_INT 3
86568: PPUSH
86569: LD_INT 0
86571: PPUSH
86572: CALL_OW 277
// end ;
86576: PPOPN 2
86578: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
86579: LD_EXP 106
86583: PUSH
86584: LD_EXP 134
86588: AND
86589: IFFALSE 86686
86591: GO 86593
86593: DISABLE
86594: LD_INT 0
86596: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
86597: LD_ADDR_VAR 0 1
86601: PUSH
86602: LD_INT 22
86604: PUSH
86605: LD_OWVAR 2
86609: PUSH
86610: EMPTY
86611: LIST
86612: LIST
86613: PUSH
86614: LD_INT 21
86616: PUSH
86617: LD_INT 1
86619: PUSH
86620: EMPTY
86621: LIST
86622: LIST
86623: PUSH
86624: LD_INT 3
86626: PUSH
86627: LD_INT 23
86629: PUSH
86630: LD_INT 0
86632: PUSH
86633: EMPTY
86634: LIST
86635: LIST
86636: PUSH
86637: EMPTY
86638: LIST
86639: LIST
86640: PUSH
86641: EMPTY
86642: LIST
86643: LIST
86644: LIST
86645: PPUSH
86646: CALL_OW 69
86650: ST_TO_ADDR
// if not tmp then
86651: LD_VAR 0 1
86655: NOT
86656: IFFALSE 86660
// exit ;
86658: GO 86686
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
86660: LD_VAR 0 1
86664: PUSH
86665: LD_INT 1
86667: PPUSH
86668: LD_VAR 0 1
86672: PPUSH
86673: CALL_OW 12
86677: ARRAY
86678: PPUSH
86679: LD_INT 200
86681: PPUSH
86682: CALL_OW 234
// end ;
86686: PPOPN 1
86688: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
86689: LD_EXP 106
86693: PUSH
86694: LD_EXP 135
86698: AND
86699: IFFALSE 86778
86701: GO 86703
86703: DISABLE
86704: LD_INT 0
86706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
86707: LD_ADDR_VAR 0 1
86711: PUSH
86712: LD_INT 22
86714: PUSH
86715: LD_OWVAR 2
86719: PUSH
86720: EMPTY
86721: LIST
86722: LIST
86723: PUSH
86724: LD_INT 21
86726: PUSH
86727: LD_INT 2
86729: PUSH
86730: EMPTY
86731: LIST
86732: LIST
86733: PUSH
86734: EMPTY
86735: LIST
86736: LIST
86737: PPUSH
86738: CALL_OW 69
86742: ST_TO_ADDR
// if not tmp then
86743: LD_VAR 0 1
86747: NOT
86748: IFFALSE 86752
// exit ;
86750: GO 86778
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
86752: LD_VAR 0 1
86756: PUSH
86757: LD_INT 1
86759: PPUSH
86760: LD_VAR 0 1
86764: PPUSH
86765: CALL_OW 12
86769: ARRAY
86770: PPUSH
86771: LD_INT 60
86773: PPUSH
86774: CALL_OW 234
// end ;
86778: PPOPN 1
86780: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
86781: LD_EXP 106
86785: PUSH
86786: LD_EXP 136
86790: AND
86791: IFFALSE 86890
86793: GO 86795
86795: DISABLE
86796: LD_INT 0
86798: PPUSH
86799: PPUSH
// begin enable ;
86800: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
86801: LD_ADDR_VAR 0 1
86805: PUSH
86806: LD_INT 22
86808: PUSH
86809: LD_OWVAR 2
86813: PUSH
86814: EMPTY
86815: LIST
86816: LIST
86817: PUSH
86818: LD_INT 61
86820: PUSH
86821: EMPTY
86822: LIST
86823: PUSH
86824: LD_INT 33
86826: PUSH
86827: LD_INT 2
86829: PUSH
86830: EMPTY
86831: LIST
86832: LIST
86833: PUSH
86834: EMPTY
86835: LIST
86836: LIST
86837: LIST
86838: PPUSH
86839: CALL_OW 69
86843: ST_TO_ADDR
// if not tmp then
86844: LD_VAR 0 1
86848: NOT
86849: IFFALSE 86853
// exit ;
86851: GO 86890
// for i in tmp do
86853: LD_ADDR_VAR 0 2
86857: PUSH
86858: LD_VAR 0 1
86862: PUSH
86863: FOR_IN
86864: IFFALSE 86888
// if IsControledBy ( i ) then
86866: LD_VAR 0 2
86870: PPUSH
86871: CALL_OW 312
86875: IFFALSE 86886
// ComUnlink ( i ) ;
86877: LD_VAR 0 2
86881: PPUSH
86882: CALL_OW 136
86886: GO 86863
86888: POP
86889: POP
// end ;
86890: PPOPN 2
86892: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
86893: LD_EXP 106
86897: PUSH
86898: LD_EXP 137
86902: AND
86903: IFFALSE 87043
86905: GO 86907
86907: DISABLE
86908: LD_INT 0
86910: PPUSH
86911: PPUSH
// begin ToLua ( displayPowell(); ) ;
86912: LD_STRING displayPowell();
86914: PPUSH
86915: CALL_OW 559
// uc_side := 0 ;
86919: LD_ADDR_OWVAR 20
86923: PUSH
86924: LD_INT 0
86926: ST_TO_ADDR
// uc_nation := 2 ;
86927: LD_ADDR_OWVAR 21
86931: PUSH
86932: LD_INT 2
86934: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
86935: LD_ADDR_OWVAR 37
86939: PUSH
86940: LD_INT 14
86942: ST_TO_ADDR
// vc_engine := engine_siberite ;
86943: LD_ADDR_OWVAR 39
86947: PUSH
86948: LD_INT 3
86950: ST_TO_ADDR
// vc_control := control_apeman ;
86951: LD_ADDR_OWVAR 38
86955: PUSH
86956: LD_INT 5
86958: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
86959: LD_ADDR_OWVAR 40
86963: PUSH
86964: LD_INT 29
86966: ST_TO_ADDR
// un := CreateVehicle ;
86967: LD_ADDR_VAR 0 2
86971: PUSH
86972: CALL_OW 45
86976: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
86977: LD_VAR 0 2
86981: PPUSH
86982: LD_INT 1
86984: PPUSH
86985: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
86989: LD_INT 35
86991: PPUSH
86992: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
86996: LD_VAR 0 2
87000: PPUSH
87001: LD_INT 22
87003: PUSH
87004: LD_OWVAR 2
87008: PUSH
87009: EMPTY
87010: LIST
87011: LIST
87012: PPUSH
87013: CALL_OW 69
87017: PPUSH
87018: LD_VAR 0 2
87022: PPUSH
87023: CALL_OW 74
87027: PPUSH
87028: CALL_OW 115
// until IsDead ( un ) ;
87032: LD_VAR 0 2
87036: PPUSH
87037: CALL_OW 301
87041: IFFALSE 86989
// end ;
87043: PPOPN 2
87045: END
// every 0 0$1 trigger StreamModeActive and sStu do
87046: LD_EXP 106
87050: PUSH
87051: LD_EXP 145
87055: AND
87056: IFFALSE 87072
87058: GO 87060
87060: DISABLE
// begin ToLua ( displayStucuk(); ) ;
87061: LD_STRING displayStucuk();
87063: PPUSH
87064: CALL_OW 559
// ResetFog ;
87068: CALL_OW 335
// end ;
87072: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
87073: LD_EXP 106
87077: PUSH
87078: LD_EXP 138
87082: AND
87083: IFFALSE 87224
87085: GO 87087
87087: DISABLE
87088: LD_INT 0
87090: PPUSH
87091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
87092: LD_ADDR_VAR 0 2
87096: PUSH
87097: LD_INT 22
87099: PUSH
87100: LD_OWVAR 2
87104: PUSH
87105: EMPTY
87106: LIST
87107: LIST
87108: PUSH
87109: LD_INT 21
87111: PUSH
87112: LD_INT 1
87114: PUSH
87115: EMPTY
87116: LIST
87117: LIST
87118: PUSH
87119: EMPTY
87120: LIST
87121: LIST
87122: PPUSH
87123: CALL_OW 69
87127: ST_TO_ADDR
// if not tmp then
87128: LD_VAR 0 2
87132: NOT
87133: IFFALSE 87137
// exit ;
87135: GO 87224
// un := tmp [ rand ( 1 , tmp ) ] ;
87137: LD_ADDR_VAR 0 1
87141: PUSH
87142: LD_VAR 0 2
87146: PUSH
87147: LD_INT 1
87149: PPUSH
87150: LD_VAR 0 2
87154: PPUSH
87155: CALL_OW 12
87159: ARRAY
87160: ST_TO_ADDR
// SetSide ( un , 0 ) ;
87161: LD_VAR 0 1
87165: PPUSH
87166: LD_INT 0
87168: PPUSH
87169: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
87173: LD_VAR 0 1
87177: PPUSH
87178: LD_OWVAR 3
87182: PUSH
87183: LD_VAR 0 1
87187: DIFF
87188: PPUSH
87189: LD_VAR 0 1
87193: PPUSH
87194: CALL_OW 74
87198: PPUSH
87199: CALL_OW 115
// wait ( 0 0$20 ) ;
87203: LD_INT 700
87205: PPUSH
87206: CALL_OW 67
// SetSide ( un , your_side ) ;
87210: LD_VAR 0 1
87214: PPUSH
87215: LD_OWVAR 2
87219: PPUSH
87220: CALL_OW 235
// end ;
87224: PPOPN 2
87226: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
87227: LD_EXP 106
87231: PUSH
87232: LD_EXP 139
87236: AND
87237: IFFALSE 87343
87239: GO 87241
87241: DISABLE
87242: LD_INT 0
87244: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
87245: LD_ADDR_VAR 0 1
87249: PUSH
87250: LD_INT 22
87252: PUSH
87253: LD_OWVAR 2
87257: PUSH
87258: EMPTY
87259: LIST
87260: LIST
87261: PUSH
87262: LD_INT 2
87264: PUSH
87265: LD_INT 30
87267: PUSH
87268: LD_INT 0
87270: PUSH
87271: EMPTY
87272: LIST
87273: LIST
87274: PUSH
87275: LD_INT 30
87277: PUSH
87278: LD_INT 1
87280: PUSH
87281: EMPTY
87282: LIST
87283: LIST
87284: PUSH
87285: EMPTY
87286: LIST
87287: LIST
87288: LIST
87289: PUSH
87290: EMPTY
87291: LIST
87292: LIST
87293: PPUSH
87294: CALL_OW 69
87298: ST_TO_ADDR
// if not depot then
87299: LD_VAR 0 1
87303: NOT
87304: IFFALSE 87308
// exit ;
87306: GO 87343
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
87308: LD_VAR 0 1
87312: PUSH
87313: LD_INT 1
87315: ARRAY
87316: PPUSH
87317: CALL_OW 250
87321: PPUSH
87322: LD_VAR 0 1
87326: PUSH
87327: LD_INT 1
87329: ARRAY
87330: PPUSH
87331: CALL_OW 251
87335: PPUSH
87336: LD_INT 70
87338: PPUSH
87339: CALL_OW 495
// end ;
87343: PPOPN 1
87345: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
87346: LD_EXP 106
87350: PUSH
87351: LD_EXP 140
87355: AND
87356: IFFALSE 87567
87358: GO 87360
87360: DISABLE
87361: LD_INT 0
87363: PPUSH
87364: PPUSH
87365: PPUSH
87366: PPUSH
87367: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
87368: LD_ADDR_VAR 0 5
87372: PUSH
87373: LD_INT 22
87375: PUSH
87376: LD_OWVAR 2
87380: PUSH
87381: EMPTY
87382: LIST
87383: LIST
87384: PUSH
87385: LD_INT 21
87387: PUSH
87388: LD_INT 1
87390: PUSH
87391: EMPTY
87392: LIST
87393: LIST
87394: PUSH
87395: EMPTY
87396: LIST
87397: LIST
87398: PPUSH
87399: CALL_OW 69
87403: ST_TO_ADDR
// if not tmp then
87404: LD_VAR 0 5
87408: NOT
87409: IFFALSE 87413
// exit ;
87411: GO 87567
// for i in tmp do
87413: LD_ADDR_VAR 0 1
87417: PUSH
87418: LD_VAR 0 5
87422: PUSH
87423: FOR_IN
87424: IFFALSE 87565
// begin d := rand ( 0 , 5 ) ;
87426: LD_ADDR_VAR 0 4
87430: PUSH
87431: LD_INT 0
87433: PPUSH
87434: LD_INT 5
87436: PPUSH
87437: CALL_OW 12
87441: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
87442: LD_ADDR_VAR 0 2
87446: PUSH
87447: LD_VAR 0 1
87451: PPUSH
87452: CALL_OW 250
87456: PPUSH
87457: LD_VAR 0 4
87461: PPUSH
87462: LD_INT 3
87464: PPUSH
87465: LD_INT 12
87467: PPUSH
87468: CALL_OW 12
87472: PPUSH
87473: CALL_OW 272
87477: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
87478: LD_ADDR_VAR 0 3
87482: PUSH
87483: LD_VAR 0 1
87487: PPUSH
87488: CALL_OW 251
87492: PPUSH
87493: LD_VAR 0 4
87497: PPUSH
87498: LD_INT 3
87500: PPUSH
87501: LD_INT 12
87503: PPUSH
87504: CALL_OW 12
87508: PPUSH
87509: CALL_OW 273
87513: ST_TO_ADDR
// if ValidHex ( x , y ) then
87514: LD_VAR 0 2
87518: PPUSH
87519: LD_VAR 0 3
87523: PPUSH
87524: CALL_OW 488
87528: IFFALSE 87563
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
87530: LD_VAR 0 1
87534: PPUSH
87535: LD_VAR 0 2
87539: PPUSH
87540: LD_VAR 0 3
87544: PPUSH
87545: LD_INT 3
87547: PPUSH
87548: LD_INT 6
87550: PPUSH
87551: CALL_OW 12
87555: PPUSH
87556: LD_INT 1
87558: PPUSH
87559: CALL_OW 483
// end ;
87563: GO 87423
87565: POP
87566: POP
// end ;
87567: PPOPN 5
87569: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
87570: LD_EXP 106
87574: PUSH
87575: LD_EXP 141
87579: AND
87580: IFFALSE 87674
87582: GO 87584
87584: DISABLE
87585: LD_INT 0
87587: PPUSH
87588: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
87589: LD_ADDR_VAR 0 2
87593: PUSH
87594: LD_INT 22
87596: PUSH
87597: LD_OWVAR 2
87601: PUSH
87602: EMPTY
87603: LIST
87604: LIST
87605: PUSH
87606: LD_INT 32
87608: PUSH
87609: LD_INT 1
87611: PUSH
87612: EMPTY
87613: LIST
87614: LIST
87615: PUSH
87616: LD_INT 21
87618: PUSH
87619: LD_INT 2
87621: PUSH
87622: EMPTY
87623: LIST
87624: LIST
87625: PUSH
87626: EMPTY
87627: LIST
87628: LIST
87629: LIST
87630: PPUSH
87631: CALL_OW 69
87635: ST_TO_ADDR
// if not tmp then
87636: LD_VAR 0 2
87640: NOT
87641: IFFALSE 87645
// exit ;
87643: GO 87674
// for i in tmp do
87645: LD_ADDR_VAR 0 1
87649: PUSH
87650: LD_VAR 0 2
87654: PUSH
87655: FOR_IN
87656: IFFALSE 87672
// SetFuel ( i , 0 ) ;
87658: LD_VAR 0 1
87662: PPUSH
87663: LD_INT 0
87665: PPUSH
87666: CALL_OW 240
87670: GO 87655
87672: POP
87673: POP
// end ;
87674: PPOPN 2
87676: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
87677: LD_EXP 106
87681: PUSH
87682: LD_EXP 142
87686: AND
87687: IFFALSE 87753
87689: GO 87691
87691: DISABLE
87692: LD_INT 0
87694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
87695: LD_ADDR_VAR 0 1
87699: PUSH
87700: LD_INT 22
87702: PUSH
87703: LD_OWVAR 2
87707: PUSH
87708: EMPTY
87709: LIST
87710: LIST
87711: PUSH
87712: LD_INT 30
87714: PUSH
87715: LD_INT 29
87717: PUSH
87718: EMPTY
87719: LIST
87720: LIST
87721: PUSH
87722: EMPTY
87723: LIST
87724: LIST
87725: PPUSH
87726: CALL_OW 69
87730: ST_TO_ADDR
// if not tmp then
87731: LD_VAR 0 1
87735: NOT
87736: IFFALSE 87740
// exit ;
87738: GO 87753
// DestroyUnit ( tmp [ 1 ] ) ;
87740: LD_VAR 0 1
87744: PUSH
87745: LD_INT 1
87747: ARRAY
87748: PPUSH
87749: CALL_OW 65
// end ;
87753: PPOPN 1
87755: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
87756: LD_EXP 106
87760: PUSH
87761: LD_EXP 144
87765: AND
87766: IFFALSE 87895
87768: GO 87770
87770: DISABLE
87771: LD_INT 0
87773: PPUSH
// begin uc_side := 0 ;
87774: LD_ADDR_OWVAR 20
87778: PUSH
87779: LD_INT 0
87781: ST_TO_ADDR
// uc_nation := nation_arabian ;
87782: LD_ADDR_OWVAR 21
87786: PUSH
87787: LD_INT 2
87789: ST_TO_ADDR
// hc_gallery :=  ;
87790: LD_ADDR_OWVAR 33
87794: PUSH
87795: LD_STRING 
87797: ST_TO_ADDR
// hc_name :=  ;
87798: LD_ADDR_OWVAR 26
87802: PUSH
87803: LD_STRING 
87805: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
87806: LD_INT 1
87808: PPUSH
87809: LD_INT 11
87811: PPUSH
87812: LD_INT 10
87814: PPUSH
87815: CALL_OW 380
// un := CreateHuman ;
87819: LD_ADDR_VAR 0 1
87823: PUSH
87824: CALL_OW 44
87828: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
87829: LD_VAR 0 1
87833: PPUSH
87834: LD_INT 1
87836: PPUSH
87837: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
87841: LD_INT 35
87843: PPUSH
87844: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
87848: LD_VAR 0 1
87852: PPUSH
87853: LD_INT 22
87855: PUSH
87856: LD_OWVAR 2
87860: PUSH
87861: EMPTY
87862: LIST
87863: LIST
87864: PPUSH
87865: CALL_OW 69
87869: PPUSH
87870: LD_VAR 0 1
87874: PPUSH
87875: CALL_OW 74
87879: PPUSH
87880: CALL_OW 115
// until IsDead ( un ) ;
87884: LD_VAR 0 1
87888: PPUSH
87889: CALL_OW 301
87893: IFFALSE 87841
// end ;
87895: PPOPN 1
87897: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
87898: LD_EXP 106
87902: PUSH
87903: LD_EXP 146
87907: AND
87908: IFFALSE 87920
87910: GO 87912
87912: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
87913: LD_STRING earthquake(getX(game), 0, 32)
87915: PPUSH
87916: CALL_OW 559
87920: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
87921: LD_EXP 106
87925: PUSH
87926: LD_EXP 147
87930: AND
87931: IFFALSE 88022
87933: GO 87935
87935: DISABLE
87936: LD_INT 0
87938: PPUSH
// begin enable ;
87939: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
87940: LD_ADDR_VAR 0 1
87944: PUSH
87945: LD_INT 22
87947: PUSH
87948: LD_OWVAR 2
87952: PUSH
87953: EMPTY
87954: LIST
87955: LIST
87956: PUSH
87957: LD_INT 21
87959: PUSH
87960: LD_INT 2
87962: PUSH
87963: EMPTY
87964: LIST
87965: LIST
87966: PUSH
87967: LD_INT 33
87969: PUSH
87970: LD_INT 3
87972: PUSH
87973: EMPTY
87974: LIST
87975: LIST
87976: PUSH
87977: EMPTY
87978: LIST
87979: LIST
87980: LIST
87981: PPUSH
87982: CALL_OW 69
87986: ST_TO_ADDR
// if not tmp then
87987: LD_VAR 0 1
87991: NOT
87992: IFFALSE 87996
// exit ;
87994: GO 88022
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
87996: LD_VAR 0 1
88000: PUSH
88001: LD_INT 1
88003: PPUSH
88004: LD_VAR 0 1
88008: PPUSH
88009: CALL_OW 12
88013: ARRAY
88014: PPUSH
88015: LD_INT 1
88017: PPUSH
88018: CALL_OW 234
// end ;
88022: PPOPN 1
88024: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
88025: LD_EXP 106
88029: PUSH
88030: LD_EXP 148
88034: AND
88035: IFFALSE 88176
88037: GO 88039
88039: DISABLE
88040: LD_INT 0
88042: PPUSH
88043: PPUSH
88044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
88045: LD_ADDR_VAR 0 3
88049: PUSH
88050: LD_INT 22
88052: PUSH
88053: LD_OWVAR 2
88057: PUSH
88058: EMPTY
88059: LIST
88060: LIST
88061: PUSH
88062: LD_INT 25
88064: PUSH
88065: LD_INT 1
88067: PUSH
88068: EMPTY
88069: LIST
88070: LIST
88071: PUSH
88072: EMPTY
88073: LIST
88074: LIST
88075: PPUSH
88076: CALL_OW 69
88080: ST_TO_ADDR
// if not tmp then
88081: LD_VAR 0 3
88085: NOT
88086: IFFALSE 88090
// exit ;
88088: GO 88176
// un := tmp [ rand ( 1 , tmp ) ] ;
88090: LD_ADDR_VAR 0 2
88094: PUSH
88095: LD_VAR 0 3
88099: PUSH
88100: LD_INT 1
88102: PPUSH
88103: LD_VAR 0 3
88107: PPUSH
88108: CALL_OW 12
88112: ARRAY
88113: ST_TO_ADDR
// if Crawls ( un ) then
88114: LD_VAR 0 2
88118: PPUSH
88119: CALL_OW 318
88123: IFFALSE 88134
// ComWalk ( un ) ;
88125: LD_VAR 0 2
88129: PPUSH
88130: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
88134: LD_VAR 0 2
88138: PPUSH
88139: LD_INT 9
88141: PPUSH
88142: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
88146: LD_INT 28
88148: PPUSH
88149: LD_OWVAR 2
88153: PPUSH
88154: LD_INT 2
88156: PPUSH
88157: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
88161: LD_INT 29
88163: PPUSH
88164: LD_OWVAR 2
88168: PPUSH
88169: LD_INT 2
88171: PPUSH
88172: CALL_OW 322
// end ;
88176: PPOPN 3
88178: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
88179: LD_EXP 106
88183: PUSH
88184: LD_EXP 149
88188: AND
88189: IFFALSE 88300
88191: GO 88193
88193: DISABLE
88194: LD_INT 0
88196: PPUSH
88197: PPUSH
88198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
88199: LD_ADDR_VAR 0 3
88203: PUSH
88204: LD_INT 22
88206: PUSH
88207: LD_OWVAR 2
88211: PUSH
88212: EMPTY
88213: LIST
88214: LIST
88215: PUSH
88216: LD_INT 25
88218: PUSH
88219: LD_INT 1
88221: PUSH
88222: EMPTY
88223: LIST
88224: LIST
88225: PUSH
88226: EMPTY
88227: LIST
88228: LIST
88229: PPUSH
88230: CALL_OW 69
88234: ST_TO_ADDR
// if not tmp then
88235: LD_VAR 0 3
88239: NOT
88240: IFFALSE 88244
// exit ;
88242: GO 88300
// un := tmp [ rand ( 1 , tmp ) ] ;
88244: LD_ADDR_VAR 0 2
88248: PUSH
88249: LD_VAR 0 3
88253: PUSH
88254: LD_INT 1
88256: PPUSH
88257: LD_VAR 0 3
88261: PPUSH
88262: CALL_OW 12
88266: ARRAY
88267: ST_TO_ADDR
// if Crawls ( un ) then
88268: LD_VAR 0 2
88272: PPUSH
88273: CALL_OW 318
88277: IFFALSE 88288
// ComWalk ( un ) ;
88279: LD_VAR 0 2
88283: PPUSH
88284: CALL_OW 138
// SetClass ( un , class_mortar ) ;
88288: LD_VAR 0 2
88292: PPUSH
88293: LD_INT 8
88295: PPUSH
88296: CALL_OW 336
// end ;
88300: PPOPN 3
88302: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
88303: LD_EXP 106
88307: PUSH
88308: LD_EXP 150
88312: AND
88313: IFFALSE 88457
88315: GO 88317
88317: DISABLE
88318: LD_INT 0
88320: PPUSH
88321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
88322: LD_ADDR_VAR 0 2
88326: PUSH
88327: LD_INT 22
88329: PUSH
88330: LD_OWVAR 2
88334: PUSH
88335: EMPTY
88336: LIST
88337: LIST
88338: PUSH
88339: LD_INT 21
88341: PUSH
88342: LD_INT 2
88344: PUSH
88345: EMPTY
88346: LIST
88347: LIST
88348: PUSH
88349: LD_INT 2
88351: PUSH
88352: LD_INT 34
88354: PUSH
88355: LD_INT 12
88357: PUSH
88358: EMPTY
88359: LIST
88360: LIST
88361: PUSH
88362: LD_INT 34
88364: PUSH
88365: LD_INT 51
88367: PUSH
88368: EMPTY
88369: LIST
88370: LIST
88371: PUSH
88372: LD_INT 34
88374: PUSH
88375: LD_INT 32
88377: PUSH
88378: EMPTY
88379: LIST
88380: LIST
88381: PUSH
88382: EMPTY
88383: LIST
88384: LIST
88385: LIST
88386: LIST
88387: PUSH
88388: EMPTY
88389: LIST
88390: LIST
88391: LIST
88392: PPUSH
88393: CALL_OW 69
88397: ST_TO_ADDR
// if not tmp then
88398: LD_VAR 0 2
88402: NOT
88403: IFFALSE 88407
// exit ;
88405: GO 88457
// for i in tmp do
88407: LD_ADDR_VAR 0 1
88411: PUSH
88412: LD_VAR 0 2
88416: PUSH
88417: FOR_IN
88418: IFFALSE 88455
// if GetCargo ( i , mat_artifact ) = 0 then
88420: LD_VAR 0 1
88424: PPUSH
88425: LD_INT 4
88427: PPUSH
88428: CALL_OW 289
88432: PUSH
88433: LD_INT 0
88435: EQUAL
88436: IFFALSE 88453
// SetCargo ( i , mat_siberit , 100 ) ;
88438: LD_VAR 0 1
88442: PPUSH
88443: LD_INT 3
88445: PPUSH
88446: LD_INT 100
88448: PPUSH
88449: CALL_OW 290
88453: GO 88417
88455: POP
88456: POP
// end ;
88457: PPOPN 2
88459: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
88460: LD_EXP 106
88464: PUSH
88465: LD_EXP 151
88469: AND
88470: IFFALSE 88653
88472: GO 88474
88474: DISABLE
88475: LD_INT 0
88477: PPUSH
88478: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
88479: LD_ADDR_VAR 0 2
88483: PUSH
88484: LD_INT 22
88486: PUSH
88487: LD_OWVAR 2
88491: PUSH
88492: EMPTY
88493: LIST
88494: LIST
88495: PPUSH
88496: CALL_OW 69
88500: ST_TO_ADDR
// if not tmp then
88501: LD_VAR 0 2
88505: NOT
88506: IFFALSE 88510
// exit ;
88508: GO 88653
// for i := 1 to 2 do
88510: LD_ADDR_VAR 0 1
88514: PUSH
88515: DOUBLE
88516: LD_INT 1
88518: DEC
88519: ST_TO_ADDR
88520: LD_INT 2
88522: PUSH
88523: FOR_TO
88524: IFFALSE 88651
// begin uc_side := your_side ;
88526: LD_ADDR_OWVAR 20
88530: PUSH
88531: LD_OWVAR 2
88535: ST_TO_ADDR
// uc_nation := nation_american ;
88536: LD_ADDR_OWVAR 21
88540: PUSH
88541: LD_INT 1
88543: ST_TO_ADDR
// vc_chassis := us_morphling ;
88544: LD_ADDR_OWVAR 37
88548: PUSH
88549: LD_INT 5
88551: ST_TO_ADDR
// vc_engine := engine_siberite ;
88552: LD_ADDR_OWVAR 39
88556: PUSH
88557: LD_INT 3
88559: ST_TO_ADDR
// vc_control := control_computer ;
88560: LD_ADDR_OWVAR 38
88564: PUSH
88565: LD_INT 3
88567: ST_TO_ADDR
// vc_weapon := us_double_laser ;
88568: LD_ADDR_OWVAR 40
88572: PUSH
88573: LD_INT 10
88575: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
88576: LD_VAR 0 2
88580: PUSH
88581: LD_INT 1
88583: ARRAY
88584: PPUSH
88585: CALL_OW 310
88589: NOT
88590: IFFALSE 88637
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
88592: CALL_OW 45
88596: PPUSH
88597: LD_VAR 0 2
88601: PUSH
88602: LD_INT 1
88604: ARRAY
88605: PPUSH
88606: CALL_OW 250
88610: PPUSH
88611: LD_VAR 0 2
88615: PUSH
88616: LD_INT 1
88618: ARRAY
88619: PPUSH
88620: CALL_OW 251
88624: PPUSH
88625: LD_INT 12
88627: PPUSH
88628: LD_INT 1
88630: PPUSH
88631: CALL_OW 50
88635: GO 88649
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
88637: CALL_OW 45
88641: PPUSH
88642: LD_INT 1
88644: PPUSH
88645: CALL_OW 51
// end ;
88649: GO 88523
88651: POP
88652: POP
// end ;
88653: PPOPN 2
88655: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
88656: LD_EXP 106
88660: PUSH
88661: LD_EXP 152
88665: AND
88666: IFFALSE 88888
88668: GO 88670
88670: DISABLE
88671: LD_INT 0
88673: PPUSH
88674: PPUSH
88675: PPUSH
88676: PPUSH
88677: PPUSH
88678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
88679: LD_ADDR_VAR 0 6
88683: PUSH
88684: LD_INT 22
88686: PUSH
88687: LD_OWVAR 2
88691: PUSH
88692: EMPTY
88693: LIST
88694: LIST
88695: PUSH
88696: LD_INT 21
88698: PUSH
88699: LD_INT 1
88701: PUSH
88702: EMPTY
88703: LIST
88704: LIST
88705: PUSH
88706: LD_INT 3
88708: PUSH
88709: LD_INT 23
88711: PUSH
88712: LD_INT 0
88714: PUSH
88715: EMPTY
88716: LIST
88717: LIST
88718: PUSH
88719: EMPTY
88720: LIST
88721: LIST
88722: PUSH
88723: EMPTY
88724: LIST
88725: LIST
88726: LIST
88727: PPUSH
88728: CALL_OW 69
88732: ST_TO_ADDR
// if not tmp then
88733: LD_VAR 0 6
88737: NOT
88738: IFFALSE 88742
// exit ;
88740: GO 88888
// s1 := rand ( 1 , 4 ) ;
88742: LD_ADDR_VAR 0 2
88746: PUSH
88747: LD_INT 1
88749: PPUSH
88750: LD_INT 4
88752: PPUSH
88753: CALL_OW 12
88757: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
88758: LD_ADDR_VAR 0 4
88762: PUSH
88763: LD_VAR 0 6
88767: PUSH
88768: LD_INT 1
88770: ARRAY
88771: PPUSH
88772: LD_VAR 0 2
88776: PPUSH
88777: CALL_OW 259
88781: ST_TO_ADDR
// if s1 = 1 then
88782: LD_VAR 0 2
88786: PUSH
88787: LD_INT 1
88789: EQUAL
88790: IFFALSE 88810
// s2 := rand ( 2 , 4 ) else
88792: LD_ADDR_VAR 0 3
88796: PUSH
88797: LD_INT 2
88799: PPUSH
88800: LD_INT 4
88802: PPUSH
88803: CALL_OW 12
88807: ST_TO_ADDR
88808: GO 88818
// s2 := 1 ;
88810: LD_ADDR_VAR 0 3
88814: PUSH
88815: LD_INT 1
88817: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
88818: LD_ADDR_VAR 0 5
88822: PUSH
88823: LD_VAR 0 6
88827: PUSH
88828: LD_INT 1
88830: ARRAY
88831: PPUSH
88832: LD_VAR 0 3
88836: PPUSH
88837: CALL_OW 259
88841: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
88842: LD_VAR 0 6
88846: PUSH
88847: LD_INT 1
88849: ARRAY
88850: PPUSH
88851: LD_VAR 0 2
88855: PPUSH
88856: LD_VAR 0 5
88860: PPUSH
88861: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
88865: LD_VAR 0 6
88869: PUSH
88870: LD_INT 1
88872: ARRAY
88873: PPUSH
88874: LD_VAR 0 3
88878: PPUSH
88879: LD_VAR 0 4
88883: PPUSH
88884: CALL_OW 237
// end ;
88888: PPOPN 6
88890: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
88891: LD_EXP 106
88895: PUSH
88896: LD_EXP 153
88900: AND
88901: IFFALSE 88980
88903: GO 88905
88905: DISABLE
88906: LD_INT 0
88908: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
88909: LD_ADDR_VAR 0 1
88913: PUSH
88914: LD_INT 22
88916: PUSH
88917: LD_OWVAR 2
88921: PUSH
88922: EMPTY
88923: LIST
88924: LIST
88925: PUSH
88926: LD_INT 30
88928: PUSH
88929: LD_INT 3
88931: PUSH
88932: EMPTY
88933: LIST
88934: LIST
88935: PUSH
88936: EMPTY
88937: LIST
88938: LIST
88939: PPUSH
88940: CALL_OW 69
88944: ST_TO_ADDR
// if not tmp then
88945: LD_VAR 0 1
88949: NOT
88950: IFFALSE 88954
// exit ;
88952: GO 88980
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
88954: LD_VAR 0 1
88958: PUSH
88959: LD_INT 1
88961: PPUSH
88962: LD_VAR 0 1
88966: PPUSH
88967: CALL_OW 12
88971: ARRAY
88972: PPUSH
88973: LD_INT 1
88975: PPUSH
88976: CALL_OW 234
// end ;
88980: PPOPN 1
88982: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
88983: LD_EXP 106
88987: PUSH
88988: LD_EXP 154
88992: AND
88993: IFFALSE 89105
88995: GO 88997
88997: DISABLE
88998: LD_INT 0
89000: PPUSH
89001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
89002: LD_ADDR_VAR 0 2
89006: PUSH
89007: LD_INT 22
89009: PUSH
89010: LD_OWVAR 2
89014: PUSH
89015: EMPTY
89016: LIST
89017: LIST
89018: PUSH
89019: LD_INT 2
89021: PUSH
89022: LD_INT 30
89024: PUSH
89025: LD_INT 27
89027: PUSH
89028: EMPTY
89029: LIST
89030: LIST
89031: PUSH
89032: LD_INT 30
89034: PUSH
89035: LD_INT 26
89037: PUSH
89038: EMPTY
89039: LIST
89040: LIST
89041: PUSH
89042: LD_INT 30
89044: PUSH
89045: LD_INT 28
89047: PUSH
89048: EMPTY
89049: LIST
89050: LIST
89051: PUSH
89052: EMPTY
89053: LIST
89054: LIST
89055: LIST
89056: LIST
89057: PUSH
89058: EMPTY
89059: LIST
89060: LIST
89061: PPUSH
89062: CALL_OW 69
89066: ST_TO_ADDR
// if not tmp then
89067: LD_VAR 0 2
89071: NOT
89072: IFFALSE 89076
// exit ;
89074: GO 89105
// for i in tmp do
89076: LD_ADDR_VAR 0 1
89080: PUSH
89081: LD_VAR 0 2
89085: PUSH
89086: FOR_IN
89087: IFFALSE 89103
// SetLives ( i , 1 ) ;
89089: LD_VAR 0 1
89093: PPUSH
89094: LD_INT 1
89096: PPUSH
89097: CALL_OW 234
89101: GO 89086
89103: POP
89104: POP
// end ;
89105: PPOPN 2
89107: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
89108: LD_EXP 106
89112: PUSH
89113: LD_EXP 155
89117: AND
89118: IFFALSE 89392
89120: GO 89122
89122: DISABLE
89123: LD_INT 0
89125: PPUSH
89126: PPUSH
89127: PPUSH
// begin i := rand ( 1 , 7 ) ;
89128: LD_ADDR_VAR 0 1
89132: PUSH
89133: LD_INT 1
89135: PPUSH
89136: LD_INT 7
89138: PPUSH
89139: CALL_OW 12
89143: ST_TO_ADDR
// case i of 1 :
89144: LD_VAR 0 1
89148: PUSH
89149: LD_INT 1
89151: DOUBLE
89152: EQUAL
89153: IFTRUE 89157
89155: GO 89167
89157: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
89158: LD_STRING earthquake(getX(game), 0, 32)
89160: PPUSH
89161: CALL_OW 559
89165: GO 89392
89167: LD_INT 2
89169: DOUBLE
89170: EQUAL
89171: IFTRUE 89175
89173: GO 89189
89175: POP
// begin ToLua ( displayStucuk(); ) ;
89176: LD_STRING displayStucuk();
89178: PPUSH
89179: CALL_OW 559
// ResetFog ;
89183: CALL_OW 335
// end ; 3 :
89187: GO 89392
89189: LD_INT 3
89191: DOUBLE
89192: EQUAL
89193: IFTRUE 89197
89195: GO 89301
89197: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
89198: LD_ADDR_VAR 0 2
89202: PUSH
89203: LD_INT 22
89205: PUSH
89206: LD_OWVAR 2
89210: PUSH
89211: EMPTY
89212: LIST
89213: LIST
89214: PUSH
89215: LD_INT 25
89217: PUSH
89218: LD_INT 1
89220: PUSH
89221: EMPTY
89222: LIST
89223: LIST
89224: PUSH
89225: EMPTY
89226: LIST
89227: LIST
89228: PPUSH
89229: CALL_OW 69
89233: ST_TO_ADDR
// if not tmp then
89234: LD_VAR 0 2
89238: NOT
89239: IFFALSE 89243
// exit ;
89241: GO 89392
// un := tmp [ rand ( 1 , tmp ) ] ;
89243: LD_ADDR_VAR 0 3
89247: PUSH
89248: LD_VAR 0 2
89252: PUSH
89253: LD_INT 1
89255: PPUSH
89256: LD_VAR 0 2
89260: PPUSH
89261: CALL_OW 12
89265: ARRAY
89266: ST_TO_ADDR
// if Crawls ( un ) then
89267: LD_VAR 0 3
89271: PPUSH
89272: CALL_OW 318
89276: IFFALSE 89287
// ComWalk ( un ) ;
89278: LD_VAR 0 3
89282: PPUSH
89283: CALL_OW 138
// SetClass ( un , class_mortar ) ;
89287: LD_VAR 0 3
89291: PPUSH
89292: LD_INT 8
89294: PPUSH
89295: CALL_OW 336
// end ; 4 :
89299: GO 89392
89301: LD_INT 4
89303: DOUBLE
89304: EQUAL
89305: IFTRUE 89309
89307: GO 89370
89309: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
89310: LD_ADDR_VAR 0 2
89314: PUSH
89315: LD_INT 22
89317: PUSH
89318: LD_OWVAR 2
89322: PUSH
89323: EMPTY
89324: LIST
89325: LIST
89326: PUSH
89327: LD_INT 30
89329: PUSH
89330: LD_INT 29
89332: PUSH
89333: EMPTY
89334: LIST
89335: LIST
89336: PUSH
89337: EMPTY
89338: LIST
89339: LIST
89340: PPUSH
89341: CALL_OW 69
89345: ST_TO_ADDR
// if not tmp then
89346: LD_VAR 0 2
89350: NOT
89351: IFFALSE 89355
// exit ;
89353: GO 89392
// DestroyUnit ( tmp [ 1 ] ) ;
89355: LD_VAR 0 2
89359: PUSH
89360: LD_INT 1
89362: ARRAY
89363: PPUSH
89364: CALL_OW 65
// end ; 5 .. 7 :
89368: GO 89392
89370: LD_INT 5
89372: DOUBLE
89373: GREATEREQUAL
89374: IFFALSE 89382
89376: LD_INT 7
89378: DOUBLE
89379: LESSEQUAL
89380: IFTRUE 89384
89382: GO 89391
89384: POP
// StreamSibBomb ; end ;
89385: CALL 85642 0 0
89389: GO 89392
89391: POP
// end ;
89392: PPOPN 3
89394: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
89395: LD_EXP 106
89399: PUSH
89400: LD_EXP 156
89404: AND
89405: IFFALSE 89561
89407: GO 89409
89409: DISABLE
89410: LD_INT 0
89412: PPUSH
89413: PPUSH
89414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
89415: LD_ADDR_VAR 0 2
89419: PUSH
89420: LD_INT 81
89422: PUSH
89423: LD_OWVAR 2
89427: PUSH
89428: EMPTY
89429: LIST
89430: LIST
89431: PUSH
89432: LD_INT 2
89434: PUSH
89435: LD_INT 21
89437: PUSH
89438: LD_INT 1
89440: PUSH
89441: EMPTY
89442: LIST
89443: LIST
89444: PUSH
89445: LD_INT 21
89447: PUSH
89448: LD_INT 2
89450: PUSH
89451: EMPTY
89452: LIST
89453: LIST
89454: PUSH
89455: EMPTY
89456: LIST
89457: LIST
89458: LIST
89459: PUSH
89460: EMPTY
89461: LIST
89462: LIST
89463: PPUSH
89464: CALL_OW 69
89468: ST_TO_ADDR
// if not tmp then
89469: LD_VAR 0 2
89473: NOT
89474: IFFALSE 89478
// exit ;
89476: GO 89561
// p := 0 ;
89478: LD_ADDR_VAR 0 3
89482: PUSH
89483: LD_INT 0
89485: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
89486: LD_INT 35
89488: PPUSH
89489: CALL_OW 67
// p := p + 1 ;
89493: LD_ADDR_VAR 0 3
89497: PUSH
89498: LD_VAR 0 3
89502: PUSH
89503: LD_INT 1
89505: PLUS
89506: ST_TO_ADDR
// for i in tmp do
89507: LD_ADDR_VAR 0 1
89511: PUSH
89512: LD_VAR 0 2
89516: PUSH
89517: FOR_IN
89518: IFFALSE 89549
// if GetLives ( i ) < 1000 then
89520: LD_VAR 0 1
89524: PPUSH
89525: CALL_OW 256
89529: PUSH
89530: LD_INT 1000
89532: LESS
89533: IFFALSE 89547
// SetLives ( i , 1000 ) ;
89535: LD_VAR 0 1
89539: PPUSH
89540: LD_INT 1000
89542: PPUSH
89543: CALL_OW 234
89547: GO 89517
89549: POP
89550: POP
// until p > 20 ;
89551: LD_VAR 0 3
89555: PUSH
89556: LD_INT 20
89558: GREATER
89559: IFFALSE 89486
// end ;
89561: PPOPN 3
89563: END
// every 0 0$1 trigger StreamModeActive and sTime do
89564: LD_EXP 106
89568: PUSH
89569: LD_EXP 157
89573: AND
89574: IFFALSE 89609
89576: GO 89578
89578: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
89579: LD_INT 28
89581: PPUSH
89582: LD_OWVAR 2
89586: PPUSH
89587: LD_INT 2
89589: PPUSH
89590: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
89594: LD_INT 30
89596: PPUSH
89597: LD_OWVAR 2
89601: PPUSH
89602: LD_INT 2
89604: PPUSH
89605: CALL_OW 322
// end ;
89609: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
89610: LD_EXP 106
89614: PUSH
89615: LD_EXP 158
89619: AND
89620: IFFALSE 89741
89622: GO 89624
89624: DISABLE
89625: LD_INT 0
89627: PPUSH
89628: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
89629: LD_ADDR_VAR 0 2
89633: PUSH
89634: LD_INT 22
89636: PUSH
89637: LD_OWVAR 2
89641: PUSH
89642: EMPTY
89643: LIST
89644: LIST
89645: PUSH
89646: LD_INT 21
89648: PUSH
89649: LD_INT 1
89651: PUSH
89652: EMPTY
89653: LIST
89654: LIST
89655: PUSH
89656: LD_INT 3
89658: PUSH
89659: LD_INT 23
89661: PUSH
89662: LD_INT 0
89664: PUSH
89665: EMPTY
89666: LIST
89667: LIST
89668: PUSH
89669: EMPTY
89670: LIST
89671: LIST
89672: PUSH
89673: EMPTY
89674: LIST
89675: LIST
89676: LIST
89677: PPUSH
89678: CALL_OW 69
89682: ST_TO_ADDR
// if not tmp then
89683: LD_VAR 0 2
89687: NOT
89688: IFFALSE 89692
// exit ;
89690: GO 89741
// for i in tmp do
89692: LD_ADDR_VAR 0 1
89696: PUSH
89697: LD_VAR 0 2
89701: PUSH
89702: FOR_IN
89703: IFFALSE 89739
// begin if Crawls ( i ) then
89705: LD_VAR 0 1
89709: PPUSH
89710: CALL_OW 318
89714: IFFALSE 89725
// ComWalk ( i ) ;
89716: LD_VAR 0 1
89720: PPUSH
89721: CALL_OW 138
// SetClass ( i , 2 ) ;
89725: LD_VAR 0 1
89729: PPUSH
89730: LD_INT 2
89732: PPUSH
89733: CALL_OW 336
// end ;
89737: GO 89702
89739: POP
89740: POP
// end ;
89741: PPOPN 2
89743: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
89744: LD_EXP 106
89748: PUSH
89749: LD_EXP 159
89753: AND
89754: IFFALSE 90035
89756: GO 89758
89758: DISABLE
89759: LD_INT 0
89761: PPUSH
89762: PPUSH
89763: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
89764: LD_OWVAR 2
89768: PPUSH
89769: LD_INT 9
89771: PPUSH
89772: LD_INT 1
89774: PPUSH
89775: LD_INT 1
89777: PPUSH
89778: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
89782: LD_INT 9
89784: PPUSH
89785: LD_OWVAR 2
89789: PPUSH
89790: CALL_OW 343
// uc_side := 9 ;
89794: LD_ADDR_OWVAR 20
89798: PUSH
89799: LD_INT 9
89801: ST_TO_ADDR
// uc_nation := 2 ;
89802: LD_ADDR_OWVAR 21
89806: PUSH
89807: LD_INT 2
89809: ST_TO_ADDR
// hc_name := Dark Warrior ;
89810: LD_ADDR_OWVAR 26
89814: PUSH
89815: LD_STRING Dark Warrior
89817: ST_TO_ADDR
// hc_gallery :=  ;
89818: LD_ADDR_OWVAR 33
89822: PUSH
89823: LD_STRING 
89825: ST_TO_ADDR
// hc_noskilllimit := true ;
89826: LD_ADDR_OWVAR 76
89830: PUSH
89831: LD_INT 1
89833: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
89834: LD_ADDR_OWVAR 31
89838: PUSH
89839: LD_INT 30
89841: PUSH
89842: LD_INT 30
89844: PUSH
89845: LD_INT 30
89847: PUSH
89848: LD_INT 30
89850: PUSH
89851: EMPTY
89852: LIST
89853: LIST
89854: LIST
89855: LIST
89856: ST_TO_ADDR
// un := CreateHuman ;
89857: LD_ADDR_VAR 0 3
89861: PUSH
89862: CALL_OW 44
89866: ST_TO_ADDR
// hc_noskilllimit := false ;
89867: LD_ADDR_OWVAR 76
89871: PUSH
89872: LD_INT 0
89874: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
89875: LD_VAR 0 3
89879: PPUSH
89880: LD_INT 1
89882: PPUSH
89883: CALL_OW 51
// p := 0 ;
89887: LD_ADDR_VAR 0 2
89891: PUSH
89892: LD_INT 0
89894: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
89895: LD_INT 35
89897: PPUSH
89898: CALL_OW 67
// p := p + 1 ;
89902: LD_ADDR_VAR 0 2
89906: PUSH
89907: LD_VAR 0 2
89911: PUSH
89912: LD_INT 1
89914: PLUS
89915: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
89916: LD_VAR 0 3
89920: PPUSH
89921: CALL_OW 256
89925: PUSH
89926: LD_INT 1000
89928: LESS
89929: IFFALSE 89943
// SetLives ( un , 1000 ) ;
89931: LD_VAR 0 3
89935: PPUSH
89936: LD_INT 1000
89938: PPUSH
89939: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
89943: LD_VAR 0 3
89947: PPUSH
89948: LD_INT 81
89950: PUSH
89951: LD_OWVAR 2
89955: PUSH
89956: EMPTY
89957: LIST
89958: LIST
89959: PUSH
89960: LD_INT 91
89962: PUSH
89963: LD_VAR 0 3
89967: PUSH
89968: LD_INT 30
89970: PUSH
89971: EMPTY
89972: LIST
89973: LIST
89974: LIST
89975: PUSH
89976: EMPTY
89977: LIST
89978: LIST
89979: PPUSH
89980: CALL_OW 69
89984: PPUSH
89985: LD_VAR 0 3
89989: PPUSH
89990: CALL_OW 74
89994: PPUSH
89995: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
89999: LD_VAR 0 2
90003: PUSH
90004: LD_INT 60
90006: GREATER
90007: PUSH
90008: LD_VAR 0 3
90012: PPUSH
90013: CALL_OW 301
90017: OR
90018: IFFALSE 89895
// if un then
90020: LD_VAR 0 3
90024: IFFALSE 90035
// RemoveUnit ( un ) ;
90026: LD_VAR 0 3
90030: PPUSH
90031: CALL_OW 64
// end ; end_of_file
90035: PPOPN 3
90037: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
90038: LD_INT 0
90040: PPUSH
90041: PPUSH
90042: PPUSH
90043: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
90044: LD_VAR 0 1
90048: PPUSH
90049: CALL_OW 264
90053: PUSH
90054: LD_EXP 52
90058: EQUAL
90059: IFFALSE 90131
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
90061: LD_INT 68
90063: PPUSH
90064: LD_VAR 0 1
90068: PPUSH
90069: CALL_OW 255
90073: PPUSH
90074: CALL_OW 321
90078: PUSH
90079: LD_INT 2
90081: EQUAL
90082: IFFALSE 90094
// eff := 70 else
90084: LD_ADDR_VAR 0 4
90088: PUSH
90089: LD_INT 70
90091: ST_TO_ADDR
90092: GO 90102
// eff := 30 ;
90094: LD_ADDR_VAR 0 4
90098: PUSH
90099: LD_INT 30
90101: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
90102: LD_VAR 0 1
90106: PPUSH
90107: CALL_OW 250
90111: PPUSH
90112: LD_VAR 0 1
90116: PPUSH
90117: CALL_OW 251
90121: PPUSH
90122: LD_VAR 0 4
90126: PPUSH
90127: CALL_OW 495
// end ; end ;
90131: LD_VAR 0 2
90135: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
90136: LD_INT 0
90138: PPUSH
// end ;
90139: LD_VAR 0 4
90143: RET
// export function SOS_Command ( cmd ) ; begin
90144: LD_INT 0
90146: PPUSH
// end ;
90147: LD_VAR 0 2
90151: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
90152: LD_VAR 0 1
90156: PUSH
90157: LD_INT 255
90159: EQUAL
90160: PUSH
90161: LD_VAR 0 2
90165: PPUSH
90166: CALL_OW 264
90170: PUSH
90171: LD_INT 14
90173: PUSH
90174: LD_INT 53
90176: PUSH
90177: EMPTY
90178: LIST
90179: LIST
90180: IN
90181: AND
90182: PUSH
90183: LD_VAR 0 4
90187: PPUSH
90188: LD_VAR 0 5
90192: PPUSH
90193: CALL_OW 488
90197: AND
90198: IFFALSE 90222
// CutTreeXYR ( unit , x , y , 12 ) ;
90200: LD_VAR 0 2
90204: PPUSH
90205: LD_VAR 0 4
90209: PPUSH
90210: LD_VAR 0 5
90214: PPUSH
90215: LD_INT 12
90217: PPUSH
90218: CALL 90225 0 4
// end ;
90222: PPOPN 5
90224: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
90225: LD_INT 0
90227: PPUSH
90228: PPUSH
90229: PPUSH
90230: PPUSH
90231: PPUSH
90232: PPUSH
90233: PPUSH
90234: PPUSH
90235: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
90236: LD_VAR 0 1
90240: NOT
90241: PUSH
90242: LD_VAR 0 2
90246: PPUSH
90247: LD_VAR 0 3
90251: PPUSH
90252: CALL_OW 488
90256: NOT
90257: OR
90258: PUSH
90259: LD_VAR 0 4
90263: NOT
90264: OR
90265: IFFALSE 90269
// exit ;
90267: GO 90609
// list := [ ] ;
90269: LD_ADDR_VAR 0 13
90273: PUSH
90274: EMPTY
90275: ST_TO_ADDR
// if x - r < 0 then
90276: LD_VAR 0 2
90280: PUSH
90281: LD_VAR 0 4
90285: MINUS
90286: PUSH
90287: LD_INT 0
90289: LESS
90290: IFFALSE 90302
// min_x := 0 else
90292: LD_ADDR_VAR 0 7
90296: PUSH
90297: LD_INT 0
90299: ST_TO_ADDR
90300: GO 90318
// min_x := x - r ;
90302: LD_ADDR_VAR 0 7
90306: PUSH
90307: LD_VAR 0 2
90311: PUSH
90312: LD_VAR 0 4
90316: MINUS
90317: ST_TO_ADDR
// if y - r < 0 then
90318: LD_VAR 0 3
90322: PUSH
90323: LD_VAR 0 4
90327: MINUS
90328: PUSH
90329: LD_INT 0
90331: LESS
90332: IFFALSE 90344
// min_y := 0 else
90334: LD_ADDR_VAR 0 8
90338: PUSH
90339: LD_INT 0
90341: ST_TO_ADDR
90342: GO 90360
// min_y := y - r ;
90344: LD_ADDR_VAR 0 8
90348: PUSH
90349: LD_VAR 0 3
90353: PUSH
90354: LD_VAR 0 4
90358: MINUS
90359: ST_TO_ADDR
// max_x := x + r ;
90360: LD_ADDR_VAR 0 9
90364: PUSH
90365: LD_VAR 0 2
90369: PUSH
90370: LD_VAR 0 4
90374: PLUS
90375: ST_TO_ADDR
// max_y := y + r ;
90376: LD_ADDR_VAR 0 10
90380: PUSH
90381: LD_VAR 0 3
90385: PUSH
90386: LD_VAR 0 4
90390: PLUS
90391: ST_TO_ADDR
// for _x = min_x to max_x do
90392: LD_ADDR_VAR 0 11
90396: PUSH
90397: DOUBLE
90398: LD_VAR 0 7
90402: DEC
90403: ST_TO_ADDR
90404: LD_VAR 0 9
90408: PUSH
90409: FOR_TO
90410: IFFALSE 90527
// for _y = min_y to max_y do
90412: LD_ADDR_VAR 0 12
90416: PUSH
90417: DOUBLE
90418: LD_VAR 0 8
90422: DEC
90423: ST_TO_ADDR
90424: LD_VAR 0 10
90428: PUSH
90429: FOR_TO
90430: IFFALSE 90523
// begin if not ValidHex ( _x , _y ) then
90432: LD_VAR 0 11
90436: PPUSH
90437: LD_VAR 0 12
90441: PPUSH
90442: CALL_OW 488
90446: NOT
90447: IFFALSE 90451
// continue ;
90449: GO 90429
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
90451: LD_VAR 0 11
90455: PPUSH
90456: LD_VAR 0 12
90460: PPUSH
90461: CALL_OW 351
90465: PUSH
90466: LD_VAR 0 11
90470: PPUSH
90471: LD_VAR 0 12
90475: PPUSH
90476: CALL_OW 554
90480: AND
90481: IFFALSE 90521
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
90483: LD_ADDR_VAR 0 13
90487: PUSH
90488: LD_VAR 0 13
90492: PPUSH
90493: LD_VAR 0 13
90497: PUSH
90498: LD_INT 1
90500: PLUS
90501: PPUSH
90502: LD_VAR 0 11
90506: PUSH
90507: LD_VAR 0 12
90511: PUSH
90512: EMPTY
90513: LIST
90514: LIST
90515: PPUSH
90516: CALL_OW 2
90520: ST_TO_ADDR
// end ;
90521: GO 90429
90523: POP
90524: POP
90525: GO 90409
90527: POP
90528: POP
// if not list then
90529: LD_VAR 0 13
90533: NOT
90534: IFFALSE 90538
// exit ;
90536: GO 90609
// for i in list do
90538: LD_ADDR_VAR 0 6
90542: PUSH
90543: LD_VAR 0 13
90547: PUSH
90548: FOR_IN
90549: IFFALSE 90607
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
90551: LD_VAR 0 1
90555: PPUSH
90556: LD_STRING M
90558: PUSH
90559: LD_VAR 0 6
90563: PUSH
90564: LD_INT 1
90566: ARRAY
90567: PUSH
90568: LD_VAR 0 6
90572: PUSH
90573: LD_INT 2
90575: ARRAY
90576: PUSH
90577: LD_INT 0
90579: PUSH
90580: LD_INT 0
90582: PUSH
90583: LD_INT 0
90585: PUSH
90586: LD_INT 0
90588: PUSH
90589: EMPTY
90590: LIST
90591: LIST
90592: LIST
90593: LIST
90594: LIST
90595: LIST
90596: LIST
90597: PUSH
90598: EMPTY
90599: LIST
90600: PPUSH
90601: CALL_OW 447
90605: GO 90548
90607: POP
90608: POP
// end ; end_of_file
90609: LD_VAR 0 5
90613: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
90614: LD_INT 0
90616: PPUSH
90617: PPUSH
90618: PPUSH
90619: PPUSH
90620: PPUSH
90621: PPUSH
90622: PPUSH
90623: PPUSH
90624: PPUSH
90625: PPUSH
90626: PPUSH
90627: PPUSH
90628: PPUSH
90629: PPUSH
90630: PPUSH
90631: PPUSH
90632: PPUSH
90633: PPUSH
90634: PPUSH
90635: PPUSH
90636: PPUSH
90637: PPUSH
90638: PPUSH
90639: PPUSH
90640: PPUSH
90641: PPUSH
90642: PPUSH
90643: PPUSH
90644: PPUSH
90645: PPUSH
90646: PPUSH
90647: PPUSH
90648: PPUSH
90649: PPUSH
// if not list then
90650: LD_VAR 0 1
90654: NOT
90655: IFFALSE 90659
// exit ;
90657: GO 95318
// base := list [ 1 ] ;
90659: LD_ADDR_VAR 0 3
90663: PUSH
90664: LD_VAR 0 1
90668: PUSH
90669: LD_INT 1
90671: ARRAY
90672: ST_TO_ADDR
// group := list [ 2 ] ;
90673: LD_ADDR_VAR 0 4
90677: PUSH
90678: LD_VAR 0 1
90682: PUSH
90683: LD_INT 2
90685: ARRAY
90686: ST_TO_ADDR
// path := list [ 3 ] ;
90687: LD_ADDR_VAR 0 5
90691: PUSH
90692: LD_VAR 0 1
90696: PUSH
90697: LD_INT 3
90699: ARRAY
90700: ST_TO_ADDR
// flags := list [ 4 ] ;
90701: LD_ADDR_VAR 0 6
90705: PUSH
90706: LD_VAR 0 1
90710: PUSH
90711: LD_INT 4
90713: ARRAY
90714: ST_TO_ADDR
// mined := [ ] ;
90715: LD_ADDR_VAR 0 27
90719: PUSH
90720: EMPTY
90721: ST_TO_ADDR
// bombed := [ ] ;
90722: LD_ADDR_VAR 0 28
90726: PUSH
90727: EMPTY
90728: ST_TO_ADDR
// healers := [ ] ;
90729: LD_ADDR_VAR 0 31
90733: PUSH
90734: EMPTY
90735: ST_TO_ADDR
// to_heal := [ ] ;
90736: LD_ADDR_VAR 0 30
90740: PUSH
90741: EMPTY
90742: ST_TO_ADDR
// repairs := [ ] ;
90743: LD_ADDR_VAR 0 33
90747: PUSH
90748: EMPTY
90749: ST_TO_ADDR
// to_repair := [ ] ;
90750: LD_ADDR_VAR 0 32
90754: PUSH
90755: EMPTY
90756: ST_TO_ADDR
// if not group or not path then
90757: LD_VAR 0 4
90761: NOT
90762: PUSH
90763: LD_VAR 0 5
90767: NOT
90768: OR
90769: IFFALSE 90773
// exit ;
90771: GO 95318
// side := GetSide ( group [ 1 ] ) ;
90773: LD_ADDR_VAR 0 35
90777: PUSH
90778: LD_VAR 0 4
90782: PUSH
90783: LD_INT 1
90785: ARRAY
90786: PPUSH
90787: CALL_OW 255
90791: ST_TO_ADDR
// if flags then
90792: LD_VAR 0 6
90796: IFFALSE 90940
// begin f_ignore_area := flags [ 1 ] ;
90798: LD_ADDR_VAR 0 17
90802: PUSH
90803: LD_VAR 0 6
90807: PUSH
90808: LD_INT 1
90810: ARRAY
90811: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
90812: LD_ADDR_VAR 0 18
90816: PUSH
90817: LD_VAR 0 6
90821: PUSH
90822: LD_INT 2
90824: ARRAY
90825: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
90826: LD_ADDR_VAR 0 19
90830: PUSH
90831: LD_VAR 0 6
90835: PUSH
90836: LD_INT 3
90838: ARRAY
90839: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
90840: LD_ADDR_VAR 0 20
90844: PUSH
90845: LD_VAR 0 6
90849: PUSH
90850: LD_INT 4
90852: ARRAY
90853: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
90854: LD_ADDR_VAR 0 21
90858: PUSH
90859: LD_VAR 0 6
90863: PUSH
90864: LD_INT 5
90866: ARRAY
90867: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
90868: LD_ADDR_VAR 0 22
90872: PUSH
90873: LD_VAR 0 6
90877: PUSH
90878: LD_INT 6
90880: ARRAY
90881: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
90882: LD_ADDR_VAR 0 23
90886: PUSH
90887: LD_VAR 0 6
90891: PUSH
90892: LD_INT 7
90894: ARRAY
90895: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
90896: LD_ADDR_VAR 0 24
90900: PUSH
90901: LD_VAR 0 6
90905: PUSH
90906: LD_INT 8
90908: ARRAY
90909: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
90910: LD_ADDR_VAR 0 25
90914: PUSH
90915: LD_VAR 0 6
90919: PUSH
90920: LD_INT 9
90922: ARRAY
90923: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
90924: LD_ADDR_VAR 0 26
90928: PUSH
90929: LD_VAR 0 6
90933: PUSH
90934: LD_INT 10
90936: ARRAY
90937: ST_TO_ADDR
// end else
90938: GO 91020
// begin f_ignore_area := false ;
90940: LD_ADDR_VAR 0 17
90944: PUSH
90945: LD_INT 0
90947: ST_TO_ADDR
// f_capture := false ;
90948: LD_ADDR_VAR 0 18
90952: PUSH
90953: LD_INT 0
90955: ST_TO_ADDR
// f_ignore_civ := false ;
90956: LD_ADDR_VAR 0 19
90960: PUSH
90961: LD_INT 0
90963: ST_TO_ADDR
// f_murder := false ;
90964: LD_ADDR_VAR 0 20
90968: PUSH
90969: LD_INT 0
90971: ST_TO_ADDR
// f_mines := false ;
90972: LD_ADDR_VAR 0 21
90976: PUSH
90977: LD_INT 0
90979: ST_TO_ADDR
// f_repair := false ;
90980: LD_ADDR_VAR 0 22
90984: PUSH
90985: LD_INT 0
90987: ST_TO_ADDR
// f_heal := false ;
90988: LD_ADDR_VAR 0 23
90992: PUSH
90993: LD_INT 0
90995: ST_TO_ADDR
// f_spacetime := false ;
90996: LD_ADDR_VAR 0 24
91000: PUSH
91001: LD_INT 0
91003: ST_TO_ADDR
// f_attack_depot := false ;
91004: LD_ADDR_VAR 0 25
91008: PUSH
91009: LD_INT 0
91011: ST_TO_ADDR
// f_crawl := false ;
91012: LD_ADDR_VAR 0 26
91016: PUSH
91017: LD_INT 0
91019: ST_TO_ADDR
// end ; if f_heal then
91020: LD_VAR 0 23
91024: IFFALSE 91051
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
91026: LD_ADDR_VAR 0 31
91030: PUSH
91031: LD_VAR 0 4
91035: PPUSH
91036: LD_INT 25
91038: PUSH
91039: LD_INT 4
91041: PUSH
91042: EMPTY
91043: LIST
91044: LIST
91045: PPUSH
91046: CALL_OW 72
91050: ST_TO_ADDR
// if f_repair then
91051: LD_VAR 0 22
91055: IFFALSE 91082
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
91057: LD_ADDR_VAR 0 33
91061: PUSH
91062: LD_VAR 0 4
91066: PPUSH
91067: LD_INT 25
91069: PUSH
91070: LD_INT 3
91072: PUSH
91073: EMPTY
91074: LIST
91075: LIST
91076: PPUSH
91077: CALL_OW 72
91081: ST_TO_ADDR
// units_path := [ ] ;
91082: LD_ADDR_VAR 0 16
91086: PUSH
91087: EMPTY
91088: ST_TO_ADDR
// for i = 1 to group do
91089: LD_ADDR_VAR 0 7
91093: PUSH
91094: DOUBLE
91095: LD_INT 1
91097: DEC
91098: ST_TO_ADDR
91099: LD_VAR 0 4
91103: PUSH
91104: FOR_TO
91105: IFFALSE 91134
// units_path := Replace ( units_path , i , path ) ;
91107: LD_ADDR_VAR 0 16
91111: PUSH
91112: LD_VAR 0 16
91116: PPUSH
91117: LD_VAR 0 7
91121: PPUSH
91122: LD_VAR 0 5
91126: PPUSH
91127: CALL_OW 1
91131: ST_TO_ADDR
91132: GO 91104
91134: POP
91135: POP
// repeat for i = group downto 1 do
91136: LD_ADDR_VAR 0 7
91140: PUSH
91141: DOUBLE
91142: LD_VAR 0 4
91146: INC
91147: ST_TO_ADDR
91148: LD_INT 1
91150: PUSH
91151: FOR_DOWNTO
91152: IFFALSE 95274
// begin wait ( 5 ) ;
91154: LD_INT 5
91156: PPUSH
91157: CALL_OW 67
// tmp := [ ] ;
91161: LD_ADDR_VAR 0 14
91165: PUSH
91166: EMPTY
91167: ST_TO_ADDR
// attacking := false ;
91168: LD_ADDR_VAR 0 29
91172: PUSH
91173: LD_INT 0
91175: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
91176: LD_VAR 0 4
91180: PUSH
91181: LD_VAR 0 7
91185: ARRAY
91186: PPUSH
91187: CALL_OW 301
91191: PUSH
91192: LD_VAR 0 4
91196: PUSH
91197: LD_VAR 0 7
91201: ARRAY
91202: NOT
91203: OR
91204: IFFALSE 91313
// begin if GetType ( group [ i ] ) = unit_human then
91206: LD_VAR 0 4
91210: PUSH
91211: LD_VAR 0 7
91215: ARRAY
91216: PPUSH
91217: CALL_OW 247
91221: PUSH
91222: LD_INT 1
91224: EQUAL
91225: IFFALSE 91271
// begin to_heal := to_heal diff group [ i ] ;
91227: LD_ADDR_VAR 0 30
91231: PUSH
91232: LD_VAR 0 30
91236: PUSH
91237: LD_VAR 0 4
91241: PUSH
91242: LD_VAR 0 7
91246: ARRAY
91247: DIFF
91248: ST_TO_ADDR
// healers := healers diff group [ i ] ;
91249: LD_ADDR_VAR 0 31
91253: PUSH
91254: LD_VAR 0 31
91258: PUSH
91259: LD_VAR 0 4
91263: PUSH
91264: LD_VAR 0 7
91268: ARRAY
91269: DIFF
91270: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
91271: LD_ADDR_VAR 0 4
91275: PUSH
91276: LD_VAR 0 4
91280: PPUSH
91281: LD_VAR 0 7
91285: PPUSH
91286: CALL_OW 3
91290: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
91291: LD_ADDR_VAR 0 16
91295: PUSH
91296: LD_VAR 0 16
91300: PPUSH
91301: LD_VAR 0 7
91305: PPUSH
91306: CALL_OW 3
91310: ST_TO_ADDR
// continue ;
91311: GO 91151
// end ; if f_repair then
91313: LD_VAR 0 22
91317: IFFALSE 91806
// begin if GetType ( group [ i ] ) = unit_vehicle then
91319: LD_VAR 0 4
91323: PUSH
91324: LD_VAR 0 7
91328: ARRAY
91329: PPUSH
91330: CALL_OW 247
91334: PUSH
91335: LD_INT 2
91337: EQUAL
91338: IFFALSE 91528
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
91340: LD_VAR 0 4
91344: PUSH
91345: LD_VAR 0 7
91349: ARRAY
91350: PPUSH
91351: CALL_OW 256
91355: PUSH
91356: LD_INT 700
91358: LESS
91359: PUSH
91360: LD_VAR 0 4
91364: PUSH
91365: LD_VAR 0 7
91369: ARRAY
91370: PUSH
91371: LD_VAR 0 32
91375: IN
91376: NOT
91377: AND
91378: IFFALSE 91402
// to_repair := to_repair union group [ i ] ;
91380: LD_ADDR_VAR 0 32
91384: PUSH
91385: LD_VAR 0 32
91389: PUSH
91390: LD_VAR 0 4
91394: PUSH
91395: LD_VAR 0 7
91399: ARRAY
91400: UNION
91401: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
91402: LD_VAR 0 4
91406: PUSH
91407: LD_VAR 0 7
91411: ARRAY
91412: PPUSH
91413: CALL_OW 256
91417: PUSH
91418: LD_INT 1000
91420: EQUAL
91421: PUSH
91422: LD_VAR 0 4
91426: PUSH
91427: LD_VAR 0 7
91431: ARRAY
91432: PUSH
91433: LD_VAR 0 32
91437: IN
91438: AND
91439: IFFALSE 91463
// to_repair := to_repair diff group [ i ] ;
91441: LD_ADDR_VAR 0 32
91445: PUSH
91446: LD_VAR 0 32
91450: PUSH
91451: LD_VAR 0 4
91455: PUSH
91456: LD_VAR 0 7
91460: ARRAY
91461: DIFF
91462: ST_TO_ADDR
// if group [ i ] in to_repair then
91463: LD_VAR 0 4
91467: PUSH
91468: LD_VAR 0 7
91472: ARRAY
91473: PUSH
91474: LD_VAR 0 32
91478: IN
91479: IFFALSE 91526
// begin if not IsInArea ( group [ i ] , f_repair ) then
91481: LD_VAR 0 4
91485: PUSH
91486: LD_VAR 0 7
91490: ARRAY
91491: PPUSH
91492: LD_VAR 0 22
91496: PPUSH
91497: CALL_OW 308
91501: NOT
91502: IFFALSE 91524
// ComMoveToArea ( group [ i ] , f_repair ) ;
91504: LD_VAR 0 4
91508: PUSH
91509: LD_VAR 0 7
91513: ARRAY
91514: PPUSH
91515: LD_VAR 0 22
91519: PPUSH
91520: CALL_OW 113
// continue ;
91524: GO 91151
// end ; end else
91526: GO 91806
// if group [ i ] in repairs then
91528: LD_VAR 0 4
91532: PUSH
91533: LD_VAR 0 7
91537: ARRAY
91538: PUSH
91539: LD_VAR 0 33
91543: IN
91544: IFFALSE 91806
// begin if IsInUnit ( group [ i ] ) then
91546: LD_VAR 0 4
91550: PUSH
91551: LD_VAR 0 7
91555: ARRAY
91556: PPUSH
91557: CALL_OW 310
91561: IFFALSE 91629
// begin z := IsInUnit ( group [ i ] ) ;
91563: LD_ADDR_VAR 0 13
91567: PUSH
91568: LD_VAR 0 4
91572: PUSH
91573: LD_VAR 0 7
91577: ARRAY
91578: PPUSH
91579: CALL_OW 310
91583: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
91584: LD_VAR 0 13
91588: PUSH
91589: LD_VAR 0 32
91593: IN
91594: PUSH
91595: LD_VAR 0 13
91599: PPUSH
91600: LD_VAR 0 22
91604: PPUSH
91605: CALL_OW 308
91609: AND
91610: IFFALSE 91627
// ComExitVehicle ( group [ i ] ) ;
91612: LD_VAR 0 4
91616: PUSH
91617: LD_VAR 0 7
91621: ARRAY
91622: PPUSH
91623: CALL_OW 121
// end else
91627: GO 91806
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
91629: LD_ADDR_VAR 0 13
91633: PUSH
91634: LD_VAR 0 4
91638: PPUSH
91639: LD_INT 95
91641: PUSH
91642: LD_VAR 0 22
91646: PUSH
91647: EMPTY
91648: LIST
91649: LIST
91650: PUSH
91651: LD_INT 58
91653: PUSH
91654: EMPTY
91655: LIST
91656: PUSH
91657: EMPTY
91658: LIST
91659: LIST
91660: PPUSH
91661: CALL_OW 72
91665: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
91666: LD_VAR 0 4
91670: PUSH
91671: LD_VAR 0 7
91675: ARRAY
91676: PPUSH
91677: CALL_OW 314
91681: NOT
91682: IFFALSE 91804
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
91684: LD_ADDR_VAR 0 10
91688: PUSH
91689: LD_VAR 0 13
91693: PPUSH
91694: LD_VAR 0 4
91698: PUSH
91699: LD_VAR 0 7
91703: ARRAY
91704: PPUSH
91705: CALL_OW 74
91709: ST_TO_ADDR
// if not x then
91710: LD_VAR 0 10
91714: NOT
91715: IFFALSE 91719
// continue ;
91717: GO 91151
// if GetLives ( x ) < 1000 then
91719: LD_VAR 0 10
91723: PPUSH
91724: CALL_OW 256
91728: PUSH
91729: LD_INT 1000
91731: LESS
91732: IFFALSE 91756
// ComRepairVehicle ( group [ i ] , x ) else
91734: LD_VAR 0 4
91738: PUSH
91739: LD_VAR 0 7
91743: ARRAY
91744: PPUSH
91745: LD_VAR 0 10
91749: PPUSH
91750: CALL_OW 129
91754: GO 91804
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
91756: LD_VAR 0 23
91760: PUSH
91761: LD_VAR 0 4
91765: PUSH
91766: LD_VAR 0 7
91770: ARRAY
91771: PPUSH
91772: CALL_OW 256
91776: PUSH
91777: LD_INT 1000
91779: LESS
91780: AND
91781: NOT
91782: IFFALSE 91804
// ComEnterUnit ( group [ i ] , x ) ;
91784: LD_VAR 0 4
91788: PUSH
91789: LD_VAR 0 7
91793: ARRAY
91794: PPUSH
91795: LD_VAR 0 10
91799: PPUSH
91800: CALL_OW 120
// end ; continue ;
91804: GO 91151
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
91806: LD_VAR 0 23
91810: PUSH
91811: LD_VAR 0 4
91815: PUSH
91816: LD_VAR 0 7
91820: ARRAY
91821: PPUSH
91822: CALL_OW 247
91826: PUSH
91827: LD_INT 1
91829: EQUAL
91830: AND
91831: IFFALSE 92309
// begin if group [ i ] in healers then
91833: LD_VAR 0 4
91837: PUSH
91838: LD_VAR 0 7
91842: ARRAY
91843: PUSH
91844: LD_VAR 0 31
91848: IN
91849: IFFALSE 92122
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
91851: LD_VAR 0 4
91855: PUSH
91856: LD_VAR 0 7
91860: ARRAY
91861: PPUSH
91862: LD_VAR 0 23
91866: PPUSH
91867: CALL_OW 308
91871: NOT
91872: PUSH
91873: LD_VAR 0 4
91877: PUSH
91878: LD_VAR 0 7
91882: ARRAY
91883: PPUSH
91884: CALL_OW 314
91888: NOT
91889: AND
91890: IFFALSE 91914
// ComMoveToArea ( group [ i ] , f_heal ) else
91892: LD_VAR 0 4
91896: PUSH
91897: LD_VAR 0 7
91901: ARRAY
91902: PPUSH
91903: LD_VAR 0 23
91907: PPUSH
91908: CALL_OW 113
91912: GO 92120
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
91914: LD_VAR 0 4
91918: PUSH
91919: LD_VAR 0 7
91923: ARRAY
91924: PPUSH
91925: CALL 45826 0 1
91929: PPUSH
91930: CALL_OW 256
91934: PUSH
91935: LD_INT 1000
91937: EQUAL
91938: IFFALSE 91957
// ComStop ( group [ i ] ) else
91940: LD_VAR 0 4
91944: PUSH
91945: LD_VAR 0 7
91949: ARRAY
91950: PPUSH
91951: CALL_OW 141
91955: GO 92120
// if not HasTask ( group [ i ] ) and to_heal then
91957: LD_VAR 0 4
91961: PUSH
91962: LD_VAR 0 7
91966: ARRAY
91967: PPUSH
91968: CALL_OW 314
91972: NOT
91973: PUSH
91974: LD_VAR 0 30
91978: AND
91979: IFFALSE 92120
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
91981: LD_ADDR_VAR 0 13
91985: PUSH
91986: LD_VAR 0 30
91990: PPUSH
91991: LD_INT 3
91993: PUSH
91994: LD_INT 54
91996: PUSH
91997: EMPTY
91998: LIST
91999: PUSH
92000: EMPTY
92001: LIST
92002: LIST
92003: PPUSH
92004: CALL_OW 72
92008: PPUSH
92009: LD_VAR 0 4
92013: PUSH
92014: LD_VAR 0 7
92018: ARRAY
92019: PPUSH
92020: CALL_OW 74
92024: ST_TO_ADDR
// if z then
92025: LD_VAR 0 13
92029: IFFALSE 92120
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
92031: LD_INT 91
92033: PUSH
92034: LD_VAR 0 13
92038: PUSH
92039: LD_INT 10
92041: PUSH
92042: EMPTY
92043: LIST
92044: LIST
92045: LIST
92046: PUSH
92047: LD_INT 81
92049: PUSH
92050: LD_VAR 0 13
92054: PPUSH
92055: CALL_OW 255
92059: PUSH
92060: EMPTY
92061: LIST
92062: LIST
92063: PUSH
92064: EMPTY
92065: LIST
92066: LIST
92067: PPUSH
92068: CALL_OW 69
92072: PUSH
92073: LD_INT 0
92075: EQUAL
92076: IFFALSE 92100
// ComHeal ( group [ i ] , z ) else
92078: LD_VAR 0 4
92082: PUSH
92083: LD_VAR 0 7
92087: ARRAY
92088: PPUSH
92089: LD_VAR 0 13
92093: PPUSH
92094: CALL_OW 128
92098: GO 92120
// ComMoveToArea ( group [ i ] , f_heal ) ;
92100: LD_VAR 0 4
92104: PUSH
92105: LD_VAR 0 7
92109: ARRAY
92110: PPUSH
92111: LD_VAR 0 23
92115: PPUSH
92116: CALL_OW 113
// end ; continue ;
92120: GO 91151
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
92122: LD_VAR 0 4
92126: PUSH
92127: LD_VAR 0 7
92131: ARRAY
92132: PPUSH
92133: CALL_OW 256
92137: PUSH
92138: LD_INT 700
92140: LESS
92141: PUSH
92142: LD_VAR 0 4
92146: PUSH
92147: LD_VAR 0 7
92151: ARRAY
92152: PUSH
92153: LD_VAR 0 30
92157: IN
92158: NOT
92159: AND
92160: IFFALSE 92184
// to_heal := to_heal union group [ i ] ;
92162: LD_ADDR_VAR 0 30
92166: PUSH
92167: LD_VAR 0 30
92171: PUSH
92172: LD_VAR 0 4
92176: PUSH
92177: LD_VAR 0 7
92181: ARRAY
92182: UNION
92183: ST_TO_ADDR
// if group [ i ] in to_heal then
92184: LD_VAR 0 4
92188: PUSH
92189: LD_VAR 0 7
92193: ARRAY
92194: PUSH
92195: LD_VAR 0 30
92199: IN
92200: IFFALSE 92309
// begin if GetLives ( group [ i ] ) = 1000 then
92202: LD_VAR 0 4
92206: PUSH
92207: LD_VAR 0 7
92211: ARRAY
92212: PPUSH
92213: CALL_OW 256
92217: PUSH
92218: LD_INT 1000
92220: EQUAL
92221: IFFALSE 92247
// to_heal := to_heal diff group [ i ] else
92223: LD_ADDR_VAR 0 30
92227: PUSH
92228: LD_VAR 0 30
92232: PUSH
92233: LD_VAR 0 4
92237: PUSH
92238: LD_VAR 0 7
92242: ARRAY
92243: DIFF
92244: ST_TO_ADDR
92245: GO 92309
// begin if not IsInArea ( group [ i ] , to_heal ) then
92247: LD_VAR 0 4
92251: PUSH
92252: LD_VAR 0 7
92256: ARRAY
92257: PPUSH
92258: LD_VAR 0 30
92262: PPUSH
92263: CALL_OW 308
92267: NOT
92268: IFFALSE 92292
// ComMoveToArea ( group [ i ] , f_heal ) else
92270: LD_VAR 0 4
92274: PUSH
92275: LD_VAR 0 7
92279: ARRAY
92280: PPUSH
92281: LD_VAR 0 23
92285: PPUSH
92286: CALL_OW 113
92290: GO 92307
// ComHold ( group [ i ] ) ;
92292: LD_VAR 0 4
92296: PUSH
92297: LD_VAR 0 7
92301: ARRAY
92302: PPUSH
92303: CALL_OW 140
// continue ;
92307: GO 91151
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
92309: LD_VAR 0 4
92313: PUSH
92314: LD_VAR 0 7
92318: ARRAY
92319: PPUSH
92320: LD_INT 10
92322: PPUSH
92323: CALL 44246 0 2
92327: NOT
92328: PUSH
92329: LD_VAR 0 16
92333: PUSH
92334: LD_VAR 0 7
92338: ARRAY
92339: PUSH
92340: EMPTY
92341: EQUAL
92342: NOT
92343: AND
92344: IFFALSE 92610
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
92346: LD_VAR 0 4
92350: PUSH
92351: LD_VAR 0 7
92355: ARRAY
92356: PPUSH
92357: CALL_OW 262
92361: PUSH
92362: LD_INT 1
92364: PUSH
92365: LD_INT 2
92367: PUSH
92368: EMPTY
92369: LIST
92370: LIST
92371: IN
92372: IFFALSE 92413
// if GetFuel ( group [ i ] ) < 10 then
92374: LD_VAR 0 4
92378: PUSH
92379: LD_VAR 0 7
92383: ARRAY
92384: PPUSH
92385: CALL_OW 261
92389: PUSH
92390: LD_INT 10
92392: LESS
92393: IFFALSE 92413
// SetFuel ( group [ i ] , 12 ) ;
92395: LD_VAR 0 4
92399: PUSH
92400: LD_VAR 0 7
92404: ARRAY
92405: PPUSH
92406: LD_INT 12
92408: PPUSH
92409: CALL_OW 240
// if units_path [ i ] then
92413: LD_VAR 0 16
92417: PUSH
92418: LD_VAR 0 7
92422: ARRAY
92423: IFFALSE 92608
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
92425: LD_VAR 0 4
92429: PUSH
92430: LD_VAR 0 7
92434: ARRAY
92435: PPUSH
92436: LD_VAR 0 16
92440: PUSH
92441: LD_VAR 0 7
92445: ARRAY
92446: PUSH
92447: LD_INT 1
92449: ARRAY
92450: PUSH
92451: LD_INT 1
92453: ARRAY
92454: PPUSH
92455: LD_VAR 0 16
92459: PUSH
92460: LD_VAR 0 7
92464: ARRAY
92465: PUSH
92466: LD_INT 1
92468: ARRAY
92469: PUSH
92470: LD_INT 2
92472: ARRAY
92473: PPUSH
92474: CALL_OW 297
92478: PUSH
92479: LD_INT 6
92481: GREATER
92482: IFFALSE 92557
// begin if not HasTask ( group [ i ] ) then
92484: LD_VAR 0 4
92488: PUSH
92489: LD_VAR 0 7
92493: ARRAY
92494: PPUSH
92495: CALL_OW 314
92499: NOT
92500: IFFALSE 92555
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
92502: LD_VAR 0 4
92506: PUSH
92507: LD_VAR 0 7
92511: ARRAY
92512: PPUSH
92513: LD_VAR 0 16
92517: PUSH
92518: LD_VAR 0 7
92522: ARRAY
92523: PUSH
92524: LD_INT 1
92526: ARRAY
92527: PUSH
92528: LD_INT 1
92530: ARRAY
92531: PPUSH
92532: LD_VAR 0 16
92536: PUSH
92537: LD_VAR 0 7
92541: ARRAY
92542: PUSH
92543: LD_INT 1
92545: ARRAY
92546: PUSH
92547: LD_INT 2
92549: ARRAY
92550: PPUSH
92551: CALL_OW 114
// end else
92555: GO 92608
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
92557: LD_ADDR_VAR 0 15
92561: PUSH
92562: LD_VAR 0 16
92566: PUSH
92567: LD_VAR 0 7
92571: ARRAY
92572: PPUSH
92573: LD_INT 1
92575: PPUSH
92576: CALL_OW 3
92580: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
92581: LD_ADDR_VAR 0 16
92585: PUSH
92586: LD_VAR 0 16
92590: PPUSH
92591: LD_VAR 0 7
92595: PPUSH
92596: LD_VAR 0 15
92600: PPUSH
92601: CALL_OW 1
92605: ST_TO_ADDR
// continue ;
92606: GO 91151
// end ; end ; end else
92608: GO 95272
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
92610: LD_ADDR_VAR 0 14
92614: PUSH
92615: LD_INT 81
92617: PUSH
92618: LD_VAR 0 4
92622: PUSH
92623: LD_VAR 0 7
92627: ARRAY
92628: PPUSH
92629: CALL_OW 255
92633: PUSH
92634: EMPTY
92635: LIST
92636: LIST
92637: PPUSH
92638: CALL_OW 69
92642: ST_TO_ADDR
// if not tmp then
92643: LD_VAR 0 14
92647: NOT
92648: IFFALSE 92652
// continue ;
92650: GO 91151
// if f_ignore_area then
92652: LD_VAR 0 17
92656: IFFALSE 92744
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
92658: LD_ADDR_VAR 0 15
92662: PUSH
92663: LD_VAR 0 14
92667: PPUSH
92668: LD_INT 3
92670: PUSH
92671: LD_INT 92
92673: PUSH
92674: LD_VAR 0 17
92678: PUSH
92679: LD_INT 1
92681: ARRAY
92682: PUSH
92683: LD_VAR 0 17
92687: PUSH
92688: LD_INT 2
92690: ARRAY
92691: PUSH
92692: LD_VAR 0 17
92696: PUSH
92697: LD_INT 3
92699: ARRAY
92700: PUSH
92701: EMPTY
92702: LIST
92703: LIST
92704: LIST
92705: LIST
92706: PUSH
92707: EMPTY
92708: LIST
92709: LIST
92710: PPUSH
92711: CALL_OW 72
92715: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
92716: LD_VAR 0 14
92720: PUSH
92721: LD_VAR 0 15
92725: DIFF
92726: IFFALSE 92744
// tmp := tmp diff tmp2 ;
92728: LD_ADDR_VAR 0 14
92732: PUSH
92733: LD_VAR 0 14
92737: PUSH
92738: LD_VAR 0 15
92742: DIFF
92743: ST_TO_ADDR
// end ; if not f_murder then
92744: LD_VAR 0 20
92748: NOT
92749: IFFALSE 92807
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
92751: LD_ADDR_VAR 0 15
92755: PUSH
92756: LD_VAR 0 14
92760: PPUSH
92761: LD_INT 3
92763: PUSH
92764: LD_INT 50
92766: PUSH
92767: EMPTY
92768: LIST
92769: PUSH
92770: EMPTY
92771: LIST
92772: LIST
92773: PPUSH
92774: CALL_OW 72
92778: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
92779: LD_VAR 0 14
92783: PUSH
92784: LD_VAR 0 15
92788: DIFF
92789: IFFALSE 92807
// tmp := tmp diff tmp2 ;
92791: LD_ADDR_VAR 0 14
92795: PUSH
92796: LD_VAR 0 14
92800: PUSH
92801: LD_VAR 0 15
92805: DIFF
92806: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
92807: LD_ADDR_VAR 0 14
92811: PUSH
92812: LD_VAR 0 4
92816: PUSH
92817: LD_VAR 0 7
92821: ARRAY
92822: PPUSH
92823: LD_VAR 0 14
92827: PPUSH
92828: LD_INT 1
92830: PPUSH
92831: LD_INT 1
92833: PPUSH
92834: CALL 17889 0 4
92838: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
92839: LD_VAR 0 4
92843: PUSH
92844: LD_VAR 0 7
92848: ARRAY
92849: PPUSH
92850: CALL_OW 257
92854: PUSH
92855: LD_INT 1
92857: EQUAL
92858: IFFALSE 93306
// begin if WantPlant ( group [ i ] ) then
92860: LD_VAR 0 4
92864: PUSH
92865: LD_VAR 0 7
92869: ARRAY
92870: PPUSH
92871: CALL 17390 0 1
92875: IFFALSE 92879
// continue ;
92877: GO 91151
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
92879: LD_VAR 0 18
92883: PUSH
92884: LD_VAR 0 4
92888: PUSH
92889: LD_VAR 0 7
92893: ARRAY
92894: PPUSH
92895: CALL_OW 310
92899: NOT
92900: AND
92901: PUSH
92902: LD_VAR 0 14
92906: PUSH
92907: LD_INT 1
92909: ARRAY
92910: PUSH
92911: LD_VAR 0 14
92915: PPUSH
92916: LD_INT 21
92918: PUSH
92919: LD_INT 2
92921: PUSH
92922: EMPTY
92923: LIST
92924: LIST
92925: PUSH
92926: LD_INT 58
92928: PUSH
92929: EMPTY
92930: LIST
92931: PUSH
92932: EMPTY
92933: LIST
92934: LIST
92935: PPUSH
92936: CALL_OW 72
92940: IN
92941: AND
92942: IFFALSE 92978
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
92944: LD_VAR 0 4
92948: PUSH
92949: LD_VAR 0 7
92953: ARRAY
92954: PPUSH
92955: LD_VAR 0 14
92959: PUSH
92960: LD_INT 1
92962: ARRAY
92963: PPUSH
92964: CALL_OW 120
// attacking := true ;
92968: LD_ADDR_VAR 0 29
92972: PUSH
92973: LD_INT 1
92975: ST_TO_ADDR
// continue ;
92976: GO 91151
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
92978: LD_VAR 0 26
92982: PUSH
92983: LD_VAR 0 4
92987: PUSH
92988: LD_VAR 0 7
92992: ARRAY
92993: PPUSH
92994: CALL_OW 257
92998: PUSH
92999: LD_INT 1
93001: EQUAL
93002: AND
93003: PUSH
93004: LD_VAR 0 4
93008: PUSH
93009: LD_VAR 0 7
93013: ARRAY
93014: PPUSH
93015: CALL_OW 256
93019: PUSH
93020: LD_INT 800
93022: LESS
93023: AND
93024: PUSH
93025: LD_VAR 0 4
93029: PUSH
93030: LD_VAR 0 7
93034: ARRAY
93035: PPUSH
93036: CALL_OW 318
93040: NOT
93041: AND
93042: IFFALSE 93059
// ComCrawl ( group [ i ] ) ;
93044: LD_VAR 0 4
93048: PUSH
93049: LD_VAR 0 7
93053: ARRAY
93054: PPUSH
93055: CALL_OW 137
// if f_mines then
93059: LD_VAR 0 21
93063: IFFALSE 93306
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
93065: LD_VAR 0 14
93069: PUSH
93070: LD_INT 1
93072: ARRAY
93073: PPUSH
93074: CALL_OW 247
93078: PUSH
93079: LD_INT 3
93081: EQUAL
93082: PUSH
93083: LD_VAR 0 14
93087: PUSH
93088: LD_INT 1
93090: ARRAY
93091: PUSH
93092: LD_VAR 0 27
93096: IN
93097: NOT
93098: AND
93099: IFFALSE 93306
// begin x := GetX ( tmp [ 1 ] ) ;
93101: LD_ADDR_VAR 0 10
93105: PUSH
93106: LD_VAR 0 14
93110: PUSH
93111: LD_INT 1
93113: ARRAY
93114: PPUSH
93115: CALL_OW 250
93119: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
93120: LD_ADDR_VAR 0 11
93124: PUSH
93125: LD_VAR 0 14
93129: PUSH
93130: LD_INT 1
93132: ARRAY
93133: PPUSH
93134: CALL_OW 251
93138: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
93139: LD_ADDR_VAR 0 12
93143: PUSH
93144: LD_VAR 0 4
93148: PUSH
93149: LD_VAR 0 7
93153: ARRAY
93154: PPUSH
93155: CALL 44331 0 1
93159: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
93160: LD_VAR 0 4
93164: PUSH
93165: LD_VAR 0 7
93169: ARRAY
93170: PPUSH
93171: LD_VAR 0 10
93175: PPUSH
93176: LD_VAR 0 11
93180: PPUSH
93181: LD_VAR 0 14
93185: PUSH
93186: LD_INT 1
93188: ARRAY
93189: PPUSH
93190: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
93194: LD_VAR 0 4
93198: PUSH
93199: LD_VAR 0 7
93203: ARRAY
93204: PPUSH
93205: LD_VAR 0 10
93209: PPUSH
93210: LD_VAR 0 12
93214: PPUSH
93215: LD_INT 7
93217: PPUSH
93218: CALL_OW 272
93222: PPUSH
93223: LD_VAR 0 11
93227: PPUSH
93228: LD_VAR 0 12
93232: PPUSH
93233: LD_INT 7
93235: PPUSH
93236: CALL_OW 273
93240: PPUSH
93241: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
93245: LD_VAR 0 4
93249: PUSH
93250: LD_VAR 0 7
93254: ARRAY
93255: PPUSH
93256: LD_INT 71
93258: PPUSH
93259: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
93263: LD_ADDR_VAR 0 27
93267: PUSH
93268: LD_VAR 0 27
93272: PPUSH
93273: LD_VAR 0 27
93277: PUSH
93278: LD_INT 1
93280: PLUS
93281: PPUSH
93282: LD_VAR 0 14
93286: PUSH
93287: LD_INT 1
93289: ARRAY
93290: PPUSH
93291: CALL_OW 1
93295: ST_TO_ADDR
// attacking := true ;
93296: LD_ADDR_VAR 0 29
93300: PUSH
93301: LD_INT 1
93303: ST_TO_ADDR
// continue ;
93304: GO 91151
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
93306: LD_VAR 0 4
93310: PUSH
93311: LD_VAR 0 7
93315: ARRAY
93316: PPUSH
93317: CALL_OW 257
93321: PUSH
93322: LD_INT 17
93324: EQUAL
93325: PUSH
93326: LD_VAR 0 4
93330: PUSH
93331: LD_VAR 0 7
93335: ARRAY
93336: PPUSH
93337: CALL_OW 110
93341: PUSH
93342: LD_INT 71
93344: EQUAL
93345: NOT
93346: AND
93347: IFFALSE 93493
// begin attacking := false ;
93349: LD_ADDR_VAR 0 29
93353: PUSH
93354: LD_INT 0
93356: ST_TO_ADDR
// k := 5 ;
93357: LD_ADDR_VAR 0 9
93361: PUSH
93362: LD_INT 5
93364: ST_TO_ADDR
// if tmp < k then
93365: LD_VAR 0 14
93369: PUSH
93370: LD_VAR 0 9
93374: LESS
93375: IFFALSE 93387
// k := tmp ;
93377: LD_ADDR_VAR 0 9
93381: PUSH
93382: LD_VAR 0 14
93386: ST_TO_ADDR
// for j = 1 to k do
93387: LD_ADDR_VAR 0 8
93391: PUSH
93392: DOUBLE
93393: LD_INT 1
93395: DEC
93396: ST_TO_ADDR
93397: LD_VAR 0 9
93401: PUSH
93402: FOR_TO
93403: IFFALSE 93491
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
93405: LD_VAR 0 14
93409: PUSH
93410: LD_VAR 0 8
93414: ARRAY
93415: PUSH
93416: LD_VAR 0 14
93420: PPUSH
93421: LD_INT 58
93423: PUSH
93424: EMPTY
93425: LIST
93426: PPUSH
93427: CALL_OW 72
93431: IN
93432: NOT
93433: IFFALSE 93489
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
93435: LD_VAR 0 4
93439: PUSH
93440: LD_VAR 0 7
93444: ARRAY
93445: PPUSH
93446: LD_VAR 0 14
93450: PUSH
93451: LD_VAR 0 8
93455: ARRAY
93456: PPUSH
93457: CALL_OW 115
// attacking := true ;
93461: LD_ADDR_VAR 0 29
93465: PUSH
93466: LD_INT 1
93468: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
93469: LD_VAR 0 4
93473: PUSH
93474: LD_VAR 0 7
93478: ARRAY
93479: PPUSH
93480: LD_INT 71
93482: PPUSH
93483: CALL_OW 109
// continue ;
93487: GO 93402
// end ; end ;
93489: GO 93402
93491: POP
93492: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
93493: LD_VAR 0 4
93497: PUSH
93498: LD_VAR 0 7
93502: ARRAY
93503: PPUSH
93504: CALL_OW 257
93508: PUSH
93509: LD_INT 8
93511: EQUAL
93512: PUSH
93513: LD_VAR 0 4
93517: PUSH
93518: LD_VAR 0 7
93522: ARRAY
93523: PPUSH
93524: CALL_OW 264
93528: PUSH
93529: LD_INT 28
93531: PUSH
93532: LD_INT 45
93534: PUSH
93535: LD_INT 7
93537: PUSH
93538: LD_INT 47
93540: PUSH
93541: EMPTY
93542: LIST
93543: LIST
93544: LIST
93545: LIST
93546: IN
93547: OR
93548: IFFALSE 93804
// begin attacking := false ;
93550: LD_ADDR_VAR 0 29
93554: PUSH
93555: LD_INT 0
93557: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
93558: LD_VAR 0 14
93562: PUSH
93563: LD_INT 1
93565: ARRAY
93566: PPUSH
93567: CALL_OW 266
93571: PUSH
93572: LD_INT 32
93574: PUSH
93575: LD_INT 31
93577: PUSH
93578: LD_INT 33
93580: PUSH
93581: LD_INT 4
93583: PUSH
93584: LD_INT 5
93586: PUSH
93587: EMPTY
93588: LIST
93589: LIST
93590: LIST
93591: LIST
93592: LIST
93593: IN
93594: IFFALSE 93780
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
93596: LD_ADDR_VAR 0 9
93600: PUSH
93601: LD_VAR 0 14
93605: PUSH
93606: LD_INT 1
93608: ARRAY
93609: PPUSH
93610: CALL_OW 266
93614: PPUSH
93615: LD_VAR 0 14
93619: PUSH
93620: LD_INT 1
93622: ARRAY
93623: PPUSH
93624: CALL_OW 250
93628: PPUSH
93629: LD_VAR 0 14
93633: PUSH
93634: LD_INT 1
93636: ARRAY
93637: PPUSH
93638: CALL_OW 251
93642: PPUSH
93643: LD_VAR 0 14
93647: PUSH
93648: LD_INT 1
93650: ARRAY
93651: PPUSH
93652: CALL_OW 254
93656: PPUSH
93657: LD_VAR 0 14
93661: PUSH
93662: LD_INT 1
93664: ARRAY
93665: PPUSH
93666: CALL_OW 248
93670: PPUSH
93671: LD_INT 0
93673: PPUSH
93674: CALL 25701 0 6
93678: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
93679: LD_ADDR_VAR 0 8
93683: PUSH
93684: LD_VAR 0 4
93688: PUSH
93689: LD_VAR 0 7
93693: ARRAY
93694: PPUSH
93695: LD_VAR 0 9
93699: PPUSH
93700: CALL 44371 0 2
93704: ST_TO_ADDR
// if j then
93705: LD_VAR 0 8
93709: IFFALSE 93778
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
93711: LD_VAR 0 8
93715: PUSH
93716: LD_INT 1
93718: ARRAY
93719: PPUSH
93720: LD_VAR 0 8
93724: PUSH
93725: LD_INT 2
93727: ARRAY
93728: PPUSH
93729: CALL_OW 488
93733: IFFALSE 93778
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
93735: LD_VAR 0 4
93739: PUSH
93740: LD_VAR 0 7
93744: ARRAY
93745: PPUSH
93746: LD_VAR 0 8
93750: PUSH
93751: LD_INT 1
93753: ARRAY
93754: PPUSH
93755: LD_VAR 0 8
93759: PUSH
93760: LD_INT 2
93762: ARRAY
93763: PPUSH
93764: CALL_OW 116
// attacking := true ;
93768: LD_ADDR_VAR 0 29
93772: PUSH
93773: LD_INT 1
93775: ST_TO_ADDR
// continue ;
93776: GO 91151
// end ; end else
93778: GO 93804
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
93780: LD_VAR 0 4
93784: PUSH
93785: LD_VAR 0 7
93789: ARRAY
93790: PPUSH
93791: LD_VAR 0 14
93795: PUSH
93796: LD_INT 1
93798: ARRAY
93799: PPUSH
93800: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
93804: LD_VAR 0 4
93808: PUSH
93809: LD_VAR 0 7
93813: ARRAY
93814: PPUSH
93815: CALL_OW 265
93819: PUSH
93820: LD_INT 11
93822: EQUAL
93823: IFFALSE 94101
// begin k := 10 ;
93825: LD_ADDR_VAR 0 9
93829: PUSH
93830: LD_INT 10
93832: ST_TO_ADDR
// x := 0 ;
93833: LD_ADDR_VAR 0 10
93837: PUSH
93838: LD_INT 0
93840: ST_TO_ADDR
// if tmp < k then
93841: LD_VAR 0 14
93845: PUSH
93846: LD_VAR 0 9
93850: LESS
93851: IFFALSE 93863
// k := tmp ;
93853: LD_ADDR_VAR 0 9
93857: PUSH
93858: LD_VAR 0 14
93862: ST_TO_ADDR
// for j = k downto 1 do
93863: LD_ADDR_VAR 0 8
93867: PUSH
93868: DOUBLE
93869: LD_VAR 0 9
93873: INC
93874: ST_TO_ADDR
93875: LD_INT 1
93877: PUSH
93878: FOR_DOWNTO
93879: IFFALSE 93954
// begin if GetType ( tmp [ j ] ) = unit_human then
93881: LD_VAR 0 14
93885: PUSH
93886: LD_VAR 0 8
93890: ARRAY
93891: PPUSH
93892: CALL_OW 247
93896: PUSH
93897: LD_INT 1
93899: EQUAL
93900: IFFALSE 93952
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
93902: LD_VAR 0 4
93906: PUSH
93907: LD_VAR 0 7
93911: ARRAY
93912: PPUSH
93913: LD_VAR 0 14
93917: PUSH
93918: LD_VAR 0 8
93922: ARRAY
93923: PPUSH
93924: CALL 44642 0 2
// x := tmp [ j ] ;
93928: LD_ADDR_VAR 0 10
93932: PUSH
93933: LD_VAR 0 14
93937: PUSH
93938: LD_VAR 0 8
93942: ARRAY
93943: ST_TO_ADDR
// attacking := true ;
93944: LD_ADDR_VAR 0 29
93948: PUSH
93949: LD_INT 1
93951: ST_TO_ADDR
// end ; end ;
93952: GO 93878
93954: POP
93955: POP
// if not x then
93956: LD_VAR 0 10
93960: NOT
93961: IFFALSE 94101
// begin attacking := true ;
93963: LD_ADDR_VAR 0 29
93967: PUSH
93968: LD_INT 1
93970: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
93971: LD_VAR 0 4
93975: PUSH
93976: LD_VAR 0 7
93980: ARRAY
93981: PPUSH
93982: CALL_OW 250
93986: PPUSH
93987: LD_VAR 0 4
93991: PUSH
93992: LD_VAR 0 7
93996: ARRAY
93997: PPUSH
93998: CALL_OW 251
94002: PPUSH
94003: CALL_OW 546
94007: PUSH
94008: LD_INT 2
94010: ARRAY
94011: PUSH
94012: LD_VAR 0 14
94016: PUSH
94017: LD_INT 1
94019: ARRAY
94020: PPUSH
94021: CALL_OW 250
94025: PPUSH
94026: LD_VAR 0 14
94030: PUSH
94031: LD_INT 1
94033: ARRAY
94034: PPUSH
94035: CALL_OW 251
94039: PPUSH
94040: CALL_OW 546
94044: PUSH
94045: LD_INT 2
94047: ARRAY
94048: EQUAL
94049: IFFALSE 94077
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
94051: LD_VAR 0 4
94055: PUSH
94056: LD_VAR 0 7
94060: ARRAY
94061: PPUSH
94062: LD_VAR 0 14
94066: PUSH
94067: LD_INT 1
94069: ARRAY
94070: PPUSH
94071: CALL 44642 0 2
94075: GO 94101
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
94077: LD_VAR 0 4
94081: PUSH
94082: LD_VAR 0 7
94086: ARRAY
94087: PPUSH
94088: LD_VAR 0 14
94092: PUSH
94093: LD_INT 1
94095: ARRAY
94096: PPUSH
94097: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
94101: LD_VAR 0 4
94105: PUSH
94106: LD_VAR 0 7
94110: ARRAY
94111: PPUSH
94112: CALL_OW 264
94116: PUSH
94117: LD_INT 29
94119: EQUAL
94120: IFFALSE 94486
// begin if WantsToAttack ( group [ i ] ) in bombed then
94122: LD_VAR 0 4
94126: PUSH
94127: LD_VAR 0 7
94131: ARRAY
94132: PPUSH
94133: CALL_OW 319
94137: PUSH
94138: LD_VAR 0 28
94142: IN
94143: IFFALSE 94147
// continue ;
94145: GO 91151
// k := 8 ;
94147: LD_ADDR_VAR 0 9
94151: PUSH
94152: LD_INT 8
94154: ST_TO_ADDR
// x := 0 ;
94155: LD_ADDR_VAR 0 10
94159: PUSH
94160: LD_INT 0
94162: ST_TO_ADDR
// if tmp < k then
94163: LD_VAR 0 14
94167: PUSH
94168: LD_VAR 0 9
94172: LESS
94173: IFFALSE 94185
// k := tmp ;
94175: LD_ADDR_VAR 0 9
94179: PUSH
94180: LD_VAR 0 14
94184: ST_TO_ADDR
// for j = 1 to k do
94185: LD_ADDR_VAR 0 8
94189: PUSH
94190: DOUBLE
94191: LD_INT 1
94193: DEC
94194: ST_TO_ADDR
94195: LD_VAR 0 9
94199: PUSH
94200: FOR_TO
94201: IFFALSE 94333
// begin if GetType ( tmp [ j ] ) = unit_building then
94203: LD_VAR 0 14
94207: PUSH
94208: LD_VAR 0 8
94212: ARRAY
94213: PPUSH
94214: CALL_OW 247
94218: PUSH
94219: LD_INT 3
94221: EQUAL
94222: IFFALSE 94331
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
94224: LD_VAR 0 14
94228: PUSH
94229: LD_VAR 0 8
94233: ARRAY
94234: PUSH
94235: LD_VAR 0 28
94239: IN
94240: NOT
94241: PUSH
94242: LD_VAR 0 14
94246: PUSH
94247: LD_VAR 0 8
94251: ARRAY
94252: PPUSH
94253: CALL_OW 313
94257: AND
94258: IFFALSE 94331
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
94260: LD_VAR 0 4
94264: PUSH
94265: LD_VAR 0 7
94269: ARRAY
94270: PPUSH
94271: LD_VAR 0 14
94275: PUSH
94276: LD_VAR 0 8
94280: ARRAY
94281: PPUSH
94282: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
94286: LD_ADDR_VAR 0 28
94290: PUSH
94291: LD_VAR 0 28
94295: PPUSH
94296: LD_VAR 0 28
94300: PUSH
94301: LD_INT 1
94303: PLUS
94304: PPUSH
94305: LD_VAR 0 14
94309: PUSH
94310: LD_VAR 0 8
94314: ARRAY
94315: PPUSH
94316: CALL_OW 1
94320: ST_TO_ADDR
// attacking := true ;
94321: LD_ADDR_VAR 0 29
94325: PUSH
94326: LD_INT 1
94328: ST_TO_ADDR
// break ;
94329: GO 94333
// end ; end ;
94331: GO 94200
94333: POP
94334: POP
// if not attacking and f_attack_depot then
94335: LD_VAR 0 29
94339: NOT
94340: PUSH
94341: LD_VAR 0 25
94345: AND
94346: IFFALSE 94441
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
94348: LD_ADDR_VAR 0 13
94352: PUSH
94353: LD_VAR 0 14
94357: PPUSH
94358: LD_INT 2
94360: PUSH
94361: LD_INT 30
94363: PUSH
94364: LD_INT 0
94366: PUSH
94367: EMPTY
94368: LIST
94369: LIST
94370: PUSH
94371: LD_INT 30
94373: PUSH
94374: LD_INT 1
94376: PUSH
94377: EMPTY
94378: LIST
94379: LIST
94380: PUSH
94381: EMPTY
94382: LIST
94383: LIST
94384: LIST
94385: PPUSH
94386: CALL_OW 72
94390: ST_TO_ADDR
// if z then
94391: LD_VAR 0 13
94395: IFFALSE 94441
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
94397: LD_VAR 0 4
94401: PUSH
94402: LD_VAR 0 7
94406: ARRAY
94407: PPUSH
94408: LD_VAR 0 13
94412: PPUSH
94413: LD_VAR 0 4
94417: PUSH
94418: LD_VAR 0 7
94422: ARRAY
94423: PPUSH
94424: CALL_OW 74
94428: PPUSH
94429: CALL_OW 115
// attacking := true ;
94433: LD_ADDR_VAR 0 29
94437: PUSH
94438: LD_INT 1
94440: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
94441: LD_VAR 0 4
94445: PUSH
94446: LD_VAR 0 7
94450: ARRAY
94451: PPUSH
94452: CALL_OW 256
94456: PUSH
94457: LD_INT 500
94459: LESS
94460: IFFALSE 94486
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
94462: LD_VAR 0 4
94466: PUSH
94467: LD_VAR 0 7
94471: ARRAY
94472: PPUSH
94473: LD_VAR 0 14
94477: PUSH
94478: LD_INT 1
94480: ARRAY
94481: PPUSH
94482: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
94486: LD_VAR 0 4
94490: PUSH
94491: LD_VAR 0 7
94495: ARRAY
94496: PPUSH
94497: CALL_OW 264
94501: PUSH
94502: LD_INT 49
94504: EQUAL
94505: IFFALSE 94626
// begin if not HasTask ( group [ i ] ) then
94507: LD_VAR 0 4
94511: PUSH
94512: LD_VAR 0 7
94516: ARRAY
94517: PPUSH
94518: CALL_OW 314
94522: NOT
94523: IFFALSE 94626
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
94525: LD_ADDR_VAR 0 9
94529: PUSH
94530: LD_INT 81
94532: PUSH
94533: LD_VAR 0 4
94537: PUSH
94538: LD_VAR 0 7
94542: ARRAY
94543: PPUSH
94544: CALL_OW 255
94548: PUSH
94549: EMPTY
94550: LIST
94551: LIST
94552: PPUSH
94553: CALL_OW 69
94557: PPUSH
94558: LD_VAR 0 4
94562: PUSH
94563: LD_VAR 0 7
94567: ARRAY
94568: PPUSH
94569: CALL_OW 74
94573: ST_TO_ADDR
// if k then
94574: LD_VAR 0 9
94578: IFFALSE 94626
// if GetDistUnits ( group [ i ] , k ) > 10 then
94580: LD_VAR 0 4
94584: PUSH
94585: LD_VAR 0 7
94589: ARRAY
94590: PPUSH
94591: LD_VAR 0 9
94595: PPUSH
94596: CALL_OW 296
94600: PUSH
94601: LD_INT 10
94603: GREATER
94604: IFFALSE 94626
// ComMoveUnit ( group [ i ] , k ) ;
94606: LD_VAR 0 4
94610: PUSH
94611: LD_VAR 0 7
94615: ARRAY
94616: PPUSH
94617: LD_VAR 0 9
94621: PPUSH
94622: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
94626: LD_VAR 0 4
94630: PUSH
94631: LD_VAR 0 7
94635: ARRAY
94636: PPUSH
94637: CALL_OW 256
94641: PUSH
94642: LD_INT 250
94644: LESS
94645: PUSH
94646: LD_VAR 0 4
94650: PUSH
94651: LD_VAR 0 7
94655: ARRAY
94656: PUSH
94657: LD_INT 21
94659: PUSH
94660: LD_INT 2
94662: PUSH
94663: EMPTY
94664: LIST
94665: LIST
94666: PUSH
94667: LD_INT 23
94669: PUSH
94670: LD_INT 2
94672: PUSH
94673: EMPTY
94674: LIST
94675: LIST
94676: PUSH
94677: EMPTY
94678: LIST
94679: LIST
94680: PPUSH
94681: CALL_OW 69
94685: IN
94686: AND
94687: IFFALSE 94812
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
94689: LD_ADDR_VAR 0 9
94693: PUSH
94694: LD_OWVAR 3
94698: PUSH
94699: LD_VAR 0 4
94703: PUSH
94704: LD_VAR 0 7
94708: ARRAY
94709: DIFF
94710: PPUSH
94711: LD_VAR 0 4
94715: PUSH
94716: LD_VAR 0 7
94720: ARRAY
94721: PPUSH
94722: CALL_OW 74
94726: ST_TO_ADDR
// if not k then
94727: LD_VAR 0 9
94731: NOT
94732: IFFALSE 94736
// continue ;
94734: GO 91151
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
94736: LD_VAR 0 9
94740: PUSH
94741: LD_INT 81
94743: PUSH
94744: LD_VAR 0 4
94748: PUSH
94749: LD_VAR 0 7
94753: ARRAY
94754: PPUSH
94755: CALL_OW 255
94759: PUSH
94760: EMPTY
94761: LIST
94762: LIST
94763: PPUSH
94764: CALL_OW 69
94768: IN
94769: PUSH
94770: LD_VAR 0 9
94774: PPUSH
94775: LD_VAR 0 4
94779: PUSH
94780: LD_VAR 0 7
94784: ARRAY
94785: PPUSH
94786: CALL_OW 296
94790: PUSH
94791: LD_INT 5
94793: LESS
94794: AND
94795: IFFALSE 94812
// ComAutodestruct ( group [ i ] ) ;
94797: LD_VAR 0 4
94801: PUSH
94802: LD_VAR 0 7
94806: ARRAY
94807: PPUSH
94808: CALL 44540 0 1
// end ; if f_attack_depot then
94812: LD_VAR 0 25
94816: IFFALSE 94928
// begin k := 6 ;
94818: LD_ADDR_VAR 0 9
94822: PUSH
94823: LD_INT 6
94825: ST_TO_ADDR
// if tmp < k then
94826: LD_VAR 0 14
94830: PUSH
94831: LD_VAR 0 9
94835: LESS
94836: IFFALSE 94848
// k := tmp ;
94838: LD_ADDR_VAR 0 9
94842: PUSH
94843: LD_VAR 0 14
94847: ST_TO_ADDR
// for j = 1 to k do
94848: LD_ADDR_VAR 0 8
94852: PUSH
94853: DOUBLE
94854: LD_INT 1
94856: DEC
94857: ST_TO_ADDR
94858: LD_VAR 0 9
94862: PUSH
94863: FOR_TO
94864: IFFALSE 94926
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
94866: LD_VAR 0 8
94870: PPUSH
94871: CALL_OW 266
94875: PUSH
94876: LD_INT 0
94878: PUSH
94879: LD_INT 1
94881: PUSH
94882: EMPTY
94883: LIST
94884: LIST
94885: IN
94886: IFFALSE 94924
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
94888: LD_VAR 0 4
94892: PUSH
94893: LD_VAR 0 7
94897: ARRAY
94898: PPUSH
94899: LD_VAR 0 14
94903: PUSH
94904: LD_VAR 0 8
94908: ARRAY
94909: PPUSH
94910: CALL_OW 115
// attacking := true ;
94914: LD_ADDR_VAR 0 29
94918: PUSH
94919: LD_INT 1
94921: ST_TO_ADDR
// break ;
94922: GO 94926
// end ;
94924: GO 94863
94926: POP
94927: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
94928: LD_VAR 0 4
94932: PUSH
94933: LD_VAR 0 7
94937: ARRAY
94938: PPUSH
94939: CALL_OW 302
94943: PUSH
94944: LD_VAR 0 29
94948: NOT
94949: AND
94950: IFFALSE 95272
// begin if GetTag ( group [ i ] ) = 71 then
94952: LD_VAR 0 4
94956: PUSH
94957: LD_VAR 0 7
94961: ARRAY
94962: PPUSH
94963: CALL_OW 110
94967: PUSH
94968: LD_INT 71
94970: EQUAL
94971: IFFALSE 95012
// begin if HasTask ( group [ i ] ) then
94973: LD_VAR 0 4
94977: PUSH
94978: LD_VAR 0 7
94982: ARRAY
94983: PPUSH
94984: CALL_OW 314
94988: IFFALSE 94994
// continue else
94990: GO 91151
94992: GO 95012
// SetTag ( group [ i ] , 0 ) ;
94994: LD_VAR 0 4
94998: PUSH
94999: LD_VAR 0 7
95003: ARRAY
95004: PPUSH
95005: LD_INT 0
95007: PPUSH
95008: CALL_OW 109
// end ; k := 8 ;
95012: LD_ADDR_VAR 0 9
95016: PUSH
95017: LD_INT 8
95019: ST_TO_ADDR
// x := 0 ;
95020: LD_ADDR_VAR 0 10
95024: PUSH
95025: LD_INT 0
95027: ST_TO_ADDR
// if tmp < k then
95028: LD_VAR 0 14
95032: PUSH
95033: LD_VAR 0 9
95037: LESS
95038: IFFALSE 95050
// k := tmp ;
95040: LD_ADDR_VAR 0 9
95044: PUSH
95045: LD_VAR 0 14
95049: ST_TO_ADDR
// for j = 1 to k do
95050: LD_ADDR_VAR 0 8
95054: PUSH
95055: DOUBLE
95056: LD_INT 1
95058: DEC
95059: ST_TO_ADDR
95060: LD_VAR 0 9
95064: PUSH
95065: FOR_TO
95066: IFFALSE 95164
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
95068: LD_VAR 0 14
95072: PUSH
95073: LD_VAR 0 8
95077: ARRAY
95078: PPUSH
95079: CALL_OW 247
95083: PUSH
95084: LD_INT 1
95086: EQUAL
95087: PUSH
95088: LD_VAR 0 14
95092: PUSH
95093: LD_VAR 0 8
95097: ARRAY
95098: PPUSH
95099: CALL_OW 256
95103: PUSH
95104: LD_INT 250
95106: LESS
95107: PUSH
95108: LD_VAR 0 20
95112: AND
95113: PUSH
95114: LD_VAR 0 20
95118: NOT
95119: PUSH
95120: LD_VAR 0 14
95124: PUSH
95125: LD_VAR 0 8
95129: ARRAY
95130: PPUSH
95131: CALL_OW 256
95135: PUSH
95136: LD_INT 250
95138: GREATEREQUAL
95139: AND
95140: OR
95141: AND
95142: IFFALSE 95162
// begin x := tmp [ j ] ;
95144: LD_ADDR_VAR 0 10
95148: PUSH
95149: LD_VAR 0 14
95153: PUSH
95154: LD_VAR 0 8
95158: ARRAY
95159: ST_TO_ADDR
// break ;
95160: GO 95164
// end ;
95162: GO 95065
95164: POP
95165: POP
// if x then
95166: LD_VAR 0 10
95170: IFFALSE 95194
// ComAttackUnit ( group [ i ] , x ) else
95172: LD_VAR 0 4
95176: PUSH
95177: LD_VAR 0 7
95181: ARRAY
95182: PPUSH
95183: LD_VAR 0 10
95187: PPUSH
95188: CALL_OW 115
95192: GO 95218
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
95194: LD_VAR 0 4
95198: PUSH
95199: LD_VAR 0 7
95203: ARRAY
95204: PPUSH
95205: LD_VAR 0 14
95209: PUSH
95210: LD_INT 1
95212: ARRAY
95213: PPUSH
95214: CALL_OW 115
// if not HasTask ( group [ i ] ) then
95218: LD_VAR 0 4
95222: PUSH
95223: LD_VAR 0 7
95227: ARRAY
95228: PPUSH
95229: CALL_OW 314
95233: NOT
95234: IFFALSE 95272
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
95236: LD_VAR 0 4
95240: PUSH
95241: LD_VAR 0 7
95245: ARRAY
95246: PPUSH
95247: LD_VAR 0 14
95251: PPUSH
95252: LD_VAR 0 4
95256: PUSH
95257: LD_VAR 0 7
95261: ARRAY
95262: PPUSH
95263: CALL_OW 74
95267: PPUSH
95268: CALL_OW 115
// end ; end ; end ;
95272: GO 91151
95274: POP
95275: POP
// wait ( 0 0$2 ) ;
95276: LD_INT 70
95278: PPUSH
95279: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
95283: LD_VAR 0 4
95287: NOT
95288: PUSH
95289: LD_VAR 0 4
95293: PUSH
95294: EMPTY
95295: EQUAL
95296: OR
95297: PUSH
95298: LD_INT 81
95300: PUSH
95301: LD_VAR 0 35
95305: PUSH
95306: EMPTY
95307: LIST
95308: LIST
95309: PPUSH
95310: CALL_OW 69
95314: NOT
95315: OR
95316: IFFALSE 91136
// end ;
95318: LD_VAR 0 2
95322: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
95323: LD_INT 0
95325: PPUSH
95326: PPUSH
95327: PPUSH
95328: PPUSH
95329: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
95330: LD_VAR 0 1
95334: NOT
95335: PUSH
95336: LD_EXP 63
95340: PUSH
95341: LD_VAR 0 1
95345: ARRAY
95346: NOT
95347: OR
95348: PUSH
95349: LD_VAR 0 2
95353: NOT
95354: OR
95355: PUSH
95356: LD_VAR 0 3
95360: NOT
95361: OR
95362: IFFALSE 95366
// exit ;
95364: GO 95879
// side := mc_sides [ base ] ;
95366: LD_ADDR_VAR 0 6
95370: PUSH
95371: LD_EXP 89
95375: PUSH
95376: LD_VAR 0 1
95380: ARRAY
95381: ST_TO_ADDR
// if not side then
95382: LD_VAR 0 6
95386: NOT
95387: IFFALSE 95391
// exit ;
95389: GO 95879
// for i in solds do
95391: LD_ADDR_VAR 0 7
95395: PUSH
95396: LD_VAR 0 2
95400: PUSH
95401: FOR_IN
95402: IFFALSE 95463
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
95404: LD_VAR 0 7
95408: PPUSH
95409: CALL_OW 310
95413: PPUSH
95414: CALL_OW 266
95418: PUSH
95419: LD_INT 32
95421: PUSH
95422: LD_INT 31
95424: PUSH
95425: EMPTY
95426: LIST
95427: LIST
95428: IN
95429: IFFALSE 95449
// solds := solds diff i else
95431: LD_ADDR_VAR 0 2
95435: PUSH
95436: LD_VAR 0 2
95440: PUSH
95441: LD_VAR 0 7
95445: DIFF
95446: ST_TO_ADDR
95447: GO 95461
// SetTag ( i , 18 ) ;
95449: LD_VAR 0 7
95453: PPUSH
95454: LD_INT 18
95456: PPUSH
95457: CALL_OW 109
95461: GO 95401
95463: POP
95464: POP
// if not solds then
95465: LD_VAR 0 2
95469: NOT
95470: IFFALSE 95474
// exit ;
95472: GO 95879
// repeat wait ( 0 0$1 ) ;
95474: LD_INT 35
95476: PPUSH
95477: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
95481: LD_ADDR_VAR 0 5
95485: PUSH
95486: LD_VAR 0 6
95490: PPUSH
95491: LD_VAR 0 3
95495: PPUSH
95496: CALL 14255 0 2
95500: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
95501: LD_EXP 63
95505: PUSH
95506: LD_VAR 0 1
95510: ARRAY
95511: NOT
95512: PUSH
95513: LD_EXP 63
95517: PUSH
95518: LD_VAR 0 1
95522: ARRAY
95523: PUSH
95524: EMPTY
95525: EQUAL
95526: OR
95527: IFFALSE 95564
// begin for i in solds do
95529: LD_ADDR_VAR 0 7
95533: PUSH
95534: LD_VAR 0 2
95538: PUSH
95539: FOR_IN
95540: IFFALSE 95553
// ComStop ( i ) ;
95542: LD_VAR 0 7
95546: PPUSH
95547: CALL_OW 141
95551: GO 95539
95553: POP
95554: POP
// solds := [ ] ;
95555: LD_ADDR_VAR 0 2
95559: PUSH
95560: EMPTY
95561: ST_TO_ADDR
// exit ;
95562: GO 95879
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
95564: LD_VAR 0 5
95568: NOT
95569: PUSH
95570: LD_VAR 0 5
95574: PUSH
95575: LD_INT 3
95577: GREATER
95578: OR
95579: PUSH
95580: LD_EXP 85
95584: PUSH
95585: LD_VAR 0 1
95589: ARRAY
95590: OR
95591: IFFALSE 95632
// begin for i in solds do
95593: LD_ADDR_VAR 0 7
95597: PUSH
95598: LD_VAR 0 2
95602: PUSH
95603: FOR_IN
95604: IFFALSE 95628
// if HasTask ( i ) then
95606: LD_VAR 0 7
95610: PPUSH
95611: CALL_OW 314
95615: IFFALSE 95626
// ComStop ( i ) ;
95617: LD_VAR 0 7
95621: PPUSH
95622: CALL_OW 141
95626: GO 95603
95628: POP
95629: POP
// break ;
95630: GO 95867
// end ; for i in solds do
95632: LD_ADDR_VAR 0 7
95636: PUSH
95637: LD_VAR 0 2
95641: PUSH
95642: FOR_IN
95643: IFFALSE 95859
// begin if IsInUnit ( i ) then
95645: LD_VAR 0 7
95649: PPUSH
95650: CALL_OW 310
95654: IFFALSE 95665
// ComExitBuilding ( i ) ;
95656: LD_VAR 0 7
95660: PPUSH
95661: CALL_OW 122
// if GetLives ( i ) > 333 then
95665: LD_VAR 0 7
95669: PPUSH
95670: CALL_OW 256
95674: PUSH
95675: LD_INT 333
95677: GREATER
95678: IFFALSE 95706
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
95680: LD_VAR 0 7
95684: PPUSH
95685: LD_VAR 0 5
95689: PPUSH
95690: LD_VAR 0 7
95694: PPUSH
95695: CALL_OW 74
95699: PPUSH
95700: CALL_OW 115
95704: GO 95857
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
95706: LD_ADDR_VAR 0 8
95710: PUSH
95711: LD_EXP 63
95715: PUSH
95716: LD_VAR 0 1
95720: ARRAY
95721: PPUSH
95722: LD_INT 2
95724: PUSH
95725: LD_INT 30
95727: PUSH
95728: LD_INT 0
95730: PUSH
95731: EMPTY
95732: LIST
95733: LIST
95734: PUSH
95735: LD_INT 30
95737: PUSH
95738: LD_INT 1
95740: PUSH
95741: EMPTY
95742: LIST
95743: LIST
95744: PUSH
95745: LD_INT 30
95747: PUSH
95748: LD_INT 6
95750: PUSH
95751: EMPTY
95752: LIST
95753: LIST
95754: PUSH
95755: EMPTY
95756: LIST
95757: LIST
95758: LIST
95759: LIST
95760: PPUSH
95761: CALL_OW 72
95765: PPUSH
95766: LD_VAR 0 7
95770: PPUSH
95771: CALL_OW 74
95775: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
95776: LD_VAR 0 7
95780: PPUSH
95781: LD_VAR 0 8
95785: PPUSH
95786: CALL_OW 250
95790: PPUSH
95791: LD_INT 3
95793: PPUSH
95794: LD_INT 5
95796: PPUSH
95797: CALL_OW 272
95801: PPUSH
95802: LD_VAR 0 8
95806: PPUSH
95807: CALL_OW 251
95811: PPUSH
95812: LD_INT 3
95814: PPUSH
95815: LD_INT 5
95817: PPUSH
95818: CALL_OW 273
95822: PPUSH
95823: CALL_OW 111
// SetTag ( i , 0 ) ;
95827: LD_VAR 0 7
95831: PPUSH
95832: LD_INT 0
95834: PPUSH
95835: CALL_OW 109
// solds := solds diff i ;
95839: LD_ADDR_VAR 0 2
95843: PUSH
95844: LD_VAR 0 2
95848: PUSH
95849: LD_VAR 0 7
95853: DIFF
95854: ST_TO_ADDR
// continue ;
95855: GO 95642
// end ; end ;
95857: GO 95642
95859: POP
95860: POP
// until solds ;
95861: LD_VAR 0 2
95865: IFFALSE 95474
// MC_Reset ( base , 18 ) ;
95867: LD_VAR 0 1
95871: PPUSH
95872: LD_INT 18
95874: PPUSH
95875: CALL 53042 0 2
// end ;
95879: LD_VAR 0 4
95883: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
95884: LD_INT 0
95886: PPUSH
95887: PPUSH
95888: PPUSH
95889: PPUSH
95890: PPUSH
95891: PPUSH
95892: PPUSH
95893: PPUSH
95894: PPUSH
95895: PPUSH
95896: PPUSH
95897: PPUSH
95898: PPUSH
95899: PPUSH
95900: PPUSH
95901: PPUSH
95902: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
95903: LD_ADDR_VAR 0 13
95907: PUSH
95908: LD_EXP 63
95912: PUSH
95913: LD_VAR 0 1
95917: ARRAY
95918: PPUSH
95919: LD_INT 25
95921: PUSH
95922: LD_INT 3
95924: PUSH
95925: EMPTY
95926: LIST
95927: LIST
95928: PPUSH
95929: CALL_OW 72
95933: ST_TO_ADDR
// if mc_remote_driver [ base ] then
95934: LD_EXP 103
95938: PUSH
95939: LD_VAR 0 1
95943: ARRAY
95944: IFFALSE 95968
// mechs := mechs diff mc_remote_driver [ base ] ;
95946: LD_ADDR_VAR 0 13
95950: PUSH
95951: LD_VAR 0 13
95955: PUSH
95956: LD_EXP 103
95960: PUSH
95961: LD_VAR 0 1
95965: ARRAY
95966: DIFF
95967: ST_TO_ADDR
// for i in mechs do
95968: LD_ADDR_VAR 0 5
95972: PUSH
95973: LD_VAR 0 13
95977: PUSH
95978: FOR_IN
95979: IFFALSE 96014
// if GetTag ( i ) > 0 then
95981: LD_VAR 0 5
95985: PPUSH
95986: CALL_OW 110
95990: PUSH
95991: LD_INT 0
95993: GREATER
95994: IFFALSE 96012
// mechs := mechs diff i ;
95996: LD_ADDR_VAR 0 13
96000: PUSH
96001: LD_VAR 0 13
96005: PUSH
96006: LD_VAR 0 5
96010: DIFF
96011: ST_TO_ADDR
96012: GO 95978
96014: POP
96015: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
96016: LD_ADDR_VAR 0 9
96020: PUSH
96021: LD_EXP 63
96025: PUSH
96026: LD_VAR 0 1
96030: ARRAY
96031: PPUSH
96032: LD_INT 2
96034: PUSH
96035: LD_INT 25
96037: PUSH
96038: LD_INT 1
96040: PUSH
96041: EMPTY
96042: LIST
96043: LIST
96044: PUSH
96045: LD_INT 25
96047: PUSH
96048: LD_INT 5
96050: PUSH
96051: EMPTY
96052: LIST
96053: LIST
96054: PUSH
96055: LD_INT 25
96057: PUSH
96058: LD_INT 8
96060: PUSH
96061: EMPTY
96062: LIST
96063: LIST
96064: PUSH
96065: LD_INT 25
96067: PUSH
96068: LD_INT 9
96070: PUSH
96071: EMPTY
96072: LIST
96073: LIST
96074: PUSH
96075: EMPTY
96076: LIST
96077: LIST
96078: LIST
96079: LIST
96080: LIST
96081: PPUSH
96082: CALL_OW 72
96086: ST_TO_ADDR
// if not defenders and not solds then
96087: LD_VAR 0 2
96091: NOT
96092: PUSH
96093: LD_VAR 0 9
96097: NOT
96098: AND
96099: IFFALSE 96103
// exit ;
96101: GO 97729
// depot_under_attack := false ;
96103: LD_ADDR_VAR 0 17
96107: PUSH
96108: LD_INT 0
96110: ST_TO_ADDR
// sold_defenders := [ ] ;
96111: LD_ADDR_VAR 0 18
96115: PUSH
96116: EMPTY
96117: ST_TO_ADDR
// if mechs then
96118: LD_VAR 0 13
96122: IFFALSE 96251
// for i in defenders do
96124: LD_ADDR_VAR 0 5
96128: PUSH
96129: LD_VAR 0 2
96133: PUSH
96134: FOR_IN
96135: IFFALSE 96249
// begin SetTag ( i , 20 ) ;
96137: LD_VAR 0 5
96141: PPUSH
96142: LD_INT 20
96144: PPUSH
96145: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
96149: LD_VAR 0 5
96153: PPUSH
96154: CALL_OW 263
96158: PUSH
96159: LD_INT 1
96161: EQUAL
96162: PUSH
96163: LD_VAR 0 5
96167: PPUSH
96168: CALL_OW 311
96172: NOT
96173: AND
96174: PUSH
96175: LD_VAR 0 13
96179: AND
96180: IFFALSE 96247
// begin un := mechs [ 1 ] ;
96182: LD_ADDR_VAR 0 11
96186: PUSH
96187: LD_VAR 0 13
96191: PUSH
96192: LD_INT 1
96194: ARRAY
96195: ST_TO_ADDR
// ComExitBuilding ( un ) ;
96196: LD_VAR 0 11
96200: PPUSH
96201: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
96205: LD_VAR 0 11
96209: PPUSH
96210: LD_VAR 0 5
96214: PPUSH
96215: CALL_OW 180
// SetTag ( un , 19 ) ;
96219: LD_VAR 0 11
96223: PPUSH
96224: LD_INT 19
96226: PPUSH
96227: CALL_OW 109
// mechs := mechs diff un ;
96231: LD_ADDR_VAR 0 13
96235: PUSH
96236: LD_VAR 0 13
96240: PUSH
96241: LD_VAR 0 11
96245: DIFF
96246: ST_TO_ADDR
// end ; end ;
96247: GO 96134
96249: POP
96250: POP
// if solds then
96251: LD_VAR 0 9
96255: IFFALSE 96314
// for i in solds do
96257: LD_ADDR_VAR 0 5
96261: PUSH
96262: LD_VAR 0 9
96266: PUSH
96267: FOR_IN
96268: IFFALSE 96312
// if not GetTag ( i ) then
96270: LD_VAR 0 5
96274: PPUSH
96275: CALL_OW 110
96279: NOT
96280: IFFALSE 96310
// begin defenders := defenders union i ;
96282: LD_ADDR_VAR 0 2
96286: PUSH
96287: LD_VAR 0 2
96291: PUSH
96292: LD_VAR 0 5
96296: UNION
96297: ST_TO_ADDR
// SetTag ( i , 18 ) ;
96298: LD_VAR 0 5
96302: PPUSH
96303: LD_INT 18
96305: PPUSH
96306: CALL_OW 109
// end ;
96310: GO 96267
96312: POP
96313: POP
// repeat wait ( 0 0$1 ) ;
96314: LD_INT 35
96316: PPUSH
96317: CALL_OW 67
// enemy := mc_scan [ base ] ;
96321: LD_ADDR_VAR 0 3
96325: PUSH
96326: LD_EXP 86
96330: PUSH
96331: LD_VAR 0 1
96335: ARRAY
96336: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
96337: LD_EXP 63
96341: PUSH
96342: LD_VAR 0 1
96346: ARRAY
96347: NOT
96348: PUSH
96349: LD_EXP 63
96353: PUSH
96354: LD_VAR 0 1
96358: ARRAY
96359: PUSH
96360: EMPTY
96361: EQUAL
96362: OR
96363: IFFALSE 96400
// begin for i in defenders do
96365: LD_ADDR_VAR 0 5
96369: PUSH
96370: LD_VAR 0 2
96374: PUSH
96375: FOR_IN
96376: IFFALSE 96389
// ComStop ( i ) ;
96378: LD_VAR 0 5
96382: PPUSH
96383: CALL_OW 141
96387: GO 96375
96389: POP
96390: POP
// defenders := [ ] ;
96391: LD_ADDR_VAR 0 2
96395: PUSH
96396: EMPTY
96397: ST_TO_ADDR
// exit ;
96398: GO 97729
// end ; for i in defenders do
96400: LD_ADDR_VAR 0 5
96404: PUSH
96405: LD_VAR 0 2
96409: PUSH
96410: FOR_IN
96411: IFFALSE 97229
// begin e := NearestUnitToUnit ( enemy , i ) ;
96413: LD_ADDR_VAR 0 14
96417: PUSH
96418: LD_VAR 0 3
96422: PPUSH
96423: LD_VAR 0 5
96427: PPUSH
96428: CALL_OW 74
96432: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
96433: LD_ADDR_VAR 0 8
96437: PUSH
96438: LD_EXP 63
96442: PUSH
96443: LD_VAR 0 1
96447: ARRAY
96448: PPUSH
96449: LD_INT 2
96451: PUSH
96452: LD_INT 30
96454: PUSH
96455: LD_INT 0
96457: PUSH
96458: EMPTY
96459: LIST
96460: LIST
96461: PUSH
96462: LD_INT 30
96464: PUSH
96465: LD_INT 1
96467: PUSH
96468: EMPTY
96469: LIST
96470: LIST
96471: PUSH
96472: EMPTY
96473: LIST
96474: LIST
96475: LIST
96476: PPUSH
96477: CALL_OW 72
96481: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
96482: LD_ADDR_VAR 0 17
96486: PUSH
96487: LD_VAR 0 8
96491: NOT
96492: PUSH
96493: LD_VAR 0 8
96497: PPUSH
96498: LD_INT 3
96500: PUSH
96501: LD_INT 24
96503: PUSH
96504: LD_INT 600
96506: PUSH
96507: EMPTY
96508: LIST
96509: LIST
96510: PUSH
96511: EMPTY
96512: LIST
96513: LIST
96514: PPUSH
96515: CALL_OW 72
96519: OR
96520: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
96521: LD_VAR 0 5
96525: PPUSH
96526: CALL_OW 247
96530: PUSH
96531: LD_INT 2
96533: DOUBLE
96534: EQUAL
96535: IFTRUE 96539
96537: GO 96935
96539: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
96540: LD_VAR 0 5
96544: PPUSH
96545: CALL_OW 256
96549: PUSH
96550: LD_INT 650
96552: GREATER
96553: PUSH
96554: LD_VAR 0 5
96558: PPUSH
96559: LD_VAR 0 14
96563: PPUSH
96564: CALL_OW 296
96568: PUSH
96569: LD_INT 40
96571: LESS
96572: PUSH
96573: LD_VAR 0 14
96577: PPUSH
96578: LD_EXP 88
96582: PUSH
96583: LD_VAR 0 1
96587: ARRAY
96588: PPUSH
96589: CALL_OW 308
96593: OR
96594: AND
96595: IFFALSE 96717
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
96597: LD_VAR 0 5
96601: PPUSH
96602: CALL_OW 262
96606: PUSH
96607: LD_INT 1
96609: EQUAL
96610: PUSH
96611: LD_VAR 0 5
96615: PPUSH
96616: CALL_OW 261
96620: PUSH
96621: LD_INT 30
96623: LESS
96624: AND
96625: PUSH
96626: LD_VAR 0 8
96630: AND
96631: IFFALSE 96701
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
96633: LD_VAR 0 5
96637: PPUSH
96638: LD_VAR 0 8
96642: PPUSH
96643: LD_VAR 0 5
96647: PPUSH
96648: CALL_OW 74
96652: PPUSH
96653: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
96657: LD_VAR 0 5
96661: PPUSH
96662: LD_VAR 0 8
96666: PPUSH
96667: LD_VAR 0 5
96671: PPUSH
96672: CALL_OW 74
96676: PPUSH
96677: CALL_OW 296
96681: PUSH
96682: LD_INT 6
96684: LESS
96685: IFFALSE 96699
// SetFuel ( i , 100 ) ;
96687: LD_VAR 0 5
96691: PPUSH
96692: LD_INT 100
96694: PPUSH
96695: CALL_OW 240
// end else
96699: GO 96715
// ComAttackUnit ( i , e ) ;
96701: LD_VAR 0 5
96705: PPUSH
96706: LD_VAR 0 14
96710: PPUSH
96711: CALL_OW 115
// end else
96715: GO 96818
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
96717: LD_VAR 0 14
96721: PPUSH
96722: LD_EXP 88
96726: PUSH
96727: LD_VAR 0 1
96731: ARRAY
96732: PPUSH
96733: CALL_OW 308
96737: NOT
96738: PUSH
96739: LD_VAR 0 5
96743: PPUSH
96744: LD_VAR 0 14
96748: PPUSH
96749: CALL_OW 296
96753: PUSH
96754: LD_INT 40
96756: GREATEREQUAL
96757: AND
96758: PUSH
96759: LD_VAR 0 5
96763: PPUSH
96764: CALL_OW 256
96768: PUSH
96769: LD_INT 650
96771: LESSEQUAL
96772: OR
96773: PUSH
96774: LD_VAR 0 5
96778: PPUSH
96779: LD_EXP 87
96783: PUSH
96784: LD_VAR 0 1
96788: ARRAY
96789: PPUSH
96790: CALL_OW 308
96794: NOT
96795: AND
96796: IFFALSE 96818
// ComMoveToArea ( i , mc_parking [ base ] ) ;
96798: LD_VAR 0 5
96802: PPUSH
96803: LD_EXP 87
96807: PUSH
96808: LD_VAR 0 1
96812: ARRAY
96813: PPUSH
96814: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
96818: LD_VAR 0 5
96822: PPUSH
96823: CALL_OW 256
96827: PUSH
96828: LD_INT 998
96830: LESS
96831: PUSH
96832: LD_VAR 0 5
96836: PPUSH
96837: CALL_OW 263
96841: PUSH
96842: LD_INT 1
96844: EQUAL
96845: AND
96846: PUSH
96847: LD_VAR 0 5
96851: PPUSH
96852: CALL_OW 311
96856: AND
96857: PUSH
96858: LD_VAR 0 5
96862: PPUSH
96863: LD_EXP 87
96867: PUSH
96868: LD_VAR 0 1
96872: ARRAY
96873: PPUSH
96874: CALL_OW 308
96878: AND
96879: IFFALSE 96933
// begin mech := IsDrivenBy ( i ) ;
96881: LD_ADDR_VAR 0 10
96885: PUSH
96886: LD_VAR 0 5
96890: PPUSH
96891: CALL_OW 311
96895: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
96896: LD_VAR 0 10
96900: PPUSH
96901: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
96905: LD_VAR 0 10
96909: PPUSH
96910: LD_VAR 0 5
96914: PPUSH
96915: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
96919: LD_VAR 0 10
96923: PPUSH
96924: LD_VAR 0 5
96928: PPUSH
96929: CALL_OW 180
// end ; end ; unit_human :
96933: GO 97200
96935: LD_INT 1
96937: DOUBLE
96938: EQUAL
96939: IFTRUE 96943
96941: GO 97199
96943: POP
// begin b := IsInUnit ( i ) ;
96944: LD_ADDR_VAR 0 19
96948: PUSH
96949: LD_VAR 0 5
96953: PPUSH
96954: CALL_OW 310
96958: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
96959: LD_ADDR_VAR 0 20
96963: PUSH
96964: LD_VAR 0 19
96968: NOT
96969: PUSH
96970: LD_VAR 0 19
96974: PPUSH
96975: CALL_OW 266
96979: PUSH
96980: LD_INT 32
96982: PUSH
96983: LD_INT 31
96985: PUSH
96986: EMPTY
96987: LIST
96988: LIST
96989: IN
96990: OR
96991: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
96992: LD_VAR 0 17
96996: PUSH
96997: LD_VAR 0 2
97001: PPUSH
97002: LD_INT 21
97004: PUSH
97005: LD_INT 2
97007: PUSH
97008: EMPTY
97009: LIST
97010: LIST
97011: PPUSH
97012: CALL_OW 72
97016: PUSH
97017: LD_INT 1
97019: LESSEQUAL
97020: OR
97021: PUSH
97022: LD_VAR 0 20
97026: AND
97027: PUSH
97028: LD_VAR 0 5
97032: PUSH
97033: LD_VAR 0 18
97037: IN
97038: NOT
97039: AND
97040: IFFALSE 97133
// begin if b then
97042: LD_VAR 0 19
97046: IFFALSE 97095
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
97048: LD_VAR 0 19
97052: PPUSH
97053: LD_VAR 0 3
97057: PPUSH
97058: LD_VAR 0 19
97062: PPUSH
97063: CALL_OW 74
97067: PPUSH
97068: CALL_OW 296
97072: PUSH
97073: LD_INT 10
97075: LESS
97076: PUSH
97077: LD_VAR 0 19
97081: PPUSH
97082: CALL_OW 461
97086: PUSH
97087: LD_INT 7
97089: NONEQUAL
97090: AND
97091: IFFALSE 97095
// continue ;
97093: GO 96410
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
97095: LD_ADDR_VAR 0 18
97099: PUSH
97100: LD_VAR 0 18
97104: PPUSH
97105: LD_VAR 0 18
97109: PUSH
97110: LD_INT 1
97112: PLUS
97113: PPUSH
97114: LD_VAR 0 5
97118: PPUSH
97119: CALL_OW 1
97123: ST_TO_ADDR
// ComExitBuilding ( i ) ;
97124: LD_VAR 0 5
97128: PPUSH
97129: CALL_OW 122
// end ; if sold_defenders then
97133: LD_VAR 0 18
97137: IFFALSE 97197
// if i in sold_defenders then
97139: LD_VAR 0 5
97143: PUSH
97144: LD_VAR 0 18
97148: IN
97149: IFFALSE 97197
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
97151: LD_VAR 0 5
97155: PPUSH
97156: CALL_OW 314
97160: NOT
97161: PUSH
97162: LD_VAR 0 5
97166: PPUSH
97167: LD_VAR 0 14
97171: PPUSH
97172: CALL_OW 296
97176: PUSH
97177: LD_INT 30
97179: LESS
97180: AND
97181: IFFALSE 97197
// ComAttackUnit ( i , e ) ;
97183: LD_VAR 0 5
97187: PPUSH
97188: LD_VAR 0 14
97192: PPUSH
97193: CALL_OW 115
// end ; end ; end ;
97197: GO 97200
97199: POP
// if IsDead ( i ) then
97200: LD_VAR 0 5
97204: PPUSH
97205: CALL_OW 301
97209: IFFALSE 97227
// defenders := defenders diff i ;
97211: LD_ADDR_VAR 0 2
97215: PUSH
97216: LD_VAR 0 2
97220: PUSH
97221: LD_VAR 0 5
97225: DIFF
97226: ST_TO_ADDR
// end ;
97227: GO 96410
97229: POP
97230: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
97231: LD_VAR 0 3
97235: NOT
97236: PUSH
97237: LD_VAR 0 2
97241: NOT
97242: OR
97243: PUSH
97244: LD_EXP 63
97248: PUSH
97249: LD_VAR 0 1
97253: ARRAY
97254: NOT
97255: OR
97256: IFFALSE 96314
// MC_Reset ( base , 18 ) ;
97258: LD_VAR 0 1
97262: PPUSH
97263: LD_INT 18
97265: PPUSH
97266: CALL 53042 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
97270: LD_ADDR_VAR 0 2
97274: PUSH
97275: LD_VAR 0 2
97279: PUSH
97280: LD_VAR 0 2
97284: PPUSH
97285: LD_INT 2
97287: PUSH
97288: LD_INT 25
97290: PUSH
97291: LD_INT 1
97293: PUSH
97294: EMPTY
97295: LIST
97296: LIST
97297: PUSH
97298: LD_INT 25
97300: PUSH
97301: LD_INT 5
97303: PUSH
97304: EMPTY
97305: LIST
97306: LIST
97307: PUSH
97308: LD_INT 25
97310: PUSH
97311: LD_INT 8
97313: PUSH
97314: EMPTY
97315: LIST
97316: LIST
97317: PUSH
97318: LD_INT 25
97320: PUSH
97321: LD_INT 9
97323: PUSH
97324: EMPTY
97325: LIST
97326: LIST
97327: PUSH
97328: EMPTY
97329: LIST
97330: LIST
97331: LIST
97332: LIST
97333: LIST
97334: PPUSH
97335: CALL_OW 72
97339: DIFF
97340: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
97341: LD_VAR 0 3
97345: NOT
97346: PUSH
97347: LD_VAR 0 2
97351: PPUSH
97352: LD_INT 21
97354: PUSH
97355: LD_INT 2
97357: PUSH
97358: EMPTY
97359: LIST
97360: LIST
97361: PPUSH
97362: CALL_OW 72
97366: AND
97367: IFFALSE 97705
// begin tmp := FilterByTag ( defenders , 19 ) ;
97369: LD_ADDR_VAR 0 12
97373: PUSH
97374: LD_VAR 0 2
97378: PPUSH
97379: LD_INT 19
97381: PPUSH
97382: CALL 46015 0 2
97386: ST_TO_ADDR
// if tmp then
97387: LD_VAR 0 12
97391: IFFALSE 97461
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
97393: LD_ADDR_VAR 0 12
97397: PUSH
97398: LD_VAR 0 12
97402: PPUSH
97403: LD_INT 25
97405: PUSH
97406: LD_INT 3
97408: PUSH
97409: EMPTY
97410: LIST
97411: LIST
97412: PPUSH
97413: CALL_OW 72
97417: ST_TO_ADDR
// if tmp then
97418: LD_VAR 0 12
97422: IFFALSE 97461
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
97424: LD_ADDR_EXP 75
97428: PUSH
97429: LD_EXP 75
97433: PPUSH
97434: LD_VAR 0 1
97438: PPUSH
97439: LD_EXP 75
97443: PUSH
97444: LD_VAR 0 1
97448: ARRAY
97449: PUSH
97450: LD_VAR 0 12
97454: UNION
97455: PPUSH
97456: CALL_OW 1
97460: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
97461: LD_VAR 0 1
97465: PPUSH
97466: LD_INT 19
97468: PPUSH
97469: CALL 53042 0 2
// repeat wait ( 0 0$1 ) ;
97473: LD_INT 35
97475: PPUSH
97476: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
97480: LD_EXP 63
97484: PUSH
97485: LD_VAR 0 1
97489: ARRAY
97490: NOT
97491: PUSH
97492: LD_EXP 63
97496: PUSH
97497: LD_VAR 0 1
97501: ARRAY
97502: PUSH
97503: EMPTY
97504: EQUAL
97505: OR
97506: IFFALSE 97543
// begin for i in defenders do
97508: LD_ADDR_VAR 0 5
97512: PUSH
97513: LD_VAR 0 2
97517: PUSH
97518: FOR_IN
97519: IFFALSE 97532
// ComStop ( i ) ;
97521: LD_VAR 0 5
97525: PPUSH
97526: CALL_OW 141
97530: GO 97518
97532: POP
97533: POP
// defenders := [ ] ;
97534: LD_ADDR_VAR 0 2
97538: PUSH
97539: EMPTY
97540: ST_TO_ADDR
// exit ;
97541: GO 97729
// end ; for i in defenders do
97543: LD_ADDR_VAR 0 5
97547: PUSH
97548: LD_VAR 0 2
97552: PUSH
97553: FOR_IN
97554: IFFALSE 97643
// begin if not IsInArea ( i , mc_parking [ base ] ) then
97556: LD_VAR 0 5
97560: PPUSH
97561: LD_EXP 87
97565: PUSH
97566: LD_VAR 0 1
97570: ARRAY
97571: PPUSH
97572: CALL_OW 308
97576: NOT
97577: IFFALSE 97601
// ComMoveToArea ( i , mc_parking [ base ] ) else
97579: LD_VAR 0 5
97583: PPUSH
97584: LD_EXP 87
97588: PUSH
97589: LD_VAR 0 1
97593: ARRAY
97594: PPUSH
97595: CALL_OW 113
97599: GO 97641
// if GetControl ( i ) = control_manual then
97601: LD_VAR 0 5
97605: PPUSH
97606: CALL_OW 263
97610: PUSH
97611: LD_INT 1
97613: EQUAL
97614: IFFALSE 97641
// if IsDrivenBy ( i ) then
97616: LD_VAR 0 5
97620: PPUSH
97621: CALL_OW 311
97625: IFFALSE 97641
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
97627: LD_VAR 0 5
97631: PPUSH
97632: CALL_OW 311
97636: PPUSH
97637: CALL_OW 121
// end ;
97641: GO 97553
97643: POP
97644: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
97645: LD_VAR 0 2
97649: PPUSH
97650: LD_INT 95
97652: PUSH
97653: LD_EXP 87
97657: PUSH
97658: LD_VAR 0 1
97662: ARRAY
97663: PUSH
97664: EMPTY
97665: LIST
97666: LIST
97667: PPUSH
97668: CALL_OW 72
97672: PUSH
97673: LD_VAR 0 2
97677: EQUAL
97678: PUSH
97679: LD_EXP 86
97683: PUSH
97684: LD_VAR 0 1
97688: ARRAY
97689: OR
97690: PUSH
97691: LD_EXP 63
97695: PUSH
97696: LD_VAR 0 1
97700: ARRAY
97701: NOT
97702: OR
97703: IFFALSE 97473
// end ; MC_Reset ( base , 19 ) ;
97705: LD_VAR 0 1
97709: PPUSH
97710: LD_INT 19
97712: PPUSH
97713: CALL 53042 0 2
// MC_Reset ( base , 20 ) ;
97717: LD_VAR 0 1
97721: PPUSH
97722: LD_INT 20
97724: PPUSH
97725: CALL 53042 0 2
// end ;
97729: LD_VAR 0 4
97733: RET
