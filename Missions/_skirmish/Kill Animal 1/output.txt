// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 136 , 106 ) ;
   4: LD_INT 136
   6: PPUSH
   7: LD_INT 106
   9: PPUSH
  10: CALL_OW 86
// Init ;
  14: CALL 75 0 0
// CreateNature ( natArea , watArea , [ 10 , 2 * Difficulty , 6 , 6 , 3 * Difficulty , 6 , 4 ] ) ;
  18: LD_INT 2
  20: PPUSH
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 10
  26: PUSH
  27: LD_INT 2
  29: PUSH
  30: LD_OWVAR 67
  34: MUL
  35: PUSH
  36: LD_INT 6
  38: PUSH
  39: LD_INT 6
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: LD_OWVAR 67
  49: MUL
  50: PUSH
  51: LD_INT 6
  53: PUSH
  54: LD_INT 4
  56: PUSH
  57: EMPTY
  58: LIST
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: LIST
  64: LIST
  65: PPUSH
  66: CALL 387 0 3
// PrepareHunters ( ) ;
  70: CALL 233 0 0
// end ;
  74: END
// export debug , hunterClass , huntersAmount , animalAmount ; export points , hunters ; function Init ; begin
  75: LD_INT 0
  77: PPUSH
// debug := 0 ;
  78: LD_ADDR_EXP 1
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// if debug then
  86: LD_EXP 1
  90: IFFALSE 125
// begin FogOff ( 1 ) ;
  92: LD_INT 1
  94: PPUSH
  95: CALL_OW 344
// Difficulty := 2 ;
  99: LD_ADDR_OWVAR 67
 103: PUSH
 104: LD_INT 2
 106: ST_TO_ADDR
// hunterClass := 3 ;
 107: LD_ADDR_EXP 2
 111: PUSH
 112: LD_INT 3
 114: ST_TO_ADDR
// animalAmount := 2 ;
 115: LD_ADDR_EXP 4
 119: PUSH
 120: LD_INT 2
 122: ST_TO_ADDR
// end else
 123: GO 164
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
 125: LD_ADDR_OWVAR 67
 129: PUSH
 130: LD_INT 0
 132: PPUSH
 133: CALL_OW 426
 137: ST_TO_ADDR
// hunterClass := GetMultiplayerSetting ( 2 ) ;
 138: LD_ADDR_EXP 2
 142: PUSH
 143: LD_INT 2
 145: PPUSH
 146: CALL_OW 426
 150: ST_TO_ADDR
// animalAmount := GetMultiplayerSetting ( 1 ) ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 1
 158: PPUSH
 159: CALL_OW 426
 163: ST_TO_ADDR
// end ; huntersAmount := [ 4 , 6 , 8 ] [ Difficulty ] ;
 164: LD_ADDR_EXP 3
 168: PUSH
 169: LD_INT 4
 171: PUSH
 172: LD_INT 6
 174: PUSH
 175: LD_INT 8
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: PUSH
 183: LD_OWVAR 67
 187: ARRAY
 188: ST_TO_ADDR
// points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 189: LD_ADDR_EXP 5
 193: PUSH
 194: LD_INT 0
 196: PUSH
 197: LD_INT 0
 199: PUSH
 200: LD_INT 0
 202: PUSH
 203: LD_INT 0
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: LD_INT 0
 211: PUSH
 212: LD_INT 0
 214: PUSH
 215: LD_INT 0
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: ST_TO_ADDR
// end ;
 228: LD_VAR 0 1
 232: RET
// export function PrepareHunters ; var i , un ; begin
 233: LD_INT 0
 235: PPUSH
 236: PPUSH
 237: PPUSH
// for i := 1 to huntersAmount do
 238: LD_ADDR_VAR 0 2
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_EXP 3
 252: PUSH
 253: FOR_TO
 254: IFFALSE 380
// begin uc_side := i ;
 256: LD_ADDR_OWVAR 20
 260: PUSH
 261: LD_VAR 0 2
 265: ST_TO_ADDR
// uc_nation := i mod 3 + 1 ;
 266: LD_ADDR_OWVAR 21
 270: PUSH
 271: LD_VAR 0 2
 275: PUSH
 276: LD_INT 3
 278: MOD
 279: PUSH
 280: LD_INT 1
 282: PLUS
 283: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_sniper , class_desert_warior ] [ hunterClass ] , 10 - Difficulty * 2 ) ;
 284: LD_INT 0
 286: PPUSH
 287: LD_INT 1
 289: PUSH
 290: LD_INT 5
 292: PUSH
 293: LD_INT 11
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: LIST
 300: PUSH
 301: LD_EXP 2
 305: ARRAY
 306: PPUSH
 307: LD_INT 10
 309: PUSH
 310: LD_OWVAR 67
 314: PUSH
 315: LD_INT 2
 317: MUL
 318: MINUS
 319: PPUSH
 320: CALL_OW 380
// un := CreateHuman ;
 324: LD_ADDR_VAR 0 3
 328: PUSH
 329: CALL_OW 44
 333: ST_TO_ADDR
// hunters := Replace ( hunters , hunters + 1 , un ) ;
 334: LD_ADDR_EXP 6
 338: PUSH
 339: LD_EXP 6
 343: PPUSH
 344: LD_EXP 6
 348: PUSH
 349: LD_INT 1
 351: PLUS
 352: PPUSH
 353: LD_VAR 0 3
 357: PPUSH
 358: CALL_OW 1
 362: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 363: LD_VAR 0 3
 367: PPUSH
 368: LD_INT 4
 370: PPUSH
 371: LD_INT 0
 373: PPUSH
 374: CALL_OW 49
// end ;
 378: GO 253
 380: POP
 381: POP
// end ; end_of_file
 382: LD_VAR 0 1
 386: RET
// export function CreateNature ( area , waterArea , numbers ) ; var i , j , classes , waterClass ; begin
 387: LD_INT 0
 389: PPUSH
 390: PPUSH
 391: PPUSH
 392: PPUSH
 393: PPUSH
// uc_side = 0 ;
 394: LD_ADDR_OWVAR 20
 398: PUSH
 399: LD_INT 0
 401: ST_TO_ADDR
// uc_nation = 0 ;
 402: LD_ADDR_OWVAR 21
 406: PUSH
 407: LD_INT 0
 409: ST_TO_ADDR
// classes := [ class_apeman , class_apeman_soldier , class_baggie , class_phororhacos , class_tiger , class_horse ] ;
 410: LD_ADDR_VAR 0 7
 414: PUSH
 415: LD_INT 12
 417: PUSH
 418: LD_INT 15
 420: PUSH
 421: LD_INT 13
 423: PUSH
 424: LD_INT 18
 426: PUSH
 427: LD_INT 14
 429: PUSH
 430: LD_INT 21
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: ST_TO_ADDR
// waterClass := [ class_fish ] ;
 441: LD_ADDR_VAR 0 8
 445: PUSH
 446: LD_INT 20
 448: PUSH
 449: EMPTY
 450: LIST
 451: ST_TO_ADDR
// InitHc_All ( ) ;
 452: CALL_OW 584
// for i := 1 to numbers - 2 do
 456: LD_ADDR_VAR 0 5
 460: PUSH
 461: DOUBLE
 462: LD_INT 1
 464: DEC
 465: ST_TO_ADDR
 466: LD_VAR 0 3
 470: PUSH
 471: LD_INT 2
 473: MINUS
 474: PUSH
 475: FOR_TO
 476: IFFALSE 617
// begin if numbers [ i ] = 0 then
 478: LD_VAR 0 3
 482: PUSH
 483: LD_VAR 0 5
 487: ARRAY
 488: PUSH
 489: LD_INT 0
 491: EQUAL
 492: IFFALSE 496
// continue ;
 494: GO 475
// hc_class := classes [ i ] ;
 496: LD_ADDR_OWVAR 28
 500: PUSH
 501: LD_VAR 0 7
 505: PUSH
 506: LD_VAR 0 5
 510: ARRAY
 511: ST_TO_ADDR
// hc_attr := [ rand ( 8 , 12 ) , rand ( 8 , 12 ) ] ;
 512: LD_ADDR_OWVAR 29
 516: PUSH
 517: LD_INT 8
 519: PPUSH
 520: LD_INT 12
 522: PPUSH
 523: CALL_OW 12
 527: PUSH
 528: LD_INT 8
 530: PPUSH
 531: LD_INT 12
 533: PPUSH
 534: CALL_OW 12
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) + Difficulty * 5 ;
 543: LD_ADDR_OWVAR 35
 547: PUSH
 548: LD_INT 5
 550: NEG
 551: PPUSH
 552: LD_INT 5
 554: PPUSH
 555: CALL_OW 12
 559: PUSH
 560: LD_OWVAR 67
 564: PUSH
 565: LD_INT 5
 567: MUL
 568: PLUS
 569: ST_TO_ADDR
// for j := 1 to numbers [ i ] do
 570: LD_ADDR_VAR 0 6
 574: PUSH
 575: DOUBLE
 576: LD_INT 1
 578: DEC
 579: ST_TO_ADDR
 580: LD_VAR 0 3
 584: PUSH
 585: LD_VAR 0 5
 589: ARRAY
 590: PUSH
 591: FOR_TO
 592: IFFALSE 613
// PlaceUnitArea ( CreateHuman , area , false ) ;
 594: CALL_OW 44
 598: PPUSH
 599: LD_VAR 0 1
 603: PPUSH
 604: LD_INT 0
 606: PPUSH
 607: CALL_OW 49
 611: GO 591
 613: POP
 614: POP
// end ;
 615: GO 475
 617: POP
 618: POP
// if not waterArea then
 619: LD_VAR 0 2
 623: NOT
 624: IFFALSE 628
// exit ;
 626: GO 708
// hc_class := waterClass [ 1 ] ;
 628: LD_ADDR_OWVAR 28
 632: PUSH
 633: LD_VAR 0 8
 637: PUSH
 638: LD_INT 1
 640: ARRAY
 641: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 642: LD_ADDR_OWVAR 29
 646: PUSH
 647: LD_INT 10
 649: PUSH
 650: LD_INT 10
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: ST_TO_ADDR
// hc_agressivity := 0 ;
 657: LD_ADDR_OWVAR 35
 661: PUSH
 662: LD_INT 0
 664: ST_TO_ADDR
// for j := 1 to numbers [ 7 ] do
 665: LD_ADDR_VAR 0 6
 669: PUSH
 670: DOUBLE
 671: LD_INT 1
 673: DEC
 674: ST_TO_ADDR
 675: LD_VAR 0 3
 679: PUSH
 680: LD_INT 7
 682: ARRAY
 683: PUSH
 684: FOR_TO
 685: IFFALSE 706
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 687: CALL_OW 44
 691: PPUSH
 692: LD_VAR 0 2
 696: PPUSH
 697: LD_INT 0
 699: PPUSH
 700: CALL_OW 49
 704: GO 684
 706: POP
 707: POP
// end ; end_of_file
 708: LD_VAR 0 4
 712: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do var i ;
 713: LD_INT 22
 715: PUSH
 716: LD_INT 0
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: PUSH
 723: LD_INT 25
 725: PUSH
 726: LD_INT 15
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PPUSH
 737: CALL_OW 69
 741: IFFALSE 847
 743: GO 745
 745: DISABLE
 746: LD_INT 0
 748: PPUSH
// begin enable ;
 749: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do
 750: LD_ADDR_VAR 0 1
 754: PUSH
 755: LD_INT 22
 757: PUSH
 758: LD_INT 0
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: PUSH
 765: LD_INT 25
 767: PUSH
 768: LD_INT 15
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PPUSH
 779: CALL_OW 69
 783: PUSH
 784: FOR_IN
 785: IFFALSE 845
// if GetLives ( i ) < 1000 then
 787: LD_VAR 0 1
 791: PPUSH
 792: CALL_OW 256
 796: PUSH
 797: LD_INT 1000
 799: LESS
 800: IFFALSE 843
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , i ) ) ;
 802: LD_VAR 0 1
 806: PPUSH
 807: LD_INT 3
 809: PUSH
 810: LD_INT 22
 812: PUSH
 813: LD_INT 0
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PPUSH
 824: CALL_OW 69
 828: PPUSH
 829: LD_VAR 0 1
 833: PPUSH
 834: CALL_OW 74
 838: PPUSH
 839: CALL_OW 115
 843: GO 784
 845: POP
 846: POP
// end ;
 847: PPOPN 1
 849: END
// every 3 do var i , enemy , x , y , d ;
 850: GO 852
 852: DISABLE
 853: LD_INT 0
 855: PPUSH
 856: PPUSH
 857: PPUSH
 858: PPUSH
 859: PPUSH
// begin enable ;
 860: ENABLE
// for i := 2 to huntersAmount do
 861: LD_ADDR_VAR 0 1
 865: PUSH
 866: DOUBLE
 867: LD_INT 2
 869: DEC
 870: ST_TO_ADDR
 871: LD_EXP 3
 875: PUSH
 876: FOR_TO
 877: IFFALSE 1218
// begin if not HasTask ( hunters [ i ] ) then
 879: LD_EXP 6
 883: PUSH
 884: LD_VAR 0 1
 888: ARRAY
 889: PPUSH
 890: CALL_OW 314
 894: NOT
 895: IFFALSE 1216
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , hunters [ i ] ) ;
 897: LD_ADDR_VAR 0 2
 901: PUSH
 902: LD_INT 22
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PPUSH
 912: CALL_OW 69
 916: PPUSH
 917: LD_EXP 6
 921: PUSH
 922: LD_VAR 0 1
 926: ARRAY
 927: PPUSH
 928: CALL_OW 74
 932: ST_TO_ADDR
// if not enemy then
 933: LD_VAR 0 2
 937: NOT
 938: IFFALSE 942
// continue ;
 940: GO 876
// if GetDistUnits ( hunters [ i ] , enemy ) < 17 then
 942: LD_EXP 6
 946: PUSH
 947: LD_VAR 0 1
 951: ARRAY
 952: PPUSH
 953: LD_VAR 0 2
 957: PPUSH
 958: CALL_OW 296
 962: PUSH
 963: LD_INT 17
 965: LESS
 966: IFFALSE 1069
// begin if GetClass ( hunters [ i ] ) = class_desert_warior then
 968: LD_EXP 6
 972: PUSH
 973: LD_VAR 0 1
 977: ARRAY
 978: PPUSH
 979: CALL_OW 257
 983: PUSH
 984: LD_INT 11
 986: EQUAL
 987: IFFALSE 1047
// if GetClass ( enemy ) in [ class_frog , class_fish , class_baggie ] then
 989: LD_VAR 0 2
 993: PPUSH
 994: CALL_OW 257
 998: PUSH
 999: LD_INT 19
1001: PUSH
1002: LD_INT 20
1004: PUSH
1005: LD_INT 13
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: LIST
1012: IN
1013: IFFALSE 1032
// ComCarabine ( hunters [ i ] ) else
1015: LD_EXP 6
1019: PUSH
1020: LD_VAR 0 1
1024: ARRAY
1025: PPUSH
1026: CALL_OW 162
1030: GO 1047
// ComSabre ( hunters [ i ] ) ;
1032: LD_EXP 6
1036: PUSH
1037: LD_VAR 0 1
1041: ARRAY
1042: PPUSH
1043: CALL_OW 163
// ComAttackUnit ( hunters [ i ] , enemy ) ;
1047: LD_EXP 6
1051: PUSH
1052: LD_VAR 0 1
1056: ARRAY
1057: PPUSH
1058: LD_VAR 0 2
1062: PPUSH
1063: CALL_OW 115
// end else
1067: GO 1216
// begin d := rand ( 0 , 5 ) ;
1069: LD_ADDR_VAR 0 5
1073: PUSH
1074: LD_INT 0
1076: PPUSH
1077: LD_INT 5
1079: PPUSH
1080: CALL_OW 12
1084: ST_TO_ADDR
// x := ShiftX ( GetX ( hunters [ i ] ) , d , 8 ) ;
1085: LD_ADDR_VAR 0 3
1089: PUSH
1090: LD_EXP 6
1094: PUSH
1095: LD_VAR 0 1
1099: ARRAY
1100: PPUSH
1101: CALL_OW 250
1105: PPUSH
1106: LD_VAR 0 5
1110: PPUSH
1111: LD_INT 8
1113: PPUSH
1114: CALL_OW 272
1118: ST_TO_ADDR
// y := ShiftY ( GetY ( hunters [ i ] ) , d , 8 ) ;
1119: LD_ADDR_VAR 0 4
1123: PUSH
1124: LD_EXP 6
1128: PUSH
1129: LD_VAR 0 1
1133: ARRAY
1134: PPUSH
1135: CALL_OW 251
1139: PPUSH
1140: LD_VAR 0 5
1144: PPUSH
1145: LD_INT 8
1147: PPUSH
1148: CALL_OW 273
1152: ST_TO_ADDR
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
1153: LD_VAR 0 3
1157: PPUSH
1158: LD_VAR 0 4
1162: PPUSH
1163: CALL_OW 488
1167: IFFALSE 1189
1169: PUSH
1170: LD_VAR 0 3
1174: PPUSH
1175: LD_VAR 0 4
1179: PPUSH
1180: CALL_OW 428
1184: PUSH
1185: LD_INT 0
1187: EQUAL
1188: AND
1189: IFFALSE 1216
// ComMoveXY ( hunters [ i ] , x , y ) ;
1191: LD_EXP 6
1195: PUSH
1196: LD_VAR 0 1
1200: ARRAY
1201: PPUSH
1202: LD_VAR 0 3
1206: PPUSH
1207: LD_VAR 0 4
1211: PPUSH
1212: CALL_OW 111
// end ; end ; end ;
1216: GO 876
1218: POP
1219: POP
// end ; end_of_file
1220: PPOPN 5
1222: END
// on UnitGoesToRed ( un ) do var i ;
1223: LD_INT 0
1225: PPUSH
// begin if GetSide ( un ) = 1 then
1226: LD_VAR 0 1
1230: PPUSH
1231: CALL_OW 255
1235: PUSH
1236: LD_INT 1
1238: EQUAL
1239: IFFALSE 1248
// YouLost ( hunt2 ) ;
1241: LD_STRING hunt2
1243: PPUSH
1244: CALL_OW 104
// if GetSide ( un ) > 1 then
1248: LD_VAR 0 1
1252: PPUSH
1253: CALL_OW 255
1257: PUSH
1258: LD_INT 1
1260: GREATER
1261: IFFALSE 1314
// begin for i := 1 to 6 do
1263: LD_ADDR_VAR 0 2
1267: PUSH
1268: DOUBLE
1269: LD_INT 1
1271: DEC
1272: ST_TO_ADDR
1273: LD_INT 6
1275: PUSH
1276: FOR_TO
1277: IFFALSE 1300
// begin wait ( 0 0$1 ) ;
1279: LD_INT 35
1281: PPUSH
1282: CALL_OW 67
// SetLives ( un , 249 ) ;
1286: LD_VAR 0 1
1290: PPUSH
1291: LD_INT 249
1293: PPUSH
1294: CALL_OW 234
// end ;
1298: GO 1276
1300: POP
1301: POP
// SetLives ( un , 1000 ) ;
1302: LD_VAR 0 1
1306: PPUSH
1307: LD_INT 1000
1309: PPUSH
1310: CALL_OW 234
// end ; end ;
1314: PPOPN 2
1316: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 > 1 then
1317: LD_VAR 0 1
1321: PUSH
1322: LD_INT 1
1324: EQUAL
1325: IFFALSE 1337
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_INT 1
1335: GREATER
1336: AND
1337: IFFALSE 1346
// YouLost ( hunt1 ) ;
1339: LD_STRING hunt1
1341: PPUSH
1342: CALL_OW 104
// end ;
1346: PPOPN 2
1348: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var point ;
1349: LD_INT 0
1351: PPUSH
// begin point := 0 ;
1352: LD_ADDR_VAR 0 4
1356: PUSH
1357: LD_INT 0
1359: ST_TO_ADDR
// case GetClass ( un ) of class_fish :
1360: LD_VAR 0 1
1364: PPUSH
1365: CALL_OW 257
1369: PUSH
1370: LD_INT 20
1372: DOUBLE
1373: EQUAL
1374: IFTRUE 1378
1376: GO 1389
1378: POP
// point := 10 ; class_horse :
1379: LD_ADDR_VAR 0 4
1383: PUSH
1384: LD_INT 10
1386: ST_TO_ADDR
1387: GO 1523
1389: LD_INT 21
1391: DOUBLE
1392: EQUAL
1393: IFTRUE 1397
1395: GO 1408
1397: POP
// point := 10 ; class_baggie :
1398: LD_ADDR_VAR 0 4
1402: PUSH
1403: LD_INT 10
1405: ST_TO_ADDR
1406: GO 1523
1408: LD_INT 13
1410: DOUBLE
1411: EQUAL
1412: IFTRUE 1416
1414: GO 1427
1416: POP
// point := 5 ; class_phororhacos :
1417: LD_ADDR_VAR 0 4
1421: PUSH
1422: LD_INT 5
1424: ST_TO_ADDR
1425: GO 1523
1427: LD_INT 18
1429: DOUBLE
1430: EQUAL
1431: IFTRUE 1435
1433: GO 1446
1435: POP
// point := 10 ; class_tiger :
1436: LD_ADDR_VAR 0 4
1440: PUSH
1441: LD_INT 10
1443: ST_TO_ADDR
1444: GO 1523
1446: LD_INT 14
1448: DOUBLE
1449: EQUAL
1450: IFTRUE 1454
1452: GO 1465
1454: POP
// point := 20 ; class_apeman :
1455: LD_ADDR_VAR 0 4
1459: PUSH
1460: LD_INT 20
1462: ST_TO_ADDR
1463: GO 1523
1465: LD_INT 12
1467: DOUBLE
1468: EQUAL
1469: IFTRUE 1473
1471: GO 1484
1473: POP
// point := 30 ; class_apeman_soldier :
1474: LD_ADDR_VAR 0 4
1478: PUSH
1479: LD_INT 30
1481: ST_TO_ADDR
1482: GO 1523
1484: LD_INT 15
1486: DOUBLE
1487: EQUAL
1488: IFTRUE 1492
1490: GO 1503
1492: POP
// point := 50 ; class_frog :
1493: LD_ADDR_VAR 0 4
1497: PUSH
1498: LD_INT 50
1500: ST_TO_ADDR
1501: GO 1523
1503: LD_INT 19
1505: DOUBLE
1506: EQUAL
1507: IFTRUE 1511
1509: GO 1522
1511: POP
// point := 10 ; end ;
1512: LD_ADDR_VAR 0 4
1516: PUSH
1517: LD_INT 10
1519: ST_TO_ADDR
1520: GO 1523
1522: POP
// if point then
1523: LD_VAR 0 4
1527: IFFALSE 1566
// points := Replace ( points , killer_side , points [ killer_side ] + point ) ;
1529: LD_ADDR_EXP 5
1533: PUSH
1534: LD_EXP 5
1538: PPUSH
1539: LD_VAR 0 2
1543: PPUSH
1544: LD_EXP 5
1548: PUSH
1549: LD_VAR 0 2
1553: ARRAY
1554: PUSH
1555: LD_VAR 0 4
1559: PLUS
1560: PPUSH
1561: CALL_OW 1
1565: ST_TO_ADDR
// end ;
1566: PPOPN 4
1568: END
// every 0 0$20 trigger FilterAllUnits ( [ f_side , 0 ] ) < 10 do
1569: LD_INT 22
1571: PUSH
1572: LD_INT 0
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PPUSH
1579: CALL_OW 69
1583: PUSH
1584: LD_INT 10
1586: LESS
1587: IFFALSE 1689
1589: GO 1591
1591: DISABLE
// begin enable ;
1592: ENABLE
// CreateNature ( natArea , watArea , [ rand ( 0 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 2 , 4 ) , rand ( 2 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) ] ) ;
1593: LD_INT 2
1595: PPUSH
1596: LD_INT 1
1598: PPUSH
1599: LD_INT 0
1601: PPUSH
1602: LD_INT 4
1604: PPUSH
1605: CALL_OW 12
1609: PUSH
1610: LD_INT 0
1612: PPUSH
1613: LD_INT 2
1615: PPUSH
1616: CALL_OW 12
1620: PUSH
1621: LD_INT 0
1623: PPUSH
1624: LD_INT 4
1626: PPUSH
1627: CALL_OW 12
1631: PUSH
1632: LD_INT 2
1634: PPUSH
1635: LD_INT 4
1637: PPUSH
1638: CALL_OW 12
1642: PUSH
1643: LD_INT 2
1645: PPUSH
1646: LD_INT 4
1648: PPUSH
1649: CALL_OW 12
1653: PUSH
1654: LD_INT 0
1656: PPUSH
1657: LD_INT 2
1659: PPUSH
1660: CALL_OW 12
1664: PUSH
1665: LD_INT 0
1667: PPUSH
1668: LD_INT 4
1670: PPUSH
1671: CALL_OW 12
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: PPUSH
1685: CALL 387 0 3
// end ;
1689: END
// every 0 0$1 do var i ;
1690: GO 1692
1692: DISABLE
1693: LD_INT 0
1695: PPUSH
// begin enable ;
1696: ENABLE
// display_strings := [ ] ;
1697: LD_ADDR_OWVAR 47
1701: PUSH
1702: EMPTY
1703: ST_TO_ADDR
// for i := 1 to huntersAmount do
1704: LD_ADDR_VAR 0 1
1708: PUSH
1709: DOUBLE
1710: LD_INT 1
1712: DEC
1713: ST_TO_ADDR
1714: LD_EXP 3
1718: PUSH
1719: FOR_TO
1720: IFFALSE 1854
// begin display_strings := display_strings ^ [ #player & i , i , points [ i ] ] ;
1722: LD_ADDR_OWVAR 47
1726: PUSH
1727: LD_OWVAR 47
1731: PUSH
1732: LD_STRING #player
1734: PUSH
1735: LD_VAR 0 1
1739: STR
1740: PUSH
1741: LD_VAR 0 1
1745: PUSH
1746: LD_EXP 5
1750: PUSH
1751: LD_VAR 0 1
1755: ARRAY
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: LIST
1761: ADD
1762: ST_TO_ADDR
// if points [ i ] >= [ 750 , 1250 , 2000 ] [ Difficulty ] then
1763: LD_EXP 5
1767: PUSH
1768: LD_VAR 0 1
1772: ARRAY
1773: PUSH
1774: LD_INT 750
1776: PUSH
1777: LD_INT 1250
1779: PUSH
1780: LD_INT 2000
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: LIST
1787: PUSH
1788: LD_OWVAR 67
1792: ARRAY
1793: GREATEREQUAL
1794: IFFALSE 1852
// begin if i = 1 then
1796: LD_VAR 0 1
1800: PUSH
1801: LD_INT 1
1803: EQUAL
1804: IFFALSE 1845
// begin DialogueOn ;
1806: CALL_OW 6
// SetAchievement ( ACH_HUNT ) ;
1810: LD_STRING ACH_HUNT
1812: PPUSH
1813: CALL_OW 543
// display_strings := [ #hunting-win ] ;
1817: LD_ADDR_OWVAR 47
1821: PUSH
1822: LD_STRING #hunting-win
1824: PUSH
1825: EMPTY
1826: LIST
1827: ST_TO_ADDR
// dwait ( 0 0$5 ) ;
1828: LD_INT 175
1830: PPUSH
1831: CALL_OW 68
// YouWin ;
1835: CALL_OW 103
// DialogueOff ;
1839: CALL_OW 7
// end else
1843: GO 1852
// YouLost ( hunt3 ) ;
1845: LD_STRING hunt3
1847: PPUSH
1848: CALL_OW 104
// end ; end ;
1852: GO 1719
1854: POP
1855: POP
// end ; end_of_file end_of_file
1856: PPOPN 1
1858: END
// export globalGameSaveCounter ; every 0 0$1 do
1859: GO 1861
1861: DISABLE
// begin enable ;
1862: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1863: LD_STRING updateTimer(
1865: PUSH
1866: LD_OWVAR 1
1870: STR
1871: PUSH
1872: LD_STRING );
1874: STR
1875: PPUSH
1876: CALL_OW 559
// end ;
1880: END
// every 0 0$1 do
1881: GO 1883
1883: DISABLE
// begin globalGameSaveCounter := 0 ;
1884: LD_ADDR_EXP 7
1888: PUSH
1889: LD_INT 0
1891: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
1892: LD_STRING setGameSaveCounter(0)
1894: PPUSH
1895: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
1899: LD_STRING initStreamRollete();
1901: PPUSH
1902: CALL_OW 559
// InitStreamMode ;
1906: CALL 3251 0 0
// DefineStreamItems ( false ) ;
1910: LD_INT 0
1912: PPUSH
1913: CALL 3715 0 1
// end ;
1917: END
// export function SOS_MapStart ( ) ; begin
1918: LD_INT 0
1920: PPUSH
// if streamModeActive then
1921: LD_EXP 8
1925: IFFALSE 1934
// DefineStreamItems ( true ) ;
1927: LD_INT 1
1929: PPUSH
1930: CALL 3715 0 1
// UpdateLuaVariables ( ) ;
1934: CALL 1951 0 0
// UpdateFactoryWaypoints ( ) ;
1938: CALL 16837 0 0
// UpdateWarehouseGatheringPoints ( ) ;
1942: CALL 17089 0 0
// end ;
1946: LD_VAR 0 1
1950: RET
// function UpdateLuaVariables ( ) ; begin
1951: LD_INT 0
1953: PPUSH
// if globalGameSaveCounter then
1954: LD_EXP 7
1958: IFFALSE 1992
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
1960: LD_ADDR_EXP 7
1964: PUSH
1965: LD_EXP 7
1969: PPUSH
1970: CALL 63833 0 1
1974: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1975: LD_STRING setGameSaveCounter(
1977: PUSH
1978: LD_EXP 7
1982: STR
1983: PUSH
1984: LD_STRING )
1986: STR
1987: PPUSH
1988: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
1992: LD_STRING setGameDifficulty(
1994: PUSH
1995: LD_OWVAR 67
1999: STR
2000: PUSH
2001: LD_STRING )
2003: STR
2004: PPUSH
2005: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
2009: LD_STRING displayDifficulty(
2011: PUSH
2012: LD_OWVAR 67
2016: STR
2017: PUSH
2018: LD_STRING )
2020: STR
2021: PPUSH
2022: CALL_OW 559
// end ;
2026: LD_VAR 0 1
2030: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
2031: LD_INT 0
2033: PPUSH
// if p2 = stream_mode then
2034: LD_VAR 0 2
2038: PUSH
2039: LD_INT 100
2041: EQUAL
2042: IFFALSE 3045
// begin if not StreamModeActive then
2044: LD_EXP 8
2048: NOT
2049: IFFALSE 2059
// StreamModeActive := true ;
2051: LD_ADDR_EXP 8
2055: PUSH
2056: LD_INT 1
2058: ST_TO_ADDR
// if p3 = 0 then
2059: LD_VAR 0 3
2063: PUSH
2064: LD_INT 0
2066: EQUAL
2067: IFFALSE 2073
// InitStreamMode ;
2069: CALL 3251 0 0
// if p3 = 1 then
2073: LD_VAR 0 3
2077: PUSH
2078: LD_INT 1
2080: EQUAL
2081: IFFALSE 2091
// sRocket := true ;
2083: LD_ADDR_EXP 13
2087: PUSH
2088: LD_INT 1
2090: ST_TO_ADDR
// if p3 = 2 then
2091: LD_VAR 0 3
2095: PUSH
2096: LD_INT 2
2098: EQUAL
2099: IFFALSE 2109
// sSpeed := true ;
2101: LD_ADDR_EXP 12
2105: PUSH
2106: LD_INT 1
2108: ST_TO_ADDR
// if p3 = 3 then
2109: LD_VAR 0 3
2113: PUSH
2114: LD_INT 3
2116: EQUAL
2117: IFFALSE 2127
// sEngine := true ;
2119: LD_ADDR_EXP 14
2123: PUSH
2124: LD_INT 1
2126: ST_TO_ADDR
// if p3 = 4 then
2127: LD_VAR 0 3
2131: PUSH
2132: LD_INT 4
2134: EQUAL
2135: IFFALSE 2145
// sSpec := true ;
2137: LD_ADDR_EXP 11
2141: PUSH
2142: LD_INT 1
2144: ST_TO_ADDR
// if p3 = 5 then
2145: LD_VAR 0 3
2149: PUSH
2150: LD_INT 5
2152: EQUAL
2153: IFFALSE 2163
// sLevel := true ;
2155: LD_ADDR_EXP 15
2159: PUSH
2160: LD_INT 1
2162: ST_TO_ADDR
// if p3 = 6 then
2163: LD_VAR 0 3
2167: PUSH
2168: LD_INT 6
2170: EQUAL
2171: IFFALSE 2181
// sArmoury := true ;
2173: LD_ADDR_EXP 16
2177: PUSH
2178: LD_INT 1
2180: ST_TO_ADDR
// if p3 = 7 then
2181: LD_VAR 0 3
2185: PUSH
2186: LD_INT 7
2188: EQUAL
2189: IFFALSE 2199
// sRadar := true ;
2191: LD_ADDR_EXP 17
2195: PUSH
2196: LD_INT 1
2198: ST_TO_ADDR
// if p3 = 8 then
2199: LD_VAR 0 3
2203: PUSH
2204: LD_INT 8
2206: EQUAL
2207: IFFALSE 2217
// sBunker := true ;
2209: LD_ADDR_EXP 18
2213: PUSH
2214: LD_INT 1
2216: ST_TO_ADDR
// if p3 = 9 then
2217: LD_VAR 0 3
2221: PUSH
2222: LD_INT 9
2224: EQUAL
2225: IFFALSE 2235
// sHack := true ;
2227: LD_ADDR_EXP 19
2231: PUSH
2232: LD_INT 1
2234: ST_TO_ADDR
// if p3 = 10 then
2235: LD_VAR 0 3
2239: PUSH
2240: LD_INT 10
2242: EQUAL
2243: IFFALSE 2253
// sFire := true ;
2245: LD_ADDR_EXP 20
2249: PUSH
2250: LD_INT 1
2252: ST_TO_ADDR
// if p3 = 11 then
2253: LD_VAR 0 3
2257: PUSH
2258: LD_INT 11
2260: EQUAL
2261: IFFALSE 2271
// sRefresh := true ;
2263: LD_ADDR_EXP 21
2267: PUSH
2268: LD_INT 1
2270: ST_TO_ADDR
// if p3 = 12 then
2271: LD_VAR 0 3
2275: PUSH
2276: LD_INT 12
2278: EQUAL
2279: IFFALSE 2289
// sExp := true ;
2281: LD_ADDR_EXP 22
2285: PUSH
2286: LD_INT 1
2288: ST_TO_ADDR
// if p3 = 13 then
2289: LD_VAR 0 3
2293: PUSH
2294: LD_INT 13
2296: EQUAL
2297: IFFALSE 2307
// sDepot := true ;
2299: LD_ADDR_EXP 23
2303: PUSH
2304: LD_INT 1
2306: ST_TO_ADDR
// if p3 = 14 then
2307: LD_VAR 0 3
2311: PUSH
2312: LD_INT 14
2314: EQUAL
2315: IFFALSE 2325
// sFlag := true ;
2317: LD_ADDR_EXP 24
2321: PUSH
2322: LD_INT 1
2324: ST_TO_ADDR
// if p3 = 15 then
2325: LD_VAR 0 3
2329: PUSH
2330: LD_INT 15
2332: EQUAL
2333: IFFALSE 2343
// sKamikadze := true ;
2335: LD_ADDR_EXP 32
2339: PUSH
2340: LD_INT 1
2342: ST_TO_ADDR
// if p3 = 16 then
2343: LD_VAR 0 3
2347: PUSH
2348: LD_INT 16
2350: EQUAL
2351: IFFALSE 2361
// sTroll := true ;
2353: LD_ADDR_EXP 33
2357: PUSH
2358: LD_INT 1
2360: ST_TO_ADDR
// if p3 = 17 then
2361: LD_VAR 0 3
2365: PUSH
2366: LD_INT 17
2368: EQUAL
2369: IFFALSE 2379
// sSlow := true ;
2371: LD_ADDR_EXP 34
2375: PUSH
2376: LD_INT 1
2378: ST_TO_ADDR
// if p3 = 18 then
2379: LD_VAR 0 3
2383: PUSH
2384: LD_INT 18
2386: EQUAL
2387: IFFALSE 2397
// sLack := true ;
2389: LD_ADDR_EXP 35
2393: PUSH
2394: LD_INT 1
2396: ST_TO_ADDR
// if p3 = 19 then
2397: LD_VAR 0 3
2401: PUSH
2402: LD_INT 19
2404: EQUAL
2405: IFFALSE 2415
// sTank := true ;
2407: LD_ADDR_EXP 37
2411: PUSH
2412: LD_INT 1
2414: ST_TO_ADDR
// if p3 = 20 then
2415: LD_VAR 0 3
2419: PUSH
2420: LD_INT 20
2422: EQUAL
2423: IFFALSE 2433
// sRemote := true ;
2425: LD_ADDR_EXP 38
2429: PUSH
2430: LD_INT 1
2432: ST_TO_ADDR
// if p3 = 21 then
2433: LD_VAR 0 3
2437: PUSH
2438: LD_INT 21
2440: EQUAL
2441: IFFALSE 2451
// sPowell := true ;
2443: LD_ADDR_EXP 39
2447: PUSH
2448: LD_INT 1
2450: ST_TO_ADDR
// if p3 = 22 then
2451: LD_VAR 0 3
2455: PUSH
2456: LD_INT 22
2458: EQUAL
2459: IFFALSE 2469
// sTeleport := true ;
2461: LD_ADDR_EXP 42
2465: PUSH
2466: LD_INT 1
2468: ST_TO_ADDR
// if p3 = 23 then
2469: LD_VAR 0 3
2473: PUSH
2474: LD_INT 23
2476: EQUAL
2477: IFFALSE 2487
// sOilTower := true ;
2479: LD_ADDR_EXP 44
2483: PUSH
2484: LD_INT 1
2486: ST_TO_ADDR
// if p3 = 24 then
2487: LD_VAR 0 3
2491: PUSH
2492: LD_INT 24
2494: EQUAL
2495: IFFALSE 2505
// sShovel := true ;
2497: LD_ADDR_EXP 45
2501: PUSH
2502: LD_INT 1
2504: ST_TO_ADDR
// if p3 = 25 then
2505: LD_VAR 0 3
2509: PUSH
2510: LD_INT 25
2512: EQUAL
2513: IFFALSE 2523
// sSheik := true ;
2515: LD_ADDR_EXP 46
2519: PUSH
2520: LD_INT 1
2522: ST_TO_ADDR
// if p3 = 26 then
2523: LD_VAR 0 3
2527: PUSH
2528: LD_INT 26
2530: EQUAL
2531: IFFALSE 2541
// sEarthquake := true ;
2533: LD_ADDR_EXP 48
2537: PUSH
2538: LD_INT 1
2540: ST_TO_ADDR
// if p3 = 27 then
2541: LD_VAR 0 3
2545: PUSH
2546: LD_INT 27
2548: EQUAL
2549: IFFALSE 2559
// sAI := true ;
2551: LD_ADDR_EXP 49
2555: PUSH
2556: LD_INT 1
2558: ST_TO_ADDR
// if p3 = 28 then
2559: LD_VAR 0 3
2563: PUSH
2564: LD_INT 28
2566: EQUAL
2567: IFFALSE 2577
// sCargo := true ;
2569: LD_ADDR_EXP 52
2573: PUSH
2574: LD_INT 1
2576: ST_TO_ADDR
// if p3 = 29 then
2577: LD_VAR 0 3
2581: PUSH
2582: LD_INT 29
2584: EQUAL
2585: IFFALSE 2595
// sDLaser := true ;
2587: LD_ADDR_EXP 53
2591: PUSH
2592: LD_INT 1
2594: ST_TO_ADDR
// if p3 = 30 then
2595: LD_VAR 0 3
2599: PUSH
2600: LD_INT 30
2602: EQUAL
2603: IFFALSE 2613
// sExchange := true ;
2605: LD_ADDR_EXP 54
2609: PUSH
2610: LD_INT 1
2612: ST_TO_ADDR
// if p3 = 31 then
2613: LD_VAR 0 3
2617: PUSH
2618: LD_INT 31
2620: EQUAL
2621: IFFALSE 2631
// sFac := true ;
2623: LD_ADDR_EXP 55
2627: PUSH
2628: LD_INT 1
2630: ST_TO_ADDR
// if p3 = 32 then
2631: LD_VAR 0 3
2635: PUSH
2636: LD_INT 32
2638: EQUAL
2639: IFFALSE 2649
// sPower := true ;
2641: LD_ADDR_EXP 56
2645: PUSH
2646: LD_INT 1
2648: ST_TO_ADDR
// if p3 = 33 then
2649: LD_VAR 0 3
2653: PUSH
2654: LD_INT 33
2656: EQUAL
2657: IFFALSE 2667
// sRandom := true ;
2659: LD_ADDR_EXP 57
2663: PUSH
2664: LD_INT 1
2666: ST_TO_ADDR
// if p3 = 34 then
2667: LD_VAR 0 3
2671: PUSH
2672: LD_INT 34
2674: EQUAL
2675: IFFALSE 2685
// sShield := true ;
2677: LD_ADDR_EXP 58
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// if p3 = 35 then
2685: LD_VAR 0 3
2689: PUSH
2690: LD_INT 35
2692: EQUAL
2693: IFFALSE 2703
// sTime := true ;
2695: LD_ADDR_EXP 59
2699: PUSH
2700: LD_INT 1
2702: ST_TO_ADDR
// if p3 = 36 then
2703: LD_VAR 0 3
2707: PUSH
2708: LD_INT 36
2710: EQUAL
2711: IFFALSE 2721
// sTools := true ;
2713: LD_ADDR_EXP 60
2717: PUSH
2718: LD_INT 1
2720: ST_TO_ADDR
// if p3 = 101 then
2721: LD_VAR 0 3
2725: PUSH
2726: LD_INT 101
2728: EQUAL
2729: IFFALSE 2739
// sSold := true ;
2731: LD_ADDR_EXP 25
2735: PUSH
2736: LD_INT 1
2738: ST_TO_ADDR
// if p3 = 102 then
2739: LD_VAR 0 3
2743: PUSH
2744: LD_INT 102
2746: EQUAL
2747: IFFALSE 2757
// sDiff := true ;
2749: LD_ADDR_EXP 26
2753: PUSH
2754: LD_INT 1
2756: ST_TO_ADDR
// if p3 = 103 then
2757: LD_VAR 0 3
2761: PUSH
2762: LD_INT 103
2764: EQUAL
2765: IFFALSE 2775
// sFog := true ;
2767: LD_ADDR_EXP 29
2771: PUSH
2772: LD_INT 1
2774: ST_TO_ADDR
// if p3 = 104 then
2775: LD_VAR 0 3
2779: PUSH
2780: LD_INT 104
2782: EQUAL
2783: IFFALSE 2793
// sReset := true ;
2785: LD_ADDR_EXP 30
2789: PUSH
2790: LD_INT 1
2792: ST_TO_ADDR
// if p3 = 105 then
2793: LD_VAR 0 3
2797: PUSH
2798: LD_INT 105
2800: EQUAL
2801: IFFALSE 2811
// sSun := true ;
2803: LD_ADDR_EXP 31
2807: PUSH
2808: LD_INT 1
2810: ST_TO_ADDR
// if p3 = 106 then
2811: LD_VAR 0 3
2815: PUSH
2816: LD_INT 106
2818: EQUAL
2819: IFFALSE 2829
// sTiger := true ;
2821: LD_ADDR_EXP 27
2825: PUSH
2826: LD_INT 1
2828: ST_TO_ADDR
// if p3 = 107 then
2829: LD_VAR 0 3
2833: PUSH
2834: LD_INT 107
2836: EQUAL
2837: IFFALSE 2847
// sBomb := true ;
2839: LD_ADDR_EXP 28
2843: PUSH
2844: LD_INT 1
2846: ST_TO_ADDR
// if p3 = 108 then
2847: LD_VAR 0 3
2851: PUSH
2852: LD_INT 108
2854: EQUAL
2855: IFFALSE 2865
// sWound := true ;
2857: LD_ADDR_EXP 36
2861: PUSH
2862: LD_INT 1
2864: ST_TO_ADDR
// if p3 = 109 then
2865: LD_VAR 0 3
2869: PUSH
2870: LD_INT 109
2872: EQUAL
2873: IFFALSE 2883
// sBetray := true ;
2875: LD_ADDR_EXP 40
2879: PUSH
2880: LD_INT 1
2882: ST_TO_ADDR
// if p3 = 110 then
2883: LD_VAR 0 3
2887: PUSH
2888: LD_INT 110
2890: EQUAL
2891: IFFALSE 2901
// sContamin := true ;
2893: LD_ADDR_EXP 41
2897: PUSH
2898: LD_INT 1
2900: ST_TO_ADDR
// if p3 = 111 then
2901: LD_VAR 0 3
2905: PUSH
2906: LD_INT 111
2908: EQUAL
2909: IFFALSE 2919
// sOil := true ;
2911: LD_ADDR_EXP 43
2915: PUSH
2916: LD_INT 1
2918: ST_TO_ADDR
// if p3 = 112 then
2919: LD_VAR 0 3
2923: PUSH
2924: LD_INT 112
2926: EQUAL
2927: IFFALSE 2937
// sStu := true ;
2929: LD_ADDR_EXP 47
2933: PUSH
2934: LD_INT 1
2936: ST_TO_ADDR
// if p3 = 113 then
2937: LD_VAR 0 3
2941: PUSH
2942: LD_INT 113
2944: EQUAL
2945: IFFALSE 2955
// sBazooka := true ;
2947: LD_ADDR_EXP 50
2951: PUSH
2952: LD_INT 1
2954: ST_TO_ADDR
// if p3 = 114 then
2955: LD_VAR 0 3
2959: PUSH
2960: LD_INT 114
2962: EQUAL
2963: IFFALSE 2973
// sMortar := true ;
2965: LD_ADDR_EXP 51
2969: PUSH
2970: LD_INT 1
2972: ST_TO_ADDR
// if p3 = 115 then
2973: LD_VAR 0 3
2977: PUSH
2978: LD_INT 115
2980: EQUAL
2981: IFFALSE 2991
// sRanger := true ;
2983: LD_ADDR_EXP 61
2987: PUSH
2988: LD_INT 1
2990: ST_TO_ADDR
// if p3 = 116 then
2991: LD_VAR 0 3
2995: PUSH
2996: LD_INT 116
2998: EQUAL
2999: IFFALSE 3009
// sComputer := true ;
3001: LD_ADDR_EXP 62
3005: PUSH
3006: LD_INT 1
3008: ST_TO_ADDR
// if p3 = 117 then
3009: LD_VAR 0 3
3013: PUSH
3014: LD_INT 117
3016: EQUAL
3017: IFFALSE 3027
// s30 := true ;
3019: LD_ADDR_EXP 63
3023: PUSH
3024: LD_INT 1
3026: ST_TO_ADDR
// if p3 = 118 then
3027: LD_VAR 0 3
3031: PUSH
3032: LD_INT 118
3034: EQUAL
3035: IFFALSE 3045
// s60 := true ;
3037: LD_ADDR_EXP 64
3041: PUSH
3042: LD_INT 1
3044: ST_TO_ADDR
// end ; if p2 = hack_mode then
3045: LD_VAR 0 2
3049: PUSH
3050: LD_INT 101
3052: EQUAL
3053: IFFALSE 3181
// begin case p3 of 1 :
3055: LD_VAR 0 3
3059: PUSH
3060: LD_INT 1
3062: DOUBLE
3063: EQUAL
3064: IFTRUE 3068
3066: GO 3075
3068: POP
// hHackUnlimitedResources ; 2 :
3069: CALL 15444 0 0
3073: GO 3181
3075: LD_INT 2
3077: DOUBLE
3078: EQUAL
3079: IFTRUE 3083
3081: GO 3090
3083: POP
// hHackSetLevel10 ; 3 :
3084: CALL 15577 0 0
3088: GO 3181
3090: LD_INT 3
3092: DOUBLE
3093: EQUAL
3094: IFTRUE 3098
3096: GO 3105
3098: POP
// hHackSetLevel10YourUnits ; 4 :
3099: CALL 15662 0 0
3103: GO 3181
3105: LD_INT 4
3107: DOUBLE
3108: EQUAL
3109: IFTRUE 3113
3111: GO 3120
3113: POP
// hHackInvincible ; 5 :
3114: CALL 16110 0 0
3118: GO 3181
3120: LD_INT 5
3122: DOUBLE
3123: EQUAL
3124: IFTRUE 3128
3126: GO 3135
3128: POP
// hHackInvisible ; 6 :
3129: CALL 16221 0 0
3133: GO 3181
3135: LD_INT 6
3137: DOUBLE
3138: EQUAL
3139: IFTRUE 3143
3141: GO 3150
3143: POP
// hHackChangeYourSide ; 7 :
3144: CALL 16278 0 0
3148: GO 3181
3150: LD_INT 7
3152: DOUBLE
3153: EQUAL
3154: IFTRUE 3158
3156: GO 3165
3158: POP
// hHackChangeUnitSide ; 8 :
3159: CALL 16320 0 0
3163: GO 3181
3165: LD_INT 8
3167: DOUBLE
3168: EQUAL
3169: IFTRUE 3173
3171: GO 3180
3173: POP
// hHackFog ; end ;
3174: CALL 16421 0 0
3178: GO 3181
3180: POP
// end ; if p2 = game_save_mode then
3181: LD_VAR 0 2
3185: PUSH
3186: LD_INT 102
3188: EQUAL
3189: IFFALSE 3246
// begin if p3 = 1 then
3191: LD_VAR 0 3
3195: PUSH
3196: LD_INT 1
3198: EQUAL
3199: IFFALSE 3211
// globalGameSaveCounter := p4 ;
3201: LD_ADDR_EXP 7
3205: PUSH
3206: LD_VAR 0 4
3210: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
3211: LD_VAR 0 3
3215: PUSH
3216: LD_INT 2
3218: EQUAL
3219: IFFALSE 3227
3221: PUSH
3222: LD_EXP 7
3226: AND
3227: IFFALSE 3246
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
3229: LD_STRING setGameSaveCounter(
3231: PUSH
3232: LD_EXP 7
3236: STR
3237: PUSH
3238: LD_STRING )
3240: STR
3241: PPUSH
3242: CALL_OW 559
// end ; end ;
3246: LD_VAR 0 7
3250: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
3251: LD_INT 0
3253: PPUSH
// streamModeActive := false ;
3254: LD_ADDR_EXP 8
3258: PUSH
3259: LD_INT 0
3261: ST_TO_ADDR
// normalCounter := 36 ;
3262: LD_ADDR_EXP 9
3266: PUSH
3267: LD_INT 36
3269: ST_TO_ADDR
// hardcoreCounter := 18 ;
3270: LD_ADDR_EXP 10
3274: PUSH
3275: LD_INT 18
3277: ST_TO_ADDR
// sRocket := false ;
3278: LD_ADDR_EXP 13
3282: PUSH
3283: LD_INT 0
3285: ST_TO_ADDR
// sSpeed := false ;
3286: LD_ADDR_EXP 12
3290: PUSH
3291: LD_INT 0
3293: ST_TO_ADDR
// sEngine := false ;
3294: LD_ADDR_EXP 14
3298: PUSH
3299: LD_INT 0
3301: ST_TO_ADDR
// sSpec := false ;
3302: LD_ADDR_EXP 11
3306: PUSH
3307: LD_INT 0
3309: ST_TO_ADDR
// sLevel := false ;
3310: LD_ADDR_EXP 15
3314: PUSH
3315: LD_INT 0
3317: ST_TO_ADDR
// sArmoury := false ;
3318: LD_ADDR_EXP 16
3322: PUSH
3323: LD_INT 0
3325: ST_TO_ADDR
// sRadar := false ;
3326: LD_ADDR_EXP 17
3330: PUSH
3331: LD_INT 0
3333: ST_TO_ADDR
// sBunker := false ;
3334: LD_ADDR_EXP 18
3338: PUSH
3339: LD_INT 0
3341: ST_TO_ADDR
// sHack := false ;
3342: LD_ADDR_EXP 19
3346: PUSH
3347: LD_INT 0
3349: ST_TO_ADDR
// sFire := false ;
3350: LD_ADDR_EXP 20
3354: PUSH
3355: LD_INT 0
3357: ST_TO_ADDR
// sRefresh := false ;
3358: LD_ADDR_EXP 21
3362: PUSH
3363: LD_INT 0
3365: ST_TO_ADDR
// sExp := false ;
3366: LD_ADDR_EXP 22
3370: PUSH
3371: LD_INT 0
3373: ST_TO_ADDR
// sDepot := false ;
3374: LD_ADDR_EXP 23
3378: PUSH
3379: LD_INT 0
3381: ST_TO_ADDR
// sFlag := false ;
3382: LD_ADDR_EXP 24
3386: PUSH
3387: LD_INT 0
3389: ST_TO_ADDR
// sKamikadze := false ;
3390: LD_ADDR_EXP 32
3394: PUSH
3395: LD_INT 0
3397: ST_TO_ADDR
// sTroll := false ;
3398: LD_ADDR_EXP 33
3402: PUSH
3403: LD_INT 0
3405: ST_TO_ADDR
// sSlow := false ;
3406: LD_ADDR_EXP 34
3410: PUSH
3411: LD_INT 0
3413: ST_TO_ADDR
// sLack := false ;
3414: LD_ADDR_EXP 35
3418: PUSH
3419: LD_INT 0
3421: ST_TO_ADDR
// sTank := false ;
3422: LD_ADDR_EXP 37
3426: PUSH
3427: LD_INT 0
3429: ST_TO_ADDR
// sRemote := false ;
3430: LD_ADDR_EXP 38
3434: PUSH
3435: LD_INT 0
3437: ST_TO_ADDR
// sPowell := false ;
3438: LD_ADDR_EXP 39
3442: PUSH
3443: LD_INT 0
3445: ST_TO_ADDR
// sTeleport := false ;
3446: LD_ADDR_EXP 42
3450: PUSH
3451: LD_INT 0
3453: ST_TO_ADDR
// sOilTower := false ;
3454: LD_ADDR_EXP 44
3458: PUSH
3459: LD_INT 0
3461: ST_TO_ADDR
// sShovel := false ;
3462: LD_ADDR_EXP 45
3466: PUSH
3467: LD_INT 0
3469: ST_TO_ADDR
// sSheik := false ;
3470: LD_ADDR_EXP 46
3474: PUSH
3475: LD_INT 0
3477: ST_TO_ADDR
// sEarthquake := false ;
3478: LD_ADDR_EXP 48
3482: PUSH
3483: LD_INT 0
3485: ST_TO_ADDR
// sAI := false ;
3486: LD_ADDR_EXP 49
3490: PUSH
3491: LD_INT 0
3493: ST_TO_ADDR
// sCargo := false ;
3494: LD_ADDR_EXP 52
3498: PUSH
3499: LD_INT 0
3501: ST_TO_ADDR
// sDLaser := false ;
3502: LD_ADDR_EXP 53
3506: PUSH
3507: LD_INT 0
3509: ST_TO_ADDR
// sExchange := false ;
3510: LD_ADDR_EXP 54
3514: PUSH
3515: LD_INT 0
3517: ST_TO_ADDR
// sFac := false ;
3518: LD_ADDR_EXP 55
3522: PUSH
3523: LD_INT 0
3525: ST_TO_ADDR
// sPower := false ;
3526: LD_ADDR_EXP 56
3530: PUSH
3531: LD_INT 0
3533: ST_TO_ADDR
// sRandom := false ;
3534: LD_ADDR_EXP 57
3538: PUSH
3539: LD_INT 0
3541: ST_TO_ADDR
// sShield := false ;
3542: LD_ADDR_EXP 58
3546: PUSH
3547: LD_INT 0
3549: ST_TO_ADDR
// sTime := false ;
3550: LD_ADDR_EXP 59
3554: PUSH
3555: LD_INT 0
3557: ST_TO_ADDR
// sTools := false ;
3558: LD_ADDR_EXP 60
3562: PUSH
3563: LD_INT 0
3565: ST_TO_ADDR
// sSold := false ;
3566: LD_ADDR_EXP 25
3570: PUSH
3571: LD_INT 0
3573: ST_TO_ADDR
// sDiff := false ;
3574: LD_ADDR_EXP 26
3578: PUSH
3579: LD_INT 0
3581: ST_TO_ADDR
// sFog := false ;
3582: LD_ADDR_EXP 29
3586: PUSH
3587: LD_INT 0
3589: ST_TO_ADDR
// sReset := false ;
3590: LD_ADDR_EXP 30
3594: PUSH
3595: LD_INT 0
3597: ST_TO_ADDR
// sSun := false ;
3598: LD_ADDR_EXP 31
3602: PUSH
3603: LD_INT 0
3605: ST_TO_ADDR
// sTiger := false ;
3606: LD_ADDR_EXP 27
3610: PUSH
3611: LD_INT 0
3613: ST_TO_ADDR
// sBomb := false ;
3614: LD_ADDR_EXP 28
3618: PUSH
3619: LD_INT 0
3621: ST_TO_ADDR
// sWound := false ;
3622: LD_ADDR_EXP 36
3626: PUSH
3627: LD_INT 0
3629: ST_TO_ADDR
// sBetray := false ;
3630: LD_ADDR_EXP 40
3634: PUSH
3635: LD_INT 0
3637: ST_TO_ADDR
// sContamin := false ;
3638: LD_ADDR_EXP 41
3642: PUSH
3643: LD_INT 0
3645: ST_TO_ADDR
// sOil := false ;
3646: LD_ADDR_EXP 43
3650: PUSH
3651: LD_INT 0
3653: ST_TO_ADDR
// sStu := false ;
3654: LD_ADDR_EXP 47
3658: PUSH
3659: LD_INT 0
3661: ST_TO_ADDR
// sBazooka := false ;
3662: LD_ADDR_EXP 50
3666: PUSH
3667: LD_INT 0
3669: ST_TO_ADDR
// sMortar := false ;
3670: LD_ADDR_EXP 51
3674: PUSH
3675: LD_INT 0
3677: ST_TO_ADDR
// sRanger := false ;
3678: LD_ADDR_EXP 61
3682: PUSH
3683: LD_INT 0
3685: ST_TO_ADDR
// sComputer := false ;
3686: LD_ADDR_EXP 62
3690: PUSH
3691: LD_INT 0
3693: ST_TO_ADDR
// s30 := false ;
3694: LD_ADDR_EXP 63
3698: PUSH
3699: LD_INT 0
3701: ST_TO_ADDR
// s60 := false ;
3702: LD_ADDR_EXP 64
3706: PUSH
3707: LD_INT 0
3709: ST_TO_ADDR
// end ;
3710: LD_VAR 0 1
3714: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3715: LD_INT 0
3717: PPUSH
3718: PPUSH
3719: PPUSH
3720: PPUSH
3721: PPUSH
3722: PPUSH
3723: PPUSH
// result := [ ] ;
3724: LD_ADDR_VAR 0 2
3728: PUSH
3729: EMPTY
3730: ST_TO_ADDR
// if campaign_id = 1 then
3731: LD_OWVAR 69
3735: PUSH
3736: LD_INT 1
3738: EQUAL
3739: IFFALSE 6905
// begin case mission_number of 1 :
3741: LD_OWVAR 70
3745: PUSH
3746: LD_INT 1
3748: DOUBLE
3749: EQUAL
3750: IFTRUE 3754
3752: GO 3830
3754: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3755: LD_ADDR_VAR 0 2
3759: PUSH
3760: LD_INT 2
3762: PUSH
3763: LD_INT 4
3765: PUSH
3766: LD_INT 11
3768: PUSH
3769: LD_INT 12
3771: PUSH
3772: LD_INT 15
3774: PUSH
3775: LD_INT 16
3777: PUSH
3778: LD_INT 22
3780: PUSH
3781: LD_INT 23
3783: PUSH
3784: LD_INT 26
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: PUSH
3798: LD_INT 101
3800: PUSH
3801: LD_INT 102
3803: PUSH
3804: LD_INT 106
3806: PUSH
3807: LD_INT 116
3809: PUSH
3810: LD_INT 117
3812: PUSH
3813: LD_INT 118
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: ST_TO_ADDR
3828: GO 6903
3830: LD_INT 2
3832: DOUBLE
3833: EQUAL
3834: IFTRUE 3838
3836: GO 3922
3838: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3839: LD_ADDR_VAR 0 2
3843: PUSH
3844: LD_INT 2
3846: PUSH
3847: LD_INT 4
3849: PUSH
3850: LD_INT 11
3852: PUSH
3853: LD_INT 12
3855: PUSH
3856: LD_INT 15
3858: PUSH
3859: LD_INT 16
3861: PUSH
3862: LD_INT 22
3864: PUSH
3865: LD_INT 23
3867: PUSH
3868: LD_INT 26
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: PUSH
3882: LD_INT 101
3884: PUSH
3885: LD_INT 102
3887: PUSH
3888: LD_INT 105
3890: PUSH
3891: LD_INT 106
3893: PUSH
3894: LD_INT 108
3896: PUSH
3897: LD_INT 116
3899: PUSH
3900: LD_INT 117
3902: PUSH
3903: LD_INT 118
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: PUSH
3916: EMPTY
3917: LIST
3918: LIST
3919: ST_TO_ADDR
3920: GO 6903
3922: LD_INT 3
3924: DOUBLE
3925: EQUAL
3926: IFTRUE 3930
3928: GO 4018
3930: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3931: LD_ADDR_VAR 0 2
3935: PUSH
3936: LD_INT 2
3938: PUSH
3939: LD_INT 4
3941: PUSH
3942: LD_INT 5
3944: PUSH
3945: LD_INT 11
3947: PUSH
3948: LD_INT 12
3950: PUSH
3951: LD_INT 15
3953: PUSH
3954: LD_INT 16
3956: PUSH
3957: LD_INT 22
3959: PUSH
3960: LD_INT 26
3962: PUSH
3963: LD_INT 36
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: LIST
3972: LIST
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: PUSH
3978: LD_INT 101
3980: PUSH
3981: LD_INT 102
3983: PUSH
3984: LD_INT 105
3986: PUSH
3987: LD_INT 106
3989: PUSH
3990: LD_INT 108
3992: PUSH
3993: LD_INT 116
3995: PUSH
3996: LD_INT 117
3998: PUSH
3999: LD_INT 118
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: ST_TO_ADDR
4016: GO 6903
4018: LD_INT 4
4020: DOUBLE
4021: EQUAL
4022: IFTRUE 4026
4024: GO 4122
4026: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
4027: LD_ADDR_VAR 0 2
4031: PUSH
4032: LD_INT 2
4034: PUSH
4035: LD_INT 4
4037: PUSH
4038: LD_INT 5
4040: PUSH
4041: LD_INT 8
4043: PUSH
4044: LD_INT 11
4046: PUSH
4047: LD_INT 12
4049: PUSH
4050: LD_INT 15
4052: PUSH
4053: LD_INT 16
4055: PUSH
4056: LD_INT 22
4058: PUSH
4059: LD_INT 23
4061: PUSH
4062: LD_INT 26
4064: PUSH
4065: LD_INT 36
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: PUSH
4082: LD_INT 101
4084: PUSH
4085: LD_INT 102
4087: PUSH
4088: LD_INT 105
4090: PUSH
4091: LD_INT 106
4093: PUSH
4094: LD_INT 108
4096: PUSH
4097: LD_INT 116
4099: PUSH
4100: LD_INT 117
4102: PUSH
4103: LD_INT 118
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: PUSH
4116: EMPTY
4117: LIST
4118: LIST
4119: ST_TO_ADDR
4120: GO 6903
4122: LD_INT 5
4124: DOUBLE
4125: EQUAL
4126: IFTRUE 4130
4128: GO 4242
4130: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
4131: LD_ADDR_VAR 0 2
4135: PUSH
4136: LD_INT 2
4138: PUSH
4139: LD_INT 4
4141: PUSH
4142: LD_INT 5
4144: PUSH
4145: LD_INT 6
4147: PUSH
4148: LD_INT 8
4150: PUSH
4151: LD_INT 11
4153: PUSH
4154: LD_INT 12
4156: PUSH
4157: LD_INT 15
4159: PUSH
4160: LD_INT 16
4162: PUSH
4163: LD_INT 22
4165: PUSH
4166: LD_INT 23
4168: PUSH
4169: LD_INT 25
4171: PUSH
4172: LD_INT 26
4174: PUSH
4175: LD_INT 36
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: LIST
4192: LIST
4193: PUSH
4194: LD_INT 101
4196: PUSH
4197: LD_INT 102
4199: PUSH
4200: LD_INT 105
4202: PUSH
4203: LD_INT 106
4205: PUSH
4206: LD_INT 108
4208: PUSH
4209: LD_INT 109
4211: PUSH
4212: LD_INT 112
4214: PUSH
4215: LD_INT 116
4217: PUSH
4218: LD_INT 117
4220: PUSH
4221: LD_INT 118
4223: PUSH
4224: EMPTY
4225: LIST
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: LIST
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: ST_TO_ADDR
4240: GO 6903
4242: LD_INT 6
4244: DOUBLE
4245: EQUAL
4246: IFTRUE 4250
4248: GO 4382
4250: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
4251: LD_ADDR_VAR 0 2
4255: PUSH
4256: LD_INT 2
4258: PUSH
4259: LD_INT 4
4261: PUSH
4262: LD_INT 5
4264: PUSH
4265: LD_INT 6
4267: PUSH
4268: LD_INT 8
4270: PUSH
4271: LD_INT 11
4273: PUSH
4274: LD_INT 12
4276: PUSH
4277: LD_INT 15
4279: PUSH
4280: LD_INT 16
4282: PUSH
4283: LD_INT 20
4285: PUSH
4286: LD_INT 21
4288: PUSH
4289: LD_INT 22
4291: PUSH
4292: LD_INT 23
4294: PUSH
4295: LD_INT 25
4297: PUSH
4298: LD_INT 26
4300: PUSH
4301: LD_INT 30
4303: PUSH
4304: LD_INT 31
4306: PUSH
4307: LD_INT 32
4309: PUSH
4310: LD_INT 36
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: PUSH
4334: LD_INT 101
4336: PUSH
4337: LD_INT 102
4339: PUSH
4340: LD_INT 105
4342: PUSH
4343: LD_INT 106
4345: PUSH
4346: LD_INT 108
4348: PUSH
4349: LD_INT 109
4351: PUSH
4352: LD_INT 112
4354: PUSH
4355: LD_INT 116
4357: PUSH
4358: LD_INT 117
4360: PUSH
4361: LD_INT 118
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: ST_TO_ADDR
4380: GO 6903
4382: LD_INT 7
4384: DOUBLE
4385: EQUAL
4386: IFTRUE 4390
4388: GO 4502
4390: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
4391: LD_ADDR_VAR 0 2
4395: PUSH
4396: LD_INT 2
4398: PUSH
4399: LD_INT 4
4401: PUSH
4402: LD_INT 5
4404: PUSH
4405: LD_INT 7
4407: PUSH
4408: LD_INT 11
4410: PUSH
4411: LD_INT 12
4413: PUSH
4414: LD_INT 15
4416: PUSH
4417: LD_INT 16
4419: PUSH
4420: LD_INT 20
4422: PUSH
4423: LD_INT 21
4425: PUSH
4426: LD_INT 22
4428: PUSH
4429: LD_INT 23
4431: PUSH
4432: LD_INT 25
4434: PUSH
4435: LD_INT 26
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: LIST
4453: PUSH
4454: LD_INT 101
4456: PUSH
4457: LD_INT 102
4459: PUSH
4460: LD_INT 103
4462: PUSH
4463: LD_INT 105
4465: PUSH
4466: LD_INT 106
4468: PUSH
4469: LD_INT 108
4471: PUSH
4472: LD_INT 112
4474: PUSH
4475: LD_INT 116
4477: PUSH
4478: LD_INT 117
4480: PUSH
4481: LD_INT 118
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: PUSH
4496: EMPTY
4497: LIST
4498: LIST
4499: ST_TO_ADDR
4500: GO 6903
4502: LD_INT 8
4504: DOUBLE
4505: EQUAL
4506: IFTRUE 4510
4508: GO 4650
4510: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4511: LD_ADDR_VAR 0 2
4515: PUSH
4516: LD_INT 2
4518: PUSH
4519: LD_INT 4
4521: PUSH
4522: LD_INT 5
4524: PUSH
4525: LD_INT 6
4527: PUSH
4528: LD_INT 7
4530: PUSH
4531: LD_INT 8
4533: PUSH
4534: LD_INT 11
4536: PUSH
4537: LD_INT 12
4539: PUSH
4540: LD_INT 15
4542: PUSH
4543: LD_INT 16
4545: PUSH
4546: LD_INT 20
4548: PUSH
4549: LD_INT 21
4551: PUSH
4552: LD_INT 22
4554: PUSH
4555: LD_INT 23
4557: PUSH
4558: LD_INT 25
4560: PUSH
4561: LD_INT 26
4563: PUSH
4564: LD_INT 30
4566: PUSH
4567: LD_INT 31
4569: PUSH
4570: LD_INT 32
4572: PUSH
4573: LD_INT 36
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: PUSH
4598: LD_INT 101
4600: PUSH
4601: LD_INT 102
4603: PUSH
4604: LD_INT 103
4606: PUSH
4607: LD_INT 105
4609: PUSH
4610: LD_INT 106
4612: PUSH
4613: LD_INT 108
4615: PUSH
4616: LD_INT 109
4618: PUSH
4619: LD_INT 112
4621: PUSH
4622: LD_INT 116
4624: PUSH
4625: LD_INT 117
4627: PUSH
4628: LD_INT 118
4630: PUSH
4631: EMPTY
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: PUSH
4644: EMPTY
4645: LIST
4646: LIST
4647: ST_TO_ADDR
4648: GO 6903
4650: LD_INT 9
4652: DOUBLE
4653: EQUAL
4654: IFTRUE 4658
4656: GO 4806
4658: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4659: LD_ADDR_VAR 0 2
4663: PUSH
4664: LD_INT 2
4666: PUSH
4667: LD_INT 4
4669: PUSH
4670: LD_INT 5
4672: PUSH
4673: LD_INT 6
4675: PUSH
4676: LD_INT 7
4678: PUSH
4679: LD_INT 8
4681: PUSH
4682: LD_INT 11
4684: PUSH
4685: LD_INT 12
4687: PUSH
4688: LD_INT 15
4690: PUSH
4691: LD_INT 16
4693: PUSH
4694: LD_INT 20
4696: PUSH
4697: LD_INT 21
4699: PUSH
4700: LD_INT 22
4702: PUSH
4703: LD_INT 23
4705: PUSH
4706: LD_INT 25
4708: PUSH
4709: LD_INT 26
4711: PUSH
4712: LD_INT 28
4714: PUSH
4715: LD_INT 30
4717: PUSH
4718: LD_INT 31
4720: PUSH
4721: LD_INT 32
4723: PUSH
4724: LD_INT 36
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: PUSH
4750: LD_INT 101
4752: PUSH
4753: LD_INT 102
4755: PUSH
4756: LD_INT 103
4758: PUSH
4759: LD_INT 105
4761: PUSH
4762: LD_INT 106
4764: PUSH
4765: LD_INT 108
4767: PUSH
4768: LD_INT 109
4770: PUSH
4771: LD_INT 112
4773: PUSH
4774: LD_INT 114
4776: PUSH
4777: LD_INT 116
4779: PUSH
4780: LD_INT 117
4782: PUSH
4783: LD_INT 118
4785: PUSH
4786: EMPTY
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: PUSH
4800: EMPTY
4801: LIST
4802: LIST
4803: ST_TO_ADDR
4804: GO 6903
4806: LD_INT 10
4808: DOUBLE
4809: EQUAL
4810: IFTRUE 4814
4812: GO 5010
4814: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4815: LD_ADDR_VAR 0 2
4819: PUSH
4820: LD_INT 2
4822: PUSH
4823: LD_INT 4
4825: PUSH
4826: LD_INT 5
4828: PUSH
4829: LD_INT 6
4831: PUSH
4832: LD_INT 7
4834: PUSH
4835: LD_INT 8
4837: PUSH
4838: LD_INT 9
4840: PUSH
4841: LD_INT 10
4843: PUSH
4844: LD_INT 11
4846: PUSH
4847: LD_INT 12
4849: PUSH
4850: LD_INT 13
4852: PUSH
4853: LD_INT 14
4855: PUSH
4856: LD_INT 15
4858: PUSH
4859: LD_INT 16
4861: PUSH
4862: LD_INT 17
4864: PUSH
4865: LD_INT 18
4867: PUSH
4868: LD_INT 19
4870: PUSH
4871: LD_INT 20
4873: PUSH
4874: LD_INT 21
4876: PUSH
4877: LD_INT 22
4879: PUSH
4880: LD_INT 23
4882: PUSH
4883: LD_INT 24
4885: PUSH
4886: LD_INT 25
4888: PUSH
4889: LD_INT 26
4891: PUSH
4892: LD_INT 28
4894: PUSH
4895: LD_INT 30
4897: PUSH
4898: LD_INT 31
4900: PUSH
4901: LD_INT 32
4903: PUSH
4904: LD_INT 36
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: LIST
4934: LIST
4935: LIST
4936: LIST
4937: PUSH
4938: LD_INT 101
4940: PUSH
4941: LD_INT 102
4943: PUSH
4944: LD_INT 103
4946: PUSH
4947: LD_INT 104
4949: PUSH
4950: LD_INT 105
4952: PUSH
4953: LD_INT 106
4955: PUSH
4956: LD_INT 107
4958: PUSH
4959: LD_INT 108
4961: PUSH
4962: LD_INT 109
4964: PUSH
4965: LD_INT 110
4967: PUSH
4968: LD_INT 111
4970: PUSH
4971: LD_INT 112
4973: PUSH
4974: LD_INT 114
4976: PUSH
4977: LD_INT 116
4979: PUSH
4980: LD_INT 117
4982: PUSH
4983: LD_INT 118
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: ST_TO_ADDR
5008: GO 6903
5010: LD_INT 11
5012: DOUBLE
5013: EQUAL
5014: IFTRUE 5018
5016: GO 5222
5018: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
5019: LD_ADDR_VAR 0 2
5023: PUSH
5024: LD_INT 2
5026: PUSH
5027: LD_INT 3
5029: PUSH
5030: LD_INT 4
5032: PUSH
5033: LD_INT 5
5035: PUSH
5036: LD_INT 6
5038: PUSH
5039: LD_INT 7
5041: PUSH
5042: LD_INT 8
5044: PUSH
5045: LD_INT 9
5047: PUSH
5048: LD_INT 10
5050: PUSH
5051: LD_INT 11
5053: PUSH
5054: LD_INT 12
5056: PUSH
5057: LD_INT 13
5059: PUSH
5060: LD_INT 14
5062: PUSH
5063: LD_INT 15
5065: PUSH
5066: LD_INT 16
5068: PUSH
5069: LD_INT 17
5071: PUSH
5072: LD_INT 18
5074: PUSH
5075: LD_INT 19
5077: PUSH
5078: LD_INT 20
5080: PUSH
5081: LD_INT 21
5083: PUSH
5084: LD_INT 22
5086: PUSH
5087: LD_INT 23
5089: PUSH
5090: LD_INT 24
5092: PUSH
5093: LD_INT 25
5095: PUSH
5096: LD_INT 26
5098: PUSH
5099: LD_INT 28
5101: PUSH
5102: LD_INT 30
5104: PUSH
5105: LD_INT 31
5107: PUSH
5108: LD_INT 32
5110: PUSH
5111: LD_INT 34
5113: PUSH
5114: LD_INT 36
5116: PUSH
5117: EMPTY
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: LIST
5148: LIST
5149: PUSH
5150: LD_INT 101
5152: PUSH
5153: LD_INT 102
5155: PUSH
5156: LD_INT 103
5158: PUSH
5159: LD_INT 104
5161: PUSH
5162: LD_INT 105
5164: PUSH
5165: LD_INT 106
5167: PUSH
5168: LD_INT 107
5170: PUSH
5171: LD_INT 108
5173: PUSH
5174: LD_INT 109
5176: PUSH
5177: LD_INT 110
5179: PUSH
5180: LD_INT 111
5182: PUSH
5183: LD_INT 112
5185: PUSH
5186: LD_INT 114
5188: PUSH
5189: LD_INT 116
5191: PUSH
5192: LD_INT 117
5194: PUSH
5195: LD_INT 118
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: ST_TO_ADDR
5220: GO 6903
5222: LD_INT 12
5224: DOUBLE
5225: EQUAL
5226: IFTRUE 5230
5228: GO 5450
5230: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
5231: LD_ADDR_VAR 0 2
5235: PUSH
5236: LD_INT 1
5238: PUSH
5239: LD_INT 2
5241: PUSH
5242: LD_INT 3
5244: PUSH
5245: LD_INT 4
5247: PUSH
5248: LD_INT 5
5250: PUSH
5251: LD_INT 6
5253: PUSH
5254: LD_INT 7
5256: PUSH
5257: LD_INT 8
5259: PUSH
5260: LD_INT 9
5262: PUSH
5263: LD_INT 10
5265: PUSH
5266: LD_INT 11
5268: PUSH
5269: LD_INT 12
5271: PUSH
5272: LD_INT 13
5274: PUSH
5275: LD_INT 14
5277: PUSH
5278: LD_INT 15
5280: PUSH
5281: LD_INT 16
5283: PUSH
5284: LD_INT 17
5286: PUSH
5287: LD_INT 18
5289: PUSH
5290: LD_INT 19
5292: PUSH
5293: LD_INT 20
5295: PUSH
5296: LD_INT 21
5298: PUSH
5299: LD_INT 22
5301: PUSH
5302: LD_INT 23
5304: PUSH
5305: LD_INT 24
5307: PUSH
5308: LD_INT 25
5310: PUSH
5311: LD_INT 26
5313: PUSH
5314: LD_INT 27
5316: PUSH
5317: LD_INT 28
5319: PUSH
5320: LD_INT 30
5322: PUSH
5323: LD_INT 31
5325: PUSH
5326: LD_INT 32
5328: PUSH
5329: LD_INT 33
5331: PUSH
5332: LD_INT 34
5334: PUSH
5335: LD_INT 36
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: LIST
5348: LIST
5349: LIST
5350: LIST
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: LIST
5356: LIST
5357: LIST
5358: LIST
5359: LIST
5360: LIST
5361: LIST
5362: LIST
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: PUSH
5374: LD_INT 101
5376: PUSH
5377: LD_INT 102
5379: PUSH
5380: LD_INT 103
5382: PUSH
5383: LD_INT 104
5385: PUSH
5386: LD_INT 105
5388: PUSH
5389: LD_INT 106
5391: PUSH
5392: LD_INT 107
5394: PUSH
5395: LD_INT 108
5397: PUSH
5398: LD_INT 109
5400: PUSH
5401: LD_INT 110
5403: PUSH
5404: LD_INT 111
5406: PUSH
5407: LD_INT 112
5409: PUSH
5410: LD_INT 113
5412: PUSH
5413: LD_INT 114
5415: PUSH
5416: LD_INT 116
5418: PUSH
5419: LD_INT 117
5421: PUSH
5422: LD_INT 118
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: ST_TO_ADDR
5448: GO 6903
5450: LD_INT 13
5452: DOUBLE
5453: EQUAL
5454: IFTRUE 5458
5456: GO 5666
5458: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
5459: LD_ADDR_VAR 0 2
5463: PUSH
5464: LD_INT 1
5466: PUSH
5467: LD_INT 2
5469: PUSH
5470: LD_INT 3
5472: PUSH
5473: LD_INT 4
5475: PUSH
5476: LD_INT 5
5478: PUSH
5479: LD_INT 8
5481: PUSH
5482: LD_INT 9
5484: PUSH
5485: LD_INT 10
5487: PUSH
5488: LD_INT 11
5490: PUSH
5491: LD_INT 12
5493: PUSH
5494: LD_INT 14
5496: PUSH
5497: LD_INT 15
5499: PUSH
5500: LD_INT 16
5502: PUSH
5503: LD_INT 17
5505: PUSH
5506: LD_INT 18
5508: PUSH
5509: LD_INT 19
5511: PUSH
5512: LD_INT 20
5514: PUSH
5515: LD_INT 21
5517: PUSH
5518: LD_INT 22
5520: PUSH
5521: LD_INT 23
5523: PUSH
5524: LD_INT 24
5526: PUSH
5527: LD_INT 25
5529: PUSH
5530: LD_INT 26
5532: PUSH
5533: LD_INT 27
5535: PUSH
5536: LD_INT 28
5538: PUSH
5539: LD_INT 30
5541: PUSH
5542: LD_INT 31
5544: PUSH
5545: LD_INT 32
5547: PUSH
5548: LD_INT 33
5550: PUSH
5551: LD_INT 34
5553: PUSH
5554: LD_INT 36
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: PUSH
5590: LD_INT 101
5592: PUSH
5593: LD_INT 102
5595: PUSH
5596: LD_INT 103
5598: PUSH
5599: LD_INT 104
5601: PUSH
5602: LD_INT 105
5604: PUSH
5605: LD_INT 106
5607: PUSH
5608: LD_INT 107
5610: PUSH
5611: LD_INT 108
5613: PUSH
5614: LD_INT 109
5616: PUSH
5617: LD_INT 110
5619: PUSH
5620: LD_INT 111
5622: PUSH
5623: LD_INT 112
5625: PUSH
5626: LD_INT 113
5628: PUSH
5629: LD_INT 114
5631: PUSH
5632: LD_INT 116
5634: PUSH
5635: LD_INT 117
5637: PUSH
5638: LD_INT 118
5640: PUSH
5641: EMPTY
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: LIST
5657: LIST
5658: LIST
5659: PUSH
5660: EMPTY
5661: LIST
5662: LIST
5663: ST_TO_ADDR
5664: GO 6903
5666: LD_INT 14
5668: DOUBLE
5669: EQUAL
5670: IFTRUE 5674
5672: GO 5898
5674: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5675: LD_ADDR_VAR 0 2
5679: PUSH
5680: LD_INT 1
5682: PUSH
5683: LD_INT 2
5685: PUSH
5686: LD_INT 3
5688: PUSH
5689: LD_INT 4
5691: PUSH
5692: LD_INT 5
5694: PUSH
5695: LD_INT 6
5697: PUSH
5698: LD_INT 7
5700: PUSH
5701: LD_INT 8
5703: PUSH
5704: LD_INT 9
5706: PUSH
5707: LD_INT 10
5709: PUSH
5710: LD_INT 11
5712: PUSH
5713: LD_INT 12
5715: PUSH
5716: LD_INT 13
5718: PUSH
5719: LD_INT 14
5721: PUSH
5722: LD_INT 15
5724: PUSH
5725: LD_INT 16
5727: PUSH
5728: LD_INT 17
5730: PUSH
5731: LD_INT 18
5733: PUSH
5734: LD_INT 19
5736: PUSH
5737: LD_INT 20
5739: PUSH
5740: LD_INT 21
5742: PUSH
5743: LD_INT 22
5745: PUSH
5746: LD_INT 23
5748: PUSH
5749: LD_INT 24
5751: PUSH
5752: LD_INT 25
5754: PUSH
5755: LD_INT 26
5757: PUSH
5758: LD_INT 27
5760: PUSH
5761: LD_INT 28
5763: PUSH
5764: LD_INT 29
5766: PUSH
5767: LD_INT 30
5769: PUSH
5770: LD_INT 31
5772: PUSH
5773: LD_INT 32
5775: PUSH
5776: LD_INT 33
5778: PUSH
5779: LD_INT 34
5781: PUSH
5782: LD_INT 36
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: LIST
5799: LIST
5800: LIST
5801: LIST
5802: LIST
5803: LIST
5804: LIST
5805: LIST
5806: LIST
5807: LIST
5808: LIST
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: LIST
5814: LIST
5815: LIST
5816: LIST
5817: LIST
5818: LIST
5819: LIST
5820: LIST
5821: PUSH
5822: LD_INT 101
5824: PUSH
5825: LD_INT 102
5827: PUSH
5828: LD_INT 103
5830: PUSH
5831: LD_INT 104
5833: PUSH
5834: LD_INT 105
5836: PUSH
5837: LD_INT 106
5839: PUSH
5840: LD_INT 107
5842: PUSH
5843: LD_INT 108
5845: PUSH
5846: LD_INT 109
5848: PUSH
5849: LD_INT 110
5851: PUSH
5852: LD_INT 111
5854: PUSH
5855: LD_INT 112
5857: PUSH
5858: LD_INT 113
5860: PUSH
5861: LD_INT 114
5863: PUSH
5864: LD_INT 116
5866: PUSH
5867: LD_INT 117
5869: PUSH
5870: LD_INT 118
5872: PUSH
5873: EMPTY
5874: LIST
5875: LIST
5876: LIST
5877: LIST
5878: LIST
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: ST_TO_ADDR
5896: GO 6903
5898: LD_INT 15
5900: DOUBLE
5901: EQUAL
5902: IFTRUE 5906
5904: GO 6130
5906: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5907: LD_ADDR_VAR 0 2
5911: PUSH
5912: LD_INT 1
5914: PUSH
5915: LD_INT 2
5917: PUSH
5918: LD_INT 3
5920: PUSH
5921: LD_INT 4
5923: PUSH
5924: LD_INT 5
5926: PUSH
5927: LD_INT 6
5929: PUSH
5930: LD_INT 7
5932: PUSH
5933: LD_INT 8
5935: PUSH
5936: LD_INT 9
5938: PUSH
5939: LD_INT 10
5941: PUSH
5942: LD_INT 11
5944: PUSH
5945: LD_INT 12
5947: PUSH
5948: LD_INT 13
5950: PUSH
5951: LD_INT 14
5953: PUSH
5954: LD_INT 15
5956: PUSH
5957: LD_INT 16
5959: PUSH
5960: LD_INT 17
5962: PUSH
5963: LD_INT 18
5965: PUSH
5966: LD_INT 19
5968: PUSH
5969: LD_INT 20
5971: PUSH
5972: LD_INT 21
5974: PUSH
5975: LD_INT 22
5977: PUSH
5978: LD_INT 23
5980: PUSH
5981: LD_INT 24
5983: PUSH
5984: LD_INT 25
5986: PUSH
5987: LD_INT 26
5989: PUSH
5990: LD_INT 27
5992: PUSH
5993: LD_INT 28
5995: PUSH
5996: LD_INT 29
5998: PUSH
5999: LD_INT 30
6001: PUSH
6002: LD_INT 31
6004: PUSH
6005: LD_INT 32
6007: PUSH
6008: LD_INT 33
6010: PUSH
6011: LD_INT 34
6013: PUSH
6014: LD_INT 36
6016: PUSH
6017: EMPTY
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: PUSH
6054: LD_INT 101
6056: PUSH
6057: LD_INT 102
6059: PUSH
6060: LD_INT 103
6062: PUSH
6063: LD_INT 104
6065: PUSH
6066: LD_INT 105
6068: PUSH
6069: LD_INT 106
6071: PUSH
6072: LD_INT 107
6074: PUSH
6075: LD_INT 108
6077: PUSH
6078: LD_INT 109
6080: PUSH
6081: LD_INT 110
6083: PUSH
6084: LD_INT 111
6086: PUSH
6087: LD_INT 112
6089: PUSH
6090: LD_INT 113
6092: PUSH
6093: LD_INT 114
6095: PUSH
6096: LD_INT 116
6098: PUSH
6099: LD_INT 117
6101: PUSH
6102: LD_INT 118
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: ST_TO_ADDR
6128: GO 6903
6130: LD_INT 16
6132: DOUBLE
6133: EQUAL
6134: IFTRUE 6138
6136: GO 6274
6138: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
6139: LD_ADDR_VAR 0 2
6143: PUSH
6144: LD_INT 2
6146: PUSH
6147: LD_INT 4
6149: PUSH
6150: LD_INT 5
6152: PUSH
6153: LD_INT 7
6155: PUSH
6156: LD_INT 11
6158: PUSH
6159: LD_INT 12
6161: PUSH
6162: LD_INT 15
6164: PUSH
6165: LD_INT 16
6167: PUSH
6168: LD_INT 20
6170: PUSH
6171: LD_INT 21
6173: PUSH
6174: LD_INT 22
6176: PUSH
6177: LD_INT 23
6179: PUSH
6180: LD_INT 25
6182: PUSH
6183: LD_INT 26
6185: PUSH
6186: LD_INT 30
6188: PUSH
6189: LD_INT 31
6191: PUSH
6192: LD_INT 32
6194: PUSH
6195: LD_INT 33
6197: PUSH
6198: LD_INT 34
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: LIST
6218: LIST
6219: LIST
6220: LIST
6221: PUSH
6222: LD_INT 101
6224: PUSH
6225: LD_INT 102
6227: PUSH
6228: LD_INT 103
6230: PUSH
6231: LD_INT 106
6233: PUSH
6234: LD_INT 108
6236: PUSH
6237: LD_INT 112
6239: PUSH
6240: LD_INT 113
6242: PUSH
6243: LD_INT 114
6245: PUSH
6246: LD_INT 116
6248: PUSH
6249: LD_INT 117
6251: PUSH
6252: LD_INT 118
6254: PUSH
6255: EMPTY
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: LIST
6267: PUSH
6268: EMPTY
6269: LIST
6270: LIST
6271: ST_TO_ADDR
6272: GO 6903
6274: LD_INT 17
6276: DOUBLE
6277: EQUAL
6278: IFTRUE 6282
6280: GO 6506
6282: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
6283: LD_ADDR_VAR 0 2
6287: PUSH
6288: LD_INT 1
6290: PUSH
6291: LD_INT 2
6293: PUSH
6294: LD_INT 3
6296: PUSH
6297: LD_INT 4
6299: PUSH
6300: LD_INT 5
6302: PUSH
6303: LD_INT 6
6305: PUSH
6306: LD_INT 7
6308: PUSH
6309: LD_INT 8
6311: PUSH
6312: LD_INT 9
6314: PUSH
6315: LD_INT 10
6317: PUSH
6318: LD_INT 11
6320: PUSH
6321: LD_INT 12
6323: PUSH
6324: LD_INT 13
6326: PUSH
6327: LD_INT 14
6329: PUSH
6330: LD_INT 15
6332: PUSH
6333: LD_INT 16
6335: PUSH
6336: LD_INT 17
6338: PUSH
6339: LD_INT 18
6341: PUSH
6342: LD_INT 19
6344: PUSH
6345: LD_INT 20
6347: PUSH
6348: LD_INT 21
6350: PUSH
6351: LD_INT 22
6353: PUSH
6354: LD_INT 23
6356: PUSH
6357: LD_INT 24
6359: PUSH
6360: LD_INT 25
6362: PUSH
6363: LD_INT 26
6365: PUSH
6366: LD_INT 27
6368: PUSH
6369: LD_INT 28
6371: PUSH
6372: LD_INT 29
6374: PUSH
6375: LD_INT 30
6377: PUSH
6378: LD_INT 31
6380: PUSH
6381: LD_INT 32
6383: PUSH
6384: LD_INT 33
6386: PUSH
6387: LD_INT 34
6389: PUSH
6390: LD_INT 36
6392: PUSH
6393: EMPTY
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: PUSH
6430: LD_INT 101
6432: PUSH
6433: LD_INT 102
6435: PUSH
6436: LD_INT 103
6438: PUSH
6439: LD_INT 104
6441: PUSH
6442: LD_INT 105
6444: PUSH
6445: LD_INT 106
6447: PUSH
6448: LD_INT 107
6450: PUSH
6451: LD_INT 108
6453: PUSH
6454: LD_INT 109
6456: PUSH
6457: LD_INT 110
6459: PUSH
6460: LD_INT 111
6462: PUSH
6463: LD_INT 112
6465: PUSH
6466: LD_INT 113
6468: PUSH
6469: LD_INT 114
6471: PUSH
6472: LD_INT 116
6474: PUSH
6475: LD_INT 117
6477: PUSH
6478: LD_INT 118
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: ST_TO_ADDR
6504: GO 6903
6506: LD_INT 18
6508: DOUBLE
6509: EQUAL
6510: IFTRUE 6514
6512: GO 6662
6514: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6515: LD_ADDR_VAR 0 2
6519: PUSH
6520: LD_INT 2
6522: PUSH
6523: LD_INT 4
6525: PUSH
6526: LD_INT 5
6528: PUSH
6529: LD_INT 7
6531: PUSH
6532: LD_INT 11
6534: PUSH
6535: LD_INT 12
6537: PUSH
6538: LD_INT 15
6540: PUSH
6541: LD_INT 16
6543: PUSH
6544: LD_INT 20
6546: PUSH
6547: LD_INT 21
6549: PUSH
6550: LD_INT 22
6552: PUSH
6553: LD_INT 23
6555: PUSH
6556: LD_INT 25
6558: PUSH
6559: LD_INT 26
6561: PUSH
6562: LD_INT 30
6564: PUSH
6565: LD_INT 31
6567: PUSH
6568: LD_INT 32
6570: PUSH
6571: LD_INT 33
6573: PUSH
6574: LD_INT 34
6576: PUSH
6577: LD_INT 35
6579: PUSH
6580: LD_INT 36
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: PUSH
6606: LD_INT 101
6608: PUSH
6609: LD_INT 102
6611: PUSH
6612: LD_INT 103
6614: PUSH
6615: LD_INT 106
6617: PUSH
6618: LD_INT 108
6620: PUSH
6621: LD_INT 112
6623: PUSH
6624: LD_INT 113
6626: PUSH
6627: LD_INT 114
6629: PUSH
6630: LD_INT 115
6632: PUSH
6633: LD_INT 116
6635: PUSH
6636: LD_INT 117
6638: PUSH
6639: LD_INT 118
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: ST_TO_ADDR
6660: GO 6903
6662: LD_INT 19
6664: DOUBLE
6665: EQUAL
6666: IFTRUE 6670
6668: GO 6902
6670: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6671: LD_ADDR_VAR 0 2
6675: PUSH
6676: LD_INT 1
6678: PUSH
6679: LD_INT 2
6681: PUSH
6682: LD_INT 3
6684: PUSH
6685: LD_INT 4
6687: PUSH
6688: LD_INT 5
6690: PUSH
6691: LD_INT 6
6693: PUSH
6694: LD_INT 7
6696: PUSH
6697: LD_INT 8
6699: PUSH
6700: LD_INT 9
6702: PUSH
6703: LD_INT 10
6705: PUSH
6706: LD_INT 11
6708: PUSH
6709: LD_INT 12
6711: PUSH
6712: LD_INT 13
6714: PUSH
6715: LD_INT 14
6717: PUSH
6718: LD_INT 15
6720: PUSH
6721: LD_INT 16
6723: PUSH
6724: LD_INT 17
6726: PUSH
6727: LD_INT 18
6729: PUSH
6730: LD_INT 19
6732: PUSH
6733: LD_INT 20
6735: PUSH
6736: LD_INT 21
6738: PUSH
6739: LD_INT 22
6741: PUSH
6742: LD_INT 23
6744: PUSH
6745: LD_INT 24
6747: PUSH
6748: LD_INT 25
6750: PUSH
6751: LD_INT 26
6753: PUSH
6754: LD_INT 27
6756: PUSH
6757: LD_INT 28
6759: PUSH
6760: LD_INT 29
6762: PUSH
6763: LD_INT 30
6765: PUSH
6766: LD_INT 31
6768: PUSH
6769: LD_INT 32
6771: PUSH
6772: LD_INT 33
6774: PUSH
6775: LD_INT 34
6777: PUSH
6778: LD_INT 35
6780: PUSH
6781: LD_INT 36
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: PUSH
6822: LD_INT 101
6824: PUSH
6825: LD_INT 102
6827: PUSH
6828: LD_INT 103
6830: PUSH
6831: LD_INT 104
6833: PUSH
6834: LD_INT 105
6836: PUSH
6837: LD_INT 106
6839: PUSH
6840: LD_INT 107
6842: PUSH
6843: LD_INT 108
6845: PUSH
6846: LD_INT 109
6848: PUSH
6849: LD_INT 110
6851: PUSH
6852: LD_INT 111
6854: PUSH
6855: LD_INT 112
6857: PUSH
6858: LD_INT 113
6860: PUSH
6861: LD_INT 114
6863: PUSH
6864: LD_INT 115
6866: PUSH
6867: LD_INT 116
6869: PUSH
6870: LD_INT 117
6872: PUSH
6873: LD_INT 118
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: ST_TO_ADDR
6900: GO 6903
6902: POP
// end else
6903: GO 7134
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6905: LD_ADDR_VAR 0 2
6909: PUSH
6910: LD_INT 1
6912: PUSH
6913: LD_INT 2
6915: PUSH
6916: LD_INT 3
6918: PUSH
6919: LD_INT 4
6921: PUSH
6922: LD_INT 5
6924: PUSH
6925: LD_INT 6
6927: PUSH
6928: LD_INT 7
6930: PUSH
6931: LD_INT 8
6933: PUSH
6934: LD_INT 9
6936: PUSH
6937: LD_INT 10
6939: PUSH
6940: LD_INT 11
6942: PUSH
6943: LD_INT 12
6945: PUSH
6946: LD_INT 13
6948: PUSH
6949: LD_INT 14
6951: PUSH
6952: LD_INT 15
6954: PUSH
6955: LD_INT 16
6957: PUSH
6958: LD_INT 17
6960: PUSH
6961: LD_INT 18
6963: PUSH
6964: LD_INT 19
6966: PUSH
6967: LD_INT 20
6969: PUSH
6970: LD_INT 21
6972: PUSH
6973: LD_INT 22
6975: PUSH
6976: LD_INT 23
6978: PUSH
6979: LD_INT 24
6981: PUSH
6982: LD_INT 25
6984: PUSH
6985: LD_INT 26
6987: PUSH
6988: LD_INT 27
6990: PUSH
6991: LD_INT 28
6993: PUSH
6994: LD_INT 29
6996: PUSH
6997: LD_INT 30
6999: PUSH
7000: LD_INT 31
7002: PUSH
7003: LD_INT 32
7005: PUSH
7006: LD_INT 33
7008: PUSH
7009: LD_INT 34
7011: PUSH
7012: LD_INT 35
7014: PUSH
7015: LD_INT 36
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: PUSH
7056: LD_INT 101
7058: PUSH
7059: LD_INT 102
7061: PUSH
7062: LD_INT 103
7064: PUSH
7065: LD_INT 104
7067: PUSH
7068: LD_INT 105
7070: PUSH
7071: LD_INT 106
7073: PUSH
7074: LD_INT 107
7076: PUSH
7077: LD_INT 108
7079: PUSH
7080: LD_INT 109
7082: PUSH
7083: LD_INT 110
7085: PUSH
7086: LD_INT 111
7088: PUSH
7089: LD_INT 112
7091: PUSH
7092: LD_INT 113
7094: PUSH
7095: LD_INT 114
7097: PUSH
7098: LD_INT 115
7100: PUSH
7101: LD_INT 116
7103: PUSH
7104: LD_INT 117
7106: PUSH
7107: LD_INT 118
7109: PUSH
7110: EMPTY
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: ST_TO_ADDR
// if result then
7134: LD_VAR 0 2
7138: IFFALSE 7924
// begin normal :=  ;
7140: LD_ADDR_VAR 0 5
7144: PUSH
7145: LD_STRING 
7147: ST_TO_ADDR
// hardcore :=  ;
7148: LD_ADDR_VAR 0 6
7152: PUSH
7153: LD_STRING 
7155: ST_TO_ADDR
// active :=  ;
7156: LD_ADDR_VAR 0 7
7160: PUSH
7161: LD_STRING 
7163: ST_TO_ADDR
// for i = 1 to normalCounter do
7164: LD_ADDR_VAR 0 8
7168: PUSH
7169: DOUBLE
7170: LD_INT 1
7172: DEC
7173: ST_TO_ADDR
7174: LD_EXP 9
7178: PUSH
7179: FOR_TO
7180: IFFALSE 7281
// begin tmp := 0 ;
7182: LD_ADDR_VAR 0 3
7186: PUSH
7187: LD_STRING 0
7189: ST_TO_ADDR
// if result [ 1 ] then
7190: LD_VAR 0 2
7194: PUSH
7195: LD_INT 1
7197: ARRAY
7198: IFFALSE 7263
// if result [ 1 ] [ 1 ] = i then
7200: LD_VAR 0 2
7204: PUSH
7205: LD_INT 1
7207: ARRAY
7208: PUSH
7209: LD_INT 1
7211: ARRAY
7212: PUSH
7213: LD_VAR 0 8
7217: EQUAL
7218: IFFALSE 7263
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7220: LD_ADDR_VAR 0 2
7224: PUSH
7225: LD_VAR 0 2
7229: PPUSH
7230: LD_INT 1
7232: PPUSH
7233: LD_VAR 0 2
7237: PUSH
7238: LD_INT 1
7240: ARRAY
7241: PPUSH
7242: LD_INT 1
7244: PPUSH
7245: CALL_OW 3
7249: PPUSH
7250: CALL_OW 1
7254: ST_TO_ADDR
// tmp := 1 ;
7255: LD_ADDR_VAR 0 3
7259: PUSH
7260: LD_STRING 1
7262: ST_TO_ADDR
// end ; normal := normal & tmp ;
7263: LD_ADDR_VAR 0 5
7267: PUSH
7268: LD_VAR 0 5
7272: PUSH
7273: LD_VAR 0 3
7277: STR
7278: ST_TO_ADDR
// end ;
7279: GO 7179
7281: POP
7282: POP
// for i = 1 to hardcoreCounter do
7283: LD_ADDR_VAR 0 8
7287: PUSH
7288: DOUBLE
7289: LD_INT 1
7291: DEC
7292: ST_TO_ADDR
7293: LD_EXP 10
7297: PUSH
7298: FOR_TO
7299: IFFALSE 7404
// begin tmp := 0 ;
7301: LD_ADDR_VAR 0 3
7305: PUSH
7306: LD_STRING 0
7308: ST_TO_ADDR
// if result [ 2 ] then
7309: LD_VAR 0 2
7313: PUSH
7314: LD_INT 2
7316: ARRAY
7317: IFFALSE 7386
// if result [ 2 ] [ 1 ] = 100 + i then
7319: LD_VAR 0 2
7323: PUSH
7324: LD_INT 2
7326: ARRAY
7327: PUSH
7328: LD_INT 1
7330: ARRAY
7331: PUSH
7332: LD_INT 100
7334: PUSH
7335: LD_VAR 0 8
7339: PLUS
7340: EQUAL
7341: IFFALSE 7386
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7343: LD_ADDR_VAR 0 2
7347: PUSH
7348: LD_VAR 0 2
7352: PPUSH
7353: LD_INT 2
7355: PPUSH
7356: LD_VAR 0 2
7360: PUSH
7361: LD_INT 2
7363: ARRAY
7364: PPUSH
7365: LD_INT 1
7367: PPUSH
7368: CALL_OW 3
7372: PPUSH
7373: CALL_OW 1
7377: ST_TO_ADDR
// tmp := 1 ;
7378: LD_ADDR_VAR 0 3
7382: PUSH
7383: LD_STRING 1
7385: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7386: LD_ADDR_VAR 0 6
7390: PUSH
7391: LD_VAR 0 6
7395: PUSH
7396: LD_VAR 0 3
7400: STR
7401: ST_TO_ADDR
// end ;
7402: GO 7298
7404: POP
7405: POP
// if isGameLoad then
7406: LD_VAR 0 1
7410: IFFALSE 7885
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
7412: LD_ADDR_VAR 0 4
7416: PUSH
7417: LD_EXP 13
7421: PUSH
7422: LD_EXP 12
7426: PUSH
7427: LD_EXP 14
7431: PUSH
7432: LD_EXP 11
7436: PUSH
7437: LD_EXP 15
7441: PUSH
7442: LD_EXP 16
7446: PUSH
7447: LD_EXP 17
7451: PUSH
7452: LD_EXP 18
7456: PUSH
7457: LD_EXP 19
7461: PUSH
7462: LD_EXP 20
7466: PUSH
7467: LD_EXP 21
7471: PUSH
7472: LD_EXP 22
7476: PUSH
7477: LD_EXP 23
7481: PUSH
7482: LD_EXP 24
7486: PUSH
7487: LD_EXP 32
7491: PUSH
7492: LD_EXP 33
7496: PUSH
7497: LD_EXP 34
7501: PUSH
7502: LD_EXP 35
7506: PUSH
7507: LD_EXP 37
7511: PUSH
7512: LD_EXP 38
7516: PUSH
7517: LD_EXP 39
7521: PUSH
7522: LD_EXP 42
7526: PUSH
7527: LD_EXP 44
7531: PUSH
7532: LD_EXP 45
7536: PUSH
7537: LD_EXP 46
7541: PUSH
7542: LD_EXP 48
7546: PUSH
7547: LD_EXP 49
7551: PUSH
7552: LD_EXP 52
7556: PUSH
7557: LD_EXP 53
7561: PUSH
7562: LD_EXP 54
7566: PUSH
7567: LD_EXP 55
7571: PUSH
7572: LD_EXP 56
7576: PUSH
7577: LD_EXP 57
7581: PUSH
7582: LD_EXP 58
7586: PUSH
7587: LD_EXP 59
7591: PUSH
7592: LD_EXP 60
7596: PUSH
7597: LD_EXP 25
7601: PUSH
7602: LD_EXP 26
7606: PUSH
7607: LD_EXP 29
7611: PUSH
7612: LD_EXP 30
7616: PUSH
7617: LD_EXP 31
7621: PUSH
7622: LD_EXP 27
7626: PUSH
7627: LD_EXP 28
7631: PUSH
7632: LD_EXP 36
7636: PUSH
7637: LD_EXP 40
7641: PUSH
7642: LD_EXP 41
7646: PUSH
7647: LD_EXP 43
7651: PUSH
7652: LD_EXP 47
7656: PUSH
7657: LD_EXP 50
7661: PUSH
7662: LD_EXP 51
7666: PUSH
7667: LD_EXP 61
7671: PUSH
7672: LD_EXP 62
7676: PUSH
7677: LD_EXP 63
7681: PUSH
7682: LD_EXP 64
7686: PUSH
7687: EMPTY
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: ST_TO_ADDR
// tmp :=  ;
7743: LD_ADDR_VAR 0 3
7747: PUSH
7748: LD_STRING 
7750: ST_TO_ADDR
// for i = 1 to normalCounter do
7751: LD_ADDR_VAR 0 8
7755: PUSH
7756: DOUBLE
7757: LD_INT 1
7759: DEC
7760: ST_TO_ADDR
7761: LD_EXP 9
7765: PUSH
7766: FOR_TO
7767: IFFALSE 7803
// begin if flags [ i ] then
7769: LD_VAR 0 4
7773: PUSH
7774: LD_VAR 0 8
7778: ARRAY
7779: IFFALSE 7801
// tmp := tmp & i & ; ;
7781: LD_ADDR_VAR 0 3
7785: PUSH
7786: LD_VAR 0 3
7790: PUSH
7791: LD_VAR 0 8
7795: STR
7796: PUSH
7797: LD_STRING ;
7799: STR
7800: ST_TO_ADDR
// end ;
7801: GO 7766
7803: POP
7804: POP
// for i = 1 to hardcoreCounter do
7805: LD_ADDR_VAR 0 8
7809: PUSH
7810: DOUBLE
7811: LD_INT 1
7813: DEC
7814: ST_TO_ADDR
7815: LD_EXP 10
7819: PUSH
7820: FOR_TO
7821: IFFALSE 7867
// begin if flags [ normalCounter + i ] then
7823: LD_VAR 0 4
7827: PUSH
7828: LD_EXP 9
7832: PUSH
7833: LD_VAR 0 8
7837: PLUS
7838: ARRAY
7839: IFFALSE 7865
// tmp := tmp & ( 100 + i ) & ; ;
7841: LD_ADDR_VAR 0 3
7845: PUSH
7846: LD_VAR 0 3
7850: PUSH
7851: LD_INT 100
7853: PUSH
7854: LD_VAR 0 8
7858: PLUS
7859: STR
7860: PUSH
7861: LD_STRING ;
7863: STR
7864: ST_TO_ADDR
// end ;
7865: GO 7820
7867: POP
7868: POP
// if tmp then
7869: LD_VAR 0 3
7873: IFFALSE 7885
// active := tmp ;
7875: LD_ADDR_VAR 0 7
7879: PUSH
7880: LD_VAR 0 3
7884: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7885: LD_STRING getStreamItemsFromMission("
7887: PUSH
7888: LD_VAR 0 5
7892: STR
7893: PUSH
7894: LD_STRING ","
7896: STR
7897: PUSH
7898: LD_VAR 0 6
7902: STR
7903: PUSH
7904: LD_STRING ","
7906: STR
7907: PUSH
7908: LD_VAR 0 7
7912: STR
7913: PUSH
7914: LD_STRING ")
7916: STR
7917: PPUSH
7918: CALL_OW 559
// end else
7922: GO 7931
// ToLua ( getStreamItemsFromMission("","","") ) ;
7924: LD_STRING getStreamItemsFromMission("","","")
7926: PPUSH
7927: CALL_OW 559
// end ;
7931: LD_VAR 0 2
7935: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7936: LD_EXP 8
7940: IFFALSE 7948
7942: PUSH
7943: LD_EXP 13
7947: AND
7948: IFFALSE 8072
7950: GO 7952
7952: DISABLE
7953: LD_INT 0
7955: PPUSH
7956: PPUSH
// begin enable ;
7957: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7958: LD_ADDR_VAR 0 2
7962: PUSH
7963: LD_INT 22
7965: PUSH
7966: LD_OWVAR 2
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 2
7977: PUSH
7978: LD_INT 34
7980: PUSH
7981: LD_INT 7
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PUSH
7988: LD_INT 34
7990: PUSH
7991: LD_INT 45
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: PUSH
7998: LD_INT 34
8000: PUSH
8001: LD_INT 28
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: PUSH
8008: LD_INT 34
8010: PUSH
8011: LD_INT 47
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: PUSH
8018: EMPTY
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: PPUSH
8029: CALL_OW 69
8033: ST_TO_ADDR
// if not tmp then
8034: LD_VAR 0 2
8038: NOT
8039: IFFALSE 8043
// exit ;
8041: GO 8072
// for i in tmp do
8043: LD_ADDR_VAR 0 1
8047: PUSH
8048: LD_VAR 0 2
8052: PUSH
8053: FOR_IN
8054: IFFALSE 8070
// begin SetLives ( i , 0 ) ;
8056: LD_VAR 0 1
8060: PPUSH
8061: LD_INT 0
8063: PPUSH
8064: CALL_OW 234
// end ;
8068: GO 8053
8070: POP
8071: POP
// end ;
8072: PPOPN 2
8074: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
8075: LD_EXP 8
8079: IFFALSE 8087
8081: PUSH
8082: LD_EXP 14
8086: AND
8087: IFFALSE 8171
8089: GO 8091
8091: DISABLE
8092: LD_INT 0
8094: PPUSH
8095: PPUSH
// begin enable ;
8096: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
8097: LD_ADDR_VAR 0 2
8101: PUSH
8102: LD_INT 22
8104: PUSH
8105: LD_OWVAR 2
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: PUSH
8114: LD_INT 32
8116: PUSH
8117: LD_INT 3
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: PPUSH
8128: CALL_OW 69
8132: ST_TO_ADDR
// if not tmp then
8133: LD_VAR 0 2
8137: NOT
8138: IFFALSE 8142
// exit ;
8140: GO 8171
// for i in tmp do
8142: LD_ADDR_VAR 0 1
8146: PUSH
8147: LD_VAR 0 2
8151: PUSH
8152: FOR_IN
8153: IFFALSE 8169
// begin SetLives ( i , 0 ) ;
8155: LD_VAR 0 1
8159: PPUSH
8160: LD_INT 0
8162: PPUSH
8163: CALL_OW 234
// end ;
8167: GO 8152
8169: POP
8170: POP
// end ;
8171: PPOPN 2
8173: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
8174: LD_EXP 8
8178: IFFALSE 8186
8180: PUSH
8181: LD_EXP 11
8185: AND
8186: IFFALSE 8279
8188: GO 8190
8190: DISABLE
8191: LD_INT 0
8193: PPUSH
// begin enable ;
8194: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
8195: LD_ADDR_VAR 0 1
8199: PUSH
8200: LD_INT 22
8202: PUSH
8203: LD_OWVAR 2
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: PUSH
8212: LD_INT 2
8214: PUSH
8215: LD_INT 25
8217: PUSH
8218: LD_INT 5
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: PUSH
8225: LD_INT 25
8227: PUSH
8228: LD_INT 9
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: PUSH
8235: LD_INT 25
8237: PUSH
8238: LD_INT 8
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: PUSH
8251: EMPTY
8252: LIST
8253: LIST
8254: PPUSH
8255: CALL_OW 69
8259: PUSH
8260: FOR_IN
8261: IFFALSE 8277
// begin SetClass ( i , 1 ) ;
8263: LD_VAR 0 1
8267: PPUSH
8268: LD_INT 1
8270: PPUSH
8271: CALL_OW 336
// end ;
8275: GO 8260
8277: POP
8278: POP
// end ;
8279: PPOPN 1
8281: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
8282: LD_EXP 8
8286: IFFALSE 8294
8288: PUSH
8289: LD_EXP 12
8293: AND
8294: IFFALSE 8306
8296: PUSH
8297: LD_OWVAR 65
8301: PUSH
8302: LD_INT 7
8304: LESS
8305: AND
8306: IFFALSE 8320
8308: GO 8310
8310: DISABLE
// begin enable ;
8311: ENABLE
// game_speed := 7 ;
8312: LD_ADDR_OWVAR 65
8316: PUSH
8317: LD_INT 7
8319: ST_TO_ADDR
// end ;
8320: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
8321: LD_EXP 8
8325: IFFALSE 8333
8327: PUSH
8328: LD_EXP 15
8332: AND
8333: IFFALSE 8535
8335: GO 8337
8337: DISABLE
8338: LD_INT 0
8340: PPUSH
8341: PPUSH
8342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
8343: LD_ADDR_VAR 0 3
8347: PUSH
8348: LD_INT 81
8350: PUSH
8351: LD_OWVAR 2
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: PUSH
8360: LD_INT 21
8362: PUSH
8363: LD_INT 1
8365: PUSH
8366: EMPTY
8367: LIST
8368: LIST
8369: PUSH
8370: EMPTY
8371: LIST
8372: LIST
8373: PPUSH
8374: CALL_OW 69
8378: ST_TO_ADDR
// if not tmp then
8379: LD_VAR 0 3
8383: NOT
8384: IFFALSE 8388
// exit ;
8386: GO 8535
// if tmp > 5 then
8388: LD_VAR 0 3
8392: PUSH
8393: LD_INT 5
8395: GREATER
8396: IFFALSE 8408
// k := 5 else
8398: LD_ADDR_VAR 0 2
8402: PUSH
8403: LD_INT 5
8405: ST_TO_ADDR
8406: GO 8418
// k := tmp ;
8408: LD_ADDR_VAR 0 2
8412: PUSH
8413: LD_VAR 0 3
8417: ST_TO_ADDR
// for i := 1 to k do
8418: LD_ADDR_VAR 0 1
8422: PUSH
8423: DOUBLE
8424: LD_INT 1
8426: DEC
8427: ST_TO_ADDR
8428: LD_VAR 0 2
8432: PUSH
8433: FOR_TO
8434: IFFALSE 8533
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
8436: LD_VAR 0 3
8440: PUSH
8441: LD_VAR 0 1
8445: ARRAY
8446: PPUSH
8447: LD_VAR 0 1
8451: PUSH
8452: LD_INT 4
8454: MOD
8455: PUSH
8456: LD_INT 1
8458: PLUS
8459: PPUSH
8460: CALL_OW 259
8464: PUSH
8465: LD_INT 10
8467: LESS
8468: IFFALSE 8531
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
8470: LD_VAR 0 3
8474: PUSH
8475: LD_VAR 0 1
8479: ARRAY
8480: PPUSH
8481: LD_VAR 0 1
8485: PUSH
8486: LD_INT 4
8488: MOD
8489: PUSH
8490: LD_INT 1
8492: PLUS
8493: PPUSH
8494: LD_VAR 0 3
8498: PUSH
8499: LD_VAR 0 1
8503: ARRAY
8504: PPUSH
8505: LD_VAR 0 1
8509: PUSH
8510: LD_INT 4
8512: MOD
8513: PUSH
8514: LD_INT 1
8516: PLUS
8517: PPUSH
8518: CALL_OW 259
8522: PUSH
8523: LD_INT 1
8525: PLUS
8526: PPUSH
8527: CALL_OW 237
8531: GO 8433
8533: POP
8534: POP
// end ;
8535: PPOPN 3
8537: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8538: LD_EXP 8
8542: IFFALSE 8550
8544: PUSH
8545: LD_EXP 16
8549: AND
8550: IFFALSE 8570
8552: GO 8554
8554: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8555: LD_INT 4
8557: PPUSH
8558: LD_OWVAR 2
8562: PPUSH
8563: LD_INT 0
8565: PPUSH
8566: CALL_OW 324
8570: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8571: LD_EXP 8
8575: IFFALSE 8583
8577: PUSH
8578: LD_EXP 45
8582: AND
8583: IFFALSE 8603
8585: GO 8587
8587: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8588: LD_INT 19
8590: PPUSH
8591: LD_OWVAR 2
8595: PPUSH
8596: LD_INT 0
8598: PPUSH
8599: CALL_OW 324
8603: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8604: LD_EXP 8
8608: IFFALSE 8616
8610: PUSH
8611: LD_EXP 17
8615: AND
8616: IFFALSE 8718
8618: GO 8620
8620: DISABLE
8621: LD_INT 0
8623: PPUSH
8624: PPUSH
// begin enable ;
8625: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8626: LD_ADDR_VAR 0 2
8630: PUSH
8631: LD_INT 22
8633: PUSH
8634: LD_OWVAR 2
8638: PUSH
8639: EMPTY
8640: LIST
8641: LIST
8642: PUSH
8643: LD_INT 2
8645: PUSH
8646: LD_INT 34
8648: PUSH
8649: LD_INT 11
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: PUSH
8656: LD_INT 34
8658: PUSH
8659: LD_INT 30
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: LIST
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: PPUSH
8675: CALL_OW 69
8679: ST_TO_ADDR
// if not tmp then
8680: LD_VAR 0 2
8684: NOT
8685: IFFALSE 8689
// exit ;
8687: GO 8718
// for i in tmp do
8689: LD_ADDR_VAR 0 1
8693: PUSH
8694: LD_VAR 0 2
8698: PUSH
8699: FOR_IN
8700: IFFALSE 8716
// begin SetLives ( i , 0 ) ;
8702: LD_VAR 0 1
8706: PPUSH
8707: LD_INT 0
8709: PPUSH
8710: CALL_OW 234
// end ;
8714: GO 8699
8716: POP
8717: POP
// end ;
8718: PPOPN 2
8720: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8721: LD_EXP 8
8725: IFFALSE 8733
8727: PUSH
8728: LD_EXP 18
8732: AND
8733: IFFALSE 8753
8735: GO 8737
8737: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8738: LD_INT 32
8740: PPUSH
8741: LD_OWVAR 2
8745: PPUSH
8746: LD_INT 0
8748: PPUSH
8749: CALL_OW 324
8753: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8754: LD_EXP 8
8758: IFFALSE 8766
8760: PUSH
8761: LD_EXP 19
8765: AND
8766: IFFALSE 8949
8768: GO 8770
8770: DISABLE
8771: LD_INT 0
8773: PPUSH
8774: PPUSH
8775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8776: LD_ADDR_VAR 0 2
8780: PUSH
8781: LD_INT 22
8783: PUSH
8784: LD_OWVAR 2
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: LD_INT 33
8795: PUSH
8796: LD_INT 3
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PUSH
8803: EMPTY
8804: LIST
8805: LIST
8806: PPUSH
8807: CALL_OW 69
8811: ST_TO_ADDR
// if not tmp then
8812: LD_VAR 0 2
8816: NOT
8817: IFFALSE 8821
// exit ;
8819: GO 8949
// side := 0 ;
8821: LD_ADDR_VAR 0 3
8825: PUSH
8826: LD_INT 0
8828: ST_TO_ADDR
// for i := 1 to 8 do
8829: LD_ADDR_VAR 0 1
8833: PUSH
8834: DOUBLE
8835: LD_INT 1
8837: DEC
8838: ST_TO_ADDR
8839: LD_INT 8
8841: PUSH
8842: FOR_TO
8843: IFFALSE 8893
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8845: LD_OWVAR 2
8849: PUSH
8850: LD_VAR 0 1
8854: NONEQUAL
8855: IFFALSE 8877
8857: PUSH
8858: LD_OWVAR 2
8862: PPUSH
8863: LD_VAR 0 1
8867: PPUSH
8868: CALL_OW 81
8872: PUSH
8873: LD_INT 2
8875: EQUAL
8876: AND
8877: IFFALSE 8891
// begin side := i ;
8879: LD_ADDR_VAR 0 3
8883: PUSH
8884: LD_VAR 0 1
8888: ST_TO_ADDR
// break ;
8889: GO 8893
// end ;
8891: GO 8842
8893: POP
8894: POP
// if not side then
8895: LD_VAR 0 3
8899: NOT
8900: IFFALSE 8904
// exit ;
8902: GO 8949
// for i := 1 to tmp do
8904: LD_ADDR_VAR 0 1
8908: PUSH
8909: DOUBLE
8910: LD_INT 1
8912: DEC
8913: ST_TO_ADDR
8914: LD_VAR 0 2
8918: PUSH
8919: FOR_TO
8920: IFFALSE 8947
// if Prob ( 60 ) then
8922: LD_INT 60
8924: PPUSH
8925: CALL_OW 13
8929: IFFALSE 8945
// SetSide ( i , side ) ;
8931: LD_VAR 0 1
8935: PPUSH
8936: LD_VAR 0 3
8940: PPUSH
8941: CALL_OW 235
8945: GO 8919
8947: POP
8948: POP
// end ;
8949: PPOPN 3
8951: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8952: LD_EXP 8
8956: IFFALSE 8964
8958: PUSH
8959: LD_EXP 21
8963: AND
8964: IFFALSE 9083
8966: GO 8968
8968: DISABLE
8969: LD_INT 0
8971: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8972: LD_ADDR_VAR 0 1
8976: PUSH
8977: LD_INT 22
8979: PUSH
8980: LD_OWVAR 2
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: PUSH
8989: LD_INT 21
8991: PUSH
8992: LD_INT 1
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: PUSH
8999: LD_INT 3
9001: PUSH
9002: LD_INT 23
9004: PUSH
9005: LD_INT 0
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: LIST
9020: PPUSH
9021: CALL_OW 69
9025: PUSH
9026: FOR_IN
9027: IFFALSE 9081
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
9029: LD_VAR 0 1
9033: PPUSH
9034: CALL_OW 257
9038: PUSH
9039: LD_INT 1
9041: PUSH
9042: LD_INT 2
9044: PUSH
9045: LD_INT 3
9047: PUSH
9048: LD_INT 4
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: IN
9057: IFFALSE 9079
// SetClass ( un , rand ( 1 , 4 ) ) ;
9059: LD_VAR 0 1
9063: PPUSH
9064: LD_INT 1
9066: PPUSH
9067: LD_INT 4
9069: PPUSH
9070: CALL_OW 12
9074: PPUSH
9075: CALL_OW 336
9079: GO 9026
9081: POP
9082: POP
// end ;
9083: PPOPN 1
9085: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
9086: LD_EXP 8
9090: IFFALSE 9098
9092: PUSH
9093: LD_EXP 20
9097: AND
9098: IFFALSE 9177
9100: GO 9102
9102: DISABLE
9103: LD_INT 0
9105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9106: LD_ADDR_VAR 0 1
9110: PUSH
9111: LD_INT 22
9113: PUSH
9114: LD_OWVAR 2
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: PUSH
9123: LD_INT 21
9125: PUSH
9126: LD_INT 3
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: PPUSH
9137: CALL_OW 69
9141: ST_TO_ADDR
// if not tmp then
9142: LD_VAR 0 1
9146: NOT
9147: IFFALSE 9151
// exit ;
9149: GO 9177
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
9151: LD_VAR 0 1
9155: PUSH
9156: LD_INT 1
9158: PPUSH
9159: LD_VAR 0 1
9163: PPUSH
9164: CALL_OW 12
9168: ARRAY
9169: PPUSH
9170: LD_INT 100
9172: PPUSH
9173: CALL_OW 234
// end ;
9177: PPOPN 1
9179: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
9180: LD_EXP 8
9184: IFFALSE 9192
9186: PUSH
9187: LD_EXP 22
9191: AND
9192: IFFALSE 9290
9194: GO 9196
9196: DISABLE
9197: LD_INT 0
9199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9200: LD_ADDR_VAR 0 1
9204: PUSH
9205: LD_INT 22
9207: PUSH
9208: LD_OWVAR 2
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PUSH
9217: LD_INT 21
9219: PUSH
9220: LD_INT 1
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: PPUSH
9231: CALL_OW 69
9235: ST_TO_ADDR
// if not tmp then
9236: LD_VAR 0 1
9240: NOT
9241: IFFALSE 9245
// exit ;
9243: GO 9290
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
9245: LD_VAR 0 1
9249: PUSH
9250: LD_INT 1
9252: PPUSH
9253: LD_VAR 0 1
9257: PPUSH
9258: CALL_OW 12
9262: ARRAY
9263: PPUSH
9264: LD_INT 1
9266: PPUSH
9267: LD_INT 4
9269: PPUSH
9270: CALL_OW 12
9274: PPUSH
9275: LD_INT 3000
9277: PPUSH
9278: LD_INT 9000
9280: PPUSH
9281: CALL_OW 12
9285: PPUSH
9286: CALL_OW 492
// end ;
9290: PPOPN 1
9292: END
// every 0 0$1 trigger StreamModeActive and sDepot do
9293: LD_EXP 8
9297: IFFALSE 9305
9299: PUSH
9300: LD_EXP 23
9304: AND
9305: IFFALSE 9325
9307: GO 9309
9309: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
9310: LD_INT 1
9312: PPUSH
9313: LD_OWVAR 2
9317: PPUSH
9318: LD_INT 0
9320: PPUSH
9321: CALL_OW 324
9325: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
9326: LD_EXP 8
9330: IFFALSE 9338
9332: PUSH
9333: LD_EXP 24
9337: AND
9338: IFFALSE 9421
9340: GO 9342
9342: DISABLE
9343: LD_INT 0
9345: PPUSH
9346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9347: LD_ADDR_VAR 0 2
9351: PUSH
9352: LD_INT 22
9354: PUSH
9355: LD_OWVAR 2
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PUSH
9364: LD_INT 21
9366: PUSH
9367: LD_INT 3
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: PUSH
9374: EMPTY
9375: LIST
9376: LIST
9377: PPUSH
9378: CALL_OW 69
9382: ST_TO_ADDR
// if not tmp then
9383: LD_VAR 0 2
9387: NOT
9388: IFFALSE 9392
// exit ;
9390: GO 9421
// for i in tmp do
9392: LD_ADDR_VAR 0 1
9396: PUSH
9397: LD_VAR 0 2
9401: PUSH
9402: FOR_IN
9403: IFFALSE 9419
// SetBLevel ( i , 10 ) ;
9405: LD_VAR 0 1
9409: PPUSH
9410: LD_INT 10
9412: PPUSH
9413: CALL_OW 241
9417: GO 9402
9419: POP
9420: POP
// end ;
9421: PPOPN 2
9423: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
9424: LD_EXP 8
9428: IFFALSE 9436
9430: PUSH
9431: LD_EXP 25
9435: AND
9436: IFFALSE 9547
9438: GO 9440
9440: DISABLE
9441: LD_INT 0
9443: PPUSH
9444: PPUSH
9445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
9446: LD_ADDR_VAR 0 3
9450: PUSH
9451: LD_INT 22
9453: PUSH
9454: LD_OWVAR 2
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: PUSH
9463: LD_INT 25
9465: PUSH
9466: LD_INT 1
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: PPUSH
9477: CALL_OW 69
9481: ST_TO_ADDR
// if not tmp then
9482: LD_VAR 0 3
9486: NOT
9487: IFFALSE 9491
// exit ;
9489: GO 9547
// un := tmp [ rand ( 1 , tmp ) ] ;
9491: LD_ADDR_VAR 0 2
9495: PUSH
9496: LD_VAR 0 3
9500: PUSH
9501: LD_INT 1
9503: PPUSH
9504: LD_VAR 0 3
9508: PPUSH
9509: CALL_OW 12
9513: ARRAY
9514: ST_TO_ADDR
// if Crawls ( un ) then
9515: LD_VAR 0 2
9519: PPUSH
9520: CALL_OW 318
9524: IFFALSE 9535
// ComWalk ( un ) ;
9526: LD_VAR 0 2
9530: PPUSH
9531: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9535: LD_VAR 0 2
9539: PPUSH
9540: LD_INT 5
9542: PPUSH
9543: CALL_OW 336
// end ;
9547: PPOPN 3
9549: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9550: LD_EXP 8
9554: IFFALSE 9562
9556: PUSH
9557: LD_EXP 26
9561: AND
9562: IFFALSE 9574
9564: PUSH
9565: LD_OWVAR 67
9569: PUSH
9570: LD_INT 4
9572: LESS
9573: AND
9574: IFFALSE 9593
9576: GO 9578
9578: DISABLE
// begin Difficulty := Difficulty + 1 ;
9579: LD_ADDR_OWVAR 67
9583: PUSH
9584: LD_OWVAR 67
9588: PUSH
9589: LD_INT 1
9591: PLUS
9592: ST_TO_ADDR
// end ;
9593: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9594: LD_EXP 8
9598: IFFALSE 9606
9600: PUSH
9601: LD_EXP 27
9605: AND
9606: IFFALSE 9709
9608: GO 9610
9610: DISABLE
9611: LD_INT 0
9613: PPUSH
// begin for i := 1 to 5 do
9614: LD_ADDR_VAR 0 1
9618: PUSH
9619: DOUBLE
9620: LD_INT 1
9622: DEC
9623: ST_TO_ADDR
9624: LD_INT 5
9626: PUSH
9627: FOR_TO
9628: IFFALSE 9707
// begin uc_nation := nation_nature ;
9630: LD_ADDR_OWVAR 21
9634: PUSH
9635: LD_INT 0
9637: ST_TO_ADDR
// uc_side := 0 ;
9638: LD_ADDR_OWVAR 20
9642: PUSH
9643: LD_INT 0
9645: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9646: LD_ADDR_OWVAR 29
9650: PUSH
9651: LD_INT 12
9653: PUSH
9654: LD_INT 12
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: ST_TO_ADDR
// hc_agressivity := 20 ;
9661: LD_ADDR_OWVAR 35
9665: PUSH
9666: LD_INT 20
9668: ST_TO_ADDR
// hc_class := class_tiger ;
9669: LD_ADDR_OWVAR 28
9673: PUSH
9674: LD_INT 14
9676: ST_TO_ADDR
// hc_gallery :=  ;
9677: LD_ADDR_OWVAR 33
9681: PUSH
9682: LD_STRING 
9684: ST_TO_ADDR
// hc_name :=  ;
9685: LD_ADDR_OWVAR 26
9689: PUSH
9690: LD_STRING 
9692: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9693: CALL_OW 44
9697: PPUSH
9698: LD_INT 0
9700: PPUSH
9701: CALL_OW 51
// end ;
9705: GO 9627
9707: POP
9708: POP
// end ;
9709: PPOPN 1
9711: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9712: LD_EXP 8
9716: IFFALSE 9724
9718: PUSH
9719: LD_EXP 28
9723: AND
9724: IFFALSE 9733
9726: GO 9728
9728: DISABLE
// StreamSibBomb ;
9729: CALL 9734 0 0
9733: END
// export function StreamSibBomb ; var i , x , y ; begin
9734: LD_INT 0
9736: PPUSH
9737: PPUSH
9738: PPUSH
9739: PPUSH
// result := false ;
9740: LD_ADDR_VAR 0 1
9744: PUSH
9745: LD_INT 0
9747: ST_TO_ADDR
// for i := 1 to 16 do
9748: LD_ADDR_VAR 0 2
9752: PUSH
9753: DOUBLE
9754: LD_INT 1
9756: DEC
9757: ST_TO_ADDR
9758: LD_INT 16
9760: PUSH
9761: FOR_TO
9762: IFFALSE 9961
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9764: LD_ADDR_VAR 0 3
9768: PUSH
9769: LD_INT 10
9771: PUSH
9772: LD_INT 20
9774: PUSH
9775: LD_INT 30
9777: PUSH
9778: LD_INT 40
9780: PUSH
9781: LD_INT 50
9783: PUSH
9784: LD_INT 60
9786: PUSH
9787: LD_INT 70
9789: PUSH
9790: LD_INT 80
9792: PUSH
9793: LD_INT 90
9795: PUSH
9796: LD_INT 100
9798: PUSH
9799: LD_INT 110
9801: PUSH
9802: LD_INT 120
9804: PUSH
9805: LD_INT 130
9807: PUSH
9808: LD_INT 140
9810: PUSH
9811: LD_INT 150
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: PUSH
9831: LD_INT 1
9833: PPUSH
9834: LD_INT 15
9836: PPUSH
9837: CALL_OW 12
9841: ARRAY
9842: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9843: LD_ADDR_VAR 0 4
9847: PUSH
9848: LD_INT 10
9850: PUSH
9851: LD_INT 20
9853: PUSH
9854: LD_INT 30
9856: PUSH
9857: LD_INT 40
9859: PUSH
9860: LD_INT 50
9862: PUSH
9863: LD_INT 60
9865: PUSH
9866: LD_INT 70
9868: PUSH
9869: LD_INT 80
9871: PUSH
9872: LD_INT 90
9874: PUSH
9875: LD_INT 100
9877: PUSH
9878: LD_INT 110
9880: PUSH
9881: LD_INT 120
9883: PUSH
9884: LD_INT 130
9886: PUSH
9887: LD_INT 140
9889: PUSH
9890: LD_INT 150
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: PUSH
9910: LD_INT 1
9912: PPUSH
9913: LD_INT 15
9915: PPUSH
9916: CALL_OW 12
9920: ARRAY
9921: ST_TO_ADDR
// if ValidHex ( x , y ) then
9922: LD_VAR 0 3
9926: PPUSH
9927: LD_VAR 0 4
9931: PPUSH
9932: CALL_OW 488
9936: IFFALSE 9959
// begin result := [ x , y ] ;
9938: LD_ADDR_VAR 0 1
9942: PUSH
9943: LD_VAR 0 3
9947: PUSH
9948: LD_VAR 0 4
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: ST_TO_ADDR
// break ;
9957: GO 9961
// end ; end ;
9959: GO 9761
9961: POP
9962: POP
// if result then
9963: LD_VAR 0 1
9967: IFFALSE 10027
// begin ToLua ( playSibBomb() ) ;
9969: LD_STRING playSibBomb()
9971: PPUSH
9972: CALL_OW 559
// wait ( 0 0$14 ) ;
9976: LD_INT 490
9978: PPUSH
9979: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9983: LD_VAR 0 1
9987: PUSH
9988: LD_INT 1
9990: ARRAY
9991: PPUSH
9992: LD_VAR 0 1
9996: PUSH
9997: LD_INT 2
9999: ARRAY
10000: PPUSH
10001: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
10005: LD_VAR 0 1
10009: PUSH
10010: LD_INT 1
10012: ARRAY
10013: PPUSH
10014: LD_VAR 0 1
10018: PUSH
10019: LD_INT 2
10021: ARRAY
10022: PPUSH
10023: CALL_OW 429
// end ; end ;
10027: LD_VAR 0 1
10031: RET
// every 0 0$1 trigger StreamModeActive and sReset do
10032: LD_EXP 8
10036: IFFALSE 10044
10038: PUSH
10039: LD_EXP 30
10043: AND
10044: IFFALSE 10056
10046: GO 10048
10048: DISABLE
// YouLost (  ) ;
10049: LD_STRING 
10051: PPUSH
10052: CALL_OW 104
10056: END
// every 0 0$1 trigger StreamModeActive and sFog do
10057: LD_EXP 8
10061: IFFALSE 10069
10063: PUSH
10064: LD_EXP 29
10068: AND
10069: IFFALSE 10083
10071: GO 10073
10073: DISABLE
// FogOff ( your_side ) ;
10074: LD_OWVAR 2
10078: PPUSH
10079: CALL_OW 344
10083: END
// every 0 0$1 trigger StreamModeActive and sSun do
10084: LD_EXP 8
10088: IFFALSE 10096
10090: PUSH
10091: LD_EXP 31
10095: AND
10096: IFFALSE 10124
10098: GO 10100
10100: DISABLE
// begin solar_recharge_percent := 0 ;
10101: LD_ADDR_OWVAR 79
10105: PUSH
10106: LD_INT 0
10108: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10109: LD_INT 10500
10111: PPUSH
10112: CALL_OW 67
// solar_recharge_percent := 100 ;
10116: LD_ADDR_OWVAR 79
10120: PUSH
10121: LD_INT 100
10123: ST_TO_ADDR
// end ;
10124: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
10125: LD_EXP 8
10129: IFFALSE 10137
10131: PUSH
10132: LD_EXP 32
10136: AND
10137: IFFALSE 10376
10139: GO 10141
10141: DISABLE
10142: LD_INT 0
10144: PPUSH
10145: PPUSH
10146: PPUSH
// begin tmp := [ ] ;
10147: LD_ADDR_VAR 0 3
10151: PUSH
10152: EMPTY
10153: ST_TO_ADDR
// for i := 1 to 6 do
10154: LD_ADDR_VAR 0 1
10158: PUSH
10159: DOUBLE
10160: LD_INT 1
10162: DEC
10163: ST_TO_ADDR
10164: LD_INT 6
10166: PUSH
10167: FOR_TO
10168: IFFALSE 10273
// begin uc_nation := nation_nature ;
10170: LD_ADDR_OWVAR 21
10174: PUSH
10175: LD_INT 0
10177: ST_TO_ADDR
// uc_side := 0 ;
10178: LD_ADDR_OWVAR 20
10182: PUSH
10183: LD_INT 0
10185: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10186: LD_ADDR_OWVAR 29
10190: PUSH
10191: LD_INT 12
10193: PUSH
10194: LD_INT 12
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: ST_TO_ADDR
// hc_agressivity := 20 ;
10201: LD_ADDR_OWVAR 35
10205: PUSH
10206: LD_INT 20
10208: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
10209: LD_ADDR_OWVAR 28
10213: PUSH
10214: LD_INT 17
10216: ST_TO_ADDR
// hc_gallery :=  ;
10217: LD_ADDR_OWVAR 33
10221: PUSH
10222: LD_STRING 
10224: ST_TO_ADDR
// hc_name :=  ;
10225: LD_ADDR_OWVAR 26
10229: PUSH
10230: LD_STRING 
10232: ST_TO_ADDR
// un := CreateHuman ;
10233: LD_ADDR_VAR 0 2
10237: PUSH
10238: CALL_OW 44
10242: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
10243: LD_VAR 0 2
10247: PPUSH
10248: LD_INT 1
10250: PPUSH
10251: CALL_OW 51
// tmp := tmp ^ un ;
10255: LD_ADDR_VAR 0 3
10259: PUSH
10260: LD_VAR 0 3
10264: PUSH
10265: LD_VAR 0 2
10269: ADD
10270: ST_TO_ADDR
// end ;
10271: GO 10167
10273: POP
10274: POP
// repeat wait ( 0 0$1 ) ;
10275: LD_INT 35
10277: PPUSH
10278: CALL_OW 67
// for un in tmp do
10282: LD_ADDR_VAR 0 2
10286: PUSH
10287: LD_VAR 0 3
10291: PUSH
10292: FOR_IN
10293: IFFALSE 10367
// begin if IsDead ( un ) then
10295: LD_VAR 0 2
10299: PPUSH
10300: CALL_OW 301
10304: IFFALSE 10324
// begin tmp := tmp diff un ;
10306: LD_ADDR_VAR 0 3
10310: PUSH
10311: LD_VAR 0 3
10315: PUSH
10316: LD_VAR 0 2
10320: DIFF
10321: ST_TO_ADDR
// continue ;
10322: GO 10292
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
10324: LD_VAR 0 2
10328: PPUSH
10329: LD_INT 3
10331: PUSH
10332: LD_INT 22
10334: PUSH
10335: LD_INT 0
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PPUSH
10346: CALL_OW 69
10350: PPUSH
10351: LD_VAR 0 2
10355: PPUSH
10356: CALL_OW 74
10360: PPUSH
10361: CALL_OW 115
// end ;
10365: GO 10292
10367: POP
10368: POP
// until not tmp ;
10369: LD_VAR 0 3
10373: NOT
10374: IFFALSE 10275
// end ;
10376: PPOPN 3
10378: END
// every 0 0$1 trigger StreamModeActive and sTroll do
10379: LD_EXP 8
10383: IFFALSE 10391
10385: PUSH
10386: LD_EXP 33
10390: AND
10391: IFFALSE 10445
10393: GO 10395
10395: DISABLE
// begin ToLua ( displayTroll(); ) ;
10396: LD_STRING displayTroll();
10398: PPUSH
10399: CALL_OW 559
// wait ( 3 3$00 ) ;
10403: LD_INT 6300
10405: PPUSH
10406: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10410: LD_STRING hideTroll();
10412: PPUSH
10413: CALL_OW 559
// wait ( 1 1$00 ) ;
10417: LD_INT 2100
10419: PPUSH
10420: CALL_OW 67
// ToLua ( displayTroll(); ) ;
10424: LD_STRING displayTroll();
10426: PPUSH
10427: CALL_OW 559
// wait ( 1 1$00 ) ;
10431: LD_INT 2100
10433: PPUSH
10434: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10438: LD_STRING hideTroll();
10440: PPUSH
10441: CALL_OW 559
// end ;
10445: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
10446: LD_EXP 8
10450: IFFALSE 10458
10452: PUSH
10453: LD_EXP 34
10457: AND
10458: IFFALSE 10521
10460: GO 10462
10462: DISABLE
10463: LD_INT 0
10465: PPUSH
// begin p := 0 ;
10466: LD_ADDR_VAR 0 1
10470: PUSH
10471: LD_INT 0
10473: ST_TO_ADDR
// repeat game_speed := 1 ;
10474: LD_ADDR_OWVAR 65
10478: PUSH
10479: LD_INT 1
10481: ST_TO_ADDR
// wait ( 0 0$1 ) ;
10482: LD_INT 35
10484: PPUSH
10485: CALL_OW 67
// p := p + 1 ;
10489: LD_ADDR_VAR 0 1
10493: PUSH
10494: LD_VAR 0 1
10498: PUSH
10499: LD_INT 1
10501: PLUS
10502: ST_TO_ADDR
// until p >= 60 ;
10503: LD_VAR 0 1
10507: PUSH
10508: LD_INT 60
10510: GREATEREQUAL
10511: IFFALSE 10474
// game_speed := 4 ;
10513: LD_ADDR_OWVAR 65
10517: PUSH
10518: LD_INT 4
10520: ST_TO_ADDR
// end ;
10521: PPOPN 1
10523: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
10524: LD_EXP 8
10528: IFFALSE 10536
10530: PUSH
10531: LD_EXP 35
10535: AND
10536: IFFALSE 10682
10538: GO 10540
10540: DISABLE
10541: LD_INT 0
10543: PPUSH
10544: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10545: LD_ADDR_VAR 0 1
10549: PUSH
10550: LD_INT 22
10552: PUSH
10553: LD_OWVAR 2
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: PUSH
10562: LD_INT 2
10564: PUSH
10565: LD_INT 30
10567: PUSH
10568: LD_INT 0
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: PUSH
10575: LD_INT 30
10577: PUSH
10578: LD_INT 1
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: LIST
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: PPUSH
10594: CALL_OW 69
10598: ST_TO_ADDR
// if not depot then
10599: LD_VAR 0 1
10603: NOT
10604: IFFALSE 10608
// exit ;
10606: GO 10682
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10608: LD_ADDR_VAR 0 2
10612: PUSH
10613: LD_VAR 0 1
10617: PUSH
10618: LD_INT 1
10620: PPUSH
10621: LD_VAR 0 1
10625: PPUSH
10626: CALL_OW 12
10630: ARRAY
10631: PPUSH
10632: CALL_OW 274
10636: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10637: LD_VAR 0 2
10641: PPUSH
10642: LD_INT 1
10644: PPUSH
10645: LD_INT 0
10647: PPUSH
10648: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10652: LD_VAR 0 2
10656: PPUSH
10657: LD_INT 2
10659: PPUSH
10660: LD_INT 0
10662: PPUSH
10663: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10667: LD_VAR 0 2
10671: PPUSH
10672: LD_INT 3
10674: PPUSH
10675: LD_INT 0
10677: PPUSH
10678: CALL_OW 277
// end ;
10682: PPOPN 2
10684: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10685: LD_EXP 8
10689: IFFALSE 10697
10691: PUSH
10692: LD_EXP 36
10696: AND
10697: IFFALSE 10794
10699: GO 10701
10701: DISABLE
10702: LD_INT 0
10704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10705: LD_ADDR_VAR 0 1
10709: PUSH
10710: LD_INT 22
10712: PUSH
10713: LD_OWVAR 2
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: PUSH
10722: LD_INT 21
10724: PUSH
10725: LD_INT 1
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PUSH
10732: LD_INT 3
10734: PUSH
10735: LD_INT 23
10737: PUSH
10738: LD_INT 0
10740: PUSH
10741: EMPTY
10742: LIST
10743: LIST
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: LIST
10753: PPUSH
10754: CALL_OW 69
10758: ST_TO_ADDR
// if not tmp then
10759: LD_VAR 0 1
10763: NOT
10764: IFFALSE 10768
// exit ;
10766: GO 10794
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10768: LD_VAR 0 1
10772: PUSH
10773: LD_INT 1
10775: PPUSH
10776: LD_VAR 0 1
10780: PPUSH
10781: CALL_OW 12
10785: ARRAY
10786: PPUSH
10787: LD_INT 200
10789: PPUSH
10790: CALL_OW 234
// end ;
10794: PPOPN 1
10796: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10797: LD_EXP 8
10801: IFFALSE 10809
10803: PUSH
10804: LD_EXP 37
10808: AND
10809: IFFALSE 10888
10811: GO 10813
10813: DISABLE
10814: LD_INT 0
10816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10817: LD_ADDR_VAR 0 1
10821: PUSH
10822: LD_INT 22
10824: PUSH
10825: LD_OWVAR 2
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: PUSH
10834: LD_INT 21
10836: PUSH
10837: LD_INT 2
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PPUSH
10848: CALL_OW 69
10852: ST_TO_ADDR
// if not tmp then
10853: LD_VAR 0 1
10857: NOT
10858: IFFALSE 10862
// exit ;
10860: GO 10888
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10862: LD_VAR 0 1
10866: PUSH
10867: LD_INT 1
10869: PPUSH
10870: LD_VAR 0 1
10874: PPUSH
10875: CALL_OW 12
10879: ARRAY
10880: PPUSH
10881: LD_INT 60
10883: PPUSH
10884: CALL_OW 234
// end ;
10888: PPOPN 1
10890: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10891: LD_EXP 8
10895: IFFALSE 10903
10897: PUSH
10898: LD_EXP 38
10902: AND
10903: IFFALSE 11002
10905: GO 10907
10907: DISABLE
10908: LD_INT 0
10910: PPUSH
10911: PPUSH
// begin enable ;
10912: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10913: LD_ADDR_VAR 0 1
10917: PUSH
10918: LD_INT 22
10920: PUSH
10921: LD_OWVAR 2
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: PUSH
10930: LD_INT 61
10932: PUSH
10933: EMPTY
10934: LIST
10935: PUSH
10936: LD_INT 33
10938: PUSH
10939: LD_INT 2
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: LIST
10950: PPUSH
10951: CALL_OW 69
10955: ST_TO_ADDR
// if not tmp then
10956: LD_VAR 0 1
10960: NOT
10961: IFFALSE 10965
// exit ;
10963: GO 11002
// for i in tmp do
10965: LD_ADDR_VAR 0 2
10969: PUSH
10970: LD_VAR 0 1
10974: PUSH
10975: FOR_IN
10976: IFFALSE 11000
// if IsControledBy ( i ) then
10978: LD_VAR 0 2
10982: PPUSH
10983: CALL_OW 312
10987: IFFALSE 10998
// ComUnlink ( i ) ;
10989: LD_VAR 0 2
10993: PPUSH
10994: CALL_OW 136
10998: GO 10975
11000: POP
11001: POP
// end ;
11002: PPOPN 2
11004: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
11005: LD_EXP 8
11009: IFFALSE 11017
11011: PUSH
11012: LD_EXP 39
11016: AND
11017: IFFALSE 11157
11019: GO 11021
11021: DISABLE
11022: LD_INT 0
11024: PPUSH
11025: PPUSH
// begin ToLua ( displayPowell(); ) ;
11026: LD_STRING displayPowell();
11028: PPUSH
11029: CALL_OW 559
// uc_side := 0 ;
11033: LD_ADDR_OWVAR 20
11037: PUSH
11038: LD_INT 0
11040: ST_TO_ADDR
// uc_nation := 2 ;
11041: LD_ADDR_OWVAR 21
11045: PUSH
11046: LD_INT 2
11048: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
11049: LD_ADDR_OWVAR 37
11053: PUSH
11054: LD_INT 14
11056: ST_TO_ADDR
// vc_engine := engine_siberite ;
11057: LD_ADDR_OWVAR 39
11061: PUSH
11062: LD_INT 3
11064: ST_TO_ADDR
// vc_control := control_apeman ;
11065: LD_ADDR_OWVAR 38
11069: PUSH
11070: LD_INT 5
11072: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
11073: LD_ADDR_OWVAR 40
11077: PUSH
11078: LD_INT 29
11080: ST_TO_ADDR
// un := CreateVehicle ;
11081: LD_ADDR_VAR 0 2
11085: PUSH
11086: CALL_OW 45
11090: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11091: LD_VAR 0 2
11095: PPUSH
11096: LD_INT 1
11098: PPUSH
11099: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11103: LD_INT 35
11105: PPUSH
11106: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11110: LD_VAR 0 2
11114: PPUSH
11115: LD_INT 22
11117: PUSH
11118: LD_OWVAR 2
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: PPUSH
11127: CALL_OW 69
11131: PPUSH
11132: LD_VAR 0 2
11136: PPUSH
11137: CALL_OW 74
11141: PPUSH
11142: CALL_OW 115
// until IsDead ( un ) ;
11146: LD_VAR 0 2
11150: PPUSH
11151: CALL_OW 301
11155: IFFALSE 11103
// end ;
11157: PPOPN 2
11159: END
// every 0 0$1 trigger StreamModeActive and sStu do
11160: LD_EXP 8
11164: IFFALSE 11172
11166: PUSH
11167: LD_EXP 47
11171: AND
11172: IFFALSE 11188
11174: GO 11176
11176: DISABLE
// begin ToLua ( displayStucuk(); ) ;
11177: LD_STRING displayStucuk();
11179: PPUSH
11180: CALL_OW 559
// ResetFog ;
11184: CALL_OW 335
// end ;
11188: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
11189: LD_EXP 8
11193: IFFALSE 11201
11195: PUSH
11196: LD_EXP 40
11200: AND
11201: IFFALSE 11342
11203: GO 11205
11205: DISABLE
11206: LD_INT 0
11208: PPUSH
11209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11210: LD_ADDR_VAR 0 2
11214: PUSH
11215: LD_INT 22
11217: PUSH
11218: LD_OWVAR 2
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: LD_INT 21
11229: PUSH
11230: LD_INT 1
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: PPUSH
11241: CALL_OW 69
11245: ST_TO_ADDR
// if not tmp then
11246: LD_VAR 0 2
11250: NOT
11251: IFFALSE 11255
// exit ;
11253: GO 11342
// un := tmp [ rand ( 1 , tmp ) ] ;
11255: LD_ADDR_VAR 0 1
11259: PUSH
11260: LD_VAR 0 2
11264: PUSH
11265: LD_INT 1
11267: PPUSH
11268: LD_VAR 0 2
11272: PPUSH
11273: CALL_OW 12
11277: ARRAY
11278: ST_TO_ADDR
// SetSide ( un , 0 ) ;
11279: LD_VAR 0 1
11283: PPUSH
11284: LD_INT 0
11286: PPUSH
11287: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
11291: LD_VAR 0 1
11295: PPUSH
11296: LD_OWVAR 3
11300: PUSH
11301: LD_VAR 0 1
11305: DIFF
11306: PPUSH
11307: LD_VAR 0 1
11311: PPUSH
11312: CALL_OW 74
11316: PPUSH
11317: CALL_OW 115
// wait ( 0 0$20 ) ;
11321: LD_INT 700
11323: PPUSH
11324: CALL_OW 67
// SetSide ( un , your_side ) ;
11328: LD_VAR 0 1
11332: PPUSH
11333: LD_OWVAR 2
11337: PPUSH
11338: CALL_OW 235
// end ;
11342: PPOPN 2
11344: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
11345: LD_EXP 8
11349: IFFALSE 11357
11351: PUSH
11352: LD_EXP 41
11356: AND
11357: IFFALSE 11463
11359: GO 11361
11361: DISABLE
11362: LD_INT 0
11364: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11365: LD_ADDR_VAR 0 1
11369: PUSH
11370: LD_INT 22
11372: PUSH
11373: LD_OWVAR 2
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: PUSH
11382: LD_INT 2
11384: PUSH
11385: LD_INT 30
11387: PUSH
11388: LD_INT 0
11390: PUSH
11391: EMPTY
11392: LIST
11393: LIST
11394: PUSH
11395: LD_INT 30
11397: PUSH
11398: LD_INT 1
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: LIST
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: PPUSH
11414: CALL_OW 69
11418: ST_TO_ADDR
// if not depot then
11419: LD_VAR 0 1
11423: NOT
11424: IFFALSE 11428
// exit ;
11426: GO 11463
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
11428: LD_VAR 0 1
11432: PUSH
11433: LD_INT 1
11435: ARRAY
11436: PPUSH
11437: CALL_OW 250
11441: PPUSH
11442: LD_VAR 0 1
11446: PUSH
11447: LD_INT 1
11449: ARRAY
11450: PPUSH
11451: CALL_OW 251
11455: PPUSH
11456: LD_INT 70
11458: PPUSH
11459: CALL_OW 495
// end ;
11463: PPOPN 1
11465: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
11466: LD_EXP 8
11470: IFFALSE 11478
11472: PUSH
11473: LD_EXP 42
11477: AND
11478: IFFALSE 11689
11480: GO 11482
11482: DISABLE
11483: LD_INT 0
11485: PPUSH
11486: PPUSH
11487: PPUSH
11488: PPUSH
11489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11490: LD_ADDR_VAR 0 5
11494: PUSH
11495: LD_INT 22
11497: PUSH
11498: LD_OWVAR 2
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: PUSH
11507: LD_INT 21
11509: PUSH
11510: LD_INT 1
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: PPUSH
11521: CALL_OW 69
11525: ST_TO_ADDR
// if not tmp then
11526: LD_VAR 0 5
11530: NOT
11531: IFFALSE 11535
// exit ;
11533: GO 11689
// for i in tmp do
11535: LD_ADDR_VAR 0 1
11539: PUSH
11540: LD_VAR 0 5
11544: PUSH
11545: FOR_IN
11546: IFFALSE 11687
// begin d := rand ( 0 , 5 ) ;
11548: LD_ADDR_VAR 0 4
11552: PUSH
11553: LD_INT 0
11555: PPUSH
11556: LD_INT 5
11558: PPUSH
11559: CALL_OW 12
11563: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
11564: LD_ADDR_VAR 0 2
11568: PUSH
11569: LD_VAR 0 1
11573: PPUSH
11574: CALL_OW 250
11578: PPUSH
11579: LD_VAR 0 4
11583: PPUSH
11584: LD_INT 3
11586: PPUSH
11587: LD_INT 12
11589: PPUSH
11590: CALL_OW 12
11594: PPUSH
11595: CALL_OW 272
11599: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11600: LD_ADDR_VAR 0 3
11604: PUSH
11605: LD_VAR 0 1
11609: PPUSH
11610: CALL_OW 251
11614: PPUSH
11615: LD_VAR 0 4
11619: PPUSH
11620: LD_INT 3
11622: PPUSH
11623: LD_INT 12
11625: PPUSH
11626: CALL_OW 12
11630: PPUSH
11631: CALL_OW 273
11635: ST_TO_ADDR
// if ValidHex ( x , y ) then
11636: LD_VAR 0 2
11640: PPUSH
11641: LD_VAR 0 3
11645: PPUSH
11646: CALL_OW 488
11650: IFFALSE 11685
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11652: LD_VAR 0 1
11656: PPUSH
11657: LD_VAR 0 2
11661: PPUSH
11662: LD_VAR 0 3
11666: PPUSH
11667: LD_INT 3
11669: PPUSH
11670: LD_INT 6
11672: PPUSH
11673: CALL_OW 12
11677: PPUSH
11678: LD_INT 1
11680: PPUSH
11681: CALL_OW 483
// end ;
11685: GO 11545
11687: POP
11688: POP
// end ;
11689: PPOPN 5
11691: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11692: LD_EXP 8
11696: IFFALSE 11704
11698: PUSH
11699: LD_EXP 43
11703: AND
11704: IFFALSE 11798
11706: GO 11708
11708: DISABLE
11709: LD_INT 0
11711: PPUSH
11712: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11713: LD_ADDR_VAR 0 2
11717: PUSH
11718: LD_INT 22
11720: PUSH
11721: LD_OWVAR 2
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: LD_INT 32
11732: PUSH
11733: LD_INT 1
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 21
11742: PUSH
11743: LD_INT 2
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: LIST
11754: PPUSH
11755: CALL_OW 69
11759: ST_TO_ADDR
// if not tmp then
11760: LD_VAR 0 2
11764: NOT
11765: IFFALSE 11769
// exit ;
11767: GO 11798
// for i in tmp do
11769: LD_ADDR_VAR 0 1
11773: PUSH
11774: LD_VAR 0 2
11778: PUSH
11779: FOR_IN
11780: IFFALSE 11796
// SetFuel ( i , 0 ) ;
11782: LD_VAR 0 1
11786: PPUSH
11787: LD_INT 0
11789: PPUSH
11790: CALL_OW 240
11794: GO 11779
11796: POP
11797: POP
// end ;
11798: PPOPN 2
11800: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11801: LD_EXP 8
11805: IFFALSE 11813
11807: PUSH
11808: LD_EXP 44
11812: AND
11813: IFFALSE 11879
11815: GO 11817
11817: DISABLE
11818: LD_INT 0
11820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11821: LD_ADDR_VAR 0 1
11825: PUSH
11826: LD_INT 22
11828: PUSH
11829: LD_OWVAR 2
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PUSH
11838: LD_INT 30
11840: PUSH
11841: LD_INT 29
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: PPUSH
11852: CALL_OW 69
11856: ST_TO_ADDR
// if not tmp then
11857: LD_VAR 0 1
11861: NOT
11862: IFFALSE 11866
// exit ;
11864: GO 11879
// DestroyUnit ( tmp [ 1 ] ) ;
11866: LD_VAR 0 1
11870: PUSH
11871: LD_INT 1
11873: ARRAY
11874: PPUSH
11875: CALL_OW 65
// end ;
11879: PPOPN 1
11881: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11882: LD_EXP 8
11886: IFFALSE 11894
11888: PUSH
11889: LD_EXP 46
11893: AND
11894: IFFALSE 12023
11896: GO 11898
11898: DISABLE
11899: LD_INT 0
11901: PPUSH
// begin uc_side := 0 ;
11902: LD_ADDR_OWVAR 20
11906: PUSH
11907: LD_INT 0
11909: ST_TO_ADDR
// uc_nation := nation_arabian ;
11910: LD_ADDR_OWVAR 21
11914: PUSH
11915: LD_INT 2
11917: ST_TO_ADDR
// hc_gallery :=  ;
11918: LD_ADDR_OWVAR 33
11922: PUSH
11923: LD_STRING 
11925: ST_TO_ADDR
// hc_name :=  ;
11926: LD_ADDR_OWVAR 26
11930: PUSH
11931: LD_STRING 
11933: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11934: LD_INT 1
11936: PPUSH
11937: LD_INT 11
11939: PPUSH
11940: LD_INT 10
11942: PPUSH
11943: CALL_OW 380
// un := CreateHuman ;
11947: LD_ADDR_VAR 0 1
11951: PUSH
11952: CALL_OW 44
11956: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11957: LD_VAR 0 1
11961: PPUSH
11962: LD_INT 1
11964: PPUSH
11965: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11969: LD_INT 35
11971: PPUSH
11972: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11976: LD_VAR 0 1
11980: PPUSH
11981: LD_INT 22
11983: PUSH
11984: LD_OWVAR 2
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: PPUSH
11993: CALL_OW 69
11997: PPUSH
11998: LD_VAR 0 1
12002: PPUSH
12003: CALL_OW 74
12007: PPUSH
12008: CALL_OW 115
// until IsDead ( un ) ;
12012: LD_VAR 0 1
12016: PPUSH
12017: CALL_OW 301
12021: IFFALSE 11969
// end ;
12023: PPOPN 1
12025: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
12026: LD_EXP 8
12030: IFFALSE 12038
12032: PUSH
12033: LD_EXP 48
12037: AND
12038: IFFALSE 12050
12040: GO 12042
12042: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
12043: LD_STRING earthquake(getX(game), 0, 32)
12045: PPUSH
12046: CALL_OW 559
12050: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
12051: LD_EXP 8
12055: IFFALSE 12063
12057: PUSH
12058: LD_EXP 49
12062: AND
12063: IFFALSE 12154
12065: GO 12067
12067: DISABLE
12068: LD_INT 0
12070: PPUSH
// begin enable ;
12071: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
12072: LD_ADDR_VAR 0 1
12076: PUSH
12077: LD_INT 22
12079: PUSH
12080: LD_OWVAR 2
12084: PUSH
12085: EMPTY
12086: LIST
12087: LIST
12088: PUSH
12089: LD_INT 21
12091: PUSH
12092: LD_INT 2
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: PUSH
12099: LD_INT 33
12101: PUSH
12102: LD_INT 3
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: LIST
12113: PPUSH
12114: CALL_OW 69
12118: ST_TO_ADDR
// if not tmp then
12119: LD_VAR 0 1
12123: NOT
12124: IFFALSE 12128
// exit ;
12126: GO 12154
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12128: LD_VAR 0 1
12132: PUSH
12133: LD_INT 1
12135: PPUSH
12136: LD_VAR 0 1
12140: PPUSH
12141: CALL_OW 12
12145: ARRAY
12146: PPUSH
12147: LD_INT 1
12149: PPUSH
12150: CALL_OW 234
// end ;
12154: PPOPN 1
12156: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
12157: LD_EXP 8
12161: IFFALSE 12169
12163: PUSH
12164: LD_EXP 50
12168: AND
12169: IFFALSE 12310
12171: GO 12173
12173: DISABLE
12174: LD_INT 0
12176: PPUSH
12177: PPUSH
12178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12179: LD_ADDR_VAR 0 3
12183: PUSH
12184: LD_INT 22
12186: PUSH
12187: LD_OWVAR 2
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: PUSH
12196: LD_INT 25
12198: PUSH
12199: LD_INT 1
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PPUSH
12210: CALL_OW 69
12214: ST_TO_ADDR
// if not tmp then
12215: LD_VAR 0 3
12219: NOT
12220: IFFALSE 12224
// exit ;
12222: GO 12310
// un := tmp [ rand ( 1 , tmp ) ] ;
12224: LD_ADDR_VAR 0 2
12228: PUSH
12229: LD_VAR 0 3
12233: PUSH
12234: LD_INT 1
12236: PPUSH
12237: LD_VAR 0 3
12241: PPUSH
12242: CALL_OW 12
12246: ARRAY
12247: ST_TO_ADDR
// if Crawls ( un ) then
12248: LD_VAR 0 2
12252: PPUSH
12253: CALL_OW 318
12257: IFFALSE 12268
// ComWalk ( un ) ;
12259: LD_VAR 0 2
12263: PPUSH
12264: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
12268: LD_VAR 0 2
12272: PPUSH
12273: LD_INT 9
12275: PPUSH
12276: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
12280: LD_INT 28
12282: PPUSH
12283: LD_OWVAR 2
12287: PPUSH
12288: LD_INT 2
12290: PPUSH
12291: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
12295: LD_INT 29
12297: PPUSH
12298: LD_OWVAR 2
12302: PPUSH
12303: LD_INT 2
12305: PPUSH
12306: CALL_OW 322
// end ;
12310: PPOPN 3
12312: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
12313: LD_EXP 8
12317: IFFALSE 12325
12319: PUSH
12320: LD_EXP 51
12324: AND
12325: IFFALSE 12436
12327: GO 12329
12329: DISABLE
12330: LD_INT 0
12332: PPUSH
12333: PPUSH
12334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12335: LD_ADDR_VAR 0 3
12339: PUSH
12340: LD_INT 22
12342: PUSH
12343: LD_OWVAR 2
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PUSH
12352: LD_INT 25
12354: PUSH
12355: LD_INT 1
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: PPUSH
12366: CALL_OW 69
12370: ST_TO_ADDR
// if not tmp then
12371: LD_VAR 0 3
12375: NOT
12376: IFFALSE 12380
// exit ;
12378: GO 12436
// un := tmp [ rand ( 1 , tmp ) ] ;
12380: LD_ADDR_VAR 0 2
12384: PUSH
12385: LD_VAR 0 3
12389: PUSH
12390: LD_INT 1
12392: PPUSH
12393: LD_VAR 0 3
12397: PPUSH
12398: CALL_OW 12
12402: ARRAY
12403: ST_TO_ADDR
// if Crawls ( un ) then
12404: LD_VAR 0 2
12408: PPUSH
12409: CALL_OW 318
12413: IFFALSE 12424
// ComWalk ( un ) ;
12415: LD_VAR 0 2
12419: PPUSH
12420: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12424: LD_VAR 0 2
12428: PPUSH
12429: LD_INT 8
12431: PPUSH
12432: CALL_OW 336
// end ;
12436: PPOPN 3
12438: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
12439: LD_EXP 8
12443: IFFALSE 12451
12445: PUSH
12446: LD_EXP 52
12450: AND
12451: IFFALSE 12595
12453: GO 12455
12455: DISABLE
12456: LD_INT 0
12458: PPUSH
12459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
12460: LD_ADDR_VAR 0 2
12464: PUSH
12465: LD_INT 22
12467: PUSH
12468: LD_OWVAR 2
12472: PUSH
12473: EMPTY
12474: LIST
12475: LIST
12476: PUSH
12477: LD_INT 21
12479: PUSH
12480: LD_INT 2
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PUSH
12487: LD_INT 2
12489: PUSH
12490: LD_INT 34
12492: PUSH
12493: LD_INT 12
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: PUSH
12500: LD_INT 34
12502: PUSH
12503: LD_INT 51
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: PUSH
12510: LD_INT 34
12512: PUSH
12513: LD_INT 32
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: LIST
12530: PPUSH
12531: CALL_OW 69
12535: ST_TO_ADDR
// if not tmp then
12536: LD_VAR 0 2
12540: NOT
12541: IFFALSE 12545
// exit ;
12543: GO 12595
// for i in tmp do
12545: LD_ADDR_VAR 0 1
12549: PUSH
12550: LD_VAR 0 2
12554: PUSH
12555: FOR_IN
12556: IFFALSE 12593
// if GetCargo ( i , mat_artifact ) = 0 then
12558: LD_VAR 0 1
12562: PPUSH
12563: LD_INT 4
12565: PPUSH
12566: CALL_OW 289
12570: PUSH
12571: LD_INT 0
12573: EQUAL
12574: IFFALSE 12591
// SetCargo ( i , mat_siberit , 100 ) ;
12576: LD_VAR 0 1
12580: PPUSH
12581: LD_INT 3
12583: PPUSH
12584: LD_INT 100
12586: PPUSH
12587: CALL_OW 290
12591: GO 12555
12593: POP
12594: POP
// end ;
12595: PPOPN 2
12597: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12598: LD_EXP 8
12602: IFFALSE 12610
12604: PUSH
12605: LD_EXP 53
12609: AND
12610: IFFALSE 12793
12612: GO 12614
12614: DISABLE
12615: LD_INT 0
12617: PPUSH
12618: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12619: LD_ADDR_VAR 0 2
12623: PUSH
12624: LD_INT 22
12626: PUSH
12627: LD_OWVAR 2
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: PPUSH
12636: CALL_OW 69
12640: ST_TO_ADDR
// if not tmp then
12641: LD_VAR 0 2
12645: NOT
12646: IFFALSE 12650
// exit ;
12648: GO 12793
// for i := 1 to 2 do
12650: LD_ADDR_VAR 0 1
12654: PUSH
12655: DOUBLE
12656: LD_INT 1
12658: DEC
12659: ST_TO_ADDR
12660: LD_INT 2
12662: PUSH
12663: FOR_TO
12664: IFFALSE 12791
// begin uc_side := your_side ;
12666: LD_ADDR_OWVAR 20
12670: PUSH
12671: LD_OWVAR 2
12675: ST_TO_ADDR
// uc_nation := nation_american ;
12676: LD_ADDR_OWVAR 21
12680: PUSH
12681: LD_INT 1
12683: ST_TO_ADDR
// vc_chassis := us_morphling ;
12684: LD_ADDR_OWVAR 37
12688: PUSH
12689: LD_INT 5
12691: ST_TO_ADDR
// vc_engine := engine_siberite ;
12692: LD_ADDR_OWVAR 39
12696: PUSH
12697: LD_INT 3
12699: ST_TO_ADDR
// vc_control := control_computer ;
12700: LD_ADDR_OWVAR 38
12704: PUSH
12705: LD_INT 3
12707: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12708: LD_ADDR_OWVAR 40
12712: PUSH
12713: LD_INT 10
12715: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12716: LD_VAR 0 2
12720: PUSH
12721: LD_INT 1
12723: ARRAY
12724: PPUSH
12725: CALL_OW 310
12729: NOT
12730: IFFALSE 12777
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12732: CALL_OW 45
12736: PPUSH
12737: LD_VAR 0 2
12741: PUSH
12742: LD_INT 1
12744: ARRAY
12745: PPUSH
12746: CALL_OW 250
12750: PPUSH
12751: LD_VAR 0 2
12755: PUSH
12756: LD_INT 1
12758: ARRAY
12759: PPUSH
12760: CALL_OW 251
12764: PPUSH
12765: LD_INT 12
12767: PPUSH
12768: LD_INT 1
12770: PPUSH
12771: CALL_OW 50
12775: GO 12789
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12777: CALL_OW 45
12781: PPUSH
12782: LD_INT 1
12784: PPUSH
12785: CALL_OW 51
// end ;
12789: GO 12663
12791: POP
12792: POP
// end ;
12793: PPOPN 2
12795: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12796: LD_EXP 8
12800: IFFALSE 12808
12802: PUSH
12803: LD_EXP 54
12807: AND
12808: IFFALSE 13030
12810: GO 12812
12812: DISABLE
12813: LD_INT 0
12815: PPUSH
12816: PPUSH
12817: PPUSH
12818: PPUSH
12819: PPUSH
12820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12821: LD_ADDR_VAR 0 6
12825: PUSH
12826: LD_INT 22
12828: PUSH
12829: LD_OWVAR 2
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 21
12840: PUSH
12841: LD_INT 1
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: PUSH
12848: LD_INT 3
12850: PUSH
12851: LD_INT 23
12853: PUSH
12854: LD_INT 0
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: LIST
12869: PPUSH
12870: CALL_OW 69
12874: ST_TO_ADDR
// if not tmp then
12875: LD_VAR 0 6
12879: NOT
12880: IFFALSE 12884
// exit ;
12882: GO 13030
// s1 := rand ( 1 , 4 ) ;
12884: LD_ADDR_VAR 0 2
12888: PUSH
12889: LD_INT 1
12891: PPUSH
12892: LD_INT 4
12894: PPUSH
12895: CALL_OW 12
12899: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12900: LD_ADDR_VAR 0 4
12904: PUSH
12905: LD_VAR 0 6
12909: PUSH
12910: LD_INT 1
12912: ARRAY
12913: PPUSH
12914: LD_VAR 0 2
12918: PPUSH
12919: CALL_OW 259
12923: ST_TO_ADDR
// if s1 = 1 then
12924: LD_VAR 0 2
12928: PUSH
12929: LD_INT 1
12931: EQUAL
12932: IFFALSE 12952
// s2 := rand ( 2 , 4 ) else
12934: LD_ADDR_VAR 0 3
12938: PUSH
12939: LD_INT 2
12941: PPUSH
12942: LD_INT 4
12944: PPUSH
12945: CALL_OW 12
12949: ST_TO_ADDR
12950: GO 12960
// s2 := 1 ;
12952: LD_ADDR_VAR 0 3
12956: PUSH
12957: LD_INT 1
12959: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12960: LD_ADDR_VAR 0 5
12964: PUSH
12965: LD_VAR 0 6
12969: PUSH
12970: LD_INT 1
12972: ARRAY
12973: PPUSH
12974: LD_VAR 0 3
12978: PPUSH
12979: CALL_OW 259
12983: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12984: LD_VAR 0 6
12988: PUSH
12989: LD_INT 1
12991: ARRAY
12992: PPUSH
12993: LD_VAR 0 2
12997: PPUSH
12998: LD_VAR 0 5
13002: PPUSH
13003: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
13007: LD_VAR 0 6
13011: PUSH
13012: LD_INT 1
13014: ARRAY
13015: PPUSH
13016: LD_VAR 0 3
13020: PPUSH
13021: LD_VAR 0 4
13025: PPUSH
13026: CALL_OW 237
// end ;
13030: PPOPN 6
13032: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
13033: LD_EXP 8
13037: IFFALSE 13045
13039: PUSH
13040: LD_EXP 55
13044: AND
13045: IFFALSE 13124
13047: GO 13049
13049: DISABLE
13050: LD_INT 0
13052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
13053: LD_ADDR_VAR 0 1
13057: PUSH
13058: LD_INT 22
13060: PUSH
13061: LD_OWVAR 2
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: LD_INT 30
13072: PUSH
13073: LD_INT 3
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: PPUSH
13084: CALL_OW 69
13088: ST_TO_ADDR
// if not tmp then
13089: LD_VAR 0 1
13093: NOT
13094: IFFALSE 13098
// exit ;
13096: GO 13124
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13098: LD_VAR 0 1
13102: PUSH
13103: LD_INT 1
13105: PPUSH
13106: LD_VAR 0 1
13110: PPUSH
13111: CALL_OW 12
13115: ARRAY
13116: PPUSH
13117: LD_INT 1
13119: PPUSH
13120: CALL_OW 234
// end ;
13124: PPOPN 1
13126: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
13127: LD_EXP 8
13131: IFFALSE 13139
13133: PUSH
13134: LD_EXP 56
13138: AND
13139: IFFALSE 13251
13141: GO 13143
13143: DISABLE
13144: LD_INT 0
13146: PPUSH
13147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
13148: LD_ADDR_VAR 0 2
13152: PUSH
13153: LD_INT 22
13155: PUSH
13156: LD_OWVAR 2
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PUSH
13165: LD_INT 2
13167: PUSH
13168: LD_INT 30
13170: PUSH
13171: LD_INT 27
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 30
13180: PUSH
13181: LD_INT 26
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 30
13190: PUSH
13191: LD_INT 28
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PPUSH
13208: CALL_OW 69
13212: ST_TO_ADDR
// if not tmp then
13213: LD_VAR 0 2
13217: NOT
13218: IFFALSE 13222
// exit ;
13220: GO 13251
// for i in tmp do
13222: LD_ADDR_VAR 0 1
13226: PUSH
13227: LD_VAR 0 2
13231: PUSH
13232: FOR_IN
13233: IFFALSE 13249
// SetLives ( i , 1 ) ;
13235: LD_VAR 0 1
13239: PPUSH
13240: LD_INT 1
13242: PPUSH
13243: CALL_OW 234
13247: GO 13232
13249: POP
13250: POP
// end ;
13251: PPOPN 2
13253: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
13254: LD_EXP 8
13258: IFFALSE 13266
13260: PUSH
13261: LD_EXP 57
13265: AND
13266: IFFALSE 13553
13268: GO 13270
13270: DISABLE
13271: LD_INT 0
13273: PPUSH
13274: PPUSH
13275: PPUSH
// begin i := rand ( 1 , 7 ) ;
13276: LD_ADDR_VAR 0 1
13280: PUSH
13281: LD_INT 1
13283: PPUSH
13284: LD_INT 7
13286: PPUSH
13287: CALL_OW 12
13291: ST_TO_ADDR
// case i of 1 :
13292: LD_VAR 0 1
13296: PUSH
13297: LD_INT 1
13299: DOUBLE
13300: EQUAL
13301: IFTRUE 13305
13303: GO 13315
13305: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
13306: LD_STRING earthquake(getX(game), 0, 32)
13308: PPUSH
13309: CALL_OW 559
13313: GO 13553
13315: LD_INT 2
13317: DOUBLE
13318: EQUAL
13319: IFTRUE 13323
13321: GO 13337
13323: POP
// begin ToLua ( displayStucuk(); ) ;
13324: LD_STRING displayStucuk();
13326: PPUSH
13327: CALL_OW 559
// ResetFog ;
13331: CALL_OW 335
// end ; 3 :
13335: GO 13553
13337: LD_INT 3
13339: DOUBLE
13340: EQUAL
13341: IFTRUE 13345
13343: GO 13449
13345: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13346: LD_ADDR_VAR 0 2
13350: PUSH
13351: LD_INT 22
13353: PUSH
13354: LD_OWVAR 2
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: PUSH
13363: LD_INT 25
13365: PUSH
13366: LD_INT 1
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: PUSH
13373: EMPTY
13374: LIST
13375: LIST
13376: PPUSH
13377: CALL_OW 69
13381: ST_TO_ADDR
// if not tmp then
13382: LD_VAR 0 2
13386: NOT
13387: IFFALSE 13391
// exit ;
13389: GO 13553
// un := tmp [ rand ( 1 , tmp ) ] ;
13391: LD_ADDR_VAR 0 3
13395: PUSH
13396: LD_VAR 0 2
13400: PUSH
13401: LD_INT 1
13403: PPUSH
13404: LD_VAR 0 2
13408: PPUSH
13409: CALL_OW 12
13413: ARRAY
13414: ST_TO_ADDR
// if Crawls ( un ) then
13415: LD_VAR 0 3
13419: PPUSH
13420: CALL_OW 318
13424: IFFALSE 13435
// ComWalk ( un ) ;
13426: LD_VAR 0 3
13430: PPUSH
13431: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13435: LD_VAR 0 3
13439: PPUSH
13440: LD_INT 8
13442: PPUSH
13443: CALL_OW 336
// end ; 4 :
13447: GO 13553
13449: LD_INT 4
13451: DOUBLE
13452: EQUAL
13453: IFTRUE 13457
13455: GO 13531
13457: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13458: LD_ADDR_VAR 0 2
13462: PUSH
13463: LD_INT 22
13465: PUSH
13466: LD_OWVAR 2
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: PUSH
13475: LD_INT 30
13477: PUSH
13478: LD_INT 29
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: PPUSH
13489: CALL_OW 69
13493: ST_TO_ADDR
// if not tmp then
13494: LD_VAR 0 2
13498: NOT
13499: IFFALSE 13503
// exit ;
13501: GO 13553
// CenterNowOnUnits ( tmp [ 1 ] ) ;
13503: LD_VAR 0 2
13507: PUSH
13508: LD_INT 1
13510: ARRAY
13511: PPUSH
13512: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
13516: LD_VAR 0 2
13520: PUSH
13521: LD_INT 1
13523: ARRAY
13524: PPUSH
13525: CALL_OW 65
// end ; 5 .. 7 :
13529: GO 13553
13531: LD_INT 5
13533: DOUBLE
13534: GREATEREQUAL
13535: IFFALSE 13543
13537: LD_INT 7
13539: DOUBLE
13540: LESSEQUAL
13541: IFTRUE 13545
13543: GO 13552
13545: POP
// StreamSibBomb ; end ;
13546: CALL 9734 0 0
13550: GO 13553
13552: POP
// end ;
13553: PPOPN 3
13555: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
13556: LD_EXP 8
13560: IFFALSE 13568
13562: PUSH
13563: LD_EXP 58
13567: AND
13568: IFFALSE 13724
13570: GO 13572
13572: DISABLE
13573: LD_INT 0
13575: PPUSH
13576: PPUSH
13577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13578: LD_ADDR_VAR 0 2
13582: PUSH
13583: LD_INT 81
13585: PUSH
13586: LD_OWVAR 2
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: PUSH
13595: LD_INT 2
13597: PUSH
13598: LD_INT 21
13600: PUSH
13601: LD_INT 1
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PUSH
13608: LD_INT 21
13610: PUSH
13611: LD_INT 2
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: LIST
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: PPUSH
13627: CALL_OW 69
13631: ST_TO_ADDR
// if not tmp then
13632: LD_VAR 0 2
13636: NOT
13637: IFFALSE 13641
// exit ;
13639: GO 13724
// p := 0 ;
13641: LD_ADDR_VAR 0 3
13645: PUSH
13646: LD_INT 0
13648: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13649: LD_INT 35
13651: PPUSH
13652: CALL_OW 67
// p := p + 1 ;
13656: LD_ADDR_VAR 0 3
13660: PUSH
13661: LD_VAR 0 3
13665: PUSH
13666: LD_INT 1
13668: PLUS
13669: ST_TO_ADDR
// for i in tmp do
13670: LD_ADDR_VAR 0 1
13674: PUSH
13675: LD_VAR 0 2
13679: PUSH
13680: FOR_IN
13681: IFFALSE 13712
// if GetLives ( i ) < 1000 then
13683: LD_VAR 0 1
13687: PPUSH
13688: CALL_OW 256
13692: PUSH
13693: LD_INT 1000
13695: LESS
13696: IFFALSE 13710
// SetLives ( i , 1000 ) ;
13698: LD_VAR 0 1
13702: PPUSH
13703: LD_INT 1000
13705: PPUSH
13706: CALL_OW 234
13710: GO 13680
13712: POP
13713: POP
// until p > 20 ;
13714: LD_VAR 0 3
13718: PUSH
13719: LD_INT 20
13721: GREATER
13722: IFFALSE 13649
// end ;
13724: PPOPN 3
13726: END
// every 0 0$1 trigger StreamModeActive and sTime do
13727: LD_EXP 8
13731: IFFALSE 13739
13733: PUSH
13734: LD_EXP 59
13738: AND
13739: IFFALSE 13774
13741: GO 13743
13743: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13744: LD_INT 28
13746: PPUSH
13747: LD_OWVAR 2
13751: PPUSH
13752: LD_INT 2
13754: PPUSH
13755: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13759: LD_INT 30
13761: PPUSH
13762: LD_OWVAR 2
13766: PPUSH
13767: LD_INT 2
13769: PPUSH
13770: CALL_OW 322
// end ;
13774: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13775: LD_EXP 8
13779: IFFALSE 13787
13781: PUSH
13782: LD_EXP 60
13786: AND
13787: IFFALSE 13908
13789: GO 13791
13791: DISABLE
13792: LD_INT 0
13794: PPUSH
13795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13796: LD_ADDR_VAR 0 2
13800: PUSH
13801: LD_INT 22
13803: PUSH
13804: LD_OWVAR 2
13808: PUSH
13809: EMPTY
13810: LIST
13811: LIST
13812: PUSH
13813: LD_INT 21
13815: PUSH
13816: LD_INT 1
13818: PUSH
13819: EMPTY
13820: LIST
13821: LIST
13822: PUSH
13823: LD_INT 3
13825: PUSH
13826: LD_INT 23
13828: PUSH
13829: LD_INT 0
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: LIST
13844: PPUSH
13845: CALL_OW 69
13849: ST_TO_ADDR
// if not tmp then
13850: LD_VAR 0 2
13854: NOT
13855: IFFALSE 13859
// exit ;
13857: GO 13908
// for i in tmp do
13859: LD_ADDR_VAR 0 1
13863: PUSH
13864: LD_VAR 0 2
13868: PUSH
13869: FOR_IN
13870: IFFALSE 13906
// begin if Crawls ( i ) then
13872: LD_VAR 0 1
13876: PPUSH
13877: CALL_OW 318
13881: IFFALSE 13892
// ComWalk ( i ) ;
13883: LD_VAR 0 1
13887: PPUSH
13888: CALL_OW 138
// SetClass ( i , 2 ) ;
13892: LD_VAR 0 1
13896: PPUSH
13897: LD_INT 2
13899: PPUSH
13900: CALL_OW 336
// end ;
13904: GO 13869
13906: POP
13907: POP
// end ;
13908: PPOPN 2
13910: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13911: LD_EXP 8
13915: IFFALSE 13923
13917: PUSH
13918: LD_EXP 61
13922: AND
13923: IFFALSE 14213
13925: GO 13927
13927: DISABLE
13928: LD_INT 0
13930: PPUSH
13931: PPUSH
13932: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13933: LD_OWVAR 2
13937: PPUSH
13938: LD_INT 9
13940: PPUSH
13941: LD_INT 1
13943: PPUSH
13944: LD_INT 1
13946: PPUSH
13947: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13951: LD_INT 9
13953: PPUSH
13954: LD_OWVAR 2
13958: PPUSH
13959: CALL_OW 343
// uc_side := 9 ;
13963: LD_ADDR_OWVAR 20
13967: PUSH
13968: LD_INT 9
13970: ST_TO_ADDR
// uc_nation := 2 ;
13971: LD_ADDR_OWVAR 21
13975: PUSH
13976: LD_INT 2
13978: ST_TO_ADDR
// hc_name := Dark Warrior ;
13979: LD_ADDR_OWVAR 26
13983: PUSH
13984: LD_STRING Dark Warrior
13986: ST_TO_ADDR
// hc_gallery :=  ;
13987: LD_ADDR_OWVAR 33
13991: PUSH
13992: LD_STRING 
13994: ST_TO_ADDR
// hc_noskilllimit := true ;
13995: LD_ADDR_OWVAR 76
13999: PUSH
14000: LD_INT 1
14002: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
14003: LD_ADDR_OWVAR 31
14007: PUSH
14008: LD_INT 30
14010: PUSH
14011: LD_INT 30
14013: PUSH
14014: LD_INT 30
14016: PUSH
14017: LD_INT 30
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: ST_TO_ADDR
// un := CreateHuman ;
14026: LD_ADDR_VAR 0 3
14030: PUSH
14031: CALL_OW 44
14035: ST_TO_ADDR
// hc_noskilllimit := false ;
14036: LD_ADDR_OWVAR 76
14040: PUSH
14041: LD_INT 0
14043: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14044: LD_VAR 0 3
14048: PPUSH
14049: LD_INT 1
14051: PPUSH
14052: CALL_OW 51
// ToLua ( playRanger() ) ;
14056: LD_STRING playRanger()
14058: PPUSH
14059: CALL_OW 559
// p := 0 ;
14063: LD_ADDR_VAR 0 2
14067: PUSH
14068: LD_INT 0
14070: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14071: LD_INT 35
14073: PPUSH
14074: CALL_OW 67
// p := p + 1 ;
14078: LD_ADDR_VAR 0 2
14082: PUSH
14083: LD_VAR 0 2
14087: PUSH
14088: LD_INT 1
14090: PLUS
14091: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
14092: LD_VAR 0 3
14096: PPUSH
14097: CALL_OW 256
14101: PUSH
14102: LD_INT 1000
14104: LESS
14105: IFFALSE 14119
// SetLives ( un , 1000 ) ;
14107: LD_VAR 0 3
14111: PPUSH
14112: LD_INT 1000
14114: PPUSH
14115: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
14119: LD_VAR 0 3
14123: PPUSH
14124: LD_INT 81
14126: PUSH
14127: LD_OWVAR 2
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: PUSH
14136: LD_INT 91
14138: PUSH
14139: LD_VAR 0 3
14143: PUSH
14144: LD_INT 30
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: LIST
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PPUSH
14156: CALL_OW 69
14160: PPUSH
14161: LD_VAR 0 3
14165: PPUSH
14166: CALL_OW 74
14170: PPUSH
14171: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
14175: LD_VAR 0 2
14179: PUSH
14180: LD_INT 80
14182: GREATER
14183: IFTRUE 14196
14185: PUSH
14186: LD_VAR 0 3
14190: PPUSH
14191: CALL_OW 301
14195: OR
14196: IFFALSE 14071
// if un then
14198: LD_VAR 0 3
14202: IFFALSE 14213
// RemoveUnit ( un ) ;
14204: LD_VAR 0 3
14208: PPUSH
14209: CALL_OW 64
// end ;
14213: PPOPN 3
14215: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
14216: LD_EXP 62
14220: IFFALSE 14336
14222: GO 14224
14224: DISABLE
14225: LD_INT 0
14227: PPUSH
14228: PPUSH
14229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14230: LD_ADDR_VAR 0 2
14234: PUSH
14235: LD_INT 81
14237: PUSH
14238: LD_OWVAR 2
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: PUSH
14247: LD_INT 21
14249: PUSH
14250: LD_INT 1
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: PPUSH
14261: CALL_OW 69
14265: ST_TO_ADDR
// ToLua ( playComputer() ) ;
14266: LD_STRING playComputer()
14268: PPUSH
14269: CALL_OW 559
// if not tmp then
14273: LD_VAR 0 2
14277: NOT
14278: IFFALSE 14282
// exit ;
14280: GO 14336
// for i in tmp do
14282: LD_ADDR_VAR 0 1
14286: PUSH
14287: LD_VAR 0 2
14291: PUSH
14292: FOR_IN
14293: IFFALSE 14334
// for j := 1 to 4 do
14295: LD_ADDR_VAR 0 3
14299: PUSH
14300: DOUBLE
14301: LD_INT 1
14303: DEC
14304: ST_TO_ADDR
14305: LD_INT 4
14307: PUSH
14308: FOR_TO
14309: IFFALSE 14330
// SetSkill ( i , j , 10 ) ;
14311: LD_VAR 0 1
14315: PPUSH
14316: LD_VAR 0 3
14320: PPUSH
14321: LD_INT 10
14323: PPUSH
14324: CALL_OW 237
14328: GO 14308
14330: POP
14331: POP
14332: GO 14292
14334: POP
14335: POP
// end ;
14336: PPOPN 3
14338: END
// every 0 0$1 trigger s30 do var i , tmp ;
14339: LD_EXP 63
14343: IFFALSE 14412
14345: GO 14347
14347: DISABLE
14348: LD_INT 0
14350: PPUSH
14351: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14352: LD_ADDR_VAR 0 2
14356: PUSH
14357: LD_INT 22
14359: PUSH
14360: LD_OWVAR 2
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: PPUSH
14369: CALL_OW 69
14373: ST_TO_ADDR
// if not tmp then
14374: LD_VAR 0 2
14378: NOT
14379: IFFALSE 14383
// exit ;
14381: GO 14412
// for i in tmp do
14383: LD_ADDR_VAR 0 1
14387: PUSH
14388: LD_VAR 0 2
14392: PUSH
14393: FOR_IN
14394: IFFALSE 14410
// SetLives ( i , 300 ) ;
14396: LD_VAR 0 1
14400: PPUSH
14401: LD_INT 300
14403: PPUSH
14404: CALL_OW 234
14408: GO 14393
14410: POP
14411: POP
// end ;
14412: PPOPN 2
14414: END
// every 0 0$1 trigger s60 do var i , tmp ;
14415: LD_EXP 64
14419: IFFALSE 14488
14421: GO 14423
14423: DISABLE
14424: LD_INT 0
14426: PPUSH
14427: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14428: LD_ADDR_VAR 0 2
14432: PUSH
14433: LD_INT 22
14435: PUSH
14436: LD_OWVAR 2
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PPUSH
14445: CALL_OW 69
14449: ST_TO_ADDR
// if not tmp then
14450: LD_VAR 0 2
14454: NOT
14455: IFFALSE 14459
// exit ;
14457: GO 14488
// for i in tmp do
14459: LD_ADDR_VAR 0 1
14463: PUSH
14464: LD_VAR 0 2
14468: PUSH
14469: FOR_IN
14470: IFFALSE 14486
// SetLives ( i , 600 ) ;
14472: LD_VAR 0 1
14476: PPUSH
14477: LD_INT 600
14479: PPUSH
14480: CALL_OW 234
14484: GO 14469
14486: POP
14487: POP
// end ;
14488: PPOPN 2
14490: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14491: LD_INT 0
14493: PPUSH
// case cmd of 301 :
14494: LD_VAR 0 1
14498: PUSH
14499: LD_INT 301
14501: DOUBLE
14502: EQUAL
14503: IFTRUE 14507
14505: GO 14539
14507: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
14508: LD_VAR 0 6
14512: PPUSH
14513: LD_VAR 0 7
14517: PPUSH
14518: LD_VAR 0 8
14522: PPUSH
14523: LD_VAR 0 4
14527: PPUSH
14528: LD_VAR 0 5
14532: PPUSH
14533: CALL 15752 0 5
14537: GO 14660
14539: LD_INT 302
14541: DOUBLE
14542: EQUAL
14543: IFTRUE 14547
14545: GO 14584
14547: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
14548: LD_VAR 0 6
14552: PPUSH
14553: LD_VAR 0 7
14557: PPUSH
14558: LD_VAR 0 8
14562: PPUSH
14563: LD_VAR 0 9
14567: PPUSH
14568: LD_VAR 0 4
14572: PPUSH
14573: LD_VAR 0 5
14577: PPUSH
14578: CALL 15843 0 6
14582: GO 14660
14584: LD_INT 303
14586: DOUBLE
14587: EQUAL
14588: IFTRUE 14592
14590: GO 14629
14592: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
14593: LD_VAR 0 6
14597: PPUSH
14598: LD_VAR 0 7
14602: PPUSH
14603: LD_VAR 0 8
14607: PPUSH
14608: LD_VAR 0 9
14612: PPUSH
14613: LD_VAR 0 4
14617: PPUSH
14618: LD_VAR 0 5
14622: PPUSH
14623: CALL 14665 0 6
14627: GO 14660
14629: LD_INT 304
14631: DOUBLE
14632: EQUAL
14633: IFTRUE 14637
14635: GO 14659
14637: POP
// hHackTeleport ( unit , x , y ) ; end ;
14638: LD_VAR 0 2
14642: PPUSH
14643: LD_VAR 0 4
14647: PPUSH
14648: LD_VAR 0 5
14652: PPUSH
14653: CALL 16436 0 3
14657: GO 14660
14659: POP
// end ;
14660: LD_VAR 0 12
14664: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14665: LD_INT 0
14667: PPUSH
14668: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14669: LD_VAR 0 1
14673: PUSH
14674: LD_INT 1
14676: LESS
14677: IFTRUE 14689
14679: PUSH
14680: LD_VAR 0 1
14684: PUSH
14685: LD_INT 3
14687: GREATER
14688: OR
14689: IFTRUE 14707
14691: PUSH
14692: LD_VAR 0 5
14696: PPUSH
14697: LD_VAR 0 6
14701: PPUSH
14702: CALL_OW 428
14706: OR
14707: IFFALSE 14711
// exit ;
14709: GO 15439
// uc_side := your_side ;
14711: LD_ADDR_OWVAR 20
14715: PUSH
14716: LD_OWVAR 2
14720: ST_TO_ADDR
// uc_nation := nation ;
14721: LD_ADDR_OWVAR 21
14725: PUSH
14726: LD_VAR 0 1
14730: ST_TO_ADDR
// bc_level = 1 ;
14731: LD_ADDR_OWVAR 43
14735: PUSH
14736: LD_INT 1
14738: ST_TO_ADDR
// case btype of 1 :
14739: LD_VAR 0 2
14743: PUSH
14744: LD_INT 1
14746: DOUBLE
14747: EQUAL
14748: IFTRUE 14752
14750: GO 14763
14752: POP
// bc_type := b_depot ; 2 :
14753: LD_ADDR_OWVAR 42
14757: PUSH
14758: LD_INT 0
14760: ST_TO_ADDR
14761: GO 15383
14763: LD_INT 2
14765: DOUBLE
14766: EQUAL
14767: IFTRUE 14771
14769: GO 14782
14771: POP
// bc_type := b_warehouse ; 3 :
14772: LD_ADDR_OWVAR 42
14776: PUSH
14777: LD_INT 1
14779: ST_TO_ADDR
14780: GO 15383
14782: LD_INT 3
14784: DOUBLE
14785: EQUAL
14786: IFTRUE 14790
14788: GO 14801
14790: POP
// bc_type := b_lab ; 4 .. 9 :
14791: LD_ADDR_OWVAR 42
14795: PUSH
14796: LD_INT 6
14798: ST_TO_ADDR
14799: GO 15383
14801: LD_INT 4
14803: DOUBLE
14804: GREATEREQUAL
14805: IFFALSE 14813
14807: LD_INT 9
14809: DOUBLE
14810: LESSEQUAL
14811: IFTRUE 14815
14813: GO 14875
14815: POP
// begin bc_type := b_lab_half ;
14816: LD_ADDR_OWVAR 42
14820: PUSH
14821: LD_INT 7
14823: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14824: LD_ADDR_OWVAR 44
14828: PUSH
14829: LD_INT 10
14831: PUSH
14832: LD_INT 11
14834: PUSH
14835: LD_INT 12
14837: PUSH
14838: LD_INT 15
14840: PUSH
14841: LD_INT 14
14843: PUSH
14844: LD_INT 13
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: PUSH
14855: LD_VAR 0 2
14859: PUSH
14860: LD_INT 3
14862: MINUS
14863: ARRAY
14864: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
14865: LD_ADDR_OWVAR 45
14869: PUSH
14870: LD_INT 9
14872: ST_TO_ADDR
// end ; 10 .. 13 :
14873: GO 15383
14875: LD_INT 10
14877: DOUBLE
14878: GREATEREQUAL
14879: IFFALSE 14887
14881: LD_INT 13
14883: DOUBLE
14884: LESSEQUAL
14885: IFTRUE 14889
14887: GO 14966
14889: POP
// begin bc_type := b_lab_full ;
14890: LD_ADDR_OWVAR 42
14894: PUSH
14895: LD_INT 8
14897: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14898: LD_ADDR_OWVAR 44
14902: PUSH
14903: LD_INT 10
14905: PUSH
14906: LD_INT 12
14908: PUSH
14909: LD_INT 14
14911: PUSH
14912: LD_INT 13
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: PUSH
14921: LD_VAR 0 2
14925: PUSH
14926: LD_INT 9
14928: MINUS
14929: ARRAY
14930: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14931: LD_ADDR_OWVAR 45
14935: PUSH
14936: LD_INT 11
14938: PUSH
14939: LD_INT 15
14941: PUSH
14942: LD_INT 12
14944: PUSH
14945: LD_INT 15
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: PUSH
14954: LD_VAR 0 2
14958: PUSH
14959: LD_INT 9
14961: MINUS
14962: ARRAY
14963: ST_TO_ADDR
// end ; 14 :
14964: GO 15383
14966: LD_INT 14
14968: DOUBLE
14969: EQUAL
14970: IFTRUE 14974
14972: GO 14985
14974: POP
// bc_type := b_workshop ; 15 :
14975: LD_ADDR_OWVAR 42
14979: PUSH
14980: LD_INT 2
14982: ST_TO_ADDR
14983: GO 15383
14985: LD_INT 15
14987: DOUBLE
14988: EQUAL
14989: IFTRUE 14993
14991: GO 15004
14993: POP
// bc_type := b_factory ; 16 :
14994: LD_ADDR_OWVAR 42
14998: PUSH
14999: LD_INT 3
15001: ST_TO_ADDR
15002: GO 15383
15004: LD_INT 16
15006: DOUBLE
15007: EQUAL
15008: IFTRUE 15012
15010: GO 15023
15012: POP
// bc_type := b_ext_gun ; 17 :
15013: LD_ADDR_OWVAR 42
15017: PUSH
15018: LD_INT 17
15020: ST_TO_ADDR
15021: GO 15383
15023: LD_INT 17
15025: DOUBLE
15026: EQUAL
15027: IFTRUE 15031
15029: GO 15059
15031: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
15032: LD_ADDR_OWVAR 42
15036: PUSH
15037: LD_INT 19
15039: PUSH
15040: LD_INT 23
15042: PUSH
15043: LD_INT 19
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: LIST
15050: PUSH
15051: LD_VAR 0 1
15055: ARRAY
15056: ST_TO_ADDR
15057: GO 15383
15059: LD_INT 18
15061: DOUBLE
15062: EQUAL
15063: IFTRUE 15067
15065: GO 15078
15067: POP
// bc_type := b_ext_radar ; 19 :
15068: LD_ADDR_OWVAR 42
15072: PUSH
15073: LD_INT 20
15075: ST_TO_ADDR
15076: GO 15383
15078: LD_INT 19
15080: DOUBLE
15081: EQUAL
15082: IFTRUE 15086
15084: GO 15097
15086: POP
// bc_type := b_ext_radio ; 20 :
15087: LD_ADDR_OWVAR 42
15091: PUSH
15092: LD_INT 22
15094: ST_TO_ADDR
15095: GO 15383
15097: LD_INT 20
15099: DOUBLE
15100: EQUAL
15101: IFTRUE 15105
15103: GO 15116
15105: POP
// bc_type := b_ext_siberium ; 21 :
15106: LD_ADDR_OWVAR 42
15110: PUSH
15111: LD_INT 21
15113: ST_TO_ADDR
15114: GO 15383
15116: LD_INT 21
15118: DOUBLE
15119: EQUAL
15120: IFTRUE 15124
15122: GO 15135
15124: POP
// bc_type := b_ext_computer ; 22 :
15125: LD_ADDR_OWVAR 42
15129: PUSH
15130: LD_INT 24
15132: ST_TO_ADDR
15133: GO 15383
15135: LD_INT 22
15137: DOUBLE
15138: EQUAL
15139: IFTRUE 15143
15141: GO 15154
15143: POP
// bc_type := b_ext_track ; 23 :
15144: LD_ADDR_OWVAR 42
15148: PUSH
15149: LD_INT 16
15151: ST_TO_ADDR
15152: GO 15383
15154: LD_INT 23
15156: DOUBLE
15157: EQUAL
15158: IFTRUE 15162
15160: GO 15173
15162: POP
// bc_type := b_ext_laser ; 24 :
15163: LD_ADDR_OWVAR 42
15167: PUSH
15168: LD_INT 25
15170: ST_TO_ADDR
15171: GO 15383
15173: LD_INT 24
15175: DOUBLE
15176: EQUAL
15177: IFTRUE 15181
15179: GO 15192
15181: POP
// bc_type := b_control_tower ; 25 :
15182: LD_ADDR_OWVAR 42
15186: PUSH
15187: LD_INT 36
15189: ST_TO_ADDR
15190: GO 15383
15192: LD_INT 25
15194: DOUBLE
15195: EQUAL
15196: IFTRUE 15200
15198: GO 15211
15200: POP
// bc_type := b_breastwork ; 26 :
15201: LD_ADDR_OWVAR 42
15205: PUSH
15206: LD_INT 31
15208: ST_TO_ADDR
15209: GO 15383
15211: LD_INT 26
15213: DOUBLE
15214: EQUAL
15215: IFTRUE 15219
15217: GO 15230
15219: POP
// bc_type := b_bunker ; 27 :
15220: LD_ADDR_OWVAR 42
15224: PUSH
15225: LD_INT 32
15227: ST_TO_ADDR
15228: GO 15383
15230: LD_INT 27
15232: DOUBLE
15233: EQUAL
15234: IFTRUE 15238
15236: GO 15249
15238: POP
// bc_type := b_turret ; 28 :
15239: LD_ADDR_OWVAR 42
15243: PUSH
15244: LD_INT 33
15246: ST_TO_ADDR
15247: GO 15383
15249: LD_INT 28
15251: DOUBLE
15252: EQUAL
15253: IFTRUE 15257
15255: GO 15268
15257: POP
// bc_type := b_armoury ; 29 :
15258: LD_ADDR_OWVAR 42
15262: PUSH
15263: LD_INT 4
15265: ST_TO_ADDR
15266: GO 15383
15268: LD_INT 29
15270: DOUBLE
15271: EQUAL
15272: IFTRUE 15276
15274: GO 15287
15276: POP
// bc_type := b_barracks ; 30 :
15277: LD_ADDR_OWVAR 42
15281: PUSH
15282: LD_INT 5
15284: ST_TO_ADDR
15285: GO 15383
15287: LD_INT 30
15289: DOUBLE
15290: EQUAL
15291: IFTRUE 15295
15293: GO 15306
15295: POP
// bc_type := b_solar_power ; 31 :
15296: LD_ADDR_OWVAR 42
15300: PUSH
15301: LD_INT 27
15303: ST_TO_ADDR
15304: GO 15383
15306: LD_INT 31
15308: DOUBLE
15309: EQUAL
15310: IFTRUE 15314
15312: GO 15325
15314: POP
// bc_type := b_oil_power ; 32 :
15315: LD_ADDR_OWVAR 42
15319: PUSH
15320: LD_INT 26
15322: ST_TO_ADDR
15323: GO 15383
15325: LD_INT 32
15327: DOUBLE
15328: EQUAL
15329: IFTRUE 15333
15331: GO 15344
15333: POP
// bc_type := b_siberite_power ; 33 :
15334: LD_ADDR_OWVAR 42
15338: PUSH
15339: LD_INT 28
15341: ST_TO_ADDR
15342: GO 15383
15344: LD_INT 33
15346: DOUBLE
15347: EQUAL
15348: IFTRUE 15352
15350: GO 15363
15352: POP
// bc_type := b_oil_mine ; 34 :
15353: LD_ADDR_OWVAR 42
15357: PUSH
15358: LD_INT 29
15360: ST_TO_ADDR
15361: GO 15383
15363: LD_INT 34
15365: DOUBLE
15366: EQUAL
15367: IFTRUE 15371
15369: GO 15382
15371: POP
// bc_type := b_siberite_mine ; end ;
15372: LD_ADDR_OWVAR 42
15376: PUSH
15377: LD_INT 30
15379: ST_TO_ADDR
15380: GO 15383
15382: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
15383: LD_ADDR_VAR 0 8
15387: PUSH
15388: LD_VAR 0 5
15392: PPUSH
15393: LD_VAR 0 6
15397: PPUSH
15398: LD_VAR 0 3
15402: PPUSH
15403: CALL_OW 47
15407: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
15408: LD_OWVAR 42
15412: PUSH
15413: LD_INT 32
15415: PUSH
15416: LD_INT 33
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: IN
15423: IFFALSE 15439
// PlaceWeaponTurret ( b , weapon ) ;
15425: LD_VAR 0 8
15429: PPUSH
15430: LD_VAR 0 4
15434: PPUSH
15435: CALL_OW 431
// end ;
15439: LD_VAR 0 7
15443: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
15444: LD_INT 0
15446: PPUSH
15447: PPUSH
15448: PPUSH
15449: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15450: LD_ADDR_VAR 0 4
15454: PUSH
15455: LD_INT 22
15457: PUSH
15458: LD_OWVAR 2
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: LD_INT 2
15469: PUSH
15470: LD_INT 30
15472: PUSH
15473: LD_INT 0
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: PUSH
15480: LD_INT 30
15482: PUSH
15483: LD_INT 1
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: LIST
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PPUSH
15499: CALL_OW 69
15503: ST_TO_ADDR
// if not tmp then
15504: LD_VAR 0 4
15508: NOT
15509: IFFALSE 15513
// exit ;
15511: GO 15572
// for i in tmp do
15513: LD_ADDR_VAR 0 2
15517: PUSH
15518: LD_VAR 0 4
15522: PUSH
15523: FOR_IN
15524: IFFALSE 15570
// for j = 1 to 3 do
15526: LD_ADDR_VAR 0 3
15530: PUSH
15531: DOUBLE
15532: LD_INT 1
15534: DEC
15535: ST_TO_ADDR
15536: LD_INT 3
15538: PUSH
15539: FOR_TO
15540: IFFALSE 15566
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
15542: LD_VAR 0 2
15546: PPUSH
15547: CALL_OW 274
15551: PPUSH
15552: LD_VAR 0 3
15556: PPUSH
15557: LD_INT 99999
15559: PPUSH
15560: CALL_OW 277
15564: GO 15539
15566: POP
15567: POP
15568: GO 15523
15570: POP
15571: POP
// end ;
15572: LD_VAR 0 1
15576: RET
// export function hHackSetLevel10 ; var i , j ; begin
15577: LD_INT 0
15579: PPUSH
15580: PPUSH
15581: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15582: LD_ADDR_VAR 0 2
15586: PUSH
15587: LD_INT 21
15589: PUSH
15590: LD_INT 1
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PPUSH
15597: CALL_OW 69
15601: PUSH
15602: FOR_IN
15603: IFFALSE 15655
// if IsSelected ( i ) then
15605: LD_VAR 0 2
15609: PPUSH
15610: CALL_OW 306
15614: IFFALSE 15653
// begin for j := 1 to 4 do
15616: LD_ADDR_VAR 0 3
15620: PUSH
15621: DOUBLE
15622: LD_INT 1
15624: DEC
15625: ST_TO_ADDR
15626: LD_INT 4
15628: PUSH
15629: FOR_TO
15630: IFFALSE 15651
// SetSkill ( i , j , 10 ) ;
15632: LD_VAR 0 2
15636: PPUSH
15637: LD_VAR 0 3
15641: PPUSH
15642: LD_INT 10
15644: PPUSH
15645: CALL_OW 237
15649: GO 15629
15651: POP
15652: POP
// end ;
15653: GO 15602
15655: POP
15656: POP
// end ;
15657: LD_VAR 0 1
15661: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15662: LD_INT 0
15664: PPUSH
15665: PPUSH
15666: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15667: LD_ADDR_VAR 0 2
15671: PUSH
15672: LD_INT 22
15674: PUSH
15675: LD_OWVAR 2
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PUSH
15684: LD_INT 21
15686: PUSH
15687: LD_INT 1
15689: PUSH
15690: EMPTY
15691: LIST
15692: LIST
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PPUSH
15698: CALL_OW 69
15702: PUSH
15703: FOR_IN
15704: IFFALSE 15745
// begin for j := 1 to 4 do
15706: LD_ADDR_VAR 0 3
15710: PUSH
15711: DOUBLE
15712: LD_INT 1
15714: DEC
15715: ST_TO_ADDR
15716: LD_INT 4
15718: PUSH
15719: FOR_TO
15720: IFFALSE 15741
// SetSkill ( i , j , 10 ) ;
15722: LD_VAR 0 2
15726: PPUSH
15727: LD_VAR 0 3
15731: PPUSH
15732: LD_INT 10
15734: PPUSH
15735: CALL_OW 237
15739: GO 15719
15741: POP
15742: POP
// end ;
15743: GO 15703
15745: POP
15746: POP
// end ;
15747: LD_VAR 0 1
15751: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15752: LD_INT 0
15754: PPUSH
// uc_side := your_side ;
15755: LD_ADDR_OWVAR 20
15759: PUSH
15760: LD_OWVAR 2
15764: ST_TO_ADDR
// uc_nation := nation ;
15765: LD_ADDR_OWVAR 21
15769: PUSH
15770: LD_VAR 0 1
15774: ST_TO_ADDR
// InitHc ;
15775: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15779: LD_INT 0
15781: PPUSH
15782: LD_VAR 0 2
15786: PPUSH
15787: LD_VAR 0 3
15791: PPUSH
15792: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15796: LD_VAR 0 4
15800: PPUSH
15801: LD_VAR 0 5
15805: PPUSH
15806: CALL_OW 428
15810: PUSH
15811: LD_INT 0
15813: EQUAL
15814: IFFALSE 15838
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15816: CALL_OW 44
15820: PPUSH
15821: LD_VAR 0 4
15825: PPUSH
15826: LD_VAR 0 5
15830: PPUSH
15831: LD_INT 1
15833: PPUSH
15834: CALL_OW 48
// end ;
15838: LD_VAR 0 6
15842: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15843: LD_INT 0
15845: PPUSH
15846: PPUSH
// uc_side := your_side ;
15847: LD_ADDR_OWVAR 20
15851: PUSH
15852: LD_OWVAR 2
15856: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15857: LD_VAR 0 1
15861: PUSH
15862: LD_INT 1
15864: PUSH
15865: LD_INT 2
15867: PUSH
15868: LD_INT 3
15870: PUSH
15871: LD_INT 4
15873: PUSH
15874: LD_INT 5
15876: PUSH
15877: EMPTY
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: IN
15884: IFFALSE 15896
// uc_nation := nation_american else
15886: LD_ADDR_OWVAR 21
15890: PUSH
15891: LD_INT 1
15893: ST_TO_ADDR
15894: GO 15939
// if chassis in [ 11 , 12 , 13 , 14 ] then
15896: LD_VAR 0 1
15900: PUSH
15901: LD_INT 11
15903: PUSH
15904: LD_INT 12
15906: PUSH
15907: LD_INT 13
15909: PUSH
15910: LD_INT 14
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: IN
15919: IFFALSE 15931
// uc_nation := nation_arabian else
15921: LD_ADDR_OWVAR 21
15925: PUSH
15926: LD_INT 2
15928: ST_TO_ADDR
15929: GO 15939
// uc_nation := nation_russian ;
15931: LD_ADDR_OWVAR 21
15935: PUSH
15936: LD_INT 3
15938: ST_TO_ADDR
// vc_chassis := chassis ;
15939: LD_ADDR_OWVAR 37
15943: PUSH
15944: LD_VAR 0 1
15948: ST_TO_ADDR
// vc_engine := engine ;
15949: LD_ADDR_OWVAR 39
15953: PUSH
15954: LD_VAR 0 2
15958: ST_TO_ADDR
// vc_control := control ;
15959: LD_ADDR_OWVAR 38
15963: PUSH
15964: LD_VAR 0 3
15968: ST_TO_ADDR
// vc_weapon := weapon ;
15969: LD_ADDR_OWVAR 40
15973: PUSH
15974: LD_VAR 0 4
15978: ST_TO_ADDR
// un := CreateVehicle ;
15979: LD_ADDR_VAR 0 8
15983: PUSH
15984: CALL_OW 45
15988: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15989: LD_VAR 0 8
15993: PPUSH
15994: LD_INT 0
15996: PPUSH
15997: LD_INT 5
15999: PPUSH
16000: CALL_OW 12
16004: PPUSH
16005: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
16009: LD_VAR 0 8
16013: PPUSH
16014: LD_VAR 0 5
16018: PPUSH
16019: LD_VAR 0 6
16023: PPUSH
16024: LD_INT 1
16026: PPUSH
16027: CALL_OW 48
// end ;
16031: LD_VAR 0 7
16035: RET
// export hInvincible ; every 1 do
16036: GO 16038
16038: DISABLE
// hInvincible := [ ] ;
16039: LD_ADDR_EXP 65
16043: PUSH
16044: EMPTY
16045: ST_TO_ADDR
16046: END
// every 10 do var i ;
16047: GO 16049
16049: DISABLE
16050: LD_INT 0
16052: PPUSH
// begin enable ;
16053: ENABLE
// if not hInvincible then
16054: LD_EXP 65
16058: NOT
16059: IFFALSE 16063
// exit ;
16061: GO 16107
// for i in hInvincible do
16063: LD_ADDR_VAR 0 1
16067: PUSH
16068: LD_EXP 65
16072: PUSH
16073: FOR_IN
16074: IFFALSE 16105
// if GetLives ( i ) < 1000 then
16076: LD_VAR 0 1
16080: PPUSH
16081: CALL_OW 256
16085: PUSH
16086: LD_INT 1000
16088: LESS
16089: IFFALSE 16103
// SetLives ( i , 1000 ) ;
16091: LD_VAR 0 1
16095: PPUSH
16096: LD_INT 1000
16098: PPUSH
16099: CALL_OW 234
16103: GO 16073
16105: POP
16106: POP
// end ;
16107: PPOPN 1
16109: END
// export function hHackInvincible ; var i ; begin
16110: LD_INT 0
16112: PPUSH
16113: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
16114: LD_ADDR_VAR 0 2
16118: PUSH
16119: LD_INT 2
16121: PUSH
16122: LD_INT 21
16124: PUSH
16125: LD_INT 1
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PUSH
16132: LD_INT 21
16134: PUSH
16135: LD_INT 2
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: LIST
16146: PPUSH
16147: CALL_OW 69
16151: PUSH
16152: FOR_IN
16153: IFFALSE 16214
// if IsSelected ( i ) then
16155: LD_VAR 0 2
16159: PPUSH
16160: CALL_OW 306
16164: IFFALSE 16212
// begin if i in hInvincible then
16166: LD_VAR 0 2
16170: PUSH
16171: LD_EXP 65
16175: IN
16176: IFFALSE 16196
// hInvincible := hInvincible diff i else
16178: LD_ADDR_EXP 65
16182: PUSH
16183: LD_EXP 65
16187: PUSH
16188: LD_VAR 0 2
16192: DIFF
16193: ST_TO_ADDR
16194: GO 16212
// hInvincible := hInvincible union i ;
16196: LD_ADDR_EXP 65
16200: PUSH
16201: LD_EXP 65
16205: PUSH
16206: LD_VAR 0 2
16210: UNION
16211: ST_TO_ADDR
// end ;
16212: GO 16152
16214: POP
16215: POP
// end ;
16216: LD_VAR 0 1
16220: RET
// export function hHackInvisible ; var i , j ; begin
16221: LD_INT 0
16223: PPUSH
16224: PPUSH
16225: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16226: LD_ADDR_VAR 0 2
16230: PUSH
16231: LD_INT 21
16233: PUSH
16234: LD_INT 1
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: PPUSH
16241: CALL_OW 69
16245: PUSH
16246: FOR_IN
16247: IFFALSE 16271
// if IsSelected ( i ) then
16249: LD_VAR 0 2
16253: PPUSH
16254: CALL_OW 306
16258: IFFALSE 16269
// ComForceInvisible ( i ) ;
16260: LD_VAR 0 2
16264: PPUSH
16265: CALL_OW 496
16269: GO 16246
16271: POP
16272: POP
// end ;
16273: LD_VAR 0 1
16277: RET
// export function hHackChangeYourSide ; begin
16278: LD_INT 0
16280: PPUSH
// if your_side = 8 then
16281: LD_OWVAR 2
16285: PUSH
16286: LD_INT 8
16288: EQUAL
16289: IFFALSE 16301
// your_side := 0 else
16291: LD_ADDR_OWVAR 2
16295: PUSH
16296: LD_INT 0
16298: ST_TO_ADDR
16299: GO 16315
// your_side := your_side + 1 ;
16301: LD_ADDR_OWVAR 2
16305: PUSH
16306: LD_OWVAR 2
16310: PUSH
16311: LD_INT 1
16313: PLUS
16314: ST_TO_ADDR
// end ;
16315: LD_VAR 0 1
16319: RET
// export function hHackChangeUnitSide ; var i , j ; begin
16320: LD_INT 0
16322: PPUSH
16323: PPUSH
16324: PPUSH
// for i in all_units do
16325: LD_ADDR_VAR 0 2
16329: PUSH
16330: LD_OWVAR 3
16334: PUSH
16335: FOR_IN
16336: IFFALSE 16414
// if IsSelected ( i ) then
16338: LD_VAR 0 2
16342: PPUSH
16343: CALL_OW 306
16347: IFFALSE 16412
// begin j := GetSide ( i ) ;
16349: LD_ADDR_VAR 0 3
16353: PUSH
16354: LD_VAR 0 2
16358: PPUSH
16359: CALL_OW 255
16363: ST_TO_ADDR
// if j = 8 then
16364: LD_VAR 0 3
16368: PUSH
16369: LD_INT 8
16371: EQUAL
16372: IFFALSE 16384
// j := 0 else
16374: LD_ADDR_VAR 0 3
16378: PUSH
16379: LD_INT 0
16381: ST_TO_ADDR
16382: GO 16398
// j := j + 1 ;
16384: LD_ADDR_VAR 0 3
16388: PUSH
16389: LD_VAR 0 3
16393: PUSH
16394: LD_INT 1
16396: PLUS
16397: ST_TO_ADDR
// SetSide ( i , j ) ;
16398: LD_VAR 0 2
16402: PPUSH
16403: LD_VAR 0 3
16407: PPUSH
16408: CALL_OW 235
// end ;
16412: GO 16335
16414: POP
16415: POP
// end ;
16416: LD_VAR 0 1
16420: RET
// export function hHackFog ; begin
16421: LD_INT 0
16423: PPUSH
// FogOff ( true ) ;
16424: LD_INT 1
16426: PPUSH
16427: CALL_OW 344
// end ;
16431: LD_VAR 0 1
16435: RET
// export function hHackTeleport ( unit , x , y ) ; begin
16436: LD_INT 0
16438: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
16439: LD_VAR 0 1
16443: PPUSH
16444: LD_VAR 0 2
16448: PPUSH
16449: LD_VAR 0 3
16453: PPUSH
16454: LD_INT 1
16456: PPUSH
16457: LD_INT 1
16459: PPUSH
16460: CALL_OW 483
// CenterOnXY ( x , y ) ;
16464: LD_VAR 0 2
16468: PPUSH
16469: LD_VAR 0 3
16473: PPUSH
16474: CALL_OW 84
// end ;
16478: LD_VAR 0 4
16482: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
16483: LD_INT 0
16485: PPUSH
16486: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
16487: LD_VAR 0 1
16491: NOT
16492: IFTRUE 16511
16494: PUSH
16495: LD_VAR 0 2
16499: PPUSH
16500: LD_VAR 0 3
16504: PPUSH
16505: CALL_OW 488
16509: NOT
16510: OR
16511: IFTRUE 16546
16513: PUSH
16514: LD_VAR 0 1
16518: PPUSH
16519: CALL_OW 266
16523: PUSH
16524: LD_INT 3
16526: NONEQUAL
16527: IFFALSE 16545
16529: PUSH
16530: LD_VAR 0 1
16534: PPUSH
16535: CALL_OW 247
16539: PUSH
16540: LD_INT 1
16542: EQUAL
16543: NOT
16544: AND
16545: OR
16546: IFFALSE 16550
// exit ;
16548: GO 16832
// if GetType ( factory ) = unit_human then
16550: LD_VAR 0 1
16554: PPUSH
16555: CALL_OW 247
16559: PUSH
16560: LD_INT 1
16562: EQUAL
16563: IFFALSE 16580
// factory := IsInUnit ( factory ) ;
16565: LD_ADDR_VAR 0 1
16569: PUSH
16570: LD_VAR 0 1
16574: PPUSH
16575: CALL_OW 310
16579: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
16580: LD_VAR 0 1
16584: PPUSH
16585: CALL_OW 266
16589: PUSH
16590: LD_INT 3
16592: NONEQUAL
16593: IFFALSE 16597
// exit ;
16595: GO 16832
// for i := 1 to Count ( factoryWaypoints ) do
16597: LD_ADDR_VAR 0 5
16601: PUSH
16602: DOUBLE
16603: LD_INT 1
16605: DEC
16606: ST_TO_ADDR
16607: LD_EXP 66
16611: PPUSH
16612: CALL 26528 0 1
16616: PUSH
16617: FOR_TO
16618: IFFALSE 16780
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
16620: LD_VAR 0 2
16624: PPUSH
16625: LD_VAR 0 3
16629: PPUSH
16630: CALL_OW 428
16634: PUSH
16635: LD_EXP 66
16639: PUSH
16640: LD_VAR 0 5
16644: ARRAY
16645: PUSH
16646: LD_INT 2
16648: ARRAY
16649: EQUAL
16650: IFFALSE 16682
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
16652: LD_ADDR_EXP 66
16656: PUSH
16657: LD_EXP 66
16661: PPUSH
16662: LD_VAR 0 5
16666: PPUSH
16667: CALL_OW 3
16671: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16672: CALL 16837 0 0
// exit ;
16676: POP
16677: POP
16678: GO 16832
// end else
16680: GO 16778
// if factory = factoryWaypoints [ i ] [ 2 ] then
16682: LD_VAR 0 1
16686: PUSH
16687: LD_EXP 66
16691: PUSH
16692: LD_VAR 0 5
16696: ARRAY
16697: PUSH
16698: LD_INT 2
16700: ARRAY
16701: EQUAL
16702: IFFALSE 16778
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
16704: LD_ADDR_EXP 66
16708: PUSH
16709: LD_EXP 66
16713: PPUSH
16714: LD_VAR 0 5
16718: PPUSH
16719: CALL_OW 3
16723: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
16724: LD_ADDR_EXP 66
16728: PUSH
16729: LD_EXP 66
16733: PPUSH
16734: LD_VAR 0 1
16738: PPUSH
16739: CALL_OW 255
16743: PUSH
16744: LD_VAR 0 1
16748: PUSH
16749: LD_VAR 0 2
16753: PUSH
16754: LD_VAR 0 3
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: PPUSH
16765: CALL 62460 0 2
16769: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16770: CALL 16837 0 0
// exit ;
16774: POP
16775: POP
16776: GO 16832
// end ; end ;
16778: GO 16617
16780: POP
16781: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
16782: LD_ADDR_EXP 66
16786: PUSH
16787: LD_EXP 66
16791: PPUSH
16792: LD_VAR 0 1
16796: PPUSH
16797: CALL_OW 255
16801: PUSH
16802: LD_VAR 0 1
16806: PUSH
16807: LD_VAR 0 2
16811: PUSH
16812: LD_VAR 0 3
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: PPUSH
16823: CALL 62460 0 2
16827: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16828: CALL 16837 0 0
// end ;
16832: LD_VAR 0 4
16836: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16837: LD_INT 0
16839: PPUSH
16840: PPUSH
16841: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16842: LD_STRING resetFactoryWaypoint();
16844: PPUSH
16845: CALL_OW 559
// if factoryWaypoints then
16849: LD_EXP 66
16853: IFFALSE 16974
// begin list := factoryWaypoints ;
16855: LD_ADDR_VAR 0 3
16859: PUSH
16860: LD_EXP 66
16864: ST_TO_ADDR
// for i := 1 to list do
16865: LD_ADDR_VAR 0 2
16869: PUSH
16870: DOUBLE
16871: LD_INT 1
16873: DEC
16874: ST_TO_ADDR
16875: LD_VAR 0 3
16879: PUSH
16880: FOR_TO
16881: IFFALSE 16972
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16883: LD_STRING setFactoryWaypointXY(
16885: PUSH
16886: LD_VAR 0 3
16890: PUSH
16891: LD_VAR 0 2
16895: ARRAY
16896: PUSH
16897: LD_INT 1
16899: ARRAY
16900: STR
16901: PUSH
16902: LD_STRING ,
16904: STR
16905: PUSH
16906: LD_VAR 0 3
16910: PUSH
16911: LD_VAR 0 2
16915: ARRAY
16916: PUSH
16917: LD_INT 2
16919: ARRAY
16920: STR
16921: PUSH
16922: LD_STRING ,
16924: STR
16925: PUSH
16926: LD_VAR 0 3
16930: PUSH
16931: LD_VAR 0 2
16935: ARRAY
16936: PUSH
16937: LD_INT 3
16939: ARRAY
16940: STR
16941: PUSH
16942: LD_STRING ,
16944: STR
16945: PUSH
16946: LD_VAR 0 3
16950: PUSH
16951: LD_VAR 0 2
16955: ARRAY
16956: PUSH
16957: LD_INT 4
16959: ARRAY
16960: STR
16961: PUSH
16962: LD_STRING )
16964: STR
16965: PPUSH
16966: CALL_OW 559
16970: GO 16880
16972: POP
16973: POP
// end ; end ;
16974: LD_VAR 0 1
16978: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16979: LD_INT 0
16981: PPUSH
// if HexInfo ( x , y ) = warehouse then
16982: LD_VAR 0 2
16986: PPUSH
16987: LD_VAR 0 3
16991: PPUSH
16992: CALL_OW 428
16996: PUSH
16997: LD_VAR 0 1
17001: EQUAL
17002: IFFALSE 17029
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
17004: LD_ADDR_EXP 68
17008: PUSH
17009: LD_EXP 68
17013: PPUSH
17014: LD_VAR 0 1
17018: PPUSH
17019: LD_INT 0
17021: PPUSH
17022: CALL_OW 1
17026: ST_TO_ADDR
17027: GO 17080
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
17029: LD_ADDR_EXP 68
17033: PUSH
17034: LD_EXP 68
17038: PPUSH
17039: LD_VAR 0 1
17043: PPUSH
17044: LD_VAR 0 1
17048: PPUSH
17049: CALL_OW 255
17053: PUSH
17054: LD_VAR 0 1
17058: PUSH
17059: LD_VAR 0 2
17063: PUSH
17064: LD_VAR 0 3
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: PPUSH
17075: CALL_OW 1
17079: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
17080: CALL 17089 0 0
// end ;
17084: LD_VAR 0 4
17088: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
17089: LD_INT 0
17091: PPUSH
17092: PPUSH
17093: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
17094: LD_STRING resetWarehouseGatheringPoints();
17096: PPUSH
17097: CALL_OW 559
// if warehouseGatheringPoints then
17101: LD_EXP 68
17105: IFFALSE 17231
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
17107: LD_ADDR_VAR 0 3
17111: PUSH
17112: LD_EXP 68
17116: PPUSH
17117: CALL 66394 0 1
17121: ST_TO_ADDR
// for i := 1 to list do
17122: LD_ADDR_VAR 0 2
17126: PUSH
17127: DOUBLE
17128: LD_INT 1
17130: DEC
17131: ST_TO_ADDR
17132: LD_VAR 0 3
17136: PUSH
17137: FOR_TO
17138: IFFALSE 17229
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
17140: LD_STRING setWarehouseGatheringPointXY(
17142: PUSH
17143: LD_VAR 0 3
17147: PUSH
17148: LD_VAR 0 2
17152: ARRAY
17153: PUSH
17154: LD_INT 1
17156: ARRAY
17157: STR
17158: PUSH
17159: LD_STRING ,
17161: STR
17162: PUSH
17163: LD_VAR 0 3
17167: PUSH
17168: LD_VAR 0 2
17172: ARRAY
17173: PUSH
17174: LD_INT 2
17176: ARRAY
17177: STR
17178: PUSH
17179: LD_STRING ,
17181: STR
17182: PUSH
17183: LD_VAR 0 3
17187: PUSH
17188: LD_VAR 0 2
17192: ARRAY
17193: PUSH
17194: LD_INT 3
17196: ARRAY
17197: STR
17198: PUSH
17199: LD_STRING ,
17201: STR
17202: PUSH
17203: LD_VAR 0 3
17207: PUSH
17208: LD_VAR 0 2
17212: ARRAY
17213: PUSH
17214: LD_INT 4
17216: ARRAY
17217: STR
17218: PUSH
17219: LD_STRING )
17221: STR
17222: PPUSH
17223: CALL_OW 559
17227: GO 17137
17229: POP
17230: POP
// end ; end ;
17231: LD_VAR 0 1
17235: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
17236: LD_EXP 68
17240: IFFALSE 17935
17242: GO 17244
17244: DISABLE
17245: LD_INT 0
17247: PPUSH
17248: PPUSH
17249: PPUSH
17250: PPUSH
17251: PPUSH
17252: PPUSH
17253: PPUSH
17254: PPUSH
17255: PPUSH
// begin enable ;
17256: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
17257: LD_ADDR_VAR 0 3
17261: PUSH
17262: LD_EXP 68
17266: PPUSH
17267: CALL 66394 0 1
17271: ST_TO_ADDR
// if not list then
17272: LD_VAR 0 3
17276: NOT
17277: IFFALSE 17281
// exit ;
17279: GO 17935
// for i := 1 to list do
17281: LD_ADDR_VAR 0 1
17285: PUSH
17286: DOUBLE
17287: LD_INT 1
17289: DEC
17290: ST_TO_ADDR
17291: LD_VAR 0 3
17295: PUSH
17296: FOR_TO
17297: IFFALSE 17933
// begin depot := list [ i ] [ 2 ] ;
17299: LD_ADDR_VAR 0 8
17303: PUSH
17304: LD_VAR 0 3
17308: PUSH
17309: LD_VAR 0 1
17313: ARRAY
17314: PUSH
17315: LD_INT 2
17317: ARRAY
17318: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
17319: LD_ADDR_VAR 0 5
17323: PUSH
17324: LD_VAR 0 3
17328: PUSH
17329: LD_VAR 0 1
17333: ARRAY
17334: PUSH
17335: LD_INT 1
17337: ARRAY
17338: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
17339: LD_VAR 0 8
17343: PPUSH
17344: CALL_OW 301
17348: IFTRUE 17367
17350: PUSH
17351: LD_VAR 0 5
17355: PUSH
17356: LD_VAR 0 8
17360: PPUSH
17361: CALL_OW 255
17365: NONEQUAL
17366: OR
17367: IFFALSE 17396
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
17369: LD_ADDR_EXP 68
17373: PUSH
17374: LD_EXP 68
17378: PPUSH
17379: LD_VAR 0 8
17383: PPUSH
17384: LD_INT 0
17386: PPUSH
17387: CALL_OW 1
17391: ST_TO_ADDR
// exit ;
17392: POP
17393: POP
17394: GO 17935
// end ; x := list [ i ] [ 3 ] ;
17396: LD_ADDR_VAR 0 6
17400: PUSH
17401: LD_VAR 0 3
17405: PUSH
17406: LD_VAR 0 1
17410: ARRAY
17411: PUSH
17412: LD_INT 3
17414: ARRAY
17415: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
17416: LD_ADDR_VAR 0 7
17420: PUSH
17421: LD_VAR 0 3
17425: PUSH
17426: LD_VAR 0 1
17430: ARRAY
17431: PUSH
17432: LD_INT 4
17434: ARRAY
17435: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
17436: LD_ADDR_VAR 0 9
17440: PUSH
17441: LD_VAR 0 6
17445: PPUSH
17446: LD_VAR 0 7
17450: PPUSH
17451: LD_INT 16
17453: PPUSH
17454: CALL 64968 0 3
17458: ST_TO_ADDR
// if not cratesNearbyPoint then
17459: LD_VAR 0 9
17463: NOT
17464: IFFALSE 17470
// exit ;
17466: POP
17467: POP
17468: GO 17935
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
17470: LD_ADDR_VAR 0 4
17474: PUSH
17475: LD_INT 22
17477: PUSH
17478: LD_VAR 0 5
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 3
17489: PUSH
17490: LD_INT 60
17492: PUSH
17493: EMPTY
17494: LIST
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: LD_INT 91
17502: PUSH
17503: LD_VAR 0 8
17507: PUSH
17508: LD_INT 6
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: LIST
17515: PUSH
17516: LD_INT 2
17518: PUSH
17519: LD_INT 25
17521: PUSH
17522: LD_INT 2
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: PUSH
17529: LD_INT 25
17531: PUSH
17532: LD_INT 16
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: LIST
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: PPUSH
17550: CALL_OW 69
17554: PUSH
17555: LD_VAR 0 8
17559: PPUSH
17560: CALL_OW 313
17564: PPUSH
17565: LD_INT 3
17567: PUSH
17568: LD_INT 60
17570: PUSH
17571: EMPTY
17572: LIST
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: LD_INT 2
17580: PUSH
17581: LD_INT 25
17583: PUSH
17584: LD_INT 2
17586: PUSH
17587: EMPTY
17588: LIST
17589: LIST
17590: PUSH
17591: LD_INT 25
17593: PUSH
17594: LD_INT 16
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: LIST
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PPUSH
17610: CALL_OW 72
17614: UNION
17615: ST_TO_ADDR
// if tmp then
17616: LD_VAR 0 4
17620: IFFALSE 17700
// begin tmp := ShrinkArray ( tmp , 3 ) ;
17622: LD_ADDR_VAR 0 4
17626: PUSH
17627: LD_VAR 0 4
17631: PPUSH
17632: LD_INT 3
17634: PPUSH
17635: CALL 62775 0 2
17639: ST_TO_ADDR
// for j in tmp do
17640: LD_ADDR_VAR 0 2
17644: PUSH
17645: LD_VAR 0 4
17649: PUSH
17650: FOR_IN
17651: IFFALSE 17694
// begin if IsInUnit ( j ) then
17653: LD_VAR 0 2
17657: PPUSH
17658: CALL_OW 310
17662: IFFALSE 17673
// ComExit ( j ) ;
17664: LD_VAR 0 2
17668: PPUSH
17669: CALL 62858 0 1
// AddComCollect ( j , x , y ) ;
17673: LD_VAR 0 2
17677: PPUSH
17678: LD_VAR 0 6
17682: PPUSH
17683: LD_VAR 0 7
17687: PPUSH
17688: CALL_OW 177
// end ;
17692: GO 17650
17694: POP
17695: POP
// exit ;
17696: POP
17697: POP
17698: GO 17935
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
17700: LD_ADDR_VAR 0 4
17704: PUSH
17705: LD_INT 22
17707: PUSH
17708: LD_VAR 0 5
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: LD_INT 91
17719: PUSH
17720: LD_VAR 0 8
17724: PUSH
17725: LD_INT 8
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: LIST
17732: PUSH
17733: LD_INT 2
17735: PUSH
17736: LD_INT 34
17738: PUSH
17739: LD_INT 12
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PUSH
17746: LD_INT 34
17748: PUSH
17749: LD_INT 51
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: PUSH
17756: LD_INT 34
17758: PUSH
17759: LD_INT 32
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: PUSH
17766: LD_INT 34
17768: PUSH
17769: LD_INT 89
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: LIST
17787: PPUSH
17788: CALL_OW 69
17792: ST_TO_ADDR
// if tmp then
17793: LD_VAR 0 4
17797: IFFALSE 17931
// begin for j in tmp do
17799: LD_ADDR_VAR 0 2
17803: PUSH
17804: LD_VAR 0 4
17808: PUSH
17809: FOR_IN
17810: IFFALSE 17929
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
17812: LD_VAR 0 2
17816: PPUSH
17817: CALL_OW 262
17821: PUSH
17822: LD_INT 3
17824: EQUAL
17825: IFTRUE 17842
17827: PUSH
17828: LD_VAR 0 2
17832: PPUSH
17833: CALL_OW 261
17837: PUSH
17838: LD_INT 20
17840: GREATER
17841: OR
17842: IFFALSE 17856
17844: PUSH
17845: LD_VAR 0 2
17849: PPUSH
17850: CALL_OW 314
17854: NOT
17855: AND
17856: IFFALSE 17886
17858: PUSH
17859: LD_VAR 0 2
17863: PPUSH
17864: CALL_OW 263
17868: PUSH
17869: LD_INT 1
17871: NONEQUAL
17872: IFTRUE 17885
17874: PUSH
17875: LD_VAR 0 2
17879: PPUSH
17880: CALL_OW 311
17884: OR
17885: AND
17886: IFFALSE 17927
// begin ComCollect ( j , x , y ) ;
17888: LD_VAR 0 2
17892: PPUSH
17893: LD_VAR 0 6
17897: PPUSH
17898: LD_VAR 0 7
17902: PPUSH
17903: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
17907: LD_VAR 0 2
17911: PPUSH
17912: LD_VAR 0 8
17916: PPUSH
17917: CALL_OW 172
// exit ;
17921: POP
17922: POP
17923: POP
17924: POP
17925: GO 17935
// end ;
17927: GO 17809
17929: POP
17930: POP
// end ; end ;
17931: GO 17296
17933: POP
17934: POP
// end ; end_of_file
17935: PPOPN 9
17937: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
17938: LD_VAR 0 1
17942: PUSH
17943: LD_INT 200
17945: DOUBLE
17946: GREATEREQUAL
17947: IFFALSE 17955
17949: LD_INT 299
17951: DOUBLE
17952: LESSEQUAL
17953: IFTRUE 17957
17955: GO 17989
17957: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
17958: LD_VAR 0 1
17962: PPUSH
17963: LD_VAR 0 2
17967: PPUSH
17968: LD_VAR 0 3
17972: PPUSH
17973: LD_VAR 0 4
17977: PPUSH
17978: LD_VAR 0 5
17982: PPUSH
17983: CALL 18770 0 5
17987: GO 18066
17989: LD_INT 300
17991: DOUBLE
17992: GREATEREQUAL
17993: IFFALSE 18001
17995: LD_INT 399
17997: DOUBLE
17998: LESSEQUAL
17999: IFTRUE 18003
18001: GO 18065
18003: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
18004: LD_VAR 0 1
18008: PPUSH
18009: LD_VAR 0 2
18013: PPUSH
18014: LD_VAR 0 3
18018: PPUSH
18019: LD_VAR 0 4
18023: PPUSH
18024: LD_VAR 0 5
18028: PPUSH
18029: LD_VAR 0 6
18033: PPUSH
18034: LD_VAR 0 7
18038: PPUSH
18039: LD_VAR 0 8
18043: PPUSH
18044: LD_VAR 0 9
18048: PPUSH
18049: LD_VAR 0 10
18053: PPUSH
18054: LD_VAR 0 11
18058: PPUSH
18059: CALL 14491 0 11
18063: GO 18066
18065: POP
// end ;
18066: PPOPN 11
18068: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
18069: LD_VAR 0 1
18073: PPUSH
18074: LD_VAR 0 2
18078: PPUSH
18079: LD_VAR 0 3
18083: PPUSH
18084: LD_VAR 0 4
18088: PPUSH
18089: LD_VAR 0 5
18093: PPUSH
18094: CALL 18151 0 5
// end ; end_of_file
18098: PPOPN 5
18100: END
// export function SOS_UnitDestroyed ( un ) ; begin
18101: LD_INT 0
18103: PPUSH
// ComRadiation ( un ) ;
18104: LD_VAR 0 1
18108: PPUSH
18109: CALL 19190 0 1
// end ;
18113: LD_VAR 0 2
18117: RET
// export function SOS_UnitKamikazed ( un ) ; begin
18118: LD_INT 0
18120: PPUSH
// ComRadiation ( un ) ;
18121: LD_VAR 0 1
18125: PPUSH
18126: CALL 19190 0 1
// end ;
18130: LD_VAR 0 2
18134: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
18135: LD_INT 0
18137: PPUSH
// end ;
18138: LD_VAR 0 4
18142: RET
// export function SOS_Command ( cmd ) ; begin
18143: LD_INT 0
18145: PPUSH
// end ;
18146: LD_VAR 0 2
18150: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
18151: LD_INT 0
18153: PPUSH
// end ;
18154: LD_VAR 0 6
18158: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
18159: LD_INT 0
18161: PPUSH
18162: PPUSH
18163: PPUSH
18164: PPUSH
// if not vehicle or not factory then
18165: LD_VAR 0 1
18169: NOT
18170: IFTRUE 18179
18172: PUSH
18173: LD_VAR 0 2
18177: NOT
18178: OR
18179: IFFALSE 18183
// exit ;
18181: GO 18765
// if not factoryWaypoints then
18183: LD_EXP 66
18187: NOT
18188: IFFALSE 18192
// exit ;
18190: GO 18765
// for i := 1 to Count ( factoryWaypoints ) do
18192: LD_ADDR_VAR 0 4
18196: PUSH
18197: DOUBLE
18198: LD_INT 1
18200: DEC
18201: ST_TO_ADDR
18202: LD_EXP 66
18206: PPUSH
18207: CALL 26528 0 1
18211: PUSH
18212: FOR_TO
18213: IFFALSE 18763
// if factoryWaypoints [ i ] [ 2 ] = factory then
18215: LD_EXP 66
18219: PUSH
18220: LD_VAR 0 4
18224: ARRAY
18225: PUSH
18226: LD_INT 2
18228: ARRAY
18229: PUSH
18230: LD_VAR 0 2
18234: EQUAL
18235: IFFALSE 18761
// begin if GetControl ( vehicle ) = control_manual then
18237: LD_VAR 0 1
18241: PPUSH
18242: CALL_OW 263
18246: PUSH
18247: LD_INT 1
18249: EQUAL
18250: IFFALSE 18614
// begin driver := IsDrivenBy ( vehicle ) ;
18252: LD_ADDR_VAR 0 5
18256: PUSH
18257: LD_VAR 0 1
18261: PPUSH
18262: CALL_OW 311
18266: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
18267: LD_VAR 0 5
18271: PUSH
18272: LD_EXP 67
18276: IN
18277: IFTRUE 18291
18279: PUSH
18280: LD_VAR 0 1
18284: PUSH
18285: LD_EXP 67
18289: IN
18290: OR
18291: IFFALSE 18297
// exit ;
18293: POP
18294: POP
18295: GO 18765
// if not HasTask ( driver ) then
18297: LD_VAR 0 5
18301: PPUSH
18302: CALL_OW 314
18306: NOT
18307: IFFALSE 18612
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
18309: LD_ADDR_EXP 67
18313: PUSH
18314: LD_EXP 67
18318: PPUSH
18319: LD_VAR 0 5
18323: PPUSH
18324: CALL 62460 0 2
18328: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
18329: LD_ADDR_EXP 67
18333: PUSH
18334: LD_EXP 67
18338: PPUSH
18339: LD_VAR 0 1
18343: PPUSH
18344: CALL 62460 0 2
18348: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
18349: LD_ADDR_VAR 0 6
18353: PUSH
18354: LD_EXP 66
18358: PUSH
18359: LD_VAR 0 4
18363: ARRAY
18364: PUSH
18365: LD_INT 3
18367: ARRAY
18368: PPUSH
18369: LD_EXP 66
18373: PUSH
18374: LD_VAR 0 4
18378: ARRAY
18379: PUSH
18380: LD_INT 4
18382: ARRAY
18383: PPUSH
18384: CALL_OW 428
18388: ST_TO_ADDR
// if hex then
18389: LD_VAR 0 6
18393: IFFALSE 18411
// ComMoveUnit ( driver , hex ) else
18395: LD_VAR 0 5
18399: PPUSH
18400: LD_VAR 0 6
18404: PPUSH
18405: CALL_OW 112
18409: GO 18495
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
18411: LD_VAR 0 1
18415: PPUSH
18416: LD_EXP 66
18420: PUSH
18421: LD_VAR 0 4
18425: ARRAY
18426: PUSH
18427: LD_INT 3
18429: ARRAY
18430: PPUSH
18431: LD_EXP 66
18435: PUSH
18436: LD_VAR 0 4
18440: ARRAY
18441: PUSH
18442: LD_INT 4
18444: ARRAY
18445: PPUSH
18446: CALL_OW 297
18450: PUSH
18451: LD_INT 0
18453: GREATER
18454: IFFALSE 18495
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
18456: LD_VAR 0 5
18460: PPUSH
18461: LD_EXP 66
18465: PUSH
18466: LD_VAR 0 4
18470: ARRAY
18471: PUSH
18472: LD_INT 3
18474: ARRAY
18475: PPUSH
18476: LD_EXP 66
18480: PUSH
18481: LD_VAR 0 4
18485: ARRAY
18486: PUSH
18487: LD_INT 4
18489: ARRAY
18490: PPUSH
18491: CALL_OW 111
// AddComExitVehicle ( driver ) ;
18495: LD_VAR 0 5
18499: PPUSH
18500: CALL_OW 181
// if Multiplayer then
18504: LD_OWVAR 4
18508: IFFALSE 18557
// begin repeat wait ( 10 ) ;
18510: LD_INT 10
18512: PPUSH
18513: CALL_OW 67
// until not IsInUnit ( driver ) ;
18517: LD_VAR 0 5
18521: PPUSH
18522: CALL_OW 310
18526: NOT
18527: IFFALSE 18510
// if not HasTask ( driver ) then
18529: LD_VAR 0 5
18533: PPUSH
18534: CALL_OW 314
18538: NOT
18539: IFFALSE 18555
// ComEnterUnit ( driver , factory ) ;
18541: LD_VAR 0 5
18545: PPUSH
18546: LD_VAR 0 2
18550: PPUSH
18551: CALL_OW 120
// end else
18555: GO 18571
// AddComEnterUnit ( driver , factory ) ;
18557: LD_VAR 0 5
18561: PPUSH
18562: LD_VAR 0 2
18566: PPUSH
18567: CALL_OW 180
// wait ( 0 0$1 ) ;
18571: LD_INT 35
18573: PPUSH
18574: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
18578: LD_ADDR_EXP 67
18582: PUSH
18583: LD_EXP 67
18587: PUSH
18588: LD_VAR 0 5
18592: DIFF
18593: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
18594: LD_ADDR_EXP 67
18598: PUSH
18599: LD_EXP 67
18603: PUSH
18604: LD_VAR 0 1
18608: DIFF
18609: ST_TO_ADDR
// break ;
18610: GO 18763
// end ; end else
18612: GO 18761
// if GetControl ( vehicle ) = control_remote then
18614: LD_VAR 0 1
18618: PPUSH
18619: CALL_OW 263
18623: PUSH
18624: LD_INT 2
18626: EQUAL
18627: IFFALSE 18713
// begin wait ( 0 0$2 ) ;
18629: LD_INT 70
18631: PPUSH
18632: CALL_OW 67
// repeat wait ( 10 ) ;
18636: LD_INT 10
18638: PPUSH
18639: CALL_OW 67
// Connect ( vehicle ) ;
18643: LD_VAR 0 1
18647: PPUSH
18648: CALL 32772 0 1
// until IsControledBy ( vehicle ) ;
18652: LD_VAR 0 1
18656: PPUSH
18657: CALL_OW 312
18661: IFFALSE 18636
// wait ( 10 ) ;
18663: LD_INT 10
18665: PPUSH
18666: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
18670: LD_VAR 0 1
18674: PPUSH
18675: LD_EXP 66
18679: PUSH
18680: LD_VAR 0 4
18684: ARRAY
18685: PUSH
18686: LD_INT 3
18688: ARRAY
18689: PPUSH
18690: LD_EXP 66
18694: PUSH
18695: LD_VAR 0 4
18699: ARRAY
18700: PUSH
18701: LD_INT 4
18703: ARRAY
18704: PPUSH
18705: CALL_OW 111
// break ;
18709: GO 18763
// end else
18711: GO 18761
// begin wait ( 0 0$3 ) ;
18713: LD_INT 105
18715: PPUSH
18716: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
18720: LD_VAR 0 1
18724: PPUSH
18725: LD_EXP 66
18729: PUSH
18730: LD_VAR 0 4
18734: ARRAY
18735: PUSH
18736: LD_INT 3
18738: ARRAY
18739: PPUSH
18740: LD_EXP 66
18744: PUSH
18745: LD_VAR 0 4
18749: ARRAY
18750: PUSH
18751: LD_INT 4
18753: ARRAY
18754: PPUSH
18755: CALL_OW 111
// break ;
18759: GO 18763
// end ; end ;
18761: GO 18212
18763: POP
18764: POP
// end ;
18765: LD_VAR 0 3
18769: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18770: LD_INT 0
18772: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18773: LD_VAR 0 1
18777: PUSH
18778: LD_INT 250
18780: EQUAL
18781: IFFALSE 18798
18783: PUSH
18784: LD_VAR 0 2
18788: PPUSH
18789: CALL_OW 264
18793: PUSH
18794: LD_INT 81
18796: EQUAL
18797: AND
18798: IFFALSE 18819
// MinerPlaceMine ( unit , x , y ) ;
18800: LD_VAR 0 2
18804: PPUSH
18805: LD_VAR 0 4
18809: PPUSH
18810: LD_VAR 0 5
18814: PPUSH
18815: CALL 21951 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18819: LD_VAR 0 1
18823: PUSH
18824: LD_INT 251
18826: EQUAL
18827: IFFALSE 18844
18829: PUSH
18830: LD_VAR 0 2
18834: PPUSH
18835: CALL_OW 264
18839: PUSH
18840: LD_INT 81
18842: EQUAL
18843: AND
18844: IFFALSE 18865
// MinerDetonateMine ( unit , x , y ) ;
18846: LD_VAR 0 2
18850: PPUSH
18851: LD_VAR 0 4
18855: PPUSH
18856: LD_VAR 0 5
18860: PPUSH
18861: CALL 22230 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18865: LD_VAR 0 1
18869: PUSH
18870: LD_INT 252
18872: EQUAL
18873: IFFALSE 18890
18875: PUSH
18876: LD_VAR 0 2
18880: PPUSH
18881: CALL_OW 264
18885: PUSH
18886: LD_INT 81
18888: EQUAL
18889: AND
18890: IFFALSE 18911
// MinerCreateMinefield ( unit , x , y ) ;
18892: LD_VAR 0 2
18896: PPUSH
18897: LD_VAR 0 4
18901: PPUSH
18902: LD_VAR 0 5
18906: PPUSH
18907: CALL 22649 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18911: LD_VAR 0 1
18915: PUSH
18916: LD_INT 253
18918: EQUAL
18919: IFFALSE 18936
18921: PUSH
18922: LD_VAR 0 2
18926: PPUSH
18927: CALL_OW 257
18931: PUSH
18932: LD_INT 5
18934: EQUAL
18935: AND
18936: IFFALSE 18957
// ComBinocular ( unit , x , y ) ;
18938: LD_VAR 0 2
18942: PPUSH
18943: LD_VAR 0 4
18947: PPUSH
18948: LD_VAR 0 5
18952: PPUSH
18953: CALL 23024 0 3
// if selectedUnit then
18957: LD_VAR 0 3
18961: IFFALSE 19021
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18963: LD_VAR 0 1
18967: PUSH
18968: LD_INT 254
18970: EQUAL
18971: IFFALSE 18988
18973: PUSH
18974: LD_VAR 0 2
18978: PPUSH
18979: CALL_OW 264
18983: PUSH
18984: LD_INT 99
18986: EQUAL
18987: AND
18988: IFFALSE 19005
18990: PUSH
18991: LD_VAR 0 3
18995: PPUSH
18996: CALL_OW 263
19000: PUSH
19001: LD_INT 3
19003: EQUAL
19004: AND
19005: IFFALSE 19021
// HackDestroyVehicle ( unit , selectedUnit ) ;
19007: LD_VAR 0 2
19011: PPUSH
19012: LD_VAR 0 3
19016: PPUSH
19017: CALL 21311 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19021: LD_VAR 0 1
19025: PUSH
19026: LD_INT 255
19028: EQUAL
19029: IFFALSE 19053
19031: PUSH
19032: LD_VAR 0 2
19036: PPUSH
19037: CALL_OW 264
19041: PUSH
19042: LD_INT 14
19044: PUSH
19045: LD_INT 53
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: IN
19052: AND
19053: IFFALSE 19071
19055: PUSH
19056: LD_VAR 0 4
19060: PPUSH
19061: LD_VAR 0 5
19065: PPUSH
19066: CALL_OW 488
19070: AND
19071: IFFALSE 19095
// CutTreeXYR ( unit , x , y , 12 ) ;
19073: LD_VAR 0 2
19077: PPUSH
19078: LD_VAR 0 4
19082: PPUSH
19083: LD_VAR 0 5
19087: PPUSH
19088: LD_INT 12
19090: PPUSH
19091: CALL 19286 0 4
// if cmd = 256 then
19095: LD_VAR 0 1
19099: PUSH
19100: LD_INT 256
19102: EQUAL
19103: IFFALSE 19124
// SetFactoryWaypoint ( unit , x , y ) ;
19105: LD_VAR 0 2
19109: PPUSH
19110: LD_VAR 0 4
19114: PPUSH
19115: LD_VAR 0 5
19119: PPUSH
19120: CALL 16483 0 3
// if cmd = 257 then
19124: LD_VAR 0 1
19128: PUSH
19129: LD_INT 257
19131: EQUAL
19132: IFFALSE 19153
// SetWarehouseGatheringPoint ( unit , x , y ) ;
19134: LD_VAR 0 2
19138: PPUSH
19139: LD_VAR 0 4
19143: PPUSH
19144: LD_VAR 0 5
19148: PPUSH
19149: CALL 16979 0 3
// if cmd = 258 then
19153: LD_VAR 0 1
19157: PUSH
19158: LD_INT 258
19160: EQUAL
19161: IFFALSE 19185
// BurnTreeXYR ( unit , x , y , 8 ) ;
19163: LD_VAR 0 2
19167: PPUSH
19168: LD_VAR 0 4
19172: PPUSH
19173: LD_VAR 0 5
19177: PPUSH
19178: LD_INT 8
19180: PPUSH
19181: CALL 19686 0 4
// end ;
19185: LD_VAR 0 6
19189: RET
// export function ComRadiation ( un ) ; var eff ; begin
19190: LD_INT 0
19192: PPUSH
19193: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
19194: LD_VAR 0 1
19198: PPUSH
19199: CALL_OW 264
19203: PUSH
19204: LD_INT 91
19206: NONEQUAL
19207: IFFALSE 19211
// exit ;
19209: GO 19281
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19211: LD_INT 68
19213: PPUSH
19214: LD_VAR 0 1
19218: PPUSH
19219: CALL_OW 255
19223: PPUSH
19224: CALL_OW 321
19228: PUSH
19229: LD_INT 2
19231: EQUAL
19232: IFFALSE 19244
// eff := 50 else
19234: LD_ADDR_VAR 0 3
19238: PUSH
19239: LD_INT 50
19241: ST_TO_ADDR
19242: GO 19252
// eff := 25 ;
19244: LD_ADDR_VAR 0 3
19248: PUSH
19249: LD_INT 25
19251: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19252: LD_VAR 0 1
19256: PPUSH
19257: CALL_OW 250
19261: PPUSH
19262: LD_VAR 0 1
19266: PPUSH
19267: CALL_OW 251
19271: PPUSH
19272: LD_VAR 0 3
19276: PPUSH
19277: CALL_OW 495
// end ;
19281: LD_VAR 0 2
19285: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
19286: LD_INT 0
19288: PPUSH
19289: PPUSH
19290: PPUSH
19291: PPUSH
19292: PPUSH
19293: PPUSH
19294: PPUSH
19295: PPUSH
19296: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
19297: LD_VAR 0 1
19301: PPUSH
19302: CALL_OW 302
19306: NOT
19307: IFTRUE 19326
19309: PUSH
19310: LD_VAR 0 2
19314: PPUSH
19315: LD_VAR 0 3
19319: PPUSH
19320: CALL_OW 488
19324: NOT
19325: OR
19326: IFTRUE 19335
19328: PUSH
19329: LD_VAR 0 4
19333: NOT
19334: OR
19335: IFFALSE 19339
// exit ;
19337: GO 19681
// list := [ ] ;
19339: LD_ADDR_VAR 0 13
19343: PUSH
19344: EMPTY
19345: ST_TO_ADDR
// if x - r < 0 then
19346: LD_VAR 0 2
19350: PUSH
19351: LD_VAR 0 4
19355: MINUS
19356: PUSH
19357: LD_INT 0
19359: LESS
19360: IFFALSE 19372
// min_x := 0 else
19362: LD_ADDR_VAR 0 7
19366: PUSH
19367: LD_INT 0
19369: ST_TO_ADDR
19370: GO 19388
// min_x := x - r ;
19372: LD_ADDR_VAR 0 7
19376: PUSH
19377: LD_VAR 0 2
19381: PUSH
19382: LD_VAR 0 4
19386: MINUS
19387: ST_TO_ADDR
// if y - r < 0 then
19388: LD_VAR 0 3
19392: PUSH
19393: LD_VAR 0 4
19397: MINUS
19398: PUSH
19399: LD_INT 0
19401: LESS
19402: IFFALSE 19414
// min_y := 0 else
19404: LD_ADDR_VAR 0 8
19408: PUSH
19409: LD_INT 0
19411: ST_TO_ADDR
19412: GO 19430
// min_y := y - r ;
19414: LD_ADDR_VAR 0 8
19418: PUSH
19419: LD_VAR 0 3
19423: PUSH
19424: LD_VAR 0 4
19428: MINUS
19429: ST_TO_ADDR
// max_x := x + r ;
19430: LD_ADDR_VAR 0 9
19434: PUSH
19435: LD_VAR 0 2
19439: PUSH
19440: LD_VAR 0 4
19444: PLUS
19445: ST_TO_ADDR
// max_y := y + r ;
19446: LD_ADDR_VAR 0 10
19450: PUSH
19451: LD_VAR 0 3
19455: PUSH
19456: LD_VAR 0 4
19460: PLUS
19461: ST_TO_ADDR
// for _x = min_x to max_x do
19462: LD_ADDR_VAR 0 11
19466: PUSH
19467: DOUBLE
19468: LD_VAR 0 7
19472: DEC
19473: ST_TO_ADDR
19474: LD_VAR 0 9
19478: PUSH
19479: FOR_TO
19480: IFFALSE 19599
// for _y = min_y to max_y do
19482: LD_ADDR_VAR 0 12
19486: PUSH
19487: DOUBLE
19488: LD_VAR 0 8
19492: DEC
19493: ST_TO_ADDR
19494: LD_VAR 0 10
19498: PUSH
19499: FOR_TO
19500: IFFALSE 19595
// begin if not ValidHex ( _x , _y ) then
19502: LD_VAR 0 11
19506: PPUSH
19507: LD_VAR 0 12
19511: PPUSH
19512: CALL_OW 488
19516: NOT
19517: IFFALSE 19521
// continue ;
19519: GO 19499
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19521: LD_VAR 0 11
19525: PPUSH
19526: LD_VAR 0 12
19530: PPUSH
19531: CALL_OW 351
19535: IFFALSE 19553
19537: PUSH
19538: LD_VAR 0 11
19542: PPUSH
19543: LD_VAR 0 12
19547: PPUSH
19548: CALL_OW 554
19552: AND
19553: IFFALSE 19593
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19555: LD_ADDR_VAR 0 13
19559: PUSH
19560: LD_VAR 0 13
19564: PPUSH
19565: LD_VAR 0 13
19569: PUSH
19570: LD_INT 1
19572: PLUS
19573: PPUSH
19574: LD_VAR 0 11
19578: PUSH
19579: LD_VAR 0 12
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PPUSH
19588: CALL_OW 2
19592: ST_TO_ADDR
// end ;
19593: GO 19499
19595: POP
19596: POP
19597: GO 19479
19599: POP
19600: POP
// if not list then
19601: LD_VAR 0 13
19605: NOT
19606: IFFALSE 19610
// exit ;
19608: GO 19681
// for i in list do
19610: LD_ADDR_VAR 0 6
19614: PUSH
19615: LD_VAR 0 13
19619: PUSH
19620: FOR_IN
19621: IFFALSE 19679
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
19623: LD_VAR 0 1
19627: PPUSH
19628: LD_STRING M
19630: PUSH
19631: LD_VAR 0 6
19635: PUSH
19636: LD_INT 1
19638: ARRAY
19639: PUSH
19640: LD_VAR 0 6
19644: PUSH
19645: LD_INT 2
19647: ARRAY
19648: PUSH
19649: LD_INT 0
19651: PUSH
19652: LD_INT 0
19654: PUSH
19655: LD_INT 0
19657: PUSH
19658: LD_INT 0
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: PUSH
19670: EMPTY
19671: LIST
19672: PPUSH
19673: CALL_OW 447
19677: GO 19620
19679: POP
19680: POP
// end ;
19681: LD_VAR 0 5
19685: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
19686: LD_INT 0
19688: PPUSH
19689: PPUSH
19690: PPUSH
19691: PPUSH
19692: PPUSH
19693: PPUSH
19694: PPUSH
19695: PPUSH
19696: PPUSH
19697: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
19698: LD_VAR 0 1
19702: PPUSH
19703: CALL_OW 302
19707: NOT
19708: IFTRUE 19727
19710: PUSH
19711: LD_VAR 0 2
19715: PPUSH
19716: LD_VAR 0 3
19720: PPUSH
19721: CALL_OW 488
19725: NOT
19726: OR
19727: IFTRUE 19736
19729: PUSH
19730: LD_VAR 0 4
19734: NOT
19735: OR
19736: IFFALSE 19740
// exit ;
19738: GO 20257
// list := [ ] ;
19740: LD_ADDR_VAR 0 13
19744: PUSH
19745: EMPTY
19746: ST_TO_ADDR
// if x - r < 0 then
19747: LD_VAR 0 2
19751: PUSH
19752: LD_VAR 0 4
19756: MINUS
19757: PUSH
19758: LD_INT 0
19760: LESS
19761: IFFALSE 19773
// min_x := 0 else
19763: LD_ADDR_VAR 0 7
19767: PUSH
19768: LD_INT 0
19770: ST_TO_ADDR
19771: GO 19789
// min_x := x - r ;
19773: LD_ADDR_VAR 0 7
19777: PUSH
19778: LD_VAR 0 2
19782: PUSH
19783: LD_VAR 0 4
19787: MINUS
19788: ST_TO_ADDR
// if y - r < 0 then
19789: LD_VAR 0 3
19793: PUSH
19794: LD_VAR 0 4
19798: MINUS
19799: PUSH
19800: LD_INT 0
19802: LESS
19803: IFFALSE 19815
// min_y := 0 else
19805: LD_ADDR_VAR 0 8
19809: PUSH
19810: LD_INT 0
19812: ST_TO_ADDR
19813: GO 19831
// min_y := y - r ;
19815: LD_ADDR_VAR 0 8
19819: PUSH
19820: LD_VAR 0 3
19824: PUSH
19825: LD_VAR 0 4
19829: MINUS
19830: ST_TO_ADDR
// max_x := x + r ;
19831: LD_ADDR_VAR 0 9
19835: PUSH
19836: LD_VAR 0 2
19840: PUSH
19841: LD_VAR 0 4
19845: PLUS
19846: ST_TO_ADDR
// max_y := y + r ;
19847: LD_ADDR_VAR 0 10
19851: PUSH
19852: LD_VAR 0 3
19856: PUSH
19857: LD_VAR 0 4
19861: PLUS
19862: ST_TO_ADDR
// for _x = min_x to max_x do
19863: LD_ADDR_VAR 0 11
19867: PUSH
19868: DOUBLE
19869: LD_VAR 0 7
19873: DEC
19874: ST_TO_ADDR
19875: LD_VAR 0 9
19879: PUSH
19880: FOR_TO
19881: IFFALSE 20000
// for _y = min_y to max_y do
19883: LD_ADDR_VAR 0 12
19887: PUSH
19888: DOUBLE
19889: LD_VAR 0 8
19893: DEC
19894: ST_TO_ADDR
19895: LD_VAR 0 10
19899: PUSH
19900: FOR_TO
19901: IFFALSE 19996
// begin if not ValidHex ( _x , _y ) then
19903: LD_VAR 0 11
19907: PPUSH
19908: LD_VAR 0 12
19912: PPUSH
19913: CALL_OW 488
19917: NOT
19918: IFFALSE 19922
// continue ;
19920: GO 19900
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19922: LD_VAR 0 11
19926: PPUSH
19927: LD_VAR 0 12
19931: PPUSH
19932: CALL_OW 351
19936: IFFALSE 19954
19938: PUSH
19939: LD_VAR 0 11
19943: PPUSH
19944: LD_VAR 0 12
19948: PPUSH
19949: CALL_OW 554
19953: AND
19954: IFFALSE 19994
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19956: LD_ADDR_VAR 0 13
19960: PUSH
19961: LD_VAR 0 13
19965: PPUSH
19966: LD_VAR 0 13
19970: PUSH
19971: LD_INT 1
19973: PLUS
19974: PPUSH
19975: LD_VAR 0 11
19979: PUSH
19980: LD_VAR 0 12
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PPUSH
19989: CALL_OW 2
19993: ST_TO_ADDR
// end ;
19994: GO 19900
19996: POP
19997: POP
19998: GO 19880
20000: POP
20001: POP
// if not list then
20002: LD_VAR 0 13
20006: NOT
20007: IFFALSE 20011
// exit ;
20009: GO 20257
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
20011: LD_ADDR_VAR 0 13
20015: PUSH
20016: LD_VAR 0 1
20020: PPUSH
20021: LD_VAR 0 13
20025: PPUSH
20026: LD_INT 1
20028: PPUSH
20029: LD_INT 1
20031: PPUSH
20032: CALL 29900 0 4
20036: ST_TO_ADDR
// ComStop ( flame ) ;
20037: LD_VAR 0 1
20041: PPUSH
20042: CALL_OW 141
// for i in list do
20046: LD_ADDR_VAR 0 6
20050: PUSH
20051: LD_VAR 0 13
20055: PUSH
20056: FOR_IN
20057: IFFALSE 20088
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
20059: LD_VAR 0 1
20063: PPUSH
20064: LD_VAR 0 6
20068: PUSH
20069: LD_INT 1
20071: ARRAY
20072: PPUSH
20073: LD_VAR 0 6
20077: PUSH
20078: LD_INT 2
20080: ARRAY
20081: PPUSH
20082: CALL_OW 176
20086: GO 20056
20088: POP
20089: POP
// repeat wait ( 0 0$1 ) ;
20090: LD_INT 35
20092: PPUSH
20093: CALL_OW 67
// task := GetTaskList ( flame ) ;
20097: LD_ADDR_VAR 0 14
20101: PUSH
20102: LD_VAR 0 1
20106: PPUSH
20107: CALL_OW 437
20111: ST_TO_ADDR
// if not task then
20112: LD_VAR 0 14
20116: NOT
20117: IFFALSE 20121
// exit ;
20119: GO 20257
// if task [ 1 ] [ 1 ] <> | then
20121: LD_VAR 0 14
20125: PUSH
20126: LD_INT 1
20128: ARRAY
20129: PUSH
20130: LD_INT 1
20132: ARRAY
20133: PUSH
20134: LD_STRING |
20136: NONEQUAL
20137: IFFALSE 20141
// exit ;
20139: GO 20257
// _x := task [ 1 ] [ 2 ] ;
20141: LD_ADDR_VAR 0 11
20145: PUSH
20146: LD_VAR 0 14
20150: PUSH
20151: LD_INT 1
20153: ARRAY
20154: PUSH
20155: LD_INT 2
20157: ARRAY
20158: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
20159: LD_ADDR_VAR 0 12
20163: PUSH
20164: LD_VAR 0 14
20168: PUSH
20169: LD_INT 1
20171: ARRAY
20172: PUSH
20173: LD_INT 3
20175: ARRAY
20176: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
20177: LD_VAR 0 11
20181: PPUSH
20182: LD_VAR 0 12
20186: PPUSH
20187: CALL_OW 351
20191: NOT
20192: IFTRUE 20211
20194: PUSH
20195: LD_VAR 0 11
20199: PPUSH
20200: LD_VAR 0 12
20204: PPUSH
20205: CALL_OW 554
20209: NOT
20210: OR
20211: IFFALSE 20245
// begin task := Delete ( task , 1 ) ;
20213: LD_ADDR_VAR 0 14
20217: PUSH
20218: LD_VAR 0 14
20222: PPUSH
20223: LD_INT 1
20225: PPUSH
20226: CALL_OW 3
20230: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
20231: LD_VAR 0 1
20235: PPUSH
20236: LD_VAR 0 14
20240: PPUSH
20241: CALL_OW 446
// end ; until not HasTask ( flame ) ;
20245: LD_VAR 0 1
20249: PPUSH
20250: CALL_OW 314
20254: NOT
20255: IFFALSE 20090
// end ;
20257: LD_VAR 0 5
20261: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
20262: LD_EXP 70
20266: NOT
20267: IFFALSE 20317
20269: GO 20271
20271: DISABLE
// begin initHack := true ;
20272: LD_ADDR_EXP 70
20276: PUSH
20277: LD_INT 1
20279: ST_TO_ADDR
// hackTanks := [ ] ;
20280: LD_ADDR_EXP 71
20284: PUSH
20285: EMPTY
20286: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20287: LD_ADDR_EXP 72
20291: PUSH
20292: EMPTY
20293: ST_TO_ADDR
// hackLimit := 3 ;
20294: LD_ADDR_EXP 73
20298: PUSH
20299: LD_INT 3
20301: ST_TO_ADDR
// hackDist := 12 ;
20302: LD_ADDR_EXP 74
20306: PUSH
20307: LD_INT 12
20309: ST_TO_ADDR
// hackCounter := [ ] ;
20310: LD_ADDR_EXP 75
20314: PUSH
20315: EMPTY
20316: ST_TO_ADDR
// end ;
20317: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20318: LD_EXP 70
20322: IFFALSE 20340
20324: PUSH
20325: LD_INT 34
20327: PUSH
20328: LD_INT 99
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PPUSH
20335: CALL_OW 69
20339: AND
20340: IFFALSE 20593
20342: GO 20344
20344: DISABLE
20345: LD_INT 0
20347: PPUSH
20348: PPUSH
// begin enable ;
20349: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20350: LD_ADDR_VAR 0 1
20354: PUSH
20355: LD_INT 34
20357: PUSH
20358: LD_INT 99
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PPUSH
20365: CALL_OW 69
20369: PUSH
20370: FOR_IN
20371: IFFALSE 20591
// begin if not i in hackTanks then
20373: LD_VAR 0 1
20377: PUSH
20378: LD_EXP 71
20382: IN
20383: NOT
20384: IFFALSE 20467
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20386: LD_ADDR_EXP 71
20390: PUSH
20391: LD_EXP 71
20395: PPUSH
20396: LD_EXP 71
20400: PUSH
20401: LD_INT 1
20403: PLUS
20404: PPUSH
20405: LD_VAR 0 1
20409: PPUSH
20410: CALL_OW 1
20414: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
20415: LD_ADDR_EXP 72
20419: PUSH
20420: LD_EXP 72
20424: PPUSH
20425: LD_EXP 72
20429: PUSH
20430: LD_INT 1
20432: PLUS
20433: PPUSH
20434: EMPTY
20435: PPUSH
20436: CALL_OW 1
20440: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
20441: LD_ADDR_EXP 75
20445: PUSH
20446: LD_EXP 75
20450: PPUSH
20451: LD_EXP 75
20455: PUSH
20456: LD_INT 1
20458: PLUS
20459: PPUSH
20460: EMPTY
20461: PPUSH
20462: CALL_OW 1
20466: ST_TO_ADDR
// end ; if not IsOk ( i ) then
20467: LD_VAR 0 1
20471: PPUSH
20472: CALL_OW 302
20476: NOT
20477: IFFALSE 20490
// begin HackUnlinkAll ( i ) ;
20479: LD_VAR 0 1
20483: PPUSH
20484: CALL 20596 0 1
// continue ;
20488: GO 20370
// end ; HackCheckCapturedStatus ( i ) ;
20490: LD_VAR 0 1
20494: PPUSH
20495: CALL 21041 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
20499: LD_ADDR_VAR 0 2
20503: PUSH
20504: LD_INT 81
20506: PUSH
20507: LD_VAR 0 1
20511: PPUSH
20512: CALL_OW 255
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: PUSH
20521: LD_INT 33
20523: PUSH
20524: LD_INT 3
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: PUSH
20531: LD_INT 91
20533: PUSH
20534: LD_VAR 0 1
20538: PUSH
20539: LD_EXP 74
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 50
20551: PUSH
20552: EMPTY
20553: LIST
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: PPUSH
20561: CALL_OW 69
20565: ST_TO_ADDR
// if not tmp then
20566: LD_VAR 0 2
20570: NOT
20571: IFFALSE 20575
// continue ;
20573: GO 20370
// HackLink ( i , tmp ) ;
20575: LD_VAR 0 1
20579: PPUSH
20580: LD_VAR 0 2
20584: PPUSH
20585: CALL 20732 0 2
// end ;
20589: GO 20370
20591: POP
20592: POP
// end ;
20593: PPOPN 2
20595: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20596: LD_INT 0
20598: PPUSH
20599: PPUSH
20600: PPUSH
// if not hack in hackTanks then
20601: LD_VAR 0 1
20605: PUSH
20606: LD_EXP 71
20610: IN
20611: NOT
20612: IFFALSE 20616
// exit ;
20614: GO 20727
// index := GetElementIndex ( hackTanks , hack ) ;
20616: LD_ADDR_VAR 0 4
20620: PUSH
20621: LD_EXP 71
20625: PPUSH
20626: LD_VAR 0 1
20630: PPUSH
20631: CALL 29195 0 2
20635: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
20636: LD_EXP 72
20640: PUSH
20641: LD_VAR 0 4
20645: ARRAY
20646: IFFALSE 20727
// begin for i in hackTanksCaptured [ index ] do
20648: LD_ADDR_VAR 0 3
20652: PUSH
20653: LD_EXP 72
20657: PUSH
20658: LD_VAR 0 4
20662: ARRAY
20663: PUSH
20664: FOR_IN
20665: IFFALSE 20691
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
20667: LD_VAR 0 3
20671: PUSH
20672: LD_INT 1
20674: ARRAY
20675: PPUSH
20676: LD_VAR 0 3
20680: PUSH
20681: LD_INT 2
20683: ARRAY
20684: PPUSH
20685: CALL_OW 235
20689: GO 20664
20691: POP
20692: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20693: LD_ADDR_EXP 72
20697: PUSH
20698: LD_EXP 72
20702: PPUSH
20703: LD_VAR 0 4
20707: PPUSH
20708: EMPTY
20709: PPUSH
20710: CALL_OW 1
20714: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20715: LD_VAR 0 1
20719: PPUSH
20720: LD_INT 0
20722: PPUSH
20723: CALL_OW 505
// end ; end ;
20727: LD_VAR 0 2
20731: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20732: LD_INT 0
20734: PPUSH
20735: PPUSH
20736: PPUSH
// if not hack in hackTanks or not vehicles then
20737: LD_VAR 0 1
20741: PUSH
20742: LD_EXP 71
20746: IN
20747: NOT
20748: IFTRUE 20757
20750: PUSH
20751: LD_VAR 0 2
20755: NOT
20756: OR
20757: IFFALSE 20761
// exit ;
20759: GO 21036
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20761: LD_ADDR_VAR 0 2
20765: PUSH
20766: LD_VAR 0 1
20770: PPUSH
20771: LD_VAR 0 2
20775: PPUSH
20776: LD_INT 1
20778: PPUSH
20779: LD_INT 1
20781: PPUSH
20782: CALL 29847 0 4
20786: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20787: LD_ADDR_VAR 0 5
20791: PUSH
20792: LD_EXP 71
20796: PPUSH
20797: LD_VAR 0 1
20801: PPUSH
20802: CALL 29195 0 2
20806: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20807: LD_EXP 72
20811: PUSH
20812: LD_VAR 0 5
20816: ARRAY
20817: PUSH
20818: LD_EXP 73
20822: LESS
20823: IFFALSE 21012
// begin for i := 1 to vehicles do
20825: LD_ADDR_VAR 0 4
20829: PUSH
20830: DOUBLE
20831: LD_INT 1
20833: DEC
20834: ST_TO_ADDR
20835: LD_VAR 0 2
20839: PUSH
20840: FOR_TO
20841: IFFALSE 21010
// begin if hackTanksCaptured [ index ] = hackLimit then
20843: LD_EXP 72
20847: PUSH
20848: LD_VAR 0 5
20852: ARRAY
20853: PUSH
20854: LD_EXP 73
20858: EQUAL
20859: IFFALSE 20863
// break ;
20861: GO 21010
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
20863: LD_ADDR_EXP 75
20867: PUSH
20868: LD_EXP 75
20872: PPUSH
20873: LD_VAR 0 5
20877: PPUSH
20878: LD_EXP 75
20882: PUSH
20883: LD_VAR 0 5
20887: ARRAY
20888: PUSH
20889: LD_INT 1
20891: PLUS
20892: PPUSH
20893: CALL_OW 1
20897: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
20898: LD_ADDR_EXP 72
20902: PUSH
20903: LD_EXP 72
20907: PPUSH
20908: LD_VAR 0 5
20912: PUSH
20913: LD_EXP 72
20917: PUSH
20918: LD_VAR 0 5
20922: ARRAY
20923: PUSH
20924: LD_INT 1
20926: PLUS
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PPUSH
20932: LD_VAR 0 2
20936: PUSH
20937: LD_VAR 0 4
20941: ARRAY
20942: PUSH
20943: LD_VAR 0 2
20947: PUSH
20948: LD_VAR 0 4
20952: ARRAY
20953: PPUSH
20954: CALL_OW 255
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PPUSH
20963: CALL 29412 0 3
20967: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
20968: LD_VAR 0 2
20972: PUSH
20973: LD_VAR 0 4
20977: ARRAY
20978: PPUSH
20979: LD_VAR 0 1
20983: PPUSH
20984: CALL_OW 255
20988: PPUSH
20989: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
20993: LD_VAR 0 2
20997: PUSH
20998: LD_VAR 0 4
21002: ARRAY
21003: PPUSH
21004: CALL_OW 141
// end ;
21008: GO 20840
21010: POP
21011: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21012: LD_VAR 0 1
21016: PPUSH
21017: LD_EXP 72
21021: PUSH
21022: LD_VAR 0 5
21026: ARRAY
21027: PUSH
21028: LD_INT 0
21030: PLUS
21031: PPUSH
21032: CALL_OW 505
// end ;
21036: LD_VAR 0 3
21040: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21041: LD_INT 0
21043: PPUSH
21044: PPUSH
21045: PPUSH
21046: PPUSH
// if not hack in hackTanks then
21047: LD_VAR 0 1
21051: PUSH
21052: LD_EXP 71
21056: IN
21057: NOT
21058: IFFALSE 21062
// exit ;
21060: GO 21306
// index := GetElementIndex ( hackTanks , hack ) ;
21062: LD_ADDR_VAR 0 4
21066: PUSH
21067: LD_EXP 71
21071: PPUSH
21072: LD_VAR 0 1
21076: PPUSH
21077: CALL 29195 0 2
21081: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21082: LD_ADDR_VAR 0 3
21086: PUSH
21087: DOUBLE
21088: LD_EXP 72
21092: PUSH
21093: LD_VAR 0 4
21097: ARRAY
21098: INC
21099: ST_TO_ADDR
21100: LD_INT 1
21102: PUSH
21103: FOR_DOWNTO
21104: IFFALSE 21280
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21106: LD_ADDR_VAR 0 5
21110: PUSH
21111: LD_EXP 72
21115: PUSH
21116: LD_VAR 0 4
21120: ARRAY
21121: PUSH
21122: LD_VAR 0 3
21126: ARRAY
21127: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21128: LD_VAR 0 5
21132: PUSH
21133: LD_INT 1
21135: ARRAY
21136: PPUSH
21137: CALL_OW 302
21141: NOT
21142: IFTRUE 21170
21144: PUSH
21145: LD_VAR 0 5
21149: PUSH
21150: LD_INT 1
21152: ARRAY
21153: PPUSH
21154: CALL_OW 255
21158: PUSH
21159: LD_VAR 0 1
21163: PPUSH
21164: CALL_OW 255
21168: NONEQUAL
21169: OR
21170: IFFALSE 21278
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21172: LD_VAR 0 5
21176: PUSH
21177: LD_INT 1
21179: ARRAY
21180: PPUSH
21181: CALL_OW 305
21185: IFFALSE 21213
21187: PUSH
21188: LD_VAR 0 5
21192: PUSH
21193: LD_INT 1
21195: ARRAY
21196: PPUSH
21197: CALL_OW 255
21201: PUSH
21202: LD_VAR 0 1
21206: PPUSH
21207: CALL_OW 255
21211: EQUAL
21212: AND
21213: IFFALSE 21237
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21215: LD_VAR 0 5
21219: PUSH
21220: LD_INT 1
21222: ARRAY
21223: PPUSH
21224: LD_VAR 0 5
21228: PUSH
21229: LD_INT 2
21231: ARRAY
21232: PPUSH
21233: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
21237: LD_ADDR_EXP 72
21241: PUSH
21242: LD_EXP 72
21246: PPUSH
21247: LD_VAR 0 4
21251: PPUSH
21252: LD_EXP 72
21256: PUSH
21257: LD_VAR 0 4
21261: ARRAY
21262: PPUSH
21263: LD_VAR 0 3
21267: PPUSH
21268: CALL_OW 3
21272: PPUSH
21273: CALL_OW 1
21277: ST_TO_ADDR
// end ; end ;
21278: GO 21103
21280: POP
21281: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21282: LD_VAR 0 1
21286: PPUSH
21287: LD_EXP 72
21291: PUSH
21292: LD_VAR 0 4
21296: ARRAY
21297: PUSH
21298: LD_INT 0
21300: PLUS
21301: PPUSH
21302: CALL_OW 505
// end ;
21306: LD_VAR 0 2
21310: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21311: LD_INT 0
21313: PPUSH
21314: PPUSH
21315: PPUSH
21316: PPUSH
// if not hack in hackTanks then
21317: LD_VAR 0 1
21321: PUSH
21322: LD_EXP 71
21326: IN
21327: NOT
21328: IFFALSE 21332
// exit ;
21330: GO 21417
// index := GetElementIndex ( hackTanks , hack ) ;
21332: LD_ADDR_VAR 0 5
21336: PUSH
21337: LD_EXP 71
21341: PPUSH
21342: LD_VAR 0 1
21346: PPUSH
21347: CALL 29195 0 2
21351: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21352: LD_ADDR_VAR 0 4
21356: PUSH
21357: DOUBLE
21358: LD_INT 1
21360: DEC
21361: ST_TO_ADDR
21362: LD_EXP 72
21366: PUSH
21367: LD_VAR 0 5
21371: ARRAY
21372: PUSH
21373: FOR_TO
21374: IFFALSE 21415
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
21376: LD_EXP 72
21380: PUSH
21381: LD_VAR 0 5
21385: ARRAY
21386: PUSH
21387: LD_VAR 0 4
21391: ARRAY
21392: PUSH
21393: LD_INT 1
21395: ARRAY
21396: PUSH
21397: LD_VAR 0 2
21401: EQUAL
21402: IFFALSE 21413
// KillUnit ( vehicle ) ;
21404: LD_VAR 0 2
21408: PPUSH
21409: CALL_OW 66
21413: GO 21373
21415: POP
21416: POP
// end ;
21417: LD_VAR 0 3
21421: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
21422: LD_EXP 76
21426: NOT
21427: IFFALSE 21462
21429: GO 21431
21431: DISABLE
// begin initMiner := true ;
21432: LD_ADDR_EXP 76
21436: PUSH
21437: LD_INT 1
21439: ST_TO_ADDR
// minersList := [ ] ;
21440: LD_ADDR_EXP 77
21444: PUSH
21445: EMPTY
21446: ST_TO_ADDR
// minerMinesList := [ ] ;
21447: LD_ADDR_EXP 78
21451: PUSH
21452: EMPTY
21453: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
21454: LD_ADDR_EXP 79
21458: PUSH
21459: LD_INT 5
21461: ST_TO_ADDR
// end ;
21462: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
21463: LD_EXP 76
21467: IFFALSE 21485
21469: PUSH
21470: LD_INT 34
21472: PUSH
21473: LD_INT 81
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PPUSH
21480: CALL_OW 69
21484: AND
21485: IFFALSE 21948
21487: GO 21489
21489: DISABLE
21490: LD_INT 0
21492: PPUSH
21493: PPUSH
21494: PPUSH
21495: PPUSH
// begin enable ;
21496: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
21497: LD_ADDR_VAR 0 1
21501: PUSH
21502: LD_INT 34
21504: PUSH
21505: LD_INT 81
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PPUSH
21512: CALL_OW 69
21516: PUSH
21517: FOR_IN
21518: IFFALSE 21590
// begin if not i in minersList then
21520: LD_VAR 0 1
21524: PUSH
21525: LD_EXP 77
21529: IN
21530: NOT
21531: IFFALSE 21588
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
21533: LD_ADDR_EXP 77
21537: PUSH
21538: LD_EXP 77
21542: PPUSH
21543: LD_EXP 77
21547: PUSH
21548: LD_INT 1
21550: PLUS
21551: PPUSH
21552: LD_VAR 0 1
21556: PPUSH
21557: CALL_OW 1
21561: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
21562: LD_ADDR_EXP 78
21566: PUSH
21567: LD_EXP 78
21571: PPUSH
21572: LD_EXP 78
21576: PUSH
21577: LD_INT 1
21579: PLUS
21580: PPUSH
21581: EMPTY
21582: PPUSH
21583: CALL_OW 1
21587: ST_TO_ADDR
// end end ;
21588: GO 21517
21590: POP
21591: POP
// for i := minerMinesList downto 1 do
21592: LD_ADDR_VAR 0 1
21596: PUSH
21597: DOUBLE
21598: LD_EXP 78
21602: INC
21603: ST_TO_ADDR
21604: LD_INT 1
21606: PUSH
21607: FOR_DOWNTO
21608: IFFALSE 21946
// begin if IsLive ( minersList [ i ] ) then
21610: LD_EXP 77
21614: PUSH
21615: LD_VAR 0 1
21619: ARRAY
21620: PPUSH
21621: CALL_OW 300
21625: IFFALSE 21653
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
21627: LD_EXP 77
21631: PUSH
21632: LD_VAR 0 1
21636: ARRAY
21637: PPUSH
21638: LD_EXP 78
21642: PUSH
21643: LD_VAR 0 1
21647: ARRAY
21648: PPUSH
21649: CALL_OW 505
// if not minerMinesList [ i ] then
21653: LD_EXP 78
21657: PUSH
21658: LD_VAR 0 1
21662: ARRAY
21663: NOT
21664: IFFALSE 21668
// continue ;
21666: GO 21607
// for j := minerMinesList [ i ] downto 1 do
21668: LD_ADDR_VAR 0 2
21672: PUSH
21673: DOUBLE
21674: LD_EXP 78
21678: PUSH
21679: LD_VAR 0 1
21683: ARRAY
21684: INC
21685: ST_TO_ADDR
21686: LD_INT 1
21688: PUSH
21689: FOR_DOWNTO
21690: IFFALSE 21942
// begin side := GetSide ( minersList [ i ] ) ;
21692: LD_ADDR_VAR 0 3
21696: PUSH
21697: LD_EXP 77
21701: PUSH
21702: LD_VAR 0 1
21706: ARRAY
21707: PPUSH
21708: CALL_OW 255
21712: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
21713: LD_ADDR_VAR 0 4
21717: PUSH
21718: LD_EXP 78
21722: PUSH
21723: LD_VAR 0 1
21727: ARRAY
21728: PUSH
21729: LD_VAR 0 2
21733: ARRAY
21734: PUSH
21735: LD_INT 1
21737: ARRAY
21738: PPUSH
21739: LD_EXP 78
21743: PUSH
21744: LD_VAR 0 1
21748: ARRAY
21749: PUSH
21750: LD_VAR 0 2
21754: ARRAY
21755: PUSH
21756: LD_INT 2
21758: ARRAY
21759: PPUSH
21760: CALL_OW 428
21764: ST_TO_ADDR
// if not tmp then
21765: LD_VAR 0 4
21769: NOT
21770: IFFALSE 21774
// continue ;
21772: GO 21689
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
21774: LD_VAR 0 4
21778: PUSH
21779: LD_INT 81
21781: PUSH
21782: LD_VAR 0 3
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: PPUSH
21791: CALL_OW 69
21795: IN
21796: IFFALSE 21846
21798: PUSH
21799: LD_EXP 78
21803: PUSH
21804: LD_VAR 0 1
21808: ARRAY
21809: PUSH
21810: LD_VAR 0 2
21814: ARRAY
21815: PUSH
21816: LD_INT 1
21818: ARRAY
21819: PPUSH
21820: LD_EXP 78
21824: PUSH
21825: LD_VAR 0 1
21829: ARRAY
21830: PUSH
21831: LD_VAR 0 2
21835: ARRAY
21836: PUSH
21837: LD_INT 2
21839: ARRAY
21840: PPUSH
21841: CALL_OW 458
21845: AND
21846: IFFALSE 21940
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
21848: LD_EXP 78
21852: PUSH
21853: LD_VAR 0 1
21857: ARRAY
21858: PUSH
21859: LD_VAR 0 2
21863: ARRAY
21864: PUSH
21865: LD_INT 1
21867: ARRAY
21868: PPUSH
21869: LD_EXP 78
21873: PUSH
21874: LD_VAR 0 1
21878: ARRAY
21879: PUSH
21880: LD_VAR 0 2
21884: ARRAY
21885: PUSH
21886: LD_INT 2
21888: ARRAY
21889: PPUSH
21890: LD_VAR 0 3
21894: PPUSH
21895: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
21899: LD_ADDR_EXP 78
21903: PUSH
21904: LD_EXP 78
21908: PPUSH
21909: LD_VAR 0 1
21913: PPUSH
21914: LD_EXP 78
21918: PUSH
21919: LD_VAR 0 1
21923: ARRAY
21924: PPUSH
21925: LD_VAR 0 2
21929: PPUSH
21930: CALL_OW 3
21934: PPUSH
21935: CALL_OW 1
21939: ST_TO_ADDR
// end ; end ;
21940: GO 21689
21942: POP
21943: POP
// end ;
21944: GO 21607
21946: POP
21947: POP
// end ;
21948: PPOPN 4
21950: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
21951: LD_INT 0
21953: PPUSH
21954: PPUSH
// result := false ;
21955: LD_ADDR_VAR 0 4
21959: PUSH
21960: LD_INT 0
21962: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
21963: LD_VAR 0 1
21967: PPUSH
21968: CALL_OW 264
21972: PUSH
21973: LD_INT 81
21975: EQUAL
21976: NOT
21977: IFFALSE 21981
// exit ;
21979: GO 22225
// index := GetElementIndex ( minersList , unit ) ;
21981: LD_ADDR_VAR 0 5
21985: PUSH
21986: LD_EXP 77
21990: PPUSH
21991: LD_VAR 0 1
21995: PPUSH
21996: CALL 29195 0 2
22000: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22001: LD_EXP 78
22005: PUSH
22006: LD_VAR 0 5
22010: ARRAY
22011: PUSH
22012: LD_EXP 79
22016: GREATEREQUAL
22017: IFFALSE 22021
// exit ;
22019: GO 22225
// ComMoveXY ( unit , x , y ) ;
22021: LD_VAR 0 1
22025: PPUSH
22026: LD_VAR 0 2
22030: PPUSH
22031: LD_VAR 0 3
22035: PPUSH
22036: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22040: LD_INT 35
22042: PPUSH
22043: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
22047: LD_VAR 0 1
22051: PPUSH
22052: LD_VAR 0 2
22056: PPUSH
22057: LD_VAR 0 3
22061: PPUSH
22062: CALL 61241 0 3
22066: NOT
22067: IFFALSE 22080
22069: PUSH
22070: LD_VAR 0 1
22074: PPUSH
22075: CALL_OW 314
22079: AND
22080: IFFALSE 22084
// exit ;
22082: GO 22225
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22084: LD_VAR 0 2
22088: PPUSH
22089: LD_VAR 0 3
22093: PPUSH
22094: CALL_OW 428
22098: PUSH
22099: LD_VAR 0 1
22103: EQUAL
22104: IFFALSE 22118
22106: PUSH
22107: LD_VAR 0 1
22111: PPUSH
22112: CALL_OW 314
22116: NOT
22117: AND
22118: IFFALSE 22040
// PlaySoundXY ( x , y , PlantMine ) ;
22120: LD_VAR 0 2
22124: PPUSH
22125: LD_VAR 0 3
22129: PPUSH
22130: LD_STRING PlantMine
22132: PPUSH
22133: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
22137: LD_VAR 0 2
22141: PPUSH
22142: LD_VAR 0 3
22146: PPUSH
22147: LD_VAR 0 1
22151: PPUSH
22152: CALL_OW 255
22156: PPUSH
22157: LD_INT 0
22159: PPUSH
22160: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22164: LD_ADDR_EXP 78
22168: PUSH
22169: LD_EXP 78
22173: PPUSH
22174: LD_VAR 0 5
22178: PUSH
22179: LD_EXP 78
22183: PUSH
22184: LD_VAR 0 5
22188: ARRAY
22189: PUSH
22190: LD_INT 1
22192: PLUS
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PPUSH
22198: LD_VAR 0 2
22202: PUSH
22203: LD_VAR 0 3
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PPUSH
22212: CALL 29412 0 3
22216: ST_TO_ADDR
// result := true ;
22217: LD_ADDR_VAR 0 4
22221: PUSH
22222: LD_INT 1
22224: ST_TO_ADDR
// end ;
22225: LD_VAR 0 4
22229: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22230: LD_INT 0
22232: PPUSH
22233: PPUSH
22234: PPUSH
// if not unit in minersList then
22235: LD_VAR 0 1
22239: PUSH
22240: LD_EXP 77
22244: IN
22245: NOT
22246: IFFALSE 22250
// exit ;
22248: GO 22644
// index := GetElementIndex ( minersList , unit ) ;
22250: LD_ADDR_VAR 0 6
22254: PUSH
22255: LD_EXP 77
22259: PPUSH
22260: LD_VAR 0 1
22264: PPUSH
22265: CALL 29195 0 2
22269: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
22270: LD_ADDR_VAR 0 5
22274: PUSH
22275: DOUBLE
22276: LD_EXP 78
22280: PUSH
22281: LD_VAR 0 6
22285: ARRAY
22286: INC
22287: ST_TO_ADDR
22288: LD_INT 1
22290: PUSH
22291: FOR_DOWNTO
22292: IFFALSE 22455
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
22294: LD_EXP 78
22298: PUSH
22299: LD_VAR 0 6
22303: ARRAY
22304: PUSH
22305: LD_VAR 0 5
22309: ARRAY
22310: PUSH
22311: LD_INT 1
22313: ARRAY
22314: PUSH
22315: LD_VAR 0 2
22319: EQUAL
22320: IFFALSE 22350
22322: PUSH
22323: LD_EXP 78
22327: PUSH
22328: LD_VAR 0 6
22332: ARRAY
22333: PUSH
22334: LD_VAR 0 5
22338: ARRAY
22339: PUSH
22340: LD_INT 2
22342: ARRAY
22343: PUSH
22344: LD_VAR 0 3
22348: EQUAL
22349: AND
22350: IFFALSE 22453
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22352: LD_EXP 78
22356: PUSH
22357: LD_VAR 0 6
22361: ARRAY
22362: PUSH
22363: LD_VAR 0 5
22367: ARRAY
22368: PUSH
22369: LD_INT 1
22371: ARRAY
22372: PPUSH
22373: LD_EXP 78
22377: PUSH
22378: LD_VAR 0 6
22382: ARRAY
22383: PUSH
22384: LD_VAR 0 5
22388: ARRAY
22389: PUSH
22390: LD_INT 2
22392: ARRAY
22393: PPUSH
22394: LD_VAR 0 1
22398: PPUSH
22399: CALL_OW 255
22403: PPUSH
22404: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22408: LD_ADDR_EXP 78
22412: PUSH
22413: LD_EXP 78
22417: PPUSH
22418: LD_VAR 0 6
22422: PPUSH
22423: LD_EXP 78
22427: PUSH
22428: LD_VAR 0 6
22432: ARRAY
22433: PPUSH
22434: LD_VAR 0 5
22438: PPUSH
22439: CALL_OW 3
22443: PPUSH
22444: CALL_OW 1
22448: ST_TO_ADDR
// exit ;
22449: POP
22450: POP
22451: GO 22644
// end ; end ;
22453: GO 22291
22455: POP
22456: POP
// for i := minerMinesList [ index ] downto 1 do
22457: LD_ADDR_VAR 0 5
22461: PUSH
22462: DOUBLE
22463: LD_EXP 78
22467: PUSH
22468: LD_VAR 0 6
22472: ARRAY
22473: INC
22474: ST_TO_ADDR
22475: LD_INT 1
22477: PUSH
22478: FOR_DOWNTO
22479: IFFALSE 22642
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
22481: LD_EXP 78
22485: PUSH
22486: LD_VAR 0 6
22490: ARRAY
22491: PUSH
22492: LD_VAR 0 5
22496: ARRAY
22497: PUSH
22498: LD_INT 1
22500: ARRAY
22501: PPUSH
22502: LD_EXP 78
22506: PUSH
22507: LD_VAR 0 6
22511: ARRAY
22512: PUSH
22513: LD_VAR 0 5
22517: ARRAY
22518: PUSH
22519: LD_INT 2
22521: ARRAY
22522: PPUSH
22523: LD_VAR 0 2
22527: PPUSH
22528: LD_VAR 0 3
22532: PPUSH
22533: CALL_OW 298
22537: PUSH
22538: LD_INT 6
22540: LESS
22541: IFFALSE 22640
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22543: LD_EXP 78
22547: PUSH
22548: LD_VAR 0 6
22552: ARRAY
22553: PUSH
22554: LD_VAR 0 5
22558: ARRAY
22559: PUSH
22560: LD_INT 1
22562: ARRAY
22563: PPUSH
22564: LD_EXP 78
22568: PUSH
22569: LD_VAR 0 6
22573: ARRAY
22574: PUSH
22575: LD_VAR 0 5
22579: ARRAY
22580: PUSH
22581: LD_INT 2
22583: ARRAY
22584: PPUSH
22585: LD_VAR 0 1
22589: PPUSH
22590: CALL_OW 255
22594: PPUSH
22595: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22599: LD_ADDR_EXP 78
22603: PUSH
22604: LD_EXP 78
22608: PPUSH
22609: LD_VAR 0 6
22613: PPUSH
22614: LD_EXP 78
22618: PUSH
22619: LD_VAR 0 6
22623: ARRAY
22624: PPUSH
22625: LD_VAR 0 5
22629: PPUSH
22630: CALL_OW 3
22634: PPUSH
22635: CALL_OW 1
22639: ST_TO_ADDR
// end ; end ;
22640: GO 22478
22642: POP
22643: POP
// end ;
22644: LD_VAR 0 4
22648: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
22649: LD_INT 0
22651: PPUSH
22652: PPUSH
22653: PPUSH
22654: PPUSH
22655: PPUSH
22656: PPUSH
22657: PPUSH
22658: PPUSH
22659: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
22660: LD_VAR 0 1
22664: PPUSH
22665: CALL_OW 264
22669: PUSH
22670: LD_INT 81
22672: EQUAL
22673: NOT
22674: IFTRUE 22689
22676: PUSH
22677: LD_VAR 0 1
22681: PUSH
22682: LD_EXP 77
22686: IN
22687: NOT
22688: OR
22689: IFFALSE 22693
// exit ;
22691: GO 23019
// index := GetElementIndex ( minersList , unit ) ;
22693: LD_ADDR_VAR 0 6
22697: PUSH
22698: LD_EXP 77
22702: PPUSH
22703: LD_VAR 0 1
22707: PPUSH
22708: CALL 29195 0 2
22712: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
22713: LD_ADDR_VAR 0 8
22717: PUSH
22718: LD_EXP 79
22722: PUSH
22723: LD_EXP 78
22727: PUSH
22728: LD_VAR 0 6
22732: ARRAY
22733: MINUS
22734: ST_TO_ADDR
// if not minesFreeAmount then
22735: LD_VAR 0 8
22739: NOT
22740: IFFALSE 22744
// exit ;
22742: GO 23019
// tmp := [ ] ;
22744: LD_ADDR_VAR 0 7
22748: PUSH
22749: EMPTY
22750: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
22751: LD_ADDR_VAR 0 5
22755: PUSH
22756: DOUBLE
22757: LD_INT 1
22759: DEC
22760: ST_TO_ADDR
22761: LD_VAR 0 8
22765: PUSH
22766: FOR_TO
22767: IFFALSE 22966
// begin _d := rand ( 0 , 5 ) ;
22769: LD_ADDR_VAR 0 11
22773: PUSH
22774: LD_INT 0
22776: PPUSH
22777: LD_INT 5
22779: PPUSH
22780: CALL_OW 12
22784: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
22785: LD_ADDR_VAR 0 12
22789: PUSH
22790: LD_INT 2
22792: PPUSH
22793: LD_INT 6
22795: PPUSH
22796: CALL_OW 12
22800: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
22801: LD_ADDR_VAR 0 9
22805: PUSH
22806: LD_VAR 0 2
22810: PPUSH
22811: LD_VAR 0 11
22815: PPUSH
22816: LD_VAR 0 12
22820: PPUSH
22821: CALL_OW 272
22825: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
22826: LD_ADDR_VAR 0 10
22830: PUSH
22831: LD_VAR 0 3
22835: PPUSH
22836: LD_VAR 0 11
22840: PPUSH
22841: LD_VAR 0 12
22845: PPUSH
22846: CALL_OW 273
22850: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
22851: LD_VAR 0 9
22855: PPUSH
22856: LD_VAR 0 10
22860: PPUSH
22861: CALL_OW 488
22865: IFFALSE 22889
22867: PUSH
22868: LD_VAR 0 9
22872: PUSH
22873: LD_VAR 0 10
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: LD_VAR 0 7
22886: IN
22887: NOT
22888: AND
22889: IFFALSE 22908
22891: PUSH
22892: LD_VAR 0 9
22896: PPUSH
22897: LD_VAR 0 10
22901: PPUSH
22902: CALL_OW 458
22906: NOT
22907: AND
22908: IFFALSE 22950
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
22910: LD_ADDR_VAR 0 7
22914: PUSH
22915: LD_VAR 0 7
22919: PPUSH
22920: LD_VAR 0 7
22924: PUSH
22925: LD_INT 1
22927: PLUS
22928: PPUSH
22929: LD_VAR 0 9
22933: PUSH
22934: LD_VAR 0 10
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PPUSH
22943: CALL_OW 1
22947: ST_TO_ADDR
22948: GO 22964
// i := i - 1 ;
22950: LD_ADDR_VAR 0 5
22954: PUSH
22955: LD_VAR 0 5
22959: PUSH
22960: LD_INT 1
22962: MINUS
22963: ST_TO_ADDR
// end ;
22964: GO 22766
22966: POP
22967: POP
// for i in tmp do
22968: LD_ADDR_VAR 0 5
22972: PUSH
22973: LD_VAR 0 7
22977: PUSH
22978: FOR_IN
22979: IFFALSE 23017
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
22981: LD_VAR 0 1
22985: PPUSH
22986: LD_VAR 0 5
22990: PUSH
22991: LD_INT 1
22993: ARRAY
22994: PPUSH
22995: LD_VAR 0 5
22999: PUSH
23000: LD_INT 2
23002: ARRAY
23003: PPUSH
23004: CALL 21951 0 3
23008: NOT
23009: IFFALSE 23015
// exit ;
23011: POP
23012: POP
23013: GO 23019
23015: GO 22978
23017: POP
23018: POP
// end ;
23019: LD_VAR 0 4
23023: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
23024: LD_INT 0
23026: PPUSH
23027: PPUSH
23028: PPUSH
23029: PPUSH
23030: PPUSH
23031: PPUSH
23032: PPUSH
23033: PPUSH
23034: PPUSH
// if GetClass ( unit ) <> class_sniper then
23035: LD_VAR 0 1
23039: PPUSH
23040: CALL_OW 257
23044: PUSH
23045: LD_INT 5
23047: NONEQUAL
23048: IFFALSE 23052
// exit ;
23050: GO 23522
// dist := 8 ;
23052: LD_ADDR_VAR 0 5
23056: PUSH
23057: LD_INT 8
23059: ST_TO_ADDR
// viewRange := 12 ;
23060: LD_ADDR_VAR 0 8
23064: PUSH
23065: LD_INT 12
23067: ST_TO_ADDR
// side := GetSide ( unit ) ;
23068: LD_ADDR_VAR 0 6
23072: PUSH
23073: LD_VAR 0 1
23077: PPUSH
23078: CALL_OW 255
23082: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23083: LD_INT 61
23085: PPUSH
23086: LD_VAR 0 6
23090: PPUSH
23091: CALL_OW 321
23095: PUSH
23096: LD_INT 2
23098: EQUAL
23099: IFFALSE 23109
// viewRange := 16 ;
23101: LD_ADDR_VAR 0 8
23105: PUSH
23106: LD_INT 16
23108: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23109: LD_VAR 0 1
23113: PPUSH
23114: LD_VAR 0 2
23118: PPUSH
23119: LD_VAR 0 3
23123: PPUSH
23124: CALL_OW 297
23128: PUSH
23129: LD_VAR 0 5
23133: GREATER
23134: IFFALSE 23213
// begin ComMoveXY ( unit , x , y ) ;
23136: LD_VAR 0 1
23140: PPUSH
23141: LD_VAR 0 2
23145: PPUSH
23146: LD_VAR 0 3
23150: PPUSH
23151: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23155: LD_INT 35
23157: PPUSH
23158: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23162: LD_VAR 0 1
23166: PPUSH
23167: LD_VAR 0 2
23171: PPUSH
23172: LD_VAR 0 3
23176: PPUSH
23177: CALL 61241 0 3
23181: NOT
23182: IFFALSE 23186
// exit ;
23184: GO 23522
// until GetDistUnitXY ( unit , x , y ) < dist ;
23186: LD_VAR 0 1
23190: PPUSH
23191: LD_VAR 0 2
23195: PPUSH
23196: LD_VAR 0 3
23200: PPUSH
23201: CALL_OW 297
23205: PUSH
23206: LD_VAR 0 5
23210: LESS
23211: IFFALSE 23155
// end ; ComTurnXY ( unit , x , y ) ;
23213: LD_VAR 0 1
23217: PPUSH
23218: LD_VAR 0 2
23222: PPUSH
23223: LD_VAR 0 3
23227: PPUSH
23228: CALL_OW 118
// repeat if Multiplayer then
23232: LD_OWVAR 4
23236: IFFALSE 23247
// wait ( 35 ) else
23238: LD_INT 35
23240: PPUSH
23241: CALL_OW 67
23245: GO 23254
// wait ( 5 ) ;
23247: LD_INT 5
23249: PPUSH
23250: CALL_OW 67
// _d := GetDir ( unit ) ;
23254: LD_ADDR_VAR 0 11
23258: PUSH
23259: LD_VAR 0 1
23263: PPUSH
23264: CALL_OW 254
23268: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
23269: LD_ADDR_VAR 0 7
23273: PUSH
23274: LD_VAR 0 1
23278: PPUSH
23279: CALL_OW 250
23283: PPUSH
23284: LD_VAR 0 1
23288: PPUSH
23289: CALL_OW 251
23293: PPUSH
23294: LD_VAR 0 2
23298: PPUSH
23299: LD_VAR 0 3
23303: PPUSH
23304: CALL 63877 0 4
23308: ST_TO_ADDR
// until dir = _d ;
23309: LD_VAR 0 7
23313: PUSH
23314: LD_VAR 0 11
23318: EQUAL
23319: IFFALSE 23232
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
23321: LD_ADDR_VAR 0 9
23325: PUSH
23326: LD_VAR 0 1
23330: PPUSH
23331: CALL_OW 250
23335: PPUSH
23336: LD_VAR 0 7
23340: PPUSH
23341: LD_VAR 0 5
23345: PPUSH
23346: CALL_OW 272
23350: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
23351: LD_ADDR_VAR 0 10
23355: PUSH
23356: LD_VAR 0 1
23360: PPUSH
23361: CALL_OW 251
23365: PPUSH
23366: LD_VAR 0 7
23370: PPUSH
23371: LD_VAR 0 5
23375: PPUSH
23376: CALL_OW 273
23380: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23381: LD_VAR 0 9
23385: PPUSH
23386: LD_VAR 0 10
23390: PPUSH
23391: CALL_OW 488
23395: NOT
23396: IFFALSE 23400
// exit ;
23398: GO 23522
// ComAnimCustom ( unit , 1 ) ;
23400: LD_VAR 0 1
23404: PPUSH
23405: LD_INT 1
23407: PPUSH
23408: CALL_OW 592
// p := 0 ;
23412: LD_ADDR_VAR 0 12
23416: PUSH
23417: LD_INT 0
23419: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
23420: LD_VAR 0 9
23424: PPUSH
23425: LD_VAR 0 10
23429: PPUSH
23430: LD_VAR 0 6
23434: PPUSH
23435: LD_VAR 0 8
23439: PPUSH
23440: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
23444: LD_INT 35
23446: PPUSH
23447: CALL_OW 67
// p := Inc ( p ) ;
23451: LD_ADDR_VAR 0 12
23455: PUSH
23456: LD_VAR 0 12
23460: PPUSH
23461: CALL 63833 0 1
23465: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
23466: LD_VAR 0 12
23470: PUSH
23471: LD_INT 3
23473: EQUAL
23474: IFTRUE 23488
23476: PUSH
23477: LD_VAR 0 1
23481: PPUSH
23482: CALL_OW 302
23486: NOT
23487: OR
23488: IFTRUE 23501
23490: PUSH
23491: LD_VAR 0 1
23495: PPUSH
23496: CALL_OW 301
23500: OR
23501: IFFALSE 23444
// RemoveSeeing ( _x , _y , side ) ;
23503: LD_VAR 0 9
23507: PPUSH
23508: LD_VAR 0 10
23512: PPUSH
23513: LD_VAR 0 6
23517: PPUSH
23518: CALL_OW 331
// end ;
23522: LD_VAR 0 4
23526: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
23527: LD_INT 0
23529: PPUSH
23530: PPUSH
23531: PPUSH
23532: PPUSH
23533: PPUSH
23534: PPUSH
23535: PPUSH
23536: PPUSH
23537: PPUSH
23538: PPUSH
23539: PPUSH
// if not unit then
23540: LD_VAR 0 1
23544: NOT
23545: IFFALSE 23549
// exit ;
23547: GO 23820
// side := GetSide ( unit ) ;
23549: LD_ADDR_VAR 0 3
23553: PUSH
23554: LD_VAR 0 1
23558: PPUSH
23559: CALL_OW 255
23563: ST_TO_ADDR
// x := GetX ( unit ) ;
23564: LD_ADDR_VAR 0 5
23568: PUSH
23569: LD_VAR 0 1
23573: PPUSH
23574: CALL_OW 250
23578: ST_TO_ADDR
// y := GetY ( unit ) ;
23579: LD_ADDR_VAR 0 6
23583: PUSH
23584: LD_VAR 0 1
23588: PPUSH
23589: CALL_OW 251
23593: ST_TO_ADDR
// r := 8 ;
23594: LD_ADDR_VAR 0 4
23598: PUSH
23599: LD_INT 8
23601: ST_TO_ADDR
// if x - r < 0 then
23602: LD_VAR 0 5
23606: PUSH
23607: LD_VAR 0 4
23611: MINUS
23612: PUSH
23613: LD_INT 0
23615: LESS
23616: IFFALSE 23628
// min_x := 0 else
23618: LD_ADDR_VAR 0 7
23622: PUSH
23623: LD_INT 0
23625: ST_TO_ADDR
23626: GO 23644
// min_x := x - r ;
23628: LD_ADDR_VAR 0 7
23632: PUSH
23633: LD_VAR 0 5
23637: PUSH
23638: LD_VAR 0 4
23642: MINUS
23643: ST_TO_ADDR
// if y - r < 0 then
23644: LD_VAR 0 6
23648: PUSH
23649: LD_VAR 0 4
23653: MINUS
23654: PUSH
23655: LD_INT 0
23657: LESS
23658: IFFALSE 23670
// min_y := 0 else
23660: LD_ADDR_VAR 0 8
23664: PUSH
23665: LD_INT 0
23667: ST_TO_ADDR
23668: GO 23686
// min_y := y - r ;
23670: LD_ADDR_VAR 0 8
23674: PUSH
23675: LD_VAR 0 6
23679: PUSH
23680: LD_VAR 0 4
23684: MINUS
23685: ST_TO_ADDR
// max_x := x + r ;
23686: LD_ADDR_VAR 0 9
23690: PUSH
23691: LD_VAR 0 5
23695: PUSH
23696: LD_VAR 0 4
23700: PLUS
23701: ST_TO_ADDR
// max_y := y + r ;
23702: LD_ADDR_VAR 0 10
23706: PUSH
23707: LD_VAR 0 6
23711: PUSH
23712: LD_VAR 0 4
23716: PLUS
23717: ST_TO_ADDR
// for _x = min_x to max_x do
23718: LD_ADDR_VAR 0 11
23722: PUSH
23723: DOUBLE
23724: LD_VAR 0 7
23728: DEC
23729: ST_TO_ADDR
23730: LD_VAR 0 9
23734: PUSH
23735: FOR_TO
23736: IFFALSE 23818
// for _y = min_y to max_y do
23738: LD_ADDR_VAR 0 12
23742: PUSH
23743: DOUBLE
23744: LD_VAR 0 8
23748: DEC
23749: ST_TO_ADDR
23750: LD_VAR 0 10
23754: PUSH
23755: FOR_TO
23756: IFFALSE 23814
// begin if not ValidHex ( _x , _y ) then
23758: LD_VAR 0 11
23762: PPUSH
23763: LD_VAR 0 12
23767: PPUSH
23768: CALL_OW 488
23772: NOT
23773: IFFALSE 23777
// continue ;
23775: GO 23755
// if MineAtPos ( _x , _y ) then
23777: LD_VAR 0 11
23781: PPUSH
23782: LD_VAR 0 12
23786: PPUSH
23787: CALL_OW 458
23791: IFFALSE 23812
// ViewMineAtPos ( _x , _y , side ) ;
23793: LD_VAR 0 11
23797: PPUSH
23798: LD_VAR 0 12
23802: PPUSH
23803: LD_VAR 0 3
23807: PPUSH
23808: CALL_OW 457
// end ;
23812: GO 23755
23814: POP
23815: POP
23816: GO 23735
23818: POP
23819: POP
// end ;
23820: LD_VAR 0 2
23824: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
23825: LD_INT 0
23827: PPUSH
23828: PPUSH
23829: PPUSH
23830: PPUSH
23831: PPUSH
23832: PPUSH
// if not units then
23833: LD_VAR 0 1
23837: NOT
23838: IFFALSE 23842
// exit ;
23840: GO 24272
// scaners := [ ] ;
23842: LD_ADDR_VAR 0 6
23846: PUSH
23847: EMPTY
23848: ST_TO_ADDR
// for i in units do
23849: LD_ADDR_VAR 0 3
23853: PUSH
23854: LD_VAR 0 1
23858: PUSH
23859: FOR_IN
23860: IFFALSE 24017
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
23862: LD_VAR 0 3
23866: PPUSH
23867: CALL_OW 264
23871: PUSH
23872: LD_INT 11
23874: NONEQUAL
23875: IFTRUE 23889
23877: PUSH
23878: LD_VAR 0 3
23882: PPUSH
23883: CALL_OW 302
23887: NOT
23888: OR
23889: IFTRUE 23906
23891: PUSH
23892: LD_VAR 0 3
23896: PPUSH
23897: CALL_OW 110
23901: PUSH
23902: LD_INT 502
23904: EQUAL
23905: OR
23906: IFFALSE 23910
// continue ;
23908: GO 23859
// ComStop ( i ) ;
23910: LD_VAR 0 3
23914: PPUSH
23915: CALL_OW 141
// x := GetX ( i ) ;
23919: LD_ADDR_VAR 0 4
23923: PUSH
23924: LD_VAR 0 3
23928: PPUSH
23929: CALL_OW 250
23933: ST_TO_ADDR
// y := GetY ( i ) ;
23934: LD_ADDR_VAR 0 5
23938: PUSH
23939: LD_VAR 0 3
23943: PPUSH
23944: CALL_OW 251
23948: ST_TO_ADDR
// if GetSide ( i ) = your_side then
23949: LD_VAR 0 3
23953: PPUSH
23954: CALL_OW 255
23958: PUSH
23959: LD_OWVAR 2
23963: EQUAL
23964: IFFALSE 23983
// PlaySoundXY ( x , y , mineDetector ) ;
23966: LD_VAR 0 4
23970: PPUSH
23971: LD_VAR 0 5
23975: PPUSH
23976: LD_STRING mineDetector
23978: PPUSH
23979: CALL_OW 366
// scaners := Join ( scaners , i ) ;
23983: LD_ADDR_VAR 0 6
23987: PUSH
23988: LD_VAR 0 6
23992: PPUSH
23993: LD_VAR 0 3
23997: PPUSH
23998: CALL 62460 0 2
24002: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
24003: LD_VAR 0 3
24007: PPUSH
24008: LD_INT 502
24010: PPUSH
24011: CALL_OW 109
// end ;
24015: GO 23859
24017: POP
24018: POP
// if not scaners then
24019: LD_VAR 0 6
24023: NOT
24024: IFFALSE 24028
// exit ;
24026: GO 24272
// wait ( 3 ) ;
24028: LD_INT 3
24030: PPUSH
24031: CALL_OW 67
// timer := 6 ;
24035: LD_ADDR_VAR 0 7
24039: PUSH
24040: LD_INT 6
24042: ST_TO_ADDR
// repeat for i in scaners do
24043: LD_ADDR_VAR 0 3
24047: PUSH
24048: LD_VAR 0 6
24052: PUSH
24053: FOR_IN
24054: IFFALSE 24170
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
24056: LD_VAR 0 3
24060: PPUSH
24061: CALL_OW 302
24065: NOT
24066: IFTRUE 24079
24068: PUSH
24069: LD_VAR 0 3
24073: PPUSH
24074: CALL_OW 314
24078: OR
24079: IFTRUE 24110
24081: PUSH
24082: LD_VAR 0 3
24086: PPUSH
24087: CALL_OW 263
24091: PUSH
24092: LD_INT 1
24094: EQUAL
24095: IFFALSE 24109
24097: PUSH
24098: LD_VAR 0 3
24102: PPUSH
24103: CALL_OW 311
24107: NOT
24108: AND
24109: OR
24110: IFFALSE 24154
// begin SetUnitDisplayNumber ( i , 0 ) ;
24112: LD_VAR 0 3
24116: PPUSH
24117: LD_INT 0
24119: PPUSH
24120: CALL_OW 505
// SetTag ( i , 0 ) ;
24124: LD_VAR 0 3
24128: PPUSH
24129: LD_INT 0
24131: PPUSH
24132: CALL_OW 109
// scaners := scaners diff i ;
24136: LD_ADDR_VAR 0 6
24140: PUSH
24141: LD_VAR 0 6
24145: PUSH
24146: LD_VAR 0 3
24150: DIFF
24151: ST_TO_ADDR
// continue ;
24152: GO 24053
// end ; SetUnitDisplayNumber ( i , timer ) ;
24154: LD_VAR 0 3
24158: PPUSH
24159: LD_VAR 0 7
24163: PPUSH
24164: CALL_OW 505
// end ;
24168: GO 24053
24170: POP
24171: POP
// if not scaners then
24172: LD_VAR 0 6
24176: NOT
24177: IFFALSE 24181
// exit ;
24179: GO 24272
// timer := Dec ( timer ) ;
24181: LD_ADDR_VAR 0 7
24185: PUSH
24186: LD_VAR 0 7
24190: PPUSH
24191: CALL 63855 0 1
24195: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24196: LD_INT 35
24198: PPUSH
24199: CALL_OW 67
// until timer = 0 ;
24203: LD_VAR 0 7
24207: PUSH
24208: LD_INT 0
24210: EQUAL
24211: IFFALSE 24043
// if not scaners then
24213: LD_VAR 0 6
24217: NOT
24218: IFFALSE 24222
// exit ;
24220: GO 24272
// for i in scaners do
24222: LD_ADDR_VAR 0 3
24226: PUSH
24227: LD_VAR 0 6
24231: PUSH
24232: FOR_IN
24233: IFFALSE 24270
// begin SetUnitDisplayNumber ( i , 0 ) ;
24235: LD_VAR 0 3
24239: PPUSH
24240: LD_INT 0
24242: PPUSH
24243: CALL_OW 505
// SetTag ( i , 0 ) ;
24247: LD_VAR 0 3
24251: PPUSH
24252: LD_INT 0
24254: PPUSH
24255: CALL_OW 109
// RevealDetectorMine ( i ) ;
24259: LD_VAR 0 3
24263: PPUSH
24264: CALL 23527 0 1
// end ;
24268: GO 24232
24270: POP
24271: POP
// end ;
24272: LD_VAR 0 2
24276: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
24277: LD_INT 0
24279: PPUSH
// if p1 = mine_detector_mode then
24280: LD_VAR 0 2
24284: PUSH
24285: LD_INT 103
24287: EQUAL
24288: IFFALSE 24299
// DetectMine ( units ) ;
24290: LD_VAR 0 1
24294: PPUSH
24295: CALL 23825 0 1
// end ; end_of_file
24299: LD_VAR 0 7
24303: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24304: LD_INT 0
24306: PPUSH
24307: PPUSH
// if exist_mode then
24308: LD_VAR 0 2
24312: IFFALSE 24358
// begin unit := CreateCharacter ( prefix & ident ) ;
24314: LD_ADDR_VAR 0 5
24318: PUSH
24319: LD_VAR 0 3
24323: PUSH
24324: LD_VAR 0 1
24328: STR
24329: PPUSH
24330: CALL_OW 34
24334: ST_TO_ADDR
// if unit then
24335: LD_VAR 0 5
24339: IFFALSE 24356
// DeleteCharacters ( prefix & ident ) ;
24341: LD_VAR 0 3
24345: PUSH
24346: LD_VAR 0 1
24350: STR
24351: PPUSH
24352: CALL_OW 40
// end else
24356: GO 24373
// unit := NewCharacter ( ident ) ;
24358: LD_ADDR_VAR 0 5
24362: PUSH
24363: LD_VAR 0 1
24367: PPUSH
24368: CALL_OW 25
24372: ST_TO_ADDR
// result := unit ;
24373: LD_ADDR_VAR 0 4
24377: PUSH
24378: LD_VAR 0 5
24382: ST_TO_ADDR
// end ;
24383: LD_VAR 0 4
24387: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
24388: LD_INT 0
24390: PPUSH
24391: PPUSH
// if exist_mode then
24392: LD_VAR 0 2
24396: IFFALSE 24421
// unit := CreateCharacter ( prefix & ident ) else
24398: LD_ADDR_VAR 0 5
24402: PUSH
24403: LD_VAR 0 3
24407: PUSH
24408: LD_VAR 0 1
24412: STR
24413: PPUSH
24414: CALL_OW 34
24418: ST_TO_ADDR
24419: GO 24436
// unit := NewCharacter ( ident ) ;
24421: LD_ADDR_VAR 0 5
24425: PUSH
24426: LD_VAR 0 1
24430: PPUSH
24431: CALL_OW 25
24435: ST_TO_ADDR
// result := unit ;
24436: LD_ADDR_VAR 0 4
24440: PUSH
24441: LD_VAR 0 5
24445: ST_TO_ADDR
// end ;
24446: LD_VAR 0 4
24450: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24451: LD_INT 0
24453: PPUSH
24454: PPUSH
// if not side or not nation then
24455: LD_VAR 0 1
24459: NOT
24460: IFTRUE 24469
24462: PUSH
24463: LD_VAR 0 2
24467: NOT
24468: OR
24469: IFFALSE 24473
// exit ;
24471: GO 25267
// case nation of nation_american :
24473: LD_VAR 0 2
24477: PUSH
24478: LD_INT 1
24480: DOUBLE
24481: EQUAL
24482: IFTRUE 24486
24484: GO 24708
24486: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
24487: LD_ADDR_VAR 0 4
24491: PUSH
24492: LD_INT 35
24494: PUSH
24495: LD_INT 45
24497: PUSH
24498: LD_INT 46
24500: PUSH
24501: LD_INT 47
24503: PUSH
24504: LD_INT 82
24506: PUSH
24507: LD_INT 83
24509: PUSH
24510: LD_INT 84
24512: PUSH
24513: LD_INT 85
24515: PUSH
24516: LD_INT 86
24518: PUSH
24519: LD_INT 1
24521: PUSH
24522: LD_INT 2
24524: PUSH
24525: LD_INT 6
24527: PUSH
24528: LD_INT 15
24530: PUSH
24531: LD_INT 16
24533: PUSH
24534: LD_INT 7
24536: PUSH
24537: LD_INT 12
24539: PUSH
24540: LD_INT 13
24542: PUSH
24543: LD_INT 10
24545: PUSH
24546: LD_INT 14
24548: PUSH
24549: LD_INT 20
24551: PUSH
24552: LD_INT 21
24554: PUSH
24555: LD_INT 22
24557: PUSH
24558: LD_INT 25
24560: PUSH
24561: LD_INT 32
24563: PUSH
24564: LD_INT 27
24566: PUSH
24567: LD_INT 36
24569: PUSH
24570: LD_INT 69
24572: PUSH
24573: LD_INT 39
24575: PUSH
24576: LD_INT 34
24578: PUSH
24579: LD_INT 40
24581: PUSH
24582: LD_INT 48
24584: PUSH
24585: LD_INT 49
24587: PUSH
24588: LD_INT 50
24590: PUSH
24591: LD_INT 51
24593: PUSH
24594: LD_INT 52
24596: PUSH
24597: LD_INT 53
24599: PUSH
24600: LD_INT 54
24602: PUSH
24603: LD_INT 55
24605: PUSH
24606: LD_INT 56
24608: PUSH
24609: LD_INT 57
24611: PUSH
24612: LD_INT 58
24614: PUSH
24615: LD_INT 59
24617: PUSH
24618: LD_INT 60
24620: PUSH
24621: LD_INT 61
24623: PUSH
24624: LD_INT 62
24626: PUSH
24627: LD_INT 80
24629: PUSH
24630: LD_INT 82
24632: PUSH
24633: LD_INT 83
24635: PUSH
24636: LD_INT 84
24638: PUSH
24639: LD_INT 85
24641: PUSH
24642: LD_INT 86
24644: PUSH
24645: LD_INT 90
24647: PUSH
24648: LD_INT 93
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: ST_TO_ADDR
24706: GO 25189
24708: LD_INT 2
24710: DOUBLE
24711: EQUAL
24712: IFTRUE 24716
24714: GO 24950
24716: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
24717: LD_ADDR_VAR 0 4
24721: PUSH
24722: LD_INT 35
24724: PUSH
24725: LD_INT 45
24727: PUSH
24728: LD_INT 46
24730: PUSH
24731: LD_INT 47
24733: PUSH
24734: LD_INT 82
24736: PUSH
24737: LD_INT 83
24739: PUSH
24740: LD_INT 84
24742: PUSH
24743: LD_INT 85
24745: PUSH
24746: LD_INT 87
24748: PUSH
24749: LD_INT 70
24751: PUSH
24752: LD_INT 1
24754: PUSH
24755: LD_INT 11
24757: PUSH
24758: LD_INT 3
24760: PUSH
24761: LD_INT 4
24763: PUSH
24764: LD_INT 5
24766: PUSH
24767: LD_INT 6
24769: PUSH
24770: LD_INT 15
24772: PUSH
24773: LD_INT 18
24775: PUSH
24776: LD_INT 7
24778: PUSH
24779: LD_INT 17
24781: PUSH
24782: LD_INT 8
24784: PUSH
24785: LD_INT 20
24787: PUSH
24788: LD_INT 21
24790: PUSH
24791: LD_INT 22
24793: PUSH
24794: LD_INT 72
24796: PUSH
24797: LD_INT 26
24799: PUSH
24800: LD_INT 69
24802: PUSH
24803: LD_INT 39
24805: PUSH
24806: LD_INT 40
24808: PUSH
24809: LD_INT 41
24811: PUSH
24812: LD_INT 42
24814: PUSH
24815: LD_INT 43
24817: PUSH
24818: LD_INT 48
24820: PUSH
24821: LD_INT 49
24823: PUSH
24824: LD_INT 50
24826: PUSH
24827: LD_INT 51
24829: PUSH
24830: LD_INT 52
24832: PUSH
24833: LD_INT 53
24835: PUSH
24836: LD_INT 54
24838: PUSH
24839: LD_INT 55
24841: PUSH
24842: LD_INT 56
24844: PUSH
24845: LD_INT 60
24847: PUSH
24848: LD_INT 61
24850: PUSH
24851: LD_INT 62
24853: PUSH
24854: LD_INT 66
24856: PUSH
24857: LD_INT 67
24859: PUSH
24860: LD_INT 68
24862: PUSH
24863: LD_INT 81
24865: PUSH
24866: LD_INT 82
24868: PUSH
24869: LD_INT 83
24871: PUSH
24872: LD_INT 84
24874: PUSH
24875: LD_INT 85
24877: PUSH
24878: LD_INT 87
24880: PUSH
24881: LD_INT 88
24883: PUSH
24884: LD_INT 92
24886: PUSH
24887: LD_INT 94
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: ST_TO_ADDR
24948: GO 25189
24950: LD_INT 3
24952: DOUBLE
24953: EQUAL
24954: IFTRUE 24958
24956: GO 25188
24958: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
24959: LD_ADDR_VAR 0 4
24963: PUSH
24964: LD_INT 46
24966: PUSH
24967: LD_INT 47
24969: PUSH
24970: LD_INT 1
24972: PUSH
24973: LD_INT 2
24975: PUSH
24976: LD_INT 82
24978: PUSH
24979: LD_INT 83
24981: PUSH
24982: LD_INT 84
24984: PUSH
24985: LD_INT 85
24987: PUSH
24988: LD_INT 86
24990: PUSH
24991: LD_INT 11
24993: PUSH
24994: LD_INT 9
24996: PUSH
24997: LD_INT 20
24999: PUSH
25000: LD_INT 19
25002: PUSH
25003: LD_INT 21
25005: PUSH
25006: LD_INT 24
25008: PUSH
25009: LD_INT 22
25011: PUSH
25012: LD_INT 25
25014: PUSH
25015: LD_INT 28
25017: PUSH
25018: LD_INT 29
25020: PUSH
25021: LD_INT 30
25023: PUSH
25024: LD_INT 31
25026: PUSH
25027: LD_INT 37
25029: PUSH
25030: LD_INT 38
25032: PUSH
25033: LD_INT 32
25035: PUSH
25036: LD_INT 27
25038: PUSH
25039: LD_INT 33
25041: PUSH
25042: LD_INT 69
25044: PUSH
25045: LD_INT 39
25047: PUSH
25048: LD_INT 34
25050: PUSH
25051: LD_INT 40
25053: PUSH
25054: LD_INT 71
25056: PUSH
25057: LD_INT 23
25059: PUSH
25060: LD_INT 44
25062: PUSH
25063: LD_INT 48
25065: PUSH
25066: LD_INT 49
25068: PUSH
25069: LD_INT 50
25071: PUSH
25072: LD_INT 51
25074: PUSH
25075: LD_INT 52
25077: PUSH
25078: LD_INT 53
25080: PUSH
25081: LD_INT 54
25083: PUSH
25084: LD_INT 55
25086: PUSH
25087: LD_INT 56
25089: PUSH
25090: LD_INT 57
25092: PUSH
25093: LD_INT 58
25095: PUSH
25096: LD_INT 59
25098: PUSH
25099: LD_INT 63
25101: PUSH
25102: LD_INT 64
25104: PUSH
25105: LD_INT 65
25107: PUSH
25108: LD_INT 82
25110: PUSH
25111: LD_INT 83
25113: PUSH
25114: LD_INT 84
25116: PUSH
25117: LD_INT 85
25119: PUSH
25120: LD_INT 86
25122: PUSH
25123: LD_INT 89
25125: PUSH
25126: LD_INT 91
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: ST_TO_ADDR
25186: GO 25189
25188: POP
// if state > - 1 and state < 3 then
25189: LD_VAR 0 3
25193: PUSH
25194: LD_INT 1
25196: NEG
25197: GREATER
25198: IFFALSE 25210
25200: PUSH
25201: LD_VAR 0 3
25205: PUSH
25206: LD_INT 3
25208: LESS
25209: AND
25210: IFFALSE 25267
// for i in result do
25212: LD_ADDR_VAR 0 5
25216: PUSH
25217: LD_VAR 0 4
25221: PUSH
25222: FOR_IN
25223: IFFALSE 25265
// if GetTech ( i , side ) <> state then
25225: LD_VAR 0 5
25229: PPUSH
25230: LD_VAR 0 1
25234: PPUSH
25235: CALL_OW 321
25239: PUSH
25240: LD_VAR 0 3
25244: NONEQUAL
25245: IFFALSE 25263
// result := result diff i ;
25247: LD_ADDR_VAR 0 4
25251: PUSH
25252: LD_VAR 0 4
25256: PUSH
25257: LD_VAR 0 5
25261: DIFF
25262: ST_TO_ADDR
25263: GO 25222
25265: POP
25266: POP
// end ;
25267: LD_VAR 0 4
25271: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25272: LD_INT 0
25274: PPUSH
25275: PPUSH
25276: PPUSH
// result := true ;
25277: LD_ADDR_VAR 0 3
25281: PUSH
25282: LD_INT 1
25284: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25285: LD_ADDR_VAR 0 5
25289: PUSH
25290: LD_VAR 0 2
25294: PPUSH
25295: CALL_OW 480
25299: ST_TO_ADDR
// if not tmp then
25300: LD_VAR 0 5
25304: NOT
25305: IFFALSE 25309
// exit ;
25307: GO 25358
// for i in tmp do
25309: LD_ADDR_VAR 0 4
25313: PUSH
25314: LD_VAR 0 5
25318: PUSH
25319: FOR_IN
25320: IFFALSE 25356
// if GetTech ( i , side ) <> state_researched then
25322: LD_VAR 0 4
25326: PPUSH
25327: LD_VAR 0 1
25331: PPUSH
25332: CALL_OW 321
25336: PUSH
25337: LD_INT 2
25339: NONEQUAL
25340: IFFALSE 25354
// begin result := false ;
25342: LD_ADDR_VAR 0 3
25346: PUSH
25347: LD_INT 0
25349: ST_TO_ADDR
// exit ;
25350: POP
25351: POP
25352: GO 25358
// end ;
25354: GO 25319
25356: POP
25357: POP
// end ;
25358: LD_VAR 0 3
25362: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25363: LD_INT 0
25365: PPUSH
25366: PPUSH
25367: PPUSH
25368: PPUSH
25369: PPUSH
25370: PPUSH
25371: PPUSH
25372: PPUSH
25373: PPUSH
25374: PPUSH
25375: PPUSH
25376: PPUSH
25377: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25378: LD_VAR 0 1
25382: NOT
25383: IFTRUE 25400
25385: PUSH
25386: LD_VAR 0 1
25390: PPUSH
25391: CALL_OW 257
25395: PUSH
25396: LD_INT 9
25398: NONEQUAL
25399: OR
25400: IFFALSE 25404
// exit ;
25402: GO 25983
// side := GetSide ( unit ) ;
25404: LD_ADDR_VAR 0 9
25408: PUSH
25409: LD_VAR 0 1
25413: PPUSH
25414: CALL_OW 255
25418: ST_TO_ADDR
// tech_space := tech_spacanom ;
25419: LD_ADDR_VAR 0 12
25423: PUSH
25424: LD_INT 29
25426: ST_TO_ADDR
// tech_time := tech_taurad ;
25427: LD_ADDR_VAR 0 13
25431: PUSH
25432: LD_INT 28
25434: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25435: LD_ADDR_VAR 0 11
25439: PUSH
25440: LD_VAR 0 1
25444: PPUSH
25445: CALL_OW 310
25449: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25450: LD_VAR 0 11
25454: PPUSH
25455: CALL_OW 247
25459: PUSH
25460: LD_INT 2
25462: EQUAL
25463: IFFALSE 25467
// exit ;
25465: GO 25983
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25467: LD_ADDR_VAR 0 8
25471: PUSH
25472: LD_INT 81
25474: PUSH
25475: LD_VAR 0 9
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 3
25486: PUSH
25487: LD_INT 21
25489: PUSH
25490: LD_INT 3
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PPUSH
25505: CALL_OW 69
25509: ST_TO_ADDR
// if not tmp then
25510: LD_VAR 0 8
25514: NOT
25515: IFFALSE 25519
// exit ;
25517: GO 25983
// if in_unit then
25519: LD_VAR 0 11
25523: IFFALSE 25547
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25525: LD_ADDR_VAR 0 10
25529: PUSH
25530: LD_VAR 0 8
25534: PPUSH
25535: LD_VAR 0 11
25539: PPUSH
25540: CALL_OW 74
25544: ST_TO_ADDR
25545: GO 25567
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25547: LD_ADDR_VAR 0 10
25551: PUSH
25552: LD_VAR 0 8
25556: PPUSH
25557: LD_VAR 0 1
25561: PPUSH
25562: CALL_OW 74
25566: ST_TO_ADDR
// if not enemy then
25567: LD_VAR 0 10
25571: NOT
25572: IFFALSE 25576
// exit ;
25574: GO 25983
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25576: LD_VAR 0 11
25580: IFFALSE 25602
25582: PUSH
25583: LD_VAR 0 11
25587: PPUSH
25588: LD_VAR 0 10
25592: PPUSH
25593: CALL_OW 296
25597: PUSH
25598: LD_INT 13
25600: GREATER
25601: AND
25602: IFTRUE 25624
25604: PUSH
25605: LD_VAR 0 1
25609: PPUSH
25610: LD_VAR 0 10
25614: PPUSH
25615: CALL_OW 296
25619: PUSH
25620: LD_INT 12
25622: GREATER
25623: OR
25624: IFFALSE 25628
// exit ;
25626: GO 25983
// missile := [ 1 ] ;
25628: LD_ADDR_VAR 0 14
25632: PUSH
25633: LD_INT 1
25635: PUSH
25636: EMPTY
25637: LIST
25638: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25639: LD_VAR 0 9
25643: PPUSH
25644: LD_VAR 0 12
25648: PPUSH
25649: CALL_OW 325
25653: IFFALSE 25682
// missile := Replace ( missile , missile + 1 , 2 ) ;
25655: LD_ADDR_VAR 0 14
25659: PUSH
25660: LD_VAR 0 14
25664: PPUSH
25665: LD_VAR 0 14
25669: PUSH
25670: LD_INT 1
25672: PLUS
25673: PPUSH
25674: LD_INT 2
25676: PPUSH
25677: CALL_OW 1
25681: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25682: LD_VAR 0 9
25686: PPUSH
25687: LD_VAR 0 13
25691: PPUSH
25692: CALL_OW 325
25696: IFFALSE 25720
25698: PUSH
25699: LD_VAR 0 10
25703: PPUSH
25704: CALL_OW 255
25708: PPUSH
25709: LD_VAR 0 13
25713: PPUSH
25714: CALL_OW 325
25718: NOT
25719: AND
25720: IFFALSE 25749
// missile := Replace ( missile , missile + 1 , 3 ) ;
25722: LD_ADDR_VAR 0 14
25726: PUSH
25727: LD_VAR 0 14
25731: PPUSH
25732: LD_VAR 0 14
25736: PUSH
25737: LD_INT 1
25739: PLUS
25740: PPUSH
25741: LD_INT 3
25743: PPUSH
25744: CALL_OW 1
25748: ST_TO_ADDR
// if missile < 2 then
25749: LD_VAR 0 14
25753: PUSH
25754: LD_INT 2
25756: LESS
25757: IFFALSE 25761
// exit ;
25759: GO 25983
// x := GetX ( enemy ) ;
25761: LD_ADDR_VAR 0 4
25765: PUSH
25766: LD_VAR 0 10
25770: PPUSH
25771: CALL_OW 250
25775: ST_TO_ADDR
// y := GetY ( enemy ) ;
25776: LD_ADDR_VAR 0 5
25780: PUSH
25781: LD_VAR 0 10
25785: PPUSH
25786: CALL_OW 251
25790: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25791: LD_ADDR_VAR 0 6
25795: PUSH
25796: LD_VAR 0 4
25800: PUSH
25801: LD_INT 1
25803: NEG
25804: PPUSH
25805: LD_INT 1
25807: PPUSH
25808: CALL_OW 12
25812: PLUS
25813: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25814: LD_ADDR_VAR 0 7
25818: PUSH
25819: LD_VAR 0 5
25823: PUSH
25824: LD_INT 1
25826: NEG
25827: PPUSH
25828: LD_INT 1
25830: PPUSH
25831: CALL_OW 12
25835: PLUS
25836: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25837: LD_VAR 0 6
25841: PPUSH
25842: LD_VAR 0 7
25846: PPUSH
25847: CALL_OW 488
25851: NOT
25852: IFFALSE 25874
// begin _x := x ;
25854: LD_ADDR_VAR 0 6
25858: PUSH
25859: LD_VAR 0 4
25863: ST_TO_ADDR
// _y := y ;
25864: LD_ADDR_VAR 0 7
25868: PUSH
25869: LD_VAR 0 5
25873: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25874: LD_ADDR_VAR 0 3
25878: PUSH
25879: LD_INT 1
25881: PPUSH
25882: LD_VAR 0 14
25886: PPUSH
25887: CALL_OW 12
25891: ST_TO_ADDR
// case i of 1 :
25892: LD_VAR 0 3
25896: PUSH
25897: LD_INT 1
25899: DOUBLE
25900: EQUAL
25901: IFTRUE 25905
25903: GO 25922
25905: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25906: LD_VAR 0 1
25910: PPUSH
25911: LD_VAR 0 10
25915: PPUSH
25916: CALL_OW 115
25920: GO 25983
25922: LD_INT 2
25924: DOUBLE
25925: EQUAL
25926: IFTRUE 25930
25928: GO 25952
25930: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25931: LD_VAR 0 1
25935: PPUSH
25936: LD_VAR 0 6
25940: PPUSH
25941: LD_VAR 0 7
25945: PPUSH
25946: CALL_OW 153
25950: GO 25983
25952: LD_INT 3
25954: DOUBLE
25955: EQUAL
25956: IFTRUE 25960
25958: GO 25982
25960: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25961: LD_VAR 0 1
25965: PPUSH
25966: LD_VAR 0 6
25970: PPUSH
25971: LD_VAR 0 7
25975: PPUSH
25976: CALL_OW 154
25980: GO 25983
25982: POP
// end ;
25983: LD_VAR 0 2
25987: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25988: LD_INT 0
25990: PPUSH
25991: PPUSH
25992: PPUSH
25993: PPUSH
25994: PPUSH
25995: PPUSH
// if not unit or not building then
25996: LD_VAR 0 1
26000: NOT
26001: IFTRUE 26010
26003: PUSH
26004: LD_VAR 0 2
26008: NOT
26009: OR
26010: IFFALSE 26014
// exit ;
26012: GO 26172
// x := GetX ( building ) ;
26014: LD_ADDR_VAR 0 5
26018: PUSH
26019: LD_VAR 0 2
26023: PPUSH
26024: CALL_OW 250
26028: ST_TO_ADDR
// y := GetY ( building ) ;
26029: LD_ADDR_VAR 0 6
26033: PUSH
26034: LD_VAR 0 2
26038: PPUSH
26039: CALL_OW 251
26043: ST_TO_ADDR
// for i := 0 to 5 do
26044: LD_ADDR_VAR 0 4
26048: PUSH
26049: DOUBLE
26050: LD_INT 0
26052: DEC
26053: ST_TO_ADDR
26054: LD_INT 5
26056: PUSH
26057: FOR_TO
26058: IFFALSE 26170
// begin _x := ShiftX ( x , i , 3 ) ;
26060: LD_ADDR_VAR 0 7
26064: PUSH
26065: LD_VAR 0 5
26069: PPUSH
26070: LD_VAR 0 4
26074: PPUSH
26075: LD_INT 3
26077: PPUSH
26078: CALL_OW 272
26082: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26083: LD_ADDR_VAR 0 8
26087: PUSH
26088: LD_VAR 0 6
26092: PPUSH
26093: LD_VAR 0 4
26097: PPUSH
26098: LD_INT 3
26100: PPUSH
26101: CALL_OW 273
26105: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26106: LD_VAR 0 7
26110: PPUSH
26111: LD_VAR 0 8
26115: PPUSH
26116: CALL_OW 488
26120: NOT
26121: IFFALSE 26125
// continue ;
26123: GO 26057
// if HexInfo ( _x , _y ) = 0 then
26125: LD_VAR 0 7
26129: PPUSH
26130: LD_VAR 0 8
26134: PPUSH
26135: CALL_OW 428
26139: PUSH
26140: LD_INT 0
26142: EQUAL
26143: IFFALSE 26168
// begin ComMoveXY ( unit , _x , _y ) ;
26145: LD_VAR 0 1
26149: PPUSH
26150: LD_VAR 0 7
26154: PPUSH
26155: LD_VAR 0 8
26159: PPUSH
26160: CALL_OW 111
// exit ;
26164: POP
26165: POP
26166: GO 26172
// end ; end ;
26168: GO 26057
26170: POP
26171: POP
// end ;
26172: LD_VAR 0 3
26176: RET
// export function ScanBase ( side , base_area ) ; begin
26177: LD_INT 0
26179: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26180: LD_ADDR_VAR 0 3
26184: PUSH
26185: LD_VAR 0 2
26189: PPUSH
26190: LD_INT 81
26192: PUSH
26193: LD_VAR 0 1
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PPUSH
26202: CALL_OW 70
26206: ST_TO_ADDR
// end ;
26207: LD_VAR 0 3
26211: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26212: LD_INT 0
26214: PPUSH
26215: PPUSH
26216: PPUSH
26217: PPUSH
// result := false ;
26218: LD_ADDR_VAR 0 2
26222: PUSH
26223: LD_INT 0
26225: ST_TO_ADDR
// side := GetSide ( unit ) ;
26226: LD_ADDR_VAR 0 3
26230: PUSH
26231: LD_VAR 0 1
26235: PPUSH
26236: CALL_OW 255
26240: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26241: LD_ADDR_VAR 0 4
26245: PUSH
26246: LD_VAR 0 1
26250: PPUSH
26251: CALL_OW 248
26255: ST_TO_ADDR
// case nat of 1 :
26256: LD_VAR 0 4
26260: PUSH
26261: LD_INT 1
26263: DOUBLE
26264: EQUAL
26265: IFTRUE 26269
26267: GO 26280
26269: POP
// tech := tech_lassight ; 2 :
26270: LD_ADDR_VAR 0 5
26274: PUSH
26275: LD_INT 12
26277: ST_TO_ADDR
26278: GO 26319
26280: LD_INT 2
26282: DOUBLE
26283: EQUAL
26284: IFTRUE 26288
26286: GO 26299
26288: POP
// tech := tech_mortar ; 3 :
26289: LD_ADDR_VAR 0 5
26293: PUSH
26294: LD_INT 41
26296: ST_TO_ADDR
26297: GO 26319
26299: LD_INT 3
26301: DOUBLE
26302: EQUAL
26303: IFTRUE 26307
26305: GO 26318
26307: POP
// tech := tech_bazooka ; end ;
26308: LD_ADDR_VAR 0 5
26312: PUSH
26313: LD_INT 44
26315: ST_TO_ADDR
26316: GO 26319
26318: POP
// if Researched ( side , tech ) then
26319: LD_VAR 0 3
26323: PPUSH
26324: LD_VAR 0 5
26328: PPUSH
26329: CALL_OW 325
26333: IFFALSE 26360
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26335: LD_ADDR_VAR 0 2
26339: PUSH
26340: LD_INT 5
26342: PUSH
26343: LD_INT 8
26345: PUSH
26346: LD_INT 9
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: LIST
26353: PUSH
26354: LD_VAR 0 4
26358: ARRAY
26359: ST_TO_ADDR
// end ;
26360: LD_VAR 0 2
26364: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26365: LD_INT 0
26367: PPUSH
26368: PPUSH
26369: PPUSH
// if not mines then
26370: LD_VAR 0 2
26374: NOT
26375: IFFALSE 26379
// exit ;
26377: GO 26523
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26379: LD_ADDR_VAR 0 5
26383: PUSH
26384: LD_INT 81
26386: PUSH
26387: LD_VAR 0 1
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 3
26398: PUSH
26399: LD_INT 21
26401: PUSH
26402: LD_INT 3
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PPUSH
26417: CALL_OW 69
26421: ST_TO_ADDR
// for i in mines do
26422: LD_ADDR_VAR 0 4
26426: PUSH
26427: LD_VAR 0 2
26431: PUSH
26432: FOR_IN
26433: IFFALSE 26521
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26435: LD_VAR 0 4
26439: PUSH
26440: LD_INT 1
26442: ARRAY
26443: PPUSH
26444: LD_VAR 0 4
26448: PUSH
26449: LD_INT 2
26451: ARRAY
26452: PPUSH
26453: CALL_OW 458
26457: NOT
26458: IFFALSE 26462
// continue ;
26460: GO 26432
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26462: LD_VAR 0 4
26466: PUSH
26467: LD_INT 1
26469: ARRAY
26470: PPUSH
26471: LD_VAR 0 4
26475: PUSH
26476: LD_INT 2
26478: ARRAY
26479: PPUSH
26480: CALL_OW 428
26484: PUSH
26485: LD_VAR 0 5
26489: IN
26490: IFFALSE 26519
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26492: LD_VAR 0 4
26496: PUSH
26497: LD_INT 1
26499: ARRAY
26500: PPUSH
26501: LD_VAR 0 4
26505: PUSH
26506: LD_INT 2
26508: ARRAY
26509: PPUSH
26510: LD_VAR 0 1
26514: PPUSH
26515: CALL_OW 456
// end ;
26519: GO 26432
26521: POP
26522: POP
// end ;
26523: LD_VAR 0 3
26527: RET
// export function Count ( array ) ; begin
26528: LD_INT 0
26530: PPUSH
// result := array + 0 ;
26531: LD_ADDR_VAR 0 2
26535: PUSH
26536: LD_VAR 0 1
26540: PUSH
26541: LD_INT 0
26543: PLUS
26544: ST_TO_ADDR
// end ;
26545: LD_VAR 0 2
26549: RET
// export function IsEmpty ( building ) ; begin
26550: LD_INT 0
26552: PPUSH
// if not building then
26553: LD_VAR 0 1
26557: NOT
26558: IFFALSE 26562
// exit ;
26560: GO 26605
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26562: LD_ADDR_VAR 0 2
26566: PUSH
26567: LD_VAR 0 1
26571: PUSH
26572: LD_INT 22
26574: PUSH
26575: LD_VAR 0 1
26579: PPUSH
26580: CALL_OW 255
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 58
26591: PUSH
26592: EMPTY
26593: LIST
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PPUSH
26599: CALL_OW 69
26603: IN
26604: ST_TO_ADDR
// end ;
26605: LD_VAR 0 2
26609: RET
// export function IsNotFull ( building ) ; var places ; begin
26610: LD_INT 0
26612: PPUSH
26613: PPUSH
// if not building then
26614: LD_VAR 0 1
26618: NOT
26619: IFFALSE 26623
// exit ;
26621: GO 26651
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
26623: LD_ADDR_VAR 0 2
26627: PUSH
26628: LD_VAR 0 1
26632: PPUSH
26633: LD_INT 3
26635: PUSH
26636: LD_INT 62
26638: PUSH
26639: EMPTY
26640: LIST
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PPUSH
26646: CALL_OW 72
26650: ST_TO_ADDR
// end ;
26651: LD_VAR 0 2
26655: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26656: LD_INT 0
26658: PPUSH
26659: PPUSH
26660: PPUSH
26661: PPUSH
// tmp := [ ] ;
26662: LD_ADDR_VAR 0 3
26666: PUSH
26667: EMPTY
26668: ST_TO_ADDR
// list := [ ] ;
26669: LD_ADDR_VAR 0 5
26673: PUSH
26674: EMPTY
26675: ST_TO_ADDR
// for i = 16 to 25 do
26676: LD_ADDR_VAR 0 4
26680: PUSH
26681: DOUBLE
26682: LD_INT 16
26684: DEC
26685: ST_TO_ADDR
26686: LD_INT 25
26688: PUSH
26689: FOR_TO
26690: IFFALSE 26763
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26692: LD_ADDR_VAR 0 3
26696: PUSH
26697: LD_VAR 0 3
26701: PUSH
26702: LD_INT 22
26704: PUSH
26705: LD_VAR 0 1
26709: PPUSH
26710: CALL_OW 255
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 91
26721: PUSH
26722: LD_VAR 0 1
26726: PUSH
26727: LD_INT 6
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: LIST
26734: PUSH
26735: LD_INT 30
26737: PUSH
26738: LD_VAR 0 4
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: LIST
26751: PUSH
26752: EMPTY
26753: LIST
26754: PPUSH
26755: CALL_OW 69
26759: ADD
26760: ST_TO_ADDR
26761: GO 26689
26763: POP
26764: POP
// for i = 1 to tmp do
26765: LD_ADDR_VAR 0 4
26769: PUSH
26770: DOUBLE
26771: LD_INT 1
26773: DEC
26774: ST_TO_ADDR
26775: LD_VAR 0 3
26779: PUSH
26780: FOR_TO
26781: IFFALSE 26869
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26783: LD_ADDR_VAR 0 5
26787: PUSH
26788: LD_VAR 0 5
26792: PUSH
26793: LD_VAR 0 3
26797: PUSH
26798: LD_VAR 0 4
26802: ARRAY
26803: PPUSH
26804: CALL_OW 266
26808: PUSH
26809: LD_VAR 0 3
26813: PUSH
26814: LD_VAR 0 4
26818: ARRAY
26819: PPUSH
26820: CALL_OW 250
26824: PUSH
26825: LD_VAR 0 3
26829: PUSH
26830: LD_VAR 0 4
26834: ARRAY
26835: PPUSH
26836: CALL_OW 251
26840: PUSH
26841: LD_VAR 0 3
26845: PUSH
26846: LD_VAR 0 4
26850: ARRAY
26851: PPUSH
26852: CALL_OW 254
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: PUSH
26863: EMPTY
26864: LIST
26865: ADD
26866: ST_TO_ADDR
26867: GO 26780
26869: POP
26870: POP
// result := list ;
26871: LD_ADDR_VAR 0 2
26875: PUSH
26876: LD_VAR 0 5
26880: ST_TO_ADDR
// end ;
26881: LD_VAR 0 2
26885: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26886: LD_INT 0
26888: PPUSH
26889: PPUSH
26890: PPUSH
26891: PPUSH
26892: PPUSH
26893: PPUSH
26894: PPUSH
// if not factory then
26895: LD_VAR 0 1
26899: NOT
26900: IFFALSE 26904
// exit ;
26902: GO 27507
// if control = control_apeman then
26904: LD_VAR 0 4
26908: PUSH
26909: LD_INT 5
26911: EQUAL
26912: IFFALSE 27021
// begin tmp := UnitsInside ( factory ) ;
26914: LD_ADDR_VAR 0 8
26918: PUSH
26919: LD_VAR 0 1
26923: PPUSH
26924: CALL_OW 313
26928: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26929: LD_VAR 0 8
26933: PPUSH
26934: LD_INT 25
26936: PUSH
26937: LD_INT 12
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PPUSH
26944: CALL_OW 72
26948: NOT
26949: IFFALSE 26959
// control := control_manual ;
26951: LD_ADDR_VAR 0 4
26955: PUSH
26956: LD_INT 1
26958: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26959: LD_ADDR_VAR 0 8
26963: PUSH
26964: LD_VAR 0 1
26968: PPUSH
26969: CALL 26656 0 1
26973: ST_TO_ADDR
// if tmp then
26974: LD_VAR 0 8
26978: IFFALSE 27021
// begin for i in tmp do
26980: LD_ADDR_VAR 0 7
26984: PUSH
26985: LD_VAR 0 8
26989: PUSH
26990: FOR_IN
26991: IFFALSE 27019
// if i [ 1 ] = b_ext_radio then
26993: LD_VAR 0 7
26997: PUSH
26998: LD_INT 1
27000: ARRAY
27001: PUSH
27002: LD_INT 22
27004: EQUAL
27005: IFFALSE 27017
// begin control := control_remote ;
27007: LD_ADDR_VAR 0 4
27011: PUSH
27012: LD_INT 2
27014: ST_TO_ADDR
// break ;
27015: GO 27019
// end ;
27017: GO 26990
27019: POP
27020: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27021: LD_VAR 0 1
27025: PPUSH
27026: LD_VAR 0 2
27030: PPUSH
27031: LD_VAR 0 3
27035: PPUSH
27036: LD_VAR 0 4
27040: PPUSH
27041: LD_VAR 0 5
27045: PPUSH
27046: CALL_OW 448
27050: IFFALSE 27085
// begin result := [ chassis , engine , control , weapon ] ;
27052: LD_ADDR_VAR 0 6
27056: PUSH
27057: LD_VAR 0 2
27061: PUSH
27062: LD_VAR 0 3
27066: PUSH
27067: LD_VAR 0 4
27071: PUSH
27072: LD_VAR 0 5
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: ST_TO_ADDR
// exit ;
27083: GO 27507
// end ; _chassis := AvailableChassisList ( factory ) ;
27085: LD_ADDR_VAR 0 9
27089: PUSH
27090: LD_VAR 0 1
27094: PPUSH
27095: CALL_OW 475
27099: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27100: LD_ADDR_VAR 0 11
27104: PUSH
27105: LD_VAR 0 1
27109: PPUSH
27110: CALL_OW 476
27114: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27115: LD_ADDR_VAR 0 12
27119: PUSH
27120: LD_VAR 0 1
27124: PPUSH
27125: CALL_OW 477
27129: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27130: LD_ADDR_VAR 0 10
27134: PUSH
27135: LD_VAR 0 1
27139: PPUSH
27140: CALL_OW 478
27144: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27145: LD_VAR 0 9
27149: NOT
27150: IFTRUE 27159
27152: PUSH
27153: LD_VAR 0 11
27157: NOT
27158: OR
27159: IFTRUE 27168
27161: PUSH
27162: LD_VAR 0 12
27166: NOT
27167: OR
27168: IFTRUE 27177
27170: PUSH
27171: LD_VAR 0 10
27175: NOT
27176: OR
27177: IFFALSE 27212
// begin result := [ chassis , engine , control , weapon ] ;
27179: LD_ADDR_VAR 0 6
27183: PUSH
27184: LD_VAR 0 2
27188: PUSH
27189: LD_VAR 0 3
27193: PUSH
27194: LD_VAR 0 4
27198: PUSH
27199: LD_VAR 0 5
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: ST_TO_ADDR
// exit ;
27210: GO 27507
// end ; if not chassis in _chassis then
27212: LD_VAR 0 2
27216: PUSH
27217: LD_VAR 0 9
27221: IN
27222: NOT
27223: IFFALSE 27249
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27225: LD_ADDR_VAR 0 2
27229: PUSH
27230: LD_VAR 0 9
27234: PUSH
27235: LD_INT 1
27237: PPUSH
27238: LD_VAR 0 9
27242: PPUSH
27243: CALL_OW 12
27247: ARRAY
27248: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27249: LD_VAR 0 2
27253: PPUSH
27254: LD_VAR 0 3
27258: PPUSH
27259: CALL 27512 0 2
27263: NOT
27264: IFFALSE 27325
// repeat engine := _engine [ 1 ] ;
27266: LD_ADDR_VAR 0 3
27270: PUSH
27271: LD_VAR 0 11
27275: PUSH
27276: LD_INT 1
27278: ARRAY
27279: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27280: LD_ADDR_VAR 0 11
27284: PUSH
27285: LD_VAR 0 11
27289: PPUSH
27290: LD_INT 1
27292: PPUSH
27293: CALL_OW 3
27297: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27298: LD_VAR 0 2
27302: PPUSH
27303: LD_VAR 0 3
27307: PPUSH
27308: CALL 27512 0 2
27312: IFTRUE 27323
27314: PUSH
27315: LD_VAR 0 11
27319: PUSH
27320: EMPTY
27321: EQUAL
27322: OR
27323: IFFALSE 27266
// if not control in _control then
27325: LD_VAR 0 4
27329: PUSH
27330: LD_VAR 0 12
27334: IN
27335: NOT
27336: IFFALSE 27362
// control := _control [ rand ( 1 , _control ) ] ;
27338: LD_ADDR_VAR 0 4
27342: PUSH
27343: LD_VAR 0 12
27347: PUSH
27348: LD_INT 1
27350: PPUSH
27351: LD_VAR 0 12
27355: PPUSH
27356: CALL_OW 12
27360: ARRAY
27361: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27362: LD_VAR 0 2
27366: PPUSH
27367: LD_VAR 0 5
27371: PPUSH
27372: CALL 27734 0 2
27376: NOT
27377: IFFALSE 27438
// repeat weapon := _weapon [ 1 ] ;
27379: LD_ADDR_VAR 0 5
27383: PUSH
27384: LD_VAR 0 10
27388: PUSH
27389: LD_INT 1
27391: ARRAY
27392: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27393: LD_ADDR_VAR 0 10
27397: PUSH
27398: LD_VAR 0 10
27402: PPUSH
27403: LD_INT 1
27405: PPUSH
27406: CALL_OW 3
27410: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27411: LD_VAR 0 2
27415: PPUSH
27416: LD_VAR 0 5
27420: PPUSH
27421: CALL 27734 0 2
27425: IFTRUE 27436
27427: PUSH
27428: LD_VAR 0 10
27432: PUSH
27433: EMPTY
27434: EQUAL
27435: OR
27436: IFFALSE 27379
// result := [ ] ;
27438: LD_ADDR_VAR 0 6
27442: PUSH
27443: EMPTY
27444: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27445: LD_VAR 0 1
27449: PPUSH
27450: LD_VAR 0 2
27454: PPUSH
27455: LD_VAR 0 3
27459: PPUSH
27460: LD_VAR 0 4
27464: PPUSH
27465: LD_VAR 0 5
27469: PPUSH
27470: CALL_OW 448
27474: IFFALSE 27507
// result := [ chassis , engine , control , weapon ] ;
27476: LD_ADDR_VAR 0 6
27480: PUSH
27481: LD_VAR 0 2
27485: PUSH
27486: LD_VAR 0 3
27490: PUSH
27491: LD_VAR 0 4
27495: PUSH
27496: LD_VAR 0 5
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: ST_TO_ADDR
// end ;
27507: LD_VAR 0 6
27511: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27512: LD_INT 0
27514: PPUSH
// if not chassis or not engine then
27515: LD_VAR 0 1
27519: NOT
27520: IFTRUE 27529
27522: PUSH
27523: LD_VAR 0 2
27527: NOT
27528: OR
27529: IFFALSE 27533
// exit ;
27531: GO 27729
// case engine of engine_solar :
27533: LD_VAR 0 2
27537: PUSH
27538: LD_INT 2
27540: DOUBLE
27541: EQUAL
27542: IFTRUE 27546
27544: GO 27584
27546: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27547: LD_ADDR_VAR 0 3
27551: PUSH
27552: LD_INT 11
27554: PUSH
27555: LD_INT 12
27557: PUSH
27558: LD_INT 13
27560: PUSH
27561: LD_INT 14
27563: PUSH
27564: LD_INT 1
27566: PUSH
27567: LD_INT 2
27569: PUSH
27570: LD_INT 3
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: ST_TO_ADDR
27582: GO 27713
27584: LD_INT 1
27586: DOUBLE
27587: EQUAL
27588: IFTRUE 27592
27590: GO 27654
27592: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27593: LD_ADDR_VAR 0 3
27597: PUSH
27598: LD_INT 11
27600: PUSH
27601: LD_INT 12
27603: PUSH
27604: LD_INT 13
27606: PUSH
27607: LD_INT 14
27609: PUSH
27610: LD_INT 1
27612: PUSH
27613: LD_INT 2
27615: PUSH
27616: LD_INT 3
27618: PUSH
27619: LD_INT 4
27621: PUSH
27622: LD_INT 5
27624: PUSH
27625: LD_INT 21
27627: PUSH
27628: LD_INT 23
27630: PUSH
27631: LD_INT 22
27633: PUSH
27634: LD_INT 24
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: ST_TO_ADDR
27652: GO 27713
27654: LD_INT 3
27656: DOUBLE
27657: EQUAL
27658: IFTRUE 27662
27660: GO 27712
27662: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27663: LD_ADDR_VAR 0 3
27667: PUSH
27668: LD_INT 13
27670: PUSH
27671: LD_INT 14
27673: PUSH
27674: LD_INT 2
27676: PUSH
27677: LD_INT 3
27679: PUSH
27680: LD_INT 4
27682: PUSH
27683: LD_INT 5
27685: PUSH
27686: LD_INT 21
27688: PUSH
27689: LD_INT 22
27691: PUSH
27692: LD_INT 23
27694: PUSH
27695: LD_INT 24
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: ST_TO_ADDR
27710: GO 27713
27712: POP
// result := ( chassis in result ) ;
27713: LD_ADDR_VAR 0 3
27717: PUSH
27718: LD_VAR 0 1
27722: PUSH
27723: LD_VAR 0 3
27727: IN
27728: ST_TO_ADDR
// end ;
27729: LD_VAR 0 3
27733: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27734: LD_INT 0
27736: PPUSH
// if not chassis or not weapon then
27737: LD_VAR 0 1
27741: NOT
27742: IFTRUE 27751
27744: PUSH
27745: LD_VAR 0 2
27749: NOT
27750: OR
27751: IFFALSE 27755
// exit ;
27753: GO 28815
// case weapon of us_machine_gun :
27755: LD_VAR 0 2
27759: PUSH
27760: LD_INT 2
27762: DOUBLE
27763: EQUAL
27764: IFTRUE 27768
27766: GO 27798
27768: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27769: LD_ADDR_VAR 0 3
27773: PUSH
27774: LD_INT 1
27776: PUSH
27777: LD_INT 2
27779: PUSH
27780: LD_INT 3
27782: PUSH
27783: LD_INT 4
27785: PUSH
27786: LD_INT 5
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: ST_TO_ADDR
27796: GO 28799
27798: LD_INT 3
27800: DOUBLE
27801: EQUAL
27802: IFTRUE 27806
27804: GO 27836
27806: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27807: LD_ADDR_VAR 0 3
27811: PUSH
27812: LD_INT 1
27814: PUSH
27815: LD_INT 2
27817: PUSH
27818: LD_INT 3
27820: PUSH
27821: LD_INT 4
27823: PUSH
27824: LD_INT 5
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: ST_TO_ADDR
27834: GO 28799
27836: LD_INT 11
27838: DOUBLE
27839: EQUAL
27840: IFTRUE 27844
27842: GO 27874
27844: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27845: LD_ADDR_VAR 0 3
27849: PUSH
27850: LD_INT 1
27852: PUSH
27853: LD_INT 2
27855: PUSH
27856: LD_INT 3
27858: PUSH
27859: LD_INT 4
27861: PUSH
27862: LD_INT 5
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: ST_TO_ADDR
27872: GO 28799
27874: LD_INT 4
27876: DOUBLE
27877: EQUAL
27878: IFTRUE 27882
27880: GO 27908
27882: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27883: LD_ADDR_VAR 0 3
27887: PUSH
27888: LD_INT 2
27890: PUSH
27891: LD_INT 3
27893: PUSH
27894: LD_INT 4
27896: PUSH
27897: LD_INT 5
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: ST_TO_ADDR
27906: GO 28799
27908: LD_INT 5
27910: DOUBLE
27911: EQUAL
27912: IFTRUE 27916
27914: GO 27942
27916: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27917: LD_ADDR_VAR 0 3
27921: PUSH
27922: LD_INT 2
27924: PUSH
27925: LD_INT 3
27927: PUSH
27928: LD_INT 4
27930: PUSH
27931: LD_INT 5
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: ST_TO_ADDR
27940: GO 28799
27942: LD_INT 9
27944: DOUBLE
27945: EQUAL
27946: IFTRUE 27950
27948: GO 27976
27950: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27951: LD_ADDR_VAR 0 3
27955: PUSH
27956: LD_INT 2
27958: PUSH
27959: LD_INT 3
27961: PUSH
27962: LD_INT 4
27964: PUSH
27965: LD_INT 5
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: ST_TO_ADDR
27974: GO 28799
27976: LD_INT 7
27978: DOUBLE
27979: EQUAL
27980: IFTRUE 27984
27982: GO 28010
27984: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27985: LD_ADDR_VAR 0 3
27989: PUSH
27990: LD_INT 2
27992: PUSH
27993: LD_INT 3
27995: PUSH
27996: LD_INT 4
27998: PUSH
27999: LD_INT 5
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: ST_TO_ADDR
28008: GO 28799
28010: LD_INT 12
28012: DOUBLE
28013: EQUAL
28014: IFTRUE 28018
28016: GO 28044
28018: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28019: LD_ADDR_VAR 0 3
28023: PUSH
28024: LD_INT 2
28026: PUSH
28027: LD_INT 3
28029: PUSH
28030: LD_INT 4
28032: PUSH
28033: LD_INT 5
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: ST_TO_ADDR
28042: GO 28799
28044: LD_INT 13
28046: DOUBLE
28047: EQUAL
28048: IFTRUE 28052
28050: GO 28078
28052: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28053: LD_ADDR_VAR 0 3
28057: PUSH
28058: LD_INT 2
28060: PUSH
28061: LD_INT 3
28063: PUSH
28064: LD_INT 4
28066: PUSH
28067: LD_INT 5
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: ST_TO_ADDR
28076: GO 28799
28078: LD_INT 14
28080: DOUBLE
28081: EQUAL
28082: IFTRUE 28086
28084: GO 28104
28086: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28087: LD_ADDR_VAR 0 3
28091: PUSH
28092: LD_INT 4
28094: PUSH
28095: LD_INT 5
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: ST_TO_ADDR
28102: GO 28799
28104: LD_INT 6
28106: DOUBLE
28107: EQUAL
28108: IFTRUE 28112
28110: GO 28130
28112: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28113: LD_ADDR_VAR 0 3
28117: PUSH
28118: LD_INT 4
28120: PUSH
28121: LD_INT 5
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: ST_TO_ADDR
28128: GO 28799
28130: LD_INT 10
28132: DOUBLE
28133: EQUAL
28134: IFTRUE 28138
28136: GO 28156
28138: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28139: LD_ADDR_VAR 0 3
28143: PUSH
28144: LD_INT 4
28146: PUSH
28147: LD_INT 5
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: ST_TO_ADDR
28154: GO 28799
28156: LD_INT 22
28158: DOUBLE
28159: EQUAL
28160: IFTRUE 28164
28162: GO 28190
28164: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28165: LD_ADDR_VAR 0 3
28169: PUSH
28170: LD_INT 11
28172: PUSH
28173: LD_INT 12
28175: PUSH
28176: LD_INT 13
28178: PUSH
28179: LD_INT 14
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: ST_TO_ADDR
28188: GO 28799
28190: LD_INT 23
28192: DOUBLE
28193: EQUAL
28194: IFTRUE 28198
28196: GO 28224
28198: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28199: LD_ADDR_VAR 0 3
28203: PUSH
28204: LD_INT 11
28206: PUSH
28207: LD_INT 12
28209: PUSH
28210: LD_INT 13
28212: PUSH
28213: LD_INT 14
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: ST_TO_ADDR
28222: GO 28799
28224: LD_INT 24
28226: DOUBLE
28227: EQUAL
28228: IFTRUE 28232
28230: GO 28258
28232: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28233: LD_ADDR_VAR 0 3
28237: PUSH
28238: LD_INT 11
28240: PUSH
28241: LD_INT 12
28243: PUSH
28244: LD_INT 13
28246: PUSH
28247: LD_INT 14
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: ST_TO_ADDR
28256: GO 28799
28258: LD_INT 30
28260: DOUBLE
28261: EQUAL
28262: IFTRUE 28266
28264: GO 28292
28266: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28267: LD_ADDR_VAR 0 3
28271: PUSH
28272: LD_INT 11
28274: PUSH
28275: LD_INT 12
28277: PUSH
28278: LD_INT 13
28280: PUSH
28281: LD_INT 14
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: ST_TO_ADDR
28290: GO 28799
28292: LD_INT 25
28294: DOUBLE
28295: EQUAL
28296: IFTRUE 28300
28298: GO 28318
28300: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28301: LD_ADDR_VAR 0 3
28305: PUSH
28306: LD_INT 13
28308: PUSH
28309: LD_INT 14
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: ST_TO_ADDR
28316: GO 28799
28318: LD_INT 27
28320: DOUBLE
28321: EQUAL
28322: IFTRUE 28326
28324: GO 28344
28326: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28327: LD_ADDR_VAR 0 3
28331: PUSH
28332: LD_INT 13
28334: PUSH
28335: LD_INT 14
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: ST_TO_ADDR
28342: GO 28799
28344: LD_INT 92
28346: DOUBLE
28347: EQUAL
28348: IFTRUE 28352
28350: GO 28378
28352: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28353: LD_ADDR_VAR 0 3
28357: PUSH
28358: LD_INT 11
28360: PUSH
28361: LD_INT 12
28363: PUSH
28364: LD_INT 13
28366: PUSH
28367: LD_INT 14
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: ST_TO_ADDR
28376: GO 28799
28378: LD_INT 28
28380: DOUBLE
28381: EQUAL
28382: IFTRUE 28386
28384: GO 28404
28386: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28387: LD_ADDR_VAR 0 3
28391: PUSH
28392: LD_INT 13
28394: PUSH
28395: LD_INT 14
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: ST_TO_ADDR
28402: GO 28799
28404: LD_INT 29
28406: DOUBLE
28407: EQUAL
28408: IFTRUE 28412
28410: GO 28430
28412: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28413: LD_ADDR_VAR 0 3
28417: PUSH
28418: LD_INT 13
28420: PUSH
28421: LD_INT 14
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: ST_TO_ADDR
28428: GO 28799
28430: LD_INT 31
28432: DOUBLE
28433: EQUAL
28434: IFTRUE 28438
28436: GO 28456
28438: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28439: LD_ADDR_VAR 0 3
28443: PUSH
28444: LD_INT 13
28446: PUSH
28447: LD_INT 14
28449: PUSH
28450: EMPTY
28451: LIST
28452: LIST
28453: ST_TO_ADDR
28454: GO 28799
28456: LD_INT 26
28458: DOUBLE
28459: EQUAL
28460: IFTRUE 28464
28462: GO 28482
28464: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28465: LD_ADDR_VAR 0 3
28469: PUSH
28470: LD_INT 13
28472: PUSH
28473: LD_INT 14
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: ST_TO_ADDR
28480: GO 28799
28482: LD_INT 42
28484: DOUBLE
28485: EQUAL
28486: IFTRUE 28490
28488: GO 28516
28490: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28491: LD_ADDR_VAR 0 3
28495: PUSH
28496: LD_INT 21
28498: PUSH
28499: LD_INT 22
28501: PUSH
28502: LD_INT 23
28504: PUSH
28505: LD_INT 24
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: ST_TO_ADDR
28514: GO 28799
28516: LD_INT 43
28518: DOUBLE
28519: EQUAL
28520: IFTRUE 28524
28522: GO 28550
28524: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28525: LD_ADDR_VAR 0 3
28529: PUSH
28530: LD_INT 21
28532: PUSH
28533: LD_INT 22
28535: PUSH
28536: LD_INT 23
28538: PUSH
28539: LD_INT 24
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: ST_TO_ADDR
28548: GO 28799
28550: LD_INT 44
28552: DOUBLE
28553: EQUAL
28554: IFTRUE 28558
28556: GO 28584
28558: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28559: LD_ADDR_VAR 0 3
28563: PUSH
28564: LD_INT 21
28566: PUSH
28567: LD_INT 22
28569: PUSH
28570: LD_INT 23
28572: PUSH
28573: LD_INT 24
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: ST_TO_ADDR
28582: GO 28799
28584: LD_INT 45
28586: DOUBLE
28587: EQUAL
28588: IFTRUE 28592
28590: GO 28618
28592: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28593: LD_ADDR_VAR 0 3
28597: PUSH
28598: LD_INT 21
28600: PUSH
28601: LD_INT 22
28603: PUSH
28604: LD_INT 23
28606: PUSH
28607: LD_INT 24
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: ST_TO_ADDR
28616: GO 28799
28618: LD_INT 49
28620: DOUBLE
28621: EQUAL
28622: IFTRUE 28626
28624: GO 28652
28626: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28627: LD_ADDR_VAR 0 3
28631: PUSH
28632: LD_INT 21
28634: PUSH
28635: LD_INT 22
28637: PUSH
28638: LD_INT 23
28640: PUSH
28641: LD_INT 24
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: ST_TO_ADDR
28650: GO 28799
28652: LD_INT 51
28654: DOUBLE
28655: EQUAL
28656: IFTRUE 28660
28658: GO 28686
28660: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28661: LD_ADDR_VAR 0 3
28665: PUSH
28666: LD_INT 21
28668: PUSH
28669: LD_INT 22
28671: PUSH
28672: LD_INT 23
28674: PUSH
28675: LD_INT 24
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: ST_TO_ADDR
28684: GO 28799
28686: LD_INT 52
28688: DOUBLE
28689: EQUAL
28690: IFTRUE 28694
28692: GO 28720
28694: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28695: LD_ADDR_VAR 0 3
28699: PUSH
28700: LD_INT 21
28702: PUSH
28703: LD_INT 22
28705: PUSH
28706: LD_INT 23
28708: PUSH
28709: LD_INT 24
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: ST_TO_ADDR
28718: GO 28799
28720: LD_INT 53
28722: DOUBLE
28723: EQUAL
28724: IFTRUE 28728
28726: GO 28746
28728: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28729: LD_ADDR_VAR 0 3
28733: PUSH
28734: LD_INT 23
28736: PUSH
28737: LD_INT 24
28739: PUSH
28740: EMPTY
28741: LIST
28742: LIST
28743: ST_TO_ADDR
28744: GO 28799
28746: LD_INT 46
28748: DOUBLE
28749: EQUAL
28750: IFTRUE 28754
28752: GO 28772
28754: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28755: LD_ADDR_VAR 0 3
28759: PUSH
28760: LD_INT 23
28762: PUSH
28763: LD_INT 24
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: ST_TO_ADDR
28770: GO 28799
28772: LD_INT 47
28774: DOUBLE
28775: EQUAL
28776: IFTRUE 28780
28778: GO 28798
28780: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28781: LD_ADDR_VAR 0 3
28785: PUSH
28786: LD_INT 23
28788: PUSH
28789: LD_INT 24
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: ST_TO_ADDR
28796: GO 28799
28798: POP
// result := ( chassis in result ) ;
28799: LD_ADDR_VAR 0 3
28803: PUSH
28804: LD_VAR 0 1
28808: PUSH
28809: LD_VAR 0 3
28813: IN
28814: ST_TO_ADDR
// end ;
28815: LD_VAR 0 3
28819: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28820: LD_INT 0
28822: PPUSH
28823: PPUSH
28824: PPUSH
28825: PPUSH
28826: PPUSH
28827: PPUSH
28828: PPUSH
// result := array ;
28829: LD_ADDR_VAR 0 5
28833: PUSH
28834: LD_VAR 0 1
28838: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28839: LD_VAR 0 1
28843: NOT
28844: IFTRUE 28853
28846: PUSH
28847: LD_VAR 0 2
28851: NOT
28852: OR
28853: IFTRUE 28862
28855: PUSH
28856: LD_VAR 0 3
28860: NOT
28861: OR
28862: IFTRUE 28876
28864: PUSH
28865: LD_VAR 0 2
28869: PUSH
28870: LD_VAR 0 1
28874: GREATER
28875: OR
28876: IFTRUE 28890
28878: PUSH
28879: LD_VAR 0 3
28883: PUSH
28884: LD_VAR 0 1
28888: GREATER
28889: OR
28890: IFFALSE 28894
// exit ;
28892: GO 29190
// if direction then
28894: LD_VAR 0 4
28898: IFFALSE 28962
// begin d := 1 ;
28900: LD_ADDR_VAR 0 9
28904: PUSH
28905: LD_INT 1
28907: ST_TO_ADDR
// if i_from > i_to then
28908: LD_VAR 0 2
28912: PUSH
28913: LD_VAR 0 3
28917: GREATER
28918: IFFALSE 28944
// length := ( array - i_from ) + i_to else
28920: LD_ADDR_VAR 0 11
28924: PUSH
28925: LD_VAR 0 1
28929: PUSH
28930: LD_VAR 0 2
28934: MINUS
28935: PUSH
28936: LD_VAR 0 3
28940: PLUS
28941: ST_TO_ADDR
28942: GO 28960
// length := i_to - i_from ;
28944: LD_ADDR_VAR 0 11
28948: PUSH
28949: LD_VAR 0 3
28953: PUSH
28954: LD_VAR 0 2
28958: MINUS
28959: ST_TO_ADDR
// end else
28960: GO 29023
// begin d := - 1 ;
28962: LD_ADDR_VAR 0 9
28966: PUSH
28967: LD_INT 1
28969: NEG
28970: ST_TO_ADDR
// if i_from > i_to then
28971: LD_VAR 0 2
28975: PUSH
28976: LD_VAR 0 3
28980: GREATER
28981: IFFALSE 29001
// length := i_from - i_to else
28983: LD_ADDR_VAR 0 11
28987: PUSH
28988: LD_VAR 0 2
28992: PUSH
28993: LD_VAR 0 3
28997: MINUS
28998: ST_TO_ADDR
28999: GO 29023
// length := ( array - i_to ) + i_from ;
29001: LD_ADDR_VAR 0 11
29005: PUSH
29006: LD_VAR 0 1
29010: PUSH
29011: LD_VAR 0 3
29015: MINUS
29016: PUSH
29017: LD_VAR 0 2
29021: PLUS
29022: ST_TO_ADDR
// end ; if not length then
29023: LD_VAR 0 11
29027: NOT
29028: IFFALSE 29032
// exit ;
29030: GO 29190
// tmp := array ;
29032: LD_ADDR_VAR 0 10
29036: PUSH
29037: LD_VAR 0 1
29041: ST_TO_ADDR
// for i = 1 to length do
29042: LD_ADDR_VAR 0 6
29046: PUSH
29047: DOUBLE
29048: LD_INT 1
29050: DEC
29051: ST_TO_ADDR
29052: LD_VAR 0 11
29056: PUSH
29057: FOR_TO
29058: IFFALSE 29178
// begin for j = 1 to array do
29060: LD_ADDR_VAR 0 7
29064: PUSH
29065: DOUBLE
29066: LD_INT 1
29068: DEC
29069: ST_TO_ADDR
29070: LD_VAR 0 1
29074: PUSH
29075: FOR_TO
29076: IFFALSE 29164
// begin k := j + d ;
29078: LD_ADDR_VAR 0 8
29082: PUSH
29083: LD_VAR 0 7
29087: PUSH
29088: LD_VAR 0 9
29092: PLUS
29093: ST_TO_ADDR
// if k > array then
29094: LD_VAR 0 8
29098: PUSH
29099: LD_VAR 0 1
29103: GREATER
29104: IFFALSE 29114
// k := 1 ;
29106: LD_ADDR_VAR 0 8
29110: PUSH
29111: LD_INT 1
29113: ST_TO_ADDR
// if not k then
29114: LD_VAR 0 8
29118: NOT
29119: IFFALSE 29131
// k := array ;
29121: LD_ADDR_VAR 0 8
29125: PUSH
29126: LD_VAR 0 1
29130: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29131: LD_ADDR_VAR 0 10
29135: PUSH
29136: LD_VAR 0 10
29140: PPUSH
29141: LD_VAR 0 8
29145: PPUSH
29146: LD_VAR 0 1
29150: PUSH
29151: LD_VAR 0 7
29155: ARRAY
29156: PPUSH
29157: CALL_OW 1
29161: ST_TO_ADDR
// end ;
29162: GO 29075
29164: POP
29165: POP
// array := tmp ;
29166: LD_ADDR_VAR 0 1
29170: PUSH
29171: LD_VAR 0 10
29175: ST_TO_ADDR
// end ;
29176: GO 29057
29178: POP
29179: POP
// result := array ;
29180: LD_ADDR_VAR 0 5
29184: PUSH
29185: LD_VAR 0 1
29189: ST_TO_ADDR
// end ;
29190: LD_VAR 0 5
29194: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29195: LD_INT 0
29197: PPUSH
29198: PPUSH
// result := 0 ;
29199: LD_ADDR_VAR 0 3
29203: PUSH
29204: LD_INT 0
29206: ST_TO_ADDR
// if not array or not value in array then
29207: LD_VAR 0 1
29211: NOT
29212: IFTRUE 29227
29214: PUSH
29215: LD_VAR 0 2
29219: PUSH
29220: LD_VAR 0 1
29224: IN
29225: NOT
29226: OR
29227: IFFALSE 29231
// exit ;
29229: GO 29285
// for i = 1 to array do
29231: LD_ADDR_VAR 0 4
29235: PUSH
29236: DOUBLE
29237: LD_INT 1
29239: DEC
29240: ST_TO_ADDR
29241: LD_VAR 0 1
29245: PUSH
29246: FOR_TO
29247: IFFALSE 29283
// if value = array [ i ] then
29249: LD_VAR 0 2
29253: PUSH
29254: LD_VAR 0 1
29258: PUSH
29259: LD_VAR 0 4
29263: ARRAY
29264: EQUAL
29265: IFFALSE 29281
// begin result := i ;
29267: LD_ADDR_VAR 0 3
29271: PUSH
29272: LD_VAR 0 4
29276: ST_TO_ADDR
// exit ;
29277: POP
29278: POP
29279: GO 29285
// end ;
29281: GO 29246
29283: POP
29284: POP
// end ;
29285: LD_VAR 0 3
29289: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29290: LD_INT 0
29292: PPUSH
// vc_chassis := chassis ;
29293: LD_ADDR_OWVAR 37
29297: PUSH
29298: LD_VAR 0 1
29302: ST_TO_ADDR
// vc_engine := engine ;
29303: LD_ADDR_OWVAR 39
29307: PUSH
29308: LD_VAR 0 2
29312: ST_TO_ADDR
// vc_control := control ;
29313: LD_ADDR_OWVAR 38
29317: PUSH
29318: LD_VAR 0 3
29322: ST_TO_ADDR
// vc_weapon := weapon ;
29323: LD_ADDR_OWVAR 40
29327: PUSH
29328: LD_VAR 0 4
29332: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29333: LD_ADDR_OWVAR 41
29337: PUSH
29338: LD_VAR 0 5
29342: ST_TO_ADDR
// end ;
29343: LD_VAR 0 6
29347: RET
// export function WantPlant ( unit ) ; var task ; begin
29348: LD_INT 0
29350: PPUSH
29351: PPUSH
// result := false ;
29352: LD_ADDR_VAR 0 2
29356: PUSH
29357: LD_INT 0
29359: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29360: LD_ADDR_VAR 0 3
29364: PUSH
29365: LD_VAR 0 1
29369: PPUSH
29370: CALL_OW 437
29374: ST_TO_ADDR
// if task then
29375: LD_VAR 0 3
29379: IFFALSE 29407
// if task [ 1 ] [ 1 ] = p then
29381: LD_VAR 0 3
29385: PUSH
29386: LD_INT 1
29388: ARRAY
29389: PUSH
29390: LD_INT 1
29392: ARRAY
29393: PUSH
29394: LD_STRING p
29396: EQUAL
29397: IFFALSE 29407
// result := true ;
29399: LD_ADDR_VAR 0 2
29403: PUSH
29404: LD_INT 1
29406: ST_TO_ADDR
// end ;
29407: LD_VAR 0 2
29411: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29412: LD_INT 0
29414: PPUSH
29415: PPUSH
29416: PPUSH
29417: PPUSH
// if pos < 1 then
29418: LD_VAR 0 2
29422: PUSH
29423: LD_INT 1
29425: LESS
29426: IFFALSE 29430
// exit ;
29428: GO 29733
// if pos = 1 then
29430: LD_VAR 0 2
29434: PUSH
29435: LD_INT 1
29437: EQUAL
29438: IFFALSE 29471
// result := Replace ( arr , pos [ 1 ] , value ) else
29440: LD_ADDR_VAR 0 4
29444: PUSH
29445: LD_VAR 0 1
29449: PPUSH
29450: LD_VAR 0 2
29454: PUSH
29455: LD_INT 1
29457: ARRAY
29458: PPUSH
29459: LD_VAR 0 3
29463: PPUSH
29464: CALL_OW 1
29468: ST_TO_ADDR
29469: GO 29733
// begin tmp := arr ;
29471: LD_ADDR_VAR 0 6
29475: PUSH
29476: LD_VAR 0 1
29480: ST_TO_ADDR
// s_arr := [ tmp ] ;
29481: LD_ADDR_VAR 0 7
29485: PUSH
29486: LD_VAR 0 6
29490: PUSH
29491: EMPTY
29492: LIST
29493: ST_TO_ADDR
// for i = 1 to pos - 1 do
29494: LD_ADDR_VAR 0 5
29498: PUSH
29499: DOUBLE
29500: LD_INT 1
29502: DEC
29503: ST_TO_ADDR
29504: LD_VAR 0 2
29508: PUSH
29509: LD_INT 1
29511: MINUS
29512: PUSH
29513: FOR_TO
29514: IFFALSE 29559
// begin tmp := tmp [ pos [ i ] ] ;
29516: LD_ADDR_VAR 0 6
29520: PUSH
29521: LD_VAR 0 6
29525: PUSH
29526: LD_VAR 0 2
29530: PUSH
29531: LD_VAR 0 5
29535: ARRAY
29536: ARRAY
29537: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29538: LD_ADDR_VAR 0 7
29542: PUSH
29543: LD_VAR 0 7
29547: PUSH
29548: LD_VAR 0 6
29552: PUSH
29553: EMPTY
29554: LIST
29555: ADD
29556: ST_TO_ADDR
// end ;
29557: GO 29513
29559: POP
29560: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29561: LD_ADDR_VAR 0 6
29565: PUSH
29566: LD_VAR 0 6
29570: PPUSH
29571: LD_VAR 0 2
29575: PUSH
29576: LD_VAR 0 2
29580: ARRAY
29581: PPUSH
29582: LD_VAR 0 3
29586: PPUSH
29587: CALL_OW 1
29591: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29592: LD_ADDR_VAR 0 7
29596: PUSH
29597: LD_VAR 0 7
29601: PPUSH
29602: LD_VAR 0 7
29606: PPUSH
29607: LD_VAR 0 6
29611: PPUSH
29612: CALL_OW 1
29616: ST_TO_ADDR
// for i = s_arr downto 2 do
29617: LD_ADDR_VAR 0 5
29621: PUSH
29622: DOUBLE
29623: LD_VAR 0 7
29627: INC
29628: ST_TO_ADDR
29629: LD_INT 2
29631: PUSH
29632: FOR_DOWNTO
29633: IFFALSE 29717
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29635: LD_ADDR_VAR 0 6
29639: PUSH
29640: LD_VAR 0 7
29644: PUSH
29645: LD_VAR 0 5
29649: PUSH
29650: LD_INT 1
29652: MINUS
29653: ARRAY
29654: PPUSH
29655: LD_VAR 0 2
29659: PUSH
29660: LD_VAR 0 5
29664: PUSH
29665: LD_INT 1
29667: MINUS
29668: ARRAY
29669: PPUSH
29670: LD_VAR 0 7
29674: PUSH
29675: LD_VAR 0 5
29679: ARRAY
29680: PPUSH
29681: CALL_OW 1
29685: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29686: LD_ADDR_VAR 0 7
29690: PUSH
29691: LD_VAR 0 7
29695: PPUSH
29696: LD_VAR 0 5
29700: PUSH
29701: LD_INT 1
29703: MINUS
29704: PPUSH
29705: LD_VAR 0 6
29709: PPUSH
29710: CALL_OW 1
29714: ST_TO_ADDR
// end ;
29715: GO 29632
29717: POP
29718: POP
// result := s_arr [ 1 ] ;
29719: LD_ADDR_VAR 0 4
29723: PUSH
29724: LD_VAR 0 7
29728: PUSH
29729: LD_INT 1
29731: ARRAY
29732: ST_TO_ADDR
// end ; end ;
29733: LD_VAR 0 4
29737: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29738: LD_INT 0
29740: PPUSH
29741: PPUSH
// if not list then
29742: LD_VAR 0 1
29746: NOT
29747: IFFALSE 29751
// exit ;
29749: GO 29842
// i := list [ pos1 ] ;
29751: LD_ADDR_VAR 0 5
29755: PUSH
29756: LD_VAR 0 1
29760: PUSH
29761: LD_VAR 0 2
29765: ARRAY
29766: ST_TO_ADDR
// if not i then
29767: LD_VAR 0 5
29771: NOT
29772: IFFALSE 29776
// exit ;
29774: GO 29842
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29776: LD_ADDR_VAR 0 1
29780: PUSH
29781: LD_VAR 0 1
29785: PPUSH
29786: LD_VAR 0 2
29790: PPUSH
29791: LD_VAR 0 1
29795: PUSH
29796: LD_VAR 0 3
29800: ARRAY
29801: PPUSH
29802: CALL_OW 1
29806: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29807: LD_ADDR_VAR 0 1
29811: PUSH
29812: LD_VAR 0 1
29816: PPUSH
29817: LD_VAR 0 3
29821: PPUSH
29822: LD_VAR 0 5
29826: PPUSH
29827: CALL_OW 1
29831: ST_TO_ADDR
// result := list ;
29832: LD_ADDR_VAR 0 4
29836: PUSH
29837: LD_VAR 0 1
29841: ST_TO_ADDR
// end ;
29842: LD_VAR 0 4
29846: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29847: LD_INT 0
29849: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29850: LD_ADDR_VAR 0 5
29854: PUSH
29855: LD_VAR 0 1
29859: PPUSH
29860: CALL_OW 250
29864: PPUSH
29865: LD_VAR 0 1
29869: PPUSH
29870: CALL_OW 251
29874: PPUSH
29875: LD_VAR 0 2
29879: PPUSH
29880: LD_VAR 0 3
29884: PPUSH
29885: LD_VAR 0 4
29889: PPUSH
29890: CALL 30272 0 5
29894: ST_TO_ADDR
// end ;
29895: LD_VAR 0 5
29899: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
29900: LD_INT 0
29902: PPUSH
29903: PPUSH
29904: PPUSH
29905: PPUSH
// if not list or not unit then
29906: LD_VAR 0 2
29910: NOT
29911: IFTRUE 29920
29913: PUSH
29914: LD_VAR 0 1
29918: NOT
29919: OR
29920: IFFALSE 29924
// exit ;
29922: GO 30267
// result := [ ] ;
29924: LD_ADDR_VAR 0 5
29928: PUSH
29929: EMPTY
29930: ST_TO_ADDR
// for i in list do
29931: LD_ADDR_VAR 0 6
29935: PUSH
29936: LD_VAR 0 2
29940: PUSH
29941: FOR_IN
29942: IFFALSE 30160
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
29944: LD_ADDR_VAR 0 8
29948: PUSH
29949: LD_VAR 0 1
29953: PPUSH
29954: LD_VAR 0 6
29958: PUSH
29959: LD_INT 1
29961: ARRAY
29962: PPUSH
29963: LD_VAR 0 6
29967: PUSH
29968: LD_INT 2
29970: ARRAY
29971: PPUSH
29972: CALL_OW 297
29976: ST_TO_ADDR
// if not Count ( result ) then
29977: LD_VAR 0 5
29981: PPUSH
29982: CALL 26528 0 1
29986: NOT
29987: IFFALSE 30020
// begin result := Join ( result , [ i , tmp ] ) ;
29989: LD_ADDR_VAR 0 5
29993: PUSH
29994: LD_VAR 0 5
29998: PPUSH
29999: LD_VAR 0 6
30003: PUSH
30004: LD_VAR 0 8
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PPUSH
30013: CALL 62460 0 2
30017: ST_TO_ADDR
// continue ;
30018: GO 29941
// end ; if result [ result ] [ 2 ] <= tmp then
30020: LD_VAR 0 5
30024: PUSH
30025: LD_VAR 0 5
30029: ARRAY
30030: PUSH
30031: LD_INT 2
30033: ARRAY
30034: PUSH
30035: LD_VAR 0 8
30039: LESSEQUAL
30040: IFFALSE 30073
// result := Join ( result , [ i , tmp ] ) else
30042: LD_ADDR_VAR 0 5
30046: PUSH
30047: LD_VAR 0 5
30051: PPUSH
30052: LD_VAR 0 6
30056: PUSH
30057: LD_VAR 0 8
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PPUSH
30066: CALL 62460 0 2
30070: ST_TO_ADDR
30071: GO 30158
// begin for j := 1 to Count ( result ) do
30073: LD_ADDR_VAR 0 7
30077: PUSH
30078: DOUBLE
30079: LD_INT 1
30081: DEC
30082: ST_TO_ADDR
30083: LD_VAR 0 5
30087: PPUSH
30088: CALL 26528 0 1
30092: PUSH
30093: FOR_TO
30094: IFFALSE 30156
// begin if tmp < result [ j ] [ 2 ] then
30096: LD_VAR 0 8
30100: PUSH
30101: LD_VAR 0 5
30105: PUSH
30106: LD_VAR 0 7
30110: ARRAY
30111: PUSH
30112: LD_INT 2
30114: ARRAY
30115: LESS
30116: IFFALSE 30154
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30118: LD_ADDR_VAR 0 5
30122: PUSH
30123: LD_VAR 0 5
30127: PPUSH
30128: LD_VAR 0 7
30132: PPUSH
30133: LD_VAR 0 6
30137: PUSH
30138: LD_VAR 0 8
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PPUSH
30147: CALL_OW 2
30151: ST_TO_ADDR
// break ;
30152: GO 30156
// end ; end ;
30154: GO 30093
30156: POP
30157: POP
// end ; end ;
30158: GO 29941
30160: POP
30161: POP
// if result and not asc then
30162: LD_VAR 0 5
30166: IFFALSE 30175
30168: PUSH
30169: LD_VAR 0 3
30173: NOT
30174: AND
30175: IFFALSE 30192
// result := ReverseArray ( result ) ;
30177: LD_ADDR_VAR 0 5
30181: PUSH
30182: LD_VAR 0 5
30186: PPUSH
30187: CALL 57550 0 1
30191: ST_TO_ADDR
// tmp := [ ] ;
30192: LD_ADDR_VAR 0 8
30196: PUSH
30197: EMPTY
30198: ST_TO_ADDR
// if mode then
30199: LD_VAR 0 4
30203: IFFALSE 30267
// begin for i := 1 to result do
30205: LD_ADDR_VAR 0 6
30209: PUSH
30210: DOUBLE
30211: LD_INT 1
30213: DEC
30214: ST_TO_ADDR
30215: LD_VAR 0 5
30219: PUSH
30220: FOR_TO
30221: IFFALSE 30255
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
30223: LD_ADDR_VAR 0 8
30227: PUSH
30228: LD_VAR 0 8
30232: PPUSH
30233: LD_VAR 0 5
30237: PUSH
30238: LD_VAR 0 6
30242: ARRAY
30243: PUSH
30244: LD_INT 1
30246: ARRAY
30247: PPUSH
30248: CALL 62460 0 2
30252: ST_TO_ADDR
30253: GO 30220
30255: POP
30256: POP
// result := tmp ;
30257: LD_ADDR_VAR 0 5
30261: PUSH
30262: LD_VAR 0 8
30266: ST_TO_ADDR
// end ; end ;
30267: LD_VAR 0 5
30271: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30272: LD_INT 0
30274: PPUSH
30275: PPUSH
30276: PPUSH
30277: PPUSH
// if not list then
30278: LD_VAR 0 3
30282: NOT
30283: IFFALSE 30287
// exit ;
30285: GO 30677
// result := [ ] ;
30287: LD_ADDR_VAR 0 6
30291: PUSH
30292: EMPTY
30293: ST_TO_ADDR
// for i in list do
30294: LD_ADDR_VAR 0 7
30298: PUSH
30299: LD_VAR 0 3
30303: PUSH
30304: FOR_IN
30305: IFFALSE 30507
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30307: LD_ADDR_VAR 0 9
30311: PUSH
30312: LD_VAR 0 7
30316: PPUSH
30317: LD_VAR 0 1
30321: PPUSH
30322: LD_VAR 0 2
30326: PPUSH
30327: CALL_OW 297
30331: ST_TO_ADDR
// if not result then
30332: LD_VAR 0 6
30336: NOT
30337: IFFALSE 30363
// result := [ [ i , tmp ] ] else
30339: LD_ADDR_VAR 0 6
30343: PUSH
30344: LD_VAR 0 7
30348: PUSH
30349: LD_VAR 0 9
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: EMPTY
30359: LIST
30360: ST_TO_ADDR
30361: GO 30505
// begin if result [ result ] [ 2 ] <= tmp then
30363: LD_VAR 0 6
30367: PUSH
30368: LD_VAR 0 6
30372: ARRAY
30373: PUSH
30374: LD_INT 2
30376: ARRAY
30377: PUSH
30378: LD_VAR 0 9
30382: LESSEQUAL
30383: IFFALSE 30425
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30385: LD_ADDR_VAR 0 6
30389: PUSH
30390: LD_VAR 0 6
30394: PPUSH
30395: LD_VAR 0 6
30399: PUSH
30400: LD_INT 1
30402: PLUS
30403: PPUSH
30404: LD_VAR 0 7
30408: PUSH
30409: LD_VAR 0 9
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PPUSH
30418: CALL_OW 2
30422: ST_TO_ADDR
30423: GO 30505
// for j := 1 to result do
30425: LD_ADDR_VAR 0 8
30429: PUSH
30430: DOUBLE
30431: LD_INT 1
30433: DEC
30434: ST_TO_ADDR
30435: LD_VAR 0 6
30439: PUSH
30440: FOR_TO
30441: IFFALSE 30503
// begin if tmp < result [ j ] [ 2 ] then
30443: LD_VAR 0 9
30447: PUSH
30448: LD_VAR 0 6
30452: PUSH
30453: LD_VAR 0 8
30457: ARRAY
30458: PUSH
30459: LD_INT 2
30461: ARRAY
30462: LESS
30463: IFFALSE 30501
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30465: LD_ADDR_VAR 0 6
30469: PUSH
30470: LD_VAR 0 6
30474: PPUSH
30475: LD_VAR 0 8
30479: PPUSH
30480: LD_VAR 0 7
30484: PUSH
30485: LD_VAR 0 9
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PPUSH
30494: CALL_OW 2
30498: ST_TO_ADDR
// break ;
30499: GO 30503
// end ; end ;
30501: GO 30440
30503: POP
30504: POP
// end ; end ;
30505: GO 30304
30507: POP
30508: POP
// if result and not asc then
30509: LD_VAR 0 6
30513: IFFALSE 30522
30515: PUSH
30516: LD_VAR 0 4
30520: NOT
30521: AND
30522: IFFALSE 30597
// begin tmp := result ;
30524: LD_ADDR_VAR 0 9
30528: PUSH
30529: LD_VAR 0 6
30533: ST_TO_ADDR
// for i = tmp downto 1 do
30534: LD_ADDR_VAR 0 7
30538: PUSH
30539: DOUBLE
30540: LD_VAR 0 9
30544: INC
30545: ST_TO_ADDR
30546: LD_INT 1
30548: PUSH
30549: FOR_DOWNTO
30550: IFFALSE 30595
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30552: LD_ADDR_VAR 0 6
30556: PUSH
30557: LD_VAR 0 6
30561: PPUSH
30562: LD_VAR 0 9
30566: PUSH
30567: LD_VAR 0 7
30571: MINUS
30572: PUSH
30573: LD_INT 1
30575: PLUS
30576: PPUSH
30577: LD_VAR 0 9
30581: PUSH
30582: LD_VAR 0 7
30586: ARRAY
30587: PPUSH
30588: CALL_OW 1
30592: ST_TO_ADDR
30593: GO 30549
30595: POP
30596: POP
// end ; tmp := [ ] ;
30597: LD_ADDR_VAR 0 9
30601: PUSH
30602: EMPTY
30603: ST_TO_ADDR
// if mode then
30604: LD_VAR 0 5
30608: IFFALSE 30677
// begin for i = 1 to result do
30610: LD_ADDR_VAR 0 7
30614: PUSH
30615: DOUBLE
30616: LD_INT 1
30618: DEC
30619: ST_TO_ADDR
30620: LD_VAR 0 6
30624: PUSH
30625: FOR_TO
30626: IFFALSE 30665
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30628: LD_ADDR_VAR 0 9
30632: PUSH
30633: LD_VAR 0 9
30637: PPUSH
30638: LD_VAR 0 7
30642: PPUSH
30643: LD_VAR 0 6
30647: PUSH
30648: LD_VAR 0 7
30652: ARRAY
30653: PUSH
30654: LD_INT 1
30656: ARRAY
30657: PPUSH
30658: CALL_OW 1
30662: ST_TO_ADDR
30663: GO 30625
30665: POP
30666: POP
// result := tmp ;
30667: LD_ADDR_VAR 0 6
30671: PUSH
30672: LD_VAR 0 9
30676: ST_TO_ADDR
// end ; end ;
30677: LD_VAR 0 6
30681: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30682: LD_INT 0
30684: PPUSH
30685: PPUSH
30686: PPUSH
30687: PPUSH
30688: PPUSH
30689: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30690: LD_ADDR_VAR 0 5
30694: PUSH
30695: LD_INT 0
30697: PUSH
30698: LD_INT 0
30700: PUSH
30701: LD_INT 0
30703: PUSH
30704: EMPTY
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: ST_TO_ADDR
// if not x or not y then
30712: LD_VAR 0 2
30716: NOT
30717: IFTRUE 30726
30719: PUSH
30720: LD_VAR 0 3
30724: NOT
30725: OR
30726: IFFALSE 30730
// exit ;
30728: GO 32386
// if not range then
30730: LD_VAR 0 4
30734: NOT
30735: IFFALSE 30745
// range := 10 ;
30737: LD_ADDR_VAR 0 4
30741: PUSH
30742: LD_INT 10
30744: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30745: LD_ADDR_VAR 0 8
30749: PUSH
30750: LD_INT 81
30752: PUSH
30753: LD_VAR 0 1
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: LD_INT 92
30764: PUSH
30765: LD_VAR 0 2
30769: PUSH
30770: LD_VAR 0 3
30774: PUSH
30775: LD_VAR 0 4
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: PUSH
30786: LD_INT 3
30788: PUSH
30789: LD_INT 21
30791: PUSH
30792: LD_INT 3
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: LIST
30807: PPUSH
30808: CALL_OW 69
30812: ST_TO_ADDR
// if not tmp then
30813: LD_VAR 0 8
30817: NOT
30818: IFFALSE 30822
// exit ;
30820: GO 32386
// for i in tmp do
30822: LD_ADDR_VAR 0 6
30826: PUSH
30827: LD_VAR 0 8
30831: PUSH
30832: FOR_IN
30833: IFFALSE 32361
// begin points := [ 0 , 0 , 0 ] ;
30835: LD_ADDR_VAR 0 9
30839: PUSH
30840: LD_INT 0
30842: PUSH
30843: LD_INT 0
30845: PUSH
30846: LD_INT 0
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: LIST
30853: ST_TO_ADDR
// bpoints := 1 ;
30854: LD_ADDR_VAR 0 10
30858: PUSH
30859: LD_INT 1
30861: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30862: LD_VAR 0 6
30866: PPUSH
30867: CALL_OW 247
30871: PUSH
30872: LD_INT 1
30874: DOUBLE
30875: EQUAL
30876: IFTRUE 30880
30878: GO 31462
30880: POP
// begin if GetClass ( i ) = 1 then
30881: LD_VAR 0 6
30885: PPUSH
30886: CALL_OW 257
30890: PUSH
30891: LD_INT 1
30893: EQUAL
30894: IFFALSE 30915
// points := [ 10 , 5 , 3 ] ;
30896: LD_ADDR_VAR 0 9
30900: PUSH
30901: LD_INT 10
30903: PUSH
30904: LD_INT 5
30906: PUSH
30907: LD_INT 3
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: LIST
30914: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30915: LD_VAR 0 6
30919: PPUSH
30920: CALL_OW 257
30924: PUSH
30925: LD_INT 2
30927: PUSH
30928: LD_INT 3
30930: PUSH
30931: LD_INT 4
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: LIST
30938: IN
30939: IFFALSE 30960
// points := [ 3 , 2 , 1 ] ;
30941: LD_ADDR_VAR 0 9
30945: PUSH
30946: LD_INT 3
30948: PUSH
30949: LD_INT 2
30951: PUSH
30952: LD_INT 1
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: LIST
30959: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30960: LD_VAR 0 6
30964: PPUSH
30965: CALL_OW 257
30969: PUSH
30970: LD_INT 5
30972: EQUAL
30973: IFFALSE 30994
// points := [ 130 , 5 , 2 ] ;
30975: LD_ADDR_VAR 0 9
30979: PUSH
30980: LD_INT 130
30982: PUSH
30983: LD_INT 5
30985: PUSH
30986: LD_INT 2
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: LIST
30993: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30994: LD_VAR 0 6
30998: PPUSH
30999: CALL_OW 257
31003: PUSH
31004: LD_INT 8
31006: EQUAL
31007: IFFALSE 31028
// points := [ 35 , 35 , 30 ] ;
31009: LD_ADDR_VAR 0 9
31013: PUSH
31014: LD_INT 35
31016: PUSH
31017: LD_INT 35
31019: PUSH
31020: LD_INT 30
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: LIST
31027: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31028: LD_VAR 0 6
31032: PPUSH
31033: CALL_OW 257
31037: PUSH
31038: LD_INT 9
31040: EQUAL
31041: IFFALSE 31062
// points := [ 20 , 55 , 40 ] ;
31043: LD_ADDR_VAR 0 9
31047: PUSH
31048: LD_INT 20
31050: PUSH
31051: LD_INT 55
31053: PUSH
31054: LD_INT 40
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: LIST
31061: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31062: LD_VAR 0 6
31066: PPUSH
31067: CALL_OW 257
31071: PUSH
31072: LD_INT 12
31074: PUSH
31075: LD_INT 16
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: IN
31082: IFFALSE 31103
// points := [ 5 , 3 , 2 ] ;
31084: LD_ADDR_VAR 0 9
31088: PUSH
31089: LD_INT 5
31091: PUSH
31092: LD_INT 3
31094: PUSH
31095: LD_INT 2
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: LIST
31102: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31103: LD_VAR 0 6
31107: PPUSH
31108: CALL_OW 257
31112: PUSH
31113: LD_INT 17
31115: EQUAL
31116: IFFALSE 31137
// points := [ 100 , 50 , 75 ] ;
31118: LD_ADDR_VAR 0 9
31122: PUSH
31123: LD_INT 100
31125: PUSH
31126: LD_INT 50
31128: PUSH
31129: LD_INT 75
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: LIST
31136: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31137: LD_VAR 0 6
31141: PPUSH
31142: CALL_OW 257
31146: PUSH
31147: LD_INT 15
31149: EQUAL
31150: IFFALSE 31171
// points := [ 10 , 5 , 3 ] ;
31152: LD_ADDR_VAR 0 9
31156: PUSH
31157: LD_INT 10
31159: PUSH
31160: LD_INT 5
31162: PUSH
31163: LD_INT 3
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: LIST
31170: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31171: LD_VAR 0 6
31175: PPUSH
31176: CALL_OW 257
31180: PUSH
31181: LD_INT 14
31183: EQUAL
31184: IFFALSE 31205
// points := [ 10 , 0 , 0 ] ;
31186: LD_ADDR_VAR 0 9
31190: PUSH
31191: LD_INT 10
31193: PUSH
31194: LD_INT 0
31196: PUSH
31197: LD_INT 0
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: LIST
31204: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31205: LD_VAR 0 6
31209: PPUSH
31210: CALL_OW 257
31214: PUSH
31215: LD_INT 11
31217: EQUAL
31218: IFFALSE 31239
// points := [ 30 , 10 , 5 ] ;
31220: LD_ADDR_VAR 0 9
31224: PUSH
31225: LD_INT 30
31227: PUSH
31228: LD_INT 10
31230: PUSH
31231: LD_INT 5
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: LIST
31238: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31239: LD_VAR 0 1
31243: PPUSH
31244: LD_INT 5
31246: PPUSH
31247: CALL_OW 321
31251: PUSH
31252: LD_INT 2
31254: EQUAL
31255: IFFALSE 31272
// bpoints := bpoints * 1.8 ;
31257: LD_ADDR_VAR 0 10
31261: PUSH
31262: LD_VAR 0 10
31266: PUSH
31267: LD_REAL  1.80000000000000E+0000
31270: MUL
31271: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31272: LD_VAR 0 6
31276: PPUSH
31277: CALL_OW 257
31281: PUSH
31282: LD_INT 1
31284: PUSH
31285: LD_INT 2
31287: PUSH
31288: LD_INT 3
31290: PUSH
31291: LD_INT 4
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: IN
31300: IFFALSE 31320
31302: PUSH
31303: LD_VAR 0 1
31307: PPUSH
31308: LD_INT 51
31310: PPUSH
31311: CALL_OW 321
31315: PUSH
31316: LD_INT 2
31318: EQUAL
31319: AND
31320: IFFALSE 31337
// bpoints := bpoints * 1.2 ;
31322: LD_ADDR_VAR 0 10
31326: PUSH
31327: LD_VAR 0 10
31331: PUSH
31332: LD_REAL  1.20000000000000E+0000
31335: MUL
31336: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31337: LD_VAR 0 6
31341: PPUSH
31342: CALL_OW 257
31346: PUSH
31347: LD_INT 5
31349: PUSH
31350: LD_INT 7
31352: PUSH
31353: LD_INT 9
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: LIST
31360: IN
31361: IFFALSE 31381
31363: PUSH
31364: LD_VAR 0 1
31368: PPUSH
31369: LD_INT 52
31371: PPUSH
31372: CALL_OW 321
31376: PUSH
31377: LD_INT 2
31379: EQUAL
31380: AND
31381: IFFALSE 31398
// bpoints := bpoints * 1.5 ;
31383: LD_ADDR_VAR 0 10
31387: PUSH
31388: LD_VAR 0 10
31392: PUSH
31393: LD_REAL  1.50000000000000E+0000
31396: MUL
31397: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31398: LD_VAR 0 1
31402: PPUSH
31403: LD_INT 66
31405: PPUSH
31406: CALL_OW 321
31410: PUSH
31411: LD_INT 2
31413: EQUAL
31414: IFFALSE 31431
// bpoints := bpoints * 1.1 ;
31416: LD_ADDR_VAR 0 10
31420: PUSH
31421: LD_VAR 0 10
31425: PUSH
31426: LD_REAL  1.10000000000000E+0000
31429: MUL
31430: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31431: LD_ADDR_VAR 0 10
31435: PUSH
31436: LD_VAR 0 10
31440: PUSH
31441: LD_VAR 0 6
31445: PPUSH
31446: LD_INT 1
31448: PPUSH
31449: CALL_OW 259
31453: PUSH
31454: LD_REAL  1.15000000000000E+0000
31457: MUL
31458: MUL
31459: ST_TO_ADDR
// end ; unit_vehicle :
31460: GO 32290
31462: LD_INT 2
31464: DOUBLE
31465: EQUAL
31466: IFTRUE 31470
31468: GO 32278
31470: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31471: LD_VAR 0 6
31475: PPUSH
31476: CALL_OW 264
31480: PUSH
31481: LD_INT 2
31483: PUSH
31484: LD_INT 42
31486: PUSH
31487: LD_INT 24
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: LIST
31494: IN
31495: IFFALSE 31516
// points := [ 25 , 5 , 3 ] ;
31497: LD_ADDR_VAR 0 9
31501: PUSH
31502: LD_INT 25
31504: PUSH
31505: LD_INT 5
31507: PUSH
31508: LD_INT 3
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: LIST
31515: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31516: LD_VAR 0 6
31520: PPUSH
31521: CALL_OW 264
31525: PUSH
31526: LD_INT 4
31528: PUSH
31529: LD_INT 43
31531: PUSH
31532: LD_INT 25
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: LIST
31539: IN
31540: IFFALSE 31561
// points := [ 40 , 15 , 5 ] ;
31542: LD_ADDR_VAR 0 9
31546: PUSH
31547: LD_INT 40
31549: PUSH
31550: LD_INT 15
31552: PUSH
31553: LD_INT 5
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: LIST
31560: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31561: LD_VAR 0 6
31565: PPUSH
31566: CALL_OW 264
31570: PUSH
31571: LD_INT 3
31573: PUSH
31574: LD_INT 23
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: IN
31581: IFFALSE 31602
// points := [ 7 , 25 , 8 ] ;
31583: LD_ADDR_VAR 0 9
31587: PUSH
31588: LD_INT 7
31590: PUSH
31591: LD_INT 25
31593: PUSH
31594: LD_INT 8
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: LIST
31601: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31602: LD_VAR 0 6
31606: PPUSH
31607: CALL_OW 264
31611: PUSH
31612: LD_INT 5
31614: PUSH
31615: LD_INT 27
31617: PUSH
31618: LD_INT 44
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: LIST
31625: IN
31626: IFFALSE 31647
// points := [ 14 , 50 , 16 ] ;
31628: LD_ADDR_VAR 0 9
31632: PUSH
31633: LD_INT 14
31635: PUSH
31636: LD_INT 50
31638: PUSH
31639: LD_INT 16
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: LIST
31646: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31647: LD_VAR 0 6
31651: PPUSH
31652: CALL_OW 264
31656: PUSH
31657: LD_INT 6
31659: PUSH
31660: LD_INT 46
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: IN
31667: IFFALSE 31688
// points := [ 32 , 120 , 70 ] ;
31669: LD_ADDR_VAR 0 9
31673: PUSH
31674: LD_INT 32
31676: PUSH
31677: LD_INT 120
31679: PUSH
31680: LD_INT 70
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: LIST
31687: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31688: LD_VAR 0 6
31692: PPUSH
31693: CALL_OW 264
31697: PUSH
31698: LD_INT 7
31700: PUSH
31701: LD_INT 28
31703: PUSH
31704: LD_INT 45
31706: PUSH
31707: LD_INT 92
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: IN
31716: IFFALSE 31737
// points := [ 35 , 20 , 45 ] ;
31718: LD_ADDR_VAR 0 9
31722: PUSH
31723: LD_INT 35
31725: PUSH
31726: LD_INT 20
31728: PUSH
31729: LD_INT 45
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: LIST
31736: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31737: LD_VAR 0 6
31741: PPUSH
31742: CALL_OW 264
31746: PUSH
31747: LD_INT 47
31749: PUSH
31750: EMPTY
31751: LIST
31752: IN
31753: IFFALSE 31774
// points := [ 67 , 45 , 75 ] ;
31755: LD_ADDR_VAR 0 9
31759: PUSH
31760: LD_INT 67
31762: PUSH
31763: LD_INT 45
31765: PUSH
31766: LD_INT 75
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: LIST
31773: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31774: LD_VAR 0 6
31778: PPUSH
31779: CALL_OW 264
31783: PUSH
31784: LD_INT 26
31786: PUSH
31787: EMPTY
31788: LIST
31789: IN
31790: IFFALSE 31811
// points := [ 120 , 30 , 80 ] ;
31792: LD_ADDR_VAR 0 9
31796: PUSH
31797: LD_INT 120
31799: PUSH
31800: LD_INT 30
31802: PUSH
31803: LD_INT 80
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: LIST
31810: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31811: LD_VAR 0 6
31815: PPUSH
31816: CALL_OW 264
31820: PUSH
31821: LD_INT 22
31823: PUSH
31824: EMPTY
31825: LIST
31826: IN
31827: IFFALSE 31848
// points := [ 40 , 1 , 1 ] ;
31829: LD_ADDR_VAR 0 9
31833: PUSH
31834: LD_INT 40
31836: PUSH
31837: LD_INT 1
31839: PUSH
31840: LD_INT 1
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: LIST
31847: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31848: LD_VAR 0 6
31852: PPUSH
31853: CALL_OW 264
31857: PUSH
31858: LD_INT 29
31860: PUSH
31861: EMPTY
31862: LIST
31863: IN
31864: IFFALSE 31885
// points := [ 70 , 200 , 400 ] ;
31866: LD_ADDR_VAR 0 9
31870: PUSH
31871: LD_INT 70
31873: PUSH
31874: LD_INT 200
31876: PUSH
31877: LD_INT 400
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: LIST
31884: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31885: LD_VAR 0 6
31889: PPUSH
31890: CALL_OW 264
31894: PUSH
31895: LD_INT 14
31897: PUSH
31898: LD_INT 53
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: IN
31905: IFFALSE 31926
// points := [ 40 , 10 , 20 ] ;
31907: LD_ADDR_VAR 0 9
31911: PUSH
31912: LD_INT 40
31914: PUSH
31915: LD_INT 10
31917: PUSH
31918: LD_INT 20
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: LIST
31925: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31926: LD_VAR 0 6
31930: PPUSH
31931: CALL_OW 264
31935: PUSH
31936: LD_INT 9
31938: PUSH
31939: EMPTY
31940: LIST
31941: IN
31942: IFFALSE 31963
// points := [ 5 , 70 , 20 ] ;
31944: LD_ADDR_VAR 0 9
31948: PUSH
31949: LD_INT 5
31951: PUSH
31952: LD_INT 70
31954: PUSH
31955: LD_INT 20
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: LIST
31962: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31963: LD_VAR 0 6
31967: PPUSH
31968: CALL_OW 264
31972: PUSH
31973: LD_INT 10
31975: PUSH
31976: EMPTY
31977: LIST
31978: IN
31979: IFFALSE 32000
// points := [ 35 , 110 , 70 ] ;
31981: LD_ADDR_VAR 0 9
31985: PUSH
31986: LD_INT 35
31988: PUSH
31989: LD_INT 110
31991: PUSH
31992: LD_INT 70
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: LIST
31999: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32000: LD_VAR 0 6
32004: PPUSH
32005: CALL_OW 265
32009: PUSH
32010: LD_INT 25
32012: EQUAL
32013: IFFALSE 32034
// points := [ 80 , 65 , 100 ] ;
32015: LD_ADDR_VAR 0 9
32019: PUSH
32020: LD_INT 80
32022: PUSH
32023: LD_INT 65
32025: PUSH
32026: LD_INT 100
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: LIST
32033: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32034: LD_VAR 0 6
32038: PPUSH
32039: CALL_OW 263
32043: PUSH
32044: LD_INT 1
32046: EQUAL
32047: IFFALSE 32082
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32049: LD_ADDR_VAR 0 10
32053: PUSH
32054: LD_VAR 0 10
32058: PUSH
32059: LD_VAR 0 6
32063: PPUSH
32064: CALL_OW 311
32068: PPUSH
32069: LD_INT 3
32071: PPUSH
32072: CALL_OW 259
32076: PUSH
32077: LD_INT 4
32079: MUL
32080: MUL
32081: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32082: LD_VAR 0 6
32086: PPUSH
32087: CALL_OW 263
32091: PUSH
32092: LD_INT 2
32094: EQUAL
32095: IFFALSE 32146
// begin j := IsControledBy ( i ) ;
32097: LD_ADDR_VAR 0 7
32101: PUSH
32102: LD_VAR 0 6
32106: PPUSH
32107: CALL_OW 312
32111: ST_TO_ADDR
// if j then
32112: LD_VAR 0 7
32116: IFFALSE 32146
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32118: LD_ADDR_VAR 0 10
32122: PUSH
32123: LD_VAR 0 10
32127: PUSH
32128: LD_VAR 0 7
32132: PPUSH
32133: LD_INT 3
32135: PPUSH
32136: CALL_OW 259
32140: PUSH
32141: LD_INT 3
32143: MUL
32144: MUL
32145: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32146: LD_VAR 0 6
32150: PPUSH
32151: CALL_OW 264
32155: PUSH
32156: LD_INT 5
32158: PUSH
32159: LD_INT 6
32161: PUSH
32162: LD_INT 46
32164: PUSH
32165: LD_INT 44
32167: PUSH
32168: LD_INT 47
32170: PUSH
32171: LD_INT 45
32173: PUSH
32174: LD_INT 28
32176: PUSH
32177: LD_INT 7
32179: PUSH
32180: LD_INT 27
32182: PUSH
32183: LD_INT 29
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: IN
32198: IFFALSE 32218
32200: PUSH
32201: LD_VAR 0 1
32205: PPUSH
32206: LD_INT 52
32208: PPUSH
32209: CALL_OW 321
32213: PUSH
32214: LD_INT 2
32216: EQUAL
32217: AND
32218: IFFALSE 32235
// bpoints := bpoints * 1.2 ;
32220: LD_ADDR_VAR 0 10
32224: PUSH
32225: LD_VAR 0 10
32229: PUSH
32230: LD_REAL  1.20000000000000E+0000
32233: MUL
32234: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32235: LD_VAR 0 6
32239: PPUSH
32240: CALL_OW 264
32244: PUSH
32245: LD_INT 6
32247: PUSH
32248: LD_INT 46
32250: PUSH
32251: LD_INT 47
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: LIST
32258: IN
32259: IFFALSE 32276
// bpoints := bpoints * 1.2 ;
32261: LD_ADDR_VAR 0 10
32265: PUSH
32266: LD_VAR 0 10
32270: PUSH
32271: LD_REAL  1.20000000000000E+0000
32274: MUL
32275: ST_TO_ADDR
// end ; unit_building :
32276: GO 32290
32278: LD_INT 3
32280: DOUBLE
32281: EQUAL
32282: IFTRUE 32286
32284: GO 32289
32286: POP
// ; end ;
32287: GO 32290
32289: POP
// for j = 1 to 3 do
32290: LD_ADDR_VAR 0 7
32294: PUSH
32295: DOUBLE
32296: LD_INT 1
32298: DEC
32299: ST_TO_ADDR
32300: LD_INT 3
32302: PUSH
32303: FOR_TO
32304: IFFALSE 32357
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32306: LD_ADDR_VAR 0 5
32310: PUSH
32311: LD_VAR 0 5
32315: PPUSH
32316: LD_VAR 0 7
32320: PPUSH
32321: LD_VAR 0 5
32325: PUSH
32326: LD_VAR 0 7
32330: ARRAY
32331: PUSH
32332: LD_VAR 0 9
32336: PUSH
32337: LD_VAR 0 7
32341: ARRAY
32342: PUSH
32343: LD_VAR 0 10
32347: MUL
32348: PLUS
32349: PPUSH
32350: CALL_OW 1
32354: ST_TO_ADDR
32355: GO 32303
32357: POP
32358: POP
// end ;
32359: GO 30832
32361: POP
32362: POP
// result := Replace ( result , 4 , tmp ) ;
32363: LD_ADDR_VAR 0 5
32367: PUSH
32368: LD_VAR 0 5
32372: PPUSH
32373: LD_INT 4
32375: PPUSH
32376: LD_VAR 0 8
32380: PPUSH
32381: CALL_OW 1
32385: ST_TO_ADDR
// end ;
32386: LD_VAR 0 5
32390: RET
// export function DangerAtRange ( unit , range ) ; begin
32391: LD_INT 0
32393: PPUSH
// if not unit then
32394: LD_VAR 0 1
32398: NOT
32399: IFFALSE 32403
// exit ;
32401: GO 32448
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32403: LD_ADDR_VAR 0 3
32407: PUSH
32408: LD_VAR 0 1
32412: PPUSH
32413: CALL_OW 255
32417: PPUSH
32418: LD_VAR 0 1
32422: PPUSH
32423: CALL_OW 250
32427: PPUSH
32428: LD_VAR 0 1
32432: PPUSH
32433: CALL_OW 251
32437: PPUSH
32438: LD_VAR 0 2
32442: PPUSH
32443: CALL 30682 0 4
32447: ST_TO_ADDR
// end ;
32448: LD_VAR 0 3
32452: RET
// export function DangerInArea ( side , area ) ; begin
32453: LD_INT 0
32455: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32456: LD_ADDR_VAR 0 3
32460: PUSH
32461: LD_VAR 0 2
32465: PPUSH
32466: LD_INT 81
32468: PUSH
32469: LD_VAR 0 1
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PPUSH
32478: CALL_OW 70
32482: ST_TO_ADDR
// end ;
32483: LD_VAR 0 3
32487: RET
// export function IsExtension ( b ) ; begin
32488: LD_INT 0
32490: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32491: LD_ADDR_VAR 0 2
32495: PUSH
32496: LD_VAR 0 1
32500: PUSH
32501: LD_INT 23
32503: PUSH
32504: LD_INT 20
32506: PUSH
32507: LD_INT 22
32509: PUSH
32510: LD_INT 17
32512: PUSH
32513: LD_INT 24
32515: PUSH
32516: LD_INT 21
32518: PUSH
32519: LD_INT 19
32521: PUSH
32522: LD_INT 16
32524: PUSH
32525: LD_INT 25
32527: PUSH
32528: LD_INT 18
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: IN
32543: ST_TO_ADDR
// end ;
32544: LD_VAR 0 2
32548: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32549: LD_INT 0
32551: PPUSH
32552: PPUSH
32553: PPUSH
// result := [ ] ;
32554: LD_ADDR_VAR 0 4
32558: PUSH
32559: EMPTY
32560: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32561: LD_ADDR_VAR 0 5
32565: PUSH
32566: LD_VAR 0 2
32570: PPUSH
32571: LD_INT 21
32573: PUSH
32574: LD_INT 3
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PPUSH
32581: CALL_OW 70
32585: ST_TO_ADDR
// if not tmp then
32586: LD_VAR 0 5
32590: NOT
32591: IFFALSE 32595
// exit ;
32593: GO 32659
// if checkLink then
32595: LD_VAR 0 3
32599: IFFALSE 32649
// begin for i in tmp do
32601: LD_ADDR_VAR 0 6
32605: PUSH
32606: LD_VAR 0 5
32610: PUSH
32611: FOR_IN
32612: IFFALSE 32647
// if GetBase ( i ) <> base then
32614: LD_VAR 0 6
32618: PPUSH
32619: CALL_OW 274
32623: PUSH
32624: LD_VAR 0 1
32628: NONEQUAL
32629: IFFALSE 32645
// ComLinkToBase ( base , i ) ;
32631: LD_VAR 0 1
32635: PPUSH
32636: LD_VAR 0 6
32640: PPUSH
32641: CALL_OW 169
32645: GO 32611
32647: POP
32648: POP
// end ; result := tmp ;
32649: LD_ADDR_VAR 0 4
32653: PUSH
32654: LD_VAR 0 5
32658: ST_TO_ADDR
// end ;
32659: LD_VAR 0 4
32663: RET
// export function ComComplete ( units , b ) ; var i ; begin
32664: LD_INT 0
32666: PPUSH
32667: PPUSH
// if not units then
32668: LD_VAR 0 1
32672: NOT
32673: IFFALSE 32677
// exit ;
32675: GO 32767
// for i in units do
32677: LD_ADDR_VAR 0 4
32681: PUSH
32682: LD_VAR 0 1
32686: PUSH
32687: FOR_IN
32688: IFFALSE 32765
// if BuildingStatus ( b ) = bs_build then
32690: LD_VAR 0 2
32694: PPUSH
32695: CALL_OW 461
32699: PUSH
32700: LD_INT 1
32702: EQUAL
32703: IFFALSE 32763
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32705: LD_VAR 0 4
32709: PPUSH
32710: LD_STRING h
32712: PUSH
32713: LD_VAR 0 2
32717: PPUSH
32718: CALL_OW 250
32722: PUSH
32723: LD_VAR 0 2
32727: PPUSH
32728: CALL_OW 251
32732: PUSH
32733: LD_VAR 0 2
32737: PUSH
32738: LD_INT 0
32740: PUSH
32741: LD_INT 0
32743: PUSH
32744: LD_INT 0
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: PUSH
32756: EMPTY
32757: LIST
32758: PPUSH
32759: CALL_OW 446
32763: GO 32687
32765: POP
32766: POP
// end ;
32767: LD_VAR 0 3
32771: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32772: LD_INT 0
32774: PPUSH
32775: PPUSH
32776: PPUSH
32777: PPUSH
32778: PPUSH
32779: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32780: LD_VAR 0 1
32784: NOT
32785: IFTRUE 32802
32787: PUSH
32788: LD_VAR 0 1
32792: PPUSH
32793: CALL_OW 263
32797: PUSH
32798: LD_INT 2
32800: NONEQUAL
32801: OR
32802: IFFALSE 32806
// exit ;
32804: GO 33122
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32806: LD_ADDR_VAR 0 6
32810: PUSH
32811: LD_INT 22
32813: PUSH
32814: LD_VAR 0 1
32818: PPUSH
32819: CALL_OW 255
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 2
32830: PUSH
32831: LD_INT 30
32833: PUSH
32834: LD_INT 36
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 34
32843: PUSH
32844: LD_INT 31
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: LIST
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PPUSH
32860: CALL_OW 69
32864: ST_TO_ADDR
// if not tmp then
32865: LD_VAR 0 6
32869: NOT
32870: IFFALSE 32874
// exit ;
32872: GO 33122
// result := [ ] ;
32874: LD_ADDR_VAR 0 2
32878: PUSH
32879: EMPTY
32880: ST_TO_ADDR
// for i in tmp do
32881: LD_ADDR_VAR 0 3
32885: PUSH
32886: LD_VAR 0 6
32890: PUSH
32891: FOR_IN
32892: IFFALSE 32963
// begin t := UnitsInside ( i ) ;
32894: LD_ADDR_VAR 0 4
32898: PUSH
32899: LD_VAR 0 3
32903: PPUSH
32904: CALL_OW 313
32908: ST_TO_ADDR
// if t then
32909: LD_VAR 0 4
32913: IFFALSE 32961
// for j in t do
32915: LD_ADDR_VAR 0 7
32919: PUSH
32920: LD_VAR 0 4
32924: PUSH
32925: FOR_IN
32926: IFFALSE 32959
// result := Replace ( result , result + 1 , j ) ;
32928: LD_ADDR_VAR 0 2
32932: PUSH
32933: LD_VAR 0 2
32937: PPUSH
32938: LD_VAR 0 2
32942: PUSH
32943: LD_INT 1
32945: PLUS
32946: PPUSH
32947: LD_VAR 0 7
32951: PPUSH
32952: CALL_OW 1
32956: ST_TO_ADDR
32957: GO 32925
32959: POP
32960: POP
// end ;
32961: GO 32891
32963: POP
32964: POP
// if not result then
32965: LD_VAR 0 2
32969: NOT
32970: IFFALSE 32974
// exit ;
32972: GO 33122
// mech := result [ 1 ] ;
32974: LD_ADDR_VAR 0 5
32978: PUSH
32979: LD_VAR 0 2
32983: PUSH
32984: LD_INT 1
32986: ARRAY
32987: ST_TO_ADDR
// if result > 1 then
32988: LD_VAR 0 2
32992: PUSH
32993: LD_INT 1
32995: GREATER
32996: IFFALSE 33108
// begin for i = 2 to result do
32998: LD_ADDR_VAR 0 3
33002: PUSH
33003: DOUBLE
33004: LD_INT 2
33006: DEC
33007: ST_TO_ADDR
33008: LD_VAR 0 2
33012: PUSH
33013: FOR_TO
33014: IFFALSE 33106
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33016: LD_ADDR_VAR 0 4
33020: PUSH
33021: LD_VAR 0 2
33025: PUSH
33026: LD_VAR 0 3
33030: ARRAY
33031: PPUSH
33032: LD_INT 3
33034: PPUSH
33035: CALL_OW 259
33039: PUSH
33040: LD_VAR 0 2
33044: PUSH
33045: LD_VAR 0 3
33049: ARRAY
33050: PPUSH
33051: CALL_OW 432
33055: MINUS
33056: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33057: LD_VAR 0 4
33061: PUSH
33062: LD_VAR 0 5
33066: PPUSH
33067: LD_INT 3
33069: PPUSH
33070: CALL_OW 259
33074: PUSH
33075: LD_VAR 0 5
33079: PPUSH
33080: CALL_OW 432
33084: MINUS
33085: GREATEREQUAL
33086: IFFALSE 33104
// mech := result [ i ] ;
33088: LD_ADDR_VAR 0 5
33092: PUSH
33093: LD_VAR 0 2
33097: PUSH
33098: LD_VAR 0 3
33102: ARRAY
33103: ST_TO_ADDR
// end ;
33104: GO 33013
33106: POP
33107: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33108: LD_VAR 0 1
33112: PPUSH
33113: LD_VAR 0 5
33117: PPUSH
33118: CALL_OW 135
// end ;
33122: LD_VAR 0 2
33126: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33127: LD_INT 0
33129: PPUSH
33130: PPUSH
33131: PPUSH
33132: PPUSH
33133: PPUSH
33134: PPUSH
33135: PPUSH
33136: PPUSH
33137: PPUSH
33138: PPUSH
33139: PPUSH
33140: PPUSH
33141: PPUSH
// result := [ ] ;
33142: LD_ADDR_VAR 0 7
33146: PUSH
33147: EMPTY
33148: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33149: LD_VAR 0 1
33153: PPUSH
33154: CALL_OW 266
33158: PUSH
33159: LD_INT 0
33161: PUSH
33162: LD_INT 1
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: IN
33169: NOT
33170: IFFALSE 33174
// exit ;
33172: GO 34814
// if name then
33174: LD_VAR 0 3
33178: IFFALSE 33194
// SetBName ( base_dep , name ) ;
33180: LD_VAR 0 1
33184: PPUSH
33185: LD_VAR 0 3
33189: PPUSH
33190: CALL_OW 500
// base := GetBase ( base_dep ) ;
33194: LD_ADDR_VAR 0 15
33198: PUSH
33199: LD_VAR 0 1
33203: PPUSH
33204: CALL_OW 274
33208: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33209: LD_ADDR_VAR 0 16
33213: PUSH
33214: LD_VAR 0 1
33218: PPUSH
33219: CALL_OW 255
33223: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33224: LD_ADDR_VAR 0 17
33228: PUSH
33229: LD_VAR 0 1
33233: PPUSH
33234: CALL_OW 248
33238: ST_TO_ADDR
// if sources then
33239: LD_VAR 0 5
33243: IFFALSE 33290
// for i = 1 to 3 do
33245: LD_ADDR_VAR 0 8
33249: PUSH
33250: DOUBLE
33251: LD_INT 1
33253: DEC
33254: ST_TO_ADDR
33255: LD_INT 3
33257: PUSH
33258: FOR_TO
33259: IFFALSE 33288
// AddResourceType ( base , i , sources [ i ] ) ;
33261: LD_VAR 0 15
33265: PPUSH
33266: LD_VAR 0 8
33270: PPUSH
33271: LD_VAR 0 5
33275: PUSH
33276: LD_VAR 0 8
33280: ARRAY
33281: PPUSH
33282: CALL_OW 276
33286: GO 33258
33288: POP
33289: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33290: LD_ADDR_VAR 0 18
33294: PUSH
33295: LD_VAR 0 15
33299: PPUSH
33300: LD_VAR 0 2
33304: PPUSH
33305: LD_INT 1
33307: PPUSH
33308: CALL 32549 0 3
33312: ST_TO_ADDR
// InitHc ;
33313: CALL_OW 19
// InitUc ;
33317: CALL_OW 18
// uc_side := side ;
33321: LD_ADDR_OWVAR 20
33325: PUSH
33326: LD_VAR 0 16
33330: ST_TO_ADDR
// uc_nation := nation ;
33331: LD_ADDR_OWVAR 21
33335: PUSH
33336: LD_VAR 0 17
33340: ST_TO_ADDR
// if buildings then
33341: LD_VAR 0 18
33345: IFFALSE 34673
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33347: LD_ADDR_VAR 0 19
33351: PUSH
33352: LD_VAR 0 18
33356: PPUSH
33357: LD_INT 2
33359: PUSH
33360: LD_INT 30
33362: PUSH
33363: LD_INT 29
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 30
33372: PUSH
33373: LD_INT 30
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: LIST
33384: PPUSH
33385: CALL_OW 72
33389: ST_TO_ADDR
// if tmp then
33390: LD_VAR 0 19
33394: IFFALSE 33442
// for i in tmp do
33396: LD_ADDR_VAR 0 8
33400: PUSH
33401: LD_VAR 0 19
33405: PUSH
33406: FOR_IN
33407: IFFALSE 33440
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33409: LD_VAR 0 8
33413: PPUSH
33414: CALL_OW 250
33418: PPUSH
33419: LD_VAR 0 8
33423: PPUSH
33424: CALL_OW 251
33428: PPUSH
33429: LD_VAR 0 16
33433: PPUSH
33434: CALL_OW 441
33438: GO 33406
33440: POP
33441: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33442: LD_VAR 0 18
33446: PPUSH
33447: LD_INT 2
33449: PUSH
33450: LD_INT 30
33452: PUSH
33453: LD_INT 32
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 30
33462: PUSH
33463: LD_INT 33
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: LIST
33474: PPUSH
33475: CALL_OW 72
33479: IFFALSE 33567
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33481: LD_ADDR_VAR 0 8
33485: PUSH
33486: LD_VAR 0 18
33490: PPUSH
33491: LD_INT 2
33493: PUSH
33494: LD_INT 30
33496: PUSH
33497: LD_INT 32
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 30
33506: PUSH
33507: LD_INT 33
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: LIST
33518: PPUSH
33519: CALL_OW 72
33523: PUSH
33524: FOR_IN
33525: IFFALSE 33565
// begin if not GetBWeapon ( i ) then
33527: LD_VAR 0 8
33531: PPUSH
33532: CALL_OW 269
33536: NOT
33537: IFFALSE 33563
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33539: LD_VAR 0 8
33543: PPUSH
33544: LD_VAR 0 8
33548: PPUSH
33549: LD_VAR 0 2
33553: PPUSH
33554: CALL 34819 0 2
33558: PPUSH
33559: CALL_OW 431
// end ;
33563: GO 33524
33565: POP
33566: POP
// end ; for i = 1 to personel do
33567: LD_ADDR_VAR 0 8
33571: PUSH
33572: DOUBLE
33573: LD_INT 1
33575: DEC
33576: ST_TO_ADDR
33577: LD_VAR 0 6
33581: PUSH
33582: FOR_TO
33583: IFFALSE 34653
// begin if i > 4 then
33585: LD_VAR 0 8
33589: PUSH
33590: LD_INT 4
33592: GREATER
33593: IFFALSE 33597
// break ;
33595: GO 34653
// case i of 1 :
33597: LD_VAR 0 8
33601: PUSH
33602: LD_INT 1
33604: DOUBLE
33605: EQUAL
33606: IFTRUE 33610
33608: GO 33690
33610: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33611: LD_ADDR_VAR 0 12
33615: PUSH
33616: LD_VAR 0 18
33620: PPUSH
33621: LD_INT 22
33623: PUSH
33624: LD_VAR 0 16
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 58
33635: PUSH
33636: EMPTY
33637: LIST
33638: PUSH
33639: LD_INT 2
33641: PUSH
33642: LD_INT 30
33644: PUSH
33645: LD_INT 32
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 30
33654: PUSH
33655: LD_INT 4
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 30
33664: PUSH
33665: LD_INT 5
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: LIST
33682: PPUSH
33683: CALL_OW 72
33687: ST_TO_ADDR
33688: GO 33912
33690: LD_INT 2
33692: DOUBLE
33693: EQUAL
33694: IFTRUE 33698
33696: GO 33760
33698: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33699: LD_ADDR_VAR 0 12
33703: PUSH
33704: LD_VAR 0 18
33708: PPUSH
33709: LD_INT 22
33711: PUSH
33712: LD_VAR 0 16
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 2
33723: PUSH
33724: LD_INT 30
33726: PUSH
33727: LD_INT 0
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 30
33736: PUSH
33737: LD_INT 1
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: LIST
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PPUSH
33753: CALL_OW 72
33757: ST_TO_ADDR
33758: GO 33912
33760: LD_INT 3
33762: DOUBLE
33763: EQUAL
33764: IFTRUE 33768
33766: GO 33830
33768: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33769: LD_ADDR_VAR 0 12
33773: PUSH
33774: LD_VAR 0 18
33778: PPUSH
33779: LD_INT 22
33781: PUSH
33782: LD_VAR 0 16
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 2
33793: PUSH
33794: LD_INT 30
33796: PUSH
33797: LD_INT 2
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 30
33806: PUSH
33807: LD_INT 3
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: LIST
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PPUSH
33823: CALL_OW 72
33827: ST_TO_ADDR
33828: GO 33912
33830: LD_INT 4
33832: DOUBLE
33833: EQUAL
33834: IFTRUE 33838
33836: GO 33911
33838: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33839: LD_ADDR_VAR 0 12
33843: PUSH
33844: LD_VAR 0 18
33848: PPUSH
33849: LD_INT 22
33851: PUSH
33852: LD_VAR 0 16
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 2
33863: PUSH
33864: LD_INT 30
33866: PUSH
33867: LD_INT 6
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 30
33876: PUSH
33877: LD_INT 7
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 30
33886: PUSH
33887: LD_INT 8
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PPUSH
33904: CALL_OW 72
33908: ST_TO_ADDR
33909: GO 33912
33911: POP
// if i = 1 then
33912: LD_VAR 0 8
33916: PUSH
33917: LD_INT 1
33919: EQUAL
33920: IFFALSE 34031
// begin tmp := [ ] ;
33922: LD_ADDR_VAR 0 19
33926: PUSH
33927: EMPTY
33928: ST_TO_ADDR
// for j in f do
33929: LD_ADDR_VAR 0 9
33933: PUSH
33934: LD_VAR 0 12
33938: PUSH
33939: FOR_IN
33940: IFFALSE 34013
// if GetBType ( j ) = b_bunker then
33942: LD_VAR 0 9
33946: PPUSH
33947: CALL_OW 266
33951: PUSH
33952: LD_INT 32
33954: EQUAL
33955: IFFALSE 33982
// tmp := Insert ( tmp , 1 , j ) else
33957: LD_ADDR_VAR 0 19
33961: PUSH
33962: LD_VAR 0 19
33966: PPUSH
33967: LD_INT 1
33969: PPUSH
33970: LD_VAR 0 9
33974: PPUSH
33975: CALL_OW 2
33979: ST_TO_ADDR
33980: GO 34011
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33982: LD_ADDR_VAR 0 19
33986: PUSH
33987: LD_VAR 0 19
33991: PPUSH
33992: LD_VAR 0 19
33996: PUSH
33997: LD_INT 1
33999: PLUS
34000: PPUSH
34001: LD_VAR 0 9
34005: PPUSH
34006: CALL_OW 2
34010: ST_TO_ADDR
34011: GO 33939
34013: POP
34014: POP
// if tmp then
34015: LD_VAR 0 19
34019: IFFALSE 34031
// f := tmp ;
34021: LD_ADDR_VAR 0 12
34025: PUSH
34026: LD_VAR 0 19
34030: ST_TO_ADDR
// end ; x := personel [ i ] ;
34031: LD_ADDR_VAR 0 13
34035: PUSH
34036: LD_VAR 0 6
34040: PUSH
34041: LD_VAR 0 8
34045: ARRAY
34046: ST_TO_ADDR
// if x = - 1 then
34047: LD_VAR 0 13
34051: PUSH
34052: LD_INT 1
34054: NEG
34055: EQUAL
34056: IFFALSE 34267
// begin for j in f do
34058: LD_ADDR_VAR 0 9
34062: PUSH
34063: LD_VAR 0 12
34067: PUSH
34068: FOR_IN
34069: IFFALSE 34263
// repeat InitHc ;
34071: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34075: LD_VAR 0 9
34079: PPUSH
34080: CALL_OW 266
34084: PUSH
34085: LD_INT 5
34087: EQUAL
34088: IFFALSE 34158
// begin if UnitsInside ( j ) < 3 then
34090: LD_VAR 0 9
34094: PPUSH
34095: CALL_OW 313
34099: PUSH
34100: LD_INT 3
34102: LESS
34103: IFFALSE 34139
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34105: LD_INT 0
34107: PPUSH
34108: LD_INT 5
34110: PUSH
34111: LD_INT 8
34113: PUSH
34114: LD_INT 9
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: LIST
34121: PUSH
34122: LD_VAR 0 17
34126: ARRAY
34127: PPUSH
34128: LD_VAR 0 4
34132: PPUSH
34133: CALL_OW 380
34137: GO 34156
// PrepareHuman ( false , i , skill ) ;
34139: LD_INT 0
34141: PPUSH
34142: LD_VAR 0 8
34146: PPUSH
34147: LD_VAR 0 4
34151: PPUSH
34152: CALL_OW 380
// end else
34156: GO 34175
// PrepareHuman ( false , i , skill ) ;
34158: LD_INT 0
34160: PPUSH
34161: LD_VAR 0 8
34165: PPUSH
34166: LD_VAR 0 4
34170: PPUSH
34171: CALL_OW 380
// un := CreateHuman ;
34175: LD_ADDR_VAR 0 14
34179: PUSH
34180: CALL_OW 44
34184: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34185: LD_ADDR_VAR 0 7
34189: PUSH
34190: LD_VAR 0 7
34194: PPUSH
34195: LD_INT 1
34197: PPUSH
34198: LD_VAR 0 14
34202: PPUSH
34203: CALL_OW 2
34207: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34208: LD_VAR 0 14
34212: PPUSH
34213: LD_VAR 0 9
34217: PPUSH
34218: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34222: LD_VAR 0 9
34226: PPUSH
34227: CALL_OW 313
34231: PUSH
34232: LD_INT 6
34234: EQUAL
34235: IFTRUE 34259
34237: PUSH
34238: LD_VAR 0 9
34242: PPUSH
34243: CALL_OW 266
34247: PUSH
34248: LD_INT 32
34250: PUSH
34251: LD_INT 31
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: IN
34258: OR
34259: IFFALSE 34071
34261: GO 34068
34263: POP
34264: POP
// end else
34265: GO 34651
// for j = 1 to x do
34267: LD_ADDR_VAR 0 9
34271: PUSH
34272: DOUBLE
34273: LD_INT 1
34275: DEC
34276: ST_TO_ADDR
34277: LD_VAR 0 13
34281: PUSH
34282: FOR_TO
34283: IFFALSE 34649
// begin InitHc ;
34285: CALL_OW 19
// if not f then
34289: LD_VAR 0 12
34293: NOT
34294: IFFALSE 34383
// begin PrepareHuman ( false , i , skill ) ;
34296: LD_INT 0
34298: PPUSH
34299: LD_VAR 0 8
34303: PPUSH
34304: LD_VAR 0 4
34308: PPUSH
34309: CALL_OW 380
// un := CreateHuman ;
34313: LD_ADDR_VAR 0 14
34317: PUSH
34318: CALL_OW 44
34322: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34323: LD_ADDR_VAR 0 7
34327: PUSH
34328: LD_VAR 0 7
34332: PPUSH
34333: LD_INT 1
34335: PPUSH
34336: LD_VAR 0 14
34340: PPUSH
34341: CALL_OW 2
34345: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34346: LD_VAR 0 14
34350: PPUSH
34351: LD_VAR 0 1
34355: PPUSH
34356: CALL_OW 250
34360: PPUSH
34361: LD_VAR 0 1
34365: PPUSH
34366: CALL_OW 251
34370: PPUSH
34371: LD_INT 10
34373: PPUSH
34374: LD_INT 0
34376: PPUSH
34377: CALL_OW 50
// continue ;
34381: GO 34282
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34383: LD_VAR 0 12
34387: PUSH
34388: LD_INT 1
34390: ARRAY
34391: PPUSH
34392: CALL_OW 313
34396: IFFALSE 34424
34398: PUSH
34399: LD_VAR 0 12
34403: PUSH
34404: LD_INT 1
34406: ARRAY
34407: PPUSH
34408: CALL_OW 266
34412: PUSH
34413: LD_INT 32
34415: PUSH
34416: LD_INT 31
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: IN
34423: AND
34424: IFTRUE 34445
34426: PUSH
34427: LD_VAR 0 12
34431: PUSH
34432: LD_INT 1
34434: ARRAY
34435: PPUSH
34436: CALL_OW 313
34440: PUSH
34441: LD_INT 6
34443: EQUAL
34444: OR
34445: IFFALSE 34465
// f := Delete ( f , 1 ) ;
34447: LD_ADDR_VAR 0 12
34451: PUSH
34452: LD_VAR 0 12
34456: PPUSH
34457: LD_INT 1
34459: PPUSH
34460: CALL_OW 3
34464: ST_TO_ADDR
// if not f then
34465: LD_VAR 0 12
34469: NOT
34470: IFFALSE 34488
// begin x := x + 2 ;
34472: LD_ADDR_VAR 0 13
34476: PUSH
34477: LD_VAR 0 13
34481: PUSH
34482: LD_INT 2
34484: PLUS
34485: ST_TO_ADDR
// continue ;
34486: GO 34282
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34488: LD_VAR 0 12
34492: PUSH
34493: LD_INT 1
34495: ARRAY
34496: PPUSH
34497: CALL_OW 266
34501: PUSH
34502: LD_INT 5
34504: EQUAL
34505: IFFALSE 34579
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34507: LD_VAR 0 12
34511: PUSH
34512: LD_INT 1
34514: ARRAY
34515: PPUSH
34516: CALL_OW 313
34520: PUSH
34521: LD_INT 3
34523: LESS
34524: IFFALSE 34560
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34526: LD_INT 0
34528: PPUSH
34529: LD_INT 5
34531: PUSH
34532: LD_INT 8
34534: PUSH
34535: LD_INT 9
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: LIST
34542: PUSH
34543: LD_VAR 0 17
34547: ARRAY
34548: PPUSH
34549: LD_VAR 0 4
34553: PPUSH
34554: CALL_OW 380
34558: GO 34577
// PrepareHuman ( false , i , skill ) ;
34560: LD_INT 0
34562: PPUSH
34563: LD_VAR 0 8
34567: PPUSH
34568: LD_VAR 0 4
34572: PPUSH
34573: CALL_OW 380
// end else
34577: GO 34596
// PrepareHuman ( false , i , skill ) ;
34579: LD_INT 0
34581: PPUSH
34582: LD_VAR 0 8
34586: PPUSH
34587: LD_VAR 0 4
34591: PPUSH
34592: CALL_OW 380
// un := CreateHuman ;
34596: LD_ADDR_VAR 0 14
34600: PUSH
34601: CALL_OW 44
34605: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34606: LD_ADDR_VAR 0 7
34610: PUSH
34611: LD_VAR 0 7
34615: PPUSH
34616: LD_INT 1
34618: PPUSH
34619: LD_VAR 0 14
34623: PPUSH
34624: CALL_OW 2
34628: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34629: LD_VAR 0 14
34633: PPUSH
34634: LD_VAR 0 12
34638: PUSH
34639: LD_INT 1
34641: ARRAY
34642: PPUSH
34643: CALL_OW 52
// end ;
34647: GO 34282
34649: POP
34650: POP
// end ;
34651: GO 33582
34653: POP
34654: POP
// result := result ^ buildings ;
34655: LD_ADDR_VAR 0 7
34659: PUSH
34660: LD_VAR 0 7
34664: PUSH
34665: LD_VAR 0 18
34669: ADD
34670: ST_TO_ADDR
// end else
34671: GO 34814
// begin for i = 1 to personel do
34673: LD_ADDR_VAR 0 8
34677: PUSH
34678: DOUBLE
34679: LD_INT 1
34681: DEC
34682: ST_TO_ADDR
34683: LD_VAR 0 6
34687: PUSH
34688: FOR_TO
34689: IFFALSE 34812
// begin if i > 4 then
34691: LD_VAR 0 8
34695: PUSH
34696: LD_INT 4
34698: GREATER
34699: IFFALSE 34703
// break ;
34701: GO 34812
// x := personel [ i ] ;
34703: LD_ADDR_VAR 0 13
34707: PUSH
34708: LD_VAR 0 6
34712: PUSH
34713: LD_VAR 0 8
34717: ARRAY
34718: ST_TO_ADDR
// if x = - 1 then
34719: LD_VAR 0 13
34723: PUSH
34724: LD_INT 1
34726: NEG
34727: EQUAL
34728: IFFALSE 34732
// continue ;
34730: GO 34688
// PrepareHuman ( false , i , skill ) ;
34732: LD_INT 0
34734: PPUSH
34735: LD_VAR 0 8
34739: PPUSH
34740: LD_VAR 0 4
34744: PPUSH
34745: CALL_OW 380
// un := CreateHuman ;
34749: LD_ADDR_VAR 0 14
34753: PUSH
34754: CALL_OW 44
34758: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34759: LD_VAR 0 14
34763: PPUSH
34764: LD_VAR 0 1
34768: PPUSH
34769: CALL_OW 250
34773: PPUSH
34774: LD_VAR 0 1
34778: PPUSH
34779: CALL_OW 251
34783: PPUSH
34784: LD_INT 10
34786: PPUSH
34787: LD_INT 0
34789: PPUSH
34790: CALL_OW 50
// result := result ^ un ;
34794: LD_ADDR_VAR 0 7
34798: PUSH
34799: LD_VAR 0 7
34803: PUSH
34804: LD_VAR 0 14
34808: ADD
34809: ST_TO_ADDR
// end ;
34810: GO 34688
34812: POP
34813: POP
// end ; end ;
34814: LD_VAR 0 7
34818: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34819: LD_INT 0
34821: PPUSH
34822: PPUSH
34823: PPUSH
34824: PPUSH
34825: PPUSH
34826: PPUSH
34827: PPUSH
34828: PPUSH
34829: PPUSH
34830: PPUSH
34831: PPUSH
34832: PPUSH
34833: PPUSH
34834: PPUSH
34835: PPUSH
34836: PPUSH
// result := false ;
34837: LD_ADDR_VAR 0 3
34841: PUSH
34842: LD_INT 0
34844: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34845: LD_VAR 0 1
34849: NOT
34850: IFTRUE 34875
34852: PUSH
34853: LD_VAR 0 1
34857: PPUSH
34858: CALL_OW 266
34862: PUSH
34863: LD_INT 32
34865: PUSH
34866: LD_INT 33
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: IN
34873: NOT
34874: OR
34875: IFFALSE 34879
// exit ;
34877: GO 36014
// nat := GetNation ( tower ) ;
34879: LD_ADDR_VAR 0 12
34883: PUSH
34884: LD_VAR 0 1
34888: PPUSH
34889: CALL_OW 248
34893: ST_TO_ADDR
// side := GetSide ( tower ) ;
34894: LD_ADDR_VAR 0 16
34898: PUSH
34899: LD_VAR 0 1
34903: PPUSH
34904: CALL_OW 255
34908: ST_TO_ADDR
// x := GetX ( tower ) ;
34909: LD_ADDR_VAR 0 10
34913: PUSH
34914: LD_VAR 0 1
34918: PPUSH
34919: CALL_OW 250
34923: ST_TO_ADDR
// y := GetY ( tower ) ;
34924: LD_ADDR_VAR 0 11
34928: PUSH
34929: LD_VAR 0 1
34933: PPUSH
34934: CALL_OW 251
34938: ST_TO_ADDR
// if not x or not y then
34939: LD_VAR 0 10
34943: NOT
34944: IFTRUE 34953
34946: PUSH
34947: LD_VAR 0 11
34951: NOT
34952: OR
34953: IFFALSE 34957
// exit ;
34955: GO 36014
// weapon := 0 ;
34957: LD_ADDR_VAR 0 18
34961: PUSH
34962: LD_INT 0
34964: ST_TO_ADDR
// fac_list := [ ] ;
34965: LD_ADDR_VAR 0 17
34969: PUSH
34970: EMPTY
34971: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34972: LD_ADDR_VAR 0 6
34976: PUSH
34977: LD_VAR 0 1
34981: PPUSH
34982: CALL_OW 274
34986: PPUSH
34987: LD_VAR 0 2
34991: PPUSH
34992: LD_INT 0
34994: PPUSH
34995: CALL 32549 0 3
34999: PPUSH
35000: LD_INT 30
35002: PUSH
35003: LD_INT 3
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PPUSH
35010: CALL_OW 72
35014: ST_TO_ADDR
// if not factories then
35015: LD_VAR 0 6
35019: NOT
35020: IFFALSE 35024
// exit ;
35022: GO 36014
// for i in factories do
35024: LD_ADDR_VAR 0 8
35028: PUSH
35029: LD_VAR 0 6
35033: PUSH
35034: FOR_IN
35035: IFFALSE 35060
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35037: LD_ADDR_VAR 0 17
35041: PUSH
35042: LD_VAR 0 17
35046: PUSH
35047: LD_VAR 0 8
35051: PPUSH
35052: CALL_OW 478
35056: UNION
35057: ST_TO_ADDR
35058: GO 35034
35060: POP
35061: POP
// if not fac_list then
35062: LD_VAR 0 17
35066: NOT
35067: IFFALSE 35071
// exit ;
35069: GO 36014
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35071: LD_ADDR_VAR 0 5
35075: PUSH
35076: LD_INT 4
35078: PUSH
35079: LD_INT 5
35081: PUSH
35082: LD_INT 9
35084: PUSH
35085: LD_INT 10
35087: PUSH
35088: LD_INT 6
35090: PUSH
35091: LD_INT 7
35093: PUSH
35094: LD_INT 11
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 27
35108: PUSH
35109: LD_INT 28
35111: PUSH
35112: LD_INT 26
35114: PUSH
35115: LD_INT 30
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 43
35126: PUSH
35127: LD_INT 44
35129: PUSH
35130: LD_INT 46
35132: PUSH
35133: LD_INT 45
35135: PUSH
35136: LD_INT 47
35138: PUSH
35139: LD_INT 49
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: LIST
35154: PUSH
35155: LD_VAR 0 12
35159: ARRAY
35160: ST_TO_ADDR
// list := list isect fac_list ;
35161: LD_ADDR_VAR 0 5
35165: PUSH
35166: LD_VAR 0 5
35170: PUSH
35171: LD_VAR 0 17
35175: ISECT
35176: ST_TO_ADDR
// if not list then
35177: LD_VAR 0 5
35181: NOT
35182: IFFALSE 35186
// exit ;
35184: GO 36014
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35186: LD_VAR 0 12
35190: PUSH
35191: LD_INT 3
35193: EQUAL
35194: IFFALSE 35206
35196: PUSH
35197: LD_INT 49
35199: PUSH
35200: LD_VAR 0 5
35204: IN
35205: AND
35206: IFFALSE 35226
35208: PUSH
35209: LD_INT 31
35211: PPUSH
35212: LD_VAR 0 16
35216: PPUSH
35217: CALL_OW 321
35221: PUSH
35222: LD_INT 2
35224: EQUAL
35225: AND
35226: IFFALSE 35286
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35228: LD_INT 22
35230: PUSH
35231: LD_VAR 0 16
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 35
35242: PUSH
35243: LD_INT 49
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 91
35252: PUSH
35253: LD_VAR 0 1
35257: PUSH
35258: LD_INT 10
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: LIST
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: LIST
35270: PPUSH
35271: CALL_OW 69
35275: NOT
35276: IFFALSE 35286
// weapon := ru_time_lapser ;
35278: LD_ADDR_VAR 0 18
35282: PUSH
35283: LD_INT 49
35285: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35286: LD_VAR 0 12
35290: PUSH
35291: LD_INT 1
35293: PUSH
35294: LD_INT 2
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: IN
35301: IFFALSE 35325
35303: PUSH
35304: LD_INT 11
35306: PUSH
35307: LD_VAR 0 5
35311: IN
35312: IFTRUE 35324
35314: PUSH
35315: LD_INT 30
35317: PUSH
35318: LD_VAR 0 5
35322: IN
35323: OR
35324: AND
35325: IFFALSE 35345
35327: PUSH
35328: LD_INT 6
35330: PPUSH
35331: LD_VAR 0 16
35335: PPUSH
35336: CALL_OW 321
35340: PUSH
35341: LD_INT 2
35343: EQUAL
35344: AND
35345: IFFALSE 35512
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35347: LD_INT 22
35349: PUSH
35350: LD_VAR 0 16
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 2
35361: PUSH
35362: LD_INT 35
35364: PUSH
35365: LD_INT 11
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 35
35374: PUSH
35375: LD_INT 30
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 91
35389: PUSH
35390: LD_VAR 0 1
35394: PUSH
35395: LD_INT 18
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: LIST
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: LIST
35407: PPUSH
35408: CALL_OW 69
35412: NOT
35413: IFFALSE 35489
35415: PUSH
35416: LD_INT 22
35418: PUSH
35419: LD_VAR 0 16
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 2
35430: PUSH
35431: LD_INT 30
35433: PUSH
35434: LD_INT 32
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 30
35443: PUSH
35444: LD_INT 33
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 91
35458: PUSH
35459: LD_VAR 0 1
35463: PUSH
35464: LD_INT 12
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: LIST
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: LIST
35476: PUSH
35477: EMPTY
35478: LIST
35479: PPUSH
35480: CALL_OW 69
35484: PUSH
35485: LD_INT 2
35487: GREATER
35488: AND
35489: IFFALSE 35512
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35491: LD_ADDR_VAR 0 18
35495: PUSH
35496: LD_INT 11
35498: PUSH
35499: LD_INT 30
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_VAR 0 12
35510: ARRAY
35511: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35512: LD_VAR 0 18
35516: NOT
35517: IFFALSE 35537
35519: PUSH
35520: LD_INT 40
35522: PPUSH
35523: LD_VAR 0 16
35527: PPUSH
35528: CALL_OW 321
35532: PUSH
35533: LD_INT 2
35535: EQUAL
35536: AND
35537: IFFALSE 35573
35539: PUSH
35540: LD_INT 7
35542: PUSH
35543: LD_VAR 0 5
35547: IN
35548: IFTRUE 35560
35550: PUSH
35551: LD_INT 28
35553: PUSH
35554: LD_VAR 0 5
35558: IN
35559: OR
35560: IFTRUE 35572
35562: PUSH
35563: LD_INT 45
35565: PUSH
35566: LD_VAR 0 5
35570: IN
35571: OR
35572: AND
35573: IFFALSE 35827
// begin hex := GetHexInfo ( x , y ) ;
35575: LD_ADDR_VAR 0 4
35579: PUSH
35580: LD_VAR 0 10
35584: PPUSH
35585: LD_VAR 0 11
35589: PPUSH
35590: CALL_OW 546
35594: ST_TO_ADDR
// if hex [ 1 ] then
35595: LD_VAR 0 4
35599: PUSH
35600: LD_INT 1
35602: ARRAY
35603: IFFALSE 35607
// exit ;
35605: GO 36014
// height := hex [ 2 ] ;
35607: LD_ADDR_VAR 0 15
35611: PUSH
35612: LD_VAR 0 4
35616: PUSH
35617: LD_INT 2
35619: ARRAY
35620: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35621: LD_ADDR_VAR 0 14
35625: PUSH
35626: LD_INT 0
35628: PUSH
35629: LD_INT 2
35631: PUSH
35632: LD_INT 3
35634: PUSH
35635: LD_INT 5
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: ST_TO_ADDR
// for i in tmp do
35644: LD_ADDR_VAR 0 8
35648: PUSH
35649: LD_VAR 0 14
35653: PUSH
35654: FOR_IN
35655: IFFALSE 35825
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35657: LD_ADDR_VAR 0 9
35661: PUSH
35662: LD_VAR 0 10
35666: PPUSH
35667: LD_VAR 0 8
35671: PPUSH
35672: LD_INT 5
35674: PPUSH
35675: CALL_OW 272
35679: PUSH
35680: LD_VAR 0 11
35684: PPUSH
35685: LD_VAR 0 8
35689: PPUSH
35690: LD_INT 5
35692: PPUSH
35693: CALL_OW 273
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35702: LD_VAR 0 9
35706: PUSH
35707: LD_INT 1
35709: ARRAY
35710: PPUSH
35711: LD_VAR 0 9
35715: PUSH
35716: LD_INT 2
35718: ARRAY
35719: PPUSH
35720: CALL_OW 488
35724: IFFALSE 35823
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35726: LD_ADDR_VAR 0 4
35730: PUSH
35731: LD_VAR 0 9
35735: PUSH
35736: LD_INT 1
35738: ARRAY
35739: PPUSH
35740: LD_VAR 0 9
35744: PUSH
35745: LD_INT 2
35747: ARRAY
35748: PPUSH
35749: CALL_OW 546
35753: ST_TO_ADDR
// if hex [ 1 ] then
35754: LD_VAR 0 4
35758: PUSH
35759: LD_INT 1
35761: ARRAY
35762: IFFALSE 35766
// continue ;
35764: GO 35654
// h := hex [ 2 ] ;
35766: LD_ADDR_VAR 0 13
35770: PUSH
35771: LD_VAR 0 4
35775: PUSH
35776: LD_INT 2
35778: ARRAY
35779: ST_TO_ADDR
// if h + 7 < height then
35780: LD_VAR 0 13
35784: PUSH
35785: LD_INT 7
35787: PLUS
35788: PUSH
35789: LD_VAR 0 15
35793: LESS
35794: IFFALSE 35823
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35796: LD_ADDR_VAR 0 18
35800: PUSH
35801: LD_INT 7
35803: PUSH
35804: LD_INT 28
35806: PUSH
35807: LD_INT 45
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: LIST
35814: PUSH
35815: LD_VAR 0 12
35819: ARRAY
35820: ST_TO_ADDR
// break ;
35821: GO 35825
// end ; end ; end ;
35823: GO 35654
35825: POP
35826: POP
// end ; if not weapon then
35827: LD_VAR 0 18
35831: NOT
35832: IFFALSE 35892
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35834: LD_ADDR_VAR 0 5
35838: PUSH
35839: LD_VAR 0 5
35843: PUSH
35844: LD_INT 11
35846: PUSH
35847: LD_INT 30
35849: PUSH
35850: LD_INT 49
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: LIST
35857: DIFF
35858: ST_TO_ADDR
// if not list then
35859: LD_VAR 0 5
35863: NOT
35864: IFFALSE 35868
// exit ;
35866: GO 36014
// weapon := list [ rand ( 1 , list ) ] ;
35868: LD_ADDR_VAR 0 18
35872: PUSH
35873: LD_VAR 0 5
35877: PUSH
35878: LD_INT 1
35880: PPUSH
35881: LD_VAR 0 5
35885: PPUSH
35886: CALL_OW 12
35890: ARRAY
35891: ST_TO_ADDR
// end ; if weapon then
35892: LD_VAR 0 18
35896: IFFALSE 36014
// begin tmp := CostOfWeapon ( weapon ) ;
35898: LD_ADDR_VAR 0 14
35902: PUSH
35903: LD_VAR 0 18
35907: PPUSH
35908: CALL_OW 451
35912: ST_TO_ADDR
// j := GetBase ( tower ) ;
35913: LD_ADDR_VAR 0 9
35917: PUSH
35918: LD_VAR 0 1
35922: PPUSH
35923: CALL_OW 274
35927: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35928: LD_VAR 0 9
35932: PPUSH
35933: LD_INT 1
35935: PPUSH
35936: CALL_OW 275
35940: PUSH
35941: LD_VAR 0 14
35945: PUSH
35946: LD_INT 1
35948: ARRAY
35949: GREATEREQUAL
35950: IFFALSE 35976
35952: PUSH
35953: LD_VAR 0 9
35957: PPUSH
35958: LD_INT 2
35960: PPUSH
35961: CALL_OW 275
35965: PUSH
35966: LD_VAR 0 14
35970: PUSH
35971: LD_INT 2
35973: ARRAY
35974: GREATEREQUAL
35975: AND
35976: IFFALSE 36002
35978: PUSH
35979: LD_VAR 0 9
35983: PPUSH
35984: LD_INT 3
35986: PPUSH
35987: CALL_OW 275
35991: PUSH
35992: LD_VAR 0 14
35996: PUSH
35997: LD_INT 3
35999: ARRAY
36000: GREATEREQUAL
36001: AND
36002: IFFALSE 36014
// result := weapon ;
36004: LD_ADDR_VAR 0 3
36008: PUSH
36009: LD_VAR 0 18
36013: ST_TO_ADDR
// end ; end ;
36014: LD_VAR 0 3
36018: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36019: LD_INT 0
36021: PPUSH
36022: PPUSH
// result := true ;
36023: LD_ADDR_VAR 0 3
36027: PUSH
36028: LD_INT 1
36030: ST_TO_ADDR
// if array1 = array2 then
36031: LD_VAR 0 1
36035: PUSH
36036: LD_VAR 0 2
36040: EQUAL
36041: IFFALSE 36101
// begin for i = 1 to array1 do
36043: LD_ADDR_VAR 0 4
36047: PUSH
36048: DOUBLE
36049: LD_INT 1
36051: DEC
36052: ST_TO_ADDR
36053: LD_VAR 0 1
36057: PUSH
36058: FOR_TO
36059: IFFALSE 36097
// if array1 [ i ] <> array2 [ i ] then
36061: LD_VAR 0 1
36065: PUSH
36066: LD_VAR 0 4
36070: ARRAY
36071: PUSH
36072: LD_VAR 0 2
36076: PUSH
36077: LD_VAR 0 4
36081: ARRAY
36082: NONEQUAL
36083: IFFALSE 36095
// begin result := false ;
36085: LD_ADDR_VAR 0 3
36089: PUSH
36090: LD_INT 0
36092: ST_TO_ADDR
// break ;
36093: GO 36097
// end ;
36095: GO 36058
36097: POP
36098: POP
// end else
36099: GO 36109
// result := false ;
36101: LD_ADDR_VAR 0 3
36105: PUSH
36106: LD_INT 0
36108: ST_TO_ADDR
// end ;
36109: LD_VAR 0 3
36113: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36114: LD_INT 0
36116: PPUSH
36117: PPUSH
// if not array1 or not array2 then
36118: LD_VAR 0 1
36122: NOT
36123: IFTRUE 36132
36125: PUSH
36126: LD_VAR 0 2
36130: NOT
36131: OR
36132: IFFALSE 36136
// exit ;
36134: GO 36200
// result := true ;
36136: LD_ADDR_VAR 0 3
36140: PUSH
36141: LD_INT 1
36143: ST_TO_ADDR
// for i = 1 to array1 do
36144: LD_ADDR_VAR 0 4
36148: PUSH
36149: DOUBLE
36150: LD_INT 1
36152: DEC
36153: ST_TO_ADDR
36154: LD_VAR 0 1
36158: PUSH
36159: FOR_TO
36160: IFFALSE 36198
// if array1 [ i ] <> array2 [ i ] then
36162: LD_VAR 0 1
36166: PUSH
36167: LD_VAR 0 4
36171: ARRAY
36172: PUSH
36173: LD_VAR 0 2
36177: PUSH
36178: LD_VAR 0 4
36182: ARRAY
36183: NONEQUAL
36184: IFFALSE 36196
// begin result := false ;
36186: LD_ADDR_VAR 0 3
36190: PUSH
36191: LD_INT 0
36193: ST_TO_ADDR
// break ;
36194: GO 36198
// end ;
36196: GO 36159
36198: POP
36199: POP
// end ;
36200: LD_VAR 0 3
36204: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36205: LD_INT 0
36207: PPUSH
36208: PPUSH
36209: PPUSH
// pom := GetBase ( fac ) ;
36210: LD_ADDR_VAR 0 5
36214: PUSH
36215: LD_VAR 0 1
36219: PPUSH
36220: CALL_OW 274
36224: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36225: LD_ADDR_VAR 0 4
36229: PUSH
36230: LD_VAR 0 2
36234: PUSH
36235: LD_INT 1
36237: ARRAY
36238: PPUSH
36239: LD_VAR 0 2
36243: PUSH
36244: LD_INT 2
36246: ARRAY
36247: PPUSH
36248: LD_VAR 0 2
36252: PUSH
36253: LD_INT 3
36255: ARRAY
36256: PPUSH
36257: LD_VAR 0 2
36261: PUSH
36262: LD_INT 4
36264: ARRAY
36265: PPUSH
36266: CALL_OW 449
36270: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36271: LD_ADDR_VAR 0 3
36275: PUSH
36276: LD_VAR 0 5
36280: PPUSH
36281: LD_INT 1
36283: PPUSH
36284: CALL_OW 275
36288: PUSH
36289: LD_VAR 0 4
36293: PUSH
36294: LD_INT 1
36296: ARRAY
36297: GREATEREQUAL
36298: IFFALSE 36324
36300: PUSH
36301: LD_VAR 0 5
36305: PPUSH
36306: LD_INT 2
36308: PPUSH
36309: CALL_OW 275
36313: PUSH
36314: LD_VAR 0 4
36318: PUSH
36319: LD_INT 2
36321: ARRAY
36322: GREATEREQUAL
36323: AND
36324: IFFALSE 36350
36326: PUSH
36327: LD_VAR 0 5
36331: PPUSH
36332: LD_INT 3
36334: PPUSH
36335: CALL_OW 275
36339: PUSH
36340: LD_VAR 0 4
36344: PUSH
36345: LD_INT 3
36347: ARRAY
36348: GREATEREQUAL
36349: AND
36350: ST_TO_ADDR
// end ;
36351: LD_VAR 0 3
36355: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36356: LD_INT 0
36358: PPUSH
36359: PPUSH
36360: PPUSH
36361: PPUSH
// pom := GetBase ( building ) ;
36362: LD_ADDR_VAR 0 3
36366: PUSH
36367: LD_VAR 0 1
36371: PPUSH
36372: CALL_OW 274
36376: ST_TO_ADDR
// if not pom then
36377: LD_VAR 0 3
36381: NOT
36382: IFFALSE 36386
// exit ;
36384: GO 36560
// btype := GetBType ( building ) ;
36386: LD_ADDR_VAR 0 5
36390: PUSH
36391: LD_VAR 0 1
36395: PPUSH
36396: CALL_OW 266
36400: ST_TO_ADDR
// if btype = b_armoury then
36401: LD_VAR 0 5
36405: PUSH
36406: LD_INT 4
36408: EQUAL
36409: IFFALSE 36419
// btype := b_barracks ;
36411: LD_ADDR_VAR 0 5
36415: PUSH
36416: LD_INT 5
36418: ST_TO_ADDR
// if btype = b_depot then
36419: LD_VAR 0 5
36423: PUSH
36424: LD_INT 0
36426: EQUAL
36427: IFFALSE 36437
// btype := b_warehouse ;
36429: LD_ADDR_VAR 0 5
36433: PUSH
36434: LD_INT 1
36436: ST_TO_ADDR
// if btype = b_workshop then
36437: LD_VAR 0 5
36441: PUSH
36442: LD_INT 2
36444: EQUAL
36445: IFFALSE 36455
// btype := b_factory ;
36447: LD_ADDR_VAR 0 5
36451: PUSH
36452: LD_INT 3
36454: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36455: LD_ADDR_VAR 0 4
36459: PUSH
36460: LD_VAR 0 5
36464: PPUSH
36465: LD_VAR 0 1
36469: PPUSH
36470: CALL_OW 248
36474: PPUSH
36475: CALL_OW 450
36479: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36480: LD_ADDR_VAR 0 2
36484: PUSH
36485: LD_VAR 0 3
36489: PPUSH
36490: LD_INT 1
36492: PPUSH
36493: CALL_OW 275
36497: PUSH
36498: LD_VAR 0 4
36502: PUSH
36503: LD_INT 1
36505: ARRAY
36506: GREATEREQUAL
36507: IFFALSE 36533
36509: PUSH
36510: LD_VAR 0 3
36514: PPUSH
36515: LD_INT 2
36517: PPUSH
36518: CALL_OW 275
36522: PUSH
36523: LD_VAR 0 4
36527: PUSH
36528: LD_INT 2
36530: ARRAY
36531: GREATEREQUAL
36532: AND
36533: IFFALSE 36559
36535: PUSH
36536: LD_VAR 0 3
36540: PPUSH
36541: LD_INT 3
36543: PPUSH
36544: CALL_OW 275
36548: PUSH
36549: LD_VAR 0 4
36553: PUSH
36554: LD_INT 3
36556: ARRAY
36557: GREATEREQUAL
36558: AND
36559: ST_TO_ADDR
// end ;
36560: LD_VAR 0 2
36564: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36565: LD_INT 0
36567: PPUSH
36568: PPUSH
36569: PPUSH
// pom := GetBase ( building ) ;
36570: LD_ADDR_VAR 0 4
36574: PUSH
36575: LD_VAR 0 1
36579: PPUSH
36580: CALL_OW 274
36584: ST_TO_ADDR
// if not pom then
36585: LD_VAR 0 4
36589: NOT
36590: IFFALSE 36594
// exit ;
36592: GO 36699
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36594: LD_ADDR_VAR 0 5
36598: PUSH
36599: LD_VAR 0 2
36603: PPUSH
36604: LD_VAR 0 1
36608: PPUSH
36609: CALL_OW 248
36613: PPUSH
36614: CALL_OW 450
36618: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36619: LD_ADDR_VAR 0 3
36623: PUSH
36624: LD_VAR 0 4
36628: PPUSH
36629: LD_INT 1
36631: PPUSH
36632: CALL_OW 275
36636: PUSH
36637: LD_VAR 0 5
36641: PUSH
36642: LD_INT 1
36644: ARRAY
36645: GREATEREQUAL
36646: IFFALSE 36672
36648: PUSH
36649: LD_VAR 0 4
36653: PPUSH
36654: LD_INT 2
36656: PPUSH
36657: CALL_OW 275
36661: PUSH
36662: LD_VAR 0 5
36666: PUSH
36667: LD_INT 2
36669: ARRAY
36670: GREATEREQUAL
36671: AND
36672: IFFALSE 36698
36674: PUSH
36675: LD_VAR 0 4
36679: PPUSH
36680: LD_INT 3
36682: PPUSH
36683: CALL_OW 275
36687: PUSH
36688: LD_VAR 0 5
36692: PUSH
36693: LD_INT 3
36695: ARRAY
36696: GREATEREQUAL
36697: AND
36698: ST_TO_ADDR
// end ;
36699: LD_VAR 0 3
36703: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36704: LD_INT 0
36706: PPUSH
36707: PPUSH
36708: PPUSH
36709: PPUSH
36710: PPUSH
36711: PPUSH
36712: PPUSH
36713: PPUSH
36714: PPUSH
36715: PPUSH
36716: PPUSH
// result := false ;
36717: LD_ADDR_VAR 0 8
36721: PUSH
36722: LD_INT 0
36724: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36725: LD_VAR 0 5
36729: NOT
36730: IFTRUE 36739
36732: PUSH
36733: LD_VAR 0 1
36737: NOT
36738: OR
36739: IFTRUE 36748
36741: PUSH
36742: LD_VAR 0 2
36746: NOT
36747: OR
36748: IFTRUE 36757
36750: PUSH
36751: LD_VAR 0 3
36755: NOT
36756: OR
36757: IFFALSE 36761
// exit ;
36759: GO 37587
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36761: LD_ADDR_VAR 0 14
36765: PUSH
36766: LD_VAR 0 1
36770: PPUSH
36771: LD_VAR 0 2
36775: PPUSH
36776: LD_VAR 0 3
36780: PPUSH
36781: LD_VAR 0 4
36785: PPUSH
36786: LD_VAR 0 5
36790: PUSH
36791: LD_INT 1
36793: ARRAY
36794: PPUSH
36795: CALL_OW 248
36799: PPUSH
36800: LD_INT 0
36802: PPUSH
36803: CALL 38868 0 6
36807: ST_TO_ADDR
// if not hexes then
36808: LD_VAR 0 14
36812: NOT
36813: IFFALSE 36817
// exit ;
36815: GO 37587
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36817: LD_ADDR_VAR 0 17
36821: PUSH
36822: LD_VAR 0 5
36826: PPUSH
36827: LD_INT 22
36829: PUSH
36830: LD_VAR 0 13
36834: PPUSH
36835: CALL_OW 255
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 2
36846: PUSH
36847: LD_INT 30
36849: PUSH
36850: LD_INT 0
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 30
36859: PUSH
36860: LD_INT 1
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: LIST
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PPUSH
36876: CALL_OW 72
36880: ST_TO_ADDR
// for i = 1 to hexes do
36881: LD_ADDR_VAR 0 9
36885: PUSH
36886: DOUBLE
36887: LD_INT 1
36889: DEC
36890: ST_TO_ADDR
36891: LD_VAR 0 14
36895: PUSH
36896: FOR_TO
36897: IFFALSE 37585
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36899: LD_ADDR_VAR 0 13
36903: PUSH
36904: LD_VAR 0 14
36908: PUSH
36909: LD_VAR 0 9
36913: ARRAY
36914: PUSH
36915: LD_INT 1
36917: ARRAY
36918: PPUSH
36919: LD_VAR 0 14
36923: PUSH
36924: LD_VAR 0 9
36928: ARRAY
36929: PUSH
36930: LD_INT 2
36932: ARRAY
36933: PPUSH
36934: CALL_OW 428
36938: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36939: LD_VAR 0 14
36943: PUSH
36944: LD_VAR 0 9
36948: ARRAY
36949: PUSH
36950: LD_INT 1
36952: ARRAY
36953: PPUSH
36954: LD_VAR 0 14
36958: PUSH
36959: LD_VAR 0 9
36963: ARRAY
36964: PUSH
36965: LD_INT 2
36967: ARRAY
36968: PPUSH
36969: CALL_OW 351
36973: IFTRUE 37012
36975: PUSH
36976: LD_VAR 0 14
36980: PUSH
36981: LD_VAR 0 9
36985: ARRAY
36986: PUSH
36987: LD_INT 1
36989: ARRAY
36990: PPUSH
36991: LD_VAR 0 14
36995: PUSH
36996: LD_VAR 0 9
37000: ARRAY
37001: PUSH
37002: LD_INT 2
37004: ARRAY
37005: PPUSH
37006: CALL_OW 488
37010: NOT
37011: OR
37012: IFTRUE 37029
37014: PUSH
37015: LD_VAR 0 13
37019: PPUSH
37020: CALL_OW 247
37024: PUSH
37025: LD_INT 3
37027: EQUAL
37028: OR
37029: IFFALSE 37035
// exit ;
37031: POP
37032: POP
37033: GO 37587
// if not tmp then
37035: LD_VAR 0 13
37039: NOT
37040: IFFALSE 37044
// continue ;
37042: GO 36896
// result := true ;
37044: LD_ADDR_VAR 0 8
37048: PUSH
37049: LD_INT 1
37051: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37052: LD_VAR 0 6
37056: IFFALSE 37073
37058: PUSH
37059: LD_VAR 0 13
37063: PPUSH
37064: CALL_OW 247
37068: PUSH
37069: LD_INT 2
37071: EQUAL
37072: AND
37073: IFFALSE 37090
37075: PUSH
37076: LD_VAR 0 13
37080: PPUSH
37081: CALL_OW 263
37085: PUSH
37086: LD_INT 1
37088: EQUAL
37089: AND
37090: IFFALSE 37254
// begin if IsDrivenBy ( tmp ) then
37092: LD_VAR 0 13
37096: PPUSH
37097: CALL_OW 311
37101: IFFALSE 37105
// continue ;
37103: GO 36896
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37105: LD_VAR 0 6
37109: PPUSH
37110: LD_INT 3
37112: PUSH
37113: LD_INT 60
37115: PUSH
37116: EMPTY
37117: LIST
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 3
37125: PUSH
37126: LD_INT 55
37128: PUSH
37129: EMPTY
37130: LIST
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PPUSH
37140: CALL_OW 72
37144: IFFALSE 37252
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37146: LD_ADDR_VAR 0 18
37150: PUSH
37151: LD_VAR 0 6
37155: PPUSH
37156: LD_INT 3
37158: PUSH
37159: LD_INT 60
37161: PUSH
37162: EMPTY
37163: LIST
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 3
37171: PUSH
37172: LD_INT 55
37174: PUSH
37175: EMPTY
37176: LIST
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PPUSH
37186: CALL_OW 72
37190: PUSH
37191: LD_INT 1
37193: ARRAY
37194: ST_TO_ADDR
// if IsInUnit ( driver ) then
37195: LD_VAR 0 18
37199: PPUSH
37200: CALL_OW 310
37204: IFFALSE 37215
// ComExit ( driver ) ;
37206: LD_VAR 0 18
37210: PPUSH
37211: CALL 62858 0 1
// AddComEnterUnit ( driver , tmp ) ;
37215: LD_VAR 0 18
37219: PPUSH
37220: LD_VAR 0 13
37224: PPUSH
37225: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37229: LD_VAR 0 18
37233: PPUSH
37234: LD_VAR 0 7
37238: PPUSH
37239: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37243: LD_VAR 0 18
37247: PPUSH
37248: CALL_OW 181
// end ; continue ;
37252: GO 36896
// end ; if not cleaners or not tmp in cleaners then
37254: LD_VAR 0 6
37258: NOT
37259: IFTRUE 37274
37261: PUSH
37262: LD_VAR 0 13
37266: PUSH
37267: LD_VAR 0 6
37271: IN
37272: NOT
37273: OR
37274: IFFALSE 37583
// begin if dep then
37276: LD_VAR 0 17
37280: IFFALSE 37416
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37282: LD_ADDR_VAR 0 16
37286: PUSH
37287: LD_VAR 0 17
37291: PUSH
37292: LD_INT 1
37294: ARRAY
37295: PPUSH
37296: CALL_OW 250
37300: PPUSH
37301: LD_VAR 0 17
37305: PUSH
37306: LD_INT 1
37308: ARRAY
37309: PPUSH
37310: CALL_OW 254
37314: PPUSH
37315: LD_INT 5
37317: PPUSH
37318: CALL_OW 272
37322: PUSH
37323: LD_VAR 0 17
37327: PUSH
37328: LD_INT 1
37330: ARRAY
37331: PPUSH
37332: CALL_OW 251
37336: PPUSH
37337: LD_VAR 0 17
37341: PUSH
37342: LD_INT 1
37344: ARRAY
37345: PPUSH
37346: CALL_OW 254
37350: PPUSH
37351: LD_INT 5
37353: PPUSH
37354: CALL_OW 273
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37363: LD_VAR 0 16
37367: PUSH
37368: LD_INT 1
37370: ARRAY
37371: PPUSH
37372: LD_VAR 0 16
37376: PUSH
37377: LD_INT 2
37379: ARRAY
37380: PPUSH
37381: CALL_OW 488
37385: IFFALSE 37416
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37387: LD_VAR 0 13
37391: PPUSH
37392: LD_VAR 0 16
37396: PUSH
37397: LD_INT 1
37399: ARRAY
37400: PPUSH
37401: LD_VAR 0 16
37405: PUSH
37406: LD_INT 2
37408: ARRAY
37409: PPUSH
37410: CALL_OW 111
// continue ;
37414: GO 36896
// end ; end ; r := GetDir ( tmp ) ;
37416: LD_ADDR_VAR 0 15
37420: PUSH
37421: LD_VAR 0 13
37425: PPUSH
37426: CALL_OW 254
37430: ST_TO_ADDR
// if r = 5 then
37431: LD_VAR 0 15
37435: PUSH
37436: LD_INT 5
37438: EQUAL
37439: IFFALSE 37449
// r := 0 ;
37441: LD_ADDR_VAR 0 15
37445: PUSH
37446: LD_INT 0
37448: ST_TO_ADDR
// for j = r to 5 do
37449: LD_ADDR_VAR 0 10
37453: PUSH
37454: DOUBLE
37455: LD_VAR 0 15
37459: DEC
37460: ST_TO_ADDR
37461: LD_INT 5
37463: PUSH
37464: FOR_TO
37465: IFFALSE 37581
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37467: LD_ADDR_VAR 0 11
37471: PUSH
37472: LD_VAR 0 13
37476: PPUSH
37477: CALL_OW 250
37481: PPUSH
37482: LD_VAR 0 10
37486: PPUSH
37487: LD_INT 2
37489: PPUSH
37490: CALL_OW 272
37494: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37495: LD_ADDR_VAR 0 12
37499: PUSH
37500: LD_VAR 0 13
37504: PPUSH
37505: CALL_OW 251
37509: PPUSH
37510: LD_VAR 0 10
37514: PPUSH
37515: LD_INT 2
37517: PPUSH
37518: CALL_OW 273
37522: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37523: LD_VAR 0 11
37527: PPUSH
37528: LD_VAR 0 12
37532: PPUSH
37533: CALL_OW 488
37537: IFFALSE 37556
37539: PUSH
37540: LD_VAR 0 11
37544: PPUSH
37545: LD_VAR 0 12
37549: PPUSH
37550: CALL_OW 428
37554: NOT
37555: AND
37556: IFFALSE 37579
// begin ComMoveXY ( tmp , _x , _y ) ;
37558: LD_VAR 0 13
37562: PPUSH
37563: LD_VAR 0 11
37567: PPUSH
37568: LD_VAR 0 12
37572: PPUSH
37573: CALL_OW 111
// break ;
37577: GO 37581
// end ; end ;
37579: GO 37464
37581: POP
37582: POP
// end ; end ;
37583: GO 36896
37585: POP
37586: POP
// end ;
37587: LD_VAR 0 8
37591: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37592: LD_INT 0
37594: PPUSH
// result := true ;
37595: LD_ADDR_VAR 0 3
37599: PUSH
37600: LD_INT 1
37602: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37603: LD_VAR 0 2
37607: PUSH
37608: LD_INT 24
37610: DOUBLE
37611: EQUAL
37612: IFTRUE 37622
37614: LD_INT 33
37616: DOUBLE
37617: EQUAL
37618: IFTRUE 37622
37620: GO 37647
37622: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37623: LD_ADDR_VAR 0 3
37627: PUSH
37628: LD_INT 32
37630: PPUSH
37631: LD_VAR 0 1
37635: PPUSH
37636: CALL_OW 321
37640: PUSH
37641: LD_INT 2
37643: EQUAL
37644: ST_TO_ADDR
37645: GO 37963
37647: LD_INT 20
37649: DOUBLE
37650: EQUAL
37651: IFTRUE 37655
37653: GO 37680
37655: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37656: LD_ADDR_VAR 0 3
37660: PUSH
37661: LD_INT 6
37663: PPUSH
37664: LD_VAR 0 1
37668: PPUSH
37669: CALL_OW 321
37673: PUSH
37674: LD_INT 2
37676: EQUAL
37677: ST_TO_ADDR
37678: GO 37963
37680: LD_INT 22
37682: DOUBLE
37683: EQUAL
37684: IFTRUE 37694
37686: LD_INT 36
37688: DOUBLE
37689: EQUAL
37690: IFTRUE 37694
37692: GO 37719
37694: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37695: LD_ADDR_VAR 0 3
37699: PUSH
37700: LD_INT 15
37702: PPUSH
37703: LD_VAR 0 1
37707: PPUSH
37708: CALL_OW 321
37712: PUSH
37713: LD_INT 2
37715: EQUAL
37716: ST_TO_ADDR
37717: GO 37963
37719: LD_INT 30
37721: DOUBLE
37722: EQUAL
37723: IFTRUE 37727
37725: GO 37752
37727: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37728: LD_ADDR_VAR 0 3
37732: PUSH
37733: LD_INT 20
37735: PPUSH
37736: LD_VAR 0 1
37740: PPUSH
37741: CALL_OW 321
37745: PUSH
37746: LD_INT 2
37748: EQUAL
37749: ST_TO_ADDR
37750: GO 37963
37752: LD_INT 28
37754: DOUBLE
37755: EQUAL
37756: IFTRUE 37766
37758: LD_INT 21
37760: DOUBLE
37761: EQUAL
37762: IFTRUE 37766
37764: GO 37791
37766: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37767: LD_ADDR_VAR 0 3
37771: PUSH
37772: LD_INT 21
37774: PPUSH
37775: LD_VAR 0 1
37779: PPUSH
37780: CALL_OW 321
37784: PUSH
37785: LD_INT 2
37787: EQUAL
37788: ST_TO_ADDR
37789: GO 37963
37791: LD_INT 16
37793: DOUBLE
37794: EQUAL
37795: IFTRUE 37799
37797: GO 37824
37799: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37800: LD_ADDR_VAR 0 3
37804: PUSH
37805: LD_INT 84
37807: PPUSH
37808: LD_VAR 0 1
37812: PPUSH
37813: CALL_OW 321
37817: PUSH
37818: LD_INT 2
37820: EQUAL
37821: ST_TO_ADDR
37822: GO 37963
37824: LD_INT 19
37826: DOUBLE
37827: EQUAL
37828: IFTRUE 37838
37830: LD_INT 23
37832: DOUBLE
37833: EQUAL
37834: IFTRUE 37838
37836: GO 37863
37838: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37839: LD_ADDR_VAR 0 3
37843: PUSH
37844: LD_INT 83
37846: PPUSH
37847: LD_VAR 0 1
37851: PPUSH
37852: CALL_OW 321
37856: PUSH
37857: LD_INT 2
37859: EQUAL
37860: ST_TO_ADDR
37861: GO 37963
37863: LD_INT 17
37865: DOUBLE
37866: EQUAL
37867: IFTRUE 37871
37869: GO 37896
37871: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37872: LD_ADDR_VAR 0 3
37876: PUSH
37877: LD_INT 39
37879: PPUSH
37880: LD_VAR 0 1
37884: PPUSH
37885: CALL_OW 321
37889: PUSH
37890: LD_INT 2
37892: EQUAL
37893: ST_TO_ADDR
37894: GO 37963
37896: LD_INT 18
37898: DOUBLE
37899: EQUAL
37900: IFTRUE 37904
37902: GO 37929
37904: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37905: LD_ADDR_VAR 0 3
37909: PUSH
37910: LD_INT 40
37912: PPUSH
37913: LD_VAR 0 1
37917: PPUSH
37918: CALL_OW 321
37922: PUSH
37923: LD_INT 2
37925: EQUAL
37926: ST_TO_ADDR
37927: GO 37963
37929: LD_INT 27
37931: DOUBLE
37932: EQUAL
37933: IFTRUE 37937
37935: GO 37962
37937: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37938: LD_ADDR_VAR 0 3
37942: PUSH
37943: LD_INT 35
37945: PPUSH
37946: LD_VAR 0 1
37950: PPUSH
37951: CALL_OW 321
37955: PUSH
37956: LD_INT 2
37958: EQUAL
37959: ST_TO_ADDR
37960: GO 37963
37962: POP
// end ;
37963: LD_VAR 0 3
37967: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37968: LD_INT 0
37970: PPUSH
37971: PPUSH
37972: PPUSH
37973: PPUSH
37974: PPUSH
37975: PPUSH
37976: PPUSH
37977: PPUSH
37978: PPUSH
37979: PPUSH
37980: PPUSH
// result := false ;
37981: LD_ADDR_VAR 0 6
37985: PUSH
37986: LD_INT 0
37988: ST_TO_ADDR
// if btype = b_depot then
37989: LD_VAR 0 2
37993: PUSH
37994: LD_INT 0
37996: EQUAL
37997: IFFALSE 38009
// begin result := true ;
37999: LD_ADDR_VAR 0 6
38003: PUSH
38004: LD_INT 1
38006: ST_TO_ADDR
// exit ;
38007: GO 38863
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38009: LD_VAR 0 1
38013: NOT
38014: IFTRUE 38039
38016: PUSH
38017: LD_VAR 0 1
38021: PPUSH
38022: CALL_OW 266
38026: PUSH
38027: LD_INT 0
38029: PUSH
38030: LD_INT 1
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: IN
38037: NOT
38038: OR
38039: IFTRUE 38048
38041: PUSH
38042: LD_VAR 0 2
38046: NOT
38047: OR
38048: IFTRUE 38084
38050: PUSH
38051: LD_VAR 0 5
38055: PUSH
38056: LD_INT 0
38058: PUSH
38059: LD_INT 1
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: LD_INT 3
38067: PUSH
38068: LD_INT 4
38070: PUSH
38071: LD_INT 5
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: IN
38082: NOT
38083: OR
38084: IFTRUE 38103
38086: PUSH
38087: LD_VAR 0 3
38091: PPUSH
38092: LD_VAR 0 4
38096: PPUSH
38097: CALL_OW 488
38101: NOT
38102: OR
38103: IFFALSE 38107
// exit ;
38105: GO 38863
// side := GetSide ( depot ) ;
38107: LD_ADDR_VAR 0 9
38111: PUSH
38112: LD_VAR 0 1
38116: PPUSH
38117: CALL_OW 255
38121: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38122: LD_VAR 0 9
38126: PPUSH
38127: LD_VAR 0 2
38131: PPUSH
38132: CALL 37592 0 2
38136: NOT
38137: IFFALSE 38141
// exit ;
38139: GO 38863
// pom := GetBase ( depot ) ;
38141: LD_ADDR_VAR 0 10
38145: PUSH
38146: LD_VAR 0 1
38150: PPUSH
38151: CALL_OW 274
38155: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38156: LD_ADDR_VAR 0 11
38160: PUSH
38161: LD_VAR 0 2
38165: PPUSH
38166: LD_VAR 0 1
38170: PPUSH
38171: CALL_OW 248
38175: PPUSH
38176: CALL_OW 450
38180: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38181: LD_VAR 0 10
38185: PPUSH
38186: LD_INT 1
38188: PPUSH
38189: CALL_OW 275
38193: PUSH
38194: LD_VAR 0 11
38198: PUSH
38199: LD_INT 1
38201: ARRAY
38202: GREATEREQUAL
38203: IFFALSE 38229
38205: PUSH
38206: LD_VAR 0 10
38210: PPUSH
38211: LD_INT 2
38213: PPUSH
38214: CALL_OW 275
38218: PUSH
38219: LD_VAR 0 11
38223: PUSH
38224: LD_INT 2
38226: ARRAY
38227: GREATEREQUAL
38228: AND
38229: IFFALSE 38255
38231: PUSH
38232: LD_VAR 0 10
38236: PPUSH
38237: LD_INT 3
38239: PPUSH
38240: CALL_OW 275
38244: PUSH
38245: LD_VAR 0 11
38249: PUSH
38250: LD_INT 3
38252: ARRAY
38253: GREATEREQUAL
38254: AND
38255: NOT
38256: IFFALSE 38260
// exit ;
38258: GO 38863
// if GetBType ( depot ) = b_depot then
38260: LD_VAR 0 1
38264: PPUSH
38265: CALL_OW 266
38269: PUSH
38270: LD_INT 0
38272: EQUAL
38273: IFFALSE 38285
// dist := 28 else
38275: LD_ADDR_VAR 0 14
38279: PUSH
38280: LD_INT 28
38282: ST_TO_ADDR
38283: GO 38293
// dist := 36 ;
38285: LD_ADDR_VAR 0 14
38289: PUSH
38290: LD_INT 36
38292: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38293: LD_VAR 0 1
38297: PPUSH
38298: LD_VAR 0 3
38302: PPUSH
38303: LD_VAR 0 4
38307: PPUSH
38308: CALL_OW 297
38312: PUSH
38313: LD_VAR 0 14
38317: GREATER
38318: IFFALSE 38322
// exit ;
38320: GO 38863
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38322: LD_ADDR_VAR 0 12
38326: PUSH
38327: LD_VAR 0 2
38331: PPUSH
38332: LD_VAR 0 3
38336: PPUSH
38337: LD_VAR 0 4
38341: PPUSH
38342: LD_VAR 0 5
38346: PPUSH
38347: LD_VAR 0 1
38351: PPUSH
38352: CALL_OW 248
38356: PPUSH
38357: LD_INT 0
38359: PPUSH
38360: CALL 38868 0 6
38364: ST_TO_ADDR
// if not hexes then
38365: LD_VAR 0 12
38369: NOT
38370: IFFALSE 38374
// exit ;
38372: GO 38863
// hex := GetHexInfo ( x , y ) ;
38374: LD_ADDR_VAR 0 15
38378: PUSH
38379: LD_VAR 0 3
38383: PPUSH
38384: LD_VAR 0 4
38388: PPUSH
38389: CALL_OW 546
38393: ST_TO_ADDR
// if hex [ 1 ] then
38394: LD_VAR 0 15
38398: PUSH
38399: LD_INT 1
38401: ARRAY
38402: IFFALSE 38406
// exit ;
38404: GO 38863
// height := hex [ 2 ] ;
38406: LD_ADDR_VAR 0 13
38410: PUSH
38411: LD_VAR 0 15
38415: PUSH
38416: LD_INT 2
38418: ARRAY
38419: ST_TO_ADDR
// for i = 1 to hexes do
38420: LD_ADDR_VAR 0 7
38424: PUSH
38425: DOUBLE
38426: LD_INT 1
38428: DEC
38429: ST_TO_ADDR
38430: LD_VAR 0 12
38434: PUSH
38435: FOR_TO
38436: IFFALSE 38780
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38438: LD_VAR 0 12
38442: PUSH
38443: LD_VAR 0 7
38447: ARRAY
38448: PUSH
38449: LD_INT 1
38451: ARRAY
38452: PPUSH
38453: LD_VAR 0 12
38457: PUSH
38458: LD_VAR 0 7
38462: ARRAY
38463: PUSH
38464: LD_INT 2
38466: ARRAY
38467: PPUSH
38468: CALL_OW 488
38472: NOT
38473: IFTRUE 38515
38475: PUSH
38476: LD_VAR 0 12
38480: PUSH
38481: LD_VAR 0 7
38485: ARRAY
38486: PUSH
38487: LD_INT 1
38489: ARRAY
38490: PPUSH
38491: LD_VAR 0 12
38495: PUSH
38496: LD_VAR 0 7
38500: ARRAY
38501: PUSH
38502: LD_INT 2
38504: ARRAY
38505: PPUSH
38506: CALL_OW 428
38510: PUSH
38511: LD_INT 0
38513: GREATER
38514: OR
38515: IFTRUE 38553
38517: PUSH
38518: LD_VAR 0 12
38522: PUSH
38523: LD_VAR 0 7
38527: ARRAY
38528: PUSH
38529: LD_INT 1
38531: ARRAY
38532: PPUSH
38533: LD_VAR 0 12
38537: PUSH
38538: LD_VAR 0 7
38542: ARRAY
38543: PUSH
38544: LD_INT 2
38546: ARRAY
38547: PPUSH
38548: CALL_OW 351
38552: OR
38553: IFFALSE 38559
// exit ;
38555: POP
38556: POP
38557: GO 38863
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38559: LD_ADDR_VAR 0 8
38563: PUSH
38564: LD_VAR 0 12
38568: PUSH
38569: LD_VAR 0 7
38573: ARRAY
38574: PUSH
38575: LD_INT 1
38577: ARRAY
38578: PPUSH
38579: LD_VAR 0 12
38583: PUSH
38584: LD_VAR 0 7
38588: ARRAY
38589: PUSH
38590: LD_INT 2
38592: ARRAY
38593: PPUSH
38594: CALL_OW 546
38598: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38599: LD_VAR 0 8
38603: PUSH
38604: LD_INT 1
38606: ARRAY
38607: IFTRUE 38629
38609: PUSH
38610: LD_VAR 0 8
38614: PUSH
38615: LD_INT 2
38617: ARRAY
38618: PUSH
38619: LD_VAR 0 13
38623: PUSH
38624: LD_INT 2
38626: PLUS
38627: GREATER
38628: OR
38629: IFTRUE 38651
38631: PUSH
38632: LD_VAR 0 8
38636: PUSH
38637: LD_INT 2
38639: ARRAY
38640: PUSH
38641: LD_VAR 0 13
38645: PUSH
38646: LD_INT 2
38648: MINUS
38649: LESS
38650: OR
38651: IFTRUE 38719
38653: PUSH
38654: LD_VAR 0 8
38658: PUSH
38659: LD_INT 3
38661: ARRAY
38662: PUSH
38663: LD_INT 0
38665: PUSH
38666: LD_INT 8
38668: PUSH
38669: LD_INT 9
38671: PUSH
38672: LD_INT 10
38674: PUSH
38675: LD_INT 11
38677: PUSH
38678: LD_INT 12
38680: PUSH
38681: LD_INT 13
38683: PUSH
38684: LD_INT 16
38686: PUSH
38687: LD_INT 17
38689: PUSH
38690: LD_INT 18
38692: PUSH
38693: LD_INT 19
38695: PUSH
38696: LD_INT 20
38698: PUSH
38699: LD_INT 21
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: IN
38717: NOT
38718: OR
38719: IFTRUE 38732
38721: PUSH
38722: LD_VAR 0 8
38726: PUSH
38727: LD_INT 5
38729: ARRAY
38730: NOT
38731: OR
38732: IFTRUE 38772
38734: PUSH
38735: LD_VAR 0 8
38739: PUSH
38740: LD_INT 6
38742: ARRAY
38743: PUSH
38744: LD_INT 1
38746: PUSH
38747: LD_INT 2
38749: PUSH
38750: LD_INT 7
38752: PUSH
38753: LD_INT 9
38755: PUSH
38756: LD_INT 10
38758: PUSH
38759: LD_INT 11
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: IN
38770: NOT
38771: OR
38772: IFFALSE 38778
// exit ;
38774: POP
38775: POP
38776: GO 38863
// end ;
38778: GO 38435
38780: POP
38781: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38782: LD_VAR 0 9
38786: PPUSH
38787: LD_VAR 0 3
38791: PPUSH
38792: LD_VAR 0 4
38796: PPUSH
38797: LD_INT 20
38799: PPUSH
38800: CALL 30682 0 4
38804: PUSH
38805: LD_INT 4
38807: ARRAY
38808: IFFALSE 38812
// exit ;
38810: GO 38863
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38812: LD_VAR 0 2
38816: PUSH
38817: LD_INT 29
38819: PUSH
38820: LD_INT 30
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: IN
38827: IFFALSE 38851
38829: PUSH
38830: LD_VAR 0 3
38834: PPUSH
38835: LD_VAR 0 4
38839: PPUSH
38840: LD_VAR 0 9
38844: PPUSH
38845: CALL_OW 440
38849: NOT
38850: AND
38851: IFFALSE 38855
// exit ;
38853: GO 38863
// result := true ;
38855: LD_ADDR_VAR 0 6
38859: PUSH
38860: LD_INT 1
38862: ST_TO_ADDR
// end ;
38863: LD_VAR 0 6
38867: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38868: LD_INT 0
38870: PPUSH
38871: PPUSH
38872: PPUSH
38873: PPUSH
38874: PPUSH
38875: PPUSH
38876: PPUSH
38877: PPUSH
38878: PPUSH
38879: PPUSH
38880: PPUSH
38881: PPUSH
38882: PPUSH
38883: PPUSH
38884: PPUSH
38885: PPUSH
38886: PPUSH
38887: PPUSH
38888: PPUSH
38889: PPUSH
38890: PPUSH
38891: PPUSH
38892: PPUSH
38893: PPUSH
38894: PPUSH
38895: PPUSH
38896: PPUSH
38897: PPUSH
38898: PPUSH
38899: PPUSH
38900: PPUSH
38901: PPUSH
38902: PPUSH
38903: PPUSH
38904: PPUSH
38905: PPUSH
38906: PPUSH
38907: PPUSH
38908: PPUSH
38909: PPUSH
38910: PPUSH
38911: PPUSH
38912: PPUSH
38913: PPUSH
38914: PPUSH
38915: PPUSH
38916: PPUSH
38917: PPUSH
38918: PPUSH
38919: PPUSH
38920: PPUSH
38921: PPUSH
38922: PPUSH
38923: PPUSH
38924: PPUSH
38925: PPUSH
38926: PPUSH
38927: PPUSH
// result = [ ] ;
38928: LD_ADDR_VAR 0 7
38932: PUSH
38933: EMPTY
38934: ST_TO_ADDR
// temp_list = [ ] ;
38935: LD_ADDR_VAR 0 9
38939: PUSH
38940: EMPTY
38941: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38942: LD_VAR 0 4
38946: PUSH
38947: LD_INT 0
38949: PUSH
38950: LD_INT 1
38952: PUSH
38953: LD_INT 2
38955: PUSH
38956: LD_INT 3
38958: PUSH
38959: LD_INT 4
38961: PUSH
38962: LD_INT 5
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: IN
38973: NOT
38974: IFTRUE 39017
38976: PUSH
38977: LD_VAR 0 1
38981: PUSH
38982: LD_INT 0
38984: PUSH
38985: LD_INT 1
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: IN
38992: IFFALSE 39016
38994: PUSH
38995: LD_VAR 0 5
38999: PUSH
39000: LD_INT 1
39002: PUSH
39003: LD_INT 2
39005: PUSH
39006: LD_INT 3
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: LIST
39013: IN
39014: NOT
39015: AND
39016: OR
39017: IFFALSE 39021
// exit ;
39019: GO 57420
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39021: LD_VAR 0 1
39025: PUSH
39026: LD_INT 6
39028: PUSH
39029: LD_INT 7
39031: PUSH
39032: LD_INT 8
39034: PUSH
39035: LD_INT 13
39037: PUSH
39038: LD_INT 12
39040: PUSH
39041: LD_INT 15
39043: PUSH
39044: LD_INT 11
39046: PUSH
39047: LD_INT 14
39049: PUSH
39050: LD_INT 10
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: IN
39064: IFFALSE 39074
// btype = b_lab ;
39066: LD_ADDR_VAR 0 1
39070: PUSH
39071: LD_INT 6
39073: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39074: LD_VAR 0 6
39078: PUSH
39079: LD_INT 0
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: LD_INT 2
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: LIST
39092: IN
39093: NOT
39094: IFTRUE 39162
39096: PUSH
39097: LD_VAR 0 1
39101: PUSH
39102: LD_INT 0
39104: PUSH
39105: LD_INT 1
39107: PUSH
39108: LD_INT 2
39110: PUSH
39111: LD_INT 3
39113: PUSH
39114: LD_INT 6
39116: PUSH
39117: LD_INT 36
39119: PUSH
39120: LD_INT 4
39122: PUSH
39123: LD_INT 5
39125: PUSH
39126: LD_INT 31
39128: PUSH
39129: LD_INT 32
39131: PUSH
39132: LD_INT 33
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: IN
39148: NOT
39149: IFFALSE 39161
39151: PUSH
39152: LD_VAR 0 6
39156: PUSH
39157: LD_INT 1
39159: EQUAL
39160: AND
39161: OR
39162: IFTRUE 39194
39164: PUSH
39165: LD_VAR 0 1
39169: PUSH
39170: LD_INT 2
39172: PUSH
39173: LD_INT 3
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: IN
39180: NOT
39181: IFFALSE 39193
39183: PUSH
39184: LD_VAR 0 6
39188: PUSH
39189: LD_INT 2
39191: EQUAL
39192: AND
39193: OR
39194: IFFALSE 39204
// mode = 0 ;
39196: LD_ADDR_VAR 0 6
39200: PUSH
39201: LD_INT 0
39203: ST_TO_ADDR
// case mode of 0 :
39204: LD_VAR 0 6
39208: PUSH
39209: LD_INT 0
39211: DOUBLE
39212: EQUAL
39213: IFTRUE 39217
39215: GO 50670
39217: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39218: LD_ADDR_VAR 0 11
39222: PUSH
39223: LD_INT 0
39225: PUSH
39226: LD_INT 0
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 0
39235: PUSH
39236: LD_INT 1
39238: NEG
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 1
39246: PUSH
39247: LD_INT 0
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 1
39256: PUSH
39257: LD_INT 1
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 0
39266: PUSH
39267: LD_INT 1
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 1
39276: NEG
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 1
39287: NEG
39288: PUSH
39289: LD_INT 1
39291: NEG
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 1
39299: NEG
39300: PUSH
39301: LD_INT 2
39303: NEG
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 0
39311: PUSH
39312: LD_INT 2
39314: NEG
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 1
39322: PUSH
39323: LD_INT 1
39325: NEG
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 1
39333: PUSH
39334: LD_INT 2
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 0
39343: PUSH
39344: LD_INT 2
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 1
39353: NEG
39354: PUSH
39355: LD_INT 1
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 1
39364: PUSH
39365: LD_INT 3
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 0
39374: PUSH
39375: LD_INT 3
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 1
39384: NEG
39385: PUSH
39386: LD_INT 2
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39411: LD_ADDR_VAR 0 12
39415: PUSH
39416: LD_INT 0
39418: PUSH
39419: LD_INT 0
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 0
39428: PUSH
39429: LD_INT 1
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 1
39439: PUSH
39440: LD_INT 0
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 1
39449: PUSH
39450: LD_INT 1
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 0
39459: PUSH
39460: LD_INT 1
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 1
39469: NEG
39470: PUSH
39471: LD_INT 0
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 1
39480: NEG
39481: PUSH
39482: LD_INT 1
39484: NEG
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 1
39492: PUSH
39493: LD_INT 1
39495: NEG
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 2
39503: PUSH
39504: LD_INT 0
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 2
39513: PUSH
39514: LD_INT 1
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 1
39523: NEG
39524: PUSH
39525: LD_INT 1
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 2
39534: NEG
39535: PUSH
39536: LD_INT 0
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 2
39545: NEG
39546: PUSH
39547: LD_INT 1
39549: NEG
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 2
39557: NEG
39558: PUSH
39559: LD_INT 1
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 3
39568: NEG
39569: PUSH
39570: LD_INT 0
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 3
39579: NEG
39580: PUSH
39581: LD_INT 1
39583: NEG
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39607: LD_ADDR_VAR 0 13
39611: PUSH
39612: LD_INT 0
39614: PUSH
39615: LD_INT 0
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 0
39624: PUSH
39625: LD_INT 1
39627: NEG
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 1
39635: PUSH
39636: LD_INT 0
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 1
39645: PUSH
39646: LD_INT 1
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 0
39655: PUSH
39656: LD_INT 1
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 1
39665: NEG
39666: PUSH
39667: LD_INT 0
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 1
39676: NEG
39677: PUSH
39678: LD_INT 1
39680: NEG
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 1
39688: NEG
39689: PUSH
39690: LD_INT 2
39692: NEG
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 2
39700: PUSH
39701: LD_INT 1
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 2
39710: PUSH
39711: LD_INT 2
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 1
39720: PUSH
39721: LD_INT 2
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 2
39730: NEG
39731: PUSH
39732: LD_INT 1
39734: NEG
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 2
39742: NEG
39743: PUSH
39744: LD_INT 2
39746: NEG
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 2
39754: NEG
39755: PUSH
39756: LD_INT 3
39758: NEG
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 3
39766: NEG
39767: PUSH
39768: LD_INT 2
39770: NEG
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 3
39778: NEG
39779: PUSH
39780: LD_INT 3
39782: NEG
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39806: LD_ADDR_VAR 0 14
39810: PUSH
39811: LD_INT 0
39813: PUSH
39814: LD_INT 0
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 0
39823: PUSH
39824: LD_INT 1
39826: NEG
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 1
39834: PUSH
39835: LD_INT 0
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 1
39844: PUSH
39845: LD_INT 1
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 0
39854: PUSH
39855: LD_INT 1
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 1
39864: NEG
39865: PUSH
39866: LD_INT 0
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 1
39875: NEG
39876: PUSH
39877: LD_INT 1
39879: NEG
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 1
39887: NEG
39888: PUSH
39889: LD_INT 2
39891: NEG
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 0
39899: PUSH
39900: LD_INT 2
39902: NEG
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 1
39910: PUSH
39911: LD_INT 1
39913: NEG
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 1
39921: PUSH
39922: LD_INT 2
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 0
39931: PUSH
39932: LD_INT 2
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 1
39941: NEG
39942: PUSH
39943: LD_INT 1
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 1
39952: NEG
39953: PUSH
39954: LD_INT 3
39956: NEG
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 0
39964: PUSH
39965: LD_INT 3
39967: NEG
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 1
39975: PUSH
39976: LD_INT 2
39978: NEG
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40002: LD_ADDR_VAR 0 15
40006: PUSH
40007: LD_INT 0
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: LD_INT 1
40022: NEG
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 1
40030: PUSH
40031: LD_INT 0
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 1
40040: PUSH
40041: LD_INT 1
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 0
40050: PUSH
40051: LD_INT 1
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 1
40060: NEG
40061: PUSH
40062: LD_INT 0
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 1
40071: NEG
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 1
40083: PUSH
40084: LD_INT 1
40086: NEG
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 2
40094: PUSH
40095: LD_INT 0
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 2
40104: PUSH
40105: LD_INT 1
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 1
40114: NEG
40115: PUSH
40116: LD_INT 1
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 2
40125: NEG
40126: PUSH
40127: LD_INT 0
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 2
40136: NEG
40137: PUSH
40138: LD_INT 1
40140: NEG
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 2
40148: PUSH
40149: LD_INT 1
40151: NEG
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 3
40159: PUSH
40160: LD_INT 0
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 3
40169: PUSH
40170: LD_INT 1
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: LIST
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40195: LD_ADDR_VAR 0 16
40199: PUSH
40200: LD_INT 0
40202: PUSH
40203: LD_INT 0
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 0
40212: PUSH
40213: LD_INT 1
40215: NEG
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 1
40223: PUSH
40224: LD_INT 0
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 1
40233: PUSH
40234: LD_INT 1
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 0
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 1
40253: NEG
40254: PUSH
40255: LD_INT 0
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 1
40264: NEG
40265: PUSH
40266: LD_INT 1
40268: NEG
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: LD_INT 2
40280: NEG
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 2
40288: PUSH
40289: LD_INT 1
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 2
40298: PUSH
40299: LD_INT 2
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 1
40308: PUSH
40309: LD_INT 2
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 2
40318: NEG
40319: PUSH
40320: LD_INT 1
40322: NEG
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 2
40330: NEG
40331: PUSH
40332: LD_INT 2
40334: NEG
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 3
40342: PUSH
40343: LD_INT 2
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 3
40352: PUSH
40353: LD_INT 3
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 2
40362: PUSH
40363: LD_INT 3
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40388: LD_ADDR_VAR 0 17
40392: PUSH
40393: LD_INT 0
40395: PUSH
40396: LD_INT 0
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: LD_INT 1
40408: NEG
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 1
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: LD_INT 1
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 0
40436: PUSH
40437: LD_INT 1
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 1
40446: NEG
40447: PUSH
40448: LD_INT 0
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 1
40457: NEG
40458: PUSH
40459: LD_INT 1
40461: NEG
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 1
40469: NEG
40470: PUSH
40471: LD_INT 2
40473: NEG
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 0
40481: PUSH
40482: LD_INT 2
40484: NEG
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 1
40492: PUSH
40493: LD_INT 1
40495: NEG
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 2
40503: PUSH
40504: LD_INT 0
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 2
40513: PUSH
40514: LD_INT 1
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 2
40523: PUSH
40524: LD_INT 2
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 1
40533: PUSH
40534: LD_INT 2
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 0
40543: PUSH
40544: LD_INT 2
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 1
40553: NEG
40554: PUSH
40555: LD_INT 1
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 2
40564: NEG
40565: PUSH
40566: LD_INT 0
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 2
40575: NEG
40576: PUSH
40577: LD_INT 1
40579: NEG
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 2
40587: NEG
40588: PUSH
40589: LD_INT 2
40591: NEG
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40618: LD_ADDR_VAR 0 18
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: LD_INT 0
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 0
40635: PUSH
40636: LD_INT 1
40638: NEG
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 1
40646: PUSH
40647: LD_INT 0
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 0
40666: PUSH
40667: LD_INT 1
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 1
40676: NEG
40677: PUSH
40678: LD_INT 0
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 1
40687: NEG
40688: PUSH
40689: LD_INT 1
40691: NEG
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 1
40699: NEG
40700: PUSH
40701: LD_INT 2
40703: NEG
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 0
40711: PUSH
40712: LD_INT 2
40714: NEG
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 1
40722: PUSH
40723: LD_INT 1
40725: NEG
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 2
40733: PUSH
40734: LD_INT 0
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 2
40743: PUSH
40744: LD_INT 1
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 2
40753: PUSH
40754: LD_INT 2
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 1
40763: PUSH
40764: LD_INT 2
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 0
40773: PUSH
40774: LD_INT 2
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 1
40783: NEG
40784: PUSH
40785: LD_INT 1
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 2
40794: NEG
40795: PUSH
40796: LD_INT 0
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 2
40805: NEG
40806: PUSH
40807: LD_INT 1
40809: NEG
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 2
40817: NEG
40818: PUSH
40819: LD_INT 2
40821: NEG
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40848: LD_ADDR_VAR 0 19
40852: PUSH
40853: LD_INT 0
40855: PUSH
40856: LD_INT 0
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: LD_INT 1
40868: NEG
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 1
40876: PUSH
40877: LD_INT 0
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 1
40886: PUSH
40887: LD_INT 1
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 0
40896: PUSH
40897: LD_INT 1
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 1
40906: NEG
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 1
40917: NEG
40918: PUSH
40919: LD_INT 1
40921: NEG
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 1
40929: NEG
40930: PUSH
40931: LD_INT 2
40933: NEG
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: LD_INT 2
40944: NEG
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 1
40952: PUSH
40953: LD_INT 1
40955: NEG
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 2
40963: PUSH
40964: LD_INT 0
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 2
40973: PUSH
40974: LD_INT 1
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 2
40983: PUSH
40984: LD_INT 2
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 1
40993: PUSH
40994: LD_INT 2
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 0
41003: PUSH
41004: LD_INT 2
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 1
41013: NEG
41014: PUSH
41015: LD_INT 1
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 2
41024: NEG
41025: PUSH
41026: LD_INT 0
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 2
41035: NEG
41036: PUSH
41037: LD_INT 1
41039: NEG
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 2
41047: NEG
41048: PUSH
41049: LD_INT 2
41051: NEG
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41078: LD_ADDR_VAR 0 20
41082: PUSH
41083: LD_INT 0
41085: PUSH
41086: LD_INT 0
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 0
41095: PUSH
41096: LD_INT 1
41098: NEG
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 1
41106: PUSH
41107: LD_INT 0
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 1
41116: PUSH
41117: LD_INT 1
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 0
41126: PUSH
41127: LD_INT 1
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 1
41136: NEG
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 1
41147: NEG
41148: PUSH
41149: LD_INT 1
41151: NEG
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 1
41159: NEG
41160: PUSH
41161: LD_INT 2
41163: NEG
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 0
41171: PUSH
41172: LD_INT 2
41174: NEG
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 1
41182: PUSH
41183: LD_INT 1
41185: NEG
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 2
41193: PUSH
41194: LD_INT 0
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 2
41203: PUSH
41204: LD_INT 1
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 2
41213: PUSH
41214: LD_INT 2
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 1
41223: PUSH
41224: LD_INT 2
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 0
41233: PUSH
41234: LD_INT 2
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 1
41243: NEG
41244: PUSH
41245: LD_INT 1
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 2
41254: NEG
41255: PUSH
41256: LD_INT 0
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 2
41265: NEG
41266: PUSH
41267: LD_INT 1
41269: NEG
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 2
41277: NEG
41278: PUSH
41279: LD_INT 2
41281: NEG
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41308: LD_ADDR_VAR 0 21
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: LD_INT 0
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: LD_INT 1
41328: NEG
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 1
41336: PUSH
41337: LD_INT 0
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: LD_INT 1
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 0
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 1
41366: NEG
41367: PUSH
41368: LD_INT 0
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 1
41377: NEG
41378: PUSH
41379: LD_INT 1
41381: NEG
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: NEG
41390: PUSH
41391: LD_INT 2
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 0
41401: PUSH
41402: LD_INT 2
41404: NEG
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 1
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 2
41423: PUSH
41424: LD_INT 0
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 2
41433: PUSH
41434: LD_INT 1
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 2
41443: PUSH
41444: LD_INT 2
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 1
41453: PUSH
41454: LD_INT 2
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 0
41463: PUSH
41464: LD_INT 2
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 1
41473: NEG
41474: PUSH
41475: LD_INT 1
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 2
41484: NEG
41485: PUSH
41486: LD_INT 0
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 2
41495: NEG
41496: PUSH
41497: LD_INT 1
41499: NEG
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 2
41507: NEG
41508: PUSH
41509: LD_INT 2
41511: NEG
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41538: LD_ADDR_VAR 0 22
41542: PUSH
41543: LD_INT 0
41545: PUSH
41546: LD_INT 0
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: LD_INT 1
41558: NEG
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 1
41566: PUSH
41567: LD_INT 0
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 1
41576: PUSH
41577: LD_INT 1
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: LD_INT 1
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 1
41596: NEG
41597: PUSH
41598: LD_INT 0
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 1
41607: NEG
41608: PUSH
41609: LD_INT 1
41611: NEG
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 1
41619: NEG
41620: PUSH
41621: LD_INT 2
41623: NEG
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 0
41631: PUSH
41632: LD_INT 2
41634: NEG
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 1
41642: PUSH
41643: LD_INT 1
41645: NEG
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 2
41653: PUSH
41654: LD_INT 0
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 2
41663: PUSH
41664: LD_INT 1
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 2
41673: PUSH
41674: LD_INT 2
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: LD_INT 2
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 0
41693: PUSH
41694: LD_INT 2
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 1
41703: NEG
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 2
41714: NEG
41715: PUSH
41716: LD_INT 0
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 2
41725: NEG
41726: PUSH
41727: LD_INT 1
41729: NEG
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 2
41737: NEG
41738: PUSH
41739: LD_INT 2
41741: NEG
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41768: LD_ADDR_VAR 0 23
41772: PUSH
41773: LD_INT 0
41775: PUSH
41776: LD_INT 0
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 0
41785: PUSH
41786: LD_INT 1
41788: NEG
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 1
41796: PUSH
41797: LD_INT 0
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 1
41806: PUSH
41807: LD_INT 1
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 0
41816: PUSH
41817: LD_INT 1
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 1
41826: NEG
41827: PUSH
41828: LD_INT 0
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 1
41837: NEG
41838: PUSH
41839: LD_INT 1
41841: NEG
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 1
41849: NEG
41850: PUSH
41851: LD_INT 2
41853: NEG
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 0
41861: PUSH
41862: LD_INT 2
41864: NEG
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 1
41872: PUSH
41873: LD_INT 1
41875: NEG
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 2
41883: PUSH
41884: LD_INT 0
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 2
41893: PUSH
41894: LD_INT 1
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 2
41903: PUSH
41904: LD_INT 2
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: LD_INT 2
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: LD_INT 2
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 1
41933: NEG
41934: PUSH
41935: LD_INT 1
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 2
41944: NEG
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 2
41955: NEG
41956: PUSH
41957: LD_INT 1
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 2
41967: NEG
41968: PUSH
41969: LD_INT 2
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 2
41979: NEG
41980: PUSH
41981: LD_INT 3
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 1
41991: NEG
41992: PUSH
41993: LD_INT 3
41995: NEG
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 1
42003: PUSH
42004: LD_INT 2
42006: NEG
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 2
42014: PUSH
42015: LD_INT 1
42017: NEG
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42048: LD_ADDR_VAR 0 24
42052: PUSH
42053: LD_INT 0
42055: PUSH
42056: LD_INT 0
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 0
42065: PUSH
42066: LD_INT 1
42068: NEG
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 1
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 1
42086: PUSH
42087: LD_INT 1
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 0
42096: PUSH
42097: LD_INT 1
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 1
42106: NEG
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 1
42117: NEG
42118: PUSH
42119: LD_INT 1
42121: NEG
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 1
42129: NEG
42130: PUSH
42131: LD_INT 2
42133: NEG
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: LD_INT 2
42144: NEG
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: LD_INT 1
42155: NEG
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 2
42163: PUSH
42164: LD_INT 0
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 2
42173: PUSH
42174: LD_INT 1
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 2
42183: PUSH
42184: LD_INT 2
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: LD_INT 2
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: LD_INT 2
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 1
42213: NEG
42214: PUSH
42215: LD_INT 1
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 2
42224: NEG
42225: PUSH
42226: LD_INT 0
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 2
42235: NEG
42236: PUSH
42237: LD_INT 1
42239: NEG
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 2
42247: NEG
42248: PUSH
42249: LD_INT 2
42251: NEG
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 1
42259: PUSH
42260: LD_INT 2
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 2
42270: PUSH
42271: LD_INT 1
42273: NEG
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 3
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 3
42291: PUSH
42292: LD_INT 2
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42324: LD_ADDR_VAR 0 25
42328: PUSH
42329: LD_INT 0
42331: PUSH
42332: LD_INT 0
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: LD_INT 1
42344: NEG
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 1
42352: PUSH
42353: LD_INT 0
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 0
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 1
42382: NEG
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 1
42393: NEG
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 1
42405: NEG
42406: PUSH
42407: LD_INT 2
42409: NEG
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 0
42417: PUSH
42418: LD_INT 2
42420: NEG
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 1
42428: PUSH
42429: LD_INT 1
42431: NEG
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 2
42439: PUSH
42440: LD_INT 0
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 2
42449: PUSH
42450: LD_INT 1
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 2
42459: PUSH
42460: LD_INT 2
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 1
42469: PUSH
42470: LD_INT 2
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 0
42479: PUSH
42480: LD_INT 2
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 1
42489: NEG
42490: PUSH
42491: LD_INT 1
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 2
42500: NEG
42501: PUSH
42502: LD_INT 0
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 2
42511: NEG
42512: PUSH
42513: LD_INT 1
42515: NEG
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 2
42523: NEG
42524: PUSH
42525: LD_INT 2
42527: NEG
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 3
42535: PUSH
42536: LD_INT 1
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 3
42545: PUSH
42546: LD_INT 2
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 2
42555: PUSH
42556: LD_INT 3
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: LD_INT 3
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42598: LD_ADDR_VAR 0 26
42602: PUSH
42603: LD_INT 0
42605: PUSH
42606: LD_INT 0
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: LD_INT 1
42618: NEG
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 1
42626: PUSH
42627: LD_INT 0
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: LD_INT 1
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 1
42656: NEG
42657: PUSH
42658: LD_INT 0
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 1
42667: NEG
42668: PUSH
42669: LD_INT 1
42671: NEG
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 1
42679: NEG
42680: PUSH
42681: LD_INT 2
42683: NEG
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 0
42691: PUSH
42692: LD_INT 2
42694: NEG
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 1
42702: PUSH
42703: LD_INT 1
42705: NEG
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 2
42713: PUSH
42714: LD_INT 0
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 2
42723: PUSH
42724: LD_INT 1
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 2
42733: PUSH
42734: LD_INT 2
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 1
42743: PUSH
42744: LD_INT 2
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: LD_INT 2
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: LD_INT 1
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 2
42774: NEG
42775: PUSH
42776: LD_INT 0
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 2
42785: NEG
42786: PUSH
42787: LD_INT 1
42789: NEG
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 2
42797: NEG
42798: PUSH
42799: LD_INT 2
42801: NEG
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 2
42809: PUSH
42810: LD_INT 3
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 1
42819: PUSH
42820: LD_INT 3
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 1
42829: NEG
42830: PUSH
42831: LD_INT 2
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 2
42840: NEG
42841: PUSH
42842: LD_INT 1
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42874: LD_ADDR_VAR 0 27
42878: PUSH
42879: LD_INT 0
42881: PUSH
42882: LD_INT 0
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 0
42891: PUSH
42892: LD_INT 1
42894: NEG
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 1
42902: PUSH
42903: LD_INT 0
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 1
42912: PUSH
42913: LD_INT 1
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 0
42922: PUSH
42923: LD_INT 1
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 1
42932: NEG
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 1
42943: NEG
42944: PUSH
42945: LD_INT 1
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 1
42955: NEG
42956: PUSH
42957: LD_INT 2
42959: NEG
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: LD_INT 2
42970: NEG
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 1
42978: PUSH
42979: LD_INT 1
42981: NEG
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 2
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 2
42999: PUSH
43000: LD_INT 1
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 2
43009: PUSH
43010: LD_INT 2
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 1
43019: PUSH
43020: LD_INT 2
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 0
43029: PUSH
43030: LD_INT 2
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 1
43039: NEG
43040: PUSH
43041: LD_INT 1
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 2
43050: NEG
43051: PUSH
43052: LD_INT 0
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 2
43061: NEG
43062: PUSH
43063: LD_INT 1
43065: NEG
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 2
43073: NEG
43074: PUSH
43075: LD_INT 2
43077: NEG
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: NEG
43086: PUSH
43087: LD_INT 2
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 2
43096: NEG
43097: PUSH
43098: LD_INT 1
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 3
43107: NEG
43108: PUSH
43109: LD_INT 1
43111: NEG
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 3
43119: NEG
43120: PUSH
43121: LD_INT 2
43123: NEG
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43154: LD_ADDR_VAR 0 28
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: LD_INT 0
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 0
43171: PUSH
43172: LD_INT 1
43174: NEG
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 1
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 1
43192: PUSH
43193: LD_INT 1
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 0
43202: PUSH
43203: LD_INT 1
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 1
43212: NEG
43213: PUSH
43214: LD_INT 0
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 1
43223: NEG
43224: PUSH
43225: LD_INT 1
43227: NEG
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 1
43235: NEG
43236: PUSH
43237: LD_INT 2
43239: NEG
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: LD_INT 2
43250: NEG
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 1
43258: PUSH
43259: LD_INT 1
43261: NEG
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 2
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 2
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 2
43289: PUSH
43290: LD_INT 2
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 1
43299: PUSH
43300: LD_INT 2
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 0
43309: PUSH
43310: LD_INT 2
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 1
43319: NEG
43320: PUSH
43321: LD_INT 1
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 2
43330: NEG
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 2
43341: NEG
43342: PUSH
43343: LD_INT 1
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 2
43353: NEG
43354: PUSH
43355: LD_INT 2
43357: NEG
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 2
43365: NEG
43366: PUSH
43367: LD_INT 3
43369: NEG
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 1
43377: NEG
43378: PUSH
43379: LD_INT 3
43381: NEG
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 3
43389: NEG
43390: PUSH
43391: LD_INT 1
43393: NEG
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 3
43401: NEG
43402: PUSH
43403: LD_INT 2
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43436: LD_ADDR_VAR 0 29
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: LD_INT 1
43456: NEG
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 1
43464: PUSH
43465: LD_INT 0
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 1
43474: PUSH
43475: LD_INT 1
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: LD_INT 1
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 1
43494: NEG
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 1
43505: NEG
43506: PUSH
43507: LD_INT 1
43509: NEG
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 1
43517: NEG
43518: PUSH
43519: LD_INT 2
43521: NEG
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 0
43529: PUSH
43530: LD_INT 2
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: LD_INT 1
43543: NEG
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 2
43551: PUSH
43552: LD_INT 0
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 2
43561: PUSH
43562: LD_INT 1
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 1
43571: PUSH
43572: LD_INT 2
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: LD_INT 2
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 1
43591: NEG
43592: PUSH
43593: LD_INT 1
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 2
43602: NEG
43603: PUSH
43604: LD_INT 1
43606: NEG
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 2
43614: NEG
43615: PUSH
43616: LD_INT 2
43618: NEG
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 2
43626: NEG
43627: PUSH
43628: LD_INT 3
43630: NEG
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 2
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 3
43649: PUSH
43650: LD_INT 1
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 1
43659: PUSH
43660: LD_INT 3
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 1
43669: NEG
43670: PUSH
43671: LD_INT 2
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 3
43680: NEG
43681: PUSH
43682: LD_INT 2
43684: NEG
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43715: LD_ADDR_VAR 0 30
43719: PUSH
43720: LD_INT 0
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 1
43743: PUSH
43744: LD_INT 0
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 1
43753: PUSH
43754: LD_INT 1
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: LD_INT 1
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 1
43784: NEG
43785: PUSH
43786: LD_INT 1
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 1
43796: NEG
43797: PUSH
43798: LD_INT 2
43800: NEG
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 0
43808: PUSH
43809: LD_INT 2
43811: NEG
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 1
43819: PUSH
43820: LD_INT 1
43822: NEG
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 2
43830: PUSH
43831: LD_INT 0
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 2
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 2
43850: PUSH
43851: LD_INT 2
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 1
43860: PUSH
43861: LD_INT 2
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 1
43870: NEG
43871: PUSH
43872: LD_INT 1
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 2
43881: NEG
43882: PUSH
43883: LD_INT 0
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 2
43892: NEG
43893: PUSH
43894: LD_INT 1
43896: NEG
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 1
43904: NEG
43905: PUSH
43906: LD_INT 3
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: LD_INT 2
43919: NEG
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 3
43927: PUSH
43928: LD_INT 2
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 2
43937: PUSH
43938: LD_INT 3
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 2
43947: NEG
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 3
43958: NEG
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43993: LD_ADDR_VAR 0 31
43997: PUSH
43998: LD_INT 0
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: LD_INT 1
44013: NEG
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 1
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 1
44031: PUSH
44032: LD_INT 1
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: LD_INT 1
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 1
44051: NEG
44052: PUSH
44053: LD_INT 0
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 1
44062: NEG
44063: PUSH
44064: LD_INT 1
44066: NEG
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PUSH
44076: LD_INT 2
44078: NEG
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 1
44086: PUSH
44087: LD_INT 1
44089: NEG
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 2
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 2
44107: PUSH
44108: LD_INT 1
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 2
44117: PUSH
44118: LD_INT 2
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 1
44127: PUSH
44128: LD_INT 2
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 0
44137: PUSH
44138: LD_INT 2
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 1
44147: NEG
44148: PUSH
44149: LD_INT 1
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 2
44158: NEG
44159: PUSH
44160: LD_INT 1
44162: NEG
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 2
44170: NEG
44171: PUSH
44172: LD_INT 2
44174: NEG
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 2
44182: NEG
44183: PUSH
44184: LD_INT 3
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 2
44194: PUSH
44195: LD_INT 1
44197: NEG
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 3
44205: PUSH
44206: LD_INT 1
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: LD_INT 3
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 1
44225: NEG
44226: PUSH
44227: LD_INT 2
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 3
44236: NEG
44237: PUSH
44238: LD_INT 2
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44271: LD_ADDR_VAR 0 32
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 0
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 1
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 1
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 0
44319: PUSH
44320: LD_INT 1
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: PUSH
44331: LD_INT 0
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 1
44340: NEG
44341: PUSH
44342: LD_INT 1
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 1
44352: NEG
44353: PUSH
44354: LD_INT 2
44356: NEG
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 0
44364: PUSH
44365: LD_INT 2
44367: NEG
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: LD_INT 1
44378: NEG
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 2
44386: PUSH
44387: LD_INT 1
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 2
44396: PUSH
44397: LD_INT 2
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 1
44406: PUSH
44407: LD_INT 2
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 0
44416: PUSH
44417: LD_INT 2
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 1
44426: NEG
44427: PUSH
44428: LD_INT 1
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 2
44437: NEG
44438: PUSH
44439: LD_INT 0
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 2
44448: NEG
44449: PUSH
44450: LD_INT 1
44452: NEG
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 1
44460: NEG
44461: PUSH
44462: LD_INT 3
44464: NEG
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 1
44472: PUSH
44473: LD_INT 2
44475: NEG
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 3
44483: PUSH
44484: LD_INT 2
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 2
44493: PUSH
44494: LD_INT 3
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 2
44503: NEG
44504: PUSH
44505: LD_INT 1
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 3
44514: NEG
44515: PUSH
44516: LD_INT 1
44518: NEG
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44549: LD_ADDR_VAR 0 33
44553: PUSH
44554: LD_INT 0
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: LD_INT 1
44569: NEG
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 1
44577: PUSH
44578: LD_INT 0
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 1
44587: PUSH
44588: LD_INT 1
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: LD_INT 1
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 1
44607: NEG
44608: PUSH
44609: LD_INT 0
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 1
44618: NEG
44619: PUSH
44620: LD_INT 1
44622: NEG
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 1
44630: NEG
44631: PUSH
44632: LD_INT 2
44634: NEG
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 1
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 2
44653: PUSH
44654: LD_INT 0
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 2
44663: PUSH
44664: LD_INT 1
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: LD_INT 2
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: LD_INT 2
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 1
44693: NEG
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 2
44704: NEG
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 2
44715: NEG
44716: PUSH
44717: LD_INT 1
44719: NEG
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 2
44727: NEG
44728: PUSH
44729: LD_INT 2
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 2
44739: NEG
44740: PUSH
44741: LD_INT 3
44743: NEG
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 2
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 3
44762: PUSH
44763: LD_INT 1
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: LD_INT 3
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 1
44782: NEG
44783: PUSH
44784: LD_INT 2
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 3
44793: NEG
44794: PUSH
44795: LD_INT 2
44797: NEG
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44828: LD_ADDR_VAR 0 34
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 0
44845: PUSH
44846: LD_INT 1
44848: NEG
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 1
44856: PUSH
44857: LD_INT 0
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 1
44866: PUSH
44867: LD_INT 1
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 0
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 1
44886: NEG
44887: PUSH
44888: LD_INT 0
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 1
44909: NEG
44910: PUSH
44911: LD_INT 2
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 0
44921: PUSH
44922: LD_INT 2
44924: NEG
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: LD_INT 1
44935: NEG
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 2
44943: PUSH
44944: LD_INT 1
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 2
44953: PUSH
44954: LD_INT 2
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: PUSH
44964: LD_INT 2
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 1
44973: NEG
44974: PUSH
44975: LD_INT 1
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 2
44984: NEG
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 2
44995: NEG
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 2
45007: NEG
45008: PUSH
45009: LD_INT 2
45011: NEG
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 1
45019: NEG
45020: PUSH
45021: LD_INT 3
45023: NEG
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: LD_INT 2
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 3
45042: PUSH
45043: LD_INT 2
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 2
45052: PUSH
45053: LD_INT 3
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 2
45062: NEG
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 3
45073: NEG
45074: PUSH
45075: LD_INT 1
45077: NEG
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45108: LD_ADDR_VAR 0 35
45112: PUSH
45113: LD_INT 0
45115: PUSH
45116: LD_INT 0
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: LD_INT 1
45128: NEG
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 1
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: PUSH
45147: LD_INT 1
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 1
45177: NEG
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 2
45189: PUSH
45190: LD_INT 1
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 2
45199: NEG
45200: PUSH
45201: LD_INT 1
45203: NEG
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45220: LD_ADDR_VAR 0 36
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: LD_INT 0
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 0
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 1
45248: PUSH
45249: LD_INT 0
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 1
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: LD_INT 1
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 1
45278: NEG
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 1
45301: NEG
45302: PUSH
45303: LD_INT 2
45305: NEG
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 1
45313: PUSH
45314: LD_INT 2
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45332: LD_ADDR_VAR 0 37
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: LD_INT 1
45352: NEG
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 1
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: LD_INT 1
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 0
45380: PUSH
45381: LD_INT 1
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: LD_INT 1
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 1
45424: NEG
45425: PUSH
45426: LD_INT 1
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45444: LD_ADDR_VAR 0 38
45448: PUSH
45449: LD_INT 0
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 0
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 1
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 1
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 0
45492: PUSH
45493: LD_INT 1
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 1
45502: NEG
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: LD_INT 1
45517: NEG
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 2
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 2
45535: NEG
45536: PUSH
45537: LD_INT 1
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45556: LD_ADDR_VAR 0 39
45560: PUSH
45561: LD_INT 0
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: LD_INT 1
45576: NEG
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: PUSH
45585: LD_INT 0
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 1
45614: NEG
45615: PUSH
45616: LD_INT 0
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 1
45625: NEG
45626: PUSH
45627: LD_INT 1
45629: NEG
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 1
45637: NEG
45638: PUSH
45639: LD_INT 2
45641: NEG
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: PUSH
45650: LD_INT 2
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45668: LD_ADDR_VAR 0 40
45672: PUSH
45673: LD_INT 0
45675: PUSH
45676: LD_INT 0
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 0
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 1
45696: PUSH
45697: LD_INT 0
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 1
45706: PUSH
45707: LD_INT 1
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: LD_INT 1
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: NEG
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: LD_INT 1
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: LD_INT 1
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: LD_INT 1
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45780: LD_ADDR_VAR 0 41
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 0
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 1
45808: PUSH
45809: LD_INT 0
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: PUSH
45819: LD_INT 1
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: NEG
45839: PUSH
45840: LD_INT 0
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: LD_INT 1
45853: NEG
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: NEG
45862: PUSH
45863: LD_INT 2
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 2
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 2
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 2
45904: PUSH
45905: LD_INT 2
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 1
45914: PUSH
45915: LD_INT 2
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 2
45935: NEG
45936: PUSH
45937: LD_INT 0
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 2
45946: NEG
45947: PUSH
45948: LD_INT 1
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 2
45958: NEG
45959: PUSH
45960: LD_INT 2
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 2
45970: NEG
45971: PUSH
45972: LD_INT 3
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 2
45982: PUSH
45983: LD_INT 1
45985: NEG
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 3
45993: PUSH
45994: LD_INT 0
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 3
46003: PUSH
46004: LD_INT 1
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 3
46013: PUSH
46014: LD_INT 2
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 3
46023: PUSH
46024: LD_INT 3
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 2
46033: PUSH
46034: LD_INT 3
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 2
46043: NEG
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 3
46054: NEG
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 3
46065: NEG
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 3
46077: NEG
46078: PUSH
46079: LD_INT 2
46081: NEG
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 3
46089: NEG
46090: PUSH
46091: LD_INT 3
46093: NEG
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46130: LD_ADDR_VAR 0 42
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 0
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: LD_INT 1
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: LD_INT 1
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 1
46199: NEG
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 1
46211: NEG
46212: PUSH
46213: LD_INT 2
46215: NEG
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 0
46223: PUSH
46224: LD_INT 2
46226: NEG
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: LD_INT 1
46237: NEG
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 2
46245: PUSH
46246: LD_INT 1
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 2
46255: PUSH
46256: LD_INT 2
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: LD_INT 2
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 0
46275: PUSH
46276: LD_INT 2
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 1
46285: NEG
46286: PUSH
46287: LD_INT 1
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 2
46296: NEG
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 2
46308: NEG
46309: PUSH
46310: LD_INT 2
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 2
46320: NEG
46321: PUSH
46322: LD_INT 3
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: NEG
46333: PUSH
46334: LD_INT 3
46336: NEG
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 0
46344: PUSH
46345: LD_INT 3
46347: NEG
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: LD_INT 2
46358: NEG
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 3
46366: PUSH
46367: LD_INT 2
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 3
46376: PUSH
46377: LD_INT 3
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 2
46386: PUSH
46387: LD_INT 3
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: LD_INT 3
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: LD_INT 3
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: LD_INT 2
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 3
46427: NEG
46428: PUSH
46429: LD_INT 2
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 3
46439: NEG
46440: PUSH
46441: LD_INT 3
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46480: LD_ADDR_VAR 0 43
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: LD_INT 1
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: LD_INT 1
46553: NEG
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: LD_INT 2
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: LD_INT 2
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 1
46584: PUSH
46585: LD_INT 1
46587: NEG
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 2
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 2
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: PUSH
46616: LD_INT 2
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: LD_INT 2
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: LD_INT 1
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 2
46646: NEG
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 2
46657: NEG
46658: PUSH
46659: LD_INT 1
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 1
46669: NEG
46670: PUSH
46671: LD_INT 3
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 0
46681: PUSH
46682: LD_INT 3
46684: NEG
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 1
46692: PUSH
46693: LD_INT 2
46695: NEG
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 2
46703: PUSH
46704: LD_INT 1
46706: NEG
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 3
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 3
46724: PUSH
46725: LD_INT 1
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: PUSH
46735: LD_INT 3
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: LD_INT 3
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 1
46754: NEG
46755: PUSH
46756: LD_INT 2
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 2
46765: NEG
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 3
46776: NEG
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 3
46787: NEG
46788: PUSH
46789: LD_INT 1
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46828: LD_ADDR_VAR 0 44
46832: PUSH
46833: LD_INT 0
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 0
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 1
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 1
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 0
46876: PUSH
46877: LD_INT 1
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 1
46886: NEG
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: LD_INT 2
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 1
46921: PUSH
46922: LD_INT 1
46924: NEG
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 2
46932: PUSH
46933: LD_INT 0
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 2
46942: PUSH
46943: LD_INT 1
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 2
46952: PUSH
46953: LD_INT 2
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 1
46962: PUSH
46963: LD_INT 2
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 2
46983: NEG
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 2
46994: NEG
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 2
47006: NEG
47007: PUSH
47008: LD_INT 2
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 2
47018: NEG
47019: PUSH
47020: LD_INT 3
47022: NEG
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: LD_INT 1
47033: NEG
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 3
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 3
47051: PUSH
47052: LD_INT 1
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 3
47061: PUSH
47062: LD_INT 2
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 3
47071: PUSH
47072: LD_INT 3
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 2
47081: PUSH
47082: LD_INT 3
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 2
47091: NEG
47092: PUSH
47093: LD_INT 1
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 3
47102: NEG
47103: PUSH
47104: LD_INT 0
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 3
47113: NEG
47114: PUSH
47115: LD_INT 1
47117: NEG
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 3
47125: NEG
47126: PUSH
47127: LD_INT 2
47129: NEG
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 3
47137: NEG
47138: PUSH
47139: LD_INT 3
47141: NEG
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47178: LD_ADDR_VAR 0 45
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: LD_INT 1
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: LD_INT 1
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: NEG
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: LD_INT 2
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 0
47271: PUSH
47272: LD_INT 2
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 1
47282: PUSH
47283: LD_INT 1
47285: NEG
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 2
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 2
47303: PUSH
47304: LD_INT 2
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 1
47313: PUSH
47314: LD_INT 2
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: LD_INT 2
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: PUSH
47335: LD_INT 1
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 2
47344: NEG
47345: PUSH
47346: LD_INT 1
47348: NEG
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 2
47356: NEG
47357: PUSH
47358: LD_INT 2
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 2
47368: NEG
47369: PUSH
47370: LD_INT 3
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 1
47380: NEG
47381: PUSH
47382: LD_INT 3
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: LD_INT 3
47395: NEG
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 1
47403: PUSH
47404: LD_INT 2
47406: NEG
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 3
47414: PUSH
47415: LD_INT 2
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 3
47424: PUSH
47425: LD_INT 3
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 2
47434: PUSH
47435: LD_INT 3
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 1
47444: PUSH
47445: LD_INT 3
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: LD_INT 3
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: NEG
47465: PUSH
47466: LD_INT 2
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 3
47475: NEG
47476: PUSH
47477: LD_INT 2
47479: NEG
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 3
47487: NEG
47488: PUSH
47489: LD_INT 3
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47528: LD_ADDR_VAR 0 46
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: PUSH
47567: LD_INT 1
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 1
47586: NEG
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: NEG
47598: PUSH
47599: LD_INT 1
47601: NEG
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: PUSH
47611: LD_INT 2
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: LD_INT 2
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: LD_INT 1
47635: NEG
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 2
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 2
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: PUSH
47664: LD_INT 2
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: LD_INT 2
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 1
47683: NEG
47684: PUSH
47685: LD_INT 1
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 2
47694: NEG
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 2
47705: NEG
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 1
47717: NEG
47718: PUSH
47719: LD_INT 3
47721: NEG
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: LD_INT 3
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: LD_INT 2
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 2
47751: PUSH
47752: LD_INT 1
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 3
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 3
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: LD_INT 3
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: LD_INT 3
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 1
47802: NEG
47803: PUSH
47804: LD_INT 2
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 2
47813: NEG
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 3
47824: NEG
47825: PUSH
47826: LD_INT 0
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 3
47835: NEG
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47876: LD_ADDR_VAR 0 47
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: LD_INT 0
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: LD_INT 1
47896: NEG
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: LD_INT 0
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: LD_INT 1
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: LD_INT 1
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: NEG
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: NEG
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: LD_INT 2
47961: NEG
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: LD_INT 2
47972: NEG
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 1
47980: PUSH
47981: LD_INT 1
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 2
47991: NEG
47992: PUSH
47993: LD_INT 1
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 2
48003: NEG
48004: PUSH
48005: LD_INT 2
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48027: LD_ADDR_VAR 0 48
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 0
48044: PUSH
48045: LD_INT 1
48047: NEG
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: LD_INT 0
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 0
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 1
48085: NEG
48086: PUSH
48087: LD_INT 0
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: LD_INT 1
48100: NEG
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 1
48108: NEG
48109: PUSH
48110: LD_INT 2
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 0
48120: PUSH
48121: LD_INT 2
48123: NEG
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 2
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48174: LD_ADDR_VAR 0 49
48178: PUSH
48179: LD_INT 0
48181: PUSH
48182: LD_INT 0
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 0
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 1
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 0
48222: PUSH
48223: LD_INT 1
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 1
48232: NEG
48233: PUSH
48234: LD_INT 0
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 1
48243: NEG
48244: PUSH
48245: LD_INT 1
48247: NEG
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 2
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 2
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 2
48286: PUSH
48287: LD_INT 2
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: LD_INT 2
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48318: LD_ADDR_VAR 0 50
48322: PUSH
48323: LD_INT 0
48325: PUSH
48326: LD_INT 0
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 1
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 1
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 1
48376: NEG
48377: PUSH
48378: LD_INT 0
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 1
48387: NEG
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 2
48399: PUSH
48400: LD_INT 1
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 2
48409: PUSH
48410: LD_INT 2
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: LD_INT 2
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 0
48429: PUSH
48430: LD_INT 2
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 1
48439: NEG
48440: PUSH
48441: LD_INT 1
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48462: LD_ADDR_VAR 0 51
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: LD_INT 0
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 0
48479: PUSH
48480: LD_INT 1
48482: NEG
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 1
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 1
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 0
48510: PUSH
48511: LD_INT 1
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 1
48520: NEG
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 1
48531: NEG
48532: PUSH
48533: LD_INT 1
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: LD_INT 2
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: LD_INT 2
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 1
48563: NEG
48564: PUSH
48565: LD_INT 1
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 2
48574: NEG
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 2
48585: NEG
48586: PUSH
48587: LD_INT 1
48589: NEG
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48609: LD_ADDR_VAR 0 52
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 0
48626: PUSH
48627: LD_INT 1
48629: NEG
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 1
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 1
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 0
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 1
48667: NEG
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: LD_INT 1
48682: NEG
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 1
48690: NEG
48691: PUSH
48692: LD_INT 2
48694: NEG
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: LD_INT 1
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 2
48713: NEG
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 2
48724: NEG
48725: PUSH
48726: LD_INT 1
48728: NEG
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 2
48736: NEG
48737: PUSH
48738: LD_INT 2
48740: NEG
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48760: LD_ADDR_VAR 0 53
48764: PUSH
48765: LD_INT 0
48767: PUSH
48768: LD_INT 0
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 0
48777: PUSH
48778: LD_INT 1
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 1
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: LD_INT 1
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 0
48808: PUSH
48809: LD_INT 1
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 1
48818: NEG
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 1
48829: NEG
48830: PUSH
48831: LD_INT 1
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: NEG
48842: PUSH
48843: LD_INT 2
48845: NEG
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 0
48853: PUSH
48854: LD_INT 2
48856: NEG
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 2
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 2
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 2
48895: PUSH
48896: LD_INT 2
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: PUSH
48906: LD_INT 2
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: LD_INT 2
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: LD_INT 1
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 2
48936: NEG
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 2
48947: NEG
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 2
48959: NEG
48960: PUSH
48961: LD_INT 2
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48990: LD_ADDR_VAR 0 54
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: LD_INT 1
49010: NEG
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 1
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 1
49028: PUSH
49029: LD_INT 1
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 1
49059: NEG
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: NEG
49072: PUSH
49073: LD_INT 2
49075: NEG
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: LD_INT 2
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: LD_INT 1
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 2
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 2
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 2
49125: PUSH
49126: LD_INT 2
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 1
49135: PUSH
49136: LD_INT 2
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 0
49145: PUSH
49146: LD_INT 2
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: NEG
49156: PUSH
49157: LD_INT 1
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 2
49166: NEG
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 2
49177: NEG
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 2
49189: NEG
49190: PUSH
49191: LD_INT 2
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49220: LD_ADDR_VAR 0 55
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: LD_INT 0
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 0
49237: PUSH
49238: LD_INT 1
49240: NEG
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 1
49248: PUSH
49249: LD_INT 0
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 1
49258: PUSH
49259: LD_INT 1
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: LD_INT 1
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 1
49278: NEG
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 1
49289: NEG
49290: PUSH
49291: LD_INT 1
49293: NEG
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: NEG
49302: PUSH
49303: LD_INT 2
49305: NEG
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: LD_INT 2
49316: NEG
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 2
49335: PUSH
49336: LD_INT 0
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 2
49345: PUSH
49346: LD_INT 1
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 2
49355: PUSH
49356: LD_INT 2
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: LD_INT 2
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: LD_INT 2
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: LD_INT 1
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 2
49396: NEG
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 2
49407: NEG
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 2
49419: NEG
49420: PUSH
49421: LD_INT 2
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49450: LD_ADDR_VAR 0 56
49454: PUSH
49455: LD_INT 0
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: PUSH
49479: LD_INT 0
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 1
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: LD_INT 1
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 1
49508: NEG
49509: PUSH
49510: LD_INT 0
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: NEG
49532: PUSH
49533: LD_INT 2
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 0
49543: PUSH
49544: LD_INT 2
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: LD_INT 1
49557: NEG
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 2
49565: PUSH
49566: LD_INT 0
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 2
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 2
49585: PUSH
49586: LD_INT 2
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: LD_INT 2
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: LD_INT 2
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: NEG
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 2
49626: NEG
49627: PUSH
49628: LD_INT 0
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 2
49637: NEG
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 2
49649: NEG
49650: PUSH
49651: LD_INT 2
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49680: LD_ADDR_VAR 0 57
49684: PUSH
49685: LD_INT 0
49687: PUSH
49688: LD_INT 0
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 0
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 1
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: LD_INT 1
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 0
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 1
49738: NEG
49739: PUSH
49740: LD_INT 0
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 1
49749: NEG
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: NEG
49762: PUSH
49763: LD_INT 2
49765: NEG
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 0
49773: PUSH
49774: LD_INT 2
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 2
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 2
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 2
49815: PUSH
49816: LD_INT 2
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 1
49825: PUSH
49826: LD_INT 2
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 0
49835: PUSH
49836: LD_INT 2
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: NEG
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 2
49856: NEG
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 2
49867: NEG
49868: PUSH
49869: LD_INT 1
49871: NEG
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 2
49879: NEG
49880: PUSH
49881: LD_INT 2
49883: NEG
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49910: LD_ADDR_VAR 0 58
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: LD_INT 1
49930: NEG
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 1
49968: NEG
49969: PUSH
49970: LD_INT 0
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: NEG
49992: PUSH
49993: LD_INT 2
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: LD_INT 2
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: PUSH
50015: LD_INT 1
50017: NEG
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 2
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 2
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 2
50045: PUSH
50046: LD_INT 2
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 1
50055: PUSH
50056: LD_INT 2
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: LD_INT 2
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 1
50075: NEG
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 2
50086: NEG
50087: PUSH
50088: LD_INT 0
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 2
50097: NEG
50098: PUSH
50099: LD_INT 1
50101: NEG
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 2
50109: NEG
50110: PUSH
50111: LD_INT 2
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50140: LD_ADDR_VAR 0 59
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: LD_INT 1
50160: NEG
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: PUSH
50169: LD_INT 0
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 1
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: LD_INT 1
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 1
50198: NEG
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50228: LD_ADDR_VAR 0 60
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 1
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: NEG
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50316: LD_ADDR_VAR 0 61
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 1
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: LD_INT 1
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 1
50374: NEG
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: LD_INT 1
50389: NEG
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50404: LD_ADDR_VAR 0 62
50408: PUSH
50409: LD_INT 0
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: LD_INT 1
50477: NEG
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50492: LD_ADDR_VAR 0 63
50496: PUSH
50497: LD_INT 0
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 0
50509: PUSH
50510: LD_INT 1
50512: NEG
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: LD_INT 0
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 1
50550: NEG
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 1
50561: NEG
50562: PUSH
50563: LD_INT 1
50565: NEG
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50580: LD_ADDR_VAR 0 64
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 1
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: LD_INT 1
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 0
50628: PUSH
50629: LD_INT 1
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: NEG
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: LD_INT 1
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: ST_TO_ADDR
// end ; 1 :
50668: GO 56565
50670: LD_INT 1
50672: DOUBLE
50673: EQUAL
50674: IFTRUE 50678
50676: GO 53301
50678: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50679: LD_ADDR_VAR 0 11
50683: PUSH
50684: LD_INT 1
50686: NEG
50687: PUSH
50688: LD_INT 3
50690: NEG
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: LD_INT 3
50701: NEG
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: PUSH
50710: LD_INT 2
50712: NEG
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: LIST
50722: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50723: LD_ADDR_VAR 0 12
50727: PUSH
50728: LD_INT 2
50730: PUSH
50731: LD_INT 1
50733: NEG
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 3
50741: PUSH
50742: LD_INT 0
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 3
50751: PUSH
50752: LD_INT 1
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: LIST
50763: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50764: LD_ADDR_VAR 0 13
50768: PUSH
50769: LD_INT 3
50771: PUSH
50772: LD_INT 2
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 3
50781: PUSH
50782: LD_INT 3
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 2
50791: PUSH
50792: LD_INT 3
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: LIST
50803: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50804: LD_ADDR_VAR 0 14
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: LD_INT 3
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: LD_INT 3
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: NEG
50832: PUSH
50833: LD_INT 2
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: LIST
50844: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50845: LD_ADDR_VAR 0 15
50849: PUSH
50850: LD_INT 2
50852: NEG
50853: PUSH
50854: LD_INT 1
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 3
50863: NEG
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 3
50874: NEG
50875: PUSH
50876: LD_INT 1
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: LIST
50888: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50889: LD_ADDR_VAR 0 16
50893: PUSH
50894: LD_INT 2
50896: NEG
50897: PUSH
50898: LD_INT 3
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 3
50908: NEG
50909: PUSH
50910: LD_INT 2
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 3
50920: NEG
50921: PUSH
50922: LD_INT 3
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: LIST
50934: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50935: LD_ADDR_VAR 0 17
50939: PUSH
50940: LD_INT 1
50942: NEG
50943: PUSH
50944: LD_INT 3
50946: NEG
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: LD_INT 3
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 1
50965: PUSH
50966: LD_INT 2
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: LIST
50978: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50979: LD_ADDR_VAR 0 18
50983: PUSH
50984: LD_INT 2
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 3
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 3
51007: PUSH
51008: LD_INT 1
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: LIST
51019: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51020: LD_ADDR_VAR 0 19
51024: PUSH
51025: LD_INT 3
51027: PUSH
51028: LD_INT 2
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 3
51037: PUSH
51038: LD_INT 3
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 2
51047: PUSH
51048: LD_INT 3
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: LIST
51059: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51060: LD_ADDR_VAR 0 20
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: LD_INT 3
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 0
51077: PUSH
51078: LD_INT 3
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: LD_INT 2
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: LIST
51100: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51101: LD_ADDR_VAR 0 21
51105: PUSH
51106: LD_INT 2
51108: NEG
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 3
51119: NEG
51120: PUSH
51121: LD_INT 0
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 3
51130: NEG
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: LIST
51144: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51145: LD_ADDR_VAR 0 22
51149: PUSH
51150: LD_INT 2
51152: NEG
51153: PUSH
51154: LD_INT 3
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 3
51164: NEG
51165: PUSH
51166: LD_INT 2
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 3
51176: NEG
51177: PUSH
51178: LD_INT 3
51180: NEG
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: LIST
51190: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51191: LD_ADDR_VAR 0 23
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: LD_INT 3
51201: NEG
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: LD_INT 4
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: LD_INT 3
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: LIST
51234: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51235: LD_ADDR_VAR 0 24
51239: PUSH
51240: LD_INT 3
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 3
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 4
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: LIST
51275: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51276: LD_ADDR_VAR 0 25
51280: PUSH
51281: LD_INT 3
51283: PUSH
51284: LD_INT 3
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 4
51293: PUSH
51294: LD_INT 3
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 3
51303: PUSH
51304: LD_INT 4
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: LIST
51315: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51316: LD_ADDR_VAR 0 26
51320: PUSH
51321: LD_INT 0
51323: PUSH
51324: LD_INT 3
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 1
51333: PUSH
51334: LD_INT 4
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: LD_INT 3
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: LIST
51356: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51357: LD_ADDR_VAR 0 27
51361: PUSH
51362: LD_INT 3
51364: NEG
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 3
51375: NEG
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 4
51386: NEG
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: LIST
51400: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51401: LD_ADDR_VAR 0 28
51405: PUSH
51406: LD_INT 3
51408: NEG
51409: PUSH
51410: LD_INT 3
51412: NEG
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 3
51420: NEG
51421: PUSH
51422: LD_INT 4
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 4
51432: NEG
51433: PUSH
51434: LD_INT 3
51436: NEG
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: LIST
51446: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51447: LD_ADDR_VAR 0 29
51451: PUSH
51452: LD_INT 1
51454: NEG
51455: PUSH
51456: LD_INT 3
51458: NEG
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 0
51466: PUSH
51467: LD_INT 3
51469: NEG
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: LD_INT 2
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: LD_INT 4
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: LD_INT 4
51503: NEG
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: LD_INT 3
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: NEG
51523: PUSH
51524: LD_INT 5
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: LD_INT 5
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: LD_INT 4
51548: NEG
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: LD_INT 6
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 0
51568: PUSH
51569: LD_INT 6
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: PUSH
51580: LD_INT 5
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51602: LD_ADDR_VAR 0 30
51606: PUSH
51607: LD_INT 2
51609: PUSH
51610: LD_INT 1
51612: NEG
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 3
51620: PUSH
51621: LD_INT 0
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 3
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 3
51640: PUSH
51641: LD_INT 1
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 4
51651: PUSH
51652: LD_INT 0
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 4
51661: PUSH
51662: LD_INT 1
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 4
51671: PUSH
51672: LD_INT 1
51674: NEG
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 5
51682: PUSH
51683: LD_INT 0
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 5
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 5
51702: PUSH
51703: LD_INT 1
51705: NEG
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 6
51713: PUSH
51714: LD_INT 0
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 6
51723: PUSH
51724: LD_INT 1
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51745: LD_ADDR_VAR 0 31
51749: PUSH
51750: LD_INT 3
51752: PUSH
51753: LD_INT 2
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 3
51762: PUSH
51763: LD_INT 3
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 2
51772: PUSH
51773: LD_INT 3
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 4
51782: PUSH
51783: LD_INT 3
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 4
51792: PUSH
51793: LD_INT 4
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 3
51802: PUSH
51803: LD_INT 4
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 5
51812: PUSH
51813: LD_INT 4
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 5
51822: PUSH
51823: LD_INT 5
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 4
51832: PUSH
51833: LD_INT 5
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 6
51842: PUSH
51843: LD_INT 5
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 6
51852: PUSH
51853: LD_INT 6
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 5
51862: PUSH
51863: LD_INT 6
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51884: LD_ADDR_VAR 0 32
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: LD_INT 3
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: LD_INT 3
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: NEG
51912: PUSH
51913: LD_INT 2
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 1
51922: PUSH
51923: LD_INT 4
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: LD_INT 4
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 1
51942: NEG
51943: PUSH
51944: LD_INT 3
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 1
51953: PUSH
51954: LD_INT 5
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: LD_INT 5
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 1
51973: NEG
51974: PUSH
51975: LD_INT 4
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: LD_INT 6
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: LD_INT 6
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 1
52004: NEG
52005: PUSH
52006: LD_INT 5
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52027: LD_ADDR_VAR 0 33
52031: PUSH
52032: LD_INT 2
52034: NEG
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 3
52045: NEG
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 3
52056: NEG
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 3
52068: NEG
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 4
52079: NEG
52080: PUSH
52081: LD_INT 0
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 4
52090: NEG
52091: PUSH
52092: LD_INT 1
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 4
52102: NEG
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 5
52113: NEG
52114: PUSH
52115: LD_INT 0
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 5
52124: NEG
52125: PUSH
52126: LD_INT 1
52128: NEG
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 5
52136: NEG
52137: PUSH
52138: LD_INT 1
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 6
52147: NEG
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 6
52158: NEG
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52182: LD_ADDR_VAR 0 34
52186: PUSH
52187: LD_INT 2
52189: NEG
52190: PUSH
52191: LD_INT 3
52193: NEG
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 3
52201: NEG
52202: PUSH
52203: LD_INT 2
52205: NEG
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 3
52213: NEG
52214: PUSH
52215: LD_INT 3
52217: NEG
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 3
52225: NEG
52226: PUSH
52227: LD_INT 4
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 4
52237: NEG
52238: PUSH
52239: LD_INT 3
52241: NEG
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 4
52249: NEG
52250: PUSH
52251: LD_INT 4
52253: NEG
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 4
52261: NEG
52262: PUSH
52263: LD_INT 5
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 5
52273: NEG
52274: PUSH
52275: LD_INT 4
52277: NEG
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 5
52285: NEG
52286: PUSH
52287: LD_INT 5
52289: NEG
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 5
52297: NEG
52298: PUSH
52299: LD_INT 6
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 6
52309: NEG
52310: PUSH
52311: LD_INT 5
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 6
52321: NEG
52322: PUSH
52323: LD_INT 6
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52345: LD_ADDR_VAR 0 41
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: LD_INT 2
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: NEG
52364: PUSH
52365: LD_INT 3
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 1
52375: PUSH
52376: LD_INT 2
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: LIST
52388: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52389: LD_ADDR_VAR 0 42
52393: PUSH
52394: LD_INT 2
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 2
52406: PUSH
52407: LD_INT 1
52409: NEG
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 3
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: LIST
52429: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52430: LD_ADDR_VAR 0 43
52434: PUSH
52435: LD_INT 2
52437: PUSH
52438: LD_INT 2
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 3
52447: PUSH
52448: LD_INT 2
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 2
52457: PUSH
52458: LD_INT 3
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: LIST
52469: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52470: LD_ADDR_VAR 0 44
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: LD_INT 2
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 1
52487: PUSH
52488: LD_INT 3
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 1
52497: NEG
52498: PUSH
52499: LD_INT 2
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: LIST
52510: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52511: LD_ADDR_VAR 0 45
52515: PUSH
52516: LD_INT 2
52518: NEG
52519: PUSH
52520: LD_INT 0
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 2
52529: NEG
52530: PUSH
52531: LD_INT 1
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 3
52540: NEG
52541: PUSH
52542: LD_INT 1
52544: NEG
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: LIST
52554: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52555: LD_ADDR_VAR 0 46
52559: PUSH
52560: LD_INT 2
52562: NEG
52563: PUSH
52564: LD_INT 2
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 2
52574: NEG
52575: PUSH
52576: LD_INT 3
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 3
52586: NEG
52587: PUSH
52588: LD_INT 2
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: LIST
52600: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52601: LD_ADDR_VAR 0 47
52605: PUSH
52606: LD_INT 2
52608: NEG
52609: PUSH
52610: LD_INT 3
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 1
52620: NEG
52621: PUSH
52622: LD_INT 3
52624: NEG
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52634: LD_ADDR_VAR 0 48
52638: PUSH
52639: LD_INT 1
52641: PUSH
52642: LD_INT 2
52644: NEG
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 2
52652: PUSH
52653: LD_INT 1
52655: NEG
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52665: LD_ADDR_VAR 0 49
52669: PUSH
52670: LD_INT 3
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 3
52682: PUSH
52683: LD_INT 2
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52694: LD_ADDR_VAR 0 50
52698: PUSH
52699: LD_INT 2
52701: PUSH
52702: LD_INT 3
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: LD_INT 3
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52723: LD_ADDR_VAR 0 51
52727: PUSH
52728: LD_INT 1
52730: NEG
52731: PUSH
52732: LD_INT 2
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 2
52741: NEG
52742: PUSH
52743: LD_INT 1
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52754: LD_ADDR_VAR 0 52
52758: PUSH
52759: LD_INT 3
52761: NEG
52762: PUSH
52763: LD_INT 1
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 3
52773: NEG
52774: PUSH
52775: LD_INT 2
52777: NEG
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52787: LD_ADDR_VAR 0 53
52791: PUSH
52792: LD_INT 1
52794: NEG
52795: PUSH
52796: LD_INT 3
52798: NEG
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 0
52806: PUSH
52807: LD_INT 3
52809: NEG
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: LD_INT 2
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: LIST
52830: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52831: LD_ADDR_VAR 0 54
52835: PUSH
52836: LD_INT 2
52838: PUSH
52839: LD_INT 1
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 3
52849: PUSH
52850: LD_INT 0
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 3
52859: PUSH
52860: LD_INT 1
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: LIST
52871: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52872: LD_ADDR_VAR 0 55
52876: PUSH
52877: LD_INT 3
52879: PUSH
52880: LD_INT 2
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 3
52889: PUSH
52890: LD_INT 3
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 2
52899: PUSH
52900: LD_INT 3
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: LIST
52911: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52912: LD_ADDR_VAR 0 56
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: LD_INT 3
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: LD_INT 3
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 1
52939: NEG
52940: PUSH
52941: LD_INT 2
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: LIST
52952: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52953: LD_ADDR_VAR 0 57
52957: PUSH
52958: LD_INT 2
52960: NEG
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 3
52971: NEG
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 3
52982: NEG
52983: PUSH
52984: LD_INT 1
52986: NEG
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: LIST
52996: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52997: LD_ADDR_VAR 0 58
53001: PUSH
53002: LD_INT 2
53004: NEG
53005: PUSH
53006: LD_INT 3
53008: NEG
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 3
53016: NEG
53017: PUSH
53018: LD_INT 2
53020: NEG
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 3
53028: NEG
53029: PUSH
53030: LD_INT 3
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: LIST
53042: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53043: LD_ADDR_VAR 0 59
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: LD_INT 2
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: LD_INT 2
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: LIST
53086: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53087: LD_ADDR_VAR 0 60
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: LD_INT 1
53097: NEG
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 2
53105: PUSH
53106: LD_INT 0
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 2
53115: PUSH
53116: LD_INT 1
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: LIST
53127: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53128: LD_ADDR_VAR 0 61
53132: PUSH
53133: LD_INT 2
53135: PUSH
53136: LD_INT 1
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 2
53145: PUSH
53146: LD_INT 2
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: LD_INT 2
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: LIST
53167: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53168: LD_ADDR_VAR 0 62
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: LD_INT 2
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: LD_INT 2
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: LIST
53208: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53209: LD_ADDR_VAR 0 63
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 2
53227: NEG
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 2
53238: NEG
53239: PUSH
53240: LD_INT 1
53242: NEG
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: LIST
53252: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53253: LD_ADDR_VAR 0 64
53257: PUSH
53258: LD_INT 1
53260: NEG
53261: PUSH
53262: LD_INT 2
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 2
53272: NEG
53273: PUSH
53274: LD_INT 1
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 2
53284: NEG
53285: PUSH
53286: LD_INT 2
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: LIST
53298: ST_TO_ADDR
// end ; 2 :
53299: GO 56565
53301: LD_INT 2
53303: DOUBLE
53304: EQUAL
53305: IFTRUE 53309
53307: GO 56564
53309: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53310: LD_ADDR_VAR 0 29
53314: PUSH
53315: LD_INT 4
53317: PUSH
53318: LD_INT 0
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 4
53327: PUSH
53328: LD_INT 1
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 5
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 5
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 4
53358: PUSH
53359: LD_INT 1
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 3
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 3
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 3
53389: PUSH
53390: LD_INT 2
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 5
53400: PUSH
53401: LD_INT 2
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 3
53410: PUSH
53411: LD_INT 3
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 3
53420: PUSH
53421: LD_INT 2
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 4
53430: PUSH
53431: LD_INT 3
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 4
53440: PUSH
53441: LD_INT 4
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 3
53450: PUSH
53451: LD_INT 4
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 2
53460: PUSH
53461: LD_INT 3
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 2
53470: PUSH
53471: LD_INT 2
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 4
53480: PUSH
53481: LD_INT 2
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 2
53490: PUSH
53491: LD_INT 4
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: LD_INT 4
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 0
53510: PUSH
53511: LD_INT 3
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 1
53520: PUSH
53521: LD_INT 4
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 1
53530: PUSH
53531: LD_INT 5
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: LD_INT 5
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 1
53550: NEG
53551: PUSH
53552: LD_INT 4
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: NEG
53562: PUSH
53563: LD_INT 3
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 2
53572: PUSH
53573: LD_INT 5
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 2
53582: NEG
53583: PUSH
53584: LD_INT 3
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 3
53593: NEG
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 3
53604: NEG
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 2
53616: NEG
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 2
53627: NEG
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 3
53638: NEG
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 4
53649: NEG
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 4
53660: NEG
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 4
53672: NEG
53673: PUSH
53674: LD_INT 2
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 2
53684: NEG
53685: PUSH
53686: LD_INT 2
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 4
53695: NEG
53696: PUSH
53697: LD_INT 4
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 4
53707: NEG
53708: PUSH
53709: LD_INT 5
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 3
53719: NEG
53720: PUSH
53721: LD_INT 4
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 3
53731: NEG
53732: PUSH
53733: LD_INT 3
53735: NEG
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 4
53743: NEG
53744: PUSH
53745: LD_INT 3
53747: NEG
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 5
53755: NEG
53756: PUSH
53757: LD_INT 4
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 5
53767: NEG
53768: PUSH
53769: LD_INT 5
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 3
53779: NEG
53780: PUSH
53781: LD_INT 5
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 5
53791: NEG
53792: PUSH
53793: LD_INT 3
53795: NEG
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53848: LD_ADDR_VAR 0 30
53852: PUSH
53853: LD_INT 4
53855: PUSH
53856: LD_INT 4
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 4
53865: PUSH
53866: LD_INT 3
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 5
53875: PUSH
53876: LD_INT 4
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 5
53885: PUSH
53886: LD_INT 5
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 4
53895: PUSH
53896: LD_INT 5
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 3
53905: PUSH
53906: LD_INT 4
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 3
53915: PUSH
53916: LD_INT 3
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 5
53925: PUSH
53926: LD_INT 3
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 3
53935: PUSH
53936: LD_INT 5
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 0
53945: PUSH
53946: LD_INT 3
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: LD_INT 3
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 1
53975: PUSH
53976: LD_INT 4
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: PUSH
53983: LD_INT 0
53985: PUSH
53986: LD_INT 4
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: LD_INT 3
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 1
54006: NEG
54007: PUSH
54008: LD_INT 2
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 2
54017: PUSH
54018: LD_INT 4
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 2
54027: NEG
54028: PUSH
54029: LD_INT 2
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 4
54038: NEG
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 4
54049: NEG
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 3
54061: NEG
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 3
54072: NEG
54073: PUSH
54074: LD_INT 1
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 4
54083: NEG
54084: PUSH
54085: LD_INT 1
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 5
54094: NEG
54095: PUSH
54096: LD_INT 0
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 5
54105: NEG
54106: PUSH
54107: LD_INT 1
54109: NEG
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 5
54117: NEG
54118: PUSH
54119: LD_INT 2
54121: NEG
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 3
54129: NEG
54130: PUSH
54131: LD_INT 2
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 3
54140: NEG
54141: PUSH
54142: LD_INT 3
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 3
54152: NEG
54153: PUSH
54154: LD_INT 4
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 2
54164: NEG
54165: PUSH
54166: LD_INT 3
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 2
54176: NEG
54177: PUSH
54178: LD_INT 2
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 3
54188: NEG
54189: PUSH
54190: LD_INT 2
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 4
54200: NEG
54201: PUSH
54202: LD_INT 3
54204: NEG
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 4
54212: NEG
54213: PUSH
54214: LD_INT 4
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 2
54224: NEG
54225: PUSH
54226: LD_INT 4
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 4
54236: NEG
54237: PUSH
54238: LD_INT 2
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: LD_INT 4
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: LD_INT 5
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 1
54270: PUSH
54271: LD_INT 4
54273: NEG
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: LD_INT 3
54284: NEG
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: LD_INT 3
54295: NEG
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: LD_INT 4
54307: NEG
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: LD_INT 5
54319: NEG
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 2
54327: PUSH
54328: LD_INT 3
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 2
54338: NEG
54339: PUSH
54340: LD_INT 5
54342: NEG
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54395: LD_ADDR_VAR 0 31
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: LD_INT 4
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: LD_INT 3
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: LD_INT 4
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 1
54432: PUSH
54433: LD_INT 5
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 0
54442: PUSH
54443: LD_INT 5
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 1
54452: NEG
54453: PUSH
54454: LD_INT 4
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 1
54463: NEG
54464: PUSH
54465: LD_INT 3
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 2
54474: PUSH
54475: LD_INT 5
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 2
54484: NEG
54485: PUSH
54486: LD_INT 3
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 3
54495: NEG
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 3
54506: NEG
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 2
54518: NEG
54519: PUSH
54520: LD_INT 0
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 2
54529: NEG
54530: PUSH
54531: LD_INT 1
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 3
54540: NEG
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 4
54551: NEG
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 4
54562: NEG
54563: PUSH
54564: LD_INT 1
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 4
54574: NEG
54575: PUSH
54576: LD_INT 2
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 2
54586: NEG
54587: PUSH
54588: LD_INT 2
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 4
54597: NEG
54598: PUSH
54599: LD_INT 4
54601: NEG
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 4
54609: NEG
54610: PUSH
54611: LD_INT 5
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 3
54621: NEG
54622: PUSH
54623: LD_INT 4
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 3
54633: NEG
54634: PUSH
54635: LD_INT 3
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 4
54645: NEG
54646: PUSH
54647: LD_INT 3
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 5
54657: NEG
54658: PUSH
54659: LD_INT 4
54661: NEG
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 5
54669: NEG
54670: PUSH
54671: LD_INT 5
54673: NEG
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 3
54681: NEG
54682: PUSH
54683: LD_INT 5
54685: NEG
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 5
54693: NEG
54694: PUSH
54695: LD_INT 3
54697: NEG
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: LD_INT 3
54708: NEG
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: LD_INT 4
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: LD_INT 3
54730: NEG
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 1
54738: PUSH
54739: LD_INT 2
54741: NEG
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: LD_INT 2
54752: NEG
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 1
54760: NEG
54761: PUSH
54762: LD_INT 3
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: LD_INT 4
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 2
54784: PUSH
54785: LD_INT 2
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 2
54795: NEG
54796: PUSH
54797: LD_INT 4
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 4
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 4
54817: PUSH
54818: LD_INT 1
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 5
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 5
54838: PUSH
54839: LD_INT 1
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 4
54848: PUSH
54849: LD_INT 1
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 3
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 3
54868: PUSH
54869: LD_INT 1
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 3
54879: PUSH
54880: LD_INT 2
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 5
54890: PUSH
54891: LD_INT 2
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54945: LD_ADDR_VAR 0 32
54949: PUSH
54950: LD_INT 4
54952: NEG
54953: PUSH
54954: LD_INT 0
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 4
54963: NEG
54964: PUSH
54965: LD_INT 1
54967: NEG
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 3
54975: NEG
54976: PUSH
54977: LD_INT 0
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 3
54986: NEG
54987: PUSH
54988: LD_INT 1
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 4
54997: NEG
54998: PUSH
54999: LD_INT 1
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 5
55008: NEG
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 5
55019: NEG
55020: PUSH
55021: LD_INT 1
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 5
55031: NEG
55032: PUSH
55033: LD_INT 2
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 3
55043: NEG
55044: PUSH
55045: LD_INT 2
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 3
55054: NEG
55055: PUSH
55056: LD_INT 3
55058: NEG
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 3
55066: NEG
55067: PUSH
55068: LD_INT 4
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 2
55078: NEG
55079: PUSH
55080: LD_INT 3
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 2
55090: NEG
55091: PUSH
55092: LD_INT 2
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 3
55102: NEG
55103: PUSH
55104: LD_INT 2
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 4
55114: NEG
55115: PUSH
55116: LD_INT 3
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 4
55126: NEG
55127: PUSH
55128: LD_INT 4
55130: NEG
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 2
55138: NEG
55139: PUSH
55140: LD_INT 4
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 4
55150: NEG
55151: PUSH
55152: LD_INT 2
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: LD_INT 4
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 0
55173: PUSH
55174: LD_INT 5
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 1
55184: PUSH
55185: LD_INT 4
55187: NEG
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 1
55195: PUSH
55196: LD_INT 3
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: LD_INT 3
55209: NEG
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 1
55217: NEG
55218: PUSH
55219: LD_INT 4
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: NEG
55230: PUSH
55231: LD_INT 5
55233: NEG
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 2
55241: PUSH
55242: LD_INT 3
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 2
55252: NEG
55253: PUSH
55254: LD_INT 5
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 3
55264: PUSH
55265: LD_INT 0
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 3
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 4
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 4
55295: PUSH
55296: LD_INT 1
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 3
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 2
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 2
55325: PUSH
55326: LD_INT 1
55328: NEG
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 2
55336: PUSH
55337: LD_INT 2
55339: NEG
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 4
55347: PUSH
55348: LD_INT 2
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 4
55357: PUSH
55358: LD_INT 4
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 4
55367: PUSH
55368: LD_INT 3
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 5
55377: PUSH
55378: LD_INT 4
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 5
55387: PUSH
55388: LD_INT 5
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 4
55397: PUSH
55398: LD_INT 5
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 3
55407: PUSH
55408: LD_INT 4
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 3
55417: PUSH
55418: LD_INT 3
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 5
55427: PUSH
55428: LD_INT 3
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 3
55437: PUSH
55438: LD_INT 5
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55492: LD_ADDR_VAR 0 33
55496: PUSH
55497: LD_INT 4
55499: NEG
55500: PUSH
55501: LD_INT 4
55503: NEG
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 4
55511: NEG
55512: PUSH
55513: LD_INT 5
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 3
55523: NEG
55524: PUSH
55525: LD_INT 4
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 3
55535: NEG
55536: PUSH
55537: LD_INT 3
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 4
55547: NEG
55548: PUSH
55549: LD_INT 3
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 5
55559: NEG
55560: PUSH
55561: LD_INT 4
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 5
55571: NEG
55572: PUSH
55573: LD_INT 5
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 3
55583: NEG
55584: PUSH
55585: LD_INT 5
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 5
55595: NEG
55596: PUSH
55597: LD_INT 3
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: LD_INT 3
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: LD_INT 4
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: LD_INT 3
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 1
55640: PUSH
55641: LD_INT 2
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: LD_INT 2
55654: NEG
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 1
55662: NEG
55663: PUSH
55664: LD_INT 3
55666: NEG
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 1
55674: NEG
55675: PUSH
55676: LD_INT 4
55678: NEG
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 2
55686: PUSH
55687: LD_INT 2
55689: NEG
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 2
55697: NEG
55698: PUSH
55699: LD_INT 4
55701: NEG
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 4
55709: PUSH
55710: LD_INT 0
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 4
55719: PUSH
55720: LD_INT 1
55722: NEG
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 5
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 5
55740: PUSH
55741: LD_INT 1
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 4
55750: PUSH
55751: LD_INT 1
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 3
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 3
55770: PUSH
55771: LD_INT 1
55773: NEG
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 3
55781: PUSH
55782: LD_INT 2
55784: NEG
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 5
55792: PUSH
55793: LD_INT 2
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 3
55802: PUSH
55803: LD_INT 3
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 3
55812: PUSH
55813: LD_INT 2
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 4
55822: PUSH
55823: LD_INT 3
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 4
55832: PUSH
55833: LD_INT 4
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 3
55842: PUSH
55843: LD_INT 4
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 2
55852: PUSH
55853: LD_INT 3
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 2
55862: PUSH
55863: LD_INT 2
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 4
55872: PUSH
55873: LD_INT 2
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 2
55882: PUSH
55883: LD_INT 4
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 0
55892: PUSH
55893: LD_INT 4
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: LD_INT 3
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: PUSH
55913: LD_INT 4
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 1
55922: PUSH
55923: LD_INT 5
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: LD_INT 5
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: LD_INT 4
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 1
55953: NEG
55954: PUSH
55955: LD_INT 3
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 2
55964: PUSH
55965: LD_INT 5
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 2
55974: NEG
55975: PUSH
55976: LD_INT 3
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56030: LD_ADDR_VAR 0 34
56034: PUSH
56035: LD_INT 0
56037: PUSH
56038: LD_INT 4
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 0
56048: PUSH
56049: LD_INT 5
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 1
56059: PUSH
56060: LD_INT 4
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 1
56070: PUSH
56071: LD_INT 3
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: LD_INT 3
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 1
56092: NEG
56093: PUSH
56094: LD_INT 4
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 1
56104: NEG
56105: PUSH
56106: LD_INT 5
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 2
56116: PUSH
56117: LD_INT 3
56119: NEG
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 2
56127: NEG
56128: PUSH
56129: LD_INT 5
56131: NEG
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 3
56139: PUSH
56140: LD_INT 0
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 3
56149: PUSH
56150: LD_INT 1
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 4
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 4
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 3
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 2
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: LD_INT 1
56203: NEG
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 2
56211: PUSH
56212: LD_INT 2
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 4
56222: PUSH
56223: LD_INT 2
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 4
56232: PUSH
56233: LD_INT 4
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 4
56242: PUSH
56243: LD_INT 3
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 5
56252: PUSH
56253: LD_INT 4
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 5
56262: PUSH
56263: LD_INT 5
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 4
56272: PUSH
56273: LD_INT 5
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 3
56282: PUSH
56283: LD_INT 4
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 3
56292: PUSH
56293: LD_INT 3
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 5
56302: PUSH
56303: LD_INT 3
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 3
56312: PUSH
56313: LD_INT 5
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 0
56322: PUSH
56323: LD_INT 3
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 0
56332: PUSH
56333: LD_INT 2
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 1
56342: PUSH
56343: LD_INT 3
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 1
56352: PUSH
56353: LD_INT 4
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: LD_INT 4
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 1
56372: NEG
56373: PUSH
56374: LD_INT 3
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 1
56383: NEG
56384: PUSH
56385: LD_INT 2
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 2
56394: PUSH
56395: LD_INT 4
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 2
56404: NEG
56405: PUSH
56406: LD_INT 2
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 4
56415: NEG
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 4
56426: NEG
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 3
56438: NEG
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 3
56449: NEG
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 4
56460: NEG
56461: PUSH
56462: LD_INT 1
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 5
56471: NEG
56472: PUSH
56473: LD_INT 0
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 5
56482: NEG
56483: PUSH
56484: LD_INT 1
56486: NEG
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 5
56494: NEG
56495: PUSH
56496: LD_INT 2
56498: NEG
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 3
56506: NEG
56507: PUSH
56508: LD_INT 2
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: ST_TO_ADDR
// end ; end ;
56562: GO 56565
56564: POP
// case btype of b_depot , b_warehouse :
56565: LD_VAR 0 1
56569: PUSH
56570: LD_INT 0
56572: DOUBLE
56573: EQUAL
56574: IFTRUE 56584
56576: LD_INT 1
56578: DOUBLE
56579: EQUAL
56580: IFTRUE 56584
56582: GO 56785
56584: POP
// case nation of nation_american :
56585: LD_VAR 0 5
56589: PUSH
56590: LD_INT 1
56592: DOUBLE
56593: EQUAL
56594: IFTRUE 56598
56596: GO 56654
56598: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56599: LD_ADDR_VAR 0 9
56603: PUSH
56604: LD_VAR 0 11
56608: PUSH
56609: LD_VAR 0 12
56613: PUSH
56614: LD_VAR 0 13
56618: PUSH
56619: LD_VAR 0 14
56623: PUSH
56624: LD_VAR 0 15
56628: PUSH
56629: LD_VAR 0 16
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: PUSH
56642: LD_VAR 0 4
56646: PUSH
56647: LD_INT 1
56649: PLUS
56650: ARRAY
56651: ST_TO_ADDR
56652: GO 56783
56654: LD_INT 2
56656: DOUBLE
56657: EQUAL
56658: IFTRUE 56662
56660: GO 56718
56662: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56663: LD_ADDR_VAR 0 9
56667: PUSH
56668: LD_VAR 0 17
56672: PUSH
56673: LD_VAR 0 18
56677: PUSH
56678: LD_VAR 0 19
56682: PUSH
56683: LD_VAR 0 20
56687: PUSH
56688: LD_VAR 0 21
56692: PUSH
56693: LD_VAR 0 22
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: PUSH
56706: LD_VAR 0 4
56710: PUSH
56711: LD_INT 1
56713: PLUS
56714: ARRAY
56715: ST_TO_ADDR
56716: GO 56783
56718: LD_INT 3
56720: DOUBLE
56721: EQUAL
56722: IFTRUE 56726
56724: GO 56782
56726: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56727: LD_ADDR_VAR 0 9
56731: PUSH
56732: LD_VAR 0 23
56736: PUSH
56737: LD_VAR 0 24
56741: PUSH
56742: LD_VAR 0 25
56746: PUSH
56747: LD_VAR 0 26
56751: PUSH
56752: LD_VAR 0 27
56756: PUSH
56757: LD_VAR 0 28
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: PUSH
56770: LD_VAR 0 4
56774: PUSH
56775: LD_INT 1
56777: PLUS
56778: ARRAY
56779: ST_TO_ADDR
56780: GO 56783
56782: POP
56783: GO 57338
56785: LD_INT 2
56787: DOUBLE
56788: EQUAL
56789: IFTRUE 56799
56791: LD_INT 3
56793: DOUBLE
56794: EQUAL
56795: IFTRUE 56799
56797: GO 56855
56799: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56800: LD_ADDR_VAR 0 9
56804: PUSH
56805: LD_VAR 0 29
56809: PUSH
56810: LD_VAR 0 30
56814: PUSH
56815: LD_VAR 0 31
56819: PUSH
56820: LD_VAR 0 32
56824: PUSH
56825: LD_VAR 0 33
56829: PUSH
56830: LD_VAR 0 34
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: PUSH
56843: LD_VAR 0 4
56847: PUSH
56848: LD_INT 1
56850: PLUS
56851: ARRAY
56852: ST_TO_ADDR
56853: GO 57338
56855: LD_INT 16
56857: DOUBLE
56858: EQUAL
56859: IFTRUE 56917
56861: LD_INT 17
56863: DOUBLE
56864: EQUAL
56865: IFTRUE 56917
56867: LD_INT 18
56869: DOUBLE
56870: EQUAL
56871: IFTRUE 56917
56873: LD_INT 19
56875: DOUBLE
56876: EQUAL
56877: IFTRUE 56917
56879: LD_INT 22
56881: DOUBLE
56882: EQUAL
56883: IFTRUE 56917
56885: LD_INT 20
56887: DOUBLE
56888: EQUAL
56889: IFTRUE 56917
56891: LD_INT 21
56893: DOUBLE
56894: EQUAL
56895: IFTRUE 56917
56897: LD_INT 23
56899: DOUBLE
56900: EQUAL
56901: IFTRUE 56917
56903: LD_INT 24
56905: DOUBLE
56906: EQUAL
56907: IFTRUE 56917
56909: LD_INT 25
56911: DOUBLE
56912: EQUAL
56913: IFTRUE 56917
56915: GO 56973
56917: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56918: LD_ADDR_VAR 0 9
56922: PUSH
56923: LD_VAR 0 35
56927: PUSH
56928: LD_VAR 0 36
56932: PUSH
56933: LD_VAR 0 37
56937: PUSH
56938: LD_VAR 0 38
56942: PUSH
56943: LD_VAR 0 39
56947: PUSH
56948: LD_VAR 0 40
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: PUSH
56961: LD_VAR 0 4
56965: PUSH
56966: LD_INT 1
56968: PLUS
56969: ARRAY
56970: ST_TO_ADDR
56971: GO 57338
56973: LD_INT 6
56975: DOUBLE
56976: EQUAL
56977: IFTRUE 57029
56979: LD_INT 7
56981: DOUBLE
56982: EQUAL
56983: IFTRUE 57029
56985: LD_INT 8
56987: DOUBLE
56988: EQUAL
56989: IFTRUE 57029
56991: LD_INT 13
56993: DOUBLE
56994: EQUAL
56995: IFTRUE 57029
56997: LD_INT 12
56999: DOUBLE
57000: EQUAL
57001: IFTRUE 57029
57003: LD_INT 15
57005: DOUBLE
57006: EQUAL
57007: IFTRUE 57029
57009: LD_INT 11
57011: DOUBLE
57012: EQUAL
57013: IFTRUE 57029
57015: LD_INT 14
57017: DOUBLE
57018: EQUAL
57019: IFTRUE 57029
57021: LD_INT 10
57023: DOUBLE
57024: EQUAL
57025: IFTRUE 57029
57027: GO 57085
57029: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57030: LD_ADDR_VAR 0 9
57034: PUSH
57035: LD_VAR 0 41
57039: PUSH
57040: LD_VAR 0 42
57044: PUSH
57045: LD_VAR 0 43
57049: PUSH
57050: LD_VAR 0 44
57054: PUSH
57055: LD_VAR 0 45
57059: PUSH
57060: LD_VAR 0 46
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: PUSH
57073: LD_VAR 0 4
57077: PUSH
57078: LD_INT 1
57080: PLUS
57081: ARRAY
57082: ST_TO_ADDR
57083: GO 57338
57085: LD_INT 36
57087: DOUBLE
57088: EQUAL
57089: IFTRUE 57093
57091: GO 57149
57093: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57094: LD_ADDR_VAR 0 9
57098: PUSH
57099: LD_VAR 0 47
57103: PUSH
57104: LD_VAR 0 48
57108: PUSH
57109: LD_VAR 0 49
57113: PUSH
57114: LD_VAR 0 50
57118: PUSH
57119: LD_VAR 0 51
57123: PUSH
57124: LD_VAR 0 52
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: PUSH
57137: LD_VAR 0 4
57141: PUSH
57142: LD_INT 1
57144: PLUS
57145: ARRAY
57146: ST_TO_ADDR
57147: GO 57338
57149: LD_INT 4
57151: DOUBLE
57152: EQUAL
57153: IFTRUE 57175
57155: LD_INT 5
57157: DOUBLE
57158: EQUAL
57159: IFTRUE 57175
57161: LD_INT 34
57163: DOUBLE
57164: EQUAL
57165: IFTRUE 57175
57167: LD_INT 37
57169: DOUBLE
57170: EQUAL
57171: IFTRUE 57175
57173: GO 57231
57175: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57176: LD_ADDR_VAR 0 9
57180: PUSH
57181: LD_VAR 0 53
57185: PUSH
57186: LD_VAR 0 54
57190: PUSH
57191: LD_VAR 0 55
57195: PUSH
57196: LD_VAR 0 56
57200: PUSH
57201: LD_VAR 0 57
57205: PUSH
57206: LD_VAR 0 58
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: PUSH
57219: LD_VAR 0 4
57223: PUSH
57224: LD_INT 1
57226: PLUS
57227: ARRAY
57228: ST_TO_ADDR
57229: GO 57338
57231: LD_INT 31
57233: DOUBLE
57234: EQUAL
57235: IFTRUE 57281
57237: LD_INT 32
57239: DOUBLE
57240: EQUAL
57241: IFTRUE 57281
57243: LD_INT 33
57245: DOUBLE
57246: EQUAL
57247: IFTRUE 57281
57249: LD_INT 27
57251: DOUBLE
57252: EQUAL
57253: IFTRUE 57281
57255: LD_INT 26
57257: DOUBLE
57258: EQUAL
57259: IFTRUE 57281
57261: LD_INT 28
57263: DOUBLE
57264: EQUAL
57265: IFTRUE 57281
57267: LD_INT 29
57269: DOUBLE
57270: EQUAL
57271: IFTRUE 57281
57273: LD_INT 30
57275: DOUBLE
57276: EQUAL
57277: IFTRUE 57281
57279: GO 57337
57281: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57282: LD_ADDR_VAR 0 9
57286: PUSH
57287: LD_VAR 0 59
57291: PUSH
57292: LD_VAR 0 60
57296: PUSH
57297: LD_VAR 0 61
57301: PUSH
57302: LD_VAR 0 62
57306: PUSH
57307: LD_VAR 0 63
57311: PUSH
57312: LD_VAR 0 64
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: PUSH
57325: LD_VAR 0 4
57329: PUSH
57330: LD_INT 1
57332: PLUS
57333: ARRAY
57334: ST_TO_ADDR
57335: GO 57338
57337: POP
// temp_list2 = [ ] ;
57338: LD_ADDR_VAR 0 10
57342: PUSH
57343: EMPTY
57344: ST_TO_ADDR
// for i in temp_list do
57345: LD_ADDR_VAR 0 8
57349: PUSH
57350: LD_VAR 0 9
57354: PUSH
57355: FOR_IN
57356: IFFALSE 57408
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57358: LD_ADDR_VAR 0 10
57362: PUSH
57363: LD_VAR 0 10
57367: PUSH
57368: LD_VAR 0 8
57372: PUSH
57373: LD_INT 1
57375: ARRAY
57376: PUSH
57377: LD_VAR 0 2
57381: PLUS
57382: PUSH
57383: LD_VAR 0 8
57387: PUSH
57388: LD_INT 2
57390: ARRAY
57391: PUSH
57392: LD_VAR 0 3
57396: PLUS
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: EMPTY
57403: LIST
57404: ADD
57405: ST_TO_ADDR
57406: GO 57355
57408: POP
57409: POP
// result = temp_list2 ;
57410: LD_ADDR_VAR 0 7
57414: PUSH
57415: LD_VAR 0 10
57419: ST_TO_ADDR
// end ;
57420: LD_VAR 0 7
57424: RET
// export function EnemyInRange ( unit , dist ) ; begin
57425: LD_INT 0
57427: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57428: LD_ADDR_VAR 0 3
57432: PUSH
57433: LD_VAR 0 1
57437: PPUSH
57438: CALL_OW 255
57442: PPUSH
57443: LD_VAR 0 1
57447: PPUSH
57448: CALL_OW 250
57452: PPUSH
57453: LD_VAR 0 1
57457: PPUSH
57458: CALL_OW 251
57462: PPUSH
57463: LD_VAR 0 2
57467: PPUSH
57468: CALL 30682 0 4
57472: PUSH
57473: LD_INT 4
57475: ARRAY
57476: ST_TO_ADDR
// end ;
57477: LD_VAR 0 3
57481: RET
// export function PlayerSeeMe ( unit ) ; begin
57482: LD_INT 0
57484: PPUSH
// result := See ( your_side , unit ) ;
57485: LD_ADDR_VAR 0 2
57489: PUSH
57490: LD_OWVAR 2
57494: PPUSH
57495: LD_VAR 0 1
57499: PPUSH
57500: CALL_OW 292
57504: ST_TO_ADDR
// end ;
57505: LD_VAR 0 2
57509: RET
// export function ReverseDir ( unit ) ; begin
57510: LD_INT 0
57512: PPUSH
// if not unit then
57513: LD_VAR 0 1
57517: NOT
57518: IFFALSE 57522
// exit ;
57520: GO 57545
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57522: LD_ADDR_VAR 0 2
57526: PUSH
57527: LD_VAR 0 1
57531: PPUSH
57532: CALL_OW 254
57536: PUSH
57537: LD_INT 3
57539: PLUS
57540: PUSH
57541: LD_INT 6
57543: MOD
57544: ST_TO_ADDR
// end ;
57545: LD_VAR 0 2
57549: RET
// export function ReverseArray ( array ) ; var i ; begin
57550: LD_INT 0
57552: PPUSH
57553: PPUSH
// if not array then
57554: LD_VAR 0 1
57558: NOT
57559: IFFALSE 57563
// exit ;
57561: GO 57618
// result := [ ] ;
57563: LD_ADDR_VAR 0 2
57567: PUSH
57568: EMPTY
57569: ST_TO_ADDR
// for i := array downto 1 do
57570: LD_ADDR_VAR 0 3
57574: PUSH
57575: DOUBLE
57576: LD_VAR 0 1
57580: INC
57581: ST_TO_ADDR
57582: LD_INT 1
57584: PUSH
57585: FOR_DOWNTO
57586: IFFALSE 57616
// result := Join ( result , array [ i ] ) ;
57588: LD_ADDR_VAR 0 2
57592: PUSH
57593: LD_VAR 0 2
57597: PPUSH
57598: LD_VAR 0 1
57602: PUSH
57603: LD_VAR 0 3
57607: ARRAY
57608: PPUSH
57609: CALL 62460 0 2
57613: ST_TO_ADDR
57614: GO 57585
57616: POP
57617: POP
// end ;
57618: LD_VAR 0 2
57622: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
57623: LD_INT 0
57625: PPUSH
57626: PPUSH
57627: PPUSH
57628: PPUSH
57629: PPUSH
57630: PPUSH
// if not unit or not hexes then
57631: LD_VAR 0 1
57635: NOT
57636: IFTRUE 57645
57638: PUSH
57639: LD_VAR 0 2
57643: NOT
57644: OR
57645: IFFALSE 57649
// exit ;
57647: GO 57772
// dist := 9999 ;
57649: LD_ADDR_VAR 0 5
57653: PUSH
57654: LD_INT 9999
57656: ST_TO_ADDR
// for i = 1 to hexes do
57657: LD_ADDR_VAR 0 4
57661: PUSH
57662: DOUBLE
57663: LD_INT 1
57665: DEC
57666: ST_TO_ADDR
57667: LD_VAR 0 2
57671: PUSH
57672: FOR_TO
57673: IFFALSE 57760
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57675: LD_ADDR_VAR 0 6
57679: PUSH
57680: LD_VAR 0 1
57684: PPUSH
57685: LD_VAR 0 2
57689: PUSH
57690: LD_VAR 0 4
57694: ARRAY
57695: PUSH
57696: LD_INT 1
57698: ARRAY
57699: PPUSH
57700: LD_VAR 0 2
57704: PUSH
57705: LD_VAR 0 4
57709: ARRAY
57710: PUSH
57711: LD_INT 2
57713: ARRAY
57714: PPUSH
57715: CALL_OW 297
57719: ST_TO_ADDR
// if tdist < dist then
57720: LD_VAR 0 6
57724: PUSH
57725: LD_VAR 0 5
57729: LESS
57730: IFFALSE 57758
// begin hex := hexes [ i ] ;
57732: LD_ADDR_VAR 0 8
57736: PUSH
57737: LD_VAR 0 2
57741: PUSH
57742: LD_VAR 0 4
57746: ARRAY
57747: ST_TO_ADDR
// dist := tdist ;
57748: LD_ADDR_VAR 0 5
57752: PUSH
57753: LD_VAR 0 6
57757: ST_TO_ADDR
// end ; end ;
57758: GO 57672
57760: POP
57761: POP
// result := hex ;
57762: LD_ADDR_VAR 0 3
57766: PUSH
57767: LD_VAR 0 8
57771: ST_TO_ADDR
// end ;
57772: LD_VAR 0 3
57776: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57777: LD_INT 0
57779: PPUSH
57780: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57781: LD_VAR 0 1
57785: NOT
57786: IFTRUE 57825
57788: PUSH
57789: LD_VAR 0 1
57793: PUSH
57794: LD_INT 21
57796: PUSH
57797: LD_INT 2
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 23
57806: PUSH
57807: LD_INT 2
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PPUSH
57818: CALL_OW 69
57822: IN
57823: NOT
57824: OR
57825: IFFALSE 57829
// exit ;
57827: GO 57876
// for i = 1 to 3 do
57829: LD_ADDR_VAR 0 3
57833: PUSH
57834: DOUBLE
57835: LD_INT 1
57837: DEC
57838: ST_TO_ADDR
57839: LD_INT 3
57841: PUSH
57842: FOR_TO
57843: IFFALSE 57874
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57845: LD_VAR 0 1
57849: PPUSH
57850: CALL_OW 250
57854: PPUSH
57855: LD_VAR 0 1
57859: PPUSH
57860: CALL_OW 251
57864: PPUSH
57865: LD_INT 1
57867: PPUSH
57868: CALL_OW 453
57872: GO 57842
57874: POP
57875: POP
// end ;
57876: LD_VAR 0 2
57880: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57881: LD_INT 0
57883: PPUSH
57884: PPUSH
57885: PPUSH
57886: PPUSH
57887: PPUSH
57888: PPUSH
// if not unit or not enemy_unit then
57889: LD_VAR 0 1
57893: NOT
57894: IFTRUE 57903
57896: PUSH
57897: LD_VAR 0 2
57901: NOT
57902: OR
57903: IFFALSE 57907
// exit ;
57905: GO 58378
// if GetLives ( i ) < 250 then
57907: LD_VAR 0 4
57911: PPUSH
57912: CALL_OW 256
57916: PUSH
57917: LD_INT 250
57919: LESS
57920: IFFALSE 57933
// begin ComAutodestruct ( i ) ;
57922: LD_VAR 0 4
57926: PPUSH
57927: CALL 57777 0 1
// exit ;
57931: GO 58378
// end ; x := GetX ( enemy_unit ) ;
57933: LD_ADDR_VAR 0 7
57937: PUSH
57938: LD_VAR 0 2
57942: PPUSH
57943: CALL_OW 250
57947: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57948: LD_ADDR_VAR 0 8
57952: PUSH
57953: LD_VAR 0 2
57957: PPUSH
57958: CALL_OW 251
57962: ST_TO_ADDR
// if not x or not y then
57963: LD_VAR 0 7
57967: NOT
57968: IFTRUE 57977
57970: PUSH
57971: LD_VAR 0 8
57975: NOT
57976: OR
57977: IFFALSE 57981
// exit ;
57979: GO 58378
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57981: LD_ADDR_VAR 0 6
57985: PUSH
57986: LD_VAR 0 7
57990: PPUSH
57991: LD_INT 0
57993: PPUSH
57994: LD_INT 4
57996: PPUSH
57997: CALL_OW 272
58001: PUSH
58002: LD_VAR 0 8
58006: PPUSH
58007: LD_INT 0
58009: PPUSH
58010: LD_INT 4
58012: PPUSH
58013: CALL_OW 273
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_VAR 0 7
58026: PPUSH
58027: LD_INT 1
58029: PPUSH
58030: LD_INT 4
58032: PPUSH
58033: CALL_OW 272
58037: PUSH
58038: LD_VAR 0 8
58042: PPUSH
58043: LD_INT 1
58045: PPUSH
58046: LD_INT 4
58048: PPUSH
58049: CALL_OW 273
58053: PUSH
58054: EMPTY
58055: LIST
58056: LIST
58057: PUSH
58058: LD_VAR 0 7
58062: PPUSH
58063: LD_INT 2
58065: PPUSH
58066: LD_INT 4
58068: PPUSH
58069: CALL_OW 272
58073: PUSH
58074: LD_VAR 0 8
58078: PPUSH
58079: LD_INT 2
58081: PPUSH
58082: LD_INT 4
58084: PPUSH
58085: CALL_OW 273
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_VAR 0 7
58098: PPUSH
58099: LD_INT 3
58101: PPUSH
58102: LD_INT 4
58104: PPUSH
58105: CALL_OW 272
58109: PUSH
58110: LD_VAR 0 8
58114: PPUSH
58115: LD_INT 3
58117: PPUSH
58118: LD_INT 4
58120: PPUSH
58121: CALL_OW 273
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_VAR 0 7
58134: PPUSH
58135: LD_INT 4
58137: PPUSH
58138: LD_INT 4
58140: PPUSH
58141: CALL_OW 272
58145: PUSH
58146: LD_VAR 0 8
58150: PPUSH
58151: LD_INT 4
58153: PPUSH
58154: LD_INT 4
58156: PPUSH
58157: CALL_OW 273
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_VAR 0 7
58170: PPUSH
58171: LD_INT 5
58173: PPUSH
58174: LD_INT 4
58176: PPUSH
58177: CALL_OW 272
58181: PUSH
58182: LD_VAR 0 8
58186: PPUSH
58187: LD_INT 5
58189: PPUSH
58190: LD_INT 4
58192: PPUSH
58193: CALL_OW 273
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: ST_TO_ADDR
// for i = tmp downto 1 do
58210: LD_ADDR_VAR 0 4
58214: PUSH
58215: DOUBLE
58216: LD_VAR 0 6
58220: INC
58221: ST_TO_ADDR
58222: LD_INT 1
58224: PUSH
58225: FOR_DOWNTO
58226: IFFALSE 58329
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58228: LD_VAR 0 6
58232: PUSH
58233: LD_VAR 0 4
58237: ARRAY
58238: PUSH
58239: LD_INT 1
58241: ARRAY
58242: PPUSH
58243: LD_VAR 0 6
58247: PUSH
58248: LD_VAR 0 4
58252: ARRAY
58253: PUSH
58254: LD_INT 2
58256: ARRAY
58257: PPUSH
58258: CALL_OW 488
58262: NOT
58263: IFTRUE 58305
58265: PUSH
58266: LD_VAR 0 6
58270: PUSH
58271: LD_VAR 0 4
58275: ARRAY
58276: PUSH
58277: LD_INT 1
58279: ARRAY
58280: PPUSH
58281: LD_VAR 0 6
58285: PUSH
58286: LD_VAR 0 4
58290: ARRAY
58291: PUSH
58292: LD_INT 2
58294: ARRAY
58295: PPUSH
58296: CALL_OW 428
58300: PUSH
58301: LD_INT 0
58303: NONEQUAL
58304: OR
58305: IFFALSE 58327
// tmp := Delete ( tmp , i ) ;
58307: LD_ADDR_VAR 0 6
58311: PUSH
58312: LD_VAR 0 6
58316: PPUSH
58317: LD_VAR 0 4
58321: PPUSH
58322: CALL_OW 3
58326: ST_TO_ADDR
58327: GO 58225
58329: POP
58330: POP
// j := GetClosestHex ( unit , tmp ) ;
58331: LD_ADDR_VAR 0 5
58335: PUSH
58336: LD_VAR 0 1
58340: PPUSH
58341: LD_VAR 0 6
58345: PPUSH
58346: CALL 57623 0 2
58350: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58351: LD_VAR 0 1
58355: PPUSH
58356: LD_VAR 0 5
58360: PUSH
58361: LD_INT 1
58363: ARRAY
58364: PPUSH
58365: LD_VAR 0 5
58369: PUSH
58370: LD_INT 2
58372: ARRAY
58373: PPUSH
58374: CALL_OW 111
// end ;
58378: LD_VAR 0 3
58382: RET
// export function PrepareApemanSoldier ( ) ; begin
58383: LD_INT 0
58385: PPUSH
// uc_nation := 0 ;
58386: LD_ADDR_OWVAR 21
58390: PUSH
58391: LD_INT 0
58393: ST_TO_ADDR
// hc_sex := sex_male ;
58394: LD_ADDR_OWVAR 27
58398: PUSH
58399: LD_INT 1
58401: ST_TO_ADDR
// hc_name :=  ;
58402: LD_ADDR_OWVAR 26
58406: PUSH
58407: LD_STRING 
58409: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58410: LD_ADDR_OWVAR 28
58414: PUSH
58415: LD_INT 15
58417: ST_TO_ADDR
// hc_gallery :=  ;
58418: LD_ADDR_OWVAR 33
58422: PUSH
58423: LD_STRING 
58425: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58426: LD_ADDR_OWVAR 31
58430: PUSH
58431: LD_INT 0
58433: PPUSH
58434: LD_INT 3
58436: PPUSH
58437: CALL_OW 12
58441: PUSH
58442: LD_INT 0
58444: PPUSH
58445: LD_INT 3
58447: PPUSH
58448: CALL_OW 12
58452: PUSH
58453: LD_INT 0
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58465: LD_ADDR_OWVAR 29
58469: PUSH
58470: LD_INT 12
58472: PUSH
58473: LD_INT 12
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: ST_TO_ADDR
// end ;
58480: LD_VAR 0 1
58484: RET
// export function PrepareApemanEngineer ( ) ; begin
58485: LD_INT 0
58487: PPUSH
// uc_nation := 0 ;
58488: LD_ADDR_OWVAR 21
58492: PUSH
58493: LD_INT 0
58495: ST_TO_ADDR
// hc_sex := sex_male ;
58496: LD_ADDR_OWVAR 27
58500: PUSH
58501: LD_INT 1
58503: ST_TO_ADDR
// hc_name :=  ;
58504: LD_ADDR_OWVAR 26
58508: PUSH
58509: LD_STRING 
58511: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58512: LD_ADDR_OWVAR 28
58516: PUSH
58517: LD_INT 16
58519: ST_TO_ADDR
// hc_gallery :=  ;
58520: LD_ADDR_OWVAR 33
58524: PUSH
58525: LD_STRING 
58527: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58528: LD_ADDR_OWVAR 31
58532: PUSH
58533: LD_INT 0
58535: PPUSH
58536: LD_INT 3
58538: PPUSH
58539: CALL_OW 12
58543: PUSH
58544: LD_INT 0
58546: PPUSH
58547: LD_INT 3
58549: PPUSH
58550: CALL_OW 12
58554: PUSH
58555: LD_INT 0
58557: PUSH
58558: LD_INT 0
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58567: LD_ADDR_OWVAR 29
58571: PUSH
58572: LD_INT 12
58574: PUSH
58575: LD_INT 12
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: ST_TO_ADDR
// end ;
58582: LD_VAR 0 1
58586: RET
// export function PrepareApeman ( agressivity ) ; begin
58587: LD_INT 0
58589: PPUSH
// uc_side := 0 ;
58590: LD_ADDR_OWVAR 20
58594: PUSH
58595: LD_INT 0
58597: ST_TO_ADDR
// uc_nation := 0 ;
58598: LD_ADDR_OWVAR 21
58602: PUSH
58603: LD_INT 0
58605: ST_TO_ADDR
// hc_sex := sex_male ;
58606: LD_ADDR_OWVAR 27
58610: PUSH
58611: LD_INT 1
58613: ST_TO_ADDR
// hc_class := class_apeman ;
58614: LD_ADDR_OWVAR 28
58618: PUSH
58619: LD_INT 12
58621: ST_TO_ADDR
// hc_gallery :=  ;
58622: LD_ADDR_OWVAR 33
58626: PUSH
58627: LD_STRING 
58629: ST_TO_ADDR
// hc_name :=  ;
58630: LD_ADDR_OWVAR 26
58634: PUSH
58635: LD_STRING 
58637: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58638: LD_ADDR_OWVAR 29
58642: PUSH
58643: LD_INT 12
58645: PUSH
58646: LD_INT 12
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: ST_TO_ADDR
// if agressivity = 0 then
58653: LD_VAR 0 1
58657: PUSH
58658: LD_INT 0
58660: EQUAL
58661: IFFALSE 58673
// hc_agressivity := 0 else
58663: LD_ADDR_OWVAR 35
58667: PUSH
58668: LD_INT 0
58670: ST_TO_ADDR
58671: GO 58694
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58673: LD_ADDR_OWVAR 35
58677: PUSH
58678: LD_VAR 0 1
58682: NEG
58683: PPUSH
58684: LD_VAR 0 1
58688: PPUSH
58689: CALL_OW 12
58693: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58694: LD_ADDR_OWVAR 31
58698: PUSH
58699: LD_INT 0
58701: PPUSH
58702: LD_INT 3
58704: PPUSH
58705: CALL_OW 12
58709: PUSH
58710: LD_INT 0
58712: PPUSH
58713: LD_INT 3
58715: PPUSH
58716: CALL_OW 12
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: LD_INT 0
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: ST_TO_ADDR
// end ;
58733: LD_VAR 0 2
58737: RET
// export function PrepareTiger ( agressivity ) ; begin
58738: LD_INT 0
58740: PPUSH
// uc_side := 0 ;
58741: LD_ADDR_OWVAR 20
58745: PUSH
58746: LD_INT 0
58748: ST_TO_ADDR
// uc_nation := 0 ;
58749: LD_ADDR_OWVAR 21
58753: PUSH
58754: LD_INT 0
58756: ST_TO_ADDR
// InitHc ;
58757: CALL_OW 19
// hc_class := class_tiger ;
58761: LD_ADDR_OWVAR 28
58765: PUSH
58766: LD_INT 14
58768: ST_TO_ADDR
// hc_gallery :=  ;
58769: LD_ADDR_OWVAR 33
58773: PUSH
58774: LD_STRING 
58776: ST_TO_ADDR
// hc_name :=  ;
58777: LD_ADDR_OWVAR 26
58781: PUSH
58782: LD_STRING 
58784: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58785: LD_ADDR_OWVAR 35
58789: PUSH
58790: LD_VAR 0 1
58794: NEG
58795: PPUSH
58796: LD_VAR 0 1
58800: PPUSH
58801: CALL_OW 12
58805: ST_TO_ADDR
// end ;
58806: LD_VAR 0 2
58810: RET
// export function PrepareEnchidna ( ) ; begin
58811: LD_INT 0
58813: PPUSH
// uc_side := 0 ;
58814: LD_ADDR_OWVAR 20
58818: PUSH
58819: LD_INT 0
58821: ST_TO_ADDR
// uc_nation := 0 ;
58822: LD_ADDR_OWVAR 21
58826: PUSH
58827: LD_INT 0
58829: ST_TO_ADDR
// InitHc ;
58830: CALL_OW 19
// hc_class := class_baggie ;
58834: LD_ADDR_OWVAR 28
58838: PUSH
58839: LD_INT 13
58841: ST_TO_ADDR
// hc_gallery :=  ;
58842: LD_ADDR_OWVAR 33
58846: PUSH
58847: LD_STRING 
58849: ST_TO_ADDR
// hc_name :=  ;
58850: LD_ADDR_OWVAR 26
58854: PUSH
58855: LD_STRING 
58857: ST_TO_ADDR
// end ;
58858: LD_VAR 0 1
58862: RET
// export function PrepareFrog ( ) ; begin
58863: LD_INT 0
58865: PPUSH
// uc_side := 0 ;
58866: LD_ADDR_OWVAR 20
58870: PUSH
58871: LD_INT 0
58873: ST_TO_ADDR
// uc_nation := 0 ;
58874: LD_ADDR_OWVAR 21
58878: PUSH
58879: LD_INT 0
58881: ST_TO_ADDR
// InitHc ;
58882: CALL_OW 19
// hc_class := class_frog ;
58886: LD_ADDR_OWVAR 28
58890: PUSH
58891: LD_INT 19
58893: ST_TO_ADDR
// hc_gallery :=  ;
58894: LD_ADDR_OWVAR 33
58898: PUSH
58899: LD_STRING 
58901: ST_TO_ADDR
// hc_name :=  ;
58902: LD_ADDR_OWVAR 26
58906: PUSH
58907: LD_STRING 
58909: ST_TO_ADDR
// end ;
58910: LD_VAR 0 1
58914: RET
// export function PrepareFish ( ) ; begin
58915: LD_INT 0
58917: PPUSH
// uc_side := 0 ;
58918: LD_ADDR_OWVAR 20
58922: PUSH
58923: LD_INT 0
58925: ST_TO_ADDR
// uc_nation := 0 ;
58926: LD_ADDR_OWVAR 21
58930: PUSH
58931: LD_INT 0
58933: ST_TO_ADDR
// InitHc ;
58934: CALL_OW 19
// hc_class := class_fish ;
58938: LD_ADDR_OWVAR 28
58942: PUSH
58943: LD_INT 20
58945: ST_TO_ADDR
// hc_gallery :=  ;
58946: LD_ADDR_OWVAR 33
58950: PUSH
58951: LD_STRING 
58953: ST_TO_ADDR
// hc_name :=  ;
58954: LD_ADDR_OWVAR 26
58958: PUSH
58959: LD_STRING 
58961: ST_TO_ADDR
// end ;
58962: LD_VAR 0 1
58966: RET
// export function PrepareBird ( ) ; begin
58967: LD_INT 0
58969: PPUSH
// uc_side := 0 ;
58970: LD_ADDR_OWVAR 20
58974: PUSH
58975: LD_INT 0
58977: ST_TO_ADDR
// uc_nation := 0 ;
58978: LD_ADDR_OWVAR 21
58982: PUSH
58983: LD_INT 0
58985: ST_TO_ADDR
// InitHc ;
58986: CALL_OW 19
// hc_class := class_phororhacos ;
58990: LD_ADDR_OWVAR 28
58994: PUSH
58995: LD_INT 18
58997: ST_TO_ADDR
// hc_gallery :=  ;
58998: LD_ADDR_OWVAR 33
59002: PUSH
59003: LD_STRING 
59005: ST_TO_ADDR
// hc_name :=  ;
59006: LD_ADDR_OWVAR 26
59010: PUSH
59011: LD_STRING 
59013: ST_TO_ADDR
// end ;
59014: LD_VAR 0 1
59018: RET
// export function PrepareHorse ( ) ; begin
59019: LD_INT 0
59021: PPUSH
// uc_side := 0 ;
59022: LD_ADDR_OWVAR 20
59026: PUSH
59027: LD_INT 0
59029: ST_TO_ADDR
// uc_nation := 0 ;
59030: LD_ADDR_OWVAR 21
59034: PUSH
59035: LD_INT 0
59037: ST_TO_ADDR
// InitHc ;
59038: CALL_OW 19
// hc_class := class_horse ;
59042: LD_ADDR_OWVAR 28
59046: PUSH
59047: LD_INT 21
59049: ST_TO_ADDR
// hc_gallery :=  ;
59050: LD_ADDR_OWVAR 33
59054: PUSH
59055: LD_STRING 
59057: ST_TO_ADDR
// hc_name :=  ;
59058: LD_ADDR_OWVAR 26
59062: PUSH
59063: LD_STRING 
59065: ST_TO_ADDR
// end ;
59066: LD_VAR 0 1
59070: RET
// export function PrepareMastodont ( ) ; begin
59071: LD_INT 0
59073: PPUSH
// uc_side := 0 ;
59074: LD_ADDR_OWVAR 20
59078: PUSH
59079: LD_INT 0
59081: ST_TO_ADDR
// uc_nation := 0 ;
59082: LD_ADDR_OWVAR 21
59086: PUSH
59087: LD_INT 0
59089: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59090: LD_ADDR_OWVAR 37
59094: PUSH
59095: LD_INT 31
59097: ST_TO_ADDR
// vc_control := control_rider ;
59098: LD_ADDR_OWVAR 38
59102: PUSH
59103: LD_INT 4
59105: ST_TO_ADDR
// end ;
59106: LD_VAR 0 1
59110: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59111: LD_INT 0
59113: PPUSH
59114: PPUSH
59115: PPUSH
// uc_side = 0 ;
59116: LD_ADDR_OWVAR 20
59120: PUSH
59121: LD_INT 0
59123: ST_TO_ADDR
// uc_nation = 0 ;
59124: LD_ADDR_OWVAR 21
59128: PUSH
59129: LD_INT 0
59131: ST_TO_ADDR
// InitHc_All ( ) ;
59132: CALL_OW 584
// InitVc ;
59136: CALL_OW 20
// if mastodonts then
59140: LD_VAR 0 6
59144: IFFALSE 59211
// for i = 1 to mastodonts do
59146: LD_ADDR_VAR 0 11
59150: PUSH
59151: DOUBLE
59152: LD_INT 1
59154: DEC
59155: ST_TO_ADDR
59156: LD_VAR 0 6
59160: PUSH
59161: FOR_TO
59162: IFFALSE 59209
// begin vc_chassis := 31 ;
59164: LD_ADDR_OWVAR 37
59168: PUSH
59169: LD_INT 31
59171: ST_TO_ADDR
// vc_control := control_rider ;
59172: LD_ADDR_OWVAR 38
59176: PUSH
59177: LD_INT 4
59179: ST_TO_ADDR
// animal := CreateVehicle ;
59180: LD_ADDR_VAR 0 12
59184: PUSH
59185: CALL_OW 45
59189: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59190: LD_VAR 0 12
59194: PPUSH
59195: LD_VAR 0 8
59199: PPUSH
59200: LD_INT 0
59202: PPUSH
59203: CALL 61353 0 3
// end ;
59207: GO 59161
59209: POP
59210: POP
// if horses then
59211: LD_VAR 0 5
59215: IFFALSE 59282
// for i = 1 to horses do
59217: LD_ADDR_VAR 0 11
59221: PUSH
59222: DOUBLE
59223: LD_INT 1
59225: DEC
59226: ST_TO_ADDR
59227: LD_VAR 0 5
59231: PUSH
59232: FOR_TO
59233: IFFALSE 59280
// begin hc_class := 21 ;
59235: LD_ADDR_OWVAR 28
59239: PUSH
59240: LD_INT 21
59242: ST_TO_ADDR
// hc_gallery :=  ;
59243: LD_ADDR_OWVAR 33
59247: PUSH
59248: LD_STRING 
59250: ST_TO_ADDR
// animal := CreateHuman ;
59251: LD_ADDR_VAR 0 12
59255: PUSH
59256: CALL_OW 44
59260: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59261: LD_VAR 0 12
59265: PPUSH
59266: LD_VAR 0 8
59270: PPUSH
59271: LD_INT 0
59273: PPUSH
59274: CALL 61353 0 3
// end ;
59278: GO 59232
59280: POP
59281: POP
// if birds then
59282: LD_VAR 0 1
59286: IFFALSE 59353
// for i = 1 to birds do
59288: LD_ADDR_VAR 0 11
59292: PUSH
59293: DOUBLE
59294: LD_INT 1
59296: DEC
59297: ST_TO_ADDR
59298: LD_VAR 0 1
59302: PUSH
59303: FOR_TO
59304: IFFALSE 59351
// begin hc_class := 18 ;
59306: LD_ADDR_OWVAR 28
59310: PUSH
59311: LD_INT 18
59313: ST_TO_ADDR
// hc_gallery =  ;
59314: LD_ADDR_OWVAR 33
59318: PUSH
59319: LD_STRING 
59321: ST_TO_ADDR
// animal := CreateHuman ;
59322: LD_ADDR_VAR 0 12
59326: PUSH
59327: CALL_OW 44
59331: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59332: LD_VAR 0 12
59336: PPUSH
59337: LD_VAR 0 8
59341: PPUSH
59342: LD_INT 0
59344: PPUSH
59345: CALL 61353 0 3
// end ;
59349: GO 59303
59351: POP
59352: POP
// if tigers then
59353: LD_VAR 0 2
59357: IFFALSE 59441
// for i = 1 to tigers do
59359: LD_ADDR_VAR 0 11
59363: PUSH
59364: DOUBLE
59365: LD_INT 1
59367: DEC
59368: ST_TO_ADDR
59369: LD_VAR 0 2
59373: PUSH
59374: FOR_TO
59375: IFFALSE 59439
// begin hc_class = class_tiger ;
59377: LD_ADDR_OWVAR 28
59381: PUSH
59382: LD_INT 14
59384: ST_TO_ADDR
// hc_gallery =  ;
59385: LD_ADDR_OWVAR 33
59389: PUSH
59390: LD_STRING 
59392: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59393: LD_ADDR_OWVAR 35
59397: PUSH
59398: LD_INT 7
59400: NEG
59401: PPUSH
59402: LD_INT 7
59404: PPUSH
59405: CALL_OW 12
59409: ST_TO_ADDR
// animal := CreateHuman ;
59410: LD_ADDR_VAR 0 12
59414: PUSH
59415: CALL_OW 44
59419: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59420: LD_VAR 0 12
59424: PPUSH
59425: LD_VAR 0 8
59429: PPUSH
59430: LD_INT 0
59432: PPUSH
59433: CALL 61353 0 3
// end ;
59437: GO 59374
59439: POP
59440: POP
// if apemans then
59441: LD_VAR 0 3
59445: IFFALSE 59568
// for i = 1 to apemans do
59447: LD_ADDR_VAR 0 11
59451: PUSH
59452: DOUBLE
59453: LD_INT 1
59455: DEC
59456: ST_TO_ADDR
59457: LD_VAR 0 3
59461: PUSH
59462: FOR_TO
59463: IFFALSE 59566
// begin hc_class = class_apeman ;
59465: LD_ADDR_OWVAR 28
59469: PUSH
59470: LD_INT 12
59472: ST_TO_ADDR
// hc_gallery =  ;
59473: LD_ADDR_OWVAR 33
59477: PUSH
59478: LD_STRING 
59480: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59481: LD_ADDR_OWVAR 35
59485: PUSH
59486: LD_INT 2
59488: NEG
59489: PPUSH
59490: LD_INT 2
59492: PPUSH
59493: CALL_OW 12
59497: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59498: LD_ADDR_OWVAR 31
59502: PUSH
59503: LD_INT 1
59505: PPUSH
59506: LD_INT 3
59508: PPUSH
59509: CALL_OW 12
59513: PUSH
59514: LD_INT 1
59516: PPUSH
59517: LD_INT 3
59519: PPUSH
59520: CALL_OW 12
59524: PUSH
59525: LD_INT 0
59527: PUSH
59528: LD_INT 0
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: ST_TO_ADDR
// animal := CreateHuman ;
59537: LD_ADDR_VAR 0 12
59541: PUSH
59542: CALL_OW 44
59546: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59547: LD_VAR 0 12
59551: PPUSH
59552: LD_VAR 0 8
59556: PPUSH
59557: LD_INT 0
59559: PPUSH
59560: CALL 61353 0 3
// end ;
59564: GO 59462
59566: POP
59567: POP
// if enchidnas then
59568: LD_VAR 0 4
59572: IFFALSE 59639
// for i = 1 to enchidnas do
59574: LD_ADDR_VAR 0 11
59578: PUSH
59579: DOUBLE
59580: LD_INT 1
59582: DEC
59583: ST_TO_ADDR
59584: LD_VAR 0 4
59588: PUSH
59589: FOR_TO
59590: IFFALSE 59637
// begin hc_class = 13 ;
59592: LD_ADDR_OWVAR 28
59596: PUSH
59597: LD_INT 13
59599: ST_TO_ADDR
// hc_gallery =  ;
59600: LD_ADDR_OWVAR 33
59604: PUSH
59605: LD_STRING 
59607: ST_TO_ADDR
// animal := CreateHuman ;
59608: LD_ADDR_VAR 0 12
59612: PUSH
59613: CALL_OW 44
59617: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59618: LD_VAR 0 12
59622: PPUSH
59623: LD_VAR 0 8
59627: PPUSH
59628: LD_INT 0
59630: PPUSH
59631: CALL 61353 0 3
// end ;
59635: GO 59589
59637: POP
59638: POP
// if fishes then
59639: LD_VAR 0 7
59643: IFFALSE 59710
// for i = 1 to fishes do
59645: LD_ADDR_VAR 0 11
59649: PUSH
59650: DOUBLE
59651: LD_INT 1
59653: DEC
59654: ST_TO_ADDR
59655: LD_VAR 0 7
59659: PUSH
59660: FOR_TO
59661: IFFALSE 59708
// begin hc_class = 20 ;
59663: LD_ADDR_OWVAR 28
59667: PUSH
59668: LD_INT 20
59670: ST_TO_ADDR
// hc_gallery =  ;
59671: LD_ADDR_OWVAR 33
59675: PUSH
59676: LD_STRING 
59678: ST_TO_ADDR
// animal := CreateHuman ;
59679: LD_ADDR_VAR 0 12
59683: PUSH
59684: CALL_OW 44
59688: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59689: LD_VAR 0 12
59693: PPUSH
59694: LD_VAR 0 9
59698: PPUSH
59699: LD_INT 0
59701: PPUSH
59702: CALL 61353 0 3
// end ;
59706: GO 59660
59708: POP
59709: POP
// end ;
59710: LD_VAR 0 10
59714: RET
// export function WantHeal ( sci , unit ) ; begin
59715: LD_INT 0
59717: PPUSH
// if GetTaskList ( sci ) > 0 then
59718: LD_VAR 0 1
59722: PPUSH
59723: CALL_OW 437
59727: PUSH
59728: LD_INT 0
59730: GREATER
59731: IFFALSE 59803
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59733: LD_VAR 0 1
59737: PPUSH
59738: CALL_OW 437
59742: PUSH
59743: LD_INT 1
59745: ARRAY
59746: PUSH
59747: LD_INT 1
59749: ARRAY
59750: PUSH
59751: LD_STRING l
59753: EQUAL
59754: IFFALSE 59781
59756: PUSH
59757: LD_VAR 0 1
59761: PPUSH
59762: CALL_OW 437
59766: PUSH
59767: LD_INT 1
59769: ARRAY
59770: PUSH
59771: LD_INT 4
59773: ARRAY
59774: PUSH
59775: LD_VAR 0 2
59779: EQUAL
59780: AND
59781: IFFALSE 59793
// result := true else
59783: LD_ADDR_VAR 0 3
59787: PUSH
59788: LD_INT 1
59790: ST_TO_ADDR
59791: GO 59801
// result := false ;
59793: LD_ADDR_VAR 0 3
59797: PUSH
59798: LD_INT 0
59800: ST_TO_ADDR
// end else
59801: GO 59811
// result := false ;
59803: LD_ADDR_VAR 0 3
59807: PUSH
59808: LD_INT 0
59810: ST_TO_ADDR
// end ;
59811: LD_VAR 0 3
59815: RET
// export function HealTarget ( sci ) ; begin
59816: LD_INT 0
59818: PPUSH
// if not sci then
59819: LD_VAR 0 1
59823: NOT
59824: IFFALSE 59828
// exit ;
59826: GO 59893
// result := 0 ;
59828: LD_ADDR_VAR 0 2
59832: PUSH
59833: LD_INT 0
59835: ST_TO_ADDR
// if GetTaskList ( sci ) then
59836: LD_VAR 0 1
59840: PPUSH
59841: CALL_OW 437
59845: IFFALSE 59893
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59847: LD_VAR 0 1
59851: PPUSH
59852: CALL_OW 437
59856: PUSH
59857: LD_INT 1
59859: ARRAY
59860: PUSH
59861: LD_INT 1
59863: ARRAY
59864: PUSH
59865: LD_STRING l
59867: EQUAL
59868: IFFALSE 59893
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59870: LD_ADDR_VAR 0 2
59874: PUSH
59875: LD_VAR 0 1
59879: PPUSH
59880: CALL_OW 437
59884: PUSH
59885: LD_INT 1
59887: ARRAY
59888: PUSH
59889: LD_INT 4
59891: ARRAY
59892: ST_TO_ADDR
// end ;
59893: LD_VAR 0 2
59897: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59898: LD_INT 0
59900: PPUSH
59901: PPUSH
59902: PPUSH
59903: PPUSH
// if not base_units then
59904: LD_VAR 0 1
59908: NOT
59909: IFFALSE 59913
// exit ;
59911: GO 60000
// result := false ;
59913: LD_ADDR_VAR 0 2
59917: PUSH
59918: LD_INT 0
59920: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59921: LD_ADDR_VAR 0 5
59925: PUSH
59926: LD_VAR 0 1
59930: PPUSH
59931: LD_INT 21
59933: PUSH
59934: LD_INT 3
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PPUSH
59941: CALL_OW 72
59945: ST_TO_ADDR
// if not tmp then
59946: LD_VAR 0 5
59950: NOT
59951: IFFALSE 59955
// exit ;
59953: GO 60000
// for i in tmp do
59955: LD_ADDR_VAR 0 3
59959: PUSH
59960: LD_VAR 0 5
59964: PUSH
59965: FOR_IN
59966: IFFALSE 59998
// begin result := EnemyInRange ( i , 22 ) ;
59968: LD_ADDR_VAR 0 2
59972: PUSH
59973: LD_VAR 0 3
59977: PPUSH
59978: LD_INT 22
59980: PPUSH
59981: CALL 57425 0 2
59985: ST_TO_ADDR
// if result then
59986: LD_VAR 0 2
59990: IFFALSE 59996
// exit ;
59992: POP
59993: POP
59994: GO 60000
// end ;
59996: GO 59965
59998: POP
59999: POP
// end ;
60000: LD_VAR 0 2
60004: RET
// export function FilterByTag ( units , tag ) ; begin
60005: LD_INT 0
60007: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60008: LD_ADDR_VAR 0 3
60012: PUSH
60013: LD_VAR 0 1
60017: PPUSH
60018: LD_INT 120
60020: PUSH
60021: LD_VAR 0 2
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PPUSH
60030: CALL_OW 72
60034: ST_TO_ADDR
// end ;
60035: LD_VAR 0 3
60039: RET
// export function IsDriver ( un ) ; begin
60040: LD_INT 0
60042: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60043: LD_ADDR_VAR 0 2
60047: PUSH
60048: LD_VAR 0 1
60052: PUSH
60053: LD_INT 55
60055: PUSH
60056: EMPTY
60057: LIST
60058: PPUSH
60059: CALL_OW 69
60063: IN
60064: ST_TO_ADDR
// end ;
60065: LD_VAR 0 2
60069: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60070: LD_INT 0
60072: PPUSH
60073: PPUSH
// list := [ ] ;
60074: LD_ADDR_VAR 0 5
60078: PUSH
60079: EMPTY
60080: ST_TO_ADDR
// case d of 0 :
60081: LD_VAR 0 3
60085: PUSH
60086: LD_INT 0
60088: DOUBLE
60089: EQUAL
60090: IFTRUE 60094
60092: GO 60227
60094: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60095: LD_ADDR_VAR 0 5
60099: PUSH
60100: LD_VAR 0 1
60104: PUSH
60105: LD_INT 4
60107: MINUS
60108: PUSH
60109: LD_VAR 0 2
60113: PUSH
60114: LD_INT 4
60116: MINUS
60117: PUSH
60118: LD_INT 2
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: LIST
60125: PUSH
60126: LD_VAR 0 1
60130: PUSH
60131: LD_INT 3
60133: MINUS
60134: PUSH
60135: LD_VAR 0 2
60139: PUSH
60140: LD_INT 1
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: LIST
60147: PUSH
60148: LD_VAR 0 1
60152: PUSH
60153: LD_INT 4
60155: PLUS
60156: PUSH
60157: LD_VAR 0 2
60161: PUSH
60162: LD_INT 4
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: LIST
60169: PUSH
60170: LD_VAR 0 1
60174: PUSH
60175: LD_INT 3
60177: PLUS
60178: PUSH
60179: LD_VAR 0 2
60183: PUSH
60184: LD_INT 3
60186: PLUS
60187: PUSH
60188: LD_INT 5
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: LIST
60195: PUSH
60196: LD_VAR 0 1
60200: PUSH
60201: LD_VAR 0 2
60205: PUSH
60206: LD_INT 4
60208: PLUS
60209: PUSH
60210: LD_INT 0
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: LIST
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: ST_TO_ADDR
// end ; 1 :
60225: GO 60925
60227: LD_INT 1
60229: DOUBLE
60230: EQUAL
60231: IFTRUE 60235
60233: GO 60368
60235: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60236: LD_ADDR_VAR 0 5
60240: PUSH
60241: LD_VAR 0 1
60245: PUSH
60246: LD_VAR 0 2
60250: PUSH
60251: LD_INT 4
60253: MINUS
60254: PUSH
60255: LD_INT 3
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: LIST
60262: PUSH
60263: LD_VAR 0 1
60267: PUSH
60268: LD_INT 3
60270: MINUS
60271: PUSH
60272: LD_VAR 0 2
60276: PUSH
60277: LD_INT 3
60279: MINUS
60280: PUSH
60281: LD_INT 2
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: LIST
60288: PUSH
60289: LD_VAR 0 1
60293: PUSH
60294: LD_INT 4
60296: MINUS
60297: PUSH
60298: LD_VAR 0 2
60302: PUSH
60303: LD_INT 1
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: LIST
60310: PUSH
60311: LD_VAR 0 1
60315: PUSH
60316: LD_VAR 0 2
60320: PUSH
60321: LD_INT 3
60323: PLUS
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: LIST
60332: PUSH
60333: LD_VAR 0 1
60337: PUSH
60338: LD_INT 4
60340: PLUS
60341: PUSH
60342: LD_VAR 0 2
60346: PUSH
60347: LD_INT 4
60349: PLUS
60350: PUSH
60351: LD_INT 5
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: LIST
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: ST_TO_ADDR
// end ; 2 :
60366: GO 60925
60368: LD_INT 2
60370: DOUBLE
60371: EQUAL
60372: IFTRUE 60376
60374: GO 60505
60376: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60377: LD_ADDR_VAR 0 5
60381: PUSH
60382: LD_VAR 0 1
60386: PUSH
60387: LD_VAR 0 2
60391: PUSH
60392: LD_INT 3
60394: MINUS
60395: PUSH
60396: LD_INT 3
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: LIST
60403: PUSH
60404: LD_VAR 0 1
60408: PUSH
60409: LD_INT 4
60411: PLUS
60412: PUSH
60413: LD_VAR 0 2
60417: PUSH
60418: LD_INT 4
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: LIST
60425: PUSH
60426: LD_VAR 0 1
60430: PUSH
60431: LD_VAR 0 2
60435: PUSH
60436: LD_INT 4
60438: PLUS
60439: PUSH
60440: LD_INT 0
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: LIST
60447: PUSH
60448: LD_VAR 0 1
60452: PUSH
60453: LD_INT 3
60455: MINUS
60456: PUSH
60457: LD_VAR 0 2
60461: PUSH
60462: LD_INT 1
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: LIST
60469: PUSH
60470: LD_VAR 0 1
60474: PUSH
60475: LD_INT 4
60477: MINUS
60478: PUSH
60479: LD_VAR 0 2
60483: PUSH
60484: LD_INT 4
60486: MINUS
60487: PUSH
60488: LD_INT 2
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: LIST
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: ST_TO_ADDR
// end ; 3 :
60503: GO 60925
60505: LD_INT 3
60507: DOUBLE
60508: EQUAL
60509: IFTRUE 60513
60511: GO 60646
60513: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60514: LD_ADDR_VAR 0 5
60518: PUSH
60519: LD_VAR 0 1
60523: PUSH
60524: LD_INT 3
60526: PLUS
60527: PUSH
60528: LD_VAR 0 2
60532: PUSH
60533: LD_INT 4
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: LIST
60540: PUSH
60541: LD_VAR 0 1
60545: PUSH
60546: LD_INT 4
60548: PLUS
60549: PUSH
60550: LD_VAR 0 2
60554: PUSH
60555: LD_INT 4
60557: PLUS
60558: PUSH
60559: LD_INT 5
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: LIST
60566: PUSH
60567: LD_VAR 0 1
60571: PUSH
60572: LD_INT 4
60574: MINUS
60575: PUSH
60576: LD_VAR 0 2
60580: PUSH
60581: LD_INT 1
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: LIST
60588: PUSH
60589: LD_VAR 0 1
60593: PUSH
60594: LD_VAR 0 2
60598: PUSH
60599: LD_INT 4
60601: MINUS
60602: PUSH
60603: LD_INT 3
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: LIST
60610: PUSH
60611: LD_VAR 0 1
60615: PUSH
60616: LD_INT 3
60618: MINUS
60619: PUSH
60620: LD_VAR 0 2
60624: PUSH
60625: LD_INT 3
60627: MINUS
60628: PUSH
60629: LD_INT 2
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: LIST
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: ST_TO_ADDR
// end ; 4 :
60644: GO 60925
60646: LD_INT 4
60648: DOUBLE
60649: EQUAL
60650: IFTRUE 60654
60652: GO 60787
60654: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60655: LD_ADDR_VAR 0 5
60659: PUSH
60660: LD_VAR 0 1
60664: PUSH
60665: LD_VAR 0 2
60669: PUSH
60670: LD_INT 4
60672: PLUS
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: LIST
60681: PUSH
60682: LD_VAR 0 1
60686: PUSH
60687: LD_INT 3
60689: PLUS
60690: PUSH
60691: LD_VAR 0 2
60695: PUSH
60696: LD_INT 3
60698: PLUS
60699: PUSH
60700: LD_INT 5
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: LIST
60707: PUSH
60708: LD_VAR 0 1
60712: PUSH
60713: LD_INT 4
60715: PLUS
60716: PUSH
60717: LD_VAR 0 2
60721: PUSH
60722: LD_INT 4
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: LIST
60729: PUSH
60730: LD_VAR 0 1
60734: PUSH
60735: LD_VAR 0 2
60739: PUSH
60740: LD_INT 3
60742: MINUS
60743: PUSH
60744: LD_INT 3
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: LIST
60751: PUSH
60752: LD_VAR 0 1
60756: PUSH
60757: LD_INT 4
60759: MINUS
60760: PUSH
60761: LD_VAR 0 2
60765: PUSH
60766: LD_INT 4
60768: MINUS
60769: PUSH
60770: LD_INT 2
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: LIST
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: ST_TO_ADDR
// end ; 5 :
60785: GO 60925
60787: LD_INT 5
60789: DOUBLE
60790: EQUAL
60791: IFTRUE 60795
60793: GO 60924
60795: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60796: LD_ADDR_VAR 0 5
60800: PUSH
60801: LD_VAR 0 1
60805: PUSH
60806: LD_INT 4
60808: MINUS
60809: PUSH
60810: LD_VAR 0 2
60814: PUSH
60815: LD_INT 1
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: LIST
60822: PUSH
60823: LD_VAR 0 1
60827: PUSH
60828: LD_VAR 0 2
60832: PUSH
60833: LD_INT 4
60835: MINUS
60836: PUSH
60837: LD_INT 3
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: LIST
60844: PUSH
60845: LD_VAR 0 1
60849: PUSH
60850: LD_INT 4
60852: PLUS
60853: PUSH
60854: LD_VAR 0 2
60858: PUSH
60859: LD_INT 4
60861: PLUS
60862: PUSH
60863: LD_INT 5
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: LIST
60870: PUSH
60871: LD_VAR 0 1
60875: PUSH
60876: LD_INT 3
60878: PLUS
60879: PUSH
60880: LD_VAR 0 2
60884: PUSH
60885: LD_INT 4
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: LIST
60892: PUSH
60893: LD_VAR 0 1
60897: PUSH
60898: LD_VAR 0 2
60902: PUSH
60903: LD_INT 3
60905: PLUS
60906: PUSH
60907: LD_INT 0
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: LIST
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: ST_TO_ADDR
// end ; end ;
60922: GO 60925
60924: POP
// result := list ;
60925: LD_ADDR_VAR 0 4
60929: PUSH
60930: LD_VAR 0 5
60934: ST_TO_ADDR
// end ;
60935: LD_VAR 0 4
60939: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60940: LD_INT 0
60942: PPUSH
60943: PPUSH
60944: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60945: LD_VAR 0 1
60949: NOT
60950: IFTRUE 60978
60952: PUSH
60953: LD_VAR 0 2
60957: PUSH
60958: LD_INT 1
60960: PUSH
60961: LD_INT 2
60963: PUSH
60964: LD_INT 3
60966: PUSH
60967: LD_INT 4
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: IN
60976: NOT
60977: OR
60978: IFFALSE 60982
// exit ;
60980: GO 61065
// tmp := [ ] ;
60982: LD_ADDR_VAR 0 5
60986: PUSH
60987: EMPTY
60988: ST_TO_ADDR
// for i in units do
60989: LD_ADDR_VAR 0 4
60993: PUSH
60994: LD_VAR 0 1
60998: PUSH
60999: FOR_IN
61000: IFFALSE 61034
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
61002: LD_ADDR_VAR 0 5
61006: PUSH
61007: LD_VAR 0 5
61011: PPUSH
61012: LD_VAR 0 4
61016: PPUSH
61017: LD_VAR 0 2
61021: PPUSH
61022: CALL_OW 259
61026: PPUSH
61027: CALL 62460 0 2
61031: ST_TO_ADDR
61032: GO 60999
61034: POP
61035: POP
// if not tmp then
61036: LD_VAR 0 5
61040: NOT
61041: IFFALSE 61045
// exit ;
61043: GO 61065
// result := SortListByListDesc ( units , tmp ) ;
61045: LD_ADDR_VAR 0 3
61049: PUSH
61050: LD_VAR 0 1
61054: PPUSH
61055: LD_VAR 0 5
61059: PPUSH
61060: CALL_OW 77
61064: ST_TO_ADDR
// end ;
61065: LD_VAR 0 3
61069: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61070: LD_INT 0
61072: PPUSH
61073: PPUSH
61074: PPUSH
// result := false ;
61075: LD_ADDR_VAR 0 3
61079: PUSH
61080: LD_INT 0
61082: ST_TO_ADDR
// if not building then
61083: LD_VAR 0 2
61087: NOT
61088: IFFALSE 61092
// exit ;
61090: GO 61236
// x := GetX ( building ) ;
61092: LD_ADDR_VAR 0 4
61096: PUSH
61097: LD_VAR 0 2
61101: PPUSH
61102: CALL_OW 250
61106: ST_TO_ADDR
// y := GetY ( building ) ;
61107: LD_ADDR_VAR 0 5
61111: PUSH
61112: LD_VAR 0 2
61116: PPUSH
61117: CALL_OW 251
61121: ST_TO_ADDR
// if not x or not y then
61122: LD_VAR 0 4
61126: NOT
61127: IFTRUE 61136
61129: PUSH
61130: LD_VAR 0 5
61134: NOT
61135: OR
61136: IFFALSE 61140
// exit ;
61138: GO 61236
// if GetTaskList ( unit ) then
61140: LD_VAR 0 1
61144: PPUSH
61145: CALL_OW 437
61149: IFFALSE 61236
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61151: LD_STRING e
61153: PUSH
61154: LD_VAR 0 1
61158: PPUSH
61159: CALL_OW 437
61163: PUSH
61164: LD_INT 1
61166: ARRAY
61167: PUSH
61168: LD_INT 1
61170: ARRAY
61171: EQUAL
61172: IFFALSE 61199
61174: PUSH
61175: LD_VAR 0 4
61179: PUSH
61180: LD_VAR 0 1
61184: PPUSH
61185: CALL_OW 437
61189: PUSH
61190: LD_INT 1
61192: ARRAY
61193: PUSH
61194: LD_INT 2
61196: ARRAY
61197: EQUAL
61198: AND
61199: IFFALSE 61226
61201: PUSH
61202: LD_VAR 0 5
61206: PUSH
61207: LD_VAR 0 1
61211: PPUSH
61212: CALL_OW 437
61216: PUSH
61217: LD_INT 1
61219: ARRAY
61220: PUSH
61221: LD_INT 3
61223: ARRAY
61224: EQUAL
61225: AND
61226: IFFALSE 61236
// result := true end ;
61228: LD_ADDR_VAR 0 3
61232: PUSH
61233: LD_INT 1
61235: ST_TO_ADDR
// end ;
61236: LD_VAR 0 3
61240: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61241: LD_INT 0
61243: PPUSH
// result := false ;
61244: LD_ADDR_VAR 0 4
61248: PUSH
61249: LD_INT 0
61251: ST_TO_ADDR
// if GetTaskList ( unit ) then
61252: LD_VAR 0 1
61256: PPUSH
61257: CALL_OW 437
61261: IFFALSE 61348
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61263: LD_STRING M
61265: PUSH
61266: LD_VAR 0 1
61270: PPUSH
61271: CALL_OW 437
61275: PUSH
61276: LD_INT 1
61278: ARRAY
61279: PUSH
61280: LD_INT 1
61282: ARRAY
61283: EQUAL
61284: IFFALSE 61311
61286: PUSH
61287: LD_VAR 0 2
61291: PUSH
61292: LD_VAR 0 1
61296: PPUSH
61297: CALL_OW 437
61301: PUSH
61302: LD_INT 1
61304: ARRAY
61305: PUSH
61306: LD_INT 2
61308: ARRAY
61309: EQUAL
61310: AND
61311: IFFALSE 61338
61313: PUSH
61314: LD_VAR 0 3
61318: PUSH
61319: LD_VAR 0 1
61323: PPUSH
61324: CALL_OW 437
61328: PUSH
61329: LD_INT 1
61331: ARRAY
61332: PUSH
61333: LD_INT 3
61335: ARRAY
61336: EQUAL
61337: AND
61338: IFFALSE 61348
// result := true ;
61340: LD_ADDR_VAR 0 4
61344: PUSH
61345: LD_INT 1
61347: ST_TO_ADDR
// end ; end ;
61348: LD_VAR 0 4
61352: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61353: LD_INT 0
61355: PPUSH
61356: PPUSH
61357: PPUSH
61358: PPUSH
// if not unit or not area then
61359: LD_VAR 0 1
61363: NOT
61364: IFTRUE 61373
61366: PUSH
61367: LD_VAR 0 2
61371: NOT
61372: OR
61373: IFFALSE 61377
// exit ;
61375: GO 61553
// tmp := AreaToList ( area , i ) ;
61377: LD_ADDR_VAR 0 6
61381: PUSH
61382: LD_VAR 0 2
61386: PPUSH
61387: LD_VAR 0 5
61391: PPUSH
61392: CALL_OW 517
61396: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61397: LD_ADDR_VAR 0 5
61401: PUSH
61402: DOUBLE
61403: LD_INT 1
61405: DEC
61406: ST_TO_ADDR
61407: LD_VAR 0 6
61411: PUSH
61412: LD_INT 1
61414: ARRAY
61415: PUSH
61416: FOR_TO
61417: IFFALSE 61551
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61419: LD_ADDR_VAR 0 7
61423: PUSH
61424: LD_VAR 0 6
61428: PUSH
61429: LD_INT 1
61431: ARRAY
61432: PUSH
61433: LD_VAR 0 5
61437: ARRAY
61438: PUSH
61439: LD_VAR 0 6
61443: PUSH
61444: LD_INT 2
61446: ARRAY
61447: PUSH
61448: LD_VAR 0 5
61452: ARRAY
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
61458: LD_INT 92
61460: PUSH
61461: LD_VAR 0 7
61465: PUSH
61466: LD_INT 1
61468: ARRAY
61469: PUSH
61470: LD_VAR 0 7
61474: PUSH
61475: LD_INT 2
61477: ARRAY
61478: PUSH
61479: LD_INT 2
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: PPUSH
61488: CALL_OW 69
61492: PUSH
61493: LD_INT 0
61495: EQUAL
61496: IFFALSE 61549
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61498: LD_VAR 0 1
61502: PPUSH
61503: LD_VAR 0 7
61507: PUSH
61508: LD_INT 1
61510: ARRAY
61511: PPUSH
61512: LD_VAR 0 7
61516: PUSH
61517: LD_INT 2
61519: ARRAY
61520: PPUSH
61521: LD_VAR 0 3
61525: PPUSH
61526: CALL_OW 48
// result := IsPlaced ( unit ) ;
61530: LD_ADDR_VAR 0 4
61534: PUSH
61535: LD_VAR 0 1
61539: PPUSH
61540: CALL_OW 305
61544: ST_TO_ADDR
// exit ;
61545: POP
61546: POP
61547: GO 61553
// end ; end ;
61549: GO 61416
61551: POP
61552: POP
// end ;
61553: LD_VAR 0 4
61557: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61558: LD_INT 0
61560: PPUSH
61561: PPUSH
61562: PPUSH
// if not side or side > 8 then
61563: LD_VAR 0 1
61567: NOT
61568: IFTRUE 61580
61570: PUSH
61571: LD_VAR 0 1
61575: PUSH
61576: LD_INT 8
61578: GREATER
61579: OR
61580: IFFALSE 61584
// exit ;
61582: GO 61771
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61584: LD_ADDR_VAR 0 4
61588: PUSH
61589: LD_INT 22
61591: PUSH
61592: LD_VAR 0 1
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 21
61603: PUSH
61604: LD_INT 3
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PPUSH
61615: CALL_OW 69
61619: ST_TO_ADDR
// if not tmp then
61620: LD_VAR 0 4
61624: NOT
61625: IFFALSE 61629
// exit ;
61627: GO 61771
// enable_addtolog := true ;
61629: LD_ADDR_OWVAR 81
61633: PUSH
61634: LD_INT 1
61636: ST_TO_ADDR
// AddToLog ( [ ) ;
61637: LD_STRING [
61639: PPUSH
61640: CALL_OW 561
// for i in tmp do
61644: LD_ADDR_VAR 0 3
61648: PUSH
61649: LD_VAR 0 4
61653: PUSH
61654: FOR_IN
61655: IFFALSE 61762
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61657: LD_STRING [
61659: PUSH
61660: LD_VAR 0 3
61664: PPUSH
61665: CALL_OW 266
61669: STR
61670: PUSH
61671: LD_STRING , 
61673: STR
61674: PUSH
61675: LD_VAR 0 3
61679: PPUSH
61680: CALL_OW 250
61684: STR
61685: PUSH
61686: LD_STRING , 
61688: STR
61689: PUSH
61690: LD_VAR 0 3
61694: PPUSH
61695: CALL_OW 251
61699: STR
61700: PUSH
61701: LD_STRING , 
61703: STR
61704: PUSH
61705: LD_VAR 0 3
61709: PPUSH
61710: CALL_OW 254
61714: STR
61715: PUSH
61716: LD_STRING , 
61718: STR
61719: PUSH
61720: LD_VAR 0 3
61724: PPUSH
61725: LD_INT 1
61727: PPUSH
61728: CALL_OW 268
61732: STR
61733: PUSH
61734: LD_STRING , 
61736: STR
61737: PUSH
61738: LD_VAR 0 3
61742: PPUSH
61743: LD_INT 2
61745: PPUSH
61746: CALL_OW 268
61750: STR
61751: PUSH
61752: LD_STRING ],
61754: STR
61755: PPUSH
61756: CALL_OW 561
// end ;
61760: GO 61654
61762: POP
61763: POP
// AddToLog ( ]; ) ;
61764: LD_STRING ];
61766: PPUSH
61767: CALL_OW 561
// end ;
61771: LD_VAR 0 2
61775: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61776: LD_INT 0
61778: PPUSH
61779: PPUSH
61780: PPUSH
61781: PPUSH
61782: PPUSH
// if not area or not rate or not max then
61783: LD_VAR 0 1
61787: NOT
61788: IFTRUE 61797
61790: PUSH
61791: LD_VAR 0 2
61795: NOT
61796: OR
61797: IFTRUE 61806
61799: PUSH
61800: LD_VAR 0 4
61804: NOT
61805: OR
61806: IFFALSE 61810
// exit ;
61808: GO 61999
// while 1 do
61810: LD_INT 1
61812: IFFALSE 61999
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61814: LD_ADDR_VAR 0 9
61818: PUSH
61819: LD_VAR 0 1
61823: PPUSH
61824: LD_INT 1
61826: PPUSH
61827: CALL_OW 287
61831: PUSH
61832: LD_INT 10
61834: MUL
61835: ST_TO_ADDR
// r := rate / 10 ;
61836: LD_ADDR_VAR 0 7
61840: PUSH
61841: LD_VAR 0 2
61845: PUSH
61846: LD_INT 10
61848: DIVREAL
61849: ST_TO_ADDR
// time := 1 1$00 ;
61850: LD_ADDR_VAR 0 8
61854: PUSH
61855: LD_INT 2100
61857: ST_TO_ADDR
// if amount < min then
61858: LD_VAR 0 9
61862: PUSH
61863: LD_VAR 0 3
61867: LESS
61868: IFFALSE 61886
// r := r * 2 else
61870: LD_ADDR_VAR 0 7
61874: PUSH
61875: LD_VAR 0 7
61879: PUSH
61880: LD_INT 2
61882: MUL
61883: ST_TO_ADDR
61884: GO 61912
// if amount > max then
61886: LD_VAR 0 9
61890: PUSH
61891: LD_VAR 0 4
61895: GREATER
61896: IFFALSE 61912
// r := r / 2 ;
61898: LD_ADDR_VAR 0 7
61902: PUSH
61903: LD_VAR 0 7
61907: PUSH
61908: LD_INT 2
61910: DIVREAL
61911: ST_TO_ADDR
// time := time / r ;
61912: LD_ADDR_VAR 0 8
61916: PUSH
61917: LD_VAR 0 8
61921: PUSH
61922: LD_VAR 0 7
61926: DIVREAL
61927: ST_TO_ADDR
// if time < 0 then
61928: LD_VAR 0 8
61932: PUSH
61933: LD_INT 0
61935: LESS
61936: IFFALSE 61953
// time := time * - 1 ;
61938: LD_ADDR_VAR 0 8
61942: PUSH
61943: LD_VAR 0 8
61947: PUSH
61948: LD_INT 1
61950: NEG
61951: MUL
61952: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61953: LD_VAR 0 8
61957: PUSH
61958: LD_INT 35
61960: PPUSH
61961: LD_INT 875
61963: PPUSH
61964: CALL_OW 12
61968: PLUS
61969: PPUSH
61970: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61974: LD_INT 1
61976: PPUSH
61977: LD_INT 5
61979: PPUSH
61980: CALL_OW 12
61984: PPUSH
61985: LD_VAR 0 1
61989: PPUSH
61990: LD_INT 1
61992: PPUSH
61993: CALL_OW 55
// end ;
61997: GO 61810
// end ;
61999: LD_VAR 0 5
62003: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62004: LD_INT 0
62006: PPUSH
62007: PPUSH
62008: PPUSH
62009: PPUSH
62010: PPUSH
62011: PPUSH
62012: PPUSH
62013: PPUSH
// if not turrets or not factories then
62014: LD_VAR 0 1
62018: NOT
62019: IFTRUE 62028
62021: PUSH
62022: LD_VAR 0 2
62026: NOT
62027: OR
62028: IFFALSE 62032
// exit ;
62030: GO 62339
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62032: LD_ADDR_VAR 0 10
62036: PUSH
62037: LD_INT 5
62039: PUSH
62040: LD_INT 6
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 2
62049: PUSH
62050: LD_INT 4
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 3
62059: PUSH
62060: LD_INT 5
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 24
62074: PUSH
62075: LD_INT 25
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 23
62084: PUSH
62085: LD_INT 27
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 42
62098: PUSH
62099: LD_INT 43
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 44
62108: PUSH
62109: LD_INT 46
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 45
62118: PUSH
62119: LD_INT 47
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: LIST
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: LIST
62135: ST_TO_ADDR
// result := [ ] ;
62136: LD_ADDR_VAR 0 3
62140: PUSH
62141: EMPTY
62142: ST_TO_ADDR
// for i in turrets do
62143: LD_ADDR_VAR 0 4
62147: PUSH
62148: LD_VAR 0 1
62152: PUSH
62153: FOR_IN
62154: IFFALSE 62337
// begin nat := GetNation ( i ) ;
62156: LD_ADDR_VAR 0 7
62160: PUSH
62161: LD_VAR 0 4
62165: PPUSH
62166: CALL_OW 248
62170: ST_TO_ADDR
// weapon := 0 ;
62171: LD_ADDR_VAR 0 8
62175: PUSH
62176: LD_INT 0
62178: ST_TO_ADDR
// if not nat then
62179: LD_VAR 0 7
62183: NOT
62184: IFFALSE 62188
// continue ;
62186: GO 62153
// for j in list [ nat ] do
62188: LD_ADDR_VAR 0 5
62192: PUSH
62193: LD_VAR 0 10
62197: PUSH
62198: LD_VAR 0 7
62202: ARRAY
62203: PUSH
62204: FOR_IN
62205: IFFALSE 62246
// if GetBWeapon ( i ) = j [ 1 ] then
62207: LD_VAR 0 4
62211: PPUSH
62212: CALL_OW 269
62216: PUSH
62217: LD_VAR 0 5
62221: PUSH
62222: LD_INT 1
62224: ARRAY
62225: EQUAL
62226: IFFALSE 62244
// begin weapon := j [ 2 ] ;
62228: LD_ADDR_VAR 0 8
62232: PUSH
62233: LD_VAR 0 5
62237: PUSH
62238: LD_INT 2
62240: ARRAY
62241: ST_TO_ADDR
// break ;
62242: GO 62246
// end ;
62244: GO 62204
62246: POP
62247: POP
// if not weapon then
62248: LD_VAR 0 8
62252: NOT
62253: IFFALSE 62257
// continue ;
62255: GO 62153
// for k in factories do
62257: LD_ADDR_VAR 0 6
62261: PUSH
62262: LD_VAR 0 2
62266: PUSH
62267: FOR_IN
62268: IFFALSE 62333
// begin weapons := AvailableWeaponList ( k ) ;
62270: LD_ADDR_VAR 0 9
62274: PUSH
62275: LD_VAR 0 6
62279: PPUSH
62280: CALL_OW 478
62284: ST_TO_ADDR
// if not weapons then
62285: LD_VAR 0 9
62289: NOT
62290: IFFALSE 62294
// continue ;
62292: GO 62267
// if weapon in weapons then
62294: LD_VAR 0 8
62298: PUSH
62299: LD_VAR 0 9
62303: IN
62304: IFFALSE 62331
// begin result := [ i , weapon ] ;
62306: LD_ADDR_VAR 0 3
62310: PUSH
62311: LD_VAR 0 4
62315: PUSH
62316: LD_VAR 0 8
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: ST_TO_ADDR
// exit ;
62325: POP
62326: POP
62327: POP
62328: POP
62329: GO 62339
// end ; end ;
62331: GO 62267
62333: POP
62334: POP
// end ;
62335: GO 62153
62337: POP
62338: POP
// end ;
62339: LD_VAR 0 3
62343: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62344: LD_INT 0
62346: PPUSH
// if not side or side > 8 then
62347: LD_VAR 0 3
62351: NOT
62352: IFTRUE 62364
62354: PUSH
62355: LD_VAR 0 3
62359: PUSH
62360: LD_INT 8
62362: GREATER
62363: OR
62364: IFFALSE 62368
// exit ;
62366: GO 62427
// if not range then
62368: LD_VAR 0 4
62372: NOT
62373: IFFALSE 62384
// range := - 12 ;
62375: LD_ADDR_VAR 0 4
62379: PUSH
62380: LD_INT 12
62382: NEG
62383: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62384: LD_VAR 0 1
62388: PPUSH
62389: LD_VAR 0 2
62393: PPUSH
62394: LD_VAR 0 3
62398: PPUSH
62399: LD_VAR 0 4
62403: PPUSH
62404: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62408: LD_VAR 0 1
62412: PPUSH
62413: LD_VAR 0 2
62417: PPUSH
62418: LD_VAR 0 3
62422: PPUSH
62423: CALL_OW 331
// end ;
62427: LD_VAR 0 5
62431: RET
// export function Video ( mode ) ; begin
62432: LD_INT 0
62434: PPUSH
// ingame_video = mode ;
62435: LD_ADDR_OWVAR 52
62439: PUSH
62440: LD_VAR 0 1
62444: ST_TO_ADDR
// interface_hidden = mode ;
62445: LD_ADDR_OWVAR 54
62449: PUSH
62450: LD_VAR 0 1
62454: ST_TO_ADDR
// end ;
62455: LD_VAR 0 2
62459: RET
// export function Join ( array , element ) ; begin
62460: LD_INT 0
62462: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62463: LD_ADDR_VAR 0 3
62467: PUSH
62468: LD_VAR 0 1
62472: PPUSH
62473: LD_VAR 0 1
62477: PUSH
62478: LD_INT 1
62480: PLUS
62481: PPUSH
62482: LD_VAR 0 2
62486: PPUSH
62487: CALL_OW 1
62491: ST_TO_ADDR
// end ;
62492: LD_VAR 0 3
62496: RET
// export function JoinUnion ( array , element ) ; begin
62497: LD_INT 0
62499: PPUSH
// result := array union element ;
62500: LD_ADDR_VAR 0 3
62504: PUSH
62505: LD_VAR 0 1
62509: PUSH
62510: LD_VAR 0 2
62514: UNION
62515: ST_TO_ADDR
// end ;
62516: LD_VAR 0 3
62520: RET
// export function GetBehemoths ( side ) ; begin
62521: LD_INT 0
62523: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62524: LD_ADDR_VAR 0 2
62528: PUSH
62529: LD_INT 22
62531: PUSH
62532: LD_VAR 0 1
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 31
62543: PUSH
62544: LD_INT 25
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PPUSH
62555: CALL_OW 69
62559: ST_TO_ADDR
// end ;
62560: LD_VAR 0 2
62564: RET
// export function Shuffle ( array ) ; var i , index ; begin
62565: LD_INT 0
62567: PPUSH
62568: PPUSH
62569: PPUSH
// result := [ ] ;
62570: LD_ADDR_VAR 0 2
62574: PUSH
62575: EMPTY
62576: ST_TO_ADDR
// if not array then
62577: LD_VAR 0 1
62581: NOT
62582: IFFALSE 62586
// exit ;
62584: GO 62685
// Randomize ;
62586: CALL_OW 10
// for i = array downto 1 do
62590: LD_ADDR_VAR 0 3
62594: PUSH
62595: DOUBLE
62596: LD_VAR 0 1
62600: INC
62601: ST_TO_ADDR
62602: LD_INT 1
62604: PUSH
62605: FOR_DOWNTO
62606: IFFALSE 62683
// begin index := rand ( 1 , array ) ;
62608: LD_ADDR_VAR 0 4
62612: PUSH
62613: LD_INT 1
62615: PPUSH
62616: LD_VAR 0 1
62620: PPUSH
62621: CALL_OW 12
62625: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62626: LD_ADDR_VAR 0 2
62630: PUSH
62631: LD_VAR 0 2
62635: PPUSH
62636: LD_VAR 0 2
62640: PUSH
62641: LD_INT 1
62643: PLUS
62644: PPUSH
62645: LD_VAR 0 1
62649: PUSH
62650: LD_VAR 0 4
62654: ARRAY
62655: PPUSH
62656: CALL_OW 2
62660: ST_TO_ADDR
// array := Delete ( array , index ) ;
62661: LD_ADDR_VAR 0 1
62665: PUSH
62666: LD_VAR 0 1
62670: PPUSH
62671: LD_VAR 0 4
62675: PPUSH
62676: CALL_OW 3
62680: ST_TO_ADDR
// end ;
62681: GO 62605
62683: POP
62684: POP
// end ;
62685: LD_VAR 0 2
62689: RET
// export function GetBaseMaterials ( base ) ; begin
62690: LD_INT 0
62692: PPUSH
// result := [ 0 , 0 , 0 ] ;
62693: LD_ADDR_VAR 0 2
62697: PUSH
62698: LD_INT 0
62700: PUSH
62701: LD_INT 0
62703: PUSH
62704: LD_INT 0
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: LIST
62711: ST_TO_ADDR
// if not base then
62712: LD_VAR 0 1
62716: NOT
62717: IFFALSE 62721
// exit ;
62719: GO 62770
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62721: LD_ADDR_VAR 0 2
62725: PUSH
62726: LD_VAR 0 1
62730: PPUSH
62731: LD_INT 1
62733: PPUSH
62734: CALL_OW 275
62738: PUSH
62739: LD_VAR 0 1
62743: PPUSH
62744: LD_INT 2
62746: PPUSH
62747: CALL_OW 275
62751: PUSH
62752: LD_VAR 0 1
62756: PPUSH
62757: LD_INT 3
62759: PPUSH
62760: CALL_OW 275
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: LIST
62769: ST_TO_ADDR
// end ;
62770: LD_VAR 0 2
62774: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62775: LD_INT 0
62777: PPUSH
62778: PPUSH
// result := array ;
62779: LD_ADDR_VAR 0 3
62783: PUSH
62784: LD_VAR 0 1
62788: ST_TO_ADDR
// if size >= result then
62789: LD_VAR 0 2
62793: PUSH
62794: LD_VAR 0 3
62798: GREATEREQUAL
62799: IFFALSE 62803
// exit ;
62801: GO 62853
// if size then
62803: LD_VAR 0 2
62807: IFFALSE 62853
// for i := array downto size do
62809: LD_ADDR_VAR 0 4
62813: PUSH
62814: DOUBLE
62815: LD_VAR 0 1
62819: INC
62820: ST_TO_ADDR
62821: LD_VAR 0 2
62825: PUSH
62826: FOR_DOWNTO
62827: IFFALSE 62851
// result := Delete ( result , result ) ;
62829: LD_ADDR_VAR 0 3
62833: PUSH
62834: LD_VAR 0 3
62838: PPUSH
62839: LD_VAR 0 3
62843: PPUSH
62844: CALL_OW 3
62848: ST_TO_ADDR
62849: GO 62826
62851: POP
62852: POP
// end ;
62853: LD_VAR 0 3
62857: RET
// export function ComExit ( unit ) ; var tmp ; begin
62858: LD_INT 0
62860: PPUSH
62861: PPUSH
// if not IsInUnit ( unit ) then
62862: LD_VAR 0 1
62866: PPUSH
62867: CALL_OW 310
62871: NOT
62872: IFFALSE 62876
// exit ;
62874: GO 62936
// tmp := IsInUnit ( unit ) ;
62876: LD_ADDR_VAR 0 3
62880: PUSH
62881: LD_VAR 0 1
62885: PPUSH
62886: CALL_OW 310
62890: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62891: LD_VAR 0 3
62895: PPUSH
62896: CALL_OW 247
62900: PUSH
62901: LD_INT 2
62903: EQUAL
62904: IFFALSE 62917
// ComExitVehicle ( unit ) else
62906: LD_VAR 0 1
62910: PPUSH
62911: CALL_OW 121
62915: GO 62926
// ComExitBuilding ( unit ) ;
62917: LD_VAR 0 1
62921: PPUSH
62922: CALL_OW 122
// result := tmp ;
62926: LD_ADDR_VAR 0 2
62930: PUSH
62931: LD_VAR 0 3
62935: ST_TO_ADDR
// end ;
62936: LD_VAR 0 2
62940: RET
// export function ComExitAll ( units ) ; var i ; begin
62941: LD_INT 0
62943: PPUSH
62944: PPUSH
// if not units then
62945: LD_VAR 0 1
62949: NOT
62950: IFFALSE 62954
// exit ;
62952: GO 62980
// for i in units do
62954: LD_ADDR_VAR 0 3
62958: PUSH
62959: LD_VAR 0 1
62963: PUSH
62964: FOR_IN
62965: IFFALSE 62978
// ComExit ( i ) ;
62967: LD_VAR 0 3
62971: PPUSH
62972: CALL 62858 0 1
62976: GO 62964
62978: POP
62979: POP
// end ;
62980: LD_VAR 0 2
62984: RET
// export function ResetHc ; begin
62985: LD_INT 0
62987: PPUSH
// InitHc ;
62988: CALL_OW 19
// hc_importance := 0 ;
62992: LD_ADDR_OWVAR 32
62996: PUSH
62997: LD_INT 0
62999: ST_TO_ADDR
// end ;
63000: LD_VAR 0 1
63004: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63005: LD_INT 0
63007: PPUSH
63008: PPUSH
63009: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63010: LD_ADDR_VAR 0 6
63014: PUSH
63015: LD_VAR 0 1
63019: PUSH
63020: LD_VAR 0 3
63024: PLUS
63025: PUSH
63026: LD_INT 2
63028: DIV
63029: ST_TO_ADDR
// if _x < 0 then
63030: LD_VAR 0 6
63034: PUSH
63035: LD_INT 0
63037: LESS
63038: IFFALSE 63055
// _x := _x * - 1 ;
63040: LD_ADDR_VAR 0 6
63044: PUSH
63045: LD_VAR 0 6
63049: PUSH
63050: LD_INT 1
63052: NEG
63053: MUL
63054: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63055: LD_ADDR_VAR 0 7
63059: PUSH
63060: LD_VAR 0 2
63064: PUSH
63065: LD_VAR 0 4
63069: PLUS
63070: PUSH
63071: LD_INT 2
63073: DIV
63074: ST_TO_ADDR
// if _y < 0 then
63075: LD_VAR 0 7
63079: PUSH
63080: LD_INT 0
63082: LESS
63083: IFFALSE 63100
// _y := _y * - 1 ;
63085: LD_ADDR_VAR 0 7
63089: PUSH
63090: LD_VAR 0 7
63094: PUSH
63095: LD_INT 1
63097: NEG
63098: MUL
63099: ST_TO_ADDR
// result := [ _x , _y ] ;
63100: LD_ADDR_VAR 0 5
63104: PUSH
63105: LD_VAR 0 6
63109: PUSH
63110: LD_VAR 0 7
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: ST_TO_ADDR
// end ;
63119: LD_VAR 0 5
63123: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63124: LD_INT 0
63126: PPUSH
63127: PPUSH
63128: PPUSH
63129: PPUSH
// task := GetTaskList ( unit ) ;
63130: LD_ADDR_VAR 0 7
63134: PUSH
63135: LD_VAR 0 1
63139: PPUSH
63140: CALL_OW 437
63144: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63145: LD_VAR 0 7
63149: NOT
63150: IFFALSE 63169
63152: PUSH
63153: LD_VAR 0 1
63157: PPUSH
63158: LD_VAR 0 2
63162: PPUSH
63163: CALL_OW 308
63167: NOT
63168: AND
63169: IFFALSE 63173
// exit ;
63171: GO 63291
// if IsInArea ( unit , area ) then
63173: LD_VAR 0 1
63177: PPUSH
63178: LD_VAR 0 2
63182: PPUSH
63183: CALL_OW 308
63187: IFFALSE 63205
// begin ComMoveToArea ( unit , goAway ) ;
63189: LD_VAR 0 1
63193: PPUSH
63194: LD_VAR 0 3
63198: PPUSH
63199: CALL_OW 113
// exit ;
63203: GO 63291
// end ; if task [ 1 ] [ 1 ] <> M then
63205: LD_VAR 0 7
63209: PUSH
63210: LD_INT 1
63212: ARRAY
63213: PUSH
63214: LD_INT 1
63216: ARRAY
63217: PUSH
63218: LD_STRING M
63220: NONEQUAL
63221: IFFALSE 63225
// exit ;
63223: GO 63291
// x := task [ 1 ] [ 2 ] ;
63225: LD_ADDR_VAR 0 5
63229: PUSH
63230: LD_VAR 0 7
63234: PUSH
63235: LD_INT 1
63237: ARRAY
63238: PUSH
63239: LD_INT 2
63241: ARRAY
63242: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63243: LD_ADDR_VAR 0 6
63247: PUSH
63248: LD_VAR 0 7
63252: PUSH
63253: LD_INT 1
63255: ARRAY
63256: PUSH
63257: LD_INT 3
63259: ARRAY
63260: ST_TO_ADDR
// if InArea ( x , y , area ) then
63261: LD_VAR 0 5
63265: PPUSH
63266: LD_VAR 0 6
63270: PPUSH
63271: LD_VAR 0 2
63275: PPUSH
63276: CALL_OW 309
63280: IFFALSE 63291
// ComStop ( unit ) ;
63282: LD_VAR 0 1
63286: PPUSH
63287: CALL_OW 141
// end ;
63291: LD_VAR 0 4
63295: RET
// export function Abs ( value ) ; begin
63296: LD_INT 0
63298: PPUSH
// result := value ;
63299: LD_ADDR_VAR 0 2
63303: PUSH
63304: LD_VAR 0 1
63308: ST_TO_ADDR
// if value < 0 then
63309: LD_VAR 0 1
63313: PUSH
63314: LD_INT 0
63316: LESS
63317: IFFALSE 63334
// result := value * - 1 ;
63319: LD_ADDR_VAR 0 2
63323: PUSH
63324: LD_VAR 0 1
63328: PUSH
63329: LD_INT 1
63331: NEG
63332: MUL
63333: ST_TO_ADDR
// end ;
63334: LD_VAR 0 2
63338: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63339: LD_INT 0
63341: PPUSH
63342: PPUSH
63343: PPUSH
63344: PPUSH
63345: PPUSH
63346: PPUSH
63347: PPUSH
63348: PPUSH
// if not unit or not building then
63349: LD_VAR 0 1
63353: NOT
63354: IFTRUE 63363
63356: PUSH
63357: LD_VAR 0 2
63361: NOT
63362: OR
63363: IFFALSE 63367
// exit ;
63365: GO 63595
// x := GetX ( building ) ;
63367: LD_ADDR_VAR 0 4
63371: PUSH
63372: LD_VAR 0 2
63376: PPUSH
63377: CALL_OW 250
63381: ST_TO_ADDR
// y := GetY ( building ) ;
63382: LD_ADDR_VAR 0 6
63386: PUSH
63387: LD_VAR 0 2
63391: PPUSH
63392: CALL_OW 251
63396: ST_TO_ADDR
// d := GetDir ( building ) ;
63397: LD_ADDR_VAR 0 8
63401: PUSH
63402: LD_VAR 0 2
63406: PPUSH
63407: CALL_OW 254
63411: ST_TO_ADDR
// r := 4 ;
63412: LD_ADDR_VAR 0 9
63416: PUSH
63417: LD_INT 4
63419: ST_TO_ADDR
// for i := 1 to 5 do
63420: LD_ADDR_VAR 0 10
63424: PUSH
63425: DOUBLE
63426: LD_INT 1
63428: DEC
63429: ST_TO_ADDR
63430: LD_INT 5
63432: PUSH
63433: FOR_TO
63434: IFFALSE 63593
// begin _x := ShiftX ( x , d , r + i ) ;
63436: LD_ADDR_VAR 0 5
63440: PUSH
63441: LD_VAR 0 4
63445: PPUSH
63446: LD_VAR 0 8
63450: PPUSH
63451: LD_VAR 0 9
63455: PUSH
63456: LD_VAR 0 10
63460: PLUS
63461: PPUSH
63462: CALL_OW 272
63466: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63467: LD_ADDR_VAR 0 7
63471: PUSH
63472: LD_VAR 0 6
63476: PPUSH
63477: LD_VAR 0 8
63481: PPUSH
63482: LD_VAR 0 9
63486: PUSH
63487: LD_VAR 0 10
63491: PLUS
63492: PPUSH
63493: CALL_OW 273
63497: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63498: LD_VAR 0 5
63502: PPUSH
63503: LD_VAR 0 7
63507: PPUSH
63508: CALL_OW 488
63512: IFFALSE 63547
63514: PUSH
63515: LD_VAR 0 5
63519: PPUSH
63520: LD_VAR 0 7
63524: PPUSH
63525: CALL_OW 428
63529: PPUSH
63530: CALL_OW 247
63534: PUSH
63535: LD_INT 3
63537: PUSH
63538: LD_INT 2
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: IN
63545: NOT
63546: AND
63547: IFFALSE 63591
// begin ComMoveXY ( unit , _x , _y ) ;
63549: LD_VAR 0 1
63553: PPUSH
63554: LD_VAR 0 5
63558: PPUSH
63559: LD_VAR 0 7
63563: PPUSH
63564: CALL_OW 111
// result := [ _x , _y ] ;
63568: LD_ADDR_VAR 0 3
63572: PUSH
63573: LD_VAR 0 5
63577: PUSH
63578: LD_VAR 0 7
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: ST_TO_ADDR
// exit ;
63587: POP
63588: POP
63589: GO 63595
// end ; end ;
63591: GO 63433
63593: POP
63594: POP
// end ;
63595: LD_VAR 0 3
63599: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63600: LD_INT 0
63602: PPUSH
63603: PPUSH
63604: PPUSH
// result := 0 ;
63605: LD_ADDR_VAR 0 3
63609: PUSH
63610: LD_INT 0
63612: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63613: LD_VAR 0 1
63617: PUSH
63618: LD_INT 0
63620: LESS
63621: IFTRUE 63633
63623: PUSH
63624: LD_VAR 0 1
63628: PUSH
63629: LD_INT 8
63631: GREATER
63632: OR
63633: IFTRUE 63645
63635: PUSH
63636: LD_VAR 0 2
63640: PUSH
63641: LD_INT 0
63643: LESS
63644: OR
63645: IFTRUE 63657
63647: PUSH
63648: LD_VAR 0 2
63652: PUSH
63653: LD_INT 8
63655: GREATER
63656: OR
63657: IFFALSE 63661
// exit ;
63659: GO 63736
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63661: LD_ADDR_VAR 0 4
63665: PUSH
63666: LD_INT 22
63668: PUSH
63669: LD_VAR 0 2
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PPUSH
63678: CALL_OW 69
63682: PUSH
63683: FOR_IN
63684: IFFALSE 63734
// begin un := UnitShoot ( i ) ;
63686: LD_ADDR_VAR 0 5
63690: PUSH
63691: LD_VAR 0 4
63695: PPUSH
63696: CALL_OW 504
63700: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63701: LD_VAR 0 5
63705: PPUSH
63706: CALL_OW 255
63710: PUSH
63711: LD_VAR 0 1
63715: EQUAL
63716: IFFALSE 63732
// begin result := un ;
63718: LD_ADDR_VAR 0 3
63722: PUSH
63723: LD_VAR 0 5
63727: ST_TO_ADDR
// exit ;
63728: POP
63729: POP
63730: GO 63736
// end ; end ;
63732: GO 63683
63734: POP
63735: POP
// end ;
63736: LD_VAR 0 3
63740: RET
// export function GetCargoBay ( units ) ; begin
63741: LD_INT 0
63743: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63744: LD_ADDR_VAR 0 2
63748: PUSH
63749: LD_VAR 0 1
63753: PPUSH
63754: LD_INT 2
63756: PUSH
63757: LD_INT 34
63759: PUSH
63760: LD_INT 12
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 34
63769: PUSH
63770: LD_INT 51
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 34
63779: PUSH
63780: LD_INT 32
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 34
63789: PUSH
63790: LD_INT 89
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: LIST
63801: LIST
63802: LIST
63803: PPUSH
63804: CALL_OW 72
63808: ST_TO_ADDR
// end ;
63809: LD_VAR 0 2
63813: RET
// export function Negate ( value ) ; begin
63814: LD_INT 0
63816: PPUSH
// result := not value ;
63817: LD_ADDR_VAR 0 2
63821: PUSH
63822: LD_VAR 0 1
63826: NOT
63827: ST_TO_ADDR
// end ;
63828: LD_VAR 0 2
63832: RET
// export function Inc ( value ) ; begin
63833: LD_INT 0
63835: PPUSH
// result := value + 1 ;
63836: LD_ADDR_VAR 0 2
63840: PUSH
63841: LD_VAR 0 1
63845: PUSH
63846: LD_INT 1
63848: PLUS
63849: ST_TO_ADDR
// end ;
63850: LD_VAR 0 2
63854: RET
// export function Dec ( value ) ; begin
63855: LD_INT 0
63857: PPUSH
// result := value - 1 ;
63858: LD_ADDR_VAR 0 2
63862: PUSH
63863: LD_VAR 0 1
63867: PUSH
63868: LD_INT 1
63870: MINUS
63871: ST_TO_ADDR
// end ;
63872: LD_VAR 0 2
63876: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63877: LD_INT 0
63879: PPUSH
63880: PPUSH
63881: PPUSH
63882: PPUSH
63883: PPUSH
63884: PPUSH
63885: PPUSH
63886: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63887: LD_VAR 0 1
63891: PPUSH
63892: LD_VAR 0 2
63896: PPUSH
63897: CALL_OW 488
63901: NOT
63902: IFTRUE 63921
63904: PUSH
63905: LD_VAR 0 3
63909: PPUSH
63910: LD_VAR 0 4
63914: PPUSH
63915: CALL_OW 488
63919: NOT
63920: OR
63921: IFFALSE 63934
// begin result := - 1 ;
63923: LD_ADDR_VAR 0 5
63927: PUSH
63928: LD_INT 1
63930: NEG
63931: ST_TO_ADDR
// exit ;
63932: GO 64169
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63934: LD_ADDR_VAR 0 12
63938: PUSH
63939: LD_VAR 0 1
63943: PPUSH
63944: LD_VAR 0 2
63948: PPUSH
63949: LD_VAR 0 3
63953: PPUSH
63954: LD_VAR 0 4
63958: PPUSH
63959: CALL 63005 0 4
63963: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63964: LD_ADDR_VAR 0 11
63968: PUSH
63969: LD_VAR 0 1
63973: PPUSH
63974: LD_VAR 0 2
63978: PPUSH
63979: LD_VAR 0 12
63983: PUSH
63984: LD_INT 1
63986: ARRAY
63987: PPUSH
63988: LD_VAR 0 12
63992: PUSH
63993: LD_INT 2
63995: ARRAY
63996: PPUSH
63997: CALL_OW 298
64001: ST_TO_ADDR
// distance := 9999 ;
64002: LD_ADDR_VAR 0 10
64006: PUSH
64007: LD_INT 9999
64009: ST_TO_ADDR
// for i := 0 to 5 do
64010: LD_ADDR_VAR 0 6
64014: PUSH
64015: DOUBLE
64016: LD_INT 0
64018: DEC
64019: ST_TO_ADDR
64020: LD_INT 5
64022: PUSH
64023: FOR_TO
64024: IFFALSE 64167
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64026: LD_ADDR_VAR 0 7
64030: PUSH
64031: LD_VAR 0 1
64035: PPUSH
64036: LD_VAR 0 6
64040: PPUSH
64041: LD_VAR 0 11
64045: PPUSH
64046: CALL_OW 272
64050: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64051: LD_ADDR_VAR 0 8
64055: PUSH
64056: LD_VAR 0 2
64060: PPUSH
64061: LD_VAR 0 6
64065: PPUSH
64066: LD_VAR 0 11
64070: PPUSH
64071: CALL_OW 273
64075: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64076: LD_VAR 0 7
64080: PPUSH
64081: LD_VAR 0 8
64085: PPUSH
64086: CALL_OW 488
64090: NOT
64091: IFFALSE 64095
// continue ;
64093: GO 64023
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64095: LD_ADDR_VAR 0 9
64099: PUSH
64100: LD_VAR 0 12
64104: PUSH
64105: LD_INT 1
64107: ARRAY
64108: PPUSH
64109: LD_VAR 0 12
64113: PUSH
64114: LD_INT 2
64116: ARRAY
64117: PPUSH
64118: LD_VAR 0 7
64122: PPUSH
64123: LD_VAR 0 8
64127: PPUSH
64128: CALL_OW 298
64132: ST_TO_ADDR
// if tmp < distance then
64133: LD_VAR 0 9
64137: PUSH
64138: LD_VAR 0 10
64142: LESS
64143: IFFALSE 64165
// begin result := i ;
64145: LD_ADDR_VAR 0 5
64149: PUSH
64150: LD_VAR 0 6
64154: ST_TO_ADDR
// distance := tmp ;
64155: LD_ADDR_VAR 0 10
64159: PUSH
64160: LD_VAR 0 9
64164: ST_TO_ADDR
// end ; end ;
64165: GO 64023
64167: POP
64168: POP
// end ;
64169: LD_VAR 0 5
64173: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64174: LD_INT 0
64176: PPUSH
64177: PPUSH
// if not driver or not IsInUnit ( driver ) then
64178: LD_VAR 0 1
64182: NOT
64183: IFTRUE 64197
64185: PUSH
64186: LD_VAR 0 1
64190: PPUSH
64191: CALL_OW 310
64195: NOT
64196: OR
64197: IFFALSE 64201
// exit ;
64199: GO 64291
// vehicle := IsInUnit ( driver ) ;
64201: LD_ADDR_VAR 0 3
64205: PUSH
64206: LD_VAR 0 1
64210: PPUSH
64211: CALL_OW 310
64215: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64216: LD_VAR 0 1
64220: PPUSH
64221: LD_STRING \
64223: PUSH
64224: LD_INT 0
64226: PUSH
64227: LD_INT 0
64229: PUSH
64230: LD_INT 0
64232: PUSH
64233: LD_INT 0
64235: PUSH
64236: LD_INT 0
64238: PUSH
64239: LD_INT 0
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: PUSH
64251: LD_STRING E
64253: PUSH
64254: LD_INT 0
64256: PUSH
64257: LD_INT 0
64259: PUSH
64260: LD_VAR 0 3
64264: PUSH
64265: LD_INT 0
64267: PUSH
64268: LD_INT 0
64270: PUSH
64271: LD_INT 0
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PPUSH
64287: CALL_OW 446
// end ;
64291: LD_VAR 0 2
64295: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64296: LD_INT 0
64298: PPUSH
64299: PPUSH
// if not driver or not IsInUnit ( driver ) then
64300: LD_VAR 0 1
64304: NOT
64305: IFTRUE 64319
64307: PUSH
64308: LD_VAR 0 1
64312: PPUSH
64313: CALL_OW 310
64317: NOT
64318: OR
64319: IFFALSE 64323
// exit ;
64321: GO 64413
// vehicle := IsInUnit ( driver ) ;
64323: LD_ADDR_VAR 0 3
64327: PUSH
64328: LD_VAR 0 1
64332: PPUSH
64333: CALL_OW 310
64337: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64338: LD_VAR 0 1
64342: PPUSH
64343: LD_STRING \
64345: PUSH
64346: LD_INT 0
64348: PUSH
64349: LD_INT 0
64351: PUSH
64352: LD_INT 0
64354: PUSH
64355: LD_INT 0
64357: PUSH
64358: LD_INT 0
64360: PUSH
64361: LD_INT 0
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: PUSH
64373: LD_STRING E
64375: PUSH
64376: LD_INT 0
64378: PUSH
64379: LD_INT 0
64381: PUSH
64382: LD_VAR 0 3
64386: PUSH
64387: LD_INT 0
64389: PUSH
64390: LD_INT 0
64392: PUSH
64393: LD_INT 0
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PPUSH
64409: CALL_OW 447
// end ;
64413: LD_VAR 0 2
64417: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64418: LD_INT 0
64420: PPUSH
64421: PPUSH
64422: PPUSH
// tmp := [ ] ;
64423: LD_ADDR_VAR 0 5
64427: PUSH
64428: EMPTY
64429: ST_TO_ADDR
// for i in units do
64430: LD_ADDR_VAR 0 4
64434: PUSH
64435: LD_VAR 0 1
64439: PUSH
64440: FOR_IN
64441: IFFALSE 64479
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64443: LD_ADDR_VAR 0 5
64447: PUSH
64448: LD_VAR 0 5
64452: PPUSH
64453: LD_VAR 0 5
64457: PUSH
64458: LD_INT 1
64460: PLUS
64461: PPUSH
64462: LD_VAR 0 4
64466: PPUSH
64467: CALL_OW 256
64471: PPUSH
64472: CALL_OW 2
64476: ST_TO_ADDR
64477: GO 64440
64479: POP
64480: POP
// if not tmp then
64481: LD_VAR 0 5
64485: NOT
64486: IFFALSE 64490
// exit ;
64488: GO 64538
// if asc then
64490: LD_VAR 0 2
64494: IFFALSE 64518
// result := SortListByListAsc ( units , tmp ) else
64496: LD_ADDR_VAR 0 3
64500: PUSH
64501: LD_VAR 0 1
64505: PPUSH
64506: LD_VAR 0 5
64510: PPUSH
64511: CALL_OW 76
64515: ST_TO_ADDR
64516: GO 64538
// result := SortListByListDesc ( units , tmp ) ;
64518: LD_ADDR_VAR 0 3
64522: PUSH
64523: LD_VAR 0 1
64527: PPUSH
64528: LD_VAR 0 5
64532: PPUSH
64533: CALL_OW 77
64537: ST_TO_ADDR
// end ;
64538: LD_VAR 0 3
64542: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64543: LD_INT 0
64545: PPUSH
64546: PPUSH
// task := GetTaskList ( mech ) ;
64547: LD_ADDR_VAR 0 4
64551: PUSH
64552: LD_VAR 0 1
64556: PPUSH
64557: CALL_OW 437
64561: ST_TO_ADDR
// if not task then
64562: LD_VAR 0 4
64566: NOT
64567: IFFALSE 64571
// exit ;
64569: GO 64615
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64571: LD_ADDR_VAR 0 3
64575: PUSH
64576: LD_VAR 0 4
64580: PUSH
64581: LD_INT 1
64583: ARRAY
64584: PUSH
64585: LD_INT 1
64587: ARRAY
64588: PUSH
64589: LD_STRING r
64591: EQUAL
64592: IFFALSE 64614
64594: PUSH
64595: LD_VAR 0 4
64599: PUSH
64600: LD_INT 1
64602: ARRAY
64603: PUSH
64604: LD_INT 4
64606: ARRAY
64607: PUSH
64608: LD_VAR 0 2
64612: EQUAL
64613: AND
64614: ST_TO_ADDR
// end ;
64615: LD_VAR 0 3
64619: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64620: LD_INT 0
64622: PPUSH
// SetDir ( unit , d ) ;
64623: LD_VAR 0 1
64627: PPUSH
64628: LD_VAR 0 4
64632: PPUSH
64633: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
64637: LD_ADDR_VAR 0 6
64641: PUSH
64642: LD_VAR 0 1
64646: PPUSH
64647: LD_VAR 0 2
64651: PPUSH
64652: LD_VAR 0 3
64656: PPUSH
64657: LD_VAR 0 5
64661: PPUSH
64662: CALL_OW 48
64666: ST_TO_ADDR
// end ;
64667: LD_VAR 0 6
64671: RET
// export function ToNaturalNumber ( number ) ; begin
64672: LD_INT 0
64674: PPUSH
// result := number div 1 ;
64675: LD_ADDR_VAR 0 2
64679: PUSH
64680: LD_VAR 0 1
64684: PUSH
64685: LD_INT 1
64687: DIV
64688: ST_TO_ADDR
// if number < 0 then
64689: LD_VAR 0 1
64693: PUSH
64694: LD_INT 0
64696: LESS
64697: IFFALSE 64707
// result := 0 ;
64699: LD_ADDR_VAR 0 2
64703: PUSH
64704: LD_INT 0
64706: ST_TO_ADDR
// end ;
64707: LD_VAR 0 2
64711: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
64712: LD_INT 0
64714: PPUSH
64715: PPUSH
64716: PPUSH
// if not buildings then
64717: LD_VAR 0 1
64721: NOT
64722: IFFALSE 64726
// exit ;
64724: GO 64841
// tmp := [ ] ;
64726: LD_ADDR_VAR 0 5
64730: PUSH
64731: EMPTY
64732: ST_TO_ADDR
// for b in buildings do
64733: LD_ADDR_VAR 0 4
64737: PUSH
64738: LD_VAR 0 1
64742: PUSH
64743: FOR_IN
64744: IFFALSE 64782
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
64746: LD_ADDR_VAR 0 5
64750: PUSH
64751: LD_VAR 0 5
64755: PPUSH
64756: LD_VAR 0 5
64760: PUSH
64761: LD_INT 1
64763: PLUS
64764: PPUSH
64765: LD_VAR 0 4
64769: PPUSH
64770: CALL_OW 266
64774: PPUSH
64775: CALL_OW 1
64779: ST_TO_ADDR
64780: GO 64743
64782: POP
64783: POP
// if not tmp then
64784: LD_VAR 0 5
64788: NOT
64789: IFFALSE 64793
// exit ;
64791: GO 64841
// if asc then
64793: LD_VAR 0 2
64797: IFFALSE 64821
// result := SortListByListAsc ( buildings , tmp ) else
64799: LD_ADDR_VAR 0 3
64803: PUSH
64804: LD_VAR 0 1
64808: PPUSH
64809: LD_VAR 0 5
64813: PPUSH
64814: CALL_OW 76
64818: ST_TO_ADDR
64819: GO 64841
// result := SortListByListDesc ( buildings , tmp ) ;
64821: LD_ADDR_VAR 0 3
64825: PUSH
64826: LD_VAR 0 1
64830: PPUSH
64831: LD_VAR 0 5
64835: PPUSH
64836: CALL_OW 77
64840: ST_TO_ADDR
// end ;
64841: LD_VAR 0 3
64845: RET
// export function SortByClass ( units , class ) ; var un ; begin
64846: LD_INT 0
64848: PPUSH
64849: PPUSH
// if not units or not class then
64850: LD_VAR 0 1
64854: NOT
64855: IFTRUE 64864
64857: PUSH
64858: LD_VAR 0 2
64862: NOT
64863: OR
64864: IFFALSE 64868
// exit ;
64866: GO 64963
// result := [ ] ;
64868: LD_ADDR_VAR 0 3
64872: PUSH
64873: EMPTY
64874: ST_TO_ADDR
// for un in units do
64875: LD_ADDR_VAR 0 4
64879: PUSH
64880: LD_VAR 0 1
64884: PUSH
64885: FOR_IN
64886: IFFALSE 64961
// if GetClass ( un ) = class then
64888: LD_VAR 0 4
64892: PPUSH
64893: CALL_OW 257
64897: PUSH
64898: LD_VAR 0 2
64902: EQUAL
64903: IFFALSE 64930
// result := Insert ( result , 1 , un ) else
64905: LD_ADDR_VAR 0 3
64909: PUSH
64910: LD_VAR 0 3
64914: PPUSH
64915: LD_INT 1
64917: PPUSH
64918: LD_VAR 0 4
64922: PPUSH
64923: CALL_OW 2
64927: ST_TO_ADDR
64928: GO 64959
// result := Replace ( result , result + 1 , un ) ;
64930: LD_ADDR_VAR 0 3
64934: PUSH
64935: LD_VAR 0 3
64939: PPUSH
64940: LD_VAR 0 3
64944: PUSH
64945: LD_INT 1
64947: PLUS
64948: PPUSH
64949: LD_VAR 0 4
64953: PPUSH
64954: CALL_OW 1
64958: ST_TO_ADDR
64959: GO 64885
64961: POP
64962: POP
// end ;
64963: LD_VAR 0 3
64967: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64968: LD_INT 0
64970: PPUSH
64971: PPUSH
64972: PPUSH
64973: PPUSH
64974: PPUSH
64975: PPUSH
64976: PPUSH
// result := [ ] ;
64977: LD_ADDR_VAR 0 4
64981: PUSH
64982: EMPTY
64983: ST_TO_ADDR
// if x - r < 0 then
64984: LD_VAR 0 1
64988: PUSH
64989: LD_VAR 0 3
64993: MINUS
64994: PUSH
64995: LD_INT 0
64997: LESS
64998: IFFALSE 65010
// min_x := 0 else
65000: LD_ADDR_VAR 0 8
65004: PUSH
65005: LD_INT 0
65007: ST_TO_ADDR
65008: GO 65026
// min_x := x - r ;
65010: LD_ADDR_VAR 0 8
65014: PUSH
65015: LD_VAR 0 1
65019: PUSH
65020: LD_VAR 0 3
65024: MINUS
65025: ST_TO_ADDR
// if y - r < 0 then
65026: LD_VAR 0 2
65030: PUSH
65031: LD_VAR 0 3
65035: MINUS
65036: PUSH
65037: LD_INT 0
65039: LESS
65040: IFFALSE 65052
// min_y := 0 else
65042: LD_ADDR_VAR 0 7
65046: PUSH
65047: LD_INT 0
65049: ST_TO_ADDR
65050: GO 65068
// min_y := y - r ;
65052: LD_ADDR_VAR 0 7
65056: PUSH
65057: LD_VAR 0 2
65061: PUSH
65062: LD_VAR 0 3
65066: MINUS
65067: ST_TO_ADDR
// max_x := x + r ;
65068: LD_ADDR_VAR 0 9
65072: PUSH
65073: LD_VAR 0 1
65077: PUSH
65078: LD_VAR 0 3
65082: PLUS
65083: ST_TO_ADDR
// max_y := y + r ;
65084: LD_ADDR_VAR 0 10
65088: PUSH
65089: LD_VAR 0 2
65093: PUSH
65094: LD_VAR 0 3
65098: PLUS
65099: ST_TO_ADDR
// for _x = min_x to max_x do
65100: LD_ADDR_VAR 0 5
65104: PUSH
65105: DOUBLE
65106: LD_VAR 0 8
65110: DEC
65111: ST_TO_ADDR
65112: LD_VAR 0 9
65116: PUSH
65117: FOR_TO
65118: IFFALSE 65219
// for _y = min_y to max_y do
65120: LD_ADDR_VAR 0 6
65124: PUSH
65125: DOUBLE
65126: LD_VAR 0 7
65130: DEC
65131: ST_TO_ADDR
65132: LD_VAR 0 10
65136: PUSH
65137: FOR_TO
65138: IFFALSE 65215
// begin if not ValidHex ( _x , _y ) then
65140: LD_VAR 0 5
65144: PPUSH
65145: LD_VAR 0 6
65149: PPUSH
65150: CALL_OW 488
65154: NOT
65155: IFFALSE 65159
// continue ;
65157: GO 65137
// if GetResourceTypeXY ( _x , _y ) then
65159: LD_VAR 0 5
65163: PPUSH
65164: LD_VAR 0 6
65168: PPUSH
65169: CALL_OW 283
65173: IFFALSE 65213
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65175: LD_ADDR_VAR 0 4
65179: PUSH
65180: LD_VAR 0 4
65184: PPUSH
65185: LD_VAR 0 4
65189: PUSH
65190: LD_INT 1
65192: PLUS
65193: PPUSH
65194: LD_VAR 0 5
65198: PUSH
65199: LD_VAR 0 6
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PPUSH
65208: CALL_OW 1
65212: ST_TO_ADDR
// end ;
65213: GO 65137
65215: POP
65216: POP
65217: GO 65117
65219: POP
65220: POP
// end ;
65221: LD_VAR 0 4
65225: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65226: LD_INT 0
65228: PPUSH
65229: PPUSH
65230: PPUSH
65231: PPUSH
65232: PPUSH
65233: PPUSH
65234: PPUSH
65235: PPUSH
// if not units then
65236: LD_VAR 0 1
65240: NOT
65241: IFFALSE 65245
// exit ;
65243: GO 65777
// result := UnitFilter ( units , [ f_ok ] ) ;
65245: LD_ADDR_VAR 0 3
65249: PUSH
65250: LD_VAR 0 1
65254: PPUSH
65255: LD_INT 50
65257: PUSH
65258: EMPTY
65259: LIST
65260: PPUSH
65261: CALL_OW 72
65265: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65266: LD_ADDR_VAR 0 8
65270: PUSH
65271: LD_VAR 0 1
65275: PUSH
65276: LD_INT 1
65278: ARRAY
65279: PPUSH
65280: CALL_OW 255
65284: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65285: LD_ADDR_VAR 0 10
65289: PUSH
65290: LD_INT 29
65292: PUSH
65293: LD_INT 91
65295: PUSH
65296: LD_INT 49
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: LIST
65303: ST_TO_ADDR
// if not result then
65304: LD_VAR 0 3
65308: NOT
65309: IFFALSE 65313
// exit ;
65311: GO 65777
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65313: LD_ADDR_VAR 0 5
65317: PUSH
65318: LD_INT 81
65320: PUSH
65321: LD_VAR 0 8
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PPUSH
65330: CALL_OW 69
65334: ST_TO_ADDR
// for i in result do
65335: LD_ADDR_VAR 0 4
65339: PUSH
65340: LD_VAR 0 3
65344: PUSH
65345: FOR_IN
65346: IFFALSE 65775
// begin tag := GetTag ( i ) + 1 ;
65348: LD_ADDR_VAR 0 9
65352: PUSH
65353: LD_VAR 0 4
65357: PPUSH
65358: CALL_OW 110
65362: PUSH
65363: LD_INT 1
65365: PLUS
65366: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
65367: LD_ADDR_VAR 0 7
65371: PUSH
65372: LD_VAR 0 4
65376: PPUSH
65377: CALL_OW 250
65381: PPUSH
65382: LD_VAR 0 4
65386: PPUSH
65387: CALL_OW 251
65391: PPUSH
65392: LD_INT 4
65394: PPUSH
65395: CALL 64968 0 3
65399: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
65400: LD_VAR 0 4
65404: PPUSH
65405: CALL_OW 247
65409: PUSH
65410: LD_INT 2
65412: EQUAL
65413: IFFALSE 65425
65415: PUSH
65416: LD_VAR 0 7
65420: PUSH
65421: LD_INT 2
65423: GREATER
65424: AND
65425: IFFALSE 65445
65427: PUSH
65428: LD_VAR 0 4
65432: PPUSH
65433: CALL_OW 264
65437: PUSH
65438: LD_VAR 0 10
65442: IN
65443: NOT
65444: AND
65445: IFFALSE 65484
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65447: LD_VAR 0 4
65451: PPUSH
65452: LD_VAR 0 7
65456: PUSH
65457: LD_INT 1
65459: ARRAY
65460: PUSH
65461: LD_INT 1
65463: ARRAY
65464: PPUSH
65465: LD_VAR 0 7
65469: PUSH
65470: LD_INT 1
65472: ARRAY
65473: PUSH
65474: LD_INT 2
65476: ARRAY
65477: PPUSH
65478: CALL_OW 116
65482: GO 65773
// if path > tag then
65484: LD_VAR 0 2
65488: PUSH
65489: LD_VAR 0 9
65493: GREATER
65494: IFFALSE 65702
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65496: LD_ADDR_VAR 0 6
65500: PUSH
65501: LD_VAR 0 5
65505: PPUSH
65506: LD_INT 91
65508: PUSH
65509: LD_VAR 0 4
65513: PUSH
65514: LD_INT 8
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: LIST
65521: PPUSH
65522: CALL_OW 72
65526: ST_TO_ADDR
// if nearEnemy then
65527: LD_VAR 0 6
65531: IFFALSE 65600
// begin if GetWeapon ( i ) = ru_time_lapser then
65533: LD_VAR 0 4
65537: PPUSH
65538: CALL_OW 264
65542: PUSH
65543: LD_INT 49
65545: EQUAL
65546: IFFALSE 65574
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65548: LD_VAR 0 4
65552: PPUSH
65553: LD_VAR 0 6
65557: PPUSH
65558: LD_VAR 0 4
65562: PPUSH
65563: CALL_OW 74
65567: PPUSH
65568: CALL_OW 112
65572: GO 65598
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65574: LD_VAR 0 4
65578: PPUSH
65579: LD_VAR 0 6
65583: PPUSH
65584: LD_VAR 0 4
65588: PPUSH
65589: CALL_OW 74
65593: PPUSH
65594: CALL 66858 0 2
// end else
65598: GO 65700
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65600: LD_VAR 0 4
65604: PPUSH
65605: LD_VAR 0 2
65609: PUSH
65610: LD_VAR 0 9
65614: ARRAY
65615: PUSH
65616: LD_INT 1
65618: ARRAY
65619: PPUSH
65620: LD_VAR 0 2
65624: PUSH
65625: LD_VAR 0 9
65629: ARRAY
65630: PUSH
65631: LD_INT 2
65633: ARRAY
65634: PPUSH
65635: CALL_OW 297
65639: PUSH
65640: LD_INT 6
65642: GREATER
65643: IFFALSE 65686
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65645: LD_VAR 0 4
65649: PPUSH
65650: LD_VAR 0 2
65654: PUSH
65655: LD_VAR 0 9
65659: ARRAY
65660: PUSH
65661: LD_INT 1
65663: ARRAY
65664: PPUSH
65665: LD_VAR 0 2
65669: PUSH
65670: LD_VAR 0 9
65674: ARRAY
65675: PUSH
65676: LD_INT 2
65678: ARRAY
65679: PPUSH
65680: CALL_OW 114
65684: GO 65700
// SetTag ( i , tag ) ;
65686: LD_VAR 0 4
65690: PPUSH
65691: LD_VAR 0 9
65695: PPUSH
65696: CALL_OW 109
// end else
65700: GO 65773
// if enemy then
65702: LD_VAR 0 5
65706: IFFALSE 65773
// begin if GetWeapon ( i ) = ru_time_lapser then
65708: LD_VAR 0 4
65712: PPUSH
65713: CALL_OW 264
65717: PUSH
65718: LD_INT 49
65720: EQUAL
65721: IFFALSE 65749
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65723: LD_VAR 0 4
65727: PPUSH
65728: LD_VAR 0 5
65732: PPUSH
65733: LD_VAR 0 4
65737: PPUSH
65738: CALL_OW 74
65742: PPUSH
65743: CALL_OW 112
65747: GO 65773
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65749: LD_VAR 0 4
65753: PPUSH
65754: LD_VAR 0 5
65758: PPUSH
65759: LD_VAR 0 4
65763: PPUSH
65764: CALL_OW 74
65768: PPUSH
65769: CALL 66858 0 2
// end ; end ;
65773: GO 65345
65775: POP
65776: POP
// end ;
65777: LD_VAR 0 3
65781: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65782: LD_INT 0
65784: PPUSH
65785: PPUSH
65786: PPUSH
// if not unit or IsInUnit ( unit ) then
65787: LD_VAR 0 1
65791: NOT
65792: IFTRUE 65805
65794: PUSH
65795: LD_VAR 0 1
65799: PPUSH
65800: CALL_OW 310
65804: OR
65805: IFFALSE 65809
// exit ;
65807: GO 65900
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65809: LD_ADDR_VAR 0 4
65813: PUSH
65814: LD_VAR 0 1
65818: PPUSH
65819: CALL_OW 250
65823: PPUSH
65824: LD_VAR 0 2
65828: PPUSH
65829: LD_INT 1
65831: PPUSH
65832: CALL_OW 272
65836: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65837: LD_ADDR_VAR 0 5
65841: PUSH
65842: LD_VAR 0 1
65846: PPUSH
65847: CALL_OW 251
65851: PPUSH
65852: LD_VAR 0 2
65856: PPUSH
65857: LD_INT 1
65859: PPUSH
65860: CALL_OW 273
65864: ST_TO_ADDR
// if ValidHex ( x , y ) then
65865: LD_VAR 0 4
65869: PPUSH
65870: LD_VAR 0 5
65874: PPUSH
65875: CALL_OW 488
65879: IFFALSE 65900
// ComTurnXY ( unit , x , y ) ;
65881: LD_VAR 0 1
65885: PPUSH
65886: LD_VAR 0 4
65890: PPUSH
65891: LD_VAR 0 5
65895: PPUSH
65896: CALL_OW 118
// end ;
65900: LD_VAR 0 3
65904: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65905: LD_INT 0
65907: PPUSH
65908: PPUSH
// result := false ;
65909: LD_ADDR_VAR 0 3
65913: PUSH
65914: LD_INT 0
65916: ST_TO_ADDR
// if not units then
65917: LD_VAR 0 2
65921: NOT
65922: IFFALSE 65926
// exit ;
65924: GO 65971
// for i in units do
65926: LD_ADDR_VAR 0 4
65930: PUSH
65931: LD_VAR 0 2
65935: PUSH
65936: FOR_IN
65937: IFFALSE 65969
// if See ( side , i ) then
65939: LD_VAR 0 1
65943: PPUSH
65944: LD_VAR 0 4
65948: PPUSH
65949: CALL_OW 292
65953: IFFALSE 65967
// begin result := true ;
65955: LD_ADDR_VAR 0 3
65959: PUSH
65960: LD_INT 1
65962: ST_TO_ADDR
// exit ;
65963: POP
65964: POP
65965: GO 65971
// end ;
65967: GO 65936
65969: POP
65970: POP
// end ;
65971: LD_VAR 0 3
65975: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65976: LD_INT 0
65978: PPUSH
65979: PPUSH
65980: PPUSH
65981: PPUSH
// if not unit or not points then
65982: LD_VAR 0 1
65986: NOT
65987: IFTRUE 65996
65989: PUSH
65990: LD_VAR 0 2
65994: NOT
65995: OR
65996: IFFALSE 66000
// exit ;
65998: GO 66090
// dist := 99999 ;
66000: LD_ADDR_VAR 0 5
66004: PUSH
66005: LD_INT 99999
66007: ST_TO_ADDR
// for i in points do
66008: LD_ADDR_VAR 0 4
66012: PUSH
66013: LD_VAR 0 2
66017: PUSH
66018: FOR_IN
66019: IFFALSE 66088
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66021: LD_ADDR_VAR 0 6
66025: PUSH
66026: LD_VAR 0 1
66030: PPUSH
66031: LD_VAR 0 4
66035: PUSH
66036: LD_INT 1
66038: ARRAY
66039: PPUSH
66040: LD_VAR 0 4
66044: PUSH
66045: LD_INT 2
66047: ARRAY
66048: PPUSH
66049: CALL_OW 297
66053: ST_TO_ADDR
// if tmpDist < dist then
66054: LD_VAR 0 6
66058: PUSH
66059: LD_VAR 0 5
66063: LESS
66064: IFFALSE 66086
// begin result := i ;
66066: LD_ADDR_VAR 0 3
66070: PUSH
66071: LD_VAR 0 4
66075: ST_TO_ADDR
// dist := tmpDist ;
66076: LD_ADDR_VAR 0 5
66080: PUSH
66081: LD_VAR 0 6
66085: ST_TO_ADDR
// end ; end ;
66086: GO 66018
66088: POP
66089: POP
// end ;
66090: LD_VAR 0 3
66094: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66095: LD_INT 0
66097: PPUSH
// uc_side := side ;
66098: LD_ADDR_OWVAR 20
66102: PUSH
66103: LD_VAR 0 1
66107: ST_TO_ADDR
// uc_nation := 3 ;
66108: LD_ADDR_OWVAR 21
66112: PUSH
66113: LD_INT 3
66115: ST_TO_ADDR
// vc_chassis := 25 ;
66116: LD_ADDR_OWVAR 37
66120: PUSH
66121: LD_INT 25
66123: ST_TO_ADDR
// vc_engine := engine_siberite ;
66124: LD_ADDR_OWVAR 39
66128: PUSH
66129: LD_INT 3
66131: ST_TO_ADDR
// vc_control := control_computer ;
66132: LD_ADDR_OWVAR 38
66136: PUSH
66137: LD_INT 3
66139: ST_TO_ADDR
// vc_weapon := 59 ;
66140: LD_ADDR_OWVAR 40
66144: PUSH
66145: LD_INT 59
66147: ST_TO_ADDR
// result := CreateVehicle ;
66148: LD_ADDR_VAR 0 5
66152: PUSH
66153: CALL_OW 45
66157: ST_TO_ADDR
// SetDir ( result , d ) ;
66158: LD_VAR 0 5
66162: PPUSH
66163: LD_VAR 0 4
66167: PPUSH
66168: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66172: LD_VAR 0 5
66176: PPUSH
66177: LD_VAR 0 2
66181: PPUSH
66182: LD_VAR 0 3
66186: PPUSH
66187: LD_INT 0
66189: PPUSH
66190: CALL_OW 48
// end ;
66194: LD_VAR 0 5
66198: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66199: LD_INT 0
66201: PPUSH
66202: PPUSH
66203: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66204: LD_ADDR_VAR 0 2
66208: PUSH
66209: LD_INT 0
66211: PUSH
66212: LD_INT 0
66214: PUSH
66215: LD_INT 0
66217: PUSH
66218: LD_INT 0
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66227: LD_VAR 0 1
66231: NOT
66232: IFTRUE 66265
66234: PUSH
66235: LD_VAR 0 1
66239: PPUSH
66240: CALL_OW 264
66244: PUSH
66245: LD_INT 12
66247: PUSH
66248: LD_INT 51
66250: PUSH
66251: LD_INT 32
66253: PUSH
66254: LD_INT 89
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: IN
66263: NOT
66264: OR
66265: IFFALSE 66269
// exit ;
66267: GO 66367
// for i := 1 to 3 do
66269: LD_ADDR_VAR 0 3
66273: PUSH
66274: DOUBLE
66275: LD_INT 1
66277: DEC
66278: ST_TO_ADDR
66279: LD_INT 3
66281: PUSH
66282: FOR_TO
66283: IFFALSE 66365
// begin tmp := GetCargo ( cargo , i ) ;
66285: LD_ADDR_VAR 0 4
66289: PUSH
66290: LD_VAR 0 1
66294: PPUSH
66295: LD_VAR 0 3
66299: PPUSH
66300: CALL_OW 289
66304: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66305: LD_ADDR_VAR 0 2
66309: PUSH
66310: LD_VAR 0 2
66314: PPUSH
66315: LD_VAR 0 3
66319: PPUSH
66320: LD_VAR 0 4
66324: PPUSH
66325: CALL_OW 1
66329: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66330: LD_ADDR_VAR 0 2
66334: PUSH
66335: LD_VAR 0 2
66339: PPUSH
66340: LD_INT 4
66342: PPUSH
66343: LD_VAR 0 2
66347: PUSH
66348: LD_INT 4
66350: ARRAY
66351: PUSH
66352: LD_VAR 0 4
66356: PLUS
66357: PPUSH
66358: CALL_OW 1
66362: ST_TO_ADDR
// end ;
66363: GO 66282
66365: POP
66366: POP
// end ;
66367: LD_VAR 0 2
66371: RET
// export function Length ( array ) ; begin
66372: LD_INT 0
66374: PPUSH
// result := array + 0 ;
66375: LD_ADDR_VAR 0 2
66379: PUSH
66380: LD_VAR 0 1
66384: PUSH
66385: LD_INT 0
66387: PLUS
66388: ST_TO_ADDR
// end ;
66389: LD_VAR 0 2
66393: RET
// export function PrepareArray ( array ) ; begin
66394: LD_INT 0
66396: PPUSH
// result := array diff 0 ;
66397: LD_ADDR_VAR 0 2
66401: PUSH
66402: LD_VAR 0 1
66406: PUSH
66407: LD_INT 0
66409: DIFF
66410: ST_TO_ADDR
// if not result [ 1 ] then
66411: LD_VAR 0 2
66415: PUSH
66416: LD_INT 1
66418: ARRAY
66419: NOT
66420: IFFALSE 66440
// result := Delete ( result , 1 ) ;
66422: LD_ADDR_VAR 0 2
66426: PUSH
66427: LD_VAR 0 2
66431: PPUSH
66432: LD_INT 1
66434: PPUSH
66435: CALL_OW 3
66439: ST_TO_ADDR
// end ;
66440: LD_VAR 0 2
66444: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
66445: LD_INT 0
66447: PPUSH
66448: PPUSH
66449: PPUSH
66450: PPUSH
// sibRocketRange := 25 ;
66451: LD_ADDR_VAR 0 6
66455: PUSH
66456: LD_INT 25
66458: ST_TO_ADDR
// result := false ;
66459: LD_ADDR_VAR 0 4
66463: PUSH
66464: LD_INT 0
66466: ST_TO_ADDR
// for i := 0 to 5 do
66467: LD_ADDR_VAR 0 5
66471: PUSH
66472: DOUBLE
66473: LD_INT 0
66475: DEC
66476: ST_TO_ADDR
66477: LD_INT 5
66479: PUSH
66480: FOR_TO
66481: IFFALSE 66548
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
66483: LD_VAR 0 1
66487: PPUSH
66488: LD_VAR 0 5
66492: PPUSH
66493: LD_VAR 0 6
66497: PPUSH
66498: CALL_OW 272
66502: PPUSH
66503: LD_VAR 0 2
66507: PPUSH
66508: LD_VAR 0 5
66512: PPUSH
66513: LD_VAR 0 6
66517: PPUSH
66518: CALL_OW 273
66522: PPUSH
66523: LD_VAR 0 3
66527: PPUSH
66528: CALL_OW 309
66532: IFFALSE 66546
// begin result := true ;
66534: LD_ADDR_VAR 0 4
66538: PUSH
66539: LD_INT 1
66541: ST_TO_ADDR
// exit ;
66542: POP
66543: POP
66544: GO 66550
// end ;
66546: GO 66480
66548: POP
66549: POP
// end ;
66550: LD_VAR 0 4
66554: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
66555: LD_INT 0
66557: PPUSH
66558: PPUSH
66559: PPUSH
// if btype = b_depot then
66560: LD_VAR 0 2
66564: PUSH
66565: LD_INT 0
66567: EQUAL
66568: IFFALSE 66580
// begin result := true ;
66570: LD_ADDR_VAR 0 3
66574: PUSH
66575: LD_INT 1
66577: ST_TO_ADDR
// exit ;
66578: GO 66700
// end ; pom := GetBase ( depot ) ;
66580: LD_ADDR_VAR 0 4
66584: PUSH
66585: LD_VAR 0 1
66589: PPUSH
66590: CALL_OW 274
66594: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
66595: LD_ADDR_VAR 0 5
66599: PUSH
66600: LD_VAR 0 2
66604: PPUSH
66605: LD_VAR 0 1
66609: PPUSH
66610: CALL_OW 248
66614: PPUSH
66615: CALL_OW 450
66619: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
66620: LD_ADDR_VAR 0 3
66624: PUSH
66625: LD_VAR 0 4
66629: PPUSH
66630: LD_INT 1
66632: PPUSH
66633: CALL_OW 275
66637: PUSH
66638: LD_VAR 0 5
66642: PUSH
66643: LD_INT 1
66645: ARRAY
66646: GREATEREQUAL
66647: IFFALSE 66673
66649: PUSH
66650: LD_VAR 0 4
66654: PPUSH
66655: LD_INT 2
66657: PPUSH
66658: CALL_OW 275
66662: PUSH
66663: LD_VAR 0 5
66667: PUSH
66668: LD_INT 2
66670: ARRAY
66671: GREATEREQUAL
66672: AND
66673: IFFALSE 66699
66675: PUSH
66676: LD_VAR 0 4
66680: PPUSH
66681: LD_INT 3
66683: PPUSH
66684: CALL_OW 275
66688: PUSH
66689: LD_VAR 0 5
66693: PUSH
66694: LD_INT 3
66696: ARRAY
66697: GREATEREQUAL
66698: AND
66699: ST_TO_ADDR
// end ;
66700: LD_VAR 0 3
66704: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
66705: LD_INT 0
66707: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
66708: LD_VAR 0 1
66712: PPUSH
66713: LD_VAR 0 2
66717: PPUSH
66718: LD_INT 0
66720: PPUSH
66721: LD_INT 0
66723: PPUSH
66724: LD_INT 1
66726: PPUSH
66727: LD_INT 0
66729: PPUSH
66730: CALL_OW 587
// end ;
66734: LD_VAR 0 3
66738: RET
// export function CenterOnNow ( unit ) ; begin
66739: LD_INT 0
66741: PPUSH
// result := IsInUnit ( unit ) ;
66742: LD_ADDR_VAR 0 2
66746: PUSH
66747: LD_VAR 0 1
66751: PPUSH
66752: CALL_OW 310
66756: ST_TO_ADDR
// if not result then
66757: LD_VAR 0 2
66761: NOT
66762: IFFALSE 66774
// result := unit ;
66764: LD_ADDR_VAR 0 2
66768: PUSH
66769: LD_VAR 0 1
66773: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
66774: LD_VAR 0 1
66778: PPUSH
66779: CALL_OW 87
// end ;
66783: LD_VAR 0 2
66787: RET
// export function ComMoveHex ( unit , hex ) ; begin
66788: LD_INT 0
66790: PPUSH
// if not hex then
66791: LD_VAR 0 2
66795: NOT
66796: IFFALSE 66800
// exit ;
66798: GO 66853
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
66800: LD_VAR 0 2
66804: PUSH
66805: LD_INT 1
66807: ARRAY
66808: PPUSH
66809: LD_VAR 0 2
66813: PUSH
66814: LD_INT 2
66816: ARRAY
66817: PPUSH
66818: CALL_OW 428
66822: IFFALSE 66826
// exit ;
66824: GO 66853
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
66826: LD_VAR 0 1
66830: PPUSH
66831: LD_VAR 0 2
66835: PUSH
66836: LD_INT 1
66838: ARRAY
66839: PPUSH
66840: LD_VAR 0 2
66844: PUSH
66845: LD_INT 2
66847: ARRAY
66848: PPUSH
66849: CALL_OW 111
// end ;
66853: LD_VAR 0 3
66857: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
66858: LD_INT 0
66860: PPUSH
66861: PPUSH
66862: PPUSH
// if not unit or not enemy then
66863: LD_VAR 0 1
66867: NOT
66868: IFTRUE 66877
66870: PUSH
66871: LD_VAR 0 2
66875: NOT
66876: OR
66877: IFFALSE 66881
// exit ;
66879: GO 67007
// x := GetX ( enemy ) ;
66881: LD_ADDR_VAR 0 4
66885: PUSH
66886: LD_VAR 0 2
66890: PPUSH
66891: CALL_OW 250
66895: ST_TO_ADDR
// y := GetY ( enemy ) ;
66896: LD_ADDR_VAR 0 5
66900: PUSH
66901: LD_VAR 0 2
66905: PPUSH
66906: CALL_OW 251
66910: ST_TO_ADDR
// if ValidHex ( x , y ) then
66911: LD_VAR 0 4
66915: PPUSH
66916: LD_VAR 0 5
66920: PPUSH
66921: CALL_OW 488
66925: IFFALSE 67007
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
66927: LD_VAR 0 2
66931: PPUSH
66932: CALL_OW 247
66936: PUSH
66937: LD_INT 3
66939: PUSH
66940: LD_INT 2
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: IN
66947: IFTRUE 66970
66949: PUSH
66950: LD_VAR 0 1
66954: PPUSH
66955: CALL_OW 255
66959: PPUSH
66960: LD_VAR 0 2
66964: PPUSH
66965: CALL_OW 292
66969: OR
66970: IFFALSE 66988
// ComAttackUnit ( unit , enemy ) else
66972: LD_VAR 0 1
66976: PPUSH
66977: LD_VAR 0 2
66981: PPUSH
66982: CALL_OW 115
66986: GO 67007
// ComAgressiveMove ( unit , x , y ) ;
66988: LD_VAR 0 1
66992: PPUSH
66993: LD_VAR 0 4
66997: PPUSH
66998: LD_VAR 0 5
67002: PPUSH
67003: CALL_OW 114
// end ;
67007: LD_VAR 0 3
67011: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
67012: LD_INT 0
67014: PPUSH
67015: PPUSH
67016: PPUSH
// list := AreaToList ( area , 0 ) ;
67017: LD_ADDR_VAR 0 5
67021: PUSH
67022: LD_VAR 0 1
67026: PPUSH
67027: LD_INT 0
67029: PPUSH
67030: CALL_OW 517
67034: ST_TO_ADDR
// if not list then
67035: LD_VAR 0 5
67039: NOT
67040: IFFALSE 67044
// exit ;
67042: GO 67174
// if all then
67044: LD_VAR 0 2
67048: IFFALSE 67136
// begin for i := 1 to list [ 1 ] do
67050: LD_ADDR_VAR 0 4
67054: PUSH
67055: DOUBLE
67056: LD_INT 1
67058: DEC
67059: ST_TO_ADDR
67060: LD_VAR 0 5
67064: PUSH
67065: LD_INT 1
67067: ARRAY
67068: PUSH
67069: FOR_TO
67070: IFFALSE 67132
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
67072: LD_ADDR_VAR 0 3
67076: PUSH
67077: LD_VAR 0 3
67081: PPUSH
67082: LD_VAR 0 3
67086: PUSH
67087: LD_INT 1
67089: PLUS
67090: PPUSH
67091: LD_VAR 0 5
67095: PUSH
67096: LD_INT 1
67098: ARRAY
67099: PUSH
67100: LD_VAR 0 4
67104: ARRAY
67105: PUSH
67106: LD_VAR 0 5
67110: PUSH
67111: LD_INT 2
67113: ARRAY
67114: PUSH
67115: LD_VAR 0 4
67119: ARRAY
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PPUSH
67125: CALL_OW 1
67129: ST_TO_ADDR
67130: GO 67069
67132: POP
67133: POP
// exit ;
67134: GO 67174
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
67136: LD_ADDR_VAR 0 3
67140: PUSH
67141: LD_VAR 0 5
67145: PUSH
67146: LD_INT 1
67148: ARRAY
67149: PUSH
67150: LD_INT 1
67152: ARRAY
67153: PUSH
67154: LD_VAR 0 5
67158: PUSH
67159: LD_INT 2
67161: ARRAY
67162: PUSH
67163: LD_INT 1
67165: ARRAY
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: EMPTY
67172: LIST
67173: ST_TO_ADDR
// end ;
67174: LD_VAR 0 3
67178: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
67179: LD_INT 0
67181: PPUSH
67182: PPUSH
// list := AreaToList ( area , 0 ) ;
67183: LD_ADDR_VAR 0 4
67187: PUSH
67188: LD_VAR 0 1
67192: PPUSH
67193: LD_INT 0
67195: PPUSH
67196: CALL_OW 517
67200: ST_TO_ADDR
// if not list then
67201: LD_VAR 0 4
67205: NOT
67206: IFFALSE 67210
// exit ;
67208: GO 67251
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
67210: LD_ADDR_VAR 0 3
67214: PUSH
67215: LD_VAR 0 4
67219: PUSH
67220: LD_INT 1
67222: ARRAY
67223: PUSH
67224: LD_INT 1
67226: ARRAY
67227: PUSH
67228: LD_VAR 0 4
67232: PUSH
67233: LD_INT 2
67235: ARRAY
67236: PUSH
67237: LD_INT 1
67239: ARRAY
67240: PUSH
67241: LD_VAR 0 2
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: LIST
67250: ST_TO_ADDR
// end ;
67251: LD_VAR 0 3
67255: RET
// export function First ( array ) ; begin
67256: LD_INT 0
67258: PPUSH
// if not array then
67259: LD_VAR 0 1
67263: NOT
67264: IFFALSE 67268
// exit ;
67266: GO 67282
// result := array [ 1 ] ;
67268: LD_ADDR_VAR 0 2
67272: PUSH
67273: LD_VAR 0 1
67277: PUSH
67278: LD_INT 1
67280: ARRAY
67281: ST_TO_ADDR
// end ;
67282: LD_VAR 0 2
67286: RET
// export function Last ( array ) ; begin
67287: LD_INT 0
67289: PPUSH
// if not array then
67290: LD_VAR 0 1
67294: NOT
67295: IFFALSE 67299
// exit ;
67297: GO 67315
// result := array [ array ] ;
67299: LD_ADDR_VAR 0 2
67303: PUSH
67304: LD_VAR 0 1
67308: PUSH
67309: LD_VAR 0 1
67313: ARRAY
67314: ST_TO_ADDR
// end ;
67315: LD_VAR 0 2
67319: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
67320: LD_INT 0
67322: PPUSH
67323: PPUSH
// result := [ ] ;
67324: LD_ADDR_VAR 0 5
67328: PUSH
67329: EMPTY
67330: ST_TO_ADDR
// if not array then
67331: LD_VAR 0 1
67335: NOT
67336: IFFALSE 67340
// exit ;
67338: GO 67452
// for i := 1 to array do
67340: LD_ADDR_VAR 0 6
67344: PUSH
67345: DOUBLE
67346: LD_INT 1
67348: DEC
67349: ST_TO_ADDR
67350: LD_VAR 0 1
67354: PUSH
67355: FOR_TO
67356: IFFALSE 67450
// if array [ i ] [ index ] = value then
67358: LD_VAR 0 1
67362: PUSH
67363: LD_VAR 0 6
67367: ARRAY
67368: PUSH
67369: LD_VAR 0 2
67373: ARRAY
67374: PUSH
67375: LD_VAR 0 3
67379: EQUAL
67380: IFFALSE 67448
// begin if indexColumn then
67382: LD_VAR 0 4
67386: IFFALSE 67422
// result := Join ( result , array [ i ] [ indexColumn ] ) else
67388: LD_ADDR_VAR 0 5
67392: PUSH
67393: LD_VAR 0 5
67397: PPUSH
67398: LD_VAR 0 1
67402: PUSH
67403: LD_VAR 0 6
67407: ARRAY
67408: PUSH
67409: LD_VAR 0 4
67413: ARRAY
67414: PPUSH
67415: CALL 62460 0 2
67419: ST_TO_ADDR
67420: GO 67448
// result := Join ( result , array [ i ] ) ;
67422: LD_ADDR_VAR 0 5
67426: PUSH
67427: LD_VAR 0 5
67431: PPUSH
67432: LD_VAR 0 1
67436: PUSH
67437: LD_VAR 0 6
67441: ARRAY
67442: PPUSH
67443: CALL 62460 0 2
67447: ST_TO_ADDR
// end ;
67448: GO 67355
67450: POP
67451: POP
// end ;
67452: LD_VAR 0 5
67456: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
67457: LD_INT 0
67459: PPUSH
// if not vehicles or not parkingPoint then
67460: LD_VAR 0 1
67464: NOT
67465: IFTRUE 67474
67467: PUSH
67468: LD_VAR 0 2
67472: NOT
67473: OR
67474: IFFALSE 67478
// exit ;
67476: GO 67576
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
67478: LD_ADDR_VAR 0 1
67482: PUSH
67483: LD_VAR 0 1
67487: PPUSH
67488: LD_INT 50
67490: PUSH
67491: EMPTY
67492: LIST
67493: PUSH
67494: LD_INT 3
67496: PUSH
67497: LD_INT 92
67499: PUSH
67500: LD_VAR 0 2
67504: PUSH
67505: LD_INT 1
67507: ARRAY
67508: PUSH
67509: LD_VAR 0 2
67513: PUSH
67514: LD_INT 2
67516: ARRAY
67517: PUSH
67518: LD_INT 8
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: LIST
67525: LIST
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PPUSH
67535: CALL_OW 72
67539: ST_TO_ADDR
// if not vehicles then
67540: LD_VAR 0 1
67544: NOT
67545: IFFALSE 67549
// exit ;
67547: GO 67576
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
67549: LD_VAR 0 1
67553: PPUSH
67554: LD_VAR 0 2
67558: PUSH
67559: LD_INT 1
67561: ARRAY
67562: PPUSH
67563: LD_VAR 0 2
67567: PUSH
67568: LD_INT 2
67570: ARRAY
67571: PPUSH
67572: CALL_OW 111
// end ;
67576: LD_VAR 0 3
67580: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
67581: LD_INT 0
67583: PPUSH
67584: PPUSH
67585: PPUSH
// if not side or not area then
67586: LD_VAR 0 1
67590: NOT
67591: IFTRUE 67600
67593: PUSH
67594: LD_VAR 0 2
67598: NOT
67599: OR
67600: IFFALSE 67604
// exit ;
67602: GO 67723
// tmp := AreaToList ( area , 0 ) ;
67604: LD_ADDR_VAR 0 5
67608: PUSH
67609: LD_VAR 0 2
67613: PPUSH
67614: LD_INT 0
67616: PPUSH
67617: CALL_OW 517
67621: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
67622: LD_ADDR_VAR 0 4
67626: PUSH
67627: DOUBLE
67628: LD_INT 1
67630: DEC
67631: ST_TO_ADDR
67632: LD_VAR 0 5
67636: PUSH
67637: LD_INT 1
67639: ARRAY
67640: PUSH
67641: FOR_TO
67642: IFFALSE 67721
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
67644: LD_VAR 0 5
67648: PUSH
67649: LD_INT 1
67651: ARRAY
67652: PUSH
67653: LD_VAR 0 4
67657: ARRAY
67658: PPUSH
67659: LD_VAR 0 5
67663: PUSH
67664: LD_INT 2
67666: ARRAY
67667: PUSH
67668: LD_VAR 0 4
67672: ARRAY
67673: PPUSH
67674: CALL_OW 351
67678: IFFALSE 67719
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
67680: LD_VAR 0 5
67684: PUSH
67685: LD_INT 1
67687: ARRAY
67688: PUSH
67689: LD_VAR 0 4
67693: ARRAY
67694: PPUSH
67695: LD_VAR 0 5
67699: PUSH
67700: LD_INT 2
67702: ARRAY
67703: PUSH
67704: LD_VAR 0 4
67708: ARRAY
67709: PPUSH
67710: LD_VAR 0 1
67714: PPUSH
67715: CALL_OW 244
// end ;
67719: GO 67641
67721: POP
67722: POP
// end ;
67723: LD_VAR 0 3
67727: RET
// export function UniqueArray ( array ) ; var i ; begin
67728: LD_INT 0
67730: PPUSH
67731: PPUSH
// result := [ ] ;
67732: LD_ADDR_VAR 0 2
67736: PUSH
67737: EMPTY
67738: ST_TO_ADDR
// if not array then
67739: LD_VAR 0 1
67743: NOT
67744: IFFALSE 67748
// exit ;
67746: GO 67809
// for i := 1 to array do
67748: LD_ADDR_VAR 0 3
67752: PUSH
67753: DOUBLE
67754: LD_INT 1
67756: DEC
67757: ST_TO_ADDR
67758: LD_VAR 0 1
67762: PUSH
67763: FOR_TO
67764: IFFALSE 67807
// if not array [ i ] in result then
67766: LD_VAR 0 1
67770: PUSH
67771: LD_VAR 0 3
67775: ARRAY
67776: PUSH
67777: LD_VAR 0 2
67781: IN
67782: NOT
67783: IFFALSE 67805
// result := Join ( result , i ) ;
67785: LD_ADDR_VAR 0 2
67789: PUSH
67790: LD_VAR 0 2
67794: PPUSH
67795: LD_VAR 0 3
67799: PPUSH
67800: CALL 62460 0 2
67804: ST_TO_ADDR
67805: GO 67763
67807: POP
67808: POP
// end ; end_of_file
67809: LD_VAR 0 2
67813: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67814: LD_VAR 0 1
67818: PPUSH
67819: LD_VAR 0 2
67823: PPUSH
67824: LD_VAR 0 3
67828: PPUSH
67829: LD_VAR 0 4
67833: PPUSH
67834: LD_VAR 0 5
67838: PPUSH
67839: LD_VAR 0 6
67843: PPUSH
67844: CALL 2031 0 6
// end ;
67848: PPOPN 6
67850: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
67851: LD_INT 0
67853: PPUSH
// begin if not units then
67854: LD_VAR 0 1
67858: NOT
67859: IFFALSE 67863
// exit ;
67861: GO 67897
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
67863: LD_VAR 0 1
67867: PPUSH
67868: LD_VAR 0 2
67872: PPUSH
67873: LD_VAR 0 3
67877: PPUSH
67878: LD_VAR 0 4
67882: PPUSH
67883: LD_VAR 0 5
67887: PPUSH
67888: LD_VAR 0 6
67892: PPUSH
67893: CALL 24277 0 6
// end ;
67897: PPOPN 7
67899: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
67900: CALL 1918 0 0
// end ;
67904: PPOPN 1
67906: END
