// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Your_Side := 1 ;
   8: LD_ADDR_OWVAR 2
  12: PUSH
  13: LD_INT 1
  15: ST_TO_ADDR
// test := false ;
  16: LD_ADDR_EXP 2
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// if test then
  24: LD_EXP 2
  28: IFFALSE 73
// begin FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// difficulty := 2 ;
  37: LD_ADDR_OWVAR 67
  41: PUSH
  42: LD_INT 2
  44: ST_TO_ADDR
// level := 2 ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 2
  52: ST_TO_ADDR
// class_1 := class_sniper ;
  53: LD_ADDR_EXP 25
  57: PUSH
  58: LD_INT 5
  60: ST_TO_ADDR
// class_2 := class_1 ;
  61: LD_ADDR_EXP 26
  65: PUSH
  66: LD_EXP 25
  70: ST_TO_ADDR
// end else
  71: GO 123
// begin difficulty := GetMultiplayerSetting ( 0 ) ;
  73: LD_ADDR_OWVAR 67
  77: PUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 426
  85: ST_TO_ADDR
// level := GetMultiplayerSetting ( 1 ) ;
  86: LD_ADDR_EXP 1
  90: PUSH
  91: LD_INT 1
  93: PPUSH
  94: CALL_OW 426
  98: ST_TO_ADDR
// class_1 := [ class_soldier , class_sniper ] [ GetMultiplayerSetting ( 2 ) ] ;
  99: LD_ADDR_EXP 25
 103: PUSH
 104: LD_INT 1
 106: PUSH
 107: LD_INT 5
 109: PUSH
 110: EMPTY
 111: LIST
 112: LIST
 113: PUSH
 114: LD_INT 2
 116: PPUSH
 117: CALL_OW 426
 121: ARRAY
 122: ST_TO_ADDR
// end ; Counter ;
 123: CALL 136 0 0
// PrepareNature ;
 127: CALL 383 0 0
// InitPlayers ;
 131: CALL 938 0 0
// end ;
 135: END
// export level , test ; export E1 , B1 , T1 , F1 , H1 , M1 , A1 ; export PE , PB , PT , PF , PH , PM , PA ; function Counter ; begin
 136: LD_INT 0
 138: PPUSH
// level := 3 ;
 139: LD_ADDR_EXP 1
 143: PUSH
 144: LD_INT 3
 146: ST_TO_ADDR
// E1 := [ 10 , 15 , 20 ] [ level ] ;
 147: LD_ADDR_EXP 3
 151: PUSH
 152: LD_INT 10
 154: PUSH
 155: LD_INT 15
 157: PUSH
 158: LD_INT 20
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_EXP 1
 170: ARRAY
 171: ST_TO_ADDR
// B1 := [ 8 , 12 , 16 ] [ level ] ;
 172: LD_ADDR_EXP 4
 176: PUSH
 177: LD_INT 8
 179: PUSH
 180: LD_INT 12
 182: PUSH
 183: LD_INT 16
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: LIST
 190: PUSH
 191: LD_EXP 1
 195: ARRAY
 196: ST_TO_ADDR
// T1 := [ 5 , 10 , 15 ] [ level ] ;
 197: LD_ADDR_EXP 5
 201: PUSH
 202: LD_INT 5
 204: PUSH
 205: LD_INT 10
 207: PUSH
 208: LD_INT 15
 210: PUSH
 211: EMPTY
 212: LIST
 213: LIST
 214: LIST
 215: PUSH
 216: LD_EXP 1
 220: ARRAY
 221: ST_TO_ADDR
// F1 := [ 2 , 3 , 5 ] [ level ] ;
 222: LD_ADDR_EXP 6
 226: PUSH
 227: LD_INT 2
 229: PUSH
 230: LD_INT 3
 232: PUSH
 233: LD_INT 5
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: LIST
 240: PUSH
 241: LD_EXP 1
 245: ARRAY
 246: ST_TO_ADDR
// H1 := [ 4 , 7 , 10 ] [ level ] ;
 247: LD_ADDR_EXP 7
 251: PUSH
 252: LD_INT 4
 254: PUSH
 255: LD_INT 7
 257: PUSH
 258: LD_INT 10
 260: PUSH
 261: EMPTY
 262: LIST
 263: LIST
 264: LIST
 265: PUSH
 266: LD_EXP 1
 270: ARRAY
 271: ST_TO_ADDR
// M1 := [ 1 , 2 , 3 ] [ level ] ;
 272: LD_ADDR_EXP 8
 276: PUSH
 277: LD_INT 1
 279: PUSH
 280: LD_INT 2
 282: PUSH
 283: LD_INT 3
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: LIST
 290: PUSH
 291: LD_EXP 1
 295: ARRAY
 296: ST_TO_ADDR
// PA := [ 1 , 1 , 1 ] [ level ] ;
 297: LD_ADDR_EXP 16
 301: PUSH
 302: LD_INT 1
 304: PUSH
 305: LD_INT 1
 307: PUSH
 308: LD_INT 1
 310: PUSH
 311: EMPTY
 312: LIST
 313: LIST
 314: LIST
 315: PUSH
 316: LD_EXP 1
 320: ARRAY
 321: ST_TO_ADDR
// PE := 5 ;
 322: LD_ADDR_EXP 10
 326: PUSH
 327: LD_INT 5
 329: ST_TO_ADDR
// PB := 10 ;
 330: LD_ADDR_EXP 11
 334: PUSH
 335: LD_INT 10
 337: ST_TO_ADDR
// PT := 50 ;
 338: LD_ADDR_EXP 12
 342: PUSH
 343: LD_INT 50
 345: ST_TO_ADDR
// PF := 100 ;
 346: LD_ADDR_EXP 13
 350: PUSH
 351: LD_INT 100
 353: ST_TO_ADDR
// PH := 120 ;
 354: LD_ADDR_EXP 14
 358: PUSH
 359: LD_INT 120
 361: ST_TO_ADDR
// PM := 300 ;
 362: LD_ADDR_EXP 15
 366: PUSH
 367: LD_INT 300
 369: ST_TO_ADDR
// PA := 1000 ;
 370: LD_ADDR_EXP 16
 374: PUSH
 375: LD_INT 1000
 377: ST_TO_ADDR
// end ; end_of_file
 378: LD_VAR 0 1
 382: RET
// export function PrepareNature ; var i , animal ; begin
 383: LD_INT 0
 385: PPUSH
 386: PPUSH
 387: PPUSH
// uc_side = 0 ;
 388: LD_ADDR_OWVAR 20
 392: PUSH
 393: LD_INT 0
 395: ST_TO_ADDR
// uc_nation = 0 ;
 396: LD_ADDR_OWVAR 21
 400: PUSH
 401: LD_INT 0
 403: ST_TO_ADDR
// for i = 1 to B1 do
 404: LD_ADDR_VAR 0 2
 408: PUSH
 409: DOUBLE
 410: LD_INT 1
 412: DEC
 413: ST_TO_ADDR
 414: LD_EXP 4
 418: PUSH
 419: FOR_TO
 420: IFFALSE 473
// begin hc_class = 18 ;
 422: LD_ADDR_OWVAR 28
 426: PUSH
 427: LD_INT 18
 429: ST_TO_ADDR
// hc_gallery = sandnature ;
 430: LD_ADDR_OWVAR 33
 434: PUSH
 435: LD_STRING sandnature
 437: ST_TO_ADDR
// hc_face_number = 1 ;
 438: LD_ADDR_OWVAR 34
 442: PUSH
 443: LD_INT 1
 445: ST_TO_ADDR
// animal := CreateHuman ;
 446: LD_ADDR_VAR 0 3
 450: PUSH
 451: CALL_OW 44
 455: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 456: LD_VAR 0 3
 460: PPUSH
 461: LD_INT 2
 463: PPUSH
 464: LD_INT 0
 466: PPUSH
 467: CALL_OW 49
// end ;
 471: GO 419
 473: POP
 474: POP
// for i = 1 to T1 do
 475: LD_ADDR_VAR 0 2
 479: PUSH
 480: DOUBLE
 481: LD_INT 1
 483: DEC
 484: ST_TO_ADDR
 485: LD_EXP 5
 489: PUSH
 490: FOR_TO
 491: IFFALSE 560
// begin hc_class = class_tiger ;
 493: LD_ADDR_OWVAR 28
 497: PUSH
 498: LD_INT 14
 500: ST_TO_ADDR
// hc_gallery = sandnature ;
 501: LD_ADDR_OWVAR 33
 505: PUSH
 506: LD_STRING sandnature
 508: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 50 ) ;
 509: LD_ADDR_OWVAR 35
 513: PUSH
 514: LD_INT 0
 516: PPUSH
 517: LD_INT 50
 519: PPUSH
 520: CALL_OW 12
 524: ST_TO_ADDR
// hc_face_number = 3 ;
 525: LD_ADDR_OWVAR 34
 529: PUSH
 530: LD_INT 3
 532: ST_TO_ADDR
// animal := CreateHuman ;
 533: LD_ADDR_VAR 0 3
 537: PUSH
 538: CALL_OW 44
 542: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 543: LD_VAR 0 3
 547: PPUSH
 548: LD_INT 2
 550: PPUSH
 551: LD_INT 0
 553: PPUSH
 554: CALL_OW 49
// end ;
 558: GO 490
 560: POP
 561: POP
// for i = 1 to T1 do
 562: LD_ADDR_VAR 0 2
 566: PUSH
 567: DOUBLE
 568: LD_INT 1
 570: DEC
 571: ST_TO_ADDR
 572: LD_EXP 5
 576: PUSH
 577: FOR_TO
 578: IFFALSE 639
// begin hc_class = 21 ;
 580: LD_ADDR_OWVAR 28
 584: PUSH
 585: LD_INT 21
 587: ST_TO_ADDR
// hc_gallery = sandnature ;
 588: LD_ADDR_OWVAR 33
 592: PUSH
 593: LD_STRING sandnature
 595: ST_TO_ADDR
// hc_agressivity = 0 ;
 596: LD_ADDR_OWVAR 35
 600: PUSH
 601: LD_INT 0
 603: ST_TO_ADDR
// hc_face_number = 5 ;
 604: LD_ADDR_OWVAR 34
 608: PUSH
 609: LD_INT 5
 611: ST_TO_ADDR
// animal := CreateHuman ;
 612: LD_ADDR_VAR 0 3
 616: PUSH
 617: CALL_OW 44
 621: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 622: LD_VAR 0 3
 626: PPUSH
 627: LD_INT 2
 629: PPUSH
 630: LD_INT 0
 632: PPUSH
 633: CALL_OW 49
// end ;
 637: GO 577
 639: POP
 640: POP
// for i = 1 to E1 do
 641: LD_ADDR_VAR 0 2
 645: PUSH
 646: DOUBLE
 647: LD_INT 1
 649: DEC
 650: ST_TO_ADDR
 651: LD_EXP 3
 655: PUSH
 656: FOR_TO
 657: IFFALSE 710
// begin hc_class = 13 ;
 659: LD_ADDR_OWVAR 28
 663: PUSH
 664: LD_INT 13
 666: ST_TO_ADDR
// hc_gallery = sandnature ;
 667: LD_ADDR_OWVAR 33
 671: PUSH
 672: LD_STRING sandnature
 674: ST_TO_ADDR
// hc_face_number = 4 ;
 675: LD_ADDR_OWVAR 34
 679: PUSH
 680: LD_INT 4
 682: ST_TO_ADDR
// animal := CreateHuman ;
 683: LD_ADDR_VAR 0 3
 687: PUSH
 688: CALL_OW 44
 692: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 693: LD_VAR 0 3
 697: PPUSH
 698: LD_INT 2
 700: PPUSH
 701: LD_INT 0
 703: PPUSH
 704: CALL_OW 49
// end ;
 708: GO 656
 710: POP
 711: POP
// for i = 1 to F1 do
 712: LD_ADDR_VAR 0 2
 716: PUSH
 717: DOUBLE
 718: LD_INT 1
 720: DEC
 721: ST_TO_ADDR
 722: LD_EXP 6
 726: PUSH
 727: FOR_TO
 728: IFFALSE 781
// begin hc_class = 20 ;
 730: LD_ADDR_OWVAR 28
 734: PUSH
 735: LD_INT 20
 737: ST_TO_ADDR
// hc_gallery = sandnature ;
 738: LD_ADDR_OWVAR 33
 742: PUSH
 743: LD_STRING sandnature
 745: ST_TO_ADDR
// hc_face_number = 2 ;
 746: LD_ADDR_OWVAR 34
 750: PUSH
 751: LD_INT 2
 753: ST_TO_ADDR
// animal := CreateHuman ;
 754: LD_ADDR_VAR 0 3
 758: PUSH
 759: CALL_OW 44
 763: ST_TO_ADDR
// PlaceUnitArea ( animal , wat_area , false ) ;
 764: LD_VAR 0 3
 768: PPUSH
 769: LD_INT 1
 771: PPUSH
 772: LD_INT 0
 774: PPUSH
 775: CALL_OW 49
// end ;
 779: GO 727
 781: POP
 782: POP
// for i = 1 to M1 do
 783: LD_ADDR_VAR 0 2
 787: PUSH
 788: DOUBLE
 789: LD_INT 1
 791: DEC
 792: ST_TO_ADDR
 793: LD_EXP 8
 797: PUSH
 798: FOR_TO
 799: IFFALSE 844
// begin vc_chassis := 31 ;
 801: LD_ADDR_OWVAR 37
 805: PUSH
 806: LD_INT 31
 808: ST_TO_ADDR
// vc_control := control_rider ;
 809: LD_ADDR_OWVAR 38
 813: PUSH
 814: LD_INT 4
 816: ST_TO_ADDR
// animal := CreateVehicle ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: CALL_OW 45
 826: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 827: LD_VAR 0 3
 831: PPUSH
 832: LD_INT 2
 834: PPUSH
 835: LD_INT 0
 837: PPUSH
 838: CALL_OW 49
// end ;
 842: GO 798
 844: POP
 845: POP
// hc_gallery :=  ;
 846: LD_ADDR_OWVAR 33
 850: PUSH
 851: LD_STRING 
 853: ST_TO_ADDR
// hc_class := class_apeman ;
 854: LD_ADDR_OWVAR 28
 858: PUSH
 859: LD_INT 12
 861: ST_TO_ADDR
// hc_attr := [ 15 , 15 ] ;
 862: LD_ADDR_OWVAR 29
 866: PUSH
 867: LD_INT 15
 869: PUSH
 870: LD_INT 15
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: ST_TO_ADDR
// hc_skills := [ 10 , 10 , 10 , 10 ] ;
 877: LD_ADDR_OWVAR 31
 881: PUSH
 882: LD_INT 10
 884: PUSH
 885: LD_INT 10
 887: PUSH
 888: LD_INT 10
 890: PUSH
 891: LD_INT 10
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: LIST
 898: LIST
 899: ST_TO_ADDR
// hc_name := White Apeman ;
 900: LD_ADDR_OWVAR 26
 904: PUSH
 905: LD_STRING White Apeman
 907: ST_TO_ADDR
// animal := CreateHuman ;
 908: LD_ADDR_VAR 0 3
 912: PUSH
 913: CALL_OW 44
 917: ST_TO_ADDR
// PlaceUnitArea ( animal , spawn_extra , false ) ;
 918: LD_VAR 0 3
 922: PPUSH
 923: LD_INT 12
 925: PPUSH
 926: LD_INT 0
 928: PPUSH
 929: CALL_OW 49
// end ; end_of_file
 933: LD_VAR 0 1
 937: RET
// export player_1 , player_2 , player , player_3 , player_4 , player_5 , player_6 , player_7 ; export class_1 , class_2 , class_0 ; export score_player , score_enemy1 , score_enemy2 , score_enemy3 , score_enemy4 , score_enemy5 , score_enemy6 , score_enemy7 ; export function InitPlayers ; begin
 938: LD_INT 0
 940: PPUSH
// score_player := 0 ;
 941: LD_ADDR_EXP 28
 945: PUSH
 946: LD_INT 0
 948: ST_TO_ADDR
// score_enemy1 := 0 ;
 949: LD_ADDR_EXP 29
 953: PUSH
 954: LD_INT 0
 956: ST_TO_ADDR
// score_enemy2 := 0 ;
 957: LD_ADDR_EXP 30
 961: PUSH
 962: LD_INT 0
 964: ST_TO_ADDR
// score_enemy3 := 0 ;
 965: LD_ADDR_EXP 31
 969: PUSH
 970: LD_INT 0
 972: ST_TO_ADDR
// score_enemy4 := 0 ;
 973: LD_ADDR_EXP 32
 977: PUSH
 978: LD_INT 0
 980: ST_TO_ADDR
// score_enemy5 := 0 ;
 981: LD_ADDR_EXP 33
 985: PUSH
 986: LD_INT 0
 988: ST_TO_ADDR
// score_enemy6 := 0 ;
 989: LD_ADDR_EXP 34
 993: PUSH
 994: LD_INT 0
 996: ST_TO_ADDR
// score_enemy7 := 0 ;
 997: LD_ADDR_EXP 35
1001: PUSH
1002: LD_INT 0
1004: ST_TO_ADDR
// if difficulty > 1 then
1005: LD_OWVAR 67
1009: PUSH
1010: LD_INT 1
1012: GREATER
1013: IFFALSE 1025
// class_2 := class_sniper else
1015: LD_ADDR_EXP 26
1019: PUSH
1020: LD_INT 5
1022: ST_TO_ADDR
1023: GO 1033
// class_2 := class_soldier ;
1025: LD_ADDR_EXP 26
1029: PUSH
1030: LD_INT 1
1032: ST_TO_ADDR
// uc_side := 1 ;
1033: LD_ADDR_OWVAR 20
1037: PUSH
1038: LD_INT 1
1040: ST_TO_ADDR
// uc_nation := 1 ;
1041: LD_ADDR_OWVAR 21
1045: PUSH
1046: LD_INT 1
1048: ST_TO_ADDR
// hc_name :=  ;
1049: LD_ADDR_OWVAR 26
1053: PUSH
1054: LD_STRING 
1056: ST_TO_ADDR
// hc_sex := sex_male ;
1057: LD_ADDR_OWVAR 27
1061: PUSH
1062: LD_INT 1
1064: ST_TO_ADDR
// hc_attr := [ [ 12 , 11 , 10 ] [ difficulty ] , 10 ] ;
1065: LD_ADDR_OWVAR 29
1069: PUSH
1070: LD_INT 12
1072: PUSH
1073: LD_INT 11
1075: PUSH
1076: LD_INT 10
1078: PUSH
1079: EMPTY
1080: LIST
1081: LIST
1082: LIST
1083: PUSH
1084: LD_OWVAR 67
1088: ARRAY
1089: PUSH
1090: LD_INT 10
1092: PUSH
1093: EMPTY
1094: LIST
1095: LIST
1096: ST_TO_ADDR
// hc_class := class_1 ;
1097: LD_ADDR_OWVAR 28
1101: PUSH
1102: LD_EXP 25
1106: ST_TO_ADDR
// hc_skills := [ [ 10 , 7 , 5 ] [ difficulty ] , 0 , 0 , 0 ] ;
1107: LD_ADDR_OWVAR 31
1111: PUSH
1112: LD_INT 10
1114: PUSH
1115: LD_INT 7
1117: PUSH
1118: LD_INT 5
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: LIST
1125: PUSH
1126: LD_OWVAR 67
1130: ARRAY
1131: PUSH
1132: LD_INT 0
1134: PUSH
1135: LD_INT 0
1137: PUSH
1138: LD_INT 0
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: LIST
1145: LIST
1146: ST_TO_ADDR
// hc_gallery :=  ;
1147: LD_ADDR_OWVAR 33
1151: PUSH
1152: LD_STRING 
1154: ST_TO_ADDR
// player := CreateHuman ;
1155: LD_ADDR_EXP 19
1159: PUSH
1160: CALL_OW 44
1164: ST_TO_ADDR
// uc_side := 2 ;
1165: LD_ADDR_OWVAR 20
1169: PUSH
1170: LD_INT 2
1172: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1173: LD_ADDR_EXP 26
1177: PUSH
1178: LD_INT 5
1180: PUSH
1181: LD_INT 1
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PUSH
1188: LD_INT 1
1190: PPUSH
1191: LD_INT 2
1193: PPUSH
1194: CALL_OW 12
1198: ARRAY
1199: ST_TO_ADDR
// hc_sex := sex_male ;
1200: LD_ADDR_OWVAR 27
1204: PUSH
1205: LD_INT 1
1207: ST_TO_ADDR
// hc_attr := [ [ 11 , 12 , 13 ] [ difficulty ] , 10 ] ;
1208: LD_ADDR_OWVAR 29
1212: PUSH
1213: LD_INT 11
1215: PUSH
1216: LD_INT 12
1218: PUSH
1219: LD_INT 13
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: PUSH
1227: LD_OWVAR 67
1231: ARRAY
1232: PUSH
1233: LD_INT 10
1235: PUSH
1236: EMPTY
1237: LIST
1238: LIST
1239: ST_TO_ADDR
// hc_class := class_2 ;
1240: LD_ADDR_OWVAR 28
1244: PUSH
1245: LD_EXP 26
1249: ST_TO_ADDR
// hc_skills := [ [ 8 , 9 , 10 ] [ difficulty ] , 0 , 0 , 0 ] ;
1250: LD_ADDR_OWVAR 31
1254: PUSH
1255: LD_INT 8
1257: PUSH
1258: LD_INT 9
1260: PUSH
1261: LD_INT 10
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: PUSH
1269: LD_OWVAR 67
1273: ARRAY
1274: PUSH
1275: LD_INT 0
1277: PUSH
1278: LD_INT 0
1280: PUSH
1281: LD_INT 0
1283: PUSH
1284: EMPTY
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: ST_TO_ADDR
// hc_gallery :=  ;
1290: LD_ADDR_OWVAR 33
1294: PUSH
1295: LD_STRING 
1297: ST_TO_ADDR
// player_1 := CreateHuman ;
1298: LD_ADDR_EXP 17
1302: PUSH
1303: CALL_OW 44
1307: ST_TO_ADDR
// uc_side := 3 ;
1308: LD_ADDR_OWVAR 20
1312: PUSH
1313: LD_INT 3
1315: ST_TO_ADDR
// uc_nation := 1 ;
1316: LD_ADDR_OWVAR 21
1320: PUSH
1321: LD_INT 1
1323: ST_TO_ADDR
// hc_sex := sex_male ;
1324: LD_ADDR_OWVAR 27
1328: PUSH
1329: LD_INT 1
1331: ST_TO_ADDR
// hc_attr := [ [ 10 , 11 , 12 ] [ difficulty ] , 10 ] ;
1332: LD_ADDR_OWVAR 29
1336: PUSH
1337: LD_INT 10
1339: PUSH
1340: LD_INT 11
1342: PUSH
1343: LD_INT 12
1345: PUSH
1346: EMPTY
1347: LIST
1348: LIST
1349: LIST
1350: PUSH
1351: LD_OWVAR 67
1355: ARRAY
1356: PUSH
1357: LD_INT 10
1359: PUSH
1360: EMPTY
1361: LIST
1362: LIST
1363: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1364: LD_ADDR_EXP 26
1368: PUSH
1369: LD_INT 5
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 1
1381: PPUSH
1382: LD_INT 2
1384: PPUSH
1385: CALL_OW 12
1389: ARRAY
1390: ST_TO_ADDR
// hc_class := class_2 ;
1391: LD_ADDR_OWVAR 28
1395: PUSH
1396: LD_EXP 26
1400: ST_TO_ADDR
// hc_skills := [ [ 5 , 7 , 10 ] [ difficulty ] , 0 , 0 , 0 ] ;
1401: LD_ADDR_OWVAR 31
1405: PUSH
1406: LD_INT 5
1408: PUSH
1409: LD_INT 7
1411: PUSH
1412: LD_INT 10
1414: PUSH
1415: EMPTY
1416: LIST
1417: LIST
1418: LIST
1419: PUSH
1420: LD_OWVAR 67
1424: ARRAY
1425: PUSH
1426: LD_INT 0
1428: PUSH
1429: LD_INT 0
1431: PUSH
1432: LD_INT 0
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: ST_TO_ADDR
// hc_gallery :=  ;
1441: LD_ADDR_OWVAR 33
1445: PUSH
1446: LD_STRING 
1448: ST_TO_ADDR
// player_2 := CreateHuman ;
1449: LD_ADDR_EXP 18
1453: PUSH
1454: CALL_OW 44
1458: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1459: LD_ADDR_EXP 26
1463: PUSH
1464: LD_INT 5
1466: PUSH
1467: LD_INT 1
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: PUSH
1474: LD_INT 1
1476: PPUSH
1477: LD_INT 2
1479: PPUSH
1480: CALL_OW 12
1484: ARRAY
1485: ST_TO_ADDR
// hc_class := class_2 ;
1486: LD_ADDR_OWVAR 28
1490: PUSH
1491: LD_EXP 26
1495: ST_TO_ADDR
// player_3 := CreateHuman ;
1496: LD_ADDR_EXP 20
1500: PUSH
1501: CALL_OW 44
1505: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1506: LD_ADDR_EXP 26
1510: PUSH
1511: LD_INT 5
1513: PUSH
1514: LD_INT 1
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 1
1523: PPUSH
1524: LD_INT 2
1526: PPUSH
1527: CALL_OW 12
1531: ARRAY
1532: ST_TO_ADDR
// hc_class := class_2 ;
1533: LD_ADDR_OWVAR 28
1537: PUSH
1538: LD_EXP 26
1542: ST_TO_ADDR
// player_4 := CreateHuman ;
1543: LD_ADDR_EXP 21
1547: PUSH
1548: CALL_OW 44
1552: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1553: LD_ADDR_EXP 26
1557: PUSH
1558: LD_INT 5
1560: PUSH
1561: LD_INT 1
1563: PUSH
1564: EMPTY
1565: LIST
1566: LIST
1567: PUSH
1568: LD_INT 1
1570: PPUSH
1571: LD_INT 2
1573: PPUSH
1574: CALL_OW 12
1578: ARRAY
1579: ST_TO_ADDR
// hc_class := class_2 ;
1580: LD_ADDR_OWVAR 28
1584: PUSH
1585: LD_EXP 26
1589: ST_TO_ADDR
// player_5 := CreateHuman ;
1590: LD_ADDR_EXP 22
1594: PUSH
1595: CALL_OW 44
1599: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1600: LD_ADDR_EXP 26
1604: PUSH
1605: LD_INT 5
1607: PUSH
1608: LD_INT 1
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 2
1620: PPUSH
1621: CALL_OW 12
1625: ARRAY
1626: ST_TO_ADDR
// hc_class := class_2 ;
1627: LD_ADDR_OWVAR 28
1631: PUSH
1632: LD_EXP 26
1636: ST_TO_ADDR
// player_6 := CreateHuman ;
1637: LD_ADDR_EXP 23
1641: PUSH
1642: CALL_OW 44
1646: ST_TO_ADDR
// class_2 := [ class_sniper , class_soldier ] [ Rand ( 1 , 2 ) ] ;
1647: LD_ADDR_EXP 26
1651: PUSH
1652: LD_INT 5
1654: PUSH
1655: LD_INT 1
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: PUSH
1662: LD_INT 1
1664: PPUSH
1665: LD_INT 2
1667: PPUSH
1668: CALL_OW 12
1672: ARRAY
1673: ST_TO_ADDR
// hc_class := class_2 ;
1674: LD_ADDR_OWVAR 28
1678: PUSH
1679: LD_EXP 26
1683: ST_TO_ADDR
// player_7 := CreateHuman ;
1684: LD_ADDR_EXP 24
1688: PUSH
1689: CALL_OW 44
1693: ST_TO_ADDR
// PlaceUnitArea ( player_1 , spawn1 , false ) ;
1694: LD_EXP 17
1698: PPUSH
1699: LD_INT 4
1701: PPUSH
1702: LD_INT 0
1704: PPUSH
1705: CALL_OW 49
// PlaceUnitArea ( player_2 , spawn2 , false ) ;
1709: LD_EXP 18
1713: PPUSH
1714: LD_INT 5
1716: PPUSH
1717: LD_INT 0
1719: PPUSH
1720: CALL_OW 49
// PlaceUnitArea ( player , spawn4 , false ) ;
1724: LD_EXP 19
1728: PPUSH
1729: LD_INT 7
1731: PPUSH
1732: LD_INT 0
1734: PPUSH
1735: CALL_OW 49
// PlaceUnitArea ( player_3 , spawn3 , false ) ;
1739: LD_EXP 20
1743: PPUSH
1744: LD_INT 6
1746: PPUSH
1747: LD_INT 0
1749: PPUSH
1750: CALL_OW 49
// PlaceUnitArea ( player_4 , spawn5 , false ) ;
1754: LD_EXP 21
1758: PPUSH
1759: LD_INT 8
1761: PPUSH
1762: LD_INT 0
1764: PPUSH
1765: CALL_OW 49
// PlaceUnitArea ( player_5 , spawn6 , false ) ;
1769: LD_EXP 22
1773: PPUSH
1774: LD_INT 9
1776: PPUSH
1777: LD_INT 0
1779: PPUSH
1780: CALL_OW 49
// PlaceUnitArea ( player_6 , spawn7 , false ) ;
1784: LD_EXP 23
1788: PPUSH
1789: LD_INT 10
1791: PPUSH
1792: LD_INT 0
1794: PPUSH
1795: CALL_OW 49
// PlaceUnitArea ( player_7 , spawn8 , false ) ;
1799: LD_EXP 24
1803: PPUSH
1804: LD_INT 11
1806: PPUSH
1807: LD_INT 0
1809: PPUSH
1810: CALL_OW 49
// CenterNowOnUnits ( player ) ;
1814: LD_EXP 19
1818: PPUSH
1819: CALL_OW 87
// end ;
1823: LD_VAR 0 1
1827: RET
// every 0 0$01 trigger player do var i , un , tab ;
1828: LD_EXP 19
1832: IFFALSE 2161
1834: GO 1836
1836: DISABLE
1837: LD_INT 0
1839: PPUSH
1840: PPUSH
1841: PPUSH
// begin enable ;
1842: ENABLE
// tab := [ player_1 , player_2 , player_3 , player_4 , player_5 , player_6 , player_7 ] ;
1843: LD_ADDR_VAR 0 3
1847: PUSH
1848: LD_EXP 17
1852: PUSH
1853: LD_EXP 18
1857: PUSH
1858: LD_EXP 20
1862: PUSH
1863: LD_EXP 21
1867: PUSH
1868: LD_EXP 22
1872: PUSH
1873: LD_EXP 23
1877: PUSH
1878: LD_EXP 24
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: LIST
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: ST_TO_ADDR
// un := UnitFilter ( tab , [ f_lives , 250 ] ) ;
1892: LD_ADDR_VAR 0 2
1896: PUSH
1897: LD_VAR 0 3
1901: PPUSH
1902: LD_INT 24
1904: PUSH
1905: LD_INT 250
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: PPUSH
1912: CALL_OW 72
1916: ST_TO_ADDR
// for i = 1 to un do
1917: LD_ADDR_VAR 0 1
1921: PUSH
1922: DOUBLE
1923: LD_INT 1
1925: DEC
1926: ST_TO_ADDR
1927: LD_VAR 0 2
1931: PUSH
1932: FOR_TO
1933: IFFALSE 2159
// if IsLive ( un [ i ] ) and not HasTask ( un [ i ] ) then
1935: LD_VAR 0 2
1939: PUSH
1940: LD_VAR 0 1
1944: ARRAY
1945: PPUSH
1946: CALL_OW 300
1950: PUSH
1951: LD_VAR 0 2
1955: PUSH
1956: LD_VAR 0 1
1960: ARRAY
1961: PPUSH
1962: CALL_OW 314
1966: NOT
1967: AND
1968: IFFALSE 2157
// begin if GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) , un [ i ] ) > 8 then
1970: LD_INT 22
1972: PUSH
1973: LD_INT 0
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PPUSH
1980: CALL_OW 69
1984: PPUSH
1985: LD_VAR 0 2
1989: PUSH
1990: LD_VAR 0 1
1994: ARRAY
1995: PPUSH
1996: CALL_OW 74
2000: PPUSH
2001: LD_VAR 0 2
2005: PUSH
2006: LD_VAR 0 1
2010: ARRAY
2011: PPUSH
2012: CALL_OW 296
2016: PUSH
2017: LD_INT 8
2019: GREATER
2020: IFFALSE 2111
// ComMoveXY ( un [ i ] , GetX ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) ) , GetY ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) ) ) else
2022: LD_VAR 0 2
2026: PUSH
2027: LD_VAR 0 1
2031: ARRAY
2032: PPUSH
2033: LD_INT 22
2035: PUSH
2036: LD_INT 0
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PPUSH
2043: CALL_OW 69
2047: PPUSH
2048: LD_VAR 0 2
2052: PUSH
2053: LD_VAR 0 1
2057: ARRAY
2058: PPUSH
2059: CALL_OW 74
2063: PPUSH
2064: CALL_OW 250
2068: PPUSH
2069: LD_INT 22
2071: PUSH
2072: LD_INT 0
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PPUSH
2079: CALL_OW 69
2083: PPUSH
2084: LD_VAR 0 2
2088: PUSH
2089: LD_VAR 0 1
2093: ARRAY
2094: PPUSH
2095: CALL_OW 74
2099: PPUSH
2100: CALL_OW 251
2104: PPUSH
2105: CALL_OW 111
2109: GO 2157
// ComAttackUnit ( un [ i ] , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , un [ i ] ) ) ;
2111: LD_VAR 0 2
2115: PUSH
2116: LD_VAR 0 1
2120: ARRAY
2121: PPUSH
2122: LD_INT 22
2124: PUSH
2125: LD_INT 0
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: PPUSH
2132: CALL_OW 69
2136: PPUSH
2137: LD_VAR 0 2
2141: PUSH
2142: LD_VAR 0 1
2146: ARRAY
2147: PPUSH
2148: CALL_OW 74
2152: PPUSH
2153: CALL_OW 115
// end ;
2157: GO 1932
2159: POP
2160: POP
// end ; end_of_file
2161: PPOPN 3
2163: END
// on UnitGoesToRed ( un ) do begin if un = player then
2164: LD_VAR 0 1
2168: PUSH
2169: LD_EXP 19
2173: EQUAL
2174: IFFALSE 2183
// YouLost ( hunt2 ) ;
2176: LD_STRING hunt2
2178: PPUSH
2179: CALL_OW 104
// end ;
2183: PPOPN 1
2185: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var players , score , play ;
2186: LD_INT 0
2188: PPUSH
2189: PPUSH
2190: PPUSH
// begin players := [ player , player_1 , player_2 , player_3 , player_4 , player_5 , player_6 , player_7 ] ;
2191: LD_ADDR_VAR 0 4
2195: PUSH
2196: LD_EXP 19
2200: PUSH
2201: LD_EXP 17
2205: PUSH
2206: LD_EXP 18
2210: PUSH
2211: LD_EXP 20
2215: PUSH
2216: LD_EXP 21
2220: PUSH
2221: LD_EXP 22
2225: PUSH
2226: LD_EXP 23
2230: PUSH
2231: LD_EXP 24
2235: PUSH
2236: EMPTY
2237: LIST
2238: LIST
2239: LIST
2240: LIST
2241: LIST
2242: LIST
2243: LIST
2244: LIST
2245: ST_TO_ADDR
// if GetSide ( un ) = 0 and GetTag ( un ) <> - 100 then
2246: LD_VAR 0 1
2250: PPUSH
2251: CALL_OW 255
2255: PUSH
2256: LD_INT 0
2258: EQUAL
2259: PUSH
2260: LD_VAR 0 1
2264: PPUSH
2265: CALL_OW 110
2269: PUSH
2270: LD_INT 100
2272: NEG
2273: NONEQUAL
2274: AND
2275: IFFALSE 2673
// begin play := killer_unit ;
2277: LD_ADDR_VAR 0 6
2281: PUSH
2282: LD_VAR 0 3
2286: ST_TO_ADDR
// case GetClass ( un ) of 18 :
2287: LD_VAR 0 1
2291: PPUSH
2292: CALL_OW 257
2296: PUSH
2297: LD_INT 18
2299: DOUBLE
2300: EQUAL
2301: IFTRUE 2305
2303: GO 2318
2305: POP
// score := PB ; class_tiger :
2306: LD_ADDR_VAR 0 5
2310: PUSH
2311: LD_EXP 11
2315: ST_TO_ADDR
2316: GO 2424
2318: LD_INT 14
2320: DOUBLE
2321: EQUAL
2322: IFTRUE 2326
2324: GO 2339
2326: POP
// score := PT ; class_fish :
2327: LD_ADDR_VAR 0 5
2331: PUSH
2332: LD_EXP 12
2336: ST_TO_ADDR
2337: GO 2424
2339: LD_INT 20
2341: DOUBLE
2342: EQUAL
2343: IFTRUE 2347
2345: GO 2360
2347: POP
// score := PF ; 21 :
2348: LD_ADDR_VAR 0 5
2352: PUSH
2353: LD_EXP 13
2357: ST_TO_ADDR
2358: GO 2424
2360: LD_INT 21
2362: DOUBLE
2363: EQUAL
2364: IFTRUE 2368
2366: GO 2381
2368: POP
// score := PH ; 13 :
2369: LD_ADDR_VAR 0 5
2373: PUSH
2374: LD_EXP 14
2378: ST_TO_ADDR
2379: GO 2424
2381: LD_INT 13
2383: DOUBLE
2384: EQUAL
2385: IFTRUE 2389
2387: GO 2402
2389: POP
// score := PE ; class_apeman :
2390: LD_ADDR_VAR 0 5
2394: PUSH
2395: LD_EXP 10
2399: ST_TO_ADDR
2400: GO 2424
2402: LD_INT 12
2404: DOUBLE
2405: EQUAL
2406: IFTRUE 2410
2408: GO 2423
2410: POP
// score := PA ; end ;
2411: LD_ADDR_VAR 0 5
2415: PUSH
2416: LD_EXP 16
2420: ST_TO_ADDR
2421: GO 2424
2423: POP
// if GetChassis ( un ) = 31 then
2424: LD_VAR 0 1
2428: PPUSH
2429: CALL_OW 265
2433: PUSH
2434: LD_INT 31
2436: EQUAL
2437: IFFALSE 2449
// score := PM ;
2439: LD_ADDR_VAR 0 5
2443: PUSH
2444: LD_EXP 15
2448: ST_TO_ADDR
// if play = player then
2449: LD_VAR 0 6
2453: PUSH
2454: LD_EXP 19
2458: EQUAL
2459: IFFALSE 2477
// score_player := score_player + score ;
2461: LD_ADDR_EXP 28
2465: PUSH
2466: LD_EXP 28
2470: PUSH
2471: LD_VAR 0 5
2475: PLUS
2476: ST_TO_ADDR
// if play = player_1 then
2477: LD_VAR 0 6
2481: PUSH
2482: LD_EXP 17
2486: EQUAL
2487: IFFALSE 2505
// score_enemy1 := score_enemy1 + score ;
2489: LD_ADDR_EXP 29
2493: PUSH
2494: LD_EXP 29
2498: PUSH
2499: LD_VAR 0 5
2503: PLUS
2504: ST_TO_ADDR
// if play = player_2 then
2505: LD_VAR 0 6
2509: PUSH
2510: LD_EXP 18
2514: EQUAL
2515: IFFALSE 2533
// score_enemy2 := score_enemy2 + score ;
2517: LD_ADDR_EXP 30
2521: PUSH
2522: LD_EXP 30
2526: PUSH
2527: LD_VAR 0 5
2531: PLUS
2532: ST_TO_ADDR
// if play = player_3 then
2533: LD_VAR 0 6
2537: PUSH
2538: LD_EXP 20
2542: EQUAL
2543: IFFALSE 2561
// score_enemy3 := score_enemy3 + score ;
2545: LD_ADDR_EXP 31
2549: PUSH
2550: LD_EXP 31
2554: PUSH
2555: LD_VAR 0 5
2559: PLUS
2560: ST_TO_ADDR
// if play = player_4 then
2561: LD_VAR 0 6
2565: PUSH
2566: LD_EXP 21
2570: EQUAL
2571: IFFALSE 2589
// score_enemy4 := score_enemy4 + score ;
2573: LD_ADDR_EXP 32
2577: PUSH
2578: LD_EXP 32
2582: PUSH
2583: LD_VAR 0 5
2587: PLUS
2588: ST_TO_ADDR
// if play = player_5 then
2589: LD_VAR 0 6
2593: PUSH
2594: LD_EXP 22
2598: EQUAL
2599: IFFALSE 2617
// score_enemy5 := score_enemy5 + score ;
2601: LD_ADDR_EXP 33
2605: PUSH
2606: LD_EXP 33
2610: PUSH
2611: LD_VAR 0 5
2615: PLUS
2616: ST_TO_ADDR
// if play = player_6 then
2617: LD_VAR 0 6
2621: PUSH
2622: LD_EXP 23
2626: EQUAL
2627: IFFALSE 2645
// score_enemy6 := score_enemy6 + score ;
2629: LD_ADDR_EXP 34
2633: PUSH
2634: LD_EXP 34
2638: PUSH
2639: LD_VAR 0 5
2643: PLUS
2644: ST_TO_ADDR
// if play = player_7 then
2645: LD_VAR 0 6
2649: PUSH
2650: LD_EXP 24
2654: EQUAL
2655: IFFALSE 2673
// score_enemy7 := score_enemy7 + score ;
2657: LD_ADDR_EXP 35
2661: PUSH
2662: LD_EXP 35
2666: PUSH
2667: LD_VAR 0 5
2671: PLUS
2672: ST_TO_ADDR
// end ; end ;
2673: PPOPN 6
2675: END
// every 10 do
2676: GO 2678
2678: DISABLE
// begin enable ;
2679: ENABLE
// Display_Strings := [ #player1 , score_player , #player2 , score_enemy1 , #player3 , score_enemy2 , #player4 , score_enemy3 , #player5 , score_enemy4 , #player6 , score_enemy5 , #player7 , score_enemy6 , #player8 , score_enemy7 ] ;
2680: LD_ADDR_OWVAR 47
2684: PUSH
2685: LD_STRING #player1
2687: PUSH
2688: LD_EXP 28
2692: PUSH
2693: LD_STRING #player2
2695: PUSH
2696: LD_EXP 29
2700: PUSH
2701: LD_STRING #player3
2703: PUSH
2704: LD_EXP 30
2708: PUSH
2709: LD_STRING #player4
2711: PUSH
2712: LD_EXP 31
2716: PUSH
2717: LD_STRING #player5
2719: PUSH
2720: LD_EXP 32
2724: PUSH
2725: LD_STRING #player6
2727: PUSH
2728: LD_EXP 33
2732: PUSH
2733: LD_STRING #player7
2735: PUSH
2736: LD_EXP 34
2740: PUSH
2741: LD_STRING #player8
2743: PUSH
2744: LD_EXP 35
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: LIST
2753: LIST
2754: LIST
2755: LIST
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: LIST
2761: LIST
2762: LIST
2763: LIST
2764: LIST
2765: LIST
2766: ST_TO_ADDR
// end ;
2767: END
// on Contact ( s1 , s2 ) do begin if s1 = your_side and s2 > 0 then
2768: LD_VAR 0 1
2772: PUSH
2773: LD_OWVAR 2
2777: EQUAL
2778: PUSH
2779: LD_VAR 0 2
2783: PUSH
2784: LD_INT 0
2786: GREATER
2787: AND
2788: IFFALSE 2797
// YouLost ( hunt1 ) ;
2790: LD_STRING hunt1
2792: PPUSH
2793: CALL_OW 104
// end ;
2797: PPOPN 2
2799: END
// every 0 0$01 trigger FilterAllUnits ( [ f_side , 0 ] ) = 0 do
2800: LD_INT 22
2802: PUSH
2803: LD_INT 0
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: PPUSH
2810: CALL_OW 69
2814: PUSH
2815: LD_INT 0
2817: EQUAL
2818: IFFALSE 2927
2820: GO 2822
2822: DISABLE
// begin Wait ( 0 0$03 ) ;
2823: LD_INT 105
2825: PPUSH
2826: CALL_OW 67
// if score_player > score_enemy1 and score_player > score_enemy2 and score_player > score_enemy3 and score_player > score_enemy4 and score_player > score_enemy5 and score_player > score_enemy6 and score_player > score_enemy7 then
2830: LD_EXP 28
2834: PUSH
2835: LD_EXP 29
2839: GREATER
2840: PUSH
2841: LD_EXP 28
2845: PUSH
2846: LD_EXP 30
2850: GREATER
2851: AND
2852: PUSH
2853: LD_EXP 28
2857: PUSH
2858: LD_EXP 31
2862: GREATER
2863: AND
2864: PUSH
2865: LD_EXP 28
2869: PUSH
2870: LD_EXP 32
2874: GREATER
2875: AND
2876: PUSH
2877: LD_EXP 28
2881: PUSH
2882: LD_EXP 33
2886: GREATER
2887: AND
2888: PUSH
2889: LD_EXP 28
2893: PUSH
2894: LD_EXP 34
2898: GREATER
2899: AND
2900: PUSH
2901: LD_EXP 28
2905: PUSH
2906: LD_EXP 35
2910: GREATER
2911: AND
2912: IFFALSE 2920
// YouWin else
2914: CALL_OW 103
2918: GO 2927
// YouLost ( hunt3 ) ;
2920: LD_STRING hunt3
2922: PPUSH
2923: CALL_OW 104
// end ; end_of_file
2927: END
