// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 136 , 106 ) ;
   4: LD_INT 136
   6: PPUSH
   7: LD_INT 106
   9: PPUSH
  10: CALL_OW 86
// Init ;
  14: CALL 79 0 0
// InitGlobalVariables ;
  18: CALL 20995 0 0
// CreateNature ( natArea , watArea , [ 10 , 2 * Difficulty , 6 , 6 , 3 * Difficulty , 6 , 4 ] ) ;
  22: LD_INT 2
  24: PPUSH
  25: LD_INT 1
  27: PPUSH
  28: LD_INT 10
  30: PUSH
  31: LD_INT 2
  33: PUSH
  34: LD_OWVAR 67
  38: MUL
  39: PUSH
  40: LD_INT 6
  42: PUSH
  43: LD_INT 6
  45: PUSH
  46: LD_INT 3
  48: PUSH
  49: LD_OWVAR 67
  53: MUL
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: LD_INT 4
  60: PUSH
  61: EMPTY
  62: LIST
  63: LIST
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: LIST
  69: PPUSH
  70: CALL 391 0 3
// PrepareHunters ( ) ;
  74: CALL 237 0 0
// end ;
  78: END
// export debug , hunterClass , huntersAmount , animalAmount ; export points , hunters ; function Init ; begin
  79: LD_INT 0
  81: PPUSH
// debug := 0 ;
  82: LD_ADDR_EXP 1
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// if debug then
  90: LD_EXP 1
  94: IFFALSE 129
// begin FogOff ( 1 ) ;
  96: LD_INT 1
  98: PPUSH
  99: CALL_OW 344
// Difficulty := 2 ;
 103: LD_ADDR_OWVAR 67
 107: PUSH
 108: LD_INT 2
 110: ST_TO_ADDR
// hunterClass := 3 ;
 111: LD_ADDR_EXP 2
 115: PUSH
 116: LD_INT 3
 118: ST_TO_ADDR
// animalAmount := 2 ;
 119: LD_ADDR_EXP 4
 123: PUSH
 124: LD_INT 2
 126: ST_TO_ADDR
// end else
 127: GO 168
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
 129: LD_ADDR_OWVAR 67
 133: PUSH
 134: LD_INT 0
 136: PPUSH
 137: CALL_OW 426
 141: ST_TO_ADDR
// hunterClass := GetMultiplayerSetting ( 2 ) ;
 142: LD_ADDR_EXP 2
 146: PUSH
 147: LD_INT 2
 149: PPUSH
 150: CALL_OW 426
 154: ST_TO_ADDR
// animalAmount := GetMultiplayerSetting ( 1 ) ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ST_TO_ADDR
// end ; huntersAmount := [ 4 , 6 , 8 ] [ Difficulty ] ;
 168: LD_ADDR_EXP 3
 172: PUSH
 173: LD_INT 4
 175: PUSH
 176: LD_INT 6
 178: PUSH
 179: LD_INT 8
 181: PUSH
 182: EMPTY
 183: LIST
 184: LIST
 185: LIST
 186: PUSH
 187: LD_OWVAR 67
 191: ARRAY
 192: ST_TO_ADDR
// points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 193: LD_ADDR_EXP 5
 197: PUSH
 198: LD_INT 0
 200: PUSH
 201: LD_INT 0
 203: PUSH
 204: LD_INT 0
 206: PUSH
 207: LD_INT 0
 209: PUSH
 210: LD_INT 0
 212: PUSH
 213: LD_INT 0
 215: PUSH
 216: LD_INT 0
 218: PUSH
 219: LD_INT 0
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: LIST
 228: LIST
 229: LIST
 230: LIST
 231: ST_TO_ADDR
// end ;
 232: LD_VAR 0 1
 236: RET
// export function PrepareHunters ; var i , un ; begin
 237: LD_INT 0
 239: PPUSH
 240: PPUSH
 241: PPUSH
// for i := 1 to huntersAmount do
 242: LD_ADDR_VAR 0 2
 246: PUSH
 247: DOUBLE
 248: LD_INT 1
 250: DEC
 251: ST_TO_ADDR
 252: LD_EXP 3
 256: PUSH
 257: FOR_TO
 258: IFFALSE 384
// begin uc_side := i ;
 260: LD_ADDR_OWVAR 20
 264: PUSH
 265: LD_VAR 0 2
 269: ST_TO_ADDR
// uc_nation := i mod 3 + 1 ;
 270: LD_ADDR_OWVAR 21
 274: PUSH
 275: LD_VAR 0 2
 279: PUSH
 280: LD_INT 3
 282: MOD
 283: PUSH
 284: LD_INT 1
 286: PLUS
 287: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_sniper , class_desert_warior ] [ hunterClass ] , 10 - Difficulty * 2 ) ;
 288: LD_INT 0
 290: PPUSH
 291: LD_INT 1
 293: PUSH
 294: LD_INT 5
 296: PUSH
 297: LD_INT 11
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PUSH
 305: LD_EXP 2
 309: ARRAY
 310: PPUSH
 311: LD_INT 10
 313: PUSH
 314: LD_OWVAR 67
 318: PUSH
 319: LD_INT 2
 321: MUL
 322: MINUS
 323: PPUSH
 324: CALL_OW 380
// un := CreateHuman ;
 328: LD_ADDR_VAR 0 3
 332: PUSH
 333: CALL_OW 44
 337: ST_TO_ADDR
// hunters := Replace ( hunters , hunters + 1 , un ) ;
 338: LD_ADDR_EXP 6
 342: PUSH
 343: LD_EXP 6
 347: PPUSH
 348: LD_EXP 6
 352: PUSH
 353: LD_INT 1
 355: PLUS
 356: PPUSH
 357: LD_VAR 0 3
 361: PPUSH
 362: CALL_OW 1
 366: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 367: LD_VAR 0 3
 371: PPUSH
 372: LD_INT 4
 374: PPUSH
 375: LD_INT 0
 377: PPUSH
 378: CALL_OW 49
// end ;
 382: GO 257
 384: POP
 385: POP
// end ; end_of_file
 386: LD_VAR 0 1
 390: RET
// export function CreateNature ( area , waterArea , numbers ) ; var i , j , classes , waterClass ; begin
 391: LD_INT 0
 393: PPUSH
 394: PPUSH
 395: PPUSH
 396: PPUSH
 397: PPUSH
// uc_side = 0 ;
 398: LD_ADDR_OWVAR 20
 402: PUSH
 403: LD_INT 0
 405: ST_TO_ADDR
// uc_nation = 0 ;
 406: LD_ADDR_OWVAR 21
 410: PUSH
 411: LD_INT 0
 413: ST_TO_ADDR
// classes := [ class_apeman , class_apeman_soldier , class_baggie , class_phororhacos , class_tiger , class_horse ] ;
 414: LD_ADDR_VAR 0 7
 418: PUSH
 419: LD_INT 12
 421: PUSH
 422: LD_INT 15
 424: PUSH
 425: LD_INT 13
 427: PUSH
 428: LD_INT 18
 430: PUSH
 431: LD_INT 14
 433: PUSH
 434: LD_EXP 94
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: LIST
 443: LIST
 444: LIST
 445: LIST
 446: ST_TO_ADDR
// waterClass := [ class_fish ] ;
 447: LD_ADDR_VAR 0 8
 451: PUSH
 452: LD_INT 20
 454: PUSH
 455: EMPTY
 456: LIST
 457: ST_TO_ADDR
// InitHc_All ( ) ;
 458: CALL_OW 584
// for i := 1 to numbers - 2 do
 462: LD_ADDR_VAR 0 5
 466: PUSH
 467: DOUBLE
 468: LD_INT 1
 470: DEC
 471: ST_TO_ADDR
 472: LD_VAR 0 3
 476: PUSH
 477: LD_INT 2
 479: MINUS
 480: PUSH
 481: FOR_TO
 482: IFFALSE 623
// begin if numbers [ i ] = 0 then
 484: LD_VAR 0 3
 488: PUSH
 489: LD_VAR 0 5
 493: ARRAY
 494: PUSH
 495: LD_INT 0
 497: EQUAL
 498: IFFALSE 502
// continue ;
 500: GO 481
// hc_class := classes [ i ] ;
 502: LD_ADDR_OWVAR 28
 506: PUSH
 507: LD_VAR 0 7
 511: PUSH
 512: LD_VAR 0 5
 516: ARRAY
 517: ST_TO_ADDR
// hc_attr := [ rand ( 8 , 12 ) , rand ( 8 , 12 ) ] ;
 518: LD_ADDR_OWVAR 29
 522: PUSH
 523: LD_INT 8
 525: PPUSH
 526: LD_INT 12
 528: PPUSH
 529: CALL_OW 12
 533: PUSH
 534: LD_INT 8
 536: PPUSH
 537: LD_INT 12
 539: PPUSH
 540: CALL_OW 12
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) + Difficulty * 5 ;
 549: LD_ADDR_OWVAR 35
 553: PUSH
 554: LD_INT 5
 556: NEG
 557: PPUSH
 558: LD_INT 5
 560: PPUSH
 561: CALL_OW 12
 565: PUSH
 566: LD_OWVAR 67
 570: PUSH
 571: LD_INT 5
 573: MUL
 574: PLUS
 575: ST_TO_ADDR
// for j := 1 to numbers [ i ] do
 576: LD_ADDR_VAR 0 6
 580: PUSH
 581: DOUBLE
 582: LD_INT 1
 584: DEC
 585: ST_TO_ADDR
 586: LD_VAR 0 3
 590: PUSH
 591: LD_VAR 0 5
 595: ARRAY
 596: PUSH
 597: FOR_TO
 598: IFFALSE 619
// PlaceUnitArea ( CreateHuman , area , false ) ;
 600: CALL_OW 44
 604: PPUSH
 605: LD_VAR 0 1
 609: PPUSH
 610: LD_INT 0
 612: PPUSH
 613: CALL_OW 49
 617: GO 597
 619: POP
 620: POP
// end ;
 621: GO 481
 623: POP
 624: POP
// if not waterArea then
 625: LD_VAR 0 2
 629: NOT
 630: IFFALSE 634
// exit ;
 632: GO 714
// hc_class := waterClass [ 1 ] ;
 634: LD_ADDR_OWVAR 28
 638: PUSH
 639: LD_VAR 0 8
 643: PUSH
 644: LD_INT 1
 646: ARRAY
 647: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 648: LD_ADDR_OWVAR 29
 652: PUSH
 653: LD_INT 10
 655: PUSH
 656: LD_INT 10
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: ST_TO_ADDR
// hc_agressivity := 0 ;
 663: LD_ADDR_OWVAR 35
 667: PUSH
 668: LD_INT 0
 670: ST_TO_ADDR
// for j := 1 to numbers [ 7 ] do
 671: LD_ADDR_VAR 0 6
 675: PUSH
 676: DOUBLE
 677: LD_INT 1
 679: DEC
 680: ST_TO_ADDR
 681: LD_VAR 0 3
 685: PUSH
 686: LD_INT 7
 688: ARRAY
 689: PUSH
 690: FOR_TO
 691: IFFALSE 712
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 693: CALL_OW 44
 697: PPUSH
 698: LD_VAR 0 2
 702: PPUSH
 703: LD_INT 0
 705: PPUSH
 706: CALL_OW 49
 710: GO 690
 712: POP
 713: POP
// end ; end_of_file
 714: LD_VAR 0 4
 718: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do var i ;
 719: LD_INT 22
 721: PUSH
 722: LD_INT 0
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: PUSH
 729: LD_INT 25
 731: PUSH
 732: LD_INT 15
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PPUSH
 743: CALL_OW 69
 747: IFFALSE 853
 749: GO 751
 751: DISABLE
 752: LD_INT 0
 754: PPUSH
// begin enable ;
 755: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do
 756: LD_ADDR_VAR 0 1
 760: PUSH
 761: LD_INT 22
 763: PUSH
 764: LD_INT 0
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: PUSH
 771: LD_INT 25
 773: PUSH
 774: LD_INT 15
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: PUSH
 781: EMPTY
 782: LIST
 783: LIST
 784: PPUSH
 785: CALL_OW 69
 789: PUSH
 790: FOR_IN
 791: IFFALSE 851
// if GetLives ( i ) < 1000 then
 793: LD_VAR 0 1
 797: PPUSH
 798: CALL_OW 256
 802: PUSH
 803: LD_INT 1000
 805: LESS
 806: IFFALSE 849
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , i ) ) ;
 808: LD_VAR 0 1
 812: PPUSH
 813: LD_INT 3
 815: PUSH
 816: LD_INT 22
 818: PUSH
 819: LD_INT 0
 821: PUSH
 822: EMPTY
 823: LIST
 824: LIST
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: PPUSH
 830: CALL_OW 69
 834: PPUSH
 835: LD_VAR 0 1
 839: PPUSH
 840: CALL_OW 74
 844: PPUSH
 845: CALL_OW 115
 849: GO 790
 851: POP
 852: POP
// end ;
 853: PPOPN 1
 855: END
// every 3 do var i , enemy , x , y , d ;
 856: GO 858
 858: DISABLE
 859: LD_INT 0
 861: PPUSH
 862: PPUSH
 863: PPUSH
 864: PPUSH
 865: PPUSH
// begin enable ;
 866: ENABLE
// for i := 2 to huntersAmount do
 867: LD_ADDR_VAR 0 1
 871: PUSH
 872: DOUBLE
 873: LD_INT 2
 875: DEC
 876: ST_TO_ADDR
 877: LD_EXP 3
 881: PUSH
 882: FOR_TO
 883: IFFALSE 1222
// begin if not HasTask ( hunters [ i ] ) then
 885: LD_EXP 6
 889: PUSH
 890: LD_VAR 0 1
 894: ARRAY
 895: PPUSH
 896: CALL_OW 314
 900: NOT
 901: IFFALSE 1220
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , hunters [ i ] ) ;
 903: LD_ADDR_VAR 0 2
 907: PUSH
 908: LD_INT 22
 910: PUSH
 911: LD_INT 0
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: PPUSH
 918: CALL_OW 69
 922: PPUSH
 923: LD_EXP 6
 927: PUSH
 928: LD_VAR 0 1
 932: ARRAY
 933: PPUSH
 934: CALL_OW 74
 938: ST_TO_ADDR
// if not enemy then
 939: LD_VAR 0 2
 943: NOT
 944: IFFALSE 948
// continue ;
 946: GO 882
// if GetDistUnits ( hunters [ i ] , enemy ) < 17 then
 948: LD_EXP 6
 952: PUSH
 953: LD_VAR 0 1
 957: ARRAY
 958: PPUSH
 959: LD_VAR 0 2
 963: PPUSH
 964: CALL_OW 296
 968: PUSH
 969: LD_INT 17
 971: LESS
 972: IFFALSE 1075
// begin if GetClass ( hunters [ i ] ) = class_desert_warior then
 974: LD_EXP 6
 978: PUSH
 979: LD_VAR 0 1
 983: ARRAY
 984: PPUSH
 985: CALL_OW 257
 989: PUSH
 990: LD_INT 11
 992: EQUAL
 993: IFFALSE 1053
// if GetClass ( enemy ) in [ class_frog , class_fish , class_baggie ] then
 995: LD_VAR 0 2
 999: PPUSH
1000: CALL_OW 257
1004: PUSH
1005: LD_INT 19
1007: PUSH
1008: LD_INT 20
1010: PUSH
1011: LD_INT 13
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: IN
1019: IFFALSE 1038
// ComCarabine ( hunters [ i ] ) else
1021: LD_EXP 6
1025: PUSH
1026: LD_VAR 0 1
1030: ARRAY
1031: PPUSH
1032: CALL_OW 162
1036: GO 1053
// ComSabre ( hunters [ i ] ) ;
1038: LD_EXP 6
1042: PUSH
1043: LD_VAR 0 1
1047: ARRAY
1048: PPUSH
1049: CALL_OW 163
// ComAttackUnit ( hunters [ i ] , enemy ) ;
1053: LD_EXP 6
1057: PUSH
1058: LD_VAR 0 1
1062: ARRAY
1063: PPUSH
1064: LD_VAR 0 2
1068: PPUSH
1069: CALL_OW 115
// end else
1073: GO 1220
// begin d := rand ( 0 , 5 ) ;
1075: LD_ADDR_VAR 0 5
1079: PUSH
1080: LD_INT 0
1082: PPUSH
1083: LD_INT 5
1085: PPUSH
1086: CALL_OW 12
1090: ST_TO_ADDR
// x := ShiftX ( GetX ( hunters [ i ] ) , d , 8 ) ;
1091: LD_ADDR_VAR 0 3
1095: PUSH
1096: LD_EXP 6
1100: PUSH
1101: LD_VAR 0 1
1105: ARRAY
1106: PPUSH
1107: CALL_OW 250
1111: PPUSH
1112: LD_VAR 0 5
1116: PPUSH
1117: LD_INT 8
1119: PPUSH
1120: CALL_OW 272
1124: ST_TO_ADDR
// y := ShiftY ( GetY ( hunters [ i ] ) , d , 8 ) ;
1125: LD_ADDR_VAR 0 4
1129: PUSH
1130: LD_EXP 6
1134: PUSH
1135: LD_VAR 0 1
1139: ARRAY
1140: PPUSH
1141: CALL_OW 251
1145: PPUSH
1146: LD_VAR 0 5
1150: PPUSH
1151: LD_INT 8
1153: PPUSH
1154: CALL_OW 273
1158: ST_TO_ADDR
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
1159: LD_VAR 0 3
1163: PPUSH
1164: LD_VAR 0 4
1168: PPUSH
1169: CALL_OW 488
1173: PUSH
1174: LD_VAR 0 3
1178: PPUSH
1179: LD_VAR 0 4
1183: PPUSH
1184: CALL_OW 428
1188: PUSH
1189: LD_INT 0
1191: EQUAL
1192: AND
1193: IFFALSE 1220
// ComMoveXY ( hunters [ i ] , x , y ) ;
1195: LD_EXP 6
1199: PUSH
1200: LD_VAR 0 1
1204: ARRAY
1205: PPUSH
1206: LD_VAR 0 3
1210: PPUSH
1211: LD_VAR 0 4
1215: PPUSH
1216: CALL_OW 111
// end ; end ; end ;
1220: GO 882
1222: POP
1223: POP
// end ; end_of_file
1224: PPOPN 5
1226: END
// on UnitGoesToRed ( un ) do var i ;
1227: LD_INT 0
1229: PPUSH
// begin if GetSide ( un ) = 1 then
1230: LD_VAR 0 1
1234: PPUSH
1235: CALL_OW 255
1239: PUSH
1240: LD_INT 1
1242: EQUAL
1243: IFFALSE 1252
// YouLost ( hunt2 ) ;
1245: LD_STRING hunt2
1247: PPUSH
1248: CALL_OW 104
// if GetSide ( un ) > 1 then
1252: LD_VAR 0 1
1256: PPUSH
1257: CALL_OW 255
1261: PUSH
1262: LD_INT 1
1264: GREATER
1265: IFFALSE 1318
// begin for i := 1 to 6 do
1267: LD_ADDR_VAR 0 2
1271: PUSH
1272: DOUBLE
1273: LD_INT 1
1275: DEC
1276: ST_TO_ADDR
1277: LD_INT 6
1279: PUSH
1280: FOR_TO
1281: IFFALSE 1304
// begin wait ( 0 0$1 ) ;
1283: LD_INT 35
1285: PPUSH
1286: CALL_OW 67
// SetLives ( un , 249 ) ;
1290: LD_VAR 0 1
1294: PPUSH
1295: LD_INT 249
1297: PPUSH
1298: CALL_OW 234
// end ;
1302: GO 1280
1304: POP
1305: POP
// SetLives ( un , 1000 ) ;
1306: LD_VAR 0 1
1310: PPUSH
1311: LD_INT 1000
1313: PPUSH
1314: CALL_OW 234
// end ; end ;
1318: PPOPN 2
1320: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 > 1 then
1321: LD_VAR 0 1
1325: PUSH
1326: LD_INT 1
1328: EQUAL
1329: PUSH
1330: LD_VAR 0 2
1334: PUSH
1335: LD_INT 1
1337: GREATER
1338: AND
1339: IFFALSE 1348
// YouLost ( hunt1 ) ;
1341: LD_STRING hunt1
1343: PPUSH
1344: CALL_OW 104
// end ;
1348: PPOPN 2
1350: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var point ;
1351: LD_INT 0
1353: PPUSH
// begin point := 0 ;
1354: LD_ADDR_VAR 0 4
1358: PUSH
1359: LD_INT 0
1361: ST_TO_ADDR
// case GetClass ( un ) of class_fish :
1362: LD_VAR 0 1
1366: PPUSH
1367: CALL_OW 257
1371: PUSH
1372: LD_INT 20
1374: DOUBLE
1375: EQUAL
1376: IFTRUE 1380
1378: GO 1391
1380: POP
// point := 10 ; class_horse :
1381: LD_ADDR_VAR 0 4
1385: PUSH
1386: LD_INT 10
1388: ST_TO_ADDR
1389: GO 1527
1391: LD_EXP 94
1395: DOUBLE
1396: EQUAL
1397: IFTRUE 1401
1399: GO 1412
1401: POP
// point := 10 ; class_baggie :
1402: LD_ADDR_VAR 0 4
1406: PUSH
1407: LD_INT 10
1409: ST_TO_ADDR
1410: GO 1527
1412: LD_INT 13
1414: DOUBLE
1415: EQUAL
1416: IFTRUE 1420
1418: GO 1431
1420: POP
// point := 5 ; class_phororhacos :
1421: LD_ADDR_VAR 0 4
1425: PUSH
1426: LD_INT 5
1428: ST_TO_ADDR
1429: GO 1527
1431: LD_INT 18
1433: DOUBLE
1434: EQUAL
1435: IFTRUE 1439
1437: GO 1450
1439: POP
// point := 10 ; class_tiger :
1440: LD_ADDR_VAR 0 4
1444: PUSH
1445: LD_INT 10
1447: ST_TO_ADDR
1448: GO 1527
1450: LD_INT 14
1452: DOUBLE
1453: EQUAL
1454: IFTRUE 1458
1456: GO 1469
1458: POP
// point := 20 ; class_apeman :
1459: LD_ADDR_VAR 0 4
1463: PUSH
1464: LD_INT 20
1466: ST_TO_ADDR
1467: GO 1527
1469: LD_INT 12
1471: DOUBLE
1472: EQUAL
1473: IFTRUE 1477
1475: GO 1488
1477: POP
// point := 30 ; class_apeman_soldier :
1478: LD_ADDR_VAR 0 4
1482: PUSH
1483: LD_INT 30
1485: ST_TO_ADDR
1486: GO 1527
1488: LD_INT 15
1490: DOUBLE
1491: EQUAL
1492: IFTRUE 1496
1494: GO 1507
1496: POP
// point := 50 ; class_frog :
1497: LD_ADDR_VAR 0 4
1501: PUSH
1502: LD_INT 50
1504: ST_TO_ADDR
1505: GO 1527
1507: LD_INT 19
1509: DOUBLE
1510: EQUAL
1511: IFTRUE 1515
1513: GO 1526
1515: POP
// point := 10 ; end ;
1516: LD_ADDR_VAR 0 4
1520: PUSH
1521: LD_INT 10
1523: ST_TO_ADDR
1524: GO 1527
1526: POP
// if point then
1527: LD_VAR 0 4
1531: IFFALSE 1570
// points := Replace ( points , killer_side , points [ killer_side ] + point ) ;
1533: LD_ADDR_EXP 5
1537: PUSH
1538: LD_EXP 5
1542: PPUSH
1543: LD_VAR 0 2
1547: PPUSH
1548: LD_EXP 5
1552: PUSH
1553: LD_VAR 0 2
1557: ARRAY
1558: PUSH
1559: LD_VAR 0 4
1563: PLUS
1564: PPUSH
1565: CALL_OW 1
1569: ST_TO_ADDR
// end ;
1570: PPOPN 4
1572: END
// every 0 0$20 trigger FilterAllUnits ( [ f_side , 0 ] ) < 10 do
1573: LD_INT 22
1575: PUSH
1576: LD_INT 0
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: PPUSH
1583: CALL_OW 69
1587: PUSH
1588: LD_INT 10
1590: LESS
1591: IFFALSE 1693
1593: GO 1595
1595: DISABLE
// begin enable ;
1596: ENABLE
// CreateNature ( natArea , watArea , [ rand ( 0 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 2 , 4 ) , rand ( 2 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) ] ) ;
1597: LD_INT 2
1599: PPUSH
1600: LD_INT 1
1602: PPUSH
1603: LD_INT 0
1605: PPUSH
1606: LD_INT 4
1608: PPUSH
1609: CALL_OW 12
1613: PUSH
1614: LD_INT 0
1616: PPUSH
1617: LD_INT 2
1619: PPUSH
1620: CALL_OW 12
1624: PUSH
1625: LD_INT 0
1627: PPUSH
1628: LD_INT 4
1630: PPUSH
1631: CALL_OW 12
1635: PUSH
1636: LD_INT 2
1638: PPUSH
1639: LD_INT 4
1641: PPUSH
1642: CALL_OW 12
1646: PUSH
1647: LD_INT 2
1649: PPUSH
1650: LD_INT 4
1652: PPUSH
1653: CALL_OW 12
1657: PUSH
1658: LD_INT 0
1660: PPUSH
1661: LD_INT 2
1663: PPUSH
1664: CALL_OW 12
1668: PUSH
1669: LD_INT 0
1671: PPUSH
1672: LD_INT 4
1674: PPUSH
1675: CALL_OW 12
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: LIST
1688: PPUSH
1689: CALL 391 0 3
// end ;
1693: END
// every 0 0$1 do var i ;
1694: GO 1696
1696: DISABLE
1697: LD_INT 0
1699: PPUSH
// begin enable ;
1700: ENABLE
// display_strings := [ ] ;
1701: LD_ADDR_OWVAR 47
1705: PUSH
1706: EMPTY
1707: ST_TO_ADDR
// for i := 1 to huntersAmount do
1708: LD_ADDR_VAR 0 1
1712: PUSH
1713: DOUBLE
1714: LD_INT 1
1716: DEC
1717: ST_TO_ADDR
1718: LD_EXP 3
1722: PUSH
1723: FOR_TO
1724: IFFALSE 1858
// begin display_strings := display_strings ^ [ #player & i , i , points [ i ] ] ;
1726: LD_ADDR_OWVAR 47
1730: PUSH
1731: LD_OWVAR 47
1735: PUSH
1736: LD_STRING #player
1738: PUSH
1739: LD_VAR 0 1
1743: STR
1744: PUSH
1745: LD_VAR 0 1
1749: PUSH
1750: LD_EXP 5
1754: PUSH
1755: LD_VAR 0 1
1759: ARRAY
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: LIST
1765: ADD
1766: ST_TO_ADDR
// if points [ i ] >= [ 750 , 1250 , 2000 ] [ Difficulty ] then
1767: LD_EXP 5
1771: PUSH
1772: LD_VAR 0 1
1776: ARRAY
1777: PUSH
1778: LD_INT 750
1780: PUSH
1781: LD_INT 1250
1783: PUSH
1784: LD_INT 2000
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: LIST
1791: PUSH
1792: LD_OWVAR 67
1796: ARRAY
1797: GREATEREQUAL
1798: IFFALSE 1856
// begin if i = 1 then
1800: LD_VAR 0 1
1804: PUSH
1805: LD_INT 1
1807: EQUAL
1808: IFFALSE 1849
// begin DialogueOn ;
1810: CALL_OW 6
// SetAchievement ( ACH_HUNT ) ;
1814: LD_STRING ACH_HUNT
1816: PPUSH
1817: CALL_OW 543
// display_strings := [ #hunting-win ] ;
1821: LD_ADDR_OWVAR 47
1825: PUSH
1826: LD_STRING #hunting-win
1828: PUSH
1829: EMPTY
1830: LIST
1831: ST_TO_ADDR
// dwait ( 0 0$5 ) ;
1832: LD_INT 175
1834: PPUSH
1835: CALL_OW 68
// YouWin ;
1839: CALL_OW 103
// DialogueOff ;
1843: CALL_OW 7
// end else
1847: GO 1856
// YouLost ( hunt3 ) ;
1849: LD_STRING hunt3
1851: PPUSH
1852: CALL_OW 104
// end ; end ;
1856: GO 1723
1858: POP
1859: POP
// end ; end_of_file end_of_file
1860: PPOPN 1
1862: END
// every 0 0$1 do
1863: GO 1865
1865: DISABLE
// begin enable ;
1866: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1867: LD_STRING updateTimer(
1869: PUSH
1870: LD_OWVAR 1
1874: STR
1875: PUSH
1876: LD_STRING );
1878: STR
1879: PPUSH
1880: CALL_OW 559
// end ;
1884: END
// on MapStart ( p ) do begin if streamModeActive then
1885: LD_EXP 7
1889: IFFALSE 1898
// DefineStreamItems ( true ) ;
1891: LD_INT 1
1893: PPUSH
1894: CALL 3546 0 1
// UpdateFactoryWaypoints ( ) ;
1898: CALL 17293 0 0
// end ;
1902: PPOPN 1
1904: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
1905: LD_INT 0
1907: PPUSH
// if p2 = 100 then
1908: LD_VAR 0 2
1912: PUSH
1913: LD_INT 100
1915: EQUAL
1916: IFFALSE 2919
// begin if not StreamModeActive then
1918: LD_EXP 7
1922: NOT
1923: IFFALSE 1933
// StreamModeActive := true ;
1925: LD_ADDR_EXP 7
1929: PUSH
1930: LD_INT 1
1932: ST_TO_ADDR
// if p3 = 0 then
1933: LD_VAR 0 3
1937: PUSH
1938: LD_INT 0
1940: EQUAL
1941: IFFALSE 1947
// InitStreamMode ;
1943: CALL 3082 0 0
// if p3 = 1 then
1947: LD_VAR 0 3
1951: PUSH
1952: LD_INT 1
1954: EQUAL
1955: IFFALSE 1965
// sRocket := true ;
1957: LD_ADDR_EXP 12
1961: PUSH
1962: LD_INT 1
1964: ST_TO_ADDR
// if p3 = 2 then
1965: LD_VAR 0 3
1969: PUSH
1970: LD_INT 2
1972: EQUAL
1973: IFFALSE 1983
// sSpeed := true ;
1975: LD_ADDR_EXP 11
1979: PUSH
1980: LD_INT 1
1982: ST_TO_ADDR
// if p3 = 3 then
1983: LD_VAR 0 3
1987: PUSH
1988: LD_INT 3
1990: EQUAL
1991: IFFALSE 2001
// sEngine := true ;
1993: LD_ADDR_EXP 13
1997: PUSH
1998: LD_INT 1
2000: ST_TO_ADDR
// if p3 = 4 then
2001: LD_VAR 0 3
2005: PUSH
2006: LD_INT 4
2008: EQUAL
2009: IFFALSE 2019
// sSpec := true ;
2011: LD_ADDR_EXP 10
2015: PUSH
2016: LD_INT 1
2018: ST_TO_ADDR
// if p3 = 5 then
2019: LD_VAR 0 3
2023: PUSH
2024: LD_INT 5
2026: EQUAL
2027: IFFALSE 2037
// sLevel := true ;
2029: LD_ADDR_EXP 14
2033: PUSH
2034: LD_INT 1
2036: ST_TO_ADDR
// if p3 = 6 then
2037: LD_VAR 0 3
2041: PUSH
2042: LD_INT 6
2044: EQUAL
2045: IFFALSE 2055
// sArmoury := true ;
2047: LD_ADDR_EXP 15
2051: PUSH
2052: LD_INT 1
2054: ST_TO_ADDR
// if p3 = 7 then
2055: LD_VAR 0 3
2059: PUSH
2060: LD_INT 7
2062: EQUAL
2063: IFFALSE 2073
// sRadar := true ;
2065: LD_ADDR_EXP 16
2069: PUSH
2070: LD_INT 1
2072: ST_TO_ADDR
// if p3 = 8 then
2073: LD_VAR 0 3
2077: PUSH
2078: LD_INT 8
2080: EQUAL
2081: IFFALSE 2091
// sBunker := true ;
2083: LD_ADDR_EXP 17
2087: PUSH
2088: LD_INT 1
2090: ST_TO_ADDR
// if p3 = 9 then
2091: LD_VAR 0 3
2095: PUSH
2096: LD_INT 9
2098: EQUAL
2099: IFFALSE 2109
// sHack := true ;
2101: LD_ADDR_EXP 18
2105: PUSH
2106: LD_INT 1
2108: ST_TO_ADDR
// if p3 = 10 then
2109: LD_VAR 0 3
2113: PUSH
2114: LD_INT 10
2116: EQUAL
2117: IFFALSE 2127
// sFire := true ;
2119: LD_ADDR_EXP 19
2123: PUSH
2124: LD_INT 1
2126: ST_TO_ADDR
// if p3 = 11 then
2127: LD_VAR 0 3
2131: PUSH
2132: LD_INT 11
2134: EQUAL
2135: IFFALSE 2145
// sRefresh := true ;
2137: LD_ADDR_EXP 20
2141: PUSH
2142: LD_INT 1
2144: ST_TO_ADDR
// if p3 = 12 then
2145: LD_VAR 0 3
2149: PUSH
2150: LD_INT 12
2152: EQUAL
2153: IFFALSE 2163
// sExp := true ;
2155: LD_ADDR_EXP 21
2159: PUSH
2160: LD_INT 1
2162: ST_TO_ADDR
// if p3 = 13 then
2163: LD_VAR 0 3
2167: PUSH
2168: LD_INT 13
2170: EQUAL
2171: IFFALSE 2181
// sDepot := true ;
2173: LD_ADDR_EXP 22
2177: PUSH
2178: LD_INT 1
2180: ST_TO_ADDR
// if p3 = 14 then
2181: LD_VAR 0 3
2185: PUSH
2186: LD_INT 14
2188: EQUAL
2189: IFFALSE 2199
// sFlag := true ;
2191: LD_ADDR_EXP 23
2195: PUSH
2196: LD_INT 1
2198: ST_TO_ADDR
// if p3 = 15 then
2199: LD_VAR 0 3
2203: PUSH
2204: LD_INT 15
2206: EQUAL
2207: IFFALSE 2217
// sKamikadze := true ;
2209: LD_ADDR_EXP 31
2213: PUSH
2214: LD_INT 1
2216: ST_TO_ADDR
// if p3 = 16 then
2217: LD_VAR 0 3
2221: PUSH
2222: LD_INT 16
2224: EQUAL
2225: IFFALSE 2235
// sTroll := true ;
2227: LD_ADDR_EXP 32
2231: PUSH
2232: LD_INT 1
2234: ST_TO_ADDR
// if p3 = 17 then
2235: LD_VAR 0 3
2239: PUSH
2240: LD_INT 17
2242: EQUAL
2243: IFFALSE 2253
// sSlow := true ;
2245: LD_ADDR_EXP 33
2249: PUSH
2250: LD_INT 1
2252: ST_TO_ADDR
// if p3 = 18 then
2253: LD_VAR 0 3
2257: PUSH
2258: LD_INT 18
2260: EQUAL
2261: IFFALSE 2271
// sLack := true ;
2263: LD_ADDR_EXP 34
2267: PUSH
2268: LD_INT 1
2270: ST_TO_ADDR
// if p3 = 19 then
2271: LD_VAR 0 3
2275: PUSH
2276: LD_INT 19
2278: EQUAL
2279: IFFALSE 2289
// sTank := true ;
2281: LD_ADDR_EXP 36
2285: PUSH
2286: LD_INT 1
2288: ST_TO_ADDR
// if p3 = 20 then
2289: LD_VAR 0 3
2293: PUSH
2294: LD_INT 20
2296: EQUAL
2297: IFFALSE 2307
// sRemote := true ;
2299: LD_ADDR_EXP 37
2303: PUSH
2304: LD_INT 1
2306: ST_TO_ADDR
// if p3 = 21 then
2307: LD_VAR 0 3
2311: PUSH
2312: LD_INT 21
2314: EQUAL
2315: IFFALSE 2325
// sPowell := true ;
2317: LD_ADDR_EXP 38
2321: PUSH
2322: LD_INT 1
2324: ST_TO_ADDR
// if p3 = 22 then
2325: LD_VAR 0 3
2329: PUSH
2330: LD_INT 22
2332: EQUAL
2333: IFFALSE 2343
// sTeleport := true ;
2335: LD_ADDR_EXP 41
2339: PUSH
2340: LD_INT 1
2342: ST_TO_ADDR
// if p3 = 23 then
2343: LD_VAR 0 3
2347: PUSH
2348: LD_INT 23
2350: EQUAL
2351: IFFALSE 2361
// sOilTower := true ;
2353: LD_ADDR_EXP 43
2357: PUSH
2358: LD_INT 1
2360: ST_TO_ADDR
// if p3 = 24 then
2361: LD_VAR 0 3
2365: PUSH
2366: LD_INT 24
2368: EQUAL
2369: IFFALSE 2379
// sShovel := true ;
2371: LD_ADDR_EXP 44
2375: PUSH
2376: LD_INT 1
2378: ST_TO_ADDR
// if p3 = 25 then
2379: LD_VAR 0 3
2383: PUSH
2384: LD_INT 25
2386: EQUAL
2387: IFFALSE 2397
// sSheik := true ;
2389: LD_ADDR_EXP 45
2393: PUSH
2394: LD_INT 1
2396: ST_TO_ADDR
// if p3 = 26 then
2397: LD_VAR 0 3
2401: PUSH
2402: LD_INT 26
2404: EQUAL
2405: IFFALSE 2415
// sEarthquake := true ;
2407: LD_ADDR_EXP 47
2411: PUSH
2412: LD_INT 1
2414: ST_TO_ADDR
// if p3 = 27 then
2415: LD_VAR 0 3
2419: PUSH
2420: LD_INT 27
2422: EQUAL
2423: IFFALSE 2433
// sAI := true ;
2425: LD_ADDR_EXP 48
2429: PUSH
2430: LD_INT 1
2432: ST_TO_ADDR
// if p3 = 28 then
2433: LD_VAR 0 3
2437: PUSH
2438: LD_INT 28
2440: EQUAL
2441: IFFALSE 2451
// sCargo := true ;
2443: LD_ADDR_EXP 51
2447: PUSH
2448: LD_INT 1
2450: ST_TO_ADDR
// if p3 = 29 then
2451: LD_VAR 0 3
2455: PUSH
2456: LD_INT 29
2458: EQUAL
2459: IFFALSE 2469
// sDLaser := true ;
2461: LD_ADDR_EXP 52
2465: PUSH
2466: LD_INT 1
2468: ST_TO_ADDR
// if p3 = 30 then
2469: LD_VAR 0 3
2473: PUSH
2474: LD_INT 30
2476: EQUAL
2477: IFFALSE 2487
// sExchange := true ;
2479: LD_ADDR_EXP 53
2483: PUSH
2484: LD_INT 1
2486: ST_TO_ADDR
// if p3 = 31 then
2487: LD_VAR 0 3
2491: PUSH
2492: LD_INT 31
2494: EQUAL
2495: IFFALSE 2505
// sFac := true ;
2497: LD_ADDR_EXP 54
2501: PUSH
2502: LD_INT 1
2504: ST_TO_ADDR
// if p3 = 32 then
2505: LD_VAR 0 3
2509: PUSH
2510: LD_INT 32
2512: EQUAL
2513: IFFALSE 2523
// sPower := true ;
2515: LD_ADDR_EXP 55
2519: PUSH
2520: LD_INT 1
2522: ST_TO_ADDR
// if p3 = 33 then
2523: LD_VAR 0 3
2527: PUSH
2528: LD_INT 33
2530: EQUAL
2531: IFFALSE 2541
// sRandom := true ;
2533: LD_ADDR_EXP 56
2537: PUSH
2538: LD_INT 1
2540: ST_TO_ADDR
// if p3 = 34 then
2541: LD_VAR 0 3
2545: PUSH
2546: LD_INT 34
2548: EQUAL
2549: IFFALSE 2559
// sShield := true ;
2551: LD_ADDR_EXP 57
2555: PUSH
2556: LD_INT 1
2558: ST_TO_ADDR
// if p3 = 35 then
2559: LD_VAR 0 3
2563: PUSH
2564: LD_INT 35
2566: EQUAL
2567: IFFALSE 2577
// sTime := true ;
2569: LD_ADDR_EXP 58
2573: PUSH
2574: LD_INT 1
2576: ST_TO_ADDR
// if p3 = 36 then
2577: LD_VAR 0 3
2581: PUSH
2582: LD_INT 36
2584: EQUAL
2585: IFFALSE 2595
// sTools := true ;
2587: LD_ADDR_EXP 59
2591: PUSH
2592: LD_INT 1
2594: ST_TO_ADDR
// if p3 = 101 then
2595: LD_VAR 0 3
2599: PUSH
2600: LD_INT 101
2602: EQUAL
2603: IFFALSE 2613
// sSold := true ;
2605: LD_ADDR_EXP 24
2609: PUSH
2610: LD_INT 1
2612: ST_TO_ADDR
// if p3 = 102 then
2613: LD_VAR 0 3
2617: PUSH
2618: LD_INT 102
2620: EQUAL
2621: IFFALSE 2631
// sDiff := true ;
2623: LD_ADDR_EXP 25
2627: PUSH
2628: LD_INT 1
2630: ST_TO_ADDR
// if p3 = 103 then
2631: LD_VAR 0 3
2635: PUSH
2636: LD_INT 103
2638: EQUAL
2639: IFFALSE 2649
// sFog := true ;
2641: LD_ADDR_EXP 28
2645: PUSH
2646: LD_INT 1
2648: ST_TO_ADDR
// if p3 = 104 then
2649: LD_VAR 0 3
2653: PUSH
2654: LD_INT 104
2656: EQUAL
2657: IFFALSE 2667
// sReset := true ;
2659: LD_ADDR_EXP 29
2663: PUSH
2664: LD_INT 1
2666: ST_TO_ADDR
// if p3 = 105 then
2667: LD_VAR 0 3
2671: PUSH
2672: LD_INT 105
2674: EQUAL
2675: IFFALSE 2685
// sSun := true ;
2677: LD_ADDR_EXP 30
2681: PUSH
2682: LD_INT 1
2684: ST_TO_ADDR
// if p3 = 106 then
2685: LD_VAR 0 3
2689: PUSH
2690: LD_INT 106
2692: EQUAL
2693: IFFALSE 2703
// sTiger := true ;
2695: LD_ADDR_EXP 26
2699: PUSH
2700: LD_INT 1
2702: ST_TO_ADDR
// if p3 = 107 then
2703: LD_VAR 0 3
2707: PUSH
2708: LD_INT 107
2710: EQUAL
2711: IFFALSE 2721
// sBomb := true ;
2713: LD_ADDR_EXP 27
2717: PUSH
2718: LD_INT 1
2720: ST_TO_ADDR
// if p3 = 108 then
2721: LD_VAR 0 3
2725: PUSH
2726: LD_INT 108
2728: EQUAL
2729: IFFALSE 2739
// sWound := true ;
2731: LD_ADDR_EXP 35
2735: PUSH
2736: LD_INT 1
2738: ST_TO_ADDR
// if p3 = 109 then
2739: LD_VAR 0 3
2743: PUSH
2744: LD_INT 109
2746: EQUAL
2747: IFFALSE 2757
// sBetray := true ;
2749: LD_ADDR_EXP 39
2753: PUSH
2754: LD_INT 1
2756: ST_TO_ADDR
// if p3 = 110 then
2757: LD_VAR 0 3
2761: PUSH
2762: LD_INT 110
2764: EQUAL
2765: IFFALSE 2775
// sContamin := true ;
2767: LD_ADDR_EXP 40
2771: PUSH
2772: LD_INT 1
2774: ST_TO_ADDR
// if p3 = 111 then
2775: LD_VAR 0 3
2779: PUSH
2780: LD_INT 111
2782: EQUAL
2783: IFFALSE 2793
// sOil := true ;
2785: LD_ADDR_EXP 42
2789: PUSH
2790: LD_INT 1
2792: ST_TO_ADDR
// if p3 = 112 then
2793: LD_VAR 0 3
2797: PUSH
2798: LD_INT 112
2800: EQUAL
2801: IFFALSE 2811
// sStu := true ;
2803: LD_ADDR_EXP 46
2807: PUSH
2808: LD_INT 1
2810: ST_TO_ADDR
// if p3 = 113 then
2811: LD_VAR 0 3
2815: PUSH
2816: LD_INT 113
2818: EQUAL
2819: IFFALSE 2829
// sBazooka := true ;
2821: LD_ADDR_EXP 49
2825: PUSH
2826: LD_INT 1
2828: ST_TO_ADDR
// if p3 = 114 then
2829: LD_VAR 0 3
2833: PUSH
2834: LD_INT 114
2836: EQUAL
2837: IFFALSE 2847
// sMortar := true ;
2839: LD_ADDR_EXP 50
2843: PUSH
2844: LD_INT 1
2846: ST_TO_ADDR
// if p3 = 115 then
2847: LD_VAR 0 3
2851: PUSH
2852: LD_INT 115
2854: EQUAL
2855: IFFALSE 2865
// sRanger := true ;
2857: LD_ADDR_EXP 60
2861: PUSH
2862: LD_INT 1
2864: ST_TO_ADDR
// if p3 = 116 then
2865: LD_VAR 0 3
2869: PUSH
2870: LD_INT 116
2872: EQUAL
2873: IFFALSE 2883
// sComputer := true ;
2875: LD_ADDR_EXP 61
2879: PUSH
2880: LD_INT 1
2882: ST_TO_ADDR
// if p3 = 117 then
2883: LD_VAR 0 3
2887: PUSH
2888: LD_INT 117
2890: EQUAL
2891: IFFALSE 2901
// s30 := true ;
2893: LD_ADDR_EXP 62
2897: PUSH
2898: LD_INT 1
2900: ST_TO_ADDR
// if p3 = 118 then
2901: LD_VAR 0 3
2905: PUSH
2906: LD_INT 118
2908: EQUAL
2909: IFFALSE 2919
// s60 := true ;
2911: LD_ADDR_EXP 63
2915: PUSH
2916: LD_INT 1
2918: ST_TO_ADDR
// end ; if p2 = 101 then
2919: LD_VAR 0 2
2923: PUSH
2924: LD_INT 101
2926: EQUAL
2927: IFFALSE 3055
// begin case p3 of 1 :
2929: LD_VAR 0 3
2933: PUSH
2934: LD_INT 1
2936: DOUBLE
2937: EQUAL
2938: IFTRUE 2942
2940: GO 2949
2942: POP
// hHackUnlimitedResources ; 2 :
2943: CALL 15153 0 0
2947: GO 3055
2949: LD_INT 2
2951: DOUBLE
2952: EQUAL
2953: IFTRUE 2957
2955: GO 2964
2957: POP
// hHackSetLevel10 ; 3 :
2958: CALL 15286 0 0
2962: GO 3055
2964: LD_INT 3
2966: DOUBLE
2967: EQUAL
2968: IFTRUE 2972
2970: GO 2979
2972: POP
// hHackSetLevel10YourUnits ; 4 :
2973: CALL 15371 0 0
2977: GO 3055
2979: LD_INT 4
2981: DOUBLE
2982: EQUAL
2983: IFTRUE 2987
2985: GO 2994
2987: POP
// hHackInvincible ; 5 :
2988: CALL 15819 0 0
2992: GO 3055
2994: LD_INT 5
2996: DOUBLE
2997: EQUAL
2998: IFTRUE 3002
3000: GO 3009
3002: POP
// hHackInvisible ; 6 :
3003: CALL 15930 0 0
3007: GO 3055
3009: LD_INT 6
3011: DOUBLE
3012: EQUAL
3013: IFTRUE 3017
3015: GO 3024
3017: POP
// hHackChangeYourSide ; 7 :
3018: CALL 15987 0 0
3022: GO 3055
3024: LD_INT 7
3026: DOUBLE
3027: EQUAL
3028: IFTRUE 3032
3030: GO 3039
3032: POP
// hHackChangeUnitSide ; 8 :
3033: CALL 16029 0 0
3037: GO 3055
3039: LD_INT 8
3041: DOUBLE
3042: EQUAL
3043: IFTRUE 3047
3045: GO 3054
3047: POP
// hHackFog ; end ;
3048: CALL 16130 0 0
3052: GO 3055
3054: POP
// end ; end ;
3055: LD_VAR 0 7
3059: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
3060: GO 3062
3062: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
3063: LD_STRING initStreamRollete();
3065: PPUSH
3066: CALL_OW 559
// InitStreamMode ;
3070: CALL 3082 0 0
// DefineStreamItems ( false ) ;
3074: LD_INT 0
3076: PPUSH
3077: CALL 3546 0 1
// end ;
3081: END
// function InitStreamMode ; begin
3082: LD_INT 0
3084: PPUSH
// streamModeActive := false ;
3085: LD_ADDR_EXP 7
3089: PUSH
3090: LD_INT 0
3092: ST_TO_ADDR
// normalCounter := 36 ;
3093: LD_ADDR_EXP 8
3097: PUSH
3098: LD_INT 36
3100: ST_TO_ADDR
// hardcoreCounter := 18 ;
3101: LD_ADDR_EXP 9
3105: PUSH
3106: LD_INT 18
3108: ST_TO_ADDR
// sRocket := false ;
3109: LD_ADDR_EXP 12
3113: PUSH
3114: LD_INT 0
3116: ST_TO_ADDR
// sSpeed := false ;
3117: LD_ADDR_EXP 11
3121: PUSH
3122: LD_INT 0
3124: ST_TO_ADDR
// sEngine := false ;
3125: LD_ADDR_EXP 13
3129: PUSH
3130: LD_INT 0
3132: ST_TO_ADDR
// sSpec := false ;
3133: LD_ADDR_EXP 10
3137: PUSH
3138: LD_INT 0
3140: ST_TO_ADDR
// sLevel := false ;
3141: LD_ADDR_EXP 14
3145: PUSH
3146: LD_INT 0
3148: ST_TO_ADDR
// sArmoury := false ;
3149: LD_ADDR_EXP 15
3153: PUSH
3154: LD_INT 0
3156: ST_TO_ADDR
// sRadar := false ;
3157: LD_ADDR_EXP 16
3161: PUSH
3162: LD_INT 0
3164: ST_TO_ADDR
// sBunker := false ;
3165: LD_ADDR_EXP 17
3169: PUSH
3170: LD_INT 0
3172: ST_TO_ADDR
// sHack := false ;
3173: LD_ADDR_EXP 18
3177: PUSH
3178: LD_INT 0
3180: ST_TO_ADDR
// sFire := false ;
3181: LD_ADDR_EXP 19
3185: PUSH
3186: LD_INT 0
3188: ST_TO_ADDR
// sRefresh := false ;
3189: LD_ADDR_EXP 20
3193: PUSH
3194: LD_INT 0
3196: ST_TO_ADDR
// sExp := false ;
3197: LD_ADDR_EXP 21
3201: PUSH
3202: LD_INT 0
3204: ST_TO_ADDR
// sDepot := false ;
3205: LD_ADDR_EXP 22
3209: PUSH
3210: LD_INT 0
3212: ST_TO_ADDR
// sFlag := false ;
3213: LD_ADDR_EXP 23
3217: PUSH
3218: LD_INT 0
3220: ST_TO_ADDR
// sKamikadze := false ;
3221: LD_ADDR_EXP 31
3225: PUSH
3226: LD_INT 0
3228: ST_TO_ADDR
// sTroll := false ;
3229: LD_ADDR_EXP 32
3233: PUSH
3234: LD_INT 0
3236: ST_TO_ADDR
// sSlow := false ;
3237: LD_ADDR_EXP 33
3241: PUSH
3242: LD_INT 0
3244: ST_TO_ADDR
// sLack := false ;
3245: LD_ADDR_EXP 34
3249: PUSH
3250: LD_INT 0
3252: ST_TO_ADDR
// sTank := false ;
3253: LD_ADDR_EXP 36
3257: PUSH
3258: LD_INT 0
3260: ST_TO_ADDR
// sRemote := false ;
3261: LD_ADDR_EXP 37
3265: PUSH
3266: LD_INT 0
3268: ST_TO_ADDR
// sPowell := false ;
3269: LD_ADDR_EXP 38
3273: PUSH
3274: LD_INT 0
3276: ST_TO_ADDR
// sTeleport := false ;
3277: LD_ADDR_EXP 41
3281: PUSH
3282: LD_INT 0
3284: ST_TO_ADDR
// sOilTower := false ;
3285: LD_ADDR_EXP 43
3289: PUSH
3290: LD_INT 0
3292: ST_TO_ADDR
// sShovel := false ;
3293: LD_ADDR_EXP 44
3297: PUSH
3298: LD_INT 0
3300: ST_TO_ADDR
// sSheik := false ;
3301: LD_ADDR_EXP 45
3305: PUSH
3306: LD_INT 0
3308: ST_TO_ADDR
// sEarthquake := false ;
3309: LD_ADDR_EXP 47
3313: PUSH
3314: LD_INT 0
3316: ST_TO_ADDR
// sAI := false ;
3317: LD_ADDR_EXP 48
3321: PUSH
3322: LD_INT 0
3324: ST_TO_ADDR
// sCargo := false ;
3325: LD_ADDR_EXP 51
3329: PUSH
3330: LD_INT 0
3332: ST_TO_ADDR
// sDLaser := false ;
3333: LD_ADDR_EXP 52
3337: PUSH
3338: LD_INT 0
3340: ST_TO_ADDR
// sExchange := false ;
3341: LD_ADDR_EXP 53
3345: PUSH
3346: LD_INT 0
3348: ST_TO_ADDR
// sFac := false ;
3349: LD_ADDR_EXP 54
3353: PUSH
3354: LD_INT 0
3356: ST_TO_ADDR
// sPower := false ;
3357: LD_ADDR_EXP 55
3361: PUSH
3362: LD_INT 0
3364: ST_TO_ADDR
// sRandom := false ;
3365: LD_ADDR_EXP 56
3369: PUSH
3370: LD_INT 0
3372: ST_TO_ADDR
// sShield := false ;
3373: LD_ADDR_EXP 57
3377: PUSH
3378: LD_INT 0
3380: ST_TO_ADDR
// sTime := false ;
3381: LD_ADDR_EXP 58
3385: PUSH
3386: LD_INT 0
3388: ST_TO_ADDR
// sTools := false ;
3389: LD_ADDR_EXP 59
3393: PUSH
3394: LD_INT 0
3396: ST_TO_ADDR
// sSold := false ;
3397: LD_ADDR_EXP 24
3401: PUSH
3402: LD_INT 0
3404: ST_TO_ADDR
// sDiff := false ;
3405: LD_ADDR_EXP 25
3409: PUSH
3410: LD_INT 0
3412: ST_TO_ADDR
// sFog := false ;
3413: LD_ADDR_EXP 28
3417: PUSH
3418: LD_INT 0
3420: ST_TO_ADDR
// sReset := false ;
3421: LD_ADDR_EXP 29
3425: PUSH
3426: LD_INT 0
3428: ST_TO_ADDR
// sSun := false ;
3429: LD_ADDR_EXP 30
3433: PUSH
3434: LD_INT 0
3436: ST_TO_ADDR
// sTiger := false ;
3437: LD_ADDR_EXP 26
3441: PUSH
3442: LD_INT 0
3444: ST_TO_ADDR
// sBomb := false ;
3445: LD_ADDR_EXP 27
3449: PUSH
3450: LD_INT 0
3452: ST_TO_ADDR
// sWound := false ;
3453: LD_ADDR_EXP 35
3457: PUSH
3458: LD_INT 0
3460: ST_TO_ADDR
// sBetray := false ;
3461: LD_ADDR_EXP 39
3465: PUSH
3466: LD_INT 0
3468: ST_TO_ADDR
// sContamin := false ;
3469: LD_ADDR_EXP 40
3473: PUSH
3474: LD_INT 0
3476: ST_TO_ADDR
// sOil := false ;
3477: LD_ADDR_EXP 42
3481: PUSH
3482: LD_INT 0
3484: ST_TO_ADDR
// sStu := false ;
3485: LD_ADDR_EXP 46
3489: PUSH
3490: LD_INT 0
3492: ST_TO_ADDR
// sBazooka := false ;
3493: LD_ADDR_EXP 49
3497: PUSH
3498: LD_INT 0
3500: ST_TO_ADDR
// sMortar := false ;
3501: LD_ADDR_EXP 50
3505: PUSH
3506: LD_INT 0
3508: ST_TO_ADDR
// sRanger := false ;
3509: LD_ADDR_EXP 60
3513: PUSH
3514: LD_INT 0
3516: ST_TO_ADDR
// sComputer := false ;
3517: LD_ADDR_EXP 61
3521: PUSH
3522: LD_INT 0
3524: ST_TO_ADDR
// s30 := false ;
3525: LD_ADDR_EXP 62
3529: PUSH
3530: LD_INT 0
3532: ST_TO_ADDR
// s60 := false ;
3533: LD_ADDR_EXP 63
3537: PUSH
3538: LD_INT 0
3540: ST_TO_ADDR
// end ;
3541: LD_VAR 0 1
3545: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3546: LD_INT 0
3548: PPUSH
3549: PPUSH
3550: PPUSH
3551: PPUSH
3552: PPUSH
3553: PPUSH
3554: PPUSH
// result := [ ] ;
3555: LD_ADDR_VAR 0 2
3559: PUSH
3560: EMPTY
3561: ST_TO_ADDR
// if campaign_id = 1 then
3562: LD_OWVAR 69
3566: PUSH
3567: LD_INT 1
3569: EQUAL
3570: IFFALSE 6736
// begin case mission_number of 1 :
3572: LD_OWVAR 70
3576: PUSH
3577: LD_INT 1
3579: DOUBLE
3580: EQUAL
3581: IFTRUE 3585
3583: GO 3661
3585: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3586: LD_ADDR_VAR 0 2
3590: PUSH
3591: LD_INT 2
3593: PUSH
3594: LD_INT 4
3596: PUSH
3597: LD_INT 11
3599: PUSH
3600: LD_INT 12
3602: PUSH
3603: LD_INT 15
3605: PUSH
3606: LD_INT 16
3608: PUSH
3609: LD_INT 22
3611: PUSH
3612: LD_INT 23
3614: PUSH
3615: LD_INT 26
3617: PUSH
3618: EMPTY
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: PUSH
3629: LD_INT 101
3631: PUSH
3632: LD_INT 102
3634: PUSH
3635: LD_INT 106
3637: PUSH
3638: LD_INT 116
3640: PUSH
3641: LD_INT 117
3643: PUSH
3644: LD_INT 118
3646: PUSH
3647: EMPTY
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: PUSH
3655: EMPTY
3656: LIST
3657: LIST
3658: ST_TO_ADDR
3659: GO 6734
3661: LD_INT 2
3663: DOUBLE
3664: EQUAL
3665: IFTRUE 3669
3667: GO 3753
3669: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3670: LD_ADDR_VAR 0 2
3674: PUSH
3675: LD_INT 2
3677: PUSH
3678: LD_INT 4
3680: PUSH
3681: LD_INT 11
3683: PUSH
3684: LD_INT 12
3686: PUSH
3687: LD_INT 15
3689: PUSH
3690: LD_INT 16
3692: PUSH
3693: LD_INT 22
3695: PUSH
3696: LD_INT 23
3698: PUSH
3699: LD_INT 26
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: PUSH
3713: LD_INT 101
3715: PUSH
3716: LD_INT 102
3718: PUSH
3719: LD_INT 105
3721: PUSH
3722: LD_INT 106
3724: PUSH
3725: LD_INT 108
3727: PUSH
3728: LD_INT 116
3730: PUSH
3731: LD_INT 117
3733: PUSH
3734: LD_INT 118
3736: PUSH
3737: EMPTY
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: LIST
3744: LIST
3745: LIST
3746: PUSH
3747: EMPTY
3748: LIST
3749: LIST
3750: ST_TO_ADDR
3751: GO 6734
3753: LD_INT 3
3755: DOUBLE
3756: EQUAL
3757: IFTRUE 3761
3759: GO 3849
3761: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3762: LD_ADDR_VAR 0 2
3766: PUSH
3767: LD_INT 2
3769: PUSH
3770: LD_INT 4
3772: PUSH
3773: LD_INT 5
3775: PUSH
3776: LD_INT 11
3778: PUSH
3779: LD_INT 12
3781: PUSH
3782: LD_INT 15
3784: PUSH
3785: LD_INT 16
3787: PUSH
3788: LD_INT 22
3790: PUSH
3791: LD_INT 26
3793: PUSH
3794: LD_INT 36
3796: PUSH
3797: EMPTY
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: PUSH
3809: LD_INT 101
3811: PUSH
3812: LD_INT 102
3814: PUSH
3815: LD_INT 105
3817: PUSH
3818: LD_INT 106
3820: PUSH
3821: LD_INT 108
3823: PUSH
3824: LD_INT 116
3826: PUSH
3827: LD_INT 117
3829: PUSH
3830: LD_INT 118
3832: PUSH
3833: EMPTY
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: PUSH
3843: EMPTY
3844: LIST
3845: LIST
3846: ST_TO_ADDR
3847: GO 6734
3849: LD_INT 4
3851: DOUBLE
3852: EQUAL
3853: IFTRUE 3857
3855: GO 3953
3857: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
3858: LD_ADDR_VAR 0 2
3862: PUSH
3863: LD_INT 2
3865: PUSH
3866: LD_INT 4
3868: PUSH
3869: LD_INT 5
3871: PUSH
3872: LD_INT 8
3874: PUSH
3875: LD_INT 11
3877: PUSH
3878: LD_INT 12
3880: PUSH
3881: LD_INT 15
3883: PUSH
3884: LD_INT 16
3886: PUSH
3887: LD_INT 22
3889: PUSH
3890: LD_INT 23
3892: PUSH
3893: LD_INT 26
3895: PUSH
3896: LD_INT 36
3898: PUSH
3899: EMPTY
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: PUSH
3913: LD_INT 101
3915: PUSH
3916: LD_INT 102
3918: PUSH
3919: LD_INT 105
3921: PUSH
3922: LD_INT 106
3924: PUSH
3925: LD_INT 108
3927: PUSH
3928: LD_INT 116
3930: PUSH
3931: LD_INT 117
3933: PUSH
3934: LD_INT 118
3936: PUSH
3937: EMPTY
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: ST_TO_ADDR
3951: GO 6734
3953: LD_INT 5
3955: DOUBLE
3956: EQUAL
3957: IFTRUE 3961
3959: GO 4073
3961: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
3962: LD_ADDR_VAR 0 2
3966: PUSH
3967: LD_INT 2
3969: PUSH
3970: LD_INT 4
3972: PUSH
3973: LD_INT 5
3975: PUSH
3976: LD_INT 6
3978: PUSH
3979: LD_INT 8
3981: PUSH
3982: LD_INT 11
3984: PUSH
3985: LD_INT 12
3987: PUSH
3988: LD_INT 15
3990: PUSH
3991: LD_INT 16
3993: PUSH
3994: LD_INT 22
3996: PUSH
3997: LD_INT 23
3999: PUSH
4000: LD_INT 25
4002: PUSH
4003: LD_INT 26
4005: PUSH
4006: LD_INT 36
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: PUSH
4025: LD_INT 101
4027: PUSH
4028: LD_INT 102
4030: PUSH
4031: LD_INT 105
4033: PUSH
4034: LD_INT 106
4036: PUSH
4037: LD_INT 108
4039: PUSH
4040: LD_INT 109
4042: PUSH
4043: LD_INT 112
4045: PUSH
4046: LD_INT 116
4048: PUSH
4049: LD_INT 117
4051: PUSH
4052: LD_INT 118
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: PUSH
4067: EMPTY
4068: LIST
4069: LIST
4070: ST_TO_ADDR
4071: GO 6734
4073: LD_INT 6
4075: DOUBLE
4076: EQUAL
4077: IFTRUE 4081
4079: GO 4213
4081: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
4082: LD_ADDR_VAR 0 2
4086: PUSH
4087: LD_INT 2
4089: PUSH
4090: LD_INT 4
4092: PUSH
4093: LD_INT 5
4095: PUSH
4096: LD_INT 6
4098: PUSH
4099: LD_INT 8
4101: PUSH
4102: LD_INT 11
4104: PUSH
4105: LD_INT 12
4107: PUSH
4108: LD_INT 15
4110: PUSH
4111: LD_INT 16
4113: PUSH
4114: LD_INT 20
4116: PUSH
4117: LD_INT 21
4119: PUSH
4120: LD_INT 22
4122: PUSH
4123: LD_INT 23
4125: PUSH
4126: LD_INT 25
4128: PUSH
4129: LD_INT 26
4131: PUSH
4132: LD_INT 30
4134: PUSH
4135: LD_INT 31
4137: PUSH
4138: LD_INT 32
4140: PUSH
4141: LD_INT 36
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: PUSH
4165: LD_INT 101
4167: PUSH
4168: LD_INT 102
4170: PUSH
4171: LD_INT 105
4173: PUSH
4174: LD_INT 106
4176: PUSH
4177: LD_INT 108
4179: PUSH
4180: LD_INT 109
4182: PUSH
4183: LD_INT 112
4185: PUSH
4186: LD_INT 116
4188: PUSH
4189: LD_INT 117
4191: PUSH
4192: LD_INT 118
4194: PUSH
4195: EMPTY
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: ST_TO_ADDR
4211: GO 6734
4213: LD_INT 7
4215: DOUBLE
4216: EQUAL
4217: IFTRUE 4221
4219: GO 4333
4221: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
4222: LD_ADDR_VAR 0 2
4226: PUSH
4227: LD_INT 2
4229: PUSH
4230: LD_INT 4
4232: PUSH
4233: LD_INT 5
4235: PUSH
4236: LD_INT 7
4238: PUSH
4239: LD_INT 11
4241: PUSH
4242: LD_INT 12
4244: PUSH
4245: LD_INT 15
4247: PUSH
4248: LD_INT 16
4250: PUSH
4251: LD_INT 20
4253: PUSH
4254: LD_INT 21
4256: PUSH
4257: LD_INT 22
4259: PUSH
4260: LD_INT 23
4262: PUSH
4263: LD_INT 25
4265: PUSH
4266: LD_INT 26
4268: PUSH
4269: EMPTY
4270: LIST
4271: LIST
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: LIST
4284: PUSH
4285: LD_INT 101
4287: PUSH
4288: LD_INT 102
4290: PUSH
4291: LD_INT 103
4293: PUSH
4294: LD_INT 105
4296: PUSH
4297: LD_INT 106
4299: PUSH
4300: LD_INT 108
4302: PUSH
4303: LD_INT 112
4305: PUSH
4306: LD_INT 116
4308: PUSH
4309: LD_INT 117
4311: PUSH
4312: LD_INT 118
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: PUSH
4327: EMPTY
4328: LIST
4329: LIST
4330: ST_TO_ADDR
4331: GO 6734
4333: LD_INT 8
4335: DOUBLE
4336: EQUAL
4337: IFTRUE 4341
4339: GO 4481
4341: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4342: LD_ADDR_VAR 0 2
4346: PUSH
4347: LD_INT 2
4349: PUSH
4350: LD_INT 4
4352: PUSH
4353: LD_INT 5
4355: PUSH
4356: LD_INT 6
4358: PUSH
4359: LD_INT 7
4361: PUSH
4362: LD_INT 8
4364: PUSH
4365: LD_INT 11
4367: PUSH
4368: LD_INT 12
4370: PUSH
4371: LD_INT 15
4373: PUSH
4374: LD_INT 16
4376: PUSH
4377: LD_INT 20
4379: PUSH
4380: LD_INT 21
4382: PUSH
4383: LD_INT 22
4385: PUSH
4386: LD_INT 23
4388: PUSH
4389: LD_INT 25
4391: PUSH
4392: LD_INT 26
4394: PUSH
4395: LD_INT 30
4397: PUSH
4398: LD_INT 31
4400: PUSH
4401: LD_INT 32
4403: PUSH
4404: LD_INT 36
4406: PUSH
4407: EMPTY
4408: LIST
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: PUSH
4429: LD_INT 101
4431: PUSH
4432: LD_INT 102
4434: PUSH
4435: LD_INT 103
4437: PUSH
4438: LD_INT 105
4440: PUSH
4441: LD_INT 106
4443: PUSH
4444: LD_INT 108
4446: PUSH
4447: LD_INT 109
4449: PUSH
4450: LD_INT 112
4452: PUSH
4453: LD_INT 116
4455: PUSH
4456: LD_INT 117
4458: PUSH
4459: LD_INT 118
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: ST_TO_ADDR
4479: GO 6734
4481: LD_INT 9
4483: DOUBLE
4484: EQUAL
4485: IFTRUE 4489
4487: GO 4637
4489: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4490: LD_ADDR_VAR 0 2
4494: PUSH
4495: LD_INT 2
4497: PUSH
4498: LD_INT 4
4500: PUSH
4501: LD_INT 5
4503: PUSH
4504: LD_INT 6
4506: PUSH
4507: LD_INT 7
4509: PUSH
4510: LD_INT 8
4512: PUSH
4513: LD_INT 11
4515: PUSH
4516: LD_INT 12
4518: PUSH
4519: LD_INT 15
4521: PUSH
4522: LD_INT 16
4524: PUSH
4525: LD_INT 20
4527: PUSH
4528: LD_INT 21
4530: PUSH
4531: LD_INT 22
4533: PUSH
4534: LD_INT 23
4536: PUSH
4537: LD_INT 25
4539: PUSH
4540: LD_INT 26
4542: PUSH
4543: LD_INT 28
4545: PUSH
4546: LD_INT 30
4548: PUSH
4549: LD_INT 31
4551: PUSH
4552: LD_INT 32
4554: PUSH
4555: LD_INT 36
4557: PUSH
4558: EMPTY
4559: LIST
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 101
4583: PUSH
4584: LD_INT 102
4586: PUSH
4587: LD_INT 103
4589: PUSH
4590: LD_INT 105
4592: PUSH
4593: LD_INT 106
4595: PUSH
4596: LD_INT 108
4598: PUSH
4599: LD_INT 109
4601: PUSH
4602: LD_INT 112
4604: PUSH
4605: LD_INT 114
4607: PUSH
4608: LD_INT 116
4610: PUSH
4611: LD_INT 117
4613: PUSH
4614: LD_INT 118
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: PUSH
4631: EMPTY
4632: LIST
4633: LIST
4634: ST_TO_ADDR
4635: GO 6734
4637: LD_INT 10
4639: DOUBLE
4640: EQUAL
4641: IFTRUE 4645
4643: GO 4841
4645: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4646: LD_ADDR_VAR 0 2
4650: PUSH
4651: LD_INT 2
4653: PUSH
4654: LD_INT 4
4656: PUSH
4657: LD_INT 5
4659: PUSH
4660: LD_INT 6
4662: PUSH
4663: LD_INT 7
4665: PUSH
4666: LD_INT 8
4668: PUSH
4669: LD_INT 9
4671: PUSH
4672: LD_INT 10
4674: PUSH
4675: LD_INT 11
4677: PUSH
4678: LD_INT 12
4680: PUSH
4681: LD_INT 13
4683: PUSH
4684: LD_INT 14
4686: PUSH
4687: LD_INT 15
4689: PUSH
4690: LD_INT 16
4692: PUSH
4693: LD_INT 17
4695: PUSH
4696: LD_INT 18
4698: PUSH
4699: LD_INT 19
4701: PUSH
4702: LD_INT 20
4704: PUSH
4705: LD_INT 21
4707: PUSH
4708: LD_INT 22
4710: PUSH
4711: LD_INT 23
4713: PUSH
4714: LD_INT 24
4716: PUSH
4717: LD_INT 25
4719: PUSH
4720: LD_INT 26
4722: PUSH
4723: LD_INT 28
4725: PUSH
4726: LD_INT 30
4728: PUSH
4729: LD_INT 31
4731: PUSH
4732: LD_INT 32
4734: PUSH
4735: LD_INT 36
4737: PUSH
4738: EMPTY
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: PUSH
4769: LD_INT 101
4771: PUSH
4772: LD_INT 102
4774: PUSH
4775: LD_INT 103
4777: PUSH
4778: LD_INT 104
4780: PUSH
4781: LD_INT 105
4783: PUSH
4784: LD_INT 106
4786: PUSH
4787: LD_INT 107
4789: PUSH
4790: LD_INT 108
4792: PUSH
4793: LD_INT 109
4795: PUSH
4796: LD_INT 110
4798: PUSH
4799: LD_INT 111
4801: PUSH
4802: LD_INT 112
4804: PUSH
4805: LD_INT 114
4807: PUSH
4808: LD_INT 116
4810: PUSH
4811: LD_INT 117
4813: PUSH
4814: LD_INT 118
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: ST_TO_ADDR
4839: GO 6734
4841: LD_INT 11
4843: DOUBLE
4844: EQUAL
4845: IFTRUE 4849
4847: GO 5053
4849: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4850: LD_ADDR_VAR 0 2
4854: PUSH
4855: LD_INT 2
4857: PUSH
4858: LD_INT 3
4860: PUSH
4861: LD_INT 4
4863: PUSH
4864: LD_INT 5
4866: PUSH
4867: LD_INT 6
4869: PUSH
4870: LD_INT 7
4872: PUSH
4873: LD_INT 8
4875: PUSH
4876: LD_INT 9
4878: PUSH
4879: LD_INT 10
4881: PUSH
4882: LD_INT 11
4884: PUSH
4885: LD_INT 12
4887: PUSH
4888: LD_INT 13
4890: PUSH
4891: LD_INT 14
4893: PUSH
4894: LD_INT 15
4896: PUSH
4897: LD_INT 16
4899: PUSH
4900: LD_INT 17
4902: PUSH
4903: LD_INT 18
4905: PUSH
4906: LD_INT 19
4908: PUSH
4909: LD_INT 20
4911: PUSH
4912: LD_INT 21
4914: PUSH
4915: LD_INT 22
4917: PUSH
4918: LD_INT 23
4920: PUSH
4921: LD_INT 24
4923: PUSH
4924: LD_INT 25
4926: PUSH
4927: LD_INT 26
4929: PUSH
4930: LD_INT 28
4932: PUSH
4933: LD_INT 30
4935: PUSH
4936: LD_INT 31
4938: PUSH
4939: LD_INT 32
4941: PUSH
4942: LD_INT 34
4944: PUSH
4945: LD_INT 36
4947: PUSH
4948: EMPTY
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: LIST
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: LIST
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: PUSH
4981: LD_INT 101
4983: PUSH
4984: LD_INT 102
4986: PUSH
4987: LD_INT 103
4989: PUSH
4990: LD_INT 104
4992: PUSH
4993: LD_INT 105
4995: PUSH
4996: LD_INT 106
4998: PUSH
4999: LD_INT 107
5001: PUSH
5002: LD_INT 108
5004: PUSH
5005: LD_INT 109
5007: PUSH
5008: LD_INT 110
5010: PUSH
5011: LD_INT 111
5013: PUSH
5014: LD_INT 112
5016: PUSH
5017: LD_INT 114
5019: PUSH
5020: LD_INT 116
5022: PUSH
5023: LD_INT 117
5025: PUSH
5026: LD_INT 118
5028: PUSH
5029: EMPTY
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: PUSH
5047: EMPTY
5048: LIST
5049: LIST
5050: ST_TO_ADDR
5051: GO 6734
5053: LD_INT 12
5055: DOUBLE
5056: EQUAL
5057: IFTRUE 5061
5059: GO 5281
5061: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
5062: LD_ADDR_VAR 0 2
5066: PUSH
5067: LD_INT 1
5069: PUSH
5070: LD_INT 2
5072: PUSH
5073: LD_INT 3
5075: PUSH
5076: LD_INT 4
5078: PUSH
5079: LD_INT 5
5081: PUSH
5082: LD_INT 6
5084: PUSH
5085: LD_INT 7
5087: PUSH
5088: LD_INT 8
5090: PUSH
5091: LD_INT 9
5093: PUSH
5094: LD_INT 10
5096: PUSH
5097: LD_INT 11
5099: PUSH
5100: LD_INT 12
5102: PUSH
5103: LD_INT 13
5105: PUSH
5106: LD_INT 14
5108: PUSH
5109: LD_INT 15
5111: PUSH
5112: LD_INT 16
5114: PUSH
5115: LD_INT 17
5117: PUSH
5118: LD_INT 18
5120: PUSH
5121: LD_INT 19
5123: PUSH
5124: LD_INT 20
5126: PUSH
5127: LD_INT 21
5129: PUSH
5130: LD_INT 22
5132: PUSH
5133: LD_INT 23
5135: PUSH
5136: LD_INT 24
5138: PUSH
5139: LD_INT 25
5141: PUSH
5142: LD_INT 26
5144: PUSH
5145: LD_INT 27
5147: PUSH
5148: LD_INT 28
5150: PUSH
5151: LD_INT 30
5153: PUSH
5154: LD_INT 31
5156: PUSH
5157: LD_INT 32
5159: PUSH
5160: LD_INT 33
5162: PUSH
5163: LD_INT 34
5165: PUSH
5166: LD_INT 36
5168: PUSH
5169: EMPTY
5170: LIST
5171: LIST
5172: LIST
5173: LIST
5174: LIST
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: PUSH
5205: LD_INT 101
5207: PUSH
5208: LD_INT 102
5210: PUSH
5211: LD_INT 103
5213: PUSH
5214: LD_INT 104
5216: PUSH
5217: LD_INT 105
5219: PUSH
5220: LD_INT 106
5222: PUSH
5223: LD_INT 107
5225: PUSH
5226: LD_INT 108
5228: PUSH
5229: LD_INT 109
5231: PUSH
5232: LD_INT 110
5234: PUSH
5235: LD_INT 111
5237: PUSH
5238: LD_INT 112
5240: PUSH
5241: LD_INT 113
5243: PUSH
5244: LD_INT 114
5246: PUSH
5247: LD_INT 116
5249: PUSH
5250: LD_INT 117
5252: PUSH
5253: LD_INT 118
5255: PUSH
5256: EMPTY
5257: LIST
5258: LIST
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: LIST
5265: LIST
5266: LIST
5267: LIST
5268: LIST
5269: LIST
5270: LIST
5271: LIST
5272: LIST
5273: LIST
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: ST_TO_ADDR
5279: GO 6734
5281: LD_INT 13
5283: DOUBLE
5284: EQUAL
5285: IFTRUE 5289
5287: GO 5497
5289: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
5290: LD_ADDR_VAR 0 2
5294: PUSH
5295: LD_INT 1
5297: PUSH
5298: LD_INT 2
5300: PUSH
5301: LD_INT 3
5303: PUSH
5304: LD_INT 4
5306: PUSH
5307: LD_INT 5
5309: PUSH
5310: LD_INT 8
5312: PUSH
5313: LD_INT 9
5315: PUSH
5316: LD_INT 10
5318: PUSH
5319: LD_INT 11
5321: PUSH
5322: LD_INT 12
5324: PUSH
5325: LD_INT 14
5327: PUSH
5328: LD_INT 15
5330: PUSH
5331: LD_INT 16
5333: PUSH
5334: LD_INT 17
5336: PUSH
5337: LD_INT 18
5339: PUSH
5340: LD_INT 19
5342: PUSH
5343: LD_INT 20
5345: PUSH
5346: LD_INT 21
5348: PUSH
5349: LD_INT 22
5351: PUSH
5352: LD_INT 23
5354: PUSH
5355: LD_INT 24
5357: PUSH
5358: LD_INT 25
5360: PUSH
5361: LD_INT 26
5363: PUSH
5364: LD_INT 27
5366: PUSH
5367: LD_INT 28
5369: PUSH
5370: LD_INT 30
5372: PUSH
5373: LD_INT 31
5375: PUSH
5376: LD_INT 32
5378: PUSH
5379: LD_INT 33
5381: PUSH
5382: LD_INT 34
5384: PUSH
5385: LD_INT 36
5387: PUSH
5388: EMPTY
5389: LIST
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: LIST
5400: LIST
5401: LIST
5402: LIST
5403: LIST
5404: LIST
5405: LIST
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: LIST
5411: LIST
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: PUSH
5421: LD_INT 101
5423: PUSH
5424: LD_INT 102
5426: PUSH
5427: LD_INT 103
5429: PUSH
5430: LD_INT 104
5432: PUSH
5433: LD_INT 105
5435: PUSH
5436: LD_INT 106
5438: PUSH
5439: LD_INT 107
5441: PUSH
5442: LD_INT 108
5444: PUSH
5445: LD_INT 109
5447: PUSH
5448: LD_INT 110
5450: PUSH
5451: LD_INT 111
5453: PUSH
5454: LD_INT 112
5456: PUSH
5457: LD_INT 113
5459: PUSH
5460: LD_INT 114
5462: PUSH
5463: LD_INT 116
5465: PUSH
5466: LD_INT 117
5468: PUSH
5469: LD_INT 118
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: LIST
5476: LIST
5477: LIST
5478: LIST
5479: LIST
5480: LIST
5481: LIST
5482: LIST
5483: LIST
5484: LIST
5485: LIST
5486: LIST
5487: LIST
5488: LIST
5489: LIST
5490: PUSH
5491: EMPTY
5492: LIST
5493: LIST
5494: ST_TO_ADDR
5495: GO 6734
5497: LD_INT 14
5499: DOUBLE
5500: EQUAL
5501: IFTRUE 5505
5503: GO 5729
5505: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5506: LD_ADDR_VAR 0 2
5510: PUSH
5511: LD_INT 1
5513: PUSH
5514: LD_INT 2
5516: PUSH
5517: LD_INT 3
5519: PUSH
5520: LD_INT 4
5522: PUSH
5523: LD_INT 5
5525: PUSH
5526: LD_INT 6
5528: PUSH
5529: LD_INT 7
5531: PUSH
5532: LD_INT 8
5534: PUSH
5535: LD_INT 9
5537: PUSH
5538: LD_INT 10
5540: PUSH
5541: LD_INT 11
5543: PUSH
5544: LD_INT 12
5546: PUSH
5547: LD_INT 13
5549: PUSH
5550: LD_INT 14
5552: PUSH
5553: LD_INT 15
5555: PUSH
5556: LD_INT 16
5558: PUSH
5559: LD_INT 17
5561: PUSH
5562: LD_INT 18
5564: PUSH
5565: LD_INT 19
5567: PUSH
5568: LD_INT 20
5570: PUSH
5571: LD_INT 21
5573: PUSH
5574: LD_INT 22
5576: PUSH
5577: LD_INT 23
5579: PUSH
5580: LD_INT 24
5582: PUSH
5583: LD_INT 25
5585: PUSH
5586: LD_INT 26
5588: PUSH
5589: LD_INT 27
5591: PUSH
5592: LD_INT 28
5594: PUSH
5595: LD_INT 29
5597: PUSH
5598: LD_INT 30
5600: PUSH
5601: LD_INT 31
5603: PUSH
5604: LD_INT 32
5606: PUSH
5607: LD_INT 33
5609: PUSH
5610: LD_INT 34
5612: PUSH
5613: LD_INT 36
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: PUSH
5653: LD_INT 101
5655: PUSH
5656: LD_INT 102
5658: PUSH
5659: LD_INT 103
5661: PUSH
5662: LD_INT 104
5664: PUSH
5665: LD_INT 105
5667: PUSH
5668: LD_INT 106
5670: PUSH
5671: LD_INT 107
5673: PUSH
5674: LD_INT 108
5676: PUSH
5677: LD_INT 109
5679: PUSH
5680: LD_INT 110
5682: PUSH
5683: LD_INT 111
5685: PUSH
5686: LD_INT 112
5688: PUSH
5689: LD_INT 113
5691: PUSH
5692: LD_INT 114
5694: PUSH
5695: LD_INT 116
5697: PUSH
5698: LD_INT 117
5700: PUSH
5701: LD_INT 118
5703: PUSH
5704: EMPTY
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: ST_TO_ADDR
5727: GO 6734
5729: LD_INT 15
5731: DOUBLE
5732: EQUAL
5733: IFTRUE 5737
5735: GO 5961
5737: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5738: LD_ADDR_VAR 0 2
5742: PUSH
5743: LD_INT 1
5745: PUSH
5746: LD_INT 2
5748: PUSH
5749: LD_INT 3
5751: PUSH
5752: LD_INT 4
5754: PUSH
5755: LD_INT 5
5757: PUSH
5758: LD_INT 6
5760: PUSH
5761: LD_INT 7
5763: PUSH
5764: LD_INT 8
5766: PUSH
5767: LD_INT 9
5769: PUSH
5770: LD_INT 10
5772: PUSH
5773: LD_INT 11
5775: PUSH
5776: LD_INT 12
5778: PUSH
5779: LD_INT 13
5781: PUSH
5782: LD_INT 14
5784: PUSH
5785: LD_INT 15
5787: PUSH
5788: LD_INT 16
5790: PUSH
5791: LD_INT 17
5793: PUSH
5794: LD_INT 18
5796: PUSH
5797: LD_INT 19
5799: PUSH
5800: LD_INT 20
5802: PUSH
5803: LD_INT 21
5805: PUSH
5806: LD_INT 22
5808: PUSH
5809: LD_INT 23
5811: PUSH
5812: LD_INT 24
5814: PUSH
5815: LD_INT 25
5817: PUSH
5818: LD_INT 26
5820: PUSH
5821: LD_INT 27
5823: PUSH
5824: LD_INT 28
5826: PUSH
5827: LD_INT 29
5829: PUSH
5830: LD_INT 30
5832: PUSH
5833: LD_INT 31
5835: PUSH
5836: LD_INT 32
5838: PUSH
5839: LD_INT 33
5841: PUSH
5842: LD_INT 34
5844: PUSH
5845: LD_INT 36
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: LIST
5878: LIST
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: PUSH
5885: LD_INT 101
5887: PUSH
5888: LD_INT 102
5890: PUSH
5891: LD_INT 103
5893: PUSH
5894: LD_INT 104
5896: PUSH
5897: LD_INT 105
5899: PUSH
5900: LD_INT 106
5902: PUSH
5903: LD_INT 107
5905: PUSH
5906: LD_INT 108
5908: PUSH
5909: LD_INT 109
5911: PUSH
5912: LD_INT 110
5914: PUSH
5915: LD_INT 111
5917: PUSH
5918: LD_INT 112
5920: PUSH
5921: LD_INT 113
5923: PUSH
5924: LD_INT 114
5926: PUSH
5927: LD_INT 116
5929: PUSH
5930: LD_INT 117
5932: PUSH
5933: LD_INT 118
5935: PUSH
5936: EMPTY
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: LIST
5954: PUSH
5955: EMPTY
5956: LIST
5957: LIST
5958: ST_TO_ADDR
5959: GO 6734
5961: LD_INT 16
5963: DOUBLE
5964: EQUAL
5965: IFTRUE 5969
5967: GO 6105
5969: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
5970: LD_ADDR_VAR 0 2
5974: PUSH
5975: LD_INT 2
5977: PUSH
5978: LD_INT 4
5980: PUSH
5981: LD_INT 5
5983: PUSH
5984: LD_INT 7
5986: PUSH
5987: LD_INT 11
5989: PUSH
5990: LD_INT 12
5992: PUSH
5993: LD_INT 15
5995: PUSH
5996: LD_INT 16
5998: PUSH
5999: LD_INT 20
6001: PUSH
6002: LD_INT 21
6004: PUSH
6005: LD_INT 22
6007: PUSH
6008: LD_INT 23
6010: PUSH
6011: LD_INT 25
6013: PUSH
6014: LD_INT 26
6016: PUSH
6017: LD_INT 30
6019: PUSH
6020: LD_INT 31
6022: PUSH
6023: LD_INT 32
6025: PUSH
6026: LD_INT 33
6028: PUSH
6029: LD_INT 34
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: PUSH
6053: LD_INT 101
6055: PUSH
6056: LD_INT 102
6058: PUSH
6059: LD_INT 103
6061: PUSH
6062: LD_INT 106
6064: PUSH
6065: LD_INT 108
6067: PUSH
6068: LD_INT 112
6070: PUSH
6071: LD_INT 113
6073: PUSH
6074: LD_INT 114
6076: PUSH
6077: LD_INT 116
6079: PUSH
6080: LD_INT 117
6082: PUSH
6083: LD_INT 118
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: ST_TO_ADDR
6103: GO 6734
6105: LD_INT 17
6107: DOUBLE
6108: EQUAL
6109: IFTRUE 6113
6111: GO 6337
6113: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
6114: LD_ADDR_VAR 0 2
6118: PUSH
6119: LD_INT 1
6121: PUSH
6122: LD_INT 2
6124: PUSH
6125: LD_INT 3
6127: PUSH
6128: LD_INT 4
6130: PUSH
6131: LD_INT 5
6133: PUSH
6134: LD_INT 6
6136: PUSH
6137: LD_INT 7
6139: PUSH
6140: LD_INT 8
6142: PUSH
6143: LD_INT 9
6145: PUSH
6146: LD_INT 10
6148: PUSH
6149: LD_INT 11
6151: PUSH
6152: LD_INT 12
6154: PUSH
6155: LD_INT 13
6157: PUSH
6158: LD_INT 14
6160: PUSH
6161: LD_INT 15
6163: PUSH
6164: LD_INT 16
6166: PUSH
6167: LD_INT 17
6169: PUSH
6170: LD_INT 18
6172: PUSH
6173: LD_INT 19
6175: PUSH
6176: LD_INT 20
6178: PUSH
6179: LD_INT 21
6181: PUSH
6182: LD_INT 22
6184: PUSH
6185: LD_INT 23
6187: PUSH
6188: LD_INT 24
6190: PUSH
6191: LD_INT 25
6193: PUSH
6194: LD_INT 26
6196: PUSH
6197: LD_INT 27
6199: PUSH
6200: LD_INT 28
6202: PUSH
6203: LD_INT 29
6205: PUSH
6206: LD_INT 30
6208: PUSH
6209: LD_INT 31
6211: PUSH
6212: LD_INT 32
6214: PUSH
6215: LD_INT 33
6217: PUSH
6218: LD_INT 34
6220: PUSH
6221: LD_INT 36
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: PUSH
6261: LD_INT 101
6263: PUSH
6264: LD_INT 102
6266: PUSH
6267: LD_INT 103
6269: PUSH
6270: LD_INT 104
6272: PUSH
6273: LD_INT 105
6275: PUSH
6276: LD_INT 106
6278: PUSH
6279: LD_INT 107
6281: PUSH
6282: LD_INT 108
6284: PUSH
6285: LD_INT 109
6287: PUSH
6288: LD_INT 110
6290: PUSH
6291: LD_INT 111
6293: PUSH
6294: LD_INT 112
6296: PUSH
6297: LD_INT 113
6299: PUSH
6300: LD_INT 114
6302: PUSH
6303: LD_INT 116
6305: PUSH
6306: LD_INT 117
6308: PUSH
6309: LD_INT 118
6311: PUSH
6312: EMPTY
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: ST_TO_ADDR
6335: GO 6734
6337: LD_INT 18
6339: DOUBLE
6340: EQUAL
6341: IFTRUE 6345
6343: GO 6493
6345: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6346: LD_ADDR_VAR 0 2
6350: PUSH
6351: LD_INT 2
6353: PUSH
6354: LD_INT 4
6356: PUSH
6357: LD_INT 5
6359: PUSH
6360: LD_INT 7
6362: PUSH
6363: LD_INT 11
6365: PUSH
6366: LD_INT 12
6368: PUSH
6369: LD_INT 15
6371: PUSH
6372: LD_INT 16
6374: PUSH
6375: LD_INT 20
6377: PUSH
6378: LD_INT 21
6380: PUSH
6381: LD_INT 22
6383: PUSH
6384: LD_INT 23
6386: PUSH
6387: LD_INT 25
6389: PUSH
6390: LD_INT 26
6392: PUSH
6393: LD_INT 30
6395: PUSH
6396: LD_INT 31
6398: PUSH
6399: LD_INT 32
6401: PUSH
6402: LD_INT 33
6404: PUSH
6405: LD_INT 34
6407: PUSH
6408: LD_INT 35
6410: PUSH
6411: LD_INT 36
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: PUSH
6437: LD_INT 101
6439: PUSH
6440: LD_INT 102
6442: PUSH
6443: LD_INT 103
6445: PUSH
6446: LD_INT 106
6448: PUSH
6449: LD_INT 108
6451: PUSH
6452: LD_INT 112
6454: PUSH
6455: LD_INT 113
6457: PUSH
6458: LD_INT 114
6460: PUSH
6461: LD_INT 115
6463: PUSH
6464: LD_INT 116
6466: PUSH
6467: LD_INT 117
6469: PUSH
6470: LD_INT 118
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: ST_TO_ADDR
6491: GO 6734
6493: LD_INT 19
6495: DOUBLE
6496: EQUAL
6497: IFTRUE 6501
6499: GO 6733
6501: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6502: LD_ADDR_VAR 0 2
6506: PUSH
6507: LD_INT 1
6509: PUSH
6510: LD_INT 2
6512: PUSH
6513: LD_INT 3
6515: PUSH
6516: LD_INT 4
6518: PUSH
6519: LD_INT 5
6521: PUSH
6522: LD_INT 6
6524: PUSH
6525: LD_INT 7
6527: PUSH
6528: LD_INT 8
6530: PUSH
6531: LD_INT 9
6533: PUSH
6534: LD_INT 10
6536: PUSH
6537: LD_INT 11
6539: PUSH
6540: LD_INT 12
6542: PUSH
6543: LD_INT 13
6545: PUSH
6546: LD_INT 14
6548: PUSH
6549: LD_INT 15
6551: PUSH
6552: LD_INT 16
6554: PUSH
6555: LD_INT 17
6557: PUSH
6558: LD_INT 18
6560: PUSH
6561: LD_INT 19
6563: PUSH
6564: LD_INT 20
6566: PUSH
6567: LD_INT 21
6569: PUSH
6570: LD_INT 22
6572: PUSH
6573: LD_INT 23
6575: PUSH
6576: LD_INT 24
6578: PUSH
6579: LD_INT 25
6581: PUSH
6582: LD_INT 26
6584: PUSH
6585: LD_INT 27
6587: PUSH
6588: LD_INT 28
6590: PUSH
6591: LD_INT 29
6593: PUSH
6594: LD_INT 30
6596: PUSH
6597: LD_INT 31
6599: PUSH
6600: LD_INT 32
6602: PUSH
6603: LD_INT 33
6605: PUSH
6606: LD_INT 34
6608: PUSH
6609: LD_INT 35
6611: PUSH
6612: LD_INT 36
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: PUSH
6653: LD_INT 101
6655: PUSH
6656: LD_INT 102
6658: PUSH
6659: LD_INT 103
6661: PUSH
6662: LD_INT 104
6664: PUSH
6665: LD_INT 105
6667: PUSH
6668: LD_INT 106
6670: PUSH
6671: LD_INT 107
6673: PUSH
6674: LD_INT 108
6676: PUSH
6677: LD_INT 109
6679: PUSH
6680: LD_INT 110
6682: PUSH
6683: LD_INT 111
6685: PUSH
6686: LD_INT 112
6688: PUSH
6689: LD_INT 113
6691: PUSH
6692: LD_INT 114
6694: PUSH
6695: LD_INT 115
6697: PUSH
6698: LD_INT 116
6700: PUSH
6701: LD_INT 117
6703: PUSH
6704: LD_INT 118
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: ST_TO_ADDR
6731: GO 6734
6733: POP
// end else
6734: GO 6965
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6736: LD_ADDR_VAR 0 2
6740: PUSH
6741: LD_INT 1
6743: PUSH
6744: LD_INT 2
6746: PUSH
6747: LD_INT 3
6749: PUSH
6750: LD_INT 4
6752: PUSH
6753: LD_INT 5
6755: PUSH
6756: LD_INT 6
6758: PUSH
6759: LD_INT 7
6761: PUSH
6762: LD_INT 8
6764: PUSH
6765: LD_INT 9
6767: PUSH
6768: LD_INT 10
6770: PUSH
6771: LD_INT 11
6773: PUSH
6774: LD_INT 12
6776: PUSH
6777: LD_INT 13
6779: PUSH
6780: LD_INT 14
6782: PUSH
6783: LD_INT 15
6785: PUSH
6786: LD_INT 16
6788: PUSH
6789: LD_INT 17
6791: PUSH
6792: LD_INT 18
6794: PUSH
6795: LD_INT 19
6797: PUSH
6798: LD_INT 20
6800: PUSH
6801: LD_INT 21
6803: PUSH
6804: LD_INT 22
6806: PUSH
6807: LD_INT 23
6809: PUSH
6810: LD_INT 24
6812: PUSH
6813: LD_INT 25
6815: PUSH
6816: LD_INT 26
6818: PUSH
6819: LD_INT 27
6821: PUSH
6822: LD_INT 28
6824: PUSH
6825: LD_INT 29
6827: PUSH
6828: LD_INT 30
6830: PUSH
6831: LD_INT 31
6833: PUSH
6834: LD_INT 32
6836: PUSH
6837: LD_INT 33
6839: PUSH
6840: LD_INT 34
6842: PUSH
6843: LD_INT 35
6845: PUSH
6846: LD_INT 36
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: PUSH
6887: LD_INT 101
6889: PUSH
6890: LD_INT 102
6892: PUSH
6893: LD_INT 103
6895: PUSH
6896: LD_INT 104
6898: PUSH
6899: LD_INT 105
6901: PUSH
6902: LD_INT 106
6904: PUSH
6905: LD_INT 107
6907: PUSH
6908: LD_INT 108
6910: PUSH
6911: LD_INT 109
6913: PUSH
6914: LD_INT 110
6916: PUSH
6917: LD_INT 111
6919: PUSH
6920: LD_INT 112
6922: PUSH
6923: LD_INT 113
6925: PUSH
6926: LD_INT 114
6928: PUSH
6929: LD_INT 115
6931: PUSH
6932: LD_INT 116
6934: PUSH
6935: LD_INT 117
6937: PUSH
6938: LD_INT 118
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: ST_TO_ADDR
// if result then
6965: LD_VAR 0 2
6969: IFFALSE 7755
// begin normal :=  ;
6971: LD_ADDR_VAR 0 5
6975: PUSH
6976: LD_STRING 
6978: ST_TO_ADDR
// hardcore :=  ;
6979: LD_ADDR_VAR 0 6
6983: PUSH
6984: LD_STRING 
6986: ST_TO_ADDR
// active :=  ;
6987: LD_ADDR_VAR 0 7
6991: PUSH
6992: LD_STRING 
6994: ST_TO_ADDR
// for i = 1 to normalCounter do
6995: LD_ADDR_VAR 0 8
6999: PUSH
7000: DOUBLE
7001: LD_INT 1
7003: DEC
7004: ST_TO_ADDR
7005: LD_EXP 8
7009: PUSH
7010: FOR_TO
7011: IFFALSE 7112
// begin tmp := 0 ;
7013: LD_ADDR_VAR 0 3
7017: PUSH
7018: LD_STRING 0
7020: ST_TO_ADDR
// if result [ 1 ] then
7021: LD_VAR 0 2
7025: PUSH
7026: LD_INT 1
7028: ARRAY
7029: IFFALSE 7094
// if result [ 1 ] [ 1 ] = i then
7031: LD_VAR 0 2
7035: PUSH
7036: LD_INT 1
7038: ARRAY
7039: PUSH
7040: LD_INT 1
7042: ARRAY
7043: PUSH
7044: LD_VAR 0 8
7048: EQUAL
7049: IFFALSE 7094
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7051: LD_ADDR_VAR 0 2
7055: PUSH
7056: LD_VAR 0 2
7060: PPUSH
7061: LD_INT 1
7063: PPUSH
7064: LD_VAR 0 2
7068: PUSH
7069: LD_INT 1
7071: ARRAY
7072: PPUSH
7073: LD_INT 1
7075: PPUSH
7076: CALL_OW 3
7080: PPUSH
7081: CALL_OW 1
7085: ST_TO_ADDR
// tmp := 1 ;
7086: LD_ADDR_VAR 0 3
7090: PUSH
7091: LD_STRING 1
7093: ST_TO_ADDR
// end ; normal := normal & tmp ;
7094: LD_ADDR_VAR 0 5
7098: PUSH
7099: LD_VAR 0 5
7103: PUSH
7104: LD_VAR 0 3
7108: STR
7109: ST_TO_ADDR
// end ;
7110: GO 7010
7112: POP
7113: POP
// for i = 1 to hardcoreCounter do
7114: LD_ADDR_VAR 0 8
7118: PUSH
7119: DOUBLE
7120: LD_INT 1
7122: DEC
7123: ST_TO_ADDR
7124: LD_EXP 9
7128: PUSH
7129: FOR_TO
7130: IFFALSE 7235
// begin tmp := 0 ;
7132: LD_ADDR_VAR 0 3
7136: PUSH
7137: LD_STRING 0
7139: ST_TO_ADDR
// if result [ 2 ] then
7140: LD_VAR 0 2
7144: PUSH
7145: LD_INT 2
7147: ARRAY
7148: IFFALSE 7217
// if result [ 2 ] [ 1 ] = 100 + i then
7150: LD_VAR 0 2
7154: PUSH
7155: LD_INT 2
7157: ARRAY
7158: PUSH
7159: LD_INT 1
7161: ARRAY
7162: PUSH
7163: LD_INT 100
7165: PUSH
7166: LD_VAR 0 8
7170: PLUS
7171: EQUAL
7172: IFFALSE 7217
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7174: LD_ADDR_VAR 0 2
7178: PUSH
7179: LD_VAR 0 2
7183: PPUSH
7184: LD_INT 2
7186: PPUSH
7187: LD_VAR 0 2
7191: PUSH
7192: LD_INT 2
7194: ARRAY
7195: PPUSH
7196: LD_INT 1
7198: PPUSH
7199: CALL_OW 3
7203: PPUSH
7204: CALL_OW 1
7208: ST_TO_ADDR
// tmp := 1 ;
7209: LD_ADDR_VAR 0 3
7213: PUSH
7214: LD_STRING 1
7216: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7217: LD_ADDR_VAR 0 6
7221: PUSH
7222: LD_VAR 0 6
7226: PUSH
7227: LD_VAR 0 3
7231: STR
7232: ST_TO_ADDR
// end ;
7233: GO 7129
7235: POP
7236: POP
// if isGameLoad then
7237: LD_VAR 0 1
7241: IFFALSE 7716
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
7243: LD_ADDR_VAR 0 4
7247: PUSH
7248: LD_EXP 12
7252: PUSH
7253: LD_EXP 11
7257: PUSH
7258: LD_EXP 13
7262: PUSH
7263: LD_EXP 10
7267: PUSH
7268: LD_EXP 14
7272: PUSH
7273: LD_EXP 15
7277: PUSH
7278: LD_EXP 16
7282: PUSH
7283: LD_EXP 17
7287: PUSH
7288: LD_EXP 18
7292: PUSH
7293: LD_EXP 19
7297: PUSH
7298: LD_EXP 20
7302: PUSH
7303: LD_EXP 21
7307: PUSH
7308: LD_EXP 22
7312: PUSH
7313: LD_EXP 23
7317: PUSH
7318: LD_EXP 31
7322: PUSH
7323: LD_EXP 32
7327: PUSH
7328: LD_EXP 33
7332: PUSH
7333: LD_EXP 34
7337: PUSH
7338: LD_EXP 36
7342: PUSH
7343: LD_EXP 37
7347: PUSH
7348: LD_EXP 38
7352: PUSH
7353: LD_EXP 41
7357: PUSH
7358: LD_EXP 43
7362: PUSH
7363: LD_EXP 44
7367: PUSH
7368: LD_EXP 45
7372: PUSH
7373: LD_EXP 47
7377: PUSH
7378: LD_EXP 48
7382: PUSH
7383: LD_EXP 51
7387: PUSH
7388: LD_EXP 52
7392: PUSH
7393: LD_EXP 53
7397: PUSH
7398: LD_EXP 54
7402: PUSH
7403: LD_EXP 55
7407: PUSH
7408: LD_EXP 56
7412: PUSH
7413: LD_EXP 57
7417: PUSH
7418: LD_EXP 58
7422: PUSH
7423: LD_EXP 59
7427: PUSH
7428: LD_EXP 24
7432: PUSH
7433: LD_EXP 25
7437: PUSH
7438: LD_EXP 28
7442: PUSH
7443: LD_EXP 29
7447: PUSH
7448: LD_EXP 30
7452: PUSH
7453: LD_EXP 26
7457: PUSH
7458: LD_EXP 27
7462: PUSH
7463: LD_EXP 35
7467: PUSH
7468: LD_EXP 39
7472: PUSH
7473: LD_EXP 40
7477: PUSH
7478: LD_EXP 42
7482: PUSH
7483: LD_EXP 46
7487: PUSH
7488: LD_EXP 49
7492: PUSH
7493: LD_EXP 50
7497: PUSH
7498: LD_EXP 60
7502: PUSH
7503: LD_EXP 61
7507: PUSH
7508: LD_EXP 62
7512: PUSH
7513: LD_EXP 63
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: ST_TO_ADDR
// tmp :=  ;
7574: LD_ADDR_VAR 0 3
7578: PUSH
7579: LD_STRING 
7581: ST_TO_ADDR
// for i = 1 to normalCounter do
7582: LD_ADDR_VAR 0 8
7586: PUSH
7587: DOUBLE
7588: LD_INT 1
7590: DEC
7591: ST_TO_ADDR
7592: LD_EXP 8
7596: PUSH
7597: FOR_TO
7598: IFFALSE 7634
// begin if flags [ i ] then
7600: LD_VAR 0 4
7604: PUSH
7605: LD_VAR 0 8
7609: ARRAY
7610: IFFALSE 7632
// tmp := tmp & i & ; ;
7612: LD_ADDR_VAR 0 3
7616: PUSH
7617: LD_VAR 0 3
7621: PUSH
7622: LD_VAR 0 8
7626: STR
7627: PUSH
7628: LD_STRING ;
7630: STR
7631: ST_TO_ADDR
// end ;
7632: GO 7597
7634: POP
7635: POP
// for i = 1 to hardcoreCounter do
7636: LD_ADDR_VAR 0 8
7640: PUSH
7641: DOUBLE
7642: LD_INT 1
7644: DEC
7645: ST_TO_ADDR
7646: LD_EXP 9
7650: PUSH
7651: FOR_TO
7652: IFFALSE 7698
// begin if flags [ normalCounter + i ] then
7654: LD_VAR 0 4
7658: PUSH
7659: LD_EXP 8
7663: PUSH
7664: LD_VAR 0 8
7668: PLUS
7669: ARRAY
7670: IFFALSE 7696
// tmp := tmp & ( 100 + i ) & ; ;
7672: LD_ADDR_VAR 0 3
7676: PUSH
7677: LD_VAR 0 3
7681: PUSH
7682: LD_INT 100
7684: PUSH
7685: LD_VAR 0 8
7689: PLUS
7690: STR
7691: PUSH
7692: LD_STRING ;
7694: STR
7695: ST_TO_ADDR
// end ;
7696: GO 7651
7698: POP
7699: POP
// if tmp then
7700: LD_VAR 0 3
7704: IFFALSE 7716
// active := tmp ;
7706: LD_ADDR_VAR 0 7
7710: PUSH
7711: LD_VAR 0 3
7715: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7716: LD_STRING getStreamItemsFromMission("
7718: PUSH
7719: LD_VAR 0 5
7723: STR
7724: PUSH
7725: LD_STRING ","
7727: STR
7728: PUSH
7729: LD_VAR 0 6
7733: STR
7734: PUSH
7735: LD_STRING ","
7737: STR
7738: PUSH
7739: LD_VAR 0 7
7743: STR
7744: PUSH
7745: LD_STRING ")
7747: STR
7748: PPUSH
7749: CALL_OW 559
// end else
7753: GO 7762
// ToLua ( getStreamItemsFromMission("","","") ) ;
7755: LD_STRING getStreamItemsFromMission("","","")
7757: PPUSH
7758: CALL_OW 559
// end ;
7762: LD_VAR 0 2
7766: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7767: LD_EXP 7
7771: PUSH
7772: LD_EXP 12
7776: AND
7777: IFFALSE 7901
7779: GO 7781
7781: DISABLE
7782: LD_INT 0
7784: PPUSH
7785: PPUSH
// begin enable ;
7786: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7787: LD_ADDR_VAR 0 2
7791: PUSH
7792: LD_INT 22
7794: PUSH
7795: LD_OWVAR 2
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: PUSH
7804: LD_INT 2
7806: PUSH
7807: LD_INT 34
7809: PUSH
7810: LD_INT 7
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: PUSH
7817: LD_INT 34
7819: PUSH
7820: LD_INT 45
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: PUSH
7827: LD_INT 34
7829: PUSH
7830: LD_INT 28
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: PUSH
7837: LD_INT 34
7839: PUSH
7840: LD_INT 47
7842: PUSH
7843: EMPTY
7844: LIST
7845: LIST
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PPUSH
7858: CALL_OW 69
7862: ST_TO_ADDR
// if not tmp then
7863: LD_VAR 0 2
7867: NOT
7868: IFFALSE 7872
// exit ;
7870: GO 7901
// for i in tmp do
7872: LD_ADDR_VAR 0 1
7876: PUSH
7877: LD_VAR 0 2
7881: PUSH
7882: FOR_IN
7883: IFFALSE 7899
// begin SetLives ( i , 0 ) ;
7885: LD_VAR 0 1
7889: PPUSH
7890: LD_INT 0
7892: PPUSH
7893: CALL_OW 234
// end ;
7897: GO 7882
7899: POP
7900: POP
// end ;
7901: PPOPN 2
7903: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7904: LD_EXP 7
7908: PUSH
7909: LD_EXP 13
7913: AND
7914: IFFALSE 7998
7916: GO 7918
7918: DISABLE
7919: LD_INT 0
7921: PPUSH
7922: PPUSH
// begin enable ;
7923: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7924: LD_ADDR_VAR 0 2
7928: PUSH
7929: LD_INT 22
7931: PUSH
7932: LD_OWVAR 2
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: PUSH
7941: LD_INT 32
7943: PUSH
7944: LD_INT 3
7946: PUSH
7947: EMPTY
7948: LIST
7949: LIST
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PPUSH
7955: CALL_OW 69
7959: ST_TO_ADDR
// if not tmp then
7960: LD_VAR 0 2
7964: NOT
7965: IFFALSE 7969
// exit ;
7967: GO 7998
// for i in tmp do
7969: LD_ADDR_VAR 0 1
7973: PUSH
7974: LD_VAR 0 2
7978: PUSH
7979: FOR_IN
7980: IFFALSE 7996
// begin SetLives ( i , 0 ) ;
7982: LD_VAR 0 1
7986: PPUSH
7987: LD_INT 0
7989: PPUSH
7990: CALL_OW 234
// end ;
7994: GO 7979
7996: POP
7997: POP
// end ;
7998: PPOPN 2
8000: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
8001: LD_EXP 7
8005: PUSH
8006: LD_EXP 10
8010: AND
8011: IFFALSE 8104
8013: GO 8015
8015: DISABLE
8016: LD_INT 0
8018: PPUSH
// begin enable ;
8019: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
8020: LD_ADDR_VAR 0 1
8024: PUSH
8025: LD_INT 22
8027: PUSH
8028: LD_OWVAR 2
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: PUSH
8037: LD_INT 2
8039: PUSH
8040: LD_INT 25
8042: PUSH
8043: LD_INT 5
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 25
8052: PUSH
8053: LD_INT 9
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: PUSH
8060: LD_INT 25
8062: PUSH
8063: LD_INT 8
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: PPUSH
8080: CALL_OW 69
8084: PUSH
8085: FOR_IN
8086: IFFALSE 8102
// begin SetClass ( i , 1 ) ;
8088: LD_VAR 0 1
8092: PPUSH
8093: LD_INT 1
8095: PPUSH
8096: CALL_OW 336
// end ;
8100: GO 8085
8102: POP
8103: POP
// end ;
8104: PPOPN 1
8106: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
8107: LD_EXP 7
8111: PUSH
8112: LD_EXP 11
8116: AND
8117: PUSH
8118: LD_OWVAR 65
8122: PUSH
8123: LD_INT 7
8125: LESS
8126: AND
8127: IFFALSE 8141
8129: GO 8131
8131: DISABLE
// begin enable ;
8132: ENABLE
// game_speed := 7 ;
8133: LD_ADDR_OWVAR 65
8137: PUSH
8138: LD_INT 7
8140: ST_TO_ADDR
// end ;
8141: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
8142: LD_EXP 7
8146: PUSH
8147: LD_EXP 14
8151: AND
8152: IFFALSE 8354
8154: GO 8156
8156: DISABLE
8157: LD_INT 0
8159: PPUSH
8160: PPUSH
8161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
8162: LD_ADDR_VAR 0 3
8166: PUSH
8167: LD_INT 81
8169: PUSH
8170: LD_OWVAR 2
8174: PUSH
8175: EMPTY
8176: LIST
8177: LIST
8178: PUSH
8179: LD_INT 21
8181: PUSH
8182: LD_INT 1
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: PUSH
8189: EMPTY
8190: LIST
8191: LIST
8192: PPUSH
8193: CALL_OW 69
8197: ST_TO_ADDR
// if not tmp then
8198: LD_VAR 0 3
8202: NOT
8203: IFFALSE 8207
// exit ;
8205: GO 8354
// if tmp > 5 then
8207: LD_VAR 0 3
8211: PUSH
8212: LD_INT 5
8214: GREATER
8215: IFFALSE 8227
// k := 5 else
8217: LD_ADDR_VAR 0 2
8221: PUSH
8222: LD_INT 5
8224: ST_TO_ADDR
8225: GO 8237
// k := tmp ;
8227: LD_ADDR_VAR 0 2
8231: PUSH
8232: LD_VAR 0 3
8236: ST_TO_ADDR
// for i := 1 to k do
8237: LD_ADDR_VAR 0 1
8241: PUSH
8242: DOUBLE
8243: LD_INT 1
8245: DEC
8246: ST_TO_ADDR
8247: LD_VAR 0 2
8251: PUSH
8252: FOR_TO
8253: IFFALSE 8352
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
8255: LD_VAR 0 3
8259: PUSH
8260: LD_VAR 0 1
8264: ARRAY
8265: PPUSH
8266: LD_VAR 0 1
8270: PUSH
8271: LD_INT 4
8273: MOD
8274: PUSH
8275: LD_INT 1
8277: PLUS
8278: PPUSH
8279: CALL_OW 259
8283: PUSH
8284: LD_INT 10
8286: LESS
8287: IFFALSE 8350
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
8289: LD_VAR 0 3
8293: PUSH
8294: LD_VAR 0 1
8298: ARRAY
8299: PPUSH
8300: LD_VAR 0 1
8304: PUSH
8305: LD_INT 4
8307: MOD
8308: PUSH
8309: LD_INT 1
8311: PLUS
8312: PPUSH
8313: LD_VAR 0 3
8317: PUSH
8318: LD_VAR 0 1
8322: ARRAY
8323: PPUSH
8324: LD_VAR 0 1
8328: PUSH
8329: LD_INT 4
8331: MOD
8332: PUSH
8333: LD_INT 1
8335: PLUS
8336: PPUSH
8337: CALL_OW 259
8341: PUSH
8342: LD_INT 1
8344: PLUS
8345: PPUSH
8346: CALL_OW 237
8350: GO 8252
8352: POP
8353: POP
// end ;
8354: PPOPN 3
8356: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8357: LD_EXP 7
8361: PUSH
8362: LD_EXP 15
8366: AND
8367: IFFALSE 8387
8369: GO 8371
8371: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8372: LD_INT 4
8374: PPUSH
8375: LD_OWVAR 2
8379: PPUSH
8380: LD_INT 0
8382: PPUSH
8383: CALL_OW 324
8387: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8388: LD_EXP 7
8392: PUSH
8393: LD_EXP 44
8397: AND
8398: IFFALSE 8418
8400: GO 8402
8402: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8403: LD_INT 19
8405: PPUSH
8406: LD_OWVAR 2
8410: PPUSH
8411: LD_INT 0
8413: PPUSH
8414: CALL_OW 324
8418: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8419: LD_EXP 7
8423: PUSH
8424: LD_EXP 16
8428: AND
8429: IFFALSE 8531
8431: GO 8433
8433: DISABLE
8434: LD_INT 0
8436: PPUSH
8437: PPUSH
// begin enable ;
8438: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8439: LD_ADDR_VAR 0 2
8443: PUSH
8444: LD_INT 22
8446: PUSH
8447: LD_OWVAR 2
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: PUSH
8456: LD_INT 2
8458: PUSH
8459: LD_INT 34
8461: PUSH
8462: LD_INT 11
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: PUSH
8469: LD_INT 34
8471: PUSH
8472: LD_INT 30
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: LIST
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: PPUSH
8488: CALL_OW 69
8492: ST_TO_ADDR
// if not tmp then
8493: LD_VAR 0 2
8497: NOT
8498: IFFALSE 8502
// exit ;
8500: GO 8531
// for i in tmp do
8502: LD_ADDR_VAR 0 1
8506: PUSH
8507: LD_VAR 0 2
8511: PUSH
8512: FOR_IN
8513: IFFALSE 8529
// begin SetLives ( i , 0 ) ;
8515: LD_VAR 0 1
8519: PPUSH
8520: LD_INT 0
8522: PPUSH
8523: CALL_OW 234
// end ;
8527: GO 8512
8529: POP
8530: POP
// end ;
8531: PPOPN 2
8533: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8534: LD_EXP 7
8538: PUSH
8539: LD_EXP 17
8543: AND
8544: IFFALSE 8564
8546: GO 8548
8548: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8549: LD_INT 32
8551: PPUSH
8552: LD_OWVAR 2
8556: PPUSH
8557: LD_INT 0
8559: PPUSH
8560: CALL_OW 324
8564: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8565: LD_EXP 7
8569: PUSH
8570: LD_EXP 18
8574: AND
8575: IFFALSE 8756
8577: GO 8579
8579: DISABLE
8580: LD_INT 0
8582: PPUSH
8583: PPUSH
8584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8585: LD_ADDR_VAR 0 2
8589: PUSH
8590: LD_INT 22
8592: PUSH
8593: LD_OWVAR 2
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: PUSH
8602: LD_INT 33
8604: PUSH
8605: LD_INT 3
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: PUSH
8612: EMPTY
8613: LIST
8614: LIST
8615: PPUSH
8616: CALL_OW 69
8620: ST_TO_ADDR
// if not tmp then
8621: LD_VAR 0 2
8625: NOT
8626: IFFALSE 8630
// exit ;
8628: GO 8756
// side := 0 ;
8630: LD_ADDR_VAR 0 3
8634: PUSH
8635: LD_INT 0
8637: ST_TO_ADDR
// for i := 1 to 8 do
8638: LD_ADDR_VAR 0 1
8642: PUSH
8643: DOUBLE
8644: LD_INT 1
8646: DEC
8647: ST_TO_ADDR
8648: LD_INT 8
8650: PUSH
8651: FOR_TO
8652: IFFALSE 8700
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8654: LD_OWVAR 2
8658: PUSH
8659: LD_VAR 0 1
8663: NONEQUAL
8664: PUSH
8665: LD_OWVAR 2
8669: PPUSH
8670: LD_VAR 0 1
8674: PPUSH
8675: CALL_OW 81
8679: PUSH
8680: LD_INT 2
8682: EQUAL
8683: AND
8684: IFFALSE 8698
// begin side := i ;
8686: LD_ADDR_VAR 0 3
8690: PUSH
8691: LD_VAR 0 1
8695: ST_TO_ADDR
// break ;
8696: GO 8700
// end ;
8698: GO 8651
8700: POP
8701: POP
// if not side then
8702: LD_VAR 0 3
8706: NOT
8707: IFFALSE 8711
// exit ;
8709: GO 8756
// for i := 1 to tmp do
8711: LD_ADDR_VAR 0 1
8715: PUSH
8716: DOUBLE
8717: LD_INT 1
8719: DEC
8720: ST_TO_ADDR
8721: LD_VAR 0 2
8725: PUSH
8726: FOR_TO
8727: IFFALSE 8754
// if Prob ( 60 ) then
8729: LD_INT 60
8731: PPUSH
8732: CALL_OW 13
8736: IFFALSE 8752
// SetSide ( i , side ) ;
8738: LD_VAR 0 1
8742: PPUSH
8743: LD_VAR 0 3
8747: PPUSH
8748: CALL_OW 235
8752: GO 8726
8754: POP
8755: POP
// end ;
8756: PPOPN 3
8758: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8759: LD_EXP 7
8763: PUSH
8764: LD_EXP 20
8768: AND
8769: IFFALSE 8888
8771: GO 8773
8773: DISABLE
8774: LD_INT 0
8776: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8777: LD_ADDR_VAR 0 1
8781: PUSH
8782: LD_INT 22
8784: PUSH
8785: LD_OWVAR 2
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: LD_INT 21
8796: PUSH
8797: LD_INT 1
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: PUSH
8804: LD_INT 3
8806: PUSH
8807: LD_INT 23
8809: PUSH
8810: LD_INT 0
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: PUSH
8817: EMPTY
8818: LIST
8819: LIST
8820: PUSH
8821: EMPTY
8822: LIST
8823: LIST
8824: LIST
8825: PPUSH
8826: CALL_OW 69
8830: PUSH
8831: FOR_IN
8832: IFFALSE 8886
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8834: LD_VAR 0 1
8838: PPUSH
8839: CALL_OW 257
8843: PUSH
8844: LD_INT 1
8846: PUSH
8847: LD_INT 2
8849: PUSH
8850: LD_INT 3
8852: PUSH
8853: LD_INT 4
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: IN
8862: IFFALSE 8884
// SetClass ( un , rand ( 1 , 4 ) ) ;
8864: LD_VAR 0 1
8868: PPUSH
8869: LD_INT 1
8871: PPUSH
8872: LD_INT 4
8874: PPUSH
8875: CALL_OW 12
8879: PPUSH
8880: CALL_OW 336
8884: GO 8831
8886: POP
8887: POP
// end ;
8888: PPOPN 1
8890: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8891: LD_EXP 7
8895: PUSH
8896: LD_EXP 19
8900: AND
8901: IFFALSE 8980
8903: GO 8905
8905: DISABLE
8906: LD_INT 0
8908: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8909: LD_ADDR_VAR 0 1
8913: PUSH
8914: LD_INT 22
8916: PUSH
8917: LD_OWVAR 2
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: LD_INT 21
8928: PUSH
8929: LD_INT 3
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PPUSH
8940: CALL_OW 69
8944: ST_TO_ADDR
// if not tmp then
8945: LD_VAR 0 1
8949: NOT
8950: IFFALSE 8954
// exit ;
8952: GO 8980
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8954: LD_VAR 0 1
8958: PUSH
8959: LD_INT 1
8961: PPUSH
8962: LD_VAR 0 1
8966: PPUSH
8967: CALL_OW 12
8971: ARRAY
8972: PPUSH
8973: LD_INT 100
8975: PPUSH
8976: CALL_OW 234
// end ;
8980: PPOPN 1
8982: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8983: LD_EXP 7
8987: PUSH
8988: LD_EXP 21
8992: AND
8993: IFFALSE 9091
8995: GO 8997
8997: DISABLE
8998: LD_INT 0
9000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9001: LD_ADDR_VAR 0 1
9005: PUSH
9006: LD_INT 22
9008: PUSH
9009: LD_OWVAR 2
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: PUSH
9018: LD_INT 21
9020: PUSH
9021: LD_INT 1
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: PPUSH
9032: CALL_OW 69
9036: ST_TO_ADDR
// if not tmp then
9037: LD_VAR 0 1
9041: NOT
9042: IFFALSE 9046
// exit ;
9044: GO 9091
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
9046: LD_VAR 0 1
9050: PUSH
9051: LD_INT 1
9053: PPUSH
9054: LD_VAR 0 1
9058: PPUSH
9059: CALL_OW 12
9063: ARRAY
9064: PPUSH
9065: LD_INT 1
9067: PPUSH
9068: LD_INT 4
9070: PPUSH
9071: CALL_OW 12
9075: PPUSH
9076: LD_INT 3000
9078: PPUSH
9079: LD_INT 9000
9081: PPUSH
9082: CALL_OW 12
9086: PPUSH
9087: CALL_OW 492
// end ;
9091: PPOPN 1
9093: END
// every 0 0$1 trigger StreamModeActive and sDepot do
9094: LD_EXP 7
9098: PUSH
9099: LD_EXP 22
9103: AND
9104: IFFALSE 9124
9106: GO 9108
9108: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
9109: LD_INT 1
9111: PPUSH
9112: LD_OWVAR 2
9116: PPUSH
9117: LD_INT 0
9119: PPUSH
9120: CALL_OW 324
9124: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
9125: LD_EXP 7
9129: PUSH
9130: LD_EXP 23
9134: AND
9135: IFFALSE 9218
9137: GO 9139
9139: DISABLE
9140: LD_INT 0
9142: PPUSH
9143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9144: LD_ADDR_VAR 0 2
9148: PUSH
9149: LD_INT 22
9151: PUSH
9152: LD_OWVAR 2
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: PUSH
9161: LD_INT 21
9163: PUSH
9164: LD_INT 3
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PPUSH
9175: CALL_OW 69
9179: ST_TO_ADDR
// if not tmp then
9180: LD_VAR 0 2
9184: NOT
9185: IFFALSE 9189
// exit ;
9187: GO 9218
// for i in tmp do
9189: LD_ADDR_VAR 0 1
9193: PUSH
9194: LD_VAR 0 2
9198: PUSH
9199: FOR_IN
9200: IFFALSE 9216
// SetBLevel ( i , 10 ) ;
9202: LD_VAR 0 1
9206: PPUSH
9207: LD_INT 10
9209: PPUSH
9210: CALL_OW 241
9214: GO 9199
9216: POP
9217: POP
// end ;
9218: PPOPN 2
9220: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
9221: LD_EXP 7
9225: PUSH
9226: LD_EXP 24
9230: AND
9231: IFFALSE 9342
9233: GO 9235
9235: DISABLE
9236: LD_INT 0
9238: PPUSH
9239: PPUSH
9240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
9241: LD_ADDR_VAR 0 3
9245: PUSH
9246: LD_INT 22
9248: PUSH
9249: LD_OWVAR 2
9253: PUSH
9254: EMPTY
9255: LIST
9256: LIST
9257: PUSH
9258: LD_INT 25
9260: PUSH
9261: LD_INT 1
9263: PUSH
9264: EMPTY
9265: LIST
9266: LIST
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: PPUSH
9272: CALL_OW 69
9276: ST_TO_ADDR
// if not tmp then
9277: LD_VAR 0 3
9281: NOT
9282: IFFALSE 9286
// exit ;
9284: GO 9342
// un := tmp [ rand ( 1 , tmp ) ] ;
9286: LD_ADDR_VAR 0 2
9290: PUSH
9291: LD_VAR 0 3
9295: PUSH
9296: LD_INT 1
9298: PPUSH
9299: LD_VAR 0 3
9303: PPUSH
9304: CALL_OW 12
9308: ARRAY
9309: ST_TO_ADDR
// if Crawls ( un ) then
9310: LD_VAR 0 2
9314: PPUSH
9315: CALL_OW 318
9319: IFFALSE 9330
// ComWalk ( un ) ;
9321: LD_VAR 0 2
9325: PPUSH
9326: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9330: LD_VAR 0 2
9334: PPUSH
9335: LD_INT 5
9337: PPUSH
9338: CALL_OW 336
// end ;
9342: PPOPN 3
9344: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9345: LD_EXP 7
9349: PUSH
9350: LD_EXP 25
9354: AND
9355: PUSH
9356: LD_OWVAR 67
9360: PUSH
9361: LD_INT 4
9363: LESS
9364: AND
9365: IFFALSE 9384
9367: GO 9369
9369: DISABLE
// begin Difficulty := Difficulty + 1 ;
9370: LD_ADDR_OWVAR 67
9374: PUSH
9375: LD_OWVAR 67
9379: PUSH
9380: LD_INT 1
9382: PLUS
9383: ST_TO_ADDR
// end ;
9384: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9385: LD_EXP 7
9389: PUSH
9390: LD_EXP 26
9394: AND
9395: IFFALSE 9498
9397: GO 9399
9399: DISABLE
9400: LD_INT 0
9402: PPUSH
// begin for i := 1 to 5 do
9403: LD_ADDR_VAR 0 1
9407: PUSH
9408: DOUBLE
9409: LD_INT 1
9411: DEC
9412: ST_TO_ADDR
9413: LD_INT 5
9415: PUSH
9416: FOR_TO
9417: IFFALSE 9496
// begin uc_nation := nation_nature ;
9419: LD_ADDR_OWVAR 21
9423: PUSH
9424: LD_INT 0
9426: ST_TO_ADDR
// uc_side := 0 ;
9427: LD_ADDR_OWVAR 20
9431: PUSH
9432: LD_INT 0
9434: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9435: LD_ADDR_OWVAR 29
9439: PUSH
9440: LD_INT 12
9442: PUSH
9443: LD_INT 12
9445: PUSH
9446: EMPTY
9447: LIST
9448: LIST
9449: ST_TO_ADDR
// hc_agressivity := 20 ;
9450: LD_ADDR_OWVAR 35
9454: PUSH
9455: LD_INT 20
9457: ST_TO_ADDR
// hc_class := class_tiger ;
9458: LD_ADDR_OWVAR 28
9462: PUSH
9463: LD_INT 14
9465: ST_TO_ADDR
// hc_gallery :=  ;
9466: LD_ADDR_OWVAR 33
9470: PUSH
9471: LD_STRING 
9473: ST_TO_ADDR
// hc_name :=  ;
9474: LD_ADDR_OWVAR 26
9478: PUSH
9479: LD_STRING 
9481: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9482: CALL_OW 44
9486: PPUSH
9487: LD_INT 0
9489: PPUSH
9490: CALL_OW 51
// end ;
9494: GO 9416
9496: POP
9497: POP
// end ;
9498: PPOPN 1
9500: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9501: LD_EXP 7
9505: PUSH
9506: LD_EXP 27
9510: AND
9511: IFFALSE 9520
9513: GO 9515
9515: DISABLE
// StreamSibBomb ;
9516: CALL 9521 0 0
9520: END
// export function StreamSibBomb ; var i , x , y ; begin
9521: LD_INT 0
9523: PPUSH
9524: PPUSH
9525: PPUSH
9526: PPUSH
// result := false ;
9527: LD_ADDR_VAR 0 1
9531: PUSH
9532: LD_INT 0
9534: ST_TO_ADDR
// for i := 1 to 16 do
9535: LD_ADDR_VAR 0 2
9539: PUSH
9540: DOUBLE
9541: LD_INT 1
9543: DEC
9544: ST_TO_ADDR
9545: LD_INT 16
9547: PUSH
9548: FOR_TO
9549: IFFALSE 9748
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9551: LD_ADDR_VAR 0 3
9555: PUSH
9556: LD_INT 10
9558: PUSH
9559: LD_INT 20
9561: PUSH
9562: LD_INT 30
9564: PUSH
9565: LD_INT 40
9567: PUSH
9568: LD_INT 50
9570: PUSH
9571: LD_INT 60
9573: PUSH
9574: LD_INT 70
9576: PUSH
9577: LD_INT 80
9579: PUSH
9580: LD_INT 90
9582: PUSH
9583: LD_INT 100
9585: PUSH
9586: LD_INT 110
9588: PUSH
9589: LD_INT 120
9591: PUSH
9592: LD_INT 130
9594: PUSH
9595: LD_INT 140
9597: PUSH
9598: LD_INT 150
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: PUSH
9618: LD_INT 1
9620: PPUSH
9621: LD_INT 15
9623: PPUSH
9624: CALL_OW 12
9628: ARRAY
9629: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9630: LD_ADDR_VAR 0 4
9634: PUSH
9635: LD_INT 10
9637: PUSH
9638: LD_INT 20
9640: PUSH
9641: LD_INT 30
9643: PUSH
9644: LD_INT 40
9646: PUSH
9647: LD_INT 50
9649: PUSH
9650: LD_INT 60
9652: PUSH
9653: LD_INT 70
9655: PUSH
9656: LD_INT 80
9658: PUSH
9659: LD_INT 90
9661: PUSH
9662: LD_INT 100
9664: PUSH
9665: LD_INT 110
9667: PUSH
9668: LD_INT 120
9670: PUSH
9671: LD_INT 130
9673: PUSH
9674: LD_INT 140
9676: PUSH
9677: LD_INT 150
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: PUSH
9697: LD_INT 1
9699: PPUSH
9700: LD_INT 15
9702: PPUSH
9703: CALL_OW 12
9707: ARRAY
9708: ST_TO_ADDR
// if ValidHex ( x , y ) then
9709: LD_VAR 0 3
9713: PPUSH
9714: LD_VAR 0 4
9718: PPUSH
9719: CALL_OW 488
9723: IFFALSE 9746
// begin result := [ x , y ] ;
9725: LD_ADDR_VAR 0 1
9729: PUSH
9730: LD_VAR 0 3
9734: PUSH
9735: LD_VAR 0 4
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: ST_TO_ADDR
// break ;
9744: GO 9748
// end ; end ;
9746: GO 9548
9748: POP
9749: POP
// if result then
9750: LD_VAR 0 1
9754: IFFALSE 9814
// begin ToLua ( playSibBomb() ) ;
9756: LD_STRING playSibBomb()
9758: PPUSH
9759: CALL_OW 559
// wait ( 0 0$14 ) ;
9763: LD_INT 490
9765: PPUSH
9766: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9770: LD_VAR 0 1
9774: PUSH
9775: LD_INT 1
9777: ARRAY
9778: PPUSH
9779: LD_VAR 0 1
9783: PUSH
9784: LD_INT 2
9786: ARRAY
9787: PPUSH
9788: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9792: LD_VAR 0 1
9796: PUSH
9797: LD_INT 1
9799: ARRAY
9800: PPUSH
9801: LD_VAR 0 1
9805: PUSH
9806: LD_INT 2
9808: ARRAY
9809: PPUSH
9810: CALL_OW 429
// end ; end ;
9814: LD_VAR 0 1
9818: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9819: LD_EXP 7
9823: PUSH
9824: LD_EXP 29
9828: AND
9829: IFFALSE 9841
9831: GO 9833
9833: DISABLE
// YouLost (  ) ;
9834: LD_STRING 
9836: PPUSH
9837: CALL_OW 104
9841: END
// every 0 0$1 trigger StreamModeActive and sFog do
9842: LD_EXP 7
9846: PUSH
9847: LD_EXP 28
9851: AND
9852: IFFALSE 9866
9854: GO 9856
9856: DISABLE
// FogOff ( your_side ) ;
9857: LD_OWVAR 2
9861: PPUSH
9862: CALL_OW 344
9866: END
// every 0 0$1 trigger StreamModeActive and sSun do
9867: LD_EXP 7
9871: PUSH
9872: LD_EXP 30
9876: AND
9877: IFFALSE 9905
9879: GO 9881
9881: DISABLE
// begin solar_recharge_percent := 0 ;
9882: LD_ADDR_OWVAR 79
9886: PUSH
9887: LD_INT 0
9889: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9890: LD_INT 10500
9892: PPUSH
9893: CALL_OW 67
// solar_recharge_percent := 100 ;
9897: LD_ADDR_OWVAR 79
9901: PUSH
9902: LD_INT 100
9904: ST_TO_ADDR
// end ;
9905: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9906: LD_EXP 7
9910: PUSH
9911: LD_EXP 31
9915: AND
9916: IFFALSE 10155
9918: GO 9920
9920: DISABLE
9921: LD_INT 0
9923: PPUSH
9924: PPUSH
9925: PPUSH
// begin tmp := [ ] ;
9926: LD_ADDR_VAR 0 3
9930: PUSH
9931: EMPTY
9932: ST_TO_ADDR
// for i := 1 to 6 do
9933: LD_ADDR_VAR 0 1
9937: PUSH
9938: DOUBLE
9939: LD_INT 1
9941: DEC
9942: ST_TO_ADDR
9943: LD_INT 6
9945: PUSH
9946: FOR_TO
9947: IFFALSE 10052
// begin uc_nation := nation_nature ;
9949: LD_ADDR_OWVAR 21
9953: PUSH
9954: LD_INT 0
9956: ST_TO_ADDR
// uc_side := 0 ;
9957: LD_ADDR_OWVAR 20
9961: PUSH
9962: LD_INT 0
9964: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9965: LD_ADDR_OWVAR 29
9969: PUSH
9970: LD_INT 12
9972: PUSH
9973: LD_INT 12
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: ST_TO_ADDR
// hc_agressivity := 20 ;
9980: LD_ADDR_OWVAR 35
9984: PUSH
9985: LD_INT 20
9987: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9988: LD_ADDR_OWVAR 28
9992: PUSH
9993: LD_INT 17
9995: ST_TO_ADDR
// hc_gallery :=  ;
9996: LD_ADDR_OWVAR 33
10000: PUSH
10001: LD_STRING 
10003: ST_TO_ADDR
// hc_name :=  ;
10004: LD_ADDR_OWVAR 26
10008: PUSH
10009: LD_STRING 
10011: ST_TO_ADDR
// un := CreateHuman ;
10012: LD_ADDR_VAR 0 2
10016: PUSH
10017: CALL_OW 44
10021: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
10022: LD_VAR 0 2
10026: PPUSH
10027: LD_INT 1
10029: PPUSH
10030: CALL_OW 51
// tmp := tmp ^ un ;
10034: LD_ADDR_VAR 0 3
10038: PUSH
10039: LD_VAR 0 3
10043: PUSH
10044: LD_VAR 0 2
10048: ADD
10049: ST_TO_ADDR
// end ;
10050: GO 9946
10052: POP
10053: POP
// repeat wait ( 0 0$1 ) ;
10054: LD_INT 35
10056: PPUSH
10057: CALL_OW 67
// for un in tmp do
10061: LD_ADDR_VAR 0 2
10065: PUSH
10066: LD_VAR 0 3
10070: PUSH
10071: FOR_IN
10072: IFFALSE 10146
// begin if IsDead ( un ) then
10074: LD_VAR 0 2
10078: PPUSH
10079: CALL_OW 301
10083: IFFALSE 10103
// begin tmp := tmp diff un ;
10085: LD_ADDR_VAR 0 3
10089: PUSH
10090: LD_VAR 0 3
10094: PUSH
10095: LD_VAR 0 2
10099: DIFF
10100: ST_TO_ADDR
// continue ;
10101: GO 10071
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
10103: LD_VAR 0 2
10107: PPUSH
10108: LD_INT 3
10110: PUSH
10111: LD_INT 22
10113: PUSH
10114: LD_INT 0
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: PPUSH
10125: CALL_OW 69
10129: PPUSH
10130: LD_VAR 0 2
10134: PPUSH
10135: CALL_OW 74
10139: PPUSH
10140: CALL_OW 115
// end ;
10144: GO 10071
10146: POP
10147: POP
// until not tmp ;
10148: LD_VAR 0 3
10152: NOT
10153: IFFALSE 10054
// end ;
10155: PPOPN 3
10157: END
// every 0 0$1 trigger StreamModeActive and sTroll do
10158: LD_EXP 7
10162: PUSH
10163: LD_EXP 32
10167: AND
10168: IFFALSE 10222
10170: GO 10172
10172: DISABLE
// begin ToLua ( displayTroll(); ) ;
10173: LD_STRING displayTroll();
10175: PPUSH
10176: CALL_OW 559
// wait ( 3 3$00 ) ;
10180: LD_INT 6300
10182: PPUSH
10183: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10187: LD_STRING hideTroll();
10189: PPUSH
10190: CALL_OW 559
// wait ( 1 1$00 ) ;
10194: LD_INT 2100
10196: PPUSH
10197: CALL_OW 67
// ToLua ( displayTroll(); ) ;
10201: LD_STRING displayTroll();
10203: PPUSH
10204: CALL_OW 559
// wait ( 1 1$00 ) ;
10208: LD_INT 2100
10210: PPUSH
10211: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10215: LD_STRING hideTroll();
10217: PPUSH
10218: CALL_OW 559
// end ;
10222: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
10223: LD_EXP 7
10227: PUSH
10228: LD_EXP 33
10232: AND
10233: IFFALSE 10296
10235: GO 10237
10237: DISABLE
10238: LD_INT 0
10240: PPUSH
// begin p := 0 ;
10241: LD_ADDR_VAR 0 1
10245: PUSH
10246: LD_INT 0
10248: ST_TO_ADDR
// repeat game_speed := 1 ;
10249: LD_ADDR_OWVAR 65
10253: PUSH
10254: LD_INT 1
10256: ST_TO_ADDR
// wait ( 0 0$1 ) ;
10257: LD_INT 35
10259: PPUSH
10260: CALL_OW 67
// p := p + 1 ;
10264: LD_ADDR_VAR 0 1
10268: PUSH
10269: LD_VAR 0 1
10273: PUSH
10274: LD_INT 1
10276: PLUS
10277: ST_TO_ADDR
// until p >= 60 ;
10278: LD_VAR 0 1
10282: PUSH
10283: LD_INT 60
10285: GREATEREQUAL
10286: IFFALSE 10249
// game_speed := 4 ;
10288: LD_ADDR_OWVAR 65
10292: PUSH
10293: LD_INT 4
10295: ST_TO_ADDR
// end ;
10296: PPOPN 1
10298: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
10299: LD_EXP 7
10303: PUSH
10304: LD_EXP 34
10308: AND
10309: IFFALSE 10455
10311: GO 10313
10313: DISABLE
10314: LD_INT 0
10316: PPUSH
10317: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10318: LD_ADDR_VAR 0 1
10322: PUSH
10323: LD_INT 22
10325: PUSH
10326: LD_OWVAR 2
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: LD_INT 2
10337: PUSH
10338: LD_INT 30
10340: PUSH
10341: LD_INT 0
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: PUSH
10348: LD_INT 30
10350: PUSH
10351: LD_INT 1
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: LIST
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PPUSH
10367: CALL_OW 69
10371: ST_TO_ADDR
// if not depot then
10372: LD_VAR 0 1
10376: NOT
10377: IFFALSE 10381
// exit ;
10379: GO 10455
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10381: LD_ADDR_VAR 0 2
10385: PUSH
10386: LD_VAR 0 1
10390: PUSH
10391: LD_INT 1
10393: PPUSH
10394: LD_VAR 0 1
10398: PPUSH
10399: CALL_OW 12
10403: ARRAY
10404: PPUSH
10405: CALL_OW 274
10409: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10410: LD_VAR 0 2
10414: PPUSH
10415: LD_INT 1
10417: PPUSH
10418: LD_INT 0
10420: PPUSH
10421: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10425: LD_VAR 0 2
10429: PPUSH
10430: LD_INT 2
10432: PPUSH
10433: LD_INT 0
10435: PPUSH
10436: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10440: LD_VAR 0 2
10444: PPUSH
10445: LD_INT 3
10447: PPUSH
10448: LD_INT 0
10450: PPUSH
10451: CALL_OW 277
// end ;
10455: PPOPN 2
10457: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10458: LD_EXP 7
10462: PUSH
10463: LD_EXP 35
10467: AND
10468: IFFALSE 10565
10470: GO 10472
10472: DISABLE
10473: LD_INT 0
10475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10476: LD_ADDR_VAR 0 1
10480: PUSH
10481: LD_INT 22
10483: PUSH
10484: LD_OWVAR 2
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: PUSH
10493: LD_INT 21
10495: PUSH
10496: LD_INT 1
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 3
10505: PUSH
10506: LD_INT 23
10508: PUSH
10509: LD_INT 0
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: LIST
10524: PPUSH
10525: CALL_OW 69
10529: ST_TO_ADDR
// if not tmp then
10530: LD_VAR 0 1
10534: NOT
10535: IFFALSE 10539
// exit ;
10537: GO 10565
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10539: LD_VAR 0 1
10543: PUSH
10544: LD_INT 1
10546: PPUSH
10547: LD_VAR 0 1
10551: PPUSH
10552: CALL_OW 12
10556: ARRAY
10557: PPUSH
10558: LD_INT 200
10560: PPUSH
10561: CALL_OW 234
// end ;
10565: PPOPN 1
10567: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10568: LD_EXP 7
10572: PUSH
10573: LD_EXP 36
10577: AND
10578: IFFALSE 10657
10580: GO 10582
10582: DISABLE
10583: LD_INT 0
10585: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10586: LD_ADDR_VAR 0 1
10590: PUSH
10591: LD_INT 22
10593: PUSH
10594: LD_OWVAR 2
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PUSH
10603: LD_INT 21
10605: PUSH
10606: LD_INT 2
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PPUSH
10617: CALL_OW 69
10621: ST_TO_ADDR
// if not tmp then
10622: LD_VAR 0 1
10626: NOT
10627: IFFALSE 10631
// exit ;
10629: GO 10657
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10631: LD_VAR 0 1
10635: PUSH
10636: LD_INT 1
10638: PPUSH
10639: LD_VAR 0 1
10643: PPUSH
10644: CALL_OW 12
10648: ARRAY
10649: PPUSH
10650: LD_INT 60
10652: PPUSH
10653: CALL_OW 234
// end ;
10657: PPOPN 1
10659: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10660: LD_EXP 7
10664: PUSH
10665: LD_EXP 37
10669: AND
10670: IFFALSE 10769
10672: GO 10674
10674: DISABLE
10675: LD_INT 0
10677: PPUSH
10678: PPUSH
// begin enable ;
10679: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10680: LD_ADDR_VAR 0 1
10684: PUSH
10685: LD_INT 22
10687: PUSH
10688: LD_OWVAR 2
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 61
10699: PUSH
10700: EMPTY
10701: LIST
10702: PUSH
10703: LD_INT 33
10705: PUSH
10706: LD_INT 2
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: LIST
10717: PPUSH
10718: CALL_OW 69
10722: ST_TO_ADDR
// if not tmp then
10723: LD_VAR 0 1
10727: NOT
10728: IFFALSE 10732
// exit ;
10730: GO 10769
// for i in tmp do
10732: LD_ADDR_VAR 0 2
10736: PUSH
10737: LD_VAR 0 1
10741: PUSH
10742: FOR_IN
10743: IFFALSE 10767
// if IsControledBy ( i ) then
10745: LD_VAR 0 2
10749: PPUSH
10750: CALL_OW 312
10754: IFFALSE 10765
// ComUnlink ( i ) ;
10756: LD_VAR 0 2
10760: PPUSH
10761: CALL_OW 136
10765: GO 10742
10767: POP
10768: POP
// end ;
10769: PPOPN 2
10771: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10772: LD_EXP 7
10776: PUSH
10777: LD_EXP 38
10781: AND
10782: IFFALSE 10922
10784: GO 10786
10786: DISABLE
10787: LD_INT 0
10789: PPUSH
10790: PPUSH
// begin ToLua ( displayPowell(); ) ;
10791: LD_STRING displayPowell();
10793: PPUSH
10794: CALL_OW 559
// uc_side := 0 ;
10798: LD_ADDR_OWVAR 20
10802: PUSH
10803: LD_INT 0
10805: ST_TO_ADDR
// uc_nation := 2 ;
10806: LD_ADDR_OWVAR 21
10810: PUSH
10811: LD_INT 2
10813: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10814: LD_ADDR_OWVAR 37
10818: PUSH
10819: LD_INT 14
10821: ST_TO_ADDR
// vc_engine := engine_siberite ;
10822: LD_ADDR_OWVAR 39
10826: PUSH
10827: LD_INT 3
10829: ST_TO_ADDR
// vc_control := control_apeman ;
10830: LD_ADDR_OWVAR 38
10834: PUSH
10835: LD_INT 5
10837: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10838: LD_ADDR_OWVAR 40
10842: PUSH
10843: LD_INT 29
10845: ST_TO_ADDR
// un := CreateVehicle ;
10846: LD_ADDR_VAR 0 2
10850: PUSH
10851: CALL_OW 45
10855: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10856: LD_VAR 0 2
10860: PPUSH
10861: LD_INT 1
10863: PPUSH
10864: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10868: LD_INT 35
10870: PPUSH
10871: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10875: LD_VAR 0 2
10879: PPUSH
10880: LD_INT 22
10882: PUSH
10883: LD_OWVAR 2
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: PPUSH
10892: CALL_OW 69
10896: PPUSH
10897: LD_VAR 0 2
10901: PPUSH
10902: CALL_OW 74
10906: PPUSH
10907: CALL_OW 115
// until IsDead ( un ) ;
10911: LD_VAR 0 2
10915: PPUSH
10916: CALL_OW 301
10920: IFFALSE 10868
// end ;
10922: PPOPN 2
10924: END
// every 0 0$1 trigger StreamModeActive and sStu do
10925: LD_EXP 7
10929: PUSH
10930: LD_EXP 46
10934: AND
10935: IFFALSE 10951
10937: GO 10939
10939: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10940: LD_STRING displayStucuk();
10942: PPUSH
10943: CALL_OW 559
// ResetFog ;
10947: CALL_OW 335
// end ;
10951: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10952: LD_EXP 7
10956: PUSH
10957: LD_EXP 39
10961: AND
10962: IFFALSE 11103
10964: GO 10966
10966: DISABLE
10967: LD_INT 0
10969: PPUSH
10970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10971: LD_ADDR_VAR 0 2
10975: PUSH
10976: LD_INT 22
10978: PUSH
10979: LD_OWVAR 2
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: PUSH
10988: LD_INT 21
10990: PUSH
10991: LD_INT 1
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: PUSH
10998: EMPTY
10999: LIST
11000: LIST
11001: PPUSH
11002: CALL_OW 69
11006: ST_TO_ADDR
// if not tmp then
11007: LD_VAR 0 2
11011: NOT
11012: IFFALSE 11016
// exit ;
11014: GO 11103
// un := tmp [ rand ( 1 , tmp ) ] ;
11016: LD_ADDR_VAR 0 1
11020: PUSH
11021: LD_VAR 0 2
11025: PUSH
11026: LD_INT 1
11028: PPUSH
11029: LD_VAR 0 2
11033: PPUSH
11034: CALL_OW 12
11038: ARRAY
11039: ST_TO_ADDR
// SetSide ( un , 0 ) ;
11040: LD_VAR 0 1
11044: PPUSH
11045: LD_INT 0
11047: PPUSH
11048: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
11052: LD_VAR 0 1
11056: PPUSH
11057: LD_OWVAR 3
11061: PUSH
11062: LD_VAR 0 1
11066: DIFF
11067: PPUSH
11068: LD_VAR 0 1
11072: PPUSH
11073: CALL_OW 74
11077: PPUSH
11078: CALL_OW 115
// wait ( 0 0$20 ) ;
11082: LD_INT 700
11084: PPUSH
11085: CALL_OW 67
// SetSide ( un , your_side ) ;
11089: LD_VAR 0 1
11093: PPUSH
11094: LD_OWVAR 2
11098: PPUSH
11099: CALL_OW 235
// end ;
11103: PPOPN 2
11105: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
11106: LD_EXP 7
11110: PUSH
11111: LD_EXP 40
11115: AND
11116: IFFALSE 11222
11118: GO 11120
11120: DISABLE
11121: LD_INT 0
11123: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11124: LD_ADDR_VAR 0 1
11128: PUSH
11129: LD_INT 22
11131: PUSH
11132: LD_OWVAR 2
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: PUSH
11141: LD_INT 2
11143: PUSH
11144: LD_INT 30
11146: PUSH
11147: LD_INT 0
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: PUSH
11154: LD_INT 30
11156: PUSH
11157: LD_INT 1
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: LIST
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: PPUSH
11173: CALL_OW 69
11177: ST_TO_ADDR
// if not depot then
11178: LD_VAR 0 1
11182: NOT
11183: IFFALSE 11187
// exit ;
11185: GO 11222
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
11187: LD_VAR 0 1
11191: PUSH
11192: LD_INT 1
11194: ARRAY
11195: PPUSH
11196: CALL_OW 250
11200: PPUSH
11201: LD_VAR 0 1
11205: PUSH
11206: LD_INT 1
11208: ARRAY
11209: PPUSH
11210: CALL_OW 251
11214: PPUSH
11215: LD_INT 70
11217: PPUSH
11218: CALL_OW 495
// end ;
11222: PPOPN 1
11224: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
11225: LD_EXP 7
11229: PUSH
11230: LD_EXP 41
11234: AND
11235: IFFALSE 11446
11237: GO 11239
11239: DISABLE
11240: LD_INT 0
11242: PPUSH
11243: PPUSH
11244: PPUSH
11245: PPUSH
11246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11247: LD_ADDR_VAR 0 5
11251: PUSH
11252: LD_INT 22
11254: PUSH
11255: LD_OWVAR 2
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: PUSH
11264: LD_INT 21
11266: PUSH
11267: LD_INT 1
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PPUSH
11278: CALL_OW 69
11282: ST_TO_ADDR
// if not tmp then
11283: LD_VAR 0 5
11287: NOT
11288: IFFALSE 11292
// exit ;
11290: GO 11446
// for i in tmp do
11292: LD_ADDR_VAR 0 1
11296: PUSH
11297: LD_VAR 0 5
11301: PUSH
11302: FOR_IN
11303: IFFALSE 11444
// begin d := rand ( 0 , 5 ) ;
11305: LD_ADDR_VAR 0 4
11309: PUSH
11310: LD_INT 0
11312: PPUSH
11313: LD_INT 5
11315: PPUSH
11316: CALL_OW 12
11320: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
11321: LD_ADDR_VAR 0 2
11325: PUSH
11326: LD_VAR 0 1
11330: PPUSH
11331: CALL_OW 250
11335: PPUSH
11336: LD_VAR 0 4
11340: PPUSH
11341: LD_INT 3
11343: PPUSH
11344: LD_INT 12
11346: PPUSH
11347: CALL_OW 12
11351: PPUSH
11352: CALL_OW 272
11356: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11357: LD_ADDR_VAR 0 3
11361: PUSH
11362: LD_VAR 0 1
11366: PPUSH
11367: CALL_OW 251
11371: PPUSH
11372: LD_VAR 0 4
11376: PPUSH
11377: LD_INT 3
11379: PPUSH
11380: LD_INT 12
11382: PPUSH
11383: CALL_OW 12
11387: PPUSH
11388: CALL_OW 273
11392: ST_TO_ADDR
// if ValidHex ( x , y ) then
11393: LD_VAR 0 2
11397: PPUSH
11398: LD_VAR 0 3
11402: PPUSH
11403: CALL_OW 488
11407: IFFALSE 11442
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11409: LD_VAR 0 1
11413: PPUSH
11414: LD_VAR 0 2
11418: PPUSH
11419: LD_VAR 0 3
11423: PPUSH
11424: LD_INT 3
11426: PPUSH
11427: LD_INT 6
11429: PPUSH
11430: CALL_OW 12
11434: PPUSH
11435: LD_INT 1
11437: PPUSH
11438: CALL_OW 483
// end ;
11442: GO 11302
11444: POP
11445: POP
// end ;
11446: PPOPN 5
11448: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11449: LD_EXP 7
11453: PUSH
11454: LD_EXP 42
11458: AND
11459: IFFALSE 11553
11461: GO 11463
11463: DISABLE
11464: LD_INT 0
11466: PPUSH
11467: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11468: LD_ADDR_VAR 0 2
11472: PUSH
11473: LD_INT 22
11475: PUSH
11476: LD_OWVAR 2
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: PUSH
11485: LD_INT 32
11487: PUSH
11488: LD_INT 1
11490: PUSH
11491: EMPTY
11492: LIST
11493: LIST
11494: PUSH
11495: LD_INT 21
11497: PUSH
11498: LD_INT 2
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: LIST
11509: PPUSH
11510: CALL_OW 69
11514: ST_TO_ADDR
// if not tmp then
11515: LD_VAR 0 2
11519: NOT
11520: IFFALSE 11524
// exit ;
11522: GO 11553
// for i in tmp do
11524: LD_ADDR_VAR 0 1
11528: PUSH
11529: LD_VAR 0 2
11533: PUSH
11534: FOR_IN
11535: IFFALSE 11551
// SetFuel ( i , 0 ) ;
11537: LD_VAR 0 1
11541: PPUSH
11542: LD_INT 0
11544: PPUSH
11545: CALL_OW 240
11549: GO 11534
11551: POP
11552: POP
// end ;
11553: PPOPN 2
11555: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11556: LD_EXP 7
11560: PUSH
11561: LD_EXP 43
11565: AND
11566: IFFALSE 11632
11568: GO 11570
11570: DISABLE
11571: LD_INT 0
11573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11574: LD_ADDR_VAR 0 1
11578: PUSH
11579: LD_INT 22
11581: PUSH
11582: LD_OWVAR 2
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: LD_INT 30
11593: PUSH
11594: LD_INT 29
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: PPUSH
11605: CALL_OW 69
11609: ST_TO_ADDR
// if not tmp then
11610: LD_VAR 0 1
11614: NOT
11615: IFFALSE 11619
// exit ;
11617: GO 11632
// DestroyUnit ( tmp [ 1 ] ) ;
11619: LD_VAR 0 1
11623: PUSH
11624: LD_INT 1
11626: ARRAY
11627: PPUSH
11628: CALL_OW 65
// end ;
11632: PPOPN 1
11634: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11635: LD_EXP 7
11639: PUSH
11640: LD_EXP 45
11644: AND
11645: IFFALSE 11774
11647: GO 11649
11649: DISABLE
11650: LD_INT 0
11652: PPUSH
// begin uc_side := 0 ;
11653: LD_ADDR_OWVAR 20
11657: PUSH
11658: LD_INT 0
11660: ST_TO_ADDR
// uc_nation := nation_arabian ;
11661: LD_ADDR_OWVAR 21
11665: PUSH
11666: LD_INT 2
11668: ST_TO_ADDR
// hc_gallery :=  ;
11669: LD_ADDR_OWVAR 33
11673: PUSH
11674: LD_STRING 
11676: ST_TO_ADDR
// hc_name :=  ;
11677: LD_ADDR_OWVAR 26
11681: PUSH
11682: LD_STRING 
11684: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11685: LD_INT 1
11687: PPUSH
11688: LD_INT 11
11690: PPUSH
11691: LD_INT 10
11693: PPUSH
11694: CALL_OW 380
// un := CreateHuman ;
11698: LD_ADDR_VAR 0 1
11702: PUSH
11703: CALL_OW 44
11707: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11708: LD_VAR 0 1
11712: PPUSH
11713: LD_INT 1
11715: PPUSH
11716: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11720: LD_INT 35
11722: PPUSH
11723: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11727: LD_VAR 0 1
11731: PPUSH
11732: LD_INT 22
11734: PUSH
11735: LD_OWVAR 2
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PPUSH
11744: CALL_OW 69
11748: PPUSH
11749: LD_VAR 0 1
11753: PPUSH
11754: CALL_OW 74
11758: PPUSH
11759: CALL_OW 115
// until IsDead ( un ) ;
11763: LD_VAR 0 1
11767: PPUSH
11768: CALL_OW 301
11772: IFFALSE 11720
// end ;
11774: PPOPN 1
11776: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11777: LD_EXP 7
11781: PUSH
11782: LD_EXP 47
11786: AND
11787: IFFALSE 11799
11789: GO 11791
11791: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11792: LD_STRING earthquake(getX(game), 0, 32)
11794: PPUSH
11795: CALL_OW 559
11799: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11800: LD_EXP 7
11804: PUSH
11805: LD_EXP 48
11809: AND
11810: IFFALSE 11901
11812: GO 11814
11814: DISABLE
11815: LD_INT 0
11817: PPUSH
// begin enable ;
11818: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11819: LD_ADDR_VAR 0 1
11823: PUSH
11824: LD_INT 22
11826: PUSH
11827: LD_OWVAR 2
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PUSH
11836: LD_INT 21
11838: PUSH
11839: LD_INT 2
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: LD_INT 33
11848: PUSH
11849: LD_INT 3
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: LIST
11860: PPUSH
11861: CALL_OW 69
11865: ST_TO_ADDR
// if not tmp then
11866: LD_VAR 0 1
11870: NOT
11871: IFFALSE 11875
// exit ;
11873: GO 11901
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11875: LD_VAR 0 1
11879: PUSH
11880: LD_INT 1
11882: PPUSH
11883: LD_VAR 0 1
11887: PPUSH
11888: CALL_OW 12
11892: ARRAY
11893: PPUSH
11894: LD_INT 1
11896: PPUSH
11897: CALL_OW 234
// end ;
11901: PPOPN 1
11903: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11904: LD_EXP 7
11908: PUSH
11909: LD_EXP 49
11913: AND
11914: IFFALSE 12055
11916: GO 11918
11918: DISABLE
11919: LD_INT 0
11921: PPUSH
11922: PPUSH
11923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11924: LD_ADDR_VAR 0 3
11928: PUSH
11929: LD_INT 22
11931: PUSH
11932: LD_OWVAR 2
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: PUSH
11941: LD_INT 25
11943: PUSH
11944: LD_INT 1
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PPUSH
11955: CALL_OW 69
11959: ST_TO_ADDR
// if not tmp then
11960: LD_VAR 0 3
11964: NOT
11965: IFFALSE 11969
// exit ;
11967: GO 12055
// un := tmp [ rand ( 1 , tmp ) ] ;
11969: LD_ADDR_VAR 0 2
11973: PUSH
11974: LD_VAR 0 3
11978: PUSH
11979: LD_INT 1
11981: PPUSH
11982: LD_VAR 0 3
11986: PPUSH
11987: CALL_OW 12
11991: ARRAY
11992: ST_TO_ADDR
// if Crawls ( un ) then
11993: LD_VAR 0 2
11997: PPUSH
11998: CALL_OW 318
12002: IFFALSE 12013
// ComWalk ( un ) ;
12004: LD_VAR 0 2
12008: PPUSH
12009: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
12013: LD_VAR 0 2
12017: PPUSH
12018: LD_INT 9
12020: PPUSH
12021: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
12025: LD_INT 28
12027: PPUSH
12028: LD_OWVAR 2
12032: PPUSH
12033: LD_INT 2
12035: PPUSH
12036: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
12040: LD_INT 29
12042: PPUSH
12043: LD_OWVAR 2
12047: PPUSH
12048: LD_INT 2
12050: PPUSH
12051: CALL_OW 322
// end ;
12055: PPOPN 3
12057: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
12058: LD_EXP 7
12062: PUSH
12063: LD_EXP 50
12067: AND
12068: IFFALSE 12179
12070: GO 12072
12072: DISABLE
12073: LD_INT 0
12075: PPUSH
12076: PPUSH
12077: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12078: LD_ADDR_VAR 0 3
12082: PUSH
12083: LD_INT 22
12085: PUSH
12086: LD_OWVAR 2
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PUSH
12095: LD_INT 25
12097: PUSH
12098: LD_INT 1
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PPUSH
12109: CALL_OW 69
12113: ST_TO_ADDR
// if not tmp then
12114: LD_VAR 0 3
12118: NOT
12119: IFFALSE 12123
// exit ;
12121: GO 12179
// un := tmp [ rand ( 1 , tmp ) ] ;
12123: LD_ADDR_VAR 0 2
12127: PUSH
12128: LD_VAR 0 3
12132: PUSH
12133: LD_INT 1
12135: PPUSH
12136: LD_VAR 0 3
12140: PPUSH
12141: CALL_OW 12
12145: ARRAY
12146: ST_TO_ADDR
// if Crawls ( un ) then
12147: LD_VAR 0 2
12151: PPUSH
12152: CALL_OW 318
12156: IFFALSE 12167
// ComWalk ( un ) ;
12158: LD_VAR 0 2
12162: PPUSH
12163: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12167: LD_VAR 0 2
12171: PPUSH
12172: LD_INT 8
12174: PPUSH
12175: CALL_OW 336
// end ;
12179: PPOPN 3
12181: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
12182: LD_EXP 7
12186: PUSH
12187: LD_EXP 51
12191: AND
12192: IFFALSE 12336
12194: GO 12196
12196: DISABLE
12197: LD_INT 0
12199: PPUSH
12200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
12201: LD_ADDR_VAR 0 2
12205: PUSH
12206: LD_INT 22
12208: PUSH
12209: LD_OWVAR 2
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: LD_INT 21
12220: PUSH
12221: LD_INT 2
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: PUSH
12228: LD_INT 2
12230: PUSH
12231: LD_INT 34
12233: PUSH
12234: LD_INT 12
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PUSH
12241: LD_INT 34
12243: PUSH
12244: LD_INT 51
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PUSH
12251: LD_INT 34
12253: PUSH
12254: LD_INT 32
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: PUSH
12267: EMPTY
12268: LIST
12269: LIST
12270: LIST
12271: PPUSH
12272: CALL_OW 69
12276: ST_TO_ADDR
// if not tmp then
12277: LD_VAR 0 2
12281: NOT
12282: IFFALSE 12286
// exit ;
12284: GO 12336
// for i in tmp do
12286: LD_ADDR_VAR 0 1
12290: PUSH
12291: LD_VAR 0 2
12295: PUSH
12296: FOR_IN
12297: IFFALSE 12334
// if GetCargo ( i , mat_artifact ) = 0 then
12299: LD_VAR 0 1
12303: PPUSH
12304: LD_INT 4
12306: PPUSH
12307: CALL_OW 289
12311: PUSH
12312: LD_INT 0
12314: EQUAL
12315: IFFALSE 12332
// SetCargo ( i , mat_siberit , 100 ) ;
12317: LD_VAR 0 1
12321: PPUSH
12322: LD_INT 3
12324: PPUSH
12325: LD_INT 100
12327: PPUSH
12328: CALL_OW 290
12332: GO 12296
12334: POP
12335: POP
// end ;
12336: PPOPN 2
12338: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12339: LD_EXP 7
12343: PUSH
12344: LD_EXP 52
12348: AND
12349: IFFALSE 12532
12351: GO 12353
12353: DISABLE
12354: LD_INT 0
12356: PPUSH
12357: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12358: LD_ADDR_VAR 0 2
12362: PUSH
12363: LD_INT 22
12365: PUSH
12366: LD_OWVAR 2
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PPUSH
12375: CALL_OW 69
12379: ST_TO_ADDR
// if not tmp then
12380: LD_VAR 0 2
12384: NOT
12385: IFFALSE 12389
// exit ;
12387: GO 12532
// for i := 1 to 2 do
12389: LD_ADDR_VAR 0 1
12393: PUSH
12394: DOUBLE
12395: LD_INT 1
12397: DEC
12398: ST_TO_ADDR
12399: LD_INT 2
12401: PUSH
12402: FOR_TO
12403: IFFALSE 12530
// begin uc_side := your_side ;
12405: LD_ADDR_OWVAR 20
12409: PUSH
12410: LD_OWVAR 2
12414: ST_TO_ADDR
// uc_nation := nation_american ;
12415: LD_ADDR_OWVAR 21
12419: PUSH
12420: LD_INT 1
12422: ST_TO_ADDR
// vc_chassis := us_morphling ;
12423: LD_ADDR_OWVAR 37
12427: PUSH
12428: LD_INT 5
12430: ST_TO_ADDR
// vc_engine := engine_siberite ;
12431: LD_ADDR_OWVAR 39
12435: PUSH
12436: LD_INT 3
12438: ST_TO_ADDR
// vc_control := control_computer ;
12439: LD_ADDR_OWVAR 38
12443: PUSH
12444: LD_INT 3
12446: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12447: LD_ADDR_OWVAR 40
12451: PUSH
12452: LD_INT 10
12454: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12455: LD_VAR 0 2
12459: PUSH
12460: LD_INT 1
12462: ARRAY
12463: PPUSH
12464: CALL_OW 310
12468: NOT
12469: IFFALSE 12516
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12471: CALL_OW 45
12475: PPUSH
12476: LD_VAR 0 2
12480: PUSH
12481: LD_INT 1
12483: ARRAY
12484: PPUSH
12485: CALL_OW 250
12489: PPUSH
12490: LD_VAR 0 2
12494: PUSH
12495: LD_INT 1
12497: ARRAY
12498: PPUSH
12499: CALL_OW 251
12503: PPUSH
12504: LD_INT 12
12506: PPUSH
12507: LD_INT 1
12509: PPUSH
12510: CALL_OW 50
12514: GO 12528
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12516: CALL_OW 45
12520: PPUSH
12521: LD_INT 1
12523: PPUSH
12524: CALL_OW 51
// end ;
12528: GO 12402
12530: POP
12531: POP
// end ;
12532: PPOPN 2
12534: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12535: LD_EXP 7
12539: PUSH
12540: LD_EXP 53
12544: AND
12545: IFFALSE 12767
12547: GO 12549
12549: DISABLE
12550: LD_INT 0
12552: PPUSH
12553: PPUSH
12554: PPUSH
12555: PPUSH
12556: PPUSH
12557: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12558: LD_ADDR_VAR 0 6
12562: PUSH
12563: LD_INT 22
12565: PUSH
12566: LD_OWVAR 2
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PUSH
12575: LD_INT 21
12577: PUSH
12578: LD_INT 1
12580: PUSH
12581: EMPTY
12582: LIST
12583: LIST
12584: PUSH
12585: LD_INT 3
12587: PUSH
12588: LD_INT 23
12590: PUSH
12591: LD_INT 0
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: LIST
12606: PPUSH
12607: CALL_OW 69
12611: ST_TO_ADDR
// if not tmp then
12612: LD_VAR 0 6
12616: NOT
12617: IFFALSE 12621
// exit ;
12619: GO 12767
// s1 := rand ( 1 , 4 ) ;
12621: LD_ADDR_VAR 0 2
12625: PUSH
12626: LD_INT 1
12628: PPUSH
12629: LD_INT 4
12631: PPUSH
12632: CALL_OW 12
12636: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12637: LD_ADDR_VAR 0 4
12641: PUSH
12642: LD_VAR 0 6
12646: PUSH
12647: LD_INT 1
12649: ARRAY
12650: PPUSH
12651: LD_VAR 0 2
12655: PPUSH
12656: CALL_OW 259
12660: ST_TO_ADDR
// if s1 = 1 then
12661: LD_VAR 0 2
12665: PUSH
12666: LD_INT 1
12668: EQUAL
12669: IFFALSE 12689
// s2 := rand ( 2 , 4 ) else
12671: LD_ADDR_VAR 0 3
12675: PUSH
12676: LD_INT 2
12678: PPUSH
12679: LD_INT 4
12681: PPUSH
12682: CALL_OW 12
12686: ST_TO_ADDR
12687: GO 12697
// s2 := 1 ;
12689: LD_ADDR_VAR 0 3
12693: PUSH
12694: LD_INT 1
12696: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12697: LD_ADDR_VAR 0 5
12701: PUSH
12702: LD_VAR 0 6
12706: PUSH
12707: LD_INT 1
12709: ARRAY
12710: PPUSH
12711: LD_VAR 0 3
12715: PPUSH
12716: CALL_OW 259
12720: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12721: LD_VAR 0 6
12725: PUSH
12726: LD_INT 1
12728: ARRAY
12729: PPUSH
12730: LD_VAR 0 2
12734: PPUSH
12735: LD_VAR 0 5
12739: PPUSH
12740: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12744: LD_VAR 0 6
12748: PUSH
12749: LD_INT 1
12751: ARRAY
12752: PPUSH
12753: LD_VAR 0 3
12757: PPUSH
12758: LD_VAR 0 4
12762: PPUSH
12763: CALL_OW 237
// end ;
12767: PPOPN 6
12769: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12770: LD_EXP 7
12774: PUSH
12775: LD_EXP 54
12779: AND
12780: IFFALSE 12859
12782: GO 12784
12784: DISABLE
12785: LD_INT 0
12787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12788: LD_ADDR_VAR 0 1
12792: PUSH
12793: LD_INT 22
12795: PUSH
12796: LD_OWVAR 2
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: PUSH
12805: LD_INT 30
12807: PUSH
12808: LD_INT 3
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PPUSH
12819: CALL_OW 69
12823: ST_TO_ADDR
// if not tmp then
12824: LD_VAR 0 1
12828: NOT
12829: IFFALSE 12833
// exit ;
12831: GO 12859
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12833: LD_VAR 0 1
12837: PUSH
12838: LD_INT 1
12840: PPUSH
12841: LD_VAR 0 1
12845: PPUSH
12846: CALL_OW 12
12850: ARRAY
12851: PPUSH
12852: LD_INT 1
12854: PPUSH
12855: CALL_OW 234
// end ;
12859: PPOPN 1
12861: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12862: LD_EXP 7
12866: PUSH
12867: LD_EXP 55
12871: AND
12872: IFFALSE 12984
12874: GO 12876
12876: DISABLE
12877: LD_INT 0
12879: PPUSH
12880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12881: LD_ADDR_VAR 0 2
12885: PUSH
12886: LD_INT 22
12888: PUSH
12889: LD_OWVAR 2
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: PUSH
12898: LD_INT 2
12900: PUSH
12901: LD_INT 30
12903: PUSH
12904: LD_INT 27
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PUSH
12911: LD_INT 30
12913: PUSH
12914: LD_INT 26
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: PUSH
12921: LD_INT 30
12923: PUSH
12924: LD_INT 28
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: PPUSH
12941: CALL_OW 69
12945: ST_TO_ADDR
// if not tmp then
12946: LD_VAR 0 2
12950: NOT
12951: IFFALSE 12955
// exit ;
12953: GO 12984
// for i in tmp do
12955: LD_ADDR_VAR 0 1
12959: PUSH
12960: LD_VAR 0 2
12964: PUSH
12965: FOR_IN
12966: IFFALSE 12982
// SetLives ( i , 1 ) ;
12968: LD_VAR 0 1
12972: PPUSH
12973: LD_INT 1
12975: PPUSH
12976: CALL_OW 234
12980: GO 12965
12982: POP
12983: POP
// end ;
12984: PPOPN 2
12986: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12987: LD_EXP 7
12991: PUSH
12992: LD_EXP 56
12996: AND
12997: IFFALSE 13284
12999: GO 13001
13001: DISABLE
13002: LD_INT 0
13004: PPUSH
13005: PPUSH
13006: PPUSH
// begin i := rand ( 1 , 7 ) ;
13007: LD_ADDR_VAR 0 1
13011: PUSH
13012: LD_INT 1
13014: PPUSH
13015: LD_INT 7
13017: PPUSH
13018: CALL_OW 12
13022: ST_TO_ADDR
// case i of 1 :
13023: LD_VAR 0 1
13027: PUSH
13028: LD_INT 1
13030: DOUBLE
13031: EQUAL
13032: IFTRUE 13036
13034: GO 13046
13036: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
13037: LD_STRING earthquake(getX(game), 0, 32)
13039: PPUSH
13040: CALL_OW 559
13044: GO 13284
13046: LD_INT 2
13048: DOUBLE
13049: EQUAL
13050: IFTRUE 13054
13052: GO 13068
13054: POP
// begin ToLua ( displayStucuk(); ) ;
13055: LD_STRING displayStucuk();
13057: PPUSH
13058: CALL_OW 559
// ResetFog ;
13062: CALL_OW 335
// end ; 3 :
13066: GO 13284
13068: LD_INT 3
13070: DOUBLE
13071: EQUAL
13072: IFTRUE 13076
13074: GO 13180
13076: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13077: LD_ADDR_VAR 0 2
13081: PUSH
13082: LD_INT 22
13084: PUSH
13085: LD_OWVAR 2
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: PUSH
13094: LD_INT 25
13096: PUSH
13097: LD_INT 1
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PUSH
13104: EMPTY
13105: LIST
13106: LIST
13107: PPUSH
13108: CALL_OW 69
13112: ST_TO_ADDR
// if not tmp then
13113: LD_VAR 0 2
13117: NOT
13118: IFFALSE 13122
// exit ;
13120: GO 13284
// un := tmp [ rand ( 1 , tmp ) ] ;
13122: LD_ADDR_VAR 0 3
13126: PUSH
13127: LD_VAR 0 2
13131: PUSH
13132: LD_INT 1
13134: PPUSH
13135: LD_VAR 0 2
13139: PPUSH
13140: CALL_OW 12
13144: ARRAY
13145: ST_TO_ADDR
// if Crawls ( un ) then
13146: LD_VAR 0 3
13150: PPUSH
13151: CALL_OW 318
13155: IFFALSE 13166
// ComWalk ( un ) ;
13157: LD_VAR 0 3
13161: PPUSH
13162: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13166: LD_VAR 0 3
13170: PPUSH
13171: LD_INT 8
13173: PPUSH
13174: CALL_OW 336
// end ; 4 :
13178: GO 13284
13180: LD_INT 4
13182: DOUBLE
13183: EQUAL
13184: IFTRUE 13188
13186: GO 13262
13188: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13189: LD_ADDR_VAR 0 2
13193: PUSH
13194: LD_INT 22
13196: PUSH
13197: LD_OWVAR 2
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PUSH
13206: LD_INT 30
13208: PUSH
13209: LD_INT 29
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: PPUSH
13220: CALL_OW 69
13224: ST_TO_ADDR
// if not tmp then
13225: LD_VAR 0 2
13229: NOT
13230: IFFALSE 13234
// exit ;
13232: GO 13284
// CenterNowOnUnits ( tmp [ 1 ] ) ;
13234: LD_VAR 0 2
13238: PUSH
13239: LD_INT 1
13241: ARRAY
13242: PPUSH
13243: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
13247: LD_VAR 0 2
13251: PUSH
13252: LD_INT 1
13254: ARRAY
13255: PPUSH
13256: CALL_OW 65
// end ; 5 .. 7 :
13260: GO 13284
13262: LD_INT 5
13264: DOUBLE
13265: GREATEREQUAL
13266: IFFALSE 13274
13268: LD_INT 7
13270: DOUBLE
13271: LESSEQUAL
13272: IFTRUE 13276
13274: GO 13283
13276: POP
// StreamSibBomb ; end ;
13277: CALL 9521 0 0
13281: GO 13284
13283: POP
// end ;
13284: PPOPN 3
13286: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
13287: LD_EXP 7
13291: PUSH
13292: LD_EXP 57
13296: AND
13297: IFFALSE 13453
13299: GO 13301
13301: DISABLE
13302: LD_INT 0
13304: PPUSH
13305: PPUSH
13306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13307: LD_ADDR_VAR 0 2
13311: PUSH
13312: LD_INT 81
13314: PUSH
13315: LD_OWVAR 2
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: PUSH
13324: LD_INT 2
13326: PUSH
13327: LD_INT 21
13329: PUSH
13330: LD_INT 1
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: PUSH
13337: LD_INT 21
13339: PUSH
13340: LD_INT 2
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: LIST
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: PPUSH
13356: CALL_OW 69
13360: ST_TO_ADDR
// if not tmp then
13361: LD_VAR 0 2
13365: NOT
13366: IFFALSE 13370
// exit ;
13368: GO 13453
// p := 0 ;
13370: LD_ADDR_VAR 0 3
13374: PUSH
13375: LD_INT 0
13377: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13378: LD_INT 35
13380: PPUSH
13381: CALL_OW 67
// p := p + 1 ;
13385: LD_ADDR_VAR 0 3
13389: PUSH
13390: LD_VAR 0 3
13394: PUSH
13395: LD_INT 1
13397: PLUS
13398: ST_TO_ADDR
// for i in tmp do
13399: LD_ADDR_VAR 0 1
13403: PUSH
13404: LD_VAR 0 2
13408: PUSH
13409: FOR_IN
13410: IFFALSE 13441
// if GetLives ( i ) < 1000 then
13412: LD_VAR 0 1
13416: PPUSH
13417: CALL_OW 256
13421: PUSH
13422: LD_INT 1000
13424: LESS
13425: IFFALSE 13439
// SetLives ( i , 1000 ) ;
13427: LD_VAR 0 1
13431: PPUSH
13432: LD_INT 1000
13434: PPUSH
13435: CALL_OW 234
13439: GO 13409
13441: POP
13442: POP
// until p > 20 ;
13443: LD_VAR 0 3
13447: PUSH
13448: LD_INT 20
13450: GREATER
13451: IFFALSE 13378
// end ;
13453: PPOPN 3
13455: END
// every 0 0$1 trigger StreamModeActive and sTime do
13456: LD_EXP 7
13460: PUSH
13461: LD_EXP 58
13465: AND
13466: IFFALSE 13501
13468: GO 13470
13470: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13471: LD_INT 28
13473: PPUSH
13474: LD_OWVAR 2
13478: PPUSH
13479: LD_INT 2
13481: PPUSH
13482: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13486: LD_INT 30
13488: PPUSH
13489: LD_OWVAR 2
13493: PPUSH
13494: LD_INT 2
13496: PPUSH
13497: CALL_OW 322
// end ;
13501: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13502: LD_EXP 7
13506: PUSH
13507: LD_EXP 59
13511: AND
13512: IFFALSE 13633
13514: GO 13516
13516: DISABLE
13517: LD_INT 0
13519: PPUSH
13520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13521: LD_ADDR_VAR 0 2
13525: PUSH
13526: LD_INT 22
13528: PUSH
13529: LD_OWVAR 2
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 21
13540: PUSH
13541: LD_INT 1
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: LD_INT 3
13550: PUSH
13551: LD_INT 23
13553: PUSH
13554: LD_INT 0
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: LIST
13569: PPUSH
13570: CALL_OW 69
13574: ST_TO_ADDR
// if not tmp then
13575: LD_VAR 0 2
13579: NOT
13580: IFFALSE 13584
// exit ;
13582: GO 13633
// for i in tmp do
13584: LD_ADDR_VAR 0 1
13588: PUSH
13589: LD_VAR 0 2
13593: PUSH
13594: FOR_IN
13595: IFFALSE 13631
// begin if Crawls ( i ) then
13597: LD_VAR 0 1
13601: PPUSH
13602: CALL_OW 318
13606: IFFALSE 13617
// ComWalk ( i ) ;
13608: LD_VAR 0 1
13612: PPUSH
13613: CALL_OW 138
// SetClass ( i , 2 ) ;
13617: LD_VAR 0 1
13621: PPUSH
13622: LD_INT 2
13624: PPUSH
13625: CALL_OW 336
// end ;
13629: GO 13594
13631: POP
13632: POP
// end ;
13633: PPOPN 2
13635: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13636: LD_EXP 7
13640: PUSH
13641: LD_EXP 60
13645: AND
13646: IFFALSE 13934
13648: GO 13650
13650: DISABLE
13651: LD_INT 0
13653: PPUSH
13654: PPUSH
13655: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13656: LD_OWVAR 2
13660: PPUSH
13661: LD_INT 9
13663: PPUSH
13664: LD_INT 1
13666: PPUSH
13667: LD_INT 1
13669: PPUSH
13670: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13674: LD_INT 9
13676: PPUSH
13677: LD_OWVAR 2
13681: PPUSH
13682: CALL_OW 343
// uc_side := 9 ;
13686: LD_ADDR_OWVAR 20
13690: PUSH
13691: LD_INT 9
13693: ST_TO_ADDR
// uc_nation := 2 ;
13694: LD_ADDR_OWVAR 21
13698: PUSH
13699: LD_INT 2
13701: ST_TO_ADDR
// hc_name := Dark Warrior ;
13702: LD_ADDR_OWVAR 26
13706: PUSH
13707: LD_STRING Dark Warrior
13709: ST_TO_ADDR
// hc_gallery :=  ;
13710: LD_ADDR_OWVAR 33
13714: PUSH
13715: LD_STRING 
13717: ST_TO_ADDR
// hc_noskilllimit := true ;
13718: LD_ADDR_OWVAR 76
13722: PUSH
13723: LD_INT 1
13725: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13726: LD_ADDR_OWVAR 31
13730: PUSH
13731: LD_INT 30
13733: PUSH
13734: LD_INT 30
13736: PUSH
13737: LD_INT 30
13739: PUSH
13740: LD_INT 30
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: ST_TO_ADDR
// un := CreateHuman ;
13749: LD_ADDR_VAR 0 3
13753: PUSH
13754: CALL_OW 44
13758: ST_TO_ADDR
// hc_noskilllimit := false ;
13759: LD_ADDR_OWVAR 76
13763: PUSH
13764: LD_INT 0
13766: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13767: LD_VAR 0 3
13771: PPUSH
13772: LD_INT 1
13774: PPUSH
13775: CALL_OW 51
// ToLua ( playRanger() ) ;
13779: LD_STRING playRanger()
13781: PPUSH
13782: CALL_OW 559
// p := 0 ;
13786: LD_ADDR_VAR 0 2
13790: PUSH
13791: LD_INT 0
13793: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13794: LD_INT 35
13796: PPUSH
13797: CALL_OW 67
// p := p + 1 ;
13801: LD_ADDR_VAR 0 2
13805: PUSH
13806: LD_VAR 0 2
13810: PUSH
13811: LD_INT 1
13813: PLUS
13814: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13815: LD_VAR 0 3
13819: PPUSH
13820: CALL_OW 256
13824: PUSH
13825: LD_INT 1000
13827: LESS
13828: IFFALSE 13842
// SetLives ( un , 1000 ) ;
13830: LD_VAR 0 3
13834: PPUSH
13835: LD_INT 1000
13837: PPUSH
13838: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13842: LD_VAR 0 3
13846: PPUSH
13847: LD_INT 81
13849: PUSH
13850: LD_OWVAR 2
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: PUSH
13859: LD_INT 91
13861: PUSH
13862: LD_VAR 0 3
13866: PUSH
13867: LD_INT 30
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: LIST
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: PPUSH
13879: CALL_OW 69
13883: PPUSH
13884: LD_VAR 0 3
13888: PPUSH
13889: CALL_OW 74
13893: PPUSH
13894: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
13898: LD_VAR 0 2
13902: PUSH
13903: LD_INT 80
13905: GREATER
13906: PUSH
13907: LD_VAR 0 3
13911: PPUSH
13912: CALL_OW 301
13916: OR
13917: IFFALSE 13794
// if un then
13919: LD_VAR 0 3
13923: IFFALSE 13934
// RemoveUnit ( un ) ;
13925: LD_VAR 0 3
13929: PPUSH
13930: CALL_OW 64
// end ;
13934: PPOPN 3
13936: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
13937: LD_EXP 61
13941: IFFALSE 14057
13943: GO 13945
13945: DISABLE
13946: LD_INT 0
13948: PPUSH
13949: PPUSH
13950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13951: LD_ADDR_VAR 0 2
13955: PUSH
13956: LD_INT 81
13958: PUSH
13959: LD_OWVAR 2
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: LD_INT 21
13970: PUSH
13971: LD_INT 1
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: PPUSH
13982: CALL_OW 69
13986: ST_TO_ADDR
// ToLua ( playComputer() ) ;
13987: LD_STRING playComputer()
13989: PPUSH
13990: CALL_OW 559
// if not tmp then
13994: LD_VAR 0 2
13998: NOT
13999: IFFALSE 14003
// exit ;
14001: GO 14057
// for i in tmp do
14003: LD_ADDR_VAR 0 1
14007: PUSH
14008: LD_VAR 0 2
14012: PUSH
14013: FOR_IN
14014: IFFALSE 14055
// for j := 1 to 4 do
14016: LD_ADDR_VAR 0 3
14020: PUSH
14021: DOUBLE
14022: LD_INT 1
14024: DEC
14025: ST_TO_ADDR
14026: LD_INT 4
14028: PUSH
14029: FOR_TO
14030: IFFALSE 14051
// SetSkill ( i , j , 10 ) ;
14032: LD_VAR 0 1
14036: PPUSH
14037: LD_VAR 0 3
14041: PPUSH
14042: LD_INT 10
14044: PPUSH
14045: CALL_OW 237
14049: GO 14029
14051: POP
14052: POP
14053: GO 14013
14055: POP
14056: POP
// end ;
14057: PPOPN 3
14059: END
// every 0 0$1 trigger s30 do var i , tmp ;
14060: LD_EXP 62
14064: IFFALSE 14133
14066: GO 14068
14068: DISABLE
14069: LD_INT 0
14071: PPUSH
14072: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14073: LD_ADDR_VAR 0 2
14077: PUSH
14078: LD_INT 22
14080: PUSH
14081: LD_OWVAR 2
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PPUSH
14090: CALL_OW 69
14094: ST_TO_ADDR
// if not tmp then
14095: LD_VAR 0 2
14099: NOT
14100: IFFALSE 14104
// exit ;
14102: GO 14133
// for i in tmp do
14104: LD_ADDR_VAR 0 1
14108: PUSH
14109: LD_VAR 0 2
14113: PUSH
14114: FOR_IN
14115: IFFALSE 14131
// SetLives ( i , 300 ) ;
14117: LD_VAR 0 1
14121: PPUSH
14122: LD_INT 300
14124: PPUSH
14125: CALL_OW 234
14129: GO 14114
14131: POP
14132: POP
// end ;
14133: PPOPN 2
14135: END
// every 0 0$1 trigger s60 do var i , tmp ;
14136: LD_EXP 63
14140: IFFALSE 14209
14142: GO 14144
14144: DISABLE
14145: LD_INT 0
14147: PPUSH
14148: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14149: LD_ADDR_VAR 0 2
14153: PUSH
14154: LD_INT 22
14156: PUSH
14157: LD_OWVAR 2
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PPUSH
14166: CALL_OW 69
14170: ST_TO_ADDR
// if not tmp then
14171: LD_VAR 0 2
14175: NOT
14176: IFFALSE 14180
// exit ;
14178: GO 14209
// for i in tmp do
14180: LD_ADDR_VAR 0 1
14184: PUSH
14185: LD_VAR 0 2
14189: PUSH
14190: FOR_IN
14191: IFFALSE 14207
// SetLives ( i , 600 ) ;
14193: LD_VAR 0 1
14197: PPUSH
14198: LD_INT 600
14200: PPUSH
14201: CALL_OW 234
14205: GO 14190
14207: POP
14208: POP
// end ;
14209: PPOPN 2
14211: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14212: LD_INT 0
14214: PPUSH
// case cmd of 301 :
14215: LD_VAR 0 1
14219: PUSH
14220: LD_INT 301
14222: DOUBLE
14223: EQUAL
14224: IFTRUE 14228
14226: GO 14260
14228: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
14229: LD_VAR 0 6
14233: PPUSH
14234: LD_VAR 0 7
14238: PPUSH
14239: LD_VAR 0 8
14243: PPUSH
14244: LD_VAR 0 4
14248: PPUSH
14249: LD_VAR 0 5
14253: PPUSH
14254: CALL 15461 0 5
14258: GO 14381
14260: LD_INT 302
14262: DOUBLE
14263: EQUAL
14264: IFTRUE 14268
14266: GO 14305
14268: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
14269: LD_VAR 0 6
14273: PPUSH
14274: LD_VAR 0 7
14278: PPUSH
14279: LD_VAR 0 8
14283: PPUSH
14284: LD_VAR 0 9
14288: PPUSH
14289: LD_VAR 0 4
14293: PPUSH
14294: LD_VAR 0 5
14298: PPUSH
14299: CALL 15552 0 6
14303: GO 14381
14305: LD_INT 303
14307: DOUBLE
14308: EQUAL
14309: IFTRUE 14313
14311: GO 14350
14313: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
14314: LD_VAR 0 6
14318: PPUSH
14319: LD_VAR 0 7
14323: PPUSH
14324: LD_VAR 0 8
14328: PPUSH
14329: LD_VAR 0 9
14333: PPUSH
14334: LD_VAR 0 4
14338: PPUSH
14339: LD_VAR 0 5
14343: PPUSH
14344: CALL 14386 0 6
14348: GO 14381
14350: LD_INT 304
14352: DOUBLE
14353: EQUAL
14354: IFTRUE 14358
14356: GO 14380
14358: POP
// hHackTeleport ( unit , x , y ) ; end ;
14359: LD_VAR 0 2
14363: PPUSH
14364: LD_VAR 0 4
14368: PPUSH
14369: LD_VAR 0 5
14373: PPUSH
14374: CALL 16145 0 3
14378: GO 14381
14380: POP
// end ;
14381: LD_VAR 0 12
14385: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14386: LD_INT 0
14388: PPUSH
14389: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14390: LD_VAR 0 1
14394: PUSH
14395: LD_INT 1
14397: LESS
14398: PUSH
14399: LD_VAR 0 1
14403: PUSH
14404: LD_INT 3
14406: GREATER
14407: OR
14408: PUSH
14409: LD_VAR 0 5
14413: PPUSH
14414: LD_VAR 0 6
14418: PPUSH
14419: CALL_OW 428
14423: OR
14424: IFFALSE 14428
// exit ;
14426: GO 15148
// uc_side := your_side ;
14428: LD_ADDR_OWVAR 20
14432: PUSH
14433: LD_OWVAR 2
14437: ST_TO_ADDR
// uc_nation := nation ;
14438: LD_ADDR_OWVAR 21
14442: PUSH
14443: LD_VAR 0 1
14447: ST_TO_ADDR
// bc_level = 1 ;
14448: LD_ADDR_OWVAR 43
14452: PUSH
14453: LD_INT 1
14455: ST_TO_ADDR
// case btype of 1 :
14456: LD_VAR 0 2
14460: PUSH
14461: LD_INT 1
14463: DOUBLE
14464: EQUAL
14465: IFTRUE 14469
14467: GO 14480
14469: POP
// bc_type := b_depot ; 2 :
14470: LD_ADDR_OWVAR 42
14474: PUSH
14475: LD_INT 0
14477: ST_TO_ADDR
14478: GO 15092
14480: LD_INT 2
14482: DOUBLE
14483: EQUAL
14484: IFTRUE 14488
14486: GO 14499
14488: POP
// bc_type := b_warehouse ; 3 :
14489: LD_ADDR_OWVAR 42
14493: PUSH
14494: LD_INT 1
14496: ST_TO_ADDR
14497: GO 15092
14499: LD_INT 3
14501: DOUBLE
14502: EQUAL
14503: IFTRUE 14507
14505: GO 14518
14507: POP
// bc_type := b_lab ; 4 .. 9 :
14508: LD_ADDR_OWVAR 42
14512: PUSH
14513: LD_INT 6
14515: ST_TO_ADDR
14516: GO 15092
14518: LD_INT 4
14520: DOUBLE
14521: GREATEREQUAL
14522: IFFALSE 14530
14524: LD_INT 9
14526: DOUBLE
14527: LESSEQUAL
14528: IFTRUE 14532
14530: GO 14584
14532: POP
// begin bc_type := b_lab_half ;
14533: LD_ADDR_OWVAR 42
14537: PUSH
14538: LD_INT 7
14540: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14541: LD_ADDR_OWVAR 44
14545: PUSH
14546: LD_INT 10
14548: PUSH
14549: LD_INT 11
14551: PUSH
14552: LD_INT 12
14554: PUSH
14555: LD_INT 15
14557: PUSH
14558: LD_INT 14
14560: PUSH
14561: LD_INT 13
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: PUSH
14572: LD_VAR 0 2
14576: PUSH
14577: LD_INT 3
14579: MINUS
14580: ARRAY
14581: ST_TO_ADDR
// end ; 10 .. 13 :
14582: GO 15092
14584: LD_INT 10
14586: DOUBLE
14587: GREATEREQUAL
14588: IFFALSE 14596
14590: LD_INT 13
14592: DOUBLE
14593: LESSEQUAL
14594: IFTRUE 14598
14596: GO 14675
14598: POP
// begin bc_type := b_lab_full ;
14599: LD_ADDR_OWVAR 42
14603: PUSH
14604: LD_INT 8
14606: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14607: LD_ADDR_OWVAR 44
14611: PUSH
14612: LD_INT 10
14614: PUSH
14615: LD_INT 12
14617: PUSH
14618: LD_INT 14
14620: PUSH
14621: LD_INT 13
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: PUSH
14630: LD_VAR 0 2
14634: PUSH
14635: LD_INT 9
14637: MINUS
14638: ARRAY
14639: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14640: LD_ADDR_OWVAR 45
14644: PUSH
14645: LD_INT 11
14647: PUSH
14648: LD_INT 15
14650: PUSH
14651: LD_INT 12
14653: PUSH
14654: LD_INT 15
14656: PUSH
14657: EMPTY
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: PUSH
14663: LD_VAR 0 2
14667: PUSH
14668: LD_INT 9
14670: MINUS
14671: ARRAY
14672: ST_TO_ADDR
// end ; 14 :
14673: GO 15092
14675: LD_INT 14
14677: DOUBLE
14678: EQUAL
14679: IFTRUE 14683
14681: GO 14694
14683: POP
// bc_type := b_workshop ; 15 :
14684: LD_ADDR_OWVAR 42
14688: PUSH
14689: LD_INT 2
14691: ST_TO_ADDR
14692: GO 15092
14694: LD_INT 15
14696: DOUBLE
14697: EQUAL
14698: IFTRUE 14702
14700: GO 14713
14702: POP
// bc_type := b_factory ; 16 :
14703: LD_ADDR_OWVAR 42
14707: PUSH
14708: LD_INT 3
14710: ST_TO_ADDR
14711: GO 15092
14713: LD_INT 16
14715: DOUBLE
14716: EQUAL
14717: IFTRUE 14721
14719: GO 14732
14721: POP
// bc_type := b_ext_gun ; 17 :
14722: LD_ADDR_OWVAR 42
14726: PUSH
14727: LD_INT 17
14729: ST_TO_ADDR
14730: GO 15092
14732: LD_INT 17
14734: DOUBLE
14735: EQUAL
14736: IFTRUE 14740
14738: GO 14768
14740: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14741: LD_ADDR_OWVAR 42
14745: PUSH
14746: LD_INT 19
14748: PUSH
14749: LD_INT 23
14751: PUSH
14752: LD_INT 19
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: LIST
14759: PUSH
14760: LD_VAR 0 1
14764: ARRAY
14765: ST_TO_ADDR
14766: GO 15092
14768: LD_INT 18
14770: DOUBLE
14771: EQUAL
14772: IFTRUE 14776
14774: GO 14787
14776: POP
// bc_type := b_ext_radar ; 19 :
14777: LD_ADDR_OWVAR 42
14781: PUSH
14782: LD_INT 20
14784: ST_TO_ADDR
14785: GO 15092
14787: LD_INT 19
14789: DOUBLE
14790: EQUAL
14791: IFTRUE 14795
14793: GO 14806
14795: POP
// bc_type := b_ext_radio ; 20 :
14796: LD_ADDR_OWVAR 42
14800: PUSH
14801: LD_INT 22
14803: ST_TO_ADDR
14804: GO 15092
14806: LD_INT 20
14808: DOUBLE
14809: EQUAL
14810: IFTRUE 14814
14812: GO 14825
14814: POP
// bc_type := b_ext_siberium ; 21 :
14815: LD_ADDR_OWVAR 42
14819: PUSH
14820: LD_INT 21
14822: ST_TO_ADDR
14823: GO 15092
14825: LD_INT 21
14827: DOUBLE
14828: EQUAL
14829: IFTRUE 14833
14831: GO 14844
14833: POP
// bc_type := b_ext_computer ; 22 :
14834: LD_ADDR_OWVAR 42
14838: PUSH
14839: LD_INT 24
14841: ST_TO_ADDR
14842: GO 15092
14844: LD_INT 22
14846: DOUBLE
14847: EQUAL
14848: IFTRUE 14852
14850: GO 14863
14852: POP
// bc_type := b_ext_track ; 23 :
14853: LD_ADDR_OWVAR 42
14857: PUSH
14858: LD_INT 16
14860: ST_TO_ADDR
14861: GO 15092
14863: LD_INT 23
14865: DOUBLE
14866: EQUAL
14867: IFTRUE 14871
14869: GO 14882
14871: POP
// bc_type := b_ext_laser ; 24 :
14872: LD_ADDR_OWVAR 42
14876: PUSH
14877: LD_INT 25
14879: ST_TO_ADDR
14880: GO 15092
14882: LD_INT 24
14884: DOUBLE
14885: EQUAL
14886: IFTRUE 14890
14888: GO 14901
14890: POP
// bc_type := b_control_tower ; 25 :
14891: LD_ADDR_OWVAR 42
14895: PUSH
14896: LD_INT 36
14898: ST_TO_ADDR
14899: GO 15092
14901: LD_INT 25
14903: DOUBLE
14904: EQUAL
14905: IFTRUE 14909
14907: GO 14920
14909: POP
// bc_type := b_breastwork ; 26 :
14910: LD_ADDR_OWVAR 42
14914: PUSH
14915: LD_INT 31
14917: ST_TO_ADDR
14918: GO 15092
14920: LD_INT 26
14922: DOUBLE
14923: EQUAL
14924: IFTRUE 14928
14926: GO 14939
14928: POP
// bc_type := b_bunker ; 27 :
14929: LD_ADDR_OWVAR 42
14933: PUSH
14934: LD_INT 32
14936: ST_TO_ADDR
14937: GO 15092
14939: LD_INT 27
14941: DOUBLE
14942: EQUAL
14943: IFTRUE 14947
14945: GO 14958
14947: POP
// bc_type := b_turret ; 28 :
14948: LD_ADDR_OWVAR 42
14952: PUSH
14953: LD_INT 33
14955: ST_TO_ADDR
14956: GO 15092
14958: LD_INT 28
14960: DOUBLE
14961: EQUAL
14962: IFTRUE 14966
14964: GO 14977
14966: POP
// bc_type := b_armoury ; 29 :
14967: LD_ADDR_OWVAR 42
14971: PUSH
14972: LD_INT 4
14974: ST_TO_ADDR
14975: GO 15092
14977: LD_INT 29
14979: DOUBLE
14980: EQUAL
14981: IFTRUE 14985
14983: GO 14996
14985: POP
// bc_type := b_barracks ; 30 :
14986: LD_ADDR_OWVAR 42
14990: PUSH
14991: LD_INT 5
14993: ST_TO_ADDR
14994: GO 15092
14996: LD_INT 30
14998: DOUBLE
14999: EQUAL
15000: IFTRUE 15004
15002: GO 15015
15004: POP
// bc_type := b_solar_power ; 31 :
15005: LD_ADDR_OWVAR 42
15009: PUSH
15010: LD_INT 27
15012: ST_TO_ADDR
15013: GO 15092
15015: LD_INT 31
15017: DOUBLE
15018: EQUAL
15019: IFTRUE 15023
15021: GO 15034
15023: POP
// bc_type := b_oil_power ; 32 :
15024: LD_ADDR_OWVAR 42
15028: PUSH
15029: LD_INT 26
15031: ST_TO_ADDR
15032: GO 15092
15034: LD_INT 32
15036: DOUBLE
15037: EQUAL
15038: IFTRUE 15042
15040: GO 15053
15042: POP
// bc_type := b_siberite_power ; 33 :
15043: LD_ADDR_OWVAR 42
15047: PUSH
15048: LD_INT 28
15050: ST_TO_ADDR
15051: GO 15092
15053: LD_INT 33
15055: DOUBLE
15056: EQUAL
15057: IFTRUE 15061
15059: GO 15072
15061: POP
// bc_type := b_oil_mine ; 34 :
15062: LD_ADDR_OWVAR 42
15066: PUSH
15067: LD_INT 29
15069: ST_TO_ADDR
15070: GO 15092
15072: LD_INT 34
15074: DOUBLE
15075: EQUAL
15076: IFTRUE 15080
15078: GO 15091
15080: POP
// bc_type := b_siberite_mine ; end ;
15081: LD_ADDR_OWVAR 42
15085: PUSH
15086: LD_INT 30
15088: ST_TO_ADDR
15089: GO 15092
15091: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
15092: LD_ADDR_VAR 0 8
15096: PUSH
15097: LD_VAR 0 5
15101: PPUSH
15102: LD_VAR 0 6
15106: PPUSH
15107: LD_VAR 0 3
15111: PPUSH
15112: CALL_OW 47
15116: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
15117: LD_OWVAR 42
15121: PUSH
15122: LD_INT 32
15124: PUSH
15125: LD_INT 33
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: IN
15132: IFFALSE 15148
// PlaceWeaponTurret ( b , weapon ) ;
15134: LD_VAR 0 8
15138: PPUSH
15139: LD_VAR 0 4
15143: PPUSH
15144: CALL_OW 431
// end ;
15148: LD_VAR 0 7
15152: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
15153: LD_INT 0
15155: PPUSH
15156: PPUSH
15157: PPUSH
15158: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15159: LD_ADDR_VAR 0 4
15163: PUSH
15164: LD_INT 22
15166: PUSH
15167: LD_OWVAR 2
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: PUSH
15176: LD_INT 2
15178: PUSH
15179: LD_INT 30
15181: PUSH
15182: LD_INT 0
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: PUSH
15189: LD_INT 30
15191: PUSH
15192: LD_INT 1
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: LIST
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: PPUSH
15208: CALL_OW 69
15212: ST_TO_ADDR
// if not tmp then
15213: LD_VAR 0 4
15217: NOT
15218: IFFALSE 15222
// exit ;
15220: GO 15281
// for i in tmp do
15222: LD_ADDR_VAR 0 2
15226: PUSH
15227: LD_VAR 0 4
15231: PUSH
15232: FOR_IN
15233: IFFALSE 15279
// for j = 1 to 3 do
15235: LD_ADDR_VAR 0 3
15239: PUSH
15240: DOUBLE
15241: LD_INT 1
15243: DEC
15244: ST_TO_ADDR
15245: LD_INT 3
15247: PUSH
15248: FOR_TO
15249: IFFALSE 15275
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
15251: LD_VAR 0 2
15255: PPUSH
15256: CALL_OW 274
15260: PPUSH
15261: LD_VAR 0 3
15265: PPUSH
15266: LD_INT 99999
15268: PPUSH
15269: CALL_OW 277
15273: GO 15248
15275: POP
15276: POP
15277: GO 15232
15279: POP
15280: POP
// end ;
15281: LD_VAR 0 1
15285: RET
// export function hHackSetLevel10 ; var i , j ; begin
15286: LD_INT 0
15288: PPUSH
15289: PPUSH
15290: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15291: LD_ADDR_VAR 0 2
15295: PUSH
15296: LD_INT 21
15298: PUSH
15299: LD_INT 1
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: PPUSH
15306: CALL_OW 69
15310: PUSH
15311: FOR_IN
15312: IFFALSE 15364
// if IsSelected ( i ) then
15314: LD_VAR 0 2
15318: PPUSH
15319: CALL_OW 306
15323: IFFALSE 15362
// begin for j := 1 to 4 do
15325: LD_ADDR_VAR 0 3
15329: PUSH
15330: DOUBLE
15331: LD_INT 1
15333: DEC
15334: ST_TO_ADDR
15335: LD_INT 4
15337: PUSH
15338: FOR_TO
15339: IFFALSE 15360
// SetSkill ( i , j , 10 ) ;
15341: LD_VAR 0 2
15345: PPUSH
15346: LD_VAR 0 3
15350: PPUSH
15351: LD_INT 10
15353: PPUSH
15354: CALL_OW 237
15358: GO 15338
15360: POP
15361: POP
// end ;
15362: GO 15311
15364: POP
15365: POP
// end ;
15366: LD_VAR 0 1
15370: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15371: LD_INT 0
15373: PPUSH
15374: PPUSH
15375: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15376: LD_ADDR_VAR 0 2
15380: PUSH
15381: LD_INT 22
15383: PUSH
15384: LD_OWVAR 2
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: PUSH
15393: LD_INT 21
15395: PUSH
15396: LD_INT 1
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: PPUSH
15407: CALL_OW 69
15411: PUSH
15412: FOR_IN
15413: IFFALSE 15454
// begin for j := 1 to 4 do
15415: LD_ADDR_VAR 0 3
15419: PUSH
15420: DOUBLE
15421: LD_INT 1
15423: DEC
15424: ST_TO_ADDR
15425: LD_INT 4
15427: PUSH
15428: FOR_TO
15429: IFFALSE 15450
// SetSkill ( i , j , 10 ) ;
15431: LD_VAR 0 2
15435: PPUSH
15436: LD_VAR 0 3
15440: PPUSH
15441: LD_INT 10
15443: PPUSH
15444: CALL_OW 237
15448: GO 15428
15450: POP
15451: POP
// end ;
15452: GO 15412
15454: POP
15455: POP
// end ;
15456: LD_VAR 0 1
15460: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15461: LD_INT 0
15463: PPUSH
// uc_side := your_side ;
15464: LD_ADDR_OWVAR 20
15468: PUSH
15469: LD_OWVAR 2
15473: ST_TO_ADDR
// uc_nation := nation ;
15474: LD_ADDR_OWVAR 21
15478: PUSH
15479: LD_VAR 0 1
15483: ST_TO_ADDR
// InitHc ;
15484: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15488: LD_INT 0
15490: PPUSH
15491: LD_VAR 0 2
15495: PPUSH
15496: LD_VAR 0 3
15500: PPUSH
15501: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15505: LD_VAR 0 4
15509: PPUSH
15510: LD_VAR 0 5
15514: PPUSH
15515: CALL_OW 428
15519: PUSH
15520: LD_INT 0
15522: EQUAL
15523: IFFALSE 15547
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15525: CALL_OW 44
15529: PPUSH
15530: LD_VAR 0 4
15534: PPUSH
15535: LD_VAR 0 5
15539: PPUSH
15540: LD_INT 1
15542: PPUSH
15543: CALL_OW 48
// end ;
15547: LD_VAR 0 6
15551: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15552: LD_INT 0
15554: PPUSH
15555: PPUSH
// uc_side := your_side ;
15556: LD_ADDR_OWVAR 20
15560: PUSH
15561: LD_OWVAR 2
15565: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15566: LD_VAR 0 1
15570: PUSH
15571: LD_INT 1
15573: PUSH
15574: LD_INT 2
15576: PUSH
15577: LD_INT 3
15579: PUSH
15580: LD_INT 4
15582: PUSH
15583: LD_INT 5
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: IN
15593: IFFALSE 15605
// uc_nation := nation_american else
15595: LD_ADDR_OWVAR 21
15599: PUSH
15600: LD_INT 1
15602: ST_TO_ADDR
15603: GO 15648
// if chassis in [ 11 , 12 , 13 , 14 ] then
15605: LD_VAR 0 1
15609: PUSH
15610: LD_INT 11
15612: PUSH
15613: LD_INT 12
15615: PUSH
15616: LD_INT 13
15618: PUSH
15619: LD_INT 14
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: IN
15628: IFFALSE 15640
// uc_nation := nation_arabian else
15630: LD_ADDR_OWVAR 21
15634: PUSH
15635: LD_INT 2
15637: ST_TO_ADDR
15638: GO 15648
// uc_nation := nation_russian ;
15640: LD_ADDR_OWVAR 21
15644: PUSH
15645: LD_INT 3
15647: ST_TO_ADDR
// vc_chassis := chassis ;
15648: LD_ADDR_OWVAR 37
15652: PUSH
15653: LD_VAR 0 1
15657: ST_TO_ADDR
// vc_engine := engine ;
15658: LD_ADDR_OWVAR 39
15662: PUSH
15663: LD_VAR 0 2
15667: ST_TO_ADDR
// vc_control := control ;
15668: LD_ADDR_OWVAR 38
15672: PUSH
15673: LD_VAR 0 3
15677: ST_TO_ADDR
// vc_weapon := weapon ;
15678: LD_ADDR_OWVAR 40
15682: PUSH
15683: LD_VAR 0 4
15687: ST_TO_ADDR
// un := CreateVehicle ;
15688: LD_ADDR_VAR 0 8
15692: PUSH
15693: CALL_OW 45
15697: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15698: LD_VAR 0 8
15702: PPUSH
15703: LD_INT 0
15705: PPUSH
15706: LD_INT 5
15708: PPUSH
15709: CALL_OW 12
15713: PPUSH
15714: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15718: LD_VAR 0 8
15722: PPUSH
15723: LD_VAR 0 5
15727: PPUSH
15728: LD_VAR 0 6
15732: PPUSH
15733: LD_INT 1
15735: PPUSH
15736: CALL_OW 48
// end ;
15740: LD_VAR 0 7
15744: RET
// export hInvincible ; every 1 do
15745: GO 15747
15747: DISABLE
// hInvincible := [ ] ;
15748: LD_ADDR_EXP 64
15752: PUSH
15753: EMPTY
15754: ST_TO_ADDR
15755: END
// every 10 do var i ;
15756: GO 15758
15758: DISABLE
15759: LD_INT 0
15761: PPUSH
// begin enable ;
15762: ENABLE
// if not hInvincible then
15763: LD_EXP 64
15767: NOT
15768: IFFALSE 15772
// exit ;
15770: GO 15816
// for i in hInvincible do
15772: LD_ADDR_VAR 0 1
15776: PUSH
15777: LD_EXP 64
15781: PUSH
15782: FOR_IN
15783: IFFALSE 15814
// if GetLives ( i ) < 1000 then
15785: LD_VAR 0 1
15789: PPUSH
15790: CALL_OW 256
15794: PUSH
15795: LD_INT 1000
15797: LESS
15798: IFFALSE 15812
// SetLives ( i , 1000 ) ;
15800: LD_VAR 0 1
15804: PPUSH
15805: LD_INT 1000
15807: PPUSH
15808: CALL_OW 234
15812: GO 15782
15814: POP
15815: POP
// end ;
15816: PPOPN 1
15818: END
// export function hHackInvincible ; var i ; begin
15819: LD_INT 0
15821: PPUSH
15822: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15823: LD_ADDR_VAR 0 2
15827: PUSH
15828: LD_INT 2
15830: PUSH
15831: LD_INT 21
15833: PUSH
15834: LD_INT 1
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: PUSH
15841: LD_INT 21
15843: PUSH
15844: LD_INT 2
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: LIST
15855: PPUSH
15856: CALL_OW 69
15860: PUSH
15861: FOR_IN
15862: IFFALSE 15923
// if IsSelected ( i ) then
15864: LD_VAR 0 2
15868: PPUSH
15869: CALL_OW 306
15873: IFFALSE 15921
// begin if i in hInvincible then
15875: LD_VAR 0 2
15879: PUSH
15880: LD_EXP 64
15884: IN
15885: IFFALSE 15905
// hInvincible := hInvincible diff i else
15887: LD_ADDR_EXP 64
15891: PUSH
15892: LD_EXP 64
15896: PUSH
15897: LD_VAR 0 2
15901: DIFF
15902: ST_TO_ADDR
15903: GO 15921
// hInvincible := hInvincible union i ;
15905: LD_ADDR_EXP 64
15909: PUSH
15910: LD_EXP 64
15914: PUSH
15915: LD_VAR 0 2
15919: UNION
15920: ST_TO_ADDR
// end ;
15921: GO 15861
15923: POP
15924: POP
// end ;
15925: LD_VAR 0 1
15929: RET
// export function hHackInvisible ; var i , j ; begin
15930: LD_INT 0
15932: PPUSH
15933: PPUSH
15934: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15935: LD_ADDR_VAR 0 2
15939: PUSH
15940: LD_INT 21
15942: PUSH
15943: LD_INT 1
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PPUSH
15950: CALL_OW 69
15954: PUSH
15955: FOR_IN
15956: IFFALSE 15980
// if IsSelected ( i ) then
15958: LD_VAR 0 2
15962: PPUSH
15963: CALL_OW 306
15967: IFFALSE 15978
// ComForceInvisible ( i ) ;
15969: LD_VAR 0 2
15973: PPUSH
15974: CALL_OW 496
15978: GO 15955
15980: POP
15981: POP
// end ;
15982: LD_VAR 0 1
15986: RET
// export function hHackChangeYourSide ; begin
15987: LD_INT 0
15989: PPUSH
// if your_side = 8 then
15990: LD_OWVAR 2
15994: PUSH
15995: LD_INT 8
15997: EQUAL
15998: IFFALSE 16010
// your_side := 0 else
16000: LD_ADDR_OWVAR 2
16004: PUSH
16005: LD_INT 0
16007: ST_TO_ADDR
16008: GO 16024
// your_side := your_side + 1 ;
16010: LD_ADDR_OWVAR 2
16014: PUSH
16015: LD_OWVAR 2
16019: PUSH
16020: LD_INT 1
16022: PLUS
16023: ST_TO_ADDR
// end ;
16024: LD_VAR 0 1
16028: RET
// export function hHackChangeUnitSide ; var i , j ; begin
16029: LD_INT 0
16031: PPUSH
16032: PPUSH
16033: PPUSH
// for i in all_units do
16034: LD_ADDR_VAR 0 2
16038: PUSH
16039: LD_OWVAR 3
16043: PUSH
16044: FOR_IN
16045: IFFALSE 16123
// if IsSelected ( i ) then
16047: LD_VAR 0 2
16051: PPUSH
16052: CALL_OW 306
16056: IFFALSE 16121
// begin j := GetSide ( i ) ;
16058: LD_ADDR_VAR 0 3
16062: PUSH
16063: LD_VAR 0 2
16067: PPUSH
16068: CALL_OW 255
16072: ST_TO_ADDR
// if j = 8 then
16073: LD_VAR 0 3
16077: PUSH
16078: LD_INT 8
16080: EQUAL
16081: IFFALSE 16093
// j := 0 else
16083: LD_ADDR_VAR 0 3
16087: PUSH
16088: LD_INT 0
16090: ST_TO_ADDR
16091: GO 16107
// j := j + 1 ;
16093: LD_ADDR_VAR 0 3
16097: PUSH
16098: LD_VAR 0 3
16102: PUSH
16103: LD_INT 1
16105: PLUS
16106: ST_TO_ADDR
// SetSide ( i , j ) ;
16107: LD_VAR 0 2
16111: PPUSH
16112: LD_VAR 0 3
16116: PPUSH
16117: CALL_OW 235
// end ;
16121: GO 16044
16123: POP
16124: POP
// end ;
16125: LD_VAR 0 1
16129: RET
// export function hHackFog ; begin
16130: LD_INT 0
16132: PPUSH
// FogOff ( true ) ;
16133: LD_INT 1
16135: PPUSH
16136: CALL_OW 344
// end ;
16140: LD_VAR 0 1
16144: RET
// export function hHackTeleport ( unit , x , y ) ; begin
16145: LD_INT 0
16147: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
16148: LD_VAR 0 1
16152: PPUSH
16153: LD_VAR 0 2
16157: PPUSH
16158: LD_VAR 0 3
16162: PPUSH
16163: LD_INT 1
16165: PPUSH
16166: LD_INT 1
16168: PPUSH
16169: CALL_OW 483
// CenterOnXY ( x , y ) ;
16173: LD_VAR 0 2
16177: PPUSH
16178: LD_VAR 0 3
16182: PPUSH
16183: CALL_OW 84
// end ; end_of_file
16187: LD_VAR 0 4
16191: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
16192: LD_VAR 0 1
16196: PUSH
16197: LD_INT 200
16199: DOUBLE
16200: GREATEREQUAL
16201: IFFALSE 16209
16203: LD_INT 299
16205: DOUBLE
16206: LESSEQUAL
16207: IFTRUE 16211
16209: GO 16243
16211: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
16212: LD_VAR 0 1
16216: PPUSH
16217: LD_VAR 0 2
16221: PPUSH
16222: LD_VAR 0 3
16226: PPUSH
16227: LD_VAR 0 4
16231: PPUSH
16232: LD_VAR 0 5
16236: PPUSH
16237: CALL 16733 0 5
16241: GO 16320
16243: LD_INT 300
16245: DOUBLE
16246: GREATEREQUAL
16247: IFFALSE 16255
16249: LD_INT 399
16251: DOUBLE
16252: LESSEQUAL
16253: IFTRUE 16257
16255: GO 16319
16257: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
16258: LD_VAR 0 1
16262: PPUSH
16263: LD_VAR 0 2
16267: PPUSH
16268: LD_VAR 0 3
16272: PPUSH
16273: LD_VAR 0 4
16277: PPUSH
16278: LD_VAR 0 5
16282: PPUSH
16283: LD_VAR 0 6
16287: PPUSH
16288: LD_VAR 0 7
16292: PPUSH
16293: LD_VAR 0 8
16297: PPUSH
16298: LD_VAR 0 9
16302: PPUSH
16303: LD_VAR 0 10
16307: PPUSH
16308: LD_VAR 0 11
16312: PPUSH
16313: CALL 14212 0 11
16317: GO 16320
16319: POP
// end ;
16320: PPOPN 11
16322: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
16323: LD_VAR 0 1
16327: PPUSH
16328: LD_VAR 0 2
16332: PPUSH
16333: LD_VAR 0 3
16337: PPUSH
16338: LD_VAR 0 4
16342: PPUSH
16343: LD_VAR 0 5
16347: PPUSH
16348: CALL 16469 0 5
// end ; end_of_file
16352: PPOPN 5
16354: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
16355: LD_INT 0
16357: PPUSH
16358: PPUSH
16359: PPUSH
16360: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
16361: LD_VAR 0 1
16365: PPUSH
16366: CALL_OW 264
16370: PUSH
16371: LD_EXP 80
16375: EQUAL
16376: IFFALSE 16448
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
16378: LD_INT 68
16380: PPUSH
16381: LD_VAR 0 1
16385: PPUSH
16386: CALL_OW 255
16390: PPUSH
16391: CALL_OW 321
16395: PUSH
16396: LD_INT 2
16398: EQUAL
16399: IFFALSE 16411
// eff := 70 else
16401: LD_ADDR_VAR 0 4
16405: PUSH
16406: LD_INT 70
16408: ST_TO_ADDR
16409: GO 16419
// eff := 30 ;
16411: LD_ADDR_VAR 0 4
16415: PUSH
16416: LD_INT 30
16418: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
16419: LD_VAR 0 1
16423: PPUSH
16424: CALL_OW 250
16428: PPUSH
16429: LD_VAR 0 1
16433: PPUSH
16434: CALL_OW 251
16438: PPUSH
16439: LD_VAR 0 4
16443: PPUSH
16444: CALL_OW 495
// end ; end ;
16448: LD_VAR 0 2
16452: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
16453: LD_INT 0
16455: PPUSH
// end ;
16456: LD_VAR 0 4
16460: RET
// export function SOS_Command ( cmd ) ; begin
16461: LD_INT 0
16463: PPUSH
// end ;
16464: LD_VAR 0 2
16468: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
16469: LD_INT 0
16471: PPUSH
// end ;
16472: LD_VAR 0 6
16476: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
16477: LD_INT 0
16479: PPUSH
16480: PPUSH
// if not vehicle or not factory then
16481: LD_VAR 0 1
16485: NOT
16486: PUSH
16487: LD_VAR 0 2
16491: NOT
16492: OR
16493: IFFALSE 16497
// exit ;
16495: GO 16728
// if factoryWaypoints >= factory then
16497: LD_EXP 65
16501: PUSH
16502: LD_VAR 0 2
16506: GREATEREQUAL
16507: IFFALSE 16728
// if factoryWaypoints [ factory ] then
16509: LD_EXP 65
16513: PUSH
16514: LD_VAR 0 2
16518: ARRAY
16519: IFFALSE 16728
// begin if GetControl ( vehicle ) = control_manual then
16521: LD_VAR 0 1
16525: PPUSH
16526: CALL_OW 263
16530: PUSH
16531: LD_INT 1
16533: EQUAL
16534: IFFALSE 16615
// begin driver := IsDrivenBy ( vehicle ) ;
16536: LD_ADDR_VAR 0 4
16540: PUSH
16541: LD_VAR 0 1
16545: PPUSH
16546: CALL_OW 311
16550: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
16551: LD_VAR 0 4
16555: PPUSH
16556: LD_EXP 65
16560: PUSH
16561: LD_VAR 0 2
16565: ARRAY
16566: PUSH
16567: LD_INT 1
16569: ARRAY
16570: PPUSH
16571: LD_EXP 65
16575: PUSH
16576: LD_VAR 0 2
16580: ARRAY
16581: PUSH
16582: LD_INT 2
16584: ARRAY
16585: PPUSH
16586: CALL_OW 171
// AddComExitVehicle ( driver ) ;
16590: LD_VAR 0 4
16594: PPUSH
16595: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
16599: LD_VAR 0 4
16603: PPUSH
16604: LD_VAR 0 2
16608: PPUSH
16609: CALL_OW 180
// end else
16613: GO 16728
// if GetControl ( vehicle ) = control_remote then
16615: LD_VAR 0 1
16619: PPUSH
16620: CALL_OW 263
16624: PUSH
16625: LD_INT 2
16627: EQUAL
16628: IFFALSE 16689
// begin wait ( 0 0$2 ) ;
16630: LD_INT 70
16632: PPUSH
16633: CALL_OW 67
// if Connect ( vehicle ) then
16637: LD_VAR 0 1
16641: PPUSH
16642: CALL 29120 0 1
16646: IFFALSE 16687
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
16648: LD_VAR 0 1
16652: PPUSH
16653: LD_EXP 65
16657: PUSH
16658: LD_VAR 0 2
16662: ARRAY
16663: PUSH
16664: LD_INT 1
16666: ARRAY
16667: PPUSH
16668: LD_EXP 65
16672: PUSH
16673: LD_VAR 0 2
16677: ARRAY
16678: PUSH
16679: LD_INT 2
16681: ARRAY
16682: PPUSH
16683: CALL_OW 171
// end else
16687: GO 16728
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
16689: LD_VAR 0 1
16693: PPUSH
16694: LD_EXP 65
16698: PUSH
16699: LD_VAR 0 2
16703: ARRAY
16704: PUSH
16705: LD_INT 1
16707: ARRAY
16708: PPUSH
16709: LD_EXP 65
16713: PUSH
16714: LD_VAR 0 2
16718: ARRAY
16719: PUSH
16720: LD_INT 2
16722: ARRAY
16723: PPUSH
16724: CALL_OW 171
// end ; end ;
16728: LD_VAR 0 3
16732: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
16733: LD_INT 0
16735: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
16736: LD_VAR 0 1
16740: PUSH
16741: LD_INT 250
16743: EQUAL
16744: PUSH
16745: LD_VAR 0 2
16749: PPUSH
16750: CALL_OW 264
16754: PUSH
16755: LD_EXP 83
16759: EQUAL
16760: AND
16761: IFFALSE 16782
// MinerPlaceMine ( unit , x , y ) ;
16763: LD_VAR 0 2
16767: PPUSH
16768: LD_VAR 0 4
16772: PPUSH
16773: LD_VAR 0 5
16777: PPUSH
16778: CALL 19510 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
16782: LD_VAR 0 1
16786: PUSH
16787: LD_INT 251
16789: EQUAL
16790: PUSH
16791: LD_VAR 0 2
16795: PPUSH
16796: CALL_OW 264
16800: PUSH
16801: LD_EXP 83
16805: EQUAL
16806: AND
16807: IFFALSE 16828
// MinerDetonateMine ( unit , x , y ) ;
16809: LD_VAR 0 2
16813: PPUSH
16814: LD_VAR 0 4
16818: PPUSH
16819: LD_VAR 0 5
16823: PPUSH
16824: CALL 19787 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
16828: LD_VAR 0 1
16832: PUSH
16833: LD_INT 252
16835: EQUAL
16836: PUSH
16837: LD_VAR 0 2
16841: PPUSH
16842: CALL_OW 264
16846: PUSH
16847: LD_EXP 83
16851: EQUAL
16852: AND
16853: IFFALSE 16874
// MinerCreateMinefield ( unit , x , y ) ;
16855: LD_VAR 0 2
16859: PPUSH
16860: LD_VAR 0 4
16864: PPUSH
16865: LD_VAR 0 5
16869: PPUSH
16870: CALL 20204 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
16874: LD_VAR 0 1
16878: PUSH
16879: LD_INT 253
16881: EQUAL
16882: PUSH
16883: LD_VAR 0 2
16887: PPUSH
16888: CALL_OW 257
16892: PUSH
16893: LD_INT 5
16895: EQUAL
16896: AND
16897: IFFALSE 16918
// ComBinocular ( unit , x , y ) ;
16899: LD_VAR 0 2
16903: PPUSH
16904: LD_VAR 0 4
16908: PPUSH
16909: LD_VAR 0 5
16913: PPUSH
16914: CALL 20575 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
16918: LD_VAR 0 1
16922: PUSH
16923: LD_INT 254
16925: EQUAL
16926: PUSH
16927: LD_VAR 0 2
16931: PPUSH
16932: CALL_OW 264
16936: PUSH
16937: LD_EXP 78
16941: EQUAL
16942: AND
16943: PUSH
16944: LD_VAR 0 3
16948: PPUSH
16949: CALL_OW 263
16953: PUSH
16954: LD_INT 3
16956: EQUAL
16957: AND
16958: IFFALSE 16974
// HackDestroyVehicle ( unit , selectedUnit ) ;
16960: LD_VAR 0 2
16964: PPUSH
16965: LD_VAR 0 3
16969: PPUSH
16970: CALL 18870 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
16974: LD_VAR 0 1
16978: PUSH
16979: LD_INT 255
16981: EQUAL
16982: PUSH
16983: LD_VAR 0 2
16987: PPUSH
16988: CALL_OW 264
16992: PUSH
16993: LD_INT 14
16995: PUSH
16996: LD_INT 53
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: IN
17003: AND
17004: PUSH
17005: LD_VAR 0 4
17009: PPUSH
17010: LD_VAR 0 5
17014: PPUSH
17015: CALL_OW 488
17019: AND
17020: IFFALSE 17044
// CutTreeXYR ( unit , x , y , 12 ) ;
17022: LD_VAR 0 2
17026: PPUSH
17027: LD_VAR 0 4
17031: PPUSH
17032: LD_VAR 0 5
17036: PPUSH
17037: LD_INT 12
17039: PPUSH
17040: CALL 17436 0 4
// if cmd = 256 then
17044: LD_VAR 0 1
17048: PUSH
17049: LD_INT 256
17051: EQUAL
17052: IFFALSE 17073
// SetFactoryWaypoint ( unit , x , y ) ;
17054: LD_VAR 0 2
17058: PPUSH
17059: LD_VAR 0 4
17063: PPUSH
17064: LD_VAR 0 5
17068: PPUSH
17069: CALL 17078 0 3
// end ;
17073: LD_VAR 0 6
17077: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
17078: LD_INT 0
17080: PPUSH
17081: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
17082: LD_VAR 0 1
17086: NOT
17087: PUSH
17088: LD_VAR 0 2
17092: PPUSH
17093: LD_VAR 0 3
17097: PPUSH
17098: CALL_OW 488
17102: NOT
17103: OR
17104: PUSH
17105: LD_VAR 0 1
17109: PPUSH
17110: CALL_OW 266
17114: PUSH
17115: LD_INT 3
17117: NONEQUAL
17118: PUSH
17119: LD_VAR 0 1
17123: PPUSH
17124: CALL_OW 247
17128: PUSH
17129: LD_INT 1
17131: EQUAL
17132: NOT
17133: AND
17134: OR
17135: IFFALSE 17139
// exit ;
17137: GO 17288
// if GetType ( factory ) = unit_human then
17139: LD_VAR 0 1
17143: PPUSH
17144: CALL_OW 247
17148: PUSH
17149: LD_INT 1
17151: EQUAL
17152: IFFALSE 17169
// factory := IsInUnit ( factory ) ;
17154: LD_ADDR_VAR 0 1
17158: PUSH
17159: LD_VAR 0 1
17163: PPUSH
17164: CALL_OW 310
17168: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
17169: LD_VAR 0 1
17173: PPUSH
17174: CALL_OW 266
17178: PUSH
17179: LD_INT 3
17181: NONEQUAL
17182: IFFALSE 17186
// exit ;
17184: GO 17288
// if HexInfo ( x , y ) = factory then
17186: LD_VAR 0 2
17190: PPUSH
17191: LD_VAR 0 3
17195: PPUSH
17196: CALL_OW 428
17200: PUSH
17201: LD_VAR 0 1
17205: EQUAL
17206: IFFALSE 17233
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
17208: LD_ADDR_EXP 65
17212: PUSH
17213: LD_EXP 65
17217: PPUSH
17218: LD_VAR 0 1
17222: PPUSH
17223: LD_INT 0
17225: PPUSH
17226: CALL_OW 1
17230: ST_TO_ADDR
17231: GO 17284
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
17233: LD_ADDR_EXP 65
17237: PUSH
17238: LD_EXP 65
17242: PPUSH
17243: LD_VAR 0 1
17247: PPUSH
17248: LD_VAR 0 1
17252: PPUSH
17253: CALL_OW 255
17257: PUSH
17258: LD_VAR 0 1
17262: PUSH
17263: LD_VAR 0 2
17267: PUSH
17268: LD_VAR 0 3
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: PPUSH
17279: CALL_OW 1
17283: ST_TO_ADDR
// UpdateFactoryWaypoints ;
17284: CALL 17293 0 0
// end ;
17288: LD_VAR 0 4
17292: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
17293: LD_INT 0
17295: PPUSH
17296: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
17297: LD_STRING resetFactoryWaypoint();
17299: PPUSH
17300: CALL_OW 559
// if factoryWaypoints then
17304: LD_EXP 65
17308: IFFALSE 17431
// begin for i := 1 to factoryWaypoints do
17310: LD_ADDR_VAR 0 2
17314: PUSH
17315: DOUBLE
17316: LD_INT 1
17318: DEC
17319: ST_TO_ADDR
17320: LD_EXP 65
17324: PUSH
17325: FOR_TO
17326: IFFALSE 17429
// if factoryWaypoints [ i ] then
17328: LD_EXP 65
17332: PUSH
17333: LD_VAR 0 2
17337: ARRAY
17338: IFFALSE 17427
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
17340: LD_STRING setFactoryWaypointXY(
17342: PUSH
17343: LD_EXP 65
17347: PUSH
17348: LD_VAR 0 2
17352: ARRAY
17353: PUSH
17354: LD_INT 1
17356: ARRAY
17357: STR
17358: PUSH
17359: LD_STRING ,
17361: STR
17362: PUSH
17363: LD_EXP 65
17367: PUSH
17368: LD_VAR 0 2
17372: ARRAY
17373: PUSH
17374: LD_INT 2
17376: ARRAY
17377: STR
17378: PUSH
17379: LD_STRING ,
17381: STR
17382: PUSH
17383: LD_EXP 65
17387: PUSH
17388: LD_VAR 0 2
17392: ARRAY
17393: PUSH
17394: LD_INT 3
17396: ARRAY
17397: STR
17398: PUSH
17399: LD_STRING ,
17401: STR
17402: PUSH
17403: LD_EXP 65
17407: PUSH
17408: LD_VAR 0 2
17412: ARRAY
17413: PUSH
17414: LD_INT 4
17416: ARRAY
17417: STR
17418: PUSH
17419: LD_STRING )
17421: STR
17422: PPUSH
17423: CALL_OW 559
17427: GO 17325
17429: POP
17430: POP
// end ; end ;
17431: LD_VAR 0 1
17435: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17436: LD_INT 0
17438: PPUSH
17439: PPUSH
17440: PPUSH
17441: PPUSH
17442: PPUSH
17443: PPUSH
17444: PPUSH
17445: PPUSH
17446: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
17447: LD_VAR 0 1
17451: NOT
17452: PUSH
17453: LD_VAR 0 2
17457: PPUSH
17458: LD_VAR 0 3
17462: PPUSH
17463: CALL_OW 488
17467: NOT
17468: OR
17469: PUSH
17470: LD_VAR 0 4
17474: NOT
17475: OR
17476: IFFALSE 17480
// exit ;
17478: GO 17820
// list := [ ] ;
17480: LD_ADDR_VAR 0 13
17484: PUSH
17485: EMPTY
17486: ST_TO_ADDR
// if x - r < 0 then
17487: LD_VAR 0 2
17491: PUSH
17492: LD_VAR 0 4
17496: MINUS
17497: PUSH
17498: LD_INT 0
17500: LESS
17501: IFFALSE 17513
// min_x := 0 else
17503: LD_ADDR_VAR 0 7
17507: PUSH
17508: LD_INT 0
17510: ST_TO_ADDR
17511: GO 17529
// min_x := x - r ;
17513: LD_ADDR_VAR 0 7
17517: PUSH
17518: LD_VAR 0 2
17522: PUSH
17523: LD_VAR 0 4
17527: MINUS
17528: ST_TO_ADDR
// if y - r < 0 then
17529: LD_VAR 0 3
17533: PUSH
17534: LD_VAR 0 4
17538: MINUS
17539: PUSH
17540: LD_INT 0
17542: LESS
17543: IFFALSE 17555
// min_y := 0 else
17545: LD_ADDR_VAR 0 8
17549: PUSH
17550: LD_INT 0
17552: ST_TO_ADDR
17553: GO 17571
// min_y := y - r ;
17555: LD_ADDR_VAR 0 8
17559: PUSH
17560: LD_VAR 0 3
17564: PUSH
17565: LD_VAR 0 4
17569: MINUS
17570: ST_TO_ADDR
// max_x := x + r ;
17571: LD_ADDR_VAR 0 9
17575: PUSH
17576: LD_VAR 0 2
17580: PUSH
17581: LD_VAR 0 4
17585: PLUS
17586: ST_TO_ADDR
// max_y := y + r ;
17587: LD_ADDR_VAR 0 10
17591: PUSH
17592: LD_VAR 0 3
17596: PUSH
17597: LD_VAR 0 4
17601: PLUS
17602: ST_TO_ADDR
// for _x = min_x to max_x do
17603: LD_ADDR_VAR 0 11
17607: PUSH
17608: DOUBLE
17609: LD_VAR 0 7
17613: DEC
17614: ST_TO_ADDR
17615: LD_VAR 0 9
17619: PUSH
17620: FOR_TO
17621: IFFALSE 17738
// for _y = min_y to max_y do
17623: LD_ADDR_VAR 0 12
17627: PUSH
17628: DOUBLE
17629: LD_VAR 0 8
17633: DEC
17634: ST_TO_ADDR
17635: LD_VAR 0 10
17639: PUSH
17640: FOR_TO
17641: IFFALSE 17734
// begin if not ValidHex ( _x , _y ) then
17643: LD_VAR 0 11
17647: PPUSH
17648: LD_VAR 0 12
17652: PPUSH
17653: CALL_OW 488
17657: NOT
17658: IFFALSE 17662
// continue ;
17660: GO 17640
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17662: LD_VAR 0 11
17666: PPUSH
17667: LD_VAR 0 12
17671: PPUSH
17672: CALL_OW 351
17676: PUSH
17677: LD_VAR 0 11
17681: PPUSH
17682: LD_VAR 0 12
17686: PPUSH
17687: CALL_OW 554
17691: AND
17692: IFFALSE 17732
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17694: LD_ADDR_VAR 0 13
17698: PUSH
17699: LD_VAR 0 13
17703: PPUSH
17704: LD_VAR 0 13
17708: PUSH
17709: LD_INT 1
17711: PLUS
17712: PPUSH
17713: LD_VAR 0 11
17717: PUSH
17718: LD_VAR 0 12
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PPUSH
17727: CALL_OW 2
17731: ST_TO_ADDR
// end ;
17732: GO 17640
17734: POP
17735: POP
17736: GO 17620
17738: POP
17739: POP
// if not list then
17740: LD_VAR 0 13
17744: NOT
17745: IFFALSE 17749
// exit ;
17747: GO 17820
// for i in list do
17749: LD_ADDR_VAR 0 6
17753: PUSH
17754: LD_VAR 0 13
17758: PUSH
17759: FOR_IN
17760: IFFALSE 17818
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
17762: LD_VAR 0 1
17766: PPUSH
17767: LD_STRING M
17769: PUSH
17770: LD_VAR 0 6
17774: PUSH
17775: LD_INT 1
17777: ARRAY
17778: PUSH
17779: LD_VAR 0 6
17783: PUSH
17784: LD_INT 2
17786: ARRAY
17787: PUSH
17788: LD_INT 0
17790: PUSH
17791: LD_INT 0
17793: PUSH
17794: LD_INT 0
17796: PUSH
17797: LD_INT 0
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: PUSH
17809: EMPTY
17810: LIST
17811: PPUSH
17812: CALL_OW 447
17816: GO 17759
17818: POP
17819: POP
// end ;
17820: LD_VAR 0 5
17824: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
17825: LD_EXP 66
17829: NOT
17830: IFFALSE 17880
17832: GO 17834
17834: DISABLE
// begin initHack := true ;
17835: LD_ADDR_EXP 66
17839: PUSH
17840: LD_INT 1
17842: ST_TO_ADDR
// hackTanks := [ ] ;
17843: LD_ADDR_EXP 67
17847: PUSH
17848: EMPTY
17849: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
17850: LD_ADDR_EXP 68
17854: PUSH
17855: EMPTY
17856: ST_TO_ADDR
// hackLimit := 3 ;
17857: LD_ADDR_EXP 69
17861: PUSH
17862: LD_INT 3
17864: ST_TO_ADDR
// hackDist := 12 ;
17865: LD_ADDR_EXP 70
17869: PUSH
17870: LD_INT 12
17872: ST_TO_ADDR
// hackCounter := [ ] ;
17873: LD_ADDR_EXP 71
17877: PUSH
17878: EMPTY
17879: ST_TO_ADDR
// end ;
17880: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
17881: LD_EXP 66
17885: PUSH
17886: LD_INT 34
17888: PUSH
17889: LD_EXP 78
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PPUSH
17898: CALL_OW 69
17902: AND
17903: IFFALSE 18158
17905: GO 17907
17907: DISABLE
17908: LD_INT 0
17910: PPUSH
17911: PPUSH
// begin enable ;
17912: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
17913: LD_ADDR_VAR 0 1
17917: PUSH
17918: LD_INT 34
17920: PUSH
17921: LD_EXP 78
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PPUSH
17930: CALL_OW 69
17934: PUSH
17935: FOR_IN
17936: IFFALSE 18156
// begin if not i in hackTanks then
17938: LD_VAR 0 1
17942: PUSH
17943: LD_EXP 67
17947: IN
17948: NOT
17949: IFFALSE 18032
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
17951: LD_ADDR_EXP 67
17955: PUSH
17956: LD_EXP 67
17960: PPUSH
17961: LD_EXP 67
17965: PUSH
17966: LD_INT 1
17968: PLUS
17969: PPUSH
17970: LD_VAR 0 1
17974: PPUSH
17975: CALL_OW 1
17979: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
17980: LD_ADDR_EXP 68
17984: PUSH
17985: LD_EXP 68
17989: PPUSH
17990: LD_EXP 68
17994: PUSH
17995: LD_INT 1
17997: PLUS
17998: PPUSH
17999: EMPTY
18000: PPUSH
18001: CALL_OW 1
18005: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18006: LD_ADDR_EXP 71
18010: PUSH
18011: LD_EXP 71
18015: PPUSH
18016: LD_EXP 71
18020: PUSH
18021: LD_INT 1
18023: PLUS
18024: PPUSH
18025: EMPTY
18026: PPUSH
18027: CALL_OW 1
18031: ST_TO_ADDR
// end ; if not IsOk ( i ) then
18032: LD_VAR 0 1
18036: PPUSH
18037: CALL_OW 302
18041: NOT
18042: IFFALSE 18055
// begin HackUnlinkAll ( i ) ;
18044: LD_VAR 0 1
18048: PPUSH
18049: CALL 18161 0 1
// continue ;
18053: GO 17935
// end ; HackCheckCapturedStatus ( i ) ;
18055: LD_VAR 0 1
18059: PPUSH
18060: CALL 18604 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
18064: LD_ADDR_VAR 0 2
18068: PUSH
18069: LD_INT 81
18071: PUSH
18072: LD_VAR 0 1
18076: PPUSH
18077: CALL_OW 255
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 33
18088: PUSH
18089: LD_INT 3
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: PUSH
18096: LD_INT 91
18098: PUSH
18099: LD_VAR 0 1
18103: PUSH
18104: LD_EXP 70
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 50
18116: PUSH
18117: EMPTY
18118: LIST
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: PPUSH
18126: CALL_OW 69
18130: ST_TO_ADDR
// if not tmp then
18131: LD_VAR 0 2
18135: NOT
18136: IFFALSE 18140
// continue ;
18138: GO 17935
// HackLink ( i , tmp ) ;
18140: LD_VAR 0 1
18144: PPUSH
18145: LD_VAR 0 2
18149: PPUSH
18150: CALL 18297 0 2
// end ;
18154: GO 17935
18156: POP
18157: POP
// end ;
18158: PPOPN 2
18160: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
18161: LD_INT 0
18163: PPUSH
18164: PPUSH
18165: PPUSH
// if not hack in hackTanks then
18166: LD_VAR 0 1
18170: PUSH
18171: LD_EXP 67
18175: IN
18176: NOT
18177: IFFALSE 18181
// exit ;
18179: GO 18292
// index := GetElementIndex ( hackTanks , hack ) ;
18181: LD_ADDR_VAR 0 4
18185: PUSH
18186: LD_EXP 67
18190: PPUSH
18191: LD_VAR 0 1
18195: PPUSH
18196: CALL 25934 0 2
18200: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
18201: LD_EXP 68
18205: PUSH
18206: LD_VAR 0 4
18210: ARRAY
18211: IFFALSE 18292
// begin for i in hackTanksCaptured [ index ] do
18213: LD_ADDR_VAR 0 3
18217: PUSH
18218: LD_EXP 68
18222: PUSH
18223: LD_VAR 0 4
18227: ARRAY
18228: PUSH
18229: FOR_IN
18230: IFFALSE 18256
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
18232: LD_VAR 0 3
18236: PUSH
18237: LD_INT 1
18239: ARRAY
18240: PPUSH
18241: LD_VAR 0 3
18245: PUSH
18246: LD_INT 2
18248: ARRAY
18249: PPUSH
18250: CALL_OW 235
18254: GO 18229
18256: POP
18257: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
18258: LD_ADDR_EXP 68
18262: PUSH
18263: LD_EXP 68
18267: PPUSH
18268: LD_VAR 0 4
18272: PPUSH
18273: EMPTY
18274: PPUSH
18275: CALL_OW 1
18279: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
18280: LD_VAR 0 1
18284: PPUSH
18285: LD_INT 0
18287: PPUSH
18288: CALL_OW 505
// end ; end ;
18292: LD_VAR 0 2
18296: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
18297: LD_INT 0
18299: PPUSH
18300: PPUSH
18301: PPUSH
// if not hack in hackTanks or not vehicles then
18302: LD_VAR 0 1
18306: PUSH
18307: LD_EXP 67
18311: IN
18312: NOT
18313: PUSH
18314: LD_VAR 0 2
18318: NOT
18319: OR
18320: IFFALSE 18324
// exit ;
18322: GO 18599
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
18324: LD_ADDR_VAR 0 2
18328: PUSH
18329: LD_VAR 0 1
18333: PPUSH
18334: LD_VAR 0 2
18338: PPUSH
18339: LD_INT 1
18341: PPUSH
18342: LD_INT 1
18344: PPUSH
18345: CALL 26584 0 4
18349: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
18350: LD_ADDR_VAR 0 5
18354: PUSH
18355: LD_EXP 67
18359: PPUSH
18360: LD_VAR 0 1
18364: PPUSH
18365: CALL 25934 0 2
18369: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
18370: LD_EXP 68
18374: PUSH
18375: LD_VAR 0 5
18379: ARRAY
18380: PUSH
18381: LD_EXP 69
18385: LESS
18386: IFFALSE 18575
// begin for i := 1 to vehicles do
18388: LD_ADDR_VAR 0 4
18392: PUSH
18393: DOUBLE
18394: LD_INT 1
18396: DEC
18397: ST_TO_ADDR
18398: LD_VAR 0 2
18402: PUSH
18403: FOR_TO
18404: IFFALSE 18573
// begin if hackTanksCaptured [ index ] = hackLimit then
18406: LD_EXP 68
18410: PUSH
18411: LD_VAR 0 5
18415: ARRAY
18416: PUSH
18417: LD_EXP 69
18421: EQUAL
18422: IFFALSE 18426
// break ;
18424: GO 18573
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
18426: LD_ADDR_EXP 71
18430: PUSH
18431: LD_EXP 71
18435: PPUSH
18436: LD_VAR 0 5
18440: PPUSH
18441: LD_EXP 71
18445: PUSH
18446: LD_VAR 0 5
18450: ARRAY
18451: PUSH
18452: LD_INT 1
18454: PLUS
18455: PPUSH
18456: CALL_OW 1
18460: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
18461: LD_ADDR_EXP 68
18465: PUSH
18466: LD_EXP 68
18470: PPUSH
18471: LD_VAR 0 5
18475: PUSH
18476: LD_EXP 68
18480: PUSH
18481: LD_VAR 0 5
18485: ARRAY
18486: PUSH
18487: LD_INT 1
18489: PLUS
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PPUSH
18495: LD_VAR 0 2
18499: PUSH
18500: LD_VAR 0 4
18504: ARRAY
18505: PUSH
18506: LD_VAR 0 2
18510: PUSH
18511: LD_VAR 0 4
18515: ARRAY
18516: PPUSH
18517: CALL_OW 255
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PPUSH
18526: CALL 26149 0 3
18530: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
18531: LD_VAR 0 2
18535: PUSH
18536: LD_VAR 0 4
18540: ARRAY
18541: PPUSH
18542: LD_VAR 0 1
18546: PPUSH
18547: CALL_OW 255
18551: PPUSH
18552: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
18556: LD_VAR 0 2
18560: PUSH
18561: LD_VAR 0 4
18565: ARRAY
18566: PPUSH
18567: CALL_OW 141
// end ;
18571: GO 18403
18573: POP
18574: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18575: LD_VAR 0 1
18579: PPUSH
18580: LD_EXP 68
18584: PUSH
18585: LD_VAR 0 5
18589: ARRAY
18590: PUSH
18591: LD_INT 0
18593: PLUS
18594: PPUSH
18595: CALL_OW 505
// end ;
18599: LD_VAR 0 3
18603: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
18604: LD_INT 0
18606: PPUSH
18607: PPUSH
18608: PPUSH
18609: PPUSH
// if not hack in hackTanks then
18610: LD_VAR 0 1
18614: PUSH
18615: LD_EXP 67
18619: IN
18620: NOT
18621: IFFALSE 18625
// exit ;
18623: GO 18865
// index := GetElementIndex ( hackTanks , hack ) ;
18625: LD_ADDR_VAR 0 4
18629: PUSH
18630: LD_EXP 67
18634: PPUSH
18635: LD_VAR 0 1
18639: PPUSH
18640: CALL 25934 0 2
18644: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
18645: LD_ADDR_VAR 0 3
18649: PUSH
18650: DOUBLE
18651: LD_EXP 68
18655: PUSH
18656: LD_VAR 0 4
18660: ARRAY
18661: INC
18662: ST_TO_ADDR
18663: LD_INT 1
18665: PUSH
18666: FOR_DOWNTO
18667: IFFALSE 18839
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
18669: LD_ADDR_VAR 0 5
18673: PUSH
18674: LD_EXP 68
18678: PUSH
18679: LD_VAR 0 4
18683: ARRAY
18684: PUSH
18685: LD_VAR 0 3
18689: ARRAY
18690: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
18691: LD_VAR 0 5
18695: PUSH
18696: LD_INT 1
18698: ARRAY
18699: PPUSH
18700: CALL_OW 302
18704: NOT
18705: PUSH
18706: LD_VAR 0 5
18710: PUSH
18711: LD_INT 1
18713: ARRAY
18714: PPUSH
18715: CALL_OW 255
18719: PUSH
18720: LD_VAR 0 1
18724: PPUSH
18725: CALL_OW 255
18729: NONEQUAL
18730: OR
18731: IFFALSE 18837
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
18733: LD_VAR 0 5
18737: PUSH
18738: LD_INT 1
18740: ARRAY
18741: PPUSH
18742: CALL_OW 305
18746: PUSH
18747: LD_VAR 0 5
18751: PUSH
18752: LD_INT 1
18754: ARRAY
18755: PPUSH
18756: CALL_OW 255
18760: PUSH
18761: LD_VAR 0 1
18765: PPUSH
18766: CALL_OW 255
18770: EQUAL
18771: AND
18772: IFFALSE 18796
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
18774: LD_VAR 0 5
18778: PUSH
18779: LD_INT 1
18781: ARRAY
18782: PPUSH
18783: LD_VAR 0 5
18787: PUSH
18788: LD_INT 2
18790: ARRAY
18791: PPUSH
18792: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
18796: LD_ADDR_EXP 68
18800: PUSH
18801: LD_EXP 68
18805: PPUSH
18806: LD_VAR 0 4
18810: PPUSH
18811: LD_EXP 68
18815: PUSH
18816: LD_VAR 0 4
18820: ARRAY
18821: PPUSH
18822: LD_VAR 0 3
18826: PPUSH
18827: CALL_OW 3
18831: PPUSH
18832: CALL_OW 1
18836: ST_TO_ADDR
// end ; end ;
18837: GO 18666
18839: POP
18840: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
18841: LD_VAR 0 1
18845: PPUSH
18846: LD_EXP 68
18850: PUSH
18851: LD_VAR 0 4
18855: ARRAY
18856: PUSH
18857: LD_INT 0
18859: PLUS
18860: PPUSH
18861: CALL_OW 505
// end ;
18865: LD_VAR 0 2
18869: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
18870: LD_INT 0
18872: PPUSH
18873: PPUSH
18874: PPUSH
18875: PPUSH
// if not hack in hackTanks then
18876: LD_VAR 0 1
18880: PUSH
18881: LD_EXP 67
18885: IN
18886: NOT
18887: IFFALSE 18891
// exit ;
18889: GO 18976
// index := GetElementIndex ( hackTanks , hack ) ;
18891: LD_ADDR_VAR 0 5
18895: PUSH
18896: LD_EXP 67
18900: PPUSH
18901: LD_VAR 0 1
18905: PPUSH
18906: CALL 25934 0 2
18910: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
18911: LD_ADDR_VAR 0 4
18915: PUSH
18916: DOUBLE
18917: LD_INT 1
18919: DEC
18920: ST_TO_ADDR
18921: LD_EXP 68
18925: PUSH
18926: LD_VAR 0 5
18930: ARRAY
18931: PUSH
18932: FOR_TO
18933: IFFALSE 18974
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
18935: LD_EXP 68
18939: PUSH
18940: LD_VAR 0 5
18944: ARRAY
18945: PUSH
18946: LD_VAR 0 4
18950: ARRAY
18951: PUSH
18952: LD_INT 1
18954: ARRAY
18955: PUSH
18956: LD_VAR 0 2
18960: EQUAL
18961: IFFALSE 18972
// KillUnit ( vehicle ) ;
18963: LD_VAR 0 2
18967: PPUSH
18968: CALL_OW 66
18972: GO 18932
18974: POP
18975: POP
// end ;
18976: LD_VAR 0 3
18980: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
18981: LD_EXP 72
18985: NOT
18986: IFFALSE 19021
18988: GO 18990
18990: DISABLE
// begin initMiner := true ;
18991: LD_ADDR_EXP 72
18995: PUSH
18996: LD_INT 1
18998: ST_TO_ADDR
// minersList := [ ] ;
18999: LD_ADDR_EXP 73
19003: PUSH
19004: EMPTY
19005: ST_TO_ADDR
// minerMinesList := [ ] ;
19006: LD_ADDR_EXP 74
19010: PUSH
19011: EMPTY
19012: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19013: LD_ADDR_EXP 75
19017: PUSH
19018: LD_INT 5
19020: ST_TO_ADDR
// end ;
19021: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19022: LD_EXP 72
19026: PUSH
19027: LD_INT 34
19029: PUSH
19030: LD_EXP 83
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PPUSH
19039: CALL_OW 69
19043: AND
19044: IFFALSE 19507
19046: GO 19048
19048: DISABLE
19049: LD_INT 0
19051: PPUSH
19052: PPUSH
19053: PPUSH
19054: PPUSH
// begin enable ;
19055: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
19056: LD_ADDR_VAR 0 1
19060: PUSH
19061: LD_INT 34
19063: PUSH
19064: LD_EXP 83
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PPUSH
19073: CALL_OW 69
19077: PUSH
19078: FOR_IN
19079: IFFALSE 19151
// begin if not i in minersList then
19081: LD_VAR 0 1
19085: PUSH
19086: LD_EXP 73
19090: IN
19091: NOT
19092: IFFALSE 19149
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
19094: LD_ADDR_EXP 73
19098: PUSH
19099: LD_EXP 73
19103: PPUSH
19104: LD_EXP 73
19108: PUSH
19109: LD_INT 1
19111: PLUS
19112: PPUSH
19113: LD_VAR 0 1
19117: PPUSH
19118: CALL_OW 1
19122: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
19123: LD_ADDR_EXP 74
19127: PUSH
19128: LD_EXP 74
19132: PPUSH
19133: LD_EXP 74
19137: PUSH
19138: LD_INT 1
19140: PLUS
19141: PPUSH
19142: EMPTY
19143: PPUSH
19144: CALL_OW 1
19148: ST_TO_ADDR
// end end ;
19149: GO 19078
19151: POP
19152: POP
// for i := minerMinesList downto 1 do
19153: LD_ADDR_VAR 0 1
19157: PUSH
19158: DOUBLE
19159: LD_EXP 74
19163: INC
19164: ST_TO_ADDR
19165: LD_INT 1
19167: PUSH
19168: FOR_DOWNTO
19169: IFFALSE 19505
// begin if IsLive ( minersList [ i ] ) then
19171: LD_EXP 73
19175: PUSH
19176: LD_VAR 0 1
19180: ARRAY
19181: PPUSH
19182: CALL_OW 300
19186: IFFALSE 19214
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
19188: LD_EXP 73
19192: PUSH
19193: LD_VAR 0 1
19197: ARRAY
19198: PPUSH
19199: LD_EXP 74
19203: PUSH
19204: LD_VAR 0 1
19208: ARRAY
19209: PPUSH
19210: CALL_OW 505
// if not minerMinesList [ i ] then
19214: LD_EXP 74
19218: PUSH
19219: LD_VAR 0 1
19223: ARRAY
19224: NOT
19225: IFFALSE 19229
// continue ;
19227: GO 19168
// for j := minerMinesList [ i ] downto 1 do
19229: LD_ADDR_VAR 0 2
19233: PUSH
19234: DOUBLE
19235: LD_EXP 74
19239: PUSH
19240: LD_VAR 0 1
19244: ARRAY
19245: INC
19246: ST_TO_ADDR
19247: LD_INT 1
19249: PUSH
19250: FOR_DOWNTO
19251: IFFALSE 19501
// begin side := GetSide ( minersList [ i ] ) ;
19253: LD_ADDR_VAR 0 3
19257: PUSH
19258: LD_EXP 73
19262: PUSH
19263: LD_VAR 0 1
19267: ARRAY
19268: PPUSH
19269: CALL_OW 255
19273: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
19274: LD_ADDR_VAR 0 4
19278: PUSH
19279: LD_EXP 74
19283: PUSH
19284: LD_VAR 0 1
19288: ARRAY
19289: PUSH
19290: LD_VAR 0 2
19294: ARRAY
19295: PUSH
19296: LD_INT 1
19298: ARRAY
19299: PPUSH
19300: LD_EXP 74
19304: PUSH
19305: LD_VAR 0 1
19309: ARRAY
19310: PUSH
19311: LD_VAR 0 2
19315: ARRAY
19316: PUSH
19317: LD_INT 2
19319: ARRAY
19320: PPUSH
19321: CALL_OW 428
19325: ST_TO_ADDR
// if not tmp then
19326: LD_VAR 0 4
19330: NOT
19331: IFFALSE 19335
// continue ;
19333: GO 19250
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
19335: LD_VAR 0 4
19339: PUSH
19340: LD_INT 81
19342: PUSH
19343: LD_VAR 0 3
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: PPUSH
19352: CALL_OW 69
19356: IN
19357: PUSH
19358: LD_EXP 74
19362: PUSH
19363: LD_VAR 0 1
19367: ARRAY
19368: PUSH
19369: LD_VAR 0 2
19373: ARRAY
19374: PUSH
19375: LD_INT 1
19377: ARRAY
19378: PPUSH
19379: LD_EXP 74
19383: PUSH
19384: LD_VAR 0 1
19388: ARRAY
19389: PUSH
19390: LD_VAR 0 2
19394: ARRAY
19395: PUSH
19396: LD_INT 2
19398: ARRAY
19399: PPUSH
19400: CALL_OW 458
19404: AND
19405: IFFALSE 19499
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
19407: LD_EXP 74
19411: PUSH
19412: LD_VAR 0 1
19416: ARRAY
19417: PUSH
19418: LD_VAR 0 2
19422: ARRAY
19423: PUSH
19424: LD_INT 1
19426: ARRAY
19427: PPUSH
19428: LD_EXP 74
19432: PUSH
19433: LD_VAR 0 1
19437: ARRAY
19438: PUSH
19439: LD_VAR 0 2
19443: ARRAY
19444: PUSH
19445: LD_INT 2
19447: ARRAY
19448: PPUSH
19449: LD_VAR 0 3
19453: PPUSH
19454: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
19458: LD_ADDR_EXP 74
19462: PUSH
19463: LD_EXP 74
19467: PPUSH
19468: LD_VAR 0 1
19472: PPUSH
19473: LD_EXP 74
19477: PUSH
19478: LD_VAR 0 1
19482: ARRAY
19483: PPUSH
19484: LD_VAR 0 2
19488: PPUSH
19489: CALL_OW 3
19493: PPUSH
19494: CALL_OW 1
19498: ST_TO_ADDR
// end ; end ;
19499: GO 19250
19501: POP
19502: POP
// end ;
19503: GO 19168
19505: POP
19506: POP
// end ;
19507: PPOPN 4
19509: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
19510: LD_INT 0
19512: PPUSH
19513: PPUSH
// result := false ;
19514: LD_ADDR_VAR 0 4
19518: PUSH
19519: LD_INT 0
19521: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
19522: LD_VAR 0 1
19526: PPUSH
19527: CALL_OW 264
19531: PUSH
19532: LD_EXP 83
19536: EQUAL
19537: NOT
19538: IFFALSE 19542
// exit ;
19540: GO 19782
// index := GetElementIndex ( minersList , unit ) ;
19542: LD_ADDR_VAR 0 5
19546: PUSH
19547: LD_EXP 73
19551: PPUSH
19552: LD_VAR 0 1
19556: PPUSH
19557: CALL 25934 0 2
19561: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
19562: LD_EXP 74
19566: PUSH
19567: LD_VAR 0 5
19571: ARRAY
19572: PUSH
19573: LD_EXP 75
19577: GREATEREQUAL
19578: IFFALSE 19582
// exit ;
19580: GO 19782
// ComMoveXY ( unit , x , y ) ;
19582: LD_VAR 0 1
19586: PPUSH
19587: LD_VAR 0 2
19591: PPUSH
19592: LD_VAR 0 3
19596: PPUSH
19597: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19601: LD_INT 35
19603: PPUSH
19604: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
19608: LD_VAR 0 1
19612: PPUSH
19613: LD_VAR 0 2
19617: PPUSH
19618: LD_VAR 0 3
19622: PPUSH
19623: CALL 56706 0 3
19627: NOT
19628: PUSH
19629: LD_VAR 0 1
19633: PPUSH
19634: CALL_OW 314
19638: AND
19639: IFFALSE 19643
// exit ;
19641: GO 19782
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
19643: LD_VAR 0 2
19647: PPUSH
19648: LD_VAR 0 3
19652: PPUSH
19653: CALL_OW 428
19657: PUSH
19658: LD_VAR 0 1
19662: EQUAL
19663: PUSH
19664: LD_VAR 0 1
19668: PPUSH
19669: CALL_OW 314
19673: NOT
19674: AND
19675: IFFALSE 19601
// PlaySoundXY ( x , y , PlantMine ) ;
19677: LD_VAR 0 2
19681: PPUSH
19682: LD_VAR 0 3
19686: PPUSH
19687: LD_STRING PlantMine
19689: PPUSH
19690: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
19694: LD_VAR 0 2
19698: PPUSH
19699: LD_VAR 0 3
19703: PPUSH
19704: LD_VAR 0 1
19708: PPUSH
19709: CALL_OW 255
19713: PPUSH
19714: LD_INT 0
19716: PPUSH
19717: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
19721: LD_ADDR_EXP 74
19725: PUSH
19726: LD_EXP 74
19730: PPUSH
19731: LD_VAR 0 5
19735: PUSH
19736: LD_EXP 74
19740: PUSH
19741: LD_VAR 0 5
19745: ARRAY
19746: PUSH
19747: LD_INT 1
19749: PLUS
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PPUSH
19755: LD_VAR 0 2
19759: PUSH
19760: LD_VAR 0 3
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PPUSH
19769: CALL 26149 0 3
19773: ST_TO_ADDR
// result := true ;
19774: LD_ADDR_VAR 0 4
19778: PUSH
19779: LD_INT 1
19781: ST_TO_ADDR
// end ;
19782: LD_VAR 0 4
19786: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
19787: LD_INT 0
19789: PPUSH
19790: PPUSH
19791: PPUSH
// if not unit in minersList then
19792: LD_VAR 0 1
19796: PUSH
19797: LD_EXP 73
19801: IN
19802: NOT
19803: IFFALSE 19807
// exit ;
19805: GO 20199
// index := GetElementIndex ( minersList , unit ) ;
19807: LD_ADDR_VAR 0 6
19811: PUSH
19812: LD_EXP 73
19816: PPUSH
19817: LD_VAR 0 1
19821: PPUSH
19822: CALL 25934 0 2
19826: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
19827: LD_ADDR_VAR 0 5
19831: PUSH
19832: DOUBLE
19833: LD_EXP 74
19837: PUSH
19838: LD_VAR 0 6
19842: ARRAY
19843: INC
19844: ST_TO_ADDR
19845: LD_INT 1
19847: PUSH
19848: FOR_DOWNTO
19849: IFFALSE 20010
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
19851: LD_EXP 74
19855: PUSH
19856: LD_VAR 0 6
19860: ARRAY
19861: PUSH
19862: LD_VAR 0 5
19866: ARRAY
19867: PUSH
19868: LD_INT 1
19870: ARRAY
19871: PUSH
19872: LD_VAR 0 2
19876: EQUAL
19877: PUSH
19878: LD_EXP 74
19882: PUSH
19883: LD_VAR 0 6
19887: ARRAY
19888: PUSH
19889: LD_VAR 0 5
19893: ARRAY
19894: PUSH
19895: LD_INT 2
19897: ARRAY
19898: PUSH
19899: LD_VAR 0 3
19903: EQUAL
19904: AND
19905: IFFALSE 20008
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
19907: LD_EXP 74
19911: PUSH
19912: LD_VAR 0 6
19916: ARRAY
19917: PUSH
19918: LD_VAR 0 5
19922: ARRAY
19923: PUSH
19924: LD_INT 1
19926: ARRAY
19927: PPUSH
19928: LD_EXP 74
19932: PUSH
19933: LD_VAR 0 6
19937: ARRAY
19938: PUSH
19939: LD_VAR 0 5
19943: ARRAY
19944: PUSH
19945: LD_INT 2
19947: ARRAY
19948: PPUSH
19949: LD_VAR 0 1
19953: PPUSH
19954: CALL_OW 255
19958: PPUSH
19959: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
19963: LD_ADDR_EXP 74
19967: PUSH
19968: LD_EXP 74
19972: PPUSH
19973: LD_VAR 0 6
19977: PPUSH
19978: LD_EXP 74
19982: PUSH
19983: LD_VAR 0 6
19987: ARRAY
19988: PPUSH
19989: LD_VAR 0 5
19993: PPUSH
19994: CALL_OW 3
19998: PPUSH
19999: CALL_OW 1
20003: ST_TO_ADDR
// exit ;
20004: POP
20005: POP
20006: GO 20199
// end ; end ;
20008: GO 19848
20010: POP
20011: POP
// for i := minerMinesList [ index ] downto 1 do
20012: LD_ADDR_VAR 0 5
20016: PUSH
20017: DOUBLE
20018: LD_EXP 74
20022: PUSH
20023: LD_VAR 0 6
20027: ARRAY
20028: INC
20029: ST_TO_ADDR
20030: LD_INT 1
20032: PUSH
20033: FOR_DOWNTO
20034: IFFALSE 20197
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20036: LD_EXP 74
20040: PUSH
20041: LD_VAR 0 6
20045: ARRAY
20046: PUSH
20047: LD_VAR 0 5
20051: ARRAY
20052: PUSH
20053: LD_INT 1
20055: ARRAY
20056: PPUSH
20057: LD_EXP 74
20061: PUSH
20062: LD_VAR 0 6
20066: ARRAY
20067: PUSH
20068: LD_VAR 0 5
20072: ARRAY
20073: PUSH
20074: LD_INT 2
20076: ARRAY
20077: PPUSH
20078: LD_VAR 0 2
20082: PPUSH
20083: LD_VAR 0 3
20087: PPUSH
20088: CALL_OW 298
20092: PUSH
20093: LD_INT 6
20095: LESS
20096: IFFALSE 20195
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20098: LD_EXP 74
20102: PUSH
20103: LD_VAR 0 6
20107: ARRAY
20108: PUSH
20109: LD_VAR 0 5
20113: ARRAY
20114: PUSH
20115: LD_INT 1
20117: ARRAY
20118: PPUSH
20119: LD_EXP 74
20123: PUSH
20124: LD_VAR 0 6
20128: ARRAY
20129: PUSH
20130: LD_VAR 0 5
20134: ARRAY
20135: PUSH
20136: LD_INT 2
20138: ARRAY
20139: PPUSH
20140: LD_VAR 0 1
20144: PPUSH
20145: CALL_OW 255
20149: PPUSH
20150: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20154: LD_ADDR_EXP 74
20158: PUSH
20159: LD_EXP 74
20163: PPUSH
20164: LD_VAR 0 6
20168: PPUSH
20169: LD_EXP 74
20173: PUSH
20174: LD_VAR 0 6
20178: ARRAY
20179: PPUSH
20180: LD_VAR 0 5
20184: PPUSH
20185: CALL_OW 3
20189: PPUSH
20190: CALL_OW 1
20194: ST_TO_ADDR
// end ; end ;
20195: GO 20033
20197: POP
20198: POP
// end ;
20199: LD_VAR 0 4
20203: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
20204: LD_INT 0
20206: PPUSH
20207: PPUSH
20208: PPUSH
20209: PPUSH
20210: PPUSH
20211: PPUSH
20212: PPUSH
20213: PPUSH
20214: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
20215: LD_VAR 0 1
20219: PPUSH
20220: CALL_OW 264
20224: PUSH
20225: LD_EXP 83
20229: EQUAL
20230: NOT
20231: PUSH
20232: LD_VAR 0 1
20236: PUSH
20237: LD_EXP 73
20241: IN
20242: NOT
20243: OR
20244: IFFALSE 20248
// exit ;
20246: GO 20570
// index := GetElementIndex ( minersList , unit ) ;
20248: LD_ADDR_VAR 0 6
20252: PUSH
20253: LD_EXP 73
20257: PPUSH
20258: LD_VAR 0 1
20262: PPUSH
20263: CALL 25934 0 2
20267: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
20268: LD_ADDR_VAR 0 8
20272: PUSH
20273: LD_EXP 75
20277: PUSH
20278: LD_EXP 74
20282: PUSH
20283: LD_VAR 0 6
20287: ARRAY
20288: MINUS
20289: ST_TO_ADDR
// if not minesFreeAmount then
20290: LD_VAR 0 8
20294: NOT
20295: IFFALSE 20299
// exit ;
20297: GO 20570
// tmp := [ ] ;
20299: LD_ADDR_VAR 0 7
20303: PUSH
20304: EMPTY
20305: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
20306: LD_ADDR_VAR 0 5
20310: PUSH
20311: DOUBLE
20312: LD_INT 1
20314: DEC
20315: ST_TO_ADDR
20316: LD_VAR 0 8
20320: PUSH
20321: FOR_TO
20322: IFFALSE 20517
// begin _d := rand ( 0 , 5 ) ;
20324: LD_ADDR_VAR 0 11
20328: PUSH
20329: LD_INT 0
20331: PPUSH
20332: LD_INT 5
20334: PPUSH
20335: CALL_OW 12
20339: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
20340: LD_ADDR_VAR 0 12
20344: PUSH
20345: LD_INT 2
20347: PPUSH
20348: LD_INT 6
20350: PPUSH
20351: CALL_OW 12
20355: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
20356: LD_ADDR_VAR 0 9
20360: PUSH
20361: LD_VAR 0 2
20365: PPUSH
20366: LD_VAR 0 11
20370: PPUSH
20371: LD_VAR 0 12
20375: PPUSH
20376: CALL_OW 272
20380: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
20381: LD_ADDR_VAR 0 10
20385: PUSH
20386: LD_VAR 0 3
20390: PPUSH
20391: LD_VAR 0 11
20395: PPUSH
20396: LD_VAR 0 12
20400: PPUSH
20401: CALL_OW 273
20405: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
20406: LD_VAR 0 9
20410: PPUSH
20411: LD_VAR 0 10
20415: PPUSH
20416: CALL_OW 488
20420: PUSH
20421: LD_VAR 0 9
20425: PUSH
20426: LD_VAR 0 10
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_VAR 0 7
20439: IN
20440: NOT
20441: AND
20442: PUSH
20443: LD_VAR 0 9
20447: PPUSH
20448: LD_VAR 0 10
20452: PPUSH
20453: CALL_OW 458
20457: NOT
20458: AND
20459: IFFALSE 20501
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
20461: LD_ADDR_VAR 0 7
20465: PUSH
20466: LD_VAR 0 7
20470: PPUSH
20471: LD_VAR 0 7
20475: PUSH
20476: LD_INT 1
20478: PLUS
20479: PPUSH
20480: LD_VAR 0 9
20484: PUSH
20485: LD_VAR 0 10
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PPUSH
20494: CALL_OW 1
20498: ST_TO_ADDR
20499: GO 20515
// i := i - 1 ;
20501: LD_ADDR_VAR 0 5
20505: PUSH
20506: LD_VAR 0 5
20510: PUSH
20511: LD_INT 1
20513: MINUS
20514: ST_TO_ADDR
// end ;
20515: GO 20321
20517: POP
20518: POP
// for i in tmp do
20519: LD_ADDR_VAR 0 5
20523: PUSH
20524: LD_VAR 0 7
20528: PUSH
20529: FOR_IN
20530: IFFALSE 20568
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
20532: LD_VAR 0 1
20536: PPUSH
20537: LD_VAR 0 5
20541: PUSH
20542: LD_INT 1
20544: ARRAY
20545: PPUSH
20546: LD_VAR 0 5
20550: PUSH
20551: LD_INT 2
20553: ARRAY
20554: PPUSH
20555: CALL 19510 0 3
20559: NOT
20560: IFFALSE 20566
// exit ;
20562: POP
20563: POP
20564: GO 20570
20566: GO 20529
20568: POP
20569: POP
// end ;
20570: LD_VAR 0 4
20574: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
20575: LD_INT 0
20577: PPUSH
20578: PPUSH
20579: PPUSH
20580: PPUSH
20581: PPUSH
20582: PPUSH
20583: PPUSH
// if not GetClass ( unit ) = class_sniper then
20584: LD_VAR 0 1
20588: PPUSH
20589: CALL_OW 257
20593: PUSH
20594: LD_INT 5
20596: EQUAL
20597: NOT
20598: IFFALSE 20602
// exit ;
20600: GO 20990
// dist := 8 ;
20602: LD_ADDR_VAR 0 5
20606: PUSH
20607: LD_INT 8
20609: ST_TO_ADDR
// viewRange := 12 ;
20610: LD_ADDR_VAR 0 7
20614: PUSH
20615: LD_INT 12
20617: ST_TO_ADDR
// side := GetSide ( unit ) ;
20618: LD_ADDR_VAR 0 6
20622: PUSH
20623: LD_VAR 0 1
20627: PPUSH
20628: CALL_OW 255
20632: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
20633: LD_INT 61
20635: PPUSH
20636: LD_VAR 0 6
20640: PPUSH
20641: CALL_OW 321
20645: PUSH
20646: LD_INT 2
20648: EQUAL
20649: IFFALSE 20659
// viewRange := 16 ;
20651: LD_ADDR_VAR 0 7
20655: PUSH
20656: LD_INT 16
20658: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
20659: LD_VAR 0 1
20663: PPUSH
20664: LD_VAR 0 2
20668: PPUSH
20669: LD_VAR 0 3
20673: PPUSH
20674: CALL_OW 297
20678: PUSH
20679: LD_VAR 0 5
20683: GREATER
20684: IFFALSE 20763
// begin ComMoveXY ( unit , x , y ) ;
20686: LD_VAR 0 1
20690: PPUSH
20691: LD_VAR 0 2
20695: PPUSH
20696: LD_VAR 0 3
20700: PPUSH
20701: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20705: LD_INT 35
20707: PPUSH
20708: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
20712: LD_VAR 0 1
20716: PPUSH
20717: LD_VAR 0 2
20721: PPUSH
20722: LD_VAR 0 3
20726: PPUSH
20727: CALL 56706 0 3
20731: NOT
20732: IFFALSE 20736
// exit ;
20734: GO 20990
// until GetDistUnitXY ( unit , x , y ) < dist ;
20736: LD_VAR 0 1
20740: PPUSH
20741: LD_VAR 0 2
20745: PPUSH
20746: LD_VAR 0 3
20750: PPUSH
20751: CALL_OW 297
20755: PUSH
20756: LD_VAR 0 5
20760: LESS
20761: IFFALSE 20705
// end ; ComTurnXY ( unit , x , y ) ;
20763: LD_VAR 0 1
20767: PPUSH
20768: LD_VAR 0 2
20772: PPUSH
20773: LD_VAR 0 3
20777: PPUSH
20778: CALL_OW 118
// wait ( 5 ) ;
20782: LD_INT 5
20784: PPUSH
20785: CALL_OW 67
// _d := GetDir ( unit ) ;
20789: LD_ADDR_VAR 0 10
20793: PUSH
20794: LD_VAR 0 1
20798: PPUSH
20799: CALL_OW 254
20803: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
20804: LD_ADDR_VAR 0 8
20808: PUSH
20809: LD_VAR 0 1
20813: PPUSH
20814: CALL_OW 250
20818: PPUSH
20819: LD_VAR 0 10
20823: PPUSH
20824: LD_VAR 0 5
20828: PPUSH
20829: CALL_OW 272
20833: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
20834: LD_ADDR_VAR 0 9
20838: PUSH
20839: LD_VAR 0 1
20843: PPUSH
20844: CALL_OW 251
20848: PPUSH
20849: LD_VAR 0 10
20853: PPUSH
20854: LD_VAR 0 5
20858: PPUSH
20859: CALL_OW 273
20863: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
20864: LD_VAR 0 8
20868: PPUSH
20869: LD_VAR 0 9
20873: PPUSH
20874: CALL_OW 488
20878: NOT
20879: IFFALSE 20883
// exit ;
20881: GO 20990
// ComAnimCustom ( unit , 1 ) ;
20883: LD_VAR 0 1
20887: PPUSH
20888: LD_INT 1
20890: PPUSH
20891: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
20895: LD_VAR 0 8
20899: PPUSH
20900: LD_VAR 0 9
20904: PPUSH
20905: LD_VAR 0 6
20909: PPUSH
20910: LD_VAR 0 7
20914: PPUSH
20915: CALL_OW 330
// repeat wait ( 1 ) ;
20919: LD_INT 1
20921: PPUSH
20922: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
20926: LD_VAR 0 1
20930: PPUSH
20931: CALL_OW 316
20935: PUSH
20936: LD_VAR 0 1
20940: PPUSH
20941: CALL_OW 314
20945: OR
20946: PUSH
20947: LD_VAR 0 1
20951: PPUSH
20952: CALL_OW 302
20956: NOT
20957: OR
20958: PUSH
20959: LD_VAR 0 1
20963: PPUSH
20964: CALL_OW 301
20968: OR
20969: IFFALSE 20919
// RemoveSeeing ( _x , _y , side ) ;
20971: LD_VAR 0 8
20975: PPUSH
20976: LD_VAR 0 9
20980: PPUSH
20981: LD_VAR 0 6
20985: PPUSH
20986: CALL_OW 331
// end ; end_of_file
20990: LD_VAR 0 4
20994: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
20995: LD_INT 0
20997: PPUSH
// ar_miner := 81 ;
20998: LD_ADDR_EXP 83
21002: PUSH
21003: LD_INT 81
21005: ST_TO_ADDR
// ar_crane := 88 ;
21006: LD_ADDR_EXP 82
21010: PUSH
21011: LD_INT 88
21013: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
21014: LD_ADDR_EXP 77
21018: PUSH
21019: LD_INT 89
21021: ST_TO_ADDR
// us_hack := 99 ;
21022: LD_ADDR_EXP 78
21026: PUSH
21027: LD_INT 99
21029: ST_TO_ADDR
// us_artillery := 97 ;
21030: LD_ADDR_EXP 79
21034: PUSH
21035: LD_INT 97
21037: ST_TO_ADDR
// ar_bio_bomb := 91 ;
21038: LD_ADDR_EXP 80
21042: PUSH
21043: LD_INT 91
21045: ST_TO_ADDR
// ar_mortar := 92 ;
21046: LD_ADDR_EXP 81
21050: PUSH
21051: LD_INT 92
21053: ST_TO_ADDR
// ru_radar := 98 ;
21054: LD_ADDR_EXP 76
21058: PUSH
21059: LD_INT 98
21061: ST_TO_ADDR
// tech_Artillery := 80 ;
21062: LD_ADDR_EXP 84
21066: PUSH
21067: LD_INT 80
21069: ST_TO_ADDR
// tech_RadMat := 81 ;
21070: LD_ADDR_EXP 85
21074: PUSH
21075: LD_INT 81
21077: ST_TO_ADDR
// tech_BasicTools := 82 ;
21078: LD_ADDR_EXP 86
21082: PUSH
21083: LD_INT 82
21085: ST_TO_ADDR
// tech_Cargo := 83 ;
21086: LD_ADDR_EXP 87
21090: PUSH
21091: LD_INT 83
21093: ST_TO_ADDR
// tech_Track := 84 ;
21094: LD_ADDR_EXP 88
21098: PUSH
21099: LD_INT 84
21101: ST_TO_ADDR
// tech_Crane := 85 ;
21102: LD_ADDR_EXP 89
21106: PUSH
21107: LD_INT 85
21109: ST_TO_ADDR
// tech_Bulldozer := 86 ;
21110: LD_ADDR_EXP 90
21114: PUSH
21115: LD_INT 86
21117: ST_TO_ADDR
// tech_Hovercraft := 87 ;
21118: LD_ADDR_EXP 91
21122: PUSH
21123: LD_INT 87
21125: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
21126: LD_ADDR_EXP 92
21130: PUSH
21131: LD_INT 88
21133: ST_TO_ADDR
// class_mastodont := 31 ;
21134: LD_ADDR_EXP 93
21138: PUSH
21139: LD_INT 31
21141: ST_TO_ADDR
// class_horse := 21 ;
21142: LD_ADDR_EXP 94
21146: PUSH
21147: LD_INT 21
21149: ST_TO_ADDR
// end ;
21150: LD_VAR 0 1
21154: RET
// every 1 do
21155: GO 21157
21157: DISABLE
// InitGlobalVariables ; end_of_file
21158: CALL 20995 0 0
21162: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21163: LD_INT 0
21165: PPUSH
21166: PPUSH
// if exist_mode then
21167: LD_VAR 0 2
21171: IFFALSE 21196
// unit := CreateCharacter ( prefix & ident ) else
21173: LD_ADDR_VAR 0 5
21177: PUSH
21178: LD_VAR 0 3
21182: PUSH
21183: LD_VAR 0 1
21187: STR
21188: PPUSH
21189: CALL_OW 34
21193: ST_TO_ADDR
21194: GO 21211
// unit := NewCharacter ( ident ) ;
21196: LD_ADDR_VAR 0 5
21200: PUSH
21201: LD_VAR 0 1
21205: PPUSH
21206: CALL_OW 25
21210: ST_TO_ADDR
// result := unit ;
21211: LD_ADDR_VAR 0 4
21215: PUSH
21216: LD_VAR 0 5
21220: ST_TO_ADDR
// end ;
21221: LD_VAR 0 4
21225: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21226: LD_INT 0
21228: PPUSH
21229: PPUSH
// if not side or not nation then
21230: LD_VAR 0 1
21234: NOT
21235: PUSH
21236: LD_VAR 0 2
21240: NOT
21241: OR
21242: IFFALSE 21246
// exit ;
21244: GO 22014
// case nation of nation_american :
21246: LD_VAR 0 2
21250: PUSH
21251: LD_INT 1
21253: DOUBLE
21254: EQUAL
21255: IFTRUE 21259
21257: GO 21473
21259: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21260: LD_ADDR_VAR 0 4
21264: PUSH
21265: LD_INT 35
21267: PUSH
21268: LD_INT 45
21270: PUSH
21271: LD_INT 46
21273: PUSH
21274: LD_INT 47
21276: PUSH
21277: LD_INT 82
21279: PUSH
21280: LD_INT 83
21282: PUSH
21283: LD_INT 84
21285: PUSH
21286: LD_INT 85
21288: PUSH
21289: LD_INT 86
21291: PUSH
21292: LD_INT 1
21294: PUSH
21295: LD_INT 2
21297: PUSH
21298: LD_INT 6
21300: PUSH
21301: LD_INT 15
21303: PUSH
21304: LD_INT 16
21306: PUSH
21307: LD_INT 7
21309: PUSH
21310: LD_INT 12
21312: PUSH
21313: LD_INT 13
21315: PUSH
21316: LD_INT 10
21318: PUSH
21319: LD_INT 14
21321: PUSH
21322: LD_INT 20
21324: PUSH
21325: LD_INT 21
21327: PUSH
21328: LD_INT 22
21330: PUSH
21331: LD_INT 25
21333: PUSH
21334: LD_INT 32
21336: PUSH
21337: LD_INT 27
21339: PUSH
21340: LD_INT 36
21342: PUSH
21343: LD_INT 69
21345: PUSH
21346: LD_INT 39
21348: PUSH
21349: LD_INT 34
21351: PUSH
21352: LD_INT 40
21354: PUSH
21355: LD_INT 48
21357: PUSH
21358: LD_INT 49
21360: PUSH
21361: LD_INT 50
21363: PUSH
21364: LD_INT 51
21366: PUSH
21367: LD_INT 52
21369: PUSH
21370: LD_INT 53
21372: PUSH
21373: LD_INT 54
21375: PUSH
21376: LD_INT 55
21378: PUSH
21379: LD_INT 56
21381: PUSH
21382: LD_INT 57
21384: PUSH
21385: LD_INT 58
21387: PUSH
21388: LD_INT 59
21390: PUSH
21391: LD_INT 60
21393: PUSH
21394: LD_INT 61
21396: PUSH
21397: LD_INT 62
21399: PUSH
21400: LD_INT 80
21402: PUSH
21403: LD_INT 82
21405: PUSH
21406: LD_INT 83
21408: PUSH
21409: LD_INT 84
21411: PUSH
21412: LD_INT 85
21414: PUSH
21415: LD_INT 86
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: ST_TO_ADDR
21471: GO 21938
21473: LD_INT 2
21475: DOUBLE
21476: EQUAL
21477: IFTRUE 21481
21479: GO 21707
21481: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21482: LD_ADDR_VAR 0 4
21486: PUSH
21487: LD_INT 35
21489: PUSH
21490: LD_INT 45
21492: PUSH
21493: LD_INT 46
21495: PUSH
21496: LD_INT 47
21498: PUSH
21499: LD_INT 82
21501: PUSH
21502: LD_INT 83
21504: PUSH
21505: LD_INT 84
21507: PUSH
21508: LD_INT 85
21510: PUSH
21511: LD_INT 87
21513: PUSH
21514: LD_INT 70
21516: PUSH
21517: LD_INT 1
21519: PUSH
21520: LD_INT 11
21522: PUSH
21523: LD_INT 3
21525: PUSH
21526: LD_INT 4
21528: PUSH
21529: LD_INT 5
21531: PUSH
21532: LD_INT 6
21534: PUSH
21535: LD_INT 15
21537: PUSH
21538: LD_INT 18
21540: PUSH
21541: LD_INT 7
21543: PUSH
21544: LD_INT 17
21546: PUSH
21547: LD_INT 8
21549: PUSH
21550: LD_INT 20
21552: PUSH
21553: LD_INT 21
21555: PUSH
21556: LD_INT 22
21558: PUSH
21559: LD_INT 72
21561: PUSH
21562: LD_INT 26
21564: PUSH
21565: LD_INT 69
21567: PUSH
21568: LD_INT 39
21570: PUSH
21571: LD_INT 40
21573: PUSH
21574: LD_INT 41
21576: PUSH
21577: LD_INT 42
21579: PUSH
21580: LD_INT 43
21582: PUSH
21583: LD_INT 48
21585: PUSH
21586: LD_INT 49
21588: PUSH
21589: LD_INT 50
21591: PUSH
21592: LD_INT 51
21594: PUSH
21595: LD_INT 52
21597: PUSH
21598: LD_INT 53
21600: PUSH
21601: LD_INT 54
21603: PUSH
21604: LD_INT 55
21606: PUSH
21607: LD_INT 56
21609: PUSH
21610: LD_INT 60
21612: PUSH
21613: LD_INT 61
21615: PUSH
21616: LD_INT 62
21618: PUSH
21619: LD_INT 66
21621: PUSH
21622: LD_INT 67
21624: PUSH
21625: LD_INT 68
21627: PUSH
21628: LD_INT 81
21630: PUSH
21631: LD_INT 82
21633: PUSH
21634: LD_INT 83
21636: PUSH
21637: LD_INT 84
21639: PUSH
21640: LD_INT 85
21642: PUSH
21643: LD_INT 87
21645: PUSH
21646: LD_INT 88
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: LIST
21693: LIST
21694: LIST
21695: LIST
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: LIST
21703: LIST
21704: ST_TO_ADDR
21705: GO 21938
21707: LD_INT 3
21709: DOUBLE
21710: EQUAL
21711: IFTRUE 21715
21713: GO 21937
21715: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21716: LD_ADDR_VAR 0 4
21720: PUSH
21721: LD_INT 46
21723: PUSH
21724: LD_INT 47
21726: PUSH
21727: LD_INT 1
21729: PUSH
21730: LD_INT 2
21732: PUSH
21733: LD_INT 82
21735: PUSH
21736: LD_INT 83
21738: PUSH
21739: LD_INT 84
21741: PUSH
21742: LD_INT 85
21744: PUSH
21745: LD_INT 86
21747: PUSH
21748: LD_INT 11
21750: PUSH
21751: LD_INT 9
21753: PUSH
21754: LD_INT 20
21756: PUSH
21757: LD_INT 19
21759: PUSH
21760: LD_INT 21
21762: PUSH
21763: LD_INT 24
21765: PUSH
21766: LD_INT 22
21768: PUSH
21769: LD_INT 25
21771: PUSH
21772: LD_INT 28
21774: PUSH
21775: LD_INT 29
21777: PUSH
21778: LD_INT 30
21780: PUSH
21781: LD_INT 31
21783: PUSH
21784: LD_INT 37
21786: PUSH
21787: LD_INT 38
21789: PUSH
21790: LD_INT 32
21792: PUSH
21793: LD_INT 27
21795: PUSH
21796: LD_INT 33
21798: PUSH
21799: LD_INT 69
21801: PUSH
21802: LD_INT 39
21804: PUSH
21805: LD_INT 34
21807: PUSH
21808: LD_INT 40
21810: PUSH
21811: LD_INT 71
21813: PUSH
21814: LD_INT 23
21816: PUSH
21817: LD_INT 44
21819: PUSH
21820: LD_INT 48
21822: PUSH
21823: LD_INT 49
21825: PUSH
21826: LD_INT 50
21828: PUSH
21829: LD_INT 51
21831: PUSH
21832: LD_INT 52
21834: PUSH
21835: LD_INT 53
21837: PUSH
21838: LD_INT 54
21840: PUSH
21841: LD_INT 55
21843: PUSH
21844: LD_INT 56
21846: PUSH
21847: LD_INT 57
21849: PUSH
21850: LD_INT 58
21852: PUSH
21853: LD_INT 59
21855: PUSH
21856: LD_INT 63
21858: PUSH
21859: LD_INT 64
21861: PUSH
21862: LD_INT 65
21864: PUSH
21865: LD_INT 82
21867: PUSH
21868: LD_INT 83
21870: PUSH
21871: LD_INT 84
21873: PUSH
21874: LD_INT 85
21876: PUSH
21877: LD_INT 86
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: ST_TO_ADDR
21935: GO 21938
21937: POP
// if state > - 1 and state < 3 then
21938: LD_VAR 0 3
21942: PUSH
21943: LD_INT 1
21945: NEG
21946: GREATER
21947: PUSH
21948: LD_VAR 0 3
21952: PUSH
21953: LD_INT 3
21955: LESS
21956: AND
21957: IFFALSE 22014
// for i in result do
21959: LD_ADDR_VAR 0 5
21963: PUSH
21964: LD_VAR 0 4
21968: PUSH
21969: FOR_IN
21970: IFFALSE 22012
// if GetTech ( i , side ) <> state then
21972: LD_VAR 0 5
21976: PPUSH
21977: LD_VAR 0 1
21981: PPUSH
21982: CALL_OW 321
21986: PUSH
21987: LD_VAR 0 3
21991: NONEQUAL
21992: IFFALSE 22010
// result := result diff i ;
21994: LD_ADDR_VAR 0 4
21998: PUSH
21999: LD_VAR 0 4
22003: PUSH
22004: LD_VAR 0 5
22008: DIFF
22009: ST_TO_ADDR
22010: GO 21969
22012: POP
22013: POP
// end ;
22014: LD_VAR 0 4
22018: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22019: LD_INT 0
22021: PPUSH
22022: PPUSH
22023: PPUSH
// result := true ;
22024: LD_ADDR_VAR 0 3
22028: PUSH
22029: LD_INT 1
22031: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22032: LD_ADDR_VAR 0 5
22036: PUSH
22037: LD_VAR 0 2
22041: PPUSH
22042: CALL_OW 480
22046: ST_TO_ADDR
// if not tmp then
22047: LD_VAR 0 5
22051: NOT
22052: IFFALSE 22056
// exit ;
22054: GO 22105
// for i in tmp do
22056: LD_ADDR_VAR 0 4
22060: PUSH
22061: LD_VAR 0 5
22065: PUSH
22066: FOR_IN
22067: IFFALSE 22103
// if GetTech ( i , side ) <> state_researched then
22069: LD_VAR 0 4
22073: PPUSH
22074: LD_VAR 0 1
22078: PPUSH
22079: CALL_OW 321
22083: PUSH
22084: LD_INT 2
22086: NONEQUAL
22087: IFFALSE 22101
// begin result := false ;
22089: LD_ADDR_VAR 0 3
22093: PUSH
22094: LD_INT 0
22096: ST_TO_ADDR
// exit ;
22097: POP
22098: POP
22099: GO 22105
// end ;
22101: GO 22066
22103: POP
22104: POP
// end ;
22105: LD_VAR 0 3
22109: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22110: LD_INT 0
22112: PPUSH
22113: PPUSH
22114: PPUSH
22115: PPUSH
22116: PPUSH
22117: PPUSH
22118: PPUSH
22119: PPUSH
22120: PPUSH
22121: PPUSH
22122: PPUSH
22123: PPUSH
22124: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22125: LD_VAR 0 1
22129: NOT
22130: PUSH
22131: LD_VAR 0 1
22135: PPUSH
22136: CALL_OW 257
22140: PUSH
22141: LD_INT 9
22143: NONEQUAL
22144: OR
22145: IFFALSE 22149
// exit ;
22147: GO 22722
// side := GetSide ( unit ) ;
22149: LD_ADDR_VAR 0 9
22153: PUSH
22154: LD_VAR 0 1
22158: PPUSH
22159: CALL_OW 255
22163: ST_TO_ADDR
// tech_space := tech_spacanom ;
22164: LD_ADDR_VAR 0 12
22168: PUSH
22169: LD_INT 29
22171: ST_TO_ADDR
// tech_time := tech_taurad ;
22172: LD_ADDR_VAR 0 13
22176: PUSH
22177: LD_INT 28
22179: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22180: LD_ADDR_VAR 0 11
22184: PUSH
22185: LD_VAR 0 1
22189: PPUSH
22190: CALL_OW 310
22194: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22195: LD_VAR 0 11
22199: PPUSH
22200: CALL_OW 247
22204: PUSH
22205: LD_INT 2
22207: EQUAL
22208: IFFALSE 22212
// exit ;
22210: GO 22722
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22212: LD_ADDR_VAR 0 8
22216: PUSH
22217: LD_INT 81
22219: PUSH
22220: LD_VAR 0 9
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 3
22231: PUSH
22232: LD_INT 21
22234: PUSH
22235: LD_INT 3
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PPUSH
22250: CALL_OW 69
22254: ST_TO_ADDR
// if not tmp then
22255: LD_VAR 0 8
22259: NOT
22260: IFFALSE 22264
// exit ;
22262: GO 22722
// if in_unit then
22264: LD_VAR 0 11
22268: IFFALSE 22292
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22270: LD_ADDR_VAR 0 10
22274: PUSH
22275: LD_VAR 0 8
22279: PPUSH
22280: LD_VAR 0 11
22284: PPUSH
22285: CALL_OW 74
22289: ST_TO_ADDR
22290: GO 22312
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22292: LD_ADDR_VAR 0 10
22296: PUSH
22297: LD_VAR 0 8
22301: PPUSH
22302: LD_VAR 0 1
22306: PPUSH
22307: CALL_OW 74
22311: ST_TO_ADDR
// if not enemy then
22312: LD_VAR 0 10
22316: NOT
22317: IFFALSE 22321
// exit ;
22319: GO 22722
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22321: LD_VAR 0 11
22325: PUSH
22326: LD_VAR 0 11
22330: PPUSH
22331: LD_VAR 0 10
22335: PPUSH
22336: CALL_OW 296
22340: PUSH
22341: LD_INT 13
22343: GREATER
22344: AND
22345: PUSH
22346: LD_VAR 0 1
22350: PPUSH
22351: LD_VAR 0 10
22355: PPUSH
22356: CALL_OW 296
22360: PUSH
22361: LD_INT 12
22363: GREATER
22364: OR
22365: IFFALSE 22369
// exit ;
22367: GO 22722
// missile := [ 1 ] ;
22369: LD_ADDR_VAR 0 14
22373: PUSH
22374: LD_INT 1
22376: PUSH
22377: EMPTY
22378: LIST
22379: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22380: LD_VAR 0 9
22384: PPUSH
22385: LD_VAR 0 12
22389: PPUSH
22390: CALL_OW 325
22394: IFFALSE 22423
// missile := Insert ( missile , missile + 1 , 2 ) ;
22396: LD_ADDR_VAR 0 14
22400: PUSH
22401: LD_VAR 0 14
22405: PPUSH
22406: LD_VAR 0 14
22410: PUSH
22411: LD_INT 1
22413: PLUS
22414: PPUSH
22415: LD_INT 2
22417: PPUSH
22418: CALL_OW 2
22422: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22423: LD_VAR 0 9
22427: PPUSH
22428: LD_VAR 0 13
22432: PPUSH
22433: CALL_OW 325
22437: PUSH
22438: LD_VAR 0 10
22442: PPUSH
22443: CALL_OW 255
22447: PPUSH
22448: LD_VAR 0 13
22452: PPUSH
22453: CALL_OW 325
22457: NOT
22458: AND
22459: IFFALSE 22488
// missile := Insert ( missile , missile + 1 , 3 ) ;
22461: LD_ADDR_VAR 0 14
22465: PUSH
22466: LD_VAR 0 14
22470: PPUSH
22471: LD_VAR 0 14
22475: PUSH
22476: LD_INT 1
22478: PLUS
22479: PPUSH
22480: LD_INT 3
22482: PPUSH
22483: CALL_OW 2
22487: ST_TO_ADDR
// if missile < 2 then
22488: LD_VAR 0 14
22492: PUSH
22493: LD_INT 2
22495: LESS
22496: IFFALSE 22500
// exit ;
22498: GO 22722
// x := GetX ( enemy ) ;
22500: LD_ADDR_VAR 0 4
22504: PUSH
22505: LD_VAR 0 10
22509: PPUSH
22510: CALL_OW 250
22514: ST_TO_ADDR
// y := GetY ( enemy ) ;
22515: LD_ADDR_VAR 0 5
22519: PUSH
22520: LD_VAR 0 10
22524: PPUSH
22525: CALL_OW 251
22529: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22530: LD_ADDR_VAR 0 6
22534: PUSH
22535: LD_VAR 0 4
22539: PUSH
22540: LD_INT 1
22542: NEG
22543: PPUSH
22544: LD_INT 1
22546: PPUSH
22547: CALL_OW 12
22551: PLUS
22552: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22553: LD_ADDR_VAR 0 7
22557: PUSH
22558: LD_VAR 0 5
22562: PUSH
22563: LD_INT 1
22565: NEG
22566: PPUSH
22567: LD_INT 1
22569: PPUSH
22570: CALL_OW 12
22574: PLUS
22575: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22576: LD_VAR 0 6
22580: PPUSH
22581: LD_VAR 0 7
22585: PPUSH
22586: CALL_OW 488
22590: NOT
22591: IFFALSE 22613
// begin _x := x ;
22593: LD_ADDR_VAR 0 6
22597: PUSH
22598: LD_VAR 0 4
22602: ST_TO_ADDR
// _y := y ;
22603: LD_ADDR_VAR 0 7
22607: PUSH
22608: LD_VAR 0 5
22612: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22613: LD_ADDR_VAR 0 3
22617: PUSH
22618: LD_INT 1
22620: PPUSH
22621: LD_VAR 0 14
22625: PPUSH
22626: CALL_OW 12
22630: ST_TO_ADDR
// case i of 1 :
22631: LD_VAR 0 3
22635: PUSH
22636: LD_INT 1
22638: DOUBLE
22639: EQUAL
22640: IFTRUE 22644
22642: GO 22661
22644: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22645: LD_VAR 0 1
22649: PPUSH
22650: LD_VAR 0 10
22654: PPUSH
22655: CALL_OW 115
22659: GO 22722
22661: LD_INT 2
22663: DOUBLE
22664: EQUAL
22665: IFTRUE 22669
22667: GO 22691
22669: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22670: LD_VAR 0 1
22674: PPUSH
22675: LD_VAR 0 6
22679: PPUSH
22680: LD_VAR 0 7
22684: PPUSH
22685: CALL_OW 153
22689: GO 22722
22691: LD_INT 3
22693: DOUBLE
22694: EQUAL
22695: IFTRUE 22699
22697: GO 22721
22699: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22700: LD_VAR 0 1
22704: PPUSH
22705: LD_VAR 0 6
22709: PPUSH
22710: LD_VAR 0 7
22714: PPUSH
22715: CALL_OW 154
22719: GO 22722
22721: POP
// end ;
22722: LD_VAR 0 2
22726: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22727: LD_INT 0
22729: PPUSH
22730: PPUSH
22731: PPUSH
22732: PPUSH
22733: PPUSH
22734: PPUSH
// if not unit or not building then
22735: LD_VAR 0 1
22739: NOT
22740: PUSH
22741: LD_VAR 0 2
22745: NOT
22746: OR
22747: IFFALSE 22751
// exit ;
22749: GO 22909
// x := GetX ( building ) ;
22751: LD_ADDR_VAR 0 5
22755: PUSH
22756: LD_VAR 0 2
22760: PPUSH
22761: CALL_OW 250
22765: ST_TO_ADDR
// y := GetY ( building ) ;
22766: LD_ADDR_VAR 0 6
22770: PUSH
22771: LD_VAR 0 2
22775: PPUSH
22776: CALL_OW 251
22780: ST_TO_ADDR
// for i = 0 to 5 do
22781: LD_ADDR_VAR 0 4
22785: PUSH
22786: DOUBLE
22787: LD_INT 0
22789: DEC
22790: ST_TO_ADDR
22791: LD_INT 5
22793: PUSH
22794: FOR_TO
22795: IFFALSE 22907
// begin _x := ShiftX ( x , i , 3 ) ;
22797: LD_ADDR_VAR 0 7
22801: PUSH
22802: LD_VAR 0 5
22806: PPUSH
22807: LD_VAR 0 4
22811: PPUSH
22812: LD_INT 3
22814: PPUSH
22815: CALL_OW 272
22819: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22820: LD_ADDR_VAR 0 8
22824: PUSH
22825: LD_VAR 0 6
22829: PPUSH
22830: LD_VAR 0 4
22834: PPUSH
22835: LD_INT 3
22837: PPUSH
22838: CALL_OW 273
22842: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22843: LD_VAR 0 7
22847: PPUSH
22848: LD_VAR 0 8
22852: PPUSH
22853: CALL_OW 488
22857: NOT
22858: IFFALSE 22862
// continue ;
22860: GO 22794
// if HexInfo ( _x , _y ) = 0 then
22862: LD_VAR 0 7
22866: PPUSH
22867: LD_VAR 0 8
22871: PPUSH
22872: CALL_OW 428
22876: PUSH
22877: LD_INT 0
22879: EQUAL
22880: IFFALSE 22905
// begin ComMoveXY ( unit , _x , _y ) ;
22882: LD_VAR 0 1
22886: PPUSH
22887: LD_VAR 0 7
22891: PPUSH
22892: LD_VAR 0 8
22896: PPUSH
22897: CALL_OW 111
// exit ;
22901: POP
22902: POP
22903: GO 22909
// end ; end ;
22905: GO 22794
22907: POP
22908: POP
// end ;
22909: LD_VAR 0 3
22913: RET
// export function ScanBase ( side , base_area ) ; begin
22914: LD_INT 0
22916: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22917: LD_ADDR_VAR 0 3
22921: PUSH
22922: LD_VAR 0 2
22926: PPUSH
22927: LD_INT 81
22929: PUSH
22930: LD_VAR 0 1
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PPUSH
22939: CALL_OW 70
22943: ST_TO_ADDR
// end ;
22944: LD_VAR 0 3
22948: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22949: LD_INT 0
22951: PPUSH
22952: PPUSH
22953: PPUSH
22954: PPUSH
// result := false ;
22955: LD_ADDR_VAR 0 2
22959: PUSH
22960: LD_INT 0
22962: ST_TO_ADDR
// side := GetSide ( unit ) ;
22963: LD_ADDR_VAR 0 3
22967: PUSH
22968: LD_VAR 0 1
22972: PPUSH
22973: CALL_OW 255
22977: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22978: LD_ADDR_VAR 0 4
22982: PUSH
22983: LD_VAR 0 1
22987: PPUSH
22988: CALL_OW 248
22992: ST_TO_ADDR
// case nat of 1 :
22993: LD_VAR 0 4
22997: PUSH
22998: LD_INT 1
23000: DOUBLE
23001: EQUAL
23002: IFTRUE 23006
23004: GO 23017
23006: POP
// tech := tech_lassight ; 2 :
23007: LD_ADDR_VAR 0 5
23011: PUSH
23012: LD_INT 12
23014: ST_TO_ADDR
23015: GO 23056
23017: LD_INT 2
23019: DOUBLE
23020: EQUAL
23021: IFTRUE 23025
23023: GO 23036
23025: POP
// tech := tech_mortar ; 3 :
23026: LD_ADDR_VAR 0 5
23030: PUSH
23031: LD_INT 41
23033: ST_TO_ADDR
23034: GO 23056
23036: LD_INT 3
23038: DOUBLE
23039: EQUAL
23040: IFTRUE 23044
23042: GO 23055
23044: POP
// tech := tech_bazooka ; end ;
23045: LD_ADDR_VAR 0 5
23049: PUSH
23050: LD_INT 44
23052: ST_TO_ADDR
23053: GO 23056
23055: POP
// if Researched ( side , tech ) then
23056: LD_VAR 0 3
23060: PPUSH
23061: LD_VAR 0 5
23065: PPUSH
23066: CALL_OW 325
23070: IFFALSE 23097
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23072: LD_ADDR_VAR 0 2
23076: PUSH
23077: LD_INT 5
23079: PUSH
23080: LD_INT 8
23082: PUSH
23083: LD_INT 9
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: LIST
23090: PUSH
23091: LD_VAR 0 4
23095: ARRAY
23096: ST_TO_ADDR
// end ;
23097: LD_VAR 0 2
23101: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23102: LD_INT 0
23104: PPUSH
23105: PPUSH
23106: PPUSH
// if not mines then
23107: LD_VAR 0 2
23111: NOT
23112: IFFALSE 23116
// exit ;
23114: GO 23260
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23116: LD_ADDR_VAR 0 5
23120: PUSH
23121: LD_INT 81
23123: PUSH
23124: LD_VAR 0 1
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: PUSH
23133: LD_INT 3
23135: PUSH
23136: LD_INT 21
23138: PUSH
23139: LD_INT 3
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PPUSH
23154: CALL_OW 69
23158: ST_TO_ADDR
// for i in mines do
23159: LD_ADDR_VAR 0 4
23163: PUSH
23164: LD_VAR 0 2
23168: PUSH
23169: FOR_IN
23170: IFFALSE 23258
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23172: LD_VAR 0 4
23176: PUSH
23177: LD_INT 1
23179: ARRAY
23180: PPUSH
23181: LD_VAR 0 4
23185: PUSH
23186: LD_INT 2
23188: ARRAY
23189: PPUSH
23190: CALL_OW 458
23194: NOT
23195: IFFALSE 23199
// continue ;
23197: GO 23169
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23199: LD_VAR 0 4
23203: PUSH
23204: LD_INT 1
23206: ARRAY
23207: PPUSH
23208: LD_VAR 0 4
23212: PUSH
23213: LD_INT 2
23215: ARRAY
23216: PPUSH
23217: CALL_OW 428
23221: PUSH
23222: LD_VAR 0 5
23226: IN
23227: IFFALSE 23256
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23229: LD_VAR 0 4
23233: PUSH
23234: LD_INT 1
23236: ARRAY
23237: PPUSH
23238: LD_VAR 0 4
23242: PUSH
23243: LD_INT 2
23245: ARRAY
23246: PPUSH
23247: LD_VAR 0 1
23251: PPUSH
23252: CALL_OW 456
// end ;
23256: GO 23169
23258: POP
23259: POP
// end ;
23260: LD_VAR 0 3
23264: RET
// export function Count ( array ) ; var i ; begin
23265: LD_INT 0
23267: PPUSH
23268: PPUSH
// result := 0 ;
23269: LD_ADDR_VAR 0 2
23273: PUSH
23274: LD_INT 0
23276: ST_TO_ADDR
// for i in array do
23277: LD_ADDR_VAR 0 3
23281: PUSH
23282: LD_VAR 0 1
23286: PUSH
23287: FOR_IN
23288: IFFALSE 23312
// if i then
23290: LD_VAR 0 3
23294: IFFALSE 23310
// result := result + 1 ;
23296: LD_ADDR_VAR 0 2
23300: PUSH
23301: LD_VAR 0 2
23305: PUSH
23306: LD_INT 1
23308: PLUS
23309: ST_TO_ADDR
23310: GO 23287
23312: POP
23313: POP
// end ;
23314: LD_VAR 0 2
23318: RET
// export function IsEmpty ( building ) ; begin
23319: LD_INT 0
23321: PPUSH
// if not building then
23322: LD_VAR 0 1
23326: NOT
23327: IFFALSE 23331
// exit ;
23329: GO 23374
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23331: LD_ADDR_VAR 0 2
23335: PUSH
23336: LD_VAR 0 1
23340: PUSH
23341: LD_INT 22
23343: PUSH
23344: LD_VAR 0 1
23348: PPUSH
23349: CALL_OW 255
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 58
23360: PUSH
23361: EMPTY
23362: LIST
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PPUSH
23368: CALL_OW 69
23372: IN
23373: ST_TO_ADDR
// end ;
23374: LD_VAR 0 2
23378: RET
// export function IsNotFull ( building ) ; begin
23379: LD_INT 0
23381: PPUSH
// if not building then
23382: LD_VAR 0 1
23386: NOT
23387: IFFALSE 23391
// exit ;
23389: GO 23410
// result := UnitsInside ( building ) < 6 ;
23391: LD_ADDR_VAR 0 2
23395: PUSH
23396: LD_VAR 0 1
23400: PPUSH
23401: CALL_OW 313
23405: PUSH
23406: LD_INT 6
23408: LESS
23409: ST_TO_ADDR
// end ;
23410: LD_VAR 0 2
23414: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23415: LD_INT 0
23417: PPUSH
23418: PPUSH
23419: PPUSH
23420: PPUSH
// tmp := [ ] ;
23421: LD_ADDR_VAR 0 3
23425: PUSH
23426: EMPTY
23427: ST_TO_ADDR
// list := [ ] ;
23428: LD_ADDR_VAR 0 5
23432: PUSH
23433: EMPTY
23434: ST_TO_ADDR
// for i = 16 to 25 do
23435: LD_ADDR_VAR 0 4
23439: PUSH
23440: DOUBLE
23441: LD_INT 16
23443: DEC
23444: ST_TO_ADDR
23445: LD_INT 25
23447: PUSH
23448: FOR_TO
23449: IFFALSE 23522
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23451: LD_ADDR_VAR 0 3
23455: PUSH
23456: LD_VAR 0 3
23460: PUSH
23461: LD_INT 22
23463: PUSH
23464: LD_VAR 0 1
23468: PPUSH
23469: CALL_OW 255
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: PUSH
23478: LD_INT 91
23480: PUSH
23481: LD_VAR 0 1
23485: PUSH
23486: LD_INT 6
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: LIST
23493: PUSH
23494: LD_INT 30
23496: PUSH
23497: LD_VAR 0 4
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: LIST
23510: PUSH
23511: EMPTY
23512: LIST
23513: PPUSH
23514: CALL_OW 69
23518: ADD
23519: ST_TO_ADDR
23520: GO 23448
23522: POP
23523: POP
// for i = 1 to tmp do
23524: LD_ADDR_VAR 0 4
23528: PUSH
23529: DOUBLE
23530: LD_INT 1
23532: DEC
23533: ST_TO_ADDR
23534: LD_VAR 0 3
23538: PUSH
23539: FOR_TO
23540: IFFALSE 23628
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23542: LD_ADDR_VAR 0 5
23546: PUSH
23547: LD_VAR 0 5
23551: PUSH
23552: LD_VAR 0 3
23556: PUSH
23557: LD_VAR 0 4
23561: ARRAY
23562: PPUSH
23563: CALL_OW 266
23567: PUSH
23568: LD_VAR 0 3
23572: PUSH
23573: LD_VAR 0 4
23577: ARRAY
23578: PPUSH
23579: CALL_OW 250
23583: PUSH
23584: LD_VAR 0 3
23588: PUSH
23589: LD_VAR 0 4
23593: ARRAY
23594: PPUSH
23595: CALL_OW 251
23599: PUSH
23600: LD_VAR 0 3
23604: PUSH
23605: LD_VAR 0 4
23609: ARRAY
23610: PPUSH
23611: CALL_OW 254
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: PUSH
23622: EMPTY
23623: LIST
23624: ADD
23625: ST_TO_ADDR
23626: GO 23539
23628: POP
23629: POP
// result := list ;
23630: LD_ADDR_VAR 0 2
23634: PUSH
23635: LD_VAR 0 5
23639: ST_TO_ADDR
// end ;
23640: LD_VAR 0 2
23644: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23645: LD_INT 0
23647: PPUSH
23648: PPUSH
23649: PPUSH
23650: PPUSH
23651: PPUSH
23652: PPUSH
23653: PPUSH
// if not factory then
23654: LD_VAR 0 1
23658: NOT
23659: IFFALSE 23663
// exit ;
23661: GO 24256
// if control = control_apeman then
23663: LD_VAR 0 4
23667: PUSH
23668: LD_INT 5
23670: EQUAL
23671: IFFALSE 23780
// begin tmp := UnitsInside ( factory ) ;
23673: LD_ADDR_VAR 0 8
23677: PUSH
23678: LD_VAR 0 1
23682: PPUSH
23683: CALL_OW 313
23687: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23688: LD_VAR 0 8
23692: PPUSH
23693: LD_INT 25
23695: PUSH
23696: LD_INT 12
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: PPUSH
23703: CALL_OW 72
23707: NOT
23708: IFFALSE 23718
// control := control_manual ;
23710: LD_ADDR_VAR 0 4
23714: PUSH
23715: LD_INT 1
23717: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23718: LD_ADDR_VAR 0 8
23722: PUSH
23723: LD_VAR 0 1
23727: PPUSH
23728: CALL 23415 0 1
23732: ST_TO_ADDR
// if tmp then
23733: LD_VAR 0 8
23737: IFFALSE 23780
// begin for i in tmp do
23739: LD_ADDR_VAR 0 7
23743: PUSH
23744: LD_VAR 0 8
23748: PUSH
23749: FOR_IN
23750: IFFALSE 23778
// if i [ 1 ] = b_ext_radio then
23752: LD_VAR 0 7
23756: PUSH
23757: LD_INT 1
23759: ARRAY
23760: PUSH
23761: LD_INT 22
23763: EQUAL
23764: IFFALSE 23776
// begin control := control_remote ;
23766: LD_ADDR_VAR 0 4
23770: PUSH
23771: LD_INT 2
23773: ST_TO_ADDR
// break ;
23774: GO 23778
// end ;
23776: GO 23749
23778: POP
23779: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23780: LD_VAR 0 1
23784: PPUSH
23785: LD_VAR 0 2
23789: PPUSH
23790: LD_VAR 0 3
23794: PPUSH
23795: LD_VAR 0 4
23799: PPUSH
23800: LD_VAR 0 5
23804: PPUSH
23805: CALL_OW 448
23809: IFFALSE 23844
// begin result := [ chassis , engine , control , weapon ] ;
23811: LD_ADDR_VAR 0 6
23815: PUSH
23816: LD_VAR 0 2
23820: PUSH
23821: LD_VAR 0 3
23825: PUSH
23826: LD_VAR 0 4
23830: PUSH
23831: LD_VAR 0 5
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: ST_TO_ADDR
// exit ;
23842: GO 24256
// end ; _chassis := AvailableChassisList ( factory ) ;
23844: LD_ADDR_VAR 0 9
23848: PUSH
23849: LD_VAR 0 1
23853: PPUSH
23854: CALL_OW 475
23858: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23859: LD_ADDR_VAR 0 11
23863: PUSH
23864: LD_VAR 0 1
23868: PPUSH
23869: CALL_OW 476
23873: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23874: LD_ADDR_VAR 0 12
23878: PUSH
23879: LD_VAR 0 1
23883: PPUSH
23884: CALL_OW 477
23888: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23889: LD_ADDR_VAR 0 10
23893: PUSH
23894: LD_VAR 0 1
23898: PPUSH
23899: CALL_OW 478
23903: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23904: LD_VAR 0 9
23908: NOT
23909: PUSH
23910: LD_VAR 0 11
23914: NOT
23915: OR
23916: PUSH
23917: LD_VAR 0 12
23921: NOT
23922: OR
23923: PUSH
23924: LD_VAR 0 10
23928: NOT
23929: OR
23930: IFFALSE 23965
// begin result := [ chassis , engine , control , weapon ] ;
23932: LD_ADDR_VAR 0 6
23936: PUSH
23937: LD_VAR 0 2
23941: PUSH
23942: LD_VAR 0 3
23946: PUSH
23947: LD_VAR 0 4
23951: PUSH
23952: LD_VAR 0 5
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: ST_TO_ADDR
// exit ;
23963: GO 24256
// end ; if not chassis in _chassis then
23965: LD_VAR 0 2
23969: PUSH
23970: LD_VAR 0 9
23974: IN
23975: NOT
23976: IFFALSE 24002
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23978: LD_ADDR_VAR 0 2
23982: PUSH
23983: LD_VAR 0 9
23987: PUSH
23988: LD_INT 1
23990: PPUSH
23991: LD_VAR 0 9
23995: PPUSH
23996: CALL_OW 12
24000: ARRAY
24001: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24002: LD_VAR 0 2
24006: PPUSH
24007: LD_VAR 0 3
24011: PPUSH
24012: CALL 24261 0 2
24016: NOT
24017: IFFALSE 24076
// repeat engine := _engine [ 1 ] ;
24019: LD_ADDR_VAR 0 3
24023: PUSH
24024: LD_VAR 0 11
24028: PUSH
24029: LD_INT 1
24031: ARRAY
24032: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24033: LD_ADDR_VAR 0 11
24037: PUSH
24038: LD_VAR 0 11
24042: PPUSH
24043: LD_INT 1
24045: PPUSH
24046: CALL_OW 3
24050: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24051: LD_VAR 0 2
24055: PPUSH
24056: LD_VAR 0 3
24060: PPUSH
24061: CALL 24261 0 2
24065: PUSH
24066: LD_VAR 0 11
24070: PUSH
24071: EMPTY
24072: EQUAL
24073: OR
24074: IFFALSE 24019
// if not control in _control then
24076: LD_VAR 0 4
24080: PUSH
24081: LD_VAR 0 12
24085: IN
24086: NOT
24087: IFFALSE 24113
// control := _control [ rand ( 1 , _control ) ] ;
24089: LD_ADDR_VAR 0 4
24093: PUSH
24094: LD_VAR 0 12
24098: PUSH
24099: LD_INT 1
24101: PPUSH
24102: LD_VAR 0 12
24106: PPUSH
24107: CALL_OW 12
24111: ARRAY
24112: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24113: LD_VAR 0 2
24117: PPUSH
24118: LD_VAR 0 5
24122: PPUSH
24123: CALL 24481 0 2
24127: NOT
24128: IFFALSE 24187
// repeat weapon := _weapon [ 1 ] ;
24130: LD_ADDR_VAR 0 5
24134: PUSH
24135: LD_VAR 0 10
24139: PUSH
24140: LD_INT 1
24142: ARRAY
24143: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24144: LD_ADDR_VAR 0 10
24148: PUSH
24149: LD_VAR 0 10
24153: PPUSH
24154: LD_INT 1
24156: PPUSH
24157: CALL_OW 3
24161: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24162: LD_VAR 0 2
24166: PPUSH
24167: LD_VAR 0 5
24171: PPUSH
24172: CALL 24481 0 2
24176: PUSH
24177: LD_VAR 0 10
24181: PUSH
24182: EMPTY
24183: EQUAL
24184: OR
24185: IFFALSE 24130
// result := [ ] ;
24187: LD_ADDR_VAR 0 6
24191: PUSH
24192: EMPTY
24193: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24194: LD_VAR 0 1
24198: PPUSH
24199: LD_VAR 0 2
24203: PPUSH
24204: LD_VAR 0 3
24208: PPUSH
24209: LD_VAR 0 4
24213: PPUSH
24214: LD_VAR 0 5
24218: PPUSH
24219: CALL_OW 448
24223: IFFALSE 24256
// result := [ chassis , engine , control , weapon ] ;
24225: LD_ADDR_VAR 0 6
24229: PUSH
24230: LD_VAR 0 2
24234: PUSH
24235: LD_VAR 0 3
24239: PUSH
24240: LD_VAR 0 4
24244: PUSH
24245: LD_VAR 0 5
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: ST_TO_ADDR
// end ;
24256: LD_VAR 0 6
24260: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24261: LD_INT 0
24263: PPUSH
// if not chassis or not engine then
24264: LD_VAR 0 1
24268: NOT
24269: PUSH
24270: LD_VAR 0 2
24274: NOT
24275: OR
24276: IFFALSE 24280
// exit ;
24278: GO 24476
// case engine of engine_solar :
24280: LD_VAR 0 2
24284: PUSH
24285: LD_INT 2
24287: DOUBLE
24288: EQUAL
24289: IFTRUE 24293
24291: GO 24331
24293: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24294: LD_ADDR_VAR 0 3
24298: PUSH
24299: LD_INT 11
24301: PUSH
24302: LD_INT 12
24304: PUSH
24305: LD_INT 13
24307: PUSH
24308: LD_INT 14
24310: PUSH
24311: LD_INT 1
24313: PUSH
24314: LD_INT 2
24316: PUSH
24317: LD_INT 3
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: ST_TO_ADDR
24329: GO 24460
24331: LD_INT 1
24333: DOUBLE
24334: EQUAL
24335: IFTRUE 24339
24337: GO 24401
24339: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24340: LD_ADDR_VAR 0 3
24344: PUSH
24345: LD_INT 11
24347: PUSH
24348: LD_INT 12
24350: PUSH
24351: LD_INT 13
24353: PUSH
24354: LD_INT 14
24356: PUSH
24357: LD_INT 1
24359: PUSH
24360: LD_INT 2
24362: PUSH
24363: LD_INT 3
24365: PUSH
24366: LD_INT 4
24368: PUSH
24369: LD_INT 5
24371: PUSH
24372: LD_INT 21
24374: PUSH
24375: LD_INT 23
24377: PUSH
24378: LD_INT 22
24380: PUSH
24381: LD_INT 24
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: ST_TO_ADDR
24399: GO 24460
24401: LD_INT 3
24403: DOUBLE
24404: EQUAL
24405: IFTRUE 24409
24407: GO 24459
24409: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24410: LD_ADDR_VAR 0 3
24414: PUSH
24415: LD_INT 13
24417: PUSH
24418: LD_INT 14
24420: PUSH
24421: LD_INT 2
24423: PUSH
24424: LD_INT 3
24426: PUSH
24427: LD_INT 4
24429: PUSH
24430: LD_INT 5
24432: PUSH
24433: LD_INT 21
24435: PUSH
24436: LD_INT 22
24438: PUSH
24439: LD_INT 23
24441: PUSH
24442: LD_INT 24
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: ST_TO_ADDR
24457: GO 24460
24459: POP
// result := ( chassis in result ) ;
24460: LD_ADDR_VAR 0 3
24464: PUSH
24465: LD_VAR 0 1
24469: PUSH
24470: LD_VAR 0 3
24474: IN
24475: ST_TO_ADDR
// end ;
24476: LD_VAR 0 3
24480: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24481: LD_INT 0
24483: PPUSH
// if not chassis or not weapon then
24484: LD_VAR 0 1
24488: NOT
24489: PUSH
24490: LD_VAR 0 2
24494: NOT
24495: OR
24496: IFFALSE 24500
// exit ;
24498: GO 25562
// case weapon of us_machine_gun :
24500: LD_VAR 0 2
24504: PUSH
24505: LD_INT 2
24507: DOUBLE
24508: EQUAL
24509: IFTRUE 24513
24511: GO 24543
24513: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24514: LD_ADDR_VAR 0 3
24518: PUSH
24519: LD_INT 1
24521: PUSH
24522: LD_INT 2
24524: PUSH
24525: LD_INT 3
24527: PUSH
24528: LD_INT 4
24530: PUSH
24531: LD_INT 5
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: ST_TO_ADDR
24541: GO 25546
24543: LD_INT 3
24545: DOUBLE
24546: EQUAL
24547: IFTRUE 24551
24549: GO 24581
24551: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24552: LD_ADDR_VAR 0 3
24556: PUSH
24557: LD_INT 1
24559: PUSH
24560: LD_INT 2
24562: PUSH
24563: LD_INT 3
24565: PUSH
24566: LD_INT 4
24568: PUSH
24569: LD_INT 5
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: ST_TO_ADDR
24579: GO 25546
24581: LD_INT 11
24583: DOUBLE
24584: EQUAL
24585: IFTRUE 24589
24587: GO 24619
24589: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24590: LD_ADDR_VAR 0 3
24594: PUSH
24595: LD_INT 1
24597: PUSH
24598: LD_INT 2
24600: PUSH
24601: LD_INT 3
24603: PUSH
24604: LD_INT 4
24606: PUSH
24607: LD_INT 5
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: ST_TO_ADDR
24617: GO 25546
24619: LD_INT 4
24621: DOUBLE
24622: EQUAL
24623: IFTRUE 24627
24625: GO 24653
24627: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24628: LD_ADDR_VAR 0 3
24632: PUSH
24633: LD_INT 2
24635: PUSH
24636: LD_INT 3
24638: PUSH
24639: LD_INT 4
24641: PUSH
24642: LD_INT 5
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: ST_TO_ADDR
24651: GO 25546
24653: LD_INT 5
24655: DOUBLE
24656: EQUAL
24657: IFTRUE 24661
24659: GO 24687
24661: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24662: LD_ADDR_VAR 0 3
24666: PUSH
24667: LD_INT 2
24669: PUSH
24670: LD_INT 3
24672: PUSH
24673: LD_INT 4
24675: PUSH
24676: LD_INT 5
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: ST_TO_ADDR
24685: GO 25546
24687: LD_INT 9
24689: DOUBLE
24690: EQUAL
24691: IFTRUE 24695
24693: GO 24721
24695: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24696: LD_ADDR_VAR 0 3
24700: PUSH
24701: LD_INT 2
24703: PUSH
24704: LD_INT 3
24706: PUSH
24707: LD_INT 4
24709: PUSH
24710: LD_INT 5
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: ST_TO_ADDR
24719: GO 25546
24721: LD_INT 7
24723: DOUBLE
24724: EQUAL
24725: IFTRUE 24729
24727: GO 24755
24729: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24730: LD_ADDR_VAR 0 3
24734: PUSH
24735: LD_INT 2
24737: PUSH
24738: LD_INT 3
24740: PUSH
24741: LD_INT 4
24743: PUSH
24744: LD_INT 5
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: ST_TO_ADDR
24753: GO 25546
24755: LD_INT 12
24757: DOUBLE
24758: EQUAL
24759: IFTRUE 24763
24761: GO 24789
24763: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24764: LD_ADDR_VAR 0 3
24768: PUSH
24769: LD_INT 2
24771: PUSH
24772: LD_INT 3
24774: PUSH
24775: LD_INT 4
24777: PUSH
24778: LD_INT 5
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: ST_TO_ADDR
24787: GO 25546
24789: LD_INT 13
24791: DOUBLE
24792: EQUAL
24793: IFTRUE 24797
24795: GO 24823
24797: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24798: LD_ADDR_VAR 0 3
24802: PUSH
24803: LD_INT 2
24805: PUSH
24806: LD_INT 3
24808: PUSH
24809: LD_INT 4
24811: PUSH
24812: LD_INT 5
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: ST_TO_ADDR
24821: GO 25546
24823: LD_INT 14
24825: DOUBLE
24826: EQUAL
24827: IFTRUE 24831
24829: GO 24849
24831: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24832: LD_ADDR_VAR 0 3
24836: PUSH
24837: LD_INT 4
24839: PUSH
24840: LD_INT 5
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: ST_TO_ADDR
24847: GO 25546
24849: LD_INT 6
24851: DOUBLE
24852: EQUAL
24853: IFTRUE 24857
24855: GO 24875
24857: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24858: LD_ADDR_VAR 0 3
24862: PUSH
24863: LD_INT 4
24865: PUSH
24866: LD_INT 5
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: ST_TO_ADDR
24873: GO 25546
24875: LD_INT 10
24877: DOUBLE
24878: EQUAL
24879: IFTRUE 24883
24881: GO 24901
24883: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24884: LD_ADDR_VAR 0 3
24888: PUSH
24889: LD_INT 4
24891: PUSH
24892: LD_INT 5
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: ST_TO_ADDR
24899: GO 25546
24901: LD_INT 22
24903: DOUBLE
24904: EQUAL
24905: IFTRUE 24909
24907: GO 24935
24909: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24910: LD_ADDR_VAR 0 3
24914: PUSH
24915: LD_INT 11
24917: PUSH
24918: LD_INT 12
24920: PUSH
24921: LD_INT 13
24923: PUSH
24924: LD_INT 14
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: ST_TO_ADDR
24933: GO 25546
24935: LD_INT 23
24937: DOUBLE
24938: EQUAL
24939: IFTRUE 24943
24941: GO 24969
24943: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24944: LD_ADDR_VAR 0 3
24948: PUSH
24949: LD_INT 11
24951: PUSH
24952: LD_INT 12
24954: PUSH
24955: LD_INT 13
24957: PUSH
24958: LD_INT 14
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: ST_TO_ADDR
24967: GO 25546
24969: LD_INT 24
24971: DOUBLE
24972: EQUAL
24973: IFTRUE 24977
24975: GO 25003
24977: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24978: LD_ADDR_VAR 0 3
24982: PUSH
24983: LD_INT 11
24985: PUSH
24986: LD_INT 12
24988: PUSH
24989: LD_INT 13
24991: PUSH
24992: LD_INT 14
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: ST_TO_ADDR
25001: GO 25546
25003: LD_INT 30
25005: DOUBLE
25006: EQUAL
25007: IFTRUE 25011
25009: GO 25037
25011: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25012: LD_ADDR_VAR 0 3
25016: PUSH
25017: LD_INT 11
25019: PUSH
25020: LD_INT 12
25022: PUSH
25023: LD_INT 13
25025: PUSH
25026: LD_INT 14
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: ST_TO_ADDR
25035: GO 25546
25037: LD_INT 25
25039: DOUBLE
25040: EQUAL
25041: IFTRUE 25045
25043: GO 25063
25045: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25046: LD_ADDR_VAR 0 3
25050: PUSH
25051: LD_INT 13
25053: PUSH
25054: LD_INT 14
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: ST_TO_ADDR
25061: GO 25546
25063: LD_INT 27
25065: DOUBLE
25066: EQUAL
25067: IFTRUE 25071
25069: GO 25089
25071: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25072: LD_ADDR_VAR 0 3
25076: PUSH
25077: LD_INT 13
25079: PUSH
25080: LD_INT 14
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: ST_TO_ADDR
25087: GO 25546
25089: LD_EXP 81
25093: DOUBLE
25094: EQUAL
25095: IFTRUE 25099
25097: GO 25125
25099: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25100: LD_ADDR_VAR 0 3
25104: PUSH
25105: LD_INT 11
25107: PUSH
25108: LD_INT 12
25110: PUSH
25111: LD_INT 13
25113: PUSH
25114: LD_INT 14
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: LIST
25121: LIST
25122: ST_TO_ADDR
25123: GO 25546
25125: LD_INT 28
25127: DOUBLE
25128: EQUAL
25129: IFTRUE 25133
25131: GO 25151
25133: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25134: LD_ADDR_VAR 0 3
25138: PUSH
25139: LD_INT 13
25141: PUSH
25142: LD_INT 14
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: ST_TO_ADDR
25149: GO 25546
25151: LD_INT 29
25153: DOUBLE
25154: EQUAL
25155: IFTRUE 25159
25157: GO 25177
25159: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25160: LD_ADDR_VAR 0 3
25164: PUSH
25165: LD_INT 13
25167: PUSH
25168: LD_INT 14
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: ST_TO_ADDR
25175: GO 25546
25177: LD_INT 31
25179: DOUBLE
25180: EQUAL
25181: IFTRUE 25185
25183: GO 25203
25185: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25186: LD_ADDR_VAR 0 3
25190: PUSH
25191: LD_INT 13
25193: PUSH
25194: LD_INT 14
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: ST_TO_ADDR
25201: GO 25546
25203: LD_INT 26
25205: DOUBLE
25206: EQUAL
25207: IFTRUE 25211
25209: GO 25229
25211: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25212: LD_ADDR_VAR 0 3
25216: PUSH
25217: LD_INT 13
25219: PUSH
25220: LD_INT 14
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: ST_TO_ADDR
25227: GO 25546
25229: LD_INT 42
25231: DOUBLE
25232: EQUAL
25233: IFTRUE 25237
25235: GO 25263
25237: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25238: LD_ADDR_VAR 0 3
25242: PUSH
25243: LD_INT 21
25245: PUSH
25246: LD_INT 22
25248: PUSH
25249: LD_INT 23
25251: PUSH
25252: LD_INT 24
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: ST_TO_ADDR
25261: GO 25546
25263: LD_INT 43
25265: DOUBLE
25266: EQUAL
25267: IFTRUE 25271
25269: GO 25297
25271: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25272: LD_ADDR_VAR 0 3
25276: PUSH
25277: LD_INT 21
25279: PUSH
25280: LD_INT 22
25282: PUSH
25283: LD_INT 23
25285: PUSH
25286: LD_INT 24
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: ST_TO_ADDR
25295: GO 25546
25297: LD_INT 44
25299: DOUBLE
25300: EQUAL
25301: IFTRUE 25305
25303: GO 25331
25305: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25306: LD_ADDR_VAR 0 3
25310: PUSH
25311: LD_INT 21
25313: PUSH
25314: LD_INT 22
25316: PUSH
25317: LD_INT 23
25319: PUSH
25320: LD_INT 24
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: ST_TO_ADDR
25329: GO 25546
25331: LD_INT 45
25333: DOUBLE
25334: EQUAL
25335: IFTRUE 25339
25337: GO 25365
25339: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25340: LD_ADDR_VAR 0 3
25344: PUSH
25345: LD_INT 21
25347: PUSH
25348: LD_INT 22
25350: PUSH
25351: LD_INT 23
25353: PUSH
25354: LD_INT 24
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: ST_TO_ADDR
25363: GO 25546
25365: LD_INT 49
25367: DOUBLE
25368: EQUAL
25369: IFTRUE 25373
25371: GO 25399
25373: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25374: LD_ADDR_VAR 0 3
25378: PUSH
25379: LD_INT 21
25381: PUSH
25382: LD_INT 22
25384: PUSH
25385: LD_INT 23
25387: PUSH
25388: LD_INT 24
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: ST_TO_ADDR
25397: GO 25546
25399: LD_INT 51
25401: DOUBLE
25402: EQUAL
25403: IFTRUE 25407
25405: GO 25433
25407: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25408: LD_ADDR_VAR 0 3
25412: PUSH
25413: LD_INT 21
25415: PUSH
25416: LD_INT 22
25418: PUSH
25419: LD_INT 23
25421: PUSH
25422: LD_INT 24
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: ST_TO_ADDR
25431: GO 25546
25433: LD_INT 52
25435: DOUBLE
25436: EQUAL
25437: IFTRUE 25441
25439: GO 25467
25441: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25442: LD_ADDR_VAR 0 3
25446: PUSH
25447: LD_INT 21
25449: PUSH
25450: LD_INT 22
25452: PUSH
25453: LD_INT 23
25455: PUSH
25456: LD_INT 24
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: ST_TO_ADDR
25465: GO 25546
25467: LD_INT 53
25469: DOUBLE
25470: EQUAL
25471: IFTRUE 25475
25473: GO 25493
25475: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25476: LD_ADDR_VAR 0 3
25480: PUSH
25481: LD_INT 23
25483: PUSH
25484: LD_INT 24
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: ST_TO_ADDR
25491: GO 25546
25493: LD_INT 46
25495: DOUBLE
25496: EQUAL
25497: IFTRUE 25501
25499: GO 25519
25501: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25502: LD_ADDR_VAR 0 3
25506: PUSH
25507: LD_INT 23
25509: PUSH
25510: LD_INT 24
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: ST_TO_ADDR
25517: GO 25546
25519: LD_INT 47
25521: DOUBLE
25522: EQUAL
25523: IFTRUE 25527
25525: GO 25545
25527: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25528: LD_ADDR_VAR 0 3
25532: PUSH
25533: LD_INT 23
25535: PUSH
25536: LD_INT 24
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: ST_TO_ADDR
25543: GO 25546
25545: POP
// result := ( chassis in result ) ;
25546: LD_ADDR_VAR 0 3
25550: PUSH
25551: LD_VAR 0 1
25555: PUSH
25556: LD_VAR 0 3
25560: IN
25561: ST_TO_ADDR
// end ;
25562: LD_VAR 0 3
25566: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25567: LD_INT 0
25569: PPUSH
25570: PPUSH
25571: PPUSH
25572: PPUSH
25573: PPUSH
25574: PPUSH
25575: PPUSH
// result := array ;
25576: LD_ADDR_VAR 0 5
25580: PUSH
25581: LD_VAR 0 1
25585: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25586: LD_VAR 0 1
25590: NOT
25591: PUSH
25592: LD_VAR 0 2
25596: NOT
25597: OR
25598: PUSH
25599: LD_VAR 0 3
25603: NOT
25604: OR
25605: PUSH
25606: LD_VAR 0 2
25610: PUSH
25611: LD_VAR 0 1
25615: GREATER
25616: OR
25617: PUSH
25618: LD_VAR 0 3
25622: PUSH
25623: LD_VAR 0 1
25627: GREATER
25628: OR
25629: IFFALSE 25633
// exit ;
25631: GO 25929
// if direction then
25633: LD_VAR 0 4
25637: IFFALSE 25701
// begin d := 1 ;
25639: LD_ADDR_VAR 0 9
25643: PUSH
25644: LD_INT 1
25646: ST_TO_ADDR
// if i_from > i_to then
25647: LD_VAR 0 2
25651: PUSH
25652: LD_VAR 0 3
25656: GREATER
25657: IFFALSE 25683
// length := ( array - i_from ) + i_to else
25659: LD_ADDR_VAR 0 11
25663: PUSH
25664: LD_VAR 0 1
25668: PUSH
25669: LD_VAR 0 2
25673: MINUS
25674: PUSH
25675: LD_VAR 0 3
25679: PLUS
25680: ST_TO_ADDR
25681: GO 25699
// length := i_to - i_from ;
25683: LD_ADDR_VAR 0 11
25687: PUSH
25688: LD_VAR 0 3
25692: PUSH
25693: LD_VAR 0 2
25697: MINUS
25698: ST_TO_ADDR
// end else
25699: GO 25762
// begin d := - 1 ;
25701: LD_ADDR_VAR 0 9
25705: PUSH
25706: LD_INT 1
25708: NEG
25709: ST_TO_ADDR
// if i_from > i_to then
25710: LD_VAR 0 2
25714: PUSH
25715: LD_VAR 0 3
25719: GREATER
25720: IFFALSE 25740
// length := i_from - i_to else
25722: LD_ADDR_VAR 0 11
25726: PUSH
25727: LD_VAR 0 2
25731: PUSH
25732: LD_VAR 0 3
25736: MINUS
25737: ST_TO_ADDR
25738: GO 25762
// length := ( array - i_to ) + i_from ;
25740: LD_ADDR_VAR 0 11
25744: PUSH
25745: LD_VAR 0 1
25749: PUSH
25750: LD_VAR 0 3
25754: MINUS
25755: PUSH
25756: LD_VAR 0 2
25760: PLUS
25761: ST_TO_ADDR
// end ; if not length then
25762: LD_VAR 0 11
25766: NOT
25767: IFFALSE 25771
// exit ;
25769: GO 25929
// tmp := array ;
25771: LD_ADDR_VAR 0 10
25775: PUSH
25776: LD_VAR 0 1
25780: ST_TO_ADDR
// for i = 1 to length do
25781: LD_ADDR_VAR 0 6
25785: PUSH
25786: DOUBLE
25787: LD_INT 1
25789: DEC
25790: ST_TO_ADDR
25791: LD_VAR 0 11
25795: PUSH
25796: FOR_TO
25797: IFFALSE 25917
// begin for j = 1 to array do
25799: LD_ADDR_VAR 0 7
25803: PUSH
25804: DOUBLE
25805: LD_INT 1
25807: DEC
25808: ST_TO_ADDR
25809: LD_VAR 0 1
25813: PUSH
25814: FOR_TO
25815: IFFALSE 25903
// begin k := j + d ;
25817: LD_ADDR_VAR 0 8
25821: PUSH
25822: LD_VAR 0 7
25826: PUSH
25827: LD_VAR 0 9
25831: PLUS
25832: ST_TO_ADDR
// if k > array then
25833: LD_VAR 0 8
25837: PUSH
25838: LD_VAR 0 1
25842: GREATER
25843: IFFALSE 25853
// k := 1 ;
25845: LD_ADDR_VAR 0 8
25849: PUSH
25850: LD_INT 1
25852: ST_TO_ADDR
// if not k then
25853: LD_VAR 0 8
25857: NOT
25858: IFFALSE 25870
// k := array ;
25860: LD_ADDR_VAR 0 8
25864: PUSH
25865: LD_VAR 0 1
25869: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25870: LD_ADDR_VAR 0 10
25874: PUSH
25875: LD_VAR 0 10
25879: PPUSH
25880: LD_VAR 0 8
25884: PPUSH
25885: LD_VAR 0 1
25889: PUSH
25890: LD_VAR 0 7
25894: ARRAY
25895: PPUSH
25896: CALL_OW 1
25900: ST_TO_ADDR
// end ;
25901: GO 25814
25903: POP
25904: POP
// array := tmp ;
25905: LD_ADDR_VAR 0 1
25909: PUSH
25910: LD_VAR 0 10
25914: ST_TO_ADDR
// end ;
25915: GO 25796
25917: POP
25918: POP
// result := array ;
25919: LD_ADDR_VAR 0 5
25923: PUSH
25924: LD_VAR 0 1
25928: ST_TO_ADDR
// end ;
25929: LD_VAR 0 5
25933: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25934: LD_INT 0
25936: PPUSH
25937: PPUSH
// result := 0 ;
25938: LD_ADDR_VAR 0 3
25942: PUSH
25943: LD_INT 0
25945: ST_TO_ADDR
// if not array or not value in array then
25946: LD_VAR 0 1
25950: NOT
25951: PUSH
25952: LD_VAR 0 2
25956: PUSH
25957: LD_VAR 0 1
25961: IN
25962: NOT
25963: OR
25964: IFFALSE 25968
// exit ;
25966: GO 26022
// for i = 1 to array do
25968: LD_ADDR_VAR 0 4
25972: PUSH
25973: DOUBLE
25974: LD_INT 1
25976: DEC
25977: ST_TO_ADDR
25978: LD_VAR 0 1
25982: PUSH
25983: FOR_TO
25984: IFFALSE 26020
// if value = array [ i ] then
25986: LD_VAR 0 2
25990: PUSH
25991: LD_VAR 0 1
25995: PUSH
25996: LD_VAR 0 4
26000: ARRAY
26001: EQUAL
26002: IFFALSE 26018
// begin result := i ;
26004: LD_ADDR_VAR 0 3
26008: PUSH
26009: LD_VAR 0 4
26013: ST_TO_ADDR
// exit ;
26014: POP
26015: POP
26016: GO 26022
// end ;
26018: GO 25983
26020: POP
26021: POP
// end ;
26022: LD_VAR 0 3
26026: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26027: LD_INT 0
26029: PPUSH
// vc_chassis := chassis ;
26030: LD_ADDR_OWVAR 37
26034: PUSH
26035: LD_VAR 0 1
26039: ST_TO_ADDR
// vc_engine := engine ;
26040: LD_ADDR_OWVAR 39
26044: PUSH
26045: LD_VAR 0 2
26049: ST_TO_ADDR
// vc_control := control ;
26050: LD_ADDR_OWVAR 38
26054: PUSH
26055: LD_VAR 0 3
26059: ST_TO_ADDR
// vc_weapon := weapon ;
26060: LD_ADDR_OWVAR 40
26064: PUSH
26065: LD_VAR 0 4
26069: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26070: LD_ADDR_OWVAR 41
26074: PUSH
26075: LD_VAR 0 5
26079: ST_TO_ADDR
// end ;
26080: LD_VAR 0 6
26084: RET
// export function WantPlant ( unit ) ; var task ; begin
26085: LD_INT 0
26087: PPUSH
26088: PPUSH
// result := false ;
26089: LD_ADDR_VAR 0 2
26093: PUSH
26094: LD_INT 0
26096: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26097: LD_ADDR_VAR 0 3
26101: PUSH
26102: LD_VAR 0 1
26106: PPUSH
26107: CALL_OW 437
26111: ST_TO_ADDR
// if task then
26112: LD_VAR 0 3
26116: IFFALSE 26144
// if task [ 1 ] [ 1 ] = p then
26118: LD_VAR 0 3
26122: PUSH
26123: LD_INT 1
26125: ARRAY
26126: PUSH
26127: LD_INT 1
26129: ARRAY
26130: PUSH
26131: LD_STRING p
26133: EQUAL
26134: IFFALSE 26144
// result := true ;
26136: LD_ADDR_VAR 0 2
26140: PUSH
26141: LD_INT 1
26143: ST_TO_ADDR
// end ;
26144: LD_VAR 0 2
26148: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26149: LD_INT 0
26151: PPUSH
26152: PPUSH
26153: PPUSH
26154: PPUSH
// if pos < 1 then
26155: LD_VAR 0 2
26159: PUSH
26160: LD_INT 1
26162: LESS
26163: IFFALSE 26167
// exit ;
26165: GO 26470
// if pos = 1 then
26167: LD_VAR 0 2
26171: PUSH
26172: LD_INT 1
26174: EQUAL
26175: IFFALSE 26208
// result := Replace ( arr , pos [ 1 ] , value ) else
26177: LD_ADDR_VAR 0 4
26181: PUSH
26182: LD_VAR 0 1
26186: PPUSH
26187: LD_VAR 0 2
26191: PUSH
26192: LD_INT 1
26194: ARRAY
26195: PPUSH
26196: LD_VAR 0 3
26200: PPUSH
26201: CALL_OW 1
26205: ST_TO_ADDR
26206: GO 26470
// begin tmp := arr ;
26208: LD_ADDR_VAR 0 6
26212: PUSH
26213: LD_VAR 0 1
26217: ST_TO_ADDR
// s_arr := [ tmp ] ;
26218: LD_ADDR_VAR 0 7
26222: PUSH
26223: LD_VAR 0 6
26227: PUSH
26228: EMPTY
26229: LIST
26230: ST_TO_ADDR
// for i = 1 to pos - 1 do
26231: LD_ADDR_VAR 0 5
26235: PUSH
26236: DOUBLE
26237: LD_INT 1
26239: DEC
26240: ST_TO_ADDR
26241: LD_VAR 0 2
26245: PUSH
26246: LD_INT 1
26248: MINUS
26249: PUSH
26250: FOR_TO
26251: IFFALSE 26296
// begin tmp := tmp [ pos [ i ] ] ;
26253: LD_ADDR_VAR 0 6
26257: PUSH
26258: LD_VAR 0 6
26262: PUSH
26263: LD_VAR 0 2
26267: PUSH
26268: LD_VAR 0 5
26272: ARRAY
26273: ARRAY
26274: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26275: LD_ADDR_VAR 0 7
26279: PUSH
26280: LD_VAR 0 7
26284: PUSH
26285: LD_VAR 0 6
26289: PUSH
26290: EMPTY
26291: LIST
26292: ADD
26293: ST_TO_ADDR
// end ;
26294: GO 26250
26296: POP
26297: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26298: LD_ADDR_VAR 0 6
26302: PUSH
26303: LD_VAR 0 6
26307: PPUSH
26308: LD_VAR 0 2
26312: PUSH
26313: LD_VAR 0 2
26317: ARRAY
26318: PPUSH
26319: LD_VAR 0 3
26323: PPUSH
26324: CALL_OW 1
26328: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26329: LD_ADDR_VAR 0 7
26333: PUSH
26334: LD_VAR 0 7
26338: PPUSH
26339: LD_VAR 0 7
26343: PPUSH
26344: LD_VAR 0 6
26348: PPUSH
26349: CALL_OW 1
26353: ST_TO_ADDR
// for i = s_arr downto 2 do
26354: LD_ADDR_VAR 0 5
26358: PUSH
26359: DOUBLE
26360: LD_VAR 0 7
26364: INC
26365: ST_TO_ADDR
26366: LD_INT 2
26368: PUSH
26369: FOR_DOWNTO
26370: IFFALSE 26454
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26372: LD_ADDR_VAR 0 6
26376: PUSH
26377: LD_VAR 0 7
26381: PUSH
26382: LD_VAR 0 5
26386: PUSH
26387: LD_INT 1
26389: MINUS
26390: ARRAY
26391: PPUSH
26392: LD_VAR 0 2
26396: PUSH
26397: LD_VAR 0 5
26401: PUSH
26402: LD_INT 1
26404: MINUS
26405: ARRAY
26406: PPUSH
26407: LD_VAR 0 7
26411: PUSH
26412: LD_VAR 0 5
26416: ARRAY
26417: PPUSH
26418: CALL_OW 1
26422: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26423: LD_ADDR_VAR 0 7
26427: PUSH
26428: LD_VAR 0 7
26432: PPUSH
26433: LD_VAR 0 5
26437: PUSH
26438: LD_INT 1
26440: MINUS
26441: PPUSH
26442: LD_VAR 0 6
26446: PPUSH
26447: CALL_OW 1
26451: ST_TO_ADDR
// end ;
26452: GO 26369
26454: POP
26455: POP
// result := s_arr [ 1 ] ;
26456: LD_ADDR_VAR 0 4
26460: PUSH
26461: LD_VAR 0 7
26465: PUSH
26466: LD_INT 1
26468: ARRAY
26469: ST_TO_ADDR
// end ; end ;
26470: LD_VAR 0 4
26474: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26475: LD_INT 0
26477: PPUSH
26478: PPUSH
// if not list then
26479: LD_VAR 0 1
26483: NOT
26484: IFFALSE 26488
// exit ;
26486: GO 26579
// i := list [ pos1 ] ;
26488: LD_ADDR_VAR 0 5
26492: PUSH
26493: LD_VAR 0 1
26497: PUSH
26498: LD_VAR 0 2
26502: ARRAY
26503: ST_TO_ADDR
// if not i then
26504: LD_VAR 0 5
26508: NOT
26509: IFFALSE 26513
// exit ;
26511: GO 26579
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26513: LD_ADDR_VAR 0 1
26517: PUSH
26518: LD_VAR 0 1
26522: PPUSH
26523: LD_VAR 0 2
26527: PPUSH
26528: LD_VAR 0 1
26532: PUSH
26533: LD_VAR 0 3
26537: ARRAY
26538: PPUSH
26539: CALL_OW 1
26543: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26544: LD_ADDR_VAR 0 1
26548: PUSH
26549: LD_VAR 0 1
26553: PPUSH
26554: LD_VAR 0 3
26558: PPUSH
26559: LD_VAR 0 5
26563: PPUSH
26564: CALL_OW 1
26568: ST_TO_ADDR
// result := list ;
26569: LD_ADDR_VAR 0 4
26573: PUSH
26574: LD_VAR 0 1
26578: ST_TO_ADDR
// end ;
26579: LD_VAR 0 4
26583: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26584: LD_INT 0
26586: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26587: LD_ADDR_VAR 0 5
26591: PUSH
26592: LD_VAR 0 1
26596: PPUSH
26597: CALL_OW 250
26601: PPUSH
26602: LD_VAR 0 1
26606: PPUSH
26607: CALL_OW 251
26611: PPUSH
26612: LD_VAR 0 2
26616: PPUSH
26617: LD_VAR 0 3
26621: PPUSH
26622: LD_VAR 0 4
26626: PPUSH
26627: CALL 26637 0 5
26631: ST_TO_ADDR
// end ;
26632: LD_VAR 0 5
26636: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26637: LD_INT 0
26639: PPUSH
26640: PPUSH
26641: PPUSH
26642: PPUSH
// if not list then
26643: LD_VAR 0 3
26647: NOT
26648: IFFALSE 26652
// exit ;
26650: GO 27040
// result := [ ] ;
26652: LD_ADDR_VAR 0 6
26656: PUSH
26657: EMPTY
26658: ST_TO_ADDR
// for i in list do
26659: LD_ADDR_VAR 0 7
26663: PUSH
26664: LD_VAR 0 3
26668: PUSH
26669: FOR_IN
26670: IFFALSE 26872
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26672: LD_ADDR_VAR 0 9
26676: PUSH
26677: LD_VAR 0 7
26681: PPUSH
26682: LD_VAR 0 1
26686: PPUSH
26687: LD_VAR 0 2
26691: PPUSH
26692: CALL_OW 297
26696: ST_TO_ADDR
// if not result then
26697: LD_VAR 0 6
26701: NOT
26702: IFFALSE 26728
// result := [ [ i , tmp ] ] else
26704: LD_ADDR_VAR 0 6
26708: PUSH
26709: LD_VAR 0 7
26713: PUSH
26714: LD_VAR 0 9
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: EMPTY
26724: LIST
26725: ST_TO_ADDR
26726: GO 26870
// begin if result [ result ] [ 2 ] < tmp then
26728: LD_VAR 0 6
26732: PUSH
26733: LD_VAR 0 6
26737: ARRAY
26738: PUSH
26739: LD_INT 2
26741: ARRAY
26742: PUSH
26743: LD_VAR 0 9
26747: LESS
26748: IFFALSE 26790
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26750: LD_ADDR_VAR 0 6
26754: PUSH
26755: LD_VAR 0 6
26759: PPUSH
26760: LD_VAR 0 6
26764: PUSH
26765: LD_INT 1
26767: PLUS
26768: PPUSH
26769: LD_VAR 0 7
26773: PUSH
26774: LD_VAR 0 9
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PPUSH
26783: CALL_OW 2
26787: ST_TO_ADDR
26788: GO 26870
// for j = 1 to result do
26790: LD_ADDR_VAR 0 8
26794: PUSH
26795: DOUBLE
26796: LD_INT 1
26798: DEC
26799: ST_TO_ADDR
26800: LD_VAR 0 6
26804: PUSH
26805: FOR_TO
26806: IFFALSE 26868
// begin if tmp < result [ j ] [ 2 ] then
26808: LD_VAR 0 9
26812: PUSH
26813: LD_VAR 0 6
26817: PUSH
26818: LD_VAR 0 8
26822: ARRAY
26823: PUSH
26824: LD_INT 2
26826: ARRAY
26827: LESS
26828: IFFALSE 26866
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26830: LD_ADDR_VAR 0 6
26834: PUSH
26835: LD_VAR 0 6
26839: PPUSH
26840: LD_VAR 0 8
26844: PPUSH
26845: LD_VAR 0 7
26849: PUSH
26850: LD_VAR 0 9
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PPUSH
26859: CALL_OW 2
26863: ST_TO_ADDR
// break ;
26864: GO 26868
// end ; end ;
26866: GO 26805
26868: POP
26869: POP
// end ; end ;
26870: GO 26669
26872: POP
26873: POP
// if result and not asc then
26874: LD_VAR 0 6
26878: PUSH
26879: LD_VAR 0 4
26883: NOT
26884: AND
26885: IFFALSE 26960
// begin tmp := result ;
26887: LD_ADDR_VAR 0 9
26891: PUSH
26892: LD_VAR 0 6
26896: ST_TO_ADDR
// for i = tmp downto 1 do
26897: LD_ADDR_VAR 0 7
26901: PUSH
26902: DOUBLE
26903: LD_VAR 0 9
26907: INC
26908: ST_TO_ADDR
26909: LD_INT 1
26911: PUSH
26912: FOR_DOWNTO
26913: IFFALSE 26958
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26915: LD_ADDR_VAR 0 6
26919: PUSH
26920: LD_VAR 0 6
26924: PPUSH
26925: LD_VAR 0 9
26929: PUSH
26930: LD_VAR 0 7
26934: MINUS
26935: PUSH
26936: LD_INT 1
26938: PLUS
26939: PPUSH
26940: LD_VAR 0 9
26944: PUSH
26945: LD_VAR 0 7
26949: ARRAY
26950: PPUSH
26951: CALL_OW 1
26955: ST_TO_ADDR
26956: GO 26912
26958: POP
26959: POP
// end ; tmp := [ ] ;
26960: LD_ADDR_VAR 0 9
26964: PUSH
26965: EMPTY
26966: ST_TO_ADDR
// if mode then
26967: LD_VAR 0 5
26971: IFFALSE 27040
// begin for i = 1 to result do
26973: LD_ADDR_VAR 0 7
26977: PUSH
26978: DOUBLE
26979: LD_INT 1
26981: DEC
26982: ST_TO_ADDR
26983: LD_VAR 0 6
26987: PUSH
26988: FOR_TO
26989: IFFALSE 27028
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26991: LD_ADDR_VAR 0 9
26995: PUSH
26996: LD_VAR 0 9
27000: PPUSH
27001: LD_VAR 0 7
27005: PPUSH
27006: LD_VAR 0 6
27010: PUSH
27011: LD_VAR 0 7
27015: ARRAY
27016: PUSH
27017: LD_INT 1
27019: ARRAY
27020: PPUSH
27021: CALL_OW 1
27025: ST_TO_ADDR
27026: GO 26988
27028: POP
27029: POP
// result := tmp ;
27030: LD_ADDR_VAR 0 6
27034: PUSH
27035: LD_VAR 0 9
27039: ST_TO_ADDR
// end ; end ;
27040: LD_VAR 0 6
27044: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27045: LD_INT 0
27047: PPUSH
27048: PPUSH
27049: PPUSH
27050: PPUSH
27051: PPUSH
27052: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27053: LD_ADDR_VAR 0 5
27057: PUSH
27058: LD_INT 0
27060: PUSH
27061: LD_INT 0
27063: PUSH
27064: LD_INT 0
27066: PUSH
27067: EMPTY
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: ST_TO_ADDR
// if not x or not y then
27075: LD_VAR 0 2
27079: NOT
27080: PUSH
27081: LD_VAR 0 3
27085: NOT
27086: OR
27087: IFFALSE 27091
// exit ;
27089: GO 28743
// if not range then
27091: LD_VAR 0 4
27095: NOT
27096: IFFALSE 27106
// range := 10 ;
27098: LD_ADDR_VAR 0 4
27102: PUSH
27103: LD_INT 10
27105: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27106: LD_ADDR_VAR 0 8
27110: PUSH
27111: LD_INT 81
27113: PUSH
27114: LD_VAR 0 1
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 92
27125: PUSH
27126: LD_VAR 0 2
27130: PUSH
27131: LD_VAR 0 3
27135: PUSH
27136: LD_VAR 0 4
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 3
27149: PUSH
27150: LD_INT 21
27152: PUSH
27153: LD_INT 3
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: LIST
27168: PPUSH
27169: CALL_OW 69
27173: ST_TO_ADDR
// if not tmp then
27174: LD_VAR 0 8
27178: NOT
27179: IFFALSE 27183
// exit ;
27181: GO 28743
// for i in tmp do
27183: LD_ADDR_VAR 0 6
27187: PUSH
27188: LD_VAR 0 8
27192: PUSH
27193: FOR_IN
27194: IFFALSE 28718
// begin points := [ 0 , 0 , 0 ] ;
27196: LD_ADDR_VAR 0 9
27200: PUSH
27201: LD_INT 0
27203: PUSH
27204: LD_INT 0
27206: PUSH
27207: LD_INT 0
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: LIST
27214: ST_TO_ADDR
// bpoints := 1 ;
27215: LD_ADDR_VAR 0 10
27219: PUSH
27220: LD_INT 1
27222: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27223: LD_VAR 0 6
27227: PPUSH
27228: CALL_OW 247
27232: PUSH
27233: LD_INT 1
27235: DOUBLE
27236: EQUAL
27237: IFTRUE 27241
27239: GO 27819
27241: POP
// begin if GetClass ( i ) = 1 then
27242: LD_VAR 0 6
27246: PPUSH
27247: CALL_OW 257
27251: PUSH
27252: LD_INT 1
27254: EQUAL
27255: IFFALSE 27276
// points := [ 10 , 5 , 3 ] ;
27257: LD_ADDR_VAR 0 9
27261: PUSH
27262: LD_INT 10
27264: PUSH
27265: LD_INT 5
27267: PUSH
27268: LD_INT 3
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: LIST
27275: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27276: LD_VAR 0 6
27280: PPUSH
27281: CALL_OW 257
27285: PUSH
27286: LD_INT 2
27288: PUSH
27289: LD_INT 3
27291: PUSH
27292: LD_INT 4
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: LIST
27299: IN
27300: IFFALSE 27321
// points := [ 3 , 2 , 1 ] ;
27302: LD_ADDR_VAR 0 9
27306: PUSH
27307: LD_INT 3
27309: PUSH
27310: LD_INT 2
27312: PUSH
27313: LD_INT 1
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: LIST
27320: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27321: LD_VAR 0 6
27325: PPUSH
27326: CALL_OW 257
27330: PUSH
27331: LD_INT 5
27333: EQUAL
27334: IFFALSE 27355
// points := [ 130 , 5 , 2 ] ;
27336: LD_ADDR_VAR 0 9
27340: PUSH
27341: LD_INT 130
27343: PUSH
27344: LD_INT 5
27346: PUSH
27347: LD_INT 2
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: LIST
27354: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27355: LD_VAR 0 6
27359: PPUSH
27360: CALL_OW 257
27364: PUSH
27365: LD_INT 8
27367: EQUAL
27368: IFFALSE 27389
// points := [ 35 , 35 , 30 ] ;
27370: LD_ADDR_VAR 0 9
27374: PUSH
27375: LD_INT 35
27377: PUSH
27378: LD_INT 35
27380: PUSH
27381: LD_INT 30
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: LIST
27388: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27389: LD_VAR 0 6
27393: PPUSH
27394: CALL_OW 257
27398: PUSH
27399: LD_INT 9
27401: EQUAL
27402: IFFALSE 27423
// points := [ 20 , 55 , 40 ] ;
27404: LD_ADDR_VAR 0 9
27408: PUSH
27409: LD_INT 20
27411: PUSH
27412: LD_INT 55
27414: PUSH
27415: LD_INT 40
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: LIST
27422: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27423: LD_VAR 0 6
27427: PPUSH
27428: CALL_OW 257
27432: PUSH
27433: LD_INT 12
27435: PUSH
27436: LD_INT 16
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: IN
27443: IFFALSE 27464
// points := [ 5 , 3 , 2 ] ;
27445: LD_ADDR_VAR 0 9
27449: PUSH
27450: LD_INT 5
27452: PUSH
27453: LD_INT 3
27455: PUSH
27456: LD_INT 2
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: LIST
27463: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27464: LD_VAR 0 6
27468: PPUSH
27469: CALL_OW 257
27473: PUSH
27474: LD_INT 17
27476: EQUAL
27477: IFFALSE 27498
// points := [ 100 , 50 , 75 ] ;
27479: LD_ADDR_VAR 0 9
27483: PUSH
27484: LD_INT 100
27486: PUSH
27487: LD_INT 50
27489: PUSH
27490: LD_INT 75
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: LIST
27497: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27498: LD_VAR 0 6
27502: PPUSH
27503: CALL_OW 257
27507: PUSH
27508: LD_INT 15
27510: EQUAL
27511: IFFALSE 27532
// points := [ 10 , 5 , 3 ] ;
27513: LD_ADDR_VAR 0 9
27517: PUSH
27518: LD_INT 10
27520: PUSH
27521: LD_INT 5
27523: PUSH
27524: LD_INT 3
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: LIST
27531: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27532: LD_VAR 0 6
27536: PPUSH
27537: CALL_OW 257
27541: PUSH
27542: LD_INT 14
27544: EQUAL
27545: IFFALSE 27566
// points := [ 10 , 0 , 0 ] ;
27547: LD_ADDR_VAR 0 9
27551: PUSH
27552: LD_INT 10
27554: PUSH
27555: LD_INT 0
27557: PUSH
27558: LD_INT 0
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: LIST
27565: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27566: LD_VAR 0 6
27570: PPUSH
27571: CALL_OW 257
27575: PUSH
27576: LD_INT 11
27578: EQUAL
27579: IFFALSE 27600
// points := [ 30 , 10 , 5 ] ;
27581: LD_ADDR_VAR 0 9
27585: PUSH
27586: LD_INT 30
27588: PUSH
27589: LD_INT 10
27591: PUSH
27592: LD_INT 5
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: LIST
27599: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27600: LD_VAR 0 1
27604: PPUSH
27605: LD_INT 5
27607: PPUSH
27608: CALL_OW 321
27612: PUSH
27613: LD_INT 2
27615: EQUAL
27616: IFFALSE 27633
// bpoints := bpoints * 1.8 ;
27618: LD_ADDR_VAR 0 10
27622: PUSH
27623: LD_VAR 0 10
27627: PUSH
27628: LD_REAL  1.80000000000000E+0000
27631: MUL
27632: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27633: LD_VAR 0 6
27637: PPUSH
27638: CALL_OW 257
27642: PUSH
27643: LD_INT 1
27645: PUSH
27646: LD_INT 2
27648: PUSH
27649: LD_INT 3
27651: PUSH
27652: LD_INT 4
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: IN
27661: PUSH
27662: LD_VAR 0 1
27666: PPUSH
27667: LD_INT 51
27669: PPUSH
27670: CALL_OW 321
27674: PUSH
27675: LD_INT 2
27677: EQUAL
27678: AND
27679: IFFALSE 27696
// bpoints := bpoints * 1.2 ;
27681: LD_ADDR_VAR 0 10
27685: PUSH
27686: LD_VAR 0 10
27690: PUSH
27691: LD_REAL  1.20000000000000E+0000
27694: MUL
27695: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27696: LD_VAR 0 6
27700: PPUSH
27701: CALL_OW 257
27705: PUSH
27706: LD_INT 5
27708: PUSH
27709: LD_INT 7
27711: PUSH
27712: LD_INT 9
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: LIST
27719: IN
27720: PUSH
27721: LD_VAR 0 1
27725: PPUSH
27726: LD_INT 52
27728: PPUSH
27729: CALL_OW 321
27733: PUSH
27734: LD_INT 2
27736: EQUAL
27737: AND
27738: IFFALSE 27755
// bpoints := bpoints * 1.5 ;
27740: LD_ADDR_VAR 0 10
27744: PUSH
27745: LD_VAR 0 10
27749: PUSH
27750: LD_REAL  1.50000000000000E+0000
27753: MUL
27754: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27755: LD_VAR 0 1
27759: PPUSH
27760: LD_INT 66
27762: PPUSH
27763: CALL_OW 321
27767: PUSH
27768: LD_INT 2
27770: EQUAL
27771: IFFALSE 27788
// bpoints := bpoints * 1.1 ;
27773: LD_ADDR_VAR 0 10
27777: PUSH
27778: LD_VAR 0 10
27782: PUSH
27783: LD_REAL  1.10000000000000E+0000
27786: MUL
27787: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27788: LD_ADDR_VAR 0 10
27792: PUSH
27793: LD_VAR 0 10
27797: PUSH
27798: LD_VAR 0 6
27802: PPUSH
27803: LD_INT 1
27805: PPUSH
27806: CALL_OW 259
27810: PUSH
27811: LD_REAL  1.15000000000000E+0000
27814: MUL
27815: MUL
27816: ST_TO_ADDR
// end ; unit_vehicle :
27817: GO 28647
27819: LD_INT 2
27821: DOUBLE
27822: EQUAL
27823: IFTRUE 27827
27825: GO 28635
27827: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27828: LD_VAR 0 6
27832: PPUSH
27833: CALL_OW 264
27837: PUSH
27838: LD_INT 2
27840: PUSH
27841: LD_INT 42
27843: PUSH
27844: LD_INT 24
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: LIST
27851: IN
27852: IFFALSE 27873
// points := [ 25 , 5 , 3 ] ;
27854: LD_ADDR_VAR 0 9
27858: PUSH
27859: LD_INT 25
27861: PUSH
27862: LD_INT 5
27864: PUSH
27865: LD_INT 3
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: LIST
27872: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27873: LD_VAR 0 6
27877: PPUSH
27878: CALL_OW 264
27882: PUSH
27883: LD_INT 4
27885: PUSH
27886: LD_INT 43
27888: PUSH
27889: LD_INT 25
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: LIST
27896: IN
27897: IFFALSE 27918
// points := [ 40 , 15 , 5 ] ;
27899: LD_ADDR_VAR 0 9
27903: PUSH
27904: LD_INT 40
27906: PUSH
27907: LD_INT 15
27909: PUSH
27910: LD_INT 5
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: LIST
27917: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27918: LD_VAR 0 6
27922: PPUSH
27923: CALL_OW 264
27927: PUSH
27928: LD_INT 3
27930: PUSH
27931: LD_INT 23
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: IN
27938: IFFALSE 27959
// points := [ 7 , 25 , 8 ] ;
27940: LD_ADDR_VAR 0 9
27944: PUSH
27945: LD_INT 7
27947: PUSH
27948: LD_INT 25
27950: PUSH
27951: LD_INT 8
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: LIST
27958: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27959: LD_VAR 0 6
27963: PPUSH
27964: CALL_OW 264
27968: PUSH
27969: LD_INT 5
27971: PUSH
27972: LD_INT 27
27974: PUSH
27975: LD_INT 44
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: LIST
27982: IN
27983: IFFALSE 28004
// points := [ 14 , 50 , 16 ] ;
27985: LD_ADDR_VAR 0 9
27989: PUSH
27990: LD_INT 14
27992: PUSH
27993: LD_INT 50
27995: PUSH
27996: LD_INT 16
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: LIST
28003: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28004: LD_VAR 0 6
28008: PPUSH
28009: CALL_OW 264
28013: PUSH
28014: LD_INT 6
28016: PUSH
28017: LD_INT 46
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: IN
28024: IFFALSE 28045
// points := [ 32 , 120 , 70 ] ;
28026: LD_ADDR_VAR 0 9
28030: PUSH
28031: LD_INT 32
28033: PUSH
28034: LD_INT 120
28036: PUSH
28037: LD_INT 70
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: LIST
28044: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28045: LD_VAR 0 6
28049: PPUSH
28050: CALL_OW 264
28054: PUSH
28055: LD_INT 7
28057: PUSH
28058: LD_INT 28
28060: PUSH
28061: LD_INT 45
28063: PUSH
28064: LD_EXP 81
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: IN
28075: IFFALSE 28096
// points := [ 35 , 20 , 45 ] ;
28077: LD_ADDR_VAR 0 9
28081: PUSH
28082: LD_INT 35
28084: PUSH
28085: LD_INT 20
28087: PUSH
28088: LD_INT 45
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: LIST
28095: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28096: LD_VAR 0 6
28100: PPUSH
28101: CALL_OW 264
28105: PUSH
28106: LD_INT 47
28108: PUSH
28109: EMPTY
28110: LIST
28111: IN
28112: IFFALSE 28133
// points := [ 67 , 45 , 75 ] ;
28114: LD_ADDR_VAR 0 9
28118: PUSH
28119: LD_INT 67
28121: PUSH
28122: LD_INT 45
28124: PUSH
28125: LD_INT 75
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: LIST
28132: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28133: LD_VAR 0 6
28137: PPUSH
28138: CALL_OW 264
28142: PUSH
28143: LD_INT 26
28145: PUSH
28146: EMPTY
28147: LIST
28148: IN
28149: IFFALSE 28170
// points := [ 120 , 30 , 80 ] ;
28151: LD_ADDR_VAR 0 9
28155: PUSH
28156: LD_INT 120
28158: PUSH
28159: LD_INT 30
28161: PUSH
28162: LD_INT 80
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: LIST
28169: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28170: LD_VAR 0 6
28174: PPUSH
28175: CALL_OW 264
28179: PUSH
28180: LD_INT 22
28182: PUSH
28183: EMPTY
28184: LIST
28185: IN
28186: IFFALSE 28207
// points := [ 40 , 1 , 1 ] ;
28188: LD_ADDR_VAR 0 9
28192: PUSH
28193: LD_INT 40
28195: PUSH
28196: LD_INT 1
28198: PUSH
28199: LD_INT 1
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: LIST
28206: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28207: LD_VAR 0 6
28211: PPUSH
28212: CALL_OW 264
28216: PUSH
28217: LD_INT 29
28219: PUSH
28220: EMPTY
28221: LIST
28222: IN
28223: IFFALSE 28244
// points := [ 70 , 200 , 400 ] ;
28225: LD_ADDR_VAR 0 9
28229: PUSH
28230: LD_INT 70
28232: PUSH
28233: LD_INT 200
28235: PUSH
28236: LD_INT 400
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: LIST
28243: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28244: LD_VAR 0 6
28248: PPUSH
28249: CALL_OW 264
28253: PUSH
28254: LD_INT 14
28256: PUSH
28257: LD_INT 53
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: IN
28264: IFFALSE 28285
// points := [ 40 , 10 , 20 ] ;
28266: LD_ADDR_VAR 0 9
28270: PUSH
28271: LD_INT 40
28273: PUSH
28274: LD_INT 10
28276: PUSH
28277: LD_INT 20
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: LIST
28284: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28285: LD_VAR 0 6
28289: PPUSH
28290: CALL_OW 264
28294: PUSH
28295: LD_INT 9
28297: PUSH
28298: EMPTY
28299: LIST
28300: IN
28301: IFFALSE 28322
// points := [ 5 , 70 , 20 ] ;
28303: LD_ADDR_VAR 0 9
28307: PUSH
28308: LD_INT 5
28310: PUSH
28311: LD_INT 70
28313: PUSH
28314: LD_INT 20
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: LIST
28321: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28322: LD_VAR 0 6
28326: PPUSH
28327: CALL_OW 264
28331: PUSH
28332: LD_INT 10
28334: PUSH
28335: EMPTY
28336: LIST
28337: IN
28338: IFFALSE 28359
// points := [ 35 , 110 , 70 ] ;
28340: LD_ADDR_VAR 0 9
28344: PUSH
28345: LD_INT 35
28347: PUSH
28348: LD_INT 110
28350: PUSH
28351: LD_INT 70
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: LIST
28358: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28359: LD_VAR 0 6
28363: PPUSH
28364: CALL_OW 265
28368: PUSH
28369: LD_INT 25
28371: EQUAL
28372: IFFALSE 28393
// points := [ 80 , 65 , 100 ] ;
28374: LD_ADDR_VAR 0 9
28378: PUSH
28379: LD_INT 80
28381: PUSH
28382: LD_INT 65
28384: PUSH
28385: LD_INT 100
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: LIST
28392: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28393: LD_VAR 0 6
28397: PPUSH
28398: CALL_OW 263
28402: PUSH
28403: LD_INT 1
28405: EQUAL
28406: IFFALSE 28441
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28408: LD_ADDR_VAR 0 10
28412: PUSH
28413: LD_VAR 0 10
28417: PUSH
28418: LD_VAR 0 6
28422: PPUSH
28423: CALL_OW 311
28427: PPUSH
28428: LD_INT 3
28430: PPUSH
28431: CALL_OW 259
28435: PUSH
28436: LD_INT 4
28438: MUL
28439: MUL
28440: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28441: LD_VAR 0 6
28445: PPUSH
28446: CALL_OW 263
28450: PUSH
28451: LD_INT 2
28453: EQUAL
28454: IFFALSE 28505
// begin j := IsControledBy ( i ) ;
28456: LD_ADDR_VAR 0 7
28460: PUSH
28461: LD_VAR 0 6
28465: PPUSH
28466: CALL_OW 312
28470: ST_TO_ADDR
// if j then
28471: LD_VAR 0 7
28475: IFFALSE 28505
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28477: LD_ADDR_VAR 0 10
28481: PUSH
28482: LD_VAR 0 10
28486: PUSH
28487: LD_VAR 0 7
28491: PPUSH
28492: LD_INT 3
28494: PPUSH
28495: CALL_OW 259
28499: PUSH
28500: LD_INT 3
28502: MUL
28503: MUL
28504: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28505: LD_VAR 0 6
28509: PPUSH
28510: CALL_OW 264
28514: PUSH
28515: LD_INT 5
28517: PUSH
28518: LD_INT 6
28520: PUSH
28521: LD_INT 46
28523: PUSH
28524: LD_INT 44
28526: PUSH
28527: LD_INT 47
28529: PUSH
28530: LD_INT 45
28532: PUSH
28533: LD_INT 28
28535: PUSH
28536: LD_INT 7
28538: PUSH
28539: LD_INT 27
28541: PUSH
28542: LD_INT 29
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: IN
28557: PUSH
28558: LD_VAR 0 1
28562: PPUSH
28563: LD_INT 52
28565: PPUSH
28566: CALL_OW 321
28570: PUSH
28571: LD_INT 2
28573: EQUAL
28574: AND
28575: IFFALSE 28592
// bpoints := bpoints * 1.2 ;
28577: LD_ADDR_VAR 0 10
28581: PUSH
28582: LD_VAR 0 10
28586: PUSH
28587: LD_REAL  1.20000000000000E+0000
28590: MUL
28591: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28592: LD_VAR 0 6
28596: PPUSH
28597: CALL_OW 264
28601: PUSH
28602: LD_INT 6
28604: PUSH
28605: LD_INT 46
28607: PUSH
28608: LD_INT 47
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: LIST
28615: IN
28616: IFFALSE 28633
// bpoints := bpoints * 1.2 ;
28618: LD_ADDR_VAR 0 10
28622: PUSH
28623: LD_VAR 0 10
28627: PUSH
28628: LD_REAL  1.20000000000000E+0000
28631: MUL
28632: ST_TO_ADDR
// end ; unit_building :
28633: GO 28647
28635: LD_INT 3
28637: DOUBLE
28638: EQUAL
28639: IFTRUE 28643
28641: GO 28646
28643: POP
// ; end ;
28644: GO 28647
28646: POP
// for j = 1 to 3 do
28647: LD_ADDR_VAR 0 7
28651: PUSH
28652: DOUBLE
28653: LD_INT 1
28655: DEC
28656: ST_TO_ADDR
28657: LD_INT 3
28659: PUSH
28660: FOR_TO
28661: IFFALSE 28714
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28663: LD_ADDR_VAR 0 5
28667: PUSH
28668: LD_VAR 0 5
28672: PPUSH
28673: LD_VAR 0 7
28677: PPUSH
28678: LD_VAR 0 5
28682: PUSH
28683: LD_VAR 0 7
28687: ARRAY
28688: PUSH
28689: LD_VAR 0 9
28693: PUSH
28694: LD_VAR 0 7
28698: ARRAY
28699: PUSH
28700: LD_VAR 0 10
28704: MUL
28705: PLUS
28706: PPUSH
28707: CALL_OW 1
28711: ST_TO_ADDR
28712: GO 28660
28714: POP
28715: POP
// end ;
28716: GO 27193
28718: POP
28719: POP
// result := Replace ( result , 4 , tmp ) ;
28720: LD_ADDR_VAR 0 5
28724: PUSH
28725: LD_VAR 0 5
28729: PPUSH
28730: LD_INT 4
28732: PPUSH
28733: LD_VAR 0 8
28737: PPUSH
28738: CALL_OW 1
28742: ST_TO_ADDR
// end ;
28743: LD_VAR 0 5
28747: RET
// export function DangerAtRange ( unit , range ) ; begin
28748: LD_INT 0
28750: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28751: LD_ADDR_VAR 0 3
28755: PUSH
28756: LD_VAR 0 1
28760: PPUSH
28761: CALL_OW 255
28765: PPUSH
28766: LD_VAR 0 1
28770: PPUSH
28771: CALL_OW 250
28775: PPUSH
28776: LD_VAR 0 1
28780: PPUSH
28781: CALL_OW 251
28785: PPUSH
28786: LD_VAR 0 2
28790: PPUSH
28791: CALL 27045 0 4
28795: ST_TO_ADDR
// end ;
28796: LD_VAR 0 3
28800: RET
// export function DangerInArea ( side , area ) ; begin
28801: LD_INT 0
28803: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28804: LD_ADDR_VAR 0 3
28808: PUSH
28809: LD_VAR 0 2
28813: PPUSH
28814: LD_INT 81
28816: PUSH
28817: LD_VAR 0 1
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PPUSH
28826: CALL_OW 70
28830: ST_TO_ADDR
// end ;
28831: LD_VAR 0 3
28835: RET
// export function IsExtension ( b ) ; begin
28836: LD_INT 0
28838: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28839: LD_ADDR_VAR 0 2
28843: PUSH
28844: LD_VAR 0 1
28848: PUSH
28849: LD_INT 23
28851: PUSH
28852: LD_INT 20
28854: PUSH
28855: LD_INT 22
28857: PUSH
28858: LD_INT 17
28860: PUSH
28861: LD_INT 24
28863: PUSH
28864: LD_INT 21
28866: PUSH
28867: LD_INT 19
28869: PUSH
28870: LD_INT 16
28872: PUSH
28873: LD_INT 25
28875: PUSH
28876: LD_INT 18
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: IN
28891: ST_TO_ADDR
// end ;
28892: LD_VAR 0 2
28896: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
28897: LD_INT 0
28899: PPUSH
28900: PPUSH
28901: PPUSH
// result := [ ] ;
28902: LD_ADDR_VAR 0 4
28906: PUSH
28907: EMPTY
28908: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28909: LD_ADDR_VAR 0 5
28913: PUSH
28914: LD_VAR 0 2
28918: PPUSH
28919: LD_INT 21
28921: PUSH
28922: LD_INT 3
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PPUSH
28929: CALL_OW 70
28933: ST_TO_ADDR
// if not tmp then
28934: LD_VAR 0 5
28938: NOT
28939: IFFALSE 28943
// exit ;
28941: GO 29007
// if checkLink then
28943: LD_VAR 0 3
28947: IFFALSE 28997
// begin for i in tmp do
28949: LD_ADDR_VAR 0 6
28953: PUSH
28954: LD_VAR 0 5
28958: PUSH
28959: FOR_IN
28960: IFFALSE 28995
// if GetBase ( i ) <> base then
28962: LD_VAR 0 6
28966: PPUSH
28967: CALL_OW 274
28971: PUSH
28972: LD_VAR 0 1
28976: NONEQUAL
28977: IFFALSE 28993
// ComLinkToBase ( base , i ) ;
28979: LD_VAR 0 1
28983: PPUSH
28984: LD_VAR 0 6
28988: PPUSH
28989: CALL_OW 169
28993: GO 28959
28995: POP
28996: POP
// end ; result := tmp ;
28997: LD_ADDR_VAR 0 4
29001: PUSH
29002: LD_VAR 0 5
29006: ST_TO_ADDR
// end ;
29007: LD_VAR 0 4
29011: RET
// export function ComComplete ( units , b ) ; var i ; begin
29012: LD_INT 0
29014: PPUSH
29015: PPUSH
// if not units then
29016: LD_VAR 0 1
29020: NOT
29021: IFFALSE 29025
// exit ;
29023: GO 29115
// for i in units do
29025: LD_ADDR_VAR 0 4
29029: PUSH
29030: LD_VAR 0 1
29034: PUSH
29035: FOR_IN
29036: IFFALSE 29113
// if BuildingStatus ( b ) = bs_build then
29038: LD_VAR 0 2
29042: PPUSH
29043: CALL_OW 461
29047: PUSH
29048: LD_INT 1
29050: EQUAL
29051: IFFALSE 29111
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29053: LD_VAR 0 4
29057: PPUSH
29058: LD_STRING h
29060: PUSH
29061: LD_VAR 0 2
29065: PPUSH
29066: CALL_OW 250
29070: PUSH
29071: LD_VAR 0 2
29075: PPUSH
29076: CALL_OW 251
29080: PUSH
29081: LD_VAR 0 2
29085: PUSH
29086: LD_INT 0
29088: PUSH
29089: LD_INT 0
29091: PUSH
29092: LD_INT 0
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: PUSH
29104: EMPTY
29105: LIST
29106: PPUSH
29107: CALL_OW 446
29111: GO 29035
29113: POP
29114: POP
// end ;
29115: LD_VAR 0 3
29119: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29120: LD_INT 0
29122: PPUSH
29123: PPUSH
29124: PPUSH
29125: PPUSH
29126: PPUSH
29127: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29128: LD_VAR 0 1
29132: NOT
29133: PUSH
29134: LD_VAR 0 1
29138: PPUSH
29139: CALL_OW 263
29143: PUSH
29144: LD_INT 2
29146: NONEQUAL
29147: OR
29148: IFFALSE 29152
// exit ;
29150: GO 29468
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29152: LD_ADDR_VAR 0 6
29156: PUSH
29157: LD_INT 22
29159: PUSH
29160: LD_VAR 0 1
29164: PPUSH
29165: CALL_OW 255
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 2
29176: PUSH
29177: LD_INT 30
29179: PUSH
29180: LD_INT 36
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: LD_INT 34
29189: PUSH
29190: LD_INT 31
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: LIST
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PPUSH
29206: CALL_OW 69
29210: ST_TO_ADDR
// if not tmp then
29211: LD_VAR 0 6
29215: NOT
29216: IFFALSE 29220
// exit ;
29218: GO 29468
// result := [ ] ;
29220: LD_ADDR_VAR 0 2
29224: PUSH
29225: EMPTY
29226: ST_TO_ADDR
// for i in tmp do
29227: LD_ADDR_VAR 0 3
29231: PUSH
29232: LD_VAR 0 6
29236: PUSH
29237: FOR_IN
29238: IFFALSE 29309
// begin t := UnitsInside ( i ) ;
29240: LD_ADDR_VAR 0 4
29244: PUSH
29245: LD_VAR 0 3
29249: PPUSH
29250: CALL_OW 313
29254: ST_TO_ADDR
// if t then
29255: LD_VAR 0 4
29259: IFFALSE 29307
// for j in t do
29261: LD_ADDR_VAR 0 7
29265: PUSH
29266: LD_VAR 0 4
29270: PUSH
29271: FOR_IN
29272: IFFALSE 29305
// result := Replace ( result , result + 1 , j ) ;
29274: LD_ADDR_VAR 0 2
29278: PUSH
29279: LD_VAR 0 2
29283: PPUSH
29284: LD_VAR 0 2
29288: PUSH
29289: LD_INT 1
29291: PLUS
29292: PPUSH
29293: LD_VAR 0 7
29297: PPUSH
29298: CALL_OW 1
29302: ST_TO_ADDR
29303: GO 29271
29305: POP
29306: POP
// end ;
29307: GO 29237
29309: POP
29310: POP
// if not result then
29311: LD_VAR 0 2
29315: NOT
29316: IFFALSE 29320
// exit ;
29318: GO 29468
// mech := result [ 1 ] ;
29320: LD_ADDR_VAR 0 5
29324: PUSH
29325: LD_VAR 0 2
29329: PUSH
29330: LD_INT 1
29332: ARRAY
29333: ST_TO_ADDR
// if result > 1 then
29334: LD_VAR 0 2
29338: PUSH
29339: LD_INT 1
29341: GREATER
29342: IFFALSE 29454
// begin for i = 2 to result do
29344: LD_ADDR_VAR 0 3
29348: PUSH
29349: DOUBLE
29350: LD_INT 2
29352: DEC
29353: ST_TO_ADDR
29354: LD_VAR 0 2
29358: PUSH
29359: FOR_TO
29360: IFFALSE 29452
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29362: LD_ADDR_VAR 0 4
29366: PUSH
29367: LD_VAR 0 2
29371: PUSH
29372: LD_VAR 0 3
29376: ARRAY
29377: PPUSH
29378: LD_INT 3
29380: PPUSH
29381: CALL_OW 259
29385: PUSH
29386: LD_VAR 0 2
29390: PUSH
29391: LD_VAR 0 3
29395: ARRAY
29396: PPUSH
29397: CALL_OW 432
29401: MINUS
29402: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29403: LD_VAR 0 4
29407: PUSH
29408: LD_VAR 0 5
29412: PPUSH
29413: LD_INT 3
29415: PPUSH
29416: CALL_OW 259
29420: PUSH
29421: LD_VAR 0 5
29425: PPUSH
29426: CALL_OW 432
29430: MINUS
29431: GREATEREQUAL
29432: IFFALSE 29450
// mech := result [ i ] ;
29434: LD_ADDR_VAR 0 5
29438: PUSH
29439: LD_VAR 0 2
29443: PUSH
29444: LD_VAR 0 3
29448: ARRAY
29449: ST_TO_ADDR
// end ;
29450: GO 29359
29452: POP
29453: POP
// end ; ComLinkTo ( vehicle , mech ) ;
29454: LD_VAR 0 1
29458: PPUSH
29459: LD_VAR 0 5
29463: PPUSH
29464: CALL_OW 135
// end ;
29468: LD_VAR 0 2
29472: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29473: LD_INT 0
29475: PPUSH
29476: PPUSH
29477: PPUSH
29478: PPUSH
29479: PPUSH
29480: PPUSH
29481: PPUSH
29482: PPUSH
29483: PPUSH
29484: PPUSH
29485: PPUSH
29486: PPUSH
29487: PPUSH
// result := [ ] ;
29488: LD_ADDR_VAR 0 7
29492: PUSH
29493: EMPTY
29494: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29495: LD_VAR 0 1
29499: PPUSH
29500: CALL_OW 266
29504: PUSH
29505: LD_INT 0
29507: PUSH
29508: LD_INT 1
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: IN
29515: NOT
29516: IFFALSE 29520
// exit ;
29518: GO 31154
// if name then
29520: LD_VAR 0 3
29524: IFFALSE 29540
// SetBName ( base_dep , name ) ;
29526: LD_VAR 0 1
29530: PPUSH
29531: LD_VAR 0 3
29535: PPUSH
29536: CALL_OW 500
// base := GetBase ( base_dep ) ;
29540: LD_ADDR_VAR 0 15
29544: PUSH
29545: LD_VAR 0 1
29549: PPUSH
29550: CALL_OW 274
29554: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29555: LD_ADDR_VAR 0 16
29559: PUSH
29560: LD_VAR 0 1
29564: PPUSH
29565: CALL_OW 255
29569: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29570: LD_ADDR_VAR 0 17
29574: PUSH
29575: LD_VAR 0 1
29579: PPUSH
29580: CALL_OW 248
29584: ST_TO_ADDR
// if sources then
29585: LD_VAR 0 5
29589: IFFALSE 29636
// for i = 1 to 3 do
29591: LD_ADDR_VAR 0 8
29595: PUSH
29596: DOUBLE
29597: LD_INT 1
29599: DEC
29600: ST_TO_ADDR
29601: LD_INT 3
29603: PUSH
29604: FOR_TO
29605: IFFALSE 29634
// AddResourceType ( base , i , sources [ i ] ) ;
29607: LD_VAR 0 15
29611: PPUSH
29612: LD_VAR 0 8
29616: PPUSH
29617: LD_VAR 0 5
29621: PUSH
29622: LD_VAR 0 8
29626: ARRAY
29627: PPUSH
29628: CALL_OW 276
29632: GO 29604
29634: POP
29635: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29636: LD_ADDR_VAR 0 18
29640: PUSH
29641: LD_VAR 0 15
29645: PPUSH
29646: LD_VAR 0 2
29650: PPUSH
29651: LD_INT 1
29653: PPUSH
29654: CALL 28897 0 3
29658: ST_TO_ADDR
// InitHc ;
29659: CALL_OW 19
// InitUc ;
29663: CALL_OW 18
// uc_side := side ;
29667: LD_ADDR_OWVAR 20
29671: PUSH
29672: LD_VAR 0 16
29676: ST_TO_ADDR
// uc_nation := nation ;
29677: LD_ADDR_OWVAR 21
29681: PUSH
29682: LD_VAR 0 17
29686: ST_TO_ADDR
// if buildings then
29687: LD_VAR 0 18
29691: IFFALSE 31013
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29693: LD_ADDR_VAR 0 19
29697: PUSH
29698: LD_VAR 0 18
29702: PPUSH
29703: LD_INT 2
29705: PUSH
29706: LD_INT 30
29708: PUSH
29709: LD_INT 29
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: LD_INT 30
29718: PUSH
29719: LD_INT 30
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: LIST
29730: PPUSH
29731: CALL_OW 72
29735: ST_TO_ADDR
// if tmp then
29736: LD_VAR 0 19
29740: IFFALSE 29788
// for i in tmp do
29742: LD_ADDR_VAR 0 8
29746: PUSH
29747: LD_VAR 0 19
29751: PUSH
29752: FOR_IN
29753: IFFALSE 29786
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29755: LD_VAR 0 8
29759: PPUSH
29760: CALL_OW 250
29764: PPUSH
29765: LD_VAR 0 8
29769: PPUSH
29770: CALL_OW 251
29774: PPUSH
29775: LD_VAR 0 16
29779: PPUSH
29780: CALL_OW 441
29784: GO 29752
29786: POP
29787: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29788: LD_VAR 0 18
29792: PPUSH
29793: LD_INT 2
29795: PUSH
29796: LD_INT 30
29798: PUSH
29799: LD_INT 32
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 30
29808: PUSH
29809: LD_INT 33
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: LIST
29820: PPUSH
29821: CALL_OW 72
29825: IFFALSE 29913
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29827: LD_ADDR_VAR 0 8
29831: PUSH
29832: LD_VAR 0 18
29836: PPUSH
29837: LD_INT 2
29839: PUSH
29840: LD_INT 30
29842: PUSH
29843: LD_INT 32
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 30
29852: PUSH
29853: LD_INT 33
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: LIST
29864: PPUSH
29865: CALL_OW 72
29869: PUSH
29870: FOR_IN
29871: IFFALSE 29911
// begin if not GetBWeapon ( i ) then
29873: LD_VAR 0 8
29877: PPUSH
29878: CALL_OW 269
29882: NOT
29883: IFFALSE 29909
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29885: LD_VAR 0 8
29889: PPUSH
29890: LD_VAR 0 8
29894: PPUSH
29895: LD_VAR 0 2
29899: PPUSH
29900: CALL 31159 0 2
29904: PPUSH
29905: CALL_OW 431
// end ;
29909: GO 29870
29911: POP
29912: POP
// end ; for i = 1 to personel do
29913: LD_ADDR_VAR 0 8
29917: PUSH
29918: DOUBLE
29919: LD_INT 1
29921: DEC
29922: ST_TO_ADDR
29923: LD_VAR 0 6
29927: PUSH
29928: FOR_TO
29929: IFFALSE 30993
// begin if i > 4 then
29931: LD_VAR 0 8
29935: PUSH
29936: LD_INT 4
29938: GREATER
29939: IFFALSE 29943
// break ;
29941: GO 30993
// case i of 1 :
29943: LD_VAR 0 8
29947: PUSH
29948: LD_INT 1
29950: DOUBLE
29951: EQUAL
29952: IFTRUE 29956
29954: GO 30036
29956: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29957: LD_ADDR_VAR 0 12
29961: PUSH
29962: LD_VAR 0 18
29966: PPUSH
29967: LD_INT 22
29969: PUSH
29970: LD_VAR 0 16
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 58
29981: PUSH
29982: EMPTY
29983: LIST
29984: PUSH
29985: LD_INT 2
29987: PUSH
29988: LD_INT 30
29990: PUSH
29991: LD_INT 32
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 30
30000: PUSH
30001: LD_INT 4
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 30
30010: PUSH
30011: LD_INT 5
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: LIST
30028: PPUSH
30029: CALL_OW 72
30033: ST_TO_ADDR
30034: GO 30258
30036: LD_INT 2
30038: DOUBLE
30039: EQUAL
30040: IFTRUE 30044
30042: GO 30106
30044: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30045: LD_ADDR_VAR 0 12
30049: PUSH
30050: LD_VAR 0 18
30054: PPUSH
30055: LD_INT 22
30057: PUSH
30058: LD_VAR 0 16
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 2
30069: PUSH
30070: LD_INT 30
30072: PUSH
30073: LD_INT 0
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 30
30082: PUSH
30083: LD_INT 1
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: LIST
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PPUSH
30099: CALL_OW 72
30103: ST_TO_ADDR
30104: GO 30258
30106: LD_INT 3
30108: DOUBLE
30109: EQUAL
30110: IFTRUE 30114
30112: GO 30176
30114: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30115: LD_ADDR_VAR 0 12
30119: PUSH
30120: LD_VAR 0 18
30124: PPUSH
30125: LD_INT 22
30127: PUSH
30128: LD_VAR 0 16
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 2
30139: PUSH
30140: LD_INT 30
30142: PUSH
30143: LD_INT 2
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 30
30152: PUSH
30153: LD_INT 3
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: LIST
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PPUSH
30169: CALL_OW 72
30173: ST_TO_ADDR
30174: GO 30258
30176: LD_INT 4
30178: DOUBLE
30179: EQUAL
30180: IFTRUE 30184
30182: GO 30257
30184: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30185: LD_ADDR_VAR 0 12
30189: PUSH
30190: LD_VAR 0 18
30194: PPUSH
30195: LD_INT 22
30197: PUSH
30198: LD_VAR 0 16
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 2
30209: PUSH
30210: LD_INT 30
30212: PUSH
30213: LD_INT 6
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 30
30222: PUSH
30223: LD_INT 7
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 30
30232: PUSH
30233: LD_INT 8
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PPUSH
30250: CALL_OW 72
30254: ST_TO_ADDR
30255: GO 30258
30257: POP
// if i = 1 then
30258: LD_VAR 0 8
30262: PUSH
30263: LD_INT 1
30265: EQUAL
30266: IFFALSE 30377
// begin tmp := [ ] ;
30268: LD_ADDR_VAR 0 19
30272: PUSH
30273: EMPTY
30274: ST_TO_ADDR
// for j in f do
30275: LD_ADDR_VAR 0 9
30279: PUSH
30280: LD_VAR 0 12
30284: PUSH
30285: FOR_IN
30286: IFFALSE 30359
// if GetBType ( j ) = b_bunker then
30288: LD_VAR 0 9
30292: PPUSH
30293: CALL_OW 266
30297: PUSH
30298: LD_INT 32
30300: EQUAL
30301: IFFALSE 30328
// tmp := Insert ( tmp , 1 , j ) else
30303: LD_ADDR_VAR 0 19
30307: PUSH
30308: LD_VAR 0 19
30312: PPUSH
30313: LD_INT 1
30315: PPUSH
30316: LD_VAR 0 9
30320: PPUSH
30321: CALL_OW 2
30325: ST_TO_ADDR
30326: GO 30357
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30328: LD_ADDR_VAR 0 19
30332: PUSH
30333: LD_VAR 0 19
30337: PPUSH
30338: LD_VAR 0 19
30342: PUSH
30343: LD_INT 1
30345: PLUS
30346: PPUSH
30347: LD_VAR 0 9
30351: PPUSH
30352: CALL_OW 2
30356: ST_TO_ADDR
30357: GO 30285
30359: POP
30360: POP
// if tmp then
30361: LD_VAR 0 19
30365: IFFALSE 30377
// f := tmp ;
30367: LD_ADDR_VAR 0 12
30371: PUSH
30372: LD_VAR 0 19
30376: ST_TO_ADDR
// end ; x := personel [ i ] ;
30377: LD_ADDR_VAR 0 13
30381: PUSH
30382: LD_VAR 0 6
30386: PUSH
30387: LD_VAR 0 8
30391: ARRAY
30392: ST_TO_ADDR
// if x = - 1 then
30393: LD_VAR 0 13
30397: PUSH
30398: LD_INT 1
30400: NEG
30401: EQUAL
30402: IFFALSE 30611
// begin for j in f do
30404: LD_ADDR_VAR 0 9
30408: PUSH
30409: LD_VAR 0 12
30413: PUSH
30414: FOR_IN
30415: IFFALSE 30607
// repeat InitHc ;
30417: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30421: LD_VAR 0 9
30425: PPUSH
30426: CALL_OW 266
30430: PUSH
30431: LD_INT 5
30433: EQUAL
30434: IFFALSE 30504
// begin if UnitsInside ( j ) < 3 then
30436: LD_VAR 0 9
30440: PPUSH
30441: CALL_OW 313
30445: PUSH
30446: LD_INT 3
30448: LESS
30449: IFFALSE 30485
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30451: LD_INT 0
30453: PPUSH
30454: LD_INT 5
30456: PUSH
30457: LD_INT 8
30459: PUSH
30460: LD_INT 9
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: LIST
30467: PUSH
30468: LD_VAR 0 17
30472: ARRAY
30473: PPUSH
30474: LD_VAR 0 4
30478: PPUSH
30479: CALL_OW 380
30483: GO 30502
// PrepareHuman ( false , i , skill ) ;
30485: LD_INT 0
30487: PPUSH
30488: LD_VAR 0 8
30492: PPUSH
30493: LD_VAR 0 4
30497: PPUSH
30498: CALL_OW 380
// end else
30502: GO 30521
// PrepareHuman ( false , i , skill ) ;
30504: LD_INT 0
30506: PPUSH
30507: LD_VAR 0 8
30511: PPUSH
30512: LD_VAR 0 4
30516: PPUSH
30517: CALL_OW 380
// un := CreateHuman ;
30521: LD_ADDR_VAR 0 14
30525: PUSH
30526: CALL_OW 44
30530: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30531: LD_ADDR_VAR 0 7
30535: PUSH
30536: LD_VAR 0 7
30540: PPUSH
30541: LD_INT 1
30543: PPUSH
30544: LD_VAR 0 14
30548: PPUSH
30549: CALL_OW 2
30553: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30554: LD_VAR 0 14
30558: PPUSH
30559: LD_VAR 0 9
30563: PPUSH
30564: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30568: LD_VAR 0 9
30572: PPUSH
30573: CALL_OW 313
30577: PUSH
30578: LD_INT 6
30580: EQUAL
30581: PUSH
30582: LD_VAR 0 9
30586: PPUSH
30587: CALL_OW 266
30591: PUSH
30592: LD_INT 32
30594: PUSH
30595: LD_INT 31
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: IN
30602: OR
30603: IFFALSE 30417
30605: GO 30414
30607: POP
30608: POP
// end else
30609: GO 30991
// for j = 1 to x do
30611: LD_ADDR_VAR 0 9
30615: PUSH
30616: DOUBLE
30617: LD_INT 1
30619: DEC
30620: ST_TO_ADDR
30621: LD_VAR 0 13
30625: PUSH
30626: FOR_TO
30627: IFFALSE 30989
// begin InitHc ;
30629: CALL_OW 19
// if not f then
30633: LD_VAR 0 12
30637: NOT
30638: IFFALSE 30727
// begin PrepareHuman ( false , i , skill ) ;
30640: LD_INT 0
30642: PPUSH
30643: LD_VAR 0 8
30647: PPUSH
30648: LD_VAR 0 4
30652: PPUSH
30653: CALL_OW 380
// un := CreateHuman ;
30657: LD_ADDR_VAR 0 14
30661: PUSH
30662: CALL_OW 44
30666: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30667: LD_ADDR_VAR 0 7
30671: PUSH
30672: LD_VAR 0 7
30676: PPUSH
30677: LD_INT 1
30679: PPUSH
30680: LD_VAR 0 14
30684: PPUSH
30685: CALL_OW 2
30689: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30690: LD_VAR 0 14
30694: PPUSH
30695: LD_VAR 0 1
30699: PPUSH
30700: CALL_OW 250
30704: PPUSH
30705: LD_VAR 0 1
30709: PPUSH
30710: CALL_OW 251
30714: PPUSH
30715: LD_INT 10
30717: PPUSH
30718: LD_INT 0
30720: PPUSH
30721: CALL_OW 50
// continue ;
30725: GO 30626
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30727: LD_VAR 0 12
30731: PUSH
30732: LD_INT 1
30734: ARRAY
30735: PPUSH
30736: CALL_OW 313
30740: PUSH
30741: LD_VAR 0 12
30745: PUSH
30746: LD_INT 1
30748: ARRAY
30749: PPUSH
30750: CALL_OW 266
30754: PUSH
30755: LD_INT 32
30757: PUSH
30758: LD_INT 31
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: IN
30765: AND
30766: PUSH
30767: LD_VAR 0 12
30771: PUSH
30772: LD_INT 1
30774: ARRAY
30775: PPUSH
30776: CALL_OW 313
30780: PUSH
30781: LD_INT 6
30783: EQUAL
30784: OR
30785: IFFALSE 30805
// f := Delete ( f , 1 ) ;
30787: LD_ADDR_VAR 0 12
30791: PUSH
30792: LD_VAR 0 12
30796: PPUSH
30797: LD_INT 1
30799: PPUSH
30800: CALL_OW 3
30804: ST_TO_ADDR
// if not f then
30805: LD_VAR 0 12
30809: NOT
30810: IFFALSE 30828
// begin x := x + 2 ;
30812: LD_ADDR_VAR 0 13
30816: PUSH
30817: LD_VAR 0 13
30821: PUSH
30822: LD_INT 2
30824: PLUS
30825: ST_TO_ADDR
// continue ;
30826: GO 30626
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30828: LD_VAR 0 12
30832: PUSH
30833: LD_INT 1
30835: ARRAY
30836: PPUSH
30837: CALL_OW 266
30841: PUSH
30842: LD_INT 5
30844: EQUAL
30845: IFFALSE 30919
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30847: LD_VAR 0 12
30851: PUSH
30852: LD_INT 1
30854: ARRAY
30855: PPUSH
30856: CALL_OW 313
30860: PUSH
30861: LD_INT 3
30863: LESS
30864: IFFALSE 30900
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30866: LD_INT 0
30868: PPUSH
30869: LD_INT 5
30871: PUSH
30872: LD_INT 8
30874: PUSH
30875: LD_INT 9
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: LIST
30882: PUSH
30883: LD_VAR 0 17
30887: ARRAY
30888: PPUSH
30889: LD_VAR 0 4
30893: PPUSH
30894: CALL_OW 380
30898: GO 30917
// PrepareHuman ( false , i , skill ) ;
30900: LD_INT 0
30902: PPUSH
30903: LD_VAR 0 8
30907: PPUSH
30908: LD_VAR 0 4
30912: PPUSH
30913: CALL_OW 380
// end else
30917: GO 30936
// PrepareHuman ( false , i , skill ) ;
30919: LD_INT 0
30921: PPUSH
30922: LD_VAR 0 8
30926: PPUSH
30927: LD_VAR 0 4
30931: PPUSH
30932: CALL_OW 380
// un := CreateHuman ;
30936: LD_ADDR_VAR 0 14
30940: PUSH
30941: CALL_OW 44
30945: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30946: LD_ADDR_VAR 0 7
30950: PUSH
30951: LD_VAR 0 7
30955: PPUSH
30956: LD_INT 1
30958: PPUSH
30959: LD_VAR 0 14
30963: PPUSH
30964: CALL_OW 2
30968: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30969: LD_VAR 0 14
30973: PPUSH
30974: LD_VAR 0 12
30978: PUSH
30979: LD_INT 1
30981: ARRAY
30982: PPUSH
30983: CALL_OW 52
// end ;
30987: GO 30626
30989: POP
30990: POP
// end ;
30991: GO 29928
30993: POP
30994: POP
// result := result ^ buildings ;
30995: LD_ADDR_VAR 0 7
30999: PUSH
31000: LD_VAR 0 7
31004: PUSH
31005: LD_VAR 0 18
31009: ADD
31010: ST_TO_ADDR
// end else
31011: GO 31154
// begin for i = 1 to personel do
31013: LD_ADDR_VAR 0 8
31017: PUSH
31018: DOUBLE
31019: LD_INT 1
31021: DEC
31022: ST_TO_ADDR
31023: LD_VAR 0 6
31027: PUSH
31028: FOR_TO
31029: IFFALSE 31152
// begin if i > 4 then
31031: LD_VAR 0 8
31035: PUSH
31036: LD_INT 4
31038: GREATER
31039: IFFALSE 31043
// break ;
31041: GO 31152
// x := personel [ i ] ;
31043: LD_ADDR_VAR 0 13
31047: PUSH
31048: LD_VAR 0 6
31052: PUSH
31053: LD_VAR 0 8
31057: ARRAY
31058: ST_TO_ADDR
// if x = - 1 then
31059: LD_VAR 0 13
31063: PUSH
31064: LD_INT 1
31066: NEG
31067: EQUAL
31068: IFFALSE 31072
// continue ;
31070: GO 31028
// PrepareHuman ( false , i , skill ) ;
31072: LD_INT 0
31074: PPUSH
31075: LD_VAR 0 8
31079: PPUSH
31080: LD_VAR 0 4
31084: PPUSH
31085: CALL_OW 380
// un := CreateHuman ;
31089: LD_ADDR_VAR 0 14
31093: PUSH
31094: CALL_OW 44
31098: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31099: LD_VAR 0 14
31103: PPUSH
31104: LD_VAR 0 1
31108: PPUSH
31109: CALL_OW 250
31113: PPUSH
31114: LD_VAR 0 1
31118: PPUSH
31119: CALL_OW 251
31123: PPUSH
31124: LD_INT 10
31126: PPUSH
31127: LD_INT 0
31129: PPUSH
31130: CALL_OW 50
// result := result ^ un ;
31134: LD_ADDR_VAR 0 7
31138: PUSH
31139: LD_VAR 0 7
31143: PUSH
31144: LD_VAR 0 14
31148: ADD
31149: ST_TO_ADDR
// end ;
31150: GO 31028
31152: POP
31153: POP
// end ; end ;
31154: LD_VAR 0 7
31158: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31159: LD_INT 0
31161: PPUSH
31162: PPUSH
31163: PPUSH
31164: PPUSH
31165: PPUSH
31166: PPUSH
31167: PPUSH
31168: PPUSH
31169: PPUSH
31170: PPUSH
31171: PPUSH
31172: PPUSH
31173: PPUSH
31174: PPUSH
31175: PPUSH
31176: PPUSH
// result := false ;
31177: LD_ADDR_VAR 0 3
31181: PUSH
31182: LD_INT 0
31184: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31185: LD_VAR 0 1
31189: NOT
31190: PUSH
31191: LD_VAR 0 1
31195: PPUSH
31196: CALL_OW 266
31200: PUSH
31201: LD_INT 32
31203: PUSH
31204: LD_INT 33
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: IN
31211: NOT
31212: OR
31213: IFFALSE 31217
// exit ;
31215: GO 32326
// nat := GetNation ( tower ) ;
31217: LD_ADDR_VAR 0 12
31221: PUSH
31222: LD_VAR 0 1
31226: PPUSH
31227: CALL_OW 248
31231: ST_TO_ADDR
// side := GetSide ( tower ) ;
31232: LD_ADDR_VAR 0 16
31236: PUSH
31237: LD_VAR 0 1
31241: PPUSH
31242: CALL_OW 255
31246: ST_TO_ADDR
// x := GetX ( tower ) ;
31247: LD_ADDR_VAR 0 10
31251: PUSH
31252: LD_VAR 0 1
31256: PPUSH
31257: CALL_OW 250
31261: ST_TO_ADDR
// y := GetY ( tower ) ;
31262: LD_ADDR_VAR 0 11
31266: PUSH
31267: LD_VAR 0 1
31271: PPUSH
31272: CALL_OW 251
31276: ST_TO_ADDR
// if not x or not y then
31277: LD_VAR 0 10
31281: NOT
31282: PUSH
31283: LD_VAR 0 11
31287: NOT
31288: OR
31289: IFFALSE 31293
// exit ;
31291: GO 32326
// weapon := 0 ;
31293: LD_ADDR_VAR 0 18
31297: PUSH
31298: LD_INT 0
31300: ST_TO_ADDR
// fac_list := [ ] ;
31301: LD_ADDR_VAR 0 17
31305: PUSH
31306: EMPTY
31307: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31308: LD_ADDR_VAR 0 6
31312: PUSH
31313: LD_VAR 0 1
31317: PPUSH
31318: CALL_OW 274
31322: PPUSH
31323: LD_VAR 0 2
31327: PPUSH
31328: LD_INT 0
31330: PPUSH
31331: CALL 28897 0 3
31335: PPUSH
31336: LD_INT 30
31338: PUSH
31339: LD_INT 3
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PPUSH
31346: CALL_OW 72
31350: ST_TO_ADDR
// if not factories then
31351: LD_VAR 0 6
31355: NOT
31356: IFFALSE 31360
// exit ;
31358: GO 32326
// for i in factories do
31360: LD_ADDR_VAR 0 8
31364: PUSH
31365: LD_VAR 0 6
31369: PUSH
31370: FOR_IN
31371: IFFALSE 31396
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31373: LD_ADDR_VAR 0 17
31377: PUSH
31378: LD_VAR 0 17
31382: PUSH
31383: LD_VAR 0 8
31387: PPUSH
31388: CALL_OW 478
31392: UNION
31393: ST_TO_ADDR
31394: GO 31370
31396: POP
31397: POP
// if not fac_list then
31398: LD_VAR 0 17
31402: NOT
31403: IFFALSE 31407
// exit ;
31405: GO 32326
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31407: LD_ADDR_VAR 0 5
31411: PUSH
31412: LD_INT 4
31414: PUSH
31415: LD_INT 5
31417: PUSH
31418: LD_INT 9
31420: PUSH
31421: LD_INT 10
31423: PUSH
31424: LD_INT 6
31426: PUSH
31427: LD_INT 7
31429: PUSH
31430: LD_INT 11
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 27
31444: PUSH
31445: LD_INT 28
31447: PUSH
31448: LD_INT 26
31450: PUSH
31451: LD_INT 30
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 43
31462: PUSH
31463: LD_INT 44
31465: PUSH
31466: LD_INT 46
31468: PUSH
31469: LD_INT 45
31471: PUSH
31472: LD_INT 47
31474: PUSH
31475: LD_INT 49
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: LIST
31490: PUSH
31491: LD_VAR 0 12
31495: ARRAY
31496: ST_TO_ADDR
// list := list isect fac_list ;
31497: LD_ADDR_VAR 0 5
31501: PUSH
31502: LD_VAR 0 5
31506: PUSH
31507: LD_VAR 0 17
31511: ISECT
31512: ST_TO_ADDR
// if not list then
31513: LD_VAR 0 5
31517: NOT
31518: IFFALSE 31522
// exit ;
31520: GO 32326
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31522: LD_VAR 0 12
31526: PUSH
31527: LD_INT 3
31529: EQUAL
31530: PUSH
31531: LD_INT 49
31533: PUSH
31534: LD_VAR 0 5
31538: IN
31539: AND
31540: PUSH
31541: LD_INT 31
31543: PPUSH
31544: LD_VAR 0 16
31548: PPUSH
31549: CALL_OW 321
31553: PUSH
31554: LD_INT 2
31556: EQUAL
31557: AND
31558: IFFALSE 31618
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31560: LD_INT 22
31562: PUSH
31563: LD_VAR 0 16
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 35
31574: PUSH
31575: LD_INT 49
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 91
31584: PUSH
31585: LD_VAR 0 1
31589: PUSH
31590: LD_INT 10
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: LIST
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: LIST
31602: PPUSH
31603: CALL_OW 69
31607: NOT
31608: IFFALSE 31618
// weapon := ru_time_lapser ;
31610: LD_ADDR_VAR 0 18
31614: PUSH
31615: LD_INT 49
31617: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31618: LD_VAR 0 12
31622: PUSH
31623: LD_INT 1
31625: PUSH
31626: LD_INT 2
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: IN
31633: PUSH
31634: LD_INT 11
31636: PUSH
31637: LD_VAR 0 5
31641: IN
31642: PUSH
31643: LD_INT 30
31645: PUSH
31646: LD_VAR 0 5
31650: IN
31651: OR
31652: AND
31653: PUSH
31654: LD_INT 6
31656: PPUSH
31657: LD_VAR 0 16
31661: PPUSH
31662: CALL_OW 321
31666: PUSH
31667: LD_INT 2
31669: EQUAL
31670: AND
31671: IFFALSE 31836
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31673: LD_INT 22
31675: PUSH
31676: LD_VAR 0 16
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 2
31687: PUSH
31688: LD_INT 35
31690: PUSH
31691: LD_INT 11
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 35
31700: PUSH
31701: LD_INT 30
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: LIST
31712: PUSH
31713: LD_INT 91
31715: PUSH
31716: LD_VAR 0 1
31720: PUSH
31721: LD_INT 18
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: LIST
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: LIST
31733: PPUSH
31734: CALL_OW 69
31738: NOT
31739: PUSH
31740: LD_INT 22
31742: PUSH
31743: LD_VAR 0 16
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 2
31754: PUSH
31755: LD_INT 30
31757: PUSH
31758: LD_INT 32
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 30
31767: PUSH
31768: LD_INT 33
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 91
31782: PUSH
31783: LD_VAR 0 1
31787: PUSH
31788: LD_INT 12
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: LIST
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: LIST
31800: PUSH
31801: EMPTY
31802: LIST
31803: PPUSH
31804: CALL_OW 69
31808: PUSH
31809: LD_INT 2
31811: GREATER
31812: AND
31813: IFFALSE 31836
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31815: LD_ADDR_VAR 0 18
31819: PUSH
31820: LD_INT 11
31822: PUSH
31823: LD_INT 30
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_VAR 0 12
31834: ARRAY
31835: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31836: LD_VAR 0 18
31840: NOT
31841: PUSH
31842: LD_INT 40
31844: PPUSH
31845: LD_VAR 0 16
31849: PPUSH
31850: CALL_OW 321
31854: PUSH
31855: LD_INT 2
31857: EQUAL
31858: AND
31859: PUSH
31860: LD_INT 7
31862: PUSH
31863: LD_VAR 0 5
31867: IN
31868: PUSH
31869: LD_INT 28
31871: PUSH
31872: LD_VAR 0 5
31876: IN
31877: OR
31878: PUSH
31879: LD_INT 45
31881: PUSH
31882: LD_VAR 0 5
31886: IN
31887: OR
31888: AND
31889: IFFALSE 32143
// begin hex := GetHexInfo ( x , y ) ;
31891: LD_ADDR_VAR 0 4
31895: PUSH
31896: LD_VAR 0 10
31900: PPUSH
31901: LD_VAR 0 11
31905: PPUSH
31906: CALL_OW 546
31910: ST_TO_ADDR
// if hex [ 1 ] then
31911: LD_VAR 0 4
31915: PUSH
31916: LD_INT 1
31918: ARRAY
31919: IFFALSE 31923
// exit ;
31921: GO 32326
// height := hex [ 2 ] ;
31923: LD_ADDR_VAR 0 15
31927: PUSH
31928: LD_VAR 0 4
31932: PUSH
31933: LD_INT 2
31935: ARRAY
31936: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31937: LD_ADDR_VAR 0 14
31941: PUSH
31942: LD_INT 0
31944: PUSH
31945: LD_INT 2
31947: PUSH
31948: LD_INT 3
31950: PUSH
31951: LD_INT 5
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: ST_TO_ADDR
// for i in tmp do
31960: LD_ADDR_VAR 0 8
31964: PUSH
31965: LD_VAR 0 14
31969: PUSH
31970: FOR_IN
31971: IFFALSE 32141
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31973: LD_ADDR_VAR 0 9
31977: PUSH
31978: LD_VAR 0 10
31982: PPUSH
31983: LD_VAR 0 8
31987: PPUSH
31988: LD_INT 5
31990: PPUSH
31991: CALL_OW 272
31995: PUSH
31996: LD_VAR 0 11
32000: PPUSH
32001: LD_VAR 0 8
32005: PPUSH
32006: LD_INT 5
32008: PPUSH
32009: CALL_OW 273
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32018: LD_VAR 0 9
32022: PUSH
32023: LD_INT 1
32025: ARRAY
32026: PPUSH
32027: LD_VAR 0 9
32031: PUSH
32032: LD_INT 2
32034: ARRAY
32035: PPUSH
32036: CALL_OW 488
32040: IFFALSE 32139
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32042: LD_ADDR_VAR 0 4
32046: PUSH
32047: LD_VAR 0 9
32051: PUSH
32052: LD_INT 1
32054: ARRAY
32055: PPUSH
32056: LD_VAR 0 9
32060: PUSH
32061: LD_INT 2
32063: ARRAY
32064: PPUSH
32065: CALL_OW 546
32069: ST_TO_ADDR
// if hex [ 1 ] then
32070: LD_VAR 0 4
32074: PUSH
32075: LD_INT 1
32077: ARRAY
32078: IFFALSE 32082
// continue ;
32080: GO 31970
// h := hex [ 2 ] ;
32082: LD_ADDR_VAR 0 13
32086: PUSH
32087: LD_VAR 0 4
32091: PUSH
32092: LD_INT 2
32094: ARRAY
32095: ST_TO_ADDR
// if h + 7 < height then
32096: LD_VAR 0 13
32100: PUSH
32101: LD_INT 7
32103: PLUS
32104: PUSH
32105: LD_VAR 0 15
32109: LESS
32110: IFFALSE 32139
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32112: LD_ADDR_VAR 0 18
32116: PUSH
32117: LD_INT 7
32119: PUSH
32120: LD_INT 28
32122: PUSH
32123: LD_INT 45
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: LIST
32130: PUSH
32131: LD_VAR 0 12
32135: ARRAY
32136: ST_TO_ADDR
// break ;
32137: GO 32141
// end ; end ; end ;
32139: GO 31970
32141: POP
32142: POP
// end ; if not weapon then
32143: LD_VAR 0 18
32147: NOT
32148: IFFALSE 32208
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32150: LD_ADDR_VAR 0 5
32154: PUSH
32155: LD_VAR 0 5
32159: PUSH
32160: LD_INT 11
32162: PUSH
32163: LD_INT 30
32165: PUSH
32166: LD_INT 49
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: LIST
32173: DIFF
32174: ST_TO_ADDR
// if not list then
32175: LD_VAR 0 5
32179: NOT
32180: IFFALSE 32184
// exit ;
32182: GO 32326
// weapon := list [ rand ( 1 , list ) ] ;
32184: LD_ADDR_VAR 0 18
32188: PUSH
32189: LD_VAR 0 5
32193: PUSH
32194: LD_INT 1
32196: PPUSH
32197: LD_VAR 0 5
32201: PPUSH
32202: CALL_OW 12
32206: ARRAY
32207: ST_TO_ADDR
// end ; if weapon then
32208: LD_VAR 0 18
32212: IFFALSE 32326
// begin tmp := CostOfWeapon ( weapon ) ;
32214: LD_ADDR_VAR 0 14
32218: PUSH
32219: LD_VAR 0 18
32223: PPUSH
32224: CALL_OW 451
32228: ST_TO_ADDR
// j := GetBase ( tower ) ;
32229: LD_ADDR_VAR 0 9
32233: PUSH
32234: LD_VAR 0 1
32238: PPUSH
32239: CALL_OW 274
32243: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32244: LD_VAR 0 9
32248: PPUSH
32249: LD_INT 1
32251: PPUSH
32252: CALL_OW 275
32256: PUSH
32257: LD_VAR 0 14
32261: PUSH
32262: LD_INT 1
32264: ARRAY
32265: GREATEREQUAL
32266: PUSH
32267: LD_VAR 0 9
32271: PPUSH
32272: LD_INT 2
32274: PPUSH
32275: CALL_OW 275
32279: PUSH
32280: LD_VAR 0 14
32284: PUSH
32285: LD_INT 2
32287: ARRAY
32288: GREATEREQUAL
32289: AND
32290: PUSH
32291: LD_VAR 0 9
32295: PPUSH
32296: LD_INT 3
32298: PPUSH
32299: CALL_OW 275
32303: PUSH
32304: LD_VAR 0 14
32308: PUSH
32309: LD_INT 3
32311: ARRAY
32312: GREATEREQUAL
32313: AND
32314: IFFALSE 32326
// result := weapon ;
32316: LD_ADDR_VAR 0 3
32320: PUSH
32321: LD_VAR 0 18
32325: ST_TO_ADDR
// end ; end ;
32326: LD_VAR 0 3
32330: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32331: LD_INT 0
32333: PPUSH
32334: PPUSH
// result := true ;
32335: LD_ADDR_VAR 0 3
32339: PUSH
32340: LD_INT 1
32342: ST_TO_ADDR
// if array1 = array2 then
32343: LD_VAR 0 1
32347: PUSH
32348: LD_VAR 0 2
32352: EQUAL
32353: IFFALSE 32413
// begin for i = 1 to array1 do
32355: LD_ADDR_VAR 0 4
32359: PUSH
32360: DOUBLE
32361: LD_INT 1
32363: DEC
32364: ST_TO_ADDR
32365: LD_VAR 0 1
32369: PUSH
32370: FOR_TO
32371: IFFALSE 32409
// if array1 [ i ] <> array2 [ i ] then
32373: LD_VAR 0 1
32377: PUSH
32378: LD_VAR 0 4
32382: ARRAY
32383: PUSH
32384: LD_VAR 0 2
32388: PUSH
32389: LD_VAR 0 4
32393: ARRAY
32394: NONEQUAL
32395: IFFALSE 32407
// begin result := false ;
32397: LD_ADDR_VAR 0 3
32401: PUSH
32402: LD_INT 0
32404: ST_TO_ADDR
// break ;
32405: GO 32409
// end ;
32407: GO 32370
32409: POP
32410: POP
// end else
32411: GO 32421
// result := false ;
32413: LD_ADDR_VAR 0 3
32417: PUSH
32418: LD_INT 0
32420: ST_TO_ADDR
// end ;
32421: LD_VAR 0 3
32425: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32426: LD_INT 0
32428: PPUSH
32429: PPUSH
// if not array1 or not array2 then
32430: LD_VAR 0 1
32434: NOT
32435: PUSH
32436: LD_VAR 0 2
32440: NOT
32441: OR
32442: IFFALSE 32446
// exit ;
32444: GO 32510
// result := true ;
32446: LD_ADDR_VAR 0 3
32450: PUSH
32451: LD_INT 1
32453: ST_TO_ADDR
// for i = 1 to array1 do
32454: LD_ADDR_VAR 0 4
32458: PUSH
32459: DOUBLE
32460: LD_INT 1
32462: DEC
32463: ST_TO_ADDR
32464: LD_VAR 0 1
32468: PUSH
32469: FOR_TO
32470: IFFALSE 32508
// if array1 [ i ] <> array2 [ i ] then
32472: LD_VAR 0 1
32476: PUSH
32477: LD_VAR 0 4
32481: ARRAY
32482: PUSH
32483: LD_VAR 0 2
32487: PUSH
32488: LD_VAR 0 4
32492: ARRAY
32493: NONEQUAL
32494: IFFALSE 32506
// begin result := false ;
32496: LD_ADDR_VAR 0 3
32500: PUSH
32501: LD_INT 0
32503: ST_TO_ADDR
// break ;
32504: GO 32508
// end ;
32506: GO 32469
32508: POP
32509: POP
// end ;
32510: LD_VAR 0 3
32514: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32515: LD_INT 0
32517: PPUSH
32518: PPUSH
32519: PPUSH
// pom := GetBase ( fac ) ;
32520: LD_ADDR_VAR 0 5
32524: PUSH
32525: LD_VAR 0 1
32529: PPUSH
32530: CALL_OW 274
32534: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32535: LD_ADDR_VAR 0 4
32539: PUSH
32540: LD_VAR 0 2
32544: PUSH
32545: LD_INT 1
32547: ARRAY
32548: PPUSH
32549: LD_VAR 0 2
32553: PUSH
32554: LD_INT 2
32556: ARRAY
32557: PPUSH
32558: LD_VAR 0 2
32562: PUSH
32563: LD_INT 3
32565: ARRAY
32566: PPUSH
32567: LD_VAR 0 2
32571: PUSH
32572: LD_INT 4
32574: ARRAY
32575: PPUSH
32576: CALL_OW 449
32580: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32581: LD_ADDR_VAR 0 3
32585: PUSH
32586: LD_VAR 0 5
32590: PPUSH
32591: LD_INT 1
32593: PPUSH
32594: CALL_OW 275
32598: PUSH
32599: LD_VAR 0 4
32603: PUSH
32604: LD_INT 1
32606: ARRAY
32607: GREATEREQUAL
32608: PUSH
32609: LD_VAR 0 5
32613: PPUSH
32614: LD_INT 2
32616: PPUSH
32617: CALL_OW 275
32621: PUSH
32622: LD_VAR 0 4
32626: PUSH
32627: LD_INT 2
32629: ARRAY
32630: GREATEREQUAL
32631: AND
32632: PUSH
32633: LD_VAR 0 5
32637: PPUSH
32638: LD_INT 3
32640: PPUSH
32641: CALL_OW 275
32645: PUSH
32646: LD_VAR 0 4
32650: PUSH
32651: LD_INT 3
32653: ARRAY
32654: GREATEREQUAL
32655: AND
32656: ST_TO_ADDR
// end ;
32657: LD_VAR 0 3
32661: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32662: LD_INT 0
32664: PPUSH
32665: PPUSH
32666: PPUSH
32667: PPUSH
// pom := GetBase ( building ) ;
32668: LD_ADDR_VAR 0 3
32672: PUSH
32673: LD_VAR 0 1
32677: PPUSH
32678: CALL_OW 274
32682: ST_TO_ADDR
// if not pom then
32683: LD_VAR 0 3
32687: NOT
32688: IFFALSE 32692
// exit ;
32690: GO 32862
// btype := GetBType ( building ) ;
32692: LD_ADDR_VAR 0 5
32696: PUSH
32697: LD_VAR 0 1
32701: PPUSH
32702: CALL_OW 266
32706: ST_TO_ADDR
// if btype = b_armoury then
32707: LD_VAR 0 5
32711: PUSH
32712: LD_INT 4
32714: EQUAL
32715: IFFALSE 32725
// btype := b_barracks ;
32717: LD_ADDR_VAR 0 5
32721: PUSH
32722: LD_INT 5
32724: ST_TO_ADDR
// if btype = b_depot then
32725: LD_VAR 0 5
32729: PUSH
32730: LD_INT 0
32732: EQUAL
32733: IFFALSE 32743
// btype := b_warehouse ;
32735: LD_ADDR_VAR 0 5
32739: PUSH
32740: LD_INT 1
32742: ST_TO_ADDR
// if btype = b_workshop then
32743: LD_VAR 0 5
32747: PUSH
32748: LD_INT 2
32750: EQUAL
32751: IFFALSE 32761
// btype := b_factory ;
32753: LD_ADDR_VAR 0 5
32757: PUSH
32758: LD_INT 3
32760: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32761: LD_ADDR_VAR 0 4
32765: PUSH
32766: LD_VAR 0 5
32770: PPUSH
32771: LD_VAR 0 1
32775: PPUSH
32776: CALL_OW 248
32780: PPUSH
32781: CALL_OW 450
32785: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32786: LD_ADDR_VAR 0 2
32790: PUSH
32791: LD_VAR 0 3
32795: PPUSH
32796: LD_INT 1
32798: PPUSH
32799: CALL_OW 275
32803: PUSH
32804: LD_VAR 0 4
32808: PUSH
32809: LD_INT 1
32811: ARRAY
32812: GREATEREQUAL
32813: PUSH
32814: LD_VAR 0 3
32818: PPUSH
32819: LD_INT 2
32821: PPUSH
32822: CALL_OW 275
32826: PUSH
32827: LD_VAR 0 4
32831: PUSH
32832: LD_INT 2
32834: ARRAY
32835: GREATEREQUAL
32836: AND
32837: PUSH
32838: LD_VAR 0 3
32842: PPUSH
32843: LD_INT 3
32845: PPUSH
32846: CALL_OW 275
32850: PUSH
32851: LD_VAR 0 4
32855: PUSH
32856: LD_INT 3
32858: ARRAY
32859: GREATEREQUAL
32860: AND
32861: ST_TO_ADDR
// end ;
32862: LD_VAR 0 2
32866: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32867: LD_INT 0
32869: PPUSH
32870: PPUSH
32871: PPUSH
// pom := GetBase ( building ) ;
32872: LD_ADDR_VAR 0 4
32876: PUSH
32877: LD_VAR 0 1
32881: PPUSH
32882: CALL_OW 274
32886: ST_TO_ADDR
// if not pom then
32887: LD_VAR 0 4
32891: NOT
32892: IFFALSE 32896
// exit ;
32894: GO 32997
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32896: LD_ADDR_VAR 0 5
32900: PUSH
32901: LD_VAR 0 2
32905: PPUSH
32906: LD_VAR 0 1
32910: PPUSH
32911: CALL_OW 248
32915: PPUSH
32916: CALL_OW 450
32920: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32921: LD_ADDR_VAR 0 3
32925: PUSH
32926: LD_VAR 0 4
32930: PPUSH
32931: LD_INT 1
32933: PPUSH
32934: CALL_OW 275
32938: PUSH
32939: LD_VAR 0 5
32943: PUSH
32944: LD_INT 1
32946: ARRAY
32947: GREATEREQUAL
32948: PUSH
32949: LD_VAR 0 4
32953: PPUSH
32954: LD_INT 2
32956: PPUSH
32957: CALL_OW 275
32961: PUSH
32962: LD_VAR 0 5
32966: PUSH
32967: LD_INT 2
32969: ARRAY
32970: GREATEREQUAL
32971: AND
32972: PUSH
32973: LD_VAR 0 4
32977: PPUSH
32978: LD_INT 3
32980: PPUSH
32981: CALL_OW 275
32985: PUSH
32986: LD_VAR 0 5
32990: PUSH
32991: LD_INT 3
32993: ARRAY
32994: GREATEREQUAL
32995: AND
32996: ST_TO_ADDR
// end ;
32997: LD_VAR 0 3
33001: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33002: LD_INT 0
33004: PPUSH
33005: PPUSH
33006: PPUSH
33007: PPUSH
33008: PPUSH
33009: PPUSH
33010: PPUSH
33011: PPUSH
33012: PPUSH
33013: PPUSH
33014: PPUSH
// result := false ;
33015: LD_ADDR_VAR 0 8
33019: PUSH
33020: LD_INT 0
33022: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33023: LD_VAR 0 5
33027: NOT
33028: PUSH
33029: LD_VAR 0 1
33033: NOT
33034: OR
33035: PUSH
33036: LD_VAR 0 2
33040: NOT
33041: OR
33042: PUSH
33043: LD_VAR 0 3
33047: NOT
33048: OR
33049: IFFALSE 33053
// exit ;
33051: GO 33867
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33053: LD_ADDR_VAR 0 14
33057: PUSH
33058: LD_VAR 0 1
33062: PPUSH
33063: LD_VAR 0 2
33067: PPUSH
33068: LD_VAR 0 3
33072: PPUSH
33073: LD_VAR 0 4
33077: PPUSH
33078: LD_VAR 0 5
33082: PUSH
33083: LD_INT 1
33085: ARRAY
33086: PPUSH
33087: CALL_OW 248
33091: PPUSH
33092: LD_INT 0
33094: PPUSH
33095: CALL 35104 0 6
33099: ST_TO_ADDR
// if not hexes then
33100: LD_VAR 0 14
33104: NOT
33105: IFFALSE 33109
// exit ;
33107: GO 33867
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33109: LD_ADDR_VAR 0 17
33113: PUSH
33114: LD_VAR 0 5
33118: PPUSH
33119: LD_INT 22
33121: PUSH
33122: LD_VAR 0 13
33126: PPUSH
33127: CALL_OW 255
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 2
33138: PUSH
33139: LD_INT 30
33141: PUSH
33142: LD_INT 0
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 30
33151: PUSH
33152: LD_INT 1
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: LIST
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PPUSH
33168: CALL_OW 72
33172: ST_TO_ADDR
// for i = 1 to hexes do
33173: LD_ADDR_VAR 0 9
33177: PUSH
33178: DOUBLE
33179: LD_INT 1
33181: DEC
33182: ST_TO_ADDR
33183: LD_VAR 0 14
33187: PUSH
33188: FOR_TO
33189: IFFALSE 33865
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33191: LD_ADDR_VAR 0 13
33195: PUSH
33196: LD_VAR 0 14
33200: PUSH
33201: LD_VAR 0 9
33205: ARRAY
33206: PUSH
33207: LD_INT 1
33209: ARRAY
33210: PPUSH
33211: LD_VAR 0 14
33215: PUSH
33216: LD_VAR 0 9
33220: ARRAY
33221: PUSH
33222: LD_INT 2
33224: ARRAY
33225: PPUSH
33226: CALL_OW 428
33230: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33231: LD_VAR 0 14
33235: PUSH
33236: LD_VAR 0 9
33240: ARRAY
33241: PUSH
33242: LD_INT 1
33244: ARRAY
33245: PPUSH
33246: LD_VAR 0 14
33250: PUSH
33251: LD_VAR 0 9
33255: ARRAY
33256: PUSH
33257: LD_INT 2
33259: ARRAY
33260: PPUSH
33261: CALL_OW 351
33265: PUSH
33266: LD_VAR 0 14
33270: PUSH
33271: LD_VAR 0 9
33275: ARRAY
33276: PUSH
33277: LD_INT 1
33279: ARRAY
33280: PPUSH
33281: LD_VAR 0 14
33285: PUSH
33286: LD_VAR 0 9
33290: ARRAY
33291: PUSH
33292: LD_INT 2
33294: ARRAY
33295: PPUSH
33296: CALL_OW 488
33300: NOT
33301: OR
33302: PUSH
33303: LD_VAR 0 13
33307: PPUSH
33308: CALL_OW 247
33312: PUSH
33313: LD_INT 3
33315: EQUAL
33316: OR
33317: IFFALSE 33323
// exit ;
33319: POP
33320: POP
33321: GO 33867
// if not tmp then
33323: LD_VAR 0 13
33327: NOT
33328: IFFALSE 33332
// continue ;
33330: GO 33188
// result := true ;
33332: LD_ADDR_VAR 0 8
33336: PUSH
33337: LD_INT 1
33339: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33340: LD_VAR 0 6
33344: PUSH
33345: LD_VAR 0 13
33349: PPUSH
33350: CALL_OW 247
33354: PUSH
33355: LD_INT 2
33357: EQUAL
33358: AND
33359: PUSH
33360: LD_VAR 0 13
33364: PPUSH
33365: CALL_OW 263
33369: PUSH
33370: LD_INT 1
33372: EQUAL
33373: AND
33374: IFFALSE 33538
// begin if IsDrivenBy ( tmp ) then
33376: LD_VAR 0 13
33380: PPUSH
33381: CALL_OW 311
33385: IFFALSE 33389
// continue ;
33387: GO 33188
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33389: LD_VAR 0 6
33393: PPUSH
33394: LD_INT 3
33396: PUSH
33397: LD_INT 60
33399: PUSH
33400: EMPTY
33401: LIST
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 3
33409: PUSH
33410: LD_INT 55
33412: PUSH
33413: EMPTY
33414: LIST
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PPUSH
33424: CALL_OW 72
33428: IFFALSE 33536
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33430: LD_ADDR_VAR 0 18
33434: PUSH
33435: LD_VAR 0 6
33439: PPUSH
33440: LD_INT 3
33442: PUSH
33443: LD_INT 60
33445: PUSH
33446: EMPTY
33447: LIST
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 3
33455: PUSH
33456: LD_INT 55
33458: PUSH
33459: EMPTY
33460: LIST
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PPUSH
33470: CALL_OW 72
33474: PUSH
33475: LD_INT 1
33477: ARRAY
33478: ST_TO_ADDR
// if IsInUnit ( driver ) then
33479: LD_VAR 0 18
33483: PPUSH
33484: CALL_OW 310
33488: IFFALSE 33499
// ComExit ( driver ) ;
33490: LD_VAR 0 18
33494: PPUSH
33495: CALL 58288 0 1
// AddComEnterUnit ( driver , tmp ) ;
33499: LD_VAR 0 18
33503: PPUSH
33504: LD_VAR 0 13
33508: PPUSH
33509: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33513: LD_VAR 0 18
33517: PPUSH
33518: LD_VAR 0 7
33522: PPUSH
33523: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33527: LD_VAR 0 18
33531: PPUSH
33532: CALL_OW 181
// end ; continue ;
33536: GO 33188
// end ; if not cleaners or not tmp in cleaners then
33538: LD_VAR 0 6
33542: NOT
33543: PUSH
33544: LD_VAR 0 13
33548: PUSH
33549: LD_VAR 0 6
33553: IN
33554: NOT
33555: OR
33556: IFFALSE 33863
// begin if dep then
33558: LD_VAR 0 17
33562: IFFALSE 33698
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33564: LD_ADDR_VAR 0 16
33568: PUSH
33569: LD_VAR 0 17
33573: PUSH
33574: LD_INT 1
33576: ARRAY
33577: PPUSH
33578: CALL_OW 250
33582: PPUSH
33583: LD_VAR 0 17
33587: PUSH
33588: LD_INT 1
33590: ARRAY
33591: PPUSH
33592: CALL_OW 254
33596: PPUSH
33597: LD_INT 5
33599: PPUSH
33600: CALL_OW 272
33604: PUSH
33605: LD_VAR 0 17
33609: PUSH
33610: LD_INT 1
33612: ARRAY
33613: PPUSH
33614: CALL_OW 251
33618: PPUSH
33619: LD_VAR 0 17
33623: PUSH
33624: LD_INT 1
33626: ARRAY
33627: PPUSH
33628: CALL_OW 254
33632: PPUSH
33633: LD_INT 5
33635: PPUSH
33636: CALL_OW 273
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33645: LD_VAR 0 16
33649: PUSH
33650: LD_INT 1
33652: ARRAY
33653: PPUSH
33654: LD_VAR 0 16
33658: PUSH
33659: LD_INT 2
33661: ARRAY
33662: PPUSH
33663: CALL_OW 488
33667: IFFALSE 33698
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33669: LD_VAR 0 13
33673: PPUSH
33674: LD_VAR 0 16
33678: PUSH
33679: LD_INT 1
33681: ARRAY
33682: PPUSH
33683: LD_VAR 0 16
33687: PUSH
33688: LD_INT 2
33690: ARRAY
33691: PPUSH
33692: CALL_OW 111
// continue ;
33696: GO 33188
// end ; end ; r := GetDir ( tmp ) ;
33698: LD_ADDR_VAR 0 15
33702: PUSH
33703: LD_VAR 0 13
33707: PPUSH
33708: CALL_OW 254
33712: ST_TO_ADDR
// if r = 5 then
33713: LD_VAR 0 15
33717: PUSH
33718: LD_INT 5
33720: EQUAL
33721: IFFALSE 33731
// r := 0 ;
33723: LD_ADDR_VAR 0 15
33727: PUSH
33728: LD_INT 0
33730: ST_TO_ADDR
// for j = r to 5 do
33731: LD_ADDR_VAR 0 10
33735: PUSH
33736: DOUBLE
33737: LD_VAR 0 15
33741: DEC
33742: ST_TO_ADDR
33743: LD_INT 5
33745: PUSH
33746: FOR_TO
33747: IFFALSE 33861
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33749: LD_ADDR_VAR 0 11
33753: PUSH
33754: LD_VAR 0 13
33758: PPUSH
33759: CALL_OW 250
33763: PPUSH
33764: LD_VAR 0 10
33768: PPUSH
33769: LD_INT 2
33771: PPUSH
33772: CALL_OW 272
33776: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33777: LD_ADDR_VAR 0 12
33781: PUSH
33782: LD_VAR 0 13
33786: PPUSH
33787: CALL_OW 251
33791: PPUSH
33792: LD_VAR 0 10
33796: PPUSH
33797: LD_INT 2
33799: PPUSH
33800: CALL_OW 273
33804: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33805: LD_VAR 0 11
33809: PPUSH
33810: LD_VAR 0 12
33814: PPUSH
33815: CALL_OW 488
33819: PUSH
33820: LD_VAR 0 11
33824: PPUSH
33825: LD_VAR 0 12
33829: PPUSH
33830: CALL_OW 428
33834: NOT
33835: AND
33836: IFFALSE 33859
// begin ComMoveXY ( tmp , _x , _y ) ;
33838: LD_VAR 0 13
33842: PPUSH
33843: LD_VAR 0 11
33847: PPUSH
33848: LD_VAR 0 12
33852: PPUSH
33853: CALL_OW 111
// break ;
33857: GO 33861
// end ; end ;
33859: GO 33746
33861: POP
33862: POP
// end ; end ;
33863: GO 33188
33865: POP
33866: POP
// end ;
33867: LD_VAR 0 8
33871: RET
// export function BuildingTechInvented ( side , btype ) ; begin
33872: LD_INT 0
33874: PPUSH
// result := true ;
33875: LD_ADDR_VAR 0 3
33879: PUSH
33880: LD_INT 1
33882: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
33883: LD_VAR 0 2
33887: PUSH
33888: LD_INT 24
33890: DOUBLE
33891: EQUAL
33892: IFTRUE 33902
33894: LD_INT 33
33896: DOUBLE
33897: EQUAL
33898: IFTRUE 33902
33900: GO 33927
33902: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
33903: LD_ADDR_VAR 0 3
33907: PUSH
33908: LD_INT 32
33910: PPUSH
33911: LD_VAR 0 1
33915: PPUSH
33916: CALL_OW 321
33920: PUSH
33921: LD_INT 2
33923: EQUAL
33924: ST_TO_ADDR
33925: GO 34247
33927: LD_INT 20
33929: DOUBLE
33930: EQUAL
33931: IFTRUE 33935
33933: GO 33960
33935: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
33936: LD_ADDR_VAR 0 3
33940: PUSH
33941: LD_INT 6
33943: PPUSH
33944: LD_VAR 0 1
33948: PPUSH
33949: CALL_OW 321
33953: PUSH
33954: LD_INT 2
33956: EQUAL
33957: ST_TO_ADDR
33958: GO 34247
33960: LD_INT 22
33962: DOUBLE
33963: EQUAL
33964: IFTRUE 33974
33966: LD_INT 36
33968: DOUBLE
33969: EQUAL
33970: IFTRUE 33974
33972: GO 33999
33974: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
33975: LD_ADDR_VAR 0 3
33979: PUSH
33980: LD_INT 15
33982: PPUSH
33983: LD_VAR 0 1
33987: PPUSH
33988: CALL_OW 321
33992: PUSH
33993: LD_INT 2
33995: EQUAL
33996: ST_TO_ADDR
33997: GO 34247
33999: LD_INT 30
34001: DOUBLE
34002: EQUAL
34003: IFTRUE 34007
34005: GO 34032
34007: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34008: LD_ADDR_VAR 0 3
34012: PUSH
34013: LD_INT 20
34015: PPUSH
34016: LD_VAR 0 1
34020: PPUSH
34021: CALL_OW 321
34025: PUSH
34026: LD_INT 2
34028: EQUAL
34029: ST_TO_ADDR
34030: GO 34247
34032: LD_INT 28
34034: DOUBLE
34035: EQUAL
34036: IFTRUE 34046
34038: LD_INT 21
34040: DOUBLE
34041: EQUAL
34042: IFTRUE 34046
34044: GO 34071
34046: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34047: LD_ADDR_VAR 0 3
34051: PUSH
34052: LD_INT 21
34054: PPUSH
34055: LD_VAR 0 1
34059: PPUSH
34060: CALL_OW 321
34064: PUSH
34065: LD_INT 2
34067: EQUAL
34068: ST_TO_ADDR
34069: GO 34247
34071: LD_INT 16
34073: DOUBLE
34074: EQUAL
34075: IFTRUE 34079
34077: GO 34106
34079: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34080: LD_ADDR_VAR 0 3
34084: PUSH
34085: LD_EXP 88
34089: PPUSH
34090: LD_VAR 0 1
34094: PPUSH
34095: CALL_OW 321
34099: PUSH
34100: LD_INT 2
34102: EQUAL
34103: ST_TO_ADDR
34104: GO 34247
34106: LD_INT 19
34108: DOUBLE
34109: EQUAL
34110: IFTRUE 34120
34112: LD_INT 23
34114: DOUBLE
34115: EQUAL
34116: IFTRUE 34120
34118: GO 34147
34120: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34121: LD_ADDR_VAR 0 3
34125: PUSH
34126: LD_EXP 87
34130: PPUSH
34131: LD_VAR 0 1
34135: PPUSH
34136: CALL_OW 321
34140: PUSH
34141: LD_INT 2
34143: EQUAL
34144: ST_TO_ADDR
34145: GO 34247
34147: LD_INT 17
34149: DOUBLE
34150: EQUAL
34151: IFTRUE 34155
34153: GO 34180
34155: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34156: LD_ADDR_VAR 0 3
34160: PUSH
34161: LD_INT 39
34163: PPUSH
34164: LD_VAR 0 1
34168: PPUSH
34169: CALL_OW 321
34173: PUSH
34174: LD_INT 2
34176: EQUAL
34177: ST_TO_ADDR
34178: GO 34247
34180: LD_INT 18
34182: DOUBLE
34183: EQUAL
34184: IFTRUE 34188
34186: GO 34213
34188: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34189: LD_ADDR_VAR 0 3
34193: PUSH
34194: LD_INT 40
34196: PPUSH
34197: LD_VAR 0 1
34201: PPUSH
34202: CALL_OW 321
34206: PUSH
34207: LD_INT 2
34209: EQUAL
34210: ST_TO_ADDR
34211: GO 34247
34213: LD_INT 27
34215: DOUBLE
34216: EQUAL
34217: IFTRUE 34221
34219: GO 34246
34221: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34222: LD_ADDR_VAR 0 3
34226: PUSH
34227: LD_INT 35
34229: PPUSH
34230: LD_VAR 0 1
34234: PPUSH
34235: CALL_OW 321
34239: PUSH
34240: LD_INT 2
34242: EQUAL
34243: ST_TO_ADDR
34244: GO 34247
34246: POP
// end ;
34247: LD_VAR 0 3
34251: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34252: LD_INT 0
34254: PPUSH
34255: PPUSH
34256: PPUSH
34257: PPUSH
34258: PPUSH
34259: PPUSH
34260: PPUSH
34261: PPUSH
34262: PPUSH
34263: PPUSH
34264: PPUSH
// result := false ;
34265: LD_ADDR_VAR 0 6
34269: PUSH
34270: LD_INT 0
34272: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34273: LD_VAR 0 1
34277: NOT
34278: PUSH
34279: LD_VAR 0 1
34283: PPUSH
34284: CALL_OW 266
34288: PUSH
34289: LD_INT 0
34291: PUSH
34292: LD_INT 1
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: IN
34299: NOT
34300: OR
34301: PUSH
34302: LD_VAR 0 2
34306: NOT
34307: OR
34308: PUSH
34309: LD_VAR 0 5
34313: PUSH
34314: LD_INT 0
34316: PUSH
34317: LD_INT 1
34319: PUSH
34320: LD_INT 2
34322: PUSH
34323: LD_INT 3
34325: PUSH
34326: LD_INT 4
34328: PUSH
34329: LD_INT 5
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: IN
34340: NOT
34341: OR
34342: PUSH
34343: LD_VAR 0 3
34347: PPUSH
34348: LD_VAR 0 4
34352: PPUSH
34353: CALL_OW 488
34357: NOT
34358: OR
34359: IFFALSE 34363
// exit ;
34361: GO 35099
// side := GetSide ( depot ) ;
34363: LD_ADDR_VAR 0 9
34367: PUSH
34368: LD_VAR 0 1
34372: PPUSH
34373: CALL_OW 255
34377: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34378: LD_VAR 0 9
34382: PPUSH
34383: LD_VAR 0 2
34387: PPUSH
34388: CALL 33872 0 2
34392: NOT
34393: IFFALSE 34397
// exit ;
34395: GO 35099
// pom := GetBase ( depot ) ;
34397: LD_ADDR_VAR 0 10
34401: PUSH
34402: LD_VAR 0 1
34406: PPUSH
34407: CALL_OW 274
34411: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34412: LD_ADDR_VAR 0 11
34416: PUSH
34417: LD_VAR 0 2
34421: PPUSH
34422: LD_VAR 0 1
34426: PPUSH
34427: CALL_OW 248
34431: PPUSH
34432: CALL_OW 450
34436: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34437: LD_VAR 0 10
34441: PPUSH
34442: LD_INT 1
34444: PPUSH
34445: CALL_OW 275
34449: PUSH
34450: LD_VAR 0 11
34454: PUSH
34455: LD_INT 1
34457: ARRAY
34458: GREATEREQUAL
34459: PUSH
34460: LD_VAR 0 10
34464: PPUSH
34465: LD_INT 2
34467: PPUSH
34468: CALL_OW 275
34472: PUSH
34473: LD_VAR 0 11
34477: PUSH
34478: LD_INT 2
34480: ARRAY
34481: GREATEREQUAL
34482: AND
34483: PUSH
34484: LD_VAR 0 10
34488: PPUSH
34489: LD_INT 3
34491: PPUSH
34492: CALL_OW 275
34496: PUSH
34497: LD_VAR 0 11
34501: PUSH
34502: LD_INT 3
34504: ARRAY
34505: GREATEREQUAL
34506: AND
34507: NOT
34508: IFFALSE 34512
// exit ;
34510: GO 35099
// if GetBType ( depot ) = b_depot then
34512: LD_VAR 0 1
34516: PPUSH
34517: CALL_OW 266
34521: PUSH
34522: LD_INT 0
34524: EQUAL
34525: IFFALSE 34537
// dist := 28 else
34527: LD_ADDR_VAR 0 14
34531: PUSH
34532: LD_INT 28
34534: ST_TO_ADDR
34535: GO 34545
// dist := 36 ;
34537: LD_ADDR_VAR 0 14
34541: PUSH
34542: LD_INT 36
34544: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34545: LD_VAR 0 1
34549: PPUSH
34550: LD_VAR 0 3
34554: PPUSH
34555: LD_VAR 0 4
34559: PPUSH
34560: CALL_OW 297
34564: PUSH
34565: LD_VAR 0 14
34569: GREATER
34570: IFFALSE 34574
// exit ;
34572: GO 35099
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34574: LD_ADDR_VAR 0 12
34578: PUSH
34579: LD_VAR 0 2
34583: PPUSH
34584: LD_VAR 0 3
34588: PPUSH
34589: LD_VAR 0 4
34593: PPUSH
34594: LD_VAR 0 5
34598: PPUSH
34599: LD_VAR 0 1
34603: PPUSH
34604: CALL_OW 248
34608: PPUSH
34609: LD_INT 0
34611: PPUSH
34612: CALL 35104 0 6
34616: ST_TO_ADDR
// if not hexes then
34617: LD_VAR 0 12
34621: NOT
34622: IFFALSE 34626
// exit ;
34624: GO 35099
// hex := GetHexInfo ( x , y ) ;
34626: LD_ADDR_VAR 0 15
34630: PUSH
34631: LD_VAR 0 3
34635: PPUSH
34636: LD_VAR 0 4
34640: PPUSH
34641: CALL_OW 546
34645: ST_TO_ADDR
// if hex [ 1 ] then
34646: LD_VAR 0 15
34650: PUSH
34651: LD_INT 1
34653: ARRAY
34654: IFFALSE 34658
// exit ;
34656: GO 35099
// height := hex [ 2 ] ;
34658: LD_ADDR_VAR 0 13
34662: PUSH
34663: LD_VAR 0 15
34667: PUSH
34668: LD_INT 2
34670: ARRAY
34671: ST_TO_ADDR
// for i = 1 to hexes do
34672: LD_ADDR_VAR 0 7
34676: PUSH
34677: DOUBLE
34678: LD_INT 1
34680: DEC
34681: ST_TO_ADDR
34682: LD_VAR 0 12
34686: PUSH
34687: FOR_TO
34688: IFFALSE 35018
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34690: LD_VAR 0 12
34694: PUSH
34695: LD_VAR 0 7
34699: ARRAY
34700: PUSH
34701: LD_INT 1
34703: ARRAY
34704: PPUSH
34705: LD_VAR 0 12
34709: PUSH
34710: LD_VAR 0 7
34714: ARRAY
34715: PUSH
34716: LD_INT 2
34718: ARRAY
34719: PPUSH
34720: CALL_OW 488
34724: NOT
34725: PUSH
34726: LD_VAR 0 12
34730: PUSH
34731: LD_VAR 0 7
34735: ARRAY
34736: PUSH
34737: LD_INT 1
34739: ARRAY
34740: PPUSH
34741: LD_VAR 0 12
34745: PUSH
34746: LD_VAR 0 7
34750: ARRAY
34751: PUSH
34752: LD_INT 2
34754: ARRAY
34755: PPUSH
34756: CALL_OW 428
34760: PUSH
34761: LD_INT 0
34763: GREATER
34764: OR
34765: PUSH
34766: LD_VAR 0 12
34770: PUSH
34771: LD_VAR 0 7
34775: ARRAY
34776: PUSH
34777: LD_INT 1
34779: ARRAY
34780: PPUSH
34781: LD_VAR 0 12
34785: PUSH
34786: LD_VAR 0 7
34790: ARRAY
34791: PUSH
34792: LD_INT 2
34794: ARRAY
34795: PPUSH
34796: CALL_OW 351
34800: OR
34801: IFFALSE 34807
// exit ;
34803: POP
34804: POP
34805: GO 35099
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34807: LD_ADDR_VAR 0 8
34811: PUSH
34812: LD_VAR 0 12
34816: PUSH
34817: LD_VAR 0 7
34821: ARRAY
34822: PUSH
34823: LD_INT 1
34825: ARRAY
34826: PPUSH
34827: LD_VAR 0 12
34831: PUSH
34832: LD_VAR 0 7
34836: ARRAY
34837: PUSH
34838: LD_INT 2
34840: ARRAY
34841: PPUSH
34842: CALL_OW 546
34846: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34847: LD_VAR 0 8
34851: PUSH
34852: LD_INT 1
34854: ARRAY
34855: PUSH
34856: LD_VAR 0 8
34860: PUSH
34861: LD_INT 2
34863: ARRAY
34864: PUSH
34865: LD_VAR 0 13
34869: PUSH
34870: LD_INT 2
34872: PLUS
34873: GREATER
34874: OR
34875: PUSH
34876: LD_VAR 0 8
34880: PUSH
34881: LD_INT 2
34883: ARRAY
34884: PUSH
34885: LD_VAR 0 13
34889: PUSH
34890: LD_INT 2
34892: MINUS
34893: LESS
34894: OR
34895: PUSH
34896: LD_VAR 0 8
34900: PUSH
34901: LD_INT 3
34903: ARRAY
34904: PUSH
34905: LD_INT 0
34907: PUSH
34908: LD_INT 8
34910: PUSH
34911: LD_INT 9
34913: PUSH
34914: LD_INT 10
34916: PUSH
34917: LD_INT 11
34919: PUSH
34920: LD_INT 12
34922: PUSH
34923: LD_INT 13
34925: PUSH
34926: LD_INT 16
34928: PUSH
34929: LD_INT 17
34931: PUSH
34932: LD_INT 18
34934: PUSH
34935: LD_INT 19
34937: PUSH
34938: LD_INT 20
34940: PUSH
34941: LD_INT 21
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: IN
34959: NOT
34960: OR
34961: PUSH
34962: LD_VAR 0 8
34966: PUSH
34967: LD_INT 5
34969: ARRAY
34970: NOT
34971: OR
34972: PUSH
34973: LD_VAR 0 8
34977: PUSH
34978: LD_INT 6
34980: ARRAY
34981: PUSH
34982: LD_INT 1
34984: PUSH
34985: LD_INT 2
34987: PUSH
34988: LD_INT 7
34990: PUSH
34991: LD_INT 9
34993: PUSH
34994: LD_INT 10
34996: PUSH
34997: LD_INT 11
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: IN
35008: NOT
35009: OR
35010: IFFALSE 35016
// exit ;
35012: POP
35013: POP
35014: GO 35099
// end ;
35016: GO 34687
35018: POP
35019: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35020: LD_VAR 0 9
35024: PPUSH
35025: LD_VAR 0 3
35029: PPUSH
35030: LD_VAR 0 4
35034: PPUSH
35035: LD_INT 20
35037: PPUSH
35038: CALL 27045 0 4
35042: PUSH
35043: LD_INT 4
35045: ARRAY
35046: IFFALSE 35050
// exit ;
35048: GO 35099
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35050: LD_VAR 0 2
35054: PUSH
35055: LD_INT 29
35057: PUSH
35058: LD_INT 30
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: IN
35065: PUSH
35066: LD_VAR 0 3
35070: PPUSH
35071: LD_VAR 0 4
35075: PPUSH
35076: LD_VAR 0 9
35080: PPUSH
35081: CALL_OW 440
35085: NOT
35086: AND
35087: IFFALSE 35091
// exit ;
35089: GO 35099
// result := true ;
35091: LD_ADDR_VAR 0 6
35095: PUSH
35096: LD_INT 1
35098: ST_TO_ADDR
// end ;
35099: LD_VAR 0 6
35103: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35104: LD_INT 0
35106: PPUSH
35107: PPUSH
35108: PPUSH
35109: PPUSH
35110: PPUSH
35111: PPUSH
35112: PPUSH
35113: PPUSH
35114: PPUSH
35115: PPUSH
35116: PPUSH
35117: PPUSH
35118: PPUSH
35119: PPUSH
35120: PPUSH
35121: PPUSH
35122: PPUSH
35123: PPUSH
35124: PPUSH
35125: PPUSH
35126: PPUSH
35127: PPUSH
35128: PPUSH
35129: PPUSH
35130: PPUSH
35131: PPUSH
35132: PPUSH
35133: PPUSH
35134: PPUSH
35135: PPUSH
35136: PPUSH
35137: PPUSH
35138: PPUSH
35139: PPUSH
35140: PPUSH
35141: PPUSH
35142: PPUSH
35143: PPUSH
35144: PPUSH
35145: PPUSH
35146: PPUSH
35147: PPUSH
35148: PPUSH
35149: PPUSH
35150: PPUSH
35151: PPUSH
35152: PPUSH
35153: PPUSH
35154: PPUSH
35155: PPUSH
35156: PPUSH
35157: PPUSH
35158: PPUSH
35159: PPUSH
35160: PPUSH
35161: PPUSH
35162: PPUSH
35163: PPUSH
// result = [ ] ;
35164: LD_ADDR_VAR 0 7
35168: PUSH
35169: EMPTY
35170: ST_TO_ADDR
// temp_list = [ ] ;
35171: LD_ADDR_VAR 0 9
35175: PUSH
35176: EMPTY
35177: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35178: LD_VAR 0 4
35182: PUSH
35183: LD_INT 0
35185: PUSH
35186: LD_INT 1
35188: PUSH
35189: LD_INT 2
35191: PUSH
35192: LD_INT 3
35194: PUSH
35195: LD_INT 4
35197: PUSH
35198: LD_INT 5
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: LIST
35208: IN
35209: NOT
35210: PUSH
35211: LD_VAR 0 1
35215: PUSH
35216: LD_INT 0
35218: PUSH
35219: LD_INT 1
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: IN
35226: PUSH
35227: LD_VAR 0 5
35231: PUSH
35232: LD_INT 1
35234: PUSH
35235: LD_INT 2
35237: PUSH
35238: LD_INT 3
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: LIST
35245: IN
35246: NOT
35247: AND
35248: OR
35249: IFFALSE 35253
// exit ;
35251: GO 53644
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35253: LD_VAR 0 1
35257: PUSH
35258: LD_INT 6
35260: PUSH
35261: LD_INT 7
35263: PUSH
35264: LD_INT 8
35266: PUSH
35267: LD_INT 13
35269: PUSH
35270: LD_INT 12
35272: PUSH
35273: LD_INT 15
35275: PUSH
35276: LD_INT 11
35278: PUSH
35279: LD_INT 14
35281: PUSH
35282: LD_INT 10
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: IN
35296: IFFALSE 35306
// btype = b_lab ;
35298: LD_ADDR_VAR 0 1
35302: PUSH
35303: LD_INT 6
35305: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35306: LD_VAR 0 6
35310: PUSH
35311: LD_INT 0
35313: PUSH
35314: LD_INT 1
35316: PUSH
35317: LD_INT 2
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: LIST
35324: IN
35325: NOT
35326: PUSH
35327: LD_VAR 0 1
35331: PUSH
35332: LD_INT 0
35334: PUSH
35335: LD_INT 1
35337: PUSH
35338: LD_INT 2
35340: PUSH
35341: LD_INT 3
35343: PUSH
35344: LD_INT 6
35346: PUSH
35347: LD_INT 36
35349: PUSH
35350: LD_INT 4
35352: PUSH
35353: LD_INT 5
35355: PUSH
35356: LD_INT 31
35358: PUSH
35359: LD_INT 32
35361: PUSH
35362: LD_INT 33
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: IN
35378: NOT
35379: PUSH
35380: LD_VAR 0 6
35384: PUSH
35385: LD_INT 1
35387: EQUAL
35388: AND
35389: OR
35390: PUSH
35391: LD_VAR 0 1
35395: PUSH
35396: LD_INT 2
35398: PUSH
35399: LD_INT 3
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: IN
35406: NOT
35407: PUSH
35408: LD_VAR 0 6
35412: PUSH
35413: LD_INT 2
35415: EQUAL
35416: AND
35417: OR
35418: IFFALSE 35428
// mode = 0 ;
35420: LD_ADDR_VAR 0 6
35424: PUSH
35425: LD_INT 0
35427: ST_TO_ADDR
// case mode of 0 :
35428: LD_VAR 0 6
35432: PUSH
35433: LD_INT 0
35435: DOUBLE
35436: EQUAL
35437: IFTRUE 35441
35439: GO 46894
35441: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35442: LD_ADDR_VAR 0 11
35446: PUSH
35447: LD_INT 0
35449: PUSH
35450: LD_INT 0
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 0
35459: PUSH
35460: LD_INT 1
35462: NEG
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 1
35470: PUSH
35471: LD_INT 0
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: LD_INT 1
35480: PUSH
35481: LD_INT 1
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 0
35490: PUSH
35491: LD_INT 1
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 1
35500: NEG
35501: PUSH
35502: LD_INT 0
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 1
35511: NEG
35512: PUSH
35513: LD_INT 1
35515: NEG
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 1
35523: NEG
35524: PUSH
35525: LD_INT 2
35527: NEG
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 0
35535: PUSH
35536: LD_INT 2
35538: NEG
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 1
35546: PUSH
35547: LD_INT 1
35549: NEG
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 1
35557: PUSH
35558: LD_INT 2
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 0
35567: PUSH
35568: LD_INT 2
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 1
35577: NEG
35578: PUSH
35579: LD_INT 1
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 1
35588: PUSH
35589: LD_INT 3
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 0
35598: PUSH
35599: LD_INT 3
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 1
35608: NEG
35609: PUSH
35610: LD_INT 2
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35635: LD_ADDR_VAR 0 12
35639: PUSH
35640: LD_INT 0
35642: PUSH
35643: LD_INT 0
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 0
35652: PUSH
35653: LD_INT 1
35655: NEG
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 1
35663: PUSH
35664: LD_INT 0
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 1
35673: PUSH
35674: LD_INT 1
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 0
35683: PUSH
35684: LD_INT 1
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 1
35693: NEG
35694: PUSH
35695: LD_INT 0
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 1
35704: NEG
35705: PUSH
35706: LD_INT 1
35708: NEG
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 1
35716: PUSH
35717: LD_INT 1
35719: NEG
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 2
35727: PUSH
35728: LD_INT 0
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 2
35737: PUSH
35738: LD_INT 1
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 1
35747: NEG
35748: PUSH
35749: LD_INT 1
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 2
35758: NEG
35759: PUSH
35760: LD_INT 0
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 2
35769: NEG
35770: PUSH
35771: LD_INT 1
35773: NEG
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 2
35781: NEG
35782: PUSH
35783: LD_INT 1
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 3
35792: NEG
35793: PUSH
35794: LD_INT 0
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 3
35803: NEG
35804: PUSH
35805: LD_INT 1
35807: NEG
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35831: LD_ADDR_VAR 0 13
35835: PUSH
35836: LD_INT 0
35838: PUSH
35839: LD_INT 0
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 0
35848: PUSH
35849: LD_INT 1
35851: NEG
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 1
35859: PUSH
35860: LD_INT 0
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 1
35869: PUSH
35870: LD_INT 1
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 0
35879: PUSH
35880: LD_INT 1
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 1
35889: NEG
35890: PUSH
35891: LD_INT 0
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 1
35900: NEG
35901: PUSH
35902: LD_INT 1
35904: NEG
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 1
35912: NEG
35913: PUSH
35914: LD_INT 2
35916: NEG
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PUSH
35922: LD_INT 2
35924: PUSH
35925: LD_INT 1
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 2
35934: PUSH
35935: LD_INT 2
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: LD_INT 1
35944: PUSH
35945: LD_INT 2
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: LD_INT 2
35954: NEG
35955: PUSH
35956: LD_INT 1
35958: NEG
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 2
35966: NEG
35967: PUSH
35968: LD_INT 2
35970: NEG
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 2
35978: NEG
35979: PUSH
35980: LD_INT 3
35982: NEG
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 3
35990: NEG
35991: PUSH
35992: LD_INT 2
35994: NEG
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 3
36002: NEG
36003: PUSH
36004: LD_INT 3
36006: NEG
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36030: LD_ADDR_VAR 0 14
36034: PUSH
36035: LD_INT 0
36037: PUSH
36038: LD_INT 0
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 0
36047: PUSH
36048: LD_INT 1
36050: NEG
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 1
36058: PUSH
36059: LD_INT 0
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 1
36068: PUSH
36069: LD_INT 1
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 0
36078: PUSH
36079: LD_INT 1
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 1
36088: NEG
36089: PUSH
36090: LD_INT 0
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 1
36099: NEG
36100: PUSH
36101: LD_INT 1
36103: NEG
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 1
36111: NEG
36112: PUSH
36113: LD_INT 2
36115: NEG
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 0
36123: PUSH
36124: LD_INT 2
36126: NEG
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 1
36134: PUSH
36135: LD_INT 1
36137: NEG
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 1
36145: PUSH
36146: LD_INT 2
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 0
36155: PUSH
36156: LD_INT 2
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 1
36165: NEG
36166: PUSH
36167: LD_INT 1
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 1
36176: NEG
36177: PUSH
36178: LD_INT 3
36180: NEG
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 0
36188: PUSH
36189: LD_INT 3
36191: NEG
36192: PUSH
36193: EMPTY
36194: LIST
36195: LIST
36196: PUSH
36197: LD_INT 1
36199: PUSH
36200: LD_INT 2
36202: NEG
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36226: LD_ADDR_VAR 0 15
36230: PUSH
36231: LD_INT 0
36233: PUSH
36234: LD_INT 0
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 0
36243: PUSH
36244: LD_INT 1
36246: NEG
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 1
36254: PUSH
36255: LD_INT 0
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 1
36264: PUSH
36265: LD_INT 1
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: LD_INT 0
36274: PUSH
36275: LD_INT 1
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 1
36284: NEG
36285: PUSH
36286: LD_INT 0
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 1
36295: NEG
36296: PUSH
36297: LD_INT 1
36299: NEG
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 1
36307: PUSH
36308: LD_INT 1
36310: NEG
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 2
36318: PUSH
36319: LD_INT 0
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 2
36328: PUSH
36329: LD_INT 1
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 1
36338: NEG
36339: PUSH
36340: LD_INT 1
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 2
36349: NEG
36350: PUSH
36351: LD_INT 0
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 2
36360: NEG
36361: PUSH
36362: LD_INT 1
36364: NEG
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: LD_INT 2
36372: PUSH
36373: LD_INT 1
36375: NEG
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 3
36383: PUSH
36384: LD_INT 0
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 3
36393: PUSH
36394: LD_INT 1
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36419: LD_ADDR_VAR 0 16
36423: PUSH
36424: LD_INT 0
36426: PUSH
36427: LD_INT 0
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 0
36436: PUSH
36437: LD_INT 1
36439: NEG
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 1
36447: PUSH
36448: LD_INT 0
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 1
36457: PUSH
36458: LD_INT 1
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 0
36467: PUSH
36468: LD_INT 1
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 1
36477: NEG
36478: PUSH
36479: LD_INT 0
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 1
36488: NEG
36489: PUSH
36490: LD_INT 1
36492: NEG
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: LD_INT 1
36500: NEG
36501: PUSH
36502: LD_INT 2
36504: NEG
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 2
36512: PUSH
36513: LD_INT 1
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 2
36522: PUSH
36523: LD_INT 2
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 1
36532: PUSH
36533: LD_INT 2
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 2
36542: NEG
36543: PUSH
36544: LD_INT 1
36546: NEG
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 2
36554: NEG
36555: PUSH
36556: LD_INT 2
36558: NEG
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 3
36566: PUSH
36567: LD_INT 2
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 3
36576: PUSH
36577: LD_INT 3
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 2
36586: PUSH
36587: LD_INT 3
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36612: LD_ADDR_VAR 0 17
36616: PUSH
36617: LD_INT 0
36619: PUSH
36620: LD_INT 0
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 0
36629: PUSH
36630: LD_INT 1
36632: NEG
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 1
36640: PUSH
36641: LD_INT 0
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 1
36650: PUSH
36651: LD_INT 1
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 0
36660: PUSH
36661: LD_INT 1
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 1
36670: NEG
36671: PUSH
36672: LD_INT 0
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 1
36681: NEG
36682: PUSH
36683: LD_INT 1
36685: NEG
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_INT 1
36693: NEG
36694: PUSH
36695: LD_INT 2
36697: NEG
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 0
36705: PUSH
36706: LD_INT 2
36708: NEG
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 1
36716: PUSH
36717: LD_INT 1
36719: NEG
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 2
36727: PUSH
36728: LD_INT 0
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 2
36737: PUSH
36738: LD_INT 1
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 2
36747: PUSH
36748: LD_INT 2
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 1
36757: PUSH
36758: LD_INT 2
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 0
36767: PUSH
36768: LD_INT 2
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 1
36777: NEG
36778: PUSH
36779: LD_INT 1
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 2
36788: NEG
36789: PUSH
36790: LD_INT 0
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 2
36799: NEG
36800: PUSH
36801: LD_INT 1
36803: NEG
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 2
36811: NEG
36812: PUSH
36813: LD_INT 2
36815: NEG
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36842: LD_ADDR_VAR 0 18
36846: PUSH
36847: LD_INT 0
36849: PUSH
36850: LD_INT 0
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 0
36859: PUSH
36860: LD_INT 1
36862: NEG
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 1
36870: PUSH
36871: LD_INT 0
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 1
36880: PUSH
36881: LD_INT 1
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 0
36890: PUSH
36891: LD_INT 1
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: LD_INT 1
36900: NEG
36901: PUSH
36902: LD_INT 0
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 1
36911: NEG
36912: PUSH
36913: LD_INT 1
36915: NEG
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_INT 1
36923: NEG
36924: PUSH
36925: LD_INT 2
36927: NEG
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: LD_INT 0
36935: PUSH
36936: LD_INT 2
36938: NEG
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 1
36946: PUSH
36947: LD_INT 1
36949: NEG
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 2
36957: PUSH
36958: LD_INT 0
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 2
36967: PUSH
36968: LD_INT 1
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 2
36977: PUSH
36978: LD_INT 2
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 1
36987: PUSH
36988: LD_INT 2
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 0
36997: PUSH
36998: LD_INT 2
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 1
37007: NEG
37008: PUSH
37009: LD_INT 1
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 2
37018: NEG
37019: PUSH
37020: LD_INT 0
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 2
37029: NEG
37030: PUSH
37031: LD_INT 1
37033: NEG
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 2
37041: NEG
37042: PUSH
37043: LD_INT 2
37045: NEG
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37072: LD_ADDR_VAR 0 19
37076: PUSH
37077: LD_INT 0
37079: PUSH
37080: LD_INT 0
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 0
37089: PUSH
37090: LD_INT 1
37092: NEG
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 1
37100: PUSH
37101: LD_INT 0
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 1
37110: PUSH
37111: LD_INT 1
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 0
37120: PUSH
37121: LD_INT 1
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 1
37130: NEG
37131: PUSH
37132: LD_INT 0
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 1
37141: NEG
37142: PUSH
37143: LD_INT 1
37145: NEG
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 1
37153: NEG
37154: PUSH
37155: LD_INT 2
37157: NEG
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 0
37165: PUSH
37166: LD_INT 2
37168: NEG
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 1
37176: PUSH
37177: LD_INT 1
37179: NEG
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 2
37187: PUSH
37188: LD_INT 0
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 2
37197: PUSH
37198: LD_INT 1
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 2
37207: PUSH
37208: LD_INT 2
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 1
37217: PUSH
37218: LD_INT 2
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 0
37227: PUSH
37228: LD_INT 2
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 1
37237: NEG
37238: PUSH
37239: LD_INT 1
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 2
37248: NEG
37249: PUSH
37250: LD_INT 0
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 2
37259: NEG
37260: PUSH
37261: LD_INT 1
37263: NEG
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 2
37271: NEG
37272: PUSH
37273: LD_INT 2
37275: NEG
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37302: LD_ADDR_VAR 0 20
37306: PUSH
37307: LD_INT 0
37309: PUSH
37310: LD_INT 0
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 0
37319: PUSH
37320: LD_INT 1
37322: NEG
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 1
37330: PUSH
37331: LD_INT 0
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 1
37340: PUSH
37341: LD_INT 1
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: PUSH
37348: LD_INT 0
37350: PUSH
37351: LD_INT 1
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 1
37360: NEG
37361: PUSH
37362: LD_INT 0
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 1
37371: NEG
37372: PUSH
37373: LD_INT 1
37375: NEG
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 1
37383: NEG
37384: PUSH
37385: LD_INT 2
37387: NEG
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 0
37395: PUSH
37396: LD_INT 2
37398: NEG
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 1
37406: PUSH
37407: LD_INT 1
37409: NEG
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 2
37417: PUSH
37418: LD_INT 0
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 2
37427: PUSH
37428: LD_INT 1
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 2
37437: PUSH
37438: LD_INT 2
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 1
37447: PUSH
37448: LD_INT 2
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 0
37457: PUSH
37458: LD_INT 2
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 1
37467: NEG
37468: PUSH
37469: LD_INT 1
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 2
37478: NEG
37479: PUSH
37480: LD_INT 0
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 2
37489: NEG
37490: PUSH
37491: LD_INT 1
37493: NEG
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 2
37501: NEG
37502: PUSH
37503: LD_INT 2
37505: NEG
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37532: LD_ADDR_VAR 0 21
37536: PUSH
37537: LD_INT 0
37539: PUSH
37540: LD_INT 0
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 0
37549: PUSH
37550: LD_INT 1
37552: NEG
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 1
37560: PUSH
37561: LD_INT 0
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 1
37570: PUSH
37571: LD_INT 1
37573: PUSH
37574: EMPTY
37575: LIST
37576: LIST
37577: PUSH
37578: LD_INT 0
37580: PUSH
37581: LD_INT 1
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 1
37590: NEG
37591: PUSH
37592: LD_INT 0
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 1
37601: NEG
37602: PUSH
37603: LD_INT 1
37605: NEG
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 1
37613: NEG
37614: PUSH
37615: LD_INT 2
37617: NEG
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 0
37625: PUSH
37626: LD_INT 2
37628: NEG
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 1
37636: PUSH
37637: LD_INT 1
37639: NEG
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 2
37647: PUSH
37648: LD_INT 0
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 2
37657: PUSH
37658: LD_INT 1
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 2
37667: PUSH
37668: LD_INT 2
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 1
37677: PUSH
37678: LD_INT 2
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 0
37687: PUSH
37688: LD_INT 2
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 1
37697: NEG
37698: PUSH
37699: LD_INT 1
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 2
37708: NEG
37709: PUSH
37710: LD_INT 0
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 2
37719: NEG
37720: PUSH
37721: LD_INT 1
37723: NEG
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 2
37731: NEG
37732: PUSH
37733: LD_INT 2
37735: NEG
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37762: LD_ADDR_VAR 0 22
37766: PUSH
37767: LD_INT 0
37769: PUSH
37770: LD_INT 0
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 0
37779: PUSH
37780: LD_INT 1
37782: NEG
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 1
37790: PUSH
37791: LD_INT 0
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 1
37800: PUSH
37801: LD_INT 1
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 0
37810: PUSH
37811: LD_INT 1
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 1
37820: NEG
37821: PUSH
37822: LD_INT 0
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 1
37831: NEG
37832: PUSH
37833: LD_INT 1
37835: NEG
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 1
37843: NEG
37844: PUSH
37845: LD_INT 2
37847: NEG
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 0
37855: PUSH
37856: LD_INT 2
37858: NEG
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 1
37866: PUSH
37867: LD_INT 1
37869: NEG
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 2
37877: PUSH
37878: LD_INT 0
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: PUSH
37885: LD_INT 2
37887: PUSH
37888: LD_INT 1
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 2
37897: PUSH
37898: LD_INT 2
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 1
37907: PUSH
37908: LD_INT 2
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 0
37917: PUSH
37918: LD_INT 2
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 1
37927: NEG
37928: PUSH
37929: LD_INT 1
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 2
37938: NEG
37939: PUSH
37940: LD_INT 0
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 2
37949: NEG
37950: PUSH
37951: LD_INT 1
37953: NEG
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 2
37961: NEG
37962: PUSH
37963: LD_INT 2
37965: NEG
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37992: LD_ADDR_VAR 0 23
37996: PUSH
37997: LD_INT 0
37999: PUSH
38000: LD_INT 0
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 0
38009: PUSH
38010: LD_INT 1
38012: NEG
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 1
38020: PUSH
38021: LD_INT 0
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 1
38030: PUSH
38031: LD_INT 1
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 0
38040: PUSH
38041: LD_INT 1
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 1
38050: NEG
38051: PUSH
38052: LD_INT 0
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 1
38061: NEG
38062: PUSH
38063: LD_INT 1
38065: NEG
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 1
38073: NEG
38074: PUSH
38075: LD_INT 2
38077: NEG
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 0
38085: PUSH
38086: LD_INT 2
38088: NEG
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 1
38096: PUSH
38097: LD_INT 1
38099: NEG
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 2
38107: PUSH
38108: LD_INT 0
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 2
38117: PUSH
38118: LD_INT 1
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 2
38127: PUSH
38128: LD_INT 2
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 1
38137: PUSH
38138: LD_INT 2
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 0
38147: PUSH
38148: LD_INT 2
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 1
38157: NEG
38158: PUSH
38159: LD_INT 1
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 2
38168: NEG
38169: PUSH
38170: LD_INT 0
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 2
38179: NEG
38180: PUSH
38181: LD_INT 1
38183: NEG
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 2
38191: NEG
38192: PUSH
38193: LD_INT 2
38195: NEG
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 2
38203: NEG
38204: PUSH
38205: LD_INT 3
38207: NEG
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 1
38215: NEG
38216: PUSH
38217: LD_INT 3
38219: NEG
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 1
38227: PUSH
38228: LD_INT 2
38230: NEG
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 2
38238: PUSH
38239: LD_INT 1
38241: NEG
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38272: LD_ADDR_VAR 0 24
38276: PUSH
38277: LD_INT 0
38279: PUSH
38280: LD_INT 0
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 0
38289: PUSH
38290: LD_INT 1
38292: NEG
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 1
38300: PUSH
38301: LD_INT 0
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 1
38310: PUSH
38311: LD_INT 1
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 0
38320: PUSH
38321: LD_INT 1
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 1
38330: NEG
38331: PUSH
38332: LD_INT 0
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 1
38341: NEG
38342: PUSH
38343: LD_INT 1
38345: NEG
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 1
38353: NEG
38354: PUSH
38355: LD_INT 2
38357: NEG
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 0
38365: PUSH
38366: LD_INT 2
38368: NEG
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 1
38376: PUSH
38377: LD_INT 1
38379: NEG
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 2
38387: PUSH
38388: LD_INT 0
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 2
38397: PUSH
38398: LD_INT 1
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 2
38407: PUSH
38408: LD_INT 2
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 1
38417: PUSH
38418: LD_INT 2
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 0
38427: PUSH
38428: LD_INT 2
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 1
38437: NEG
38438: PUSH
38439: LD_INT 1
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: LD_INT 2
38448: NEG
38449: PUSH
38450: LD_INT 0
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 2
38459: NEG
38460: PUSH
38461: LD_INT 1
38463: NEG
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 2
38471: NEG
38472: PUSH
38473: LD_INT 2
38475: NEG
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 1
38483: PUSH
38484: LD_INT 2
38486: NEG
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: LD_INT 2
38494: PUSH
38495: LD_INT 1
38497: NEG
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 3
38505: PUSH
38506: LD_INT 1
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: LD_INT 3
38515: PUSH
38516: LD_INT 2
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38548: LD_ADDR_VAR 0 25
38552: PUSH
38553: LD_INT 0
38555: PUSH
38556: LD_INT 0
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 0
38565: PUSH
38566: LD_INT 1
38568: NEG
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 1
38576: PUSH
38577: LD_INT 0
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 1
38586: PUSH
38587: LD_INT 1
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 0
38596: PUSH
38597: LD_INT 1
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 1
38606: NEG
38607: PUSH
38608: LD_INT 0
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 1
38617: NEG
38618: PUSH
38619: LD_INT 1
38621: NEG
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 1
38629: NEG
38630: PUSH
38631: LD_INT 2
38633: NEG
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 0
38641: PUSH
38642: LD_INT 2
38644: NEG
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 1
38652: PUSH
38653: LD_INT 1
38655: NEG
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 2
38663: PUSH
38664: LD_INT 0
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 2
38673: PUSH
38674: LD_INT 1
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 2
38683: PUSH
38684: LD_INT 2
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 1
38693: PUSH
38694: LD_INT 2
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 0
38703: PUSH
38704: LD_INT 2
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 1
38713: NEG
38714: PUSH
38715: LD_INT 1
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 2
38724: NEG
38725: PUSH
38726: LD_INT 0
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 2
38735: NEG
38736: PUSH
38737: LD_INT 1
38739: NEG
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 2
38747: NEG
38748: PUSH
38749: LD_INT 2
38751: NEG
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 3
38759: PUSH
38760: LD_INT 1
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 3
38769: PUSH
38770: LD_INT 2
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 2
38779: PUSH
38780: LD_INT 3
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 1
38789: PUSH
38790: LD_INT 3
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38822: LD_ADDR_VAR 0 26
38826: PUSH
38827: LD_INT 0
38829: PUSH
38830: LD_INT 0
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 0
38839: PUSH
38840: LD_INT 1
38842: NEG
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 1
38850: PUSH
38851: LD_INT 0
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 1
38860: PUSH
38861: LD_INT 1
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 0
38870: PUSH
38871: LD_INT 1
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 1
38880: NEG
38881: PUSH
38882: LD_INT 0
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 1
38891: NEG
38892: PUSH
38893: LD_INT 1
38895: NEG
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 1
38903: NEG
38904: PUSH
38905: LD_INT 2
38907: NEG
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 0
38915: PUSH
38916: LD_INT 2
38918: NEG
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 1
38926: PUSH
38927: LD_INT 1
38929: NEG
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 2
38937: PUSH
38938: LD_INT 0
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 2
38947: PUSH
38948: LD_INT 1
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 2
38957: PUSH
38958: LD_INT 2
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 1
38967: PUSH
38968: LD_INT 2
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 0
38977: PUSH
38978: LD_INT 2
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 1
38987: NEG
38988: PUSH
38989: LD_INT 1
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 2
38998: NEG
38999: PUSH
39000: LD_INT 0
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 2
39009: NEG
39010: PUSH
39011: LD_INT 1
39013: NEG
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 2
39021: NEG
39022: PUSH
39023: LD_INT 2
39025: NEG
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 2
39033: PUSH
39034: LD_INT 3
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 1
39043: PUSH
39044: LD_INT 3
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 1
39053: NEG
39054: PUSH
39055: LD_INT 2
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 2
39064: NEG
39065: PUSH
39066: LD_INT 1
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39098: LD_ADDR_VAR 0 27
39102: PUSH
39103: LD_INT 0
39105: PUSH
39106: LD_INT 0
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 0
39115: PUSH
39116: LD_INT 1
39118: NEG
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 1
39126: PUSH
39127: LD_INT 0
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 1
39136: PUSH
39137: LD_INT 1
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 0
39146: PUSH
39147: LD_INT 1
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 1
39156: NEG
39157: PUSH
39158: LD_INT 0
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 1
39167: NEG
39168: PUSH
39169: LD_INT 1
39171: NEG
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 1
39179: NEG
39180: PUSH
39181: LD_INT 2
39183: NEG
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 0
39191: PUSH
39192: LD_INT 2
39194: NEG
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 1
39202: PUSH
39203: LD_INT 1
39205: NEG
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 2
39213: PUSH
39214: LD_INT 0
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 2
39223: PUSH
39224: LD_INT 1
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 2
39233: PUSH
39234: LD_INT 2
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 1
39243: PUSH
39244: LD_INT 2
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 0
39253: PUSH
39254: LD_INT 2
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 1
39263: NEG
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 2
39274: NEG
39275: PUSH
39276: LD_INT 0
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 2
39285: NEG
39286: PUSH
39287: LD_INT 1
39289: NEG
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 2
39297: NEG
39298: PUSH
39299: LD_INT 2
39301: NEG
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 1
39309: NEG
39310: PUSH
39311: LD_INT 2
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 2
39320: NEG
39321: PUSH
39322: LD_INT 1
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 3
39331: NEG
39332: PUSH
39333: LD_INT 1
39335: NEG
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 3
39343: NEG
39344: PUSH
39345: LD_INT 2
39347: NEG
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39378: LD_ADDR_VAR 0 28
39382: PUSH
39383: LD_INT 0
39385: PUSH
39386: LD_INT 0
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 0
39395: PUSH
39396: LD_INT 1
39398: NEG
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 1
39406: PUSH
39407: LD_INT 0
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 1
39416: PUSH
39417: LD_INT 1
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 0
39426: PUSH
39427: LD_INT 1
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 1
39436: NEG
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 1
39447: NEG
39448: PUSH
39449: LD_INT 1
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 1
39459: NEG
39460: PUSH
39461: LD_INT 2
39463: NEG
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 0
39471: PUSH
39472: LD_INT 2
39474: NEG
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 1
39482: PUSH
39483: LD_INT 1
39485: NEG
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 2
39493: PUSH
39494: LD_INT 0
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 2
39503: PUSH
39504: LD_INT 1
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 2
39513: PUSH
39514: LD_INT 2
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 1
39523: PUSH
39524: LD_INT 2
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 0
39533: PUSH
39534: LD_INT 2
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 1
39543: NEG
39544: PUSH
39545: LD_INT 1
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 2
39554: NEG
39555: PUSH
39556: LD_INT 0
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 2
39565: NEG
39566: PUSH
39567: LD_INT 1
39569: NEG
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 2
39577: NEG
39578: PUSH
39579: LD_INT 2
39581: NEG
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 2
39589: NEG
39590: PUSH
39591: LD_INT 3
39593: NEG
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 1
39601: NEG
39602: PUSH
39603: LD_INT 3
39605: NEG
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 3
39613: NEG
39614: PUSH
39615: LD_INT 1
39617: NEG
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 3
39625: NEG
39626: PUSH
39627: LD_INT 2
39629: NEG
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39660: LD_ADDR_VAR 0 29
39664: PUSH
39665: LD_INT 0
39667: PUSH
39668: LD_INT 0
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 0
39677: PUSH
39678: LD_INT 1
39680: NEG
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 1
39688: PUSH
39689: LD_INT 0
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 1
39698: PUSH
39699: LD_INT 1
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 0
39708: PUSH
39709: LD_INT 1
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 1
39718: NEG
39719: PUSH
39720: LD_INT 0
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 1
39729: NEG
39730: PUSH
39731: LD_INT 1
39733: NEG
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 1
39741: NEG
39742: PUSH
39743: LD_INT 2
39745: NEG
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 0
39753: PUSH
39754: LD_INT 2
39756: NEG
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 1
39764: PUSH
39765: LD_INT 1
39767: NEG
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 2
39775: PUSH
39776: LD_INT 0
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 2
39785: PUSH
39786: LD_INT 1
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 1
39795: PUSH
39796: LD_INT 2
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 0
39805: PUSH
39806: LD_INT 2
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 1
39815: NEG
39816: PUSH
39817: LD_INT 1
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 2
39826: NEG
39827: PUSH
39828: LD_INT 1
39830: NEG
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 2
39838: NEG
39839: PUSH
39840: LD_INT 2
39842: NEG
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 2
39850: NEG
39851: PUSH
39852: LD_INT 3
39854: NEG
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 2
39862: PUSH
39863: LD_INT 1
39865: NEG
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 3
39873: PUSH
39874: LD_INT 1
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 1
39883: PUSH
39884: LD_INT 3
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 1
39893: NEG
39894: PUSH
39895: LD_INT 2
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 3
39904: NEG
39905: PUSH
39906: LD_INT 2
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39939: LD_ADDR_VAR 0 30
39943: PUSH
39944: LD_INT 0
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 0
39956: PUSH
39957: LD_INT 1
39959: NEG
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 1
39967: PUSH
39968: LD_INT 0
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 1
39977: PUSH
39978: LD_INT 1
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 0
39987: PUSH
39988: LD_INT 1
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 1
39997: NEG
39998: PUSH
39999: LD_INT 0
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 1
40008: NEG
40009: PUSH
40010: LD_INT 1
40012: NEG
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 1
40020: NEG
40021: PUSH
40022: LD_INT 2
40024: NEG
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 0
40032: PUSH
40033: LD_INT 2
40035: NEG
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 1
40043: PUSH
40044: LD_INT 1
40046: NEG
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 2
40054: PUSH
40055: LD_INT 0
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 2
40064: PUSH
40065: LD_INT 1
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 2
40074: PUSH
40075: LD_INT 2
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 1
40084: PUSH
40085: LD_INT 2
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 1
40094: NEG
40095: PUSH
40096: LD_INT 1
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 2
40105: NEG
40106: PUSH
40107: LD_INT 0
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 2
40116: NEG
40117: PUSH
40118: LD_INT 1
40120: NEG
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 1
40128: NEG
40129: PUSH
40130: LD_INT 3
40132: NEG
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 1
40140: PUSH
40141: LD_INT 2
40143: NEG
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 3
40151: PUSH
40152: LD_INT 2
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 2
40161: PUSH
40162: LD_INT 3
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 2
40171: NEG
40172: PUSH
40173: LD_INT 1
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 3
40182: NEG
40183: PUSH
40184: LD_INT 1
40186: NEG
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40217: LD_ADDR_VAR 0 31
40221: PUSH
40222: LD_INT 0
40224: PUSH
40225: LD_INT 0
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 0
40234: PUSH
40235: LD_INT 1
40237: NEG
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 1
40245: PUSH
40246: LD_INT 0
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 1
40255: PUSH
40256: LD_INT 1
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 0
40265: PUSH
40266: LD_INT 1
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 1
40275: NEG
40276: PUSH
40277: LD_INT 0
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 1
40286: NEG
40287: PUSH
40288: LD_INT 1
40290: NEG
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 1
40298: NEG
40299: PUSH
40300: LD_INT 2
40302: NEG
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 1
40310: PUSH
40311: LD_INT 1
40313: NEG
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 2
40321: PUSH
40322: LD_INT 0
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 2
40331: PUSH
40332: LD_INT 1
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 2
40341: PUSH
40342: LD_INT 2
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 1
40351: PUSH
40352: LD_INT 2
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 0
40361: PUSH
40362: LD_INT 2
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: LD_INT 1
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 2
40382: NEG
40383: PUSH
40384: LD_INT 1
40386: NEG
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 2
40394: NEG
40395: PUSH
40396: LD_INT 2
40398: NEG
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 2
40406: NEG
40407: PUSH
40408: LD_INT 3
40410: NEG
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 2
40418: PUSH
40419: LD_INT 1
40421: NEG
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 3
40429: PUSH
40430: LD_INT 1
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 1
40439: PUSH
40440: LD_INT 3
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 1
40449: NEG
40450: PUSH
40451: LD_INT 2
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 3
40460: NEG
40461: PUSH
40462: LD_INT 2
40464: NEG
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40495: LD_ADDR_VAR 0 32
40499: PUSH
40500: LD_INT 0
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 0
40512: PUSH
40513: LD_INT 1
40515: NEG
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 1
40523: PUSH
40524: LD_INT 0
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 1
40533: PUSH
40534: LD_INT 1
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 0
40543: PUSH
40544: LD_INT 1
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 1
40553: NEG
40554: PUSH
40555: LD_INT 0
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 1
40564: NEG
40565: PUSH
40566: LD_INT 1
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 1
40576: NEG
40577: PUSH
40578: LD_INT 2
40580: NEG
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 0
40588: PUSH
40589: LD_INT 2
40591: NEG
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 1
40599: PUSH
40600: LD_INT 1
40602: NEG
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 2
40610: PUSH
40611: LD_INT 1
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 2
40620: PUSH
40621: LD_INT 2
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 1
40630: PUSH
40631: LD_INT 2
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 0
40640: PUSH
40641: LD_INT 2
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 1
40650: NEG
40651: PUSH
40652: LD_INT 1
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 2
40661: NEG
40662: PUSH
40663: LD_INT 0
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 2
40672: NEG
40673: PUSH
40674: LD_INT 1
40676: NEG
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 1
40684: NEG
40685: PUSH
40686: LD_INT 3
40688: NEG
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 1
40696: PUSH
40697: LD_INT 2
40699: NEG
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 3
40707: PUSH
40708: LD_INT 2
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 2
40717: PUSH
40718: LD_INT 3
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 2
40727: NEG
40728: PUSH
40729: LD_INT 1
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 3
40738: NEG
40739: PUSH
40740: LD_INT 1
40742: NEG
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40773: LD_ADDR_VAR 0 33
40777: PUSH
40778: LD_INT 0
40780: PUSH
40781: LD_INT 0
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 0
40790: PUSH
40791: LD_INT 1
40793: NEG
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 1
40801: PUSH
40802: LD_INT 0
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 1
40811: PUSH
40812: LD_INT 1
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 0
40821: PUSH
40822: LD_INT 1
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 1
40831: NEG
40832: PUSH
40833: LD_INT 0
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 1
40842: NEG
40843: PUSH
40844: LD_INT 1
40846: NEG
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 1
40854: NEG
40855: PUSH
40856: LD_INT 2
40858: NEG
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 1
40866: PUSH
40867: LD_INT 1
40869: NEG
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 2
40877: PUSH
40878: LD_INT 0
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 2
40887: PUSH
40888: LD_INT 1
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 1
40897: PUSH
40898: LD_INT 2
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 0
40907: PUSH
40908: LD_INT 2
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 1
40917: NEG
40918: PUSH
40919: LD_INT 1
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 2
40928: NEG
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 2
40939: NEG
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 2
40951: NEG
40952: PUSH
40953: LD_INT 2
40955: NEG
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 2
40963: NEG
40964: PUSH
40965: LD_INT 3
40967: NEG
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 2
40975: PUSH
40976: LD_INT 1
40978: NEG
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 3
40986: PUSH
40987: LD_INT 1
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 1
40996: PUSH
40997: LD_INT 3
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 1
41006: NEG
41007: PUSH
41008: LD_INT 2
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 3
41017: NEG
41018: PUSH
41019: LD_INT 2
41021: NEG
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41052: LD_ADDR_VAR 0 34
41056: PUSH
41057: LD_INT 0
41059: PUSH
41060: LD_INT 0
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 0
41069: PUSH
41070: LD_INT 1
41072: NEG
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 1
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 1
41090: PUSH
41091: LD_INT 1
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 0
41100: PUSH
41101: LD_INT 1
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 1
41110: NEG
41111: PUSH
41112: LD_INT 0
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 1
41121: NEG
41122: PUSH
41123: LD_INT 1
41125: NEG
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 1
41133: NEG
41134: PUSH
41135: LD_INT 2
41137: NEG
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 0
41145: PUSH
41146: LD_INT 2
41148: NEG
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 1
41156: PUSH
41157: LD_INT 1
41159: NEG
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 2
41167: PUSH
41168: LD_INT 1
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 2
41177: PUSH
41178: LD_INT 2
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 1
41187: PUSH
41188: LD_INT 2
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 1
41197: NEG
41198: PUSH
41199: LD_INT 1
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 2
41208: NEG
41209: PUSH
41210: LD_INT 0
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 2
41219: NEG
41220: PUSH
41221: LD_INT 1
41223: NEG
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 2
41231: NEG
41232: PUSH
41233: LD_INT 2
41235: NEG
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 1
41243: NEG
41244: PUSH
41245: LD_INT 3
41247: NEG
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 1
41255: PUSH
41256: LD_INT 2
41258: NEG
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 3
41266: PUSH
41267: LD_INT 2
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 2
41276: PUSH
41277: LD_INT 3
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 2
41286: NEG
41287: PUSH
41288: LD_INT 1
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 3
41297: NEG
41298: PUSH
41299: LD_INT 1
41301: NEG
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41332: LD_ADDR_VAR 0 35
41336: PUSH
41337: LD_INT 0
41339: PUSH
41340: LD_INT 0
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 0
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 1
41360: PUSH
41361: LD_INT 0
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 1
41370: PUSH
41371: LD_INT 1
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 0
41380: PUSH
41381: LD_INT 1
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 1
41390: NEG
41391: PUSH
41392: LD_INT 0
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 1
41401: NEG
41402: PUSH
41403: LD_INT 1
41405: NEG
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 2
41413: PUSH
41414: LD_INT 1
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 2
41423: NEG
41424: PUSH
41425: LD_INT 1
41427: NEG
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41444: LD_ADDR_VAR 0 36
41448: PUSH
41449: LD_INT 0
41451: PUSH
41452: LD_INT 0
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: LD_INT 1
41464: NEG
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 1
41472: PUSH
41473: LD_INT 0
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 1
41482: PUSH
41483: LD_INT 1
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: LD_INT 1
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 1
41502: NEG
41503: PUSH
41504: LD_INT 0
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 1
41513: NEG
41514: PUSH
41515: LD_INT 1
41517: NEG
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 1
41525: NEG
41526: PUSH
41527: LD_INT 2
41529: NEG
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 1
41537: PUSH
41538: LD_INT 2
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41556: LD_ADDR_VAR 0 37
41560: PUSH
41561: LD_INT 0
41563: PUSH
41564: LD_INT 0
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 0
41573: PUSH
41574: LD_INT 1
41576: NEG
41577: PUSH
41578: EMPTY
41579: LIST
41580: LIST
41581: PUSH
41582: LD_INT 1
41584: PUSH
41585: LD_INT 0
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 1
41594: PUSH
41595: LD_INT 1
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 0
41604: PUSH
41605: LD_INT 1
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 1
41614: NEG
41615: PUSH
41616: LD_INT 0
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 1
41625: NEG
41626: PUSH
41627: LD_INT 1
41629: NEG
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 1
41637: PUSH
41638: LD_INT 1
41640: NEG
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 1
41648: NEG
41649: PUSH
41650: LD_INT 1
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41668: LD_ADDR_VAR 0 38
41672: PUSH
41673: LD_INT 0
41675: PUSH
41676: LD_INT 0
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 1
41688: NEG
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: LD_INT 0
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 0
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: NEG
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 1
41737: NEG
41738: PUSH
41739: LD_INT 1
41741: NEG
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 2
41749: PUSH
41750: LD_INT 1
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 2
41759: NEG
41760: PUSH
41761: LD_INT 1
41763: NEG
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41780: LD_ADDR_VAR 0 39
41784: PUSH
41785: LD_INT 0
41787: PUSH
41788: LD_INT 0
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: LD_INT 1
41800: NEG
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 1
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 1
41818: PUSH
41819: LD_INT 1
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: LD_INT 1
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 1
41838: NEG
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 1
41849: NEG
41850: PUSH
41851: LD_INT 1
41853: NEG
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 1
41861: NEG
41862: PUSH
41863: LD_INT 2
41865: NEG
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 1
41873: PUSH
41874: LD_INT 2
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41892: LD_ADDR_VAR 0 40
41896: PUSH
41897: LD_INT 0
41899: PUSH
41900: LD_INT 0
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: LD_INT 1
41912: NEG
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 1
41920: PUSH
41921: LD_INT 0
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 1
41930: PUSH
41931: LD_INT 1
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 0
41940: PUSH
41941: LD_INT 1
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 1
41950: NEG
41951: PUSH
41952: LD_INT 0
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 1
41961: NEG
41962: PUSH
41963: LD_INT 1
41965: NEG
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 1
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 1
41984: NEG
41985: PUSH
41986: LD_INT 1
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42004: LD_ADDR_VAR 0 41
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: LD_INT 0
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 0
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 1
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: LD_INT 1
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 1
42062: NEG
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 1
42073: NEG
42074: PUSH
42075: LD_INT 1
42077: NEG
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: LD_INT 2
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 1
42097: PUSH
42098: LD_INT 1
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 2
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 2
42118: PUSH
42119: LD_INT 1
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 2
42128: PUSH
42129: LD_INT 2
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 1
42138: PUSH
42139: LD_INT 2
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 1
42148: NEG
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 2
42159: NEG
42160: PUSH
42161: LD_INT 0
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 2
42170: NEG
42171: PUSH
42172: LD_INT 1
42174: NEG
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 2
42182: NEG
42183: PUSH
42184: LD_INT 2
42186: NEG
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 2
42194: NEG
42195: PUSH
42196: LD_INT 3
42198: NEG
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 2
42206: PUSH
42207: LD_INT 1
42209: NEG
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 3
42217: PUSH
42218: LD_INT 0
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 3
42227: PUSH
42228: LD_INT 1
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 3
42237: PUSH
42238: LD_INT 2
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 3
42247: PUSH
42248: LD_INT 3
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 2
42257: PUSH
42258: LD_INT 3
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 2
42267: NEG
42268: PUSH
42269: LD_INT 1
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 3
42278: NEG
42279: PUSH
42280: LD_INT 0
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 3
42289: NEG
42290: PUSH
42291: LD_INT 1
42293: NEG
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 3
42301: NEG
42302: PUSH
42303: LD_INT 2
42305: NEG
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 3
42313: NEG
42314: PUSH
42315: LD_INT 3
42317: NEG
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42354: LD_ADDR_VAR 0 42
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 0
42371: PUSH
42372: LD_INT 1
42374: NEG
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 1
42392: PUSH
42393: LD_INT 1
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: LD_INT 1
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 1
42412: NEG
42413: PUSH
42414: LD_INT 0
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 1
42423: NEG
42424: PUSH
42425: LD_INT 1
42427: NEG
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: NEG
42436: PUSH
42437: LD_INT 2
42439: NEG
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 0
42447: PUSH
42448: LD_INT 2
42450: NEG
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 1
42458: PUSH
42459: LD_INT 1
42461: NEG
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 2
42469: PUSH
42470: LD_INT 1
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 2
42479: PUSH
42480: LD_INT 2
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 1
42489: PUSH
42490: LD_INT 2
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 0
42499: PUSH
42500: LD_INT 2
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 1
42509: NEG
42510: PUSH
42511: LD_INT 1
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 2
42520: NEG
42521: PUSH
42522: LD_INT 1
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 2
42532: NEG
42533: PUSH
42534: LD_INT 2
42536: NEG
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 2
42544: NEG
42545: PUSH
42546: LD_INT 3
42548: NEG
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 1
42556: NEG
42557: PUSH
42558: LD_INT 3
42560: NEG
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: LD_INT 3
42571: NEG
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 1
42579: PUSH
42580: LD_INT 2
42582: NEG
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 3
42590: PUSH
42591: LD_INT 2
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 3
42600: PUSH
42601: LD_INT 3
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 2
42610: PUSH
42611: LD_INT 3
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: LD_INT 3
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 0
42630: PUSH
42631: LD_INT 3
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: LD_INT 2
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 3
42651: NEG
42652: PUSH
42653: LD_INT 2
42655: NEG
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 3
42663: NEG
42664: PUSH
42665: LD_INT 3
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42704: LD_ADDR_VAR 0 43
42708: PUSH
42709: LD_INT 0
42711: PUSH
42712: LD_INT 0
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: LD_INT 1
42724: NEG
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 1
42732: PUSH
42733: LD_INT 0
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 1
42742: PUSH
42743: LD_INT 1
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: LD_INT 1
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 1
42762: NEG
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 1
42773: NEG
42774: PUSH
42775: LD_INT 1
42777: NEG
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 1
42785: NEG
42786: PUSH
42787: LD_INT 2
42789: NEG
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 0
42797: PUSH
42798: LD_INT 2
42800: NEG
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 1
42808: PUSH
42809: LD_INT 1
42811: NEG
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 2
42819: PUSH
42820: LD_INT 0
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 2
42829: PUSH
42830: LD_INT 1
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 1
42839: PUSH
42840: LD_INT 2
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: LD_INT 2
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 1
42859: NEG
42860: PUSH
42861: LD_INT 1
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 2
42870: NEG
42871: PUSH
42872: LD_INT 0
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 2
42881: NEG
42882: PUSH
42883: LD_INT 1
42885: NEG
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 1
42893: NEG
42894: PUSH
42895: LD_INT 3
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 0
42905: PUSH
42906: LD_INT 3
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 1
42916: PUSH
42917: LD_INT 2
42919: NEG
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 2
42927: PUSH
42928: LD_INT 1
42930: NEG
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 3
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 3
42948: PUSH
42949: LD_INT 1
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 1
42958: PUSH
42959: LD_INT 3
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: LD_INT 3
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 1
42978: NEG
42979: PUSH
42980: LD_INT 2
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 2
42989: NEG
42990: PUSH
42991: LD_INT 1
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 3
43000: NEG
43001: PUSH
43002: LD_INT 0
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 3
43011: NEG
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43052: LD_ADDR_VAR 0 44
43056: PUSH
43057: LD_INT 0
43059: PUSH
43060: LD_INT 0
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: LD_INT 1
43072: NEG
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: LD_INT 0
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: LD_INT 1
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 0
43100: PUSH
43101: LD_INT 1
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 1
43110: NEG
43111: PUSH
43112: LD_INT 0
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 1
43121: NEG
43122: PUSH
43123: LD_INT 1
43125: NEG
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 1
43133: NEG
43134: PUSH
43135: LD_INT 2
43137: NEG
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 1
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 2
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 2
43166: PUSH
43167: LD_INT 1
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 2
43176: PUSH
43177: LD_INT 2
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 1
43186: PUSH
43187: LD_INT 2
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: LD_INT 1
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 2
43207: NEG
43208: PUSH
43209: LD_INT 0
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 2
43218: NEG
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 2
43230: NEG
43231: PUSH
43232: LD_INT 2
43234: NEG
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 2
43242: NEG
43243: PUSH
43244: LD_INT 3
43246: NEG
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 2
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 3
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 3
43275: PUSH
43276: LD_INT 1
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 3
43285: PUSH
43286: LD_INT 2
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 3
43295: PUSH
43296: LD_INT 3
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 2
43305: PUSH
43306: LD_INT 3
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 2
43315: NEG
43316: PUSH
43317: LD_INT 1
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 3
43326: NEG
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 3
43337: NEG
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 3
43349: NEG
43350: PUSH
43351: LD_INT 2
43353: NEG
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 3
43361: NEG
43362: PUSH
43363: LD_INT 3
43365: NEG
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43402: LD_ADDR_VAR 0 45
43406: PUSH
43407: LD_INT 0
43409: PUSH
43410: LD_INT 0
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 0
43419: PUSH
43420: LD_INT 1
43422: NEG
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 1
43430: PUSH
43431: LD_INT 0
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 1
43440: PUSH
43441: LD_INT 1
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 0
43450: PUSH
43451: LD_INT 1
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 1
43460: NEG
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 1
43471: NEG
43472: PUSH
43473: LD_INT 1
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 1
43483: NEG
43484: PUSH
43485: LD_INT 2
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: LD_INT 2
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: LD_INT 1
43509: NEG
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 2
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 2
43527: PUSH
43528: LD_INT 2
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: LD_INT 2
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 0
43547: PUSH
43548: LD_INT 2
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 1
43557: NEG
43558: PUSH
43559: LD_INT 1
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 2
43568: NEG
43569: PUSH
43570: LD_INT 1
43572: NEG
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 2
43580: NEG
43581: PUSH
43582: LD_INT 2
43584: NEG
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 2
43592: NEG
43593: PUSH
43594: LD_INT 3
43596: NEG
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 1
43604: NEG
43605: PUSH
43606: LD_INT 3
43608: NEG
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 0
43616: PUSH
43617: LD_INT 3
43619: NEG
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 1
43627: PUSH
43628: LD_INT 2
43630: NEG
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 3
43638: PUSH
43639: LD_INT 2
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 3
43648: PUSH
43649: LD_INT 3
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 2
43658: PUSH
43659: LD_INT 3
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 1
43668: PUSH
43669: LD_INT 3
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: LD_INT 3
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 1
43688: NEG
43689: PUSH
43690: LD_INT 2
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 3
43699: NEG
43700: PUSH
43701: LD_INT 2
43703: NEG
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 3
43711: NEG
43712: PUSH
43713: LD_INT 3
43715: NEG
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43752: LD_ADDR_VAR 0 46
43756: PUSH
43757: LD_INT 0
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: LD_INT 1
43772: NEG
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 1
43780: PUSH
43781: LD_INT 0
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 1
43790: PUSH
43791: LD_INT 1
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 1
43810: NEG
43811: PUSH
43812: LD_INT 0
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 1
43821: NEG
43822: PUSH
43823: LD_INT 1
43825: NEG
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 1
43833: NEG
43834: PUSH
43835: LD_INT 2
43837: NEG
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 0
43845: PUSH
43846: LD_INT 2
43848: NEG
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 1
43856: PUSH
43857: LD_INT 1
43859: NEG
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 2
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 2
43877: PUSH
43878: LD_INT 1
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 1
43887: PUSH
43888: LD_INT 2
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 0
43897: PUSH
43898: LD_INT 2
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 1
43907: NEG
43908: PUSH
43909: LD_INT 1
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 2
43918: NEG
43919: PUSH
43920: LD_INT 0
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 2
43929: NEG
43930: PUSH
43931: LD_INT 1
43933: NEG
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 1
43941: NEG
43942: PUSH
43943: LD_INT 3
43945: NEG
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 0
43953: PUSH
43954: LD_INT 3
43956: NEG
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 1
43964: PUSH
43965: LD_INT 2
43967: NEG
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 2
43975: PUSH
43976: LD_INT 1
43978: NEG
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 3
43986: PUSH
43987: LD_INT 0
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 3
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: LD_INT 3
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 0
44016: PUSH
44017: LD_INT 3
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 1
44026: NEG
44027: PUSH
44028: LD_INT 2
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 2
44037: NEG
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 3
44048: NEG
44049: PUSH
44050: LD_INT 0
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 3
44059: NEG
44060: PUSH
44061: LD_INT 1
44063: NEG
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44100: LD_ADDR_VAR 0 47
44104: PUSH
44105: LD_INT 0
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 1
44128: PUSH
44129: LD_INT 0
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: LD_INT 1
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: LD_INT 0
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: NEG
44170: PUSH
44171: LD_INT 1
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 1
44181: NEG
44182: PUSH
44183: LD_INT 2
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 0
44193: PUSH
44194: LD_INT 2
44196: NEG
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 1
44204: PUSH
44205: LD_INT 1
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 2
44215: NEG
44216: PUSH
44217: LD_INT 1
44219: NEG
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 2
44227: NEG
44228: PUSH
44229: LD_INT 2
44231: NEG
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44251: LD_ADDR_VAR 0 48
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: LD_INT 0
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 0
44268: PUSH
44269: LD_INT 1
44271: NEG
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 1
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: LD_INT 1
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: LD_INT 1
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 1
44309: NEG
44310: PUSH
44311: LD_INT 0
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 1
44320: NEG
44321: PUSH
44322: LD_INT 1
44324: NEG
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 1
44332: NEG
44333: PUSH
44334: LD_INT 2
44336: NEG
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: LD_INT 2
44347: NEG
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 1
44355: PUSH
44356: LD_INT 1
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 2
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 2
44376: PUSH
44377: LD_INT 1
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44398: LD_ADDR_VAR 0 49
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: LD_INT 1
44418: NEG
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 1
44436: PUSH
44437: LD_INT 1
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 0
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 1
44456: NEG
44457: PUSH
44458: LD_INT 0
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 1
44467: NEG
44468: PUSH
44469: LD_INT 1
44471: NEG
44472: PUSH
44473: EMPTY
44474: LIST
44475: LIST
44476: PUSH
44477: LD_INT 1
44479: PUSH
44480: LD_INT 1
44482: NEG
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 2
44490: PUSH
44491: LD_INT 0
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 2
44500: PUSH
44501: LD_INT 1
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 2
44510: PUSH
44511: LD_INT 2
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 1
44520: PUSH
44521: LD_INT 2
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44542: LD_ADDR_VAR 0 50
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 1
44570: PUSH
44571: LD_INT 0
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: PUSH
44581: LD_INT 1
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 1
44600: NEG
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 1
44611: NEG
44612: PUSH
44613: LD_INT 1
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 2
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: LD_INT 2
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 1
44643: PUSH
44644: LD_INT 2
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 0
44653: PUSH
44654: LD_INT 2
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 1
44663: NEG
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44686: LD_ADDR_VAR 0 51
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: LD_INT 0
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 1
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: LD_INT 1
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: LD_INT 1
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 1
44744: NEG
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 1
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: LD_INT 2
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: LD_INT 1
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 2
44798: NEG
44799: PUSH
44800: LD_INT 0
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 2
44809: NEG
44810: PUSH
44811: LD_INT 1
44813: NEG
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44833: LD_ADDR_VAR 0 52
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: LD_INT 1
44853: NEG
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: LD_INT 0
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: LD_INT 1
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 0
44881: PUSH
44882: LD_INT 1
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: NEG
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: NEG
44903: PUSH
44904: LD_INT 1
44906: NEG
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: NEG
44915: PUSH
44916: LD_INT 2
44918: NEG
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: NEG
44927: PUSH
44928: LD_INT 1
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 2
44937: NEG
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 2
44948: NEG
44949: PUSH
44950: LD_INT 1
44952: NEG
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 2
44960: NEG
44961: PUSH
44962: LD_INT 2
44964: NEG
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44984: LD_ADDR_VAR 0 53
44988: PUSH
44989: LD_INT 0
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 0
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: LD_INT 0
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 1
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: LD_INT 1
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 1
45042: NEG
45043: PUSH
45044: LD_INT 0
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: LD_INT 1
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 1
45065: NEG
45066: PUSH
45067: LD_INT 2
45069: NEG
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 0
45077: PUSH
45078: LD_INT 2
45080: NEG
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 1
45088: PUSH
45089: LD_INT 1
45091: NEG
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 2
45099: PUSH
45100: LD_INT 0
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 2
45109: PUSH
45110: LD_INT 1
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 2
45119: PUSH
45120: LD_INT 2
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: LD_INT 2
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 0
45139: PUSH
45140: LD_INT 2
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 2
45160: NEG
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 2
45171: NEG
45172: PUSH
45173: LD_INT 1
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 2
45183: NEG
45184: PUSH
45185: LD_INT 2
45187: NEG
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45214: LD_ADDR_VAR 0 54
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 1
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 1
45272: NEG
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: LD_INT 1
45287: NEG
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 1
45295: NEG
45296: PUSH
45297: LD_INT 2
45299: NEG
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: LD_INT 2
45310: NEG
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 1
45318: PUSH
45319: LD_INT 1
45321: NEG
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 2
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 2
45339: PUSH
45340: LD_INT 1
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 2
45349: PUSH
45350: LD_INT 2
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: LD_INT 2
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 0
45369: PUSH
45370: LD_INT 2
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 1
45379: NEG
45380: PUSH
45381: LD_INT 1
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 2
45390: NEG
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 2
45401: NEG
45402: PUSH
45403: LD_INT 1
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 2
45413: NEG
45414: PUSH
45415: LD_INT 2
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45444: LD_ADDR_VAR 0 55
45448: PUSH
45449: LD_INT 0
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 0
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 1
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 1
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 0
45492: PUSH
45493: LD_INT 1
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 1
45502: NEG
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: LD_INT 1
45517: NEG
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 1
45525: NEG
45526: PUSH
45527: LD_INT 2
45529: NEG
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: LD_INT 2
45540: NEG
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 1
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 2
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 2
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 2
45579: PUSH
45580: LD_INT 2
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: LD_INT 2
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: LD_INT 2
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: NEG
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 2
45620: NEG
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 2
45631: NEG
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 2
45643: NEG
45644: PUSH
45645: LD_INT 2
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45674: LD_ADDR_VAR 0 56
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 1
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 1
45712: PUSH
45713: LD_INT 1
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: LD_INT 1
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 1
45732: NEG
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 1
45743: NEG
45744: PUSH
45745: LD_INT 1
45747: NEG
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 1
45755: NEG
45756: PUSH
45757: LD_INT 2
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: LD_INT 2
45770: NEG
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 1
45778: PUSH
45779: LD_INT 1
45781: NEG
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 2
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 2
45799: PUSH
45800: LD_INT 1
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 2
45809: PUSH
45810: LD_INT 2
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: LD_INT 2
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 0
45829: PUSH
45830: LD_INT 2
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 1
45839: NEG
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 2
45850: NEG
45851: PUSH
45852: LD_INT 0
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 2
45861: NEG
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 2
45873: NEG
45874: PUSH
45875: LD_INT 2
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45904: LD_ADDR_VAR 0 57
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 1
45985: NEG
45986: PUSH
45987: LD_INT 2
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 0
45997: PUSH
45998: LD_INT 2
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 2
46019: PUSH
46020: LD_INT 0
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 2
46029: PUSH
46030: LD_INT 1
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 2
46039: PUSH
46040: LD_INT 2
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: LD_INT 2
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: LD_INT 2
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: PUSH
46071: LD_INT 1
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 2
46080: NEG
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 2
46091: NEG
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 2
46103: NEG
46104: PUSH
46105: LD_INT 2
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46134: LD_ADDR_VAR 0 58
46138: PUSH
46139: LD_INT 0
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 1
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: PUSH
46173: LD_INT 1
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 1
46192: NEG
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: LD_INT 2
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: LD_INT 2
46230: NEG
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 1
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 2
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 2
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 2
46269: PUSH
46270: LD_INT 2
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 1
46279: PUSH
46280: LD_INT 2
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 0
46289: PUSH
46290: LD_INT 2
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: NEG
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 2
46310: NEG
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 2
46321: NEG
46322: PUSH
46323: LD_INT 1
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 2
46333: NEG
46334: PUSH
46335: LD_INT 2
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46364: LD_ADDR_VAR 0 59
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 1
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46452: LD_ADDR_VAR 0 60
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: LD_INT 1
46472: NEG
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 1
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46540: LD_ADDR_VAR 0 61
46544: PUSH
46545: LD_INT 0
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 0
46557: PUSH
46558: LD_INT 1
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 1
46568: PUSH
46569: LD_INT 0
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: LD_INT 1
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: LD_INT 0
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 1
46609: NEG
46610: PUSH
46611: LD_INT 1
46613: NEG
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46628: LD_ADDR_VAR 0 62
46632: PUSH
46633: LD_INT 0
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: LD_INT 1
46648: NEG
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 1
46656: PUSH
46657: LD_INT 0
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 1
46666: PUSH
46667: LD_INT 1
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: LD_INT 1
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 1
46686: NEG
46687: PUSH
46688: LD_INT 0
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: NEG
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46716: LD_ADDR_VAR 0 63
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 0
46733: PUSH
46734: LD_INT 1
46736: NEG
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 1
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: LD_INT 1
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 0
46764: PUSH
46765: LD_INT 1
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 1
46774: NEG
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46804: LD_ADDR_VAR 0 64
46808: PUSH
46809: LD_INT 0
46811: PUSH
46812: LD_INT 0
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: LD_INT 0
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 1
46842: PUSH
46843: LD_INT 1
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: LD_INT 1
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 1
46862: NEG
46863: PUSH
46864: LD_INT 0
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: ST_TO_ADDR
// end ; 1 :
46892: GO 52789
46894: LD_INT 1
46896: DOUBLE
46897: EQUAL
46898: IFTRUE 46902
46900: GO 49525
46902: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46903: LD_ADDR_VAR 0 11
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: LD_INT 3
46914: NEG
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: LD_INT 3
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: LD_INT 2
46936: NEG
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: LIST
46946: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46947: LD_ADDR_VAR 0 12
46951: PUSH
46952: LD_INT 2
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 3
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 3
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: LIST
46987: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46988: LD_ADDR_VAR 0 13
46992: PUSH
46993: LD_INT 3
46995: PUSH
46996: LD_INT 2
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 3
47005: PUSH
47006: LD_INT 3
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 2
47015: PUSH
47016: LD_INT 3
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: LIST
47027: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47028: LD_ADDR_VAR 0 14
47032: PUSH
47033: LD_INT 1
47035: PUSH
47036: LD_INT 3
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: LD_INT 3
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: NEG
47056: PUSH
47057: LD_INT 2
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: LIST
47068: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47069: LD_ADDR_VAR 0 15
47073: PUSH
47074: LD_INT 2
47076: NEG
47077: PUSH
47078: LD_INT 1
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 3
47087: NEG
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 3
47098: NEG
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: LIST
47112: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47113: LD_ADDR_VAR 0 16
47117: PUSH
47118: LD_INT 2
47120: NEG
47121: PUSH
47122: LD_INT 3
47124: NEG
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 3
47132: NEG
47133: PUSH
47134: LD_INT 2
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 3
47144: NEG
47145: PUSH
47146: LD_INT 3
47148: NEG
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: LIST
47158: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47159: LD_ADDR_VAR 0 17
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: LD_INT 3
47170: NEG
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: LD_INT 3
47181: NEG
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: LD_INT 2
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: LIST
47202: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47203: LD_ADDR_VAR 0 18
47207: PUSH
47208: LD_INT 2
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 3
47221: PUSH
47222: LD_INT 0
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 3
47231: PUSH
47232: LD_INT 1
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: LIST
47243: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47244: LD_ADDR_VAR 0 19
47248: PUSH
47249: LD_INT 3
47251: PUSH
47252: LD_INT 2
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 3
47261: PUSH
47262: LD_INT 3
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 2
47271: PUSH
47272: LD_INT 3
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: LIST
47283: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47284: LD_ADDR_VAR 0 20
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: LD_INT 3
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: LD_INT 3
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: NEG
47312: PUSH
47313: LD_INT 2
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: LIST
47324: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47325: LD_ADDR_VAR 0 21
47329: PUSH
47330: LD_INT 2
47332: NEG
47333: PUSH
47334: LD_INT 1
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 3
47343: NEG
47344: PUSH
47345: LD_INT 0
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 3
47354: NEG
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: LIST
47368: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47369: LD_ADDR_VAR 0 22
47373: PUSH
47374: LD_INT 2
47376: NEG
47377: PUSH
47378: LD_INT 3
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 3
47388: NEG
47389: PUSH
47390: LD_INT 2
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 3
47400: NEG
47401: PUSH
47402: LD_INT 3
47404: NEG
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: LIST
47414: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47415: LD_ADDR_VAR 0 23
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: LD_INT 3
47425: NEG
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: LD_INT 4
47437: NEG
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: LD_INT 3
47448: NEG
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: LIST
47458: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47459: LD_ADDR_VAR 0 24
47463: PUSH
47464: LD_INT 3
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 3
47476: PUSH
47477: LD_INT 1
47479: NEG
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 4
47487: PUSH
47488: LD_INT 1
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: LIST
47499: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47500: LD_ADDR_VAR 0 25
47504: PUSH
47505: LD_INT 3
47507: PUSH
47508: LD_INT 3
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 4
47517: PUSH
47518: LD_INT 3
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 3
47527: PUSH
47528: LD_INT 4
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: LIST
47539: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47540: LD_ADDR_VAR 0 26
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: LD_INT 3
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 1
47557: PUSH
47558: LD_INT 4
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: LD_INT 3
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: LIST
47580: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47581: LD_ADDR_VAR 0 27
47585: PUSH
47586: LD_INT 3
47588: NEG
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 3
47599: NEG
47600: PUSH
47601: LD_INT 1
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 4
47610: NEG
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: LIST
47624: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47625: LD_ADDR_VAR 0 28
47629: PUSH
47630: LD_INT 3
47632: NEG
47633: PUSH
47634: LD_INT 3
47636: NEG
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 3
47644: NEG
47645: PUSH
47646: LD_INT 4
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 4
47656: NEG
47657: PUSH
47658: LD_INT 3
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: LIST
47670: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47671: LD_ADDR_VAR 0 29
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: LD_INT 3
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 0
47690: PUSH
47691: LD_INT 3
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: PUSH
47702: LD_INT 2
47704: NEG
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: NEG
47713: PUSH
47714: LD_INT 4
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 0
47724: PUSH
47725: LD_INT 4
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: LD_INT 3
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: NEG
47747: PUSH
47748: LD_INT 5
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: LD_INT 5
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: LD_INT 4
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: NEG
47781: PUSH
47782: LD_INT 6
47784: NEG
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: LD_INT 6
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: LD_INT 5
47806: NEG
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47826: LD_ADDR_VAR 0 30
47830: PUSH
47831: LD_INT 2
47833: PUSH
47834: LD_INT 1
47836: NEG
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 3
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 3
47854: PUSH
47855: LD_INT 1
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 3
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 4
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 4
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 4
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 5
47906: PUSH
47907: LD_INT 0
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 5
47916: PUSH
47917: LD_INT 1
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 5
47926: PUSH
47927: LD_INT 1
47929: NEG
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 6
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 6
47947: PUSH
47948: LD_INT 1
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47969: LD_ADDR_VAR 0 31
47973: PUSH
47974: LD_INT 3
47976: PUSH
47977: LD_INT 2
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 3
47986: PUSH
47987: LD_INT 3
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 2
47996: PUSH
47997: LD_INT 3
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 4
48006: PUSH
48007: LD_INT 3
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 4
48016: PUSH
48017: LD_INT 4
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 3
48026: PUSH
48027: LD_INT 4
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 5
48036: PUSH
48037: LD_INT 4
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 5
48046: PUSH
48047: LD_INT 5
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 4
48056: PUSH
48057: LD_INT 5
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 6
48066: PUSH
48067: LD_INT 5
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 6
48076: PUSH
48077: LD_INT 6
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 5
48086: PUSH
48087: LD_INT 6
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48108: LD_ADDR_VAR 0 32
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: LD_INT 3
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: LD_INT 3
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: NEG
48136: PUSH
48137: LD_INT 2
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: LD_INT 4
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 0
48156: PUSH
48157: LD_INT 4
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: LD_INT 3
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 1
48177: PUSH
48178: LD_INT 5
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: LD_INT 5
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 1
48197: NEG
48198: PUSH
48199: LD_INT 4
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 1
48208: PUSH
48209: LD_INT 6
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: LD_INT 6
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 1
48228: NEG
48229: PUSH
48230: LD_INT 5
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48251: LD_ADDR_VAR 0 33
48255: PUSH
48256: LD_INT 2
48258: NEG
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 3
48269: NEG
48270: PUSH
48271: LD_INT 0
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 3
48280: NEG
48281: PUSH
48282: LD_INT 1
48284: NEG
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 3
48292: NEG
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 4
48303: NEG
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 4
48314: NEG
48315: PUSH
48316: LD_INT 1
48318: NEG
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 4
48326: NEG
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 5
48337: NEG
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 5
48348: NEG
48349: PUSH
48350: LD_INT 1
48352: NEG
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 5
48360: NEG
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 6
48371: NEG
48372: PUSH
48373: LD_INT 0
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 6
48382: NEG
48383: PUSH
48384: LD_INT 1
48386: NEG
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48406: LD_ADDR_VAR 0 34
48410: PUSH
48411: LD_INT 2
48413: NEG
48414: PUSH
48415: LD_INT 3
48417: NEG
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 3
48425: NEG
48426: PUSH
48427: LD_INT 2
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 3
48437: NEG
48438: PUSH
48439: LD_INT 3
48441: NEG
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 3
48449: NEG
48450: PUSH
48451: LD_INT 4
48453: NEG
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 4
48461: NEG
48462: PUSH
48463: LD_INT 3
48465: NEG
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 4
48473: NEG
48474: PUSH
48475: LD_INT 4
48477: NEG
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 4
48485: NEG
48486: PUSH
48487: LD_INT 5
48489: NEG
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 5
48497: NEG
48498: PUSH
48499: LD_INT 4
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 5
48509: NEG
48510: PUSH
48511: LD_INT 5
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 5
48521: NEG
48522: PUSH
48523: LD_INT 6
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 6
48533: NEG
48534: PUSH
48535: LD_INT 5
48537: NEG
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 6
48545: NEG
48546: PUSH
48547: LD_INT 6
48549: NEG
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48569: LD_ADDR_VAR 0 41
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: LD_INT 2
48579: NEG
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: LD_INT 3
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 1
48599: PUSH
48600: LD_INT 2
48602: NEG
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: LIST
48612: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48613: LD_ADDR_VAR 0 42
48617: PUSH
48618: LD_INT 2
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 2
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 3
48641: PUSH
48642: LD_INT 1
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: LIST
48653: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48654: LD_ADDR_VAR 0 43
48658: PUSH
48659: LD_INT 2
48661: PUSH
48662: LD_INT 2
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 3
48671: PUSH
48672: LD_INT 2
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 2
48681: PUSH
48682: LD_INT 3
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: LIST
48693: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48694: LD_ADDR_VAR 0 44
48698: PUSH
48699: LD_INT 0
48701: PUSH
48702: LD_INT 2
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: LD_INT 3
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 1
48721: NEG
48722: PUSH
48723: LD_INT 2
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: LIST
48734: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48735: LD_ADDR_VAR 0 45
48739: PUSH
48740: LD_INT 2
48742: NEG
48743: PUSH
48744: LD_INT 0
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 2
48753: NEG
48754: PUSH
48755: LD_INT 1
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 3
48764: NEG
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: LIST
48778: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48779: LD_ADDR_VAR 0 46
48783: PUSH
48784: LD_INT 2
48786: NEG
48787: PUSH
48788: LD_INT 2
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 2
48798: NEG
48799: PUSH
48800: LD_INT 3
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 3
48810: NEG
48811: PUSH
48812: LD_INT 2
48814: NEG
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: LIST
48824: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48825: LD_ADDR_VAR 0 47
48829: PUSH
48830: LD_INT 2
48832: NEG
48833: PUSH
48834: LD_INT 3
48836: NEG
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 1
48844: NEG
48845: PUSH
48846: LD_INT 3
48848: NEG
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48858: LD_ADDR_VAR 0 48
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: LD_INT 2
48868: NEG
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 2
48876: PUSH
48877: LD_INT 1
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48889: LD_ADDR_VAR 0 49
48893: PUSH
48894: LD_INT 3
48896: PUSH
48897: LD_INT 1
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 3
48906: PUSH
48907: LD_INT 2
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48918: LD_ADDR_VAR 0 50
48922: PUSH
48923: LD_INT 2
48925: PUSH
48926: LD_INT 3
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: LD_INT 3
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48947: LD_ADDR_VAR 0 51
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: LD_INT 2
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 2
48965: NEG
48966: PUSH
48967: LD_INT 1
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48978: LD_ADDR_VAR 0 52
48982: PUSH
48983: LD_INT 3
48985: NEG
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 3
48997: NEG
48998: PUSH
48999: LD_INT 2
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49011: LD_ADDR_VAR 0 53
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: LD_INT 3
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: LD_INT 3
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: LD_INT 2
49044: NEG
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: LIST
49054: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49055: LD_ADDR_VAR 0 54
49059: PUSH
49060: LD_INT 2
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 3
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 3
49083: PUSH
49084: LD_INT 1
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: LIST
49095: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49096: LD_ADDR_VAR 0 55
49100: PUSH
49101: LD_INT 3
49103: PUSH
49104: LD_INT 2
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 3
49113: PUSH
49114: LD_INT 3
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 2
49123: PUSH
49124: LD_INT 3
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: LIST
49135: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49136: LD_ADDR_VAR 0 56
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: LD_INT 3
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: LD_INT 3
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: LD_INT 2
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: LIST
49176: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49177: LD_ADDR_VAR 0 57
49181: PUSH
49182: LD_INT 2
49184: NEG
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 3
49195: NEG
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 3
49206: NEG
49207: PUSH
49208: LD_INT 1
49210: NEG
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: LIST
49220: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49221: LD_ADDR_VAR 0 58
49225: PUSH
49226: LD_INT 2
49228: NEG
49229: PUSH
49230: LD_INT 3
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 3
49240: NEG
49241: PUSH
49242: LD_INT 2
49244: NEG
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 3
49252: NEG
49253: PUSH
49254: LD_INT 3
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: LIST
49266: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49267: LD_ADDR_VAR 0 59
49271: PUSH
49272: LD_INT 1
49274: NEG
49275: PUSH
49276: LD_INT 2
49278: NEG
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: LD_INT 2
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 1
49297: PUSH
49298: LD_INT 1
49300: NEG
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: LIST
49310: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49311: LD_ADDR_VAR 0 60
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 2
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 2
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: LIST
49351: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49352: LD_ADDR_VAR 0 61
49356: PUSH
49357: LD_INT 2
49359: PUSH
49360: LD_INT 1
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 2
49369: PUSH
49370: LD_INT 2
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 1
49379: PUSH
49380: LD_INT 2
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: LIST
49391: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49392: LD_ADDR_VAR 0 62
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: LD_INT 2
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: LD_INT 2
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: NEG
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: LIST
49432: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49433: LD_ADDR_VAR 0 63
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 2
49451: NEG
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 2
49462: NEG
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: LIST
49476: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49477: LD_ADDR_VAR 0 64
49481: PUSH
49482: LD_INT 1
49484: NEG
49485: PUSH
49486: LD_INT 2
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 2
49496: NEG
49497: PUSH
49498: LD_INT 1
49500: NEG
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 2
49508: NEG
49509: PUSH
49510: LD_INT 2
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: LIST
49522: ST_TO_ADDR
// end ; 2 :
49523: GO 52789
49525: LD_INT 2
49527: DOUBLE
49528: EQUAL
49529: IFTRUE 49533
49531: GO 52788
49533: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49534: LD_ADDR_VAR 0 29
49538: PUSH
49539: LD_INT 4
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 4
49551: PUSH
49552: LD_INT 1
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 5
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 5
49572: PUSH
49573: LD_INT 1
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 4
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 3
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 3
49602: PUSH
49603: LD_INT 1
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 3
49613: PUSH
49614: LD_INT 2
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 5
49624: PUSH
49625: LD_INT 2
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 3
49634: PUSH
49635: LD_INT 3
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 3
49644: PUSH
49645: LD_INT 2
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 4
49654: PUSH
49655: LD_INT 3
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 4
49664: PUSH
49665: LD_INT 4
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 3
49674: PUSH
49675: LD_INT 4
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 2
49684: PUSH
49685: LD_INT 3
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 2
49694: PUSH
49695: LD_INT 2
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 4
49704: PUSH
49705: LD_INT 2
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 2
49714: PUSH
49715: LD_INT 4
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: LD_INT 4
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: LD_INT 3
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: LD_INT 4
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: LD_INT 5
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 0
49764: PUSH
49765: LD_INT 5
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: LD_INT 4
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: NEG
49786: PUSH
49787: LD_INT 3
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 2
49796: PUSH
49797: LD_INT 5
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 2
49806: NEG
49807: PUSH
49808: LD_INT 3
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 3
49817: NEG
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 3
49828: NEG
49829: PUSH
49830: LD_INT 1
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 2
49840: NEG
49841: PUSH
49842: LD_INT 0
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 2
49851: NEG
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 3
49862: NEG
49863: PUSH
49864: LD_INT 1
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 4
49873: NEG
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 4
49884: NEG
49885: PUSH
49886: LD_INT 1
49888: NEG
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 4
49896: NEG
49897: PUSH
49898: LD_INT 2
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 2
49908: NEG
49909: PUSH
49910: LD_INT 2
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 4
49919: NEG
49920: PUSH
49921: LD_INT 4
49923: NEG
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 4
49931: NEG
49932: PUSH
49933: LD_INT 5
49935: NEG
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 3
49943: NEG
49944: PUSH
49945: LD_INT 4
49947: NEG
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 3
49955: NEG
49956: PUSH
49957: LD_INT 3
49959: NEG
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 4
49967: NEG
49968: PUSH
49969: LD_INT 3
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 5
49979: NEG
49980: PUSH
49981: LD_INT 4
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 5
49991: NEG
49992: PUSH
49993: LD_INT 5
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 3
50003: NEG
50004: PUSH
50005: LD_INT 5
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 5
50015: NEG
50016: PUSH
50017: LD_INT 3
50019: NEG
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50072: LD_ADDR_VAR 0 30
50076: PUSH
50077: LD_INT 4
50079: PUSH
50080: LD_INT 4
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 4
50089: PUSH
50090: LD_INT 3
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 5
50099: PUSH
50100: LD_INT 4
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 5
50109: PUSH
50110: LD_INT 5
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 4
50119: PUSH
50120: LD_INT 5
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 3
50129: PUSH
50130: LD_INT 4
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 3
50139: PUSH
50140: LD_INT 3
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 5
50149: PUSH
50150: LD_INT 3
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 3
50159: PUSH
50160: LD_INT 5
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: LD_INT 3
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 0
50179: PUSH
50180: LD_INT 2
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 1
50189: PUSH
50190: LD_INT 3
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 1
50199: PUSH
50200: LD_INT 4
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 0
50209: PUSH
50210: LD_INT 4
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 1
50219: NEG
50220: PUSH
50221: LD_INT 3
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: LD_INT 1
50230: NEG
50231: PUSH
50232: LD_INT 2
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 2
50241: PUSH
50242: LD_INT 4
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: LD_INT 2
50251: NEG
50252: PUSH
50253: LD_INT 2
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 4
50262: NEG
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 4
50273: NEG
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 3
50285: NEG
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 3
50296: NEG
50297: PUSH
50298: LD_INT 1
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 4
50307: NEG
50308: PUSH
50309: LD_INT 1
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 5
50318: NEG
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 5
50329: NEG
50330: PUSH
50331: LD_INT 1
50333: NEG
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 5
50341: NEG
50342: PUSH
50343: LD_INT 2
50345: NEG
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 3
50353: NEG
50354: PUSH
50355: LD_INT 2
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 3
50364: NEG
50365: PUSH
50366: LD_INT 3
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 3
50376: NEG
50377: PUSH
50378: LD_INT 4
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 2
50388: NEG
50389: PUSH
50390: LD_INT 3
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 2
50400: NEG
50401: PUSH
50402: LD_INT 2
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 3
50412: NEG
50413: PUSH
50414: LD_INT 2
50416: NEG
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 4
50424: NEG
50425: PUSH
50426: LD_INT 3
50428: NEG
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 4
50436: NEG
50437: PUSH
50438: LD_INT 4
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 2
50448: NEG
50449: PUSH
50450: LD_INT 4
50452: NEG
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 4
50460: NEG
50461: PUSH
50462: LD_INT 2
50464: NEG
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: LD_INT 4
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: LD_INT 5
50486: NEG
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: LD_INT 4
50497: NEG
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: PUSH
50506: LD_INT 3
50508: NEG
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 0
50516: PUSH
50517: LD_INT 3
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: NEG
50528: PUSH
50529: LD_INT 4
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 1
50539: NEG
50540: PUSH
50541: LD_INT 5
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 2
50551: PUSH
50552: LD_INT 3
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 2
50562: NEG
50563: PUSH
50564: LD_INT 5
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50619: LD_ADDR_VAR 0 31
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: LD_INT 4
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: LD_INT 3
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 1
50646: PUSH
50647: LD_INT 4
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 1
50656: PUSH
50657: LD_INT 5
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 0
50666: PUSH
50667: LD_INT 5
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 1
50676: NEG
50677: PUSH
50678: LD_INT 4
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: LD_INT 3
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 2
50698: PUSH
50699: LD_INT 5
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 2
50708: NEG
50709: PUSH
50710: LD_INT 3
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 3
50719: NEG
50720: PUSH
50721: LD_INT 0
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 3
50730: NEG
50731: PUSH
50732: LD_INT 1
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 2
50742: NEG
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 2
50753: NEG
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 3
50764: NEG
50765: PUSH
50766: LD_INT 1
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 4
50775: NEG
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 4
50786: NEG
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 4
50798: NEG
50799: PUSH
50800: LD_INT 2
50802: NEG
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 2
50810: NEG
50811: PUSH
50812: LD_INT 2
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 4
50821: NEG
50822: PUSH
50823: LD_INT 4
50825: NEG
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 4
50833: NEG
50834: PUSH
50835: LD_INT 5
50837: NEG
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 3
50845: NEG
50846: PUSH
50847: LD_INT 4
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 3
50857: NEG
50858: PUSH
50859: LD_INT 3
50861: NEG
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 4
50869: NEG
50870: PUSH
50871: LD_INT 3
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 5
50881: NEG
50882: PUSH
50883: LD_INT 4
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 5
50893: NEG
50894: PUSH
50895: LD_INT 5
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 3
50905: NEG
50906: PUSH
50907: LD_INT 5
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 5
50917: NEG
50918: PUSH
50919: LD_INT 3
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 0
50929: PUSH
50930: LD_INT 3
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 0
50940: PUSH
50941: LD_INT 4
50943: NEG
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: LD_INT 3
50954: NEG
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: PUSH
50963: LD_INT 2
50965: NEG
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: LD_INT 2
50976: NEG
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 1
50984: NEG
50985: PUSH
50986: LD_INT 3
50988: NEG
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 1
50996: NEG
50997: PUSH
50998: LD_INT 4
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 2
51008: PUSH
51009: LD_INT 2
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 2
51019: NEG
51020: PUSH
51021: LD_INT 4
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 4
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 4
51041: PUSH
51042: LD_INT 1
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 5
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 5
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 4
51072: PUSH
51073: LD_INT 1
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 3
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 3
51092: PUSH
51093: LD_INT 1
51095: NEG
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 3
51103: PUSH
51104: LD_INT 2
51106: NEG
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 5
51114: PUSH
51115: LD_INT 2
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51169: LD_ADDR_VAR 0 32
51173: PUSH
51174: LD_INT 4
51176: NEG
51177: PUSH
51178: LD_INT 0
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 4
51187: NEG
51188: PUSH
51189: LD_INT 1
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 3
51199: NEG
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 3
51210: NEG
51211: PUSH
51212: LD_INT 1
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 4
51221: NEG
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 5
51232: NEG
51233: PUSH
51234: LD_INT 0
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 5
51243: NEG
51244: PUSH
51245: LD_INT 1
51247: NEG
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 5
51255: NEG
51256: PUSH
51257: LD_INT 2
51259: NEG
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 3
51267: NEG
51268: PUSH
51269: LD_INT 2
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 3
51278: NEG
51279: PUSH
51280: LD_INT 3
51282: NEG
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 3
51290: NEG
51291: PUSH
51292: LD_INT 4
51294: NEG
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 2
51302: NEG
51303: PUSH
51304: LD_INT 3
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 2
51314: NEG
51315: PUSH
51316: LD_INT 2
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 3
51326: NEG
51327: PUSH
51328: LD_INT 2
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 4
51338: NEG
51339: PUSH
51340: LD_INT 3
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 4
51350: NEG
51351: PUSH
51352: LD_INT 4
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 2
51362: NEG
51363: PUSH
51364: LD_INT 4
51366: NEG
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 4
51374: NEG
51375: PUSH
51376: LD_INT 2
51378: NEG
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: LD_INT 4
51389: NEG
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: LD_INT 5
51400: NEG
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 1
51408: PUSH
51409: LD_INT 4
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: LD_INT 3
51422: NEG
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: LD_INT 3
51433: NEG
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 1
51441: NEG
51442: PUSH
51443: LD_INT 4
51445: NEG
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: LD_INT 5
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 2
51465: PUSH
51466: LD_INT 3
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 2
51476: NEG
51477: PUSH
51478: LD_INT 5
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 3
51488: PUSH
51489: LD_INT 0
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: LD_INT 3
51498: PUSH
51499: LD_INT 1
51501: NEG
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 4
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 4
51519: PUSH
51520: LD_INT 1
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 3
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 2
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 2
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 2
51560: PUSH
51561: LD_INT 2
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 4
51571: PUSH
51572: LD_INT 2
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 4
51581: PUSH
51582: LD_INT 4
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 4
51591: PUSH
51592: LD_INT 3
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 5
51601: PUSH
51602: LD_INT 4
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 5
51611: PUSH
51612: LD_INT 5
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 4
51621: PUSH
51622: LD_INT 5
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 3
51631: PUSH
51632: LD_INT 4
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 3
51641: PUSH
51642: LD_INT 3
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 5
51651: PUSH
51652: LD_INT 3
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 3
51661: PUSH
51662: LD_INT 5
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51716: LD_ADDR_VAR 0 33
51720: PUSH
51721: LD_INT 4
51723: NEG
51724: PUSH
51725: LD_INT 4
51727: NEG
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 4
51735: NEG
51736: PUSH
51737: LD_INT 5
51739: NEG
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 3
51747: NEG
51748: PUSH
51749: LD_INT 4
51751: NEG
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 3
51759: NEG
51760: PUSH
51761: LD_INT 3
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 4
51771: NEG
51772: PUSH
51773: LD_INT 3
51775: NEG
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 5
51783: NEG
51784: PUSH
51785: LD_INT 4
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 5
51795: NEG
51796: PUSH
51797: LD_INT 5
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 3
51807: NEG
51808: PUSH
51809: LD_INT 5
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 5
51819: NEG
51820: PUSH
51821: LD_INT 3
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: LD_INT 3
51834: NEG
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: LD_INT 4
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: LD_INT 3
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: PUSH
51865: LD_INT 2
51867: NEG
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: LD_INT 2
51878: NEG
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 1
51886: NEG
51887: PUSH
51888: LD_INT 3
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: NEG
51899: PUSH
51900: LD_INT 4
51902: NEG
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 2
51910: PUSH
51911: LD_INT 2
51913: NEG
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 2
51921: NEG
51922: PUSH
51923: LD_INT 4
51925: NEG
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 4
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 4
51943: PUSH
51944: LD_INT 1
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 5
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 5
51964: PUSH
51965: LD_INT 1
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 4
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 3
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 3
51994: PUSH
51995: LD_INT 1
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 3
52005: PUSH
52006: LD_INT 2
52008: NEG
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 5
52016: PUSH
52017: LD_INT 2
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 3
52026: PUSH
52027: LD_INT 3
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 3
52036: PUSH
52037: LD_INT 2
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 4
52046: PUSH
52047: LD_INT 3
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 4
52056: PUSH
52057: LD_INT 4
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 3
52066: PUSH
52067: LD_INT 4
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 2
52076: PUSH
52077: LD_INT 3
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 2
52086: PUSH
52087: LD_INT 2
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 4
52096: PUSH
52097: LD_INT 2
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 2
52106: PUSH
52107: LD_INT 4
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: LD_INT 4
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: LD_INT 3
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: LD_INT 4
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 1
52146: PUSH
52147: LD_INT 5
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 0
52156: PUSH
52157: LD_INT 5
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 1
52166: NEG
52167: PUSH
52168: LD_INT 4
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: LD_INT 3
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 2
52188: PUSH
52189: LD_INT 5
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 2
52198: NEG
52199: PUSH
52200: LD_INT 3
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52254: LD_ADDR_VAR 0 34
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: LD_INT 4
52264: NEG
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: LD_INT 5
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 1
52283: PUSH
52284: LD_INT 4
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: LD_INT 3
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 0
52305: PUSH
52306: LD_INT 3
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 1
52316: NEG
52317: PUSH
52318: LD_INT 4
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: LD_INT 5
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 2
52340: PUSH
52341: LD_INT 3
52343: NEG
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 2
52351: NEG
52352: PUSH
52353: LD_INT 5
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 3
52363: PUSH
52364: LD_INT 0
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 3
52373: PUSH
52374: LD_INT 1
52376: NEG
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 4
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 4
52394: PUSH
52395: LD_INT 1
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 3
52404: PUSH
52405: LD_INT 1
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 2
52414: PUSH
52415: LD_INT 0
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 2
52424: PUSH
52425: LD_INT 1
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 2
52435: PUSH
52436: LD_INT 2
52438: NEG
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 4
52446: PUSH
52447: LD_INT 2
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 4
52456: PUSH
52457: LD_INT 4
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 4
52466: PUSH
52467: LD_INT 3
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 5
52476: PUSH
52477: LD_INT 4
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 5
52486: PUSH
52487: LD_INT 5
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 4
52496: PUSH
52497: LD_INT 5
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: PUSH
52504: LD_INT 3
52506: PUSH
52507: LD_INT 4
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 3
52516: PUSH
52517: LD_INT 3
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 5
52526: PUSH
52527: LD_INT 3
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 3
52536: PUSH
52537: LD_INT 5
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: LD_INT 3
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: LD_INT 2
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 1
52566: PUSH
52567: LD_INT 3
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 1
52576: PUSH
52577: LD_INT 4
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: LD_INT 4
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 1
52596: NEG
52597: PUSH
52598: LD_INT 3
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: LD_INT 2
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 2
52618: PUSH
52619: LD_INT 4
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 2
52628: NEG
52629: PUSH
52630: LD_INT 2
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 4
52639: NEG
52640: PUSH
52641: LD_INT 0
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 4
52650: NEG
52651: PUSH
52652: LD_INT 1
52654: NEG
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 3
52662: NEG
52663: PUSH
52664: LD_INT 0
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 3
52673: NEG
52674: PUSH
52675: LD_INT 1
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 4
52684: NEG
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 5
52695: NEG
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 5
52706: NEG
52707: PUSH
52708: LD_INT 1
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 5
52718: NEG
52719: PUSH
52720: LD_INT 2
52722: NEG
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 3
52730: NEG
52731: PUSH
52732: LD_INT 2
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: ST_TO_ADDR
// end ; end ;
52786: GO 52789
52788: POP
// case btype of b_depot , b_warehouse :
52789: LD_VAR 0 1
52793: PUSH
52794: LD_INT 0
52796: DOUBLE
52797: EQUAL
52798: IFTRUE 52808
52800: LD_INT 1
52802: DOUBLE
52803: EQUAL
52804: IFTRUE 52808
52806: GO 53009
52808: POP
// case nation of nation_american :
52809: LD_VAR 0 5
52813: PUSH
52814: LD_INT 1
52816: DOUBLE
52817: EQUAL
52818: IFTRUE 52822
52820: GO 52878
52822: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52823: LD_ADDR_VAR 0 9
52827: PUSH
52828: LD_VAR 0 11
52832: PUSH
52833: LD_VAR 0 12
52837: PUSH
52838: LD_VAR 0 13
52842: PUSH
52843: LD_VAR 0 14
52847: PUSH
52848: LD_VAR 0 15
52852: PUSH
52853: LD_VAR 0 16
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: PUSH
52866: LD_VAR 0 4
52870: PUSH
52871: LD_INT 1
52873: PLUS
52874: ARRAY
52875: ST_TO_ADDR
52876: GO 53007
52878: LD_INT 2
52880: DOUBLE
52881: EQUAL
52882: IFTRUE 52886
52884: GO 52942
52886: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52887: LD_ADDR_VAR 0 9
52891: PUSH
52892: LD_VAR 0 17
52896: PUSH
52897: LD_VAR 0 18
52901: PUSH
52902: LD_VAR 0 19
52906: PUSH
52907: LD_VAR 0 20
52911: PUSH
52912: LD_VAR 0 21
52916: PUSH
52917: LD_VAR 0 22
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: PUSH
52930: LD_VAR 0 4
52934: PUSH
52935: LD_INT 1
52937: PLUS
52938: ARRAY
52939: ST_TO_ADDR
52940: GO 53007
52942: LD_INT 3
52944: DOUBLE
52945: EQUAL
52946: IFTRUE 52950
52948: GO 53006
52950: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52951: LD_ADDR_VAR 0 9
52955: PUSH
52956: LD_VAR 0 23
52960: PUSH
52961: LD_VAR 0 24
52965: PUSH
52966: LD_VAR 0 25
52970: PUSH
52971: LD_VAR 0 26
52975: PUSH
52976: LD_VAR 0 27
52980: PUSH
52981: LD_VAR 0 28
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: PUSH
52994: LD_VAR 0 4
52998: PUSH
52999: LD_INT 1
53001: PLUS
53002: ARRAY
53003: ST_TO_ADDR
53004: GO 53007
53006: POP
53007: GO 53562
53009: LD_INT 2
53011: DOUBLE
53012: EQUAL
53013: IFTRUE 53023
53015: LD_INT 3
53017: DOUBLE
53018: EQUAL
53019: IFTRUE 53023
53021: GO 53079
53023: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53024: LD_ADDR_VAR 0 9
53028: PUSH
53029: LD_VAR 0 29
53033: PUSH
53034: LD_VAR 0 30
53038: PUSH
53039: LD_VAR 0 31
53043: PUSH
53044: LD_VAR 0 32
53048: PUSH
53049: LD_VAR 0 33
53053: PUSH
53054: LD_VAR 0 34
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: PUSH
53067: LD_VAR 0 4
53071: PUSH
53072: LD_INT 1
53074: PLUS
53075: ARRAY
53076: ST_TO_ADDR
53077: GO 53562
53079: LD_INT 16
53081: DOUBLE
53082: EQUAL
53083: IFTRUE 53141
53085: LD_INT 17
53087: DOUBLE
53088: EQUAL
53089: IFTRUE 53141
53091: LD_INT 18
53093: DOUBLE
53094: EQUAL
53095: IFTRUE 53141
53097: LD_INT 19
53099: DOUBLE
53100: EQUAL
53101: IFTRUE 53141
53103: LD_INT 22
53105: DOUBLE
53106: EQUAL
53107: IFTRUE 53141
53109: LD_INT 20
53111: DOUBLE
53112: EQUAL
53113: IFTRUE 53141
53115: LD_INT 21
53117: DOUBLE
53118: EQUAL
53119: IFTRUE 53141
53121: LD_INT 23
53123: DOUBLE
53124: EQUAL
53125: IFTRUE 53141
53127: LD_INT 24
53129: DOUBLE
53130: EQUAL
53131: IFTRUE 53141
53133: LD_INT 25
53135: DOUBLE
53136: EQUAL
53137: IFTRUE 53141
53139: GO 53197
53141: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53142: LD_ADDR_VAR 0 9
53146: PUSH
53147: LD_VAR 0 35
53151: PUSH
53152: LD_VAR 0 36
53156: PUSH
53157: LD_VAR 0 37
53161: PUSH
53162: LD_VAR 0 38
53166: PUSH
53167: LD_VAR 0 39
53171: PUSH
53172: LD_VAR 0 40
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: PUSH
53185: LD_VAR 0 4
53189: PUSH
53190: LD_INT 1
53192: PLUS
53193: ARRAY
53194: ST_TO_ADDR
53195: GO 53562
53197: LD_INT 6
53199: DOUBLE
53200: EQUAL
53201: IFTRUE 53253
53203: LD_INT 7
53205: DOUBLE
53206: EQUAL
53207: IFTRUE 53253
53209: LD_INT 8
53211: DOUBLE
53212: EQUAL
53213: IFTRUE 53253
53215: LD_INT 13
53217: DOUBLE
53218: EQUAL
53219: IFTRUE 53253
53221: LD_INT 12
53223: DOUBLE
53224: EQUAL
53225: IFTRUE 53253
53227: LD_INT 15
53229: DOUBLE
53230: EQUAL
53231: IFTRUE 53253
53233: LD_INT 11
53235: DOUBLE
53236: EQUAL
53237: IFTRUE 53253
53239: LD_INT 14
53241: DOUBLE
53242: EQUAL
53243: IFTRUE 53253
53245: LD_INT 10
53247: DOUBLE
53248: EQUAL
53249: IFTRUE 53253
53251: GO 53309
53253: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53254: LD_ADDR_VAR 0 9
53258: PUSH
53259: LD_VAR 0 41
53263: PUSH
53264: LD_VAR 0 42
53268: PUSH
53269: LD_VAR 0 43
53273: PUSH
53274: LD_VAR 0 44
53278: PUSH
53279: LD_VAR 0 45
53283: PUSH
53284: LD_VAR 0 46
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: PUSH
53297: LD_VAR 0 4
53301: PUSH
53302: LD_INT 1
53304: PLUS
53305: ARRAY
53306: ST_TO_ADDR
53307: GO 53562
53309: LD_INT 36
53311: DOUBLE
53312: EQUAL
53313: IFTRUE 53317
53315: GO 53373
53317: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53318: LD_ADDR_VAR 0 9
53322: PUSH
53323: LD_VAR 0 47
53327: PUSH
53328: LD_VAR 0 48
53332: PUSH
53333: LD_VAR 0 49
53337: PUSH
53338: LD_VAR 0 50
53342: PUSH
53343: LD_VAR 0 51
53347: PUSH
53348: LD_VAR 0 52
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: PUSH
53361: LD_VAR 0 4
53365: PUSH
53366: LD_INT 1
53368: PLUS
53369: ARRAY
53370: ST_TO_ADDR
53371: GO 53562
53373: LD_INT 4
53375: DOUBLE
53376: EQUAL
53377: IFTRUE 53399
53379: LD_INT 5
53381: DOUBLE
53382: EQUAL
53383: IFTRUE 53399
53385: LD_INT 34
53387: DOUBLE
53388: EQUAL
53389: IFTRUE 53399
53391: LD_INT 37
53393: DOUBLE
53394: EQUAL
53395: IFTRUE 53399
53397: GO 53455
53399: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53400: LD_ADDR_VAR 0 9
53404: PUSH
53405: LD_VAR 0 53
53409: PUSH
53410: LD_VAR 0 54
53414: PUSH
53415: LD_VAR 0 55
53419: PUSH
53420: LD_VAR 0 56
53424: PUSH
53425: LD_VAR 0 57
53429: PUSH
53430: LD_VAR 0 58
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: PUSH
53443: LD_VAR 0 4
53447: PUSH
53448: LD_INT 1
53450: PLUS
53451: ARRAY
53452: ST_TO_ADDR
53453: GO 53562
53455: LD_INT 31
53457: DOUBLE
53458: EQUAL
53459: IFTRUE 53505
53461: LD_INT 32
53463: DOUBLE
53464: EQUAL
53465: IFTRUE 53505
53467: LD_INT 33
53469: DOUBLE
53470: EQUAL
53471: IFTRUE 53505
53473: LD_INT 27
53475: DOUBLE
53476: EQUAL
53477: IFTRUE 53505
53479: LD_INT 26
53481: DOUBLE
53482: EQUAL
53483: IFTRUE 53505
53485: LD_INT 28
53487: DOUBLE
53488: EQUAL
53489: IFTRUE 53505
53491: LD_INT 29
53493: DOUBLE
53494: EQUAL
53495: IFTRUE 53505
53497: LD_INT 30
53499: DOUBLE
53500: EQUAL
53501: IFTRUE 53505
53503: GO 53561
53505: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53506: LD_ADDR_VAR 0 9
53510: PUSH
53511: LD_VAR 0 59
53515: PUSH
53516: LD_VAR 0 60
53520: PUSH
53521: LD_VAR 0 61
53525: PUSH
53526: LD_VAR 0 62
53530: PUSH
53531: LD_VAR 0 63
53535: PUSH
53536: LD_VAR 0 64
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: PUSH
53549: LD_VAR 0 4
53553: PUSH
53554: LD_INT 1
53556: PLUS
53557: ARRAY
53558: ST_TO_ADDR
53559: GO 53562
53561: POP
// temp_list2 = [ ] ;
53562: LD_ADDR_VAR 0 10
53566: PUSH
53567: EMPTY
53568: ST_TO_ADDR
// for i in temp_list do
53569: LD_ADDR_VAR 0 8
53573: PUSH
53574: LD_VAR 0 9
53578: PUSH
53579: FOR_IN
53580: IFFALSE 53632
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53582: LD_ADDR_VAR 0 10
53586: PUSH
53587: LD_VAR 0 10
53591: PUSH
53592: LD_VAR 0 8
53596: PUSH
53597: LD_INT 1
53599: ARRAY
53600: PUSH
53601: LD_VAR 0 2
53605: PLUS
53606: PUSH
53607: LD_VAR 0 8
53611: PUSH
53612: LD_INT 2
53614: ARRAY
53615: PUSH
53616: LD_VAR 0 3
53620: PLUS
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: EMPTY
53627: LIST
53628: ADD
53629: ST_TO_ADDR
53630: GO 53579
53632: POP
53633: POP
// result = temp_list2 ;
53634: LD_ADDR_VAR 0 7
53638: PUSH
53639: LD_VAR 0 10
53643: ST_TO_ADDR
// end ;
53644: LD_VAR 0 7
53648: RET
// export function EnemyInRange ( unit , dist ) ; begin
53649: LD_INT 0
53651: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53652: LD_ADDR_VAR 0 3
53656: PUSH
53657: LD_VAR 0 1
53661: PPUSH
53662: CALL_OW 255
53666: PPUSH
53667: LD_VAR 0 1
53671: PPUSH
53672: CALL_OW 250
53676: PPUSH
53677: LD_VAR 0 1
53681: PPUSH
53682: CALL_OW 251
53686: PPUSH
53687: LD_VAR 0 2
53691: PPUSH
53692: CALL 27045 0 4
53696: PUSH
53697: LD_INT 4
53699: ARRAY
53700: ST_TO_ADDR
// end ;
53701: LD_VAR 0 3
53705: RET
// export function PlayerSeeMe ( unit ) ; begin
53706: LD_INT 0
53708: PPUSH
// result := See ( your_side , unit ) ;
53709: LD_ADDR_VAR 0 2
53713: PUSH
53714: LD_OWVAR 2
53718: PPUSH
53719: LD_VAR 0 1
53723: PPUSH
53724: CALL_OW 292
53728: ST_TO_ADDR
// end ;
53729: LD_VAR 0 2
53733: RET
// export function ReverseDir ( unit ) ; begin
53734: LD_INT 0
53736: PPUSH
// if not unit then
53737: LD_VAR 0 1
53741: NOT
53742: IFFALSE 53746
// exit ;
53744: GO 53769
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53746: LD_ADDR_VAR 0 2
53750: PUSH
53751: LD_VAR 0 1
53755: PPUSH
53756: CALL_OW 254
53760: PUSH
53761: LD_INT 3
53763: PLUS
53764: PUSH
53765: LD_INT 6
53767: MOD
53768: ST_TO_ADDR
// end ;
53769: LD_VAR 0 2
53773: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53774: LD_INT 0
53776: PPUSH
53777: PPUSH
53778: PPUSH
53779: PPUSH
53780: PPUSH
// if not hexes then
53781: LD_VAR 0 2
53785: NOT
53786: IFFALSE 53790
// exit ;
53788: GO 53938
// dist := 9999 ;
53790: LD_ADDR_VAR 0 5
53794: PUSH
53795: LD_INT 9999
53797: ST_TO_ADDR
// for i = 1 to hexes do
53798: LD_ADDR_VAR 0 4
53802: PUSH
53803: DOUBLE
53804: LD_INT 1
53806: DEC
53807: ST_TO_ADDR
53808: LD_VAR 0 2
53812: PUSH
53813: FOR_TO
53814: IFFALSE 53926
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53816: LD_VAR 0 1
53820: PPUSH
53821: LD_VAR 0 2
53825: PUSH
53826: LD_VAR 0 4
53830: ARRAY
53831: PUSH
53832: LD_INT 1
53834: ARRAY
53835: PPUSH
53836: LD_VAR 0 2
53840: PUSH
53841: LD_VAR 0 4
53845: ARRAY
53846: PUSH
53847: LD_INT 2
53849: ARRAY
53850: PPUSH
53851: CALL_OW 297
53855: PUSH
53856: LD_VAR 0 5
53860: LESS
53861: IFFALSE 53924
// begin hex := hexes [ i ] ;
53863: LD_ADDR_VAR 0 7
53867: PUSH
53868: LD_VAR 0 2
53872: PUSH
53873: LD_VAR 0 4
53877: ARRAY
53878: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53879: LD_ADDR_VAR 0 5
53883: PUSH
53884: LD_VAR 0 1
53888: PPUSH
53889: LD_VAR 0 2
53893: PUSH
53894: LD_VAR 0 4
53898: ARRAY
53899: PUSH
53900: LD_INT 1
53902: ARRAY
53903: PPUSH
53904: LD_VAR 0 2
53908: PUSH
53909: LD_VAR 0 4
53913: ARRAY
53914: PUSH
53915: LD_INT 2
53917: ARRAY
53918: PPUSH
53919: CALL_OW 297
53923: ST_TO_ADDR
// end ; end ;
53924: GO 53813
53926: POP
53927: POP
// result := hex ;
53928: LD_ADDR_VAR 0 3
53932: PUSH
53933: LD_VAR 0 7
53937: ST_TO_ADDR
// end ;
53938: LD_VAR 0 3
53942: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53943: LD_INT 0
53945: PPUSH
53946: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53947: LD_VAR 0 1
53951: NOT
53952: PUSH
53953: LD_VAR 0 1
53957: PUSH
53958: LD_INT 21
53960: PUSH
53961: LD_INT 2
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 23
53970: PUSH
53971: LD_INT 2
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PPUSH
53982: CALL_OW 69
53986: IN
53987: NOT
53988: OR
53989: IFFALSE 53993
// exit ;
53991: GO 54040
// for i = 1 to 3 do
53993: LD_ADDR_VAR 0 3
53997: PUSH
53998: DOUBLE
53999: LD_INT 1
54001: DEC
54002: ST_TO_ADDR
54003: LD_INT 3
54005: PUSH
54006: FOR_TO
54007: IFFALSE 54038
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54009: LD_VAR 0 1
54013: PPUSH
54014: CALL_OW 250
54018: PPUSH
54019: LD_VAR 0 1
54023: PPUSH
54024: CALL_OW 251
54028: PPUSH
54029: LD_INT 1
54031: PPUSH
54032: CALL_OW 453
54036: GO 54006
54038: POP
54039: POP
// end ;
54040: LD_VAR 0 2
54044: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54045: LD_INT 0
54047: PPUSH
54048: PPUSH
54049: PPUSH
54050: PPUSH
54051: PPUSH
54052: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54053: LD_VAR 0 1
54057: NOT
54058: PUSH
54059: LD_VAR 0 2
54063: NOT
54064: OR
54065: PUSH
54066: LD_VAR 0 1
54070: PPUSH
54071: CALL_OW 314
54075: OR
54076: IFFALSE 54080
// exit ;
54078: GO 54521
// x := GetX ( enemy_unit ) ;
54080: LD_ADDR_VAR 0 7
54084: PUSH
54085: LD_VAR 0 2
54089: PPUSH
54090: CALL_OW 250
54094: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54095: LD_ADDR_VAR 0 8
54099: PUSH
54100: LD_VAR 0 2
54104: PPUSH
54105: CALL_OW 251
54109: ST_TO_ADDR
// if not x or not y then
54110: LD_VAR 0 7
54114: NOT
54115: PUSH
54116: LD_VAR 0 8
54120: NOT
54121: OR
54122: IFFALSE 54126
// exit ;
54124: GO 54521
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54126: LD_ADDR_VAR 0 6
54130: PUSH
54131: LD_VAR 0 7
54135: PPUSH
54136: LD_INT 0
54138: PPUSH
54139: LD_INT 4
54141: PPUSH
54142: CALL_OW 272
54146: PUSH
54147: LD_VAR 0 8
54151: PPUSH
54152: LD_INT 0
54154: PPUSH
54155: LD_INT 4
54157: PPUSH
54158: CALL_OW 273
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_VAR 0 7
54171: PPUSH
54172: LD_INT 1
54174: PPUSH
54175: LD_INT 4
54177: PPUSH
54178: CALL_OW 272
54182: PUSH
54183: LD_VAR 0 8
54187: PPUSH
54188: LD_INT 1
54190: PPUSH
54191: LD_INT 4
54193: PPUSH
54194: CALL_OW 273
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_VAR 0 7
54207: PPUSH
54208: LD_INT 2
54210: PPUSH
54211: LD_INT 4
54213: PPUSH
54214: CALL_OW 272
54218: PUSH
54219: LD_VAR 0 8
54223: PPUSH
54224: LD_INT 2
54226: PPUSH
54227: LD_INT 4
54229: PPUSH
54230: CALL_OW 273
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_VAR 0 7
54243: PPUSH
54244: LD_INT 3
54246: PPUSH
54247: LD_INT 4
54249: PPUSH
54250: CALL_OW 272
54254: PUSH
54255: LD_VAR 0 8
54259: PPUSH
54260: LD_INT 3
54262: PPUSH
54263: LD_INT 4
54265: PPUSH
54266: CALL_OW 273
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_VAR 0 7
54279: PPUSH
54280: LD_INT 4
54282: PPUSH
54283: LD_INT 4
54285: PPUSH
54286: CALL_OW 272
54290: PUSH
54291: LD_VAR 0 8
54295: PPUSH
54296: LD_INT 4
54298: PPUSH
54299: LD_INT 4
54301: PPUSH
54302: CALL_OW 273
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_VAR 0 7
54315: PPUSH
54316: LD_INT 5
54318: PPUSH
54319: LD_INT 4
54321: PPUSH
54322: CALL_OW 272
54326: PUSH
54327: LD_VAR 0 8
54331: PPUSH
54332: LD_INT 5
54334: PPUSH
54335: LD_INT 4
54337: PPUSH
54338: CALL_OW 273
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: ST_TO_ADDR
// for i = tmp downto 1 do
54355: LD_ADDR_VAR 0 4
54359: PUSH
54360: DOUBLE
54361: LD_VAR 0 6
54365: INC
54366: ST_TO_ADDR
54367: LD_INT 1
54369: PUSH
54370: FOR_DOWNTO
54371: IFFALSE 54472
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54373: LD_VAR 0 6
54377: PUSH
54378: LD_VAR 0 4
54382: ARRAY
54383: PUSH
54384: LD_INT 1
54386: ARRAY
54387: PPUSH
54388: LD_VAR 0 6
54392: PUSH
54393: LD_VAR 0 4
54397: ARRAY
54398: PUSH
54399: LD_INT 2
54401: ARRAY
54402: PPUSH
54403: CALL_OW 488
54407: NOT
54408: PUSH
54409: LD_VAR 0 6
54413: PUSH
54414: LD_VAR 0 4
54418: ARRAY
54419: PUSH
54420: LD_INT 1
54422: ARRAY
54423: PPUSH
54424: LD_VAR 0 6
54428: PUSH
54429: LD_VAR 0 4
54433: ARRAY
54434: PUSH
54435: LD_INT 2
54437: ARRAY
54438: PPUSH
54439: CALL_OW 428
54443: PUSH
54444: LD_INT 0
54446: NONEQUAL
54447: OR
54448: IFFALSE 54470
// tmp := Delete ( tmp , i ) ;
54450: LD_ADDR_VAR 0 6
54454: PUSH
54455: LD_VAR 0 6
54459: PPUSH
54460: LD_VAR 0 4
54464: PPUSH
54465: CALL_OW 3
54469: ST_TO_ADDR
54470: GO 54370
54472: POP
54473: POP
// j := GetClosestHex ( unit , tmp ) ;
54474: LD_ADDR_VAR 0 5
54478: PUSH
54479: LD_VAR 0 1
54483: PPUSH
54484: LD_VAR 0 6
54488: PPUSH
54489: CALL 53774 0 2
54493: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54494: LD_VAR 0 1
54498: PPUSH
54499: LD_VAR 0 5
54503: PUSH
54504: LD_INT 1
54506: ARRAY
54507: PPUSH
54508: LD_VAR 0 5
54512: PUSH
54513: LD_INT 2
54515: ARRAY
54516: PPUSH
54517: CALL_OW 111
// end ;
54521: LD_VAR 0 3
54525: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54526: LD_INT 0
54528: PPUSH
54529: PPUSH
54530: PPUSH
// uc_side = 0 ;
54531: LD_ADDR_OWVAR 20
54535: PUSH
54536: LD_INT 0
54538: ST_TO_ADDR
// uc_nation = 0 ;
54539: LD_ADDR_OWVAR 21
54543: PUSH
54544: LD_INT 0
54546: ST_TO_ADDR
// InitHc_All ( ) ;
54547: CALL_OW 584
// InitVc ;
54551: CALL_OW 20
// if mastodonts then
54555: LD_VAR 0 6
54559: IFFALSE 54626
// for i = 1 to mastodonts do
54561: LD_ADDR_VAR 0 11
54565: PUSH
54566: DOUBLE
54567: LD_INT 1
54569: DEC
54570: ST_TO_ADDR
54571: LD_VAR 0 6
54575: PUSH
54576: FOR_TO
54577: IFFALSE 54624
// begin vc_chassis := 31 ;
54579: LD_ADDR_OWVAR 37
54583: PUSH
54584: LD_INT 31
54586: ST_TO_ADDR
// vc_control := control_rider ;
54587: LD_ADDR_OWVAR 38
54591: PUSH
54592: LD_INT 4
54594: ST_TO_ADDR
// animal := CreateVehicle ;
54595: LD_ADDR_VAR 0 12
54599: PUSH
54600: CALL_OW 45
54604: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54605: LD_VAR 0 12
54609: PPUSH
54610: LD_VAR 0 8
54614: PPUSH
54615: LD_INT 0
54617: PPUSH
54618: CALL 56814 0 3
// end ;
54622: GO 54576
54624: POP
54625: POP
// if horses then
54626: LD_VAR 0 5
54630: IFFALSE 54697
// for i = 1 to horses do
54632: LD_ADDR_VAR 0 11
54636: PUSH
54637: DOUBLE
54638: LD_INT 1
54640: DEC
54641: ST_TO_ADDR
54642: LD_VAR 0 5
54646: PUSH
54647: FOR_TO
54648: IFFALSE 54695
// begin hc_class := 21 ;
54650: LD_ADDR_OWVAR 28
54654: PUSH
54655: LD_INT 21
54657: ST_TO_ADDR
// hc_gallery :=  ;
54658: LD_ADDR_OWVAR 33
54662: PUSH
54663: LD_STRING 
54665: ST_TO_ADDR
// animal := CreateHuman ;
54666: LD_ADDR_VAR 0 12
54670: PUSH
54671: CALL_OW 44
54675: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54676: LD_VAR 0 12
54680: PPUSH
54681: LD_VAR 0 8
54685: PPUSH
54686: LD_INT 0
54688: PPUSH
54689: CALL 56814 0 3
// end ;
54693: GO 54647
54695: POP
54696: POP
// if birds then
54697: LD_VAR 0 1
54701: IFFALSE 54768
// for i = 1 to birds do
54703: LD_ADDR_VAR 0 11
54707: PUSH
54708: DOUBLE
54709: LD_INT 1
54711: DEC
54712: ST_TO_ADDR
54713: LD_VAR 0 1
54717: PUSH
54718: FOR_TO
54719: IFFALSE 54766
// begin hc_class = 18 ;
54721: LD_ADDR_OWVAR 28
54725: PUSH
54726: LD_INT 18
54728: ST_TO_ADDR
// hc_gallery =  ;
54729: LD_ADDR_OWVAR 33
54733: PUSH
54734: LD_STRING 
54736: ST_TO_ADDR
// animal := CreateHuman ;
54737: LD_ADDR_VAR 0 12
54741: PUSH
54742: CALL_OW 44
54746: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54747: LD_VAR 0 12
54751: PPUSH
54752: LD_VAR 0 8
54756: PPUSH
54757: LD_INT 0
54759: PPUSH
54760: CALL 56814 0 3
// end ;
54764: GO 54718
54766: POP
54767: POP
// if tigers then
54768: LD_VAR 0 2
54772: IFFALSE 54856
// for i = 1 to tigers do
54774: LD_ADDR_VAR 0 11
54778: PUSH
54779: DOUBLE
54780: LD_INT 1
54782: DEC
54783: ST_TO_ADDR
54784: LD_VAR 0 2
54788: PUSH
54789: FOR_TO
54790: IFFALSE 54854
// begin hc_class = class_tiger ;
54792: LD_ADDR_OWVAR 28
54796: PUSH
54797: LD_INT 14
54799: ST_TO_ADDR
// hc_gallery =  ;
54800: LD_ADDR_OWVAR 33
54804: PUSH
54805: LD_STRING 
54807: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54808: LD_ADDR_OWVAR 35
54812: PUSH
54813: LD_INT 7
54815: NEG
54816: PPUSH
54817: LD_INT 7
54819: PPUSH
54820: CALL_OW 12
54824: ST_TO_ADDR
// animal := CreateHuman ;
54825: LD_ADDR_VAR 0 12
54829: PUSH
54830: CALL_OW 44
54834: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54835: LD_VAR 0 12
54839: PPUSH
54840: LD_VAR 0 8
54844: PPUSH
54845: LD_INT 0
54847: PPUSH
54848: CALL 56814 0 3
// end ;
54852: GO 54789
54854: POP
54855: POP
// if apemans then
54856: LD_VAR 0 3
54860: IFFALSE 54983
// for i = 1 to apemans do
54862: LD_ADDR_VAR 0 11
54866: PUSH
54867: DOUBLE
54868: LD_INT 1
54870: DEC
54871: ST_TO_ADDR
54872: LD_VAR 0 3
54876: PUSH
54877: FOR_TO
54878: IFFALSE 54981
// begin hc_class = class_apeman ;
54880: LD_ADDR_OWVAR 28
54884: PUSH
54885: LD_INT 12
54887: ST_TO_ADDR
// hc_gallery =  ;
54888: LD_ADDR_OWVAR 33
54892: PUSH
54893: LD_STRING 
54895: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
54896: LD_ADDR_OWVAR 35
54900: PUSH
54901: LD_INT 2
54903: NEG
54904: PPUSH
54905: LD_INT 2
54907: PPUSH
54908: CALL_OW 12
54912: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54913: LD_ADDR_OWVAR 31
54917: PUSH
54918: LD_INT 1
54920: PPUSH
54921: LD_INT 3
54923: PPUSH
54924: CALL_OW 12
54928: PUSH
54929: LD_INT 1
54931: PPUSH
54932: LD_INT 3
54934: PPUSH
54935: CALL_OW 12
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: ST_TO_ADDR
// animal := CreateHuman ;
54952: LD_ADDR_VAR 0 12
54956: PUSH
54957: CALL_OW 44
54961: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54962: LD_VAR 0 12
54966: PPUSH
54967: LD_VAR 0 8
54971: PPUSH
54972: LD_INT 0
54974: PPUSH
54975: CALL 56814 0 3
// end ;
54979: GO 54877
54981: POP
54982: POP
// if enchidnas then
54983: LD_VAR 0 4
54987: IFFALSE 55054
// for i = 1 to enchidnas do
54989: LD_ADDR_VAR 0 11
54993: PUSH
54994: DOUBLE
54995: LD_INT 1
54997: DEC
54998: ST_TO_ADDR
54999: LD_VAR 0 4
55003: PUSH
55004: FOR_TO
55005: IFFALSE 55052
// begin hc_class = 13 ;
55007: LD_ADDR_OWVAR 28
55011: PUSH
55012: LD_INT 13
55014: ST_TO_ADDR
// hc_gallery =  ;
55015: LD_ADDR_OWVAR 33
55019: PUSH
55020: LD_STRING 
55022: ST_TO_ADDR
// animal := CreateHuman ;
55023: LD_ADDR_VAR 0 12
55027: PUSH
55028: CALL_OW 44
55032: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55033: LD_VAR 0 12
55037: PPUSH
55038: LD_VAR 0 8
55042: PPUSH
55043: LD_INT 0
55045: PPUSH
55046: CALL 56814 0 3
// end ;
55050: GO 55004
55052: POP
55053: POP
// if fishes then
55054: LD_VAR 0 7
55058: IFFALSE 55125
// for i = 1 to fishes do
55060: LD_ADDR_VAR 0 11
55064: PUSH
55065: DOUBLE
55066: LD_INT 1
55068: DEC
55069: ST_TO_ADDR
55070: LD_VAR 0 7
55074: PUSH
55075: FOR_TO
55076: IFFALSE 55123
// begin hc_class = 20 ;
55078: LD_ADDR_OWVAR 28
55082: PUSH
55083: LD_INT 20
55085: ST_TO_ADDR
// hc_gallery =  ;
55086: LD_ADDR_OWVAR 33
55090: PUSH
55091: LD_STRING 
55093: ST_TO_ADDR
// animal := CreateHuman ;
55094: LD_ADDR_VAR 0 12
55098: PUSH
55099: CALL_OW 44
55103: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55104: LD_VAR 0 12
55108: PPUSH
55109: LD_VAR 0 9
55113: PPUSH
55114: LD_INT 0
55116: PPUSH
55117: CALL 56814 0 3
// end ;
55121: GO 55075
55123: POP
55124: POP
// end ;
55125: LD_VAR 0 10
55129: RET
// export function WantHeal ( sci , unit ) ; begin
55130: LD_INT 0
55132: PPUSH
// if GetTaskList ( sci ) > 0 then
55133: LD_VAR 0 1
55137: PPUSH
55138: CALL_OW 437
55142: PUSH
55143: LD_INT 0
55145: GREATER
55146: IFFALSE 55216
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55148: LD_VAR 0 1
55152: PPUSH
55153: CALL_OW 437
55157: PUSH
55158: LD_INT 1
55160: ARRAY
55161: PUSH
55162: LD_INT 1
55164: ARRAY
55165: PUSH
55166: LD_STRING l
55168: EQUAL
55169: PUSH
55170: LD_VAR 0 1
55174: PPUSH
55175: CALL_OW 437
55179: PUSH
55180: LD_INT 1
55182: ARRAY
55183: PUSH
55184: LD_INT 4
55186: ARRAY
55187: PUSH
55188: LD_VAR 0 2
55192: EQUAL
55193: AND
55194: IFFALSE 55206
// result := true else
55196: LD_ADDR_VAR 0 3
55200: PUSH
55201: LD_INT 1
55203: ST_TO_ADDR
55204: GO 55214
// result := false ;
55206: LD_ADDR_VAR 0 3
55210: PUSH
55211: LD_INT 0
55213: ST_TO_ADDR
// end else
55214: GO 55224
// result := false ;
55216: LD_ADDR_VAR 0 3
55220: PUSH
55221: LD_INT 0
55223: ST_TO_ADDR
// end ;
55224: LD_VAR 0 3
55228: RET
// export function HealTarget ( sci ) ; begin
55229: LD_INT 0
55231: PPUSH
// if not sci then
55232: LD_VAR 0 1
55236: NOT
55237: IFFALSE 55241
// exit ;
55239: GO 55306
// result := 0 ;
55241: LD_ADDR_VAR 0 2
55245: PUSH
55246: LD_INT 0
55248: ST_TO_ADDR
// if GetTaskList ( sci ) then
55249: LD_VAR 0 1
55253: PPUSH
55254: CALL_OW 437
55258: IFFALSE 55306
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55260: LD_VAR 0 1
55264: PPUSH
55265: CALL_OW 437
55269: PUSH
55270: LD_INT 1
55272: ARRAY
55273: PUSH
55274: LD_INT 1
55276: ARRAY
55277: PUSH
55278: LD_STRING l
55280: EQUAL
55281: IFFALSE 55306
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55283: LD_ADDR_VAR 0 2
55287: PUSH
55288: LD_VAR 0 1
55292: PPUSH
55293: CALL_OW 437
55297: PUSH
55298: LD_INT 1
55300: ARRAY
55301: PUSH
55302: LD_INT 4
55304: ARRAY
55305: ST_TO_ADDR
// end ;
55306: LD_VAR 0 2
55310: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55311: LD_INT 0
55313: PPUSH
55314: PPUSH
55315: PPUSH
55316: PPUSH
// if not base_units then
55317: LD_VAR 0 1
55321: NOT
55322: IFFALSE 55326
// exit ;
55324: GO 55413
// result := false ;
55326: LD_ADDR_VAR 0 2
55330: PUSH
55331: LD_INT 0
55333: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55334: LD_ADDR_VAR 0 5
55338: PUSH
55339: LD_VAR 0 1
55343: PPUSH
55344: LD_INT 21
55346: PUSH
55347: LD_INT 3
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PPUSH
55354: CALL_OW 72
55358: ST_TO_ADDR
// if not tmp then
55359: LD_VAR 0 5
55363: NOT
55364: IFFALSE 55368
// exit ;
55366: GO 55413
// for i in tmp do
55368: LD_ADDR_VAR 0 3
55372: PUSH
55373: LD_VAR 0 5
55377: PUSH
55378: FOR_IN
55379: IFFALSE 55411
// begin result := EnemyInRange ( i , 22 ) ;
55381: LD_ADDR_VAR 0 2
55385: PUSH
55386: LD_VAR 0 3
55390: PPUSH
55391: LD_INT 22
55393: PPUSH
55394: CALL 53649 0 2
55398: ST_TO_ADDR
// if result then
55399: LD_VAR 0 2
55403: IFFALSE 55409
// exit ;
55405: POP
55406: POP
55407: GO 55413
// end ;
55409: GO 55378
55411: POP
55412: POP
// end ;
55413: LD_VAR 0 2
55417: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
55418: LD_INT 0
55420: PPUSH
55421: PPUSH
// if not units then
55422: LD_VAR 0 1
55426: NOT
55427: IFFALSE 55431
// exit ;
55429: GO 55501
// result := [ ] ;
55431: LD_ADDR_VAR 0 3
55435: PUSH
55436: EMPTY
55437: ST_TO_ADDR
// for i in units do
55438: LD_ADDR_VAR 0 4
55442: PUSH
55443: LD_VAR 0 1
55447: PUSH
55448: FOR_IN
55449: IFFALSE 55499
// if GetTag ( i ) = tag then
55451: LD_VAR 0 4
55455: PPUSH
55456: CALL_OW 110
55460: PUSH
55461: LD_VAR 0 2
55465: EQUAL
55466: IFFALSE 55497
// result := Replace ( result , result + 1 , i ) ;
55468: LD_ADDR_VAR 0 3
55472: PUSH
55473: LD_VAR 0 3
55477: PPUSH
55478: LD_VAR 0 3
55482: PUSH
55483: LD_INT 1
55485: PLUS
55486: PPUSH
55487: LD_VAR 0 4
55491: PPUSH
55492: CALL_OW 1
55496: ST_TO_ADDR
55497: GO 55448
55499: POP
55500: POP
// end ;
55501: LD_VAR 0 3
55505: RET
// export function IsDriver ( un ) ; begin
55506: LD_INT 0
55508: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55509: LD_ADDR_VAR 0 2
55513: PUSH
55514: LD_VAR 0 1
55518: PUSH
55519: LD_INT 55
55521: PUSH
55522: EMPTY
55523: LIST
55524: PPUSH
55525: CALL_OW 69
55529: IN
55530: ST_TO_ADDR
// end ;
55531: LD_VAR 0 2
55535: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55536: LD_INT 0
55538: PPUSH
55539: PPUSH
// list := [ ] ;
55540: LD_ADDR_VAR 0 5
55544: PUSH
55545: EMPTY
55546: ST_TO_ADDR
// case d of 0 :
55547: LD_VAR 0 3
55551: PUSH
55552: LD_INT 0
55554: DOUBLE
55555: EQUAL
55556: IFTRUE 55560
55558: GO 55693
55560: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55561: LD_ADDR_VAR 0 5
55565: PUSH
55566: LD_VAR 0 1
55570: PUSH
55571: LD_INT 4
55573: MINUS
55574: PUSH
55575: LD_VAR 0 2
55579: PUSH
55580: LD_INT 4
55582: MINUS
55583: PUSH
55584: LD_INT 2
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: LIST
55591: PUSH
55592: LD_VAR 0 1
55596: PUSH
55597: LD_INT 3
55599: MINUS
55600: PUSH
55601: LD_VAR 0 2
55605: PUSH
55606: LD_INT 1
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: LIST
55613: PUSH
55614: LD_VAR 0 1
55618: PUSH
55619: LD_INT 4
55621: PLUS
55622: PUSH
55623: LD_VAR 0 2
55627: PUSH
55628: LD_INT 4
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: LIST
55635: PUSH
55636: LD_VAR 0 1
55640: PUSH
55641: LD_INT 3
55643: PLUS
55644: PUSH
55645: LD_VAR 0 2
55649: PUSH
55650: LD_INT 3
55652: PLUS
55653: PUSH
55654: LD_INT 5
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: LIST
55661: PUSH
55662: LD_VAR 0 1
55666: PUSH
55667: LD_VAR 0 2
55671: PUSH
55672: LD_INT 4
55674: PLUS
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: LIST
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: ST_TO_ADDR
// end ; 1 :
55691: GO 56391
55693: LD_INT 1
55695: DOUBLE
55696: EQUAL
55697: IFTRUE 55701
55699: GO 55834
55701: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55702: LD_ADDR_VAR 0 5
55706: PUSH
55707: LD_VAR 0 1
55711: PUSH
55712: LD_VAR 0 2
55716: PUSH
55717: LD_INT 4
55719: MINUS
55720: PUSH
55721: LD_INT 3
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: LIST
55728: PUSH
55729: LD_VAR 0 1
55733: PUSH
55734: LD_INT 3
55736: MINUS
55737: PUSH
55738: LD_VAR 0 2
55742: PUSH
55743: LD_INT 3
55745: MINUS
55746: PUSH
55747: LD_INT 2
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: LIST
55754: PUSH
55755: LD_VAR 0 1
55759: PUSH
55760: LD_INT 4
55762: MINUS
55763: PUSH
55764: LD_VAR 0 2
55768: PUSH
55769: LD_INT 1
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: LIST
55776: PUSH
55777: LD_VAR 0 1
55781: PUSH
55782: LD_VAR 0 2
55786: PUSH
55787: LD_INT 3
55789: PLUS
55790: PUSH
55791: LD_INT 0
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: LIST
55798: PUSH
55799: LD_VAR 0 1
55803: PUSH
55804: LD_INT 4
55806: PLUS
55807: PUSH
55808: LD_VAR 0 2
55812: PUSH
55813: LD_INT 4
55815: PLUS
55816: PUSH
55817: LD_INT 5
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: LIST
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: ST_TO_ADDR
// end ; 2 :
55832: GO 56391
55834: LD_INT 2
55836: DOUBLE
55837: EQUAL
55838: IFTRUE 55842
55840: GO 55971
55842: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55843: LD_ADDR_VAR 0 5
55847: PUSH
55848: LD_VAR 0 1
55852: PUSH
55853: LD_VAR 0 2
55857: PUSH
55858: LD_INT 3
55860: MINUS
55861: PUSH
55862: LD_INT 3
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: LIST
55869: PUSH
55870: LD_VAR 0 1
55874: PUSH
55875: LD_INT 4
55877: PLUS
55878: PUSH
55879: LD_VAR 0 2
55883: PUSH
55884: LD_INT 4
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: LIST
55891: PUSH
55892: LD_VAR 0 1
55896: PUSH
55897: LD_VAR 0 2
55901: PUSH
55902: LD_INT 4
55904: PLUS
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: LIST
55913: PUSH
55914: LD_VAR 0 1
55918: PUSH
55919: LD_INT 3
55921: MINUS
55922: PUSH
55923: LD_VAR 0 2
55927: PUSH
55928: LD_INT 1
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: LIST
55935: PUSH
55936: LD_VAR 0 1
55940: PUSH
55941: LD_INT 4
55943: MINUS
55944: PUSH
55945: LD_VAR 0 2
55949: PUSH
55950: LD_INT 4
55952: MINUS
55953: PUSH
55954: LD_INT 2
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: LIST
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: ST_TO_ADDR
// end ; 3 :
55969: GO 56391
55971: LD_INT 3
55973: DOUBLE
55974: EQUAL
55975: IFTRUE 55979
55977: GO 56112
55979: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55980: LD_ADDR_VAR 0 5
55984: PUSH
55985: LD_VAR 0 1
55989: PUSH
55990: LD_INT 3
55992: PLUS
55993: PUSH
55994: LD_VAR 0 2
55998: PUSH
55999: LD_INT 4
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: LIST
56006: PUSH
56007: LD_VAR 0 1
56011: PUSH
56012: LD_INT 4
56014: PLUS
56015: PUSH
56016: LD_VAR 0 2
56020: PUSH
56021: LD_INT 4
56023: PLUS
56024: PUSH
56025: LD_INT 5
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: LIST
56032: PUSH
56033: LD_VAR 0 1
56037: PUSH
56038: LD_INT 4
56040: MINUS
56041: PUSH
56042: LD_VAR 0 2
56046: PUSH
56047: LD_INT 1
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: LIST
56054: PUSH
56055: LD_VAR 0 1
56059: PUSH
56060: LD_VAR 0 2
56064: PUSH
56065: LD_INT 4
56067: MINUS
56068: PUSH
56069: LD_INT 3
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: LIST
56076: PUSH
56077: LD_VAR 0 1
56081: PUSH
56082: LD_INT 3
56084: MINUS
56085: PUSH
56086: LD_VAR 0 2
56090: PUSH
56091: LD_INT 3
56093: MINUS
56094: PUSH
56095: LD_INT 2
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: LIST
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: ST_TO_ADDR
// end ; 4 :
56110: GO 56391
56112: LD_INT 4
56114: DOUBLE
56115: EQUAL
56116: IFTRUE 56120
56118: GO 56253
56120: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56121: LD_ADDR_VAR 0 5
56125: PUSH
56126: LD_VAR 0 1
56130: PUSH
56131: LD_VAR 0 2
56135: PUSH
56136: LD_INT 4
56138: PLUS
56139: PUSH
56140: LD_INT 0
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: LIST
56147: PUSH
56148: LD_VAR 0 1
56152: PUSH
56153: LD_INT 3
56155: PLUS
56156: PUSH
56157: LD_VAR 0 2
56161: PUSH
56162: LD_INT 3
56164: PLUS
56165: PUSH
56166: LD_INT 5
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: LIST
56173: PUSH
56174: LD_VAR 0 1
56178: PUSH
56179: LD_INT 4
56181: PLUS
56182: PUSH
56183: LD_VAR 0 2
56187: PUSH
56188: LD_INT 4
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: LIST
56195: PUSH
56196: LD_VAR 0 1
56200: PUSH
56201: LD_VAR 0 2
56205: PUSH
56206: LD_INT 3
56208: MINUS
56209: PUSH
56210: LD_INT 3
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: LIST
56217: PUSH
56218: LD_VAR 0 1
56222: PUSH
56223: LD_INT 4
56225: MINUS
56226: PUSH
56227: LD_VAR 0 2
56231: PUSH
56232: LD_INT 4
56234: MINUS
56235: PUSH
56236: LD_INT 2
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: LIST
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: ST_TO_ADDR
// end ; 5 :
56251: GO 56391
56253: LD_INT 5
56255: DOUBLE
56256: EQUAL
56257: IFTRUE 56261
56259: GO 56390
56261: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56262: LD_ADDR_VAR 0 5
56266: PUSH
56267: LD_VAR 0 1
56271: PUSH
56272: LD_INT 4
56274: MINUS
56275: PUSH
56276: LD_VAR 0 2
56280: PUSH
56281: LD_INT 1
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: LIST
56288: PUSH
56289: LD_VAR 0 1
56293: PUSH
56294: LD_VAR 0 2
56298: PUSH
56299: LD_INT 4
56301: MINUS
56302: PUSH
56303: LD_INT 3
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: LIST
56310: PUSH
56311: LD_VAR 0 1
56315: PUSH
56316: LD_INT 4
56318: PLUS
56319: PUSH
56320: LD_VAR 0 2
56324: PUSH
56325: LD_INT 4
56327: PLUS
56328: PUSH
56329: LD_INT 5
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: LIST
56336: PUSH
56337: LD_VAR 0 1
56341: PUSH
56342: LD_INT 3
56344: PLUS
56345: PUSH
56346: LD_VAR 0 2
56350: PUSH
56351: LD_INT 4
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: LIST
56358: PUSH
56359: LD_VAR 0 1
56363: PUSH
56364: LD_VAR 0 2
56368: PUSH
56369: LD_INT 3
56371: PLUS
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: LIST
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: ST_TO_ADDR
// end ; end ;
56388: GO 56391
56390: POP
// result := list ;
56391: LD_ADDR_VAR 0 4
56395: PUSH
56396: LD_VAR 0 5
56400: ST_TO_ADDR
// end ;
56401: LD_VAR 0 4
56405: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56406: LD_INT 0
56408: PPUSH
56409: PPUSH
56410: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56411: LD_VAR 0 1
56415: NOT
56416: PUSH
56417: LD_VAR 0 2
56421: PUSH
56422: LD_INT 1
56424: PUSH
56425: LD_INT 2
56427: PUSH
56428: LD_INT 3
56430: PUSH
56431: LD_INT 4
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: IN
56440: NOT
56441: OR
56442: IFFALSE 56446
// exit ;
56444: GO 56538
// tmp := [ ] ;
56446: LD_ADDR_VAR 0 5
56450: PUSH
56451: EMPTY
56452: ST_TO_ADDR
// for i in units do
56453: LD_ADDR_VAR 0 4
56457: PUSH
56458: LD_VAR 0 1
56462: PUSH
56463: FOR_IN
56464: IFFALSE 56507
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
56466: LD_ADDR_VAR 0 5
56470: PUSH
56471: LD_VAR 0 5
56475: PPUSH
56476: LD_VAR 0 5
56480: PUSH
56481: LD_INT 1
56483: PLUS
56484: PPUSH
56485: LD_VAR 0 4
56489: PPUSH
56490: LD_VAR 0 2
56494: PPUSH
56495: CALL_OW 259
56499: PPUSH
56500: CALL_OW 2
56504: ST_TO_ADDR
56505: GO 56463
56507: POP
56508: POP
// if not tmp then
56509: LD_VAR 0 5
56513: NOT
56514: IFFALSE 56518
// exit ;
56516: GO 56538
// result := SortListByListDesc ( units , tmp ) ;
56518: LD_ADDR_VAR 0 3
56522: PUSH
56523: LD_VAR 0 1
56527: PPUSH
56528: LD_VAR 0 5
56532: PPUSH
56533: CALL_OW 77
56537: ST_TO_ADDR
// end ;
56538: LD_VAR 0 3
56542: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56543: LD_INT 0
56545: PPUSH
56546: PPUSH
56547: PPUSH
// result := false ;
56548: LD_ADDR_VAR 0 3
56552: PUSH
56553: LD_INT 0
56555: ST_TO_ADDR
// x := GetX ( building ) ;
56556: LD_ADDR_VAR 0 4
56560: PUSH
56561: LD_VAR 0 2
56565: PPUSH
56566: CALL_OW 250
56570: ST_TO_ADDR
// y := GetY ( building ) ;
56571: LD_ADDR_VAR 0 5
56575: PUSH
56576: LD_VAR 0 2
56580: PPUSH
56581: CALL_OW 251
56585: ST_TO_ADDR
// if not building or not x or not y then
56586: LD_VAR 0 2
56590: NOT
56591: PUSH
56592: LD_VAR 0 4
56596: NOT
56597: OR
56598: PUSH
56599: LD_VAR 0 5
56603: NOT
56604: OR
56605: IFFALSE 56609
// exit ;
56607: GO 56701
// if GetTaskList ( unit ) then
56609: LD_VAR 0 1
56613: PPUSH
56614: CALL_OW 437
56618: IFFALSE 56701
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56620: LD_STRING e
56622: PUSH
56623: LD_VAR 0 1
56627: PPUSH
56628: CALL_OW 437
56632: PUSH
56633: LD_INT 1
56635: ARRAY
56636: PUSH
56637: LD_INT 1
56639: ARRAY
56640: EQUAL
56641: PUSH
56642: LD_VAR 0 4
56646: PUSH
56647: LD_VAR 0 1
56651: PPUSH
56652: CALL_OW 437
56656: PUSH
56657: LD_INT 1
56659: ARRAY
56660: PUSH
56661: LD_INT 2
56663: ARRAY
56664: EQUAL
56665: AND
56666: PUSH
56667: LD_VAR 0 5
56671: PUSH
56672: LD_VAR 0 1
56676: PPUSH
56677: CALL_OW 437
56681: PUSH
56682: LD_INT 1
56684: ARRAY
56685: PUSH
56686: LD_INT 3
56688: ARRAY
56689: EQUAL
56690: AND
56691: IFFALSE 56701
// result := true end ;
56693: LD_ADDR_VAR 0 3
56697: PUSH
56698: LD_INT 1
56700: ST_TO_ADDR
// end ;
56701: LD_VAR 0 3
56705: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56706: LD_INT 0
56708: PPUSH
// result := false ;
56709: LD_ADDR_VAR 0 4
56713: PUSH
56714: LD_INT 0
56716: ST_TO_ADDR
// if GetTaskList ( unit ) then
56717: LD_VAR 0 1
56721: PPUSH
56722: CALL_OW 437
56726: IFFALSE 56809
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56728: LD_STRING M
56730: PUSH
56731: LD_VAR 0 1
56735: PPUSH
56736: CALL_OW 437
56740: PUSH
56741: LD_INT 1
56743: ARRAY
56744: PUSH
56745: LD_INT 1
56747: ARRAY
56748: EQUAL
56749: PUSH
56750: LD_VAR 0 2
56754: PUSH
56755: LD_VAR 0 1
56759: PPUSH
56760: CALL_OW 437
56764: PUSH
56765: LD_INT 1
56767: ARRAY
56768: PUSH
56769: LD_INT 2
56771: ARRAY
56772: EQUAL
56773: AND
56774: PUSH
56775: LD_VAR 0 3
56779: PUSH
56780: LD_VAR 0 1
56784: PPUSH
56785: CALL_OW 437
56789: PUSH
56790: LD_INT 1
56792: ARRAY
56793: PUSH
56794: LD_INT 3
56796: ARRAY
56797: EQUAL
56798: AND
56799: IFFALSE 56809
// result := true ;
56801: LD_ADDR_VAR 0 4
56805: PUSH
56806: LD_INT 1
56808: ST_TO_ADDR
// end ; end ;
56809: LD_VAR 0 4
56813: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56814: LD_INT 0
56816: PPUSH
56817: PPUSH
56818: PPUSH
56819: PPUSH
// if not unit or not area then
56820: LD_VAR 0 1
56824: NOT
56825: PUSH
56826: LD_VAR 0 2
56830: NOT
56831: OR
56832: IFFALSE 56836
// exit ;
56834: GO 57000
// tmp := AreaToList ( area , i ) ;
56836: LD_ADDR_VAR 0 6
56840: PUSH
56841: LD_VAR 0 2
56845: PPUSH
56846: LD_VAR 0 5
56850: PPUSH
56851: CALL_OW 517
56855: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56856: LD_ADDR_VAR 0 5
56860: PUSH
56861: DOUBLE
56862: LD_INT 1
56864: DEC
56865: ST_TO_ADDR
56866: LD_VAR 0 6
56870: PUSH
56871: LD_INT 1
56873: ARRAY
56874: PUSH
56875: FOR_TO
56876: IFFALSE 56998
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56878: LD_ADDR_VAR 0 7
56882: PUSH
56883: LD_VAR 0 6
56887: PUSH
56888: LD_INT 1
56890: ARRAY
56891: PUSH
56892: LD_VAR 0 5
56896: ARRAY
56897: PUSH
56898: LD_VAR 0 6
56902: PUSH
56903: LD_INT 2
56905: ARRAY
56906: PUSH
56907: LD_VAR 0 5
56911: ARRAY
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
56917: LD_VAR 0 7
56921: PUSH
56922: LD_INT 1
56924: ARRAY
56925: PPUSH
56926: LD_VAR 0 7
56930: PUSH
56931: LD_INT 2
56933: ARRAY
56934: PPUSH
56935: CALL_OW 428
56939: PUSH
56940: LD_INT 0
56942: EQUAL
56943: IFFALSE 56996
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
56945: LD_VAR 0 1
56949: PPUSH
56950: LD_VAR 0 7
56954: PUSH
56955: LD_INT 1
56957: ARRAY
56958: PPUSH
56959: LD_VAR 0 7
56963: PUSH
56964: LD_INT 2
56966: ARRAY
56967: PPUSH
56968: LD_VAR 0 3
56972: PPUSH
56973: CALL_OW 48
// result := IsPlaced ( unit ) ;
56977: LD_ADDR_VAR 0 4
56981: PUSH
56982: LD_VAR 0 1
56986: PPUSH
56987: CALL_OW 305
56991: ST_TO_ADDR
// exit ;
56992: POP
56993: POP
56994: GO 57000
// end ; end ;
56996: GO 56875
56998: POP
56999: POP
// end ;
57000: LD_VAR 0 4
57004: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57005: LD_INT 0
57007: PPUSH
57008: PPUSH
57009: PPUSH
// if not side or side > 8 then
57010: LD_VAR 0 1
57014: NOT
57015: PUSH
57016: LD_VAR 0 1
57020: PUSH
57021: LD_INT 8
57023: GREATER
57024: OR
57025: IFFALSE 57029
// exit ;
57027: GO 57216
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57029: LD_ADDR_VAR 0 4
57033: PUSH
57034: LD_INT 22
57036: PUSH
57037: LD_VAR 0 1
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 21
57048: PUSH
57049: LD_INT 3
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PPUSH
57060: CALL_OW 69
57064: ST_TO_ADDR
// if not tmp then
57065: LD_VAR 0 4
57069: NOT
57070: IFFALSE 57074
// exit ;
57072: GO 57216
// enable_addtolog := true ;
57074: LD_ADDR_OWVAR 81
57078: PUSH
57079: LD_INT 1
57081: ST_TO_ADDR
// AddToLog ( [ ) ;
57082: LD_STRING [
57084: PPUSH
57085: CALL_OW 561
// for i in tmp do
57089: LD_ADDR_VAR 0 3
57093: PUSH
57094: LD_VAR 0 4
57098: PUSH
57099: FOR_IN
57100: IFFALSE 57207
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57102: LD_STRING [
57104: PUSH
57105: LD_VAR 0 3
57109: PPUSH
57110: CALL_OW 266
57114: STR
57115: PUSH
57116: LD_STRING , 
57118: STR
57119: PUSH
57120: LD_VAR 0 3
57124: PPUSH
57125: CALL_OW 250
57129: STR
57130: PUSH
57131: LD_STRING , 
57133: STR
57134: PUSH
57135: LD_VAR 0 3
57139: PPUSH
57140: CALL_OW 251
57144: STR
57145: PUSH
57146: LD_STRING , 
57148: STR
57149: PUSH
57150: LD_VAR 0 3
57154: PPUSH
57155: CALL_OW 254
57159: STR
57160: PUSH
57161: LD_STRING , 
57163: STR
57164: PUSH
57165: LD_VAR 0 3
57169: PPUSH
57170: LD_INT 1
57172: PPUSH
57173: CALL_OW 268
57177: STR
57178: PUSH
57179: LD_STRING , 
57181: STR
57182: PUSH
57183: LD_VAR 0 3
57187: PPUSH
57188: LD_INT 2
57190: PPUSH
57191: CALL_OW 268
57195: STR
57196: PUSH
57197: LD_STRING ],
57199: STR
57200: PPUSH
57201: CALL_OW 561
// end ;
57205: GO 57099
57207: POP
57208: POP
// AddToLog ( ]; ) ;
57209: LD_STRING ];
57211: PPUSH
57212: CALL_OW 561
// end ;
57216: LD_VAR 0 2
57220: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57221: LD_INT 0
57223: PPUSH
57224: PPUSH
57225: PPUSH
57226: PPUSH
57227: PPUSH
// if not area or not rate or not max then
57228: LD_VAR 0 1
57232: NOT
57233: PUSH
57234: LD_VAR 0 2
57238: NOT
57239: OR
57240: PUSH
57241: LD_VAR 0 4
57245: NOT
57246: OR
57247: IFFALSE 57251
// exit ;
57249: GO 57443
// while 1 do
57251: LD_INT 1
57253: IFFALSE 57443
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57255: LD_ADDR_VAR 0 9
57259: PUSH
57260: LD_VAR 0 1
57264: PPUSH
57265: LD_INT 1
57267: PPUSH
57268: CALL_OW 287
57272: PUSH
57273: LD_INT 10
57275: MUL
57276: ST_TO_ADDR
// r := rate / 10 ;
57277: LD_ADDR_VAR 0 7
57281: PUSH
57282: LD_VAR 0 2
57286: PUSH
57287: LD_INT 10
57289: DIVREAL
57290: ST_TO_ADDR
// time := 1 1$00 ;
57291: LD_ADDR_VAR 0 8
57295: PUSH
57296: LD_INT 2100
57298: ST_TO_ADDR
// if amount < min then
57299: LD_VAR 0 9
57303: PUSH
57304: LD_VAR 0 3
57308: LESS
57309: IFFALSE 57327
// r := r * 2 else
57311: LD_ADDR_VAR 0 7
57315: PUSH
57316: LD_VAR 0 7
57320: PUSH
57321: LD_INT 2
57323: MUL
57324: ST_TO_ADDR
57325: GO 57353
// if amount > max then
57327: LD_VAR 0 9
57331: PUSH
57332: LD_VAR 0 4
57336: GREATER
57337: IFFALSE 57353
// r := r / 2 ;
57339: LD_ADDR_VAR 0 7
57343: PUSH
57344: LD_VAR 0 7
57348: PUSH
57349: LD_INT 2
57351: DIVREAL
57352: ST_TO_ADDR
// time := time / r ;
57353: LD_ADDR_VAR 0 8
57357: PUSH
57358: LD_VAR 0 8
57362: PUSH
57363: LD_VAR 0 7
57367: DIVREAL
57368: ST_TO_ADDR
// if time < 0 then
57369: LD_VAR 0 8
57373: PUSH
57374: LD_INT 0
57376: LESS
57377: IFFALSE 57394
// time := time * - 1 ;
57379: LD_ADDR_VAR 0 8
57383: PUSH
57384: LD_VAR 0 8
57388: PUSH
57389: LD_INT 1
57391: NEG
57392: MUL
57393: ST_TO_ADDR
// wait ( time ) ;
57394: LD_VAR 0 8
57398: PPUSH
57399: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
57403: LD_INT 35
57405: PPUSH
57406: LD_INT 875
57408: PPUSH
57409: CALL_OW 12
57413: PPUSH
57414: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57418: LD_INT 1
57420: PPUSH
57421: LD_INT 5
57423: PPUSH
57424: CALL_OW 12
57428: PPUSH
57429: LD_VAR 0 1
57433: PPUSH
57434: LD_INT 1
57436: PPUSH
57437: CALL_OW 55
// end ;
57441: GO 57251
// end ;
57443: LD_VAR 0 5
57447: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57448: LD_INT 0
57450: PPUSH
57451: PPUSH
57452: PPUSH
57453: PPUSH
57454: PPUSH
57455: PPUSH
57456: PPUSH
57457: PPUSH
// if not turrets or not factories then
57458: LD_VAR 0 1
57462: NOT
57463: PUSH
57464: LD_VAR 0 2
57468: NOT
57469: OR
57470: IFFALSE 57474
// exit ;
57472: GO 57781
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57474: LD_ADDR_VAR 0 10
57478: PUSH
57479: LD_INT 5
57481: PUSH
57482: LD_INT 6
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 2
57491: PUSH
57492: LD_INT 4
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 3
57501: PUSH
57502: LD_INT 5
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 24
57516: PUSH
57517: LD_INT 25
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 23
57526: PUSH
57527: LD_INT 27
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 42
57540: PUSH
57541: LD_INT 43
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 44
57550: PUSH
57551: LD_INT 46
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 45
57560: PUSH
57561: LD_INT 47
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: LIST
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: LIST
57577: ST_TO_ADDR
// result := [ ] ;
57578: LD_ADDR_VAR 0 3
57582: PUSH
57583: EMPTY
57584: ST_TO_ADDR
// for i in turrets do
57585: LD_ADDR_VAR 0 4
57589: PUSH
57590: LD_VAR 0 1
57594: PUSH
57595: FOR_IN
57596: IFFALSE 57779
// begin nat := GetNation ( i ) ;
57598: LD_ADDR_VAR 0 7
57602: PUSH
57603: LD_VAR 0 4
57607: PPUSH
57608: CALL_OW 248
57612: ST_TO_ADDR
// weapon := 0 ;
57613: LD_ADDR_VAR 0 8
57617: PUSH
57618: LD_INT 0
57620: ST_TO_ADDR
// if not nat then
57621: LD_VAR 0 7
57625: NOT
57626: IFFALSE 57630
// continue ;
57628: GO 57595
// for j in list [ nat ] do
57630: LD_ADDR_VAR 0 5
57634: PUSH
57635: LD_VAR 0 10
57639: PUSH
57640: LD_VAR 0 7
57644: ARRAY
57645: PUSH
57646: FOR_IN
57647: IFFALSE 57688
// if GetBWeapon ( i ) = j [ 1 ] then
57649: LD_VAR 0 4
57653: PPUSH
57654: CALL_OW 269
57658: PUSH
57659: LD_VAR 0 5
57663: PUSH
57664: LD_INT 1
57666: ARRAY
57667: EQUAL
57668: IFFALSE 57686
// begin weapon := j [ 2 ] ;
57670: LD_ADDR_VAR 0 8
57674: PUSH
57675: LD_VAR 0 5
57679: PUSH
57680: LD_INT 2
57682: ARRAY
57683: ST_TO_ADDR
// break ;
57684: GO 57688
// end ;
57686: GO 57646
57688: POP
57689: POP
// if not weapon then
57690: LD_VAR 0 8
57694: NOT
57695: IFFALSE 57699
// continue ;
57697: GO 57595
// for k in factories do
57699: LD_ADDR_VAR 0 6
57703: PUSH
57704: LD_VAR 0 2
57708: PUSH
57709: FOR_IN
57710: IFFALSE 57775
// begin weapons := AvailableWeaponList ( k ) ;
57712: LD_ADDR_VAR 0 9
57716: PUSH
57717: LD_VAR 0 6
57721: PPUSH
57722: CALL_OW 478
57726: ST_TO_ADDR
// if not weapons then
57727: LD_VAR 0 9
57731: NOT
57732: IFFALSE 57736
// continue ;
57734: GO 57709
// if weapon in weapons then
57736: LD_VAR 0 8
57740: PUSH
57741: LD_VAR 0 9
57745: IN
57746: IFFALSE 57773
// begin result := [ i , weapon ] ;
57748: LD_ADDR_VAR 0 3
57752: PUSH
57753: LD_VAR 0 4
57757: PUSH
57758: LD_VAR 0 8
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: ST_TO_ADDR
// exit ;
57767: POP
57768: POP
57769: POP
57770: POP
57771: GO 57781
// end ; end ;
57773: GO 57709
57775: POP
57776: POP
// end ;
57777: GO 57595
57779: POP
57780: POP
// end ;
57781: LD_VAR 0 3
57785: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57786: LD_INT 0
57788: PPUSH
// if not side or side > 8 then
57789: LD_VAR 0 3
57793: NOT
57794: PUSH
57795: LD_VAR 0 3
57799: PUSH
57800: LD_INT 8
57802: GREATER
57803: OR
57804: IFFALSE 57808
// exit ;
57806: GO 57867
// if not range then
57808: LD_VAR 0 4
57812: NOT
57813: IFFALSE 57824
// range := - 12 ;
57815: LD_ADDR_VAR 0 4
57819: PUSH
57820: LD_INT 12
57822: NEG
57823: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57824: LD_VAR 0 1
57828: PPUSH
57829: LD_VAR 0 2
57833: PPUSH
57834: LD_VAR 0 3
57838: PPUSH
57839: LD_VAR 0 4
57843: PPUSH
57844: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57848: LD_VAR 0 1
57852: PPUSH
57853: LD_VAR 0 2
57857: PPUSH
57858: LD_VAR 0 3
57862: PPUSH
57863: CALL_OW 331
// end ;
57867: LD_VAR 0 5
57871: RET
// export function Video ( mode ) ; begin
57872: LD_INT 0
57874: PPUSH
// ingame_video = mode ;
57875: LD_ADDR_OWVAR 52
57879: PUSH
57880: LD_VAR 0 1
57884: ST_TO_ADDR
// interface_hidden = mode ;
57885: LD_ADDR_OWVAR 54
57889: PUSH
57890: LD_VAR 0 1
57894: ST_TO_ADDR
// end ;
57895: LD_VAR 0 2
57899: RET
// export function Join ( array , element ) ; begin
57900: LD_INT 0
57902: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57903: LD_ADDR_VAR 0 3
57907: PUSH
57908: LD_VAR 0 1
57912: PPUSH
57913: LD_VAR 0 1
57917: PUSH
57918: LD_INT 1
57920: PLUS
57921: PPUSH
57922: LD_VAR 0 2
57926: PPUSH
57927: CALL_OW 1
57931: ST_TO_ADDR
// end ;
57932: LD_VAR 0 3
57936: RET
// export function JoinUnion ( array , element ) ; begin
57937: LD_INT 0
57939: PPUSH
// result := array union element ;
57940: LD_ADDR_VAR 0 3
57944: PUSH
57945: LD_VAR 0 1
57949: PUSH
57950: LD_VAR 0 2
57954: UNION
57955: ST_TO_ADDR
// end ;
57956: LD_VAR 0 3
57960: RET
// export function GetBehemoths ( side ) ; begin
57961: LD_INT 0
57963: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
57964: LD_ADDR_VAR 0 2
57968: PUSH
57969: LD_INT 22
57971: PUSH
57972: LD_VAR 0 1
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 31
57983: PUSH
57984: LD_INT 25
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PPUSH
57995: CALL_OW 69
57999: ST_TO_ADDR
// end ;
58000: LD_VAR 0 2
58004: RET
// export function Shuffle ( array ) ; var i , index ; begin
58005: LD_INT 0
58007: PPUSH
58008: PPUSH
58009: PPUSH
// result := [ ] ;
58010: LD_ADDR_VAR 0 2
58014: PUSH
58015: EMPTY
58016: ST_TO_ADDR
// if not array then
58017: LD_VAR 0 1
58021: NOT
58022: IFFALSE 58026
// exit ;
58024: GO 58125
// Randomize ;
58026: CALL_OW 10
// for i = array downto 1 do
58030: LD_ADDR_VAR 0 3
58034: PUSH
58035: DOUBLE
58036: LD_VAR 0 1
58040: INC
58041: ST_TO_ADDR
58042: LD_INT 1
58044: PUSH
58045: FOR_DOWNTO
58046: IFFALSE 58123
// begin index := rand ( 1 , array ) ;
58048: LD_ADDR_VAR 0 4
58052: PUSH
58053: LD_INT 1
58055: PPUSH
58056: LD_VAR 0 1
58060: PPUSH
58061: CALL_OW 12
58065: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58066: LD_ADDR_VAR 0 2
58070: PUSH
58071: LD_VAR 0 2
58075: PPUSH
58076: LD_VAR 0 2
58080: PUSH
58081: LD_INT 1
58083: PLUS
58084: PPUSH
58085: LD_VAR 0 1
58089: PUSH
58090: LD_VAR 0 4
58094: ARRAY
58095: PPUSH
58096: CALL_OW 2
58100: ST_TO_ADDR
// array := Delete ( array , index ) ;
58101: LD_ADDR_VAR 0 1
58105: PUSH
58106: LD_VAR 0 1
58110: PPUSH
58111: LD_VAR 0 4
58115: PPUSH
58116: CALL_OW 3
58120: ST_TO_ADDR
// end ;
58121: GO 58045
58123: POP
58124: POP
// end ;
58125: LD_VAR 0 2
58129: RET
// export function GetBaseMaterials ( base ) ; begin
58130: LD_INT 0
58132: PPUSH
// result := [ 0 , 0 , 0 ] ;
58133: LD_ADDR_VAR 0 2
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: LD_INT 0
58143: PUSH
58144: LD_INT 0
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: LIST
58151: ST_TO_ADDR
// if not base then
58152: LD_VAR 0 1
58156: NOT
58157: IFFALSE 58161
// exit ;
58159: GO 58210
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58161: LD_ADDR_VAR 0 2
58165: PUSH
58166: LD_VAR 0 1
58170: PPUSH
58171: LD_INT 1
58173: PPUSH
58174: CALL_OW 275
58178: PUSH
58179: LD_VAR 0 1
58183: PPUSH
58184: LD_INT 2
58186: PPUSH
58187: CALL_OW 275
58191: PUSH
58192: LD_VAR 0 1
58196: PPUSH
58197: LD_INT 3
58199: PPUSH
58200: CALL_OW 275
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: LIST
58209: ST_TO_ADDR
// end ;
58210: LD_VAR 0 2
58214: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58215: LD_INT 0
58217: PPUSH
58218: PPUSH
// result := array ;
58219: LD_ADDR_VAR 0 3
58223: PUSH
58224: LD_VAR 0 1
58228: ST_TO_ADDR
// if size > 0 then
58229: LD_VAR 0 2
58233: PUSH
58234: LD_INT 0
58236: GREATER
58237: IFFALSE 58283
// for i := array downto size do
58239: LD_ADDR_VAR 0 4
58243: PUSH
58244: DOUBLE
58245: LD_VAR 0 1
58249: INC
58250: ST_TO_ADDR
58251: LD_VAR 0 2
58255: PUSH
58256: FOR_DOWNTO
58257: IFFALSE 58281
// result := Delete ( result , result ) ;
58259: LD_ADDR_VAR 0 3
58263: PUSH
58264: LD_VAR 0 3
58268: PPUSH
58269: LD_VAR 0 3
58273: PPUSH
58274: CALL_OW 3
58278: ST_TO_ADDR
58279: GO 58256
58281: POP
58282: POP
// end ;
58283: LD_VAR 0 3
58287: RET
// export function ComExit ( unit ) ; var tmp ; begin
58288: LD_INT 0
58290: PPUSH
58291: PPUSH
// if not IsInUnit ( unit ) then
58292: LD_VAR 0 1
58296: PPUSH
58297: CALL_OW 310
58301: NOT
58302: IFFALSE 58306
// exit ;
58304: GO 58366
// tmp := IsInUnit ( unit ) ;
58306: LD_ADDR_VAR 0 3
58310: PUSH
58311: LD_VAR 0 1
58315: PPUSH
58316: CALL_OW 310
58320: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58321: LD_VAR 0 3
58325: PPUSH
58326: CALL_OW 247
58330: PUSH
58331: LD_INT 2
58333: EQUAL
58334: IFFALSE 58347
// ComExitVehicle ( unit ) else
58336: LD_VAR 0 1
58340: PPUSH
58341: CALL_OW 121
58345: GO 58356
// ComExitBuilding ( unit ) ;
58347: LD_VAR 0 1
58351: PPUSH
58352: CALL_OW 122
// result := tmp ;
58356: LD_ADDR_VAR 0 2
58360: PUSH
58361: LD_VAR 0 3
58365: ST_TO_ADDR
// end ;
58366: LD_VAR 0 2
58370: RET
// export function ComExitAll ( units ) ; var i ; begin
58371: LD_INT 0
58373: PPUSH
58374: PPUSH
// if not units then
58375: LD_VAR 0 1
58379: NOT
58380: IFFALSE 58384
// exit ;
58382: GO 58410
// for i in units do
58384: LD_ADDR_VAR 0 3
58388: PUSH
58389: LD_VAR 0 1
58393: PUSH
58394: FOR_IN
58395: IFFALSE 58408
// ComExit ( i ) ;
58397: LD_VAR 0 3
58401: PPUSH
58402: CALL 58288 0 1
58406: GO 58394
58408: POP
58409: POP
// end ;
58410: LD_VAR 0 2
58414: RET
// export function ResetHc ; begin
58415: LD_INT 0
58417: PPUSH
// InitHc ;
58418: CALL_OW 19
// hc_importance := 0 ;
58422: LD_ADDR_OWVAR 32
58426: PUSH
58427: LD_INT 0
58429: ST_TO_ADDR
// end ;
58430: LD_VAR 0 1
58434: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58435: LD_INT 0
58437: PPUSH
58438: PPUSH
58439: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58440: LD_ADDR_VAR 0 6
58444: PUSH
58445: LD_VAR 0 1
58449: PUSH
58450: LD_VAR 0 3
58454: PLUS
58455: PUSH
58456: LD_INT 2
58458: DIV
58459: ST_TO_ADDR
// if _x < 0 then
58460: LD_VAR 0 6
58464: PUSH
58465: LD_INT 0
58467: LESS
58468: IFFALSE 58485
// _x := _x * - 1 ;
58470: LD_ADDR_VAR 0 6
58474: PUSH
58475: LD_VAR 0 6
58479: PUSH
58480: LD_INT 1
58482: NEG
58483: MUL
58484: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58485: LD_ADDR_VAR 0 7
58489: PUSH
58490: LD_VAR 0 2
58494: PUSH
58495: LD_VAR 0 4
58499: PLUS
58500: PUSH
58501: LD_INT 2
58503: DIV
58504: ST_TO_ADDR
// if _y < 0 then
58505: LD_VAR 0 7
58509: PUSH
58510: LD_INT 0
58512: LESS
58513: IFFALSE 58530
// _y := _y * - 1 ;
58515: LD_ADDR_VAR 0 7
58519: PUSH
58520: LD_VAR 0 7
58524: PUSH
58525: LD_INT 1
58527: NEG
58528: MUL
58529: ST_TO_ADDR
// result := [ _x , _y ] ;
58530: LD_ADDR_VAR 0 5
58534: PUSH
58535: LD_VAR 0 6
58539: PUSH
58540: LD_VAR 0 7
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: ST_TO_ADDR
// end ;
58549: LD_VAR 0 5
58553: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58554: LD_INT 0
58556: PPUSH
58557: PPUSH
58558: PPUSH
58559: PPUSH
// task := GetTaskList ( unit ) ;
58560: LD_ADDR_VAR 0 7
58564: PUSH
58565: LD_VAR 0 1
58569: PPUSH
58570: CALL_OW 437
58574: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58575: LD_VAR 0 7
58579: NOT
58580: PUSH
58581: LD_VAR 0 1
58585: PPUSH
58586: LD_VAR 0 2
58590: PPUSH
58591: CALL_OW 308
58595: NOT
58596: AND
58597: IFFALSE 58601
// exit ;
58599: GO 58719
// if IsInArea ( unit , area ) then
58601: LD_VAR 0 1
58605: PPUSH
58606: LD_VAR 0 2
58610: PPUSH
58611: CALL_OW 308
58615: IFFALSE 58633
// begin ComMoveToArea ( unit , goAway ) ;
58617: LD_VAR 0 1
58621: PPUSH
58622: LD_VAR 0 3
58626: PPUSH
58627: CALL_OW 113
// exit ;
58631: GO 58719
// end ; if task [ 1 ] [ 1 ] <> M then
58633: LD_VAR 0 7
58637: PUSH
58638: LD_INT 1
58640: ARRAY
58641: PUSH
58642: LD_INT 1
58644: ARRAY
58645: PUSH
58646: LD_STRING M
58648: NONEQUAL
58649: IFFALSE 58653
// exit ;
58651: GO 58719
// x := task [ 1 ] [ 2 ] ;
58653: LD_ADDR_VAR 0 5
58657: PUSH
58658: LD_VAR 0 7
58662: PUSH
58663: LD_INT 1
58665: ARRAY
58666: PUSH
58667: LD_INT 2
58669: ARRAY
58670: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
58671: LD_ADDR_VAR 0 6
58675: PUSH
58676: LD_VAR 0 7
58680: PUSH
58681: LD_INT 1
58683: ARRAY
58684: PUSH
58685: LD_INT 3
58687: ARRAY
58688: ST_TO_ADDR
// if InArea ( x , y , area ) then
58689: LD_VAR 0 5
58693: PPUSH
58694: LD_VAR 0 6
58698: PPUSH
58699: LD_VAR 0 2
58703: PPUSH
58704: CALL_OW 309
58708: IFFALSE 58719
// ComStop ( unit ) ;
58710: LD_VAR 0 1
58714: PPUSH
58715: CALL_OW 141
// end ;
58719: LD_VAR 0 4
58723: RET
// export function Abs ( value ) ; begin
58724: LD_INT 0
58726: PPUSH
// result := value ;
58727: LD_ADDR_VAR 0 2
58731: PUSH
58732: LD_VAR 0 1
58736: ST_TO_ADDR
// if value < 0 then
58737: LD_VAR 0 1
58741: PUSH
58742: LD_INT 0
58744: LESS
58745: IFFALSE 58762
// result := value * - 1 ;
58747: LD_ADDR_VAR 0 2
58751: PUSH
58752: LD_VAR 0 1
58756: PUSH
58757: LD_INT 1
58759: NEG
58760: MUL
58761: ST_TO_ADDR
// end ;
58762: LD_VAR 0 2
58766: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
58767: LD_INT 0
58769: PPUSH
58770: PPUSH
58771: PPUSH
58772: PPUSH
58773: PPUSH
58774: PPUSH
58775: PPUSH
58776: PPUSH
// if not unit or not building then
58777: LD_VAR 0 1
58781: NOT
58782: PUSH
58783: LD_VAR 0 2
58787: NOT
58788: OR
58789: IFFALSE 58793
// exit ;
58791: GO 59019
// x := GetX ( building ) ;
58793: LD_ADDR_VAR 0 4
58797: PUSH
58798: LD_VAR 0 2
58802: PPUSH
58803: CALL_OW 250
58807: ST_TO_ADDR
// y := GetY ( building ) ;
58808: LD_ADDR_VAR 0 6
58812: PUSH
58813: LD_VAR 0 2
58817: PPUSH
58818: CALL_OW 251
58822: ST_TO_ADDR
// d := GetDir ( building ) ;
58823: LD_ADDR_VAR 0 8
58827: PUSH
58828: LD_VAR 0 2
58832: PPUSH
58833: CALL_OW 254
58837: ST_TO_ADDR
// r := 4 ;
58838: LD_ADDR_VAR 0 9
58842: PUSH
58843: LD_INT 4
58845: ST_TO_ADDR
// for i := 1 to 5 do
58846: LD_ADDR_VAR 0 10
58850: PUSH
58851: DOUBLE
58852: LD_INT 1
58854: DEC
58855: ST_TO_ADDR
58856: LD_INT 5
58858: PUSH
58859: FOR_TO
58860: IFFALSE 59017
// begin _x := ShiftX ( x , d , r + i ) ;
58862: LD_ADDR_VAR 0 5
58866: PUSH
58867: LD_VAR 0 4
58871: PPUSH
58872: LD_VAR 0 8
58876: PPUSH
58877: LD_VAR 0 9
58881: PUSH
58882: LD_VAR 0 10
58886: PLUS
58887: PPUSH
58888: CALL_OW 272
58892: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
58893: LD_ADDR_VAR 0 7
58897: PUSH
58898: LD_VAR 0 6
58902: PPUSH
58903: LD_VAR 0 8
58907: PPUSH
58908: LD_VAR 0 9
58912: PUSH
58913: LD_VAR 0 10
58917: PLUS
58918: PPUSH
58919: CALL_OW 273
58923: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
58924: LD_VAR 0 5
58928: PPUSH
58929: LD_VAR 0 7
58933: PPUSH
58934: CALL_OW 488
58938: PUSH
58939: LD_VAR 0 5
58943: PPUSH
58944: LD_VAR 0 7
58948: PPUSH
58949: CALL_OW 428
58953: PPUSH
58954: CALL_OW 247
58958: PUSH
58959: LD_INT 3
58961: PUSH
58962: LD_INT 2
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: IN
58969: NOT
58970: AND
58971: IFFALSE 59015
// begin ComMoveXY ( unit , _x , _y ) ;
58973: LD_VAR 0 1
58977: PPUSH
58978: LD_VAR 0 5
58982: PPUSH
58983: LD_VAR 0 7
58987: PPUSH
58988: CALL_OW 111
// result := [ _x , _y ] ;
58992: LD_ADDR_VAR 0 3
58996: PUSH
58997: LD_VAR 0 5
59001: PUSH
59002: LD_VAR 0 7
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: ST_TO_ADDR
// exit ;
59011: POP
59012: POP
59013: GO 59019
// end ; end ;
59015: GO 58859
59017: POP
59018: POP
// end ;
59019: LD_VAR 0 3
59023: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59024: LD_INT 0
59026: PPUSH
59027: PPUSH
59028: PPUSH
// result := 0 ;
59029: LD_ADDR_VAR 0 3
59033: PUSH
59034: LD_INT 0
59036: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59037: LD_VAR 0 1
59041: PUSH
59042: LD_INT 0
59044: LESS
59045: PUSH
59046: LD_VAR 0 1
59050: PUSH
59051: LD_INT 8
59053: GREATER
59054: OR
59055: PUSH
59056: LD_VAR 0 2
59060: PUSH
59061: LD_INT 0
59063: LESS
59064: OR
59065: PUSH
59066: LD_VAR 0 2
59070: PUSH
59071: LD_INT 8
59073: GREATER
59074: OR
59075: IFFALSE 59079
// exit ;
59077: GO 59154
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59079: LD_ADDR_VAR 0 4
59083: PUSH
59084: LD_INT 22
59086: PUSH
59087: LD_VAR 0 2
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PPUSH
59096: CALL_OW 69
59100: PUSH
59101: FOR_IN
59102: IFFALSE 59152
// begin un := UnitShoot ( i ) ;
59104: LD_ADDR_VAR 0 5
59108: PUSH
59109: LD_VAR 0 4
59113: PPUSH
59114: CALL_OW 504
59118: ST_TO_ADDR
// if GetSide ( un ) = side1 then
59119: LD_VAR 0 5
59123: PPUSH
59124: CALL_OW 255
59128: PUSH
59129: LD_VAR 0 1
59133: EQUAL
59134: IFFALSE 59150
// begin result := un ;
59136: LD_ADDR_VAR 0 3
59140: PUSH
59141: LD_VAR 0 5
59145: ST_TO_ADDR
// exit ;
59146: POP
59147: POP
59148: GO 59154
// end ; end ;
59150: GO 59101
59152: POP
59153: POP
// end ;
59154: LD_VAR 0 3
59158: RET
// export function GetCargoBay ( units ) ; begin
59159: LD_INT 0
59161: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59162: LD_ADDR_VAR 0 2
59166: PUSH
59167: LD_VAR 0 1
59171: PPUSH
59172: LD_INT 2
59174: PUSH
59175: LD_INT 34
59177: PUSH
59178: LD_INT 12
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 34
59187: PUSH
59188: LD_INT 51
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 34
59197: PUSH
59198: LD_INT 32
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 34
59207: PUSH
59208: LD_EXP 77
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: PPUSH
59224: CALL_OW 72
59228: ST_TO_ADDR
// end ;
59229: LD_VAR 0 2
59233: RET
// export function Negate ( value ) ; begin
59234: LD_INT 0
59236: PPUSH
// result := not value ;
59237: LD_ADDR_VAR 0 2
59241: PUSH
59242: LD_VAR 0 1
59246: NOT
59247: ST_TO_ADDR
// end ;
59248: LD_VAR 0 2
59252: RET
// export function Inc ( value ) ; begin
59253: LD_INT 0
59255: PPUSH
// result := value + 1 ;
59256: LD_ADDR_VAR 0 2
59260: PUSH
59261: LD_VAR 0 1
59265: PUSH
59266: LD_INT 1
59268: PLUS
59269: ST_TO_ADDR
// end ;
59270: LD_VAR 0 2
59274: RET
// export function Dec ( value ) ; begin
59275: LD_INT 0
59277: PPUSH
// result := value - 1 ;
59278: LD_ADDR_VAR 0 2
59282: PUSH
59283: LD_VAR 0 1
59287: PUSH
59288: LD_INT 1
59290: MINUS
59291: ST_TO_ADDR
// end ;
59292: LD_VAR 0 2
59296: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
59297: LD_INT 0
59299: PPUSH
59300: PPUSH
59301: PPUSH
59302: PPUSH
59303: PPUSH
59304: PPUSH
59305: PPUSH
59306: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
59307: LD_VAR 0 1
59311: PPUSH
59312: LD_VAR 0 2
59316: PPUSH
59317: CALL_OW 488
59321: NOT
59322: PUSH
59323: LD_VAR 0 3
59327: PPUSH
59328: LD_VAR 0 4
59332: PPUSH
59333: CALL_OW 488
59337: NOT
59338: OR
59339: IFFALSE 59352
// begin result := - 1 ;
59341: LD_ADDR_VAR 0 5
59345: PUSH
59346: LD_INT 1
59348: NEG
59349: ST_TO_ADDR
// exit ;
59350: GO 59587
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
59352: LD_ADDR_VAR 0 12
59356: PUSH
59357: LD_VAR 0 1
59361: PPUSH
59362: LD_VAR 0 2
59366: PPUSH
59367: LD_VAR 0 3
59371: PPUSH
59372: LD_VAR 0 4
59376: PPUSH
59377: CALL 58435 0 4
59381: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
59382: LD_ADDR_VAR 0 11
59386: PUSH
59387: LD_VAR 0 1
59391: PPUSH
59392: LD_VAR 0 2
59396: PPUSH
59397: LD_VAR 0 12
59401: PUSH
59402: LD_INT 1
59404: ARRAY
59405: PPUSH
59406: LD_VAR 0 12
59410: PUSH
59411: LD_INT 2
59413: ARRAY
59414: PPUSH
59415: CALL_OW 298
59419: ST_TO_ADDR
// distance := 9999 ;
59420: LD_ADDR_VAR 0 10
59424: PUSH
59425: LD_INT 9999
59427: ST_TO_ADDR
// for i := 0 to 5 do
59428: LD_ADDR_VAR 0 6
59432: PUSH
59433: DOUBLE
59434: LD_INT 0
59436: DEC
59437: ST_TO_ADDR
59438: LD_INT 5
59440: PUSH
59441: FOR_TO
59442: IFFALSE 59585
// begin _x := ShiftX ( x1 , i , centerDist ) ;
59444: LD_ADDR_VAR 0 7
59448: PUSH
59449: LD_VAR 0 1
59453: PPUSH
59454: LD_VAR 0 6
59458: PPUSH
59459: LD_VAR 0 11
59463: PPUSH
59464: CALL_OW 272
59468: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
59469: LD_ADDR_VAR 0 8
59473: PUSH
59474: LD_VAR 0 2
59478: PPUSH
59479: LD_VAR 0 6
59483: PPUSH
59484: LD_VAR 0 11
59488: PPUSH
59489: CALL_OW 273
59493: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59494: LD_VAR 0 7
59498: PPUSH
59499: LD_VAR 0 8
59503: PPUSH
59504: CALL_OW 488
59508: NOT
59509: IFFALSE 59513
// continue ;
59511: GO 59441
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
59513: LD_ADDR_VAR 0 9
59517: PUSH
59518: LD_VAR 0 12
59522: PUSH
59523: LD_INT 1
59525: ARRAY
59526: PPUSH
59527: LD_VAR 0 12
59531: PUSH
59532: LD_INT 2
59534: ARRAY
59535: PPUSH
59536: LD_VAR 0 7
59540: PPUSH
59541: LD_VAR 0 8
59545: PPUSH
59546: CALL_OW 298
59550: ST_TO_ADDR
// if tmp < distance then
59551: LD_VAR 0 9
59555: PUSH
59556: LD_VAR 0 10
59560: LESS
59561: IFFALSE 59583
// begin result := i ;
59563: LD_ADDR_VAR 0 5
59567: PUSH
59568: LD_VAR 0 6
59572: ST_TO_ADDR
// distance := tmp ;
59573: LD_ADDR_VAR 0 10
59577: PUSH
59578: LD_VAR 0 9
59582: ST_TO_ADDR
// end ; end ;
59583: GO 59441
59585: POP
59586: POP
// end ;
59587: LD_VAR 0 5
59591: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59592: LD_INT 0
59594: PPUSH
59595: PPUSH
// if not driver or not IsInUnit ( driver ) then
59596: LD_VAR 0 1
59600: NOT
59601: PUSH
59602: LD_VAR 0 1
59606: PPUSH
59607: CALL_OW 310
59611: NOT
59612: OR
59613: IFFALSE 59617
// exit ;
59615: GO 59707
// vehicle := IsInUnit ( driver ) ;
59617: LD_ADDR_VAR 0 3
59621: PUSH
59622: LD_VAR 0 1
59626: PPUSH
59627: CALL_OW 310
59631: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59632: LD_VAR 0 1
59636: PPUSH
59637: LD_STRING \
59639: PUSH
59640: LD_INT 0
59642: PUSH
59643: LD_INT 0
59645: PUSH
59646: LD_INT 0
59648: PUSH
59649: LD_INT 0
59651: PUSH
59652: LD_INT 0
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: PUSH
59667: LD_STRING E
59669: PUSH
59670: LD_INT 0
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: LD_VAR 0 3
59680: PUSH
59681: LD_INT 0
59683: PUSH
59684: LD_INT 0
59686: PUSH
59687: LD_INT 0
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PPUSH
59703: CALL_OW 446
// end ;
59707: LD_VAR 0 2
59711: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59712: LD_INT 0
59714: PPUSH
59715: PPUSH
// if not driver or not IsInUnit ( driver ) then
59716: LD_VAR 0 1
59720: NOT
59721: PUSH
59722: LD_VAR 0 1
59726: PPUSH
59727: CALL_OW 310
59731: NOT
59732: OR
59733: IFFALSE 59737
// exit ;
59735: GO 59827
// vehicle := IsInUnit ( driver ) ;
59737: LD_ADDR_VAR 0 3
59741: PUSH
59742: LD_VAR 0 1
59746: PPUSH
59747: CALL_OW 310
59751: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59752: LD_VAR 0 1
59756: PPUSH
59757: LD_STRING \
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: LD_INT 0
59765: PUSH
59766: LD_INT 0
59768: PUSH
59769: LD_INT 0
59771: PUSH
59772: LD_INT 0
59774: PUSH
59775: LD_INT 0
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: PUSH
59787: LD_STRING E
59789: PUSH
59790: LD_INT 0
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: LD_VAR 0 3
59800: PUSH
59801: LD_INT 0
59803: PUSH
59804: LD_INT 0
59806: PUSH
59807: LD_INT 0
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PPUSH
59823: CALL_OW 447
// end ;
59827: LD_VAR 0 2
59831: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
59832: LD_INT 0
59834: PPUSH
59835: PPUSH
59836: PPUSH
// tmp := [ ] ;
59837: LD_ADDR_VAR 0 5
59841: PUSH
59842: EMPTY
59843: ST_TO_ADDR
// for i in units do
59844: LD_ADDR_VAR 0 4
59848: PUSH
59849: LD_VAR 0 1
59853: PUSH
59854: FOR_IN
59855: IFFALSE 59893
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
59857: LD_ADDR_VAR 0 5
59861: PUSH
59862: LD_VAR 0 5
59866: PPUSH
59867: LD_VAR 0 5
59871: PUSH
59872: LD_INT 1
59874: PLUS
59875: PPUSH
59876: LD_VAR 0 4
59880: PPUSH
59881: CALL_OW 256
59885: PPUSH
59886: CALL_OW 2
59890: ST_TO_ADDR
59891: GO 59854
59893: POP
59894: POP
// if not tmp then
59895: LD_VAR 0 5
59899: NOT
59900: IFFALSE 59904
// exit ;
59902: GO 59952
// if asc then
59904: LD_VAR 0 2
59908: IFFALSE 59932
// result := SortListByListAsc ( units , tmp ) else
59910: LD_ADDR_VAR 0 3
59914: PUSH
59915: LD_VAR 0 1
59919: PPUSH
59920: LD_VAR 0 5
59924: PPUSH
59925: CALL_OW 76
59929: ST_TO_ADDR
59930: GO 59952
// result := SortListByListDesc ( units , tmp ) ;
59932: LD_ADDR_VAR 0 3
59936: PUSH
59937: LD_VAR 0 1
59941: PPUSH
59942: LD_VAR 0 5
59946: PPUSH
59947: CALL_OW 77
59951: ST_TO_ADDR
// end ;
59952: LD_VAR 0 3
59956: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
59957: LD_INT 0
59959: PPUSH
59960: PPUSH
// task := GetTaskList ( mech ) ;
59961: LD_ADDR_VAR 0 4
59965: PUSH
59966: LD_VAR 0 1
59970: PPUSH
59971: CALL_OW 437
59975: ST_TO_ADDR
// if not task then
59976: LD_VAR 0 4
59980: NOT
59981: IFFALSE 59985
// exit ;
59983: GO 60027
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
59985: LD_ADDR_VAR 0 3
59989: PUSH
59990: LD_VAR 0 4
59994: PUSH
59995: LD_INT 1
59997: ARRAY
59998: PUSH
59999: LD_INT 1
60001: ARRAY
60002: PUSH
60003: LD_STRING r
60005: EQUAL
60006: PUSH
60007: LD_VAR 0 4
60011: PUSH
60012: LD_INT 1
60014: ARRAY
60015: PUSH
60016: LD_INT 4
60018: ARRAY
60019: PUSH
60020: LD_VAR 0 2
60024: EQUAL
60025: AND
60026: ST_TO_ADDR
// end ;
60027: LD_VAR 0 3
60031: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
60032: LD_INT 0
60034: PPUSH
// SetDir ( unit , d ) ;
60035: LD_VAR 0 1
60039: PPUSH
60040: LD_VAR 0 4
60044: PPUSH
60045: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
60049: LD_VAR 0 1
60053: PPUSH
60054: LD_VAR 0 2
60058: PPUSH
60059: LD_VAR 0 3
60063: PPUSH
60064: LD_VAR 0 5
60068: PPUSH
60069: CALL_OW 48
// end ;
60073: LD_VAR 0 6
60077: RET
// export function ToNaturalNumber ( number ) ; begin
60078: LD_INT 0
60080: PPUSH
// result := number div 1 ;
60081: LD_ADDR_VAR 0 2
60085: PUSH
60086: LD_VAR 0 1
60090: PUSH
60091: LD_INT 1
60093: DIV
60094: ST_TO_ADDR
// if number < 0 then
60095: LD_VAR 0 1
60099: PUSH
60100: LD_INT 0
60102: LESS
60103: IFFALSE 60113
// result := 0 ;
60105: LD_ADDR_VAR 0 2
60109: PUSH
60110: LD_INT 0
60112: ST_TO_ADDR
// end ;
60113: LD_VAR 0 2
60117: RET
// export function SortByClass ( units , class ) ; var un ; begin
60118: LD_INT 0
60120: PPUSH
60121: PPUSH
// if not units or not class then
60122: LD_VAR 0 1
60126: NOT
60127: PUSH
60128: LD_VAR 0 2
60132: NOT
60133: OR
60134: IFFALSE 60138
// exit ;
60136: GO 60233
// result := [ ] ;
60138: LD_ADDR_VAR 0 3
60142: PUSH
60143: EMPTY
60144: ST_TO_ADDR
// for un in units do
60145: LD_ADDR_VAR 0 4
60149: PUSH
60150: LD_VAR 0 1
60154: PUSH
60155: FOR_IN
60156: IFFALSE 60231
// if GetClass ( un ) = class then
60158: LD_VAR 0 4
60162: PPUSH
60163: CALL_OW 257
60167: PUSH
60168: LD_VAR 0 2
60172: EQUAL
60173: IFFALSE 60200
// result := Insert ( result , 1 , un ) else
60175: LD_ADDR_VAR 0 3
60179: PUSH
60180: LD_VAR 0 3
60184: PPUSH
60185: LD_INT 1
60187: PPUSH
60188: LD_VAR 0 4
60192: PPUSH
60193: CALL_OW 2
60197: ST_TO_ADDR
60198: GO 60229
// result := Replace ( result , result + 1 , un ) ;
60200: LD_ADDR_VAR 0 3
60204: PUSH
60205: LD_VAR 0 3
60209: PPUSH
60210: LD_VAR 0 3
60214: PUSH
60215: LD_INT 1
60217: PLUS
60218: PPUSH
60219: LD_VAR 0 4
60223: PPUSH
60224: CALL_OW 1
60228: ST_TO_ADDR
60229: GO 60155
60231: POP
60232: POP
// end ;
60233: LD_VAR 0 3
60237: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
60238: LD_INT 0
60240: PPUSH
60241: PPUSH
60242: PPUSH
60243: PPUSH
60244: PPUSH
60245: PPUSH
60246: PPUSH
// result := [ ] ;
60247: LD_ADDR_VAR 0 4
60251: PUSH
60252: EMPTY
60253: ST_TO_ADDR
// if x - r < 0 then
60254: LD_VAR 0 1
60258: PUSH
60259: LD_VAR 0 3
60263: MINUS
60264: PUSH
60265: LD_INT 0
60267: LESS
60268: IFFALSE 60280
// min_x := 0 else
60270: LD_ADDR_VAR 0 8
60274: PUSH
60275: LD_INT 0
60277: ST_TO_ADDR
60278: GO 60296
// min_x := x - r ;
60280: LD_ADDR_VAR 0 8
60284: PUSH
60285: LD_VAR 0 1
60289: PUSH
60290: LD_VAR 0 3
60294: MINUS
60295: ST_TO_ADDR
// if y - r < 0 then
60296: LD_VAR 0 2
60300: PUSH
60301: LD_VAR 0 3
60305: MINUS
60306: PUSH
60307: LD_INT 0
60309: LESS
60310: IFFALSE 60322
// min_y := 0 else
60312: LD_ADDR_VAR 0 7
60316: PUSH
60317: LD_INT 0
60319: ST_TO_ADDR
60320: GO 60338
// min_y := y - r ;
60322: LD_ADDR_VAR 0 7
60326: PUSH
60327: LD_VAR 0 2
60331: PUSH
60332: LD_VAR 0 3
60336: MINUS
60337: ST_TO_ADDR
// max_x := x + r ;
60338: LD_ADDR_VAR 0 9
60342: PUSH
60343: LD_VAR 0 1
60347: PUSH
60348: LD_VAR 0 3
60352: PLUS
60353: ST_TO_ADDR
// max_y := y + r ;
60354: LD_ADDR_VAR 0 10
60358: PUSH
60359: LD_VAR 0 2
60363: PUSH
60364: LD_VAR 0 3
60368: PLUS
60369: ST_TO_ADDR
// for _x = min_x to max_x do
60370: LD_ADDR_VAR 0 5
60374: PUSH
60375: DOUBLE
60376: LD_VAR 0 8
60380: DEC
60381: ST_TO_ADDR
60382: LD_VAR 0 9
60386: PUSH
60387: FOR_TO
60388: IFFALSE 60489
// for _y = min_y to max_y do
60390: LD_ADDR_VAR 0 6
60394: PUSH
60395: DOUBLE
60396: LD_VAR 0 7
60400: DEC
60401: ST_TO_ADDR
60402: LD_VAR 0 10
60406: PUSH
60407: FOR_TO
60408: IFFALSE 60485
// begin if not ValidHex ( _x , _y ) then
60410: LD_VAR 0 5
60414: PPUSH
60415: LD_VAR 0 6
60419: PPUSH
60420: CALL_OW 488
60424: NOT
60425: IFFALSE 60429
// continue ;
60427: GO 60407
// if GetResourceTypeXY ( _x , _y ) then
60429: LD_VAR 0 5
60433: PPUSH
60434: LD_VAR 0 6
60438: PPUSH
60439: CALL_OW 283
60443: IFFALSE 60483
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
60445: LD_ADDR_VAR 0 4
60449: PUSH
60450: LD_VAR 0 4
60454: PPUSH
60455: LD_VAR 0 4
60459: PUSH
60460: LD_INT 1
60462: PLUS
60463: PPUSH
60464: LD_VAR 0 5
60468: PUSH
60469: LD_VAR 0 6
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PPUSH
60478: CALL_OW 1
60482: ST_TO_ADDR
// end ;
60483: GO 60407
60485: POP
60486: POP
60487: GO 60387
60489: POP
60490: POP
// end ;
60491: LD_VAR 0 4
60495: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
60496: LD_INT 0
60498: PPUSH
60499: PPUSH
60500: PPUSH
60501: PPUSH
60502: PPUSH
60503: PPUSH
60504: PPUSH
60505: PPUSH
// if not units then
60506: LD_VAR 0 1
60510: NOT
60511: IFFALSE 60515
// exit ;
60513: GO 60940
// result := UnitFilter ( units , [ f_ok ] ) ;
60515: LD_ADDR_VAR 0 3
60519: PUSH
60520: LD_VAR 0 1
60524: PPUSH
60525: LD_INT 50
60527: PUSH
60528: EMPTY
60529: LIST
60530: PPUSH
60531: CALL_OW 72
60535: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
60536: LD_ADDR_VAR 0 8
60540: PUSH
60541: LD_VAR 0 1
60545: PUSH
60546: LD_INT 1
60548: ARRAY
60549: PPUSH
60550: CALL_OW 255
60554: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
60555: LD_ADDR_VAR 0 10
60559: PUSH
60560: LD_INT 29
60562: PUSH
60563: LD_EXP 80
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: ST_TO_ADDR
// if not result then
60572: LD_VAR 0 3
60576: NOT
60577: IFFALSE 60581
// exit ;
60579: GO 60940
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
60581: LD_ADDR_VAR 0 5
60585: PUSH
60586: LD_INT 81
60588: PUSH
60589: LD_VAR 0 8
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PPUSH
60598: CALL_OW 69
60602: ST_TO_ADDR
// for i in result do
60603: LD_ADDR_VAR 0 4
60607: PUSH
60608: LD_VAR 0 3
60612: PUSH
60613: FOR_IN
60614: IFFALSE 60938
// begin tag := GetTag ( i ) + 1 ;
60616: LD_ADDR_VAR 0 9
60620: PUSH
60621: LD_VAR 0 4
60625: PPUSH
60626: CALL_OW 110
60630: PUSH
60631: LD_INT 1
60633: PLUS
60634: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
60635: LD_ADDR_VAR 0 7
60639: PUSH
60640: LD_VAR 0 4
60644: PPUSH
60645: CALL_OW 250
60649: PPUSH
60650: LD_VAR 0 4
60654: PPUSH
60655: CALL_OW 251
60659: PPUSH
60660: LD_INT 6
60662: PPUSH
60663: CALL 60238 0 3
60667: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
60668: LD_VAR 0 7
60672: PUSH
60673: LD_VAR 0 4
60677: PPUSH
60678: CALL_OW 264
60682: PUSH
60683: LD_VAR 0 10
60687: IN
60688: NOT
60689: AND
60690: IFFALSE 60729
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
60692: LD_VAR 0 4
60696: PPUSH
60697: LD_VAR 0 7
60701: PUSH
60702: LD_INT 1
60704: ARRAY
60705: PUSH
60706: LD_INT 1
60708: ARRAY
60709: PPUSH
60710: LD_VAR 0 7
60714: PUSH
60715: LD_INT 1
60717: ARRAY
60718: PUSH
60719: LD_INT 2
60721: ARRAY
60722: PPUSH
60723: CALL_OW 116
60727: GO 60936
// if path > tag then
60729: LD_VAR 0 2
60733: PUSH
60734: LD_VAR 0 9
60738: GREATER
60739: IFFALSE 60906
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
60741: LD_ADDR_VAR 0 6
60745: PUSH
60746: LD_VAR 0 5
60750: PPUSH
60751: LD_INT 91
60753: PUSH
60754: LD_VAR 0 4
60758: PUSH
60759: LD_INT 12
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: LIST
60766: PPUSH
60767: CALL_OW 72
60771: ST_TO_ADDR
// if nearEnemy then
60772: LD_VAR 0 6
60776: IFFALSE 60804
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
60778: LD_VAR 0 4
60782: PPUSH
60783: LD_VAR 0 6
60787: PPUSH
60788: LD_VAR 0 4
60792: PPUSH
60793: CALL_OW 74
60797: PPUSH
60798: CALL_OW 115
60802: GO 60904
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
60804: LD_VAR 0 4
60808: PPUSH
60809: LD_VAR 0 2
60813: PUSH
60814: LD_VAR 0 9
60818: ARRAY
60819: PUSH
60820: LD_INT 1
60822: ARRAY
60823: PPUSH
60824: LD_VAR 0 2
60828: PUSH
60829: LD_VAR 0 9
60833: ARRAY
60834: PUSH
60835: LD_INT 2
60837: ARRAY
60838: PPUSH
60839: CALL_OW 297
60843: PUSH
60844: LD_INT 6
60846: GREATER
60847: IFFALSE 60890
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
60849: LD_VAR 0 4
60853: PPUSH
60854: LD_VAR 0 2
60858: PUSH
60859: LD_VAR 0 9
60863: ARRAY
60864: PUSH
60865: LD_INT 1
60867: ARRAY
60868: PPUSH
60869: LD_VAR 0 2
60873: PUSH
60874: LD_VAR 0 9
60878: ARRAY
60879: PUSH
60880: LD_INT 2
60882: ARRAY
60883: PPUSH
60884: CALL_OW 114
60888: GO 60904
// SetTag ( i , tag ) ;
60890: LD_VAR 0 4
60894: PPUSH
60895: LD_VAR 0 9
60899: PPUSH
60900: CALL_OW 109
// end else
60904: GO 60936
// if enemy then
60906: LD_VAR 0 5
60910: IFFALSE 60936
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
60912: LD_VAR 0 4
60916: PPUSH
60917: LD_VAR 0 5
60921: PPUSH
60922: LD_VAR 0 4
60926: PPUSH
60927: CALL_OW 74
60931: PPUSH
60932: CALL_OW 115
// end ;
60936: GO 60613
60938: POP
60939: POP
// end ;
60940: LD_VAR 0 3
60944: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
60945: LD_INT 0
60947: PPUSH
60948: PPUSH
60949: PPUSH
// if not unit or IsInUnit ( unit ) then
60950: LD_VAR 0 1
60954: NOT
60955: PUSH
60956: LD_VAR 0 1
60960: PPUSH
60961: CALL_OW 310
60965: OR
60966: IFFALSE 60970
// exit ;
60968: GO 61061
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
60970: LD_ADDR_VAR 0 4
60974: PUSH
60975: LD_VAR 0 1
60979: PPUSH
60980: CALL_OW 250
60984: PPUSH
60985: LD_VAR 0 2
60989: PPUSH
60990: LD_INT 1
60992: PPUSH
60993: CALL_OW 272
60997: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
60998: LD_ADDR_VAR 0 5
61002: PUSH
61003: LD_VAR 0 1
61007: PPUSH
61008: CALL_OW 251
61012: PPUSH
61013: LD_VAR 0 2
61017: PPUSH
61018: LD_INT 1
61020: PPUSH
61021: CALL_OW 273
61025: ST_TO_ADDR
// if ValidHex ( x , y ) then
61026: LD_VAR 0 4
61030: PPUSH
61031: LD_VAR 0 5
61035: PPUSH
61036: CALL_OW 488
61040: IFFALSE 61061
// ComTurnXY ( unit , x , y ) ;
61042: LD_VAR 0 1
61046: PPUSH
61047: LD_VAR 0 4
61051: PPUSH
61052: LD_VAR 0 5
61056: PPUSH
61057: CALL_OW 118
// end ;
61061: LD_VAR 0 3
61065: RET
// export function SeeUnits ( side , units ) ; var i ; begin
61066: LD_INT 0
61068: PPUSH
61069: PPUSH
// result := false ;
61070: LD_ADDR_VAR 0 3
61074: PUSH
61075: LD_INT 0
61077: ST_TO_ADDR
// if not units then
61078: LD_VAR 0 2
61082: NOT
61083: IFFALSE 61087
// exit ;
61085: GO 61132
// for i in units do
61087: LD_ADDR_VAR 0 4
61091: PUSH
61092: LD_VAR 0 2
61096: PUSH
61097: FOR_IN
61098: IFFALSE 61130
// if See ( side , i ) then
61100: LD_VAR 0 1
61104: PPUSH
61105: LD_VAR 0 4
61109: PPUSH
61110: CALL_OW 292
61114: IFFALSE 61128
// begin result := true ;
61116: LD_ADDR_VAR 0 3
61120: PUSH
61121: LD_INT 1
61123: ST_TO_ADDR
// exit ;
61124: POP
61125: POP
61126: GO 61132
// end ;
61128: GO 61097
61130: POP
61131: POP
// end ;
61132: LD_VAR 0 3
61136: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
61137: LD_INT 0
61139: PPUSH
61140: PPUSH
61141: PPUSH
61142: PPUSH
// if not unit or not points then
61143: LD_VAR 0 1
61147: NOT
61148: PUSH
61149: LD_VAR 0 2
61153: NOT
61154: OR
61155: IFFALSE 61159
// exit ;
61157: GO 61249
// dist := 99999 ;
61159: LD_ADDR_VAR 0 5
61163: PUSH
61164: LD_INT 99999
61166: ST_TO_ADDR
// for i in points do
61167: LD_ADDR_VAR 0 4
61171: PUSH
61172: LD_VAR 0 2
61176: PUSH
61177: FOR_IN
61178: IFFALSE 61247
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
61180: LD_ADDR_VAR 0 6
61184: PUSH
61185: LD_VAR 0 1
61189: PPUSH
61190: LD_VAR 0 4
61194: PUSH
61195: LD_INT 1
61197: ARRAY
61198: PPUSH
61199: LD_VAR 0 4
61203: PUSH
61204: LD_INT 2
61206: ARRAY
61207: PPUSH
61208: CALL_OW 297
61212: ST_TO_ADDR
// if tmpDist < dist then
61213: LD_VAR 0 6
61217: PUSH
61218: LD_VAR 0 5
61222: LESS
61223: IFFALSE 61245
// begin result := i ;
61225: LD_ADDR_VAR 0 3
61229: PUSH
61230: LD_VAR 0 4
61234: ST_TO_ADDR
// dist := tmpDist ;
61235: LD_ADDR_VAR 0 5
61239: PUSH
61240: LD_VAR 0 6
61244: ST_TO_ADDR
// end ; end ;
61245: GO 61177
61247: POP
61248: POP
// end ; end_of_file
61249: LD_VAR 0 3
61253: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
61254: LD_VAR 0 1
61258: PPUSH
61259: LD_VAR 0 2
61263: PPUSH
61264: LD_VAR 0 3
61268: PPUSH
61269: LD_VAR 0 4
61273: PPUSH
61274: LD_VAR 0 5
61278: PPUSH
61279: LD_VAR 0 6
61283: PPUSH
61284: CALL 1905 0 6
// end ;
61288: PPOPN 6
61290: END
