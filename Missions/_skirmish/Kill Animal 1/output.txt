// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 136 , 106 ) ;
   4: LD_INT 136
   6: PPUSH
   7: LD_INT 106
   9: PPUSH
  10: CALL_OW 86
// Init ;
  14: CALL 75 0 0
// CreateNature ( natArea , watArea , [ 10 , 2 * Difficulty , 6 , 6 , 3 * Difficulty , 6 , 4 ] ) ;
  18: LD_INT 2
  20: PPUSH
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 10
  26: PUSH
  27: LD_INT 2
  29: PUSH
  30: LD_OWVAR 67
  34: MUL
  35: PUSH
  36: LD_INT 6
  38: PUSH
  39: LD_INT 6
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: LD_OWVAR 67
  49: MUL
  50: PUSH
  51: LD_INT 6
  53: PUSH
  54: LD_INT 4
  56: PUSH
  57: EMPTY
  58: LIST
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: LIST
  64: LIST
  65: PPUSH
  66: CALL 387 0 3
// PrepareHunters ( ) ;
  70: CALL 233 0 0
// end ;
  74: END
// export debug , hunterClass , huntersAmount , animalAmount ; export points , hunters ; function Init ; begin
  75: LD_INT 0
  77: PPUSH
// debug := 0 ;
  78: LD_ADDR_EXP 1
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// if debug then
  86: LD_EXP 1
  90: IFFALSE 125
// begin FogOff ( 1 ) ;
  92: LD_INT 1
  94: PPUSH
  95: CALL_OW 344
// Difficulty := 2 ;
  99: LD_ADDR_OWVAR 67
 103: PUSH
 104: LD_INT 2
 106: ST_TO_ADDR
// hunterClass := 3 ;
 107: LD_ADDR_EXP 2
 111: PUSH
 112: LD_INT 3
 114: ST_TO_ADDR
// animalAmount := 2 ;
 115: LD_ADDR_EXP 4
 119: PUSH
 120: LD_INT 2
 122: ST_TO_ADDR
// end else
 123: GO 164
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
 125: LD_ADDR_OWVAR 67
 129: PUSH
 130: LD_INT 0
 132: PPUSH
 133: CALL_OW 426
 137: ST_TO_ADDR
// hunterClass := GetMultiplayerSetting ( 2 ) ;
 138: LD_ADDR_EXP 2
 142: PUSH
 143: LD_INT 2
 145: PPUSH
 146: CALL_OW 426
 150: ST_TO_ADDR
// animalAmount := GetMultiplayerSetting ( 1 ) ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 1
 158: PPUSH
 159: CALL_OW 426
 163: ST_TO_ADDR
// end ; huntersAmount := [ 4 , 6 , 8 ] [ Difficulty ] ;
 164: LD_ADDR_EXP 3
 168: PUSH
 169: LD_INT 4
 171: PUSH
 172: LD_INT 6
 174: PUSH
 175: LD_INT 8
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: PUSH
 183: LD_OWVAR 67
 187: ARRAY
 188: ST_TO_ADDR
// points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 189: LD_ADDR_EXP 5
 193: PUSH
 194: LD_INT 0
 196: PUSH
 197: LD_INT 0
 199: PUSH
 200: LD_INT 0
 202: PUSH
 203: LD_INT 0
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: LD_INT 0
 211: PUSH
 212: LD_INT 0
 214: PUSH
 215: LD_INT 0
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: ST_TO_ADDR
// end ;
 228: LD_VAR 0 1
 232: RET
// export function PrepareHunters ; var i , un ; begin
 233: LD_INT 0
 235: PPUSH
 236: PPUSH
 237: PPUSH
// for i := 1 to huntersAmount do
 238: LD_ADDR_VAR 0 2
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_EXP 3
 252: PUSH
 253: FOR_TO
 254: IFFALSE 380
// begin uc_side := i ;
 256: LD_ADDR_OWVAR 20
 260: PUSH
 261: LD_VAR 0 2
 265: ST_TO_ADDR
// uc_nation := i mod 3 + 1 ;
 266: LD_ADDR_OWVAR 21
 270: PUSH
 271: LD_VAR 0 2
 275: PUSH
 276: LD_INT 3
 278: MOD
 279: PUSH
 280: LD_INT 1
 282: PLUS
 283: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_sniper , class_desert_warior ] [ hunterClass ] , 10 - Difficulty * 2 ) ;
 284: LD_INT 0
 286: PPUSH
 287: LD_INT 1
 289: PUSH
 290: LD_INT 5
 292: PUSH
 293: LD_INT 11
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: LIST
 300: PUSH
 301: LD_EXP 2
 305: ARRAY
 306: PPUSH
 307: LD_INT 10
 309: PUSH
 310: LD_OWVAR 67
 314: PUSH
 315: LD_INT 2
 317: MUL
 318: MINUS
 319: PPUSH
 320: CALL_OW 380
// un := CreateHuman ;
 324: LD_ADDR_VAR 0 3
 328: PUSH
 329: CALL_OW 44
 333: ST_TO_ADDR
// hunters := Replace ( hunters , hunters + 1 , un ) ;
 334: LD_ADDR_EXP 6
 338: PUSH
 339: LD_EXP 6
 343: PPUSH
 344: LD_EXP 6
 348: PUSH
 349: LD_INT 1
 351: PLUS
 352: PPUSH
 353: LD_VAR 0 3
 357: PPUSH
 358: CALL_OW 1
 362: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 363: LD_VAR 0 3
 367: PPUSH
 368: LD_INT 4
 370: PPUSH
 371: LD_INT 0
 373: PPUSH
 374: CALL_OW 49
// end ;
 378: GO 253
 380: POP
 381: POP
// end ; end_of_file
 382: LD_VAR 0 1
 386: RET
// export function CreateNature ( area , waterArea , numbers ) ; var i , j , classes , waterClass ; begin
 387: LD_INT 0
 389: PPUSH
 390: PPUSH
 391: PPUSH
 392: PPUSH
 393: PPUSH
// uc_side = 0 ;
 394: LD_ADDR_OWVAR 20
 398: PUSH
 399: LD_INT 0
 401: ST_TO_ADDR
// uc_nation = 0 ;
 402: LD_ADDR_OWVAR 21
 406: PUSH
 407: LD_INT 0
 409: ST_TO_ADDR
// classes := [ class_apeman , class_apeman_soldier , class_baggie , class_phororhacos , class_tiger , class_horse ] ;
 410: LD_ADDR_VAR 0 7
 414: PUSH
 415: LD_INT 12
 417: PUSH
 418: LD_INT 15
 420: PUSH
 421: LD_INT 13
 423: PUSH
 424: LD_INT 18
 426: PUSH
 427: LD_INT 14
 429: PUSH
 430: LD_INT 21
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: ST_TO_ADDR
// waterClass := [ class_fish ] ;
 441: LD_ADDR_VAR 0 8
 445: PUSH
 446: LD_INT 20
 448: PUSH
 449: EMPTY
 450: LIST
 451: ST_TO_ADDR
// InitHc_All ( ) ;
 452: CALL_OW 584
// for i := 1 to numbers - 2 do
 456: LD_ADDR_VAR 0 5
 460: PUSH
 461: DOUBLE
 462: LD_INT 1
 464: DEC
 465: ST_TO_ADDR
 466: LD_VAR 0 3
 470: PUSH
 471: LD_INT 2
 473: MINUS
 474: PUSH
 475: FOR_TO
 476: IFFALSE 617
// begin if numbers [ i ] = 0 then
 478: LD_VAR 0 3
 482: PUSH
 483: LD_VAR 0 5
 487: ARRAY
 488: PUSH
 489: LD_INT 0
 491: EQUAL
 492: IFFALSE 496
// continue ;
 494: GO 475
// hc_class := classes [ i ] ;
 496: LD_ADDR_OWVAR 28
 500: PUSH
 501: LD_VAR 0 7
 505: PUSH
 506: LD_VAR 0 5
 510: ARRAY
 511: ST_TO_ADDR
// hc_attr := [ rand ( 8 , 12 ) , rand ( 8 , 12 ) ] ;
 512: LD_ADDR_OWVAR 29
 516: PUSH
 517: LD_INT 8
 519: PPUSH
 520: LD_INT 12
 522: PPUSH
 523: CALL_OW 12
 527: PUSH
 528: LD_INT 8
 530: PPUSH
 531: LD_INT 12
 533: PPUSH
 534: CALL_OW 12
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) + Difficulty * 5 ;
 543: LD_ADDR_OWVAR 35
 547: PUSH
 548: LD_INT 5
 550: NEG
 551: PPUSH
 552: LD_INT 5
 554: PPUSH
 555: CALL_OW 12
 559: PUSH
 560: LD_OWVAR 67
 564: PUSH
 565: LD_INT 5
 567: MUL
 568: PLUS
 569: ST_TO_ADDR
// for j := 1 to numbers [ i ] do
 570: LD_ADDR_VAR 0 6
 574: PUSH
 575: DOUBLE
 576: LD_INT 1
 578: DEC
 579: ST_TO_ADDR
 580: LD_VAR 0 3
 584: PUSH
 585: LD_VAR 0 5
 589: ARRAY
 590: PUSH
 591: FOR_TO
 592: IFFALSE 613
// PlaceUnitArea ( CreateHuman , area , false ) ;
 594: CALL_OW 44
 598: PPUSH
 599: LD_VAR 0 1
 603: PPUSH
 604: LD_INT 0
 606: PPUSH
 607: CALL_OW 49
 611: GO 591
 613: POP
 614: POP
// end ;
 615: GO 475
 617: POP
 618: POP
// if not waterArea then
 619: LD_VAR 0 2
 623: NOT
 624: IFFALSE 628
// exit ;
 626: GO 708
// hc_class := waterClass [ 1 ] ;
 628: LD_ADDR_OWVAR 28
 632: PUSH
 633: LD_VAR 0 8
 637: PUSH
 638: LD_INT 1
 640: ARRAY
 641: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 642: LD_ADDR_OWVAR 29
 646: PUSH
 647: LD_INT 10
 649: PUSH
 650: LD_INT 10
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: ST_TO_ADDR
// hc_agressivity := 0 ;
 657: LD_ADDR_OWVAR 35
 661: PUSH
 662: LD_INT 0
 664: ST_TO_ADDR
// for j := 1 to numbers [ 7 ] do
 665: LD_ADDR_VAR 0 6
 669: PUSH
 670: DOUBLE
 671: LD_INT 1
 673: DEC
 674: ST_TO_ADDR
 675: LD_VAR 0 3
 679: PUSH
 680: LD_INT 7
 682: ARRAY
 683: PUSH
 684: FOR_TO
 685: IFFALSE 706
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 687: CALL_OW 44
 691: PPUSH
 692: LD_VAR 0 2
 696: PPUSH
 697: LD_INT 0
 699: PPUSH
 700: CALL_OW 49
 704: GO 684
 706: POP
 707: POP
// end ; end_of_file
 708: LD_VAR 0 4
 712: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do var i ;
 713: LD_INT 22
 715: PUSH
 716: LD_INT 0
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: PUSH
 723: LD_INT 25
 725: PUSH
 726: LD_INT 15
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PPUSH
 737: CALL_OW 69
 741: IFFALSE 847
 743: GO 745
 745: DISABLE
 746: LD_INT 0
 748: PPUSH
// begin enable ;
 749: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do
 750: LD_ADDR_VAR 0 1
 754: PUSH
 755: LD_INT 22
 757: PUSH
 758: LD_INT 0
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: PUSH
 765: LD_INT 25
 767: PUSH
 768: LD_INT 15
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PPUSH
 779: CALL_OW 69
 783: PUSH
 784: FOR_IN
 785: IFFALSE 845
// if GetLives ( i ) < 1000 then
 787: LD_VAR 0 1
 791: PPUSH
 792: CALL_OW 256
 796: PUSH
 797: LD_INT 1000
 799: LESS
 800: IFFALSE 843
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , i ) ) ;
 802: LD_VAR 0 1
 806: PPUSH
 807: LD_INT 3
 809: PUSH
 810: LD_INT 22
 812: PUSH
 813: LD_INT 0
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PPUSH
 824: CALL_OW 69
 828: PPUSH
 829: LD_VAR 0 1
 833: PPUSH
 834: CALL_OW 74
 838: PPUSH
 839: CALL_OW 115
 843: GO 784
 845: POP
 846: POP
// end ;
 847: PPOPN 1
 849: END
// every 3 do var i , enemy , x , y , d ;
 850: GO 852
 852: DISABLE
 853: LD_INT 0
 855: PPUSH
 856: PPUSH
 857: PPUSH
 858: PPUSH
 859: PPUSH
// begin enable ;
 860: ENABLE
// for i := 2 to huntersAmount do
 861: LD_ADDR_VAR 0 1
 865: PUSH
 866: DOUBLE
 867: LD_INT 2
 869: DEC
 870: ST_TO_ADDR
 871: LD_EXP 3
 875: PUSH
 876: FOR_TO
 877: IFFALSE 1216
// begin if not HasTask ( hunters [ i ] ) then
 879: LD_EXP 6
 883: PUSH
 884: LD_VAR 0 1
 888: ARRAY
 889: PPUSH
 890: CALL_OW 314
 894: NOT
 895: IFFALSE 1214
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , hunters [ i ] ) ;
 897: LD_ADDR_VAR 0 2
 901: PUSH
 902: LD_INT 22
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PPUSH
 912: CALL_OW 69
 916: PPUSH
 917: LD_EXP 6
 921: PUSH
 922: LD_VAR 0 1
 926: ARRAY
 927: PPUSH
 928: CALL_OW 74
 932: ST_TO_ADDR
// if not enemy then
 933: LD_VAR 0 2
 937: NOT
 938: IFFALSE 942
// continue ;
 940: GO 876
// if GetDistUnits ( hunters [ i ] , enemy ) < 17 then
 942: LD_EXP 6
 946: PUSH
 947: LD_VAR 0 1
 951: ARRAY
 952: PPUSH
 953: LD_VAR 0 2
 957: PPUSH
 958: CALL_OW 296
 962: PUSH
 963: LD_INT 17
 965: LESS
 966: IFFALSE 1069
// begin if GetClass ( hunters [ i ] ) = class_desert_warior then
 968: LD_EXP 6
 972: PUSH
 973: LD_VAR 0 1
 977: ARRAY
 978: PPUSH
 979: CALL_OW 257
 983: PUSH
 984: LD_INT 11
 986: EQUAL
 987: IFFALSE 1047
// if GetClass ( enemy ) in [ class_frog , class_fish , class_baggie ] then
 989: LD_VAR 0 2
 993: PPUSH
 994: CALL_OW 257
 998: PUSH
 999: LD_INT 19
1001: PUSH
1002: LD_INT 20
1004: PUSH
1005: LD_INT 13
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: LIST
1012: IN
1013: IFFALSE 1032
// ComCarabine ( hunters [ i ] ) else
1015: LD_EXP 6
1019: PUSH
1020: LD_VAR 0 1
1024: ARRAY
1025: PPUSH
1026: CALL_OW 162
1030: GO 1047
// ComSabre ( hunters [ i ] ) ;
1032: LD_EXP 6
1036: PUSH
1037: LD_VAR 0 1
1041: ARRAY
1042: PPUSH
1043: CALL_OW 163
// ComAttackUnit ( hunters [ i ] , enemy ) ;
1047: LD_EXP 6
1051: PUSH
1052: LD_VAR 0 1
1056: ARRAY
1057: PPUSH
1058: LD_VAR 0 2
1062: PPUSH
1063: CALL_OW 115
// end else
1067: GO 1214
// begin d := rand ( 0 , 5 ) ;
1069: LD_ADDR_VAR 0 5
1073: PUSH
1074: LD_INT 0
1076: PPUSH
1077: LD_INT 5
1079: PPUSH
1080: CALL_OW 12
1084: ST_TO_ADDR
// x := ShiftX ( GetX ( hunters [ i ] ) , d , 8 ) ;
1085: LD_ADDR_VAR 0 3
1089: PUSH
1090: LD_EXP 6
1094: PUSH
1095: LD_VAR 0 1
1099: ARRAY
1100: PPUSH
1101: CALL_OW 250
1105: PPUSH
1106: LD_VAR 0 5
1110: PPUSH
1111: LD_INT 8
1113: PPUSH
1114: CALL_OW 272
1118: ST_TO_ADDR
// y := ShiftY ( GetY ( hunters [ i ] ) , d , 8 ) ;
1119: LD_ADDR_VAR 0 4
1123: PUSH
1124: LD_EXP 6
1128: PUSH
1129: LD_VAR 0 1
1133: ARRAY
1134: PPUSH
1135: CALL_OW 251
1139: PPUSH
1140: LD_VAR 0 5
1144: PPUSH
1145: LD_INT 8
1147: PPUSH
1148: CALL_OW 273
1152: ST_TO_ADDR
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
1153: LD_VAR 0 3
1157: PPUSH
1158: LD_VAR 0 4
1162: PPUSH
1163: CALL_OW 488
1167: PUSH
1168: LD_VAR 0 3
1172: PPUSH
1173: LD_VAR 0 4
1177: PPUSH
1178: CALL_OW 428
1182: PUSH
1183: LD_INT 0
1185: EQUAL
1186: AND
1187: IFFALSE 1214
// ComMoveXY ( hunters [ i ] , x , y ) ;
1189: LD_EXP 6
1193: PUSH
1194: LD_VAR 0 1
1198: ARRAY
1199: PPUSH
1200: LD_VAR 0 3
1204: PPUSH
1205: LD_VAR 0 4
1209: PPUSH
1210: CALL_OW 111
// end ; end ; end ;
1214: GO 876
1216: POP
1217: POP
// end ; end_of_file
1218: PPOPN 5
1220: END
// on UnitGoesToRed ( un ) do var i ;
1221: LD_INT 0
1223: PPUSH
// begin if GetSide ( un ) = 1 then
1224: LD_VAR 0 1
1228: PPUSH
1229: CALL_OW 255
1233: PUSH
1234: LD_INT 1
1236: EQUAL
1237: IFFALSE 1246
// YouLost ( hunt2 ) ;
1239: LD_STRING hunt2
1241: PPUSH
1242: CALL_OW 104
// if GetSide ( un ) > 1 then
1246: LD_VAR 0 1
1250: PPUSH
1251: CALL_OW 255
1255: PUSH
1256: LD_INT 1
1258: GREATER
1259: IFFALSE 1312
// begin for i := 1 to 6 do
1261: LD_ADDR_VAR 0 2
1265: PUSH
1266: DOUBLE
1267: LD_INT 1
1269: DEC
1270: ST_TO_ADDR
1271: LD_INT 6
1273: PUSH
1274: FOR_TO
1275: IFFALSE 1298
// begin wait ( 0 0$1 ) ;
1277: LD_INT 35
1279: PPUSH
1280: CALL_OW 67
// SetLives ( un , 249 ) ;
1284: LD_VAR 0 1
1288: PPUSH
1289: LD_INT 249
1291: PPUSH
1292: CALL_OW 234
// end ;
1296: GO 1274
1298: POP
1299: POP
// SetLives ( un , 1000 ) ;
1300: LD_VAR 0 1
1304: PPUSH
1305: LD_INT 1000
1307: PPUSH
1308: CALL_OW 234
// end ; end ;
1312: PPOPN 2
1314: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 > 1 then
1315: LD_VAR 0 1
1319: PUSH
1320: LD_INT 1
1322: EQUAL
1323: PUSH
1324: LD_VAR 0 2
1328: PUSH
1329: LD_INT 1
1331: GREATER
1332: AND
1333: IFFALSE 1342
// YouLost ( hunt1 ) ;
1335: LD_STRING hunt1
1337: PPUSH
1338: CALL_OW 104
// end ;
1342: PPOPN 2
1344: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var point ;
1345: LD_INT 0
1347: PPUSH
// begin point := 0 ;
1348: LD_ADDR_VAR 0 4
1352: PUSH
1353: LD_INT 0
1355: ST_TO_ADDR
// case GetClass ( un ) of class_fish :
1356: LD_VAR 0 1
1360: PPUSH
1361: CALL_OW 257
1365: PUSH
1366: LD_INT 20
1368: DOUBLE
1369: EQUAL
1370: IFTRUE 1374
1372: GO 1385
1374: POP
// point := 10 ; class_horse :
1375: LD_ADDR_VAR 0 4
1379: PUSH
1380: LD_INT 10
1382: ST_TO_ADDR
1383: GO 1519
1385: LD_INT 21
1387: DOUBLE
1388: EQUAL
1389: IFTRUE 1393
1391: GO 1404
1393: POP
// point := 10 ; class_baggie :
1394: LD_ADDR_VAR 0 4
1398: PUSH
1399: LD_INT 10
1401: ST_TO_ADDR
1402: GO 1519
1404: LD_INT 13
1406: DOUBLE
1407: EQUAL
1408: IFTRUE 1412
1410: GO 1423
1412: POP
// point := 5 ; class_phororhacos :
1413: LD_ADDR_VAR 0 4
1417: PUSH
1418: LD_INT 5
1420: ST_TO_ADDR
1421: GO 1519
1423: LD_INT 18
1425: DOUBLE
1426: EQUAL
1427: IFTRUE 1431
1429: GO 1442
1431: POP
// point := 10 ; class_tiger :
1432: LD_ADDR_VAR 0 4
1436: PUSH
1437: LD_INT 10
1439: ST_TO_ADDR
1440: GO 1519
1442: LD_INT 14
1444: DOUBLE
1445: EQUAL
1446: IFTRUE 1450
1448: GO 1461
1450: POP
// point := 20 ; class_apeman :
1451: LD_ADDR_VAR 0 4
1455: PUSH
1456: LD_INT 20
1458: ST_TO_ADDR
1459: GO 1519
1461: LD_INT 12
1463: DOUBLE
1464: EQUAL
1465: IFTRUE 1469
1467: GO 1480
1469: POP
// point := 30 ; class_apeman_soldier :
1470: LD_ADDR_VAR 0 4
1474: PUSH
1475: LD_INT 30
1477: ST_TO_ADDR
1478: GO 1519
1480: LD_INT 15
1482: DOUBLE
1483: EQUAL
1484: IFTRUE 1488
1486: GO 1499
1488: POP
// point := 50 ; class_frog :
1489: LD_ADDR_VAR 0 4
1493: PUSH
1494: LD_INT 50
1496: ST_TO_ADDR
1497: GO 1519
1499: LD_INT 19
1501: DOUBLE
1502: EQUAL
1503: IFTRUE 1507
1505: GO 1518
1507: POP
// point := 10 ; end ;
1508: LD_ADDR_VAR 0 4
1512: PUSH
1513: LD_INT 10
1515: ST_TO_ADDR
1516: GO 1519
1518: POP
// if point then
1519: LD_VAR 0 4
1523: IFFALSE 1562
// points := Replace ( points , killer_side , points [ killer_side ] + point ) ;
1525: LD_ADDR_EXP 5
1529: PUSH
1530: LD_EXP 5
1534: PPUSH
1535: LD_VAR 0 2
1539: PPUSH
1540: LD_EXP 5
1544: PUSH
1545: LD_VAR 0 2
1549: ARRAY
1550: PUSH
1551: LD_VAR 0 4
1555: PLUS
1556: PPUSH
1557: CALL_OW 1
1561: ST_TO_ADDR
// end ;
1562: PPOPN 4
1564: END
// every 0 0$20 trigger FilterAllUnits ( [ f_side , 0 ] ) < 10 do
1565: LD_INT 22
1567: PUSH
1568: LD_INT 0
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 69
1579: PUSH
1580: LD_INT 10
1582: LESS
1583: IFFALSE 1685
1585: GO 1587
1587: DISABLE
// begin enable ;
1588: ENABLE
// CreateNature ( natArea , watArea , [ rand ( 0 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 2 , 4 ) , rand ( 2 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) ] ) ;
1589: LD_INT 2
1591: PPUSH
1592: LD_INT 1
1594: PPUSH
1595: LD_INT 0
1597: PPUSH
1598: LD_INT 4
1600: PPUSH
1601: CALL_OW 12
1605: PUSH
1606: LD_INT 0
1608: PPUSH
1609: LD_INT 2
1611: PPUSH
1612: CALL_OW 12
1616: PUSH
1617: LD_INT 0
1619: PPUSH
1620: LD_INT 4
1622: PPUSH
1623: CALL_OW 12
1627: PUSH
1628: LD_INT 2
1630: PPUSH
1631: LD_INT 4
1633: PPUSH
1634: CALL_OW 12
1638: PUSH
1639: LD_INT 2
1641: PPUSH
1642: LD_INT 4
1644: PPUSH
1645: CALL_OW 12
1649: PUSH
1650: LD_INT 0
1652: PPUSH
1653: LD_INT 2
1655: PPUSH
1656: CALL_OW 12
1660: PUSH
1661: LD_INT 0
1663: PPUSH
1664: LD_INT 4
1666: PPUSH
1667: CALL_OW 12
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: PPUSH
1681: CALL 387 0 3
// end ;
1685: END
// every 0 0$1 do var i ;
1686: GO 1688
1688: DISABLE
1689: LD_INT 0
1691: PPUSH
// begin enable ;
1692: ENABLE
// display_strings := [ ] ;
1693: LD_ADDR_OWVAR 47
1697: PUSH
1698: EMPTY
1699: ST_TO_ADDR
// for i := 1 to huntersAmount do
1700: LD_ADDR_VAR 0 1
1704: PUSH
1705: DOUBLE
1706: LD_INT 1
1708: DEC
1709: ST_TO_ADDR
1710: LD_EXP 3
1714: PUSH
1715: FOR_TO
1716: IFFALSE 1850
// begin display_strings := display_strings ^ [ #player & i , i , points [ i ] ] ;
1718: LD_ADDR_OWVAR 47
1722: PUSH
1723: LD_OWVAR 47
1727: PUSH
1728: LD_STRING #player
1730: PUSH
1731: LD_VAR 0 1
1735: STR
1736: PUSH
1737: LD_VAR 0 1
1741: PUSH
1742: LD_EXP 5
1746: PUSH
1747: LD_VAR 0 1
1751: ARRAY
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: LIST
1757: ADD
1758: ST_TO_ADDR
// if points [ i ] >= [ 750 , 1250 , 2000 ] [ Difficulty ] then
1759: LD_EXP 5
1763: PUSH
1764: LD_VAR 0 1
1768: ARRAY
1769: PUSH
1770: LD_INT 750
1772: PUSH
1773: LD_INT 1250
1775: PUSH
1776: LD_INT 2000
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: LIST
1783: PUSH
1784: LD_OWVAR 67
1788: ARRAY
1789: GREATEREQUAL
1790: IFFALSE 1848
// begin if i = 1 then
1792: LD_VAR 0 1
1796: PUSH
1797: LD_INT 1
1799: EQUAL
1800: IFFALSE 1841
// begin DialogueOn ;
1802: CALL_OW 6
// SetAchievement ( ACH_HUNT ) ;
1806: LD_STRING ACH_HUNT
1808: PPUSH
1809: CALL_OW 543
// display_strings := [ #hunting-win ] ;
1813: LD_ADDR_OWVAR 47
1817: PUSH
1818: LD_STRING #hunting-win
1820: PUSH
1821: EMPTY
1822: LIST
1823: ST_TO_ADDR
// dwait ( 0 0$5 ) ;
1824: LD_INT 175
1826: PPUSH
1827: CALL_OW 68
// YouWin ;
1831: CALL_OW 103
// DialogueOff ;
1835: CALL_OW 7
// end else
1839: GO 1848
// YouLost ( hunt3 ) ;
1841: LD_STRING hunt3
1843: PPUSH
1844: CALL_OW 104
// end ; end ;
1848: GO 1715
1850: POP
1851: POP
// end ; end_of_file end_of_file
1852: PPOPN 1
1854: END
// every 0 0$1 do
1855: GO 1857
1857: DISABLE
// begin enable ;
1858: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1859: LD_STRING updateTimer(
1861: PUSH
1862: LD_OWVAR 1
1866: STR
1867: PUSH
1868: LD_STRING );
1870: STR
1871: PPUSH
1872: CALL_OW 559
// end ;
1876: END
// export function SOS_MapStart ( ) ; begin
1877: LD_INT 0
1879: PPUSH
// if streamModeActive then
1880: LD_EXP 7
1884: IFFALSE 1893
// DefineStreamItems ( true ) ;
1886: LD_INT 1
1888: PPUSH
1889: CALL 3547 0 1
// UpdateFactoryWaypoints ( ) ;
1893: CALL 16408 0 0
// UpdateWarehouseGatheringPoints ( ) ;
1897: CALL 16665 0 0
// end ;
1901: LD_VAR 0 1
1905: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
1906: LD_INT 0
1908: PPUSH
// if p2 = 100 then
1909: LD_VAR 0 2
1913: PUSH
1914: LD_INT 100
1916: EQUAL
1917: IFFALSE 2920
// begin if not StreamModeActive then
1919: LD_EXP 7
1923: NOT
1924: IFFALSE 1934
// StreamModeActive := true ;
1926: LD_ADDR_EXP 7
1930: PUSH
1931: LD_INT 1
1933: ST_TO_ADDR
// if p3 = 0 then
1934: LD_VAR 0 3
1938: PUSH
1939: LD_INT 0
1941: EQUAL
1942: IFFALSE 1948
// InitStreamMode ;
1944: CALL 3083 0 0
// if p3 = 1 then
1948: LD_VAR 0 3
1952: PUSH
1953: LD_INT 1
1955: EQUAL
1956: IFFALSE 1966
// sRocket := true ;
1958: LD_ADDR_EXP 12
1962: PUSH
1963: LD_INT 1
1965: ST_TO_ADDR
// if p3 = 2 then
1966: LD_VAR 0 3
1970: PUSH
1971: LD_INT 2
1973: EQUAL
1974: IFFALSE 1984
// sSpeed := true ;
1976: LD_ADDR_EXP 11
1980: PUSH
1981: LD_INT 1
1983: ST_TO_ADDR
// if p3 = 3 then
1984: LD_VAR 0 3
1988: PUSH
1989: LD_INT 3
1991: EQUAL
1992: IFFALSE 2002
// sEngine := true ;
1994: LD_ADDR_EXP 13
1998: PUSH
1999: LD_INT 1
2001: ST_TO_ADDR
// if p3 = 4 then
2002: LD_VAR 0 3
2006: PUSH
2007: LD_INT 4
2009: EQUAL
2010: IFFALSE 2020
// sSpec := true ;
2012: LD_ADDR_EXP 10
2016: PUSH
2017: LD_INT 1
2019: ST_TO_ADDR
// if p3 = 5 then
2020: LD_VAR 0 3
2024: PUSH
2025: LD_INT 5
2027: EQUAL
2028: IFFALSE 2038
// sLevel := true ;
2030: LD_ADDR_EXP 14
2034: PUSH
2035: LD_INT 1
2037: ST_TO_ADDR
// if p3 = 6 then
2038: LD_VAR 0 3
2042: PUSH
2043: LD_INT 6
2045: EQUAL
2046: IFFALSE 2056
// sArmoury := true ;
2048: LD_ADDR_EXP 15
2052: PUSH
2053: LD_INT 1
2055: ST_TO_ADDR
// if p3 = 7 then
2056: LD_VAR 0 3
2060: PUSH
2061: LD_INT 7
2063: EQUAL
2064: IFFALSE 2074
// sRadar := true ;
2066: LD_ADDR_EXP 16
2070: PUSH
2071: LD_INT 1
2073: ST_TO_ADDR
// if p3 = 8 then
2074: LD_VAR 0 3
2078: PUSH
2079: LD_INT 8
2081: EQUAL
2082: IFFALSE 2092
// sBunker := true ;
2084: LD_ADDR_EXP 17
2088: PUSH
2089: LD_INT 1
2091: ST_TO_ADDR
// if p3 = 9 then
2092: LD_VAR 0 3
2096: PUSH
2097: LD_INT 9
2099: EQUAL
2100: IFFALSE 2110
// sHack := true ;
2102: LD_ADDR_EXP 18
2106: PUSH
2107: LD_INT 1
2109: ST_TO_ADDR
// if p3 = 10 then
2110: LD_VAR 0 3
2114: PUSH
2115: LD_INT 10
2117: EQUAL
2118: IFFALSE 2128
// sFire := true ;
2120: LD_ADDR_EXP 19
2124: PUSH
2125: LD_INT 1
2127: ST_TO_ADDR
// if p3 = 11 then
2128: LD_VAR 0 3
2132: PUSH
2133: LD_INT 11
2135: EQUAL
2136: IFFALSE 2146
// sRefresh := true ;
2138: LD_ADDR_EXP 20
2142: PUSH
2143: LD_INT 1
2145: ST_TO_ADDR
// if p3 = 12 then
2146: LD_VAR 0 3
2150: PUSH
2151: LD_INT 12
2153: EQUAL
2154: IFFALSE 2164
// sExp := true ;
2156: LD_ADDR_EXP 21
2160: PUSH
2161: LD_INT 1
2163: ST_TO_ADDR
// if p3 = 13 then
2164: LD_VAR 0 3
2168: PUSH
2169: LD_INT 13
2171: EQUAL
2172: IFFALSE 2182
// sDepot := true ;
2174: LD_ADDR_EXP 22
2178: PUSH
2179: LD_INT 1
2181: ST_TO_ADDR
// if p3 = 14 then
2182: LD_VAR 0 3
2186: PUSH
2187: LD_INT 14
2189: EQUAL
2190: IFFALSE 2200
// sFlag := true ;
2192: LD_ADDR_EXP 23
2196: PUSH
2197: LD_INT 1
2199: ST_TO_ADDR
// if p3 = 15 then
2200: LD_VAR 0 3
2204: PUSH
2205: LD_INT 15
2207: EQUAL
2208: IFFALSE 2218
// sKamikadze := true ;
2210: LD_ADDR_EXP 31
2214: PUSH
2215: LD_INT 1
2217: ST_TO_ADDR
// if p3 = 16 then
2218: LD_VAR 0 3
2222: PUSH
2223: LD_INT 16
2225: EQUAL
2226: IFFALSE 2236
// sTroll := true ;
2228: LD_ADDR_EXP 32
2232: PUSH
2233: LD_INT 1
2235: ST_TO_ADDR
// if p3 = 17 then
2236: LD_VAR 0 3
2240: PUSH
2241: LD_INT 17
2243: EQUAL
2244: IFFALSE 2254
// sSlow := true ;
2246: LD_ADDR_EXP 33
2250: PUSH
2251: LD_INT 1
2253: ST_TO_ADDR
// if p3 = 18 then
2254: LD_VAR 0 3
2258: PUSH
2259: LD_INT 18
2261: EQUAL
2262: IFFALSE 2272
// sLack := true ;
2264: LD_ADDR_EXP 34
2268: PUSH
2269: LD_INT 1
2271: ST_TO_ADDR
// if p3 = 19 then
2272: LD_VAR 0 3
2276: PUSH
2277: LD_INT 19
2279: EQUAL
2280: IFFALSE 2290
// sTank := true ;
2282: LD_ADDR_EXP 36
2286: PUSH
2287: LD_INT 1
2289: ST_TO_ADDR
// if p3 = 20 then
2290: LD_VAR 0 3
2294: PUSH
2295: LD_INT 20
2297: EQUAL
2298: IFFALSE 2308
// sRemote := true ;
2300: LD_ADDR_EXP 37
2304: PUSH
2305: LD_INT 1
2307: ST_TO_ADDR
// if p3 = 21 then
2308: LD_VAR 0 3
2312: PUSH
2313: LD_INT 21
2315: EQUAL
2316: IFFALSE 2326
// sPowell := true ;
2318: LD_ADDR_EXP 38
2322: PUSH
2323: LD_INT 1
2325: ST_TO_ADDR
// if p3 = 22 then
2326: LD_VAR 0 3
2330: PUSH
2331: LD_INT 22
2333: EQUAL
2334: IFFALSE 2344
// sTeleport := true ;
2336: LD_ADDR_EXP 41
2340: PUSH
2341: LD_INT 1
2343: ST_TO_ADDR
// if p3 = 23 then
2344: LD_VAR 0 3
2348: PUSH
2349: LD_INT 23
2351: EQUAL
2352: IFFALSE 2362
// sOilTower := true ;
2354: LD_ADDR_EXP 43
2358: PUSH
2359: LD_INT 1
2361: ST_TO_ADDR
// if p3 = 24 then
2362: LD_VAR 0 3
2366: PUSH
2367: LD_INT 24
2369: EQUAL
2370: IFFALSE 2380
// sShovel := true ;
2372: LD_ADDR_EXP 44
2376: PUSH
2377: LD_INT 1
2379: ST_TO_ADDR
// if p3 = 25 then
2380: LD_VAR 0 3
2384: PUSH
2385: LD_INT 25
2387: EQUAL
2388: IFFALSE 2398
// sSheik := true ;
2390: LD_ADDR_EXP 45
2394: PUSH
2395: LD_INT 1
2397: ST_TO_ADDR
// if p3 = 26 then
2398: LD_VAR 0 3
2402: PUSH
2403: LD_INT 26
2405: EQUAL
2406: IFFALSE 2416
// sEarthquake := true ;
2408: LD_ADDR_EXP 47
2412: PUSH
2413: LD_INT 1
2415: ST_TO_ADDR
// if p3 = 27 then
2416: LD_VAR 0 3
2420: PUSH
2421: LD_INT 27
2423: EQUAL
2424: IFFALSE 2434
// sAI := true ;
2426: LD_ADDR_EXP 48
2430: PUSH
2431: LD_INT 1
2433: ST_TO_ADDR
// if p3 = 28 then
2434: LD_VAR 0 3
2438: PUSH
2439: LD_INT 28
2441: EQUAL
2442: IFFALSE 2452
// sCargo := true ;
2444: LD_ADDR_EXP 51
2448: PUSH
2449: LD_INT 1
2451: ST_TO_ADDR
// if p3 = 29 then
2452: LD_VAR 0 3
2456: PUSH
2457: LD_INT 29
2459: EQUAL
2460: IFFALSE 2470
// sDLaser := true ;
2462: LD_ADDR_EXP 52
2466: PUSH
2467: LD_INT 1
2469: ST_TO_ADDR
// if p3 = 30 then
2470: LD_VAR 0 3
2474: PUSH
2475: LD_INT 30
2477: EQUAL
2478: IFFALSE 2488
// sExchange := true ;
2480: LD_ADDR_EXP 53
2484: PUSH
2485: LD_INT 1
2487: ST_TO_ADDR
// if p3 = 31 then
2488: LD_VAR 0 3
2492: PUSH
2493: LD_INT 31
2495: EQUAL
2496: IFFALSE 2506
// sFac := true ;
2498: LD_ADDR_EXP 54
2502: PUSH
2503: LD_INT 1
2505: ST_TO_ADDR
// if p3 = 32 then
2506: LD_VAR 0 3
2510: PUSH
2511: LD_INT 32
2513: EQUAL
2514: IFFALSE 2524
// sPower := true ;
2516: LD_ADDR_EXP 55
2520: PUSH
2521: LD_INT 1
2523: ST_TO_ADDR
// if p3 = 33 then
2524: LD_VAR 0 3
2528: PUSH
2529: LD_INT 33
2531: EQUAL
2532: IFFALSE 2542
// sRandom := true ;
2534: LD_ADDR_EXP 56
2538: PUSH
2539: LD_INT 1
2541: ST_TO_ADDR
// if p3 = 34 then
2542: LD_VAR 0 3
2546: PUSH
2547: LD_INT 34
2549: EQUAL
2550: IFFALSE 2560
// sShield := true ;
2552: LD_ADDR_EXP 57
2556: PUSH
2557: LD_INT 1
2559: ST_TO_ADDR
// if p3 = 35 then
2560: LD_VAR 0 3
2564: PUSH
2565: LD_INT 35
2567: EQUAL
2568: IFFALSE 2578
// sTime := true ;
2570: LD_ADDR_EXP 58
2574: PUSH
2575: LD_INT 1
2577: ST_TO_ADDR
// if p3 = 36 then
2578: LD_VAR 0 3
2582: PUSH
2583: LD_INT 36
2585: EQUAL
2586: IFFALSE 2596
// sTools := true ;
2588: LD_ADDR_EXP 59
2592: PUSH
2593: LD_INT 1
2595: ST_TO_ADDR
// if p3 = 101 then
2596: LD_VAR 0 3
2600: PUSH
2601: LD_INT 101
2603: EQUAL
2604: IFFALSE 2614
// sSold := true ;
2606: LD_ADDR_EXP 24
2610: PUSH
2611: LD_INT 1
2613: ST_TO_ADDR
// if p3 = 102 then
2614: LD_VAR 0 3
2618: PUSH
2619: LD_INT 102
2621: EQUAL
2622: IFFALSE 2632
// sDiff := true ;
2624: LD_ADDR_EXP 25
2628: PUSH
2629: LD_INT 1
2631: ST_TO_ADDR
// if p3 = 103 then
2632: LD_VAR 0 3
2636: PUSH
2637: LD_INT 103
2639: EQUAL
2640: IFFALSE 2650
// sFog := true ;
2642: LD_ADDR_EXP 28
2646: PUSH
2647: LD_INT 1
2649: ST_TO_ADDR
// if p3 = 104 then
2650: LD_VAR 0 3
2654: PUSH
2655: LD_INT 104
2657: EQUAL
2658: IFFALSE 2668
// sReset := true ;
2660: LD_ADDR_EXP 29
2664: PUSH
2665: LD_INT 1
2667: ST_TO_ADDR
// if p3 = 105 then
2668: LD_VAR 0 3
2672: PUSH
2673: LD_INT 105
2675: EQUAL
2676: IFFALSE 2686
// sSun := true ;
2678: LD_ADDR_EXP 30
2682: PUSH
2683: LD_INT 1
2685: ST_TO_ADDR
// if p3 = 106 then
2686: LD_VAR 0 3
2690: PUSH
2691: LD_INT 106
2693: EQUAL
2694: IFFALSE 2704
// sTiger := true ;
2696: LD_ADDR_EXP 26
2700: PUSH
2701: LD_INT 1
2703: ST_TO_ADDR
// if p3 = 107 then
2704: LD_VAR 0 3
2708: PUSH
2709: LD_INT 107
2711: EQUAL
2712: IFFALSE 2722
// sBomb := true ;
2714: LD_ADDR_EXP 27
2718: PUSH
2719: LD_INT 1
2721: ST_TO_ADDR
// if p3 = 108 then
2722: LD_VAR 0 3
2726: PUSH
2727: LD_INT 108
2729: EQUAL
2730: IFFALSE 2740
// sWound := true ;
2732: LD_ADDR_EXP 35
2736: PUSH
2737: LD_INT 1
2739: ST_TO_ADDR
// if p3 = 109 then
2740: LD_VAR 0 3
2744: PUSH
2745: LD_INT 109
2747: EQUAL
2748: IFFALSE 2758
// sBetray := true ;
2750: LD_ADDR_EXP 39
2754: PUSH
2755: LD_INT 1
2757: ST_TO_ADDR
// if p3 = 110 then
2758: LD_VAR 0 3
2762: PUSH
2763: LD_INT 110
2765: EQUAL
2766: IFFALSE 2776
// sContamin := true ;
2768: LD_ADDR_EXP 40
2772: PUSH
2773: LD_INT 1
2775: ST_TO_ADDR
// if p3 = 111 then
2776: LD_VAR 0 3
2780: PUSH
2781: LD_INT 111
2783: EQUAL
2784: IFFALSE 2794
// sOil := true ;
2786: LD_ADDR_EXP 42
2790: PUSH
2791: LD_INT 1
2793: ST_TO_ADDR
// if p3 = 112 then
2794: LD_VAR 0 3
2798: PUSH
2799: LD_INT 112
2801: EQUAL
2802: IFFALSE 2812
// sStu := true ;
2804: LD_ADDR_EXP 46
2808: PUSH
2809: LD_INT 1
2811: ST_TO_ADDR
// if p3 = 113 then
2812: LD_VAR 0 3
2816: PUSH
2817: LD_INT 113
2819: EQUAL
2820: IFFALSE 2830
// sBazooka := true ;
2822: LD_ADDR_EXP 49
2826: PUSH
2827: LD_INT 1
2829: ST_TO_ADDR
// if p3 = 114 then
2830: LD_VAR 0 3
2834: PUSH
2835: LD_INT 114
2837: EQUAL
2838: IFFALSE 2848
// sMortar := true ;
2840: LD_ADDR_EXP 50
2844: PUSH
2845: LD_INT 1
2847: ST_TO_ADDR
// if p3 = 115 then
2848: LD_VAR 0 3
2852: PUSH
2853: LD_INT 115
2855: EQUAL
2856: IFFALSE 2866
// sRanger := true ;
2858: LD_ADDR_EXP 60
2862: PUSH
2863: LD_INT 1
2865: ST_TO_ADDR
// if p3 = 116 then
2866: LD_VAR 0 3
2870: PUSH
2871: LD_INT 116
2873: EQUAL
2874: IFFALSE 2884
// sComputer := true ;
2876: LD_ADDR_EXP 61
2880: PUSH
2881: LD_INT 1
2883: ST_TO_ADDR
// if p3 = 117 then
2884: LD_VAR 0 3
2888: PUSH
2889: LD_INT 117
2891: EQUAL
2892: IFFALSE 2902
// s30 := true ;
2894: LD_ADDR_EXP 62
2898: PUSH
2899: LD_INT 1
2901: ST_TO_ADDR
// if p3 = 118 then
2902: LD_VAR 0 3
2906: PUSH
2907: LD_INT 118
2909: EQUAL
2910: IFFALSE 2920
// s60 := true ;
2912: LD_ADDR_EXP 63
2916: PUSH
2917: LD_INT 1
2919: ST_TO_ADDR
// end ; if p2 = 101 then
2920: LD_VAR 0 2
2924: PUSH
2925: LD_INT 101
2927: EQUAL
2928: IFFALSE 3056
// begin case p3 of 1 :
2930: LD_VAR 0 3
2934: PUSH
2935: LD_INT 1
2937: DOUBLE
2938: EQUAL
2939: IFTRUE 2943
2941: GO 2950
2943: POP
// hHackUnlimitedResources ; 2 :
2944: CALL 15154 0 0
2948: GO 3056
2950: LD_INT 2
2952: DOUBLE
2953: EQUAL
2954: IFTRUE 2958
2956: GO 2965
2958: POP
// hHackSetLevel10 ; 3 :
2959: CALL 15287 0 0
2963: GO 3056
2965: LD_INT 3
2967: DOUBLE
2968: EQUAL
2969: IFTRUE 2973
2971: GO 2980
2973: POP
// hHackSetLevel10YourUnits ; 4 :
2974: CALL 15372 0 0
2978: GO 3056
2980: LD_INT 4
2982: DOUBLE
2983: EQUAL
2984: IFTRUE 2988
2986: GO 2995
2988: POP
// hHackInvincible ; 5 :
2989: CALL 15820 0 0
2993: GO 3056
2995: LD_INT 5
2997: DOUBLE
2998: EQUAL
2999: IFTRUE 3003
3001: GO 3010
3003: POP
// hHackInvisible ; 6 :
3004: CALL 15931 0 0
3008: GO 3056
3010: LD_INT 6
3012: DOUBLE
3013: EQUAL
3014: IFTRUE 3018
3016: GO 3025
3018: POP
// hHackChangeYourSide ; 7 :
3019: CALL 15988 0 0
3023: GO 3056
3025: LD_INT 7
3027: DOUBLE
3028: EQUAL
3029: IFTRUE 3033
3031: GO 3040
3033: POP
// hHackChangeUnitSide ; 8 :
3034: CALL 16030 0 0
3038: GO 3056
3040: LD_INT 8
3042: DOUBLE
3043: EQUAL
3044: IFTRUE 3048
3046: GO 3055
3048: POP
// hHackFog ; end ;
3049: CALL 16131 0 0
3053: GO 3056
3055: POP
// end ; end ;
3056: LD_VAR 0 7
3060: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
3061: GO 3063
3063: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
3064: LD_STRING initStreamRollete();
3066: PPUSH
3067: CALL_OW 559
// InitStreamMode ;
3071: CALL 3083 0 0
// DefineStreamItems ( false ) ;
3075: LD_INT 0
3077: PPUSH
3078: CALL 3547 0 1
// end ;
3082: END
// function InitStreamMode ; begin
3083: LD_INT 0
3085: PPUSH
// streamModeActive := false ;
3086: LD_ADDR_EXP 7
3090: PUSH
3091: LD_INT 0
3093: ST_TO_ADDR
// normalCounter := 36 ;
3094: LD_ADDR_EXP 8
3098: PUSH
3099: LD_INT 36
3101: ST_TO_ADDR
// hardcoreCounter := 18 ;
3102: LD_ADDR_EXP 9
3106: PUSH
3107: LD_INT 18
3109: ST_TO_ADDR
// sRocket := false ;
3110: LD_ADDR_EXP 12
3114: PUSH
3115: LD_INT 0
3117: ST_TO_ADDR
// sSpeed := false ;
3118: LD_ADDR_EXP 11
3122: PUSH
3123: LD_INT 0
3125: ST_TO_ADDR
// sEngine := false ;
3126: LD_ADDR_EXP 13
3130: PUSH
3131: LD_INT 0
3133: ST_TO_ADDR
// sSpec := false ;
3134: LD_ADDR_EXP 10
3138: PUSH
3139: LD_INT 0
3141: ST_TO_ADDR
// sLevel := false ;
3142: LD_ADDR_EXP 14
3146: PUSH
3147: LD_INT 0
3149: ST_TO_ADDR
// sArmoury := false ;
3150: LD_ADDR_EXP 15
3154: PUSH
3155: LD_INT 0
3157: ST_TO_ADDR
// sRadar := false ;
3158: LD_ADDR_EXP 16
3162: PUSH
3163: LD_INT 0
3165: ST_TO_ADDR
// sBunker := false ;
3166: LD_ADDR_EXP 17
3170: PUSH
3171: LD_INT 0
3173: ST_TO_ADDR
// sHack := false ;
3174: LD_ADDR_EXP 18
3178: PUSH
3179: LD_INT 0
3181: ST_TO_ADDR
// sFire := false ;
3182: LD_ADDR_EXP 19
3186: PUSH
3187: LD_INT 0
3189: ST_TO_ADDR
// sRefresh := false ;
3190: LD_ADDR_EXP 20
3194: PUSH
3195: LD_INT 0
3197: ST_TO_ADDR
// sExp := false ;
3198: LD_ADDR_EXP 21
3202: PUSH
3203: LD_INT 0
3205: ST_TO_ADDR
// sDepot := false ;
3206: LD_ADDR_EXP 22
3210: PUSH
3211: LD_INT 0
3213: ST_TO_ADDR
// sFlag := false ;
3214: LD_ADDR_EXP 23
3218: PUSH
3219: LD_INT 0
3221: ST_TO_ADDR
// sKamikadze := false ;
3222: LD_ADDR_EXP 31
3226: PUSH
3227: LD_INT 0
3229: ST_TO_ADDR
// sTroll := false ;
3230: LD_ADDR_EXP 32
3234: PUSH
3235: LD_INT 0
3237: ST_TO_ADDR
// sSlow := false ;
3238: LD_ADDR_EXP 33
3242: PUSH
3243: LD_INT 0
3245: ST_TO_ADDR
// sLack := false ;
3246: LD_ADDR_EXP 34
3250: PUSH
3251: LD_INT 0
3253: ST_TO_ADDR
// sTank := false ;
3254: LD_ADDR_EXP 36
3258: PUSH
3259: LD_INT 0
3261: ST_TO_ADDR
// sRemote := false ;
3262: LD_ADDR_EXP 37
3266: PUSH
3267: LD_INT 0
3269: ST_TO_ADDR
// sPowell := false ;
3270: LD_ADDR_EXP 38
3274: PUSH
3275: LD_INT 0
3277: ST_TO_ADDR
// sTeleport := false ;
3278: LD_ADDR_EXP 41
3282: PUSH
3283: LD_INT 0
3285: ST_TO_ADDR
// sOilTower := false ;
3286: LD_ADDR_EXP 43
3290: PUSH
3291: LD_INT 0
3293: ST_TO_ADDR
// sShovel := false ;
3294: LD_ADDR_EXP 44
3298: PUSH
3299: LD_INT 0
3301: ST_TO_ADDR
// sSheik := false ;
3302: LD_ADDR_EXP 45
3306: PUSH
3307: LD_INT 0
3309: ST_TO_ADDR
// sEarthquake := false ;
3310: LD_ADDR_EXP 47
3314: PUSH
3315: LD_INT 0
3317: ST_TO_ADDR
// sAI := false ;
3318: LD_ADDR_EXP 48
3322: PUSH
3323: LD_INT 0
3325: ST_TO_ADDR
// sCargo := false ;
3326: LD_ADDR_EXP 51
3330: PUSH
3331: LD_INT 0
3333: ST_TO_ADDR
// sDLaser := false ;
3334: LD_ADDR_EXP 52
3338: PUSH
3339: LD_INT 0
3341: ST_TO_ADDR
// sExchange := false ;
3342: LD_ADDR_EXP 53
3346: PUSH
3347: LD_INT 0
3349: ST_TO_ADDR
// sFac := false ;
3350: LD_ADDR_EXP 54
3354: PUSH
3355: LD_INT 0
3357: ST_TO_ADDR
// sPower := false ;
3358: LD_ADDR_EXP 55
3362: PUSH
3363: LD_INT 0
3365: ST_TO_ADDR
// sRandom := false ;
3366: LD_ADDR_EXP 56
3370: PUSH
3371: LD_INT 0
3373: ST_TO_ADDR
// sShield := false ;
3374: LD_ADDR_EXP 57
3378: PUSH
3379: LD_INT 0
3381: ST_TO_ADDR
// sTime := false ;
3382: LD_ADDR_EXP 58
3386: PUSH
3387: LD_INT 0
3389: ST_TO_ADDR
// sTools := false ;
3390: LD_ADDR_EXP 59
3394: PUSH
3395: LD_INT 0
3397: ST_TO_ADDR
// sSold := false ;
3398: LD_ADDR_EXP 24
3402: PUSH
3403: LD_INT 0
3405: ST_TO_ADDR
// sDiff := false ;
3406: LD_ADDR_EXP 25
3410: PUSH
3411: LD_INT 0
3413: ST_TO_ADDR
// sFog := false ;
3414: LD_ADDR_EXP 28
3418: PUSH
3419: LD_INT 0
3421: ST_TO_ADDR
// sReset := false ;
3422: LD_ADDR_EXP 29
3426: PUSH
3427: LD_INT 0
3429: ST_TO_ADDR
// sSun := false ;
3430: LD_ADDR_EXP 30
3434: PUSH
3435: LD_INT 0
3437: ST_TO_ADDR
// sTiger := false ;
3438: LD_ADDR_EXP 26
3442: PUSH
3443: LD_INT 0
3445: ST_TO_ADDR
// sBomb := false ;
3446: LD_ADDR_EXP 27
3450: PUSH
3451: LD_INT 0
3453: ST_TO_ADDR
// sWound := false ;
3454: LD_ADDR_EXP 35
3458: PUSH
3459: LD_INT 0
3461: ST_TO_ADDR
// sBetray := false ;
3462: LD_ADDR_EXP 39
3466: PUSH
3467: LD_INT 0
3469: ST_TO_ADDR
// sContamin := false ;
3470: LD_ADDR_EXP 40
3474: PUSH
3475: LD_INT 0
3477: ST_TO_ADDR
// sOil := false ;
3478: LD_ADDR_EXP 42
3482: PUSH
3483: LD_INT 0
3485: ST_TO_ADDR
// sStu := false ;
3486: LD_ADDR_EXP 46
3490: PUSH
3491: LD_INT 0
3493: ST_TO_ADDR
// sBazooka := false ;
3494: LD_ADDR_EXP 49
3498: PUSH
3499: LD_INT 0
3501: ST_TO_ADDR
// sMortar := false ;
3502: LD_ADDR_EXP 50
3506: PUSH
3507: LD_INT 0
3509: ST_TO_ADDR
// sRanger := false ;
3510: LD_ADDR_EXP 60
3514: PUSH
3515: LD_INT 0
3517: ST_TO_ADDR
// sComputer := false ;
3518: LD_ADDR_EXP 61
3522: PUSH
3523: LD_INT 0
3525: ST_TO_ADDR
// s30 := false ;
3526: LD_ADDR_EXP 62
3530: PUSH
3531: LD_INT 0
3533: ST_TO_ADDR
// s60 := false ;
3534: LD_ADDR_EXP 63
3538: PUSH
3539: LD_INT 0
3541: ST_TO_ADDR
// end ;
3542: LD_VAR 0 1
3546: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3547: LD_INT 0
3549: PPUSH
3550: PPUSH
3551: PPUSH
3552: PPUSH
3553: PPUSH
3554: PPUSH
3555: PPUSH
// result := [ ] ;
3556: LD_ADDR_VAR 0 2
3560: PUSH
3561: EMPTY
3562: ST_TO_ADDR
// if campaign_id = 1 then
3563: LD_OWVAR 69
3567: PUSH
3568: LD_INT 1
3570: EQUAL
3571: IFFALSE 6737
// begin case mission_number of 1 :
3573: LD_OWVAR 70
3577: PUSH
3578: LD_INT 1
3580: DOUBLE
3581: EQUAL
3582: IFTRUE 3586
3584: GO 3662
3586: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3587: LD_ADDR_VAR 0 2
3591: PUSH
3592: LD_INT 2
3594: PUSH
3595: LD_INT 4
3597: PUSH
3598: LD_INT 11
3600: PUSH
3601: LD_INT 12
3603: PUSH
3604: LD_INT 15
3606: PUSH
3607: LD_INT 16
3609: PUSH
3610: LD_INT 22
3612: PUSH
3613: LD_INT 23
3615: PUSH
3616: LD_INT 26
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: PUSH
3630: LD_INT 101
3632: PUSH
3633: LD_INT 102
3635: PUSH
3636: LD_INT 106
3638: PUSH
3639: LD_INT 116
3641: PUSH
3642: LD_INT 117
3644: PUSH
3645: LD_INT 118
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: LIST
3652: LIST
3653: LIST
3654: LIST
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: ST_TO_ADDR
3660: GO 6735
3662: LD_INT 2
3664: DOUBLE
3665: EQUAL
3666: IFTRUE 3670
3668: GO 3754
3670: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3671: LD_ADDR_VAR 0 2
3675: PUSH
3676: LD_INT 2
3678: PUSH
3679: LD_INT 4
3681: PUSH
3682: LD_INT 11
3684: PUSH
3685: LD_INT 12
3687: PUSH
3688: LD_INT 15
3690: PUSH
3691: LD_INT 16
3693: PUSH
3694: LD_INT 22
3696: PUSH
3697: LD_INT 23
3699: PUSH
3700: LD_INT 26
3702: PUSH
3703: EMPTY
3704: LIST
3705: LIST
3706: LIST
3707: LIST
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: LIST
3713: PUSH
3714: LD_INT 101
3716: PUSH
3717: LD_INT 102
3719: PUSH
3720: LD_INT 105
3722: PUSH
3723: LD_INT 106
3725: PUSH
3726: LD_INT 108
3728: PUSH
3729: LD_INT 116
3731: PUSH
3732: LD_INT 117
3734: PUSH
3735: LD_INT 118
3737: PUSH
3738: EMPTY
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: PUSH
3748: EMPTY
3749: LIST
3750: LIST
3751: ST_TO_ADDR
3752: GO 6735
3754: LD_INT 3
3756: DOUBLE
3757: EQUAL
3758: IFTRUE 3762
3760: GO 3850
3762: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3763: LD_ADDR_VAR 0 2
3767: PUSH
3768: LD_INT 2
3770: PUSH
3771: LD_INT 4
3773: PUSH
3774: LD_INT 5
3776: PUSH
3777: LD_INT 11
3779: PUSH
3780: LD_INT 12
3782: PUSH
3783: LD_INT 15
3785: PUSH
3786: LD_INT 16
3788: PUSH
3789: LD_INT 22
3791: PUSH
3792: LD_INT 26
3794: PUSH
3795: LD_INT 36
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: LIST
3809: PUSH
3810: LD_INT 101
3812: PUSH
3813: LD_INT 102
3815: PUSH
3816: LD_INT 105
3818: PUSH
3819: LD_INT 106
3821: PUSH
3822: LD_INT 108
3824: PUSH
3825: LD_INT 116
3827: PUSH
3828: LD_INT 117
3830: PUSH
3831: LD_INT 118
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: PUSH
3844: EMPTY
3845: LIST
3846: LIST
3847: ST_TO_ADDR
3848: GO 6735
3850: LD_INT 4
3852: DOUBLE
3853: EQUAL
3854: IFTRUE 3858
3856: GO 3954
3858: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
3859: LD_ADDR_VAR 0 2
3863: PUSH
3864: LD_INT 2
3866: PUSH
3867: LD_INT 4
3869: PUSH
3870: LD_INT 5
3872: PUSH
3873: LD_INT 8
3875: PUSH
3876: LD_INT 11
3878: PUSH
3879: LD_INT 12
3881: PUSH
3882: LD_INT 15
3884: PUSH
3885: LD_INT 16
3887: PUSH
3888: LD_INT 22
3890: PUSH
3891: LD_INT 23
3893: PUSH
3894: LD_INT 26
3896: PUSH
3897: LD_INT 36
3899: PUSH
3900: EMPTY
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: LIST
3912: LIST
3913: PUSH
3914: LD_INT 101
3916: PUSH
3917: LD_INT 102
3919: PUSH
3920: LD_INT 105
3922: PUSH
3923: LD_INT 106
3925: PUSH
3926: LD_INT 108
3928: PUSH
3929: LD_INT 116
3931: PUSH
3932: LD_INT 117
3934: PUSH
3935: LD_INT 118
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: PUSH
3948: EMPTY
3949: LIST
3950: LIST
3951: ST_TO_ADDR
3952: GO 6735
3954: LD_INT 5
3956: DOUBLE
3957: EQUAL
3958: IFTRUE 3962
3960: GO 4074
3962: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
3963: LD_ADDR_VAR 0 2
3967: PUSH
3968: LD_INT 2
3970: PUSH
3971: LD_INT 4
3973: PUSH
3974: LD_INT 5
3976: PUSH
3977: LD_INT 6
3979: PUSH
3980: LD_INT 8
3982: PUSH
3983: LD_INT 11
3985: PUSH
3986: LD_INT 12
3988: PUSH
3989: LD_INT 15
3991: PUSH
3992: LD_INT 16
3994: PUSH
3995: LD_INT 22
3997: PUSH
3998: LD_INT 23
4000: PUSH
4001: LD_INT 25
4003: PUSH
4004: LD_INT 26
4006: PUSH
4007: LD_INT 36
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: LIST
4025: PUSH
4026: LD_INT 101
4028: PUSH
4029: LD_INT 102
4031: PUSH
4032: LD_INT 105
4034: PUSH
4035: LD_INT 106
4037: PUSH
4038: LD_INT 108
4040: PUSH
4041: LD_INT 109
4043: PUSH
4044: LD_INT 112
4046: PUSH
4047: LD_INT 116
4049: PUSH
4050: LD_INT 117
4052: PUSH
4053: LD_INT 118
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: LIST
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: ST_TO_ADDR
4072: GO 6735
4074: LD_INT 6
4076: DOUBLE
4077: EQUAL
4078: IFTRUE 4082
4080: GO 4214
4082: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
4083: LD_ADDR_VAR 0 2
4087: PUSH
4088: LD_INT 2
4090: PUSH
4091: LD_INT 4
4093: PUSH
4094: LD_INT 5
4096: PUSH
4097: LD_INT 6
4099: PUSH
4100: LD_INT 8
4102: PUSH
4103: LD_INT 11
4105: PUSH
4106: LD_INT 12
4108: PUSH
4109: LD_INT 15
4111: PUSH
4112: LD_INT 16
4114: PUSH
4115: LD_INT 20
4117: PUSH
4118: LD_INT 21
4120: PUSH
4121: LD_INT 22
4123: PUSH
4124: LD_INT 23
4126: PUSH
4127: LD_INT 25
4129: PUSH
4130: LD_INT 26
4132: PUSH
4133: LD_INT 30
4135: PUSH
4136: LD_INT 31
4138: PUSH
4139: LD_INT 32
4141: PUSH
4142: LD_INT 36
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: PUSH
4166: LD_INT 101
4168: PUSH
4169: LD_INT 102
4171: PUSH
4172: LD_INT 105
4174: PUSH
4175: LD_INT 106
4177: PUSH
4178: LD_INT 108
4180: PUSH
4181: LD_INT 109
4183: PUSH
4184: LD_INT 112
4186: PUSH
4187: LD_INT 116
4189: PUSH
4190: LD_INT 117
4192: PUSH
4193: LD_INT 118
4195: PUSH
4196: EMPTY
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: ST_TO_ADDR
4212: GO 6735
4214: LD_INT 7
4216: DOUBLE
4217: EQUAL
4218: IFTRUE 4222
4220: GO 4334
4222: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
4223: LD_ADDR_VAR 0 2
4227: PUSH
4228: LD_INT 2
4230: PUSH
4231: LD_INT 4
4233: PUSH
4234: LD_INT 5
4236: PUSH
4237: LD_INT 7
4239: PUSH
4240: LD_INT 11
4242: PUSH
4243: LD_INT 12
4245: PUSH
4246: LD_INT 15
4248: PUSH
4249: LD_INT 16
4251: PUSH
4252: LD_INT 20
4254: PUSH
4255: LD_INT 21
4257: PUSH
4258: LD_INT 22
4260: PUSH
4261: LD_INT 23
4263: PUSH
4264: LD_INT 25
4266: PUSH
4267: LD_INT 26
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: LIST
4284: LIST
4285: PUSH
4286: LD_INT 101
4288: PUSH
4289: LD_INT 102
4291: PUSH
4292: LD_INT 103
4294: PUSH
4295: LD_INT 105
4297: PUSH
4298: LD_INT 106
4300: PUSH
4301: LD_INT 108
4303: PUSH
4304: LD_INT 112
4306: PUSH
4307: LD_INT 116
4309: PUSH
4310: LD_INT 117
4312: PUSH
4313: LD_INT 118
4315: PUSH
4316: EMPTY
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: ST_TO_ADDR
4332: GO 6735
4334: LD_INT 8
4336: DOUBLE
4337: EQUAL
4338: IFTRUE 4342
4340: GO 4482
4342: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4343: LD_ADDR_VAR 0 2
4347: PUSH
4348: LD_INT 2
4350: PUSH
4351: LD_INT 4
4353: PUSH
4354: LD_INT 5
4356: PUSH
4357: LD_INT 6
4359: PUSH
4360: LD_INT 7
4362: PUSH
4363: LD_INT 8
4365: PUSH
4366: LD_INT 11
4368: PUSH
4369: LD_INT 12
4371: PUSH
4372: LD_INT 15
4374: PUSH
4375: LD_INT 16
4377: PUSH
4378: LD_INT 20
4380: PUSH
4381: LD_INT 21
4383: PUSH
4384: LD_INT 22
4386: PUSH
4387: LD_INT 23
4389: PUSH
4390: LD_INT 25
4392: PUSH
4393: LD_INT 26
4395: PUSH
4396: LD_INT 30
4398: PUSH
4399: LD_INT 31
4401: PUSH
4402: LD_INT 32
4404: PUSH
4405: LD_INT 36
4407: PUSH
4408: EMPTY
4409: LIST
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: LIST
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: LIST
4429: PUSH
4430: LD_INT 101
4432: PUSH
4433: LD_INT 102
4435: PUSH
4436: LD_INT 103
4438: PUSH
4439: LD_INT 105
4441: PUSH
4442: LD_INT 106
4444: PUSH
4445: LD_INT 108
4447: PUSH
4448: LD_INT 109
4450: PUSH
4451: LD_INT 112
4453: PUSH
4454: LD_INT 116
4456: PUSH
4457: LD_INT 117
4459: PUSH
4460: LD_INT 118
4462: PUSH
4463: EMPTY
4464: LIST
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: ST_TO_ADDR
4480: GO 6735
4482: LD_INT 9
4484: DOUBLE
4485: EQUAL
4486: IFTRUE 4490
4488: GO 4638
4490: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4491: LD_ADDR_VAR 0 2
4495: PUSH
4496: LD_INT 2
4498: PUSH
4499: LD_INT 4
4501: PUSH
4502: LD_INT 5
4504: PUSH
4505: LD_INT 6
4507: PUSH
4508: LD_INT 7
4510: PUSH
4511: LD_INT 8
4513: PUSH
4514: LD_INT 11
4516: PUSH
4517: LD_INT 12
4519: PUSH
4520: LD_INT 15
4522: PUSH
4523: LD_INT 16
4525: PUSH
4526: LD_INT 20
4528: PUSH
4529: LD_INT 21
4531: PUSH
4532: LD_INT 22
4534: PUSH
4535: LD_INT 23
4537: PUSH
4538: LD_INT 25
4540: PUSH
4541: LD_INT 26
4543: PUSH
4544: LD_INT 28
4546: PUSH
4547: LD_INT 30
4549: PUSH
4550: LD_INT 31
4552: PUSH
4553: LD_INT 32
4555: PUSH
4556: LD_INT 36
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: PUSH
4582: LD_INT 101
4584: PUSH
4585: LD_INT 102
4587: PUSH
4588: LD_INT 103
4590: PUSH
4591: LD_INT 105
4593: PUSH
4594: LD_INT 106
4596: PUSH
4597: LD_INT 108
4599: PUSH
4600: LD_INT 109
4602: PUSH
4603: LD_INT 112
4605: PUSH
4606: LD_INT 114
4608: PUSH
4609: LD_INT 116
4611: PUSH
4612: LD_INT 117
4614: PUSH
4615: LD_INT 118
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: ST_TO_ADDR
4636: GO 6735
4638: LD_INT 10
4640: DOUBLE
4641: EQUAL
4642: IFTRUE 4646
4644: GO 4842
4646: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4647: LD_ADDR_VAR 0 2
4651: PUSH
4652: LD_INT 2
4654: PUSH
4655: LD_INT 4
4657: PUSH
4658: LD_INT 5
4660: PUSH
4661: LD_INT 6
4663: PUSH
4664: LD_INT 7
4666: PUSH
4667: LD_INT 8
4669: PUSH
4670: LD_INT 9
4672: PUSH
4673: LD_INT 10
4675: PUSH
4676: LD_INT 11
4678: PUSH
4679: LD_INT 12
4681: PUSH
4682: LD_INT 13
4684: PUSH
4685: LD_INT 14
4687: PUSH
4688: LD_INT 15
4690: PUSH
4691: LD_INT 16
4693: PUSH
4694: LD_INT 17
4696: PUSH
4697: LD_INT 18
4699: PUSH
4700: LD_INT 19
4702: PUSH
4703: LD_INT 20
4705: PUSH
4706: LD_INT 21
4708: PUSH
4709: LD_INT 22
4711: PUSH
4712: LD_INT 23
4714: PUSH
4715: LD_INT 24
4717: PUSH
4718: LD_INT 25
4720: PUSH
4721: LD_INT 26
4723: PUSH
4724: LD_INT 28
4726: PUSH
4727: LD_INT 30
4729: PUSH
4730: LD_INT 31
4732: PUSH
4733: LD_INT 32
4735: PUSH
4736: LD_INT 36
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: PUSH
4770: LD_INT 101
4772: PUSH
4773: LD_INT 102
4775: PUSH
4776: LD_INT 103
4778: PUSH
4779: LD_INT 104
4781: PUSH
4782: LD_INT 105
4784: PUSH
4785: LD_INT 106
4787: PUSH
4788: LD_INT 107
4790: PUSH
4791: LD_INT 108
4793: PUSH
4794: LD_INT 109
4796: PUSH
4797: LD_INT 110
4799: PUSH
4800: LD_INT 111
4802: PUSH
4803: LD_INT 112
4805: PUSH
4806: LD_INT 114
4808: PUSH
4809: LD_INT 116
4811: PUSH
4812: LD_INT 117
4814: PUSH
4815: LD_INT 118
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: ST_TO_ADDR
4840: GO 6735
4842: LD_INT 11
4844: DOUBLE
4845: EQUAL
4846: IFTRUE 4850
4848: GO 5054
4850: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4851: LD_ADDR_VAR 0 2
4855: PUSH
4856: LD_INT 2
4858: PUSH
4859: LD_INT 3
4861: PUSH
4862: LD_INT 4
4864: PUSH
4865: LD_INT 5
4867: PUSH
4868: LD_INT 6
4870: PUSH
4871: LD_INT 7
4873: PUSH
4874: LD_INT 8
4876: PUSH
4877: LD_INT 9
4879: PUSH
4880: LD_INT 10
4882: PUSH
4883: LD_INT 11
4885: PUSH
4886: LD_INT 12
4888: PUSH
4889: LD_INT 13
4891: PUSH
4892: LD_INT 14
4894: PUSH
4895: LD_INT 15
4897: PUSH
4898: LD_INT 16
4900: PUSH
4901: LD_INT 17
4903: PUSH
4904: LD_INT 18
4906: PUSH
4907: LD_INT 19
4909: PUSH
4910: LD_INT 20
4912: PUSH
4913: LD_INT 21
4915: PUSH
4916: LD_INT 22
4918: PUSH
4919: LD_INT 23
4921: PUSH
4922: LD_INT 24
4924: PUSH
4925: LD_INT 25
4927: PUSH
4928: LD_INT 26
4930: PUSH
4931: LD_INT 28
4933: PUSH
4934: LD_INT 30
4936: PUSH
4937: LD_INT 31
4939: PUSH
4940: LD_INT 32
4942: PUSH
4943: LD_INT 34
4945: PUSH
4946: LD_INT 36
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: LIST
4953: LIST
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: LIST
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: PUSH
4982: LD_INT 101
4984: PUSH
4985: LD_INT 102
4987: PUSH
4988: LD_INT 103
4990: PUSH
4991: LD_INT 104
4993: PUSH
4994: LD_INT 105
4996: PUSH
4997: LD_INT 106
4999: PUSH
5000: LD_INT 107
5002: PUSH
5003: LD_INT 108
5005: PUSH
5006: LD_INT 109
5008: PUSH
5009: LD_INT 110
5011: PUSH
5012: LD_INT 111
5014: PUSH
5015: LD_INT 112
5017: PUSH
5018: LD_INT 114
5020: PUSH
5021: LD_INT 116
5023: PUSH
5024: LD_INT 117
5026: PUSH
5027: LD_INT 118
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: ST_TO_ADDR
5052: GO 6735
5054: LD_INT 12
5056: DOUBLE
5057: EQUAL
5058: IFTRUE 5062
5060: GO 5282
5062: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
5063: LD_ADDR_VAR 0 2
5067: PUSH
5068: LD_INT 1
5070: PUSH
5071: LD_INT 2
5073: PUSH
5074: LD_INT 3
5076: PUSH
5077: LD_INT 4
5079: PUSH
5080: LD_INT 5
5082: PUSH
5083: LD_INT 6
5085: PUSH
5086: LD_INT 7
5088: PUSH
5089: LD_INT 8
5091: PUSH
5092: LD_INT 9
5094: PUSH
5095: LD_INT 10
5097: PUSH
5098: LD_INT 11
5100: PUSH
5101: LD_INT 12
5103: PUSH
5104: LD_INT 13
5106: PUSH
5107: LD_INT 14
5109: PUSH
5110: LD_INT 15
5112: PUSH
5113: LD_INT 16
5115: PUSH
5116: LD_INT 17
5118: PUSH
5119: LD_INT 18
5121: PUSH
5122: LD_INT 19
5124: PUSH
5125: LD_INT 20
5127: PUSH
5128: LD_INT 21
5130: PUSH
5131: LD_INT 22
5133: PUSH
5134: LD_INT 23
5136: PUSH
5137: LD_INT 24
5139: PUSH
5140: LD_INT 25
5142: PUSH
5143: LD_INT 26
5145: PUSH
5146: LD_INT 27
5148: PUSH
5149: LD_INT 28
5151: PUSH
5152: LD_INT 30
5154: PUSH
5155: LD_INT 31
5157: PUSH
5158: LD_INT 32
5160: PUSH
5161: LD_INT 33
5163: PUSH
5164: LD_INT 34
5166: PUSH
5167: LD_INT 36
5169: PUSH
5170: EMPTY
5171: LIST
5172: LIST
5173: LIST
5174: LIST
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: LIST
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: PUSH
5206: LD_INT 101
5208: PUSH
5209: LD_INT 102
5211: PUSH
5212: LD_INT 103
5214: PUSH
5215: LD_INT 104
5217: PUSH
5218: LD_INT 105
5220: PUSH
5221: LD_INT 106
5223: PUSH
5224: LD_INT 107
5226: PUSH
5227: LD_INT 108
5229: PUSH
5230: LD_INT 109
5232: PUSH
5233: LD_INT 110
5235: PUSH
5236: LD_INT 111
5238: PUSH
5239: LD_INT 112
5241: PUSH
5242: LD_INT 113
5244: PUSH
5245: LD_INT 114
5247: PUSH
5248: LD_INT 116
5250: PUSH
5251: LD_INT 117
5253: PUSH
5254: LD_INT 118
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: LIST
5265: LIST
5266: LIST
5267: LIST
5268: LIST
5269: LIST
5270: LIST
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: ST_TO_ADDR
5280: GO 6735
5282: LD_INT 13
5284: DOUBLE
5285: EQUAL
5286: IFTRUE 5290
5288: GO 5498
5290: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
5291: LD_ADDR_VAR 0 2
5295: PUSH
5296: LD_INT 1
5298: PUSH
5299: LD_INT 2
5301: PUSH
5302: LD_INT 3
5304: PUSH
5305: LD_INT 4
5307: PUSH
5308: LD_INT 5
5310: PUSH
5311: LD_INT 8
5313: PUSH
5314: LD_INT 9
5316: PUSH
5317: LD_INT 10
5319: PUSH
5320: LD_INT 11
5322: PUSH
5323: LD_INT 12
5325: PUSH
5326: LD_INT 14
5328: PUSH
5329: LD_INT 15
5331: PUSH
5332: LD_INT 16
5334: PUSH
5335: LD_INT 17
5337: PUSH
5338: LD_INT 18
5340: PUSH
5341: LD_INT 19
5343: PUSH
5344: LD_INT 20
5346: PUSH
5347: LD_INT 21
5349: PUSH
5350: LD_INT 22
5352: PUSH
5353: LD_INT 23
5355: PUSH
5356: LD_INT 24
5358: PUSH
5359: LD_INT 25
5361: PUSH
5362: LD_INT 26
5364: PUSH
5365: LD_INT 27
5367: PUSH
5368: LD_INT 28
5370: PUSH
5371: LD_INT 30
5373: PUSH
5374: LD_INT 31
5376: PUSH
5377: LD_INT 32
5379: PUSH
5380: LD_INT 33
5382: PUSH
5383: LD_INT 34
5385: PUSH
5386: LD_INT 36
5388: PUSH
5389: EMPTY
5390: LIST
5391: LIST
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: LIST
5399: LIST
5400: LIST
5401: LIST
5402: LIST
5403: LIST
5404: LIST
5405: LIST
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: LIST
5411: LIST
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: PUSH
5422: LD_INT 101
5424: PUSH
5425: LD_INT 102
5427: PUSH
5428: LD_INT 103
5430: PUSH
5431: LD_INT 104
5433: PUSH
5434: LD_INT 105
5436: PUSH
5437: LD_INT 106
5439: PUSH
5440: LD_INT 107
5442: PUSH
5443: LD_INT 108
5445: PUSH
5446: LD_INT 109
5448: PUSH
5449: LD_INT 110
5451: PUSH
5452: LD_INT 111
5454: PUSH
5455: LD_INT 112
5457: PUSH
5458: LD_INT 113
5460: PUSH
5461: LD_INT 114
5463: PUSH
5464: LD_INT 116
5466: PUSH
5467: LD_INT 117
5469: PUSH
5470: LD_INT 118
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: LIST
5477: LIST
5478: LIST
5479: LIST
5480: LIST
5481: LIST
5482: LIST
5483: LIST
5484: LIST
5485: LIST
5486: LIST
5487: LIST
5488: LIST
5489: LIST
5490: LIST
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: ST_TO_ADDR
5496: GO 6735
5498: LD_INT 14
5500: DOUBLE
5501: EQUAL
5502: IFTRUE 5506
5504: GO 5730
5506: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5507: LD_ADDR_VAR 0 2
5511: PUSH
5512: LD_INT 1
5514: PUSH
5515: LD_INT 2
5517: PUSH
5518: LD_INT 3
5520: PUSH
5521: LD_INT 4
5523: PUSH
5524: LD_INT 5
5526: PUSH
5527: LD_INT 6
5529: PUSH
5530: LD_INT 7
5532: PUSH
5533: LD_INT 8
5535: PUSH
5536: LD_INT 9
5538: PUSH
5539: LD_INT 10
5541: PUSH
5542: LD_INT 11
5544: PUSH
5545: LD_INT 12
5547: PUSH
5548: LD_INT 13
5550: PUSH
5551: LD_INT 14
5553: PUSH
5554: LD_INT 15
5556: PUSH
5557: LD_INT 16
5559: PUSH
5560: LD_INT 17
5562: PUSH
5563: LD_INT 18
5565: PUSH
5566: LD_INT 19
5568: PUSH
5569: LD_INT 20
5571: PUSH
5572: LD_INT 21
5574: PUSH
5575: LD_INT 22
5577: PUSH
5578: LD_INT 23
5580: PUSH
5581: LD_INT 24
5583: PUSH
5584: LD_INT 25
5586: PUSH
5587: LD_INT 26
5589: PUSH
5590: LD_INT 27
5592: PUSH
5593: LD_INT 28
5595: PUSH
5596: LD_INT 29
5598: PUSH
5599: LD_INT 30
5601: PUSH
5602: LD_INT 31
5604: PUSH
5605: LD_INT 32
5607: PUSH
5608: LD_INT 33
5610: PUSH
5611: LD_INT 34
5613: PUSH
5614: LD_INT 36
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: LIST
5653: PUSH
5654: LD_INT 101
5656: PUSH
5657: LD_INT 102
5659: PUSH
5660: LD_INT 103
5662: PUSH
5663: LD_INT 104
5665: PUSH
5666: LD_INT 105
5668: PUSH
5669: LD_INT 106
5671: PUSH
5672: LD_INT 107
5674: PUSH
5675: LD_INT 108
5677: PUSH
5678: LD_INT 109
5680: PUSH
5681: LD_INT 110
5683: PUSH
5684: LD_INT 111
5686: PUSH
5687: LD_INT 112
5689: PUSH
5690: LD_INT 113
5692: PUSH
5693: LD_INT 114
5695: PUSH
5696: LD_INT 116
5698: PUSH
5699: LD_INT 117
5701: PUSH
5702: LD_INT 118
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: LIST
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: ST_TO_ADDR
5728: GO 6735
5730: LD_INT 15
5732: DOUBLE
5733: EQUAL
5734: IFTRUE 5738
5736: GO 5962
5738: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5739: LD_ADDR_VAR 0 2
5743: PUSH
5744: LD_INT 1
5746: PUSH
5747: LD_INT 2
5749: PUSH
5750: LD_INT 3
5752: PUSH
5753: LD_INT 4
5755: PUSH
5756: LD_INT 5
5758: PUSH
5759: LD_INT 6
5761: PUSH
5762: LD_INT 7
5764: PUSH
5765: LD_INT 8
5767: PUSH
5768: LD_INT 9
5770: PUSH
5771: LD_INT 10
5773: PUSH
5774: LD_INT 11
5776: PUSH
5777: LD_INT 12
5779: PUSH
5780: LD_INT 13
5782: PUSH
5783: LD_INT 14
5785: PUSH
5786: LD_INT 15
5788: PUSH
5789: LD_INT 16
5791: PUSH
5792: LD_INT 17
5794: PUSH
5795: LD_INT 18
5797: PUSH
5798: LD_INT 19
5800: PUSH
5801: LD_INT 20
5803: PUSH
5804: LD_INT 21
5806: PUSH
5807: LD_INT 22
5809: PUSH
5810: LD_INT 23
5812: PUSH
5813: LD_INT 24
5815: PUSH
5816: LD_INT 25
5818: PUSH
5819: LD_INT 26
5821: PUSH
5822: LD_INT 27
5824: PUSH
5825: LD_INT 28
5827: PUSH
5828: LD_INT 29
5830: PUSH
5831: LD_INT 30
5833: PUSH
5834: LD_INT 31
5836: PUSH
5837: LD_INT 32
5839: PUSH
5840: LD_INT 33
5842: PUSH
5843: LD_INT 34
5845: PUSH
5846: LD_INT 36
5848: PUSH
5849: EMPTY
5850: LIST
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: LIST
5878: LIST
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: PUSH
5886: LD_INT 101
5888: PUSH
5889: LD_INT 102
5891: PUSH
5892: LD_INT 103
5894: PUSH
5895: LD_INT 104
5897: PUSH
5898: LD_INT 105
5900: PUSH
5901: LD_INT 106
5903: PUSH
5904: LD_INT 107
5906: PUSH
5907: LD_INT 108
5909: PUSH
5910: LD_INT 109
5912: PUSH
5913: LD_INT 110
5915: PUSH
5916: LD_INT 111
5918: PUSH
5919: LD_INT 112
5921: PUSH
5922: LD_INT 113
5924: PUSH
5925: LD_INT 114
5927: PUSH
5928: LD_INT 116
5930: PUSH
5931: LD_INT 117
5933: PUSH
5934: LD_INT 118
5936: PUSH
5937: EMPTY
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: LIST
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: LIST
5954: LIST
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: ST_TO_ADDR
5960: GO 6735
5962: LD_INT 16
5964: DOUBLE
5965: EQUAL
5966: IFTRUE 5970
5968: GO 6106
5970: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
5971: LD_ADDR_VAR 0 2
5975: PUSH
5976: LD_INT 2
5978: PUSH
5979: LD_INT 4
5981: PUSH
5982: LD_INT 5
5984: PUSH
5985: LD_INT 7
5987: PUSH
5988: LD_INT 11
5990: PUSH
5991: LD_INT 12
5993: PUSH
5994: LD_INT 15
5996: PUSH
5997: LD_INT 16
5999: PUSH
6000: LD_INT 20
6002: PUSH
6003: LD_INT 21
6005: PUSH
6006: LD_INT 22
6008: PUSH
6009: LD_INT 23
6011: PUSH
6012: LD_INT 25
6014: PUSH
6015: LD_INT 26
6017: PUSH
6018: LD_INT 30
6020: PUSH
6021: LD_INT 31
6023: PUSH
6024: LD_INT 32
6026: PUSH
6027: LD_INT 33
6029: PUSH
6030: LD_INT 34
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: PUSH
6054: LD_INT 101
6056: PUSH
6057: LD_INT 102
6059: PUSH
6060: LD_INT 103
6062: PUSH
6063: LD_INT 106
6065: PUSH
6066: LD_INT 108
6068: PUSH
6069: LD_INT 112
6071: PUSH
6072: LD_INT 113
6074: PUSH
6075: LD_INT 114
6077: PUSH
6078: LD_INT 116
6080: PUSH
6081: LD_INT 117
6083: PUSH
6084: LD_INT 118
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: PUSH
6100: EMPTY
6101: LIST
6102: LIST
6103: ST_TO_ADDR
6104: GO 6735
6106: LD_INT 17
6108: DOUBLE
6109: EQUAL
6110: IFTRUE 6114
6112: GO 6338
6114: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
6115: LD_ADDR_VAR 0 2
6119: PUSH
6120: LD_INT 1
6122: PUSH
6123: LD_INT 2
6125: PUSH
6126: LD_INT 3
6128: PUSH
6129: LD_INT 4
6131: PUSH
6132: LD_INT 5
6134: PUSH
6135: LD_INT 6
6137: PUSH
6138: LD_INT 7
6140: PUSH
6141: LD_INT 8
6143: PUSH
6144: LD_INT 9
6146: PUSH
6147: LD_INT 10
6149: PUSH
6150: LD_INT 11
6152: PUSH
6153: LD_INT 12
6155: PUSH
6156: LD_INT 13
6158: PUSH
6159: LD_INT 14
6161: PUSH
6162: LD_INT 15
6164: PUSH
6165: LD_INT 16
6167: PUSH
6168: LD_INT 17
6170: PUSH
6171: LD_INT 18
6173: PUSH
6174: LD_INT 19
6176: PUSH
6177: LD_INT 20
6179: PUSH
6180: LD_INT 21
6182: PUSH
6183: LD_INT 22
6185: PUSH
6186: LD_INT 23
6188: PUSH
6189: LD_INT 24
6191: PUSH
6192: LD_INT 25
6194: PUSH
6195: LD_INT 26
6197: PUSH
6198: LD_INT 27
6200: PUSH
6201: LD_INT 28
6203: PUSH
6204: LD_INT 29
6206: PUSH
6207: LD_INT 30
6209: PUSH
6210: LD_INT 31
6212: PUSH
6213: LD_INT 32
6215: PUSH
6216: LD_INT 33
6218: PUSH
6219: LD_INT 34
6221: PUSH
6222: LD_INT 36
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: LIST
6261: PUSH
6262: LD_INT 101
6264: PUSH
6265: LD_INT 102
6267: PUSH
6268: LD_INT 103
6270: PUSH
6271: LD_INT 104
6273: PUSH
6274: LD_INT 105
6276: PUSH
6277: LD_INT 106
6279: PUSH
6280: LD_INT 107
6282: PUSH
6283: LD_INT 108
6285: PUSH
6286: LD_INT 109
6288: PUSH
6289: LD_INT 110
6291: PUSH
6292: LD_INT 111
6294: PUSH
6295: LD_INT 112
6297: PUSH
6298: LD_INT 113
6300: PUSH
6301: LD_INT 114
6303: PUSH
6304: LD_INT 116
6306: PUSH
6307: LD_INT 117
6309: PUSH
6310: LD_INT 118
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: ST_TO_ADDR
6336: GO 6735
6338: LD_INT 18
6340: DOUBLE
6341: EQUAL
6342: IFTRUE 6346
6344: GO 6494
6346: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6347: LD_ADDR_VAR 0 2
6351: PUSH
6352: LD_INT 2
6354: PUSH
6355: LD_INT 4
6357: PUSH
6358: LD_INT 5
6360: PUSH
6361: LD_INT 7
6363: PUSH
6364: LD_INT 11
6366: PUSH
6367: LD_INT 12
6369: PUSH
6370: LD_INT 15
6372: PUSH
6373: LD_INT 16
6375: PUSH
6376: LD_INT 20
6378: PUSH
6379: LD_INT 21
6381: PUSH
6382: LD_INT 22
6384: PUSH
6385: LD_INT 23
6387: PUSH
6388: LD_INT 25
6390: PUSH
6391: LD_INT 26
6393: PUSH
6394: LD_INT 30
6396: PUSH
6397: LD_INT 31
6399: PUSH
6400: LD_INT 32
6402: PUSH
6403: LD_INT 33
6405: PUSH
6406: LD_INT 34
6408: PUSH
6409: LD_INT 35
6411: PUSH
6412: LD_INT 36
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: PUSH
6438: LD_INT 101
6440: PUSH
6441: LD_INT 102
6443: PUSH
6444: LD_INT 103
6446: PUSH
6447: LD_INT 106
6449: PUSH
6450: LD_INT 108
6452: PUSH
6453: LD_INT 112
6455: PUSH
6456: LD_INT 113
6458: PUSH
6459: LD_INT 114
6461: PUSH
6462: LD_INT 115
6464: PUSH
6465: LD_INT 116
6467: PUSH
6468: LD_INT 117
6470: PUSH
6471: LD_INT 118
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: ST_TO_ADDR
6492: GO 6735
6494: LD_INT 19
6496: DOUBLE
6497: EQUAL
6498: IFTRUE 6502
6500: GO 6734
6502: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6503: LD_ADDR_VAR 0 2
6507: PUSH
6508: LD_INT 1
6510: PUSH
6511: LD_INT 2
6513: PUSH
6514: LD_INT 3
6516: PUSH
6517: LD_INT 4
6519: PUSH
6520: LD_INT 5
6522: PUSH
6523: LD_INT 6
6525: PUSH
6526: LD_INT 7
6528: PUSH
6529: LD_INT 8
6531: PUSH
6532: LD_INT 9
6534: PUSH
6535: LD_INT 10
6537: PUSH
6538: LD_INT 11
6540: PUSH
6541: LD_INT 12
6543: PUSH
6544: LD_INT 13
6546: PUSH
6547: LD_INT 14
6549: PUSH
6550: LD_INT 15
6552: PUSH
6553: LD_INT 16
6555: PUSH
6556: LD_INT 17
6558: PUSH
6559: LD_INT 18
6561: PUSH
6562: LD_INT 19
6564: PUSH
6565: LD_INT 20
6567: PUSH
6568: LD_INT 21
6570: PUSH
6571: LD_INT 22
6573: PUSH
6574: LD_INT 23
6576: PUSH
6577: LD_INT 24
6579: PUSH
6580: LD_INT 25
6582: PUSH
6583: LD_INT 26
6585: PUSH
6586: LD_INT 27
6588: PUSH
6589: LD_INT 28
6591: PUSH
6592: LD_INT 29
6594: PUSH
6595: LD_INT 30
6597: PUSH
6598: LD_INT 31
6600: PUSH
6601: LD_INT 32
6603: PUSH
6604: LD_INT 33
6606: PUSH
6607: LD_INT 34
6609: PUSH
6610: LD_INT 35
6612: PUSH
6613: LD_INT 36
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: PUSH
6654: LD_INT 101
6656: PUSH
6657: LD_INT 102
6659: PUSH
6660: LD_INT 103
6662: PUSH
6663: LD_INT 104
6665: PUSH
6666: LD_INT 105
6668: PUSH
6669: LD_INT 106
6671: PUSH
6672: LD_INT 107
6674: PUSH
6675: LD_INT 108
6677: PUSH
6678: LD_INT 109
6680: PUSH
6681: LD_INT 110
6683: PUSH
6684: LD_INT 111
6686: PUSH
6687: LD_INT 112
6689: PUSH
6690: LD_INT 113
6692: PUSH
6693: LD_INT 114
6695: PUSH
6696: LD_INT 115
6698: PUSH
6699: LD_INT 116
6701: PUSH
6702: LD_INT 117
6704: PUSH
6705: LD_INT 118
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: ST_TO_ADDR
6732: GO 6735
6734: POP
// end else
6735: GO 6966
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6737: LD_ADDR_VAR 0 2
6741: PUSH
6742: LD_INT 1
6744: PUSH
6745: LD_INT 2
6747: PUSH
6748: LD_INT 3
6750: PUSH
6751: LD_INT 4
6753: PUSH
6754: LD_INT 5
6756: PUSH
6757: LD_INT 6
6759: PUSH
6760: LD_INT 7
6762: PUSH
6763: LD_INT 8
6765: PUSH
6766: LD_INT 9
6768: PUSH
6769: LD_INT 10
6771: PUSH
6772: LD_INT 11
6774: PUSH
6775: LD_INT 12
6777: PUSH
6778: LD_INT 13
6780: PUSH
6781: LD_INT 14
6783: PUSH
6784: LD_INT 15
6786: PUSH
6787: LD_INT 16
6789: PUSH
6790: LD_INT 17
6792: PUSH
6793: LD_INT 18
6795: PUSH
6796: LD_INT 19
6798: PUSH
6799: LD_INT 20
6801: PUSH
6802: LD_INT 21
6804: PUSH
6805: LD_INT 22
6807: PUSH
6808: LD_INT 23
6810: PUSH
6811: LD_INT 24
6813: PUSH
6814: LD_INT 25
6816: PUSH
6817: LD_INT 26
6819: PUSH
6820: LD_INT 27
6822: PUSH
6823: LD_INT 28
6825: PUSH
6826: LD_INT 29
6828: PUSH
6829: LD_INT 30
6831: PUSH
6832: LD_INT 31
6834: PUSH
6835: LD_INT 32
6837: PUSH
6838: LD_INT 33
6840: PUSH
6841: LD_INT 34
6843: PUSH
6844: LD_INT 35
6846: PUSH
6847: LD_INT 36
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: PUSH
6888: LD_INT 101
6890: PUSH
6891: LD_INT 102
6893: PUSH
6894: LD_INT 103
6896: PUSH
6897: LD_INT 104
6899: PUSH
6900: LD_INT 105
6902: PUSH
6903: LD_INT 106
6905: PUSH
6906: LD_INT 107
6908: PUSH
6909: LD_INT 108
6911: PUSH
6912: LD_INT 109
6914: PUSH
6915: LD_INT 110
6917: PUSH
6918: LD_INT 111
6920: PUSH
6921: LD_INT 112
6923: PUSH
6924: LD_INT 113
6926: PUSH
6927: LD_INT 114
6929: PUSH
6930: LD_INT 115
6932: PUSH
6933: LD_INT 116
6935: PUSH
6936: LD_INT 117
6938: PUSH
6939: LD_INT 118
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: ST_TO_ADDR
// if result then
6966: LD_VAR 0 2
6970: IFFALSE 7756
// begin normal :=  ;
6972: LD_ADDR_VAR 0 5
6976: PUSH
6977: LD_STRING 
6979: ST_TO_ADDR
// hardcore :=  ;
6980: LD_ADDR_VAR 0 6
6984: PUSH
6985: LD_STRING 
6987: ST_TO_ADDR
// active :=  ;
6988: LD_ADDR_VAR 0 7
6992: PUSH
6993: LD_STRING 
6995: ST_TO_ADDR
// for i = 1 to normalCounter do
6996: LD_ADDR_VAR 0 8
7000: PUSH
7001: DOUBLE
7002: LD_INT 1
7004: DEC
7005: ST_TO_ADDR
7006: LD_EXP 8
7010: PUSH
7011: FOR_TO
7012: IFFALSE 7113
// begin tmp := 0 ;
7014: LD_ADDR_VAR 0 3
7018: PUSH
7019: LD_STRING 0
7021: ST_TO_ADDR
// if result [ 1 ] then
7022: LD_VAR 0 2
7026: PUSH
7027: LD_INT 1
7029: ARRAY
7030: IFFALSE 7095
// if result [ 1 ] [ 1 ] = i then
7032: LD_VAR 0 2
7036: PUSH
7037: LD_INT 1
7039: ARRAY
7040: PUSH
7041: LD_INT 1
7043: ARRAY
7044: PUSH
7045: LD_VAR 0 8
7049: EQUAL
7050: IFFALSE 7095
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7052: LD_ADDR_VAR 0 2
7056: PUSH
7057: LD_VAR 0 2
7061: PPUSH
7062: LD_INT 1
7064: PPUSH
7065: LD_VAR 0 2
7069: PUSH
7070: LD_INT 1
7072: ARRAY
7073: PPUSH
7074: LD_INT 1
7076: PPUSH
7077: CALL_OW 3
7081: PPUSH
7082: CALL_OW 1
7086: ST_TO_ADDR
// tmp := 1 ;
7087: LD_ADDR_VAR 0 3
7091: PUSH
7092: LD_STRING 1
7094: ST_TO_ADDR
// end ; normal := normal & tmp ;
7095: LD_ADDR_VAR 0 5
7099: PUSH
7100: LD_VAR 0 5
7104: PUSH
7105: LD_VAR 0 3
7109: STR
7110: ST_TO_ADDR
// end ;
7111: GO 7011
7113: POP
7114: POP
// for i = 1 to hardcoreCounter do
7115: LD_ADDR_VAR 0 8
7119: PUSH
7120: DOUBLE
7121: LD_INT 1
7123: DEC
7124: ST_TO_ADDR
7125: LD_EXP 9
7129: PUSH
7130: FOR_TO
7131: IFFALSE 7236
// begin tmp := 0 ;
7133: LD_ADDR_VAR 0 3
7137: PUSH
7138: LD_STRING 0
7140: ST_TO_ADDR
// if result [ 2 ] then
7141: LD_VAR 0 2
7145: PUSH
7146: LD_INT 2
7148: ARRAY
7149: IFFALSE 7218
// if result [ 2 ] [ 1 ] = 100 + i then
7151: LD_VAR 0 2
7155: PUSH
7156: LD_INT 2
7158: ARRAY
7159: PUSH
7160: LD_INT 1
7162: ARRAY
7163: PUSH
7164: LD_INT 100
7166: PUSH
7167: LD_VAR 0 8
7171: PLUS
7172: EQUAL
7173: IFFALSE 7218
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7175: LD_ADDR_VAR 0 2
7179: PUSH
7180: LD_VAR 0 2
7184: PPUSH
7185: LD_INT 2
7187: PPUSH
7188: LD_VAR 0 2
7192: PUSH
7193: LD_INT 2
7195: ARRAY
7196: PPUSH
7197: LD_INT 1
7199: PPUSH
7200: CALL_OW 3
7204: PPUSH
7205: CALL_OW 1
7209: ST_TO_ADDR
// tmp := 1 ;
7210: LD_ADDR_VAR 0 3
7214: PUSH
7215: LD_STRING 1
7217: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7218: LD_ADDR_VAR 0 6
7222: PUSH
7223: LD_VAR 0 6
7227: PUSH
7228: LD_VAR 0 3
7232: STR
7233: ST_TO_ADDR
// end ;
7234: GO 7130
7236: POP
7237: POP
// if isGameLoad then
7238: LD_VAR 0 1
7242: IFFALSE 7717
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
7244: LD_ADDR_VAR 0 4
7248: PUSH
7249: LD_EXP 12
7253: PUSH
7254: LD_EXP 11
7258: PUSH
7259: LD_EXP 13
7263: PUSH
7264: LD_EXP 10
7268: PUSH
7269: LD_EXP 14
7273: PUSH
7274: LD_EXP 15
7278: PUSH
7279: LD_EXP 16
7283: PUSH
7284: LD_EXP 17
7288: PUSH
7289: LD_EXP 18
7293: PUSH
7294: LD_EXP 19
7298: PUSH
7299: LD_EXP 20
7303: PUSH
7304: LD_EXP 21
7308: PUSH
7309: LD_EXP 22
7313: PUSH
7314: LD_EXP 23
7318: PUSH
7319: LD_EXP 31
7323: PUSH
7324: LD_EXP 32
7328: PUSH
7329: LD_EXP 33
7333: PUSH
7334: LD_EXP 34
7338: PUSH
7339: LD_EXP 36
7343: PUSH
7344: LD_EXP 37
7348: PUSH
7349: LD_EXP 38
7353: PUSH
7354: LD_EXP 41
7358: PUSH
7359: LD_EXP 43
7363: PUSH
7364: LD_EXP 44
7368: PUSH
7369: LD_EXP 45
7373: PUSH
7374: LD_EXP 47
7378: PUSH
7379: LD_EXP 48
7383: PUSH
7384: LD_EXP 51
7388: PUSH
7389: LD_EXP 52
7393: PUSH
7394: LD_EXP 53
7398: PUSH
7399: LD_EXP 54
7403: PUSH
7404: LD_EXP 55
7408: PUSH
7409: LD_EXP 56
7413: PUSH
7414: LD_EXP 57
7418: PUSH
7419: LD_EXP 58
7423: PUSH
7424: LD_EXP 59
7428: PUSH
7429: LD_EXP 24
7433: PUSH
7434: LD_EXP 25
7438: PUSH
7439: LD_EXP 28
7443: PUSH
7444: LD_EXP 29
7448: PUSH
7449: LD_EXP 30
7453: PUSH
7454: LD_EXP 26
7458: PUSH
7459: LD_EXP 27
7463: PUSH
7464: LD_EXP 35
7468: PUSH
7469: LD_EXP 39
7473: PUSH
7474: LD_EXP 40
7478: PUSH
7479: LD_EXP 42
7483: PUSH
7484: LD_EXP 46
7488: PUSH
7489: LD_EXP 49
7493: PUSH
7494: LD_EXP 50
7498: PUSH
7499: LD_EXP 60
7503: PUSH
7504: LD_EXP 61
7508: PUSH
7509: LD_EXP 62
7513: PUSH
7514: LD_EXP 63
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: ST_TO_ADDR
// tmp :=  ;
7575: LD_ADDR_VAR 0 3
7579: PUSH
7580: LD_STRING 
7582: ST_TO_ADDR
// for i = 1 to normalCounter do
7583: LD_ADDR_VAR 0 8
7587: PUSH
7588: DOUBLE
7589: LD_INT 1
7591: DEC
7592: ST_TO_ADDR
7593: LD_EXP 8
7597: PUSH
7598: FOR_TO
7599: IFFALSE 7635
// begin if flags [ i ] then
7601: LD_VAR 0 4
7605: PUSH
7606: LD_VAR 0 8
7610: ARRAY
7611: IFFALSE 7633
// tmp := tmp & i & ; ;
7613: LD_ADDR_VAR 0 3
7617: PUSH
7618: LD_VAR 0 3
7622: PUSH
7623: LD_VAR 0 8
7627: STR
7628: PUSH
7629: LD_STRING ;
7631: STR
7632: ST_TO_ADDR
// end ;
7633: GO 7598
7635: POP
7636: POP
// for i = 1 to hardcoreCounter do
7637: LD_ADDR_VAR 0 8
7641: PUSH
7642: DOUBLE
7643: LD_INT 1
7645: DEC
7646: ST_TO_ADDR
7647: LD_EXP 9
7651: PUSH
7652: FOR_TO
7653: IFFALSE 7699
// begin if flags [ normalCounter + i ] then
7655: LD_VAR 0 4
7659: PUSH
7660: LD_EXP 8
7664: PUSH
7665: LD_VAR 0 8
7669: PLUS
7670: ARRAY
7671: IFFALSE 7697
// tmp := tmp & ( 100 + i ) & ; ;
7673: LD_ADDR_VAR 0 3
7677: PUSH
7678: LD_VAR 0 3
7682: PUSH
7683: LD_INT 100
7685: PUSH
7686: LD_VAR 0 8
7690: PLUS
7691: STR
7692: PUSH
7693: LD_STRING ;
7695: STR
7696: ST_TO_ADDR
// end ;
7697: GO 7652
7699: POP
7700: POP
// if tmp then
7701: LD_VAR 0 3
7705: IFFALSE 7717
// active := tmp ;
7707: LD_ADDR_VAR 0 7
7711: PUSH
7712: LD_VAR 0 3
7716: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7717: LD_STRING getStreamItemsFromMission("
7719: PUSH
7720: LD_VAR 0 5
7724: STR
7725: PUSH
7726: LD_STRING ","
7728: STR
7729: PUSH
7730: LD_VAR 0 6
7734: STR
7735: PUSH
7736: LD_STRING ","
7738: STR
7739: PUSH
7740: LD_VAR 0 7
7744: STR
7745: PUSH
7746: LD_STRING ")
7748: STR
7749: PPUSH
7750: CALL_OW 559
// end else
7754: GO 7763
// ToLua ( getStreamItemsFromMission("","","") ) ;
7756: LD_STRING getStreamItemsFromMission("","","")
7758: PPUSH
7759: CALL_OW 559
// end ;
7763: LD_VAR 0 2
7767: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7768: LD_EXP 7
7772: PUSH
7773: LD_EXP 12
7777: AND
7778: IFFALSE 7902
7780: GO 7782
7782: DISABLE
7783: LD_INT 0
7785: PPUSH
7786: PPUSH
// begin enable ;
7787: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7788: LD_ADDR_VAR 0 2
7792: PUSH
7793: LD_INT 22
7795: PUSH
7796: LD_OWVAR 2
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: LD_INT 2
7807: PUSH
7808: LD_INT 34
7810: PUSH
7811: LD_INT 7
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: PUSH
7818: LD_INT 34
7820: PUSH
7821: LD_INT 45
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: PUSH
7828: LD_INT 34
7830: PUSH
7831: LD_INT 28
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PUSH
7838: LD_INT 34
7840: PUSH
7841: LD_INT 47
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PPUSH
7859: CALL_OW 69
7863: ST_TO_ADDR
// if not tmp then
7864: LD_VAR 0 2
7868: NOT
7869: IFFALSE 7873
// exit ;
7871: GO 7902
// for i in tmp do
7873: LD_ADDR_VAR 0 1
7877: PUSH
7878: LD_VAR 0 2
7882: PUSH
7883: FOR_IN
7884: IFFALSE 7900
// begin SetLives ( i , 0 ) ;
7886: LD_VAR 0 1
7890: PPUSH
7891: LD_INT 0
7893: PPUSH
7894: CALL_OW 234
// end ;
7898: GO 7883
7900: POP
7901: POP
// end ;
7902: PPOPN 2
7904: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
7905: LD_EXP 7
7909: PUSH
7910: LD_EXP 13
7914: AND
7915: IFFALSE 7999
7917: GO 7919
7919: DISABLE
7920: LD_INT 0
7922: PPUSH
7923: PPUSH
// begin enable ;
7924: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
7925: LD_ADDR_VAR 0 2
7929: PUSH
7930: LD_INT 22
7932: PUSH
7933: LD_OWVAR 2
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: PUSH
7942: LD_INT 32
7944: PUSH
7945: LD_INT 3
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PPUSH
7956: CALL_OW 69
7960: ST_TO_ADDR
// if not tmp then
7961: LD_VAR 0 2
7965: NOT
7966: IFFALSE 7970
// exit ;
7968: GO 7999
// for i in tmp do
7970: LD_ADDR_VAR 0 1
7974: PUSH
7975: LD_VAR 0 2
7979: PUSH
7980: FOR_IN
7981: IFFALSE 7997
// begin SetLives ( i , 0 ) ;
7983: LD_VAR 0 1
7987: PPUSH
7988: LD_INT 0
7990: PPUSH
7991: CALL_OW 234
// end ;
7995: GO 7980
7997: POP
7998: POP
// end ;
7999: PPOPN 2
8001: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
8002: LD_EXP 7
8006: PUSH
8007: LD_EXP 10
8011: AND
8012: IFFALSE 8105
8014: GO 8016
8016: DISABLE
8017: LD_INT 0
8019: PPUSH
// begin enable ;
8020: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
8021: LD_ADDR_VAR 0 1
8025: PUSH
8026: LD_INT 22
8028: PUSH
8029: LD_OWVAR 2
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: PUSH
8038: LD_INT 2
8040: PUSH
8041: LD_INT 25
8043: PUSH
8044: LD_INT 5
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: PUSH
8051: LD_INT 25
8053: PUSH
8054: LD_INT 9
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: PUSH
8061: LD_INT 25
8063: PUSH
8064: LD_INT 8
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: PUSH
8071: EMPTY
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: PPUSH
8081: CALL_OW 69
8085: PUSH
8086: FOR_IN
8087: IFFALSE 8103
// begin SetClass ( i , 1 ) ;
8089: LD_VAR 0 1
8093: PPUSH
8094: LD_INT 1
8096: PPUSH
8097: CALL_OW 336
// end ;
8101: GO 8086
8103: POP
8104: POP
// end ;
8105: PPOPN 1
8107: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
8108: LD_EXP 7
8112: PUSH
8113: LD_EXP 11
8117: AND
8118: PUSH
8119: LD_OWVAR 65
8123: PUSH
8124: LD_INT 7
8126: LESS
8127: AND
8128: IFFALSE 8142
8130: GO 8132
8132: DISABLE
// begin enable ;
8133: ENABLE
// game_speed := 7 ;
8134: LD_ADDR_OWVAR 65
8138: PUSH
8139: LD_INT 7
8141: ST_TO_ADDR
// end ;
8142: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
8143: LD_EXP 7
8147: PUSH
8148: LD_EXP 14
8152: AND
8153: IFFALSE 8355
8155: GO 8157
8157: DISABLE
8158: LD_INT 0
8160: PPUSH
8161: PPUSH
8162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
8163: LD_ADDR_VAR 0 3
8167: PUSH
8168: LD_INT 81
8170: PUSH
8171: LD_OWVAR 2
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 21
8182: PUSH
8183: LD_INT 1
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: PPUSH
8194: CALL_OW 69
8198: ST_TO_ADDR
// if not tmp then
8199: LD_VAR 0 3
8203: NOT
8204: IFFALSE 8208
// exit ;
8206: GO 8355
// if tmp > 5 then
8208: LD_VAR 0 3
8212: PUSH
8213: LD_INT 5
8215: GREATER
8216: IFFALSE 8228
// k := 5 else
8218: LD_ADDR_VAR 0 2
8222: PUSH
8223: LD_INT 5
8225: ST_TO_ADDR
8226: GO 8238
// k := tmp ;
8228: LD_ADDR_VAR 0 2
8232: PUSH
8233: LD_VAR 0 3
8237: ST_TO_ADDR
// for i := 1 to k do
8238: LD_ADDR_VAR 0 1
8242: PUSH
8243: DOUBLE
8244: LD_INT 1
8246: DEC
8247: ST_TO_ADDR
8248: LD_VAR 0 2
8252: PUSH
8253: FOR_TO
8254: IFFALSE 8353
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
8256: LD_VAR 0 3
8260: PUSH
8261: LD_VAR 0 1
8265: ARRAY
8266: PPUSH
8267: LD_VAR 0 1
8271: PUSH
8272: LD_INT 4
8274: MOD
8275: PUSH
8276: LD_INT 1
8278: PLUS
8279: PPUSH
8280: CALL_OW 259
8284: PUSH
8285: LD_INT 10
8287: LESS
8288: IFFALSE 8351
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
8290: LD_VAR 0 3
8294: PUSH
8295: LD_VAR 0 1
8299: ARRAY
8300: PPUSH
8301: LD_VAR 0 1
8305: PUSH
8306: LD_INT 4
8308: MOD
8309: PUSH
8310: LD_INT 1
8312: PLUS
8313: PPUSH
8314: LD_VAR 0 3
8318: PUSH
8319: LD_VAR 0 1
8323: ARRAY
8324: PPUSH
8325: LD_VAR 0 1
8329: PUSH
8330: LD_INT 4
8332: MOD
8333: PUSH
8334: LD_INT 1
8336: PLUS
8337: PPUSH
8338: CALL_OW 259
8342: PUSH
8343: LD_INT 1
8345: PLUS
8346: PPUSH
8347: CALL_OW 237
8351: GO 8253
8353: POP
8354: POP
// end ;
8355: PPOPN 3
8357: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8358: LD_EXP 7
8362: PUSH
8363: LD_EXP 15
8367: AND
8368: IFFALSE 8388
8370: GO 8372
8372: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8373: LD_INT 4
8375: PPUSH
8376: LD_OWVAR 2
8380: PPUSH
8381: LD_INT 0
8383: PPUSH
8384: CALL_OW 324
8388: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8389: LD_EXP 7
8393: PUSH
8394: LD_EXP 44
8398: AND
8399: IFFALSE 8419
8401: GO 8403
8403: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8404: LD_INT 19
8406: PPUSH
8407: LD_OWVAR 2
8411: PPUSH
8412: LD_INT 0
8414: PPUSH
8415: CALL_OW 324
8419: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8420: LD_EXP 7
8424: PUSH
8425: LD_EXP 16
8429: AND
8430: IFFALSE 8532
8432: GO 8434
8434: DISABLE
8435: LD_INT 0
8437: PPUSH
8438: PPUSH
// begin enable ;
8439: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8440: LD_ADDR_VAR 0 2
8444: PUSH
8445: LD_INT 22
8447: PUSH
8448: LD_OWVAR 2
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: PUSH
8457: LD_INT 2
8459: PUSH
8460: LD_INT 34
8462: PUSH
8463: LD_INT 11
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: PUSH
8470: LD_INT 34
8472: PUSH
8473: LD_INT 30
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: LIST
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PPUSH
8489: CALL_OW 69
8493: ST_TO_ADDR
// if not tmp then
8494: LD_VAR 0 2
8498: NOT
8499: IFFALSE 8503
// exit ;
8501: GO 8532
// for i in tmp do
8503: LD_ADDR_VAR 0 1
8507: PUSH
8508: LD_VAR 0 2
8512: PUSH
8513: FOR_IN
8514: IFFALSE 8530
// begin SetLives ( i , 0 ) ;
8516: LD_VAR 0 1
8520: PPUSH
8521: LD_INT 0
8523: PPUSH
8524: CALL_OW 234
// end ;
8528: GO 8513
8530: POP
8531: POP
// end ;
8532: PPOPN 2
8534: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8535: LD_EXP 7
8539: PUSH
8540: LD_EXP 17
8544: AND
8545: IFFALSE 8565
8547: GO 8549
8549: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8550: LD_INT 32
8552: PPUSH
8553: LD_OWVAR 2
8557: PPUSH
8558: LD_INT 0
8560: PPUSH
8561: CALL_OW 324
8565: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8566: LD_EXP 7
8570: PUSH
8571: LD_EXP 18
8575: AND
8576: IFFALSE 8757
8578: GO 8580
8580: DISABLE
8581: LD_INT 0
8583: PPUSH
8584: PPUSH
8585: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8586: LD_ADDR_VAR 0 2
8590: PUSH
8591: LD_INT 22
8593: PUSH
8594: LD_OWVAR 2
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: PUSH
8603: LD_INT 33
8605: PUSH
8606: LD_INT 3
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: PUSH
8613: EMPTY
8614: LIST
8615: LIST
8616: PPUSH
8617: CALL_OW 69
8621: ST_TO_ADDR
// if not tmp then
8622: LD_VAR 0 2
8626: NOT
8627: IFFALSE 8631
// exit ;
8629: GO 8757
// side := 0 ;
8631: LD_ADDR_VAR 0 3
8635: PUSH
8636: LD_INT 0
8638: ST_TO_ADDR
// for i := 1 to 8 do
8639: LD_ADDR_VAR 0 1
8643: PUSH
8644: DOUBLE
8645: LD_INT 1
8647: DEC
8648: ST_TO_ADDR
8649: LD_INT 8
8651: PUSH
8652: FOR_TO
8653: IFFALSE 8701
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8655: LD_OWVAR 2
8659: PUSH
8660: LD_VAR 0 1
8664: NONEQUAL
8665: PUSH
8666: LD_OWVAR 2
8670: PPUSH
8671: LD_VAR 0 1
8675: PPUSH
8676: CALL_OW 81
8680: PUSH
8681: LD_INT 2
8683: EQUAL
8684: AND
8685: IFFALSE 8699
// begin side := i ;
8687: LD_ADDR_VAR 0 3
8691: PUSH
8692: LD_VAR 0 1
8696: ST_TO_ADDR
// break ;
8697: GO 8701
// end ;
8699: GO 8652
8701: POP
8702: POP
// if not side then
8703: LD_VAR 0 3
8707: NOT
8708: IFFALSE 8712
// exit ;
8710: GO 8757
// for i := 1 to tmp do
8712: LD_ADDR_VAR 0 1
8716: PUSH
8717: DOUBLE
8718: LD_INT 1
8720: DEC
8721: ST_TO_ADDR
8722: LD_VAR 0 2
8726: PUSH
8727: FOR_TO
8728: IFFALSE 8755
// if Prob ( 60 ) then
8730: LD_INT 60
8732: PPUSH
8733: CALL_OW 13
8737: IFFALSE 8753
// SetSide ( i , side ) ;
8739: LD_VAR 0 1
8743: PPUSH
8744: LD_VAR 0 3
8748: PPUSH
8749: CALL_OW 235
8753: GO 8727
8755: POP
8756: POP
// end ;
8757: PPOPN 3
8759: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8760: LD_EXP 7
8764: PUSH
8765: LD_EXP 20
8769: AND
8770: IFFALSE 8889
8772: GO 8774
8774: DISABLE
8775: LD_INT 0
8777: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8778: LD_ADDR_VAR 0 1
8782: PUSH
8783: LD_INT 22
8785: PUSH
8786: LD_OWVAR 2
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: PUSH
8795: LD_INT 21
8797: PUSH
8798: LD_INT 1
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: PUSH
8805: LD_INT 3
8807: PUSH
8808: LD_INT 23
8810: PUSH
8811: LD_INT 0
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: LIST
8826: PPUSH
8827: CALL_OW 69
8831: PUSH
8832: FOR_IN
8833: IFFALSE 8887
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8835: LD_VAR 0 1
8839: PPUSH
8840: CALL_OW 257
8844: PUSH
8845: LD_INT 1
8847: PUSH
8848: LD_INT 2
8850: PUSH
8851: LD_INT 3
8853: PUSH
8854: LD_INT 4
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: IN
8863: IFFALSE 8885
// SetClass ( un , rand ( 1 , 4 ) ) ;
8865: LD_VAR 0 1
8869: PPUSH
8870: LD_INT 1
8872: PPUSH
8873: LD_INT 4
8875: PPUSH
8876: CALL_OW 12
8880: PPUSH
8881: CALL_OW 336
8885: GO 8832
8887: POP
8888: POP
// end ;
8889: PPOPN 1
8891: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
8892: LD_EXP 7
8896: PUSH
8897: LD_EXP 19
8901: AND
8902: IFFALSE 8981
8904: GO 8906
8906: DISABLE
8907: LD_INT 0
8909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
8910: LD_ADDR_VAR 0 1
8914: PUSH
8915: LD_INT 22
8917: PUSH
8918: LD_OWVAR 2
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: PUSH
8927: LD_INT 21
8929: PUSH
8930: LD_INT 3
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PPUSH
8941: CALL_OW 69
8945: ST_TO_ADDR
// if not tmp then
8946: LD_VAR 0 1
8950: NOT
8951: IFFALSE 8955
// exit ;
8953: GO 8981
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
8955: LD_VAR 0 1
8959: PUSH
8960: LD_INT 1
8962: PPUSH
8963: LD_VAR 0 1
8967: PPUSH
8968: CALL_OW 12
8972: ARRAY
8973: PPUSH
8974: LD_INT 100
8976: PPUSH
8977: CALL_OW 234
// end ;
8981: PPOPN 1
8983: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
8984: LD_EXP 7
8988: PUSH
8989: LD_EXP 21
8993: AND
8994: IFFALSE 9092
8996: GO 8998
8998: DISABLE
8999: LD_INT 0
9001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9002: LD_ADDR_VAR 0 1
9006: PUSH
9007: LD_INT 22
9009: PUSH
9010: LD_OWVAR 2
9014: PUSH
9015: EMPTY
9016: LIST
9017: LIST
9018: PUSH
9019: LD_INT 21
9021: PUSH
9022: LD_INT 1
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: PPUSH
9033: CALL_OW 69
9037: ST_TO_ADDR
// if not tmp then
9038: LD_VAR 0 1
9042: NOT
9043: IFFALSE 9047
// exit ;
9045: GO 9092
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
9047: LD_VAR 0 1
9051: PUSH
9052: LD_INT 1
9054: PPUSH
9055: LD_VAR 0 1
9059: PPUSH
9060: CALL_OW 12
9064: ARRAY
9065: PPUSH
9066: LD_INT 1
9068: PPUSH
9069: LD_INT 4
9071: PPUSH
9072: CALL_OW 12
9076: PPUSH
9077: LD_INT 3000
9079: PPUSH
9080: LD_INT 9000
9082: PPUSH
9083: CALL_OW 12
9087: PPUSH
9088: CALL_OW 492
// end ;
9092: PPOPN 1
9094: END
// every 0 0$1 trigger StreamModeActive and sDepot do
9095: LD_EXP 7
9099: PUSH
9100: LD_EXP 22
9104: AND
9105: IFFALSE 9125
9107: GO 9109
9109: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
9110: LD_INT 1
9112: PPUSH
9113: LD_OWVAR 2
9117: PPUSH
9118: LD_INT 0
9120: PPUSH
9121: CALL_OW 324
9125: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
9126: LD_EXP 7
9130: PUSH
9131: LD_EXP 23
9135: AND
9136: IFFALSE 9219
9138: GO 9140
9140: DISABLE
9141: LD_INT 0
9143: PPUSH
9144: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9145: LD_ADDR_VAR 0 2
9149: PUSH
9150: LD_INT 22
9152: PUSH
9153: LD_OWVAR 2
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: PUSH
9162: LD_INT 21
9164: PUSH
9165: LD_INT 3
9167: PUSH
9168: EMPTY
9169: LIST
9170: LIST
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: PPUSH
9176: CALL_OW 69
9180: ST_TO_ADDR
// if not tmp then
9181: LD_VAR 0 2
9185: NOT
9186: IFFALSE 9190
// exit ;
9188: GO 9219
// for i in tmp do
9190: LD_ADDR_VAR 0 1
9194: PUSH
9195: LD_VAR 0 2
9199: PUSH
9200: FOR_IN
9201: IFFALSE 9217
// SetBLevel ( i , 10 ) ;
9203: LD_VAR 0 1
9207: PPUSH
9208: LD_INT 10
9210: PPUSH
9211: CALL_OW 241
9215: GO 9200
9217: POP
9218: POP
// end ;
9219: PPOPN 2
9221: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
9222: LD_EXP 7
9226: PUSH
9227: LD_EXP 24
9231: AND
9232: IFFALSE 9343
9234: GO 9236
9236: DISABLE
9237: LD_INT 0
9239: PPUSH
9240: PPUSH
9241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
9242: LD_ADDR_VAR 0 3
9246: PUSH
9247: LD_INT 22
9249: PUSH
9250: LD_OWVAR 2
9254: PUSH
9255: EMPTY
9256: LIST
9257: LIST
9258: PUSH
9259: LD_INT 25
9261: PUSH
9262: LD_INT 1
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: PUSH
9269: EMPTY
9270: LIST
9271: LIST
9272: PPUSH
9273: CALL_OW 69
9277: ST_TO_ADDR
// if not tmp then
9278: LD_VAR 0 3
9282: NOT
9283: IFFALSE 9287
// exit ;
9285: GO 9343
// un := tmp [ rand ( 1 , tmp ) ] ;
9287: LD_ADDR_VAR 0 2
9291: PUSH
9292: LD_VAR 0 3
9296: PUSH
9297: LD_INT 1
9299: PPUSH
9300: LD_VAR 0 3
9304: PPUSH
9305: CALL_OW 12
9309: ARRAY
9310: ST_TO_ADDR
// if Crawls ( un ) then
9311: LD_VAR 0 2
9315: PPUSH
9316: CALL_OW 318
9320: IFFALSE 9331
// ComWalk ( un ) ;
9322: LD_VAR 0 2
9326: PPUSH
9327: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9331: LD_VAR 0 2
9335: PPUSH
9336: LD_INT 5
9338: PPUSH
9339: CALL_OW 336
// end ;
9343: PPOPN 3
9345: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9346: LD_EXP 7
9350: PUSH
9351: LD_EXP 25
9355: AND
9356: PUSH
9357: LD_OWVAR 67
9361: PUSH
9362: LD_INT 4
9364: LESS
9365: AND
9366: IFFALSE 9385
9368: GO 9370
9370: DISABLE
// begin Difficulty := Difficulty + 1 ;
9371: LD_ADDR_OWVAR 67
9375: PUSH
9376: LD_OWVAR 67
9380: PUSH
9381: LD_INT 1
9383: PLUS
9384: ST_TO_ADDR
// end ;
9385: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9386: LD_EXP 7
9390: PUSH
9391: LD_EXP 26
9395: AND
9396: IFFALSE 9499
9398: GO 9400
9400: DISABLE
9401: LD_INT 0
9403: PPUSH
// begin for i := 1 to 5 do
9404: LD_ADDR_VAR 0 1
9408: PUSH
9409: DOUBLE
9410: LD_INT 1
9412: DEC
9413: ST_TO_ADDR
9414: LD_INT 5
9416: PUSH
9417: FOR_TO
9418: IFFALSE 9497
// begin uc_nation := nation_nature ;
9420: LD_ADDR_OWVAR 21
9424: PUSH
9425: LD_INT 0
9427: ST_TO_ADDR
// uc_side := 0 ;
9428: LD_ADDR_OWVAR 20
9432: PUSH
9433: LD_INT 0
9435: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9436: LD_ADDR_OWVAR 29
9440: PUSH
9441: LD_INT 12
9443: PUSH
9444: LD_INT 12
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: ST_TO_ADDR
// hc_agressivity := 20 ;
9451: LD_ADDR_OWVAR 35
9455: PUSH
9456: LD_INT 20
9458: ST_TO_ADDR
// hc_class := class_tiger ;
9459: LD_ADDR_OWVAR 28
9463: PUSH
9464: LD_INT 14
9466: ST_TO_ADDR
// hc_gallery :=  ;
9467: LD_ADDR_OWVAR 33
9471: PUSH
9472: LD_STRING 
9474: ST_TO_ADDR
// hc_name :=  ;
9475: LD_ADDR_OWVAR 26
9479: PUSH
9480: LD_STRING 
9482: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9483: CALL_OW 44
9487: PPUSH
9488: LD_INT 0
9490: PPUSH
9491: CALL_OW 51
// end ;
9495: GO 9417
9497: POP
9498: POP
// end ;
9499: PPOPN 1
9501: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9502: LD_EXP 7
9506: PUSH
9507: LD_EXP 27
9511: AND
9512: IFFALSE 9521
9514: GO 9516
9516: DISABLE
// StreamSibBomb ;
9517: CALL 9522 0 0
9521: END
// export function StreamSibBomb ; var i , x , y ; begin
9522: LD_INT 0
9524: PPUSH
9525: PPUSH
9526: PPUSH
9527: PPUSH
// result := false ;
9528: LD_ADDR_VAR 0 1
9532: PUSH
9533: LD_INT 0
9535: ST_TO_ADDR
// for i := 1 to 16 do
9536: LD_ADDR_VAR 0 2
9540: PUSH
9541: DOUBLE
9542: LD_INT 1
9544: DEC
9545: ST_TO_ADDR
9546: LD_INT 16
9548: PUSH
9549: FOR_TO
9550: IFFALSE 9749
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9552: LD_ADDR_VAR 0 3
9556: PUSH
9557: LD_INT 10
9559: PUSH
9560: LD_INT 20
9562: PUSH
9563: LD_INT 30
9565: PUSH
9566: LD_INT 40
9568: PUSH
9569: LD_INT 50
9571: PUSH
9572: LD_INT 60
9574: PUSH
9575: LD_INT 70
9577: PUSH
9578: LD_INT 80
9580: PUSH
9581: LD_INT 90
9583: PUSH
9584: LD_INT 100
9586: PUSH
9587: LD_INT 110
9589: PUSH
9590: LD_INT 120
9592: PUSH
9593: LD_INT 130
9595: PUSH
9596: LD_INT 140
9598: PUSH
9599: LD_INT 150
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: PUSH
9619: LD_INT 1
9621: PPUSH
9622: LD_INT 15
9624: PPUSH
9625: CALL_OW 12
9629: ARRAY
9630: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9631: LD_ADDR_VAR 0 4
9635: PUSH
9636: LD_INT 10
9638: PUSH
9639: LD_INT 20
9641: PUSH
9642: LD_INT 30
9644: PUSH
9645: LD_INT 40
9647: PUSH
9648: LD_INT 50
9650: PUSH
9651: LD_INT 60
9653: PUSH
9654: LD_INT 70
9656: PUSH
9657: LD_INT 80
9659: PUSH
9660: LD_INT 90
9662: PUSH
9663: LD_INT 100
9665: PUSH
9666: LD_INT 110
9668: PUSH
9669: LD_INT 120
9671: PUSH
9672: LD_INT 130
9674: PUSH
9675: LD_INT 140
9677: PUSH
9678: LD_INT 150
9680: PUSH
9681: EMPTY
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: PUSH
9698: LD_INT 1
9700: PPUSH
9701: LD_INT 15
9703: PPUSH
9704: CALL_OW 12
9708: ARRAY
9709: ST_TO_ADDR
// if ValidHex ( x , y ) then
9710: LD_VAR 0 3
9714: PPUSH
9715: LD_VAR 0 4
9719: PPUSH
9720: CALL_OW 488
9724: IFFALSE 9747
// begin result := [ x , y ] ;
9726: LD_ADDR_VAR 0 1
9730: PUSH
9731: LD_VAR 0 3
9735: PUSH
9736: LD_VAR 0 4
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: ST_TO_ADDR
// break ;
9745: GO 9749
// end ; end ;
9747: GO 9549
9749: POP
9750: POP
// if result then
9751: LD_VAR 0 1
9755: IFFALSE 9815
// begin ToLua ( playSibBomb() ) ;
9757: LD_STRING playSibBomb()
9759: PPUSH
9760: CALL_OW 559
// wait ( 0 0$14 ) ;
9764: LD_INT 490
9766: PPUSH
9767: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9771: LD_VAR 0 1
9775: PUSH
9776: LD_INT 1
9778: ARRAY
9779: PPUSH
9780: LD_VAR 0 1
9784: PUSH
9785: LD_INT 2
9787: ARRAY
9788: PPUSH
9789: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9793: LD_VAR 0 1
9797: PUSH
9798: LD_INT 1
9800: ARRAY
9801: PPUSH
9802: LD_VAR 0 1
9806: PUSH
9807: LD_INT 2
9809: ARRAY
9810: PPUSH
9811: CALL_OW 429
// end ; end ;
9815: LD_VAR 0 1
9819: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9820: LD_EXP 7
9824: PUSH
9825: LD_EXP 29
9829: AND
9830: IFFALSE 9842
9832: GO 9834
9834: DISABLE
// YouLost (  ) ;
9835: LD_STRING 
9837: PPUSH
9838: CALL_OW 104
9842: END
// every 0 0$1 trigger StreamModeActive and sFog do
9843: LD_EXP 7
9847: PUSH
9848: LD_EXP 28
9852: AND
9853: IFFALSE 9867
9855: GO 9857
9857: DISABLE
// FogOff ( your_side ) ;
9858: LD_OWVAR 2
9862: PPUSH
9863: CALL_OW 344
9867: END
// every 0 0$1 trigger StreamModeActive and sSun do
9868: LD_EXP 7
9872: PUSH
9873: LD_EXP 30
9877: AND
9878: IFFALSE 9906
9880: GO 9882
9882: DISABLE
// begin solar_recharge_percent := 0 ;
9883: LD_ADDR_OWVAR 79
9887: PUSH
9888: LD_INT 0
9890: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9891: LD_INT 10500
9893: PPUSH
9894: CALL_OW 67
// solar_recharge_percent := 100 ;
9898: LD_ADDR_OWVAR 79
9902: PUSH
9903: LD_INT 100
9905: ST_TO_ADDR
// end ;
9906: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
9907: LD_EXP 7
9911: PUSH
9912: LD_EXP 31
9916: AND
9917: IFFALSE 10156
9919: GO 9921
9921: DISABLE
9922: LD_INT 0
9924: PPUSH
9925: PPUSH
9926: PPUSH
// begin tmp := [ ] ;
9927: LD_ADDR_VAR 0 3
9931: PUSH
9932: EMPTY
9933: ST_TO_ADDR
// for i := 1 to 6 do
9934: LD_ADDR_VAR 0 1
9938: PUSH
9939: DOUBLE
9940: LD_INT 1
9942: DEC
9943: ST_TO_ADDR
9944: LD_INT 6
9946: PUSH
9947: FOR_TO
9948: IFFALSE 10053
// begin uc_nation := nation_nature ;
9950: LD_ADDR_OWVAR 21
9954: PUSH
9955: LD_INT 0
9957: ST_TO_ADDR
// uc_side := 0 ;
9958: LD_ADDR_OWVAR 20
9962: PUSH
9963: LD_INT 0
9965: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9966: LD_ADDR_OWVAR 29
9970: PUSH
9971: LD_INT 12
9973: PUSH
9974: LD_INT 12
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: ST_TO_ADDR
// hc_agressivity := 20 ;
9981: LD_ADDR_OWVAR 35
9985: PUSH
9986: LD_INT 20
9988: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
9989: LD_ADDR_OWVAR 28
9993: PUSH
9994: LD_INT 17
9996: ST_TO_ADDR
// hc_gallery :=  ;
9997: LD_ADDR_OWVAR 33
10001: PUSH
10002: LD_STRING 
10004: ST_TO_ADDR
// hc_name :=  ;
10005: LD_ADDR_OWVAR 26
10009: PUSH
10010: LD_STRING 
10012: ST_TO_ADDR
// un := CreateHuman ;
10013: LD_ADDR_VAR 0 2
10017: PUSH
10018: CALL_OW 44
10022: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
10023: LD_VAR 0 2
10027: PPUSH
10028: LD_INT 1
10030: PPUSH
10031: CALL_OW 51
// tmp := tmp ^ un ;
10035: LD_ADDR_VAR 0 3
10039: PUSH
10040: LD_VAR 0 3
10044: PUSH
10045: LD_VAR 0 2
10049: ADD
10050: ST_TO_ADDR
// end ;
10051: GO 9947
10053: POP
10054: POP
// repeat wait ( 0 0$1 ) ;
10055: LD_INT 35
10057: PPUSH
10058: CALL_OW 67
// for un in tmp do
10062: LD_ADDR_VAR 0 2
10066: PUSH
10067: LD_VAR 0 3
10071: PUSH
10072: FOR_IN
10073: IFFALSE 10147
// begin if IsDead ( un ) then
10075: LD_VAR 0 2
10079: PPUSH
10080: CALL_OW 301
10084: IFFALSE 10104
// begin tmp := tmp diff un ;
10086: LD_ADDR_VAR 0 3
10090: PUSH
10091: LD_VAR 0 3
10095: PUSH
10096: LD_VAR 0 2
10100: DIFF
10101: ST_TO_ADDR
// continue ;
10102: GO 10072
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
10104: LD_VAR 0 2
10108: PPUSH
10109: LD_INT 3
10111: PUSH
10112: LD_INT 22
10114: PUSH
10115: LD_INT 0
10117: PUSH
10118: EMPTY
10119: LIST
10120: LIST
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: PPUSH
10126: CALL_OW 69
10130: PPUSH
10131: LD_VAR 0 2
10135: PPUSH
10136: CALL_OW 74
10140: PPUSH
10141: CALL_OW 115
// end ;
10145: GO 10072
10147: POP
10148: POP
// until not tmp ;
10149: LD_VAR 0 3
10153: NOT
10154: IFFALSE 10055
// end ;
10156: PPOPN 3
10158: END
// every 0 0$1 trigger StreamModeActive and sTroll do
10159: LD_EXP 7
10163: PUSH
10164: LD_EXP 32
10168: AND
10169: IFFALSE 10223
10171: GO 10173
10173: DISABLE
// begin ToLua ( displayTroll(); ) ;
10174: LD_STRING displayTroll();
10176: PPUSH
10177: CALL_OW 559
// wait ( 3 3$00 ) ;
10181: LD_INT 6300
10183: PPUSH
10184: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10188: LD_STRING hideTroll();
10190: PPUSH
10191: CALL_OW 559
// wait ( 1 1$00 ) ;
10195: LD_INT 2100
10197: PPUSH
10198: CALL_OW 67
// ToLua ( displayTroll(); ) ;
10202: LD_STRING displayTroll();
10204: PPUSH
10205: CALL_OW 559
// wait ( 1 1$00 ) ;
10209: LD_INT 2100
10211: PPUSH
10212: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10216: LD_STRING hideTroll();
10218: PPUSH
10219: CALL_OW 559
// end ;
10223: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
10224: LD_EXP 7
10228: PUSH
10229: LD_EXP 33
10233: AND
10234: IFFALSE 10297
10236: GO 10238
10238: DISABLE
10239: LD_INT 0
10241: PPUSH
// begin p := 0 ;
10242: LD_ADDR_VAR 0 1
10246: PUSH
10247: LD_INT 0
10249: ST_TO_ADDR
// repeat game_speed := 1 ;
10250: LD_ADDR_OWVAR 65
10254: PUSH
10255: LD_INT 1
10257: ST_TO_ADDR
// wait ( 0 0$1 ) ;
10258: LD_INT 35
10260: PPUSH
10261: CALL_OW 67
// p := p + 1 ;
10265: LD_ADDR_VAR 0 1
10269: PUSH
10270: LD_VAR 0 1
10274: PUSH
10275: LD_INT 1
10277: PLUS
10278: ST_TO_ADDR
// until p >= 60 ;
10279: LD_VAR 0 1
10283: PUSH
10284: LD_INT 60
10286: GREATEREQUAL
10287: IFFALSE 10250
// game_speed := 4 ;
10289: LD_ADDR_OWVAR 65
10293: PUSH
10294: LD_INT 4
10296: ST_TO_ADDR
// end ;
10297: PPOPN 1
10299: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
10300: LD_EXP 7
10304: PUSH
10305: LD_EXP 34
10309: AND
10310: IFFALSE 10456
10312: GO 10314
10314: DISABLE
10315: LD_INT 0
10317: PPUSH
10318: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10319: LD_ADDR_VAR 0 1
10323: PUSH
10324: LD_INT 22
10326: PUSH
10327: LD_OWVAR 2
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: PUSH
10336: LD_INT 2
10338: PUSH
10339: LD_INT 30
10341: PUSH
10342: LD_INT 0
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: PUSH
10349: LD_INT 30
10351: PUSH
10352: LD_INT 1
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: PUSH
10359: EMPTY
10360: LIST
10361: LIST
10362: LIST
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PPUSH
10368: CALL_OW 69
10372: ST_TO_ADDR
// if not depot then
10373: LD_VAR 0 1
10377: NOT
10378: IFFALSE 10382
// exit ;
10380: GO 10456
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10382: LD_ADDR_VAR 0 2
10386: PUSH
10387: LD_VAR 0 1
10391: PUSH
10392: LD_INT 1
10394: PPUSH
10395: LD_VAR 0 1
10399: PPUSH
10400: CALL_OW 12
10404: ARRAY
10405: PPUSH
10406: CALL_OW 274
10410: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10411: LD_VAR 0 2
10415: PPUSH
10416: LD_INT 1
10418: PPUSH
10419: LD_INT 0
10421: PPUSH
10422: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10426: LD_VAR 0 2
10430: PPUSH
10431: LD_INT 2
10433: PPUSH
10434: LD_INT 0
10436: PPUSH
10437: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10441: LD_VAR 0 2
10445: PPUSH
10446: LD_INT 3
10448: PPUSH
10449: LD_INT 0
10451: PPUSH
10452: CALL_OW 277
// end ;
10456: PPOPN 2
10458: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10459: LD_EXP 7
10463: PUSH
10464: LD_EXP 35
10468: AND
10469: IFFALSE 10566
10471: GO 10473
10473: DISABLE
10474: LD_INT 0
10476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10477: LD_ADDR_VAR 0 1
10481: PUSH
10482: LD_INT 22
10484: PUSH
10485: LD_OWVAR 2
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: LD_INT 21
10496: PUSH
10497: LD_INT 1
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PUSH
10504: LD_INT 3
10506: PUSH
10507: LD_INT 23
10509: PUSH
10510: LD_INT 0
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: LIST
10525: PPUSH
10526: CALL_OW 69
10530: ST_TO_ADDR
// if not tmp then
10531: LD_VAR 0 1
10535: NOT
10536: IFFALSE 10540
// exit ;
10538: GO 10566
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10540: LD_VAR 0 1
10544: PUSH
10545: LD_INT 1
10547: PPUSH
10548: LD_VAR 0 1
10552: PPUSH
10553: CALL_OW 12
10557: ARRAY
10558: PPUSH
10559: LD_INT 200
10561: PPUSH
10562: CALL_OW 234
// end ;
10566: PPOPN 1
10568: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10569: LD_EXP 7
10573: PUSH
10574: LD_EXP 36
10578: AND
10579: IFFALSE 10658
10581: GO 10583
10583: DISABLE
10584: LD_INT 0
10586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10587: LD_ADDR_VAR 0 1
10591: PUSH
10592: LD_INT 22
10594: PUSH
10595: LD_OWVAR 2
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PUSH
10604: LD_INT 21
10606: PUSH
10607: LD_INT 2
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: PPUSH
10618: CALL_OW 69
10622: ST_TO_ADDR
// if not tmp then
10623: LD_VAR 0 1
10627: NOT
10628: IFFALSE 10632
// exit ;
10630: GO 10658
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10632: LD_VAR 0 1
10636: PUSH
10637: LD_INT 1
10639: PPUSH
10640: LD_VAR 0 1
10644: PPUSH
10645: CALL_OW 12
10649: ARRAY
10650: PPUSH
10651: LD_INT 60
10653: PPUSH
10654: CALL_OW 234
// end ;
10658: PPOPN 1
10660: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10661: LD_EXP 7
10665: PUSH
10666: LD_EXP 37
10670: AND
10671: IFFALSE 10770
10673: GO 10675
10675: DISABLE
10676: LD_INT 0
10678: PPUSH
10679: PPUSH
// begin enable ;
10680: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10681: LD_ADDR_VAR 0 1
10685: PUSH
10686: LD_INT 22
10688: PUSH
10689: LD_OWVAR 2
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PUSH
10698: LD_INT 61
10700: PUSH
10701: EMPTY
10702: LIST
10703: PUSH
10704: LD_INT 33
10706: PUSH
10707: LD_INT 2
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: LIST
10718: PPUSH
10719: CALL_OW 69
10723: ST_TO_ADDR
// if not tmp then
10724: LD_VAR 0 1
10728: NOT
10729: IFFALSE 10733
// exit ;
10731: GO 10770
// for i in tmp do
10733: LD_ADDR_VAR 0 2
10737: PUSH
10738: LD_VAR 0 1
10742: PUSH
10743: FOR_IN
10744: IFFALSE 10768
// if IsControledBy ( i ) then
10746: LD_VAR 0 2
10750: PPUSH
10751: CALL_OW 312
10755: IFFALSE 10766
// ComUnlink ( i ) ;
10757: LD_VAR 0 2
10761: PPUSH
10762: CALL_OW 136
10766: GO 10743
10768: POP
10769: POP
// end ;
10770: PPOPN 2
10772: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10773: LD_EXP 7
10777: PUSH
10778: LD_EXP 38
10782: AND
10783: IFFALSE 10923
10785: GO 10787
10787: DISABLE
10788: LD_INT 0
10790: PPUSH
10791: PPUSH
// begin ToLua ( displayPowell(); ) ;
10792: LD_STRING displayPowell();
10794: PPUSH
10795: CALL_OW 559
// uc_side := 0 ;
10799: LD_ADDR_OWVAR 20
10803: PUSH
10804: LD_INT 0
10806: ST_TO_ADDR
// uc_nation := 2 ;
10807: LD_ADDR_OWVAR 21
10811: PUSH
10812: LD_INT 2
10814: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10815: LD_ADDR_OWVAR 37
10819: PUSH
10820: LD_INT 14
10822: ST_TO_ADDR
// vc_engine := engine_siberite ;
10823: LD_ADDR_OWVAR 39
10827: PUSH
10828: LD_INT 3
10830: ST_TO_ADDR
// vc_control := control_apeman ;
10831: LD_ADDR_OWVAR 38
10835: PUSH
10836: LD_INT 5
10838: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10839: LD_ADDR_OWVAR 40
10843: PUSH
10844: LD_INT 29
10846: ST_TO_ADDR
// un := CreateVehicle ;
10847: LD_ADDR_VAR 0 2
10851: PUSH
10852: CALL_OW 45
10856: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
10857: LD_VAR 0 2
10861: PPUSH
10862: LD_INT 1
10864: PPUSH
10865: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
10869: LD_INT 35
10871: PPUSH
10872: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
10876: LD_VAR 0 2
10880: PPUSH
10881: LD_INT 22
10883: PUSH
10884: LD_OWVAR 2
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PPUSH
10893: CALL_OW 69
10897: PPUSH
10898: LD_VAR 0 2
10902: PPUSH
10903: CALL_OW 74
10907: PPUSH
10908: CALL_OW 115
// until IsDead ( un ) ;
10912: LD_VAR 0 2
10916: PPUSH
10917: CALL_OW 301
10921: IFFALSE 10869
// end ;
10923: PPOPN 2
10925: END
// every 0 0$1 trigger StreamModeActive and sStu do
10926: LD_EXP 7
10930: PUSH
10931: LD_EXP 46
10935: AND
10936: IFFALSE 10952
10938: GO 10940
10940: DISABLE
// begin ToLua ( displayStucuk(); ) ;
10941: LD_STRING displayStucuk();
10943: PPUSH
10944: CALL_OW 559
// ResetFog ;
10948: CALL_OW 335
// end ;
10952: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
10953: LD_EXP 7
10957: PUSH
10958: LD_EXP 39
10962: AND
10963: IFFALSE 11104
10965: GO 10967
10967: DISABLE
10968: LD_INT 0
10970: PPUSH
10971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10972: LD_ADDR_VAR 0 2
10976: PUSH
10977: LD_INT 22
10979: PUSH
10980: LD_OWVAR 2
10984: PUSH
10985: EMPTY
10986: LIST
10987: LIST
10988: PUSH
10989: LD_INT 21
10991: PUSH
10992: LD_INT 1
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: PPUSH
11003: CALL_OW 69
11007: ST_TO_ADDR
// if not tmp then
11008: LD_VAR 0 2
11012: NOT
11013: IFFALSE 11017
// exit ;
11015: GO 11104
// un := tmp [ rand ( 1 , tmp ) ] ;
11017: LD_ADDR_VAR 0 1
11021: PUSH
11022: LD_VAR 0 2
11026: PUSH
11027: LD_INT 1
11029: PPUSH
11030: LD_VAR 0 2
11034: PPUSH
11035: CALL_OW 12
11039: ARRAY
11040: ST_TO_ADDR
// SetSide ( un , 0 ) ;
11041: LD_VAR 0 1
11045: PPUSH
11046: LD_INT 0
11048: PPUSH
11049: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
11053: LD_VAR 0 1
11057: PPUSH
11058: LD_OWVAR 3
11062: PUSH
11063: LD_VAR 0 1
11067: DIFF
11068: PPUSH
11069: LD_VAR 0 1
11073: PPUSH
11074: CALL_OW 74
11078: PPUSH
11079: CALL_OW 115
// wait ( 0 0$20 ) ;
11083: LD_INT 700
11085: PPUSH
11086: CALL_OW 67
// SetSide ( un , your_side ) ;
11090: LD_VAR 0 1
11094: PPUSH
11095: LD_OWVAR 2
11099: PPUSH
11100: CALL_OW 235
// end ;
11104: PPOPN 2
11106: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
11107: LD_EXP 7
11111: PUSH
11112: LD_EXP 40
11116: AND
11117: IFFALSE 11223
11119: GO 11121
11121: DISABLE
11122: LD_INT 0
11124: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11125: LD_ADDR_VAR 0 1
11129: PUSH
11130: LD_INT 22
11132: PUSH
11133: LD_OWVAR 2
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: PUSH
11142: LD_INT 2
11144: PUSH
11145: LD_INT 30
11147: PUSH
11148: LD_INT 0
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PUSH
11155: LD_INT 30
11157: PUSH
11158: LD_INT 1
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: LIST
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PPUSH
11174: CALL_OW 69
11178: ST_TO_ADDR
// if not depot then
11179: LD_VAR 0 1
11183: NOT
11184: IFFALSE 11188
// exit ;
11186: GO 11223
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
11188: LD_VAR 0 1
11192: PUSH
11193: LD_INT 1
11195: ARRAY
11196: PPUSH
11197: CALL_OW 250
11201: PPUSH
11202: LD_VAR 0 1
11206: PUSH
11207: LD_INT 1
11209: ARRAY
11210: PPUSH
11211: CALL_OW 251
11215: PPUSH
11216: LD_INT 70
11218: PPUSH
11219: CALL_OW 495
// end ;
11223: PPOPN 1
11225: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
11226: LD_EXP 7
11230: PUSH
11231: LD_EXP 41
11235: AND
11236: IFFALSE 11447
11238: GO 11240
11240: DISABLE
11241: LD_INT 0
11243: PPUSH
11244: PPUSH
11245: PPUSH
11246: PPUSH
11247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11248: LD_ADDR_VAR 0 5
11252: PUSH
11253: LD_INT 22
11255: PUSH
11256: LD_OWVAR 2
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PUSH
11265: LD_INT 21
11267: PUSH
11268: LD_INT 1
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: PPUSH
11279: CALL_OW 69
11283: ST_TO_ADDR
// if not tmp then
11284: LD_VAR 0 5
11288: NOT
11289: IFFALSE 11293
// exit ;
11291: GO 11447
// for i in tmp do
11293: LD_ADDR_VAR 0 1
11297: PUSH
11298: LD_VAR 0 5
11302: PUSH
11303: FOR_IN
11304: IFFALSE 11445
// begin d := rand ( 0 , 5 ) ;
11306: LD_ADDR_VAR 0 4
11310: PUSH
11311: LD_INT 0
11313: PPUSH
11314: LD_INT 5
11316: PPUSH
11317: CALL_OW 12
11321: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
11322: LD_ADDR_VAR 0 2
11326: PUSH
11327: LD_VAR 0 1
11331: PPUSH
11332: CALL_OW 250
11336: PPUSH
11337: LD_VAR 0 4
11341: PPUSH
11342: LD_INT 3
11344: PPUSH
11345: LD_INT 12
11347: PPUSH
11348: CALL_OW 12
11352: PPUSH
11353: CALL_OW 272
11357: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11358: LD_ADDR_VAR 0 3
11362: PUSH
11363: LD_VAR 0 1
11367: PPUSH
11368: CALL_OW 251
11372: PPUSH
11373: LD_VAR 0 4
11377: PPUSH
11378: LD_INT 3
11380: PPUSH
11381: LD_INT 12
11383: PPUSH
11384: CALL_OW 12
11388: PPUSH
11389: CALL_OW 273
11393: ST_TO_ADDR
// if ValidHex ( x , y ) then
11394: LD_VAR 0 2
11398: PPUSH
11399: LD_VAR 0 3
11403: PPUSH
11404: CALL_OW 488
11408: IFFALSE 11443
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11410: LD_VAR 0 1
11414: PPUSH
11415: LD_VAR 0 2
11419: PPUSH
11420: LD_VAR 0 3
11424: PPUSH
11425: LD_INT 3
11427: PPUSH
11428: LD_INT 6
11430: PPUSH
11431: CALL_OW 12
11435: PPUSH
11436: LD_INT 1
11438: PPUSH
11439: CALL_OW 483
// end ;
11443: GO 11303
11445: POP
11446: POP
// end ;
11447: PPOPN 5
11449: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11450: LD_EXP 7
11454: PUSH
11455: LD_EXP 42
11459: AND
11460: IFFALSE 11554
11462: GO 11464
11464: DISABLE
11465: LD_INT 0
11467: PPUSH
11468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11469: LD_ADDR_VAR 0 2
11473: PUSH
11474: LD_INT 22
11476: PUSH
11477: LD_OWVAR 2
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: PUSH
11486: LD_INT 32
11488: PUSH
11489: LD_INT 1
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PUSH
11496: LD_INT 21
11498: PUSH
11499: LD_INT 2
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: LIST
11510: PPUSH
11511: CALL_OW 69
11515: ST_TO_ADDR
// if not tmp then
11516: LD_VAR 0 2
11520: NOT
11521: IFFALSE 11525
// exit ;
11523: GO 11554
// for i in tmp do
11525: LD_ADDR_VAR 0 1
11529: PUSH
11530: LD_VAR 0 2
11534: PUSH
11535: FOR_IN
11536: IFFALSE 11552
// SetFuel ( i , 0 ) ;
11538: LD_VAR 0 1
11542: PPUSH
11543: LD_INT 0
11545: PPUSH
11546: CALL_OW 240
11550: GO 11535
11552: POP
11553: POP
// end ;
11554: PPOPN 2
11556: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11557: LD_EXP 7
11561: PUSH
11562: LD_EXP 43
11566: AND
11567: IFFALSE 11633
11569: GO 11571
11571: DISABLE
11572: LD_INT 0
11574: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11575: LD_ADDR_VAR 0 1
11579: PUSH
11580: LD_INT 22
11582: PUSH
11583: LD_OWVAR 2
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: PUSH
11592: LD_INT 30
11594: PUSH
11595: LD_INT 29
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: PUSH
11602: EMPTY
11603: LIST
11604: LIST
11605: PPUSH
11606: CALL_OW 69
11610: ST_TO_ADDR
// if not tmp then
11611: LD_VAR 0 1
11615: NOT
11616: IFFALSE 11620
// exit ;
11618: GO 11633
// DestroyUnit ( tmp [ 1 ] ) ;
11620: LD_VAR 0 1
11624: PUSH
11625: LD_INT 1
11627: ARRAY
11628: PPUSH
11629: CALL_OW 65
// end ;
11633: PPOPN 1
11635: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11636: LD_EXP 7
11640: PUSH
11641: LD_EXP 45
11645: AND
11646: IFFALSE 11775
11648: GO 11650
11650: DISABLE
11651: LD_INT 0
11653: PPUSH
// begin uc_side := 0 ;
11654: LD_ADDR_OWVAR 20
11658: PUSH
11659: LD_INT 0
11661: ST_TO_ADDR
// uc_nation := nation_arabian ;
11662: LD_ADDR_OWVAR 21
11666: PUSH
11667: LD_INT 2
11669: ST_TO_ADDR
// hc_gallery :=  ;
11670: LD_ADDR_OWVAR 33
11674: PUSH
11675: LD_STRING 
11677: ST_TO_ADDR
// hc_name :=  ;
11678: LD_ADDR_OWVAR 26
11682: PUSH
11683: LD_STRING 
11685: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11686: LD_INT 1
11688: PPUSH
11689: LD_INT 11
11691: PPUSH
11692: LD_INT 10
11694: PPUSH
11695: CALL_OW 380
// un := CreateHuman ;
11699: LD_ADDR_VAR 0 1
11703: PUSH
11704: CALL_OW 44
11708: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11709: LD_VAR 0 1
11713: PPUSH
11714: LD_INT 1
11716: PPUSH
11717: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11721: LD_INT 35
11723: PPUSH
11724: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11728: LD_VAR 0 1
11732: PPUSH
11733: LD_INT 22
11735: PUSH
11736: LD_OWVAR 2
11740: PUSH
11741: EMPTY
11742: LIST
11743: LIST
11744: PPUSH
11745: CALL_OW 69
11749: PPUSH
11750: LD_VAR 0 1
11754: PPUSH
11755: CALL_OW 74
11759: PPUSH
11760: CALL_OW 115
// until IsDead ( un ) ;
11764: LD_VAR 0 1
11768: PPUSH
11769: CALL_OW 301
11773: IFFALSE 11721
// end ;
11775: PPOPN 1
11777: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11778: LD_EXP 7
11782: PUSH
11783: LD_EXP 47
11787: AND
11788: IFFALSE 11800
11790: GO 11792
11792: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11793: LD_STRING earthquake(getX(game), 0, 32)
11795: PPUSH
11796: CALL_OW 559
11800: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11801: LD_EXP 7
11805: PUSH
11806: LD_EXP 48
11810: AND
11811: IFFALSE 11902
11813: GO 11815
11815: DISABLE
11816: LD_INT 0
11818: PPUSH
// begin enable ;
11819: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11820: LD_ADDR_VAR 0 1
11824: PUSH
11825: LD_INT 22
11827: PUSH
11828: LD_OWVAR 2
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: PUSH
11837: LD_INT 21
11839: PUSH
11840: LD_INT 2
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: PUSH
11847: LD_INT 33
11849: PUSH
11850: LD_INT 3
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: LIST
11861: PPUSH
11862: CALL_OW 69
11866: ST_TO_ADDR
// if not tmp then
11867: LD_VAR 0 1
11871: NOT
11872: IFFALSE 11876
// exit ;
11874: GO 11902
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
11876: LD_VAR 0 1
11880: PUSH
11881: LD_INT 1
11883: PPUSH
11884: LD_VAR 0 1
11888: PPUSH
11889: CALL_OW 12
11893: ARRAY
11894: PPUSH
11895: LD_INT 1
11897: PPUSH
11898: CALL_OW 234
// end ;
11902: PPOPN 1
11904: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
11905: LD_EXP 7
11909: PUSH
11910: LD_EXP 49
11914: AND
11915: IFFALSE 12056
11917: GO 11919
11919: DISABLE
11920: LD_INT 0
11922: PPUSH
11923: PPUSH
11924: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11925: LD_ADDR_VAR 0 3
11929: PUSH
11930: LD_INT 22
11932: PUSH
11933: LD_OWVAR 2
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: PUSH
11942: LD_INT 25
11944: PUSH
11945: LD_INT 1
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PPUSH
11956: CALL_OW 69
11960: ST_TO_ADDR
// if not tmp then
11961: LD_VAR 0 3
11965: NOT
11966: IFFALSE 11970
// exit ;
11968: GO 12056
// un := tmp [ rand ( 1 , tmp ) ] ;
11970: LD_ADDR_VAR 0 2
11974: PUSH
11975: LD_VAR 0 3
11979: PUSH
11980: LD_INT 1
11982: PPUSH
11983: LD_VAR 0 3
11987: PPUSH
11988: CALL_OW 12
11992: ARRAY
11993: ST_TO_ADDR
// if Crawls ( un ) then
11994: LD_VAR 0 2
11998: PPUSH
11999: CALL_OW 318
12003: IFFALSE 12014
// ComWalk ( un ) ;
12005: LD_VAR 0 2
12009: PPUSH
12010: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
12014: LD_VAR 0 2
12018: PPUSH
12019: LD_INT 9
12021: PPUSH
12022: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
12026: LD_INT 28
12028: PPUSH
12029: LD_OWVAR 2
12033: PPUSH
12034: LD_INT 2
12036: PPUSH
12037: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
12041: LD_INT 29
12043: PPUSH
12044: LD_OWVAR 2
12048: PPUSH
12049: LD_INT 2
12051: PPUSH
12052: CALL_OW 322
// end ;
12056: PPOPN 3
12058: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
12059: LD_EXP 7
12063: PUSH
12064: LD_EXP 50
12068: AND
12069: IFFALSE 12180
12071: GO 12073
12073: DISABLE
12074: LD_INT 0
12076: PPUSH
12077: PPUSH
12078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12079: LD_ADDR_VAR 0 3
12083: PUSH
12084: LD_INT 22
12086: PUSH
12087: LD_OWVAR 2
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PUSH
12096: LD_INT 25
12098: PUSH
12099: LD_INT 1
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PPUSH
12110: CALL_OW 69
12114: ST_TO_ADDR
// if not tmp then
12115: LD_VAR 0 3
12119: NOT
12120: IFFALSE 12124
// exit ;
12122: GO 12180
// un := tmp [ rand ( 1 , tmp ) ] ;
12124: LD_ADDR_VAR 0 2
12128: PUSH
12129: LD_VAR 0 3
12133: PUSH
12134: LD_INT 1
12136: PPUSH
12137: LD_VAR 0 3
12141: PPUSH
12142: CALL_OW 12
12146: ARRAY
12147: ST_TO_ADDR
// if Crawls ( un ) then
12148: LD_VAR 0 2
12152: PPUSH
12153: CALL_OW 318
12157: IFFALSE 12168
// ComWalk ( un ) ;
12159: LD_VAR 0 2
12163: PPUSH
12164: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12168: LD_VAR 0 2
12172: PPUSH
12173: LD_INT 8
12175: PPUSH
12176: CALL_OW 336
// end ;
12180: PPOPN 3
12182: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
12183: LD_EXP 7
12187: PUSH
12188: LD_EXP 51
12192: AND
12193: IFFALSE 12337
12195: GO 12197
12197: DISABLE
12198: LD_INT 0
12200: PPUSH
12201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
12202: LD_ADDR_VAR 0 2
12206: PUSH
12207: LD_INT 22
12209: PUSH
12210: LD_OWVAR 2
12214: PUSH
12215: EMPTY
12216: LIST
12217: LIST
12218: PUSH
12219: LD_INT 21
12221: PUSH
12222: LD_INT 2
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: PUSH
12229: LD_INT 2
12231: PUSH
12232: LD_INT 34
12234: PUSH
12235: LD_INT 12
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: PUSH
12242: LD_INT 34
12244: PUSH
12245: LD_INT 51
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: PUSH
12252: LD_INT 34
12254: PUSH
12255: LD_INT 32
12257: PUSH
12258: EMPTY
12259: LIST
12260: LIST
12261: PUSH
12262: EMPTY
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: LIST
12272: PPUSH
12273: CALL_OW 69
12277: ST_TO_ADDR
// if not tmp then
12278: LD_VAR 0 2
12282: NOT
12283: IFFALSE 12287
// exit ;
12285: GO 12337
// for i in tmp do
12287: LD_ADDR_VAR 0 1
12291: PUSH
12292: LD_VAR 0 2
12296: PUSH
12297: FOR_IN
12298: IFFALSE 12335
// if GetCargo ( i , mat_artifact ) = 0 then
12300: LD_VAR 0 1
12304: PPUSH
12305: LD_INT 4
12307: PPUSH
12308: CALL_OW 289
12312: PUSH
12313: LD_INT 0
12315: EQUAL
12316: IFFALSE 12333
// SetCargo ( i , mat_siberit , 100 ) ;
12318: LD_VAR 0 1
12322: PPUSH
12323: LD_INT 3
12325: PPUSH
12326: LD_INT 100
12328: PPUSH
12329: CALL_OW 290
12333: GO 12297
12335: POP
12336: POP
// end ;
12337: PPOPN 2
12339: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12340: LD_EXP 7
12344: PUSH
12345: LD_EXP 52
12349: AND
12350: IFFALSE 12533
12352: GO 12354
12354: DISABLE
12355: LD_INT 0
12357: PPUSH
12358: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12359: LD_ADDR_VAR 0 2
12363: PUSH
12364: LD_INT 22
12366: PUSH
12367: LD_OWVAR 2
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: PPUSH
12376: CALL_OW 69
12380: ST_TO_ADDR
// if not tmp then
12381: LD_VAR 0 2
12385: NOT
12386: IFFALSE 12390
// exit ;
12388: GO 12533
// for i := 1 to 2 do
12390: LD_ADDR_VAR 0 1
12394: PUSH
12395: DOUBLE
12396: LD_INT 1
12398: DEC
12399: ST_TO_ADDR
12400: LD_INT 2
12402: PUSH
12403: FOR_TO
12404: IFFALSE 12531
// begin uc_side := your_side ;
12406: LD_ADDR_OWVAR 20
12410: PUSH
12411: LD_OWVAR 2
12415: ST_TO_ADDR
// uc_nation := nation_american ;
12416: LD_ADDR_OWVAR 21
12420: PUSH
12421: LD_INT 1
12423: ST_TO_ADDR
// vc_chassis := us_morphling ;
12424: LD_ADDR_OWVAR 37
12428: PUSH
12429: LD_INT 5
12431: ST_TO_ADDR
// vc_engine := engine_siberite ;
12432: LD_ADDR_OWVAR 39
12436: PUSH
12437: LD_INT 3
12439: ST_TO_ADDR
// vc_control := control_computer ;
12440: LD_ADDR_OWVAR 38
12444: PUSH
12445: LD_INT 3
12447: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12448: LD_ADDR_OWVAR 40
12452: PUSH
12453: LD_INT 10
12455: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12456: LD_VAR 0 2
12460: PUSH
12461: LD_INT 1
12463: ARRAY
12464: PPUSH
12465: CALL_OW 310
12469: NOT
12470: IFFALSE 12517
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12472: CALL_OW 45
12476: PPUSH
12477: LD_VAR 0 2
12481: PUSH
12482: LD_INT 1
12484: ARRAY
12485: PPUSH
12486: CALL_OW 250
12490: PPUSH
12491: LD_VAR 0 2
12495: PUSH
12496: LD_INT 1
12498: ARRAY
12499: PPUSH
12500: CALL_OW 251
12504: PPUSH
12505: LD_INT 12
12507: PPUSH
12508: LD_INT 1
12510: PPUSH
12511: CALL_OW 50
12515: GO 12529
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12517: CALL_OW 45
12521: PPUSH
12522: LD_INT 1
12524: PPUSH
12525: CALL_OW 51
// end ;
12529: GO 12403
12531: POP
12532: POP
// end ;
12533: PPOPN 2
12535: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12536: LD_EXP 7
12540: PUSH
12541: LD_EXP 53
12545: AND
12546: IFFALSE 12768
12548: GO 12550
12550: DISABLE
12551: LD_INT 0
12553: PPUSH
12554: PPUSH
12555: PPUSH
12556: PPUSH
12557: PPUSH
12558: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12559: LD_ADDR_VAR 0 6
12563: PUSH
12564: LD_INT 22
12566: PUSH
12567: LD_OWVAR 2
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: PUSH
12576: LD_INT 21
12578: PUSH
12579: LD_INT 1
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PUSH
12586: LD_INT 3
12588: PUSH
12589: LD_INT 23
12591: PUSH
12592: LD_INT 0
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PUSH
12599: EMPTY
12600: LIST
12601: LIST
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: LIST
12607: PPUSH
12608: CALL_OW 69
12612: ST_TO_ADDR
// if not tmp then
12613: LD_VAR 0 6
12617: NOT
12618: IFFALSE 12622
// exit ;
12620: GO 12768
// s1 := rand ( 1 , 4 ) ;
12622: LD_ADDR_VAR 0 2
12626: PUSH
12627: LD_INT 1
12629: PPUSH
12630: LD_INT 4
12632: PPUSH
12633: CALL_OW 12
12637: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12638: LD_ADDR_VAR 0 4
12642: PUSH
12643: LD_VAR 0 6
12647: PUSH
12648: LD_INT 1
12650: ARRAY
12651: PPUSH
12652: LD_VAR 0 2
12656: PPUSH
12657: CALL_OW 259
12661: ST_TO_ADDR
// if s1 = 1 then
12662: LD_VAR 0 2
12666: PUSH
12667: LD_INT 1
12669: EQUAL
12670: IFFALSE 12690
// s2 := rand ( 2 , 4 ) else
12672: LD_ADDR_VAR 0 3
12676: PUSH
12677: LD_INT 2
12679: PPUSH
12680: LD_INT 4
12682: PPUSH
12683: CALL_OW 12
12687: ST_TO_ADDR
12688: GO 12698
// s2 := 1 ;
12690: LD_ADDR_VAR 0 3
12694: PUSH
12695: LD_INT 1
12697: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12698: LD_ADDR_VAR 0 5
12702: PUSH
12703: LD_VAR 0 6
12707: PUSH
12708: LD_INT 1
12710: ARRAY
12711: PPUSH
12712: LD_VAR 0 3
12716: PPUSH
12717: CALL_OW 259
12721: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12722: LD_VAR 0 6
12726: PUSH
12727: LD_INT 1
12729: ARRAY
12730: PPUSH
12731: LD_VAR 0 2
12735: PPUSH
12736: LD_VAR 0 5
12740: PPUSH
12741: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12745: LD_VAR 0 6
12749: PUSH
12750: LD_INT 1
12752: ARRAY
12753: PPUSH
12754: LD_VAR 0 3
12758: PPUSH
12759: LD_VAR 0 4
12763: PPUSH
12764: CALL_OW 237
// end ;
12768: PPOPN 6
12770: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12771: LD_EXP 7
12775: PUSH
12776: LD_EXP 54
12780: AND
12781: IFFALSE 12860
12783: GO 12785
12785: DISABLE
12786: LD_INT 0
12788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12789: LD_ADDR_VAR 0 1
12793: PUSH
12794: LD_INT 22
12796: PUSH
12797: LD_OWVAR 2
12801: PUSH
12802: EMPTY
12803: LIST
12804: LIST
12805: PUSH
12806: LD_INT 30
12808: PUSH
12809: LD_INT 3
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: PPUSH
12820: CALL_OW 69
12824: ST_TO_ADDR
// if not tmp then
12825: LD_VAR 0 1
12829: NOT
12830: IFFALSE 12834
// exit ;
12832: GO 12860
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12834: LD_VAR 0 1
12838: PUSH
12839: LD_INT 1
12841: PPUSH
12842: LD_VAR 0 1
12846: PPUSH
12847: CALL_OW 12
12851: ARRAY
12852: PPUSH
12853: LD_INT 1
12855: PPUSH
12856: CALL_OW 234
// end ;
12860: PPOPN 1
12862: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
12863: LD_EXP 7
12867: PUSH
12868: LD_EXP 55
12872: AND
12873: IFFALSE 12985
12875: GO 12877
12877: DISABLE
12878: LD_INT 0
12880: PPUSH
12881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
12882: LD_ADDR_VAR 0 2
12886: PUSH
12887: LD_INT 22
12889: PUSH
12890: LD_OWVAR 2
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: PUSH
12899: LD_INT 2
12901: PUSH
12902: LD_INT 30
12904: PUSH
12905: LD_INT 27
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PUSH
12912: LD_INT 30
12914: PUSH
12915: LD_INT 26
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: PUSH
12922: LD_INT 30
12924: PUSH
12925: LD_INT 28
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PPUSH
12942: CALL_OW 69
12946: ST_TO_ADDR
// if not tmp then
12947: LD_VAR 0 2
12951: NOT
12952: IFFALSE 12956
// exit ;
12954: GO 12985
// for i in tmp do
12956: LD_ADDR_VAR 0 1
12960: PUSH
12961: LD_VAR 0 2
12965: PUSH
12966: FOR_IN
12967: IFFALSE 12983
// SetLives ( i , 1 ) ;
12969: LD_VAR 0 1
12973: PPUSH
12974: LD_INT 1
12976: PPUSH
12977: CALL_OW 234
12981: GO 12966
12983: POP
12984: POP
// end ;
12985: PPOPN 2
12987: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
12988: LD_EXP 7
12992: PUSH
12993: LD_EXP 56
12997: AND
12998: IFFALSE 13285
13000: GO 13002
13002: DISABLE
13003: LD_INT 0
13005: PPUSH
13006: PPUSH
13007: PPUSH
// begin i := rand ( 1 , 7 ) ;
13008: LD_ADDR_VAR 0 1
13012: PUSH
13013: LD_INT 1
13015: PPUSH
13016: LD_INT 7
13018: PPUSH
13019: CALL_OW 12
13023: ST_TO_ADDR
// case i of 1 :
13024: LD_VAR 0 1
13028: PUSH
13029: LD_INT 1
13031: DOUBLE
13032: EQUAL
13033: IFTRUE 13037
13035: GO 13047
13037: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
13038: LD_STRING earthquake(getX(game), 0, 32)
13040: PPUSH
13041: CALL_OW 559
13045: GO 13285
13047: LD_INT 2
13049: DOUBLE
13050: EQUAL
13051: IFTRUE 13055
13053: GO 13069
13055: POP
// begin ToLua ( displayStucuk(); ) ;
13056: LD_STRING displayStucuk();
13058: PPUSH
13059: CALL_OW 559
// ResetFog ;
13063: CALL_OW 335
// end ; 3 :
13067: GO 13285
13069: LD_INT 3
13071: DOUBLE
13072: EQUAL
13073: IFTRUE 13077
13075: GO 13181
13077: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13078: LD_ADDR_VAR 0 2
13082: PUSH
13083: LD_INT 22
13085: PUSH
13086: LD_OWVAR 2
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PUSH
13095: LD_INT 25
13097: PUSH
13098: LD_INT 1
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PPUSH
13109: CALL_OW 69
13113: ST_TO_ADDR
// if not tmp then
13114: LD_VAR 0 2
13118: NOT
13119: IFFALSE 13123
// exit ;
13121: GO 13285
// un := tmp [ rand ( 1 , tmp ) ] ;
13123: LD_ADDR_VAR 0 3
13127: PUSH
13128: LD_VAR 0 2
13132: PUSH
13133: LD_INT 1
13135: PPUSH
13136: LD_VAR 0 2
13140: PPUSH
13141: CALL_OW 12
13145: ARRAY
13146: ST_TO_ADDR
// if Crawls ( un ) then
13147: LD_VAR 0 3
13151: PPUSH
13152: CALL_OW 318
13156: IFFALSE 13167
// ComWalk ( un ) ;
13158: LD_VAR 0 3
13162: PPUSH
13163: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13167: LD_VAR 0 3
13171: PPUSH
13172: LD_INT 8
13174: PPUSH
13175: CALL_OW 336
// end ; 4 :
13179: GO 13285
13181: LD_INT 4
13183: DOUBLE
13184: EQUAL
13185: IFTRUE 13189
13187: GO 13263
13189: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13190: LD_ADDR_VAR 0 2
13194: PUSH
13195: LD_INT 22
13197: PUSH
13198: LD_OWVAR 2
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: PUSH
13207: LD_INT 30
13209: PUSH
13210: LD_INT 29
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PPUSH
13221: CALL_OW 69
13225: ST_TO_ADDR
// if not tmp then
13226: LD_VAR 0 2
13230: NOT
13231: IFFALSE 13235
// exit ;
13233: GO 13285
// CenterNowOnUnits ( tmp [ 1 ] ) ;
13235: LD_VAR 0 2
13239: PUSH
13240: LD_INT 1
13242: ARRAY
13243: PPUSH
13244: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
13248: LD_VAR 0 2
13252: PUSH
13253: LD_INT 1
13255: ARRAY
13256: PPUSH
13257: CALL_OW 65
// end ; 5 .. 7 :
13261: GO 13285
13263: LD_INT 5
13265: DOUBLE
13266: GREATEREQUAL
13267: IFFALSE 13275
13269: LD_INT 7
13271: DOUBLE
13272: LESSEQUAL
13273: IFTRUE 13277
13275: GO 13284
13277: POP
// StreamSibBomb ; end ;
13278: CALL 9522 0 0
13282: GO 13285
13284: POP
// end ;
13285: PPOPN 3
13287: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
13288: LD_EXP 7
13292: PUSH
13293: LD_EXP 57
13297: AND
13298: IFFALSE 13454
13300: GO 13302
13302: DISABLE
13303: LD_INT 0
13305: PPUSH
13306: PPUSH
13307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13308: LD_ADDR_VAR 0 2
13312: PUSH
13313: LD_INT 81
13315: PUSH
13316: LD_OWVAR 2
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: PUSH
13325: LD_INT 2
13327: PUSH
13328: LD_INT 21
13330: PUSH
13331: LD_INT 1
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PUSH
13338: LD_INT 21
13340: PUSH
13341: LD_INT 2
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: LIST
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PPUSH
13357: CALL_OW 69
13361: ST_TO_ADDR
// if not tmp then
13362: LD_VAR 0 2
13366: NOT
13367: IFFALSE 13371
// exit ;
13369: GO 13454
// p := 0 ;
13371: LD_ADDR_VAR 0 3
13375: PUSH
13376: LD_INT 0
13378: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13379: LD_INT 35
13381: PPUSH
13382: CALL_OW 67
// p := p + 1 ;
13386: LD_ADDR_VAR 0 3
13390: PUSH
13391: LD_VAR 0 3
13395: PUSH
13396: LD_INT 1
13398: PLUS
13399: ST_TO_ADDR
// for i in tmp do
13400: LD_ADDR_VAR 0 1
13404: PUSH
13405: LD_VAR 0 2
13409: PUSH
13410: FOR_IN
13411: IFFALSE 13442
// if GetLives ( i ) < 1000 then
13413: LD_VAR 0 1
13417: PPUSH
13418: CALL_OW 256
13422: PUSH
13423: LD_INT 1000
13425: LESS
13426: IFFALSE 13440
// SetLives ( i , 1000 ) ;
13428: LD_VAR 0 1
13432: PPUSH
13433: LD_INT 1000
13435: PPUSH
13436: CALL_OW 234
13440: GO 13410
13442: POP
13443: POP
// until p > 20 ;
13444: LD_VAR 0 3
13448: PUSH
13449: LD_INT 20
13451: GREATER
13452: IFFALSE 13379
// end ;
13454: PPOPN 3
13456: END
// every 0 0$1 trigger StreamModeActive and sTime do
13457: LD_EXP 7
13461: PUSH
13462: LD_EXP 58
13466: AND
13467: IFFALSE 13502
13469: GO 13471
13471: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13472: LD_INT 28
13474: PPUSH
13475: LD_OWVAR 2
13479: PPUSH
13480: LD_INT 2
13482: PPUSH
13483: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13487: LD_INT 30
13489: PPUSH
13490: LD_OWVAR 2
13494: PPUSH
13495: LD_INT 2
13497: PPUSH
13498: CALL_OW 322
// end ;
13502: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13503: LD_EXP 7
13507: PUSH
13508: LD_EXP 59
13512: AND
13513: IFFALSE 13634
13515: GO 13517
13517: DISABLE
13518: LD_INT 0
13520: PPUSH
13521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13522: LD_ADDR_VAR 0 2
13526: PUSH
13527: LD_INT 22
13529: PUSH
13530: LD_OWVAR 2
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: PUSH
13539: LD_INT 21
13541: PUSH
13542: LD_INT 1
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: PUSH
13549: LD_INT 3
13551: PUSH
13552: LD_INT 23
13554: PUSH
13555: LD_INT 0
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: LIST
13570: PPUSH
13571: CALL_OW 69
13575: ST_TO_ADDR
// if not tmp then
13576: LD_VAR 0 2
13580: NOT
13581: IFFALSE 13585
// exit ;
13583: GO 13634
// for i in tmp do
13585: LD_ADDR_VAR 0 1
13589: PUSH
13590: LD_VAR 0 2
13594: PUSH
13595: FOR_IN
13596: IFFALSE 13632
// begin if Crawls ( i ) then
13598: LD_VAR 0 1
13602: PPUSH
13603: CALL_OW 318
13607: IFFALSE 13618
// ComWalk ( i ) ;
13609: LD_VAR 0 1
13613: PPUSH
13614: CALL_OW 138
// SetClass ( i , 2 ) ;
13618: LD_VAR 0 1
13622: PPUSH
13623: LD_INT 2
13625: PPUSH
13626: CALL_OW 336
// end ;
13630: GO 13595
13632: POP
13633: POP
// end ;
13634: PPOPN 2
13636: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13637: LD_EXP 7
13641: PUSH
13642: LD_EXP 60
13646: AND
13647: IFFALSE 13935
13649: GO 13651
13651: DISABLE
13652: LD_INT 0
13654: PPUSH
13655: PPUSH
13656: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13657: LD_OWVAR 2
13661: PPUSH
13662: LD_INT 9
13664: PPUSH
13665: LD_INT 1
13667: PPUSH
13668: LD_INT 1
13670: PPUSH
13671: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13675: LD_INT 9
13677: PPUSH
13678: LD_OWVAR 2
13682: PPUSH
13683: CALL_OW 343
// uc_side := 9 ;
13687: LD_ADDR_OWVAR 20
13691: PUSH
13692: LD_INT 9
13694: ST_TO_ADDR
// uc_nation := 2 ;
13695: LD_ADDR_OWVAR 21
13699: PUSH
13700: LD_INT 2
13702: ST_TO_ADDR
// hc_name := Dark Warrior ;
13703: LD_ADDR_OWVAR 26
13707: PUSH
13708: LD_STRING Dark Warrior
13710: ST_TO_ADDR
// hc_gallery :=  ;
13711: LD_ADDR_OWVAR 33
13715: PUSH
13716: LD_STRING 
13718: ST_TO_ADDR
// hc_noskilllimit := true ;
13719: LD_ADDR_OWVAR 76
13723: PUSH
13724: LD_INT 1
13726: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13727: LD_ADDR_OWVAR 31
13731: PUSH
13732: LD_INT 30
13734: PUSH
13735: LD_INT 30
13737: PUSH
13738: LD_INT 30
13740: PUSH
13741: LD_INT 30
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: ST_TO_ADDR
// un := CreateHuman ;
13750: LD_ADDR_VAR 0 3
13754: PUSH
13755: CALL_OW 44
13759: ST_TO_ADDR
// hc_noskilllimit := false ;
13760: LD_ADDR_OWVAR 76
13764: PUSH
13765: LD_INT 0
13767: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13768: LD_VAR 0 3
13772: PPUSH
13773: LD_INT 1
13775: PPUSH
13776: CALL_OW 51
// ToLua ( playRanger() ) ;
13780: LD_STRING playRanger()
13782: PPUSH
13783: CALL_OW 559
// p := 0 ;
13787: LD_ADDR_VAR 0 2
13791: PUSH
13792: LD_INT 0
13794: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13795: LD_INT 35
13797: PPUSH
13798: CALL_OW 67
// p := p + 1 ;
13802: LD_ADDR_VAR 0 2
13806: PUSH
13807: LD_VAR 0 2
13811: PUSH
13812: LD_INT 1
13814: PLUS
13815: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13816: LD_VAR 0 3
13820: PPUSH
13821: CALL_OW 256
13825: PUSH
13826: LD_INT 1000
13828: LESS
13829: IFFALSE 13843
// SetLives ( un , 1000 ) ;
13831: LD_VAR 0 3
13835: PPUSH
13836: LD_INT 1000
13838: PPUSH
13839: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13843: LD_VAR 0 3
13847: PPUSH
13848: LD_INT 81
13850: PUSH
13851: LD_OWVAR 2
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: PUSH
13860: LD_INT 91
13862: PUSH
13863: LD_VAR 0 3
13867: PUSH
13868: LD_INT 30
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: LIST
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: PPUSH
13880: CALL_OW 69
13884: PPUSH
13885: LD_VAR 0 3
13889: PPUSH
13890: CALL_OW 74
13894: PPUSH
13895: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
13899: LD_VAR 0 2
13903: PUSH
13904: LD_INT 80
13906: GREATER
13907: PUSH
13908: LD_VAR 0 3
13912: PPUSH
13913: CALL_OW 301
13917: OR
13918: IFFALSE 13795
// if un then
13920: LD_VAR 0 3
13924: IFFALSE 13935
// RemoveUnit ( un ) ;
13926: LD_VAR 0 3
13930: PPUSH
13931: CALL_OW 64
// end ;
13935: PPOPN 3
13937: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
13938: LD_EXP 61
13942: IFFALSE 14058
13944: GO 13946
13946: DISABLE
13947: LD_INT 0
13949: PPUSH
13950: PPUSH
13951: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13952: LD_ADDR_VAR 0 2
13956: PUSH
13957: LD_INT 81
13959: PUSH
13960: LD_OWVAR 2
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: PUSH
13969: LD_INT 21
13971: PUSH
13972: LD_INT 1
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: PPUSH
13983: CALL_OW 69
13987: ST_TO_ADDR
// ToLua ( playComputer() ) ;
13988: LD_STRING playComputer()
13990: PPUSH
13991: CALL_OW 559
// if not tmp then
13995: LD_VAR 0 2
13999: NOT
14000: IFFALSE 14004
// exit ;
14002: GO 14058
// for i in tmp do
14004: LD_ADDR_VAR 0 1
14008: PUSH
14009: LD_VAR 0 2
14013: PUSH
14014: FOR_IN
14015: IFFALSE 14056
// for j := 1 to 4 do
14017: LD_ADDR_VAR 0 3
14021: PUSH
14022: DOUBLE
14023: LD_INT 1
14025: DEC
14026: ST_TO_ADDR
14027: LD_INT 4
14029: PUSH
14030: FOR_TO
14031: IFFALSE 14052
// SetSkill ( i , j , 10 ) ;
14033: LD_VAR 0 1
14037: PPUSH
14038: LD_VAR 0 3
14042: PPUSH
14043: LD_INT 10
14045: PPUSH
14046: CALL_OW 237
14050: GO 14030
14052: POP
14053: POP
14054: GO 14014
14056: POP
14057: POP
// end ;
14058: PPOPN 3
14060: END
// every 0 0$1 trigger s30 do var i , tmp ;
14061: LD_EXP 62
14065: IFFALSE 14134
14067: GO 14069
14069: DISABLE
14070: LD_INT 0
14072: PPUSH
14073: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14074: LD_ADDR_VAR 0 2
14078: PUSH
14079: LD_INT 22
14081: PUSH
14082: LD_OWVAR 2
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PPUSH
14091: CALL_OW 69
14095: ST_TO_ADDR
// if not tmp then
14096: LD_VAR 0 2
14100: NOT
14101: IFFALSE 14105
// exit ;
14103: GO 14134
// for i in tmp do
14105: LD_ADDR_VAR 0 1
14109: PUSH
14110: LD_VAR 0 2
14114: PUSH
14115: FOR_IN
14116: IFFALSE 14132
// SetLives ( i , 300 ) ;
14118: LD_VAR 0 1
14122: PPUSH
14123: LD_INT 300
14125: PPUSH
14126: CALL_OW 234
14130: GO 14115
14132: POP
14133: POP
// end ;
14134: PPOPN 2
14136: END
// every 0 0$1 trigger s60 do var i , tmp ;
14137: LD_EXP 63
14141: IFFALSE 14210
14143: GO 14145
14145: DISABLE
14146: LD_INT 0
14148: PPUSH
14149: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14150: LD_ADDR_VAR 0 2
14154: PUSH
14155: LD_INT 22
14157: PUSH
14158: LD_OWVAR 2
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: PPUSH
14167: CALL_OW 69
14171: ST_TO_ADDR
// if not tmp then
14172: LD_VAR 0 2
14176: NOT
14177: IFFALSE 14181
// exit ;
14179: GO 14210
// for i in tmp do
14181: LD_ADDR_VAR 0 1
14185: PUSH
14186: LD_VAR 0 2
14190: PUSH
14191: FOR_IN
14192: IFFALSE 14208
// SetLives ( i , 600 ) ;
14194: LD_VAR 0 1
14198: PPUSH
14199: LD_INT 600
14201: PPUSH
14202: CALL_OW 234
14206: GO 14191
14208: POP
14209: POP
// end ;
14210: PPOPN 2
14212: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14213: LD_INT 0
14215: PPUSH
// case cmd of 301 :
14216: LD_VAR 0 1
14220: PUSH
14221: LD_INT 301
14223: DOUBLE
14224: EQUAL
14225: IFTRUE 14229
14227: GO 14261
14229: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
14230: LD_VAR 0 6
14234: PPUSH
14235: LD_VAR 0 7
14239: PPUSH
14240: LD_VAR 0 8
14244: PPUSH
14245: LD_VAR 0 4
14249: PPUSH
14250: LD_VAR 0 5
14254: PPUSH
14255: CALL 15462 0 5
14259: GO 14382
14261: LD_INT 302
14263: DOUBLE
14264: EQUAL
14265: IFTRUE 14269
14267: GO 14306
14269: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
14270: LD_VAR 0 6
14274: PPUSH
14275: LD_VAR 0 7
14279: PPUSH
14280: LD_VAR 0 8
14284: PPUSH
14285: LD_VAR 0 9
14289: PPUSH
14290: LD_VAR 0 4
14294: PPUSH
14295: LD_VAR 0 5
14299: PPUSH
14300: CALL 15553 0 6
14304: GO 14382
14306: LD_INT 303
14308: DOUBLE
14309: EQUAL
14310: IFTRUE 14314
14312: GO 14351
14314: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
14315: LD_VAR 0 6
14319: PPUSH
14320: LD_VAR 0 7
14324: PPUSH
14325: LD_VAR 0 8
14329: PPUSH
14330: LD_VAR 0 9
14334: PPUSH
14335: LD_VAR 0 4
14339: PPUSH
14340: LD_VAR 0 5
14344: PPUSH
14345: CALL 14387 0 6
14349: GO 14382
14351: LD_INT 304
14353: DOUBLE
14354: EQUAL
14355: IFTRUE 14359
14357: GO 14381
14359: POP
// hHackTeleport ( unit , x , y ) ; end ;
14360: LD_VAR 0 2
14364: PPUSH
14365: LD_VAR 0 4
14369: PPUSH
14370: LD_VAR 0 5
14374: PPUSH
14375: CALL 16146 0 3
14379: GO 14382
14381: POP
// end ;
14382: LD_VAR 0 12
14386: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14387: LD_INT 0
14389: PPUSH
14390: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14391: LD_VAR 0 1
14395: PUSH
14396: LD_INT 1
14398: LESS
14399: PUSH
14400: LD_VAR 0 1
14404: PUSH
14405: LD_INT 3
14407: GREATER
14408: OR
14409: PUSH
14410: LD_VAR 0 5
14414: PPUSH
14415: LD_VAR 0 6
14419: PPUSH
14420: CALL_OW 428
14424: OR
14425: IFFALSE 14429
// exit ;
14427: GO 15149
// uc_side := your_side ;
14429: LD_ADDR_OWVAR 20
14433: PUSH
14434: LD_OWVAR 2
14438: ST_TO_ADDR
// uc_nation := nation ;
14439: LD_ADDR_OWVAR 21
14443: PUSH
14444: LD_VAR 0 1
14448: ST_TO_ADDR
// bc_level = 1 ;
14449: LD_ADDR_OWVAR 43
14453: PUSH
14454: LD_INT 1
14456: ST_TO_ADDR
// case btype of 1 :
14457: LD_VAR 0 2
14461: PUSH
14462: LD_INT 1
14464: DOUBLE
14465: EQUAL
14466: IFTRUE 14470
14468: GO 14481
14470: POP
// bc_type := b_depot ; 2 :
14471: LD_ADDR_OWVAR 42
14475: PUSH
14476: LD_INT 0
14478: ST_TO_ADDR
14479: GO 15093
14481: LD_INT 2
14483: DOUBLE
14484: EQUAL
14485: IFTRUE 14489
14487: GO 14500
14489: POP
// bc_type := b_warehouse ; 3 :
14490: LD_ADDR_OWVAR 42
14494: PUSH
14495: LD_INT 1
14497: ST_TO_ADDR
14498: GO 15093
14500: LD_INT 3
14502: DOUBLE
14503: EQUAL
14504: IFTRUE 14508
14506: GO 14519
14508: POP
// bc_type := b_lab ; 4 .. 9 :
14509: LD_ADDR_OWVAR 42
14513: PUSH
14514: LD_INT 6
14516: ST_TO_ADDR
14517: GO 15093
14519: LD_INT 4
14521: DOUBLE
14522: GREATEREQUAL
14523: IFFALSE 14531
14525: LD_INT 9
14527: DOUBLE
14528: LESSEQUAL
14529: IFTRUE 14533
14531: GO 14585
14533: POP
// begin bc_type := b_lab_half ;
14534: LD_ADDR_OWVAR 42
14538: PUSH
14539: LD_INT 7
14541: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14542: LD_ADDR_OWVAR 44
14546: PUSH
14547: LD_INT 10
14549: PUSH
14550: LD_INT 11
14552: PUSH
14553: LD_INT 12
14555: PUSH
14556: LD_INT 15
14558: PUSH
14559: LD_INT 14
14561: PUSH
14562: LD_INT 13
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: PUSH
14573: LD_VAR 0 2
14577: PUSH
14578: LD_INT 3
14580: MINUS
14581: ARRAY
14582: ST_TO_ADDR
// end ; 10 .. 13 :
14583: GO 15093
14585: LD_INT 10
14587: DOUBLE
14588: GREATEREQUAL
14589: IFFALSE 14597
14591: LD_INT 13
14593: DOUBLE
14594: LESSEQUAL
14595: IFTRUE 14599
14597: GO 14676
14599: POP
// begin bc_type := b_lab_full ;
14600: LD_ADDR_OWVAR 42
14604: PUSH
14605: LD_INT 8
14607: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14608: LD_ADDR_OWVAR 44
14612: PUSH
14613: LD_INT 10
14615: PUSH
14616: LD_INT 12
14618: PUSH
14619: LD_INT 14
14621: PUSH
14622: LD_INT 13
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: PUSH
14631: LD_VAR 0 2
14635: PUSH
14636: LD_INT 9
14638: MINUS
14639: ARRAY
14640: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14641: LD_ADDR_OWVAR 45
14645: PUSH
14646: LD_INT 11
14648: PUSH
14649: LD_INT 15
14651: PUSH
14652: LD_INT 12
14654: PUSH
14655: LD_INT 15
14657: PUSH
14658: EMPTY
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: PUSH
14664: LD_VAR 0 2
14668: PUSH
14669: LD_INT 9
14671: MINUS
14672: ARRAY
14673: ST_TO_ADDR
// end ; 14 :
14674: GO 15093
14676: LD_INT 14
14678: DOUBLE
14679: EQUAL
14680: IFTRUE 14684
14682: GO 14695
14684: POP
// bc_type := b_workshop ; 15 :
14685: LD_ADDR_OWVAR 42
14689: PUSH
14690: LD_INT 2
14692: ST_TO_ADDR
14693: GO 15093
14695: LD_INT 15
14697: DOUBLE
14698: EQUAL
14699: IFTRUE 14703
14701: GO 14714
14703: POP
// bc_type := b_factory ; 16 :
14704: LD_ADDR_OWVAR 42
14708: PUSH
14709: LD_INT 3
14711: ST_TO_ADDR
14712: GO 15093
14714: LD_INT 16
14716: DOUBLE
14717: EQUAL
14718: IFTRUE 14722
14720: GO 14733
14722: POP
// bc_type := b_ext_gun ; 17 :
14723: LD_ADDR_OWVAR 42
14727: PUSH
14728: LD_INT 17
14730: ST_TO_ADDR
14731: GO 15093
14733: LD_INT 17
14735: DOUBLE
14736: EQUAL
14737: IFTRUE 14741
14739: GO 14769
14741: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14742: LD_ADDR_OWVAR 42
14746: PUSH
14747: LD_INT 19
14749: PUSH
14750: LD_INT 23
14752: PUSH
14753: LD_INT 19
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: LIST
14760: PUSH
14761: LD_VAR 0 1
14765: ARRAY
14766: ST_TO_ADDR
14767: GO 15093
14769: LD_INT 18
14771: DOUBLE
14772: EQUAL
14773: IFTRUE 14777
14775: GO 14788
14777: POP
// bc_type := b_ext_radar ; 19 :
14778: LD_ADDR_OWVAR 42
14782: PUSH
14783: LD_INT 20
14785: ST_TO_ADDR
14786: GO 15093
14788: LD_INT 19
14790: DOUBLE
14791: EQUAL
14792: IFTRUE 14796
14794: GO 14807
14796: POP
// bc_type := b_ext_radio ; 20 :
14797: LD_ADDR_OWVAR 42
14801: PUSH
14802: LD_INT 22
14804: ST_TO_ADDR
14805: GO 15093
14807: LD_INT 20
14809: DOUBLE
14810: EQUAL
14811: IFTRUE 14815
14813: GO 14826
14815: POP
// bc_type := b_ext_siberium ; 21 :
14816: LD_ADDR_OWVAR 42
14820: PUSH
14821: LD_INT 21
14823: ST_TO_ADDR
14824: GO 15093
14826: LD_INT 21
14828: DOUBLE
14829: EQUAL
14830: IFTRUE 14834
14832: GO 14845
14834: POP
// bc_type := b_ext_computer ; 22 :
14835: LD_ADDR_OWVAR 42
14839: PUSH
14840: LD_INT 24
14842: ST_TO_ADDR
14843: GO 15093
14845: LD_INT 22
14847: DOUBLE
14848: EQUAL
14849: IFTRUE 14853
14851: GO 14864
14853: POP
// bc_type := b_ext_track ; 23 :
14854: LD_ADDR_OWVAR 42
14858: PUSH
14859: LD_INT 16
14861: ST_TO_ADDR
14862: GO 15093
14864: LD_INT 23
14866: DOUBLE
14867: EQUAL
14868: IFTRUE 14872
14870: GO 14883
14872: POP
// bc_type := b_ext_laser ; 24 :
14873: LD_ADDR_OWVAR 42
14877: PUSH
14878: LD_INT 25
14880: ST_TO_ADDR
14881: GO 15093
14883: LD_INT 24
14885: DOUBLE
14886: EQUAL
14887: IFTRUE 14891
14889: GO 14902
14891: POP
// bc_type := b_control_tower ; 25 :
14892: LD_ADDR_OWVAR 42
14896: PUSH
14897: LD_INT 36
14899: ST_TO_ADDR
14900: GO 15093
14902: LD_INT 25
14904: DOUBLE
14905: EQUAL
14906: IFTRUE 14910
14908: GO 14921
14910: POP
// bc_type := b_breastwork ; 26 :
14911: LD_ADDR_OWVAR 42
14915: PUSH
14916: LD_INT 31
14918: ST_TO_ADDR
14919: GO 15093
14921: LD_INT 26
14923: DOUBLE
14924: EQUAL
14925: IFTRUE 14929
14927: GO 14940
14929: POP
// bc_type := b_bunker ; 27 :
14930: LD_ADDR_OWVAR 42
14934: PUSH
14935: LD_INT 32
14937: ST_TO_ADDR
14938: GO 15093
14940: LD_INT 27
14942: DOUBLE
14943: EQUAL
14944: IFTRUE 14948
14946: GO 14959
14948: POP
// bc_type := b_turret ; 28 :
14949: LD_ADDR_OWVAR 42
14953: PUSH
14954: LD_INT 33
14956: ST_TO_ADDR
14957: GO 15093
14959: LD_INT 28
14961: DOUBLE
14962: EQUAL
14963: IFTRUE 14967
14965: GO 14978
14967: POP
// bc_type := b_armoury ; 29 :
14968: LD_ADDR_OWVAR 42
14972: PUSH
14973: LD_INT 4
14975: ST_TO_ADDR
14976: GO 15093
14978: LD_INT 29
14980: DOUBLE
14981: EQUAL
14982: IFTRUE 14986
14984: GO 14997
14986: POP
// bc_type := b_barracks ; 30 :
14987: LD_ADDR_OWVAR 42
14991: PUSH
14992: LD_INT 5
14994: ST_TO_ADDR
14995: GO 15093
14997: LD_INT 30
14999: DOUBLE
15000: EQUAL
15001: IFTRUE 15005
15003: GO 15016
15005: POP
// bc_type := b_solar_power ; 31 :
15006: LD_ADDR_OWVAR 42
15010: PUSH
15011: LD_INT 27
15013: ST_TO_ADDR
15014: GO 15093
15016: LD_INT 31
15018: DOUBLE
15019: EQUAL
15020: IFTRUE 15024
15022: GO 15035
15024: POP
// bc_type := b_oil_power ; 32 :
15025: LD_ADDR_OWVAR 42
15029: PUSH
15030: LD_INT 26
15032: ST_TO_ADDR
15033: GO 15093
15035: LD_INT 32
15037: DOUBLE
15038: EQUAL
15039: IFTRUE 15043
15041: GO 15054
15043: POP
// bc_type := b_siberite_power ; 33 :
15044: LD_ADDR_OWVAR 42
15048: PUSH
15049: LD_INT 28
15051: ST_TO_ADDR
15052: GO 15093
15054: LD_INT 33
15056: DOUBLE
15057: EQUAL
15058: IFTRUE 15062
15060: GO 15073
15062: POP
// bc_type := b_oil_mine ; 34 :
15063: LD_ADDR_OWVAR 42
15067: PUSH
15068: LD_INT 29
15070: ST_TO_ADDR
15071: GO 15093
15073: LD_INT 34
15075: DOUBLE
15076: EQUAL
15077: IFTRUE 15081
15079: GO 15092
15081: POP
// bc_type := b_siberite_mine ; end ;
15082: LD_ADDR_OWVAR 42
15086: PUSH
15087: LD_INT 30
15089: ST_TO_ADDR
15090: GO 15093
15092: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
15093: LD_ADDR_VAR 0 8
15097: PUSH
15098: LD_VAR 0 5
15102: PPUSH
15103: LD_VAR 0 6
15107: PPUSH
15108: LD_VAR 0 3
15112: PPUSH
15113: CALL_OW 47
15117: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
15118: LD_OWVAR 42
15122: PUSH
15123: LD_INT 32
15125: PUSH
15126: LD_INT 33
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: IN
15133: IFFALSE 15149
// PlaceWeaponTurret ( b , weapon ) ;
15135: LD_VAR 0 8
15139: PPUSH
15140: LD_VAR 0 4
15144: PPUSH
15145: CALL_OW 431
// end ;
15149: LD_VAR 0 7
15153: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
15154: LD_INT 0
15156: PPUSH
15157: PPUSH
15158: PPUSH
15159: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15160: LD_ADDR_VAR 0 4
15164: PUSH
15165: LD_INT 22
15167: PUSH
15168: LD_OWVAR 2
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PUSH
15177: LD_INT 2
15179: PUSH
15180: LD_INT 30
15182: PUSH
15183: LD_INT 0
15185: PUSH
15186: EMPTY
15187: LIST
15188: LIST
15189: PUSH
15190: LD_INT 30
15192: PUSH
15193: LD_INT 1
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: LIST
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PPUSH
15209: CALL_OW 69
15213: ST_TO_ADDR
// if not tmp then
15214: LD_VAR 0 4
15218: NOT
15219: IFFALSE 15223
// exit ;
15221: GO 15282
// for i in tmp do
15223: LD_ADDR_VAR 0 2
15227: PUSH
15228: LD_VAR 0 4
15232: PUSH
15233: FOR_IN
15234: IFFALSE 15280
// for j = 1 to 3 do
15236: LD_ADDR_VAR 0 3
15240: PUSH
15241: DOUBLE
15242: LD_INT 1
15244: DEC
15245: ST_TO_ADDR
15246: LD_INT 3
15248: PUSH
15249: FOR_TO
15250: IFFALSE 15276
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
15252: LD_VAR 0 2
15256: PPUSH
15257: CALL_OW 274
15261: PPUSH
15262: LD_VAR 0 3
15266: PPUSH
15267: LD_INT 99999
15269: PPUSH
15270: CALL_OW 277
15274: GO 15249
15276: POP
15277: POP
15278: GO 15233
15280: POP
15281: POP
// end ;
15282: LD_VAR 0 1
15286: RET
// export function hHackSetLevel10 ; var i , j ; begin
15287: LD_INT 0
15289: PPUSH
15290: PPUSH
15291: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15292: LD_ADDR_VAR 0 2
15296: PUSH
15297: LD_INT 21
15299: PUSH
15300: LD_INT 1
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PPUSH
15307: CALL_OW 69
15311: PUSH
15312: FOR_IN
15313: IFFALSE 15365
// if IsSelected ( i ) then
15315: LD_VAR 0 2
15319: PPUSH
15320: CALL_OW 306
15324: IFFALSE 15363
// begin for j := 1 to 4 do
15326: LD_ADDR_VAR 0 3
15330: PUSH
15331: DOUBLE
15332: LD_INT 1
15334: DEC
15335: ST_TO_ADDR
15336: LD_INT 4
15338: PUSH
15339: FOR_TO
15340: IFFALSE 15361
// SetSkill ( i , j , 10 ) ;
15342: LD_VAR 0 2
15346: PPUSH
15347: LD_VAR 0 3
15351: PPUSH
15352: LD_INT 10
15354: PPUSH
15355: CALL_OW 237
15359: GO 15339
15361: POP
15362: POP
// end ;
15363: GO 15312
15365: POP
15366: POP
// end ;
15367: LD_VAR 0 1
15371: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15372: LD_INT 0
15374: PPUSH
15375: PPUSH
15376: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15377: LD_ADDR_VAR 0 2
15381: PUSH
15382: LD_INT 22
15384: PUSH
15385: LD_OWVAR 2
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: LD_INT 21
15396: PUSH
15397: LD_INT 1
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: PPUSH
15408: CALL_OW 69
15412: PUSH
15413: FOR_IN
15414: IFFALSE 15455
// begin for j := 1 to 4 do
15416: LD_ADDR_VAR 0 3
15420: PUSH
15421: DOUBLE
15422: LD_INT 1
15424: DEC
15425: ST_TO_ADDR
15426: LD_INT 4
15428: PUSH
15429: FOR_TO
15430: IFFALSE 15451
// SetSkill ( i , j , 10 ) ;
15432: LD_VAR 0 2
15436: PPUSH
15437: LD_VAR 0 3
15441: PPUSH
15442: LD_INT 10
15444: PPUSH
15445: CALL_OW 237
15449: GO 15429
15451: POP
15452: POP
// end ;
15453: GO 15413
15455: POP
15456: POP
// end ;
15457: LD_VAR 0 1
15461: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15462: LD_INT 0
15464: PPUSH
// uc_side := your_side ;
15465: LD_ADDR_OWVAR 20
15469: PUSH
15470: LD_OWVAR 2
15474: ST_TO_ADDR
// uc_nation := nation ;
15475: LD_ADDR_OWVAR 21
15479: PUSH
15480: LD_VAR 0 1
15484: ST_TO_ADDR
// InitHc ;
15485: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15489: LD_INT 0
15491: PPUSH
15492: LD_VAR 0 2
15496: PPUSH
15497: LD_VAR 0 3
15501: PPUSH
15502: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15506: LD_VAR 0 4
15510: PPUSH
15511: LD_VAR 0 5
15515: PPUSH
15516: CALL_OW 428
15520: PUSH
15521: LD_INT 0
15523: EQUAL
15524: IFFALSE 15548
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15526: CALL_OW 44
15530: PPUSH
15531: LD_VAR 0 4
15535: PPUSH
15536: LD_VAR 0 5
15540: PPUSH
15541: LD_INT 1
15543: PPUSH
15544: CALL_OW 48
// end ;
15548: LD_VAR 0 6
15552: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15553: LD_INT 0
15555: PPUSH
15556: PPUSH
// uc_side := your_side ;
15557: LD_ADDR_OWVAR 20
15561: PUSH
15562: LD_OWVAR 2
15566: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15567: LD_VAR 0 1
15571: PUSH
15572: LD_INT 1
15574: PUSH
15575: LD_INT 2
15577: PUSH
15578: LD_INT 3
15580: PUSH
15581: LD_INT 4
15583: PUSH
15584: LD_INT 5
15586: PUSH
15587: EMPTY
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: IN
15594: IFFALSE 15606
// uc_nation := nation_american else
15596: LD_ADDR_OWVAR 21
15600: PUSH
15601: LD_INT 1
15603: ST_TO_ADDR
15604: GO 15649
// if chassis in [ 11 , 12 , 13 , 14 ] then
15606: LD_VAR 0 1
15610: PUSH
15611: LD_INT 11
15613: PUSH
15614: LD_INT 12
15616: PUSH
15617: LD_INT 13
15619: PUSH
15620: LD_INT 14
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: IN
15629: IFFALSE 15641
// uc_nation := nation_arabian else
15631: LD_ADDR_OWVAR 21
15635: PUSH
15636: LD_INT 2
15638: ST_TO_ADDR
15639: GO 15649
// uc_nation := nation_russian ;
15641: LD_ADDR_OWVAR 21
15645: PUSH
15646: LD_INT 3
15648: ST_TO_ADDR
// vc_chassis := chassis ;
15649: LD_ADDR_OWVAR 37
15653: PUSH
15654: LD_VAR 0 1
15658: ST_TO_ADDR
// vc_engine := engine ;
15659: LD_ADDR_OWVAR 39
15663: PUSH
15664: LD_VAR 0 2
15668: ST_TO_ADDR
// vc_control := control ;
15669: LD_ADDR_OWVAR 38
15673: PUSH
15674: LD_VAR 0 3
15678: ST_TO_ADDR
// vc_weapon := weapon ;
15679: LD_ADDR_OWVAR 40
15683: PUSH
15684: LD_VAR 0 4
15688: ST_TO_ADDR
// un := CreateVehicle ;
15689: LD_ADDR_VAR 0 8
15693: PUSH
15694: CALL_OW 45
15698: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15699: LD_VAR 0 8
15703: PPUSH
15704: LD_INT 0
15706: PPUSH
15707: LD_INT 5
15709: PPUSH
15710: CALL_OW 12
15714: PPUSH
15715: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15719: LD_VAR 0 8
15723: PPUSH
15724: LD_VAR 0 5
15728: PPUSH
15729: LD_VAR 0 6
15733: PPUSH
15734: LD_INT 1
15736: PPUSH
15737: CALL_OW 48
// end ;
15741: LD_VAR 0 7
15745: RET
// export hInvincible ; every 1 do
15746: GO 15748
15748: DISABLE
// hInvincible := [ ] ;
15749: LD_ADDR_EXP 64
15753: PUSH
15754: EMPTY
15755: ST_TO_ADDR
15756: END
// every 10 do var i ;
15757: GO 15759
15759: DISABLE
15760: LD_INT 0
15762: PPUSH
// begin enable ;
15763: ENABLE
// if not hInvincible then
15764: LD_EXP 64
15768: NOT
15769: IFFALSE 15773
// exit ;
15771: GO 15817
// for i in hInvincible do
15773: LD_ADDR_VAR 0 1
15777: PUSH
15778: LD_EXP 64
15782: PUSH
15783: FOR_IN
15784: IFFALSE 15815
// if GetLives ( i ) < 1000 then
15786: LD_VAR 0 1
15790: PPUSH
15791: CALL_OW 256
15795: PUSH
15796: LD_INT 1000
15798: LESS
15799: IFFALSE 15813
// SetLives ( i , 1000 ) ;
15801: LD_VAR 0 1
15805: PPUSH
15806: LD_INT 1000
15808: PPUSH
15809: CALL_OW 234
15813: GO 15783
15815: POP
15816: POP
// end ;
15817: PPOPN 1
15819: END
// export function hHackInvincible ; var i ; begin
15820: LD_INT 0
15822: PPUSH
15823: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15824: LD_ADDR_VAR 0 2
15828: PUSH
15829: LD_INT 2
15831: PUSH
15832: LD_INT 21
15834: PUSH
15835: LD_INT 1
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PUSH
15842: LD_INT 21
15844: PUSH
15845: LD_INT 2
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: LIST
15856: PPUSH
15857: CALL_OW 69
15861: PUSH
15862: FOR_IN
15863: IFFALSE 15924
// if IsSelected ( i ) then
15865: LD_VAR 0 2
15869: PPUSH
15870: CALL_OW 306
15874: IFFALSE 15922
// begin if i in hInvincible then
15876: LD_VAR 0 2
15880: PUSH
15881: LD_EXP 64
15885: IN
15886: IFFALSE 15906
// hInvincible := hInvincible diff i else
15888: LD_ADDR_EXP 64
15892: PUSH
15893: LD_EXP 64
15897: PUSH
15898: LD_VAR 0 2
15902: DIFF
15903: ST_TO_ADDR
15904: GO 15922
// hInvincible := hInvincible union i ;
15906: LD_ADDR_EXP 64
15910: PUSH
15911: LD_EXP 64
15915: PUSH
15916: LD_VAR 0 2
15920: UNION
15921: ST_TO_ADDR
// end ;
15922: GO 15862
15924: POP
15925: POP
// end ;
15926: LD_VAR 0 1
15930: RET
// export function hHackInvisible ; var i , j ; begin
15931: LD_INT 0
15933: PPUSH
15934: PPUSH
15935: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15936: LD_ADDR_VAR 0 2
15940: PUSH
15941: LD_INT 21
15943: PUSH
15944: LD_INT 1
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: PPUSH
15951: CALL_OW 69
15955: PUSH
15956: FOR_IN
15957: IFFALSE 15981
// if IsSelected ( i ) then
15959: LD_VAR 0 2
15963: PPUSH
15964: CALL_OW 306
15968: IFFALSE 15979
// ComForceInvisible ( i ) ;
15970: LD_VAR 0 2
15974: PPUSH
15975: CALL_OW 496
15979: GO 15956
15981: POP
15982: POP
// end ;
15983: LD_VAR 0 1
15987: RET
// export function hHackChangeYourSide ; begin
15988: LD_INT 0
15990: PPUSH
// if your_side = 8 then
15991: LD_OWVAR 2
15995: PUSH
15996: LD_INT 8
15998: EQUAL
15999: IFFALSE 16011
// your_side := 0 else
16001: LD_ADDR_OWVAR 2
16005: PUSH
16006: LD_INT 0
16008: ST_TO_ADDR
16009: GO 16025
// your_side := your_side + 1 ;
16011: LD_ADDR_OWVAR 2
16015: PUSH
16016: LD_OWVAR 2
16020: PUSH
16021: LD_INT 1
16023: PLUS
16024: ST_TO_ADDR
// end ;
16025: LD_VAR 0 1
16029: RET
// export function hHackChangeUnitSide ; var i , j ; begin
16030: LD_INT 0
16032: PPUSH
16033: PPUSH
16034: PPUSH
// for i in all_units do
16035: LD_ADDR_VAR 0 2
16039: PUSH
16040: LD_OWVAR 3
16044: PUSH
16045: FOR_IN
16046: IFFALSE 16124
// if IsSelected ( i ) then
16048: LD_VAR 0 2
16052: PPUSH
16053: CALL_OW 306
16057: IFFALSE 16122
// begin j := GetSide ( i ) ;
16059: LD_ADDR_VAR 0 3
16063: PUSH
16064: LD_VAR 0 2
16068: PPUSH
16069: CALL_OW 255
16073: ST_TO_ADDR
// if j = 8 then
16074: LD_VAR 0 3
16078: PUSH
16079: LD_INT 8
16081: EQUAL
16082: IFFALSE 16094
// j := 0 else
16084: LD_ADDR_VAR 0 3
16088: PUSH
16089: LD_INT 0
16091: ST_TO_ADDR
16092: GO 16108
// j := j + 1 ;
16094: LD_ADDR_VAR 0 3
16098: PUSH
16099: LD_VAR 0 3
16103: PUSH
16104: LD_INT 1
16106: PLUS
16107: ST_TO_ADDR
// SetSide ( i , j ) ;
16108: LD_VAR 0 2
16112: PPUSH
16113: LD_VAR 0 3
16117: PPUSH
16118: CALL_OW 235
// end ;
16122: GO 16045
16124: POP
16125: POP
// end ;
16126: LD_VAR 0 1
16130: RET
// export function hHackFog ; begin
16131: LD_INT 0
16133: PPUSH
// FogOff ( true ) ;
16134: LD_INT 1
16136: PPUSH
16137: CALL_OW 344
// end ;
16141: LD_VAR 0 1
16145: RET
// export function hHackTeleport ( unit , x , y ) ; begin
16146: LD_INT 0
16148: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
16149: LD_VAR 0 1
16153: PPUSH
16154: LD_VAR 0 2
16158: PPUSH
16159: LD_VAR 0 3
16163: PPUSH
16164: LD_INT 1
16166: PPUSH
16167: LD_INT 1
16169: PPUSH
16170: CALL_OW 483
// CenterOnXY ( x , y ) ;
16174: LD_VAR 0 2
16178: PPUSH
16179: LD_VAR 0 3
16183: PPUSH
16184: CALL_OW 84
// end ;
16188: LD_VAR 0 4
16192: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
16193: LD_INT 0
16195: PPUSH
16196: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
16197: LD_VAR 0 1
16201: NOT
16202: PUSH
16203: LD_VAR 0 2
16207: PPUSH
16208: LD_VAR 0 3
16212: PPUSH
16213: CALL_OW 488
16217: NOT
16218: OR
16219: PUSH
16220: LD_VAR 0 1
16224: PPUSH
16225: CALL_OW 266
16229: PUSH
16230: LD_INT 3
16232: NONEQUAL
16233: PUSH
16234: LD_VAR 0 1
16238: PPUSH
16239: CALL_OW 247
16243: PUSH
16244: LD_INT 1
16246: EQUAL
16247: NOT
16248: AND
16249: OR
16250: IFFALSE 16254
// exit ;
16252: GO 16403
// if GetType ( factory ) = unit_human then
16254: LD_VAR 0 1
16258: PPUSH
16259: CALL_OW 247
16263: PUSH
16264: LD_INT 1
16266: EQUAL
16267: IFFALSE 16284
// factory := IsInUnit ( factory ) ;
16269: LD_ADDR_VAR 0 1
16273: PUSH
16274: LD_VAR 0 1
16278: PPUSH
16279: CALL_OW 310
16283: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
16284: LD_VAR 0 1
16288: PPUSH
16289: CALL_OW 266
16293: PUSH
16294: LD_INT 3
16296: NONEQUAL
16297: IFFALSE 16301
// exit ;
16299: GO 16403
// if HexInfo ( x , y ) = factory then
16301: LD_VAR 0 2
16305: PPUSH
16306: LD_VAR 0 3
16310: PPUSH
16311: CALL_OW 428
16315: PUSH
16316: LD_VAR 0 1
16320: EQUAL
16321: IFFALSE 16348
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
16323: LD_ADDR_EXP 65
16327: PUSH
16328: LD_EXP 65
16332: PPUSH
16333: LD_VAR 0 1
16337: PPUSH
16338: LD_INT 0
16340: PPUSH
16341: CALL_OW 1
16345: ST_TO_ADDR
16346: GO 16399
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
16348: LD_ADDR_EXP 65
16352: PUSH
16353: LD_EXP 65
16357: PPUSH
16358: LD_VAR 0 1
16362: PPUSH
16363: LD_VAR 0 1
16367: PPUSH
16368: CALL_OW 255
16372: PUSH
16373: LD_VAR 0 1
16377: PUSH
16378: LD_VAR 0 2
16382: PUSH
16383: LD_VAR 0 3
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: PPUSH
16394: CALL_OW 1
16398: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16399: CALL 16408 0 0
// end ;
16403: LD_VAR 0 4
16407: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16408: LD_INT 0
16410: PPUSH
16411: PPUSH
16412: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16413: LD_STRING resetFactoryWaypoint();
16415: PPUSH
16416: CALL_OW 559
// if factoryWaypoints then
16420: LD_EXP 65
16424: IFFALSE 16550
// begin list := PrepareArray ( factoryWaypoints ) ;
16426: LD_ADDR_VAR 0 3
16430: PUSH
16431: LD_EXP 65
16435: PPUSH
16436: CALL 63090 0 1
16440: ST_TO_ADDR
// for i := 1 to list do
16441: LD_ADDR_VAR 0 2
16445: PUSH
16446: DOUBLE
16447: LD_INT 1
16449: DEC
16450: ST_TO_ADDR
16451: LD_VAR 0 3
16455: PUSH
16456: FOR_TO
16457: IFFALSE 16548
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16459: LD_STRING setFactoryWaypointXY(
16461: PUSH
16462: LD_VAR 0 3
16466: PUSH
16467: LD_VAR 0 2
16471: ARRAY
16472: PUSH
16473: LD_INT 1
16475: ARRAY
16476: STR
16477: PUSH
16478: LD_STRING ,
16480: STR
16481: PUSH
16482: LD_VAR 0 3
16486: PUSH
16487: LD_VAR 0 2
16491: ARRAY
16492: PUSH
16493: LD_INT 2
16495: ARRAY
16496: STR
16497: PUSH
16498: LD_STRING ,
16500: STR
16501: PUSH
16502: LD_VAR 0 3
16506: PUSH
16507: LD_VAR 0 2
16511: ARRAY
16512: PUSH
16513: LD_INT 3
16515: ARRAY
16516: STR
16517: PUSH
16518: LD_STRING ,
16520: STR
16521: PUSH
16522: LD_VAR 0 3
16526: PUSH
16527: LD_VAR 0 2
16531: ARRAY
16532: PUSH
16533: LD_INT 4
16535: ARRAY
16536: STR
16537: PUSH
16538: LD_STRING )
16540: STR
16541: PPUSH
16542: CALL_OW 559
16546: GO 16456
16548: POP
16549: POP
// end ; end ;
16550: LD_VAR 0 1
16554: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16555: LD_INT 0
16557: PPUSH
// if HexInfo ( x , y ) = warehouse then
16558: LD_VAR 0 2
16562: PPUSH
16563: LD_VAR 0 3
16567: PPUSH
16568: CALL_OW 428
16572: PUSH
16573: LD_VAR 0 1
16577: EQUAL
16578: IFFALSE 16605
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16580: LD_ADDR_EXP 66
16584: PUSH
16585: LD_EXP 66
16589: PPUSH
16590: LD_VAR 0 1
16594: PPUSH
16595: LD_INT 0
16597: PPUSH
16598: CALL_OW 1
16602: ST_TO_ADDR
16603: GO 16656
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16605: LD_ADDR_EXP 66
16609: PUSH
16610: LD_EXP 66
16614: PPUSH
16615: LD_VAR 0 1
16619: PPUSH
16620: LD_VAR 0 1
16624: PPUSH
16625: CALL_OW 255
16629: PUSH
16630: LD_VAR 0 1
16634: PUSH
16635: LD_VAR 0 2
16639: PUSH
16640: LD_VAR 0 3
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: PPUSH
16651: CALL_OW 1
16655: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16656: CALL 16665 0 0
// end ;
16660: LD_VAR 0 4
16664: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16665: LD_INT 0
16667: PPUSH
16668: PPUSH
16669: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16670: LD_STRING resetWarehouseGatheringPoints();
16672: PPUSH
16673: CALL_OW 559
// if warehouseGatheringPoints then
16677: LD_EXP 66
16681: IFFALSE 16807
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16683: LD_ADDR_VAR 0 3
16687: PUSH
16688: LD_EXP 66
16692: PPUSH
16693: CALL 63090 0 1
16697: ST_TO_ADDR
// for i := 1 to list do
16698: LD_ADDR_VAR 0 2
16702: PUSH
16703: DOUBLE
16704: LD_INT 1
16706: DEC
16707: ST_TO_ADDR
16708: LD_VAR 0 3
16712: PUSH
16713: FOR_TO
16714: IFFALSE 16805
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16716: LD_STRING setWarehouseGatheringPointXY(
16718: PUSH
16719: LD_VAR 0 3
16723: PUSH
16724: LD_VAR 0 2
16728: ARRAY
16729: PUSH
16730: LD_INT 1
16732: ARRAY
16733: STR
16734: PUSH
16735: LD_STRING ,
16737: STR
16738: PUSH
16739: LD_VAR 0 3
16743: PUSH
16744: LD_VAR 0 2
16748: ARRAY
16749: PUSH
16750: LD_INT 2
16752: ARRAY
16753: STR
16754: PUSH
16755: LD_STRING ,
16757: STR
16758: PUSH
16759: LD_VAR 0 3
16763: PUSH
16764: LD_VAR 0 2
16768: ARRAY
16769: PUSH
16770: LD_INT 3
16772: ARRAY
16773: STR
16774: PUSH
16775: LD_STRING ,
16777: STR
16778: PUSH
16779: LD_VAR 0 3
16783: PUSH
16784: LD_VAR 0 2
16788: ARRAY
16789: PUSH
16790: LD_INT 4
16792: ARRAY
16793: STR
16794: PUSH
16795: LD_STRING )
16797: STR
16798: PPUSH
16799: CALL_OW 559
16803: GO 16713
16805: POP
16806: POP
// end ; end ;
16807: LD_VAR 0 1
16811: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
16812: LD_EXP 66
16816: IFFALSE 17501
16818: GO 16820
16820: DISABLE
16821: LD_INT 0
16823: PPUSH
16824: PPUSH
16825: PPUSH
16826: PPUSH
16827: PPUSH
16828: PPUSH
16829: PPUSH
16830: PPUSH
16831: PPUSH
// begin enable ;
16832: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
16833: LD_ADDR_VAR 0 3
16837: PUSH
16838: LD_EXP 66
16842: PPUSH
16843: CALL 63090 0 1
16847: ST_TO_ADDR
// if not list then
16848: LD_VAR 0 3
16852: NOT
16853: IFFALSE 16857
// exit ;
16855: GO 17501
// for i := 1 to list do
16857: LD_ADDR_VAR 0 1
16861: PUSH
16862: DOUBLE
16863: LD_INT 1
16865: DEC
16866: ST_TO_ADDR
16867: LD_VAR 0 3
16871: PUSH
16872: FOR_TO
16873: IFFALSE 17499
// begin depot := list [ i ] [ 2 ] ;
16875: LD_ADDR_VAR 0 8
16879: PUSH
16880: LD_VAR 0 3
16884: PUSH
16885: LD_VAR 0 1
16889: ARRAY
16890: PUSH
16891: LD_INT 2
16893: ARRAY
16894: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
16895: LD_ADDR_VAR 0 5
16899: PUSH
16900: LD_VAR 0 3
16904: PUSH
16905: LD_VAR 0 1
16909: ARRAY
16910: PUSH
16911: LD_INT 1
16913: ARRAY
16914: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
16915: LD_VAR 0 8
16919: PPUSH
16920: CALL_OW 301
16924: PUSH
16925: LD_VAR 0 5
16929: PUSH
16930: LD_VAR 0 8
16934: PPUSH
16935: CALL_OW 255
16939: NONEQUAL
16940: OR
16941: IFFALSE 16970
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
16943: LD_ADDR_EXP 66
16947: PUSH
16948: LD_EXP 66
16952: PPUSH
16953: LD_VAR 0 8
16957: PPUSH
16958: LD_INT 0
16960: PPUSH
16961: CALL_OW 1
16965: ST_TO_ADDR
// exit ;
16966: POP
16967: POP
16968: GO 17501
// end ; x := list [ i ] [ 3 ] ;
16970: LD_ADDR_VAR 0 6
16974: PUSH
16975: LD_VAR 0 3
16979: PUSH
16980: LD_VAR 0 1
16984: ARRAY
16985: PUSH
16986: LD_INT 3
16988: ARRAY
16989: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
16990: LD_ADDR_VAR 0 7
16994: PUSH
16995: LD_VAR 0 3
16999: PUSH
17000: LD_VAR 0 1
17004: ARRAY
17005: PUSH
17006: LD_INT 4
17008: ARRAY
17009: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
17010: LD_ADDR_VAR 0 9
17014: PUSH
17015: LD_VAR 0 6
17019: PPUSH
17020: LD_VAR 0 7
17024: PPUSH
17025: LD_INT 16
17027: PPUSH
17028: CALL 61678 0 3
17032: ST_TO_ADDR
// if not cratesNearbyPoint then
17033: LD_VAR 0 9
17037: NOT
17038: IFFALSE 17044
// exit ;
17040: POP
17041: POP
17042: GO 17501
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
17044: LD_ADDR_VAR 0 4
17048: PUSH
17049: LD_INT 22
17051: PUSH
17052: LD_VAR 0 5
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: PUSH
17061: LD_INT 3
17063: PUSH
17064: LD_INT 60
17066: PUSH
17067: EMPTY
17068: LIST
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 91
17076: PUSH
17077: LD_VAR 0 8
17081: PUSH
17082: LD_INT 6
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: LIST
17089: PUSH
17090: LD_INT 2
17092: PUSH
17093: LD_INT 25
17095: PUSH
17096: LD_INT 2
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PUSH
17103: LD_INT 25
17105: PUSH
17106: LD_INT 16
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: LIST
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: PPUSH
17124: CALL_OW 69
17128: PUSH
17129: LD_VAR 0 8
17133: PPUSH
17134: CALL_OW 313
17138: PPUSH
17139: LD_INT 3
17141: PUSH
17142: LD_INT 60
17144: PUSH
17145: EMPTY
17146: LIST
17147: PUSH
17148: EMPTY
17149: LIST
17150: LIST
17151: PUSH
17152: LD_INT 2
17154: PUSH
17155: LD_INT 25
17157: PUSH
17158: LD_INT 2
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: LD_INT 25
17167: PUSH
17168: LD_INT 16
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: LIST
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PPUSH
17184: CALL_OW 72
17188: UNION
17189: ST_TO_ADDR
// if tmp then
17190: LD_VAR 0 4
17194: IFFALSE 17274
// begin tmp := ShrinkArray ( tmp , 3 ) ;
17196: LD_ADDR_VAR 0 4
17200: PUSH
17201: LD_VAR 0 4
17205: PPUSH
17206: LD_INT 3
17208: PPUSH
17209: CALL 59647 0 2
17213: ST_TO_ADDR
// for j in tmp do
17214: LD_ADDR_VAR 0 2
17218: PUSH
17219: LD_VAR 0 4
17223: PUSH
17224: FOR_IN
17225: IFFALSE 17268
// begin if IsInUnit ( j ) then
17227: LD_VAR 0 2
17231: PPUSH
17232: CALL_OW 310
17236: IFFALSE 17247
// ComExit ( j ) ;
17238: LD_VAR 0 2
17242: PPUSH
17243: CALL 59730 0 1
// AddComCollect ( j , x , y ) ;
17247: LD_VAR 0 2
17251: PPUSH
17252: LD_VAR 0 6
17256: PPUSH
17257: LD_VAR 0 7
17261: PPUSH
17262: CALL_OW 177
// end ;
17266: GO 17224
17268: POP
17269: POP
// exit ;
17270: POP
17271: POP
17272: GO 17501
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
17274: LD_ADDR_VAR 0 4
17278: PUSH
17279: LD_INT 22
17281: PUSH
17282: LD_VAR 0 5
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PUSH
17291: LD_INT 91
17293: PUSH
17294: LD_VAR 0 8
17298: PUSH
17299: LD_INT 8
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 2
17309: PUSH
17310: LD_INT 34
17312: PUSH
17313: LD_INT 12
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PUSH
17320: LD_INT 34
17322: PUSH
17323: LD_INT 51
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: PUSH
17330: LD_INT 34
17332: PUSH
17333: LD_INT 32
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: PUSH
17340: LD_INT 34
17342: PUSH
17343: LD_INT 89
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: LIST
17361: PPUSH
17362: CALL_OW 69
17366: ST_TO_ADDR
// if tmp then
17367: LD_VAR 0 4
17371: IFFALSE 17497
// begin for j in tmp do
17373: LD_ADDR_VAR 0 2
17377: PUSH
17378: LD_VAR 0 4
17382: PUSH
17383: FOR_IN
17384: IFFALSE 17495
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
17386: LD_VAR 0 2
17390: PPUSH
17391: CALL_OW 262
17395: PUSH
17396: LD_INT 3
17398: EQUAL
17399: PUSH
17400: LD_VAR 0 2
17404: PPUSH
17405: CALL_OW 261
17409: PUSH
17410: LD_INT 20
17412: GREATER
17413: OR
17414: PUSH
17415: LD_VAR 0 2
17419: PPUSH
17420: CALL_OW 314
17424: NOT
17425: AND
17426: PUSH
17427: LD_VAR 0 2
17431: PPUSH
17432: CALL_OW 263
17436: PUSH
17437: LD_INT 1
17439: NONEQUAL
17440: PUSH
17441: LD_VAR 0 2
17445: PPUSH
17446: CALL_OW 311
17450: OR
17451: AND
17452: IFFALSE 17493
// begin ComCollect ( j , x , y ) ;
17454: LD_VAR 0 2
17458: PPUSH
17459: LD_VAR 0 6
17463: PPUSH
17464: LD_VAR 0 7
17468: PPUSH
17469: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
17473: LD_VAR 0 2
17477: PPUSH
17478: LD_VAR 0 8
17482: PPUSH
17483: CALL_OW 172
// exit ;
17487: POP
17488: POP
17489: POP
17490: POP
17491: GO 17501
// end ;
17493: GO 17383
17495: POP
17496: POP
// end ; end ;
17497: GO 16872
17499: POP
17500: POP
// end ; end_of_file
17501: PPOPN 9
17503: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
17504: LD_VAR 0 1
17508: PUSH
17509: LD_INT 200
17511: DOUBLE
17512: GREATEREQUAL
17513: IFFALSE 17521
17515: LD_INT 299
17517: DOUBLE
17518: LESSEQUAL
17519: IFTRUE 17523
17521: GO 17555
17523: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
17524: LD_VAR 0 1
17528: PPUSH
17529: LD_VAR 0 2
17533: PPUSH
17534: LD_VAR 0 3
17538: PPUSH
17539: LD_VAR 0 4
17543: PPUSH
17544: LD_VAR 0 5
17548: PPUSH
17549: CALL 18043 0 5
17553: GO 17632
17555: LD_INT 300
17557: DOUBLE
17558: GREATEREQUAL
17559: IFFALSE 17567
17561: LD_INT 399
17563: DOUBLE
17564: LESSEQUAL
17565: IFTRUE 17569
17567: GO 17631
17569: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
17570: LD_VAR 0 1
17574: PPUSH
17575: LD_VAR 0 2
17579: PPUSH
17580: LD_VAR 0 3
17584: PPUSH
17585: LD_VAR 0 4
17589: PPUSH
17590: LD_VAR 0 5
17594: PPUSH
17595: LD_VAR 0 6
17599: PPUSH
17600: LD_VAR 0 7
17604: PPUSH
17605: LD_VAR 0 8
17609: PPUSH
17610: LD_VAR 0 9
17614: PPUSH
17615: LD_VAR 0 10
17619: PPUSH
17620: LD_VAR 0 11
17624: PPUSH
17625: CALL 14213 0 11
17629: GO 17632
17631: POP
// end ;
17632: PPOPN 11
17634: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
17635: LD_VAR 0 1
17639: PPUSH
17640: LD_VAR 0 2
17644: PPUSH
17645: LD_VAR 0 3
17649: PPUSH
17650: LD_VAR 0 4
17654: PPUSH
17655: LD_VAR 0 5
17659: PPUSH
17660: CALL 17779 0 5
// end ; end_of_file
17664: PPOPN 5
17666: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17667: LD_INT 0
17669: PPUSH
17670: PPUSH
17671: PPUSH
17672: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17673: LD_VAR 0 1
17677: PPUSH
17678: CALL_OW 264
17682: PUSH
17683: LD_INT 91
17685: EQUAL
17686: IFFALSE 17758
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17688: LD_INT 68
17690: PPUSH
17691: LD_VAR 0 1
17695: PPUSH
17696: CALL_OW 255
17700: PPUSH
17701: CALL_OW 321
17705: PUSH
17706: LD_INT 2
17708: EQUAL
17709: IFFALSE 17721
// eff := 70 else
17711: LD_ADDR_VAR 0 4
17715: PUSH
17716: LD_INT 70
17718: ST_TO_ADDR
17719: GO 17729
// eff := 30 ;
17721: LD_ADDR_VAR 0 4
17725: PUSH
17726: LD_INT 30
17728: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17729: LD_VAR 0 1
17733: PPUSH
17734: CALL_OW 250
17738: PPUSH
17739: LD_VAR 0 1
17743: PPUSH
17744: CALL_OW 251
17748: PPUSH
17749: LD_VAR 0 4
17753: PPUSH
17754: CALL_OW 495
// end ; end ;
17758: LD_VAR 0 2
17762: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17763: LD_INT 0
17765: PPUSH
// end ;
17766: LD_VAR 0 4
17770: RET
// export function SOS_Command ( cmd ) ; begin
17771: LD_INT 0
17773: PPUSH
// end ;
17774: LD_VAR 0 2
17778: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17779: LD_INT 0
17781: PPUSH
// end ;
17782: LD_VAR 0 6
17786: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
17787: LD_INT 0
17789: PPUSH
17790: PPUSH
// if not vehicle or not factory then
17791: LD_VAR 0 1
17795: NOT
17796: PUSH
17797: LD_VAR 0 2
17801: NOT
17802: OR
17803: IFFALSE 17807
// exit ;
17805: GO 18038
// if factoryWaypoints >= factory then
17807: LD_EXP 65
17811: PUSH
17812: LD_VAR 0 2
17816: GREATEREQUAL
17817: IFFALSE 18038
// if factoryWaypoints [ factory ] then
17819: LD_EXP 65
17823: PUSH
17824: LD_VAR 0 2
17828: ARRAY
17829: IFFALSE 18038
// begin if GetControl ( vehicle ) = control_manual then
17831: LD_VAR 0 1
17835: PPUSH
17836: CALL_OW 263
17840: PUSH
17841: LD_INT 1
17843: EQUAL
17844: IFFALSE 17925
// begin driver := IsDrivenBy ( vehicle ) ;
17846: LD_ADDR_VAR 0 4
17850: PUSH
17851: LD_VAR 0 1
17855: PPUSH
17856: CALL_OW 311
17860: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17861: LD_VAR 0 4
17865: PPUSH
17866: LD_EXP 65
17870: PUSH
17871: LD_VAR 0 2
17875: ARRAY
17876: PUSH
17877: LD_INT 3
17879: ARRAY
17880: PPUSH
17881: LD_EXP 65
17885: PUSH
17886: LD_VAR 0 2
17890: ARRAY
17891: PUSH
17892: LD_INT 4
17894: ARRAY
17895: PPUSH
17896: CALL_OW 171
// AddComExitVehicle ( driver ) ;
17900: LD_VAR 0 4
17904: PPUSH
17905: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
17909: LD_VAR 0 4
17913: PPUSH
17914: LD_VAR 0 2
17918: PPUSH
17919: CALL_OW 180
// end else
17923: GO 18038
// if GetControl ( vehicle ) = control_remote then
17925: LD_VAR 0 1
17929: PPUSH
17930: CALL_OW 263
17934: PUSH
17935: LD_INT 2
17937: EQUAL
17938: IFFALSE 17999
// begin wait ( 0 0$2 ) ;
17940: LD_INT 70
17942: PPUSH
17943: CALL_OW 67
// if Connect ( vehicle ) then
17947: LD_VAR 0 1
17951: PPUSH
17952: CALL 30062 0 1
17956: IFFALSE 17997
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17958: LD_VAR 0 1
17962: PPUSH
17963: LD_EXP 65
17967: PUSH
17968: LD_VAR 0 2
17972: ARRAY
17973: PUSH
17974: LD_INT 3
17976: ARRAY
17977: PPUSH
17978: LD_EXP 65
17982: PUSH
17983: LD_VAR 0 2
17987: ARRAY
17988: PUSH
17989: LD_INT 4
17991: ARRAY
17992: PPUSH
17993: CALL_OW 171
// end else
17997: GO 18038
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
17999: LD_VAR 0 1
18003: PPUSH
18004: LD_EXP 65
18008: PUSH
18009: LD_VAR 0 2
18013: ARRAY
18014: PUSH
18015: LD_INT 3
18017: ARRAY
18018: PPUSH
18019: LD_EXP 65
18023: PUSH
18024: LD_VAR 0 2
18028: ARRAY
18029: PUSH
18030: LD_INT 4
18032: ARRAY
18033: PPUSH
18034: CALL_OW 171
// end ; end ;
18038: LD_VAR 0 3
18042: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18043: LD_INT 0
18045: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18046: LD_VAR 0 1
18050: PUSH
18051: LD_INT 250
18053: EQUAL
18054: PUSH
18055: LD_VAR 0 2
18059: PPUSH
18060: CALL_OW 264
18064: PUSH
18065: LD_INT 81
18067: EQUAL
18068: AND
18069: IFFALSE 18090
// MinerPlaceMine ( unit , x , y ) ;
18071: LD_VAR 0 2
18075: PPUSH
18076: LD_VAR 0 4
18080: PPUSH
18081: LD_VAR 0 5
18085: PPUSH
18086: CALL 20475 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18090: LD_VAR 0 1
18094: PUSH
18095: LD_INT 251
18097: EQUAL
18098: PUSH
18099: LD_VAR 0 2
18103: PPUSH
18104: CALL_OW 264
18108: PUSH
18109: LD_INT 81
18111: EQUAL
18112: AND
18113: IFFALSE 18134
// MinerDetonateMine ( unit , x , y ) ;
18115: LD_VAR 0 2
18119: PPUSH
18120: LD_VAR 0 4
18124: PPUSH
18125: LD_VAR 0 5
18129: PPUSH
18130: CALL 20750 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18134: LD_VAR 0 1
18138: PUSH
18139: LD_INT 252
18141: EQUAL
18142: PUSH
18143: LD_VAR 0 2
18147: PPUSH
18148: CALL_OW 264
18152: PUSH
18153: LD_INT 81
18155: EQUAL
18156: AND
18157: IFFALSE 18178
// MinerCreateMinefield ( unit , x , y ) ;
18159: LD_VAR 0 2
18163: PPUSH
18164: LD_VAR 0 4
18168: PPUSH
18169: LD_VAR 0 5
18173: PPUSH
18174: CALL 21167 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18178: LD_VAR 0 1
18182: PUSH
18183: LD_INT 253
18185: EQUAL
18186: PUSH
18187: LD_VAR 0 2
18191: PPUSH
18192: CALL_OW 257
18196: PUSH
18197: LD_INT 5
18199: EQUAL
18200: AND
18201: IFFALSE 18222
// ComBinocular ( unit , x , y ) ;
18203: LD_VAR 0 2
18207: PPUSH
18208: LD_VAR 0 4
18212: PPUSH
18213: LD_VAR 0 5
18217: PPUSH
18218: CALL 21536 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18222: LD_VAR 0 1
18226: PUSH
18227: LD_INT 254
18229: EQUAL
18230: PUSH
18231: LD_VAR 0 2
18235: PPUSH
18236: CALL_OW 264
18240: PUSH
18241: LD_INT 99
18243: EQUAL
18244: AND
18245: PUSH
18246: LD_VAR 0 3
18250: PPUSH
18251: CALL_OW 263
18255: PUSH
18256: LD_INT 3
18258: EQUAL
18259: AND
18260: IFFALSE 18276
// HackDestroyVehicle ( unit , selectedUnit ) ;
18262: LD_VAR 0 2
18266: PPUSH
18267: LD_VAR 0 3
18271: PPUSH
18272: CALL 19839 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18276: LD_VAR 0 1
18280: PUSH
18281: LD_INT 255
18283: EQUAL
18284: PUSH
18285: LD_VAR 0 2
18289: PPUSH
18290: CALL_OW 264
18294: PUSH
18295: LD_INT 14
18297: PUSH
18298: LD_INT 53
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: IN
18305: AND
18306: PUSH
18307: LD_VAR 0 4
18311: PPUSH
18312: LD_VAR 0 5
18316: PPUSH
18317: CALL_OW 488
18321: AND
18322: IFFALSE 18346
// CutTreeXYR ( unit , x , y , 12 ) ;
18324: LD_VAR 0 2
18328: PPUSH
18329: LD_VAR 0 4
18333: PPUSH
18334: LD_VAR 0 5
18338: PPUSH
18339: LD_INT 12
18341: PPUSH
18342: CALL 18409 0 4
// if cmd = 256 then
18346: LD_VAR 0 1
18350: PUSH
18351: LD_INT 256
18353: EQUAL
18354: IFFALSE 18375
// SetFactoryWaypoint ( unit , x , y ) ;
18356: LD_VAR 0 2
18360: PPUSH
18361: LD_VAR 0 4
18365: PPUSH
18366: LD_VAR 0 5
18370: PPUSH
18371: CALL 16193 0 3
// if cmd = 257 then
18375: LD_VAR 0 1
18379: PUSH
18380: LD_INT 257
18382: EQUAL
18383: IFFALSE 18404
// SetWarehouseGatheringPoint ( unit , x , y ) ;
18385: LD_VAR 0 2
18389: PPUSH
18390: LD_VAR 0 4
18394: PPUSH
18395: LD_VAR 0 5
18399: PPUSH
18400: CALL 16555 0 3
// end ;
18404: LD_VAR 0 6
18408: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18409: LD_INT 0
18411: PPUSH
18412: PPUSH
18413: PPUSH
18414: PPUSH
18415: PPUSH
18416: PPUSH
18417: PPUSH
18418: PPUSH
18419: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18420: LD_VAR 0 1
18424: NOT
18425: PUSH
18426: LD_VAR 0 2
18430: PPUSH
18431: LD_VAR 0 3
18435: PPUSH
18436: CALL_OW 488
18440: NOT
18441: OR
18442: PUSH
18443: LD_VAR 0 4
18447: NOT
18448: OR
18449: IFFALSE 18453
// exit ;
18451: GO 18793
// list := [ ] ;
18453: LD_ADDR_VAR 0 13
18457: PUSH
18458: EMPTY
18459: ST_TO_ADDR
// if x - r < 0 then
18460: LD_VAR 0 2
18464: PUSH
18465: LD_VAR 0 4
18469: MINUS
18470: PUSH
18471: LD_INT 0
18473: LESS
18474: IFFALSE 18486
// min_x := 0 else
18476: LD_ADDR_VAR 0 7
18480: PUSH
18481: LD_INT 0
18483: ST_TO_ADDR
18484: GO 18502
// min_x := x - r ;
18486: LD_ADDR_VAR 0 7
18490: PUSH
18491: LD_VAR 0 2
18495: PUSH
18496: LD_VAR 0 4
18500: MINUS
18501: ST_TO_ADDR
// if y - r < 0 then
18502: LD_VAR 0 3
18506: PUSH
18507: LD_VAR 0 4
18511: MINUS
18512: PUSH
18513: LD_INT 0
18515: LESS
18516: IFFALSE 18528
// min_y := 0 else
18518: LD_ADDR_VAR 0 8
18522: PUSH
18523: LD_INT 0
18525: ST_TO_ADDR
18526: GO 18544
// min_y := y - r ;
18528: LD_ADDR_VAR 0 8
18532: PUSH
18533: LD_VAR 0 3
18537: PUSH
18538: LD_VAR 0 4
18542: MINUS
18543: ST_TO_ADDR
// max_x := x + r ;
18544: LD_ADDR_VAR 0 9
18548: PUSH
18549: LD_VAR 0 2
18553: PUSH
18554: LD_VAR 0 4
18558: PLUS
18559: ST_TO_ADDR
// max_y := y + r ;
18560: LD_ADDR_VAR 0 10
18564: PUSH
18565: LD_VAR 0 3
18569: PUSH
18570: LD_VAR 0 4
18574: PLUS
18575: ST_TO_ADDR
// for _x = min_x to max_x do
18576: LD_ADDR_VAR 0 11
18580: PUSH
18581: DOUBLE
18582: LD_VAR 0 7
18586: DEC
18587: ST_TO_ADDR
18588: LD_VAR 0 9
18592: PUSH
18593: FOR_TO
18594: IFFALSE 18711
// for _y = min_y to max_y do
18596: LD_ADDR_VAR 0 12
18600: PUSH
18601: DOUBLE
18602: LD_VAR 0 8
18606: DEC
18607: ST_TO_ADDR
18608: LD_VAR 0 10
18612: PUSH
18613: FOR_TO
18614: IFFALSE 18707
// begin if not ValidHex ( _x , _y ) then
18616: LD_VAR 0 11
18620: PPUSH
18621: LD_VAR 0 12
18625: PPUSH
18626: CALL_OW 488
18630: NOT
18631: IFFALSE 18635
// continue ;
18633: GO 18613
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18635: LD_VAR 0 11
18639: PPUSH
18640: LD_VAR 0 12
18644: PPUSH
18645: CALL_OW 351
18649: PUSH
18650: LD_VAR 0 11
18654: PPUSH
18655: LD_VAR 0 12
18659: PPUSH
18660: CALL_OW 554
18664: AND
18665: IFFALSE 18705
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18667: LD_ADDR_VAR 0 13
18671: PUSH
18672: LD_VAR 0 13
18676: PPUSH
18677: LD_VAR 0 13
18681: PUSH
18682: LD_INT 1
18684: PLUS
18685: PPUSH
18686: LD_VAR 0 11
18690: PUSH
18691: LD_VAR 0 12
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PPUSH
18700: CALL_OW 2
18704: ST_TO_ADDR
// end ;
18705: GO 18613
18707: POP
18708: POP
18709: GO 18593
18711: POP
18712: POP
// if not list then
18713: LD_VAR 0 13
18717: NOT
18718: IFFALSE 18722
// exit ;
18720: GO 18793
// for i in list do
18722: LD_ADDR_VAR 0 6
18726: PUSH
18727: LD_VAR 0 13
18731: PUSH
18732: FOR_IN
18733: IFFALSE 18791
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18735: LD_VAR 0 1
18739: PPUSH
18740: LD_STRING M
18742: PUSH
18743: LD_VAR 0 6
18747: PUSH
18748: LD_INT 1
18750: ARRAY
18751: PUSH
18752: LD_VAR 0 6
18756: PUSH
18757: LD_INT 2
18759: ARRAY
18760: PUSH
18761: LD_INT 0
18763: PUSH
18764: LD_INT 0
18766: PUSH
18767: LD_INT 0
18769: PUSH
18770: LD_INT 0
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: PUSH
18782: EMPTY
18783: LIST
18784: PPUSH
18785: CALL_OW 447
18789: GO 18732
18791: POP
18792: POP
// end ;
18793: LD_VAR 0 5
18797: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18798: LD_EXP 68
18802: NOT
18803: IFFALSE 18853
18805: GO 18807
18807: DISABLE
// begin initHack := true ;
18808: LD_ADDR_EXP 68
18812: PUSH
18813: LD_INT 1
18815: ST_TO_ADDR
// hackTanks := [ ] ;
18816: LD_ADDR_EXP 69
18820: PUSH
18821: EMPTY
18822: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18823: LD_ADDR_EXP 70
18827: PUSH
18828: EMPTY
18829: ST_TO_ADDR
// hackLimit := 3 ;
18830: LD_ADDR_EXP 71
18834: PUSH
18835: LD_INT 3
18837: ST_TO_ADDR
// hackDist := 12 ;
18838: LD_ADDR_EXP 72
18842: PUSH
18843: LD_INT 12
18845: ST_TO_ADDR
// hackCounter := [ ] ;
18846: LD_ADDR_EXP 73
18850: PUSH
18851: EMPTY
18852: ST_TO_ADDR
// end ;
18853: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18854: LD_EXP 68
18858: PUSH
18859: LD_INT 34
18861: PUSH
18862: LD_INT 99
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PPUSH
18869: CALL_OW 69
18873: AND
18874: IFFALSE 19127
18876: GO 18878
18878: DISABLE
18879: LD_INT 0
18881: PPUSH
18882: PPUSH
// begin enable ;
18883: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18884: LD_ADDR_VAR 0 1
18888: PUSH
18889: LD_INT 34
18891: PUSH
18892: LD_INT 99
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PPUSH
18899: CALL_OW 69
18903: PUSH
18904: FOR_IN
18905: IFFALSE 19125
// begin if not i in hackTanks then
18907: LD_VAR 0 1
18911: PUSH
18912: LD_EXP 69
18916: IN
18917: NOT
18918: IFFALSE 19001
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
18920: LD_ADDR_EXP 69
18924: PUSH
18925: LD_EXP 69
18929: PPUSH
18930: LD_EXP 69
18934: PUSH
18935: LD_INT 1
18937: PLUS
18938: PPUSH
18939: LD_VAR 0 1
18943: PPUSH
18944: CALL_OW 1
18948: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
18949: LD_ADDR_EXP 70
18953: PUSH
18954: LD_EXP 70
18958: PPUSH
18959: LD_EXP 70
18963: PUSH
18964: LD_INT 1
18966: PLUS
18967: PPUSH
18968: EMPTY
18969: PPUSH
18970: CALL_OW 1
18974: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
18975: LD_ADDR_EXP 73
18979: PUSH
18980: LD_EXP 73
18984: PPUSH
18985: LD_EXP 73
18989: PUSH
18990: LD_INT 1
18992: PLUS
18993: PPUSH
18994: EMPTY
18995: PPUSH
18996: CALL_OW 1
19000: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19001: LD_VAR 0 1
19005: PPUSH
19006: CALL_OW 302
19010: NOT
19011: IFFALSE 19024
// begin HackUnlinkAll ( i ) ;
19013: LD_VAR 0 1
19017: PPUSH
19018: CALL 19130 0 1
// continue ;
19022: GO 18904
// end ; HackCheckCapturedStatus ( i ) ;
19024: LD_VAR 0 1
19028: PPUSH
19029: CALL 19573 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19033: LD_ADDR_VAR 0 2
19037: PUSH
19038: LD_INT 81
19040: PUSH
19041: LD_VAR 0 1
19045: PPUSH
19046: CALL_OW 255
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 33
19057: PUSH
19058: LD_INT 3
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 91
19067: PUSH
19068: LD_VAR 0 1
19072: PUSH
19073: LD_EXP 72
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: LIST
19082: PUSH
19083: LD_INT 50
19085: PUSH
19086: EMPTY
19087: LIST
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: PPUSH
19095: CALL_OW 69
19099: ST_TO_ADDR
// if not tmp then
19100: LD_VAR 0 2
19104: NOT
19105: IFFALSE 19109
// continue ;
19107: GO 18904
// HackLink ( i , tmp ) ;
19109: LD_VAR 0 1
19113: PPUSH
19114: LD_VAR 0 2
19118: PPUSH
19119: CALL 19266 0 2
// end ;
19123: GO 18904
19125: POP
19126: POP
// end ;
19127: PPOPN 2
19129: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19130: LD_INT 0
19132: PPUSH
19133: PPUSH
19134: PPUSH
// if not hack in hackTanks then
19135: LD_VAR 0 1
19139: PUSH
19140: LD_EXP 69
19144: IN
19145: NOT
19146: IFFALSE 19150
// exit ;
19148: GO 19261
// index := GetElementIndex ( hackTanks , hack ) ;
19150: LD_ADDR_VAR 0 4
19154: PUSH
19155: LD_EXP 69
19159: PPUSH
19160: LD_VAR 0 1
19164: PPUSH
19165: CALL 26878 0 2
19169: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19170: LD_EXP 70
19174: PUSH
19175: LD_VAR 0 4
19179: ARRAY
19180: IFFALSE 19261
// begin for i in hackTanksCaptured [ index ] do
19182: LD_ADDR_VAR 0 3
19186: PUSH
19187: LD_EXP 70
19191: PUSH
19192: LD_VAR 0 4
19196: ARRAY
19197: PUSH
19198: FOR_IN
19199: IFFALSE 19225
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19201: LD_VAR 0 3
19205: PUSH
19206: LD_INT 1
19208: ARRAY
19209: PPUSH
19210: LD_VAR 0 3
19214: PUSH
19215: LD_INT 2
19217: ARRAY
19218: PPUSH
19219: CALL_OW 235
19223: GO 19198
19225: POP
19226: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19227: LD_ADDR_EXP 70
19231: PUSH
19232: LD_EXP 70
19236: PPUSH
19237: LD_VAR 0 4
19241: PPUSH
19242: EMPTY
19243: PPUSH
19244: CALL_OW 1
19248: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19249: LD_VAR 0 1
19253: PPUSH
19254: LD_INT 0
19256: PPUSH
19257: CALL_OW 505
// end ; end ;
19261: LD_VAR 0 2
19265: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19266: LD_INT 0
19268: PPUSH
19269: PPUSH
19270: PPUSH
// if not hack in hackTanks or not vehicles then
19271: LD_VAR 0 1
19275: PUSH
19276: LD_EXP 69
19280: IN
19281: NOT
19282: PUSH
19283: LD_VAR 0 2
19287: NOT
19288: OR
19289: IFFALSE 19293
// exit ;
19291: GO 19568
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19293: LD_ADDR_VAR 0 2
19297: PUSH
19298: LD_VAR 0 1
19302: PPUSH
19303: LD_VAR 0 2
19307: PPUSH
19308: LD_INT 1
19310: PPUSH
19311: LD_INT 1
19313: PPUSH
19314: CALL 27528 0 4
19318: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19319: LD_ADDR_VAR 0 5
19323: PUSH
19324: LD_EXP 69
19328: PPUSH
19329: LD_VAR 0 1
19333: PPUSH
19334: CALL 26878 0 2
19338: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19339: LD_EXP 70
19343: PUSH
19344: LD_VAR 0 5
19348: ARRAY
19349: PUSH
19350: LD_EXP 71
19354: LESS
19355: IFFALSE 19544
// begin for i := 1 to vehicles do
19357: LD_ADDR_VAR 0 4
19361: PUSH
19362: DOUBLE
19363: LD_INT 1
19365: DEC
19366: ST_TO_ADDR
19367: LD_VAR 0 2
19371: PUSH
19372: FOR_TO
19373: IFFALSE 19542
// begin if hackTanksCaptured [ index ] = hackLimit then
19375: LD_EXP 70
19379: PUSH
19380: LD_VAR 0 5
19384: ARRAY
19385: PUSH
19386: LD_EXP 71
19390: EQUAL
19391: IFFALSE 19395
// break ;
19393: GO 19542
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19395: LD_ADDR_EXP 73
19399: PUSH
19400: LD_EXP 73
19404: PPUSH
19405: LD_VAR 0 5
19409: PPUSH
19410: LD_EXP 73
19414: PUSH
19415: LD_VAR 0 5
19419: ARRAY
19420: PUSH
19421: LD_INT 1
19423: PLUS
19424: PPUSH
19425: CALL_OW 1
19429: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19430: LD_ADDR_EXP 70
19434: PUSH
19435: LD_EXP 70
19439: PPUSH
19440: LD_VAR 0 5
19444: PUSH
19445: LD_EXP 70
19449: PUSH
19450: LD_VAR 0 5
19454: ARRAY
19455: PUSH
19456: LD_INT 1
19458: PLUS
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PPUSH
19464: LD_VAR 0 2
19468: PUSH
19469: LD_VAR 0 4
19473: ARRAY
19474: PUSH
19475: LD_VAR 0 2
19479: PUSH
19480: LD_VAR 0 4
19484: ARRAY
19485: PPUSH
19486: CALL_OW 255
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PPUSH
19495: CALL 27093 0 3
19499: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19500: LD_VAR 0 2
19504: PUSH
19505: LD_VAR 0 4
19509: ARRAY
19510: PPUSH
19511: LD_VAR 0 1
19515: PPUSH
19516: CALL_OW 255
19520: PPUSH
19521: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19525: LD_VAR 0 2
19529: PUSH
19530: LD_VAR 0 4
19534: ARRAY
19535: PPUSH
19536: CALL_OW 141
// end ;
19540: GO 19372
19542: POP
19543: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19544: LD_VAR 0 1
19548: PPUSH
19549: LD_EXP 70
19553: PUSH
19554: LD_VAR 0 5
19558: ARRAY
19559: PUSH
19560: LD_INT 0
19562: PLUS
19563: PPUSH
19564: CALL_OW 505
// end ;
19568: LD_VAR 0 3
19572: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19573: LD_INT 0
19575: PPUSH
19576: PPUSH
19577: PPUSH
19578: PPUSH
// if not hack in hackTanks then
19579: LD_VAR 0 1
19583: PUSH
19584: LD_EXP 69
19588: IN
19589: NOT
19590: IFFALSE 19594
// exit ;
19592: GO 19834
// index := GetElementIndex ( hackTanks , hack ) ;
19594: LD_ADDR_VAR 0 4
19598: PUSH
19599: LD_EXP 69
19603: PPUSH
19604: LD_VAR 0 1
19608: PPUSH
19609: CALL 26878 0 2
19613: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19614: LD_ADDR_VAR 0 3
19618: PUSH
19619: DOUBLE
19620: LD_EXP 70
19624: PUSH
19625: LD_VAR 0 4
19629: ARRAY
19630: INC
19631: ST_TO_ADDR
19632: LD_INT 1
19634: PUSH
19635: FOR_DOWNTO
19636: IFFALSE 19808
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19638: LD_ADDR_VAR 0 5
19642: PUSH
19643: LD_EXP 70
19647: PUSH
19648: LD_VAR 0 4
19652: ARRAY
19653: PUSH
19654: LD_VAR 0 3
19658: ARRAY
19659: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19660: LD_VAR 0 5
19664: PUSH
19665: LD_INT 1
19667: ARRAY
19668: PPUSH
19669: CALL_OW 302
19673: NOT
19674: PUSH
19675: LD_VAR 0 5
19679: PUSH
19680: LD_INT 1
19682: ARRAY
19683: PPUSH
19684: CALL_OW 255
19688: PUSH
19689: LD_VAR 0 1
19693: PPUSH
19694: CALL_OW 255
19698: NONEQUAL
19699: OR
19700: IFFALSE 19806
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19702: LD_VAR 0 5
19706: PUSH
19707: LD_INT 1
19709: ARRAY
19710: PPUSH
19711: CALL_OW 305
19715: PUSH
19716: LD_VAR 0 5
19720: PUSH
19721: LD_INT 1
19723: ARRAY
19724: PPUSH
19725: CALL_OW 255
19729: PUSH
19730: LD_VAR 0 1
19734: PPUSH
19735: CALL_OW 255
19739: EQUAL
19740: AND
19741: IFFALSE 19765
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19743: LD_VAR 0 5
19747: PUSH
19748: LD_INT 1
19750: ARRAY
19751: PPUSH
19752: LD_VAR 0 5
19756: PUSH
19757: LD_INT 2
19759: ARRAY
19760: PPUSH
19761: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19765: LD_ADDR_EXP 70
19769: PUSH
19770: LD_EXP 70
19774: PPUSH
19775: LD_VAR 0 4
19779: PPUSH
19780: LD_EXP 70
19784: PUSH
19785: LD_VAR 0 4
19789: ARRAY
19790: PPUSH
19791: LD_VAR 0 3
19795: PPUSH
19796: CALL_OW 3
19800: PPUSH
19801: CALL_OW 1
19805: ST_TO_ADDR
// end ; end ;
19806: GO 19635
19808: POP
19809: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19810: LD_VAR 0 1
19814: PPUSH
19815: LD_EXP 70
19819: PUSH
19820: LD_VAR 0 4
19824: ARRAY
19825: PUSH
19826: LD_INT 0
19828: PLUS
19829: PPUSH
19830: CALL_OW 505
// end ;
19834: LD_VAR 0 2
19838: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19839: LD_INT 0
19841: PPUSH
19842: PPUSH
19843: PPUSH
19844: PPUSH
// if not hack in hackTanks then
19845: LD_VAR 0 1
19849: PUSH
19850: LD_EXP 69
19854: IN
19855: NOT
19856: IFFALSE 19860
// exit ;
19858: GO 19945
// index := GetElementIndex ( hackTanks , hack ) ;
19860: LD_ADDR_VAR 0 5
19864: PUSH
19865: LD_EXP 69
19869: PPUSH
19870: LD_VAR 0 1
19874: PPUSH
19875: CALL 26878 0 2
19879: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19880: LD_ADDR_VAR 0 4
19884: PUSH
19885: DOUBLE
19886: LD_INT 1
19888: DEC
19889: ST_TO_ADDR
19890: LD_EXP 70
19894: PUSH
19895: LD_VAR 0 5
19899: ARRAY
19900: PUSH
19901: FOR_TO
19902: IFFALSE 19943
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19904: LD_EXP 70
19908: PUSH
19909: LD_VAR 0 5
19913: ARRAY
19914: PUSH
19915: LD_VAR 0 4
19919: ARRAY
19920: PUSH
19921: LD_INT 1
19923: ARRAY
19924: PUSH
19925: LD_VAR 0 2
19929: EQUAL
19930: IFFALSE 19941
// KillUnit ( vehicle ) ;
19932: LD_VAR 0 2
19936: PPUSH
19937: CALL_OW 66
19941: GO 19901
19943: POP
19944: POP
// end ;
19945: LD_VAR 0 3
19949: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
19950: LD_EXP 74
19954: NOT
19955: IFFALSE 19990
19957: GO 19959
19959: DISABLE
// begin initMiner := true ;
19960: LD_ADDR_EXP 74
19964: PUSH
19965: LD_INT 1
19967: ST_TO_ADDR
// minersList := [ ] ;
19968: LD_ADDR_EXP 75
19972: PUSH
19973: EMPTY
19974: ST_TO_ADDR
// minerMinesList := [ ] ;
19975: LD_ADDR_EXP 76
19979: PUSH
19980: EMPTY
19981: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
19982: LD_ADDR_EXP 77
19986: PUSH
19987: LD_INT 5
19989: ST_TO_ADDR
// end ;
19990: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
19991: LD_EXP 74
19995: PUSH
19996: LD_INT 34
19998: PUSH
19999: LD_INT 81
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: PPUSH
20006: CALL_OW 69
20010: AND
20011: IFFALSE 20472
20013: GO 20015
20015: DISABLE
20016: LD_INT 0
20018: PPUSH
20019: PPUSH
20020: PPUSH
20021: PPUSH
// begin enable ;
20022: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20023: LD_ADDR_VAR 0 1
20027: PUSH
20028: LD_INT 34
20030: PUSH
20031: LD_INT 81
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PPUSH
20038: CALL_OW 69
20042: PUSH
20043: FOR_IN
20044: IFFALSE 20116
// begin if not i in minersList then
20046: LD_VAR 0 1
20050: PUSH
20051: LD_EXP 75
20055: IN
20056: NOT
20057: IFFALSE 20114
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20059: LD_ADDR_EXP 75
20063: PUSH
20064: LD_EXP 75
20068: PPUSH
20069: LD_EXP 75
20073: PUSH
20074: LD_INT 1
20076: PLUS
20077: PPUSH
20078: LD_VAR 0 1
20082: PPUSH
20083: CALL_OW 1
20087: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20088: LD_ADDR_EXP 76
20092: PUSH
20093: LD_EXP 76
20097: PPUSH
20098: LD_EXP 76
20102: PUSH
20103: LD_INT 1
20105: PLUS
20106: PPUSH
20107: EMPTY
20108: PPUSH
20109: CALL_OW 1
20113: ST_TO_ADDR
// end end ;
20114: GO 20043
20116: POP
20117: POP
// for i := minerMinesList downto 1 do
20118: LD_ADDR_VAR 0 1
20122: PUSH
20123: DOUBLE
20124: LD_EXP 76
20128: INC
20129: ST_TO_ADDR
20130: LD_INT 1
20132: PUSH
20133: FOR_DOWNTO
20134: IFFALSE 20470
// begin if IsLive ( minersList [ i ] ) then
20136: LD_EXP 75
20140: PUSH
20141: LD_VAR 0 1
20145: ARRAY
20146: PPUSH
20147: CALL_OW 300
20151: IFFALSE 20179
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20153: LD_EXP 75
20157: PUSH
20158: LD_VAR 0 1
20162: ARRAY
20163: PPUSH
20164: LD_EXP 76
20168: PUSH
20169: LD_VAR 0 1
20173: ARRAY
20174: PPUSH
20175: CALL_OW 505
// if not minerMinesList [ i ] then
20179: LD_EXP 76
20183: PUSH
20184: LD_VAR 0 1
20188: ARRAY
20189: NOT
20190: IFFALSE 20194
// continue ;
20192: GO 20133
// for j := minerMinesList [ i ] downto 1 do
20194: LD_ADDR_VAR 0 2
20198: PUSH
20199: DOUBLE
20200: LD_EXP 76
20204: PUSH
20205: LD_VAR 0 1
20209: ARRAY
20210: INC
20211: ST_TO_ADDR
20212: LD_INT 1
20214: PUSH
20215: FOR_DOWNTO
20216: IFFALSE 20466
// begin side := GetSide ( minersList [ i ] ) ;
20218: LD_ADDR_VAR 0 3
20222: PUSH
20223: LD_EXP 75
20227: PUSH
20228: LD_VAR 0 1
20232: ARRAY
20233: PPUSH
20234: CALL_OW 255
20238: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20239: LD_ADDR_VAR 0 4
20243: PUSH
20244: LD_EXP 76
20248: PUSH
20249: LD_VAR 0 1
20253: ARRAY
20254: PUSH
20255: LD_VAR 0 2
20259: ARRAY
20260: PUSH
20261: LD_INT 1
20263: ARRAY
20264: PPUSH
20265: LD_EXP 76
20269: PUSH
20270: LD_VAR 0 1
20274: ARRAY
20275: PUSH
20276: LD_VAR 0 2
20280: ARRAY
20281: PUSH
20282: LD_INT 2
20284: ARRAY
20285: PPUSH
20286: CALL_OW 428
20290: ST_TO_ADDR
// if not tmp then
20291: LD_VAR 0 4
20295: NOT
20296: IFFALSE 20300
// continue ;
20298: GO 20215
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20300: LD_VAR 0 4
20304: PUSH
20305: LD_INT 81
20307: PUSH
20308: LD_VAR 0 3
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PPUSH
20317: CALL_OW 69
20321: IN
20322: PUSH
20323: LD_EXP 76
20327: PUSH
20328: LD_VAR 0 1
20332: ARRAY
20333: PUSH
20334: LD_VAR 0 2
20338: ARRAY
20339: PUSH
20340: LD_INT 1
20342: ARRAY
20343: PPUSH
20344: LD_EXP 76
20348: PUSH
20349: LD_VAR 0 1
20353: ARRAY
20354: PUSH
20355: LD_VAR 0 2
20359: ARRAY
20360: PUSH
20361: LD_INT 2
20363: ARRAY
20364: PPUSH
20365: CALL_OW 458
20369: AND
20370: IFFALSE 20464
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20372: LD_EXP 76
20376: PUSH
20377: LD_VAR 0 1
20381: ARRAY
20382: PUSH
20383: LD_VAR 0 2
20387: ARRAY
20388: PUSH
20389: LD_INT 1
20391: ARRAY
20392: PPUSH
20393: LD_EXP 76
20397: PUSH
20398: LD_VAR 0 1
20402: ARRAY
20403: PUSH
20404: LD_VAR 0 2
20408: ARRAY
20409: PUSH
20410: LD_INT 2
20412: ARRAY
20413: PPUSH
20414: LD_VAR 0 3
20418: PPUSH
20419: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20423: LD_ADDR_EXP 76
20427: PUSH
20428: LD_EXP 76
20432: PPUSH
20433: LD_VAR 0 1
20437: PPUSH
20438: LD_EXP 76
20442: PUSH
20443: LD_VAR 0 1
20447: ARRAY
20448: PPUSH
20449: LD_VAR 0 2
20453: PPUSH
20454: CALL_OW 3
20458: PPUSH
20459: CALL_OW 1
20463: ST_TO_ADDR
// end ; end ;
20464: GO 20215
20466: POP
20467: POP
// end ;
20468: GO 20133
20470: POP
20471: POP
// end ;
20472: PPOPN 4
20474: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20475: LD_INT 0
20477: PPUSH
20478: PPUSH
// result := false ;
20479: LD_ADDR_VAR 0 4
20483: PUSH
20484: LD_INT 0
20486: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20487: LD_VAR 0 1
20491: PPUSH
20492: CALL_OW 264
20496: PUSH
20497: LD_INT 81
20499: EQUAL
20500: NOT
20501: IFFALSE 20505
// exit ;
20503: GO 20745
// index := GetElementIndex ( minersList , unit ) ;
20505: LD_ADDR_VAR 0 5
20509: PUSH
20510: LD_EXP 75
20514: PPUSH
20515: LD_VAR 0 1
20519: PPUSH
20520: CALL 26878 0 2
20524: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20525: LD_EXP 76
20529: PUSH
20530: LD_VAR 0 5
20534: ARRAY
20535: PUSH
20536: LD_EXP 77
20540: GREATEREQUAL
20541: IFFALSE 20545
// exit ;
20543: GO 20745
// ComMoveXY ( unit , x , y ) ;
20545: LD_VAR 0 1
20549: PPUSH
20550: LD_VAR 0 2
20554: PPUSH
20555: LD_VAR 0 3
20559: PPUSH
20560: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20564: LD_INT 35
20566: PPUSH
20567: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20571: LD_VAR 0 1
20575: PPUSH
20576: LD_VAR 0 2
20580: PPUSH
20581: LD_VAR 0 3
20585: PPUSH
20586: CALL 58141 0 3
20590: NOT
20591: PUSH
20592: LD_VAR 0 1
20596: PPUSH
20597: CALL_OW 314
20601: AND
20602: IFFALSE 20606
// exit ;
20604: GO 20745
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20606: LD_VAR 0 2
20610: PPUSH
20611: LD_VAR 0 3
20615: PPUSH
20616: CALL_OW 428
20620: PUSH
20621: LD_VAR 0 1
20625: EQUAL
20626: PUSH
20627: LD_VAR 0 1
20631: PPUSH
20632: CALL_OW 314
20636: NOT
20637: AND
20638: IFFALSE 20564
// PlaySoundXY ( x , y , PlantMine ) ;
20640: LD_VAR 0 2
20644: PPUSH
20645: LD_VAR 0 3
20649: PPUSH
20650: LD_STRING PlantMine
20652: PPUSH
20653: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20657: LD_VAR 0 2
20661: PPUSH
20662: LD_VAR 0 3
20666: PPUSH
20667: LD_VAR 0 1
20671: PPUSH
20672: CALL_OW 255
20676: PPUSH
20677: LD_INT 0
20679: PPUSH
20680: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20684: LD_ADDR_EXP 76
20688: PUSH
20689: LD_EXP 76
20693: PPUSH
20694: LD_VAR 0 5
20698: PUSH
20699: LD_EXP 76
20703: PUSH
20704: LD_VAR 0 5
20708: ARRAY
20709: PUSH
20710: LD_INT 1
20712: PLUS
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PPUSH
20718: LD_VAR 0 2
20722: PUSH
20723: LD_VAR 0 3
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PPUSH
20732: CALL 27093 0 3
20736: ST_TO_ADDR
// result := true ;
20737: LD_ADDR_VAR 0 4
20741: PUSH
20742: LD_INT 1
20744: ST_TO_ADDR
// end ;
20745: LD_VAR 0 4
20749: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20750: LD_INT 0
20752: PPUSH
20753: PPUSH
20754: PPUSH
// if not unit in minersList then
20755: LD_VAR 0 1
20759: PUSH
20760: LD_EXP 75
20764: IN
20765: NOT
20766: IFFALSE 20770
// exit ;
20768: GO 21162
// index := GetElementIndex ( minersList , unit ) ;
20770: LD_ADDR_VAR 0 6
20774: PUSH
20775: LD_EXP 75
20779: PPUSH
20780: LD_VAR 0 1
20784: PPUSH
20785: CALL 26878 0 2
20789: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20790: LD_ADDR_VAR 0 5
20794: PUSH
20795: DOUBLE
20796: LD_EXP 76
20800: PUSH
20801: LD_VAR 0 6
20805: ARRAY
20806: INC
20807: ST_TO_ADDR
20808: LD_INT 1
20810: PUSH
20811: FOR_DOWNTO
20812: IFFALSE 20973
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20814: LD_EXP 76
20818: PUSH
20819: LD_VAR 0 6
20823: ARRAY
20824: PUSH
20825: LD_VAR 0 5
20829: ARRAY
20830: PUSH
20831: LD_INT 1
20833: ARRAY
20834: PUSH
20835: LD_VAR 0 2
20839: EQUAL
20840: PUSH
20841: LD_EXP 76
20845: PUSH
20846: LD_VAR 0 6
20850: ARRAY
20851: PUSH
20852: LD_VAR 0 5
20856: ARRAY
20857: PUSH
20858: LD_INT 2
20860: ARRAY
20861: PUSH
20862: LD_VAR 0 3
20866: EQUAL
20867: AND
20868: IFFALSE 20971
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20870: LD_EXP 76
20874: PUSH
20875: LD_VAR 0 6
20879: ARRAY
20880: PUSH
20881: LD_VAR 0 5
20885: ARRAY
20886: PUSH
20887: LD_INT 1
20889: ARRAY
20890: PPUSH
20891: LD_EXP 76
20895: PUSH
20896: LD_VAR 0 6
20900: ARRAY
20901: PUSH
20902: LD_VAR 0 5
20906: ARRAY
20907: PUSH
20908: LD_INT 2
20910: ARRAY
20911: PPUSH
20912: LD_VAR 0 1
20916: PPUSH
20917: CALL_OW 255
20921: PPUSH
20922: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
20926: LD_ADDR_EXP 76
20930: PUSH
20931: LD_EXP 76
20935: PPUSH
20936: LD_VAR 0 6
20940: PPUSH
20941: LD_EXP 76
20945: PUSH
20946: LD_VAR 0 6
20950: ARRAY
20951: PPUSH
20952: LD_VAR 0 5
20956: PPUSH
20957: CALL_OW 3
20961: PPUSH
20962: CALL_OW 1
20966: ST_TO_ADDR
// exit ;
20967: POP
20968: POP
20969: GO 21162
// end ; end ;
20971: GO 20811
20973: POP
20974: POP
// for i := minerMinesList [ index ] downto 1 do
20975: LD_ADDR_VAR 0 5
20979: PUSH
20980: DOUBLE
20981: LD_EXP 76
20985: PUSH
20986: LD_VAR 0 6
20990: ARRAY
20991: INC
20992: ST_TO_ADDR
20993: LD_INT 1
20995: PUSH
20996: FOR_DOWNTO
20997: IFFALSE 21160
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
20999: LD_EXP 76
21003: PUSH
21004: LD_VAR 0 6
21008: ARRAY
21009: PUSH
21010: LD_VAR 0 5
21014: ARRAY
21015: PUSH
21016: LD_INT 1
21018: ARRAY
21019: PPUSH
21020: LD_EXP 76
21024: PUSH
21025: LD_VAR 0 6
21029: ARRAY
21030: PUSH
21031: LD_VAR 0 5
21035: ARRAY
21036: PUSH
21037: LD_INT 2
21039: ARRAY
21040: PPUSH
21041: LD_VAR 0 2
21045: PPUSH
21046: LD_VAR 0 3
21050: PPUSH
21051: CALL_OW 298
21055: PUSH
21056: LD_INT 6
21058: LESS
21059: IFFALSE 21158
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21061: LD_EXP 76
21065: PUSH
21066: LD_VAR 0 6
21070: ARRAY
21071: PUSH
21072: LD_VAR 0 5
21076: ARRAY
21077: PUSH
21078: LD_INT 1
21080: ARRAY
21081: PPUSH
21082: LD_EXP 76
21086: PUSH
21087: LD_VAR 0 6
21091: ARRAY
21092: PUSH
21093: LD_VAR 0 5
21097: ARRAY
21098: PUSH
21099: LD_INT 2
21101: ARRAY
21102: PPUSH
21103: LD_VAR 0 1
21107: PPUSH
21108: CALL_OW 255
21112: PPUSH
21113: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21117: LD_ADDR_EXP 76
21121: PUSH
21122: LD_EXP 76
21126: PPUSH
21127: LD_VAR 0 6
21131: PPUSH
21132: LD_EXP 76
21136: PUSH
21137: LD_VAR 0 6
21141: ARRAY
21142: PPUSH
21143: LD_VAR 0 5
21147: PPUSH
21148: CALL_OW 3
21152: PPUSH
21153: CALL_OW 1
21157: ST_TO_ADDR
// end ; end ;
21158: GO 20996
21160: POP
21161: POP
// end ;
21162: LD_VAR 0 4
21166: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21167: LD_INT 0
21169: PPUSH
21170: PPUSH
21171: PPUSH
21172: PPUSH
21173: PPUSH
21174: PPUSH
21175: PPUSH
21176: PPUSH
21177: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21178: LD_VAR 0 1
21182: PPUSH
21183: CALL_OW 264
21187: PUSH
21188: LD_INT 81
21190: EQUAL
21191: NOT
21192: PUSH
21193: LD_VAR 0 1
21197: PUSH
21198: LD_EXP 75
21202: IN
21203: NOT
21204: OR
21205: IFFALSE 21209
// exit ;
21207: GO 21531
// index := GetElementIndex ( minersList , unit ) ;
21209: LD_ADDR_VAR 0 6
21213: PUSH
21214: LD_EXP 75
21218: PPUSH
21219: LD_VAR 0 1
21223: PPUSH
21224: CALL 26878 0 2
21228: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21229: LD_ADDR_VAR 0 8
21233: PUSH
21234: LD_EXP 77
21238: PUSH
21239: LD_EXP 76
21243: PUSH
21244: LD_VAR 0 6
21248: ARRAY
21249: MINUS
21250: ST_TO_ADDR
// if not minesFreeAmount then
21251: LD_VAR 0 8
21255: NOT
21256: IFFALSE 21260
// exit ;
21258: GO 21531
// tmp := [ ] ;
21260: LD_ADDR_VAR 0 7
21264: PUSH
21265: EMPTY
21266: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21267: LD_ADDR_VAR 0 5
21271: PUSH
21272: DOUBLE
21273: LD_INT 1
21275: DEC
21276: ST_TO_ADDR
21277: LD_VAR 0 8
21281: PUSH
21282: FOR_TO
21283: IFFALSE 21478
// begin _d := rand ( 0 , 5 ) ;
21285: LD_ADDR_VAR 0 11
21289: PUSH
21290: LD_INT 0
21292: PPUSH
21293: LD_INT 5
21295: PPUSH
21296: CALL_OW 12
21300: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21301: LD_ADDR_VAR 0 12
21305: PUSH
21306: LD_INT 2
21308: PPUSH
21309: LD_INT 6
21311: PPUSH
21312: CALL_OW 12
21316: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21317: LD_ADDR_VAR 0 9
21321: PUSH
21322: LD_VAR 0 2
21326: PPUSH
21327: LD_VAR 0 11
21331: PPUSH
21332: LD_VAR 0 12
21336: PPUSH
21337: CALL_OW 272
21341: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21342: LD_ADDR_VAR 0 10
21346: PUSH
21347: LD_VAR 0 3
21351: PPUSH
21352: LD_VAR 0 11
21356: PPUSH
21357: LD_VAR 0 12
21361: PPUSH
21362: CALL_OW 273
21366: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21367: LD_VAR 0 9
21371: PPUSH
21372: LD_VAR 0 10
21376: PPUSH
21377: CALL_OW 488
21381: PUSH
21382: LD_VAR 0 9
21386: PUSH
21387: LD_VAR 0 10
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: PUSH
21396: LD_VAR 0 7
21400: IN
21401: NOT
21402: AND
21403: PUSH
21404: LD_VAR 0 9
21408: PPUSH
21409: LD_VAR 0 10
21413: PPUSH
21414: CALL_OW 458
21418: NOT
21419: AND
21420: IFFALSE 21462
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21422: LD_ADDR_VAR 0 7
21426: PUSH
21427: LD_VAR 0 7
21431: PPUSH
21432: LD_VAR 0 7
21436: PUSH
21437: LD_INT 1
21439: PLUS
21440: PPUSH
21441: LD_VAR 0 9
21445: PUSH
21446: LD_VAR 0 10
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PPUSH
21455: CALL_OW 1
21459: ST_TO_ADDR
21460: GO 21476
// i := i - 1 ;
21462: LD_ADDR_VAR 0 5
21466: PUSH
21467: LD_VAR 0 5
21471: PUSH
21472: LD_INT 1
21474: MINUS
21475: ST_TO_ADDR
// end ;
21476: GO 21282
21478: POP
21479: POP
// for i in tmp do
21480: LD_ADDR_VAR 0 5
21484: PUSH
21485: LD_VAR 0 7
21489: PUSH
21490: FOR_IN
21491: IFFALSE 21529
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21493: LD_VAR 0 1
21497: PPUSH
21498: LD_VAR 0 5
21502: PUSH
21503: LD_INT 1
21505: ARRAY
21506: PPUSH
21507: LD_VAR 0 5
21511: PUSH
21512: LD_INT 2
21514: ARRAY
21515: PPUSH
21516: CALL 20475 0 3
21520: NOT
21521: IFFALSE 21527
// exit ;
21523: POP
21524: POP
21525: GO 21531
21527: GO 21490
21529: POP
21530: POP
// end ;
21531: LD_VAR 0 4
21535: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21536: LD_INT 0
21538: PPUSH
21539: PPUSH
21540: PPUSH
21541: PPUSH
21542: PPUSH
21543: PPUSH
21544: PPUSH
// if not GetClass ( unit ) = class_sniper then
21545: LD_VAR 0 1
21549: PPUSH
21550: CALL_OW 257
21554: PUSH
21555: LD_INT 5
21557: EQUAL
21558: NOT
21559: IFFALSE 21563
// exit ;
21561: GO 21951
// dist := 8 ;
21563: LD_ADDR_VAR 0 5
21567: PUSH
21568: LD_INT 8
21570: ST_TO_ADDR
// viewRange := 12 ;
21571: LD_ADDR_VAR 0 7
21575: PUSH
21576: LD_INT 12
21578: ST_TO_ADDR
// side := GetSide ( unit ) ;
21579: LD_ADDR_VAR 0 6
21583: PUSH
21584: LD_VAR 0 1
21588: PPUSH
21589: CALL_OW 255
21593: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21594: LD_INT 61
21596: PPUSH
21597: LD_VAR 0 6
21601: PPUSH
21602: CALL_OW 321
21606: PUSH
21607: LD_INT 2
21609: EQUAL
21610: IFFALSE 21620
// viewRange := 16 ;
21612: LD_ADDR_VAR 0 7
21616: PUSH
21617: LD_INT 16
21619: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21620: LD_VAR 0 1
21624: PPUSH
21625: LD_VAR 0 2
21629: PPUSH
21630: LD_VAR 0 3
21634: PPUSH
21635: CALL_OW 297
21639: PUSH
21640: LD_VAR 0 5
21644: GREATER
21645: IFFALSE 21724
// begin ComMoveXY ( unit , x , y ) ;
21647: LD_VAR 0 1
21651: PPUSH
21652: LD_VAR 0 2
21656: PPUSH
21657: LD_VAR 0 3
21661: PPUSH
21662: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21666: LD_INT 35
21668: PPUSH
21669: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21673: LD_VAR 0 1
21677: PPUSH
21678: LD_VAR 0 2
21682: PPUSH
21683: LD_VAR 0 3
21687: PPUSH
21688: CALL 58141 0 3
21692: NOT
21693: IFFALSE 21697
// exit ;
21695: GO 21951
// until GetDistUnitXY ( unit , x , y ) < dist ;
21697: LD_VAR 0 1
21701: PPUSH
21702: LD_VAR 0 2
21706: PPUSH
21707: LD_VAR 0 3
21711: PPUSH
21712: CALL_OW 297
21716: PUSH
21717: LD_VAR 0 5
21721: LESS
21722: IFFALSE 21666
// end ; ComTurnXY ( unit , x , y ) ;
21724: LD_VAR 0 1
21728: PPUSH
21729: LD_VAR 0 2
21733: PPUSH
21734: LD_VAR 0 3
21738: PPUSH
21739: CALL_OW 118
// wait ( 5 ) ;
21743: LD_INT 5
21745: PPUSH
21746: CALL_OW 67
// _d := GetDir ( unit ) ;
21750: LD_ADDR_VAR 0 10
21754: PUSH
21755: LD_VAR 0 1
21759: PPUSH
21760: CALL_OW 254
21764: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21765: LD_ADDR_VAR 0 8
21769: PUSH
21770: LD_VAR 0 1
21774: PPUSH
21775: CALL_OW 250
21779: PPUSH
21780: LD_VAR 0 10
21784: PPUSH
21785: LD_VAR 0 5
21789: PPUSH
21790: CALL_OW 272
21794: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21795: LD_ADDR_VAR 0 9
21799: PUSH
21800: LD_VAR 0 1
21804: PPUSH
21805: CALL_OW 251
21809: PPUSH
21810: LD_VAR 0 10
21814: PPUSH
21815: LD_VAR 0 5
21819: PPUSH
21820: CALL_OW 273
21824: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21825: LD_VAR 0 8
21829: PPUSH
21830: LD_VAR 0 9
21834: PPUSH
21835: CALL_OW 488
21839: NOT
21840: IFFALSE 21844
// exit ;
21842: GO 21951
// ComAnimCustom ( unit , 1 ) ;
21844: LD_VAR 0 1
21848: PPUSH
21849: LD_INT 1
21851: PPUSH
21852: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21856: LD_VAR 0 8
21860: PPUSH
21861: LD_VAR 0 9
21865: PPUSH
21866: LD_VAR 0 6
21870: PPUSH
21871: LD_VAR 0 7
21875: PPUSH
21876: CALL_OW 330
// repeat wait ( 1 ) ;
21880: LD_INT 1
21882: PPUSH
21883: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
21887: LD_VAR 0 1
21891: PPUSH
21892: CALL_OW 316
21896: PUSH
21897: LD_VAR 0 1
21901: PPUSH
21902: CALL_OW 314
21906: OR
21907: PUSH
21908: LD_VAR 0 1
21912: PPUSH
21913: CALL_OW 302
21917: NOT
21918: OR
21919: PUSH
21920: LD_VAR 0 1
21924: PPUSH
21925: CALL_OW 301
21929: OR
21930: IFFALSE 21880
// RemoveSeeing ( _x , _y , side ) ;
21932: LD_VAR 0 8
21936: PPUSH
21937: LD_VAR 0 9
21941: PPUSH
21942: LD_VAR 0 6
21946: PPUSH
21947: CALL_OW 331
// end ; end_of_file
21951: LD_VAR 0 4
21955: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21956: LD_INT 0
21958: PPUSH
21959: PPUSH
// if exist_mode then
21960: LD_VAR 0 2
21964: IFFALSE 21989
// unit := CreateCharacter ( prefix & ident ) else
21966: LD_ADDR_VAR 0 5
21970: PUSH
21971: LD_VAR 0 3
21975: PUSH
21976: LD_VAR 0 1
21980: STR
21981: PPUSH
21982: CALL_OW 34
21986: ST_TO_ADDR
21987: GO 22004
// unit := NewCharacter ( ident ) ;
21989: LD_ADDR_VAR 0 5
21993: PUSH
21994: LD_VAR 0 1
21998: PPUSH
21999: CALL_OW 25
22003: ST_TO_ADDR
// result := unit ;
22004: LD_ADDR_VAR 0 4
22008: PUSH
22009: LD_VAR 0 5
22013: ST_TO_ADDR
// end ;
22014: LD_VAR 0 4
22018: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22019: LD_INT 0
22021: PPUSH
22022: PPUSH
// if not side or not nation then
22023: LD_VAR 0 1
22027: NOT
22028: PUSH
22029: LD_VAR 0 2
22033: NOT
22034: OR
22035: IFFALSE 22039
// exit ;
22037: GO 22807
// case nation of nation_american :
22039: LD_VAR 0 2
22043: PUSH
22044: LD_INT 1
22046: DOUBLE
22047: EQUAL
22048: IFTRUE 22052
22050: GO 22266
22052: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22053: LD_ADDR_VAR 0 4
22057: PUSH
22058: LD_INT 35
22060: PUSH
22061: LD_INT 45
22063: PUSH
22064: LD_INT 46
22066: PUSH
22067: LD_INT 47
22069: PUSH
22070: LD_INT 82
22072: PUSH
22073: LD_INT 83
22075: PUSH
22076: LD_INT 84
22078: PUSH
22079: LD_INT 85
22081: PUSH
22082: LD_INT 86
22084: PUSH
22085: LD_INT 1
22087: PUSH
22088: LD_INT 2
22090: PUSH
22091: LD_INT 6
22093: PUSH
22094: LD_INT 15
22096: PUSH
22097: LD_INT 16
22099: PUSH
22100: LD_INT 7
22102: PUSH
22103: LD_INT 12
22105: PUSH
22106: LD_INT 13
22108: PUSH
22109: LD_INT 10
22111: PUSH
22112: LD_INT 14
22114: PUSH
22115: LD_INT 20
22117: PUSH
22118: LD_INT 21
22120: PUSH
22121: LD_INT 22
22123: PUSH
22124: LD_INT 25
22126: PUSH
22127: LD_INT 32
22129: PUSH
22130: LD_INT 27
22132: PUSH
22133: LD_INT 36
22135: PUSH
22136: LD_INT 69
22138: PUSH
22139: LD_INT 39
22141: PUSH
22142: LD_INT 34
22144: PUSH
22145: LD_INT 40
22147: PUSH
22148: LD_INT 48
22150: PUSH
22151: LD_INT 49
22153: PUSH
22154: LD_INT 50
22156: PUSH
22157: LD_INT 51
22159: PUSH
22160: LD_INT 52
22162: PUSH
22163: LD_INT 53
22165: PUSH
22166: LD_INT 54
22168: PUSH
22169: LD_INT 55
22171: PUSH
22172: LD_INT 56
22174: PUSH
22175: LD_INT 57
22177: PUSH
22178: LD_INT 58
22180: PUSH
22181: LD_INT 59
22183: PUSH
22184: LD_INT 60
22186: PUSH
22187: LD_INT 61
22189: PUSH
22190: LD_INT 62
22192: PUSH
22193: LD_INT 80
22195: PUSH
22196: LD_INT 82
22198: PUSH
22199: LD_INT 83
22201: PUSH
22202: LD_INT 84
22204: PUSH
22205: LD_INT 85
22207: PUSH
22208: LD_INT 86
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: ST_TO_ADDR
22264: GO 22731
22266: LD_INT 2
22268: DOUBLE
22269: EQUAL
22270: IFTRUE 22274
22272: GO 22500
22274: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22275: LD_ADDR_VAR 0 4
22279: PUSH
22280: LD_INT 35
22282: PUSH
22283: LD_INT 45
22285: PUSH
22286: LD_INT 46
22288: PUSH
22289: LD_INT 47
22291: PUSH
22292: LD_INT 82
22294: PUSH
22295: LD_INT 83
22297: PUSH
22298: LD_INT 84
22300: PUSH
22301: LD_INT 85
22303: PUSH
22304: LD_INT 87
22306: PUSH
22307: LD_INT 70
22309: PUSH
22310: LD_INT 1
22312: PUSH
22313: LD_INT 11
22315: PUSH
22316: LD_INT 3
22318: PUSH
22319: LD_INT 4
22321: PUSH
22322: LD_INT 5
22324: PUSH
22325: LD_INT 6
22327: PUSH
22328: LD_INT 15
22330: PUSH
22331: LD_INT 18
22333: PUSH
22334: LD_INT 7
22336: PUSH
22337: LD_INT 17
22339: PUSH
22340: LD_INT 8
22342: PUSH
22343: LD_INT 20
22345: PUSH
22346: LD_INT 21
22348: PUSH
22349: LD_INT 22
22351: PUSH
22352: LD_INT 72
22354: PUSH
22355: LD_INT 26
22357: PUSH
22358: LD_INT 69
22360: PUSH
22361: LD_INT 39
22363: PUSH
22364: LD_INT 40
22366: PUSH
22367: LD_INT 41
22369: PUSH
22370: LD_INT 42
22372: PUSH
22373: LD_INT 43
22375: PUSH
22376: LD_INT 48
22378: PUSH
22379: LD_INT 49
22381: PUSH
22382: LD_INT 50
22384: PUSH
22385: LD_INT 51
22387: PUSH
22388: LD_INT 52
22390: PUSH
22391: LD_INT 53
22393: PUSH
22394: LD_INT 54
22396: PUSH
22397: LD_INT 55
22399: PUSH
22400: LD_INT 56
22402: PUSH
22403: LD_INT 60
22405: PUSH
22406: LD_INT 61
22408: PUSH
22409: LD_INT 62
22411: PUSH
22412: LD_INT 66
22414: PUSH
22415: LD_INT 67
22417: PUSH
22418: LD_INT 68
22420: PUSH
22421: LD_INT 81
22423: PUSH
22424: LD_INT 82
22426: PUSH
22427: LD_INT 83
22429: PUSH
22430: LD_INT 84
22432: PUSH
22433: LD_INT 85
22435: PUSH
22436: LD_INT 87
22438: PUSH
22439: LD_INT 88
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: ST_TO_ADDR
22498: GO 22731
22500: LD_INT 3
22502: DOUBLE
22503: EQUAL
22504: IFTRUE 22508
22506: GO 22730
22508: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22509: LD_ADDR_VAR 0 4
22513: PUSH
22514: LD_INT 46
22516: PUSH
22517: LD_INT 47
22519: PUSH
22520: LD_INT 1
22522: PUSH
22523: LD_INT 2
22525: PUSH
22526: LD_INT 82
22528: PUSH
22529: LD_INT 83
22531: PUSH
22532: LD_INT 84
22534: PUSH
22535: LD_INT 85
22537: PUSH
22538: LD_INT 86
22540: PUSH
22541: LD_INT 11
22543: PUSH
22544: LD_INT 9
22546: PUSH
22547: LD_INT 20
22549: PUSH
22550: LD_INT 19
22552: PUSH
22553: LD_INT 21
22555: PUSH
22556: LD_INT 24
22558: PUSH
22559: LD_INT 22
22561: PUSH
22562: LD_INT 25
22564: PUSH
22565: LD_INT 28
22567: PUSH
22568: LD_INT 29
22570: PUSH
22571: LD_INT 30
22573: PUSH
22574: LD_INT 31
22576: PUSH
22577: LD_INT 37
22579: PUSH
22580: LD_INT 38
22582: PUSH
22583: LD_INT 32
22585: PUSH
22586: LD_INT 27
22588: PUSH
22589: LD_INT 33
22591: PUSH
22592: LD_INT 69
22594: PUSH
22595: LD_INT 39
22597: PUSH
22598: LD_INT 34
22600: PUSH
22601: LD_INT 40
22603: PUSH
22604: LD_INT 71
22606: PUSH
22607: LD_INT 23
22609: PUSH
22610: LD_INT 44
22612: PUSH
22613: LD_INT 48
22615: PUSH
22616: LD_INT 49
22618: PUSH
22619: LD_INT 50
22621: PUSH
22622: LD_INT 51
22624: PUSH
22625: LD_INT 52
22627: PUSH
22628: LD_INT 53
22630: PUSH
22631: LD_INT 54
22633: PUSH
22634: LD_INT 55
22636: PUSH
22637: LD_INT 56
22639: PUSH
22640: LD_INT 57
22642: PUSH
22643: LD_INT 58
22645: PUSH
22646: LD_INT 59
22648: PUSH
22649: LD_INT 63
22651: PUSH
22652: LD_INT 64
22654: PUSH
22655: LD_INT 65
22657: PUSH
22658: LD_INT 82
22660: PUSH
22661: LD_INT 83
22663: PUSH
22664: LD_INT 84
22666: PUSH
22667: LD_INT 85
22669: PUSH
22670: LD_INT 86
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: ST_TO_ADDR
22728: GO 22731
22730: POP
// if state > - 1 and state < 3 then
22731: LD_VAR 0 3
22735: PUSH
22736: LD_INT 1
22738: NEG
22739: GREATER
22740: PUSH
22741: LD_VAR 0 3
22745: PUSH
22746: LD_INT 3
22748: LESS
22749: AND
22750: IFFALSE 22807
// for i in result do
22752: LD_ADDR_VAR 0 5
22756: PUSH
22757: LD_VAR 0 4
22761: PUSH
22762: FOR_IN
22763: IFFALSE 22805
// if GetTech ( i , side ) <> state then
22765: LD_VAR 0 5
22769: PPUSH
22770: LD_VAR 0 1
22774: PPUSH
22775: CALL_OW 321
22779: PUSH
22780: LD_VAR 0 3
22784: NONEQUAL
22785: IFFALSE 22803
// result := result diff i ;
22787: LD_ADDR_VAR 0 4
22791: PUSH
22792: LD_VAR 0 4
22796: PUSH
22797: LD_VAR 0 5
22801: DIFF
22802: ST_TO_ADDR
22803: GO 22762
22805: POP
22806: POP
// end ;
22807: LD_VAR 0 4
22811: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22812: LD_INT 0
22814: PPUSH
22815: PPUSH
22816: PPUSH
// result := true ;
22817: LD_ADDR_VAR 0 3
22821: PUSH
22822: LD_INT 1
22824: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22825: LD_ADDR_VAR 0 5
22829: PUSH
22830: LD_VAR 0 2
22834: PPUSH
22835: CALL_OW 480
22839: ST_TO_ADDR
// if not tmp then
22840: LD_VAR 0 5
22844: NOT
22845: IFFALSE 22849
// exit ;
22847: GO 22898
// for i in tmp do
22849: LD_ADDR_VAR 0 4
22853: PUSH
22854: LD_VAR 0 5
22858: PUSH
22859: FOR_IN
22860: IFFALSE 22896
// if GetTech ( i , side ) <> state_researched then
22862: LD_VAR 0 4
22866: PPUSH
22867: LD_VAR 0 1
22871: PPUSH
22872: CALL_OW 321
22876: PUSH
22877: LD_INT 2
22879: NONEQUAL
22880: IFFALSE 22894
// begin result := false ;
22882: LD_ADDR_VAR 0 3
22886: PUSH
22887: LD_INT 0
22889: ST_TO_ADDR
// exit ;
22890: POP
22891: POP
22892: GO 22898
// end ;
22894: GO 22859
22896: POP
22897: POP
// end ;
22898: LD_VAR 0 3
22902: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22903: LD_INT 0
22905: PPUSH
22906: PPUSH
22907: PPUSH
22908: PPUSH
22909: PPUSH
22910: PPUSH
22911: PPUSH
22912: PPUSH
22913: PPUSH
22914: PPUSH
22915: PPUSH
22916: PPUSH
22917: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22918: LD_VAR 0 1
22922: NOT
22923: PUSH
22924: LD_VAR 0 1
22928: PPUSH
22929: CALL_OW 257
22933: PUSH
22934: LD_INT 9
22936: NONEQUAL
22937: OR
22938: IFFALSE 22942
// exit ;
22940: GO 23515
// side := GetSide ( unit ) ;
22942: LD_ADDR_VAR 0 9
22946: PUSH
22947: LD_VAR 0 1
22951: PPUSH
22952: CALL_OW 255
22956: ST_TO_ADDR
// tech_space := tech_spacanom ;
22957: LD_ADDR_VAR 0 12
22961: PUSH
22962: LD_INT 29
22964: ST_TO_ADDR
// tech_time := tech_taurad ;
22965: LD_ADDR_VAR 0 13
22969: PUSH
22970: LD_INT 28
22972: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22973: LD_ADDR_VAR 0 11
22977: PUSH
22978: LD_VAR 0 1
22982: PPUSH
22983: CALL_OW 310
22987: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22988: LD_VAR 0 11
22992: PPUSH
22993: CALL_OW 247
22997: PUSH
22998: LD_INT 2
23000: EQUAL
23001: IFFALSE 23005
// exit ;
23003: GO 23515
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23005: LD_ADDR_VAR 0 8
23009: PUSH
23010: LD_INT 81
23012: PUSH
23013: LD_VAR 0 9
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 3
23024: PUSH
23025: LD_INT 21
23027: PUSH
23028: LD_INT 3
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PPUSH
23043: CALL_OW 69
23047: ST_TO_ADDR
// if not tmp then
23048: LD_VAR 0 8
23052: NOT
23053: IFFALSE 23057
// exit ;
23055: GO 23515
// if in_unit then
23057: LD_VAR 0 11
23061: IFFALSE 23085
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23063: LD_ADDR_VAR 0 10
23067: PUSH
23068: LD_VAR 0 8
23072: PPUSH
23073: LD_VAR 0 11
23077: PPUSH
23078: CALL_OW 74
23082: ST_TO_ADDR
23083: GO 23105
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23085: LD_ADDR_VAR 0 10
23089: PUSH
23090: LD_VAR 0 8
23094: PPUSH
23095: LD_VAR 0 1
23099: PPUSH
23100: CALL_OW 74
23104: ST_TO_ADDR
// if not enemy then
23105: LD_VAR 0 10
23109: NOT
23110: IFFALSE 23114
// exit ;
23112: GO 23515
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23114: LD_VAR 0 11
23118: PUSH
23119: LD_VAR 0 11
23123: PPUSH
23124: LD_VAR 0 10
23128: PPUSH
23129: CALL_OW 296
23133: PUSH
23134: LD_INT 13
23136: GREATER
23137: AND
23138: PUSH
23139: LD_VAR 0 1
23143: PPUSH
23144: LD_VAR 0 10
23148: PPUSH
23149: CALL_OW 296
23153: PUSH
23154: LD_INT 12
23156: GREATER
23157: OR
23158: IFFALSE 23162
// exit ;
23160: GO 23515
// missile := [ 1 ] ;
23162: LD_ADDR_VAR 0 14
23166: PUSH
23167: LD_INT 1
23169: PUSH
23170: EMPTY
23171: LIST
23172: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23173: LD_VAR 0 9
23177: PPUSH
23178: LD_VAR 0 12
23182: PPUSH
23183: CALL_OW 325
23187: IFFALSE 23216
// missile := Replace ( missile , missile + 1 , 2 ) ;
23189: LD_ADDR_VAR 0 14
23193: PUSH
23194: LD_VAR 0 14
23198: PPUSH
23199: LD_VAR 0 14
23203: PUSH
23204: LD_INT 1
23206: PLUS
23207: PPUSH
23208: LD_INT 2
23210: PPUSH
23211: CALL_OW 1
23215: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23216: LD_VAR 0 9
23220: PPUSH
23221: LD_VAR 0 13
23225: PPUSH
23226: CALL_OW 325
23230: PUSH
23231: LD_VAR 0 10
23235: PPUSH
23236: CALL_OW 255
23240: PPUSH
23241: LD_VAR 0 13
23245: PPUSH
23246: CALL_OW 325
23250: NOT
23251: AND
23252: IFFALSE 23281
// missile := Replace ( missile , missile + 1 , 3 ) ;
23254: LD_ADDR_VAR 0 14
23258: PUSH
23259: LD_VAR 0 14
23263: PPUSH
23264: LD_VAR 0 14
23268: PUSH
23269: LD_INT 1
23271: PLUS
23272: PPUSH
23273: LD_INT 3
23275: PPUSH
23276: CALL_OW 1
23280: ST_TO_ADDR
// if missile < 2 then
23281: LD_VAR 0 14
23285: PUSH
23286: LD_INT 2
23288: LESS
23289: IFFALSE 23293
// exit ;
23291: GO 23515
// x := GetX ( enemy ) ;
23293: LD_ADDR_VAR 0 4
23297: PUSH
23298: LD_VAR 0 10
23302: PPUSH
23303: CALL_OW 250
23307: ST_TO_ADDR
// y := GetY ( enemy ) ;
23308: LD_ADDR_VAR 0 5
23312: PUSH
23313: LD_VAR 0 10
23317: PPUSH
23318: CALL_OW 251
23322: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23323: LD_ADDR_VAR 0 6
23327: PUSH
23328: LD_VAR 0 4
23332: PUSH
23333: LD_INT 1
23335: NEG
23336: PPUSH
23337: LD_INT 1
23339: PPUSH
23340: CALL_OW 12
23344: PLUS
23345: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23346: LD_ADDR_VAR 0 7
23350: PUSH
23351: LD_VAR 0 5
23355: PUSH
23356: LD_INT 1
23358: NEG
23359: PPUSH
23360: LD_INT 1
23362: PPUSH
23363: CALL_OW 12
23367: PLUS
23368: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23369: LD_VAR 0 6
23373: PPUSH
23374: LD_VAR 0 7
23378: PPUSH
23379: CALL_OW 488
23383: NOT
23384: IFFALSE 23406
// begin _x := x ;
23386: LD_ADDR_VAR 0 6
23390: PUSH
23391: LD_VAR 0 4
23395: ST_TO_ADDR
// _y := y ;
23396: LD_ADDR_VAR 0 7
23400: PUSH
23401: LD_VAR 0 5
23405: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23406: LD_ADDR_VAR 0 3
23410: PUSH
23411: LD_INT 1
23413: PPUSH
23414: LD_VAR 0 14
23418: PPUSH
23419: CALL_OW 12
23423: ST_TO_ADDR
// case i of 1 :
23424: LD_VAR 0 3
23428: PUSH
23429: LD_INT 1
23431: DOUBLE
23432: EQUAL
23433: IFTRUE 23437
23435: GO 23454
23437: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23438: LD_VAR 0 1
23442: PPUSH
23443: LD_VAR 0 10
23447: PPUSH
23448: CALL_OW 115
23452: GO 23515
23454: LD_INT 2
23456: DOUBLE
23457: EQUAL
23458: IFTRUE 23462
23460: GO 23484
23462: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23463: LD_VAR 0 1
23467: PPUSH
23468: LD_VAR 0 6
23472: PPUSH
23473: LD_VAR 0 7
23477: PPUSH
23478: CALL_OW 153
23482: GO 23515
23484: LD_INT 3
23486: DOUBLE
23487: EQUAL
23488: IFTRUE 23492
23490: GO 23514
23492: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23493: LD_VAR 0 1
23497: PPUSH
23498: LD_VAR 0 6
23502: PPUSH
23503: LD_VAR 0 7
23507: PPUSH
23508: CALL_OW 154
23512: GO 23515
23514: POP
// end ;
23515: LD_VAR 0 2
23519: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23520: LD_INT 0
23522: PPUSH
23523: PPUSH
23524: PPUSH
23525: PPUSH
23526: PPUSH
23527: PPUSH
// if not unit or not building then
23528: LD_VAR 0 1
23532: NOT
23533: PUSH
23534: LD_VAR 0 2
23538: NOT
23539: OR
23540: IFFALSE 23544
// exit ;
23542: GO 23702
// x := GetX ( building ) ;
23544: LD_ADDR_VAR 0 5
23548: PUSH
23549: LD_VAR 0 2
23553: PPUSH
23554: CALL_OW 250
23558: ST_TO_ADDR
// y := GetY ( building ) ;
23559: LD_ADDR_VAR 0 6
23563: PUSH
23564: LD_VAR 0 2
23568: PPUSH
23569: CALL_OW 251
23573: ST_TO_ADDR
// for i = 0 to 5 do
23574: LD_ADDR_VAR 0 4
23578: PUSH
23579: DOUBLE
23580: LD_INT 0
23582: DEC
23583: ST_TO_ADDR
23584: LD_INT 5
23586: PUSH
23587: FOR_TO
23588: IFFALSE 23700
// begin _x := ShiftX ( x , i , 3 ) ;
23590: LD_ADDR_VAR 0 7
23594: PUSH
23595: LD_VAR 0 5
23599: PPUSH
23600: LD_VAR 0 4
23604: PPUSH
23605: LD_INT 3
23607: PPUSH
23608: CALL_OW 272
23612: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23613: LD_ADDR_VAR 0 8
23617: PUSH
23618: LD_VAR 0 6
23622: PPUSH
23623: LD_VAR 0 4
23627: PPUSH
23628: LD_INT 3
23630: PPUSH
23631: CALL_OW 273
23635: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23636: LD_VAR 0 7
23640: PPUSH
23641: LD_VAR 0 8
23645: PPUSH
23646: CALL_OW 488
23650: NOT
23651: IFFALSE 23655
// continue ;
23653: GO 23587
// if HexInfo ( _x , _y ) = 0 then
23655: LD_VAR 0 7
23659: PPUSH
23660: LD_VAR 0 8
23664: PPUSH
23665: CALL_OW 428
23669: PUSH
23670: LD_INT 0
23672: EQUAL
23673: IFFALSE 23698
// begin ComMoveXY ( unit , _x , _y ) ;
23675: LD_VAR 0 1
23679: PPUSH
23680: LD_VAR 0 7
23684: PPUSH
23685: LD_VAR 0 8
23689: PPUSH
23690: CALL_OW 111
// exit ;
23694: POP
23695: POP
23696: GO 23702
// end ; end ;
23698: GO 23587
23700: POP
23701: POP
// end ;
23702: LD_VAR 0 3
23706: RET
// export function ScanBase ( side , base_area ) ; begin
23707: LD_INT 0
23709: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23710: LD_ADDR_VAR 0 3
23714: PUSH
23715: LD_VAR 0 2
23719: PPUSH
23720: LD_INT 81
23722: PUSH
23723: LD_VAR 0 1
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PPUSH
23732: CALL_OW 70
23736: ST_TO_ADDR
// end ;
23737: LD_VAR 0 3
23741: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23742: LD_INT 0
23744: PPUSH
23745: PPUSH
23746: PPUSH
23747: PPUSH
// result := false ;
23748: LD_ADDR_VAR 0 2
23752: PUSH
23753: LD_INT 0
23755: ST_TO_ADDR
// side := GetSide ( unit ) ;
23756: LD_ADDR_VAR 0 3
23760: PUSH
23761: LD_VAR 0 1
23765: PPUSH
23766: CALL_OW 255
23770: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23771: LD_ADDR_VAR 0 4
23775: PUSH
23776: LD_VAR 0 1
23780: PPUSH
23781: CALL_OW 248
23785: ST_TO_ADDR
// case nat of 1 :
23786: LD_VAR 0 4
23790: PUSH
23791: LD_INT 1
23793: DOUBLE
23794: EQUAL
23795: IFTRUE 23799
23797: GO 23810
23799: POP
// tech := tech_lassight ; 2 :
23800: LD_ADDR_VAR 0 5
23804: PUSH
23805: LD_INT 12
23807: ST_TO_ADDR
23808: GO 23849
23810: LD_INT 2
23812: DOUBLE
23813: EQUAL
23814: IFTRUE 23818
23816: GO 23829
23818: POP
// tech := tech_mortar ; 3 :
23819: LD_ADDR_VAR 0 5
23823: PUSH
23824: LD_INT 41
23826: ST_TO_ADDR
23827: GO 23849
23829: LD_INT 3
23831: DOUBLE
23832: EQUAL
23833: IFTRUE 23837
23835: GO 23848
23837: POP
// tech := tech_bazooka ; end ;
23838: LD_ADDR_VAR 0 5
23842: PUSH
23843: LD_INT 44
23845: ST_TO_ADDR
23846: GO 23849
23848: POP
// if Researched ( side , tech ) then
23849: LD_VAR 0 3
23853: PPUSH
23854: LD_VAR 0 5
23858: PPUSH
23859: CALL_OW 325
23863: IFFALSE 23890
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23865: LD_ADDR_VAR 0 2
23869: PUSH
23870: LD_INT 5
23872: PUSH
23873: LD_INT 8
23875: PUSH
23876: LD_INT 9
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: LIST
23883: PUSH
23884: LD_VAR 0 4
23888: ARRAY
23889: ST_TO_ADDR
// end ;
23890: LD_VAR 0 2
23894: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23895: LD_INT 0
23897: PPUSH
23898: PPUSH
23899: PPUSH
// if not mines then
23900: LD_VAR 0 2
23904: NOT
23905: IFFALSE 23909
// exit ;
23907: GO 24053
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23909: LD_ADDR_VAR 0 5
23913: PUSH
23914: LD_INT 81
23916: PUSH
23917: LD_VAR 0 1
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PUSH
23926: LD_INT 3
23928: PUSH
23929: LD_INT 21
23931: PUSH
23932: LD_INT 3
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PPUSH
23947: CALL_OW 69
23951: ST_TO_ADDR
// for i in mines do
23952: LD_ADDR_VAR 0 4
23956: PUSH
23957: LD_VAR 0 2
23961: PUSH
23962: FOR_IN
23963: IFFALSE 24051
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23965: LD_VAR 0 4
23969: PUSH
23970: LD_INT 1
23972: ARRAY
23973: PPUSH
23974: LD_VAR 0 4
23978: PUSH
23979: LD_INT 2
23981: ARRAY
23982: PPUSH
23983: CALL_OW 458
23987: NOT
23988: IFFALSE 23992
// continue ;
23990: GO 23962
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23992: LD_VAR 0 4
23996: PUSH
23997: LD_INT 1
23999: ARRAY
24000: PPUSH
24001: LD_VAR 0 4
24005: PUSH
24006: LD_INT 2
24008: ARRAY
24009: PPUSH
24010: CALL_OW 428
24014: PUSH
24015: LD_VAR 0 5
24019: IN
24020: IFFALSE 24049
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24022: LD_VAR 0 4
24026: PUSH
24027: LD_INT 1
24029: ARRAY
24030: PPUSH
24031: LD_VAR 0 4
24035: PUSH
24036: LD_INT 2
24038: ARRAY
24039: PPUSH
24040: LD_VAR 0 1
24044: PPUSH
24045: CALL_OW 456
// end ;
24049: GO 23962
24051: POP
24052: POP
// end ;
24053: LD_VAR 0 3
24057: RET
// export function Count ( array ) ; var i ; begin
24058: LD_INT 0
24060: PPUSH
24061: PPUSH
// result := 0 ;
24062: LD_ADDR_VAR 0 2
24066: PUSH
24067: LD_INT 0
24069: ST_TO_ADDR
// for i in array do
24070: LD_ADDR_VAR 0 3
24074: PUSH
24075: LD_VAR 0 1
24079: PUSH
24080: FOR_IN
24081: IFFALSE 24105
// if i then
24083: LD_VAR 0 3
24087: IFFALSE 24103
// result := result + 1 ;
24089: LD_ADDR_VAR 0 2
24093: PUSH
24094: LD_VAR 0 2
24098: PUSH
24099: LD_INT 1
24101: PLUS
24102: ST_TO_ADDR
24103: GO 24080
24105: POP
24106: POP
// end ;
24107: LD_VAR 0 2
24111: RET
// export function IsEmpty ( building ) ; begin
24112: LD_INT 0
24114: PPUSH
// if not building then
24115: LD_VAR 0 1
24119: NOT
24120: IFFALSE 24124
// exit ;
24122: GO 24167
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24124: LD_ADDR_VAR 0 2
24128: PUSH
24129: LD_VAR 0 1
24133: PUSH
24134: LD_INT 22
24136: PUSH
24137: LD_VAR 0 1
24141: PPUSH
24142: CALL_OW 255
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: LD_INT 58
24153: PUSH
24154: EMPTY
24155: LIST
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PPUSH
24161: CALL_OW 69
24165: IN
24166: ST_TO_ADDR
// end ;
24167: LD_VAR 0 2
24171: RET
// export function IsNotFull ( building ) ; var places ; begin
24172: LD_INT 0
24174: PPUSH
24175: PPUSH
// if not building then
24176: LD_VAR 0 1
24180: NOT
24181: IFFALSE 24185
// exit ;
24183: GO 24356
// result := false ;
24185: LD_ADDR_VAR 0 2
24189: PUSH
24190: LD_INT 0
24192: ST_TO_ADDR
// places := 0 ;
24193: LD_ADDR_VAR 0 3
24197: PUSH
24198: LD_INT 0
24200: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
24201: LD_VAR 0 1
24205: PPUSH
24206: CALL_OW 266
24210: PUSH
24211: LD_INT 0
24213: DOUBLE
24214: EQUAL
24215: IFTRUE 24273
24217: LD_INT 1
24219: DOUBLE
24220: EQUAL
24221: IFTRUE 24273
24223: LD_INT 6
24225: DOUBLE
24226: EQUAL
24227: IFTRUE 24273
24229: LD_INT 7
24231: DOUBLE
24232: EQUAL
24233: IFTRUE 24273
24235: LD_INT 8
24237: DOUBLE
24238: EQUAL
24239: IFTRUE 24273
24241: LD_INT 4
24243: DOUBLE
24244: EQUAL
24245: IFTRUE 24273
24247: LD_INT 5
24249: DOUBLE
24250: EQUAL
24251: IFTRUE 24273
24253: LD_INT 2
24255: DOUBLE
24256: EQUAL
24257: IFTRUE 24273
24259: LD_INT 3
24261: DOUBLE
24262: EQUAL
24263: IFTRUE 24273
24265: LD_INT 35
24267: DOUBLE
24268: EQUAL
24269: IFTRUE 24273
24271: GO 24284
24273: POP
// places := 6 ; b_bunker , b_breastwork :
24274: LD_ADDR_VAR 0 3
24278: PUSH
24279: LD_INT 6
24281: ST_TO_ADDR
24282: GO 24329
24284: LD_INT 32
24286: DOUBLE
24287: EQUAL
24288: IFTRUE 24298
24290: LD_INT 31
24292: DOUBLE
24293: EQUAL
24294: IFTRUE 24298
24296: GO 24309
24298: POP
// places := 1 ; b_control_tower :
24299: LD_ADDR_VAR 0 3
24303: PUSH
24304: LD_INT 1
24306: ST_TO_ADDR
24307: GO 24329
24309: LD_INT 36
24311: DOUBLE
24312: EQUAL
24313: IFTRUE 24317
24315: GO 24328
24317: POP
// places := 3 ; end ;
24318: LD_ADDR_VAR 0 3
24322: PUSH
24323: LD_INT 3
24325: ST_TO_ADDR
24326: GO 24329
24328: POP
// if places then
24329: LD_VAR 0 3
24333: IFFALSE 24356
// result := UnitsInside ( building ) < places ;
24335: LD_ADDR_VAR 0 2
24339: PUSH
24340: LD_VAR 0 1
24344: PPUSH
24345: CALL_OW 313
24349: PUSH
24350: LD_VAR 0 3
24354: LESS
24355: ST_TO_ADDR
// end ;
24356: LD_VAR 0 2
24360: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24361: LD_INT 0
24363: PPUSH
24364: PPUSH
24365: PPUSH
24366: PPUSH
// tmp := [ ] ;
24367: LD_ADDR_VAR 0 3
24371: PUSH
24372: EMPTY
24373: ST_TO_ADDR
// list := [ ] ;
24374: LD_ADDR_VAR 0 5
24378: PUSH
24379: EMPTY
24380: ST_TO_ADDR
// for i = 16 to 25 do
24381: LD_ADDR_VAR 0 4
24385: PUSH
24386: DOUBLE
24387: LD_INT 16
24389: DEC
24390: ST_TO_ADDR
24391: LD_INT 25
24393: PUSH
24394: FOR_TO
24395: IFFALSE 24468
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24397: LD_ADDR_VAR 0 3
24401: PUSH
24402: LD_VAR 0 3
24406: PUSH
24407: LD_INT 22
24409: PUSH
24410: LD_VAR 0 1
24414: PPUSH
24415: CALL_OW 255
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 91
24426: PUSH
24427: LD_VAR 0 1
24431: PUSH
24432: LD_INT 6
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 30
24442: PUSH
24443: LD_VAR 0 4
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: LIST
24456: PUSH
24457: EMPTY
24458: LIST
24459: PPUSH
24460: CALL_OW 69
24464: ADD
24465: ST_TO_ADDR
24466: GO 24394
24468: POP
24469: POP
// for i = 1 to tmp do
24470: LD_ADDR_VAR 0 4
24474: PUSH
24475: DOUBLE
24476: LD_INT 1
24478: DEC
24479: ST_TO_ADDR
24480: LD_VAR 0 3
24484: PUSH
24485: FOR_TO
24486: IFFALSE 24574
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24488: LD_ADDR_VAR 0 5
24492: PUSH
24493: LD_VAR 0 5
24497: PUSH
24498: LD_VAR 0 3
24502: PUSH
24503: LD_VAR 0 4
24507: ARRAY
24508: PPUSH
24509: CALL_OW 266
24513: PUSH
24514: LD_VAR 0 3
24518: PUSH
24519: LD_VAR 0 4
24523: ARRAY
24524: PPUSH
24525: CALL_OW 250
24529: PUSH
24530: LD_VAR 0 3
24534: PUSH
24535: LD_VAR 0 4
24539: ARRAY
24540: PPUSH
24541: CALL_OW 251
24545: PUSH
24546: LD_VAR 0 3
24550: PUSH
24551: LD_VAR 0 4
24555: ARRAY
24556: PPUSH
24557: CALL_OW 254
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: PUSH
24568: EMPTY
24569: LIST
24570: ADD
24571: ST_TO_ADDR
24572: GO 24485
24574: POP
24575: POP
// result := list ;
24576: LD_ADDR_VAR 0 2
24580: PUSH
24581: LD_VAR 0 5
24585: ST_TO_ADDR
// end ;
24586: LD_VAR 0 2
24590: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24591: LD_INT 0
24593: PPUSH
24594: PPUSH
24595: PPUSH
24596: PPUSH
24597: PPUSH
24598: PPUSH
24599: PPUSH
// if not factory then
24600: LD_VAR 0 1
24604: NOT
24605: IFFALSE 24609
// exit ;
24607: GO 25202
// if control = control_apeman then
24609: LD_VAR 0 4
24613: PUSH
24614: LD_INT 5
24616: EQUAL
24617: IFFALSE 24726
// begin tmp := UnitsInside ( factory ) ;
24619: LD_ADDR_VAR 0 8
24623: PUSH
24624: LD_VAR 0 1
24628: PPUSH
24629: CALL_OW 313
24633: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24634: LD_VAR 0 8
24638: PPUSH
24639: LD_INT 25
24641: PUSH
24642: LD_INT 12
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PPUSH
24649: CALL_OW 72
24653: NOT
24654: IFFALSE 24664
// control := control_manual ;
24656: LD_ADDR_VAR 0 4
24660: PUSH
24661: LD_INT 1
24663: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24664: LD_ADDR_VAR 0 8
24668: PUSH
24669: LD_VAR 0 1
24673: PPUSH
24674: CALL 24361 0 1
24678: ST_TO_ADDR
// if tmp then
24679: LD_VAR 0 8
24683: IFFALSE 24726
// begin for i in tmp do
24685: LD_ADDR_VAR 0 7
24689: PUSH
24690: LD_VAR 0 8
24694: PUSH
24695: FOR_IN
24696: IFFALSE 24724
// if i [ 1 ] = b_ext_radio then
24698: LD_VAR 0 7
24702: PUSH
24703: LD_INT 1
24705: ARRAY
24706: PUSH
24707: LD_INT 22
24709: EQUAL
24710: IFFALSE 24722
// begin control := control_remote ;
24712: LD_ADDR_VAR 0 4
24716: PUSH
24717: LD_INT 2
24719: ST_TO_ADDR
// break ;
24720: GO 24724
// end ;
24722: GO 24695
24724: POP
24725: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24726: LD_VAR 0 1
24730: PPUSH
24731: LD_VAR 0 2
24735: PPUSH
24736: LD_VAR 0 3
24740: PPUSH
24741: LD_VAR 0 4
24745: PPUSH
24746: LD_VAR 0 5
24750: PPUSH
24751: CALL_OW 448
24755: IFFALSE 24790
// begin result := [ chassis , engine , control , weapon ] ;
24757: LD_ADDR_VAR 0 6
24761: PUSH
24762: LD_VAR 0 2
24766: PUSH
24767: LD_VAR 0 3
24771: PUSH
24772: LD_VAR 0 4
24776: PUSH
24777: LD_VAR 0 5
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: ST_TO_ADDR
// exit ;
24788: GO 25202
// end ; _chassis := AvailableChassisList ( factory ) ;
24790: LD_ADDR_VAR 0 9
24794: PUSH
24795: LD_VAR 0 1
24799: PPUSH
24800: CALL_OW 475
24804: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24805: LD_ADDR_VAR 0 11
24809: PUSH
24810: LD_VAR 0 1
24814: PPUSH
24815: CALL_OW 476
24819: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24820: LD_ADDR_VAR 0 12
24824: PUSH
24825: LD_VAR 0 1
24829: PPUSH
24830: CALL_OW 477
24834: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24835: LD_ADDR_VAR 0 10
24839: PUSH
24840: LD_VAR 0 1
24844: PPUSH
24845: CALL_OW 478
24849: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24850: LD_VAR 0 9
24854: NOT
24855: PUSH
24856: LD_VAR 0 11
24860: NOT
24861: OR
24862: PUSH
24863: LD_VAR 0 12
24867: NOT
24868: OR
24869: PUSH
24870: LD_VAR 0 10
24874: NOT
24875: OR
24876: IFFALSE 24911
// begin result := [ chassis , engine , control , weapon ] ;
24878: LD_ADDR_VAR 0 6
24882: PUSH
24883: LD_VAR 0 2
24887: PUSH
24888: LD_VAR 0 3
24892: PUSH
24893: LD_VAR 0 4
24897: PUSH
24898: LD_VAR 0 5
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: ST_TO_ADDR
// exit ;
24909: GO 25202
// end ; if not chassis in _chassis then
24911: LD_VAR 0 2
24915: PUSH
24916: LD_VAR 0 9
24920: IN
24921: NOT
24922: IFFALSE 24948
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24924: LD_ADDR_VAR 0 2
24928: PUSH
24929: LD_VAR 0 9
24933: PUSH
24934: LD_INT 1
24936: PPUSH
24937: LD_VAR 0 9
24941: PPUSH
24942: CALL_OW 12
24946: ARRAY
24947: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24948: LD_VAR 0 2
24952: PPUSH
24953: LD_VAR 0 3
24957: PPUSH
24958: CALL 25207 0 2
24962: NOT
24963: IFFALSE 25022
// repeat engine := _engine [ 1 ] ;
24965: LD_ADDR_VAR 0 3
24969: PUSH
24970: LD_VAR 0 11
24974: PUSH
24975: LD_INT 1
24977: ARRAY
24978: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24979: LD_ADDR_VAR 0 11
24983: PUSH
24984: LD_VAR 0 11
24988: PPUSH
24989: LD_INT 1
24991: PPUSH
24992: CALL_OW 3
24996: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24997: LD_VAR 0 2
25001: PPUSH
25002: LD_VAR 0 3
25006: PPUSH
25007: CALL 25207 0 2
25011: PUSH
25012: LD_VAR 0 11
25016: PUSH
25017: EMPTY
25018: EQUAL
25019: OR
25020: IFFALSE 24965
// if not control in _control then
25022: LD_VAR 0 4
25026: PUSH
25027: LD_VAR 0 12
25031: IN
25032: NOT
25033: IFFALSE 25059
// control := _control [ rand ( 1 , _control ) ] ;
25035: LD_ADDR_VAR 0 4
25039: PUSH
25040: LD_VAR 0 12
25044: PUSH
25045: LD_INT 1
25047: PPUSH
25048: LD_VAR 0 12
25052: PPUSH
25053: CALL_OW 12
25057: ARRAY
25058: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25059: LD_VAR 0 2
25063: PPUSH
25064: LD_VAR 0 5
25068: PPUSH
25069: CALL 25427 0 2
25073: NOT
25074: IFFALSE 25133
// repeat weapon := _weapon [ 1 ] ;
25076: LD_ADDR_VAR 0 5
25080: PUSH
25081: LD_VAR 0 10
25085: PUSH
25086: LD_INT 1
25088: ARRAY
25089: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25090: LD_ADDR_VAR 0 10
25094: PUSH
25095: LD_VAR 0 10
25099: PPUSH
25100: LD_INT 1
25102: PPUSH
25103: CALL_OW 3
25107: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25108: LD_VAR 0 2
25112: PPUSH
25113: LD_VAR 0 5
25117: PPUSH
25118: CALL 25427 0 2
25122: PUSH
25123: LD_VAR 0 10
25127: PUSH
25128: EMPTY
25129: EQUAL
25130: OR
25131: IFFALSE 25076
// result := [ ] ;
25133: LD_ADDR_VAR 0 6
25137: PUSH
25138: EMPTY
25139: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25140: LD_VAR 0 1
25144: PPUSH
25145: LD_VAR 0 2
25149: PPUSH
25150: LD_VAR 0 3
25154: PPUSH
25155: LD_VAR 0 4
25159: PPUSH
25160: LD_VAR 0 5
25164: PPUSH
25165: CALL_OW 448
25169: IFFALSE 25202
// result := [ chassis , engine , control , weapon ] ;
25171: LD_ADDR_VAR 0 6
25175: PUSH
25176: LD_VAR 0 2
25180: PUSH
25181: LD_VAR 0 3
25185: PUSH
25186: LD_VAR 0 4
25190: PUSH
25191: LD_VAR 0 5
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: ST_TO_ADDR
// end ;
25202: LD_VAR 0 6
25206: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25207: LD_INT 0
25209: PPUSH
// if not chassis or not engine then
25210: LD_VAR 0 1
25214: NOT
25215: PUSH
25216: LD_VAR 0 2
25220: NOT
25221: OR
25222: IFFALSE 25226
// exit ;
25224: GO 25422
// case engine of engine_solar :
25226: LD_VAR 0 2
25230: PUSH
25231: LD_INT 2
25233: DOUBLE
25234: EQUAL
25235: IFTRUE 25239
25237: GO 25277
25239: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25240: LD_ADDR_VAR 0 3
25244: PUSH
25245: LD_INT 11
25247: PUSH
25248: LD_INT 12
25250: PUSH
25251: LD_INT 13
25253: PUSH
25254: LD_INT 14
25256: PUSH
25257: LD_INT 1
25259: PUSH
25260: LD_INT 2
25262: PUSH
25263: LD_INT 3
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: ST_TO_ADDR
25275: GO 25406
25277: LD_INT 1
25279: DOUBLE
25280: EQUAL
25281: IFTRUE 25285
25283: GO 25347
25285: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25286: LD_ADDR_VAR 0 3
25290: PUSH
25291: LD_INT 11
25293: PUSH
25294: LD_INT 12
25296: PUSH
25297: LD_INT 13
25299: PUSH
25300: LD_INT 14
25302: PUSH
25303: LD_INT 1
25305: PUSH
25306: LD_INT 2
25308: PUSH
25309: LD_INT 3
25311: PUSH
25312: LD_INT 4
25314: PUSH
25315: LD_INT 5
25317: PUSH
25318: LD_INT 21
25320: PUSH
25321: LD_INT 23
25323: PUSH
25324: LD_INT 22
25326: PUSH
25327: LD_INT 24
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: ST_TO_ADDR
25345: GO 25406
25347: LD_INT 3
25349: DOUBLE
25350: EQUAL
25351: IFTRUE 25355
25353: GO 25405
25355: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25356: LD_ADDR_VAR 0 3
25360: PUSH
25361: LD_INT 13
25363: PUSH
25364: LD_INT 14
25366: PUSH
25367: LD_INT 2
25369: PUSH
25370: LD_INT 3
25372: PUSH
25373: LD_INT 4
25375: PUSH
25376: LD_INT 5
25378: PUSH
25379: LD_INT 21
25381: PUSH
25382: LD_INT 22
25384: PUSH
25385: LD_INT 23
25387: PUSH
25388: LD_INT 24
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: ST_TO_ADDR
25403: GO 25406
25405: POP
// result := ( chassis in result ) ;
25406: LD_ADDR_VAR 0 3
25410: PUSH
25411: LD_VAR 0 1
25415: PUSH
25416: LD_VAR 0 3
25420: IN
25421: ST_TO_ADDR
// end ;
25422: LD_VAR 0 3
25426: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25427: LD_INT 0
25429: PPUSH
// if not chassis or not weapon then
25430: LD_VAR 0 1
25434: NOT
25435: PUSH
25436: LD_VAR 0 2
25440: NOT
25441: OR
25442: IFFALSE 25446
// exit ;
25444: GO 26506
// case weapon of us_machine_gun :
25446: LD_VAR 0 2
25450: PUSH
25451: LD_INT 2
25453: DOUBLE
25454: EQUAL
25455: IFTRUE 25459
25457: GO 25489
25459: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25460: LD_ADDR_VAR 0 3
25464: PUSH
25465: LD_INT 1
25467: PUSH
25468: LD_INT 2
25470: PUSH
25471: LD_INT 3
25473: PUSH
25474: LD_INT 4
25476: PUSH
25477: LD_INT 5
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: ST_TO_ADDR
25487: GO 26490
25489: LD_INT 3
25491: DOUBLE
25492: EQUAL
25493: IFTRUE 25497
25495: GO 25527
25497: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25498: LD_ADDR_VAR 0 3
25502: PUSH
25503: LD_INT 1
25505: PUSH
25506: LD_INT 2
25508: PUSH
25509: LD_INT 3
25511: PUSH
25512: LD_INT 4
25514: PUSH
25515: LD_INT 5
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: ST_TO_ADDR
25525: GO 26490
25527: LD_INT 11
25529: DOUBLE
25530: EQUAL
25531: IFTRUE 25535
25533: GO 25565
25535: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25536: LD_ADDR_VAR 0 3
25540: PUSH
25541: LD_INT 1
25543: PUSH
25544: LD_INT 2
25546: PUSH
25547: LD_INT 3
25549: PUSH
25550: LD_INT 4
25552: PUSH
25553: LD_INT 5
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: ST_TO_ADDR
25563: GO 26490
25565: LD_INT 4
25567: DOUBLE
25568: EQUAL
25569: IFTRUE 25573
25571: GO 25599
25573: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25574: LD_ADDR_VAR 0 3
25578: PUSH
25579: LD_INT 2
25581: PUSH
25582: LD_INT 3
25584: PUSH
25585: LD_INT 4
25587: PUSH
25588: LD_INT 5
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: ST_TO_ADDR
25597: GO 26490
25599: LD_INT 5
25601: DOUBLE
25602: EQUAL
25603: IFTRUE 25607
25605: GO 25633
25607: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25608: LD_ADDR_VAR 0 3
25612: PUSH
25613: LD_INT 2
25615: PUSH
25616: LD_INT 3
25618: PUSH
25619: LD_INT 4
25621: PUSH
25622: LD_INT 5
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: ST_TO_ADDR
25631: GO 26490
25633: LD_INT 9
25635: DOUBLE
25636: EQUAL
25637: IFTRUE 25641
25639: GO 25667
25641: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25642: LD_ADDR_VAR 0 3
25646: PUSH
25647: LD_INT 2
25649: PUSH
25650: LD_INT 3
25652: PUSH
25653: LD_INT 4
25655: PUSH
25656: LD_INT 5
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: ST_TO_ADDR
25665: GO 26490
25667: LD_INT 7
25669: DOUBLE
25670: EQUAL
25671: IFTRUE 25675
25673: GO 25701
25675: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25676: LD_ADDR_VAR 0 3
25680: PUSH
25681: LD_INT 2
25683: PUSH
25684: LD_INT 3
25686: PUSH
25687: LD_INT 4
25689: PUSH
25690: LD_INT 5
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: ST_TO_ADDR
25699: GO 26490
25701: LD_INT 12
25703: DOUBLE
25704: EQUAL
25705: IFTRUE 25709
25707: GO 25735
25709: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25710: LD_ADDR_VAR 0 3
25714: PUSH
25715: LD_INT 2
25717: PUSH
25718: LD_INT 3
25720: PUSH
25721: LD_INT 4
25723: PUSH
25724: LD_INT 5
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: ST_TO_ADDR
25733: GO 26490
25735: LD_INT 13
25737: DOUBLE
25738: EQUAL
25739: IFTRUE 25743
25741: GO 25769
25743: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25744: LD_ADDR_VAR 0 3
25748: PUSH
25749: LD_INT 2
25751: PUSH
25752: LD_INT 3
25754: PUSH
25755: LD_INT 4
25757: PUSH
25758: LD_INT 5
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: ST_TO_ADDR
25767: GO 26490
25769: LD_INT 14
25771: DOUBLE
25772: EQUAL
25773: IFTRUE 25777
25775: GO 25795
25777: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25778: LD_ADDR_VAR 0 3
25782: PUSH
25783: LD_INT 4
25785: PUSH
25786: LD_INT 5
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: ST_TO_ADDR
25793: GO 26490
25795: LD_INT 6
25797: DOUBLE
25798: EQUAL
25799: IFTRUE 25803
25801: GO 25821
25803: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25804: LD_ADDR_VAR 0 3
25808: PUSH
25809: LD_INT 4
25811: PUSH
25812: LD_INT 5
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: ST_TO_ADDR
25819: GO 26490
25821: LD_INT 10
25823: DOUBLE
25824: EQUAL
25825: IFTRUE 25829
25827: GO 25847
25829: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25830: LD_ADDR_VAR 0 3
25834: PUSH
25835: LD_INT 4
25837: PUSH
25838: LD_INT 5
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: ST_TO_ADDR
25845: GO 26490
25847: LD_INT 22
25849: DOUBLE
25850: EQUAL
25851: IFTRUE 25855
25853: GO 25881
25855: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25856: LD_ADDR_VAR 0 3
25860: PUSH
25861: LD_INT 11
25863: PUSH
25864: LD_INT 12
25866: PUSH
25867: LD_INT 13
25869: PUSH
25870: LD_INT 14
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: ST_TO_ADDR
25879: GO 26490
25881: LD_INT 23
25883: DOUBLE
25884: EQUAL
25885: IFTRUE 25889
25887: GO 25915
25889: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25890: LD_ADDR_VAR 0 3
25894: PUSH
25895: LD_INT 11
25897: PUSH
25898: LD_INT 12
25900: PUSH
25901: LD_INT 13
25903: PUSH
25904: LD_INT 14
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: ST_TO_ADDR
25913: GO 26490
25915: LD_INT 24
25917: DOUBLE
25918: EQUAL
25919: IFTRUE 25923
25921: GO 25949
25923: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25924: LD_ADDR_VAR 0 3
25928: PUSH
25929: LD_INT 11
25931: PUSH
25932: LD_INT 12
25934: PUSH
25935: LD_INT 13
25937: PUSH
25938: LD_INT 14
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: ST_TO_ADDR
25947: GO 26490
25949: LD_INT 30
25951: DOUBLE
25952: EQUAL
25953: IFTRUE 25957
25955: GO 25983
25957: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25958: LD_ADDR_VAR 0 3
25962: PUSH
25963: LD_INT 11
25965: PUSH
25966: LD_INT 12
25968: PUSH
25969: LD_INT 13
25971: PUSH
25972: LD_INT 14
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: ST_TO_ADDR
25981: GO 26490
25983: LD_INT 25
25985: DOUBLE
25986: EQUAL
25987: IFTRUE 25991
25989: GO 26009
25991: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25992: LD_ADDR_VAR 0 3
25996: PUSH
25997: LD_INT 13
25999: PUSH
26000: LD_INT 14
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: ST_TO_ADDR
26007: GO 26490
26009: LD_INT 27
26011: DOUBLE
26012: EQUAL
26013: IFTRUE 26017
26015: GO 26035
26017: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
26018: LD_ADDR_VAR 0 3
26022: PUSH
26023: LD_INT 13
26025: PUSH
26026: LD_INT 14
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: ST_TO_ADDR
26033: GO 26490
26035: LD_INT 92
26037: DOUBLE
26038: EQUAL
26039: IFTRUE 26043
26041: GO 26069
26043: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26044: LD_ADDR_VAR 0 3
26048: PUSH
26049: LD_INT 11
26051: PUSH
26052: LD_INT 12
26054: PUSH
26055: LD_INT 13
26057: PUSH
26058: LD_INT 14
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: ST_TO_ADDR
26067: GO 26490
26069: LD_INT 28
26071: DOUBLE
26072: EQUAL
26073: IFTRUE 26077
26075: GO 26095
26077: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26078: LD_ADDR_VAR 0 3
26082: PUSH
26083: LD_INT 13
26085: PUSH
26086: LD_INT 14
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: ST_TO_ADDR
26093: GO 26490
26095: LD_INT 29
26097: DOUBLE
26098: EQUAL
26099: IFTRUE 26103
26101: GO 26121
26103: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26104: LD_ADDR_VAR 0 3
26108: PUSH
26109: LD_INT 13
26111: PUSH
26112: LD_INT 14
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: ST_TO_ADDR
26119: GO 26490
26121: LD_INT 31
26123: DOUBLE
26124: EQUAL
26125: IFTRUE 26129
26127: GO 26147
26129: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26130: LD_ADDR_VAR 0 3
26134: PUSH
26135: LD_INT 13
26137: PUSH
26138: LD_INT 14
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: ST_TO_ADDR
26145: GO 26490
26147: LD_INT 26
26149: DOUBLE
26150: EQUAL
26151: IFTRUE 26155
26153: GO 26173
26155: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26156: LD_ADDR_VAR 0 3
26160: PUSH
26161: LD_INT 13
26163: PUSH
26164: LD_INT 14
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: ST_TO_ADDR
26171: GO 26490
26173: LD_INT 42
26175: DOUBLE
26176: EQUAL
26177: IFTRUE 26181
26179: GO 26207
26181: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26182: LD_ADDR_VAR 0 3
26186: PUSH
26187: LD_INT 21
26189: PUSH
26190: LD_INT 22
26192: PUSH
26193: LD_INT 23
26195: PUSH
26196: LD_INT 24
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: LIST
26203: LIST
26204: ST_TO_ADDR
26205: GO 26490
26207: LD_INT 43
26209: DOUBLE
26210: EQUAL
26211: IFTRUE 26215
26213: GO 26241
26215: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26216: LD_ADDR_VAR 0 3
26220: PUSH
26221: LD_INT 21
26223: PUSH
26224: LD_INT 22
26226: PUSH
26227: LD_INT 23
26229: PUSH
26230: LD_INT 24
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: ST_TO_ADDR
26239: GO 26490
26241: LD_INT 44
26243: DOUBLE
26244: EQUAL
26245: IFTRUE 26249
26247: GO 26275
26249: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26250: LD_ADDR_VAR 0 3
26254: PUSH
26255: LD_INT 21
26257: PUSH
26258: LD_INT 22
26260: PUSH
26261: LD_INT 23
26263: PUSH
26264: LD_INT 24
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: ST_TO_ADDR
26273: GO 26490
26275: LD_INT 45
26277: DOUBLE
26278: EQUAL
26279: IFTRUE 26283
26281: GO 26309
26283: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26284: LD_ADDR_VAR 0 3
26288: PUSH
26289: LD_INT 21
26291: PUSH
26292: LD_INT 22
26294: PUSH
26295: LD_INT 23
26297: PUSH
26298: LD_INT 24
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: ST_TO_ADDR
26307: GO 26490
26309: LD_INT 49
26311: DOUBLE
26312: EQUAL
26313: IFTRUE 26317
26315: GO 26343
26317: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26318: LD_ADDR_VAR 0 3
26322: PUSH
26323: LD_INT 21
26325: PUSH
26326: LD_INT 22
26328: PUSH
26329: LD_INT 23
26331: PUSH
26332: LD_INT 24
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: ST_TO_ADDR
26341: GO 26490
26343: LD_INT 51
26345: DOUBLE
26346: EQUAL
26347: IFTRUE 26351
26349: GO 26377
26351: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26352: LD_ADDR_VAR 0 3
26356: PUSH
26357: LD_INT 21
26359: PUSH
26360: LD_INT 22
26362: PUSH
26363: LD_INT 23
26365: PUSH
26366: LD_INT 24
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: ST_TO_ADDR
26375: GO 26490
26377: LD_INT 52
26379: DOUBLE
26380: EQUAL
26381: IFTRUE 26385
26383: GO 26411
26385: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26386: LD_ADDR_VAR 0 3
26390: PUSH
26391: LD_INT 21
26393: PUSH
26394: LD_INT 22
26396: PUSH
26397: LD_INT 23
26399: PUSH
26400: LD_INT 24
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: ST_TO_ADDR
26409: GO 26490
26411: LD_INT 53
26413: DOUBLE
26414: EQUAL
26415: IFTRUE 26419
26417: GO 26437
26419: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26420: LD_ADDR_VAR 0 3
26424: PUSH
26425: LD_INT 23
26427: PUSH
26428: LD_INT 24
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: ST_TO_ADDR
26435: GO 26490
26437: LD_INT 46
26439: DOUBLE
26440: EQUAL
26441: IFTRUE 26445
26443: GO 26463
26445: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26446: LD_ADDR_VAR 0 3
26450: PUSH
26451: LD_INT 23
26453: PUSH
26454: LD_INT 24
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: ST_TO_ADDR
26461: GO 26490
26463: LD_INT 47
26465: DOUBLE
26466: EQUAL
26467: IFTRUE 26471
26469: GO 26489
26471: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26472: LD_ADDR_VAR 0 3
26476: PUSH
26477: LD_INT 23
26479: PUSH
26480: LD_INT 24
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: ST_TO_ADDR
26487: GO 26490
26489: POP
// result := ( chassis in result ) ;
26490: LD_ADDR_VAR 0 3
26494: PUSH
26495: LD_VAR 0 1
26499: PUSH
26500: LD_VAR 0 3
26504: IN
26505: ST_TO_ADDR
// end ;
26506: LD_VAR 0 3
26510: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26511: LD_INT 0
26513: PPUSH
26514: PPUSH
26515: PPUSH
26516: PPUSH
26517: PPUSH
26518: PPUSH
26519: PPUSH
// result := array ;
26520: LD_ADDR_VAR 0 5
26524: PUSH
26525: LD_VAR 0 1
26529: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26530: LD_VAR 0 1
26534: NOT
26535: PUSH
26536: LD_VAR 0 2
26540: NOT
26541: OR
26542: PUSH
26543: LD_VAR 0 3
26547: NOT
26548: OR
26549: PUSH
26550: LD_VAR 0 2
26554: PUSH
26555: LD_VAR 0 1
26559: GREATER
26560: OR
26561: PUSH
26562: LD_VAR 0 3
26566: PUSH
26567: LD_VAR 0 1
26571: GREATER
26572: OR
26573: IFFALSE 26577
// exit ;
26575: GO 26873
// if direction then
26577: LD_VAR 0 4
26581: IFFALSE 26645
// begin d := 1 ;
26583: LD_ADDR_VAR 0 9
26587: PUSH
26588: LD_INT 1
26590: ST_TO_ADDR
// if i_from > i_to then
26591: LD_VAR 0 2
26595: PUSH
26596: LD_VAR 0 3
26600: GREATER
26601: IFFALSE 26627
// length := ( array - i_from ) + i_to else
26603: LD_ADDR_VAR 0 11
26607: PUSH
26608: LD_VAR 0 1
26612: PUSH
26613: LD_VAR 0 2
26617: MINUS
26618: PUSH
26619: LD_VAR 0 3
26623: PLUS
26624: ST_TO_ADDR
26625: GO 26643
// length := i_to - i_from ;
26627: LD_ADDR_VAR 0 11
26631: PUSH
26632: LD_VAR 0 3
26636: PUSH
26637: LD_VAR 0 2
26641: MINUS
26642: ST_TO_ADDR
// end else
26643: GO 26706
// begin d := - 1 ;
26645: LD_ADDR_VAR 0 9
26649: PUSH
26650: LD_INT 1
26652: NEG
26653: ST_TO_ADDR
// if i_from > i_to then
26654: LD_VAR 0 2
26658: PUSH
26659: LD_VAR 0 3
26663: GREATER
26664: IFFALSE 26684
// length := i_from - i_to else
26666: LD_ADDR_VAR 0 11
26670: PUSH
26671: LD_VAR 0 2
26675: PUSH
26676: LD_VAR 0 3
26680: MINUS
26681: ST_TO_ADDR
26682: GO 26706
// length := ( array - i_to ) + i_from ;
26684: LD_ADDR_VAR 0 11
26688: PUSH
26689: LD_VAR 0 1
26693: PUSH
26694: LD_VAR 0 3
26698: MINUS
26699: PUSH
26700: LD_VAR 0 2
26704: PLUS
26705: ST_TO_ADDR
// end ; if not length then
26706: LD_VAR 0 11
26710: NOT
26711: IFFALSE 26715
// exit ;
26713: GO 26873
// tmp := array ;
26715: LD_ADDR_VAR 0 10
26719: PUSH
26720: LD_VAR 0 1
26724: ST_TO_ADDR
// for i = 1 to length do
26725: LD_ADDR_VAR 0 6
26729: PUSH
26730: DOUBLE
26731: LD_INT 1
26733: DEC
26734: ST_TO_ADDR
26735: LD_VAR 0 11
26739: PUSH
26740: FOR_TO
26741: IFFALSE 26861
// begin for j = 1 to array do
26743: LD_ADDR_VAR 0 7
26747: PUSH
26748: DOUBLE
26749: LD_INT 1
26751: DEC
26752: ST_TO_ADDR
26753: LD_VAR 0 1
26757: PUSH
26758: FOR_TO
26759: IFFALSE 26847
// begin k := j + d ;
26761: LD_ADDR_VAR 0 8
26765: PUSH
26766: LD_VAR 0 7
26770: PUSH
26771: LD_VAR 0 9
26775: PLUS
26776: ST_TO_ADDR
// if k > array then
26777: LD_VAR 0 8
26781: PUSH
26782: LD_VAR 0 1
26786: GREATER
26787: IFFALSE 26797
// k := 1 ;
26789: LD_ADDR_VAR 0 8
26793: PUSH
26794: LD_INT 1
26796: ST_TO_ADDR
// if not k then
26797: LD_VAR 0 8
26801: NOT
26802: IFFALSE 26814
// k := array ;
26804: LD_ADDR_VAR 0 8
26808: PUSH
26809: LD_VAR 0 1
26813: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26814: LD_ADDR_VAR 0 10
26818: PUSH
26819: LD_VAR 0 10
26823: PPUSH
26824: LD_VAR 0 8
26828: PPUSH
26829: LD_VAR 0 1
26833: PUSH
26834: LD_VAR 0 7
26838: ARRAY
26839: PPUSH
26840: CALL_OW 1
26844: ST_TO_ADDR
// end ;
26845: GO 26758
26847: POP
26848: POP
// array := tmp ;
26849: LD_ADDR_VAR 0 1
26853: PUSH
26854: LD_VAR 0 10
26858: ST_TO_ADDR
// end ;
26859: GO 26740
26861: POP
26862: POP
// result := array ;
26863: LD_ADDR_VAR 0 5
26867: PUSH
26868: LD_VAR 0 1
26872: ST_TO_ADDR
// end ;
26873: LD_VAR 0 5
26877: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26878: LD_INT 0
26880: PPUSH
26881: PPUSH
// result := 0 ;
26882: LD_ADDR_VAR 0 3
26886: PUSH
26887: LD_INT 0
26889: ST_TO_ADDR
// if not array or not value in array then
26890: LD_VAR 0 1
26894: NOT
26895: PUSH
26896: LD_VAR 0 2
26900: PUSH
26901: LD_VAR 0 1
26905: IN
26906: NOT
26907: OR
26908: IFFALSE 26912
// exit ;
26910: GO 26966
// for i = 1 to array do
26912: LD_ADDR_VAR 0 4
26916: PUSH
26917: DOUBLE
26918: LD_INT 1
26920: DEC
26921: ST_TO_ADDR
26922: LD_VAR 0 1
26926: PUSH
26927: FOR_TO
26928: IFFALSE 26964
// if value = array [ i ] then
26930: LD_VAR 0 2
26934: PUSH
26935: LD_VAR 0 1
26939: PUSH
26940: LD_VAR 0 4
26944: ARRAY
26945: EQUAL
26946: IFFALSE 26962
// begin result := i ;
26948: LD_ADDR_VAR 0 3
26952: PUSH
26953: LD_VAR 0 4
26957: ST_TO_ADDR
// exit ;
26958: POP
26959: POP
26960: GO 26966
// end ;
26962: GO 26927
26964: POP
26965: POP
// end ;
26966: LD_VAR 0 3
26970: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26971: LD_INT 0
26973: PPUSH
// vc_chassis := chassis ;
26974: LD_ADDR_OWVAR 37
26978: PUSH
26979: LD_VAR 0 1
26983: ST_TO_ADDR
// vc_engine := engine ;
26984: LD_ADDR_OWVAR 39
26988: PUSH
26989: LD_VAR 0 2
26993: ST_TO_ADDR
// vc_control := control ;
26994: LD_ADDR_OWVAR 38
26998: PUSH
26999: LD_VAR 0 3
27003: ST_TO_ADDR
// vc_weapon := weapon ;
27004: LD_ADDR_OWVAR 40
27008: PUSH
27009: LD_VAR 0 4
27013: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27014: LD_ADDR_OWVAR 41
27018: PUSH
27019: LD_VAR 0 5
27023: ST_TO_ADDR
// end ;
27024: LD_VAR 0 6
27028: RET
// export function WantPlant ( unit ) ; var task ; begin
27029: LD_INT 0
27031: PPUSH
27032: PPUSH
// result := false ;
27033: LD_ADDR_VAR 0 2
27037: PUSH
27038: LD_INT 0
27040: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27041: LD_ADDR_VAR 0 3
27045: PUSH
27046: LD_VAR 0 1
27050: PPUSH
27051: CALL_OW 437
27055: ST_TO_ADDR
// if task then
27056: LD_VAR 0 3
27060: IFFALSE 27088
// if task [ 1 ] [ 1 ] = p then
27062: LD_VAR 0 3
27066: PUSH
27067: LD_INT 1
27069: ARRAY
27070: PUSH
27071: LD_INT 1
27073: ARRAY
27074: PUSH
27075: LD_STRING p
27077: EQUAL
27078: IFFALSE 27088
// result := true ;
27080: LD_ADDR_VAR 0 2
27084: PUSH
27085: LD_INT 1
27087: ST_TO_ADDR
// end ;
27088: LD_VAR 0 2
27092: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27093: LD_INT 0
27095: PPUSH
27096: PPUSH
27097: PPUSH
27098: PPUSH
// if pos < 1 then
27099: LD_VAR 0 2
27103: PUSH
27104: LD_INT 1
27106: LESS
27107: IFFALSE 27111
// exit ;
27109: GO 27414
// if pos = 1 then
27111: LD_VAR 0 2
27115: PUSH
27116: LD_INT 1
27118: EQUAL
27119: IFFALSE 27152
// result := Replace ( arr , pos [ 1 ] , value ) else
27121: LD_ADDR_VAR 0 4
27125: PUSH
27126: LD_VAR 0 1
27130: PPUSH
27131: LD_VAR 0 2
27135: PUSH
27136: LD_INT 1
27138: ARRAY
27139: PPUSH
27140: LD_VAR 0 3
27144: PPUSH
27145: CALL_OW 1
27149: ST_TO_ADDR
27150: GO 27414
// begin tmp := arr ;
27152: LD_ADDR_VAR 0 6
27156: PUSH
27157: LD_VAR 0 1
27161: ST_TO_ADDR
// s_arr := [ tmp ] ;
27162: LD_ADDR_VAR 0 7
27166: PUSH
27167: LD_VAR 0 6
27171: PUSH
27172: EMPTY
27173: LIST
27174: ST_TO_ADDR
// for i = 1 to pos - 1 do
27175: LD_ADDR_VAR 0 5
27179: PUSH
27180: DOUBLE
27181: LD_INT 1
27183: DEC
27184: ST_TO_ADDR
27185: LD_VAR 0 2
27189: PUSH
27190: LD_INT 1
27192: MINUS
27193: PUSH
27194: FOR_TO
27195: IFFALSE 27240
// begin tmp := tmp [ pos [ i ] ] ;
27197: LD_ADDR_VAR 0 6
27201: PUSH
27202: LD_VAR 0 6
27206: PUSH
27207: LD_VAR 0 2
27211: PUSH
27212: LD_VAR 0 5
27216: ARRAY
27217: ARRAY
27218: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27219: LD_ADDR_VAR 0 7
27223: PUSH
27224: LD_VAR 0 7
27228: PUSH
27229: LD_VAR 0 6
27233: PUSH
27234: EMPTY
27235: LIST
27236: ADD
27237: ST_TO_ADDR
// end ;
27238: GO 27194
27240: POP
27241: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27242: LD_ADDR_VAR 0 6
27246: PUSH
27247: LD_VAR 0 6
27251: PPUSH
27252: LD_VAR 0 2
27256: PUSH
27257: LD_VAR 0 2
27261: ARRAY
27262: PPUSH
27263: LD_VAR 0 3
27267: PPUSH
27268: CALL_OW 1
27272: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27273: LD_ADDR_VAR 0 7
27277: PUSH
27278: LD_VAR 0 7
27282: PPUSH
27283: LD_VAR 0 7
27287: PPUSH
27288: LD_VAR 0 6
27292: PPUSH
27293: CALL_OW 1
27297: ST_TO_ADDR
// for i = s_arr downto 2 do
27298: LD_ADDR_VAR 0 5
27302: PUSH
27303: DOUBLE
27304: LD_VAR 0 7
27308: INC
27309: ST_TO_ADDR
27310: LD_INT 2
27312: PUSH
27313: FOR_DOWNTO
27314: IFFALSE 27398
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27316: LD_ADDR_VAR 0 6
27320: PUSH
27321: LD_VAR 0 7
27325: PUSH
27326: LD_VAR 0 5
27330: PUSH
27331: LD_INT 1
27333: MINUS
27334: ARRAY
27335: PPUSH
27336: LD_VAR 0 2
27340: PUSH
27341: LD_VAR 0 5
27345: PUSH
27346: LD_INT 1
27348: MINUS
27349: ARRAY
27350: PPUSH
27351: LD_VAR 0 7
27355: PUSH
27356: LD_VAR 0 5
27360: ARRAY
27361: PPUSH
27362: CALL_OW 1
27366: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27367: LD_ADDR_VAR 0 7
27371: PUSH
27372: LD_VAR 0 7
27376: PPUSH
27377: LD_VAR 0 5
27381: PUSH
27382: LD_INT 1
27384: MINUS
27385: PPUSH
27386: LD_VAR 0 6
27390: PPUSH
27391: CALL_OW 1
27395: ST_TO_ADDR
// end ;
27396: GO 27313
27398: POP
27399: POP
// result := s_arr [ 1 ] ;
27400: LD_ADDR_VAR 0 4
27404: PUSH
27405: LD_VAR 0 7
27409: PUSH
27410: LD_INT 1
27412: ARRAY
27413: ST_TO_ADDR
// end ; end ;
27414: LD_VAR 0 4
27418: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27419: LD_INT 0
27421: PPUSH
27422: PPUSH
// if not list then
27423: LD_VAR 0 1
27427: NOT
27428: IFFALSE 27432
// exit ;
27430: GO 27523
// i := list [ pos1 ] ;
27432: LD_ADDR_VAR 0 5
27436: PUSH
27437: LD_VAR 0 1
27441: PUSH
27442: LD_VAR 0 2
27446: ARRAY
27447: ST_TO_ADDR
// if not i then
27448: LD_VAR 0 5
27452: NOT
27453: IFFALSE 27457
// exit ;
27455: GO 27523
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27457: LD_ADDR_VAR 0 1
27461: PUSH
27462: LD_VAR 0 1
27466: PPUSH
27467: LD_VAR 0 2
27471: PPUSH
27472: LD_VAR 0 1
27476: PUSH
27477: LD_VAR 0 3
27481: ARRAY
27482: PPUSH
27483: CALL_OW 1
27487: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27488: LD_ADDR_VAR 0 1
27492: PUSH
27493: LD_VAR 0 1
27497: PPUSH
27498: LD_VAR 0 3
27502: PPUSH
27503: LD_VAR 0 5
27507: PPUSH
27508: CALL_OW 1
27512: ST_TO_ADDR
// result := list ;
27513: LD_ADDR_VAR 0 4
27517: PUSH
27518: LD_VAR 0 1
27522: ST_TO_ADDR
// end ;
27523: LD_VAR 0 4
27527: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27528: LD_INT 0
27530: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27531: LD_ADDR_VAR 0 5
27535: PUSH
27536: LD_VAR 0 1
27540: PPUSH
27541: CALL_OW 250
27545: PPUSH
27546: LD_VAR 0 1
27550: PPUSH
27551: CALL_OW 251
27555: PPUSH
27556: LD_VAR 0 2
27560: PPUSH
27561: LD_VAR 0 3
27565: PPUSH
27566: LD_VAR 0 4
27570: PPUSH
27571: CALL 27581 0 5
27575: ST_TO_ADDR
// end ;
27576: LD_VAR 0 5
27580: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27581: LD_INT 0
27583: PPUSH
27584: PPUSH
27585: PPUSH
27586: PPUSH
// if not list then
27587: LD_VAR 0 3
27591: NOT
27592: IFFALSE 27596
// exit ;
27594: GO 27984
// result := [ ] ;
27596: LD_ADDR_VAR 0 6
27600: PUSH
27601: EMPTY
27602: ST_TO_ADDR
// for i in list do
27603: LD_ADDR_VAR 0 7
27607: PUSH
27608: LD_VAR 0 3
27612: PUSH
27613: FOR_IN
27614: IFFALSE 27816
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27616: LD_ADDR_VAR 0 9
27620: PUSH
27621: LD_VAR 0 7
27625: PPUSH
27626: LD_VAR 0 1
27630: PPUSH
27631: LD_VAR 0 2
27635: PPUSH
27636: CALL_OW 297
27640: ST_TO_ADDR
// if not result then
27641: LD_VAR 0 6
27645: NOT
27646: IFFALSE 27672
// result := [ [ i , tmp ] ] else
27648: LD_ADDR_VAR 0 6
27652: PUSH
27653: LD_VAR 0 7
27657: PUSH
27658: LD_VAR 0 9
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: EMPTY
27668: LIST
27669: ST_TO_ADDR
27670: GO 27814
// begin if result [ result ] [ 2 ] < tmp then
27672: LD_VAR 0 6
27676: PUSH
27677: LD_VAR 0 6
27681: ARRAY
27682: PUSH
27683: LD_INT 2
27685: ARRAY
27686: PUSH
27687: LD_VAR 0 9
27691: LESS
27692: IFFALSE 27734
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27694: LD_ADDR_VAR 0 6
27698: PUSH
27699: LD_VAR 0 6
27703: PPUSH
27704: LD_VAR 0 6
27708: PUSH
27709: LD_INT 1
27711: PLUS
27712: PPUSH
27713: LD_VAR 0 7
27717: PUSH
27718: LD_VAR 0 9
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PPUSH
27727: CALL_OW 2
27731: ST_TO_ADDR
27732: GO 27814
// for j = 1 to result do
27734: LD_ADDR_VAR 0 8
27738: PUSH
27739: DOUBLE
27740: LD_INT 1
27742: DEC
27743: ST_TO_ADDR
27744: LD_VAR 0 6
27748: PUSH
27749: FOR_TO
27750: IFFALSE 27812
// begin if tmp < result [ j ] [ 2 ] then
27752: LD_VAR 0 9
27756: PUSH
27757: LD_VAR 0 6
27761: PUSH
27762: LD_VAR 0 8
27766: ARRAY
27767: PUSH
27768: LD_INT 2
27770: ARRAY
27771: LESS
27772: IFFALSE 27810
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27774: LD_ADDR_VAR 0 6
27778: PUSH
27779: LD_VAR 0 6
27783: PPUSH
27784: LD_VAR 0 8
27788: PPUSH
27789: LD_VAR 0 7
27793: PUSH
27794: LD_VAR 0 9
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PPUSH
27803: CALL_OW 2
27807: ST_TO_ADDR
// break ;
27808: GO 27812
// end ; end ;
27810: GO 27749
27812: POP
27813: POP
// end ; end ;
27814: GO 27613
27816: POP
27817: POP
// if result and not asc then
27818: LD_VAR 0 6
27822: PUSH
27823: LD_VAR 0 4
27827: NOT
27828: AND
27829: IFFALSE 27904
// begin tmp := result ;
27831: LD_ADDR_VAR 0 9
27835: PUSH
27836: LD_VAR 0 6
27840: ST_TO_ADDR
// for i = tmp downto 1 do
27841: LD_ADDR_VAR 0 7
27845: PUSH
27846: DOUBLE
27847: LD_VAR 0 9
27851: INC
27852: ST_TO_ADDR
27853: LD_INT 1
27855: PUSH
27856: FOR_DOWNTO
27857: IFFALSE 27902
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27859: LD_ADDR_VAR 0 6
27863: PUSH
27864: LD_VAR 0 6
27868: PPUSH
27869: LD_VAR 0 9
27873: PUSH
27874: LD_VAR 0 7
27878: MINUS
27879: PUSH
27880: LD_INT 1
27882: PLUS
27883: PPUSH
27884: LD_VAR 0 9
27888: PUSH
27889: LD_VAR 0 7
27893: ARRAY
27894: PPUSH
27895: CALL_OW 1
27899: ST_TO_ADDR
27900: GO 27856
27902: POP
27903: POP
// end ; tmp := [ ] ;
27904: LD_ADDR_VAR 0 9
27908: PUSH
27909: EMPTY
27910: ST_TO_ADDR
// if mode then
27911: LD_VAR 0 5
27915: IFFALSE 27984
// begin for i = 1 to result do
27917: LD_ADDR_VAR 0 7
27921: PUSH
27922: DOUBLE
27923: LD_INT 1
27925: DEC
27926: ST_TO_ADDR
27927: LD_VAR 0 6
27931: PUSH
27932: FOR_TO
27933: IFFALSE 27972
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27935: LD_ADDR_VAR 0 9
27939: PUSH
27940: LD_VAR 0 9
27944: PPUSH
27945: LD_VAR 0 7
27949: PPUSH
27950: LD_VAR 0 6
27954: PUSH
27955: LD_VAR 0 7
27959: ARRAY
27960: PUSH
27961: LD_INT 1
27963: ARRAY
27964: PPUSH
27965: CALL_OW 1
27969: ST_TO_ADDR
27970: GO 27932
27972: POP
27973: POP
// result := tmp ;
27974: LD_ADDR_VAR 0 6
27978: PUSH
27979: LD_VAR 0 9
27983: ST_TO_ADDR
// end ; end ;
27984: LD_VAR 0 6
27988: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27989: LD_INT 0
27991: PPUSH
27992: PPUSH
27993: PPUSH
27994: PPUSH
27995: PPUSH
27996: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27997: LD_ADDR_VAR 0 5
28001: PUSH
28002: LD_INT 0
28004: PUSH
28005: LD_INT 0
28007: PUSH
28008: LD_INT 0
28010: PUSH
28011: EMPTY
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: ST_TO_ADDR
// if not x or not y then
28019: LD_VAR 0 2
28023: NOT
28024: PUSH
28025: LD_VAR 0 3
28029: NOT
28030: OR
28031: IFFALSE 28035
// exit ;
28033: GO 29685
// if not range then
28035: LD_VAR 0 4
28039: NOT
28040: IFFALSE 28050
// range := 10 ;
28042: LD_ADDR_VAR 0 4
28046: PUSH
28047: LD_INT 10
28049: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28050: LD_ADDR_VAR 0 8
28054: PUSH
28055: LD_INT 81
28057: PUSH
28058: LD_VAR 0 1
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 92
28069: PUSH
28070: LD_VAR 0 2
28074: PUSH
28075: LD_VAR 0 3
28079: PUSH
28080: LD_VAR 0 4
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 3
28093: PUSH
28094: LD_INT 21
28096: PUSH
28097: LD_INT 3
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: LIST
28112: PPUSH
28113: CALL_OW 69
28117: ST_TO_ADDR
// if not tmp then
28118: LD_VAR 0 8
28122: NOT
28123: IFFALSE 28127
// exit ;
28125: GO 29685
// for i in tmp do
28127: LD_ADDR_VAR 0 6
28131: PUSH
28132: LD_VAR 0 8
28136: PUSH
28137: FOR_IN
28138: IFFALSE 29660
// begin points := [ 0 , 0 , 0 ] ;
28140: LD_ADDR_VAR 0 9
28144: PUSH
28145: LD_INT 0
28147: PUSH
28148: LD_INT 0
28150: PUSH
28151: LD_INT 0
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: LIST
28158: ST_TO_ADDR
// bpoints := 1 ;
28159: LD_ADDR_VAR 0 10
28163: PUSH
28164: LD_INT 1
28166: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28167: LD_VAR 0 6
28171: PPUSH
28172: CALL_OW 247
28176: PUSH
28177: LD_INT 1
28179: DOUBLE
28180: EQUAL
28181: IFTRUE 28185
28183: GO 28763
28185: POP
// begin if GetClass ( i ) = 1 then
28186: LD_VAR 0 6
28190: PPUSH
28191: CALL_OW 257
28195: PUSH
28196: LD_INT 1
28198: EQUAL
28199: IFFALSE 28220
// points := [ 10 , 5 , 3 ] ;
28201: LD_ADDR_VAR 0 9
28205: PUSH
28206: LD_INT 10
28208: PUSH
28209: LD_INT 5
28211: PUSH
28212: LD_INT 3
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: LIST
28219: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28220: LD_VAR 0 6
28224: PPUSH
28225: CALL_OW 257
28229: PUSH
28230: LD_INT 2
28232: PUSH
28233: LD_INT 3
28235: PUSH
28236: LD_INT 4
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: LIST
28243: IN
28244: IFFALSE 28265
// points := [ 3 , 2 , 1 ] ;
28246: LD_ADDR_VAR 0 9
28250: PUSH
28251: LD_INT 3
28253: PUSH
28254: LD_INT 2
28256: PUSH
28257: LD_INT 1
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: LIST
28264: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28265: LD_VAR 0 6
28269: PPUSH
28270: CALL_OW 257
28274: PUSH
28275: LD_INT 5
28277: EQUAL
28278: IFFALSE 28299
// points := [ 130 , 5 , 2 ] ;
28280: LD_ADDR_VAR 0 9
28284: PUSH
28285: LD_INT 130
28287: PUSH
28288: LD_INT 5
28290: PUSH
28291: LD_INT 2
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: LIST
28298: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28299: LD_VAR 0 6
28303: PPUSH
28304: CALL_OW 257
28308: PUSH
28309: LD_INT 8
28311: EQUAL
28312: IFFALSE 28333
// points := [ 35 , 35 , 30 ] ;
28314: LD_ADDR_VAR 0 9
28318: PUSH
28319: LD_INT 35
28321: PUSH
28322: LD_INT 35
28324: PUSH
28325: LD_INT 30
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: LIST
28332: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28333: LD_VAR 0 6
28337: PPUSH
28338: CALL_OW 257
28342: PUSH
28343: LD_INT 9
28345: EQUAL
28346: IFFALSE 28367
// points := [ 20 , 55 , 40 ] ;
28348: LD_ADDR_VAR 0 9
28352: PUSH
28353: LD_INT 20
28355: PUSH
28356: LD_INT 55
28358: PUSH
28359: LD_INT 40
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: LIST
28366: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28367: LD_VAR 0 6
28371: PPUSH
28372: CALL_OW 257
28376: PUSH
28377: LD_INT 12
28379: PUSH
28380: LD_INT 16
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: IN
28387: IFFALSE 28408
// points := [ 5 , 3 , 2 ] ;
28389: LD_ADDR_VAR 0 9
28393: PUSH
28394: LD_INT 5
28396: PUSH
28397: LD_INT 3
28399: PUSH
28400: LD_INT 2
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: LIST
28407: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28408: LD_VAR 0 6
28412: PPUSH
28413: CALL_OW 257
28417: PUSH
28418: LD_INT 17
28420: EQUAL
28421: IFFALSE 28442
// points := [ 100 , 50 , 75 ] ;
28423: LD_ADDR_VAR 0 9
28427: PUSH
28428: LD_INT 100
28430: PUSH
28431: LD_INT 50
28433: PUSH
28434: LD_INT 75
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: LIST
28441: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28442: LD_VAR 0 6
28446: PPUSH
28447: CALL_OW 257
28451: PUSH
28452: LD_INT 15
28454: EQUAL
28455: IFFALSE 28476
// points := [ 10 , 5 , 3 ] ;
28457: LD_ADDR_VAR 0 9
28461: PUSH
28462: LD_INT 10
28464: PUSH
28465: LD_INT 5
28467: PUSH
28468: LD_INT 3
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: LIST
28475: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28476: LD_VAR 0 6
28480: PPUSH
28481: CALL_OW 257
28485: PUSH
28486: LD_INT 14
28488: EQUAL
28489: IFFALSE 28510
// points := [ 10 , 0 , 0 ] ;
28491: LD_ADDR_VAR 0 9
28495: PUSH
28496: LD_INT 10
28498: PUSH
28499: LD_INT 0
28501: PUSH
28502: LD_INT 0
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: LIST
28509: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28510: LD_VAR 0 6
28514: PPUSH
28515: CALL_OW 257
28519: PUSH
28520: LD_INT 11
28522: EQUAL
28523: IFFALSE 28544
// points := [ 30 , 10 , 5 ] ;
28525: LD_ADDR_VAR 0 9
28529: PUSH
28530: LD_INT 30
28532: PUSH
28533: LD_INT 10
28535: PUSH
28536: LD_INT 5
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: LIST
28543: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28544: LD_VAR 0 1
28548: PPUSH
28549: LD_INT 5
28551: PPUSH
28552: CALL_OW 321
28556: PUSH
28557: LD_INT 2
28559: EQUAL
28560: IFFALSE 28577
// bpoints := bpoints * 1.8 ;
28562: LD_ADDR_VAR 0 10
28566: PUSH
28567: LD_VAR 0 10
28571: PUSH
28572: LD_REAL  1.80000000000000E+0000
28575: MUL
28576: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28577: LD_VAR 0 6
28581: PPUSH
28582: CALL_OW 257
28586: PUSH
28587: LD_INT 1
28589: PUSH
28590: LD_INT 2
28592: PUSH
28593: LD_INT 3
28595: PUSH
28596: LD_INT 4
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: IN
28605: PUSH
28606: LD_VAR 0 1
28610: PPUSH
28611: LD_INT 51
28613: PPUSH
28614: CALL_OW 321
28618: PUSH
28619: LD_INT 2
28621: EQUAL
28622: AND
28623: IFFALSE 28640
// bpoints := bpoints * 1.2 ;
28625: LD_ADDR_VAR 0 10
28629: PUSH
28630: LD_VAR 0 10
28634: PUSH
28635: LD_REAL  1.20000000000000E+0000
28638: MUL
28639: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28640: LD_VAR 0 6
28644: PPUSH
28645: CALL_OW 257
28649: PUSH
28650: LD_INT 5
28652: PUSH
28653: LD_INT 7
28655: PUSH
28656: LD_INT 9
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: LIST
28663: IN
28664: PUSH
28665: LD_VAR 0 1
28669: PPUSH
28670: LD_INT 52
28672: PPUSH
28673: CALL_OW 321
28677: PUSH
28678: LD_INT 2
28680: EQUAL
28681: AND
28682: IFFALSE 28699
// bpoints := bpoints * 1.5 ;
28684: LD_ADDR_VAR 0 10
28688: PUSH
28689: LD_VAR 0 10
28693: PUSH
28694: LD_REAL  1.50000000000000E+0000
28697: MUL
28698: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28699: LD_VAR 0 1
28703: PPUSH
28704: LD_INT 66
28706: PPUSH
28707: CALL_OW 321
28711: PUSH
28712: LD_INT 2
28714: EQUAL
28715: IFFALSE 28732
// bpoints := bpoints * 1.1 ;
28717: LD_ADDR_VAR 0 10
28721: PUSH
28722: LD_VAR 0 10
28726: PUSH
28727: LD_REAL  1.10000000000000E+0000
28730: MUL
28731: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28732: LD_ADDR_VAR 0 10
28736: PUSH
28737: LD_VAR 0 10
28741: PUSH
28742: LD_VAR 0 6
28746: PPUSH
28747: LD_INT 1
28749: PPUSH
28750: CALL_OW 259
28754: PUSH
28755: LD_REAL  1.15000000000000E+0000
28758: MUL
28759: MUL
28760: ST_TO_ADDR
// end ; unit_vehicle :
28761: GO 29589
28763: LD_INT 2
28765: DOUBLE
28766: EQUAL
28767: IFTRUE 28771
28769: GO 29577
28771: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28772: LD_VAR 0 6
28776: PPUSH
28777: CALL_OW 264
28781: PUSH
28782: LD_INT 2
28784: PUSH
28785: LD_INT 42
28787: PUSH
28788: LD_INT 24
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: LIST
28795: IN
28796: IFFALSE 28817
// points := [ 25 , 5 , 3 ] ;
28798: LD_ADDR_VAR 0 9
28802: PUSH
28803: LD_INT 25
28805: PUSH
28806: LD_INT 5
28808: PUSH
28809: LD_INT 3
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: LIST
28816: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28817: LD_VAR 0 6
28821: PPUSH
28822: CALL_OW 264
28826: PUSH
28827: LD_INT 4
28829: PUSH
28830: LD_INT 43
28832: PUSH
28833: LD_INT 25
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: LIST
28840: IN
28841: IFFALSE 28862
// points := [ 40 , 15 , 5 ] ;
28843: LD_ADDR_VAR 0 9
28847: PUSH
28848: LD_INT 40
28850: PUSH
28851: LD_INT 15
28853: PUSH
28854: LD_INT 5
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: LIST
28861: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28862: LD_VAR 0 6
28866: PPUSH
28867: CALL_OW 264
28871: PUSH
28872: LD_INT 3
28874: PUSH
28875: LD_INT 23
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: IN
28882: IFFALSE 28903
// points := [ 7 , 25 , 8 ] ;
28884: LD_ADDR_VAR 0 9
28888: PUSH
28889: LD_INT 7
28891: PUSH
28892: LD_INT 25
28894: PUSH
28895: LD_INT 8
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: LIST
28902: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28903: LD_VAR 0 6
28907: PPUSH
28908: CALL_OW 264
28912: PUSH
28913: LD_INT 5
28915: PUSH
28916: LD_INT 27
28918: PUSH
28919: LD_INT 44
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: LIST
28926: IN
28927: IFFALSE 28948
// points := [ 14 , 50 , 16 ] ;
28929: LD_ADDR_VAR 0 9
28933: PUSH
28934: LD_INT 14
28936: PUSH
28937: LD_INT 50
28939: PUSH
28940: LD_INT 16
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: LIST
28947: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28948: LD_VAR 0 6
28952: PPUSH
28953: CALL_OW 264
28957: PUSH
28958: LD_INT 6
28960: PUSH
28961: LD_INT 46
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: IN
28968: IFFALSE 28989
// points := [ 32 , 120 , 70 ] ;
28970: LD_ADDR_VAR 0 9
28974: PUSH
28975: LD_INT 32
28977: PUSH
28978: LD_INT 120
28980: PUSH
28981: LD_INT 70
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: LIST
28988: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28989: LD_VAR 0 6
28993: PPUSH
28994: CALL_OW 264
28998: PUSH
28999: LD_INT 7
29001: PUSH
29002: LD_INT 28
29004: PUSH
29005: LD_INT 45
29007: PUSH
29008: LD_INT 92
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: IN
29017: IFFALSE 29038
// points := [ 35 , 20 , 45 ] ;
29019: LD_ADDR_VAR 0 9
29023: PUSH
29024: LD_INT 35
29026: PUSH
29027: LD_INT 20
29029: PUSH
29030: LD_INT 45
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: LIST
29037: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29038: LD_VAR 0 6
29042: PPUSH
29043: CALL_OW 264
29047: PUSH
29048: LD_INT 47
29050: PUSH
29051: EMPTY
29052: LIST
29053: IN
29054: IFFALSE 29075
// points := [ 67 , 45 , 75 ] ;
29056: LD_ADDR_VAR 0 9
29060: PUSH
29061: LD_INT 67
29063: PUSH
29064: LD_INT 45
29066: PUSH
29067: LD_INT 75
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: LIST
29074: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29075: LD_VAR 0 6
29079: PPUSH
29080: CALL_OW 264
29084: PUSH
29085: LD_INT 26
29087: PUSH
29088: EMPTY
29089: LIST
29090: IN
29091: IFFALSE 29112
// points := [ 120 , 30 , 80 ] ;
29093: LD_ADDR_VAR 0 9
29097: PUSH
29098: LD_INT 120
29100: PUSH
29101: LD_INT 30
29103: PUSH
29104: LD_INT 80
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: LIST
29111: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29112: LD_VAR 0 6
29116: PPUSH
29117: CALL_OW 264
29121: PUSH
29122: LD_INT 22
29124: PUSH
29125: EMPTY
29126: LIST
29127: IN
29128: IFFALSE 29149
// points := [ 40 , 1 , 1 ] ;
29130: LD_ADDR_VAR 0 9
29134: PUSH
29135: LD_INT 40
29137: PUSH
29138: LD_INT 1
29140: PUSH
29141: LD_INT 1
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: LIST
29148: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29149: LD_VAR 0 6
29153: PPUSH
29154: CALL_OW 264
29158: PUSH
29159: LD_INT 29
29161: PUSH
29162: EMPTY
29163: LIST
29164: IN
29165: IFFALSE 29186
// points := [ 70 , 200 , 400 ] ;
29167: LD_ADDR_VAR 0 9
29171: PUSH
29172: LD_INT 70
29174: PUSH
29175: LD_INT 200
29177: PUSH
29178: LD_INT 400
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: LIST
29185: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29186: LD_VAR 0 6
29190: PPUSH
29191: CALL_OW 264
29195: PUSH
29196: LD_INT 14
29198: PUSH
29199: LD_INT 53
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: IN
29206: IFFALSE 29227
// points := [ 40 , 10 , 20 ] ;
29208: LD_ADDR_VAR 0 9
29212: PUSH
29213: LD_INT 40
29215: PUSH
29216: LD_INT 10
29218: PUSH
29219: LD_INT 20
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: LIST
29226: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29227: LD_VAR 0 6
29231: PPUSH
29232: CALL_OW 264
29236: PUSH
29237: LD_INT 9
29239: PUSH
29240: EMPTY
29241: LIST
29242: IN
29243: IFFALSE 29264
// points := [ 5 , 70 , 20 ] ;
29245: LD_ADDR_VAR 0 9
29249: PUSH
29250: LD_INT 5
29252: PUSH
29253: LD_INT 70
29255: PUSH
29256: LD_INT 20
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: LIST
29263: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29264: LD_VAR 0 6
29268: PPUSH
29269: CALL_OW 264
29273: PUSH
29274: LD_INT 10
29276: PUSH
29277: EMPTY
29278: LIST
29279: IN
29280: IFFALSE 29301
// points := [ 35 , 110 , 70 ] ;
29282: LD_ADDR_VAR 0 9
29286: PUSH
29287: LD_INT 35
29289: PUSH
29290: LD_INT 110
29292: PUSH
29293: LD_INT 70
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: LIST
29300: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29301: LD_VAR 0 6
29305: PPUSH
29306: CALL_OW 265
29310: PUSH
29311: LD_INT 25
29313: EQUAL
29314: IFFALSE 29335
// points := [ 80 , 65 , 100 ] ;
29316: LD_ADDR_VAR 0 9
29320: PUSH
29321: LD_INT 80
29323: PUSH
29324: LD_INT 65
29326: PUSH
29327: LD_INT 100
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: LIST
29334: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29335: LD_VAR 0 6
29339: PPUSH
29340: CALL_OW 263
29344: PUSH
29345: LD_INT 1
29347: EQUAL
29348: IFFALSE 29383
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29350: LD_ADDR_VAR 0 10
29354: PUSH
29355: LD_VAR 0 10
29359: PUSH
29360: LD_VAR 0 6
29364: PPUSH
29365: CALL_OW 311
29369: PPUSH
29370: LD_INT 3
29372: PPUSH
29373: CALL_OW 259
29377: PUSH
29378: LD_INT 4
29380: MUL
29381: MUL
29382: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29383: LD_VAR 0 6
29387: PPUSH
29388: CALL_OW 263
29392: PUSH
29393: LD_INT 2
29395: EQUAL
29396: IFFALSE 29447
// begin j := IsControledBy ( i ) ;
29398: LD_ADDR_VAR 0 7
29402: PUSH
29403: LD_VAR 0 6
29407: PPUSH
29408: CALL_OW 312
29412: ST_TO_ADDR
// if j then
29413: LD_VAR 0 7
29417: IFFALSE 29447
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29419: LD_ADDR_VAR 0 10
29423: PUSH
29424: LD_VAR 0 10
29428: PUSH
29429: LD_VAR 0 7
29433: PPUSH
29434: LD_INT 3
29436: PPUSH
29437: CALL_OW 259
29441: PUSH
29442: LD_INT 3
29444: MUL
29445: MUL
29446: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29447: LD_VAR 0 6
29451: PPUSH
29452: CALL_OW 264
29456: PUSH
29457: LD_INT 5
29459: PUSH
29460: LD_INT 6
29462: PUSH
29463: LD_INT 46
29465: PUSH
29466: LD_INT 44
29468: PUSH
29469: LD_INT 47
29471: PUSH
29472: LD_INT 45
29474: PUSH
29475: LD_INT 28
29477: PUSH
29478: LD_INT 7
29480: PUSH
29481: LD_INT 27
29483: PUSH
29484: LD_INT 29
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: IN
29499: PUSH
29500: LD_VAR 0 1
29504: PPUSH
29505: LD_INT 52
29507: PPUSH
29508: CALL_OW 321
29512: PUSH
29513: LD_INT 2
29515: EQUAL
29516: AND
29517: IFFALSE 29534
// bpoints := bpoints * 1.2 ;
29519: LD_ADDR_VAR 0 10
29523: PUSH
29524: LD_VAR 0 10
29528: PUSH
29529: LD_REAL  1.20000000000000E+0000
29532: MUL
29533: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29534: LD_VAR 0 6
29538: PPUSH
29539: CALL_OW 264
29543: PUSH
29544: LD_INT 6
29546: PUSH
29547: LD_INT 46
29549: PUSH
29550: LD_INT 47
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: LIST
29557: IN
29558: IFFALSE 29575
// bpoints := bpoints * 1.2 ;
29560: LD_ADDR_VAR 0 10
29564: PUSH
29565: LD_VAR 0 10
29569: PUSH
29570: LD_REAL  1.20000000000000E+0000
29573: MUL
29574: ST_TO_ADDR
// end ; unit_building :
29575: GO 29589
29577: LD_INT 3
29579: DOUBLE
29580: EQUAL
29581: IFTRUE 29585
29583: GO 29588
29585: POP
// ; end ;
29586: GO 29589
29588: POP
// for j = 1 to 3 do
29589: LD_ADDR_VAR 0 7
29593: PUSH
29594: DOUBLE
29595: LD_INT 1
29597: DEC
29598: ST_TO_ADDR
29599: LD_INT 3
29601: PUSH
29602: FOR_TO
29603: IFFALSE 29656
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29605: LD_ADDR_VAR 0 5
29609: PUSH
29610: LD_VAR 0 5
29614: PPUSH
29615: LD_VAR 0 7
29619: PPUSH
29620: LD_VAR 0 5
29624: PUSH
29625: LD_VAR 0 7
29629: ARRAY
29630: PUSH
29631: LD_VAR 0 9
29635: PUSH
29636: LD_VAR 0 7
29640: ARRAY
29641: PUSH
29642: LD_VAR 0 10
29646: MUL
29647: PLUS
29648: PPUSH
29649: CALL_OW 1
29653: ST_TO_ADDR
29654: GO 29602
29656: POP
29657: POP
// end ;
29658: GO 28137
29660: POP
29661: POP
// result := Replace ( result , 4 , tmp ) ;
29662: LD_ADDR_VAR 0 5
29666: PUSH
29667: LD_VAR 0 5
29671: PPUSH
29672: LD_INT 4
29674: PPUSH
29675: LD_VAR 0 8
29679: PPUSH
29680: CALL_OW 1
29684: ST_TO_ADDR
// end ;
29685: LD_VAR 0 5
29689: RET
// export function DangerAtRange ( unit , range ) ; begin
29690: LD_INT 0
29692: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29693: LD_ADDR_VAR 0 3
29697: PUSH
29698: LD_VAR 0 1
29702: PPUSH
29703: CALL_OW 255
29707: PPUSH
29708: LD_VAR 0 1
29712: PPUSH
29713: CALL_OW 250
29717: PPUSH
29718: LD_VAR 0 1
29722: PPUSH
29723: CALL_OW 251
29727: PPUSH
29728: LD_VAR 0 2
29732: PPUSH
29733: CALL 27989 0 4
29737: ST_TO_ADDR
// end ;
29738: LD_VAR 0 3
29742: RET
// export function DangerInArea ( side , area ) ; begin
29743: LD_INT 0
29745: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29746: LD_ADDR_VAR 0 3
29750: PUSH
29751: LD_VAR 0 2
29755: PPUSH
29756: LD_INT 81
29758: PUSH
29759: LD_VAR 0 1
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PPUSH
29768: CALL_OW 70
29772: ST_TO_ADDR
// end ;
29773: LD_VAR 0 3
29777: RET
// export function IsExtension ( b ) ; begin
29778: LD_INT 0
29780: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29781: LD_ADDR_VAR 0 2
29785: PUSH
29786: LD_VAR 0 1
29790: PUSH
29791: LD_INT 23
29793: PUSH
29794: LD_INT 20
29796: PUSH
29797: LD_INT 22
29799: PUSH
29800: LD_INT 17
29802: PUSH
29803: LD_INT 24
29805: PUSH
29806: LD_INT 21
29808: PUSH
29809: LD_INT 19
29811: PUSH
29812: LD_INT 16
29814: PUSH
29815: LD_INT 25
29817: PUSH
29818: LD_INT 18
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: IN
29833: ST_TO_ADDR
// end ;
29834: LD_VAR 0 2
29838: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29839: LD_INT 0
29841: PPUSH
29842: PPUSH
29843: PPUSH
// result := [ ] ;
29844: LD_ADDR_VAR 0 4
29848: PUSH
29849: EMPTY
29850: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29851: LD_ADDR_VAR 0 5
29855: PUSH
29856: LD_VAR 0 2
29860: PPUSH
29861: LD_INT 21
29863: PUSH
29864: LD_INT 3
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PPUSH
29871: CALL_OW 70
29875: ST_TO_ADDR
// if not tmp then
29876: LD_VAR 0 5
29880: NOT
29881: IFFALSE 29885
// exit ;
29883: GO 29949
// if checkLink then
29885: LD_VAR 0 3
29889: IFFALSE 29939
// begin for i in tmp do
29891: LD_ADDR_VAR 0 6
29895: PUSH
29896: LD_VAR 0 5
29900: PUSH
29901: FOR_IN
29902: IFFALSE 29937
// if GetBase ( i ) <> base then
29904: LD_VAR 0 6
29908: PPUSH
29909: CALL_OW 274
29913: PUSH
29914: LD_VAR 0 1
29918: NONEQUAL
29919: IFFALSE 29935
// ComLinkToBase ( base , i ) ;
29921: LD_VAR 0 1
29925: PPUSH
29926: LD_VAR 0 6
29930: PPUSH
29931: CALL_OW 169
29935: GO 29901
29937: POP
29938: POP
// end ; result := tmp ;
29939: LD_ADDR_VAR 0 4
29943: PUSH
29944: LD_VAR 0 5
29948: ST_TO_ADDR
// end ;
29949: LD_VAR 0 4
29953: RET
// export function ComComplete ( units , b ) ; var i ; begin
29954: LD_INT 0
29956: PPUSH
29957: PPUSH
// if not units then
29958: LD_VAR 0 1
29962: NOT
29963: IFFALSE 29967
// exit ;
29965: GO 30057
// for i in units do
29967: LD_ADDR_VAR 0 4
29971: PUSH
29972: LD_VAR 0 1
29976: PUSH
29977: FOR_IN
29978: IFFALSE 30055
// if BuildingStatus ( b ) = bs_build then
29980: LD_VAR 0 2
29984: PPUSH
29985: CALL_OW 461
29989: PUSH
29990: LD_INT 1
29992: EQUAL
29993: IFFALSE 30053
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29995: LD_VAR 0 4
29999: PPUSH
30000: LD_STRING h
30002: PUSH
30003: LD_VAR 0 2
30007: PPUSH
30008: CALL_OW 250
30012: PUSH
30013: LD_VAR 0 2
30017: PPUSH
30018: CALL_OW 251
30022: PUSH
30023: LD_VAR 0 2
30027: PUSH
30028: LD_INT 0
30030: PUSH
30031: LD_INT 0
30033: PUSH
30034: LD_INT 0
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: PUSH
30046: EMPTY
30047: LIST
30048: PPUSH
30049: CALL_OW 446
30053: GO 29977
30055: POP
30056: POP
// end ;
30057: LD_VAR 0 3
30061: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30062: LD_INT 0
30064: PPUSH
30065: PPUSH
30066: PPUSH
30067: PPUSH
30068: PPUSH
30069: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30070: LD_VAR 0 1
30074: NOT
30075: PUSH
30076: LD_VAR 0 1
30080: PPUSH
30081: CALL_OW 263
30085: PUSH
30086: LD_INT 2
30088: NONEQUAL
30089: OR
30090: IFFALSE 30094
// exit ;
30092: GO 30410
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30094: LD_ADDR_VAR 0 6
30098: PUSH
30099: LD_INT 22
30101: PUSH
30102: LD_VAR 0 1
30106: PPUSH
30107: CALL_OW 255
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 2
30118: PUSH
30119: LD_INT 30
30121: PUSH
30122: LD_INT 36
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 34
30131: PUSH
30132: LD_INT 31
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: LIST
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PPUSH
30148: CALL_OW 69
30152: ST_TO_ADDR
// if not tmp then
30153: LD_VAR 0 6
30157: NOT
30158: IFFALSE 30162
// exit ;
30160: GO 30410
// result := [ ] ;
30162: LD_ADDR_VAR 0 2
30166: PUSH
30167: EMPTY
30168: ST_TO_ADDR
// for i in tmp do
30169: LD_ADDR_VAR 0 3
30173: PUSH
30174: LD_VAR 0 6
30178: PUSH
30179: FOR_IN
30180: IFFALSE 30251
// begin t := UnitsInside ( i ) ;
30182: LD_ADDR_VAR 0 4
30186: PUSH
30187: LD_VAR 0 3
30191: PPUSH
30192: CALL_OW 313
30196: ST_TO_ADDR
// if t then
30197: LD_VAR 0 4
30201: IFFALSE 30249
// for j in t do
30203: LD_ADDR_VAR 0 7
30207: PUSH
30208: LD_VAR 0 4
30212: PUSH
30213: FOR_IN
30214: IFFALSE 30247
// result := Replace ( result , result + 1 , j ) ;
30216: LD_ADDR_VAR 0 2
30220: PUSH
30221: LD_VAR 0 2
30225: PPUSH
30226: LD_VAR 0 2
30230: PUSH
30231: LD_INT 1
30233: PLUS
30234: PPUSH
30235: LD_VAR 0 7
30239: PPUSH
30240: CALL_OW 1
30244: ST_TO_ADDR
30245: GO 30213
30247: POP
30248: POP
// end ;
30249: GO 30179
30251: POP
30252: POP
// if not result then
30253: LD_VAR 0 2
30257: NOT
30258: IFFALSE 30262
// exit ;
30260: GO 30410
// mech := result [ 1 ] ;
30262: LD_ADDR_VAR 0 5
30266: PUSH
30267: LD_VAR 0 2
30271: PUSH
30272: LD_INT 1
30274: ARRAY
30275: ST_TO_ADDR
// if result > 1 then
30276: LD_VAR 0 2
30280: PUSH
30281: LD_INT 1
30283: GREATER
30284: IFFALSE 30396
// begin for i = 2 to result do
30286: LD_ADDR_VAR 0 3
30290: PUSH
30291: DOUBLE
30292: LD_INT 2
30294: DEC
30295: ST_TO_ADDR
30296: LD_VAR 0 2
30300: PUSH
30301: FOR_TO
30302: IFFALSE 30394
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30304: LD_ADDR_VAR 0 4
30308: PUSH
30309: LD_VAR 0 2
30313: PUSH
30314: LD_VAR 0 3
30318: ARRAY
30319: PPUSH
30320: LD_INT 3
30322: PPUSH
30323: CALL_OW 259
30327: PUSH
30328: LD_VAR 0 2
30332: PUSH
30333: LD_VAR 0 3
30337: ARRAY
30338: PPUSH
30339: CALL_OW 432
30343: MINUS
30344: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30345: LD_VAR 0 4
30349: PUSH
30350: LD_VAR 0 5
30354: PPUSH
30355: LD_INT 3
30357: PPUSH
30358: CALL_OW 259
30362: PUSH
30363: LD_VAR 0 5
30367: PPUSH
30368: CALL_OW 432
30372: MINUS
30373: GREATEREQUAL
30374: IFFALSE 30392
// mech := result [ i ] ;
30376: LD_ADDR_VAR 0 5
30380: PUSH
30381: LD_VAR 0 2
30385: PUSH
30386: LD_VAR 0 3
30390: ARRAY
30391: ST_TO_ADDR
// end ;
30392: GO 30301
30394: POP
30395: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30396: LD_VAR 0 1
30400: PPUSH
30401: LD_VAR 0 5
30405: PPUSH
30406: CALL_OW 135
// end ;
30410: LD_VAR 0 2
30414: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30415: LD_INT 0
30417: PPUSH
30418: PPUSH
30419: PPUSH
30420: PPUSH
30421: PPUSH
30422: PPUSH
30423: PPUSH
30424: PPUSH
30425: PPUSH
30426: PPUSH
30427: PPUSH
30428: PPUSH
30429: PPUSH
// result := [ ] ;
30430: LD_ADDR_VAR 0 7
30434: PUSH
30435: EMPTY
30436: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30437: LD_VAR 0 1
30441: PPUSH
30442: CALL_OW 266
30446: PUSH
30447: LD_INT 0
30449: PUSH
30450: LD_INT 1
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: IN
30457: NOT
30458: IFFALSE 30462
// exit ;
30460: GO 32096
// if name then
30462: LD_VAR 0 3
30466: IFFALSE 30482
// SetBName ( base_dep , name ) ;
30468: LD_VAR 0 1
30472: PPUSH
30473: LD_VAR 0 3
30477: PPUSH
30478: CALL_OW 500
// base := GetBase ( base_dep ) ;
30482: LD_ADDR_VAR 0 15
30486: PUSH
30487: LD_VAR 0 1
30491: PPUSH
30492: CALL_OW 274
30496: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30497: LD_ADDR_VAR 0 16
30501: PUSH
30502: LD_VAR 0 1
30506: PPUSH
30507: CALL_OW 255
30511: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30512: LD_ADDR_VAR 0 17
30516: PUSH
30517: LD_VAR 0 1
30521: PPUSH
30522: CALL_OW 248
30526: ST_TO_ADDR
// if sources then
30527: LD_VAR 0 5
30531: IFFALSE 30578
// for i = 1 to 3 do
30533: LD_ADDR_VAR 0 8
30537: PUSH
30538: DOUBLE
30539: LD_INT 1
30541: DEC
30542: ST_TO_ADDR
30543: LD_INT 3
30545: PUSH
30546: FOR_TO
30547: IFFALSE 30576
// AddResourceType ( base , i , sources [ i ] ) ;
30549: LD_VAR 0 15
30553: PPUSH
30554: LD_VAR 0 8
30558: PPUSH
30559: LD_VAR 0 5
30563: PUSH
30564: LD_VAR 0 8
30568: ARRAY
30569: PPUSH
30570: CALL_OW 276
30574: GO 30546
30576: POP
30577: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30578: LD_ADDR_VAR 0 18
30582: PUSH
30583: LD_VAR 0 15
30587: PPUSH
30588: LD_VAR 0 2
30592: PPUSH
30593: LD_INT 1
30595: PPUSH
30596: CALL 29839 0 3
30600: ST_TO_ADDR
// InitHc ;
30601: CALL_OW 19
// InitUc ;
30605: CALL_OW 18
// uc_side := side ;
30609: LD_ADDR_OWVAR 20
30613: PUSH
30614: LD_VAR 0 16
30618: ST_TO_ADDR
// uc_nation := nation ;
30619: LD_ADDR_OWVAR 21
30623: PUSH
30624: LD_VAR 0 17
30628: ST_TO_ADDR
// if buildings then
30629: LD_VAR 0 18
30633: IFFALSE 31955
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30635: LD_ADDR_VAR 0 19
30639: PUSH
30640: LD_VAR 0 18
30644: PPUSH
30645: LD_INT 2
30647: PUSH
30648: LD_INT 30
30650: PUSH
30651: LD_INT 29
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 30
30660: PUSH
30661: LD_INT 30
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: LIST
30672: PPUSH
30673: CALL_OW 72
30677: ST_TO_ADDR
// if tmp then
30678: LD_VAR 0 19
30682: IFFALSE 30730
// for i in tmp do
30684: LD_ADDR_VAR 0 8
30688: PUSH
30689: LD_VAR 0 19
30693: PUSH
30694: FOR_IN
30695: IFFALSE 30728
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30697: LD_VAR 0 8
30701: PPUSH
30702: CALL_OW 250
30706: PPUSH
30707: LD_VAR 0 8
30711: PPUSH
30712: CALL_OW 251
30716: PPUSH
30717: LD_VAR 0 16
30721: PPUSH
30722: CALL_OW 441
30726: GO 30694
30728: POP
30729: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30730: LD_VAR 0 18
30734: PPUSH
30735: LD_INT 2
30737: PUSH
30738: LD_INT 30
30740: PUSH
30741: LD_INT 32
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 30
30750: PUSH
30751: LD_INT 33
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: LIST
30762: PPUSH
30763: CALL_OW 72
30767: IFFALSE 30855
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30769: LD_ADDR_VAR 0 8
30773: PUSH
30774: LD_VAR 0 18
30778: PPUSH
30779: LD_INT 2
30781: PUSH
30782: LD_INT 30
30784: PUSH
30785: LD_INT 32
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 30
30794: PUSH
30795: LD_INT 33
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: LIST
30806: PPUSH
30807: CALL_OW 72
30811: PUSH
30812: FOR_IN
30813: IFFALSE 30853
// begin if not GetBWeapon ( i ) then
30815: LD_VAR 0 8
30819: PPUSH
30820: CALL_OW 269
30824: NOT
30825: IFFALSE 30851
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30827: LD_VAR 0 8
30831: PPUSH
30832: LD_VAR 0 8
30836: PPUSH
30837: LD_VAR 0 2
30841: PPUSH
30842: CALL 32101 0 2
30846: PPUSH
30847: CALL_OW 431
// end ;
30851: GO 30812
30853: POP
30854: POP
// end ; for i = 1 to personel do
30855: LD_ADDR_VAR 0 8
30859: PUSH
30860: DOUBLE
30861: LD_INT 1
30863: DEC
30864: ST_TO_ADDR
30865: LD_VAR 0 6
30869: PUSH
30870: FOR_TO
30871: IFFALSE 31935
// begin if i > 4 then
30873: LD_VAR 0 8
30877: PUSH
30878: LD_INT 4
30880: GREATER
30881: IFFALSE 30885
// break ;
30883: GO 31935
// case i of 1 :
30885: LD_VAR 0 8
30889: PUSH
30890: LD_INT 1
30892: DOUBLE
30893: EQUAL
30894: IFTRUE 30898
30896: GO 30978
30898: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30899: LD_ADDR_VAR 0 12
30903: PUSH
30904: LD_VAR 0 18
30908: PPUSH
30909: LD_INT 22
30911: PUSH
30912: LD_VAR 0 16
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 58
30923: PUSH
30924: EMPTY
30925: LIST
30926: PUSH
30927: LD_INT 2
30929: PUSH
30930: LD_INT 30
30932: PUSH
30933: LD_INT 32
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 30
30942: PUSH
30943: LD_INT 4
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 30
30952: PUSH
30953: LD_INT 5
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: LIST
30970: PPUSH
30971: CALL_OW 72
30975: ST_TO_ADDR
30976: GO 31200
30978: LD_INT 2
30980: DOUBLE
30981: EQUAL
30982: IFTRUE 30986
30984: GO 31048
30986: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30987: LD_ADDR_VAR 0 12
30991: PUSH
30992: LD_VAR 0 18
30996: PPUSH
30997: LD_INT 22
30999: PUSH
31000: LD_VAR 0 16
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 2
31011: PUSH
31012: LD_INT 30
31014: PUSH
31015: LD_INT 0
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 30
31024: PUSH
31025: LD_INT 1
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: LIST
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PPUSH
31041: CALL_OW 72
31045: ST_TO_ADDR
31046: GO 31200
31048: LD_INT 3
31050: DOUBLE
31051: EQUAL
31052: IFTRUE 31056
31054: GO 31118
31056: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31057: LD_ADDR_VAR 0 12
31061: PUSH
31062: LD_VAR 0 18
31066: PPUSH
31067: LD_INT 22
31069: PUSH
31070: LD_VAR 0 16
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 2
31081: PUSH
31082: LD_INT 30
31084: PUSH
31085: LD_INT 2
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 30
31094: PUSH
31095: LD_INT 3
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: LIST
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PPUSH
31111: CALL_OW 72
31115: ST_TO_ADDR
31116: GO 31200
31118: LD_INT 4
31120: DOUBLE
31121: EQUAL
31122: IFTRUE 31126
31124: GO 31199
31126: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31127: LD_ADDR_VAR 0 12
31131: PUSH
31132: LD_VAR 0 18
31136: PPUSH
31137: LD_INT 22
31139: PUSH
31140: LD_VAR 0 16
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 2
31151: PUSH
31152: LD_INT 30
31154: PUSH
31155: LD_INT 6
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 30
31164: PUSH
31165: LD_INT 7
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 30
31174: PUSH
31175: LD_INT 8
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PPUSH
31192: CALL_OW 72
31196: ST_TO_ADDR
31197: GO 31200
31199: POP
// if i = 1 then
31200: LD_VAR 0 8
31204: PUSH
31205: LD_INT 1
31207: EQUAL
31208: IFFALSE 31319
// begin tmp := [ ] ;
31210: LD_ADDR_VAR 0 19
31214: PUSH
31215: EMPTY
31216: ST_TO_ADDR
// for j in f do
31217: LD_ADDR_VAR 0 9
31221: PUSH
31222: LD_VAR 0 12
31226: PUSH
31227: FOR_IN
31228: IFFALSE 31301
// if GetBType ( j ) = b_bunker then
31230: LD_VAR 0 9
31234: PPUSH
31235: CALL_OW 266
31239: PUSH
31240: LD_INT 32
31242: EQUAL
31243: IFFALSE 31270
// tmp := Insert ( tmp , 1 , j ) else
31245: LD_ADDR_VAR 0 19
31249: PUSH
31250: LD_VAR 0 19
31254: PPUSH
31255: LD_INT 1
31257: PPUSH
31258: LD_VAR 0 9
31262: PPUSH
31263: CALL_OW 2
31267: ST_TO_ADDR
31268: GO 31299
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31270: LD_ADDR_VAR 0 19
31274: PUSH
31275: LD_VAR 0 19
31279: PPUSH
31280: LD_VAR 0 19
31284: PUSH
31285: LD_INT 1
31287: PLUS
31288: PPUSH
31289: LD_VAR 0 9
31293: PPUSH
31294: CALL_OW 2
31298: ST_TO_ADDR
31299: GO 31227
31301: POP
31302: POP
// if tmp then
31303: LD_VAR 0 19
31307: IFFALSE 31319
// f := tmp ;
31309: LD_ADDR_VAR 0 12
31313: PUSH
31314: LD_VAR 0 19
31318: ST_TO_ADDR
// end ; x := personel [ i ] ;
31319: LD_ADDR_VAR 0 13
31323: PUSH
31324: LD_VAR 0 6
31328: PUSH
31329: LD_VAR 0 8
31333: ARRAY
31334: ST_TO_ADDR
// if x = - 1 then
31335: LD_VAR 0 13
31339: PUSH
31340: LD_INT 1
31342: NEG
31343: EQUAL
31344: IFFALSE 31553
// begin for j in f do
31346: LD_ADDR_VAR 0 9
31350: PUSH
31351: LD_VAR 0 12
31355: PUSH
31356: FOR_IN
31357: IFFALSE 31549
// repeat InitHc ;
31359: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31363: LD_VAR 0 9
31367: PPUSH
31368: CALL_OW 266
31372: PUSH
31373: LD_INT 5
31375: EQUAL
31376: IFFALSE 31446
// begin if UnitsInside ( j ) < 3 then
31378: LD_VAR 0 9
31382: PPUSH
31383: CALL_OW 313
31387: PUSH
31388: LD_INT 3
31390: LESS
31391: IFFALSE 31427
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31393: LD_INT 0
31395: PPUSH
31396: LD_INT 5
31398: PUSH
31399: LD_INT 8
31401: PUSH
31402: LD_INT 9
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: LIST
31409: PUSH
31410: LD_VAR 0 17
31414: ARRAY
31415: PPUSH
31416: LD_VAR 0 4
31420: PPUSH
31421: CALL_OW 380
31425: GO 31444
// PrepareHuman ( false , i , skill ) ;
31427: LD_INT 0
31429: PPUSH
31430: LD_VAR 0 8
31434: PPUSH
31435: LD_VAR 0 4
31439: PPUSH
31440: CALL_OW 380
// end else
31444: GO 31463
// PrepareHuman ( false , i , skill ) ;
31446: LD_INT 0
31448: PPUSH
31449: LD_VAR 0 8
31453: PPUSH
31454: LD_VAR 0 4
31458: PPUSH
31459: CALL_OW 380
// un := CreateHuman ;
31463: LD_ADDR_VAR 0 14
31467: PUSH
31468: CALL_OW 44
31472: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31473: LD_ADDR_VAR 0 7
31477: PUSH
31478: LD_VAR 0 7
31482: PPUSH
31483: LD_INT 1
31485: PPUSH
31486: LD_VAR 0 14
31490: PPUSH
31491: CALL_OW 2
31495: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31496: LD_VAR 0 14
31500: PPUSH
31501: LD_VAR 0 9
31505: PPUSH
31506: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31510: LD_VAR 0 9
31514: PPUSH
31515: CALL_OW 313
31519: PUSH
31520: LD_INT 6
31522: EQUAL
31523: PUSH
31524: LD_VAR 0 9
31528: PPUSH
31529: CALL_OW 266
31533: PUSH
31534: LD_INT 32
31536: PUSH
31537: LD_INT 31
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: IN
31544: OR
31545: IFFALSE 31359
31547: GO 31356
31549: POP
31550: POP
// end else
31551: GO 31933
// for j = 1 to x do
31553: LD_ADDR_VAR 0 9
31557: PUSH
31558: DOUBLE
31559: LD_INT 1
31561: DEC
31562: ST_TO_ADDR
31563: LD_VAR 0 13
31567: PUSH
31568: FOR_TO
31569: IFFALSE 31931
// begin InitHc ;
31571: CALL_OW 19
// if not f then
31575: LD_VAR 0 12
31579: NOT
31580: IFFALSE 31669
// begin PrepareHuman ( false , i , skill ) ;
31582: LD_INT 0
31584: PPUSH
31585: LD_VAR 0 8
31589: PPUSH
31590: LD_VAR 0 4
31594: PPUSH
31595: CALL_OW 380
// un := CreateHuman ;
31599: LD_ADDR_VAR 0 14
31603: PUSH
31604: CALL_OW 44
31608: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31609: LD_ADDR_VAR 0 7
31613: PUSH
31614: LD_VAR 0 7
31618: PPUSH
31619: LD_INT 1
31621: PPUSH
31622: LD_VAR 0 14
31626: PPUSH
31627: CALL_OW 2
31631: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31632: LD_VAR 0 14
31636: PPUSH
31637: LD_VAR 0 1
31641: PPUSH
31642: CALL_OW 250
31646: PPUSH
31647: LD_VAR 0 1
31651: PPUSH
31652: CALL_OW 251
31656: PPUSH
31657: LD_INT 10
31659: PPUSH
31660: LD_INT 0
31662: PPUSH
31663: CALL_OW 50
// continue ;
31667: GO 31568
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31669: LD_VAR 0 12
31673: PUSH
31674: LD_INT 1
31676: ARRAY
31677: PPUSH
31678: CALL_OW 313
31682: PUSH
31683: LD_VAR 0 12
31687: PUSH
31688: LD_INT 1
31690: ARRAY
31691: PPUSH
31692: CALL_OW 266
31696: PUSH
31697: LD_INT 32
31699: PUSH
31700: LD_INT 31
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: IN
31707: AND
31708: PUSH
31709: LD_VAR 0 12
31713: PUSH
31714: LD_INT 1
31716: ARRAY
31717: PPUSH
31718: CALL_OW 313
31722: PUSH
31723: LD_INT 6
31725: EQUAL
31726: OR
31727: IFFALSE 31747
// f := Delete ( f , 1 ) ;
31729: LD_ADDR_VAR 0 12
31733: PUSH
31734: LD_VAR 0 12
31738: PPUSH
31739: LD_INT 1
31741: PPUSH
31742: CALL_OW 3
31746: ST_TO_ADDR
// if not f then
31747: LD_VAR 0 12
31751: NOT
31752: IFFALSE 31770
// begin x := x + 2 ;
31754: LD_ADDR_VAR 0 13
31758: PUSH
31759: LD_VAR 0 13
31763: PUSH
31764: LD_INT 2
31766: PLUS
31767: ST_TO_ADDR
// continue ;
31768: GO 31568
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31770: LD_VAR 0 12
31774: PUSH
31775: LD_INT 1
31777: ARRAY
31778: PPUSH
31779: CALL_OW 266
31783: PUSH
31784: LD_INT 5
31786: EQUAL
31787: IFFALSE 31861
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31789: LD_VAR 0 12
31793: PUSH
31794: LD_INT 1
31796: ARRAY
31797: PPUSH
31798: CALL_OW 313
31802: PUSH
31803: LD_INT 3
31805: LESS
31806: IFFALSE 31842
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31808: LD_INT 0
31810: PPUSH
31811: LD_INT 5
31813: PUSH
31814: LD_INT 8
31816: PUSH
31817: LD_INT 9
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: LIST
31824: PUSH
31825: LD_VAR 0 17
31829: ARRAY
31830: PPUSH
31831: LD_VAR 0 4
31835: PPUSH
31836: CALL_OW 380
31840: GO 31859
// PrepareHuman ( false , i , skill ) ;
31842: LD_INT 0
31844: PPUSH
31845: LD_VAR 0 8
31849: PPUSH
31850: LD_VAR 0 4
31854: PPUSH
31855: CALL_OW 380
// end else
31859: GO 31878
// PrepareHuman ( false , i , skill ) ;
31861: LD_INT 0
31863: PPUSH
31864: LD_VAR 0 8
31868: PPUSH
31869: LD_VAR 0 4
31873: PPUSH
31874: CALL_OW 380
// un := CreateHuman ;
31878: LD_ADDR_VAR 0 14
31882: PUSH
31883: CALL_OW 44
31887: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31888: LD_ADDR_VAR 0 7
31892: PUSH
31893: LD_VAR 0 7
31897: PPUSH
31898: LD_INT 1
31900: PPUSH
31901: LD_VAR 0 14
31905: PPUSH
31906: CALL_OW 2
31910: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31911: LD_VAR 0 14
31915: PPUSH
31916: LD_VAR 0 12
31920: PUSH
31921: LD_INT 1
31923: ARRAY
31924: PPUSH
31925: CALL_OW 52
// end ;
31929: GO 31568
31931: POP
31932: POP
// end ;
31933: GO 30870
31935: POP
31936: POP
// result := result ^ buildings ;
31937: LD_ADDR_VAR 0 7
31941: PUSH
31942: LD_VAR 0 7
31946: PUSH
31947: LD_VAR 0 18
31951: ADD
31952: ST_TO_ADDR
// end else
31953: GO 32096
// begin for i = 1 to personel do
31955: LD_ADDR_VAR 0 8
31959: PUSH
31960: DOUBLE
31961: LD_INT 1
31963: DEC
31964: ST_TO_ADDR
31965: LD_VAR 0 6
31969: PUSH
31970: FOR_TO
31971: IFFALSE 32094
// begin if i > 4 then
31973: LD_VAR 0 8
31977: PUSH
31978: LD_INT 4
31980: GREATER
31981: IFFALSE 31985
// break ;
31983: GO 32094
// x := personel [ i ] ;
31985: LD_ADDR_VAR 0 13
31989: PUSH
31990: LD_VAR 0 6
31994: PUSH
31995: LD_VAR 0 8
31999: ARRAY
32000: ST_TO_ADDR
// if x = - 1 then
32001: LD_VAR 0 13
32005: PUSH
32006: LD_INT 1
32008: NEG
32009: EQUAL
32010: IFFALSE 32014
// continue ;
32012: GO 31970
// PrepareHuman ( false , i , skill ) ;
32014: LD_INT 0
32016: PPUSH
32017: LD_VAR 0 8
32021: PPUSH
32022: LD_VAR 0 4
32026: PPUSH
32027: CALL_OW 380
// un := CreateHuman ;
32031: LD_ADDR_VAR 0 14
32035: PUSH
32036: CALL_OW 44
32040: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32041: LD_VAR 0 14
32045: PPUSH
32046: LD_VAR 0 1
32050: PPUSH
32051: CALL_OW 250
32055: PPUSH
32056: LD_VAR 0 1
32060: PPUSH
32061: CALL_OW 251
32065: PPUSH
32066: LD_INT 10
32068: PPUSH
32069: LD_INT 0
32071: PPUSH
32072: CALL_OW 50
// result := result ^ un ;
32076: LD_ADDR_VAR 0 7
32080: PUSH
32081: LD_VAR 0 7
32085: PUSH
32086: LD_VAR 0 14
32090: ADD
32091: ST_TO_ADDR
// end ;
32092: GO 31970
32094: POP
32095: POP
// end ; end ;
32096: LD_VAR 0 7
32100: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32101: LD_INT 0
32103: PPUSH
32104: PPUSH
32105: PPUSH
32106: PPUSH
32107: PPUSH
32108: PPUSH
32109: PPUSH
32110: PPUSH
32111: PPUSH
32112: PPUSH
32113: PPUSH
32114: PPUSH
32115: PPUSH
32116: PPUSH
32117: PPUSH
32118: PPUSH
// result := false ;
32119: LD_ADDR_VAR 0 3
32123: PUSH
32124: LD_INT 0
32126: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32127: LD_VAR 0 1
32131: NOT
32132: PUSH
32133: LD_VAR 0 1
32137: PPUSH
32138: CALL_OW 266
32142: PUSH
32143: LD_INT 32
32145: PUSH
32146: LD_INT 33
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: IN
32153: NOT
32154: OR
32155: IFFALSE 32159
// exit ;
32157: GO 33268
// nat := GetNation ( tower ) ;
32159: LD_ADDR_VAR 0 12
32163: PUSH
32164: LD_VAR 0 1
32168: PPUSH
32169: CALL_OW 248
32173: ST_TO_ADDR
// side := GetSide ( tower ) ;
32174: LD_ADDR_VAR 0 16
32178: PUSH
32179: LD_VAR 0 1
32183: PPUSH
32184: CALL_OW 255
32188: ST_TO_ADDR
// x := GetX ( tower ) ;
32189: LD_ADDR_VAR 0 10
32193: PUSH
32194: LD_VAR 0 1
32198: PPUSH
32199: CALL_OW 250
32203: ST_TO_ADDR
// y := GetY ( tower ) ;
32204: LD_ADDR_VAR 0 11
32208: PUSH
32209: LD_VAR 0 1
32213: PPUSH
32214: CALL_OW 251
32218: ST_TO_ADDR
// if not x or not y then
32219: LD_VAR 0 10
32223: NOT
32224: PUSH
32225: LD_VAR 0 11
32229: NOT
32230: OR
32231: IFFALSE 32235
// exit ;
32233: GO 33268
// weapon := 0 ;
32235: LD_ADDR_VAR 0 18
32239: PUSH
32240: LD_INT 0
32242: ST_TO_ADDR
// fac_list := [ ] ;
32243: LD_ADDR_VAR 0 17
32247: PUSH
32248: EMPTY
32249: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32250: LD_ADDR_VAR 0 6
32254: PUSH
32255: LD_VAR 0 1
32259: PPUSH
32260: CALL_OW 274
32264: PPUSH
32265: LD_VAR 0 2
32269: PPUSH
32270: LD_INT 0
32272: PPUSH
32273: CALL 29839 0 3
32277: PPUSH
32278: LD_INT 30
32280: PUSH
32281: LD_INT 3
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PPUSH
32288: CALL_OW 72
32292: ST_TO_ADDR
// if not factories then
32293: LD_VAR 0 6
32297: NOT
32298: IFFALSE 32302
// exit ;
32300: GO 33268
// for i in factories do
32302: LD_ADDR_VAR 0 8
32306: PUSH
32307: LD_VAR 0 6
32311: PUSH
32312: FOR_IN
32313: IFFALSE 32338
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32315: LD_ADDR_VAR 0 17
32319: PUSH
32320: LD_VAR 0 17
32324: PUSH
32325: LD_VAR 0 8
32329: PPUSH
32330: CALL_OW 478
32334: UNION
32335: ST_TO_ADDR
32336: GO 32312
32338: POP
32339: POP
// if not fac_list then
32340: LD_VAR 0 17
32344: NOT
32345: IFFALSE 32349
// exit ;
32347: GO 33268
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32349: LD_ADDR_VAR 0 5
32353: PUSH
32354: LD_INT 4
32356: PUSH
32357: LD_INT 5
32359: PUSH
32360: LD_INT 9
32362: PUSH
32363: LD_INT 10
32365: PUSH
32366: LD_INT 6
32368: PUSH
32369: LD_INT 7
32371: PUSH
32372: LD_INT 11
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 27
32386: PUSH
32387: LD_INT 28
32389: PUSH
32390: LD_INT 26
32392: PUSH
32393: LD_INT 30
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 43
32404: PUSH
32405: LD_INT 44
32407: PUSH
32408: LD_INT 46
32410: PUSH
32411: LD_INT 45
32413: PUSH
32414: LD_INT 47
32416: PUSH
32417: LD_INT 49
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: LIST
32432: PUSH
32433: LD_VAR 0 12
32437: ARRAY
32438: ST_TO_ADDR
// list := list isect fac_list ;
32439: LD_ADDR_VAR 0 5
32443: PUSH
32444: LD_VAR 0 5
32448: PUSH
32449: LD_VAR 0 17
32453: ISECT
32454: ST_TO_ADDR
// if not list then
32455: LD_VAR 0 5
32459: NOT
32460: IFFALSE 32464
// exit ;
32462: GO 33268
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32464: LD_VAR 0 12
32468: PUSH
32469: LD_INT 3
32471: EQUAL
32472: PUSH
32473: LD_INT 49
32475: PUSH
32476: LD_VAR 0 5
32480: IN
32481: AND
32482: PUSH
32483: LD_INT 31
32485: PPUSH
32486: LD_VAR 0 16
32490: PPUSH
32491: CALL_OW 321
32495: PUSH
32496: LD_INT 2
32498: EQUAL
32499: AND
32500: IFFALSE 32560
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32502: LD_INT 22
32504: PUSH
32505: LD_VAR 0 16
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 35
32516: PUSH
32517: LD_INT 49
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 91
32526: PUSH
32527: LD_VAR 0 1
32531: PUSH
32532: LD_INT 10
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: LIST
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: LIST
32544: PPUSH
32545: CALL_OW 69
32549: NOT
32550: IFFALSE 32560
// weapon := ru_time_lapser ;
32552: LD_ADDR_VAR 0 18
32556: PUSH
32557: LD_INT 49
32559: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32560: LD_VAR 0 12
32564: PUSH
32565: LD_INT 1
32567: PUSH
32568: LD_INT 2
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: IN
32575: PUSH
32576: LD_INT 11
32578: PUSH
32579: LD_VAR 0 5
32583: IN
32584: PUSH
32585: LD_INT 30
32587: PUSH
32588: LD_VAR 0 5
32592: IN
32593: OR
32594: AND
32595: PUSH
32596: LD_INT 6
32598: PPUSH
32599: LD_VAR 0 16
32603: PPUSH
32604: CALL_OW 321
32608: PUSH
32609: LD_INT 2
32611: EQUAL
32612: AND
32613: IFFALSE 32778
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32615: LD_INT 22
32617: PUSH
32618: LD_VAR 0 16
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 2
32629: PUSH
32630: LD_INT 35
32632: PUSH
32633: LD_INT 11
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 35
32642: PUSH
32643: LD_INT 30
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 91
32657: PUSH
32658: LD_VAR 0 1
32662: PUSH
32663: LD_INT 18
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: LIST
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: LIST
32675: PPUSH
32676: CALL_OW 69
32680: NOT
32681: PUSH
32682: LD_INT 22
32684: PUSH
32685: LD_VAR 0 16
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 2
32696: PUSH
32697: LD_INT 30
32699: PUSH
32700: LD_INT 32
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 30
32709: PUSH
32710: LD_INT 33
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 91
32724: PUSH
32725: LD_VAR 0 1
32729: PUSH
32730: LD_INT 12
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: LIST
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: LIST
32742: PUSH
32743: EMPTY
32744: LIST
32745: PPUSH
32746: CALL_OW 69
32750: PUSH
32751: LD_INT 2
32753: GREATER
32754: AND
32755: IFFALSE 32778
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32757: LD_ADDR_VAR 0 18
32761: PUSH
32762: LD_INT 11
32764: PUSH
32765: LD_INT 30
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_VAR 0 12
32776: ARRAY
32777: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32778: LD_VAR 0 18
32782: NOT
32783: PUSH
32784: LD_INT 40
32786: PPUSH
32787: LD_VAR 0 16
32791: PPUSH
32792: CALL_OW 321
32796: PUSH
32797: LD_INT 2
32799: EQUAL
32800: AND
32801: PUSH
32802: LD_INT 7
32804: PUSH
32805: LD_VAR 0 5
32809: IN
32810: PUSH
32811: LD_INT 28
32813: PUSH
32814: LD_VAR 0 5
32818: IN
32819: OR
32820: PUSH
32821: LD_INT 45
32823: PUSH
32824: LD_VAR 0 5
32828: IN
32829: OR
32830: AND
32831: IFFALSE 33085
// begin hex := GetHexInfo ( x , y ) ;
32833: LD_ADDR_VAR 0 4
32837: PUSH
32838: LD_VAR 0 10
32842: PPUSH
32843: LD_VAR 0 11
32847: PPUSH
32848: CALL_OW 546
32852: ST_TO_ADDR
// if hex [ 1 ] then
32853: LD_VAR 0 4
32857: PUSH
32858: LD_INT 1
32860: ARRAY
32861: IFFALSE 32865
// exit ;
32863: GO 33268
// height := hex [ 2 ] ;
32865: LD_ADDR_VAR 0 15
32869: PUSH
32870: LD_VAR 0 4
32874: PUSH
32875: LD_INT 2
32877: ARRAY
32878: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32879: LD_ADDR_VAR 0 14
32883: PUSH
32884: LD_INT 0
32886: PUSH
32887: LD_INT 2
32889: PUSH
32890: LD_INT 3
32892: PUSH
32893: LD_INT 5
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: ST_TO_ADDR
// for i in tmp do
32902: LD_ADDR_VAR 0 8
32906: PUSH
32907: LD_VAR 0 14
32911: PUSH
32912: FOR_IN
32913: IFFALSE 33083
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32915: LD_ADDR_VAR 0 9
32919: PUSH
32920: LD_VAR 0 10
32924: PPUSH
32925: LD_VAR 0 8
32929: PPUSH
32930: LD_INT 5
32932: PPUSH
32933: CALL_OW 272
32937: PUSH
32938: LD_VAR 0 11
32942: PPUSH
32943: LD_VAR 0 8
32947: PPUSH
32948: LD_INT 5
32950: PPUSH
32951: CALL_OW 273
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32960: LD_VAR 0 9
32964: PUSH
32965: LD_INT 1
32967: ARRAY
32968: PPUSH
32969: LD_VAR 0 9
32973: PUSH
32974: LD_INT 2
32976: ARRAY
32977: PPUSH
32978: CALL_OW 488
32982: IFFALSE 33081
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32984: LD_ADDR_VAR 0 4
32988: PUSH
32989: LD_VAR 0 9
32993: PUSH
32994: LD_INT 1
32996: ARRAY
32997: PPUSH
32998: LD_VAR 0 9
33002: PUSH
33003: LD_INT 2
33005: ARRAY
33006: PPUSH
33007: CALL_OW 546
33011: ST_TO_ADDR
// if hex [ 1 ] then
33012: LD_VAR 0 4
33016: PUSH
33017: LD_INT 1
33019: ARRAY
33020: IFFALSE 33024
// continue ;
33022: GO 32912
// h := hex [ 2 ] ;
33024: LD_ADDR_VAR 0 13
33028: PUSH
33029: LD_VAR 0 4
33033: PUSH
33034: LD_INT 2
33036: ARRAY
33037: ST_TO_ADDR
// if h + 7 < height then
33038: LD_VAR 0 13
33042: PUSH
33043: LD_INT 7
33045: PLUS
33046: PUSH
33047: LD_VAR 0 15
33051: LESS
33052: IFFALSE 33081
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33054: LD_ADDR_VAR 0 18
33058: PUSH
33059: LD_INT 7
33061: PUSH
33062: LD_INT 28
33064: PUSH
33065: LD_INT 45
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: LIST
33072: PUSH
33073: LD_VAR 0 12
33077: ARRAY
33078: ST_TO_ADDR
// break ;
33079: GO 33083
// end ; end ; end ;
33081: GO 32912
33083: POP
33084: POP
// end ; if not weapon then
33085: LD_VAR 0 18
33089: NOT
33090: IFFALSE 33150
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33092: LD_ADDR_VAR 0 5
33096: PUSH
33097: LD_VAR 0 5
33101: PUSH
33102: LD_INT 11
33104: PUSH
33105: LD_INT 30
33107: PUSH
33108: LD_INT 49
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: LIST
33115: DIFF
33116: ST_TO_ADDR
// if not list then
33117: LD_VAR 0 5
33121: NOT
33122: IFFALSE 33126
// exit ;
33124: GO 33268
// weapon := list [ rand ( 1 , list ) ] ;
33126: LD_ADDR_VAR 0 18
33130: PUSH
33131: LD_VAR 0 5
33135: PUSH
33136: LD_INT 1
33138: PPUSH
33139: LD_VAR 0 5
33143: PPUSH
33144: CALL_OW 12
33148: ARRAY
33149: ST_TO_ADDR
// end ; if weapon then
33150: LD_VAR 0 18
33154: IFFALSE 33268
// begin tmp := CostOfWeapon ( weapon ) ;
33156: LD_ADDR_VAR 0 14
33160: PUSH
33161: LD_VAR 0 18
33165: PPUSH
33166: CALL_OW 451
33170: ST_TO_ADDR
// j := GetBase ( tower ) ;
33171: LD_ADDR_VAR 0 9
33175: PUSH
33176: LD_VAR 0 1
33180: PPUSH
33181: CALL_OW 274
33185: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33186: LD_VAR 0 9
33190: PPUSH
33191: LD_INT 1
33193: PPUSH
33194: CALL_OW 275
33198: PUSH
33199: LD_VAR 0 14
33203: PUSH
33204: LD_INT 1
33206: ARRAY
33207: GREATEREQUAL
33208: PUSH
33209: LD_VAR 0 9
33213: PPUSH
33214: LD_INT 2
33216: PPUSH
33217: CALL_OW 275
33221: PUSH
33222: LD_VAR 0 14
33226: PUSH
33227: LD_INT 2
33229: ARRAY
33230: GREATEREQUAL
33231: AND
33232: PUSH
33233: LD_VAR 0 9
33237: PPUSH
33238: LD_INT 3
33240: PPUSH
33241: CALL_OW 275
33245: PUSH
33246: LD_VAR 0 14
33250: PUSH
33251: LD_INT 3
33253: ARRAY
33254: GREATEREQUAL
33255: AND
33256: IFFALSE 33268
// result := weapon ;
33258: LD_ADDR_VAR 0 3
33262: PUSH
33263: LD_VAR 0 18
33267: ST_TO_ADDR
// end ; end ;
33268: LD_VAR 0 3
33272: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33273: LD_INT 0
33275: PPUSH
33276: PPUSH
// result := true ;
33277: LD_ADDR_VAR 0 3
33281: PUSH
33282: LD_INT 1
33284: ST_TO_ADDR
// if array1 = array2 then
33285: LD_VAR 0 1
33289: PUSH
33290: LD_VAR 0 2
33294: EQUAL
33295: IFFALSE 33355
// begin for i = 1 to array1 do
33297: LD_ADDR_VAR 0 4
33301: PUSH
33302: DOUBLE
33303: LD_INT 1
33305: DEC
33306: ST_TO_ADDR
33307: LD_VAR 0 1
33311: PUSH
33312: FOR_TO
33313: IFFALSE 33351
// if array1 [ i ] <> array2 [ i ] then
33315: LD_VAR 0 1
33319: PUSH
33320: LD_VAR 0 4
33324: ARRAY
33325: PUSH
33326: LD_VAR 0 2
33330: PUSH
33331: LD_VAR 0 4
33335: ARRAY
33336: NONEQUAL
33337: IFFALSE 33349
// begin result := false ;
33339: LD_ADDR_VAR 0 3
33343: PUSH
33344: LD_INT 0
33346: ST_TO_ADDR
// break ;
33347: GO 33351
// end ;
33349: GO 33312
33351: POP
33352: POP
// end else
33353: GO 33363
// result := false ;
33355: LD_ADDR_VAR 0 3
33359: PUSH
33360: LD_INT 0
33362: ST_TO_ADDR
// end ;
33363: LD_VAR 0 3
33367: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33368: LD_INT 0
33370: PPUSH
33371: PPUSH
// if not array1 or not array2 then
33372: LD_VAR 0 1
33376: NOT
33377: PUSH
33378: LD_VAR 0 2
33382: NOT
33383: OR
33384: IFFALSE 33388
// exit ;
33386: GO 33452
// result := true ;
33388: LD_ADDR_VAR 0 3
33392: PUSH
33393: LD_INT 1
33395: ST_TO_ADDR
// for i = 1 to array1 do
33396: LD_ADDR_VAR 0 4
33400: PUSH
33401: DOUBLE
33402: LD_INT 1
33404: DEC
33405: ST_TO_ADDR
33406: LD_VAR 0 1
33410: PUSH
33411: FOR_TO
33412: IFFALSE 33450
// if array1 [ i ] <> array2 [ i ] then
33414: LD_VAR 0 1
33418: PUSH
33419: LD_VAR 0 4
33423: ARRAY
33424: PUSH
33425: LD_VAR 0 2
33429: PUSH
33430: LD_VAR 0 4
33434: ARRAY
33435: NONEQUAL
33436: IFFALSE 33448
// begin result := false ;
33438: LD_ADDR_VAR 0 3
33442: PUSH
33443: LD_INT 0
33445: ST_TO_ADDR
// break ;
33446: GO 33450
// end ;
33448: GO 33411
33450: POP
33451: POP
// end ;
33452: LD_VAR 0 3
33456: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33457: LD_INT 0
33459: PPUSH
33460: PPUSH
33461: PPUSH
// pom := GetBase ( fac ) ;
33462: LD_ADDR_VAR 0 5
33466: PUSH
33467: LD_VAR 0 1
33471: PPUSH
33472: CALL_OW 274
33476: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33477: LD_ADDR_VAR 0 4
33481: PUSH
33482: LD_VAR 0 2
33486: PUSH
33487: LD_INT 1
33489: ARRAY
33490: PPUSH
33491: LD_VAR 0 2
33495: PUSH
33496: LD_INT 2
33498: ARRAY
33499: PPUSH
33500: LD_VAR 0 2
33504: PUSH
33505: LD_INT 3
33507: ARRAY
33508: PPUSH
33509: LD_VAR 0 2
33513: PUSH
33514: LD_INT 4
33516: ARRAY
33517: PPUSH
33518: CALL_OW 449
33522: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33523: LD_ADDR_VAR 0 3
33527: PUSH
33528: LD_VAR 0 5
33532: PPUSH
33533: LD_INT 1
33535: PPUSH
33536: CALL_OW 275
33540: PUSH
33541: LD_VAR 0 4
33545: PUSH
33546: LD_INT 1
33548: ARRAY
33549: GREATEREQUAL
33550: PUSH
33551: LD_VAR 0 5
33555: PPUSH
33556: LD_INT 2
33558: PPUSH
33559: CALL_OW 275
33563: PUSH
33564: LD_VAR 0 4
33568: PUSH
33569: LD_INT 2
33571: ARRAY
33572: GREATEREQUAL
33573: AND
33574: PUSH
33575: LD_VAR 0 5
33579: PPUSH
33580: LD_INT 3
33582: PPUSH
33583: CALL_OW 275
33587: PUSH
33588: LD_VAR 0 4
33592: PUSH
33593: LD_INT 3
33595: ARRAY
33596: GREATEREQUAL
33597: AND
33598: ST_TO_ADDR
// end ;
33599: LD_VAR 0 3
33603: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33604: LD_INT 0
33606: PPUSH
33607: PPUSH
33608: PPUSH
33609: PPUSH
// pom := GetBase ( building ) ;
33610: LD_ADDR_VAR 0 3
33614: PUSH
33615: LD_VAR 0 1
33619: PPUSH
33620: CALL_OW 274
33624: ST_TO_ADDR
// if not pom then
33625: LD_VAR 0 3
33629: NOT
33630: IFFALSE 33634
// exit ;
33632: GO 33804
// btype := GetBType ( building ) ;
33634: LD_ADDR_VAR 0 5
33638: PUSH
33639: LD_VAR 0 1
33643: PPUSH
33644: CALL_OW 266
33648: ST_TO_ADDR
// if btype = b_armoury then
33649: LD_VAR 0 5
33653: PUSH
33654: LD_INT 4
33656: EQUAL
33657: IFFALSE 33667
// btype := b_barracks ;
33659: LD_ADDR_VAR 0 5
33663: PUSH
33664: LD_INT 5
33666: ST_TO_ADDR
// if btype = b_depot then
33667: LD_VAR 0 5
33671: PUSH
33672: LD_INT 0
33674: EQUAL
33675: IFFALSE 33685
// btype := b_warehouse ;
33677: LD_ADDR_VAR 0 5
33681: PUSH
33682: LD_INT 1
33684: ST_TO_ADDR
// if btype = b_workshop then
33685: LD_VAR 0 5
33689: PUSH
33690: LD_INT 2
33692: EQUAL
33693: IFFALSE 33703
// btype := b_factory ;
33695: LD_ADDR_VAR 0 5
33699: PUSH
33700: LD_INT 3
33702: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33703: LD_ADDR_VAR 0 4
33707: PUSH
33708: LD_VAR 0 5
33712: PPUSH
33713: LD_VAR 0 1
33717: PPUSH
33718: CALL_OW 248
33722: PPUSH
33723: CALL_OW 450
33727: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33728: LD_ADDR_VAR 0 2
33732: PUSH
33733: LD_VAR 0 3
33737: PPUSH
33738: LD_INT 1
33740: PPUSH
33741: CALL_OW 275
33745: PUSH
33746: LD_VAR 0 4
33750: PUSH
33751: LD_INT 1
33753: ARRAY
33754: GREATEREQUAL
33755: PUSH
33756: LD_VAR 0 3
33760: PPUSH
33761: LD_INT 2
33763: PPUSH
33764: CALL_OW 275
33768: PUSH
33769: LD_VAR 0 4
33773: PUSH
33774: LD_INT 2
33776: ARRAY
33777: GREATEREQUAL
33778: AND
33779: PUSH
33780: LD_VAR 0 3
33784: PPUSH
33785: LD_INT 3
33787: PPUSH
33788: CALL_OW 275
33792: PUSH
33793: LD_VAR 0 4
33797: PUSH
33798: LD_INT 3
33800: ARRAY
33801: GREATEREQUAL
33802: AND
33803: ST_TO_ADDR
// end ;
33804: LD_VAR 0 2
33808: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33809: LD_INT 0
33811: PPUSH
33812: PPUSH
33813: PPUSH
// pom := GetBase ( building ) ;
33814: LD_ADDR_VAR 0 4
33818: PUSH
33819: LD_VAR 0 1
33823: PPUSH
33824: CALL_OW 274
33828: ST_TO_ADDR
// if not pom then
33829: LD_VAR 0 4
33833: NOT
33834: IFFALSE 33838
// exit ;
33836: GO 33939
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33838: LD_ADDR_VAR 0 5
33842: PUSH
33843: LD_VAR 0 2
33847: PPUSH
33848: LD_VAR 0 1
33852: PPUSH
33853: CALL_OW 248
33857: PPUSH
33858: CALL_OW 450
33862: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33863: LD_ADDR_VAR 0 3
33867: PUSH
33868: LD_VAR 0 4
33872: PPUSH
33873: LD_INT 1
33875: PPUSH
33876: CALL_OW 275
33880: PUSH
33881: LD_VAR 0 5
33885: PUSH
33886: LD_INT 1
33888: ARRAY
33889: GREATEREQUAL
33890: PUSH
33891: LD_VAR 0 4
33895: PPUSH
33896: LD_INT 2
33898: PPUSH
33899: CALL_OW 275
33903: PUSH
33904: LD_VAR 0 5
33908: PUSH
33909: LD_INT 2
33911: ARRAY
33912: GREATEREQUAL
33913: AND
33914: PUSH
33915: LD_VAR 0 4
33919: PPUSH
33920: LD_INT 3
33922: PPUSH
33923: CALL_OW 275
33927: PUSH
33928: LD_VAR 0 5
33932: PUSH
33933: LD_INT 3
33935: ARRAY
33936: GREATEREQUAL
33937: AND
33938: ST_TO_ADDR
// end ;
33939: LD_VAR 0 3
33943: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33944: LD_INT 0
33946: PPUSH
33947: PPUSH
33948: PPUSH
33949: PPUSH
33950: PPUSH
33951: PPUSH
33952: PPUSH
33953: PPUSH
33954: PPUSH
33955: PPUSH
33956: PPUSH
// result := false ;
33957: LD_ADDR_VAR 0 8
33961: PUSH
33962: LD_INT 0
33964: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33965: LD_VAR 0 5
33969: NOT
33970: PUSH
33971: LD_VAR 0 1
33975: NOT
33976: OR
33977: PUSH
33978: LD_VAR 0 2
33982: NOT
33983: OR
33984: PUSH
33985: LD_VAR 0 3
33989: NOT
33990: OR
33991: IFFALSE 33995
// exit ;
33993: GO 34809
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33995: LD_ADDR_VAR 0 14
33999: PUSH
34000: LD_VAR 0 1
34004: PPUSH
34005: LD_VAR 0 2
34009: PPUSH
34010: LD_VAR 0 3
34014: PPUSH
34015: LD_VAR 0 4
34019: PPUSH
34020: LD_VAR 0 5
34024: PUSH
34025: LD_INT 1
34027: ARRAY
34028: PPUSH
34029: CALL_OW 248
34033: PPUSH
34034: LD_INT 0
34036: PPUSH
34037: CALL 36042 0 6
34041: ST_TO_ADDR
// if not hexes then
34042: LD_VAR 0 14
34046: NOT
34047: IFFALSE 34051
// exit ;
34049: GO 34809
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34051: LD_ADDR_VAR 0 17
34055: PUSH
34056: LD_VAR 0 5
34060: PPUSH
34061: LD_INT 22
34063: PUSH
34064: LD_VAR 0 13
34068: PPUSH
34069: CALL_OW 255
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 2
34080: PUSH
34081: LD_INT 30
34083: PUSH
34084: LD_INT 0
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 30
34093: PUSH
34094: LD_INT 1
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: LIST
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PPUSH
34110: CALL_OW 72
34114: ST_TO_ADDR
// for i = 1 to hexes do
34115: LD_ADDR_VAR 0 9
34119: PUSH
34120: DOUBLE
34121: LD_INT 1
34123: DEC
34124: ST_TO_ADDR
34125: LD_VAR 0 14
34129: PUSH
34130: FOR_TO
34131: IFFALSE 34807
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34133: LD_ADDR_VAR 0 13
34137: PUSH
34138: LD_VAR 0 14
34142: PUSH
34143: LD_VAR 0 9
34147: ARRAY
34148: PUSH
34149: LD_INT 1
34151: ARRAY
34152: PPUSH
34153: LD_VAR 0 14
34157: PUSH
34158: LD_VAR 0 9
34162: ARRAY
34163: PUSH
34164: LD_INT 2
34166: ARRAY
34167: PPUSH
34168: CALL_OW 428
34172: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34173: LD_VAR 0 14
34177: PUSH
34178: LD_VAR 0 9
34182: ARRAY
34183: PUSH
34184: LD_INT 1
34186: ARRAY
34187: PPUSH
34188: LD_VAR 0 14
34192: PUSH
34193: LD_VAR 0 9
34197: ARRAY
34198: PUSH
34199: LD_INT 2
34201: ARRAY
34202: PPUSH
34203: CALL_OW 351
34207: PUSH
34208: LD_VAR 0 14
34212: PUSH
34213: LD_VAR 0 9
34217: ARRAY
34218: PUSH
34219: LD_INT 1
34221: ARRAY
34222: PPUSH
34223: LD_VAR 0 14
34227: PUSH
34228: LD_VAR 0 9
34232: ARRAY
34233: PUSH
34234: LD_INT 2
34236: ARRAY
34237: PPUSH
34238: CALL_OW 488
34242: NOT
34243: OR
34244: PUSH
34245: LD_VAR 0 13
34249: PPUSH
34250: CALL_OW 247
34254: PUSH
34255: LD_INT 3
34257: EQUAL
34258: OR
34259: IFFALSE 34265
// exit ;
34261: POP
34262: POP
34263: GO 34809
// if not tmp then
34265: LD_VAR 0 13
34269: NOT
34270: IFFALSE 34274
// continue ;
34272: GO 34130
// result := true ;
34274: LD_ADDR_VAR 0 8
34278: PUSH
34279: LD_INT 1
34281: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34282: LD_VAR 0 6
34286: PUSH
34287: LD_VAR 0 13
34291: PPUSH
34292: CALL_OW 247
34296: PUSH
34297: LD_INT 2
34299: EQUAL
34300: AND
34301: PUSH
34302: LD_VAR 0 13
34306: PPUSH
34307: CALL_OW 263
34311: PUSH
34312: LD_INT 1
34314: EQUAL
34315: AND
34316: IFFALSE 34480
// begin if IsDrivenBy ( tmp ) then
34318: LD_VAR 0 13
34322: PPUSH
34323: CALL_OW 311
34327: IFFALSE 34331
// continue ;
34329: GO 34130
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34331: LD_VAR 0 6
34335: PPUSH
34336: LD_INT 3
34338: PUSH
34339: LD_INT 60
34341: PUSH
34342: EMPTY
34343: LIST
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 3
34351: PUSH
34352: LD_INT 55
34354: PUSH
34355: EMPTY
34356: LIST
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PPUSH
34366: CALL_OW 72
34370: IFFALSE 34478
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34372: LD_ADDR_VAR 0 18
34376: PUSH
34377: LD_VAR 0 6
34381: PPUSH
34382: LD_INT 3
34384: PUSH
34385: LD_INT 60
34387: PUSH
34388: EMPTY
34389: LIST
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 3
34397: PUSH
34398: LD_INT 55
34400: PUSH
34401: EMPTY
34402: LIST
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PPUSH
34412: CALL_OW 72
34416: PUSH
34417: LD_INT 1
34419: ARRAY
34420: ST_TO_ADDR
// if IsInUnit ( driver ) then
34421: LD_VAR 0 18
34425: PPUSH
34426: CALL_OW 310
34430: IFFALSE 34441
// ComExit ( driver ) ;
34432: LD_VAR 0 18
34436: PPUSH
34437: CALL 59730 0 1
// AddComEnterUnit ( driver , tmp ) ;
34441: LD_VAR 0 18
34445: PPUSH
34446: LD_VAR 0 13
34450: PPUSH
34451: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34455: LD_VAR 0 18
34459: PPUSH
34460: LD_VAR 0 7
34464: PPUSH
34465: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34469: LD_VAR 0 18
34473: PPUSH
34474: CALL_OW 181
// end ; continue ;
34478: GO 34130
// end ; if not cleaners or not tmp in cleaners then
34480: LD_VAR 0 6
34484: NOT
34485: PUSH
34486: LD_VAR 0 13
34490: PUSH
34491: LD_VAR 0 6
34495: IN
34496: NOT
34497: OR
34498: IFFALSE 34805
// begin if dep then
34500: LD_VAR 0 17
34504: IFFALSE 34640
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34506: LD_ADDR_VAR 0 16
34510: PUSH
34511: LD_VAR 0 17
34515: PUSH
34516: LD_INT 1
34518: ARRAY
34519: PPUSH
34520: CALL_OW 250
34524: PPUSH
34525: LD_VAR 0 17
34529: PUSH
34530: LD_INT 1
34532: ARRAY
34533: PPUSH
34534: CALL_OW 254
34538: PPUSH
34539: LD_INT 5
34541: PPUSH
34542: CALL_OW 272
34546: PUSH
34547: LD_VAR 0 17
34551: PUSH
34552: LD_INT 1
34554: ARRAY
34555: PPUSH
34556: CALL_OW 251
34560: PPUSH
34561: LD_VAR 0 17
34565: PUSH
34566: LD_INT 1
34568: ARRAY
34569: PPUSH
34570: CALL_OW 254
34574: PPUSH
34575: LD_INT 5
34577: PPUSH
34578: CALL_OW 273
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34587: LD_VAR 0 16
34591: PUSH
34592: LD_INT 1
34594: ARRAY
34595: PPUSH
34596: LD_VAR 0 16
34600: PUSH
34601: LD_INT 2
34603: ARRAY
34604: PPUSH
34605: CALL_OW 488
34609: IFFALSE 34640
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34611: LD_VAR 0 13
34615: PPUSH
34616: LD_VAR 0 16
34620: PUSH
34621: LD_INT 1
34623: ARRAY
34624: PPUSH
34625: LD_VAR 0 16
34629: PUSH
34630: LD_INT 2
34632: ARRAY
34633: PPUSH
34634: CALL_OW 111
// continue ;
34638: GO 34130
// end ; end ; r := GetDir ( tmp ) ;
34640: LD_ADDR_VAR 0 15
34644: PUSH
34645: LD_VAR 0 13
34649: PPUSH
34650: CALL_OW 254
34654: ST_TO_ADDR
// if r = 5 then
34655: LD_VAR 0 15
34659: PUSH
34660: LD_INT 5
34662: EQUAL
34663: IFFALSE 34673
// r := 0 ;
34665: LD_ADDR_VAR 0 15
34669: PUSH
34670: LD_INT 0
34672: ST_TO_ADDR
// for j = r to 5 do
34673: LD_ADDR_VAR 0 10
34677: PUSH
34678: DOUBLE
34679: LD_VAR 0 15
34683: DEC
34684: ST_TO_ADDR
34685: LD_INT 5
34687: PUSH
34688: FOR_TO
34689: IFFALSE 34803
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34691: LD_ADDR_VAR 0 11
34695: PUSH
34696: LD_VAR 0 13
34700: PPUSH
34701: CALL_OW 250
34705: PPUSH
34706: LD_VAR 0 10
34710: PPUSH
34711: LD_INT 2
34713: PPUSH
34714: CALL_OW 272
34718: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34719: LD_ADDR_VAR 0 12
34723: PUSH
34724: LD_VAR 0 13
34728: PPUSH
34729: CALL_OW 251
34733: PPUSH
34734: LD_VAR 0 10
34738: PPUSH
34739: LD_INT 2
34741: PPUSH
34742: CALL_OW 273
34746: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34747: LD_VAR 0 11
34751: PPUSH
34752: LD_VAR 0 12
34756: PPUSH
34757: CALL_OW 488
34761: PUSH
34762: LD_VAR 0 11
34766: PPUSH
34767: LD_VAR 0 12
34771: PPUSH
34772: CALL_OW 428
34776: NOT
34777: AND
34778: IFFALSE 34801
// begin ComMoveXY ( tmp , _x , _y ) ;
34780: LD_VAR 0 13
34784: PPUSH
34785: LD_VAR 0 11
34789: PPUSH
34790: LD_VAR 0 12
34794: PPUSH
34795: CALL_OW 111
// break ;
34799: GO 34803
// end ; end ;
34801: GO 34688
34803: POP
34804: POP
// end ; end ;
34805: GO 34130
34807: POP
34808: POP
// end ;
34809: LD_VAR 0 8
34813: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34814: LD_INT 0
34816: PPUSH
// result := true ;
34817: LD_ADDR_VAR 0 3
34821: PUSH
34822: LD_INT 1
34824: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34825: LD_VAR 0 2
34829: PUSH
34830: LD_INT 24
34832: DOUBLE
34833: EQUAL
34834: IFTRUE 34844
34836: LD_INT 33
34838: DOUBLE
34839: EQUAL
34840: IFTRUE 34844
34842: GO 34869
34844: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34845: LD_ADDR_VAR 0 3
34849: PUSH
34850: LD_INT 32
34852: PPUSH
34853: LD_VAR 0 1
34857: PPUSH
34858: CALL_OW 321
34862: PUSH
34863: LD_INT 2
34865: EQUAL
34866: ST_TO_ADDR
34867: GO 35185
34869: LD_INT 20
34871: DOUBLE
34872: EQUAL
34873: IFTRUE 34877
34875: GO 34902
34877: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34878: LD_ADDR_VAR 0 3
34882: PUSH
34883: LD_INT 6
34885: PPUSH
34886: LD_VAR 0 1
34890: PPUSH
34891: CALL_OW 321
34895: PUSH
34896: LD_INT 2
34898: EQUAL
34899: ST_TO_ADDR
34900: GO 35185
34902: LD_INT 22
34904: DOUBLE
34905: EQUAL
34906: IFTRUE 34916
34908: LD_INT 36
34910: DOUBLE
34911: EQUAL
34912: IFTRUE 34916
34914: GO 34941
34916: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34917: LD_ADDR_VAR 0 3
34921: PUSH
34922: LD_INT 15
34924: PPUSH
34925: LD_VAR 0 1
34929: PPUSH
34930: CALL_OW 321
34934: PUSH
34935: LD_INT 2
34937: EQUAL
34938: ST_TO_ADDR
34939: GO 35185
34941: LD_INT 30
34943: DOUBLE
34944: EQUAL
34945: IFTRUE 34949
34947: GO 34974
34949: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34950: LD_ADDR_VAR 0 3
34954: PUSH
34955: LD_INT 20
34957: PPUSH
34958: LD_VAR 0 1
34962: PPUSH
34963: CALL_OW 321
34967: PUSH
34968: LD_INT 2
34970: EQUAL
34971: ST_TO_ADDR
34972: GO 35185
34974: LD_INT 28
34976: DOUBLE
34977: EQUAL
34978: IFTRUE 34988
34980: LD_INT 21
34982: DOUBLE
34983: EQUAL
34984: IFTRUE 34988
34986: GO 35013
34988: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34989: LD_ADDR_VAR 0 3
34993: PUSH
34994: LD_INT 21
34996: PPUSH
34997: LD_VAR 0 1
35001: PPUSH
35002: CALL_OW 321
35006: PUSH
35007: LD_INT 2
35009: EQUAL
35010: ST_TO_ADDR
35011: GO 35185
35013: LD_INT 16
35015: DOUBLE
35016: EQUAL
35017: IFTRUE 35021
35019: GO 35046
35021: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
35022: LD_ADDR_VAR 0 3
35026: PUSH
35027: LD_INT 84
35029: PPUSH
35030: LD_VAR 0 1
35034: PPUSH
35035: CALL_OW 321
35039: PUSH
35040: LD_INT 2
35042: EQUAL
35043: ST_TO_ADDR
35044: GO 35185
35046: LD_INT 19
35048: DOUBLE
35049: EQUAL
35050: IFTRUE 35060
35052: LD_INT 23
35054: DOUBLE
35055: EQUAL
35056: IFTRUE 35060
35058: GO 35085
35060: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35061: LD_ADDR_VAR 0 3
35065: PUSH
35066: LD_INT 83
35068: PPUSH
35069: LD_VAR 0 1
35073: PPUSH
35074: CALL_OW 321
35078: PUSH
35079: LD_INT 2
35081: EQUAL
35082: ST_TO_ADDR
35083: GO 35185
35085: LD_INT 17
35087: DOUBLE
35088: EQUAL
35089: IFTRUE 35093
35091: GO 35118
35093: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35094: LD_ADDR_VAR 0 3
35098: PUSH
35099: LD_INT 39
35101: PPUSH
35102: LD_VAR 0 1
35106: PPUSH
35107: CALL_OW 321
35111: PUSH
35112: LD_INT 2
35114: EQUAL
35115: ST_TO_ADDR
35116: GO 35185
35118: LD_INT 18
35120: DOUBLE
35121: EQUAL
35122: IFTRUE 35126
35124: GO 35151
35126: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
35127: LD_ADDR_VAR 0 3
35131: PUSH
35132: LD_INT 40
35134: PPUSH
35135: LD_VAR 0 1
35139: PPUSH
35140: CALL_OW 321
35144: PUSH
35145: LD_INT 2
35147: EQUAL
35148: ST_TO_ADDR
35149: GO 35185
35151: LD_INT 27
35153: DOUBLE
35154: EQUAL
35155: IFTRUE 35159
35157: GO 35184
35159: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
35160: LD_ADDR_VAR 0 3
35164: PUSH
35165: LD_INT 35
35167: PPUSH
35168: LD_VAR 0 1
35172: PPUSH
35173: CALL_OW 321
35177: PUSH
35178: LD_INT 2
35180: EQUAL
35181: ST_TO_ADDR
35182: GO 35185
35184: POP
// end ;
35185: LD_VAR 0 3
35189: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
35190: LD_INT 0
35192: PPUSH
35193: PPUSH
35194: PPUSH
35195: PPUSH
35196: PPUSH
35197: PPUSH
35198: PPUSH
35199: PPUSH
35200: PPUSH
35201: PPUSH
35202: PPUSH
// result := false ;
35203: LD_ADDR_VAR 0 6
35207: PUSH
35208: LD_INT 0
35210: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35211: LD_VAR 0 1
35215: NOT
35216: PUSH
35217: LD_VAR 0 1
35221: PPUSH
35222: CALL_OW 266
35226: PUSH
35227: LD_INT 0
35229: PUSH
35230: LD_INT 1
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: IN
35237: NOT
35238: OR
35239: PUSH
35240: LD_VAR 0 2
35244: NOT
35245: OR
35246: PUSH
35247: LD_VAR 0 5
35251: PUSH
35252: LD_INT 0
35254: PUSH
35255: LD_INT 1
35257: PUSH
35258: LD_INT 2
35260: PUSH
35261: LD_INT 3
35263: PUSH
35264: LD_INT 4
35266: PUSH
35267: LD_INT 5
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: IN
35278: NOT
35279: OR
35280: PUSH
35281: LD_VAR 0 3
35285: PPUSH
35286: LD_VAR 0 4
35290: PPUSH
35291: CALL_OW 488
35295: NOT
35296: OR
35297: IFFALSE 35301
// exit ;
35299: GO 36037
// side := GetSide ( depot ) ;
35301: LD_ADDR_VAR 0 9
35305: PUSH
35306: LD_VAR 0 1
35310: PPUSH
35311: CALL_OW 255
35315: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35316: LD_VAR 0 9
35320: PPUSH
35321: LD_VAR 0 2
35325: PPUSH
35326: CALL 34814 0 2
35330: NOT
35331: IFFALSE 35335
// exit ;
35333: GO 36037
// pom := GetBase ( depot ) ;
35335: LD_ADDR_VAR 0 10
35339: PUSH
35340: LD_VAR 0 1
35344: PPUSH
35345: CALL_OW 274
35349: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35350: LD_ADDR_VAR 0 11
35354: PUSH
35355: LD_VAR 0 2
35359: PPUSH
35360: LD_VAR 0 1
35364: PPUSH
35365: CALL_OW 248
35369: PPUSH
35370: CALL_OW 450
35374: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35375: LD_VAR 0 10
35379: PPUSH
35380: LD_INT 1
35382: PPUSH
35383: CALL_OW 275
35387: PUSH
35388: LD_VAR 0 11
35392: PUSH
35393: LD_INT 1
35395: ARRAY
35396: GREATEREQUAL
35397: PUSH
35398: LD_VAR 0 10
35402: PPUSH
35403: LD_INT 2
35405: PPUSH
35406: CALL_OW 275
35410: PUSH
35411: LD_VAR 0 11
35415: PUSH
35416: LD_INT 2
35418: ARRAY
35419: GREATEREQUAL
35420: AND
35421: PUSH
35422: LD_VAR 0 10
35426: PPUSH
35427: LD_INT 3
35429: PPUSH
35430: CALL_OW 275
35434: PUSH
35435: LD_VAR 0 11
35439: PUSH
35440: LD_INT 3
35442: ARRAY
35443: GREATEREQUAL
35444: AND
35445: NOT
35446: IFFALSE 35450
// exit ;
35448: GO 36037
// if GetBType ( depot ) = b_depot then
35450: LD_VAR 0 1
35454: PPUSH
35455: CALL_OW 266
35459: PUSH
35460: LD_INT 0
35462: EQUAL
35463: IFFALSE 35475
// dist := 28 else
35465: LD_ADDR_VAR 0 14
35469: PUSH
35470: LD_INT 28
35472: ST_TO_ADDR
35473: GO 35483
// dist := 36 ;
35475: LD_ADDR_VAR 0 14
35479: PUSH
35480: LD_INT 36
35482: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35483: LD_VAR 0 1
35487: PPUSH
35488: LD_VAR 0 3
35492: PPUSH
35493: LD_VAR 0 4
35497: PPUSH
35498: CALL_OW 297
35502: PUSH
35503: LD_VAR 0 14
35507: GREATER
35508: IFFALSE 35512
// exit ;
35510: GO 36037
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35512: LD_ADDR_VAR 0 12
35516: PUSH
35517: LD_VAR 0 2
35521: PPUSH
35522: LD_VAR 0 3
35526: PPUSH
35527: LD_VAR 0 4
35531: PPUSH
35532: LD_VAR 0 5
35536: PPUSH
35537: LD_VAR 0 1
35541: PPUSH
35542: CALL_OW 248
35546: PPUSH
35547: LD_INT 0
35549: PPUSH
35550: CALL 36042 0 6
35554: ST_TO_ADDR
// if not hexes then
35555: LD_VAR 0 12
35559: NOT
35560: IFFALSE 35564
// exit ;
35562: GO 36037
// hex := GetHexInfo ( x , y ) ;
35564: LD_ADDR_VAR 0 15
35568: PUSH
35569: LD_VAR 0 3
35573: PPUSH
35574: LD_VAR 0 4
35578: PPUSH
35579: CALL_OW 546
35583: ST_TO_ADDR
// if hex [ 1 ] then
35584: LD_VAR 0 15
35588: PUSH
35589: LD_INT 1
35591: ARRAY
35592: IFFALSE 35596
// exit ;
35594: GO 36037
// height := hex [ 2 ] ;
35596: LD_ADDR_VAR 0 13
35600: PUSH
35601: LD_VAR 0 15
35605: PUSH
35606: LD_INT 2
35608: ARRAY
35609: ST_TO_ADDR
// for i = 1 to hexes do
35610: LD_ADDR_VAR 0 7
35614: PUSH
35615: DOUBLE
35616: LD_INT 1
35618: DEC
35619: ST_TO_ADDR
35620: LD_VAR 0 12
35624: PUSH
35625: FOR_TO
35626: IFFALSE 35956
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35628: LD_VAR 0 12
35632: PUSH
35633: LD_VAR 0 7
35637: ARRAY
35638: PUSH
35639: LD_INT 1
35641: ARRAY
35642: PPUSH
35643: LD_VAR 0 12
35647: PUSH
35648: LD_VAR 0 7
35652: ARRAY
35653: PUSH
35654: LD_INT 2
35656: ARRAY
35657: PPUSH
35658: CALL_OW 488
35662: NOT
35663: PUSH
35664: LD_VAR 0 12
35668: PUSH
35669: LD_VAR 0 7
35673: ARRAY
35674: PUSH
35675: LD_INT 1
35677: ARRAY
35678: PPUSH
35679: LD_VAR 0 12
35683: PUSH
35684: LD_VAR 0 7
35688: ARRAY
35689: PUSH
35690: LD_INT 2
35692: ARRAY
35693: PPUSH
35694: CALL_OW 428
35698: PUSH
35699: LD_INT 0
35701: GREATER
35702: OR
35703: PUSH
35704: LD_VAR 0 12
35708: PUSH
35709: LD_VAR 0 7
35713: ARRAY
35714: PUSH
35715: LD_INT 1
35717: ARRAY
35718: PPUSH
35719: LD_VAR 0 12
35723: PUSH
35724: LD_VAR 0 7
35728: ARRAY
35729: PUSH
35730: LD_INT 2
35732: ARRAY
35733: PPUSH
35734: CALL_OW 351
35738: OR
35739: IFFALSE 35745
// exit ;
35741: POP
35742: POP
35743: GO 36037
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35745: LD_ADDR_VAR 0 8
35749: PUSH
35750: LD_VAR 0 12
35754: PUSH
35755: LD_VAR 0 7
35759: ARRAY
35760: PUSH
35761: LD_INT 1
35763: ARRAY
35764: PPUSH
35765: LD_VAR 0 12
35769: PUSH
35770: LD_VAR 0 7
35774: ARRAY
35775: PUSH
35776: LD_INT 2
35778: ARRAY
35779: PPUSH
35780: CALL_OW 546
35784: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35785: LD_VAR 0 8
35789: PUSH
35790: LD_INT 1
35792: ARRAY
35793: PUSH
35794: LD_VAR 0 8
35798: PUSH
35799: LD_INT 2
35801: ARRAY
35802: PUSH
35803: LD_VAR 0 13
35807: PUSH
35808: LD_INT 2
35810: PLUS
35811: GREATER
35812: OR
35813: PUSH
35814: LD_VAR 0 8
35818: PUSH
35819: LD_INT 2
35821: ARRAY
35822: PUSH
35823: LD_VAR 0 13
35827: PUSH
35828: LD_INT 2
35830: MINUS
35831: LESS
35832: OR
35833: PUSH
35834: LD_VAR 0 8
35838: PUSH
35839: LD_INT 3
35841: ARRAY
35842: PUSH
35843: LD_INT 0
35845: PUSH
35846: LD_INT 8
35848: PUSH
35849: LD_INT 9
35851: PUSH
35852: LD_INT 10
35854: PUSH
35855: LD_INT 11
35857: PUSH
35858: LD_INT 12
35860: PUSH
35861: LD_INT 13
35863: PUSH
35864: LD_INT 16
35866: PUSH
35867: LD_INT 17
35869: PUSH
35870: LD_INT 18
35872: PUSH
35873: LD_INT 19
35875: PUSH
35876: LD_INT 20
35878: PUSH
35879: LD_INT 21
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: IN
35897: NOT
35898: OR
35899: PUSH
35900: LD_VAR 0 8
35904: PUSH
35905: LD_INT 5
35907: ARRAY
35908: NOT
35909: OR
35910: PUSH
35911: LD_VAR 0 8
35915: PUSH
35916: LD_INT 6
35918: ARRAY
35919: PUSH
35920: LD_INT 1
35922: PUSH
35923: LD_INT 2
35925: PUSH
35926: LD_INT 7
35928: PUSH
35929: LD_INT 9
35931: PUSH
35932: LD_INT 10
35934: PUSH
35935: LD_INT 11
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: IN
35946: NOT
35947: OR
35948: IFFALSE 35954
// exit ;
35950: POP
35951: POP
35952: GO 36037
// end ;
35954: GO 35625
35956: POP
35957: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35958: LD_VAR 0 9
35962: PPUSH
35963: LD_VAR 0 3
35967: PPUSH
35968: LD_VAR 0 4
35972: PPUSH
35973: LD_INT 20
35975: PPUSH
35976: CALL 27989 0 4
35980: PUSH
35981: LD_INT 4
35983: ARRAY
35984: IFFALSE 35988
// exit ;
35986: GO 36037
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35988: LD_VAR 0 2
35992: PUSH
35993: LD_INT 29
35995: PUSH
35996: LD_INT 30
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: IN
36003: PUSH
36004: LD_VAR 0 3
36008: PPUSH
36009: LD_VAR 0 4
36013: PPUSH
36014: LD_VAR 0 9
36018: PPUSH
36019: CALL_OW 440
36023: NOT
36024: AND
36025: IFFALSE 36029
// exit ;
36027: GO 36037
// result := true ;
36029: LD_ADDR_VAR 0 6
36033: PUSH
36034: LD_INT 1
36036: ST_TO_ADDR
// end ;
36037: LD_VAR 0 6
36041: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36042: LD_INT 0
36044: PPUSH
36045: PPUSH
36046: PPUSH
36047: PPUSH
36048: PPUSH
36049: PPUSH
36050: PPUSH
36051: PPUSH
36052: PPUSH
36053: PPUSH
36054: PPUSH
36055: PPUSH
36056: PPUSH
36057: PPUSH
36058: PPUSH
36059: PPUSH
36060: PPUSH
36061: PPUSH
36062: PPUSH
36063: PPUSH
36064: PPUSH
36065: PPUSH
36066: PPUSH
36067: PPUSH
36068: PPUSH
36069: PPUSH
36070: PPUSH
36071: PPUSH
36072: PPUSH
36073: PPUSH
36074: PPUSH
36075: PPUSH
36076: PPUSH
36077: PPUSH
36078: PPUSH
36079: PPUSH
36080: PPUSH
36081: PPUSH
36082: PPUSH
36083: PPUSH
36084: PPUSH
36085: PPUSH
36086: PPUSH
36087: PPUSH
36088: PPUSH
36089: PPUSH
36090: PPUSH
36091: PPUSH
36092: PPUSH
36093: PPUSH
36094: PPUSH
36095: PPUSH
36096: PPUSH
36097: PPUSH
36098: PPUSH
36099: PPUSH
36100: PPUSH
36101: PPUSH
// result = [ ] ;
36102: LD_ADDR_VAR 0 7
36106: PUSH
36107: EMPTY
36108: ST_TO_ADDR
// temp_list = [ ] ;
36109: LD_ADDR_VAR 0 9
36113: PUSH
36114: EMPTY
36115: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36116: LD_VAR 0 4
36120: PUSH
36121: LD_INT 0
36123: PUSH
36124: LD_INT 1
36126: PUSH
36127: LD_INT 2
36129: PUSH
36130: LD_INT 3
36132: PUSH
36133: LD_INT 4
36135: PUSH
36136: LD_INT 5
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: IN
36147: NOT
36148: PUSH
36149: LD_VAR 0 1
36153: PUSH
36154: LD_INT 0
36156: PUSH
36157: LD_INT 1
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: IN
36164: PUSH
36165: LD_VAR 0 5
36169: PUSH
36170: LD_INT 1
36172: PUSH
36173: LD_INT 2
36175: PUSH
36176: LD_INT 3
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: LIST
36183: IN
36184: NOT
36185: AND
36186: OR
36187: IFFALSE 36191
// exit ;
36189: GO 54582
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36191: LD_VAR 0 1
36195: PUSH
36196: LD_INT 6
36198: PUSH
36199: LD_INT 7
36201: PUSH
36202: LD_INT 8
36204: PUSH
36205: LD_INT 13
36207: PUSH
36208: LD_INT 12
36210: PUSH
36211: LD_INT 15
36213: PUSH
36214: LD_INT 11
36216: PUSH
36217: LD_INT 14
36219: PUSH
36220: LD_INT 10
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: IN
36234: IFFALSE 36244
// btype = b_lab ;
36236: LD_ADDR_VAR 0 1
36240: PUSH
36241: LD_INT 6
36243: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36244: LD_VAR 0 6
36248: PUSH
36249: LD_INT 0
36251: PUSH
36252: LD_INT 1
36254: PUSH
36255: LD_INT 2
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: LIST
36262: IN
36263: NOT
36264: PUSH
36265: LD_VAR 0 1
36269: PUSH
36270: LD_INT 0
36272: PUSH
36273: LD_INT 1
36275: PUSH
36276: LD_INT 2
36278: PUSH
36279: LD_INT 3
36281: PUSH
36282: LD_INT 6
36284: PUSH
36285: LD_INT 36
36287: PUSH
36288: LD_INT 4
36290: PUSH
36291: LD_INT 5
36293: PUSH
36294: LD_INT 31
36296: PUSH
36297: LD_INT 32
36299: PUSH
36300: LD_INT 33
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: IN
36316: NOT
36317: PUSH
36318: LD_VAR 0 6
36322: PUSH
36323: LD_INT 1
36325: EQUAL
36326: AND
36327: OR
36328: PUSH
36329: LD_VAR 0 1
36333: PUSH
36334: LD_INT 2
36336: PUSH
36337: LD_INT 3
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: IN
36344: NOT
36345: PUSH
36346: LD_VAR 0 6
36350: PUSH
36351: LD_INT 2
36353: EQUAL
36354: AND
36355: OR
36356: IFFALSE 36366
// mode = 0 ;
36358: LD_ADDR_VAR 0 6
36362: PUSH
36363: LD_INT 0
36365: ST_TO_ADDR
// case mode of 0 :
36366: LD_VAR 0 6
36370: PUSH
36371: LD_INT 0
36373: DOUBLE
36374: EQUAL
36375: IFTRUE 36379
36377: GO 47832
36379: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36380: LD_ADDR_VAR 0 11
36384: PUSH
36385: LD_INT 0
36387: PUSH
36388: LD_INT 0
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 0
36397: PUSH
36398: LD_INT 1
36400: NEG
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 1
36408: PUSH
36409: LD_INT 0
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 1
36418: PUSH
36419: LD_INT 1
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 0
36428: PUSH
36429: LD_INT 1
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 1
36438: NEG
36439: PUSH
36440: LD_INT 0
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 1
36449: NEG
36450: PUSH
36451: LD_INT 1
36453: NEG
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 1
36461: NEG
36462: PUSH
36463: LD_INT 2
36465: NEG
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 0
36473: PUSH
36474: LD_INT 2
36476: NEG
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 1
36484: PUSH
36485: LD_INT 1
36487: NEG
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 1
36495: PUSH
36496: LD_INT 2
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 0
36505: PUSH
36506: LD_INT 2
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 1
36515: NEG
36516: PUSH
36517: LD_INT 1
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: LD_INT 1
36526: PUSH
36527: LD_INT 3
36529: PUSH
36530: EMPTY
36531: LIST
36532: LIST
36533: PUSH
36534: LD_INT 0
36536: PUSH
36537: LD_INT 3
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 1
36546: NEG
36547: PUSH
36548: LD_INT 2
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36573: LD_ADDR_VAR 0 12
36577: PUSH
36578: LD_INT 0
36580: PUSH
36581: LD_INT 0
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 0
36590: PUSH
36591: LD_INT 1
36593: NEG
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 1
36601: PUSH
36602: LD_INT 0
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 1
36611: PUSH
36612: LD_INT 1
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 0
36621: PUSH
36622: LD_INT 1
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 1
36631: NEG
36632: PUSH
36633: LD_INT 0
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 1
36642: NEG
36643: PUSH
36644: LD_INT 1
36646: NEG
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 1
36654: PUSH
36655: LD_INT 1
36657: NEG
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 2
36665: PUSH
36666: LD_INT 0
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 2
36675: PUSH
36676: LD_INT 1
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 1
36685: NEG
36686: PUSH
36687: LD_INT 1
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 2
36696: NEG
36697: PUSH
36698: LD_INT 0
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 2
36707: NEG
36708: PUSH
36709: LD_INT 1
36711: NEG
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 2
36719: NEG
36720: PUSH
36721: LD_INT 1
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: PUSH
36728: LD_INT 3
36730: NEG
36731: PUSH
36732: LD_INT 0
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 3
36741: NEG
36742: PUSH
36743: LD_INT 1
36745: NEG
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36769: LD_ADDR_VAR 0 13
36773: PUSH
36774: LD_INT 0
36776: PUSH
36777: LD_INT 0
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 0
36786: PUSH
36787: LD_INT 1
36789: NEG
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 1
36797: PUSH
36798: LD_INT 0
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 1
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 0
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 1
36827: NEG
36828: PUSH
36829: LD_INT 0
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: LD_INT 1
36842: NEG
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 1
36850: NEG
36851: PUSH
36852: LD_INT 2
36854: NEG
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 2
36862: PUSH
36863: LD_INT 1
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 2
36872: PUSH
36873: LD_INT 2
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 1
36882: PUSH
36883: LD_INT 2
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 2
36892: NEG
36893: PUSH
36894: LD_INT 1
36896: NEG
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 2
36904: NEG
36905: PUSH
36906: LD_INT 2
36908: NEG
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 2
36916: NEG
36917: PUSH
36918: LD_INT 3
36920: NEG
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 3
36928: NEG
36929: PUSH
36930: LD_INT 2
36932: NEG
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 3
36940: NEG
36941: PUSH
36942: LD_INT 3
36944: NEG
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36968: LD_ADDR_VAR 0 14
36972: PUSH
36973: LD_INT 0
36975: PUSH
36976: LD_INT 0
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 0
36985: PUSH
36986: LD_INT 1
36988: NEG
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 1
36996: PUSH
36997: LD_INT 0
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 1
37006: PUSH
37007: LD_INT 1
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 0
37016: PUSH
37017: LD_INT 1
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 1
37026: NEG
37027: PUSH
37028: LD_INT 0
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 1
37037: NEG
37038: PUSH
37039: LD_INT 1
37041: NEG
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 1
37049: NEG
37050: PUSH
37051: LD_INT 2
37053: NEG
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 0
37061: PUSH
37062: LD_INT 2
37064: NEG
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: LD_INT 1
37072: PUSH
37073: LD_INT 1
37075: NEG
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 1
37083: PUSH
37084: LD_INT 2
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 0
37093: PUSH
37094: LD_INT 2
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 1
37103: NEG
37104: PUSH
37105: LD_INT 1
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 1
37114: NEG
37115: PUSH
37116: LD_INT 3
37118: NEG
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 0
37126: PUSH
37127: LD_INT 3
37129: NEG
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PUSH
37135: LD_INT 1
37137: PUSH
37138: LD_INT 2
37140: NEG
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37164: LD_ADDR_VAR 0 15
37168: PUSH
37169: LD_INT 0
37171: PUSH
37172: LD_INT 0
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 0
37181: PUSH
37182: LD_INT 1
37184: NEG
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 1
37192: PUSH
37193: LD_INT 0
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 1
37202: PUSH
37203: LD_INT 1
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 0
37212: PUSH
37213: LD_INT 1
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 1
37222: NEG
37223: PUSH
37224: LD_INT 0
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 1
37233: NEG
37234: PUSH
37235: LD_INT 1
37237: NEG
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 1
37245: PUSH
37246: LD_INT 1
37248: NEG
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 2
37256: PUSH
37257: LD_INT 0
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 2
37266: PUSH
37267: LD_INT 1
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 1
37276: NEG
37277: PUSH
37278: LD_INT 1
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 2
37287: NEG
37288: PUSH
37289: LD_INT 0
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: LD_INT 2
37298: NEG
37299: PUSH
37300: LD_INT 1
37302: NEG
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 2
37310: PUSH
37311: LD_INT 1
37313: NEG
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 3
37321: PUSH
37322: LD_INT 0
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 3
37331: PUSH
37332: LD_INT 1
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37357: LD_ADDR_VAR 0 16
37361: PUSH
37362: LD_INT 0
37364: PUSH
37365: LD_INT 0
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 0
37374: PUSH
37375: LD_INT 1
37377: NEG
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 1
37385: PUSH
37386: LD_INT 0
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 1
37395: PUSH
37396: LD_INT 1
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 0
37405: PUSH
37406: LD_INT 1
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 1
37415: NEG
37416: PUSH
37417: LD_INT 0
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 1
37426: NEG
37427: PUSH
37428: LD_INT 1
37430: NEG
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 1
37438: NEG
37439: PUSH
37440: LD_INT 2
37442: NEG
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 2
37450: PUSH
37451: LD_INT 1
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 2
37460: PUSH
37461: LD_INT 2
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 1
37470: PUSH
37471: LD_INT 2
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 2
37480: NEG
37481: PUSH
37482: LD_INT 1
37484: NEG
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 2
37492: NEG
37493: PUSH
37494: LD_INT 2
37496: NEG
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 3
37504: PUSH
37505: LD_INT 2
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 3
37514: PUSH
37515: LD_INT 3
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 2
37524: PUSH
37525: LD_INT 3
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37550: LD_ADDR_VAR 0 17
37554: PUSH
37555: LD_INT 0
37557: PUSH
37558: LD_INT 0
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 0
37567: PUSH
37568: LD_INT 1
37570: NEG
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: PUSH
37576: LD_INT 1
37578: PUSH
37579: LD_INT 0
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 1
37588: PUSH
37589: LD_INT 1
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: LD_INT 0
37598: PUSH
37599: LD_INT 1
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 1
37608: NEG
37609: PUSH
37610: LD_INT 0
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 1
37619: NEG
37620: PUSH
37621: LD_INT 1
37623: NEG
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 1
37631: NEG
37632: PUSH
37633: LD_INT 2
37635: NEG
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 0
37643: PUSH
37644: LD_INT 2
37646: NEG
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 1
37654: PUSH
37655: LD_INT 1
37657: NEG
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 2
37665: PUSH
37666: LD_INT 0
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 2
37675: PUSH
37676: LD_INT 1
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 2
37685: PUSH
37686: LD_INT 2
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 1
37695: PUSH
37696: LD_INT 2
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 0
37705: PUSH
37706: LD_INT 2
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 1
37715: NEG
37716: PUSH
37717: LD_INT 1
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 2
37726: NEG
37727: PUSH
37728: LD_INT 0
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 2
37737: NEG
37738: PUSH
37739: LD_INT 1
37741: NEG
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 2
37749: NEG
37750: PUSH
37751: LD_INT 2
37753: NEG
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: LIST
37765: LIST
37766: LIST
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37780: LD_ADDR_VAR 0 18
37784: PUSH
37785: LD_INT 0
37787: PUSH
37788: LD_INT 0
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 0
37797: PUSH
37798: LD_INT 1
37800: NEG
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 1
37808: PUSH
37809: LD_INT 0
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 1
37818: PUSH
37819: LD_INT 1
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 0
37828: PUSH
37829: LD_INT 1
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 1
37838: NEG
37839: PUSH
37840: LD_INT 0
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 1
37849: NEG
37850: PUSH
37851: LD_INT 1
37853: NEG
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 1
37861: NEG
37862: PUSH
37863: LD_INT 2
37865: NEG
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 0
37873: PUSH
37874: LD_INT 2
37876: NEG
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 1
37884: PUSH
37885: LD_INT 1
37887: NEG
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 2
37895: PUSH
37896: LD_INT 0
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 2
37905: PUSH
37906: LD_INT 1
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 2
37915: PUSH
37916: LD_INT 2
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 1
37925: PUSH
37926: LD_INT 2
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 0
37935: PUSH
37936: LD_INT 2
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 1
37945: NEG
37946: PUSH
37947: LD_INT 1
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 2
37956: NEG
37957: PUSH
37958: LD_INT 0
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 2
37967: NEG
37968: PUSH
37969: LD_INT 1
37971: NEG
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 2
37979: NEG
37980: PUSH
37981: LD_INT 2
37983: NEG
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38010: LD_ADDR_VAR 0 19
38014: PUSH
38015: LD_INT 0
38017: PUSH
38018: LD_INT 0
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 0
38027: PUSH
38028: LD_INT 1
38030: NEG
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 1
38038: PUSH
38039: LD_INT 0
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PUSH
38046: LD_INT 1
38048: PUSH
38049: LD_INT 1
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 0
38058: PUSH
38059: LD_INT 1
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 1
38068: NEG
38069: PUSH
38070: LD_INT 0
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 1
38079: NEG
38080: PUSH
38081: LD_INT 1
38083: NEG
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 1
38091: NEG
38092: PUSH
38093: LD_INT 2
38095: NEG
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 0
38103: PUSH
38104: LD_INT 2
38106: NEG
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 1
38114: PUSH
38115: LD_INT 1
38117: NEG
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 2
38125: PUSH
38126: LD_INT 0
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 2
38135: PUSH
38136: LD_INT 1
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 2
38145: PUSH
38146: LD_INT 2
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 1
38155: PUSH
38156: LD_INT 2
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 0
38165: PUSH
38166: LD_INT 2
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 1
38175: NEG
38176: PUSH
38177: LD_INT 1
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 2
38186: NEG
38187: PUSH
38188: LD_INT 0
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 2
38197: NEG
38198: PUSH
38199: LD_INT 1
38201: NEG
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 2
38209: NEG
38210: PUSH
38211: LD_INT 2
38213: NEG
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38240: LD_ADDR_VAR 0 20
38244: PUSH
38245: LD_INT 0
38247: PUSH
38248: LD_INT 0
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 0
38257: PUSH
38258: LD_INT 1
38260: NEG
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 1
38268: PUSH
38269: LD_INT 0
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 1
38278: PUSH
38279: LD_INT 1
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 0
38288: PUSH
38289: LD_INT 1
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 1
38298: NEG
38299: PUSH
38300: LD_INT 0
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 1
38309: NEG
38310: PUSH
38311: LD_INT 1
38313: NEG
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 1
38321: NEG
38322: PUSH
38323: LD_INT 2
38325: NEG
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 0
38333: PUSH
38334: LD_INT 2
38336: NEG
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 1
38344: PUSH
38345: LD_INT 1
38347: NEG
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 2
38355: PUSH
38356: LD_INT 0
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 2
38365: PUSH
38366: LD_INT 1
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 2
38375: PUSH
38376: LD_INT 2
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 1
38385: PUSH
38386: LD_INT 2
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: PUSH
38393: LD_INT 0
38395: PUSH
38396: LD_INT 2
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 1
38405: NEG
38406: PUSH
38407: LD_INT 1
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 2
38416: NEG
38417: PUSH
38418: LD_INT 0
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 2
38427: NEG
38428: PUSH
38429: LD_INT 1
38431: NEG
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 2
38439: NEG
38440: PUSH
38441: LD_INT 2
38443: NEG
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38470: LD_ADDR_VAR 0 21
38474: PUSH
38475: LD_INT 0
38477: PUSH
38478: LD_INT 0
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 0
38487: PUSH
38488: LD_INT 1
38490: NEG
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 1
38498: PUSH
38499: LD_INT 0
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 1
38508: PUSH
38509: LD_INT 1
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 0
38518: PUSH
38519: LD_INT 1
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 1
38528: NEG
38529: PUSH
38530: LD_INT 0
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 1
38539: NEG
38540: PUSH
38541: LD_INT 1
38543: NEG
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 1
38551: NEG
38552: PUSH
38553: LD_INT 2
38555: NEG
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 0
38563: PUSH
38564: LD_INT 2
38566: NEG
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 1
38574: PUSH
38575: LD_INT 1
38577: NEG
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 2
38585: PUSH
38586: LD_INT 0
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 2
38595: PUSH
38596: LD_INT 1
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 2
38605: PUSH
38606: LD_INT 2
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 1
38615: PUSH
38616: LD_INT 2
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 0
38625: PUSH
38626: LD_INT 2
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 1
38635: NEG
38636: PUSH
38637: LD_INT 1
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 2
38646: NEG
38647: PUSH
38648: LD_INT 0
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 2
38657: NEG
38658: PUSH
38659: LD_INT 1
38661: NEG
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 2
38669: NEG
38670: PUSH
38671: LD_INT 2
38673: NEG
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38700: LD_ADDR_VAR 0 22
38704: PUSH
38705: LD_INT 0
38707: PUSH
38708: LD_INT 0
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 0
38717: PUSH
38718: LD_INT 1
38720: NEG
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 1
38728: PUSH
38729: LD_INT 0
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 1
38738: PUSH
38739: LD_INT 1
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 0
38748: PUSH
38749: LD_INT 1
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 1
38758: NEG
38759: PUSH
38760: LD_INT 0
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 1
38769: NEG
38770: PUSH
38771: LD_INT 1
38773: NEG
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 1
38781: NEG
38782: PUSH
38783: LD_INT 2
38785: NEG
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 0
38793: PUSH
38794: LD_INT 2
38796: NEG
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 1
38804: PUSH
38805: LD_INT 1
38807: NEG
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 2
38815: PUSH
38816: LD_INT 0
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 2
38825: PUSH
38826: LD_INT 1
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 2
38835: PUSH
38836: LD_INT 2
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 1
38845: PUSH
38846: LD_INT 2
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 0
38855: PUSH
38856: LD_INT 2
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 1
38865: NEG
38866: PUSH
38867: LD_INT 1
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 2
38876: NEG
38877: PUSH
38878: LD_INT 0
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 2
38887: NEG
38888: PUSH
38889: LD_INT 1
38891: NEG
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 2
38899: NEG
38900: PUSH
38901: LD_INT 2
38903: NEG
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38930: LD_ADDR_VAR 0 23
38934: PUSH
38935: LD_INT 0
38937: PUSH
38938: LD_INT 0
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 0
38947: PUSH
38948: LD_INT 1
38950: NEG
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 1
38958: PUSH
38959: LD_INT 0
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 1
38968: PUSH
38969: LD_INT 1
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 0
38978: PUSH
38979: LD_INT 1
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 1
38988: NEG
38989: PUSH
38990: LD_INT 0
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 1
38999: NEG
39000: PUSH
39001: LD_INT 1
39003: NEG
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 1
39011: NEG
39012: PUSH
39013: LD_INT 2
39015: NEG
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 0
39023: PUSH
39024: LD_INT 2
39026: NEG
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 1
39034: PUSH
39035: LD_INT 1
39037: NEG
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 2
39045: PUSH
39046: LD_INT 0
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 2
39055: PUSH
39056: LD_INT 1
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 2
39065: PUSH
39066: LD_INT 2
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 1
39075: PUSH
39076: LD_INT 2
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 0
39085: PUSH
39086: LD_INT 2
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 1
39095: NEG
39096: PUSH
39097: LD_INT 1
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 2
39106: NEG
39107: PUSH
39108: LD_INT 0
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 2
39117: NEG
39118: PUSH
39119: LD_INT 1
39121: NEG
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 2
39129: NEG
39130: PUSH
39131: LD_INT 2
39133: NEG
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 2
39141: NEG
39142: PUSH
39143: LD_INT 3
39145: NEG
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 1
39153: NEG
39154: PUSH
39155: LD_INT 3
39157: NEG
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 1
39165: PUSH
39166: LD_INT 2
39168: NEG
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 2
39176: PUSH
39177: LD_INT 1
39179: NEG
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39210: LD_ADDR_VAR 0 24
39214: PUSH
39215: LD_INT 0
39217: PUSH
39218: LD_INT 0
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 0
39227: PUSH
39228: LD_INT 1
39230: NEG
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 1
39238: PUSH
39239: LD_INT 0
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 1
39248: PUSH
39249: LD_INT 1
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 0
39258: PUSH
39259: LD_INT 1
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 1
39268: NEG
39269: PUSH
39270: LD_INT 0
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 1
39279: NEG
39280: PUSH
39281: LD_INT 1
39283: NEG
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 1
39291: NEG
39292: PUSH
39293: LD_INT 2
39295: NEG
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 0
39303: PUSH
39304: LD_INT 2
39306: NEG
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 1
39314: PUSH
39315: LD_INT 1
39317: NEG
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 2
39325: PUSH
39326: LD_INT 0
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 2
39335: PUSH
39336: LD_INT 1
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 2
39345: PUSH
39346: LD_INT 2
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 1
39355: PUSH
39356: LD_INT 2
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 0
39365: PUSH
39366: LD_INT 2
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 1
39375: NEG
39376: PUSH
39377: LD_INT 1
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 2
39386: NEG
39387: PUSH
39388: LD_INT 0
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 2
39397: NEG
39398: PUSH
39399: LD_INT 1
39401: NEG
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 2
39409: NEG
39410: PUSH
39411: LD_INT 2
39413: NEG
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 1
39421: PUSH
39422: LD_INT 2
39424: NEG
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 2
39432: PUSH
39433: LD_INT 1
39435: NEG
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 3
39443: PUSH
39444: LD_INT 1
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 3
39453: PUSH
39454: LD_INT 2
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39486: LD_ADDR_VAR 0 25
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: LD_INT 0
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: LD_INT 1
39506: NEG
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: LD_INT 0
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 1
39524: PUSH
39525: LD_INT 1
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 0
39534: PUSH
39535: LD_INT 1
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 1
39544: NEG
39545: PUSH
39546: LD_INT 0
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 1
39555: NEG
39556: PUSH
39557: LD_INT 1
39559: NEG
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 1
39567: NEG
39568: PUSH
39569: LD_INT 2
39571: NEG
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 0
39579: PUSH
39580: LD_INT 2
39582: NEG
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 1
39590: PUSH
39591: LD_INT 1
39593: NEG
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PUSH
39599: LD_INT 2
39601: PUSH
39602: LD_INT 0
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 2
39611: PUSH
39612: LD_INT 1
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 2
39621: PUSH
39622: LD_INT 2
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 1
39631: PUSH
39632: LD_INT 2
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 0
39641: PUSH
39642: LD_INT 2
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 1
39651: NEG
39652: PUSH
39653: LD_INT 1
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 2
39662: NEG
39663: PUSH
39664: LD_INT 0
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 2
39673: NEG
39674: PUSH
39675: LD_INT 1
39677: NEG
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 2
39685: NEG
39686: PUSH
39687: LD_INT 2
39689: NEG
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 3
39697: PUSH
39698: LD_INT 1
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 3
39707: PUSH
39708: LD_INT 2
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 2
39717: PUSH
39718: LD_INT 3
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 1
39727: PUSH
39728: LD_INT 3
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39760: LD_ADDR_VAR 0 26
39764: PUSH
39765: LD_INT 0
39767: PUSH
39768: LD_INT 0
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 0
39777: PUSH
39778: LD_INT 1
39780: NEG
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 1
39788: PUSH
39789: LD_INT 0
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 1
39798: PUSH
39799: LD_INT 1
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 0
39808: PUSH
39809: LD_INT 1
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 1
39818: NEG
39819: PUSH
39820: LD_INT 0
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 1
39829: NEG
39830: PUSH
39831: LD_INT 1
39833: NEG
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 1
39841: NEG
39842: PUSH
39843: LD_INT 2
39845: NEG
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 0
39853: PUSH
39854: LD_INT 2
39856: NEG
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 1
39864: PUSH
39865: LD_INT 1
39867: NEG
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 2
39875: PUSH
39876: LD_INT 0
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 2
39885: PUSH
39886: LD_INT 1
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 2
39895: PUSH
39896: LD_INT 2
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 1
39905: PUSH
39906: LD_INT 2
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 0
39915: PUSH
39916: LD_INT 2
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 1
39925: NEG
39926: PUSH
39927: LD_INT 1
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 2
39936: NEG
39937: PUSH
39938: LD_INT 0
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 2
39947: NEG
39948: PUSH
39949: LD_INT 1
39951: NEG
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 2
39959: NEG
39960: PUSH
39961: LD_INT 2
39963: NEG
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 2
39971: PUSH
39972: LD_INT 3
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 1
39981: PUSH
39982: LD_INT 3
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 1
39991: NEG
39992: PUSH
39993: LD_INT 2
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 2
40002: NEG
40003: PUSH
40004: LD_INT 1
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40036: LD_ADDR_VAR 0 27
40040: PUSH
40041: LD_INT 0
40043: PUSH
40044: LD_INT 0
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 0
40053: PUSH
40054: LD_INT 1
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 1
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 1
40074: PUSH
40075: LD_INT 1
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 0
40084: PUSH
40085: LD_INT 1
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 1
40094: NEG
40095: PUSH
40096: LD_INT 0
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 1
40105: NEG
40106: PUSH
40107: LD_INT 1
40109: NEG
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 1
40117: NEG
40118: PUSH
40119: LD_INT 2
40121: NEG
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 0
40129: PUSH
40130: LD_INT 2
40132: NEG
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 1
40140: PUSH
40141: LD_INT 1
40143: NEG
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 2
40151: PUSH
40152: LD_INT 0
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 2
40161: PUSH
40162: LD_INT 1
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 2
40171: PUSH
40172: LD_INT 2
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 1
40181: PUSH
40182: LD_INT 2
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 0
40191: PUSH
40192: LD_INT 2
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 1
40201: NEG
40202: PUSH
40203: LD_INT 1
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 2
40212: NEG
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 2
40223: NEG
40224: PUSH
40225: LD_INT 1
40227: NEG
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 2
40235: NEG
40236: PUSH
40237: LD_INT 2
40239: NEG
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 1
40247: NEG
40248: PUSH
40249: LD_INT 2
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 2
40258: NEG
40259: PUSH
40260: LD_INT 1
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 3
40269: NEG
40270: PUSH
40271: LD_INT 1
40273: NEG
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 3
40281: NEG
40282: PUSH
40283: LD_INT 2
40285: NEG
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40316: LD_ADDR_VAR 0 28
40320: PUSH
40321: LD_INT 0
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 0
40333: PUSH
40334: LD_INT 1
40336: NEG
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 1
40344: PUSH
40345: LD_INT 0
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 1
40354: PUSH
40355: LD_INT 1
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 0
40364: PUSH
40365: LD_INT 1
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 1
40374: NEG
40375: PUSH
40376: LD_INT 0
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 1
40385: NEG
40386: PUSH
40387: LD_INT 1
40389: NEG
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 1
40397: NEG
40398: PUSH
40399: LD_INT 2
40401: NEG
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: LD_INT 2
40412: NEG
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 1
40420: PUSH
40421: LD_INT 1
40423: NEG
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 2
40431: PUSH
40432: LD_INT 0
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 2
40441: PUSH
40442: LD_INT 1
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 2
40451: PUSH
40452: LD_INT 2
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 1
40461: PUSH
40462: LD_INT 2
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: LD_INT 2
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 1
40481: NEG
40482: PUSH
40483: LD_INT 1
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 2
40492: NEG
40493: PUSH
40494: LD_INT 0
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 2
40503: NEG
40504: PUSH
40505: LD_INT 1
40507: NEG
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 2
40515: NEG
40516: PUSH
40517: LD_INT 2
40519: NEG
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 2
40527: NEG
40528: PUSH
40529: LD_INT 3
40531: NEG
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 1
40539: NEG
40540: PUSH
40541: LD_INT 3
40543: NEG
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 3
40551: NEG
40552: PUSH
40553: LD_INT 1
40555: NEG
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 3
40563: NEG
40564: PUSH
40565: LD_INT 2
40567: NEG
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40598: LD_ADDR_VAR 0 29
40602: PUSH
40603: LD_INT 0
40605: PUSH
40606: LD_INT 0
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 0
40615: PUSH
40616: LD_INT 1
40618: NEG
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 1
40626: PUSH
40627: LD_INT 0
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 1
40636: PUSH
40637: LD_INT 1
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 0
40646: PUSH
40647: LD_INT 1
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 1
40656: NEG
40657: PUSH
40658: LD_INT 0
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 1
40667: NEG
40668: PUSH
40669: LD_INT 1
40671: NEG
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 1
40679: NEG
40680: PUSH
40681: LD_INT 2
40683: NEG
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 0
40691: PUSH
40692: LD_INT 2
40694: NEG
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 1
40702: PUSH
40703: LD_INT 1
40705: NEG
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 2
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 2
40723: PUSH
40724: LD_INT 1
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 1
40733: PUSH
40734: LD_INT 2
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 0
40743: PUSH
40744: LD_INT 2
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 1
40753: NEG
40754: PUSH
40755: LD_INT 1
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 2
40764: NEG
40765: PUSH
40766: LD_INT 1
40768: NEG
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 2
40776: NEG
40777: PUSH
40778: LD_INT 2
40780: NEG
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 2
40788: NEG
40789: PUSH
40790: LD_INT 3
40792: NEG
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 2
40800: PUSH
40801: LD_INT 1
40803: NEG
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 3
40811: PUSH
40812: LD_INT 1
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 1
40821: PUSH
40822: LD_INT 3
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 1
40831: NEG
40832: PUSH
40833: LD_INT 2
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 3
40842: NEG
40843: PUSH
40844: LD_INT 2
40846: NEG
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40877: LD_ADDR_VAR 0 30
40881: PUSH
40882: LD_INT 0
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: LD_INT 1
40897: NEG
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 1
40915: PUSH
40916: LD_INT 1
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 0
40925: PUSH
40926: LD_INT 1
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 1
40935: NEG
40936: PUSH
40937: LD_INT 0
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 1
40946: NEG
40947: PUSH
40948: LD_INT 1
40950: NEG
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 1
40958: NEG
40959: PUSH
40960: LD_INT 2
40962: NEG
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 0
40970: PUSH
40971: LD_INT 2
40973: NEG
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: LD_INT 1
40984: NEG
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 2
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 2
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 2
41012: PUSH
41013: LD_INT 2
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 1
41022: PUSH
41023: LD_INT 2
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 1
41032: NEG
41033: PUSH
41034: LD_INT 1
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 2
41043: NEG
41044: PUSH
41045: LD_INT 0
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 2
41054: NEG
41055: PUSH
41056: LD_INT 1
41058: NEG
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 1
41066: NEG
41067: PUSH
41068: LD_INT 3
41070: NEG
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 1
41078: PUSH
41079: LD_INT 2
41081: NEG
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 3
41089: PUSH
41090: LD_INT 2
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 2
41099: PUSH
41100: LD_INT 3
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: PUSH
41107: LD_INT 2
41109: NEG
41110: PUSH
41111: LD_INT 1
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 3
41120: NEG
41121: PUSH
41122: LD_INT 1
41124: NEG
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41155: LD_ADDR_VAR 0 31
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: LD_INT 0
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 0
41172: PUSH
41173: LD_INT 1
41175: NEG
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 1
41183: PUSH
41184: LD_INT 0
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 1
41193: PUSH
41194: LD_INT 1
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 0
41203: PUSH
41204: LD_INT 1
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: LD_INT 0
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 1
41236: NEG
41237: PUSH
41238: LD_INT 2
41240: NEG
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 1
41248: PUSH
41249: LD_INT 1
41251: NEG
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 2
41259: PUSH
41260: LD_INT 0
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 2
41269: PUSH
41270: LD_INT 1
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 2
41279: PUSH
41280: LD_INT 2
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 1
41289: PUSH
41290: LD_INT 2
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 0
41299: PUSH
41300: LD_INT 2
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 1
41309: NEG
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 2
41320: NEG
41321: PUSH
41322: LD_INT 1
41324: NEG
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 2
41332: NEG
41333: PUSH
41334: LD_INT 2
41336: NEG
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 2
41344: NEG
41345: PUSH
41346: LD_INT 3
41348: NEG
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 2
41356: PUSH
41357: LD_INT 1
41359: NEG
41360: PUSH
41361: EMPTY
41362: LIST
41363: LIST
41364: PUSH
41365: LD_INT 3
41367: PUSH
41368: LD_INT 1
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 1
41377: PUSH
41378: LD_INT 3
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 1
41387: NEG
41388: PUSH
41389: LD_INT 2
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 3
41398: NEG
41399: PUSH
41400: LD_INT 2
41402: NEG
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41433: LD_ADDR_VAR 0 32
41437: PUSH
41438: LD_INT 0
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 0
41450: PUSH
41451: LD_INT 1
41453: NEG
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 1
41461: PUSH
41462: LD_INT 0
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 1
41471: PUSH
41472: LD_INT 1
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 0
41481: PUSH
41482: LD_INT 1
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 1
41491: NEG
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 1
41502: NEG
41503: PUSH
41504: LD_INT 1
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 1
41514: NEG
41515: PUSH
41516: LD_INT 2
41518: NEG
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 0
41526: PUSH
41527: LD_INT 2
41529: NEG
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 1
41537: PUSH
41538: LD_INT 1
41540: NEG
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 2
41548: PUSH
41549: LD_INT 1
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 2
41558: PUSH
41559: LD_INT 2
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 1
41568: PUSH
41569: LD_INT 2
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 0
41578: PUSH
41579: LD_INT 2
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 1
41588: NEG
41589: PUSH
41590: LD_INT 1
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 2
41599: NEG
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 2
41610: NEG
41611: PUSH
41612: LD_INT 1
41614: NEG
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 1
41622: NEG
41623: PUSH
41624: LD_INT 3
41626: NEG
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 1
41634: PUSH
41635: LD_INT 2
41637: NEG
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 3
41645: PUSH
41646: LD_INT 2
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 2
41655: PUSH
41656: LD_INT 3
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 2
41665: NEG
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 3
41676: NEG
41677: PUSH
41678: LD_INT 1
41680: NEG
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41711: LD_ADDR_VAR 0 33
41715: PUSH
41716: LD_INT 0
41718: PUSH
41719: LD_INT 0
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 0
41728: PUSH
41729: LD_INT 1
41731: NEG
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 1
41739: PUSH
41740: LD_INT 0
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 1
41749: PUSH
41750: LD_INT 1
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 0
41759: PUSH
41760: LD_INT 1
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 1
41769: NEG
41770: PUSH
41771: LD_INT 0
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 1
41780: NEG
41781: PUSH
41782: LD_INT 1
41784: NEG
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: NEG
41793: PUSH
41794: LD_INT 2
41796: NEG
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: PUSH
41805: LD_INT 1
41807: NEG
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 2
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 2
41825: PUSH
41826: LD_INT 1
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 1
41835: PUSH
41836: LD_INT 2
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 0
41845: PUSH
41846: LD_INT 2
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 1
41855: NEG
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 2
41866: NEG
41867: PUSH
41868: LD_INT 0
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 2
41877: NEG
41878: PUSH
41879: LD_INT 1
41881: NEG
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 2
41889: NEG
41890: PUSH
41891: LD_INT 2
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 2
41901: NEG
41902: PUSH
41903: LD_INT 3
41905: NEG
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 2
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 3
41924: PUSH
41925: LD_INT 1
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 1
41934: PUSH
41935: LD_INT 3
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 1
41944: NEG
41945: PUSH
41946: LD_INT 2
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 3
41955: NEG
41956: PUSH
41957: LD_INT 2
41959: NEG
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41990: LD_ADDR_VAR 0 34
41994: PUSH
41995: LD_INT 0
41997: PUSH
41998: LD_INT 0
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 0
42007: PUSH
42008: LD_INT 1
42010: NEG
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 1
42018: PUSH
42019: LD_INT 0
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 1
42028: PUSH
42029: LD_INT 1
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 0
42038: PUSH
42039: LD_INT 1
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 1
42048: NEG
42049: PUSH
42050: LD_INT 0
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 1
42059: NEG
42060: PUSH
42061: LD_INT 1
42063: NEG
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 1
42071: NEG
42072: PUSH
42073: LD_INT 2
42075: NEG
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 0
42083: PUSH
42084: LD_INT 2
42086: NEG
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 1
42094: PUSH
42095: LD_INT 1
42097: NEG
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 2
42105: PUSH
42106: LD_INT 1
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 2
42115: PUSH
42116: LD_INT 2
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 1
42125: PUSH
42126: LD_INT 2
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 1
42135: NEG
42136: PUSH
42137: LD_INT 1
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 2
42146: NEG
42147: PUSH
42148: LD_INT 0
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 2
42157: NEG
42158: PUSH
42159: LD_INT 1
42161: NEG
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 2
42169: NEG
42170: PUSH
42171: LD_INT 2
42173: NEG
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 1
42181: NEG
42182: PUSH
42183: LD_INT 3
42185: NEG
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: LD_INT 2
42196: NEG
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 3
42204: PUSH
42205: LD_INT 2
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 2
42214: PUSH
42215: LD_INT 3
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 2
42224: NEG
42225: PUSH
42226: LD_INT 1
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 3
42235: NEG
42236: PUSH
42237: LD_INT 1
42239: NEG
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42270: LD_ADDR_VAR 0 35
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: LD_INT 0
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: LD_INT 1
42290: NEG
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 1
42298: PUSH
42299: LD_INT 0
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 1
42308: PUSH
42309: LD_INT 1
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 0
42318: PUSH
42319: LD_INT 1
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 1
42328: NEG
42329: PUSH
42330: LD_INT 0
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: LD_INT 1
42343: NEG
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 2
42351: PUSH
42352: LD_INT 1
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 2
42361: NEG
42362: PUSH
42363: LD_INT 1
42365: NEG
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42382: LD_ADDR_VAR 0 36
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: LD_INT 0
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: LD_INT 1
42402: NEG
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 1
42410: PUSH
42411: LD_INT 0
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 1
42420: PUSH
42421: LD_INT 1
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: LD_INT 1
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 1
42440: NEG
42441: PUSH
42442: LD_INT 0
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 1
42451: NEG
42452: PUSH
42453: LD_INT 1
42455: NEG
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 1
42463: NEG
42464: PUSH
42465: LD_INT 2
42467: NEG
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 1
42475: PUSH
42476: LD_INT 2
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42494: LD_ADDR_VAR 0 37
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: LD_INT 0
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 0
42511: PUSH
42512: LD_INT 1
42514: NEG
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 1
42522: PUSH
42523: LD_INT 0
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 1
42532: PUSH
42533: LD_INT 1
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 0
42542: PUSH
42543: LD_INT 1
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 1
42552: NEG
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: LD_INT 1
42567: NEG
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 1
42575: PUSH
42576: LD_INT 1
42578: NEG
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 1
42586: NEG
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42606: LD_ADDR_VAR 0 38
42610: PUSH
42611: LD_INT 0
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 0
42623: PUSH
42624: LD_INT 1
42626: NEG
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 1
42634: PUSH
42635: LD_INT 0
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 1
42644: PUSH
42645: LD_INT 1
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 0
42654: PUSH
42655: LD_INT 1
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 1
42664: NEG
42665: PUSH
42666: LD_INT 0
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 1
42675: NEG
42676: PUSH
42677: LD_INT 1
42679: NEG
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 2
42687: PUSH
42688: LD_INT 1
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 2
42697: NEG
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42718: LD_ADDR_VAR 0 39
42722: PUSH
42723: LD_INT 0
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 0
42735: PUSH
42736: LD_INT 1
42738: NEG
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 1
42746: PUSH
42747: LD_INT 0
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 1
42756: PUSH
42757: LD_INT 1
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: LD_INT 1
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 1
42776: NEG
42777: PUSH
42778: LD_INT 0
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 1
42787: NEG
42788: PUSH
42789: LD_INT 1
42791: NEG
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 1
42799: NEG
42800: PUSH
42801: LD_INT 2
42803: NEG
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 1
42811: PUSH
42812: LD_INT 2
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42830: LD_ADDR_VAR 0 40
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 0
42847: PUSH
42848: LD_INT 1
42850: NEG
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 1
42858: PUSH
42859: LD_INT 0
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 1
42868: PUSH
42869: LD_INT 1
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 0
42878: PUSH
42879: LD_INT 1
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 1
42888: NEG
42889: PUSH
42890: LD_INT 0
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 1
42899: NEG
42900: PUSH
42901: LD_INT 1
42903: NEG
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 1
42911: PUSH
42912: LD_INT 1
42914: NEG
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 1
42922: NEG
42923: PUSH
42924: LD_INT 1
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42942: LD_ADDR_VAR 0 41
42946: PUSH
42947: LD_INT 0
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 0
42959: PUSH
42960: LD_INT 1
42962: NEG
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 1
42980: PUSH
42981: LD_INT 1
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 0
42990: PUSH
42991: LD_INT 1
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 1
43000: NEG
43001: PUSH
43002: LD_INT 0
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 1
43011: NEG
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 1
43023: NEG
43024: PUSH
43025: LD_INT 2
43027: NEG
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: LD_INT 1
43038: NEG
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 2
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 2
43056: PUSH
43057: LD_INT 1
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 2
43066: PUSH
43067: LD_INT 2
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 1
43076: PUSH
43077: LD_INT 2
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 1
43086: NEG
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 2
43097: NEG
43098: PUSH
43099: LD_INT 0
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 2
43108: NEG
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 2
43120: NEG
43121: PUSH
43122: LD_INT 2
43124: NEG
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 2
43132: NEG
43133: PUSH
43134: LD_INT 3
43136: NEG
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 2
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 3
43155: PUSH
43156: LD_INT 0
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 3
43165: PUSH
43166: LD_INT 1
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 3
43175: PUSH
43176: LD_INT 2
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 3
43185: PUSH
43186: LD_INT 3
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 2
43195: PUSH
43196: LD_INT 3
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 2
43205: NEG
43206: PUSH
43207: LD_INT 1
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 3
43216: NEG
43217: PUSH
43218: LD_INT 0
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 3
43227: NEG
43228: PUSH
43229: LD_INT 1
43231: NEG
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 3
43239: NEG
43240: PUSH
43241: LD_INT 2
43243: NEG
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 3
43251: NEG
43252: PUSH
43253: LD_INT 3
43255: NEG
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43292: LD_ADDR_VAR 0 42
43296: PUSH
43297: LD_INT 0
43299: PUSH
43300: LD_INT 0
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 0
43309: PUSH
43310: LD_INT 1
43312: NEG
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 1
43320: PUSH
43321: LD_INT 0
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 1
43330: PUSH
43331: LD_INT 1
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 0
43340: PUSH
43341: LD_INT 1
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: NEG
43351: PUSH
43352: LD_INT 0
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 1
43361: NEG
43362: PUSH
43363: LD_INT 1
43365: NEG
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 1
43373: NEG
43374: PUSH
43375: LD_INT 2
43377: NEG
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 0
43385: PUSH
43386: LD_INT 2
43388: NEG
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 1
43396: PUSH
43397: LD_INT 1
43399: NEG
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 2
43407: PUSH
43408: LD_INT 1
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 2
43417: PUSH
43418: LD_INT 2
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 1
43427: PUSH
43428: LD_INT 2
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 0
43437: PUSH
43438: LD_INT 2
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 1
43447: NEG
43448: PUSH
43449: LD_INT 1
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 2
43458: NEG
43459: PUSH
43460: LD_INT 1
43462: NEG
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 2
43470: NEG
43471: PUSH
43472: LD_INT 2
43474: NEG
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 2
43482: NEG
43483: PUSH
43484: LD_INT 3
43486: NEG
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 1
43494: NEG
43495: PUSH
43496: LD_INT 3
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: LD_INT 3
43509: NEG
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: LD_INT 2
43520: NEG
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 3
43528: PUSH
43529: LD_INT 2
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 3
43538: PUSH
43539: LD_INT 3
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 2
43548: PUSH
43549: LD_INT 3
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: LD_INT 3
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 0
43568: PUSH
43569: LD_INT 3
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 1
43578: NEG
43579: PUSH
43580: LD_INT 2
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 3
43589: NEG
43590: PUSH
43591: LD_INT 2
43593: NEG
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 3
43601: NEG
43602: PUSH
43603: LD_INT 3
43605: NEG
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43642: LD_ADDR_VAR 0 43
43646: PUSH
43647: LD_INT 0
43649: PUSH
43650: LD_INT 0
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 0
43659: PUSH
43660: LD_INT 1
43662: NEG
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 1
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 1
43680: PUSH
43681: LD_INT 1
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 0
43690: PUSH
43691: LD_INT 1
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 1
43700: NEG
43701: PUSH
43702: LD_INT 0
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 1
43711: NEG
43712: PUSH
43713: LD_INT 1
43715: NEG
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: PUSH
43725: LD_INT 2
43727: NEG
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 0
43735: PUSH
43736: LD_INT 2
43738: NEG
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 1
43746: PUSH
43747: LD_INT 1
43749: NEG
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 2
43757: PUSH
43758: LD_INT 0
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 2
43767: PUSH
43768: LD_INT 1
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 1
43777: PUSH
43778: LD_INT 2
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 0
43787: PUSH
43788: LD_INT 2
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 1
43797: NEG
43798: PUSH
43799: LD_INT 1
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 2
43808: NEG
43809: PUSH
43810: LD_INT 0
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 2
43819: NEG
43820: PUSH
43821: LD_INT 1
43823: NEG
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 1
43831: NEG
43832: PUSH
43833: LD_INT 3
43835: NEG
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 0
43843: PUSH
43844: LD_INT 3
43846: NEG
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 1
43854: PUSH
43855: LD_INT 2
43857: NEG
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 2
43865: PUSH
43866: LD_INT 1
43868: NEG
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 3
43876: PUSH
43877: LD_INT 0
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 3
43886: PUSH
43887: LD_INT 1
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: LD_INT 3
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: LD_INT 3
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: LD_INT 2
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 2
43927: NEG
43928: PUSH
43929: LD_INT 1
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 3
43938: NEG
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 3
43949: NEG
43950: PUSH
43951: LD_INT 1
43953: NEG
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43990: LD_ADDR_VAR 0 44
43994: PUSH
43995: LD_INT 0
43997: PUSH
43998: LD_INT 0
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: LD_INT 1
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: LD_INT 0
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: LD_INT 1
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 0
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 1
44048: NEG
44049: PUSH
44050: LD_INT 0
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 1
44059: NEG
44060: PUSH
44061: LD_INT 1
44063: NEG
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: LD_INT 2
44075: NEG
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: LD_INT 1
44086: NEG
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 2
44094: PUSH
44095: LD_INT 0
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 2
44104: PUSH
44105: LD_INT 1
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 2
44114: PUSH
44115: LD_INT 2
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 1
44124: PUSH
44125: LD_INT 2
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 1
44134: NEG
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 2
44145: NEG
44146: PUSH
44147: LD_INT 0
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 2
44156: NEG
44157: PUSH
44158: LD_INT 1
44160: NEG
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 2
44168: NEG
44169: PUSH
44170: LD_INT 2
44172: NEG
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 2
44180: NEG
44181: PUSH
44182: LD_INT 3
44184: NEG
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 2
44192: PUSH
44193: LD_INT 1
44195: NEG
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 3
44203: PUSH
44204: LD_INT 0
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 3
44213: PUSH
44214: LD_INT 1
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 3
44223: PUSH
44224: LD_INT 2
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 3
44233: PUSH
44234: LD_INT 3
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 2
44243: PUSH
44244: LD_INT 3
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 2
44253: NEG
44254: PUSH
44255: LD_INT 1
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 3
44264: NEG
44265: PUSH
44266: LD_INT 0
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 3
44275: NEG
44276: PUSH
44277: LD_INT 1
44279: NEG
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 3
44287: NEG
44288: PUSH
44289: LD_INT 2
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 3
44299: NEG
44300: PUSH
44301: LD_INT 3
44303: NEG
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44340: LD_ADDR_VAR 0 45
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: LD_INT 0
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 0
44357: PUSH
44358: LD_INT 1
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: PUSH
44369: LD_INT 0
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 1
44378: PUSH
44379: LD_INT 1
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 1
44398: NEG
44399: PUSH
44400: LD_INT 0
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 1
44409: NEG
44410: PUSH
44411: LD_INT 1
44413: NEG
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 1
44421: NEG
44422: PUSH
44423: LD_INT 2
44425: NEG
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: LD_INT 2
44436: NEG
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 1
44444: PUSH
44445: LD_INT 1
44447: NEG
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 2
44455: PUSH
44456: LD_INT 1
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 2
44465: PUSH
44466: LD_INT 2
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: LD_INT 2
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 0
44485: PUSH
44486: LD_INT 2
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: NEG
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 2
44506: NEG
44507: PUSH
44508: LD_INT 1
44510: NEG
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 2
44518: NEG
44519: PUSH
44520: LD_INT 2
44522: NEG
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 2
44530: NEG
44531: PUSH
44532: LD_INT 3
44534: NEG
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: NEG
44543: PUSH
44544: LD_INT 3
44546: NEG
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 0
44554: PUSH
44555: LD_INT 3
44557: NEG
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: LD_INT 2
44568: NEG
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 3
44576: PUSH
44577: LD_INT 2
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 3
44586: PUSH
44587: LD_INT 3
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 2
44596: PUSH
44597: LD_INT 3
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 1
44606: PUSH
44607: LD_INT 3
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: LD_INT 3
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: LD_INT 2
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 3
44637: NEG
44638: PUSH
44639: LD_INT 2
44641: NEG
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 3
44649: NEG
44650: PUSH
44651: LD_INT 3
44653: NEG
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44690: LD_ADDR_VAR 0 46
44694: PUSH
44695: LD_INT 0
44697: PUSH
44698: LD_INT 0
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: LD_INT 1
44710: NEG
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 0
44738: PUSH
44739: LD_INT 1
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 1
44748: NEG
44749: PUSH
44750: LD_INT 0
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: LD_INT 1
44763: NEG
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 1
44771: NEG
44772: PUSH
44773: LD_INT 2
44775: NEG
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: LD_INT 2
44786: NEG
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 1
44794: PUSH
44795: LD_INT 1
44797: NEG
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 2
44805: PUSH
44806: LD_INT 0
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 2
44815: PUSH
44816: LD_INT 1
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 1
44825: PUSH
44826: LD_INT 2
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: LD_INT 2
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 2
44856: NEG
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 2
44867: NEG
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: NEG
44880: PUSH
44881: LD_INT 3
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: LD_INT 3
44894: NEG
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: LD_INT 2
44905: NEG
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 2
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 3
44924: PUSH
44925: LD_INT 0
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 3
44934: PUSH
44935: LD_INT 1
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: LD_INT 3
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 0
44954: PUSH
44955: LD_INT 3
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 1
44964: NEG
44965: PUSH
44966: LD_INT 2
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 2
44975: NEG
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 3
44986: NEG
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 3
44997: NEG
44998: PUSH
44999: LD_INT 1
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: LIST
45037: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45038: LD_ADDR_VAR 0 47
45042: PUSH
45043: LD_INT 0
45045: PUSH
45046: LD_INT 0
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 0
45055: PUSH
45056: LD_INT 1
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 1
45066: PUSH
45067: LD_INT 0
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 1
45076: PUSH
45077: LD_INT 1
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 0
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: NEG
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: NEG
45108: PUSH
45109: LD_INT 1
45111: NEG
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 1
45119: NEG
45120: PUSH
45121: LD_INT 2
45123: NEG
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: LD_INT 2
45134: NEG
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: PUSH
45143: LD_INT 1
45145: NEG
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 2
45153: NEG
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 2
45165: NEG
45166: PUSH
45167: LD_INT 2
45169: NEG
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45189: LD_ADDR_VAR 0 48
45193: PUSH
45194: LD_INT 0
45196: PUSH
45197: LD_INT 0
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: LD_INT 1
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: LD_INT 0
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 1
45227: PUSH
45228: LD_INT 1
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 0
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 1
45247: NEG
45248: PUSH
45249: LD_INT 0
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 1
45258: NEG
45259: PUSH
45260: LD_INT 1
45262: NEG
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 1
45270: NEG
45271: PUSH
45272: LD_INT 2
45274: NEG
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: LD_INT 2
45285: NEG
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: LD_INT 1
45296: NEG
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 2
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 2
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45336: LD_ADDR_VAR 0 49
45340: PUSH
45341: LD_INT 0
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 1
45364: PUSH
45365: LD_INT 0
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 1
45394: NEG
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 1
45405: NEG
45406: PUSH
45407: LD_INT 1
45409: NEG
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 1
45417: PUSH
45418: LD_INT 1
45420: NEG
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 2
45428: PUSH
45429: LD_INT 0
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 2
45438: PUSH
45439: LD_INT 1
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 2
45448: PUSH
45449: LD_INT 2
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 1
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45480: LD_ADDR_VAR 0 50
45484: PUSH
45485: LD_INT 0
45487: PUSH
45488: LD_INT 0
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 0
45497: PUSH
45498: LD_INT 1
45500: NEG
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 1
45508: PUSH
45509: LD_INT 0
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 1
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 0
45528: PUSH
45529: LD_INT 1
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: NEG
45539: PUSH
45540: LD_INT 0
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 1
45549: NEG
45550: PUSH
45551: LD_INT 1
45553: NEG
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 2
45571: PUSH
45572: LD_INT 2
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 1
45581: PUSH
45582: LD_INT 2
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: LD_INT 2
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45624: LD_ADDR_VAR 0 51
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: LD_INT 0
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: LD_INT 1
45644: NEG
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 1
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: LD_INT 1
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 0
45672: PUSH
45673: LD_INT 1
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 1
45682: NEG
45683: PUSH
45684: LD_INT 0
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 1
45705: PUSH
45706: LD_INT 2
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 0
45715: PUSH
45716: LD_INT 2
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 1
45725: NEG
45726: PUSH
45727: LD_INT 1
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 2
45736: NEG
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 2
45747: NEG
45748: PUSH
45749: LD_INT 1
45751: NEG
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45771: LD_ADDR_VAR 0 52
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 0
45788: PUSH
45789: LD_INT 1
45791: NEG
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 1
45799: PUSH
45800: LD_INT 0
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: LD_INT 1
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 1
45829: NEG
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 1
45840: NEG
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 1
45852: NEG
45853: PUSH
45854: LD_INT 2
45856: NEG
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 1
45864: NEG
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 2
45875: NEG
45876: PUSH
45877: LD_INT 0
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 2
45886: NEG
45887: PUSH
45888: LD_INT 1
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 2
45898: NEG
45899: PUSH
45900: LD_INT 2
45902: NEG
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45922: LD_ADDR_VAR 0 53
45926: PUSH
45927: LD_INT 0
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 0
45939: PUSH
45940: LD_INT 1
45942: NEG
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: LD_INT 0
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: LD_INT 1
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 0
45970: PUSH
45971: LD_INT 1
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: NEG
45981: PUSH
45982: LD_INT 0
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: NEG
45992: PUSH
45993: LD_INT 1
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 1
46003: NEG
46004: PUSH
46005: LD_INT 2
46007: NEG
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: LD_INT 2
46018: NEG
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: LD_INT 1
46029: NEG
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 2
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 2
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 2
46057: PUSH
46058: LD_INT 2
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: LD_INT 2
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: LD_INT 2
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: NEG
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 2
46098: NEG
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 2
46109: NEG
46110: PUSH
46111: LD_INT 1
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 2
46121: NEG
46122: PUSH
46123: LD_INT 2
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46152: LD_ADDR_VAR 0 54
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 0
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 1
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 1
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 0
46200: PUSH
46201: LD_INT 1
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 1
46221: NEG
46222: PUSH
46223: LD_INT 1
46225: NEG
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: PUSH
46231: LD_INT 1
46233: NEG
46234: PUSH
46235: LD_INT 2
46237: NEG
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: LD_INT 2
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 1
46256: PUSH
46257: LD_INT 1
46259: NEG
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 2
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 2
46277: PUSH
46278: LD_INT 1
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 2
46287: PUSH
46288: LD_INT 2
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: LD_INT 2
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: LD_INT 2
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 1
46317: NEG
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 2
46328: NEG
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 2
46339: NEG
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 2
46351: NEG
46352: PUSH
46353: LD_INT 2
46355: NEG
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46382: LD_ADDR_VAR 0 55
46386: PUSH
46387: LD_INT 0
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: LD_INT 1
46402: NEG
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 1
46410: PUSH
46411: LD_INT 0
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: LD_INT 1
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: LD_INT 1
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 1
46440: NEG
46441: PUSH
46442: LD_INT 0
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 1
46451: NEG
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 1
46463: NEG
46464: PUSH
46465: LD_INT 2
46467: NEG
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: LD_INT 2
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 2
46497: PUSH
46498: LD_INT 0
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 2
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 2
46517: PUSH
46518: LD_INT 2
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: LD_INT 2
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: LD_INT 2
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 1
46547: NEG
46548: PUSH
46549: LD_INT 1
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 2
46558: NEG
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 2
46569: NEG
46570: PUSH
46571: LD_INT 1
46573: NEG
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 2
46581: NEG
46582: PUSH
46583: LD_INT 2
46585: NEG
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46612: LD_ADDR_VAR 0 56
46616: PUSH
46617: LD_INT 0
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: LD_INT 1
46632: NEG
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 1
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 1
46670: NEG
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: LD_INT 1
46685: NEG
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 1
46693: NEG
46694: PUSH
46695: LD_INT 2
46697: NEG
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: LD_INT 2
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: LD_INT 1
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 2
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 2
46737: PUSH
46738: LD_INT 1
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 2
46747: PUSH
46748: LD_INT 2
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 1
46757: PUSH
46758: LD_INT 2
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 0
46767: PUSH
46768: LD_INT 2
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 1
46777: NEG
46778: PUSH
46779: LD_INT 1
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 2
46788: NEG
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 2
46799: NEG
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 2
46811: NEG
46812: PUSH
46813: LD_INT 2
46815: NEG
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46842: LD_ADDR_VAR 0 57
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: LD_INT 1
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 1
46870: PUSH
46871: LD_INT 0
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: PUSH
46881: LD_INT 1
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: NEG
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 1
46923: NEG
46924: PUSH
46925: LD_INT 2
46927: NEG
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 0
46935: PUSH
46936: LD_INT 2
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: LD_INT 1
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 2
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 2
46967: PUSH
46968: LD_INT 1
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 2
46977: PUSH
46978: LD_INT 2
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 1
46987: PUSH
46988: LD_INT 2
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: LD_INT 2
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: LD_INT 1
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 2
47018: NEG
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 2
47029: NEG
47030: PUSH
47031: LD_INT 1
47033: NEG
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 2
47041: NEG
47042: PUSH
47043: LD_INT 2
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47072: LD_ADDR_VAR 0 58
47076: PUSH
47077: LD_INT 0
47079: PUSH
47080: LD_INT 0
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 1
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 1
47110: PUSH
47111: LD_INT 1
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: LD_INT 1
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 1
47130: NEG
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: LD_INT 1
47145: NEG
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 1
47153: NEG
47154: PUSH
47155: LD_INT 2
47157: NEG
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 0
47165: PUSH
47166: LD_INT 2
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 2
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 2
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 2
47207: PUSH
47208: LD_INT 2
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 1
47217: PUSH
47218: LD_INT 2
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: LD_INT 2
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 1
47237: NEG
47238: PUSH
47239: LD_INT 1
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 2
47248: NEG
47249: PUSH
47250: LD_INT 0
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 2
47259: NEG
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 2
47271: NEG
47272: PUSH
47273: LD_INT 2
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47302: LD_ADDR_VAR 0 59
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: PUSH
47331: LD_INT 0
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 1
47340: PUSH
47341: LD_INT 1
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 0
47350: PUSH
47351: LD_INT 1
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: LD_INT 0
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: LD_INT 1
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47390: LD_ADDR_VAR 0 60
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: LD_INT 1
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: PUSH
47419: LD_INT 0
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 1
47459: NEG
47460: PUSH
47461: LD_INT 1
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47478: LD_ADDR_VAR 0 61
47482: PUSH
47483: LD_INT 0
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 0
47495: PUSH
47496: LD_INT 1
47498: NEG
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 1
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 0
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: NEG
47537: PUSH
47538: LD_INT 0
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 1
47547: NEG
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47566: LD_ADDR_VAR 0 62
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: LD_INT 1
47586: NEG
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 1
47594: PUSH
47595: LD_INT 0
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 0
47614: PUSH
47615: LD_INT 1
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: LD_INT 0
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 1
47635: NEG
47636: PUSH
47637: LD_INT 1
47639: NEG
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47654: LD_ADDR_VAR 0 63
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 1
47682: PUSH
47683: LD_INT 0
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 1
47692: PUSH
47693: LD_INT 1
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: LD_INT 1
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: NEG
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 1
47723: NEG
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47742: LD_ADDR_VAR 0 64
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 1
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: NEG
47812: PUSH
47813: LD_INT 1
47815: NEG
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: ST_TO_ADDR
// end ; 1 :
47830: GO 53727
47832: LD_INT 1
47834: DOUBLE
47835: EQUAL
47836: IFTRUE 47840
47838: GO 50463
47840: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47841: LD_ADDR_VAR 0 11
47845: PUSH
47846: LD_INT 1
47848: NEG
47849: PUSH
47850: LD_INT 3
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: LD_INT 3
47863: NEG
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 1
47871: PUSH
47872: LD_INT 2
47874: NEG
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: LIST
47884: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47885: LD_ADDR_VAR 0 12
47889: PUSH
47890: LD_INT 2
47892: PUSH
47893: LD_INT 1
47895: NEG
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 3
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 3
47913: PUSH
47914: LD_INT 1
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: LIST
47925: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47926: LD_ADDR_VAR 0 13
47930: PUSH
47931: LD_INT 3
47933: PUSH
47934: LD_INT 2
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 3
47943: PUSH
47944: LD_INT 3
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 2
47953: PUSH
47954: LD_INT 3
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: LIST
47965: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47966: LD_ADDR_VAR 0 14
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: LD_INT 3
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 0
47983: PUSH
47984: LD_INT 3
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: PUSH
47995: LD_INT 2
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: LIST
48006: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48007: LD_ADDR_VAR 0 15
48011: PUSH
48012: LD_INT 2
48014: NEG
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 3
48025: NEG
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 3
48036: NEG
48037: PUSH
48038: LD_INT 1
48040: NEG
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: LIST
48050: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48051: LD_ADDR_VAR 0 16
48055: PUSH
48056: LD_INT 2
48058: NEG
48059: PUSH
48060: LD_INT 3
48062: NEG
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 3
48070: NEG
48071: PUSH
48072: LD_INT 2
48074: NEG
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 3
48082: NEG
48083: PUSH
48084: LD_INT 3
48086: NEG
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: LIST
48096: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48097: LD_ADDR_VAR 0 17
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: LD_INT 3
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 0
48116: PUSH
48117: LD_INT 3
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: LD_INT 2
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: LIST
48140: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48141: LD_ADDR_VAR 0 18
48145: PUSH
48146: LD_INT 2
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 3
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 3
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: LIST
48181: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48182: LD_ADDR_VAR 0 19
48186: PUSH
48187: LD_INT 3
48189: PUSH
48190: LD_INT 2
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 3
48199: PUSH
48200: LD_INT 3
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 2
48209: PUSH
48210: LD_INT 3
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: LIST
48221: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48222: LD_ADDR_VAR 0 20
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: LD_INT 3
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: LD_INT 3
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: LIST
48262: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48263: LD_ADDR_VAR 0 21
48267: PUSH
48268: LD_INT 2
48270: NEG
48271: PUSH
48272: LD_INT 1
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 3
48281: NEG
48282: PUSH
48283: LD_INT 0
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 3
48292: NEG
48293: PUSH
48294: LD_INT 1
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: LIST
48306: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48307: LD_ADDR_VAR 0 22
48311: PUSH
48312: LD_INT 2
48314: NEG
48315: PUSH
48316: LD_INT 3
48318: NEG
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 3
48326: NEG
48327: PUSH
48328: LD_INT 2
48330: NEG
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 3
48338: NEG
48339: PUSH
48340: LD_INT 3
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: LIST
48352: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48353: LD_ADDR_VAR 0 23
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: LD_INT 3
48363: NEG
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 1
48371: NEG
48372: PUSH
48373: LD_INT 4
48375: NEG
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 1
48383: PUSH
48384: LD_INT 3
48386: NEG
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: LIST
48396: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48397: LD_ADDR_VAR 0 24
48401: PUSH
48402: LD_INT 3
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 3
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 4
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: LIST
48437: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48438: LD_ADDR_VAR 0 25
48442: PUSH
48443: LD_INT 3
48445: PUSH
48446: LD_INT 3
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 4
48455: PUSH
48456: LD_INT 3
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 3
48465: PUSH
48466: LD_INT 4
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: LIST
48477: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48478: LD_ADDR_VAR 0 26
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: LD_INT 3
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 1
48495: PUSH
48496: LD_INT 4
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: LD_INT 3
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: LIST
48518: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48519: LD_ADDR_VAR 0 27
48523: PUSH
48524: LD_INT 3
48526: NEG
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 3
48537: NEG
48538: PUSH
48539: LD_INT 1
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 4
48548: NEG
48549: PUSH
48550: LD_INT 1
48552: NEG
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: LIST
48562: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48563: LD_ADDR_VAR 0 28
48567: PUSH
48568: LD_INT 3
48570: NEG
48571: PUSH
48572: LD_INT 3
48574: NEG
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 3
48582: NEG
48583: PUSH
48584: LD_INT 4
48586: NEG
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 4
48594: NEG
48595: PUSH
48596: LD_INT 3
48598: NEG
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: LIST
48608: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48609: LD_ADDR_VAR 0 29
48613: PUSH
48614: LD_INT 1
48616: NEG
48617: PUSH
48618: LD_INT 3
48620: NEG
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 0
48628: PUSH
48629: LD_INT 3
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 1
48639: PUSH
48640: LD_INT 2
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: NEG
48651: PUSH
48652: LD_INT 4
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 0
48662: PUSH
48663: LD_INT 4
48665: NEG
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 1
48673: PUSH
48674: LD_INT 3
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: LD_INT 5
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 0
48696: PUSH
48697: LD_INT 5
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: LD_INT 4
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 1
48718: NEG
48719: PUSH
48720: LD_INT 6
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: LD_INT 6
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 1
48741: PUSH
48742: LD_INT 5
48744: NEG
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48764: LD_ADDR_VAR 0 30
48768: PUSH
48769: LD_INT 2
48771: PUSH
48772: LD_INT 1
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 3
48782: PUSH
48783: LD_INT 0
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 3
48792: PUSH
48793: LD_INT 1
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 3
48802: PUSH
48803: LD_INT 1
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 4
48813: PUSH
48814: LD_INT 0
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 4
48823: PUSH
48824: LD_INT 1
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 4
48833: PUSH
48834: LD_INT 1
48836: NEG
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 5
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 5
48854: PUSH
48855: LD_INT 1
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 5
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 6
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 6
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48907: LD_ADDR_VAR 0 31
48911: PUSH
48912: LD_INT 3
48914: PUSH
48915: LD_INT 2
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 3
48924: PUSH
48925: LD_INT 3
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 2
48934: PUSH
48935: LD_INT 3
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 4
48944: PUSH
48945: LD_INT 3
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 4
48954: PUSH
48955: LD_INT 4
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 3
48964: PUSH
48965: LD_INT 4
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 5
48974: PUSH
48975: LD_INT 4
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 5
48984: PUSH
48985: LD_INT 5
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 4
48994: PUSH
48995: LD_INT 5
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 6
49004: PUSH
49005: LD_INT 5
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 6
49014: PUSH
49015: LD_INT 6
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 5
49024: PUSH
49025: LD_INT 6
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49046: LD_ADDR_VAR 0 32
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: LD_INT 3
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: LD_INT 3
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: LD_INT 2
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: LD_INT 4
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: LD_INT 4
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: LD_INT 3
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: PUSH
49116: LD_INT 5
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 0
49125: PUSH
49126: LD_INT 5
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: PUSH
49137: LD_INT 4
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 1
49146: PUSH
49147: LD_INT 6
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: LD_INT 6
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: LD_INT 5
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49189: LD_ADDR_VAR 0 33
49193: PUSH
49194: LD_INT 2
49196: NEG
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 3
49207: NEG
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 3
49218: NEG
49219: PUSH
49220: LD_INT 1
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 3
49230: NEG
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 4
49241: NEG
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 4
49252: NEG
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 4
49264: NEG
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 5
49275: NEG
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 5
49286: NEG
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 5
49298: NEG
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 6
49309: NEG
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 6
49320: NEG
49321: PUSH
49322: LD_INT 1
49324: NEG
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49344: LD_ADDR_VAR 0 34
49348: PUSH
49349: LD_INT 2
49351: NEG
49352: PUSH
49353: LD_INT 3
49355: NEG
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 3
49363: NEG
49364: PUSH
49365: LD_INT 2
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 3
49375: NEG
49376: PUSH
49377: LD_INT 3
49379: NEG
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 3
49387: NEG
49388: PUSH
49389: LD_INT 4
49391: NEG
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 4
49399: NEG
49400: PUSH
49401: LD_INT 3
49403: NEG
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 4
49411: NEG
49412: PUSH
49413: LD_INT 4
49415: NEG
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 4
49423: NEG
49424: PUSH
49425: LD_INT 5
49427: NEG
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 5
49435: NEG
49436: PUSH
49437: LD_INT 4
49439: NEG
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 5
49447: NEG
49448: PUSH
49449: LD_INT 5
49451: NEG
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 5
49459: NEG
49460: PUSH
49461: LD_INT 6
49463: NEG
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 6
49471: NEG
49472: PUSH
49473: LD_INT 5
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 6
49483: NEG
49484: PUSH
49485: LD_INT 6
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49507: LD_ADDR_VAR 0 41
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: LD_INT 2
49517: NEG
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 1
49525: NEG
49526: PUSH
49527: LD_INT 3
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 1
49537: PUSH
49538: LD_INT 2
49540: NEG
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: LIST
49550: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49551: LD_ADDR_VAR 0 42
49555: PUSH
49556: LD_INT 2
49558: PUSH
49559: LD_INT 0
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 2
49568: PUSH
49569: LD_INT 1
49571: NEG
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 3
49579: PUSH
49580: LD_INT 1
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: LIST
49591: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49592: LD_ADDR_VAR 0 43
49596: PUSH
49597: LD_INT 2
49599: PUSH
49600: LD_INT 2
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 3
49609: PUSH
49610: LD_INT 2
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 2
49619: PUSH
49620: LD_INT 3
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: LIST
49631: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49632: LD_ADDR_VAR 0 44
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: LD_INT 2
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 1
49649: PUSH
49650: LD_INT 3
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 1
49659: NEG
49660: PUSH
49661: LD_INT 2
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: LIST
49672: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49673: LD_ADDR_VAR 0 45
49677: PUSH
49678: LD_INT 2
49680: NEG
49681: PUSH
49682: LD_INT 0
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 2
49691: NEG
49692: PUSH
49693: LD_INT 1
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 3
49702: NEG
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: LIST
49716: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49717: LD_ADDR_VAR 0 46
49721: PUSH
49722: LD_INT 2
49724: NEG
49725: PUSH
49726: LD_INT 2
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 2
49736: NEG
49737: PUSH
49738: LD_INT 3
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 3
49748: NEG
49749: PUSH
49750: LD_INT 2
49752: NEG
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: LIST
49762: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49763: LD_ADDR_VAR 0 47
49767: PUSH
49768: LD_INT 2
49770: NEG
49771: PUSH
49772: LD_INT 3
49774: NEG
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 1
49782: NEG
49783: PUSH
49784: LD_INT 3
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49796: LD_ADDR_VAR 0 48
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: LD_INT 2
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 2
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49827: LD_ADDR_VAR 0 49
49831: PUSH
49832: LD_INT 3
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 3
49844: PUSH
49845: LD_INT 2
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49856: LD_ADDR_VAR 0 50
49860: PUSH
49861: LD_INT 2
49863: PUSH
49864: LD_INT 3
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: LD_INT 3
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49885: LD_ADDR_VAR 0 51
49889: PUSH
49890: LD_INT 1
49892: NEG
49893: PUSH
49894: LD_INT 2
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 2
49903: NEG
49904: PUSH
49905: LD_INT 1
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49916: LD_ADDR_VAR 0 52
49920: PUSH
49921: LD_INT 3
49923: NEG
49924: PUSH
49925: LD_INT 1
49927: NEG
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 3
49935: NEG
49936: PUSH
49937: LD_INT 2
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49949: LD_ADDR_VAR 0 53
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: LD_INT 3
49960: NEG
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: LD_INT 3
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 1
49979: PUSH
49980: LD_INT 2
49982: NEG
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: LIST
49992: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49993: LD_ADDR_VAR 0 54
49997: PUSH
49998: LD_INT 2
50000: PUSH
50001: LD_INT 1
50003: NEG
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 3
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 3
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: LIST
50033: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50034: LD_ADDR_VAR 0 55
50038: PUSH
50039: LD_INT 3
50041: PUSH
50042: LD_INT 2
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 3
50051: PUSH
50052: LD_INT 3
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 2
50061: PUSH
50062: LD_INT 3
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: LIST
50073: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50074: LD_ADDR_VAR 0 56
50078: PUSH
50079: LD_INT 1
50081: PUSH
50082: LD_INT 3
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 0
50091: PUSH
50092: LD_INT 3
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 1
50101: NEG
50102: PUSH
50103: LD_INT 2
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: LIST
50114: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50115: LD_ADDR_VAR 0 57
50119: PUSH
50120: LD_INT 2
50122: NEG
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 3
50133: NEG
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 3
50144: NEG
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: LIST
50158: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50159: LD_ADDR_VAR 0 58
50163: PUSH
50164: LD_INT 2
50166: NEG
50167: PUSH
50168: LD_INT 3
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 3
50178: NEG
50179: PUSH
50180: LD_INT 2
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 3
50190: NEG
50191: PUSH
50192: LD_INT 3
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: LIST
50204: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50205: LD_ADDR_VAR 0 59
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: LD_INT 2
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: LD_INT 2
50227: NEG
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 1
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: LIST
50248: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50249: LD_ADDR_VAR 0 60
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: LD_INT 1
50259: NEG
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 2
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 2
50277: PUSH
50278: LD_INT 1
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: LIST
50289: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50290: LD_ADDR_VAR 0 61
50294: PUSH
50295: LD_INT 2
50297: PUSH
50298: LD_INT 1
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 2
50307: PUSH
50308: LD_INT 2
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 1
50317: PUSH
50318: LD_INT 2
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: LIST
50329: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50330: LD_ADDR_VAR 0 62
50334: PUSH
50335: LD_INT 1
50337: PUSH
50338: LD_INT 2
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: LD_INT 2
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 1
50357: NEG
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: LIST
50370: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50371: LD_ADDR_VAR 0 63
50375: PUSH
50376: LD_INT 1
50378: NEG
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 2
50389: NEG
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 2
50400: NEG
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: LIST
50414: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50415: LD_ADDR_VAR 0 64
50419: PUSH
50420: LD_INT 1
50422: NEG
50423: PUSH
50424: LD_INT 2
50426: NEG
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 2
50434: NEG
50435: PUSH
50436: LD_INT 1
50438: NEG
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 2
50446: NEG
50447: PUSH
50448: LD_INT 2
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: LIST
50460: ST_TO_ADDR
// end ; 2 :
50461: GO 53727
50463: LD_INT 2
50465: DOUBLE
50466: EQUAL
50467: IFTRUE 50471
50469: GO 53726
50471: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50472: LD_ADDR_VAR 0 29
50476: PUSH
50477: LD_INT 4
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 4
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 5
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 5
50510: PUSH
50511: LD_INT 1
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 4
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 3
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 3
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 3
50551: PUSH
50552: LD_INT 2
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 5
50562: PUSH
50563: LD_INT 2
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 3
50572: PUSH
50573: LD_INT 3
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 3
50582: PUSH
50583: LD_INT 2
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 4
50592: PUSH
50593: LD_INT 3
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 4
50602: PUSH
50603: LD_INT 4
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 3
50612: PUSH
50613: LD_INT 4
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 2
50622: PUSH
50623: LD_INT 3
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 2
50632: PUSH
50633: LD_INT 2
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 4
50642: PUSH
50643: LD_INT 2
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 2
50652: PUSH
50653: LD_INT 4
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: LD_INT 4
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: LD_INT 3
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: LD_INT 4
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: LD_INT 5
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: LD_INT 5
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: NEG
50713: PUSH
50714: LD_INT 4
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 1
50723: NEG
50724: PUSH
50725: LD_INT 3
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 2
50734: PUSH
50735: LD_INT 5
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 2
50744: NEG
50745: PUSH
50746: LD_INT 3
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 3
50755: NEG
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 3
50766: NEG
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 2
50778: NEG
50779: PUSH
50780: LD_INT 0
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 2
50789: NEG
50790: PUSH
50791: LD_INT 1
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 3
50800: NEG
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 4
50811: NEG
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 4
50822: NEG
50823: PUSH
50824: LD_INT 1
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 4
50834: NEG
50835: PUSH
50836: LD_INT 2
50838: NEG
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 2
50846: NEG
50847: PUSH
50848: LD_INT 2
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 4
50857: NEG
50858: PUSH
50859: LD_INT 4
50861: NEG
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 4
50869: NEG
50870: PUSH
50871: LD_INT 5
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 3
50881: NEG
50882: PUSH
50883: LD_INT 4
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 3
50893: NEG
50894: PUSH
50895: LD_INT 3
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 4
50905: NEG
50906: PUSH
50907: LD_INT 3
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 5
50917: NEG
50918: PUSH
50919: LD_INT 4
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 5
50929: NEG
50930: PUSH
50931: LD_INT 5
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 3
50941: NEG
50942: PUSH
50943: LD_INT 5
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 5
50953: NEG
50954: PUSH
50955: LD_INT 3
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51010: LD_ADDR_VAR 0 30
51014: PUSH
51015: LD_INT 4
51017: PUSH
51018: LD_INT 4
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 4
51027: PUSH
51028: LD_INT 3
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 5
51037: PUSH
51038: LD_INT 4
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 5
51047: PUSH
51048: LD_INT 5
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 4
51057: PUSH
51058: LD_INT 5
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 3
51067: PUSH
51068: LD_INT 4
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 3
51077: PUSH
51078: LD_INT 3
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 5
51087: PUSH
51088: LD_INT 3
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 3
51097: PUSH
51098: LD_INT 5
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: LD_INT 3
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: LD_INT 2
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 1
51127: PUSH
51128: LD_INT 3
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 1
51137: PUSH
51138: LD_INT 4
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: LD_INT 4
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: LD_INT 3
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 1
51168: NEG
51169: PUSH
51170: LD_INT 2
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 2
51179: PUSH
51180: LD_INT 4
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 2
51189: NEG
51190: PUSH
51191: LD_INT 2
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 4
51200: NEG
51201: PUSH
51202: LD_INT 0
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 4
51211: NEG
51212: PUSH
51213: LD_INT 1
51215: NEG
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 3
51223: NEG
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 3
51234: NEG
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 4
51245: NEG
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 5
51256: NEG
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 5
51267: NEG
51268: PUSH
51269: LD_INT 1
51271: NEG
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 5
51279: NEG
51280: PUSH
51281: LD_INT 2
51283: NEG
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 3
51291: NEG
51292: PUSH
51293: LD_INT 2
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 3
51302: NEG
51303: PUSH
51304: LD_INT 3
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 3
51314: NEG
51315: PUSH
51316: LD_INT 4
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 2
51326: NEG
51327: PUSH
51328: LD_INT 3
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 2
51338: NEG
51339: PUSH
51340: LD_INT 2
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 3
51350: NEG
51351: PUSH
51352: LD_INT 2
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 4
51362: NEG
51363: PUSH
51364: LD_INT 3
51366: NEG
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 4
51374: NEG
51375: PUSH
51376: LD_INT 4
51378: NEG
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 2
51386: NEG
51387: PUSH
51388: LD_INT 4
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 4
51398: NEG
51399: PUSH
51400: LD_INT 2
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: LD_INT 4
51413: NEG
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: LD_INT 5
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: LD_INT 4
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 1
51443: PUSH
51444: LD_INT 3
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: LD_INT 3
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 1
51465: NEG
51466: PUSH
51467: LD_INT 4
51469: NEG
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: LD_INT 5
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 2
51489: PUSH
51490: LD_INT 3
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 2
51500: NEG
51501: PUSH
51502: LD_INT 5
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51557: LD_ADDR_VAR 0 31
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: LD_INT 4
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: LD_INT 3
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: LD_INT 4
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 1
51594: PUSH
51595: LD_INT 5
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: LD_INT 5
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 1
51614: NEG
51615: PUSH
51616: LD_INT 4
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: LD_INT 3
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 2
51636: PUSH
51637: LD_INT 5
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 2
51646: NEG
51647: PUSH
51648: LD_INT 3
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 3
51657: NEG
51658: PUSH
51659: LD_INT 0
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 3
51668: NEG
51669: PUSH
51670: LD_INT 1
51672: NEG
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 2
51680: NEG
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 2
51691: NEG
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 3
51702: NEG
51703: PUSH
51704: LD_INT 1
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 4
51713: NEG
51714: PUSH
51715: LD_INT 0
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 4
51724: NEG
51725: PUSH
51726: LD_INT 1
51728: NEG
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 4
51736: NEG
51737: PUSH
51738: LD_INT 2
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 2
51748: NEG
51749: PUSH
51750: LD_INT 2
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 4
51759: NEG
51760: PUSH
51761: LD_INT 4
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 4
51771: NEG
51772: PUSH
51773: LD_INT 5
51775: NEG
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 3
51783: NEG
51784: PUSH
51785: LD_INT 4
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 3
51795: NEG
51796: PUSH
51797: LD_INT 3
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 4
51807: NEG
51808: PUSH
51809: LD_INT 3
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 5
51819: NEG
51820: PUSH
51821: LD_INT 4
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 5
51831: NEG
51832: PUSH
51833: LD_INT 5
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 3
51843: NEG
51844: PUSH
51845: LD_INT 5
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 5
51855: NEG
51856: PUSH
51857: LD_INT 3
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: LD_INT 3
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: LD_INT 4
51881: NEG
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: PUSH
51887: LD_INT 1
51889: PUSH
51890: LD_INT 3
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 1
51900: PUSH
51901: LD_INT 2
51903: NEG
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: LD_INT 2
51914: NEG
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: LD_INT 3
51926: NEG
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 1
51934: NEG
51935: PUSH
51936: LD_INT 4
51938: NEG
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 2
51946: PUSH
51947: LD_INT 2
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 2
51957: NEG
51958: PUSH
51959: LD_INT 4
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 4
51969: PUSH
51970: LD_INT 0
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 4
51979: PUSH
51980: LD_INT 1
51982: NEG
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 5
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 5
52000: PUSH
52001: LD_INT 1
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 4
52010: PUSH
52011: LD_INT 1
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 3
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 3
52030: PUSH
52031: LD_INT 1
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 3
52041: PUSH
52042: LD_INT 2
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 5
52052: PUSH
52053: LD_INT 2
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52107: LD_ADDR_VAR 0 32
52111: PUSH
52112: LD_INT 4
52114: NEG
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 4
52125: NEG
52126: PUSH
52127: LD_INT 1
52129: NEG
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 3
52137: NEG
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 3
52148: NEG
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 4
52159: NEG
52160: PUSH
52161: LD_INT 1
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 5
52170: NEG
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 5
52181: NEG
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 5
52193: NEG
52194: PUSH
52195: LD_INT 2
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 3
52205: NEG
52206: PUSH
52207: LD_INT 2
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 3
52216: NEG
52217: PUSH
52218: LD_INT 3
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 3
52228: NEG
52229: PUSH
52230: LD_INT 4
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 2
52240: NEG
52241: PUSH
52242: LD_INT 3
52244: NEG
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 2
52252: NEG
52253: PUSH
52254: LD_INT 2
52256: NEG
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 3
52264: NEG
52265: PUSH
52266: LD_INT 2
52268: NEG
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 4
52276: NEG
52277: PUSH
52278: LD_INT 3
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 4
52288: NEG
52289: PUSH
52290: LD_INT 4
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 2
52300: NEG
52301: PUSH
52302: LD_INT 4
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 4
52312: NEG
52313: PUSH
52314: LD_INT 2
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: LD_INT 4
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 0
52335: PUSH
52336: LD_INT 5
52338: NEG
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 1
52346: PUSH
52347: LD_INT 4
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: PUSH
52358: LD_INT 3
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: LD_INT 3
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 1
52379: NEG
52380: PUSH
52381: LD_INT 4
52383: NEG
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 1
52391: NEG
52392: PUSH
52393: LD_INT 5
52395: NEG
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 2
52403: PUSH
52404: LD_INT 3
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 2
52414: NEG
52415: PUSH
52416: LD_INT 5
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 3
52426: PUSH
52427: LD_INT 0
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 3
52436: PUSH
52437: LD_INT 1
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 4
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 4
52457: PUSH
52458: LD_INT 1
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 3
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 2
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 2
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 2
52498: PUSH
52499: LD_INT 2
52501: NEG
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 4
52509: PUSH
52510: LD_INT 2
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 4
52519: PUSH
52520: LD_INT 4
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 4
52529: PUSH
52530: LD_INT 3
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 5
52539: PUSH
52540: LD_INT 4
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 5
52549: PUSH
52550: LD_INT 5
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 4
52559: PUSH
52560: LD_INT 5
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 3
52569: PUSH
52570: LD_INT 4
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 3
52579: PUSH
52580: LD_INT 3
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 5
52589: PUSH
52590: LD_INT 3
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 3
52599: PUSH
52600: LD_INT 5
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52654: LD_ADDR_VAR 0 33
52658: PUSH
52659: LD_INT 4
52661: NEG
52662: PUSH
52663: LD_INT 4
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 4
52673: NEG
52674: PUSH
52675: LD_INT 5
52677: NEG
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 3
52685: NEG
52686: PUSH
52687: LD_INT 4
52689: NEG
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 3
52697: NEG
52698: PUSH
52699: LD_INT 3
52701: NEG
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 4
52709: NEG
52710: PUSH
52711: LD_INT 3
52713: NEG
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 5
52721: NEG
52722: PUSH
52723: LD_INT 4
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 5
52733: NEG
52734: PUSH
52735: LD_INT 5
52737: NEG
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 3
52745: NEG
52746: PUSH
52747: LD_INT 5
52749: NEG
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 5
52757: NEG
52758: PUSH
52759: LD_INT 3
52761: NEG
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: LD_INT 3
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: LD_INT 4
52783: NEG
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: LD_INT 3
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 1
52802: PUSH
52803: LD_INT 2
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 0
52813: PUSH
52814: LD_INT 2
52816: NEG
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 1
52824: NEG
52825: PUSH
52826: LD_INT 3
52828: NEG
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 1
52836: NEG
52837: PUSH
52838: LD_INT 4
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 2
52848: PUSH
52849: LD_INT 2
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 2
52859: NEG
52860: PUSH
52861: LD_INT 4
52863: NEG
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 4
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 4
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 5
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 5
52902: PUSH
52903: LD_INT 1
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 4
52912: PUSH
52913: LD_INT 1
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 3
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 3
52932: PUSH
52933: LD_INT 1
52935: NEG
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 3
52943: PUSH
52944: LD_INT 2
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 5
52954: PUSH
52955: LD_INT 2
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 3
52964: PUSH
52965: LD_INT 3
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 3
52974: PUSH
52975: LD_INT 2
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 4
52984: PUSH
52985: LD_INT 3
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 4
52994: PUSH
52995: LD_INT 4
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 3
53004: PUSH
53005: LD_INT 4
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 2
53014: PUSH
53015: LD_INT 3
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 2
53024: PUSH
53025: LD_INT 2
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 4
53034: PUSH
53035: LD_INT 2
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 2
53044: PUSH
53045: LD_INT 4
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: LD_INT 4
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: LD_INT 3
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: LD_INT 4
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: LD_INT 5
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: LD_INT 5
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: LD_INT 4
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: NEG
53116: PUSH
53117: LD_INT 3
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 2
53126: PUSH
53127: LD_INT 5
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 2
53136: NEG
53137: PUSH
53138: LD_INT 3
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53192: LD_ADDR_VAR 0 34
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: LD_INT 4
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: LD_INT 5
53213: NEG
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 1
53221: PUSH
53222: LD_INT 4
53224: NEG
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: LD_INT 3
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 0
53243: PUSH
53244: LD_INT 3
53246: NEG
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: LD_INT 4
53258: NEG
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: LD_INT 5
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 2
53278: PUSH
53279: LD_INT 3
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 2
53289: NEG
53290: PUSH
53291: LD_INT 5
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 3
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 3
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 4
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 4
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 3
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 2
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 2
53362: PUSH
53363: LD_INT 1
53365: NEG
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 2
53373: PUSH
53374: LD_INT 2
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 4
53384: PUSH
53385: LD_INT 2
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 4
53394: PUSH
53395: LD_INT 4
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 4
53404: PUSH
53405: LD_INT 3
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 5
53414: PUSH
53415: LD_INT 4
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 5
53424: PUSH
53425: LD_INT 5
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 4
53434: PUSH
53435: LD_INT 5
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 3
53444: PUSH
53445: LD_INT 4
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 3
53454: PUSH
53455: LD_INT 3
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 5
53464: PUSH
53465: LD_INT 3
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 3
53474: PUSH
53475: LD_INT 5
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: LD_INT 3
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: LD_INT 2
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: LD_INT 3
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 1
53514: PUSH
53515: LD_INT 4
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: LD_INT 4
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 1
53534: NEG
53535: PUSH
53536: LD_INT 3
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: LD_INT 2
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 2
53556: PUSH
53557: LD_INT 4
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 2
53566: NEG
53567: PUSH
53568: LD_INT 2
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 4
53577: NEG
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 4
53588: NEG
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 3
53600: NEG
53601: PUSH
53602: LD_INT 0
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 3
53611: NEG
53612: PUSH
53613: LD_INT 1
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 4
53622: NEG
53623: PUSH
53624: LD_INT 1
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 5
53633: NEG
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 5
53644: NEG
53645: PUSH
53646: LD_INT 1
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 5
53656: NEG
53657: PUSH
53658: LD_INT 2
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 3
53668: NEG
53669: PUSH
53670: LD_INT 2
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: ST_TO_ADDR
// end ; end ;
53724: GO 53727
53726: POP
// case btype of b_depot , b_warehouse :
53727: LD_VAR 0 1
53731: PUSH
53732: LD_INT 0
53734: DOUBLE
53735: EQUAL
53736: IFTRUE 53746
53738: LD_INT 1
53740: DOUBLE
53741: EQUAL
53742: IFTRUE 53746
53744: GO 53947
53746: POP
// case nation of nation_american :
53747: LD_VAR 0 5
53751: PUSH
53752: LD_INT 1
53754: DOUBLE
53755: EQUAL
53756: IFTRUE 53760
53758: GO 53816
53760: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53761: LD_ADDR_VAR 0 9
53765: PUSH
53766: LD_VAR 0 11
53770: PUSH
53771: LD_VAR 0 12
53775: PUSH
53776: LD_VAR 0 13
53780: PUSH
53781: LD_VAR 0 14
53785: PUSH
53786: LD_VAR 0 15
53790: PUSH
53791: LD_VAR 0 16
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: PUSH
53804: LD_VAR 0 4
53808: PUSH
53809: LD_INT 1
53811: PLUS
53812: ARRAY
53813: ST_TO_ADDR
53814: GO 53945
53816: LD_INT 2
53818: DOUBLE
53819: EQUAL
53820: IFTRUE 53824
53822: GO 53880
53824: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53825: LD_ADDR_VAR 0 9
53829: PUSH
53830: LD_VAR 0 17
53834: PUSH
53835: LD_VAR 0 18
53839: PUSH
53840: LD_VAR 0 19
53844: PUSH
53845: LD_VAR 0 20
53849: PUSH
53850: LD_VAR 0 21
53854: PUSH
53855: LD_VAR 0 22
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: PUSH
53868: LD_VAR 0 4
53872: PUSH
53873: LD_INT 1
53875: PLUS
53876: ARRAY
53877: ST_TO_ADDR
53878: GO 53945
53880: LD_INT 3
53882: DOUBLE
53883: EQUAL
53884: IFTRUE 53888
53886: GO 53944
53888: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53889: LD_ADDR_VAR 0 9
53893: PUSH
53894: LD_VAR 0 23
53898: PUSH
53899: LD_VAR 0 24
53903: PUSH
53904: LD_VAR 0 25
53908: PUSH
53909: LD_VAR 0 26
53913: PUSH
53914: LD_VAR 0 27
53918: PUSH
53919: LD_VAR 0 28
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: PUSH
53932: LD_VAR 0 4
53936: PUSH
53937: LD_INT 1
53939: PLUS
53940: ARRAY
53941: ST_TO_ADDR
53942: GO 53945
53944: POP
53945: GO 54500
53947: LD_INT 2
53949: DOUBLE
53950: EQUAL
53951: IFTRUE 53961
53953: LD_INT 3
53955: DOUBLE
53956: EQUAL
53957: IFTRUE 53961
53959: GO 54017
53961: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53962: LD_ADDR_VAR 0 9
53966: PUSH
53967: LD_VAR 0 29
53971: PUSH
53972: LD_VAR 0 30
53976: PUSH
53977: LD_VAR 0 31
53981: PUSH
53982: LD_VAR 0 32
53986: PUSH
53987: LD_VAR 0 33
53991: PUSH
53992: LD_VAR 0 34
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: PUSH
54005: LD_VAR 0 4
54009: PUSH
54010: LD_INT 1
54012: PLUS
54013: ARRAY
54014: ST_TO_ADDR
54015: GO 54500
54017: LD_INT 16
54019: DOUBLE
54020: EQUAL
54021: IFTRUE 54079
54023: LD_INT 17
54025: DOUBLE
54026: EQUAL
54027: IFTRUE 54079
54029: LD_INT 18
54031: DOUBLE
54032: EQUAL
54033: IFTRUE 54079
54035: LD_INT 19
54037: DOUBLE
54038: EQUAL
54039: IFTRUE 54079
54041: LD_INT 22
54043: DOUBLE
54044: EQUAL
54045: IFTRUE 54079
54047: LD_INT 20
54049: DOUBLE
54050: EQUAL
54051: IFTRUE 54079
54053: LD_INT 21
54055: DOUBLE
54056: EQUAL
54057: IFTRUE 54079
54059: LD_INT 23
54061: DOUBLE
54062: EQUAL
54063: IFTRUE 54079
54065: LD_INT 24
54067: DOUBLE
54068: EQUAL
54069: IFTRUE 54079
54071: LD_INT 25
54073: DOUBLE
54074: EQUAL
54075: IFTRUE 54079
54077: GO 54135
54079: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54080: LD_ADDR_VAR 0 9
54084: PUSH
54085: LD_VAR 0 35
54089: PUSH
54090: LD_VAR 0 36
54094: PUSH
54095: LD_VAR 0 37
54099: PUSH
54100: LD_VAR 0 38
54104: PUSH
54105: LD_VAR 0 39
54109: PUSH
54110: LD_VAR 0 40
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: PUSH
54123: LD_VAR 0 4
54127: PUSH
54128: LD_INT 1
54130: PLUS
54131: ARRAY
54132: ST_TO_ADDR
54133: GO 54500
54135: LD_INT 6
54137: DOUBLE
54138: EQUAL
54139: IFTRUE 54191
54141: LD_INT 7
54143: DOUBLE
54144: EQUAL
54145: IFTRUE 54191
54147: LD_INT 8
54149: DOUBLE
54150: EQUAL
54151: IFTRUE 54191
54153: LD_INT 13
54155: DOUBLE
54156: EQUAL
54157: IFTRUE 54191
54159: LD_INT 12
54161: DOUBLE
54162: EQUAL
54163: IFTRUE 54191
54165: LD_INT 15
54167: DOUBLE
54168: EQUAL
54169: IFTRUE 54191
54171: LD_INT 11
54173: DOUBLE
54174: EQUAL
54175: IFTRUE 54191
54177: LD_INT 14
54179: DOUBLE
54180: EQUAL
54181: IFTRUE 54191
54183: LD_INT 10
54185: DOUBLE
54186: EQUAL
54187: IFTRUE 54191
54189: GO 54247
54191: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54192: LD_ADDR_VAR 0 9
54196: PUSH
54197: LD_VAR 0 41
54201: PUSH
54202: LD_VAR 0 42
54206: PUSH
54207: LD_VAR 0 43
54211: PUSH
54212: LD_VAR 0 44
54216: PUSH
54217: LD_VAR 0 45
54221: PUSH
54222: LD_VAR 0 46
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: PUSH
54235: LD_VAR 0 4
54239: PUSH
54240: LD_INT 1
54242: PLUS
54243: ARRAY
54244: ST_TO_ADDR
54245: GO 54500
54247: LD_INT 36
54249: DOUBLE
54250: EQUAL
54251: IFTRUE 54255
54253: GO 54311
54255: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54256: LD_ADDR_VAR 0 9
54260: PUSH
54261: LD_VAR 0 47
54265: PUSH
54266: LD_VAR 0 48
54270: PUSH
54271: LD_VAR 0 49
54275: PUSH
54276: LD_VAR 0 50
54280: PUSH
54281: LD_VAR 0 51
54285: PUSH
54286: LD_VAR 0 52
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: PUSH
54299: LD_VAR 0 4
54303: PUSH
54304: LD_INT 1
54306: PLUS
54307: ARRAY
54308: ST_TO_ADDR
54309: GO 54500
54311: LD_INT 4
54313: DOUBLE
54314: EQUAL
54315: IFTRUE 54337
54317: LD_INT 5
54319: DOUBLE
54320: EQUAL
54321: IFTRUE 54337
54323: LD_INT 34
54325: DOUBLE
54326: EQUAL
54327: IFTRUE 54337
54329: LD_INT 37
54331: DOUBLE
54332: EQUAL
54333: IFTRUE 54337
54335: GO 54393
54337: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54338: LD_ADDR_VAR 0 9
54342: PUSH
54343: LD_VAR 0 53
54347: PUSH
54348: LD_VAR 0 54
54352: PUSH
54353: LD_VAR 0 55
54357: PUSH
54358: LD_VAR 0 56
54362: PUSH
54363: LD_VAR 0 57
54367: PUSH
54368: LD_VAR 0 58
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: PUSH
54381: LD_VAR 0 4
54385: PUSH
54386: LD_INT 1
54388: PLUS
54389: ARRAY
54390: ST_TO_ADDR
54391: GO 54500
54393: LD_INT 31
54395: DOUBLE
54396: EQUAL
54397: IFTRUE 54443
54399: LD_INT 32
54401: DOUBLE
54402: EQUAL
54403: IFTRUE 54443
54405: LD_INT 33
54407: DOUBLE
54408: EQUAL
54409: IFTRUE 54443
54411: LD_INT 27
54413: DOUBLE
54414: EQUAL
54415: IFTRUE 54443
54417: LD_INT 26
54419: DOUBLE
54420: EQUAL
54421: IFTRUE 54443
54423: LD_INT 28
54425: DOUBLE
54426: EQUAL
54427: IFTRUE 54443
54429: LD_INT 29
54431: DOUBLE
54432: EQUAL
54433: IFTRUE 54443
54435: LD_INT 30
54437: DOUBLE
54438: EQUAL
54439: IFTRUE 54443
54441: GO 54499
54443: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54444: LD_ADDR_VAR 0 9
54448: PUSH
54449: LD_VAR 0 59
54453: PUSH
54454: LD_VAR 0 60
54458: PUSH
54459: LD_VAR 0 61
54463: PUSH
54464: LD_VAR 0 62
54468: PUSH
54469: LD_VAR 0 63
54473: PUSH
54474: LD_VAR 0 64
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: PUSH
54487: LD_VAR 0 4
54491: PUSH
54492: LD_INT 1
54494: PLUS
54495: ARRAY
54496: ST_TO_ADDR
54497: GO 54500
54499: POP
// temp_list2 = [ ] ;
54500: LD_ADDR_VAR 0 10
54504: PUSH
54505: EMPTY
54506: ST_TO_ADDR
// for i in temp_list do
54507: LD_ADDR_VAR 0 8
54511: PUSH
54512: LD_VAR 0 9
54516: PUSH
54517: FOR_IN
54518: IFFALSE 54570
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54520: LD_ADDR_VAR 0 10
54524: PUSH
54525: LD_VAR 0 10
54529: PUSH
54530: LD_VAR 0 8
54534: PUSH
54535: LD_INT 1
54537: ARRAY
54538: PUSH
54539: LD_VAR 0 2
54543: PLUS
54544: PUSH
54545: LD_VAR 0 8
54549: PUSH
54550: LD_INT 2
54552: ARRAY
54553: PUSH
54554: LD_VAR 0 3
54558: PLUS
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: EMPTY
54565: LIST
54566: ADD
54567: ST_TO_ADDR
54568: GO 54517
54570: POP
54571: POP
// result = temp_list2 ;
54572: LD_ADDR_VAR 0 7
54576: PUSH
54577: LD_VAR 0 10
54581: ST_TO_ADDR
// end ;
54582: LD_VAR 0 7
54586: RET
// export function EnemyInRange ( unit , dist ) ; begin
54587: LD_INT 0
54589: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54590: LD_ADDR_VAR 0 3
54594: PUSH
54595: LD_VAR 0 1
54599: PPUSH
54600: CALL_OW 255
54604: PPUSH
54605: LD_VAR 0 1
54609: PPUSH
54610: CALL_OW 250
54614: PPUSH
54615: LD_VAR 0 1
54619: PPUSH
54620: CALL_OW 251
54624: PPUSH
54625: LD_VAR 0 2
54629: PPUSH
54630: CALL 27989 0 4
54634: PUSH
54635: LD_INT 4
54637: ARRAY
54638: ST_TO_ADDR
// end ;
54639: LD_VAR 0 3
54643: RET
// export function PlayerSeeMe ( unit ) ; begin
54644: LD_INT 0
54646: PPUSH
// result := See ( your_side , unit ) ;
54647: LD_ADDR_VAR 0 2
54651: PUSH
54652: LD_OWVAR 2
54656: PPUSH
54657: LD_VAR 0 1
54661: PPUSH
54662: CALL_OW 292
54666: ST_TO_ADDR
// end ;
54667: LD_VAR 0 2
54671: RET
// export function ReverseDir ( unit ) ; begin
54672: LD_INT 0
54674: PPUSH
// if not unit then
54675: LD_VAR 0 1
54679: NOT
54680: IFFALSE 54684
// exit ;
54682: GO 54707
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54684: LD_ADDR_VAR 0 2
54688: PUSH
54689: LD_VAR 0 1
54693: PPUSH
54694: CALL_OW 254
54698: PUSH
54699: LD_INT 3
54701: PLUS
54702: PUSH
54703: LD_INT 6
54705: MOD
54706: ST_TO_ADDR
// end ;
54707: LD_VAR 0 2
54711: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
54712: LD_INT 0
54714: PPUSH
54715: PPUSH
54716: PPUSH
54717: PPUSH
54718: PPUSH
54719: PPUSH
// if not unit or not hexes then
54720: LD_VAR 0 1
54724: NOT
54725: PUSH
54726: LD_VAR 0 2
54730: NOT
54731: OR
54732: IFFALSE 54736
// exit ;
54734: GO 54859
// dist := 9999 ;
54736: LD_ADDR_VAR 0 5
54740: PUSH
54741: LD_INT 9999
54743: ST_TO_ADDR
// for i = 1 to hexes do
54744: LD_ADDR_VAR 0 4
54748: PUSH
54749: DOUBLE
54750: LD_INT 1
54752: DEC
54753: ST_TO_ADDR
54754: LD_VAR 0 2
54758: PUSH
54759: FOR_TO
54760: IFFALSE 54847
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54762: LD_ADDR_VAR 0 6
54766: PUSH
54767: LD_VAR 0 1
54771: PPUSH
54772: LD_VAR 0 2
54776: PUSH
54777: LD_VAR 0 4
54781: ARRAY
54782: PUSH
54783: LD_INT 1
54785: ARRAY
54786: PPUSH
54787: LD_VAR 0 2
54791: PUSH
54792: LD_VAR 0 4
54796: ARRAY
54797: PUSH
54798: LD_INT 2
54800: ARRAY
54801: PPUSH
54802: CALL_OW 297
54806: ST_TO_ADDR
// if tdist < dist then
54807: LD_VAR 0 6
54811: PUSH
54812: LD_VAR 0 5
54816: LESS
54817: IFFALSE 54845
// begin hex := hexes [ i ] ;
54819: LD_ADDR_VAR 0 8
54823: PUSH
54824: LD_VAR 0 2
54828: PUSH
54829: LD_VAR 0 4
54833: ARRAY
54834: ST_TO_ADDR
// dist := tdist ;
54835: LD_ADDR_VAR 0 5
54839: PUSH
54840: LD_VAR 0 6
54844: ST_TO_ADDR
// end ; end ;
54845: GO 54759
54847: POP
54848: POP
// result := hex ;
54849: LD_ADDR_VAR 0 3
54853: PUSH
54854: LD_VAR 0 8
54858: ST_TO_ADDR
// end ;
54859: LD_VAR 0 3
54863: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54864: LD_INT 0
54866: PPUSH
54867: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54868: LD_VAR 0 1
54872: NOT
54873: PUSH
54874: LD_VAR 0 1
54878: PUSH
54879: LD_INT 21
54881: PUSH
54882: LD_INT 2
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 23
54891: PUSH
54892: LD_INT 2
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PPUSH
54903: CALL_OW 69
54907: IN
54908: NOT
54909: OR
54910: IFFALSE 54914
// exit ;
54912: GO 54961
// for i = 1 to 3 do
54914: LD_ADDR_VAR 0 3
54918: PUSH
54919: DOUBLE
54920: LD_INT 1
54922: DEC
54923: ST_TO_ADDR
54924: LD_INT 3
54926: PUSH
54927: FOR_TO
54928: IFFALSE 54959
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54930: LD_VAR 0 1
54934: PPUSH
54935: CALL_OW 250
54939: PPUSH
54940: LD_VAR 0 1
54944: PPUSH
54945: CALL_OW 251
54949: PPUSH
54950: LD_INT 1
54952: PPUSH
54953: CALL_OW 453
54957: GO 54927
54959: POP
54960: POP
// end ;
54961: LD_VAR 0 2
54965: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54966: LD_INT 0
54968: PPUSH
54969: PPUSH
54970: PPUSH
54971: PPUSH
54972: PPUSH
54973: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54974: LD_VAR 0 1
54978: NOT
54979: PUSH
54980: LD_VAR 0 2
54984: NOT
54985: OR
54986: PUSH
54987: LD_VAR 0 1
54991: PPUSH
54992: CALL_OW 314
54996: OR
54997: IFFALSE 55001
// exit ;
54999: GO 55442
// x := GetX ( enemy_unit ) ;
55001: LD_ADDR_VAR 0 7
55005: PUSH
55006: LD_VAR 0 2
55010: PPUSH
55011: CALL_OW 250
55015: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55016: LD_ADDR_VAR 0 8
55020: PUSH
55021: LD_VAR 0 2
55025: PPUSH
55026: CALL_OW 251
55030: ST_TO_ADDR
// if not x or not y then
55031: LD_VAR 0 7
55035: NOT
55036: PUSH
55037: LD_VAR 0 8
55041: NOT
55042: OR
55043: IFFALSE 55047
// exit ;
55045: GO 55442
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55047: LD_ADDR_VAR 0 6
55051: PUSH
55052: LD_VAR 0 7
55056: PPUSH
55057: LD_INT 0
55059: PPUSH
55060: LD_INT 4
55062: PPUSH
55063: CALL_OW 272
55067: PUSH
55068: LD_VAR 0 8
55072: PPUSH
55073: LD_INT 0
55075: PPUSH
55076: LD_INT 4
55078: PPUSH
55079: CALL_OW 273
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_VAR 0 7
55092: PPUSH
55093: LD_INT 1
55095: PPUSH
55096: LD_INT 4
55098: PPUSH
55099: CALL_OW 272
55103: PUSH
55104: LD_VAR 0 8
55108: PPUSH
55109: LD_INT 1
55111: PPUSH
55112: LD_INT 4
55114: PPUSH
55115: CALL_OW 273
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_VAR 0 7
55128: PPUSH
55129: LD_INT 2
55131: PPUSH
55132: LD_INT 4
55134: PPUSH
55135: CALL_OW 272
55139: PUSH
55140: LD_VAR 0 8
55144: PPUSH
55145: LD_INT 2
55147: PPUSH
55148: LD_INT 4
55150: PPUSH
55151: CALL_OW 273
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_VAR 0 7
55164: PPUSH
55165: LD_INT 3
55167: PPUSH
55168: LD_INT 4
55170: PPUSH
55171: CALL_OW 272
55175: PUSH
55176: LD_VAR 0 8
55180: PPUSH
55181: LD_INT 3
55183: PPUSH
55184: LD_INT 4
55186: PPUSH
55187: CALL_OW 273
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_VAR 0 7
55200: PPUSH
55201: LD_INT 4
55203: PPUSH
55204: LD_INT 4
55206: PPUSH
55207: CALL_OW 272
55211: PUSH
55212: LD_VAR 0 8
55216: PPUSH
55217: LD_INT 4
55219: PPUSH
55220: LD_INT 4
55222: PPUSH
55223: CALL_OW 273
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_VAR 0 7
55236: PPUSH
55237: LD_INT 5
55239: PPUSH
55240: LD_INT 4
55242: PPUSH
55243: CALL_OW 272
55247: PUSH
55248: LD_VAR 0 8
55252: PPUSH
55253: LD_INT 5
55255: PPUSH
55256: LD_INT 4
55258: PPUSH
55259: CALL_OW 273
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: ST_TO_ADDR
// for i = tmp downto 1 do
55276: LD_ADDR_VAR 0 4
55280: PUSH
55281: DOUBLE
55282: LD_VAR 0 6
55286: INC
55287: ST_TO_ADDR
55288: LD_INT 1
55290: PUSH
55291: FOR_DOWNTO
55292: IFFALSE 55393
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55294: LD_VAR 0 6
55298: PUSH
55299: LD_VAR 0 4
55303: ARRAY
55304: PUSH
55305: LD_INT 1
55307: ARRAY
55308: PPUSH
55309: LD_VAR 0 6
55313: PUSH
55314: LD_VAR 0 4
55318: ARRAY
55319: PUSH
55320: LD_INT 2
55322: ARRAY
55323: PPUSH
55324: CALL_OW 488
55328: NOT
55329: PUSH
55330: LD_VAR 0 6
55334: PUSH
55335: LD_VAR 0 4
55339: ARRAY
55340: PUSH
55341: LD_INT 1
55343: ARRAY
55344: PPUSH
55345: LD_VAR 0 6
55349: PUSH
55350: LD_VAR 0 4
55354: ARRAY
55355: PUSH
55356: LD_INT 2
55358: ARRAY
55359: PPUSH
55360: CALL_OW 428
55364: PUSH
55365: LD_INT 0
55367: NONEQUAL
55368: OR
55369: IFFALSE 55391
// tmp := Delete ( tmp , i ) ;
55371: LD_ADDR_VAR 0 6
55375: PUSH
55376: LD_VAR 0 6
55380: PPUSH
55381: LD_VAR 0 4
55385: PPUSH
55386: CALL_OW 3
55390: ST_TO_ADDR
55391: GO 55291
55393: POP
55394: POP
// j := GetClosestHex ( unit , tmp ) ;
55395: LD_ADDR_VAR 0 5
55399: PUSH
55400: LD_VAR 0 1
55404: PPUSH
55405: LD_VAR 0 6
55409: PPUSH
55410: CALL 54712 0 2
55414: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55415: LD_VAR 0 1
55419: PPUSH
55420: LD_VAR 0 5
55424: PUSH
55425: LD_INT 1
55427: ARRAY
55428: PPUSH
55429: LD_VAR 0 5
55433: PUSH
55434: LD_INT 2
55436: ARRAY
55437: PPUSH
55438: CALL_OW 111
// end ;
55442: LD_VAR 0 3
55446: RET
// export function PrepareApemanSoldier ( ) ; begin
55447: LD_INT 0
55449: PPUSH
// uc_nation := 0 ;
55450: LD_ADDR_OWVAR 21
55454: PUSH
55455: LD_INT 0
55457: ST_TO_ADDR
// hc_sex := sex_male ;
55458: LD_ADDR_OWVAR 27
55462: PUSH
55463: LD_INT 1
55465: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55466: LD_ADDR_OWVAR 28
55470: PUSH
55471: LD_INT 15
55473: ST_TO_ADDR
// hc_gallery :=  ;
55474: LD_ADDR_OWVAR 33
55478: PUSH
55479: LD_STRING 
55481: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55482: LD_ADDR_OWVAR 31
55486: PUSH
55487: LD_INT 0
55489: PPUSH
55490: LD_INT 3
55492: PPUSH
55493: CALL_OW 12
55497: PUSH
55498: LD_INT 0
55500: PPUSH
55501: LD_INT 3
55503: PPUSH
55504: CALL_OW 12
55508: PUSH
55509: LD_INT 0
55511: PUSH
55512: LD_INT 0
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: ST_TO_ADDR
// end ;
55521: LD_VAR 0 1
55525: RET
// export function PrepareApemanEngineer ( ) ; begin
55526: LD_INT 0
55528: PPUSH
// uc_nation := 0 ;
55529: LD_ADDR_OWVAR 21
55533: PUSH
55534: LD_INT 0
55536: ST_TO_ADDR
// hc_sex := sex_male ;
55537: LD_ADDR_OWVAR 27
55541: PUSH
55542: LD_INT 1
55544: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
55545: LD_ADDR_OWVAR 28
55549: PUSH
55550: LD_INT 16
55552: ST_TO_ADDR
// hc_gallery :=  ;
55553: LD_ADDR_OWVAR 33
55557: PUSH
55558: LD_STRING 
55560: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55561: LD_ADDR_OWVAR 31
55565: PUSH
55566: LD_INT 0
55568: PPUSH
55569: LD_INT 3
55571: PPUSH
55572: CALL_OW 12
55576: PUSH
55577: LD_INT 0
55579: PPUSH
55580: LD_INT 3
55582: PPUSH
55583: CALL_OW 12
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: ST_TO_ADDR
// end ;
55600: LD_VAR 0 1
55604: RET
// export function PrepareApeman ( agressivity ) ; begin
55605: LD_INT 0
55607: PPUSH
// uc_side := 0 ;
55608: LD_ADDR_OWVAR 20
55612: PUSH
55613: LD_INT 0
55615: ST_TO_ADDR
// uc_nation := 0 ;
55616: LD_ADDR_OWVAR 21
55620: PUSH
55621: LD_INT 0
55623: ST_TO_ADDR
// hc_sex := sex_male ;
55624: LD_ADDR_OWVAR 27
55628: PUSH
55629: LD_INT 1
55631: ST_TO_ADDR
// hc_class := class_apeman ;
55632: LD_ADDR_OWVAR 28
55636: PUSH
55637: LD_INT 12
55639: ST_TO_ADDR
// hc_gallery :=  ;
55640: LD_ADDR_OWVAR 33
55644: PUSH
55645: LD_STRING 
55647: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55648: LD_ADDR_OWVAR 35
55652: PUSH
55653: LD_VAR 0 1
55657: NEG
55658: PPUSH
55659: LD_VAR 0 1
55663: PPUSH
55664: CALL_OW 12
55668: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55669: LD_ADDR_OWVAR 31
55673: PUSH
55674: LD_INT 0
55676: PPUSH
55677: LD_INT 3
55679: PPUSH
55680: CALL_OW 12
55684: PUSH
55685: LD_INT 0
55687: PPUSH
55688: LD_INT 3
55690: PPUSH
55691: CALL_OW 12
55695: PUSH
55696: LD_INT 0
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: ST_TO_ADDR
// end ;
55708: LD_VAR 0 2
55712: RET
// export function PrepareTiger ( agressivity ) ; begin
55713: LD_INT 0
55715: PPUSH
// uc_side := 0 ;
55716: LD_ADDR_OWVAR 20
55720: PUSH
55721: LD_INT 0
55723: ST_TO_ADDR
// uc_nation := 0 ;
55724: LD_ADDR_OWVAR 21
55728: PUSH
55729: LD_INT 0
55731: ST_TO_ADDR
// hc_class := class_tiger ;
55732: LD_ADDR_OWVAR 28
55736: PUSH
55737: LD_INT 14
55739: ST_TO_ADDR
// hc_gallery :=  ;
55740: LD_ADDR_OWVAR 33
55744: PUSH
55745: LD_STRING 
55747: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55748: LD_ADDR_OWVAR 35
55752: PUSH
55753: LD_VAR 0 1
55757: NEG
55758: PPUSH
55759: LD_VAR 0 1
55763: PPUSH
55764: CALL_OW 12
55768: ST_TO_ADDR
// end ;
55769: LD_VAR 0 2
55773: RET
// export function PrepareEnchidna ( ) ; begin
55774: LD_INT 0
55776: PPUSH
// uc_side := 0 ;
55777: LD_ADDR_OWVAR 20
55781: PUSH
55782: LD_INT 0
55784: ST_TO_ADDR
// uc_nation := 0 ;
55785: LD_ADDR_OWVAR 21
55789: PUSH
55790: LD_INT 0
55792: ST_TO_ADDR
// hc_class := class_baggie ;
55793: LD_ADDR_OWVAR 28
55797: PUSH
55798: LD_INT 13
55800: ST_TO_ADDR
// hc_gallery :=  ;
55801: LD_ADDR_OWVAR 33
55805: PUSH
55806: LD_STRING 
55808: ST_TO_ADDR
// end ;
55809: LD_VAR 0 1
55813: RET
// export function PrepareFrog ( ) ; begin
55814: LD_INT 0
55816: PPUSH
// uc_side := 0 ;
55817: LD_ADDR_OWVAR 20
55821: PUSH
55822: LD_INT 0
55824: ST_TO_ADDR
// uc_nation := 0 ;
55825: LD_ADDR_OWVAR 21
55829: PUSH
55830: LD_INT 0
55832: ST_TO_ADDR
// hc_class := class_frog ;
55833: LD_ADDR_OWVAR 28
55837: PUSH
55838: LD_INT 19
55840: ST_TO_ADDR
// hc_gallery :=  ;
55841: LD_ADDR_OWVAR 33
55845: PUSH
55846: LD_STRING 
55848: ST_TO_ADDR
// end ;
55849: LD_VAR 0 1
55853: RET
// export function PrepareFish ( ) ; begin
55854: LD_INT 0
55856: PPUSH
// uc_side := 0 ;
55857: LD_ADDR_OWVAR 20
55861: PUSH
55862: LD_INT 0
55864: ST_TO_ADDR
// uc_nation := 0 ;
55865: LD_ADDR_OWVAR 21
55869: PUSH
55870: LD_INT 0
55872: ST_TO_ADDR
// hc_class := class_fish ;
55873: LD_ADDR_OWVAR 28
55877: PUSH
55878: LD_INT 20
55880: ST_TO_ADDR
// hc_gallery :=  ;
55881: LD_ADDR_OWVAR 33
55885: PUSH
55886: LD_STRING 
55888: ST_TO_ADDR
// end ;
55889: LD_VAR 0 1
55893: RET
// export function PrepareBird ( ) ; begin
55894: LD_INT 0
55896: PPUSH
// uc_side := 0 ;
55897: LD_ADDR_OWVAR 20
55901: PUSH
55902: LD_INT 0
55904: ST_TO_ADDR
// uc_nation := 0 ;
55905: LD_ADDR_OWVAR 21
55909: PUSH
55910: LD_INT 0
55912: ST_TO_ADDR
// hc_class := class_phororhacos ;
55913: LD_ADDR_OWVAR 28
55917: PUSH
55918: LD_INT 18
55920: ST_TO_ADDR
// hc_gallery :=  ;
55921: LD_ADDR_OWVAR 33
55925: PUSH
55926: LD_STRING 
55928: ST_TO_ADDR
// end ;
55929: LD_VAR 0 1
55933: RET
// export function PrepareHorse ( ) ; begin
55934: LD_INT 0
55936: PPUSH
// uc_side := 0 ;
55937: LD_ADDR_OWVAR 20
55941: PUSH
55942: LD_INT 0
55944: ST_TO_ADDR
// uc_nation := 0 ;
55945: LD_ADDR_OWVAR 21
55949: PUSH
55950: LD_INT 0
55952: ST_TO_ADDR
// hc_class := class_horse ;
55953: LD_ADDR_OWVAR 28
55957: PUSH
55958: LD_INT 21
55960: ST_TO_ADDR
// hc_gallery :=  ;
55961: LD_ADDR_OWVAR 33
55965: PUSH
55966: LD_STRING 
55968: ST_TO_ADDR
// end ;
55969: LD_VAR 0 1
55973: RET
// export function PrepareMastodont ( ) ; begin
55974: LD_INT 0
55976: PPUSH
// uc_side := 0 ;
55977: LD_ADDR_OWVAR 20
55981: PUSH
55982: LD_INT 0
55984: ST_TO_ADDR
// uc_nation := 0 ;
55985: LD_ADDR_OWVAR 21
55989: PUSH
55990: LD_INT 0
55992: ST_TO_ADDR
// vc_chassis := class_mastodont ;
55993: LD_ADDR_OWVAR 37
55997: PUSH
55998: LD_INT 31
56000: ST_TO_ADDR
// vc_control := control_rider ;
56001: LD_ADDR_OWVAR 38
56005: PUSH
56006: LD_INT 4
56008: ST_TO_ADDR
// end ;
56009: LD_VAR 0 1
56013: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56014: LD_INT 0
56016: PPUSH
56017: PPUSH
56018: PPUSH
// uc_side = 0 ;
56019: LD_ADDR_OWVAR 20
56023: PUSH
56024: LD_INT 0
56026: ST_TO_ADDR
// uc_nation = 0 ;
56027: LD_ADDR_OWVAR 21
56031: PUSH
56032: LD_INT 0
56034: ST_TO_ADDR
// InitHc_All ( ) ;
56035: CALL_OW 584
// InitVc ;
56039: CALL_OW 20
// if mastodonts then
56043: LD_VAR 0 6
56047: IFFALSE 56114
// for i = 1 to mastodonts do
56049: LD_ADDR_VAR 0 11
56053: PUSH
56054: DOUBLE
56055: LD_INT 1
56057: DEC
56058: ST_TO_ADDR
56059: LD_VAR 0 6
56063: PUSH
56064: FOR_TO
56065: IFFALSE 56112
// begin vc_chassis := 31 ;
56067: LD_ADDR_OWVAR 37
56071: PUSH
56072: LD_INT 31
56074: ST_TO_ADDR
// vc_control := control_rider ;
56075: LD_ADDR_OWVAR 38
56079: PUSH
56080: LD_INT 4
56082: ST_TO_ADDR
// animal := CreateVehicle ;
56083: LD_ADDR_VAR 0 12
56087: PUSH
56088: CALL_OW 45
56092: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56093: LD_VAR 0 12
56097: PPUSH
56098: LD_VAR 0 8
56102: PPUSH
56103: LD_INT 0
56105: PPUSH
56106: CALL 58249 0 3
// end ;
56110: GO 56064
56112: POP
56113: POP
// if horses then
56114: LD_VAR 0 5
56118: IFFALSE 56185
// for i = 1 to horses do
56120: LD_ADDR_VAR 0 11
56124: PUSH
56125: DOUBLE
56126: LD_INT 1
56128: DEC
56129: ST_TO_ADDR
56130: LD_VAR 0 5
56134: PUSH
56135: FOR_TO
56136: IFFALSE 56183
// begin hc_class := 21 ;
56138: LD_ADDR_OWVAR 28
56142: PUSH
56143: LD_INT 21
56145: ST_TO_ADDR
// hc_gallery :=  ;
56146: LD_ADDR_OWVAR 33
56150: PUSH
56151: LD_STRING 
56153: ST_TO_ADDR
// animal := CreateHuman ;
56154: LD_ADDR_VAR 0 12
56158: PUSH
56159: CALL_OW 44
56163: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56164: LD_VAR 0 12
56168: PPUSH
56169: LD_VAR 0 8
56173: PPUSH
56174: LD_INT 0
56176: PPUSH
56177: CALL 58249 0 3
// end ;
56181: GO 56135
56183: POP
56184: POP
// if birds then
56185: LD_VAR 0 1
56189: IFFALSE 56256
// for i = 1 to birds do
56191: LD_ADDR_VAR 0 11
56195: PUSH
56196: DOUBLE
56197: LD_INT 1
56199: DEC
56200: ST_TO_ADDR
56201: LD_VAR 0 1
56205: PUSH
56206: FOR_TO
56207: IFFALSE 56254
// begin hc_class = 18 ;
56209: LD_ADDR_OWVAR 28
56213: PUSH
56214: LD_INT 18
56216: ST_TO_ADDR
// hc_gallery =  ;
56217: LD_ADDR_OWVAR 33
56221: PUSH
56222: LD_STRING 
56224: ST_TO_ADDR
// animal := CreateHuman ;
56225: LD_ADDR_VAR 0 12
56229: PUSH
56230: CALL_OW 44
56234: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56235: LD_VAR 0 12
56239: PPUSH
56240: LD_VAR 0 8
56244: PPUSH
56245: LD_INT 0
56247: PPUSH
56248: CALL 58249 0 3
// end ;
56252: GO 56206
56254: POP
56255: POP
// if tigers then
56256: LD_VAR 0 2
56260: IFFALSE 56344
// for i = 1 to tigers do
56262: LD_ADDR_VAR 0 11
56266: PUSH
56267: DOUBLE
56268: LD_INT 1
56270: DEC
56271: ST_TO_ADDR
56272: LD_VAR 0 2
56276: PUSH
56277: FOR_TO
56278: IFFALSE 56342
// begin hc_class = class_tiger ;
56280: LD_ADDR_OWVAR 28
56284: PUSH
56285: LD_INT 14
56287: ST_TO_ADDR
// hc_gallery =  ;
56288: LD_ADDR_OWVAR 33
56292: PUSH
56293: LD_STRING 
56295: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56296: LD_ADDR_OWVAR 35
56300: PUSH
56301: LD_INT 7
56303: NEG
56304: PPUSH
56305: LD_INT 7
56307: PPUSH
56308: CALL_OW 12
56312: ST_TO_ADDR
// animal := CreateHuman ;
56313: LD_ADDR_VAR 0 12
56317: PUSH
56318: CALL_OW 44
56322: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56323: LD_VAR 0 12
56327: PPUSH
56328: LD_VAR 0 8
56332: PPUSH
56333: LD_INT 0
56335: PPUSH
56336: CALL 58249 0 3
// end ;
56340: GO 56277
56342: POP
56343: POP
// if apemans then
56344: LD_VAR 0 3
56348: IFFALSE 56471
// for i = 1 to apemans do
56350: LD_ADDR_VAR 0 11
56354: PUSH
56355: DOUBLE
56356: LD_INT 1
56358: DEC
56359: ST_TO_ADDR
56360: LD_VAR 0 3
56364: PUSH
56365: FOR_TO
56366: IFFALSE 56469
// begin hc_class = class_apeman ;
56368: LD_ADDR_OWVAR 28
56372: PUSH
56373: LD_INT 12
56375: ST_TO_ADDR
// hc_gallery =  ;
56376: LD_ADDR_OWVAR 33
56380: PUSH
56381: LD_STRING 
56383: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56384: LD_ADDR_OWVAR 35
56388: PUSH
56389: LD_INT 2
56391: NEG
56392: PPUSH
56393: LD_INT 2
56395: PPUSH
56396: CALL_OW 12
56400: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56401: LD_ADDR_OWVAR 31
56405: PUSH
56406: LD_INT 1
56408: PPUSH
56409: LD_INT 3
56411: PPUSH
56412: CALL_OW 12
56416: PUSH
56417: LD_INT 1
56419: PPUSH
56420: LD_INT 3
56422: PPUSH
56423: CALL_OW 12
56427: PUSH
56428: LD_INT 0
56430: PUSH
56431: LD_INT 0
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: ST_TO_ADDR
// animal := CreateHuman ;
56440: LD_ADDR_VAR 0 12
56444: PUSH
56445: CALL_OW 44
56449: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56450: LD_VAR 0 12
56454: PPUSH
56455: LD_VAR 0 8
56459: PPUSH
56460: LD_INT 0
56462: PPUSH
56463: CALL 58249 0 3
// end ;
56467: GO 56365
56469: POP
56470: POP
// if enchidnas then
56471: LD_VAR 0 4
56475: IFFALSE 56542
// for i = 1 to enchidnas do
56477: LD_ADDR_VAR 0 11
56481: PUSH
56482: DOUBLE
56483: LD_INT 1
56485: DEC
56486: ST_TO_ADDR
56487: LD_VAR 0 4
56491: PUSH
56492: FOR_TO
56493: IFFALSE 56540
// begin hc_class = 13 ;
56495: LD_ADDR_OWVAR 28
56499: PUSH
56500: LD_INT 13
56502: ST_TO_ADDR
// hc_gallery =  ;
56503: LD_ADDR_OWVAR 33
56507: PUSH
56508: LD_STRING 
56510: ST_TO_ADDR
// animal := CreateHuman ;
56511: LD_ADDR_VAR 0 12
56515: PUSH
56516: CALL_OW 44
56520: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56521: LD_VAR 0 12
56525: PPUSH
56526: LD_VAR 0 8
56530: PPUSH
56531: LD_INT 0
56533: PPUSH
56534: CALL 58249 0 3
// end ;
56538: GO 56492
56540: POP
56541: POP
// if fishes then
56542: LD_VAR 0 7
56546: IFFALSE 56613
// for i = 1 to fishes do
56548: LD_ADDR_VAR 0 11
56552: PUSH
56553: DOUBLE
56554: LD_INT 1
56556: DEC
56557: ST_TO_ADDR
56558: LD_VAR 0 7
56562: PUSH
56563: FOR_TO
56564: IFFALSE 56611
// begin hc_class = 20 ;
56566: LD_ADDR_OWVAR 28
56570: PUSH
56571: LD_INT 20
56573: ST_TO_ADDR
// hc_gallery =  ;
56574: LD_ADDR_OWVAR 33
56578: PUSH
56579: LD_STRING 
56581: ST_TO_ADDR
// animal := CreateHuman ;
56582: LD_ADDR_VAR 0 12
56586: PUSH
56587: CALL_OW 44
56591: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56592: LD_VAR 0 12
56596: PPUSH
56597: LD_VAR 0 9
56601: PPUSH
56602: LD_INT 0
56604: PPUSH
56605: CALL 58249 0 3
// end ;
56609: GO 56563
56611: POP
56612: POP
// end ;
56613: LD_VAR 0 10
56617: RET
// export function WantHeal ( sci , unit ) ; begin
56618: LD_INT 0
56620: PPUSH
// if GetTaskList ( sci ) > 0 then
56621: LD_VAR 0 1
56625: PPUSH
56626: CALL_OW 437
56630: PUSH
56631: LD_INT 0
56633: GREATER
56634: IFFALSE 56704
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56636: LD_VAR 0 1
56640: PPUSH
56641: CALL_OW 437
56645: PUSH
56646: LD_INT 1
56648: ARRAY
56649: PUSH
56650: LD_INT 1
56652: ARRAY
56653: PUSH
56654: LD_STRING l
56656: EQUAL
56657: PUSH
56658: LD_VAR 0 1
56662: PPUSH
56663: CALL_OW 437
56667: PUSH
56668: LD_INT 1
56670: ARRAY
56671: PUSH
56672: LD_INT 4
56674: ARRAY
56675: PUSH
56676: LD_VAR 0 2
56680: EQUAL
56681: AND
56682: IFFALSE 56694
// result := true else
56684: LD_ADDR_VAR 0 3
56688: PUSH
56689: LD_INT 1
56691: ST_TO_ADDR
56692: GO 56702
// result := false ;
56694: LD_ADDR_VAR 0 3
56698: PUSH
56699: LD_INT 0
56701: ST_TO_ADDR
// end else
56702: GO 56712
// result := false ;
56704: LD_ADDR_VAR 0 3
56708: PUSH
56709: LD_INT 0
56711: ST_TO_ADDR
// end ;
56712: LD_VAR 0 3
56716: RET
// export function HealTarget ( sci ) ; begin
56717: LD_INT 0
56719: PPUSH
// if not sci then
56720: LD_VAR 0 1
56724: NOT
56725: IFFALSE 56729
// exit ;
56727: GO 56794
// result := 0 ;
56729: LD_ADDR_VAR 0 2
56733: PUSH
56734: LD_INT 0
56736: ST_TO_ADDR
// if GetTaskList ( sci ) then
56737: LD_VAR 0 1
56741: PPUSH
56742: CALL_OW 437
56746: IFFALSE 56794
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56748: LD_VAR 0 1
56752: PPUSH
56753: CALL_OW 437
56757: PUSH
56758: LD_INT 1
56760: ARRAY
56761: PUSH
56762: LD_INT 1
56764: ARRAY
56765: PUSH
56766: LD_STRING l
56768: EQUAL
56769: IFFALSE 56794
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56771: LD_ADDR_VAR 0 2
56775: PUSH
56776: LD_VAR 0 1
56780: PPUSH
56781: CALL_OW 437
56785: PUSH
56786: LD_INT 1
56788: ARRAY
56789: PUSH
56790: LD_INT 4
56792: ARRAY
56793: ST_TO_ADDR
// end ;
56794: LD_VAR 0 2
56798: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56799: LD_INT 0
56801: PPUSH
56802: PPUSH
56803: PPUSH
56804: PPUSH
// if not base_units then
56805: LD_VAR 0 1
56809: NOT
56810: IFFALSE 56814
// exit ;
56812: GO 56901
// result := false ;
56814: LD_ADDR_VAR 0 2
56818: PUSH
56819: LD_INT 0
56821: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56822: LD_ADDR_VAR 0 5
56826: PUSH
56827: LD_VAR 0 1
56831: PPUSH
56832: LD_INT 21
56834: PUSH
56835: LD_INT 3
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PPUSH
56842: CALL_OW 72
56846: ST_TO_ADDR
// if not tmp then
56847: LD_VAR 0 5
56851: NOT
56852: IFFALSE 56856
// exit ;
56854: GO 56901
// for i in tmp do
56856: LD_ADDR_VAR 0 3
56860: PUSH
56861: LD_VAR 0 5
56865: PUSH
56866: FOR_IN
56867: IFFALSE 56899
// begin result := EnemyInRange ( i , 22 ) ;
56869: LD_ADDR_VAR 0 2
56873: PUSH
56874: LD_VAR 0 3
56878: PPUSH
56879: LD_INT 22
56881: PPUSH
56882: CALL 54587 0 2
56886: ST_TO_ADDR
// if result then
56887: LD_VAR 0 2
56891: IFFALSE 56897
// exit ;
56893: POP
56894: POP
56895: GO 56901
// end ;
56897: GO 56866
56899: POP
56900: POP
// end ;
56901: LD_VAR 0 2
56905: RET
// export function FilterByTag ( units , tag ) ; begin
56906: LD_INT 0
56908: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
56909: LD_ADDR_VAR 0 3
56913: PUSH
56914: LD_VAR 0 1
56918: PPUSH
56919: LD_INT 120
56921: PUSH
56922: LD_VAR 0 2
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PPUSH
56931: CALL_OW 72
56935: ST_TO_ADDR
// end ;
56936: LD_VAR 0 3
56940: RET
// export function IsDriver ( un ) ; begin
56941: LD_INT 0
56943: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56944: LD_ADDR_VAR 0 2
56948: PUSH
56949: LD_VAR 0 1
56953: PUSH
56954: LD_INT 55
56956: PUSH
56957: EMPTY
56958: LIST
56959: PPUSH
56960: CALL_OW 69
56964: IN
56965: ST_TO_ADDR
// end ;
56966: LD_VAR 0 2
56970: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56971: LD_INT 0
56973: PPUSH
56974: PPUSH
// list := [ ] ;
56975: LD_ADDR_VAR 0 5
56979: PUSH
56980: EMPTY
56981: ST_TO_ADDR
// case d of 0 :
56982: LD_VAR 0 3
56986: PUSH
56987: LD_INT 0
56989: DOUBLE
56990: EQUAL
56991: IFTRUE 56995
56993: GO 57128
56995: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56996: LD_ADDR_VAR 0 5
57000: PUSH
57001: LD_VAR 0 1
57005: PUSH
57006: LD_INT 4
57008: MINUS
57009: PUSH
57010: LD_VAR 0 2
57014: PUSH
57015: LD_INT 4
57017: MINUS
57018: PUSH
57019: LD_INT 2
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: LIST
57026: PUSH
57027: LD_VAR 0 1
57031: PUSH
57032: LD_INT 3
57034: MINUS
57035: PUSH
57036: LD_VAR 0 2
57040: PUSH
57041: LD_INT 1
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: LIST
57048: PUSH
57049: LD_VAR 0 1
57053: PUSH
57054: LD_INT 4
57056: PLUS
57057: PUSH
57058: LD_VAR 0 2
57062: PUSH
57063: LD_INT 4
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: LIST
57070: PUSH
57071: LD_VAR 0 1
57075: PUSH
57076: LD_INT 3
57078: PLUS
57079: PUSH
57080: LD_VAR 0 2
57084: PUSH
57085: LD_INT 3
57087: PLUS
57088: PUSH
57089: LD_INT 5
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: LIST
57096: PUSH
57097: LD_VAR 0 1
57101: PUSH
57102: LD_VAR 0 2
57106: PUSH
57107: LD_INT 4
57109: PLUS
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: LIST
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: ST_TO_ADDR
// end ; 1 :
57126: GO 57826
57128: LD_INT 1
57130: DOUBLE
57131: EQUAL
57132: IFTRUE 57136
57134: GO 57269
57136: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57137: LD_ADDR_VAR 0 5
57141: PUSH
57142: LD_VAR 0 1
57146: PUSH
57147: LD_VAR 0 2
57151: PUSH
57152: LD_INT 4
57154: MINUS
57155: PUSH
57156: LD_INT 3
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: LIST
57163: PUSH
57164: LD_VAR 0 1
57168: PUSH
57169: LD_INT 3
57171: MINUS
57172: PUSH
57173: LD_VAR 0 2
57177: PUSH
57178: LD_INT 3
57180: MINUS
57181: PUSH
57182: LD_INT 2
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: LIST
57189: PUSH
57190: LD_VAR 0 1
57194: PUSH
57195: LD_INT 4
57197: MINUS
57198: PUSH
57199: LD_VAR 0 2
57203: PUSH
57204: LD_INT 1
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: LIST
57211: PUSH
57212: LD_VAR 0 1
57216: PUSH
57217: LD_VAR 0 2
57221: PUSH
57222: LD_INT 3
57224: PLUS
57225: PUSH
57226: LD_INT 0
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: LIST
57233: PUSH
57234: LD_VAR 0 1
57238: PUSH
57239: LD_INT 4
57241: PLUS
57242: PUSH
57243: LD_VAR 0 2
57247: PUSH
57248: LD_INT 4
57250: PLUS
57251: PUSH
57252: LD_INT 5
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: LIST
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: ST_TO_ADDR
// end ; 2 :
57267: GO 57826
57269: LD_INT 2
57271: DOUBLE
57272: EQUAL
57273: IFTRUE 57277
57275: GO 57406
57277: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57278: LD_ADDR_VAR 0 5
57282: PUSH
57283: LD_VAR 0 1
57287: PUSH
57288: LD_VAR 0 2
57292: PUSH
57293: LD_INT 3
57295: MINUS
57296: PUSH
57297: LD_INT 3
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: LIST
57304: PUSH
57305: LD_VAR 0 1
57309: PUSH
57310: LD_INT 4
57312: PLUS
57313: PUSH
57314: LD_VAR 0 2
57318: PUSH
57319: LD_INT 4
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: LIST
57326: PUSH
57327: LD_VAR 0 1
57331: PUSH
57332: LD_VAR 0 2
57336: PUSH
57337: LD_INT 4
57339: PLUS
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: LIST
57348: PUSH
57349: LD_VAR 0 1
57353: PUSH
57354: LD_INT 3
57356: MINUS
57357: PUSH
57358: LD_VAR 0 2
57362: PUSH
57363: LD_INT 1
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: LIST
57370: PUSH
57371: LD_VAR 0 1
57375: PUSH
57376: LD_INT 4
57378: MINUS
57379: PUSH
57380: LD_VAR 0 2
57384: PUSH
57385: LD_INT 4
57387: MINUS
57388: PUSH
57389: LD_INT 2
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: LIST
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: ST_TO_ADDR
// end ; 3 :
57404: GO 57826
57406: LD_INT 3
57408: DOUBLE
57409: EQUAL
57410: IFTRUE 57414
57412: GO 57547
57414: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57415: LD_ADDR_VAR 0 5
57419: PUSH
57420: LD_VAR 0 1
57424: PUSH
57425: LD_INT 3
57427: PLUS
57428: PUSH
57429: LD_VAR 0 2
57433: PUSH
57434: LD_INT 4
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: LIST
57441: PUSH
57442: LD_VAR 0 1
57446: PUSH
57447: LD_INT 4
57449: PLUS
57450: PUSH
57451: LD_VAR 0 2
57455: PUSH
57456: LD_INT 4
57458: PLUS
57459: PUSH
57460: LD_INT 5
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: LIST
57467: PUSH
57468: LD_VAR 0 1
57472: PUSH
57473: LD_INT 4
57475: MINUS
57476: PUSH
57477: LD_VAR 0 2
57481: PUSH
57482: LD_INT 1
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: LIST
57489: PUSH
57490: LD_VAR 0 1
57494: PUSH
57495: LD_VAR 0 2
57499: PUSH
57500: LD_INT 4
57502: MINUS
57503: PUSH
57504: LD_INT 3
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: LIST
57511: PUSH
57512: LD_VAR 0 1
57516: PUSH
57517: LD_INT 3
57519: MINUS
57520: PUSH
57521: LD_VAR 0 2
57525: PUSH
57526: LD_INT 3
57528: MINUS
57529: PUSH
57530: LD_INT 2
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: LIST
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: ST_TO_ADDR
// end ; 4 :
57545: GO 57826
57547: LD_INT 4
57549: DOUBLE
57550: EQUAL
57551: IFTRUE 57555
57553: GO 57688
57555: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57556: LD_ADDR_VAR 0 5
57560: PUSH
57561: LD_VAR 0 1
57565: PUSH
57566: LD_VAR 0 2
57570: PUSH
57571: LD_INT 4
57573: PLUS
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: LIST
57582: PUSH
57583: LD_VAR 0 1
57587: PUSH
57588: LD_INT 3
57590: PLUS
57591: PUSH
57592: LD_VAR 0 2
57596: PUSH
57597: LD_INT 3
57599: PLUS
57600: PUSH
57601: LD_INT 5
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: LIST
57608: PUSH
57609: LD_VAR 0 1
57613: PUSH
57614: LD_INT 4
57616: PLUS
57617: PUSH
57618: LD_VAR 0 2
57622: PUSH
57623: LD_INT 4
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: LIST
57630: PUSH
57631: LD_VAR 0 1
57635: PUSH
57636: LD_VAR 0 2
57640: PUSH
57641: LD_INT 3
57643: MINUS
57644: PUSH
57645: LD_INT 3
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: LIST
57652: PUSH
57653: LD_VAR 0 1
57657: PUSH
57658: LD_INT 4
57660: MINUS
57661: PUSH
57662: LD_VAR 0 2
57666: PUSH
57667: LD_INT 4
57669: MINUS
57670: PUSH
57671: LD_INT 2
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: LIST
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: ST_TO_ADDR
// end ; 5 :
57686: GO 57826
57688: LD_INT 5
57690: DOUBLE
57691: EQUAL
57692: IFTRUE 57696
57694: GO 57825
57696: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57697: LD_ADDR_VAR 0 5
57701: PUSH
57702: LD_VAR 0 1
57706: PUSH
57707: LD_INT 4
57709: MINUS
57710: PUSH
57711: LD_VAR 0 2
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: LIST
57723: PUSH
57724: LD_VAR 0 1
57728: PUSH
57729: LD_VAR 0 2
57733: PUSH
57734: LD_INT 4
57736: MINUS
57737: PUSH
57738: LD_INT 3
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: LIST
57745: PUSH
57746: LD_VAR 0 1
57750: PUSH
57751: LD_INT 4
57753: PLUS
57754: PUSH
57755: LD_VAR 0 2
57759: PUSH
57760: LD_INT 4
57762: PLUS
57763: PUSH
57764: LD_INT 5
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: LIST
57771: PUSH
57772: LD_VAR 0 1
57776: PUSH
57777: LD_INT 3
57779: PLUS
57780: PUSH
57781: LD_VAR 0 2
57785: PUSH
57786: LD_INT 4
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: LIST
57793: PUSH
57794: LD_VAR 0 1
57798: PUSH
57799: LD_VAR 0 2
57803: PUSH
57804: LD_INT 3
57806: PLUS
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: LIST
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: ST_TO_ADDR
// end ; end ;
57823: GO 57826
57825: POP
// result := list ;
57826: LD_ADDR_VAR 0 4
57830: PUSH
57831: LD_VAR 0 5
57835: ST_TO_ADDR
// end ;
57836: LD_VAR 0 4
57840: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57841: LD_INT 0
57843: PPUSH
57844: PPUSH
57845: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57846: LD_VAR 0 1
57850: NOT
57851: PUSH
57852: LD_VAR 0 2
57856: PUSH
57857: LD_INT 1
57859: PUSH
57860: LD_INT 2
57862: PUSH
57863: LD_INT 3
57865: PUSH
57866: LD_INT 4
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: IN
57875: NOT
57876: OR
57877: IFFALSE 57881
// exit ;
57879: GO 57973
// tmp := [ ] ;
57881: LD_ADDR_VAR 0 5
57885: PUSH
57886: EMPTY
57887: ST_TO_ADDR
// for i in units do
57888: LD_ADDR_VAR 0 4
57892: PUSH
57893: LD_VAR 0 1
57897: PUSH
57898: FOR_IN
57899: IFFALSE 57942
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
57901: LD_ADDR_VAR 0 5
57905: PUSH
57906: LD_VAR 0 5
57910: PPUSH
57911: LD_VAR 0 5
57915: PUSH
57916: LD_INT 1
57918: PLUS
57919: PPUSH
57920: LD_VAR 0 4
57924: PPUSH
57925: LD_VAR 0 2
57929: PPUSH
57930: CALL_OW 259
57934: PPUSH
57935: CALL_OW 2
57939: ST_TO_ADDR
57940: GO 57898
57942: POP
57943: POP
// if not tmp then
57944: LD_VAR 0 5
57948: NOT
57949: IFFALSE 57953
// exit ;
57951: GO 57973
// result := SortListByListDesc ( units , tmp ) ;
57953: LD_ADDR_VAR 0 3
57957: PUSH
57958: LD_VAR 0 1
57962: PPUSH
57963: LD_VAR 0 5
57967: PPUSH
57968: CALL_OW 77
57972: ST_TO_ADDR
// end ;
57973: LD_VAR 0 3
57977: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57978: LD_INT 0
57980: PPUSH
57981: PPUSH
57982: PPUSH
// result := false ;
57983: LD_ADDR_VAR 0 3
57987: PUSH
57988: LD_INT 0
57990: ST_TO_ADDR
// x := GetX ( building ) ;
57991: LD_ADDR_VAR 0 4
57995: PUSH
57996: LD_VAR 0 2
58000: PPUSH
58001: CALL_OW 250
58005: ST_TO_ADDR
// y := GetY ( building ) ;
58006: LD_ADDR_VAR 0 5
58010: PUSH
58011: LD_VAR 0 2
58015: PPUSH
58016: CALL_OW 251
58020: ST_TO_ADDR
// if not building or not x or not y then
58021: LD_VAR 0 2
58025: NOT
58026: PUSH
58027: LD_VAR 0 4
58031: NOT
58032: OR
58033: PUSH
58034: LD_VAR 0 5
58038: NOT
58039: OR
58040: IFFALSE 58044
// exit ;
58042: GO 58136
// if GetTaskList ( unit ) then
58044: LD_VAR 0 1
58048: PPUSH
58049: CALL_OW 437
58053: IFFALSE 58136
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58055: LD_STRING e
58057: PUSH
58058: LD_VAR 0 1
58062: PPUSH
58063: CALL_OW 437
58067: PUSH
58068: LD_INT 1
58070: ARRAY
58071: PUSH
58072: LD_INT 1
58074: ARRAY
58075: EQUAL
58076: PUSH
58077: LD_VAR 0 4
58081: PUSH
58082: LD_VAR 0 1
58086: PPUSH
58087: CALL_OW 437
58091: PUSH
58092: LD_INT 1
58094: ARRAY
58095: PUSH
58096: LD_INT 2
58098: ARRAY
58099: EQUAL
58100: AND
58101: PUSH
58102: LD_VAR 0 5
58106: PUSH
58107: LD_VAR 0 1
58111: PPUSH
58112: CALL_OW 437
58116: PUSH
58117: LD_INT 1
58119: ARRAY
58120: PUSH
58121: LD_INT 3
58123: ARRAY
58124: EQUAL
58125: AND
58126: IFFALSE 58136
// result := true end ;
58128: LD_ADDR_VAR 0 3
58132: PUSH
58133: LD_INT 1
58135: ST_TO_ADDR
// end ;
58136: LD_VAR 0 3
58140: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58141: LD_INT 0
58143: PPUSH
// result := false ;
58144: LD_ADDR_VAR 0 4
58148: PUSH
58149: LD_INT 0
58151: ST_TO_ADDR
// if GetTaskList ( unit ) then
58152: LD_VAR 0 1
58156: PPUSH
58157: CALL_OW 437
58161: IFFALSE 58244
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58163: LD_STRING M
58165: PUSH
58166: LD_VAR 0 1
58170: PPUSH
58171: CALL_OW 437
58175: PUSH
58176: LD_INT 1
58178: ARRAY
58179: PUSH
58180: LD_INT 1
58182: ARRAY
58183: EQUAL
58184: PUSH
58185: LD_VAR 0 2
58189: PUSH
58190: LD_VAR 0 1
58194: PPUSH
58195: CALL_OW 437
58199: PUSH
58200: LD_INT 1
58202: ARRAY
58203: PUSH
58204: LD_INT 2
58206: ARRAY
58207: EQUAL
58208: AND
58209: PUSH
58210: LD_VAR 0 3
58214: PUSH
58215: LD_VAR 0 1
58219: PPUSH
58220: CALL_OW 437
58224: PUSH
58225: LD_INT 1
58227: ARRAY
58228: PUSH
58229: LD_INT 3
58231: ARRAY
58232: EQUAL
58233: AND
58234: IFFALSE 58244
// result := true ;
58236: LD_ADDR_VAR 0 4
58240: PUSH
58241: LD_INT 1
58243: ST_TO_ADDR
// end ; end ;
58244: LD_VAR 0 4
58248: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58249: LD_INT 0
58251: PPUSH
58252: PPUSH
58253: PPUSH
58254: PPUSH
// if not unit or not area then
58255: LD_VAR 0 1
58259: NOT
58260: PUSH
58261: LD_VAR 0 2
58265: NOT
58266: OR
58267: IFFALSE 58271
// exit ;
58269: GO 58435
// tmp := AreaToList ( area , i ) ;
58271: LD_ADDR_VAR 0 6
58275: PUSH
58276: LD_VAR 0 2
58280: PPUSH
58281: LD_VAR 0 5
58285: PPUSH
58286: CALL_OW 517
58290: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58291: LD_ADDR_VAR 0 5
58295: PUSH
58296: DOUBLE
58297: LD_INT 1
58299: DEC
58300: ST_TO_ADDR
58301: LD_VAR 0 6
58305: PUSH
58306: LD_INT 1
58308: ARRAY
58309: PUSH
58310: FOR_TO
58311: IFFALSE 58433
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58313: LD_ADDR_VAR 0 7
58317: PUSH
58318: LD_VAR 0 6
58322: PUSH
58323: LD_INT 1
58325: ARRAY
58326: PUSH
58327: LD_VAR 0 5
58331: ARRAY
58332: PUSH
58333: LD_VAR 0 6
58337: PUSH
58338: LD_INT 2
58340: ARRAY
58341: PUSH
58342: LD_VAR 0 5
58346: ARRAY
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58352: LD_VAR 0 7
58356: PUSH
58357: LD_INT 1
58359: ARRAY
58360: PPUSH
58361: LD_VAR 0 7
58365: PUSH
58366: LD_INT 2
58368: ARRAY
58369: PPUSH
58370: CALL_OW 428
58374: PUSH
58375: LD_INT 0
58377: EQUAL
58378: IFFALSE 58431
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58380: LD_VAR 0 1
58384: PPUSH
58385: LD_VAR 0 7
58389: PUSH
58390: LD_INT 1
58392: ARRAY
58393: PPUSH
58394: LD_VAR 0 7
58398: PUSH
58399: LD_INT 2
58401: ARRAY
58402: PPUSH
58403: LD_VAR 0 3
58407: PPUSH
58408: CALL_OW 48
// result := IsPlaced ( unit ) ;
58412: LD_ADDR_VAR 0 4
58416: PUSH
58417: LD_VAR 0 1
58421: PPUSH
58422: CALL_OW 305
58426: ST_TO_ADDR
// exit ;
58427: POP
58428: POP
58429: GO 58435
// end ; end ;
58431: GO 58310
58433: POP
58434: POP
// end ;
58435: LD_VAR 0 4
58439: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58440: LD_INT 0
58442: PPUSH
58443: PPUSH
58444: PPUSH
// if not side or side > 8 then
58445: LD_VAR 0 1
58449: NOT
58450: PUSH
58451: LD_VAR 0 1
58455: PUSH
58456: LD_INT 8
58458: GREATER
58459: OR
58460: IFFALSE 58464
// exit ;
58462: GO 58651
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58464: LD_ADDR_VAR 0 4
58468: PUSH
58469: LD_INT 22
58471: PUSH
58472: LD_VAR 0 1
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 21
58483: PUSH
58484: LD_INT 3
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PPUSH
58495: CALL_OW 69
58499: ST_TO_ADDR
// if not tmp then
58500: LD_VAR 0 4
58504: NOT
58505: IFFALSE 58509
// exit ;
58507: GO 58651
// enable_addtolog := true ;
58509: LD_ADDR_OWVAR 81
58513: PUSH
58514: LD_INT 1
58516: ST_TO_ADDR
// AddToLog ( [ ) ;
58517: LD_STRING [
58519: PPUSH
58520: CALL_OW 561
// for i in tmp do
58524: LD_ADDR_VAR 0 3
58528: PUSH
58529: LD_VAR 0 4
58533: PUSH
58534: FOR_IN
58535: IFFALSE 58642
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58537: LD_STRING [
58539: PUSH
58540: LD_VAR 0 3
58544: PPUSH
58545: CALL_OW 266
58549: STR
58550: PUSH
58551: LD_STRING , 
58553: STR
58554: PUSH
58555: LD_VAR 0 3
58559: PPUSH
58560: CALL_OW 250
58564: STR
58565: PUSH
58566: LD_STRING , 
58568: STR
58569: PUSH
58570: LD_VAR 0 3
58574: PPUSH
58575: CALL_OW 251
58579: STR
58580: PUSH
58581: LD_STRING , 
58583: STR
58584: PUSH
58585: LD_VAR 0 3
58589: PPUSH
58590: CALL_OW 254
58594: STR
58595: PUSH
58596: LD_STRING , 
58598: STR
58599: PUSH
58600: LD_VAR 0 3
58604: PPUSH
58605: LD_INT 1
58607: PPUSH
58608: CALL_OW 268
58612: STR
58613: PUSH
58614: LD_STRING , 
58616: STR
58617: PUSH
58618: LD_VAR 0 3
58622: PPUSH
58623: LD_INT 2
58625: PPUSH
58626: CALL_OW 268
58630: STR
58631: PUSH
58632: LD_STRING ],
58634: STR
58635: PPUSH
58636: CALL_OW 561
// end ;
58640: GO 58534
58642: POP
58643: POP
// AddToLog ( ]; ) ;
58644: LD_STRING ];
58646: PPUSH
58647: CALL_OW 561
// end ;
58651: LD_VAR 0 2
58655: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58656: LD_INT 0
58658: PPUSH
58659: PPUSH
58660: PPUSH
58661: PPUSH
58662: PPUSH
// if not area or not rate or not max then
58663: LD_VAR 0 1
58667: NOT
58668: PUSH
58669: LD_VAR 0 2
58673: NOT
58674: OR
58675: PUSH
58676: LD_VAR 0 4
58680: NOT
58681: OR
58682: IFFALSE 58686
// exit ;
58684: GO 58875
// while 1 do
58686: LD_INT 1
58688: IFFALSE 58875
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58690: LD_ADDR_VAR 0 9
58694: PUSH
58695: LD_VAR 0 1
58699: PPUSH
58700: LD_INT 1
58702: PPUSH
58703: CALL_OW 287
58707: PUSH
58708: LD_INT 10
58710: MUL
58711: ST_TO_ADDR
// r := rate / 10 ;
58712: LD_ADDR_VAR 0 7
58716: PUSH
58717: LD_VAR 0 2
58721: PUSH
58722: LD_INT 10
58724: DIVREAL
58725: ST_TO_ADDR
// time := 1 1$00 ;
58726: LD_ADDR_VAR 0 8
58730: PUSH
58731: LD_INT 2100
58733: ST_TO_ADDR
// if amount < min then
58734: LD_VAR 0 9
58738: PUSH
58739: LD_VAR 0 3
58743: LESS
58744: IFFALSE 58762
// r := r * 2 else
58746: LD_ADDR_VAR 0 7
58750: PUSH
58751: LD_VAR 0 7
58755: PUSH
58756: LD_INT 2
58758: MUL
58759: ST_TO_ADDR
58760: GO 58788
// if amount > max then
58762: LD_VAR 0 9
58766: PUSH
58767: LD_VAR 0 4
58771: GREATER
58772: IFFALSE 58788
// r := r / 2 ;
58774: LD_ADDR_VAR 0 7
58778: PUSH
58779: LD_VAR 0 7
58783: PUSH
58784: LD_INT 2
58786: DIVREAL
58787: ST_TO_ADDR
// time := time / r ;
58788: LD_ADDR_VAR 0 8
58792: PUSH
58793: LD_VAR 0 8
58797: PUSH
58798: LD_VAR 0 7
58802: DIVREAL
58803: ST_TO_ADDR
// if time < 0 then
58804: LD_VAR 0 8
58808: PUSH
58809: LD_INT 0
58811: LESS
58812: IFFALSE 58829
// time := time * - 1 ;
58814: LD_ADDR_VAR 0 8
58818: PUSH
58819: LD_VAR 0 8
58823: PUSH
58824: LD_INT 1
58826: NEG
58827: MUL
58828: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
58829: LD_VAR 0 8
58833: PUSH
58834: LD_INT 35
58836: PPUSH
58837: LD_INT 875
58839: PPUSH
58840: CALL_OW 12
58844: PLUS
58845: PPUSH
58846: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58850: LD_INT 1
58852: PPUSH
58853: LD_INT 5
58855: PPUSH
58856: CALL_OW 12
58860: PPUSH
58861: LD_VAR 0 1
58865: PPUSH
58866: LD_INT 1
58868: PPUSH
58869: CALL_OW 55
// end ;
58873: GO 58686
// end ;
58875: LD_VAR 0 5
58879: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58880: LD_INT 0
58882: PPUSH
58883: PPUSH
58884: PPUSH
58885: PPUSH
58886: PPUSH
58887: PPUSH
58888: PPUSH
58889: PPUSH
// if not turrets or not factories then
58890: LD_VAR 0 1
58894: NOT
58895: PUSH
58896: LD_VAR 0 2
58900: NOT
58901: OR
58902: IFFALSE 58906
// exit ;
58904: GO 59213
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58906: LD_ADDR_VAR 0 10
58910: PUSH
58911: LD_INT 5
58913: PUSH
58914: LD_INT 6
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 2
58923: PUSH
58924: LD_INT 4
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 3
58933: PUSH
58934: LD_INT 5
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 24
58948: PUSH
58949: LD_INT 25
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 23
58958: PUSH
58959: LD_INT 27
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 42
58972: PUSH
58973: LD_INT 43
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 44
58982: PUSH
58983: LD_INT 46
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 45
58992: PUSH
58993: LD_INT 47
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: LIST
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: LIST
59009: ST_TO_ADDR
// result := [ ] ;
59010: LD_ADDR_VAR 0 3
59014: PUSH
59015: EMPTY
59016: ST_TO_ADDR
// for i in turrets do
59017: LD_ADDR_VAR 0 4
59021: PUSH
59022: LD_VAR 0 1
59026: PUSH
59027: FOR_IN
59028: IFFALSE 59211
// begin nat := GetNation ( i ) ;
59030: LD_ADDR_VAR 0 7
59034: PUSH
59035: LD_VAR 0 4
59039: PPUSH
59040: CALL_OW 248
59044: ST_TO_ADDR
// weapon := 0 ;
59045: LD_ADDR_VAR 0 8
59049: PUSH
59050: LD_INT 0
59052: ST_TO_ADDR
// if not nat then
59053: LD_VAR 0 7
59057: NOT
59058: IFFALSE 59062
// continue ;
59060: GO 59027
// for j in list [ nat ] do
59062: LD_ADDR_VAR 0 5
59066: PUSH
59067: LD_VAR 0 10
59071: PUSH
59072: LD_VAR 0 7
59076: ARRAY
59077: PUSH
59078: FOR_IN
59079: IFFALSE 59120
// if GetBWeapon ( i ) = j [ 1 ] then
59081: LD_VAR 0 4
59085: PPUSH
59086: CALL_OW 269
59090: PUSH
59091: LD_VAR 0 5
59095: PUSH
59096: LD_INT 1
59098: ARRAY
59099: EQUAL
59100: IFFALSE 59118
// begin weapon := j [ 2 ] ;
59102: LD_ADDR_VAR 0 8
59106: PUSH
59107: LD_VAR 0 5
59111: PUSH
59112: LD_INT 2
59114: ARRAY
59115: ST_TO_ADDR
// break ;
59116: GO 59120
// end ;
59118: GO 59078
59120: POP
59121: POP
// if not weapon then
59122: LD_VAR 0 8
59126: NOT
59127: IFFALSE 59131
// continue ;
59129: GO 59027
// for k in factories do
59131: LD_ADDR_VAR 0 6
59135: PUSH
59136: LD_VAR 0 2
59140: PUSH
59141: FOR_IN
59142: IFFALSE 59207
// begin weapons := AvailableWeaponList ( k ) ;
59144: LD_ADDR_VAR 0 9
59148: PUSH
59149: LD_VAR 0 6
59153: PPUSH
59154: CALL_OW 478
59158: ST_TO_ADDR
// if not weapons then
59159: LD_VAR 0 9
59163: NOT
59164: IFFALSE 59168
// continue ;
59166: GO 59141
// if weapon in weapons then
59168: LD_VAR 0 8
59172: PUSH
59173: LD_VAR 0 9
59177: IN
59178: IFFALSE 59205
// begin result := [ i , weapon ] ;
59180: LD_ADDR_VAR 0 3
59184: PUSH
59185: LD_VAR 0 4
59189: PUSH
59190: LD_VAR 0 8
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: ST_TO_ADDR
// exit ;
59199: POP
59200: POP
59201: POP
59202: POP
59203: GO 59213
// end ; end ;
59205: GO 59141
59207: POP
59208: POP
// end ;
59209: GO 59027
59211: POP
59212: POP
// end ;
59213: LD_VAR 0 3
59217: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59218: LD_INT 0
59220: PPUSH
// if not side or side > 8 then
59221: LD_VAR 0 3
59225: NOT
59226: PUSH
59227: LD_VAR 0 3
59231: PUSH
59232: LD_INT 8
59234: GREATER
59235: OR
59236: IFFALSE 59240
// exit ;
59238: GO 59299
// if not range then
59240: LD_VAR 0 4
59244: NOT
59245: IFFALSE 59256
// range := - 12 ;
59247: LD_ADDR_VAR 0 4
59251: PUSH
59252: LD_INT 12
59254: NEG
59255: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59256: LD_VAR 0 1
59260: PPUSH
59261: LD_VAR 0 2
59265: PPUSH
59266: LD_VAR 0 3
59270: PPUSH
59271: LD_VAR 0 4
59275: PPUSH
59276: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59280: LD_VAR 0 1
59284: PPUSH
59285: LD_VAR 0 2
59289: PPUSH
59290: LD_VAR 0 3
59294: PPUSH
59295: CALL_OW 331
// end ;
59299: LD_VAR 0 5
59303: RET
// export function Video ( mode ) ; begin
59304: LD_INT 0
59306: PPUSH
// ingame_video = mode ;
59307: LD_ADDR_OWVAR 52
59311: PUSH
59312: LD_VAR 0 1
59316: ST_TO_ADDR
// interface_hidden = mode ;
59317: LD_ADDR_OWVAR 54
59321: PUSH
59322: LD_VAR 0 1
59326: ST_TO_ADDR
// end ;
59327: LD_VAR 0 2
59331: RET
// export function Join ( array , element ) ; begin
59332: LD_INT 0
59334: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59335: LD_ADDR_VAR 0 3
59339: PUSH
59340: LD_VAR 0 1
59344: PPUSH
59345: LD_VAR 0 1
59349: PUSH
59350: LD_INT 1
59352: PLUS
59353: PPUSH
59354: LD_VAR 0 2
59358: PPUSH
59359: CALL_OW 1
59363: ST_TO_ADDR
// end ;
59364: LD_VAR 0 3
59368: RET
// export function JoinUnion ( array , element ) ; begin
59369: LD_INT 0
59371: PPUSH
// result := array union element ;
59372: LD_ADDR_VAR 0 3
59376: PUSH
59377: LD_VAR 0 1
59381: PUSH
59382: LD_VAR 0 2
59386: UNION
59387: ST_TO_ADDR
// end ;
59388: LD_VAR 0 3
59392: RET
// export function GetBehemoths ( side ) ; begin
59393: LD_INT 0
59395: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
59396: LD_ADDR_VAR 0 2
59400: PUSH
59401: LD_INT 22
59403: PUSH
59404: LD_VAR 0 1
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 31
59415: PUSH
59416: LD_INT 25
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PPUSH
59427: CALL_OW 69
59431: ST_TO_ADDR
// end ;
59432: LD_VAR 0 2
59436: RET
// export function Shuffle ( array ) ; var i , index ; begin
59437: LD_INT 0
59439: PPUSH
59440: PPUSH
59441: PPUSH
// result := [ ] ;
59442: LD_ADDR_VAR 0 2
59446: PUSH
59447: EMPTY
59448: ST_TO_ADDR
// if not array then
59449: LD_VAR 0 1
59453: NOT
59454: IFFALSE 59458
// exit ;
59456: GO 59557
// Randomize ;
59458: CALL_OW 10
// for i = array downto 1 do
59462: LD_ADDR_VAR 0 3
59466: PUSH
59467: DOUBLE
59468: LD_VAR 0 1
59472: INC
59473: ST_TO_ADDR
59474: LD_INT 1
59476: PUSH
59477: FOR_DOWNTO
59478: IFFALSE 59555
// begin index := rand ( 1 , array ) ;
59480: LD_ADDR_VAR 0 4
59484: PUSH
59485: LD_INT 1
59487: PPUSH
59488: LD_VAR 0 1
59492: PPUSH
59493: CALL_OW 12
59497: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59498: LD_ADDR_VAR 0 2
59502: PUSH
59503: LD_VAR 0 2
59507: PPUSH
59508: LD_VAR 0 2
59512: PUSH
59513: LD_INT 1
59515: PLUS
59516: PPUSH
59517: LD_VAR 0 1
59521: PUSH
59522: LD_VAR 0 4
59526: ARRAY
59527: PPUSH
59528: CALL_OW 2
59532: ST_TO_ADDR
// array := Delete ( array , index ) ;
59533: LD_ADDR_VAR 0 1
59537: PUSH
59538: LD_VAR 0 1
59542: PPUSH
59543: LD_VAR 0 4
59547: PPUSH
59548: CALL_OW 3
59552: ST_TO_ADDR
// end ;
59553: GO 59477
59555: POP
59556: POP
// end ;
59557: LD_VAR 0 2
59561: RET
// export function GetBaseMaterials ( base ) ; begin
59562: LD_INT 0
59564: PPUSH
// result := [ 0 , 0 , 0 ] ;
59565: LD_ADDR_VAR 0 2
59569: PUSH
59570: LD_INT 0
59572: PUSH
59573: LD_INT 0
59575: PUSH
59576: LD_INT 0
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: LIST
59583: ST_TO_ADDR
// if not base then
59584: LD_VAR 0 1
59588: NOT
59589: IFFALSE 59593
// exit ;
59591: GO 59642
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59593: LD_ADDR_VAR 0 2
59597: PUSH
59598: LD_VAR 0 1
59602: PPUSH
59603: LD_INT 1
59605: PPUSH
59606: CALL_OW 275
59610: PUSH
59611: LD_VAR 0 1
59615: PPUSH
59616: LD_INT 2
59618: PPUSH
59619: CALL_OW 275
59623: PUSH
59624: LD_VAR 0 1
59628: PPUSH
59629: LD_INT 3
59631: PPUSH
59632: CALL_OW 275
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: LIST
59641: ST_TO_ADDR
// end ;
59642: LD_VAR 0 2
59646: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59647: LD_INT 0
59649: PPUSH
59650: PPUSH
// result := array ;
59651: LD_ADDR_VAR 0 3
59655: PUSH
59656: LD_VAR 0 1
59660: ST_TO_ADDR
// if size >= result then
59661: LD_VAR 0 2
59665: PUSH
59666: LD_VAR 0 3
59670: GREATEREQUAL
59671: IFFALSE 59675
// exit ;
59673: GO 59725
// if size then
59675: LD_VAR 0 2
59679: IFFALSE 59725
// for i := array downto size do
59681: LD_ADDR_VAR 0 4
59685: PUSH
59686: DOUBLE
59687: LD_VAR 0 1
59691: INC
59692: ST_TO_ADDR
59693: LD_VAR 0 2
59697: PUSH
59698: FOR_DOWNTO
59699: IFFALSE 59723
// result := Delete ( result , result ) ;
59701: LD_ADDR_VAR 0 3
59705: PUSH
59706: LD_VAR 0 3
59710: PPUSH
59711: LD_VAR 0 3
59715: PPUSH
59716: CALL_OW 3
59720: ST_TO_ADDR
59721: GO 59698
59723: POP
59724: POP
// end ;
59725: LD_VAR 0 3
59729: RET
// export function ComExit ( unit ) ; var tmp ; begin
59730: LD_INT 0
59732: PPUSH
59733: PPUSH
// if not IsInUnit ( unit ) then
59734: LD_VAR 0 1
59738: PPUSH
59739: CALL_OW 310
59743: NOT
59744: IFFALSE 59748
// exit ;
59746: GO 59808
// tmp := IsInUnit ( unit ) ;
59748: LD_ADDR_VAR 0 3
59752: PUSH
59753: LD_VAR 0 1
59757: PPUSH
59758: CALL_OW 310
59762: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59763: LD_VAR 0 3
59767: PPUSH
59768: CALL_OW 247
59772: PUSH
59773: LD_INT 2
59775: EQUAL
59776: IFFALSE 59789
// ComExitVehicle ( unit ) else
59778: LD_VAR 0 1
59782: PPUSH
59783: CALL_OW 121
59787: GO 59798
// ComExitBuilding ( unit ) ;
59789: LD_VAR 0 1
59793: PPUSH
59794: CALL_OW 122
// result := tmp ;
59798: LD_ADDR_VAR 0 2
59802: PUSH
59803: LD_VAR 0 3
59807: ST_TO_ADDR
// end ;
59808: LD_VAR 0 2
59812: RET
// export function ComExitAll ( units ) ; var i ; begin
59813: LD_INT 0
59815: PPUSH
59816: PPUSH
// if not units then
59817: LD_VAR 0 1
59821: NOT
59822: IFFALSE 59826
// exit ;
59824: GO 59852
// for i in units do
59826: LD_ADDR_VAR 0 3
59830: PUSH
59831: LD_VAR 0 1
59835: PUSH
59836: FOR_IN
59837: IFFALSE 59850
// ComExit ( i ) ;
59839: LD_VAR 0 3
59843: PPUSH
59844: CALL 59730 0 1
59848: GO 59836
59850: POP
59851: POP
// end ;
59852: LD_VAR 0 2
59856: RET
// export function ResetHc ; begin
59857: LD_INT 0
59859: PPUSH
// InitHc ;
59860: CALL_OW 19
// hc_importance := 0 ;
59864: LD_ADDR_OWVAR 32
59868: PUSH
59869: LD_INT 0
59871: ST_TO_ADDR
// end ;
59872: LD_VAR 0 1
59876: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59877: LD_INT 0
59879: PPUSH
59880: PPUSH
59881: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59882: LD_ADDR_VAR 0 6
59886: PUSH
59887: LD_VAR 0 1
59891: PUSH
59892: LD_VAR 0 3
59896: PLUS
59897: PUSH
59898: LD_INT 2
59900: DIV
59901: ST_TO_ADDR
// if _x < 0 then
59902: LD_VAR 0 6
59906: PUSH
59907: LD_INT 0
59909: LESS
59910: IFFALSE 59927
// _x := _x * - 1 ;
59912: LD_ADDR_VAR 0 6
59916: PUSH
59917: LD_VAR 0 6
59921: PUSH
59922: LD_INT 1
59924: NEG
59925: MUL
59926: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59927: LD_ADDR_VAR 0 7
59931: PUSH
59932: LD_VAR 0 2
59936: PUSH
59937: LD_VAR 0 4
59941: PLUS
59942: PUSH
59943: LD_INT 2
59945: DIV
59946: ST_TO_ADDR
// if _y < 0 then
59947: LD_VAR 0 7
59951: PUSH
59952: LD_INT 0
59954: LESS
59955: IFFALSE 59972
// _y := _y * - 1 ;
59957: LD_ADDR_VAR 0 7
59961: PUSH
59962: LD_VAR 0 7
59966: PUSH
59967: LD_INT 1
59969: NEG
59970: MUL
59971: ST_TO_ADDR
// result := [ _x , _y ] ;
59972: LD_ADDR_VAR 0 5
59976: PUSH
59977: LD_VAR 0 6
59981: PUSH
59982: LD_VAR 0 7
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: ST_TO_ADDR
// end ;
59991: LD_VAR 0 5
59995: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59996: LD_INT 0
59998: PPUSH
59999: PPUSH
60000: PPUSH
60001: PPUSH
// task := GetTaskList ( unit ) ;
60002: LD_ADDR_VAR 0 7
60006: PUSH
60007: LD_VAR 0 1
60011: PPUSH
60012: CALL_OW 437
60016: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60017: LD_VAR 0 7
60021: NOT
60022: PUSH
60023: LD_VAR 0 1
60027: PPUSH
60028: LD_VAR 0 2
60032: PPUSH
60033: CALL_OW 308
60037: NOT
60038: AND
60039: IFFALSE 60043
// exit ;
60041: GO 60161
// if IsInArea ( unit , area ) then
60043: LD_VAR 0 1
60047: PPUSH
60048: LD_VAR 0 2
60052: PPUSH
60053: CALL_OW 308
60057: IFFALSE 60075
// begin ComMoveToArea ( unit , goAway ) ;
60059: LD_VAR 0 1
60063: PPUSH
60064: LD_VAR 0 3
60068: PPUSH
60069: CALL_OW 113
// exit ;
60073: GO 60161
// end ; if task [ 1 ] [ 1 ] <> M then
60075: LD_VAR 0 7
60079: PUSH
60080: LD_INT 1
60082: ARRAY
60083: PUSH
60084: LD_INT 1
60086: ARRAY
60087: PUSH
60088: LD_STRING M
60090: NONEQUAL
60091: IFFALSE 60095
// exit ;
60093: GO 60161
// x := task [ 1 ] [ 2 ] ;
60095: LD_ADDR_VAR 0 5
60099: PUSH
60100: LD_VAR 0 7
60104: PUSH
60105: LD_INT 1
60107: ARRAY
60108: PUSH
60109: LD_INT 2
60111: ARRAY
60112: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60113: LD_ADDR_VAR 0 6
60117: PUSH
60118: LD_VAR 0 7
60122: PUSH
60123: LD_INT 1
60125: ARRAY
60126: PUSH
60127: LD_INT 3
60129: ARRAY
60130: ST_TO_ADDR
// if InArea ( x , y , area ) then
60131: LD_VAR 0 5
60135: PPUSH
60136: LD_VAR 0 6
60140: PPUSH
60141: LD_VAR 0 2
60145: PPUSH
60146: CALL_OW 309
60150: IFFALSE 60161
// ComStop ( unit ) ;
60152: LD_VAR 0 1
60156: PPUSH
60157: CALL_OW 141
// end ;
60161: LD_VAR 0 4
60165: RET
// export function Abs ( value ) ; begin
60166: LD_INT 0
60168: PPUSH
// result := value ;
60169: LD_ADDR_VAR 0 2
60173: PUSH
60174: LD_VAR 0 1
60178: ST_TO_ADDR
// if value < 0 then
60179: LD_VAR 0 1
60183: PUSH
60184: LD_INT 0
60186: LESS
60187: IFFALSE 60204
// result := value * - 1 ;
60189: LD_ADDR_VAR 0 2
60193: PUSH
60194: LD_VAR 0 1
60198: PUSH
60199: LD_INT 1
60201: NEG
60202: MUL
60203: ST_TO_ADDR
// end ;
60204: LD_VAR 0 2
60208: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60209: LD_INT 0
60211: PPUSH
60212: PPUSH
60213: PPUSH
60214: PPUSH
60215: PPUSH
60216: PPUSH
60217: PPUSH
60218: PPUSH
// if not unit or not building then
60219: LD_VAR 0 1
60223: NOT
60224: PUSH
60225: LD_VAR 0 2
60229: NOT
60230: OR
60231: IFFALSE 60235
// exit ;
60233: GO 60461
// x := GetX ( building ) ;
60235: LD_ADDR_VAR 0 4
60239: PUSH
60240: LD_VAR 0 2
60244: PPUSH
60245: CALL_OW 250
60249: ST_TO_ADDR
// y := GetY ( building ) ;
60250: LD_ADDR_VAR 0 6
60254: PUSH
60255: LD_VAR 0 2
60259: PPUSH
60260: CALL_OW 251
60264: ST_TO_ADDR
// d := GetDir ( building ) ;
60265: LD_ADDR_VAR 0 8
60269: PUSH
60270: LD_VAR 0 2
60274: PPUSH
60275: CALL_OW 254
60279: ST_TO_ADDR
// r := 4 ;
60280: LD_ADDR_VAR 0 9
60284: PUSH
60285: LD_INT 4
60287: ST_TO_ADDR
// for i := 1 to 5 do
60288: LD_ADDR_VAR 0 10
60292: PUSH
60293: DOUBLE
60294: LD_INT 1
60296: DEC
60297: ST_TO_ADDR
60298: LD_INT 5
60300: PUSH
60301: FOR_TO
60302: IFFALSE 60459
// begin _x := ShiftX ( x , d , r + i ) ;
60304: LD_ADDR_VAR 0 5
60308: PUSH
60309: LD_VAR 0 4
60313: PPUSH
60314: LD_VAR 0 8
60318: PPUSH
60319: LD_VAR 0 9
60323: PUSH
60324: LD_VAR 0 10
60328: PLUS
60329: PPUSH
60330: CALL_OW 272
60334: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60335: LD_ADDR_VAR 0 7
60339: PUSH
60340: LD_VAR 0 6
60344: PPUSH
60345: LD_VAR 0 8
60349: PPUSH
60350: LD_VAR 0 9
60354: PUSH
60355: LD_VAR 0 10
60359: PLUS
60360: PPUSH
60361: CALL_OW 273
60365: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60366: LD_VAR 0 5
60370: PPUSH
60371: LD_VAR 0 7
60375: PPUSH
60376: CALL_OW 488
60380: PUSH
60381: LD_VAR 0 5
60385: PPUSH
60386: LD_VAR 0 7
60390: PPUSH
60391: CALL_OW 428
60395: PPUSH
60396: CALL_OW 247
60400: PUSH
60401: LD_INT 3
60403: PUSH
60404: LD_INT 2
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: IN
60411: NOT
60412: AND
60413: IFFALSE 60457
// begin ComMoveXY ( unit , _x , _y ) ;
60415: LD_VAR 0 1
60419: PPUSH
60420: LD_VAR 0 5
60424: PPUSH
60425: LD_VAR 0 7
60429: PPUSH
60430: CALL_OW 111
// result := [ _x , _y ] ;
60434: LD_ADDR_VAR 0 3
60438: PUSH
60439: LD_VAR 0 5
60443: PUSH
60444: LD_VAR 0 7
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: ST_TO_ADDR
// exit ;
60453: POP
60454: POP
60455: GO 60461
// end ; end ;
60457: GO 60301
60459: POP
60460: POP
// end ;
60461: LD_VAR 0 3
60465: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60466: LD_INT 0
60468: PPUSH
60469: PPUSH
60470: PPUSH
// result := 0 ;
60471: LD_ADDR_VAR 0 3
60475: PUSH
60476: LD_INT 0
60478: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60479: LD_VAR 0 1
60483: PUSH
60484: LD_INT 0
60486: LESS
60487: PUSH
60488: LD_VAR 0 1
60492: PUSH
60493: LD_INT 8
60495: GREATER
60496: OR
60497: PUSH
60498: LD_VAR 0 2
60502: PUSH
60503: LD_INT 0
60505: LESS
60506: OR
60507: PUSH
60508: LD_VAR 0 2
60512: PUSH
60513: LD_INT 8
60515: GREATER
60516: OR
60517: IFFALSE 60521
// exit ;
60519: GO 60596
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60521: LD_ADDR_VAR 0 4
60525: PUSH
60526: LD_INT 22
60528: PUSH
60529: LD_VAR 0 2
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PPUSH
60538: CALL_OW 69
60542: PUSH
60543: FOR_IN
60544: IFFALSE 60594
// begin un := UnitShoot ( i ) ;
60546: LD_ADDR_VAR 0 5
60550: PUSH
60551: LD_VAR 0 4
60555: PPUSH
60556: CALL_OW 504
60560: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60561: LD_VAR 0 5
60565: PPUSH
60566: CALL_OW 255
60570: PUSH
60571: LD_VAR 0 1
60575: EQUAL
60576: IFFALSE 60592
// begin result := un ;
60578: LD_ADDR_VAR 0 3
60582: PUSH
60583: LD_VAR 0 5
60587: ST_TO_ADDR
// exit ;
60588: POP
60589: POP
60590: GO 60596
// end ; end ;
60592: GO 60543
60594: POP
60595: POP
// end ;
60596: LD_VAR 0 3
60600: RET
// export function GetCargoBay ( units ) ; begin
60601: LD_INT 0
60603: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60604: LD_ADDR_VAR 0 2
60608: PUSH
60609: LD_VAR 0 1
60613: PPUSH
60614: LD_INT 2
60616: PUSH
60617: LD_INT 34
60619: PUSH
60620: LD_INT 12
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 34
60629: PUSH
60630: LD_INT 51
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 34
60639: PUSH
60640: LD_INT 32
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 34
60649: PUSH
60650: LD_INT 89
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: PPUSH
60664: CALL_OW 72
60668: ST_TO_ADDR
// end ;
60669: LD_VAR 0 2
60673: RET
// export function Negate ( value ) ; begin
60674: LD_INT 0
60676: PPUSH
// result := not value ;
60677: LD_ADDR_VAR 0 2
60681: PUSH
60682: LD_VAR 0 1
60686: NOT
60687: ST_TO_ADDR
// end ;
60688: LD_VAR 0 2
60692: RET
// export function Inc ( value ) ; begin
60693: LD_INT 0
60695: PPUSH
// result := value + 1 ;
60696: LD_ADDR_VAR 0 2
60700: PUSH
60701: LD_VAR 0 1
60705: PUSH
60706: LD_INT 1
60708: PLUS
60709: ST_TO_ADDR
// end ;
60710: LD_VAR 0 2
60714: RET
// export function Dec ( value ) ; begin
60715: LD_INT 0
60717: PPUSH
// result := value - 1 ;
60718: LD_ADDR_VAR 0 2
60722: PUSH
60723: LD_VAR 0 1
60727: PUSH
60728: LD_INT 1
60730: MINUS
60731: ST_TO_ADDR
// end ;
60732: LD_VAR 0 2
60736: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60737: LD_INT 0
60739: PPUSH
60740: PPUSH
60741: PPUSH
60742: PPUSH
60743: PPUSH
60744: PPUSH
60745: PPUSH
60746: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60747: LD_VAR 0 1
60751: PPUSH
60752: LD_VAR 0 2
60756: PPUSH
60757: CALL_OW 488
60761: NOT
60762: PUSH
60763: LD_VAR 0 3
60767: PPUSH
60768: LD_VAR 0 4
60772: PPUSH
60773: CALL_OW 488
60777: NOT
60778: OR
60779: IFFALSE 60792
// begin result := - 1 ;
60781: LD_ADDR_VAR 0 5
60785: PUSH
60786: LD_INT 1
60788: NEG
60789: ST_TO_ADDR
// exit ;
60790: GO 61027
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60792: LD_ADDR_VAR 0 12
60796: PUSH
60797: LD_VAR 0 1
60801: PPUSH
60802: LD_VAR 0 2
60806: PPUSH
60807: LD_VAR 0 3
60811: PPUSH
60812: LD_VAR 0 4
60816: PPUSH
60817: CALL 59877 0 4
60821: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60822: LD_ADDR_VAR 0 11
60826: PUSH
60827: LD_VAR 0 1
60831: PPUSH
60832: LD_VAR 0 2
60836: PPUSH
60837: LD_VAR 0 12
60841: PUSH
60842: LD_INT 1
60844: ARRAY
60845: PPUSH
60846: LD_VAR 0 12
60850: PUSH
60851: LD_INT 2
60853: ARRAY
60854: PPUSH
60855: CALL_OW 298
60859: ST_TO_ADDR
// distance := 9999 ;
60860: LD_ADDR_VAR 0 10
60864: PUSH
60865: LD_INT 9999
60867: ST_TO_ADDR
// for i := 0 to 5 do
60868: LD_ADDR_VAR 0 6
60872: PUSH
60873: DOUBLE
60874: LD_INT 0
60876: DEC
60877: ST_TO_ADDR
60878: LD_INT 5
60880: PUSH
60881: FOR_TO
60882: IFFALSE 61025
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60884: LD_ADDR_VAR 0 7
60888: PUSH
60889: LD_VAR 0 1
60893: PPUSH
60894: LD_VAR 0 6
60898: PPUSH
60899: LD_VAR 0 11
60903: PPUSH
60904: CALL_OW 272
60908: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60909: LD_ADDR_VAR 0 8
60913: PUSH
60914: LD_VAR 0 2
60918: PPUSH
60919: LD_VAR 0 6
60923: PPUSH
60924: LD_VAR 0 11
60928: PPUSH
60929: CALL_OW 273
60933: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60934: LD_VAR 0 7
60938: PPUSH
60939: LD_VAR 0 8
60943: PPUSH
60944: CALL_OW 488
60948: NOT
60949: IFFALSE 60953
// continue ;
60951: GO 60881
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60953: LD_ADDR_VAR 0 9
60957: PUSH
60958: LD_VAR 0 12
60962: PUSH
60963: LD_INT 1
60965: ARRAY
60966: PPUSH
60967: LD_VAR 0 12
60971: PUSH
60972: LD_INT 2
60974: ARRAY
60975: PPUSH
60976: LD_VAR 0 7
60980: PPUSH
60981: LD_VAR 0 8
60985: PPUSH
60986: CALL_OW 298
60990: ST_TO_ADDR
// if tmp < distance then
60991: LD_VAR 0 9
60995: PUSH
60996: LD_VAR 0 10
61000: LESS
61001: IFFALSE 61023
// begin result := i ;
61003: LD_ADDR_VAR 0 5
61007: PUSH
61008: LD_VAR 0 6
61012: ST_TO_ADDR
// distance := tmp ;
61013: LD_ADDR_VAR 0 10
61017: PUSH
61018: LD_VAR 0 9
61022: ST_TO_ADDR
// end ; end ;
61023: GO 60881
61025: POP
61026: POP
// end ;
61027: LD_VAR 0 5
61031: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61032: LD_INT 0
61034: PPUSH
61035: PPUSH
// if not driver or not IsInUnit ( driver ) then
61036: LD_VAR 0 1
61040: NOT
61041: PUSH
61042: LD_VAR 0 1
61046: PPUSH
61047: CALL_OW 310
61051: NOT
61052: OR
61053: IFFALSE 61057
// exit ;
61055: GO 61147
// vehicle := IsInUnit ( driver ) ;
61057: LD_ADDR_VAR 0 3
61061: PUSH
61062: LD_VAR 0 1
61066: PPUSH
61067: CALL_OW 310
61071: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61072: LD_VAR 0 1
61076: PPUSH
61077: LD_STRING \
61079: PUSH
61080: LD_INT 0
61082: PUSH
61083: LD_INT 0
61085: PUSH
61086: LD_INT 0
61088: PUSH
61089: LD_INT 0
61091: PUSH
61092: LD_INT 0
61094: PUSH
61095: LD_INT 0
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: PUSH
61107: LD_STRING E
61109: PUSH
61110: LD_INT 0
61112: PUSH
61113: LD_INT 0
61115: PUSH
61116: LD_VAR 0 3
61120: PUSH
61121: LD_INT 0
61123: PUSH
61124: LD_INT 0
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PPUSH
61143: CALL_OW 446
// end ;
61147: LD_VAR 0 2
61151: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61152: LD_INT 0
61154: PPUSH
61155: PPUSH
// if not driver or not IsInUnit ( driver ) then
61156: LD_VAR 0 1
61160: NOT
61161: PUSH
61162: LD_VAR 0 1
61166: PPUSH
61167: CALL_OW 310
61171: NOT
61172: OR
61173: IFFALSE 61177
// exit ;
61175: GO 61267
// vehicle := IsInUnit ( driver ) ;
61177: LD_ADDR_VAR 0 3
61181: PUSH
61182: LD_VAR 0 1
61186: PPUSH
61187: CALL_OW 310
61191: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61192: LD_VAR 0 1
61196: PPUSH
61197: LD_STRING \
61199: PUSH
61200: LD_INT 0
61202: PUSH
61203: LD_INT 0
61205: PUSH
61206: LD_INT 0
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: LD_INT 0
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: PUSH
61227: LD_STRING E
61229: PUSH
61230: LD_INT 0
61232: PUSH
61233: LD_INT 0
61235: PUSH
61236: LD_VAR 0 3
61240: PUSH
61241: LD_INT 0
61243: PUSH
61244: LD_INT 0
61246: PUSH
61247: LD_INT 0
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PPUSH
61263: CALL_OW 447
// end ;
61267: LD_VAR 0 2
61271: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61272: LD_INT 0
61274: PPUSH
61275: PPUSH
61276: PPUSH
// tmp := [ ] ;
61277: LD_ADDR_VAR 0 5
61281: PUSH
61282: EMPTY
61283: ST_TO_ADDR
// for i in units do
61284: LD_ADDR_VAR 0 4
61288: PUSH
61289: LD_VAR 0 1
61293: PUSH
61294: FOR_IN
61295: IFFALSE 61333
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61297: LD_ADDR_VAR 0 5
61301: PUSH
61302: LD_VAR 0 5
61306: PPUSH
61307: LD_VAR 0 5
61311: PUSH
61312: LD_INT 1
61314: PLUS
61315: PPUSH
61316: LD_VAR 0 4
61320: PPUSH
61321: CALL_OW 256
61325: PPUSH
61326: CALL_OW 2
61330: ST_TO_ADDR
61331: GO 61294
61333: POP
61334: POP
// if not tmp then
61335: LD_VAR 0 5
61339: NOT
61340: IFFALSE 61344
// exit ;
61342: GO 61392
// if asc then
61344: LD_VAR 0 2
61348: IFFALSE 61372
// result := SortListByListAsc ( units , tmp ) else
61350: LD_ADDR_VAR 0 3
61354: PUSH
61355: LD_VAR 0 1
61359: PPUSH
61360: LD_VAR 0 5
61364: PPUSH
61365: CALL_OW 76
61369: ST_TO_ADDR
61370: GO 61392
// result := SortListByListDesc ( units , tmp ) ;
61372: LD_ADDR_VAR 0 3
61376: PUSH
61377: LD_VAR 0 1
61381: PPUSH
61382: LD_VAR 0 5
61386: PPUSH
61387: CALL_OW 77
61391: ST_TO_ADDR
// end ;
61392: LD_VAR 0 3
61396: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61397: LD_INT 0
61399: PPUSH
61400: PPUSH
// task := GetTaskList ( mech ) ;
61401: LD_ADDR_VAR 0 4
61405: PUSH
61406: LD_VAR 0 1
61410: PPUSH
61411: CALL_OW 437
61415: ST_TO_ADDR
// if not task then
61416: LD_VAR 0 4
61420: NOT
61421: IFFALSE 61425
// exit ;
61423: GO 61467
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61425: LD_ADDR_VAR 0 3
61429: PUSH
61430: LD_VAR 0 4
61434: PUSH
61435: LD_INT 1
61437: ARRAY
61438: PUSH
61439: LD_INT 1
61441: ARRAY
61442: PUSH
61443: LD_STRING r
61445: EQUAL
61446: PUSH
61447: LD_VAR 0 4
61451: PUSH
61452: LD_INT 1
61454: ARRAY
61455: PUSH
61456: LD_INT 4
61458: ARRAY
61459: PUSH
61460: LD_VAR 0 2
61464: EQUAL
61465: AND
61466: ST_TO_ADDR
// end ;
61467: LD_VAR 0 3
61471: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61472: LD_INT 0
61474: PPUSH
// SetDir ( unit , d ) ;
61475: LD_VAR 0 1
61479: PPUSH
61480: LD_VAR 0 4
61484: PPUSH
61485: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61489: LD_VAR 0 1
61493: PPUSH
61494: LD_VAR 0 2
61498: PPUSH
61499: LD_VAR 0 3
61503: PPUSH
61504: LD_VAR 0 5
61508: PPUSH
61509: CALL_OW 48
// end ;
61513: LD_VAR 0 6
61517: RET
// export function ToNaturalNumber ( number ) ; begin
61518: LD_INT 0
61520: PPUSH
// result := number div 1 ;
61521: LD_ADDR_VAR 0 2
61525: PUSH
61526: LD_VAR 0 1
61530: PUSH
61531: LD_INT 1
61533: DIV
61534: ST_TO_ADDR
// if number < 0 then
61535: LD_VAR 0 1
61539: PUSH
61540: LD_INT 0
61542: LESS
61543: IFFALSE 61553
// result := 0 ;
61545: LD_ADDR_VAR 0 2
61549: PUSH
61550: LD_INT 0
61552: ST_TO_ADDR
// end ;
61553: LD_VAR 0 2
61557: RET
// export function SortByClass ( units , class ) ; var un ; begin
61558: LD_INT 0
61560: PPUSH
61561: PPUSH
// if not units or not class then
61562: LD_VAR 0 1
61566: NOT
61567: PUSH
61568: LD_VAR 0 2
61572: NOT
61573: OR
61574: IFFALSE 61578
// exit ;
61576: GO 61673
// result := [ ] ;
61578: LD_ADDR_VAR 0 3
61582: PUSH
61583: EMPTY
61584: ST_TO_ADDR
// for un in units do
61585: LD_ADDR_VAR 0 4
61589: PUSH
61590: LD_VAR 0 1
61594: PUSH
61595: FOR_IN
61596: IFFALSE 61671
// if GetClass ( un ) = class then
61598: LD_VAR 0 4
61602: PPUSH
61603: CALL_OW 257
61607: PUSH
61608: LD_VAR 0 2
61612: EQUAL
61613: IFFALSE 61640
// result := Insert ( result , 1 , un ) else
61615: LD_ADDR_VAR 0 3
61619: PUSH
61620: LD_VAR 0 3
61624: PPUSH
61625: LD_INT 1
61627: PPUSH
61628: LD_VAR 0 4
61632: PPUSH
61633: CALL_OW 2
61637: ST_TO_ADDR
61638: GO 61669
// result := Replace ( result , result + 1 , un ) ;
61640: LD_ADDR_VAR 0 3
61644: PUSH
61645: LD_VAR 0 3
61649: PPUSH
61650: LD_VAR 0 3
61654: PUSH
61655: LD_INT 1
61657: PLUS
61658: PPUSH
61659: LD_VAR 0 4
61663: PPUSH
61664: CALL_OW 1
61668: ST_TO_ADDR
61669: GO 61595
61671: POP
61672: POP
// end ;
61673: LD_VAR 0 3
61677: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61678: LD_INT 0
61680: PPUSH
61681: PPUSH
61682: PPUSH
61683: PPUSH
61684: PPUSH
61685: PPUSH
61686: PPUSH
// result := [ ] ;
61687: LD_ADDR_VAR 0 4
61691: PUSH
61692: EMPTY
61693: ST_TO_ADDR
// if x - r < 0 then
61694: LD_VAR 0 1
61698: PUSH
61699: LD_VAR 0 3
61703: MINUS
61704: PUSH
61705: LD_INT 0
61707: LESS
61708: IFFALSE 61720
// min_x := 0 else
61710: LD_ADDR_VAR 0 8
61714: PUSH
61715: LD_INT 0
61717: ST_TO_ADDR
61718: GO 61736
// min_x := x - r ;
61720: LD_ADDR_VAR 0 8
61724: PUSH
61725: LD_VAR 0 1
61729: PUSH
61730: LD_VAR 0 3
61734: MINUS
61735: ST_TO_ADDR
// if y - r < 0 then
61736: LD_VAR 0 2
61740: PUSH
61741: LD_VAR 0 3
61745: MINUS
61746: PUSH
61747: LD_INT 0
61749: LESS
61750: IFFALSE 61762
// min_y := 0 else
61752: LD_ADDR_VAR 0 7
61756: PUSH
61757: LD_INT 0
61759: ST_TO_ADDR
61760: GO 61778
// min_y := y - r ;
61762: LD_ADDR_VAR 0 7
61766: PUSH
61767: LD_VAR 0 2
61771: PUSH
61772: LD_VAR 0 3
61776: MINUS
61777: ST_TO_ADDR
// max_x := x + r ;
61778: LD_ADDR_VAR 0 9
61782: PUSH
61783: LD_VAR 0 1
61787: PUSH
61788: LD_VAR 0 3
61792: PLUS
61793: ST_TO_ADDR
// max_y := y + r ;
61794: LD_ADDR_VAR 0 10
61798: PUSH
61799: LD_VAR 0 2
61803: PUSH
61804: LD_VAR 0 3
61808: PLUS
61809: ST_TO_ADDR
// for _x = min_x to max_x do
61810: LD_ADDR_VAR 0 5
61814: PUSH
61815: DOUBLE
61816: LD_VAR 0 8
61820: DEC
61821: ST_TO_ADDR
61822: LD_VAR 0 9
61826: PUSH
61827: FOR_TO
61828: IFFALSE 61929
// for _y = min_y to max_y do
61830: LD_ADDR_VAR 0 6
61834: PUSH
61835: DOUBLE
61836: LD_VAR 0 7
61840: DEC
61841: ST_TO_ADDR
61842: LD_VAR 0 10
61846: PUSH
61847: FOR_TO
61848: IFFALSE 61925
// begin if not ValidHex ( _x , _y ) then
61850: LD_VAR 0 5
61854: PPUSH
61855: LD_VAR 0 6
61859: PPUSH
61860: CALL_OW 488
61864: NOT
61865: IFFALSE 61869
// continue ;
61867: GO 61847
// if GetResourceTypeXY ( _x , _y ) then
61869: LD_VAR 0 5
61873: PPUSH
61874: LD_VAR 0 6
61878: PPUSH
61879: CALL_OW 283
61883: IFFALSE 61923
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61885: LD_ADDR_VAR 0 4
61889: PUSH
61890: LD_VAR 0 4
61894: PPUSH
61895: LD_VAR 0 4
61899: PUSH
61900: LD_INT 1
61902: PLUS
61903: PPUSH
61904: LD_VAR 0 5
61908: PUSH
61909: LD_VAR 0 6
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PPUSH
61918: CALL_OW 1
61922: ST_TO_ADDR
// end ;
61923: GO 61847
61925: POP
61926: POP
61927: GO 61827
61929: POP
61930: POP
// end ;
61931: LD_VAR 0 4
61935: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61936: LD_INT 0
61938: PPUSH
61939: PPUSH
61940: PPUSH
61941: PPUSH
61942: PPUSH
61943: PPUSH
61944: PPUSH
61945: PPUSH
// if not units then
61946: LD_VAR 0 1
61950: NOT
61951: IFFALSE 61955
// exit ;
61953: GO 62479
// result := UnitFilter ( units , [ f_ok ] ) ;
61955: LD_ADDR_VAR 0 3
61959: PUSH
61960: LD_VAR 0 1
61964: PPUSH
61965: LD_INT 50
61967: PUSH
61968: EMPTY
61969: LIST
61970: PPUSH
61971: CALL_OW 72
61975: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61976: LD_ADDR_VAR 0 8
61980: PUSH
61981: LD_VAR 0 1
61985: PUSH
61986: LD_INT 1
61988: ARRAY
61989: PPUSH
61990: CALL_OW 255
61994: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
61995: LD_ADDR_VAR 0 10
61999: PUSH
62000: LD_INT 29
62002: PUSH
62003: LD_INT 91
62005: PUSH
62006: LD_INT 49
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: LIST
62013: ST_TO_ADDR
// if not result then
62014: LD_VAR 0 3
62018: NOT
62019: IFFALSE 62023
// exit ;
62021: GO 62479
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
62023: LD_ADDR_VAR 0 5
62027: PUSH
62028: LD_INT 81
62030: PUSH
62031: LD_VAR 0 8
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PPUSH
62040: CALL_OW 69
62044: ST_TO_ADDR
// for i in result do
62045: LD_ADDR_VAR 0 4
62049: PUSH
62050: LD_VAR 0 3
62054: PUSH
62055: FOR_IN
62056: IFFALSE 62477
// begin tag := GetTag ( i ) + 1 ;
62058: LD_ADDR_VAR 0 9
62062: PUSH
62063: LD_VAR 0 4
62067: PPUSH
62068: CALL_OW 110
62072: PUSH
62073: LD_INT 1
62075: PLUS
62076: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
62077: LD_ADDR_VAR 0 7
62081: PUSH
62082: LD_VAR 0 4
62086: PPUSH
62087: CALL_OW 250
62091: PPUSH
62092: LD_VAR 0 4
62096: PPUSH
62097: CALL_OW 251
62101: PPUSH
62102: LD_INT 6
62104: PPUSH
62105: CALL 61678 0 3
62109: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
62110: LD_VAR 0 4
62114: PPUSH
62115: CALL_OW 247
62119: PUSH
62120: LD_INT 2
62122: EQUAL
62123: PUSH
62124: LD_VAR 0 7
62128: AND
62129: PUSH
62130: LD_VAR 0 4
62134: PPUSH
62135: CALL_OW 264
62139: PUSH
62140: LD_VAR 0 10
62144: IN
62145: NOT
62146: AND
62147: IFFALSE 62186
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
62149: LD_VAR 0 4
62153: PPUSH
62154: LD_VAR 0 7
62158: PUSH
62159: LD_INT 1
62161: ARRAY
62162: PUSH
62163: LD_INT 1
62165: ARRAY
62166: PPUSH
62167: LD_VAR 0 7
62171: PUSH
62172: LD_INT 1
62174: ARRAY
62175: PUSH
62176: LD_INT 2
62178: ARRAY
62179: PPUSH
62180: CALL_OW 116
62184: GO 62475
// if path > tag then
62186: LD_VAR 0 2
62190: PUSH
62191: LD_VAR 0 9
62195: GREATER
62196: IFFALSE 62404
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
62198: LD_ADDR_VAR 0 6
62202: PUSH
62203: LD_VAR 0 5
62207: PPUSH
62208: LD_INT 91
62210: PUSH
62211: LD_VAR 0 4
62215: PUSH
62216: LD_INT 8
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: LIST
62223: PPUSH
62224: CALL_OW 72
62228: ST_TO_ADDR
// if nearEnemy then
62229: LD_VAR 0 6
62233: IFFALSE 62302
// begin if GetWeapon ( i ) = ru_time_lapser then
62235: LD_VAR 0 4
62239: PPUSH
62240: CALL_OW 264
62244: PUSH
62245: LD_INT 49
62247: EQUAL
62248: IFFALSE 62276
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
62250: LD_VAR 0 4
62254: PPUSH
62255: LD_VAR 0 6
62259: PPUSH
62260: LD_VAR 0 4
62264: PPUSH
62265: CALL_OW 74
62269: PPUSH
62270: CALL_OW 112
62274: GO 62300
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
62276: LD_VAR 0 4
62280: PPUSH
62281: LD_VAR 0 6
62285: PPUSH
62286: LD_VAR 0 4
62290: PPUSH
62291: CALL_OW 74
62295: PPUSH
62296: CALL_OW 115
// end else
62300: GO 62402
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62302: LD_VAR 0 4
62306: PPUSH
62307: LD_VAR 0 2
62311: PUSH
62312: LD_VAR 0 9
62316: ARRAY
62317: PUSH
62318: LD_INT 1
62320: ARRAY
62321: PPUSH
62322: LD_VAR 0 2
62326: PUSH
62327: LD_VAR 0 9
62331: ARRAY
62332: PUSH
62333: LD_INT 2
62335: ARRAY
62336: PPUSH
62337: CALL_OW 297
62341: PUSH
62342: LD_INT 6
62344: GREATER
62345: IFFALSE 62388
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62347: LD_VAR 0 4
62351: PPUSH
62352: LD_VAR 0 2
62356: PUSH
62357: LD_VAR 0 9
62361: ARRAY
62362: PUSH
62363: LD_INT 1
62365: ARRAY
62366: PPUSH
62367: LD_VAR 0 2
62371: PUSH
62372: LD_VAR 0 9
62376: ARRAY
62377: PUSH
62378: LD_INT 2
62380: ARRAY
62381: PPUSH
62382: CALL_OW 114
62386: GO 62402
// SetTag ( i , tag ) ;
62388: LD_VAR 0 4
62392: PPUSH
62393: LD_VAR 0 9
62397: PPUSH
62398: CALL_OW 109
// end else
62402: GO 62475
// if enemy then
62404: LD_VAR 0 5
62408: IFFALSE 62475
// begin if GetWeapon ( i ) = ru_time_lapser then
62410: LD_VAR 0 4
62414: PPUSH
62415: CALL_OW 264
62419: PUSH
62420: LD_INT 49
62422: EQUAL
62423: IFFALSE 62451
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62425: LD_VAR 0 4
62429: PPUSH
62430: LD_VAR 0 5
62434: PPUSH
62435: LD_VAR 0 4
62439: PPUSH
62440: CALL_OW 74
62444: PPUSH
62445: CALL_OW 112
62449: GO 62475
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62451: LD_VAR 0 4
62455: PPUSH
62456: LD_VAR 0 5
62460: PPUSH
62461: LD_VAR 0 4
62465: PPUSH
62466: CALL_OW 74
62470: PPUSH
62471: CALL_OW 115
// end ; end ;
62475: GO 62055
62477: POP
62478: POP
// end ;
62479: LD_VAR 0 3
62483: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62484: LD_INT 0
62486: PPUSH
62487: PPUSH
62488: PPUSH
// if not unit or IsInUnit ( unit ) then
62489: LD_VAR 0 1
62493: NOT
62494: PUSH
62495: LD_VAR 0 1
62499: PPUSH
62500: CALL_OW 310
62504: OR
62505: IFFALSE 62509
// exit ;
62507: GO 62600
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62509: LD_ADDR_VAR 0 4
62513: PUSH
62514: LD_VAR 0 1
62518: PPUSH
62519: CALL_OW 250
62523: PPUSH
62524: LD_VAR 0 2
62528: PPUSH
62529: LD_INT 1
62531: PPUSH
62532: CALL_OW 272
62536: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62537: LD_ADDR_VAR 0 5
62541: PUSH
62542: LD_VAR 0 1
62546: PPUSH
62547: CALL_OW 251
62551: PPUSH
62552: LD_VAR 0 2
62556: PPUSH
62557: LD_INT 1
62559: PPUSH
62560: CALL_OW 273
62564: ST_TO_ADDR
// if ValidHex ( x , y ) then
62565: LD_VAR 0 4
62569: PPUSH
62570: LD_VAR 0 5
62574: PPUSH
62575: CALL_OW 488
62579: IFFALSE 62600
// ComTurnXY ( unit , x , y ) ;
62581: LD_VAR 0 1
62585: PPUSH
62586: LD_VAR 0 4
62590: PPUSH
62591: LD_VAR 0 5
62595: PPUSH
62596: CALL_OW 118
// end ;
62600: LD_VAR 0 3
62604: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62605: LD_INT 0
62607: PPUSH
62608: PPUSH
// result := false ;
62609: LD_ADDR_VAR 0 3
62613: PUSH
62614: LD_INT 0
62616: ST_TO_ADDR
// if not units then
62617: LD_VAR 0 2
62621: NOT
62622: IFFALSE 62626
// exit ;
62624: GO 62671
// for i in units do
62626: LD_ADDR_VAR 0 4
62630: PUSH
62631: LD_VAR 0 2
62635: PUSH
62636: FOR_IN
62637: IFFALSE 62669
// if See ( side , i ) then
62639: LD_VAR 0 1
62643: PPUSH
62644: LD_VAR 0 4
62648: PPUSH
62649: CALL_OW 292
62653: IFFALSE 62667
// begin result := true ;
62655: LD_ADDR_VAR 0 3
62659: PUSH
62660: LD_INT 1
62662: ST_TO_ADDR
// exit ;
62663: POP
62664: POP
62665: GO 62671
// end ;
62667: GO 62636
62669: POP
62670: POP
// end ;
62671: LD_VAR 0 3
62675: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62676: LD_INT 0
62678: PPUSH
62679: PPUSH
62680: PPUSH
62681: PPUSH
// if not unit or not points then
62682: LD_VAR 0 1
62686: NOT
62687: PUSH
62688: LD_VAR 0 2
62692: NOT
62693: OR
62694: IFFALSE 62698
// exit ;
62696: GO 62788
// dist := 99999 ;
62698: LD_ADDR_VAR 0 5
62702: PUSH
62703: LD_INT 99999
62705: ST_TO_ADDR
// for i in points do
62706: LD_ADDR_VAR 0 4
62710: PUSH
62711: LD_VAR 0 2
62715: PUSH
62716: FOR_IN
62717: IFFALSE 62786
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62719: LD_ADDR_VAR 0 6
62723: PUSH
62724: LD_VAR 0 1
62728: PPUSH
62729: LD_VAR 0 4
62733: PUSH
62734: LD_INT 1
62736: ARRAY
62737: PPUSH
62738: LD_VAR 0 4
62742: PUSH
62743: LD_INT 2
62745: ARRAY
62746: PPUSH
62747: CALL_OW 297
62751: ST_TO_ADDR
// if tmpDist < dist then
62752: LD_VAR 0 6
62756: PUSH
62757: LD_VAR 0 5
62761: LESS
62762: IFFALSE 62784
// begin result := i ;
62764: LD_ADDR_VAR 0 3
62768: PUSH
62769: LD_VAR 0 4
62773: ST_TO_ADDR
// dist := tmpDist ;
62774: LD_ADDR_VAR 0 5
62778: PUSH
62779: LD_VAR 0 6
62783: ST_TO_ADDR
// end ; end ;
62784: GO 62716
62786: POP
62787: POP
// end ;
62788: LD_VAR 0 3
62792: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
62793: LD_INT 0
62795: PPUSH
// uc_side := side ;
62796: LD_ADDR_OWVAR 20
62800: PUSH
62801: LD_VAR 0 1
62805: ST_TO_ADDR
// uc_nation := 3 ;
62806: LD_ADDR_OWVAR 21
62810: PUSH
62811: LD_INT 3
62813: ST_TO_ADDR
// vc_chassis := 25 ;
62814: LD_ADDR_OWVAR 37
62818: PUSH
62819: LD_INT 25
62821: ST_TO_ADDR
// vc_engine := engine_siberite ;
62822: LD_ADDR_OWVAR 39
62826: PUSH
62827: LD_INT 3
62829: ST_TO_ADDR
// vc_control := control_computer ;
62830: LD_ADDR_OWVAR 38
62834: PUSH
62835: LD_INT 3
62837: ST_TO_ADDR
// vc_weapon := 59 ;
62838: LD_ADDR_OWVAR 40
62842: PUSH
62843: LD_INT 59
62845: ST_TO_ADDR
// result := CreateVehicle ;
62846: LD_ADDR_VAR 0 5
62850: PUSH
62851: CALL_OW 45
62855: ST_TO_ADDR
// SetDir ( result , d ) ;
62856: LD_VAR 0 5
62860: PPUSH
62861: LD_VAR 0 4
62865: PPUSH
62866: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
62870: LD_VAR 0 5
62874: PPUSH
62875: LD_VAR 0 2
62879: PPUSH
62880: LD_VAR 0 3
62884: PPUSH
62885: LD_INT 0
62887: PPUSH
62888: CALL_OW 48
// end ;
62892: LD_VAR 0 5
62896: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
62897: LD_INT 0
62899: PPUSH
62900: PPUSH
62901: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
62902: LD_ADDR_VAR 0 2
62906: PUSH
62907: LD_INT 0
62909: PUSH
62910: LD_INT 0
62912: PUSH
62913: LD_INT 0
62915: PUSH
62916: LD_INT 0
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
62925: LD_VAR 0 1
62929: NOT
62930: PUSH
62931: LD_VAR 0 1
62935: PPUSH
62936: CALL_OW 264
62940: PUSH
62941: LD_INT 12
62943: PUSH
62944: LD_INT 51
62946: PUSH
62947: LD_INT 32
62949: PUSH
62950: LD_INT 89
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: IN
62959: NOT
62960: OR
62961: IFFALSE 62965
// exit ;
62963: GO 63063
// for i := 1 to 3 do
62965: LD_ADDR_VAR 0 3
62969: PUSH
62970: DOUBLE
62971: LD_INT 1
62973: DEC
62974: ST_TO_ADDR
62975: LD_INT 3
62977: PUSH
62978: FOR_TO
62979: IFFALSE 63061
// begin tmp := GetCargo ( cargo , i ) ;
62981: LD_ADDR_VAR 0 4
62985: PUSH
62986: LD_VAR 0 1
62990: PPUSH
62991: LD_VAR 0 3
62995: PPUSH
62996: CALL_OW 289
63000: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
63001: LD_ADDR_VAR 0 2
63005: PUSH
63006: LD_VAR 0 2
63010: PPUSH
63011: LD_VAR 0 3
63015: PPUSH
63016: LD_VAR 0 4
63020: PPUSH
63021: CALL_OW 1
63025: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
63026: LD_ADDR_VAR 0 2
63030: PUSH
63031: LD_VAR 0 2
63035: PPUSH
63036: LD_INT 4
63038: PPUSH
63039: LD_VAR 0 2
63043: PUSH
63044: LD_INT 4
63046: ARRAY
63047: PUSH
63048: LD_VAR 0 4
63052: PLUS
63053: PPUSH
63054: CALL_OW 1
63058: ST_TO_ADDR
// end ;
63059: GO 62978
63061: POP
63062: POP
// end ;
63063: LD_VAR 0 2
63067: RET
// export function Length ( array ) ; begin
63068: LD_INT 0
63070: PPUSH
// result := array + 0 ;
63071: LD_ADDR_VAR 0 2
63075: PUSH
63076: LD_VAR 0 1
63080: PUSH
63081: LD_INT 0
63083: PLUS
63084: ST_TO_ADDR
// end ;
63085: LD_VAR 0 2
63089: RET
// export function PrepareArray ( array ) ; begin
63090: LD_INT 0
63092: PPUSH
// result := array diff 0 ;
63093: LD_ADDR_VAR 0 2
63097: PUSH
63098: LD_VAR 0 1
63102: PUSH
63103: LD_INT 0
63105: DIFF
63106: ST_TO_ADDR
// if not result [ 1 ] then
63107: LD_VAR 0 2
63111: PUSH
63112: LD_INT 1
63114: ARRAY
63115: NOT
63116: IFFALSE 63136
// result := Delete ( result , 1 ) ;
63118: LD_ADDR_VAR 0 2
63122: PUSH
63123: LD_VAR 0 2
63127: PPUSH
63128: LD_INT 1
63130: PPUSH
63131: CALL_OW 3
63135: ST_TO_ADDR
// end ; end_of_file
63136: LD_VAR 0 2
63140: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
63141: LD_VAR 0 1
63145: PPUSH
63146: LD_VAR 0 2
63150: PPUSH
63151: LD_VAR 0 3
63155: PPUSH
63156: LD_VAR 0 4
63160: PPUSH
63161: LD_VAR 0 5
63165: PPUSH
63166: LD_VAR 0 6
63170: PPUSH
63171: CALL 1906 0 6
// end ;
63175: PPOPN 6
63177: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63178: LD_INT 0
63180: PPUSH
// begin if not units then
63181: LD_VAR 0 1
63185: NOT
63186: IFFALSE 63190
// exit ;
63188: GO 63190
// end ;
63190: PPOPN 7
63192: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
63193: CALL 1877 0 0
// end ;
63197: PPOPN 1
63199: END
