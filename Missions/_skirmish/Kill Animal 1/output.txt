// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 136 , 106 ) ;
   4: LD_INT 136
   6: PPUSH
   7: LD_INT 106
   9: PPUSH
  10: CALL_OW 86
// Init ;
  14: CALL 75 0 0
// CreateNature ( natArea , watArea , [ 10 , 2 * Difficulty , 6 , 6 , 3 * Difficulty , 6 , 4 ] ) ;
  18: LD_INT 2
  20: PPUSH
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 10
  26: PUSH
  27: LD_INT 2
  29: PUSH
  30: LD_OWVAR 67
  34: MUL
  35: PUSH
  36: LD_INT 6
  38: PUSH
  39: LD_INT 6
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: LD_OWVAR 67
  49: MUL
  50: PUSH
  51: LD_INT 6
  53: PUSH
  54: LD_INT 4
  56: PUSH
  57: EMPTY
  58: LIST
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: LIST
  64: LIST
  65: PPUSH
  66: CALL 387 0 3
// PrepareHunters ( ) ;
  70: CALL 233 0 0
// end ;
  74: END
// export debug , hunterClass , huntersAmount , animalAmount ; export points , hunters ; function Init ; begin
  75: LD_INT 0
  77: PPUSH
// debug := 0 ;
  78: LD_ADDR_EXP 1
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// if debug then
  86: LD_EXP 1
  90: IFFALSE 125
// begin FogOff ( 1 ) ;
  92: LD_INT 1
  94: PPUSH
  95: CALL_OW 344
// Difficulty := 2 ;
  99: LD_ADDR_OWVAR 67
 103: PUSH
 104: LD_INT 2
 106: ST_TO_ADDR
// hunterClass := 3 ;
 107: LD_ADDR_EXP 2
 111: PUSH
 112: LD_INT 3
 114: ST_TO_ADDR
// animalAmount := 2 ;
 115: LD_ADDR_EXP 4
 119: PUSH
 120: LD_INT 2
 122: ST_TO_ADDR
// end else
 123: GO 164
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
 125: LD_ADDR_OWVAR 67
 129: PUSH
 130: LD_INT 0
 132: PPUSH
 133: CALL_OW 426
 137: ST_TO_ADDR
// hunterClass := GetMultiplayerSetting ( 2 ) ;
 138: LD_ADDR_EXP 2
 142: PUSH
 143: LD_INT 2
 145: PPUSH
 146: CALL_OW 426
 150: ST_TO_ADDR
// animalAmount := GetMultiplayerSetting ( 1 ) ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 1
 158: PPUSH
 159: CALL_OW 426
 163: ST_TO_ADDR
// end ; huntersAmount := [ 4 , 6 , 8 ] [ Difficulty ] ;
 164: LD_ADDR_EXP 3
 168: PUSH
 169: LD_INT 4
 171: PUSH
 172: LD_INT 6
 174: PUSH
 175: LD_INT 8
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: PUSH
 183: LD_OWVAR 67
 187: ARRAY
 188: ST_TO_ADDR
// points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 189: LD_ADDR_EXP 5
 193: PUSH
 194: LD_INT 0
 196: PUSH
 197: LD_INT 0
 199: PUSH
 200: LD_INT 0
 202: PUSH
 203: LD_INT 0
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: LD_INT 0
 211: PUSH
 212: LD_INT 0
 214: PUSH
 215: LD_INT 0
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: ST_TO_ADDR
// end ;
 228: LD_VAR 0 1
 232: RET
// export function PrepareHunters ; var i , un ; begin
 233: LD_INT 0
 235: PPUSH
 236: PPUSH
 237: PPUSH
// for i := 1 to huntersAmount do
 238: LD_ADDR_VAR 0 2
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_EXP 3
 252: PUSH
 253: FOR_TO
 254: IFFALSE 380
// begin uc_side := i ;
 256: LD_ADDR_OWVAR 20
 260: PUSH
 261: LD_VAR 0 2
 265: ST_TO_ADDR
// uc_nation := i mod 3 + 1 ;
 266: LD_ADDR_OWVAR 21
 270: PUSH
 271: LD_VAR 0 2
 275: PUSH
 276: LD_INT 3
 278: MOD
 279: PUSH
 280: LD_INT 1
 282: PLUS
 283: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_sniper , class_desert_warior ] [ hunterClass ] , 10 - Difficulty * 2 ) ;
 284: LD_INT 0
 286: PPUSH
 287: LD_INT 1
 289: PUSH
 290: LD_INT 5
 292: PUSH
 293: LD_INT 11
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: LIST
 300: PUSH
 301: LD_EXP 2
 305: ARRAY
 306: PPUSH
 307: LD_INT 10
 309: PUSH
 310: LD_OWVAR 67
 314: PUSH
 315: LD_INT 2
 317: MUL
 318: MINUS
 319: PPUSH
 320: CALL_OW 380
// un := CreateHuman ;
 324: LD_ADDR_VAR 0 3
 328: PUSH
 329: CALL_OW 44
 333: ST_TO_ADDR
// hunters := Replace ( hunters , hunters + 1 , un ) ;
 334: LD_ADDR_EXP 6
 338: PUSH
 339: LD_EXP 6
 343: PPUSH
 344: LD_EXP 6
 348: PUSH
 349: LD_INT 1
 351: PLUS
 352: PPUSH
 353: LD_VAR 0 3
 357: PPUSH
 358: CALL_OW 1
 362: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 363: LD_VAR 0 3
 367: PPUSH
 368: LD_INT 4
 370: PPUSH
 371: LD_INT 0
 373: PPUSH
 374: CALL_OW 49
// end ;
 378: GO 253
 380: POP
 381: POP
// end ; end_of_file
 382: LD_VAR 0 1
 386: RET
// export function CreateNature ( area , waterArea , numbers ) ; var i , j , classes , waterClass ; begin
 387: LD_INT 0
 389: PPUSH
 390: PPUSH
 391: PPUSH
 392: PPUSH
 393: PPUSH
// uc_side = 0 ;
 394: LD_ADDR_OWVAR 20
 398: PUSH
 399: LD_INT 0
 401: ST_TO_ADDR
// uc_nation = 0 ;
 402: LD_ADDR_OWVAR 21
 406: PUSH
 407: LD_INT 0
 409: ST_TO_ADDR
// classes := [ class_apeman , class_apeman_soldier , class_baggie , class_phororhacos , class_tiger , class_horse ] ;
 410: LD_ADDR_VAR 0 7
 414: PUSH
 415: LD_INT 12
 417: PUSH
 418: LD_INT 15
 420: PUSH
 421: LD_INT 13
 423: PUSH
 424: LD_INT 18
 426: PUSH
 427: LD_INT 14
 429: PUSH
 430: LD_INT 21
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: ST_TO_ADDR
// waterClass := [ class_fish ] ;
 441: LD_ADDR_VAR 0 8
 445: PUSH
 446: LD_INT 20
 448: PUSH
 449: EMPTY
 450: LIST
 451: ST_TO_ADDR
// InitHc_All ( ) ;
 452: CALL_OW 584
// for i := 1 to numbers - 2 do
 456: LD_ADDR_VAR 0 5
 460: PUSH
 461: DOUBLE
 462: LD_INT 1
 464: DEC
 465: ST_TO_ADDR
 466: LD_VAR 0 3
 470: PUSH
 471: LD_INT 2
 473: MINUS
 474: PUSH
 475: FOR_TO
 476: IFFALSE 617
// begin if numbers [ i ] = 0 then
 478: LD_VAR 0 3
 482: PUSH
 483: LD_VAR 0 5
 487: ARRAY
 488: PUSH
 489: LD_INT 0
 491: EQUAL
 492: IFFALSE 496
// continue ;
 494: GO 475
// hc_class := classes [ i ] ;
 496: LD_ADDR_OWVAR 28
 500: PUSH
 501: LD_VAR 0 7
 505: PUSH
 506: LD_VAR 0 5
 510: ARRAY
 511: ST_TO_ADDR
// hc_attr := [ rand ( 8 , 12 ) , rand ( 8 , 12 ) ] ;
 512: LD_ADDR_OWVAR 29
 516: PUSH
 517: LD_INT 8
 519: PPUSH
 520: LD_INT 12
 522: PPUSH
 523: CALL_OW 12
 527: PUSH
 528: LD_INT 8
 530: PPUSH
 531: LD_INT 12
 533: PPUSH
 534: CALL_OW 12
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) + Difficulty * 5 ;
 543: LD_ADDR_OWVAR 35
 547: PUSH
 548: LD_INT 5
 550: NEG
 551: PPUSH
 552: LD_INT 5
 554: PPUSH
 555: CALL_OW 12
 559: PUSH
 560: LD_OWVAR 67
 564: PUSH
 565: LD_INT 5
 567: MUL
 568: PLUS
 569: ST_TO_ADDR
// for j := 1 to numbers [ i ] do
 570: LD_ADDR_VAR 0 6
 574: PUSH
 575: DOUBLE
 576: LD_INT 1
 578: DEC
 579: ST_TO_ADDR
 580: LD_VAR 0 3
 584: PUSH
 585: LD_VAR 0 5
 589: ARRAY
 590: PUSH
 591: FOR_TO
 592: IFFALSE 613
// PlaceUnitArea ( CreateHuman , area , false ) ;
 594: CALL_OW 44
 598: PPUSH
 599: LD_VAR 0 1
 603: PPUSH
 604: LD_INT 0
 606: PPUSH
 607: CALL_OW 49
 611: GO 591
 613: POP
 614: POP
// end ;
 615: GO 475
 617: POP
 618: POP
// if not waterArea then
 619: LD_VAR 0 2
 623: NOT
 624: IFFALSE 628
// exit ;
 626: GO 708
// hc_class := waterClass [ 1 ] ;
 628: LD_ADDR_OWVAR 28
 632: PUSH
 633: LD_VAR 0 8
 637: PUSH
 638: LD_INT 1
 640: ARRAY
 641: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 642: LD_ADDR_OWVAR 29
 646: PUSH
 647: LD_INT 10
 649: PUSH
 650: LD_INT 10
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: ST_TO_ADDR
// hc_agressivity := 0 ;
 657: LD_ADDR_OWVAR 35
 661: PUSH
 662: LD_INT 0
 664: ST_TO_ADDR
// for j := 1 to numbers [ 7 ] do
 665: LD_ADDR_VAR 0 6
 669: PUSH
 670: DOUBLE
 671: LD_INT 1
 673: DEC
 674: ST_TO_ADDR
 675: LD_VAR 0 3
 679: PUSH
 680: LD_INT 7
 682: ARRAY
 683: PUSH
 684: FOR_TO
 685: IFFALSE 706
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 687: CALL_OW 44
 691: PPUSH
 692: LD_VAR 0 2
 696: PPUSH
 697: LD_INT 0
 699: PPUSH
 700: CALL_OW 49
 704: GO 684
 706: POP
 707: POP
// end ; end_of_file
 708: LD_VAR 0 4
 712: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do var i ;
 713: LD_INT 22
 715: PUSH
 716: LD_INT 0
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: PUSH
 723: LD_INT 25
 725: PUSH
 726: LD_INT 15
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PPUSH
 737: CALL_OW 69
 741: IFFALSE 847
 743: GO 745
 745: DISABLE
 746: LD_INT 0
 748: PPUSH
// begin enable ;
 749: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do
 750: LD_ADDR_VAR 0 1
 754: PUSH
 755: LD_INT 22
 757: PUSH
 758: LD_INT 0
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: PUSH
 765: LD_INT 25
 767: PUSH
 768: LD_INT 15
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PPUSH
 779: CALL_OW 69
 783: PUSH
 784: FOR_IN
 785: IFFALSE 845
// if GetLives ( i ) < 1000 then
 787: LD_VAR 0 1
 791: PPUSH
 792: CALL_OW 256
 796: PUSH
 797: LD_INT 1000
 799: LESS
 800: IFFALSE 843
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , i ) ) ;
 802: LD_VAR 0 1
 806: PPUSH
 807: LD_INT 3
 809: PUSH
 810: LD_INT 22
 812: PUSH
 813: LD_INT 0
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PPUSH
 824: CALL_OW 69
 828: PPUSH
 829: LD_VAR 0 1
 833: PPUSH
 834: CALL_OW 74
 838: PPUSH
 839: CALL_OW 115
 843: GO 784
 845: POP
 846: POP
// end ;
 847: PPOPN 1
 849: END
// every 3 do var i , enemy , x , y , d ;
 850: GO 852
 852: DISABLE
 853: LD_INT 0
 855: PPUSH
 856: PPUSH
 857: PPUSH
 858: PPUSH
 859: PPUSH
// begin enable ;
 860: ENABLE
// for i := 2 to huntersAmount do
 861: LD_ADDR_VAR 0 1
 865: PUSH
 866: DOUBLE
 867: LD_INT 2
 869: DEC
 870: ST_TO_ADDR
 871: LD_EXP 3
 875: PUSH
 876: FOR_TO
 877: IFFALSE 1216
// begin if not HasTask ( hunters [ i ] ) then
 879: LD_EXP 6
 883: PUSH
 884: LD_VAR 0 1
 888: ARRAY
 889: PPUSH
 890: CALL_OW 314
 894: NOT
 895: IFFALSE 1214
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , hunters [ i ] ) ;
 897: LD_ADDR_VAR 0 2
 901: PUSH
 902: LD_INT 22
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PPUSH
 912: CALL_OW 69
 916: PPUSH
 917: LD_EXP 6
 921: PUSH
 922: LD_VAR 0 1
 926: ARRAY
 927: PPUSH
 928: CALL_OW 74
 932: ST_TO_ADDR
// if not enemy then
 933: LD_VAR 0 2
 937: NOT
 938: IFFALSE 942
// continue ;
 940: GO 876
// if GetDistUnits ( hunters [ i ] , enemy ) < 17 then
 942: LD_EXP 6
 946: PUSH
 947: LD_VAR 0 1
 951: ARRAY
 952: PPUSH
 953: LD_VAR 0 2
 957: PPUSH
 958: CALL_OW 296
 962: PUSH
 963: LD_INT 17
 965: LESS
 966: IFFALSE 1069
// begin if GetClass ( hunters [ i ] ) = class_desert_warior then
 968: LD_EXP 6
 972: PUSH
 973: LD_VAR 0 1
 977: ARRAY
 978: PPUSH
 979: CALL_OW 257
 983: PUSH
 984: LD_INT 11
 986: EQUAL
 987: IFFALSE 1047
// if GetClass ( enemy ) in [ class_frog , class_fish , class_baggie ] then
 989: LD_VAR 0 2
 993: PPUSH
 994: CALL_OW 257
 998: PUSH
 999: LD_INT 19
1001: PUSH
1002: LD_INT 20
1004: PUSH
1005: LD_INT 13
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: LIST
1012: IN
1013: IFFALSE 1032
// ComCarabine ( hunters [ i ] ) else
1015: LD_EXP 6
1019: PUSH
1020: LD_VAR 0 1
1024: ARRAY
1025: PPUSH
1026: CALL_OW 162
1030: GO 1047
// ComSabre ( hunters [ i ] ) ;
1032: LD_EXP 6
1036: PUSH
1037: LD_VAR 0 1
1041: ARRAY
1042: PPUSH
1043: CALL_OW 163
// ComAttackUnit ( hunters [ i ] , enemy ) ;
1047: LD_EXP 6
1051: PUSH
1052: LD_VAR 0 1
1056: ARRAY
1057: PPUSH
1058: LD_VAR 0 2
1062: PPUSH
1063: CALL_OW 115
// end else
1067: GO 1214
// begin d := rand ( 0 , 5 ) ;
1069: LD_ADDR_VAR 0 5
1073: PUSH
1074: LD_INT 0
1076: PPUSH
1077: LD_INT 5
1079: PPUSH
1080: CALL_OW 12
1084: ST_TO_ADDR
// x := ShiftX ( GetX ( hunters [ i ] ) , d , 8 ) ;
1085: LD_ADDR_VAR 0 3
1089: PUSH
1090: LD_EXP 6
1094: PUSH
1095: LD_VAR 0 1
1099: ARRAY
1100: PPUSH
1101: CALL_OW 250
1105: PPUSH
1106: LD_VAR 0 5
1110: PPUSH
1111: LD_INT 8
1113: PPUSH
1114: CALL_OW 272
1118: ST_TO_ADDR
// y := ShiftY ( GetY ( hunters [ i ] ) , d , 8 ) ;
1119: LD_ADDR_VAR 0 4
1123: PUSH
1124: LD_EXP 6
1128: PUSH
1129: LD_VAR 0 1
1133: ARRAY
1134: PPUSH
1135: CALL_OW 251
1139: PPUSH
1140: LD_VAR 0 5
1144: PPUSH
1145: LD_INT 8
1147: PPUSH
1148: CALL_OW 273
1152: ST_TO_ADDR
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
1153: LD_VAR 0 3
1157: PPUSH
1158: LD_VAR 0 4
1162: PPUSH
1163: CALL_OW 488
1167: PUSH
1168: LD_VAR 0 3
1172: PPUSH
1173: LD_VAR 0 4
1177: PPUSH
1178: CALL_OW 428
1182: PUSH
1183: LD_INT 0
1185: EQUAL
1186: AND
1187: IFFALSE 1214
// ComMoveXY ( hunters [ i ] , x , y ) ;
1189: LD_EXP 6
1193: PUSH
1194: LD_VAR 0 1
1198: ARRAY
1199: PPUSH
1200: LD_VAR 0 3
1204: PPUSH
1205: LD_VAR 0 4
1209: PPUSH
1210: CALL_OW 111
// end ; end ; end ;
1214: GO 876
1216: POP
1217: POP
// end ; end_of_file
1218: PPOPN 5
1220: END
// on UnitGoesToRed ( un ) do var i ;
1221: LD_INT 0
1223: PPUSH
// begin if GetSide ( un ) = 1 then
1224: LD_VAR 0 1
1228: PPUSH
1229: CALL_OW 255
1233: PUSH
1234: LD_INT 1
1236: EQUAL
1237: IFFALSE 1246
// YouLost ( hunt2 ) ;
1239: LD_STRING hunt2
1241: PPUSH
1242: CALL_OW 104
// if GetSide ( un ) > 1 then
1246: LD_VAR 0 1
1250: PPUSH
1251: CALL_OW 255
1255: PUSH
1256: LD_INT 1
1258: GREATER
1259: IFFALSE 1312
// begin for i := 1 to 6 do
1261: LD_ADDR_VAR 0 2
1265: PUSH
1266: DOUBLE
1267: LD_INT 1
1269: DEC
1270: ST_TO_ADDR
1271: LD_INT 6
1273: PUSH
1274: FOR_TO
1275: IFFALSE 1298
// begin wait ( 0 0$1 ) ;
1277: LD_INT 35
1279: PPUSH
1280: CALL_OW 67
// SetLives ( un , 249 ) ;
1284: LD_VAR 0 1
1288: PPUSH
1289: LD_INT 249
1291: PPUSH
1292: CALL_OW 234
// end ;
1296: GO 1274
1298: POP
1299: POP
// SetLives ( un , 1000 ) ;
1300: LD_VAR 0 1
1304: PPUSH
1305: LD_INT 1000
1307: PPUSH
1308: CALL_OW 234
// end ; end ;
1312: PPOPN 2
1314: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 > 1 then
1315: LD_VAR 0 1
1319: PUSH
1320: LD_INT 1
1322: EQUAL
1323: PUSH
1324: LD_VAR 0 2
1328: PUSH
1329: LD_INT 1
1331: GREATER
1332: AND
1333: IFFALSE 1342
// YouLost ( hunt1 ) ;
1335: LD_STRING hunt1
1337: PPUSH
1338: CALL_OW 104
// end ;
1342: PPOPN 2
1344: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var point ;
1345: LD_INT 0
1347: PPUSH
// begin point := 0 ;
1348: LD_ADDR_VAR 0 4
1352: PUSH
1353: LD_INT 0
1355: ST_TO_ADDR
// case GetClass ( un ) of class_fish :
1356: LD_VAR 0 1
1360: PPUSH
1361: CALL_OW 257
1365: PUSH
1366: LD_INT 20
1368: DOUBLE
1369: EQUAL
1370: IFTRUE 1374
1372: GO 1385
1374: POP
// point := 10 ; class_horse :
1375: LD_ADDR_VAR 0 4
1379: PUSH
1380: LD_INT 10
1382: ST_TO_ADDR
1383: GO 1519
1385: LD_INT 21
1387: DOUBLE
1388: EQUAL
1389: IFTRUE 1393
1391: GO 1404
1393: POP
// point := 10 ; class_baggie :
1394: LD_ADDR_VAR 0 4
1398: PUSH
1399: LD_INT 10
1401: ST_TO_ADDR
1402: GO 1519
1404: LD_INT 13
1406: DOUBLE
1407: EQUAL
1408: IFTRUE 1412
1410: GO 1423
1412: POP
// point := 5 ; class_phororhacos :
1413: LD_ADDR_VAR 0 4
1417: PUSH
1418: LD_INT 5
1420: ST_TO_ADDR
1421: GO 1519
1423: LD_INT 18
1425: DOUBLE
1426: EQUAL
1427: IFTRUE 1431
1429: GO 1442
1431: POP
// point := 10 ; class_tiger :
1432: LD_ADDR_VAR 0 4
1436: PUSH
1437: LD_INT 10
1439: ST_TO_ADDR
1440: GO 1519
1442: LD_INT 14
1444: DOUBLE
1445: EQUAL
1446: IFTRUE 1450
1448: GO 1461
1450: POP
// point := 20 ; class_apeman :
1451: LD_ADDR_VAR 0 4
1455: PUSH
1456: LD_INT 20
1458: ST_TO_ADDR
1459: GO 1519
1461: LD_INT 12
1463: DOUBLE
1464: EQUAL
1465: IFTRUE 1469
1467: GO 1480
1469: POP
// point := 30 ; class_apeman_soldier :
1470: LD_ADDR_VAR 0 4
1474: PUSH
1475: LD_INT 30
1477: ST_TO_ADDR
1478: GO 1519
1480: LD_INT 15
1482: DOUBLE
1483: EQUAL
1484: IFTRUE 1488
1486: GO 1499
1488: POP
// point := 50 ; class_frog :
1489: LD_ADDR_VAR 0 4
1493: PUSH
1494: LD_INT 50
1496: ST_TO_ADDR
1497: GO 1519
1499: LD_INT 19
1501: DOUBLE
1502: EQUAL
1503: IFTRUE 1507
1505: GO 1518
1507: POP
// point := 10 ; end ;
1508: LD_ADDR_VAR 0 4
1512: PUSH
1513: LD_INT 10
1515: ST_TO_ADDR
1516: GO 1519
1518: POP
// if point then
1519: LD_VAR 0 4
1523: IFFALSE 1562
// points := Replace ( points , killer_side , points [ killer_side ] + point ) ;
1525: LD_ADDR_EXP 5
1529: PUSH
1530: LD_EXP 5
1534: PPUSH
1535: LD_VAR 0 2
1539: PPUSH
1540: LD_EXP 5
1544: PUSH
1545: LD_VAR 0 2
1549: ARRAY
1550: PUSH
1551: LD_VAR 0 4
1555: PLUS
1556: PPUSH
1557: CALL_OW 1
1561: ST_TO_ADDR
// end ;
1562: PPOPN 4
1564: END
// every 0 0$20 trigger FilterAllUnits ( [ f_side , 0 ] ) < 10 do
1565: LD_INT 22
1567: PUSH
1568: LD_INT 0
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: PPUSH
1575: CALL_OW 69
1579: PUSH
1580: LD_INT 10
1582: LESS
1583: IFFALSE 1685
1585: GO 1587
1587: DISABLE
// begin enable ;
1588: ENABLE
// CreateNature ( natArea , watArea , [ rand ( 0 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 2 , 4 ) , rand ( 2 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) ] ) ;
1589: LD_INT 2
1591: PPUSH
1592: LD_INT 1
1594: PPUSH
1595: LD_INT 0
1597: PPUSH
1598: LD_INT 4
1600: PPUSH
1601: CALL_OW 12
1605: PUSH
1606: LD_INT 0
1608: PPUSH
1609: LD_INT 2
1611: PPUSH
1612: CALL_OW 12
1616: PUSH
1617: LD_INT 0
1619: PPUSH
1620: LD_INT 4
1622: PPUSH
1623: CALL_OW 12
1627: PUSH
1628: LD_INT 2
1630: PPUSH
1631: LD_INT 4
1633: PPUSH
1634: CALL_OW 12
1638: PUSH
1639: LD_INT 2
1641: PPUSH
1642: LD_INT 4
1644: PPUSH
1645: CALL_OW 12
1649: PUSH
1650: LD_INT 0
1652: PPUSH
1653: LD_INT 2
1655: PPUSH
1656: CALL_OW 12
1660: PUSH
1661: LD_INT 0
1663: PPUSH
1664: LD_INT 4
1666: PPUSH
1667: CALL_OW 12
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: PPUSH
1681: CALL 387 0 3
// end ;
1685: END
// every 0 0$1 do var i ;
1686: GO 1688
1688: DISABLE
1689: LD_INT 0
1691: PPUSH
// begin enable ;
1692: ENABLE
// display_strings := [ ] ;
1693: LD_ADDR_OWVAR 47
1697: PUSH
1698: EMPTY
1699: ST_TO_ADDR
// for i := 1 to huntersAmount do
1700: LD_ADDR_VAR 0 1
1704: PUSH
1705: DOUBLE
1706: LD_INT 1
1708: DEC
1709: ST_TO_ADDR
1710: LD_EXP 3
1714: PUSH
1715: FOR_TO
1716: IFFALSE 1850
// begin display_strings := display_strings ^ [ #player & i , i , points [ i ] ] ;
1718: LD_ADDR_OWVAR 47
1722: PUSH
1723: LD_OWVAR 47
1727: PUSH
1728: LD_STRING #player
1730: PUSH
1731: LD_VAR 0 1
1735: STR
1736: PUSH
1737: LD_VAR 0 1
1741: PUSH
1742: LD_EXP 5
1746: PUSH
1747: LD_VAR 0 1
1751: ARRAY
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: LIST
1757: ADD
1758: ST_TO_ADDR
// if points [ i ] >= [ 750 , 1250 , 2000 ] [ Difficulty ] then
1759: LD_EXP 5
1763: PUSH
1764: LD_VAR 0 1
1768: ARRAY
1769: PUSH
1770: LD_INT 750
1772: PUSH
1773: LD_INT 1250
1775: PUSH
1776: LD_INT 2000
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: LIST
1783: PUSH
1784: LD_OWVAR 67
1788: ARRAY
1789: GREATEREQUAL
1790: IFFALSE 1848
// begin if i = 1 then
1792: LD_VAR 0 1
1796: PUSH
1797: LD_INT 1
1799: EQUAL
1800: IFFALSE 1841
// begin DialogueOn ;
1802: CALL_OW 6
// SetAchievement ( ACH_HUNT ) ;
1806: LD_STRING ACH_HUNT
1808: PPUSH
1809: CALL_OW 543
// display_strings := [ #hunting-win ] ;
1813: LD_ADDR_OWVAR 47
1817: PUSH
1818: LD_STRING #hunting-win
1820: PUSH
1821: EMPTY
1822: LIST
1823: ST_TO_ADDR
// dwait ( 0 0$5 ) ;
1824: LD_INT 175
1826: PPUSH
1827: CALL_OW 68
// YouWin ;
1831: CALL_OW 103
// DialogueOff ;
1835: CALL_OW 7
// end else
1839: GO 1848
// YouLost ( hunt3 ) ;
1841: LD_STRING hunt3
1843: PPUSH
1844: CALL_OW 104
// end ; end ;
1848: GO 1715
1850: POP
1851: POP
// end ; end_of_file end_of_file
1852: PPOPN 1
1854: END
// export globalGameSaveCounter ; every 0 0$1 do
1855: GO 1857
1857: DISABLE
// begin enable ;
1858: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1859: LD_STRING updateTimer(
1861: PUSH
1862: LD_OWVAR 1
1866: STR
1867: PUSH
1868: LD_STRING );
1870: STR
1871: PPUSH
1872: CALL_OW 559
// end ;
1876: END
// every 0 0$1 do
1877: GO 1879
1879: DISABLE
// begin globalGameSaveCounter := 0 ;
1880: LD_ADDR_EXP 7
1884: PUSH
1885: LD_INT 0
1887: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
1888: LD_STRING setGameSaveCounter(0)
1890: PPUSH
1891: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
1895: LD_STRING initStreamRollete();
1897: PPUSH
1898: CALL_OW 559
// InitStreamMode ;
1902: CALL 3228 0 0
// DefineStreamItems ( false ) ;
1906: LD_INT 0
1908: PPUSH
1909: CALL 3692 0 1
// end ;
1913: END
// export function SOS_MapStart ( ) ; begin
1914: LD_INT 0
1916: PPUSH
// if streamModeActive then
1917: LD_EXP 8
1921: IFFALSE 1930
// DefineStreamItems ( true ) ;
1923: LD_INT 1
1925: PPUSH
1926: CALL 3692 0 1
// UpdateLuaVariables ( ) ;
1930: CALL 1947 0 0
// UpdateFactoryWaypoints ( ) ;
1934: CALL 16553 0 0
// UpdateWarehouseGatheringPoints ( ) ;
1938: CALL 16810 0 0
// end ;
1942: LD_VAR 0 1
1946: RET
// function UpdateLuaVariables ( ) ; begin
1947: LD_INT 0
1949: PPUSH
// if globalGameSaveCounter then
1950: LD_EXP 7
1954: IFFALSE 1988
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
1956: LD_ADDR_EXP 7
1960: PUSH
1961: LD_EXP 7
1965: PPUSH
1966: CALL 60930 0 1
1970: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1971: LD_STRING setGameSaveCounter(
1973: PUSH
1974: LD_EXP 7
1978: STR
1979: PUSH
1980: LD_STRING )
1982: STR
1983: PPUSH
1984: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
1988: LD_STRING setGameDifficulty(
1990: PUSH
1991: LD_OWVAR 67
1995: STR
1996: PUSH
1997: LD_STRING )
1999: STR
2000: PPUSH
2001: CALL_OW 559
// end ;
2005: LD_VAR 0 1
2009: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
2010: LD_INT 0
2012: PPUSH
// if p2 = stream_mode then
2013: LD_VAR 0 2
2017: PUSH
2018: LD_INT 100
2020: EQUAL
2021: IFFALSE 3024
// begin if not StreamModeActive then
2023: LD_EXP 8
2027: NOT
2028: IFFALSE 2038
// StreamModeActive := true ;
2030: LD_ADDR_EXP 8
2034: PUSH
2035: LD_INT 1
2037: ST_TO_ADDR
// if p3 = 0 then
2038: LD_VAR 0 3
2042: PUSH
2043: LD_INT 0
2045: EQUAL
2046: IFFALSE 2052
// InitStreamMode ;
2048: CALL 3228 0 0
// if p3 = 1 then
2052: LD_VAR 0 3
2056: PUSH
2057: LD_INT 1
2059: EQUAL
2060: IFFALSE 2070
// sRocket := true ;
2062: LD_ADDR_EXP 13
2066: PUSH
2067: LD_INT 1
2069: ST_TO_ADDR
// if p3 = 2 then
2070: LD_VAR 0 3
2074: PUSH
2075: LD_INT 2
2077: EQUAL
2078: IFFALSE 2088
// sSpeed := true ;
2080: LD_ADDR_EXP 12
2084: PUSH
2085: LD_INT 1
2087: ST_TO_ADDR
// if p3 = 3 then
2088: LD_VAR 0 3
2092: PUSH
2093: LD_INT 3
2095: EQUAL
2096: IFFALSE 2106
// sEngine := true ;
2098: LD_ADDR_EXP 14
2102: PUSH
2103: LD_INT 1
2105: ST_TO_ADDR
// if p3 = 4 then
2106: LD_VAR 0 3
2110: PUSH
2111: LD_INT 4
2113: EQUAL
2114: IFFALSE 2124
// sSpec := true ;
2116: LD_ADDR_EXP 11
2120: PUSH
2121: LD_INT 1
2123: ST_TO_ADDR
// if p3 = 5 then
2124: LD_VAR 0 3
2128: PUSH
2129: LD_INT 5
2131: EQUAL
2132: IFFALSE 2142
// sLevel := true ;
2134: LD_ADDR_EXP 15
2138: PUSH
2139: LD_INT 1
2141: ST_TO_ADDR
// if p3 = 6 then
2142: LD_VAR 0 3
2146: PUSH
2147: LD_INT 6
2149: EQUAL
2150: IFFALSE 2160
// sArmoury := true ;
2152: LD_ADDR_EXP 16
2156: PUSH
2157: LD_INT 1
2159: ST_TO_ADDR
// if p3 = 7 then
2160: LD_VAR 0 3
2164: PUSH
2165: LD_INT 7
2167: EQUAL
2168: IFFALSE 2178
// sRadar := true ;
2170: LD_ADDR_EXP 17
2174: PUSH
2175: LD_INT 1
2177: ST_TO_ADDR
// if p3 = 8 then
2178: LD_VAR 0 3
2182: PUSH
2183: LD_INT 8
2185: EQUAL
2186: IFFALSE 2196
// sBunker := true ;
2188: LD_ADDR_EXP 18
2192: PUSH
2193: LD_INT 1
2195: ST_TO_ADDR
// if p3 = 9 then
2196: LD_VAR 0 3
2200: PUSH
2201: LD_INT 9
2203: EQUAL
2204: IFFALSE 2214
// sHack := true ;
2206: LD_ADDR_EXP 19
2210: PUSH
2211: LD_INT 1
2213: ST_TO_ADDR
// if p3 = 10 then
2214: LD_VAR 0 3
2218: PUSH
2219: LD_INT 10
2221: EQUAL
2222: IFFALSE 2232
// sFire := true ;
2224: LD_ADDR_EXP 20
2228: PUSH
2229: LD_INT 1
2231: ST_TO_ADDR
// if p3 = 11 then
2232: LD_VAR 0 3
2236: PUSH
2237: LD_INT 11
2239: EQUAL
2240: IFFALSE 2250
// sRefresh := true ;
2242: LD_ADDR_EXP 21
2246: PUSH
2247: LD_INT 1
2249: ST_TO_ADDR
// if p3 = 12 then
2250: LD_VAR 0 3
2254: PUSH
2255: LD_INT 12
2257: EQUAL
2258: IFFALSE 2268
// sExp := true ;
2260: LD_ADDR_EXP 22
2264: PUSH
2265: LD_INT 1
2267: ST_TO_ADDR
// if p3 = 13 then
2268: LD_VAR 0 3
2272: PUSH
2273: LD_INT 13
2275: EQUAL
2276: IFFALSE 2286
// sDepot := true ;
2278: LD_ADDR_EXP 23
2282: PUSH
2283: LD_INT 1
2285: ST_TO_ADDR
// if p3 = 14 then
2286: LD_VAR 0 3
2290: PUSH
2291: LD_INT 14
2293: EQUAL
2294: IFFALSE 2304
// sFlag := true ;
2296: LD_ADDR_EXP 24
2300: PUSH
2301: LD_INT 1
2303: ST_TO_ADDR
// if p3 = 15 then
2304: LD_VAR 0 3
2308: PUSH
2309: LD_INT 15
2311: EQUAL
2312: IFFALSE 2322
// sKamikadze := true ;
2314: LD_ADDR_EXP 32
2318: PUSH
2319: LD_INT 1
2321: ST_TO_ADDR
// if p3 = 16 then
2322: LD_VAR 0 3
2326: PUSH
2327: LD_INT 16
2329: EQUAL
2330: IFFALSE 2340
// sTroll := true ;
2332: LD_ADDR_EXP 33
2336: PUSH
2337: LD_INT 1
2339: ST_TO_ADDR
// if p3 = 17 then
2340: LD_VAR 0 3
2344: PUSH
2345: LD_INT 17
2347: EQUAL
2348: IFFALSE 2358
// sSlow := true ;
2350: LD_ADDR_EXP 34
2354: PUSH
2355: LD_INT 1
2357: ST_TO_ADDR
// if p3 = 18 then
2358: LD_VAR 0 3
2362: PUSH
2363: LD_INT 18
2365: EQUAL
2366: IFFALSE 2376
// sLack := true ;
2368: LD_ADDR_EXP 35
2372: PUSH
2373: LD_INT 1
2375: ST_TO_ADDR
// if p3 = 19 then
2376: LD_VAR 0 3
2380: PUSH
2381: LD_INT 19
2383: EQUAL
2384: IFFALSE 2394
// sTank := true ;
2386: LD_ADDR_EXP 37
2390: PUSH
2391: LD_INT 1
2393: ST_TO_ADDR
// if p3 = 20 then
2394: LD_VAR 0 3
2398: PUSH
2399: LD_INT 20
2401: EQUAL
2402: IFFALSE 2412
// sRemote := true ;
2404: LD_ADDR_EXP 38
2408: PUSH
2409: LD_INT 1
2411: ST_TO_ADDR
// if p3 = 21 then
2412: LD_VAR 0 3
2416: PUSH
2417: LD_INT 21
2419: EQUAL
2420: IFFALSE 2430
// sPowell := true ;
2422: LD_ADDR_EXP 39
2426: PUSH
2427: LD_INT 1
2429: ST_TO_ADDR
// if p3 = 22 then
2430: LD_VAR 0 3
2434: PUSH
2435: LD_INT 22
2437: EQUAL
2438: IFFALSE 2448
// sTeleport := true ;
2440: LD_ADDR_EXP 42
2444: PUSH
2445: LD_INT 1
2447: ST_TO_ADDR
// if p3 = 23 then
2448: LD_VAR 0 3
2452: PUSH
2453: LD_INT 23
2455: EQUAL
2456: IFFALSE 2466
// sOilTower := true ;
2458: LD_ADDR_EXP 44
2462: PUSH
2463: LD_INT 1
2465: ST_TO_ADDR
// if p3 = 24 then
2466: LD_VAR 0 3
2470: PUSH
2471: LD_INT 24
2473: EQUAL
2474: IFFALSE 2484
// sShovel := true ;
2476: LD_ADDR_EXP 45
2480: PUSH
2481: LD_INT 1
2483: ST_TO_ADDR
// if p3 = 25 then
2484: LD_VAR 0 3
2488: PUSH
2489: LD_INT 25
2491: EQUAL
2492: IFFALSE 2502
// sSheik := true ;
2494: LD_ADDR_EXP 46
2498: PUSH
2499: LD_INT 1
2501: ST_TO_ADDR
// if p3 = 26 then
2502: LD_VAR 0 3
2506: PUSH
2507: LD_INT 26
2509: EQUAL
2510: IFFALSE 2520
// sEarthquake := true ;
2512: LD_ADDR_EXP 48
2516: PUSH
2517: LD_INT 1
2519: ST_TO_ADDR
// if p3 = 27 then
2520: LD_VAR 0 3
2524: PUSH
2525: LD_INT 27
2527: EQUAL
2528: IFFALSE 2538
// sAI := true ;
2530: LD_ADDR_EXP 49
2534: PUSH
2535: LD_INT 1
2537: ST_TO_ADDR
// if p3 = 28 then
2538: LD_VAR 0 3
2542: PUSH
2543: LD_INT 28
2545: EQUAL
2546: IFFALSE 2556
// sCargo := true ;
2548: LD_ADDR_EXP 52
2552: PUSH
2553: LD_INT 1
2555: ST_TO_ADDR
// if p3 = 29 then
2556: LD_VAR 0 3
2560: PUSH
2561: LD_INT 29
2563: EQUAL
2564: IFFALSE 2574
// sDLaser := true ;
2566: LD_ADDR_EXP 53
2570: PUSH
2571: LD_INT 1
2573: ST_TO_ADDR
// if p3 = 30 then
2574: LD_VAR 0 3
2578: PUSH
2579: LD_INT 30
2581: EQUAL
2582: IFFALSE 2592
// sExchange := true ;
2584: LD_ADDR_EXP 54
2588: PUSH
2589: LD_INT 1
2591: ST_TO_ADDR
// if p3 = 31 then
2592: LD_VAR 0 3
2596: PUSH
2597: LD_INT 31
2599: EQUAL
2600: IFFALSE 2610
// sFac := true ;
2602: LD_ADDR_EXP 55
2606: PUSH
2607: LD_INT 1
2609: ST_TO_ADDR
// if p3 = 32 then
2610: LD_VAR 0 3
2614: PUSH
2615: LD_INT 32
2617: EQUAL
2618: IFFALSE 2628
// sPower := true ;
2620: LD_ADDR_EXP 56
2624: PUSH
2625: LD_INT 1
2627: ST_TO_ADDR
// if p3 = 33 then
2628: LD_VAR 0 3
2632: PUSH
2633: LD_INT 33
2635: EQUAL
2636: IFFALSE 2646
// sRandom := true ;
2638: LD_ADDR_EXP 57
2642: PUSH
2643: LD_INT 1
2645: ST_TO_ADDR
// if p3 = 34 then
2646: LD_VAR 0 3
2650: PUSH
2651: LD_INT 34
2653: EQUAL
2654: IFFALSE 2664
// sShield := true ;
2656: LD_ADDR_EXP 58
2660: PUSH
2661: LD_INT 1
2663: ST_TO_ADDR
// if p3 = 35 then
2664: LD_VAR 0 3
2668: PUSH
2669: LD_INT 35
2671: EQUAL
2672: IFFALSE 2682
// sTime := true ;
2674: LD_ADDR_EXP 59
2678: PUSH
2679: LD_INT 1
2681: ST_TO_ADDR
// if p3 = 36 then
2682: LD_VAR 0 3
2686: PUSH
2687: LD_INT 36
2689: EQUAL
2690: IFFALSE 2700
// sTools := true ;
2692: LD_ADDR_EXP 60
2696: PUSH
2697: LD_INT 1
2699: ST_TO_ADDR
// if p3 = 101 then
2700: LD_VAR 0 3
2704: PUSH
2705: LD_INT 101
2707: EQUAL
2708: IFFALSE 2718
// sSold := true ;
2710: LD_ADDR_EXP 25
2714: PUSH
2715: LD_INT 1
2717: ST_TO_ADDR
// if p3 = 102 then
2718: LD_VAR 0 3
2722: PUSH
2723: LD_INT 102
2725: EQUAL
2726: IFFALSE 2736
// sDiff := true ;
2728: LD_ADDR_EXP 26
2732: PUSH
2733: LD_INT 1
2735: ST_TO_ADDR
// if p3 = 103 then
2736: LD_VAR 0 3
2740: PUSH
2741: LD_INT 103
2743: EQUAL
2744: IFFALSE 2754
// sFog := true ;
2746: LD_ADDR_EXP 29
2750: PUSH
2751: LD_INT 1
2753: ST_TO_ADDR
// if p3 = 104 then
2754: LD_VAR 0 3
2758: PUSH
2759: LD_INT 104
2761: EQUAL
2762: IFFALSE 2772
// sReset := true ;
2764: LD_ADDR_EXP 30
2768: PUSH
2769: LD_INT 1
2771: ST_TO_ADDR
// if p3 = 105 then
2772: LD_VAR 0 3
2776: PUSH
2777: LD_INT 105
2779: EQUAL
2780: IFFALSE 2790
// sSun := true ;
2782: LD_ADDR_EXP 31
2786: PUSH
2787: LD_INT 1
2789: ST_TO_ADDR
// if p3 = 106 then
2790: LD_VAR 0 3
2794: PUSH
2795: LD_INT 106
2797: EQUAL
2798: IFFALSE 2808
// sTiger := true ;
2800: LD_ADDR_EXP 27
2804: PUSH
2805: LD_INT 1
2807: ST_TO_ADDR
// if p3 = 107 then
2808: LD_VAR 0 3
2812: PUSH
2813: LD_INT 107
2815: EQUAL
2816: IFFALSE 2826
// sBomb := true ;
2818: LD_ADDR_EXP 28
2822: PUSH
2823: LD_INT 1
2825: ST_TO_ADDR
// if p3 = 108 then
2826: LD_VAR 0 3
2830: PUSH
2831: LD_INT 108
2833: EQUAL
2834: IFFALSE 2844
// sWound := true ;
2836: LD_ADDR_EXP 36
2840: PUSH
2841: LD_INT 1
2843: ST_TO_ADDR
// if p3 = 109 then
2844: LD_VAR 0 3
2848: PUSH
2849: LD_INT 109
2851: EQUAL
2852: IFFALSE 2862
// sBetray := true ;
2854: LD_ADDR_EXP 40
2858: PUSH
2859: LD_INT 1
2861: ST_TO_ADDR
// if p3 = 110 then
2862: LD_VAR 0 3
2866: PUSH
2867: LD_INT 110
2869: EQUAL
2870: IFFALSE 2880
// sContamin := true ;
2872: LD_ADDR_EXP 41
2876: PUSH
2877: LD_INT 1
2879: ST_TO_ADDR
// if p3 = 111 then
2880: LD_VAR 0 3
2884: PUSH
2885: LD_INT 111
2887: EQUAL
2888: IFFALSE 2898
// sOil := true ;
2890: LD_ADDR_EXP 43
2894: PUSH
2895: LD_INT 1
2897: ST_TO_ADDR
// if p3 = 112 then
2898: LD_VAR 0 3
2902: PUSH
2903: LD_INT 112
2905: EQUAL
2906: IFFALSE 2916
// sStu := true ;
2908: LD_ADDR_EXP 47
2912: PUSH
2913: LD_INT 1
2915: ST_TO_ADDR
// if p3 = 113 then
2916: LD_VAR 0 3
2920: PUSH
2921: LD_INT 113
2923: EQUAL
2924: IFFALSE 2934
// sBazooka := true ;
2926: LD_ADDR_EXP 50
2930: PUSH
2931: LD_INT 1
2933: ST_TO_ADDR
// if p3 = 114 then
2934: LD_VAR 0 3
2938: PUSH
2939: LD_INT 114
2941: EQUAL
2942: IFFALSE 2952
// sMortar := true ;
2944: LD_ADDR_EXP 51
2948: PUSH
2949: LD_INT 1
2951: ST_TO_ADDR
// if p3 = 115 then
2952: LD_VAR 0 3
2956: PUSH
2957: LD_INT 115
2959: EQUAL
2960: IFFALSE 2970
// sRanger := true ;
2962: LD_ADDR_EXP 61
2966: PUSH
2967: LD_INT 1
2969: ST_TO_ADDR
// if p3 = 116 then
2970: LD_VAR 0 3
2974: PUSH
2975: LD_INT 116
2977: EQUAL
2978: IFFALSE 2988
// sComputer := true ;
2980: LD_ADDR_EXP 62
2984: PUSH
2985: LD_INT 1
2987: ST_TO_ADDR
// if p3 = 117 then
2988: LD_VAR 0 3
2992: PUSH
2993: LD_INT 117
2995: EQUAL
2996: IFFALSE 3006
// s30 := true ;
2998: LD_ADDR_EXP 63
3002: PUSH
3003: LD_INT 1
3005: ST_TO_ADDR
// if p3 = 118 then
3006: LD_VAR 0 3
3010: PUSH
3011: LD_INT 118
3013: EQUAL
3014: IFFALSE 3024
// s60 := true ;
3016: LD_ADDR_EXP 64
3020: PUSH
3021: LD_INT 1
3023: ST_TO_ADDR
// end ; if p2 = hack_mode then
3024: LD_VAR 0 2
3028: PUSH
3029: LD_INT 101
3031: EQUAL
3032: IFFALSE 3160
// begin case p3 of 1 :
3034: LD_VAR 0 3
3038: PUSH
3039: LD_INT 1
3041: DOUBLE
3042: EQUAL
3043: IFTRUE 3047
3045: GO 3054
3047: POP
// hHackUnlimitedResources ; 2 :
3048: CALL 15299 0 0
3052: GO 3160
3054: LD_INT 2
3056: DOUBLE
3057: EQUAL
3058: IFTRUE 3062
3060: GO 3069
3062: POP
// hHackSetLevel10 ; 3 :
3063: CALL 15432 0 0
3067: GO 3160
3069: LD_INT 3
3071: DOUBLE
3072: EQUAL
3073: IFTRUE 3077
3075: GO 3084
3077: POP
// hHackSetLevel10YourUnits ; 4 :
3078: CALL 15517 0 0
3082: GO 3160
3084: LD_INT 4
3086: DOUBLE
3087: EQUAL
3088: IFTRUE 3092
3090: GO 3099
3092: POP
// hHackInvincible ; 5 :
3093: CALL 15965 0 0
3097: GO 3160
3099: LD_INT 5
3101: DOUBLE
3102: EQUAL
3103: IFTRUE 3107
3105: GO 3114
3107: POP
// hHackInvisible ; 6 :
3108: CALL 16076 0 0
3112: GO 3160
3114: LD_INT 6
3116: DOUBLE
3117: EQUAL
3118: IFTRUE 3122
3120: GO 3129
3122: POP
// hHackChangeYourSide ; 7 :
3123: CALL 16133 0 0
3127: GO 3160
3129: LD_INT 7
3131: DOUBLE
3132: EQUAL
3133: IFTRUE 3137
3135: GO 3144
3137: POP
// hHackChangeUnitSide ; 8 :
3138: CALL 16175 0 0
3142: GO 3160
3144: LD_INT 8
3146: DOUBLE
3147: EQUAL
3148: IFTRUE 3152
3150: GO 3159
3152: POP
// hHackFog ; end ;
3153: CALL 16276 0 0
3157: GO 3160
3159: POP
// end ; if p2 = game_save_mode then
3160: LD_VAR 0 2
3164: PUSH
3165: LD_INT 102
3167: EQUAL
3168: IFFALSE 3223
// begin if p3 = 1 then
3170: LD_VAR 0 3
3174: PUSH
3175: LD_INT 1
3177: EQUAL
3178: IFFALSE 3190
// globalGameSaveCounter := p4 ;
3180: LD_ADDR_EXP 7
3184: PUSH
3185: LD_VAR 0 4
3189: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
3190: LD_VAR 0 3
3194: PUSH
3195: LD_INT 2
3197: EQUAL
3198: PUSH
3199: LD_EXP 7
3203: AND
3204: IFFALSE 3223
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
3206: LD_STRING setGameSaveCounter(
3208: PUSH
3209: LD_EXP 7
3213: STR
3214: PUSH
3215: LD_STRING )
3217: STR
3218: PPUSH
3219: CALL_OW 559
// end ; end ;
3223: LD_VAR 0 7
3227: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
3228: LD_INT 0
3230: PPUSH
// streamModeActive := false ;
3231: LD_ADDR_EXP 8
3235: PUSH
3236: LD_INT 0
3238: ST_TO_ADDR
// normalCounter := 36 ;
3239: LD_ADDR_EXP 9
3243: PUSH
3244: LD_INT 36
3246: ST_TO_ADDR
// hardcoreCounter := 18 ;
3247: LD_ADDR_EXP 10
3251: PUSH
3252: LD_INT 18
3254: ST_TO_ADDR
// sRocket := false ;
3255: LD_ADDR_EXP 13
3259: PUSH
3260: LD_INT 0
3262: ST_TO_ADDR
// sSpeed := false ;
3263: LD_ADDR_EXP 12
3267: PUSH
3268: LD_INT 0
3270: ST_TO_ADDR
// sEngine := false ;
3271: LD_ADDR_EXP 14
3275: PUSH
3276: LD_INT 0
3278: ST_TO_ADDR
// sSpec := false ;
3279: LD_ADDR_EXP 11
3283: PUSH
3284: LD_INT 0
3286: ST_TO_ADDR
// sLevel := false ;
3287: LD_ADDR_EXP 15
3291: PUSH
3292: LD_INT 0
3294: ST_TO_ADDR
// sArmoury := false ;
3295: LD_ADDR_EXP 16
3299: PUSH
3300: LD_INT 0
3302: ST_TO_ADDR
// sRadar := false ;
3303: LD_ADDR_EXP 17
3307: PUSH
3308: LD_INT 0
3310: ST_TO_ADDR
// sBunker := false ;
3311: LD_ADDR_EXP 18
3315: PUSH
3316: LD_INT 0
3318: ST_TO_ADDR
// sHack := false ;
3319: LD_ADDR_EXP 19
3323: PUSH
3324: LD_INT 0
3326: ST_TO_ADDR
// sFire := false ;
3327: LD_ADDR_EXP 20
3331: PUSH
3332: LD_INT 0
3334: ST_TO_ADDR
// sRefresh := false ;
3335: LD_ADDR_EXP 21
3339: PUSH
3340: LD_INT 0
3342: ST_TO_ADDR
// sExp := false ;
3343: LD_ADDR_EXP 22
3347: PUSH
3348: LD_INT 0
3350: ST_TO_ADDR
// sDepot := false ;
3351: LD_ADDR_EXP 23
3355: PUSH
3356: LD_INT 0
3358: ST_TO_ADDR
// sFlag := false ;
3359: LD_ADDR_EXP 24
3363: PUSH
3364: LD_INT 0
3366: ST_TO_ADDR
// sKamikadze := false ;
3367: LD_ADDR_EXP 32
3371: PUSH
3372: LD_INT 0
3374: ST_TO_ADDR
// sTroll := false ;
3375: LD_ADDR_EXP 33
3379: PUSH
3380: LD_INT 0
3382: ST_TO_ADDR
// sSlow := false ;
3383: LD_ADDR_EXP 34
3387: PUSH
3388: LD_INT 0
3390: ST_TO_ADDR
// sLack := false ;
3391: LD_ADDR_EXP 35
3395: PUSH
3396: LD_INT 0
3398: ST_TO_ADDR
// sTank := false ;
3399: LD_ADDR_EXP 37
3403: PUSH
3404: LD_INT 0
3406: ST_TO_ADDR
// sRemote := false ;
3407: LD_ADDR_EXP 38
3411: PUSH
3412: LD_INT 0
3414: ST_TO_ADDR
// sPowell := false ;
3415: LD_ADDR_EXP 39
3419: PUSH
3420: LD_INT 0
3422: ST_TO_ADDR
// sTeleport := false ;
3423: LD_ADDR_EXP 42
3427: PUSH
3428: LD_INT 0
3430: ST_TO_ADDR
// sOilTower := false ;
3431: LD_ADDR_EXP 44
3435: PUSH
3436: LD_INT 0
3438: ST_TO_ADDR
// sShovel := false ;
3439: LD_ADDR_EXP 45
3443: PUSH
3444: LD_INT 0
3446: ST_TO_ADDR
// sSheik := false ;
3447: LD_ADDR_EXP 46
3451: PUSH
3452: LD_INT 0
3454: ST_TO_ADDR
// sEarthquake := false ;
3455: LD_ADDR_EXP 48
3459: PUSH
3460: LD_INT 0
3462: ST_TO_ADDR
// sAI := false ;
3463: LD_ADDR_EXP 49
3467: PUSH
3468: LD_INT 0
3470: ST_TO_ADDR
// sCargo := false ;
3471: LD_ADDR_EXP 52
3475: PUSH
3476: LD_INT 0
3478: ST_TO_ADDR
// sDLaser := false ;
3479: LD_ADDR_EXP 53
3483: PUSH
3484: LD_INT 0
3486: ST_TO_ADDR
// sExchange := false ;
3487: LD_ADDR_EXP 54
3491: PUSH
3492: LD_INT 0
3494: ST_TO_ADDR
// sFac := false ;
3495: LD_ADDR_EXP 55
3499: PUSH
3500: LD_INT 0
3502: ST_TO_ADDR
// sPower := false ;
3503: LD_ADDR_EXP 56
3507: PUSH
3508: LD_INT 0
3510: ST_TO_ADDR
// sRandom := false ;
3511: LD_ADDR_EXP 57
3515: PUSH
3516: LD_INT 0
3518: ST_TO_ADDR
// sShield := false ;
3519: LD_ADDR_EXP 58
3523: PUSH
3524: LD_INT 0
3526: ST_TO_ADDR
// sTime := false ;
3527: LD_ADDR_EXP 59
3531: PUSH
3532: LD_INT 0
3534: ST_TO_ADDR
// sTools := false ;
3535: LD_ADDR_EXP 60
3539: PUSH
3540: LD_INT 0
3542: ST_TO_ADDR
// sSold := false ;
3543: LD_ADDR_EXP 25
3547: PUSH
3548: LD_INT 0
3550: ST_TO_ADDR
// sDiff := false ;
3551: LD_ADDR_EXP 26
3555: PUSH
3556: LD_INT 0
3558: ST_TO_ADDR
// sFog := false ;
3559: LD_ADDR_EXP 29
3563: PUSH
3564: LD_INT 0
3566: ST_TO_ADDR
// sReset := false ;
3567: LD_ADDR_EXP 30
3571: PUSH
3572: LD_INT 0
3574: ST_TO_ADDR
// sSun := false ;
3575: LD_ADDR_EXP 31
3579: PUSH
3580: LD_INT 0
3582: ST_TO_ADDR
// sTiger := false ;
3583: LD_ADDR_EXP 27
3587: PUSH
3588: LD_INT 0
3590: ST_TO_ADDR
// sBomb := false ;
3591: LD_ADDR_EXP 28
3595: PUSH
3596: LD_INT 0
3598: ST_TO_ADDR
// sWound := false ;
3599: LD_ADDR_EXP 36
3603: PUSH
3604: LD_INT 0
3606: ST_TO_ADDR
// sBetray := false ;
3607: LD_ADDR_EXP 40
3611: PUSH
3612: LD_INT 0
3614: ST_TO_ADDR
// sContamin := false ;
3615: LD_ADDR_EXP 41
3619: PUSH
3620: LD_INT 0
3622: ST_TO_ADDR
// sOil := false ;
3623: LD_ADDR_EXP 43
3627: PUSH
3628: LD_INT 0
3630: ST_TO_ADDR
// sStu := false ;
3631: LD_ADDR_EXP 47
3635: PUSH
3636: LD_INT 0
3638: ST_TO_ADDR
// sBazooka := false ;
3639: LD_ADDR_EXP 50
3643: PUSH
3644: LD_INT 0
3646: ST_TO_ADDR
// sMortar := false ;
3647: LD_ADDR_EXP 51
3651: PUSH
3652: LD_INT 0
3654: ST_TO_ADDR
// sRanger := false ;
3655: LD_ADDR_EXP 61
3659: PUSH
3660: LD_INT 0
3662: ST_TO_ADDR
// sComputer := false ;
3663: LD_ADDR_EXP 62
3667: PUSH
3668: LD_INT 0
3670: ST_TO_ADDR
// s30 := false ;
3671: LD_ADDR_EXP 63
3675: PUSH
3676: LD_INT 0
3678: ST_TO_ADDR
// s60 := false ;
3679: LD_ADDR_EXP 64
3683: PUSH
3684: LD_INT 0
3686: ST_TO_ADDR
// end ;
3687: LD_VAR 0 1
3691: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3692: LD_INT 0
3694: PPUSH
3695: PPUSH
3696: PPUSH
3697: PPUSH
3698: PPUSH
3699: PPUSH
3700: PPUSH
// result := [ ] ;
3701: LD_ADDR_VAR 0 2
3705: PUSH
3706: EMPTY
3707: ST_TO_ADDR
// if campaign_id = 1 then
3708: LD_OWVAR 69
3712: PUSH
3713: LD_INT 1
3715: EQUAL
3716: IFFALSE 6882
// begin case mission_number of 1 :
3718: LD_OWVAR 70
3722: PUSH
3723: LD_INT 1
3725: DOUBLE
3726: EQUAL
3727: IFTRUE 3731
3729: GO 3807
3731: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3732: LD_ADDR_VAR 0 2
3736: PUSH
3737: LD_INT 2
3739: PUSH
3740: LD_INT 4
3742: PUSH
3743: LD_INT 11
3745: PUSH
3746: LD_INT 12
3748: PUSH
3749: LD_INT 15
3751: PUSH
3752: LD_INT 16
3754: PUSH
3755: LD_INT 22
3757: PUSH
3758: LD_INT 23
3760: PUSH
3761: LD_INT 26
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: PUSH
3775: LD_INT 101
3777: PUSH
3778: LD_INT 102
3780: PUSH
3781: LD_INT 106
3783: PUSH
3784: LD_INT 116
3786: PUSH
3787: LD_INT 117
3789: PUSH
3790: LD_INT 118
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: ST_TO_ADDR
3805: GO 6880
3807: LD_INT 2
3809: DOUBLE
3810: EQUAL
3811: IFTRUE 3815
3813: GO 3899
3815: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3816: LD_ADDR_VAR 0 2
3820: PUSH
3821: LD_INT 2
3823: PUSH
3824: LD_INT 4
3826: PUSH
3827: LD_INT 11
3829: PUSH
3830: LD_INT 12
3832: PUSH
3833: LD_INT 15
3835: PUSH
3836: LD_INT 16
3838: PUSH
3839: LD_INT 22
3841: PUSH
3842: LD_INT 23
3844: PUSH
3845: LD_INT 26
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: PUSH
3859: LD_INT 101
3861: PUSH
3862: LD_INT 102
3864: PUSH
3865: LD_INT 105
3867: PUSH
3868: LD_INT 106
3870: PUSH
3871: LD_INT 108
3873: PUSH
3874: LD_INT 116
3876: PUSH
3877: LD_INT 117
3879: PUSH
3880: LD_INT 118
3882: PUSH
3883: EMPTY
3884: LIST
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: LIST
3891: LIST
3892: PUSH
3893: EMPTY
3894: LIST
3895: LIST
3896: ST_TO_ADDR
3897: GO 6880
3899: LD_INT 3
3901: DOUBLE
3902: EQUAL
3903: IFTRUE 3907
3905: GO 3995
3907: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3908: LD_ADDR_VAR 0 2
3912: PUSH
3913: LD_INT 2
3915: PUSH
3916: LD_INT 4
3918: PUSH
3919: LD_INT 5
3921: PUSH
3922: LD_INT 11
3924: PUSH
3925: LD_INT 12
3927: PUSH
3928: LD_INT 15
3930: PUSH
3931: LD_INT 16
3933: PUSH
3934: LD_INT 22
3936: PUSH
3937: LD_INT 26
3939: PUSH
3940: LD_INT 36
3942: PUSH
3943: EMPTY
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: PUSH
3955: LD_INT 101
3957: PUSH
3958: LD_INT 102
3960: PUSH
3961: LD_INT 105
3963: PUSH
3964: LD_INT 106
3966: PUSH
3967: LD_INT 108
3969: PUSH
3970: LD_INT 116
3972: PUSH
3973: LD_INT 117
3975: PUSH
3976: LD_INT 118
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: LIST
3985: LIST
3986: LIST
3987: LIST
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: ST_TO_ADDR
3993: GO 6880
3995: LD_INT 4
3997: DOUBLE
3998: EQUAL
3999: IFTRUE 4003
4001: GO 4099
4003: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
4004: LD_ADDR_VAR 0 2
4008: PUSH
4009: LD_INT 2
4011: PUSH
4012: LD_INT 4
4014: PUSH
4015: LD_INT 5
4017: PUSH
4018: LD_INT 8
4020: PUSH
4021: LD_INT 11
4023: PUSH
4024: LD_INT 12
4026: PUSH
4027: LD_INT 15
4029: PUSH
4030: LD_INT 16
4032: PUSH
4033: LD_INT 22
4035: PUSH
4036: LD_INT 23
4038: PUSH
4039: LD_INT 26
4041: PUSH
4042: LD_INT 36
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: PUSH
4059: LD_INT 101
4061: PUSH
4062: LD_INT 102
4064: PUSH
4065: LD_INT 105
4067: PUSH
4068: LD_INT 106
4070: PUSH
4071: LD_INT 108
4073: PUSH
4074: LD_INT 116
4076: PUSH
4077: LD_INT 117
4079: PUSH
4080: LD_INT 118
4082: PUSH
4083: EMPTY
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: PUSH
4093: EMPTY
4094: LIST
4095: LIST
4096: ST_TO_ADDR
4097: GO 6880
4099: LD_INT 5
4101: DOUBLE
4102: EQUAL
4103: IFTRUE 4107
4105: GO 4219
4107: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
4108: LD_ADDR_VAR 0 2
4112: PUSH
4113: LD_INT 2
4115: PUSH
4116: LD_INT 4
4118: PUSH
4119: LD_INT 5
4121: PUSH
4122: LD_INT 6
4124: PUSH
4125: LD_INT 8
4127: PUSH
4128: LD_INT 11
4130: PUSH
4131: LD_INT 12
4133: PUSH
4134: LD_INT 15
4136: PUSH
4137: LD_INT 16
4139: PUSH
4140: LD_INT 22
4142: PUSH
4143: LD_INT 23
4145: PUSH
4146: LD_INT 25
4148: PUSH
4149: LD_INT 26
4151: PUSH
4152: LD_INT 36
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: LIST
4168: LIST
4169: LIST
4170: PUSH
4171: LD_INT 101
4173: PUSH
4174: LD_INT 102
4176: PUSH
4177: LD_INT 105
4179: PUSH
4180: LD_INT 106
4182: PUSH
4183: LD_INT 108
4185: PUSH
4186: LD_INT 109
4188: PUSH
4189: LD_INT 112
4191: PUSH
4192: LD_INT 116
4194: PUSH
4195: LD_INT 117
4197: PUSH
4198: LD_INT 118
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: LIST
4209: LIST
4210: LIST
4211: LIST
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: ST_TO_ADDR
4217: GO 6880
4219: LD_INT 6
4221: DOUBLE
4222: EQUAL
4223: IFTRUE 4227
4225: GO 4359
4227: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
4228: LD_ADDR_VAR 0 2
4232: PUSH
4233: LD_INT 2
4235: PUSH
4236: LD_INT 4
4238: PUSH
4239: LD_INT 5
4241: PUSH
4242: LD_INT 6
4244: PUSH
4245: LD_INT 8
4247: PUSH
4248: LD_INT 11
4250: PUSH
4251: LD_INT 12
4253: PUSH
4254: LD_INT 15
4256: PUSH
4257: LD_INT 16
4259: PUSH
4260: LD_INT 20
4262: PUSH
4263: LD_INT 21
4265: PUSH
4266: LD_INT 22
4268: PUSH
4269: LD_INT 23
4271: PUSH
4272: LD_INT 25
4274: PUSH
4275: LD_INT 26
4277: PUSH
4278: LD_INT 30
4280: PUSH
4281: LD_INT 31
4283: PUSH
4284: LD_INT 32
4286: PUSH
4287: LD_INT 36
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: LIST
4300: LIST
4301: LIST
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: LIST
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 101
4313: PUSH
4314: LD_INT 102
4316: PUSH
4317: LD_INT 105
4319: PUSH
4320: LD_INT 106
4322: PUSH
4323: LD_INT 108
4325: PUSH
4326: LD_INT 109
4328: PUSH
4329: LD_INT 112
4331: PUSH
4332: LD_INT 116
4334: PUSH
4335: LD_INT 117
4337: PUSH
4338: LD_INT 118
4340: PUSH
4341: EMPTY
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: ST_TO_ADDR
4357: GO 6880
4359: LD_INT 7
4361: DOUBLE
4362: EQUAL
4363: IFTRUE 4367
4365: GO 4479
4367: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
4368: LD_ADDR_VAR 0 2
4372: PUSH
4373: LD_INT 2
4375: PUSH
4376: LD_INT 4
4378: PUSH
4379: LD_INT 5
4381: PUSH
4382: LD_INT 7
4384: PUSH
4385: LD_INT 11
4387: PUSH
4388: LD_INT 12
4390: PUSH
4391: LD_INT 15
4393: PUSH
4394: LD_INT 16
4396: PUSH
4397: LD_INT 20
4399: PUSH
4400: LD_INT 21
4402: PUSH
4403: LD_INT 22
4405: PUSH
4406: LD_INT 23
4408: PUSH
4409: LD_INT 25
4411: PUSH
4412: LD_INT 26
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 101
4433: PUSH
4434: LD_INT 102
4436: PUSH
4437: LD_INT 103
4439: PUSH
4440: LD_INT 105
4442: PUSH
4443: LD_INT 106
4445: PUSH
4446: LD_INT 108
4448: PUSH
4449: LD_INT 112
4451: PUSH
4452: LD_INT 116
4454: PUSH
4455: LD_INT 117
4457: PUSH
4458: LD_INT 118
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: LIST
4467: LIST
4468: LIST
4469: LIST
4470: LIST
4471: LIST
4472: PUSH
4473: EMPTY
4474: LIST
4475: LIST
4476: ST_TO_ADDR
4477: GO 6880
4479: LD_INT 8
4481: DOUBLE
4482: EQUAL
4483: IFTRUE 4487
4485: GO 4627
4487: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4488: LD_ADDR_VAR 0 2
4492: PUSH
4493: LD_INT 2
4495: PUSH
4496: LD_INT 4
4498: PUSH
4499: LD_INT 5
4501: PUSH
4502: LD_INT 6
4504: PUSH
4505: LD_INT 7
4507: PUSH
4508: LD_INT 8
4510: PUSH
4511: LD_INT 11
4513: PUSH
4514: LD_INT 12
4516: PUSH
4517: LD_INT 15
4519: PUSH
4520: LD_INT 16
4522: PUSH
4523: LD_INT 20
4525: PUSH
4526: LD_INT 21
4528: PUSH
4529: LD_INT 22
4531: PUSH
4532: LD_INT 23
4534: PUSH
4535: LD_INT 25
4537: PUSH
4538: LD_INT 26
4540: PUSH
4541: LD_INT 30
4543: PUSH
4544: LD_INT 31
4546: PUSH
4547: LD_INT 32
4549: PUSH
4550: LD_INT 36
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: LIST
4557: LIST
4558: LIST
4559: LIST
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: PUSH
4575: LD_INT 101
4577: PUSH
4578: LD_INT 102
4580: PUSH
4581: LD_INT 103
4583: PUSH
4584: LD_INT 105
4586: PUSH
4587: LD_INT 106
4589: PUSH
4590: LD_INT 108
4592: PUSH
4593: LD_INT 109
4595: PUSH
4596: LD_INT 112
4598: PUSH
4599: LD_INT 116
4601: PUSH
4602: LD_INT 117
4604: PUSH
4605: LD_INT 118
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: ST_TO_ADDR
4625: GO 6880
4627: LD_INT 9
4629: DOUBLE
4630: EQUAL
4631: IFTRUE 4635
4633: GO 4783
4635: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4636: LD_ADDR_VAR 0 2
4640: PUSH
4641: LD_INT 2
4643: PUSH
4644: LD_INT 4
4646: PUSH
4647: LD_INT 5
4649: PUSH
4650: LD_INT 6
4652: PUSH
4653: LD_INT 7
4655: PUSH
4656: LD_INT 8
4658: PUSH
4659: LD_INT 11
4661: PUSH
4662: LD_INT 12
4664: PUSH
4665: LD_INT 15
4667: PUSH
4668: LD_INT 16
4670: PUSH
4671: LD_INT 20
4673: PUSH
4674: LD_INT 21
4676: PUSH
4677: LD_INT 22
4679: PUSH
4680: LD_INT 23
4682: PUSH
4683: LD_INT 25
4685: PUSH
4686: LD_INT 26
4688: PUSH
4689: LD_INT 28
4691: PUSH
4692: LD_INT 30
4694: PUSH
4695: LD_INT 31
4697: PUSH
4698: LD_INT 32
4700: PUSH
4701: LD_INT 36
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: PUSH
4727: LD_INT 101
4729: PUSH
4730: LD_INT 102
4732: PUSH
4733: LD_INT 103
4735: PUSH
4736: LD_INT 105
4738: PUSH
4739: LD_INT 106
4741: PUSH
4742: LD_INT 108
4744: PUSH
4745: LD_INT 109
4747: PUSH
4748: LD_INT 112
4750: PUSH
4751: LD_INT 114
4753: PUSH
4754: LD_INT 116
4756: PUSH
4757: LD_INT 117
4759: PUSH
4760: LD_INT 118
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: ST_TO_ADDR
4781: GO 6880
4783: LD_INT 10
4785: DOUBLE
4786: EQUAL
4787: IFTRUE 4791
4789: GO 4987
4791: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4792: LD_ADDR_VAR 0 2
4796: PUSH
4797: LD_INT 2
4799: PUSH
4800: LD_INT 4
4802: PUSH
4803: LD_INT 5
4805: PUSH
4806: LD_INT 6
4808: PUSH
4809: LD_INT 7
4811: PUSH
4812: LD_INT 8
4814: PUSH
4815: LD_INT 9
4817: PUSH
4818: LD_INT 10
4820: PUSH
4821: LD_INT 11
4823: PUSH
4824: LD_INT 12
4826: PUSH
4827: LD_INT 13
4829: PUSH
4830: LD_INT 14
4832: PUSH
4833: LD_INT 15
4835: PUSH
4836: LD_INT 16
4838: PUSH
4839: LD_INT 17
4841: PUSH
4842: LD_INT 18
4844: PUSH
4845: LD_INT 19
4847: PUSH
4848: LD_INT 20
4850: PUSH
4851: LD_INT 21
4853: PUSH
4854: LD_INT 22
4856: PUSH
4857: LD_INT 23
4859: PUSH
4860: LD_INT 24
4862: PUSH
4863: LD_INT 25
4865: PUSH
4866: LD_INT 26
4868: PUSH
4869: LD_INT 28
4871: PUSH
4872: LD_INT 30
4874: PUSH
4875: LD_INT 31
4877: PUSH
4878: LD_INT 32
4880: PUSH
4881: LD_INT 36
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: PUSH
4915: LD_INT 101
4917: PUSH
4918: LD_INT 102
4920: PUSH
4921: LD_INT 103
4923: PUSH
4924: LD_INT 104
4926: PUSH
4927: LD_INT 105
4929: PUSH
4930: LD_INT 106
4932: PUSH
4933: LD_INT 107
4935: PUSH
4936: LD_INT 108
4938: PUSH
4939: LD_INT 109
4941: PUSH
4942: LD_INT 110
4944: PUSH
4945: LD_INT 111
4947: PUSH
4948: LD_INT 112
4950: PUSH
4951: LD_INT 114
4953: PUSH
4954: LD_INT 116
4956: PUSH
4957: LD_INT 117
4959: PUSH
4960: LD_INT 118
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: ST_TO_ADDR
4985: GO 6880
4987: LD_INT 11
4989: DOUBLE
4990: EQUAL
4991: IFTRUE 4995
4993: GO 5199
4995: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
4996: LD_ADDR_VAR 0 2
5000: PUSH
5001: LD_INT 2
5003: PUSH
5004: LD_INT 3
5006: PUSH
5007: LD_INT 4
5009: PUSH
5010: LD_INT 5
5012: PUSH
5013: LD_INT 6
5015: PUSH
5016: LD_INT 7
5018: PUSH
5019: LD_INT 8
5021: PUSH
5022: LD_INT 9
5024: PUSH
5025: LD_INT 10
5027: PUSH
5028: LD_INT 11
5030: PUSH
5031: LD_INT 12
5033: PUSH
5034: LD_INT 13
5036: PUSH
5037: LD_INT 14
5039: PUSH
5040: LD_INT 15
5042: PUSH
5043: LD_INT 16
5045: PUSH
5046: LD_INT 17
5048: PUSH
5049: LD_INT 18
5051: PUSH
5052: LD_INT 19
5054: PUSH
5055: LD_INT 20
5057: PUSH
5058: LD_INT 21
5060: PUSH
5061: LD_INT 22
5063: PUSH
5064: LD_INT 23
5066: PUSH
5067: LD_INT 24
5069: PUSH
5070: LD_INT 25
5072: PUSH
5073: LD_INT 26
5075: PUSH
5076: LD_INT 28
5078: PUSH
5079: LD_INT 30
5081: PUSH
5082: LD_INT 31
5084: PUSH
5085: LD_INT 32
5087: PUSH
5088: LD_INT 34
5090: PUSH
5091: LD_INT 36
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: PUSH
5127: LD_INT 101
5129: PUSH
5130: LD_INT 102
5132: PUSH
5133: LD_INT 103
5135: PUSH
5136: LD_INT 104
5138: PUSH
5139: LD_INT 105
5141: PUSH
5142: LD_INT 106
5144: PUSH
5145: LD_INT 107
5147: PUSH
5148: LD_INT 108
5150: PUSH
5151: LD_INT 109
5153: PUSH
5154: LD_INT 110
5156: PUSH
5157: LD_INT 111
5159: PUSH
5160: LD_INT 112
5162: PUSH
5163: LD_INT 114
5165: PUSH
5166: LD_INT 116
5168: PUSH
5169: LD_INT 117
5171: PUSH
5172: LD_INT 118
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: ST_TO_ADDR
5197: GO 6880
5199: LD_INT 12
5201: DOUBLE
5202: EQUAL
5203: IFTRUE 5207
5205: GO 5427
5207: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
5208: LD_ADDR_VAR 0 2
5212: PUSH
5213: LD_INT 1
5215: PUSH
5216: LD_INT 2
5218: PUSH
5219: LD_INT 3
5221: PUSH
5222: LD_INT 4
5224: PUSH
5225: LD_INT 5
5227: PUSH
5228: LD_INT 6
5230: PUSH
5231: LD_INT 7
5233: PUSH
5234: LD_INT 8
5236: PUSH
5237: LD_INT 9
5239: PUSH
5240: LD_INT 10
5242: PUSH
5243: LD_INT 11
5245: PUSH
5246: LD_INT 12
5248: PUSH
5249: LD_INT 13
5251: PUSH
5252: LD_INT 14
5254: PUSH
5255: LD_INT 15
5257: PUSH
5258: LD_INT 16
5260: PUSH
5261: LD_INT 17
5263: PUSH
5264: LD_INT 18
5266: PUSH
5267: LD_INT 19
5269: PUSH
5270: LD_INT 20
5272: PUSH
5273: LD_INT 21
5275: PUSH
5276: LD_INT 22
5278: PUSH
5279: LD_INT 23
5281: PUSH
5282: LD_INT 24
5284: PUSH
5285: LD_INT 25
5287: PUSH
5288: LD_INT 26
5290: PUSH
5291: LD_INT 27
5293: PUSH
5294: LD_INT 28
5296: PUSH
5297: LD_INT 30
5299: PUSH
5300: LD_INT 31
5302: PUSH
5303: LD_INT 32
5305: PUSH
5306: LD_INT 33
5308: PUSH
5309: LD_INT 34
5311: PUSH
5312: LD_INT 36
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: LIST
5337: LIST
5338: LIST
5339: LIST
5340: LIST
5341: LIST
5342: LIST
5343: LIST
5344: LIST
5345: LIST
5346: LIST
5347: LIST
5348: LIST
5349: LIST
5350: PUSH
5351: LD_INT 101
5353: PUSH
5354: LD_INT 102
5356: PUSH
5357: LD_INT 103
5359: PUSH
5360: LD_INT 104
5362: PUSH
5363: LD_INT 105
5365: PUSH
5366: LD_INT 106
5368: PUSH
5369: LD_INT 107
5371: PUSH
5372: LD_INT 108
5374: PUSH
5375: LD_INT 109
5377: PUSH
5378: LD_INT 110
5380: PUSH
5381: LD_INT 111
5383: PUSH
5384: LD_INT 112
5386: PUSH
5387: LD_INT 113
5389: PUSH
5390: LD_INT 114
5392: PUSH
5393: LD_INT 116
5395: PUSH
5396: LD_INT 117
5398: PUSH
5399: LD_INT 118
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: LIST
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: LIST
5411: LIST
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: PUSH
5421: EMPTY
5422: LIST
5423: LIST
5424: ST_TO_ADDR
5425: GO 6880
5427: LD_INT 13
5429: DOUBLE
5430: EQUAL
5431: IFTRUE 5435
5433: GO 5643
5435: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
5436: LD_ADDR_VAR 0 2
5440: PUSH
5441: LD_INT 1
5443: PUSH
5444: LD_INT 2
5446: PUSH
5447: LD_INT 3
5449: PUSH
5450: LD_INT 4
5452: PUSH
5453: LD_INT 5
5455: PUSH
5456: LD_INT 8
5458: PUSH
5459: LD_INT 9
5461: PUSH
5462: LD_INT 10
5464: PUSH
5465: LD_INT 11
5467: PUSH
5468: LD_INT 12
5470: PUSH
5471: LD_INT 14
5473: PUSH
5474: LD_INT 15
5476: PUSH
5477: LD_INT 16
5479: PUSH
5480: LD_INT 17
5482: PUSH
5483: LD_INT 18
5485: PUSH
5486: LD_INT 19
5488: PUSH
5489: LD_INT 20
5491: PUSH
5492: LD_INT 21
5494: PUSH
5495: LD_INT 22
5497: PUSH
5498: LD_INT 23
5500: PUSH
5501: LD_INT 24
5503: PUSH
5504: LD_INT 25
5506: PUSH
5507: LD_INT 26
5509: PUSH
5510: LD_INT 27
5512: PUSH
5513: LD_INT 28
5515: PUSH
5516: LD_INT 30
5518: PUSH
5519: LD_INT 31
5521: PUSH
5522: LD_INT 32
5524: PUSH
5525: LD_INT 33
5527: PUSH
5528: LD_INT 34
5530: PUSH
5531: LD_INT 36
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: LIST
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: PUSH
5567: LD_INT 101
5569: PUSH
5570: LD_INT 102
5572: PUSH
5573: LD_INT 103
5575: PUSH
5576: LD_INT 104
5578: PUSH
5579: LD_INT 105
5581: PUSH
5582: LD_INT 106
5584: PUSH
5585: LD_INT 107
5587: PUSH
5588: LD_INT 108
5590: PUSH
5591: LD_INT 109
5593: PUSH
5594: LD_INT 110
5596: PUSH
5597: LD_INT 111
5599: PUSH
5600: LD_INT 112
5602: PUSH
5603: LD_INT 113
5605: PUSH
5606: LD_INT 114
5608: PUSH
5609: LD_INT 116
5611: PUSH
5612: LD_INT 117
5614: PUSH
5615: LD_INT 118
5617: PUSH
5618: EMPTY
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: LIST
5630: LIST
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: ST_TO_ADDR
5641: GO 6880
5643: LD_INT 14
5645: DOUBLE
5646: EQUAL
5647: IFTRUE 5651
5649: GO 5875
5651: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5652: LD_ADDR_VAR 0 2
5656: PUSH
5657: LD_INT 1
5659: PUSH
5660: LD_INT 2
5662: PUSH
5663: LD_INT 3
5665: PUSH
5666: LD_INT 4
5668: PUSH
5669: LD_INT 5
5671: PUSH
5672: LD_INT 6
5674: PUSH
5675: LD_INT 7
5677: PUSH
5678: LD_INT 8
5680: PUSH
5681: LD_INT 9
5683: PUSH
5684: LD_INT 10
5686: PUSH
5687: LD_INT 11
5689: PUSH
5690: LD_INT 12
5692: PUSH
5693: LD_INT 13
5695: PUSH
5696: LD_INT 14
5698: PUSH
5699: LD_INT 15
5701: PUSH
5702: LD_INT 16
5704: PUSH
5705: LD_INT 17
5707: PUSH
5708: LD_INT 18
5710: PUSH
5711: LD_INT 19
5713: PUSH
5714: LD_INT 20
5716: PUSH
5717: LD_INT 21
5719: PUSH
5720: LD_INT 22
5722: PUSH
5723: LD_INT 23
5725: PUSH
5726: LD_INT 24
5728: PUSH
5729: LD_INT 25
5731: PUSH
5732: LD_INT 26
5734: PUSH
5735: LD_INT 27
5737: PUSH
5738: LD_INT 28
5740: PUSH
5741: LD_INT 29
5743: PUSH
5744: LD_INT 30
5746: PUSH
5747: LD_INT 31
5749: PUSH
5750: LD_INT 32
5752: PUSH
5753: LD_INT 33
5755: PUSH
5756: LD_INT 34
5758: PUSH
5759: LD_INT 36
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: LIST
5773: LIST
5774: LIST
5775: LIST
5776: LIST
5777: LIST
5778: LIST
5779: LIST
5780: LIST
5781: LIST
5782: LIST
5783: LIST
5784: LIST
5785: LIST
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: PUSH
5799: LD_INT 101
5801: PUSH
5802: LD_INT 102
5804: PUSH
5805: LD_INT 103
5807: PUSH
5808: LD_INT 104
5810: PUSH
5811: LD_INT 105
5813: PUSH
5814: LD_INT 106
5816: PUSH
5817: LD_INT 107
5819: PUSH
5820: LD_INT 108
5822: PUSH
5823: LD_INT 109
5825: PUSH
5826: LD_INT 110
5828: PUSH
5829: LD_INT 111
5831: PUSH
5832: LD_INT 112
5834: PUSH
5835: LD_INT 113
5837: PUSH
5838: LD_INT 114
5840: PUSH
5841: LD_INT 116
5843: PUSH
5844: LD_INT 117
5846: PUSH
5847: LD_INT 118
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: PUSH
5869: EMPTY
5870: LIST
5871: LIST
5872: ST_TO_ADDR
5873: GO 6880
5875: LD_INT 15
5877: DOUBLE
5878: EQUAL
5879: IFTRUE 5883
5881: GO 6107
5883: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5884: LD_ADDR_VAR 0 2
5888: PUSH
5889: LD_INT 1
5891: PUSH
5892: LD_INT 2
5894: PUSH
5895: LD_INT 3
5897: PUSH
5898: LD_INT 4
5900: PUSH
5901: LD_INT 5
5903: PUSH
5904: LD_INT 6
5906: PUSH
5907: LD_INT 7
5909: PUSH
5910: LD_INT 8
5912: PUSH
5913: LD_INT 9
5915: PUSH
5916: LD_INT 10
5918: PUSH
5919: LD_INT 11
5921: PUSH
5922: LD_INT 12
5924: PUSH
5925: LD_INT 13
5927: PUSH
5928: LD_INT 14
5930: PUSH
5931: LD_INT 15
5933: PUSH
5934: LD_INT 16
5936: PUSH
5937: LD_INT 17
5939: PUSH
5940: LD_INT 18
5942: PUSH
5943: LD_INT 19
5945: PUSH
5946: LD_INT 20
5948: PUSH
5949: LD_INT 21
5951: PUSH
5952: LD_INT 22
5954: PUSH
5955: LD_INT 23
5957: PUSH
5958: LD_INT 24
5960: PUSH
5961: LD_INT 25
5963: PUSH
5964: LD_INT 26
5966: PUSH
5967: LD_INT 27
5969: PUSH
5970: LD_INT 28
5972: PUSH
5973: LD_INT 29
5975: PUSH
5976: LD_INT 30
5978: PUSH
5979: LD_INT 31
5981: PUSH
5982: LD_INT 32
5984: PUSH
5985: LD_INT 33
5987: PUSH
5988: LD_INT 34
5990: PUSH
5991: LD_INT 36
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: LIST
6020: LIST
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: PUSH
6031: LD_INT 101
6033: PUSH
6034: LD_INT 102
6036: PUSH
6037: LD_INT 103
6039: PUSH
6040: LD_INT 104
6042: PUSH
6043: LD_INT 105
6045: PUSH
6046: LD_INT 106
6048: PUSH
6049: LD_INT 107
6051: PUSH
6052: LD_INT 108
6054: PUSH
6055: LD_INT 109
6057: PUSH
6058: LD_INT 110
6060: PUSH
6061: LD_INT 111
6063: PUSH
6064: LD_INT 112
6066: PUSH
6067: LD_INT 113
6069: PUSH
6070: LD_INT 114
6072: PUSH
6073: LD_INT 116
6075: PUSH
6076: LD_INT 117
6078: PUSH
6079: LD_INT 118
6081: PUSH
6082: EMPTY
6083: LIST
6084: LIST
6085: LIST
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: ST_TO_ADDR
6105: GO 6880
6107: LD_INT 16
6109: DOUBLE
6110: EQUAL
6111: IFTRUE 6115
6113: GO 6251
6115: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
6116: LD_ADDR_VAR 0 2
6120: PUSH
6121: LD_INT 2
6123: PUSH
6124: LD_INT 4
6126: PUSH
6127: LD_INT 5
6129: PUSH
6130: LD_INT 7
6132: PUSH
6133: LD_INT 11
6135: PUSH
6136: LD_INT 12
6138: PUSH
6139: LD_INT 15
6141: PUSH
6142: LD_INT 16
6144: PUSH
6145: LD_INT 20
6147: PUSH
6148: LD_INT 21
6150: PUSH
6151: LD_INT 22
6153: PUSH
6154: LD_INT 23
6156: PUSH
6157: LD_INT 25
6159: PUSH
6160: LD_INT 26
6162: PUSH
6163: LD_INT 30
6165: PUSH
6166: LD_INT 31
6168: PUSH
6169: LD_INT 32
6171: PUSH
6172: LD_INT 33
6174: PUSH
6175: LD_INT 34
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: PUSH
6199: LD_INT 101
6201: PUSH
6202: LD_INT 102
6204: PUSH
6205: LD_INT 103
6207: PUSH
6208: LD_INT 106
6210: PUSH
6211: LD_INT 108
6213: PUSH
6214: LD_INT 112
6216: PUSH
6217: LD_INT 113
6219: PUSH
6220: LD_INT 114
6222: PUSH
6223: LD_INT 116
6225: PUSH
6226: LD_INT 117
6228: PUSH
6229: LD_INT 118
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: PUSH
6245: EMPTY
6246: LIST
6247: LIST
6248: ST_TO_ADDR
6249: GO 6880
6251: LD_INT 17
6253: DOUBLE
6254: EQUAL
6255: IFTRUE 6259
6257: GO 6483
6259: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
6260: LD_ADDR_VAR 0 2
6264: PUSH
6265: LD_INT 1
6267: PUSH
6268: LD_INT 2
6270: PUSH
6271: LD_INT 3
6273: PUSH
6274: LD_INT 4
6276: PUSH
6277: LD_INT 5
6279: PUSH
6280: LD_INT 6
6282: PUSH
6283: LD_INT 7
6285: PUSH
6286: LD_INT 8
6288: PUSH
6289: LD_INT 9
6291: PUSH
6292: LD_INT 10
6294: PUSH
6295: LD_INT 11
6297: PUSH
6298: LD_INT 12
6300: PUSH
6301: LD_INT 13
6303: PUSH
6304: LD_INT 14
6306: PUSH
6307: LD_INT 15
6309: PUSH
6310: LD_INT 16
6312: PUSH
6313: LD_INT 17
6315: PUSH
6316: LD_INT 18
6318: PUSH
6319: LD_INT 19
6321: PUSH
6322: LD_INT 20
6324: PUSH
6325: LD_INT 21
6327: PUSH
6328: LD_INT 22
6330: PUSH
6331: LD_INT 23
6333: PUSH
6334: LD_INT 24
6336: PUSH
6337: LD_INT 25
6339: PUSH
6340: LD_INT 26
6342: PUSH
6343: LD_INT 27
6345: PUSH
6346: LD_INT 28
6348: PUSH
6349: LD_INT 29
6351: PUSH
6352: LD_INT 30
6354: PUSH
6355: LD_INT 31
6357: PUSH
6358: LD_INT 32
6360: PUSH
6361: LD_INT 33
6363: PUSH
6364: LD_INT 34
6366: PUSH
6367: LD_INT 36
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: PUSH
6407: LD_INT 101
6409: PUSH
6410: LD_INT 102
6412: PUSH
6413: LD_INT 103
6415: PUSH
6416: LD_INT 104
6418: PUSH
6419: LD_INT 105
6421: PUSH
6422: LD_INT 106
6424: PUSH
6425: LD_INT 107
6427: PUSH
6428: LD_INT 108
6430: PUSH
6431: LD_INT 109
6433: PUSH
6434: LD_INT 110
6436: PUSH
6437: LD_INT 111
6439: PUSH
6440: LD_INT 112
6442: PUSH
6443: LD_INT 113
6445: PUSH
6446: LD_INT 114
6448: PUSH
6449: LD_INT 116
6451: PUSH
6452: LD_INT 117
6454: PUSH
6455: LD_INT 118
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: LIST
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: ST_TO_ADDR
6481: GO 6880
6483: LD_INT 18
6485: DOUBLE
6486: EQUAL
6487: IFTRUE 6491
6489: GO 6639
6491: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6492: LD_ADDR_VAR 0 2
6496: PUSH
6497: LD_INT 2
6499: PUSH
6500: LD_INT 4
6502: PUSH
6503: LD_INT 5
6505: PUSH
6506: LD_INT 7
6508: PUSH
6509: LD_INT 11
6511: PUSH
6512: LD_INT 12
6514: PUSH
6515: LD_INT 15
6517: PUSH
6518: LD_INT 16
6520: PUSH
6521: LD_INT 20
6523: PUSH
6524: LD_INT 21
6526: PUSH
6527: LD_INT 22
6529: PUSH
6530: LD_INT 23
6532: PUSH
6533: LD_INT 25
6535: PUSH
6536: LD_INT 26
6538: PUSH
6539: LD_INT 30
6541: PUSH
6542: LD_INT 31
6544: PUSH
6545: LD_INT 32
6547: PUSH
6548: LD_INT 33
6550: PUSH
6551: LD_INT 34
6553: PUSH
6554: LD_INT 35
6556: PUSH
6557: LD_INT 36
6559: PUSH
6560: EMPTY
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: PUSH
6583: LD_INT 101
6585: PUSH
6586: LD_INT 102
6588: PUSH
6589: LD_INT 103
6591: PUSH
6592: LD_INT 106
6594: PUSH
6595: LD_INT 108
6597: PUSH
6598: LD_INT 112
6600: PUSH
6601: LD_INT 113
6603: PUSH
6604: LD_INT 114
6606: PUSH
6607: LD_INT 115
6609: PUSH
6610: LD_INT 116
6612: PUSH
6613: LD_INT 117
6615: PUSH
6616: LD_INT 118
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: ST_TO_ADDR
6637: GO 6880
6639: LD_INT 19
6641: DOUBLE
6642: EQUAL
6643: IFTRUE 6647
6645: GO 6879
6647: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6648: LD_ADDR_VAR 0 2
6652: PUSH
6653: LD_INT 1
6655: PUSH
6656: LD_INT 2
6658: PUSH
6659: LD_INT 3
6661: PUSH
6662: LD_INT 4
6664: PUSH
6665: LD_INT 5
6667: PUSH
6668: LD_INT 6
6670: PUSH
6671: LD_INT 7
6673: PUSH
6674: LD_INT 8
6676: PUSH
6677: LD_INT 9
6679: PUSH
6680: LD_INT 10
6682: PUSH
6683: LD_INT 11
6685: PUSH
6686: LD_INT 12
6688: PUSH
6689: LD_INT 13
6691: PUSH
6692: LD_INT 14
6694: PUSH
6695: LD_INT 15
6697: PUSH
6698: LD_INT 16
6700: PUSH
6701: LD_INT 17
6703: PUSH
6704: LD_INT 18
6706: PUSH
6707: LD_INT 19
6709: PUSH
6710: LD_INT 20
6712: PUSH
6713: LD_INT 21
6715: PUSH
6716: LD_INT 22
6718: PUSH
6719: LD_INT 23
6721: PUSH
6722: LD_INT 24
6724: PUSH
6725: LD_INT 25
6727: PUSH
6728: LD_INT 26
6730: PUSH
6731: LD_INT 27
6733: PUSH
6734: LD_INT 28
6736: PUSH
6737: LD_INT 29
6739: PUSH
6740: LD_INT 30
6742: PUSH
6743: LD_INT 31
6745: PUSH
6746: LD_INT 32
6748: PUSH
6749: LD_INT 33
6751: PUSH
6752: LD_INT 34
6754: PUSH
6755: LD_INT 35
6757: PUSH
6758: LD_INT 36
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: PUSH
6799: LD_INT 101
6801: PUSH
6802: LD_INT 102
6804: PUSH
6805: LD_INT 103
6807: PUSH
6808: LD_INT 104
6810: PUSH
6811: LD_INT 105
6813: PUSH
6814: LD_INT 106
6816: PUSH
6817: LD_INT 107
6819: PUSH
6820: LD_INT 108
6822: PUSH
6823: LD_INT 109
6825: PUSH
6826: LD_INT 110
6828: PUSH
6829: LD_INT 111
6831: PUSH
6832: LD_INT 112
6834: PUSH
6835: LD_INT 113
6837: PUSH
6838: LD_INT 114
6840: PUSH
6841: LD_INT 115
6843: PUSH
6844: LD_INT 116
6846: PUSH
6847: LD_INT 117
6849: PUSH
6850: LD_INT 118
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: ST_TO_ADDR
6877: GO 6880
6879: POP
// end else
6880: GO 7111
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6882: LD_ADDR_VAR 0 2
6886: PUSH
6887: LD_INT 1
6889: PUSH
6890: LD_INT 2
6892: PUSH
6893: LD_INT 3
6895: PUSH
6896: LD_INT 4
6898: PUSH
6899: LD_INT 5
6901: PUSH
6902: LD_INT 6
6904: PUSH
6905: LD_INT 7
6907: PUSH
6908: LD_INT 8
6910: PUSH
6911: LD_INT 9
6913: PUSH
6914: LD_INT 10
6916: PUSH
6917: LD_INT 11
6919: PUSH
6920: LD_INT 12
6922: PUSH
6923: LD_INT 13
6925: PUSH
6926: LD_INT 14
6928: PUSH
6929: LD_INT 15
6931: PUSH
6932: LD_INT 16
6934: PUSH
6935: LD_INT 17
6937: PUSH
6938: LD_INT 18
6940: PUSH
6941: LD_INT 19
6943: PUSH
6944: LD_INT 20
6946: PUSH
6947: LD_INT 21
6949: PUSH
6950: LD_INT 22
6952: PUSH
6953: LD_INT 23
6955: PUSH
6956: LD_INT 24
6958: PUSH
6959: LD_INT 25
6961: PUSH
6962: LD_INT 26
6964: PUSH
6965: LD_INT 27
6967: PUSH
6968: LD_INT 28
6970: PUSH
6971: LD_INT 29
6973: PUSH
6974: LD_INT 30
6976: PUSH
6977: LD_INT 31
6979: PUSH
6980: LD_INT 32
6982: PUSH
6983: LD_INT 33
6985: PUSH
6986: LD_INT 34
6988: PUSH
6989: LD_INT 35
6991: PUSH
6992: LD_INT 36
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 101
7035: PUSH
7036: LD_INT 102
7038: PUSH
7039: LD_INT 103
7041: PUSH
7042: LD_INT 104
7044: PUSH
7045: LD_INT 105
7047: PUSH
7048: LD_INT 106
7050: PUSH
7051: LD_INT 107
7053: PUSH
7054: LD_INT 108
7056: PUSH
7057: LD_INT 109
7059: PUSH
7060: LD_INT 110
7062: PUSH
7063: LD_INT 111
7065: PUSH
7066: LD_INT 112
7068: PUSH
7069: LD_INT 113
7071: PUSH
7072: LD_INT 114
7074: PUSH
7075: LD_INT 115
7077: PUSH
7078: LD_INT 116
7080: PUSH
7081: LD_INT 117
7083: PUSH
7084: LD_INT 118
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: ST_TO_ADDR
// if result then
7111: LD_VAR 0 2
7115: IFFALSE 7901
// begin normal :=  ;
7117: LD_ADDR_VAR 0 5
7121: PUSH
7122: LD_STRING 
7124: ST_TO_ADDR
// hardcore :=  ;
7125: LD_ADDR_VAR 0 6
7129: PUSH
7130: LD_STRING 
7132: ST_TO_ADDR
// active :=  ;
7133: LD_ADDR_VAR 0 7
7137: PUSH
7138: LD_STRING 
7140: ST_TO_ADDR
// for i = 1 to normalCounter do
7141: LD_ADDR_VAR 0 8
7145: PUSH
7146: DOUBLE
7147: LD_INT 1
7149: DEC
7150: ST_TO_ADDR
7151: LD_EXP 9
7155: PUSH
7156: FOR_TO
7157: IFFALSE 7258
// begin tmp := 0 ;
7159: LD_ADDR_VAR 0 3
7163: PUSH
7164: LD_STRING 0
7166: ST_TO_ADDR
// if result [ 1 ] then
7167: LD_VAR 0 2
7171: PUSH
7172: LD_INT 1
7174: ARRAY
7175: IFFALSE 7240
// if result [ 1 ] [ 1 ] = i then
7177: LD_VAR 0 2
7181: PUSH
7182: LD_INT 1
7184: ARRAY
7185: PUSH
7186: LD_INT 1
7188: ARRAY
7189: PUSH
7190: LD_VAR 0 8
7194: EQUAL
7195: IFFALSE 7240
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7197: LD_ADDR_VAR 0 2
7201: PUSH
7202: LD_VAR 0 2
7206: PPUSH
7207: LD_INT 1
7209: PPUSH
7210: LD_VAR 0 2
7214: PUSH
7215: LD_INT 1
7217: ARRAY
7218: PPUSH
7219: LD_INT 1
7221: PPUSH
7222: CALL_OW 3
7226: PPUSH
7227: CALL_OW 1
7231: ST_TO_ADDR
// tmp := 1 ;
7232: LD_ADDR_VAR 0 3
7236: PUSH
7237: LD_STRING 1
7239: ST_TO_ADDR
// end ; normal := normal & tmp ;
7240: LD_ADDR_VAR 0 5
7244: PUSH
7245: LD_VAR 0 5
7249: PUSH
7250: LD_VAR 0 3
7254: STR
7255: ST_TO_ADDR
// end ;
7256: GO 7156
7258: POP
7259: POP
// for i = 1 to hardcoreCounter do
7260: LD_ADDR_VAR 0 8
7264: PUSH
7265: DOUBLE
7266: LD_INT 1
7268: DEC
7269: ST_TO_ADDR
7270: LD_EXP 10
7274: PUSH
7275: FOR_TO
7276: IFFALSE 7381
// begin tmp := 0 ;
7278: LD_ADDR_VAR 0 3
7282: PUSH
7283: LD_STRING 0
7285: ST_TO_ADDR
// if result [ 2 ] then
7286: LD_VAR 0 2
7290: PUSH
7291: LD_INT 2
7293: ARRAY
7294: IFFALSE 7363
// if result [ 2 ] [ 1 ] = 100 + i then
7296: LD_VAR 0 2
7300: PUSH
7301: LD_INT 2
7303: ARRAY
7304: PUSH
7305: LD_INT 1
7307: ARRAY
7308: PUSH
7309: LD_INT 100
7311: PUSH
7312: LD_VAR 0 8
7316: PLUS
7317: EQUAL
7318: IFFALSE 7363
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7320: LD_ADDR_VAR 0 2
7324: PUSH
7325: LD_VAR 0 2
7329: PPUSH
7330: LD_INT 2
7332: PPUSH
7333: LD_VAR 0 2
7337: PUSH
7338: LD_INT 2
7340: ARRAY
7341: PPUSH
7342: LD_INT 1
7344: PPUSH
7345: CALL_OW 3
7349: PPUSH
7350: CALL_OW 1
7354: ST_TO_ADDR
// tmp := 1 ;
7355: LD_ADDR_VAR 0 3
7359: PUSH
7360: LD_STRING 1
7362: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7363: LD_ADDR_VAR 0 6
7367: PUSH
7368: LD_VAR 0 6
7372: PUSH
7373: LD_VAR 0 3
7377: STR
7378: ST_TO_ADDR
// end ;
7379: GO 7275
7381: POP
7382: POP
// if isGameLoad then
7383: LD_VAR 0 1
7387: IFFALSE 7862
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
7389: LD_ADDR_VAR 0 4
7393: PUSH
7394: LD_EXP 13
7398: PUSH
7399: LD_EXP 12
7403: PUSH
7404: LD_EXP 14
7408: PUSH
7409: LD_EXP 11
7413: PUSH
7414: LD_EXP 15
7418: PUSH
7419: LD_EXP 16
7423: PUSH
7424: LD_EXP 17
7428: PUSH
7429: LD_EXP 18
7433: PUSH
7434: LD_EXP 19
7438: PUSH
7439: LD_EXP 20
7443: PUSH
7444: LD_EXP 21
7448: PUSH
7449: LD_EXP 22
7453: PUSH
7454: LD_EXP 23
7458: PUSH
7459: LD_EXP 24
7463: PUSH
7464: LD_EXP 32
7468: PUSH
7469: LD_EXP 33
7473: PUSH
7474: LD_EXP 34
7478: PUSH
7479: LD_EXP 35
7483: PUSH
7484: LD_EXP 37
7488: PUSH
7489: LD_EXP 38
7493: PUSH
7494: LD_EXP 39
7498: PUSH
7499: LD_EXP 42
7503: PUSH
7504: LD_EXP 44
7508: PUSH
7509: LD_EXP 45
7513: PUSH
7514: LD_EXP 46
7518: PUSH
7519: LD_EXP 48
7523: PUSH
7524: LD_EXP 49
7528: PUSH
7529: LD_EXP 52
7533: PUSH
7534: LD_EXP 53
7538: PUSH
7539: LD_EXP 54
7543: PUSH
7544: LD_EXP 55
7548: PUSH
7549: LD_EXP 56
7553: PUSH
7554: LD_EXP 57
7558: PUSH
7559: LD_EXP 58
7563: PUSH
7564: LD_EXP 59
7568: PUSH
7569: LD_EXP 60
7573: PUSH
7574: LD_EXP 25
7578: PUSH
7579: LD_EXP 26
7583: PUSH
7584: LD_EXP 29
7588: PUSH
7589: LD_EXP 30
7593: PUSH
7594: LD_EXP 31
7598: PUSH
7599: LD_EXP 27
7603: PUSH
7604: LD_EXP 28
7608: PUSH
7609: LD_EXP 36
7613: PUSH
7614: LD_EXP 40
7618: PUSH
7619: LD_EXP 41
7623: PUSH
7624: LD_EXP 43
7628: PUSH
7629: LD_EXP 47
7633: PUSH
7634: LD_EXP 50
7638: PUSH
7639: LD_EXP 51
7643: PUSH
7644: LD_EXP 61
7648: PUSH
7649: LD_EXP 62
7653: PUSH
7654: LD_EXP 63
7658: PUSH
7659: LD_EXP 64
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: ST_TO_ADDR
// tmp :=  ;
7720: LD_ADDR_VAR 0 3
7724: PUSH
7725: LD_STRING 
7727: ST_TO_ADDR
// for i = 1 to normalCounter do
7728: LD_ADDR_VAR 0 8
7732: PUSH
7733: DOUBLE
7734: LD_INT 1
7736: DEC
7737: ST_TO_ADDR
7738: LD_EXP 9
7742: PUSH
7743: FOR_TO
7744: IFFALSE 7780
// begin if flags [ i ] then
7746: LD_VAR 0 4
7750: PUSH
7751: LD_VAR 0 8
7755: ARRAY
7756: IFFALSE 7778
// tmp := tmp & i & ; ;
7758: LD_ADDR_VAR 0 3
7762: PUSH
7763: LD_VAR 0 3
7767: PUSH
7768: LD_VAR 0 8
7772: STR
7773: PUSH
7774: LD_STRING ;
7776: STR
7777: ST_TO_ADDR
// end ;
7778: GO 7743
7780: POP
7781: POP
// for i = 1 to hardcoreCounter do
7782: LD_ADDR_VAR 0 8
7786: PUSH
7787: DOUBLE
7788: LD_INT 1
7790: DEC
7791: ST_TO_ADDR
7792: LD_EXP 10
7796: PUSH
7797: FOR_TO
7798: IFFALSE 7844
// begin if flags [ normalCounter + i ] then
7800: LD_VAR 0 4
7804: PUSH
7805: LD_EXP 9
7809: PUSH
7810: LD_VAR 0 8
7814: PLUS
7815: ARRAY
7816: IFFALSE 7842
// tmp := tmp & ( 100 + i ) & ; ;
7818: LD_ADDR_VAR 0 3
7822: PUSH
7823: LD_VAR 0 3
7827: PUSH
7828: LD_INT 100
7830: PUSH
7831: LD_VAR 0 8
7835: PLUS
7836: STR
7837: PUSH
7838: LD_STRING ;
7840: STR
7841: ST_TO_ADDR
// end ;
7842: GO 7797
7844: POP
7845: POP
// if tmp then
7846: LD_VAR 0 3
7850: IFFALSE 7862
// active := tmp ;
7852: LD_ADDR_VAR 0 7
7856: PUSH
7857: LD_VAR 0 3
7861: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7862: LD_STRING getStreamItemsFromMission("
7864: PUSH
7865: LD_VAR 0 5
7869: STR
7870: PUSH
7871: LD_STRING ","
7873: STR
7874: PUSH
7875: LD_VAR 0 6
7879: STR
7880: PUSH
7881: LD_STRING ","
7883: STR
7884: PUSH
7885: LD_VAR 0 7
7889: STR
7890: PUSH
7891: LD_STRING ")
7893: STR
7894: PPUSH
7895: CALL_OW 559
// end else
7899: GO 7908
// ToLua ( getStreamItemsFromMission("","","") ) ;
7901: LD_STRING getStreamItemsFromMission("","","")
7903: PPUSH
7904: CALL_OW 559
// end ;
7908: LD_VAR 0 2
7912: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7913: LD_EXP 8
7917: PUSH
7918: LD_EXP 13
7922: AND
7923: IFFALSE 8047
7925: GO 7927
7927: DISABLE
7928: LD_INT 0
7930: PPUSH
7931: PPUSH
// begin enable ;
7932: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7933: LD_ADDR_VAR 0 2
7937: PUSH
7938: LD_INT 22
7940: PUSH
7941: LD_OWVAR 2
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: PUSH
7950: LD_INT 2
7952: PUSH
7953: LD_INT 34
7955: PUSH
7956: LD_INT 7
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: PUSH
7963: LD_INT 34
7965: PUSH
7966: LD_INT 45
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: PUSH
7973: LD_INT 34
7975: PUSH
7976: LD_INT 28
7978: PUSH
7979: EMPTY
7980: LIST
7981: LIST
7982: PUSH
7983: LD_INT 34
7985: PUSH
7986: LD_INT 47
7988: PUSH
7989: EMPTY
7990: LIST
7991: LIST
7992: PUSH
7993: EMPTY
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: PUSH
8000: EMPTY
8001: LIST
8002: LIST
8003: PPUSH
8004: CALL_OW 69
8008: ST_TO_ADDR
// if not tmp then
8009: LD_VAR 0 2
8013: NOT
8014: IFFALSE 8018
// exit ;
8016: GO 8047
// for i in tmp do
8018: LD_ADDR_VAR 0 1
8022: PUSH
8023: LD_VAR 0 2
8027: PUSH
8028: FOR_IN
8029: IFFALSE 8045
// begin SetLives ( i , 0 ) ;
8031: LD_VAR 0 1
8035: PPUSH
8036: LD_INT 0
8038: PPUSH
8039: CALL_OW 234
// end ;
8043: GO 8028
8045: POP
8046: POP
// end ;
8047: PPOPN 2
8049: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
8050: LD_EXP 8
8054: PUSH
8055: LD_EXP 14
8059: AND
8060: IFFALSE 8144
8062: GO 8064
8064: DISABLE
8065: LD_INT 0
8067: PPUSH
8068: PPUSH
// begin enable ;
8069: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
8070: LD_ADDR_VAR 0 2
8074: PUSH
8075: LD_INT 22
8077: PUSH
8078: LD_OWVAR 2
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PUSH
8087: LD_INT 32
8089: PUSH
8090: LD_INT 3
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: PPUSH
8101: CALL_OW 69
8105: ST_TO_ADDR
// if not tmp then
8106: LD_VAR 0 2
8110: NOT
8111: IFFALSE 8115
// exit ;
8113: GO 8144
// for i in tmp do
8115: LD_ADDR_VAR 0 1
8119: PUSH
8120: LD_VAR 0 2
8124: PUSH
8125: FOR_IN
8126: IFFALSE 8142
// begin SetLives ( i , 0 ) ;
8128: LD_VAR 0 1
8132: PPUSH
8133: LD_INT 0
8135: PPUSH
8136: CALL_OW 234
// end ;
8140: GO 8125
8142: POP
8143: POP
// end ;
8144: PPOPN 2
8146: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
8147: LD_EXP 8
8151: PUSH
8152: LD_EXP 11
8156: AND
8157: IFFALSE 8250
8159: GO 8161
8161: DISABLE
8162: LD_INT 0
8164: PPUSH
// begin enable ;
8165: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
8166: LD_ADDR_VAR 0 1
8170: PUSH
8171: LD_INT 22
8173: PUSH
8174: LD_OWVAR 2
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: PUSH
8183: LD_INT 2
8185: PUSH
8186: LD_INT 25
8188: PUSH
8189: LD_INT 5
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: PUSH
8196: LD_INT 25
8198: PUSH
8199: LD_INT 9
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: PUSH
8206: LD_INT 25
8208: PUSH
8209: LD_INT 8
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: PUSH
8222: EMPTY
8223: LIST
8224: LIST
8225: PPUSH
8226: CALL_OW 69
8230: PUSH
8231: FOR_IN
8232: IFFALSE 8248
// begin SetClass ( i , 1 ) ;
8234: LD_VAR 0 1
8238: PPUSH
8239: LD_INT 1
8241: PPUSH
8242: CALL_OW 336
// end ;
8246: GO 8231
8248: POP
8249: POP
// end ;
8250: PPOPN 1
8252: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
8253: LD_EXP 8
8257: PUSH
8258: LD_EXP 12
8262: AND
8263: PUSH
8264: LD_OWVAR 65
8268: PUSH
8269: LD_INT 7
8271: LESS
8272: AND
8273: IFFALSE 8287
8275: GO 8277
8277: DISABLE
// begin enable ;
8278: ENABLE
// game_speed := 7 ;
8279: LD_ADDR_OWVAR 65
8283: PUSH
8284: LD_INT 7
8286: ST_TO_ADDR
// end ;
8287: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
8288: LD_EXP 8
8292: PUSH
8293: LD_EXP 15
8297: AND
8298: IFFALSE 8500
8300: GO 8302
8302: DISABLE
8303: LD_INT 0
8305: PPUSH
8306: PPUSH
8307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
8308: LD_ADDR_VAR 0 3
8312: PUSH
8313: LD_INT 81
8315: PUSH
8316: LD_OWVAR 2
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: PUSH
8325: LD_INT 21
8327: PUSH
8328: LD_INT 1
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: PUSH
8335: EMPTY
8336: LIST
8337: LIST
8338: PPUSH
8339: CALL_OW 69
8343: ST_TO_ADDR
// if not tmp then
8344: LD_VAR 0 3
8348: NOT
8349: IFFALSE 8353
// exit ;
8351: GO 8500
// if tmp > 5 then
8353: LD_VAR 0 3
8357: PUSH
8358: LD_INT 5
8360: GREATER
8361: IFFALSE 8373
// k := 5 else
8363: LD_ADDR_VAR 0 2
8367: PUSH
8368: LD_INT 5
8370: ST_TO_ADDR
8371: GO 8383
// k := tmp ;
8373: LD_ADDR_VAR 0 2
8377: PUSH
8378: LD_VAR 0 3
8382: ST_TO_ADDR
// for i := 1 to k do
8383: LD_ADDR_VAR 0 1
8387: PUSH
8388: DOUBLE
8389: LD_INT 1
8391: DEC
8392: ST_TO_ADDR
8393: LD_VAR 0 2
8397: PUSH
8398: FOR_TO
8399: IFFALSE 8498
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
8401: LD_VAR 0 3
8405: PUSH
8406: LD_VAR 0 1
8410: ARRAY
8411: PPUSH
8412: LD_VAR 0 1
8416: PUSH
8417: LD_INT 4
8419: MOD
8420: PUSH
8421: LD_INT 1
8423: PLUS
8424: PPUSH
8425: CALL_OW 259
8429: PUSH
8430: LD_INT 10
8432: LESS
8433: IFFALSE 8496
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
8435: LD_VAR 0 3
8439: PUSH
8440: LD_VAR 0 1
8444: ARRAY
8445: PPUSH
8446: LD_VAR 0 1
8450: PUSH
8451: LD_INT 4
8453: MOD
8454: PUSH
8455: LD_INT 1
8457: PLUS
8458: PPUSH
8459: LD_VAR 0 3
8463: PUSH
8464: LD_VAR 0 1
8468: ARRAY
8469: PPUSH
8470: LD_VAR 0 1
8474: PUSH
8475: LD_INT 4
8477: MOD
8478: PUSH
8479: LD_INT 1
8481: PLUS
8482: PPUSH
8483: CALL_OW 259
8487: PUSH
8488: LD_INT 1
8490: PLUS
8491: PPUSH
8492: CALL_OW 237
8496: GO 8398
8498: POP
8499: POP
// end ;
8500: PPOPN 3
8502: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8503: LD_EXP 8
8507: PUSH
8508: LD_EXP 16
8512: AND
8513: IFFALSE 8533
8515: GO 8517
8517: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8518: LD_INT 4
8520: PPUSH
8521: LD_OWVAR 2
8525: PPUSH
8526: LD_INT 0
8528: PPUSH
8529: CALL_OW 324
8533: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8534: LD_EXP 8
8538: PUSH
8539: LD_EXP 45
8543: AND
8544: IFFALSE 8564
8546: GO 8548
8548: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8549: LD_INT 19
8551: PPUSH
8552: LD_OWVAR 2
8556: PPUSH
8557: LD_INT 0
8559: PPUSH
8560: CALL_OW 324
8564: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8565: LD_EXP 8
8569: PUSH
8570: LD_EXP 17
8574: AND
8575: IFFALSE 8677
8577: GO 8579
8579: DISABLE
8580: LD_INT 0
8582: PPUSH
8583: PPUSH
// begin enable ;
8584: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8585: LD_ADDR_VAR 0 2
8589: PUSH
8590: LD_INT 22
8592: PUSH
8593: LD_OWVAR 2
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: PUSH
8602: LD_INT 2
8604: PUSH
8605: LD_INT 34
8607: PUSH
8608: LD_INT 11
8610: PUSH
8611: EMPTY
8612: LIST
8613: LIST
8614: PUSH
8615: LD_INT 34
8617: PUSH
8618: LD_INT 30
8620: PUSH
8621: EMPTY
8622: LIST
8623: LIST
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: LIST
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PPUSH
8634: CALL_OW 69
8638: ST_TO_ADDR
// if not tmp then
8639: LD_VAR 0 2
8643: NOT
8644: IFFALSE 8648
// exit ;
8646: GO 8677
// for i in tmp do
8648: LD_ADDR_VAR 0 1
8652: PUSH
8653: LD_VAR 0 2
8657: PUSH
8658: FOR_IN
8659: IFFALSE 8675
// begin SetLives ( i , 0 ) ;
8661: LD_VAR 0 1
8665: PPUSH
8666: LD_INT 0
8668: PPUSH
8669: CALL_OW 234
// end ;
8673: GO 8658
8675: POP
8676: POP
// end ;
8677: PPOPN 2
8679: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8680: LD_EXP 8
8684: PUSH
8685: LD_EXP 18
8689: AND
8690: IFFALSE 8710
8692: GO 8694
8694: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8695: LD_INT 32
8697: PPUSH
8698: LD_OWVAR 2
8702: PPUSH
8703: LD_INT 0
8705: PPUSH
8706: CALL_OW 324
8710: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8711: LD_EXP 8
8715: PUSH
8716: LD_EXP 19
8720: AND
8721: IFFALSE 8902
8723: GO 8725
8725: DISABLE
8726: LD_INT 0
8728: PPUSH
8729: PPUSH
8730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8731: LD_ADDR_VAR 0 2
8735: PUSH
8736: LD_INT 22
8738: PUSH
8739: LD_OWVAR 2
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: PUSH
8748: LD_INT 33
8750: PUSH
8751: LD_INT 3
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PPUSH
8762: CALL_OW 69
8766: ST_TO_ADDR
// if not tmp then
8767: LD_VAR 0 2
8771: NOT
8772: IFFALSE 8776
// exit ;
8774: GO 8902
// side := 0 ;
8776: LD_ADDR_VAR 0 3
8780: PUSH
8781: LD_INT 0
8783: ST_TO_ADDR
// for i := 1 to 8 do
8784: LD_ADDR_VAR 0 1
8788: PUSH
8789: DOUBLE
8790: LD_INT 1
8792: DEC
8793: ST_TO_ADDR
8794: LD_INT 8
8796: PUSH
8797: FOR_TO
8798: IFFALSE 8846
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8800: LD_OWVAR 2
8804: PUSH
8805: LD_VAR 0 1
8809: NONEQUAL
8810: PUSH
8811: LD_OWVAR 2
8815: PPUSH
8816: LD_VAR 0 1
8820: PPUSH
8821: CALL_OW 81
8825: PUSH
8826: LD_INT 2
8828: EQUAL
8829: AND
8830: IFFALSE 8844
// begin side := i ;
8832: LD_ADDR_VAR 0 3
8836: PUSH
8837: LD_VAR 0 1
8841: ST_TO_ADDR
// break ;
8842: GO 8846
// end ;
8844: GO 8797
8846: POP
8847: POP
// if not side then
8848: LD_VAR 0 3
8852: NOT
8853: IFFALSE 8857
// exit ;
8855: GO 8902
// for i := 1 to tmp do
8857: LD_ADDR_VAR 0 1
8861: PUSH
8862: DOUBLE
8863: LD_INT 1
8865: DEC
8866: ST_TO_ADDR
8867: LD_VAR 0 2
8871: PUSH
8872: FOR_TO
8873: IFFALSE 8900
// if Prob ( 60 ) then
8875: LD_INT 60
8877: PPUSH
8878: CALL_OW 13
8882: IFFALSE 8898
// SetSide ( i , side ) ;
8884: LD_VAR 0 1
8888: PPUSH
8889: LD_VAR 0 3
8893: PPUSH
8894: CALL_OW 235
8898: GO 8872
8900: POP
8901: POP
// end ;
8902: PPOPN 3
8904: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8905: LD_EXP 8
8909: PUSH
8910: LD_EXP 21
8914: AND
8915: IFFALSE 9034
8917: GO 8919
8919: DISABLE
8920: LD_INT 0
8922: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8923: LD_ADDR_VAR 0 1
8927: PUSH
8928: LD_INT 22
8930: PUSH
8931: LD_OWVAR 2
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PUSH
8940: LD_INT 21
8942: PUSH
8943: LD_INT 1
8945: PUSH
8946: EMPTY
8947: LIST
8948: LIST
8949: PUSH
8950: LD_INT 3
8952: PUSH
8953: LD_INT 23
8955: PUSH
8956: LD_INT 0
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: LIST
8971: PPUSH
8972: CALL_OW 69
8976: PUSH
8977: FOR_IN
8978: IFFALSE 9032
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
8980: LD_VAR 0 1
8984: PPUSH
8985: CALL_OW 257
8989: PUSH
8990: LD_INT 1
8992: PUSH
8993: LD_INT 2
8995: PUSH
8996: LD_INT 3
8998: PUSH
8999: LD_INT 4
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: IN
9008: IFFALSE 9030
// SetClass ( un , rand ( 1 , 4 ) ) ;
9010: LD_VAR 0 1
9014: PPUSH
9015: LD_INT 1
9017: PPUSH
9018: LD_INT 4
9020: PPUSH
9021: CALL_OW 12
9025: PPUSH
9026: CALL_OW 336
9030: GO 8977
9032: POP
9033: POP
// end ;
9034: PPOPN 1
9036: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
9037: LD_EXP 8
9041: PUSH
9042: LD_EXP 20
9046: AND
9047: IFFALSE 9126
9049: GO 9051
9051: DISABLE
9052: LD_INT 0
9054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9055: LD_ADDR_VAR 0 1
9059: PUSH
9060: LD_INT 22
9062: PUSH
9063: LD_OWVAR 2
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: PUSH
9072: LD_INT 21
9074: PUSH
9075: LD_INT 3
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: PPUSH
9086: CALL_OW 69
9090: ST_TO_ADDR
// if not tmp then
9091: LD_VAR 0 1
9095: NOT
9096: IFFALSE 9100
// exit ;
9098: GO 9126
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
9100: LD_VAR 0 1
9104: PUSH
9105: LD_INT 1
9107: PPUSH
9108: LD_VAR 0 1
9112: PPUSH
9113: CALL_OW 12
9117: ARRAY
9118: PPUSH
9119: LD_INT 100
9121: PPUSH
9122: CALL_OW 234
// end ;
9126: PPOPN 1
9128: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
9129: LD_EXP 8
9133: PUSH
9134: LD_EXP 22
9138: AND
9139: IFFALSE 9237
9141: GO 9143
9143: DISABLE
9144: LD_INT 0
9146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9147: LD_ADDR_VAR 0 1
9151: PUSH
9152: LD_INT 22
9154: PUSH
9155: LD_OWVAR 2
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: PUSH
9164: LD_INT 21
9166: PUSH
9167: LD_INT 1
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: PPUSH
9178: CALL_OW 69
9182: ST_TO_ADDR
// if not tmp then
9183: LD_VAR 0 1
9187: NOT
9188: IFFALSE 9192
// exit ;
9190: GO 9237
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
9192: LD_VAR 0 1
9196: PUSH
9197: LD_INT 1
9199: PPUSH
9200: LD_VAR 0 1
9204: PPUSH
9205: CALL_OW 12
9209: ARRAY
9210: PPUSH
9211: LD_INT 1
9213: PPUSH
9214: LD_INT 4
9216: PPUSH
9217: CALL_OW 12
9221: PPUSH
9222: LD_INT 3000
9224: PPUSH
9225: LD_INT 9000
9227: PPUSH
9228: CALL_OW 12
9232: PPUSH
9233: CALL_OW 492
// end ;
9237: PPOPN 1
9239: END
// every 0 0$1 trigger StreamModeActive and sDepot do
9240: LD_EXP 8
9244: PUSH
9245: LD_EXP 23
9249: AND
9250: IFFALSE 9270
9252: GO 9254
9254: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
9255: LD_INT 1
9257: PPUSH
9258: LD_OWVAR 2
9262: PPUSH
9263: LD_INT 0
9265: PPUSH
9266: CALL_OW 324
9270: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
9271: LD_EXP 8
9275: PUSH
9276: LD_EXP 24
9280: AND
9281: IFFALSE 9364
9283: GO 9285
9285: DISABLE
9286: LD_INT 0
9288: PPUSH
9289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9290: LD_ADDR_VAR 0 2
9294: PUSH
9295: LD_INT 22
9297: PUSH
9298: LD_OWVAR 2
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: LD_INT 21
9309: PUSH
9310: LD_INT 3
9312: PUSH
9313: EMPTY
9314: LIST
9315: LIST
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: PPUSH
9321: CALL_OW 69
9325: ST_TO_ADDR
// if not tmp then
9326: LD_VAR 0 2
9330: NOT
9331: IFFALSE 9335
// exit ;
9333: GO 9364
// for i in tmp do
9335: LD_ADDR_VAR 0 1
9339: PUSH
9340: LD_VAR 0 2
9344: PUSH
9345: FOR_IN
9346: IFFALSE 9362
// SetBLevel ( i , 10 ) ;
9348: LD_VAR 0 1
9352: PPUSH
9353: LD_INT 10
9355: PPUSH
9356: CALL_OW 241
9360: GO 9345
9362: POP
9363: POP
// end ;
9364: PPOPN 2
9366: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
9367: LD_EXP 8
9371: PUSH
9372: LD_EXP 25
9376: AND
9377: IFFALSE 9488
9379: GO 9381
9381: DISABLE
9382: LD_INT 0
9384: PPUSH
9385: PPUSH
9386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
9387: LD_ADDR_VAR 0 3
9391: PUSH
9392: LD_INT 22
9394: PUSH
9395: LD_OWVAR 2
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: LD_INT 25
9406: PUSH
9407: LD_INT 1
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: PPUSH
9418: CALL_OW 69
9422: ST_TO_ADDR
// if not tmp then
9423: LD_VAR 0 3
9427: NOT
9428: IFFALSE 9432
// exit ;
9430: GO 9488
// un := tmp [ rand ( 1 , tmp ) ] ;
9432: LD_ADDR_VAR 0 2
9436: PUSH
9437: LD_VAR 0 3
9441: PUSH
9442: LD_INT 1
9444: PPUSH
9445: LD_VAR 0 3
9449: PPUSH
9450: CALL_OW 12
9454: ARRAY
9455: ST_TO_ADDR
// if Crawls ( un ) then
9456: LD_VAR 0 2
9460: PPUSH
9461: CALL_OW 318
9465: IFFALSE 9476
// ComWalk ( un ) ;
9467: LD_VAR 0 2
9471: PPUSH
9472: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9476: LD_VAR 0 2
9480: PPUSH
9481: LD_INT 5
9483: PPUSH
9484: CALL_OW 336
// end ;
9488: PPOPN 3
9490: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9491: LD_EXP 8
9495: PUSH
9496: LD_EXP 26
9500: AND
9501: PUSH
9502: LD_OWVAR 67
9506: PUSH
9507: LD_INT 4
9509: LESS
9510: AND
9511: IFFALSE 9530
9513: GO 9515
9515: DISABLE
// begin Difficulty := Difficulty + 1 ;
9516: LD_ADDR_OWVAR 67
9520: PUSH
9521: LD_OWVAR 67
9525: PUSH
9526: LD_INT 1
9528: PLUS
9529: ST_TO_ADDR
// end ;
9530: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9531: LD_EXP 8
9535: PUSH
9536: LD_EXP 27
9540: AND
9541: IFFALSE 9644
9543: GO 9545
9545: DISABLE
9546: LD_INT 0
9548: PPUSH
// begin for i := 1 to 5 do
9549: LD_ADDR_VAR 0 1
9553: PUSH
9554: DOUBLE
9555: LD_INT 1
9557: DEC
9558: ST_TO_ADDR
9559: LD_INT 5
9561: PUSH
9562: FOR_TO
9563: IFFALSE 9642
// begin uc_nation := nation_nature ;
9565: LD_ADDR_OWVAR 21
9569: PUSH
9570: LD_INT 0
9572: ST_TO_ADDR
// uc_side := 0 ;
9573: LD_ADDR_OWVAR 20
9577: PUSH
9578: LD_INT 0
9580: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9581: LD_ADDR_OWVAR 29
9585: PUSH
9586: LD_INT 12
9588: PUSH
9589: LD_INT 12
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: ST_TO_ADDR
// hc_agressivity := 20 ;
9596: LD_ADDR_OWVAR 35
9600: PUSH
9601: LD_INT 20
9603: ST_TO_ADDR
// hc_class := class_tiger ;
9604: LD_ADDR_OWVAR 28
9608: PUSH
9609: LD_INT 14
9611: ST_TO_ADDR
// hc_gallery :=  ;
9612: LD_ADDR_OWVAR 33
9616: PUSH
9617: LD_STRING 
9619: ST_TO_ADDR
// hc_name :=  ;
9620: LD_ADDR_OWVAR 26
9624: PUSH
9625: LD_STRING 
9627: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9628: CALL_OW 44
9632: PPUSH
9633: LD_INT 0
9635: PPUSH
9636: CALL_OW 51
// end ;
9640: GO 9562
9642: POP
9643: POP
// end ;
9644: PPOPN 1
9646: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9647: LD_EXP 8
9651: PUSH
9652: LD_EXP 28
9656: AND
9657: IFFALSE 9666
9659: GO 9661
9661: DISABLE
// StreamSibBomb ;
9662: CALL 9667 0 0
9666: END
// export function StreamSibBomb ; var i , x , y ; begin
9667: LD_INT 0
9669: PPUSH
9670: PPUSH
9671: PPUSH
9672: PPUSH
// result := false ;
9673: LD_ADDR_VAR 0 1
9677: PUSH
9678: LD_INT 0
9680: ST_TO_ADDR
// for i := 1 to 16 do
9681: LD_ADDR_VAR 0 2
9685: PUSH
9686: DOUBLE
9687: LD_INT 1
9689: DEC
9690: ST_TO_ADDR
9691: LD_INT 16
9693: PUSH
9694: FOR_TO
9695: IFFALSE 9894
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9697: LD_ADDR_VAR 0 3
9701: PUSH
9702: LD_INT 10
9704: PUSH
9705: LD_INT 20
9707: PUSH
9708: LD_INT 30
9710: PUSH
9711: LD_INT 40
9713: PUSH
9714: LD_INT 50
9716: PUSH
9717: LD_INT 60
9719: PUSH
9720: LD_INT 70
9722: PUSH
9723: LD_INT 80
9725: PUSH
9726: LD_INT 90
9728: PUSH
9729: LD_INT 100
9731: PUSH
9732: LD_INT 110
9734: PUSH
9735: LD_INT 120
9737: PUSH
9738: LD_INT 130
9740: PUSH
9741: LD_INT 140
9743: PUSH
9744: LD_INT 150
9746: PUSH
9747: EMPTY
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: PUSH
9764: LD_INT 1
9766: PPUSH
9767: LD_INT 15
9769: PPUSH
9770: CALL_OW 12
9774: ARRAY
9775: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9776: LD_ADDR_VAR 0 4
9780: PUSH
9781: LD_INT 10
9783: PUSH
9784: LD_INT 20
9786: PUSH
9787: LD_INT 30
9789: PUSH
9790: LD_INT 40
9792: PUSH
9793: LD_INT 50
9795: PUSH
9796: LD_INT 60
9798: PUSH
9799: LD_INT 70
9801: PUSH
9802: LD_INT 80
9804: PUSH
9805: LD_INT 90
9807: PUSH
9808: LD_INT 100
9810: PUSH
9811: LD_INT 110
9813: PUSH
9814: LD_INT 120
9816: PUSH
9817: LD_INT 130
9819: PUSH
9820: LD_INT 140
9822: PUSH
9823: LD_INT 150
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: PUSH
9843: LD_INT 1
9845: PPUSH
9846: LD_INT 15
9848: PPUSH
9849: CALL_OW 12
9853: ARRAY
9854: ST_TO_ADDR
// if ValidHex ( x , y ) then
9855: LD_VAR 0 3
9859: PPUSH
9860: LD_VAR 0 4
9864: PPUSH
9865: CALL_OW 488
9869: IFFALSE 9892
// begin result := [ x , y ] ;
9871: LD_ADDR_VAR 0 1
9875: PUSH
9876: LD_VAR 0 3
9880: PUSH
9881: LD_VAR 0 4
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: ST_TO_ADDR
// break ;
9890: GO 9894
// end ; end ;
9892: GO 9694
9894: POP
9895: POP
// if result then
9896: LD_VAR 0 1
9900: IFFALSE 9960
// begin ToLua ( playSibBomb() ) ;
9902: LD_STRING playSibBomb()
9904: PPUSH
9905: CALL_OW 559
// wait ( 0 0$14 ) ;
9909: LD_INT 490
9911: PPUSH
9912: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9916: LD_VAR 0 1
9920: PUSH
9921: LD_INT 1
9923: ARRAY
9924: PPUSH
9925: LD_VAR 0 1
9929: PUSH
9930: LD_INT 2
9932: ARRAY
9933: PPUSH
9934: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
9938: LD_VAR 0 1
9942: PUSH
9943: LD_INT 1
9945: ARRAY
9946: PPUSH
9947: LD_VAR 0 1
9951: PUSH
9952: LD_INT 2
9954: ARRAY
9955: PPUSH
9956: CALL_OW 429
// end ; end ;
9960: LD_VAR 0 1
9964: RET
// every 0 0$1 trigger StreamModeActive and sReset do
9965: LD_EXP 8
9969: PUSH
9970: LD_EXP 30
9974: AND
9975: IFFALSE 9987
9977: GO 9979
9979: DISABLE
// YouLost (  ) ;
9980: LD_STRING 
9982: PPUSH
9983: CALL_OW 104
9987: END
// every 0 0$1 trigger StreamModeActive and sFog do
9988: LD_EXP 8
9992: PUSH
9993: LD_EXP 29
9997: AND
9998: IFFALSE 10012
10000: GO 10002
10002: DISABLE
// FogOff ( your_side ) ;
10003: LD_OWVAR 2
10007: PPUSH
10008: CALL_OW 344
10012: END
// every 0 0$1 trigger StreamModeActive and sSun do
10013: LD_EXP 8
10017: PUSH
10018: LD_EXP 31
10022: AND
10023: IFFALSE 10051
10025: GO 10027
10027: DISABLE
// begin solar_recharge_percent := 0 ;
10028: LD_ADDR_OWVAR 79
10032: PUSH
10033: LD_INT 0
10035: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10036: LD_INT 10500
10038: PPUSH
10039: CALL_OW 67
// solar_recharge_percent := 100 ;
10043: LD_ADDR_OWVAR 79
10047: PUSH
10048: LD_INT 100
10050: ST_TO_ADDR
// end ;
10051: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
10052: LD_EXP 8
10056: PUSH
10057: LD_EXP 32
10061: AND
10062: IFFALSE 10301
10064: GO 10066
10066: DISABLE
10067: LD_INT 0
10069: PPUSH
10070: PPUSH
10071: PPUSH
// begin tmp := [ ] ;
10072: LD_ADDR_VAR 0 3
10076: PUSH
10077: EMPTY
10078: ST_TO_ADDR
// for i := 1 to 6 do
10079: LD_ADDR_VAR 0 1
10083: PUSH
10084: DOUBLE
10085: LD_INT 1
10087: DEC
10088: ST_TO_ADDR
10089: LD_INT 6
10091: PUSH
10092: FOR_TO
10093: IFFALSE 10198
// begin uc_nation := nation_nature ;
10095: LD_ADDR_OWVAR 21
10099: PUSH
10100: LD_INT 0
10102: ST_TO_ADDR
// uc_side := 0 ;
10103: LD_ADDR_OWVAR 20
10107: PUSH
10108: LD_INT 0
10110: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10111: LD_ADDR_OWVAR 29
10115: PUSH
10116: LD_INT 12
10118: PUSH
10119: LD_INT 12
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: ST_TO_ADDR
// hc_agressivity := 20 ;
10126: LD_ADDR_OWVAR 35
10130: PUSH
10131: LD_INT 20
10133: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
10134: LD_ADDR_OWVAR 28
10138: PUSH
10139: LD_INT 17
10141: ST_TO_ADDR
// hc_gallery :=  ;
10142: LD_ADDR_OWVAR 33
10146: PUSH
10147: LD_STRING 
10149: ST_TO_ADDR
// hc_name :=  ;
10150: LD_ADDR_OWVAR 26
10154: PUSH
10155: LD_STRING 
10157: ST_TO_ADDR
// un := CreateHuman ;
10158: LD_ADDR_VAR 0 2
10162: PUSH
10163: CALL_OW 44
10167: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
10168: LD_VAR 0 2
10172: PPUSH
10173: LD_INT 1
10175: PPUSH
10176: CALL_OW 51
// tmp := tmp ^ un ;
10180: LD_ADDR_VAR 0 3
10184: PUSH
10185: LD_VAR 0 3
10189: PUSH
10190: LD_VAR 0 2
10194: ADD
10195: ST_TO_ADDR
// end ;
10196: GO 10092
10198: POP
10199: POP
// repeat wait ( 0 0$1 ) ;
10200: LD_INT 35
10202: PPUSH
10203: CALL_OW 67
// for un in tmp do
10207: LD_ADDR_VAR 0 2
10211: PUSH
10212: LD_VAR 0 3
10216: PUSH
10217: FOR_IN
10218: IFFALSE 10292
// begin if IsDead ( un ) then
10220: LD_VAR 0 2
10224: PPUSH
10225: CALL_OW 301
10229: IFFALSE 10249
// begin tmp := tmp diff un ;
10231: LD_ADDR_VAR 0 3
10235: PUSH
10236: LD_VAR 0 3
10240: PUSH
10241: LD_VAR 0 2
10245: DIFF
10246: ST_TO_ADDR
// continue ;
10247: GO 10217
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
10249: LD_VAR 0 2
10253: PPUSH
10254: LD_INT 3
10256: PUSH
10257: LD_INT 22
10259: PUSH
10260: LD_INT 0
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: PPUSH
10271: CALL_OW 69
10275: PPUSH
10276: LD_VAR 0 2
10280: PPUSH
10281: CALL_OW 74
10285: PPUSH
10286: CALL_OW 115
// end ;
10290: GO 10217
10292: POP
10293: POP
// until not tmp ;
10294: LD_VAR 0 3
10298: NOT
10299: IFFALSE 10200
// end ;
10301: PPOPN 3
10303: END
// every 0 0$1 trigger StreamModeActive and sTroll do
10304: LD_EXP 8
10308: PUSH
10309: LD_EXP 33
10313: AND
10314: IFFALSE 10368
10316: GO 10318
10318: DISABLE
// begin ToLua ( displayTroll(); ) ;
10319: LD_STRING displayTroll();
10321: PPUSH
10322: CALL_OW 559
// wait ( 3 3$00 ) ;
10326: LD_INT 6300
10328: PPUSH
10329: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10333: LD_STRING hideTroll();
10335: PPUSH
10336: CALL_OW 559
// wait ( 1 1$00 ) ;
10340: LD_INT 2100
10342: PPUSH
10343: CALL_OW 67
// ToLua ( displayTroll(); ) ;
10347: LD_STRING displayTroll();
10349: PPUSH
10350: CALL_OW 559
// wait ( 1 1$00 ) ;
10354: LD_INT 2100
10356: PPUSH
10357: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10361: LD_STRING hideTroll();
10363: PPUSH
10364: CALL_OW 559
// end ;
10368: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
10369: LD_EXP 8
10373: PUSH
10374: LD_EXP 34
10378: AND
10379: IFFALSE 10442
10381: GO 10383
10383: DISABLE
10384: LD_INT 0
10386: PPUSH
// begin p := 0 ;
10387: LD_ADDR_VAR 0 1
10391: PUSH
10392: LD_INT 0
10394: ST_TO_ADDR
// repeat game_speed := 1 ;
10395: LD_ADDR_OWVAR 65
10399: PUSH
10400: LD_INT 1
10402: ST_TO_ADDR
// wait ( 0 0$1 ) ;
10403: LD_INT 35
10405: PPUSH
10406: CALL_OW 67
// p := p + 1 ;
10410: LD_ADDR_VAR 0 1
10414: PUSH
10415: LD_VAR 0 1
10419: PUSH
10420: LD_INT 1
10422: PLUS
10423: ST_TO_ADDR
// until p >= 60 ;
10424: LD_VAR 0 1
10428: PUSH
10429: LD_INT 60
10431: GREATEREQUAL
10432: IFFALSE 10395
// game_speed := 4 ;
10434: LD_ADDR_OWVAR 65
10438: PUSH
10439: LD_INT 4
10441: ST_TO_ADDR
// end ;
10442: PPOPN 1
10444: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
10445: LD_EXP 8
10449: PUSH
10450: LD_EXP 35
10454: AND
10455: IFFALSE 10601
10457: GO 10459
10459: DISABLE
10460: LD_INT 0
10462: PPUSH
10463: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10464: LD_ADDR_VAR 0 1
10468: PUSH
10469: LD_INT 22
10471: PUSH
10472: LD_OWVAR 2
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: PUSH
10481: LD_INT 2
10483: PUSH
10484: LD_INT 30
10486: PUSH
10487: LD_INT 0
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: LD_INT 30
10496: PUSH
10497: LD_INT 1
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: LIST
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PPUSH
10513: CALL_OW 69
10517: ST_TO_ADDR
// if not depot then
10518: LD_VAR 0 1
10522: NOT
10523: IFFALSE 10527
// exit ;
10525: GO 10601
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10527: LD_ADDR_VAR 0 2
10531: PUSH
10532: LD_VAR 0 1
10536: PUSH
10537: LD_INT 1
10539: PPUSH
10540: LD_VAR 0 1
10544: PPUSH
10545: CALL_OW 12
10549: ARRAY
10550: PPUSH
10551: CALL_OW 274
10555: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10556: LD_VAR 0 2
10560: PPUSH
10561: LD_INT 1
10563: PPUSH
10564: LD_INT 0
10566: PPUSH
10567: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10571: LD_VAR 0 2
10575: PPUSH
10576: LD_INT 2
10578: PPUSH
10579: LD_INT 0
10581: PPUSH
10582: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10586: LD_VAR 0 2
10590: PPUSH
10591: LD_INT 3
10593: PPUSH
10594: LD_INT 0
10596: PPUSH
10597: CALL_OW 277
// end ;
10601: PPOPN 2
10603: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10604: LD_EXP 8
10608: PUSH
10609: LD_EXP 36
10613: AND
10614: IFFALSE 10711
10616: GO 10618
10618: DISABLE
10619: LD_INT 0
10621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10622: LD_ADDR_VAR 0 1
10626: PUSH
10627: LD_INT 22
10629: PUSH
10630: LD_OWVAR 2
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: PUSH
10639: LD_INT 21
10641: PUSH
10642: LD_INT 1
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: PUSH
10649: LD_INT 3
10651: PUSH
10652: LD_INT 23
10654: PUSH
10655: LD_INT 0
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: LIST
10670: PPUSH
10671: CALL_OW 69
10675: ST_TO_ADDR
// if not tmp then
10676: LD_VAR 0 1
10680: NOT
10681: IFFALSE 10685
// exit ;
10683: GO 10711
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10685: LD_VAR 0 1
10689: PUSH
10690: LD_INT 1
10692: PPUSH
10693: LD_VAR 0 1
10697: PPUSH
10698: CALL_OW 12
10702: ARRAY
10703: PPUSH
10704: LD_INT 200
10706: PPUSH
10707: CALL_OW 234
// end ;
10711: PPOPN 1
10713: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10714: LD_EXP 8
10718: PUSH
10719: LD_EXP 37
10723: AND
10724: IFFALSE 10803
10726: GO 10728
10728: DISABLE
10729: LD_INT 0
10731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10732: LD_ADDR_VAR 0 1
10736: PUSH
10737: LD_INT 22
10739: PUSH
10740: LD_OWVAR 2
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PUSH
10749: LD_INT 21
10751: PUSH
10752: LD_INT 2
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: PPUSH
10763: CALL_OW 69
10767: ST_TO_ADDR
// if not tmp then
10768: LD_VAR 0 1
10772: NOT
10773: IFFALSE 10777
// exit ;
10775: GO 10803
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10777: LD_VAR 0 1
10781: PUSH
10782: LD_INT 1
10784: PPUSH
10785: LD_VAR 0 1
10789: PPUSH
10790: CALL_OW 12
10794: ARRAY
10795: PPUSH
10796: LD_INT 60
10798: PPUSH
10799: CALL_OW 234
// end ;
10803: PPOPN 1
10805: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10806: LD_EXP 8
10810: PUSH
10811: LD_EXP 38
10815: AND
10816: IFFALSE 10915
10818: GO 10820
10820: DISABLE
10821: LD_INT 0
10823: PPUSH
10824: PPUSH
// begin enable ;
10825: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10826: LD_ADDR_VAR 0 1
10830: PUSH
10831: LD_INT 22
10833: PUSH
10834: LD_OWVAR 2
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: PUSH
10843: LD_INT 61
10845: PUSH
10846: EMPTY
10847: LIST
10848: PUSH
10849: LD_INT 33
10851: PUSH
10852: LD_INT 2
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: LIST
10863: PPUSH
10864: CALL_OW 69
10868: ST_TO_ADDR
// if not tmp then
10869: LD_VAR 0 1
10873: NOT
10874: IFFALSE 10878
// exit ;
10876: GO 10915
// for i in tmp do
10878: LD_ADDR_VAR 0 2
10882: PUSH
10883: LD_VAR 0 1
10887: PUSH
10888: FOR_IN
10889: IFFALSE 10913
// if IsControledBy ( i ) then
10891: LD_VAR 0 2
10895: PPUSH
10896: CALL_OW 312
10900: IFFALSE 10911
// ComUnlink ( i ) ;
10902: LD_VAR 0 2
10906: PPUSH
10907: CALL_OW 136
10911: GO 10888
10913: POP
10914: POP
// end ;
10915: PPOPN 2
10917: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
10918: LD_EXP 8
10922: PUSH
10923: LD_EXP 39
10927: AND
10928: IFFALSE 11068
10930: GO 10932
10932: DISABLE
10933: LD_INT 0
10935: PPUSH
10936: PPUSH
// begin ToLua ( displayPowell(); ) ;
10937: LD_STRING displayPowell();
10939: PPUSH
10940: CALL_OW 559
// uc_side := 0 ;
10944: LD_ADDR_OWVAR 20
10948: PUSH
10949: LD_INT 0
10951: ST_TO_ADDR
// uc_nation := 2 ;
10952: LD_ADDR_OWVAR 21
10956: PUSH
10957: LD_INT 2
10959: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
10960: LD_ADDR_OWVAR 37
10964: PUSH
10965: LD_INT 14
10967: ST_TO_ADDR
// vc_engine := engine_siberite ;
10968: LD_ADDR_OWVAR 39
10972: PUSH
10973: LD_INT 3
10975: ST_TO_ADDR
// vc_control := control_apeman ;
10976: LD_ADDR_OWVAR 38
10980: PUSH
10981: LD_INT 5
10983: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
10984: LD_ADDR_OWVAR 40
10988: PUSH
10989: LD_INT 29
10991: ST_TO_ADDR
// un := CreateVehicle ;
10992: LD_ADDR_VAR 0 2
10996: PUSH
10997: CALL_OW 45
11001: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11002: LD_VAR 0 2
11006: PPUSH
11007: LD_INT 1
11009: PPUSH
11010: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11014: LD_INT 35
11016: PPUSH
11017: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11021: LD_VAR 0 2
11025: PPUSH
11026: LD_INT 22
11028: PUSH
11029: LD_OWVAR 2
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PPUSH
11038: CALL_OW 69
11042: PPUSH
11043: LD_VAR 0 2
11047: PPUSH
11048: CALL_OW 74
11052: PPUSH
11053: CALL_OW 115
// until IsDead ( un ) ;
11057: LD_VAR 0 2
11061: PPUSH
11062: CALL_OW 301
11066: IFFALSE 11014
// end ;
11068: PPOPN 2
11070: END
// every 0 0$1 trigger StreamModeActive and sStu do
11071: LD_EXP 8
11075: PUSH
11076: LD_EXP 47
11080: AND
11081: IFFALSE 11097
11083: GO 11085
11085: DISABLE
// begin ToLua ( displayStucuk(); ) ;
11086: LD_STRING displayStucuk();
11088: PPUSH
11089: CALL_OW 559
// ResetFog ;
11093: CALL_OW 335
// end ;
11097: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
11098: LD_EXP 8
11102: PUSH
11103: LD_EXP 40
11107: AND
11108: IFFALSE 11249
11110: GO 11112
11112: DISABLE
11113: LD_INT 0
11115: PPUSH
11116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11117: LD_ADDR_VAR 0 2
11121: PUSH
11122: LD_INT 22
11124: PUSH
11125: LD_OWVAR 2
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: PUSH
11134: LD_INT 21
11136: PUSH
11137: LD_INT 1
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: PPUSH
11148: CALL_OW 69
11152: ST_TO_ADDR
// if not tmp then
11153: LD_VAR 0 2
11157: NOT
11158: IFFALSE 11162
// exit ;
11160: GO 11249
// un := tmp [ rand ( 1 , tmp ) ] ;
11162: LD_ADDR_VAR 0 1
11166: PUSH
11167: LD_VAR 0 2
11171: PUSH
11172: LD_INT 1
11174: PPUSH
11175: LD_VAR 0 2
11179: PPUSH
11180: CALL_OW 12
11184: ARRAY
11185: ST_TO_ADDR
// SetSide ( un , 0 ) ;
11186: LD_VAR 0 1
11190: PPUSH
11191: LD_INT 0
11193: PPUSH
11194: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
11198: LD_VAR 0 1
11202: PPUSH
11203: LD_OWVAR 3
11207: PUSH
11208: LD_VAR 0 1
11212: DIFF
11213: PPUSH
11214: LD_VAR 0 1
11218: PPUSH
11219: CALL_OW 74
11223: PPUSH
11224: CALL_OW 115
// wait ( 0 0$20 ) ;
11228: LD_INT 700
11230: PPUSH
11231: CALL_OW 67
// SetSide ( un , your_side ) ;
11235: LD_VAR 0 1
11239: PPUSH
11240: LD_OWVAR 2
11244: PPUSH
11245: CALL_OW 235
// end ;
11249: PPOPN 2
11251: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
11252: LD_EXP 8
11256: PUSH
11257: LD_EXP 41
11261: AND
11262: IFFALSE 11368
11264: GO 11266
11266: DISABLE
11267: LD_INT 0
11269: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11270: LD_ADDR_VAR 0 1
11274: PUSH
11275: LD_INT 22
11277: PUSH
11278: LD_OWVAR 2
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: PUSH
11287: LD_INT 2
11289: PUSH
11290: LD_INT 30
11292: PUSH
11293: LD_INT 0
11295: PUSH
11296: EMPTY
11297: LIST
11298: LIST
11299: PUSH
11300: LD_INT 30
11302: PUSH
11303: LD_INT 1
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: LIST
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: PPUSH
11319: CALL_OW 69
11323: ST_TO_ADDR
// if not depot then
11324: LD_VAR 0 1
11328: NOT
11329: IFFALSE 11333
// exit ;
11331: GO 11368
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
11333: LD_VAR 0 1
11337: PUSH
11338: LD_INT 1
11340: ARRAY
11341: PPUSH
11342: CALL_OW 250
11346: PPUSH
11347: LD_VAR 0 1
11351: PUSH
11352: LD_INT 1
11354: ARRAY
11355: PPUSH
11356: CALL_OW 251
11360: PPUSH
11361: LD_INT 70
11363: PPUSH
11364: CALL_OW 495
// end ;
11368: PPOPN 1
11370: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
11371: LD_EXP 8
11375: PUSH
11376: LD_EXP 42
11380: AND
11381: IFFALSE 11592
11383: GO 11385
11385: DISABLE
11386: LD_INT 0
11388: PPUSH
11389: PPUSH
11390: PPUSH
11391: PPUSH
11392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11393: LD_ADDR_VAR 0 5
11397: PUSH
11398: LD_INT 22
11400: PUSH
11401: LD_OWVAR 2
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: PUSH
11410: LD_INT 21
11412: PUSH
11413: LD_INT 1
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PPUSH
11424: CALL_OW 69
11428: ST_TO_ADDR
// if not tmp then
11429: LD_VAR 0 5
11433: NOT
11434: IFFALSE 11438
// exit ;
11436: GO 11592
// for i in tmp do
11438: LD_ADDR_VAR 0 1
11442: PUSH
11443: LD_VAR 0 5
11447: PUSH
11448: FOR_IN
11449: IFFALSE 11590
// begin d := rand ( 0 , 5 ) ;
11451: LD_ADDR_VAR 0 4
11455: PUSH
11456: LD_INT 0
11458: PPUSH
11459: LD_INT 5
11461: PPUSH
11462: CALL_OW 12
11466: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
11467: LD_ADDR_VAR 0 2
11471: PUSH
11472: LD_VAR 0 1
11476: PPUSH
11477: CALL_OW 250
11481: PPUSH
11482: LD_VAR 0 4
11486: PPUSH
11487: LD_INT 3
11489: PPUSH
11490: LD_INT 12
11492: PPUSH
11493: CALL_OW 12
11497: PPUSH
11498: CALL_OW 272
11502: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11503: LD_ADDR_VAR 0 3
11507: PUSH
11508: LD_VAR 0 1
11512: PPUSH
11513: CALL_OW 251
11517: PPUSH
11518: LD_VAR 0 4
11522: PPUSH
11523: LD_INT 3
11525: PPUSH
11526: LD_INT 12
11528: PPUSH
11529: CALL_OW 12
11533: PPUSH
11534: CALL_OW 273
11538: ST_TO_ADDR
// if ValidHex ( x , y ) then
11539: LD_VAR 0 2
11543: PPUSH
11544: LD_VAR 0 3
11548: PPUSH
11549: CALL_OW 488
11553: IFFALSE 11588
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11555: LD_VAR 0 1
11559: PPUSH
11560: LD_VAR 0 2
11564: PPUSH
11565: LD_VAR 0 3
11569: PPUSH
11570: LD_INT 3
11572: PPUSH
11573: LD_INT 6
11575: PPUSH
11576: CALL_OW 12
11580: PPUSH
11581: LD_INT 1
11583: PPUSH
11584: CALL_OW 483
// end ;
11588: GO 11448
11590: POP
11591: POP
// end ;
11592: PPOPN 5
11594: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11595: LD_EXP 8
11599: PUSH
11600: LD_EXP 43
11604: AND
11605: IFFALSE 11699
11607: GO 11609
11609: DISABLE
11610: LD_INT 0
11612: PPUSH
11613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11614: LD_ADDR_VAR 0 2
11618: PUSH
11619: LD_INT 22
11621: PUSH
11622: LD_OWVAR 2
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PUSH
11631: LD_INT 32
11633: PUSH
11634: LD_INT 1
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: PUSH
11641: LD_INT 21
11643: PUSH
11644: LD_INT 2
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: LIST
11655: PPUSH
11656: CALL_OW 69
11660: ST_TO_ADDR
// if not tmp then
11661: LD_VAR 0 2
11665: NOT
11666: IFFALSE 11670
// exit ;
11668: GO 11699
// for i in tmp do
11670: LD_ADDR_VAR 0 1
11674: PUSH
11675: LD_VAR 0 2
11679: PUSH
11680: FOR_IN
11681: IFFALSE 11697
// SetFuel ( i , 0 ) ;
11683: LD_VAR 0 1
11687: PPUSH
11688: LD_INT 0
11690: PPUSH
11691: CALL_OW 240
11695: GO 11680
11697: POP
11698: POP
// end ;
11699: PPOPN 2
11701: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11702: LD_EXP 8
11706: PUSH
11707: LD_EXP 44
11711: AND
11712: IFFALSE 11778
11714: GO 11716
11716: DISABLE
11717: LD_INT 0
11719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11720: LD_ADDR_VAR 0 1
11724: PUSH
11725: LD_INT 22
11727: PUSH
11728: LD_OWVAR 2
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: PUSH
11737: LD_INT 30
11739: PUSH
11740: LD_INT 29
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PPUSH
11751: CALL_OW 69
11755: ST_TO_ADDR
// if not tmp then
11756: LD_VAR 0 1
11760: NOT
11761: IFFALSE 11765
// exit ;
11763: GO 11778
// DestroyUnit ( tmp [ 1 ] ) ;
11765: LD_VAR 0 1
11769: PUSH
11770: LD_INT 1
11772: ARRAY
11773: PPUSH
11774: CALL_OW 65
// end ;
11778: PPOPN 1
11780: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11781: LD_EXP 8
11785: PUSH
11786: LD_EXP 46
11790: AND
11791: IFFALSE 11920
11793: GO 11795
11795: DISABLE
11796: LD_INT 0
11798: PPUSH
// begin uc_side := 0 ;
11799: LD_ADDR_OWVAR 20
11803: PUSH
11804: LD_INT 0
11806: ST_TO_ADDR
// uc_nation := nation_arabian ;
11807: LD_ADDR_OWVAR 21
11811: PUSH
11812: LD_INT 2
11814: ST_TO_ADDR
// hc_gallery :=  ;
11815: LD_ADDR_OWVAR 33
11819: PUSH
11820: LD_STRING 
11822: ST_TO_ADDR
// hc_name :=  ;
11823: LD_ADDR_OWVAR 26
11827: PUSH
11828: LD_STRING 
11830: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11831: LD_INT 1
11833: PPUSH
11834: LD_INT 11
11836: PPUSH
11837: LD_INT 10
11839: PPUSH
11840: CALL_OW 380
// un := CreateHuman ;
11844: LD_ADDR_VAR 0 1
11848: PUSH
11849: CALL_OW 44
11853: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11854: LD_VAR 0 1
11858: PPUSH
11859: LD_INT 1
11861: PPUSH
11862: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11866: LD_INT 35
11868: PPUSH
11869: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11873: LD_VAR 0 1
11877: PPUSH
11878: LD_INT 22
11880: PUSH
11881: LD_OWVAR 2
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PPUSH
11890: CALL_OW 69
11894: PPUSH
11895: LD_VAR 0 1
11899: PPUSH
11900: CALL_OW 74
11904: PPUSH
11905: CALL_OW 115
// until IsDead ( un ) ;
11909: LD_VAR 0 1
11913: PPUSH
11914: CALL_OW 301
11918: IFFALSE 11866
// end ;
11920: PPOPN 1
11922: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
11923: LD_EXP 8
11927: PUSH
11928: LD_EXP 48
11932: AND
11933: IFFALSE 11945
11935: GO 11937
11937: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
11938: LD_STRING earthquake(getX(game), 0, 32)
11940: PPUSH
11941: CALL_OW 559
11945: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
11946: LD_EXP 8
11950: PUSH
11951: LD_EXP 49
11955: AND
11956: IFFALSE 12047
11958: GO 11960
11960: DISABLE
11961: LD_INT 0
11963: PPUSH
// begin enable ;
11964: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
11965: LD_ADDR_VAR 0 1
11969: PUSH
11970: LD_INT 22
11972: PUSH
11973: LD_OWVAR 2
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PUSH
11982: LD_INT 21
11984: PUSH
11985: LD_INT 2
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: PUSH
11992: LD_INT 33
11994: PUSH
11995: LD_INT 3
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: LIST
12006: PPUSH
12007: CALL_OW 69
12011: ST_TO_ADDR
// if not tmp then
12012: LD_VAR 0 1
12016: NOT
12017: IFFALSE 12021
// exit ;
12019: GO 12047
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12021: LD_VAR 0 1
12025: PUSH
12026: LD_INT 1
12028: PPUSH
12029: LD_VAR 0 1
12033: PPUSH
12034: CALL_OW 12
12038: ARRAY
12039: PPUSH
12040: LD_INT 1
12042: PPUSH
12043: CALL_OW 234
// end ;
12047: PPOPN 1
12049: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
12050: LD_EXP 8
12054: PUSH
12055: LD_EXP 50
12059: AND
12060: IFFALSE 12201
12062: GO 12064
12064: DISABLE
12065: LD_INT 0
12067: PPUSH
12068: PPUSH
12069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12070: LD_ADDR_VAR 0 3
12074: PUSH
12075: LD_INT 22
12077: PUSH
12078: LD_OWVAR 2
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: PUSH
12087: LD_INT 25
12089: PUSH
12090: LD_INT 1
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PPUSH
12101: CALL_OW 69
12105: ST_TO_ADDR
// if not tmp then
12106: LD_VAR 0 3
12110: NOT
12111: IFFALSE 12115
// exit ;
12113: GO 12201
// un := tmp [ rand ( 1 , tmp ) ] ;
12115: LD_ADDR_VAR 0 2
12119: PUSH
12120: LD_VAR 0 3
12124: PUSH
12125: LD_INT 1
12127: PPUSH
12128: LD_VAR 0 3
12132: PPUSH
12133: CALL_OW 12
12137: ARRAY
12138: ST_TO_ADDR
// if Crawls ( un ) then
12139: LD_VAR 0 2
12143: PPUSH
12144: CALL_OW 318
12148: IFFALSE 12159
// ComWalk ( un ) ;
12150: LD_VAR 0 2
12154: PPUSH
12155: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
12159: LD_VAR 0 2
12163: PPUSH
12164: LD_INT 9
12166: PPUSH
12167: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
12171: LD_INT 28
12173: PPUSH
12174: LD_OWVAR 2
12178: PPUSH
12179: LD_INT 2
12181: PPUSH
12182: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
12186: LD_INT 29
12188: PPUSH
12189: LD_OWVAR 2
12193: PPUSH
12194: LD_INT 2
12196: PPUSH
12197: CALL_OW 322
// end ;
12201: PPOPN 3
12203: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
12204: LD_EXP 8
12208: PUSH
12209: LD_EXP 51
12213: AND
12214: IFFALSE 12325
12216: GO 12218
12218: DISABLE
12219: LD_INT 0
12221: PPUSH
12222: PPUSH
12223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12224: LD_ADDR_VAR 0 3
12228: PUSH
12229: LD_INT 22
12231: PUSH
12232: LD_OWVAR 2
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PUSH
12241: LD_INT 25
12243: PUSH
12244: LD_INT 1
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PPUSH
12255: CALL_OW 69
12259: ST_TO_ADDR
// if not tmp then
12260: LD_VAR 0 3
12264: NOT
12265: IFFALSE 12269
// exit ;
12267: GO 12325
// un := tmp [ rand ( 1 , tmp ) ] ;
12269: LD_ADDR_VAR 0 2
12273: PUSH
12274: LD_VAR 0 3
12278: PUSH
12279: LD_INT 1
12281: PPUSH
12282: LD_VAR 0 3
12286: PPUSH
12287: CALL_OW 12
12291: ARRAY
12292: ST_TO_ADDR
// if Crawls ( un ) then
12293: LD_VAR 0 2
12297: PPUSH
12298: CALL_OW 318
12302: IFFALSE 12313
// ComWalk ( un ) ;
12304: LD_VAR 0 2
12308: PPUSH
12309: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12313: LD_VAR 0 2
12317: PPUSH
12318: LD_INT 8
12320: PPUSH
12321: CALL_OW 336
// end ;
12325: PPOPN 3
12327: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
12328: LD_EXP 8
12332: PUSH
12333: LD_EXP 52
12337: AND
12338: IFFALSE 12482
12340: GO 12342
12342: DISABLE
12343: LD_INT 0
12345: PPUSH
12346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
12347: LD_ADDR_VAR 0 2
12351: PUSH
12352: LD_INT 22
12354: PUSH
12355: LD_OWVAR 2
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: PUSH
12364: LD_INT 21
12366: PUSH
12367: LD_INT 2
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PUSH
12374: LD_INT 2
12376: PUSH
12377: LD_INT 34
12379: PUSH
12380: LD_INT 12
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: PUSH
12387: LD_INT 34
12389: PUSH
12390: LD_INT 51
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: PUSH
12397: LD_INT 34
12399: PUSH
12400: LD_INT 32
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: LIST
12417: PPUSH
12418: CALL_OW 69
12422: ST_TO_ADDR
// if not tmp then
12423: LD_VAR 0 2
12427: NOT
12428: IFFALSE 12432
// exit ;
12430: GO 12482
// for i in tmp do
12432: LD_ADDR_VAR 0 1
12436: PUSH
12437: LD_VAR 0 2
12441: PUSH
12442: FOR_IN
12443: IFFALSE 12480
// if GetCargo ( i , mat_artifact ) = 0 then
12445: LD_VAR 0 1
12449: PPUSH
12450: LD_INT 4
12452: PPUSH
12453: CALL_OW 289
12457: PUSH
12458: LD_INT 0
12460: EQUAL
12461: IFFALSE 12478
// SetCargo ( i , mat_siberit , 100 ) ;
12463: LD_VAR 0 1
12467: PPUSH
12468: LD_INT 3
12470: PPUSH
12471: LD_INT 100
12473: PPUSH
12474: CALL_OW 290
12478: GO 12442
12480: POP
12481: POP
// end ;
12482: PPOPN 2
12484: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12485: LD_EXP 8
12489: PUSH
12490: LD_EXP 53
12494: AND
12495: IFFALSE 12678
12497: GO 12499
12499: DISABLE
12500: LD_INT 0
12502: PPUSH
12503: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12504: LD_ADDR_VAR 0 2
12508: PUSH
12509: LD_INT 22
12511: PUSH
12512: LD_OWVAR 2
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PPUSH
12521: CALL_OW 69
12525: ST_TO_ADDR
// if not tmp then
12526: LD_VAR 0 2
12530: NOT
12531: IFFALSE 12535
// exit ;
12533: GO 12678
// for i := 1 to 2 do
12535: LD_ADDR_VAR 0 1
12539: PUSH
12540: DOUBLE
12541: LD_INT 1
12543: DEC
12544: ST_TO_ADDR
12545: LD_INT 2
12547: PUSH
12548: FOR_TO
12549: IFFALSE 12676
// begin uc_side := your_side ;
12551: LD_ADDR_OWVAR 20
12555: PUSH
12556: LD_OWVAR 2
12560: ST_TO_ADDR
// uc_nation := nation_american ;
12561: LD_ADDR_OWVAR 21
12565: PUSH
12566: LD_INT 1
12568: ST_TO_ADDR
// vc_chassis := us_morphling ;
12569: LD_ADDR_OWVAR 37
12573: PUSH
12574: LD_INT 5
12576: ST_TO_ADDR
// vc_engine := engine_siberite ;
12577: LD_ADDR_OWVAR 39
12581: PUSH
12582: LD_INT 3
12584: ST_TO_ADDR
// vc_control := control_computer ;
12585: LD_ADDR_OWVAR 38
12589: PUSH
12590: LD_INT 3
12592: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12593: LD_ADDR_OWVAR 40
12597: PUSH
12598: LD_INT 10
12600: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12601: LD_VAR 0 2
12605: PUSH
12606: LD_INT 1
12608: ARRAY
12609: PPUSH
12610: CALL_OW 310
12614: NOT
12615: IFFALSE 12662
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12617: CALL_OW 45
12621: PPUSH
12622: LD_VAR 0 2
12626: PUSH
12627: LD_INT 1
12629: ARRAY
12630: PPUSH
12631: CALL_OW 250
12635: PPUSH
12636: LD_VAR 0 2
12640: PUSH
12641: LD_INT 1
12643: ARRAY
12644: PPUSH
12645: CALL_OW 251
12649: PPUSH
12650: LD_INT 12
12652: PPUSH
12653: LD_INT 1
12655: PPUSH
12656: CALL_OW 50
12660: GO 12674
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12662: CALL_OW 45
12666: PPUSH
12667: LD_INT 1
12669: PPUSH
12670: CALL_OW 51
// end ;
12674: GO 12548
12676: POP
12677: POP
// end ;
12678: PPOPN 2
12680: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12681: LD_EXP 8
12685: PUSH
12686: LD_EXP 54
12690: AND
12691: IFFALSE 12913
12693: GO 12695
12695: DISABLE
12696: LD_INT 0
12698: PPUSH
12699: PPUSH
12700: PPUSH
12701: PPUSH
12702: PPUSH
12703: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12704: LD_ADDR_VAR 0 6
12708: PUSH
12709: LD_INT 22
12711: PUSH
12712: LD_OWVAR 2
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: PUSH
12721: LD_INT 21
12723: PUSH
12724: LD_INT 1
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: PUSH
12731: LD_INT 3
12733: PUSH
12734: LD_INT 23
12736: PUSH
12737: LD_INT 0
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: LIST
12752: PPUSH
12753: CALL_OW 69
12757: ST_TO_ADDR
// if not tmp then
12758: LD_VAR 0 6
12762: NOT
12763: IFFALSE 12767
// exit ;
12765: GO 12913
// s1 := rand ( 1 , 4 ) ;
12767: LD_ADDR_VAR 0 2
12771: PUSH
12772: LD_INT 1
12774: PPUSH
12775: LD_INT 4
12777: PPUSH
12778: CALL_OW 12
12782: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12783: LD_ADDR_VAR 0 4
12787: PUSH
12788: LD_VAR 0 6
12792: PUSH
12793: LD_INT 1
12795: ARRAY
12796: PPUSH
12797: LD_VAR 0 2
12801: PPUSH
12802: CALL_OW 259
12806: ST_TO_ADDR
// if s1 = 1 then
12807: LD_VAR 0 2
12811: PUSH
12812: LD_INT 1
12814: EQUAL
12815: IFFALSE 12835
// s2 := rand ( 2 , 4 ) else
12817: LD_ADDR_VAR 0 3
12821: PUSH
12822: LD_INT 2
12824: PPUSH
12825: LD_INT 4
12827: PPUSH
12828: CALL_OW 12
12832: ST_TO_ADDR
12833: GO 12843
// s2 := 1 ;
12835: LD_ADDR_VAR 0 3
12839: PUSH
12840: LD_INT 1
12842: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12843: LD_ADDR_VAR 0 5
12847: PUSH
12848: LD_VAR 0 6
12852: PUSH
12853: LD_INT 1
12855: ARRAY
12856: PPUSH
12857: LD_VAR 0 3
12861: PPUSH
12862: CALL_OW 259
12866: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12867: LD_VAR 0 6
12871: PUSH
12872: LD_INT 1
12874: ARRAY
12875: PPUSH
12876: LD_VAR 0 2
12880: PPUSH
12881: LD_VAR 0 5
12885: PPUSH
12886: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
12890: LD_VAR 0 6
12894: PUSH
12895: LD_INT 1
12897: ARRAY
12898: PPUSH
12899: LD_VAR 0 3
12903: PPUSH
12904: LD_VAR 0 4
12908: PPUSH
12909: CALL_OW 237
// end ;
12913: PPOPN 6
12915: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
12916: LD_EXP 8
12920: PUSH
12921: LD_EXP 55
12925: AND
12926: IFFALSE 13005
12928: GO 12930
12930: DISABLE
12931: LD_INT 0
12933: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
12934: LD_ADDR_VAR 0 1
12938: PUSH
12939: LD_INT 22
12941: PUSH
12942: LD_OWVAR 2
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PUSH
12951: LD_INT 30
12953: PUSH
12954: LD_INT 3
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: PUSH
12961: EMPTY
12962: LIST
12963: LIST
12964: PPUSH
12965: CALL_OW 69
12969: ST_TO_ADDR
// if not tmp then
12970: LD_VAR 0 1
12974: NOT
12975: IFFALSE 12979
// exit ;
12977: GO 13005
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12979: LD_VAR 0 1
12983: PUSH
12984: LD_INT 1
12986: PPUSH
12987: LD_VAR 0 1
12991: PPUSH
12992: CALL_OW 12
12996: ARRAY
12997: PPUSH
12998: LD_INT 1
13000: PPUSH
13001: CALL_OW 234
// end ;
13005: PPOPN 1
13007: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
13008: LD_EXP 8
13012: PUSH
13013: LD_EXP 56
13017: AND
13018: IFFALSE 13130
13020: GO 13022
13022: DISABLE
13023: LD_INT 0
13025: PPUSH
13026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
13027: LD_ADDR_VAR 0 2
13031: PUSH
13032: LD_INT 22
13034: PUSH
13035: LD_OWVAR 2
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: PUSH
13044: LD_INT 2
13046: PUSH
13047: LD_INT 30
13049: PUSH
13050: LD_INT 27
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PUSH
13057: LD_INT 30
13059: PUSH
13060: LD_INT 26
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: LD_INT 30
13069: PUSH
13070: LD_INT 28
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: PPUSH
13087: CALL_OW 69
13091: ST_TO_ADDR
// if not tmp then
13092: LD_VAR 0 2
13096: NOT
13097: IFFALSE 13101
// exit ;
13099: GO 13130
// for i in tmp do
13101: LD_ADDR_VAR 0 1
13105: PUSH
13106: LD_VAR 0 2
13110: PUSH
13111: FOR_IN
13112: IFFALSE 13128
// SetLives ( i , 1 ) ;
13114: LD_VAR 0 1
13118: PPUSH
13119: LD_INT 1
13121: PPUSH
13122: CALL_OW 234
13126: GO 13111
13128: POP
13129: POP
// end ;
13130: PPOPN 2
13132: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
13133: LD_EXP 8
13137: PUSH
13138: LD_EXP 57
13142: AND
13143: IFFALSE 13430
13145: GO 13147
13147: DISABLE
13148: LD_INT 0
13150: PPUSH
13151: PPUSH
13152: PPUSH
// begin i := rand ( 1 , 7 ) ;
13153: LD_ADDR_VAR 0 1
13157: PUSH
13158: LD_INT 1
13160: PPUSH
13161: LD_INT 7
13163: PPUSH
13164: CALL_OW 12
13168: ST_TO_ADDR
// case i of 1 :
13169: LD_VAR 0 1
13173: PUSH
13174: LD_INT 1
13176: DOUBLE
13177: EQUAL
13178: IFTRUE 13182
13180: GO 13192
13182: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
13183: LD_STRING earthquake(getX(game), 0, 32)
13185: PPUSH
13186: CALL_OW 559
13190: GO 13430
13192: LD_INT 2
13194: DOUBLE
13195: EQUAL
13196: IFTRUE 13200
13198: GO 13214
13200: POP
// begin ToLua ( displayStucuk(); ) ;
13201: LD_STRING displayStucuk();
13203: PPUSH
13204: CALL_OW 559
// ResetFog ;
13208: CALL_OW 335
// end ; 3 :
13212: GO 13430
13214: LD_INT 3
13216: DOUBLE
13217: EQUAL
13218: IFTRUE 13222
13220: GO 13326
13222: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13223: LD_ADDR_VAR 0 2
13227: PUSH
13228: LD_INT 22
13230: PUSH
13231: LD_OWVAR 2
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PUSH
13240: LD_INT 25
13242: PUSH
13243: LD_INT 1
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: PPUSH
13254: CALL_OW 69
13258: ST_TO_ADDR
// if not tmp then
13259: LD_VAR 0 2
13263: NOT
13264: IFFALSE 13268
// exit ;
13266: GO 13430
// un := tmp [ rand ( 1 , tmp ) ] ;
13268: LD_ADDR_VAR 0 3
13272: PUSH
13273: LD_VAR 0 2
13277: PUSH
13278: LD_INT 1
13280: PPUSH
13281: LD_VAR 0 2
13285: PPUSH
13286: CALL_OW 12
13290: ARRAY
13291: ST_TO_ADDR
// if Crawls ( un ) then
13292: LD_VAR 0 3
13296: PPUSH
13297: CALL_OW 318
13301: IFFALSE 13312
// ComWalk ( un ) ;
13303: LD_VAR 0 3
13307: PPUSH
13308: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13312: LD_VAR 0 3
13316: PPUSH
13317: LD_INT 8
13319: PPUSH
13320: CALL_OW 336
// end ; 4 :
13324: GO 13430
13326: LD_INT 4
13328: DOUBLE
13329: EQUAL
13330: IFTRUE 13334
13332: GO 13408
13334: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13335: LD_ADDR_VAR 0 2
13339: PUSH
13340: LD_INT 22
13342: PUSH
13343: LD_OWVAR 2
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: PUSH
13352: LD_INT 30
13354: PUSH
13355: LD_INT 29
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PPUSH
13366: CALL_OW 69
13370: ST_TO_ADDR
// if not tmp then
13371: LD_VAR 0 2
13375: NOT
13376: IFFALSE 13380
// exit ;
13378: GO 13430
// CenterNowOnUnits ( tmp [ 1 ] ) ;
13380: LD_VAR 0 2
13384: PUSH
13385: LD_INT 1
13387: ARRAY
13388: PPUSH
13389: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
13393: LD_VAR 0 2
13397: PUSH
13398: LD_INT 1
13400: ARRAY
13401: PPUSH
13402: CALL_OW 65
// end ; 5 .. 7 :
13406: GO 13430
13408: LD_INT 5
13410: DOUBLE
13411: GREATEREQUAL
13412: IFFALSE 13420
13414: LD_INT 7
13416: DOUBLE
13417: LESSEQUAL
13418: IFTRUE 13422
13420: GO 13429
13422: POP
// StreamSibBomb ; end ;
13423: CALL 9667 0 0
13427: GO 13430
13429: POP
// end ;
13430: PPOPN 3
13432: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
13433: LD_EXP 8
13437: PUSH
13438: LD_EXP 58
13442: AND
13443: IFFALSE 13599
13445: GO 13447
13447: DISABLE
13448: LD_INT 0
13450: PPUSH
13451: PPUSH
13452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13453: LD_ADDR_VAR 0 2
13457: PUSH
13458: LD_INT 81
13460: PUSH
13461: LD_OWVAR 2
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: PUSH
13470: LD_INT 2
13472: PUSH
13473: LD_INT 21
13475: PUSH
13476: LD_INT 1
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PUSH
13483: LD_INT 21
13485: PUSH
13486: LD_INT 2
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: LIST
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: PPUSH
13502: CALL_OW 69
13506: ST_TO_ADDR
// if not tmp then
13507: LD_VAR 0 2
13511: NOT
13512: IFFALSE 13516
// exit ;
13514: GO 13599
// p := 0 ;
13516: LD_ADDR_VAR 0 3
13520: PUSH
13521: LD_INT 0
13523: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13524: LD_INT 35
13526: PPUSH
13527: CALL_OW 67
// p := p + 1 ;
13531: LD_ADDR_VAR 0 3
13535: PUSH
13536: LD_VAR 0 3
13540: PUSH
13541: LD_INT 1
13543: PLUS
13544: ST_TO_ADDR
// for i in tmp do
13545: LD_ADDR_VAR 0 1
13549: PUSH
13550: LD_VAR 0 2
13554: PUSH
13555: FOR_IN
13556: IFFALSE 13587
// if GetLives ( i ) < 1000 then
13558: LD_VAR 0 1
13562: PPUSH
13563: CALL_OW 256
13567: PUSH
13568: LD_INT 1000
13570: LESS
13571: IFFALSE 13585
// SetLives ( i , 1000 ) ;
13573: LD_VAR 0 1
13577: PPUSH
13578: LD_INT 1000
13580: PPUSH
13581: CALL_OW 234
13585: GO 13555
13587: POP
13588: POP
// until p > 20 ;
13589: LD_VAR 0 3
13593: PUSH
13594: LD_INT 20
13596: GREATER
13597: IFFALSE 13524
// end ;
13599: PPOPN 3
13601: END
// every 0 0$1 trigger StreamModeActive and sTime do
13602: LD_EXP 8
13606: PUSH
13607: LD_EXP 59
13611: AND
13612: IFFALSE 13647
13614: GO 13616
13616: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13617: LD_INT 28
13619: PPUSH
13620: LD_OWVAR 2
13624: PPUSH
13625: LD_INT 2
13627: PPUSH
13628: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13632: LD_INT 30
13634: PPUSH
13635: LD_OWVAR 2
13639: PPUSH
13640: LD_INT 2
13642: PPUSH
13643: CALL_OW 322
// end ;
13647: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13648: LD_EXP 8
13652: PUSH
13653: LD_EXP 60
13657: AND
13658: IFFALSE 13779
13660: GO 13662
13662: DISABLE
13663: LD_INT 0
13665: PPUSH
13666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13667: LD_ADDR_VAR 0 2
13671: PUSH
13672: LD_INT 22
13674: PUSH
13675: LD_OWVAR 2
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: PUSH
13684: LD_INT 21
13686: PUSH
13687: LD_INT 1
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: PUSH
13694: LD_INT 3
13696: PUSH
13697: LD_INT 23
13699: PUSH
13700: LD_INT 0
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: LIST
13715: PPUSH
13716: CALL_OW 69
13720: ST_TO_ADDR
// if not tmp then
13721: LD_VAR 0 2
13725: NOT
13726: IFFALSE 13730
// exit ;
13728: GO 13779
// for i in tmp do
13730: LD_ADDR_VAR 0 1
13734: PUSH
13735: LD_VAR 0 2
13739: PUSH
13740: FOR_IN
13741: IFFALSE 13777
// begin if Crawls ( i ) then
13743: LD_VAR 0 1
13747: PPUSH
13748: CALL_OW 318
13752: IFFALSE 13763
// ComWalk ( i ) ;
13754: LD_VAR 0 1
13758: PPUSH
13759: CALL_OW 138
// SetClass ( i , 2 ) ;
13763: LD_VAR 0 1
13767: PPUSH
13768: LD_INT 2
13770: PPUSH
13771: CALL_OW 336
// end ;
13775: GO 13740
13777: POP
13778: POP
// end ;
13779: PPOPN 2
13781: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13782: LD_EXP 8
13786: PUSH
13787: LD_EXP 61
13791: AND
13792: IFFALSE 14080
13794: GO 13796
13796: DISABLE
13797: LD_INT 0
13799: PPUSH
13800: PPUSH
13801: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13802: LD_OWVAR 2
13806: PPUSH
13807: LD_INT 9
13809: PPUSH
13810: LD_INT 1
13812: PPUSH
13813: LD_INT 1
13815: PPUSH
13816: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13820: LD_INT 9
13822: PPUSH
13823: LD_OWVAR 2
13827: PPUSH
13828: CALL_OW 343
// uc_side := 9 ;
13832: LD_ADDR_OWVAR 20
13836: PUSH
13837: LD_INT 9
13839: ST_TO_ADDR
// uc_nation := 2 ;
13840: LD_ADDR_OWVAR 21
13844: PUSH
13845: LD_INT 2
13847: ST_TO_ADDR
// hc_name := Dark Warrior ;
13848: LD_ADDR_OWVAR 26
13852: PUSH
13853: LD_STRING Dark Warrior
13855: ST_TO_ADDR
// hc_gallery :=  ;
13856: LD_ADDR_OWVAR 33
13860: PUSH
13861: LD_STRING 
13863: ST_TO_ADDR
// hc_noskilllimit := true ;
13864: LD_ADDR_OWVAR 76
13868: PUSH
13869: LD_INT 1
13871: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
13872: LD_ADDR_OWVAR 31
13876: PUSH
13877: LD_INT 30
13879: PUSH
13880: LD_INT 30
13882: PUSH
13883: LD_INT 30
13885: PUSH
13886: LD_INT 30
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: ST_TO_ADDR
// un := CreateHuman ;
13895: LD_ADDR_VAR 0 3
13899: PUSH
13900: CALL_OW 44
13904: ST_TO_ADDR
// hc_noskilllimit := false ;
13905: LD_ADDR_OWVAR 76
13909: PUSH
13910: LD_INT 0
13912: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13913: LD_VAR 0 3
13917: PPUSH
13918: LD_INT 1
13920: PPUSH
13921: CALL_OW 51
// ToLua ( playRanger() ) ;
13925: LD_STRING playRanger()
13927: PPUSH
13928: CALL_OW 559
// p := 0 ;
13932: LD_ADDR_VAR 0 2
13936: PUSH
13937: LD_INT 0
13939: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13940: LD_INT 35
13942: PPUSH
13943: CALL_OW 67
// p := p + 1 ;
13947: LD_ADDR_VAR 0 2
13951: PUSH
13952: LD_VAR 0 2
13956: PUSH
13957: LD_INT 1
13959: PLUS
13960: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
13961: LD_VAR 0 3
13965: PPUSH
13966: CALL_OW 256
13970: PUSH
13971: LD_INT 1000
13973: LESS
13974: IFFALSE 13988
// SetLives ( un , 1000 ) ;
13976: LD_VAR 0 3
13980: PPUSH
13981: LD_INT 1000
13983: PPUSH
13984: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
13988: LD_VAR 0 3
13992: PPUSH
13993: LD_INT 81
13995: PUSH
13996: LD_OWVAR 2
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: PUSH
14005: LD_INT 91
14007: PUSH
14008: LD_VAR 0 3
14012: PUSH
14013: LD_INT 30
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: LIST
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: PPUSH
14025: CALL_OW 69
14029: PPUSH
14030: LD_VAR 0 3
14034: PPUSH
14035: CALL_OW 74
14039: PPUSH
14040: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
14044: LD_VAR 0 2
14048: PUSH
14049: LD_INT 80
14051: GREATER
14052: PUSH
14053: LD_VAR 0 3
14057: PPUSH
14058: CALL_OW 301
14062: OR
14063: IFFALSE 13940
// if un then
14065: LD_VAR 0 3
14069: IFFALSE 14080
// RemoveUnit ( un ) ;
14071: LD_VAR 0 3
14075: PPUSH
14076: CALL_OW 64
// end ;
14080: PPOPN 3
14082: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
14083: LD_EXP 62
14087: IFFALSE 14203
14089: GO 14091
14091: DISABLE
14092: LD_INT 0
14094: PPUSH
14095: PPUSH
14096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14097: LD_ADDR_VAR 0 2
14101: PUSH
14102: LD_INT 81
14104: PUSH
14105: LD_OWVAR 2
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PUSH
14114: LD_INT 21
14116: PUSH
14117: LD_INT 1
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: PPUSH
14128: CALL_OW 69
14132: ST_TO_ADDR
// ToLua ( playComputer() ) ;
14133: LD_STRING playComputer()
14135: PPUSH
14136: CALL_OW 559
// if not tmp then
14140: LD_VAR 0 2
14144: NOT
14145: IFFALSE 14149
// exit ;
14147: GO 14203
// for i in tmp do
14149: LD_ADDR_VAR 0 1
14153: PUSH
14154: LD_VAR 0 2
14158: PUSH
14159: FOR_IN
14160: IFFALSE 14201
// for j := 1 to 4 do
14162: LD_ADDR_VAR 0 3
14166: PUSH
14167: DOUBLE
14168: LD_INT 1
14170: DEC
14171: ST_TO_ADDR
14172: LD_INT 4
14174: PUSH
14175: FOR_TO
14176: IFFALSE 14197
// SetSkill ( i , j , 10 ) ;
14178: LD_VAR 0 1
14182: PPUSH
14183: LD_VAR 0 3
14187: PPUSH
14188: LD_INT 10
14190: PPUSH
14191: CALL_OW 237
14195: GO 14175
14197: POP
14198: POP
14199: GO 14159
14201: POP
14202: POP
// end ;
14203: PPOPN 3
14205: END
// every 0 0$1 trigger s30 do var i , tmp ;
14206: LD_EXP 63
14210: IFFALSE 14279
14212: GO 14214
14214: DISABLE
14215: LD_INT 0
14217: PPUSH
14218: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14219: LD_ADDR_VAR 0 2
14223: PUSH
14224: LD_INT 22
14226: PUSH
14227: LD_OWVAR 2
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PPUSH
14236: CALL_OW 69
14240: ST_TO_ADDR
// if not tmp then
14241: LD_VAR 0 2
14245: NOT
14246: IFFALSE 14250
// exit ;
14248: GO 14279
// for i in tmp do
14250: LD_ADDR_VAR 0 1
14254: PUSH
14255: LD_VAR 0 2
14259: PUSH
14260: FOR_IN
14261: IFFALSE 14277
// SetLives ( i , 300 ) ;
14263: LD_VAR 0 1
14267: PPUSH
14268: LD_INT 300
14270: PPUSH
14271: CALL_OW 234
14275: GO 14260
14277: POP
14278: POP
// end ;
14279: PPOPN 2
14281: END
// every 0 0$1 trigger s60 do var i , tmp ;
14282: LD_EXP 64
14286: IFFALSE 14355
14288: GO 14290
14290: DISABLE
14291: LD_INT 0
14293: PPUSH
14294: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14295: LD_ADDR_VAR 0 2
14299: PUSH
14300: LD_INT 22
14302: PUSH
14303: LD_OWVAR 2
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PPUSH
14312: CALL_OW 69
14316: ST_TO_ADDR
// if not tmp then
14317: LD_VAR 0 2
14321: NOT
14322: IFFALSE 14326
// exit ;
14324: GO 14355
// for i in tmp do
14326: LD_ADDR_VAR 0 1
14330: PUSH
14331: LD_VAR 0 2
14335: PUSH
14336: FOR_IN
14337: IFFALSE 14353
// SetLives ( i , 600 ) ;
14339: LD_VAR 0 1
14343: PPUSH
14344: LD_INT 600
14346: PPUSH
14347: CALL_OW 234
14351: GO 14336
14353: POP
14354: POP
// end ;
14355: PPOPN 2
14357: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14358: LD_INT 0
14360: PPUSH
// case cmd of 301 :
14361: LD_VAR 0 1
14365: PUSH
14366: LD_INT 301
14368: DOUBLE
14369: EQUAL
14370: IFTRUE 14374
14372: GO 14406
14374: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
14375: LD_VAR 0 6
14379: PPUSH
14380: LD_VAR 0 7
14384: PPUSH
14385: LD_VAR 0 8
14389: PPUSH
14390: LD_VAR 0 4
14394: PPUSH
14395: LD_VAR 0 5
14399: PPUSH
14400: CALL 15607 0 5
14404: GO 14527
14406: LD_INT 302
14408: DOUBLE
14409: EQUAL
14410: IFTRUE 14414
14412: GO 14451
14414: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
14415: LD_VAR 0 6
14419: PPUSH
14420: LD_VAR 0 7
14424: PPUSH
14425: LD_VAR 0 8
14429: PPUSH
14430: LD_VAR 0 9
14434: PPUSH
14435: LD_VAR 0 4
14439: PPUSH
14440: LD_VAR 0 5
14444: PPUSH
14445: CALL 15698 0 6
14449: GO 14527
14451: LD_INT 303
14453: DOUBLE
14454: EQUAL
14455: IFTRUE 14459
14457: GO 14496
14459: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
14460: LD_VAR 0 6
14464: PPUSH
14465: LD_VAR 0 7
14469: PPUSH
14470: LD_VAR 0 8
14474: PPUSH
14475: LD_VAR 0 9
14479: PPUSH
14480: LD_VAR 0 4
14484: PPUSH
14485: LD_VAR 0 5
14489: PPUSH
14490: CALL 14532 0 6
14494: GO 14527
14496: LD_INT 304
14498: DOUBLE
14499: EQUAL
14500: IFTRUE 14504
14502: GO 14526
14504: POP
// hHackTeleport ( unit , x , y ) ; end ;
14505: LD_VAR 0 2
14509: PPUSH
14510: LD_VAR 0 4
14514: PPUSH
14515: LD_VAR 0 5
14519: PPUSH
14520: CALL 16291 0 3
14524: GO 14527
14526: POP
// end ;
14527: LD_VAR 0 12
14531: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14532: LD_INT 0
14534: PPUSH
14535: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14536: LD_VAR 0 1
14540: PUSH
14541: LD_INT 1
14543: LESS
14544: PUSH
14545: LD_VAR 0 1
14549: PUSH
14550: LD_INT 3
14552: GREATER
14553: OR
14554: PUSH
14555: LD_VAR 0 5
14559: PPUSH
14560: LD_VAR 0 6
14564: PPUSH
14565: CALL_OW 428
14569: OR
14570: IFFALSE 14574
// exit ;
14572: GO 15294
// uc_side := your_side ;
14574: LD_ADDR_OWVAR 20
14578: PUSH
14579: LD_OWVAR 2
14583: ST_TO_ADDR
// uc_nation := nation ;
14584: LD_ADDR_OWVAR 21
14588: PUSH
14589: LD_VAR 0 1
14593: ST_TO_ADDR
// bc_level = 1 ;
14594: LD_ADDR_OWVAR 43
14598: PUSH
14599: LD_INT 1
14601: ST_TO_ADDR
// case btype of 1 :
14602: LD_VAR 0 2
14606: PUSH
14607: LD_INT 1
14609: DOUBLE
14610: EQUAL
14611: IFTRUE 14615
14613: GO 14626
14615: POP
// bc_type := b_depot ; 2 :
14616: LD_ADDR_OWVAR 42
14620: PUSH
14621: LD_INT 0
14623: ST_TO_ADDR
14624: GO 15238
14626: LD_INT 2
14628: DOUBLE
14629: EQUAL
14630: IFTRUE 14634
14632: GO 14645
14634: POP
// bc_type := b_warehouse ; 3 :
14635: LD_ADDR_OWVAR 42
14639: PUSH
14640: LD_INT 1
14642: ST_TO_ADDR
14643: GO 15238
14645: LD_INT 3
14647: DOUBLE
14648: EQUAL
14649: IFTRUE 14653
14651: GO 14664
14653: POP
// bc_type := b_lab ; 4 .. 9 :
14654: LD_ADDR_OWVAR 42
14658: PUSH
14659: LD_INT 6
14661: ST_TO_ADDR
14662: GO 15238
14664: LD_INT 4
14666: DOUBLE
14667: GREATEREQUAL
14668: IFFALSE 14676
14670: LD_INT 9
14672: DOUBLE
14673: LESSEQUAL
14674: IFTRUE 14678
14676: GO 14730
14678: POP
// begin bc_type := b_lab_half ;
14679: LD_ADDR_OWVAR 42
14683: PUSH
14684: LD_INT 7
14686: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14687: LD_ADDR_OWVAR 44
14691: PUSH
14692: LD_INT 10
14694: PUSH
14695: LD_INT 11
14697: PUSH
14698: LD_INT 12
14700: PUSH
14701: LD_INT 15
14703: PUSH
14704: LD_INT 14
14706: PUSH
14707: LD_INT 13
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: PUSH
14718: LD_VAR 0 2
14722: PUSH
14723: LD_INT 3
14725: MINUS
14726: ARRAY
14727: ST_TO_ADDR
// end ; 10 .. 13 :
14728: GO 15238
14730: LD_INT 10
14732: DOUBLE
14733: GREATEREQUAL
14734: IFFALSE 14742
14736: LD_INT 13
14738: DOUBLE
14739: LESSEQUAL
14740: IFTRUE 14744
14742: GO 14821
14744: POP
// begin bc_type := b_lab_full ;
14745: LD_ADDR_OWVAR 42
14749: PUSH
14750: LD_INT 8
14752: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14753: LD_ADDR_OWVAR 44
14757: PUSH
14758: LD_INT 10
14760: PUSH
14761: LD_INT 12
14763: PUSH
14764: LD_INT 14
14766: PUSH
14767: LD_INT 13
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: PUSH
14776: LD_VAR 0 2
14780: PUSH
14781: LD_INT 9
14783: MINUS
14784: ARRAY
14785: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14786: LD_ADDR_OWVAR 45
14790: PUSH
14791: LD_INT 11
14793: PUSH
14794: LD_INT 15
14796: PUSH
14797: LD_INT 12
14799: PUSH
14800: LD_INT 15
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: PUSH
14809: LD_VAR 0 2
14813: PUSH
14814: LD_INT 9
14816: MINUS
14817: ARRAY
14818: ST_TO_ADDR
// end ; 14 :
14819: GO 15238
14821: LD_INT 14
14823: DOUBLE
14824: EQUAL
14825: IFTRUE 14829
14827: GO 14840
14829: POP
// bc_type := b_workshop ; 15 :
14830: LD_ADDR_OWVAR 42
14834: PUSH
14835: LD_INT 2
14837: ST_TO_ADDR
14838: GO 15238
14840: LD_INT 15
14842: DOUBLE
14843: EQUAL
14844: IFTRUE 14848
14846: GO 14859
14848: POP
// bc_type := b_factory ; 16 :
14849: LD_ADDR_OWVAR 42
14853: PUSH
14854: LD_INT 3
14856: ST_TO_ADDR
14857: GO 15238
14859: LD_INT 16
14861: DOUBLE
14862: EQUAL
14863: IFTRUE 14867
14865: GO 14878
14867: POP
// bc_type := b_ext_gun ; 17 :
14868: LD_ADDR_OWVAR 42
14872: PUSH
14873: LD_INT 17
14875: ST_TO_ADDR
14876: GO 15238
14878: LD_INT 17
14880: DOUBLE
14881: EQUAL
14882: IFTRUE 14886
14884: GO 14914
14886: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
14887: LD_ADDR_OWVAR 42
14891: PUSH
14892: LD_INT 19
14894: PUSH
14895: LD_INT 23
14897: PUSH
14898: LD_INT 19
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: LIST
14905: PUSH
14906: LD_VAR 0 1
14910: ARRAY
14911: ST_TO_ADDR
14912: GO 15238
14914: LD_INT 18
14916: DOUBLE
14917: EQUAL
14918: IFTRUE 14922
14920: GO 14933
14922: POP
// bc_type := b_ext_radar ; 19 :
14923: LD_ADDR_OWVAR 42
14927: PUSH
14928: LD_INT 20
14930: ST_TO_ADDR
14931: GO 15238
14933: LD_INT 19
14935: DOUBLE
14936: EQUAL
14937: IFTRUE 14941
14939: GO 14952
14941: POP
// bc_type := b_ext_radio ; 20 :
14942: LD_ADDR_OWVAR 42
14946: PUSH
14947: LD_INT 22
14949: ST_TO_ADDR
14950: GO 15238
14952: LD_INT 20
14954: DOUBLE
14955: EQUAL
14956: IFTRUE 14960
14958: GO 14971
14960: POP
// bc_type := b_ext_siberium ; 21 :
14961: LD_ADDR_OWVAR 42
14965: PUSH
14966: LD_INT 21
14968: ST_TO_ADDR
14969: GO 15238
14971: LD_INT 21
14973: DOUBLE
14974: EQUAL
14975: IFTRUE 14979
14977: GO 14990
14979: POP
// bc_type := b_ext_computer ; 22 :
14980: LD_ADDR_OWVAR 42
14984: PUSH
14985: LD_INT 24
14987: ST_TO_ADDR
14988: GO 15238
14990: LD_INT 22
14992: DOUBLE
14993: EQUAL
14994: IFTRUE 14998
14996: GO 15009
14998: POP
// bc_type := b_ext_track ; 23 :
14999: LD_ADDR_OWVAR 42
15003: PUSH
15004: LD_INT 16
15006: ST_TO_ADDR
15007: GO 15238
15009: LD_INT 23
15011: DOUBLE
15012: EQUAL
15013: IFTRUE 15017
15015: GO 15028
15017: POP
// bc_type := b_ext_laser ; 24 :
15018: LD_ADDR_OWVAR 42
15022: PUSH
15023: LD_INT 25
15025: ST_TO_ADDR
15026: GO 15238
15028: LD_INT 24
15030: DOUBLE
15031: EQUAL
15032: IFTRUE 15036
15034: GO 15047
15036: POP
// bc_type := b_control_tower ; 25 :
15037: LD_ADDR_OWVAR 42
15041: PUSH
15042: LD_INT 36
15044: ST_TO_ADDR
15045: GO 15238
15047: LD_INT 25
15049: DOUBLE
15050: EQUAL
15051: IFTRUE 15055
15053: GO 15066
15055: POP
// bc_type := b_breastwork ; 26 :
15056: LD_ADDR_OWVAR 42
15060: PUSH
15061: LD_INT 31
15063: ST_TO_ADDR
15064: GO 15238
15066: LD_INT 26
15068: DOUBLE
15069: EQUAL
15070: IFTRUE 15074
15072: GO 15085
15074: POP
// bc_type := b_bunker ; 27 :
15075: LD_ADDR_OWVAR 42
15079: PUSH
15080: LD_INT 32
15082: ST_TO_ADDR
15083: GO 15238
15085: LD_INT 27
15087: DOUBLE
15088: EQUAL
15089: IFTRUE 15093
15091: GO 15104
15093: POP
// bc_type := b_turret ; 28 :
15094: LD_ADDR_OWVAR 42
15098: PUSH
15099: LD_INT 33
15101: ST_TO_ADDR
15102: GO 15238
15104: LD_INT 28
15106: DOUBLE
15107: EQUAL
15108: IFTRUE 15112
15110: GO 15123
15112: POP
// bc_type := b_armoury ; 29 :
15113: LD_ADDR_OWVAR 42
15117: PUSH
15118: LD_INT 4
15120: ST_TO_ADDR
15121: GO 15238
15123: LD_INT 29
15125: DOUBLE
15126: EQUAL
15127: IFTRUE 15131
15129: GO 15142
15131: POP
// bc_type := b_barracks ; 30 :
15132: LD_ADDR_OWVAR 42
15136: PUSH
15137: LD_INT 5
15139: ST_TO_ADDR
15140: GO 15238
15142: LD_INT 30
15144: DOUBLE
15145: EQUAL
15146: IFTRUE 15150
15148: GO 15161
15150: POP
// bc_type := b_solar_power ; 31 :
15151: LD_ADDR_OWVAR 42
15155: PUSH
15156: LD_INT 27
15158: ST_TO_ADDR
15159: GO 15238
15161: LD_INT 31
15163: DOUBLE
15164: EQUAL
15165: IFTRUE 15169
15167: GO 15180
15169: POP
// bc_type := b_oil_power ; 32 :
15170: LD_ADDR_OWVAR 42
15174: PUSH
15175: LD_INT 26
15177: ST_TO_ADDR
15178: GO 15238
15180: LD_INT 32
15182: DOUBLE
15183: EQUAL
15184: IFTRUE 15188
15186: GO 15199
15188: POP
// bc_type := b_siberite_power ; 33 :
15189: LD_ADDR_OWVAR 42
15193: PUSH
15194: LD_INT 28
15196: ST_TO_ADDR
15197: GO 15238
15199: LD_INT 33
15201: DOUBLE
15202: EQUAL
15203: IFTRUE 15207
15205: GO 15218
15207: POP
// bc_type := b_oil_mine ; 34 :
15208: LD_ADDR_OWVAR 42
15212: PUSH
15213: LD_INT 29
15215: ST_TO_ADDR
15216: GO 15238
15218: LD_INT 34
15220: DOUBLE
15221: EQUAL
15222: IFTRUE 15226
15224: GO 15237
15226: POP
// bc_type := b_siberite_mine ; end ;
15227: LD_ADDR_OWVAR 42
15231: PUSH
15232: LD_INT 30
15234: ST_TO_ADDR
15235: GO 15238
15237: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
15238: LD_ADDR_VAR 0 8
15242: PUSH
15243: LD_VAR 0 5
15247: PPUSH
15248: LD_VAR 0 6
15252: PPUSH
15253: LD_VAR 0 3
15257: PPUSH
15258: CALL_OW 47
15262: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
15263: LD_OWVAR 42
15267: PUSH
15268: LD_INT 32
15270: PUSH
15271: LD_INT 33
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: IN
15278: IFFALSE 15294
// PlaceWeaponTurret ( b , weapon ) ;
15280: LD_VAR 0 8
15284: PPUSH
15285: LD_VAR 0 4
15289: PPUSH
15290: CALL_OW 431
// end ;
15294: LD_VAR 0 7
15298: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
15299: LD_INT 0
15301: PPUSH
15302: PPUSH
15303: PPUSH
15304: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15305: LD_ADDR_VAR 0 4
15309: PUSH
15310: LD_INT 22
15312: PUSH
15313: LD_OWVAR 2
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PUSH
15322: LD_INT 2
15324: PUSH
15325: LD_INT 30
15327: PUSH
15328: LD_INT 0
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: PUSH
15335: LD_INT 30
15337: PUSH
15338: LD_INT 1
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: LIST
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: PPUSH
15354: CALL_OW 69
15358: ST_TO_ADDR
// if not tmp then
15359: LD_VAR 0 4
15363: NOT
15364: IFFALSE 15368
// exit ;
15366: GO 15427
// for i in tmp do
15368: LD_ADDR_VAR 0 2
15372: PUSH
15373: LD_VAR 0 4
15377: PUSH
15378: FOR_IN
15379: IFFALSE 15425
// for j = 1 to 3 do
15381: LD_ADDR_VAR 0 3
15385: PUSH
15386: DOUBLE
15387: LD_INT 1
15389: DEC
15390: ST_TO_ADDR
15391: LD_INT 3
15393: PUSH
15394: FOR_TO
15395: IFFALSE 15421
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
15397: LD_VAR 0 2
15401: PPUSH
15402: CALL_OW 274
15406: PPUSH
15407: LD_VAR 0 3
15411: PPUSH
15412: LD_INT 99999
15414: PPUSH
15415: CALL_OW 277
15419: GO 15394
15421: POP
15422: POP
15423: GO 15378
15425: POP
15426: POP
// end ;
15427: LD_VAR 0 1
15431: RET
// export function hHackSetLevel10 ; var i , j ; begin
15432: LD_INT 0
15434: PPUSH
15435: PPUSH
15436: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15437: LD_ADDR_VAR 0 2
15441: PUSH
15442: LD_INT 21
15444: PUSH
15445: LD_INT 1
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: PPUSH
15452: CALL_OW 69
15456: PUSH
15457: FOR_IN
15458: IFFALSE 15510
// if IsSelected ( i ) then
15460: LD_VAR 0 2
15464: PPUSH
15465: CALL_OW 306
15469: IFFALSE 15508
// begin for j := 1 to 4 do
15471: LD_ADDR_VAR 0 3
15475: PUSH
15476: DOUBLE
15477: LD_INT 1
15479: DEC
15480: ST_TO_ADDR
15481: LD_INT 4
15483: PUSH
15484: FOR_TO
15485: IFFALSE 15506
// SetSkill ( i , j , 10 ) ;
15487: LD_VAR 0 2
15491: PPUSH
15492: LD_VAR 0 3
15496: PPUSH
15497: LD_INT 10
15499: PPUSH
15500: CALL_OW 237
15504: GO 15484
15506: POP
15507: POP
// end ;
15508: GO 15457
15510: POP
15511: POP
// end ;
15512: LD_VAR 0 1
15516: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15517: LD_INT 0
15519: PPUSH
15520: PPUSH
15521: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15522: LD_ADDR_VAR 0 2
15526: PUSH
15527: LD_INT 22
15529: PUSH
15530: LD_OWVAR 2
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PUSH
15539: LD_INT 21
15541: PUSH
15542: LD_INT 1
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: PPUSH
15553: CALL_OW 69
15557: PUSH
15558: FOR_IN
15559: IFFALSE 15600
// begin for j := 1 to 4 do
15561: LD_ADDR_VAR 0 3
15565: PUSH
15566: DOUBLE
15567: LD_INT 1
15569: DEC
15570: ST_TO_ADDR
15571: LD_INT 4
15573: PUSH
15574: FOR_TO
15575: IFFALSE 15596
// SetSkill ( i , j , 10 ) ;
15577: LD_VAR 0 2
15581: PPUSH
15582: LD_VAR 0 3
15586: PPUSH
15587: LD_INT 10
15589: PPUSH
15590: CALL_OW 237
15594: GO 15574
15596: POP
15597: POP
// end ;
15598: GO 15558
15600: POP
15601: POP
// end ;
15602: LD_VAR 0 1
15606: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15607: LD_INT 0
15609: PPUSH
// uc_side := your_side ;
15610: LD_ADDR_OWVAR 20
15614: PUSH
15615: LD_OWVAR 2
15619: ST_TO_ADDR
// uc_nation := nation ;
15620: LD_ADDR_OWVAR 21
15624: PUSH
15625: LD_VAR 0 1
15629: ST_TO_ADDR
// InitHc ;
15630: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15634: LD_INT 0
15636: PPUSH
15637: LD_VAR 0 2
15641: PPUSH
15642: LD_VAR 0 3
15646: PPUSH
15647: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15651: LD_VAR 0 4
15655: PPUSH
15656: LD_VAR 0 5
15660: PPUSH
15661: CALL_OW 428
15665: PUSH
15666: LD_INT 0
15668: EQUAL
15669: IFFALSE 15693
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15671: CALL_OW 44
15675: PPUSH
15676: LD_VAR 0 4
15680: PPUSH
15681: LD_VAR 0 5
15685: PPUSH
15686: LD_INT 1
15688: PPUSH
15689: CALL_OW 48
// end ;
15693: LD_VAR 0 6
15697: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15698: LD_INT 0
15700: PPUSH
15701: PPUSH
// uc_side := your_side ;
15702: LD_ADDR_OWVAR 20
15706: PUSH
15707: LD_OWVAR 2
15711: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15712: LD_VAR 0 1
15716: PUSH
15717: LD_INT 1
15719: PUSH
15720: LD_INT 2
15722: PUSH
15723: LD_INT 3
15725: PUSH
15726: LD_INT 4
15728: PUSH
15729: LD_INT 5
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: IN
15739: IFFALSE 15751
// uc_nation := nation_american else
15741: LD_ADDR_OWVAR 21
15745: PUSH
15746: LD_INT 1
15748: ST_TO_ADDR
15749: GO 15794
// if chassis in [ 11 , 12 , 13 , 14 ] then
15751: LD_VAR 0 1
15755: PUSH
15756: LD_INT 11
15758: PUSH
15759: LD_INT 12
15761: PUSH
15762: LD_INT 13
15764: PUSH
15765: LD_INT 14
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: IN
15774: IFFALSE 15786
// uc_nation := nation_arabian else
15776: LD_ADDR_OWVAR 21
15780: PUSH
15781: LD_INT 2
15783: ST_TO_ADDR
15784: GO 15794
// uc_nation := nation_russian ;
15786: LD_ADDR_OWVAR 21
15790: PUSH
15791: LD_INT 3
15793: ST_TO_ADDR
// vc_chassis := chassis ;
15794: LD_ADDR_OWVAR 37
15798: PUSH
15799: LD_VAR 0 1
15803: ST_TO_ADDR
// vc_engine := engine ;
15804: LD_ADDR_OWVAR 39
15808: PUSH
15809: LD_VAR 0 2
15813: ST_TO_ADDR
// vc_control := control ;
15814: LD_ADDR_OWVAR 38
15818: PUSH
15819: LD_VAR 0 3
15823: ST_TO_ADDR
// vc_weapon := weapon ;
15824: LD_ADDR_OWVAR 40
15828: PUSH
15829: LD_VAR 0 4
15833: ST_TO_ADDR
// un := CreateVehicle ;
15834: LD_ADDR_VAR 0 8
15838: PUSH
15839: CALL_OW 45
15843: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15844: LD_VAR 0 8
15848: PPUSH
15849: LD_INT 0
15851: PPUSH
15852: LD_INT 5
15854: PPUSH
15855: CALL_OW 12
15859: PPUSH
15860: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
15864: LD_VAR 0 8
15868: PPUSH
15869: LD_VAR 0 5
15873: PPUSH
15874: LD_VAR 0 6
15878: PPUSH
15879: LD_INT 1
15881: PPUSH
15882: CALL_OW 48
// end ;
15886: LD_VAR 0 7
15890: RET
// export hInvincible ; every 1 do
15891: GO 15893
15893: DISABLE
// hInvincible := [ ] ;
15894: LD_ADDR_EXP 65
15898: PUSH
15899: EMPTY
15900: ST_TO_ADDR
15901: END
// every 10 do var i ;
15902: GO 15904
15904: DISABLE
15905: LD_INT 0
15907: PPUSH
// begin enable ;
15908: ENABLE
// if not hInvincible then
15909: LD_EXP 65
15913: NOT
15914: IFFALSE 15918
// exit ;
15916: GO 15962
// for i in hInvincible do
15918: LD_ADDR_VAR 0 1
15922: PUSH
15923: LD_EXP 65
15927: PUSH
15928: FOR_IN
15929: IFFALSE 15960
// if GetLives ( i ) < 1000 then
15931: LD_VAR 0 1
15935: PPUSH
15936: CALL_OW 256
15940: PUSH
15941: LD_INT 1000
15943: LESS
15944: IFFALSE 15958
// SetLives ( i , 1000 ) ;
15946: LD_VAR 0 1
15950: PPUSH
15951: LD_INT 1000
15953: PPUSH
15954: CALL_OW 234
15958: GO 15928
15960: POP
15961: POP
// end ;
15962: PPOPN 1
15964: END
// export function hHackInvincible ; var i ; begin
15965: LD_INT 0
15967: PPUSH
15968: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15969: LD_ADDR_VAR 0 2
15973: PUSH
15974: LD_INT 2
15976: PUSH
15977: LD_INT 21
15979: PUSH
15980: LD_INT 1
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: PUSH
15987: LD_INT 21
15989: PUSH
15990: LD_INT 2
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: LIST
16001: PPUSH
16002: CALL_OW 69
16006: PUSH
16007: FOR_IN
16008: IFFALSE 16069
// if IsSelected ( i ) then
16010: LD_VAR 0 2
16014: PPUSH
16015: CALL_OW 306
16019: IFFALSE 16067
// begin if i in hInvincible then
16021: LD_VAR 0 2
16025: PUSH
16026: LD_EXP 65
16030: IN
16031: IFFALSE 16051
// hInvincible := hInvincible diff i else
16033: LD_ADDR_EXP 65
16037: PUSH
16038: LD_EXP 65
16042: PUSH
16043: LD_VAR 0 2
16047: DIFF
16048: ST_TO_ADDR
16049: GO 16067
// hInvincible := hInvincible union i ;
16051: LD_ADDR_EXP 65
16055: PUSH
16056: LD_EXP 65
16060: PUSH
16061: LD_VAR 0 2
16065: UNION
16066: ST_TO_ADDR
// end ;
16067: GO 16007
16069: POP
16070: POP
// end ;
16071: LD_VAR 0 1
16075: RET
// export function hHackInvisible ; var i , j ; begin
16076: LD_INT 0
16078: PPUSH
16079: PPUSH
16080: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16081: LD_ADDR_VAR 0 2
16085: PUSH
16086: LD_INT 21
16088: PUSH
16089: LD_INT 1
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: PPUSH
16096: CALL_OW 69
16100: PUSH
16101: FOR_IN
16102: IFFALSE 16126
// if IsSelected ( i ) then
16104: LD_VAR 0 2
16108: PPUSH
16109: CALL_OW 306
16113: IFFALSE 16124
// ComForceInvisible ( i ) ;
16115: LD_VAR 0 2
16119: PPUSH
16120: CALL_OW 496
16124: GO 16101
16126: POP
16127: POP
// end ;
16128: LD_VAR 0 1
16132: RET
// export function hHackChangeYourSide ; begin
16133: LD_INT 0
16135: PPUSH
// if your_side = 8 then
16136: LD_OWVAR 2
16140: PUSH
16141: LD_INT 8
16143: EQUAL
16144: IFFALSE 16156
// your_side := 0 else
16146: LD_ADDR_OWVAR 2
16150: PUSH
16151: LD_INT 0
16153: ST_TO_ADDR
16154: GO 16170
// your_side := your_side + 1 ;
16156: LD_ADDR_OWVAR 2
16160: PUSH
16161: LD_OWVAR 2
16165: PUSH
16166: LD_INT 1
16168: PLUS
16169: ST_TO_ADDR
// end ;
16170: LD_VAR 0 1
16174: RET
// export function hHackChangeUnitSide ; var i , j ; begin
16175: LD_INT 0
16177: PPUSH
16178: PPUSH
16179: PPUSH
// for i in all_units do
16180: LD_ADDR_VAR 0 2
16184: PUSH
16185: LD_OWVAR 3
16189: PUSH
16190: FOR_IN
16191: IFFALSE 16269
// if IsSelected ( i ) then
16193: LD_VAR 0 2
16197: PPUSH
16198: CALL_OW 306
16202: IFFALSE 16267
// begin j := GetSide ( i ) ;
16204: LD_ADDR_VAR 0 3
16208: PUSH
16209: LD_VAR 0 2
16213: PPUSH
16214: CALL_OW 255
16218: ST_TO_ADDR
// if j = 8 then
16219: LD_VAR 0 3
16223: PUSH
16224: LD_INT 8
16226: EQUAL
16227: IFFALSE 16239
// j := 0 else
16229: LD_ADDR_VAR 0 3
16233: PUSH
16234: LD_INT 0
16236: ST_TO_ADDR
16237: GO 16253
// j := j + 1 ;
16239: LD_ADDR_VAR 0 3
16243: PUSH
16244: LD_VAR 0 3
16248: PUSH
16249: LD_INT 1
16251: PLUS
16252: ST_TO_ADDR
// SetSide ( i , j ) ;
16253: LD_VAR 0 2
16257: PPUSH
16258: LD_VAR 0 3
16262: PPUSH
16263: CALL_OW 235
// end ;
16267: GO 16190
16269: POP
16270: POP
// end ;
16271: LD_VAR 0 1
16275: RET
// export function hHackFog ; begin
16276: LD_INT 0
16278: PPUSH
// FogOff ( true ) ;
16279: LD_INT 1
16281: PPUSH
16282: CALL_OW 344
// end ;
16286: LD_VAR 0 1
16290: RET
// export function hHackTeleport ( unit , x , y ) ; begin
16291: LD_INT 0
16293: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
16294: LD_VAR 0 1
16298: PPUSH
16299: LD_VAR 0 2
16303: PPUSH
16304: LD_VAR 0 3
16308: PPUSH
16309: LD_INT 1
16311: PPUSH
16312: LD_INT 1
16314: PPUSH
16315: CALL_OW 483
// CenterOnXY ( x , y ) ;
16319: LD_VAR 0 2
16323: PPUSH
16324: LD_VAR 0 3
16328: PPUSH
16329: CALL_OW 84
// end ;
16333: LD_VAR 0 4
16337: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
16338: LD_INT 0
16340: PPUSH
16341: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
16342: LD_VAR 0 1
16346: NOT
16347: PUSH
16348: LD_VAR 0 2
16352: PPUSH
16353: LD_VAR 0 3
16357: PPUSH
16358: CALL_OW 488
16362: NOT
16363: OR
16364: PUSH
16365: LD_VAR 0 1
16369: PPUSH
16370: CALL_OW 266
16374: PUSH
16375: LD_INT 3
16377: NONEQUAL
16378: PUSH
16379: LD_VAR 0 1
16383: PPUSH
16384: CALL_OW 247
16388: PUSH
16389: LD_INT 1
16391: EQUAL
16392: NOT
16393: AND
16394: OR
16395: IFFALSE 16399
// exit ;
16397: GO 16548
// if GetType ( factory ) = unit_human then
16399: LD_VAR 0 1
16403: PPUSH
16404: CALL_OW 247
16408: PUSH
16409: LD_INT 1
16411: EQUAL
16412: IFFALSE 16429
// factory := IsInUnit ( factory ) ;
16414: LD_ADDR_VAR 0 1
16418: PUSH
16419: LD_VAR 0 1
16423: PPUSH
16424: CALL_OW 310
16428: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
16429: LD_VAR 0 1
16433: PPUSH
16434: CALL_OW 266
16438: PUSH
16439: LD_INT 3
16441: NONEQUAL
16442: IFFALSE 16446
// exit ;
16444: GO 16548
// if HexInfo ( x , y ) = factory then
16446: LD_VAR 0 2
16450: PPUSH
16451: LD_VAR 0 3
16455: PPUSH
16456: CALL_OW 428
16460: PUSH
16461: LD_VAR 0 1
16465: EQUAL
16466: IFFALSE 16493
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
16468: LD_ADDR_EXP 66
16472: PUSH
16473: LD_EXP 66
16477: PPUSH
16478: LD_VAR 0 1
16482: PPUSH
16483: LD_INT 0
16485: PPUSH
16486: CALL_OW 1
16490: ST_TO_ADDR
16491: GO 16544
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
16493: LD_ADDR_EXP 66
16497: PUSH
16498: LD_EXP 66
16502: PPUSH
16503: LD_VAR 0 1
16507: PPUSH
16508: LD_VAR 0 1
16512: PPUSH
16513: CALL_OW 255
16517: PUSH
16518: LD_VAR 0 1
16522: PUSH
16523: LD_VAR 0 2
16527: PUSH
16528: LD_VAR 0 3
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: PPUSH
16539: CALL_OW 1
16543: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16544: CALL 16553 0 0
// end ;
16548: LD_VAR 0 4
16552: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16553: LD_INT 0
16555: PPUSH
16556: PPUSH
16557: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16558: LD_STRING resetFactoryWaypoint();
16560: PPUSH
16561: CALL_OW 559
// if factoryWaypoints then
16565: LD_EXP 66
16569: IFFALSE 16695
// begin list := PrepareArray ( factoryWaypoints ) ;
16571: LD_ADDR_VAR 0 3
16575: PUSH
16576: LD_EXP 66
16580: PPUSH
16581: CALL 63327 0 1
16585: ST_TO_ADDR
// for i := 1 to list do
16586: LD_ADDR_VAR 0 2
16590: PUSH
16591: DOUBLE
16592: LD_INT 1
16594: DEC
16595: ST_TO_ADDR
16596: LD_VAR 0 3
16600: PUSH
16601: FOR_TO
16602: IFFALSE 16693
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16604: LD_STRING setFactoryWaypointXY(
16606: PUSH
16607: LD_VAR 0 3
16611: PUSH
16612: LD_VAR 0 2
16616: ARRAY
16617: PUSH
16618: LD_INT 1
16620: ARRAY
16621: STR
16622: PUSH
16623: LD_STRING ,
16625: STR
16626: PUSH
16627: LD_VAR 0 3
16631: PUSH
16632: LD_VAR 0 2
16636: ARRAY
16637: PUSH
16638: LD_INT 2
16640: ARRAY
16641: STR
16642: PUSH
16643: LD_STRING ,
16645: STR
16646: PUSH
16647: LD_VAR 0 3
16651: PUSH
16652: LD_VAR 0 2
16656: ARRAY
16657: PUSH
16658: LD_INT 3
16660: ARRAY
16661: STR
16662: PUSH
16663: LD_STRING ,
16665: STR
16666: PUSH
16667: LD_VAR 0 3
16671: PUSH
16672: LD_VAR 0 2
16676: ARRAY
16677: PUSH
16678: LD_INT 4
16680: ARRAY
16681: STR
16682: PUSH
16683: LD_STRING )
16685: STR
16686: PPUSH
16687: CALL_OW 559
16691: GO 16601
16693: POP
16694: POP
// end ; end ;
16695: LD_VAR 0 1
16699: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16700: LD_INT 0
16702: PPUSH
// if HexInfo ( x , y ) = warehouse then
16703: LD_VAR 0 2
16707: PPUSH
16708: LD_VAR 0 3
16712: PPUSH
16713: CALL_OW 428
16717: PUSH
16718: LD_VAR 0 1
16722: EQUAL
16723: IFFALSE 16750
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
16725: LD_ADDR_EXP 67
16729: PUSH
16730: LD_EXP 67
16734: PPUSH
16735: LD_VAR 0 1
16739: PPUSH
16740: LD_INT 0
16742: PPUSH
16743: CALL_OW 1
16747: ST_TO_ADDR
16748: GO 16801
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
16750: LD_ADDR_EXP 67
16754: PUSH
16755: LD_EXP 67
16759: PPUSH
16760: LD_VAR 0 1
16764: PPUSH
16765: LD_VAR 0 1
16769: PPUSH
16770: CALL_OW 255
16774: PUSH
16775: LD_VAR 0 1
16779: PUSH
16780: LD_VAR 0 2
16784: PUSH
16785: LD_VAR 0 3
16789: PUSH
16790: EMPTY
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: PPUSH
16796: CALL_OW 1
16800: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
16801: CALL 16810 0 0
// end ;
16805: LD_VAR 0 4
16809: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
16810: LD_INT 0
16812: PPUSH
16813: PPUSH
16814: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
16815: LD_STRING resetWarehouseGatheringPoints();
16817: PPUSH
16818: CALL_OW 559
// if warehouseGatheringPoints then
16822: LD_EXP 67
16826: IFFALSE 16952
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
16828: LD_ADDR_VAR 0 3
16832: PUSH
16833: LD_EXP 67
16837: PPUSH
16838: CALL 63327 0 1
16842: ST_TO_ADDR
// for i := 1 to list do
16843: LD_ADDR_VAR 0 2
16847: PUSH
16848: DOUBLE
16849: LD_INT 1
16851: DEC
16852: ST_TO_ADDR
16853: LD_VAR 0 3
16857: PUSH
16858: FOR_TO
16859: IFFALSE 16950
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16861: LD_STRING setWarehouseGatheringPointXY(
16863: PUSH
16864: LD_VAR 0 3
16868: PUSH
16869: LD_VAR 0 2
16873: ARRAY
16874: PUSH
16875: LD_INT 1
16877: ARRAY
16878: STR
16879: PUSH
16880: LD_STRING ,
16882: STR
16883: PUSH
16884: LD_VAR 0 3
16888: PUSH
16889: LD_VAR 0 2
16893: ARRAY
16894: PUSH
16895: LD_INT 2
16897: ARRAY
16898: STR
16899: PUSH
16900: LD_STRING ,
16902: STR
16903: PUSH
16904: LD_VAR 0 3
16908: PUSH
16909: LD_VAR 0 2
16913: ARRAY
16914: PUSH
16915: LD_INT 3
16917: ARRAY
16918: STR
16919: PUSH
16920: LD_STRING ,
16922: STR
16923: PUSH
16924: LD_VAR 0 3
16928: PUSH
16929: LD_VAR 0 2
16933: ARRAY
16934: PUSH
16935: LD_INT 4
16937: ARRAY
16938: STR
16939: PUSH
16940: LD_STRING )
16942: STR
16943: PPUSH
16944: CALL_OW 559
16948: GO 16858
16950: POP
16951: POP
// end ; end ;
16952: LD_VAR 0 1
16956: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
16957: LD_EXP 67
16961: IFFALSE 17646
16963: GO 16965
16965: DISABLE
16966: LD_INT 0
16968: PPUSH
16969: PPUSH
16970: PPUSH
16971: PPUSH
16972: PPUSH
16973: PPUSH
16974: PPUSH
16975: PPUSH
16976: PPUSH
// begin enable ;
16977: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
16978: LD_ADDR_VAR 0 3
16982: PUSH
16983: LD_EXP 67
16987: PPUSH
16988: CALL 63327 0 1
16992: ST_TO_ADDR
// if not list then
16993: LD_VAR 0 3
16997: NOT
16998: IFFALSE 17002
// exit ;
17000: GO 17646
// for i := 1 to list do
17002: LD_ADDR_VAR 0 1
17006: PUSH
17007: DOUBLE
17008: LD_INT 1
17010: DEC
17011: ST_TO_ADDR
17012: LD_VAR 0 3
17016: PUSH
17017: FOR_TO
17018: IFFALSE 17644
// begin depot := list [ i ] [ 2 ] ;
17020: LD_ADDR_VAR 0 8
17024: PUSH
17025: LD_VAR 0 3
17029: PUSH
17030: LD_VAR 0 1
17034: ARRAY
17035: PUSH
17036: LD_INT 2
17038: ARRAY
17039: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
17040: LD_ADDR_VAR 0 5
17044: PUSH
17045: LD_VAR 0 3
17049: PUSH
17050: LD_VAR 0 1
17054: ARRAY
17055: PUSH
17056: LD_INT 1
17058: ARRAY
17059: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
17060: LD_VAR 0 8
17064: PPUSH
17065: CALL_OW 301
17069: PUSH
17070: LD_VAR 0 5
17074: PUSH
17075: LD_VAR 0 8
17079: PPUSH
17080: CALL_OW 255
17084: NONEQUAL
17085: OR
17086: IFFALSE 17115
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
17088: LD_ADDR_EXP 67
17092: PUSH
17093: LD_EXP 67
17097: PPUSH
17098: LD_VAR 0 8
17102: PPUSH
17103: LD_INT 0
17105: PPUSH
17106: CALL_OW 1
17110: ST_TO_ADDR
// exit ;
17111: POP
17112: POP
17113: GO 17646
// end ; x := list [ i ] [ 3 ] ;
17115: LD_ADDR_VAR 0 6
17119: PUSH
17120: LD_VAR 0 3
17124: PUSH
17125: LD_VAR 0 1
17129: ARRAY
17130: PUSH
17131: LD_INT 3
17133: ARRAY
17134: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
17135: LD_ADDR_VAR 0 7
17139: PUSH
17140: LD_VAR 0 3
17144: PUSH
17145: LD_VAR 0 1
17149: ARRAY
17150: PUSH
17151: LD_INT 4
17153: ARRAY
17154: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
17155: LD_ADDR_VAR 0 9
17159: PUSH
17160: LD_VAR 0 6
17164: PPUSH
17165: LD_VAR 0 7
17169: PPUSH
17170: LD_INT 16
17172: PPUSH
17173: CALL 61915 0 3
17177: ST_TO_ADDR
// if not cratesNearbyPoint then
17178: LD_VAR 0 9
17182: NOT
17183: IFFALSE 17189
// exit ;
17185: POP
17186: POP
17187: GO 17646
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
17189: LD_ADDR_VAR 0 4
17193: PUSH
17194: LD_INT 22
17196: PUSH
17197: LD_VAR 0 5
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: LD_INT 3
17208: PUSH
17209: LD_INT 60
17211: PUSH
17212: EMPTY
17213: LIST
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PUSH
17219: LD_INT 91
17221: PUSH
17222: LD_VAR 0 8
17226: PUSH
17227: LD_INT 6
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: LIST
17234: PUSH
17235: LD_INT 2
17237: PUSH
17238: LD_INT 25
17240: PUSH
17241: LD_INT 2
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PUSH
17248: LD_INT 25
17250: PUSH
17251: LD_INT 16
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: LIST
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: PPUSH
17269: CALL_OW 69
17273: PUSH
17274: LD_VAR 0 8
17278: PPUSH
17279: CALL_OW 313
17283: PPUSH
17284: LD_INT 3
17286: PUSH
17287: LD_INT 60
17289: PUSH
17290: EMPTY
17291: LIST
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 2
17299: PUSH
17300: LD_INT 25
17302: PUSH
17303: LD_INT 2
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: LD_INT 25
17312: PUSH
17313: LD_INT 16
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: LIST
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PPUSH
17329: CALL_OW 72
17333: UNION
17334: ST_TO_ADDR
// if tmp then
17335: LD_VAR 0 4
17339: IFFALSE 17419
// begin tmp := ShrinkArray ( tmp , 3 ) ;
17341: LD_ADDR_VAR 0 4
17345: PUSH
17346: LD_VAR 0 4
17350: PPUSH
17351: LD_INT 3
17353: PPUSH
17354: CALL 59884 0 2
17358: ST_TO_ADDR
// for j in tmp do
17359: LD_ADDR_VAR 0 2
17363: PUSH
17364: LD_VAR 0 4
17368: PUSH
17369: FOR_IN
17370: IFFALSE 17413
// begin if IsInUnit ( j ) then
17372: LD_VAR 0 2
17376: PPUSH
17377: CALL_OW 310
17381: IFFALSE 17392
// ComExit ( j ) ;
17383: LD_VAR 0 2
17387: PPUSH
17388: CALL 59967 0 1
// AddComCollect ( j , x , y ) ;
17392: LD_VAR 0 2
17396: PPUSH
17397: LD_VAR 0 6
17401: PPUSH
17402: LD_VAR 0 7
17406: PPUSH
17407: CALL_OW 177
// end ;
17411: GO 17369
17413: POP
17414: POP
// exit ;
17415: POP
17416: POP
17417: GO 17646
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
17419: LD_ADDR_VAR 0 4
17423: PUSH
17424: LD_INT 22
17426: PUSH
17427: LD_VAR 0 5
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: LD_INT 91
17438: PUSH
17439: LD_VAR 0 8
17443: PUSH
17444: LD_INT 8
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: LIST
17451: PUSH
17452: LD_INT 2
17454: PUSH
17455: LD_INT 34
17457: PUSH
17458: LD_INT 12
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: PUSH
17465: LD_INT 34
17467: PUSH
17468: LD_INT 51
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: LD_INT 34
17477: PUSH
17478: LD_INT 32
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PUSH
17485: LD_INT 34
17487: PUSH
17488: LD_INT 89
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: LIST
17506: PPUSH
17507: CALL_OW 69
17511: ST_TO_ADDR
// if tmp then
17512: LD_VAR 0 4
17516: IFFALSE 17642
// begin for j in tmp do
17518: LD_ADDR_VAR 0 2
17522: PUSH
17523: LD_VAR 0 4
17527: PUSH
17528: FOR_IN
17529: IFFALSE 17640
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
17531: LD_VAR 0 2
17535: PPUSH
17536: CALL_OW 262
17540: PUSH
17541: LD_INT 3
17543: EQUAL
17544: PUSH
17545: LD_VAR 0 2
17549: PPUSH
17550: CALL_OW 261
17554: PUSH
17555: LD_INT 20
17557: GREATER
17558: OR
17559: PUSH
17560: LD_VAR 0 2
17564: PPUSH
17565: CALL_OW 314
17569: NOT
17570: AND
17571: PUSH
17572: LD_VAR 0 2
17576: PPUSH
17577: CALL_OW 263
17581: PUSH
17582: LD_INT 1
17584: NONEQUAL
17585: PUSH
17586: LD_VAR 0 2
17590: PPUSH
17591: CALL_OW 311
17595: OR
17596: AND
17597: IFFALSE 17638
// begin ComCollect ( j , x , y ) ;
17599: LD_VAR 0 2
17603: PPUSH
17604: LD_VAR 0 6
17608: PPUSH
17609: LD_VAR 0 7
17613: PPUSH
17614: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
17618: LD_VAR 0 2
17622: PPUSH
17623: LD_VAR 0 8
17627: PPUSH
17628: CALL_OW 172
// exit ;
17632: POP
17633: POP
17634: POP
17635: POP
17636: GO 17646
// end ;
17638: GO 17528
17640: POP
17641: POP
// end ; end ;
17642: GO 17017
17644: POP
17645: POP
// end ; end_of_file
17646: PPOPN 9
17648: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
17649: LD_VAR 0 1
17653: PUSH
17654: LD_INT 200
17656: DOUBLE
17657: GREATEREQUAL
17658: IFFALSE 17666
17660: LD_INT 299
17662: DOUBLE
17663: LESSEQUAL
17664: IFTRUE 17668
17666: GO 17700
17668: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
17669: LD_VAR 0 1
17673: PPUSH
17674: LD_VAR 0 2
17678: PPUSH
17679: LD_VAR 0 3
17683: PPUSH
17684: LD_VAR 0 4
17688: PPUSH
17689: LD_VAR 0 5
17693: PPUSH
17694: CALL 18188 0 5
17698: GO 17777
17700: LD_INT 300
17702: DOUBLE
17703: GREATEREQUAL
17704: IFFALSE 17712
17706: LD_INT 399
17708: DOUBLE
17709: LESSEQUAL
17710: IFTRUE 17714
17712: GO 17776
17714: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
17715: LD_VAR 0 1
17719: PPUSH
17720: LD_VAR 0 2
17724: PPUSH
17725: LD_VAR 0 3
17729: PPUSH
17730: LD_VAR 0 4
17734: PPUSH
17735: LD_VAR 0 5
17739: PPUSH
17740: LD_VAR 0 6
17744: PPUSH
17745: LD_VAR 0 7
17749: PPUSH
17750: LD_VAR 0 8
17754: PPUSH
17755: LD_VAR 0 9
17759: PPUSH
17760: LD_VAR 0 10
17764: PPUSH
17765: LD_VAR 0 11
17769: PPUSH
17770: CALL 14358 0 11
17774: GO 17777
17776: POP
// end ;
17777: PPOPN 11
17779: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
17780: LD_VAR 0 1
17784: PPUSH
17785: LD_VAR 0 2
17789: PPUSH
17790: LD_VAR 0 3
17794: PPUSH
17795: LD_VAR 0 4
17799: PPUSH
17800: LD_VAR 0 5
17804: PPUSH
17805: CALL 17924 0 5
// end ; end_of_file
17809: PPOPN 5
17811: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
17812: LD_INT 0
17814: PPUSH
17815: PPUSH
17816: PPUSH
17817: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
17818: LD_VAR 0 1
17822: PPUSH
17823: CALL_OW 264
17827: PUSH
17828: LD_INT 91
17830: EQUAL
17831: IFFALSE 17903
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
17833: LD_INT 68
17835: PPUSH
17836: LD_VAR 0 1
17840: PPUSH
17841: CALL_OW 255
17845: PPUSH
17846: CALL_OW 321
17850: PUSH
17851: LD_INT 2
17853: EQUAL
17854: IFFALSE 17866
// eff := 70 else
17856: LD_ADDR_VAR 0 4
17860: PUSH
17861: LD_INT 70
17863: ST_TO_ADDR
17864: GO 17874
// eff := 30 ;
17866: LD_ADDR_VAR 0 4
17870: PUSH
17871: LD_INT 30
17873: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17874: LD_VAR 0 1
17878: PPUSH
17879: CALL_OW 250
17883: PPUSH
17884: LD_VAR 0 1
17888: PPUSH
17889: CALL_OW 251
17893: PPUSH
17894: LD_VAR 0 4
17898: PPUSH
17899: CALL_OW 495
// end ; end ;
17903: LD_VAR 0 2
17907: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
17908: LD_INT 0
17910: PPUSH
// end ;
17911: LD_VAR 0 4
17915: RET
// export function SOS_Command ( cmd ) ; begin
17916: LD_INT 0
17918: PPUSH
// end ;
17919: LD_VAR 0 2
17923: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
17924: LD_INT 0
17926: PPUSH
// end ;
17927: LD_VAR 0 6
17931: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
17932: LD_INT 0
17934: PPUSH
17935: PPUSH
// if not vehicle or not factory then
17936: LD_VAR 0 1
17940: NOT
17941: PUSH
17942: LD_VAR 0 2
17946: NOT
17947: OR
17948: IFFALSE 17952
// exit ;
17950: GO 18183
// if factoryWaypoints >= factory then
17952: LD_EXP 66
17956: PUSH
17957: LD_VAR 0 2
17961: GREATEREQUAL
17962: IFFALSE 18183
// if factoryWaypoints [ factory ] then
17964: LD_EXP 66
17968: PUSH
17969: LD_VAR 0 2
17973: ARRAY
17974: IFFALSE 18183
// begin if GetControl ( vehicle ) = control_manual then
17976: LD_VAR 0 1
17980: PPUSH
17981: CALL_OW 263
17985: PUSH
17986: LD_INT 1
17988: EQUAL
17989: IFFALSE 18070
// begin driver := IsDrivenBy ( vehicle ) ;
17991: LD_ADDR_VAR 0 4
17995: PUSH
17996: LD_VAR 0 1
18000: PPUSH
18001: CALL_OW 311
18005: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
18006: LD_VAR 0 4
18010: PPUSH
18011: LD_EXP 66
18015: PUSH
18016: LD_VAR 0 2
18020: ARRAY
18021: PUSH
18022: LD_INT 3
18024: ARRAY
18025: PPUSH
18026: LD_EXP 66
18030: PUSH
18031: LD_VAR 0 2
18035: ARRAY
18036: PUSH
18037: LD_INT 4
18039: ARRAY
18040: PPUSH
18041: CALL_OW 171
// AddComExitVehicle ( driver ) ;
18045: LD_VAR 0 4
18049: PPUSH
18050: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
18054: LD_VAR 0 4
18058: PPUSH
18059: LD_VAR 0 2
18063: PPUSH
18064: CALL_OW 180
// end else
18068: GO 18183
// if GetControl ( vehicle ) = control_remote then
18070: LD_VAR 0 1
18074: PPUSH
18075: CALL_OW 263
18079: PUSH
18080: LD_INT 2
18082: EQUAL
18083: IFFALSE 18144
// begin wait ( 0 0$2 ) ;
18085: LD_INT 70
18087: PPUSH
18088: CALL_OW 67
// if Connect ( vehicle ) then
18092: LD_VAR 0 1
18096: PPUSH
18097: CALL 30207 0 1
18101: IFFALSE 18142
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
18103: LD_VAR 0 1
18107: PPUSH
18108: LD_EXP 66
18112: PUSH
18113: LD_VAR 0 2
18117: ARRAY
18118: PUSH
18119: LD_INT 3
18121: ARRAY
18122: PPUSH
18123: LD_EXP 66
18127: PUSH
18128: LD_VAR 0 2
18132: ARRAY
18133: PUSH
18134: LD_INT 4
18136: ARRAY
18137: PPUSH
18138: CALL_OW 171
// end else
18142: GO 18183
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
18144: LD_VAR 0 1
18148: PPUSH
18149: LD_EXP 66
18153: PUSH
18154: LD_VAR 0 2
18158: ARRAY
18159: PUSH
18160: LD_INT 3
18162: ARRAY
18163: PPUSH
18164: LD_EXP 66
18168: PUSH
18169: LD_VAR 0 2
18173: ARRAY
18174: PUSH
18175: LD_INT 4
18177: ARRAY
18178: PPUSH
18179: CALL_OW 171
// end ; end ;
18183: LD_VAR 0 3
18187: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18188: LD_INT 0
18190: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18191: LD_VAR 0 1
18195: PUSH
18196: LD_INT 250
18198: EQUAL
18199: PUSH
18200: LD_VAR 0 2
18204: PPUSH
18205: CALL_OW 264
18209: PUSH
18210: LD_INT 81
18212: EQUAL
18213: AND
18214: IFFALSE 18235
// MinerPlaceMine ( unit , x , y ) ;
18216: LD_VAR 0 2
18220: PPUSH
18221: LD_VAR 0 4
18225: PPUSH
18226: LD_VAR 0 5
18230: PPUSH
18231: CALL 20620 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18235: LD_VAR 0 1
18239: PUSH
18240: LD_INT 251
18242: EQUAL
18243: PUSH
18244: LD_VAR 0 2
18248: PPUSH
18249: CALL_OW 264
18253: PUSH
18254: LD_INT 81
18256: EQUAL
18257: AND
18258: IFFALSE 18279
// MinerDetonateMine ( unit , x , y ) ;
18260: LD_VAR 0 2
18264: PPUSH
18265: LD_VAR 0 4
18269: PPUSH
18270: LD_VAR 0 5
18274: PPUSH
18275: CALL 20895 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18279: LD_VAR 0 1
18283: PUSH
18284: LD_INT 252
18286: EQUAL
18287: PUSH
18288: LD_VAR 0 2
18292: PPUSH
18293: CALL_OW 264
18297: PUSH
18298: LD_INT 81
18300: EQUAL
18301: AND
18302: IFFALSE 18323
// MinerCreateMinefield ( unit , x , y ) ;
18304: LD_VAR 0 2
18308: PPUSH
18309: LD_VAR 0 4
18313: PPUSH
18314: LD_VAR 0 5
18318: PPUSH
18319: CALL 21312 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18323: LD_VAR 0 1
18327: PUSH
18328: LD_INT 253
18330: EQUAL
18331: PUSH
18332: LD_VAR 0 2
18336: PPUSH
18337: CALL_OW 257
18341: PUSH
18342: LD_INT 5
18344: EQUAL
18345: AND
18346: IFFALSE 18367
// ComBinocular ( unit , x , y ) ;
18348: LD_VAR 0 2
18352: PPUSH
18353: LD_VAR 0 4
18357: PPUSH
18358: LD_VAR 0 5
18362: PPUSH
18363: CALL 21681 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18367: LD_VAR 0 1
18371: PUSH
18372: LD_INT 254
18374: EQUAL
18375: PUSH
18376: LD_VAR 0 2
18380: PPUSH
18381: CALL_OW 264
18385: PUSH
18386: LD_INT 99
18388: EQUAL
18389: AND
18390: PUSH
18391: LD_VAR 0 3
18395: PPUSH
18396: CALL_OW 263
18400: PUSH
18401: LD_INT 3
18403: EQUAL
18404: AND
18405: IFFALSE 18421
// HackDestroyVehicle ( unit , selectedUnit ) ;
18407: LD_VAR 0 2
18411: PPUSH
18412: LD_VAR 0 3
18416: PPUSH
18417: CALL 19984 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18421: LD_VAR 0 1
18425: PUSH
18426: LD_INT 255
18428: EQUAL
18429: PUSH
18430: LD_VAR 0 2
18434: PPUSH
18435: CALL_OW 264
18439: PUSH
18440: LD_INT 14
18442: PUSH
18443: LD_INT 53
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: IN
18450: AND
18451: PUSH
18452: LD_VAR 0 4
18456: PPUSH
18457: LD_VAR 0 5
18461: PPUSH
18462: CALL_OW 488
18466: AND
18467: IFFALSE 18491
// CutTreeXYR ( unit , x , y , 12 ) ;
18469: LD_VAR 0 2
18473: PPUSH
18474: LD_VAR 0 4
18478: PPUSH
18479: LD_VAR 0 5
18483: PPUSH
18484: LD_INT 12
18486: PPUSH
18487: CALL 18554 0 4
// if cmd = 256 then
18491: LD_VAR 0 1
18495: PUSH
18496: LD_INT 256
18498: EQUAL
18499: IFFALSE 18520
// SetFactoryWaypoint ( unit , x , y ) ;
18501: LD_VAR 0 2
18505: PPUSH
18506: LD_VAR 0 4
18510: PPUSH
18511: LD_VAR 0 5
18515: PPUSH
18516: CALL 16338 0 3
// if cmd = 257 then
18520: LD_VAR 0 1
18524: PUSH
18525: LD_INT 257
18527: EQUAL
18528: IFFALSE 18549
// SetWarehouseGatheringPoint ( unit , x , y ) ;
18530: LD_VAR 0 2
18534: PPUSH
18535: LD_VAR 0 4
18539: PPUSH
18540: LD_VAR 0 5
18544: PPUSH
18545: CALL 16700 0 3
// end ;
18549: LD_VAR 0 6
18553: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18554: LD_INT 0
18556: PPUSH
18557: PPUSH
18558: PPUSH
18559: PPUSH
18560: PPUSH
18561: PPUSH
18562: PPUSH
18563: PPUSH
18564: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18565: LD_VAR 0 1
18569: NOT
18570: PUSH
18571: LD_VAR 0 2
18575: PPUSH
18576: LD_VAR 0 3
18580: PPUSH
18581: CALL_OW 488
18585: NOT
18586: OR
18587: PUSH
18588: LD_VAR 0 4
18592: NOT
18593: OR
18594: IFFALSE 18598
// exit ;
18596: GO 18938
// list := [ ] ;
18598: LD_ADDR_VAR 0 13
18602: PUSH
18603: EMPTY
18604: ST_TO_ADDR
// if x - r < 0 then
18605: LD_VAR 0 2
18609: PUSH
18610: LD_VAR 0 4
18614: MINUS
18615: PUSH
18616: LD_INT 0
18618: LESS
18619: IFFALSE 18631
// min_x := 0 else
18621: LD_ADDR_VAR 0 7
18625: PUSH
18626: LD_INT 0
18628: ST_TO_ADDR
18629: GO 18647
// min_x := x - r ;
18631: LD_ADDR_VAR 0 7
18635: PUSH
18636: LD_VAR 0 2
18640: PUSH
18641: LD_VAR 0 4
18645: MINUS
18646: ST_TO_ADDR
// if y - r < 0 then
18647: LD_VAR 0 3
18651: PUSH
18652: LD_VAR 0 4
18656: MINUS
18657: PUSH
18658: LD_INT 0
18660: LESS
18661: IFFALSE 18673
// min_y := 0 else
18663: LD_ADDR_VAR 0 8
18667: PUSH
18668: LD_INT 0
18670: ST_TO_ADDR
18671: GO 18689
// min_y := y - r ;
18673: LD_ADDR_VAR 0 8
18677: PUSH
18678: LD_VAR 0 3
18682: PUSH
18683: LD_VAR 0 4
18687: MINUS
18688: ST_TO_ADDR
// max_x := x + r ;
18689: LD_ADDR_VAR 0 9
18693: PUSH
18694: LD_VAR 0 2
18698: PUSH
18699: LD_VAR 0 4
18703: PLUS
18704: ST_TO_ADDR
// max_y := y + r ;
18705: LD_ADDR_VAR 0 10
18709: PUSH
18710: LD_VAR 0 3
18714: PUSH
18715: LD_VAR 0 4
18719: PLUS
18720: ST_TO_ADDR
// for _x = min_x to max_x do
18721: LD_ADDR_VAR 0 11
18725: PUSH
18726: DOUBLE
18727: LD_VAR 0 7
18731: DEC
18732: ST_TO_ADDR
18733: LD_VAR 0 9
18737: PUSH
18738: FOR_TO
18739: IFFALSE 18856
// for _y = min_y to max_y do
18741: LD_ADDR_VAR 0 12
18745: PUSH
18746: DOUBLE
18747: LD_VAR 0 8
18751: DEC
18752: ST_TO_ADDR
18753: LD_VAR 0 10
18757: PUSH
18758: FOR_TO
18759: IFFALSE 18852
// begin if not ValidHex ( _x , _y ) then
18761: LD_VAR 0 11
18765: PPUSH
18766: LD_VAR 0 12
18770: PPUSH
18771: CALL_OW 488
18775: NOT
18776: IFFALSE 18780
// continue ;
18778: GO 18758
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18780: LD_VAR 0 11
18784: PPUSH
18785: LD_VAR 0 12
18789: PPUSH
18790: CALL_OW 351
18794: PUSH
18795: LD_VAR 0 11
18799: PPUSH
18800: LD_VAR 0 12
18804: PPUSH
18805: CALL_OW 554
18809: AND
18810: IFFALSE 18850
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18812: LD_ADDR_VAR 0 13
18816: PUSH
18817: LD_VAR 0 13
18821: PPUSH
18822: LD_VAR 0 13
18826: PUSH
18827: LD_INT 1
18829: PLUS
18830: PPUSH
18831: LD_VAR 0 11
18835: PUSH
18836: LD_VAR 0 12
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PPUSH
18845: CALL_OW 2
18849: ST_TO_ADDR
// end ;
18850: GO 18758
18852: POP
18853: POP
18854: GO 18738
18856: POP
18857: POP
// if not list then
18858: LD_VAR 0 13
18862: NOT
18863: IFFALSE 18867
// exit ;
18865: GO 18938
// for i in list do
18867: LD_ADDR_VAR 0 6
18871: PUSH
18872: LD_VAR 0 13
18876: PUSH
18877: FOR_IN
18878: IFFALSE 18936
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18880: LD_VAR 0 1
18884: PPUSH
18885: LD_STRING M
18887: PUSH
18888: LD_VAR 0 6
18892: PUSH
18893: LD_INT 1
18895: ARRAY
18896: PUSH
18897: LD_VAR 0 6
18901: PUSH
18902: LD_INT 2
18904: ARRAY
18905: PUSH
18906: LD_INT 0
18908: PUSH
18909: LD_INT 0
18911: PUSH
18912: LD_INT 0
18914: PUSH
18915: LD_INT 0
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: PUSH
18927: EMPTY
18928: LIST
18929: PPUSH
18930: CALL_OW 447
18934: GO 18877
18936: POP
18937: POP
// end ;
18938: LD_VAR 0 5
18942: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18943: LD_EXP 69
18947: NOT
18948: IFFALSE 18998
18950: GO 18952
18952: DISABLE
// begin initHack := true ;
18953: LD_ADDR_EXP 69
18957: PUSH
18958: LD_INT 1
18960: ST_TO_ADDR
// hackTanks := [ ] ;
18961: LD_ADDR_EXP 70
18965: PUSH
18966: EMPTY
18967: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18968: LD_ADDR_EXP 71
18972: PUSH
18973: EMPTY
18974: ST_TO_ADDR
// hackLimit := 3 ;
18975: LD_ADDR_EXP 72
18979: PUSH
18980: LD_INT 3
18982: ST_TO_ADDR
// hackDist := 12 ;
18983: LD_ADDR_EXP 73
18987: PUSH
18988: LD_INT 12
18990: ST_TO_ADDR
// hackCounter := [ ] ;
18991: LD_ADDR_EXP 74
18995: PUSH
18996: EMPTY
18997: ST_TO_ADDR
// end ;
18998: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18999: LD_EXP 69
19003: PUSH
19004: LD_INT 34
19006: PUSH
19007: LD_INT 99
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PPUSH
19014: CALL_OW 69
19018: AND
19019: IFFALSE 19272
19021: GO 19023
19023: DISABLE
19024: LD_INT 0
19026: PPUSH
19027: PPUSH
// begin enable ;
19028: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19029: LD_ADDR_VAR 0 1
19033: PUSH
19034: LD_INT 34
19036: PUSH
19037: LD_INT 99
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: PPUSH
19044: CALL_OW 69
19048: PUSH
19049: FOR_IN
19050: IFFALSE 19270
// begin if not i in hackTanks then
19052: LD_VAR 0 1
19056: PUSH
19057: LD_EXP 70
19061: IN
19062: NOT
19063: IFFALSE 19146
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19065: LD_ADDR_EXP 70
19069: PUSH
19070: LD_EXP 70
19074: PPUSH
19075: LD_EXP 70
19079: PUSH
19080: LD_INT 1
19082: PLUS
19083: PPUSH
19084: LD_VAR 0 1
19088: PPUSH
19089: CALL_OW 1
19093: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19094: LD_ADDR_EXP 71
19098: PUSH
19099: LD_EXP 71
19103: PPUSH
19104: LD_EXP 71
19108: PUSH
19109: LD_INT 1
19111: PLUS
19112: PPUSH
19113: EMPTY
19114: PPUSH
19115: CALL_OW 1
19119: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19120: LD_ADDR_EXP 74
19124: PUSH
19125: LD_EXP 74
19129: PPUSH
19130: LD_EXP 74
19134: PUSH
19135: LD_INT 1
19137: PLUS
19138: PPUSH
19139: EMPTY
19140: PPUSH
19141: CALL_OW 1
19145: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19146: LD_VAR 0 1
19150: PPUSH
19151: CALL_OW 302
19155: NOT
19156: IFFALSE 19169
// begin HackUnlinkAll ( i ) ;
19158: LD_VAR 0 1
19162: PPUSH
19163: CALL 19275 0 1
// continue ;
19167: GO 19049
// end ; HackCheckCapturedStatus ( i ) ;
19169: LD_VAR 0 1
19173: PPUSH
19174: CALL 19718 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19178: LD_ADDR_VAR 0 2
19182: PUSH
19183: LD_INT 81
19185: PUSH
19186: LD_VAR 0 1
19190: PPUSH
19191: CALL_OW 255
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 33
19202: PUSH
19203: LD_INT 3
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 91
19212: PUSH
19213: LD_VAR 0 1
19217: PUSH
19218: LD_EXP 73
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: LIST
19227: PUSH
19228: LD_INT 50
19230: PUSH
19231: EMPTY
19232: LIST
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: PPUSH
19240: CALL_OW 69
19244: ST_TO_ADDR
// if not tmp then
19245: LD_VAR 0 2
19249: NOT
19250: IFFALSE 19254
// continue ;
19252: GO 19049
// HackLink ( i , tmp ) ;
19254: LD_VAR 0 1
19258: PPUSH
19259: LD_VAR 0 2
19263: PPUSH
19264: CALL 19411 0 2
// end ;
19268: GO 19049
19270: POP
19271: POP
// end ;
19272: PPOPN 2
19274: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19275: LD_INT 0
19277: PPUSH
19278: PPUSH
19279: PPUSH
// if not hack in hackTanks then
19280: LD_VAR 0 1
19284: PUSH
19285: LD_EXP 70
19289: IN
19290: NOT
19291: IFFALSE 19295
// exit ;
19293: GO 19406
// index := GetElementIndex ( hackTanks , hack ) ;
19295: LD_ADDR_VAR 0 4
19299: PUSH
19300: LD_EXP 70
19304: PPUSH
19305: LD_VAR 0 1
19309: PPUSH
19310: CALL 27023 0 2
19314: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19315: LD_EXP 71
19319: PUSH
19320: LD_VAR 0 4
19324: ARRAY
19325: IFFALSE 19406
// begin for i in hackTanksCaptured [ index ] do
19327: LD_ADDR_VAR 0 3
19331: PUSH
19332: LD_EXP 71
19336: PUSH
19337: LD_VAR 0 4
19341: ARRAY
19342: PUSH
19343: FOR_IN
19344: IFFALSE 19370
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19346: LD_VAR 0 3
19350: PUSH
19351: LD_INT 1
19353: ARRAY
19354: PPUSH
19355: LD_VAR 0 3
19359: PUSH
19360: LD_INT 2
19362: ARRAY
19363: PPUSH
19364: CALL_OW 235
19368: GO 19343
19370: POP
19371: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19372: LD_ADDR_EXP 71
19376: PUSH
19377: LD_EXP 71
19381: PPUSH
19382: LD_VAR 0 4
19386: PPUSH
19387: EMPTY
19388: PPUSH
19389: CALL_OW 1
19393: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19394: LD_VAR 0 1
19398: PPUSH
19399: LD_INT 0
19401: PPUSH
19402: CALL_OW 505
// end ; end ;
19406: LD_VAR 0 2
19410: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19411: LD_INT 0
19413: PPUSH
19414: PPUSH
19415: PPUSH
// if not hack in hackTanks or not vehicles then
19416: LD_VAR 0 1
19420: PUSH
19421: LD_EXP 70
19425: IN
19426: NOT
19427: PUSH
19428: LD_VAR 0 2
19432: NOT
19433: OR
19434: IFFALSE 19438
// exit ;
19436: GO 19713
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19438: LD_ADDR_VAR 0 2
19442: PUSH
19443: LD_VAR 0 1
19447: PPUSH
19448: LD_VAR 0 2
19452: PPUSH
19453: LD_INT 1
19455: PPUSH
19456: LD_INT 1
19458: PPUSH
19459: CALL 27673 0 4
19463: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19464: LD_ADDR_VAR 0 5
19468: PUSH
19469: LD_EXP 70
19473: PPUSH
19474: LD_VAR 0 1
19478: PPUSH
19479: CALL 27023 0 2
19483: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19484: LD_EXP 71
19488: PUSH
19489: LD_VAR 0 5
19493: ARRAY
19494: PUSH
19495: LD_EXP 72
19499: LESS
19500: IFFALSE 19689
// begin for i := 1 to vehicles do
19502: LD_ADDR_VAR 0 4
19506: PUSH
19507: DOUBLE
19508: LD_INT 1
19510: DEC
19511: ST_TO_ADDR
19512: LD_VAR 0 2
19516: PUSH
19517: FOR_TO
19518: IFFALSE 19687
// begin if hackTanksCaptured [ index ] = hackLimit then
19520: LD_EXP 71
19524: PUSH
19525: LD_VAR 0 5
19529: ARRAY
19530: PUSH
19531: LD_EXP 72
19535: EQUAL
19536: IFFALSE 19540
// break ;
19538: GO 19687
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19540: LD_ADDR_EXP 74
19544: PUSH
19545: LD_EXP 74
19549: PPUSH
19550: LD_VAR 0 5
19554: PPUSH
19555: LD_EXP 74
19559: PUSH
19560: LD_VAR 0 5
19564: ARRAY
19565: PUSH
19566: LD_INT 1
19568: PLUS
19569: PPUSH
19570: CALL_OW 1
19574: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19575: LD_ADDR_EXP 71
19579: PUSH
19580: LD_EXP 71
19584: PPUSH
19585: LD_VAR 0 5
19589: PUSH
19590: LD_EXP 71
19594: PUSH
19595: LD_VAR 0 5
19599: ARRAY
19600: PUSH
19601: LD_INT 1
19603: PLUS
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PPUSH
19609: LD_VAR 0 2
19613: PUSH
19614: LD_VAR 0 4
19618: ARRAY
19619: PUSH
19620: LD_VAR 0 2
19624: PUSH
19625: LD_VAR 0 4
19629: ARRAY
19630: PPUSH
19631: CALL_OW 255
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PPUSH
19640: CALL 27238 0 3
19644: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19645: LD_VAR 0 2
19649: PUSH
19650: LD_VAR 0 4
19654: ARRAY
19655: PPUSH
19656: LD_VAR 0 1
19660: PPUSH
19661: CALL_OW 255
19665: PPUSH
19666: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19670: LD_VAR 0 2
19674: PUSH
19675: LD_VAR 0 4
19679: ARRAY
19680: PPUSH
19681: CALL_OW 141
// end ;
19685: GO 19517
19687: POP
19688: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19689: LD_VAR 0 1
19693: PPUSH
19694: LD_EXP 71
19698: PUSH
19699: LD_VAR 0 5
19703: ARRAY
19704: PUSH
19705: LD_INT 0
19707: PLUS
19708: PPUSH
19709: CALL_OW 505
// end ;
19713: LD_VAR 0 3
19717: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19718: LD_INT 0
19720: PPUSH
19721: PPUSH
19722: PPUSH
19723: PPUSH
// if not hack in hackTanks then
19724: LD_VAR 0 1
19728: PUSH
19729: LD_EXP 70
19733: IN
19734: NOT
19735: IFFALSE 19739
// exit ;
19737: GO 19979
// index := GetElementIndex ( hackTanks , hack ) ;
19739: LD_ADDR_VAR 0 4
19743: PUSH
19744: LD_EXP 70
19748: PPUSH
19749: LD_VAR 0 1
19753: PPUSH
19754: CALL 27023 0 2
19758: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19759: LD_ADDR_VAR 0 3
19763: PUSH
19764: DOUBLE
19765: LD_EXP 71
19769: PUSH
19770: LD_VAR 0 4
19774: ARRAY
19775: INC
19776: ST_TO_ADDR
19777: LD_INT 1
19779: PUSH
19780: FOR_DOWNTO
19781: IFFALSE 19953
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19783: LD_ADDR_VAR 0 5
19787: PUSH
19788: LD_EXP 71
19792: PUSH
19793: LD_VAR 0 4
19797: ARRAY
19798: PUSH
19799: LD_VAR 0 3
19803: ARRAY
19804: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19805: LD_VAR 0 5
19809: PUSH
19810: LD_INT 1
19812: ARRAY
19813: PPUSH
19814: CALL_OW 302
19818: NOT
19819: PUSH
19820: LD_VAR 0 5
19824: PUSH
19825: LD_INT 1
19827: ARRAY
19828: PPUSH
19829: CALL_OW 255
19833: PUSH
19834: LD_VAR 0 1
19838: PPUSH
19839: CALL_OW 255
19843: NONEQUAL
19844: OR
19845: IFFALSE 19951
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19847: LD_VAR 0 5
19851: PUSH
19852: LD_INT 1
19854: ARRAY
19855: PPUSH
19856: CALL_OW 305
19860: PUSH
19861: LD_VAR 0 5
19865: PUSH
19866: LD_INT 1
19868: ARRAY
19869: PPUSH
19870: CALL_OW 255
19874: PUSH
19875: LD_VAR 0 1
19879: PPUSH
19880: CALL_OW 255
19884: EQUAL
19885: AND
19886: IFFALSE 19910
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19888: LD_VAR 0 5
19892: PUSH
19893: LD_INT 1
19895: ARRAY
19896: PPUSH
19897: LD_VAR 0 5
19901: PUSH
19902: LD_INT 2
19904: ARRAY
19905: PPUSH
19906: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19910: LD_ADDR_EXP 71
19914: PUSH
19915: LD_EXP 71
19919: PPUSH
19920: LD_VAR 0 4
19924: PPUSH
19925: LD_EXP 71
19929: PUSH
19930: LD_VAR 0 4
19934: ARRAY
19935: PPUSH
19936: LD_VAR 0 3
19940: PPUSH
19941: CALL_OW 3
19945: PPUSH
19946: CALL_OW 1
19950: ST_TO_ADDR
// end ; end ;
19951: GO 19780
19953: POP
19954: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19955: LD_VAR 0 1
19959: PPUSH
19960: LD_EXP 71
19964: PUSH
19965: LD_VAR 0 4
19969: ARRAY
19970: PUSH
19971: LD_INT 0
19973: PLUS
19974: PPUSH
19975: CALL_OW 505
// end ;
19979: LD_VAR 0 2
19983: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19984: LD_INT 0
19986: PPUSH
19987: PPUSH
19988: PPUSH
19989: PPUSH
// if not hack in hackTanks then
19990: LD_VAR 0 1
19994: PUSH
19995: LD_EXP 70
19999: IN
20000: NOT
20001: IFFALSE 20005
// exit ;
20003: GO 20090
// index := GetElementIndex ( hackTanks , hack ) ;
20005: LD_ADDR_VAR 0 5
20009: PUSH
20010: LD_EXP 70
20014: PPUSH
20015: LD_VAR 0 1
20019: PPUSH
20020: CALL 27023 0 2
20024: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20025: LD_ADDR_VAR 0 4
20029: PUSH
20030: DOUBLE
20031: LD_INT 1
20033: DEC
20034: ST_TO_ADDR
20035: LD_EXP 71
20039: PUSH
20040: LD_VAR 0 5
20044: ARRAY
20045: PUSH
20046: FOR_TO
20047: IFFALSE 20088
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20049: LD_EXP 71
20053: PUSH
20054: LD_VAR 0 5
20058: ARRAY
20059: PUSH
20060: LD_VAR 0 4
20064: ARRAY
20065: PUSH
20066: LD_INT 1
20068: ARRAY
20069: PUSH
20070: LD_VAR 0 2
20074: EQUAL
20075: IFFALSE 20086
// KillUnit ( vehicle ) ;
20077: LD_VAR 0 2
20081: PPUSH
20082: CALL_OW 66
20086: GO 20046
20088: POP
20089: POP
// end ;
20090: LD_VAR 0 3
20094: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20095: LD_EXP 75
20099: NOT
20100: IFFALSE 20135
20102: GO 20104
20104: DISABLE
// begin initMiner := true ;
20105: LD_ADDR_EXP 75
20109: PUSH
20110: LD_INT 1
20112: ST_TO_ADDR
// minersList := [ ] ;
20113: LD_ADDR_EXP 76
20117: PUSH
20118: EMPTY
20119: ST_TO_ADDR
// minerMinesList := [ ] ;
20120: LD_ADDR_EXP 77
20124: PUSH
20125: EMPTY
20126: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20127: LD_ADDR_EXP 78
20131: PUSH
20132: LD_INT 5
20134: ST_TO_ADDR
// end ;
20135: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20136: LD_EXP 75
20140: PUSH
20141: LD_INT 34
20143: PUSH
20144: LD_INT 81
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PPUSH
20151: CALL_OW 69
20155: AND
20156: IFFALSE 20617
20158: GO 20160
20160: DISABLE
20161: LD_INT 0
20163: PPUSH
20164: PPUSH
20165: PPUSH
20166: PPUSH
// begin enable ;
20167: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20168: LD_ADDR_VAR 0 1
20172: PUSH
20173: LD_INT 34
20175: PUSH
20176: LD_INT 81
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PPUSH
20183: CALL_OW 69
20187: PUSH
20188: FOR_IN
20189: IFFALSE 20261
// begin if not i in minersList then
20191: LD_VAR 0 1
20195: PUSH
20196: LD_EXP 76
20200: IN
20201: NOT
20202: IFFALSE 20259
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20204: LD_ADDR_EXP 76
20208: PUSH
20209: LD_EXP 76
20213: PPUSH
20214: LD_EXP 76
20218: PUSH
20219: LD_INT 1
20221: PLUS
20222: PPUSH
20223: LD_VAR 0 1
20227: PPUSH
20228: CALL_OW 1
20232: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20233: LD_ADDR_EXP 77
20237: PUSH
20238: LD_EXP 77
20242: PPUSH
20243: LD_EXP 77
20247: PUSH
20248: LD_INT 1
20250: PLUS
20251: PPUSH
20252: EMPTY
20253: PPUSH
20254: CALL_OW 1
20258: ST_TO_ADDR
// end end ;
20259: GO 20188
20261: POP
20262: POP
// for i := minerMinesList downto 1 do
20263: LD_ADDR_VAR 0 1
20267: PUSH
20268: DOUBLE
20269: LD_EXP 77
20273: INC
20274: ST_TO_ADDR
20275: LD_INT 1
20277: PUSH
20278: FOR_DOWNTO
20279: IFFALSE 20615
// begin if IsLive ( minersList [ i ] ) then
20281: LD_EXP 76
20285: PUSH
20286: LD_VAR 0 1
20290: ARRAY
20291: PPUSH
20292: CALL_OW 300
20296: IFFALSE 20324
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20298: LD_EXP 76
20302: PUSH
20303: LD_VAR 0 1
20307: ARRAY
20308: PPUSH
20309: LD_EXP 77
20313: PUSH
20314: LD_VAR 0 1
20318: ARRAY
20319: PPUSH
20320: CALL_OW 505
// if not minerMinesList [ i ] then
20324: LD_EXP 77
20328: PUSH
20329: LD_VAR 0 1
20333: ARRAY
20334: NOT
20335: IFFALSE 20339
// continue ;
20337: GO 20278
// for j := minerMinesList [ i ] downto 1 do
20339: LD_ADDR_VAR 0 2
20343: PUSH
20344: DOUBLE
20345: LD_EXP 77
20349: PUSH
20350: LD_VAR 0 1
20354: ARRAY
20355: INC
20356: ST_TO_ADDR
20357: LD_INT 1
20359: PUSH
20360: FOR_DOWNTO
20361: IFFALSE 20611
// begin side := GetSide ( minersList [ i ] ) ;
20363: LD_ADDR_VAR 0 3
20367: PUSH
20368: LD_EXP 76
20372: PUSH
20373: LD_VAR 0 1
20377: ARRAY
20378: PPUSH
20379: CALL_OW 255
20383: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20384: LD_ADDR_VAR 0 4
20388: PUSH
20389: LD_EXP 77
20393: PUSH
20394: LD_VAR 0 1
20398: ARRAY
20399: PUSH
20400: LD_VAR 0 2
20404: ARRAY
20405: PUSH
20406: LD_INT 1
20408: ARRAY
20409: PPUSH
20410: LD_EXP 77
20414: PUSH
20415: LD_VAR 0 1
20419: ARRAY
20420: PUSH
20421: LD_VAR 0 2
20425: ARRAY
20426: PUSH
20427: LD_INT 2
20429: ARRAY
20430: PPUSH
20431: CALL_OW 428
20435: ST_TO_ADDR
// if not tmp then
20436: LD_VAR 0 4
20440: NOT
20441: IFFALSE 20445
// continue ;
20443: GO 20360
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20445: LD_VAR 0 4
20449: PUSH
20450: LD_INT 81
20452: PUSH
20453: LD_VAR 0 3
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: PPUSH
20462: CALL_OW 69
20466: IN
20467: PUSH
20468: LD_EXP 77
20472: PUSH
20473: LD_VAR 0 1
20477: ARRAY
20478: PUSH
20479: LD_VAR 0 2
20483: ARRAY
20484: PUSH
20485: LD_INT 1
20487: ARRAY
20488: PPUSH
20489: LD_EXP 77
20493: PUSH
20494: LD_VAR 0 1
20498: ARRAY
20499: PUSH
20500: LD_VAR 0 2
20504: ARRAY
20505: PUSH
20506: LD_INT 2
20508: ARRAY
20509: PPUSH
20510: CALL_OW 458
20514: AND
20515: IFFALSE 20609
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20517: LD_EXP 77
20521: PUSH
20522: LD_VAR 0 1
20526: ARRAY
20527: PUSH
20528: LD_VAR 0 2
20532: ARRAY
20533: PUSH
20534: LD_INT 1
20536: ARRAY
20537: PPUSH
20538: LD_EXP 77
20542: PUSH
20543: LD_VAR 0 1
20547: ARRAY
20548: PUSH
20549: LD_VAR 0 2
20553: ARRAY
20554: PUSH
20555: LD_INT 2
20557: ARRAY
20558: PPUSH
20559: LD_VAR 0 3
20563: PPUSH
20564: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20568: LD_ADDR_EXP 77
20572: PUSH
20573: LD_EXP 77
20577: PPUSH
20578: LD_VAR 0 1
20582: PPUSH
20583: LD_EXP 77
20587: PUSH
20588: LD_VAR 0 1
20592: ARRAY
20593: PPUSH
20594: LD_VAR 0 2
20598: PPUSH
20599: CALL_OW 3
20603: PPUSH
20604: CALL_OW 1
20608: ST_TO_ADDR
// end ; end ;
20609: GO 20360
20611: POP
20612: POP
// end ;
20613: GO 20278
20615: POP
20616: POP
// end ;
20617: PPOPN 4
20619: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20620: LD_INT 0
20622: PPUSH
20623: PPUSH
// result := false ;
20624: LD_ADDR_VAR 0 4
20628: PUSH
20629: LD_INT 0
20631: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20632: LD_VAR 0 1
20636: PPUSH
20637: CALL_OW 264
20641: PUSH
20642: LD_INT 81
20644: EQUAL
20645: NOT
20646: IFFALSE 20650
// exit ;
20648: GO 20890
// index := GetElementIndex ( minersList , unit ) ;
20650: LD_ADDR_VAR 0 5
20654: PUSH
20655: LD_EXP 76
20659: PPUSH
20660: LD_VAR 0 1
20664: PPUSH
20665: CALL 27023 0 2
20669: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20670: LD_EXP 77
20674: PUSH
20675: LD_VAR 0 5
20679: ARRAY
20680: PUSH
20681: LD_EXP 78
20685: GREATEREQUAL
20686: IFFALSE 20690
// exit ;
20688: GO 20890
// ComMoveXY ( unit , x , y ) ;
20690: LD_VAR 0 1
20694: PPUSH
20695: LD_VAR 0 2
20699: PPUSH
20700: LD_VAR 0 3
20704: PPUSH
20705: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20709: LD_INT 35
20711: PPUSH
20712: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20716: LD_VAR 0 1
20720: PPUSH
20721: LD_VAR 0 2
20725: PPUSH
20726: LD_VAR 0 3
20730: PPUSH
20731: CALL 58378 0 3
20735: NOT
20736: PUSH
20737: LD_VAR 0 1
20741: PPUSH
20742: CALL_OW 314
20746: AND
20747: IFFALSE 20751
// exit ;
20749: GO 20890
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20751: LD_VAR 0 2
20755: PPUSH
20756: LD_VAR 0 3
20760: PPUSH
20761: CALL_OW 428
20765: PUSH
20766: LD_VAR 0 1
20770: EQUAL
20771: PUSH
20772: LD_VAR 0 1
20776: PPUSH
20777: CALL_OW 314
20781: NOT
20782: AND
20783: IFFALSE 20709
// PlaySoundXY ( x , y , PlantMine ) ;
20785: LD_VAR 0 2
20789: PPUSH
20790: LD_VAR 0 3
20794: PPUSH
20795: LD_STRING PlantMine
20797: PPUSH
20798: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20802: LD_VAR 0 2
20806: PPUSH
20807: LD_VAR 0 3
20811: PPUSH
20812: LD_VAR 0 1
20816: PPUSH
20817: CALL_OW 255
20821: PPUSH
20822: LD_INT 0
20824: PPUSH
20825: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20829: LD_ADDR_EXP 77
20833: PUSH
20834: LD_EXP 77
20838: PPUSH
20839: LD_VAR 0 5
20843: PUSH
20844: LD_EXP 77
20848: PUSH
20849: LD_VAR 0 5
20853: ARRAY
20854: PUSH
20855: LD_INT 1
20857: PLUS
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PPUSH
20863: LD_VAR 0 2
20867: PUSH
20868: LD_VAR 0 3
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PPUSH
20877: CALL 27238 0 3
20881: ST_TO_ADDR
// result := true ;
20882: LD_ADDR_VAR 0 4
20886: PUSH
20887: LD_INT 1
20889: ST_TO_ADDR
// end ;
20890: LD_VAR 0 4
20894: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20895: LD_INT 0
20897: PPUSH
20898: PPUSH
20899: PPUSH
// if not unit in minersList then
20900: LD_VAR 0 1
20904: PUSH
20905: LD_EXP 76
20909: IN
20910: NOT
20911: IFFALSE 20915
// exit ;
20913: GO 21307
// index := GetElementIndex ( minersList , unit ) ;
20915: LD_ADDR_VAR 0 6
20919: PUSH
20920: LD_EXP 76
20924: PPUSH
20925: LD_VAR 0 1
20929: PPUSH
20930: CALL 27023 0 2
20934: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20935: LD_ADDR_VAR 0 5
20939: PUSH
20940: DOUBLE
20941: LD_EXP 77
20945: PUSH
20946: LD_VAR 0 6
20950: ARRAY
20951: INC
20952: ST_TO_ADDR
20953: LD_INT 1
20955: PUSH
20956: FOR_DOWNTO
20957: IFFALSE 21118
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20959: LD_EXP 77
20963: PUSH
20964: LD_VAR 0 6
20968: ARRAY
20969: PUSH
20970: LD_VAR 0 5
20974: ARRAY
20975: PUSH
20976: LD_INT 1
20978: ARRAY
20979: PUSH
20980: LD_VAR 0 2
20984: EQUAL
20985: PUSH
20986: LD_EXP 77
20990: PUSH
20991: LD_VAR 0 6
20995: ARRAY
20996: PUSH
20997: LD_VAR 0 5
21001: ARRAY
21002: PUSH
21003: LD_INT 2
21005: ARRAY
21006: PUSH
21007: LD_VAR 0 3
21011: EQUAL
21012: AND
21013: IFFALSE 21116
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21015: LD_EXP 77
21019: PUSH
21020: LD_VAR 0 6
21024: ARRAY
21025: PUSH
21026: LD_VAR 0 5
21030: ARRAY
21031: PUSH
21032: LD_INT 1
21034: ARRAY
21035: PPUSH
21036: LD_EXP 77
21040: PUSH
21041: LD_VAR 0 6
21045: ARRAY
21046: PUSH
21047: LD_VAR 0 5
21051: ARRAY
21052: PUSH
21053: LD_INT 2
21055: ARRAY
21056: PPUSH
21057: LD_VAR 0 1
21061: PPUSH
21062: CALL_OW 255
21066: PPUSH
21067: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21071: LD_ADDR_EXP 77
21075: PUSH
21076: LD_EXP 77
21080: PPUSH
21081: LD_VAR 0 6
21085: PPUSH
21086: LD_EXP 77
21090: PUSH
21091: LD_VAR 0 6
21095: ARRAY
21096: PPUSH
21097: LD_VAR 0 5
21101: PPUSH
21102: CALL_OW 3
21106: PPUSH
21107: CALL_OW 1
21111: ST_TO_ADDR
// exit ;
21112: POP
21113: POP
21114: GO 21307
// end ; end ;
21116: GO 20956
21118: POP
21119: POP
// for i := minerMinesList [ index ] downto 1 do
21120: LD_ADDR_VAR 0 5
21124: PUSH
21125: DOUBLE
21126: LD_EXP 77
21130: PUSH
21131: LD_VAR 0 6
21135: ARRAY
21136: INC
21137: ST_TO_ADDR
21138: LD_INT 1
21140: PUSH
21141: FOR_DOWNTO
21142: IFFALSE 21305
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21144: LD_EXP 77
21148: PUSH
21149: LD_VAR 0 6
21153: ARRAY
21154: PUSH
21155: LD_VAR 0 5
21159: ARRAY
21160: PUSH
21161: LD_INT 1
21163: ARRAY
21164: PPUSH
21165: LD_EXP 77
21169: PUSH
21170: LD_VAR 0 6
21174: ARRAY
21175: PUSH
21176: LD_VAR 0 5
21180: ARRAY
21181: PUSH
21182: LD_INT 2
21184: ARRAY
21185: PPUSH
21186: LD_VAR 0 2
21190: PPUSH
21191: LD_VAR 0 3
21195: PPUSH
21196: CALL_OW 298
21200: PUSH
21201: LD_INT 6
21203: LESS
21204: IFFALSE 21303
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21206: LD_EXP 77
21210: PUSH
21211: LD_VAR 0 6
21215: ARRAY
21216: PUSH
21217: LD_VAR 0 5
21221: ARRAY
21222: PUSH
21223: LD_INT 1
21225: ARRAY
21226: PPUSH
21227: LD_EXP 77
21231: PUSH
21232: LD_VAR 0 6
21236: ARRAY
21237: PUSH
21238: LD_VAR 0 5
21242: ARRAY
21243: PUSH
21244: LD_INT 2
21246: ARRAY
21247: PPUSH
21248: LD_VAR 0 1
21252: PPUSH
21253: CALL_OW 255
21257: PPUSH
21258: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21262: LD_ADDR_EXP 77
21266: PUSH
21267: LD_EXP 77
21271: PPUSH
21272: LD_VAR 0 6
21276: PPUSH
21277: LD_EXP 77
21281: PUSH
21282: LD_VAR 0 6
21286: ARRAY
21287: PPUSH
21288: LD_VAR 0 5
21292: PPUSH
21293: CALL_OW 3
21297: PPUSH
21298: CALL_OW 1
21302: ST_TO_ADDR
// end ; end ;
21303: GO 21141
21305: POP
21306: POP
// end ;
21307: LD_VAR 0 4
21311: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21312: LD_INT 0
21314: PPUSH
21315: PPUSH
21316: PPUSH
21317: PPUSH
21318: PPUSH
21319: PPUSH
21320: PPUSH
21321: PPUSH
21322: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21323: LD_VAR 0 1
21327: PPUSH
21328: CALL_OW 264
21332: PUSH
21333: LD_INT 81
21335: EQUAL
21336: NOT
21337: PUSH
21338: LD_VAR 0 1
21342: PUSH
21343: LD_EXP 76
21347: IN
21348: NOT
21349: OR
21350: IFFALSE 21354
// exit ;
21352: GO 21676
// index := GetElementIndex ( minersList , unit ) ;
21354: LD_ADDR_VAR 0 6
21358: PUSH
21359: LD_EXP 76
21363: PPUSH
21364: LD_VAR 0 1
21368: PPUSH
21369: CALL 27023 0 2
21373: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21374: LD_ADDR_VAR 0 8
21378: PUSH
21379: LD_EXP 78
21383: PUSH
21384: LD_EXP 77
21388: PUSH
21389: LD_VAR 0 6
21393: ARRAY
21394: MINUS
21395: ST_TO_ADDR
// if not minesFreeAmount then
21396: LD_VAR 0 8
21400: NOT
21401: IFFALSE 21405
// exit ;
21403: GO 21676
// tmp := [ ] ;
21405: LD_ADDR_VAR 0 7
21409: PUSH
21410: EMPTY
21411: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21412: LD_ADDR_VAR 0 5
21416: PUSH
21417: DOUBLE
21418: LD_INT 1
21420: DEC
21421: ST_TO_ADDR
21422: LD_VAR 0 8
21426: PUSH
21427: FOR_TO
21428: IFFALSE 21623
// begin _d := rand ( 0 , 5 ) ;
21430: LD_ADDR_VAR 0 11
21434: PUSH
21435: LD_INT 0
21437: PPUSH
21438: LD_INT 5
21440: PPUSH
21441: CALL_OW 12
21445: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21446: LD_ADDR_VAR 0 12
21450: PUSH
21451: LD_INT 2
21453: PPUSH
21454: LD_INT 6
21456: PPUSH
21457: CALL_OW 12
21461: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21462: LD_ADDR_VAR 0 9
21466: PUSH
21467: LD_VAR 0 2
21471: PPUSH
21472: LD_VAR 0 11
21476: PPUSH
21477: LD_VAR 0 12
21481: PPUSH
21482: CALL_OW 272
21486: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21487: LD_ADDR_VAR 0 10
21491: PUSH
21492: LD_VAR 0 3
21496: PPUSH
21497: LD_VAR 0 11
21501: PPUSH
21502: LD_VAR 0 12
21506: PPUSH
21507: CALL_OW 273
21511: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21512: LD_VAR 0 9
21516: PPUSH
21517: LD_VAR 0 10
21521: PPUSH
21522: CALL_OW 488
21526: PUSH
21527: LD_VAR 0 9
21531: PUSH
21532: LD_VAR 0 10
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: LD_VAR 0 7
21545: IN
21546: NOT
21547: AND
21548: PUSH
21549: LD_VAR 0 9
21553: PPUSH
21554: LD_VAR 0 10
21558: PPUSH
21559: CALL_OW 458
21563: NOT
21564: AND
21565: IFFALSE 21607
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21567: LD_ADDR_VAR 0 7
21571: PUSH
21572: LD_VAR 0 7
21576: PPUSH
21577: LD_VAR 0 7
21581: PUSH
21582: LD_INT 1
21584: PLUS
21585: PPUSH
21586: LD_VAR 0 9
21590: PUSH
21591: LD_VAR 0 10
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PPUSH
21600: CALL_OW 1
21604: ST_TO_ADDR
21605: GO 21621
// i := i - 1 ;
21607: LD_ADDR_VAR 0 5
21611: PUSH
21612: LD_VAR 0 5
21616: PUSH
21617: LD_INT 1
21619: MINUS
21620: ST_TO_ADDR
// end ;
21621: GO 21427
21623: POP
21624: POP
// for i in tmp do
21625: LD_ADDR_VAR 0 5
21629: PUSH
21630: LD_VAR 0 7
21634: PUSH
21635: FOR_IN
21636: IFFALSE 21674
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21638: LD_VAR 0 1
21642: PPUSH
21643: LD_VAR 0 5
21647: PUSH
21648: LD_INT 1
21650: ARRAY
21651: PPUSH
21652: LD_VAR 0 5
21656: PUSH
21657: LD_INT 2
21659: ARRAY
21660: PPUSH
21661: CALL 20620 0 3
21665: NOT
21666: IFFALSE 21672
// exit ;
21668: POP
21669: POP
21670: GO 21676
21672: GO 21635
21674: POP
21675: POP
// end ;
21676: LD_VAR 0 4
21680: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21681: LD_INT 0
21683: PPUSH
21684: PPUSH
21685: PPUSH
21686: PPUSH
21687: PPUSH
21688: PPUSH
21689: PPUSH
// if not GetClass ( unit ) = class_sniper then
21690: LD_VAR 0 1
21694: PPUSH
21695: CALL_OW 257
21699: PUSH
21700: LD_INT 5
21702: EQUAL
21703: NOT
21704: IFFALSE 21708
// exit ;
21706: GO 22096
// dist := 8 ;
21708: LD_ADDR_VAR 0 5
21712: PUSH
21713: LD_INT 8
21715: ST_TO_ADDR
// viewRange := 12 ;
21716: LD_ADDR_VAR 0 7
21720: PUSH
21721: LD_INT 12
21723: ST_TO_ADDR
// side := GetSide ( unit ) ;
21724: LD_ADDR_VAR 0 6
21728: PUSH
21729: LD_VAR 0 1
21733: PPUSH
21734: CALL_OW 255
21738: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21739: LD_INT 61
21741: PPUSH
21742: LD_VAR 0 6
21746: PPUSH
21747: CALL_OW 321
21751: PUSH
21752: LD_INT 2
21754: EQUAL
21755: IFFALSE 21765
// viewRange := 16 ;
21757: LD_ADDR_VAR 0 7
21761: PUSH
21762: LD_INT 16
21764: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21765: LD_VAR 0 1
21769: PPUSH
21770: LD_VAR 0 2
21774: PPUSH
21775: LD_VAR 0 3
21779: PPUSH
21780: CALL_OW 297
21784: PUSH
21785: LD_VAR 0 5
21789: GREATER
21790: IFFALSE 21869
// begin ComMoveXY ( unit , x , y ) ;
21792: LD_VAR 0 1
21796: PPUSH
21797: LD_VAR 0 2
21801: PPUSH
21802: LD_VAR 0 3
21806: PPUSH
21807: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21811: LD_INT 35
21813: PPUSH
21814: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21818: LD_VAR 0 1
21822: PPUSH
21823: LD_VAR 0 2
21827: PPUSH
21828: LD_VAR 0 3
21832: PPUSH
21833: CALL 58378 0 3
21837: NOT
21838: IFFALSE 21842
// exit ;
21840: GO 22096
// until GetDistUnitXY ( unit , x , y ) < dist ;
21842: LD_VAR 0 1
21846: PPUSH
21847: LD_VAR 0 2
21851: PPUSH
21852: LD_VAR 0 3
21856: PPUSH
21857: CALL_OW 297
21861: PUSH
21862: LD_VAR 0 5
21866: LESS
21867: IFFALSE 21811
// end ; ComTurnXY ( unit , x , y ) ;
21869: LD_VAR 0 1
21873: PPUSH
21874: LD_VAR 0 2
21878: PPUSH
21879: LD_VAR 0 3
21883: PPUSH
21884: CALL_OW 118
// wait ( 5 ) ;
21888: LD_INT 5
21890: PPUSH
21891: CALL_OW 67
// _d := GetDir ( unit ) ;
21895: LD_ADDR_VAR 0 10
21899: PUSH
21900: LD_VAR 0 1
21904: PPUSH
21905: CALL_OW 254
21909: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21910: LD_ADDR_VAR 0 8
21914: PUSH
21915: LD_VAR 0 1
21919: PPUSH
21920: CALL_OW 250
21924: PPUSH
21925: LD_VAR 0 10
21929: PPUSH
21930: LD_VAR 0 5
21934: PPUSH
21935: CALL_OW 272
21939: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21940: LD_ADDR_VAR 0 9
21944: PUSH
21945: LD_VAR 0 1
21949: PPUSH
21950: CALL_OW 251
21954: PPUSH
21955: LD_VAR 0 10
21959: PPUSH
21960: LD_VAR 0 5
21964: PPUSH
21965: CALL_OW 273
21969: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21970: LD_VAR 0 8
21974: PPUSH
21975: LD_VAR 0 9
21979: PPUSH
21980: CALL_OW 488
21984: NOT
21985: IFFALSE 21989
// exit ;
21987: GO 22096
// ComAnimCustom ( unit , 1 ) ;
21989: LD_VAR 0 1
21993: PPUSH
21994: LD_INT 1
21996: PPUSH
21997: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
22001: LD_VAR 0 8
22005: PPUSH
22006: LD_VAR 0 9
22010: PPUSH
22011: LD_VAR 0 6
22015: PPUSH
22016: LD_VAR 0 7
22020: PPUSH
22021: CALL_OW 330
// repeat wait ( 1 ) ;
22025: LD_INT 1
22027: PPUSH
22028: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
22032: LD_VAR 0 1
22036: PPUSH
22037: CALL_OW 316
22041: PUSH
22042: LD_VAR 0 1
22046: PPUSH
22047: CALL_OW 314
22051: OR
22052: PUSH
22053: LD_VAR 0 1
22057: PPUSH
22058: CALL_OW 302
22062: NOT
22063: OR
22064: PUSH
22065: LD_VAR 0 1
22069: PPUSH
22070: CALL_OW 301
22074: OR
22075: IFFALSE 22025
// RemoveSeeing ( _x , _y , side ) ;
22077: LD_VAR 0 8
22081: PPUSH
22082: LD_VAR 0 9
22086: PPUSH
22087: LD_VAR 0 6
22091: PPUSH
22092: CALL_OW 331
// end ; end_of_file
22096: LD_VAR 0 4
22100: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22101: LD_INT 0
22103: PPUSH
22104: PPUSH
// if exist_mode then
22105: LD_VAR 0 2
22109: IFFALSE 22134
// unit := CreateCharacter ( prefix & ident ) else
22111: LD_ADDR_VAR 0 5
22115: PUSH
22116: LD_VAR 0 3
22120: PUSH
22121: LD_VAR 0 1
22125: STR
22126: PPUSH
22127: CALL_OW 34
22131: ST_TO_ADDR
22132: GO 22149
// unit := NewCharacter ( ident ) ;
22134: LD_ADDR_VAR 0 5
22138: PUSH
22139: LD_VAR 0 1
22143: PPUSH
22144: CALL_OW 25
22148: ST_TO_ADDR
// result := unit ;
22149: LD_ADDR_VAR 0 4
22153: PUSH
22154: LD_VAR 0 5
22158: ST_TO_ADDR
// end ;
22159: LD_VAR 0 4
22163: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22164: LD_INT 0
22166: PPUSH
22167: PPUSH
// if not side or not nation then
22168: LD_VAR 0 1
22172: NOT
22173: PUSH
22174: LD_VAR 0 2
22178: NOT
22179: OR
22180: IFFALSE 22184
// exit ;
22182: GO 22952
// case nation of nation_american :
22184: LD_VAR 0 2
22188: PUSH
22189: LD_INT 1
22191: DOUBLE
22192: EQUAL
22193: IFTRUE 22197
22195: GO 22411
22197: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22198: LD_ADDR_VAR 0 4
22202: PUSH
22203: LD_INT 35
22205: PUSH
22206: LD_INT 45
22208: PUSH
22209: LD_INT 46
22211: PUSH
22212: LD_INT 47
22214: PUSH
22215: LD_INT 82
22217: PUSH
22218: LD_INT 83
22220: PUSH
22221: LD_INT 84
22223: PUSH
22224: LD_INT 85
22226: PUSH
22227: LD_INT 86
22229: PUSH
22230: LD_INT 1
22232: PUSH
22233: LD_INT 2
22235: PUSH
22236: LD_INT 6
22238: PUSH
22239: LD_INT 15
22241: PUSH
22242: LD_INT 16
22244: PUSH
22245: LD_INT 7
22247: PUSH
22248: LD_INT 12
22250: PUSH
22251: LD_INT 13
22253: PUSH
22254: LD_INT 10
22256: PUSH
22257: LD_INT 14
22259: PUSH
22260: LD_INT 20
22262: PUSH
22263: LD_INT 21
22265: PUSH
22266: LD_INT 22
22268: PUSH
22269: LD_INT 25
22271: PUSH
22272: LD_INT 32
22274: PUSH
22275: LD_INT 27
22277: PUSH
22278: LD_INT 36
22280: PUSH
22281: LD_INT 69
22283: PUSH
22284: LD_INT 39
22286: PUSH
22287: LD_INT 34
22289: PUSH
22290: LD_INT 40
22292: PUSH
22293: LD_INT 48
22295: PUSH
22296: LD_INT 49
22298: PUSH
22299: LD_INT 50
22301: PUSH
22302: LD_INT 51
22304: PUSH
22305: LD_INT 52
22307: PUSH
22308: LD_INT 53
22310: PUSH
22311: LD_INT 54
22313: PUSH
22314: LD_INT 55
22316: PUSH
22317: LD_INT 56
22319: PUSH
22320: LD_INT 57
22322: PUSH
22323: LD_INT 58
22325: PUSH
22326: LD_INT 59
22328: PUSH
22329: LD_INT 60
22331: PUSH
22332: LD_INT 61
22334: PUSH
22335: LD_INT 62
22337: PUSH
22338: LD_INT 80
22340: PUSH
22341: LD_INT 82
22343: PUSH
22344: LD_INT 83
22346: PUSH
22347: LD_INT 84
22349: PUSH
22350: LD_INT 85
22352: PUSH
22353: LD_INT 86
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: LIST
22406: LIST
22407: LIST
22408: ST_TO_ADDR
22409: GO 22876
22411: LD_INT 2
22413: DOUBLE
22414: EQUAL
22415: IFTRUE 22419
22417: GO 22645
22419: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22420: LD_ADDR_VAR 0 4
22424: PUSH
22425: LD_INT 35
22427: PUSH
22428: LD_INT 45
22430: PUSH
22431: LD_INT 46
22433: PUSH
22434: LD_INT 47
22436: PUSH
22437: LD_INT 82
22439: PUSH
22440: LD_INT 83
22442: PUSH
22443: LD_INT 84
22445: PUSH
22446: LD_INT 85
22448: PUSH
22449: LD_INT 87
22451: PUSH
22452: LD_INT 70
22454: PUSH
22455: LD_INT 1
22457: PUSH
22458: LD_INT 11
22460: PUSH
22461: LD_INT 3
22463: PUSH
22464: LD_INT 4
22466: PUSH
22467: LD_INT 5
22469: PUSH
22470: LD_INT 6
22472: PUSH
22473: LD_INT 15
22475: PUSH
22476: LD_INT 18
22478: PUSH
22479: LD_INT 7
22481: PUSH
22482: LD_INT 17
22484: PUSH
22485: LD_INT 8
22487: PUSH
22488: LD_INT 20
22490: PUSH
22491: LD_INT 21
22493: PUSH
22494: LD_INT 22
22496: PUSH
22497: LD_INT 72
22499: PUSH
22500: LD_INT 26
22502: PUSH
22503: LD_INT 69
22505: PUSH
22506: LD_INT 39
22508: PUSH
22509: LD_INT 40
22511: PUSH
22512: LD_INT 41
22514: PUSH
22515: LD_INT 42
22517: PUSH
22518: LD_INT 43
22520: PUSH
22521: LD_INT 48
22523: PUSH
22524: LD_INT 49
22526: PUSH
22527: LD_INT 50
22529: PUSH
22530: LD_INT 51
22532: PUSH
22533: LD_INT 52
22535: PUSH
22536: LD_INT 53
22538: PUSH
22539: LD_INT 54
22541: PUSH
22542: LD_INT 55
22544: PUSH
22545: LD_INT 56
22547: PUSH
22548: LD_INT 60
22550: PUSH
22551: LD_INT 61
22553: PUSH
22554: LD_INT 62
22556: PUSH
22557: LD_INT 66
22559: PUSH
22560: LD_INT 67
22562: PUSH
22563: LD_INT 68
22565: PUSH
22566: LD_INT 81
22568: PUSH
22569: LD_INT 82
22571: PUSH
22572: LD_INT 83
22574: PUSH
22575: LD_INT 84
22577: PUSH
22578: LD_INT 85
22580: PUSH
22581: LD_INT 87
22583: PUSH
22584: LD_INT 88
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: ST_TO_ADDR
22643: GO 22876
22645: LD_INT 3
22647: DOUBLE
22648: EQUAL
22649: IFTRUE 22653
22651: GO 22875
22653: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22654: LD_ADDR_VAR 0 4
22658: PUSH
22659: LD_INT 46
22661: PUSH
22662: LD_INT 47
22664: PUSH
22665: LD_INT 1
22667: PUSH
22668: LD_INT 2
22670: PUSH
22671: LD_INT 82
22673: PUSH
22674: LD_INT 83
22676: PUSH
22677: LD_INT 84
22679: PUSH
22680: LD_INT 85
22682: PUSH
22683: LD_INT 86
22685: PUSH
22686: LD_INT 11
22688: PUSH
22689: LD_INT 9
22691: PUSH
22692: LD_INT 20
22694: PUSH
22695: LD_INT 19
22697: PUSH
22698: LD_INT 21
22700: PUSH
22701: LD_INT 24
22703: PUSH
22704: LD_INT 22
22706: PUSH
22707: LD_INT 25
22709: PUSH
22710: LD_INT 28
22712: PUSH
22713: LD_INT 29
22715: PUSH
22716: LD_INT 30
22718: PUSH
22719: LD_INT 31
22721: PUSH
22722: LD_INT 37
22724: PUSH
22725: LD_INT 38
22727: PUSH
22728: LD_INT 32
22730: PUSH
22731: LD_INT 27
22733: PUSH
22734: LD_INT 33
22736: PUSH
22737: LD_INT 69
22739: PUSH
22740: LD_INT 39
22742: PUSH
22743: LD_INT 34
22745: PUSH
22746: LD_INT 40
22748: PUSH
22749: LD_INT 71
22751: PUSH
22752: LD_INT 23
22754: PUSH
22755: LD_INT 44
22757: PUSH
22758: LD_INT 48
22760: PUSH
22761: LD_INT 49
22763: PUSH
22764: LD_INT 50
22766: PUSH
22767: LD_INT 51
22769: PUSH
22770: LD_INT 52
22772: PUSH
22773: LD_INT 53
22775: PUSH
22776: LD_INT 54
22778: PUSH
22779: LD_INT 55
22781: PUSH
22782: LD_INT 56
22784: PUSH
22785: LD_INT 57
22787: PUSH
22788: LD_INT 58
22790: PUSH
22791: LD_INT 59
22793: PUSH
22794: LD_INT 63
22796: PUSH
22797: LD_INT 64
22799: PUSH
22800: LD_INT 65
22802: PUSH
22803: LD_INT 82
22805: PUSH
22806: LD_INT 83
22808: PUSH
22809: LD_INT 84
22811: PUSH
22812: LD_INT 85
22814: PUSH
22815: LD_INT 86
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: ST_TO_ADDR
22873: GO 22876
22875: POP
// if state > - 1 and state < 3 then
22876: LD_VAR 0 3
22880: PUSH
22881: LD_INT 1
22883: NEG
22884: GREATER
22885: PUSH
22886: LD_VAR 0 3
22890: PUSH
22891: LD_INT 3
22893: LESS
22894: AND
22895: IFFALSE 22952
// for i in result do
22897: LD_ADDR_VAR 0 5
22901: PUSH
22902: LD_VAR 0 4
22906: PUSH
22907: FOR_IN
22908: IFFALSE 22950
// if GetTech ( i , side ) <> state then
22910: LD_VAR 0 5
22914: PPUSH
22915: LD_VAR 0 1
22919: PPUSH
22920: CALL_OW 321
22924: PUSH
22925: LD_VAR 0 3
22929: NONEQUAL
22930: IFFALSE 22948
// result := result diff i ;
22932: LD_ADDR_VAR 0 4
22936: PUSH
22937: LD_VAR 0 4
22941: PUSH
22942: LD_VAR 0 5
22946: DIFF
22947: ST_TO_ADDR
22948: GO 22907
22950: POP
22951: POP
// end ;
22952: LD_VAR 0 4
22956: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22957: LD_INT 0
22959: PPUSH
22960: PPUSH
22961: PPUSH
// result := true ;
22962: LD_ADDR_VAR 0 3
22966: PUSH
22967: LD_INT 1
22969: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22970: LD_ADDR_VAR 0 5
22974: PUSH
22975: LD_VAR 0 2
22979: PPUSH
22980: CALL_OW 480
22984: ST_TO_ADDR
// if not tmp then
22985: LD_VAR 0 5
22989: NOT
22990: IFFALSE 22994
// exit ;
22992: GO 23043
// for i in tmp do
22994: LD_ADDR_VAR 0 4
22998: PUSH
22999: LD_VAR 0 5
23003: PUSH
23004: FOR_IN
23005: IFFALSE 23041
// if GetTech ( i , side ) <> state_researched then
23007: LD_VAR 0 4
23011: PPUSH
23012: LD_VAR 0 1
23016: PPUSH
23017: CALL_OW 321
23021: PUSH
23022: LD_INT 2
23024: NONEQUAL
23025: IFFALSE 23039
// begin result := false ;
23027: LD_ADDR_VAR 0 3
23031: PUSH
23032: LD_INT 0
23034: ST_TO_ADDR
// exit ;
23035: POP
23036: POP
23037: GO 23043
// end ;
23039: GO 23004
23041: POP
23042: POP
// end ;
23043: LD_VAR 0 3
23047: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23048: LD_INT 0
23050: PPUSH
23051: PPUSH
23052: PPUSH
23053: PPUSH
23054: PPUSH
23055: PPUSH
23056: PPUSH
23057: PPUSH
23058: PPUSH
23059: PPUSH
23060: PPUSH
23061: PPUSH
23062: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23063: LD_VAR 0 1
23067: NOT
23068: PUSH
23069: LD_VAR 0 1
23073: PPUSH
23074: CALL_OW 257
23078: PUSH
23079: LD_INT 9
23081: NONEQUAL
23082: OR
23083: IFFALSE 23087
// exit ;
23085: GO 23660
// side := GetSide ( unit ) ;
23087: LD_ADDR_VAR 0 9
23091: PUSH
23092: LD_VAR 0 1
23096: PPUSH
23097: CALL_OW 255
23101: ST_TO_ADDR
// tech_space := tech_spacanom ;
23102: LD_ADDR_VAR 0 12
23106: PUSH
23107: LD_INT 29
23109: ST_TO_ADDR
// tech_time := tech_taurad ;
23110: LD_ADDR_VAR 0 13
23114: PUSH
23115: LD_INT 28
23117: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23118: LD_ADDR_VAR 0 11
23122: PUSH
23123: LD_VAR 0 1
23127: PPUSH
23128: CALL_OW 310
23132: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23133: LD_VAR 0 11
23137: PPUSH
23138: CALL_OW 247
23142: PUSH
23143: LD_INT 2
23145: EQUAL
23146: IFFALSE 23150
// exit ;
23148: GO 23660
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23150: LD_ADDR_VAR 0 8
23154: PUSH
23155: LD_INT 81
23157: PUSH
23158: LD_VAR 0 9
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 3
23169: PUSH
23170: LD_INT 21
23172: PUSH
23173: LD_INT 3
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PPUSH
23188: CALL_OW 69
23192: ST_TO_ADDR
// if not tmp then
23193: LD_VAR 0 8
23197: NOT
23198: IFFALSE 23202
// exit ;
23200: GO 23660
// if in_unit then
23202: LD_VAR 0 11
23206: IFFALSE 23230
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23208: LD_ADDR_VAR 0 10
23212: PUSH
23213: LD_VAR 0 8
23217: PPUSH
23218: LD_VAR 0 11
23222: PPUSH
23223: CALL_OW 74
23227: ST_TO_ADDR
23228: GO 23250
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23230: LD_ADDR_VAR 0 10
23234: PUSH
23235: LD_VAR 0 8
23239: PPUSH
23240: LD_VAR 0 1
23244: PPUSH
23245: CALL_OW 74
23249: ST_TO_ADDR
// if not enemy then
23250: LD_VAR 0 10
23254: NOT
23255: IFFALSE 23259
// exit ;
23257: GO 23660
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23259: LD_VAR 0 11
23263: PUSH
23264: LD_VAR 0 11
23268: PPUSH
23269: LD_VAR 0 10
23273: PPUSH
23274: CALL_OW 296
23278: PUSH
23279: LD_INT 13
23281: GREATER
23282: AND
23283: PUSH
23284: LD_VAR 0 1
23288: PPUSH
23289: LD_VAR 0 10
23293: PPUSH
23294: CALL_OW 296
23298: PUSH
23299: LD_INT 12
23301: GREATER
23302: OR
23303: IFFALSE 23307
// exit ;
23305: GO 23660
// missile := [ 1 ] ;
23307: LD_ADDR_VAR 0 14
23311: PUSH
23312: LD_INT 1
23314: PUSH
23315: EMPTY
23316: LIST
23317: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23318: LD_VAR 0 9
23322: PPUSH
23323: LD_VAR 0 12
23327: PPUSH
23328: CALL_OW 325
23332: IFFALSE 23361
// missile := Replace ( missile , missile + 1 , 2 ) ;
23334: LD_ADDR_VAR 0 14
23338: PUSH
23339: LD_VAR 0 14
23343: PPUSH
23344: LD_VAR 0 14
23348: PUSH
23349: LD_INT 1
23351: PLUS
23352: PPUSH
23353: LD_INT 2
23355: PPUSH
23356: CALL_OW 1
23360: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23361: LD_VAR 0 9
23365: PPUSH
23366: LD_VAR 0 13
23370: PPUSH
23371: CALL_OW 325
23375: PUSH
23376: LD_VAR 0 10
23380: PPUSH
23381: CALL_OW 255
23385: PPUSH
23386: LD_VAR 0 13
23390: PPUSH
23391: CALL_OW 325
23395: NOT
23396: AND
23397: IFFALSE 23426
// missile := Replace ( missile , missile + 1 , 3 ) ;
23399: LD_ADDR_VAR 0 14
23403: PUSH
23404: LD_VAR 0 14
23408: PPUSH
23409: LD_VAR 0 14
23413: PUSH
23414: LD_INT 1
23416: PLUS
23417: PPUSH
23418: LD_INT 3
23420: PPUSH
23421: CALL_OW 1
23425: ST_TO_ADDR
// if missile < 2 then
23426: LD_VAR 0 14
23430: PUSH
23431: LD_INT 2
23433: LESS
23434: IFFALSE 23438
// exit ;
23436: GO 23660
// x := GetX ( enemy ) ;
23438: LD_ADDR_VAR 0 4
23442: PUSH
23443: LD_VAR 0 10
23447: PPUSH
23448: CALL_OW 250
23452: ST_TO_ADDR
// y := GetY ( enemy ) ;
23453: LD_ADDR_VAR 0 5
23457: PUSH
23458: LD_VAR 0 10
23462: PPUSH
23463: CALL_OW 251
23467: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23468: LD_ADDR_VAR 0 6
23472: PUSH
23473: LD_VAR 0 4
23477: PUSH
23478: LD_INT 1
23480: NEG
23481: PPUSH
23482: LD_INT 1
23484: PPUSH
23485: CALL_OW 12
23489: PLUS
23490: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23491: LD_ADDR_VAR 0 7
23495: PUSH
23496: LD_VAR 0 5
23500: PUSH
23501: LD_INT 1
23503: NEG
23504: PPUSH
23505: LD_INT 1
23507: PPUSH
23508: CALL_OW 12
23512: PLUS
23513: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23514: LD_VAR 0 6
23518: PPUSH
23519: LD_VAR 0 7
23523: PPUSH
23524: CALL_OW 488
23528: NOT
23529: IFFALSE 23551
// begin _x := x ;
23531: LD_ADDR_VAR 0 6
23535: PUSH
23536: LD_VAR 0 4
23540: ST_TO_ADDR
// _y := y ;
23541: LD_ADDR_VAR 0 7
23545: PUSH
23546: LD_VAR 0 5
23550: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23551: LD_ADDR_VAR 0 3
23555: PUSH
23556: LD_INT 1
23558: PPUSH
23559: LD_VAR 0 14
23563: PPUSH
23564: CALL_OW 12
23568: ST_TO_ADDR
// case i of 1 :
23569: LD_VAR 0 3
23573: PUSH
23574: LD_INT 1
23576: DOUBLE
23577: EQUAL
23578: IFTRUE 23582
23580: GO 23599
23582: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23583: LD_VAR 0 1
23587: PPUSH
23588: LD_VAR 0 10
23592: PPUSH
23593: CALL_OW 115
23597: GO 23660
23599: LD_INT 2
23601: DOUBLE
23602: EQUAL
23603: IFTRUE 23607
23605: GO 23629
23607: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23608: LD_VAR 0 1
23612: PPUSH
23613: LD_VAR 0 6
23617: PPUSH
23618: LD_VAR 0 7
23622: PPUSH
23623: CALL_OW 153
23627: GO 23660
23629: LD_INT 3
23631: DOUBLE
23632: EQUAL
23633: IFTRUE 23637
23635: GO 23659
23637: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23638: LD_VAR 0 1
23642: PPUSH
23643: LD_VAR 0 6
23647: PPUSH
23648: LD_VAR 0 7
23652: PPUSH
23653: CALL_OW 154
23657: GO 23660
23659: POP
// end ;
23660: LD_VAR 0 2
23664: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23665: LD_INT 0
23667: PPUSH
23668: PPUSH
23669: PPUSH
23670: PPUSH
23671: PPUSH
23672: PPUSH
// if not unit or not building then
23673: LD_VAR 0 1
23677: NOT
23678: PUSH
23679: LD_VAR 0 2
23683: NOT
23684: OR
23685: IFFALSE 23689
// exit ;
23687: GO 23847
// x := GetX ( building ) ;
23689: LD_ADDR_VAR 0 5
23693: PUSH
23694: LD_VAR 0 2
23698: PPUSH
23699: CALL_OW 250
23703: ST_TO_ADDR
// y := GetY ( building ) ;
23704: LD_ADDR_VAR 0 6
23708: PUSH
23709: LD_VAR 0 2
23713: PPUSH
23714: CALL_OW 251
23718: ST_TO_ADDR
// for i = 0 to 5 do
23719: LD_ADDR_VAR 0 4
23723: PUSH
23724: DOUBLE
23725: LD_INT 0
23727: DEC
23728: ST_TO_ADDR
23729: LD_INT 5
23731: PUSH
23732: FOR_TO
23733: IFFALSE 23845
// begin _x := ShiftX ( x , i , 3 ) ;
23735: LD_ADDR_VAR 0 7
23739: PUSH
23740: LD_VAR 0 5
23744: PPUSH
23745: LD_VAR 0 4
23749: PPUSH
23750: LD_INT 3
23752: PPUSH
23753: CALL_OW 272
23757: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23758: LD_ADDR_VAR 0 8
23762: PUSH
23763: LD_VAR 0 6
23767: PPUSH
23768: LD_VAR 0 4
23772: PPUSH
23773: LD_INT 3
23775: PPUSH
23776: CALL_OW 273
23780: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23781: LD_VAR 0 7
23785: PPUSH
23786: LD_VAR 0 8
23790: PPUSH
23791: CALL_OW 488
23795: NOT
23796: IFFALSE 23800
// continue ;
23798: GO 23732
// if HexInfo ( _x , _y ) = 0 then
23800: LD_VAR 0 7
23804: PPUSH
23805: LD_VAR 0 8
23809: PPUSH
23810: CALL_OW 428
23814: PUSH
23815: LD_INT 0
23817: EQUAL
23818: IFFALSE 23843
// begin ComMoveXY ( unit , _x , _y ) ;
23820: LD_VAR 0 1
23824: PPUSH
23825: LD_VAR 0 7
23829: PPUSH
23830: LD_VAR 0 8
23834: PPUSH
23835: CALL_OW 111
// exit ;
23839: POP
23840: POP
23841: GO 23847
// end ; end ;
23843: GO 23732
23845: POP
23846: POP
// end ;
23847: LD_VAR 0 3
23851: RET
// export function ScanBase ( side , base_area ) ; begin
23852: LD_INT 0
23854: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23855: LD_ADDR_VAR 0 3
23859: PUSH
23860: LD_VAR 0 2
23864: PPUSH
23865: LD_INT 81
23867: PUSH
23868: LD_VAR 0 1
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PPUSH
23877: CALL_OW 70
23881: ST_TO_ADDR
// end ;
23882: LD_VAR 0 3
23886: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23887: LD_INT 0
23889: PPUSH
23890: PPUSH
23891: PPUSH
23892: PPUSH
// result := false ;
23893: LD_ADDR_VAR 0 2
23897: PUSH
23898: LD_INT 0
23900: ST_TO_ADDR
// side := GetSide ( unit ) ;
23901: LD_ADDR_VAR 0 3
23905: PUSH
23906: LD_VAR 0 1
23910: PPUSH
23911: CALL_OW 255
23915: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23916: LD_ADDR_VAR 0 4
23920: PUSH
23921: LD_VAR 0 1
23925: PPUSH
23926: CALL_OW 248
23930: ST_TO_ADDR
// case nat of 1 :
23931: LD_VAR 0 4
23935: PUSH
23936: LD_INT 1
23938: DOUBLE
23939: EQUAL
23940: IFTRUE 23944
23942: GO 23955
23944: POP
// tech := tech_lassight ; 2 :
23945: LD_ADDR_VAR 0 5
23949: PUSH
23950: LD_INT 12
23952: ST_TO_ADDR
23953: GO 23994
23955: LD_INT 2
23957: DOUBLE
23958: EQUAL
23959: IFTRUE 23963
23961: GO 23974
23963: POP
// tech := tech_mortar ; 3 :
23964: LD_ADDR_VAR 0 5
23968: PUSH
23969: LD_INT 41
23971: ST_TO_ADDR
23972: GO 23994
23974: LD_INT 3
23976: DOUBLE
23977: EQUAL
23978: IFTRUE 23982
23980: GO 23993
23982: POP
// tech := tech_bazooka ; end ;
23983: LD_ADDR_VAR 0 5
23987: PUSH
23988: LD_INT 44
23990: ST_TO_ADDR
23991: GO 23994
23993: POP
// if Researched ( side , tech ) then
23994: LD_VAR 0 3
23998: PPUSH
23999: LD_VAR 0 5
24003: PPUSH
24004: CALL_OW 325
24008: IFFALSE 24035
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24010: LD_ADDR_VAR 0 2
24014: PUSH
24015: LD_INT 5
24017: PUSH
24018: LD_INT 8
24020: PUSH
24021: LD_INT 9
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: LIST
24028: PUSH
24029: LD_VAR 0 4
24033: ARRAY
24034: ST_TO_ADDR
// end ;
24035: LD_VAR 0 2
24039: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24040: LD_INT 0
24042: PPUSH
24043: PPUSH
24044: PPUSH
// if not mines then
24045: LD_VAR 0 2
24049: NOT
24050: IFFALSE 24054
// exit ;
24052: GO 24198
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24054: LD_ADDR_VAR 0 5
24058: PUSH
24059: LD_INT 81
24061: PUSH
24062: LD_VAR 0 1
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PUSH
24071: LD_INT 3
24073: PUSH
24074: LD_INT 21
24076: PUSH
24077: LD_INT 3
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PPUSH
24092: CALL_OW 69
24096: ST_TO_ADDR
// for i in mines do
24097: LD_ADDR_VAR 0 4
24101: PUSH
24102: LD_VAR 0 2
24106: PUSH
24107: FOR_IN
24108: IFFALSE 24196
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24110: LD_VAR 0 4
24114: PUSH
24115: LD_INT 1
24117: ARRAY
24118: PPUSH
24119: LD_VAR 0 4
24123: PUSH
24124: LD_INT 2
24126: ARRAY
24127: PPUSH
24128: CALL_OW 458
24132: NOT
24133: IFFALSE 24137
// continue ;
24135: GO 24107
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24137: LD_VAR 0 4
24141: PUSH
24142: LD_INT 1
24144: ARRAY
24145: PPUSH
24146: LD_VAR 0 4
24150: PUSH
24151: LD_INT 2
24153: ARRAY
24154: PPUSH
24155: CALL_OW 428
24159: PUSH
24160: LD_VAR 0 5
24164: IN
24165: IFFALSE 24194
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24167: LD_VAR 0 4
24171: PUSH
24172: LD_INT 1
24174: ARRAY
24175: PPUSH
24176: LD_VAR 0 4
24180: PUSH
24181: LD_INT 2
24183: ARRAY
24184: PPUSH
24185: LD_VAR 0 1
24189: PPUSH
24190: CALL_OW 456
// end ;
24194: GO 24107
24196: POP
24197: POP
// end ;
24198: LD_VAR 0 3
24202: RET
// export function Count ( array ) ; var i ; begin
24203: LD_INT 0
24205: PPUSH
24206: PPUSH
// result := 0 ;
24207: LD_ADDR_VAR 0 2
24211: PUSH
24212: LD_INT 0
24214: ST_TO_ADDR
// for i in array do
24215: LD_ADDR_VAR 0 3
24219: PUSH
24220: LD_VAR 0 1
24224: PUSH
24225: FOR_IN
24226: IFFALSE 24250
// if i then
24228: LD_VAR 0 3
24232: IFFALSE 24248
// result := result + 1 ;
24234: LD_ADDR_VAR 0 2
24238: PUSH
24239: LD_VAR 0 2
24243: PUSH
24244: LD_INT 1
24246: PLUS
24247: ST_TO_ADDR
24248: GO 24225
24250: POP
24251: POP
// end ;
24252: LD_VAR 0 2
24256: RET
// export function IsEmpty ( building ) ; begin
24257: LD_INT 0
24259: PPUSH
// if not building then
24260: LD_VAR 0 1
24264: NOT
24265: IFFALSE 24269
// exit ;
24267: GO 24312
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24269: LD_ADDR_VAR 0 2
24273: PUSH
24274: LD_VAR 0 1
24278: PUSH
24279: LD_INT 22
24281: PUSH
24282: LD_VAR 0 1
24286: PPUSH
24287: CALL_OW 255
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 58
24298: PUSH
24299: EMPTY
24300: LIST
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PPUSH
24306: CALL_OW 69
24310: IN
24311: ST_TO_ADDR
// end ;
24312: LD_VAR 0 2
24316: RET
// export function IsNotFull ( building ) ; var places ; begin
24317: LD_INT 0
24319: PPUSH
24320: PPUSH
// if not building then
24321: LD_VAR 0 1
24325: NOT
24326: IFFALSE 24330
// exit ;
24328: GO 24501
// result := false ;
24330: LD_ADDR_VAR 0 2
24334: PUSH
24335: LD_INT 0
24337: ST_TO_ADDR
// places := 0 ;
24338: LD_ADDR_VAR 0 3
24342: PUSH
24343: LD_INT 0
24345: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
24346: LD_VAR 0 1
24350: PPUSH
24351: CALL_OW 266
24355: PUSH
24356: LD_INT 0
24358: DOUBLE
24359: EQUAL
24360: IFTRUE 24418
24362: LD_INT 1
24364: DOUBLE
24365: EQUAL
24366: IFTRUE 24418
24368: LD_INT 6
24370: DOUBLE
24371: EQUAL
24372: IFTRUE 24418
24374: LD_INT 7
24376: DOUBLE
24377: EQUAL
24378: IFTRUE 24418
24380: LD_INT 8
24382: DOUBLE
24383: EQUAL
24384: IFTRUE 24418
24386: LD_INT 4
24388: DOUBLE
24389: EQUAL
24390: IFTRUE 24418
24392: LD_INT 5
24394: DOUBLE
24395: EQUAL
24396: IFTRUE 24418
24398: LD_INT 2
24400: DOUBLE
24401: EQUAL
24402: IFTRUE 24418
24404: LD_INT 3
24406: DOUBLE
24407: EQUAL
24408: IFTRUE 24418
24410: LD_INT 35
24412: DOUBLE
24413: EQUAL
24414: IFTRUE 24418
24416: GO 24429
24418: POP
// places := 6 ; b_bunker , b_breastwork :
24419: LD_ADDR_VAR 0 3
24423: PUSH
24424: LD_INT 6
24426: ST_TO_ADDR
24427: GO 24474
24429: LD_INT 32
24431: DOUBLE
24432: EQUAL
24433: IFTRUE 24443
24435: LD_INT 31
24437: DOUBLE
24438: EQUAL
24439: IFTRUE 24443
24441: GO 24454
24443: POP
// places := 1 ; b_control_tower :
24444: LD_ADDR_VAR 0 3
24448: PUSH
24449: LD_INT 1
24451: ST_TO_ADDR
24452: GO 24474
24454: LD_INT 36
24456: DOUBLE
24457: EQUAL
24458: IFTRUE 24462
24460: GO 24473
24462: POP
// places := 3 ; end ;
24463: LD_ADDR_VAR 0 3
24467: PUSH
24468: LD_INT 3
24470: ST_TO_ADDR
24471: GO 24474
24473: POP
// if places then
24474: LD_VAR 0 3
24478: IFFALSE 24501
// result := UnitsInside ( building ) < places ;
24480: LD_ADDR_VAR 0 2
24484: PUSH
24485: LD_VAR 0 1
24489: PPUSH
24490: CALL_OW 313
24494: PUSH
24495: LD_VAR 0 3
24499: LESS
24500: ST_TO_ADDR
// end ;
24501: LD_VAR 0 2
24505: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24506: LD_INT 0
24508: PPUSH
24509: PPUSH
24510: PPUSH
24511: PPUSH
// tmp := [ ] ;
24512: LD_ADDR_VAR 0 3
24516: PUSH
24517: EMPTY
24518: ST_TO_ADDR
// list := [ ] ;
24519: LD_ADDR_VAR 0 5
24523: PUSH
24524: EMPTY
24525: ST_TO_ADDR
// for i = 16 to 25 do
24526: LD_ADDR_VAR 0 4
24530: PUSH
24531: DOUBLE
24532: LD_INT 16
24534: DEC
24535: ST_TO_ADDR
24536: LD_INT 25
24538: PUSH
24539: FOR_TO
24540: IFFALSE 24613
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24542: LD_ADDR_VAR 0 3
24546: PUSH
24547: LD_VAR 0 3
24551: PUSH
24552: LD_INT 22
24554: PUSH
24555: LD_VAR 0 1
24559: PPUSH
24560: CALL_OW 255
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 91
24571: PUSH
24572: LD_VAR 0 1
24576: PUSH
24577: LD_INT 6
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 30
24587: PUSH
24588: LD_VAR 0 4
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: LIST
24601: PUSH
24602: EMPTY
24603: LIST
24604: PPUSH
24605: CALL_OW 69
24609: ADD
24610: ST_TO_ADDR
24611: GO 24539
24613: POP
24614: POP
// for i = 1 to tmp do
24615: LD_ADDR_VAR 0 4
24619: PUSH
24620: DOUBLE
24621: LD_INT 1
24623: DEC
24624: ST_TO_ADDR
24625: LD_VAR 0 3
24629: PUSH
24630: FOR_TO
24631: IFFALSE 24719
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24633: LD_ADDR_VAR 0 5
24637: PUSH
24638: LD_VAR 0 5
24642: PUSH
24643: LD_VAR 0 3
24647: PUSH
24648: LD_VAR 0 4
24652: ARRAY
24653: PPUSH
24654: CALL_OW 266
24658: PUSH
24659: LD_VAR 0 3
24663: PUSH
24664: LD_VAR 0 4
24668: ARRAY
24669: PPUSH
24670: CALL_OW 250
24674: PUSH
24675: LD_VAR 0 3
24679: PUSH
24680: LD_VAR 0 4
24684: ARRAY
24685: PPUSH
24686: CALL_OW 251
24690: PUSH
24691: LD_VAR 0 3
24695: PUSH
24696: LD_VAR 0 4
24700: ARRAY
24701: PPUSH
24702: CALL_OW 254
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: PUSH
24713: EMPTY
24714: LIST
24715: ADD
24716: ST_TO_ADDR
24717: GO 24630
24719: POP
24720: POP
// result := list ;
24721: LD_ADDR_VAR 0 2
24725: PUSH
24726: LD_VAR 0 5
24730: ST_TO_ADDR
// end ;
24731: LD_VAR 0 2
24735: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24736: LD_INT 0
24738: PPUSH
24739: PPUSH
24740: PPUSH
24741: PPUSH
24742: PPUSH
24743: PPUSH
24744: PPUSH
// if not factory then
24745: LD_VAR 0 1
24749: NOT
24750: IFFALSE 24754
// exit ;
24752: GO 25347
// if control = control_apeman then
24754: LD_VAR 0 4
24758: PUSH
24759: LD_INT 5
24761: EQUAL
24762: IFFALSE 24871
// begin tmp := UnitsInside ( factory ) ;
24764: LD_ADDR_VAR 0 8
24768: PUSH
24769: LD_VAR 0 1
24773: PPUSH
24774: CALL_OW 313
24778: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24779: LD_VAR 0 8
24783: PPUSH
24784: LD_INT 25
24786: PUSH
24787: LD_INT 12
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PPUSH
24794: CALL_OW 72
24798: NOT
24799: IFFALSE 24809
// control := control_manual ;
24801: LD_ADDR_VAR 0 4
24805: PUSH
24806: LD_INT 1
24808: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24809: LD_ADDR_VAR 0 8
24813: PUSH
24814: LD_VAR 0 1
24818: PPUSH
24819: CALL 24506 0 1
24823: ST_TO_ADDR
// if tmp then
24824: LD_VAR 0 8
24828: IFFALSE 24871
// begin for i in tmp do
24830: LD_ADDR_VAR 0 7
24834: PUSH
24835: LD_VAR 0 8
24839: PUSH
24840: FOR_IN
24841: IFFALSE 24869
// if i [ 1 ] = b_ext_radio then
24843: LD_VAR 0 7
24847: PUSH
24848: LD_INT 1
24850: ARRAY
24851: PUSH
24852: LD_INT 22
24854: EQUAL
24855: IFFALSE 24867
// begin control := control_remote ;
24857: LD_ADDR_VAR 0 4
24861: PUSH
24862: LD_INT 2
24864: ST_TO_ADDR
// break ;
24865: GO 24869
// end ;
24867: GO 24840
24869: POP
24870: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24871: LD_VAR 0 1
24875: PPUSH
24876: LD_VAR 0 2
24880: PPUSH
24881: LD_VAR 0 3
24885: PPUSH
24886: LD_VAR 0 4
24890: PPUSH
24891: LD_VAR 0 5
24895: PPUSH
24896: CALL_OW 448
24900: IFFALSE 24935
// begin result := [ chassis , engine , control , weapon ] ;
24902: LD_ADDR_VAR 0 6
24906: PUSH
24907: LD_VAR 0 2
24911: PUSH
24912: LD_VAR 0 3
24916: PUSH
24917: LD_VAR 0 4
24921: PUSH
24922: LD_VAR 0 5
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: ST_TO_ADDR
// exit ;
24933: GO 25347
// end ; _chassis := AvailableChassisList ( factory ) ;
24935: LD_ADDR_VAR 0 9
24939: PUSH
24940: LD_VAR 0 1
24944: PPUSH
24945: CALL_OW 475
24949: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24950: LD_ADDR_VAR 0 11
24954: PUSH
24955: LD_VAR 0 1
24959: PPUSH
24960: CALL_OW 476
24964: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24965: LD_ADDR_VAR 0 12
24969: PUSH
24970: LD_VAR 0 1
24974: PPUSH
24975: CALL_OW 477
24979: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24980: LD_ADDR_VAR 0 10
24984: PUSH
24985: LD_VAR 0 1
24989: PPUSH
24990: CALL_OW 478
24994: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24995: LD_VAR 0 9
24999: NOT
25000: PUSH
25001: LD_VAR 0 11
25005: NOT
25006: OR
25007: PUSH
25008: LD_VAR 0 12
25012: NOT
25013: OR
25014: PUSH
25015: LD_VAR 0 10
25019: NOT
25020: OR
25021: IFFALSE 25056
// begin result := [ chassis , engine , control , weapon ] ;
25023: LD_ADDR_VAR 0 6
25027: PUSH
25028: LD_VAR 0 2
25032: PUSH
25033: LD_VAR 0 3
25037: PUSH
25038: LD_VAR 0 4
25042: PUSH
25043: LD_VAR 0 5
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: ST_TO_ADDR
// exit ;
25054: GO 25347
// end ; if not chassis in _chassis then
25056: LD_VAR 0 2
25060: PUSH
25061: LD_VAR 0 9
25065: IN
25066: NOT
25067: IFFALSE 25093
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25069: LD_ADDR_VAR 0 2
25073: PUSH
25074: LD_VAR 0 9
25078: PUSH
25079: LD_INT 1
25081: PPUSH
25082: LD_VAR 0 9
25086: PPUSH
25087: CALL_OW 12
25091: ARRAY
25092: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25093: LD_VAR 0 2
25097: PPUSH
25098: LD_VAR 0 3
25102: PPUSH
25103: CALL 25352 0 2
25107: NOT
25108: IFFALSE 25167
// repeat engine := _engine [ 1 ] ;
25110: LD_ADDR_VAR 0 3
25114: PUSH
25115: LD_VAR 0 11
25119: PUSH
25120: LD_INT 1
25122: ARRAY
25123: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25124: LD_ADDR_VAR 0 11
25128: PUSH
25129: LD_VAR 0 11
25133: PPUSH
25134: LD_INT 1
25136: PPUSH
25137: CALL_OW 3
25141: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25142: LD_VAR 0 2
25146: PPUSH
25147: LD_VAR 0 3
25151: PPUSH
25152: CALL 25352 0 2
25156: PUSH
25157: LD_VAR 0 11
25161: PUSH
25162: EMPTY
25163: EQUAL
25164: OR
25165: IFFALSE 25110
// if not control in _control then
25167: LD_VAR 0 4
25171: PUSH
25172: LD_VAR 0 12
25176: IN
25177: NOT
25178: IFFALSE 25204
// control := _control [ rand ( 1 , _control ) ] ;
25180: LD_ADDR_VAR 0 4
25184: PUSH
25185: LD_VAR 0 12
25189: PUSH
25190: LD_INT 1
25192: PPUSH
25193: LD_VAR 0 12
25197: PPUSH
25198: CALL_OW 12
25202: ARRAY
25203: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25204: LD_VAR 0 2
25208: PPUSH
25209: LD_VAR 0 5
25213: PPUSH
25214: CALL 25572 0 2
25218: NOT
25219: IFFALSE 25278
// repeat weapon := _weapon [ 1 ] ;
25221: LD_ADDR_VAR 0 5
25225: PUSH
25226: LD_VAR 0 10
25230: PUSH
25231: LD_INT 1
25233: ARRAY
25234: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25235: LD_ADDR_VAR 0 10
25239: PUSH
25240: LD_VAR 0 10
25244: PPUSH
25245: LD_INT 1
25247: PPUSH
25248: CALL_OW 3
25252: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25253: LD_VAR 0 2
25257: PPUSH
25258: LD_VAR 0 5
25262: PPUSH
25263: CALL 25572 0 2
25267: PUSH
25268: LD_VAR 0 10
25272: PUSH
25273: EMPTY
25274: EQUAL
25275: OR
25276: IFFALSE 25221
// result := [ ] ;
25278: LD_ADDR_VAR 0 6
25282: PUSH
25283: EMPTY
25284: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25285: LD_VAR 0 1
25289: PPUSH
25290: LD_VAR 0 2
25294: PPUSH
25295: LD_VAR 0 3
25299: PPUSH
25300: LD_VAR 0 4
25304: PPUSH
25305: LD_VAR 0 5
25309: PPUSH
25310: CALL_OW 448
25314: IFFALSE 25347
// result := [ chassis , engine , control , weapon ] ;
25316: LD_ADDR_VAR 0 6
25320: PUSH
25321: LD_VAR 0 2
25325: PUSH
25326: LD_VAR 0 3
25330: PUSH
25331: LD_VAR 0 4
25335: PUSH
25336: LD_VAR 0 5
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: ST_TO_ADDR
// end ;
25347: LD_VAR 0 6
25351: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25352: LD_INT 0
25354: PPUSH
// if not chassis or not engine then
25355: LD_VAR 0 1
25359: NOT
25360: PUSH
25361: LD_VAR 0 2
25365: NOT
25366: OR
25367: IFFALSE 25371
// exit ;
25369: GO 25567
// case engine of engine_solar :
25371: LD_VAR 0 2
25375: PUSH
25376: LD_INT 2
25378: DOUBLE
25379: EQUAL
25380: IFTRUE 25384
25382: GO 25422
25384: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25385: LD_ADDR_VAR 0 3
25389: PUSH
25390: LD_INT 11
25392: PUSH
25393: LD_INT 12
25395: PUSH
25396: LD_INT 13
25398: PUSH
25399: LD_INT 14
25401: PUSH
25402: LD_INT 1
25404: PUSH
25405: LD_INT 2
25407: PUSH
25408: LD_INT 3
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: ST_TO_ADDR
25420: GO 25551
25422: LD_INT 1
25424: DOUBLE
25425: EQUAL
25426: IFTRUE 25430
25428: GO 25492
25430: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25431: LD_ADDR_VAR 0 3
25435: PUSH
25436: LD_INT 11
25438: PUSH
25439: LD_INT 12
25441: PUSH
25442: LD_INT 13
25444: PUSH
25445: LD_INT 14
25447: PUSH
25448: LD_INT 1
25450: PUSH
25451: LD_INT 2
25453: PUSH
25454: LD_INT 3
25456: PUSH
25457: LD_INT 4
25459: PUSH
25460: LD_INT 5
25462: PUSH
25463: LD_INT 21
25465: PUSH
25466: LD_INT 23
25468: PUSH
25469: LD_INT 22
25471: PUSH
25472: LD_INT 24
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: ST_TO_ADDR
25490: GO 25551
25492: LD_INT 3
25494: DOUBLE
25495: EQUAL
25496: IFTRUE 25500
25498: GO 25550
25500: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25501: LD_ADDR_VAR 0 3
25505: PUSH
25506: LD_INT 13
25508: PUSH
25509: LD_INT 14
25511: PUSH
25512: LD_INT 2
25514: PUSH
25515: LD_INT 3
25517: PUSH
25518: LD_INT 4
25520: PUSH
25521: LD_INT 5
25523: PUSH
25524: LD_INT 21
25526: PUSH
25527: LD_INT 22
25529: PUSH
25530: LD_INT 23
25532: PUSH
25533: LD_INT 24
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: ST_TO_ADDR
25548: GO 25551
25550: POP
// result := ( chassis in result ) ;
25551: LD_ADDR_VAR 0 3
25555: PUSH
25556: LD_VAR 0 1
25560: PUSH
25561: LD_VAR 0 3
25565: IN
25566: ST_TO_ADDR
// end ;
25567: LD_VAR 0 3
25571: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25572: LD_INT 0
25574: PPUSH
// if not chassis or not weapon then
25575: LD_VAR 0 1
25579: NOT
25580: PUSH
25581: LD_VAR 0 2
25585: NOT
25586: OR
25587: IFFALSE 25591
// exit ;
25589: GO 26651
// case weapon of us_machine_gun :
25591: LD_VAR 0 2
25595: PUSH
25596: LD_INT 2
25598: DOUBLE
25599: EQUAL
25600: IFTRUE 25604
25602: GO 25634
25604: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25605: LD_ADDR_VAR 0 3
25609: PUSH
25610: LD_INT 1
25612: PUSH
25613: LD_INT 2
25615: PUSH
25616: LD_INT 3
25618: PUSH
25619: LD_INT 4
25621: PUSH
25622: LD_INT 5
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: ST_TO_ADDR
25632: GO 26635
25634: LD_INT 3
25636: DOUBLE
25637: EQUAL
25638: IFTRUE 25642
25640: GO 25672
25642: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25643: LD_ADDR_VAR 0 3
25647: PUSH
25648: LD_INT 1
25650: PUSH
25651: LD_INT 2
25653: PUSH
25654: LD_INT 3
25656: PUSH
25657: LD_INT 4
25659: PUSH
25660: LD_INT 5
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: ST_TO_ADDR
25670: GO 26635
25672: LD_INT 11
25674: DOUBLE
25675: EQUAL
25676: IFTRUE 25680
25678: GO 25710
25680: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25681: LD_ADDR_VAR 0 3
25685: PUSH
25686: LD_INT 1
25688: PUSH
25689: LD_INT 2
25691: PUSH
25692: LD_INT 3
25694: PUSH
25695: LD_INT 4
25697: PUSH
25698: LD_INT 5
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: ST_TO_ADDR
25708: GO 26635
25710: LD_INT 4
25712: DOUBLE
25713: EQUAL
25714: IFTRUE 25718
25716: GO 25744
25718: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25719: LD_ADDR_VAR 0 3
25723: PUSH
25724: LD_INT 2
25726: PUSH
25727: LD_INT 3
25729: PUSH
25730: LD_INT 4
25732: PUSH
25733: LD_INT 5
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: ST_TO_ADDR
25742: GO 26635
25744: LD_INT 5
25746: DOUBLE
25747: EQUAL
25748: IFTRUE 25752
25750: GO 25778
25752: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25753: LD_ADDR_VAR 0 3
25757: PUSH
25758: LD_INT 2
25760: PUSH
25761: LD_INT 3
25763: PUSH
25764: LD_INT 4
25766: PUSH
25767: LD_INT 5
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: ST_TO_ADDR
25776: GO 26635
25778: LD_INT 9
25780: DOUBLE
25781: EQUAL
25782: IFTRUE 25786
25784: GO 25812
25786: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25787: LD_ADDR_VAR 0 3
25791: PUSH
25792: LD_INT 2
25794: PUSH
25795: LD_INT 3
25797: PUSH
25798: LD_INT 4
25800: PUSH
25801: LD_INT 5
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: ST_TO_ADDR
25810: GO 26635
25812: LD_INT 7
25814: DOUBLE
25815: EQUAL
25816: IFTRUE 25820
25818: GO 25846
25820: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25821: LD_ADDR_VAR 0 3
25825: PUSH
25826: LD_INT 2
25828: PUSH
25829: LD_INT 3
25831: PUSH
25832: LD_INT 4
25834: PUSH
25835: LD_INT 5
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: ST_TO_ADDR
25844: GO 26635
25846: LD_INT 12
25848: DOUBLE
25849: EQUAL
25850: IFTRUE 25854
25852: GO 25880
25854: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25855: LD_ADDR_VAR 0 3
25859: PUSH
25860: LD_INT 2
25862: PUSH
25863: LD_INT 3
25865: PUSH
25866: LD_INT 4
25868: PUSH
25869: LD_INT 5
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: ST_TO_ADDR
25878: GO 26635
25880: LD_INT 13
25882: DOUBLE
25883: EQUAL
25884: IFTRUE 25888
25886: GO 25914
25888: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25889: LD_ADDR_VAR 0 3
25893: PUSH
25894: LD_INT 2
25896: PUSH
25897: LD_INT 3
25899: PUSH
25900: LD_INT 4
25902: PUSH
25903: LD_INT 5
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: ST_TO_ADDR
25912: GO 26635
25914: LD_INT 14
25916: DOUBLE
25917: EQUAL
25918: IFTRUE 25922
25920: GO 25940
25922: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25923: LD_ADDR_VAR 0 3
25927: PUSH
25928: LD_INT 4
25930: PUSH
25931: LD_INT 5
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: ST_TO_ADDR
25938: GO 26635
25940: LD_INT 6
25942: DOUBLE
25943: EQUAL
25944: IFTRUE 25948
25946: GO 25966
25948: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25949: LD_ADDR_VAR 0 3
25953: PUSH
25954: LD_INT 4
25956: PUSH
25957: LD_INT 5
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: ST_TO_ADDR
25964: GO 26635
25966: LD_INT 10
25968: DOUBLE
25969: EQUAL
25970: IFTRUE 25974
25972: GO 25992
25974: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25975: LD_ADDR_VAR 0 3
25979: PUSH
25980: LD_INT 4
25982: PUSH
25983: LD_INT 5
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: ST_TO_ADDR
25990: GO 26635
25992: LD_INT 22
25994: DOUBLE
25995: EQUAL
25996: IFTRUE 26000
25998: GO 26026
26000: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26001: LD_ADDR_VAR 0 3
26005: PUSH
26006: LD_INT 11
26008: PUSH
26009: LD_INT 12
26011: PUSH
26012: LD_INT 13
26014: PUSH
26015: LD_INT 14
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: ST_TO_ADDR
26024: GO 26635
26026: LD_INT 23
26028: DOUBLE
26029: EQUAL
26030: IFTRUE 26034
26032: GO 26060
26034: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26035: LD_ADDR_VAR 0 3
26039: PUSH
26040: LD_INT 11
26042: PUSH
26043: LD_INT 12
26045: PUSH
26046: LD_INT 13
26048: PUSH
26049: LD_INT 14
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: ST_TO_ADDR
26058: GO 26635
26060: LD_INT 24
26062: DOUBLE
26063: EQUAL
26064: IFTRUE 26068
26066: GO 26094
26068: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26069: LD_ADDR_VAR 0 3
26073: PUSH
26074: LD_INT 11
26076: PUSH
26077: LD_INT 12
26079: PUSH
26080: LD_INT 13
26082: PUSH
26083: LD_INT 14
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: ST_TO_ADDR
26092: GO 26635
26094: LD_INT 30
26096: DOUBLE
26097: EQUAL
26098: IFTRUE 26102
26100: GO 26128
26102: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26103: LD_ADDR_VAR 0 3
26107: PUSH
26108: LD_INT 11
26110: PUSH
26111: LD_INT 12
26113: PUSH
26114: LD_INT 13
26116: PUSH
26117: LD_INT 14
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: ST_TO_ADDR
26126: GO 26635
26128: LD_INT 25
26130: DOUBLE
26131: EQUAL
26132: IFTRUE 26136
26134: GO 26154
26136: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26137: LD_ADDR_VAR 0 3
26141: PUSH
26142: LD_INT 13
26144: PUSH
26145: LD_INT 14
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: ST_TO_ADDR
26152: GO 26635
26154: LD_INT 27
26156: DOUBLE
26157: EQUAL
26158: IFTRUE 26162
26160: GO 26180
26162: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
26163: LD_ADDR_VAR 0 3
26167: PUSH
26168: LD_INT 13
26170: PUSH
26171: LD_INT 14
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: ST_TO_ADDR
26178: GO 26635
26180: LD_INT 92
26182: DOUBLE
26183: EQUAL
26184: IFTRUE 26188
26186: GO 26214
26188: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26189: LD_ADDR_VAR 0 3
26193: PUSH
26194: LD_INT 11
26196: PUSH
26197: LD_INT 12
26199: PUSH
26200: LD_INT 13
26202: PUSH
26203: LD_INT 14
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: ST_TO_ADDR
26212: GO 26635
26214: LD_INT 28
26216: DOUBLE
26217: EQUAL
26218: IFTRUE 26222
26220: GO 26240
26222: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26223: LD_ADDR_VAR 0 3
26227: PUSH
26228: LD_INT 13
26230: PUSH
26231: LD_INT 14
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: ST_TO_ADDR
26238: GO 26635
26240: LD_INT 29
26242: DOUBLE
26243: EQUAL
26244: IFTRUE 26248
26246: GO 26266
26248: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26249: LD_ADDR_VAR 0 3
26253: PUSH
26254: LD_INT 13
26256: PUSH
26257: LD_INT 14
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: ST_TO_ADDR
26264: GO 26635
26266: LD_INT 31
26268: DOUBLE
26269: EQUAL
26270: IFTRUE 26274
26272: GO 26292
26274: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26275: LD_ADDR_VAR 0 3
26279: PUSH
26280: LD_INT 13
26282: PUSH
26283: LD_INT 14
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: ST_TO_ADDR
26290: GO 26635
26292: LD_INT 26
26294: DOUBLE
26295: EQUAL
26296: IFTRUE 26300
26298: GO 26318
26300: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26301: LD_ADDR_VAR 0 3
26305: PUSH
26306: LD_INT 13
26308: PUSH
26309: LD_INT 14
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: ST_TO_ADDR
26316: GO 26635
26318: LD_INT 42
26320: DOUBLE
26321: EQUAL
26322: IFTRUE 26326
26324: GO 26352
26326: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26327: LD_ADDR_VAR 0 3
26331: PUSH
26332: LD_INT 21
26334: PUSH
26335: LD_INT 22
26337: PUSH
26338: LD_INT 23
26340: PUSH
26341: LD_INT 24
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: ST_TO_ADDR
26350: GO 26635
26352: LD_INT 43
26354: DOUBLE
26355: EQUAL
26356: IFTRUE 26360
26358: GO 26386
26360: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26361: LD_ADDR_VAR 0 3
26365: PUSH
26366: LD_INT 21
26368: PUSH
26369: LD_INT 22
26371: PUSH
26372: LD_INT 23
26374: PUSH
26375: LD_INT 24
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: ST_TO_ADDR
26384: GO 26635
26386: LD_INT 44
26388: DOUBLE
26389: EQUAL
26390: IFTRUE 26394
26392: GO 26420
26394: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26395: LD_ADDR_VAR 0 3
26399: PUSH
26400: LD_INT 21
26402: PUSH
26403: LD_INT 22
26405: PUSH
26406: LD_INT 23
26408: PUSH
26409: LD_INT 24
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: ST_TO_ADDR
26418: GO 26635
26420: LD_INT 45
26422: DOUBLE
26423: EQUAL
26424: IFTRUE 26428
26426: GO 26454
26428: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26429: LD_ADDR_VAR 0 3
26433: PUSH
26434: LD_INT 21
26436: PUSH
26437: LD_INT 22
26439: PUSH
26440: LD_INT 23
26442: PUSH
26443: LD_INT 24
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: ST_TO_ADDR
26452: GO 26635
26454: LD_INT 49
26456: DOUBLE
26457: EQUAL
26458: IFTRUE 26462
26460: GO 26488
26462: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26463: LD_ADDR_VAR 0 3
26467: PUSH
26468: LD_INT 21
26470: PUSH
26471: LD_INT 22
26473: PUSH
26474: LD_INT 23
26476: PUSH
26477: LD_INT 24
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: ST_TO_ADDR
26486: GO 26635
26488: LD_INT 51
26490: DOUBLE
26491: EQUAL
26492: IFTRUE 26496
26494: GO 26522
26496: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26497: LD_ADDR_VAR 0 3
26501: PUSH
26502: LD_INT 21
26504: PUSH
26505: LD_INT 22
26507: PUSH
26508: LD_INT 23
26510: PUSH
26511: LD_INT 24
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: ST_TO_ADDR
26520: GO 26635
26522: LD_INT 52
26524: DOUBLE
26525: EQUAL
26526: IFTRUE 26530
26528: GO 26556
26530: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26531: LD_ADDR_VAR 0 3
26535: PUSH
26536: LD_INT 21
26538: PUSH
26539: LD_INT 22
26541: PUSH
26542: LD_INT 23
26544: PUSH
26545: LD_INT 24
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: ST_TO_ADDR
26554: GO 26635
26556: LD_INT 53
26558: DOUBLE
26559: EQUAL
26560: IFTRUE 26564
26562: GO 26582
26564: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26565: LD_ADDR_VAR 0 3
26569: PUSH
26570: LD_INT 23
26572: PUSH
26573: LD_INT 24
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: ST_TO_ADDR
26580: GO 26635
26582: LD_INT 46
26584: DOUBLE
26585: EQUAL
26586: IFTRUE 26590
26588: GO 26608
26590: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26591: LD_ADDR_VAR 0 3
26595: PUSH
26596: LD_INT 23
26598: PUSH
26599: LD_INT 24
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: ST_TO_ADDR
26606: GO 26635
26608: LD_INT 47
26610: DOUBLE
26611: EQUAL
26612: IFTRUE 26616
26614: GO 26634
26616: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26617: LD_ADDR_VAR 0 3
26621: PUSH
26622: LD_INT 23
26624: PUSH
26625: LD_INT 24
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: ST_TO_ADDR
26632: GO 26635
26634: POP
// result := ( chassis in result ) ;
26635: LD_ADDR_VAR 0 3
26639: PUSH
26640: LD_VAR 0 1
26644: PUSH
26645: LD_VAR 0 3
26649: IN
26650: ST_TO_ADDR
// end ;
26651: LD_VAR 0 3
26655: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26656: LD_INT 0
26658: PPUSH
26659: PPUSH
26660: PPUSH
26661: PPUSH
26662: PPUSH
26663: PPUSH
26664: PPUSH
// result := array ;
26665: LD_ADDR_VAR 0 5
26669: PUSH
26670: LD_VAR 0 1
26674: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26675: LD_VAR 0 1
26679: NOT
26680: PUSH
26681: LD_VAR 0 2
26685: NOT
26686: OR
26687: PUSH
26688: LD_VAR 0 3
26692: NOT
26693: OR
26694: PUSH
26695: LD_VAR 0 2
26699: PUSH
26700: LD_VAR 0 1
26704: GREATER
26705: OR
26706: PUSH
26707: LD_VAR 0 3
26711: PUSH
26712: LD_VAR 0 1
26716: GREATER
26717: OR
26718: IFFALSE 26722
// exit ;
26720: GO 27018
// if direction then
26722: LD_VAR 0 4
26726: IFFALSE 26790
// begin d := 1 ;
26728: LD_ADDR_VAR 0 9
26732: PUSH
26733: LD_INT 1
26735: ST_TO_ADDR
// if i_from > i_to then
26736: LD_VAR 0 2
26740: PUSH
26741: LD_VAR 0 3
26745: GREATER
26746: IFFALSE 26772
// length := ( array - i_from ) + i_to else
26748: LD_ADDR_VAR 0 11
26752: PUSH
26753: LD_VAR 0 1
26757: PUSH
26758: LD_VAR 0 2
26762: MINUS
26763: PUSH
26764: LD_VAR 0 3
26768: PLUS
26769: ST_TO_ADDR
26770: GO 26788
// length := i_to - i_from ;
26772: LD_ADDR_VAR 0 11
26776: PUSH
26777: LD_VAR 0 3
26781: PUSH
26782: LD_VAR 0 2
26786: MINUS
26787: ST_TO_ADDR
// end else
26788: GO 26851
// begin d := - 1 ;
26790: LD_ADDR_VAR 0 9
26794: PUSH
26795: LD_INT 1
26797: NEG
26798: ST_TO_ADDR
// if i_from > i_to then
26799: LD_VAR 0 2
26803: PUSH
26804: LD_VAR 0 3
26808: GREATER
26809: IFFALSE 26829
// length := i_from - i_to else
26811: LD_ADDR_VAR 0 11
26815: PUSH
26816: LD_VAR 0 2
26820: PUSH
26821: LD_VAR 0 3
26825: MINUS
26826: ST_TO_ADDR
26827: GO 26851
// length := ( array - i_to ) + i_from ;
26829: LD_ADDR_VAR 0 11
26833: PUSH
26834: LD_VAR 0 1
26838: PUSH
26839: LD_VAR 0 3
26843: MINUS
26844: PUSH
26845: LD_VAR 0 2
26849: PLUS
26850: ST_TO_ADDR
// end ; if not length then
26851: LD_VAR 0 11
26855: NOT
26856: IFFALSE 26860
// exit ;
26858: GO 27018
// tmp := array ;
26860: LD_ADDR_VAR 0 10
26864: PUSH
26865: LD_VAR 0 1
26869: ST_TO_ADDR
// for i = 1 to length do
26870: LD_ADDR_VAR 0 6
26874: PUSH
26875: DOUBLE
26876: LD_INT 1
26878: DEC
26879: ST_TO_ADDR
26880: LD_VAR 0 11
26884: PUSH
26885: FOR_TO
26886: IFFALSE 27006
// begin for j = 1 to array do
26888: LD_ADDR_VAR 0 7
26892: PUSH
26893: DOUBLE
26894: LD_INT 1
26896: DEC
26897: ST_TO_ADDR
26898: LD_VAR 0 1
26902: PUSH
26903: FOR_TO
26904: IFFALSE 26992
// begin k := j + d ;
26906: LD_ADDR_VAR 0 8
26910: PUSH
26911: LD_VAR 0 7
26915: PUSH
26916: LD_VAR 0 9
26920: PLUS
26921: ST_TO_ADDR
// if k > array then
26922: LD_VAR 0 8
26926: PUSH
26927: LD_VAR 0 1
26931: GREATER
26932: IFFALSE 26942
// k := 1 ;
26934: LD_ADDR_VAR 0 8
26938: PUSH
26939: LD_INT 1
26941: ST_TO_ADDR
// if not k then
26942: LD_VAR 0 8
26946: NOT
26947: IFFALSE 26959
// k := array ;
26949: LD_ADDR_VAR 0 8
26953: PUSH
26954: LD_VAR 0 1
26958: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26959: LD_ADDR_VAR 0 10
26963: PUSH
26964: LD_VAR 0 10
26968: PPUSH
26969: LD_VAR 0 8
26973: PPUSH
26974: LD_VAR 0 1
26978: PUSH
26979: LD_VAR 0 7
26983: ARRAY
26984: PPUSH
26985: CALL_OW 1
26989: ST_TO_ADDR
// end ;
26990: GO 26903
26992: POP
26993: POP
// array := tmp ;
26994: LD_ADDR_VAR 0 1
26998: PUSH
26999: LD_VAR 0 10
27003: ST_TO_ADDR
// end ;
27004: GO 26885
27006: POP
27007: POP
// result := array ;
27008: LD_ADDR_VAR 0 5
27012: PUSH
27013: LD_VAR 0 1
27017: ST_TO_ADDR
// end ;
27018: LD_VAR 0 5
27022: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27023: LD_INT 0
27025: PPUSH
27026: PPUSH
// result := 0 ;
27027: LD_ADDR_VAR 0 3
27031: PUSH
27032: LD_INT 0
27034: ST_TO_ADDR
// if not array or not value in array then
27035: LD_VAR 0 1
27039: NOT
27040: PUSH
27041: LD_VAR 0 2
27045: PUSH
27046: LD_VAR 0 1
27050: IN
27051: NOT
27052: OR
27053: IFFALSE 27057
// exit ;
27055: GO 27111
// for i = 1 to array do
27057: LD_ADDR_VAR 0 4
27061: PUSH
27062: DOUBLE
27063: LD_INT 1
27065: DEC
27066: ST_TO_ADDR
27067: LD_VAR 0 1
27071: PUSH
27072: FOR_TO
27073: IFFALSE 27109
// if value = array [ i ] then
27075: LD_VAR 0 2
27079: PUSH
27080: LD_VAR 0 1
27084: PUSH
27085: LD_VAR 0 4
27089: ARRAY
27090: EQUAL
27091: IFFALSE 27107
// begin result := i ;
27093: LD_ADDR_VAR 0 3
27097: PUSH
27098: LD_VAR 0 4
27102: ST_TO_ADDR
// exit ;
27103: POP
27104: POP
27105: GO 27111
// end ;
27107: GO 27072
27109: POP
27110: POP
// end ;
27111: LD_VAR 0 3
27115: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27116: LD_INT 0
27118: PPUSH
// vc_chassis := chassis ;
27119: LD_ADDR_OWVAR 37
27123: PUSH
27124: LD_VAR 0 1
27128: ST_TO_ADDR
// vc_engine := engine ;
27129: LD_ADDR_OWVAR 39
27133: PUSH
27134: LD_VAR 0 2
27138: ST_TO_ADDR
// vc_control := control ;
27139: LD_ADDR_OWVAR 38
27143: PUSH
27144: LD_VAR 0 3
27148: ST_TO_ADDR
// vc_weapon := weapon ;
27149: LD_ADDR_OWVAR 40
27153: PUSH
27154: LD_VAR 0 4
27158: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27159: LD_ADDR_OWVAR 41
27163: PUSH
27164: LD_VAR 0 5
27168: ST_TO_ADDR
// end ;
27169: LD_VAR 0 6
27173: RET
// export function WantPlant ( unit ) ; var task ; begin
27174: LD_INT 0
27176: PPUSH
27177: PPUSH
// result := false ;
27178: LD_ADDR_VAR 0 2
27182: PUSH
27183: LD_INT 0
27185: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27186: LD_ADDR_VAR 0 3
27190: PUSH
27191: LD_VAR 0 1
27195: PPUSH
27196: CALL_OW 437
27200: ST_TO_ADDR
// if task then
27201: LD_VAR 0 3
27205: IFFALSE 27233
// if task [ 1 ] [ 1 ] = p then
27207: LD_VAR 0 3
27211: PUSH
27212: LD_INT 1
27214: ARRAY
27215: PUSH
27216: LD_INT 1
27218: ARRAY
27219: PUSH
27220: LD_STRING p
27222: EQUAL
27223: IFFALSE 27233
// result := true ;
27225: LD_ADDR_VAR 0 2
27229: PUSH
27230: LD_INT 1
27232: ST_TO_ADDR
// end ;
27233: LD_VAR 0 2
27237: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27238: LD_INT 0
27240: PPUSH
27241: PPUSH
27242: PPUSH
27243: PPUSH
// if pos < 1 then
27244: LD_VAR 0 2
27248: PUSH
27249: LD_INT 1
27251: LESS
27252: IFFALSE 27256
// exit ;
27254: GO 27559
// if pos = 1 then
27256: LD_VAR 0 2
27260: PUSH
27261: LD_INT 1
27263: EQUAL
27264: IFFALSE 27297
// result := Replace ( arr , pos [ 1 ] , value ) else
27266: LD_ADDR_VAR 0 4
27270: PUSH
27271: LD_VAR 0 1
27275: PPUSH
27276: LD_VAR 0 2
27280: PUSH
27281: LD_INT 1
27283: ARRAY
27284: PPUSH
27285: LD_VAR 0 3
27289: PPUSH
27290: CALL_OW 1
27294: ST_TO_ADDR
27295: GO 27559
// begin tmp := arr ;
27297: LD_ADDR_VAR 0 6
27301: PUSH
27302: LD_VAR 0 1
27306: ST_TO_ADDR
// s_arr := [ tmp ] ;
27307: LD_ADDR_VAR 0 7
27311: PUSH
27312: LD_VAR 0 6
27316: PUSH
27317: EMPTY
27318: LIST
27319: ST_TO_ADDR
// for i = 1 to pos - 1 do
27320: LD_ADDR_VAR 0 5
27324: PUSH
27325: DOUBLE
27326: LD_INT 1
27328: DEC
27329: ST_TO_ADDR
27330: LD_VAR 0 2
27334: PUSH
27335: LD_INT 1
27337: MINUS
27338: PUSH
27339: FOR_TO
27340: IFFALSE 27385
// begin tmp := tmp [ pos [ i ] ] ;
27342: LD_ADDR_VAR 0 6
27346: PUSH
27347: LD_VAR 0 6
27351: PUSH
27352: LD_VAR 0 2
27356: PUSH
27357: LD_VAR 0 5
27361: ARRAY
27362: ARRAY
27363: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27364: LD_ADDR_VAR 0 7
27368: PUSH
27369: LD_VAR 0 7
27373: PUSH
27374: LD_VAR 0 6
27378: PUSH
27379: EMPTY
27380: LIST
27381: ADD
27382: ST_TO_ADDR
// end ;
27383: GO 27339
27385: POP
27386: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27387: LD_ADDR_VAR 0 6
27391: PUSH
27392: LD_VAR 0 6
27396: PPUSH
27397: LD_VAR 0 2
27401: PUSH
27402: LD_VAR 0 2
27406: ARRAY
27407: PPUSH
27408: LD_VAR 0 3
27412: PPUSH
27413: CALL_OW 1
27417: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27418: LD_ADDR_VAR 0 7
27422: PUSH
27423: LD_VAR 0 7
27427: PPUSH
27428: LD_VAR 0 7
27432: PPUSH
27433: LD_VAR 0 6
27437: PPUSH
27438: CALL_OW 1
27442: ST_TO_ADDR
// for i = s_arr downto 2 do
27443: LD_ADDR_VAR 0 5
27447: PUSH
27448: DOUBLE
27449: LD_VAR 0 7
27453: INC
27454: ST_TO_ADDR
27455: LD_INT 2
27457: PUSH
27458: FOR_DOWNTO
27459: IFFALSE 27543
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27461: LD_ADDR_VAR 0 6
27465: PUSH
27466: LD_VAR 0 7
27470: PUSH
27471: LD_VAR 0 5
27475: PUSH
27476: LD_INT 1
27478: MINUS
27479: ARRAY
27480: PPUSH
27481: LD_VAR 0 2
27485: PUSH
27486: LD_VAR 0 5
27490: PUSH
27491: LD_INT 1
27493: MINUS
27494: ARRAY
27495: PPUSH
27496: LD_VAR 0 7
27500: PUSH
27501: LD_VAR 0 5
27505: ARRAY
27506: PPUSH
27507: CALL_OW 1
27511: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27512: LD_ADDR_VAR 0 7
27516: PUSH
27517: LD_VAR 0 7
27521: PPUSH
27522: LD_VAR 0 5
27526: PUSH
27527: LD_INT 1
27529: MINUS
27530: PPUSH
27531: LD_VAR 0 6
27535: PPUSH
27536: CALL_OW 1
27540: ST_TO_ADDR
// end ;
27541: GO 27458
27543: POP
27544: POP
// result := s_arr [ 1 ] ;
27545: LD_ADDR_VAR 0 4
27549: PUSH
27550: LD_VAR 0 7
27554: PUSH
27555: LD_INT 1
27557: ARRAY
27558: ST_TO_ADDR
// end ; end ;
27559: LD_VAR 0 4
27563: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27564: LD_INT 0
27566: PPUSH
27567: PPUSH
// if not list then
27568: LD_VAR 0 1
27572: NOT
27573: IFFALSE 27577
// exit ;
27575: GO 27668
// i := list [ pos1 ] ;
27577: LD_ADDR_VAR 0 5
27581: PUSH
27582: LD_VAR 0 1
27586: PUSH
27587: LD_VAR 0 2
27591: ARRAY
27592: ST_TO_ADDR
// if not i then
27593: LD_VAR 0 5
27597: NOT
27598: IFFALSE 27602
// exit ;
27600: GO 27668
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27602: LD_ADDR_VAR 0 1
27606: PUSH
27607: LD_VAR 0 1
27611: PPUSH
27612: LD_VAR 0 2
27616: PPUSH
27617: LD_VAR 0 1
27621: PUSH
27622: LD_VAR 0 3
27626: ARRAY
27627: PPUSH
27628: CALL_OW 1
27632: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27633: LD_ADDR_VAR 0 1
27637: PUSH
27638: LD_VAR 0 1
27642: PPUSH
27643: LD_VAR 0 3
27647: PPUSH
27648: LD_VAR 0 5
27652: PPUSH
27653: CALL_OW 1
27657: ST_TO_ADDR
// result := list ;
27658: LD_ADDR_VAR 0 4
27662: PUSH
27663: LD_VAR 0 1
27667: ST_TO_ADDR
// end ;
27668: LD_VAR 0 4
27672: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27673: LD_INT 0
27675: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27676: LD_ADDR_VAR 0 5
27680: PUSH
27681: LD_VAR 0 1
27685: PPUSH
27686: CALL_OW 250
27690: PPUSH
27691: LD_VAR 0 1
27695: PPUSH
27696: CALL_OW 251
27700: PPUSH
27701: LD_VAR 0 2
27705: PPUSH
27706: LD_VAR 0 3
27710: PPUSH
27711: LD_VAR 0 4
27715: PPUSH
27716: CALL 27726 0 5
27720: ST_TO_ADDR
// end ;
27721: LD_VAR 0 5
27725: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27726: LD_INT 0
27728: PPUSH
27729: PPUSH
27730: PPUSH
27731: PPUSH
// if not list then
27732: LD_VAR 0 3
27736: NOT
27737: IFFALSE 27741
// exit ;
27739: GO 28129
// result := [ ] ;
27741: LD_ADDR_VAR 0 6
27745: PUSH
27746: EMPTY
27747: ST_TO_ADDR
// for i in list do
27748: LD_ADDR_VAR 0 7
27752: PUSH
27753: LD_VAR 0 3
27757: PUSH
27758: FOR_IN
27759: IFFALSE 27961
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27761: LD_ADDR_VAR 0 9
27765: PUSH
27766: LD_VAR 0 7
27770: PPUSH
27771: LD_VAR 0 1
27775: PPUSH
27776: LD_VAR 0 2
27780: PPUSH
27781: CALL_OW 297
27785: ST_TO_ADDR
// if not result then
27786: LD_VAR 0 6
27790: NOT
27791: IFFALSE 27817
// result := [ [ i , tmp ] ] else
27793: LD_ADDR_VAR 0 6
27797: PUSH
27798: LD_VAR 0 7
27802: PUSH
27803: LD_VAR 0 9
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PUSH
27812: EMPTY
27813: LIST
27814: ST_TO_ADDR
27815: GO 27959
// begin if result [ result ] [ 2 ] < tmp then
27817: LD_VAR 0 6
27821: PUSH
27822: LD_VAR 0 6
27826: ARRAY
27827: PUSH
27828: LD_INT 2
27830: ARRAY
27831: PUSH
27832: LD_VAR 0 9
27836: LESS
27837: IFFALSE 27879
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27839: LD_ADDR_VAR 0 6
27843: PUSH
27844: LD_VAR 0 6
27848: PPUSH
27849: LD_VAR 0 6
27853: PUSH
27854: LD_INT 1
27856: PLUS
27857: PPUSH
27858: LD_VAR 0 7
27862: PUSH
27863: LD_VAR 0 9
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PPUSH
27872: CALL_OW 2
27876: ST_TO_ADDR
27877: GO 27959
// for j = 1 to result do
27879: LD_ADDR_VAR 0 8
27883: PUSH
27884: DOUBLE
27885: LD_INT 1
27887: DEC
27888: ST_TO_ADDR
27889: LD_VAR 0 6
27893: PUSH
27894: FOR_TO
27895: IFFALSE 27957
// begin if tmp < result [ j ] [ 2 ] then
27897: LD_VAR 0 9
27901: PUSH
27902: LD_VAR 0 6
27906: PUSH
27907: LD_VAR 0 8
27911: ARRAY
27912: PUSH
27913: LD_INT 2
27915: ARRAY
27916: LESS
27917: IFFALSE 27955
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27919: LD_ADDR_VAR 0 6
27923: PUSH
27924: LD_VAR 0 6
27928: PPUSH
27929: LD_VAR 0 8
27933: PPUSH
27934: LD_VAR 0 7
27938: PUSH
27939: LD_VAR 0 9
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PPUSH
27948: CALL_OW 2
27952: ST_TO_ADDR
// break ;
27953: GO 27957
// end ; end ;
27955: GO 27894
27957: POP
27958: POP
// end ; end ;
27959: GO 27758
27961: POP
27962: POP
// if result and not asc then
27963: LD_VAR 0 6
27967: PUSH
27968: LD_VAR 0 4
27972: NOT
27973: AND
27974: IFFALSE 28049
// begin tmp := result ;
27976: LD_ADDR_VAR 0 9
27980: PUSH
27981: LD_VAR 0 6
27985: ST_TO_ADDR
// for i = tmp downto 1 do
27986: LD_ADDR_VAR 0 7
27990: PUSH
27991: DOUBLE
27992: LD_VAR 0 9
27996: INC
27997: ST_TO_ADDR
27998: LD_INT 1
28000: PUSH
28001: FOR_DOWNTO
28002: IFFALSE 28047
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28004: LD_ADDR_VAR 0 6
28008: PUSH
28009: LD_VAR 0 6
28013: PPUSH
28014: LD_VAR 0 9
28018: PUSH
28019: LD_VAR 0 7
28023: MINUS
28024: PUSH
28025: LD_INT 1
28027: PLUS
28028: PPUSH
28029: LD_VAR 0 9
28033: PUSH
28034: LD_VAR 0 7
28038: ARRAY
28039: PPUSH
28040: CALL_OW 1
28044: ST_TO_ADDR
28045: GO 28001
28047: POP
28048: POP
// end ; tmp := [ ] ;
28049: LD_ADDR_VAR 0 9
28053: PUSH
28054: EMPTY
28055: ST_TO_ADDR
// if mode then
28056: LD_VAR 0 5
28060: IFFALSE 28129
// begin for i = 1 to result do
28062: LD_ADDR_VAR 0 7
28066: PUSH
28067: DOUBLE
28068: LD_INT 1
28070: DEC
28071: ST_TO_ADDR
28072: LD_VAR 0 6
28076: PUSH
28077: FOR_TO
28078: IFFALSE 28117
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28080: LD_ADDR_VAR 0 9
28084: PUSH
28085: LD_VAR 0 9
28089: PPUSH
28090: LD_VAR 0 7
28094: PPUSH
28095: LD_VAR 0 6
28099: PUSH
28100: LD_VAR 0 7
28104: ARRAY
28105: PUSH
28106: LD_INT 1
28108: ARRAY
28109: PPUSH
28110: CALL_OW 1
28114: ST_TO_ADDR
28115: GO 28077
28117: POP
28118: POP
// result := tmp ;
28119: LD_ADDR_VAR 0 6
28123: PUSH
28124: LD_VAR 0 9
28128: ST_TO_ADDR
// end ; end ;
28129: LD_VAR 0 6
28133: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28134: LD_INT 0
28136: PPUSH
28137: PPUSH
28138: PPUSH
28139: PPUSH
28140: PPUSH
28141: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28142: LD_ADDR_VAR 0 5
28146: PUSH
28147: LD_INT 0
28149: PUSH
28150: LD_INT 0
28152: PUSH
28153: LD_INT 0
28155: PUSH
28156: EMPTY
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: ST_TO_ADDR
// if not x or not y then
28164: LD_VAR 0 2
28168: NOT
28169: PUSH
28170: LD_VAR 0 3
28174: NOT
28175: OR
28176: IFFALSE 28180
// exit ;
28178: GO 29830
// if not range then
28180: LD_VAR 0 4
28184: NOT
28185: IFFALSE 28195
// range := 10 ;
28187: LD_ADDR_VAR 0 4
28191: PUSH
28192: LD_INT 10
28194: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28195: LD_ADDR_VAR 0 8
28199: PUSH
28200: LD_INT 81
28202: PUSH
28203: LD_VAR 0 1
28207: PUSH
28208: EMPTY
28209: LIST
28210: LIST
28211: PUSH
28212: LD_INT 92
28214: PUSH
28215: LD_VAR 0 2
28219: PUSH
28220: LD_VAR 0 3
28224: PUSH
28225: LD_VAR 0 4
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: PUSH
28236: LD_INT 3
28238: PUSH
28239: LD_INT 21
28241: PUSH
28242: LD_INT 3
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: LIST
28257: PPUSH
28258: CALL_OW 69
28262: ST_TO_ADDR
// if not tmp then
28263: LD_VAR 0 8
28267: NOT
28268: IFFALSE 28272
// exit ;
28270: GO 29830
// for i in tmp do
28272: LD_ADDR_VAR 0 6
28276: PUSH
28277: LD_VAR 0 8
28281: PUSH
28282: FOR_IN
28283: IFFALSE 29805
// begin points := [ 0 , 0 , 0 ] ;
28285: LD_ADDR_VAR 0 9
28289: PUSH
28290: LD_INT 0
28292: PUSH
28293: LD_INT 0
28295: PUSH
28296: LD_INT 0
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: LIST
28303: ST_TO_ADDR
// bpoints := 1 ;
28304: LD_ADDR_VAR 0 10
28308: PUSH
28309: LD_INT 1
28311: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28312: LD_VAR 0 6
28316: PPUSH
28317: CALL_OW 247
28321: PUSH
28322: LD_INT 1
28324: DOUBLE
28325: EQUAL
28326: IFTRUE 28330
28328: GO 28908
28330: POP
// begin if GetClass ( i ) = 1 then
28331: LD_VAR 0 6
28335: PPUSH
28336: CALL_OW 257
28340: PUSH
28341: LD_INT 1
28343: EQUAL
28344: IFFALSE 28365
// points := [ 10 , 5 , 3 ] ;
28346: LD_ADDR_VAR 0 9
28350: PUSH
28351: LD_INT 10
28353: PUSH
28354: LD_INT 5
28356: PUSH
28357: LD_INT 3
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: LIST
28364: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28365: LD_VAR 0 6
28369: PPUSH
28370: CALL_OW 257
28374: PUSH
28375: LD_INT 2
28377: PUSH
28378: LD_INT 3
28380: PUSH
28381: LD_INT 4
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: LIST
28388: IN
28389: IFFALSE 28410
// points := [ 3 , 2 , 1 ] ;
28391: LD_ADDR_VAR 0 9
28395: PUSH
28396: LD_INT 3
28398: PUSH
28399: LD_INT 2
28401: PUSH
28402: LD_INT 1
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: LIST
28409: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28410: LD_VAR 0 6
28414: PPUSH
28415: CALL_OW 257
28419: PUSH
28420: LD_INT 5
28422: EQUAL
28423: IFFALSE 28444
// points := [ 130 , 5 , 2 ] ;
28425: LD_ADDR_VAR 0 9
28429: PUSH
28430: LD_INT 130
28432: PUSH
28433: LD_INT 5
28435: PUSH
28436: LD_INT 2
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: LIST
28443: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28444: LD_VAR 0 6
28448: PPUSH
28449: CALL_OW 257
28453: PUSH
28454: LD_INT 8
28456: EQUAL
28457: IFFALSE 28478
// points := [ 35 , 35 , 30 ] ;
28459: LD_ADDR_VAR 0 9
28463: PUSH
28464: LD_INT 35
28466: PUSH
28467: LD_INT 35
28469: PUSH
28470: LD_INT 30
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: LIST
28477: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28478: LD_VAR 0 6
28482: PPUSH
28483: CALL_OW 257
28487: PUSH
28488: LD_INT 9
28490: EQUAL
28491: IFFALSE 28512
// points := [ 20 , 55 , 40 ] ;
28493: LD_ADDR_VAR 0 9
28497: PUSH
28498: LD_INT 20
28500: PUSH
28501: LD_INT 55
28503: PUSH
28504: LD_INT 40
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: LIST
28511: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28512: LD_VAR 0 6
28516: PPUSH
28517: CALL_OW 257
28521: PUSH
28522: LD_INT 12
28524: PUSH
28525: LD_INT 16
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: IN
28532: IFFALSE 28553
// points := [ 5 , 3 , 2 ] ;
28534: LD_ADDR_VAR 0 9
28538: PUSH
28539: LD_INT 5
28541: PUSH
28542: LD_INT 3
28544: PUSH
28545: LD_INT 2
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: LIST
28552: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28553: LD_VAR 0 6
28557: PPUSH
28558: CALL_OW 257
28562: PUSH
28563: LD_INT 17
28565: EQUAL
28566: IFFALSE 28587
// points := [ 100 , 50 , 75 ] ;
28568: LD_ADDR_VAR 0 9
28572: PUSH
28573: LD_INT 100
28575: PUSH
28576: LD_INT 50
28578: PUSH
28579: LD_INT 75
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: LIST
28586: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28587: LD_VAR 0 6
28591: PPUSH
28592: CALL_OW 257
28596: PUSH
28597: LD_INT 15
28599: EQUAL
28600: IFFALSE 28621
// points := [ 10 , 5 , 3 ] ;
28602: LD_ADDR_VAR 0 9
28606: PUSH
28607: LD_INT 10
28609: PUSH
28610: LD_INT 5
28612: PUSH
28613: LD_INT 3
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: LIST
28620: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28621: LD_VAR 0 6
28625: PPUSH
28626: CALL_OW 257
28630: PUSH
28631: LD_INT 14
28633: EQUAL
28634: IFFALSE 28655
// points := [ 10 , 0 , 0 ] ;
28636: LD_ADDR_VAR 0 9
28640: PUSH
28641: LD_INT 10
28643: PUSH
28644: LD_INT 0
28646: PUSH
28647: LD_INT 0
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: LIST
28654: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28655: LD_VAR 0 6
28659: PPUSH
28660: CALL_OW 257
28664: PUSH
28665: LD_INT 11
28667: EQUAL
28668: IFFALSE 28689
// points := [ 30 , 10 , 5 ] ;
28670: LD_ADDR_VAR 0 9
28674: PUSH
28675: LD_INT 30
28677: PUSH
28678: LD_INT 10
28680: PUSH
28681: LD_INT 5
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: LIST
28688: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28689: LD_VAR 0 1
28693: PPUSH
28694: LD_INT 5
28696: PPUSH
28697: CALL_OW 321
28701: PUSH
28702: LD_INT 2
28704: EQUAL
28705: IFFALSE 28722
// bpoints := bpoints * 1.8 ;
28707: LD_ADDR_VAR 0 10
28711: PUSH
28712: LD_VAR 0 10
28716: PUSH
28717: LD_REAL  1.80000000000000E+0000
28720: MUL
28721: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28722: LD_VAR 0 6
28726: PPUSH
28727: CALL_OW 257
28731: PUSH
28732: LD_INT 1
28734: PUSH
28735: LD_INT 2
28737: PUSH
28738: LD_INT 3
28740: PUSH
28741: LD_INT 4
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: IN
28750: PUSH
28751: LD_VAR 0 1
28755: PPUSH
28756: LD_INT 51
28758: PPUSH
28759: CALL_OW 321
28763: PUSH
28764: LD_INT 2
28766: EQUAL
28767: AND
28768: IFFALSE 28785
// bpoints := bpoints * 1.2 ;
28770: LD_ADDR_VAR 0 10
28774: PUSH
28775: LD_VAR 0 10
28779: PUSH
28780: LD_REAL  1.20000000000000E+0000
28783: MUL
28784: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28785: LD_VAR 0 6
28789: PPUSH
28790: CALL_OW 257
28794: PUSH
28795: LD_INT 5
28797: PUSH
28798: LD_INT 7
28800: PUSH
28801: LD_INT 9
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: LIST
28808: IN
28809: PUSH
28810: LD_VAR 0 1
28814: PPUSH
28815: LD_INT 52
28817: PPUSH
28818: CALL_OW 321
28822: PUSH
28823: LD_INT 2
28825: EQUAL
28826: AND
28827: IFFALSE 28844
// bpoints := bpoints * 1.5 ;
28829: LD_ADDR_VAR 0 10
28833: PUSH
28834: LD_VAR 0 10
28838: PUSH
28839: LD_REAL  1.50000000000000E+0000
28842: MUL
28843: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28844: LD_VAR 0 1
28848: PPUSH
28849: LD_INT 66
28851: PPUSH
28852: CALL_OW 321
28856: PUSH
28857: LD_INT 2
28859: EQUAL
28860: IFFALSE 28877
// bpoints := bpoints * 1.1 ;
28862: LD_ADDR_VAR 0 10
28866: PUSH
28867: LD_VAR 0 10
28871: PUSH
28872: LD_REAL  1.10000000000000E+0000
28875: MUL
28876: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28877: LD_ADDR_VAR 0 10
28881: PUSH
28882: LD_VAR 0 10
28886: PUSH
28887: LD_VAR 0 6
28891: PPUSH
28892: LD_INT 1
28894: PPUSH
28895: CALL_OW 259
28899: PUSH
28900: LD_REAL  1.15000000000000E+0000
28903: MUL
28904: MUL
28905: ST_TO_ADDR
// end ; unit_vehicle :
28906: GO 29734
28908: LD_INT 2
28910: DOUBLE
28911: EQUAL
28912: IFTRUE 28916
28914: GO 29722
28916: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28917: LD_VAR 0 6
28921: PPUSH
28922: CALL_OW 264
28926: PUSH
28927: LD_INT 2
28929: PUSH
28930: LD_INT 42
28932: PUSH
28933: LD_INT 24
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: LIST
28940: IN
28941: IFFALSE 28962
// points := [ 25 , 5 , 3 ] ;
28943: LD_ADDR_VAR 0 9
28947: PUSH
28948: LD_INT 25
28950: PUSH
28951: LD_INT 5
28953: PUSH
28954: LD_INT 3
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: LIST
28961: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28962: LD_VAR 0 6
28966: PPUSH
28967: CALL_OW 264
28971: PUSH
28972: LD_INT 4
28974: PUSH
28975: LD_INT 43
28977: PUSH
28978: LD_INT 25
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: LIST
28985: IN
28986: IFFALSE 29007
// points := [ 40 , 15 , 5 ] ;
28988: LD_ADDR_VAR 0 9
28992: PUSH
28993: LD_INT 40
28995: PUSH
28996: LD_INT 15
28998: PUSH
28999: LD_INT 5
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: LIST
29006: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29007: LD_VAR 0 6
29011: PPUSH
29012: CALL_OW 264
29016: PUSH
29017: LD_INT 3
29019: PUSH
29020: LD_INT 23
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: IN
29027: IFFALSE 29048
// points := [ 7 , 25 , 8 ] ;
29029: LD_ADDR_VAR 0 9
29033: PUSH
29034: LD_INT 7
29036: PUSH
29037: LD_INT 25
29039: PUSH
29040: LD_INT 8
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: LIST
29047: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29048: LD_VAR 0 6
29052: PPUSH
29053: CALL_OW 264
29057: PUSH
29058: LD_INT 5
29060: PUSH
29061: LD_INT 27
29063: PUSH
29064: LD_INT 44
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: LIST
29071: IN
29072: IFFALSE 29093
// points := [ 14 , 50 , 16 ] ;
29074: LD_ADDR_VAR 0 9
29078: PUSH
29079: LD_INT 14
29081: PUSH
29082: LD_INT 50
29084: PUSH
29085: LD_INT 16
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: LIST
29092: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29093: LD_VAR 0 6
29097: PPUSH
29098: CALL_OW 264
29102: PUSH
29103: LD_INT 6
29105: PUSH
29106: LD_INT 46
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: IN
29113: IFFALSE 29134
// points := [ 32 , 120 , 70 ] ;
29115: LD_ADDR_VAR 0 9
29119: PUSH
29120: LD_INT 32
29122: PUSH
29123: LD_INT 120
29125: PUSH
29126: LD_INT 70
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: LIST
29133: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
29134: LD_VAR 0 6
29138: PPUSH
29139: CALL_OW 264
29143: PUSH
29144: LD_INT 7
29146: PUSH
29147: LD_INT 28
29149: PUSH
29150: LD_INT 45
29152: PUSH
29153: LD_INT 92
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: IN
29162: IFFALSE 29183
// points := [ 35 , 20 , 45 ] ;
29164: LD_ADDR_VAR 0 9
29168: PUSH
29169: LD_INT 35
29171: PUSH
29172: LD_INT 20
29174: PUSH
29175: LD_INT 45
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: LIST
29182: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29183: LD_VAR 0 6
29187: PPUSH
29188: CALL_OW 264
29192: PUSH
29193: LD_INT 47
29195: PUSH
29196: EMPTY
29197: LIST
29198: IN
29199: IFFALSE 29220
// points := [ 67 , 45 , 75 ] ;
29201: LD_ADDR_VAR 0 9
29205: PUSH
29206: LD_INT 67
29208: PUSH
29209: LD_INT 45
29211: PUSH
29212: LD_INT 75
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: LIST
29219: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29220: LD_VAR 0 6
29224: PPUSH
29225: CALL_OW 264
29229: PUSH
29230: LD_INT 26
29232: PUSH
29233: EMPTY
29234: LIST
29235: IN
29236: IFFALSE 29257
// points := [ 120 , 30 , 80 ] ;
29238: LD_ADDR_VAR 0 9
29242: PUSH
29243: LD_INT 120
29245: PUSH
29246: LD_INT 30
29248: PUSH
29249: LD_INT 80
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: LIST
29256: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29257: LD_VAR 0 6
29261: PPUSH
29262: CALL_OW 264
29266: PUSH
29267: LD_INT 22
29269: PUSH
29270: EMPTY
29271: LIST
29272: IN
29273: IFFALSE 29294
// points := [ 40 , 1 , 1 ] ;
29275: LD_ADDR_VAR 0 9
29279: PUSH
29280: LD_INT 40
29282: PUSH
29283: LD_INT 1
29285: PUSH
29286: LD_INT 1
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: LIST
29293: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29294: LD_VAR 0 6
29298: PPUSH
29299: CALL_OW 264
29303: PUSH
29304: LD_INT 29
29306: PUSH
29307: EMPTY
29308: LIST
29309: IN
29310: IFFALSE 29331
// points := [ 70 , 200 , 400 ] ;
29312: LD_ADDR_VAR 0 9
29316: PUSH
29317: LD_INT 70
29319: PUSH
29320: LD_INT 200
29322: PUSH
29323: LD_INT 400
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: LIST
29330: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29331: LD_VAR 0 6
29335: PPUSH
29336: CALL_OW 264
29340: PUSH
29341: LD_INT 14
29343: PUSH
29344: LD_INT 53
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: IN
29351: IFFALSE 29372
// points := [ 40 , 10 , 20 ] ;
29353: LD_ADDR_VAR 0 9
29357: PUSH
29358: LD_INT 40
29360: PUSH
29361: LD_INT 10
29363: PUSH
29364: LD_INT 20
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: LIST
29371: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29372: LD_VAR 0 6
29376: PPUSH
29377: CALL_OW 264
29381: PUSH
29382: LD_INT 9
29384: PUSH
29385: EMPTY
29386: LIST
29387: IN
29388: IFFALSE 29409
// points := [ 5 , 70 , 20 ] ;
29390: LD_ADDR_VAR 0 9
29394: PUSH
29395: LD_INT 5
29397: PUSH
29398: LD_INT 70
29400: PUSH
29401: LD_INT 20
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: LIST
29408: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29409: LD_VAR 0 6
29413: PPUSH
29414: CALL_OW 264
29418: PUSH
29419: LD_INT 10
29421: PUSH
29422: EMPTY
29423: LIST
29424: IN
29425: IFFALSE 29446
// points := [ 35 , 110 , 70 ] ;
29427: LD_ADDR_VAR 0 9
29431: PUSH
29432: LD_INT 35
29434: PUSH
29435: LD_INT 110
29437: PUSH
29438: LD_INT 70
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: LIST
29445: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29446: LD_VAR 0 6
29450: PPUSH
29451: CALL_OW 265
29455: PUSH
29456: LD_INT 25
29458: EQUAL
29459: IFFALSE 29480
// points := [ 80 , 65 , 100 ] ;
29461: LD_ADDR_VAR 0 9
29465: PUSH
29466: LD_INT 80
29468: PUSH
29469: LD_INT 65
29471: PUSH
29472: LD_INT 100
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: LIST
29479: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29480: LD_VAR 0 6
29484: PPUSH
29485: CALL_OW 263
29489: PUSH
29490: LD_INT 1
29492: EQUAL
29493: IFFALSE 29528
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29495: LD_ADDR_VAR 0 10
29499: PUSH
29500: LD_VAR 0 10
29504: PUSH
29505: LD_VAR 0 6
29509: PPUSH
29510: CALL_OW 311
29514: PPUSH
29515: LD_INT 3
29517: PPUSH
29518: CALL_OW 259
29522: PUSH
29523: LD_INT 4
29525: MUL
29526: MUL
29527: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29528: LD_VAR 0 6
29532: PPUSH
29533: CALL_OW 263
29537: PUSH
29538: LD_INT 2
29540: EQUAL
29541: IFFALSE 29592
// begin j := IsControledBy ( i ) ;
29543: LD_ADDR_VAR 0 7
29547: PUSH
29548: LD_VAR 0 6
29552: PPUSH
29553: CALL_OW 312
29557: ST_TO_ADDR
// if j then
29558: LD_VAR 0 7
29562: IFFALSE 29592
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29564: LD_ADDR_VAR 0 10
29568: PUSH
29569: LD_VAR 0 10
29573: PUSH
29574: LD_VAR 0 7
29578: PPUSH
29579: LD_INT 3
29581: PPUSH
29582: CALL_OW 259
29586: PUSH
29587: LD_INT 3
29589: MUL
29590: MUL
29591: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29592: LD_VAR 0 6
29596: PPUSH
29597: CALL_OW 264
29601: PUSH
29602: LD_INT 5
29604: PUSH
29605: LD_INT 6
29607: PUSH
29608: LD_INT 46
29610: PUSH
29611: LD_INT 44
29613: PUSH
29614: LD_INT 47
29616: PUSH
29617: LD_INT 45
29619: PUSH
29620: LD_INT 28
29622: PUSH
29623: LD_INT 7
29625: PUSH
29626: LD_INT 27
29628: PUSH
29629: LD_INT 29
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: IN
29644: PUSH
29645: LD_VAR 0 1
29649: PPUSH
29650: LD_INT 52
29652: PPUSH
29653: CALL_OW 321
29657: PUSH
29658: LD_INT 2
29660: EQUAL
29661: AND
29662: IFFALSE 29679
// bpoints := bpoints * 1.2 ;
29664: LD_ADDR_VAR 0 10
29668: PUSH
29669: LD_VAR 0 10
29673: PUSH
29674: LD_REAL  1.20000000000000E+0000
29677: MUL
29678: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29679: LD_VAR 0 6
29683: PPUSH
29684: CALL_OW 264
29688: PUSH
29689: LD_INT 6
29691: PUSH
29692: LD_INT 46
29694: PUSH
29695: LD_INT 47
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: LIST
29702: IN
29703: IFFALSE 29720
// bpoints := bpoints * 1.2 ;
29705: LD_ADDR_VAR 0 10
29709: PUSH
29710: LD_VAR 0 10
29714: PUSH
29715: LD_REAL  1.20000000000000E+0000
29718: MUL
29719: ST_TO_ADDR
// end ; unit_building :
29720: GO 29734
29722: LD_INT 3
29724: DOUBLE
29725: EQUAL
29726: IFTRUE 29730
29728: GO 29733
29730: POP
// ; end ;
29731: GO 29734
29733: POP
// for j = 1 to 3 do
29734: LD_ADDR_VAR 0 7
29738: PUSH
29739: DOUBLE
29740: LD_INT 1
29742: DEC
29743: ST_TO_ADDR
29744: LD_INT 3
29746: PUSH
29747: FOR_TO
29748: IFFALSE 29801
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29750: LD_ADDR_VAR 0 5
29754: PUSH
29755: LD_VAR 0 5
29759: PPUSH
29760: LD_VAR 0 7
29764: PPUSH
29765: LD_VAR 0 5
29769: PUSH
29770: LD_VAR 0 7
29774: ARRAY
29775: PUSH
29776: LD_VAR 0 9
29780: PUSH
29781: LD_VAR 0 7
29785: ARRAY
29786: PUSH
29787: LD_VAR 0 10
29791: MUL
29792: PLUS
29793: PPUSH
29794: CALL_OW 1
29798: ST_TO_ADDR
29799: GO 29747
29801: POP
29802: POP
// end ;
29803: GO 28282
29805: POP
29806: POP
// result := Replace ( result , 4 , tmp ) ;
29807: LD_ADDR_VAR 0 5
29811: PUSH
29812: LD_VAR 0 5
29816: PPUSH
29817: LD_INT 4
29819: PPUSH
29820: LD_VAR 0 8
29824: PPUSH
29825: CALL_OW 1
29829: ST_TO_ADDR
// end ;
29830: LD_VAR 0 5
29834: RET
// export function DangerAtRange ( unit , range ) ; begin
29835: LD_INT 0
29837: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29838: LD_ADDR_VAR 0 3
29842: PUSH
29843: LD_VAR 0 1
29847: PPUSH
29848: CALL_OW 255
29852: PPUSH
29853: LD_VAR 0 1
29857: PPUSH
29858: CALL_OW 250
29862: PPUSH
29863: LD_VAR 0 1
29867: PPUSH
29868: CALL_OW 251
29872: PPUSH
29873: LD_VAR 0 2
29877: PPUSH
29878: CALL 28134 0 4
29882: ST_TO_ADDR
// end ;
29883: LD_VAR 0 3
29887: RET
// export function DangerInArea ( side , area ) ; begin
29888: LD_INT 0
29890: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29891: LD_ADDR_VAR 0 3
29895: PUSH
29896: LD_VAR 0 2
29900: PPUSH
29901: LD_INT 81
29903: PUSH
29904: LD_VAR 0 1
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PPUSH
29913: CALL_OW 70
29917: ST_TO_ADDR
// end ;
29918: LD_VAR 0 3
29922: RET
// export function IsExtension ( b ) ; begin
29923: LD_INT 0
29925: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29926: LD_ADDR_VAR 0 2
29930: PUSH
29931: LD_VAR 0 1
29935: PUSH
29936: LD_INT 23
29938: PUSH
29939: LD_INT 20
29941: PUSH
29942: LD_INT 22
29944: PUSH
29945: LD_INT 17
29947: PUSH
29948: LD_INT 24
29950: PUSH
29951: LD_INT 21
29953: PUSH
29954: LD_INT 19
29956: PUSH
29957: LD_INT 16
29959: PUSH
29960: LD_INT 25
29962: PUSH
29963: LD_INT 18
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: IN
29978: ST_TO_ADDR
// end ;
29979: LD_VAR 0 2
29983: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29984: LD_INT 0
29986: PPUSH
29987: PPUSH
29988: PPUSH
// result := [ ] ;
29989: LD_ADDR_VAR 0 4
29993: PUSH
29994: EMPTY
29995: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29996: LD_ADDR_VAR 0 5
30000: PUSH
30001: LD_VAR 0 2
30005: PPUSH
30006: LD_INT 21
30008: PUSH
30009: LD_INT 3
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PPUSH
30016: CALL_OW 70
30020: ST_TO_ADDR
// if not tmp then
30021: LD_VAR 0 5
30025: NOT
30026: IFFALSE 30030
// exit ;
30028: GO 30094
// if checkLink then
30030: LD_VAR 0 3
30034: IFFALSE 30084
// begin for i in tmp do
30036: LD_ADDR_VAR 0 6
30040: PUSH
30041: LD_VAR 0 5
30045: PUSH
30046: FOR_IN
30047: IFFALSE 30082
// if GetBase ( i ) <> base then
30049: LD_VAR 0 6
30053: PPUSH
30054: CALL_OW 274
30058: PUSH
30059: LD_VAR 0 1
30063: NONEQUAL
30064: IFFALSE 30080
// ComLinkToBase ( base , i ) ;
30066: LD_VAR 0 1
30070: PPUSH
30071: LD_VAR 0 6
30075: PPUSH
30076: CALL_OW 169
30080: GO 30046
30082: POP
30083: POP
// end ; result := tmp ;
30084: LD_ADDR_VAR 0 4
30088: PUSH
30089: LD_VAR 0 5
30093: ST_TO_ADDR
// end ;
30094: LD_VAR 0 4
30098: RET
// export function ComComplete ( units , b ) ; var i ; begin
30099: LD_INT 0
30101: PPUSH
30102: PPUSH
// if not units then
30103: LD_VAR 0 1
30107: NOT
30108: IFFALSE 30112
// exit ;
30110: GO 30202
// for i in units do
30112: LD_ADDR_VAR 0 4
30116: PUSH
30117: LD_VAR 0 1
30121: PUSH
30122: FOR_IN
30123: IFFALSE 30200
// if BuildingStatus ( b ) = bs_build then
30125: LD_VAR 0 2
30129: PPUSH
30130: CALL_OW 461
30134: PUSH
30135: LD_INT 1
30137: EQUAL
30138: IFFALSE 30198
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30140: LD_VAR 0 4
30144: PPUSH
30145: LD_STRING h
30147: PUSH
30148: LD_VAR 0 2
30152: PPUSH
30153: CALL_OW 250
30157: PUSH
30158: LD_VAR 0 2
30162: PPUSH
30163: CALL_OW 251
30167: PUSH
30168: LD_VAR 0 2
30172: PUSH
30173: LD_INT 0
30175: PUSH
30176: LD_INT 0
30178: PUSH
30179: LD_INT 0
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: PUSH
30191: EMPTY
30192: LIST
30193: PPUSH
30194: CALL_OW 446
30198: GO 30122
30200: POP
30201: POP
// end ;
30202: LD_VAR 0 3
30206: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30207: LD_INT 0
30209: PPUSH
30210: PPUSH
30211: PPUSH
30212: PPUSH
30213: PPUSH
30214: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30215: LD_VAR 0 1
30219: NOT
30220: PUSH
30221: LD_VAR 0 1
30225: PPUSH
30226: CALL_OW 263
30230: PUSH
30231: LD_INT 2
30233: NONEQUAL
30234: OR
30235: IFFALSE 30239
// exit ;
30237: GO 30555
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30239: LD_ADDR_VAR 0 6
30243: PUSH
30244: LD_INT 22
30246: PUSH
30247: LD_VAR 0 1
30251: PPUSH
30252: CALL_OW 255
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PUSH
30261: LD_INT 2
30263: PUSH
30264: LD_INT 30
30266: PUSH
30267: LD_INT 36
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 34
30276: PUSH
30277: LD_INT 31
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: LIST
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PPUSH
30293: CALL_OW 69
30297: ST_TO_ADDR
// if not tmp then
30298: LD_VAR 0 6
30302: NOT
30303: IFFALSE 30307
// exit ;
30305: GO 30555
// result := [ ] ;
30307: LD_ADDR_VAR 0 2
30311: PUSH
30312: EMPTY
30313: ST_TO_ADDR
// for i in tmp do
30314: LD_ADDR_VAR 0 3
30318: PUSH
30319: LD_VAR 0 6
30323: PUSH
30324: FOR_IN
30325: IFFALSE 30396
// begin t := UnitsInside ( i ) ;
30327: LD_ADDR_VAR 0 4
30331: PUSH
30332: LD_VAR 0 3
30336: PPUSH
30337: CALL_OW 313
30341: ST_TO_ADDR
// if t then
30342: LD_VAR 0 4
30346: IFFALSE 30394
// for j in t do
30348: LD_ADDR_VAR 0 7
30352: PUSH
30353: LD_VAR 0 4
30357: PUSH
30358: FOR_IN
30359: IFFALSE 30392
// result := Replace ( result , result + 1 , j ) ;
30361: LD_ADDR_VAR 0 2
30365: PUSH
30366: LD_VAR 0 2
30370: PPUSH
30371: LD_VAR 0 2
30375: PUSH
30376: LD_INT 1
30378: PLUS
30379: PPUSH
30380: LD_VAR 0 7
30384: PPUSH
30385: CALL_OW 1
30389: ST_TO_ADDR
30390: GO 30358
30392: POP
30393: POP
// end ;
30394: GO 30324
30396: POP
30397: POP
// if not result then
30398: LD_VAR 0 2
30402: NOT
30403: IFFALSE 30407
// exit ;
30405: GO 30555
// mech := result [ 1 ] ;
30407: LD_ADDR_VAR 0 5
30411: PUSH
30412: LD_VAR 0 2
30416: PUSH
30417: LD_INT 1
30419: ARRAY
30420: ST_TO_ADDR
// if result > 1 then
30421: LD_VAR 0 2
30425: PUSH
30426: LD_INT 1
30428: GREATER
30429: IFFALSE 30541
// begin for i = 2 to result do
30431: LD_ADDR_VAR 0 3
30435: PUSH
30436: DOUBLE
30437: LD_INT 2
30439: DEC
30440: ST_TO_ADDR
30441: LD_VAR 0 2
30445: PUSH
30446: FOR_TO
30447: IFFALSE 30539
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30449: LD_ADDR_VAR 0 4
30453: PUSH
30454: LD_VAR 0 2
30458: PUSH
30459: LD_VAR 0 3
30463: ARRAY
30464: PPUSH
30465: LD_INT 3
30467: PPUSH
30468: CALL_OW 259
30472: PUSH
30473: LD_VAR 0 2
30477: PUSH
30478: LD_VAR 0 3
30482: ARRAY
30483: PPUSH
30484: CALL_OW 432
30488: MINUS
30489: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30490: LD_VAR 0 4
30494: PUSH
30495: LD_VAR 0 5
30499: PPUSH
30500: LD_INT 3
30502: PPUSH
30503: CALL_OW 259
30507: PUSH
30508: LD_VAR 0 5
30512: PPUSH
30513: CALL_OW 432
30517: MINUS
30518: GREATEREQUAL
30519: IFFALSE 30537
// mech := result [ i ] ;
30521: LD_ADDR_VAR 0 5
30525: PUSH
30526: LD_VAR 0 2
30530: PUSH
30531: LD_VAR 0 3
30535: ARRAY
30536: ST_TO_ADDR
// end ;
30537: GO 30446
30539: POP
30540: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30541: LD_VAR 0 1
30545: PPUSH
30546: LD_VAR 0 5
30550: PPUSH
30551: CALL_OW 135
// end ;
30555: LD_VAR 0 2
30559: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30560: LD_INT 0
30562: PPUSH
30563: PPUSH
30564: PPUSH
30565: PPUSH
30566: PPUSH
30567: PPUSH
30568: PPUSH
30569: PPUSH
30570: PPUSH
30571: PPUSH
30572: PPUSH
30573: PPUSH
30574: PPUSH
// result := [ ] ;
30575: LD_ADDR_VAR 0 7
30579: PUSH
30580: EMPTY
30581: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30582: LD_VAR 0 1
30586: PPUSH
30587: CALL_OW 266
30591: PUSH
30592: LD_INT 0
30594: PUSH
30595: LD_INT 1
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: IN
30602: NOT
30603: IFFALSE 30607
// exit ;
30605: GO 32241
// if name then
30607: LD_VAR 0 3
30611: IFFALSE 30627
// SetBName ( base_dep , name ) ;
30613: LD_VAR 0 1
30617: PPUSH
30618: LD_VAR 0 3
30622: PPUSH
30623: CALL_OW 500
// base := GetBase ( base_dep ) ;
30627: LD_ADDR_VAR 0 15
30631: PUSH
30632: LD_VAR 0 1
30636: PPUSH
30637: CALL_OW 274
30641: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30642: LD_ADDR_VAR 0 16
30646: PUSH
30647: LD_VAR 0 1
30651: PPUSH
30652: CALL_OW 255
30656: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30657: LD_ADDR_VAR 0 17
30661: PUSH
30662: LD_VAR 0 1
30666: PPUSH
30667: CALL_OW 248
30671: ST_TO_ADDR
// if sources then
30672: LD_VAR 0 5
30676: IFFALSE 30723
// for i = 1 to 3 do
30678: LD_ADDR_VAR 0 8
30682: PUSH
30683: DOUBLE
30684: LD_INT 1
30686: DEC
30687: ST_TO_ADDR
30688: LD_INT 3
30690: PUSH
30691: FOR_TO
30692: IFFALSE 30721
// AddResourceType ( base , i , sources [ i ] ) ;
30694: LD_VAR 0 15
30698: PPUSH
30699: LD_VAR 0 8
30703: PPUSH
30704: LD_VAR 0 5
30708: PUSH
30709: LD_VAR 0 8
30713: ARRAY
30714: PPUSH
30715: CALL_OW 276
30719: GO 30691
30721: POP
30722: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30723: LD_ADDR_VAR 0 18
30727: PUSH
30728: LD_VAR 0 15
30732: PPUSH
30733: LD_VAR 0 2
30737: PPUSH
30738: LD_INT 1
30740: PPUSH
30741: CALL 29984 0 3
30745: ST_TO_ADDR
// InitHc ;
30746: CALL_OW 19
// InitUc ;
30750: CALL_OW 18
// uc_side := side ;
30754: LD_ADDR_OWVAR 20
30758: PUSH
30759: LD_VAR 0 16
30763: ST_TO_ADDR
// uc_nation := nation ;
30764: LD_ADDR_OWVAR 21
30768: PUSH
30769: LD_VAR 0 17
30773: ST_TO_ADDR
// if buildings then
30774: LD_VAR 0 18
30778: IFFALSE 32100
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30780: LD_ADDR_VAR 0 19
30784: PUSH
30785: LD_VAR 0 18
30789: PPUSH
30790: LD_INT 2
30792: PUSH
30793: LD_INT 30
30795: PUSH
30796: LD_INT 29
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 30
30805: PUSH
30806: LD_INT 30
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: EMPTY
30814: LIST
30815: LIST
30816: LIST
30817: PPUSH
30818: CALL_OW 72
30822: ST_TO_ADDR
// if tmp then
30823: LD_VAR 0 19
30827: IFFALSE 30875
// for i in tmp do
30829: LD_ADDR_VAR 0 8
30833: PUSH
30834: LD_VAR 0 19
30838: PUSH
30839: FOR_IN
30840: IFFALSE 30873
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30842: LD_VAR 0 8
30846: PPUSH
30847: CALL_OW 250
30851: PPUSH
30852: LD_VAR 0 8
30856: PPUSH
30857: CALL_OW 251
30861: PPUSH
30862: LD_VAR 0 16
30866: PPUSH
30867: CALL_OW 441
30871: GO 30839
30873: POP
30874: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30875: LD_VAR 0 18
30879: PPUSH
30880: LD_INT 2
30882: PUSH
30883: LD_INT 30
30885: PUSH
30886: LD_INT 32
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 30
30895: PUSH
30896: LD_INT 33
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: LIST
30907: PPUSH
30908: CALL_OW 72
30912: IFFALSE 31000
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30914: LD_ADDR_VAR 0 8
30918: PUSH
30919: LD_VAR 0 18
30923: PPUSH
30924: LD_INT 2
30926: PUSH
30927: LD_INT 30
30929: PUSH
30930: LD_INT 32
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 30
30939: PUSH
30940: LD_INT 33
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: LIST
30951: PPUSH
30952: CALL_OW 72
30956: PUSH
30957: FOR_IN
30958: IFFALSE 30998
// begin if not GetBWeapon ( i ) then
30960: LD_VAR 0 8
30964: PPUSH
30965: CALL_OW 269
30969: NOT
30970: IFFALSE 30996
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30972: LD_VAR 0 8
30976: PPUSH
30977: LD_VAR 0 8
30981: PPUSH
30982: LD_VAR 0 2
30986: PPUSH
30987: CALL 32246 0 2
30991: PPUSH
30992: CALL_OW 431
// end ;
30996: GO 30957
30998: POP
30999: POP
// end ; for i = 1 to personel do
31000: LD_ADDR_VAR 0 8
31004: PUSH
31005: DOUBLE
31006: LD_INT 1
31008: DEC
31009: ST_TO_ADDR
31010: LD_VAR 0 6
31014: PUSH
31015: FOR_TO
31016: IFFALSE 32080
// begin if i > 4 then
31018: LD_VAR 0 8
31022: PUSH
31023: LD_INT 4
31025: GREATER
31026: IFFALSE 31030
// break ;
31028: GO 32080
// case i of 1 :
31030: LD_VAR 0 8
31034: PUSH
31035: LD_INT 1
31037: DOUBLE
31038: EQUAL
31039: IFTRUE 31043
31041: GO 31123
31043: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31044: LD_ADDR_VAR 0 12
31048: PUSH
31049: LD_VAR 0 18
31053: PPUSH
31054: LD_INT 22
31056: PUSH
31057: LD_VAR 0 16
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 58
31068: PUSH
31069: EMPTY
31070: LIST
31071: PUSH
31072: LD_INT 2
31074: PUSH
31075: LD_INT 30
31077: PUSH
31078: LD_INT 32
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 30
31087: PUSH
31088: LD_INT 4
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 30
31097: PUSH
31098: LD_INT 5
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: LIST
31115: PPUSH
31116: CALL_OW 72
31120: ST_TO_ADDR
31121: GO 31345
31123: LD_INT 2
31125: DOUBLE
31126: EQUAL
31127: IFTRUE 31131
31129: GO 31193
31131: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31132: LD_ADDR_VAR 0 12
31136: PUSH
31137: LD_VAR 0 18
31141: PPUSH
31142: LD_INT 22
31144: PUSH
31145: LD_VAR 0 16
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 2
31156: PUSH
31157: LD_INT 30
31159: PUSH
31160: LD_INT 0
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 30
31169: PUSH
31170: LD_INT 1
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: LIST
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PPUSH
31186: CALL_OW 72
31190: ST_TO_ADDR
31191: GO 31345
31193: LD_INT 3
31195: DOUBLE
31196: EQUAL
31197: IFTRUE 31201
31199: GO 31263
31201: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31202: LD_ADDR_VAR 0 12
31206: PUSH
31207: LD_VAR 0 18
31211: PPUSH
31212: LD_INT 22
31214: PUSH
31215: LD_VAR 0 16
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 2
31226: PUSH
31227: LD_INT 30
31229: PUSH
31230: LD_INT 2
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 30
31239: PUSH
31240: LD_INT 3
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: LIST
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PPUSH
31256: CALL_OW 72
31260: ST_TO_ADDR
31261: GO 31345
31263: LD_INT 4
31265: DOUBLE
31266: EQUAL
31267: IFTRUE 31271
31269: GO 31344
31271: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31272: LD_ADDR_VAR 0 12
31276: PUSH
31277: LD_VAR 0 18
31281: PPUSH
31282: LD_INT 22
31284: PUSH
31285: LD_VAR 0 16
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 2
31296: PUSH
31297: LD_INT 30
31299: PUSH
31300: LD_INT 6
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 30
31309: PUSH
31310: LD_INT 7
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 30
31319: PUSH
31320: LD_INT 8
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PPUSH
31337: CALL_OW 72
31341: ST_TO_ADDR
31342: GO 31345
31344: POP
// if i = 1 then
31345: LD_VAR 0 8
31349: PUSH
31350: LD_INT 1
31352: EQUAL
31353: IFFALSE 31464
// begin tmp := [ ] ;
31355: LD_ADDR_VAR 0 19
31359: PUSH
31360: EMPTY
31361: ST_TO_ADDR
// for j in f do
31362: LD_ADDR_VAR 0 9
31366: PUSH
31367: LD_VAR 0 12
31371: PUSH
31372: FOR_IN
31373: IFFALSE 31446
// if GetBType ( j ) = b_bunker then
31375: LD_VAR 0 9
31379: PPUSH
31380: CALL_OW 266
31384: PUSH
31385: LD_INT 32
31387: EQUAL
31388: IFFALSE 31415
// tmp := Insert ( tmp , 1 , j ) else
31390: LD_ADDR_VAR 0 19
31394: PUSH
31395: LD_VAR 0 19
31399: PPUSH
31400: LD_INT 1
31402: PPUSH
31403: LD_VAR 0 9
31407: PPUSH
31408: CALL_OW 2
31412: ST_TO_ADDR
31413: GO 31444
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31415: LD_ADDR_VAR 0 19
31419: PUSH
31420: LD_VAR 0 19
31424: PPUSH
31425: LD_VAR 0 19
31429: PUSH
31430: LD_INT 1
31432: PLUS
31433: PPUSH
31434: LD_VAR 0 9
31438: PPUSH
31439: CALL_OW 2
31443: ST_TO_ADDR
31444: GO 31372
31446: POP
31447: POP
// if tmp then
31448: LD_VAR 0 19
31452: IFFALSE 31464
// f := tmp ;
31454: LD_ADDR_VAR 0 12
31458: PUSH
31459: LD_VAR 0 19
31463: ST_TO_ADDR
// end ; x := personel [ i ] ;
31464: LD_ADDR_VAR 0 13
31468: PUSH
31469: LD_VAR 0 6
31473: PUSH
31474: LD_VAR 0 8
31478: ARRAY
31479: ST_TO_ADDR
// if x = - 1 then
31480: LD_VAR 0 13
31484: PUSH
31485: LD_INT 1
31487: NEG
31488: EQUAL
31489: IFFALSE 31698
// begin for j in f do
31491: LD_ADDR_VAR 0 9
31495: PUSH
31496: LD_VAR 0 12
31500: PUSH
31501: FOR_IN
31502: IFFALSE 31694
// repeat InitHc ;
31504: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31508: LD_VAR 0 9
31512: PPUSH
31513: CALL_OW 266
31517: PUSH
31518: LD_INT 5
31520: EQUAL
31521: IFFALSE 31591
// begin if UnitsInside ( j ) < 3 then
31523: LD_VAR 0 9
31527: PPUSH
31528: CALL_OW 313
31532: PUSH
31533: LD_INT 3
31535: LESS
31536: IFFALSE 31572
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31538: LD_INT 0
31540: PPUSH
31541: LD_INT 5
31543: PUSH
31544: LD_INT 8
31546: PUSH
31547: LD_INT 9
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: LIST
31554: PUSH
31555: LD_VAR 0 17
31559: ARRAY
31560: PPUSH
31561: LD_VAR 0 4
31565: PPUSH
31566: CALL_OW 380
31570: GO 31589
// PrepareHuman ( false , i , skill ) ;
31572: LD_INT 0
31574: PPUSH
31575: LD_VAR 0 8
31579: PPUSH
31580: LD_VAR 0 4
31584: PPUSH
31585: CALL_OW 380
// end else
31589: GO 31608
// PrepareHuman ( false , i , skill ) ;
31591: LD_INT 0
31593: PPUSH
31594: LD_VAR 0 8
31598: PPUSH
31599: LD_VAR 0 4
31603: PPUSH
31604: CALL_OW 380
// un := CreateHuman ;
31608: LD_ADDR_VAR 0 14
31612: PUSH
31613: CALL_OW 44
31617: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31618: LD_ADDR_VAR 0 7
31622: PUSH
31623: LD_VAR 0 7
31627: PPUSH
31628: LD_INT 1
31630: PPUSH
31631: LD_VAR 0 14
31635: PPUSH
31636: CALL_OW 2
31640: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31641: LD_VAR 0 14
31645: PPUSH
31646: LD_VAR 0 9
31650: PPUSH
31651: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31655: LD_VAR 0 9
31659: PPUSH
31660: CALL_OW 313
31664: PUSH
31665: LD_INT 6
31667: EQUAL
31668: PUSH
31669: LD_VAR 0 9
31673: PPUSH
31674: CALL_OW 266
31678: PUSH
31679: LD_INT 32
31681: PUSH
31682: LD_INT 31
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: IN
31689: OR
31690: IFFALSE 31504
31692: GO 31501
31694: POP
31695: POP
// end else
31696: GO 32078
// for j = 1 to x do
31698: LD_ADDR_VAR 0 9
31702: PUSH
31703: DOUBLE
31704: LD_INT 1
31706: DEC
31707: ST_TO_ADDR
31708: LD_VAR 0 13
31712: PUSH
31713: FOR_TO
31714: IFFALSE 32076
// begin InitHc ;
31716: CALL_OW 19
// if not f then
31720: LD_VAR 0 12
31724: NOT
31725: IFFALSE 31814
// begin PrepareHuman ( false , i , skill ) ;
31727: LD_INT 0
31729: PPUSH
31730: LD_VAR 0 8
31734: PPUSH
31735: LD_VAR 0 4
31739: PPUSH
31740: CALL_OW 380
// un := CreateHuman ;
31744: LD_ADDR_VAR 0 14
31748: PUSH
31749: CALL_OW 44
31753: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31754: LD_ADDR_VAR 0 7
31758: PUSH
31759: LD_VAR 0 7
31763: PPUSH
31764: LD_INT 1
31766: PPUSH
31767: LD_VAR 0 14
31771: PPUSH
31772: CALL_OW 2
31776: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31777: LD_VAR 0 14
31781: PPUSH
31782: LD_VAR 0 1
31786: PPUSH
31787: CALL_OW 250
31791: PPUSH
31792: LD_VAR 0 1
31796: PPUSH
31797: CALL_OW 251
31801: PPUSH
31802: LD_INT 10
31804: PPUSH
31805: LD_INT 0
31807: PPUSH
31808: CALL_OW 50
// continue ;
31812: GO 31713
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31814: LD_VAR 0 12
31818: PUSH
31819: LD_INT 1
31821: ARRAY
31822: PPUSH
31823: CALL_OW 313
31827: PUSH
31828: LD_VAR 0 12
31832: PUSH
31833: LD_INT 1
31835: ARRAY
31836: PPUSH
31837: CALL_OW 266
31841: PUSH
31842: LD_INT 32
31844: PUSH
31845: LD_INT 31
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: IN
31852: AND
31853: PUSH
31854: LD_VAR 0 12
31858: PUSH
31859: LD_INT 1
31861: ARRAY
31862: PPUSH
31863: CALL_OW 313
31867: PUSH
31868: LD_INT 6
31870: EQUAL
31871: OR
31872: IFFALSE 31892
// f := Delete ( f , 1 ) ;
31874: LD_ADDR_VAR 0 12
31878: PUSH
31879: LD_VAR 0 12
31883: PPUSH
31884: LD_INT 1
31886: PPUSH
31887: CALL_OW 3
31891: ST_TO_ADDR
// if not f then
31892: LD_VAR 0 12
31896: NOT
31897: IFFALSE 31915
// begin x := x + 2 ;
31899: LD_ADDR_VAR 0 13
31903: PUSH
31904: LD_VAR 0 13
31908: PUSH
31909: LD_INT 2
31911: PLUS
31912: ST_TO_ADDR
// continue ;
31913: GO 31713
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31915: LD_VAR 0 12
31919: PUSH
31920: LD_INT 1
31922: ARRAY
31923: PPUSH
31924: CALL_OW 266
31928: PUSH
31929: LD_INT 5
31931: EQUAL
31932: IFFALSE 32006
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31934: LD_VAR 0 12
31938: PUSH
31939: LD_INT 1
31941: ARRAY
31942: PPUSH
31943: CALL_OW 313
31947: PUSH
31948: LD_INT 3
31950: LESS
31951: IFFALSE 31987
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31953: LD_INT 0
31955: PPUSH
31956: LD_INT 5
31958: PUSH
31959: LD_INT 8
31961: PUSH
31962: LD_INT 9
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: LIST
31969: PUSH
31970: LD_VAR 0 17
31974: ARRAY
31975: PPUSH
31976: LD_VAR 0 4
31980: PPUSH
31981: CALL_OW 380
31985: GO 32004
// PrepareHuman ( false , i , skill ) ;
31987: LD_INT 0
31989: PPUSH
31990: LD_VAR 0 8
31994: PPUSH
31995: LD_VAR 0 4
31999: PPUSH
32000: CALL_OW 380
// end else
32004: GO 32023
// PrepareHuman ( false , i , skill ) ;
32006: LD_INT 0
32008: PPUSH
32009: LD_VAR 0 8
32013: PPUSH
32014: LD_VAR 0 4
32018: PPUSH
32019: CALL_OW 380
// un := CreateHuman ;
32023: LD_ADDR_VAR 0 14
32027: PUSH
32028: CALL_OW 44
32032: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32033: LD_ADDR_VAR 0 7
32037: PUSH
32038: LD_VAR 0 7
32042: PPUSH
32043: LD_INT 1
32045: PPUSH
32046: LD_VAR 0 14
32050: PPUSH
32051: CALL_OW 2
32055: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32056: LD_VAR 0 14
32060: PPUSH
32061: LD_VAR 0 12
32065: PUSH
32066: LD_INT 1
32068: ARRAY
32069: PPUSH
32070: CALL_OW 52
// end ;
32074: GO 31713
32076: POP
32077: POP
// end ;
32078: GO 31015
32080: POP
32081: POP
// result := result ^ buildings ;
32082: LD_ADDR_VAR 0 7
32086: PUSH
32087: LD_VAR 0 7
32091: PUSH
32092: LD_VAR 0 18
32096: ADD
32097: ST_TO_ADDR
// end else
32098: GO 32241
// begin for i = 1 to personel do
32100: LD_ADDR_VAR 0 8
32104: PUSH
32105: DOUBLE
32106: LD_INT 1
32108: DEC
32109: ST_TO_ADDR
32110: LD_VAR 0 6
32114: PUSH
32115: FOR_TO
32116: IFFALSE 32239
// begin if i > 4 then
32118: LD_VAR 0 8
32122: PUSH
32123: LD_INT 4
32125: GREATER
32126: IFFALSE 32130
// break ;
32128: GO 32239
// x := personel [ i ] ;
32130: LD_ADDR_VAR 0 13
32134: PUSH
32135: LD_VAR 0 6
32139: PUSH
32140: LD_VAR 0 8
32144: ARRAY
32145: ST_TO_ADDR
// if x = - 1 then
32146: LD_VAR 0 13
32150: PUSH
32151: LD_INT 1
32153: NEG
32154: EQUAL
32155: IFFALSE 32159
// continue ;
32157: GO 32115
// PrepareHuman ( false , i , skill ) ;
32159: LD_INT 0
32161: PPUSH
32162: LD_VAR 0 8
32166: PPUSH
32167: LD_VAR 0 4
32171: PPUSH
32172: CALL_OW 380
// un := CreateHuman ;
32176: LD_ADDR_VAR 0 14
32180: PUSH
32181: CALL_OW 44
32185: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32186: LD_VAR 0 14
32190: PPUSH
32191: LD_VAR 0 1
32195: PPUSH
32196: CALL_OW 250
32200: PPUSH
32201: LD_VAR 0 1
32205: PPUSH
32206: CALL_OW 251
32210: PPUSH
32211: LD_INT 10
32213: PPUSH
32214: LD_INT 0
32216: PPUSH
32217: CALL_OW 50
// result := result ^ un ;
32221: LD_ADDR_VAR 0 7
32225: PUSH
32226: LD_VAR 0 7
32230: PUSH
32231: LD_VAR 0 14
32235: ADD
32236: ST_TO_ADDR
// end ;
32237: GO 32115
32239: POP
32240: POP
// end ; end ;
32241: LD_VAR 0 7
32245: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32246: LD_INT 0
32248: PPUSH
32249: PPUSH
32250: PPUSH
32251: PPUSH
32252: PPUSH
32253: PPUSH
32254: PPUSH
32255: PPUSH
32256: PPUSH
32257: PPUSH
32258: PPUSH
32259: PPUSH
32260: PPUSH
32261: PPUSH
32262: PPUSH
32263: PPUSH
// result := false ;
32264: LD_ADDR_VAR 0 3
32268: PUSH
32269: LD_INT 0
32271: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32272: LD_VAR 0 1
32276: NOT
32277: PUSH
32278: LD_VAR 0 1
32282: PPUSH
32283: CALL_OW 266
32287: PUSH
32288: LD_INT 32
32290: PUSH
32291: LD_INT 33
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: IN
32298: NOT
32299: OR
32300: IFFALSE 32304
// exit ;
32302: GO 33413
// nat := GetNation ( tower ) ;
32304: LD_ADDR_VAR 0 12
32308: PUSH
32309: LD_VAR 0 1
32313: PPUSH
32314: CALL_OW 248
32318: ST_TO_ADDR
// side := GetSide ( tower ) ;
32319: LD_ADDR_VAR 0 16
32323: PUSH
32324: LD_VAR 0 1
32328: PPUSH
32329: CALL_OW 255
32333: ST_TO_ADDR
// x := GetX ( tower ) ;
32334: LD_ADDR_VAR 0 10
32338: PUSH
32339: LD_VAR 0 1
32343: PPUSH
32344: CALL_OW 250
32348: ST_TO_ADDR
// y := GetY ( tower ) ;
32349: LD_ADDR_VAR 0 11
32353: PUSH
32354: LD_VAR 0 1
32358: PPUSH
32359: CALL_OW 251
32363: ST_TO_ADDR
// if not x or not y then
32364: LD_VAR 0 10
32368: NOT
32369: PUSH
32370: LD_VAR 0 11
32374: NOT
32375: OR
32376: IFFALSE 32380
// exit ;
32378: GO 33413
// weapon := 0 ;
32380: LD_ADDR_VAR 0 18
32384: PUSH
32385: LD_INT 0
32387: ST_TO_ADDR
// fac_list := [ ] ;
32388: LD_ADDR_VAR 0 17
32392: PUSH
32393: EMPTY
32394: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32395: LD_ADDR_VAR 0 6
32399: PUSH
32400: LD_VAR 0 1
32404: PPUSH
32405: CALL_OW 274
32409: PPUSH
32410: LD_VAR 0 2
32414: PPUSH
32415: LD_INT 0
32417: PPUSH
32418: CALL 29984 0 3
32422: PPUSH
32423: LD_INT 30
32425: PUSH
32426: LD_INT 3
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PPUSH
32433: CALL_OW 72
32437: ST_TO_ADDR
// if not factories then
32438: LD_VAR 0 6
32442: NOT
32443: IFFALSE 32447
// exit ;
32445: GO 33413
// for i in factories do
32447: LD_ADDR_VAR 0 8
32451: PUSH
32452: LD_VAR 0 6
32456: PUSH
32457: FOR_IN
32458: IFFALSE 32483
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32460: LD_ADDR_VAR 0 17
32464: PUSH
32465: LD_VAR 0 17
32469: PUSH
32470: LD_VAR 0 8
32474: PPUSH
32475: CALL_OW 478
32479: UNION
32480: ST_TO_ADDR
32481: GO 32457
32483: POP
32484: POP
// if not fac_list then
32485: LD_VAR 0 17
32489: NOT
32490: IFFALSE 32494
// exit ;
32492: GO 33413
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32494: LD_ADDR_VAR 0 5
32498: PUSH
32499: LD_INT 4
32501: PUSH
32502: LD_INT 5
32504: PUSH
32505: LD_INT 9
32507: PUSH
32508: LD_INT 10
32510: PUSH
32511: LD_INT 6
32513: PUSH
32514: LD_INT 7
32516: PUSH
32517: LD_INT 11
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 27
32531: PUSH
32532: LD_INT 28
32534: PUSH
32535: LD_INT 26
32537: PUSH
32538: LD_INT 30
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 43
32549: PUSH
32550: LD_INT 44
32552: PUSH
32553: LD_INT 46
32555: PUSH
32556: LD_INT 45
32558: PUSH
32559: LD_INT 47
32561: PUSH
32562: LD_INT 49
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: LIST
32577: PUSH
32578: LD_VAR 0 12
32582: ARRAY
32583: ST_TO_ADDR
// list := list isect fac_list ;
32584: LD_ADDR_VAR 0 5
32588: PUSH
32589: LD_VAR 0 5
32593: PUSH
32594: LD_VAR 0 17
32598: ISECT
32599: ST_TO_ADDR
// if not list then
32600: LD_VAR 0 5
32604: NOT
32605: IFFALSE 32609
// exit ;
32607: GO 33413
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32609: LD_VAR 0 12
32613: PUSH
32614: LD_INT 3
32616: EQUAL
32617: PUSH
32618: LD_INT 49
32620: PUSH
32621: LD_VAR 0 5
32625: IN
32626: AND
32627: PUSH
32628: LD_INT 31
32630: PPUSH
32631: LD_VAR 0 16
32635: PPUSH
32636: CALL_OW 321
32640: PUSH
32641: LD_INT 2
32643: EQUAL
32644: AND
32645: IFFALSE 32705
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32647: LD_INT 22
32649: PUSH
32650: LD_VAR 0 16
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 35
32661: PUSH
32662: LD_INT 49
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 91
32671: PUSH
32672: LD_VAR 0 1
32676: PUSH
32677: LD_INT 10
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: LIST
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: LIST
32689: PPUSH
32690: CALL_OW 69
32694: NOT
32695: IFFALSE 32705
// weapon := ru_time_lapser ;
32697: LD_ADDR_VAR 0 18
32701: PUSH
32702: LD_INT 49
32704: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32705: LD_VAR 0 12
32709: PUSH
32710: LD_INT 1
32712: PUSH
32713: LD_INT 2
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: IN
32720: PUSH
32721: LD_INT 11
32723: PUSH
32724: LD_VAR 0 5
32728: IN
32729: PUSH
32730: LD_INT 30
32732: PUSH
32733: LD_VAR 0 5
32737: IN
32738: OR
32739: AND
32740: PUSH
32741: LD_INT 6
32743: PPUSH
32744: LD_VAR 0 16
32748: PPUSH
32749: CALL_OW 321
32753: PUSH
32754: LD_INT 2
32756: EQUAL
32757: AND
32758: IFFALSE 32923
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32760: LD_INT 22
32762: PUSH
32763: LD_VAR 0 16
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 2
32774: PUSH
32775: LD_INT 35
32777: PUSH
32778: LD_INT 11
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 35
32787: PUSH
32788: LD_INT 30
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 91
32802: PUSH
32803: LD_VAR 0 1
32807: PUSH
32808: LD_INT 18
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: LIST
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: LIST
32820: PPUSH
32821: CALL_OW 69
32825: NOT
32826: PUSH
32827: LD_INT 22
32829: PUSH
32830: LD_VAR 0 16
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 2
32841: PUSH
32842: LD_INT 30
32844: PUSH
32845: LD_INT 32
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 30
32854: PUSH
32855: LD_INT 33
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 91
32869: PUSH
32870: LD_VAR 0 1
32874: PUSH
32875: LD_INT 12
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: LIST
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: LIST
32887: PUSH
32888: EMPTY
32889: LIST
32890: PPUSH
32891: CALL_OW 69
32895: PUSH
32896: LD_INT 2
32898: GREATER
32899: AND
32900: IFFALSE 32923
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32902: LD_ADDR_VAR 0 18
32906: PUSH
32907: LD_INT 11
32909: PUSH
32910: LD_INT 30
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_VAR 0 12
32921: ARRAY
32922: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32923: LD_VAR 0 18
32927: NOT
32928: PUSH
32929: LD_INT 40
32931: PPUSH
32932: LD_VAR 0 16
32936: PPUSH
32937: CALL_OW 321
32941: PUSH
32942: LD_INT 2
32944: EQUAL
32945: AND
32946: PUSH
32947: LD_INT 7
32949: PUSH
32950: LD_VAR 0 5
32954: IN
32955: PUSH
32956: LD_INT 28
32958: PUSH
32959: LD_VAR 0 5
32963: IN
32964: OR
32965: PUSH
32966: LD_INT 45
32968: PUSH
32969: LD_VAR 0 5
32973: IN
32974: OR
32975: AND
32976: IFFALSE 33230
// begin hex := GetHexInfo ( x , y ) ;
32978: LD_ADDR_VAR 0 4
32982: PUSH
32983: LD_VAR 0 10
32987: PPUSH
32988: LD_VAR 0 11
32992: PPUSH
32993: CALL_OW 546
32997: ST_TO_ADDR
// if hex [ 1 ] then
32998: LD_VAR 0 4
33002: PUSH
33003: LD_INT 1
33005: ARRAY
33006: IFFALSE 33010
// exit ;
33008: GO 33413
// height := hex [ 2 ] ;
33010: LD_ADDR_VAR 0 15
33014: PUSH
33015: LD_VAR 0 4
33019: PUSH
33020: LD_INT 2
33022: ARRAY
33023: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33024: LD_ADDR_VAR 0 14
33028: PUSH
33029: LD_INT 0
33031: PUSH
33032: LD_INT 2
33034: PUSH
33035: LD_INT 3
33037: PUSH
33038: LD_INT 5
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: ST_TO_ADDR
// for i in tmp do
33047: LD_ADDR_VAR 0 8
33051: PUSH
33052: LD_VAR 0 14
33056: PUSH
33057: FOR_IN
33058: IFFALSE 33228
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33060: LD_ADDR_VAR 0 9
33064: PUSH
33065: LD_VAR 0 10
33069: PPUSH
33070: LD_VAR 0 8
33074: PPUSH
33075: LD_INT 5
33077: PPUSH
33078: CALL_OW 272
33082: PUSH
33083: LD_VAR 0 11
33087: PPUSH
33088: LD_VAR 0 8
33092: PPUSH
33093: LD_INT 5
33095: PPUSH
33096: CALL_OW 273
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33105: LD_VAR 0 9
33109: PUSH
33110: LD_INT 1
33112: ARRAY
33113: PPUSH
33114: LD_VAR 0 9
33118: PUSH
33119: LD_INT 2
33121: ARRAY
33122: PPUSH
33123: CALL_OW 488
33127: IFFALSE 33226
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33129: LD_ADDR_VAR 0 4
33133: PUSH
33134: LD_VAR 0 9
33138: PUSH
33139: LD_INT 1
33141: ARRAY
33142: PPUSH
33143: LD_VAR 0 9
33147: PUSH
33148: LD_INT 2
33150: ARRAY
33151: PPUSH
33152: CALL_OW 546
33156: ST_TO_ADDR
// if hex [ 1 ] then
33157: LD_VAR 0 4
33161: PUSH
33162: LD_INT 1
33164: ARRAY
33165: IFFALSE 33169
// continue ;
33167: GO 33057
// h := hex [ 2 ] ;
33169: LD_ADDR_VAR 0 13
33173: PUSH
33174: LD_VAR 0 4
33178: PUSH
33179: LD_INT 2
33181: ARRAY
33182: ST_TO_ADDR
// if h + 7 < height then
33183: LD_VAR 0 13
33187: PUSH
33188: LD_INT 7
33190: PLUS
33191: PUSH
33192: LD_VAR 0 15
33196: LESS
33197: IFFALSE 33226
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33199: LD_ADDR_VAR 0 18
33203: PUSH
33204: LD_INT 7
33206: PUSH
33207: LD_INT 28
33209: PUSH
33210: LD_INT 45
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: LIST
33217: PUSH
33218: LD_VAR 0 12
33222: ARRAY
33223: ST_TO_ADDR
// break ;
33224: GO 33228
// end ; end ; end ;
33226: GO 33057
33228: POP
33229: POP
// end ; if not weapon then
33230: LD_VAR 0 18
33234: NOT
33235: IFFALSE 33295
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33237: LD_ADDR_VAR 0 5
33241: PUSH
33242: LD_VAR 0 5
33246: PUSH
33247: LD_INT 11
33249: PUSH
33250: LD_INT 30
33252: PUSH
33253: LD_INT 49
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: LIST
33260: DIFF
33261: ST_TO_ADDR
// if not list then
33262: LD_VAR 0 5
33266: NOT
33267: IFFALSE 33271
// exit ;
33269: GO 33413
// weapon := list [ rand ( 1 , list ) ] ;
33271: LD_ADDR_VAR 0 18
33275: PUSH
33276: LD_VAR 0 5
33280: PUSH
33281: LD_INT 1
33283: PPUSH
33284: LD_VAR 0 5
33288: PPUSH
33289: CALL_OW 12
33293: ARRAY
33294: ST_TO_ADDR
// end ; if weapon then
33295: LD_VAR 0 18
33299: IFFALSE 33413
// begin tmp := CostOfWeapon ( weapon ) ;
33301: LD_ADDR_VAR 0 14
33305: PUSH
33306: LD_VAR 0 18
33310: PPUSH
33311: CALL_OW 451
33315: ST_TO_ADDR
// j := GetBase ( tower ) ;
33316: LD_ADDR_VAR 0 9
33320: PUSH
33321: LD_VAR 0 1
33325: PPUSH
33326: CALL_OW 274
33330: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33331: LD_VAR 0 9
33335: PPUSH
33336: LD_INT 1
33338: PPUSH
33339: CALL_OW 275
33343: PUSH
33344: LD_VAR 0 14
33348: PUSH
33349: LD_INT 1
33351: ARRAY
33352: GREATEREQUAL
33353: PUSH
33354: LD_VAR 0 9
33358: PPUSH
33359: LD_INT 2
33361: PPUSH
33362: CALL_OW 275
33366: PUSH
33367: LD_VAR 0 14
33371: PUSH
33372: LD_INT 2
33374: ARRAY
33375: GREATEREQUAL
33376: AND
33377: PUSH
33378: LD_VAR 0 9
33382: PPUSH
33383: LD_INT 3
33385: PPUSH
33386: CALL_OW 275
33390: PUSH
33391: LD_VAR 0 14
33395: PUSH
33396: LD_INT 3
33398: ARRAY
33399: GREATEREQUAL
33400: AND
33401: IFFALSE 33413
// result := weapon ;
33403: LD_ADDR_VAR 0 3
33407: PUSH
33408: LD_VAR 0 18
33412: ST_TO_ADDR
// end ; end ;
33413: LD_VAR 0 3
33417: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33418: LD_INT 0
33420: PPUSH
33421: PPUSH
// result := true ;
33422: LD_ADDR_VAR 0 3
33426: PUSH
33427: LD_INT 1
33429: ST_TO_ADDR
// if array1 = array2 then
33430: LD_VAR 0 1
33434: PUSH
33435: LD_VAR 0 2
33439: EQUAL
33440: IFFALSE 33500
// begin for i = 1 to array1 do
33442: LD_ADDR_VAR 0 4
33446: PUSH
33447: DOUBLE
33448: LD_INT 1
33450: DEC
33451: ST_TO_ADDR
33452: LD_VAR 0 1
33456: PUSH
33457: FOR_TO
33458: IFFALSE 33496
// if array1 [ i ] <> array2 [ i ] then
33460: LD_VAR 0 1
33464: PUSH
33465: LD_VAR 0 4
33469: ARRAY
33470: PUSH
33471: LD_VAR 0 2
33475: PUSH
33476: LD_VAR 0 4
33480: ARRAY
33481: NONEQUAL
33482: IFFALSE 33494
// begin result := false ;
33484: LD_ADDR_VAR 0 3
33488: PUSH
33489: LD_INT 0
33491: ST_TO_ADDR
// break ;
33492: GO 33496
// end ;
33494: GO 33457
33496: POP
33497: POP
// end else
33498: GO 33508
// result := false ;
33500: LD_ADDR_VAR 0 3
33504: PUSH
33505: LD_INT 0
33507: ST_TO_ADDR
// end ;
33508: LD_VAR 0 3
33512: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33513: LD_INT 0
33515: PPUSH
33516: PPUSH
// if not array1 or not array2 then
33517: LD_VAR 0 1
33521: NOT
33522: PUSH
33523: LD_VAR 0 2
33527: NOT
33528: OR
33529: IFFALSE 33533
// exit ;
33531: GO 33597
// result := true ;
33533: LD_ADDR_VAR 0 3
33537: PUSH
33538: LD_INT 1
33540: ST_TO_ADDR
// for i = 1 to array1 do
33541: LD_ADDR_VAR 0 4
33545: PUSH
33546: DOUBLE
33547: LD_INT 1
33549: DEC
33550: ST_TO_ADDR
33551: LD_VAR 0 1
33555: PUSH
33556: FOR_TO
33557: IFFALSE 33595
// if array1 [ i ] <> array2 [ i ] then
33559: LD_VAR 0 1
33563: PUSH
33564: LD_VAR 0 4
33568: ARRAY
33569: PUSH
33570: LD_VAR 0 2
33574: PUSH
33575: LD_VAR 0 4
33579: ARRAY
33580: NONEQUAL
33581: IFFALSE 33593
// begin result := false ;
33583: LD_ADDR_VAR 0 3
33587: PUSH
33588: LD_INT 0
33590: ST_TO_ADDR
// break ;
33591: GO 33595
// end ;
33593: GO 33556
33595: POP
33596: POP
// end ;
33597: LD_VAR 0 3
33601: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33602: LD_INT 0
33604: PPUSH
33605: PPUSH
33606: PPUSH
// pom := GetBase ( fac ) ;
33607: LD_ADDR_VAR 0 5
33611: PUSH
33612: LD_VAR 0 1
33616: PPUSH
33617: CALL_OW 274
33621: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33622: LD_ADDR_VAR 0 4
33626: PUSH
33627: LD_VAR 0 2
33631: PUSH
33632: LD_INT 1
33634: ARRAY
33635: PPUSH
33636: LD_VAR 0 2
33640: PUSH
33641: LD_INT 2
33643: ARRAY
33644: PPUSH
33645: LD_VAR 0 2
33649: PUSH
33650: LD_INT 3
33652: ARRAY
33653: PPUSH
33654: LD_VAR 0 2
33658: PUSH
33659: LD_INT 4
33661: ARRAY
33662: PPUSH
33663: CALL_OW 449
33667: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33668: LD_ADDR_VAR 0 3
33672: PUSH
33673: LD_VAR 0 5
33677: PPUSH
33678: LD_INT 1
33680: PPUSH
33681: CALL_OW 275
33685: PUSH
33686: LD_VAR 0 4
33690: PUSH
33691: LD_INT 1
33693: ARRAY
33694: GREATEREQUAL
33695: PUSH
33696: LD_VAR 0 5
33700: PPUSH
33701: LD_INT 2
33703: PPUSH
33704: CALL_OW 275
33708: PUSH
33709: LD_VAR 0 4
33713: PUSH
33714: LD_INT 2
33716: ARRAY
33717: GREATEREQUAL
33718: AND
33719: PUSH
33720: LD_VAR 0 5
33724: PPUSH
33725: LD_INT 3
33727: PPUSH
33728: CALL_OW 275
33732: PUSH
33733: LD_VAR 0 4
33737: PUSH
33738: LD_INT 3
33740: ARRAY
33741: GREATEREQUAL
33742: AND
33743: ST_TO_ADDR
// end ;
33744: LD_VAR 0 3
33748: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33749: LD_INT 0
33751: PPUSH
33752: PPUSH
33753: PPUSH
33754: PPUSH
// pom := GetBase ( building ) ;
33755: LD_ADDR_VAR 0 3
33759: PUSH
33760: LD_VAR 0 1
33764: PPUSH
33765: CALL_OW 274
33769: ST_TO_ADDR
// if not pom then
33770: LD_VAR 0 3
33774: NOT
33775: IFFALSE 33779
// exit ;
33777: GO 33949
// btype := GetBType ( building ) ;
33779: LD_ADDR_VAR 0 5
33783: PUSH
33784: LD_VAR 0 1
33788: PPUSH
33789: CALL_OW 266
33793: ST_TO_ADDR
// if btype = b_armoury then
33794: LD_VAR 0 5
33798: PUSH
33799: LD_INT 4
33801: EQUAL
33802: IFFALSE 33812
// btype := b_barracks ;
33804: LD_ADDR_VAR 0 5
33808: PUSH
33809: LD_INT 5
33811: ST_TO_ADDR
// if btype = b_depot then
33812: LD_VAR 0 5
33816: PUSH
33817: LD_INT 0
33819: EQUAL
33820: IFFALSE 33830
// btype := b_warehouse ;
33822: LD_ADDR_VAR 0 5
33826: PUSH
33827: LD_INT 1
33829: ST_TO_ADDR
// if btype = b_workshop then
33830: LD_VAR 0 5
33834: PUSH
33835: LD_INT 2
33837: EQUAL
33838: IFFALSE 33848
// btype := b_factory ;
33840: LD_ADDR_VAR 0 5
33844: PUSH
33845: LD_INT 3
33847: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33848: LD_ADDR_VAR 0 4
33852: PUSH
33853: LD_VAR 0 5
33857: PPUSH
33858: LD_VAR 0 1
33862: PPUSH
33863: CALL_OW 248
33867: PPUSH
33868: CALL_OW 450
33872: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33873: LD_ADDR_VAR 0 2
33877: PUSH
33878: LD_VAR 0 3
33882: PPUSH
33883: LD_INT 1
33885: PPUSH
33886: CALL_OW 275
33890: PUSH
33891: LD_VAR 0 4
33895: PUSH
33896: LD_INT 1
33898: ARRAY
33899: GREATEREQUAL
33900: PUSH
33901: LD_VAR 0 3
33905: PPUSH
33906: LD_INT 2
33908: PPUSH
33909: CALL_OW 275
33913: PUSH
33914: LD_VAR 0 4
33918: PUSH
33919: LD_INT 2
33921: ARRAY
33922: GREATEREQUAL
33923: AND
33924: PUSH
33925: LD_VAR 0 3
33929: PPUSH
33930: LD_INT 3
33932: PPUSH
33933: CALL_OW 275
33937: PUSH
33938: LD_VAR 0 4
33942: PUSH
33943: LD_INT 3
33945: ARRAY
33946: GREATEREQUAL
33947: AND
33948: ST_TO_ADDR
// end ;
33949: LD_VAR 0 2
33953: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33954: LD_INT 0
33956: PPUSH
33957: PPUSH
33958: PPUSH
// pom := GetBase ( building ) ;
33959: LD_ADDR_VAR 0 4
33963: PUSH
33964: LD_VAR 0 1
33968: PPUSH
33969: CALL_OW 274
33973: ST_TO_ADDR
// if not pom then
33974: LD_VAR 0 4
33978: NOT
33979: IFFALSE 33983
// exit ;
33981: GO 34084
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33983: LD_ADDR_VAR 0 5
33987: PUSH
33988: LD_VAR 0 2
33992: PPUSH
33993: LD_VAR 0 1
33997: PPUSH
33998: CALL_OW 248
34002: PPUSH
34003: CALL_OW 450
34007: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34008: LD_ADDR_VAR 0 3
34012: PUSH
34013: LD_VAR 0 4
34017: PPUSH
34018: LD_INT 1
34020: PPUSH
34021: CALL_OW 275
34025: PUSH
34026: LD_VAR 0 5
34030: PUSH
34031: LD_INT 1
34033: ARRAY
34034: GREATEREQUAL
34035: PUSH
34036: LD_VAR 0 4
34040: PPUSH
34041: LD_INT 2
34043: PPUSH
34044: CALL_OW 275
34048: PUSH
34049: LD_VAR 0 5
34053: PUSH
34054: LD_INT 2
34056: ARRAY
34057: GREATEREQUAL
34058: AND
34059: PUSH
34060: LD_VAR 0 4
34064: PPUSH
34065: LD_INT 3
34067: PPUSH
34068: CALL_OW 275
34072: PUSH
34073: LD_VAR 0 5
34077: PUSH
34078: LD_INT 3
34080: ARRAY
34081: GREATEREQUAL
34082: AND
34083: ST_TO_ADDR
// end ;
34084: LD_VAR 0 3
34088: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34089: LD_INT 0
34091: PPUSH
34092: PPUSH
34093: PPUSH
34094: PPUSH
34095: PPUSH
34096: PPUSH
34097: PPUSH
34098: PPUSH
34099: PPUSH
34100: PPUSH
34101: PPUSH
// result := false ;
34102: LD_ADDR_VAR 0 8
34106: PUSH
34107: LD_INT 0
34109: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
34110: LD_VAR 0 5
34114: NOT
34115: PUSH
34116: LD_VAR 0 1
34120: NOT
34121: OR
34122: PUSH
34123: LD_VAR 0 2
34127: NOT
34128: OR
34129: PUSH
34130: LD_VAR 0 3
34134: NOT
34135: OR
34136: IFFALSE 34140
// exit ;
34138: GO 34954
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
34140: LD_ADDR_VAR 0 14
34144: PUSH
34145: LD_VAR 0 1
34149: PPUSH
34150: LD_VAR 0 2
34154: PPUSH
34155: LD_VAR 0 3
34159: PPUSH
34160: LD_VAR 0 4
34164: PPUSH
34165: LD_VAR 0 5
34169: PUSH
34170: LD_INT 1
34172: ARRAY
34173: PPUSH
34174: CALL_OW 248
34178: PPUSH
34179: LD_INT 0
34181: PPUSH
34182: CALL 36187 0 6
34186: ST_TO_ADDR
// if not hexes then
34187: LD_VAR 0 14
34191: NOT
34192: IFFALSE 34196
// exit ;
34194: GO 34954
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34196: LD_ADDR_VAR 0 17
34200: PUSH
34201: LD_VAR 0 5
34205: PPUSH
34206: LD_INT 22
34208: PUSH
34209: LD_VAR 0 13
34213: PPUSH
34214: CALL_OW 255
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 2
34225: PUSH
34226: LD_INT 30
34228: PUSH
34229: LD_INT 0
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 30
34238: PUSH
34239: LD_INT 1
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: LIST
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PPUSH
34255: CALL_OW 72
34259: ST_TO_ADDR
// for i = 1 to hexes do
34260: LD_ADDR_VAR 0 9
34264: PUSH
34265: DOUBLE
34266: LD_INT 1
34268: DEC
34269: ST_TO_ADDR
34270: LD_VAR 0 14
34274: PUSH
34275: FOR_TO
34276: IFFALSE 34952
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34278: LD_ADDR_VAR 0 13
34282: PUSH
34283: LD_VAR 0 14
34287: PUSH
34288: LD_VAR 0 9
34292: ARRAY
34293: PUSH
34294: LD_INT 1
34296: ARRAY
34297: PPUSH
34298: LD_VAR 0 14
34302: PUSH
34303: LD_VAR 0 9
34307: ARRAY
34308: PUSH
34309: LD_INT 2
34311: ARRAY
34312: PPUSH
34313: CALL_OW 428
34317: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34318: LD_VAR 0 14
34322: PUSH
34323: LD_VAR 0 9
34327: ARRAY
34328: PUSH
34329: LD_INT 1
34331: ARRAY
34332: PPUSH
34333: LD_VAR 0 14
34337: PUSH
34338: LD_VAR 0 9
34342: ARRAY
34343: PUSH
34344: LD_INT 2
34346: ARRAY
34347: PPUSH
34348: CALL_OW 351
34352: PUSH
34353: LD_VAR 0 14
34357: PUSH
34358: LD_VAR 0 9
34362: ARRAY
34363: PUSH
34364: LD_INT 1
34366: ARRAY
34367: PPUSH
34368: LD_VAR 0 14
34372: PUSH
34373: LD_VAR 0 9
34377: ARRAY
34378: PUSH
34379: LD_INT 2
34381: ARRAY
34382: PPUSH
34383: CALL_OW 488
34387: NOT
34388: OR
34389: PUSH
34390: LD_VAR 0 13
34394: PPUSH
34395: CALL_OW 247
34399: PUSH
34400: LD_INT 3
34402: EQUAL
34403: OR
34404: IFFALSE 34410
// exit ;
34406: POP
34407: POP
34408: GO 34954
// if not tmp then
34410: LD_VAR 0 13
34414: NOT
34415: IFFALSE 34419
// continue ;
34417: GO 34275
// result := true ;
34419: LD_ADDR_VAR 0 8
34423: PUSH
34424: LD_INT 1
34426: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34427: LD_VAR 0 6
34431: PUSH
34432: LD_VAR 0 13
34436: PPUSH
34437: CALL_OW 247
34441: PUSH
34442: LD_INT 2
34444: EQUAL
34445: AND
34446: PUSH
34447: LD_VAR 0 13
34451: PPUSH
34452: CALL_OW 263
34456: PUSH
34457: LD_INT 1
34459: EQUAL
34460: AND
34461: IFFALSE 34625
// begin if IsDrivenBy ( tmp ) then
34463: LD_VAR 0 13
34467: PPUSH
34468: CALL_OW 311
34472: IFFALSE 34476
// continue ;
34474: GO 34275
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34476: LD_VAR 0 6
34480: PPUSH
34481: LD_INT 3
34483: PUSH
34484: LD_INT 60
34486: PUSH
34487: EMPTY
34488: LIST
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 3
34496: PUSH
34497: LD_INT 55
34499: PUSH
34500: EMPTY
34501: LIST
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PPUSH
34511: CALL_OW 72
34515: IFFALSE 34623
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34517: LD_ADDR_VAR 0 18
34521: PUSH
34522: LD_VAR 0 6
34526: PPUSH
34527: LD_INT 3
34529: PUSH
34530: LD_INT 60
34532: PUSH
34533: EMPTY
34534: LIST
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 3
34542: PUSH
34543: LD_INT 55
34545: PUSH
34546: EMPTY
34547: LIST
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PPUSH
34557: CALL_OW 72
34561: PUSH
34562: LD_INT 1
34564: ARRAY
34565: ST_TO_ADDR
// if IsInUnit ( driver ) then
34566: LD_VAR 0 18
34570: PPUSH
34571: CALL_OW 310
34575: IFFALSE 34586
// ComExit ( driver ) ;
34577: LD_VAR 0 18
34581: PPUSH
34582: CALL 59967 0 1
// AddComEnterUnit ( driver , tmp ) ;
34586: LD_VAR 0 18
34590: PPUSH
34591: LD_VAR 0 13
34595: PPUSH
34596: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34600: LD_VAR 0 18
34604: PPUSH
34605: LD_VAR 0 7
34609: PPUSH
34610: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34614: LD_VAR 0 18
34618: PPUSH
34619: CALL_OW 181
// end ; continue ;
34623: GO 34275
// end ; if not cleaners or not tmp in cleaners then
34625: LD_VAR 0 6
34629: NOT
34630: PUSH
34631: LD_VAR 0 13
34635: PUSH
34636: LD_VAR 0 6
34640: IN
34641: NOT
34642: OR
34643: IFFALSE 34950
// begin if dep then
34645: LD_VAR 0 17
34649: IFFALSE 34785
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34651: LD_ADDR_VAR 0 16
34655: PUSH
34656: LD_VAR 0 17
34660: PUSH
34661: LD_INT 1
34663: ARRAY
34664: PPUSH
34665: CALL_OW 250
34669: PPUSH
34670: LD_VAR 0 17
34674: PUSH
34675: LD_INT 1
34677: ARRAY
34678: PPUSH
34679: CALL_OW 254
34683: PPUSH
34684: LD_INT 5
34686: PPUSH
34687: CALL_OW 272
34691: PUSH
34692: LD_VAR 0 17
34696: PUSH
34697: LD_INT 1
34699: ARRAY
34700: PPUSH
34701: CALL_OW 251
34705: PPUSH
34706: LD_VAR 0 17
34710: PUSH
34711: LD_INT 1
34713: ARRAY
34714: PPUSH
34715: CALL_OW 254
34719: PPUSH
34720: LD_INT 5
34722: PPUSH
34723: CALL_OW 273
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34732: LD_VAR 0 16
34736: PUSH
34737: LD_INT 1
34739: ARRAY
34740: PPUSH
34741: LD_VAR 0 16
34745: PUSH
34746: LD_INT 2
34748: ARRAY
34749: PPUSH
34750: CALL_OW 488
34754: IFFALSE 34785
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34756: LD_VAR 0 13
34760: PPUSH
34761: LD_VAR 0 16
34765: PUSH
34766: LD_INT 1
34768: ARRAY
34769: PPUSH
34770: LD_VAR 0 16
34774: PUSH
34775: LD_INT 2
34777: ARRAY
34778: PPUSH
34779: CALL_OW 111
// continue ;
34783: GO 34275
// end ; end ; r := GetDir ( tmp ) ;
34785: LD_ADDR_VAR 0 15
34789: PUSH
34790: LD_VAR 0 13
34794: PPUSH
34795: CALL_OW 254
34799: ST_TO_ADDR
// if r = 5 then
34800: LD_VAR 0 15
34804: PUSH
34805: LD_INT 5
34807: EQUAL
34808: IFFALSE 34818
// r := 0 ;
34810: LD_ADDR_VAR 0 15
34814: PUSH
34815: LD_INT 0
34817: ST_TO_ADDR
// for j = r to 5 do
34818: LD_ADDR_VAR 0 10
34822: PUSH
34823: DOUBLE
34824: LD_VAR 0 15
34828: DEC
34829: ST_TO_ADDR
34830: LD_INT 5
34832: PUSH
34833: FOR_TO
34834: IFFALSE 34948
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34836: LD_ADDR_VAR 0 11
34840: PUSH
34841: LD_VAR 0 13
34845: PPUSH
34846: CALL_OW 250
34850: PPUSH
34851: LD_VAR 0 10
34855: PPUSH
34856: LD_INT 2
34858: PPUSH
34859: CALL_OW 272
34863: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34864: LD_ADDR_VAR 0 12
34868: PUSH
34869: LD_VAR 0 13
34873: PPUSH
34874: CALL_OW 251
34878: PPUSH
34879: LD_VAR 0 10
34883: PPUSH
34884: LD_INT 2
34886: PPUSH
34887: CALL_OW 273
34891: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34892: LD_VAR 0 11
34896: PPUSH
34897: LD_VAR 0 12
34901: PPUSH
34902: CALL_OW 488
34906: PUSH
34907: LD_VAR 0 11
34911: PPUSH
34912: LD_VAR 0 12
34916: PPUSH
34917: CALL_OW 428
34921: NOT
34922: AND
34923: IFFALSE 34946
// begin ComMoveXY ( tmp , _x , _y ) ;
34925: LD_VAR 0 13
34929: PPUSH
34930: LD_VAR 0 11
34934: PPUSH
34935: LD_VAR 0 12
34939: PPUSH
34940: CALL_OW 111
// break ;
34944: GO 34948
// end ; end ;
34946: GO 34833
34948: POP
34949: POP
// end ; end ;
34950: GO 34275
34952: POP
34953: POP
// end ;
34954: LD_VAR 0 8
34958: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34959: LD_INT 0
34961: PPUSH
// result := true ;
34962: LD_ADDR_VAR 0 3
34966: PUSH
34967: LD_INT 1
34969: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34970: LD_VAR 0 2
34974: PUSH
34975: LD_INT 24
34977: DOUBLE
34978: EQUAL
34979: IFTRUE 34989
34981: LD_INT 33
34983: DOUBLE
34984: EQUAL
34985: IFTRUE 34989
34987: GO 35014
34989: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34990: LD_ADDR_VAR 0 3
34994: PUSH
34995: LD_INT 32
34997: PPUSH
34998: LD_VAR 0 1
35002: PPUSH
35003: CALL_OW 321
35007: PUSH
35008: LD_INT 2
35010: EQUAL
35011: ST_TO_ADDR
35012: GO 35330
35014: LD_INT 20
35016: DOUBLE
35017: EQUAL
35018: IFTRUE 35022
35020: GO 35047
35022: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
35023: LD_ADDR_VAR 0 3
35027: PUSH
35028: LD_INT 6
35030: PPUSH
35031: LD_VAR 0 1
35035: PPUSH
35036: CALL_OW 321
35040: PUSH
35041: LD_INT 2
35043: EQUAL
35044: ST_TO_ADDR
35045: GO 35330
35047: LD_INT 22
35049: DOUBLE
35050: EQUAL
35051: IFTRUE 35061
35053: LD_INT 36
35055: DOUBLE
35056: EQUAL
35057: IFTRUE 35061
35059: GO 35086
35061: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35062: LD_ADDR_VAR 0 3
35066: PUSH
35067: LD_INT 15
35069: PPUSH
35070: LD_VAR 0 1
35074: PPUSH
35075: CALL_OW 321
35079: PUSH
35080: LD_INT 2
35082: EQUAL
35083: ST_TO_ADDR
35084: GO 35330
35086: LD_INT 30
35088: DOUBLE
35089: EQUAL
35090: IFTRUE 35094
35092: GO 35119
35094: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
35095: LD_ADDR_VAR 0 3
35099: PUSH
35100: LD_INT 20
35102: PPUSH
35103: LD_VAR 0 1
35107: PPUSH
35108: CALL_OW 321
35112: PUSH
35113: LD_INT 2
35115: EQUAL
35116: ST_TO_ADDR
35117: GO 35330
35119: LD_INT 28
35121: DOUBLE
35122: EQUAL
35123: IFTRUE 35133
35125: LD_INT 21
35127: DOUBLE
35128: EQUAL
35129: IFTRUE 35133
35131: GO 35158
35133: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
35134: LD_ADDR_VAR 0 3
35138: PUSH
35139: LD_INT 21
35141: PPUSH
35142: LD_VAR 0 1
35146: PPUSH
35147: CALL_OW 321
35151: PUSH
35152: LD_INT 2
35154: EQUAL
35155: ST_TO_ADDR
35156: GO 35330
35158: LD_INT 16
35160: DOUBLE
35161: EQUAL
35162: IFTRUE 35166
35164: GO 35191
35166: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
35167: LD_ADDR_VAR 0 3
35171: PUSH
35172: LD_INT 84
35174: PPUSH
35175: LD_VAR 0 1
35179: PPUSH
35180: CALL_OW 321
35184: PUSH
35185: LD_INT 2
35187: EQUAL
35188: ST_TO_ADDR
35189: GO 35330
35191: LD_INT 19
35193: DOUBLE
35194: EQUAL
35195: IFTRUE 35205
35197: LD_INT 23
35199: DOUBLE
35200: EQUAL
35201: IFTRUE 35205
35203: GO 35230
35205: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35206: LD_ADDR_VAR 0 3
35210: PUSH
35211: LD_INT 83
35213: PPUSH
35214: LD_VAR 0 1
35218: PPUSH
35219: CALL_OW 321
35223: PUSH
35224: LD_INT 2
35226: EQUAL
35227: ST_TO_ADDR
35228: GO 35330
35230: LD_INT 17
35232: DOUBLE
35233: EQUAL
35234: IFTRUE 35238
35236: GO 35263
35238: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35239: LD_ADDR_VAR 0 3
35243: PUSH
35244: LD_INT 39
35246: PPUSH
35247: LD_VAR 0 1
35251: PPUSH
35252: CALL_OW 321
35256: PUSH
35257: LD_INT 2
35259: EQUAL
35260: ST_TO_ADDR
35261: GO 35330
35263: LD_INT 18
35265: DOUBLE
35266: EQUAL
35267: IFTRUE 35271
35269: GO 35296
35271: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
35272: LD_ADDR_VAR 0 3
35276: PUSH
35277: LD_INT 40
35279: PPUSH
35280: LD_VAR 0 1
35284: PPUSH
35285: CALL_OW 321
35289: PUSH
35290: LD_INT 2
35292: EQUAL
35293: ST_TO_ADDR
35294: GO 35330
35296: LD_INT 27
35298: DOUBLE
35299: EQUAL
35300: IFTRUE 35304
35302: GO 35329
35304: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
35305: LD_ADDR_VAR 0 3
35309: PUSH
35310: LD_INT 35
35312: PPUSH
35313: LD_VAR 0 1
35317: PPUSH
35318: CALL_OW 321
35322: PUSH
35323: LD_INT 2
35325: EQUAL
35326: ST_TO_ADDR
35327: GO 35330
35329: POP
// end ;
35330: LD_VAR 0 3
35334: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
35335: LD_INT 0
35337: PPUSH
35338: PPUSH
35339: PPUSH
35340: PPUSH
35341: PPUSH
35342: PPUSH
35343: PPUSH
35344: PPUSH
35345: PPUSH
35346: PPUSH
35347: PPUSH
// result := false ;
35348: LD_ADDR_VAR 0 6
35352: PUSH
35353: LD_INT 0
35355: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35356: LD_VAR 0 1
35360: NOT
35361: PUSH
35362: LD_VAR 0 1
35366: PPUSH
35367: CALL_OW 266
35371: PUSH
35372: LD_INT 0
35374: PUSH
35375: LD_INT 1
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: IN
35382: NOT
35383: OR
35384: PUSH
35385: LD_VAR 0 2
35389: NOT
35390: OR
35391: PUSH
35392: LD_VAR 0 5
35396: PUSH
35397: LD_INT 0
35399: PUSH
35400: LD_INT 1
35402: PUSH
35403: LD_INT 2
35405: PUSH
35406: LD_INT 3
35408: PUSH
35409: LD_INT 4
35411: PUSH
35412: LD_INT 5
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: IN
35423: NOT
35424: OR
35425: PUSH
35426: LD_VAR 0 3
35430: PPUSH
35431: LD_VAR 0 4
35435: PPUSH
35436: CALL_OW 488
35440: NOT
35441: OR
35442: IFFALSE 35446
// exit ;
35444: GO 36182
// side := GetSide ( depot ) ;
35446: LD_ADDR_VAR 0 9
35450: PUSH
35451: LD_VAR 0 1
35455: PPUSH
35456: CALL_OW 255
35460: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35461: LD_VAR 0 9
35465: PPUSH
35466: LD_VAR 0 2
35470: PPUSH
35471: CALL 34959 0 2
35475: NOT
35476: IFFALSE 35480
// exit ;
35478: GO 36182
// pom := GetBase ( depot ) ;
35480: LD_ADDR_VAR 0 10
35484: PUSH
35485: LD_VAR 0 1
35489: PPUSH
35490: CALL_OW 274
35494: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35495: LD_ADDR_VAR 0 11
35499: PUSH
35500: LD_VAR 0 2
35504: PPUSH
35505: LD_VAR 0 1
35509: PPUSH
35510: CALL_OW 248
35514: PPUSH
35515: CALL_OW 450
35519: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35520: LD_VAR 0 10
35524: PPUSH
35525: LD_INT 1
35527: PPUSH
35528: CALL_OW 275
35532: PUSH
35533: LD_VAR 0 11
35537: PUSH
35538: LD_INT 1
35540: ARRAY
35541: GREATEREQUAL
35542: PUSH
35543: LD_VAR 0 10
35547: PPUSH
35548: LD_INT 2
35550: PPUSH
35551: CALL_OW 275
35555: PUSH
35556: LD_VAR 0 11
35560: PUSH
35561: LD_INT 2
35563: ARRAY
35564: GREATEREQUAL
35565: AND
35566: PUSH
35567: LD_VAR 0 10
35571: PPUSH
35572: LD_INT 3
35574: PPUSH
35575: CALL_OW 275
35579: PUSH
35580: LD_VAR 0 11
35584: PUSH
35585: LD_INT 3
35587: ARRAY
35588: GREATEREQUAL
35589: AND
35590: NOT
35591: IFFALSE 35595
// exit ;
35593: GO 36182
// if GetBType ( depot ) = b_depot then
35595: LD_VAR 0 1
35599: PPUSH
35600: CALL_OW 266
35604: PUSH
35605: LD_INT 0
35607: EQUAL
35608: IFFALSE 35620
// dist := 28 else
35610: LD_ADDR_VAR 0 14
35614: PUSH
35615: LD_INT 28
35617: ST_TO_ADDR
35618: GO 35628
// dist := 36 ;
35620: LD_ADDR_VAR 0 14
35624: PUSH
35625: LD_INT 36
35627: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35628: LD_VAR 0 1
35632: PPUSH
35633: LD_VAR 0 3
35637: PPUSH
35638: LD_VAR 0 4
35642: PPUSH
35643: CALL_OW 297
35647: PUSH
35648: LD_VAR 0 14
35652: GREATER
35653: IFFALSE 35657
// exit ;
35655: GO 36182
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35657: LD_ADDR_VAR 0 12
35661: PUSH
35662: LD_VAR 0 2
35666: PPUSH
35667: LD_VAR 0 3
35671: PPUSH
35672: LD_VAR 0 4
35676: PPUSH
35677: LD_VAR 0 5
35681: PPUSH
35682: LD_VAR 0 1
35686: PPUSH
35687: CALL_OW 248
35691: PPUSH
35692: LD_INT 0
35694: PPUSH
35695: CALL 36187 0 6
35699: ST_TO_ADDR
// if not hexes then
35700: LD_VAR 0 12
35704: NOT
35705: IFFALSE 35709
// exit ;
35707: GO 36182
// hex := GetHexInfo ( x , y ) ;
35709: LD_ADDR_VAR 0 15
35713: PUSH
35714: LD_VAR 0 3
35718: PPUSH
35719: LD_VAR 0 4
35723: PPUSH
35724: CALL_OW 546
35728: ST_TO_ADDR
// if hex [ 1 ] then
35729: LD_VAR 0 15
35733: PUSH
35734: LD_INT 1
35736: ARRAY
35737: IFFALSE 35741
// exit ;
35739: GO 36182
// height := hex [ 2 ] ;
35741: LD_ADDR_VAR 0 13
35745: PUSH
35746: LD_VAR 0 15
35750: PUSH
35751: LD_INT 2
35753: ARRAY
35754: ST_TO_ADDR
// for i = 1 to hexes do
35755: LD_ADDR_VAR 0 7
35759: PUSH
35760: DOUBLE
35761: LD_INT 1
35763: DEC
35764: ST_TO_ADDR
35765: LD_VAR 0 12
35769: PUSH
35770: FOR_TO
35771: IFFALSE 36101
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35773: LD_VAR 0 12
35777: PUSH
35778: LD_VAR 0 7
35782: ARRAY
35783: PUSH
35784: LD_INT 1
35786: ARRAY
35787: PPUSH
35788: LD_VAR 0 12
35792: PUSH
35793: LD_VAR 0 7
35797: ARRAY
35798: PUSH
35799: LD_INT 2
35801: ARRAY
35802: PPUSH
35803: CALL_OW 488
35807: NOT
35808: PUSH
35809: LD_VAR 0 12
35813: PUSH
35814: LD_VAR 0 7
35818: ARRAY
35819: PUSH
35820: LD_INT 1
35822: ARRAY
35823: PPUSH
35824: LD_VAR 0 12
35828: PUSH
35829: LD_VAR 0 7
35833: ARRAY
35834: PUSH
35835: LD_INT 2
35837: ARRAY
35838: PPUSH
35839: CALL_OW 428
35843: PUSH
35844: LD_INT 0
35846: GREATER
35847: OR
35848: PUSH
35849: LD_VAR 0 12
35853: PUSH
35854: LD_VAR 0 7
35858: ARRAY
35859: PUSH
35860: LD_INT 1
35862: ARRAY
35863: PPUSH
35864: LD_VAR 0 12
35868: PUSH
35869: LD_VAR 0 7
35873: ARRAY
35874: PUSH
35875: LD_INT 2
35877: ARRAY
35878: PPUSH
35879: CALL_OW 351
35883: OR
35884: IFFALSE 35890
// exit ;
35886: POP
35887: POP
35888: GO 36182
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35890: LD_ADDR_VAR 0 8
35894: PUSH
35895: LD_VAR 0 12
35899: PUSH
35900: LD_VAR 0 7
35904: ARRAY
35905: PUSH
35906: LD_INT 1
35908: ARRAY
35909: PPUSH
35910: LD_VAR 0 12
35914: PUSH
35915: LD_VAR 0 7
35919: ARRAY
35920: PUSH
35921: LD_INT 2
35923: ARRAY
35924: PPUSH
35925: CALL_OW 546
35929: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35930: LD_VAR 0 8
35934: PUSH
35935: LD_INT 1
35937: ARRAY
35938: PUSH
35939: LD_VAR 0 8
35943: PUSH
35944: LD_INT 2
35946: ARRAY
35947: PUSH
35948: LD_VAR 0 13
35952: PUSH
35953: LD_INT 2
35955: PLUS
35956: GREATER
35957: OR
35958: PUSH
35959: LD_VAR 0 8
35963: PUSH
35964: LD_INT 2
35966: ARRAY
35967: PUSH
35968: LD_VAR 0 13
35972: PUSH
35973: LD_INT 2
35975: MINUS
35976: LESS
35977: OR
35978: PUSH
35979: LD_VAR 0 8
35983: PUSH
35984: LD_INT 3
35986: ARRAY
35987: PUSH
35988: LD_INT 0
35990: PUSH
35991: LD_INT 8
35993: PUSH
35994: LD_INT 9
35996: PUSH
35997: LD_INT 10
35999: PUSH
36000: LD_INT 11
36002: PUSH
36003: LD_INT 12
36005: PUSH
36006: LD_INT 13
36008: PUSH
36009: LD_INT 16
36011: PUSH
36012: LD_INT 17
36014: PUSH
36015: LD_INT 18
36017: PUSH
36018: LD_INT 19
36020: PUSH
36021: LD_INT 20
36023: PUSH
36024: LD_INT 21
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: IN
36042: NOT
36043: OR
36044: PUSH
36045: LD_VAR 0 8
36049: PUSH
36050: LD_INT 5
36052: ARRAY
36053: NOT
36054: OR
36055: PUSH
36056: LD_VAR 0 8
36060: PUSH
36061: LD_INT 6
36063: ARRAY
36064: PUSH
36065: LD_INT 1
36067: PUSH
36068: LD_INT 2
36070: PUSH
36071: LD_INT 7
36073: PUSH
36074: LD_INT 9
36076: PUSH
36077: LD_INT 10
36079: PUSH
36080: LD_INT 11
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: IN
36091: NOT
36092: OR
36093: IFFALSE 36099
// exit ;
36095: POP
36096: POP
36097: GO 36182
// end ;
36099: GO 35770
36101: POP
36102: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36103: LD_VAR 0 9
36107: PPUSH
36108: LD_VAR 0 3
36112: PPUSH
36113: LD_VAR 0 4
36117: PPUSH
36118: LD_INT 20
36120: PPUSH
36121: CALL 28134 0 4
36125: PUSH
36126: LD_INT 4
36128: ARRAY
36129: IFFALSE 36133
// exit ;
36131: GO 36182
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36133: LD_VAR 0 2
36137: PUSH
36138: LD_INT 29
36140: PUSH
36141: LD_INT 30
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: IN
36148: PUSH
36149: LD_VAR 0 3
36153: PPUSH
36154: LD_VAR 0 4
36158: PPUSH
36159: LD_VAR 0 9
36163: PPUSH
36164: CALL_OW 440
36168: NOT
36169: AND
36170: IFFALSE 36174
// exit ;
36172: GO 36182
// result := true ;
36174: LD_ADDR_VAR 0 6
36178: PUSH
36179: LD_INT 1
36181: ST_TO_ADDR
// end ;
36182: LD_VAR 0 6
36186: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36187: LD_INT 0
36189: PPUSH
36190: PPUSH
36191: PPUSH
36192: PPUSH
36193: PPUSH
36194: PPUSH
36195: PPUSH
36196: PPUSH
36197: PPUSH
36198: PPUSH
36199: PPUSH
36200: PPUSH
36201: PPUSH
36202: PPUSH
36203: PPUSH
36204: PPUSH
36205: PPUSH
36206: PPUSH
36207: PPUSH
36208: PPUSH
36209: PPUSH
36210: PPUSH
36211: PPUSH
36212: PPUSH
36213: PPUSH
36214: PPUSH
36215: PPUSH
36216: PPUSH
36217: PPUSH
36218: PPUSH
36219: PPUSH
36220: PPUSH
36221: PPUSH
36222: PPUSH
36223: PPUSH
36224: PPUSH
36225: PPUSH
36226: PPUSH
36227: PPUSH
36228: PPUSH
36229: PPUSH
36230: PPUSH
36231: PPUSH
36232: PPUSH
36233: PPUSH
36234: PPUSH
36235: PPUSH
36236: PPUSH
36237: PPUSH
36238: PPUSH
36239: PPUSH
36240: PPUSH
36241: PPUSH
36242: PPUSH
36243: PPUSH
36244: PPUSH
36245: PPUSH
36246: PPUSH
// result = [ ] ;
36247: LD_ADDR_VAR 0 7
36251: PUSH
36252: EMPTY
36253: ST_TO_ADDR
// temp_list = [ ] ;
36254: LD_ADDR_VAR 0 9
36258: PUSH
36259: EMPTY
36260: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36261: LD_VAR 0 4
36265: PUSH
36266: LD_INT 0
36268: PUSH
36269: LD_INT 1
36271: PUSH
36272: LD_INT 2
36274: PUSH
36275: LD_INT 3
36277: PUSH
36278: LD_INT 4
36280: PUSH
36281: LD_INT 5
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: IN
36292: NOT
36293: PUSH
36294: LD_VAR 0 1
36298: PUSH
36299: LD_INT 0
36301: PUSH
36302: LD_INT 1
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: IN
36309: PUSH
36310: LD_VAR 0 5
36314: PUSH
36315: LD_INT 1
36317: PUSH
36318: LD_INT 2
36320: PUSH
36321: LD_INT 3
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: LIST
36328: IN
36329: NOT
36330: AND
36331: OR
36332: IFFALSE 36336
// exit ;
36334: GO 54727
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36336: LD_VAR 0 1
36340: PUSH
36341: LD_INT 6
36343: PUSH
36344: LD_INT 7
36346: PUSH
36347: LD_INT 8
36349: PUSH
36350: LD_INT 13
36352: PUSH
36353: LD_INT 12
36355: PUSH
36356: LD_INT 15
36358: PUSH
36359: LD_INT 11
36361: PUSH
36362: LD_INT 14
36364: PUSH
36365: LD_INT 10
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: IN
36379: IFFALSE 36389
// btype = b_lab ;
36381: LD_ADDR_VAR 0 1
36385: PUSH
36386: LD_INT 6
36388: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36389: LD_VAR 0 6
36393: PUSH
36394: LD_INT 0
36396: PUSH
36397: LD_INT 1
36399: PUSH
36400: LD_INT 2
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: LIST
36407: IN
36408: NOT
36409: PUSH
36410: LD_VAR 0 1
36414: PUSH
36415: LD_INT 0
36417: PUSH
36418: LD_INT 1
36420: PUSH
36421: LD_INT 2
36423: PUSH
36424: LD_INT 3
36426: PUSH
36427: LD_INT 6
36429: PUSH
36430: LD_INT 36
36432: PUSH
36433: LD_INT 4
36435: PUSH
36436: LD_INT 5
36438: PUSH
36439: LD_INT 31
36441: PUSH
36442: LD_INT 32
36444: PUSH
36445: LD_INT 33
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: IN
36461: NOT
36462: PUSH
36463: LD_VAR 0 6
36467: PUSH
36468: LD_INT 1
36470: EQUAL
36471: AND
36472: OR
36473: PUSH
36474: LD_VAR 0 1
36478: PUSH
36479: LD_INT 2
36481: PUSH
36482: LD_INT 3
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: IN
36489: NOT
36490: PUSH
36491: LD_VAR 0 6
36495: PUSH
36496: LD_INT 2
36498: EQUAL
36499: AND
36500: OR
36501: IFFALSE 36511
// mode = 0 ;
36503: LD_ADDR_VAR 0 6
36507: PUSH
36508: LD_INT 0
36510: ST_TO_ADDR
// case mode of 0 :
36511: LD_VAR 0 6
36515: PUSH
36516: LD_INT 0
36518: DOUBLE
36519: EQUAL
36520: IFTRUE 36524
36522: GO 47977
36524: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36525: LD_ADDR_VAR 0 11
36529: PUSH
36530: LD_INT 0
36532: PUSH
36533: LD_INT 0
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 0
36542: PUSH
36543: LD_INT 1
36545: NEG
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 1
36553: PUSH
36554: LD_INT 0
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 1
36563: PUSH
36564: LD_INT 1
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 0
36573: PUSH
36574: LD_INT 1
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 1
36583: NEG
36584: PUSH
36585: LD_INT 0
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 1
36594: NEG
36595: PUSH
36596: LD_INT 1
36598: NEG
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 1
36606: NEG
36607: PUSH
36608: LD_INT 2
36610: NEG
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 0
36618: PUSH
36619: LD_INT 2
36621: NEG
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 1
36629: PUSH
36630: LD_INT 1
36632: NEG
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 1
36640: PUSH
36641: LD_INT 2
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 0
36650: PUSH
36651: LD_INT 2
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 1
36660: NEG
36661: PUSH
36662: LD_INT 1
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 1
36671: PUSH
36672: LD_INT 3
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 0
36681: PUSH
36682: LD_INT 3
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 1
36691: NEG
36692: PUSH
36693: LD_INT 2
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36718: LD_ADDR_VAR 0 12
36722: PUSH
36723: LD_INT 0
36725: PUSH
36726: LD_INT 0
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 0
36735: PUSH
36736: LD_INT 1
36738: NEG
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_INT 1
36746: PUSH
36747: LD_INT 0
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 1
36756: PUSH
36757: LD_INT 1
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PUSH
36764: LD_INT 0
36766: PUSH
36767: LD_INT 1
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 1
36776: NEG
36777: PUSH
36778: LD_INT 0
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 1
36787: NEG
36788: PUSH
36789: LD_INT 1
36791: NEG
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 1
36799: PUSH
36800: LD_INT 1
36802: NEG
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 2
36810: PUSH
36811: LD_INT 0
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 2
36820: PUSH
36821: LD_INT 1
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 1
36830: NEG
36831: PUSH
36832: LD_INT 1
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 2
36841: NEG
36842: PUSH
36843: LD_INT 0
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 2
36852: NEG
36853: PUSH
36854: LD_INT 1
36856: NEG
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 2
36864: NEG
36865: PUSH
36866: LD_INT 1
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 3
36875: NEG
36876: PUSH
36877: LD_INT 0
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 3
36886: NEG
36887: PUSH
36888: LD_INT 1
36890: NEG
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36914: LD_ADDR_VAR 0 13
36918: PUSH
36919: LD_INT 0
36921: PUSH
36922: LD_INT 0
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 0
36931: PUSH
36932: LD_INT 1
36934: NEG
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 1
36942: PUSH
36943: LD_INT 0
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 1
36952: PUSH
36953: LD_INT 1
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 0
36962: PUSH
36963: LD_INT 1
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 1
36972: NEG
36973: PUSH
36974: LD_INT 0
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 1
36983: NEG
36984: PUSH
36985: LD_INT 1
36987: NEG
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 1
36995: NEG
36996: PUSH
36997: LD_INT 2
36999: NEG
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 2
37007: PUSH
37008: LD_INT 1
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 2
37017: PUSH
37018: LD_INT 2
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 1
37027: PUSH
37028: LD_INT 2
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 2
37037: NEG
37038: PUSH
37039: LD_INT 1
37041: NEG
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 2
37049: NEG
37050: PUSH
37051: LD_INT 2
37053: NEG
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 2
37061: NEG
37062: PUSH
37063: LD_INT 3
37065: NEG
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 3
37073: NEG
37074: PUSH
37075: LD_INT 2
37077: NEG
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 3
37085: NEG
37086: PUSH
37087: LD_INT 3
37089: NEG
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37113: LD_ADDR_VAR 0 14
37117: PUSH
37118: LD_INT 0
37120: PUSH
37121: LD_INT 0
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 0
37130: PUSH
37131: LD_INT 1
37133: NEG
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 1
37141: PUSH
37142: LD_INT 0
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 1
37151: PUSH
37152: LD_INT 1
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: LD_INT 1
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 1
37171: NEG
37172: PUSH
37173: LD_INT 0
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 1
37182: NEG
37183: PUSH
37184: LD_INT 1
37186: NEG
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 1
37194: NEG
37195: PUSH
37196: LD_INT 2
37198: NEG
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 0
37206: PUSH
37207: LD_INT 2
37209: NEG
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 1
37217: PUSH
37218: LD_INT 1
37220: NEG
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 1
37228: PUSH
37229: LD_INT 2
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 0
37238: PUSH
37239: LD_INT 2
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 1
37248: NEG
37249: PUSH
37250: LD_INT 1
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 1
37259: NEG
37260: PUSH
37261: LD_INT 3
37263: NEG
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 0
37271: PUSH
37272: LD_INT 3
37274: NEG
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 1
37282: PUSH
37283: LD_INT 2
37285: NEG
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37309: LD_ADDR_VAR 0 15
37313: PUSH
37314: LD_INT 0
37316: PUSH
37317: LD_INT 0
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 0
37326: PUSH
37327: LD_INT 1
37329: NEG
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 1
37337: PUSH
37338: LD_INT 0
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 1
37347: PUSH
37348: LD_INT 1
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 0
37357: PUSH
37358: LD_INT 1
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 1
37367: NEG
37368: PUSH
37369: LD_INT 0
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 1
37378: NEG
37379: PUSH
37380: LD_INT 1
37382: NEG
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 1
37390: PUSH
37391: LD_INT 1
37393: NEG
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 2
37401: PUSH
37402: LD_INT 0
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 2
37411: PUSH
37412: LD_INT 1
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 1
37421: NEG
37422: PUSH
37423: LD_INT 1
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 2
37432: NEG
37433: PUSH
37434: LD_INT 0
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 2
37443: NEG
37444: PUSH
37445: LD_INT 1
37447: NEG
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 2
37455: PUSH
37456: LD_INT 1
37458: NEG
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 3
37466: PUSH
37467: LD_INT 0
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 3
37476: PUSH
37477: LD_INT 1
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37502: LD_ADDR_VAR 0 16
37506: PUSH
37507: LD_INT 0
37509: PUSH
37510: LD_INT 0
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 0
37519: PUSH
37520: LD_INT 1
37522: NEG
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 1
37530: PUSH
37531: LD_INT 0
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 1
37540: PUSH
37541: LD_INT 1
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 0
37550: PUSH
37551: LD_INT 1
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 1
37560: NEG
37561: PUSH
37562: LD_INT 0
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 1
37571: NEG
37572: PUSH
37573: LD_INT 1
37575: NEG
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 1
37583: NEG
37584: PUSH
37585: LD_INT 2
37587: NEG
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 2
37595: PUSH
37596: LD_INT 1
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 2
37605: PUSH
37606: LD_INT 2
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 1
37615: PUSH
37616: LD_INT 2
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 2
37625: NEG
37626: PUSH
37627: LD_INT 1
37629: NEG
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 2
37637: NEG
37638: PUSH
37639: LD_INT 2
37641: NEG
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 3
37649: PUSH
37650: LD_INT 2
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 3
37659: PUSH
37660: LD_INT 3
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 2
37669: PUSH
37670: LD_INT 3
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37695: LD_ADDR_VAR 0 17
37699: PUSH
37700: LD_INT 0
37702: PUSH
37703: LD_INT 0
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 0
37712: PUSH
37713: LD_INT 1
37715: NEG
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 1
37723: PUSH
37724: LD_INT 0
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 1
37733: PUSH
37734: LD_INT 1
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 0
37743: PUSH
37744: LD_INT 1
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 1
37753: NEG
37754: PUSH
37755: LD_INT 0
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 1
37764: NEG
37765: PUSH
37766: LD_INT 1
37768: NEG
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 1
37776: NEG
37777: PUSH
37778: LD_INT 2
37780: NEG
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 0
37788: PUSH
37789: LD_INT 2
37791: NEG
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 1
37799: PUSH
37800: LD_INT 1
37802: NEG
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 2
37810: PUSH
37811: LD_INT 0
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 2
37820: PUSH
37821: LD_INT 1
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 2
37830: PUSH
37831: LD_INT 2
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 1
37840: PUSH
37841: LD_INT 2
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 0
37850: PUSH
37851: LD_INT 2
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: LD_INT 1
37860: NEG
37861: PUSH
37862: LD_INT 1
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 2
37871: NEG
37872: PUSH
37873: LD_INT 0
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 2
37882: NEG
37883: PUSH
37884: LD_INT 1
37886: NEG
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 2
37894: NEG
37895: PUSH
37896: LD_INT 2
37898: NEG
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37925: LD_ADDR_VAR 0 18
37929: PUSH
37930: LD_INT 0
37932: PUSH
37933: LD_INT 0
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 0
37942: PUSH
37943: LD_INT 1
37945: NEG
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 1
37953: PUSH
37954: LD_INT 0
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 1
37963: PUSH
37964: LD_INT 1
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 0
37973: PUSH
37974: LD_INT 1
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 1
37983: NEG
37984: PUSH
37985: LD_INT 0
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 1
37994: NEG
37995: PUSH
37996: LD_INT 1
37998: NEG
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 1
38006: NEG
38007: PUSH
38008: LD_INT 2
38010: NEG
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 0
38018: PUSH
38019: LD_INT 2
38021: NEG
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 1
38029: PUSH
38030: LD_INT 1
38032: NEG
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: PUSH
38038: LD_INT 2
38040: PUSH
38041: LD_INT 0
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 2
38050: PUSH
38051: LD_INT 1
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 2
38060: PUSH
38061: LD_INT 2
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: PUSH
38068: LD_INT 1
38070: PUSH
38071: LD_INT 2
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: LD_INT 0
38080: PUSH
38081: LD_INT 2
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 1
38090: NEG
38091: PUSH
38092: LD_INT 1
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 2
38101: NEG
38102: PUSH
38103: LD_INT 0
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 2
38112: NEG
38113: PUSH
38114: LD_INT 1
38116: NEG
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 2
38124: NEG
38125: PUSH
38126: LD_INT 2
38128: NEG
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38155: LD_ADDR_VAR 0 19
38159: PUSH
38160: LD_INT 0
38162: PUSH
38163: LD_INT 0
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 0
38172: PUSH
38173: LD_INT 1
38175: NEG
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 1
38183: PUSH
38184: LD_INT 0
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 1
38193: PUSH
38194: LD_INT 1
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 0
38203: PUSH
38204: LD_INT 1
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 1
38213: NEG
38214: PUSH
38215: LD_INT 0
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 1
38224: NEG
38225: PUSH
38226: LD_INT 1
38228: NEG
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 1
38236: NEG
38237: PUSH
38238: LD_INT 2
38240: NEG
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 0
38248: PUSH
38249: LD_INT 2
38251: NEG
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 1
38259: PUSH
38260: LD_INT 1
38262: NEG
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 2
38270: PUSH
38271: LD_INT 0
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 2
38280: PUSH
38281: LD_INT 1
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 2
38290: PUSH
38291: LD_INT 2
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 1
38300: PUSH
38301: LD_INT 2
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 0
38310: PUSH
38311: LD_INT 2
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 1
38320: NEG
38321: PUSH
38322: LD_INT 1
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 2
38331: NEG
38332: PUSH
38333: LD_INT 0
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 2
38342: NEG
38343: PUSH
38344: LD_INT 1
38346: NEG
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 2
38354: NEG
38355: PUSH
38356: LD_INT 2
38358: NEG
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38385: LD_ADDR_VAR 0 20
38389: PUSH
38390: LD_INT 0
38392: PUSH
38393: LD_INT 0
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 0
38402: PUSH
38403: LD_INT 1
38405: NEG
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 1
38413: PUSH
38414: LD_INT 0
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 1
38423: PUSH
38424: LD_INT 1
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 0
38433: PUSH
38434: LD_INT 1
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 1
38443: NEG
38444: PUSH
38445: LD_INT 0
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 1
38454: NEG
38455: PUSH
38456: LD_INT 1
38458: NEG
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 1
38466: NEG
38467: PUSH
38468: LD_INT 2
38470: NEG
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: LD_INT 0
38478: PUSH
38479: LD_INT 2
38481: NEG
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 1
38489: PUSH
38490: LD_INT 1
38492: NEG
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 2
38500: PUSH
38501: LD_INT 0
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 2
38510: PUSH
38511: LD_INT 1
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 2
38520: PUSH
38521: LD_INT 2
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 1
38530: PUSH
38531: LD_INT 2
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: LD_INT 0
38540: PUSH
38541: LD_INT 2
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 1
38550: NEG
38551: PUSH
38552: LD_INT 1
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 2
38561: NEG
38562: PUSH
38563: LD_INT 0
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 2
38572: NEG
38573: PUSH
38574: LD_INT 1
38576: NEG
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 2
38584: NEG
38585: PUSH
38586: LD_INT 2
38588: NEG
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38615: LD_ADDR_VAR 0 21
38619: PUSH
38620: LD_INT 0
38622: PUSH
38623: LD_INT 0
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 0
38632: PUSH
38633: LD_INT 1
38635: NEG
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 1
38643: PUSH
38644: LD_INT 0
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: LD_INT 1
38653: PUSH
38654: LD_INT 1
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 0
38663: PUSH
38664: LD_INT 1
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 1
38673: NEG
38674: PUSH
38675: LD_INT 0
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 1
38684: NEG
38685: PUSH
38686: LD_INT 1
38688: NEG
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 1
38696: NEG
38697: PUSH
38698: LD_INT 2
38700: NEG
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 0
38708: PUSH
38709: LD_INT 2
38711: NEG
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 1
38719: PUSH
38720: LD_INT 1
38722: NEG
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 2
38730: PUSH
38731: LD_INT 0
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 2
38740: PUSH
38741: LD_INT 1
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 2
38750: PUSH
38751: LD_INT 2
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 1
38760: PUSH
38761: LD_INT 2
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 0
38770: PUSH
38771: LD_INT 2
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 1
38780: NEG
38781: PUSH
38782: LD_INT 1
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 2
38791: NEG
38792: PUSH
38793: LD_INT 0
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 2
38802: NEG
38803: PUSH
38804: LD_INT 1
38806: NEG
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 2
38814: NEG
38815: PUSH
38816: LD_INT 2
38818: NEG
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38845: LD_ADDR_VAR 0 22
38849: PUSH
38850: LD_INT 0
38852: PUSH
38853: LD_INT 0
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 0
38862: PUSH
38863: LD_INT 1
38865: NEG
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 1
38873: PUSH
38874: LD_INT 0
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 1
38883: PUSH
38884: LD_INT 1
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 0
38893: PUSH
38894: LD_INT 1
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 1
38903: NEG
38904: PUSH
38905: LD_INT 0
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 1
38914: NEG
38915: PUSH
38916: LD_INT 1
38918: NEG
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 1
38926: NEG
38927: PUSH
38928: LD_INT 2
38930: NEG
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 0
38938: PUSH
38939: LD_INT 2
38941: NEG
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 1
38949: PUSH
38950: LD_INT 1
38952: NEG
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 2
38960: PUSH
38961: LD_INT 0
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 2
38970: PUSH
38971: LD_INT 1
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 2
38980: PUSH
38981: LD_INT 2
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 1
38990: PUSH
38991: LD_INT 2
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: LD_INT 2
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 1
39010: NEG
39011: PUSH
39012: LD_INT 1
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 2
39021: NEG
39022: PUSH
39023: LD_INT 0
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 2
39032: NEG
39033: PUSH
39034: LD_INT 1
39036: NEG
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 2
39044: NEG
39045: PUSH
39046: LD_INT 2
39048: NEG
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39075: LD_ADDR_VAR 0 23
39079: PUSH
39080: LD_INT 0
39082: PUSH
39083: LD_INT 0
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: LD_INT 1
39095: NEG
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 1
39103: PUSH
39104: LD_INT 0
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 1
39113: PUSH
39114: LD_INT 1
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: LD_INT 1
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 1
39133: NEG
39134: PUSH
39135: LD_INT 0
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 1
39144: NEG
39145: PUSH
39146: LD_INT 1
39148: NEG
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 1
39156: NEG
39157: PUSH
39158: LD_INT 2
39160: NEG
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 0
39168: PUSH
39169: LD_INT 2
39171: NEG
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 1
39179: PUSH
39180: LD_INT 1
39182: NEG
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 2
39190: PUSH
39191: LD_INT 0
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 2
39200: PUSH
39201: LD_INT 1
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 2
39210: PUSH
39211: LD_INT 2
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 1
39220: PUSH
39221: LD_INT 2
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 0
39230: PUSH
39231: LD_INT 2
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 1
39240: NEG
39241: PUSH
39242: LD_INT 1
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 2
39251: NEG
39252: PUSH
39253: LD_INT 0
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 2
39262: NEG
39263: PUSH
39264: LD_INT 1
39266: NEG
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 2
39274: NEG
39275: PUSH
39276: LD_INT 2
39278: NEG
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 2
39286: NEG
39287: PUSH
39288: LD_INT 3
39290: NEG
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 1
39298: NEG
39299: PUSH
39300: LD_INT 3
39302: NEG
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 1
39310: PUSH
39311: LD_INT 2
39313: NEG
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 2
39321: PUSH
39322: LD_INT 1
39324: NEG
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39355: LD_ADDR_VAR 0 24
39359: PUSH
39360: LD_INT 0
39362: PUSH
39363: LD_INT 0
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 0
39372: PUSH
39373: LD_INT 1
39375: NEG
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 1
39383: PUSH
39384: LD_INT 0
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 1
39393: PUSH
39394: LD_INT 1
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 0
39403: PUSH
39404: LD_INT 1
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 1
39413: NEG
39414: PUSH
39415: LD_INT 0
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 1
39424: NEG
39425: PUSH
39426: LD_INT 1
39428: NEG
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 1
39436: NEG
39437: PUSH
39438: LD_INT 2
39440: NEG
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: LD_INT 2
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 1
39459: PUSH
39460: LD_INT 1
39462: NEG
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 2
39470: PUSH
39471: LD_INT 0
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 2
39480: PUSH
39481: LD_INT 1
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 2
39490: PUSH
39491: LD_INT 2
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 1
39500: PUSH
39501: LD_INT 2
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 0
39510: PUSH
39511: LD_INT 2
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 1
39520: NEG
39521: PUSH
39522: LD_INT 1
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 2
39531: NEG
39532: PUSH
39533: LD_INT 0
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 2
39542: NEG
39543: PUSH
39544: LD_INT 1
39546: NEG
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 2
39554: NEG
39555: PUSH
39556: LD_INT 2
39558: NEG
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 1
39566: PUSH
39567: LD_INT 2
39569: NEG
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 2
39577: PUSH
39578: LD_INT 1
39580: NEG
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 3
39588: PUSH
39589: LD_INT 1
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 3
39598: PUSH
39599: LD_INT 2
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39631: LD_ADDR_VAR 0 25
39635: PUSH
39636: LD_INT 0
39638: PUSH
39639: LD_INT 0
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 0
39648: PUSH
39649: LD_INT 1
39651: NEG
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 1
39659: PUSH
39660: LD_INT 0
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 1
39669: PUSH
39670: LD_INT 1
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 0
39679: PUSH
39680: LD_INT 1
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 1
39689: NEG
39690: PUSH
39691: LD_INT 0
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 1
39700: NEG
39701: PUSH
39702: LD_INT 1
39704: NEG
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 1
39712: NEG
39713: PUSH
39714: LD_INT 2
39716: NEG
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 0
39724: PUSH
39725: LD_INT 2
39727: NEG
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 1
39735: PUSH
39736: LD_INT 1
39738: NEG
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 2
39746: PUSH
39747: LD_INT 0
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 2
39756: PUSH
39757: LD_INT 1
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 2
39766: PUSH
39767: LD_INT 2
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 1
39776: PUSH
39777: LD_INT 2
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 0
39786: PUSH
39787: LD_INT 2
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 1
39796: NEG
39797: PUSH
39798: LD_INT 1
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 2
39807: NEG
39808: PUSH
39809: LD_INT 0
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 2
39818: NEG
39819: PUSH
39820: LD_INT 1
39822: NEG
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 2
39830: NEG
39831: PUSH
39832: LD_INT 2
39834: NEG
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 3
39842: PUSH
39843: LD_INT 1
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 3
39852: PUSH
39853: LD_INT 2
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 2
39862: PUSH
39863: LD_INT 3
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 1
39872: PUSH
39873: LD_INT 3
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39905: LD_ADDR_VAR 0 26
39909: PUSH
39910: LD_INT 0
39912: PUSH
39913: LD_INT 0
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 0
39922: PUSH
39923: LD_INT 1
39925: NEG
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: LD_INT 0
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 1
39943: PUSH
39944: LD_INT 1
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 0
39953: PUSH
39954: LD_INT 1
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 1
39963: NEG
39964: PUSH
39965: LD_INT 0
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 1
39974: NEG
39975: PUSH
39976: LD_INT 1
39978: NEG
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 1
39986: NEG
39987: PUSH
39988: LD_INT 2
39990: NEG
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 0
39998: PUSH
39999: LD_INT 2
40001: NEG
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 1
40009: PUSH
40010: LD_INT 1
40012: NEG
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 2
40020: PUSH
40021: LD_INT 0
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 2
40030: PUSH
40031: LD_INT 1
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 2
40040: PUSH
40041: LD_INT 2
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 1
40050: PUSH
40051: LD_INT 2
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 0
40060: PUSH
40061: LD_INT 2
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 1
40070: NEG
40071: PUSH
40072: LD_INT 1
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 2
40081: NEG
40082: PUSH
40083: LD_INT 0
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 2
40092: NEG
40093: PUSH
40094: LD_INT 1
40096: NEG
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 2
40104: NEG
40105: PUSH
40106: LD_INT 2
40108: NEG
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 2
40116: PUSH
40117: LD_INT 3
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 1
40126: PUSH
40127: LD_INT 3
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 1
40136: NEG
40137: PUSH
40138: LD_INT 2
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 2
40147: NEG
40148: PUSH
40149: LD_INT 1
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: LIST
40180: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40181: LD_ADDR_VAR 0 27
40185: PUSH
40186: LD_INT 0
40188: PUSH
40189: LD_INT 0
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: LD_INT 1
40201: NEG
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 1
40209: PUSH
40210: LD_INT 0
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 1
40219: PUSH
40220: LD_INT 1
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 0
40229: PUSH
40230: LD_INT 1
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 1
40239: NEG
40240: PUSH
40241: LD_INT 0
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: LD_INT 1
40254: NEG
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 1
40262: NEG
40263: PUSH
40264: LD_INT 2
40266: NEG
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 0
40274: PUSH
40275: LD_INT 2
40277: NEG
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 1
40285: PUSH
40286: LD_INT 1
40288: NEG
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 2
40296: PUSH
40297: LD_INT 0
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 2
40306: PUSH
40307: LD_INT 1
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 2
40316: PUSH
40317: LD_INT 2
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 1
40326: PUSH
40327: LD_INT 2
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 0
40336: PUSH
40337: LD_INT 2
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 1
40346: NEG
40347: PUSH
40348: LD_INT 1
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 2
40357: NEG
40358: PUSH
40359: LD_INT 0
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 2
40368: NEG
40369: PUSH
40370: LD_INT 1
40372: NEG
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 2
40380: NEG
40381: PUSH
40382: LD_INT 2
40384: NEG
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 1
40392: NEG
40393: PUSH
40394: LD_INT 2
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 2
40403: NEG
40404: PUSH
40405: LD_INT 1
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 3
40414: NEG
40415: PUSH
40416: LD_INT 1
40418: NEG
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 3
40426: NEG
40427: PUSH
40428: LD_INT 2
40430: NEG
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: LIST
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40461: LD_ADDR_VAR 0 28
40465: PUSH
40466: LD_INT 0
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 0
40478: PUSH
40479: LD_INT 1
40481: NEG
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 1
40489: PUSH
40490: LD_INT 0
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 1
40499: PUSH
40500: LD_INT 1
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 0
40509: PUSH
40510: LD_INT 1
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 1
40519: NEG
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 1
40530: NEG
40531: PUSH
40532: LD_INT 1
40534: NEG
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 1
40542: NEG
40543: PUSH
40544: LD_INT 2
40546: NEG
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 0
40554: PUSH
40555: LD_INT 2
40557: NEG
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 1
40565: PUSH
40566: LD_INT 1
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 2
40576: PUSH
40577: LD_INT 0
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 2
40586: PUSH
40587: LD_INT 1
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 2
40596: PUSH
40597: LD_INT 2
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: LD_INT 2
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: LD_INT 2
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 1
40626: NEG
40627: PUSH
40628: LD_INT 1
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 2
40637: NEG
40638: PUSH
40639: LD_INT 0
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 2
40648: NEG
40649: PUSH
40650: LD_INT 1
40652: NEG
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 2
40660: NEG
40661: PUSH
40662: LD_INT 2
40664: NEG
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 2
40672: NEG
40673: PUSH
40674: LD_INT 3
40676: NEG
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 1
40684: NEG
40685: PUSH
40686: LD_INT 3
40688: NEG
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 3
40696: NEG
40697: PUSH
40698: LD_INT 1
40700: NEG
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 3
40708: NEG
40709: PUSH
40710: LD_INT 2
40712: NEG
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: LIST
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40743: LD_ADDR_VAR 0 29
40747: PUSH
40748: LD_INT 0
40750: PUSH
40751: LD_INT 0
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 0
40760: PUSH
40761: LD_INT 1
40763: NEG
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 1
40771: PUSH
40772: LD_INT 0
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 1
40781: PUSH
40782: LD_INT 1
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 0
40791: PUSH
40792: LD_INT 1
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 1
40801: NEG
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 1
40812: NEG
40813: PUSH
40814: LD_INT 1
40816: NEG
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 1
40824: NEG
40825: PUSH
40826: LD_INT 2
40828: NEG
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 0
40836: PUSH
40837: LD_INT 2
40839: NEG
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 1
40847: PUSH
40848: LD_INT 1
40850: NEG
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: LD_INT 2
40858: PUSH
40859: LD_INT 0
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 2
40868: PUSH
40869: LD_INT 1
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 1
40878: PUSH
40879: LD_INT 2
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 0
40888: PUSH
40889: LD_INT 2
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 1
40898: NEG
40899: PUSH
40900: LD_INT 1
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 2
40909: NEG
40910: PUSH
40911: LD_INT 1
40913: NEG
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 2
40921: NEG
40922: PUSH
40923: LD_INT 2
40925: NEG
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 2
40933: NEG
40934: PUSH
40935: LD_INT 3
40937: NEG
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 2
40945: PUSH
40946: LD_INT 1
40948: NEG
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 3
40956: PUSH
40957: LD_INT 1
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 1
40966: PUSH
40967: LD_INT 3
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 1
40976: NEG
40977: PUSH
40978: LD_INT 2
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 3
40987: NEG
40988: PUSH
40989: LD_INT 2
40991: NEG
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41022: LD_ADDR_VAR 0 30
41026: PUSH
41027: LD_INT 0
41029: PUSH
41030: LD_INT 0
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 0
41039: PUSH
41040: LD_INT 1
41042: NEG
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 1
41050: PUSH
41051: LD_INT 0
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 1
41060: PUSH
41061: LD_INT 1
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 0
41070: PUSH
41071: LD_INT 1
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 1
41080: NEG
41081: PUSH
41082: LD_INT 0
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 1
41091: NEG
41092: PUSH
41093: LD_INT 1
41095: NEG
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 1
41103: NEG
41104: PUSH
41105: LD_INT 2
41107: NEG
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 0
41115: PUSH
41116: LD_INT 2
41118: NEG
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 1
41126: PUSH
41127: LD_INT 1
41129: NEG
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 2
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 2
41147: PUSH
41148: LD_INT 1
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 2
41157: PUSH
41158: LD_INT 2
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: LD_INT 2
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 1
41177: NEG
41178: PUSH
41179: LD_INT 1
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 2
41188: NEG
41189: PUSH
41190: LD_INT 0
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 2
41199: NEG
41200: PUSH
41201: LD_INT 1
41203: NEG
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 1
41211: NEG
41212: PUSH
41213: LD_INT 3
41215: NEG
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 1
41223: PUSH
41224: LD_INT 2
41226: NEG
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 3
41234: PUSH
41235: LD_INT 2
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 2
41244: PUSH
41245: LD_INT 3
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 2
41254: NEG
41255: PUSH
41256: LD_INT 1
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 3
41265: NEG
41266: PUSH
41267: LD_INT 1
41269: NEG
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41300: LD_ADDR_VAR 0 31
41304: PUSH
41305: LD_INT 0
41307: PUSH
41308: LD_INT 0
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 0
41317: PUSH
41318: LD_INT 1
41320: NEG
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 1
41328: PUSH
41329: LD_INT 0
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 1
41338: PUSH
41339: LD_INT 1
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: LD_INT 1
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 1
41358: NEG
41359: PUSH
41360: LD_INT 0
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 1
41369: NEG
41370: PUSH
41371: LD_INT 1
41373: NEG
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 1
41381: NEG
41382: PUSH
41383: LD_INT 2
41385: NEG
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 1
41393: PUSH
41394: LD_INT 1
41396: NEG
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 2
41404: PUSH
41405: LD_INT 0
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 2
41414: PUSH
41415: LD_INT 1
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 2
41424: PUSH
41425: LD_INT 2
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 1
41434: PUSH
41435: LD_INT 2
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: LD_INT 2
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 1
41454: NEG
41455: PUSH
41456: LD_INT 1
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 2
41465: NEG
41466: PUSH
41467: LD_INT 1
41469: NEG
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 2
41477: NEG
41478: PUSH
41479: LD_INT 2
41481: NEG
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 2
41489: NEG
41490: PUSH
41491: LD_INT 3
41493: NEG
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 2
41501: PUSH
41502: LD_INT 1
41504: NEG
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 3
41512: PUSH
41513: LD_INT 1
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 1
41522: PUSH
41523: LD_INT 3
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 1
41532: NEG
41533: PUSH
41534: LD_INT 2
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 3
41543: NEG
41544: PUSH
41545: LD_INT 2
41547: NEG
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41578: LD_ADDR_VAR 0 32
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: LD_INT 0
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 0
41595: PUSH
41596: LD_INT 1
41598: NEG
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: PUSH
41607: LD_INT 0
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 1
41616: PUSH
41617: LD_INT 1
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 0
41626: PUSH
41627: LD_INT 1
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 1
41636: NEG
41637: PUSH
41638: LD_INT 0
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 1
41647: NEG
41648: PUSH
41649: LD_INT 1
41651: NEG
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 1
41659: NEG
41660: PUSH
41661: LD_INT 2
41663: NEG
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 0
41671: PUSH
41672: LD_INT 2
41674: NEG
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 1
41682: PUSH
41683: LD_INT 1
41685: NEG
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 2
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 2
41703: PUSH
41704: LD_INT 2
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 1
41713: PUSH
41714: LD_INT 2
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 0
41723: PUSH
41724: LD_INT 2
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 1
41733: NEG
41734: PUSH
41735: LD_INT 1
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 2
41744: NEG
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 2
41755: NEG
41756: PUSH
41757: LD_INT 1
41759: NEG
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 1
41767: NEG
41768: PUSH
41769: LD_INT 3
41771: NEG
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 1
41779: PUSH
41780: LD_INT 2
41782: NEG
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 3
41790: PUSH
41791: LD_INT 2
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 2
41800: PUSH
41801: LD_INT 3
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 2
41810: NEG
41811: PUSH
41812: LD_INT 1
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 3
41821: NEG
41822: PUSH
41823: LD_INT 1
41825: NEG
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41856: LD_ADDR_VAR 0 33
41860: PUSH
41861: LD_INT 0
41863: PUSH
41864: LD_INT 0
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: LD_INT 1
41876: NEG
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 1
41884: PUSH
41885: LD_INT 0
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 1
41894: PUSH
41895: LD_INT 1
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: LD_INT 1
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: PUSH
41916: LD_INT 0
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 1
41925: NEG
41926: PUSH
41927: LD_INT 1
41929: NEG
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: PUSH
41939: LD_INT 2
41941: NEG
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 1
41949: PUSH
41950: LD_INT 1
41952: NEG
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 2
41960: PUSH
41961: LD_INT 0
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 2
41970: PUSH
41971: LD_INT 1
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 1
41980: PUSH
41981: LD_INT 2
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 0
41990: PUSH
41991: LD_INT 2
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 1
42000: NEG
42001: PUSH
42002: LD_INT 1
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 2
42011: NEG
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 2
42022: NEG
42023: PUSH
42024: LD_INT 1
42026: NEG
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 2
42034: NEG
42035: PUSH
42036: LD_INT 2
42038: NEG
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 2
42046: NEG
42047: PUSH
42048: LD_INT 3
42050: NEG
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 2
42058: PUSH
42059: LD_INT 1
42061: NEG
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 3
42069: PUSH
42070: LD_INT 1
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 1
42079: PUSH
42080: LD_INT 3
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 1
42089: NEG
42090: PUSH
42091: LD_INT 2
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 3
42100: NEG
42101: PUSH
42102: LD_INT 2
42104: NEG
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42135: LD_ADDR_VAR 0 34
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: LD_INT 0
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 0
42152: PUSH
42153: LD_INT 1
42155: NEG
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 1
42163: PUSH
42164: LD_INT 0
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 1
42173: PUSH
42174: LD_INT 1
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: LD_INT 1
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 1
42193: NEG
42194: PUSH
42195: LD_INT 0
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 1
42204: NEG
42205: PUSH
42206: LD_INT 1
42208: NEG
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: PUSH
42214: LD_INT 1
42216: NEG
42217: PUSH
42218: LD_INT 2
42220: NEG
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 0
42228: PUSH
42229: LD_INT 2
42231: NEG
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 1
42239: PUSH
42240: LD_INT 1
42242: NEG
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 2
42250: PUSH
42251: LD_INT 1
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 2
42260: PUSH
42261: LD_INT 2
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: LD_INT 2
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 1
42280: NEG
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 2
42291: NEG
42292: PUSH
42293: LD_INT 0
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 2
42302: NEG
42303: PUSH
42304: LD_INT 1
42306: NEG
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 2
42314: NEG
42315: PUSH
42316: LD_INT 2
42318: NEG
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 1
42326: NEG
42327: PUSH
42328: LD_INT 3
42330: NEG
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 1
42338: PUSH
42339: LD_INT 2
42341: NEG
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 3
42349: PUSH
42350: LD_INT 2
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 2
42359: PUSH
42360: LD_INT 3
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 2
42369: NEG
42370: PUSH
42371: LD_INT 1
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 3
42380: NEG
42381: PUSH
42382: LD_INT 1
42384: NEG
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42415: LD_ADDR_VAR 0 35
42419: PUSH
42420: LD_INT 0
42422: PUSH
42423: LD_INT 0
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 0
42432: PUSH
42433: LD_INT 1
42435: NEG
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 1
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 1
42453: PUSH
42454: LD_INT 1
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 0
42463: PUSH
42464: LD_INT 1
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 1
42473: NEG
42474: PUSH
42475: LD_INT 0
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 1
42484: NEG
42485: PUSH
42486: LD_INT 1
42488: NEG
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 2
42496: PUSH
42497: LD_INT 1
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 2
42506: NEG
42507: PUSH
42508: LD_INT 1
42510: NEG
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42527: LD_ADDR_VAR 0 36
42531: PUSH
42532: LD_INT 0
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: LD_INT 1
42547: NEG
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 1
42555: PUSH
42556: LD_INT 0
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: LD_INT 1
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: LD_INT 1
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 1
42596: NEG
42597: PUSH
42598: LD_INT 1
42600: NEG
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 1
42608: NEG
42609: PUSH
42610: LD_INT 2
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: LD_INT 2
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42639: LD_ADDR_VAR 0 37
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: LD_INT 0
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: LD_INT 1
42659: NEG
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 1
42667: PUSH
42668: LD_INT 0
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 1
42677: PUSH
42678: LD_INT 1
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: LD_INT 1
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 1
42697: NEG
42698: PUSH
42699: LD_INT 0
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 1
42708: NEG
42709: PUSH
42710: LD_INT 1
42712: NEG
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 1
42720: PUSH
42721: LD_INT 1
42723: NEG
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 1
42731: NEG
42732: PUSH
42733: LD_INT 1
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42751: LD_ADDR_VAR 0 38
42755: PUSH
42756: LD_INT 0
42758: PUSH
42759: LD_INT 0
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: LD_INT 1
42771: NEG
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 1
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 1
42789: PUSH
42790: LD_INT 1
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: LD_INT 1
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 1
42809: NEG
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 1
42820: NEG
42821: PUSH
42822: LD_INT 1
42824: NEG
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 2
42832: PUSH
42833: LD_INT 1
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 2
42842: NEG
42843: PUSH
42844: LD_INT 1
42846: NEG
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42863: LD_ADDR_VAR 0 39
42867: PUSH
42868: LD_INT 0
42870: PUSH
42871: LD_INT 0
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 0
42880: PUSH
42881: LD_INT 1
42883: NEG
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 1
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 1
42901: PUSH
42902: LD_INT 1
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: LD_INT 1
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 1
42921: NEG
42922: PUSH
42923: LD_INT 0
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 1
42932: NEG
42933: PUSH
42934: LD_INT 1
42936: NEG
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 1
42944: NEG
42945: PUSH
42946: LD_INT 2
42948: NEG
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 1
42956: PUSH
42957: LD_INT 2
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42975: LD_ADDR_VAR 0 40
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 1
43003: PUSH
43004: LD_INT 0
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 1
43013: PUSH
43014: LD_INT 1
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: LD_INT 1
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 1
43033: NEG
43034: PUSH
43035: LD_INT 0
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 1
43044: NEG
43045: PUSH
43046: LD_INT 1
43048: NEG
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 1
43056: PUSH
43057: LD_INT 1
43059: NEG
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 1
43067: NEG
43068: PUSH
43069: LD_INT 1
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43087: LD_ADDR_VAR 0 41
43091: PUSH
43092: LD_INT 0
43094: PUSH
43095: LD_INT 0
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: LD_INT 1
43107: NEG
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 1
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 1
43125: PUSH
43126: LD_INT 1
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: LD_INT 1
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 1
43145: NEG
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: NEG
43157: PUSH
43158: LD_INT 1
43160: NEG
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 1
43168: NEG
43169: PUSH
43170: LD_INT 2
43172: NEG
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 1
43180: PUSH
43181: LD_INT 1
43183: NEG
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 2
43191: PUSH
43192: LD_INT 0
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 2
43201: PUSH
43202: LD_INT 1
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 2
43211: PUSH
43212: LD_INT 2
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 1
43221: PUSH
43222: LD_INT 2
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 1
43231: NEG
43232: PUSH
43233: LD_INT 1
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 2
43242: NEG
43243: PUSH
43244: LD_INT 0
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 2
43253: NEG
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 2
43265: NEG
43266: PUSH
43267: LD_INT 2
43269: NEG
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 2
43277: NEG
43278: PUSH
43279: LD_INT 3
43281: NEG
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 2
43289: PUSH
43290: LD_INT 1
43292: NEG
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 3
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 3
43310: PUSH
43311: LD_INT 1
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 3
43320: PUSH
43321: LD_INT 2
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 3
43330: PUSH
43331: LD_INT 3
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 2
43340: PUSH
43341: LD_INT 3
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 2
43350: NEG
43351: PUSH
43352: LD_INT 1
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 3
43361: NEG
43362: PUSH
43363: LD_INT 0
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 3
43372: NEG
43373: PUSH
43374: LD_INT 1
43376: NEG
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 3
43384: NEG
43385: PUSH
43386: LD_INT 2
43388: NEG
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 3
43396: NEG
43397: PUSH
43398: LD_INT 3
43400: NEG
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43437: LD_ADDR_VAR 0 42
43441: PUSH
43442: LD_INT 0
43444: PUSH
43445: LD_INT 0
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 0
43454: PUSH
43455: LD_INT 1
43457: NEG
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 1
43465: PUSH
43466: LD_INT 0
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 1
43475: PUSH
43476: LD_INT 1
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: LD_INT 1
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 1
43495: NEG
43496: PUSH
43497: LD_INT 0
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: LD_INT 1
43510: NEG
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 1
43518: NEG
43519: PUSH
43520: LD_INT 2
43522: NEG
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: LD_INT 2
43533: NEG
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 1
43541: PUSH
43542: LD_INT 1
43544: NEG
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 2
43552: PUSH
43553: LD_INT 1
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 2
43562: PUSH
43563: LD_INT 2
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 1
43572: PUSH
43573: LD_INT 2
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 0
43582: PUSH
43583: LD_INT 2
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 1
43592: NEG
43593: PUSH
43594: LD_INT 1
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 2
43603: NEG
43604: PUSH
43605: LD_INT 1
43607: NEG
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 2
43615: NEG
43616: PUSH
43617: LD_INT 2
43619: NEG
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 2
43627: NEG
43628: PUSH
43629: LD_INT 3
43631: NEG
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 1
43639: NEG
43640: PUSH
43641: LD_INT 3
43643: NEG
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: LD_INT 3
43654: NEG
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 1
43662: PUSH
43663: LD_INT 2
43665: NEG
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 3
43673: PUSH
43674: LD_INT 2
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 3
43683: PUSH
43684: LD_INT 3
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 2
43693: PUSH
43694: LD_INT 3
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: LD_INT 3
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: LD_INT 3
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: PUSH
43725: LD_INT 2
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 3
43734: NEG
43735: PUSH
43736: LD_INT 2
43738: NEG
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: PUSH
43744: LD_INT 3
43746: NEG
43747: PUSH
43748: LD_INT 3
43750: NEG
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43787: LD_ADDR_VAR 0 43
43791: PUSH
43792: LD_INT 0
43794: PUSH
43795: LD_INT 0
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 0
43804: PUSH
43805: LD_INT 1
43807: NEG
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 1
43815: PUSH
43816: LD_INT 0
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 1
43825: PUSH
43826: LD_INT 1
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 0
43835: PUSH
43836: LD_INT 1
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 1
43845: NEG
43846: PUSH
43847: LD_INT 0
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 1
43856: NEG
43857: PUSH
43858: LD_INT 1
43860: NEG
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 1
43868: NEG
43869: PUSH
43870: LD_INT 2
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 0
43880: PUSH
43881: LD_INT 2
43883: NEG
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 1
43891: PUSH
43892: LD_INT 1
43894: NEG
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 2
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 2
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 1
43922: PUSH
43923: LD_INT 2
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 0
43932: PUSH
43933: LD_INT 2
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 1
43942: NEG
43943: PUSH
43944: LD_INT 1
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 2
43953: NEG
43954: PUSH
43955: LD_INT 0
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 2
43964: NEG
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 1
43976: NEG
43977: PUSH
43978: LD_INT 3
43980: NEG
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 0
43988: PUSH
43989: LD_INT 3
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: LD_INT 2
44002: NEG
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 2
44010: PUSH
44011: LD_INT 1
44013: NEG
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 3
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 3
44031: PUSH
44032: LD_INT 1
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: LD_INT 3
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 0
44051: PUSH
44052: LD_INT 3
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: LD_INT 2
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 2
44072: NEG
44073: PUSH
44074: LD_INT 1
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 3
44083: NEG
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 3
44094: NEG
44095: PUSH
44096: LD_INT 1
44098: NEG
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44135: LD_ADDR_VAR 0 44
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: LD_INT 1
44155: NEG
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 1
44173: PUSH
44174: LD_INT 1
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 0
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: NEG
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 1
44204: NEG
44205: PUSH
44206: LD_INT 1
44208: NEG
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: LD_INT 2
44220: NEG
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 1
44228: PUSH
44229: LD_INT 1
44231: NEG
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 2
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 2
44249: PUSH
44250: LD_INT 1
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 2
44259: PUSH
44260: LD_INT 2
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 1
44269: PUSH
44270: LD_INT 2
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 1
44279: NEG
44280: PUSH
44281: LD_INT 1
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 2
44290: NEG
44291: PUSH
44292: LD_INT 0
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 2
44301: NEG
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: PUSH
44311: LD_INT 2
44313: NEG
44314: PUSH
44315: LD_INT 2
44317: NEG
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 2
44325: NEG
44326: PUSH
44327: LD_INT 3
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 2
44337: PUSH
44338: LD_INT 1
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 3
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 3
44358: PUSH
44359: LD_INT 1
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 3
44368: PUSH
44369: LD_INT 2
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: LD_INT 3
44378: PUSH
44379: LD_INT 3
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 2
44388: PUSH
44389: LD_INT 3
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 2
44398: NEG
44399: PUSH
44400: LD_INT 1
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 3
44409: NEG
44410: PUSH
44411: LD_INT 0
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 3
44420: NEG
44421: PUSH
44422: LD_INT 1
44424: NEG
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 3
44432: NEG
44433: PUSH
44434: LD_INT 2
44436: NEG
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 3
44444: NEG
44445: PUSH
44446: LD_INT 3
44448: NEG
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44485: LD_ADDR_VAR 0 45
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: LD_INT 1
44505: NEG
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 1
44513: PUSH
44514: LD_INT 0
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 1
44523: PUSH
44524: LD_INT 1
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 0
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 1
44543: NEG
44544: PUSH
44545: LD_INT 0
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 1
44554: NEG
44555: PUSH
44556: LD_INT 1
44558: NEG
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 1
44566: NEG
44567: PUSH
44568: LD_INT 2
44570: NEG
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: LD_INT 2
44581: NEG
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 1
44589: PUSH
44590: LD_INT 1
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 2
44600: PUSH
44601: LD_INT 1
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 2
44610: PUSH
44611: LD_INT 2
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 1
44620: PUSH
44621: LD_INT 2
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: NEG
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 2
44651: NEG
44652: PUSH
44653: LD_INT 1
44655: NEG
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 2
44663: NEG
44664: PUSH
44665: LD_INT 2
44667: NEG
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 2
44675: NEG
44676: PUSH
44677: LD_INT 3
44679: NEG
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: LD_INT 3
44691: NEG
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 0
44699: PUSH
44700: LD_INT 3
44702: NEG
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 1
44710: PUSH
44711: LD_INT 2
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 3
44721: PUSH
44722: LD_INT 2
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 3
44731: PUSH
44732: LD_INT 3
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 2
44741: PUSH
44742: LD_INT 3
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 1
44751: PUSH
44752: LD_INT 3
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 0
44761: PUSH
44762: LD_INT 3
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 1
44771: NEG
44772: PUSH
44773: LD_INT 2
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 3
44782: NEG
44783: PUSH
44784: LD_INT 2
44786: NEG
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 3
44794: NEG
44795: PUSH
44796: LD_INT 3
44798: NEG
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44835: LD_ADDR_VAR 0 46
44839: PUSH
44840: LD_INT 0
44842: PUSH
44843: LD_INT 0
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: LD_INT 1
44855: NEG
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 1
44863: PUSH
44864: LD_INT 0
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 1
44873: PUSH
44874: LD_INT 1
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 0
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 1
44893: NEG
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 1
44904: NEG
44905: PUSH
44906: LD_INT 1
44908: NEG
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: LD_INT 2
44920: NEG
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 0
44928: PUSH
44929: LD_INT 2
44931: NEG
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: LD_INT 1
44942: NEG
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 2
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 2
44960: PUSH
44961: LD_INT 1
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 1
44970: PUSH
44971: LD_INT 2
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: LD_INT 2
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 1
44990: NEG
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 2
45001: NEG
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 2
45012: NEG
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 1
45024: NEG
45025: PUSH
45026: LD_INT 3
45028: NEG
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: LD_INT 3
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 1
45047: PUSH
45048: LD_INT 2
45050: NEG
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 2
45058: PUSH
45059: LD_INT 1
45061: NEG
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 3
45069: PUSH
45070: LD_INT 0
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 3
45079: PUSH
45080: LD_INT 1
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 1
45089: PUSH
45090: LD_INT 3
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: LD_INT 3
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: LD_INT 2
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 2
45120: NEG
45121: PUSH
45122: LD_INT 1
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 3
45131: NEG
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 3
45142: NEG
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45183: LD_ADDR_VAR 0 47
45187: PUSH
45188: LD_INT 0
45190: PUSH
45191: LD_INT 0
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 0
45200: PUSH
45201: LD_INT 1
45203: NEG
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 1
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 1
45221: PUSH
45222: LD_INT 1
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: LD_INT 1
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 1
45241: NEG
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: LD_INT 1
45256: NEG
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 1
45264: NEG
45265: PUSH
45266: LD_INT 2
45268: NEG
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: LD_INT 2
45279: NEG
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: LD_INT 1
45290: NEG
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 2
45298: NEG
45299: PUSH
45300: LD_INT 1
45302: NEG
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 2
45310: NEG
45311: PUSH
45312: LD_INT 2
45314: NEG
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45334: LD_ADDR_VAR 0 48
45338: PUSH
45339: LD_INT 0
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: LD_INT 1
45354: NEG
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 1
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: LD_INT 1
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 1
45392: NEG
45393: PUSH
45394: LD_INT 0
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: LD_INT 1
45407: NEG
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 1
45415: NEG
45416: PUSH
45417: LD_INT 2
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 0
45427: PUSH
45428: LD_INT 2
45430: NEG
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 1
45438: PUSH
45439: LD_INT 1
45441: NEG
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 2
45449: PUSH
45450: LD_INT 0
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 2
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45481: LD_ADDR_VAR 0 49
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 1
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 1
45519: PUSH
45520: LD_INT 1
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 0
45529: PUSH
45530: LD_INT 1
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 1
45539: NEG
45540: PUSH
45541: LD_INT 0
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: LD_INT 1
45554: NEG
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 1
45562: PUSH
45563: LD_INT 1
45565: NEG
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 2
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 2
45583: PUSH
45584: LD_INT 1
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 2
45593: PUSH
45594: LD_INT 2
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: LD_INT 2
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45625: LD_ADDR_VAR 0 50
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: LD_INT 1
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: LD_INT 1
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: NEG
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 2
45706: PUSH
45707: LD_INT 1
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 2
45716: PUSH
45717: LD_INT 2
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: LD_INT 2
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 1
45746: NEG
45747: PUSH
45748: LD_INT 1
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45769: LD_ADDR_VAR 0 51
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: LD_INT 0
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: LD_INT 1
45789: NEG
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: LD_INT 0
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: LD_INT 1
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 0
45817: PUSH
45818: LD_INT 1
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: LD_INT 0
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: NEG
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 1
45850: PUSH
45851: LD_INT 2
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: LD_INT 2
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 1
45870: NEG
45871: PUSH
45872: LD_INT 1
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 2
45881: NEG
45882: PUSH
45883: LD_INT 0
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 2
45892: NEG
45893: PUSH
45894: LD_INT 1
45896: NEG
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45916: LD_ADDR_VAR 0 52
45920: PUSH
45921: LD_INT 0
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 0
45933: PUSH
45934: LD_INT 1
45936: NEG
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 1
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: LD_INT 1
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 1
45974: NEG
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 1
45985: NEG
45986: PUSH
45987: LD_INT 1
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: LD_INT 2
46001: NEG
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 1
46009: NEG
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 2
46020: NEG
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 2
46031: NEG
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 2
46043: NEG
46044: PUSH
46045: LD_INT 2
46047: NEG
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46067: LD_ADDR_VAR 0 53
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: LD_INT 1
46087: NEG
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 1
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 1
46105: PUSH
46106: LD_INT 1
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: LD_INT 1
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 1
46125: NEG
46126: PUSH
46127: LD_INT 0
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 1
46136: NEG
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 1
46148: NEG
46149: PUSH
46150: LD_INT 2
46152: NEG
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 0
46160: PUSH
46161: LD_INT 2
46163: NEG
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 1
46171: PUSH
46172: LD_INT 1
46174: NEG
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 2
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 2
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 2
46202: PUSH
46203: LD_INT 2
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 1
46212: PUSH
46213: LD_INT 2
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 0
46222: PUSH
46223: LD_INT 2
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 1
46232: NEG
46233: PUSH
46234: LD_INT 1
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 2
46243: NEG
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 2
46254: NEG
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 2
46266: NEG
46267: PUSH
46268: LD_INT 2
46270: NEG
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46297: LD_ADDR_VAR 0 54
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: LD_INT 1
46317: NEG
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 1
46325: PUSH
46326: LD_INT 0
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 1
46335: PUSH
46336: LD_INT 1
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 0
46345: PUSH
46346: LD_INT 1
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 1
46355: NEG
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 1
46366: NEG
46367: PUSH
46368: LD_INT 1
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 1
46378: NEG
46379: PUSH
46380: LD_INT 2
46382: NEG
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: LD_INT 2
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 1
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 2
46412: PUSH
46413: LD_INT 0
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 2
46422: PUSH
46423: LD_INT 1
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 2
46432: PUSH
46433: LD_INT 2
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 1
46442: PUSH
46443: LD_INT 2
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: LD_INT 2
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: PUSH
46464: LD_INT 1
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 2
46473: NEG
46474: PUSH
46475: LD_INT 0
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 2
46484: NEG
46485: PUSH
46486: LD_INT 1
46488: NEG
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 2
46496: NEG
46497: PUSH
46498: LD_INT 2
46500: NEG
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46527: LD_ADDR_VAR 0 55
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: LD_INT 1
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: LD_INT 1
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 1
46596: NEG
46597: PUSH
46598: LD_INT 1
46600: NEG
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: LD_INT 2
46612: NEG
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 0
46620: PUSH
46621: LD_INT 2
46623: NEG
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 1
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 2
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 2
46652: PUSH
46653: LD_INT 1
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 2
46662: PUSH
46663: LD_INT 2
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: LD_INT 2
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 0
46682: PUSH
46683: LD_INT 2
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 1
46692: NEG
46693: PUSH
46694: LD_INT 1
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 2
46703: NEG
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 2
46714: NEG
46715: PUSH
46716: LD_INT 1
46718: NEG
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 2
46726: NEG
46727: PUSH
46728: LD_INT 2
46730: NEG
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46757: LD_ADDR_VAR 0 56
46761: PUSH
46762: LD_INT 0
46764: PUSH
46765: LD_INT 0
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: LD_INT 1
46777: NEG
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 1
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 1
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 0
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 1
46815: NEG
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 1
46826: NEG
46827: PUSH
46828: LD_INT 1
46830: NEG
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 1
46838: NEG
46839: PUSH
46840: LD_INT 2
46842: NEG
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: LD_INT 2
46853: NEG
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 1
46861: PUSH
46862: LD_INT 1
46864: NEG
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 2
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 2
46882: PUSH
46883: LD_INT 1
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 2
46892: PUSH
46893: LD_INT 2
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: PUSH
46903: LD_INT 2
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: LD_INT 2
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 1
46922: NEG
46923: PUSH
46924: LD_INT 1
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: NEG
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 2
46944: NEG
46945: PUSH
46946: LD_INT 1
46948: NEG
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 2
46956: NEG
46957: PUSH
46958: LD_INT 2
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46987: LD_ADDR_VAR 0 57
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: LD_INT 2
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: LD_INT 2
47083: NEG
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 1
47091: PUSH
47092: LD_INT 1
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 2
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 2
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 2
47122: PUSH
47123: LD_INT 2
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 1
47132: PUSH
47133: LD_INT 2
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: LD_INT 2
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 1
47152: NEG
47153: PUSH
47154: LD_INT 1
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 2
47163: NEG
47164: PUSH
47165: LD_INT 0
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 2
47174: NEG
47175: PUSH
47176: LD_INT 1
47178: NEG
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 2
47186: NEG
47187: PUSH
47188: LD_INT 2
47190: NEG
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47217: LD_ADDR_VAR 0 58
47221: PUSH
47222: LD_INT 0
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 0
47234: PUSH
47235: LD_INT 1
47237: NEG
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 1
47245: PUSH
47246: LD_INT 0
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 1
47255: PUSH
47256: LD_INT 1
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 1
47275: NEG
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 1
47286: NEG
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: LD_INT 2
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: LD_INT 2
47313: NEG
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 1
47321: PUSH
47322: LD_INT 1
47324: NEG
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 2
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 2
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 2
47352: PUSH
47353: LD_INT 2
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: LD_INT 2
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: LD_INT 2
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 1
47382: NEG
47383: PUSH
47384: LD_INT 1
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 2
47393: NEG
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 2
47404: NEG
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 2
47416: NEG
47417: PUSH
47418: LD_INT 2
47420: NEG
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47447: LD_ADDR_VAR 0 59
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: LD_INT 1
47467: NEG
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 1
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 0
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 1
47505: NEG
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 1
47516: NEG
47517: PUSH
47518: LD_INT 1
47520: NEG
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47535: LD_ADDR_VAR 0 60
47539: PUSH
47540: LD_INT 0
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: LD_INT 1
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: PUSH
47564: LD_INT 0
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 1
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: LD_INT 1
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: LD_INT 0
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 1
47604: NEG
47605: PUSH
47606: LD_INT 1
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47623: LD_ADDR_VAR 0 61
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: LD_INT 0
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: LD_INT 1
47643: NEG
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 1
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: LD_INT 1
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 1
47681: NEG
47682: PUSH
47683: LD_INT 0
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 1
47692: NEG
47693: PUSH
47694: LD_INT 1
47696: NEG
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47711: LD_ADDR_VAR 0 62
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: LD_INT 0
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: LD_INT 1
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: PUSH
47740: LD_INT 0
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 1
47749: PUSH
47750: LD_INT 1
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: LD_INT 1
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 1
47769: NEG
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: NEG
47781: PUSH
47782: LD_INT 1
47784: NEG
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47799: LD_ADDR_VAR 0 63
47803: PUSH
47804: LD_INT 0
47806: PUSH
47807: LD_INT 0
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: LD_INT 0
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 1
47837: PUSH
47838: LD_INT 1
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: LD_INT 1
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: LD_INT 0
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 1
47868: NEG
47869: PUSH
47870: LD_INT 1
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47887: LD_ADDR_VAR 0 64
47891: PUSH
47892: LD_INT 0
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 0
47904: PUSH
47905: LD_INT 1
47907: NEG
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 1
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: LD_INT 1
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 0
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: NEG
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 1
47956: NEG
47957: PUSH
47958: LD_INT 1
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: ST_TO_ADDR
// end ; 1 :
47975: GO 53872
47977: LD_INT 1
47979: DOUBLE
47980: EQUAL
47981: IFTRUE 47985
47983: GO 50608
47985: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47986: LD_ADDR_VAR 0 11
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: PUSH
47995: LD_INT 3
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: LD_INT 3
48008: NEG
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 1
48016: PUSH
48017: LD_INT 2
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: LIST
48029: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48030: LD_ADDR_VAR 0 12
48034: PUSH
48035: LD_INT 2
48037: PUSH
48038: LD_INT 1
48040: NEG
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 3
48048: PUSH
48049: LD_INT 0
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 3
48058: PUSH
48059: LD_INT 1
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: LIST
48070: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48071: LD_ADDR_VAR 0 13
48075: PUSH
48076: LD_INT 3
48078: PUSH
48079: LD_INT 2
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 3
48088: PUSH
48089: LD_INT 3
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 2
48098: PUSH
48099: LD_INT 3
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: LIST
48110: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48111: LD_ADDR_VAR 0 14
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: LD_INT 3
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: LD_INT 3
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: LD_INT 2
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: LIST
48151: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48152: LD_ADDR_VAR 0 15
48156: PUSH
48157: LD_INT 2
48159: NEG
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 3
48170: NEG
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 3
48181: NEG
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: LIST
48195: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48196: LD_ADDR_VAR 0 16
48200: PUSH
48201: LD_INT 2
48203: NEG
48204: PUSH
48205: LD_INT 3
48207: NEG
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 3
48215: NEG
48216: PUSH
48217: LD_INT 2
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 3
48227: NEG
48228: PUSH
48229: LD_INT 3
48231: NEG
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: LIST
48241: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48242: LD_ADDR_VAR 0 17
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: LD_INT 3
48253: NEG
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 0
48261: PUSH
48262: LD_INT 3
48264: NEG
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: LD_INT 2
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: LIST
48285: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48286: LD_ADDR_VAR 0 18
48290: PUSH
48291: LD_INT 2
48293: PUSH
48294: LD_INT 1
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 3
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 3
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: LIST
48326: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48327: LD_ADDR_VAR 0 19
48331: PUSH
48332: LD_INT 3
48334: PUSH
48335: LD_INT 2
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 3
48344: PUSH
48345: LD_INT 3
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 2
48354: PUSH
48355: LD_INT 3
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: LIST
48366: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48367: LD_ADDR_VAR 0 20
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: LD_INT 3
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: LD_INT 3
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 1
48394: NEG
48395: PUSH
48396: LD_INT 2
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: LIST
48407: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48408: LD_ADDR_VAR 0 21
48412: PUSH
48413: LD_INT 2
48415: NEG
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 3
48426: NEG
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 3
48437: NEG
48438: PUSH
48439: LD_INT 1
48441: NEG
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: LIST
48451: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48452: LD_ADDR_VAR 0 22
48456: PUSH
48457: LD_INT 2
48459: NEG
48460: PUSH
48461: LD_INT 3
48463: NEG
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 3
48471: NEG
48472: PUSH
48473: LD_INT 2
48475: NEG
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 3
48483: NEG
48484: PUSH
48485: LD_INT 3
48487: NEG
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: LIST
48497: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48498: LD_ADDR_VAR 0 23
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: LD_INT 3
48508: NEG
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 1
48516: NEG
48517: PUSH
48518: LD_INT 4
48520: NEG
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: LD_INT 3
48531: NEG
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: LIST
48541: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48542: LD_ADDR_VAR 0 24
48546: PUSH
48547: LD_INT 3
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 3
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 4
48570: PUSH
48571: LD_INT 1
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: LIST
48582: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48583: LD_ADDR_VAR 0 25
48587: PUSH
48588: LD_INT 3
48590: PUSH
48591: LD_INT 3
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 4
48600: PUSH
48601: LD_INT 3
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 3
48610: PUSH
48611: LD_INT 4
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: LIST
48622: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48623: LD_ADDR_VAR 0 26
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: LD_INT 3
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 1
48640: PUSH
48641: LD_INT 4
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: NEG
48651: PUSH
48652: LD_INT 3
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: LIST
48663: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48664: LD_ADDR_VAR 0 27
48668: PUSH
48669: LD_INT 3
48671: NEG
48672: PUSH
48673: LD_INT 0
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 3
48682: NEG
48683: PUSH
48684: LD_INT 1
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 4
48693: NEG
48694: PUSH
48695: LD_INT 1
48697: NEG
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: LIST
48707: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48708: LD_ADDR_VAR 0 28
48712: PUSH
48713: LD_INT 3
48715: NEG
48716: PUSH
48717: LD_INT 3
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 3
48727: NEG
48728: PUSH
48729: LD_INT 4
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 4
48739: NEG
48740: PUSH
48741: LD_INT 3
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: LIST
48753: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48754: LD_ADDR_VAR 0 29
48758: PUSH
48759: LD_INT 1
48761: NEG
48762: PUSH
48763: LD_INT 3
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 0
48773: PUSH
48774: LD_INT 3
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 1
48784: PUSH
48785: LD_INT 2
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: NEG
48796: PUSH
48797: LD_INT 4
48799: NEG
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 0
48807: PUSH
48808: LD_INT 4
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 1
48818: PUSH
48819: LD_INT 3
48821: NEG
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 1
48829: NEG
48830: PUSH
48831: LD_INT 5
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: LD_INT 5
48844: NEG
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 1
48852: PUSH
48853: LD_INT 4
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: NEG
48864: PUSH
48865: LD_INT 6
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: LD_INT 6
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: LD_INT 5
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48909: LD_ADDR_VAR 0 30
48913: PUSH
48914: LD_INT 2
48916: PUSH
48917: LD_INT 1
48919: NEG
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 3
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 3
48937: PUSH
48938: LD_INT 1
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 3
48947: PUSH
48948: LD_INT 1
48950: NEG
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 4
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 4
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 4
48978: PUSH
48979: LD_INT 1
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 5
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 5
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 5
49009: PUSH
49010: LD_INT 1
49012: NEG
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 6
49020: PUSH
49021: LD_INT 0
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 6
49030: PUSH
49031: LD_INT 1
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49052: LD_ADDR_VAR 0 31
49056: PUSH
49057: LD_INT 3
49059: PUSH
49060: LD_INT 2
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 3
49069: PUSH
49070: LD_INT 3
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 2
49079: PUSH
49080: LD_INT 3
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 4
49089: PUSH
49090: LD_INT 3
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 4
49099: PUSH
49100: LD_INT 4
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 3
49109: PUSH
49110: LD_INT 4
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 5
49119: PUSH
49120: LD_INT 4
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 5
49129: PUSH
49130: LD_INT 5
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 4
49139: PUSH
49140: LD_INT 5
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 6
49149: PUSH
49150: LD_INT 5
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 6
49159: PUSH
49160: LD_INT 6
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 5
49169: PUSH
49170: LD_INT 6
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49191: LD_ADDR_VAR 0 32
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: LD_INT 3
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: LD_INT 3
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: LD_INT 2
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: LD_INT 4
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: LD_INT 4
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: LD_INT 3
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 1
49260: PUSH
49261: LD_INT 5
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 0
49270: PUSH
49271: LD_INT 5
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: LD_INT 4
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 1
49291: PUSH
49292: LD_INT 6
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: LD_INT 6
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: LD_INT 5
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49334: LD_ADDR_VAR 0 33
49338: PUSH
49339: LD_INT 2
49341: NEG
49342: PUSH
49343: LD_INT 1
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 3
49352: NEG
49353: PUSH
49354: LD_INT 0
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 3
49363: NEG
49364: PUSH
49365: LD_INT 1
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 3
49375: NEG
49376: PUSH
49377: LD_INT 1
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 4
49386: NEG
49387: PUSH
49388: LD_INT 0
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 4
49397: NEG
49398: PUSH
49399: LD_INT 1
49401: NEG
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 4
49409: NEG
49410: PUSH
49411: LD_INT 1
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 5
49420: NEG
49421: PUSH
49422: LD_INT 0
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 5
49431: NEG
49432: PUSH
49433: LD_INT 1
49435: NEG
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 5
49443: NEG
49444: PUSH
49445: LD_INT 1
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 6
49454: NEG
49455: PUSH
49456: LD_INT 0
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 6
49465: NEG
49466: PUSH
49467: LD_INT 1
49469: NEG
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49489: LD_ADDR_VAR 0 34
49493: PUSH
49494: LD_INT 2
49496: NEG
49497: PUSH
49498: LD_INT 3
49500: NEG
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 3
49508: NEG
49509: PUSH
49510: LD_INT 2
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 3
49520: NEG
49521: PUSH
49522: LD_INT 3
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 3
49532: NEG
49533: PUSH
49534: LD_INT 4
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 4
49544: NEG
49545: PUSH
49546: LD_INT 3
49548: NEG
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 4
49556: NEG
49557: PUSH
49558: LD_INT 4
49560: NEG
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 4
49568: NEG
49569: PUSH
49570: LD_INT 5
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 5
49580: NEG
49581: PUSH
49582: LD_INT 4
49584: NEG
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 5
49592: NEG
49593: PUSH
49594: LD_INT 5
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 5
49604: NEG
49605: PUSH
49606: LD_INT 6
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 6
49616: NEG
49617: PUSH
49618: LD_INT 5
49620: NEG
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 6
49628: NEG
49629: PUSH
49630: LD_INT 6
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49652: LD_ADDR_VAR 0 41
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: LD_INT 2
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: LD_INT 3
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: LD_INT 2
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: LIST
49695: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49696: LD_ADDR_VAR 0 42
49700: PUSH
49701: LD_INT 2
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 2
49713: PUSH
49714: LD_INT 1
49716: NEG
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 3
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: LIST
49736: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49737: LD_ADDR_VAR 0 43
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: LD_INT 2
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 3
49754: PUSH
49755: LD_INT 2
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 2
49764: PUSH
49765: LD_INT 3
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: LIST
49776: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49777: LD_ADDR_VAR 0 44
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: LD_INT 2
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 1
49794: PUSH
49795: LD_INT 3
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: PUSH
49806: LD_INT 2
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: LIST
49817: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49818: LD_ADDR_VAR 0 45
49822: PUSH
49823: LD_INT 2
49825: NEG
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 2
49836: NEG
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 3
49847: NEG
49848: PUSH
49849: LD_INT 1
49851: NEG
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: LIST
49861: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49862: LD_ADDR_VAR 0 46
49866: PUSH
49867: LD_INT 2
49869: NEG
49870: PUSH
49871: LD_INT 2
49873: NEG
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 2
49881: NEG
49882: PUSH
49883: LD_INT 3
49885: NEG
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 3
49893: NEG
49894: PUSH
49895: LD_INT 2
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: LIST
49907: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49908: LD_ADDR_VAR 0 47
49912: PUSH
49913: LD_INT 2
49915: NEG
49916: PUSH
49917: LD_INT 3
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: NEG
49928: PUSH
49929: LD_INT 3
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49941: LD_ADDR_VAR 0 48
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: LD_INT 2
49951: NEG
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 2
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49972: LD_ADDR_VAR 0 49
49976: PUSH
49977: LD_INT 3
49979: PUSH
49980: LD_INT 1
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 3
49989: PUSH
49990: LD_INT 2
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50001: LD_ADDR_VAR 0 50
50005: PUSH
50006: LD_INT 2
50008: PUSH
50009: LD_INT 3
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: LD_INT 3
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50030: LD_ADDR_VAR 0 51
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: LD_INT 2
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 2
50048: NEG
50049: PUSH
50050: LD_INT 1
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50061: LD_ADDR_VAR 0 52
50065: PUSH
50066: LD_INT 3
50068: NEG
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 3
50080: NEG
50081: PUSH
50082: LD_INT 2
50084: NEG
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50094: LD_ADDR_VAR 0 53
50098: PUSH
50099: LD_INT 1
50101: NEG
50102: PUSH
50103: LD_INT 3
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: LD_INT 3
50116: NEG
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 1
50124: PUSH
50125: LD_INT 2
50127: NEG
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: LIST
50137: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50138: LD_ADDR_VAR 0 54
50142: PUSH
50143: LD_INT 2
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 3
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 3
50166: PUSH
50167: LD_INT 1
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: LIST
50178: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50179: LD_ADDR_VAR 0 55
50183: PUSH
50184: LD_INT 3
50186: PUSH
50187: LD_INT 2
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 3
50196: PUSH
50197: LD_INT 3
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 2
50206: PUSH
50207: LD_INT 3
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: LIST
50218: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50219: LD_ADDR_VAR 0 56
50223: PUSH
50224: LD_INT 1
50226: PUSH
50227: LD_INT 3
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: LD_INT 3
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 1
50246: NEG
50247: PUSH
50248: LD_INT 2
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: LIST
50259: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50260: LD_ADDR_VAR 0 57
50264: PUSH
50265: LD_INT 2
50267: NEG
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 3
50278: NEG
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 3
50289: NEG
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: LIST
50303: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50304: LD_ADDR_VAR 0 58
50308: PUSH
50309: LD_INT 2
50311: NEG
50312: PUSH
50313: LD_INT 3
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 3
50323: NEG
50324: PUSH
50325: LD_INT 2
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 3
50335: NEG
50336: PUSH
50337: LD_INT 3
50339: NEG
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: LIST
50349: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50350: LD_ADDR_VAR 0 59
50354: PUSH
50355: LD_INT 1
50357: NEG
50358: PUSH
50359: LD_INT 2
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 0
50369: PUSH
50370: LD_INT 2
50372: NEG
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 1
50380: PUSH
50381: LD_INT 1
50383: NEG
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: LIST
50393: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50394: LD_ADDR_VAR 0 60
50398: PUSH
50399: LD_INT 1
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 2
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 2
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: LIST
50434: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50435: LD_ADDR_VAR 0 61
50439: PUSH
50440: LD_INT 2
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 2
50452: PUSH
50453: LD_INT 2
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: LD_INT 2
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: LIST
50474: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50475: LD_ADDR_VAR 0 62
50479: PUSH
50480: LD_INT 1
50482: PUSH
50483: LD_INT 2
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: LD_INT 2
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 1
50502: NEG
50503: PUSH
50504: LD_INT 1
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: LIST
50515: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50516: LD_ADDR_VAR 0 63
50520: PUSH
50521: LD_INT 1
50523: NEG
50524: PUSH
50525: LD_INT 1
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 2
50534: NEG
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 2
50545: NEG
50546: PUSH
50547: LD_INT 1
50549: NEG
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: LIST
50559: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50560: LD_ADDR_VAR 0 64
50564: PUSH
50565: LD_INT 1
50567: NEG
50568: PUSH
50569: LD_INT 2
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 2
50579: NEG
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 2
50591: NEG
50592: PUSH
50593: LD_INT 2
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: LIST
50605: ST_TO_ADDR
// end ; 2 :
50606: GO 53872
50608: LD_INT 2
50610: DOUBLE
50611: EQUAL
50612: IFTRUE 50616
50614: GO 53871
50616: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50617: LD_ADDR_VAR 0 29
50621: PUSH
50622: LD_INT 4
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 4
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 5
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 5
50655: PUSH
50656: LD_INT 1
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 4
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 3
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 3
50685: PUSH
50686: LD_INT 1
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 3
50696: PUSH
50697: LD_INT 2
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 5
50707: PUSH
50708: LD_INT 2
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 3
50717: PUSH
50718: LD_INT 3
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 3
50727: PUSH
50728: LD_INT 2
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 4
50737: PUSH
50738: LD_INT 3
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 4
50747: PUSH
50748: LD_INT 4
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 3
50757: PUSH
50758: LD_INT 4
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 2
50767: PUSH
50768: LD_INT 3
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 2
50777: PUSH
50778: LD_INT 2
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 4
50787: PUSH
50788: LD_INT 2
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 2
50797: PUSH
50798: LD_INT 4
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: LD_INT 4
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: LD_INT 3
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: LD_INT 4
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: LD_INT 5
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: LD_INT 5
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: NEG
50858: PUSH
50859: LD_INT 4
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: LD_INT 3
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 2
50879: PUSH
50880: LD_INT 5
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 2
50889: NEG
50890: PUSH
50891: LD_INT 3
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 3
50900: NEG
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 3
50911: NEG
50912: PUSH
50913: LD_INT 1
50915: NEG
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PUSH
50921: LD_INT 2
50923: NEG
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 2
50934: NEG
50935: PUSH
50936: LD_INT 1
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 3
50945: NEG
50946: PUSH
50947: LD_INT 1
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 4
50956: NEG
50957: PUSH
50958: LD_INT 0
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 4
50967: NEG
50968: PUSH
50969: LD_INT 1
50971: NEG
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 4
50979: NEG
50980: PUSH
50981: LD_INT 2
50983: NEG
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 2
50991: NEG
50992: PUSH
50993: LD_INT 2
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 4
51002: NEG
51003: PUSH
51004: LD_INT 4
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 4
51014: NEG
51015: PUSH
51016: LD_INT 5
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 3
51026: NEG
51027: PUSH
51028: LD_INT 4
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 3
51038: NEG
51039: PUSH
51040: LD_INT 3
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 4
51050: NEG
51051: PUSH
51052: LD_INT 3
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 5
51062: NEG
51063: PUSH
51064: LD_INT 4
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 5
51074: NEG
51075: PUSH
51076: LD_INT 5
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 3
51086: NEG
51087: PUSH
51088: LD_INT 5
51090: NEG
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 5
51098: NEG
51099: PUSH
51100: LD_INT 3
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51155: LD_ADDR_VAR 0 30
51159: PUSH
51160: LD_INT 4
51162: PUSH
51163: LD_INT 4
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 4
51172: PUSH
51173: LD_INT 3
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 5
51182: PUSH
51183: LD_INT 4
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 5
51192: PUSH
51193: LD_INT 5
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 4
51202: PUSH
51203: LD_INT 5
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 3
51212: PUSH
51213: LD_INT 4
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 3
51222: PUSH
51223: LD_INT 3
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 5
51232: PUSH
51233: LD_INT 3
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 3
51242: PUSH
51243: LD_INT 5
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: LD_INT 3
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: LD_INT 2
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: PUSH
51273: LD_INT 3
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 1
51282: PUSH
51283: LD_INT 4
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 0
51292: PUSH
51293: LD_INT 4
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 1
51302: NEG
51303: PUSH
51304: LD_INT 3
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 1
51313: NEG
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 2
51324: PUSH
51325: LD_INT 4
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 2
51334: NEG
51335: PUSH
51336: LD_INT 2
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 4
51345: NEG
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 4
51356: NEG
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 3
51368: NEG
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 3
51379: NEG
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 4
51390: NEG
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 5
51401: NEG
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 5
51412: NEG
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 5
51424: NEG
51425: PUSH
51426: LD_INT 2
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 3
51436: NEG
51437: PUSH
51438: LD_INT 2
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 3
51447: NEG
51448: PUSH
51449: LD_INT 3
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 3
51459: NEG
51460: PUSH
51461: LD_INT 4
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 2
51471: NEG
51472: PUSH
51473: LD_INT 3
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 2
51483: NEG
51484: PUSH
51485: LD_INT 2
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 3
51495: NEG
51496: PUSH
51497: LD_INT 2
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 4
51507: NEG
51508: PUSH
51509: LD_INT 3
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 4
51519: NEG
51520: PUSH
51521: LD_INT 4
51523: NEG
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 2
51531: NEG
51532: PUSH
51533: LD_INT 4
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 4
51543: NEG
51544: PUSH
51545: LD_INT 2
51547: NEG
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: LD_INT 4
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: LD_INT 5
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: LD_INT 4
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: PUSH
51589: LD_INT 3
51591: NEG
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: LD_INT 3
51602: NEG
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: LD_INT 4
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: LD_INT 5
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 2
51634: PUSH
51635: LD_INT 3
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 2
51645: NEG
51646: PUSH
51647: LD_INT 5
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51702: LD_ADDR_VAR 0 31
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: LD_INT 4
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: LD_INT 3
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: PUSH
51730: LD_INT 4
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 1
51739: PUSH
51740: LD_INT 5
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: LD_INT 5
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 1
51759: NEG
51760: PUSH
51761: LD_INT 4
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 1
51770: NEG
51771: PUSH
51772: LD_INT 3
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 2
51781: PUSH
51782: LD_INT 5
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 2
51791: NEG
51792: PUSH
51793: LD_INT 3
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 3
51802: NEG
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 3
51813: NEG
51814: PUSH
51815: LD_INT 1
51817: NEG
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 2
51825: NEG
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 2
51836: NEG
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 3
51847: NEG
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 4
51858: NEG
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 4
51869: NEG
51870: PUSH
51871: LD_INT 1
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 4
51881: NEG
51882: PUSH
51883: LD_INT 2
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 2
51893: NEG
51894: PUSH
51895: LD_INT 2
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 4
51904: NEG
51905: PUSH
51906: LD_INT 4
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 4
51916: NEG
51917: PUSH
51918: LD_INT 5
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 3
51928: NEG
51929: PUSH
51930: LD_INT 4
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 3
51940: NEG
51941: PUSH
51942: LD_INT 3
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 4
51952: NEG
51953: PUSH
51954: LD_INT 3
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 5
51964: NEG
51965: PUSH
51966: LD_INT 4
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 5
51976: NEG
51977: PUSH
51978: LD_INT 5
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 3
51988: NEG
51989: PUSH
51990: LD_INT 5
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 5
52000: NEG
52001: PUSH
52002: LD_INT 3
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: LD_INT 3
52015: NEG
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: LD_INT 4
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: LD_INT 3
52037: NEG
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 1
52045: PUSH
52046: LD_INT 2
52048: NEG
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 0
52056: PUSH
52057: LD_INT 2
52059: NEG
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: NEG
52068: PUSH
52069: LD_INT 3
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 1
52079: NEG
52080: PUSH
52081: LD_INT 4
52083: NEG
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 2
52091: PUSH
52092: LD_INT 2
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 2
52102: NEG
52103: PUSH
52104: LD_INT 4
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 4
52114: PUSH
52115: LD_INT 0
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 4
52124: PUSH
52125: LD_INT 1
52127: NEG
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 5
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 5
52145: PUSH
52146: LD_INT 1
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 4
52155: PUSH
52156: LD_INT 1
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 3
52165: PUSH
52166: LD_INT 0
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 3
52175: PUSH
52176: LD_INT 1
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 3
52186: PUSH
52187: LD_INT 2
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 5
52197: PUSH
52198: LD_INT 2
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52252: LD_ADDR_VAR 0 32
52256: PUSH
52257: LD_INT 4
52259: NEG
52260: PUSH
52261: LD_INT 0
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 4
52270: NEG
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 3
52282: NEG
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 3
52293: NEG
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 4
52304: NEG
52305: PUSH
52306: LD_INT 1
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 5
52315: NEG
52316: PUSH
52317: LD_INT 0
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 5
52326: NEG
52327: PUSH
52328: LD_INT 1
52330: NEG
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 5
52338: NEG
52339: PUSH
52340: LD_INT 2
52342: NEG
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 3
52350: NEG
52351: PUSH
52352: LD_INT 2
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 3
52361: NEG
52362: PUSH
52363: LD_INT 3
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 3
52373: NEG
52374: PUSH
52375: LD_INT 4
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 2
52385: NEG
52386: PUSH
52387: LD_INT 3
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 2
52397: NEG
52398: PUSH
52399: LD_INT 2
52401: NEG
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 3
52409: NEG
52410: PUSH
52411: LD_INT 2
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 4
52421: NEG
52422: PUSH
52423: LD_INT 3
52425: NEG
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 4
52433: NEG
52434: PUSH
52435: LD_INT 4
52437: NEG
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 2
52445: NEG
52446: PUSH
52447: LD_INT 4
52449: NEG
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 4
52457: NEG
52458: PUSH
52459: LD_INT 2
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 0
52469: PUSH
52470: LD_INT 4
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: LD_INT 5
52483: NEG
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 1
52491: PUSH
52492: LD_INT 4
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: LD_INT 3
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: LD_INT 3
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: LD_INT 4
52528: NEG
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 1
52536: NEG
52537: PUSH
52538: LD_INT 5
52540: NEG
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 2
52548: PUSH
52549: LD_INT 3
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 2
52559: NEG
52560: PUSH
52561: LD_INT 5
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 3
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 3
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 4
52592: PUSH
52593: LD_INT 0
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 4
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 3
52612: PUSH
52613: LD_INT 1
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 2
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 2
52632: PUSH
52633: LD_INT 1
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 2
52643: PUSH
52644: LD_INT 2
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 4
52654: PUSH
52655: LD_INT 2
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 4
52664: PUSH
52665: LD_INT 4
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 4
52674: PUSH
52675: LD_INT 3
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 5
52684: PUSH
52685: LD_INT 4
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 5
52694: PUSH
52695: LD_INT 5
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 4
52704: PUSH
52705: LD_INT 5
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 3
52714: PUSH
52715: LD_INT 4
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 3
52724: PUSH
52725: LD_INT 3
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 5
52734: PUSH
52735: LD_INT 3
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 3
52744: PUSH
52745: LD_INT 5
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52799: LD_ADDR_VAR 0 33
52803: PUSH
52804: LD_INT 4
52806: NEG
52807: PUSH
52808: LD_INT 4
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 4
52818: NEG
52819: PUSH
52820: LD_INT 5
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 3
52830: NEG
52831: PUSH
52832: LD_INT 4
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 3
52842: NEG
52843: PUSH
52844: LD_INT 3
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 4
52854: NEG
52855: PUSH
52856: LD_INT 3
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 5
52866: NEG
52867: PUSH
52868: LD_INT 4
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 5
52878: NEG
52879: PUSH
52880: LD_INT 5
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 3
52890: NEG
52891: PUSH
52892: LD_INT 5
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 5
52902: NEG
52903: PUSH
52904: LD_INT 3
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 0
52914: PUSH
52915: LD_INT 3
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: LD_INT 4
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: LD_INT 3
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: PUSH
52948: LD_INT 2
52950: NEG
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: LD_INT 2
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: NEG
52970: PUSH
52971: LD_INT 3
52973: NEG
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: NEG
52982: PUSH
52983: LD_INT 4
52985: NEG
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 2
52993: PUSH
52994: LD_INT 2
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 2
53004: NEG
53005: PUSH
53006: LD_INT 4
53008: NEG
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 4
53016: PUSH
53017: LD_INT 0
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 4
53026: PUSH
53027: LD_INT 1
53029: NEG
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 5
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 5
53047: PUSH
53048: LD_INT 1
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 4
53057: PUSH
53058: LD_INT 1
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 3
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 3
53077: PUSH
53078: LD_INT 1
53080: NEG
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 3
53088: PUSH
53089: LD_INT 2
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 5
53099: PUSH
53100: LD_INT 2
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 3
53109: PUSH
53110: LD_INT 3
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 3
53119: PUSH
53120: LD_INT 2
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 4
53129: PUSH
53130: LD_INT 3
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 4
53139: PUSH
53140: LD_INT 4
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 3
53149: PUSH
53150: LD_INT 4
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 2
53159: PUSH
53160: LD_INT 3
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 2
53169: PUSH
53170: LD_INT 2
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 4
53179: PUSH
53180: LD_INT 2
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 2
53189: PUSH
53190: LD_INT 4
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: LD_INT 4
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: LD_INT 3
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: LD_INT 4
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: LD_INT 5
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: LD_INT 5
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: LD_INT 4
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 1
53260: NEG
53261: PUSH
53262: LD_INT 3
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 2
53271: PUSH
53272: LD_INT 5
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 2
53281: NEG
53282: PUSH
53283: LD_INT 3
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53337: LD_ADDR_VAR 0 34
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: LD_INT 4
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: LD_INT 5
53358: NEG
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: LD_INT 4
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 1
53377: PUSH
53378: LD_INT 3
53380: NEG
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 0
53388: PUSH
53389: LD_INT 3
53391: NEG
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 1
53399: NEG
53400: PUSH
53401: LD_INT 4
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: NEG
53412: PUSH
53413: LD_INT 5
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 2
53423: PUSH
53424: LD_INT 3
53426: NEG
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 2
53434: NEG
53435: PUSH
53436: LD_INT 5
53438: NEG
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 3
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 3
53456: PUSH
53457: LD_INT 1
53459: NEG
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 4
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 4
53477: PUSH
53478: LD_INT 1
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 3
53487: PUSH
53488: LD_INT 1
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 2
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 2
53507: PUSH
53508: LD_INT 1
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 2
53518: PUSH
53519: LD_INT 2
53521: NEG
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 4
53529: PUSH
53530: LD_INT 2
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 4
53539: PUSH
53540: LD_INT 4
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 4
53549: PUSH
53550: LD_INT 3
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 5
53559: PUSH
53560: LD_INT 4
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 5
53569: PUSH
53570: LD_INT 5
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 4
53579: PUSH
53580: LD_INT 5
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 3
53589: PUSH
53590: LD_INT 4
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 3
53599: PUSH
53600: LD_INT 3
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 5
53609: PUSH
53610: LD_INT 3
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 3
53619: PUSH
53620: LD_INT 5
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 0
53629: PUSH
53630: LD_INT 3
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 0
53639: PUSH
53640: LD_INT 2
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 1
53649: PUSH
53650: LD_INT 3
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 1
53659: PUSH
53660: LD_INT 4
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: LD_INT 4
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: LD_INT 3
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 1
53690: NEG
53691: PUSH
53692: LD_INT 2
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 2
53701: PUSH
53702: LD_INT 4
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 2
53711: NEG
53712: PUSH
53713: LD_INT 2
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 4
53722: NEG
53723: PUSH
53724: LD_INT 0
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 4
53733: NEG
53734: PUSH
53735: LD_INT 1
53737: NEG
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 3
53745: NEG
53746: PUSH
53747: LD_INT 0
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 3
53756: NEG
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 4
53767: NEG
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 5
53778: NEG
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 5
53789: NEG
53790: PUSH
53791: LD_INT 1
53793: NEG
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 5
53801: NEG
53802: PUSH
53803: LD_INT 2
53805: NEG
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 3
53813: NEG
53814: PUSH
53815: LD_INT 2
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: ST_TO_ADDR
// end ; end ;
53869: GO 53872
53871: POP
// case btype of b_depot , b_warehouse :
53872: LD_VAR 0 1
53876: PUSH
53877: LD_INT 0
53879: DOUBLE
53880: EQUAL
53881: IFTRUE 53891
53883: LD_INT 1
53885: DOUBLE
53886: EQUAL
53887: IFTRUE 53891
53889: GO 54092
53891: POP
// case nation of nation_american :
53892: LD_VAR 0 5
53896: PUSH
53897: LD_INT 1
53899: DOUBLE
53900: EQUAL
53901: IFTRUE 53905
53903: GO 53961
53905: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53906: LD_ADDR_VAR 0 9
53910: PUSH
53911: LD_VAR 0 11
53915: PUSH
53916: LD_VAR 0 12
53920: PUSH
53921: LD_VAR 0 13
53925: PUSH
53926: LD_VAR 0 14
53930: PUSH
53931: LD_VAR 0 15
53935: PUSH
53936: LD_VAR 0 16
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: PUSH
53949: LD_VAR 0 4
53953: PUSH
53954: LD_INT 1
53956: PLUS
53957: ARRAY
53958: ST_TO_ADDR
53959: GO 54090
53961: LD_INT 2
53963: DOUBLE
53964: EQUAL
53965: IFTRUE 53969
53967: GO 54025
53969: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53970: LD_ADDR_VAR 0 9
53974: PUSH
53975: LD_VAR 0 17
53979: PUSH
53980: LD_VAR 0 18
53984: PUSH
53985: LD_VAR 0 19
53989: PUSH
53990: LD_VAR 0 20
53994: PUSH
53995: LD_VAR 0 21
53999: PUSH
54000: LD_VAR 0 22
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: PUSH
54013: LD_VAR 0 4
54017: PUSH
54018: LD_INT 1
54020: PLUS
54021: ARRAY
54022: ST_TO_ADDR
54023: GO 54090
54025: LD_INT 3
54027: DOUBLE
54028: EQUAL
54029: IFTRUE 54033
54031: GO 54089
54033: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54034: LD_ADDR_VAR 0 9
54038: PUSH
54039: LD_VAR 0 23
54043: PUSH
54044: LD_VAR 0 24
54048: PUSH
54049: LD_VAR 0 25
54053: PUSH
54054: LD_VAR 0 26
54058: PUSH
54059: LD_VAR 0 27
54063: PUSH
54064: LD_VAR 0 28
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: PUSH
54077: LD_VAR 0 4
54081: PUSH
54082: LD_INT 1
54084: PLUS
54085: ARRAY
54086: ST_TO_ADDR
54087: GO 54090
54089: POP
54090: GO 54645
54092: LD_INT 2
54094: DOUBLE
54095: EQUAL
54096: IFTRUE 54106
54098: LD_INT 3
54100: DOUBLE
54101: EQUAL
54102: IFTRUE 54106
54104: GO 54162
54106: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54107: LD_ADDR_VAR 0 9
54111: PUSH
54112: LD_VAR 0 29
54116: PUSH
54117: LD_VAR 0 30
54121: PUSH
54122: LD_VAR 0 31
54126: PUSH
54127: LD_VAR 0 32
54131: PUSH
54132: LD_VAR 0 33
54136: PUSH
54137: LD_VAR 0 34
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: PUSH
54150: LD_VAR 0 4
54154: PUSH
54155: LD_INT 1
54157: PLUS
54158: ARRAY
54159: ST_TO_ADDR
54160: GO 54645
54162: LD_INT 16
54164: DOUBLE
54165: EQUAL
54166: IFTRUE 54224
54168: LD_INT 17
54170: DOUBLE
54171: EQUAL
54172: IFTRUE 54224
54174: LD_INT 18
54176: DOUBLE
54177: EQUAL
54178: IFTRUE 54224
54180: LD_INT 19
54182: DOUBLE
54183: EQUAL
54184: IFTRUE 54224
54186: LD_INT 22
54188: DOUBLE
54189: EQUAL
54190: IFTRUE 54224
54192: LD_INT 20
54194: DOUBLE
54195: EQUAL
54196: IFTRUE 54224
54198: LD_INT 21
54200: DOUBLE
54201: EQUAL
54202: IFTRUE 54224
54204: LD_INT 23
54206: DOUBLE
54207: EQUAL
54208: IFTRUE 54224
54210: LD_INT 24
54212: DOUBLE
54213: EQUAL
54214: IFTRUE 54224
54216: LD_INT 25
54218: DOUBLE
54219: EQUAL
54220: IFTRUE 54224
54222: GO 54280
54224: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54225: LD_ADDR_VAR 0 9
54229: PUSH
54230: LD_VAR 0 35
54234: PUSH
54235: LD_VAR 0 36
54239: PUSH
54240: LD_VAR 0 37
54244: PUSH
54245: LD_VAR 0 38
54249: PUSH
54250: LD_VAR 0 39
54254: PUSH
54255: LD_VAR 0 40
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: PUSH
54268: LD_VAR 0 4
54272: PUSH
54273: LD_INT 1
54275: PLUS
54276: ARRAY
54277: ST_TO_ADDR
54278: GO 54645
54280: LD_INT 6
54282: DOUBLE
54283: EQUAL
54284: IFTRUE 54336
54286: LD_INT 7
54288: DOUBLE
54289: EQUAL
54290: IFTRUE 54336
54292: LD_INT 8
54294: DOUBLE
54295: EQUAL
54296: IFTRUE 54336
54298: LD_INT 13
54300: DOUBLE
54301: EQUAL
54302: IFTRUE 54336
54304: LD_INT 12
54306: DOUBLE
54307: EQUAL
54308: IFTRUE 54336
54310: LD_INT 15
54312: DOUBLE
54313: EQUAL
54314: IFTRUE 54336
54316: LD_INT 11
54318: DOUBLE
54319: EQUAL
54320: IFTRUE 54336
54322: LD_INT 14
54324: DOUBLE
54325: EQUAL
54326: IFTRUE 54336
54328: LD_INT 10
54330: DOUBLE
54331: EQUAL
54332: IFTRUE 54336
54334: GO 54392
54336: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54337: LD_ADDR_VAR 0 9
54341: PUSH
54342: LD_VAR 0 41
54346: PUSH
54347: LD_VAR 0 42
54351: PUSH
54352: LD_VAR 0 43
54356: PUSH
54357: LD_VAR 0 44
54361: PUSH
54362: LD_VAR 0 45
54366: PUSH
54367: LD_VAR 0 46
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: PUSH
54380: LD_VAR 0 4
54384: PUSH
54385: LD_INT 1
54387: PLUS
54388: ARRAY
54389: ST_TO_ADDR
54390: GO 54645
54392: LD_INT 36
54394: DOUBLE
54395: EQUAL
54396: IFTRUE 54400
54398: GO 54456
54400: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54401: LD_ADDR_VAR 0 9
54405: PUSH
54406: LD_VAR 0 47
54410: PUSH
54411: LD_VAR 0 48
54415: PUSH
54416: LD_VAR 0 49
54420: PUSH
54421: LD_VAR 0 50
54425: PUSH
54426: LD_VAR 0 51
54430: PUSH
54431: LD_VAR 0 52
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: PUSH
54444: LD_VAR 0 4
54448: PUSH
54449: LD_INT 1
54451: PLUS
54452: ARRAY
54453: ST_TO_ADDR
54454: GO 54645
54456: LD_INT 4
54458: DOUBLE
54459: EQUAL
54460: IFTRUE 54482
54462: LD_INT 5
54464: DOUBLE
54465: EQUAL
54466: IFTRUE 54482
54468: LD_INT 34
54470: DOUBLE
54471: EQUAL
54472: IFTRUE 54482
54474: LD_INT 37
54476: DOUBLE
54477: EQUAL
54478: IFTRUE 54482
54480: GO 54538
54482: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54483: LD_ADDR_VAR 0 9
54487: PUSH
54488: LD_VAR 0 53
54492: PUSH
54493: LD_VAR 0 54
54497: PUSH
54498: LD_VAR 0 55
54502: PUSH
54503: LD_VAR 0 56
54507: PUSH
54508: LD_VAR 0 57
54512: PUSH
54513: LD_VAR 0 58
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: PUSH
54526: LD_VAR 0 4
54530: PUSH
54531: LD_INT 1
54533: PLUS
54534: ARRAY
54535: ST_TO_ADDR
54536: GO 54645
54538: LD_INT 31
54540: DOUBLE
54541: EQUAL
54542: IFTRUE 54588
54544: LD_INT 32
54546: DOUBLE
54547: EQUAL
54548: IFTRUE 54588
54550: LD_INT 33
54552: DOUBLE
54553: EQUAL
54554: IFTRUE 54588
54556: LD_INT 27
54558: DOUBLE
54559: EQUAL
54560: IFTRUE 54588
54562: LD_INT 26
54564: DOUBLE
54565: EQUAL
54566: IFTRUE 54588
54568: LD_INT 28
54570: DOUBLE
54571: EQUAL
54572: IFTRUE 54588
54574: LD_INT 29
54576: DOUBLE
54577: EQUAL
54578: IFTRUE 54588
54580: LD_INT 30
54582: DOUBLE
54583: EQUAL
54584: IFTRUE 54588
54586: GO 54644
54588: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54589: LD_ADDR_VAR 0 9
54593: PUSH
54594: LD_VAR 0 59
54598: PUSH
54599: LD_VAR 0 60
54603: PUSH
54604: LD_VAR 0 61
54608: PUSH
54609: LD_VAR 0 62
54613: PUSH
54614: LD_VAR 0 63
54618: PUSH
54619: LD_VAR 0 64
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: PUSH
54632: LD_VAR 0 4
54636: PUSH
54637: LD_INT 1
54639: PLUS
54640: ARRAY
54641: ST_TO_ADDR
54642: GO 54645
54644: POP
// temp_list2 = [ ] ;
54645: LD_ADDR_VAR 0 10
54649: PUSH
54650: EMPTY
54651: ST_TO_ADDR
// for i in temp_list do
54652: LD_ADDR_VAR 0 8
54656: PUSH
54657: LD_VAR 0 9
54661: PUSH
54662: FOR_IN
54663: IFFALSE 54715
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54665: LD_ADDR_VAR 0 10
54669: PUSH
54670: LD_VAR 0 10
54674: PUSH
54675: LD_VAR 0 8
54679: PUSH
54680: LD_INT 1
54682: ARRAY
54683: PUSH
54684: LD_VAR 0 2
54688: PLUS
54689: PUSH
54690: LD_VAR 0 8
54694: PUSH
54695: LD_INT 2
54697: ARRAY
54698: PUSH
54699: LD_VAR 0 3
54703: PLUS
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: EMPTY
54710: LIST
54711: ADD
54712: ST_TO_ADDR
54713: GO 54662
54715: POP
54716: POP
// result = temp_list2 ;
54717: LD_ADDR_VAR 0 7
54721: PUSH
54722: LD_VAR 0 10
54726: ST_TO_ADDR
// end ;
54727: LD_VAR 0 7
54731: RET
// export function EnemyInRange ( unit , dist ) ; begin
54732: LD_INT 0
54734: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54735: LD_ADDR_VAR 0 3
54739: PUSH
54740: LD_VAR 0 1
54744: PPUSH
54745: CALL_OW 255
54749: PPUSH
54750: LD_VAR 0 1
54754: PPUSH
54755: CALL_OW 250
54759: PPUSH
54760: LD_VAR 0 1
54764: PPUSH
54765: CALL_OW 251
54769: PPUSH
54770: LD_VAR 0 2
54774: PPUSH
54775: CALL 28134 0 4
54779: PUSH
54780: LD_INT 4
54782: ARRAY
54783: ST_TO_ADDR
// end ;
54784: LD_VAR 0 3
54788: RET
// export function PlayerSeeMe ( unit ) ; begin
54789: LD_INT 0
54791: PPUSH
// result := See ( your_side , unit ) ;
54792: LD_ADDR_VAR 0 2
54796: PUSH
54797: LD_OWVAR 2
54801: PPUSH
54802: LD_VAR 0 1
54806: PPUSH
54807: CALL_OW 292
54811: ST_TO_ADDR
// end ;
54812: LD_VAR 0 2
54816: RET
// export function ReverseDir ( unit ) ; begin
54817: LD_INT 0
54819: PPUSH
// if not unit then
54820: LD_VAR 0 1
54824: NOT
54825: IFFALSE 54829
// exit ;
54827: GO 54852
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54829: LD_ADDR_VAR 0 2
54833: PUSH
54834: LD_VAR 0 1
54838: PPUSH
54839: CALL_OW 254
54843: PUSH
54844: LD_INT 3
54846: PLUS
54847: PUSH
54848: LD_INT 6
54850: MOD
54851: ST_TO_ADDR
// end ;
54852: LD_VAR 0 2
54856: RET
// export function ReverseArray ( array ) ; var i ; begin
54857: LD_INT 0
54859: PPUSH
54860: PPUSH
// if not array then
54861: LD_VAR 0 1
54865: NOT
54866: IFFALSE 54870
// exit ;
54868: GO 54925
// result := [ ] ;
54870: LD_ADDR_VAR 0 2
54874: PUSH
54875: EMPTY
54876: ST_TO_ADDR
// for i := array downto 1 do
54877: LD_ADDR_VAR 0 3
54881: PUSH
54882: DOUBLE
54883: LD_VAR 0 1
54887: INC
54888: ST_TO_ADDR
54889: LD_INT 1
54891: PUSH
54892: FOR_DOWNTO
54893: IFFALSE 54923
// result := Join ( result , array [ i ] ) ;
54895: LD_ADDR_VAR 0 2
54899: PUSH
54900: LD_VAR 0 2
54904: PPUSH
54905: LD_VAR 0 1
54909: PUSH
54910: LD_VAR 0 3
54914: ARRAY
54915: PPUSH
54916: CALL 59569 0 2
54920: ST_TO_ADDR
54921: GO 54892
54923: POP
54924: POP
// end ;
54925: LD_VAR 0 2
54929: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
54930: LD_INT 0
54932: PPUSH
54933: PPUSH
54934: PPUSH
54935: PPUSH
54936: PPUSH
54937: PPUSH
// if not unit or not hexes then
54938: LD_VAR 0 1
54942: NOT
54943: PUSH
54944: LD_VAR 0 2
54948: NOT
54949: OR
54950: IFFALSE 54954
// exit ;
54952: GO 55077
// dist := 9999 ;
54954: LD_ADDR_VAR 0 5
54958: PUSH
54959: LD_INT 9999
54961: ST_TO_ADDR
// for i = 1 to hexes do
54962: LD_ADDR_VAR 0 4
54966: PUSH
54967: DOUBLE
54968: LD_INT 1
54970: DEC
54971: ST_TO_ADDR
54972: LD_VAR 0 2
54976: PUSH
54977: FOR_TO
54978: IFFALSE 55065
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54980: LD_ADDR_VAR 0 6
54984: PUSH
54985: LD_VAR 0 1
54989: PPUSH
54990: LD_VAR 0 2
54994: PUSH
54995: LD_VAR 0 4
54999: ARRAY
55000: PUSH
55001: LD_INT 1
55003: ARRAY
55004: PPUSH
55005: LD_VAR 0 2
55009: PUSH
55010: LD_VAR 0 4
55014: ARRAY
55015: PUSH
55016: LD_INT 2
55018: ARRAY
55019: PPUSH
55020: CALL_OW 297
55024: ST_TO_ADDR
// if tdist < dist then
55025: LD_VAR 0 6
55029: PUSH
55030: LD_VAR 0 5
55034: LESS
55035: IFFALSE 55063
// begin hex := hexes [ i ] ;
55037: LD_ADDR_VAR 0 8
55041: PUSH
55042: LD_VAR 0 2
55046: PUSH
55047: LD_VAR 0 4
55051: ARRAY
55052: ST_TO_ADDR
// dist := tdist ;
55053: LD_ADDR_VAR 0 5
55057: PUSH
55058: LD_VAR 0 6
55062: ST_TO_ADDR
// end ; end ;
55063: GO 54977
55065: POP
55066: POP
// result := hex ;
55067: LD_ADDR_VAR 0 3
55071: PUSH
55072: LD_VAR 0 8
55076: ST_TO_ADDR
// end ;
55077: LD_VAR 0 3
55081: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55082: LD_INT 0
55084: PPUSH
55085: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55086: LD_VAR 0 1
55090: NOT
55091: PUSH
55092: LD_VAR 0 1
55096: PUSH
55097: LD_INT 21
55099: PUSH
55100: LD_INT 2
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 23
55109: PUSH
55110: LD_INT 2
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PPUSH
55121: CALL_OW 69
55125: IN
55126: NOT
55127: OR
55128: IFFALSE 55132
// exit ;
55130: GO 55179
// for i = 1 to 3 do
55132: LD_ADDR_VAR 0 3
55136: PUSH
55137: DOUBLE
55138: LD_INT 1
55140: DEC
55141: ST_TO_ADDR
55142: LD_INT 3
55144: PUSH
55145: FOR_TO
55146: IFFALSE 55177
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55148: LD_VAR 0 1
55152: PPUSH
55153: CALL_OW 250
55157: PPUSH
55158: LD_VAR 0 1
55162: PPUSH
55163: CALL_OW 251
55167: PPUSH
55168: LD_INT 1
55170: PPUSH
55171: CALL_OW 453
55175: GO 55145
55177: POP
55178: POP
// end ;
55179: LD_VAR 0 2
55183: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55184: LD_INT 0
55186: PPUSH
55187: PPUSH
55188: PPUSH
55189: PPUSH
55190: PPUSH
55191: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55192: LD_VAR 0 1
55196: NOT
55197: PUSH
55198: LD_VAR 0 2
55202: NOT
55203: OR
55204: PUSH
55205: LD_VAR 0 1
55209: PPUSH
55210: CALL_OW 314
55214: OR
55215: IFFALSE 55219
// exit ;
55217: GO 55686
// if GetLives ( i ) < 250 then
55219: LD_VAR 0 4
55223: PPUSH
55224: CALL_OW 256
55228: PUSH
55229: LD_INT 250
55231: LESS
55232: IFFALSE 55245
// begin ComAutodestruct ( i ) ;
55234: LD_VAR 0 4
55238: PPUSH
55239: CALL 55082 0 1
// exit ;
55243: GO 55686
// end ; x := GetX ( enemy_unit ) ;
55245: LD_ADDR_VAR 0 7
55249: PUSH
55250: LD_VAR 0 2
55254: PPUSH
55255: CALL_OW 250
55259: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55260: LD_ADDR_VAR 0 8
55264: PUSH
55265: LD_VAR 0 2
55269: PPUSH
55270: CALL_OW 251
55274: ST_TO_ADDR
// if not x or not y then
55275: LD_VAR 0 7
55279: NOT
55280: PUSH
55281: LD_VAR 0 8
55285: NOT
55286: OR
55287: IFFALSE 55291
// exit ;
55289: GO 55686
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55291: LD_ADDR_VAR 0 6
55295: PUSH
55296: LD_VAR 0 7
55300: PPUSH
55301: LD_INT 0
55303: PPUSH
55304: LD_INT 4
55306: PPUSH
55307: CALL_OW 272
55311: PUSH
55312: LD_VAR 0 8
55316: PPUSH
55317: LD_INT 0
55319: PPUSH
55320: LD_INT 4
55322: PPUSH
55323: CALL_OW 273
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_VAR 0 7
55336: PPUSH
55337: LD_INT 1
55339: PPUSH
55340: LD_INT 4
55342: PPUSH
55343: CALL_OW 272
55347: PUSH
55348: LD_VAR 0 8
55352: PPUSH
55353: LD_INT 1
55355: PPUSH
55356: LD_INT 4
55358: PPUSH
55359: CALL_OW 273
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_VAR 0 7
55372: PPUSH
55373: LD_INT 2
55375: PPUSH
55376: LD_INT 4
55378: PPUSH
55379: CALL_OW 272
55383: PUSH
55384: LD_VAR 0 8
55388: PPUSH
55389: LD_INT 2
55391: PPUSH
55392: LD_INT 4
55394: PPUSH
55395: CALL_OW 273
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_VAR 0 7
55408: PPUSH
55409: LD_INT 3
55411: PPUSH
55412: LD_INT 4
55414: PPUSH
55415: CALL_OW 272
55419: PUSH
55420: LD_VAR 0 8
55424: PPUSH
55425: LD_INT 3
55427: PPUSH
55428: LD_INT 4
55430: PPUSH
55431: CALL_OW 273
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_VAR 0 7
55444: PPUSH
55445: LD_INT 4
55447: PPUSH
55448: LD_INT 4
55450: PPUSH
55451: CALL_OW 272
55455: PUSH
55456: LD_VAR 0 8
55460: PPUSH
55461: LD_INT 4
55463: PPUSH
55464: LD_INT 4
55466: PPUSH
55467: CALL_OW 273
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_VAR 0 7
55480: PPUSH
55481: LD_INT 5
55483: PPUSH
55484: LD_INT 4
55486: PPUSH
55487: CALL_OW 272
55491: PUSH
55492: LD_VAR 0 8
55496: PPUSH
55497: LD_INT 5
55499: PPUSH
55500: LD_INT 4
55502: PPUSH
55503: CALL_OW 273
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: ST_TO_ADDR
// for i = tmp downto 1 do
55520: LD_ADDR_VAR 0 4
55524: PUSH
55525: DOUBLE
55526: LD_VAR 0 6
55530: INC
55531: ST_TO_ADDR
55532: LD_INT 1
55534: PUSH
55535: FOR_DOWNTO
55536: IFFALSE 55637
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55538: LD_VAR 0 6
55542: PUSH
55543: LD_VAR 0 4
55547: ARRAY
55548: PUSH
55549: LD_INT 1
55551: ARRAY
55552: PPUSH
55553: LD_VAR 0 6
55557: PUSH
55558: LD_VAR 0 4
55562: ARRAY
55563: PUSH
55564: LD_INT 2
55566: ARRAY
55567: PPUSH
55568: CALL_OW 488
55572: NOT
55573: PUSH
55574: LD_VAR 0 6
55578: PUSH
55579: LD_VAR 0 4
55583: ARRAY
55584: PUSH
55585: LD_INT 1
55587: ARRAY
55588: PPUSH
55589: LD_VAR 0 6
55593: PUSH
55594: LD_VAR 0 4
55598: ARRAY
55599: PUSH
55600: LD_INT 2
55602: ARRAY
55603: PPUSH
55604: CALL_OW 428
55608: PUSH
55609: LD_INT 0
55611: NONEQUAL
55612: OR
55613: IFFALSE 55635
// tmp := Delete ( tmp , i ) ;
55615: LD_ADDR_VAR 0 6
55619: PUSH
55620: LD_VAR 0 6
55624: PPUSH
55625: LD_VAR 0 4
55629: PPUSH
55630: CALL_OW 3
55634: ST_TO_ADDR
55635: GO 55535
55637: POP
55638: POP
// j := GetClosestHex ( unit , tmp ) ;
55639: LD_ADDR_VAR 0 5
55643: PUSH
55644: LD_VAR 0 1
55648: PPUSH
55649: LD_VAR 0 6
55653: PPUSH
55654: CALL 54930 0 2
55658: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55659: LD_VAR 0 1
55663: PPUSH
55664: LD_VAR 0 5
55668: PUSH
55669: LD_INT 1
55671: ARRAY
55672: PPUSH
55673: LD_VAR 0 5
55677: PUSH
55678: LD_INT 2
55680: ARRAY
55681: PPUSH
55682: CALL_OW 111
// end ;
55686: LD_VAR 0 3
55690: RET
// export function PrepareApemanSoldier ( ) ; begin
55691: LD_INT 0
55693: PPUSH
// uc_nation := 0 ;
55694: LD_ADDR_OWVAR 21
55698: PUSH
55699: LD_INT 0
55701: ST_TO_ADDR
// hc_sex := sex_male ;
55702: LD_ADDR_OWVAR 27
55706: PUSH
55707: LD_INT 1
55709: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
55710: LD_ADDR_OWVAR 28
55714: PUSH
55715: LD_INT 15
55717: ST_TO_ADDR
// hc_gallery :=  ;
55718: LD_ADDR_OWVAR 33
55722: PUSH
55723: LD_STRING 
55725: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55726: LD_ADDR_OWVAR 31
55730: PUSH
55731: LD_INT 0
55733: PPUSH
55734: LD_INT 3
55736: PPUSH
55737: CALL_OW 12
55741: PUSH
55742: LD_INT 0
55744: PPUSH
55745: LD_INT 3
55747: PPUSH
55748: CALL_OW 12
55752: PUSH
55753: LD_INT 0
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: ST_TO_ADDR
// end ;
55765: LD_VAR 0 1
55769: RET
// export function PrepareApemanEngineer ( ) ; begin
55770: LD_INT 0
55772: PPUSH
// uc_nation := 0 ;
55773: LD_ADDR_OWVAR 21
55777: PUSH
55778: LD_INT 0
55780: ST_TO_ADDR
// hc_sex := sex_male ;
55781: LD_ADDR_OWVAR 27
55785: PUSH
55786: LD_INT 1
55788: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
55789: LD_ADDR_OWVAR 28
55793: PUSH
55794: LD_INT 16
55796: ST_TO_ADDR
// hc_gallery :=  ;
55797: LD_ADDR_OWVAR 33
55801: PUSH
55802: LD_STRING 
55804: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55805: LD_ADDR_OWVAR 31
55809: PUSH
55810: LD_INT 0
55812: PPUSH
55813: LD_INT 3
55815: PPUSH
55816: CALL_OW 12
55820: PUSH
55821: LD_INT 0
55823: PPUSH
55824: LD_INT 3
55826: PPUSH
55827: CALL_OW 12
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: ST_TO_ADDR
// end ;
55844: LD_VAR 0 1
55848: RET
// export function PrepareApeman ( agressivity ) ; begin
55849: LD_INT 0
55851: PPUSH
// uc_side := 0 ;
55852: LD_ADDR_OWVAR 20
55856: PUSH
55857: LD_INT 0
55859: ST_TO_ADDR
// uc_nation := 0 ;
55860: LD_ADDR_OWVAR 21
55864: PUSH
55865: LD_INT 0
55867: ST_TO_ADDR
// hc_sex := sex_male ;
55868: LD_ADDR_OWVAR 27
55872: PUSH
55873: LD_INT 1
55875: ST_TO_ADDR
// hc_class := class_apeman ;
55876: LD_ADDR_OWVAR 28
55880: PUSH
55881: LD_INT 12
55883: ST_TO_ADDR
// hc_gallery :=  ;
55884: LD_ADDR_OWVAR 33
55888: PUSH
55889: LD_STRING 
55891: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55892: LD_ADDR_OWVAR 35
55896: PUSH
55897: LD_VAR 0 1
55901: NEG
55902: PPUSH
55903: LD_VAR 0 1
55907: PPUSH
55908: CALL_OW 12
55912: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
55913: LD_ADDR_OWVAR 31
55917: PUSH
55918: LD_INT 0
55920: PPUSH
55921: LD_INT 3
55923: PPUSH
55924: CALL_OW 12
55928: PUSH
55929: LD_INT 0
55931: PPUSH
55932: LD_INT 3
55934: PPUSH
55935: CALL_OW 12
55939: PUSH
55940: LD_INT 0
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: ST_TO_ADDR
// end ;
55952: LD_VAR 0 2
55956: RET
// export function PrepareTiger ( agressivity ) ; begin
55957: LD_INT 0
55959: PPUSH
// uc_side := 0 ;
55960: LD_ADDR_OWVAR 20
55964: PUSH
55965: LD_INT 0
55967: ST_TO_ADDR
// uc_nation := 0 ;
55968: LD_ADDR_OWVAR 21
55972: PUSH
55973: LD_INT 0
55975: ST_TO_ADDR
// hc_class := class_tiger ;
55976: LD_ADDR_OWVAR 28
55980: PUSH
55981: LD_INT 14
55983: ST_TO_ADDR
// hc_gallery :=  ;
55984: LD_ADDR_OWVAR 33
55988: PUSH
55989: LD_STRING 
55991: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
55992: LD_ADDR_OWVAR 35
55996: PUSH
55997: LD_VAR 0 1
56001: NEG
56002: PPUSH
56003: LD_VAR 0 1
56007: PPUSH
56008: CALL_OW 12
56012: ST_TO_ADDR
// end ;
56013: LD_VAR 0 2
56017: RET
// export function PrepareEnchidna ( ) ; begin
56018: LD_INT 0
56020: PPUSH
// uc_side := 0 ;
56021: LD_ADDR_OWVAR 20
56025: PUSH
56026: LD_INT 0
56028: ST_TO_ADDR
// uc_nation := 0 ;
56029: LD_ADDR_OWVAR 21
56033: PUSH
56034: LD_INT 0
56036: ST_TO_ADDR
// hc_class := class_baggie ;
56037: LD_ADDR_OWVAR 28
56041: PUSH
56042: LD_INT 13
56044: ST_TO_ADDR
// hc_gallery :=  ;
56045: LD_ADDR_OWVAR 33
56049: PUSH
56050: LD_STRING 
56052: ST_TO_ADDR
// end ;
56053: LD_VAR 0 1
56057: RET
// export function PrepareFrog ( ) ; begin
56058: LD_INT 0
56060: PPUSH
// uc_side := 0 ;
56061: LD_ADDR_OWVAR 20
56065: PUSH
56066: LD_INT 0
56068: ST_TO_ADDR
// uc_nation := 0 ;
56069: LD_ADDR_OWVAR 21
56073: PUSH
56074: LD_INT 0
56076: ST_TO_ADDR
// hc_class := class_frog ;
56077: LD_ADDR_OWVAR 28
56081: PUSH
56082: LD_INT 19
56084: ST_TO_ADDR
// hc_gallery :=  ;
56085: LD_ADDR_OWVAR 33
56089: PUSH
56090: LD_STRING 
56092: ST_TO_ADDR
// end ;
56093: LD_VAR 0 1
56097: RET
// export function PrepareFish ( ) ; begin
56098: LD_INT 0
56100: PPUSH
// uc_side := 0 ;
56101: LD_ADDR_OWVAR 20
56105: PUSH
56106: LD_INT 0
56108: ST_TO_ADDR
// uc_nation := 0 ;
56109: LD_ADDR_OWVAR 21
56113: PUSH
56114: LD_INT 0
56116: ST_TO_ADDR
// hc_class := class_fish ;
56117: LD_ADDR_OWVAR 28
56121: PUSH
56122: LD_INT 20
56124: ST_TO_ADDR
// hc_gallery :=  ;
56125: LD_ADDR_OWVAR 33
56129: PUSH
56130: LD_STRING 
56132: ST_TO_ADDR
// end ;
56133: LD_VAR 0 1
56137: RET
// export function PrepareBird ( ) ; begin
56138: LD_INT 0
56140: PPUSH
// uc_side := 0 ;
56141: LD_ADDR_OWVAR 20
56145: PUSH
56146: LD_INT 0
56148: ST_TO_ADDR
// uc_nation := 0 ;
56149: LD_ADDR_OWVAR 21
56153: PUSH
56154: LD_INT 0
56156: ST_TO_ADDR
// hc_class := class_phororhacos ;
56157: LD_ADDR_OWVAR 28
56161: PUSH
56162: LD_INT 18
56164: ST_TO_ADDR
// hc_gallery :=  ;
56165: LD_ADDR_OWVAR 33
56169: PUSH
56170: LD_STRING 
56172: ST_TO_ADDR
// end ;
56173: LD_VAR 0 1
56177: RET
// export function PrepareHorse ( ) ; begin
56178: LD_INT 0
56180: PPUSH
// uc_side := 0 ;
56181: LD_ADDR_OWVAR 20
56185: PUSH
56186: LD_INT 0
56188: ST_TO_ADDR
// uc_nation := 0 ;
56189: LD_ADDR_OWVAR 21
56193: PUSH
56194: LD_INT 0
56196: ST_TO_ADDR
// hc_class := class_horse ;
56197: LD_ADDR_OWVAR 28
56201: PUSH
56202: LD_INT 21
56204: ST_TO_ADDR
// hc_gallery :=  ;
56205: LD_ADDR_OWVAR 33
56209: PUSH
56210: LD_STRING 
56212: ST_TO_ADDR
// end ;
56213: LD_VAR 0 1
56217: RET
// export function PrepareMastodont ( ) ; begin
56218: LD_INT 0
56220: PPUSH
// uc_side := 0 ;
56221: LD_ADDR_OWVAR 20
56225: PUSH
56226: LD_INT 0
56228: ST_TO_ADDR
// uc_nation := 0 ;
56229: LD_ADDR_OWVAR 21
56233: PUSH
56234: LD_INT 0
56236: ST_TO_ADDR
// vc_chassis := class_mastodont ;
56237: LD_ADDR_OWVAR 37
56241: PUSH
56242: LD_INT 31
56244: ST_TO_ADDR
// vc_control := control_rider ;
56245: LD_ADDR_OWVAR 38
56249: PUSH
56250: LD_INT 4
56252: ST_TO_ADDR
// end ;
56253: LD_VAR 0 1
56257: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
56258: LD_INT 0
56260: PPUSH
56261: PPUSH
56262: PPUSH
// uc_side = 0 ;
56263: LD_ADDR_OWVAR 20
56267: PUSH
56268: LD_INT 0
56270: ST_TO_ADDR
// uc_nation = 0 ;
56271: LD_ADDR_OWVAR 21
56275: PUSH
56276: LD_INT 0
56278: ST_TO_ADDR
// InitHc_All ( ) ;
56279: CALL_OW 584
// InitVc ;
56283: CALL_OW 20
// if mastodonts then
56287: LD_VAR 0 6
56291: IFFALSE 56358
// for i = 1 to mastodonts do
56293: LD_ADDR_VAR 0 11
56297: PUSH
56298: DOUBLE
56299: LD_INT 1
56301: DEC
56302: ST_TO_ADDR
56303: LD_VAR 0 6
56307: PUSH
56308: FOR_TO
56309: IFFALSE 56356
// begin vc_chassis := 31 ;
56311: LD_ADDR_OWVAR 37
56315: PUSH
56316: LD_INT 31
56318: ST_TO_ADDR
// vc_control := control_rider ;
56319: LD_ADDR_OWVAR 38
56323: PUSH
56324: LD_INT 4
56326: ST_TO_ADDR
// animal := CreateVehicle ;
56327: LD_ADDR_VAR 0 12
56331: PUSH
56332: CALL_OW 45
56336: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56337: LD_VAR 0 12
56341: PPUSH
56342: LD_VAR 0 8
56346: PPUSH
56347: LD_INT 0
56349: PPUSH
56350: CALL 58486 0 3
// end ;
56354: GO 56308
56356: POP
56357: POP
// if horses then
56358: LD_VAR 0 5
56362: IFFALSE 56429
// for i = 1 to horses do
56364: LD_ADDR_VAR 0 11
56368: PUSH
56369: DOUBLE
56370: LD_INT 1
56372: DEC
56373: ST_TO_ADDR
56374: LD_VAR 0 5
56378: PUSH
56379: FOR_TO
56380: IFFALSE 56427
// begin hc_class := 21 ;
56382: LD_ADDR_OWVAR 28
56386: PUSH
56387: LD_INT 21
56389: ST_TO_ADDR
// hc_gallery :=  ;
56390: LD_ADDR_OWVAR 33
56394: PUSH
56395: LD_STRING 
56397: ST_TO_ADDR
// animal := CreateHuman ;
56398: LD_ADDR_VAR 0 12
56402: PUSH
56403: CALL_OW 44
56407: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56408: LD_VAR 0 12
56412: PPUSH
56413: LD_VAR 0 8
56417: PPUSH
56418: LD_INT 0
56420: PPUSH
56421: CALL 58486 0 3
// end ;
56425: GO 56379
56427: POP
56428: POP
// if birds then
56429: LD_VAR 0 1
56433: IFFALSE 56500
// for i = 1 to birds do
56435: LD_ADDR_VAR 0 11
56439: PUSH
56440: DOUBLE
56441: LD_INT 1
56443: DEC
56444: ST_TO_ADDR
56445: LD_VAR 0 1
56449: PUSH
56450: FOR_TO
56451: IFFALSE 56498
// begin hc_class = 18 ;
56453: LD_ADDR_OWVAR 28
56457: PUSH
56458: LD_INT 18
56460: ST_TO_ADDR
// hc_gallery =  ;
56461: LD_ADDR_OWVAR 33
56465: PUSH
56466: LD_STRING 
56468: ST_TO_ADDR
// animal := CreateHuman ;
56469: LD_ADDR_VAR 0 12
56473: PUSH
56474: CALL_OW 44
56478: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56479: LD_VAR 0 12
56483: PPUSH
56484: LD_VAR 0 8
56488: PPUSH
56489: LD_INT 0
56491: PPUSH
56492: CALL 58486 0 3
// end ;
56496: GO 56450
56498: POP
56499: POP
// if tigers then
56500: LD_VAR 0 2
56504: IFFALSE 56588
// for i = 1 to tigers do
56506: LD_ADDR_VAR 0 11
56510: PUSH
56511: DOUBLE
56512: LD_INT 1
56514: DEC
56515: ST_TO_ADDR
56516: LD_VAR 0 2
56520: PUSH
56521: FOR_TO
56522: IFFALSE 56586
// begin hc_class = class_tiger ;
56524: LD_ADDR_OWVAR 28
56528: PUSH
56529: LD_INT 14
56531: ST_TO_ADDR
// hc_gallery =  ;
56532: LD_ADDR_OWVAR 33
56536: PUSH
56537: LD_STRING 
56539: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56540: LD_ADDR_OWVAR 35
56544: PUSH
56545: LD_INT 7
56547: NEG
56548: PPUSH
56549: LD_INT 7
56551: PPUSH
56552: CALL_OW 12
56556: ST_TO_ADDR
// animal := CreateHuman ;
56557: LD_ADDR_VAR 0 12
56561: PUSH
56562: CALL_OW 44
56566: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56567: LD_VAR 0 12
56571: PPUSH
56572: LD_VAR 0 8
56576: PPUSH
56577: LD_INT 0
56579: PPUSH
56580: CALL 58486 0 3
// end ;
56584: GO 56521
56586: POP
56587: POP
// if apemans then
56588: LD_VAR 0 3
56592: IFFALSE 56715
// for i = 1 to apemans do
56594: LD_ADDR_VAR 0 11
56598: PUSH
56599: DOUBLE
56600: LD_INT 1
56602: DEC
56603: ST_TO_ADDR
56604: LD_VAR 0 3
56608: PUSH
56609: FOR_TO
56610: IFFALSE 56713
// begin hc_class = class_apeman ;
56612: LD_ADDR_OWVAR 28
56616: PUSH
56617: LD_INT 12
56619: ST_TO_ADDR
// hc_gallery =  ;
56620: LD_ADDR_OWVAR 33
56624: PUSH
56625: LD_STRING 
56627: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56628: LD_ADDR_OWVAR 35
56632: PUSH
56633: LD_INT 2
56635: NEG
56636: PPUSH
56637: LD_INT 2
56639: PPUSH
56640: CALL_OW 12
56644: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56645: LD_ADDR_OWVAR 31
56649: PUSH
56650: LD_INT 1
56652: PPUSH
56653: LD_INT 3
56655: PPUSH
56656: CALL_OW 12
56660: PUSH
56661: LD_INT 1
56663: PPUSH
56664: LD_INT 3
56666: PPUSH
56667: CALL_OW 12
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: LD_INT 0
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: ST_TO_ADDR
// animal := CreateHuman ;
56684: LD_ADDR_VAR 0 12
56688: PUSH
56689: CALL_OW 44
56693: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56694: LD_VAR 0 12
56698: PPUSH
56699: LD_VAR 0 8
56703: PPUSH
56704: LD_INT 0
56706: PPUSH
56707: CALL 58486 0 3
// end ;
56711: GO 56609
56713: POP
56714: POP
// if enchidnas then
56715: LD_VAR 0 4
56719: IFFALSE 56786
// for i = 1 to enchidnas do
56721: LD_ADDR_VAR 0 11
56725: PUSH
56726: DOUBLE
56727: LD_INT 1
56729: DEC
56730: ST_TO_ADDR
56731: LD_VAR 0 4
56735: PUSH
56736: FOR_TO
56737: IFFALSE 56784
// begin hc_class = 13 ;
56739: LD_ADDR_OWVAR 28
56743: PUSH
56744: LD_INT 13
56746: ST_TO_ADDR
// hc_gallery =  ;
56747: LD_ADDR_OWVAR 33
56751: PUSH
56752: LD_STRING 
56754: ST_TO_ADDR
// animal := CreateHuman ;
56755: LD_ADDR_VAR 0 12
56759: PUSH
56760: CALL_OW 44
56764: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56765: LD_VAR 0 12
56769: PPUSH
56770: LD_VAR 0 8
56774: PPUSH
56775: LD_INT 0
56777: PPUSH
56778: CALL 58486 0 3
// end ;
56782: GO 56736
56784: POP
56785: POP
// if fishes then
56786: LD_VAR 0 7
56790: IFFALSE 56857
// for i = 1 to fishes do
56792: LD_ADDR_VAR 0 11
56796: PUSH
56797: DOUBLE
56798: LD_INT 1
56800: DEC
56801: ST_TO_ADDR
56802: LD_VAR 0 7
56806: PUSH
56807: FOR_TO
56808: IFFALSE 56855
// begin hc_class = 20 ;
56810: LD_ADDR_OWVAR 28
56814: PUSH
56815: LD_INT 20
56817: ST_TO_ADDR
// hc_gallery =  ;
56818: LD_ADDR_OWVAR 33
56822: PUSH
56823: LD_STRING 
56825: ST_TO_ADDR
// animal := CreateHuman ;
56826: LD_ADDR_VAR 0 12
56830: PUSH
56831: CALL_OW 44
56835: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56836: LD_VAR 0 12
56840: PPUSH
56841: LD_VAR 0 9
56845: PPUSH
56846: LD_INT 0
56848: PPUSH
56849: CALL 58486 0 3
// end ;
56853: GO 56807
56855: POP
56856: POP
// end ;
56857: LD_VAR 0 10
56861: RET
// export function WantHeal ( sci , unit ) ; begin
56862: LD_INT 0
56864: PPUSH
// if GetTaskList ( sci ) > 0 then
56865: LD_VAR 0 1
56869: PPUSH
56870: CALL_OW 437
56874: PUSH
56875: LD_INT 0
56877: GREATER
56878: IFFALSE 56948
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56880: LD_VAR 0 1
56884: PPUSH
56885: CALL_OW 437
56889: PUSH
56890: LD_INT 1
56892: ARRAY
56893: PUSH
56894: LD_INT 1
56896: ARRAY
56897: PUSH
56898: LD_STRING l
56900: EQUAL
56901: PUSH
56902: LD_VAR 0 1
56906: PPUSH
56907: CALL_OW 437
56911: PUSH
56912: LD_INT 1
56914: ARRAY
56915: PUSH
56916: LD_INT 4
56918: ARRAY
56919: PUSH
56920: LD_VAR 0 2
56924: EQUAL
56925: AND
56926: IFFALSE 56938
// result := true else
56928: LD_ADDR_VAR 0 3
56932: PUSH
56933: LD_INT 1
56935: ST_TO_ADDR
56936: GO 56946
// result := false ;
56938: LD_ADDR_VAR 0 3
56942: PUSH
56943: LD_INT 0
56945: ST_TO_ADDR
// end else
56946: GO 56956
// result := false ;
56948: LD_ADDR_VAR 0 3
56952: PUSH
56953: LD_INT 0
56955: ST_TO_ADDR
// end ;
56956: LD_VAR 0 3
56960: RET
// export function HealTarget ( sci ) ; begin
56961: LD_INT 0
56963: PPUSH
// if not sci then
56964: LD_VAR 0 1
56968: NOT
56969: IFFALSE 56973
// exit ;
56971: GO 57038
// result := 0 ;
56973: LD_ADDR_VAR 0 2
56977: PUSH
56978: LD_INT 0
56980: ST_TO_ADDR
// if GetTaskList ( sci ) then
56981: LD_VAR 0 1
56985: PPUSH
56986: CALL_OW 437
56990: IFFALSE 57038
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56992: LD_VAR 0 1
56996: PPUSH
56997: CALL_OW 437
57001: PUSH
57002: LD_INT 1
57004: ARRAY
57005: PUSH
57006: LD_INT 1
57008: ARRAY
57009: PUSH
57010: LD_STRING l
57012: EQUAL
57013: IFFALSE 57038
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57015: LD_ADDR_VAR 0 2
57019: PUSH
57020: LD_VAR 0 1
57024: PPUSH
57025: CALL_OW 437
57029: PUSH
57030: LD_INT 1
57032: ARRAY
57033: PUSH
57034: LD_INT 4
57036: ARRAY
57037: ST_TO_ADDR
// end ;
57038: LD_VAR 0 2
57042: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57043: LD_INT 0
57045: PPUSH
57046: PPUSH
57047: PPUSH
57048: PPUSH
// if not base_units then
57049: LD_VAR 0 1
57053: NOT
57054: IFFALSE 57058
// exit ;
57056: GO 57145
// result := false ;
57058: LD_ADDR_VAR 0 2
57062: PUSH
57063: LD_INT 0
57065: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57066: LD_ADDR_VAR 0 5
57070: PUSH
57071: LD_VAR 0 1
57075: PPUSH
57076: LD_INT 21
57078: PUSH
57079: LD_INT 3
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PPUSH
57086: CALL_OW 72
57090: ST_TO_ADDR
// if not tmp then
57091: LD_VAR 0 5
57095: NOT
57096: IFFALSE 57100
// exit ;
57098: GO 57145
// for i in tmp do
57100: LD_ADDR_VAR 0 3
57104: PUSH
57105: LD_VAR 0 5
57109: PUSH
57110: FOR_IN
57111: IFFALSE 57143
// begin result := EnemyInRange ( i , 22 ) ;
57113: LD_ADDR_VAR 0 2
57117: PUSH
57118: LD_VAR 0 3
57122: PPUSH
57123: LD_INT 22
57125: PPUSH
57126: CALL 54732 0 2
57130: ST_TO_ADDR
// if result then
57131: LD_VAR 0 2
57135: IFFALSE 57141
// exit ;
57137: POP
57138: POP
57139: GO 57145
// end ;
57141: GO 57110
57143: POP
57144: POP
// end ;
57145: LD_VAR 0 2
57149: RET
// export function FilterByTag ( units , tag ) ; begin
57150: LD_INT 0
57152: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
57153: LD_ADDR_VAR 0 3
57157: PUSH
57158: LD_VAR 0 1
57162: PPUSH
57163: LD_INT 120
57165: PUSH
57166: LD_VAR 0 2
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PPUSH
57175: CALL_OW 72
57179: ST_TO_ADDR
// end ;
57180: LD_VAR 0 3
57184: RET
// export function IsDriver ( un ) ; begin
57185: LD_INT 0
57187: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
57188: LD_ADDR_VAR 0 2
57192: PUSH
57193: LD_VAR 0 1
57197: PUSH
57198: LD_INT 55
57200: PUSH
57201: EMPTY
57202: LIST
57203: PPUSH
57204: CALL_OW 69
57208: IN
57209: ST_TO_ADDR
// end ;
57210: LD_VAR 0 2
57214: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
57215: LD_INT 0
57217: PPUSH
57218: PPUSH
// list := [ ] ;
57219: LD_ADDR_VAR 0 5
57223: PUSH
57224: EMPTY
57225: ST_TO_ADDR
// case d of 0 :
57226: LD_VAR 0 3
57230: PUSH
57231: LD_INT 0
57233: DOUBLE
57234: EQUAL
57235: IFTRUE 57239
57237: GO 57372
57239: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
57240: LD_ADDR_VAR 0 5
57244: PUSH
57245: LD_VAR 0 1
57249: PUSH
57250: LD_INT 4
57252: MINUS
57253: PUSH
57254: LD_VAR 0 2
57258: PUSH
57259: LD_INT 4
57261: MINUS
57262: PUSH
57263: LD_INT 2
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: LIST
57270: PUSH
57271: LD_VAR 0 1
57275: PUSH
57276: LD_INT 3
57278: MINUS
57279: PUSH
57280: LD_VAR 0 2
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: LIST
57292: PUSH
57293: LD_VAR 0 1
57297: PUSH
57298: LD_INT 4
57300: PLUS
57301: PUSH
57302: LD_VAR 0 2
57306: PUSH
57307: LD_INT 4
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: LIST
57314: PUSH
57315: LD_VAR 0 1
57319: PUSH
57320: LD_INT 3
57322: PLUS
57323: PUSH
57324: LD_VAR 0 2
57328: PUSH
57329: LD_INT 3
57331: PLUS
57332: PUSH
57333: LD_INT 5
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: LIST
57340: PUSH
57341: LD_VAR 0 1
57345: PUSH
57346: LD_VAR 0 2
57350: PUSH
57351: LD_INT 4
57353: PLUS
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: LIST
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: ST_TO_ADDR
// end ; 1 :
57370: GO 58070
57372: LD_INT 1
57374: DOUBLE
57375: EQUAL
57376: IFTRUE 57380
57378: GO 57513
57380: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57381: LD_ADDR_VAR 0 5
57385: PUSH
57386: LD_VAR 0 1
57390: PUSH
57391: LD_VAR 0 2
57395: PUSH
57396: LD_INT 4
57398: MINUS
57399: PUSH
57400: LD_INT 3
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: LIST
57407: PUSH
57408: LD_VAR 0 1
57412: PUSH
57413: LD_INT 3
57415: MINUS
57416: PUSH
57417: LD_VAR 0 2
57421: PUSH
57422: LD_INT 3
57424: MINUS
57425: PUSH
57426: LD_INT 2
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: LIST
57433: PUSH
57434: LD_VAR 0 1
57438: PUSH
57439: LD_INT 4
57441: MINUS
57442: PUSH
57443: LD_VAR 0 2
57447: PUSH
57448: LD_INT 1
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: LIST
57455: PUSH
57456: LD_VAR 0 1
57460: PUSH
57461: LD_VAR 0 2
57465: PUSH
57466: LD_INT 3
57468: PLUS
57469: PUSH
57470: LD_INT 0
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: LIST
57477: PUSH
57478: LD_VAR 0 1
57482: PUSH
57483: LD_INT 4
57485: PLUS
57486: PUSH
57487: LD_VAR 0 2
57491: PUSH
57492: LD_INT 4
57494: PLUS
57495: PUSH
57496: LD_INT 5
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: LIST
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: ST_TO_ADDR
// end ; 2 :
57511: GO 58070
57513: LD_INT 2
57515: DOUBLE
57516: EQUAL
57517: IFTRUE 57521
57519: GO 57650
57521: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57522: LD_ADDR_VAR 0 5
57526: PUSH
57527: LD_VAR 0 1
57531: PUSH
57532: LD_VAR 0 2
57536: PUSH
57537: LD_INT 3
57539: MINUS
57540: PUSH
57541: LD_INT 3
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: LIST
57548: PUSH
57549: LD_VAR 0 1
57553: PUSH
57554: LD_INT 4
57556: PLUS
57557: PUSH
57558: LD_VAR 0 2
57562: PUSH
57563: LD_INT 4
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: LIST
57570: PUSH
57571: LD_VAR 0 1
57575: PUSH
57576: LD_VAR 0 2
57580: PUSH
57581: LD_INT 4
57583: PLUS
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: LIST
57592: PUSH
57593: LD_VAR 0 1
57597: PUSH
57598: LD_INT 3
57600: MINUS
57601: PUSH
57602: LD_VAR 0 2
57606: PUSH
57607: LD_INT 1
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: LIST
57614: PUSH
57615: LD_VAR 0 1
57619: PUSH
57620: LD_INT 4
57622: MINUS
57623: PUSH
57624: LD_VAR 0 2
57628: PUSH
57629: LD_INT 4
57631: MINUS
57632: PUSH
57633: LD_INT 2
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: LIST
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: ST_TO_ADDR
// end ; 3 :
57648: GO 58070
57650: LD_INT 3
57652: DOUBLE
57653: EQUAL
57654: IFTRUE 57658
57656: GO 57791
57658: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57659: LD_ADDR_VAR 0 5
57663: PUSH
57664: LD_VAR 0 1
57668: PUSH
57669: LD_INT 3
57671: PLUS
57672: PUSH
57673: LD_VAR 0 2
57677: PUSH
57678: LD_INT 4
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: LIST
57685: PUSH
57686: LD_VAR 0 1
57690: PUSH
57691: LD_INT 4
57693: PLUS
57694: PUSH
57695: LD_VAR 0 2
57699: PUSH
57700: LD_INT 4
57702: PLUS
57703: PUSH
57704: LD_INT 5
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: LIST
57711: PUSH
57712: LD_VAR 0 1
57716: PUSH
57717: LD_INT 4
57719: MINUS
57720: PUSH
57721: LD_VAR 0 2
57725: PUSH
57726: LD_INT 1
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: LIST
57733: PUSH
57734: LD_VAR 0 1
57738: PUSH
57739: LD_VAR 0 2
57743: PUSH
57744: LD_INT 4
57746: MINUS
57747: PUSH
57748: LD_INT 3
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: LIST
57755: PUSH
57756: LD_VAR 0 1
57760: PUSH
57761: LD_INT 3
57763: MINUS
57764: PUSH
57765: LD_VAR 0 2
57769: PUSH
57770: LD_INT 3
57772: MINUS
57773: PUSH
57774: LD_INT 2
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: LIST
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: ST_TO_ADDR
// end ; 4 :
57789: GO 58070
57791: LD_INT 4
57793: DOUBLE
57794: EQUAL
57795: IFTRUE 57799
57797: GO 57932
57799: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57800: LD_ADDR_VAR 0 5
57804: PUSH
57805: LD_VAR 0 1
57809: PUSH
57810: LD_VAR 0 2
57814: PUSH
57815: LD_INT 4
57817: PLUS
57818: PUSH
57819: LD_INT 0
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: LIST
57826: PUSH
57827: LD_VAR 0 1
57831: PUSH
57832: LD_INT 3
57834: PLUS
57835: PUSH
57836: LD_VAR 0 2
57840: PUSH
57841: LD_INT 3
57843: PLUS
57844: PUSH
57845: LD_INT 5
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: LIST
57852: PUSH
57853: LD_VAR 0 1
57857: PUSH
57858: LD_INT 4
57860: PLUS
57861: PUSH
57862: LD_VAR 0 2
57866: PUSH
57867: LD_INT 4
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: LIST
57874: PUSH
57875: LD_VAR 0 1
57879: PUSH
57880: LD_VAR 0 2
57884: PUSH
57885: LD_INT 3
57887: MINUS
57888: PUSH
57889: LD_INT 3
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: LIST
57896: PUSH
57897: LD_VAR 0 1
57901: PUSH
57902: LD_INT 4
57904: MINUS
57905: PUSH
57906: LD_VAR 0 2
57910: PUSH
57911: LD_INT 4
57913: MINUS
57914: PUSH
57915: LD_INT 2
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: LIST
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: ST_TO_ADDR
// end ; 5 :
57930: GO 58070
57932: LD_INT 5
57934: DOUBLE
57935: EQUAL
57936: IFTRUE 57940
57938: GO 58069
57940: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57941: LD_ADDR_VAR 0 5
57945: PUSH
57946: LD_VAR 0 1
57950: PUSH
57951: LD_INT 4
57953: MINUS
57954: PUSH
57955: LD_VAR 0 2
57959: PUSH
57960: LD_INT 1
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: LIST
57967: PUSH
57968: LD_VAR 0 1
57972: PUSH
57973: LD_VAR 0 2
57977: PUSH
57978: LD_INT 4
57980: MINUS
57981: PUSH
57982: LD_INT 3
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: LIST
57989: PUSH
57990: LD_VAR 0 1
57994: PUSH
57995: LD_INT 4
57997: PLUS
57998: PUSH
57999: LD_VAR 0 2
58003: PUSH
58004: LD_INT 4
58006: PLUS
58007: PUSH
58008: LD_INT 5
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: LIST
58015: PUSH
58016: LD_VAR 0 1
58020: PUSH
58021: LD_INT 3
58023: PLUS
58024: PUSH
58025: LD_VAR 0 2
58029: PUSH
58030: LD_INT 4
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: LIST
58037: PUSH
58038: LD_VAR 0 1
58042: PUSH
58043: LD_VAR 0 2
58047: PUSH
58048: LD_INT 3
58050: PLUS
58051: PUSH
58052: LD_INT 0
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: LIST
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: ST_TO_ADDR
// end ; end ;
58067: GO 58070
58069: POP
// result := list ;
58070: LD_ADDR_VAR 0 4
58074: PUSH
58075: LD_VAR 0 5
58079: ST_TO_ADDR
// end ;
58080: LD_VAR 0 4
58084: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58085: LD_INT 0
58087: PPUSH
58088: PPUSH
58089: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58090: LD_VAR 0 1
58094: NOT
58095: PUSH
58096: LD_VAR 0 2
58100: PUSH
58101: LD_INT 1
58103: PUSH
58104: LD_INT 2
58106: PUSH
58107: LD_INT 3
58109: PUSH
58110: LD_INT 4
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: IN
58119: NOT
58120: OR
58121: IFFALSE 58125
// exit ;
58123: GO 58208
// tmp := [ ] ;
58125: LD_ADDR_VAR 0 5
58129: PUSH
58130: EMPTY
58131: ST_TO_ADDR
// for i in units do
58132: LD_ADDR_VAR 0 4
58136: PUSH
58137: LD_VAR 0 1
58141: PUSH
58142: FOR_IN
58143: IFFALSE 58177
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
58145: LD_ADDR_VAR 0 5
58149: PUSH
58150: LD_VAR 0 5
58154: PPUSH
58155: LD_VAR 0 4
58159: PPUSH
58160: LD_VAR 0 2
58164: PPUSH
58165: CALL_OW 259
58169: PPUSH
58170: CALL 59569 0 2
58174: ST_TO_ADDR
58175: GO 58142
58177: POP
58178: POP
// if not tmp then
58179: LD_VAR 0 5
58183: NOT
58184: IFFALSE 58188
// exit ;
58186: GO 58208
// result := SortListByListDesc ( units , tmp ) ;
58188: LD_ADDR_VAR 0 3
58192: PUSH
58193: LD_VAR 0 1
58197: PPUSH
58198: LD_VAR 0 5
58202: PPUSH
58203: CALL_OW 77
58207: ST_TO_ADDR
// end ;
58208: LD_VAR 0 3
58212: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
58213: LD_INT 0
58215: PPUSH
58216: PPUSH
58217: PPUSH
// result := false ;
58218: LD_ADDR_VAR 0 3
58222: PUSH
58223: LD_INT 0
58225: ST_TO_ADDR
// if not building then
58226: LD_VAR 0 2
58230: NOT
58231: IFFALSE 58235
// exit ;
58233: GO 58373
// x := GetX ( building ) ;
58235: LD_ADDR_VAR 0 4
58239: PUSH
58240: LD_VAR 0 2
58244: PPUSH
58245: CALL_OW 250
58249: ST_TO_ADDR
// y := GetY ( building ) ;
58250: LD_ADDR_VAR 0 5
58254: PUSH
58255: LD_VAR 0 2
58259: PPUSH
58260: CALL_OW 251
58264: ST_TO_ADDR
// if not x or not y then
58265: LD_VAR 0 4
58269: NOT
58270: PUSH
58271: LD_VAR 0 5
58275: NOT
58276: OR
58277: IFFALSE 58281
// exit ;
58279: GO 58373
// if GetTaskList ( unit ) then
58281: LD_VAR 0 1
58285: PPUSH
58286: CALL_OW 437
58290: IFFALSE 58373
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58292: LD_STRING e
58294: PUSH
58295: LD_VAR 0 1
58299: PPUSH
58300: CALL_OW 437
58304: PUSH
58305: LD_INT 1
58307: ARRAY
58308: PUSH
58309: LD_INT 1
58311: ARRAY
58312: EQUAL
58313: PUSH
58314: LD_VAR 0 4
58318: PUSH
58319: LD_VAR 0 1
58323: PPUSH
58324: CALL_OW 437
58328: PUSH
58329: LD_INT 1
58331: ARRAY
58332: PUSH
58333: LD_INT 2
58335: ARRAY
58336: EQUAL
58337: AND
58338: PUSH
58339: LD_VAR 0 5
58343: PUSH
58344: LD_VAR 0 1
58348: PPUSH
58349: CALL_OW 437
58353: PUSH
58354: LD_INT 1
58356: ARRAY
58357: PUSH
58358: LD_INT 3
58360: ARRAY
58361: EQUAL
58362: AND
58363: IFFALSE 58373
// result := true end ;
58365: LD_ADDR_VAR 0 3
58369: PUSH
58370: LD_INT 1
58372: ST_TO_ADDR
// end ;
58373: LD_VAR 0 3
58377: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58378: LD_INT 0
58380: PPUSH
// result := false ;
58381: LD_ADDR_VAR 0 4
58385: PUSH
58386: LD_INT 0
58388: ST_TO_ADDR
// if GetTaskList ( unit ) then
58389: LD_VAR 0 1
58393: PPUSH
58394: CALL_OW 437
58398: IFFALSE 58481
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58400: LD_STRING M
58402: PUSH
58403: LD_VAR 0 1
58407: PPUSH
58408: CALL_OW 437
58412: PUSH
58413: LD_INT 1
58415: ARRAY
58416: PUSH
58417: LD_INT 1
58419: ARRAY
58420: EQUAL
58421: PUSH
58422: LD_VAR 0 2
58426: PUSH
58427: LD_VAR 0 1
58431: PPUSH
58432: CALL_OW 437
58436: PUSH
58437: LD_INT 1
58439: ARRAY
58440: PUSH
58441: LD_INT 2
58443: ARRAY
58444: EQUAL
58445: AND
58446: PUSH
58447: LD_VAR 0 3
58451: PUSH
58452: LD_VAR 0 1
58456: PPUSH
58457: CALL_OW 437
58461: PUSH
58462: LD_INT 1
58464: ARRAY
58465: PUSH
58466: LD_INT 3
58468: ARRAY
58469: EQUAL
58470: AND
58471: IFFALSE 58481
// result := true ;
58473: LD_ADDR_VAR 0 4
58477: PUSH
58478: LD_INT 1
58480: ST_TO_ADDR
// end ; end ;
58481: LD_VAR 0 4
58485: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58486: LD_INT 0
58488: PPUSH
58489: PPUSH
58490: PPUSH
58491: PPUSH
// if not unit or not area then
58492: LD_VAR 0 1
58496: NOT
58497: PUSH
58498: LD_VAR 0 2
58502: NOT
58503: OR
58504: IFFALSE 58508
// exit ;
58506: GO 58672
// tmp := AreaToList ( area , i ) ;
58508: LD_ADDR_VAR 0 6
58512: PUSH
58513: LD_VAR 0 2
58517: PPUSH
58518: LD_VAR 0 5
58522: PPUSH
58523: CALL_OW 517
58527: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58528: LD_ADDR_VAR 0 5
58532: PUSH
58533: DOUBLE
58534: LD_INT 1
58536: DEC
58537: ST_TO_ADDR
58538: LD_VAR 0 6
58542: PUSH
58543: LD_INT 1
58545: ARRAY
58546: PUSH
58547: FOR_TO
58548: IFFALSE 58670
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58550: LD_ADDR_VAR 0 7
58554: PUSH
58555: LD_VAR 0 6
58559: PUSH
58560: LD_INT 1
58562: ARRAY
58563: PUSH
58564: LD_VAR 0 5
58568: ARRAY
58569: PUSH
58570: LD_VAR 0 6
58574: PUSH
58575: LD_INT 2
58577: ARRAY
58578: PUSH
58579: LD_VAR 0 5
58583: ARRAY
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58589: LD_VAR 0 7
58593: PUSH
58594: LD_INT 1
58596: ARRAY
58597: PPUSH
58598: LD_VAR 0 7
58602: PUSH
58603: LD_INT 2
58605: ARRAY
58606: PPUSH
58607: CALL_OW 428
58611: PUSH
58612: LD_INT 0
58614: EQUAL
58615: IFFALSE 58668
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58617: LD_VAR 0 1
58621: PPUSH
58622: LD_VAR 0 7
58626: PUSH
58627: LD_INT 1
58629: ARRAY
58630: PPUSH
58631: LD_VAR 0 7
58635: PUSH
58636: LD_INT 2
58638: ARRAY
58639: PPUSH
58640: LD_VAR 0 3
58644: PPUSH
58645: CALL_OW 48
// result := IsPlaced ( unit ) ;
58649: LD_ADDR_VAR 0 4
58653: PUSH
58654: LD_VAR 0 1
58658: PPUSH
58659: CALL_OW 305
58663: ST_TO_ADDR
// exit ;
58664: POP
58665: POP
58666: GO 58672
// end ; end ;
58668: GO 58547
58670: POP
58671: POP
// end ;
58672: LD_VAR 0 4
58676: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58677: LD_INT 0
58679: PPUSH
58680: PPUSH
58681: PPUSH
// if not side or side > 8 then
58682: LD_VAR 0 1
58686: NOT
58687: PUSH
58688: LD_VAR 0 1
58692: PUSH
58693: LD_INT 8
58695: GREATER
58696: OR
58697: IFFALSE 58701
// exit ;
58699: GO 58888
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58701: LD_ADDR_VAR 0 4
58705: PUSH
58706: LD_INT 22
58708: PUSH
58709: LD_VAR 0 1
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 21
58720: PUSH
58721: LD_INT 3
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PPUSH
58732: CALL_OW 69
58736: ST_TO_ADDR
// if not tmp then
58737: LD_VAR 0 4
58741: NOT
58742: IFFALSE 58746
// exit ;
58744: GO 58888
// enable_addtolog := true ;
58746: LD_ADDR_OWVAR 81
58750: PUSH
58751: LD_INT 1
58753: ST_TO_ADDR
// AddToLog ( [ ) ;
58754: LD_STRING [
58756: PPUSH
58757: CALL_OW 561
// for i in tmp do
58761: LD_ADDR_VAR 0 3
58765: PUSH
58766: LD_VAR 0 4
58770: PUSH
58771: FOR_IN
58772: IFFALSE 58879
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58774: LD_STRING [
58776: PUSH
58777: LD_VAR 0 3
58781: PPUSH
58782: CALL_OW 266
58786: STR
58787: PUSH
58788: LD_STRING , 
58790: STR
58791: PUSH
58792: LD_VAR 0 3
58796: PPUSH
58797: CALL_OW 250
58801: STR
58802: PUSH
58803: LD_STRING , 
58805: STR
58806: PUSH
58807: LD_VAR 0 3
58811: PPUSH
58812: CALL_OW 251
58816: STR
58817: PUSH
58818: LD_STRING , 
58820: STR
58821: PUSH
58822: LD_VAR 0 3
58826: PPUSH
58827: CALL_OW 254
58831: STR
58832: PUSH
58833: LD_STRING , 
58835: STR
58836: PUSH
58837: LD_VAR 0 3
58841: PPUSH
58842: LD_INT 1
58844: PPUSH
58845: CALL_OW 268
58849: STR
58850: PUSH
58851: LD_STRING , 
58853: STR
58854: PUSH
58855: LD_VAR 0 3
58859: PPUSH
58860: LD_INT 2
58862: PPUSH
58863: CALL_OW 268
58867: STR
58868: PUSH
58869: LD_STRING ],
58871: STR
58872: PPUSH
58873: CALL_OW 561
// end ;
58877: GO 58771
58879: POP
58880: POP
// AddToLog ( ]; ) ;
58881: LD_STRING ];
58883: PPUSH
58884: CALL_OW 561
// end ;
58888: LD_VAR 0 2
58892: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58893: LD_INT 0
58895: PPUSH
58896: PPUSH
58897: PPUSH
58898: PPUSH
58899: PPUSH
// if not area or not rate or not max then
58900: LD_VAR 0 1
58904: NOT
58905: PUSH
58906: LD_VAR 0 2
58910: NOT
58911: OR
58912: PUSH
58913: LD_VAR 0 4
58917: NOT
58918: OR
58919: IFFALSE 58923
// exit ;
58921: GO 59112
// while 1 do
58923: LD_INT 1
58925: IFFALSE 59112
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58927: LD_ADDR_VAR 0 9
58931: PUSH
58932: LD_VAR 0 1
58936: PPUSH
58937: LD_INT 1
58939: PPUSH
58940: CALL_OW 287
58944: PUSH
58945: LD_INT 10
58947: MUL
58948: ST_TO_ADDR
// r := rate / 10 ;
58949: LD_ADDR_VAR 0 7
58953: PUSH
58954: LD_VAR 0 2
58958: PUSH
58959: LD_INT 10
58961: DIVREAL
58962: ST_TO_ADDR
// time := 1 1$00 ;
58963: LD_ADDR_VAR 0 8
58967: PUSH
58968: LD_INT 2100
58970: ST_TO_ADDR
// if amount < min then
58971: LD_VAR 0 9
58975: PUSH
58976: LD_VAR 0 3
58980: LESS
58981: IFFALSE 58999
// r := r * 2 else
58983: LD_ADDR_VAR 0 7
58987: PUSH
58988: LD_VAR 0 7
58992: PUSH
58993: LD_INT 2
58995: MUL
58996: ST_TO_ADDR
58997: GO 59025
// if amount > max then
58999: LD_VAR 0 9
59003: PUSH
59004: LD_VAR 0 4
59008: GREATER
59009: IFFALSE 59025
// r := r / 2 ;
59011: LD_ADDR_VAR 0 7
59015: PUSH
59016: LD_VAR 0 7
59020: PUSH
59021: LD_INT 2
59023: DIVREAL
59024: ST_TO_ADDR
// time := time / r ;
59025: LD_ADDR_VAR 0 8
59029: PUSH
59030: LD_VAR 0 8
59034: PUSH
59035: LD_VAR 0 7
59039: DIVREAL
59040: ST_TO_ADDR
// if time < 0 then
59041: LD_VAR 0 8
59045: PUSH
59046: LD_INT 0
59048: LESS
59049: IFFALSE 59066
// time := time * - 1 ;
59051: LD_ADDR_VAR 0 8
59055: PUSH
59056: LD_VAR 0 8
59060: PUSH
59061: LD_INT 1
59063: NEG
59064: MUL
59065: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
59066: LD_VAR 0 8
59070: PUSH
59071: LD_INT 35
59073: PPUSH
59074: LD_INT 875
59076: PPUSH
59077: CALL_OW 12
59081: PLUS
59082: PPUSH
59083: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59087: LD_INT 1
59089: PPUSH
59090: LD_INT 5
59092: PPUSH
59093: CALL_OW 12
59097: PPUSH
59098: LD_VAR 0 1
59102: PPUSH
59103: LD_INT 1
59105: PPUSH
59106: CALL_OW 55
// end ;
59110: GO 58923
// end ;
59112: LD_VAR 0 5
59116: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
59117: LD_INT 0
59119: PPUSH
59120: PPUSH
59121: PPUSH
59122: PPUSH
59123: PPUSH
59124: PPUSH
59125: PPUSH
59126: PPUSH
// if not turrets or not factories then
59127: LD_VAR 0 1
59131: NOT
59132: PUSH
59133: LD_VAR 0 2
59137: NOT
59138: OR
59139: IFFALSE 59143
// exit ;
59141: GO 59450
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
59143: LD_ADDR_VAR 0 10
59147: PUSH
59148: LD_INT 5
59150: PUSH
59151: LD_INT 6
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 2
59160: PUSH
59161: LD_INT 4
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 3
59170: PUSH
59171: LD_INT 5
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 24
59185: PUSH
59186: LD_INT 25
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 23
59195: PUSH
59196: LD_INT 27
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 42
59209: PUSH
59210: LD_INT 43
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 44
59219: PUSH
59220: LD_INT 46
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 45
59229: PUSH
59230: LD_INT 47
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: LIST
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: LIST
59246: ST_TO_ADDR
// result := [ ] ;
59247: LD_ADDR_VAR 0 3
59251: PUSH
59252: EMPTY
59253: ST_TO_ADDR
// for i in turrets do
59254: LD_ADDR_VAR 0 4
59258: PUSH
59259: LD_VAR 0 1
59263: PUSH
59264: FOR_IN
59265: IFFALSE 59448
// begin nat := GetNation ( i ) ;
59267: LD_ADDR_VAR 0 7
59271: PUSH
59272: LD_VAR 0 4
59276: PPUSH
59277: CALL_OW 248
59281: ST_TO_ADDR
// weapon := 0 ;
59282: LD_ADDR_VAR 0 8
59286: PUSH
59287: LD_INT 0
59289: ST_TO_ADDR
// if not nat then
59290: LD_VAR 0 7
59294: NOT
59295: IFFALSE 59299
// continue ;
59297: GO 59264
// for j in list [ nat ] do
59299: LD_ADDR_VAR 0 5
59303: PUSH
59304: LD_VAR 0 10
59308: PUSH
59309: LD_VAR 0 7
59313: ARRAY
59314: PUSH
59315: FOR_IN
59316: IFFALSE 59357
// if GetBWeapon ( i ) = j [ 1 ] then
59318: LD_VAR 0 4
59322: PPUSH
59323: CALL_OW 269
59327: PUSH
59328: LD_VAR 0 5
59332: PUSH
59333: LD_INT 1
59335: ARRAY
59336: EQUAL
59337: IFFALSE 59355
// begin weapon := j [ 2 ] ;
59339: LD_ADDR_VAR 0 8
59343: PUSH
59344: LD_VAR 0 5
59348: PUSH
59349: LD_INT 2
59351: ARRAY
59352: ST_TO_ADDR
// break ;
59353: GO 59357
// end ;
59355: GO 59315
59357: POP
59358: POP
// if not weapon then
59359: LD_VAR 0 8
59363: NOT
59364: IFFALSE 59368
// continue ;
59366: GO 59264
// for k in factories do
59368: LD_ADDR_VAR 0 6
59372: PUSH
59373: LD_VAR 0 2
59377: PUSH
59378: FOR_IN
59379: IFFALSE 59444
// begin weapons := AvailableWeaponList ( k ) ;
59381: LD_ADDR_VAR 0 9
59385: PUSH
59386: LD_VAR 0 6
59390: PPUSH
59391: CALL_OW 478
59395: ST_TO_ADDR
// if not weapons then
59396: LD_VAR 0 9
59400: NOT
59401: IFFALSE 59405
// continue ;
59403: GO 59378
// if weapon in weapons then
59405: LD_VAR 0 8
59409: PUSH
59410: LD_VAR 0 9
59414: IN
59415: IFFALSE 59442
// begin result := [ i , weapon ] ;
59417: LD_ADDR_VAR 0 3
59421: PUSH
59422: LD_VAR 0 4
59426: PUSH
59427: LD_VAR 0 8
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: ST_TO_ADDR
// exit ;
59436: POP
59437: POP
59438: POP
59439: POP
59440: GO 59450
// end ; end ;
59442: GO 59378
59444: POP
59445: POP
// end ;
59446: GO 59264
59448: POP
59449: POP
// end ;
59450: LD_VAR 0 3
59454: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59455: LD_INT 0
59457: PPUSH
// if not side or side > 8 then
59458: LD_VAR 0 3
59462: NOT
59463: PUSH
59464: LD_VAR 0 3
59468: PUSH
59469: LD_INT 8
59471: GREATER
59472: OR
59473: IFFALSE 59477
// exit ;
59475: GO 59536
// if not range then
59477: LD_VAR 0 4
59481: NOT
59482: IFFALSE 59493
// range := - 12 ;
59484: LD_ADDR_VAR 0 4
59488: PUSH
59489: LD_INT 12
59491: NEG
59492: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59493: LD_VAR 0 1
59497: PPUSH
59498: LD_VAR 0 2
59502: PPUSH
59503: LD_VAR 0 3
59507: PPUSH
59508: LD_VAR 0 4
59512: PPUSH
59513: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59517: LD_VAR 0 1
59521: PPUSH
59522: LD_VAR 0 2
59526: PPUSH
59527: LD_VAR 0 3
59531: PPUSH
59532: CALL_OW 331
// end ;
59536: LD_VAR 0 5
59540: RET
// export function Video ( mode ) ; begin
59541: LD_INT 0
59543: PPUSH
// ingame_video = mode ;
59544: LD_ADDR_OWVAR 52
59548: PUSH
59549: LD_VAR 0 1
59553: ST_TO_ADDR
// interface_hidden = mode ;
59554: LD_ADDR_OWVAR 54
59558: PUSH
59559: LD_VAR 0 1
59563: ST_TO_ADDR
// end ;
59564: LD_VAR 0 2
59568: RET
// export function Join ( array , element ) ; begin
59569: LD_INT 0
59571: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59572: LD_ADDR_VAR 0 3
59576: PUSH
59577: LD_VAR 0 1
59581: PPUSH
59582: LD_VAR 0 1
59586: PUSH
59587: LD_INT 1
59589: PLUS
59590: PPUSH
59591: LD_VAR 0 2
59595: PPUSH
59596: CALL_OW 1
59600: ST_TO_ADDR
// end ;
59601: LD_VAR 0 3
59605: RET
// export function JoinUnion ( array , element ) ; begin
59606: LD_INT 0
59608: PPUSH
// result := array union element ;
59609: LD_ADDR_VAR 0 3
59613: PUSH
59614: LD_VAR 0 1
59618: PUSH
59619: LD_VAR 0 2
59623: UNION
59624: ST_TO_ADDR
// end ;
59625: LD_VAR 0 3
59629: RET
// export function GetBehemoths ( side ) ; begin
59630: LD_INT 0
59632: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
59633: LD_ADDR_VAR 0 2
59637: PUSH
59638: LD_INT 22
59640: PUSH
59641: LD_VAR 0 1
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 31
59652: PUSH
59653: LD_INT 25
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PPUSH
59664: CALL_OW 69
59668: ST_TO_ADDR
// end ;
59669: LD_VAR 0 2
59673: RET
// export function Shuffle ( array ) ; var i , index ; begin
59674: LD_INT 0
59676: PPUSH
59677: PPUSH
59678: PPUSH
// result := [ ] ;
59679: LD_ADDR_VAR 0 2
59683: PUSH
59684: EMPTY
59685: ST_TO_ADDR
// if not array then
59686: LD_VAR 0 1
59690: NOT
59691: IFFALSE 59695
// exit ;
59693: GO 59794
// Randomize ;
59695: CALL_OW 10
// for i = array downto 1 do
59699: LD_ADDR_VAR 0 3
59703: PUSH
59704: DOUBLE
59705: LD_VAR 0 1
59709: INC
59710: ST_TO_ADDR
59711: LD_INT 1
59713: PUSH
59714: FOR_DOWNTO
59715: IFFALSE 59792
// begin index := rand ( 1 , array ) ;
59717: LD_ADDR_VAR 0 4
59721: PUSH
59722: LD_INT 1
59724: PPUSH
59725: LD_VAR 0 1
59729: PPUSH
59730: CALL_OW 12
59734: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59735: LD_ADDR_VAR 0 2
59739: PUSH
59740: LD_VAR 0 2
59744: PPUSH
59745: LD_VAR 0 2
59749: PUSH
59750: LD_INT 1
59752: PLUS
59753: PPUSH
59754: LD_VAR 0 1
59758: PUSH
59759: LD_VAR 0 4
59763: ARRAY
59764: PPUSH
59765: CALL_OW 2
59769: ST_TO_ADDR
// array := Delete ( array , index ) ;
59770: LD_ADDR_VAR 0 1
59774: PUSH
59775: LD_VAR 0 1
59779: PPUSH
59780: LD_VAR 0 4
59784: PPUSH
59785: CALL_OW 3
59789: ST_TO_ADDR
// end ;
59790: GO 59714
59792: POP
59793: POP
// end ;
59794: LD_VAR 0 2
59798: RET
// export function GetBaseMaterials ( base ) ; begin
59799: LD_INT 0
59801: PPUSH
// result := [ 0 , 0 , 0 ] ;
59802: LD_ADDR_VAR 0 2
59806: PUSH
59807: LD_INT 0
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: LD_INT 0
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: LIST
59820: ST_TO_ADDR
// if not base then
59821: LD_VAR 0 1
59825: NOT
59826: IFFALSE 59830
// exit ;
59828: GO 59879
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59830: LD_ADDR_VAR 0 2
59834: PUSH
59835: LD_VAR 0 1
59839: PPUSH
59840: LD_INT 1
59842: PPUSH
59843: CALL_OW 275
59847: PUSH
59848: LD_VAR 0 1
59852: PPUSH
59853: LD_INT 2
59855: PPUSH
59856: CALL_OW 275
59860: PUSH
59861: LD_VAR 0 1
59865: PPUSH
59866: LD_INT 3
59868: PPUSH
59869: CALL_OW 275
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: LIST
59878: ST_TO_ADDR
// end ;
59879: LD_VAR 0 2
59883: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59884: LD_INT 0
59886: PPUSH
59887: PPUSH
// result := array ;
59888: LD_ADDR_VAR 0 3
59892: PUSH
59893: LD_VAR 0 1
59897: ST_TO_ADDR
// if size >= result then
59898: LD_VAR 0 2
59902: PUSH
59903: LD_VAR 0 3
59907: GREATEREQUAL
59908: IFFALSE 59912
// exit ;
59910: GO 59962
// if size then
59912: LD_VAR 0 2
59916: IFFALSE 59962
// for i := array downto size do
59918: LD_ADDR_VAR 0 4
59922: PUSH
59923: DOUBLE
59924: LD_VAR 0 1
59928: INC
59929: ST_TO_ADDR
59930: LD_VAR 0 2
59934: PUSH
59935: FOR_DOWNTO
59936: IFFALSE 59960
// result := Delete ( result , result ) ;
59938: LD_ADDR_VAR 0 3
59942: PUSH
59943: LD_VAR 0 3
59947: PPUSH
59948: LD_VAR 0 3
59952: PPUSH
59953: CALL_OW 3
59957: ST_TO_ADDR
59958: GO 59935
59960: POP
59961: POP
// end ;
59962: LD_VAR 0 3
59966: RET
// export function ComExit ( unit ) ; var tmp ; begin
59967: LD_INT 0
59969: PPUSH
59970: PPUSH
// if not IsInUnit ( unit ) then
59971: LD_VAR 0 1
59975: PPUSH
59976: CALL_OW 310
59980: NOT
59981: IFFALSE 59985
// exit ;
59983: GO 60045
// tmp := IsInUnit ( unit ) ;
59985: LD_ADDR_VAR 0 3
59989: PUSH
59990: LD_VAR 0 1
59994: PPUSH
59995: CALL_OW 310
59999: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60000: LD_VAR 0 3
60004: PPUSH
60005: CALL_OW 247
60009: PUSH
60010: LD_INT 2
60012: EQUAL
60013: IFFALSE 60026
// ComExitVehicle ( unit ) else
60015: LD_VAR 0 1
60019: PPUSH
60020: CALL_OW 121
60024: GO 60035
// ComExitBuilding ( unit ) ;
60026: LD_VAR 0 1
60030: PPUSH
60031: CALL_OW 122
// result := tmp ;
60035: LD_ADDR_VAR 0 2
60039: PUSH
60040: LD_VAR 0 3
60044: ST_TO_ADDR
// end ;
60045: LD_VAR 0 2
60049: RET
// export function ComExitAll ( units ) ; var i ; begin
60050: LD_INT 0
60052: PPUSH
60053: PPUSH
// if not units then
60054: LD_VAR 0 1
60058: NOT
60059: IFFALSE 60063
// exit ;
60061: GO 60089
// for i in units do
60063: LD_ADDR_VAR 0 3
60067: PUSH
60068: LD_VAR 0 1
60072: PUSH
60073: FOR_IN
60074: IFFALSE 60087
// ComExit ( i ) ;
60076: LD_VAR 0 3
60080: PPUSH
60081: CALL 59967 0 1
60085: GO 60073
60087: POP
60088: POP
// end ;
60089: LD_VAR 0 2
60093: RET
// export function ResetHc ; begin
60094: LD_INT 0
60096: PPUSH
// InitHc ;
60097: CALL_OW 19
// hc_importance := 0 ;
60101: LD_ADDR_OWVAR 32
60105: PUSH
60106: LD_INT 0
60108: ST_TO_ADDR
// end ;
60109: LD_VAR 0 1
60113: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60114: LD_INT 0
60116: PPUSH
60117: PPUSH
60118: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60119: LD_ADDR_VAR 0 6
60123: PUSH
60124: LD_VAR 0 1
60128: PUSH
60129: LD_VAR 0 3
60133: PLUS
60134: PUSH
60135: LD_INT 2
60137: DIV
60138: ST_TO_ADDR
// if _x < 0 then
60139: LD_VAR 0 6
60143: PUSH
60144: LD_INT 0
60146: LESS
60147: IFFALSE 60164
// _x := _x * - 1 ;
60149: LD_ADDR_VAR 0 6
60153: PUSH
60154: LD_VAR 0 6
60158: PUSH
60159: LD_INT 1
60161: NEG
60162: MUL
60163: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60164: LD_ADDR_VAR 0 7
60168: PUSH
60169: LD_VAR 0 2
60173: PUSH
60174: LD_VAR 0 4
60178: PLUS
60179: PUSH
60180: LD_INT 2
60182: DIV
60183: ST_TO_ADDR
// if _y < 0 then
60184: LD_VAR 0 7
60188: PUSH
60189: LD_INT 0
60191: LESS
60192: IFFALSE 60209
// _y := _y * - 1 ;
60194: LD_ADDR_VAR 0 7
60198: PUSH
60199: LD_VAR 0 7
60203: PUSH
60204: LD_INT 1
60206: NEG
60207: MUL
60208: ST_TO_ADDR
// result := [ _x , _y ] ;
60209: LD_ADDR_VAR 0 5
60213: PUSH
60214: LD_VAR 0 6
60218: PUSH
60219: LD_VAR 0 7
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: ST_TO_ADDR
// end ;
60228: LD_VAR 0 5
60232: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
60233: LD_INT 0
60235: PPUSH
60236: PPUSH
60237: PPUSH
60238: PPUSH
// task := GetTaskList ( unit ) ;
60239: LD_ADDR_VAR 0 7
60243: PUSH
60244: LD_VAR 0 1
60248: PPUSH
60249: CALL_OW 437
60253: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
60254: LD_VAR 0 7
60258: NOT
60259: PUSH
60260: LD_VAR 0 1
60264: PPUSH
60265: LD_VAR 0 2
60269: PPUSH
60270: CALL_OW 308
60274: NOT
60275: AND
60276: IFFALSE 60280
// exit ;
60278: GO 60398
// if IsInArea ( unit , area ) then
60280: LD_VAR 0 1
60284: PPUSH
60285: LD_VAR 0 2
60289: PPUSH
60290: CALL_OW 308
60294: IFFALSE 60312
// begin ComMoveToArea ( unit , goAway ) ;
60296: LD_VAR 0 1
60300: PPUSH
60301: LD_VAR 0 3
60305: PPUSH
60306: CALL_OW 113
// exit ;
60310: GO 60398
// end ; if task [ 1 ] [ 1 ] <> M then
60312: LD_VAR 0 7
60316: PUSH
60317: LD_INT 1
60319: ARRAY
60320: PUSH
60321: LD_INT 1
60323: ARRAY
60324: PUSH
60325: LD_STRING M
60327: NONEQUAL
60328: IFFALSE 60332
// exit ;
60330: GO 60398
// x := task [ 1 ] [ 2 ] ;
60332: LD_ADDR_VAR 0 5
60336: PUSH
60337: LD_VAR 0 7
60341: PUSH
60342: LD_INT 1
60344: ARRAY
60345: PUSH
60346: LD_INT 2
60348: ARRAY
60349: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60350: LD_ADDR_VAR 0 6
60354: PUSH
60355: LD_VAR 0 7
60359: PUSH
60360: LD_INT 1
60362: ARRAY
60363: PUSH
60364: LD_INT 3
60366: ARRAY
60367: ST_TO_ADDR
// if InArea ( x , y , area ) then
60368: LD_VAR 0 5
60372: PPUSH
60373: LD_VAR 0 6
60377: PPUSH
60378: LD_VAR 0 2
60382: PPUSH
60383: CALL_OW 309
60387: IFFALSE 60398
// ComStop ( unit ) ;
60389: LD_VAR 0 1
60393: PPUSH
60394: CALL_OW 141
// end ;
60398: LD_VAR 0 4
60402: RET
// export function Abs ( value ) ; begin
60403: LD_INT 0
60405: PPUSH
// result := value ;
60406: LD_ADDR_VAR 0 2
60410: PUSH
60411: LD_VAR 0 1
60415: ST_TO_ADDR
// if value < 0 then
60416: LD_VAR 0 1
60420: PUSH
60421: LD_INT 0
60423: LESS
60424: IFFALSE 60441
// result := value * - 1 ;
60426: LD_ADDR_VAR 0 2
60430: PUSH
60431: LD_VAR 0 1
60435: PUSH
60436: LD_INT 1
60438: NEG
60439: MUL
60440: ST_TO_ADDR
// end ;
60441: LD_VAR 0 2
60445: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60446: LD_INT 0
60448: PPUSH
60449: PPUSH
60450: PPUSH
60451: PPUSH
60452: PPUSH
60453: PPUSH
60454: PPUSH
60455: PPUSH
// if not unit or not building then
60456: LD_VAR 0 1
60460: NOT
60461: PUSH
60462: LD_VAR 0 2
60466: NOT
60467: OR
60468: IFFALSE 60472
// exit ;
60470: GO 60698
// x := GetX ( building ) ;
60472: LD_ADDR_VAR 0 4
60476: PUSH
60477: LD_VAR 0 2
60481: PPUSH
60482: CALL_OW 250
60486: ST_TO_ADDR
// y := GetY ( building ) ;
60487: LD_ADDR_VAR 0 6
60491: PUSH
60492: LD_VAR 0 2
60496: PPUSH
60497: CALL_OW 251
60501: ST_TO_ADDR
// d := GetDir ( building ) ;
60502: LD_ADDR_VAR 0 8
60506: PUSH
60507: LD_VAR 0 2
60511: PPUSH
60512: CALL_OW 254
60516: ST_TO_ADDR
// r := 4 ;
60517: LD_ADDR_VAR 0 9
60521: PUSH
60522: LD_INT 4
60524: ST_TO_ADDR
// for i := 1 to 5 do
60525: LD_ADDR_VAR 0 10
60529: PUSH
60530: DOUBLE
60531: LD_INT 1
60533: DEC
60534: ST_TO_ADDR
60535: LD_INT 5
60537: PUSH
60538: FOR_TO
60539: IFFALSE 60696
// begin _x := ShiftX ( x , d , r + i ) ;
60541: LD_ADDR_VAR 0 5
60545: PUSH
60546: LD_VAR 0 4
60550: PPUSH
60551: LD_VAR 0 8
60555: PPUSH
60556: LD_VAR 0 9
60560: PUSH
60561: LD_VAR 0 10
60565: PLUS
60566: PPUSH
60567: CALL_OW 272
60571: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60572: LD_ADDR_VAR 0 7
60576: PUSH
60577: LD_VAR 0 6
60581: PPUSH
60582: LD_VAR 0 8
60586: PPUSH
60587: LD_VAR 0 9
60591: PUSH
60592: LD_VAR 0 10
60596: PLUS
60597: PPUSH
60598: CALL_OW 273
60602: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60603: LD_VAR 0 5
60607: PPUSH
60608: LD_VAR 0 7
60612: PPUSH
60613: CALL_OW 488
60617: PUSH
60618: LD_VAR 0 5
60622: PPUSH
60623: LD_VAR 0 7
60627: PPUSH
60628: CALL_OW 428
60632: PPUSH
60633: CALL_OW 247
60637: PUSH
60638: LD_INT 3
60640: PUSH
60641: LD_INT 2
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: IN
60648: NOT
60649: AND
60650: IFFALSE 60694
// begin ComMoveXY ( unit , _x , _y ) ;
60652: LD_VAR 0 1
60656: PPUSH
60657: LD_VAR 0 5
60661: PPUSH
60662: LD_VAR 0 7
60666: PPUSH
60667: CALL_OW 111
// result := [ _x , _y ] ;
60671: LD_ADDR_VAR 0 3
60675: PUSH
60676: LD_VAR 0 5
60680: PUSH
60681: LD_VAR 0 7
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: ST_TO_ADDR
// exit ;
60690: POP
60691: POP
60692: GO 60698
// end ; end ;
60694: GO 60538
60696: POP
60697: POP
// end ;
60698: LD_VAR 0 3
60702: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60703: LD_INT 0
60705: PPUSH
60706: PPUSH
60707: PPUSH
// result := 0 ;
60708: LD_ADDR_VAR 0 3
60712: PUSH
60713: LD_INT 0
60715: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60716: LD_VAR 0 1
60720: PUSH
60721: LD_INT 0
60723: LESS
60724: PUSH
60725: LD_VAR 0 1
60729: PUSH
60730: LD_INT 8
60732: GREATER
60733: OR
60734: PUSH
60735: LD_VAR 0 2
60739: PUSH
60740: LD_INT 0
60742: LESS
60743: OR
60744: PUSH
60745: LD_VAR 0 2
60749: PUSH
60750: LD_INT 8
60752: GREATER
60753: OR
60754: IFFALSE 60758
// exit ;
60756: GO 60833
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60758: LD_ADDR_VAR 0 4
60762: PUSH
60763: LD_INT 22
60765: PUSH
60766: LD_VAR 0 2
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PPUSH
60775: CALL_OW 69
60779: PUSH
60780: FOR_IN
60781: IFFALSE 60831
// begin un := UnitShoot ( i ) ;
60783: LD_ADDR_VAR 0 5
60787: PUSH
60788: LD_VAR 0 4
60792: PPUSH
60793: CALL_OW 504
60797: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60798: LD_VAR 0 5
60802: PPUSH
60803: CALL_OW 255
60807: PUSH
60808: LD_VAR 0 1
60812: EQUAL
60813: IFFALSE 60829
// begin result := un ;
60815: LD_ADDR_VAR 0 3
60819: PUSH
60820: LD_VAR 0 5
60824: ST_TO_ADDR
// exit ;
60825: POP
60826: POP
60827: GO 60833
// end ; end ;
60829: GO 60780
60831: POP
60832: POP
// end ;
60833: LD_VAR 0 3
60837: RET
// export function GetCargoBay ( units ) ; begin
60838: LD_INT 0
60840: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60841: LD_ADDR_VAR 0 2
60845: PUSH
60846: LD_VAR 0 1
60850: PPUSH
60851: LD_INT 2
60853: PUSH
60854: LD_INT 34
60856: PUSH
60857: LD_INT 12
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 34
60866: PUSH
60867: LD_INT 51
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 34
60876: PUSH
60877: LD_INT 32
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 34
60886: PUSH
60887: LD_INT 89
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: PPUSH
60901: CALL_OW 72
60905: ST_TO_ADDR
// end ;
60906: LD_VAR 0 2
60910: RET
// export function Negate ( value ) ; begin
60911: LD_INT 0
60913: PPUSH
// result := not value ;
60914: LD_ADDR_VAR 0 2
60918: PUSH
60919: LD_VAR 0 1
60923: NOT
60924: ST_TO_ADDR
// end ;
60925: LD_VAR 0 2
60929: RET
// export function Inc ( value ) ; begin
60930: LD_INT 0
60932: PPUSH
// result := value + 1 ;
60933: LD_ADDR_VAR 0 2
60937: PUSH
60938: LD_VAR 0 1
60942: PUSH
60943: LD_INT 1
60945: PLUS
60946: ST_TO_ADDR
// end ;
60947: LD_VAR 0 2
60951: RET
// export function Dec ( value ) ; begin
60952: LD_INT 0
60954: PPUSH
// result := value - 1 ;
60955: LD_ADDR_VAR 0 2
60959: PUSH
60960: LD_VAR 0 1
60964: PUSH
60965: LD_INT 1
60967: MINUS
60968: ST_TO_ADDR
// end ;
60969: LD_VAR 0 2
60973: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60974: LD_INT 0
60976: PPUSH
60977: PPUSH
60978: PPUSH
60979: PPUSH
60980: PPUSH
60981: PPUSH
60982: PPUSH
60983: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60984: LD_VAR 0 1
60988: PPUSH
60989: LD_VAR 0 2
60993: PPUSH
60994: CALL_OW 488
60998: NOT
60999: PUSH
61000: LD_VAR 0 3
61004: PPUSH
61005: LD_VAR 0 4
61009: PPUSH
61010: CALL_OW 488
61014: NOT
61015: OR
61016: IFFALSE 61029
// begin result := - 1 ;
61018: LD_ADDR_VAR 0 5
61022: PUSH
61023: LD_INT 1
61025: NEG
61026: ST_TO_ADDR
// exit ;
61027: GO 61264
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
61029: LD_ADDR_VAR 0 12
61033: PUSH
61034: LD_VAR 0 1
61038: PPUSH
61039: LD_VAR 0 2
61043: PPUSH
61044: LD_VAR 0 3
61048: PPUSH
61049: LD_VAR 0 4
61053: PPUSH
61054: CALL 60114 0 4
61058: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
61059: LD_ADDR_VAR 0 11
61063: PUSH
61064: LD_VAR 0 1
61068: PPUSH
61069: LD_VAR 0 2
61073: PPUSH
61074: LD_VAR 0 12
61078: PUSH
61079: LD_INT 1
61081: ARRAY
61082: PPUSH
61083: LD_VAR 0 12
61087: PUSH
61088: LD_INT 2
61090: ARRAY
61091: PPUSH
61092: CALL_OW 298
61096: ST_TO_ADDR
// distance := 9999 ;
61097: LD_ADDR_VAR 0 10
61101: PUSH
61102: LD_INT 9999
61104: ST_TO_ADDR
// for i := 0 to 5 do
61105: LD_ADDR_VAR 0 6
61109: PUSH
61110: DOUBLE
61111: LD_INT 0
61113: DEC
61114: ST_TO_ADDR
61115: LD_INT 5
61117: PUSH
61118: FOR_TO
61119: IFFALSE 61262
// begin _x := ShiftX ( x1 , i , centerDist ) ;
61121: LD_ADDR_VAR 0 7
61125: PUSH
61126: LD_VAR 0 1
61130: PPUSH
61131: LD_VAR 0 6
61135: PPUSH
61136: LD_VAR 0 11
61140: PPUSH
61141: CALL_OW 272
61145: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
61146: LD_ADDR_VAR 0 8
61150: PUSH
61151: LD_VAR 0 2
61155: PPUSH
61156: LD_VAR 0 6
61160: PPUSH
61161: LD_VAR 0 11
61165: PPUSH
61166: CALL_OW 273
61170: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61171: LD_VAR 0 7
61175: PPUSH
61176: LD_VAR 0 8
61180: PPUSH
61181: CALL_OW 488
61185: NOT
61186: IFFALSE 61190
// continue ;
61188: GO 61118
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
61190: LD_ADDR_VAR 0 9
61194: PUSH
61195: LD_VAR 0 12
61199: PUSH
61200: LD_INT 1
61202: ARRAY
61203: PPUSH
61204: LD_VAR 0 12
61208: PUSH
61209: LD_INT 2
61211: ARRAY
61212: PPUSH
61213: LD_VAR 0 7
61217: PPUSH
61218: LD_VAR 0 8
61222: PPUSH
61223: CALL_OW 298
61227: ST_TO_ADDR
// if tmp < distance then
61228: LD_VAR 0 9
61232: PUSH
61233: LD_VAR 0 10
61237: LESS
61238: IFFALSE 61260
// begin result := i ;
61240: LD_ADDR_VAR 0 5
61244: PUSH
61245: LD_VAR 0 6
61249: ST_TO_ADDR
// distance := tmp ;
61250: LD_ADDR_VAR 0 10
61254: PUSH
61255: LD_VAR 0 9
61259: ST_TO_ADDR
// end ; end ;
61260: GO 61118
61262: POP
61263: POP
// end ;
61264: LD_VAR 0 5
61268: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61269: LD_INT 0
61271: PPUSH
61272: PPUSH
// if not driver or not IsInUnit ( driver ) then
61273: LD_VAR 0 1
61277: NOT
61278: PUSH
61279: LD_VAR 0 1
61283: PPUSH
61284: CALL_OW 310
61288: NOT
61289: OR
61290: IFFALSE 61294
// exit ;
61292: GO 61384
// vehicle := IsInUnit ( driver ) ;
61294: LD_ADDR_VAR 0 3
61298: PUSH
61299: LD_VAR 0 1
61303: PPUSH
61304: CALL_OW 310
61308: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61309: LD_VAR 0 1
61313: PPUSH
61314: LD_STRING \
61316: PUSH
61317: LD_INT 0
61319: PUSH
61320: LD_INT 0
61322: PUSH
61323: LD_INT 0
61325: PUSH
61326: LD_INT 0
61328: PUSH
61329: LD_INT 0
61331: PUSH
61332: LD_INT 0
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: PUSH
61344: LD_STRING E
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: LD_INT 0
61352: PUSH
61353: LD_VAR 0 3
61357: PUSH
61358: LD_INT 0
61360: PUSH
61361: LD_INT 0
61363: PUSH
61364: LD_INT 0
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PPUSH
61380: CALL_OW 446
// end ;
61384: LD_VAR 0 2
61388: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61389: LD_INT 0
61391: PPUSH
61392: PPUSH
// if not driver or not IsInUnit ( driver ) then
61393: LD_VAR 0 1
61397: NOT
61398: PUSH
61399: LD_VAR 0 1
61403: PPUSH
61404: CALL_OW 310
61408: NOT
61409: OR
61410: IFFALSE 61414
// exit ;
61412: GO 61504
// vehicle := IsInUnit ( driver ) ;
61414: LD_ADDR_VAR 0 3
61418: PUSH
61419: LD_VAR 0 1
61423: PPUSH
61424: CALL_OW 310
61428: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61429: LD_VAR 0 1
61433: PPUSH
61434: LD_STRING \
61436: PUSH
61437: LD_INT 0
61439: PUSH
61440: LD_INT 0
61442: PUSH
61443: LD_INT 0
61445: PUSH
61446: LD_INT 0
61448: PUSH
61449: LD_INT 0
61451: PUSH
61452: LD_INT 0
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: PUSH
61464: LD_STRING E
61466: PUSH
61467: LD_INT 0
61469: PUSH
61470: LD_INT 0
61472: PUSH
61473: LD_VAR 0 3
61477: PUSH
61478: LD_INT 0
61480: PUSH
61481: LD_INT 0
61483: PUSH
61484: LD_INT 0
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PPUSH
61500: CALL_OW 447
// end ;
61504: LD_VAR 0 2
61508: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61509: LD_INT 0
61511: PPUSH
61512: PPUSH
61513: PPUSH
// tmp := [ ] ;
61514: LD_ADDR_VAR 0 5
61518: PUSH
61519: EMPTY
61520: ST_TO_ADDR
// for i in units do
61521: LD_ADDR_VAR 0 4
61525: PUSH
61526: LD_VAR 0 1
61530: PUSH
61531: FOR_IN
61532: IFFALSE 61570
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61534: LD_ADDR_VAR 0 5
61538: PUSH
61539: LD_VAR 0 5
61543: PPUSH
61544: LD_VAR 0 5
61548: PUSH
61549: LD_INT 1
61551: PLUS
61552: PPUSH
61553: LD_VAR 0 4
61557: PPUSH
61558: CALL_OW 256
61562: PPUSH
61563: CALL_OW 2
61567: ST_TO_ADDR
61568: GO 61531
61570: POP
61571: POP
// if not tmp then
61572: LD_VAR 0 5
61576: NOT
61577: IFFALSE 61581
// exit ;
61579: GO 61629
// if asc then
61581: LD_VAR 0 2
61585: IFFALSE 61609
// result := SortListByListAsc ( units , tmp ) else
61587: LD_ADDR_VAR 0 3
61591: PUSH
61592: LD_VAR 0 1
61596: PPUSH
61597: LD_VAR 0 5
61601: PPUSH
61602: CALL_OW 76
61606: ST_TO_ADDR
61607: GO 61629
// result := SortListByListDesc ( units , tmp ) ;
61609: LD_ADDR_VAR 0 3
61613: PUSH
61614: LD_VAR 0 1
61618: PPUSH
61619: LD_VAR 0 5
61623: PPUSH
61624: CALL_OW 77
61628: ST_TO_ADDR
// end ;
61629: LD_VAR 0 3
61633: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61634: LD_INT 0
61636: PPUSH
61637: PPUSH
// task := GetTaskList ( mech ) ;
61638: LD_ADDR_VAR 0 4
61642: PUSH
61643: LD_VAR 0 1
61647: PPUSH
61648: CALL_OW 437
61652: ST_TO_ADDR
// if not task then
61653: LD_VAR 0 4
61657: NOT
61658: IFFALSE 61662
// exit ;
61660: GO 61704
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61662: LD_ADDR_VAR 0 3
61666: PUSH
61667: LD_VAR 0 4
61671: PUSH
61672: LD_INT 1
61674: ARRAY
61675: PUSH
61676: LD_INT 1
61678: ARRAY
61679: PUSH
61680: LD_STRING r
61682: EQUAL
61683: PUSH
61684: LD_VAR 0 4
61688: PUSH
61689: LD_INT 1
61691: ARRAY
61692: PUSH
61693: LD_INT 4
61695: ARRAY
61696: PUSH
61697: LD_VAR 0 2
61701: EQUAL
61702: AND
61703: ST_TO_ADDR
// end ;
61704: LD_VAR 0 3
61708: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61709: LD_INT 0
61711: PPUSH
// SetDir ( unit , d ) ;
61712: LD_VAR 0 1
61716: PPUSH
61717: LD_VAR 0 4
61721: PPUSH
61722: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61726: LD_VAR 0 1
61730: PPUSH
61731: LD_VAR 0 2
61735: PPUSH
61736: LD_VAR 0 3
61740: PPUSH
61741: LD_VAR 0 5
61745: PPUSH
61746: CALL_OW 48
// end ;
61750: LD_VAR 0 6
61754: RET
// export function ToNaturalNumber ( number ) ; begin
61755: LD_INT 0
61757: PPUSH
// result := number div 1 ;
61758: LD_ADDR_VAR 0 2
61762: PUSH
61763: LD_VAR 0 1
61767: PUSH
61768: LD_INT 1
61770: DIV
61771: ST_TO_ADDR
// if number < 0 then
61772: LD_VAR 0 1
61776: PUSH
61777: LD_INT 0
61779: LESS
61780: IFFALSE 61790
// result := 0 ;
61782: LD_ADDR_VAR 0 2
61786: PUSH
61787: LD_INT 0
61789: ST_TO_ADDR
// end ;
61790: LD_VAR 0 2
61794: RET
// export function SortByClass ( units , class ) ; var un ; begin
61795: LD_INT 0
61797: PPUSH
61798: PPUSH
// if not units or not class then
61799: LD_VAR 0 1
61803: NOT
61804: PUSH
61805: LD_VAR 0 2
61809: NOT
61810: OR
61811: IFFALSE 61815
// exit ;
61813: GO 61910
// result := [ ] ;
61815: LD_ADDR_VAR 0 3
61819: PUSH
61820: EMPTY
61821: ST_TO_ADDR
// for un in units do
61822: LD_ADDR_VAR 0 4
61826: PUSH
61827: LD_VAR 0 1
61831: PUSH
61832: FOR_IN
61833: IFFALSE 61908
// if GetClass ( un ) = class then
61835: LD_VAR 0 4
61839: PPUSH
61840: CALL_OW 257
61844: PUSH
61845: LD_VAR 0 2
61849: EQUAL
61850: IFFALSE 61877
// result := Insert ( result , 1 , un ) else
61852: LD_ADDR_VAR 0 3
61856: PUSH
61857: LD_VAR 0 3
61861: PPUSH
61862: LD_INT 1
61864: PPUSH
61865: LD_VAR 0 4
61869: PPUSH
61870: CALL_OW 2
61874: ST_TO_ADDR
61875: GO 61906
// result := Replace ( result , result + 1 , un ) ;
61877: LD_ADDR_VAR 0 3
61881: PUSH
61882: LD_VAR 0 3
61886: PPUSH
61887: LD_VAR 0 3
61891: PUSH
61892: LD_INT 1
61894: PLUS
61895: PPUSH
61896: LD_VAR 0 4
61900: PPUSH
61901: CALL_OW 1
61905: ST_TO_ADDR
61906: GO 61832
61908: POP
61909: POP
// end ;
61910: LD_VAR 0 3
61914: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61915: LD_INT 0
61917: PPUSH
61918: PPUSH
61919: PPUSH
61920: PPUSH
61921: PPUSH
61922: PPUSH
61923: PPUSH
// result := [ ] ;
61924: LD_ADDR_VAR 0 4
61928: PUSH
61929: EMPTY
61930: ST_TO_ADDR
// if x - r < 0 then
61931: LD_VAR 0 1
61935: PUSH
61936: LD_VAR 0 3
61940: MINUS
61941: PUSH
61942: LD_INT 0
61944: LESS
61945: IFFALSE 61957
// min_x := 0 else
61947: LD_ADDR_VAR 0 8
61951: PUSH
61952: LD_INT 0
61954: ST_TO_ADDR
61955: GO 61973
// min_x := x - r ;
61957: LD_ADDR_VAR 0 8
61961: PUSH
61962: LD_VAR 0 1
61966: PUSH
61967: LD_VAR 0 3
61971: MINUS
61972: ST_TO_ADDR
// if y - r < 0 then
61973: LD_VAR 0 2
61977: PUSH
61978: LD_VAR 0 3
61982: MINUS
61983: PUSH
61984: LD_INT 0
61986: LESS
61987: IFFALSE 61999
// min_y := 0 else
61989: LD_ADDR_VAR 0 7
61993: PUSH
61994: LD_INT 0
61996: ST_TO_ADDR
61997: GO 62015
// min_y := y - r ;
61999: LD_ADDR_VAR 0 7
62003: PUSH
62004: LD_VAR 0 2
62008: PUSH
62009: LD_VAR 0 3
62013: MINUS
62014: ST_TO_ADDR
// max_x := x + r ;
62015: LD_ADDR_VAR 0 9
62019: PUSH
62020: LD_VAR 0 1
62024: PUSH
62025: LD_VAR 0 3
62029: PLUS
62030: ST_TO_ADDR
// max_y := y + r ;
62031: LD_ADDR_VAR 0 10
62035: PUSH
62036: LD_VAR 0 2
62040: PUSH
62041: LD_VAR 0 3
62045: PLUS
62046: ST_TO_ADDR
// for _x = min_x to max_x do
62047: LD_ADDR_VAR 0 5
62051: PUSH
62052: DOUBLE
62053: LD_VAR 0 8
62057: DEC
62058: ST_TO_ADDR
62059: LD_VAR 0 9
62063: PUSH
62064: FOR_TO
62065: IFFALSE 62166
// for _y = min_y to max_y do
62067: LD_ADDR_VAR 0 6
62071: PUSH
62072: DOUBLE
62073: LD_VAR 0 7
62077: DEC
62078: ST_TO_ADDR
62079: LD_VAR 0 10
62083: PUSH
62084: FOR_TO
62085: IFFALSE 62162
// begin if not ValidHex ( _x , _y ) then
62087: LD_VAR 0 5
62091: PPUSH
62092: LD_VAR 0 6
62096: PPUSH
62097: CALL_OW 488
62101: NOT
62102: IFFALSE 62106
// continue ;
62104: GO 62084
// if GetResourceTypeXY ( _x , _y ) then
62106: LD_VAR 0 5
62110: PPUSH
62111: LD_VAR 0 6
62115: PPUSH
62116: CALL_OW 283
62120: IFFALSE 62160
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
62122: LD_ADDR_VAR 0 4
62126: PUSH
62127: LD_VAR 0 4
62131: PPUSH
62132: LD_VAR 0 4
62136: PUSH
62137: LD_INT 1
62139: PLUS
62140: PPUSH
62141: LD_VAR 0 5
62145: PUSH
62146: LD_VAR 0 6
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PPUSH
62155: CALL_OW 1
62159: ST_TO_ADDR
// end ;
62160: GO 62084
62162: POP
62163: POP
62164: GO 62064
62166: POP
62167: POP
// end ;
62168: LD_VAR 0 4
62172: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
62173: LD_INT 0
62175: PPUSH
62176: PPUSH
62177: PPUSH
62178: PPUSH
62179: PPUSH
62180: PPUSH
62181: PPUSH
62182: PPUSH
// if not units then
62183: LD_VAR 0 1
62187: NOT
62188: IFFALSE 62192
// exit ;
62190: GO 62716
// result := UnitFilter ( units , [ f_ok ] ) ;
62192: LD_ADDR_VAR 0 3
62196: PUSH
62197: LD_VAR 0 1
62201: PPUSH
62202: LD_INT 50
62204: PUSH
62205: EMPTY
62206: LIST
62207: PPUSH
62208: CALL_OW 72
62212: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
62213: LD_ADDR_VAR 0 8
62217: PUSH
62218: LD_VAR 0 1
62222: PUSH
62223: LD_INT 1
62225: ARRAY
62226: PPUSH
62227: CALL_OW 255
62231: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
62232: LD_ADDR_VAR 0 10
62236: PUSH
62237: LD_INT 29
62239: PUSH
62240: LD_INT 91
62242: PUSH
62243: LD_INT 49
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: LIST
62250: ST_TO_ADDR
// if not result then
62251: LD_VAR 0 3
62255: NOT
62256: IFFALSE 62260
// exit ;
62258: GO 62716
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
62260: LD_ADDR_VAR 0 5
62264: PUSH
62265: LD_INT 81
62267: PUSH
62268: LD_VAR 0 8
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PPUSH
62277: CALL_OW 69
62281: ST_TO_ADDR
// for i in result do
62282: LD_ADDR_VAR 0 4
62286: PUSH
62287: LD_VAR 0 3
62291: PUSH
62292: FOR_IN
62293: IFFALSE 62714
// begin tag := GetTag ( i ) + 1 ;
62295: LD_ADDR_VAR 0 9
62299: PUSH
62300: LD_VAR 0 4
62304: PPUSH
62305: CALL_OW 110
62309: PUSH
62310: LD_INT 1
62312: PLUS
62313: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
62314: LD_ADDR_VAR 0 7
62318: PUSH
62319: LD_VAR 0 4
62323: PPUSH
62324: CALL_OW 250
62328: PPUSH
62329: LD_VAR 0 4
62333: PPUSH
62334: CALL_OW 251
62338: PPUSH
62339: LD_INT 6
62341: PPUSH
62342: CALL 61915 0 3
62346: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
62347: LD_VAR 0 4
62351: PPUSH
62352: CALL_OW 247
62356: PUSH
62357: LD_INT 2
62359: EQUAL
62360: PUSH
62361: LD_VAR 0 7
62365: AND
62366: PUSH
62367: LD_VAR 0 4
62371: PPUSH
62372: CALL_OW 264
62376: PUSH
62377: LD_VAR 0 10
62381: IN
62382: NOT
62383: AND
62384: IFFALSE 62423
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
62386: LD_VAR 0 4
62390: PPUSH
62391: LD_VAR 0 7
62395: PUSH
62396: LD_INT 1
62398: ARRAY
62399: PUSH
62400: LD_INT 1
62402: ARRAY
62403: PPUSH
62404: LD_VAR 0 7
62408: PUSH
62409: LD_INT 1
62411: ARRAY
62412: PUSH
62413: LD_INT 2
62415: ARRAY
62416: PPUSH
62417: CALL_OW 116
62421: GO 62712
// if path > tag then
62423: LD_VAR 0 2
62427: PUSH
62428: LD_VAR 0 9
62432: GREATER
62433: IFFALSE 62641
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
62435: LD_ADDR_VAR 0 6
62439: PUSH
62440: LD_VAR 0 5
62444: PPUSH
62445: LD_INT 91
62447: PUSH
62448: LD_VAR 0 4
62452: PUSH
62453: LD_INT 8
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: LIST
62460: PPUSH
62461: CALL_OW 72
62465: ST_TO_ADDR
// if nearEnemy then
62466: LD_VAR 0 6
62470: IFFALSE 62539
// begin if GetWeapon ( i ) = ru_time_lapser then
62472: LD_VAR 0 4
62476: PPUSH
62477: CALL_OW 264
62481: PUSH
62482: LD_INT 49
62484: EQUAL
62485: IFFALSE 62513
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
62487: LD_VAR 0 4
62491: PPUSH
62492: LD_VAR 0 6
62496: PPUSH
62497: LD_VAR 0 4
62501: PPUSH
62502: CALL_OW 74
62506: PPUSH
62507: CALL_OW 112
62511: GO 62537
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
62513: LD_VAR 0 4
62517: PPUSH
62518: LD_VAR 0 6
62522: PPUSH
62523: LD_VAR 0 4
62527: PPUSH
62528: CALL_OW 74
62532: PPUSH
62533: CALL_OW 115
// end else
62537: GO 62639
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62539: LD_VAR 0 4
62543: PPUSH
62544: LD_VAR 0 2
62548: PUSH
62549: LD_VAR 0 9
62553: ARRAY
62554: PUSH
62555: LD_INT 1
62557: ARRAY
62558: PPUSH
62559: LD_VAR 0 2
62563: PUSH
62564: LD_VAR 0 9
62568: ARRAY
62569: PUSH
62570: LD_INT 2
62572: ARRAY
62573: PPUSH
62574: CALL_OW 297
62578: PUSH
62579: LD_INT 6
62581: GREATER
62582: IFFALSE 62625
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62584: LD_VAR 0 4
62588: PPUSH
62589: LD_VAR 0 2
62593: PUSH
62594: LD_VAR 0 9
62598: ARRAY
62599: PUSH
62600: LD_INT 1
62602: ARRAY
62603: PPUSH
62604: LD_VAR 0 2
62608: PUSH
62609: LD_VAR 0 9
62613: ARRAY
62614: PUSH
62615: LD_INT 2
62617: ARRAY
62618: PPUSH
62619: CALL_OW 114
62623: GO 62639
// SetTag ( i , tag ) ;
62625: LD_VAR 0 4
62629: PPUSH
62630: LD_VAR 0 9
62634: PPUSH
62635: CALL_OW 109
// end else
62639: GO 62712
// if enemy then
62641: LD_VAR 0 5
62645: IFFALSE 62712
// begin if GetWeapon ( i ) = ru_time_lapser then
62647: LD_VAR 0 4
62651: PPUSH
62652: CALL_OW 264
62656: PUSH
62657: LD_INT 49
62659: EQUAL
62660: IFFALSE 62688
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
62662: LD_VAR 0 4
62666: PPUSH
62667: LD_VAR 0 5
62671: PPUSH
62672: LD_VAR 0 4
62676: PPUSH
62677: CALL_OW 74
62681: PPUSH
62682: CALL_OW 112
62686: GO 62712
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62688: LD_VAR 0 4
62692: PPUSH
62693: LD_VAR 0 5
62697: PPUSH
62698: LD_VAR 0 4
62702: PPUSH
62703: CALL_OW 74
62707: PPUSH
62708: CALL_OW 115
// end ; end ;
62712: GO 62292
62714: POP
62715: POP
// end ;
62716: LD_VAR 0 3
62720: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62721: LD_INT 0
62723: PPUSH
62724: PPUSH
62725: PPUSH
// if not unit or IsInUnit ( unit ) then
62726: LD_VAR 0 1
62730: NOT
62731: PUSH
62732: LD_VAR 0 1
62736: PPUSH
62737: CALL_OW 310
62741: OR
62742: IFFALSE 62746
// exit ;
62744: GO 62837
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62746: LD_ADDR_VAR 0 4
62750: PUSH
62751: LD_VAR 0 1
62755: PPUSH
62756: CALL_OW 250
62760: PPUSH
62761: LD_VAR 0 2
62765: PPUSH
62766: LD_INT 1
62768: PPUSH
62769: CALL_OW 272
62773: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62774: LD_ADDR_VAR 0 5
62778: PUSH
62779: LD_VAR 0 1
62783: PPUSH
62784: CALL_OW 251
62788: PPUSH
62789: LD_VAR 0 2
62793: PPUSH
62794: LD_INT 1
62796: PPUSH
62797: CALL_OW 273
62801: ST_TO_ADDR
// if ValidHex ( x , y ) then
62802: LD_VAR 0 4
62806: PPUSH
62807: LD_VAR 0 5
62811: PPUSH
62812: CALL_OW 488
62816: IFFALSE 62837
// ComTurnXY ( unit , x , y ) ;
62818: LD_VAR 0 1
62822: PPUSH
62823: LD_VAR 0 4
62827: PPUSH
62828: LD_VAR 0 5
62832: PPUSH
62833: CALL_OW 118
// end ;
62837: LD_VAR 0 3
62841: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62842: LD_INT 0
62844: PPUSH
62845: PPUSH
// result := false ;
62846: LD_ADDR_VAR 0 3
62850: PUSH
62851: LD_INT 0
62853: ST_TO_ADDR
// if not units then
62854: LD_VAR 0 2
62858: NOT
62859: IFFALSE 62863
// exit ;
62861: GO 62908
// for i in units do
62863: LD_ADDR_VAR 0 4
62867: PUSH
62868: LD_VAR 0 2
62872: PUSH
62873: FOR_IN
62874: IFFALSE 62906
// if See ( side , i ) then
62876: LD_VAR 0 1
62880: PPUSH
62881: LD_VAR 0 4
62885: PPUSH
62886: CALL_OW 292
62890: IFFALSE 62904
// begin result := true ;
62892: LD_ADDR_VAR 0 3
62896: PUSH
62897: LD_INT 1
62899: ST_TO_ADDR
// exit ;
62900: POP
62901: POP
62902: GO 62908
// end ;
62904: GO 62873
62906: POP
62907: POP
// end ;
62908: LD_VAR 0 3
62912: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62913: LD_INT 0
62915: PPUSH
62916: PPUSH
62917: PPUSH
62918: PPUSH
// if not unit or not points then
62919: LD_VAR 0 1
62923: NOT
62924: PUSH
62925: LD_VAR 0 2
62929: NOT
62930: OR
62931: IFFALSE 62935
// exit ;
62933: GO 63025
// dist := 99999 ;
62935: LD_ADDR_VAR 0 5
62939: PUSH
62940: LD_INT 99999
62942: ST_TO_ADDR
// for i in points do
62943: LD_ADDR_VAR 0 4
62947: PUSH
62948: LD_VAR 0 2
62952: PUSH
62953: FOR_IN
62954: IFFALSE 63023
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62956: LD_ADDR_VAR 0 6
62960: PUSH
62961: LD_VAR 0 1
62965: PPUSH
62966: LD_VAR 0 4
62970: PUSH
62971: LD_INT 1
62973: ARRAY
62974: PPUSH
62975: LD_VAR 0 4
62979: PUSH
62980: LD_INT 2
62982: ARRAY
62983: PPUSH
62984: CALL_OW 297
62988: ST_TO_ADDR
// if tmpDist < dist then
62989: LD_VAR 0 6
62993: PUSH
62994: LD_VAR 0 5
62998: LESS
62999: IFFALSE 63021
// begin result := i ;
63001: LD_ADDR_VAR 0 3
63005: PUSH
63006: LD_VAR 0 4
63010: ST_TO_ADDR
// dist := tmpDist ;
63011: LD_ADDR_VAR 0 5
63015: PUSH
63016: LD_VAR 0 6
63020: ST_TO_ADDR
// end ; end ;
63021: GO 62953
63023: POP
63024: POP
// end ;
63025: LD_VAR 0 3
63029: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
63030: LD_INT 0
63032: PPUSH
// uc_side := side ;
63033: LD_ADDR_OWVAR 20
63037: PUSH
63038: LD_VAR 0 1
63042: ST_TO_ADDR
// uc_nation := 3 ;
63043: LD_ADDR_OWVAR 21
63047: PUSH
63048: LD_INT 3
63050: ST_TO_ADDR
// vc_chassis := 25 ;
63051: LD_ADDR_OWVAR 37
63055: PUSH
63056: LD_INT 25
63058: ST_TO_ADDR
// vc_engine := engine_siberite ;
63059: LD_ADDR_OWVAR 39
63063: PUSH
63064: LD_INT 3
63066: ST_TO_ADDR
// vc_control := control_computer ;
63067: LD_ADDR_OWVAR 38
63071: PUSH
63072: LD_INT 3
63074: ST_TO_ADDR
// vc_weapon := 59 ;
63075: LD_ADDR_OWVAR 40
63079: PUSH
63080: LD_INT 59
63082: ST_TO_ADDR
// result := CreateVehicle ;
63083: LD_ADDR_VAR 0 5
63087: PUSH
63088: CALL_OW 45
63092: ST_TO_ADDR
// SetDir ( result , d ) ;
63093: LD_VAR 0 5
63097: PPUSH
63098: LD_VAR 0 4
63102: PPUSH
63103: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
63107: LD_VAR 0 5
63111: PPUSH
63112: LD_VAR 0 2
63116: PPUSH
63117: LD_VAR 0 3
63121: PPUSH
63122: LD_INT 0
63124: PPUSH
63125: CALL_OW 48
// end ;
63129: LD_VAR 0 5
63133: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
63134: LD_INT 0
63136: PPUSH
63137: PPUSH
63138: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
63139: LD_ADDR_VAR 0 2
63143: PUSH
63144: LD_INT 0
63146: PUSH
63147: LD_INT 0
63149: PUSH
63150: LD_INT 0
63152: PUSH
63153: LD_INT 0
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
63162: LD_VAR 0 1
63166: NOT
63167: PUSH
63168: LD_VAR 0 1
63172: PPUSH
63173: CALL_OW 264
63177: PUSH
63178: LD_INT 12
63180: PUSH
63181: LD_INT 51
63183: PUSH
63184: LD_INT 32
63186: PUSH
63187: LD_INT 89
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: IN
63196: NOT
63197: OR
63198: IFFALSE 63202
// exit ;
63200: GO 63300
// for i := 1 to 3 do
63202: LD_ADDR_VAR 0 3
63206: PUSH
63207: DOUBLE
63208: LD_INT 1
63210: DEC
63211: ST_TO_ADDR
63212: LD_INT 3
63214: PUSH
63215: FOR_TO
63216: IFFALSE 63298
// begin tmp := GetCargo ( cargo , i ) ;
63218: LD_ADDR_VAR 0 4
63222: PUSH
63223: LD_VAR 0 1
63227: PPUSH
63228: LD_VAR 0 3
63232: PPUSH
63233: CALL_OW 289
63237: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
63238: LD_ADDR_VAR 0 2
63242: PUSH
63243: LD_VAR 0 2
63247: PPUSH
63248: LD_VAR 0 3
63252: PPUSH
63253: LD_VAR 0 4
63257: PPUSH
63258: CALL_OW 1
63262: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
63263: LD_ADDR_VAR 0 2
63267: PUSH
63268: LD_VAR 0 2
63272: PPUSH
63273: LD_INT 4
63275: PPUSH
63276: LD_VAR 0 2
63280: PUSH
63281: LD_INT 4
63283: ARRAY
63284: PUSH
63285: LD_VAR 0 4
63289: PLUS
63290: PPUSH
63291: CALL_OW 1
63295: ST_TO_ADDR
// end ;
63296: GO 63215
63298: POP
63299: POP
// end ;
63300: LD_VAR 0 2
63304: RET
// export function Length ( array ) ; begin
63305: LD_INT 0
63307: PPUSH
// result := array + 0 ;
63308: LD_ADDR_VAR 0 2
63312: PUSH
63313: LD_VAR 0 1
63317: PUSH
63318: LD_INT 0
63320: PLUS
63321: ST_TO_ADDR
// end ;
63322: LD_VAR 0 2
63326: RET
// export function PrepareArray ( array ) ; begin
63327: LD_INT 0
63329: PPUSH
// result := array diff 0 ;
63330: LD_ADDR_VAR 0 2
63334: PUSH
63335: LD_VAR 0 1
63339: PUSH
63340: LD_INT 0
63342: DIFF
63343: ST_TO_ADDR
// if not result [ 1 ] then
63344: LD_VAR 0 2
63348: PUSH
63349: LD_INT 1
63351: ARRAY
63352: NOT
63353: IFFALSE 63373
// result := Delete ( result , 1 ) ;
63355: LD_ADDR_VAR 0 2
63359: PUSH
63360: LD_VAR 0 2
63364: PPUSH
63365: LD_INT 1
63367: PPUSH
63368: CALL_OW 3
63372: ST_TO_ADDR
// end ;
63373: LD_VAR 0 2
63377: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
63378: LD_INT 0
63380: PPUSH
63381: PPUSH
63382: PPUSH
63383: PPUSH
// sibRocketRange := 25 ;
63384: LD_ADDR_VAR 0 6
63388: PUSH
63389: LD_INT 25
63391: ST_TO_ADDR
// result := false ;
63392: LD_ADDR_VAR 0 4
63396: PUSH
63397: LD_INT 0
63399: ST_TO_ADDR
// for i := 0 to 5 do
63400: LD_ADDR_VAR 0 5
63404: PUSH
63405: DOUBLE
63406: LD_INT 0
63408: DEC
63409: ST_TO_ADDR
63410: LD_INT 5
63412: PUSH
63413: FOR_TO
63414: IFFALSE 63481
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
63416: LD_VAR 0 1
63420: PPUSH
63421: LD_VAR 0 5
63425: PPUSH
63426: LD_VAR 0 6
63430: PPUSH
63431: CALL_OW 272
63435: PPUSH
63436: LD_VAR 0 2
63440: PPUSH
63441: LD_VAR 0 5
63445: PPUSH
63446: LD_VAR 0 6
63450: PPUSH
63451: CALL_OW 273
63455: PPUSH
63456: LD_VAR 0 3
63460: PPUSH
63461: CALL_OW 309
63465: IFFALSE 63479
// begin result := true ;
63467: LD_ADDR_VAR 0 4
63471: PUSH
63472: LD_INT 1
63474: ST_TO_ADDR
// exit ;
63475: POP
63476: POP
63477: GO 63483
// end ;
63479: GO 63413
63481: POP
63482: POP
// end ;
63483: LD_VAR 0 4
63487: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
63488: LD_INT 0
63490: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
63491: LD_VAR 0 1
63495: PPUSH
63496: LD_VAR 0 2
63500: PPUSH
63501: LD_INT 0
63503: PPUSH
63504: LD_INT 0
63506: PPUSH
63507: LD_INT 1
63509: PPUSH
63510: LD_INT 0
63512: PPUSH
63513: CALL_OW 587
// end ; end_of_file
63517: LD_VAR 0 3
63521: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
63522: LD_VAR 0 1
63526: PPUSH
63527: LD_VAR 0 2
63531: PPUSH
63532: LD_VAR 0 3
63536: PPUSH
63537: LD_VAR 0 4
63541: PPUSH
63542: LD_VAR 0 5
63546: PPUSH
63547: LD_VAR 0 6
63551: PPUSH
63552: CALL 2010 0 6
// end ;
63556: PPOPN 6
63558: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63559: LD_INT 0
63561: PPUSH
// begin if not units then
63562: LD_VAR 0 1
63566: NOT
63567: IFFALSE 63571
// exit ;
63569: GO 63571
// end ;
63571: PPOPN 7
63573: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
63574: CALL 1914 0 0
// end ;
63578: PPOPN 1
63580: END
