// starting begin ResetFog ;
   0: CALL_OW 335
// CenterNowOnXY ( 136 , 106 ) ;
   4: LD_INT 136
   6: PPUSH
   7: LD_INT 106
   9: PPUSH
  10: CALL_OW 86
// Init ;
  14: CALL 75 0 0
// CreateNature ( natArea , watArea , [ 10 , 2 * Difficulty , 6 , 6 , 3 * Difficulty , 6 , 4 ] ) ;
  18: LD_INT 2
  20: PPUSH
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 10
  26: PUSH
  27: LD_INT 2
  29: PUSH
  30: LD_OWVAR 67
  34: MUL
  35: PUSH
  36: LD_INT 6
  38: PUSH
  39: LD_INT 6
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: LD_OWVAR 67
  49: MUL
  50: PUSH
  51: LD_INT 6
  53: PUSH
  54: LD_INT 4
  56: PUSH
  57: EMPTY
  58: LIST
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: LIST
  64: LIST
  65: PPUSH
  66: CALL 387 0 3
// PrepareHunters ( ) ;
  70: CALL 233 0 0
// end ;
  74: END
// export debug , hunterClass , huntersAmount , animalAmount ; export points , hunters ; function Init ; begin
  75: LD_INT 0
  77: PPUSH
// debug := 0 ;
  78: LD_ADDR_EXP 1
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// if debug then
  86: LD_EXP 1
  90: IFFALSE 125
// begin FogOff ( 1 ) ;
  92: LD_INT 1
  94: PPUSH
  95: CALL_OW 344
// Difficulty := 2 ;
  99: LD_ADDR_OWVAR 67
 103: PUSH
 104: LD_INT 2
 106: ST_TO_ADDR
// hunterClass := 3 ;
 107: LD_ADDR_EXP 2
 111: PUSH
 112: LD_INT 3
 114: ST_TO_ADDR
// animalAmount := 2 ;
 115: LD_ADDR_EXP 4
 119: PUSH
 120: LD_INT 2
 122: ST_TO_ADDR
// end else
 123: GO 164
// begin Difficulty := GetMultiplayerSetting ( 0 ) ;
 125: LD_ADDR_OWVAR 67
 129: PUSH
 130: LD_INT 0
 132: PPUSH
 133: CALL_OW 426
 137: ST_TO_ADDR
// hunterClass := GetMultiplayerSetting ( 2 ) ;
 138: LD_ADDR_EXP 2
 142: PUSH
 143: LD_INT 2
 145: PPUSH
 146: CALL_OW 426
 150: ST_TO_ADDR
// animalAmount := GetMultiplayerSetting ( 1 ) ;
 151: LD_ADDR_EXP 4
 155: PUSH
 156: LD_INT 1
 158: PPUSH
 159: CALL_OW 426
 163: ST_TO_ADDR
// end ; huntersAmount := [ 4 , 6 , 8 ] [ Difficulty ] ;
 164: LD_ADDR_EXP 3
 168: PUSH
 169: LD_INT 4
 171: PUSH
 172: LD_INT 6
 174: PUSH
 175: LD_INT 8
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: PUSH
 183: LD_OWVAR 67
 187: ARRAY
 188: ST_TO_ADDR
// points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 189: LD_ADDR_EXP 5
 193: PUSH
 194: LD_INT 0
 196: PUSH
 197: LD_INT 0
 199: PUSH
 200: LD_INT 0
 202: PUSH
 203: LD_INT 0
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: LD_INT 0
 211: PUSH
 212: LD_INT 0
 214: PUSH
 215: LD_INT 0
 217: PUSH
 218: EMPTY
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: ST_TO_ADDR
// end ;
 228: LD_VAR 0 1
 232: RET
// export function PrepareHunters ; var i , un ; begin
 233: LD_INT 0
 235: PPUSH
 236: PPUSH
 237: PPUSH
// for i := 1 to huntersAmount do
 238: LD_ADDR_VAR 0 2
 242: PUSH
 243: DOUBLE
 244: LD_INT 1
 246: DEC
 247: ST_TO_ADDR
 248: LD_EXP 3
 252: PUSH
 253: FOR_TO
 254: IFFALSE 380
// begin uc_side := i ;
 256: LD_ADDR_OWVAR 20
 260: PUSH
 261: LD_VAR 0 2
 265: ST_TO_ADDR
// uc_nation := i mod 3 + 1 ;
 266: LD_ADDR_OWVAR 21
 270: PUSH
 271: LD_VAR 0 2
 275: PUSH
 276: LD_INT 3
 278: MOD
 279: PUSH
 280: LD_INT 1
 282: PLUS
 283: ST_TO_ADDR
// PrepareHuman ( false , [ class_soldier , class_sniper , class_desert_warior ] [ hunterClass ] , 10 - Difficulty * 2 ) ;
 284: LD_INT 0
 286: PPUSH
 287: LD_INT 1
 289: PUSH
 290: LD_INT 5
 292: PUSH
 293: LD_INT 11
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: LIST
 300: PUSH
 301: LD_EXP 2
 305: ARRAY
 306: PPUSH
 307: LD_INT 10
 309: PUSH
 310: LD_OWVAR 67
 314: PUSH
 315: LD_INT 2
 317: MUL
 318: MINUS
 319: PPUSH
 320: CALL_OW 380
// un := CreateHuman ;
 324: LD_ADDR_VAR 0 3
 328: PUSH
 329: CALL_OW 44
 333: ST_TO_ADDR
// hunters := Replace ( hunters , hunters + 1 , un ) ;
 334: LD_ADDR_EXP 6
 338: PUSH
 339: LD_EXP 6
 343: PPUSH
 344: LD_EXP 6
 348: PUSH
 349: LD_INT 1
 351: PLUS
 352: PPUSH
 353: LD_VAR 0 3
 357: PPUSH
 358: CALL_OW 1
 362: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 363: LD_VAR 0 3
 367: PPUSH
 368: LD_INT 4
 370: PPUSH
 371: LD_INT 0
 373: PPUSH
 374: CALL_OW 49
// end ;
 378: GO 253
 380: POP
 381: POP
// end ; end_of_file
 382: LD_VAR 0 1
 386: RET
// export function CreateNature ( area , waterArea , numbers ) ; var i , j , classes , waterClass ; begin
 387: LD_INT 0
 389: PPUSH
 390: PPUSH
 391: PPUSH
 392: PPUSH
 393: PPUSH
// uc_side = 0 ;
 394: LD_ADDR_OWVAR 20
 398: PUSH
 399: LD_INT 0
 401: ST_TO_ADDR
// uc_nation = 0 ;
 402: LD_ADDR_OWVAR 21
 406: PUSH
 407: LD_INT 0
 409: ST_TO_ADDR
// classes := [ class_apeman , class_apeman_soldier , class_baggie , class_phororhacos , class_tiger , class_horse ] ;
 410: LD_ADDR_VAR 0 7
 414: PUSH
 415: LD_INT 12
 417: PUSH
 418: LD_INT 15
 420: PUSH
 421: LD_INT 13
 423: PUSH
 424: LD_INT 18
 426: PUSH
 427: LD_INT 14
 429: PUSH
 430: LD_INT 21
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: ST_TO_ADDR
// waterClass := [ class_fish ] ;
 441: LD_ADDR_VAR 0 8
 445: PUSH
 446: LD_INT 20
 448: PUSH
 449: EMPTY
 450: LIST
 451: ST_TO_ADDR
// InitHc_All ( ) ;
 452: CALL_OW 584
// for i := 1 to numbers - 2 do
 456: LD_ADDR_VAR 0 5
 460: PUSH
 461: DOUBLE
 462: LD_INT 1
 464: DEC
 465: ST_TO_ADDR
 466: LD_VAR 0 3
 470: PUSH
 471: LD_INT 2
 473: MINUS
 474: PUSH
 475: FOR_TO
 476: IFFALSE 617
// begin if numbers [ i ] = 0 then
 478: LD_VAR 0 3
 482: PUSH
 483: LD_VAR 0 5
 487: ARRAY
 488: PUSH
 489: LD_INT 0
 491: EQUAL
 492: IFFALSE 496
// continue ;
 494: GO 475
// hc_class := classes [ i ] ;
 496: LD_ADDR_OWVAR 28
 500: PUSH
 501: LD_VAR 0 7
 505: PUSH
 506: LD_VAR 0 5
 510: ARRAY
 511: ST_TO_ADDR
// hc_attr := [ rand ( 8 , 12 ) , rand ( 8 , 12 ) ] ;
 512: LD_ADDR_OWVAR 29
 516: PUSH
 517: LD_INT 8
 519: PPUSH
 520: LD_INT 12
 522: PPUSH
 523: CALL_OW 12
 527: PUSH
 528: LD_INT 8
 530: PPUSH
 531: LD_INT 12
 533: PPUSH
 534: CALL_OW 12
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) + Difficulty * 5 ;
 543: LD_ADDR_OWVAR 35
 547: PUSH
 548: LD_INT 5
 550: NEG
 551: PPUSH
 552: LD_INT 5
 554: PPUSH
 555: CALL_OW 12
 559: PUSH
 560: LD_OWVAR 67
 564: PUSH
 565: LD_INT 5
 567: MUL
 568: PLUS
 569: ST_TO_ADDR
// for j := 1 to numbers [ i ] do
 570: LD_ADDR_VAR 0 6
 574: PUSH
 575: DOUBLE
 576: LD_INT 1
 578: DEC
 579: ST_TO_ADDR
 580: LD_VAR 0 3
 584: PUSH
 585: LD_VAR 0 5
 589: ARRAY
 590: PUSH
 591: FOR_TO
 592: IFFALSE 613
// PlaceUnitArea ( CreateHuman , area , false ) ;
 594: CALL_OW 44
 598: PPUSH
 599: LD_VAR 0 1
 603: PPUSH
 604: LD_INT 0
 606: PPUSH
 607: CALL_OW 49
 611: GO 591
 613: POP
 614: POP
// end ;
 615: GO 475
 617: POP
 618: POP
// if not waterArea then
 619: LD_VAR 0 2
 623: NOT
 624: IFFALSE 628
// exit ;
 626: GO 708
// hc_class := waterClass [ 1 ] ;
 628: LD_ADDR_OWVAR 28
 632: PUSH
 633: LD_VAR 0 8
 637: PUSH
 638: LD_INT 1
 640: ARRAY
 641: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 642: LD_ADDR_OWVAR 29
 646: PUSH
 647: LD_INT 10
 649: PUSH
 650: LD_INT 10
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: ST_TO_ADDR
// hc_agressivity := 0 ;
 657: LD_ADDR_OWVAR 35
 661: PUSH
 662: LD_INT 0
 664: ST_TO_ADDR
// for j := 1 to numbers [ 7 ] do
 665: LD_ADDR_VAR 0 6
 669: PUSH
 670: DOUBLE
 671: LD_INT 1
 673: DEC
 674: ST_TO_ADDR
 675: LD_VAR 0 3
 679: PUSH
 680: LD_INT 7
 682: ARRAY
 683: PUSH
 684: FOR_TO
 685: IFFALSE 706
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
 687: CALL_OW 44
 691: PPUSH
 692: LD_VAR 0 2
 696: PPUSH
 697: LD_INT 0
 699: PPUSH
 700: CALL_OW 49
 704: GO 684
 706: POP
 707: POP
// end ; end_of_file
 708: LD_VAR 0 4
 712: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do var i ;
 713: LD_INT 22
 715: PUSH
 716: LD_INT 0
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: PUSH
 723: LD_INT 25
 725: PUSH
 726: LD_INT 15
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PPUSH
 737: CALL_OW 69
 741: IFFALSE 847
 743: GO 745
 745: DISABLE
 746: LD_INT 0
 748: PPUSH
// begin enable ;
 749: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman_soldier ] ] ) do
 750: LD_ADDR_VAR 0 1
 754: PUSH
 755: LD_INT 22
 757: PUSH
 758: LD_INT 0
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: PUSH
 765: LD_INT 25
 767: PUSH
 768: LD_INT 15
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PPUSH
 779: CALL_OW 69
 783: PUSH
 784: FOR_IN
 785: IFFALSE 845
// if GetLives ( i ) < 1000 then
 787: LD_VAR 0 1
 791: PPUSH
 792: CALL_OW 256
 796: PUSH
 797: LD_INT 1000
 799: LESS
 800: IFFALSE 843
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , i ) ) ;
 802: LD_VAR 0 1
 806: PPUSH
 807: LD_INT 3
 809: PUSH
 810: LD_INT 22
 812: PUSH
 813: LD_INT 0
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PPUSH
 824: CALL_OW 69
 828: PPUSH
 829: LD_VAR 0 1
 833: PPUSH
 834: CALL_OW 74
 838: PPUSH
 839: CALL_OW 115
 843: GO 784
 845: POP
 846: POP
// end ;
 847: PPOPN 1
 849: END
// every 3 do var i , enemy , x , y , d ;
 850: GO 852
 852: DISABLE
 853: LD_INT 0
 855: PPUSH
 856: PPUSH
 857: PPUSH
 858: PPUSH
 859: PPUSH
// begin enable ;
 860: ENABLE
// for i := 2 to huntersAmount do
 861: LD_ADDR_VAR 0 1
 865: PUSH
 866: DOUBLE
 867: LD_INT 2
 869: DEC
 870: ST_TO_ADDR
 871: LD_EXP 3
 875: PUSH
 876: FOR_TO
 877: IFFALSE 1218
// begin if not HasTask ( hunters [ i ] ) then
 879: LD_EXP 6
 883: PUSH
 884: LD_VAR 0 1
 888: ARRAY
 889: PPUSH
 890: CALL_OW 314
 894: NOT
 895: IFFALSE 1216
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 0 ] ) , hunters [ i ] ) ;
 897: LD_ADDR_VAR 0 2
 901: PUSH
 902: LD_INT 22
 904: PUSH
 905: LD_INT 0
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PPUSH
 912: CALL_OW 69
 916: PPUSH
 917: LD_EXP 6
 921: PUSH
 922: LD_VAR 0 1
 926: ARRAY
 927: PPUSH
 928: CALL_OW 74
 932: ST_TO_ADDR
// if not enemy then
 933: LD_VAR 0 2
 937: NOT
 938: IFFALSE 942
// continue ;
 940: GO 876
// if GetDistUnits ( hunters [ i ] , enemy ) < 17 then
 942: LD_EXP 6
 946: PUSH
 947: LD_VAR 0 1
 951: ARRAY
 952: PPUSH
 953: LD_VAR 0 2
 957: PPUSH
 958: CALL_OW 296
 962: PUSH
 963: LD_INT 17
 965: LESS
 966: IFFALSE 1069
// begin if GetClass ( hunters [ i ] ) = class_desert_warior then
 968: LD_EXP 6
 972: PUSH
 973: LD_VAR 0 1
 977: ARRAY
 978: PPUSH
 979: CALL_OW 257
 983: PUSH
 984: LD_INT 11
 986: EQUAL
 987: IFFALSE 1047
// if GetClass ( enemy ) in [ class_frog , class_fish , class_baggie ] then
 989: LD_VAR 0 2
 993: PPUSH
 994: CALL_OW 257
 998: PUSH
 999: LD_INT 19
1001: PUSH
1002: LD_INT 20
1004: PUSH
1005: LD_INT 13
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: LIST
1012: IN
1013: IFFALSE 1032
// ComCarabine ( hunters [ i ] ) else
1015: LD_EXP 6
1019: PUSH
1020: LD_VAR 0 1
1024: ARRAY
1025: PPUSH
1026: CALL_OW 162
1030: GO 1047
// ComSabre ( hunters [ i ] ) ;
1032: LD_EXP 6
1036: PUSH
1037: LD_VAR 0 1
1041: ARRAY
1042: PPUSH
1043: CALL_OW 163
// ComAttackUnit ( hunters [ i ] , enemy ) ;
1047: LD_EXP 6
1051: PUSH
1052: LD_VAR 0 1
1056: ARRAY
1057: PPUSH
1058: LD_VAR 0 2
1062: PPUSH
1063: CALL_OW 115
// end else
1067: GO 1216
// begin d := rand ( 0 , 5 ) ;
1069: LD_ADDR_VAR 0 5
1073: PUSH
1074: LD_INT 0
1076: PPUSH
1077: LD_INT 5
1079: PPUSH
1080: CALL_OW 12
1084: ST_TO_ADDR
// x := ShiftX ( GetX ( hunters [ i ] ) , d , 8 ) ;
1085: LD_ADDR_VAR 0 3
1089: PUSH
1090: LD_EXP 6
1094: PUSH
1095: LD_VAR 0 1
1099: ARRAY
1100: PPUSH
1101: CALL_OW 250
1105: PPUSH
1106: LD_VAR 0 5
1110: PPUSH
1111: LD_INT 8
1113: PPUSH
1114: CALL_OW 272
1118: ST_TO_ADDR
// y := ShiftY ( GetY ( hunters [ i ] ) , d , 8 ) ;
1119: LD_ADDR_VAR 0 4
1123: PUSH
1124: LD_EXP 6
1128: PUSH
1129: LD_VAR 0 1
1133: ARRAY
1134: PPUSH
1135: CALL_OW 251
1139: PPUSH
1140: LD_VAR 0 5
1144: PPUSH
1145: LD_INT 8
1147: PPUSH
1148: CALL_OW 273
1152: ST_TO_ADDR
// if ValidHex ( x , y ) and HexInfo ( x , y ) = 0 then
1153: LD_VAR 0 3
1157: PPUSH
1158: LD_VAR 0 4
1162: PPUSH
1163: CALL_OW 488
1167: IFFALSE 1189
1169: PUSH
1170: LD_VAR 0 3
1174: PPUSH
1175: LD_VAR 0 4
1179: PPUSH
1180: CALL_OW 428
1184: PUSH
1185: LD_INT 0
1187: EQUAL
1188: AND
1189: IFFALSE 1216
// ComMoveXY ( hunters [ i ] , x , y ) ;
1191: LD_EXP 6
1195: PUSH
1196: LD_VAR 0 1
1200: ARRAY
1201: PPUSH
1202: LD_VAR 0 3
1206: PPUSH
1207: LD_VAR 0 4
1211: PPUSH
1212: CALL_OW 111
// end ; end ; end ;
1216: GO 876
1218: POP
1219: POP
// end ; end_of_file
1220: PPOPN 5
1222: END
// on UnitGoesToRed ( un ) do var i ;
1223: LD_INT 0
1225: PPUSH
// begin if GetSide ( un ) = 1 then
1226: LD_VAR 0 1
1230: PPUSH
1231: CALL_OW 255
1235: PUSH
1236: LD_INT 1
1238: EQUAL
1239: IFFALSE 1248
// YouLost ( hunt2 ) ;
1241: LD_STRING hunt2
1243: PPUSH
1244: CALL_OW 104
// if GetSide ( un ) > 1 then
1248: LD_VAR 0 1
1252: PPUSH
1253: CALL_OW 255
1257: PUSH
1258: LD_INT 1
1260: GREATER
1261: IFFALSE 1314
// begin for i := 1 to 6 do
1263: LD_ADDR_VAR 0 2
1267: PUSH
1268: DOUBLE
1269: LD_INT 1
1271: DEC
1272: ST_TO_ADDR
1273: LD_INT 6
1275: PUSH
1276: FOR_TO
1277: IFFALSE 1300
// begin wait ( 0 0$1 ) ;
1279: LD_INT 35
1281: PPUSH
1282: CALL_OW 67
// SetLives ( un , 249 ) ;
1286: LD_VAR 0 1
1290: PPUSH
1291: LD_INT 249
1293: PPUSH
1294: CALL_OW 234
// end ;
1298: GO 1276
1300: POP
1301: POP
// SetLives ( un , 1000 ) ;
1302: LD_VAR 0 1
1306: PPUSH
1307: LD_INT 1000
1309: PPUSH
1310: CALL_OW 234
// end ; end ;
1314: PPOPN 2
1316: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 > 1 then
1317: LD_VAR 0 1
1321: PUSH
1322: LD_INT 1
1324: EQUAL
1325: IFFALSE 1337
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_INT 1
1335: GREATER
1336: AND
1337: IFFALSE 1346
// YouLost ( hunt1 ) ;
1339: LD_STRING hunt1
1341: PPUSH
1342: CALL_OW 104
// end ;
1346: PPOPN 2
1348: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do var point ;
1349: LD_INT 0
1351: PPUSH
// begin point := 0 ;
1352: LD_ADDR_VAR 0 4
1356: PUSH
1357: LD_INT 0
1359: ST_TO_ADDR
// case GetClass ( un ) of class_fish :
1360: LD_VAR 0 1
1364: PPUSH
1365: CALL_OW 257
1369: PUSH
1370: LD_INT 20
1372: DOUBLE
1373: EQUAL
1374: IFTRUE 1378
1376: GO 1389
1378: POP
// point := 10 ; class_horse :
1379: LD_ADDR_VAR 0 4
1383: PUSH
1384: LD_INT 10
1386: ST_TO_ADDR
1387: GO 1523
1389: LD_INT 21
1391: DOUBLE
1392: EQUAL
1393: IFTRUE 1397
1395: GO 1408
1397: POP
// point := 10 ; class_baggie :
1398: LD_ADDR_VAR 0 4
1402: PUSH
1403: LD_INT 10
1405: ST_TO_ADDR
1406: GO 1523
1408: LD_INT 13
1410: DOUBLE
1411: EQUAL
1412: IFTRUE 1416
1414: GO 1427
1416: POP
// point := 5 ; class_phororhacos :
1417: LD_ADDR_VAR 0 4
1421: PUSH
1422: LD_INT 5
1424: ST_TO_ADDR
1425: GO 1523
1427: LD_INT 18
1429: DOUBLE
1430: EQUAL
1431: IFTRUE 1435
1433: GO 1446
1435: POP
// point := 10 ; class_tiger :
1436: LD_ADDR_VAR 0 4
1440: PUSH
1441: LD_INT 10
1443: ST_TO_ADDR
1444: GO 1523
1446: LD_INT 14
1448: DOUBLE
1449: EQUAL
1450: IFTRUE 1454
1452: GO 1465
1454: POP
// point := 20 ; class_apeman :
1455: LD_ADDR_VAR 0 4
1459: PUSH
1460: LD_INT 20
1462: ST_TO_ADDR
1463: GO 1523
1465: LD_INT 12
1467: DOUBLE
1468: EQUAL
1469: IFTRUE 1473
1471: GO 1484
1473: POP
// point := 30 ; class_apeman_soldier :
1474: LD_ADDR_VAR 0 4
1478: PUSH
1479: LD_INT 30
1481: ST_TO_ADDR
1482: GO 1523
1484: LD_INT 15
1486: DOUBLE
1487: EQUAL
1488: IFTRUE 1492
1490: GO 1503
1492: POP
// point := 50 ; class_frog :
1493: LD_ADDR_VAR 0 4
1497: PUSH
1498: LD_INT 50
1500: ST_TO_ADDR
1501: GO 1523
1503: LD_INT 19
1505: DOUBLE
1506: EQUAL
1507: IFTRUE 1511
1509: GO 1522
1511: POP
// point := 10 ; end ;
1512: LD_ADDR_VAR 0 4
1516: PUSH
1517: LD_INT 10
1519: ST_TO_ADDR
1520: GO 1523
1522: POP
// if point then
1523: LD_VAR 0 4
1527: IFFALSE 1566
// points := Replace ( points , killer_side , points [ killer_side ] + point ) ;
1529: LD_ADDR_EXP 5
1533: PUSH
1534: LD_EXP 5
1538: PPUSH
1539: LD_VAR 0 2
1543: PPUSH
1544: LD_EXP 5
1548: PUSH
1549: LD_VAR 0 2
1553: ARRAY
1554: PUSH
1555: LD_VAR 0 4
1559: PLUS
1560: PPUSH
1561: CALL_OW 1
1565: ST_TO_ADDR
// end ;
1566: PPOPN 4
1568: END
// every 0 0$20 trigger FilterAllUnits ( [ f_side , 0 ] ) < 10 do
1569: LD_INT 22
1571: PUSH
1572: LD_INT 0
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PPUSH
1579: CALL_OW 69
1583: PUSH
1584: LD_INT 10
1586: LESS
1587: IFFALSE 1689
1589: GO 1591
1591: DISABLE
// begin enable ;
1592: ENABLE
// CreateNature ( natArea , watArea , [ rand ( 0 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) , rand ( 2 , 4 ) , rand ( 2 , 4 ) , rand ( 0 , 2 ) , rand ( 0 , 4 ) ] ) ;
1593: LD_INT 2
1595: PPUSH
1596: LD_INT 1
1598: PPUSH
1599: LD_INT 0
1601: PPUSH
1602: LD_INT 4
1604: PPUSH
1605: CALL_OW 12
1609: PUSH
1610: LD_INT 0
1612: PPUSH
1613: LD_INT 2
1615: PPUSH
1616: CALL_OW 12
1620: PUSH
1621: LD_INT 0
1623: PPUSH
1624: LD_INT 4
1626: PPUSH
1627: CALL_OW 12
1631: PUSH
1632: LD_INT 2
1634: PPUSH
1635: LD_INT 4
1637: PPUSH
1638: CALL_OW 12
1642: PUSH
1643: LD_INT 2
1645: PPUSH
1646: LD_INT 4
1648: PPUSH
1649: CALL_OW 12
1653: PUSH
1654: LD_INT 0
1656: PPUSH
1657: LD_INT 2
1659: PPUSH
1660: CALL_OW 12
1664: PUSH
1665: LD_INT 0
1667: PPUSH
1668: LD_INT 4
1670: PPUSH
1671: CALL_OW 12
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: PPUSH
1685: CALL 387 0 3
// end ;
1689: END
// every 0 0$1 do var i ;
1690: GO 1692
1692: DISABLE
1693: LD_INT 0
1695: PPUSH
// begin enable ;
1696: ENABLE
// display_strings := [ ] ;
1697: LD_ADDR_OWVAR 47
1701: PUSH
1702: EMPTY
1703: ST_TO_ADDR
// for i := 1 to huntersAmount do
1704: LD_ADDR_VAR 0 1
1708: PUSH
1709: DOUBLE
1710: LD_INT 1
1712: DEC
1713: ST_TO_ADDR
1714: LD_EXP 3
1718: PUSH
1719: FOR_TO
1720: IFFALSE 1854
// begin display_strings := display_strings ^ [ #player & i , i , points [ i ] ] ;
1722: LD_ADDR_OWVAR 47
1726: PUSH
1727: LD_OWVAR 47
1731: PUSH
1732: LD_STRING #player
1734: PUSH
1735: LD_VAR 0 1
1739: STR
1740: PUSH
1741: LD_VAR 0 1
1745: PUSH
1746: LD_EXP 5
1750: PUSH
1751: LD_VAR 0 1
1755: ARRAY
1756: PUSH
1757: EMPTY
1758: LIST
1759: LIST
1760: LIST
1761: ADD
1762: ST_TO_ADDR
// if points [ i ] >= [ 750 , 1250 , 2000 ] [ Difficulty ] then
1763: LD_EXP 5
1767: PUSH
1768: LD_VAR 0 1
1772: ARRAY
1773: PUSH
1774: LD_INT 750
1776: PUSH
1777: LD_INT 1250
1779: PUSH
1780: LD_INT 2000
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: LIST
1787: PUSH
1788: LD_OWVAR 67
1792: ARRAY
1793: GREATEREQUAL
1794: IFFALSE 1852
// begin if i = 1 then
1796: LD_VAR 0 1
1800: PUSH
1801: LD_INT 1
1803: EQUAL
1804: IFFALSE 1845
// begin DialogueOn ;
1806: CALL_OW 6
// SetAchievement ( ACH_HUNT ) ;
1810: LD_STRING ACH_HUNT
1812: PPUSH
1813: CALL_OW 543
// display_strings := [ #hunting-win ] ;
1817: LD_ADDR_OWVAR 47
1821: PUSH
1822: LD_STRING #hunting-win
1824: PUSH
1825: EMPTY
1826: LIST
1827: ST_TO_ADDR
// dwait ( 0 0$5 ) ;
1828: LD_INT 175
1830: PPUSH
1831: CALL_OW 68
// YouWin ;
1835: CALL_OW 103
// DialogueOff ;
1839: CALL_OW 7
// end else
1843: GO 1852
// YouLost ( hunt3 ) ;
1845: LD_STRING hunt3
1847: PPUSH
1848: CALL_OW 104
// end ; end ;
1852: GO 1719
1854: POP
1855: POP
// end ; end_of_file end_of_file
1856: PPOPN 1
1858: END
// export globalGameSaveCounter ; every 0 0$1 do
1859: GO 1861
1861: DISABLE
// begin enable ;
1862: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
1863: LD_STRING updateTimer(
1865: PUSH
1866: LD_OWVAR 1
1870: STR
1871: PUSH
1872: LD_STRING );
1874: STR
1875: PPUSH
1876: CALL_OW 559
// end ;
1880: END
// every 0 0$1 do
1881: GO 1883
1883: DISABLE
// begin globalGameSaveCounter := 0 ;
1884: LD_ADDR_EXP 7
1888: PUSH
1889: LD_INT 0
1891: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
1892: LD_STRING setGameSaveCounter(0)
1894: PPUSH
1895: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
1899: LD_STRING initStreamRollete();
1901: PPUSH
1902: CALL_OW 559
// InitStreamMode ;
1906: CALL 3258 0 0
// DefineStreamItems ( false ) ;
1910: LD_INT 0
1912: PPUSH
1913: CALL 3722 0 1
// end ;
1917: END
// export function SOS_MapStart ( ) ; begin
1918: LD_INT 0
1920: PPUSH
// if streamModeActive then
1921: LD_EXP 8
1925: IFFALSE 1934
// DefineStreamItems ( true ) ;
1927: LD_INT 1
1929: PPUSH
1930: CALL 3722 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
1934: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
1936: PPUSH
1937: CALL_OW 559
// UpdateLuaVariables ( ) ;
1941: CALL 1958 0 0
// UpdateFactoryWaypoints ( ) ;
1945: CALL 16844 0 0
// UpdateWarehouseGatheringPoints ( ) ;
1949: CALL 17096 0 0
// end ;
1953: LD_VAR 0 1
1957: RET
// function UpdateLuaVariables ( ) ; begin
1958: LD_INT 0
1960: PPUSH
// if globalGameSaveCounter then
1961: LD_EXP 7
1965: IFFALSE 1999
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
1967: LD_ADDR_EXP 7
1971: PUSH
1972: LD_EXP 7
1976: PPUSH
1977: CALL 64155 0 1
1981: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
1982: LD_STRING setGameSaveCounter(
1984: PUSH
1985: LD_EXP 7
1989: STR
1990: PUSH
1991: LD_STRING )
1993: STR
1994: PPUSH
1995: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
1999: LD_STRING setGameDifficulty(
2001: PUSH
2002: LD_OWVAR 67
2006: STR
2007: PUSH
2008: LD_STRING )
2010: STR
2011: PPUSH
2012: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
2016: LD_STRING displayDifficulty(
2018: PUSH
2019: LD_OWVAR 67
2023: STR
2024: PUSH
2025: LD_STRING )
2027: STR
2028: PPUSH
2029: CALL_OW 559
// end ;
2033: LD_VAR 0 1
2037: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
2038: LD_INT 0
2040: PPUSH
// if p2 = stream_mode then
2041: LD_VAR 0 2
2045: PUSH
2046: LD_INT 100
2048: EQUAL
2049: IFFALSE 3052
// begin if not StreamModeActive then
2051: LD_EXP 8
2055: NOT
2056: IFFALSE 2066
// StreamModeActive := true ;
2058: LD_ADDR_EXP 8
2062: PUSH
2063: LD_INT 1
2065: ST_TO_ADDR
// if p3 = 0 then
2066: LD_VAR 0 3
2070: PUSH
2071: LD_INT 0
2073: EQUAL
2074: IFFALSE 2080
// InitStreamMode ;
2076: CALL 3258 0 0
// if p3 = 1 then
2080: LD_VAR 0 3
2084: PUSH
2085: LD_INT 1
2087: EQUAL
2088: IFFALSE 2098
// sRocket := true ;
2090: LD_ADDR_EXP 13
2094: PUSH
2095: LD_INT 1
2097: ST_TO_ADDR
// if p3 = 2 then
2098: LD_VAR 0 3
2102: PUSH
2103: LD_INT 2
2105: EQUAL
2106: IFFALSE 2116
// sSpeed := true ;
2108: LD_ADDR_EXP 12
2112: PUSH
2113: LD_INT 1
2115: ST_TO_ADDR
// if p3 = 3 then
2116: LD_VAR 0 3
2120: PUSH
2121: LD_INT 3
2123: EQUAL
2124: IFFALSE 2134
// sEngine := true ;
2126: LD_ADDR_EXP 14
2130: PUSH
2131: LD_INT 1
2133: ST_TO_ADDR
// if p3 = 4 then
2134: LD_VAR 0 3
2138: PUSH
2139: LD_INT 4
2141: EQUAL
2142: IFFALSE 2152
// sSpec := true ;
2144: LD_ADDR_EXP 11
2148: PUSH
2149: LD_INT 1
2151: ST_TO_ADDR
// if p3 = 5 then
2152: LD_VAR 0 3
2156: PUSH
2157: LD_INT 5
2159: EQUAL
2160: IFFALSE 2170
// sLevel := true ;
2162: LD_ADDR_EXP 15
2166: PUSH
2167: LD_INT 1
2169: ST_TO_ADDR
// if p3 = 6 then
2170: LD_VAR 0 3
2174: PUSH
2175: LD_INT 6
2177: EQUAL
2178: IFFALSE 2188
// sArmoury := true ;
2180: LD_ADDR_EXP 16
2184: PUSH
2185: LD_INT 1
2187: ST_TO_ADDR
// if p3 = 7 then
2188: LD_VAR 0 3
2192: PUSH
2193: LD_INT 7
2195: EQUAL
2196: IFFALSE 2206
// sRadar := true ;
2198: LD_ADDR_EXP 17
2202: PUSH
2203: LD_INT 1
2205: ST_TO_ADDR
// if p3 = 8 then
2206: LD_VAR 0 3
2210: PUSH
2211: LD_INT 8
2213: EQUAL
2214: IFFALSE 2224
// sBunker := true ;
2216: LD_ADDR_EXP 18
2220: PUSH
2221: LD_INT 1
2223: ST_TO_ADDR
// if p3 = 9 then
2224: LD_VAR 0 3
2228: PUSH
2229: LD_INT 9
2231: EQUAL
2232: IFFALSE 2242
// sHack := true ;
2234: LD_ADDR_EXP 19
2238: PUSH
2239: LD_INT 1
2241: ST_TO_ADDR
// if p3 = 10 then
2242: LD_VAR 0 3
2246: PUSH
2247: LD_INT 10
2249: EQUAL
2250: IFFALSE 2260
// sFire := true ;
2252: LD_ADDR_EXP 20
2256: PUSH
2257: LD_INT 1
2259: ST_TO_ADDR
// if p3 = 11 then
2260: LD_VAR 0 3
2264: PUSH
2265: LD_INT 11
2267: EQUAL
2268: IFFALSE 2278
// sRefresh := true ;
2270: LD_ADDR_EXP 21
2274: PUSH
2275: LD_INT 1
2277: ST_TO_ADDR
// if p3 = 12 then
2278: LD_VAR 0 3
2282: PUSH
2283: LD_INT 12
2285: EQUAL
2286: IFFALSE 2296
// sExp := true ;
2288: LD_ADDR_EXP 22
2292: PUSH
2293: LD_INT 1
2295: ST_TO_ADDR
// if p3 = 13 then
2296: LD_VAR 0 3
2300: PUSH
2301: LD_INT 13
2303: EQUAL
2304: IFFALSE 2314
// sDepot := true ;
2306: LD_ADDR_EXP 23
2310: PUSH
2311: LD_INT 1
2313: ST_TO_ADDR
// if p3 = 14 then
2314: LD_VAR 0 3
2318: PUSH
2319: LD_INT 14
2321: EQUAL
2322: IFFALSE 2332
// sFlag := true ;
2324: LD_ADDR_EXP 24
2328: PUSH
2329: LD_INT 1
2331: ST_TO_ADDR
// if p3 = 15 then
2332: LD_VAR 0 3
2336: PUSH
2337: LD_INT 15
2339: EQUAL
2340: IFFALSE 2350
// sKamikadze := true ;
2342: LD_ADDR_EXP 32
2346: PUSH
2347: LD_INT 1
2349: ST_TO_ADDR
// if p3 = 16 then
2350: LD_VAR 0 3
2354: PUSH
2355: LD_INT 16
2357: EQUAL
2358: IFFALSE 2368
// sTroll := true ;
2360: LD_ADDR_EXP 33
2364: PUSH
2365: LD_INT 1
2367: ST_TO_ADDR
// if p3 = 17 then
2368: LD_VAR 0 3
2372: PUSH
2373: LD_INT 17
2375: EQUAL
2376: IFFALSE 2386
// sSlow := true ;
2378: LD_ADDR_EXP 34
2382: PUSH
2383: LD_INT 1
2385: ST_TO_ADDR
// if p3 = 18 then
2386: LD_VAR 0 3
2390: PUSH
2391: LD_INT 18
2393: EQUAL
2394: IFFALSE 2404
// sLack := true ;
2396: LD_ADDR_EXP 35
2400: PUSH
2401: LD_INT 1
2403: ST_TO_ADDR
// if p3 = 19 then
2404: LD_VAR 0 3
2408: PUSH
2409: LD_INT 19
2411: EQUAL
2412: IFFALSE 2422
// sTank := true ;
2414: LD_ADDR_EXP 37
2418: PUSH
2419: LD_INT 1
2421: ST_TO_ADDR
// if p3 = 20 then
2422: LD_VAR 0 3
2426: PUSH
2427: LD_INT 20
2429: EQUAL
2430: IFFALSE 2440
// sRemote := true ;
2432: LD_ADDR_EXP 38
2436: PUSH
2437: LD_INT 1
2439: ST_TO_ADDR
// if p3 = 21 then
2440: LD_VAR 0 3
2444: PUSH
2445: LD_INT 21
2447: EQUAL
2448: IFFALSE 2458
// sPowell := true ;
2450: LD_ADDR_EXP 39
2454: PUSH
2455: LD_INT 1
2457: ST_TO_ADDR
// if p3 = 22 then
2458: LD_VAR 0 3
2462: PUSH
2463: LD_INT 22
2465: EQUAL
2466: IFFALSE 2476
// sTeleport := true ;
2468: LD_ADDR_EXP 42
2472: PUSH
2473: LD_INT 1
2475: ST_TO_ADDR
// if p3 = 23 then
2476: LD_VAR 0 3
2480: PUSH
2481: LD_INT 23
2483: EQUAL
2484: IFFALSE 2494
// sOilTower := true ;
2486: LD_ADDR_EXP 44
2490: PUSH
2491: LD_INT 1
2493: ST_TO_ADDR
// if p3 = 24 then
2494: LD_VAR 0 3
2498: PUSH
2499: LD_INT 24
2501: EQUAL
2502: IFFALSE 2512
// sShovel := true ;
2504: LD_ADDR_EXP 45
2508: PUSH
2509: LD_INT 1
2511: ST_TO_ADDR
// if p3 = 25 then
2512: LD_VAR 0 3
2516: PUSH
2517: LD_INT 25
2519: EQUAL
2520: IFFALSE 2530
// sSheik := true ;
2522: LD_ADDR_EXP 46
2526: PUSH
2527: LD_INT 1
2529: ST_TO_ADDR
// if p3 = 26 then
2530: LD_VAR 0 3
2534: PUSH
2535: LD_INT 26
2537: EQUAL
2538: IFFALSE 2548
// sEarthquake := true ;
2540: LD_ADDR_EXP 48
2544: PUSH
2545: LD_INT 1
2547: ST_TO_ADDR
// if p3 = 27 then
2548: LD_VAR 0 3
2552: PUSH
2553: LD_INT 27
2555: EQUAL
2556: IFFALSE 2566
// sAI := true ;
2558: LD_ADDR_EXP 49
2562: PUSH
2563: LD_INT 1
2565: ST_TO_ADDR
// if p3 = 28 then
2566: LD_VAR 0 3
2570: PUSH
2571: LD_INT 28
2573: EQUAL
2574: IFFALSE 2584
// sCargo := true ;
2576: LD_ADDR_EXP 52
2580: PUSH
2581: LD_INT 1
2583: ST_TO_ADDR
// if p3 = 29 then
2584: LD_VAR 0 3
2588: PUSH
2589: LD_INT 29
2591: EQUAL
2592: IFFALSE 2602
// sDLaser := true ;
2594: LD_ADDR_EXP 53
2598: PUSH
2599: LD_INT 1
2601: ST_TO_ADDR
// if p3 = 30 then
2602: LD_VAR 0 3
2606: PUSH
2607: LD_INT 30
2609: EQUAL
2610: IFFALSE 2620
// sExchange := true ;
2612: LD_ADDR_EXP 54
2616: PUSH
2617: LD_INT 1
2619: ST_TO_ADDR
// if p3 = 31 then
2620: LD_VAR 0 3
2624: PUSH
2625: LD_INT 31
2627: EQUAL
2628: IFFALSE 2638
// sFac := true ;
2630: LD_ADDR_EXP 55
2634: PUSH
2635: LD_INT 1
2637: ST_TO_ADDR
// if p3 = 32 then
2638: LD_VAR 0 3
2642: PUSH
2643: LD_INT 32
2645: EQUAL
2646: IFFALSE 2656
// sPower := true ;
2648: LD_ADDR_EXP 56
2652: PUSH
2653: LD_INT 1
2655: ST_TO_ADDR
// if p3 = 33 then
2656: LD_VAR 0 3
2660: PUSH
2661: LD_INT 33
2663: EQUAL
2664: IFFALSE 2674
// sRandom := true ;
2666: LD_ADDR_EXP 57
2670: PUSH
2671: LD_INT 1
2673: ST_TO_ADDR
// if p3 = 34 then
2674: LD_VAR 0 3
2678: PUSH
2679: LD_INT 34
2681: EQUAL
2682: IFFALSE 2692
// sShield := true ;
2684: LD_ADDR_EXP 58
2688: PUSH
2689: LD_INT 1
2691: ST_TO_ADDR
// if p3 = 35 then
2692: LD_VAR 0 3
2696: PUSH
2697: LD_INT 35
2699: EQUAL
2700: IFFALSE 2710
// sTime := true ;
2702: LD_ADDR_EXP 59
2706: PUSH
2707: LD_INT 1
2709: ST_TO_ADDR
// if p3 = 36 then
2710: LD_VAR 0 3
2714: PUSH
2715: LD_INT 36
2717: EQUAL
2718: IFFALSE 2728
// sTools := true ;
2720: LD_ADDR_EXP 60
2724: PUSH
2725: LD_INT 1
2727: ST_TO_ADDR
// if p3 = 101 then
2728: LD_VAR 0 3
2732: PUSH
2733: LD_INT 101
2735: EQUAL
2736: IFFALSE 2746
// sSold := true ;
2738: LD_ADDR_EXP 25
2742: PUSH
2743: LD_INT 1
2745: ST_TO_ADDR
// if p3 = 102 then
2746: LD_VAR 0 3
2750: PUSH
2751: LD_INT 102
2753: EQUAL
2754: IFFALSE 2764
// sDiff := true ;
2756: LD_ADDR_EXP 26
2760: PUSH
2761: LD_INT 1
2763: ST_TO_ADDR
// if p3 = 103 then
2764: LD_VAR 0 3
2768: PUSH
2769: LD_INT 103
2771: EQUAL
2772: IFFALSE 2782
// sFog := true ;
2774: LD_ADDR_EXP 29
2778: PUSH
2779: LD_INT 1
2781: ST_TO_ADDR
// if p3 = 104 then
2782: LD_VAR 0 3
2786: PUSH
2787: LD_INT 104
2789: EQUAL
2790: IFFALSE 2800
// sReset := true ;
2792: LD_ADDR_EXP 30
2796: PUSH
2797: LD_INT 1
2799: ST_TO_ADDR
// if p3 = 105 then
2800: LD_VAR 0 3
2804: PUSH
2805: LD_INT 105
2807: EQUAL
2808: IFFALSE 2818
// sSun := true ;
2810: LD_ADDR_EXP 31
2814: PUSH
2815: LD_INT 1
2817: ST_TO_ADDR
// if p3 = 106 then
2818: LD_VAR 0 3
2822: PUSH
2823: LD_INT 106
2825: EQUAL
2826: IFFALSE 2836
// sTiger := true ;
2828: LD_ADDR_EXP 27
2832: PUSH
2833: LD_INT 1
2835: ST_TO_ADDR
// if p3 = 107 then
2836: LD_VAR 0 3
2840: PUSH
2841: LD_INT 107
2843: EQUAL
2844: IFFALSE 2854
// sBomb := true ;
2846: LD_ADDR_EXP 28
2850: PUSH
2851: LD_INT 1
2853: ST_TO_ADDR
// if p3 = 108 then
2854: LD_VAR 0 3
2858: PUSH
2859: LD_INT 108
2861: EQUAL
2862: IFFALSE 2872
// sWound := true ;
2864: LD_ADDR_EXP 36
2868: PUSH
2869: LD_INT 1
2871: ST_TO_ADDR
// if p3 = 109 then
2872: LD_VAR 0 3
2876: PUSH
2877: LD_INT 109
2879: EQUAL
2880: IFFALSE 2890
// sBetray := true ;
2882: LD_ADDR_EXP 40
2886: PUSH
2887: LD_INT 1
2889: ST_TO_ADDR
// if p3 = 110 then
2890: LD_VAR 0 3
2894: PUSH
2895: LD_INT 110
2897: EQUAL
2898: IFFALSE 2908
// sContamin := true ;
2900: LD_ADDR_EXP 41
2904: PUSH
2905: LD_INT 1
2907: ST_TO_ADDR
// if p3 = 111 then
2908: LD_VAR 0 3
2912: PUSH
2913: LD_INT 111
2915: EQUAL
2916: IFFALSE 2926
// sOil := true ;
2918: LD_ADDR_EXP 43
2922: PUSH
2923: LD_INT 1
2925: ST_TO_ADDR
// if p3 = 112 then
2926: LD_VAR 0 3
2930: PUSH
2931: LD_INT 112
2933: EQUAL
2934: IFFALSE 2944
// sStu := true ;
2936: LD_ADDR_EXP 47
2940: PUSH
2941: LD_INT 1
2943: ST_TO_ADDR
// if p3 = 113 then
2944: LD_VAR 0 3
2948: PUSH
2949: LD_INT 113
2951: EQUAL
2952: IFFALSE 2962
// sBazooka := true ;
2954: LD_ADDR_EXP 50
2958: PUSH
2959: LD_INT 1
2961: ST_TO_ADDR
// if p3 = 114 then
2962: LD_VAR 0 3
2966: PUSH
2967: LD_INT 114
2969: EQUAL
2970: IFFALSE 2980
// sMortar := true ;
2972: LD_ADDR_EXP 51
2976: PUSH
2977: LD_INT 1
2979: ST_TO_ADDR
// if p3 = 115 then
2980: LD_VAR 0 3
2984: PUSH
2985: LD_INT 115
2987: EQUAL
2988: IFFALSE 2998
// sRanger := true ;
2990: LD_ADDR_EXP 61
2994: PUSH
2995: LD_INT 1
2997: ST_TO_ADDR
// if p3 = 116 then
2998: LD_VAR 0 3
3002: PUSH
3003: LD_INT 116
3005: EQUAL
3006: IFFALSE 3016
// sComputer := true ;
3008: LD_ADDR_EXP 62
3012: PUSH
3013: LD_INT 1
3015: ST_TO_ADDR
// if p3 = 117 then
3016: LD_VAR 0 3
3020: PUSH
3021: LD_INT 117
3023: EQUAL
3024: IFFALSE 3034
// s30 := true ;
3026: LD_ADDR_EXP 63
3030: PUSH
3031: LD_INT 1
3033: ST_TO_ADDR
// if p3 = 118 then
3034: LD_VAR 0 3
3038: PUSH
3039: LD_INT 118
3041: EQUAL
3042: IFFALSE 3052
// s60 := true ;
3044: LD_ADDR_EXP 64
3048: PUSH
3049: LD_INT 1
3051: ST_TO_ADDR
// end ; if p2 = hack_mode then
3052: LD_VAR 0 2
3056: PUSH
3057: LD_INT 101
3059: EQUAL
3060: IFFALSE 3188
// begin case p3 of 1 :
3062: LD_VAR 0 3
3066: PUSH
3067: LD_INT 1
3069: DOUBLE
3070: EQUAL
3071: IFTRUE 3075
3073: GO 3082
3075: POP
// hHackUnlimitedResources ; 2 :
3076: CALL 15451 0 0
3080: GO 3188
3082: LD_INT 2
3084: DOUBLE
3085: EQUAL
3086: IFTRUE 3090
3088: GO 3097
3090: POP
// hHackSetLevel10 ; 3 :
3091: CALL 15584 0 0
3095: GO 3188
3097: LD_INT 3
3099: DOUBLE
3100: EQUAL
3101: IFTRUE 3105
3103: GO 3112
3105: POP
// hHackSetLevel10YourUnits ; 4 :
3106: CALL 15669 0 0
3110: GO 3188
3112: LD_INT 4
3114: DOUBLE
3115: EQUAL
3116: IFTRUE 3120
3118: GO 3127
3120: POP
// hHackInvincible ; 5 :
3121: CALL 16117 0 0
3125: GO 3188
3127: LD_INT 5
3129: DOUBLE
3130: EQUAL
3131: IFTRUE 3135
3133: GO 3142
3135: POP
// hHackInvisible ; 6 :
3136: CALL 16228 0 0
3140: GO 3188
3142: LD_INT 6
3144: DOUBLE
3145: EQUAL
3146: IFTRUE 3150
3148: GO 3157
3150: POP
// hHackChangeYourSide ; 7 :
3151: CALL 16285 0 0
3155: GO 3188
3157: LD_INT 7
3159: DOUBLE
3160: EQUAL
3161: IFTRUE 3165
3163: GO 3172
3165: POP
// hHackChangeUnitSide ; 8 :
3166: CALL 16327 0 0
3170: GO 3188
3172: LD_INT 8
3174: DOUBLE
3175: EQUAL
3176: IFTRUE 3180
3178: GO 3187
3180: POP
// hHackFog ; end ;
3181: CALL 16428 0 0
3185: GO 3188
3187: POP
// end ; if p2 = game_save_mode then
3188: LD_VAR 0 2
3192: PUSH
3193: LD_INT 102
3195: EQUAL
3196: IFFALSE 3253
// begin if p3 = 1 then
3198: LD_VAR 0 3
3202: PUSH
3203: LD_INT 1
3205: EQUAL
3206: IFFALSE 3218
// globalGameSaveCounter := p4 ;
3208: LD_ADDR_EXP 7
3212: PUSH
3213: LD_VAR 0 4
3217: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
3218: LD_VAR 0 3
3222: PUSH
3223: LD_INT 2
3225: EQUAL
3226: IFFALSE 3234
3228: PUSH
3229: LD_EXP 7
3233: AND
3234: IFFALSE 3253
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
3236: LD_STRING setGameSaveCounter(
3238: PUSH
3239: LD_EXP 7
3243: STR
3244: PUSH
3245: LD_STRING )
3247: STR
3248: PPUSH
3249: CALL_OW 559
// end ; end ;
3253: LD_VAR 0 7
3257: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
3258: LD_INT 0
3260: PPUSH
// streamModeActive := false ;
3261: LD_ADDR_EXP 8
3265: PUSH
3266: LD_INT 0
3268: ST_TO_ADDR
// normalCounter := 36 ;
3269: LD_ADDR_EXP 9
3273: PUSH
3274: LD_INT 36
3276: ST_TO_ADDR
// hardcoreCounter := 18 ;
3277: LD_ADDR_EXP 10
3281: PUSH
3282: LD_INT 18
3284: ST_TO_ADDR
// sRocket := false ;
3285: LD_ADDR_EXP 13
3289: PUSH
3290: LD_INT 0
3292: ST_TO_ADDR
// sSpeed := false ;
3293: LD_ADDR_EXP 12
3297: PUSH
3298: LD_INT 0
3300: ST_TO_ADDR
// sEngine := false ;
3301: LD_ADDR_EXP 14
3305: PUSH
3306: LD_INT 0
3308: ST_TO_ADDR
// sSpec := false ;
3309: LD_ADDR_EXP 11
3313: PUSH
3314: LD_INT 0
3316: ST_TO_ADDR
// sLevel := false ;
3317: LD_ADDR_EXP 15
3321: PUSH
3322: LD_INT 0
3324: ST_TO_ADDR
// sArmoury := false ;
3325: LD_ADDR_EXP 16
3329: PUSH
3330: LD_INT 0
3332: ST_TO_ADDR
// sRadar := false ;
3333: LD_ADDR_EXP 17
3337: PUSH
3338: LD_INT 0
3340: ST_TO_ADDR
// sBunker := false ;
3341: LD_ADDR_EXP 18
3345: PUSH
3346: LD_INT 0
3348: ST_TO_ADDR
// sHack := false ;
3349: LD_ADDR_EXP 19
3353: PUSH
3354: LD_INT 0
3356: ST_TO_ADDR
// sFire := false ;
3357: LD_ADDR_EXP 20
3361: PUSH
3362: LD_INT 0
3364: ST_TO_ADDR
// sRefresh := false ;
3365: LD_ADDR_EXP 21
3369: PUSH
3370: LD_INT 0
3372: ST_TO_ADDR
// sExp := false ;
3373: LD_ADDR_EXP 22
3377: PUSH
3378: LD_INT 0
3380: ST_TO_ADDR
// sDepot := false ;
3381: LD_ADDR_EXP 23
3385: PUSH
3386: LD_INT 0
3388: ST_TO_ADDR
// sFlag := false ;
3389: LD_ADDR_EXP 24
3393: PUSH
3394: LD_INT 0
3396: ST_TO_ADDR
// sKamikadze := false ;
3397: LD_ADDR_EXP 32
3401: PUSH
3402: LD_INT 0
3404: ST_TO_ADDR
// sTroll := false ;
3405: LD_ADDR_EXP 33
3409: PUSH
3410: LD_INT 0
3412: ST_TO_ADDR
// sSlow := false ;
3413: LD_ADDR_EXP 34
3417: PUSH
3418: LD_INT 0
3420: ST_TO_ADDR
// sLack := false ;
3421: LD_ADDR_EXP 35
3425: PUSH
3426: LD_INT 0
3428: ST_TO_ADDR
// sTank := false ;
3429: LD_ADDR_EXP 37
3433: PUSH
3434: LD_INT 0
3436: ST_TO_ADDR
// sRemote := false ;
3437: LD_ADDR_EXP 38
3441: PUSH
3442: LD_INT 0
3444: ST_TO_ADDR
// sPowell := false ;
3445: LD_ADDR_EXP 39
3449: PUSH
3450: LD_INT 0
3452: ST_TO_ADDR
// sTeleport := false ;
3453: LD_ADDR_EXP 42
3457: PUSH
3458: LD_INT 0
3460: ST_TO_ADDR
// sOilTower := false ;
3461: LD_ADDR_EXP 44
3465: PUSH
3466: LD_INT 0
3468: ST_TO_ADDR
// sShovel := false ;
3469: LD_ADDR_EXP 45
3473: PUSH
3474: LD_INT 0
3476: ST_TO_ADDR
// sSheik := false ;
3477: LD_ADDR_EXP 46
3481: PUSH
3482: LD_INT 0
3484: ST_TO_ADDR
// sEarthquake := false ;
3485: LD_ADDR_EXP 48
3489: PUSH
3490: LD_INT 0
3492: ST_TO_ADDR
// sAI := false ;
3493: LD_ADDR_EXP 49
3497: PUSH
3498: LD_INT 0
3500: ST_TO_ADDR
// sCargo := false ;
3501: LD_ADDR_EXP 52
3505: PUSH
3506: LD_INT 0
3508: ST_TO_ADDR
// sDLaser := false ;
3509: LD_ADDR_EXP 53
3513: PUSH
3514: LD_INT 0
3516: ST_TO_ADDR
// sExchange := false ;
3517: LD_ADDR_EXP 54
3521: PUSH
3522: LD_INT 0
3524: ST_TO_ADDR
// sFac := false ;
3525: LD_ADDR_EXP 55
3529: PUSH
3530: LD_INT 0
3532: ST_TO_ADDR
// sPower := false ;
3533: LD_ADDR_EXP 56
3537: PUSH
3538: LD_INT 0
3540: ST_TO_ADDR
// sRandom := false ;
3541: LD_ADDR_EXP 57
3545: PUSH
3546: LD_INT 0
3548: ST_TO_ADDR
// sShield := false ;
3549: LD_ADDR_EXP 58
3553: PUSH
3554: LD_INT 0
3556: ST_TO_ADDR
// sTime := false ;
3557: LD_ADDR_EXP 59
3561: PUSH
3562: LD_INT 0
3564: ST_TO_ADDR
// sTools := false ;
3565: LD_ADDR_EXP 60
3569: PUSH
3570: LD_INT 0
3572: ST_TO_ADDR
// sSold := false ;
3573: LD_ADDR_EXP 25
3577: PUSH
3578: LD_INT 0
3580: ST_TO_ADDR
// sDiff := false ;
3581: LD_ADDR_EXP 26
3585: PUSH
3586: LD_INT 0
3588: ST_TO_ADDR
// sFog := false ;
3589: LD_ADDR_EXP 29
3593: PUSH
3594: LD_INT 0
3596: ST_TO_ADDR
// sReset := false ;
3597: LD_ADDR_EXP 30
3601: PUSH
3602: LD_INT 0
3604: ST_TO_ADDR
// sSun := false ;
3605: LD_ADDR_EXP 31
3609: PUSH
3610: LD_INT 0
3612: ST_TO_ADDR
// sTiger := false ;
3613: LD_ADDR_EXP 27
3617: PUSH
3618: LD_INT 0
3620: ST_TO_ADDR
// sBomb := false ;
3621: LD_ADDR_EXP 28
3625: PUSH
3626: LD_INT 0
3628: ST_TO_ADDR
// sWound := false ;
3629: LD_ADDR_EXP 36
3633: PUSH
3634: LD_INT 0
3636: ST_TO_ADDR
// sBetray := false ;
3637: LD_ADDR_EXP 40
3641: PUSH
3642: LD_INT 0
3644: ST_TO_ADDR
// sContamin := false ;
3645: LD_ADDR_EXP 41
3649: PUSH
3650: LD_INT 0
3652: ST_TO_ADDR
// sOil := false ;
3653: LD_ADDR_EXP 43
3657: PUSH
3658: LD_INT 0
3660: ST_TO_ADDR
// sStu := false ;
3661: LD_ADDR_EXP 47
3665: PUSH
3666: LD_INT 0
3668: ST_TO_ADDR
// sBazooka := false ;
3669: LD_ADDR_EXP 50
3673: PUSH
3674: LD_INT 0
3676: ST_TO_ADDR
// sMortar := false ;
3677: LD_ADDR_EXP 51
3681: PUSH
3682: LD_INT 0
3684: ST_TO_ADDR
// sRanger := false ;
3685: LD_ADDR_EXP 61
3689: PUSH
3690: LD_INT 0
3692: ST_TO_ADDR
// sComputer := false ;
3693: LD_ADDR_EXP 62
3697: PUSH
3698: LD_INT 0
3700: ST_TO_ADDR
// s30 := false ;
3701: LD_ADDR_EXP 63
3705: PUSH
3706: LD_INT 0
3708: ST_TO_ADDR
// s60 := false ;
3709: LD_ADDR_EXP 64
3713: PUSH
3714: LD_INT 0
3716: ST_TO_ADDR
// end ;
3717: LD_VAR 0 1
3721: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
3722: LD_INT 0
3724: PPUSH
3725: PPUSH
3726: PPUSH
3727: PPUSH
3728: PPUSH
3729: PPUSH
3730: PPUSH
// result := [ ] ;
3731: LD_ADDR_VAR 0 2
3735: PUSH
3736: EMPTY
3737: ST_TO_ADDR
// if campaign_id = 1 then
3738: LD_OWVAR 69
3742: PUSH
3743: LD_INT 1
3745: EQUAL
3746: IFFALSE 6912
// begin case mission_number of 1 :
3748: LD_OWVAR 70
3752: PUSH
3753: LD_INT 1
3755: DOUBLE
3756: EQUAL
3757: IFTRUE 3761
3759: GO 3837
3761: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
3762: LD_ADDR_VAR 0 2
3766: PUSH
3767: LD_INT 2
3769: PUSH
3770: LD_INT 4
3772: PUSH
3773: LD_INT 11
3775: PUSH
3776: LD_INT 12
3778: PUSH
3779: LD_INT 15
3781: PUSH
3782: LD_INT 16
3784: PUSH
3785: LD_INT 22
3787: PUSH
3788: LD_INT 23
3790: PUSH
3791: LD_INT 26
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: LIST
3804: PUSH
3805: LD_INT 101
3807: PUSH
3808: LD_INT 102
3810: PUSH
3811: LD_INT 106
3813: PUSH
3814: LD_INT 116
3816: PUSH
3817: LD_INT 117
3819: PUSH
3820: LD_INT 118
3822: PUSH
3823: EMPTY
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: ST_TO_ADDR
3835: GO 6910
3837: LD_INT 2
3839: DOUBLE
3840: EQUAL
3841: IFTRUE 3845
3843: GO 3929
3845: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
3846: LD_ADDR_VAR 0 2
3850: PUSH
3851: LD_INT 2
3853: PUSH
3854: LD_INT 4
3856: PUSH
3857: LD_INT 11
3859: PUSH
3860: LD_INT 12
3862: PUSH
3863: LD_INT 15
3865: PUSH
3866: LD_INT 16
3868: PUSH
3869: LD_INT 22
3871: PUSH
3872: LD_INT 23
3874: PUSH
3875: LD_INT 26
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: LIST
3887: LIST
3888: PUSH
3889: LD_INT 101
3891: PUSH
3892: LD_INT 102
3894: PUSH
3895: LD_INT 105
3897: PUSH
3898: LD_INT 106
3900: PUSH
3901: LD_INT 108
3903: PUSH
3904: LD_INT 116
3906: PUSH
3907: LD_INT 117
3909: PUSH
3910: LD_INT 118
3912: PUSH
3913: EMPTY
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: LIST
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: ST_TO_ADDR
3927: GO 6910
3929: LD_INT 3
3931: DOUBLE
3932: EQUAL
3933: IFTRUE 3937
3935: GO 4025
3937: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
3938: LD_ADDR_VAR 0 2
3942: PUSH
3943: LD_INT 2
3945: PUSH
3946: LD_INT 4
3948: PUSH
3949: LD_INT 5
3951: PUSH
3952: LD_INT 11
3954: PUSH
3955: LD_INT 12
3957: PUSH
3958: LD_INT 15
3960: PUSH
3961: LD_INT 16
3963: PUSH
3964: LD_INT 22
3966: PUSH
3967: LD_INT 26
3969: PUSH
3970: LD_INT 36
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: LIST
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: PUSH
3985: LD_INT 101
3987: PUSH
3988: LD_INT 102
3990: PUSH
3991: LD_INT 105
3993: PUSH
3994: LD_INT 106
3996: PUSH
3997: LD_INT 108
3999: PUSH
4000: LD_INT 116
4002: PUSH
4003: LD_INT 117
4005: PUSH
4006: LD_INT 118
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: ST_TO_ADDR
4023: GO 6910
4025: LD_INT 4
4027: DOUBLE
4028: EQUAL
4029: IFTRUE 4033
4031: GO 4129
4033: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
4034: LD_ADDR_VAR 0 2
4038: PUSH
4039: LD_INT 2
4041: PUSH
4042: LD_INT 4
4044: PUSH
4045: LD_INT 5
4047: PUSH
4048: LD_INT 8
4050: PUSH
4051: LD_INT 11
4053: PUSH
4054: LD_INT 12
4056: PUSH
4057: LD_INT 15
4059: PUSH
4060: LD_INT 16
4062: PUSH
4063: LD_INT 22
4065: PUSH
4066: LD_INT 23
4068: PUSH
4069: LD_INT 26
4071: PUSH
4072: LD_INT 36
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: PUSH
4089: LD_INT 101
4091: PUSH
4092: LD_INT 102
4094: PUSH
4095: LD_INT 105
4097: PUSH
4098: LD_INT 106
4100: PUSH
4101: LD_INT 108
4103: PUSH
4104: LD_INT 116
4106: PUSH
4107: LD_INT 117
4109: PUSH
4110: LD_INT 118
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: PUSH
4123: EMPTY
4124: LIST
4125: LIST
4126: ST_TO_ADDR
4127: GO 6910
4129: LD_INT 5
4131: DOUBLE
4132: EQUAL
4133: IFTRUE 4137
4135: GO 4249
4137: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
4138: LD_ADDR_VAR 0 2
4142: PUSH
4143: LD_INT 2
4145: PUSH
4146: LD_INT 4
4148: PUSH
4149: LD_INT 5
4151: PUSH
4152: LD_INT 6
4154: PUSH
4155: LD_INT 8
4157: PUSH
4158: LD_INT 11
4160: PUSH
4161: LD_INT 12
4163: PUSH
4164: LD_INT 15
4166: PUSH
4167: LD_INT 16
4169: PUSH
4170: LD_INT 22
4172: PUSH
4173: LD_INT 23
4175: PUSH
4176: LD_INT 25
4178: PUSH
4179: LD_INT 26
4181: PUSH
4182: LD_INT 36
4184: PUSH
4185: EMPTY
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: LIST
4192: LIST
4193: LIST
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: PUSH
4201: LD_INT 101
4203: PUSH
4204: LD_INT 102
4206: PUSH
4207: LD_INT 105
4209: PUSH
4210: LD_INT 106
4212: PUSH
4213: LD_INT 108
4215: PUSH
4216: LD_INT 109
4218: PUSH
4219: LD_INT 112
4221: PUSH
4222: LD_INT 116
4224: PUSH
4225: LD_INT 117
4227: PUSH
4228: LD_INT 118
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: ST_TO_ADDR
4247: GO 6910
4249: LD_INT 6
4251: DOUBLE
4252: EQUAL
4253: IFTRUE 4257
4255: GO 4389
4257: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
4258: LD_ADDR_VAR 0 2
4262: PUSH
4263: LD_INT 2
4265: PUSH
4266: LD_INT 4
4268: PUSH
4269: LD_INT 5
4271: PUSH
4272: LD_INT 6
4274: PUSH
4275: LD_INT 8
4277: PUSH
4278: LD_INT 11
4280: PUSH
4281: LD_INT 12
4283: PUSH
4284: LD_INT 15
4286: PUSH
4287: LD_INT 16
4289: PUSH
4290: LD_INT 20
4292: PUSH
4293: LD_INT 21
4295: PUSH
4296: LD_INT 22
4298: PUSH
4299: LD_INT 23
4301: PUSH
4302: LD_INT 25
4304: PUSH
4305: LD_INT 26
4307: PUSH
4308: LD_INT 30
4310: PUSH
4311: LD_INT 31
4313: PUSH
4314: LD_INT 32
4316: PUSH
4317: LD_INT 36
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: LIST
4330: LIST
4331: LIST
4332: LIST
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: PUSH
4341: LD_INT 101
4343: PUSH
4344: LD_INT 102
4346: PUSH
4347: LD_INT 105
4349: PUSH
4350: LD_INT 106
4352: PUSH
4353: LD_INT 108
4355: PUSH
4356: LD_INT 109
4358: PUSH
4359: LD_INT 112
4361: PUSH
4362: LD_INT 116
4364: PUSH
4365: LD_INT 117
4367: PUSH
4368: LD_INT 118
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: ST_TO_ADDR
4387: GO 6910
4389: LD_INT 7
4391: DOUBLE
4392: EQUAL
4393: IFTRUE 4397
4395: GO 4509
4397: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
4398: LD_ADDR_VAR 0 2
4402: PUSH
4403: LD_INT 2
4405: PUSH
4406: LD_INT 4
4408: PUSH
4409: LD_INT 5
4411: PUSH
4412: LD_INT 7
4414: PUSH
4415: LD_INT 11
4417: PUSH
4418: LD_INT 12
4420: PUSH
4421: LD_INT 15
4423: PUSH
4424: LD_INT 16
4426: PUSH
4427: LD_INT 20
4429: PUSH
4430: LD_INT 21
4432: PUSH
4433: LD_INT 22
4435: PUSH
4436: LD_INT 23
4438: PUSH
4439: LD_INT 25
4441: PUSH
4442: LD_INT 26
4444: PUSH
4445: EMPTY
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: LIST
4458: LIST
4459: LIST
4460: PUSH
4461: LD_INT 101
4463: PUSH
4464: LD_INT 102
4466: PUSH
4467: LD_INT 103
4469: PUSH
4470: LD_INT 105
4472: PUSH
4473: LD_INT 106
4475: PUSH
4476: LD_INT 108
4478: PUSH
4479: LD_INT 112
4481: PUSH
4482: LD_INT 116
4484: PUSH
4485: LD_INT 117
4487: PUSH
4488: LD_INT 118
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: PUSH
4503: EMPTY
4504: LIST
4505: LIST
4506: ST_TO_ADDR
4507: GO 6910
4509: LD_INT 8
4511: DOUBLE
4512: EQUAL
4513: IFTRUE 4517
4515: GO 4657
4517: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
4518: LD_ADDR_VAR 0 2
4522: PUSH
4523: LD_INT 2
4525: PUSH
4526: LD_INT 4
4528: PUSH
4529: LD_INT 5
4531: PUSH
4532: LD_INT 6
4534: PUSH
4535: LD_INT 7
4537: PUSH
4538: LD_INT 8
4540: PUSH
4541: LD_INT 11
4543: PUSH
4544: LD_INT 12
4546: PUSH
4547: LD_INT 15
4549: PUSH
4550: LD_INT 16
4552: PUSH
4553: LD_INT 20
4555: PUSH
4556: LD_INT 21
4558: PUSH
4559: LD_INT 22
4561: PUSH
4562: LD_INT 23
4564: PUSH
4565: LD_INT 25
4567: PUSH
4568: LD_INT 26
4570: PUSH
4571: LD_INT 30
4573: PUSH
4574: LD_INT 31
4576: PUSH
4577: LD_INT 32
4579: PUSH
4580: LD_INT 36
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: PUSH
4605: LD_INT 101
4607: PUSH
4608: LD_INT 102
4610: PUSH
4611: LD_INT 103
4613: PUSH
4614: LD_INT 105
4616: PUSH
4617: LD_INT 106
4619: PUSH
4620: LD_INT 108
4622: PUSH
4623: LD_INT 109
4625: PUSH
4626: LD_INT 112
4628: PUSH
4629: LD_INT 116
4631: PUSH
4632: LD_INT 117
4634: PUSH
4635: LD_INT 118
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: ST_TO_ADDR
4655: GO 6910
4657: LD_INT 9
4659: DOUBLE
4660: EQUAL
4661: IFTRUE 4665
4663: GO 4813
4665: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
4666: LD_ADDR_VAR 0 2
4670: PUSH
4671: LD_INT 2
4673: PUSH
4674: LD_INT 4
4676: PUSH
4677: LD_INT 5
4679: PUSH
4680: LD_INT 6
4682: PUSH
4683: LD_INT 7
4685: PUSH
4686: LD_INT 8
4688: PUSH
4689: LD_INT 11
4691: PUSH
4692: LD_INT 12
4694: PUSH
4695: LD_INT 15
4697: PUSH
4698: LD_INT 16
4700: PUSH
4701: LD_INT 20
4703: PUSH
4704: LD_INT 21
4706: PUSH
4707: LD_INT 22
4709: PUSH
4710: LD_INT 23
4712: PUSH
4713: LD_INT 25
4715: PUSH
4716: LD_INT 26
4718: PUSH
4719: LD_INT 28
4721: PUSH
4722: LD_INT 30
4724: PUSH
4725: LD_INT 31
4727: PUSH
4728: LD_INT 32
4730: PUSH
4731: LD_INT 36
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: PUSH
4757: LD_INT 101
4759: PUSH
4760: LD_INT 102
4762: PUSH
4763: LD_INT 103
4765: PUSH
4766: LD_INT 105
4768: PUSH
4769: LD_INT 106
4771: PUSH
4772: LD_INT 108
4774: PUSH
4775: LD_INT 109
4777: PUSH
4778: LD_INT 112
4780: PUSH
4781: LD_INT 114
4783: PUSH
4784: LD_INT 116
4786: PUSH
4787: LD_INT 117
4789: PUSH
4790: LD_INT 118
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: ST_TO_ADDR
4811: GO 6910
4813: LD_INT 10
4815: DOUBLE
4816: EQUAL
4817: IFTRUE 4821
4819: GO 5017
4821: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
4822: LD_ADDR_VAR 0 2
4826: PUSH
4827: LD_INT 2
4829: PUSH
4830: LD_INT 4
4832: PUSH
4833: LD_INT 5
4835: PUSH
4836: LD_INT 6
4838: PUSH
4839: LD_INT 7
4841: PUSH
4842: LD_INT 8
4844: PUSH
4845: LD_INT 9
4847: PUSH
4848: LD_INT 10
4850: PUSH
4851: LD_INT 11
4853: PUSH
4854: LD_INT 12
4856: PUSH
4857: LD_INT 13
4859: PUSH
4860: LD_INT 14
4862: PUSH
4863: LD_INT 15
4865: PUSH
4866: LD_INT 16
4868: PUSH
4869: LD_INT 17
4871: PUSH
4872: LD_INT 18
4874: PUSH
4875: LD_INT 19
4877: PUSH
4878: LD_INT 20
4880: PUSH
4881: LD_INT 21
4883: PUSH
4884: LD_INT 22
4886: PUSH
4887: LD_INT 23
4889: PUSH
4890: LD_INT 24
4892: PUSH
4893: LD_INT 25
4895: PUSH
4896: LD_INT 26
4898: PUSH
4899: LD_INT 28
4901: PUSH
4902: LD_INT 30
4904: PUSH
4905: LD_INT 31
4907: PUSH
4908: LD_INT 32
4910: PUSH
4911: LD_INT 36
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: LIST
4934: LIST
4935: LIST
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: PUSH
4945: LD_INT 101
4947: PUSH
4948: LD_INT 102
4950: PUSH
4951: LD_INT 103
4953: PUSH
4954: LD_INT 104
4956: PUSH
4957: LD_INT 105
4959: PUSH
4960: LD_INT 106
4962: PUSH
4963: LD_INT 107
4965: PUSH
4966: LD_INT 108
4968: PUSH
4969: LD_INT 109
4971: PUSH
4972: LD_INT 110
4974: PUSH
4975: LD_INT 111
4977: PUSH
4978: LD_INT 112
4980: PUSH
4981: LD_INT 114
4983: PUSH
4984: LD_INT 116
4986: PUSH
4987: LD_INT 117
4989: PUSH
4990: LD_INT 118
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: ST_TO_ADDR
5015: GO 6910
5017: LD_INT 11
5019: DOUBLE
5020: EQUAL
5021: IFTRUE 5025
5023: GO 5229
5025: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
5026: LD_ADDR_VAR 0 2
5030: PUSH
5031: LD_INT 2
5033: PUSH
5034: LD_INT 3
5036: PUSH
5037: LD_INT 4
5039: PUSH
5040: LD_INT 5
5042: PUSH
5043: LD_INT 6
5045: PUSH
5046: LD_INT 7
5048: PUSH
5049: LD_INT 8
5051: PUSH
5052: LD_INT 9
5054: PUSH
5055: LD_INT 10
5057: PUSH
5058: LD_INT 11
5060: PUSH
5061: LD_INT 12
5063: PUSH
5064: LD_INT 13
5066: PUSH
5067: LD_INT 14
5069: PUSH
5070: LD_INT 15
5072: PUSH
5073: LD_INT 16
5075: PUSH
5076: LD_INT 17
5078: PUSH
5079: LD_INT 18
5081: PUSH
5082: LD_INT 19
5084: PUSH
5085: LD_INT 20
5087: PUSH
5088: LD_INT 21
5090: PUSH
5091: LD_INT 22
5093: PUSH
5094: LD_INT 23
5096: PUSH
5097: LD_INT 24
5099: PUSH
5100: LD_INT 25
5102: PUSH
5103: LD_INT 26
5105: PUSH
5106: LD_INT 28
5108: PUSH
5109: LD_INT 30
5111: PUSH
5112: LD_INT 31
5114: PUSH
5115: LD_INT 32
5117: PUSH
5118: LD_INT 34
5120: PUSH
5121: LD_INT 36
5123: PUSH
5124: EMPTY
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: LIST
5148: LIST
5149: LIST
5150: LIST
5151: LIST
5152: LIST
5153: LIST
5154: LIST
5155: LIST
5156: PUSH
5157: LD_INT 101
5159: PUSH
5160: LD_INT 102
5162: PUSH
5163: LD_INT 103
5165: PUSH
5166: LD_INT 104
5168: PUSH
5169: LD_INT 105
5171: PUSH
5172: LD_INT 106
5174: PUSH
5175: LD_INT 107
5177: PUSH
5178: LD_INT 108
5180: PUSH
5181: LD_INT 109
5183: PUSH
5184: LD_INT 110
5186: PUSH
5187: LD_INT 111
5189: PUSH
5190: LD_INT 112
5192: PUSH
5193: LD_INT 114
5195: PUSH
5196: LD_INT 116
5198: PUSH
5199: LD_INT 117
5201: PUSH
5202: LD_INT 118
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: LIST
5209: LIST
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: ST_TO_ADDR
5227: GO 6910
5229: LD_INT 12
5231: DOUBLE
5232: EQUAL
5233: IFTRUE 5237
5235: GO 5457
5237: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
5238: LD_ADDR_VAR 0 2
5242: PUSH
5243: LD_INT 1
5245: PUSH
5246: LD_INT 2
5248: PUSH
5249: LD_INT 3
5251: PUSH
5252: LD_INT 4
5254: PUSH
5255: LD_INT 5
5257: PUSH
5258: LD_INT 6
5260: PUSH
5261: LD_INT 7
5263: PUSH
5264: LD_INT 8
5266: PUSH
5267: LD_INT 9
5269: PUSH
5270: LD_INT 10
5272: PUSH
5273: LD_INT 11
5275: PUSH
5276: LD_INT 12
5278: PUSH
5279: LD_INT 13
5281: PUSH
5282: LD_INT 14
5284: PUSH
5285: LD_INT 15
5287: PUSH
5288: LD_INT 16
5290: PUSH
5291: LD_INT 17
5293: PUSH
5294: LD_INT 18
5296: PUSH
5297: LD_INT 19
5299: PUSH
5300: LD_INT 20
5302: PUSH
5303: LD_INT 21
5305: PUSH
5306: LD_INT 22
5308: PUSH
5309: LD_INT 23
5311: PUSH
5312: LD_INT 24
5314: PUSH
5315: LD_INT 25
5317: PUSH
5318: LD_INT 26
5320: PUSH
5321: LD_INT 27
5323: PUSH
5324: LD_INT 28
5326: PUSH
5327: LD_INT 30
5329: PUSH
5330: LD_INT 31
5332: PUSH
5333: LD_INT 32
5335: PUSH
5336: LD_INT 33
5338: PUSH
5339: LD_INT 34
5341: PUSH
5342: LD_INT 36
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: LIST
5349: LIST
5350: LIST
5351: LIST
5352: LIST
5353: LIST
5354: LIST
5355: LIST
5356: LIST
5357: LIST
5358: LIST
5359: LIST
5360: LIST
5361: LIST
5362: LIST
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: PUSH
5381: LD_INT 101
5383: PUSH
5384: LD_INT 102
5386: PUSH
5387: LD_INT 103
5389: PUSH
5390: LD_INT 104
5392: PUSH
5393: LD_INT 105
5395: PUSH
5396: LD_INT 106
5398: PUSH
5399: LD_INT 107
5401: PUSH
5402: LD_INT 108
5404: PUSH
5405: LD_INT 109
5407: PUSH
5408: LD_INT 110
5410: PUSH
5411: LD_INT 111
5413: PUSH
5414: LD_INT 112
5416: PUSH
5417: LD_INT 113
5419: PUSH
5420: LD_INT 114
5422: PUSH
5423: LD_INT 116
5425: PUSH
5426: LD_INT 117
5428: PUSH
5429: LD_INT 118
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: LIST
5450: PUSH
5451: EMPTY
5452: LIST
5453: LIST
5454: ST_TO_ADDR
5455: GO 6910
5457: LD_INT 13
5459: DOUBLE
5460: EQUAL
5461: IFTRUE 5465
5463: GO 5673
5465: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
5466: LD_ADDR_VAR 0 2
5470: PUSH
5471: LD_INT 1
5473: PUSH
5474: LD_INT 2
5476: PUSH
5477: LD_INT 3
5479: PUSH
5480: LD_INT 4
5482: PUSH
5483: LD_INT 5
5485: PUSH
5486: LD_INT 8
5488: PUSH
5489: LD_INT 9
5491: PUSH
5492: LD_INT 10
5494: PUSH
5495: LD_INT 11
5497: PUSH
5498: LD_INT 12
5500: PUSH
5501: LD_INT 14
5503: PUSH
5504: LD_INT 15
5506: PUSH
5507: LD_INT 16
5509: PUSH
5510: LD_INT 17
5512: PUSH
5513: LD_INT 18
5515: PUSH
5516: LD_INT 19
5518: PUSH
5519: LD_INT 20
5521: PUSH
5522: LD_INT 21
5524: PUSH
5525: LD_INT 22
5527: PUSH
5528: LD_INT 23
5530: PUSH
5531: LD_INT 24
5533: PUSH
5534: LD_INT 25
5536: PUSH
5537: LD_INT 26
5539: PUSH
5540: LD_INT 27
5542: PUSH
5543: LD_INT 28
5545: PUSH
5546: LD_INT 30
5548: PUSH
5549: LD_INT 31
5551: PUSH
5552: LD_INT 32
5554: PUSH
5555: LD_INT 33
5557: PUSH
5558: LD_INT 34
5560: PUSH
5561: LD_INT 36
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: PUSH
5597: LD_INT 101
5599: PUSH
5600: LD_INT 102
5602: PUSH
5603: LD_INT 103
5605: PUSH
5606: LD_INT 104
5608: PUSH
5609: LD_INT 105
5611: PUSH
5612: LD_INT 106
5614: PUSH
5615: LD_INT 107
5617: PUSH
5618: LD_INT 108
5620: PUSH
5621: LD_INT 109
5623: PUSH
5624: LD_INT 110
5626: PUSH
5627: LD_INT 111
5629: PUSH
5630: LD_INT 112
5632: PUSH
5633: LD_INT 113
5635: PUSH
5636: LD_INT 114
5638: PUSH
5639: LD_INT 116
5641: PUSH
5642: LD_INT 117
5644: PUSH
5645: LD_INT 118
5647: PUSH
5648: EMPTY
5649: LIST
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: LIST
5661: LIST
5662: LIST
5663: LIST
5664: LIST
5665: LIST
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: ST_TO_ADDR
5671: GO 6910
5673: LD_INT 14
5675: DOUBLE
5676: EQUAL
5677: IFTRUE 5681
5679: GO 5905
5681: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
5682: LD_ADDR_VAR 0 2
5686: PUSH
5687: LD_INT 1
5689: PUSH
5690: LD_INT 2
5692: PUSH
5693: LD_INT 3
5695: PUSH
5696: LD_INT 4
5698: PUSH
5699: LD_INT 5
5701: PUSH
5702: LD_INT 6
5704: PUSH
5705: LD_INT 7
5707: PUSH
5708: LD_INT 8
5710: PUSH
5711: LD_INT 9
5713: PUSH
5714: LD_INT 10
5716: PUSH
5717: LD_INT 11
5719: PUSH
5720: LD_INT 12
5722: PUSH
5723: LD_INT 13
5725: PUSH
5726: LD_INT 14
5728: PUSH
5729: LD_INT 15
5731: PUSH
5732: LD_INT 16
5734: PUSH
5735: LD_INT 17
5737: PUSH
5738: LD_INT 18
5740: PUSH
5741: LD_INT 19
5743: PUSH
5744: LD_INT 20
5746: PUSH
5747: LD_INT 21
5749: PUSH
5750: LD_INT 22
5752: PUSH
5753: LD_INT 23
5755: PUSH
5756: LD_INT 24
5758: PUSH
5759: LD_INT 25
5761: PUSH
5762: LD_INT 26
5764: PUSH
5765: LD_INT 27
5767: PUSH
5768: LD_INT 28
5770: PUSH
5771: LD_INT 29
5773: PUSH
5774: LD_INT 30
5776: PUSH
5777: LD_INT 31
5779: PUSH
5780: LD_INT 32
5782: PUSH
5783: LD_INT 33
5785: PUSH
5786: LD_INT 34
5788: PUSH
5789: LD_INT 36
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: LIST
5799: LIST
5800: LIST
5801: LIST
5802: LIST
5803: LIST
5804: LIST
5805: LIST
5806: LIST
5807: LIST
5808: LIST
5809: LIST
5810: LIST
5811: LIST
5812: LIST
5813: LIST
5814: LIST
5815: LIST
5816: LIST
5817: LIST
5818: LIST
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: LIST
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: PUSH
5829: LD_INT 101
5831: PUSH
5832: LD_INT 102
5834: PUSH
5835: LD_INT 103
5837: PUSH
5838: LD_INT 104
5840: PUSH
5841: LD_INT 105
5843: PUSH
5844: LD_INT 106
5846: PUSH
5847: LD_INT 107
5849: PUSH
5850: LD_INT 108
5852: PUSH
5853: LD_INT 109
5855: PUSH
5856: LD_INT 110
5858: PUSH
5859: LD_INT 111
5861: PUSH
5862: LD_INT 112
5864: PUSH
5865: LD_INT 113
5867: PUSH
5868: LD_INT 114
5870: PUSH
5871: LD_INT 116
5873: PUSH
5874: LD_INT 117
5876: PUSH
5877: LD_INT 118
5879: PUSH
5880: EMPTY
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: PUSH
5899: EMPTY
5900: LIST
5901: LIST
5902: ST_TO_ADDR
5903: GO 6910
5905: LD_INT 15
5907: DOUBLE
5908: EQUAL
5909: IFTRUE 5913
5911: GO 6137
5913: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
5914: LD_ADDR_VAR 0 2
5918: PUSH
5919: LD_INT 1
5921: PUSH
5922: LD_INT 2
5924: PUSH
5925: LD_INT 3
5927: PUSH
5928: LD_INT 4
5930: PUSH
5931: LD_INT 5
5933: PUSH
5934: LD_INT 6
5936: PUSH
5937: LD_INT 7
5939: PUSH
5940: LD_INT 8
5942: PUSH
5943: LD_INT 9
5945: PUSH
5946: LD_INT 10
5948: PUSH
5949: LD_INT 11
5951: PUSH
5952: LD_INT 12
5954: PUSH
5955: LD_INT 13
5957: PUSH
5958: LD_INT 14
5960: PUSH
5961: LD_INT 15
5963: PUSH
5964: LD_INT 16
5966: PUSH
5967: LD_INT 17
5969: PUSH
5970: LD_INT 18
5972: PUSH
5973: LD_INT 19
5975: PUSH
5976: LD_INT 20
5978: PUSH
5979: LD_INT 21
5981: PUSH
5982: LD_INT 22
5984: PUSH
5985: LD_INT 23
5987: PUSH
5988: LD_INT 24
5990: PUSH
5991: LD_INT 25
5993: PUSH
5994: LD_INT 26
5996: PUSH
5997: LD_INT 27
5999: PUSH
6000: LD_INT 28
6002: PUSH
6003: LD_INT 29
6005: PUSH
6006: LD_INT 30
6008: PUSH
6009: LD_INT 31
6011: PUSH
6012: LD_INT 32
6014: PUSH
6015: LD_INT 33
6017: PUSH
6018: LD_INT 34
6020: PUSH
6021: LD_INT 36
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: PUSH
6061: LD_INT 101
6063: PUSH
6064: LD_INT 102
6066: PUSH
6067: LD_INT 103
6069: PUSH
6070: LD_INT 104
6072: PUSH
6073: LD_INT 105
6075: PUSH
6076: LD_INT 106
6078: PUSH
6079: LD_INT 107
6081: PUSH
6082: LD_INT 108
6084: PUSH
6085: LD_INT 109
6087: PUSH
6088: LD_INT 110
6090: PUSH
6091: LD_INT 111
6093: PUSH
6094: LD_INT 112
6096: PUSH
6097: LD_INT 113
6099: PUSH
6100: LD_INT 114
6102: PUSH
6103: LD_INT 116
6105: PUSH
6106: LD_INT 117
6108: PUSH
6109: LD_INT 118
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: ST_TO_ADDR
6135: GO 6910
6137: LD_INT 16
6139: DOUBLE
6140: EQUAL
6141: IFTRUE 6145
6143: GO 6281
6145: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
6146: LD_ADDR_VAR 0 2
6150: PUSH
6151: LD_INT 2
6153: PUSH
6154: LD_INT 4
6156: PUSH
6157: LD_INT 5
6159: PUSH
6160: LD_INT 7
6162: PUSH
6163: LD_INT 11
6165: PUSH
6166: LD_INT 12
6168: PUSH
6169: LD_INT 15
6171: PUSH
6172: LD_INT 16
6174: PUSH
6175: LD_INT 20
6177: PUSH
6178: LD_INT 21
6180: PUSH
6181: LD_INT 22
6183: PUSH
6184: LD_INT 23
6186: PUSH
6187: LD_INT 25
6189: PUSH
6190: LD_INT 26
6192: PUSH
6193: LD_INT 30
6195: PUSH
6196: LD_INT 31
6198: PUSH
6199: LD_INT 32
6201: PUSH
6202: LD_INT 33
6204: PUSH
6205: LD_INT 34
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: LIST
6218: LIST
6219: LIST
6220: LIST
6221: LIST
6222: LIST
6223: LIST
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: PUSH
6229: LD_INT 101
6231: PUSH
6232: LD_INT 102
6234: PUSH
6235: LD_INT 103
6237: PUSH
6238: LD_INT 106
6240: PUSH
6241: LD_INT 108
6243: PUSH
6244: LD_INT 112
6246: PUSH
6247: LD_INT 113
6249: PUSH
6250: LD_INT 114
6252: PUSH
6253: LD_INT 116
6255: PUSH
6256: LD_INT 117
6258: PUSH
6259: LD_INT 118
6261: PUSH
6262: EMPTY
6263: LIST
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: ST_TO_ADDR
6279: GO 6910
6281: LD_INT 17
6283: DOUBLE
6284: EQUAL
6285: IFTRUE 6289
6287: GO 6513
6289: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
6290: LD_ADDR_VAR 0 2
6294: PUSH
6295: LD_INT 1
6297: PUSH
6298: LD_INT 2
6300: PUSH
6301: LD_INT 3
6303: PUSH
6304: LD_INT 4
6306: PUSH
6307: LD_INT 5
6309: PUSH
6310: LD_INT 6
6312: PUSH
6313: LD_INT 7
6315: PUSH
6316: LD_INT 8
6318: PUSH
6319: LD_INT 9
6321: PUSH
6322: LD_INT 10
6324: PUSH
6325: LD_INT 11
6327: PUSH
6328: LD_INT 12
6330: PUSH
6331: LD_INT 13
6333: PUSH
6334: LD_INT 14
6336: PUSH
6337: LD_INT 15
6339: PUSH
6340: LD_INT 16
6342: PUSH
6343: LD_INT 17
6345: PUSH
6346: LD_INT 18
6348: PUSH
6349: LD_INT 19
6351: PUSH
6352: LD_INT 20
6354: PUSH
6355: LD_INT 21
6357: PUSH
6358: LD_INT 22
6360: PUSH
6361: LD_INT 23
6363: PUSH
6364: LD_INT 24
6366: PUSH
6367: LD_INT 25
6369: PUSH
6370: LD_INT 26
6372: PUSH
6373: LD_INT 27
6375: PUSH
6376: LD_INT 28
6378: PUSH
6379: LD_INT 29
6381: PUSH
6382: LD_INT 30
6384: PUSH
6385: LD_INT 31
6387: PUSH
6388: LD_INT 32
6390: PUSH
6391: LD_INT 33
6393: PUSH
6394: LD_INT 34
6396: PUSH
6397: LD_INT 36
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: PUSH
6437: LD_INT 101
6439: PUSH
6440: LD_INT 102
6442: PUSH
6443: LD_INT 103
6445: PUSH
6446: LD_INT 104
6448: PUSH
6449: LD_INT 105
6451: PUSH
6452: LD_INT 106
6454: PUSH
6455: LD_INT 107
6457: PUSH
6458: LD_INT 108
6460: PUSH
6461: LD_INT 109
6463: PUSH
6464: LD_INT 110
6466: PUSH
6467: LD_INT 111
6469: PUSH
6470: LD_INT 112
6472: PUSH
6473: LD_INT 113
6475: PUSH
6476: LD_INT 114
6478: PUSH
6479: LD_INT 116
6481: PUSH
6482: LD_INT 117
6484: PUSH
6485: LD_INT 118
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: ST_TO_ADDR
6511: GO 6910
6513: LD_INT 18
6515: DOUBLE
6516: EQUAL
6517: IFTRUE 6521
6519: GO 6669
6521: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
6522: LD_ADDR_VAR 0 2
6526: PUSH
6527: LD_INT 2
6529: PUSH
6530: LD_INT 4
6532: PUSH
6533: LD_INT 5
6535: PUSH
6536: LD_INT 7
6538: PUSH
6539: LD_INT 11
6541: PUSH
6542: LD_INT 12
6544: PUSH
6545: LD_INT 15
6547: PUSH
6548: LD_INT 16
6550: PUSH
6551: LD_INT 20
6553: PUSH
6554: LD_INT 21
6556: PUSH
6557: LD_INT 22
6559: PUSH
6560: LD_INT 23
6562: PUSH
6563: LD_INT 25
6565: PUSH
6566: LD_INT 26
6568: PUSH
6569: LD_INT 30
6571: PUSH
6572: LD_INT 31
6574: PUSH
6575: LD_INT 32
6577: PUSH
6578: LD_INT 33
6580: PUSH
6581: LD_INT 34
6583: PUSH
6584: LD_INT 35
6586: PUSH
6587: LD_INT 36
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: PUSH
6613: LD_INT 101
6615: PUSH
6616: LD_INT 102
6618: PUSH
6619: LD_INT 103
6621: PUSH
6622: LD_INT 106
6624: PUSH
6625: LD_INT 108
6627: PUSH
6628: LD_INT 112
6630: PUSH
6631: LD_INT 113
6633: PUSH
6634: LD_INT 114
6636: PUSH
6637: LD_INT 115
6639: PUSH
6640: LD_INT 116
6642: PUSH
6643: LD_INT 117
6645: PUSH
6646: LD_INT 118
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: ST_TO_ADDR
6667: GO 6910
6669: LD_INT 19
6671: DOUBLE
6672: EQUAL
6673: IFTRUE 6677
6675: GO 6909
6677: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
6678: LD_ADDR_VAR 0 2
6682: PUSH
6683: LD_INT 1
6685: PUSH
6686: LD_INT 2
6688: PUSH
6689: LD_INT 3
6691: PUSH
6692: LD_INT 4
6694: PUSH
6695: LD_INT 5
6697: PUSH
6698: LD_INT 6
6700: PUSH
6701: LD_INT 7
6703: PUSH
6704: LD_INT 8
6706: PUSH
6707: LD_INT 9
6709: PUSH
6710: LD_INT 10
6712: PUSH
6713: LD_INT 11
6715: PUSH
6716: LD_INT 12
6718: PUSH
6719: LD_INT 13
6721: PUSH
6722: LD_INT 14
6724: PUSH
6725: LD_INT 15
6727: PUSH
6728: LD_INT 16
6730: PUSH
6731: LD_INT 17
6733: PUSH
6734: LD_INT 18
6736: PUSH
6737: LD_INT 19
6739: PUSH
6740: LD_INT 20
6742: PUSH
6743: LD_INT 21
6745: PUSH
6746: LD_INT 22
6748: PUSH
6749: LD_INT 23
6751: PUSH
6752: LD_INT 24
6754: PUSH
6755: LD_INT 25
6757: PUSH
6758: LD_INT 26
6760: PUSH
6761: LD_INT 27
6763: PUSH
6764: LD_INT 28
6766: PUSH
6767: LD_INT 29
6769: PUSH
6770: LD_INT 30
6772: PUSH
6773: LD_INT 31
6775: PUSH
6776: LD_INT 32
6778: PUSH
6779: LD_INT 33
6781: PUSH
6782: LD_INT 34
6784: PUSH
6785: LD_INT 35
6787: PUSH
6788: LD_INT 36
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: PUSH
6829: LD_INT 101
6831: PUSH
6832: LD_INT 102
6834: PUSH
6835: LD_INT 103
6837: PUSH
6838: LD_INT 104
6840: PUSH
6841: LD_INT 105
6843: PUSH
6844: LD_INT 106
6846: PUSH
6847: LD_INT 107
6849: PUSH
6850: LD_INT 108
6852: PUSH
6853: LD_INT 109
6855: PUSH
6856: LD_INT 110
6858: PUSH
6859: LD_INT 111
6861: PUSH
6862: LD_INT 112
6864: PUSH
6865: LD_INT 113
6867: PUSH
6868: LD_INT 114
6870: PUSH
6871: LD_INT 115
6873: PUSH
6874: LD_INT 116
6876: PUSH
6877: LD_INT 117
6879: PUSH
6880: LD_INT 118
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: LIST
6898: LIST
6899: LIST
6900: LIST
6901: LIST
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: ST_TO_ADDR
6907: GO 6910
6909: POP
// end else
6910: GO 7141
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
6912: LD_ADDR_VAR 0 2
6916: PUSH
6917: LD_INT 1
6919: PUSH
6920: LD_INT 2
6922: PUSH
6923: LD_INT 3
6925: PUSH
6926: LD_INT 4
6928: PUSH
6929: LD_INT 5
6931: PUSH
6932: LD_INT 6
6934: PUSH
6935: LD_INT 7
6937: PUSH
6938: LD_INT 8
6940: PUSH
6941: LD_INT 9
6943: PUSH
6944: LD_INT 10
6946: PUSH
6947: LD_INT 11
6949: PUSH
6950: LD_INT 12
6952: PUSH
6953: LD_INT 13
6955: PUSH
6956: LD_INT 14
6958: PUSH
6959: LD_INT 15
6961: PUSH
6962: LD_INT 16
6964: PUSH
6965: LD_INT 17
6967: PUSH
6968: LD_INT 18
6970: PUSH
6971: LD_INT 19
6973: PUSH
6974: LD_INT 20
6976: PUSH
6977: LD_INT 21
6979: PUSH
6980: LD_INT 22
6982: PUSH
6983: LD_INT 23
6985: PUSH
6986: LD_INT 24
6988: PUSH
6989: LD_INT 25
6991: PUSH
6992: LD_INT 26
6994: PUSH
6995: LD_INT 27
6997: PUSH
6998: LD_INT 28
7000: PUSH
7001: LD_INT 29
7003: PUSH
7004: LD_INT 30
7006: PUSH
7007: LD_INT 31
7009: PUSH
7010: LD_INT 32
7012: PUSH
7013: LD_INT 33
7015: PUSH
7016: LD_INT 34
7018: PUSH
7019: LD_INT 35
7021: PUSH
7022: LD_INT 36
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: PUSH
7063: LD_INT 101
7065: PUSH
7066: LD_INT 102
7068: PUSH
7069: LD_INT 103
7071: PUSH
7072: LD_INT 104
7074: PUSH
7075: LD_INT 105
7077: PUSH
7078: LD_INT 106
7080: PUSH
7081: LD_INT 107
7083: PUSH
7084: LD_INT 108
7086: PUSH
7087: LD_INT 109
7089: PUSH
7090: LD_INT 110
7092: PUSH
7093: LD_INT 111
7095: PUSH
7096: LD_INT 112
7098: PUSH
7099: LD_INT 113
7101: PUSH
7102: LD_INT 114
7104: PUSH
7105: LD_INT 115
7107: PUSH
7108: LD_INT 116
7110: PUSH
7111: LD_INT 117
7113: PUSH
7114: LD_INT 118
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: PUSH
7137: EMPTY
7138: LIST
7139: LIST
7140: ST_TO_ADDR
// if result then
7141: LD_VAR 0 2
7145: IFFALSE 7931
// begin normal :=  ;
7147: LD_ADDR_VAR 0 5
7151: PUSH
7152: LD_STRING 
7154: ST_TO_ADDR
// hardcore :=  ;
7155: LD_ADDR_VAR 0 6
7159: PUSH
7160: LD_STRING 
7162: ST_TO_ADDR
// active :=  ;
7163: LD_ADDR_VAR 0 7
7167: PUSH
7168: LD_STRING 
7170: ST_TO_ADDR
// for i = 1 to normalCounter do
7171: LD_ADDR_VAR 0 8
7175: PUSH
7176: DOUBLE
7177: LD_INT 1
7179: DEC
7180: ST_TO_ADDR
7181: LD_EXP 9
7185: PUSH
7186: FOR_TO
7187: IFFALSE 7288
// begin tmp := 0 ;
7189: LD_ADDR_VAR 0 3
7193: PUSH
7194: LD_STRING 0
7196: ST_TO_ADDR
// if result [ 1 ] then
7197: LD_VAR 0 2
7201: PUSH
7202: LD_INT 1
7204: ARRAY
7205: IFFALSE 7270
// if result [ 1 ] [ 1 ] = i then
7207: LD_VAR 0 2
7211: PUSH
7212: LD_INT 1
7214: ARRAY
7215: PUSH
7216: LD_INT 1
7218: ARRAY
7219: PUSH
7220: LD_VAR 0 8
7224: EQUAL
7225: IFFALSE 7270
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7227: LD_ADDR_VAR 0 2
7231: PUSH
7232: LD_VAR 0 2
7236: PPUSH
7237: LD_INT 1
7239: PPUSH
7240: LD_VAR 0 2
7244: PUSH
7245: LD_INT 1
7247: ARRAY
7248: PPUSH
7249: LD_INT 1
7251: PPUSH
7252: CALL_OW 3
7256: PPUSH
7257: CALL_OW 1
7261: ST_TO_ADDR
// tmp := 1 ;
7262: LD_ADDR_VAR 0 3
7266: PUSH
7267: LD_STRING 1
7269: ST_TO_ADDR
// end ; normal := normal & tmp ;
7270: LD_ADDR_VAR 0 5
7274: PUSH
7275: LD_VAR 0 5
7279: PUSH
7280: LD_VAR 0 3
7284: STR
7285: ST_TO_ADDR
// end ;
7286: GO 7186
7288: POP
7289: POP
// for i = 1 to hardcoreCounter do
7290: LD_ADDR_VAR 0 8
7294: PUSH
7295: DOUBLE
7296: LD_INT 1
7298: DEC
7299: ST_TO_ADDR
7300: LD_EXP 10
7304: PUSH
7305: FOR_TO
7306: IFFALSE 7411
// begin tmp := 0 ;
7308: LD_ADDR_VAR 0 3
7312: PUSH
7313: LD_STRING 0
7315: ST_TO_ADDR
// if result [ 2 ] then
7316: LD_VAR 0 2
7320: PUSH
7321: LD_INT 2
7323: ARRAY
7324: IFFALSE 7393
// if result [ 2 ] [ 1 ] = 100 + i then
7326: LD_VAR 0 2
7330: PUSH
7331: LD_INT 2
7333: ARRAY
7334: PUSH
7335: LD_INT 1
7337: ARRAY
7338: PUSH
7339: LD_INT 100
7341: PUSH
7342: LD_VAR 0 8
7346: PLUS
7347: EQUAL
7348: IFFALSE 7393
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7350: LD_ADDR_VAR 0 2
7354: PUSH
7355: LD_VAR 0 2
7359: PPUSH
7360: LD_INT 2
7362: PPUSH
7363: LD_VAR 0 2
7367: PUSH
7368: LD_INT 2
7370: ARRAY
7371: PPUSH
7372: LD_INT 1
7374: PPUSH
7375: CALL_OW 3
7379: PPUSH
7380: CALL_OW 1
7384: ST_TO_ADDR
// tmp := 1 ;
7385: LD_ADDR_VAR 0 3
7389: PUSH
7390: LD_STRING 1
7392: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7393: LD_ADDR_VAR 0 6
7397: PUSH
7398: LD_VAR 0 6
7402: PUSH
7403: LD_VAR 0 3
7407: STR
7408: ST_TO_ADDR
// end ;
7409: GO 7305
7411: POP
7412: POP
// if isGameLoad then
7413: LD_VAR 0 1
7417: IFFALSE 7892
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
7419: LD_ADDR_VAR 0 4
7423: PUSH
7424: LD_EXP 13
7428: PUSH
7429: LD_EXP 12
7433: PUSH
7434: LD_EXP 14
7438: PUSH
7439: LD_EXP 11
7443: PUSH
7444: LD_EXP 15
7448: PUSH
7449: LD_EXP 16
7453: PUSH
7454: LD_EXP 17
7458: PUSH
7459: LD_EXP 18
7463: PUSH
7464: LD_EXP 19
7468: PUSH
7469: LD_EXP 20
7473: PUSH
7474: LD_EXP 21
7478: PUSH
7479: LD_EXP 22
7483: PUSH
7484: LD_EXP 23
7488: PUSH
7489: LD_EXP 24
7493: PUSH
7494: LD_EXP 32
7498: PUSH
7499: LD_EXP 33
7503: PUSH
7504: LD_EXP 34
7508: PUSH
7509: LD_EXP 35
7513: PUSH
7514: LD_EXP 37
7518: PUSH
7519: LD_EXP 38
7523: PUSH
7524: LD_EXP 39
7528: PUSH
7529: LD_EXP 42
7533: PUSH
7534: LD_EXP 44
7538: PUSH
7539: LD_EXP 45
7543: PUSH
7544: LD_EXP 46
7548: PUSH
7549: LD_EXP 48
7553: PUSH
7554: LD_EXP 49
7558: PUSH
7559: LD_EXP 52
7563: PUSH
7564: LD_EXP 53
7568: PUSH
7569: LD_EXP 54
7573: PUSH
7574: LD_EXP 55
7578: PUSH
7579: LD_EXP 56
7583: PUSH
7584: LD_EXP 57
7588: PUSH
7589: LD_EXP 58
7593: PUSH
7594: LD_EXP 59
7598: PUSH
7599: LD_EXP 60
7603: PUSH
7604: LD_EXP 25
7608: PUSH
7609: LD_EXP 26
7613: PUSH
7614: LD_EXP 29
7618: PUSH
7619: LD_EXP 30
7623: PUSH
7624: LD_EXP 31
7628: PUSH
7629: LD_EXP 27
7633: PUSH
7634: LD_EXP 28
7638: PUSH
7639: LD_EXP 36
7643: PUSH
7644: LD_EXP 40
7648: PUSH
7649: LD_EXP 41
7653: PUSH
7654: LD_EXP 43
7658: PUSH
7659: LD_EXP 47
7663: PUSH
7664: LD_EXP 50
7668: PUSH
7669: LD_EXP 51
7673: PUSH
7674: LD_EXP 61
7678: PUSH
7679: LD_EXP 62
7683: PUSH
7684: LD_EXP 63
7688: PUSH
7689: LD_EXP 64
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: ST_TO_ADDR
// tmp :=  ;
7750: LD_ADDR_VAR 0 3
7754: PUSH
7755: LD_STRING 
7757: ST_TO_ADDR
// for i = 1 to normalCounter do
7758: LD_ADDR_VAR 0 8
7762: PUSH
7763: DOUBLE
7764: LD_INT 1
7766: DEC
7767: ST_TO_ADDR
7768: LD_EXP 9
7772: PUSH
7773: FOR_TO
7774: IFFALSE 7810
// begin if flags [ i ] then
7776: LD_VAR 0 4
7780: PUSH
7781: LD_VAR 0 8
7785: ARRAY
7786: IFFALSE 7808
// tmp := tmp & i & ; ;
7788: LD_ADDR_VAR 0 3
7792: PUSH
7793: LD_VAR 0 3
7797: PUSH
7798: LD_VAR 0 8
7802: STR
7803: PUSH
7804: LD_STRING ;
7806: STR
7807: ST_TO_ADDR
// end ;
7808: GO 7773
7810: POP
7811: POP
// for i = 1 to hardcoreCounter do
7812: LD_ADDR_VAR 0 8
7816: PUSH
7817: DOUBLE
7818: LD_INT 1
7820: DEC
7821: ST_TO_ADDR
7822: LD_EXP 10
7826: PUSH
7827: FOR_TO
7828: IFFALSE 7874
// begin if flags [ normalCounter + i ] then
7830: LD_VAR 0 4
7834: PUSH
7835: LD_EXP 9
7839: PUSH
7840: LD_VAR 0 8
7844: PLUS
7845: ARRAY
7846: IFFALSE 7872
// tmp := tmp & ( 100 + i ) & ; ;
7848: LD_ADDR_VAR 0 3
7852: PUSH
7853: LD_VAR 0 3
7857: PUSH
7858: LD_INT 100
7860: PUSH
7861: LD_VAR 0 8
7865: PLUS
7866: STR
7867: PUSH
7868: LD_STRING ;
7870: STR
7871: ST_TO_ADDR
// end ;
7872: GO 7827
7874: POP
7875: POP
// if tmp then
7876: LD_VAR 0 3
7880: IFFALSE 7892
// active := tmp ;
7882: LD_ADDR_VAR 0 7
7886: PUSH
7887: LD_VAR 0 3
7891: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
7892: LD_STRING getStreamItemsFromMission("
7894: PUSH
7895: LD_VAR 0 5
7899: STR
7900: PUSH
7901: LD_STRING ","
7903: STR
7904: PUSH
7905: LD_VAR 0 6
7909: STR
7910: PUSH
7911: LD_STRING ","
7913: STR
7914: PUSH
7915: LD_VAR 0 7
7919: STR
7920: PUSH
7921: LD_STRING ")
7923: STR
7924: PPUSH
7925: CALL_OW 559
// end else
7929: GO 7938
// ToLua ( getStreamItemsFromMission("","","") ) ;
7931: LD_STRING getStreamItemsFromMission("","","")
7933: PPUSH
7934: CALL_OW 559
// end ;
7938: LD_VAR 0 2
7942: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
7943: LD_EXP 8
7947: IFFALSE 7955
7949: PUSH
7950: LD_EXP 13
7954: AND
7955: IFFALSE 8079
7957: GO 7959
7959: DISABLE
7960: LD_INT 0
7962: PPUSH
7963: PPUSH
// begin enable ;
7964: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
7965: LD_ADDR_VAR 0 2
7969: PUSH
7970: LD_INT 22
7972: PUSH
7973: LD_OWVAR 2
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: PUSH
7982: LD_INT 2
7984: PUSH
7985: LD_INT 34
7987: PUSH
7988: LD_INT 7
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: PUSH
7995: LD_INT 34
7997: PUSH
7998: LD_INT 45
8000: PUSH
8001: EMPTY
8002: LIST
8003: LIST
8004: PUSH
8005: LD_INT 34
8007: PUSH
8008: LD_INT 28
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: PUSH
8015: LD_INT 34
8017: PUSH
8018: LD_INT 47
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: PPUSH
8036: CALL_OW 69
8040: ST_TO_ADDR
// if not tmp then
8041: LD_VAR 0 2
8045: NOT
8046: IFFALSE 8050
// exit ;
8048: GO 8079
// for i in tmp do
8050: LD_ADDR_VAR 0 1
8054: PUSH
8055: LD_VAR 0 2
8059: PUSH
8060: FOR_IN
8061: IFFALSE 8077
// begin SetLives ( i , 0 ) ;
8063: LD_VAR 0 1
8067: PPUSH
8068: LD_INT 0
8070: PPUSH
8071: CALL_OW 234
// end ;
8075: GO 8060
8077: POP
8078: POP
// end ;
8079: PPOPN 2
8081: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
8082: LD_EXP 8
8086: IFFALSE 8094
8088: PUSH
8089: LD_EXP 14
8093: AND
8094: IFFALSE 8178
8096: GO 8098
8098: DISABLE
8099: LD_INT 0
8101: PPUSH
8102: PPUSH
// begin enable ;
8103: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
8104: LD_ADDR_VAR 0 2
8108: PUSH
8109: LD_INT 22
8111: PUSH
8112: LD_OWVAR 2
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: PUSH
8121: LD_INT 32
8123: PUSH
8124: LD_INT 3
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: PPUSH
8135: CALL_OW 69
8139: ST_TO_ADDR
// if not tmp then
8140: LD_VAR 0 2
8144: NOT
8145: IFFALSE 8149
// exit ;
8147: GO 8178
// for i in tmp do
8149: LD_ADDR_VAR 0 1
8153: PUSH
8154: LD_VAR 0 2
8158: PUSH
8159: FOR_IN
8160: IFFALSE 8176
// begin SetLives ( i , 0 ) ;
8162: LD_VAR 0 1
8166: PPUSH
8167: LD_INT 0
8169: PPUSH
8170: CALL_OW 234
// end ;
8174: GO 8159
8176: POP
8177: POP
// end ;
8178: PPOPN 2
8180: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
8181: LD_EXP 8
8185: IFFALSE 8193
8187: PUSH
8188: LD_EXP 11
8192: AND
8193: IFFALSE 8286
8195: GO 8197
8197: DISABLE
8198: LD_INT 0
8200: PPUSH
// begin enable ;
8201: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
8202: LD_ADDR_VAR 0 1
8206: PUSH
8207: LD_INT 22
8209: PUSH
8210: LD_OWVAR 2
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: PUSH
8219: LD_INT 2
8221: PUSH
8222: LD_INT 25
8224: PUSH
8225: LD_INT 5
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: LD_INT 25
8234: PUSH
8235: LD_INT 9
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: PUSH
8242: LD_INT 25
8244: PUSH
8245: LD_INT 8
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PPUSH
8262: CALL_OW 69
8266: PUSH
8267: FOR_IN
8268: IFFALSE 8284
// begin SetClass ( i , 1 ) ;
8270: LD_VAR 0 1
8274: PPUSH
8275: LD_INT 1
8277: PPUSH
8278: CALL_OW 336
// end ;
8282: GO 8267
8284: POP
8285: POP
// end ;
8286: PPOPN 1
8288: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
8289: LD_EXP 8
8293: IFFALSE 8301
8295: PUSH
8296: LD_EXP 12
8300: AND
8301: IFFALSE 8313
8303: PUSH
8304: LD_OWVAR 65
8308: PUSH
8309: LD_INT 7
8311: LESS
8312: AND
8313: IFFALSE 8327
8315: GO 8317
8317: DISABLE
// begin enable ;
8318: ENABLE
// game_speed := 7 ;
8319: LD_ADDR_OWVAR 65
8323: PUSH
8324: LD_INT 7
8326: ST_TO_ADDR
// end ;
8327: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
8328: LD_EXP 8
8332: IFFALSE 8340
8334: PUSH
8335: LD_EXP 15
8339: AND
8340: IFFALSE 8542
8342: GO 8344
8344: DISABLE
8345: LD_INT 0
8347: PPUSH
8348: PPUSH
8349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
8350: LD_ADDR_VAR 0 3
8354: PUSH
8355: LD_INT 81
8357: PUSH
8358: LD_OWVAR 2
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: PUSH
8367: LD_INT 21
8369: PUSH
8370: LD_INT 1
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: PPUSH
8381: CALL_OW 69
8385: ST_TO_ADDR
// if not tmp then
8386: LD_VAR 0 3
8390: NOT
8391: IFFALSE 8395
// exit ;
8393: GO 8542
// if tmp > 5 then
8395: LD_VAR 0 3
8399: PUSH
8400: LD_INT 5
8402: GREATER
8403: IFFALSE 8415
// k := 5 else
8405: LD_ADDR_VAR 0 2
8409: PUSH
8410: LD_INT 5
8412: ST_TO_ADDR
8413: GO 8425
// k := tmp ;
8415: LD_ADDR_VAR 0 2
8419: PUSH
8420: LD_VAR 0 3
8424: ST_TO_ADDR
// for i := 1 to k do
8425: LD_ADDR_VAR 0 1
8429: PUSH
8430: DOUBLE
8431: LD_INT 1
8433: DEC
8434: ST_TO_ADDR
8435: LD_VAR 0 2
8439: PUSH
8440: FOR_TO
8441: IFFALSE 8540
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
8443: LD_VAR 0 3
8447: PUSH
8448: LD_VAR 0 1
8452: ARRAY
8453: PPUSH
8454: LD_VAR 0 1
8458: PUSH
8459: LD_INT 4
8461: MOD
8462: PUSH
8463: LD_INT 1
8465: PLUS
8466: PPUSH
8467: CALL_OW 259
8471: PUSH
8472: LD_INT 10
8474: LESS
8475: IFFALSE 8538
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
8477: LD_VAR 0 3
8481: PUSH
8482: LD_VAR 0 1
8486: ARRAY
8487: PPUSH
8488: LD_VAR 0 1
8492: PUSH
8493: LD_INT 4
8495: MOD
8496: PUSH
8497: LD_INT 1
8499: PLUS
8500: PPUSH
8501: LD_VAR 0 3
8505: PUSH
8506: LD_VAR 0 1
8510: ARRAY
8511: PPUSH
8512: LD_VAR 0 1
8516: PUSH
8517: LD_INT 4
8519: MOD
8520: PUSH
8521: LD_INT 1
8523: PLUS
8524: PPUSH
8525: CALL_OW 259
8529: PUSH
8530: LD_INT 1
8532: PLUS
8533: PPUSH
8534: CALL_OW 237
8538: GO 8440
8540: POP
8541: POP
// end ;
8542: PPOPN 3
8544: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
8545: LD_EXP 8
8549: IFFALSE 8557
8551: PUSH
8552: LD_EXP 16
8556: AND
8557: IFFALSE 8577
8559: GO 8561
8561: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
8562: LD_INT 4
8564: PPUSH
8565: LD_OWVAR 2
8569: PPUSH
8570: LD_INT 0
8572: PPUSH
8573: CALL_OW 324
8577: END
// every 0 0$1 trigger StreamModeActive and sShovel do
8578: LD_EXP 8
8582: IFFALSE 8590
8584: PUSH
8585: LD_EXP 45
8589: AND
8590: IFFALSE 8610
8592: GO 8594
8594: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
8595: LD_INT 19
8597: PPUSH
8598: LD_OWVAR 2
8602: PPUSH
8603: LD_INT 0
8605: PPUSH
8606: CALL_OW 324
8610: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
8611: LD_EXP 8
8615: IFFALSE 8623
8617: PUSH
8618: LD_EXP 17
8622: AND
8623: IFFALSE 8725
8625: GO 8627
8627: DISABLE
8628: LD_INT 0
8630: PPUSH
8631: PPUSH
// begin enable ;
8632: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
8633: LD_ADDR_VAR 0 2
8637: PUSH
8638: LD_INT 22
8640: PUSH
8641: LD_OWVAR 2
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: PUSH
8650: LD_INT 2
8652: PUSH
8653: LD_INT 34
8655: PUSH
8656: LD_INT 11
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PUSH
8663: LD_INT 34
8665: PUSH
8666: LD_INT 30
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: LIST
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: PPUSH
8682: CALL_OW 69
8686: ST_TO_ADDR
// if not tmp then
8687: LD_VAR 0 2
8691: NOT
8692: IFFALSE 8696
// exit ;
8694: GO 8725
// for i in tmp do
8696: LD_ADDR_VAR 0 1
8700: PUSH
8701: LD_VAR 0 2
8705: PUSH
8706: FOR_IN
8707: IFFALSE 8723
// begin SetLives ( i , 0 ) ;
8709: LD_VAR 0 1
8713: PPUSH
8714: LD_INT 0
8716: PPUSH
8717: CALL_OW 234
// end ;
8721: GO 8706
8723: POP
8724: POP
// end ;
8725: PPOPN 2
8727: END
// every 0 0$1 trigger StreamModeActive and sBunker do
8728: LD_EXP 8
8732: IFFALSE 8740
8734: PUSH
8735: LD_EXP 18
8739: AND
8740: IFFALSE 8760
8742: GO 8744
8744: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
8745: LD_INT 32
8747: PPUSH
8748: LD_OWVAR 2
8752: PPUSH
8753: LD_INT 0
8755: PPUSH
8756: CALL_OW 324
8760: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
8761: LD_EXP 8
8765: IFFALSE 8773
8767: PUSH
8768: LD_EXP 19
8772: AND
8773: IFFALSE 8956
8775: GO 8777
8777: DISABLE
8778: LD_INT 0
8780: PPUSH
8781: PPUSH
8782: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
8783: LD_ADDR_VAR 0 2
8787: PUSH
8788: LD_INT 22
8790: PUSH
8791: LD_OWVAR 2
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: PUSH
8800: LD_INT 33
8802: PUSH
8803: LD_INT 3
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: PPUSH
8814: CALL_OW 69
8818: ST_TO_ADDR
// if not tmp then
8819: LD_VAR 0 2
8823: NOT
8824: IFFALSE 8828
// exit ;
8826: GO 8956
// side := 0 ;
8828: LD_ADDR_VAR 0 3
8832: PUSH
8833: LD_INT 0
8835: ST_TO_ADDR
// for i := 1 to 8 do
8836: LD_ADDR_VAR 0 1
8840: PUSH
8841: DOUBLE
8842: LD_INT 1
8844: DEC
8845: ST_TO_ADDR
8846: LD_INT 8
8848: PUSH
8849: FOR_TO
8850: IFFALSE 8900
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
8852: LD_OWVAR 2
8856: PUSH
8857: LD_VAR 0 1
8861: NONEQUAL
8862: IFFALSE 8884
8864: PUSH
8865: LD_OWVAR 2
8869: PPUSH
8870: LD_VAR 0 1
8874: PPUSH
8875: CALL_OW 81
8879: PUSH
8880: LD_INT 2
8882: EQUAL
8883: AND
8884: IFFALSE 8898
// begin side := i ;
8886: LD_ADDR_VAR 0 3
8890: PUSH
8891: LD_VAR 0 1
8895: ST_TO_ADDR
// break ;
8896: GO 8900
// end ;
8898: GO 8849
8900: POP
8901: POP
// if not side then
8902: LD_VAR 0 3
8906: NOT
8907: IFFALSE 8911
// exit ;
8909: GO 8956
// for i := 1 to tmp do
8911: LD_ADDR_VAR 0 1
8915: PUSH
8916: DOUBLE
8917: LD_INT 1
8919: DEC
8920: ST_TO_ADDR
8921: LD_VAR 0 2
8925: PUSH
8926: FOR_TO
8927: IFFALSE 8954
// if Prob ( 60 ) then
8929: LD_INT 60
8931: PPUSH
8932: CALL_OW 13
8936: IFFALSE 8952
// SetSide ( i , side ) ;
8938: LD_VAR 0 1
8942: PPUSH
8943: LD_VAR 0 3
8947: PPUSH
8948: CALL_OW 235
8952: GO 8926
8954: POP
8955: POP
// end ;
8956: PPOPN 3
8958: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
8959: LD_EXP 8
8963: IFFALSE 8971
8965: PUSH
8966: LD_EXP 21
8970: AND
8971: IFFALSE 9090
8973: GO 8975
8975: DISABLE
8976: LD_INT 0
8978: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
8979: LD_ADDR_VAR 0 1
8983: PUSH
8984: LD_INT 22
8986: PUSH
8987: LD_OWVAR 2
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: PUSH
8996: LD_INT 21
8998: PUSH
8999: LD_INT 1
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PUSH
9006: LD_INT 3
9008: PUSH
9009: LD_INT 23
9011: PUSH
9012: LD_INT 0
9014: PUSH
9015: EMPTY
9016: LIST
9017: LIST
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: LIST
9027: PPUSH
9028: CALL_OW 69
9032: PUSH
9033: FOR_IN
9034: IFFALSE 9088
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
9036: LD_VAR 0 1
9040: PPUSH
9041: CALL_OW 257
9045: PUSH
9046: LD_INT 1
9048: PUSH
9049: LD_INT 2
9051: PUSH
9052: LD_INT 3
9054: PUSH
9055: LD_INT 4
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: IN
9064: IFFALSE 9086
// SetClass ( un , rand ( 1 , 4 ) ) ;
9066: LD_VAR 0 1
9070: PPUSH
9071: LD_INT 1
9073: PPUSH
9074: LD_INT 4
9076: PPUSH
9077: CALL_OW 12
9081: PPUSH
9082: CALL_OW 336
9086: GO 9033
9088: POP
9089: POP
// end ;
9090: PPOPN 1
9092: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
9093: LD_EXP 8
9097: IFFALSE 9105
9099: PUSH
9100: LD_EXP 20
9104: AND
9105: IFFALSE 9184
9107: GO 9109
9109: DISABLE
9110: LD_INT 0
9112: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9113: LD_ADDR_VAR 0 1
9117: PUSH
9118: LD_INT 22
9120: PUSH
9121: LD_OWVAR 2
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: PUSH
9130: LD_INT 21
9132: PUSH
9133: LD_INT 3
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: PPUSH
9144: CALL_OW 69
9148: ST_TO_ADDR
// if not tmp then
9149: LD_VAR 0 1
9153: NOT
9154: IFFALSE 9158
// exit ;
9156: GO 9184
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
9158: LD_VAR 0 1
9162: PUSH
9163: LD_INT 1
9165: PPUSH
9166: LD_VAR 0 1
9170: PPUSH
9171: CALL_OW 12
9175: ARRAY
9176: PPUSH
9177: LD_INT 100
9179: PPUSH
9180: CALL_OW 234
// end ;
9184: PPOPN 1
9186: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
9187: LD_EXP 8
9191: IFFALSE 9199
9193: PUSH
9194: LD_EXP 22
9198: AND
9199: IFFALSE 9297
9201: GO 9203
9203: DISABLE
9204: LD_INT 0
9206: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9207: LD_ADDR_VAR 0 1
9211: PUSH
9212: LD_INT 22
9214: PUSH
9215: LD_OWVAR 2
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: PUSH
9224: LD_INT 21
9226: PUSH
9227: LD_INT 1
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: PUSH
9234: EMPTY
9235: LIST
9236: LIST
9237: PPUSH
9238: CALL_OW 69
9242: ST_TO_ADDR
// if not tmp then
9243: LD_VAR 0 1
9247: NOT
9248: IFFALSE 9252
// exit ;
9250: GO 9297
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
9252: LD_VAR 0 1
9256: PUSH
9257: LD_INT 1
9259: PPUSH
9260: LD_VAR 0 1
9264: PPUSH
9265: CALL_OW 12
9269: ARRAY
9270: PPUSH
9271: LD_INT 1
9273: PPUSH
9274: LD_INT 4
9276: PPUSH
9277: CALL_OW 12
9281: PPUSH
9282: LD_INT 3000
9284: PPUSH
9285: LD_INT 9000
9287: PPUSH
9288: CALL_OW 12
9292: PPUSH
9293: CALL_OW 492
// end ;
9297: PPOPN 1
9299: END
// every 0 0$1 trigger StreamModeActive and sDepot do
9300: LD_EXP 8
9304: IFFALSE 9312
9306: PUSH
9307: LD_EXP 23
9311: AND
9312: IFFALSE 9332
9314: GO 9316
9316: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
9317: LD_INT 1
9319: PPUSH
9320: LD_OWVAR 2
9324: PPUSH
9325: LD_INT 0
9327: PPUSH
9328: CALL_OW 324
9332: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
9333: LD_EXP 8
9337: IFFALSE 9345
9339: PUSH
9340: LD_EXP 24
9344: AND
9345: IFFALSE 9428
9347: GO 9349
9349: DISABLE
9350: LD_INT 0
9352: PPUSH
9353: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9354: LD_ADDR_VAR 0 2
9358: PUSH
9359: LD_INT 22
9361: PUSH
9362: LD_OWVAR 2
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: PUSH
9371: LD_INT 21
9373: PUSH
9374: LD_INT 3
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: PPUSH
9385: CALL_OW 69
9389: ST_TO_ADDR
// if not tmp then
9390: LD_VAR 0 2
9394: NOT
9395: IFFALSE 9399
// exit ;
9397: GO 9428
// for i in tmp do
9399: LD_ADDR_VAR 0 1
9403: PUSH
9404: LD_VAR 0 2
9408: PUSH
9409: FOR_IN
9410: IFFALSE 9426
// SetBLevel ( i , 10 ) ;
9412: LD_VAR 0 1
9416: PPUSH
9417: LD_INT 10
9419: PPUSH
9420: CALL_OW 241
9424: GO 9409
9426: POP
9427: POP
// end ;
9428: PPOPN 2
9430: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
9431: LD_EXP 8
9435: IFFALSE 9443
9437: PUSH
9438: LD_EXP 25
9442: AND
9443: IFFALSE 9554
9445: GO 9447
9447: DISABLE
9448: LD_INT 0
9450: PPUSH
9451: PPUSH
9452: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
9453: LD_ADDR_VAR 0 3
9457: PUSH
9458: LD_INT 22
9460: PUSH
9461: LD_OWVAR 2
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: PUSH
9470: LD_INT 25
9472: PUSH
9473: LD_INT 1
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PPUSH
9484: CALL_OW 69
9488: ST_TO_ADDR
// if not tmp then
9489: LD_VAR 0 3
9493: NOT
9494: IFFALSE 9498
// exit ;
9496: GO 9554
// un := tmp [ rand ( 1 , tmp ) ] ;
9498: LD_ADDR_VAR 0 2
9502: PUSH
9503: LD_VAR 0 3
9507: PUSH
9508: LD_INT 1
9510: PPUSH
9511: LD_VAR 0 3
9515: PPUSH
9516: CALL_OW 12
9520: ARRAY
9521: ST_TO_ADDR
// if Crawls ( un ) then
9522: LD_VAR 0 2
9526: PPUSH
9527: CALL_OW 318
9531: IFFALSE 9542
// ComWalk ( un ) ;
9533: LD_VAR 0 2
9537: PPUSH
9538: CALL_OW 138
// SetClass ( un , class_sniper ) ;
9542: LD_VAR 0 2
9546: PPUSH
9547: LD_INT 5
9549: PPUSH
9550: CALL_OW 336
// end ;
9554: PPOPN 3
9556: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
9557: LD_EXP 8
9561: IFFALSE 9569
9563: PUSH
9564: LD_EXP 26
9568: AND
9569: IFFALSE 9581
9571: PUSH
9572: LD_OWVAR 67
9576: PUSH
9577: LD_INT 4
9579: LESS
9580: AND
9581: IFFALSE 9600
9583: GO 9585
9585: DISABLE
// begin Difficulty := Difficulty + 1 ;
9586: LD_ADDR_OWVAR 67
9590: PUSH
9591: LD_OWVAR 67
9595: PUSH
9596: LD_INT 1
9598: PLUS
9599: ST_TO_ADDR
// end ;
9600: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
9601: LD_EXP 8
9605: IFFALSE 9613
9607: PUSH
9608: LD_EXP 27
9612: AND
9613: IFFALSE 9716
9615: GO 9617
9617: DISABLE
9618: LD_INT 0
9620: PPUSH
// begin for i := 1 to 5 do
9621: LD_ADDR_VAR 0 1
9625: PUSH
9626: DOUBLE
9627: LD_INT 1
9629: DEC
9630: ST_TO_ADDR
9631: LD_INT 5
9633: PUSH
9634: FOR_TO
9635: IFFALSE 9714
// begin uc_nation := nation_nature ;
9637: LD_ADDR_OWVAR 21
9641: PUSH
9642: LD_INT 0
9644: ST_TO_ADDR
// uc_side := 0 ;
9645: LD_ADDR_OWVAR 20
9649: PUSH
9650: LD_INT 0
9652: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
9653: LD_ADDR_OWVAR 29
9657: PUSH
9658: LD_INT 12
9660: PUSH
9661: LD_INT 12
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: ST_TO_ADDR
// hc_agressivity := 20 ;
9668: LD_ADDR_OWVAR 35
9672: PUSH
9673: LD_INT 20
9675: ST_TO_ADDR
// hc_class := class_tiger ;
9676: LD_ADDR_OWVAR 28
9680: PUSH
9681: LD_INT 14
9683: ST_TO_ADDR
// hc_gallery :=  ;
9684: LD_ADDR_OWVAR 33
9688: PUSH
9689: LD_STRING 
9691: ST_TO_ADDR
// hc_name :=  ;
9692: LD_ADDR_OWVAR 26
9696: PUSH
9697: LD_STRING 
9699: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
9700: CALL_OW 44
9704: PPUSH
9705: LD_INT 0
9707: PPUSH
9708: CALL_OW 51
// end ;
9712: GO 9634
9714: POP
9715: POP
// end ;
9716: PPOPN 1
9718: END
// every 0 0$1 trigger StreamModeActive and sBomb do
9719: LD_EXP 8
9723: IFFALSE 9731
9725: PUSH
9726: LD_EXP 28
9730: AND
9731: IFFALSE 9740
9733: GO 9735
9735: DISABLE
// StreamSibBomb ;
9736: CALL 9741 0 0
9740: END
// export function StreamSibBomb ; var i , x , y ; begin
9741: LD_INT 0
9743: PPUSH
9744: PPUSH
9745: PPUSH
9746: PPUSH
// result := false ;
9747: LD_ADDR_VAR 0 1
9751: PUSH
9752: LD_INT 0
9754: ST_TO_ADDR
// for i := 1 to 16 do
9755: LD_ADDR_VAR 0 2
9759: PUSH
9760: DOUBLE
9761: LD_INT 1
9763: DEC
9764: ST_TO_ADDR
9765: LD_INT 16
9767: PUSH
9768: FOR_TO
9769: IFFALSE 9968
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9771: LD_ADDR_VAR 0 3
9775: PUSH
9776: LD_INT 10
9778: PUSH
9779: LD_INT 20
9781: PUSH
9782: LD_INT 30
9784: PUSH
9785: LD_INT 40
9787: PUSH
9788: LD_INT 50
9790: PUSH
9791: LD_INT 60
9793: PUSH
9794: LD_INT 70
9796: PUSH
9797: LD_INT 80
9799: PUSH
9800: LD_INT 90
9802: PUSH
9803: LD_INT 100
9805: PUSH
9806: LD_INT 110
9808: PUSH
9809: LD_INT 120
9811: PUSH
9812: LD_INT 130
9814: PUSH
9815: LD_INT 140
9817: PUSH
9818: LD_INT 150
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: PUSH
9838: LD_INT 1
9840: PPUSH
9841: LD_INT 15
9843: PPUSH
9844: CALL_OW 12
9848: ARRAY
9849: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
9850: LD_ADDR_VAR 0 4
9854: PUSH
9855: LD_INT 10
9857: PUSH
9858: LD_INT 20
9860: PUSH
9861: LD_INT 30
9863: PUSH
9864: LD_INT 40
9866: PUSH
9867: LD_INT 50
9869: PUSH
9870: LD_INT 60
9872: PUSH
9873: LD_INT 70
9875: PUSH
9876: LD_INT 80
9878: PUSH
9879: LD_INT 90
9881: PUSH
9882: LD_INT 100
9884: PUSH
9885: LD_INT 110
9887: PUSH
9888: LD_INT 120
9890: PUSH
9891: LD_INT 130
9893: PUSH
9894: LD_INT 140
9896: PUSH
9897: LD_INT 150
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: PUSH
9917: LD_INT 1
9919: PPUSH
9920: LD_INT 15
9922: PPUSH
9923: CALL_OW 12
9927: ARRAY
9928: ST_TO_ADDR
// if ValidHex ( x , y ) then
9929: LD_VAR 0 3
9933: PPUSH
9934: LD_VAR 0 4
9938: PPUSH
9939: CALL_OW 488
9943: IFFALSE 9966
// begin result := [ x , y ] ;
9945: LD_ADDR_VAR 0 1
9949: PUSH
9950: LD_VAR 0 3
9954: PUSH
9955: LD_VAR 0 4
9959: PUSH
9960: EMPTY
9961: LIST
9962: LIST
9963: ST_TO_ADDR
// break ;
9964: GO 9968
// end ; end ;
9966: GO 9768
9968: POP
9969: POP
// if result then
9970: LD_VAR 0 1
9974: IFFALSE 10034
// begin ToLua ( playSibBomb() ) ;
9976: LD_STRING playSibBomb()
9978: PPUSH
9979: CALL_OW 559
// wait ( 0 0$14 ) ;
9983: LD_INT 490
9985: PPUSH
9986: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
9990: LD_VAR 0 1
9994: PUSH
9995: LD_INT 1
9997: ARRAY
9998: PPUSH
9999: LD_VAR 0 1
10003: PUSH
10004: LD_INT 2
10006: ARRAY
10007: PPUSH
10008: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
10012: LD_VAR 0 1
10016: PUSH
10017: LD_INT 1
10019: ARRAY
10020: PPUSH
10021: LD_VAR 0 1
10025: PUSH
10026: LD_INT 2
10028: ARRAY
10029: PPUSH
10030: CALL_OW 429
// end ; end ;
10034: LD_VAR 0 1
10038: RET
// every 0 0$1 trigger StreamModeActive and sReset do
10039: LD_EXP 8
10043: IFFALSE 10051
10045: PUSH
10046: LD_EXP 30
10050: AND
10051: IFFALSE 10063
10053: GO 10055
10055: DISABLE
// YouLost (  ) ;
10056: LD_STRING 
10058: PPUSH
10059: CALL_OW 104
10063: END
// every 0 0$1 trigger StreamModeActive and sFog do
10064: LD_EXP 8
10068: IFFALSE 10076
10070: PUSH
10071: LD_EXP 29
10075: AND
10076: IFFALSE 10090
10078: GO 10080
10080: DISABLE
// FogOff ( your_side ) ;
10081: LD_OWVAR 2
10085: PPUSH
10086: CALL_OW 344
10090: END
// every 0 0$1 trigger StreamModeActive and sSun do
10091: LD_EXP 8
10095: IFFALSE 10103
10097: PUSH
10098: LD_EXP 31
10102: AND
10103: IFFALSE 10131
10105: GO 10107
10107: DISABLE
// begin solar_recharge_percent := 0 ;
10108: LD_ADDR_OWVAR 79
10112: PUSH
10113: LD_INT 0
10115: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10116: LD_INT 10500
10118: PPUSH
10119: CALL_OW 67
// solar_recharge_percent := 100 ;
10123: LD_ADDR_OWVAR 79
10127: PUSH
10128: LD_INT 100
10130: ST_TO_ADDR
// end ;
10131: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
10132: LD_EXP 8
10136: IFFALSE 10144
10138: PUSH
10139: LD_EXP 32
10143: AND
10144: IFFALSE 10383
10146: GO 10148
10148: DISABLE
10149: LD_INT 0
10151: PPUSH
10152: PPUSH
10153: PPUSH
// begin tmp := [ ] ;
10154: LD_ADDR_VAR 0 3
10158: PUSH
10159: EMPTY
10160: ST_TO_ADDR
// for i := 1 to 6 do
10161: LD_ADDR_VAR 0 1
10165: PUSH
10166: DOUBLE
10167: LD_INT 1
10169: DEC
10170: ST_TO_ADDR
10171: LD_INT 6
10173: PUSH
10174: FOR_TO
10175: IFFALSE 10280
// begin uc_nation := nation_nature ;
10177: LD_ADDR_OWVAR 21
10181: PUSH
10182: LD_INT 0
10184: ST_TO_ADDR
// uc_side := 0 ;
10185: LD_ADDR_OWVAR 20
10189: PUSH
10190: LD_INT 0
10192: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10193: LD_ADDR_OWVAR 29
10197: PUSH
10198: LD_INT 12
10200: PUSH
10201: LD_INT 12
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: ST_TO_ADDR
// hc_agressivity := 20 ;
10208: LD_ADDR_OWVAR 35
10212: PUSH
10213: LD_INT 20
10215: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
10216: LD_ADDR_OWVAR 28
10220: PUSH
10221: LD_INT 17
10223: ST_TO_ADDR
// hc_gallery :=  ;
10224: LD_ADDR_OWVAR 33
10228: PUSH
10229: LD_STRING 
10231: ST_TO_ADDR
// hc_name :=  ;
10232: LD_ADDR_OWVAR 26
10236: PUSH
10237: LD_STRING 
10239: ST_TO_ADDR
// un := CreateHuman ;
10240: LD_ADDR_VAR 0 2
10244: PUSH
10245: CALL_OW 44
10249: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
10250: LD_VAR 0 2
10254: PPUSH
10255: LD_INT 1
10257: PPUSH
10258: CALL_OW 51
// tmp := tmp ^ un ;
10262: LD_ADDR_VAR 0 3
10266: PUSH
10267: LD_VAR 0 3
10271: PUSH
10272: LD_VAR 0 2
10276: ADD
10277: ST_TO_ADDR
// end ;
10278: GO 10174
10280: POP
10281: POP
// repeat wait ( 0 0$1 ) ;
10282: LD_INT 35
10284: PPUSH
10285: CALL_OW 67
// for un in tmp do
10289: LD_ADDR_VAR 0 2
10293: PUSH
10294: LD_VAR 0 3
10298: PUSH
10299: FOR_IN
10300: IFFALSE 10374
// begin if IsDead ( un ) then
10302: LD_VAR 0 2
10306: PPUSH
10307: CALL_OW 301
10311: IFFALSE 10331
// begin tmp := tmp diff un ;
10313: LD_ADDR_VAR 0 3
10317: PUSH
10318: LD_VAR 0 3
10322: PUSH
10323: LD_VAR 0 2
10327: DIFF
10328: ST_TO_ADDR
// continue ;
10329: GO 10299
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
10331: LD_VAR 0 2
10335: PPUSH
10336: LD_INT 3
10338: PUSH
10339: LD_INT 22
10341: PUSH
10342: LD_INT 0
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: PPUSH
10353: CALL_OW 69
10357: PPUSH
10358: LD_VAR 0 2
10362: PPUSH
10363: CALL_OW 74
10367: PPUSH
10368: CALL_OW 115
// end ;
10372: GO 10299
10374: POP
10375: POP
// until not tmp ;
10376: LD_VAR 0 3
10380: NOT
10381: IFFALSE 10282
// end ;
10383: PPOPN 3
10385: END
// every 0 0$1 trigger StreamModeActive and sTroll do
10386: LD_EXP 8
10390: IFFALSE 10398
10392: PUSH
10393: LD_EXP 33
10397: AND
10398: IFFALSE 10452
10400: GO 10402
10402: DISABLE
// begin ToLua ( displayTroll(); ) ;
10403: LD_STRING displayTroll();
10405: PPUSH
10406: CALL_OW 559
// wait ( 3 3$00 ) ;
10410: LD_INT 6300
10412: PPUSH
10413: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10417: LD_STRING hideTroll();
10419: PPUSH
10420: CALL_OW 559
// wait ( 1 1$00 ) ;
10424: LD_INT 2100
10426: PPUSH
10427: CALL_OW 67
// ToLua ( displayTroll(); ) ;
10431: LD_STRING displayTroll();
10433: PPUSH
10434: CALL_OW 559
// wait ( 1 1$00 ) ;
10438: LD_INT 2100
10440: PPUSH
10441: CALL_OW 67
// ToLua ( hideTroll(); ) ;
10445: LD_STRING hideTroll();
10447: PPUSH
10448: CALL_OW 559
// end ;
10452: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
10453: LD_EXP 8
10457: IFFALSE 10465
10459: PUSH
10460: LD_EXP 34
10464: AND
10465: IFFALSE 10528
10467: GO 10469
10469: DISABLE
10470: LD_INT 0
10472: PPUSH
// begin p := 0 ;
10473: LD_ADDR_VAR 0 1
10477: PUSH
10478: LD_INT 0
10480: ST_TO_ADDR
// repeat game_speed := 1 ;
10481: LD_ADDR_OWVAR 65
10485: PUSH
10486: LD_INT 1
10488: ST_TO_ADDR
// wait ( 0 0$1 ) ;
10489: LD_INT 35
10491: PPUSH
10492: CALL_OW 67
// p := p + 1 ;
10496: LD_ADDR_VAR 0 1
10500: PUSH
10501: LD_VAR 0 1
10505: PUSH
10506: LD_INT 1
10508: PLUS
10509: ST_TO_ADDR
// until p >= 60 ;
10510: LD_VAR 0 1
10514: PUSH
10515: LD_INT 60
10517: GREATEREQUAL
10518: IFFALSE 10481
// game_speed := 4 ;
10520: LD_ADDR_OWVAR 65
10524: PUSH
10525: LD_INT 4
10527: ST_TO_ADDR
// end ;
10528: PPOPN 1
10530: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
10531: LD_EXP 8
10535: IFFALSE 10543
10537: PUSH
10538: LD_EXP 35
10542: AND
10543: IFFALSE 10689
10545: GO 10547
10547: DISABLE
10548: LD_INT 0
10550: PPUSH
10551: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10552: LD_ADDR_VAR 0 1
10556: PUSH
10557: LD_INT 22
10559: PUSH
10560: LD_OWVAR 2
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: PUSH
10569: LD_INT 2
10571: PUSH
10572: LD_INT 30
10574: PUSH
10575: LD_INT 0
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: PUSH
10582: LD_INT 30
10584: PUSH
10585: LD_INT 1
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: LIST
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: PPUSH
10601: CALL_OW 69
10605: ST_TO_ADDR
// if not depot then
10606: LD_VAR 0 1
10610: NOT
10611: IFFALSE 10615
// exit ;
10613: GO 10689
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
10615: LD_ADDR_VAR 0 2
10619: PUSH
10620: LD_VAR 0 1
10624: PUSH
10625: LD_INT 1
10627: PPUSH
10628: LD_VAR 0 1
10632: PPUSH
10633: CALL_OW 12
10637: ARRAY
10638: PPUSH
10639: CALL_OW 274
10643: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
10644: LD_VAR 0 2
10648: PPUSH
10649: LD_INT 1
10651: PPUSH
10652: LD_INT 0
10654: PPUSH
10655: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
10659: LD_VAR 0 2
10663: PPUSH
10664: LD_INT 2
10666: PPUSH
10667: LD_INT 0
10669: PPUSH
10670: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
10674: LD_VAR 0 2
10678: PPUSH
10679: LD_INT 3
10681: PPUSH
10682: LD_INT 0
10684: PPUSH
10685: CALL_OW 277
// end ;
10689: PPOPN 2
10691: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
10692: LD_EXP 8
10696: IFFALSE 10704
10698: PUSH
10699: LD_EXP 36
10703: AND
10704: IFFALSE 10801
10706: GO 10708
10708: DISABLE
10709: LD_INT 0
10711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
10712: LD_ADDR_VAR 0 1
10716: PUSH
10717: LD_INT 22
10719: PUSH
10720: LD_OWVAR 2
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PUSH
10729: LD_INT 21
10731: PUSH
10732: LD_INT 1
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: PUSH
10739: LD_INT 3
10741: PUSH
10742: LD_INT 23
10744: PUSH
10745: LD_INT 0
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: PUSH
10756: EMPTY
10757: LIST
10758: LIST
10759: LIST
10760: PPUSH
10761: CALL_OW 69
10765: ST_TO_ADDR
// if not tmp then
10766: LD_VAR 0 1
10770: NOT
10771: IFFALSE 10775
// exit ;
10773: GO 10801
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
10775: LD_VAR 0 1
10779: PUSH
10780: LD_INT 1
10782: PPUSH
10783: LD_VAR 0 1
10787: PPUSH
10788: CALL_OW 12
10792: ARRAY
10793: PPUSH
10794: LD_INT 200
10796: PPUSH
10797: CALL_OW 234
// end ;
10801: PPOPN 1
10803: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
10804: LD_EXP 8
10808: IFFALSE 10816
10810: PUSH
10811: LD_EXP 37
10815: AND
10816: IFFALSE 10895
10818: GO 10820
10820: DISABLE
10821: LD_INT 0
10823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
10824: LD_ADDR_VAR 0 1
10828: PUSH
10829: LD_INT 22
10831: PUSH
10832: LD_OWVAR 2
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: PUSH
10841: LD_INT 21
10843: PUSH
10844: LD_INT 2
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PPUSH
10855: CALL_OW 69
10859: ST_TO_ADDR
// if not tmp then
10860: LD_VAR 0 1
10864: NOT
10865: IFFALSE 10869
// exit ;
10867: GO 10895
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
10869: LD_VAR 0 1
10873: PUSH
10874: LD_INT 1
10876: PPUSH
10877: LD_VAR 0 1
10881: PPUSH
10882: CALL_OW 12
10886: ARRAY
10887: PPUSH
10888: LD_INT 60
10890: PPUSH
10891: CALL_OW 234
// end ;
10895: PPOPN 1
10897: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
10898: LD_EXP 8
10902: IFFALSE 10910
10904: PUSH
10905: LD_EXP 38
10909: AND
10910: IFFALSE 11009
10912: GO 10914
10914: DISABLE
10915: LD_INT 0
10917: PPUSH
10918: PPUSH
// begin enable ;
10919: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
10920: LD_ADDR_VAR 0 1
10924: PUSH
10925: LD_INT 22
10927: PUSH
10928: LD_OWVAR 2
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: PUSH
10937: LD_INT 61
10939: PUSH
10940: EMPTY
10941: LIST
10942: PUSH
10943: LD_INT 33
10945: PUSH
10946: LD_INT 2
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: LIST
10957: PPUSH
10958: CALL_OW 69
10962: ST_TO_ADDR
// if not tmp then
10963: LD_VAR 0 1
10967: NOT
10968: IFFALSE 10972
// exit ;
10970: GO 11009
// for i in tmp do
10972: LD_ADDR_VAR 0 2
10976: PUSH
10977: LD_VAR 0 1
10981: PUSH
10982: FOR_IN
10983: IFFALSE 11007
// if IsControledBy ( i ) then
10985: LD_VAR 0 2
10989: PPUSH
10990: CALL_OW 312
10994: IFFALSE 11005
// ComUnlink ( i ) ;
10996: LD_VAR 0 2
11000: PPUSH
11001: CALL_OW 136
11005: GO 10982
11007: POP
11008: POP
// end ;
11009: PPOPN 2
11011: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
11012: LD_EXP 8
11016: IFFALSE 11024
11018: PUSH
11019: LD_EXP 39
11023: AND
11024: IFFALSE 11164
11026: GO 11028
11028: DISABLE
11029: LD_INT 0
11031: PPUSH
11032: PPUSH
// begin ToLua ( displayPowell(); ) ;
11033: LD_STRING displayPowell();
11035: PPUSH
11036: CALL_OW 559
// uc_side := 0 ;
11040: LD_ADDR_OWVAR 20
11044: PUSH
11045: LD_INT 0
11047: ST_TO_ADDR
// uc_nation := 2 ;
11048: LD_ADDR_OWVAR 21
11052: PUSH
11053: LD_INT 2
11055: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
11056: LD_ADDR_OWVAR 37
11060: PUSH
11061: LD_INT 14
11063: ST_TO_ADDR
// vc_engine := engine_siberite ;
11064: LD_ADDR_OWVAR 39
11068: PUSH
11069: LD_INT 3
11071: ST_TO_ADDR
// vc_control := control_apeman ;
11072: LD_ADDR_OWVAR 38
11076: PUSH
11077: LD_INT 5
11079: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
11080: LD_ADDR_OWVAR 40
11084: PUSH
11085: LD_INT 29
11087: ST_TO_ADDR
// un := CreateVehicle ;
11088: LD_ADDR_VAR 0 2
11092: PUSH
11093: CALL_OW 45
11097: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11098: LD_VAR 0 2
11102: PPUSH
11103: LD_INT 1
11105: PPUSH
11106: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11110: LD_INT 35
11112: PPUSH
11113: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11117: LD_VAR 0 2
11121: PPUSH
11122: LD_INT 22
11124: PUSH
11125: LD_OWVAR 2
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: PPUSH
11134: CALL_OW 69
11138: PPUSH
11139: LD_VAR 0 2
11143: PPUSH
11144: CALL_OW 74
11148: PPUSH
11149: CALL_OW 115
// until IsDead ( un ) ;
11153: LD_VAR 0 2
11157: PPUSH
11158: CALL_OW 301
11162: IFFALSE 11110
// end ;
11164: PPOPN 2
11166: END
// every 0 0$1 trigger StreamModeActive and sStu do
11167: LD_EXP 8
11171: IFFALSE 11179
11173: PUSH
11174: LD_EXP 47
11178: AND
11179: IFFALSE 11195
11181: GO 11183
11183: DISABLE
// begin ToLua ( displayStucuk(); ) ;
11184: LD_STRING displayStucuk();
11186: PPUSH
11187: CALL_OW 559
// ResetFog ;
11191: CALL_OW 335
// end ;
11195: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
11196: LD_EXP 8
11200: IFFALSE 11208
11202: PUSH
11203: LD_EXP 40
11207: AND
11208: IFFALSE 11349
11210: GO 11212
11212: DISABLE
11213: LD_INT 0
11215: PPUSH
11216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11217: LD_ADDR_VAR 0 2
11221: PUSH
11222: LD_INT 22
11224: PUSH
11225: LD_OWVAR 2
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: PUSH
11234: LD_INT 21
11236: PUSH
11237: LD_INT 1
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PPUSH
11248: CALL_OW 69
11252: ST_TO_ADDR
// if not tmp then
11253: LD_VAR 0 2
11257: NOT
11258: IFFALSE 11262
// exit ;
11260: GO 11349
// un := tmp [ rand ( 1 , tmp ) ] ;
11262: LD_ADDR_VAR 0 1
11266: PUSH
11267: LD_VAR 0 2
11271: PUSH
11272: LD_INT 1
11274: PPUSH
11275: LD_VAR 0 2
11279: PPUSH
11280: CALL_OW 12
11284: ARRAY
11285: ST_TO_ADDR
// SetSide ( un , 0 ) ;
11286: LD_VAR 0 1
11290: PPUSH
11291: LD_INT 0
11293: PPUSH
11294: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
11298: LD_VAR 0 1
11302: PPUSH
11303: LD_OWVAR 3
11307: PUSH
11308: LD_VAR 0 1
11312: DIFF
11313: PPUSH
11314: LD_VAR 0 1
11318: PPUSH
11319: CALL_OW 74
11323: PPUSH
11324: CALL_OW 115
// wait ( 0 0$20 ) ;
11328: LD_INT 700
11330: PPUSH
11331: CALL_OW 67
// SetSide ( un , your_side ) ;
11335: LD_VAR 0 1
11339: PPUSH
11340: LD_OWVAR 2
11344: PPUSH
11345: CALL_OW 235
// end ;
11349: PPOPN 2
11351: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
11352: LD_EXP 8
11356: IFFALSE 11364
11358: PUSH
11359: LD_EXP 41
11363: AND
11364: IFFALSE 11470
11366: GO 11368
11368: DISABLE
11369: LD_INT 0
11371: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11372: LD_ADDR_VAR 0 1
11376: PUSH
11377: LD_INT 22
11379: PUSH
11380: LD_OWVAR 2
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: PUSH
11389: LD_INT 2
11391: PUSH
11392: LD_INT 30
11394: PUSH
11395: LD_INT 0
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 30
11404: PUSH
11405: LD_INT 1
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: LIST
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: PPUSH
11421: CALL_OW 69
11425: ST_TO_ADDR
// if not depot then
11426: LD_VAR 0 1
11430: NOT
11431: IFFALSE 11435
// exit ;
11433: GO 11470
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
11435: LD_VAR 0 1
11439: PUSH
11440: LD_INT 1
11442: ARRAY
11443: PPUSH
11444: CALL_OW 250
11448: PPUSH
11449: LD_VAR 0 1
11453: PUSH
11454: LD_INT 1
11456: ARRAY
11457: PPUSH
11458: CALL_OW 251
11462: PPUSH
11463: LD_INT 70
11465: PPUSH
11466: CALL_OW 495
// end ;
11470: PPOPN 1
11472: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
11473: LD_EXP 8
11477: IFFALSE 11485
11479: PUSH
11480: LD_EXP 42
11484: AND
11485: IFFALSE 11696
11487: GO 11489
11489: DISABLE
11490: LD_INT 0
11492: PPUSH
11493: PPUSH
11494: PPUSH
11495: PPUSH
11496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11497: LD_ADDR_VAR 0 5
11501: PUSH
11502: LD_INT 22
11504: PUSH
11505: LD_OWVAR 2
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: PUSH
11514: LD_INT 21
11516: PUSH
11517: LD_INT 1
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PPUSH
11528: CALL_OW 69
11532: ST_TO_ADDR
// if not tmp then
11533: LD_VAR 0 5
11537: NOT
11538: IFFALSE 11542
// exit ;
11540: GO 11696
// for i in tmp do
11542: LD_ADDR_VAR 0 1
11546: PUSH
11547: LD_VAR 0 5
11551: PUSH
11552: FOR_IN
11553: IFFALSE 11694
// begin d := rand ( 0 , 5 ) ;
11555: LD_ADDR_VAR 0 4
11559: PUSH
11560: LD_INT 0
11562: PPUSH
11563: LD_INT 5
11565: PPUSH
11566: CALL_OW 12
11570: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
11571: LD_ADDR_VAR 0 2
11575: PUSH
11576: LD_VAR 0 1
11580: PPUSH
11581: CALL_OW 250
11585: PPUSH
11586: LD_VAR 0 4
11590: PPUSH
11591: LD_INT 3
11593: PPUSH
11594: LD_INT 12
11596: PPUSH
11597: CALL_OW 12
11601: PPUSH
11602: CALL_OW 272
11606: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
11607: LD_ADDR_VAR 0 3
11611: PUSH
11612: LD_VAR 0 1
11616: PPUSH
11617: CALL_OW 251
11621: PPUSH
11622: LD_VAR 0 4
11626: PPUSH
11627: LD_INT 3
11629: PPUSH
11630: LD_INT 12
11632: PPUSH
11633: CALL_OW 12
11637: PPUSH
11638: CALL_OW 273
11642: ST_TO_ADDR
// if ValidHex ( x , y ) then
11643: LD_VAR 0 2
11647: PPUSH
11648: LD_VAR 0 3
11652: PPUSH
11653: CALL_OW 488
11657: IFFALSE 11692
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
11659: LD_VAR 0 1
11663: PPUSH
11664: LD_VAR 0 2
11668: PPUSH
11669: LD_VAR 0 3
11673: PPUSH
11674: LD_INT 3
11676: PPUSH
11677: LD_INT 6
11679: PPUSH
11680: CALL_OW 12
11684: PPUSH
11685: LD_INT 1
11687: PPUSH
11688: CALL_OW 483
// end ;
11692: GO 11552
11694: POP
11695: POP
// end ;
11696: PPOPN 5
11698: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
11699: LD_EXP 8
11703: IFFALSE 11711
11705: PUSH
11706: LD_EXP 43
11710: AND
11711: IFFALSE 11805
11713: GO 11715
11715: DISABLE
11716: LD_INT 0
11718: PPUSH
11719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
11720: LD_ADDR_VAR 0 2
11724: PUSH
11725: LD_INT 22
11727: PUSH
11728: LD_OWVAR 2
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: PUSH
11737: LD_INT 32
11739: PUSH
11740: LD_INT 1
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PUSH
11747: LD_INT 21
11749: PUSH
11750: LD_INT 2
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: LIST
11761: PPUSH
11762: CALL_OW 69
11766: ST_TO_ADDR
// if not tmp then
11767: LD_VAR 0 2
11771: NOT
11772: IFFALSE 11776
// exit ;
11774: GO 11805
// for i in tmp do
11776: LD_ADDR_VAR 0 1
11780: PUSH
11781: LD_VAR 0 2
11785: PUSH
11786: FOR_IN
11787: IFFALSE 11803
// SetFuel ( i , 0 ) ;
11789: LD_VAR 0 1
11793: PPUSH
11794: LD_INT 0
11796: PPUSH
11797: CALL_OW 240
11801: GO 11786
11803: POP
11804: POP
// end ;
11805: PPOPN 2
11807: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
11808: LD_EXP 8
11812: IFFALSE 11820
11814: PUSH
11815: LD_EXP 44
11819: AND
11820: IFFALSE 11886
11822: GO 11824
11824: DISABLE
11825: LD_INT 0
11827: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
11828: LD_ADDR_VAR 0 1
11832: PUSH
11833: LD_INT 22
11835: PUSH
11836: LD_OWVAR 2
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: PUSH
11845: LD_INT 30
11847: PUSH
11848: LD_INT 29
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: PUSH
11855: EMPTY
11856: LIST
11857: LIST
11858: PPUSH
11859: CALL_OW 69
11863: ST_TO_ADDR
// if not tmp then
11864: LD_VAR 0 1
11868: NOT
11869: IFFALSE 11873
// exit ;
11871: GO 11886
// DestroyUnit ( tmp [ 1 ] ) ;
11873: LD_VAR 0 1
11877: PUSH
11878: LD_INT 1
11880: ARRAY
11881: PPUSH
11882: CALL_OW 65
// end ;
11886: PPOPN 1
11888: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
11889: LD_EXP 8
11893: IFFALSE 11901
11895: PUSH
11896: LD_EXP 46
11900: AND
11901: IFFALSE 12030
11903: GO 11905
11905: DISABLE
11906: LD_INT 0
11908: PPUSH
// begin uc_side := 0 ;
11909: LD_ADDR_OWVAR 20
11913: PUSH
11914: LD_INT 0
11916: ST_TO_ADDR
// uc_nation := nation_arabian ;
11917: LD_ADDR_OWVAR 21
11921: PUSH
11922: LD_INT 2
11924: ST_TO_ADDR
// hc_gallery :=  ;
11925: LD_ADDR_OWVAR 33
11929: PUSH
11930: LD_STRING 
11932: ST_TO_ADDR
// hc_name :=  ;
11933: LD_ADDR_OWVAR 26
11937: PUSH
11938: LD_STRING 
11940: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
11941: LD_INT 1
11943: PPUSH
11944: LD_INT 11
11946: PPUSH
11947: LD_INT 10
11949: PPUSH
11950: CALL_OW 380
// un := CreateHuman ;
11954: LD_ADDR_VAR 0 1
11958: PUSH
11959: CALL_OW 44
11963: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11964: LD_VAR 0 1
11968: PPUSH
11969: LD_INT 1
11971: PPUSH
11972: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11976: LD_INT 35
11978: PPUSH
11979: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11983: LD_VAR 0 1
11987: PPUSH
11988: LD_INT 22
11990: PUSH
11991: LD_OWVAR 2
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PPUSH
12000: CALL_OW 69
12004: PPUSH
12005: LD_VAR 0 1
12009: PPUSH
12010: CALL_OW 74
12014: PPUSH
12015: CALL_OW 115
// until IsDead ( un ) ;
12019: LD_VAR 0 1
12023: PPUSH
12024: CALL_OW 301
12028: IFFALSE 11976
// end ;
12030: PPOPN 1
12032: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
12033: LD_EXP 8
12037: IFFALSE 12045
12039: PUSH
12040: LD_EXP 48
12044: AND
12045: IFFALSE 12057
12047: GO 12049
12049: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
12050: LD_STRING earthquake(getX(game), 0, 32)
12052: PPUSH
12053: CALL_OW 559
12057: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
12058: LD_EXP 8
12062: IFFALSE 12070
12064: PUSH
12065: LD_EXP 49
12069: AND
12070: IFFALSE 12161
12072: GO 12074
12074: DISABLE
12075: LD_INT 0
12077: PPUSH
// begin enable ;
12078: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
12079: LD_ADDR_VAR 0 1
12083: PUSH
12084: LD_INT 22
12086: PUSH
12087: LD_OWVAR 2
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PUSH
12096: LD_INT 21
12098: PUSH
12099: LD_INT 2
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PUSH
12106: LD_INT 33
12108: PUSH
12109: LD_INT 3
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: LIST
12120: PPUSH
12121: CALL_OW 69
12125: ST_TO_ADDR
// if not tmp then
12126: LD_VAR 0 1
12130: NOT
12131: IFFALSE 12135
// exit ;
12133: GO 12161
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12135: LD_VAR 0 1
12139: PUSH
12140: LD_INT 1
12142: PPUSH
12143: LD_VAR 0 1
12147: PPUSH
12148: CALL_OW 12
12152: ARRAY
12153: PPUSH
12154: LD_INT 1
12156: PPUSH
12157: CALL_OW 234
// end ;
12161: PPOPN 1
12163: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
12164: LD_EXP 8
12168: IFFALSE 12176
12170: PUSH
12171: LD_EXP 50
12175: AND
12176: IFFALSE 12317
12178: GO 12180
12180: DISABLE
12181: LD_INT 0
12183: PPUSH
12184: PPUSH
12185: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12186: LD_ADDR_VAR 0 3
12190: PUSH
12191: LD_INT 22
12193: PUSH
12194: LD_OWVAR 2
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: PUSH
12203: LD_INT 25
12205: PUSH
12206: LD_INT 1
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: PUSH
12213: EMPTY
12214: LIST
12215: LIST
12216: PPUSH
12217: CALL_OW 69
12221: ST_TO_ADDR
// if not tmp then
12222: LD_VAR 0 3
12226: NOT
12227: IFFALSE 12231
// exit ;
12229: GO 12317
// un := tmp [ rand ( 1 , tmp ) ] ;
12231: LD_ADDR_VAR 0 2
12235: PUSH
12236: LD_VAR 0 3
12240: PUSH
12241: LD_INT 1
12243: PPUSH
12244: LD_VAR 0 3
12248: PPUSH
12249: CALL_OW 12
12253: ARRAY
12254: ST_TO_ADDR
// if Crawls ( un ) then
12255: LD_VAR 0 2
12259: PPUSH
12260: CALL_OW 318
12264: IFFALSE 12275
// ComWalk ( un ) ;
12266: LD_VAR 0 2
12270: PPUSH
12271: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
12275: LD_VAR 0 2
12279: PPUSH
12280: LD_INT 9
12282: PPUSH
12283: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
12287: LD_INT 28
12289: PPUSH
12290: LD_OWVAR 2
12294: PPUSH
12295: LD_INT 2
12297: PPUSH
12298: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
12302: LD_INT 29
12304: PPUSH
12305: LD_OWVAR 2
12309: PPUSH
12310: LD_INT 2
12312: PPUSH
12313: CALL_OW 322
// end ;
12317: PPOPN 3
12319: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
12320: LD_EXP 8
12324: IFFALSE 12332
12326: PUSH
12327: LD_EXP 51
12331: AND
12332: IFFALSE 12443
12334: GO 12336
12336: DISABLE
12337: LD_INT 0
12339: PPUSH
12340: PPUSH
12341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12342: LD_ADDR_VAR 0 3
12346: PUSH
12347: LD_INT 22
12349: PUSH
12350: LD_OWVAR 2
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: PUSH
12359: LD_INT 25
12361: PUSH
12362: LD_INT 1
12364: PUSH
12365: EMPTY
12366: LIST
12367: LIST
12368: PUSH
12369: EMPTY
12370: LIST
12371: LIST
12372: PPUSH
12373: CALL_OW 69
12377: ST_TO_ADDR
// if not tmp then
12378: LD_VAR 0 3
12382: NOT
12383: IFFALSE 12387
// exit ;
12385: GO 12443
// un := tmp [ rand ( 1 , tmp ) ] ;
12387: LD_ADDR_VAR 0 2
12391: PUSH
12392: LD_VAR 0 3
12396: PUSH
12397: LD_INT 1
12399: PPUSH
12400: LD_VAR 0 3
12404: PPUSH
12405: CALL_OW 12
12409: ARRAY
12410: ST_TO_ADDR
// if Crawls ( un ) then
12411: LD_VAR 0 2
12415: PPUSH
12416: CALL_OW 318
12420: IFFALSE 12431
// ComWalk ( un ) ;
12422: LD_VAR 0 2
12426: PPUSH
12427: CALL_OW 138
// SetClass ( un , class_mortar ) ;
12431: LD_VAR 0 2
12435: PPUSH
12436: LD_INT 8
12438: PPUSH
12439: CALL_OW 336
// end ;
12443: PPOPN 3
12445: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
12446: LD_EXP 8
12450: IFFALSE 12458
12452: PUSH
12453: LD_EXP 52
12457: AND
12458: IFFALSE 12602
12460: GO 12462
12462: DISABLE
12463: LD_INT 0
12465: PPUSH
12466: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
12467: LD_ADDR_VAR 0 2
12471: PUSH
12472: LD_INT 22
12474: PUSH
12475: LD_OWVAR 2
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PUSH
12484: LD_INT 21
12486: PUSH
12487: LD_INT 2
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: LD_INT 2
12496: PUSH
12497: LD_INT 34
12499: PUSH
12500: LD_INT 12
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: PUSH
12507: LD_INT 34
12509: PUSH
12510: LD_INT 51
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: PUSH
12517: LD_INT 34
12519: PUSH
12520: LD_INT 32
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: LIST
12537: PPUSH
12538: CALL_OW 69
12542: ST_TO_ADDR
// if not tmp then
12543: LD_VAR 0 2
12547: NOT
12548: IFFALSE 12552
// exit ;
12550: GO 12602
// for i in tmp do
12552: LD_ADDR_VAR 0 1
12556: PUSH
12557: LD_VAR 0 2
12561: PUSH
12562: FOR_IN
12563: IFFALSE 12600
// if GetCargo ( i , mat_artifact ) = 0 then
12565: LD_VAR 0 1
12569: PPUSH
12570: LD_INT 4
12572: PPUSH
12573: CALL_OW 289
12577: PUSH
12578: LD_INT 0
12580: EQUAL
12581: IFFALSE 12598
// SetCargo ( i , mat_siberit , 100 ) ;
12583: LD_VAR 0 1
12587: PPUSH
12588: LD_INT 3
12590: PPUSH
12591: LD_INT 100
12593: PPUSH
12594: CALL_OW 290
12598: GO 12562
12600: POP
12601: POP
// end ;
12602: PPOPN 2
12604: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
12605: LD_EXP 8
12609: IFFALSE 12617
12611: PUSH
12612: LD_EXP 53
12616: AND
12617: IFFALSE 12800
12619: GO 12621
12621: DISABLE
12622: LD_INT 0
12624: PPUSH
12625: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
12626: LD_ADDR_VAR 0 2
12630: PUSH
12631: LD_INT 22
12633: PUSH
12634: LD_OWVAR 2
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: PPUSH
12643: CALL_OW 69
12647: ST_TO_ADDR
// if not tmp then
12648: LD_VAR 0 2
12652: NOT
12653: IFFALSE 12657
// exit ;
12655: GO 12800
// for i := 1 to 2 do
12657: LD_ADDR_VAR 0 1
12661: PUSH
12662: DOUBLE
12663: LD_INT 1
12665: DEC
12666: ST_TO_ADDR
12667: LD_INT 2
12669: PUSH
12670: FOR_TO
12671: IFFALSE 12798
// begin uc_side := your_side ;
12673: LD_ADDR_OWVAR 20
12677: PUSH
12678: LD_OWVAR 2
12682: ST_TO_ADDR
// uc_nation := nation_american ;
12683: LD_ADDR_OWVAR 21
12687: PUSH
12688: LD_INT 1
12690: ST_TO_ADDR
// vc_chassis := us_morphling ;
12691: LD_ADDR_OWVAR 37
12695: PUSH
12696: LD_INT 5
12698: ST_TO_ADDR
// vc_engine := engine_siberite ;
12699: LD_ADDR_OWVAR 39
12703: PUSH
12704: LD_INT 3
12706: ST_TO_ADDR
// vc_control := control_computer ;
12707: LD_ADDR_OWVAR 38
12711: PUSH
12712: LD_INT 3
12714: ST_TO_ADDR
// vc_weapon := us_double_laser ;
12715: LD_ADDR_OWVAR 40
12719: PUSH
12720: LD_INT 10
12722: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
12723: LD_VAR 0 2
12727: PUSH
12728: LD_INT 1
12730: ARRAY
12731: PPUSH
12732: CALL_OW 310
12736: NOT
12737: IFFALSE 12784
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
12739: CALL_OW 45
12743: PPUSH
12744: LD_VAR 0 2
12748: PUSH
12749: LD_INT 1
12751: ARRAY
12752: PPUSH
12753: CALL_OW 250
12757: PPUSH
12758: LD_VAR 0 2
12762: PUSH
12763: LD_INT 1
12765: ARRAY
12766: PPUSH
12767: CALL_OW 251
12771: PPUSH
12772: LD_INT 12
12774: PPUSH
12775: LD_INT 1
12777: PPUSH
12778: CALL_OW 50
12782: GO 12796
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
12784: CALL_OW 45
12788: PPUSH
12789: LD_INT 1
12791: PPUSH
12792: CALL_OW 51
// end ;
12796: GO 12670
12798: POP
12799: POP
// end ;
12800: PPOPN 2
12802: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
12803: LD_EXP 8
12807: IFFALSE 12815
12809: PUSH
12810: LD_EXP 54
12814: AND
12815: IFFALSE 13037
12817: GO 12819
12819: DISABLE
12820: LD_INT 0
12822: PPUSH
12823: PPUSH
12824: PPUSH
12825: PPUSH
12826: PPUSH
12827: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12828: LD_ADDR_VAR 0 6
12832: PUSH
12833: LD_INT 22
12835: PUSH
12836: LD_OWVAR 2
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: PUSH
12845: LD_INT 21
12847: PUSH
12848: LD_INT 1
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PUSH
12855: LD_INT 3
12857: PUSH
12858: LD_INT 23
12860: PUSH
12861: LD_INT 0
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: LIST
12876: PPUSH
12877: CALL_OW 69
12881: ST_TO_ADDR
// if not tmp then
12882: LD_VAR 0 6
12886: NOT
12887: IFFALSE 12891
// exit ;
12889: GO 13037
// s1 := rand ( 1 , 4 ) ;
12891: LD_ADDR_VAR 0 2
12895: PUSH
12896: LD_INT 1
12898: PPUSH
12899: LD_INT 4
12901: PPUSH
12902: CALL_OW 12
12906: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
12907: LD_ADDR_VAR 0 4
12911: PUSH
12912: LD_VAR 0 6
12916: PUSH
12917: LD_INT 1
12919: ARRAY
12920: PPUSH
12921: LD_VAR 0 2
12925: PPUSH
12926: CALL_OW 259
12930: ST_TO_ADDR
// if s1 = 1 then
12931: LD_VAR 0 2
12935: PUSH
12936: LD_INT 1
12938: EQUAL
12939: IFFALSE 12959
// s2 := rand ( 2 , 4 ) else
12941: LD_ADDR_VAR 0 3
12945: PUSH
12946: LD_INT 2
12948: PPUSH
12949: LD_INT 4
12951: PPUSH
12952: CALL_OW 12
12956: ST_TO_ADDR
12957: GO 12967
// s2 := 1 ;
12959: LD_ADDR_VAR 0 3
12963: PUSH
12964: LD_INT 1
12966: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
12967: LD_ADDR_VAR 0 5
12971: PUSH
12972: LD_VAR 0 6
12976: PUSH
12977: LD_INT 1
12979: ARRAY
12980: PPUSH
12981: LD_VAR 0 3
12985: PPUSH
12986: CALL_OW 259
12990: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
12991: LD_VAR 0 6
12995: PUSH
12996: LD_INT 1
12998: ARRAY
12999: PPUSH
13000: LD_VAR 0 2
13004: PPUSH
13005: LD_VAR 0 5
13009: PPUSH
13010: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
13014: LD_VAR 0 6
13018: PUSH
13019: LD_INT 1
13021: ARRAY
13022: PPUSH
13023: LD_VAR 0 3
13027: PPUSH
13028: LD_VAR 0 4
13032: PPUSH
13033: CALL_OW 237
// end ;
13037: PPOPN 6
13039: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
13040: LD_EXP 8
13044: IFFALSE 13052
13046: PUSH
13047: LD_EXP 55
13051: AND
13052: IFFALSE 13131
13054: GO 13056
13056: DISABLE
13057: LD_INT 0
13059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
13060: LD_ADDR_VAR 0 1
13064: PUSH
13065: LD_INT 22
13067: PUSH
13068: LD_OWVAR 2
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: PUSH
13077: LD_INT 30
13079: PUSH
13080: LD_INT 3
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: PPUSH
13091: CALL_OW 69
13095: ST_TO_ADDR
// if not tmp then
13096: LD_VAR 0 1
13100: NOT
13101: IFFALSE 13105
// exit ;
13103: GO 13131
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13105: LD_VAR 0 1
13109: PUSH
13110: LD_INT 1
13112: PPUSH
13113: LD_VAR 0 1
13117: PPUSH
13118: CALL_OW 12
13122: ARRAY
13123: PPUSH
13124: LD_INT 1
13126: PPUSH
13127: CALL_OW 234
// end ;
13131: PPOPN 1
13133: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
13134: LD_EXP 8
13138: IFFALSE 13146
13140: PUSH
13141: LD_EXP 56
13145: AND
13146: IFFALSE 13258
13148: GO 13150
13150: DISABLE
13151: LD_INT 0
13153: PPUSH
13154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
13155: LD_ADDR_VAR 0 2
13159: PUSH
13160: LD_INT 22
13162: PUSH
13163: LD_OWVAR 2
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: PUSH
13172: LD_INT 2
13174: PUSH
13175: LD_INT 30
13177: PUSH
13178: LD_INT 27
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: PUSH
13185: LD_INT 30
13187: PUSH
13188: LD_INT 26
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: PUSH
13195: LD_INT 30
13197: PUSH
13198: LD_INT 28
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: PUSH
13211: EMPTY
13212: LIST
13213: LIST
13214: PPUSH
13215: CALL_OW 69
13219: ST_TO_ADDR
// if not tmp then
13220: LD_VAR 0 2
13224: NOT
13225: IFFALSE 13229
// exit ;
13227: GO 13258
// for i in tmp do
13229: LD_ADDR_VAR 0 1
13233: PUSH
13234: LD_VAR 0 2
13238: PUSH
13239: FOR_IN
13240: IFFALSE 13256
// SetLives ( i , 1 ) ;
13242: LD_VAR 0 1
13246: PPUSH
13247: LD_INT 1
13249: PPUSH
13250: CALL_OW 234
13254: GO 13239
13256: POP
13257: POP
// end ;
13258: PPOPN 2
13260: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
13261: LD_EXP 8
13265: IFFALSE 13273
13267: PUSH
13268: LD_EXP 57
13272: AND
13273: IFFALSE 13560
13275: GO 13277
13277: DISABLE
13278: LD_INT 0
13280: PPUSH
13281: PPUSH
13282: PPUSH
// begin i := rand ( 1 , 7 ) ;
13283: LD_ADDR_VAR 0 1
13287: PUSH
13288: LD_INT 1
13290: PPUSH
13291: LD_INT 7
13293: PPUSH
13294: CALL_OW 12
13298: ST_TO_ADDR
// case i of 1 :
13299: LD_VAR 0 1
13303: PUSH
13304: LD_INT 1
13306: DOUBLE
13307: EQUAL
13308: IFTRUE 13312
13310: GO 13322
13312: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
13313: LD_STRING earthquake(getX(game), 0, 32)
13315: PPUSH
13316: CALL_OW 559
13320: GO 13560
13322: LD_INT 2
13324: DOUBLE
13325: EQUAL
13326: IFTRUE 13330
13328: GO 13344
13330: POP
// begin ToLua ( displayStucuk(); ) ;
13331: LD_STRING displayStucuk();
13333: PPUSH
13334: CALL_OW 559
// ResetFog ;
13338: CALL_OW 335
// end ; 3 :
13342: GO 13560
13344: LD_INT 3
13346: DOUBLE
13347: EQUAL
13348: IFTRUE 13352
13350: GO 13456
13352: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13353: LD_ADDR_VAR 0 2
13357: PUSH
13358: LD_INT 22
13360: PUSH
13361: LD_OWVAR 2
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: PUSH
13370: LD_INT 25
13372: PUSH
13373: LD_INT 1
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: PPUSH
13384: CALL_OW 69
13388: ST_TO_ADDR
// if not tmp then
13389: LD_VAR 0 2
13393: NOT
13394: IFFALSE 13398
// exit ;
13396: GO 13560
// un := tmp [ rand ( 1 , tmp ) ] ;
13398: LD_ADDR_VAR 0 3
13402: PUSH
13403: LD_VAR 0 2
13407: PUSH
13408: LD_INT 1
13410: PPUSH
13411: LD_VAR 0 2
13415: PPUSH
13416: CALL_OW 12
13420: ARRAY
13421: ST_TO_ADDR
// if Crawls ( un ) then
13422: LD_VAR 0 3
13426: PPUSH
13427: CALL_OW 318
13431: IFFALSE 13442
// ComWalk ( un ) ;
13433: LD_VAR 0 3
13437: PPUSH
13438: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13442: LD_VAR 0 3
13446: PPUSH
13447: LD_INT 8
13449: PPUSH
13450: CALL_OW 336
// end ; 4 :
13454: GO 13560
13456: LD_INT 4
13458: DOUBLE
13459: EQUAL
13460: IFTRUE 13464
13462: GO 13538
13464: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13465: LD_ADDR_VAR 0 2
13469: PUSH
13470: LD_INT 22
13472: PUSH
13473: LD_OWVAR 2
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: PUSH
13482: LD_INT 30
13484: PUSH
13485: LD_INT 29
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: PPUSH
13496: CALL_OW 69
13500: ST_TO_ADDR
// if not tmp then
13501: LD_VAR 0 2
13505: NOT
13506: IFFALSE 13510
// exit ;
13508: GO 13560
// CenterNowOnUnits ( tmp [ 1 ] ) ;
13510: LD_VAR 0 2
13514: PUSH
13515: LD_INT 1
13517: ARRAY
13518: PPUSH
13519: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
13523: LD_VAR 0 2
13527: PUSH
13528: LD_INT 1
13530: ARRAY
13531: PPUSH
13532: CALL_OW 65
// end ; 5 .. 7 :
13536: GO 13560
13538: LD_INT 5
13540: DOUBLE
13541: GREATEREQUAL
13542: IFFALSE 13550
13544: LD_INT 7
13546: DOUBLE
13547: LESSEQUAL
13548: IFTRUE 13552
13550: GO 13559
13552: POP
// StreamSibBomb ; end ;
13553: CALL 9741 0 0
13557: GO 13560
13559: POP
// end ;
13560: PPOPN 3
13562: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
13563: LD_EXP 8
13567: IFFALSE 13575
13569: PUSH
13570: LD_EXP 58
13574: AND
13575: IFFALSE 13731
13577: GO 13579
13579: DISABLE
13580: LD_INT 0
13582: PPUSH
13583: PPUSH
13584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
13585: LD_ADDR_VAR 0 2
13589: PUSH
13590: LD_INT 81
13592: PUSH
13593: LD_OWVAR 2
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: PUSH
13602: LD_INT 2
13604: PUSH
13605: LD_INT 21
13607: PUSH
13608: LD_INT 1
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: PUSH
13615: LD_INT 21
13617: PUSH
13618: LD_INT 2
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: LIST
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PPUSH
13634: CALL_OW 69
13638: ST_TO_ADDR
// if not tmp then
13639: LD_VAR 0 2
13643: NOT
13644: IFFALSE 13648
// exit ;
13646: GO 13731
// p := 0 ;
13648: LD_ADDR_VAR 0 3
13652: PUSH
13653: LD_INT 0
13655: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13656: LD_INT 35
13658: PPUSH
13659: CALL_OW 67
// p := p + 1 ;
13663: LD_ADDR_VAR 0 3
13667: PUSH
13668: LD_VAR 0 3
13672: PUSH
13673: LD_INT 1
13675: PLUS
13676: ST_TO_ADDR
// for i in tmp do
13677: LD_ADDR_VAR 0 1
13681: PUSH
13682: LD_VAR 0 2
13686: PUSH
13687: FOR_IN
13688: IFFALSE 13719
// if GetLives ( i ) < 1000 then
13690: LD_VAR 0 1
13694: PPUSH
13695: CALL_OW 256
13699: PUSH
13700: LD_INT 1000
13702: LESS
13703: IFFALSE 13717
// SetLives ( i , 1000 ) ;
13705: LD_VAR 0 1
13709: PPUSH
13710: LD_INT 1000
13712: PPUSH
13713: CALL_OW 234
13717: GO 13687
13719: POP
13720: POP
// until p > 20 ;
13721: LD_VAR 0 3
13725: PUSH
13726: LD_INT 20
13728: GREATER
13729: IFFALSE 13656
// end ;
13731: PPOPN 3
13733: END
// every 0 0$1 trigger StreamModeActive and sTime do
13734: LD_EXP 8
13738: IFFALSE 13746
13740: PUSH
13741: LD_EXP 59
13745: AND
13746: IFFALSE 13781
13748: GO 13750
13750: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
13751: LD_INT 28
13753: PPUSH
13754: LD_OWVAR 2
13758: PPUSH
13759: LD_INT 2
13761: PPUSH
13762: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
13766: LD_INT 30
13768: PPUSH
13769: LD_OWVAR 2
13773: PPUSH
13774: LD_INT 2
13776: PPUSH
13777: CALL_OW 322
// end ;
13781: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
13782: LD_EXP 8
13786: IFFALSE 13794
13788: PUSH
13789: LD_EXP 60
13793: AND
13794: IFFALSE 13915
13796: GO 13798
13798: DISABLE
13799: LD_INT 0
13801: PPUSH
13802: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13803: LD_ADDR_VAR 0 2
13807: PUSH
13808: LD_INT 22
13810: PUSH
13811: LD_OWVAR 2
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: LD_INT 21
13822: PUSH
13823: LD_INT 1
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: LD_INT 3
13832: PUSH
13833: LD_INT 23
13835: PUSH
13836: LD_INT 0
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: LIST
13851: PPUSH
13852: CALL_OW 69
13856: ST_TO_ADDR
// if not tmp then
13857: LD_VAR 0 2
13861: NOT
13862: IFFALSE 13866
// exit ;
13864: GO 13915
// for i in tmp do
13866: LD_ADDR_VAR 0 1
13870: PUSH
13871: LD_VAR 0 2
13875: PUSH
13876: FOR_IN
13877: IFFALSE 13913
// begin if Crawls ( i ) then
13879: LD_VAR 0 1
13883: PPUSH
13884: CALL_OW 318
13888: IFFALSE 13899
// ComWalk ( i ) ;
13890: LD_VAR 0 1
13894: PPUSH
13895: CALL_OW 138
// SetClass ( i , 2 ) ;
13899: LD_VAR 0 1
13903: PPUSH
13904: LD_INT 2
13906: PPUSH
13907: CALL_OW 336
// end ;
13911: GO 13876
13913: POP
13914: POP
// end ;
13915: PPOPN 2
13917: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
13918: LD_EXP 8
13922: IFFALSE 13930
13924: PUSH
13925: LD_EXP 61
13929: AND
13930: IFFALSE 14220
13932: GO 13934
13934: DISABLE
13935: LD_INT 0
13937: PPUSH
13938: PPUSH
13939: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
13940: LD_OWVAR 2
13944: PPUSH
13945: LD_INT 9
13947: PPUSH
13948: LD_INT 1
13950: PPUSH
13951: LD_INT 1
13953: PPUSH
13954: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
13958: LD_INT 9
13960: PPUSH
13961: LD_OWVAR 2
13965: PPUSH
13966: CALL_OW 343
// uc_side := 9 ;
13970: LD_ADDR_OWVAR 20
13974: PUSH
13975: LD_INT 9
13977: ST_TO_ADDR
// uc_nation := 2 ;
13978: LD_ADDR_OWVAR 21
13982: PUSH
13983: LD_INT 2
13985: ST_TO_ADDR
// hc_name := Dark Warrior ;
13986: LD_ADDR_OWVAR 26
13990: PUSH
13991: LD_STRING Dark Warrior
13993: ST_TO_ADDR
// hc_gallery :=  ;
13994: LD_ADDR_OWVAR 33
13998: PUSH
13999: LD_STRING 
14001: ST_TO_ADDR
// hc_noskilllimit := true ;
14002: LD_ADDR_OWVAR 76
14006: PUSH
14007: LD_INT 1
14009: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
14010: LD_ADDR_OWVAR 31
14014: PUSH
14015: LD_INT 30
14017: PUSH
14018: LD_INT 30
14020: PUSH
14021: LD_INT 30
14023: PUSH
14024: LD_INT 30
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: ST_TO_ADDR
// un := CreateHuman ;
14033: LD_ADDR_VAR 0 3
14037: PUSH
14038: CALL_OW 44
14042: ST_TO_ADDR
// hc_noskilllimit := false ;
14043: LD_ADDR_OWVAR 76
14047: PUSH
14048: LD_INT 0
14050: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14051: LD_VAR 0 3
14055: PPUSH
14056: LD_INT 1
14058: PPUSH
14059: CALL_OW 51
// ToLua ( playRanger() ) ;
14063: LD_STRING playRanger()
14065: PPUSH
14066: CALL_OW 559
// p := 0 ;
14070: LD_ADDR_VAR 0 2
14074: PUSH
14075: LD_INT 0
14077: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14078: LD_INT 35
14080: PPUSH
14081: CALL_OW 67
// p := p + 1 ;
14085: LD_ADDR_VAR 0 2
14089: PUSH
14090: LD_VAR 0 2
14094: PUSH
14095: LD_INT 1
14097: PLUS
14098: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
14099: LD_VAR 0 3
14103: PPUSH
14104: CALL_OW 256
14108: PUSH
14109: LD_INT 1000
14111: LESS
14112: IFFALSE 14126
// SetLives ( un , 1000 ) ;
14114: LD_VAR 0 3
14118: PPUSH
14119: LD_INT 1000
14121: PPUSH
14122: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
14126: LD_VAR 0 3
14130: PPUSH
14131: LD_INT 81
14133: PUSH
14134: LD_OWVAR 2
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PUSH
14143: LD_INT 91
14145: PUSH
14146: LD_VAR 0 3
14150: PUSH
14151: LD_INT 30
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: LIST
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: PPUSH
14163: CALL_OW 69
14167: PPUSH
14168: LD_VAR 0 3
14172: PPUSH
14173: CALL_OW 74
14177: PPUSH
14178: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
14182: LD_VAR 0 2
14186: PUSH
14187: LD_INT 80
14189: GREATER
14190: IFTRUE 14203
14192: PUSH
14193: LD_VAR 0 3
14197: PPUSH
14198: CALL_OW 301
14202: OR
14203: IFFALSE 14078
// if un then
14205: LD_VAR 0 3
14209: IFFALSE 14220
// RemoveUnit ( un ) ;
14211: LD_VAR 0 3
14215: PPUSH
14216: CALL_OW 64
// end ;
14220: PPOPN 3
14222: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
14223: LD_EXP 62
14227: IFFALSE 14343
14229: GO 14231
14231: DISABLE
14232: LD_INT 0
14234: PPUSH
14235: PPUSH
14236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14237: LD_ADDR_VAR 0 2
14241: PUSH
14242: LD_INT 81
14244: PUSH
14245: LD_OWVAR 2
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: LD_INT 21
14256: PUSH
14257: LD_INT 1
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PPUSH
14268: CALL_OW 69
14272: ST_TO_ADDR
// ToLua ( playComputer() ) ;
14273: LD_STRING playComputer()
14275: PPUSH
14276: CALL_OW 559
// if not tmp then
14280: LD_VAR 0 2
14284: NOT
14285: IFFALSE 14289
// exit ;
14287: GO 14343
// for i in tmp do
14289: LD_ADDR_VAR 0 1
14293: PUSH
14294: LD_VAR 0 2
14298: PUSH
14299: FOR_IN
14300: IFFALSE 14341
// for j := 1 to 4 do
14302: LD_ADDR_VAR 0 3
14306: PUSH
14307: DOUBLE
14308: LD_INT 1
14310: DEC
14311: ST_TO_ADDR
14312: LD_INT 4
14314: PUSH
14315: FOR_TO
14316: IFFALSE 14337
// SetSkill ( i , j , 10 ) ;
14318: LD_VAR 0 1
14322: PPUSH
14323: LD_VAR 0 3
14327: PPUSH
14328: LD_INT 10
14330: PPUSH
14331: CALL_OW 237
14335: GO 14315
14337: POP
14338: POP
14339: GO 14299
14341: POP
14342: POP
// end ;
14343: PPOPN 3
14345: END
// every 0 0$1 trigger s30 do var i , tmp ;
14346: LD_EXP 63
14350: IFFALSE 14419
14352: GO 14354
14354: DISABLE
14355: LD_INT 0
14357: PPUSH
14358: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14359: LD_ADDR_VAR 0 2
14363: PUSH
14364: LD_INT 22
14366: PUSH
14367: LD_OWVAR 2
14371: PUSH
14372: EMPTY
14373: LIST
14374: LIST
14375: PPUSH
14376: CALL_OW 69
14380: ST_TO_ADDR
// if not tmp then
14381: LD_VAR 0 2
14385: NOT
14386: IFFALSE 14390
// exit ;
14388: GO 14419
// for i in tmp do
14390: LD_ADDR_VAR 0 1
14394: PUSH
14395: LD_VAR 0 2
14399: PUSH
14400: FOR_IN
14401: IFFALSE 14417
// SetLives ( i , 300 ) ;
14403: LD_VAR 0 1
14407: PPUSH
14408: LD_INT 300
14410: PPUSH
14411: CALL_OW 234
14415: GO 14400
14417: POP
14418: POP
// end ;
14419: PPOPN 2
14421: END
// every 0 0$1 trigger s60 do var i , tmp ;
14422: LD_EXP 64
14426: IFFALSE 14495
14428: GO 14430
14430: DISABLE
14431: LD_INT 0
14433: PPUSH
14434: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14435: LD_ADDR_VAR 0 2
14439: PUSH
14440: LD_INT 22
14442: PUSH
14443: LD_OWVAR 2
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: PPUSH
14452: CALL_OW 69
14456: ST_TO_ADDR
// if not tmp then
14457: LD_VAR 0 2
14461: NOT
14462: IFFALSE 14466
// exit ;
14464: GO 14495
// for i in tmp do
14466: LD_ADDR_VAR 0 1
14470: PUSH
14471: LD_VAR 0 2
14475: PUSH
14476: FOR_IN
14477: IFFALSE 14493
// SetLives ( i , 600 ) ;
14479: LD_VAR 0 1
14483: PPUSH
14484: LD_INT 600
14486: PPUSH
14487: CALL_OW 234
14491: GO 14476
14493: POP
14494: POP
// end ;
14495: PPOPN 2
14497: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14498: LD_INT 0
14500: PPUSH
// case cmd of 301 :
14501: LD_VAR 0 1
14505: PUSH
14506: LD_INT 301
14508: DOUBLE
14509: EQUAL
14510: IFTRUE 14514
14512: GO 14546
14514: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
14515: LD_VAR 0 6
14519: PPUSH
14520: LD_VAR 0 7
14524: PPUSH
14525: LD_VAR 0 8
14529: PPUSH
14530: LD_VAR 0 4
14534: PPUSH
14535: LD_VAR 0 5
14539: PPUSH
14540: CALL 15759 0 5
14544: GO 14667
14546: LD_INT 302
14548: DOUBLE
14549: EQUAL
14550: IFTRUE 14554
14552: GO 14591
14554: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
14555: LD_VAR 0 6
14559: PPUSH
14560: LD_VAR 0 7
14564: PPUSH
14565: LD_VAR 0 8
14569: PPUSH
14570: LD_VAR 0 9
14574: PPUSH
14575: LD_VAR 0 4
14579: PPUSH
14580: LD_VAR 0 5
14584: PPUSH
14585: CALL 15850 0 6
14589: GO 14667
14591: LD_INT 303
14593: DOUBLE
14594: EQUAL
14595: IFTRUE 14599
14597: GO 14636
14599: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
14600: LD_VAR 0 6
14604: PPUSH
14605: LD_VAR 0 7
14609: PPUSH
14610: LD_VAR 0 8
14614: PPUSH
14615: LD_VAR 0 9
14619: PPUSH
14620: LD_VAR 0 4
14624: PPUSH
14625: LD_VAR 0 5
14629: PPUSH
14630: CALL 14672 0 6
14634: GO 14667
14636: LD_INT 304
14638: DOUBLE
14639: EQUAL
14640: IFTRUE 14644
14642: GO 14666
14644: POP
// hHackTeleport ( unit , x , y ) ; end ;
14645: LD_VAR 0 2
14649: PPUSH
14650: LD_VAR 0 4
14654: PPUSH
14655: LD_VAR 0 5
14659: PPUSH
14660: CALL 16443 0 3
14664: GO 14667
14666: POP
// end ;
14667: LD_VAR 0 12
14671: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
14672: LD_INT 0
14674: PPUSH
14675: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
14676: LD_VAR 0 1
14680: PUSH
14681: LD_INT 1
14683: LESS
14684: IFTRUE 14696
14686: PUSH
14687: LD_VAR 0 1
14691: PUSH
14692: LD_INT 3
14694: GREATER
14695: OR
14696: IFTRUE 14714
14698: PUSH
14699: LD_VAR 0 5
14703: PPUSH
14704: LD_VAR 0 6
14708: PPUSH
14709: CALL_OW 428
14713: OR
14714: IFFALSE 14718
// exit ;
14716: GO 15446
// uc_side := your_side ;
14718: LD_ADDR_OWVAR 20
14722: PUSH
14723: LD_OWVAR 2
14727: ST_TO_ADDR
// uc_nation := nation ;
14728: LD_ADDR_OWVAR 21
14732: PUSH
14733: LD_VAR 0 1
14737: ST_TO_ADDR
// bc_level = 1 ;
14738: LD_ADDR_OWVAR 43
14742: PUSH
14743: LD_INT 1
14745: ST_TO_ADDR
// case btype of 1 :
14746: LD_VAR 0 2
14750: PUSH
14751: LD_INT 1
14753: DOUBLE
14754: EQUAL
14755: IFTRUE 14759
14757: GO 14770
14759: POP
// bc_type := b_depot ; 2 :
14760: LD_ADDR_OWVAR 42
14764: PUSH
14765: LD_INT 0
14767: ST_TO_ADDR
14768: GO 15390
14770: LD_INT 2
14772: DOUBLE
14773: EQUAL
14774: IFTRUE 14778
14776: GO 14789
14778: POP
// bc_type := b_warehouse ; 3 :
14779: LD_ADDR_OWVAR 42
14783: PUSH
14784: LD_INT 1
14786: ST_TO_ADDR
14787: GO 15390
14789: LD_INT 3
14791: DOUBLE
14792: EQUAL
14793: IFTRUE 14797
14795: GO 14808
14797: POP
// bc_type := b_lab ; 4 .. 9 :
14798: LD_ADDR_OWVAR 42
14802: PUSH
14803: LD_INT 6
14805: ST_TO_ADDR
14806: GO 15390
14808: LD_INT 4
14810: DOUBLE
14811: GREATEREQUAL
14812: IFFALSE 14820
14814: LD_INT 9
14816: DOUBLE
14817: LESSEQUAL
14818: IFTRUE 14822
14820: GO 14882
14822: POP
// begin bc_type := b_lab_half ;
14823: LD_ADDR_OWVAR 42
14827: PUSH
14828: LD_INT 7
14830: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
14831: LD_ADDR_OWVAR 44
14835: PUSH
14836: LD_INT 10
14838: PUSH
14839: LD_INT 11
14841: PUSH
14842: LD_INT 12
14844: PUSH
14845: LD_INT 15
14847: PUSH
14848: LD_INT 14
14850: PUSH
14851: LD_INT 13
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: PUSH
14862: LD_VAR 0 2
14866: PUSH
14867: LD_INT 3
14869: MINUS
14870: ARRAY
14871: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
14872: LD_ADDR_OWVAR 45
14876: PUSH
14877: LD_INT 9
14879: ST_TO_ADDR
// end ; 10 .. 13 :
14880: GO 15390
14882: LD_INT 10
14884: DOUBLE
14885: GREATEREQUAL
14886: IFFALSE 14894
14888: LD_INT 13
14890: DOUBLE
14891: LESSEQUAL
14892: IFTRUE 14896
14894: GO 14973
14896: POP
// begin bc_type := b_lab_full ;
14897: LD_ADDR_OWVAR 42
14901: PUSH
14902: LD_INT 8
14904: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
14905: LD_ADDR_OWVAR 44
14909: PUSH
14910: LD_INT 10
14912: PUSH
14913: LD_INT 12
14915: PUSH
14916: LD_INT 14
14918: PUSH
14919: LD_INT 13
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: PUSH
14928: LD_VAR 0 2
14932: PUSH
14933: LD_INT 9
14935: MINUS
14936: ARRAY
14937: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
14938: LD_ADDR_OWVAR 45
14942: PUSH
14943: LD_INT 11
14945: PUSH
14946: LD_INT 15
14948: PUSH
14949: LD_INT 12
14951: PUSH
14952: LD_INT 15
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: PUSH
14961: LD_VAR 0 2
14965: PUSH
14966: LD_INT 9
14968: MINUS
14969: ARRAY
14970: ST_TO_ADDR
// end ; 14 :
14971: GO 15390
14973: LD_INT 14
14975: DOUBLE
14976: EQUAL
14977: IFTRUE 14981
14979: GO 14992
14981: POP
// bc_type := b_workshop ; 15 :
14982: LD_ADDR_OWVAR 42
14986: PUSH
14987: LD_INT 2
14989: ST_TO_ADDR
14990: GO 15390
14992: LD_INT 15
14994: DOUBLE
14995: EQUAL
14996: IFTRUE 15000
14998: GO 15011
15000: POP
// bc_type := b_factory ; 16 :
15001: LD_ADDR_OWVAR 42
15005: PUSH
15006: LD_INT 3
15008: ST_TO_ADDR
15009: GO 15390
15011: LD_INT 16
15013: DOUBLE
15014: EQUAL
15015: IFTRUE 15019
15017: GO 15030
15019: POP
// bc_type := b_ext_gun ; 17 :
15020: LD_ADDR_OWVAR 42
15024: PUSH
15025: LD_INT 17
15027: ST_TO_ADDR
15028: GO 15390
15030: LD_INT 17
15032: DOUBLE
15033: EQUAL
15034: IFTRUE 15038
15036: GO 15066
15038: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
15039: LD_ADDR_OWVAR 42
15043: PUSH
15044: LD_INT 19
15046: PUSH
15047: LD_INT 23
15049: PUSH
15050: LD_INT 19
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: LIST
15057: PUSH
15058: LD_VAR 0 1
15062: ARRAY
15063: ST_TO_ADDR
15064: GO 15390
15066: LD_INT 18
15068: DOUBLE
15069: EQUAL
15070: IFTRUE 15074
15072: GO 15085
15074: POP
// bc_type := b_ext_radar ; 19 :
15075: LD_ADDR_OWVAR 42
15079: PUSH
15080: LD_INT 20
15082: ST_TO_ADDR
15083: GO 15390
15085: LD_INT 19
15087: DOUBLE
15088: EQUAL
15089: IFTRUE 15093
15091: GO 15104
15093: POP
// bc_type := b_ext_radio ; 20 :
15094: LD_ADDR_OWVAR 42
15098: PUSH
15099: LD_INT 22
15101: ST_TO_ADDR
15102: GO 15390
15104: LD_INT 20
15106: DOUBLE
15107: EQUAL
15108: IFTRUE 15112
15110: GO 15123
15112: POP
// bc_type := b_ext_siberium ; 21 :
15113: LD_ADDR_OWVAR 42
15117: PUSH
15118: LD_INT 21
15120: ST_TO_ADDR
15121: GO 15390
15123: LD_INT 21
15125: DOUBLE
15126: EQUAL
15127: IFTRUE 15131
15129: GO 15142
15131: POP
// bc_type := b_ext_computer ; 22 :
15132: LD_ADDR_OWVAR 42
15136: PUSH
15137: LD_INT 24
15139: ST_TO_ADDR
15140: GO 15390
15142: LD_INT 22
15144: DOUBLE
15145: EQUAL
15146: IFTRUE 15150
15148: GO 15161
15150: POP
// bc_type := b_ext_track ; 23 :
15151: LD_ADDR_OWVAR 42
15155: PUSH
15156: LD_INT 16
15158: ST_TO_ADDR
15159: GO 15390
15161: LD_INT 23
15163: DOUBLE
15164: EQUAL
15165: IFTRUE 15169
15167: GO 15180
15169: POP
// bc_type := b_ext_laser ; 24 :
15170: LD_ADDR_OWVAR 42
15174: PUSH
15175: LD_INT 25
15177: ST_TO_ADDR
15178: GO 15390
15180: LD_INT 24
15182: DOUBLE
15183: EQUAL
15184: IFTRUE 15188
15186: GO 15199
15188: POP
// bc_type := b_control_tower ; 25 :
15189: LD_ADDR_OWVAR 42
15193: PUSH
15194: LD_INT 36
15196: ST_TO_ADDR
15197: GO 15390
15199: LD_INT 25
15201: DOUBLE
15202: EQUAL
15203: IFTRUE 15207
15205: GO 15218
15207: POP
// bc_type := b_breastwork ; 26 :
15208: LD_ADDR_OWVAR 42
15212: PUSH
15213: LD_INT 31
15215: ST_TO_ADDR
15216: GO 15390
15218: LD_INT 26
15220: DOUBLE
15221: EQUAL
15222: IFTRUE 15226
15224: GO 15237
15226: POP
// bc_type := b_bunker ; 27 :
15227: LD_ADDR_OWVAR 42
15231: PUSH
15232: LD_INT 32
15234: ST_TO_ADDR
15235: GO 15390
15237: LD_INT 27
15239: DOUBLE
15240: EQUAL
15241: IFTRUE 15245
15243: GO 15256
15245: POP
// bc_type := b_turret ; 28 :
15246: LD_ADDR_OWVAR 42
15250: PUSH
15251: LD_INT 33
15253: ST_TO_ADDR
15254: GO 15390
15256: LD_INT 28
15258: DOUBLE
15259: EQUAL
15260: IFTRUE 15264
15262: GO 15275
15264: POP
// bc_type := b_armoury ; 29 :
15265: LD_ADDR_OWVAR 42
15269: PUSH
15270: LD_INT 4
15272: ST_TO_ADDR
15273: GO 15390
15275: LD_INT 29
15277: DOUBLE
15278: EQUAL
15279: IFTRUE 15283
15281: GO 15294
15283: POP
// bc_type := b_barracks ; 30 :
15284: LD_ADDR_OWVAR 42
15288: PUSH
15289: LD_INT 5
15291: ST_TO_ADDR
15292: GO 15390
15294: LD_INT 30
15296: DOUBLE
15297: EQUAL
15298: IFTRUE 15302
15300: GO 15313
15302: POP
// bc_type := b_solar_power ; 31 :
15303: LD_ADDR_OWVAR 42
15307: PUSH
15308: LD_INT 27
15310: ST_TO_ADDR
15311: GO 15390
15313: LD_INT 31
15315: DOUBLE
15316: EQUAL
15317: IFTRUE 15321
15319: GO 15332
15321: POP
// bc_type := b_oil_power ; 32 :
15322: LD_ADDR_OWVAR 42
15326: PUSH
15327: LD_INT 26
15329: ST_TO_ADDR
15330: GO 15390
15332: LD_INT 32
15334: DOUBLE
15335: EQUAL
15336: IFTRUE 15340
15338: GO 15351
15340: POP
// bc_type := b_siberite_power ; 33 :
15341: LD_ADDR_OWVAR 42
15345: PUSH
15346: LD_INT 28
15348: ST_TO_ADDR
15349: GO 15390
15351: LD_INT 33
15353: DOUBLE
15354: EQUAL
15355: IFTRUE 15359
15357: GO 15370
15359: POP
// bc_type := b_oil_mine ; 34 :
15360: LD_ADDR_OWVAR 42
15364: PUSH
15365: LD_INT 29
15367: ST_TO_ADDR
15368: GO 15390
15370: LD_INT 34
15372: DOUBLE
15373: EQUAL
15374: IFTRUE 15378
15376: GO 15389
15378: POP
// bc_type := b_siberite_mine ; end ;
15379: LD_ADDR_OWVAR 42
15383: PUSH
15384: LD_INT 30
15386: ST_TO_ADDR
15387: GO 15390
15389: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
15390: LD_ADDR_VAR 0 8
15394: PUSH
15395: LD_VAR 0 5
15399: PPUSH
15400: LD_VAR 0 6
15404: PPUSH
15405: LD_VAR 0 3
15409: PPUSH
15410: CALL_OW 47
15414: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
15415: LD_OWVAR 42
15419: PUSH
15420: LD_INT 32
15422: PUSH
15423: LD_INT 33
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: IN
15430: IFFALSE 15446
// PlaceWeaponTurret ( b , weapon ) ;
15432: LD_VAR 0 8
15436: PPUSH
15437: LD_VAR 0 4
15441: PPUSH
15442: CALL_OW 431
// end ;
15446: LD_VAR 0 7
15450: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
15451: LD_INT 0
15453: PPUSH
15454: PPUSH
15455: PPUSH
15456: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15457: LD_ADDR_VAR 0 4
15461: PUSH
15462: LD_INT 22
15464: PUSH
15465: LD_OWVAR 2
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: PUSH
15474: LD_INT 2
15476: PUSH
15477: LD_INT 30
15479: PUSH
15480: LD_INT 0
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 30
15489: PUSH
15490: LD_INT 1
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: LIST
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PPUSH
15506: CALL_OW 69
15510: ST_TO_ADDR
// if not tmp then
15511: LD_VAR 0 4
15515: NOT
15516: IFFALSE 15520
// exit ;
15518: GO 15579
// for i in tmp do
15520: LD_ADDR_VAR 0 2
15524: PUSH
15525: LD_VAR 0 4
15529: PUSH
15530: FOR_IN
15531: IFFALSE 15577
// for j = 1 to 3 do
15533: LD_ADDR_VAR 0 3
15537: PUSH
15538: DOUBLE
15539: LD_INT 1
15541: DEC
15542: ST_TO_ADDR
15543: LD_INT 3
15545: PUSH
15546: FOR_TO
15547: IFFALSE 15573
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
15549: LD_VAR 0 2
15553: PPUSH
15554: CALL_OW 274
15558: PPUSH
15559: LD_VAR 0 3
15563: PPUSH
15564: LD_INT 99999
15566: PPUSH
15567: CALL_OW 277
15571: GO 15546
15573: POP
15574: POP
15575: GO 15530
15577: POP
15578: POP
// end ;
15579: LD_VAR 0 1
15583: RET
// export function hHackSetLevel10 ; var i , j ; begin
15584: LD_INT 0
15586: PPUSH
15587: PPUSH
15588: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15589: LD_ADDR_VAR 0 2
15593: PUSH
15594: LD_INT 21
15596: PUSH
15597: LD_INT 1
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: PPUSH
15604: CALL_OW 69
15608: PUSH
15609: FOR_IN
15610: IFFALSE 15662
// if IsSelected ( i ) then
15612: LD_VAR 0 2
15616: PPUSH
15617: CALL_OW 306
15621: IFFALSE 15660
// begin for j := 1 to 4 do
15623: LD_ADDR_VAR 0 3
15627: PUSH
15628: DOUBLE
15629: LD_INT 1
15631: DEC
15632: ST_TO_ADDR
15633: LD_INT 4
15635: PUSH
15636: FOR_TO
15637: IFFALSE 15658
// SetSkill ( i , j , 10 ) ;
15639: LD_VAR 0 2
15643: PPUSH
15644: LD_VAR 0 3
15648: PPUSH
15649: LD_INT 10
15651: PPUSH
15652: CALL_OW 237
15656: GO 15636
15658: POP
15659: POP
// end ;
15660: GO 15609
15662: POP
15663: POP
// end ;
15664: LD_VAR 0 1
15668: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15669: LD_INT 0
15671: PPUSH
15672: PPUSH
15673: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15674: LD_ADDR_VAR 0 2
15678: PUSH
15679: LD_INT 22
15681: PUSH
15682: LD_OWVAR 2
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PUSH
15691: LD_INT 21
15693: PUSH
15694: LD_INT 1
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: PPUSH
15705: CALL_OW 69
15709: PUSH
15710: FOR_IN
15711: IFFALSE 15752
// begin for j := 1 to 4 do
15713: LD_ADDR_VAR 0 3
15717: PUSH
15718: DOUBLE
15719: LD_INT 1
15721: DEC
15722: ST_TO_ADDR
15723: LD_INT 4
15725: PUSH
15726: FOR_TO
15727: IFFALSE 15748
// SetSkill ( i , j , 10 ) ;
15729: LD_VAR 0 2
15733: PPUSH
15734: LD_VAR 0 3
15738: PPUSH
15739: LD_INT 10
15741: PPUSH
15742: CALL_OW 237
15746: GO 15726
15748: POP
15749: POP
// end ;
15750: GO 15710
15752: POP
15753: POP
// end ;
15754: LD_VAR 0 1
15758: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
15759: LD_INT 0
15761: PPUSH
// uc_side := your_side ;
15762: LD_ADDR_OWVAR 20
15766: PUSH
15767: LD_OWVAR 2
15771: ST_TO_ADDR
// uc_nation := nation ;
15772: LD_ADDR_OWVAR 21
15776: PUSH
15777: LD_VAR 0 1
15781: ST_TO_ADDR
// InitHc ;
15782: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15786: LD_INT 0
15788: PPUSH
15789: LD_VAR 0 2
15793: PPUSH
15794: LD_VAR 0 3
15798: PPUSH
15799: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
15803: LD_VAR 0 4
15807: PPUSH
15808: LD_VAR 0 5
15812: PPUSH
15813: CALL_OW 428
15817: PUSH
15818: LD_INT 0
15820: EQUAL
15821: IFFALSE 15845
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
15823: CALL_OW 44
15827: PPUSH
15828: LD_VAR 0 4
15832: PPUSH
15833: LD_VAR 0 5
15837: PPUSH
15838: LD_INT 1
15840: PPUSH
15841: CALL_OW 48
// end ;
15845: LD_VAR 0 6
15849: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
15850: LD_INT 0
15852: PPUSH
15853: PPUSH
// uc_side := your_side ;
15854: LD_ADDR_OWVAR 20
15858: PUSH
15859: LD_OWVAR 2
15863: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
15864: LD_VAR 0 1
15868: PUSH
15869: LD_INT 1
15871: PUSH
15872: LD_INT 2
15874: PUSH
15875: LD_INT 3
15877: PUSH
15878: LD_INT 4
15880: PUSH
15881: LD_INT 5
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: IN
15891: IFFALSE 15903
// uc_nation := nation_american else
15893: LD_ADDR_OWVAR 21
15897: PUSH
15898: LD_INT 1
15900: ST_TO_ADDR
15901: GO 15946
// if chassis in [ 11 , 12 , 13 , 14 ] then
15903: LD_VAR 0 1
15907: PUSH
15908: LD_INT 11
15910: PUSH
15911: LD_INT 12
15913: PUSH
15914: LD_INT 13
15916: PUSH
15917: LD_INT 14
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: IN
15926: IFFALSE 15938
// uc_nation := nation_arabian else
15928: LD_ADDR_OWVAR 21
15932: PUSH
15933: LD_INT 2
15935: ST_TO_ADDR
15936: GO 15946
// uc_nation := nation_russian ;
15938: LD_ADDR_OWVAR 21
15942: PUSH
15943: LD_INT 3
15945: ST_TO_ADDR
// vc_chassis := chassis ;
15946: LD_ADDR_OWVAR 37
15950: PUSH
15951: LD_VAR 0 1
15955: ST_TO_ADDR
// vc_engine := engine ;
15956: LD_ADDR_OWVAR 39
15960: PUSH
15961: LD_VAR 0 2
15965: ST_TO_ADDR
// vc_control := control ;
15966: LD_ADDR_OWVAR 38
15970: PUSH
15971: LD_VAR 0 3
15975: ST_TO_ADDR
// vc_weapon := weapon ;
15976: LD_ADDR_OWVAR 40
15980: PUSH
15981: LD_VAR 0 4
15985: ST_TO_ADDR
// un := CreateVehicle ;
15986: LD_ADDR_VAR 0 8
15990: PUSH
15991: CALL_OW 45
15995: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
15996: LD_VAR 0 8
16000: PPUSH
16001: LD_INT 0
16003: PPUSH
16004: LD_INT 5
16006: PPUSH
16007: CALL_OW 12
16011: PPUSH
16012: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
16016: LD_VAR 0 8
16020: PPUSH
16021: LD_VAR 0 5
16025: PPUSH
16026: LD_VAR 0 6
16030: PPUSH
16031: LD_INT 1
16033: PPUSH
16034: CALL_OW 48
// end ;
16038: LD_VAR 0 7
16042: RET
// export hInvincible ; every 1 do
16043: GO 16045
16045: DISABLE
// hInvincible := [ ] ;
16046: LD_ADDR_EXP 65
16050: PUSH
16051: EMPTY
16052: ST_TO_ADDR
16053: END
// every 10 do var i ;
16054: GO 16056
16056: DISABLE
16057: LD_INT 0
16059: PPUSH
// begin enable ;
16060: ENABLE
// if not hInvincible then
16061: LD_EXP 65
16065: NOT
16066: IFFALSE 16070
// exit ;
16068: GO 16114
// for i in hInvincible do
16070: LD_ADDR_VAR 0 1
16074: PUSH
16075: LD_EXP 65
16079: PUSH
16080: FOR_IN
16081: IFFALSE 16112
// if GetLives ( i ) < 1000 then
16083: LD_VAR 0 1
16087: PPUSH
16088: CALL_OW 256
16092: PUSH
16093: LD_INT 1000
16095: LESS
16096: IFFALSE 16110
// SetLives ( i , 1000 ) ;
16098: LD_VAR 0 1
16102: PPUSH
16103: LD_INT 1000
16105: PPUSH
16106: CALL_OW 234
16110: GO 16080
16112: POP
16113: POP
// end ;
16114: PPOPN 1
16116: END
// export function hHackInvincible ; var i ; begin
16117: LD_INT 0
16119: PPUSH
16120: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
16121: LD_ADDR_VAR 0 2
16125: PUSH
16126: LD_INT 2
16128: PUSH
16129: LD_INT 21
16131: PUSH
16132: LD_INT 1
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PUSH
16139: LD_INT 21
16141: PUSH
16142: LD_INT 2
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: LIST
16153: PPUSH
16154: CALL_OW 69
16158: PUSH
16159: FOR_IN
16160: IFFALSE 16221
// if IsSelected ( i ) then
16162: LD_VAR 0 2
16166: PPUSH
16167: CALL_OW 306
16171: IFFALSE 16219
// begin if i in hInvincible then
16173: LD_VAR 0 2
16177: PUSH
16178: LD_EXP 65
16182: IN
16183: IFFALSE 16203
// hInvincible := hInvincible diff i else
16185: LD_ADDR_EXP 65
16189: PUSH
16190: LD_EXP 65
16194: PUSH
16195: LD_VAR 0 2
16199: DIFF
16200: ST_TO_ADDR
16201: GO 16219
// hInvincible := hInvincible union i ;
16203: LD_ADDR_EXP 65
16207: PUSH
16208: LD_EXP 65
16212: PUSH
16213: LD_VAR 0 2
16217: UNION
16218: ST_TO_ADDR
// end ;
16219: GO 16159
16221: POP
16222: POP
// end ;
16223: LD_VAR 0 1
16227: RET
// export function hHackInvisible ; var i , j ; begin
16228: LD_INT 0
16230: PPUSH
16231: PPUSH
16232: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16233: LD_ADDR_VAR 0 2
16237: PUSH
16238: LD_INT 21
16240: PUSH
16241: LD_INT 1
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: PPUSH
16248: CALL_OW 69
16252: PUSH
16253: FOR_IN
16254: IFFALSE 16278
// if IsSelected ( i ) then
16256: LD_VAR 0 2
16260: PPUSH
16261: CALL_OW 306
16265: IFFALSE 16276
// ComForceInvisible ( i ) ;
16267: LD_VAR 0 2
16271: PPUSH
16272: CALL_OW 496
16276: GO 16253
16278: POP
16279: POP
// end ;
16280: LD_VAR 0 1
16284: RET
// export function hHackChangeYourSide ; begin
16285: LD_INT 0
16287: PPUSH
// if your_side = 8 then
16288: LD_OWVAR 2
16292: PUSH
16293: LD_INT 8
16295: EQUAL
16296: IFFALSE 16308
// your_side := 0 else
16298: LD_ADDR_OWVAR 2
16302: PUSH
16303: LD_INT 0
16305: ST_TO_ADDR
16306: GO 16322
// your_side := your_side + 1 ;
16308: LD_ADDR_OWVAR 2
16312: PUSH
16313: LD_OWVAR 2
16317: PUSH
16318: LD_INT 1
16320: PLUS
16321: ST_TO_ADDR
// end ;
16322: LD_VAR 0 1
16326: RET
// export function hHackChangeUnitSide ; var i , j ; begin
16327: LD_INT 0
16329: PPUSH
16330: PPUSH
16331: PPUSH
// for i in all_units do
16332: LD_ADDR_VAR 0 2
16336: PUSH
16337: LD_OWVAR 3
16341: PUSH
16342: FOR_IN
16343: IFFALSE 16421
// if IsSelected ( i ) then
16345: LD_VAR 0 2
16349: PPUSH
16350: CALL_OW 306
16354: IFFALSE 16419
// begin j := GetSide ( i ) ;
16356: LD_ADDR_VAR 0 3
16360: PUSH
16361: LD_VAR 0 2
16365: PPUSH
16366: CALL_OW 255
16370: ST_TO_ADDR
// if j = 8 then
16371: LD_VAR 0 3
16375: PUSH
16376: LD_INT 8
16378: EQUAL
16379: IFFALSE 16391
// j := 0 else
16381: LD_ADDR_VAR 0 3
16385: PUSH
16386: LD_INT 0
16388: ST_TO_ADDR
16389: GO 16405
// j := j + 1 ;
16391: LD_ADDR_VAR 0 3
16395: PUSH
16396: LD_VAR 0 3
16400: PUSH
16401: LD_INT 1
16403: PLUS
16404: ST_TO_ADDR
// SetSide ( i , j ) ;
16405: LD_VAR 0 2
16409: PPUSH
16410: LD_VAR 0 3
16414: PPUSH
16415: CALL_OW 235
// end ;
16419: GO 16342
16421: POP
16422: POP
// end ;
16423: LD_VAR 0 1
16427: RET
// export function hHackFog ; begin
16428: LD_INT 0
16430: PPUSH
// FogOff ( true ) ;
16431: LD_INT 1
16433: PPUSH
16434: CALL_OW 344
// end ;
16438: LD_VAR 0 1
16442: RET
// export function hHackTeleport ( unit , x , y ) ; begin
16443: LD_INT 0
16445: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
16446: LD_VAR 0 1
16450: PPUSH
16451: LD_VAR 0 2
16455: PPUSH
16456: LD_VAR 0 3
16460: PPUSH
16461: LD_INT 1
16463: PPUSH
16464: LD_INT 1
16466: PPUSH
16467: CALL_OW 483
// CenterOnXY ( x , y ) ;
16471: LD_VAR 0 2
16475: PPUSH
16476: LD_VAR 0 3
16480: PPUSH
16481: CALL_OW 84
// end ;
16485: LD_VAR 0 4
16489: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
16490: LD_INT 0
16492: PPUSH
16493: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
16494: LD_VAR 0 1
16498: NOT
16499: IFTRUE 16518
16501: PUSH
16502: LD_VAR 0 2
16506: PPUSH
16507: LD_VAR 0 3
16511: PPUSH
16512: CALL_OW 488
16516: NOT
16517: OR
16518: IFTRUE 16553
16520: PUSH
16521: LD_VAR 0 1
16525: PPUSH
16526: CALL_OW 266
16530: PUSH
16531: LD_INT 3
16533: NONEQUAL
16534: IFFALSE 16552
16536: PUSH
16537: LD_VAR 0 1
16541: PPUSH
16542: CALL_OW 247
16546: PUSH
16547: LD_INT 1
16549: EQUAL
16550: NOT
16551: AND
16552: OR
16553: IFFALSE 16557
// exit ;
16555: GO 16839
// if GetType ( factory ) = unit_human then
16557: LD_VAR 0 1
16561: PPUSH
16562: CALL_OW 247
16566: PUSH
16567: LD_INT 1
16569: EQUAL
16570: IFFALSE 16587
// factory := IsInUnit ( factory ) ;
16572: LD_ADDR_VAR 0 1
16576: PUSH
16577: LD_VAR 0 1
16581: PPUSH
16582: CALL_OW 310
16586: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
16587: LD_VAR 0 1
16591: PPUSH
16592: CALL_OW 266
16596: PUSH
16597: LD_INT 3
16599: NONEQUAL
16600: IFFALSE 16604
// exit ;
16602: GO 16839
// for i := 1 to Count ( factoryWaypoints ) do
16604: LD_ADDR_VAR 0 5
16608: PUSH
16609: DOUBLE
16610: LD_INT 1
16612: DEC
16613: ST_TO_ADDR
16614: LD_EXP 66
16618: PPUSH
16619: CALL 26806 0 1
16623: PUSH
16624: FOR_TO
16625: IFFALSE 16787
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
16627: LD_VAR 0 2
16631: PPUSH
16632: LD_VAR 0 3
16636: PPUSH
16637: CALL_OW 428
16641: PUSH
16642: LD_EXP 66
16646: PUSH
16647: LD_VAR 0 5
16651: ARRAY
16652: PUSH
16653: LD_INT 2
16655: ARRAY
16656: EQUAL
16657: IFFALSE 16689
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
16659: LD_ADDR_EXP 66
16663: PUSH
16664: LD_EXP 66
16668: PPUSH
16669: LD_VAR 0 5
16673: PPUSH
16674: CALL_OW 3
16678: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16679: CALL 16844 0 0
// exit ;
16683: POP
16684: POP
16685: GO 16839
// end else
16687: GO 16785
// if factory = factoryWaypoints [ i ] [ 2 ] then
16689: LD_VAR 0 1
16693: PUSH
16694: LD_EXP 66
16698: PUSH
16699: LD_VAR 0 5
16703: ARRAY
16704: PUSH
16705: LD_INT 2
16707: ARRAY
16708: EQUAL
16709: IFFALSE 16785
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
16711: LD_ADDR_EXP 66
16715: PUSH
16716: LD_EXP 66
16720: PPUSH
16721: LD_VAR 0 5
16725: PPUSH
16726: CALL_OW 3
16730: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
16731: LD_ADDR_EXP 66
16735: PUSH
16736: LD_EXP 66
16740: PPUSH
16741: LD_VAR 0 1
16745: PPUSH
16746: CALL_OW 255
16750: PUSH
16751: LD_VAR 0 1
16755: PUSH
16756: LD_VAR 0 2
16760: PUSH
16761: LD_VAR 0 3
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: PPUSH
16772: CALL 62782 0 2
16776: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16777: CALL 16844 0 0
// exit ;
16781: POP
16782: POP
16783: GO 16839
// end ; end ;
16785: GO 16624
16787: POP
16788: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
16789: LD_ADDR_EXP 66
16793: PUSH
16794: LD_EXP 66
16798: PPUSH
16799: LD_VAR 0 1
16803: PPUSH
16804: CALL_OW 255
16808: PUSH
16809: LD_VAR 0 1
16813: PUSH
16814: LD_VAR 0 2
16818: PUSH
16819: LD_VAR 0 3
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: PPUSH
16830: CALL 62782 0 2
16834: ST_TO_ADDR
// UpdateFactoryWaypoints ;
16835: CALL 16844 0 0
// end ;
16839: LD_VAR 0 4
16843: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
16844: LD_INT 0
16846: PPUSH
16847: PPUSH
16848: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
16849: LD_STRING resetFactoryWaypoint();
16851: PPUSH
16852: CALL_OW 559
// if factoryWaypoints then
16856: LD_EXP 66
16860: IFFALSE 16981
// begin list := factoryWaypoints ;
16862: LD_ADDR_VAR 0 3
16866: PUSH
16867: LD_EXP 66
16871: ST_TO_ADDR
// for i := 1 to list do
16872: LD_ADDR_VAR 0 2
16876: PUSH
16877: DOUBLE
16878: LD_INT 1
16880: DEC
16881: ST_TO_ADDR
16882: LD_VAR 0 3
16886: PUSH
16887: FOR_TO
16888: IFFALSE 16979
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
16890: LD_STRING setFactoryWaypointXY(
16892: PUSH
16893: LD_VAR 0 3
16897: PUSH
16898: LD_VAR 0 2
16902: ARRAY
16903: PUSH
16904: LD_INT 1
16906: ARRAY
16907: STR
16908: PUSH
16909: LD_STRING ,
16911: STR
16912: PUSH
16913: LD_VAR 0 3
16917: PUSH
16918: LD_VAR 0 2
16922: ARRAY
16923: PUSH
16924: LD_INT 2
16926: ARRAY
16927: STR
16928: PUSH
16929: LD_STRING ,
16931: STR
16932: PUSH
16933: LD_VAR 0 3
16937: PUSH
16938: LD_VAR 0 2
16942: ARRAY
16943: PUSH
16944: LD_INT 3
16946: ARRAY
16947: STR
16948: PUSH
16949: LD_STRING ,
16951: STR
16952: PUSH
16953: LD_VAR 0 3
16957: PUSH
16958: LD_VAR 0 2
16962: ARRAY
16963: PUSH
16964: LD_INT 4
16966: ARRAY
16967: STR
16968: PUSH
16969: LD_STRING )
16971: STR
16972: PPUSH
16973: CALL_OW 559
16977: GO 16887
16979: POP
16980: POP
// end ; end ;
16981: LD_VAR 0 1
16985: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
16986: LD_INT 0
16988: PPUSH
// if HexInfo ( x , y ) = warehouse then
16989: LD_VAR 0 2
16993: PPUSH
16994: LD_VAR 0 3
16998: PPUSH
16999: CALL_OW 428
17003: PUSH
17004: LD_VAR 0 1
17008: EQUAL
17009: IFFALSE 17036
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
17011: LD_ADDR_EXP 68
17015: PUSH
17016: LD_EXP 68
17020: PPUSH
17021: LD_VAR 0 1
17025: PPUSH
17026: LD_INT 0
17028: PPUSH
17029: CALL_OW 1
17033: ST_TO_ADDR
17034: GO 17087
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
17036: LD_ADDR_EXP 68
17040: PUSH
17041: LD_EXP 68
17045: PPUSH
17046: LD_VAR 0 1
17050: PPUSH
17051: LD_VAR 0 1
17055: PPUSH
17056: CALL_OW 255
17060: PUSH
17061: LD_VAR 0 1
17065: PUSH
17066: LD_VAR 0 2
17070: PUSH
17071: LD_VAR 0 3
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: PPUSH
17082: CALL_OW 1
17086: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
17087: CALL 17096 0 0
// end ;
17091: LD_VAR 0 4
17095: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
17096: LD_INT 0
17098: PPUSH
17099: PPUSH
17100: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
17101: LD_STRING resetWarehouseGatheringPoints();
17103: PPUSH
17104: CALL_OW 559
// if warehouseGatheringPoints then
17108: LD_EXP 68
17112: IFFALSE 17238
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
17114: LD_ADDR_VAR 0 3
17118: PUSH
17119: LD_EXP 68
17123: PPUSH
17124: CALL 66716 0 1
17128: ST_TO_ADDR
// for i := 1 to list do
17129: LD_ADDR_VAR 0 2
17133: PUSH
17134: DOUBLE
17135: LD_INT 1
17137: DEC
17138: ST_TO_ADDR
17139: LD_VAR 0 3
17143: PUSH
17144: FOR_TO
17145: IFFALSE 17236
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
17147: LD_STRING setWarehouseGatheringPointXY(
17149: PUSH
17150: LD_VAR 0 3
17154: PUSH
17155: LD_VAR 0 2
17159: ARRAY
17160: PUSH
17161: LD_INT 1
17163: ARRAY
17164: STR
17165: PUSH
17166: LD_STRING ,
17168: STR
17169: PUSH
17170: LD_VAR 0 3
17174: PUSH
17175: LD_VAR 0 2
17179: ARRAY
17180: PUSH
17181: LD_INT 2
17183: ARRAY
17184: STR
17185: PUSH
17186: LD_STRING ,
17188: STR
17189: PUSH
17190: LD_VAR 0 3
17194: PUSH
17195: LD_VAR 0 2
17199: ARRAY
17200: PUSH
17201: LD_INT 3
17203: ARRAY
17204: STR
17205: PUSH
17206: LD_STRING ,
17208: STR
17209: PUSH
17210: LD_VAR 0 3
17214: PUSH
17215: LD_VAR 0 2
17219: ARRAY
17220: PUSH
17221: LD_INT 4
17223: ARRAY
17224: STR
17225: PUSH
17226: LD_STRING )
17228: STR
17229: PPUSH
17230: CALL_OW 559
17234: GO 17144
17236: POP
17237: POP
// end ; end ;
17238: LD_VAR 0 1
17242: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
17243: LD_EXP 68
17247: IFFALSE 17942
17249: GO 17251
17251: DISABLE
17252: LD_INT 0
17254: PPUSH
17255: PPUSH
17256: PPUSH
17257: PPUSH
17258: PPUSH
17259: PPUSH
17260: PPUSH
17261: PPUSH
17262: PPUSH
// begin enable ;
17263: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
17264: LD_ADDR_VAR 0 3
17268: PUSH
17269: LD_EXP 68
17273: PPUSH
17274: CALL 66716 0 1
17278: ST_TO_ADDR
// if not list then
17279: LD_VAR 0 3
17283: NOT
17284: IFFALSE 17288
// exit ;
17286: GO 17942
// for i := 1 to list do
17288: LD_ADDR_VAR 0 1
17292: PUSH
17293: DOUBLE
17294: LD_INT 1
17296: DEC
17297: ST_TO_ADDR
17298: LD_VAR 0 3
17302: PUSH
17303: FOR_TO
17304: IFFALSE 17940
// begin depot := list [ i ] [ 2 ] ;
17306: LD_ADDR_VAR 0 8
17310: PUSH
17311: LD_VAR 0 3
17315: PUSH
17316: LD_VAR 0 1
17320: ARRAY
17321: PUSH
17322: LD_INT 2
17324: ARRAY
17325: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
17326: LD_ADDR_VAR 0 5
17330: PUSH
17331: LD_VAR 0 3
17335: PUSH
17336: LD_VAR 0 1
17340: ARRAY
17341: PUSH
17342: LD_INT 1
17344: ARRAY
17345: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
17346: LD_VAR 0 8
17350: PPUSH
17351: CALL_OW 301
17355: IFTRUE 17374
17357: PUSH
17358: LD_VAR 0 5
17362: PUSH
17363: LD_VAR 0 8
17367: PPUSH
17368: CALL_OW 255
17372: NONEQUAL
17373: OR
17374: IFFALSE 17403
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
17376: LD_ADDR_EXP 68
17380: PUSH
17381: LD_EXP 68
17385: PPUSH
17386: LD_VAR 0 8
17390: PPUSH
17391: LD_INT 0
17393: PPUSH
17394: CALL_OW 1
17398: ST_TO_ADDR
// exit ;
17399: POP
17400: POP
17401: GO 17942
// end ; x := list [ i ] [ 3 ] ;
17403: LD_ADDR_VAR 0 6
17407: PUSH
17408: LD_VAR 0 3
17412: PUSH
17413: LD_VAR 0 1
17417: ARRAY
17418: PUSH
17419: LD_INT 3
17421: ARRAY
17422: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
17423: LD_ADDR_VAR 0 7
17427: PUSH
17428: LD_VAR 0 3
17432: PUSH
17433: LD_VAR 0 1
17437: ARRAY
17438: PUSH
17439: LD_INT 4
17441: ARRAY
17442: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
17443: LD_ADDR_VAR 0 9
17447: PUSH
17448: LD_VAR 0 6
17452: PPUSH
17453: LD_VAR 0 7
17457: PPUSH
17458: LD_INT 16
17460: PPUSH
17461: CALL 65290 0 3
17465: ST_TO_ADDR
// if not cratesNearbyPoint then
17466: LD_VAR 0 9
17470: NOT
17471: IFFALSE 17477
// exit ;
17473: POP
17474: POP
17475: GO 17942
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
17477: LD_ADDR_VAR 0 4
17481: PUSH
17482: LD_INT 22
17484: PUSH
17485: LD_VAR 0 5
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 3
17496: PUSH
17497: LD_INT 60
17499: PUSH
17500: EMPTY
17501: LIST
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 91
17509: PUSH
17510: LD_VAR 0 8
17514: PUSH
17515: LD_INT 6
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: LIST
17522: PUSH
17523: LD_INT 2
17525: PUSH
17526: LD_INT 25
17528: PUSH
17529: LD_INT 2
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 25
17538: PUSH
17539: LD_INT 16
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: LIST
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: PPUSH
17557: CALL_OW 69
17561: PUSH
17562: LD_VAR 0 8
17566: PPUSH
17567: CALL_OW 313
17571: PPUSH
17572: LD_INT 3
17574: PUSH
17575: LD_INT 60
17577: PUSH
17578: EMPTY
17579: LIST
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PUSH
17585: LD_INT 2
17587: PUSH
17588: LD_INT 25
17590: PUSH
17591: LD_INT 2
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 25
17600: PUSH
17601: LD_INT 16
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: LIST
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: PPUSH
17617: CALL_OW 72
17621: UNION
17622: ST_TO_ADDR
// if tmp then
17623: LD_VAR 0 4
17627: IFFALSE 17707
// begin tmp := ShrinkArray ( tmp , 3 ) ;
17629: LD_ADDR_VAR 0 4
17633: PUSH
17634: LD_VAR 0 4
17638: PPUSH
17639: LD_INT 3
17641: PPUSH
17642: CALL 63097 0 2
17646: ST_TO_ADDR
// for j in tmp do
17647: LD_ADDR_VAR 0 2
17651: PUSH
17652: LD_VAR 0 4
17656: PUSH
17657: FOR_IN
17658: IFFALSE 17701
// begin if IsInUnit ( j ) then
17660: LD_VAR 0 2
17664: PPUSH
17665: CALL_OW 310
17669: IFFALSE 17680
// ComExit ( j ) ;
17671: LD_VAR 0 2
17675: PPUSH
17676: CALL 63180 0 1
// AddComCollect ( j , x , y ) ;
17680: LD_VAR 0 2
17684: PPUSH
17685: LD_VAR 0 6
17689: PPUSH
17690: LD_VAR 0 7
17694: PPUSH
17695: CALL_OW 177
// end ;
17699: GO 17657
17701: POP
17702: POP
// exit ;
17703: POP
17704: POP
17705: GO 17942
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
17707: LD_ADDR_VAR 0 4
17711: PUSH
17712: LD_INT 22
17714: PUSH
17715: LD_VAR 0 5
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PUSH
17724: LD_INT 91
17726: PUSH
17727: LD_VAR 0 8
17731: PUSH
17732: LD_INT 8
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: LIST
17739: PUSH
17740: LD_INT 2
17742: PUSH
17743: LD_INT 34
17745: PUSH
17746: LD_INT 12
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: PUSH
17753: LD_INT 34
17755: PUSH
17756: LD_INT 51
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: PUSH
17763: LD_INT 34
17765: PUSH
17766: LD_INT 32
17768: PUSH
17769: EMPTY
17770: LIST
17771: LIST
17772: PUSH
17773: LD_INT 34
17775: PUSH
17776: LD_INT 89
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: LIST
17794: PPUSH
17795: CALL_OW 69
17799: ST_TO_ADDR
// if tmp then
17800: LD_VAR 0 4
17804: IFFALSE 17938
// begin for j in tmp do
17806: LD_ADDR_VAR 0 2
17810: PUSH
17811: LD_VAR 0 4
17815: PUSH
17816: FOR_IN
17817: IFFALSE 17936
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
17819: LD_VAR 0 2
17823: PPUSH
17824: CALL_OW 262
17828: PUSH
17829: LD_INT 3
17831: EQUAL
17832: IFTRUE 17849
17834: PUSH
17835: LD_VAR 0 2
17839: PPUSH
17840: CALL_OW 261
17844: PUSH
17845: LD_INT 20
17847: GREATER
17848: OR
17849: IFFALSE 17863
17851: PUSH
17852: LD_VAR 0 2
17856: PPUSH
17857: CALL_OW 314
17861: NOT
17862: AND
17863: IFFALSE 17893
17865: PUSH
17866: LD_VAR 0 2
17870: PPUSH
17871: CALL_OW 263
17875: PUSH
17876: LD_INT 1
17878: NONEQUAL
17879: IFTRUE 17892
17881: PUSH
17882: LD_VAR 0 2
17886: PPUSH
17887: CALL_OW 311
17891: OR
17892: AND
17893: IFFALSE 17934
// begin ComCollect ( j , x , y ) ;
17895: LD_VAR 0 2
17899: PPUSH
17900: LD_VAR 0 6
17904: PPUSH
17905: LD_VAR 0 7
17909: PPUSH
17910: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
17914: LD_VAR 0 2
17918: PPUSH
17919: LD_VAR 0 8
17923: PPUSH
17924: CALL_OW 172
// exit ;
17928: POP
17929: POP
17930: POP
17931: POP
17932: GO 17942
// end ;
17934: GO 17816
17936: POP
17937: POP
// end ; end ;
17938: GO 17303
17940: POP
17941: POP
// end ; end_of_file
17942: PPOPN 9
17944: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
17945: LD_VAR 0 1
17949: PUSH
17950: LD_INT 200
17952: DOUBLE
17953: GREATEREQUAL
17954: IFFALSE 17962
17956: LD_INT 299
17958: DOUBLE
17959: LESSEQUAL
17960: IFTRUE 17964
17962: GO 17996
17964: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
17965: LD_VAR 0 1
17969: PPUSH
17970: LD_VAR 0 2
17974: PPUSH
17975: LD_VAR 0 3
17979: PPUSH
17980: LD_VAR 0 4
17984: PPUSH
17985: LD_VAR 0 5
17989: PPUSH
17990: CALL 18858 0 5
17994: GO 18073
17996: LD_INT 300
17998: DOUBLE
17999: GREATEREQUAL
18000: IFFALSE 18008
18002: LD_INT 399
18004: DOUBLE
18005: LESSEQUAL
18006: IFTRUE 18010
18008: GO 18072
18010: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
18011: LD_VAR 0 1
18015: PPUSH
18016: LD_VAR 0 2
18020: PPUSH
18021: LD_VAR 0 3
18025: PPUSH
18026: LD_VAR 0 4
18030: PPUSH
18031: LD_VAR 0 5
18035: PPUSH
18036: LD_VAR 0 6
18040: PPUSH
18041: LD_VAR 0 7
18045: PPUSH
18046: LD_VAR 0 8
18050: PPUSH
18051: LD_VAR 0 9
18055: PPUSH
18056: LD_VAR 0 10
18060: PPUSH
18061: LD_VAR 0 11
18065: PPUSH
18066: CALL 14498 0 11
18070: GO 18073
18072: POP
// end ;
18073: PPOPN 11
18075: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
18076: LD_VAR 0 1
18080: PPUSH
18081: LD_VAR 0 2
18085: PPUSH
18086: LD_VAR 0 3
18090: PPUSH
18091: LD_VAR 0 4
18095: PPUSH
18096: LD_VAR 0 5
18100: PPUSH
18101: CALL 18158 0 5
// end ; end_of_file
18105: PPOPN 5
18107: END
// export function SOS_UnitDestroyed ( un ) ; begin
18108: LD_INT 0
18110: PPUSH
// ComRadiation ( un ) ;
18111: LD_VAR 0 1
18115: PPUSH
18116: CALL 19278 0 1
// end ;
18120: LD_VAR 0 2
18124: RET
// export function SOS_UnitKamikazed ( un ) ; begin
18125: LD_INT 0
18127: PPUSH
// ComRadiation ( un ) ;
18128: LD_VAR 0 1
18132: PPUSH
18133: CALL 19278 0 1
// end ;
18137: LD_VAR 0 2
18141: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
18142: LD_INT 0
18144: PPUSH
// end ;
18145: LD_VAR 0 4
18149: RET
// export function SOS_Command ( cmd ) ; begin
18150: LD_INT 0
18152: PPUSH
// end ;
18153: LD_VAR 0 2
18157: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
18158: LD_INT 0
18160: PPUSH
// end ;
18161: LD_VAR 0 6
18165: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
18166: LD_INT 0
18168: PPUSH
18169: PPUSH
18170: PPUSH
18171: PPUSH
18172: PPUSH
// if not vehicle or not factory then
18173: LD_VAR 0 1
18177: NOT
18178: IFTRUE 18187
18180: PUSH
18181: LD_VAR 0 2
18185: NOT
18186: OR
18187: IFFALSE 18191
// exit ;
18189: GO 18853
// weapon := GetWeapon ( vehicle ) ;
18191: LD_ADDR_VAR 0 7
18195: PUSH
18196: LD_VAR 0 1
18200: PPUSH
18201: CALL_OW 264
18205: ST_TO_ADDR
// if weapon = ar_miner then
18206: LD_VAR 0 7
18210: PUSH
18211: LD_INT 81
18213: EQUAL
18214: IFFALSE 18271
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
18216: LD_ADDR_EXP 77
18220: PUSH
18221: LD_EXP 77
18225: PPUSH
18226: LD_EXP 77
18230: PUSH
18231: LD_INT 1
18233: PLUS
18234: PPUSH
18235: LD_VAR 0 1
18239: PPUSH
18240: CALL_OW 1
18244: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
18245: LD_ADDR_EXP 78
18249: PUSH
18250: LD_EXP 78
18254: PPUSH
18255: LD_EXP 78
18259: PUSH
18260: LD_INT 1
18262: PLUS
18263: PPUSH
18264: EMPTY
18265: PPUSH
18266: CALL_OW 1
18270: ST_TO_ADDR
// end ; if not factoryWaypoints then
18271: LD_EXP 66
18275: NOT
18276: IFFALSE 18280
// exit ;
18278: GO 18853
// for i := 1 to Count ( factoryWaypoints ) do
18280: LD_ADDR_VAR 0 4
18284: PUSH
18285: DOUBLE
18286: LD_INT 1
18288: DEC
18289: ST_TO_ADDR
18290: LD_EXP 66
18294: PPUSH
18295: CALL 26806 0 1
18299: PUSH
18300: FOR_TO
18301: IFFALSE 18851
// if factoryWaypoints [ i ] [ 2 ] = factory then
18303: LD_EXP 66
18307: PUSH
18308: LD_VAR 0 4
18312: ARRAY
18313: PUSH
18314: LD_INT 2
18316: ARRAY
18317: PUSH
18318: LD_VAR 0 2
18322: EQUAL
18323: IFFALSE 18849
// begin if GetControl ( vehicle ) = control_manual then
18325: LD_VAR 0 1
18329: PPUSH
18330: CALL_OW 263
18334: PUSH
18335: LD_INT 1
18337: EQUAL
18338: IFFALSE 18702
// begin driver := IsDrivenBy ( vehicle ) ;
18340: LD_ADDR_VAR 0 5
18344: PUSH
18345: LD_VAR 0 1
18349: PPUSH
18350: CALL_OW 311
18354: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
18355: LD_VAR 0 5
18359: PUSH
18360: LD_EXP 67
18364: IN
18365: IFTRUE 18379
18367: PUSH
18368: LD_VAR 0 1
18372: PUSH
18373: LD_EXP 67
18377: IN
18378: OR
18379: IFFALSE 18385
// exit ;
18381: POP
18382: POP
18383: GO 18853
// if not HasTask ( driver ) then
18385: LD_VAR 0 5
18389: PPUSH
18390: CALL_OW 314
18394: NOT
18395: IFFALSE 18700
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
18397: LD_ADDR_EXP 67
18401: PUSH
18402: LD_EXP 67
18406: PPUSH
18407: LD_VAR 0 5
18411: PPUSH
18412: CALL 62782 0 2
18416: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
18417: LD_ADDR_EXP 67
18421: PUSH
18422: LD_EXP 67
18426: PPUSH
18427: LD_VAR 0 1
18431: PPUSH
18432: CALL 62782 0 2
18436: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
18437: LD_ADDR_VAR 0 6
18441: PUSH
18442: LD_EXP 66
18446: PUSH
18447: LD_VAR 0 4
18451: ARRAY
18452: PUSH
18453: LD_INT 3
18455: ARRAY
18456: PPUSH
18457: LD_EXP 66
18461: PUSH
18462: LD_VAR 0 4
18466: ARRAY
18467: PUSH
18468: LD_INT 4
18470: ARRAY
18471: PPUSH
18472: CALL_OW 428
18476: ST_TO_ADDR
// if hex then
18477: LD_VAR 0 6
18481: IFFALSE 18499
// ComMoveUnit ( driver , hex ) else
18483: LD_VAR 0 5
18487: PPUSH
18488: LD_VAR 0 6
18492: PPUSH
18493: CALL_OW 112
18497: GO 18583
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
18499: LD_VAR 0 1
18503: PPUSH
18504: LD_EXP 66
18508: PUSH
18509: LD_VAR 0 4
18513: ARRAY
18514: PUSH
18515: LD_INT 3
18517: ARRAY
18518: PPUSH
18519: LD_EXP 66
18523: PUSH
18524: LD_VAR 0 4
18528: ARRAY
18529: PUSH
18530: LD_INT 4
18532: ARRAY
18533: PPUSH
18534: CALL_OW 297
18538: PUSH
18539: LD_INT 0
18541: GREATER
18542: IFFALSE 18583
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
18544: LD_VAR 0 5
18548: PPUSH
18549: LD_EXP 66
18553: PUSH
18554: LD_VAR 0 4
18558: ARRAY
18559: PUSH
18560: LD_INT 3
18562: ARRAY
18563: PPUSH
18564: LD_EXP 66
18568: PUSH
18569: LD_VAR 0 4
18573: ARRAY
18574: PUSH
18575: LD_INT 4
18577: ARRAY
18578: PPUSH
18579: CALL_OW 111
// AddComExitVehicle ( driver ) ;
18583: LD_VAR 0 5
18587: PPUSH
18588: CALL_OW 181
// if Multiplayer then
18592: LD_OWVAR 4
18596: IFFALSE 18645
// begin repeat wait ( 10 ) ;
18598: LD_INT 10
18600: PPUSH
18601: CALL_OW 67
// until not IsInUnit ( driver ) ;
18605: LD_VAR 0 5
18609: PPUSH
18610: CALL_OW 310
18614: NOT
18615: IFFALSE 18598
// if not HasTask ( driver ) then
18617: LD_VAR 0 5
18621: PPUSH
18622: CALL_OW 314
18626: NOT
18627: IFFALSE 18643
// ComEnterUnit ( driver , factory ) ;
18629: LD_VAR 0 5
18633: PPUSH
18634: LD_VAR 0 2
18638: PPUSH
18639: CALL_OW 120
// end else
18643: GO 18659
// AddComEnterUnit ( driver , factory ) ;
18645: LD_VAR 0 5
18649: PPUSH
18650: LD_VAR 0 2
18654: PPUSH
18655: CALL_OW 180
// wait ( 0 0$1 ) ;
18659: LD_INT 35
18661: PPUSH
18662: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
18666: LD_ADDR_EXP 67
18670: PUSH
18671: LD_EXP 67
18675: PUSH
18676: LD_VAR 0 5
18680: DIFF
18681: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
18682: LD_ADDR_EXP 67
18686: PUSH
18687: LD_EXP 67
18691: PUSH
18692: LD_VAR 0 1
18696: DIFF
18697: ST_TO_ADDR
// break ;
18698: GO 18851
// end ; end else
18700: GO 18849
// if GetControl ( vehicle ) = control_remote then
18702: LD_VAR 0 1
18706: PPUSH
18707: CALL_OW 263
18711: PUSH
18712: LD_INT 2
18714: EQUAL
18715: IFFALSE 18801
// begin wait ( 0 0$2 ) ;
18717: LD_INT 70
18719: PPUSH
18720: CALL_OW 67
// repeat wait ( 10 ) ;
18724: LD_INT 10
18726: PPUSH
18727: CALL_OW 67
// Connect ( vehicle ) ;
18731: LD_VAR 0 1
18735: PPUSH
18736: CALL 33084 0 1
// until IsControledBy ( vehicle ) ;
18740: LD_VAR 0 1
18744: PPUSH
18745: CALL_OW 312
18749: IFFALSE 18724
// wait ( 10 ) ;
18751: LD_INT 10
18753: PPUSH
18754: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
18758: LD_VAR 0 1
18762: PPUSH
18763: LD_EXP 66
18767: PUSH
18768: LD_VAR 0 4
18772: ARRAY
18773: PUSH
18774: LD_INT 3
18776: ARRAY
18777: PPUSH
18778: LD_EXP 66
18782: PUSH
18783: LD_VAR 0 4
18787: ARRAY
18788: PUSH
18789: LD_INT 4
18791: ARRAY
18792: PPUSH
18793: CALL_OW 111
// break ;
18797: GO 18851
// end else
18799: GO 18849
// begin wait ( 0 0$3 ) ;
18801: LD_INT 105
18803: PPUSH
18804: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
18808: LD_VAR 0 1
18812: PPUSH
18813: LD_EXP 66
18817: PUSH
18818: LD_VAR 0 4
18822: ARRAY
18823: PUSH
18824: LD_INT 3
18826: ARRAY
18827: PPUSH
18828: LD_EXP 66
18832: PUSH
18833: LD_VAR 0 4
18837: ARRAY
18838: PUSH
18839: LD_INT 4
18841: ARRAY
18842: PPUSH
18843: CALL_OW 111
// break ;
18847: GO 18851
// end ; end ;
18849: GO 18300
18851: POP
18852: POP
// end ;
18853: LD_VAR 0 3
18857: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18858: LD_INT 0
18860: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18861: LD_VAR 0 1
18865: PUSH
18866: LD_INT 250
18868: EQUAL
18869: IFFALSE 18886
18871: PUSH
18872: LD_VAR 0 2
18876: PPUSH
18877: CALL_OW 264
18881: PUSH
18882: LD_INT 81
18884: EQUAL
18885: AND
18886: IFFALSE 18907
// MinerPlaceMine ( unit , x , y ) ;
18888: LD_VAR 0 2
18892: PPUSH
18893: LD_VAR 0 4
18897: PPUSH
18898: LD_VAR 0 5
18902: PPUSH
18903: CALL 22253 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18907: LD_VAR 0 1
18911: PUSH
18912: LD_INT 251
18914: EQUAL
18915: IFFALSE 18932
18917: PUSH
18918: LD_VAR 0 2
18922: PPUSH
18923: CALL_OW 264
18927: PUSH
18928: LD_INT 81
18930: EQUAL
18931: AND
18932: IFFALSE 18953
// MinerDetonateMine ( unit , x , y ) ;
18934: LD_VAR 0 2
18938: PPUSH
18939: LD_VAR 0 4
18943: PPUSH
18944: LD_VAR 0 5
18948: PPUSH
18949: CALL 22660 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18953: LD_VAR 0 1
18957: PUSH
18958: LD_INT 252
18960: EQUAL
18961: IFFALSE 18978
18963: PUSH
18964: LD_VAR 0 2
18968: PPUSH
18969: CALL_OW 264
18973: PUSH
18974: LD_INT 81
18976: EQUAL
18977: AND
18978: IFFALSE 18999
// MinerCreateMinefield ( unit , x , y ) ;
18980: LD_VAR 0 2
18984: PPUSH
18985: LD_VAR 0 4
18989: PPUSH
18990: LD_VAR 0 5
18994: PPUSH
18995: CALL 22892 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18999: LD_VAR 0 1
19003: PUSH
19004: LD_INT 253
19006: EQUAL
19007: IFFALSE 19024
19009: PUSH
19010: LD_VAR 0 2
19014: PPUSH
19015: CALL_OW 257
19019: PUSH
19020: LD_INT 5
19022: EQUAL
19023: AND
19024: IFFALSE 19045
// ComBinocular ( unit , x , y ) ;
19026: LD_VAR 0 2
19030: PPUSH
19031: LD_VAR 0 4
19035: PPUSH
19036: LD_VAR 0 5
19040: PPUSH
19041: CALL 23267 0 3
// if selectedUnit then
19045: LD_VAR 0 3
19049: IFFALSE 19109
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
19051: LD_VAR 0 1
19055: PUSH
19056: LD_INT 254
19058: EQUAL
19059: IFFALSE 19076
19061: PUSH
19062: LD_VAR 0 2
19066: PPUSH
19067: CALL_OW 264
19071: PUSH
19072: LD_INT 99
19074: EQUAL
19075: AND
19076: IFFALSE 19093
19078: PUSH
19079: LD_VAR 0 3
19083: PPUSH
19084: CALL_OW 263
19088: PUSH
19089: LD_INT 3
19091: EQUAL
19092: AND
19093: IFFALSE 19109
// HackDestroyVehicle ( unit , selectedUnit ) ;
19095: LD_VAR 0 2
19099: PPUSH
19100: LD_VAR 0 3
19104: PPUSH
19105: CALL 21443 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19109: LD_VAR 0 1
19113: PUSH
19114: LD_INT 255
19116: EQUAL
19117: IFFALSE 19141
19119: PUSH
19120: LD_VAR 0 2
19124: PPUSH
19125: CALL_OW 264
19129: PUSH
19130: LD_INT 14
19132: PUSH
19133: LD_INT 53
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: IN
19140: AND
19141: IFFALSE 19159
19143: PUSH
19144: LD_VAR 0 4
19148: PPUSH
19149: LD_VAR 0 5
19153: PPUSH
19154: CALL_OW 488
19158: AND
19159: IFFALSE 19183
// CutTreeXYR ( unit , x , y , 12 ) ;
19161: LD_VAR 0 2
19165: PPUSH
19166: LD_VAR 0 4
19170: PPUSH
19171: LD_VAR 0 5
19175: PPUSH
19176: LD_INT 12
19178: PPUSH
19179: CALL 19374 0 4
// if cmd = 256 then
19183: LD_VAR 0 1
19187: PUSH
19188: LD_INT 256
19190: EQUAL
19191: IFFALSE 19212
// SetFactoryWaypoint ( unit , x , y ) ;
19193: LD_VAR 0 2
19197: PPUSH
19198: LD_VAR 0 4
19202: PPUSH
19203: LD_VAR 0 5
19207: PPUSH
19208: CALL 16490 0 3
// if cmd = 257 then
19212: LD_VAR 0 1
19216: PUSH
19217: LD_INT 257
19219: EQUAL
19220: IFFALSE 19241
// SetWarehouseGatheringPoint ( unit , x , y ) ;
19222: LD_VAR 0 2
19226: PPUSH
19227: LD_VAR 0 4
19231: PPUSH
19232: LD_VAR 0 5
19236: PPUSH
19237: CALL 16986 0 3
// if cmd = 258 then
19241: LD_VAR 0 1
19245: PUSH
19246: LD_INT 258
19248: EQUAL
19249: IFFALSE 19273
// BurnTreeXYR ( unit , x , y , 8 ) ;
19251: LD_VAR 0 2
19255: PPUSH
19256: LD_VAR 0 4
19260: PPUSH
19261: LD_VAR 0 5
19265: PPUSH
19266: LD_INT 8
19268: PPUSH
19269: CALL 19796 0 4
// end ;
19273: LD_VAR 0 6
19277: RET
// export function ComRadiation ( un ) ; var eff ; begin
19278: LD_INT 0
19280: PPUSH
19281: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
19282: LD_VAR 0 1
19286: PPUSH
19287: CALL_OW 264
19291: PUSH
19292: LD_INT 91
19294: NONEQUAL
19295: IFFALSE 19299
// exit ;
19297: GO 19369
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19299: LD_INT 68
19301: PPUSH
19302: LD_VAR 0 1
19306: PPUSH
19307: CALL_OW 255
19311: PPUSH
19312: CALL_OW 321
19316: PUSH
19317: LD_INT 2
19319: EQUAL
19320: IFFALSE 19332
// eff := 50 else
19322: LD_ADDR_VAR 0 3
19326: PUSH
19327: LD_INT 50
19329: ST_TO_ADDR
19330: GO 19340
// eff := 25 ;
19332: LD_ADDR_VAR 0 3
19336: PUSH
19337: LD_INT 25
19339: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19340: LD_VAR 0 1
19344: PPUSH
19345: CALL_OW 250
19349: PPUSH
19350: LD_VAR 0 1
19354: PPUSH
19355: CALL_OW 251
19359: PPUSH
19360: LD_VAR 0 3
19364: PPUSH
19365: CALL_OW 495
// end ;
19369: LD_VAR 0 2
19373: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
19374: LD_INT 0
19376: PPUSH
19377: PPUSH
19378: PPUSH
19379: PPUSH
19380: PPUSH
19381: PPUSH
19382: PPUSH
19383: PPUSH
19384: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
19385: LD_VAR 0 1
19389: PPUSH
19390: CALL_OW 302
19394: NOT
19395: IFTRUE 19414
19397: PUSH
19398: LD_VAR 0 2
19402: PPUSH
19403: LD_VAR 0 3
19407: PPUSH
19408: CALL_OW 488
19412: NOT
19413: OR
19414: IFTRUE 19423
19416: PUSH
19417: LD_VAR 0 4
19421: NOT
19422: OR
19423: IFFALSE 19427
// exit ;
19425: GO 19791
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
19427: LD_VAR 0 1
19431: PPUSH
19432: CALL_OW 437
19436: PPUSH
19437: CALL 26806 0 1
19441: PUSH
19442: LD_INT 10
19444: GREATER
19445: IFFALSE 19449
// exit ;
19447: GO 19791
// list := [ ] ;
19449: LD_ADDR_VAR 0 13
19453: PUSH
19454: EMPTY
19455: ST_TO_ADDR
// if x - r < 0 then
19456: LD_VAR 0 2
19460: PUSH
19461: LD_VAR 0 4
19465: MINUS
19466: PUSH
19467: LD_INT 0
19469: LESS
19470: IFFALSE 19482
// min_x := 0 else
19472: LD_ADDR_VAR 0 7
19476: PUSH
19477: LD_INT 0
19479: ST_TO_ADDR
19480: GO 19498
// min_x := x - r ;
19482: LD_ADDR_VAR 0 7
19486: PUSH
19487: LD_VAR 0 2
19491: PUSH
19492: LD_VAR 0 4
19496: MINUS
19497: ST_TO_ADDR
// if y - r < 0 then
19498: LD_VAR 0 3
19502: PUSH
19503: LD_VAR 0 4
19507: MINUS
19508: PUSH
19509: LD_INT 0
19511: LESS
19512: IFFALSE 19524
// min_y := 0 else
19514: LD_ADDR_VAR 0 8
19518: PUSH
19519: LD_INT 0
19521: ST_TO_ADDR
19522: GO 19540
// min_y := y - r ;
19524: LD_ADDR_VAR 0 8
19528: PUSH
19529: LD_VAR 0 3
19533: PUSH
19534: LD_VAR 0 4
19538: MINUS
19539: ST_TO_ADDR
// max_x := x + r ;
19540: LD_ADDR_VAR 0 9
19544: PUSH
19545: LD_VAR 0 2
19549: PUSH
19550: LD_VAR 0 4
19554: PLUS
19555: ST_TO_ADDR
// max_y := y + r ;
19556: LD_ADDR_VAR 0 10
19560: PUSH
19561: LD_VAR 0 3
19565: PUSH
19566: LD_VAR 0 4
19570: PLUS
19571: ST_TO_ADDR
// for _x = min_x to max_x do
19572: LD_ADDR_VAR 0 11
19576: PUSH
19577: DOUBLE
19578: LD_VAR 0 7
19582: DEC
19583: ST_TO_ADDR
19584: LD_VAR 0 9
19588: PUSH
19589: FOR_TO
19590: IFFALSE 19709
// for _y = min_y to max_y do
19592: LD_ADDR_VAR 0 12
19596: PUSH
19597: DOUBLE
19598: LD_VAR 0 8
19602: DEC
19603: ST_TO_ADDR
19604: LD_VAR 0 10
19608: PUSH
19609: FOR_TO
19610: IFFALSE 19705
// begin if not ValidHex ( _x , _y ) then
19612: LD_VAR 0 11
19616: PPUSH
19617: LD_VAR 0 12
19621: PPUSH
19622: CALL_OW 488
19626: NOT
19627: IFFALSE 19631
// continue ;
19629: GO 19609
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19631: LD_VAR 0 11
19635: PPUSH
19636: LD_VAR 0 12
19640: PPUSH
19641: CALL_OW 351
19645: IFFALSE 19663
19647: PUSH
19648: LD_VAR 0 11
19652: PPUSH
19653: LD_VAR 0 12
19657: PPUSH
19658: CALL_OW 554
19662: AND
19663: IFFALSE 19703
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19665: LD_ADDR_VAR 0 13
19669: PUSH
19670: LD_VAR 0 13
19674: PPUSH
19675: LD_VAR 0 13
19679: PUSH
19680: LD_INT 1
19682: PLUS
19683: PPUSH
19684: LD_VAR 0 11
19688: PUSH
19689: LD_VAR 0 12
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PPUSH
19698: CALL_OW 2
19702: ST_TO_ADDR
// end ;
19703: GO 19609
19705: POP
19706: POP
19707: GO 19589
19709: POP
19710: POP
// if not list then
19711: LD_VAR 0 13
19715: NOT
19716: IFFALSE 19720
// exit ;
19718: GO 19791
// for i in list do
19720: LD_ADDR_VAR 0 6
19724: PUSH
19725: LD_VAR 0 13
19729: PUSH
19730: FOR_IN
19731: IFFALSE 19789
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
19733: LD_VAR 0 1
19737: PPUSH
19738: LD_STRING M
19740: PUSH
19741: LD_VAR 0 6
19745: PUSH
19746: LD_INT 1
19748: ARRAY
19749: PUSH
19750: LD_VAR 0 6
19754: PUSH
19755: LD_INT 2
19757: ARRAY
19758: PUSH
19759: LD_INT 0
19761: PUSH
19762: LD_INT 0
19764: PUSH
19765: LD_INT 0
19767: PUSH
19768: LD_INT 0
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: PUSH
19780: EMPTY
19781: LIST
19782: PPUSH
19783: CALL_OW 447
19787: GO 19730
19789: POP
19790: POP
// end ;
19791: LD_VAR 0 5
19795: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
19796: LD_INT 0
19798: PPUSH
19799: PPUSH
19800: PPUSH
19801: PPUSH
19802: PPUSH
19803: PPUSH
19804: PPUSH
19805: PPUSH
19806: PPUSH
19807: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
19808: LD_VAR 0 1
19812: PPUSH
19813: CALL_OW 302
19817: NOT
19818: IFTRUE 19837
19820: PUSH
19821: LD_VAR 0 2
19825: PPUSH
19826: LD_VAR 0 3
19830: PPUSH
19831: CALL_OW 488
19835: NOT
19836: OR
19837: IFTRUE 19846
19839: PUSH
19840: LD_VAR 0 4
19844: NOT
19845: OR
19846: IFFALSE 19850
// exit ;
19848: GO 20389
// if Count ( GetTaskList ( flame ) ) > 10 then
19850: LD_VAR 0 1
19854: PPUSH
19855: CALL_OW 437
19859: PPUSH
19860: CALL 26806 0 1
19864: PUSH
19865: LD_INT 10
19867: GREATER
19868: IFFALSE 19872
// exit ;
19870: GO 20389
// list := [ ] ;
19872: LD_ADDR_VAR 0 13
19876: PUSH
19877: EMPTY
19878: ST_TO_ADDR
// if x - r < 0 then
19879: LD_VAR 0 2
19883: PUSH
19884: LD_VAR 0 4
19888: MINUS
19889: PUSH
19890: LD_INT 0
19892: LESS
19893: IFFALSE 19905
// min_x := 0 else
19895: LD_ADDR_VAR 0 7
19899: PUSH
19900: LD_INT 0
19902: ST_TO_ADDR
19903: GO 19921
// min_x := x - r ;
19905: LD_ADDR_VAR 0 7
19909: PUSH
19910: LD_VAR 0 2
19914: PUSH
19915: LD_VAR 0 4
19919: MINUS
19920: ST_TO_ADDR
// if y - r < 0 then
19921: LD_VAR 0 3
19925: PUSH
19926: LD_VAR 0 4
19930: MINUS
19931: PUSH
19932: LD_INT 0
19934: LESS
19935: IFFALSE 19947
// min_y := 0 else
19937: LD_ADDR_VAR 0 8
19941: PUSH
19942: LD_INT 0
19944: ST_TO_ADDR
19945: GO 19963
// min_y := y - r ;
19947: LD_ADDR_VAR 0 8
19951: PUSH
19952: LD_VAR 0 3
19956: PUSH
19957: LD_VAR 0 4
19961: MINUS
19962: ST_TO_ADDR
// max_x := x + r ;
19963: LD_ADDR_VAR 0 9
19967: PUSH
19968: LD_VAR 0 2
19972: PUSH
19973: LD_VAR 0 4
19977: PLUS
19978: ST_TO_ADDR
// max_y := y + r ;
19979: LD_ADDR_VAR 0 10
19983: PUSH
19984: LD_VAR 0 3
19988: PUSH
19989: LD_VAR 0 4
19993: PLUS
19994: ST_TO_ADDR
// for _x = min_x to max_x do
19995: LD_ADDR_VAR 0 11
19999: PUSH
20000: DOUBLE
20001: LD_VAR 0 7
20005: DEC
20006: ST_TO_ADDR
20007: LD_VAR 0 9
20011: PUSH
20012: FOR_TO
20013: IFFALSE 20132
// for _y = min_y to max_y do
20015: LD_ADDR_VAR 0 12
20019: PUSH
20020: DOUBLE
20021: LD_VAR 0 8
20025: DEC
20026: ST_TO_ADDR
20027: LD_VAR 0 10
20031: PUSH
20032: FOR_TO
20033: IFFALSE 20128
// begin if not ValidHex ( _x , _y ) then
20035: LD_VAR 0 11
20039: PPUSH
20040: LD_VAR 0 12
20044: PPUSH
20045: CALL_OW 488
20049: NOT
20050: IFFALSE 20054
// continue ;
20052: GO 20032
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20054: LD_VAR 0 11
20058: PPUSH
20059: LD_VAR 0 12
20063: PPUSH
20064: CALL_OW 351
20068: IFFALSE 20086
20070: PUSH
20071: LD_VAR 0 11
20075: PPUSH
20076: LD_VAR 0 12
20080: PPUSH
20081: CALL_OW 554
20085: AND
20086: IFFALSE 20126
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20088: LD_ADDR_VAR 0 13
20092: PUSH
20093: LD_VAR 0 13
20097: PPUSH
20098: LD_VAR 0 13
20102: PUSH
20103: LD_INT 1
20105: PLUS
20106: PPUSH
20107: LD_VAR 0 11
20111: PUSH
20112: LD_VAR 0 12
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PPUSH
20121: CALL_OW 2
20125: ST_TO_ADDR
// end ;
20126: GO 20032
20128: POP
20129: POP
20130: GO 20012
20132: POP
20133: POP
// if not list then
20134: LD_VAR 0 13
20138: NOT
20139: IFFALSE 20143
// exit ;
20141: GO 20389
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
20143: LD_ADDR_VAR 0 13
20147: PUSH
20148: LD_VAR 0 1
20152: PPUSH
20153: LD_VAR 0 13
20157: PPUSH
20158: LD_INT 1
20160: PPUSH
20161: LD_INT 1
20163: PPUSH
20164: CALL 30212 0 4
20168: ST_TO_ADDR
// ComStop ( flame ) ;
20169: LD_VAR 0 1
20173: PPUSH
20174: CALL_OW 141
// for i in list do
20178: LD_ADDR_VAR 0 6
20182: PUSH
20183: LD_VAR 0 13
20187: PUSH
20188: FOR_IN
20189: IFFALSE 20220
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
20191: LD_VAR 0 1
20195: PPUSH
20196: LD_VAR 0 6
20200: PUSH
20201: LD_INT 1
20203: ARRAY
20204: PPUSH
20205: LD_VAR 0 6
20209: PUSH
20210: LD_INT 2
20212: ARRAY
20213: PPUSH
20214: CALL_OW 176
20218: GO 20188
20220: POP
20221: POP
// repeat wait ( 0 0$1 ) ;
20222: LD_INT 35
20224: PPUSH
20225: CALL_OW 67
// task := GetTaskList ( flame ) ;
20229: LD_ADDR_VAR 0 14
20233: PUSH
20234: LD_VAR 0 1
20238: PPUSH
20239: CALL_OW 437
20243: ST_TO_ADDR
// if not task then
20244: LD_VAR 0 14
20248: NOT
20249: IFFALSE 20253
// exit ;
20251: GO 20389
// if task [ 1 ] [ 1 ] <> | then
20253: LD_VAR 0 14
20257: PUSH
20258: LD_INT 1
20260: ARRAY
20261: PUSH
20262: LD_INT 1
20264: ARRAY
20265: PUSH
20266: LD_STRING |
20268: NONEQUAL
20269: IFFALSE 20273
// exit ;
20271: GO 20389
// _x := task [ 1 ] [ 2 ] ;
20273: LD_ADDR_VAR 0 11
20277: PUSH
20278: LD_VAR 0 14
20282: PUSH
20283: LD_INT 1
20285: ARRAY
20286: PUSH
20287: LD_INT 2
20289: ARRAY
20290: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
20291: LD_ADDR_VAR 0 12
20295: PUSH
20296: LD_VAR 0 14
20300: PUSH
20301: LD_INT 1
20303: ARRAY
20304: PUSH
20305: LD_INT 3
20307: ARRAY
20308: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
20309: LD_VAR 0 11
20313: PPUSH
20314: LD_VAR 0 12
20318: PPUSH
20319: CALL_OW 351
20323: NOT
20324: IFTRUE 20343
20326: PUSH
20327: LD_VAR 0 11
20331: PPUSH
20332: LD_VAR 0 12
20336: PPUSH
20337: CALL_OW 554
20341: NOT
20342: OR
20343: IFFALSE 20377
// begin task := Delete ( task , 1 ) ;
20345: LD_ADDR_VAR 0 14
20349: PUSH
20350: LD_VAR 0 14
20354: PPUSH
20355: LD_INT 1
20357: PPUSH
20358: CALL_OW 3
20362: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
20363: LD_VAR 0 1
20367: PPUSH
20368: LD_VAR 0 14
20372: PPUSH
20373: CALL_OW 446
// end ; until not HasTask ( flame ) ;
20377: LD_VAR 0 1
20381: PPUSH
20382: CALL_OW 314
20386: NOT
20387: IFFALSE 20222
// end ;
20389: LD_VAR 0 5
20393: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
20394: LD_EXP 70
20398: NOT
20399: IFFALSE 20449
20401: GO 20403
20403: DISABLE
// begin initHack := true ;
20404: LD_ADDR_EXP 70
20408: PUSH
20409: LD_INT 1
20411: ST_TO_ADDR
// hackTanks := [ ] ;
20412: LD_ADDR_EXP 71
20416: PUSH
20417: EMPTY
20418: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
20419: LD_ADDR_EXP 72
20423: PUSH
20424: EMPTY
20425: ST_TO_ADDR
// hackLimit := 3 ;
20426: LD_ADDR_EXP 73
20430: PUSH
20431: LD_INT 3
20433: ST_TO_ADDR
// hackDist := 12 ;
20434: LD_ADDR_EXP 74
20438: PUSH
20439: LD_INT 12
20441: ST_TO_ADDR
// hackCounter := [ ] ;
20442: LD_ADDR_EXP 75
20446: PUSH
20447: EMPTY
20448: ST_TO_ADDR
// end ;
20449: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
20450: LD_EXP 70
20454: IFFALSE 20472
20456: PUSH
20457: LD_INT 34
20459: PUSH
20460: LD_INT 99
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: PPUSH
20467: CALL_OW 69
20471: AND
20472: IFFALSE 20725
20474: GO 20476
20476: DISABLE
20477: LD_INT 0
20479: PPUSH
20480: PPUSH
// begin enable ;
20481: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
20482: LD_ADDR_VAR 0 1
20486: PUSH
20487: LD_INT 34
20489: PUSH
20490: LD_INT 99
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PPUSH
20497: CALL_OW 69
20501: PUSH
20502: FOR_IN
20503: IFFALSE 20723
// begin if not i in hackTanks then
20505: LD_VAR 0 1
20509: PUSH
20510: LD_EXP 71
20514: IN
20515: NOT
20516: IFFALSE 20599
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
20518: LD_ADDR_EXP 71
20522: PUSH
20523: LD_EXP 71
20527: PPUSH
20528: LD_EXP 71
20532: PUSH
20533: LD_INT 1
20535: PLUS
20536: PPUSH
20537: LD_VAR 0 1
20541: PPUSH
20542: CALL_OW 1
20546: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
20547: LD_ADDR_EXP 72
20551: PUSH
20552: LD_EXP 72
20556: PPUSH
20557: LD_EXP 72
20561: PUSH
20562: LD_INT 1
20564: PLUS
20565: PPUSH
20566: EMPTY
20567: PPUSH
20568: CALL_OW 1
20572: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
20573: LD_ADDR_EXP 75
20577: PUSH
20578: LD_EXP 75
20582: PPUSH
20583: LD_EXP 75
20587: PUSH
20588: LD_INT 1
20590: PLUS
20591: PPUSH
20592: EMPTY
20593: PPUSH
20594: CALL_OW 1
20598: ST_TO_ADDR
// end ; if not IsOk ( i ) then
20599: LD_VAR 0 1
20603: PPUSH
20604: CALL_OW 302
20608: NOT
20609: IFFALSE 20622
// begin HackUnlinkAll ( i ) ;
20611: LD_VAR 0 1
20615: PPUSH
20616: CALL 20728 0 1
// continue ;
20620: GO 20502
// end ; HackCheckCapturedStatus ( i ) ;
20622: LD_VAR 0 1
20626: PPUSH
20627: CALL 21173 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
20631: LD_ADDR_VAR 0 2
20635: PUSH
20636: LD_INT 81
20638: PUSH
20639: LD_VAR 0 1
20643: PPUSH
20644: CALL_OW 255
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 33
20655: PUSH
20656: LD_INT 3
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PUSH
20663: LD_INT 91
20665: PUSH
20666: LD_VAR 0 1
20670: PUSH
20671: LD_EXP 74
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 50
20683: PUSH
20684: EMPTY
20685: LIST
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: PPUSH
20693: CALL_OW 69
20697: ST_TO_ADDR
// if not tmp then
20698: LD_VAR 0 2
20702: NOT
20703: IFFALSE 20707
// continue ;
20705: GO 20502
// HackLink ( i , tmp ) ;
20707: LD_VAR 0 1
20711: PPUSH
20712: LD_VAR 0 2
20716: PPUSH
20717: CALL 20864 0 2
// end ;
20721: GO 20502
20723: POP
20724: POP
// end ;
20725: PPOPN 2
20727: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
20728: LD_INT 0
20730: PPUSH
20731: PPUSH
20732: PPUSH
// if not hack in hackTanks then
20733: LD_VAR 0 1
20737: PUSH
20738: LD_EXP 71
20742: IN
20743: NOT
20744: IFFALSE 20748
// exit ;
20746: GO 20859
// index := GetElementIndex ( hackTanks , hack ) ;
20748: LD_ADDR_VAR 0 4
20752: PUSH
20753: LD_EXP 71
20757: PPUSH
20758: LD_VAR 0 1
20762: PPUSH
20763: CALL 29507 0 2
20767: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
20768: LD_EXP 72
20772: PUSH
20773: LD_VAR 0 4
20777: ARRAY
20778: IFFALSE 20859
// begin for i in hackTanksCaptured [ index ] do
20780: LD_ADDR_VAR 0 3
20784: PUSH
20785: LD_EXP 72
20789: PUSH
20790: LD_VAR 0 4
20794: ARRAY
20795: PUSH
20796: FOR_IN
20797: IFFALSE 20823
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
20799: LD_VAR 0 3
20803: PUSH
20804: LD_INT 1
20806: ARRAY
20807: PPUSH
20808: LD_VAR 0 3
20812: PUSH
20813: LD_INT 2
20815: ARRAY
20816: PPUSH
20817: CALL_OW 235
20821: GO 20796
20823: POP
20824: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20825: LD_ADDR_EXP 72
20829: PUSH
20830: LD_EXP 72
20834: PPUSH
20835: LD_VAR 0 4
20839: PPUSH
20840: EMPTY
20841: PPUSH
20842: CALL_OW 1
20846: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20847: LD_VAR 0 1
20851: PPUSH
20852: LD_INT 0
20854: PPUSH
20855: CALL_OW 505
// end ; end ;
20859: LD_VAR 0 2
20863: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20864: LD_INT 0
20866: PPUSH
20867: PPUSH
20868: PPUSH
// if not hack in hackTanks or not vehicles then
20869: LD_VAR 0 1
20873: PUSH
20874: LD_EXP 71
20878: IN
20879: NOT
20880: IFTRUE 20889
20882: PUSH
20883: LD_VAR 0 2
20887: NOT
20888: OR
20889: IFFALSE 20893
// exit ;
20891: GO 21168
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20893: LD_ADDR_VAR 0 2
20897: PUSH
20898: LD_VAR 0 1
20902: PPUSH
20903: LD_VAR 0 2
20907: PPUSH
20908: LD_INT 1
20910: PPUSH
20911: LD_INT 1
20913: PPUSH
20914: CALL 30159 0 4
20918: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20919: LD_ADDR_VAR 0 5
20923: PUSH
20924: LD_EXP 71
20928: PPUSH
20929: LD_VAR 0 1
20933: PPUSH
20934: CALL 29507 0 2
20938: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20939: LD_EXP 72
20943: PUSH
20944: LD_VAR 0 5
20948: ARRAY
20949: PUSH
20950: LD_EXP 73
20954: LESS
20955: IFFALSE 21144
// begin for i := 1 to vehicles do
20957: LD_ADDR_VAR 0 4
20961: PUSH
20962: DOUBLE
20963: LD_INT 1
20965: DEC
20966: ST_TO_ADDR
20967: LD_VAR 0 2
20971: PUSH
20972: FOR_TO
20973: IFFALSE 21142
// begin if hackTanksCaptured [ index ] = hackLimit then
20975: LD_EXP 72
20979: PUSH
20980: LD_VAR 0 5
20984: ARRAY
20985: PUSH
20986: LD_EXP 73
20990: EQUAL
20991: IFFALSE 20995
// break ;
20993: GO 21142
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
20995: LD_ADDR_EXP 75
20999: PUSH
21000: LD_EXP 75
21004: PPUSH
21005: LD_VAR 0 5
21009: PPUSH
21010: LD_EXP 75
21014: PUSH
21015: LD_VAR 0 5
21019: ARRAY
21020: PUSH
21021: LD_INT 1
21023: PLUS
21024: PPUSH
21025: CALL_OW 1
21029: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21030: LD_ADDR_EXP 72
21034: PUSH
21035: LD_EXP 72
21039: PPUSH
21040: LD_VAR 0 5
21044: PUSH
21045: LD_EXP 72
21049: PUSH
21050: LD_VAR 0 5
21054: ARRAY
21055: PUSH
21056: LD_INT 1
21058: PLUS
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PPUSH
21064: LD_VAR 0 2
21068: PUSH
21069: LD_VAR 0 4
21073: ARRAY
21074: PUSH
21075: LD_VAR 0 2
21079: PUSH
21080: LD_VAR 0 4
21084: ARRAY
21085: PPUSH
21086: CALL_OW 255
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PPUSH
21095: CALL 29724 0 3
21099: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21100: LD_VAR 0 2
21104: PUSH
21105: LD_VAR 0 4
21109: ARRAY
21110: PPUSH
21111: LD_VAR 0 1
21115: PPUSH
21116: CALL_OW 255
21120: PPUSH
21121: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21125: LD_VAR 0 2
21129: PUSH
21130: LD_VAR 0 4
21134: ARRAY
21135: PPUSH
21136: CALL_OW 141
// end ;
21140: GO 20972
21142: POP
21143: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21144: LD_VAR 0 1
21148: PPUSH
21149: LD_EXP 72
21153: PUSH
21154: LD_VAR 0 5
21158: ARRAY
21159: PUSH
21160: LD_INT 0
21162: PLUS
21163: PPUSH
21164: CALL_OW 505
// end ;
21168: LD_VAR 0 3
21172: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21173: LD_INT 0
21175: PPUSH
21176: PPUSH
21177: PPUSH
21178: PPUSH
// if not hack in hackTanks then
21179: LD_VAR 0 1
21183: PUSH
21184: LD_EXP 71
21188: IN
21189: NOT
21190: IFFALSE 21194
// exit ;
21192: GO 21438
// index := GetElementIndex ( hackTanks , hack ) ;
21194: LD_ADDR_VAR 0 4
21198: PUSH
21199: LD_EXP 71
21203: PPUSH
21204: LD_VAR 0 1
21208: PPUSH
21209: CALL 29507 0 2
21213: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21214: LD_ADDR_VAR 0 3
21218: PUSH
21219: DOUBLE
21220: LD_EXP 72
21224: PUSH
21225: LD_VAR 0 4
21229: ARRAY
21230: INC
21231: ST_TO_ADDR
21232: LD_INT 1
21234: PUSH
21235: FOR_DOWNTO
21236: IFFALSE 21412
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21238: LD_ADDR_VAR 0 5
21242: PUSH
21243: LD_EXP 72
21247: PUSH
21248: LD_VAR 0 4
21252: ARRAY
21253: PUSH
21254: LD_VAR 0 3
21258: ARRAY
21259: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21260: LD_VAR 0 5
21264: PUSH
21265: LD_INT 1
21267: ARRAY
21268: PPUSH
21269: CALL_OW 302
21273: NOT
21274: IFTRUE 21302
21276: PUSH
21277: LD_VAR 0 5
21281: PUSH
21282: LD_INT 1
21284: ARRAY
21285: PPUSH
21286: CALL_OW 255
21290: PUSH
21291: LD_VAR 0 1
21295: PPUSH
21296: CALL_OW 255
21300: NONEQUAL
21301: OR
21302: IFFALSE 21410
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21304: LD_VAR 0 5
21308: PUSH
21309: LD_INT 1
21311: ARRAY
21312: PPUSH
21313: CALL_OW 305
21317: IFFALSE 21345
21319: PUSH
21320: LD_VAR 0 5
21324: PUSH
21325: LD_INT 1
21327: ARRAY
21328: PPUSH
21329: CALL_OW 255
21333: PUSH
21334: LD_VAR 0 1
21338: PPUSH
21339: CALL_OW 255
21343: EQUAL
21344: AND
21345: IFFALSE 21369
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21347: LD_VAR 0 5
21351: PUSH
21352: LD_INT 1
21354: ARRAY
21355: PPUSH
21356: LD_VAR 0 5
21360: PUSH
21361: LD_INT 2
21363: ARRAY
21364: PPUSH
21365: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
21369: LD_ADDR_EXP 72
21373: PUSH
21374: LD_EXP 72
21378: PPUSH
21379: LD_VAR 0 4
21383: PPUSH
21384: LD_EXP 72
21388: PUSH
21389: LD_VAR 0 4
21393: ARRAY
21394: PPUSH
21395: LD_VAR 0 3
21399: PPUSH
21400: CALL_OW 3
21404: PPUSH
21405: CALL_OW 1
21409: ST_TO_ADDR
// end ; end ;
21410: GO 21235
21412: POP
21413: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21414: LD_VAR 0 1
21418: PPUSH
21419: LD_EXP 72
21423: PUSH
21424: LD_VAR 0 4
21428: ARRAY
21429: PUSH
21430: LD_INT 0
21432: PLUS
21433: PPUSH
21434: CALL_OW 505
// end ;
21438: LD_VAR 0 2
21442: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
21443: LD_INT 0
21445: PPUSH
21446: PPUSH
21447: PPUSH
21448: PPUSH
// if not hack in hackTanks then
21449: LD_VAR 0 1
21453: PUSH
21454: LD_EXP 71
21458: IN
21459: NOT
21460: IFFALSE 21464
// exit ;
21462: GO 21549
// index := GetElementIndex ( hackTanks , hack ) ;
21464: LD_ADDR_VAR 0 5
21468: PUSH
21469: LD_EXP 71
21473: PPUSH
21474: LD_VAR 0 1
21478: PPUSH
21479: CALL 29507 0 2
21483: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
21484: LD_ADDR_VAR 0 4
21488: PUSH
21489: DOUBLE
21490: LD_INT 1
21492: DEC
21493: ST_TO_ADDR
21494: LD_EXP 72
21498: PUSH
21499: LD_VAR 0 5
21503: ARRAY
21504: PUSH
21505: FOR_TO
21506: IFFALSE 21547
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
21508: LD_EXP 72
21512: PUSH
21513: LD_VAR 0 5
21517: ARRAY
21518: PUSH
21519: LD_VAR 0 4
21523: ARRAY
21524: PUSH
21525: LD_INT 1
21527: ARRAY
21528: PUSH
21529: LD_VAR 0 2
21533: EQUAL
21534: IFFALSE 21545
// KillUnit ( vehicle ) ;
21536: LD_VAR 0 2
21540: PPUSH
21541: CALL_OW 66
21545: GO 21505
21547: POP
21548: POP
// end ;
21549: LD_VAR 0 3
21553: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
21554: LD_EXP 76
21558: NOT
21559: IFFALSE 21692
21561: GO 21563
21563: DISABLE
21564: LD_INT 0
21566: PPUSH
// begin initMiner := true ;
21567: LD_ADDR_EXP 76
21571: PUSH
21572: LD_INT 1
21574: ST_TO_ADDR
// minersList := [ ] ;
21575: LD_ADDR_EXP 77
21579: PUSH
21580: EMPTY
21581: ST_TO_ADDR
// minerMinesList := [ ] ;
21582: LD_ADDR_EXP 78
21586: PUSH
21587: EMPTY
21588: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
21589: LD_ADDR_EXP 79
21593: PUSH
21594: LD_INT 10
21596: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
21597: LD_ADDR_VAR 0 1
21601: PUSH
21602: LD_INT 34
21604: PUSH
21605: LD_INT 81
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PPUSH
21612: CALL_OW 69
21616: PUSH
21617: FOR_IN
21618: IFFALSE 21690
// begin if not i in minersList then
21620: LD_VAR 0 1
21624: PUSH
21625: LD_EXP 77
21629: IN
21630: NOT
21631: IFFALSE 21688
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
21633: LD_ADDR_EXP 77
21637: PUSH
21638: LD_EXP 77
21642: PPUSH
21643: LD_EXP 77
21647: PUSH
21648: LD_INT 1
21650: PLUS
21651: PPUSH
21652: LD_VAR 0 1
21656: PPUSH
21657: CALL_OW 1
21661: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
21662: LD_ADDR_EXP 78
21666: PUSH
21667: LD_EXP 78
21671: PPUSH
21672: LD_EXP 78
21676: PUSH
21677: LD_INT 1
21679: PLUS
21680: PPUSH
21681: EMPTY
21682: PPUSH
21683: CALL_OW 1
21687: ST_TO_ADDR
// end end ;
21688: GO 21617
21690: POP
21691: POP
// end ;
21692: PPOPN 1
21694: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
21695: LD_EXP 76
21699: IFFALSE 21730
21701: PUSH
21702: LD_EXP 78
21706: PPUSH
21707: CALL 26806 0 1
21711: IFTRUE 21729
21713: PUSH
21714: LD_INT 34
21716: PUSH
21717: LD_INT 81
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PPUSH
21724: CALL_OW 69
21728: OR
21729: AND
21730: IFFALSE 22250
21732: GO 21734
21734: DISABLE
21735: LD_INT 0
21737: PPUSH
21738: PPUSH
21739: PPUSH
21740: PPUSH
// begin enable ;
21741: ENABLE
// for i := minerMinesList downto 1 do
21742: LD_ADDR_VAR 0 1
21746: PUSH
21747: DOUBLE
21748: LD_EXP 78
21752: INC
21753: ST_TO_ADDR
21754: LD_INT 1
21756: PUSH
21757: FOR_DOWNTO
21758: IFFALSE 22248
// begin side := GetSide ( minersList [ i ] ) ;
21760: LD_ADDR_VAR 0 3
21764: PUSH
21765: LD_EXP 77
21769: PUSH
21770: LD_VAR 0 1
21774: ARRAY
21775: PPUSH
21776: CALL_OW 255
21780: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
21781: LD_EXP 77
21785: PUSH
21786: LD_VAR 0 1
21790: ARRAY
21791: PPUSH
21792: CALL_OW 300
21796: IFFALSE 21817
21798: PUSH
21799: LD_VAR 0 3
21803: PUSH
21804: LD_OWVAR 2
21808: PUSH
21809: LD_INT 9
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: IN
21816: AND
21817: IFFALSE 21850
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
21819: LD_EXP 77
21823: PUSH
21824: LD_VAR 0 1
21828: ARRAY
21829: PPUSH
21830: LD_EXP 78
21834: PUSH
21835: LD_VAR 0 1
21839: ARRAY
21840: PPUSH
21841: CALL 26806 0 1
21845: PPUSH
21846: CALL_OW 505
// if not minerMinesList [ i ] then
21850: LD_EXP 78
21854: PUSH
21855: LD_VAR 0 1
21859: ARRAY
21860: NOT
21861: IFFALSE 21865
// continue ;
21863: GO 21757
// for j := minerMinesList [ i ] downto 1 do
21865: LD_ADDR_VAR 0 2
21869: PUSH
21870: DOUBLE
21871: LD_EXP 78
21875: PUSH
21876: LD_VAR 0 1
21880: ARRAY
21881: INC
21882: ST_TO_ADDR
21883: LD_INT 1
21885: PUSH
21886: FOR_DOWNTO
21887: IFFALSE 22244
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
21889: LD_EXP 77
21893: PUSH
21894: LD_VAR 0 1
21898: ARRAY
21899: PPUSH
21900: CALL_OW 301
21904: IFTRUE 21924
21906: PUSH
21907: LD_EXP 77
21911: PUSH
21912: LD_VAR 0 1
21916: ARRAY
21917: PPUSH
21918: CALL_OW 305
21922: NOT
21923: OR
21924: IFFALSE 22015
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
21926: LD_EXP 78
21930: PUSH
21931: LD_VAR 0 1
21935: ARRAY
21936: PUSH
21937: LD_VAR 0 2
21941: ARRAY
21942: PUSH
21943: LD_INT 1
21945: ARRAY
21946: PPUSH
21947: LD_EXP 78
21951: PUSH
21952: LD_VAR 0 1
21956: ARRAY
21957: PUSH
21958: LD_VAR 0 2
21962: ARRAY
21963: PUSH
21964: LD_INT 2
21966: ARRAY
21967: PPUSH
21968: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
21972: LD_ADDR_EXP 78
21976: PUSH
21977: LD_EXP 78
21981: PPUSH
21982: LD_VAR 0 1
21986: PPUSH
21987: LD_EXP 78
21991: PUSH
21992: LD_VAR 0 1
21996: ARRAY
21997: PPUSH
21998: LD_VAR 0 2
22002: PPUSH
22003: CALL_OW 3
22007: PPUSH
22008: CALL_OW 1
22012: ST_TO_ADDR
// continue ;
22013: GO 21886
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22015: LD_ADDR_VAR 0 4
22019: PUSH
22020: LD_EXP 78
22024: PUSH
22025: LD_VAR 0 1
22029: ARRAY
22030: PUSH
22031: LD_VAR 0 2
22035: ARRAY
22036: PUSH
22037: LD_INT 1
22039: ARRAY
22040: PPUSH
22041: LD_EXP 78
22045: PUSH
22046: LD_VAR 0 1
22050: ARRAY
22051: PUSH
22052: LD_VAR 0 2
22056: ARRAY
22057: PUSH
22058: LD_INT 2
22060: ARRAY
22061: PPUSH
22062: CALL_OW 428
22066: ST_TO_ADDR
// if not tmp then
22067: LD_VAR 0 4
22071: NOT
22072: IFFALSE 22076
// continue ;
22074: GO 21886
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22076: LD_VAR 0 4
22080: PUSH
22081: LD_INT 81
22083: PUSH
22084: LD_VAR 0 3
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PPUSH
22093: CALL_OW 69
22097: IN
22098: IFFALSE 22148
22100: PUSH
22101: LD_EXP 78
22105: PUSH
22106: LD_VAR 0 1
22110: ARRAY
22111: PUSH
22112: LD_VAR 0 2
22116: ARRAY
22117: PUSH
22118: LD_INT 1
22120: ARRAY
22121: PPUSH
22122: LD_EXP 78
22126: PUSH
22127: LD_VAR 0 1
22131: ARRAY
22132: PUSH
22133: LD_VAR 0 2
22137: ARRAY
22138: PUSH
22139: LD_INT 2
22141: ARRAY
22142: PPUSH
22143: CALL_OW 458
22147: AND
22148: IFFALSE 22242
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22150: LD_EXP 78
22154: PUSH
22155: LD_VAR 0 1
22159: ARRAY
22160: PUSH
22161: LD_VAR 0 2
22165: ARRAY
22166: PUSH
22167: LD_INT 1
22169: ARRAY
22170: PPUSH
22171: LD_EXP 78
22175: PUSH
22176: LD_VAR 0 1
22180: ARRAY
22181: PUSH
22182: LD_VAR 0 2
22186: ARRAY
22187: PUSH
22188: LD_INT 2
22190: ARRAY
22191: PPUSH
22192: LD_VAR 0 3
22196: PPUSH
22197: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22201: LD_ADDR_EXP 78
22205: PUSH
22206: LD_EXP 78
22210: PPUSH
22211: LD_VAR 0 1
22215: PPUSH
22216: LD_EXP 78
22220: PUSH
22221: LD_VAR 0 1
22225: ARRAY
22226: PPUSH
22227: LD_VAR 0 2
22231: PPUSH
22232: CALL_OW 3
22236: PPUSH
22237: CALL_OW 1
22241: ST_TO_ADDR
// end ; end ;
22242: GO 21886
22244: POP
22245: POP
// end ;
22246: GO 21757
22248: POP
22249: POP
// end ;
22250: PPOPN 4
22252: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
22253: LD_INT 0
22255: PPUSH
22256: PPUSH
22257: PPUSH
22258: PPUSH
// result := false ;
22259: LD_ADDR_VAR 0 4
22263: PUSH
22264: LD_INT 0
22266: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22267: LD_VAR 0 1
22271: PPUSH
22272: CALL_OW 264
22276: PUSH
22277: LD_INT 81
22279: EQUAL
22280: NOT
22281: IFFALSE 22285
// exit ;
22283: GO 22655
// side := GetSide ( unit ) ;
22285: LD_ADDR_VAR 0 6
22289: PUSH
22290: LD_VAR 0 1
22294: PPUSH
22295: CALL_OW 255
22299: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
22300: LD_ADDR_VAR 0 5
22304: PUSH
22305: LD_EXP 77
22309: PPUSH
22310: LD_VAR 0 1
22314: PPUSH
22315: CALL 29507 0 2
22319: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22320: LD_EXP 78
22324: PUSH
22325: LD_VAR 0 5
22329: ARRAY
22330: PUSH
22331: LD_EXP 79
22335: GREATEREQUAL
22336: IFFALSE 22340
// exit ;
22338: GO 22655
// ComMoveXY ( unit , x , y ) ;
22340: LD_VAR 0 1
22344: PPUSH
22345: LD_VAR 0 2
22349: PPUSH
22350: LD_VAR 0 3
22354: PPUSH
22355: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22359: LD_INT 35
22361: PPUSH
22362: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
22366: LD_VAR 0 1
22370: PPUSH
22371: LD_VAR 0 2
22375: PPUSH
22376: LD_VAR 0 3
22380: PPUSH
22381: CALL 61563 0 3
22385: NOT
22386: IFFALSE 22399
22388: PUSH
22389: LD_VAR 0 1
22393: PPUSH
22394: CALL_OW 314
22398: AND
22399: IFFALSE 22403
// exit ;
22401: GO 22655
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22403: LD_VAR 0 2
22407: PPUSH
22408: LD_VAR 0 3
22412: PPUSH
22413: CALL_OW 428
22417: PUSH
22418: LD_VAR 0 1
22422: EQUAL
22423: IFFALSE 22437
22425: PUSH
22426: LD_VAR 0 1
22430: PPUSH
22431: CALL_OW 314
22435: NOT
22436: AND
22437: IFFALSE 22359
// if MineAtPos ( x , y ) then
22439: LD_VAR 0 2
22443: PPUSH
22444: LD_VAR 0 3
22448: PPUSH
22449: CALL_OW 458
22453: IFFALSE 22457
// exit ;
22455: GO 22655
// if your_side = side then
22457: LD_OWVAR 2
22461: PUSH
22462: LD_VAR 0 6
22466: EQUAL
22467: IFFALSE 22486
// PlaySoundXY ( x , y , PlantMine ) ;
22469: LD_VAR 0 2
22473: PPUSH
22474: LD_VAR 0 3
22478: PPUSH
22479: LD_STRING PlantMine
22481: PPUSH
22482: CALL_OW 366
// repeat wait ( 1 ) ;
22486: LD_INT 1
22488: PPUSH
22489: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
22493: LD_VAR 0 2
22497: PPUSH
22498: LD_VAR 0 3
22502: PPUSH
22503: LD_VAR 0 6
22507: PPUSH
22508: LD_INT 0
22510: PPUSH
22511: CALL_OW 454
22515: IFFALSE 22486
// if MineAtPos ( x , y ) then
22517: LD_VAR 0 2
22521: PPUSH
22522: LD_VAR 0 3
22526: PPUSH
22527: CALL_OW 458
22531: IFFALSE 22647
// begin for i in minerMinesList [ index ] do
22533: LD_ADDR_VAR 0 7
22537: PUSH
22538: LD_EXP 78
22542: PUSH
22543: LD_VAR 0 5
22547: ARRAY
22548: PUSH
22549: FOR_IN
22550: IFFALSE 22592
// if i [ 1 ] = x and i [ 2 ] = y then
22552: LD_VAR 0 7
22556: PUSH
22557: LD_INT 1
22559: ARRAY
22560: PUSH
22561: LD_VAR 0 2
22565: EQUAL
22566: IFFALSE 22584
22568: PUSH
22569: LD_VAR 0 7
22573: PUSH
22574: LD_INT 2
22576: ARRAY
22577: PUSH
22578: LD_VAR 0 3
22582: EQUAL
22583: AND
22584: IFFALSE 22590
// exit ;
22586: POP
22587: POP
22588: GO 22655
22590: GO 22549
22592: POP
22593: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22594: LD_ADDR_EXP 78
22598: PUSH
22599: LD_EXP 78
22603: PPUSH
22604: LD_VAR 0 5
22608: PUSH
22609: LD_EXP 78
22613: PUSH
22614: LD_VAR 0 5
22618: ARRAY
22619: PUSH
22620: LD_INT 1
22622: PLUS
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: PPUSH
22628: LD_VAR 0 2
22632: PUSH
22633: LD_VAR 0 3
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PPUSH
22642: CALL 29724 0 3
22646: ST_TO_ADDR
// end ; result := true ;
22647: LD_ADDR_VAR 0 4
22651: PUSH
22652: LD_INT 1
22654: ST_TO_ADDR
// end ;
22655: LD_VAR 0 4
22659: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22660: LD_INT 0
22662: PPUSH
22663: PPUSH
22664: PPUSH
// if not unit in minersList then
22665: LD_VAR 0 1
22669: PUSH
22670: LD_EXP 77
22674: IN
22675: NOT
22676: IFFALSE 22680
// exit ;
22678: GO 22887
// index := GetElementIndex ( minersList , unit ) ;
22680: LD_ADDR_VAR 0 6
22684: PUSH
22685: LD_EXP 77
22689: PPUSH
22690: LD_VAR 0 1
22694: PPUSH
22695: CALL 29507 0 2
22699: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
22700: LD_ADDR_VAR 0 5
22704: PUSH
22705: DOUBLE
22706: LD_EXP 78
22710: PUSH
22711: LD_VAR 0 6
22715: ARRAY
22716: INC
22717: ST_TO_ADDR
22718: LD_INT 1
22720: PUSH
22721: FOR_DOWNTO
22722: IFFALSE 22885
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
22724: LD_EXP 78
22728: PUSH
22729: LD_VAR 0 6
22733: ARRAY
22734: PUSH
22735: LD_VAR 0 5
22739: ARRAY
22740: PUSH
22741: LD_INT 1
22743: ARRAY
22744: PPUSH
22745: LD_EXP 78
22749: PUSH
22750: LD_VAR 0 6
22754: ARRAY
22755: PUSH
22756: LD_VAR 0 5
22760: ARRAY
22761: PUSH
22762: LD_INT 2
22764: ARRAY
22765: PPUSH
22766: LD_VAR 0 2
22770: PPUSH
22771: LD_VAR 0 3
22775: PPUSH
22776: CALL_OW 298
22780: PUSH
22781: LD_INT 6
22783: LESS
22784: IFFALSE 22883
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
22786: LD_EXP 78
22790: PUSH
22791: LD_VAR 0 6
22795: ARRAY
22796: PUSH
22797: LD_VAR 0 5
22801: ARRAY
22802: PUSH
22803: LD_INT 1
22805: ARRAY
22806: PPUSH
22807: LD_EXP 78
22811: PUSH
22812: LD_VAR 0 6
22816: ARRAY
22817: PUSH
22818: LD_VAR 0 5
22822: ARRAY
22823: PUSH
22824: LD_INT 2
22826: ARRAY
22827: PPUSH
22828: LD_VAR 0 1
22832: PPUSH
22833: CALL_OW 255
22837: PPUSH
22838: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
22842: LD_ADDR_EXP 78
22846: PUSH
22847: LD_EXP 78
22851: PPUSH
22852: LD_VAR 0 6
22856: PPUSH
22857: LD_EXP 78
22861: PUSH
22862: LD_VAR 0 6
22866: ARRAY
22867: PPUSH
22868: LD_VAR 0 5
22872: PPUSH
22873: CALL_OW 3
22877: PPUSH
22878: CALL_OW 1
22882: ST_TO_ADDR
// end ; end ;
22883: GO 22721
22885: POP
22886: POP
// end ;
22887: LD_VAR 0 4
22891: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
22892: LD_INT 0
22894: PPUSH
22895: PPUSH
22896: PPUSH
22897: PPUSH
22898: PPUSH
22899: PPUSH
22900: PPUSH
22901: PPUSH
22902: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
22903: LD_VAR 0 1
22907: PPUSH
22908: CALL_OW 264
22912: PUSH
22913: LD_INT 81
22915: EQUAL
22916: NOT
22917: IFTRUE 22932
22919: PUSH
22920: LD_VAR 0 1
22924: PUSH
22925: LD_EXP 77
22929: IN
22930: NOT
22931: OR
22932: IFFALSE 22936
// exit ;
22934: GO 23262
// index := GetElementIndex ( minersList , unit ) ;
22936: LD_ADDR_VAR 0 6
22940: PUSH
22941: LD_EXP 77
22945: PPUSH
22946: LD_VAR 0 1
22950: PPUSH
22951: CALL 29507 0 2
22955: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
22956: LD_ADDR_VAR 0 8
22960: PUSH
22961: LD_EXP 79
22965: PUSH
22966: LD_EXP 78
22970: PUSH
22971: LD_VAR 0 6
22975: ARRAY
22976: MINUS
22977: ST_TO_ADDR
// if not minesFreeAmount then
22978: LD_VAR 0 8
22982: NOT
22983: IFFALSE 22987
// exit ;
22985: GO 23262
// tmp := [ ] ;
22987: LD_ADDR_VAR 0 7
22991: PUSH
22992: EMPTY
22993: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
22994: LD_ADDR_VAR 0 5
22998: PUSH
22999: DOUBLE
23000: LD_INT 1
23002: DEC
23003: ST_TO_ADDR
23004: LD_VAR 0 8
23008: PUSH
23009: FOR_TO
23010: IFFALSE 23209
// begin _d := rand ( 0 , 5 ) ;
23012: LD_ADDR_VAR 0 11
23016: PUSH
23017: LD_INT 0
23019: PPUSH
23020: LD_INT 5
23022: PPUSH
23023: CALL_OW 12
23027: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23028: LD_ADDR_VAR 0 12
23032: PUSH
23033: LD_INT 2
23035: PPUSH
23036: LD_INT 6
23038: PPUSH
23039: CALL_OW 12
23043: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23044: LD_ADDR_VAR 0 9
23048: PUSH
23049: LD_VAR 0 2
23053: PPUSH
23054: LD_VAR 0 11
23058: PPUSH
23059: LD_VAR 0 12
23063: PPUSH
23064: CALL_OW 272
23068: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23069: LD_ADDR_VAR 0 10
23073: PUSH
23074: LD_VAR 0 3
23078: PPUSH
23079: LD_VAR 0 11
23083: PPUSH
23084: LD_VAR 0 12
23088: PPUSH
23089: CALL_OW 273
23093: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23094: LD_VAR 0 9
23098: PPUSH
23099: LD_VAR 0 10
23103: PPUSH
23104: CALL_OW 488
23108: IFFALSE 23132
23110: PUSH
23111: LD_VAR 0 9
23115: PUSH
23116: LD_VAR 0 10
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PUSH
23125: LD_VAR 0 7
23129: IN
23130: NOT
23131: AND
23132: IFFALSE 23151
23134: PUSH
23135: LD_VAR 0 9
23139: PPUSH
23140: LD_VAR 0 10
23144: PPUSH
23145: CALL_OW 458
23149: NOT
23150: AND
23151: IFFALSE 23193
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23153: LD_ADDR_VAR 0 7
23157: PUSH
23158: LD_VAR 0 7
23162: PPUSH
23163: LD_VAR 0 7
23167: PUSH
23168: LD_INT 1
23170: PLUS
23171: PPUSH
23172: LD_VAR 0 9
23176: PUSH
23177: LD_VAR 0 10
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PPUSH
23186: CALL_OW 1
23190: ST_TO_ADDR
23191: GO 23207
// i := i - 1 ;
23193: LD_ADDR_VAR 0 5
23197: PUSH
23198: LD_VAR 0 5
23202: PUSH
23203: LD_INT 1
23205: MINUS
23206: ST_TO_ADDR
// end ;
23207: GO 23009
23209: POP
23210: POP
// for i in tmp do
23211: LD_ADDR_VAR 0 5
23215: PUSH
23216: LD_VAR 0 7
23220: PUSH
23221: FOR_IN
23222: IFFALSE 23260
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23224: LD_VAR 0 1
23228: PPUSH
23229: LD_VAR 0 5
23233: PUSH
23234: LD_INT 1
23236: ARRAY
23237: PPUSH
23238: LD_VAR 0 5
23242: PUSH
23243: LD_INT 2
23245: ARRAY
23246: PPUSH
23247: CALL 22253 0 3
23251: NOT
23252: IFFALSE 23258
// exit ;
23254: POP
23255: POP
23256: GO 23262
23258: GO 23221
23260: POP
23261: POP
// end ;
23262: LD_VAR 0 4
23266: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
23267: LD_INT 0
23269: PPUSH
23270: PPUSH
23271: PPUSH
23272: PPUSH
23273: PPUSH
23274: PPUSH
23275: PPUSH
23276: PPUSH
23277: PPUSH
// if GetClass ( unit ) <> class_sniper then
23278: LD_VAR 0 1
23282: PPUSH
23283: CALL_OW 257
23287: PUSH
23288: LD_INT 5
23290: NONEQUAL
23291: IFFALSE 23295
// exit ;
23293: GO 23765
// dist := 8 ;
23295: LD_ADDR_VAR 0 5
23299: PUSH
23300: LD_INT 8
23302: ST_TO_ADDR
// viewRange := 12 ;
23303: LD_ADDR_VAR 0 8
23307: PUSH
23308: LD_INT 12
23310: ST_TO_ADDR
// side := GetSide ( unit ) ;
23311: LD_ADDR_VAR 0 6
23315: PUSH
23316: LD_VAR 0 1
23320: PPUSH
23321: CALL_OW 255
23325: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23326: LD_INT 61
23328: PPUSH
23329: LD_VAR 0 6
23333: PPUSH
23334: CALL_OW 321
23338: PUSH
23339: LD_INT 2
23341: EQUAL
23342: IFFALSE 23352
// viewRange := 16 ;
23344: LD_ADDR_VAR 0 8
23348: PUSH
23349: LD_INT 16
23351: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23352: LD_VAR 0 1
23356: PPUSH
23357: LD_VAR 0 2
23361: PPUSH
23362: LD_VAR 0 3
23366: PPUSH
23367: CALL_OW 297
23371: PUSH
23372: LD_VAR 0 5
23376: GREATER
23377: IFFALSE 23456
// begin ComMoveXY ( unit , x , y ) ;
23379: LD_VAR 0 1
23383: PPUSH
23384: LD_VAR 0 2
23388: PPUSH
23389: LD_VAR 0 3
23393: PPUSH
23394: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23398: LD_INT 35
23400: PPUSH
23401: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23405: LD_VAR 0 1
23409: PPUSH
23410: LD_VAR 0 2
23414: PPUSH
23415: LD_VAR 0 3
23419: PPUSH
23420: CALL 61563 0 3
23424: NOT
23425: IFFALSE 23429
// exit ;
23427: GO 23765
// until GetDistUnitXY ( unit , x , y ) < dist ;
23429: LD_VAR 0 1
23433: PPUSH
23434: LD_VAR 0 2
23438: PPUSH
23439: LD_VAR 0 3
23443: PPUSH
23444: CALL_OW 297
23448: PUSH
23449: LD_VAR 0 5
23453: LESS
23454: IFFALSE 23398
// end ; ComTurnXY ( unit , x , y ) ;
23456: LD_VAR 0 1
23460: PPUSH
23461: LD_VAR 0 2
23465: PPUSH
23466: LD_VAR 0 3
23470: PPUSH
23471: CALL_OW 118
// repeat if Multiplayer then
23475: LD_OWVAR 4
23479: IFFALSE 23490
// wait ( 35 ) else
23481: LD_INT 35
23483: PPUSH
23484: CALL_OW 67
23488: GO 23497
// wait ( 5 ) ;
23490: LD_INT 5
23492: PPUSH
23493: CALL_OW 67
// _d := GetDir ( unit ) ;
23497: LD_ADDR_VAR 0 11
23501: PUSH
23502: LD_VAR 0 1
23506: PPUSH
23507: CALL_OW 254
23511: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
23512: LD_ADDR_VAR 0 7
23516: PUSH
23517: LD_VAR 0 1
23521: PPUSH
23522: CALL_OW 250
23526: PPUSH
23527: LD_VAR 0 1
23531: PPUSH
23532: CALL_OW 251
23536: PPUSH
23537: LD_VAR 0 2
23541: PPUSH
23542: LD_VAR 0 3
23546: PPUSH
23547: CALL 64199 0 4
23551: ST_TO_ADDR
// until dir = _d ;
23552: LD_VAR 0 7
23556: PUSH
23557: LD_VAR 0 11
23561: EQUAL
23562: IFFALSE 23475
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
23564: LD_ADDR_VAR 0 9
23568: PUSH
23569: LD_VAR 0 1
23573: PPUSH
23574: CALL_OW 250
23578: PPUSH
23579: LD_VAR 0 7
23583: PPUSH
23584: LD_VAR 0 5
23588: PPUSH
23589: CALL_OW 272
23593: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
23594: LD_ADDR_VAR 0 10
23598: PUSH
23599: LD_VAR 0 1
23603: PPUSH
23604: CALL_OW 251
23608: PPUSH
23609: LD_VAR 0 7
23613: PPUSH
23614: LD_VAR 0 5
23618: PPUSH
23619: CALL_OW 273
23623: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23624: LD_VAR 0 9
23628: PPUSH
23629: LD_VAR 0 10
23633: PPUSH
23634: CALL_OW 488
23638: NOT
23639: IFFALSE 23643
// exit ;
23641: GO 23765
// ComAnimCustom ( unit , 1 ) ;
23643: LD_VAR 0 1
23647: PPUSH
23648: LD_INT 1
23650: PPUSH
23651: CALL_OW 592
// p := 0 ;
23655: LD_ADDR_VAR 0 12
23659: PUSH
23660: LD_INT 0
23662: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
23663: LD_VAR 0 9
23667: PPUSH
23668: LD_VAR 0 10
23672: PPUSH
23673: LD_VAR 0 6
23677: PPUSH
23678: LD_VAR 0 8
23682: PPUSH
23683: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
23687: LD_INT 35
23689: PPUSH
23690: CALL_OW 67
// p := Inc ( p ) ;
23694: LD_ADDR_VAR 0 12
23698: PUSH
23699: LD_VAR 0 12
23703: PPUSH
23704: CALL 64155 0 1
23708: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
23709: LD_VAR 0 12
23713: PUSH
23714: LD_INT 3
23716: EQUAL
23717: IFTRUE 23731
23719: PUSH
23720: LD_VAR 0 1
23724: PPUSH
23725: CALL_OW 302
23729: NOT
23730: OR
23731: IFTRUE 23744
23733: PUSH
23734: LD_VAR 0 1
23738: PPUSH
23739: CALL_OW 301
23743: OR
23744: IFFALSE 23687
// RemoveSeeing ( _x , _y , side ) ;
23746: LD_VAR 0 9
23750: PPUSH
23751: LD_VAR 0 10
23755: PPUSH
23756: LD_VAR 0 6
23760: PPUSH
23761: CALL_OW 331
// end ;
23765: LD_VAR 0 4
23769: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
23770: LD_INT 0
23772: PPUSH
23773: PPUSH
23774: PPUSH
23775: PPUSH
23776: PPUSH
23777: PPUSH
23778: PPUSH
23779: PPUSH
23780: PPUSH
23781: PPUSH
23782: PPUSH
// if not unit then
23783: LD_VAR 0 1
23787: NOT
23788: IFFALSE 23792
// exit ;
23790: GO 24063
// side := GetSide ( unit ) ;
23792: LD_ADDR_VAR 0 3
23796: PUSH
23797: LD_VAR 0 1
23801: PPUSH
23802: CALL_OW 255
23806: ST_TO_ADDR
// x := GetX ( unit ) ;
23807: LD_ADDR_VAR 0 5
23811: PUSH
23812: LD_VAR 0 1
23816: PPUSH
23817: CALL_OW 250
23821: ST_TO_ADDR
// y := GetY ( unit ) ;
23822: LD_ADDR_VAR 0 6
23826: PUSH
23827: LD_VAR 0 1
23831: PPUSH
23832: CALL_OW 251
23836: ST_TO_ADDR
// r := 8 ;
23837: LD_ADDR_VAR 0 4
23841: PUSH
23842: LD_INT 8
23844: ST_TO_ADDR
// if x - r < 0 then
23845: LD_VAR 0 5
23849: PUSH
23850: LD_VAR 0 4
23854: MINUS
23855: PUSH
23856: LD_INT 0
23858: LESS
23859: IFFALSE 23871
// min_x := 0 else
23861: LD_ADDR_VAR 0 7
23865: PUSH
23866: LD_INT 0
23868: ST_TO_ADDR
23869: GO 23887
// min_x := x - r ;
23871: LD_ADDR_VAR 0 7
23875: PUSH
23876: LD_VAR 0 5
23880: PUSH
23881: LD_VAR 0 4
23885: MINUS
23886: ST_TO_ADDR
// if y - r < 0 then
23887: LD_VAR 0 6
23891: PUSH
23892: LD_VAR 0 4
23896: MINUS
23897: PUSH
23898: LD_INT 0
23900: LESS
23901: IFFALSE 23913
// min_y := 0 else
23903: LD_ADDR_VAR 0 8
23907: PUSH
23908: LD_INT 0
23910: ST_TO_ADDR
23911: GO 23929
// min_y := y - r ;
23913: LD_ADDR_VAR 0 8
23917: PUSH
23918: LD_VAR 0 6
23922: PUSH
23923: LD_VAR 0 4
23927: MINUS
23928: ST_TO_ADDR
// max_x := x + r ;
23929: LD_ADDR_VAR 0 9
23933: PUSH
23934: LD_VAR 0 5
23938: PUSH
23939: LD_VAR 0 4
23943: PLUS
23944: ST_TO_ADDR
// max_y := y + r ;
23945: LD_ADDR_VAR 0 10
23949: PUSH
23950: LD_VAR 0 6
23954: PUSH
23955: LD_VAR 0 4
23959: PLUS
23960: ST_TO_ADDR
// for _x = min_x to max_x do
23961: LD_ADDR_VAR 0 11
23965: PUSH
23966: DOUBLE
23967: LD_VAR 0 7
23971: DEC
23972: ST_TO_ADDR
23973: LD_VAR 0 9
23977: PUSH
23978: FOR_TO
23979: IFFALSE 24061
// for _y = min_y to max_y do
23981: LD_ADDR_VAR 0 12
23985: PUSH
23986: DOUBLE
23987: LD_VAR 0 8
23991: DEC
23992: ST_TO_ADDR
23993: LD_VAR 0 10
23997: PUSH
23998: FOR_TO
23999: IFFALSE 24057
// begin if not ValidHex ( _x , _y ) then
24001: LD_VAR 0 11
24005: PPUSH
24006: LD_VAR 0 12
24010: PPUSH
24011: CALL_OW 488
24015: NOT
24016: IFFALSE 24020
// continue ;
24018: GO 23998
// if MineAtPos ( _x , _y ) then
24020: LD_VAR 0 11
24024: PPUSH
24025: LD_VAR 0 12
24029: PPUSH
24030: CALL_OW 458
24034: IFFALSE 24055
// ViewMineAtPos ( _x , _y , side ) ;
24036: LD_VAR 0 11
24040: PPUSH
24041: LD_VAR 0 12
24045: PPUSH
24046: LD_VAR 0 3
24050: PPUSH
24051: CALL_OW 457
// end ;
24055: GO 23998
24057: POP
24058: POP
24059: GO 23978
24061: POP
24062: POP
// end ;
24063: LD_VAR 0 2
24067: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
24068: LD_INT 0
24070: PPUSH
24071: PPUSH
24072: PPUSH
24073: PPUSH
24074: PPUSH
24075: PPUSH
24076: PPUSH
// if not units then
24077: LD_VAR 0 1
24081: NOT
24082: IFFALSE 24086
// exit ;
24084: GO 24550
// scaners := [ ] ;
24086: LD_ADDR_VAR 0 6
24090: PUSH
24091: EMPTY
24092: ST_TO_ADDR
// for i in units do
24093: LD_ADDR_VAR 0 3
24097: PUSH
24098: LD_VAR 0 1
24102: PUSH
24103: FOR_IN
24104: IFFALSE 24261
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
24106: LD_VAR 0 3
24110: PPUSH
24111: CALL_OW 264
24115: PUSH
24116: LD_INT 11
24118: NONEQUAL
24119: IFTRUE 24133
24121: PUSH
24122: LD_VAR 0 3
24126: PPUSH
24127: CALL_OW 302
24131: NOT
24132: OR
24133: IFTRUE 24150
24135: PUSH
24136: LD_VAR 0 3
24140: PPUSH
24141: CALL_OW 110
24145: PUSH
24146: LD_INT 502
24148: EQUAL
24149: OR
24150: IFFALSE 24154
// continue ;
24152: GO 24103
// ComStop ( i ) ;
24154: LD_VAR 0 3
24158: PPUSH
24159: CALL_OW 141
// x := GetX ( i ) ;
24163: LD_ADDR_VAR 0 4
24167: PUSH
24168: LD_VAR 0 3
24172: PPUSH
24173: CALL_OW 250
24177: ST_TO_ADDR
// y := GetY ( i ) ;
24178: LD_ADDR_VAR 0 5
24182: PUSH
24183: LD_VAR 0 3
24187: PPUSH
24188: CALL_OW 251
24192: ST_TO_ADDR
// if GetSide ( i ) = your_side then
24193: LD_VAR 0 3
24197: PPUSH
24198: CALL_OW 255
24202: PUSH
24203: LD_OWVAR 2
24207: EQUAL
24208: IFFALSE 24227
// PlaySoundXY ( x , y , mineDetector ) ;
24210: LD_VAR 0 4
24214: PPUSH
24215: LD_VAR 0 5
24219: PPUSH
24220: LD_STRING mineDetector
24222: PPUSH
24223: CALL_OW 366
// scaners := Join ( scaners , i ) ;
24227: LD_ADDR_VAR 0 6
24231: PUSH
24232: LD_VAR 0 6
24236: PPUSH
24237: LD_VAR 0 3
24241: PPUSH
24242: CALL 62782 0 2
24246: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
24247: LD_VAR 0 3
24251: PPUSH
24252: LD_INT 502
24254: PPUSH
24255: CALL_OW 109
// end ;
24259: GO 24103
24261: POP
24262: POP
// if not scaners then
24263: LD_VAR 0 6
24267: NOT
24268: IFFALSE 24272
// exit ;
24270: GO 24550
// wait ( 3 ) ;
24272: LD_INT 3
24274: PPUSH
24275: CALL_OW 67
// timer := 6 ;
24279: LD_ADDR_VAR 0 7
24283: PUSH
24284: LD_INT 6
24286: ST_TO_ADDR
// repeat for i in scaners do
24287: LD_ADDR_VAR 0 3
24291: PUSH
24292: LD_VAR 0 6
24296: PUSH
24297: FOR_IN
24298: IFFALSE 24448
// begin side := GetSide ( i ) ;
24300: LD_ADDR_VAR 0 8
24304: PUSH
24305: LD_VAR 0 3
24309: PPUSH
24310: CALL_OW 255
24314: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
24315: LD_VAR 0 3
24319: PPUSH
24320: CALL_OW 302
24324: NOT
24325: IFTRUE 24338
24327: PUSH
24328: LD_VAR 0 3
24332: PPUSH
24333: CALL_OW 314
24337: OR
24338: IFTRUE 24369
24340: PUSH
24341: LD_VAR 0 3
24345: PPUSH
24346: CALL_OW 263
24350: PUSH
24351: LD_INT 1
24353: EQUAL
24354: IFFALSE 24368
24356: PUSH
24357: LD_VAR 0 3
24361: PPUSH
24362: CALL_OW 311
24366: NOT
24367: AND
24368: OR
24369: IFFALSE 24413
// begin SetUnitDisplayNumber ( i , 0 ) ;
24371: LD_VAR 0 3
24375: PPUSH
24376: LD_INT 0
24378: PPUSH
24379: CALL_OW 505
// SetTag ( i , 0 ) ;
24383: LD_VAR 0 3
24387: PPUSH
24388: LD_INT 0
24390: PPUSH
24391: CALL_OW 109
// scaners := scaners diff i ;
24395: LD_ADDR_VAR 0 6
24399: PUSH
24400: LD_VAR 0 6
24404: PUSH
24405: LD_VAR 0 3
24409: DIFF
24410: ST_TO_ADDR
// continue ;
24411: GO 24297
// end ; if side in [ your_side , 9 ] then
24413: LD_VAR 0 8
24417: PUSH
24418: LD_OWVAR 2
24422: PUSH
24423: LD_INT 9
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: IN
24430: IFFALSE 24446
// SetUnitDisplayNumber ( i , timer ) ;
24432: LD_VAR 0 3
24436: PPUSH
24437: LD_VAR 0 7
24441: PPUSH
24442: CALL_OW 505
// end ;
24446: GO 24297
24448: POP
24449: POP
// if not scaners then
24450: LD_VAR 0 6
24454: NOT
24455: IFFALSE 24459
// exit ;
24457: GO 24550
// timer := Dec ( timer ) ;
24459: LD_ADDR_VAR 0 7
24463: PUSH
24464: LD_VAR 0 7
24468: PPUSH
24469: CALL 64177 0 1
24473: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24474: LD_INT 35
24476: PPUSH
24477: CALL_OW 67
// until timer = 0 ;
24481: LD_VAR 0 7
24485: PUSH
24486: LD_INT 0
24488: EQUAL
24489: IFFALSE 24287
// if not scaners then
24491: LD_VAR 0 6
24495: NOT
24496: IFFALSE 24500
// exit ;
24498: GO 24550
// for i in scaners do
24500: LD_ADDR_VAR 0 3
24504: PUSH
24505: LD_VAR 0 6
24509: PUSH
24510: FOR_IN
24511: IFFALSE 24548
// begin SetUnitDisplayNumber ( i , 0 ) ;
24513: LD_VAR 0 3
24517: PPUSH
24518: LD_INT 0
24520: PPUSH
24521: CALL_OW 505
// SetTag ( i , 0 ) ;
24525: LD_VAR 0 3
24529: PPUSH
24530: LD_INT 0
24532: PPUSH
24533: CALL_OW 109
// RevealDetectorMine ( i ) ;
24537: LD_VAR 0 3
24541: PPUSH
24542: CALL 23770 0 1
// end ;
24546: GO 24510
24548: POP
24549: POP
// end ;
24550: LD_VAR 0 2
24554: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
24555: LD_INT 0
24557: PPUSH
// if p1 = mine_detector_mode then
24558: LD_VAR 0 2
24562: PUSH
24563: LD_INT 103
24565: EQUAL
24566: IFFALSE 24577
// DetectMine ( units ) ;
24568: LD_VAR 0 1
24572: PPUSH
24573: CALL 24068 0 1
// end ; end_of_file
24577: LD_VAR 0 7
24581: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24582: LD_INT 0
24584: PPUSH
24585: PPUSH
// if exist_mode then
24586: LD_VAR 0 2
24590: IFFALSE 24636
// begin unit := CreateCharacter ( prefix & ident ) ;
24592: LD_ADDR_VAR 0 5
24596: PUSH
24597: LD_VAR 0 3
24601: PUSH
24602: LD_VAR 0 1
24606: STR
24607: PPUSH
24608: CALL_OW 34
24612: ST_TO_ADDR
// if unit then
24613: LD_VAR 0 5
24617: IFFALSE 24634
// DeleteCharacters ( prefix & ident ) ;
24619: LD_VAR 0 3
24623: PUSH
24624: LD_VAR 0 1
24628: STR
24629: PPUSH
24630: CALL_OW 40
// end else
24634: GO 24651
// unit := NewCharacter ( ident ) ;
24636: LD_ADDR_VAR 0 5
24640: PUSH
24641: LD_VAR 0 1
24645: PPUSH
24646: CALL_OW 25
24650: ST_TO_ADDR
// result := unit ;
24651: LD_ADDR_VAR 0 4
24655: PUSH
24656: LD_VAR 0 5
24660: ST_TO_ADDR
// end ;
24661: LD_VAR 0 4
24665: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
24666: LD_INT 0
24668: PPUSH
24669: PPUSH
// if exist_mode then
24670: LD_VAR 0 2
24674: IFFALSE 24699
// unit := CreateCharacter ( prefix & ident ) else
24676: LD_ADDR_VAR 0 5
24680: PUSH
24681: LD_VAR 0 3
24685: PUSH
24686: LD_VAR 0 1
24690: STR
24691: PPUSH
24692: CALL_OW 34
24696: ST_TO_ADDR
24697: GO 24714
// unit := NewCharacter ( ident ) ;
24699: LD_ADDR_VAR 0 5
24703: PUSH
24704: LD_VAR 0 1
24708: PPUSH
24709: CALL_OW 25
24713: ST_TO_ADDR
// result := unit ;
24714: LD_ADDR_VAR 0 4
24718: PUSH
24719: LD_VAR 0 5
24723: ST_TO_ADDR
// end ;
24724: LD_VAR 0 4
24728: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24729: LD_INT 0
24731: PPUSH
24732: PPUSH
// if not side or not nation then
24733: LD_VAR 0 1
24737: NOT
24738: IFTRUE 24747
24740: PUSH
24741: LD_VAR 0 2
24745: NOT
24746: OR
24747: IFFALSE 24751
// exit ;
24749: GO 25545
// case nation of nation_american :
24751: LD_VAR 0 2
24755: PUSH
24756: LD_INT 1
24758: DOUBLE
24759: EQUAL
24760: IFTRUE 24764
24762: GO 24986
24764: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
24765: LD_ADDR_VAR 0 4
24769: PUSH
24770: LD_INT 35
24772: PUSH
24773: LD_INT 45
24775: PUSH
24776: LD_INT 46
24778: PUSH
24779: LD_INT 47
24781: PUSH
24782: LD_INT 82
24784: PUSH
24785: LD_INT 83
24787: PUSH
24788: LD_INT 84
24790: PUSH
24791: LD_INT 85
24793: PUSH
24794: LD_INT 86
24796: PUSH
24797: LD_INT 1
24799: PUSH
24800: LD_INT 2
24802: PUSH
24803: LD_INT 6
24805: PUSH
24806: LD_INT 15
24808: PUSH
24809: LD_INT 16
24811: PUSH
24812: LD_INT 7
24814: PUSH
24815: LD_INT 12
24817: PUSH
24818: LD_INT 13
24820: PUSH
24821: LD_INT 10
24823: PUSH
24824: LD_INT 14
24826: PUSH
24827: LD_INT 20
24829: PUSH
24830: LD_INT 21
24832: PUSH
24833: LD_INT 22
24835: PUSH
24836: LD_INT 25
24838: PUSH
24839: LD_INT 32
24841: PUSH
24842: LD_INT 27
24844: PUSH
24845: LD_INT 36
24847: PUSH
24848: LD_INT 69
24850: PUSH
24851: LD_INT 39
24853: PUSH
24854: LD_INT 34
24856: PUSH
24857: LD_INT 40
24859: PUSH
24860: LD_INT 48
24862: PUSH
24863: LD_INT 49
24865: PUSH
24866: LD_INT 50
24868: PUSH
24869: LD_INT 51
24871: PUSH
24872: LD_INT 52
24874: PUSH
24875: LD_INT 53
24877: PUSH
24878: LD_INT 54
24880: PUSH
24881: LD_INT 55
24883: PUSH
24884: LD_INT 56
24886: PUSH
24887: LD_INT 57
24889: PUSH
24890: LD_INT 58
24892: PUSH
24893: LD_INT 59
24895: PUSH
24896: LD_INT 60
24898: PUSH
24899: LD_INT 61
24901: PUSH
24902: LD_INT 62
24904: PUSH
24905: LD_INT 80
24907: PUSH
24908: LD_INT 82
24910: PUSH
24911: LD_INT 83
24913: PUSH
24914: LD_INT 84
24916: PUSH
24917: LD_INT 85
24919: PUSH
24920: LD_INT 86
24922: PUSH
24923: LD_INT 90
24925: PUSH
24926: LD_INT 93
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: ST_TO_ADDR
24984: GO 25467
24986: LD_INT 2
24988: DOUBLE
24989: EQUAL
24990: IFTRUE 24994
24992: GO 25228
24994: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
24995: LD_ADDR_VAR 0 4
24999: PUSH
25000: LD_INT 35
25002: PUSH
25003: LD_INT 45
25005: PUSH
25006: LD_INT 46
25008: PUSH
25009: LD_INT 47
25011: PUSH
25012: LD_INT 82
25014: PUSH
25015: LD_INT 83
25017: PUSH
25018: LD_INT 84
25020: PUSH
25021: LD_INT 85
25023: PUSH
25024: LD_INT 87
25026: PUSH
25027: LD_INT 70
25029: PUSH
25030: LD_INT 1
25032: PUSH
25033: LD_INT 11
25035: PUSH
25036: LD_INT 3
25038: PUSH
25039: LD_INT 4
25041: PUSH
25042: LD_INT 5
25044: PUSH
25045: LD_INT 6
25047: PUSH
25048: LD_INT 15
25050: PUSH
25051: LD_INT 18
25053: PUSH
25054: LD_INT 7
25056: PUSH
25057: LD_INT 17
25059: PUSH
25060: LD_INT 8
25062: PUSH
25063: LD_INT 20
25065: PUSH
25066: LD_INT 21
25068: PUSH
25069: LD_INT 22
25071: PUSH
25072: LD_INT 72
25074: PUSH
25075: LD_INT 26
25077: PUSH
25078: LD_INT 69
25080: PUSH
25081: LD_INT 39
25083: PUSH
25084: LD_INT 40
25086: PUSH
25087: LD_INT 41
25089: PUSH
25090: LD_INT 42
25092: PUSH
25093: LD_INT 43
25095: PUSH
25096: LD_INT 48
25098: PUSH
25099: LD_INT 49
25101: PUSH
25102: LD_INT 50
25104: PUSH
25105: LD_INT 51
25107: PUSH
25108: LD_INT 52
25110: PUSH
25111: LD_INT 53
25113: PUSH
25114: LD_INT 54
25116: PUSH
25117: LD_INT 55
25119: PUSH
25120: LD_INT 56
25122: PUSH
25123: LD_INT 60
25125: PUSH
25126: LD_INT 61
25128: PUSH
25129: LD_INT 62
25131: PUSH
25132: LD_INT 66
25134: PUSH
25135: LD_INT 67
25137: PUSH
25138: LD_INT 68
25140: PUSH
25141: LD_INT 81
25143: PUSH
25144: LD_INT 82
25146: PUSH
25147: LD_INT 83
25149: PUSH
25150: LD_INT 84
25152: PUSH
25153: LD_INT 85
25155: PUSH
25156: LD_INT 87
25158: PUSH
25159: LD_INT 88
25161: PUSH
25162: LD_INT 92
25164: PUSH
25165: LD_INT 94
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: ST_TO_ADDR
25226: GO 25467
25228: LD_INT 3
25230: DOUBLE
25231: EQUAL
25232: IFTRUE 25236
25234: GO 25466
25236: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
25237: LD_ADDR_VAR 0 4
25241: PUSH
25242: LD_INT 46
25244: PUSH
25245: LD_INT 47
25247: PUSH
25248: LD_INT 1
25250: PUSH
25251: LD_INT 2
25253: PUSH
25254: LD_INT 82
25256: PUSH
25257: LD_INT 83
25259: PUSH
25260: LD_INT 84
25262: PUSH
25263: LD_INT 85
25265: PUSH
25266: LD_INT 86
25268: PUSH
25269: LD_INT 11
25271: PUSH
25272: LD_INT 9
25274: PUSH
25275: LD_INT 20
25277: PUSH
25278: LD_INT 19
25280: PUSH
25281: LD_INT 21
25283: PUSH
25284: LD_INT 24
25286: PUSH
25287: LD_INT 22
25289: PUSH
25290: LD_INT 25
25292: PUSH
25293: LD_INT 28
25295: PUSH
25296: LD_INT 29
25298: PUSH
25299: LD_INT 30
25301: PUSH
25302: LD_INT 31
25304: PUSH
25305: LD_INT 37
25307: PUSH
25308: LD_INT 38
25310: PUSH
25311: LD_INT 32
25313: PUSH
25314: LD_INT 27
25316: PUSH
25317: LD_INT 33
25319: PUSH
25320: LD_INT 69
25322: PUSH
25323: LD_INT 39
25325: PUSH
25326: LD_INT 34
25328: PUSH
25329: LD_INT 40
25331: PUSH
25332: LD_INT 71
25334: PUSH
25335: LD_INT 23
25337: PUSH
25338: LD_INT 44
25340: PUSH
25341: LD_INT 48
25343: PUSH
25344: LD_INT 49
25346: PUSH
25347: LD_INT 50
25349: PUSH
25350: LD_INT 51
25352: PUSH
25353: LD_INT 52
25355: PUSH
25356: LD_INT 53
25358: PUSH
25359: LD_INT 54
25361: PUSH
25362: LD_INT 55
25364: PUSH
25365: LD_INT 56
25367: PUSH
25368: LD_INT 57
25370: PUSH
25371: LD_INT 58
25373: PUSH
25374: LD_INT 59
25376: PUSH
25377: LD_INT 63
25379: PUSH
25380: LD_INT 64
25382: PUSH
25383: LD_INT 65
25385: PUSH
25386: LD_INT 82
25388: PUSH
25389: LD_INT 83
25391: PUSH
25392: LD_INT 84
25394: PUSH
25395: LD_INT 85
25397: PUSH
25398: LD_INT 86
25400: PUSH
25401: LD_INT 89
25403: PUSH
25404: LD_INT 91
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: ST_TO_ADDR
25464: GO 25467
25466: POP
// if state > - 1 and state < 3 then
25467: LD_VAR 0 3
25471: PUSH
25472: LD_INT 1
25474: NEG
25475: GREATER
25476: IFFALSE 25488
25478: PUSH
25479: LD_VAR 0 3
25483: PUSH
25484: LD_INT 3
25486: LESS
25487: AND
25488: IFFALSE 25545
// for i in result do
25490: LD_ADDR_VAR 0 5
25494: PUSH
25495: LD_VAR 0 4
25499: PUSH
25500: FOR_IN
25501: IFFALSE 25543
// if GetTech ( i , side ) <> state then
25503: LD_VAR 0 5
25507: PPUSH
25508: LD_VAR 0 1
25512: PPUSH
25513: CALL_OW 321
25517: PUSH
25518: LD_VAR 0 3
25522: NONEQUAL
25523: IFFALSE 25541
// result := result diff i ;
25525: LD_ADDR_VAR 0 4
25529: PUSH
25530: LD_VAR 0 4
25534: PUSH
25535: LD_VAR 0 5
25539: DIFF
25540: ST_TO_ADDR
25541: GO 25500
25543: POP
25544: POP
// end ;
25545: LD_VAR 0 4
25549: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25550: LD_INT 0
25552: PPUSH
25553: PPUSH
25554: PPUSH
// result := true ;
25555: LD_ADDR_VAR 0 3
25559: PUSH
25560: LD_INT 1
25562: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25563: LD_ADDR_VAR 0 5
25567: PUSH
25568: LD_VAR 0 2
25572: PPUSH
25573: CALL_OW 480
25577: ST_TO_ADDR
// if not tmp then
25578: LD_VAR 0 5
25582: NOT
25583: IFFALSE 25587
// exit ;
25585: GO 25636
// for i in tmp do
25587: LD_ADDR_VAR 0 4
25591: PUSH
25592: LD_VAR 0 5
25596: PUSH
25597: FOR_IN
25598: IFFALSE 25634
// if GetTech ( i , side ) <> state_researched then
25600: LD_VAR 0 4
25604: PPUSH
25605: LD_VAR 0 1
25609: PPUSH
25610: CALL_OW 321
25614: PUSH
25615: LD_INT 2
25617: NONEQUAL
25618: IFFALSE 25632
// begin result := false ;
25620: LD_ADDR_VAR 0 3
25624: PUSH
25625: LD_INT 0
25627: ST_TO_ADDR
// exit ;
25628: POP
25629: POP
25630: GO 25636
// end ;
25632: GO 25597
25634: POP
25635: POP
// end ;
25636: LD_VAR 0 3
25640: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25641: LD_INT 0
25643: PPUSH
25644: PPUSH
25645: PPUSH
25646: PPUSH
25647: PPUSH
25648: PPUSH
25649: PPUSH
25650: PPUSH
25651: PPUSH
25652: PPUSH
25653: PPUSH
25654: PPUSH
25655: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25656: LD_VAR 0 1
25660: NOT
25661: IFTRUE 25678
25663: PUSH
25664: LD_VAR 0 1
25668: PPUSH
25669: CALL_OW 257
25673: PUSH
25674: LD_INT 9
25676: NONEQUAL
25677: OR
25678: IFFALSE 25682
// exit ;
25680: GO 26261
// side := GetSide ( unit ) ;
25682: LD_ADDR_VAR 0 9
25686: PUSH
25687: LD_VAR 0 1
25691: PPUSH
25692: CALL_OW 255
25696: ST_TO_ADDR
// tech_space := tech_spacanom ;
25697: LD_ADDR_VAR 0 12
25701: PUSH
25702: LD_INT 29
25704: ST_TO_ADDR
// tech_time := tech_taurad ;
25705: LD_ADDR_VAR 0 13
25709: PUSH
25710: LD_INT 28
25712: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25713: LD_ADDR_VAR 0 11
25717: PUSH
25718: LD_VAR 0 1
25722: PPUSH
25723: CALL_OW 310
25727: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25728: LD_VAR 0 11
25732: PPUSH
25733: CALL_OW 247
25737: PUSH
25738: LD_INT 2
25740: EQUAL
25741: IFFALSE 25745
// exit ;
25743: GO 26261
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25745: LD_ADDR_VAR 0 8
25749: PUSH
25750: LD_INT 81
25752: PUSH
25753: LD_VAR 0 9
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 3
25764: PUSH
25765: LD_INT 21
25767: PUSH
25768: LD_INT 3
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PPUSH
25783: CALL_OW 69
25787: ST_TO_ADDR
// if not tmp then
25788: LD_VAR 0 8
25792: NOT
25793: IFFALSE 25797
// exit ;
25795: GO 26261
// if in_unit then
25797: LD_VAR 0 11
25801: IFFALSE 25825
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25803: LD_ADDR_VAR 0 10
25807: PUSH
25808: LD_VAR 0 8
25812: PPUSH
25813: LD_VAR 0 11
25817: PPUSH
25818: CALL_OW 74
25822: ST_TO_ADDR
25823: GO 25845
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25825: LD_ADDR_VAR 0 10
25829: PUSH
25830: LD_VAR 0 8
25834: PPUSH
25835: LD_VAR 0 1
25839: PPUSH
25840: CALL_OW 74
25844: ST_TO_ADDR
// if not enemy then
25845: LD_VAR 0 10
25849: NOT
25850: IFFALSE 25854
// exit ;
25852: GO 26261
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25854: LD_VAR 0 11
25858: IFFALSE 25880
25860: PUSH
25861: LD_VAR 0 11
25865: PPUSH
25866: LD_VAR 0 10
25870: PPUSH
25871: CALL_OW 296
25875: PUSH
25876: LD_INT 13
25878: GREATER
25879: AND
25880: IFTRUE 25902
25882: PUSH
25883: LD_VAR 0 1
25887: PPUSH
25888: LD_VAR 0 10
25892: PPUSH
25893: CALL_OW 296
25897: PUSH
25898: LD_INT 12
25900: GREATER
25901: OR
25902: IFFALSE 25906
// exit ;
25904: GO 26261
// missile := [ 1 ] ;
25906: LD_ADDR_VAR 0 14
25910: PUSH
25911: LD_INT 1
25913: PUSH
25914: EMPTY
25915: LIST
25916: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25917: LD_VAR 0 9
25921: PPUSH
25922: LD_VAR 0 12
25926: PPUSH
25927: CALL_OW 325
25931: IFFALSE 25960
// missile := Replace ( missile , missile + 1 , 2 ) ;
25933: LD_ADDR_VAR 0 14
25937: PUSH
25938: LD_VAR 0 14
25942: PPUSH
25943: LD_VAR 0 14
25947: PUSH
25948: LD_INT 1
25950: PLUS
25951: PPUSH
25952: LD_INT 2
25954: PPUSH
25955: CALL_OW 1
25959: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25960: LD_VAR 0 9
25964: PPUSH
25965: LD_VAR 0 13
25969: PPUSH
25970: CALL_OW 325
25974: IFFALSE 25998
25976: PUSH
25977: LD_VAR 0 10
25981: PPUSH
25982: CALL_OW 255
25986: PPUSH
25987: LD_VAR 0 13
25991: PPUSH
25992: CALL_OW 325
25996: NOT
25997: AND
25998: IFFALSE 26027
// missile := Replace ( missile , missile + 1 , 3 ) ;
26000: LD_ADDR_VAR 0 14
26004: PUSH
26005: LD_VAR 0 14
26009: PPUSH
26010: LD_VAR 0 14
26014: PUSH
26015: LD_INT 1
26017: PLUS
26018: PPUSH
26019: LD_INT 3
26021: PPUSH
26022: CALL_OW 1
26026: ST_TO_ADDR
// if missile < 2 then
26027: LD_VAR 0 14
26031: PUSH
26032: LD_INT 2
26034: LESS
26035: IFFALSE 26039
// exit ;
26037: GO 26261
// x := GetX ( enemy ) ;
26039: LD_ADDR_VAR 0 4
26043: PUSH
26044: LD_VAR 0 10
26048: PPUSH
26049: CALL_OW 250
26053: ST_TO_ADDR
// y := GetY ( enemy ) ;
26054: LD_ADDR_VAR 0 5
26058: PUSH
26059: LD_VAR 0 10
26063: PPUSH
26064: CALL_OW 251
26068: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26069: LD_ADDR_VAR 0 6
26073: PUSH
26074: LD_VAR 0 4
26078: PUSH
26079: LD_INT 1
26081: NEG
26082: PPUSH
26083: LD_INT 1
26085: PPUSH
26086: CALL_OW 12
26090: PLUS
26091: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26092: LD_ADDR_VAR 0 7
26096: PUSH
26097: LD_VAR 0 5
26101: PUSH
26102: LD_INT 1
26104: NEG
26105: PPUSH
26106: LD_INT 1
26108: PPUSH
26109: CALL_OW 12
26113: PLUS
26114: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26115: LD_VAR 0 6
26119: PPUSH
26120: LD_VAR 0 7
26124: PPUSH
26125: CALL_OW 488
26129: NOT
26130: IFFALSE 26152
// begin _x := x ;
26132: LD_ADDR_VAR 0 6
26136: PUSH
26137: LD_VAR 0 4
26141: ST_TO_ADDR
// _y := y ;
26142: LD_ADDR_VAR 0 7
26146: PUSH
26147: LD_VAR 0 5
26151: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26152: LD_ADDR_VAR 0 3
26156: PUSH
26157: LD_INT 1
26159: PPUSH
26160: LD_VAR 0 14
26164: PPUSH
26165: CALL_OW 12
26169: ST_TO_ADDR
// case i of 1 :
26170: LD_VAR 0 3
26174: PUSH
26175: LD_INT 1
26177: DOUBLE
26178: EQUAL
26179: IFTRUE 26183
26181: GO 26200
26183: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26184: LD_VAR 0 1
26188: PPUSH
26189: LD_VAR 0 10
26193: PPUSH
26194: CALL_OW 115
26198: GO 26261
26200: LD_INT 2
26202: DOUBLE
26203: EQUAL
26204: IFTRUE 26208
26206: GO 26230
26208: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26209: LD_VAR 0 1
26213: PPUSH
26214: LD_VAR 0 6
26218: PPUSH
26219: LD_VAR 0 7
26223: PPUSH
26224: CALL_OW 153
26228: GO 26261
26230: LD_INT 3
26232: DOUBLE
26233: EQUAL
26234: IFTRUE 26238
26236: GO 26260
26238: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26239: LD_VAR 0 1
26243: PPUSH
26244: LD_VAR 0 6
26248: PPUSH
26249: LD_VAR 0 7
26253: PPUSH
26254: CALL_OW 154
26258: GO 26261
26260: POP
// end ;
26261: LD_VAR 0 2
26265: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26266: LD_INT 0
26268: PPUSH
26269: PPUSH
26270: PPUSH
26271: PPUSH
26272: PPUSH
26273: PPUSH
// if not unit or not building then
26274: LD_VAR 0 1
26278: NOT
26279: IFTRUE 26288
26281: PUSH
26282: LD_VAR 0 2
26286: NOT
26287: OR
26288: IFFALSE 26292
// exit ;
26290: GO 26450
// x := GetX ( building ) ;
26292: LD_ADDR_VAR 0 5
26296: PUSH
26297: LD_VAR 0 2
26301: PPUSH
26302: CALL_OW 250
26306: ST_TO_ADDR
// y := GetY ( building ) ;
26307: LD_ADDR_VAR 0 6
26311: PUSH
26312: LD_VAR 0 2
26316: PPUSH
26317: CALL_OW 251
26321: ST_TO_ADDR
// for i := 0 to 5 do
26322: LD_ADDR_VAR 0 4
26326: PUSH
26327: DOUBLE
26328: LD_INT 0
26330: DEC
26331: ST_TO_ADDR
26332: LD_INT 5
26334: PUSH
26335: FOR_TO
26336: IFFALSE 26448
// begin _x := ShiftX ( x , i , 3 ) ;
26338: LD_ADDR_VAR 0 7
26342: PUSH
26343: LD_VAR 0 5
26347: PPUSH
26348: LD_VAR 0 4
26352: PPUSH
26353: LD_INT 3
26355: PPUSH
26356: CALL_OW 272
26360: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26361: LD_ADDR_VAR 0 8
26365: PUSH
26366: LD_VAR 0 6
26370: PPUSH
26371: LD_VAR 0 4
26375: PPUSH
26376: LD_INT 3
26378: PPUSH
26379: CALL_OW 273
26383: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26384: LD_VAR 0 7
26388: PPUSH
26389: LD_VAR 0 8
26393: PPUSH
26394: CALL_OW 488
26398: NOT
26399: IFFALSE 26403
// continue ;
26401: GO 26335
// if HexInfo ( _x , _y ) = 0 then
26403: LD_VAR 0 7
26407: PPUSH
26408: LD_VAR 0 8
26412: PPUSH
26413: CALL_OW 428
26417: PUSH
26418: LD_INT 0
26420: EQUAL
26421: IFFALSE 26446
// begin ComMoveXY ( unit , _x , _y ) ;
26423: LD_VAR 0 1
26427: PPUSH
26428: LD_VAR 0 7
26432: PPUSH
26433: LD_VAR 0 8
26437: PPUSH
26438: CALL_OW 111
// exit ;
26442: POP
26443: POP
26444: GO 26450
// end ; end ;
26446: GO 26335
26448: POP
26449: POP
// end ;
26450: LD_VAR 0 3
26454: RET
// export function ScanBase ( side , base_area ) ; begin
26455: LD_INT 0
26457: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26458: LD_ADDR_VAR 0 3
26462: PUSH
26463: LD_VAR 0 2
26467: PPUSH
26468: LD_INT 81
26470: PUSH
26471: LD_VAR 0 1
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PPUSH
26480: CALL_OW 70
26484: ST_TO_ADDR
// end ;
26485: LD_VAR 0 3
26489: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26490: LD_INT 0
26492: PPUSH
26493: PPUSH
26494: PPUSH
26495: PPUSH
// result := false ;
26496: LD_ADDR_VAR 0 2
26500: PUSH
26501: LD_INT 0
26503: ST_TO_ADDR
// side := GetSide ( unit ) ;
26504: LD_ADDR_VAR 0 3
26508: PUSH
26509: LD_VAR 0 1
26513: PPUSH
26514: CALL_OW 255
26518: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26519: LD_ADDR_VAR 0 4
26523: PUSH
26524: LD_VAR 0 1
26528: PPUSH
26529: CALL_OW 248
26533: ST_TO_ADDR
// case nat of 1 :
26534: LD_VAR 0 4
26538: PUSH
26539: LD_INT 1
26541: DOUBLE
26542: EQUAL
26543: IFTRUE 26547
26545: GO 26558
26547: POP
// tech := tech_lassight ; 2 :
26548: LD_ADDR_VAR 0 5
26552: PUSH
26553: LD_INT 12
26555: ST_TO_ADDR
26556: GO 26597
26558: LD_INT 2
26560: DOUBLE
26561: EQUAL
26562: IFTRUE 26566
26564: GO 26577
26566: POP
// tech := tech_mortar ; 3 :
26567: LD_ADDR_VAR 0 5
26571: PUSH
26572: LD_INT 41
26574: ST_TO_ADDR
26575: GO 26597
26577: LD_INT 3
26579: DOUBLE
26580: EQUAL
26581: IFTRUE 26585
26583: GO 26596
26585: POP
// tech := tech_bazooka ; end ;
26586: LD_ADDR_VAR 0 5
26590: PUSH
26591: LD_INT 44
26593: ST_TO_ADDR
26594: GO 26597
26596: POP
// if Researched ( side , tech ) then
26597: LD_VAR 0 3
26601: PPUSH
26602: LD_VAR 0 5
26606: PPUSH
26607: CALL_OW 325
26611: IFFALSE 26638
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26613: LD_ADDR_VAR 0 2
26617: PUSH
26618: LD_INT 5
26620: PUSH
26621: LD_INT 8
26623: PUSH
26624: LD_INT 9
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: LIST
26631: PUSH
26632: LD_VAR 0 4
26636: ARRAY
26637: ST_TO_ADDR
// end ;
26638: LD_VAR 0 2
26642: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26643: LD_INT 0
26645: PPUSH
26646: PPUSH
26647: PPUSH
// if not mines then
26648: LD_VAR 0 2
26652: NOT
26653: IFFALSE 26657
// exit ;
26655: GO 26801
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26657: LD_ADDR_VAR 0 5
26661: PUSH
26662: LD_INT 81
26664: PUSH
26665: LD_VAR 0 1
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 3
26676: PUSH
26677: LD_INT 21
26679: PUSH
26680: LD_INT 3
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PPUSH
26695: CALL_OW 69
26699: ST_TO_ADDR
// for i in mines do
26700: LD_ADDR_VAR 0 4
26704: PUSH
26705: LD_VAR 0 2
26709: PUSH
26710: FOR_IN
26711: IFFALSE 26799
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26713: LD_VAR 0 4
26717: PUSH
26718: LD_INT 1
26720: ARRAY
26721: PPUSH
26722: LD_VAR 0 4
26726: PUSH
26727: LD_INT 2
26729: ARRAY
26730: PPUSH
26731: CALL_OW 458
26735: NOT
26736: IFFALSE 26740
// continue ;
26738: GO 26710
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26740: LD_VAR 0 4
26744: PUSH
26745: LD_INT 1
26747: ARRAY
26748: PPUSH
26749: LD_VAR 0 4
26753: PUSH
26754: LD_INT 2
26756: ARRAY
26757: PPUSH
26758: CALL_OW 428
26762: PUSH
26763: LD_VAR 0 5
26767: IN
26768: IFFALSE 26797
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26770: LD_VAR 0 4
26774: PUSH
26775: LD_INT 1
26777: ARRAY
26778: PPUSH
26779: LD_VAR 0 4
26783: PUSH
26784: LD_INT 2
26786: ARRAY
26787: PPUSH
26788: LD_VAR 0 1
26792: PPUSH
26793: CALL_OW 456
// end ;
26797: GO 26710
26799: POP
26800: POP
// end ;
26801: LD_VAR 0 3
26805: RET
// export function Count ( array ) ; begin
26806: LD_INT 0
26808: PPUSH
// result := array + 0 ;
26809: LD_ADDR_VAR 0 2
26813: PUSH
26814: LD_VAR 0 1
26818: PUSH
26819: LD_INT 0
26821: PLUS
26822: ST_TO_ADDR
// end ;
26823: LD_VAR 0 2
26827: RET
// export function IsEmpty ( building ) ; begin
26828: LD_INT 0
26830: PPUSH
// if not building then
26831: LD_VAR 0 1
26835: NOT
26836: IFFALSE 26840
// exit ;
26838: GO 26883
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26840: LD_ADDR_VAR 0 2
26844: PUSH
26845: LD_VAR 0 1
26849: PUSH
26850: LD_INT 22
26852: PUSH
26853: LD_VAR 0 1
26857: PPUSH
26858: CALL_OW 255
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 58
26869: PUSH
26870: EMPTY
26871: LIST
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PPUSH
26877: CALL_OW 69
26881: IN
26882: ST_TO_ADDR
// end ;
26883: LD_VAR 0 2
26887: RET
// export function IsNotFull ( building ) ; var places ; begin
26888: LD_INT 0
26890: PPUSH
26891: PPUSH
// if not building then
26892: LD_VAR 0 1
26896: NOT
26897: IFFALSE 26901
// exit ;
26899: GO 26929
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
26901: LD_ADDR_VAR 0 2
26905: PUSH
26906: LD_VAR 0 1
26910: PPUSH
26911: LD_INT 3
26913: PUSH
26914: LD_INT 62
26916: PUSH
26917: EMPTY
26918: LIST
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PPUSH
26924: CALL_OW 72
26928: ST_TO_ADDR
// end ;
26929: LD_VAR 0 2
26933: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26934: LD_INT 0
26936: PPUSH
26937: PPUSH
26938: PPUSH
26939: PPUSH
// tmp := [ ] ;
26940: LD_ADDR_VAR 0 3
26944: PUSH
26945: EMPTY
26946: ST_TO_ADDR
// list := [ ] ;
26947: LD_ADDR_VAR 0 5
26951: PUSH
26952: EMPTY
26953: ST_TO_ADDR
// for i = 16 to 25 do
26954: LD_ADDR_VAR 0 4
26958: PUSH
26959: DOUBLE
26960: LD_INT 16
26962: DEC
26963: ST_TO_ADDR
26964: LD_INT 25
26966: PUSH
26967: FOR_TO
26968: IFFALSE 27041
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26970: LD_ADDR_VAR 0 3
26974: PUSH
26975: LD_VAR 0 3
26979: PUSH
26980: LD_INT 22
26982: PUSH
26983: LD_VAR 0 1
26987: PPUSH
26988: CALL_OW 255
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 91
26999: PUSH
27000: LD_VAR 0 1
27004: PUSH
27005: LD_INT 6
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: LIST
27012: PUSH
27013: LD_INT 30
27015: PUSH
27016: LD_VAR 0 4
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: LIST
27029: PUSH
27030: EMPTY
27031: LIST
27032: PPUSH
27033: CALL_OW 69
27037: ADD
27038: ST_TO_ADDR
27039: GO 26967
27041: POP
27042: POP
// for i = 1 to tmp do
27043: LD_ADDR_VAR 0 4
27047: PUSH
27048: DOUBLE
27049: LD_INT 1
27051: DEC
27052: ST_TO_ADDR
27053: LD_VAR 0 3
27057: PUSH
27058: FOR_TO
27059: IFFALSE 27147
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27061: LD_ADDR_VAR 0 5
27065: PUSH
27066: LD_VAR 0 5
27070: PUSH
27071: LD_VAR 0 3
27075: PUSH
27076: LD_VAR 0 4
27080: ARRAY
27081: PPUSH
27082: CALL_OW 266
27086: PUSH
27087: LD_VAR 0 3
27091: PUSH
27092: LD_VAR 0 4
27096: ARRAY
27097: PPUSH
27098: CALL_OW 250
27102: PUSH
27103: LD_VAR 0 3
27107: PUSH
27108: LD_VAR 0 4
27112: ARRAY
27113: PPUSH
27114: CALL_OW 251
27118: PUSH
27119: LD_VAR 0 3
27123: PUSH
27124: LD_VAR 0 4
27128: ARRAY
27129: PPUSH
27130: CALL_OW 254
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: PUSH
27141: EMPTY
27142: LIST
27143: ADD
27144: ST_TO_ADDR
27145: GO 27058
27147: POP
27148: POP
// result := list ;
27149: LD_ADDR_VAR 0 2
27153: PUSH
27154: LD_VAR 0 5
27158: ST_TO_ADDR
// end ;
27159: LD_VAR 0 2
27163: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27164: LD_INT 0
27166: PPUSH
27167: PPUSH
27168: PPUSH
27169: PPUSH
27170: PPUSH
27171: PPUSH
27172: PPUSH
// if not factory then
27173: LD_VAR 0 1
27177: NOT
27178: IFFALSE 27182
// exit ;
27180: GO 27785
// if control = control_apeman then
27182: LD_VAR 0 4
27186: PUSH
27187: LD_INT 5
27189: EQUAL
27190: IFFALSE 27299
// begin tmp := UnitsInside ( factory ) ;
27192: LD_ADDR_VAR 0 8
27196: PUSH
27197: LD_VAR 0 1
27201: PPUSH
27202: CALL_OW 313
27206: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27207: LD_VAR 0 8
27211: PPUSH
27212: LD_INT 25
27214: PUSH
27215: LD_INT 12
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PPUSH
27222: CALL_OW 72
27226: NOT
27227: IFFALSE 27237
// control := control_manual ;
27229: LD_ADDR_VAR 0 4
27233: PUSH
27234: LD_INT 1
27236: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27237: LD_ADDR_VAR 0 8
27241: PUSH
27242: LD_VAR 0 1
27246: PPUSH
27247: CALL 26934 0 1
27251: ST_TO_ADDR
// if tmp then
27252: LD_VAR 0 8
27256: IFFALSE 27299
// begin for i in tmp do
27258: LD_ADDR_VAR 0 7
27262: PUSH
27263: LD_VAR 0 8
27267: PUSH
27268: FOR_IN
27269: IFFALSE 27297
// if i [ 1 ] = b_ext_radio then
27271: LD_VAR 0 7
27275: PUSH
27276: LD_INT 1
27278: ARRAY
27279: PUSH
27280: LD_INT 22
27282: EQUAL
27283: IFFALSE 27295
// begin control := control_remote ;
27285: LD_ADDR_VAR 0 4
27289: PUSH
27290: LD_INT 2
27292: ST_TO_ADDR
// break ;
27293: GO 27297
// end ;
27295: GO 27268
27297: POP
27298: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27299: LD_VAR 0 1
27303: PPUSH
27304: LD_VAR 0 2
27308: PPUSH
27309: LD_VAR 0 3
27313: PPUSH
27314: LD_VAR 0 4
27318: PPUSH
27319: LD_VAR 0 5
27323: PPUSH
27324: CALL_OW 448
27328: IFFALSE 27363
// begin result := [ chassis , engine , control , weapon ] ;
27330: LD_ADDR_VAR 0 6
27334: PUSH
27335: LD_VAR 0 2
27339: PUSH
27340: LD_VAR 0 3
27344: PUSH
27345: LD_VAR 0 4
27349: PUSH
27350: LD_VAR 0 5
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: ST_TO_ADDR
// exit ;
27361: GO 27785
// end ; _chassis := AvailableChassisList ( factory ) ;
27363: LD_ADDR_VAR 0 9
27367: PUSH
27368: LD_VAR 0 1
27372: PPUSH
27373: CALL_OW 475
27377: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27378: LD_ADDR_VAR 0 11
27382: PUSH
27383: LD_VAR 0 1
27387: PPUSH
27388: CALL_OW 476
27392: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27393: LD_ADDR_VAR 0 12
27397: PUSH
27398: LD_VAR 0 1
27402: PPUSH
27403: CALL_OW 477
27407: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27408: LD_ADDR_VAR 0 10
27412: PUSH
27413: LD_VAR 0 1
27417: PPUSH
27418: CALL_OW 478
27422: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27423: LD_VAR 0 9
27427: NOT
27428: IFTRUE 27437
27430: PUSH
27431: LD_VAR 0 11
27435: NOT
27436: OR
27437: IFTRUE 27446
27439: PUSH
27440: LD_VAR 0 12
27444: NOT
27445: OR
27446: IFTRUE 27455
27448: PUSH
27449: LD_VAR 0 10
27453: NOT
27454: OR
27455: IFFALSE 27490
// begin result := [ chassis , engine , control , weapon ] ;
27457: LD_ADDR_VAR 0 6
27461: PUSH
27462: LD_VAR 0 2
27466: PUSH
27467: LD_VAR 0 3
27471: PUSH
27472: LD_VAR 0 4
27476: PUSH
27477: LD_VAR 0 5
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: ST_TO_ADDR
// exit ;
27488: GO 27785
// end ; if not chassis in _chassis then
27490: LD_VAR 0 2
27494: PUSH
27495: LD_VAR 0 9
27499: IN
27500: NOT
27501: IFFALSE 27527
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27503: LD_ADDR_VAR 0 2
27507: PUSH
27508: LD_VAR 0 9
27512: PUSH
27513: LD_INT 1
27515: PPUSH
27516: LD_VAR 0 9
27520: PPUSH
27521: CALL_OW 12
27525: ARRAY
27526: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27527: LD_VAR 0 2
27531: PPUSH
27532: LD_VAR 0 3
27536: PPUSH
27537: CALL 27790 0 2
27541: NOT
27542: IFFALSE 27603
// repeat engine := _engine [ 1 ] ;
27544: LD_ADDR_VAR 0 3
27548: PUSH
27549: LD_VAR 0 11
27553: PUSH
27554: LD_INT 1
27556: ARRAY
27557: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27558: LD_ADDR_VAR 0 11
27562: PUSH
27563: LD_VAR 0 11
27567: PPUSH
27568: LD_INT 1
27570: PPUSH
27571: CALL_OW 3
27575: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27576: LD_VAR 0 2
27580: PPUSH
27581: LD_VAR 0 3
27585: PPUSH
27586: CALL 27790 0 2
27590: IFTRUE 27601
27592: PUSH
27593: LD_VAR 0 11
27597: PUSH
27598: EMPTY
27599: EQUAL
27600: OR
27601: IFFALSE 27544
// if not control in _control then
27603: LD_VAR 0 4
27607: PUSH
27608: LD_VAR 0 12
27612: IN
27613: NOT
27614: IFFALSE 27640
// control := _control [ rand ( 1 , _control ) ] ;
27616: LD_ADDR_VAR 0 4
27620: PUSH
27621: LD_VAR 0 12
27625: PUSH
27626: LD_INT 1
27628: PPUSH
27629: LD_VAR 0 12
27633: PPUSH
27634: CALL_OW 12
27638: ARRAY
27639: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27640: LD_VAR 0 2
27644: PPUSH
27645: LD_VAR 0 5
27649: PPUSH
27650: CALL 28012 0 2
27654: NOT
27655: IFFALSE 27716
// repeat weapon := _weapon [ 1 ] ;
27657: LD_ADDR_VAR 0 5
27661: PUSH
27662: LD_VAR 0 10
27666: PUSH
27667: LD_INT 1
27669: ARRAY
27670: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27671: LD_ADDR_VAR 0 10
27675: PUSH
27676: LD_VAR 0 10
27680: PPUSH
27681: LD_INT 1
27683: PPUSH
27684: CALL_OW 3
27688: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27689: LD_VAR 0 2
27693: PPUSH
27694: LD_VAR 0 5
27698: PPUSH
27699: CALL 28012 0 2
27703: IFTRUE 27714
27705: PUSH
27706: LD_VAR 0 10
27710: PUSH
27711: EMPTY
27712: EQUAL
27713: OR
27714: IFFALSE 27657
// result := [ ] ;
27716: LD_ADDR_VAR 0 6
27720: PUSH
27721: EMPTY
27722: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27723: LD_VAR 0 1
27727: PPUSH
27728: LD_VAR 0 2
27732: PPUSH
27733: LD_VAR 0 3
27737: PPUSH
27738: LD_VAR 0 4
27742: PPUSH
27743: LD_VAR 0 5
27747: PPUSH
27748: CALL_OW 448
27752: IFFALSE 27785
// result := [ chassis , engine , control , weapon ] ;
27754: LD_ADDR_VAR 0 6
27758: PUSH
27759: LD_VAR 0 2
27763: PUSH
27764: LD_VAR 0 3
27768: PUSH
27769: LD_VAR 0 4
27773: PUSH
27774: LD_VAR 0 5
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: ST_TO_ADDR
// end ;
27785: LD_VAR 0 6
27789: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27790: LD_INT 0
27792: PPUSH
// if not chassis or not engine then
27793: LD_VAR 0 1
27797: NOT
27798: IFTRUE 27807
27800: PUSH
27801: LD_VAR 0 2
27805: NOT
27806: OR
27807: IFFALSE 27811
// exit ;
27809: GO 28007
// case engine of engine_solar :
27811: LD_VAR 0 2
27815: PUSH
27816: LD_INT 2
27818: DOUBLE
27819: EQUAL
27820: IFTRUE 27824
27822: GO 27862
27824: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27825: LD_ADDR_VAR 0 3
27829: PUSH
27830: LD_INT 11
27832: PUSH
27833: LD_INT 12
27835: PUSH
27836: LD_INT 13
27838: PUSH
27839: LD_INT 14
27841: PUSH
27842: LD_INT 1
27844: PUSH
27845: LD_INT 2
27847: PUSH
27848: LD_INT 3
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: ST_TO_ADDR
27860: GO 27991
27862: LD_INT 1
27864: DOUBLE
27865: EQUAL
27866: IFTRUE 27870
27868: GO 27932
27870: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27871: LD_ADDR_VAR 0 3
27875: PUSH
27876: LD_INT 11
27878: PUSH
27879: LD_INT 12
27881: PUSH
27882: LD_INT 13
27884: PUSH
27885: LD_INT 14
27887: PUSH
27888: LD_INT 1
27890: PUSH
27891: LD_INT 2
27893: PUSH
27894: LD_INT 3
27896: PUSH
27897: LD_INT 4
27899: PUSH
27900: LD_INT 5
27902: PUSH
27903: LD_INT 21
27905: PUSH
27906: LD_INT 23
27908: PUSH
27909: LD_INT 22
27911: PUSH
27912: LD_INT 24
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: ST_TO_ADDR
27930: GO 27991
27932: LD_INT 3
27934: DOUBLE
27935: EQUAL
27936: IFTRUE 27940
27938: GO 27990
27940: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27941: LD_ADDR_VAR 0 3
27945: PUSH
27946: LD_INT 13
27948: PUSH
27949: LD_INT 14
27951: PUSH
27952: LD_INT 2
27954: PUSH
27955: LD_INT 3
27957: PUSH
27958: LD_INT 4
27960: PUSH
27961: LD_INT 5
27963: PUSH
27964: LD_INT 21
27966: PUSH
27967: LD_INT 22
27969: PUSH
27970: LD_INT 23
27972: PUSH
27973: LD_INT 24
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: ST_TO_ADDR
27988: GO 27991
27990: POP
// result := ( chassis in result ) ;
27991: LD_ADDR_VAR 0 3
27995: PUSH
27996: LD_VAR 0 1
28000: PUSH
28001: LD_VAR 0 3
28005: IN
28006: ST_TO_ADDR
// end ;
28007: LD_VAR 0 3
28011: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28012: LD_INT 0
28014: PPUSH
// if not chassis or not weapon then
28015: LD_VAR 0 1
28019: NOT
28020: IFTRUE 28029
28022: PUSH
28023: LD_VAR 0 2
28027: NOT
28028: OR
28029: IFFALSE 28033
// exit ;
28031: GO 29127
// case weapon of us_machine_gun :
28033: LD_VAR 0 2
28037: PUSH
28038: LD_INT 2
28040: DOUBLE
28041: EQUAL
28042: IFTRUE 28046
28044: GO 28076
28046: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28047: LD_ADDR_VAR 0 3
28051: PUSH
28052: LD_INT 1
28054: PUSH
28055: LD_INT 2
28057: PUSH
28058: LD_INT 3
28060: PUSH
28061: LD_INT 4
28063: PUSH
28064: LD_INT 5
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: ST_TO_ADDR
28074: GO 29111
28076: LD_INT 3
28078: DOUBLE
28079: EQUAL
28080: IFTRUE 28084
28082: GO 28114
28084: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28085: LD_ADDR_VAR 0 3
28089: PUSH
28090: LD_INT 1
28092: PUSH
28093: LD_INT 2
28095: PUSH
28096: LD_INT 3
28098: PUSH
28099: LD_INT 4
28101: PUSH
28102: LD_INT 5
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: ST_TO_ADDR
28112: GO 29111
28114: LD_INT 11
28116: DOUBLE
28117: EQUAL
28118: IFTRUE 28122
28120: GO 28152
28122: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28123: LD_ADDR_VAR 0 3
28127: PUSH
28128: LD_INT 1
28130: PUSH
28131: LD_INT 2
28133: PUSH
28134: LD_INT 3
28136: PUSH
28137: LD_INT 4
28139: PUSH
28140: LD_INT 5
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: ST_TO_ADDR
28150: GO 29111
28152: LD_INT 4
28154: DOUBLE
28155: EQUAL
28156: IFTRUE 28160
28158: GO 28186
28160: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28161: LD_ADDR_VAR 0 3
28165: PUSH
28166: LD_INT 2
28168: PUSH
28169: LD_INT 3
28171: PUSH
28172: LD_INT 4
28174: PUSH
28175: LD_INT 5
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: ST_TO_ADDR
28184: GO 29111
28186: LD_INT 5
28188: DOUBLE
28189: EQUAL
28190: IFTRUE 28194
28192: GO 28220
28194: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28195: LD_ADDR_VAR 0 3
28199: PUSH
28200: LD_INT 2
28202: PUSH
28203: LD_INT 3
28205: PUSH
28206: LD_INT 4
28208: PUSH
28209: LD_INT 5
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: ST_TO_ADDR
28218: GO 29111
28220: LD_INT 9
28222: DOUBLE
28223: EQUAL
28224: IFTRUE 28228
28226: GO 28254
28228: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28229: LD_ADDR_VAR 0 3
28233: PUSH
28234: LD_INT 2
28236: PUSH
28237: LD_INT 3
28239: PUSH
28240: LD_INT 4
28242: PUSH
28243: LD_INT 5
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: ST_TO_ADDR
28252: GO 29111
28254: LD_INT 7
28256: DOUBLE
28257: EQUAL
28258: IFTRUE 28262
28260: GO 28288
28262: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28263: LD_ADDR_VAR 0 3
28267: PUSH
28268: LD_INT 2
28270: PUSH
28271: LD_INT 3
28273: PUSH
28274: LD_INT 4
28276: PUSH
28277: LD_INT 5
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: ST_TO_ADDR
28286: GO 29111
28288: LD_INT 12
28290: DOUBLE
28291: EQUAL
28292: IFTRUE 28296
28294: GO 28322
28296: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28297: LD_ADDR_VAR 0 3
28301: PUSH
28302: LD_INT 2
28304: PUSH
28305: LD_INT 3
28307: PUSH
28308: LD_INT 4
28310: PUSH
28311: LD_INT 5
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: ST_TO_ADDR
28320: GO 29111
28322: LD_INT 13
28324: DOUBLE
28325: EQUAL
28326: IFTRUE 28330
28328: GO 28356
28330: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28331: LD_ADDR_VAR 0 3
28335: PUSH
28336: LD_INT 2
28338: PUSH
28339: LD_INT 3
28341: PUSH
28342: LD_INT 4
28344: PUSH
28345: LD_INT 5
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: ST_TO_ADDR
28354: GO 29111
28356: LD_INT 14
28358: DOUBLE
28359: EQUAL
28360: IFTRUE 28364
28362: GO 28382
28364: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28365: LD_ADDR_VAR 0 3
28369: PUSH
28370: LD_INT 4
28372: PUSH
28373: LD_INT 5
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: ST_TO_ADDR
28380: GO 29111
28382: LD_INT 6
28384: DOUBLE
28385: EQUAL
28386: IFTRUE 28390
28388: GO 28408
28390: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28391: LD_ADDR_VAR 0 3
28395: PUSH
28396: LD_INT 4
28398: PUSH
28399: LD_INT 5
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: ST_TO_ADDR
28406: GO 29111
28408: LD_INT 10
28410: DOUBLE
28411: EQUAL
28412: IFTRUE 28416
28414: GO 28434
28416: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28417: LD_ADDR_VAR 0 3
28421: PUSH
28422: LD_INT 4
28424: PUSH
28425: LD_INT 5
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: ST_TO_ADDR
28432: GO 29111
28434: LD_INT 22
28436: DOUBLE
28437: EQUAL
28438: IFTRUE 28442
28440: GO 28468
28442: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28443: LD_ADDR_VAR 0 3
28447: PUSH
28448: LD_INT 11
28450: PUSH
28451: LD_INT 12
28453: PUSH
28454: LD_INT 13
28456: PUSH
28457: LD_INT 14
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: ST_TO_ADDR
28466: GO 29111
28468: LD_INT 23
28470: DOUBLE
28471: EQUAL
28472: IFTRUE 28476
28474: GO 28502
28476: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28477: LD_ADDR_VAR 0 3
28481: PUSH
28482: LD_INT 11
28484: PUSH
28485: LD_INT 12
28487: PUSH
28488: LD_INT 13
28490: PUSH
28491: LD_INT 14
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: ST_TO_ADDR
28500: GO 29111
28502: LD_INT 24
28504: DOUBLE
28505: EQUAL
28506: IFTRUE 28510
28508: GO 28536
28510: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28511: LD_ADDR_VAR 0 3
28515: PUSH
28516: LD_INT 11
28518: PUSH
28519: LD_INT 12
28521: PUSH
28522: LD_INT 13
28524: PUSH
28525: LD_INT 14
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: ST_TO_ADDR
28534: GO 29111
28536: LD_INT 30
28538: DOUBLE
28539: EQUAL
28540: IFTRUE 28544
28542: GO 28570
28544: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28545: LD_ADDR_VAR 0 3
28549: PUSH
28550: LD_INT 11
28552: PUSH
28553: LD_INT 12
28555: PUSH
28556: LD_INT 13
28558: PUSH
28559: LD_INT 14
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: ST_TO_ADDR
28568: GO 29111
28570: LD_INT 25
28572: DOUBLE
28573: EQUAL
28574: IFTRUE 28578
28576: GO 28596
28578: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28579: LD_ADDR_VAR 0 3
28583: PUSH
28584: LD_INT 13
28586: PUSH
28587: LD_INT 14
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: ST_TO_ADDR
28594: GO 29111
28596: LD_INT 27
28598: DOUBLE
28599: EQUAL
28600: IFTRUE 28604
28602: GO 28622
28604: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28605: LD_ADDR_VAR 0 3
28609: PUSH
28610: LD_INT 13
28612: PUSH
28613: LD_INT 14
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: ST_TO_ADDR
28620: GO 29111
28622: LD_INT 92
28624: DOUBLE
28625: EQUAL
28626: IFTRUE 28630
28628: GO 28656
28630: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28631: LD_ADDR_VAR 0 3
28635: PUSH
28636: LD_INT 11
28638: PUSH
28639: LD_INT 12
28641: PUSH
28642: LD_INT 13
28644: PUSH
28645: LD_INT 14
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: ST_TO_ADDR
28654: GO 29111
28656: LD_INT 28
28658: DOUBLE
28659: EQUAL
28660: IFTRUE 28664
28662: GO 28682
28664: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28665: LD_ADDR_VAR 0 3
28669: PUSH
28670: LD_INT 13
28672: PUSH
28673: LD_INT 14
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: ST_TO_ADDR
28680: GO 29111
28682: LD_INT 29
28684: DOUBLE
28685: EQUAL
28686: IFTRUE 28690
28688: GO 28708
28690: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28691: LD_ADDR_VAR 0 3
28695: PUSH
28696: LD_INT 13
28698: PUSH
28699: LD_INT 14
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: ST_TO_ADDR
28706: GO 29111
28708: LD_INT 31
28710: DOUBLE
28711: EQUAL
28712: IFTRUE 28716
28714: GO 28734
28716: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28717: LD_ADDR_VAR 0 3
28721: PUSH
28722: LD_INT 13
28724: PUSH
28725: LD_INT 14
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: ST_TO_ADDR
28732: GO 29111
28734: LD_INT 26
28736: DOUBLE
28737: EQUAL
28738: IFTRUE 28742
28740: GO 28760
28742: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28743: LD_ADDR_VAR 0 3
28747: PUSH
28748: LD_INT 13
28750: PUSH
28751: LD_INT 14
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: ST_TO_ADDR
28758: GO 29111
28760: LD_INT 42
28762: DOUBLE
28763: EQUAL
28764: IFTRUE 28768
28766: GO 28794
28768: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28769: LD_ADDR_VAR 0 3
28773: PUSH
28774: LD_INT 21
28776: PUSH
28777: LD_INT 22
28779: PUSH
28780: LD_INT 23
28782: PUSH
28783: LD_INT 24
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: ST_TO_ADDR
28792: GO 29111
28794: LD_INT 43
28796: DOUBLE
28797: EQUAL
28798: IFTRUE 28802
28800: GO 28828
28802: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28803: LD_ADDR_VAR 0 3
28807: PUSH
28808: LD_INT 21
28810: PUSH
28811: LD_INT 22
28813: PUSH
28814: LD_INT 23
28816: PUSH
28817: LD_INT 24
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: ST_TO_ADDR
28826: GO 29111
28828: LD_INT 44
28830: DOUBLE
28831: EQUAL
28832: IFTRUE 28836
28834: GO 28862
28836: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28837: LD_ADDR_VAR 0 3
28841: PUSH
28842: LD_INT 21
28844: PUSH
28845: LD_INT 22
28847: PUSH
28848: LD_INT 23
28850: PUSH
28851: LD_INT 24
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: ST_TO_ADDR
28860: GO 29111
28862: LD_INT 45
28864: DOUBLE
28865: EQUAL
28866: IFTRUE 28870
28868: GO 28896
28870: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28871: LD_ADDR_VAR 0 3
28875: PUSH
28876: LD_INT 21
28878: PUSH
28879: LD_INT 22
28881: PUSH
28882: LD_INT 23
28884: PUSH
28885: LD_INT 24
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: ST_TO_ADDR
28894: GO 29111
28896: LD_INT 49
28898: DOUBLE
28899: EQUAL
28900: IFTRUE 28904
28902: GO 28930
28904: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28905: LD_ADDR_VAR 0 3
28909: PUSH
28910: LD_INT 21
28912: PUSH
28913: LD_INT 22
28915: PUSH
28916: LD_INT 23
28918: PUSH
28919: LD_INT 24
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: ST_TO_ADDR
28928: GO 29111
28930: LD_INT 51
28932: DOUBLE
28933: EQUAL
28934: IFTRUE 28938
28936: GO 28964
28938: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28939: LD_ADDR_VAR 0 3
28943: PUSH
28944: LD_INT 21
28946: PUSH
28947: LD_INT 22
28949: PUSH
28950: LD_INT 23
28952: PUSH
28953: LD_INT 24
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: ST_TO_ADDR
28962: GO 29111
28964: LD_INT 52
28966: DOUBLE
28967: EQUAL
28968: IFTRUE 28972
28970: GO 28998
28972: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28973: LD_ADDR_VAR 0 3
28977: PUSH
28978: LD_INT 21
28980: PUSH
28981: LD_INT 22
28983: PUSH
28984: LD_INT 23
28986: PUSH
28987: LD_INT 24
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: ST_TO_ADDR
28996: GO 29111
28998: LD_INT 53
29000: DOUBLE
29001: EQUAL
29002: IFTRUE 29006
29004: GO 29024
29006: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29007: LD_ADDR_VAR 0 3
29011: PUSH
29012: LD_INT 23
29014: PUSH
29015: LD_INT 24
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: ST_TO_ADDR
29022: GO 29111
29024: LD_INT 46
29026: DOUBLE
29027: EQUAL
29028: IFTRUE 29032
29030: GO 29050
29032: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29033: LD_ADDR_VAR 0 3
29037: PUSH
29038: LD_INT 23
29040: PUSH
29041: LD_INT 24
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: ST_TO_ADDR
29048: GO 29111
29050: LD_INT 47
29052: DOUBLE
29053: EQUAL
29054: IFTRUE 29058
29056: GO 29076
29058: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
29059: LD_ADDR_VAR 0 3
29063: PUSH
29064: LD_INT 23
29066: PUSH
29067: LD_INT 24
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: ST_TO_ADDR
29074: GO 29111
29076: LD_INT 98
29078: DOUBLE
29079: EQUAL
29080: IFTRUE 29084
29082: GO 29110
29084: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29085: LD_ADDR_VAR 0 3
29089: PUSH
29090: LD_INT 21
29092: PUSH
29093: LD_INT 22
29095: PUSH
29096: LD_INT 23
29098: PUSH
29099: LD_INT 24
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: ST_TO_ADDR
29108: GO 29111
29110: POP
// result := ( chassis in result ) ;
29111: LD_ADDR_VAR 0 3
29115: PUSH
29116: LD_VAR 0 1
29120: PUSH
29121: LD_VAR 0 3
29125: IN
29126: ST_TO_ADDR
// end ;
29127: LD_VAR 0 3
29131: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29132: LD_INT 0
29134: PPUSH
29135: PPUSH
29136: PPUSH
29137: PPUSH
29138: PPUSH
29139: PPUSH
29140: PPUSH
// result := array ;
29141: LD_ADDR_VAR 0 5
29145: PUSH
29146: LD_VAR 0 1
29150: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29151: LD_VAR 0 1
29155: NOT
29156: IFTRUE 29165
29158: PUSH
29159: LD_VAR 0 2
29163: NOT
29164: OR
29165: IFTRUE 29174
29167: PUSH
29168: LD_VAR 0 3
29172: NOT
29173: OR
29174: IFTRUE 29188
29176: PUSH
29177: LD_VAR 0 2
29181: PUSH
29182: LD_VAR 0 1
29186: GREATER
29187: OR
29188: IFTRUE 29202
29190: PUSH
29191: LD_VAR 0 3
29195: PUSH
29196: LD_VAR 0 1
29200: GREATER
29201: OR
29202: IFFALSE 29206
// exit ;
29204: GO 29502
// if direction then
29206: LD_VAR 0 4
29210: IFFALSE 29274
// begin d := 1 ;
29212: LD_ADDR_VAR 0 9
29216: PUSH
29217: LD_INT 1
29219: ST_TO_ADDR
// if i_from > i_to then
29220: LD_VAR 0 2
29224: PUSH
29225: LD_VAR 0 3
29229: GREATER
29230: IFFALSE 29256
// length := ( array - i_from ) + i_to else
29232: LD_ADDR_VAR 0 11
29236: PUSH
29237: LD_VAR 0 1
29241: PUSH
29242: LD_VAR 0 2
29246: MINUS
29247: PUSH
29248: LD_VAR 0 3
29252: PLUS
29253: ST_TO_ADDR
29254: GO 29272
// length := i_to - i_from ;
29256: LD_ADDR_VAR 0 11
29260: PUSH
29261: LD_VAR 0 3
29265: PUSH
29266: LD_VAR 0 2
29270: MINUS
29271: ST_TO_ADDR
// end else
29272: GO 29335
// begin d := - 1 ;
29274: LD_ADDR_VAR 0 9
29278: PUSH
29279: LD_INT 1
29281: NEG
29282: ST_TO_ADDR
// if i_from > i_to then
29283: LD_VAR 0 2
29287: PUSH
29288: LD_VAR 0 3
29292: GREATER
29293: IFFALSE 29313
// length := i_from - i_to else
29295: LD_ADDR_VAR 0 11
29299: PUSH
29300: LD_VAR 0 2
29304: PUSH
29305: LD_VAR 0 3
29309: MINUS
29310: ST_TO_ADDR
29311: GO 29335
// length := ( array - i_to ) + i_from ;
29313: LD_ADDR_VAR 0 11
29317: PUSH
29318: LD_VAR 0 1
29322: PUSH
29323: LD_VAR 0 3
29327: MINUS
29328: PUSH
29329: LD_VAR 0 2
29333: PLUS
29334: ST_TO_ADDR
// end ; if not length then
29335: LD_VAR 0 11
29339: NOT
29340: IFFALSE 29344
// exit ;
29342: GO 29502
// tmp := array ;
29344: LD_ADDR_VAR 0 10
29348: PUSH
29349: LD_VAR 0 1
29353: ST_TO_ADDR
// for i = 1 to length do
29354: LD_ADDR_VAR 0 6
29358: PUSH
29359: DOUBLE
29360: LD_INT 1
29362: DEC
29363: ST_TO_ADDR
29364: LD_VAR 0 11
29368: PUSH
29369: FOR_TO
29370: IFFALSE 29490
// begin for j = 1 to array do
29372: LD_ADDR_VAR 0 7
29376: PUSH
29377: DOUBLE
29378: LD_INT 1
29380: DEC
29381: ST_TO_ADDR
29382: LD_VAR 0 1
29386: PUSH
29387: FOR_TO
29388: IFFALSE 29476
// begin k := j + d ;
29390: LD_ADDR_VAR 0 8
29394: PUSH
29395: LD_VAR 0 7
29399: PUSH
29400: LD_VAR 0 9
29404: PLUS
29405: ST_TO_ADDR
// if k > array then
29406: LD_VAR 0 8
29410: PUSH
29411: LD_VAR 0 1
29415: GREATER
29416: IFFALSE 29426
// k := 1 ;
29418: LD_ADDR_VAR 0 8
29422: PUSH
29423: LD_INT 1
29425: ST_TO_ADDR
// if not k then
29426: LD_VAR 0 8
29430: NOT
29431: IFFALSE 29443
// k := array ;
29433: LD_ADDR_VAR 0 8
29437: PUSH
29438: LD_VAR 0 1
29442: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29443: LD_ADDR_VAR 0 10
29447: PUSH
29448: LD_VAR 0 10
29452: PPUSH
29453: LD_VAR 0 8
29457: PPUSH
29458: LD_VAR 0 1
29462: PUSH
29463: LD_VAR 0 7
29467: ARRAY
29468: PPUSH
29469: CALL_OW 1
29473: ST_TO_ADDR
// end ;
29474: GO 29387
29476: POP
29477: POP
// array := tmp ;
29478: LD_ADDR_VAR 0 1
29482: PUSH
29483: LD_VAR 0 10
29487: ST_TO_ADDR
// end ;
29488: GO 29369
29490: POP
29491: POP
// result := array ;
29492: LD_ADDR_VAR 0 5
29496: PUSH
29497: LD_VAR 0 1
29501: ST_TO_ADDR
// end ;
29502: LD_VAR 0 5
29506: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29507: LD_INT 0
29509: PPUSH
29510: PPUSH
// result := 0 ;
29511: LD_ADDR_VAR 0 3
29515: PUSH
29516: LD_INT 0
29518: ST_TO_ADDR
// if not array or not value in array then
29519: LD_VAR 0 1
29523: NOT
29524: IFTRUE 29539
29526: PUSH
29527: LD_VAR 0 2
29531: PUSH
29532: LD_VAR 0 1
29536: IN
29537: NOT
29538: OR
29539: IFFALSE 29543
// exit ;
29541: GO 29597
// for i = 1 to array do
29543: LD_ADDR_VAR 0 4
29547: PUSH
29548: DOUBLE
29549: LD_INT 1
29551: DEC
29552: ST_TO_ADDR
29553: LD_VAR 0 1
29557: PUSH
29558: FOR_TO
29559: IFFALSE 29595
// if value = array [ i ] then
29561: LD_VAR 0 2
29565: PUSH
29566: LD_VAR 0 1
29570: PUSH
29571: LD_VAR 0 4
29575: ARRAY
29576: EQUAL
29577: IFFALSE 29593
// begin result := i ;
29579: LD_ADDR_VAR 0 3
29583: PUSH
29584: LD_VAR 0 4
29588: ST_TO_ADDR
// exit ;
29589: POP
29590: POP
29591: GO 29597
// end ;
29593: GO 29558
29595: POP
29596: POP
// end ;
29597: LD_VAR 0 3
29601: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29602: LD_INT 0
29604: PPUSH
// vc_chassis := chassis ;
29605: LD_ADDR_OWVAR 37
29609: PUSH
29610: LD_VAR 0 1
29614: ST_TO_ADDR
// vc_engine := engine ;
29615: LD_ADDR_OWVAR 39
29619: PUSH
29620: LD_VAR 0 2
29624: ST_TO_ADDR
// vc_control := control ;
29625: LD_ADDR_OWVAR 38
29629: PUSH
29630: LD_VAR 0 3
29634: ST_TO_ADDR
// vc_weapon := weapon ;
29635: LD_ADDR_OWVAR 40
29639: PUSH
29640: LD_VAR 0 4
29644: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29645: LD_ADDR_OWVAR 41
29649: PUSH
29650: LD_VAR 0 5
29654: ST_TO_ADDR
// end ;
29655: LD_VAR 0 6
29659: RET
// export function WantPlant ( unit ) ; var task ; begin
29660: LD_INT 0
29662: PPUSH
29663: PPUSH
// result := false ;
29664: LD_ADDR_VAR 0 2
29668: PUSH
29669: LD_INT 0
29671: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29672: LD_ADDR_VAR 0 3
29676: PUSH
29677: LD_VAR 0 1
29681: PPUSH
29682: CALL_OW 437
29686: ST_TO_ADDR
// if task then
29687: LD_VAR 0 3
29691: IFFALSE 29719
// if task [ 1 ] [ 1 ] = p then
29693: LD_VAR 0 3
29697: PUSH
29698: LD_INT 1
29700: ARRAY
29701: PUSH
29702: LD_INT 1
29704: ARRAY
29705: PUSH
29706: LD_STRING p
29708: EQUAL
29709: IFFALSE 29719
// result := true ;
29711: LD_ADDR_VAR 0 2
29715: PUSH
29716: LD_INT 1
29718: ST_TO_ADDR
// end ;
29719: LD_VAR 0 2
29723: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29724: LD_INT 0
29726: PPUSH
29727: PPUSH
29728: PPUSH
29729: PPUSH
// if pos < 1 then
29730: LD_VAR 0 2
29734: PUSH
29735: LD_INT 1
29737: LESS
29738: IFFALSE 29742
// exit ;
29740: GO 30045
// if pos = 1 then
29742: LD_VAR 0 2
29746: PUSH
29747: LD_INT 1
29749: EQUAL
29750: IFFALSE 29783
// result := Replace ( arr , pos [ 1 ] , value ) else
29752: LD_ADDR_VAR 0 4
29756: PUSH
29757: LD_VAR 0 1
29761: PPUSH
29762: LD_VAR 0 2
29766: PUSH
29767: LD_INT 1
29769: ARRAY
29770: PPUSH
29771: LD_VAR 0 3
29775: PPUSH
29776: CALL_OW 1
29780: ST_TO_ADDR
29781: GO 30045
// begin tmp := arr ;
29783: LD_ADDR_VAR 0 6
29787: PUSH
29788: LD_VAR 0 1
29792: ST_TO_ADDR
// s_arr := [ tmp ] ;
29793: LD_ADDR_VAR 0 7
29797: PUSH
29798: LD_VAR 0 6
29802: PUSH
29803: EMPTY
29804: LIST
29805: ST_TO_ADDR
// for i = 1 to pos - 1 do
29806: LD_ADDR_VAR 0 5
29810: PUSH
29811: DOUBLE
29812: LD_INT 1
29814: DEC
29815: ST_TO_ADDR
29816: LD_VAR 0 2
29820: PUSH
29821: LD_INT 1
29823: MINUS
29824: PUSH
29825: FOR_TO
29826: IFFALSE 29871
// begin tmp := tmp [ pos [ i ] ] ;
29828: LD_ADDR_VAR 0 6
29832: PUSH
29833: LD_VAR 0 6
29837: PUSH
29838: LD_VAR 0 2
29842: PUSH
29843: LD_VAR 0 5
29847: ARRAY
29848: ARRAY
29849: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29850: LD_ADDR_VAR 0 7
29854: PUSH
29855: LD_VAR 0 7
29859: PUSH
29860: LD_VAR 0 6
29864: PUSH
29865: EMPTY
29866: LIST
29867: ADD
29868: ST_TO_ADDR
// end ;
29869: GO 29825
29871: POP
29872: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29873: LD_ADDR_VAR 0 6
29877: PUSH
29878: LD_VAR 0 6
29882: PPUSH
29883: LD_VAR 0 2
29887: PUSH
29888: LD_VAR 0 2
29892: ARRAY
29893: PPUSH
29894: LD_VAR 0 3
29898: PPUSH
29899: CALL_OW 1
29903: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29904: LD_ADDR_VAR 0 7
29908: PUSH
29909: LD_VAR 0 7
29913: PPUSH
29914: LD_VAR 0 7
29918: PPUSH
29919: LD_VAR 0 6
29923: PPUSH
29924: CALL_OW 1
29928: ST_TO_ADDR
// for i = s_arr downto 2 do
29929: LD_ADDR_VAR 0 5
29933: PUSH
29934: DOUBLE
29935: LD_VAR 0 7
29939: INC
29940: ST_TO_ADDR
29941: LD_INT 2
29943: PUSH
29944: FOR_DOWNTO
29945: IFFALSE 30029
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29947: LD_ADDR_VAR 0 6
29951: PUSH
29952: LD_VAR 0 7
29956: PUSH
29957: LD_VAR 0 5
29961: PUSH
29962: LD_INT 1
29964: MINUS
29965: ARRAY
29966: PPUSH
29967: LD_VAR 0 2
29971: PUSH
29972: LD_VAR 0 5
29976: PUSH
29977: LD_INT 1
29979: MINUS
29980: ARRAY
29981: PPUSH
29982: LD_VAR 0 7
29986: PUSH
29987: LD_VAR 0 5
29991: ARRAY
29992: PPUSH
29993: CALL_OW 1
29997: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29998: LD_ADDR_VAR 0 7
30002: PUSH
30003: LD_VAR 0 7
30007: PPUSH
30008: LD_VAR 0 5
30012: PUSH
30013: LD_INT 1
30015: MINUS
30016: PPUSH
30017: LD_VAR 0 6
30021: PPUSH
30022: CALL_OW 1
30026: ST_TO_ADDR
// end ;
30027: GO 29944
30029: POP
30030: POP
// result := s_arr [ 1 ] ;
30031: LD_ADDR_VAR 0 4
30035: PUSH
30036: LD_VAR 0 7
30040: PUSH
30041: LD_INT 1
30043: ARRAY
30044: ST_TO_ADDR
// end ; end ;
30045: LD_VAR 0 4
30049: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30050: LD_INT 0
30052: PPUSH
30053: PPUSH
// if not list then
30054: LD_VAR 0 1
30058: NOT
30059: IFFALSE 30063
// exit ;
30061: GO 30154
// i := list [ pos1 ] ;
30063: LD_ADDR_VAR 0 5
30067: PUSH
30068: LD_VAR 0 1
30072: PUSH
30073: LD_VAR 0 2
30077: ARRAY
30078: ST_TO_ADDR
// if not i then
30079: LD_VAR 0 5
30083: NOT
30084: IFFALSE 30088
// exit ;
30086: GO 30154
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30088: LD_ADDR_VAR 0 1
30092: PUSH
30093: LD_VAR 0 1
30097: PPUSH
30098: LD_VAR 0 2
30102: PPUSH
30103: LD_VAR 0 1
30107: PUSH
30108: LD_VAR 0 3
30112: ARRAY
30113: PPUSH
30114: CALL_OW 1
30118: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30119: LD_ADDR_VAR 0 1
30123: PUSH
30124: LD_VAR 0 1
30128: PPUSH
30129: LD_VAR 0 3
30133: PPUSH
30134: LD_VAR 0 5
30138: PPUSH
30139: CALL_OW 1
30143: ST_TO_ADDR
// result := list ;
30144: LD_ADDR_VAR 0 4
30148: PUSH
30149: LD_VAR 0 1
30153: ST_TO_ADDR
// end ;
30154: LD_VAR 0 4
30158: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30159: LD_INT 0
30161: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30162: LD_ADDR_VAR 0 5
30166: PUSH
30167: LD_VAR 0 1
30171: PPUSH
30172: CALL_OW 250
30176: PPUSH
30177: LD_VAR 0 1
30181: PPUSH
30182: CALL_OW 251
30186: PPUSH
30187: LD_VAR 0 2
30191: PPUSH
30192: LD_VAR 0 3
30196: PPUSH
30197: LD_VAR 0 4
30201: PPUSH
30202: CALL 30584 0 5
30206: ST_TO_ADDR
// end ;
30207: LD_VAR 0 5
30211: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
30212: LD_INT 0
30214: PPUSH
30215: PPUSH
30216: PPUSH
30217: PPUSH
// if not list or not unit then
30218: LD_VAR 0 2
30222: NOT
30223: IFTRUE 30232
30225: PUSH
30226: LD_VAR 0 1
30230: NOT
30231: OR
30232: IFFALSE 30236
// exit ;
30234: GO 30579
// result := [ ] ;
30236: LD_ADDR_VAR 0 5
30240: PUSH
30241: EMPTY
30242: ST_TO_ADDR
// for i in list do
30243: LD_ADDR_VAR 0 6
30247: PUSH
30248: LD_VAR 0 2
30252: PUSH
30253: FOR_IN
30254: IFFALSE 30472
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
30256: LD_ADDR_VAR 0 8
30260: PUSH
30261: LD_VAR 0 1
30265: PPUSH
30266: LD_VAR 0 6
30270: PUSH
30271: LD_INT 1
30273: ARRAY
30274: PPUSH
30275: LD_VAR 0 6
30279: PUSH
30280: LD_INT 2
30282: ARRAY
30283: PPUSH
30284: CALL_OW 297
30288: ST_TO_ADDR
// if not Count ( result ) then
30289: LD_VAR 0 5
30293: PPUSH
30294: CALL 26806 0 1
30298: NOT
30299: IFFALSE 30332
// begin result := Join ( result , [ i , tmp ] ) ;
30301: LD_ADDR_VAR 0 5
30305: PUSH
30306: LD_VAR 0 5
30310: PPUSH
30311: LD_VAR 0 6
30315: PUSH
30316: LD_VAR 0 8
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PPUSH
30325: CALL 62782 0 2
30329: ST_TO_ADDR
// continue ;
30330: GO 30253
// end ; if result [ result ] [ 2 ] <= tmp then
30332: LD_VAR 0 5
30336: PUSH
30337: LD_VAR 0 5
30341: ARRAY
30342: PUSH
30343: LD_INT 2
30345: ARRAY
30346: PUSH
30347: LD_VAR 0 8
30351: LESSEQUAL
30352: IFFALSE 30385
// result := Join ( result , [ i , tmp ] ) else
30354: LD_ADDR_VAR 0 5
30358: PUSH
30359: LD_VAR 0 5
30363: PPUSH
30364: LD_VAR 0 6
30368: PUSH
30369: LD_VAR 0 8
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PPUSH
30378: CALL 62782 0 2
30382: ST_TO_ADDR
30383: GO 30470
// begin for j := 1 to Count ( result ) do
30385: LD_ADDR_VAR 0 7
30389: PUSH
30390: DOUBLE
30391: LD_INT 1
30393: DEC
30394: ST_TO_ADDR
30395: LD_VAR 0 5
30399: PPUSH
30400: CALL 26806 0 1
30404: PUSH
30405: FOR_TO
30406: IFFALSE 30468
// begin if tmp < result [ j ] [ 2 ] then
30408: LD_VAR 0 8
30412: PUSH
30413: LD_VAR 0 5
30417: PUSH
30418: LD_VAR 0 7
30422: ARRAY
30423: PUSH
30424: LD_INT 2
30426: ARRAY
30427: LESS
30428: IFFALSE 30466
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30430: LD_ADDR_VAR 0 5
30434: PUSH
30435: LD_VAR 0 5
30439: PPUSH
30440: LD_VAR 0 7
30444: PPUSH
30445: LD_VAR 0 6
30449: PUSH
30450: LD_VAR 0 8
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PPUSH
30459: CALL_OW 2
30463: ST_TO_ADDR
// break ;
30464: GO 30468
// end ; end ;
30466: GO 30405
30468: POP
30469: POP
// end ; end ;
30470: GO 30253
30472: POP
30473: POP
// if result and not asc then
30474: LD_VAR 0 5
30478: IFFALSE 30487
30480: PUSH
30481: LD_VAR 0 3
30485: NOT
30486: AND
30487: IFFALSE 30504
// result := ReverseArray ( result ) ;
30489: LD_ADDR_VAR 0 5
30493: PUSH
30494: LD_VAR 0 5
30498: PPUSH
30499: CALL 57862 0 1
30503: ST_TO_ADDR
// tmp := [ ] ;
30504: LD_ADDR_VAR 0 8
30508: PUSH
30509: EMPTY
30510: ST_TO_ADDR
// if mode then
30511: LD_VAR 0 4
30515: IFFALSE 30579
// begin for i := 1 to result do
30517: LD_ADDR_VAR 0 6
30521: PUSH
30522: DOUBLE
30523: LD_INT 1
30525: DEC
30526: ST_TO_ADDR
30527: LD_VAR 0 5
30531: PUSH
30532: FOR_TO
30533: IFFALSE 30567
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
30535: LD_ADDR_VAR 0 8
30539: PUSH
30540: LD_VAR 0 8
30544: PPUSH
30545: LD_VAR 0 5
30549: PUSH
30550: LD_VAR 0 6
30554: ARRAY
30555: PUSH
30556: LD_INT 1
30558: ARRAY
30559: PPUSH
30560: CALL 62782 0 2
30564: ST_TO_ADDR
30565: GO 30532
30567: POP
30568: POP
// result := tmp ;
30569: LD_ADDR_VAR 0 5
30573: PUSH
30574: LD_VAR 0 8
30578: ST_TO_ADDR
// end ; end ;
30579: LD_VAR 0 5
30583: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30584: LD_INT 0
30586: PPUSH
30587: PPUSH
30588: PPUSH
30589: PPUSH
// if not list then
30590: LD_VAR 0 3
30594: NOT
30595: IFFALSE 30599
// exit ;
30597: GO 30989
// result := [ ] ;
30599: LD_ADDR_VAR 0 6
30603: PUSH
30604: EMPTY
30605: ST_TO_ADDR
// for i in list do
30606: LD_ADDR_VAR 0 7
30610: PUSH
30611: LD_VAR 0 3
30615: PUSH
30616: FOR_IN
30617: IFFALSE 30819
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30619: LD_ADDR_VAR 0 9
30623: PUSH
30624: LD_VAR 0 7
30628: PPUSH
30629: LD_VAR 0 1
30633: PPUSH
30634: LD_VAR 0 2
30638: PPUSH
30639: CALL_OW 297
30643: ST_TO_ADDR
// if not result then
30644: LD_VAR 0 6
30648: NOT
30649: IFFALSE 30675
// result := [ [ i , tmp ] ] else
30651: LD_ADDR_VAR 0 6
30655: PUSH
30656: LD_VAR 0 7
30660: PUSH
30661: LD_VAR 0 9
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: EMPTY
30671: LIST
30672: ST_TO_ADDR
30673: GO 30817
// begin if result [ result ] [ 2 ] <= tmp then
30675: LD_VAR 0 6
30679: PUSH
30680: LD_VAR 0 6
30684: ARRAY
30685: PUSH
30686: LD_INT 2
30688: ARRAY
30689: PUSH
30690: LD_VAR 0 9
30694: LESSEQUAL
30695: IFFALSE 30737
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30697: LD_ADDR_VAR 0 6
30701: PUSH
30702: LD_VAR 0 6
30706: PPUSH
30707: LD_VAR 0 6
30711: PUSH
30712: LD_INT 1
30714: PLUS
30715: PPUSH
30716: LD_VAR 0 7
30720: PUSH
30721: LD_VAR 0 9
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PPUSH
30730: CALL_OW 2
30734: ST_TO_ADDR
30735: GO 30817
// for j := 1 to result do
30737: LD_ADDR_VAR 0 8
30741: PUSH
30742: DOUBLE
30743: LD_INT 1
30745: DEC
30746: ST_TO_ADDR
30747: LD_VAR 0 6
30751: PUSH
30752: FOR_TO
30753: IFFALSE 30815
// begin if tmp < result [ j ] [ 2 ] then
30755: LD_VAR 0 9
30759: PUSH
30760: LD_VAR 0 6
30764: PUSH
30765: LD_VAR 0 8
30769: ARRAY
30770: PUSH
30771: LD_INT 2
30773: ARRAY
30774: LESS
30775: IFFALSE 30813
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30777: LD_ADDR_VAR 0 6
30781: PUSH
30782: LD_VAR 0 6
30786: PPUSH
30787: LD_VAR 0 8
30791: PPUSH
30792: LD_VAR 0 7
30796: PUSH
30797: LD_VAR 0 9
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PPUSH
30806: CALL_OW 2
30810: ST_TO_ADDR
// break ;
30811: GO 30815
// end ; end ;
30813: GO 30752
30815: POP
30816: POP
// end ; end ;
30817: GO 30616
30819: POP
30820: POP
// if result and not asc then
30821: LD_VAR 0 6
30825: IFFALSE 30834
30827: PUSH
30828: LD_VAR 0 4
30832: NOT
30833: AND
30834: IFFALSE 30909
// begin tmp := result ;
30836: LD_ADDR_VAR 0 9
30840: PUSH
30841: LD_VAR 0 6
30845: ST_TO_ADDR
// for i = tmp downto 1 do
30846: LD_ADDR_VAR 0 7
30850: PUSH
30851: DOUBLE
30852: LD_VAR 0 9
30856: INC
30857: ST_TO_ADDR
30858: LD_INT 1
30860: PUSH
30861: FOR_DOWNTO
30862: IFFALSE 30907
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30864: LD_ADDR_VAR 0 6
30868: PUSH
30869: LD_VAR 0 6
30873: PPUSH
30874: LD_VAR 0 9
30878: PUSH
30879: LD_VAR 0 7
30883: MINUS
30884: PUSH
30885: LD_INT 1
30887: PLUS
30888: PPUSH
30889: LD_VAR 0 9
30893: PUSH
30894: LD_VAR 0 7
30898: ARRAY
30899: PPUSH
30900: CALL_OW 1
30904: ST_TO_ADDR
30905: GO 30861
30907: POP
30908: POP
// end ; tmp := [ ] ;
30909: LD_ADDR_VAR 0 9
30913: PUSH
30914: EMPTY
30915: ST_TO_ADDR
// if mode then
30916: LD_VAR 0 5
30920: IFFALSE 30989
// begin for i = 1 to result do
30922: LD_ADDR_VAR 0 7
30926: PUSH
30927: DOUBLE
30928: LD_INT 1
30930: DEC
30931: ST_TO_ADDR
30932: LD_VAR 0 6
30936: PUSH
30937: FOR_TO
30938: IFFALSE 30977
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30940: LD_ADDR_VAR 0 9
30944: PUSH
30945: LD_VAR 0 9
30949: PPUSH
30950: LD_VAR 0 7
30954: PPUSH
30955: LD_VAR 0 6
30959: PUSH
30960: LD_VAR 0 7
30964: ARRAY
30965: PUSH
30966: LD_INT 1
30968: ARRAY
30969: PPUSH
30970: CALL_OW 1
30974: ST_TO_ADDR
30975: GO 30937
30977: POP
30978: POP
// result := tmp ;
30979: LD_ADDR_VAR 0 6
30983: PUSH
30984: LD_VAR 0 9
30988: ST_TO_ADDR
// end ; end ;
30989: LD_VAR 0 6
30993: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30994: LD_INT 0
30996: PPUSH
30997: PPUSH
30998: PPUSH
30999: PPUSH
31000: PPUSH
31001: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31002: LD_ADDR_VAR 0 5
31006: PUSH
31007: LD_INT 0
31009: PUSH
31010: LD_INT 0
31012: PUSH
31013: LD_INT 0
31015: PUSH
31016: EMPTY
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: ST_TO_ADDR
// if not x or not y then
31024: LD_VAR 0 2
31028: NOT
31029: IFTRUE 31038
31031: PUSH
31032: LD_VAR 0 3
31036: NOT
31037: OR
31038: IFFALSE 31042
// exit ;
31040: GO 32698
// if not range then
31042: LD_VAR 0 4
31046: NOT
31047: IFFALSE 31057
// range := 10 ;
31049: LD_ADDR_VAR 0 4
31053: PUSH
31054: LD_INT 10
31056: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31057: LD_ADDR_VAR 0 8
31061: PUSH
31062: LD_INT 81
31064: PUSH
31065: LD_VAR 0 1
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 92
31076: PUSH
31077: LD_VAR 0 2
31081: PUSH
31082: LD_VAR 0 3
31086: PUSH
31087: LD_VAR 0 4
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 3
31100: PUSH
31101: LD_INT 21
31103: PUSH
31104: LD_INT 3
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: LIST
31119: PPUSH
31120: CALL_OW 69
31124: ST_TO_ADDR
// if not tmp then
31125: LD_VAR 0 8
31129: NOT
31130: IFFALSE 31134
// exit ;
31132: GO 32698
// for i in tmp do
31134: LD_ADDR_VAR 0 6
31138: PUSH
31139: LD_VAR 0 8
31143: PUSH
31144: FOR_IN
31145: IFFALSE 32673
// begin points := [ 0 , 0 , 0 ] ;
31147: LD_ADDR_VAR 0 9
31151: PUSH
31152: LD_INT 0
31154: PUSH
31155: LD_INT 0
31157: PUSH
31158: LD_INT 0
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: LIST
31165: ST_TO_ADDR
// bpoints := 1 ;
31166: LD_ADDR_VAR 0 10
31170: PUSH
31171: LD_INT 1
31173: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31174: LD_VAR 0 6
31178: PPUSH
31179: CALL_OW 247
31183: PUSH
31184: LD_INT 1
31186: DOUBLE
31187: EQUAL
31188: IFTRUE 31192
31190: GO 31774
31192: POP
// begin if GetClass ( i ) = 1 then
31193: LD_VAR 0 6
31197: PPUSH
31198: CALL_OW 257
31202: PUSH
31203: LD_INT 1
31205: EQUAL
31206: IFFALSE 31227
// points := [ 10 , 5 , 3 ] ;
31208: LD_ADDR_VAR 0 9
31212: PUSH
31213: LD_INT 10
31215: PUSH
31216: LD_INT 5
31218: PUSH
31219: LD_INT 3
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: LIST
31226: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31227: LD_VAR 0 6
31231: PPUSH
31232: CALL_OW 257
31236: PUSH
31237: LD_INT 2
31239: PUSH
31240: LD_INT 3
31242: PUSH
31243: LD_INT 4
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: LIST
31250: IN
31251: IFFALSE 31272
// points := [ 3 , 2 , 1 ] ;
31253: LD_ADDR_VAR 0 9
31257: PUSH
31258: LD_INT 3
31260: PUSH
31261: LD_INT 2
31263: PUSH
31264: LD_INT 1
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: LIST
31271: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31272: LD_VAR 0 6
31276: PPUSH
31277: CALL_OW 257
31281: PUSH
31282: LD_INT 5
31284: EQUAL
31285: IFFALSE 31306
// points := [ 130 , 5 , 2 ] ;
31287: LD_ADDR_VAR 0 9
31291: PUSH
31292: LD_INT 130
31294: PUSH
31295: LD_INT 5
31297: PUSH
31298: LD_INT 2
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: LIST
31305: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31306: LD_VAR 0 6
31310: PPUSH
31311: CALL_OW 257
31315: PUSH
31316: LD_INT 8
31318: EQUAL
31319: IFFALSE 31340
// points := [ 35 , 35 , 30 ] ;
31321: LD_ADDR_VAR 0 9
31325: PUSH
31326: LD_INT 35
31328: PUSH
31329: LD_INT 35
31331: PUSH
31332: LD_INT 30
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: LIST
31339: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31340: LD_VAR 0 6
31344: PPUSH
31345: CALL_OW 257
31349: PUSH
31350: LD_INT 9
31352: EQUAL
31353: IFFALSE 31374
// points := [ 20 , 55 , 40 ] ;
31355: LD_ADDR_VAR 0 9
31359: PUSH
31360: LD_INT 20
31362: PUSH
31363: LD_INT 55
31365: PUSH
31366: LD_INT 40
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: LIST
31373: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31374: LD_VAR 0 6
31378: PPUSH
31379: CALL_OW 257
31383: PUSH
31384: LD_INT 12
31386: PUSH
31387: LD_INT 16
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: IN
31394: IFFALSE 31415
// points := [ 5 , 3 , 2 ] ;
31396: LD_ADDR_VAR 0 9
31400: PUSH
31401: LD_INT 5
31403: PUSH
31404: LD_INT 3
31406: PUSH
31407: LD_INT 2
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: LIST
31414: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31415: LD_VAR 0 6
31419: PPUSH
31420: CALL_OW 257
31424: PUSH
31425: LD_INT 17
31427: EQUAL
31428: IFFALSE 31449
// points := [ 100 , 50 , 75 ] ;
31430: LD_ADDR_VAR 0 9
31434: PUSH
31435: LD_INT 100
31437: PUSH
31438: LD_INT 50
31440: PUSH
31441: LD_INT 75
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: LIST
31448: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31449: LD_VAR 0 6
31453: PPUSH
31454: CALL_OW 257
31458: PUSH
31459: LD_INT 15
31461: EQUAL
31462: IFFALSE 31483
// points := [ 10 , 5 , 3 ] ;
31464: LD_ADDR_VAR 0 9
31468: PUSH
31469: LD_INT 10
31471: PUSH
31472: LD_INT 5
31474: PUSH
31475: LD_INT 3
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: LIST
31482: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31483: LD_VAR 0 6
31487: PPUSH
31488: CALL_OW 257
31492: PUSH
31493: LD_INT 14
31495: EQUAL
31496: IFFALSE 31517
// points := [ 10 , 0 , 0 ] ;
31498: LD_ADDR_VAR 0 9
31502: PUSH
31503: LD_INT 10
31505: PUSH
31506: LD_INT 0
31508: PUSH
31509: LD_INT 0
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: LIST
31516: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31517: LD_VAR 0 6
31521: PPUSH
31522: CALL_OW 257
31526: PUSH
31527: LD_INT 11
31529: EQUAL
31530: IFFALSE 31551
// points := [ 30 , 10 , 5 ] ;
31532: LD_ADDR_VAR 0 9
31536: PUSH
31537: LD_INT 30
31539: PUSH
31540: LD_INT 10
31542: PUSH
31543: LD_INT 5
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: LIST
31550: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31551: LD_VAR 0 1
31555: PPUSH
31556: LD_INT 5
31558: PPUSH
31559: CALL_OW 321
31563: PUSH
31564: LD_INT 2
31566: EQUAL
31567: IFFALSE 31584
// bpoints := bpoints * 1.8 ;
31569: LD_ADDR_VAR 0 10
31573: PUSH
31574: LD_VAR 0 10
31578: PUSH
31579: LD_REAL  1.80000000000000E+0000
31582: MUL
31583: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31584: LD_VAR 0 6
31588: PPUSH
31589: CALL_OW 257
31593: PUSH
31594: LD_INT 1
31596: PUSH
31597: LD_INT 2
31599: PUSH
31600: LD_INT 3
31602: PUSH
31603: LD_INT 4
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: IN
31612: IFFALSE 31632
31614: PUSH
31615: LD_VAR 0 1
31619: PPUSH
31620: LD_INT 51
31622: PPUSH
31623: CALL_OW 321
31627: PUSH
31628: LD_INT 2
31630: EQUAL
31631: AND
31632: IFFALSE 31649
// bpoints := bpoints * 1.2 ;
31634: LD_ADDR_VAR 0 10
31638: PUSH
31639: LD_VAR 0 10
31643: PUSH
31644: LD_REAL  1.20000000000000E+0000
31647: MUL
31648: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31649: LD_VAR 0 6
31653: PPUSH
31654: CALL_OW 257
31658: PUSH
31659: LD_INT 5
31661: PUSH
31662: LD_INT 7
31664: PUSH
31665: LD_INT 9
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: LIST
31672: IN
31673: IFFALSE 31693
31675: PUSH
31676: LD_VAR 0 1
31680: PPUSH
31681: LD_INT 52
31683: PPUSH
31684: CALL_OW 321
31688: PUSH
31689: LD_INT 2
31691: EQUAL
31692: AND
31693: IFFALSE 31710
// bpoints := bpoints * 1.5 ;
31695: LD_ADDR_VAR 0 10
31699: PUSH
31700: LD_VAR 0 10
31704: PUSH
31705: LD_REAL  1.50000000000000E+0000
31708: MUL
31709: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31710: LD_VAR 0 1
31714: PPUSH
31715: LD_INT 66
31717: PPUSH
31718: CALL_OW 321
31722: PUSH
31723: LD_INT 2
31725: EQUAL
31726: IFFALSE 31743
// bpoints := bpoints * 1.1 ;
31728: LD_ADDR_VAR 0 10
31732: PUSH
31733: LD_VAR 0 10
31737: PUSH
31738: LD_REAL  1.10000000000000E+0000
31741: MUL
31742: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31743: LD_ADDR_VAR 0 10
31747: PUSH
31748: LD_VAR 0 10
31752: PUSH
31753: LD_VAR 0 6
31757: PPUSH
31758: LD_INT 1
31760: PPUSH
31761: CALL_OW 259
31765: PUSH
31766: LD_REAL  1.15000000000000E+0000
31769: MUL
31770: MUL
31771: ST_TO_ADDR
// end ; unit_vehicle :
31772: GO 32602
31774: LD_INT 2
31776: DOUBLE
31777: EQUAL
31778: IFTRUE 31782
31780: GO 32590
31782: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31783: LD_VAR 0 6
31787: PPUSH
31788: CALL_OW 264
31792: PUSH
31793: LD_INT 2
31795: PUSH
31796: LD_INT 42
31798: PUSH
31799: LD_INT 24
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: LIST
31806: IN
31807: IFFALSE 31828
// points := [ 25 , 5 , 3 ] ;
31809: LD_ADDR_VAR 0 9
31813: PUSH
31814: LD_INT 25
31816: PUSH
31817: LD_INT 5
31819: PUSH
31820: LD_INT 3
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: LIST
31827: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31828: LD_VAR 0 6
31832: PPUSH
31833: CALL_OW 264
31837: PUSH
31838: LD_INT 4
31840: PUSH
31841: LD_INT 43
31843: PUSH
31844: LD_INT 25
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: LIST
31851: IN
31852: IFFALSE 31873
// points := [ 40 , 15 , 5 ] ;
31854: LD_ADDR_VAR 0 9
31858: PUSH
31859: LD_INT 40
31861: PUSH
31862: LD_INT 15
31864: PUSH
31865: LD_INT 5
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: LIST
31872: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31873: LD_VAR 0 6
31877: PPUSH
31878: CALL_OW 264
31882: PUSH
31883: LD_INT 3
31885: PUSH
31886: LD_INT 23
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: IN
31893: IFFALSE 31914
// points := [ 7 , 25 , 8 ] ;
31895: LD_ADDR_VAR 0 9
31899: PUSH
31900: LD_INT 7
31902: PUSH
31903: LD_INT 25
31905: PUSH
31906: LD_INT 8
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: LIST
31913: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31914: LD_VAR 0 6
31918: PPUSH
31919: CALL_OW 264
31923: PUSH
31924: LD_INT 5
31926: PUSH
31927: LD_INT 27
31929: PUSH
31930: LD_INT 44
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: LIST
31937: IN
31938: IFFALSE 31959
// points := [ 14 , 50 , 16 ] ;
31940: LD_ADDR_VAR 0 9
31944: PUSH
31945: LD_INT 14
31947: PUSH
31948: LD_INT 50
31950: PUSH
31951: LD_INT 16
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: LIST
31958: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31959: LD_VAR 0 6
31963: PPUSH
31964: CALL_OW 264
31968: PUSH
31969: LD_INT 6
31971: PUSH
31972: LD_INT 46
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: IN
31979: IFFALSE 32000
// points := [ 32 , 120 , 70 ] ;
31981: LD_ADDR_VAR 0 9
31985: PUSH
31986: LD_INT 32
31988: PUSH
31989: LD_INT 120
31991: PUSH
31992: LD_INT 70
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: LIST
31999: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32000: LD_VAR 0 6
32004: PPUSH
32005: CALL_OW 264
32009: PUSH
32010: LD_INT 7
32012: PUSH
32013: LD_INT 28
32015: PUSH
32016: LD_INT 45
32018: PUSH
32019: LD_INT 92
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: IN
32028: IFFALSE 32049
// points := [ 35 , 20 , 45 ] ;
32030: LD_ADDR_VAR 0 9
32034: PUSH
32035: LD_INT 35
32037: PUSH
32038: LD_INT 20
32040: PUSH
32041: LD_INT 45
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: LIST
32048: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32049: LD_VAR 0 6
32053: PPUSH
32054: CALL_OW 264
32058: PUSH
32059: LD_INT 47
32061: PUSH
32062: EMPTY
32063: LIST
32064: IN
32065: IFFALSE 32086
// points := [ 67 , 45 , 75 ] ;
32067: LD_ADDR_VAR 0 9
32071: PUSH
32072: LD_INT 67
32074: PUSH
32075: LD_INT 45
32077: PUSH
32078: LD_INT 75
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: LIST
32085: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32086: LD_VAR 0 6
32090: PPUSH
32091: CALL_OW 264
32095: PUSH
32096: LD_INT 26
32098: PUSH
32099: EMPTY
32100: LIST
32101: IN
32102: IFFALSE 32123
// points := [ 120 , 30 , 80 ] ;
32104: LD_ADDR_VAR 0 9
32108: PUSH
32109: LD_INT 120
32111: PUSH
32112: LD_INT 30
32114: PUSH
32115: LD_INT 80
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: LIST
32122: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32123: LD_VAR 0 6
32127: PPUSH
32128: CALL_OW 264
32132: PUSH
32133: LD_INT 22
32135: PUSH
32136: EMPTY
32137: LIST
32138: IN
32139: IFFALSE 32160
// points := [ 40 , 1 , 1 ] ;
32141: LD_ADDR_VAR 0 9
32145: PUSH
32146: LD_INT 40
32148: PUSH
32149: LD_INT 1
32151: PUSH
32152: LD_INT 1
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: LIST
32159: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32160: LD_VAR 0 6
32164: PPUSH
32165: CALL_OW 264
32169: PUSH
32170: LD_INT 29
32172: PUSH
32173: EMPTY
32174: LIST
32175: IN
32176: IFFALSE 32197
// points := [ 70 , 200 , 400 ] ;
32178: LD_ADDR_VAR 0 9
32182: PUSH
32183: LD_INT 70
32185: PUSH
32186: LD_INT 200
32188: PUSH
32189: LD_INT 400
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: LIST
32196: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32197: LD_VAR 0 6
32201: PPUSH
32202: CALL_OW 264
32206: PUSH
32207: LD_INT 14
32209: PUSH
32210: LD_INT 53
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: IN
32217: IFFALSE 32238
// points := [ 40 , 10 , 20 ] ;
32219: LD_ADDR_VAR 0 9
32223: PUSH
32224: LD_INT 40
32226: PUSH
32227: LD_INT 10
32229: PUSH
32230: LD_INT 20
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: LIST
32237: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32238: LD_VAR 0 6
32242: PPUSH
32243: CALL_OW 264
32247: PUSH
32248: LD_INT 9
32250: PUSH
32251: EMPTY
32252: LIST
32253: IN
32254: IFFALSE 32275
// points := [ 5 , 70 , 20 ] ;
32256: LD_ADDR_VAR 0 9
32260: PUSH
32261: LD_INT 5
32263: PUSH
32264: LD_INT 70
32266: PUSH
32267: LD_INT 20
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: LIST
32274: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32275: LD_VAR 0 6
32279: PPUSH
32280: CALL_OW 264
32284: PUSH
32285: LD_INT 10
32287: PUSH
32288: EMPTY
32289: LIST
32290: IN
32291: IFFALSE 32312
// points := [ 35 , 110 , 70 ] ;
32293: LD_ADDR_VAR 0 9
32297: PUSH
32298: LD_INT 35
32300: PUSH
32301: LD_INT 110
32303: PUSH
32304: LD_INT 70
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: LIST
32311: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32312: LD_VAR 0 6
32316: PPUSH
32317: CALL_OW 265
32321: PUSH
32322: LD_INT 25
32324: EQUAL
32325: IFFALSE 32346
// points := [ 80 , 65 , 100 ] ;
32327: LD_ADDR_VAR 0 9
32331: PUSH
32332: LD_INT 80
32334: PUSH
32335: LD_INT 65
32337: PUSH
32338: LD_INT 100
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: LIST
32345: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32346: LD_VAR 0 6
32350: PPUSH
32351: CALL_OW 263
32355: PUSH
32356: LD_INT 1
32358: EQUAL
32359: IFFALSE 32394
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32361: LD_ADDR_VAR 0 10
32365: PUSH
32366: LD_VAR 0 10
32370: PUSH
32371: LD_VAR 0 6
32375: PPUSH
32376: CALL_OW 311
32380: PPUSH
32381: LD_INT 3
32383: PPUSH
32384: CALL_OW 259
32388: PUSH
32389: LD_INT 4
32391: MUL
32392: MUL
32393: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32394: LD_VAR 0 6
32398: PPUSH
32399: CALL_OW 263
32403: PUSH
32404: LD_INT 2
32406: EQUAL
32407: IFFALSE 32458
// begin j := IsControledBy ( i ) ;
32409: LD_ADDR_VAR 0 7
32413: PUSH
32414: LD_VAR 0 6
32418: PPUSH
32419: CALL_OW 312
32423: ST_TO_ADDR
// if j then
32424: LD_VAR 0 7
32428: IFFALSE 32458
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32430: LD_ADDR_VAR 0 10
32434: PUSH
32435: LD_VAR 0 10
32439: PUSH
32440: LD_VAR 0 7
32444: PPUSH
32445: LD_INT 3
32447: PPUSH
32448: CALL_OW 259
32452: PUSH
32453: LD_INT 3
32455: MUL
32456: MUL
32457: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32458: LD_VAR 0 6
32462: PPUSH
32463: CALL_OW 264
32467: PUSH
32468: LD_INT 5
32470: PUSH
32471: LD_INT 6
32473: PUSH
32474: LD_INT 46
32476: PUSH
32477: LD_INT 44
32479: PUSH
32480: LD_INT 47
32482: PUSH
32483: LD_INT 45
32485: PUSH
32486: LD_INT 28
32488: PUSH
32489: LD_INT 7
32491: PUSH
32492: LD_INT 27
32494: PUSH
32495: LD_INT 29
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: IN
32510: IFFALSE 32530
32512: PUSH
32513: LD_VAR 0 1
32517: PPUSH
32518: LD_INT 52
32520: PPUSH
32521: CALL_OW 321
32525: PUSH
32526: LD_INT 2
32528: EQUAL
32529: AND
32530: IFFALSE 32547
// bpoints := bpoints * 1.2 ;
32532: LD_ADDR_VAR 0 10
32536: PUSH
32537: LD_VAR 0 10
32541: PUSH
32542: LD_REAL  1.20000000000000E+0000
32545: MUL
32546: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32547: LD_VAR 0 6
32551: PPUSH
32552: CALL_OW 264
32556: PUSH
32557: LD_INT 6
32559: PUSH
32560: LD_INT 46
32562: PUSH
32563: LD_INT 47
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: LIST
32570: IN
32571: IFFALSE 32588
// bpoints := bpoints * 1.2 ;
32573: LD_ADDR_VAR 0 10
32577: PUSH
32578: LD_VAR 0 10
32582: PUSH
32583: LD_REAL  1.20000000000000E+0000
32586: MUL
32587: ST_TO_ADDR
// end ; unit_building :
32588: GO 32602
32590: LD_INT 3
32592: DOUBLE
32593: EQUAL
32594: IFTRUE 32598
32596: GO 32601
32598: POP
// ; end ;
32599: GO 32602
32601: POP
// for j = 1 to 3 do
32602: LD_ADDR_VAR 0 7
32606: PUSH
32607: DOUBLE
32608: LD_INT 1
32610: DEC
32611: ST_TO_ADDR
32612: LD_INT 3
32614: PUSH
32615: FOR_TO
32616: IFFALSE 32669
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32618: LD_ADDR_VAR 0 5
32622: PUSH
32623: LD_VAR 0 5
32627: PPUSH
32628: LD_VAR 0 7
32632: PPUSH
32633: LD_VAR 0 5
32637: PUSH
32638: LD_VAR 0 7
32642: ARRAY
32643: PUSH
32644: LD_VAR 0 9
32648: PUSH
32649: LD_VAR 0 7
32653: ARRAY
32654: PUSH
32655: LD_VAR 0 10
32659: MUL
32660: PLUS
32661: PPUSH
32662: CALL_OW 1
32666: ST_TO_ADDR
32667: GO 32615
32669: POP
32670: POP
// end ;
32671: GO 31144
32673: POP
32674: POP
// result := Replace ( result , 4 , tmp ) ;
32675: LD_ADDR_VAR 0 5
32679: PUSH
32680: LD_VAR 0 5
32684: PPUSH
32685: LD_INT 4
32687: PPUSH
32688: LD_VAR 0 8
32692: PPUSH
32693: CALL_OW 1
32697: ST_TO_ADDR
// end ;
32698: LD_VAR 0 5
32702: RET
// export function DangerAtRange ( unit , range ) ; begin
32703: LD_INT 0
32705: PPUSH
// if not unit then
32706: LD_VAR 0 1
32710: NOT
32711: IFFALSE 32715
// exit ;
32713: GO 32760
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32715: LD_ADDR_VAR 0 3
32719: PUSH
32720: LD_VAR 0 1
32724: PPUSH
32725: CALL_OW 255
32729: PPUSH
32730: LD_VAR 0 1
32734: PPUSH
32735: CALL_OW 250
32739: PPUSH
32740: LD_VAR 0 1
32744: PPUSH
32745: CALL_OW 251
32749: PPUSH
32750: LD_VAR 0 2
32754: PPUSH
32755: CALL 30994 0 4
32759: ST_TO_ADDR
// end ;
32760: LD_VAR 0 3
32764: RET
// export function DangerInArea ( side , area ) ; begin
32765: LD_INT 0
32767: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32768: LD_ADDR_VAR 0 3
32772: PUSH
32773: LD_VAR 0 2
32777: PPUSH
32778: LD_INT 81
32780: PUSH
32781: LD_VAR 0 1
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PPUSH
32790: CALL_OW 70
32794: ST_TO_ADDR
// end ;
32795: LD_VAR 0 3
32799: RET
// export function IsExtension ( b ) ; begin
32800: LD_INT 0
32802: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32803: LD_ADDR_VAR 0 2
32807: PUSH
32808: LD_VAR 0 1
32812: PUSH
32813: LD_INT 23
32815: PUSH
32816: LD_INT 20
32818: PUSH
32819: LD_INT 22
32821: PUSH
32822: LD_INT 17
32824: PUSH
32825: LD_INT 24
32827: PUSH
32828: LD_INT 21
32830: PUSH
32831: LD_INT 19
32833: PUSH
32834: LD_INT 16
32836: PUSH
32837: LD_INT 25
32839: PUSH
32840: LD_INT 18
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: IN
32855: ST_TO_ADDR
// end ;
32856: LD_VAR 0 2
32860: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32861: LD_INT 0
32863: PPUSH
32864: PPUSH
32865: PPUSH
// result := [ ] ;
32866: LD_ADDR_VAR 0 4
32870: PUSH
32871: EMPTY
32872: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32873: LD_ADDR_VAR 0 5
32877: PUSH
32878: LD_VAR 0 2
32882: PPUSH
32883: LD_INT 21
32885: PUSH
32886: LD_INT 3
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PPUSH
32893: CALL_OW 70
32897: ST_TO_ADDR
// if not tmp then
32898: LD_VAR 0 5
32902: NOT
32903: IFFALSE 32907
// exit ;
32905: GO 32971
// if checkLink then
32907: LD_VAR 0 3
32911: IFFALSE 32961
// begin for i in tmp do
32913: LD_ADDR_VAR 0 6
32917: PUSH
32918: LD_VAR 0 5
32922: PUSH
32923: FOR_IN
32924: IFFALSE 32959
// if GetBase ( i ) <> base then
32926: LD_VAR 0 6
32930: PPUSH
32931: CALL_OW 274
32935: PUSH
32936: LD_VAR 0 1
32940: NONEQUAL
32941: IFFALSE 32957
// ComLinkToBase ( base , i ) ;
32943: LD_VAR 0 1
32947: PPUSH
32948: LD_VAR 0 6
32952: PPUSH
32953: CALL_OW 169
32957: GO 32923
32959: POP
32960: POP
// end ; result := tmp ;
32961: LD_ADDR_VAR 0 4
32965: PUSH
32966: LD_VAR 0 5
32970: ST_TO_ADDR
// end ;
32971: LD_VAR 0 4
32975: RET
// export function ComComplete ( units , b ) ; var i ; begin
32976: LD_INT 0
32978: PPUSH
32979: PPUSH
// if not units then
32980: LD_VAR 0 1
32984: NOT
32985: IFFALSE 32989
// exit ;
32987: GO 33079
// for i in units do
32989: LD_ADDR_VAR 0 4
32993: PUSH
32994: LD_VAR 0 1
32998: PUSH
32999: FOR_IN
33000: IFFALSE 33077
// if BuildingStatus ( b ) = bs_build then
33002: LD_VAR 0 2
33006: PPUSH
33007: CALL_OW 461
33011: PUSH
33012: LD_INT 1
33014: EQUAL
33015: IFFALSE 33075
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33017: LD_VAR 0 4
33021: PPUSH
33022: LD_STRING h
33024: PUSH
33025: LD_VAR 0 2
33029: PPUSH
33030: CALL_OW 250
33034: PUSH
33035: LD_VAR 0 2
33039: PPUSH
33040: CALL_OW 251
33044: PUSH
33045: LD_VAR 0 2
33049: PUSH
33050: LD_INT 0
33052: PUSH
33053: LD_INT 0
33055: PUSH
33056: LD_INT 0
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: PUSH
33068: EMPTY
33069: LIST
33070: PPUSH
33071: CALL_OW 446
33075: GO 32999
33077: POP
33078: POP
// end ;
33079: LD_VAR 0 3
33083: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33084: LD_INT 0
33086: PPUSH
33087: PPUSH
33088: PPUSH
33089: PPUSH
33090: PPUSH
33091: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33092: LD_VAR 0 1
33096: NOT
33097: IFTRUE 33114
33099: PUSH
33100: LD_VAR 0 1
33104: PPUSH
33105: CALL_OW 263
33109: PUSH
33110: LD_INT 2
33112: NONEQUAL
33113: OR
33114: IFFALSE 33118
// exit ;
33116: GO 33434
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33118: LD_ADDR_VAR 0 6
33122: PUSH
33123: LD_INT 22
33125: PUSH
33126: LD_VAR 0 1
33130: PPUSH
33131: CALL_OW 255
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 2
33142: PUSH
33143: LD_INT 30
33145: PUSH
33146: LD_INT 36
33148: PUSH
33149: EMPTY
33150: LIST
33151: LIST
33152: PUSH
33153: LD_INT 34
33155: PUSH
33156: LD_INT 31
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: LIST
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PPUSH
33172: CALL_OW 69
33176: ST_TO_ADDR
// if not tmp then
33177: LD_VAR 0 6
33181: NOT
33182: IFFALSE 33186
// exit ;
33184: GO 33434
// result := [ ] ;
33186: LD_ADDR_VAR 0 2
33190: PUSH
33191: EMPTY
33192: ST_TO_ADDR
// for i in tmp do
33193: LD_ADDR_VAR 0 3
33197: PUSH
33198: LD_VAR 0 6
33202: PUSH
33203: FOR_IN
33204: IFFALSE 33275
// begin t := UnitsInside ( i ) ;
33206: LD_ADDR_VAR 0 4
33210: PUSH
33211: LD_VAR 0 3
33215: PPUSH
33216: CALL_OW 313
33220: ST_TO_ADDR
// if t then
33221: LD_VAR 0 4
33225: IFFALSE 33273
// for j in t do
33227: LD_ADDR_VAR 0 7
33231: PUSH
33232: LD_VAR 0 4
33236: PUSH
33237: FOR_IN
33238: IFFALSE 33271
// result := Replace ( result , result + 1 , j ) ;
33240: LD_ADDR_VAR 0 2
33244: PUSH
33245: LD_VAR 0 2
33249: PPUSH
33250: LD_VAR 0 2
33254: PUSH
33255: LD_INT 1
33257: PLUS
33258: PPUSH
33259: LD_VAR 0 7
33263: PPUSH
33264: CALL_OW 1
33268: ST_TO_ADDR
33269: GO 33237
33271: POP
33272: POP
// end ;
33273: GO 33203
33275: POP
33276: POP
// if not result then
33277: LD_VAR 0 2
33281: NOT
33282: IFFALSE 33286
// exit ;
33284: GO 33434
// mech := result [ 1 ] ;
33286: LD_ADDR_VAR 0 5
33290: PUSH
33291: LD_VAR 0 2
33295: PUSH
33296: LD_INT 1
33298: ARRAY
33299: ST_TO_ADDR
// if result > 1 then
33300: LD_VAR 0 2
33304: PUSH
33305: LD_INT 1
33307: GREATER
33308: IFFALSE 33420
// begin for i = 2 to result do
33310: LD_ADDR_VAR 0 3
33314: PUSH
33315: DOUBLE
33316: LD_INT 2
33318: DEC
33319: ST_TO_ADDR
33320: LD_VAR 0 2
33324: PUSH
33325: FOR_TO
33326: IFFALSE 33418
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33328: LD_ADDR_VAR 0 4
33332: PUSH
33333: LD_VAR 0 2
33337: PUSH
33338: LD_VAR 0 3
33342: ARRAY
33343: PPUSH
33344: LD_INT 3
33346: PPUSH
33347: CALL_OW 259
33351: PUSH
33352: LD_VAR 0 2
33356: PUSH
33357: LD_VAR 0 3
33361: ARRAY
33362: PPUSH
33363: CALL_OW 432
33367: MINUS
33368: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33369: LD_VAR 0 4
33373: PUSH
33374: LD_VAR 0 5
33378: PPUSH
33379: LD_INT 3
33381: PPUSH
33382: CALL_OW 259
33386: PUSH
33387: LD_VAR 0 5
33391: PPUSH
33392: CALL_OW 432
33396: MINUS
33397: GREATEREQUAL
33398: IFFALSE 33416
// mech := result [ i ] ;
33400: LD_ADDR_VAR 0 5
33404: PUSH
33405: LD_VAR 0 2
33409: PUSH
33410: LD_VAR 0 3
33414: ARRAY
33415: ST_TO_ADDR
// end ;
33416: GO 33325
33418: POP
33419: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33420: LD_VAR 0 1
33424: PPUSH
33425: LD_VAR 0 5
33429: PPUSH
33430: CALL_OW 135
// end ;
33434: LD_VAR 0 2
33438: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33439: LD_INT 0
33441: PPUSH
33442: PPUSH
33443: PPUSH
33444: PPUSH
33445: PPUSH
33446: PPUSH
33447: PPUSH
33448: PPUSH
33449: PPUSH
33450: PPUSH
33451: PPUSH
33452: PPUSH
33453: PPUSH
// result := [ ] ;
33454: LD_ADDR_VAR 0 7
33458: PUSH
33459: EMPTY
33460: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33461: LD_VAR 0 1
33465: PPUSH
33466: CALL_OW 266
33470: PUSH
33471: LD_INT 0
33473: PUSH
33474: LD_INT 1
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: IN
33481: NOT
33482: IFFALSE 33486
// exit ;
33484: GO 35126
// if name then
33486: LD_VAR 0 3
33490: IFFALSE 33506
// SetBName ( base_dep , name ) ;
33492: LD_VAR 0 1
33496: PPUSH
33497: LD_VAR 0 3
33501: PPUSH
33502: CALL_OW 500
// base := GetBase ( base_dep ) ;
33506: LD_ADDR_VAR 0 15
33510: PUSH
33511: LD_VAR 0 1
33515: PPUSH
33516: CALL_OW 274
33520: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33521: LD_ADDR_VAR 0 16
33525: PUSH
33526: LD_VAR 0 1
33530: PPUSH
33531: CALL_OW 255
33535: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33536: LD_ADDR_VAR 0 17
33540: PUSH
33541: LD_VAR 0 1
33545: PPUSH
33546: CALL_OW 248
33550: ST_TO_ADDR
// if sources then
33551: LD_VAR 0 5
33555: IFFALSE 33602
// for i = 1 to 3 do
33557: LD_ADDR_VAR 0 8
33561: PUSH
33562: DOUBLE
33563: LD_INT 1
33565: DEC
33566: ST_TO_ADDR
33567: LD_INT 3
33569: PUSH
33570: FOR_TO
33571: IFFALSE 33600
// AddResourceType ( base , i , sources [ i ] ) ;
33573: LD_VAR 0 15
33577: PPUSH
33578: LD_VAR 0 8
33582: PPUSH
33583: LD_VAR 0 5
33587: PUSH
33588: LD_VAR 0 8
33592: ARRAY
33593: PPUSH
33594: CALL_OW 276
33598: GO 33570
33600: POP
33601: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33602: LD_ADDR_VAR 0 18
33606: PUSH
33607: LD_VAR 0 15
33611: PPUSH
33612: LD_VAR 0 2
33616: PPUSH
33617: LD_INT 1
33619: PPUSH
33620: CALL 32861 0 3
33624: ST_TO_ADDR
// InitHc ;
33625: CALL_OW 19
// InitUc ;
33629: CALL_OW 18
// uc_side := side ;
33633: LD_ADDR_OWVAR 20
33637: PUSH
33638: LD_VAR 0 16
33642: ST_TO_ADDR
// uc_nation := nation ;
33643: LD_ADDR_OWVAR 21
33647: PUSH
33648: LD_VAR 0 17
33652: ST_TO_ADDR
// if buildings then
33653: LD_VAR 0 18
33657: IFFALSE 34985
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33659: LD_ADDR_VAR 0 19
33663: PUSH
33664: LD_VAR 0 18
33668: PPUSH
33669: LD_INT 2
33671: PUSH
33672: LD_INT 30
33674: PUSH
33675: LD_INT 29
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 30
33684: PUSH
33685: LD_INT 30
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: LIST
33696: PPUSH
33697: CALL_OW 72
33701: ST_TO_ADDR
// if tmp then
33702: LD_VAR 0 19
33706: IFFALSE 33754
// for i in tmp do
33708: LD_ADDR_VAR 0 8
33712: PUSH
33713: LD_VAR 0 19
33717: PUSH
33718: FOR_IN
33719: IFFALSE 33752
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33721: LD_VAR 0 8
33725: PPUSH
33726: CALL_OW 250
33730: PPUSH
33731: LD_VAR 0 8
33735: PPUSH
33736: CALL_OW 251
33740: PPUSH
33741: LD_VAR 0 16
33745: PPUSH
33746: CALL_OW 441
33750: GO 33718
33752: POP
33753: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33754: LD_VAR 0 18
33758: PPUSH
33759: LD_INT 2
33761: PUSH
33762: LD_INT 30
33764: PUSH
33765: LD_INT 32
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 30
33774: PUSH
33775: LD_INT 33
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: LIST
33786: PPUSH
33787: CALL_OW 72
33791: IFFALSE 33879
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33793: LD_ADDR_VAR 0 8
33797: PUSH
33798: LD_VAR 0 18
33802: PPUSH
33803: LD_INT 2
33805: PUSH
33806: LD_INT 30
33808: PUSH
33809: LD_INT 32
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 30
33818: PUSH
33819: LD_INT 33
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: LIST
33830: PPUSH
33831: CALL_OW 72
33835: PUSH
33836: FOR_IN
33837: IFFALSE 33877
// begin if not GetBWeapon ( i ) then
33839: LD_VAR 0 8
33843: PPUSH
33844: CALL_OW 269
33848: NOT
33849: IFFALSE 33875
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33851: LD_VAR 0 8
33855: PPUSH
33856: LD_VAR 0 8
33860: PPUSH
33861: LD_VAR 0 2
33865: PPUSH
33866: CALL 35131 0 2
33870: PPUSH
33871: CALL_OW 431
// end ;
33875: GO 33836
33877: POP
33878: POP
// end ; for i = 1 to personel do
33879: LD_ADDR_VAR 0 8
33883: PUSH
33884: DOUBLE
33885: LD_INT 1
33887: DEC
33888: ST_TO_ADDR
33889: LD_VAR 0 6
33893: PUSH
33894: FOR_TO
33895: IFFALSE 34965
// begin if i > 4 then
33897: LD_VAR 0 8
33901: PUSH
33902: LD_INT 4
33904: GREATER
33905: IFFALSE 33909
// break ;
33907: GO 34965
// case i of 1 :
33909: LD_VAR 0 8
33913: PUSH
33914: LD_INT 1
33916: DOUBLE
33917: EQUAL
33918: IFTRUE 33922
33920: GO 34002
33922: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33923: LD_ADDR_VAR 0 12
33927: PUSH
33928: LD_VAR 0 18
33932: PPUSH
33933: LD_INT 22
33935: PUSH
33936: LD_VAR 0 16
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 58
33947: PUSH
33948: EMPTY
33949: LIST
33950: PUSH
33951: LD_INT 2
33953: PUSH
33954: LD_INT 30
33956: PUSH
33957: LD_INT 32
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 30
33966: PUSH
33967: LD_INT 4
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 30
33976: PUSH
33977: LD_INT 5
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: LIST
33994: PPUSH
33995: CALL_OW 72
33999: ST_TO_ADDR
34000: GO 34224
34002: LD_INT 2
34004: DOUBLE
34005: EQUAL
34006: IFTRUE 34010
34008: GO 34072
34010: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34011: LD_ADDR_VAR 0 12
34015: PUSH
34016: LD_VAR 0 18
34020: PPUSH
34021: LD_INT 22
34023: PUSH
34024: LD_VAR 0 16
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 2
34035: PUSH
34036: LD_INT 30
34038: PUSH
34039: LD_INT 0
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 30
34048: PUSH
34049: LD_INT 1
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: LIST
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PPUSH
34065: CALL_OW 72
34069: ST_TO_ADDR
34070: GO 34224
34072: LD_INT 3
34074: DOUBLE
34075: EQUAL
34076: IFTRUE 34080
34078: GO 34142
34080: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34081: LD_ADDR_VAR 0 12
34085: PUSH
34086: LD_VAR 0 18
34090: PPUSH
34091: LD_INT 22
34093: PUSH
34094: LD_VAR 0 16
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 2
34105: PUSH
34106: LD_INT 30
34108: PUSH
34109: LD_INT 2
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 30
34118: PUSH
34119: LD_INT 3
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: LIST
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PPUSH
34135: CALL_OW 72
34139: ST_TO_ADDR
34140: GO 34224
34142: LD_INT 4
34144: DOUBLE
34145: EQUAL
34146: IFTRUE 34150
34148: GO 34223
34150: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34151: LD_ADDR_VAR 0 12
34155: PUSH
34156: LD_VAR 0 18
34160: PPUSH
34161: LD_INT 22
34163: PUSH
34164: LD_VAR 0 16
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 2
34175: PUSH
34176: LD_INT 30
34178: PUSH
34179: LD_INT 6
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 30
34188: PUSH
34189: LD_INT 7
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 30
34198: PUSH
34199: LD_INT 8
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PPUSH
34216: CALL_OW 72
34220: ST_TO_ADDR
34221: GO 34224
34223: POP
// if i = 1 then
34224: LD_VAR 0 8
34228: PUSH
34229: LD_INT 1
34231: EQUAL
34232: IFFALSE 34343
// begin tmp := [ ] ;
34234: LD_ADDR_VAR 0 19
34238: PUSH
34239: EMPTY
34240: ST_TO_ADDR
// for j in f do
34241: LD_ADDR_VAR 0 9
34245: PUSH
34246: LD_VAR 0 12
34250: PUSH
34251: FOR_IN
34252: IFFALSE 34325
// if GetBType ( j ) = b_bunker then
34254: LD_VAR 0 9
34258: PPUSH
34259: CALL_OW 266
34263: PUSH
34264: LD_INT 32
34266: EQUAL
34267: IFFALSE 34294
// tmp := Insert ( tmp , 1 , j ) else
34269: LD_ADDR_VAR 0 19
34273: PUSH
34274: LD_VAR 0 19
34278: PPUSH
34279: LD_INT 1
34281: PPUSH
34282: LD_VAR 0 9
34286: PPUSH
34287: CALL_OW 2
34291: ST_TO_ADDR
34292: GO 34323
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34294: LD_ADDR_VAR 0 19
34298: PUSH
34299: LD_VAR 0 19
34303: PPUSH
34304: LD_VAR 0 19
34308: PUSH
34309: LD_INT 1
34311: PLUS
34312: PPUSH
34313: LD_VAR 0 9
34317: PPUSH
34318: CALL_OW 2
34322: ST_TO_ADDR
34323: GO 34251
34325: POP
34326: POP
// if tmp then
34327: LD_VAR 0 19
34331: IFFALSE 34343
// f := tmp ;
34333: LD_ADDR_VAR 0 12
34337: PUSH
34338: LD_VAR 0 19
34342: ST_TO_ADDR
// end ; x := personel [ i ] ;
34343: LD_ADDR_VAR 0 13
34347: PUSH
34348: LD_VAR 0 6
34352: PUSH
34353: LD_VAR 0 8
34357: ARRAY
34358: ST_TO_ADDR
// if x = - 1 then
34359: LD_VAR 0 13
34363: PUSH
34364: LD_INT 1
34366: NEG
34367: EQUAL
34368: IFFALSE 34579
// begin for j in f do
34370: LD_ADDR_VAR 0 9
34374: PUSH
34375: LD_VAR 0 12
34379: PUSH
34380: FOR_IN
34381: IFFALSE 34575
// repeat InitHc ;
34383: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34387: LD_VAR 0 9
34391: PPUSH
34392: CALL_OW 266
34396: PUSH
34397: LD_INT 5
34399: EQUAL
34400: IFFALSE 34470
// begin if UnitsInside ( j ) < 3 then
34402: LD_VAR 0 9
34406: PPUSH
34407: CALL_OW 313
34411: PUSH
34412: LD_INT 3
34414: LESS
34415: IFFALSE 34451
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34417: LD_INT 0
34419: PPUSH
34420: LD_INT 5
34422: PUSH
34423: LD_INT 8
34425: PUSH
34426: LD_INT 9
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: LIST
34433: PUSH
34434: LD_VAR 0 17
34438: ARRAY
34439: PPUSH
34440: LD_VAR 0 4
34444: PPUSH
34445: CALL_OW 380
34449: GO 34468
// PrepareHuman ( false , i , skill ) ;
34451: LD_INT 0
34453: PPUSH
34454: LD_VAR 0 8
34458: PPUSH
34459: LD_VAR 0 4
34463: PPUSH
34464: CALL_OW 380
// end else
34468: GO 34487
// PrepareHuman ( false , i , skill ) ;
34470: LD_INT 0
34472: PPUSH
34473: LD_VAR 0 8
34477: PPUSH
34478: LD_VAR 0 4
34482: PPUSH
34483: CALL_OW 380
// un := CreateHuman ;
34487: LD_ADDR_VAR 0 14
34491: PUSH
34492: CALL_OW 44
34496: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34497: LD_ADDR_VAR 0 7
34501: PUSH
34502: LD_VAR 0 7
34506: PPUSH
34507: LD_INT 1
34509: PPUSH
34510: LD_VAR 0 14
34514: PPUSH
34515: CALL_OW 2
34519: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34520: LD_VAR 0 14
34524: PPUSH
34525: LD_VAR 0 9
34529: PPUSH
34530: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34534: LD_VAR 0 9
34538: PPUSH
34539: CALL_OW 313
34543: PUSH
34544: LD_INT 6
34546: EQUAL
34547: IFTRUE 34571
34549: PUSH
34550: LD_VAR 0 9
34554: PPUSH
34555: CALL_OW 266
34559: PUSH
34560: LD_INT 32
34562: PUSH
34563: LD_INT 31
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: IN
34570: OR
34571: IFFALSE 34383
34573: GO 34380
34575: POP
34576: POP
// end else
34577: GO 34963
// for j = 1 to x do
34579: LD_ADDR_VAR 0 9
34583: PUSH
34584: DOUBLE
34585: LD_INT 1
34587: DEC
34588: ST_TO_ADDR
34589: LD_VAR 0 13
34593: PUSH
34594: FOR_TO
34595: IFFALSE 34961
// begin InitHc ;
34597: CALL_OW 19
// if not f then
34601: LD_VAR 0 12
34605: NOT
34606: IFFALSE 34695
// begin PrepareHuman ( false , i , skill ) ;
34608: LD_INT 0
34610: PPUSH
34611: LD_VAR 0 8
34615: PPUSH
34616: LD_VAR 0 4
34620: PPUSH
34621: CALL_OW 380
// un := CreateHuman ;
34625: LD_ADDR_VAR 0 14
34629: PUSH
34630: CALL_OW 44
34634: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34635: LD_ADDR_VAR 0 7
34639: PUSH
34640: LD_VAR 0 7
34644: PPUSH
34645: LD_INT 1
34647: PPUSH
34648: LD_VAR 0 14
34652: PPUSH
34653: CALL_OW 2
34657: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34658: LD_VAR 0 14
34662: PPUSH
34663: LD_VAR 0 1
34667: PPUSH
34668: CALL_OW 250
34672: PPUSH
34673: LD_VAR 0 1
34677: PPUSH
34678: CALL_OW 251
34682: PPUSH
34683: LD_INT 10
34685: PPUSH
34686: LD_INT 0
34688: PPUSH
34689: CALL_OW 50
// continue ;
34693: GO 34594
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34695: LD_VAR 0 12
34699: PUSH
34700: LD_INT 1
34702: ARRAY
34703: PPUSH
34704: CALL_OW 313
34708: IFFALSE 34736
34710: PUSH
34711: LD_VAR 0 12
34715: PUSH
34716: LD_INT 1
34718: ARRAY
34719: PPUSH
34720: CALL_OW 266
34724: PUSH
34725: LD_INT 32
34727: PUSH
34728: LD_INT 31
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: IN
34735: AND
34736: IFTRUE 34757
34738: PUSH
34739: LD_VAR 0 12
34743: PUSH
34744: LD_INT 1
34746: ARRAY
34747: PPUSH
34748: CALL_OW 313
34752: PUSH
34753: LD_INT 6
34755: EQUAL
34756: OR
34757: IFFALSE 34777
// f := Delete ( f , 1 ) ;
34759: LD_ADDR_VAR 0 12
34763: PUSH
34764: LD_VAR 0 12
34768: PPUSH
34769: LD_INT 1
34771: PPUSH
34772: CALL_OW 3
34776: ST_TO_ADDR
// if not f then
34777: LD_VAR 0 12
34781: NOT
34782: IFFALSE 34800
// begin x := x + 2 ;
34784: LD_ADDR_VAR 0 13
34788: PUSH
34789: LD_VAR 0 13
34793: PUSH
34794: LD_INT 2
34796: PLUS
34797: ST_TO_ADDR
// continue ;
34798: GO 34594
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34800: LD_VAR 0 12
34804: PUSH
34805: LD_INT 1
34807: ARRAY
34808: PPUSH
34809: CALL_OW 266
34813: PUSH
34814: LD_INT 5
34816: EQUAL
34817: IFFALSE 34891
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34819: LD_VAR 0 12
34823: PUSH
34824: LD_INT 1
34826: ARRAY
34827: PPUSH
34828: CALL_OW 313
34832: PUSH
34833: LD_INT 3
34835: LESS
34836: IFFALSE 34872
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34838: LD_INT 0
34840: PPUSH
34841: LD_INT 5
34843: PUSH
34844: LD_INT 8
34846: PUSH
34847: LD_INT 9
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: LIST
34854: PUSH
34855: LD_VAR 0 17
34859: ARRAY
34860: PPUSH
34861: LD_VAR 0 4
34865: PPUSH
34866: CALL_OW 380
34870: GO 34889
// PrepareHuman ( false , i , skill ) ;
34872: LD_INT 0
34874: PPUSH
34875: LD_VAR 0 8
34879: PPUSH
34880: LD_VAR 0 4
34884: PPUSH
34885: CALL_OW 380
// end else
34889: GO 34908
// PrepareHuman ( false , i , skill ) ;
34891: LD_INT 0
34893: PPUSH
34894: LD_VAR 0 8
34898: PPUSH
34899: LD_VAR 0 4
34903: PPUSH
34904: CALL_OW 380
// un := CreateHuman ;
34908: LD_ADDR_VAR 0 14
34912: PUSH
34913: CALL_OW 44
34917: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34918: LD_ADDR_VAR 0 7
34922: PUSH
34923: LD_VAR 0 7
34927: PPUSH
34928: LD_INT 1
34930: PPUSH
34931: LD_VAR 0 14
34935: PPUSH
34936: CALL_OW 2
34940: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34941: LD_VAR 0 14
34945: PPUSH
34946: LD_VAR 0 12
34950: PUSH
34951: LD_INT 1
34953: ARRAY
34954: PPUSH
34955: CALL_OW 52
// end ;
34959: GO 34594
34961: POP
34962: POP
// end ;
34963: GO 33894
34965: POP
34966: POP
// result := result ^ buildings ;
34967: LD_ADDR_VAR 0 7
34971: PUSH
34972: LD_VAR 0 7
34976: PUSH
34977: LD_VAR 0 18
34981: ADD
34982: ST_TO_ADDR
// end else
34983: GO 35126
// begin for i = 1 to personel do
34985: LD_ADDR_VAR 0 8
34989: PUSH
34990: DOUBLE
34991: LD_INT 1
34993: DEC
34994: ST_TO_ADDR
34995: LD_VAR 0 6
34999: PUSH
35000: FOR_TO
35001: IFFALSE 35124
// begin if i > 4 then
35003: LD_VAR 0 8
35007: PUSH
35008: LD_INT 4
35010: GREATER
35011: IFFALSE 35015
// break ;
35013: GO 35124
// x := personel [ i ] ;
35015: LD_ADDR_VAR 0 13
35019: PUSH
35020: LD_VAR 0 6
35024: PUSH
35025: LD_VAR 0 8
35029: ARRAY
35030: ST_TO_ADDR
// if x = - 1 then
35031: LD_VAR 0 13
35035: PUSH
35036: LD_INT 1
35038: NEG
35039: EQUAL
35040: IFFALSE 35044
// continue ;
35042: GO 35000
// PrepareHuman ( false , i , skill ) ;
35044: LD_INT 0
35046: PPUSH
35047: LD_VAR 0 8
35051: PPUSH
35052: LD_VAR 0 4
35056: PPUSH
35057: CALL_OW 380
// un := CreateHuman ;
35061: LD_ADDR_VAR 0 14
35065: PUSH
35066: CALL_OW 44
35070: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35071: LD_VAR 0 14
35075: PPUSH
35076: LD_VAR 0 1
35080: PPUSH
35081: CALL_OW 250
35085: PPUSH
35086: LD_VAR 0 1
35090: PPUSH
35091: CALL_OW 251
35095: PPUSH
35096: LD_INT 10
35098: PPUSH
35099: LD_INT 0
35101: PPUSH
35102: CALL_OW 50
// result := result ^ un ;
35106: LD_ADDR_VAR 0 7
35110: PUSH
35111: LD_VAR 0 7
35115: PUSH
35116: LD_VAR 0 14
35120: ADD
35121: ST_TO_ADDR
// end ;
35122: GO 35000
35124: POP
35125: POP
// end ; end ;
35126: LD_VAR 0 7
35130: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35131: LD_INT 0
35133: PPUSH
35134: PPUSH
35135: PPUSH
35136: PPUSH
35137: PPUSH
35138: PPUSH
35139: PPUSH
35140: PPUSH
35141: PPUSH
35142: PPUSH
35143: PPUSH
35144: PPUSH
35145: PPUSH
35146: PPUSH
35147: PPUSH
35148: PPUSH
// result := false ;
35149: LD_ADDR_VAR 0 3
35153: PUSH
35154: LD_INT 0
35156: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35157: LD_VAR 0 1
35161: NOT
35162: IFTRUE 35187
35164: PUSH
35165: LD_VAR 0 1
35169: PPUSH
35170: CALL_OW 266
35174: PUSH
35175: LD_INT 32
35177: PUSH
35178: LD_INT 33
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: IN
35185: NOT
35186: OR
35187: IFFALSE 35191
// exit ;
35189: GO 36326
// nat := GetNation ( tower ) ;
35191: LD_ADDR_VAR 0 12
35195: PUSH
35196: LD_VAR 0 1
35200: PPUSH
35201: CALL_OW 248
35205: ST_TO_ADDR
// side := GetSide ( tower ) ;
35206: LD_ADDR_VAR 0 16
35210: PUSH
35211: LD_VAR 0 1
35215: PPUSH
35216: CALL_OW 255
35220: ST_TO_ADDR
// x := GetX ( tower ) ;
35221: LD_ADDR_VAR 0 10
35225: PUSH
35226: LD_VAR 0 1
35230: PPUSH
35231: CALL_OW 250
35235: ST_TO_ADDR
// y := GetY ( tower ) ;
35236: LD_ADDR_VAR 0 11
35240: PUSH
35241: LD_VAR 0 1
35245: PPUSH
35246: CALL_OW 251
35250: ST_TO_ADDR
// if not x or not y then
35251: LD_VAR 0 10
35255: NOT
35256: IFTRUE 35265
35258: PUSH
35259: LD_VAR 0 11
35263: NOT
35264: OR
35265: IFFALSE 35269
// exit ;
35267: GO 36326
// weapon := 0 ;
35269: LD_ADDR_VAR 0 18
35273: PUSH
35274: LD_INT 0
35276: ST_TO_ADDR
// fac_list := [ ] ;
35277: LD_ADDR_VAR 0 17
35281: PUSH
35282: EMPTY
35283: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35284: LD_ADDR_VAR 0 6
35288: PUSH
35289: LD_VAR 0 1
35293: PPUSH
35294: CALL_OW 274
35298: PPUSH
35299: LD_VAR 0 2
35303: PPUSH
35304: LD_INT 0
35306: PPUSH
35307: CALL 32861 0 3
35311: PPUSH
35312: LD_INT 30
35314: PUSH
35315: LD_INT 3
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PPUSH
35322: CALL_OW 72
35326: ST_TO_ADDR
// if not factories then
35327: LD_VAR 0 6
35331: NOT
35332: IFFALSE 35336
// exit ;
35334: GO 36326
// for i in factories do
35336: LD_ADDR_VAR 0 8
35340: PUSH
35341: LD_VAR 0 6
35345: PUSH
35346: FOR_IN
35347: IFFALSE 35372
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35349: LD_ADDR_VAR 0 17
35353: PUSH
35354: LD_VAR 0 17
35358: PUSH
35359: LD_VAR 0 8
35363: PPUSH
35364: CALL_OW 478
35368: UNION
35369: ST_TO_ADDR
35370: GO 35346
35372: POP
35373: POP
// if not fac_list then
35374: LD_VAR 0 17
35378: NOT
35379: IFFALSE 35383
// exit ;
35381: GO 36326
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35383: LD_ADDR_VAR 0 5
35387: PUSH
35388: LD_INT 4
35390: PUSH
35391: LD_INT 5
35393: PUSH
35394: LD_INT 9
35396: PUSH
35397: LD_INT 10
35399: PUSH
35400: LD_INT 6
35402: PUSH
35403: LD_INT 7
35405: PUSH
35406: LD_INT 11
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 27
35420: PUSH
35421: LD_INT 28
35423: PUSH
35424: LD_INT 26
35426: PUSH
35427: LD_INT 30
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 43
35438: PUSH
35439: LD_INT 44
35441: PUSH
35442: LD_INT 46
35444: PUSH
35445: LD_INT 45
35447: PUSH
35448: LD_INT 47
35450: PUSH
35451: LD_INT 49
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: LIST
35466: PUSH
35467: LD_VAR 0 12
35471: ARRAY
35472: ST_TO_ADDR
// list := list isect fac_list ;
35473: LD_ADDR_VAR 0 5
35477: PUSH
35478: LD_VAR 0 5
35482: PUSH
35483: LD_VAR 0 17
35487: ISECT
35488: ST_TO_ADDR
// if not list then
35489: LD_VAR 0 5
35493: NOT
35494: IFFALSE 35498
// exit ;
35496: GO 36326
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35498: LD_VAR 0 12
35502: PUSH
35503: LD_INT 3
35505: EQUAL
35506: IFFALSE 35518
35508: PUSH
35509: LD_INT 49
35511: PUSH
35512: LD_VAR 0 5
35516: IN
35517: AND
35518: IFFALSE 35538
35520: PUSH
35521: LD_INT 31
35523: PPUSH
35524: LD_VAR 0 16
35528: PPUSH
35529: CALL_OW 321
35533: PUSH
35534: LD_INT 2
35536: EQUAL
35537: AND
35538: IFFALSE 35598
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35540: LD_INT 22
35542: PUSH
35543: LD_VAR 0 16
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 35
35554: PUSH
35555: LD_INT 49
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 91
35564: PUSH
35565: LD_VAR 0 1
35569: PUSH
35570: LD_INT 10
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: LIST
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: LIST
35582: PPUSH
35583: CALL_OW 69
35587: NOT
35588: IFFALSE 35598
// weapon := ru_time_lapser ;
35590: LD_ADDR_VAR 0 18
35594: PUSH
35595: LD_INT 49
35597: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35598: LD_VAR 0 12
35602: PUSH
35603: LD_INT 1
35605: PUSH
35606: LD_INT 2
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: IN
35613: IFFALSE 35637
35615: PUSH
35616: LD_INT 11
35618: PUSH
35619: LD_VAR 0 5
35623: IN
35624: IFTRUE 35636
35626: PUSH
35627: LD_INT 30
35629: PUSH
35630: LD_VAR 0 5
35634: IN
35635: OR
35636: AND
35637: IFFALSE 35657
35639: PUSH
35640: LD_INT 6
35642: PPUSH
35643: LD_VAR 0 16
35647: PPUSH
35648: CALL_OW 321
35652: PUSH
35653: LD_INT 2
35655: EQUAL
35656: AND
35657: IFFALSE 35824
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35659: LD_INT 22
35661: PUSH
35662: LD_VAR 0 16
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 2
35673: PUSH
35674: LD_INT 35
35676: PUSH
35677: LD_INT 11
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 35
35686: PUSH
35687: LD_INT 30
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 91
35701: PUSH
35702: LD_VAR 0 1
35706: PUSH
35707: LD_INT 18
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: LIST
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: LIST
35719: PPUSH
35720: CALL_OW 69
35724: NOT
35725: IFFALSE 35801
35727: PUSH
35728: LD_INT 22
35730: PUSH
35731: LD_VAR 0 16
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 2
35742: PUSH
35743: LD_INT 30
35745: PUSH
35746: LD_INT 32
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 30
35755: PUSH
35756: LD_INT 33
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 91
35770: PUSH
35771: LD_VAR 0 1
35775: PUSH
35776: LD_INT 12
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: LIST
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: LIST
35788: PUSH
35789: EMPTY
35790: LIST
35791: PPUSH
35792: CALL_OW 69
35796: PUSH
35797: LD_INT 2
35799: GREATER
35800: AND
35801: IFFALSE 35824
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35803: LD_ADDR_VAR 0 18
35807: PUSH
35808: LD_INT 11
35810: PUSH
35811: LD_INT 30
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_VAR 0 12
35822: ARRAY
35823: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35824: LD_VAR 0 18
35828: NOT
35829: IFFALSE 35849
35831: PUSH
35832: LD_INT 40
35834: PPUSH
35835: LD_VAR 0 16
35839: PPUSH
35840: CALL_OW 321
35844: PUSH
35845: LD_INT 2
35847: EQUAL
35848: AND
35849: IFFALSE 35885
35851: PUSH
35852: LD_INT 7
35854: PUSH
35855: LD_VAR 0 5
35859: IN
35860: IFTRUE 35872
35862: PUSH
35863: LD_INT 28
35865: PUSH
35866: LD_VAR 0 5
35870: IN
35871: OR
35872: IFTRUE 35884
35874: PUSH
35875: LD_INT 45
35877: PUSH
35878: LD_VAR 0 5
35882: IN
35883: OR
35884: AND
35885: IFFALSE 36139
// begin hex := GetHexInfo ( x , y ) ;
35887: LD_ADDR_VAR 0 4
35891: PUSH
35892: LD_VAR 0 10
35896: PPUSH
35897: LD_VAR 0 11
35901: PPUSH
35902: CALL_OW 546
35906: ST_TO_ADDR
// if hex [ 1 ] then
35907: LD_VAR 0 4
35911: PUSH
35912: LD_INT 1
35914: ARRAY
35915: IFFALSE 35919
// exit ;
35917: GO 36326
// height := hex [ 2 ] ;
35919: LD_ADDR_VAR 0 15
35923: PUSH
35924: LD_VAR 0 4
35928: PUSH
35929: LD_INT 2
35931: ARRAY
35932: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35933: LD_ADDR_VAR 0 14
35937: PUSH
35938: LD_INT 0
35940: PUSH
35941: LD_INT 2
35943: PUSH
35944: LD_INT 3
35946: PUSH
35947: LD_INT 5
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: ST_TO_ADDR
// for i in tmp do
35956: LD_ADDR_VAR 0 8
35960: PUSH
35961: LD_VAR 0 14
35965: PUSH
35966: FOR_IN
35967: IFFALSE 36137
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35969: LD_ADDR_VAR 0 9
35973: PUSH
35974: LD_VAR 0 10
35978: PPUSH
35979: LD_VAR 0 8
35983: PPUSH
35984: LD_INT 5
35986: PPUSH
35987: CALL_OW 272
35991: PUSH
35992: LD_VAR 0 11
35996: PPUSH
35997: LD_VAR 0 8
36001: PPUSH
36002: LD_INT 5
36004: PPUSH
36005: CALL_OW 273
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36014: LD_VAR 0 9
36018: PUSH
36019: LD_INT 1
36021: ARRAY
36022: PPUSH
36023: LD_VAR 0 9
36027: PUSH
36028: LD_INT 2
36030: ARRAY
36031: PPUSH
36032: CALL_OW 488
36036: IFFALSE 36135
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36038: LD_ADDR_VAR 0 4
36042: PUSH
36043: LD_VAR 0 9
36047: PUSH
36048: LD_INT 1
36050: ARRAY
36051: PPUSH
36052: LD_VAR 0 9
36056: PUSH
36057: LD_INT 2
36059: ARRAY
36060: PPUSH
36061: CALL_OW 546
36065: ST_TO_ADDR
// if hex [ 1 ] then
36066: LD_VAR 0 4
36070: PUSH
36071: LD_INT 1
36073: ARRAY
36074: IFFALSE 36078
// continue ;
36076: GO 35966
// h := hex [ 2 ] ;
36078: LD_ADDR_VAR 0 13
36082: PUSH
36083: LD_VAR 0 4
36087: PUSH
36088: LD_INT 2
36090: ARRAY
36091: ST_TO_ADDR
// if h + 7 < height then
36092: LD_VAR 0 13
36096: PUSH
36097: LD_INT 7
36099: PLUS
36100: PUSH
36101: LD_VAR 0 15
36105: LESS
36106: IFFALSE 36135
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36108: LD_ADDR_VAR 0 18
36112: PUSH
36113: LD_INT 7
36115: PUSH
36116: LD_INT 28
36118: PUSH
36119: LD_INT 45
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: LIST
36126: PUSH
36127: LD_VAR 0 12
36131: ARRAY
36132: ST_TO_ADDR
// break ;
36133: GO 36137
// end ; end ; end ;
36135: GO 35966
36137: POP
36138: POP
// end ; if not weapon then
36139: LD_VAR 0 18
36143: NOT
36144: IFFALSE 36204
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36146: LD_ADDR_VAR 0 5
36150: PUSH
36151: LD_VAR 0 5
36155: PUSH
36156: LD_INT 11
36158: PUSH
36159: LD_INT 30
36161: PUSH
36162: LD_INT 49
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: LIST
36169: DIFF
36170: ST_TO_ADDR
// if not list then
36171: LD_VAR 0 5
36175: NOT
36176: IFFALSE 36180
// exit ;
36178: GO 36326
// weapon := list [ rand ( 1 , list ) ] ;
36180: LD_ADDR_VAR 0 18
36184: PUSH
36185: LD_VAR 0 5
36189: PUSH
36190: LD_INT 1
36192: PPUSH
36193: LD_VAR 0 5
36197: PPUSH
36198: CALL_OW 12
36202: ARRAY
36203: ST_TO_ADDR
// end ; if weapon then
36204: LD_VAR 0 18
36208: IFFALSE 36326
// begin tmp := CostOfWeapon ( weapon ) ;
36210: LD_ADDR_VAR 0 14
36214: PUSH
36215: LD_VAR 0 18
36219: PPUSH
36220: CALL_OW 451
36224: ST_TO_ADDR
// j := GetBase ( tower ) ;
36225: LD_ADDR_VAR 0 9
36229: PUSH
36230: LD_VAR 0 1
36234: PPUSH
36235: CALL_OW 274
36239: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36240: LD_VAR 0 9
36244: PPUSH
36245: LD_INT 1
36247: PPUSH
36248: CALL_OW 275
36252: PUSH
36253: LD_VAR 0 14
36257: PUSH
36258: LD_INT 1
36260: ARRAY
36261: GREATEREQUAL
36262: IFFALSE 36288
36264: PUSH
36265: LD_VAR 0 9
36269: PPUSH
36270: LD_INT 2
36272: PPUSH
36273: CALL_OW 275
36277: PUSH
36278: LD_VAR 0 14
36282: PUSH
36283: LD_INT 2
36285: ARRAY
36286: GREATEREQUAL
36287: AND
36288: IFFALSE 36314
36290: PUSH
36291: LD_VAR 0 9
36295: PPUSH
36296: LD_INT 3
36298: PPUSH
36299: CALL_OW 275
36303: PUSH
36304: LD_VAR 0 14
36308: PUSH
36309: LD_INT 3
36311: ARRAY
36312: GREATEREQUAL
36313: AND
36314: IFFALSE 36326
// result := weapon ;
36316: LD_ADDR_VAR 0 3
36320: PUSH
36321: LD_VAR 0 18
36325: ST_TO_ADDR
// end ; end ;
36326: LD_VAR 0 3
36330: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36331: LD_INT 0
36333: PPUSH
36334: PPUSH
// result := true ;
36335: LD_ADDR_VAR 0 3
36339: PUSH
36340: LD_INT 1
36342: ST_TO_ADDR
// if array1 = array2 then
36343: LD_VAR 0 1
36347: PUSH
36348: LD_VAR 0 2
36352: EQUAL
36353: IFFALSE 36413
// begin for i = 1 to array1 do
36355: LD_ADDR_VAR 0 4
36359: PUSH
36360: DOUBLE
36361: LD_INT 1
36363: DEC
36364: ST_TO_ADDR
36365: LD_VAR 0 1
36369: PUSH
36370: FOR_TO
36371: IFFALSE 36409
// if array1 [ i ] <> array2 [ i ] then
36373: LD_VAR 0 1
36377: PUSH
36378: LD_VAR 0 4
36382: ARRAY
36383: PUSH
36384: LD_VAR 0 2
36388: PUSH
36389: LD_VAR 0 4
36393: ARRAY
36394: NONEQUAL
36395: IFFALSE 36407
// begin result := false ;
36397: LD_ADDR_VAR 0 3
36401: PUSH
36402: LD_INT 0
36404: ST_TO_ADDR
// break ;
36405: GO 36409
// end ;
36407: GO 36370
36409: POP
36410: POP
// end else
36411: GO 36421
// result := false ;
36413: LD_ADDR_VAR 0 3
36417: PUSH
36418: LD_INT 0
36420: ST_TO_ADDR
// end ;
36421: LD_VAR 0 3
36425: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36426: LD_INT 0
36428: PPUSH
36429: PPUSH
// if not array1 or not array2 then
36430: LD_VAR 0 1
36434: NOT
36435: IFTRUE 36444
36437: PUSH
36438: LD_VAR 0 2
36442: NOT
36443: OR
36444: IFFALSE 36448
// exit ;
36446: GO 36512
// result := true ;
36448: LD_ADDR_VAR 0 3
36452: PUSH
36453: LD_INT 1
36455: ST_TO_ADDR
// for i = 1 to array1 do
36456: LD_ADDR_VAR 0 4
36460: PUSH
36461: DOUBLE
36462: LD_INT 1
36464: DEC
36465: ST_TO_ADDR
36466: LD_VAR 0 1
36470: PUSH
36471: FOR_TO
36472: IFFALSE 36510
// if array1 [ i ] <> array2 [ i ] then
36474: LD_VAR 0 1
36478: PUSH
36479: LD_VAR 0 4
36483: ARRAY
36484: PUSH
36485: LD_VAR 0 2
36489: PUSH
36490: LD_VAR 0 4
36494: ARRAY
36495: NONEQUAL
36496: IFFALSE 36508
// begin result := false ;
36498: LD_ADDR_VAR 0 3
36502: PUSH
36503: LD_INT 0
36505: ST_TO_ADDR
// break ;
36506: GO 36510
// end ;
36508: GO 36471
36510: POP
36511: POP
// end ;
36512: LD_VAR 0 3
36516: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36517: LD_INT 0
36519: PPUSH
36520: PPUSH
36521: PPUSH
// pom := GetBase ( fac ) ;
36522: LD_ADDR_VAR 0 5
36526: PUSH
36527: LD_VAR 0 1
36531: PPUSH
36532: CALL_OW 274
36536: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36537: LD_ADDR_VAR 0 4
36541: PUSH
36542: LD_VAR 0 2
36546: PUSH
36547: LD_INT 1
36549: ARRAY
36550: PPUSH
36551: LD_VAR 0 2
36555: PUSH
36556: LD_INT 2
36558: ARRAY
36559: PPUSH
36560: LD_VAR 0 2
36564: PUSH
36565: LD_INT 3
36567: ARRAY
36568: PPUSH
36569: LD_VAR 0 2
36573: PUSH
36574: LD_INT 4
36576: ARRAY
36577: PPUSH
36578: CALL_OW 449
36582: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36583: LD_ADDR_VAR 0 3
36587: PUSH
36588: LD_VAR 0 5
36592: PPUSH
36593: LD_INT 1
36595: PPUSH
36596: CALL_OW 275
36600: PUSH
36601: LD_VAR 0 4
36605: PUSH
36606: LD_INT 1
36608: ARRAY
36609: GREATEREQUAL
36610: IFFALSE 36636
36612: PUSH
36613: LD_VAR 0 5
36617: PPUSH
36618: LD_INT 2
36620: PPUSH
36621: CALL_OW 275
36625: PUSH
36626: LD_VAR 0 4
36630: PUSH
36631: LD_INT 2
36633: ARRAY
36634: GREATEREQUAL
36635: AND
36636: IFFALSE 36662
36638: PUSH
36639: LD_VAR 0 5
36643: PPUSH
36644: LD_INT 3
36646: PPUSH
36647: CALL_OW 275
36651: PUSH
36652: LD_VAR 0 4
36656: PUSH
36657: LD_INT 3
36659: ARRAY
36660: GREATEREQUAL
36661: AND
36662: ST_TO_ADDR
// end ;
36663: LD_VAR 0 3
36667: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36668: LD_INT 0
36670: PPUSH
36671: PPUSH
36672: PPUSH
36673: PPUSH
// pom := GetBase ( building ) ;
36674: LD_ADDR_VAR 0 3
36678: PUSH
36679: LD_VAR 0 1
36683: PPUSH
36684: CALL_OW 274
36688: ST_TO_ADDR
// if not pom then
36689: LD_VAR 0 3
36693: NOT
36694: IFFALSE 36698
// exit ;
36696: GO 36872
// btype := GetBType ( building ) ;
36698: LD_ADDR_VAR 0 5
36702: PUSH
36703: LD_VAR 0 1
36707: PPUSH
36708: CALL_OW 266
36712: ST_TO_ADDR
// if btype = b_armoury then
36713: LD_VAR 0 5
36717: PUSH
36718: LD_INT 4
36720: EQUAL
36721: IFFALSE 36731
// btype := b_barracks ;
36723: LD_ADDR_VAR 0 5
36727: PUSH
36728: LD_INT 5
36730: ST_TO_ADDR
// if btype = b_depot then
36731: LD_VAR 0 5
36735: PUSH
36736: LD_INT 0
36738: EQUAL
36739: IFFALSE 36749
// btype := b_warehouse ;
36741: LD_ADDR_VAR 0 5
36745: PUSH
36746: LD_INT 1
36748: ST_TO_ADDR
// if btype = b_workshop then
36749: LD_VAR 0 5
36753: PUSH
36754: LD_INT 2
36756: EQUAL
36757: IFFALSE 36767
// btype := b_factory ;
36759: LD_ADDR_VAR 0 5
36763: PUSH
36764: LD_INT 3
36766: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36767: LD_ADDR_VAR 0 4
36771: PUSH
36772: LD_VAR 0 5
36776: PPUSH
36777: LD_VAR 0 1
36781: PPUSH
36782: CALL_OW 248
36786: PPUSH
36787: CALL_OW 450
36791: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36792: LD_ADDR_VAR 0 2
36796: PUSH
36797: LD_VAR 0 3
36801: PPUSH
36802: LD_INT 1
36804: PPUSH
36805: CALL_OW 275
36809: PUSH
36810: LD_VAR 0 4
36814: PUSH
36815: LD_INT 1
36817: ARRAY
36818: GREATEREQUAL
36819: IFFALSE 36845
36821: PUSH
36822: LD_VAR 0 3
36826: PPUSH
36827: LD_INT 2
36829: PPUSH
36830: CALL_OW 275
36834: PUSH
36835: LD_VAR 0 4
36839: PUSH
36840: LD_INT 2
36842: ARRAY
36843: GREATEREQUAL
36844: AND
36845: IFFALSE 36871
36847: PUSH
36848: LD_VAR 0 3
36852: PPUSH
36853: LD_INT 3
36855: PPUSH
36856: CALL_OW 275
36860: PUSH
36861: LD_VAR 0 4
36865: PUSH
36866: LD_INT 3
36868: ARRAY
36869: GREATEREQUAL
36870: AND
36871: ST_TO_ADDR
// end ;
36872: LD_VAR 0 2
36876: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36877: LD_INT 0
36879: PPUSH
36880: PPUSH
36881: PPUSH
// pom := GetBase ( building ) ;
36882: LD_ADDR_VAR 0 4
36886: PUSH
36887: LD_VAR 0 1
36891: PPUSH
36892: CALL_OW 274
36896: ST_TO_ADDR
// if not pom then
36897: LD_VAR 0 4
36901: NOT
36902: IFFALSE 36906
// exit ;
36904: GO 37011
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36906: LD_ADDR_VAR 0 5
36910: PUSH
36911: LD_VAR 0 2
36915: PPUSH
36916: LD_VAR 0 1
36920: PPUSH
36921: CALL_OW 248
36925: PPUSH
36926: CALL_OW 450
36930: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36931: LD_ADDR_VAR 0 3
36935: PUSH
36936: LD_VAR 0 4
36940: PPUSH
36941: LD_INT 1
36943: PPUSH
36944: CALL_OW 275
36948: PUSH
36949: LD_VAR 0 5
36953: PUSH
36954: LD_INT 1
36956: ARRAY
36957: GREATEREQUAL
36958: IFFALSE 36984
36960: PUSH
36961: LD_VAR 0 4
36965: PPUSH
36966: LD_INT 2
36968: PPUSH
36969: CALL_OW 275
36973: PUSH
36974: LD_VAR 0 5
36978: PUSH
36979: LD_INT 2
36981: ARRAY
36982: GREATEREQUAL
36983: AND
36984: IFFALSE 37010
36986: PUSH
36987: LD_VAR 0 4
36991: PPUSH
36992: LD_INT 3
36994: PPUSH
36995: CALL_OW 275
36999: PUSH
37000: LD_VAR 0 5
37004: PUSH
37005: LD_INT 3
37007: ARRAY
37008: GREATEREQUAL
37009: AND
37010: ST_TO_ADDR
// end ;
37011: LD_VAR 0 3
37015: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37016: LD_INT 0
37018: PPUSH
37019: PPUSH
37020: PPUSH
37021: PPUSH
37022: PPUSH
37023: PPUSH
37024: PPUSH
37025: PPUSH
37026: PPUSH
37027: PPUSH
37028: PPUSH
// result := false ;
37029: LD_ADDR_VAR 0 8
37033: PUSH
37034: LD_INT 0
37036: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37037: LD_VAR 0 5
37041: NOT
37042: IFTRUE 37051
37044: PUSH
37045: LD_VAR 0 1
37049: NOT
37050: OR
37051: IFTRUE 37060
37053: PUSH
37054: LD_VAR 0 2
37058: NOT
37059: OR
37060: IFTRUE 37069
37062: PUSH
37063: LD_VAR 0 3
37067: NOT
37068: OR
37069: IFFALSE 37073
// exit ;
37071: GO 37899
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37073: LD_ADDR_VAR 0 14
37077: PUSH
37078: LD_VAR 0 1
37082: PPUSH
37083: LD_VAR 0 2
37087: PPUSH
37088: LD_VAR 0 3
37092: PPUSH
37093: LD_VAR 0 4
37097: PPUSH
37098: LD_VAR 0 5
37102: PUSH
37103: LD_INT 1
37105: ARRAY
37106: PPUSH
37107: CALL_OW 248
37111: PPUSH
37112: LD_INT 0
37114: PPUSH
37115: CALL 39180 0 6
37119: ST_TO_ADDR
// if not hexes then
37120: LD_VAR 0 14
37124: NOT
37125: IFFALSE 37129
// exit ;
37127: GO 37899
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37129: LD_ADDR_VAR 0 17
37133: PUSH
37134: LD_VAR 0 5
37138: PPUSH
37139: LD_INT 22
37141: PUSH
37142: LD_VAR 0 13
37146: PPUSH
37147: CALL_OW 255
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 2
37158: PUSH
37159: LD_INT 30
37161: PUSH
37162: LD_INT 0
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 30
37171: PUSH
37172: LD_INT 1
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: LIST
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: PPUSH
37188: CALL_OW 72
37192: ST_TO_ADDR
// for i = 1 to hexes do
37193: LD_ADDR_VAR 0 9
37197: PUSH
37198: DOUBLE
37199: LD_INT 1
37201: DEC
37202: ST_TO_ADDR
37203: LD_VAR 0 14
37207: PUSH
37208: FOR_TO
37209: IFFALSE 37897
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37211: LD_ADDR_VAR 0 13
37215: PUSH
37216: LD_VAR 0 14
37220: PUSH
37221: LD_VAR 0 9
37225: ARRAY
37226: PUSH
37227: LD_INT 1
37229: ARRAY
37230: PPUSH
37231: LD_VAR 0 14
37235: PUSH
37236: LD_VAR 0 9
37240: ARRAY
37241: PUSH
37242: LD_INT 2
37244: ARRAY
37245: PPUSH
37246: CALL_OW 428
37250: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37251: LD_VAR 0 14
37255: PUSH
37256: LD_VAR 0 9
37260: ARRAY
37261: PUSH
37262: LD_INT 1
37264: ARRAY
37265: PPUSH
37266: LD_VAR 0 14
37270: PUSH
37271: LD_VAR 0 9
37275: ARRAY
37276: PUSH
37277: LD_INT 2
37279: ARRAY
37280: PPUSH
37281: CALL_OW 351
37285: IFTRUE 37324
37287: PUSH
37288: LD_VAR 0 14
37292: PUSH
37293: LD_VAR 0 9
37297: ARRAY
37298: PUSH
37299: LD_INT 1
37301: ARRAY
37302: PPUSH
37303: LD_VAR 0 14
37307: PUSH
37308: LD_VAR 0 9
37312: ARRAY
37313: PUSH
37314: LD_INT 2
37316: ARRAY
37317: PPUSH
37318: CALL_OW 488
37322: NOT
37323: OR
37324: IFTRUE 37341
37326: PUSH
37327: LD_VAR 0 13
37331: PPUSH
37332: CALL_OW 247
37336: PUSH
37337: LD_INT 3
37339: EQUAL
37340: OR
37341: IFFALSE 37347
// exit ;
37343: POP
37344: POP
37345: GO 37899
// if not tmp then
37347: LD_VAR 0 13
37351: NOT
37352: IFFALSE 37356
// continue ;
37354: GO 37208
// result := true ;
37356: LD_ADDR_VAR 0 8
37360: PUSH
37361: LD_INT 1
37363: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37364: LD_VAR 0 6
37368: IFFALSE 37385
37370: PUSH
37371: LD_VAR 0 13
37375: PPUSH
37376: CALL_OW 247
37380: PUSH
37381: LD_INT 2
37383: EQUAL
37384: AND
37385: IFFALSE 37402
37387: PUSH
37388: LD_VAR 0 13
37392: PPUSH
37393: CALL_OW 263
37397: PUSH
37398: LD_INT 1
37400: EQUAL
37401: AND
37402: IFFALSE 37566
// begin if IsDrivenBy ( tmp ) then
37404: LD_VAR 0 13
37408: PPUSH
37409: CALL_OW 311
37413: IFFALSE 37417
// continue ;
37415: GO 37208
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37417: LD_VAR 0 6
37421: PPUSH
37422: LD_INT 3
37424: PUSH
37425: LD_INT 60
37427: PUSH
37428: EMPTY
37429: LIST
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 3
37437: PUSH
37438: LD_INT 55
37440: PUSH
37441: EMPTY
37442: LIST
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PPUSH
37452: CALL_OW 72
37456: IFFALSE 37564
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37458: LD_ADDR_VAR 0 18
37462: PUSH
37463: LD_VAR 0 6
37467: PPUSH
37468: LD_INT 3
37470: PUSH
37471: LD_INT 60
37473: PUSH
37474: EMPTY
37475: LIST
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 3
37483: PUSH
37484: LD_INT 55
37486: PUSH
37487: EMPTY
37488: LIST
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PPUSH
37498: CALL_OW 72
37502: PUSH
37503: LD_INT 1
37505: ARRAY
37506: ST_TO_ADDR
// if IsInUnit ( driver ) then
37507: LD_VAR 0 18
37511: PPUSH
37512: CALL_OW 310
37516: IFFALSE 37527
// ComExit ( driver ) ;
37518: LD_VAR 0 18
37522: PPUSH
37523: CALL 63180 0 1
// AddComEnterUnit ( driver , tmp ) ;
37527: LD_VAR 0 18
37531: PPUSH
37532: LD_VAR 0 13
37536: PPUSH
37537: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37541: LD_VAR 0 18
37545: PPUSH
37546: LD_VAR 0 7
37550: PPUSH
37551: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37555: LD_VAR 0 18
37559: PPUSH
37560: CALL_OW 181
// end ; continue ;
37564: GO 37208
// end ; if not cleaners or not tmp in cleaners then
37566: LD_VAR 0 6
37570: NOT
37571: IFTRUE 37586
37573: PUSH
37574: LD_VAR 0 13
37578: PUSH
37579: LD_VAR 0 6
37583: IN
37584: NOT
37585: OR
37586: IFFALSE 37895
// begin if dep then
37588: LD_VAR 0 17
37592: IFFALSE 37728
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37594: LD_ADDR_VAR 0 16
37598: PUSH
37599: LD_VAR 0 17
37603: PUSH
37604: LD_INT 1
37606: ARRAY
37607: PPUSH
37608: CALL_OW 250
37612: PPUSH
37613: LD_VAR 0 17
37617: PUSH
37618: LD_INT 1
37620: ARRAY
37621: PPUSH
37622: CALL_OW 254
37626: PPUSH
37627: LD_INT 5
37629: PPUSH
37630: CALL_OW 272
37634: PUSH
37635: LD_VAR 0 17
37639: PUSH
37640: LD_INT 1
37642: ARRAY
37643: PPUSH
37644: CALL_OW 251
37648: PPUSH
37649: LD_VAR 0 17
37653: PUSH
37654: LD_INT 1
37656: ARRAY
37657: PPUSH
37658: CALL_OW 254
37662: PPUSH
37663: LD_INT 5
37665: PPUSH
37666: CALL_OW 273
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37675: LD_VAR 0 16
37679: PUSH
37680: LD_INT 1
37682: ARRAY
37683: PPUSH
37684: LD_VAR 0 16
37688: PUSH
37689: LD_INT 2
37691: ARRAY
37692: PPUSH
37693: CALL_OW 488
37697: IFFALSE 37728
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37699: LD_VAR 0 13
37703: PPUSH
37704: LD_VAR 0 16
37708: PUSH
37709: LD_INT 1
37711: ARRAY
37712: PPUSH
37713: LD_VAR 0 16
37717: PUSH
37718: LD_INT 2
37720: ARRAY
37721: PPUSH
37722: CALL_OW 111
// continue ;
37726: GO 37208
// end ; end ; r := GetDir ( tmp ) ;
37728: LD_ADDR_VAR 0 15
37732: PUSH
37733: LD_VAR 0 13
37737: PPUSH
37738: CALL_OW 254
37742: ST_TO_ADDR
// if r = 5 then
37743: LD_VAR 0 15
37747: PUSH
37748: LD_INT 5
37750: EQUAL
37751: IFFALSE 37761
// r := 0 ;
37753: LD_ADDR_VAR 0 15
37757: PUSH
37758: LD_INT 0
37760: ST_TO_ADDR
// for j = r to 5 do
37761: LD_ADDR_VAR 0 10
37765: PUSH
37766: DOUBLE
37767: LD_VAR 0 15
37771: DEC
37772: ST_TO_ADDR
37773: LD_INT 5
37775: PUSH
37776: FOR_TO
37777: IFFALSE 37893
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37779: LD_ADDR_VAR 0 11
37783: PUSH
37784: LD_VAR 0 13
37788: PPUSH
37789: CALL_OW 250
37793: PPUSH
37794: LD_VAR 0 10
37798: PPUSH
37799: LD_INT 2
37801: PPUSH
37802: CALL_OW 272
37806: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37807: LD_ADDR_VAR 0 12
37811: PUSH
37812: LD_VAR 0 13
37816: PPUSH
37817: CALL_OW 251
37821: PPUSH
37822: LD_VAR 0 10
37826: PPUSH
37827: LD_INT 2
37829: PPUSH
37830: CALL_OW 273
37834: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37835: LD_VAR 0 11
37839: PPUSH
37840: LD_VAR 0 12
37844: PPUSH
37845: CALL_OW 488
37849: IFFALSE 37868
37851: PUSH
37852: LD_VAR 0 11
37856: PPUSH
37857: LD_VAR 0 12
37861: PPUSH
37862: CALL_OW 428
37866: NOT
37867: AND
37868: IFFALSE 37891
// begin ComMoveXY ( tmp , _x , _y ) ;
37870: LD_VAR 0 13
37874: PPUSH
37875: LD_VAR 0 11
37879: PPUSH
37880: LD_VAR 0 12
37884: PPUSH
37885: CALL_OW 111
// break ;
37889: GO 37893
// end ; end ;
37891: GO 37776
37893: POP
37894: POP
// end ; end ;
37895: GO 37208
37897: POP
37898: POP
// end ;
37899: LD_VAR 0 8
37903: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37904: LD_INT 0
37906: PPUSH
// result := true ;
37907: LD_ADDR_VAR 0 3
37911: PUSH
37912: LD_INT 1
37914: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37915: LD_VAR 0 2
37919: PUSH
37920: LD_INT 24
37922: DOUBLE
37923: EQUAL
37924: IFTRUE 37934
37926: LD_INT 33
37928: DOUBLE
37929: EQUAL
37930: IFTRUE 37934
37932: GO 37959
37934: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37935: LD_ADDR_VAR 0 3
37939: PUSH
37940: LD_INT 32
37942: PPUSH
37943: LD_VAR 0 1
37947: PPUSH
37948: CALL_OW 321
37952: PUSH
37953: LD_INT 2
37955: EQUAL
37956: ST_TO_ADDR
37957: GO 38275
37959: LD_INT 20
37961: DOUBLE
37962: EQUAL
37963: IFTRUE 37967
37965: GO 37992
37967: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37968: LD_ADDR_VAR 0 3
37972: PUSH
37973: LD_INT 6
37975: PPUSH
37976: LD_VAR 0 1
37980: PPUSH
37981: CALL_OW 321
37985: PUSH
37986: LD_INT 2
37988: EQUAL
37989: ST_TO_ADDR
37990: GO 38275
37992: LD_INT 22
37994: DOUBLE
37995: EQUAL
37996: IFTRUE 38006
37998: LD_INT 36
38000: DOUBLE
38001: EQUAL
38002: IFTRUE 38006
38004: GO 38031
38006: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38007: LD_ADDR_VAR 0 3
38011: PUSH
38012: LD_INT 15
38014: PPUSH
38015: LD_VAR 0 1
38019: PPUSH
38020: CALL_OW 321
38024: PUSH
38025: LD_INT 2
38027: EQUAL
38028: ST_TO_ADDR
38029: GO 38275
38031: LD_INT 30
38033: DOUBLE
38034: EQUAL
38035: IFTRUE 38039
38037: GO 38064
38039: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38040: LD_ADDR_VAR 0 3
38044: PUSH
38045: LD_INT 20
38047: PPUSH
38048: LD_VAR 0 1
38052: PPUSH
38053: CALL_OW 321
38057: PUSH
38058: LD_INT 2
38060: EQUAL
38061: ST_TO_ADDR
38062: GO 38275
38064: LD_INT 28
38066: DOUBLE
38067: EQUAL
38068: IFTRUE 38078
38070: LD_INT 21
38072: DOUBLE
38073: EQUAL
38074: IFTRUE 38078
38076: GO 38103
38078: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38079: LD_ADDR_VAR 0 3
38083: PUSH
38084: LD_INT 21
38086: PPUSH
38087: LD_VAR 0 1
38091: PPUSH
38092: CALL_OW 321
38096: PUSH
38097: LD_INT 2
38099: EQUAL
38100: ST_TO_ADDR
38101: GO 38275
38103: LD_INT 16
38105: DOUBLE
38106: EQUAL
38107: IFTRUE 38111
38109: GO 38136
38111: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38112: LD_ADDR_VAR 0 3
38116: PUSH
38117: LD_INT 84
38119: PPUSH
38120: LD_VAR 0 1
38124: PPUSH
38125: CALL_OW 321
38129: PUSH
38130: LD_INT 2
38132: EQUAL
38133: ST_TO_ADDR
38134: GO 38275
38136: LD_INT 19
38138: DOUBLE
38139: EQUAL
38140: IFTRUE 38150
38142: LD_INT 23
38144: DOUBLE
38145: EQUAL
38146: IFTRUE 38150
38148: GO 38175
38150: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38151: LD_ADDR_VAR 0 3
38155: PUSH
38156: LD_INT 83
38158: PPUSH
38159: LD_VAR 0 1
38163: PPUSH
38164: CALL_OW 321
38168: PUSH
38169: LD_INT 2
38171: EQUAL
38172: ST_TO_ADDR
38173: GO 38275
38175: LD_INT 17
38177: DOUBLE
38178: EQUAL
38179: IFTRUE 38183
38181: GO 38208
38183: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38184: LD_ADDR_VAR 0 3
38188: PUSH
38189: LD_INT 39
38191: PPUSH
38192: LD_VAR 0 1
38196: PPUSH
38197: CALL_OW 321
38201: PUSH
38202: LD_INT 2
38204: EQUAL
38205: ST_TO_ADDR
38206: GO 38275
38208: LD_INT 18
38210: DOUBLE
38211: EQUAL
38212: IFTRUE 38216
38214: GO 38241
38216: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38217: LD_ADDR_VAR 0 3
38221: PUSH
38222: LD_INT 40
38224: PPUSH
38225: LD_VAR 0 1
38229: PPUSH
38230: CALL_OW 321
38234: PUSH
38235: LD_INT 2
38237: EQUAL
38238: ST_TO_ADDR
38239: GO 38275
38241: LD_INT 27
38243: DOUBLE
38244: EQUAL
38245: IFTRUE 38249
38247: GO 38274
38249: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38250: LD_ADDR_VAR 0 3
38254: PUSH
38255: LD_INT 35
38257: PPUSH
38258: LD_VAR 0 1
38262: PPUSH
38263: CALL_OW 321
38267: PUSH
38268: LD_INT 2
38270: EQUAL
38271: ST_TO_ADDR
38272: GO 38275
38274: POP
// end ;
38275: LD_VAR 0 3
38279: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38280: LD_INT 0
38282: PPUSH
38283: PPUSH
38284: PPUSH
38285: PPUSH
38286: PPUSH
38287: PPUSH
38288: PPUSH
38289: PPUSH
38290: PPUSH
38291: PPUSH
38292: PPUSH
// result := false ;
38293: LD_ADDR_VAR 0 6
38297: PUSH
38298: LD_INT 0
38300: ST_TO_ADDR
// if btype = b_depot then
38301: LD_VAR 0 2
38305: PUSH
38306: LD_INT 0
38308: EQUAL
38309: IFFALSE 38321
// begin result := true ;
38311: LD_ADDR_VAR 0 6
38315: PUSH
38316: LD_INT 1
38318: ST_TO_ADDR
// exit ;
38319: GO 39175
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38321: LD_VAR 0 1
38325: NOT
38326: IFTRUE 38351
38328: PUSH
38329: LD_VAR 0 1
38333: PPUSH
38334: CALL_OW 266
38338: PUSH
38339: LD_INT 0
38341: PUSH
38342: LD_INT 1
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: IN
38349: NOT
38350: OR
38351: IFTRUE 38360
38353: PUSH
38354: LD_VAR 0 2
38358: NOT
38359: OR
38360: IFTRUE 38396
38362: PUSH
38363: LD_VAR 0 5
38367: PUSH
38368: LD_INT 0
38370: PUSH
38371: LD_INT 1
38373: PUSH
38374: LD_INT 2
38376: PUSH
38377: LD_INT 3
38379: PUSH
38380: LD_INT 4
38382: PUSH
38383: LD_INT 5
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: IN
38394: NOT
38395: OR
38396: IFTRUE 38415
38398: PUSH
38399: LD_VAR 0 3
38403: PPUSH
38404: LD_VAR 0 4
38408: PPUSH
38409: CALL_OW 488
38413: NOT
38414: OR
38415: IFFALSE 38419
// exit ;
38417: GO 39175
// side := GetSide ( depot ) ;
38419: LD_ADDR_VAR 0 9
38423: PUSH
38424: LD_VAR 0 1
38428: PPUSH
38429: CALL_OW 255
38433: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38434: LD_VAR 0 9
38438: PPUSH
38439: LD_VAR 0 2
38443: PPUSH
38444: CALL 37904 0 2
38448: NOT
38449: IFFALSE 38453
// exit ;
38451: GO 39175
// pom := GetBase ( depot ) ;
38453: LD_ADDR_VAR 0 10
38457: PUSH
38458: LD_VAR 0 1
38462: PPUSH
38463: CALL_OW 274
38467: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38468: LD_ADDR_VAR 0 11
38472: PUSH
38473: LD_VAR 0 2
38477: PPUSH
38478: LD_VAR 0 1
38482: PPUSH
38483: CALL_OW 248
38487: PPUSH
38488: CALL_OW 450
38492: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38493: LD_VAR 0 10
38497: PPUSH
38498: LD_INT 1
38500: PPUSH
38501: CALL_OW 275
38505: PUSH
38506: LD_VAR 0 11
38510: PUSH
38511: LD_INT 1
38513: ARRAY
38514: GREATEREQUAL
38515: IFFALSE 38541
38517: PUSH
38518: LD_VAR 0 10
38522: PPUSH
38523: LD_INT 2
38525: PPUSH
38526: CALL_OW 275
38530: PUSH
38531: LD_VAR 0 11
38535: PUSH
38536: LD_INT 2
38538: ARRAY
38539: GREATEREQUAL
38540: AND
38541: IFFALSE 38567
38543: PUSH
38544: LD_VAR 0 10
38548: PPUSH
38549: LD_INT 3
38551: PPUSH
38552: CALL_OW 275
38556: PUSH
38557: LD_VAR 0 11
38561: PUSH
38562: LD_INT 3
38564: ARRAY
38565: GREATEREQUAL
38566: AND
38567: NOT
38568: IFFALSE 38572
// exit ;
38570: GO 39175
// if GetBType ( depot ) = b_depot then
38572: LD_VAR 0 1
38576: PPUSH
38577: CALL_OW 266
38581: PUSH
38582: LD_INT 0
38584: EQUAL
38585: IFFALSE 38597
// dist := 28 else
38587: LD_ADDR_VAR 0 14
38591: PUSH
38592: LD_INT 28
38594: ST_TO_ADDR
38595: GO 38605
// dist := 36 ;
38597: LD_ADDR_VAR 0 14
38601: PUSH
38602: LD_INT 36
38604: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38605: LD_VAR 0 1
38609: PPUSH
38610: LD_VAR 0 3
38614: PPUSH
38615: LD_VAR 0 4
38619: PPUSH
38620: CALL_OW 297
38624: PUSH
38625: LD_VAR 0 14
38629: GREATER
38630: IFFALSE 38634
// exit ;
38632: GO 39175
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38634: LD_ADDR_VAR 0 12
38638: PUSH
38639: LD_VAR 0 2
38643: PPUSH
38644: LD_VAR 0 3
38648: PPUSH
38649: LD_VAR 0 4
38653: PPUSH
38654: LD_VAR 0 5
38658: PPUSH
38659: LD_VAR 0 1
38663: PPUSH
38664: CALL_OW 248
38668: PPUSH
38669: LD_INT 0
38671: PPUSH
38672: CALL 39180 0 6
38676: ST_TO_ADDR
// if not hexes then
38677: LD_VAR 0 12
38681: NOT
38682: IFFALSE 38686
// exit ;
38684: GO 39175
// hex := GetHexInfo ( x , y ) ;
38686: LD_ADDR_VAR 0 15
38690: PUSH
38691: LD_VAR 0 3
38695: PPUSH
38696: LD_VAR 0 4
38700: PPUSH
38701: CALL_OW 546
38705: ST_TO_ADDR
// if hex [ 1 ] then
38706: LD_VAR 0 15
38710: PUSH
38711: LD_INT 1
38713: ARRAY
38714: IFFALSE 38718
// exit ;
38716: GO 39175
// height := hex [ 2 ] ;
38718: LD_ADDR_VAR 0 13
38722: PUSH
38723: LD_VAR 0 15
38727: PUSH
38728: LD_INT 2
38730: ARRAY
38731: ST_TO_ADDR
// for i = 1 to hexes do
38732: LD_ADDR_VAR 0 7
38736: PUSH
38737: DOUBLE
38738: LD_INT 1
38740: DEC
38741: ST_TO_ADDR
38742: LD_VAR 0 12
38746: PUSH
38747: FOR_TO
38748: IFFALSE 39092
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38750: LD_VAR 0 12
38754: PUSH
38755: LD_VAR 0 7
38759: ARRAY
38760: PUSH
38761: LD_INT 1
38763: ARRAY
38764: PPUSH
38765: LD_VAR 0 12
38769: PUSH
38770: LD_VAR 0 7
38774: ARRAY
38775: PUSH
38776: LD_INT 2
38778: ARRAY
38779: PPUSH
38780: CALL_OW 488
38784: NOT
38785: IFTRUE 38827
38787: PUSH
38788: LD_VAR 0 12
38792: PUSH
38793: LD_VAR 0 7
38797: ARRAY
38798: PUSH
38799: LD_INT 1
38801: ARRAY
38802: PPUSH
38803: LD_VAR 0 12
38807: PUSH
38808: LD_VAR 0 7
38812: ARRAY
38813: PUSH
38814: LD_INT 2
38816: ARRAY
38817: PPUSH
38818: CALL_OW 428
38822: PUSH
38823: LD_INT 0
38825: GREATER
38826: OR
38827: IFTRUE 38865
38829: PUSH
38830: LD_VAR 0 12
38834: PUSH
38835: LD_VAR 0 7
38839: ARRAY
38840: PUSH
38841: LD_INT 1
38843: ARRAY
38844: PPUSH
38845: LD_VAR 0 12
38849: PUSH
38850: LD_VAR 0 7
38854: ARRAY
38855: PUSH
38856: LD_INT 2
38858: ARRAY
38859: PPUSH
38860: CALL_OW 351
38864: OR
38865: IFFALSE 38871
// exit ;
38867: POP
38868: POP
38869: GO 39175
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38871: LD_ADDR_VAR 0 8
38875: PUSH
38876: LD_VAR 0 12
38880: PUSH
38881: LD_VAR 0 7
38885: ARRAY
38886: PUSH
38887: LD_INT 1
38889: ARRAY
38890: PPUSH
38891: LD_VAR 0 12
38895: PUSH
38896: LD_VAR 0 7
38900: ARRAY
38901: PUSH
38902: LD_INT 2
38904: ARRAY
38905: PPUSH
38906: CALL_OW 546
38910: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38911: LD_VAR 0 8
38915: PUSH
38916: LD_INT 1
38918: ARRAY
38919: IFTRUE 38941
38921: PUSH
38922: LD_VAR 0 8
38926: PUSH
38927: LD_INT 2
38929: ARRAY
38930: PUSH
38931: LD_VAR 0 13
38935: PUSH
38936: LD_INT 2
38938: PLUS
38939: GREATER
38940: OR
38941: IFTRUE 38963
38943: PUSH
38944: LD_VAR 0 8
38948: PUSH
38949: LD_INT 2
38951: ARRAY
38952: PUSH
38953: LD_VAR 0 13
38957: PUSH
38958: LD_INT 2
38960: MINUS
38961: LESS
38962: OR
38963: IFTRUE 39031
38965: PUSH
38966: LD_VAR 0 8
38970: PUSH
38971: LD_INT 3
38973: ARRAY
38974: PUSH
38975: LD_INT 0
38977: PUSH
38978: LD_INT 8
38980: PUSH
38981: LD_INT 9
38983: PUSH
38984: LD_INT 10
38986: PUSH
38987: LD_INT 11
38989: PUSH
38990: LD_INT 12
38992: PUSH
38993: LD_INT 13
38995: PUSH
38996: LD_INT 16
38998: PUSH
38999: LD_INT 17
39001: PUSH
39002: LD_INT 18
39004: PUSH
39005: LD_INT 19
39007: PUSH
39008: LD_INT 20
39010: PUSH
39011: LD_INT 21
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: LIST
39023: LIST
39024: LIST
39025: LIST
39026: LIST
39027: LIST
39028: IN
39029: NOT
39030: OR
39031: IFTRUE 39044
39033: PUSH
39034: LD_VAR 0 8
39038: PUSH
39039: LD_INT 5
39041: ARRAY
39042: NOT
39043: OR
39044: IFTRUE 39084
39046: PUSH
39047: LD_VAR 0 8
39051: PUSH
39052: LD_INT 6
39054: ARRAY
39055: PUSH
39056: LD_INT 1
39058: PUSH
39059: LD_INT 2
39061: PUSH
39062: LD_INT 7
39064: PUSH
39065: LD_INT 9
39067: PUSH
39068: LD_INT 10
39070: PUSH
39071: LD_INT 11
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: IN
39082: NOT
39083: OR
39084: IFFALSE 39090
// exit ;
39086: POP
39087: POP
39088: GO 39175
// end ;
39090: GO 38747
39092: POP
39093: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39094: LD_VAR 0 9
39098: PPUSH
39099: LD_VAR 0 3
39103: PPUSH
39104: LD_VAR 0 4
39108: PPUSH
39109: LD_INT 20
39111: PPUSH
39112: CALL 30994 0 4
39116: PUSH
39117: LD_INT 4
39119: ARRAY
39120: IFFALSE 39124
// exit ;
39122: GO 39175
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39124: LD_VAR 0 2
39128: PUSH
39129: LD_INT 29
39131: PUSH
39132: LD_INT 30
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: IN
39139: IFFALSE 39163
39141: PUSH
39142: LD_VAR 0 3
39146: PPUSH
39147: LD_VAR 0 4
39151: PPUSH
39152: LD_VAR 0 9
39156: PPUSH
39157: CALL_OW 440
39161: NOT
39162: AND
39163: IFFALSE 39167
// exit ;
39165: GO 39175
// result := true ;
39167: LD_ADDR_VAR 0 6
39171: PUSH
39172: LD_INT 1
39174: ST_TO_ADDR
// end ;
39175: LD_VAR 0 6
39179: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39180: LD_INT 0
39182: PPUSH
39183: PPUSH
39184: PPUSH
39185: PPUSH
39186: PPUSH
39187: PPUSH
39188: PPUSH
39189: PPUSH
39190: PPUSH
39191: PPUSH
39192: PPUSH
39193: PPUSH
39194: PPUSH
39195: PPUSH
39196: PPUSH
39197: PPUSH
39198: PPUSH
39199: PPUSH
39200: PPUSH
39201: PPUSH
39202: PPUSH
39203: PPUSH
39204: PPUSH
39205: PPUSH
39206: PPUSH
39207: PPUSH
39208: PPUSH
39209: PPUSH
39210: PPUSH
39211: PPUSH
39212: PPUSH
39213: PPUSH
39214: PPUSH
39215: PPUSH
39216: PPUSH
39217: PPUSH
39218: PPUSH
39219: PPUSH
39220: PPUSH
39221: PPUSH
39222: PPUSH
39223: PPUSH
39224: PPUSH
39225: PPUSH
39226: PPUSH
39227: PPUSH
39228: PPUSH
39229: PPUSH
39230: PPUSH
39231: PPUSH
39232: PPUSH
39233: PPUSH
39234: PPUSH
39235: PPUSH
39236: PPUSH
39237: PPUSH
39238: PPUSH
39239: PPUSH
// result = [ ] ;
39240: LD_ADDR_VAR 0 7
39244: PUSH
39245: EMPTY
39246: ST_TO_ADDR
// temp_list = [ ] ;
39247: LD_ADDR_VAR 0 9
39251: PUSH
39252: EMPTY
39253: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39254: LD_VAR 0 4
39258: PUSH
39259: LD_INT 0
39261: PUSH
39262: LD_INT 1
39264: PUSH
39265: LD_INT 2
39267: PUSH
39268: LD_INT 3
39270: PUSH
39271: LD_INT 4
39273: PUSH
39274: LD_INT 5
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: IN
39285: NOT
39286: IFTRUE 39329
39288: PUSH
39289: LD_VAR 0 1
39293: PUSH
39294: LD_INT 0
39296: PUSH
39297: LD_INT 1
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: IN
39304: IFFALSE 39328
39306: PUSH
39307: LD_VAR 0 5
39311: PUSH
39312: LD_INT 1
39314: PUSH
39315: LD_INT 2
39317: PUSH
39318: LD_INT 3
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: LIST
39325: IN
39326: NOT
39327: AND
39328: OR
39329: IFFALSE 39333
// exit ;
39331: GO 57732
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39333: LD_VAR 0 1
39337: PUSH
39338: LD_INT 6
39340: PUSH
39341: LD_INT 7
39343: PUSH
39344: LD_INT 8
39346: PUSH
39347: LD_INT 13
39349: PUSH
39350: LD_INT 12
39352: PUSH
39353: LD_INT 15
39355: PUSH
39356: LD_INT 11
39358: PUSH
39359: LD_INT 14
39361: PUSH
39362: LD_INT 10
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: IN
39376: IFFALSE 39386
// btype = b_lab ;
39378: LD_ADDR_VAR 0 1
39382: PUSH
39383: LD_INT 6
39385: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39386: LD_VAR 0 6
39390: PUSH
39391: LD_INT 0
39393: PUSH
39394: LD_INT 1
39396: PUSH
39397: LD_INT 2
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: LIST
39404: IN
39405: NOT
39406: IFTRUE 39474
39408: PUSH
39409: LD_VAR 0 1
39413: PUSH
39414: LD_INT 0
39416: PUSH
39417: LD_INT 1
39419: PUSH
39420: LD_INT 2
39422: PUSH
39423: LD_INT 3
39425: PUSH
39426: LD_INT 6
39428: PUSH
39429: LD_INT 36
39431: PUSH
39432: LD_INT 4
39434: PUSH
39435: LD_INT 5
39437: PUSH
39438: LD_INT 31
39440: PUSH
39441: LD_INT 32
39443: PUSH
39444: LD_INT 33
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: IN
39460: NOT
39461: IFFALSE 39473
39463: PUSH
39464: LD_VAR 0 6
39468: PUSH
39469: LD_INT 1
39471: EQUAL
39472: AND
39473: OR
39474: IFTRUE 39506
39476: PUSH
39477: LD_VAR 0 1
39481: PUSH
39482: LD_INT 2
39484: PUSH
39485: LD_INT 3
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: IN
39492: NOT
39493: IFFALSE 39505
39495: PUSH
39496: LD_VAR 0 6
39500: PUSH
39501: LD_INT 2
39503: EQUAL
39504: AND
39505: OR
39506: IFFALSE 39516
// mode = 0 ;
39508: LD_ADDR_VAR 0 6
39512: PUSH
39513: LD_INT 0
39515: ST_TO_ADDR
// case mode of 0 :
39516: LD_VAR 0 6
39520: PUSH
39521: LD_INT 0
39523: DOUBLE
39524: EQUAL
39525: IFTRUE 39529
39527: GO 50982
39529: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39530: LD_ADDR_VAR 0 11
39534: PUSH
39535: LD_INT 0
39537: PUSH
39538: LD_INT 0
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 0
39547: PUSH
39548: LD_INT 1
39550: NEG
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 1
39558: PUSH
39559: LD_INT 0
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 1
39568: PUSH
39569: LD_INT 1
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 0
39578: PUSH
39579: LD_INT 1
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 1
39588: NEG
39589: PUSH
39590: LD_INT 0
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 1
39599: NEG
39600: PUSH
39601: LD_INT 1
39603: NEG
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 1
39611: NEG
39612: PUSH
39613: LD_INT 2
39615: NEG
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 0
39623: PUSH
39624: LD_INT 2
39626: NEG
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 1
39634: PUSH
39635: LD_INT 1
39637: NEG
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 1
39645: PUSH
39646: LD_INT 2
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 0
39655: PUSH
39656: LD_INT 2
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 1
39665: NEG
39666: PUSH
39667: LD_INT 1
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 1
39676: PUSH
39677: LD_INT 3
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 0
39686: PUSH
39687: LD_INT 3
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 1
39696: NEG
39697: PUSH
39698: LD_INT 2
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39723: LD_ADDR_VAR 0 12
39727: PUSH
39728: LD_INT 0
39730: PUSH
39731: LD_INT 0
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 0
39740: PUSH
39741: LD_INT 1
39743: NEG
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 1
39751: PUSH
39752: LD_INT 0
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 1
39761: PUSH
39762: LD_INT 1
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 0
39771: PUSH
39772: LD_INT 1
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: LD_INT 0
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 1
39792: NEG
39793: PUSH
39794: LD_INT 1
39796: NEG
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 1
39804: PUSH
39805: LD_INT 1
39807: NEG
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 2
39815: PUSH
39816: LD_INT 0
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 2
39825: PUSH
39826: LD_INT 1
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 1
39835: NEG
39836: PUSH
39837: LD_INT 1
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 2
39846: NEG
39847: PUSH
39848: LD_INT 0
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 2
39857: NEG
39858: PUSH
39859: LD_INT 1
39861: NEG
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 2
39869: NEG
39870: PUSH
39871: LD_INT 1
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 3
39880: NEG
39881: PUSH
39882: LD_INT 0
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 3
39891: NEG
39892: PUSH
39893: LD_INT 1
39895: NEG
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: LIST
39914: LIST
39915: LIST
39916: LIST
39917: LIST
39918: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39919: LD_ADDR_VAR 0 13
39923: PUSH
39924: LD_INT 0
39926: PUSH
39927: LD_INT 0
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 0
39936: PUSH
39937: LD_INT 1
39939: NEG
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 1
39947: PUSH
39948: LD_INT 0
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 1
39957: PUSH
39958: LD_INT 1
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 0
39967: PUSH
39968: LD_INT 1
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 1
39977: NEG
39978: PUSH
39979: LD_INT 0
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 1
39988: NEG
39989: PUSH
39990: LD_INT 1
39992: NEG
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 1
40000: NEG
40001: PUSH
40002: LD_INT 2
40004: NEG
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 2
40012: PUSH
40013: LD_INT 1
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 2
40022: PUSH
40023: LD_INT 2
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 1
40032: PUSH
40033: LD_INT 2
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 2
40042: NEG
40043: PUSH
40044: LD_INT 1
40046: NEG
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 2
40054: NEG
40055: PUSH
40056: LD_INT 2
40058: NEG
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 2
40066: NEG
40067: PUSH
40068: LD_INT 3
40070: NEG
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 3
40078: NEG
40079: PUSH
40080: LD_INT 2
40082: NEG
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 3
40090: NEG
40091: PUSH
40092: LD_INT 3
40094: NEG
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40118: LD_ADDR_VAR 0 14
40122: PUSH
40123: LD_INT 0
40125: PUSH
40126: LD_INT 0
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 0
40135: PUSH
40136: LD_INT 1
40138: NEG
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 1
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 1
40156: PUSH
40157: LD_INT 1
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 0
40166: PUSH
40167: LD_INT 1
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 1
40176: NEG
40177: PUSH
40178: LD_INT 0
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 1
40187: NEG
40188: PUSH
40189: LD_INT 1
40191: NEG
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 1
40199: NEG
40200: PUSH
40201: LD_INT 2
40203: NEG
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 0
40211: PUSH
40212: LD_INT 2
40214: NEG
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 1
40222: PUSH
40223: LD_INT 1
40225: NEG
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 1
40233: PUSH
40234: LD_INT 2
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 0
40243: PUSH
40244: LD_INT 2
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 1
40253: NEG
40254: PUSH
40255: LD_INT 1
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 1
40264: NEG
40265: PUSH
40266: LD_INT 3
40268: NEG
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 0
40276: PUSH
40277: LD_INT 3
40279: NEG
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 1
40287: PUSH
40288: LD_INT 2
40290: NEG
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40314: LD_ADDR_VAR 0 15
40318: PUSH
40319: LD_INT 0
40321: PUSH
40322: LD_INT 0
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 0
40331: PUSH
40332: LD_INT 1
40334: NEG
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 1
40342: PUSH
40343: LD_INT 0
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 1
40352: PUSH
40353: LD_INT 1
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 0
40362: PUSH
40363: LD_INT 1
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 1
40372: NEG
40373: PUSH
40374: LD_INT 0
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 1
40383: NEG
40384: PUSH
40385: LD_INT 1
40387: NEG
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 1
40395: PUSH
40396: LD_INT 1
40398: NEG
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 2
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 2
40416: PUSH
40417: LD_INT 1
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 1
40426: NEG
40427: PUSH
40428: LD_INT 1
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 2
40437: NEG
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 2
40448: NEG
40449: PUSH
40450: LD_INT 1
40452: NEG
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 2
40460: PUSH
40461: LD_INT 1
40463: NEG
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 3
40471: PUSH
40472: LD_INT 0
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 3
40481: PUSH
40482: LD_INT 1
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40507: LD_ADDR_VAR 0 16
40511: PUSH
40512: LD_INT 0
40514: PUSH
40515: LD_INT 0
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 0
40524: PUSH
40525: LD_INT 1
40527: NEG
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 1
40535: PUSH
40536: LD_INT 0
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 1
40545: PUSH
40546: LD_INT 1
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 0
40555: PUSH
40556: LD_INT 1
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 1
40565: NEG
40566: PUSH
40567: LD_INT 0
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 1
40576: NEG
40577: PUSH
40578: LD_INT 1
40580: NEG
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 1
40588: NEG
40589: PUSH
40590: LD_INT 2
40592: NEG
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 2
40600: PUSH
40601: LD_INT 1
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 2
40610: PUSH
40611: LD_INT 2
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 1
40620: PUSH
40621: LD_INT 2
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 2
40630: NEG
40631: PUSH
40632: LD_INT 1
40634: NEG
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 2
40642: NEG
40643: PUSH
40644: LD_INT 2
40646: NEG
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 3
40654: PUSH
40655: LD_INT 2
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 3
40664: PUSH
40665: LD_INT 3
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 2
40674: PUSH
40675: LD_INT 3
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: LIST
40686: LIST
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40700: LD_ADDR_VAR 0 17
40704: PUSH
40705: LD_INT 0
40707: PUSH
40708: LD_INT 0
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: LD_INT 1
40720: NEG
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 1
40728: PUSH
40729: LD_INT 0
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 1
40738: PUSH
40739: LD_INT 1
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: LD_INT 1
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 1
40758: NEG
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 1
40769: NEG
40770: PUSH
40771: LD_INT 1
40773: NEG
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 1
40781: NEG
40782: PUSH
40783: LD_INT 2
40785: NEG
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 0
40793: PUSH
40794: LD_INT 2
40796: NEG
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 1
40804: PUSH
40805: LD_INT 1
40807: NEG
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 2
40815: PUSH
40816: LD_INT 0
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 2
40825: PUSH
40826: LD_INT 1
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 2
40835: PUSH
40836: LD_INT 2
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 1
40845: PUSH
40846: LD_INT 2
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 0
40855: PUSH
40856: LD_INT 2
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 1
40865: NEG
40866: PUSH
40867: LD_INT 1
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 2
40876: NEG
40877: PUSH
40878: LD_INT 0
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 2
40887: NEG
40888: PUSH
40889: LD_INT 1
40891: NEG
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 2
40899: NEG
40900: PUSH
40901: LD_INT 2
40903: NEG
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40930: LD_ADDR_VAR 0 18
40934: PUSH
40935: LD_INT 0
40937: PUSH
40938: LD_INT 0
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 0
40947: PUSH
40948: LD_INT 1
40950: NEG
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 1
40958: PUSH
40959: LD_INT 0
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 1
40968: PUSH
40969: LD_INT 1
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 0
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 1
40988: NEG
40989: PUSH
40990: LD_INT 0
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 1
40999: NEG
41000: PUSH
41001: LD_INT 1
41003: NEG
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 1
41011: NEG
41012: PUSH
41013: LD_INT 2
41015: NEG
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 0
41023: PUSH
41024: LD_INT 2
41026: NEG
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 1
41034: PUSH
41035: LD_INT 1
41037: NEG
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 2
41045: PUSH
41046: LD_INT 0
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 2
41055: PUSH
41056: LD_INT 1
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 2
41065: PUSH
41066: LD_INT 2
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 1
41075: PUSH
41076: LD_INT 2
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 0
41085: PUSH
41086: LD_INT 2
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 1
41095: NEG
41096: PUSH
41097: LD_INT 1
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 2
41106: NEG
41107: PUSH
41108: LD_INT 0
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 2
41117: NEG
41118: PUSH
41119: LD_INT 1
41121: NEG
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 2
41129: NEG
41130: PUSH
41131: LD_INT 2
41133: NEG
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41160: LD_ADDR_VAR 0 19
41164: PUSH
41165: LD_INT 0
41167: PUSH
41168: LD_INT 0
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 0
41177: PUSH
41178: LD_INT 1
41180: NEG
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 1
41188: PUSH
41189: LD_INT 0
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 1
41198: PUSH
41199: LD_INT 1
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 0
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 1
41218: NEG
41219: PUSH
41220: LD_INT 0
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 1
41229: NEG
41230: PUSH
41231: LD_INT 1
41233: NEG
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 1
41241: NEG
41242: PUSH
41243: LD_INT 2
41245: NEG
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 0
41253: PUSH
41254: LD_INT 2
41256: NEG
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 1
41264: PUSH
41265: LD_INT 1
41267: NEG
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 2
41275: PUSH
41276: LD_INT 0
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 2
41285: PUSH
41286: LD_INT 1
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 2
41295: PUSH
41296: LD_INT 2
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 1
41305: PUSH
41306: LD_INT 2
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 0
41315: PUSH
41316: LD_INT 2
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 1
41325: NEG
41326: PUSH
41327: LD_INT 1
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 2
41336: NEG
41337: PUSH
41338: LD_INT 0
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 2
41347: NEG
41348: PUSH
41349: LD_INT 1
41351: NEG
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 2
41359: NEG
41360: PUSH
41361: LD_INT 2
41363: NEG
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41390: LD_ADDR_VAR 0 20
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: LD_INT 0
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 0
41407: PUSH
41408: LD_INT 1
41410: NEG
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 1
41418: PUSH
41419: LD_INT 0
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 1
41428: PUSH
41429: LD_INT 1
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 0
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 1
41448: NEG
41449: PUSH
41450: LD_INT 0
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 1
41459: NEG
41460: PUSH
41461: LD_INT 1
41463: NEG
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 1
41471: NEG
41472: PUSH
41473: LD_INT 2
41475: NEG
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 0
41483: PUSH
41484: LD_INT 2
41486: NEG
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 1
41494: PUSH
41495: LD_INT 1
41497: NEG
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 2
41505: PUSH
41506: LD_INT 0
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 2
41515: PUSH
41516: LD_INT 1
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 2
41525: PUSH
41526: LD_INT 2
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 1
41535: PUSH
41536: LD_INT 2
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 0
41545: PUSH
41546: LD_INT 2
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: LD_INT 1
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 2
41566: NEG
41567: PUSH
41568: LD_INT 0
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 2
41577: NEG
41578: PUSH
41579: LD_INT 1
41581: NEG
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 2
41589: NEG
41590: PUSH
41591: LD_INT 2
41593: NEG
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41620: LD_ADDR_VAR 0 21
41624: PUSH
41625: LD_INT 0
41627: PUSH
41628: LD_INT 0
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 0
41637: PUSH
41638: LD_INT 1
41640: NEG
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 1
41648: PUSH
41649: LD_INT 0
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 1
41658: PUSH
41659: LD_INT 1
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 0
41668: PUSH
41669: LD_INT 1
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 1
41678: NEG
41679: PUSH
41680: LD_INT 0
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 1
41689: NEG
41690: PUSH
41691: LD_INT 1
41693: NEG
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 1
41701: NEG
41702: PUSH
41703: LD_INT 2
41705: NEG
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 0
41713: PUSH
41714: LD_INT 2
41716: NEG
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 1
41724: PUSH
41725: LD_INT 1
41727: NEG
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 2
41735: PUSH
41736: LD_INT 0
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 2
41745: PUSH
41746: LD_INT 1
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 2
41755: PUSH
41756: LD_INT 2
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 1
41765: PUSH
41766: LD_INT 2
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 0
41775: PUSH
41776: LD_INT 2
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 1
41785: NEG
41786: PUSH
41787: LD_INT 1
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 2
41796: NEG
41797: PUSH
41798: LD_INT 0
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 2
41807: NEG
41808: PUSH
41809: LD_INT 1
41811: NEG
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 2
41819: NEG
41820: PUSH
41821: LD_INT 2
41823: NEG
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41850: LD_ADDR_VAR 0 22
41854: PUSH
41855: LD_INT 0
41857: PUSH
41858: LD_INT 0
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 0
41867: PUSH
41868: LD_INT 1
41870: NEG
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 1
41878: PUSH
41879: LD_INT 0
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 1
41888: PUSH
41889: LD_INT 1
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 0
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 1
41908: NEG
41909: PUSH
41910: LD_INT 0
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 1
41919: NEG
41920: PUSH
41921: LD_INT 1
41923: NEG
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: LD_INT 2
41935: NEG
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: LD_INT 0
41943: PUSH
41944: LD_INT 2
41946: NEG
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 1
41954: PUSH
41955: LD_INT 1
41957: NEG
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 2
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 2
41975: PUSH
41976: LD_INT 1
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 2
41985: PUSH
41986: LD_INT 2
41988: PUSH
41989: EMPTY
41990: LIST
41991: LIST
41992: PUSH
41993: LD_INT 1
41995: PUSH
41996: LD_INT 2
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 0
42005: PUSH
42006: LD_INT 2
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 1
42015: NEG
42016: PUSH
42017: LD_INT 1
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 2
42026: NEG
42027: PUSH
42028: LD_INT 0
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 2
42037: NEG
42038: PUSH
42039: LD_INT 1
42041: NEG
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 2
42049: NEG
42050: PUSH
42051: LD_INT 2
42053: NEG
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42080: LD_ADDR_VAR 0 23
42084: PUSH
42085: LD_INT 0
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: LD_INT 1
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 1
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 1
42118: PUSH
42119: LD_INT 1
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: NEG
42150: PUSH
42151: LD_INT 1
42153: NEG
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 1
42161: NEG
42162: PUSH
42163: LD_INT 2
42165: NEG
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: LD_INT 2
42176: NEG
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 1
42184: PUSH
42185: LD_INT 1
42187: NEG
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 2
42195: PUSH
42196: LD_INT 0
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 2
42205: PUSH
42206: LD_INT 1
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 2
42215: PUSH
42216: LD_INT 2
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 1
42225: PUSH
42226: LD_INT 2
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 0
42235: PUSH
42236: LD_INT 2
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 1
42245: NEG
42246: PUSH
42247: LD_INT 1
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 2
42256: NEG
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 2
42267: NEG
42268: PUSH
42269: LD_INT 1
42271: NEG
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 2
42279: NEG
42280: PUSH
42281: LD_INT 2
42283: NEG
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 2
42291: NEG
42292: PUSH
42293: LD_INT 3
42295: NEG
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 1
42303: NEG
42304: PUSH
42305: LD_INT 3
42307: NEG
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: LD_INT 2
42318: NEG
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 2
42326: PUSH
42327: LD_INT 1
42329: NEG
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42360: LD_ADDR_VAR 0 24
42364: PUSH
42365: LD_INT 0
42367: PUSH
42368: LD_INT 0
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 0
42377: PUSH
42378: LD_INT 1
42380: NEG
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: LD_INT 0
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 1
42398: PUSH
42399: LD_INT 1
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: LD_INT 1
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 1
42418: NEG
42419: PUSH
42420: LD_INT 0
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 1
42429: NEG
42430: PUSH
42431: LD_INT 1
42433: NEG
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: LD_INT 2
42445: NEG
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 0
42453: PUSH
42454: LD_INT 2
42456: NEG
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 1
42464: PUSH
42465: LD_INT 1
42467: NEG
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 2
42475: PUSH
42476: LD_INT 0
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 2
42485: PUSH
42486: LD_INT 1
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 2
42495: PUSH
42496: LD_INT 2
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 1
42505: PUSH
42506: LD_INT 2
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: LD_INT 2
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 1
42525: NEG
42526: PUSH
42527: LD_INT 1
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 2
42536: NEG
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 2
42547: NEG
42548: PUSH
42549: LD_INT 1
42551: NEG
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 2
42559: NEG
42560: PUSH
42561: LD_INT 2
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 1
42571: PUSH
42572: LD_INT 2
42574: NEG
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 2
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 3
42593: PUSH
42594: LD_INT 1
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 3
42603: PUSH
42604: LD_INT 2
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42636: LD_ADDR_VAR 0 25
42640: PUSH
42641: LD_INT 0
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 0
42653: PUSH
42654: LD_INT 1
42656: NEG
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 1
42664: PUSH
42665: LD_INT 0
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: LD_INT 1
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 0
42684: PUSH
42685: LD_INT 1
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: NEG
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 1
42705: NEG
42706: PUSH
42707: LD_INT 1
42709: NEG
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 1
42717: NEG
42718: PUSH
42719: LD_INT 2
42721: NEG
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 0
42729: PUSH
42730: LD_INT 2
42732: NEG
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 1
42740: PUSH
42741: LD_INT 1
42743: NEG
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 2
42751: PUSH
42752: LD_INT 0
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 2
42761: PUSH
42762: LD_INT 1
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 2
42771: PUSH
42772: LD_INT 2
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 1
42781: PUSH
42782: LD_INT 2
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: LD_INT 2
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 1
42801: NEG
42802: PUSH
42803: LD_INT 1
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 2
42812: NEG
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 2
42823: NEG
42824: PUSH
42825: LD_INT 1
42827: NEG
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 2
42835: NEG
42836: PUSH
42837: LD_INT 2
42839: NEG
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 3
42847: PUSH
42848: LD_INT 1
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 3
42857: PUSH
42858: LD_INT 2
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 2
42867: PUSH
42868: LD_INT 3
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 1
42877: PUSH
42878: LD_INT 3
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42910: LD_ADDR_VAR 0 26
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: LD_INT 0
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 0
42927: PUSH
42928: LD_INT 1
42930: NEG
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 1
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 1
42948: PUSH
42949: LD_INT 1
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: LD_INT 1
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 1
42968: NEG
42969: PUSH
42970: LD_INT 0
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 1
42979: NEG
42980: PUSH
42981: LD_INT 1
42983: NEG
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 1
42991: NEG
42992: PUSH
42993: LD_INT 2
42995: NEG
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 0
43003: PUSH
43004: LD_INT 2
43006: NEG
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 1
43014: PUSH
43015: LD_INT 1
43017: NEG
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 2
43025: PUSH
43026: LD_INT 0
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 2
43035: PUSH
43036: LD_INT 1
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 2
43045: PUSH
43046: LD_INT 2
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 1
43055: PUSH
43056: LD_INT 2
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 0
43065: PUSH
43066: LD_INT 2
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: LD_INT 1
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 2
43086: NEG
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 2
43097: NEG
43098: PUSH
43099: LD_INT 1
43101: NEG
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 2
43109: NEG
43110: PUSH
43111: LD_INT 2
43113: NEG
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 2
43121: PUSH
43122: LD_INT 3
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 1
43131: PUSH
43132: LD_INT 3
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 1
43141: NEG
43142: PUSH
43143: LD_INT 2
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 2
43152: NEG
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43186: LD_ADDR_VAR 0 27
43190: PUSH
43191: LD_INT 0
43193: PUSH
43194: LD_INT 0
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 0
43203: PUSH
43204: LD_INT 1
43206: NEG
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 1
43214: PUSH
43215: LD_INT 0
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 1
43224: PUSH
43225: LD_INT 1
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: LD_INT 1
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 1
43244: NEG
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 1
43255: NEG
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 1
43267: NEG
43268: PUSH
43269: LD_INT 2
43271: NEG
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 0
43279: PUSH
43280: LD_INT 2
43282: NEG
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 1
43290: PUSH
43291: LD_INT 1
43293: NEG
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 2
43301: PUSH
43302: LD_INT 0
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 2
43311: PUSH
43312: LD_INT 1
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 2
43321: PUSH
43322: LD_INT 2
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 1
43331: PUSH
43332: LD_INT 2
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 0
43341: PUSH
43342: LD_INT 2
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 1
43351: NEG
43352: PUSH
43353: LD_INT 1
43355: PUSH
43356: EMPTY
43357: LIST
43358: LIST
43359: PUSH
43360: LD_INT 2
43362: NEG
43363: PUSH
43364: LD_INT 0
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 2
43373: NEG
43374: PUSH
43375: LD_INT 1
43377: NEG
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 2
43385: NEG
43386: PUSH
43387: LD_INT 2
43389: NEG
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 1
43397: NEG
43398: PUSH
43399: LD_INT 2
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 2
43408: NEG
43409: PUSH
43410: LD_INT 1
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 3
43419: NEG
43420: PUSH
43421: LD_INT 1
43423: NEG
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 3
43431: NEG
43432: PUSH
43433: LD_INT 2
43435: NEG
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43466: LD_ADDR_VAR 0 28
43470: PUSH
43471: LD_INT 0
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 0
43483: PUSH
43484: LD_INT 1
43486: NEG
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 1
43494: PUSH
43495: LD_INT 0
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 1
43504: PUSH
43505: LD_INT 1
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 0
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 1
43524: NEG
43525: PUSH
43526: LD_INT 0
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 1
43535: NEG
43536: PUSH
43537: LD_INT 1
43539: NEG
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 1
43547: NEG
43548: PUSH
43549: LD_INT 2
43551: NEG
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 0
43559: PUSH
43560: LD_INT 2
43562: NEG
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 1
43570: PUSH
43571: LD_INT 1
43573: NEG
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 2
43581: PUSH
43582: LD_INT 0
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 2
43591: PUSH
43592: LD_INT 1
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 2
43601: PUSH
43602: LD_INT 2
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 1
43611: PUSH
43612: LD_INT 2
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 0
43621: PUSH
43622: LD_INT 2
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 1
43631: NEG
43632: PUSH
43633: LD_INT 1
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 2
43642: NEG
43643: PUSH
43644: LD_INT 0
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 2
43653: NEG
43654: PUSH
43655: LD_INT 1
43657: NEG
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 2
43665: NEG
43666: PUSH
43667: LD_INT 2
43669: NEG
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 2
43677: NEG
43678: PUSH
43679: LD_INT 3
43681: NEG
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 1
43689: NEG
43690: PUSH
43691: LD_INT 3
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 3
43701: NEG
43702: PUSH
43703: LD_INT 1
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 3
43713: NEG
43714: PUSH
43715: LD_INT 2
43717: NEG
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43748: LD_ADDR_VAR 0 29
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: LD_INT 1
43768: NEG
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 1
43776: PUSH
43777: LD_INT 0
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 1
43786: PUSH
43787: LD_INT 1
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 0
43796: PUSH
43797: LD_INT 1
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 1
43806: NEG
43807: PUSH
43808: LD_INT 0
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 1
43817: NEG
43818: PUSH
43819: LD_INT 1
43821: NEG
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 1
43829: NEG
43830: PUSH
43831: LD_INT 2
43833: NEG
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 0
43841: PUSH
43842: LD_INT 2
43844: NEG
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 1
43852: PUSH
43853: LD_INT 1
43855: NEG
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 2
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 2
43873: PUSH
43874: LD_INT 1
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 1
43883: PUSH
43884: LD_INT 2
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 0
43893: PUSH
43894: LD_INT 2
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 1
43903: NEG
43904: PUSH
43905: LD_INT 1
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 2
43914: NEG
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 2
43926: NEG
43927: PUSH
43928: LD_INT 2
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 2
43938: NEG
43939: PUSH
43940: LD_INT 3
43942: NEG
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 2
43950: PUSH
43951: LD_INT 1
43953: NEG
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 3
43961: PUSH
43962: LD_INT 1
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 1
43971: PUSH
43972: LD_INT 3
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: LD_INT 2
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 3
43992: NEG
43993: PUSH
43994: LD_INT 2
43996: NEG
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44027: LD_ADDR_VAR 0 30
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 1
44096: NEG
44097: PUSH
44098: LD_INT 1
44100: NEG
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: LD_INT 2
44112: NEG
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: LD_INT 2
44123: NEG
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: LD_INT 1
44134: NEG
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 2
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 2
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 2
44162: PUSH
44163: LD_INT 2
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 1
44172: PUSH
44173: LD_INT 2
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: NEG
44183: PUSH
44184: LD_INT 1
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 2
44193: NEG
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 2
44204: NEG
44205: PUSH
44206: LD_INT 1
44208: NEG
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: LD_INT 3
44220: NEG
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 1
44228: PUSH
44229: LD_INT 2
44231: NEG
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 3
44239: PUSH
44240: LD_INT 2
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 2
44249: PUSH
44250: LD_INT 3
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 2
44259: NEG
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 3
44270: NEG
44271: PUSH
44272: LD_INT 1
44274: NEG
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44305: LD_ADDR_VAR 0 31
44309: PUSH
44310: LD_INT 0
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 0
44322: PUSH
44323: LD_INT 1
44325: NEG
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 1
44333: PUSH
44334: LD_INT 0
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 1
44343: PUSH
44344: LD_INT 1
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: LD_INT 1
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 1
44363: NEG
44364: PUSH
44365: LD_INT 0
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 1
44374: NEG
44375: PUSH
44376: LD_INT 1
44378: NEG
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 1
44386: NEG
44387: PUSH
44388: LD_INT 2
44390: NEG
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 1
44398: PUSH
44399: LD_INT 1
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 2
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 2
44419: PUSH
44420: LD_INT 1
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 2
44429: PUSH
44430: LD_INT 2
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: PUSH
44440: LD_INT 2
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 0
44449: PUSH
44450: LD_INT 2
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 1
44459: NEG
44460: PUSH
44461: LD_INT 1
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 2
44470: NEG
44471: PUSH
44472: LD_INT 1
44474: NEG
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 2
44482: NEG
44483: PUSH
44484: LD_INT 2
44486: NEG
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 2
44494: NEG
44495: PUSH
44496: LD_INT 3
44498: NEG
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 2
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 3
44517: PUSH
44518: LD_INT 1
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 1
44527: PUSH
44528: LD_INT 3
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 1
44537: NEG
44538: PUSH
44539: LD_INT 2
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 3
44548: NEG
44549: PUSH
44550: LD_INT 2
44552: NEG
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44583: LD_ADDR_VAR 0 32
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: LD_INT 1
44603: NEG
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 1
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: PUSH
44622: LD_INT 1
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 0
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: NEG
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 1
44652: NEG
44653: PUSH
44654: LD_INT 1
44656: NEG
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: LD_INT 2
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 0
44676: PUSH
44677: LD_INT 2
44679: NEG
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 1
44687: PUSH
44688: LD_INT 1
44690: NEG
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 2
44698: PUSH
44699: LD_INT 1
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 2
44708: PUSH
44709: LD_INT 2
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: LD_INT 2
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 0
44728: PUSH
44729: LD_INT 2
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 1
44738: NEG
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 2
44749: NEG
44750: PUSH
44751: LD_INT 0
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 2
44760: NEG
44761: PUSH
44762: LD_INT 1
44764: NEG
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 1
44772: NEG
44773: PUSH
44774: LD_INT 3
44776: NEG
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: LD_INT 2
44787: NEG
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 3
44795: PUSH
44796: LD_INT 2
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 2
44805: PUSH
44806: LD_INT 3
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 2
44815: NEG
44816: PUSH
44817: LD_INT 1
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 3
44826: NEG
44827: PUSH
44828: LD_INT 1
44830: NEG
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44861: LD_ADDR_VAR 0 33
44865: PUSH
44866: LD_INT 0
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 1
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 0
44909: PUSH
44910: LD_INT 1
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 1
44919: NEG
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 1
44930: NEG
44931: PUSH
44932: LD_INT 1
44934: NEG
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 1
44942: NEG
44943: PUSH
44944: LD_INT 2
44946: NEG
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: LD_INT 1
44957: NEG
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 2
44965: PUSH
44966: LD_INT 0
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 2
44975: PUSH
44976: LD_INT 1
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 1
44985: PUSH
44986: LD_INT 2
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: LD_INT 2
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: PUSH
45007: LD_INT 1
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 2
45016: NEG
45017: PUSH
45018: LD_INT 0
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 2
45027: NEG
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 2
45039: NEG
45040: PUSH
45041: LD_INT 2
45043: NEG
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 2
45051: NEG
45052: PUSH
45053: LD_INT 3
45055: NEG
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 2
45063: PUSH
45064: LD_INT 1
45066: NEG
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 3
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: PUSH
45085: LD_INT 3
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 1
45094: NEG
45095: PUSH
45096: LD_INT 2
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 3
45105: NEG
45106: PUSH
45107: LD_INT 2
45109: NEG
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45140: LD_ADDR_VAR 0 34
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: LD_INT 0
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 0
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: LD_INT 0
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 0
45188: PUSH
45189: LD_INT 1
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 1
45198: NEG
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 1
45209: NEG
45210: PUSH
45211: LD_INT 1
45213: NEG
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 1
45221: NEG
45222: PUSH
45223: LD_INT 2
45225: NEG
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: LD_INT 2
45236: NEG
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 1
45244: PUSH
45245: LD_INT 1
45247: NEG
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 2
45255: PUSH
45256: LD_INT 1
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 2
45265: PUSH
45266: LD_INT 2
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: LD_INT 2
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 1
45285: NEG
45286: PUSH
45287: LD_INT 1
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 2
45296: NEG
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 2
45307: NEG
45308: PUSH
45309: LD_INT 1
45311: NEG
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 2
45319: NEG
45320: PUSH
45321: LD_INT 2
45323: NEG
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: LD_INT 3
45335: NEG
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 1
45343: PUSH
45344: LD_INT 2
45346: NEG
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 3
45354: PUSH
45355: LD_INT 2
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 2
45364: PUSH
45365: LD_INT 3
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 2
45374: NEG
45375: PUSH
45376: LD_INT 1
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 3
45385: NEG
45386: PUSH
45387: LD_INT 1
45389: NEG
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45420: LD_ADDR_VAR 0 35
45424: PUSH
45425: LD_INT 0
45427: PUSH
45428: LD_INT 0
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: LD_INT 1
45440: NEG
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: LD_INT 0
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 1
45458: PUSH
45459: LD_INT 1
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: LD_INT 1
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 1
45478: NEG
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: LD_INT 1
45493: NEG
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 2
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 2
45511: NEG
45512: PUSH
45513: LD_INT 1
45515: NEG
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45532: LD_ADDR_VAR 0 36
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: LD_INT 0
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 0
45549: PUSH
45550: LD_INT 1
45552: NEG
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 1
45560: PUSH
45561: LD_INT 0
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 1
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 1
45590: NEG
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: LD_INT 1
45605: NEG
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: LD_INT 2
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 1
45625: PUSH
45626: LD_INT 2
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45644: LD_ADDR_VAR 0 37
45648: PUSH
45649: LD_INT 0
45651: PUSH
45652: LD_INT 0
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: LD_INT 0
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 1
45682: PUSH
45683: LD_INT 1
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: LD_INT 1
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 1
45702: NEG
45703: PUSH
45704: LD_INT 0
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: LD_INT 1
45717: NEG
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 1
45725: PUSH
45726: LD_INT 1
45728: NEG
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45756: LD_ADDR_VAR 0 38
45760: PUSH
45761: LD_INT 0
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 0
45773: PUSH
45774: LD_INT 1
45776: NEG
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 1
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: LD_INT 0
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 1
45825: NEG
45826: PUSH
45827: LD_INT 1
45829: NEG
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 2
45837: PUSH
45838: LD_INT 1
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 2
45847: NEG
45848: PUSH
45849: LD_INT 1
45851: NEG
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45868: LD_ADDR_VAR 0 39
45872: PUSH
45873: LD_INT 0
45875: PUSH
45876: LD_INT 0
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 0
45885: PUSH
45886: LD_INT 1
45888: NEG
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 1
45896: PUSH
45897: LD_INT 0
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 1
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: LD_INT 1
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: NEG
45927: PUSH
45928: LD_INT 0
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 1
45937: NEG
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 1
45949: NEG
45950: PUSH
45951: LD_INT 2
45953: NEG
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: PUSH
45962: LD_INT 2
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45980: LD_ADDR_VAR 0 40
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 0
45997: PUSH
45998: LD_INT 1
46000: NEG
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: LD_INT 0
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 1
46018: PUSH
46019: LD_INT 1
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 0
46028: PUSH
46029: LD_INT 1
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 1
46038: NEG
46039: PUSH
46040: LD_INT 0
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 1
46049: NEG
46050: PUSH
46051: LD_INT 1
46053: NEG
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 1
46061: PUSH
46062: LD_INT 1
46064: NEG
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: LD_INT 1
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46092: LD_ADDR_VAR 0 41
46096: PUSH
46097: LD_INT 0
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 0
46109: PUSH
46110: LD_INT 1
46112: NEG
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 1
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: LD_INT 1
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 0
46140: PUSH
46141: LD_INT 1
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 1
46161: NEG
46162: PUSH
46163: LD_INT 1
46165: NEG
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 1
46173: NEG
46174: PUSH
46175: LD_INT 2
46177: NEG
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 2
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 2
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 2
46216: PUSH
46217: LD_INT 2
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: PUSH
46227: LD_INT 2
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 1
46236: NEG
46237: PUSH
46238: LD_INT 1
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 2
46247: NEG
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 2
46258: NEG
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 2
46270: NEG
46271: PUSH
46272: LD_INT 2
46274: NEG
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 2
46282: NEG
46283: PUSH
46284: LD_INT 3
46286: NEG
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 2
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 3
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 3
46315: PUSH
46316: LD_INT 1
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 3
46325: PUSH
46326: LD_INT 2
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 3
46335: PUSH
46336: LD_INT 3
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 2
46345: PUSH
46346: LD_INT 3
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 2
46355: NEG
46356: PUSH
46357: LD_INT 1
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 3
46366: NEG
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 3
46377: NEG
46378: PUSH
46379: LD_INT 1
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 3
46389: NEG
46390: PUSH
46391: LD_INT 2
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 3
46401: NEG
46402: PUSH
46403: LD_INT 3
46405: NEG
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46442: LD_ADDR_VAR 0 42
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 1
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: LD_INT 1
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: LD_INT 0
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: LD_INT 1
46515: NEG
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: LD_INT 2
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: LD_INT 2
46538: NEG
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 2
46557: PUSH
46558: LD_INT 1
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 2
46567: PUSH
46568: LD_INT 2
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: PUSH
46578: LD_INT 2
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: LD_INT 2
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 2
46608: NEG
46609: PUSH
46610: LD_INT 1
46612: NEG
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 2
46620: NEG
46621: PUSH
46622: LD_INT 2
46624: NEG
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 2
46632: NEG
46633: PUSH
46634: LD_INT 3
46636: NEG
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: NEG
46645: PUSH
46646: LD_INT 3
46648: NEG
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: LD_INT 3
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: LD_INT 2
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 3
46678: PUSH
46679: LD_INT 2
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 3
46688: PUSH
46689: LD_INT 3
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: LD_INT 3
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: PUSH
46709: LD_INT 3
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 0
46718: PUSH
46719: LD_INT 3
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: LD_INT 2
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 3
46739: NEG
46740: PUSH
46741: LD_INT 2
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 3
46751: NEG
46752: PUSH
46753: LD_INT 3
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46792: LD_ADDR_VAR 0 43
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: LD_INT 1
46812: NEG
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 1
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 1
46861: NEG
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: LD_INT 2
46877: NEG
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 0
46885: PUSH
46886: LD_INT 2
46888: NEG
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 1
46896: PUSH
46897: LD_INT 1
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 2
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 2
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 1
46927: PUSH
46928: LD_INT 2
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: LD_INT 2
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 1
46947: NEG
46948: PUSH
46949: LD_INT 1
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 2
46958: NEG
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 2
46969: NEG
46970: PUSH
46971: LD_INT 1
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: LD_INT 3
46985: NEG
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: LD_INT 3
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: PUSH
47005: LD_INT 2
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 2
47015: PUSH
47016: LD_INT 1
47018: NEG
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 3
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 3
47036: PUSH
47037: LD_INT 1
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 1
47046: PUSH
47047: LD_INT 3
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: LD_INT 3
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 1
47066: NEG
47067: PUSH
47068: LD_INT 2
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 2
47077: NEG
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 3
47088: NEG
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 3
47099: NEG
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47140: LD_ADDR_VAR 0 44
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: LD_INT 1
47160: NEG
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 1
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 1
47198: NEG
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 1
47209: NEG
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: NEG
47222: PUSH
47223: LD_INT 2
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 2
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 2
47254: PUSH
47255: LD_INT 1
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 2
47264: PUSH
47265: LD_INT 2
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 1
47274: PUSH
47275: LD_INT 2
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: LD_INT 1
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 2
47295: NEG
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 2
47306: NEG
47307: PUSH
47308: LD_INT 1
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 2
47318: NEG
47319: PUSH
47320: LD_INT 2
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 2
47330: NEG
47331: PUSH
47332: LD_INT 3
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 2
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 3
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 3
47363: PUSH
47364: LD_INT 1
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 3
47373: PUSH
47374: LD_INT 2
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 3
47383: PUSH
47384: LD_INT 3
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 2
47393: PUSH
47394: LD_INT 3
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 2
47403: NEG
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 3
47414: NEG
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 3
47425: NEG
47426: PUSH
47427: LD_INT 1
47429: NEG
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 3
47437: NEG
47438: PUSH
47439: LD_INT 2
47441: NEG
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 3
47449: NEG
47450: PUSH
47451: LD_INT 3
47453: NEG
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47490: LD_ADDR_VAR 0 45
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 0
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 1
47559: NEG
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: LD_INT 2
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: LD_INT 2
47586: NEG
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 1
47594: PUSH
47595: LD_INT 1
47597: NEG
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 2
47605: PUSH
47606: LD_INT 1
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 2
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 1
47625: PUSH
47626: LD_INT 2
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: LD_INT 2
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 1
47645: NEG
47646: PUSH
47647: LD_INT 1
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 2
47656: NEG
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 2
47668: NEG
47669: PUSH
47670: LD_INT 2
47672: NEG
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 2
47680: NEG
47681: PUSH
47682: LD_INT 3
47684: NEG
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 1
47692: NEG
47693: PUSH
47694: LD_INT 3
47696: NEG
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: LD_INT 3
47707: NEG
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 1
47715: PUSH
47716: LD_INT 2
47718: NEG
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 3
47726: PUSH
47727: LD_INT 2
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 3
47736: PUSH
47737: LD_INT 3
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 2
47746: PUSH
47747: LD_INT 3
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: LD_INT 3
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: LD_INT 3
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: LD_INT 2
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 3
47787: NEG
47788: PUSH
47789: LD_INT 2
47791: NEG
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 3
47799: NEG
47800: PUSH
47801: LD_INT 3
47803: NEG
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47840: LD_ADDR_VAR 0 46
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: LD_INT 0
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 0
47857: PUSH
47858: LD_INT 1
47860: NEG
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 1
47868: PUSH
47869: LD_INT 0
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: LD_INT 1
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 0
47888: PUSH
47889: LD_INT 1
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: LD_INT 1
47913: NEG
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: LD_INT 2
47925: NEG
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 0
47933: PUSH
47934: LD_INT 2
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 1
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 2
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 2
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 1
47975: PUSH
47976: LD_INT 2
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 0
47985: PUSH
47986: LD_INT 2
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 1
47995: NEG
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 2
48006: NEG
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 2
48017: NEG
48018: PUSH
48019: LD_INT 1
48021: NEG
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 1
48029: NEG
48030: PUSH
48031: LD_INT 3
48033: NEG
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: LD_INT 3
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: LD_INT 2
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 2
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 3
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 3
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: LD_INT 3
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: LD_INT 3
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: NEG
48115: PUSH
48116: LD_INT 2
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 2
48125: NEG
48126: PUSH
48127: LD_INT 1
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 3
48136: NEG
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 3
48147: NEG
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48188: LD_ADDR_VAR 0 47
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: LD_INT 0
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: LD_INT 1
48208: NEG
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 1
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 1
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 0
48236: PUSH
48237: LD_INT 1
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 1
48246: NEG
48247: PUSH
48248: LD_INT 0
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 1
48257: NEG
48258: PUSH
48259: LD_INT 1
48261: NEG
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 1
48269: NEG
48270: PUSH
48271: LD_INT 2
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 0
48281: PUSH
48282: LD_INT 2
48284: NEG
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: LD_INT 1
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 2
48303: NEG
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 2
48315: NEG
48316: PUSH
48317: LD_INT 2
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48339: LD_ADDR_VAR 0 48
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: LD_INT 1
48359: NEG
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 1
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 1
48377: PUSH
48378: LD_INT 1
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: LD_INT 1
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 1
48397: NEG
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 1
48408: NEG
48409: PUSH
48410: LD_INT 1
48412: NEG
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 1
48420: NEG
48421: PUSH
48422: LD_INT 2
48424: NEG
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: LD_INT 2
48435: NEG
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 1
48443: PUSH
48444: LD_INT 1
48446: NEG
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 2
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 2
48464: PUSH
48465: LD_INT 1
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48486: LD_ADDR_VAR 0 49
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: LD_INT 1
48506: NEG
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 1
48524: PUSH
48525: LD_INT 1
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 0
48534: PUSH
48535: LD_INT 1
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: LD_INT 0
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 1
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 2
48578: PUSH
48579: LD_INT 0
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 2
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 2
48598: PUSH
48599: LD_INT 2
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: LD_INT 2
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48630: LD_ADDR_VAR 0 50
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: LD_INT 1
48650: NEG
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 1
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 1
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: LD_INT 1
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 1
48699: NEG
48700: PUSH
48701: LD_INT 1
48703: NEG
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 2
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 2
48721: PUSH
48722: LD_INT 2
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: LD_INT 2
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 0
48741: PUSH
48742: LD_INT 2
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48774: LD_ADDR_VAR 0 51
48778: PUSH
48779: LD_INT 0
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 1
48802: PUSH
48803: LD_INT 0
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: NEG
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: PUSH
48856: LD_INT 2
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 0
48865: PUSH
48866: LD_INT 2
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 1
48875: NEG
48876: PUSH
48877: LD_INT 1
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 2
48886: NEG
48887: PUSH
48888: LD_INT 0
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 2
48897: NEG
48898: PUSH
48899: LD_INT 1
48901: NEG
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48921: LD_ADDR_VAR 0 52
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 1
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 1
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: LD_INT 0
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: NEG
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: LD_INT 2
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 1
49014: NEG
49015: PUSH
49016: LD_INT 1
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 2
49025: NEG
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 2
49036: NEG
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 2
49048: NEG
49049: PUSH
49050: LD_INT 2
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49072: LD_ADDR_VAR 0 53
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 1
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: LD_INT 1
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 0
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: NEG
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 1
49153: NEG
49154: PUSH
49155: LD_INT 2
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: LD_INT 2
49168: NEG
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 1
49176: PUSH
49177: LD_INT 1
49179: NEG
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 2
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 2
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 2
49207: PUSH
49208: LD_INT 2
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: LD_INT 2
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: LD_INT 2
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: LD_INT 1
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 2
49248: NEG
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 2
49259: NEG
49260: PUSH
49261: LD_INT 1
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 2
49271: NEG
49272: PUSH
49273: LD_INT 2
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49302: LD_ADDR_VAR 0 54
49306: PUSH
49307: LD_INT 0
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 1
49340: PUSH
49341: LD_INT 1
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 0
49350: PUSH
49351: LD_INT 1
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: LD_INT 0
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 1
49371: NEG
49372: PUSH
49373: LD_INT 1
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 1
49383: NEG
49384: PUSH
49385: LD_INT 2
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 0
49395: PUSH
49396: LD_INT 2
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: PUSH
49407: LD_INT 1
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 2
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 2
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 2
49437: PUSH
49438: LD_INT 2
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 1
49447: PUSH
49448: LD_INT 2
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 0
49457: PUSH
49458: LD_INT 2
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 1
49467: NEG
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 2
49478: NEG
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 2
49489: NEG
49490: PUSH
49491: LD_INT 1
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 2
49501: NEG
49502: PUSH
49503: LD_INT 2
49505: NEG
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49532: LD_ADDR_VAR 0 55
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 0
49549: PUSH
49550: LD_INT 1
49552: NEG
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 1
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 1
49570: PUSH
49571: LD_INT 1
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 0
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 1
49590: NEG
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: NEG
49602: PUSH
49603: LD_INT 1
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: LD_INT 2
49617: NEG
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: LD_INT 2
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 1
49636: PUSH
49637: LD_INT 1
49639: NEG
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 2
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 2
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 2
49667: PUSH
49668: LD_INT 2
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 1
49677: PUSH
49678: LD_INT 2
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 0
49687: PUSH
49688: LD_INT 2
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: LD_INT 1
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 2
49708: NEG
49709: PUSH
49710: LD_INT 0
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 2
49719: NEG
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 2
49731: NEG
49732: PUSH
49733: LD_INT 2
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49762: LD_ADDR_VAR 0 56
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: LD_INT 1
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 1
49831: NEG
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: LD_INT 2
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: LD_INT 2
49858: NEG
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 1
49866: PUSH
49867: LD_INT 1
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 2
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 2
49887: PUSH
49888: LD_INT 1
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 2
49897: PUSH
49898: LD_INT 2
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 1
49907: PUSH
49908: LD_INT 2
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: LD_INT 2
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: NEG
49928: PUSH
49929: LD_INT 1
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 2
49938: NEG
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 2
49949: NEG
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 2
49961: NEG
49962: PUSH
49963: LD_INT 2
49965: NEG
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49992: LD_ADDR_VAR 0 57
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 0
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 1
50030: PUSH
50031: LD_INT 1
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 0
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 1
50050: NEG
50051: PUSH
50052: LD_INT 0
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: NEG
50062: PUSH
50063: LD_INT 1
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: LD_INT 2
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: LD_INT 2
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 1
50096: PUSH
50097: LD_INT 1
50099: NEG
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 2
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 2
50117: PUSH
50118: LD_INT 1
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 2
50127: PUSH
50128: LD_INT 2
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 1
50137: PUSH
50138: LD_INT 2
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: LD_INT 2
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 1
50157: NEG
50158: PUSH
50159: LD_INT 1
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 2
50168: NEG
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 2
50179: NEG
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 2
50191: NEG
50192: PUSH
50193: LD_INT 2
50195: NEG
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50222: LD_ADDR_VAR 0 58
50226: PUSH
50227: LD_INT 0
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 0
50239: PUSH
50240: LD_INT 1
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 1
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: LD_INT 1
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: NEG
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 1
50303: NEG
50304: PUSH
50305: LD_INT 2
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 0
50315: PUSH
50316: LD_INT 2
50318: NEG
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 2
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 2
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 2
50357: PUSH
50358: LD_INT 2
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: LD_INT 2
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: LD_INT 2
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: LD_INT 1
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 2
50398: NEG
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 2
50409: NEG
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 2
50421: NEG
50422: PUSH
50423: LD_INT 2
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50452: LD_ADDR_VAR 0 59
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: LD_INT 1
50472: NEG
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 1
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: LD_INT 1
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 0
50500: PUSH
50501: LD_INT 1
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 1
50510: NEG
50511: PUSH
50512: LD_INT 0
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 1
50521: NEG
50522: PUSH
50523: LD_INT 1
50525: NEG
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50540: LD_ADDR_VAR 0 60
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: LD_INT 0
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: NEG
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 1
50609: NEG
50610: PUSH
50611: LD_INT 1
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50628: LD_ADDR_VAR 0 61
50632: PUSH
50633: LD_INT 0
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 1
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 1
50666: PUSH
50667: LD_INT 1
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 1
50686: NEG
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50716: LD_ADDR_VAR 0 62
50720: PUSH
50721: LD_INT 0
50723: PUSH
50724: LD_INT 0
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: LD_INT 1
50736: NEG
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 1
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 1
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 0
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 1
50774: NEG
50775: PUSH
50776: LD_INT 0
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: NEG
50786: PUSH
50787: LD_INT 1
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50804: LD_ADDR_VAR 0 63
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 1
50832: PUSH
50833: LD_INT 0
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: NEG
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 1
50873: NEG
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50892: LD_ADDR_VAR 0 64
50896: PUSH
50897: LD_INT 0
50899: PUSH
50900: LD_INT 0
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 0
50909: PUSH
50910: LD_INT 1
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 1
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 1
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 0
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 1
50950: NEG
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 1
50961: NEG
50962: PUSH
50963: LD_INT 1
50965: NEG
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: ST_TO_ADDR
// end ; 1 :
50980: GO 56877
50982: LD_INT 1
50984: DOUBLE
50985: EQUAL
50986: IFTRUE 50990
50988: GO 53613
50990: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50991: LD_ADDR_VAR 0 11
50995: PUSH
50996: LD_INT 1
50998: NEG
50999: PUSH
51000: LD_INT 3
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: LD_INT 3
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: LD_INT 2
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: LIST
51034: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51035: LD_ADDR_VAR 0 12
51039: PUSH
51040: LD_INT 2
51042: PUSH
51043: LD_INT 1
51045: NEG
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 3
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 3
51063: PUSH
51064: LD_INT 1
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: LIST
51075: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51076: LD_ADDR_VAR 0 13
51080: PUSH
51081: LD_INT 3
51083: PUSH
51084: LD_INT 2
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 3
51093: PUSH
51094: LD_INT 3
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 2
51103: PUSH
51104: LD_INT 3
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: LIST
51115: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51116: LD_ADDR_VAR 0 14
51120: PUSH
51121: LD_INT 1
51123: PUSH
51124: LD_INT 3
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: LD_INT 3
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 1
51143: NEG
51144: PUSH
51145: LD_INT 2
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: LIST
51156: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51157: LD_ADDR_VAR 0 15
51161: PUSH
51162: LD_INT 2
51164: NEG
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 3
51175: NEG
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 3
51186: NEG
51187: PUSH
51188: LD_INT 1
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: LIST
51200: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51201: LD_ADDR_VAR 0 16
51205: PUSH
51206: LD_INT 2
51208: NEG
51209: PUSH
51210: LD_INT 3
51212: NEG
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 3
51220: NEG
51221: PUSH
51222: LD_INT 2
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 3
51232: NEG
51233: PUSH
51234: LD_INT 3
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: LIST
51246: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51247: LD_ADDR_VAR 0 17
51251: PUSH
51252: LD_INT 1
51254: NEG
51255: PUSH
51256: LD_INT 3
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 0
51266: PUSH
51267: LD_INT 3
51269: NEG
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 1
51277: PUSH
51278: LD_INT 2
51280: NEG
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: LIST
51290: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51291: LD_ADDR_VAR 0 18
51295: PUSH
51296: LD_INT 2
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 3
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 3
51319: PUSH
51320: LD_INT 1
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: LIST
51331: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51332: LD_ADDR_VAR 0 19
51336: PUSH
51337: LD_INT 3
51339: PUSH
51340: LD_INT 2
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 3
51349: PUSH
51350: LD_INT 3
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 2
51359: PUSH
51360: LD_INT 3
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: LIST
51371: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51372: LD_ADDR_VAR 0 20
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: LD_INT 3
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: LD_INT 3
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 1
51399: NEG
51400: PUSH
51401: LD_INT 2
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: LIST
51412: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51413: LD_ADDR_VAR 0 21
51417: PUSH
51418: LD_INT 2
51420: NEG
51421: PUSH
51422: LD_INT 1
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 3
51431: NEG
51432: PUSH
51433: LD_INT 0
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 3
51442: NEG
51443: PUSH
51444: LD_INT 1
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: LIST
51456: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51457: LD_ADDR_VAR 0 22
51461: PUSH
51462: LD_INT 2
51464: NEG
51465: PUSH
51466: LD_INT 3
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 3
51476: NEG
51477: PUSH
51478: LD_INT 2
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 3
51488: NEG
51489: PUSH
51490: LD_INT 3
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: LIST
51502: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51503: LD_ADDR_VAR 0 23
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: LD_INT 3
51513: NEG
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 1
51521: NEG
51522: PUSH
51523: LD_INT 4
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: LD_INT 3
51536: NEG
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: LIST
51546: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51547: LD_ADDR_VAR 0 24
51551: PUSH
51552: LD_INT 3
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 3
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 4
51575: PUSH
51576: LD_INT 1
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: LIST
51587: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51588: LD_ADDR_VAR 0 25
51592: PUSH
51593: LD_INT 3
51595: PUSH
51596: LD_INT 3
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 4
51605: PUSH
51606: LD_INT 3
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 3
51615: PUSH
51616: LD_INT 4
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: LIST
51627: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51628: LD_ADDR_VAR 0 26
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: LD_INT 3
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: LD_INT 4
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: LD_INT 3
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: LIST
51668: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51669: LD_ADDR_VAR 0 27
51673: PUSH
51674: LD_INT 3
51676: NEG
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 3
51687: NEG
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 4
51698: NEG
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: LIST
51712: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51713: LD_ADDR_VAR 0 28
51717: PUSH
51718: LD_INT 3
51720: NEG
51721: PUSH
51722: LD_INT 3
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 3
51732: NEG
51733: PUSH
51734: LD_INT 4
51736: NEG
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 4
51744: NEG
51745: PUSH
51746: LD_INT 3
51748: NEG
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: LIST
51758: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51759: LD_ADDR_VAR 0 29
51763: PUSH
51764: LD_INT 1
51766: NEG
51767: PUSH
51768: LD_INT 3
51770: NEG
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 0
51778: PUSH
51779: LD_INT 3
51781: NEG
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: PUSH
51790: LD_INT 2
51792: NEG
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 1
51800: NEG
51801: PUSH
51802: LD_INT 4
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 0
51812: PUSH
51813: LD_INT 4
51815: NEG
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: PUSH
51824: LD_INT 3
51826: NEG
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: LD_INT 5
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: LD_INT 5
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 1
51857: PUSH
51858: LD_INT 4
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: LD_INT 6
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: LD_INT 6
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: LD_INT 5
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51914: LD_ADDR_VAR 0 30
51918: PUSH
51919: LD_INT 2
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 3
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 3
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 3
51952: PUSH
51953: LD_INT 1
51955: NEG
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 4
51963: PUSH
51964: LD_INT 0
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 4
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 4
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 5
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 5
52004: PUSH
52005: LD_INT 1
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 5
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 6
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 6
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52057: LD_ADDR_VAR 0 31
52061: PUSH
52062: LD_INT 3
52064: PUSH
52065: LD_INT 2
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 3
52074: PUSH
52075: LD_INT 3
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 2
52084: PUSH
52085: LD_INT 3
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 4
52094: PUSH
52095: LD_INT 3
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 4
52104: PUSH
52105: LD_INT 4
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 3
52114: PUSH
52115: LD_INT 4
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 5
52124: PUSH
52125: LD_INT 4
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 5
52134: PUSH
52135: LD_INT 5
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 4
52144: PUSH
52145: LD_INT 5
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 6
52154: PUSH
52155: LD_INT 5
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 6
52164: PUSH
52165: LD_INT 6
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 5
52174: PUSH
52175: LD_INT 6
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52196: LD_ADDR_VAR 0 32
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: LD_INT 3
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 0
52213: PUSH
52214: LD_INT 3
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 1
52223: NEG
52224: PUSH
52225: LD_INT 2
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: PUSH
52235: LD_INT 4
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: LD_INT 4
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: LD_INT 3
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: LD_INT 5
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: LD_INT 5
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: LD_INT 4
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 1
52296: PUSH
52297: LD_INT 6
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: LD_INT 6
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 1
52316: NEG
52317: PUSH
52318: LD_INT 5
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52339: LD_ADDR_VAR 0 33
52343: PUSH
52344: LD_INT 2
52346: NEG
52347: PUSH
52348: LD_INT 1
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 3
52357: NEG
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 3
52368: NEG
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 3
52380: NEG
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 4
52391: NEG
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 4
52402: NEG
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 4
52414: NEG
52415: PUSH
52416: LD_INT 1
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 5
52425: NEG
52426: PUSH
52427: LD_INT 0
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 5
52436: NEG
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 5
52448: NEG
52449: PUSH
52450: LD_INT 1
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 6
52459: NEG
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 6
52470: NEG
52471: PUSH
52472: LD_INT 1
52474: NEG
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52494: LD_ADDR_VAR 0 34
52498: PUSH
52499: LD_INT 2
52501: NEG
52502: PUSH
52503: LD_INT 3
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 3
52513: NEG
52514: PUSH
52515: LD_INT 2
52517: NEG
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 3
52525: NEG
52526: PUSH
52527: LD_INT 3
52529: NEG
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 3
52537: NEG
52538: PUSH
52539: LD_INT 4
52541: NEG
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 4
52549: NEG
52550: PUSH
52551: LD_INT 3
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 4
52561: NEG
52562: PUSH
52563: LD_INT 4
52565: NEG
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 4
52573: NEG
52574: PUSH
52575: LD_INT 5
52577: NEG
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 5
52585: NEG
52586: PUSH
52587: LD_INT 4
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 5
52597: NEG
52598: PUSH
52599: LD_INT 5
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 5
52609: NEG
52610: PUSH
52611: LD_INT 6
52613: NEG
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 6
52621: NEG
52622: PUSH
52623: LD_INT 5
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 6
52633: NEG
52634: PUSH
52635: LD_INT 6
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52657: LD_ADDR_VAR 0 41
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: LD_INT 2
52667: NEG
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: NEG
52676: PUSH
52677: LD_INT 3
52679: NEG
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 1
52687: PUSH
52688: LD_INT 2
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: LIST
52700: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52701: LD_ADDR_VAR 0 42
52705: PUSH
52706: LD_INT 2
52708: PUSH
52709: LD_INT 0
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 2
52718: PUSH
52719: LD_INT 1
52721: NEG
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 3
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: LIST
52741: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52742: LD_ADDR_VAR 0 43
52746: PUSH
52747: LD_INT 2
52749: PUSH
52750: LD_INT 2
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 3
52759: PUSH
52760: LD_INT 2
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 2
52769: PUSH
52770: LD_INT 3
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: LIST
52781: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52782: LD_ADDR_VAR 0 44
52786: PUSH
52787: LD_INT 0
52789: PUSH
52790: LD_INT 2
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 1
52799: PUSH
52800: LD_INT 3
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 1
52809: NEG
52810: PUSH
52811: LD_INT 2
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: LIST
52822: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52823: LD_ADDR_VAR 0 45
52827: PUSH
52828: LD_INT 2
52830: NEG
52831: PUSH
52832: LD_INT 0
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 2
52841: NEG
52842: PUSH
52843: LD_INT 1
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 3
52852: NEG
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: LIST
52866: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52867: LD_ADDR_VAR 0 46
52871: PUSH
52872: LD_INT 2
52874: NEG
52875: PUSH
52876: LD_INT 2
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 2
52886: NEG
52887: PUSH
52888: LD_INT 3
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 3
52898: NEG
52899: PUSH
52900: LD_INT 2
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: LIST
52912: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52913: LD_ADDR_VAR 0 47
52917: PUSH
52918: LD_INT 2
52920: NEG
52921: PUSH
52922: LD_INT 3
52924: NEG
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 1
52932: NEG
52933: PUSH
52934: LD_INT 3
52936: NEG
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52946: LD_ADDR_VAR 0 48
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: LD_INT 2
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 2
52964: PUSH
52965: LD_INT 1
52967: NEG
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52977: LD_ADDR_VAR 0 49
52981: PUSH
52982: LD_INT 3
52984: PUSH
52985: LD_INT 1
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 3
52994: PUSH
52995: LD_INT 2
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53006: LD_ADDR_VAR 0 50
53010: PUSH
53011: LD_INT 2
53013: PUSH
53014: LD_INT 3
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 1
53023: PUSH
53024: LD_INT 3
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53035: LD_ADDR_VAR 0 51
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: LD_INT 2
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 2
53053: NEG
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53066: LD_ADDR_VAR 0 52
53070: PUSH
53071: LD_INT 3
53073: NEG
53074: PUSH
53075: LD_INT 1
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 3
53085: NEG
53086: PUSH
53087: LD_INT 2
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53099: LD_ADDR_VAR 0 53
53103: PUSH
53104: LD_INT 1
53106: NEG
53107: PUSH
53108: LD_INT 3
53110: NEG
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 0
53118: PUSH
53119: LD_INT 3
53121: NEG
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 1
53129: PUSH
53130: LD_INT 2
53132: NEG
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: LIST
53142: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53143: LD_ADDR_VAR 0 54
53147: PUSH
53148: LD_INT 2
53150: PUSH
53151: LD_INT 1
53153: NEG
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 3
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 3
53171: PUSH
53172: LD_INT 1
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: LIST
53183: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53184: LD_ADDR_VAR 0 55
53188: PUSH
53189: LD_INT 3
53191: PUSH
53192: LD_INT 2
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 3
53201: PUSH
53202: LD_INT 3
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 2
53211: PUSH
53212: LD_INT 3
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: LIST
53223: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53224: LD_ADDR_VAR 0 56
53228: PUSH
53229: LD_INT 1
53231: PUSH
53232: LD_INT 3
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: LD_INT 3
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 1
53251: NEG
53252: PUSH
53253: LD_INT 2
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: LIST
53264: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53265: LD_ADDR_VAR 0 57
53269: PUSH
53270: LD_INT 2
53272: NEG
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 3
53283: NEG
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: EMPTY
53289: LIST
53290: LIST
53291: PUSH
53292: LD_INT 3
53294: NEG
53295: PUSH
53296: LD_INT 1
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: LIST
53308: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53309: LD_ADDR_VAR 0 58
53313: PUSH
53314: LD_INT 2
53316: NEG
53317: PUSH
53318: LD_INT 3
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 3
53328: NEG
53329: PUSH
53330: LD_INT 2
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 3
53340: NEG
53341: PUSH
53342: LD_INT 3
53344: NEG
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: LIST
53354: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53355: LD_ADDR_VAR 0 59
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: LD_INT 2
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: LD_INT 2
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: LIST
53398: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53399: LD_ADDR_VAR 0 60
53403: PUSH
53404: LD_INT 1
53406: PUSH
53407: LD_INT 1
53409: NEG
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 2
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 2
53427: PUSH
53428: LD_INT 1
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: LIST
53439: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53440: LD_ADDR_VAR 0 61
53444: PUSH
53445: LD_INT 2
53447: PUSH
53448: LD_INT 1
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 2
53457: PUSH
53458: LD_INT 2
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 1
53467: PUSH
53468: LD_INT 2
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: LIST
53479: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53480: LD_ADDR_VAR 0 62
53484: PUSH
53485: LD_INT 1
53487: PUSH
53488: LD_INT 2
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: LD_INT 2
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 1
53507: NEG
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: LIST
53520: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53521: LD_ADDR_VAR 0 63
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: LD_INT 1
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 2
53539: NEG
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 2
53550: NEG
53551: PUSH
53552: LD_INT 1
53554: NEG
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: LIST
53564: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53565: LD_ADDR_VAR 0 64
53569: PUSH
53570: LD_INT 1
53572: NEG
53573: PUSH
53574: LD_INT 2
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 2
53584: NEG
53585: PUSH
53586: LD_INT 1
53588: NEG
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 2
53596: NEG
53597: PUSH
53598: LD_INT 2
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: LIST
53610: ST_TO_ADDR
// end ; 2 :
53611: GO 56877
53613: LD_INT 2
53615: DOUBLE
53616: EQUAL
53617: IFTRUE 53621
53619: GO 56876
53621: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53622: LD_ADDR_VAR 0 29
53626: PUSH
53627: LD_INT 4
53629: PUSH
53630: LD_INT 0
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 4
53639: PUSH
53640: LD_INT 1
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 5
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 5
53660: PUSH
53661: LD_INT 1
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 4
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 3
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 3
53690: PUSH
53691: LD_INT 1
53693: NEG
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 3
53701: PUSH
53702: LD_INT 2
53704: NEG
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 5
53712: PUSH
53713: LD_INT 2
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 3
53722: PUSH
53723: LD_INT 3
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 3
53732: PUSH
53733: LD_INT 2
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 4
53742: PUSH
53743: LD_INT 3
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 4
53752: PUSH
53753: LD_INT 4
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 3
53762: PUSH
53763: LD_INT 4
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 2
53772: PUSH
53773: LD_INT 3
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 2
53782: PUSH
53783: LD_INT 2
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 4
53792: PUSH
53793: LD_INT 2
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 2
53802: PUSH
53803: LD_INT 4
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: LD_INT 4
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: LD_INT 3
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: LD_INT 4
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 1
53842: PUSH
53843: LD_INT 5
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 0
53852: PUSH
53853: LD_INT 5
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: LD_INT 4
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: LD_INT 3
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 2
53884: PUSH
53885: LD_INT 5
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 2
53894: NEG
53895: PUSH
53896: LD_INT 3
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 3
53905: NEG
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 3
53916: NEG
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 2
53928: NEG
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 2
53939: NEG
53940: PUSH
53941: LD_INT 1
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 3
53950: NEG
53951: PUSH
53952: LD_INT 1
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 4
53961: NEG
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 4
53972: NEG
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 4
53984: NEG
53985: PUSH
53986: LD_INT 2
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 2
53996: NEG
53997: PUSH
53998: LD_INT 2
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 4
54007: NEG
54008: PUSH
54009: LD_INT 4
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 4
54019: NEG
54020: PUSH
54021: LD_INT 5
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 3
54031: NEG
54032: PUSH
54033: LD_INT 4
54035: NEG
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 3
54043: NEG
54044: PUSH
54045: LD_INT 3
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 4
54055: NEG
54056: PUSH
54057: LD_INT 3
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 5
54067: NEG
54068: PUSH
54069: LD_INT 4
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 5
54079: NEG
54080: PUSH
54081: LD_INT 5
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 3
54091: NEG
54092: PUSH
54093: LD_INT 5
54095: NEG
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 5
54103: NEG
54104: PUSH
54105: LD_INT 3
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54160: LD_ADDR_VAR 0 30
54164: PUSH
54165: LD_INT 4
54167: PUSH
54168: LD_INT 4
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 4
54177: PUSH
54178: LD_INT 3
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 5
54187: PUSH
54188: LD_INT 4
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 5
54197: PUSH
54198: LD_INT 5
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 4
54207: PUSH
54208: LD_INT 5
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 3
54217: PUSH
54218: LD_INT 4
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 3
54227: PUSH
54228: LD_INT 3
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 5
54237: PUSH
54238: LD_INT 3
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 3
54247: PUSH
54248: LD_INT 5
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: LD_INT 3
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: LD_INT 3
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: PUSH
54288: LD_INT 4
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: LD_INT 4
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: LD_INT 3
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: LD_INT 2
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 2
54329: PUSH
54330: LD_INT 4
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 2
54339: NEG
54340: PUSH
54341: LD_INT 2
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 4
54350: NEG
54351: PUSH
54352: LD_INT 0
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 4
54361: NEG
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 3
54373: NEG
54374: PUSH
54375: LD_INT 0
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 3
54384: NEG
54385: PUSH
54386: LD_INT 1
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 4
54395: NEG
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 5
54406: NEG
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 5
54417: NEG
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 5
54429: NEG
54430: PUSH
54431: LD_INT 2
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 3
54441: NEG
54442: PUSH
54443: LD_INT 2
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 3
54452: NEG
54453: PUSH
54454: LD_INT 3
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 3
54464: NEG
54465: PUSH
54466: LD_INT 4
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 2
54476: NEG
54477: PUSH
54478: LD_INT 3
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 2
54488: NEG
54489: PUSH
54490: LD_INT 2
54492: NEG
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 3
54500: NEG
54501: PUSH
54502: LD_INT 2
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 4
54512: NEG
54513: PUSH
54514: LD_INT 3
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 4
54524: NEG
54525: PUSH
54526: LD_INT 4
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 2
54536: NEG
54537: PUSH
54538: LD_INT 4
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 4
54548: NEG
54549: PUSH
54550: LD_INT 2
54552: NEG
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 0
54560: PUSH
54561: LD_INT 4
54563: NEG
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: LD_INT 5
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 1
54582: PUSH
54583: LD_INT 4
54585: NEG
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: LD_INT 3
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: LD_INT 3
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: NEG
54616: PUSH
54617: LD_INT 4
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: LD_INT 5
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 2
54639: PUSH
54640: LD_INT 3
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 2
54650: NEG
54651: PUSH
54652: LD_INT 5
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54707: LD_ADDR_VAR 0 31
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: LD_INT 4
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: LD_INT 3
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 1
54734: PUSH
54735: LD_INT 4
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: LD_INT 5
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: LD_INT 5
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: LD_INT 4
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 1
54775: NEG
54776: PUSH
54777: LD_INT 3
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 2
54786: PUSH
54787: LD_INT 5
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 2
54796: NEG
54797: PUSH
54798: LD_INT 3
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 3
54807: NEG
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 3
54818: NEG
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 2
54830: NEG
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 2
54841: NEG
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 3
54852: NEG
54853: PUSH
54854: LD_INT 1
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 4
54863: NEG
54864: PUSH
54865: LD_INT 0
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 4
54874: NEG
54875: PUSH
54876: LD_INT 1
54878: NEG
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 4
54886: NEG
54887: PUSH
54888: LD_INT 2
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 2
54898: NEG
54899: PUSH
54900: LD_INT 2
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 4
54909: NEG
54910: PUSH
54911: LD_INT 4
54913: NEG
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 4
54921: NEG
54922: PUSH
54923: LD_INT 5
54925: NEG
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 3
54933: NEG
54934: PUSH
54935: LD_INT 4
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 3
54945: NEG
54946: PUSH
54947: LD_INT 3
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 4
54957: NEG
54958: PUSH
54959: LD_INT 3
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 5
54969: NEG
54970: PUSH
54971: LD_INT 4
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 5
54981: NEG
54982: PUSH
54983: LD_INT 5
54985: NEG
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 3
54993: NEG
54994: PUSH
54995: LD_INT 5
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 5
55005: NEG
55006: PUSH
55007: LD_INT 3
55009: NEG
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 0
55017: PUSH
55018: LD_INT 3
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: LD_INT 4
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: LD_INT 3
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 1
55050: PUSH
55051: LD_INT 2
55053: NEG
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 0
55061: PUSH
55062: LD_INT 2
55064: NEG
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 1
55072: NEG
55073: PUSH
55074: LD_INT 3
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: LD_INT 4
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 2
55096: PUSH
55097: LD_INT 2
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 2
55107: NEG
55108: PUSH
55109: LD_INT 4
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 4
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 4
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 5
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 5
55150: PUSH
55151: LD_INT 1
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 4
55160: PUSH
55161: LD_INT 1
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 3
55170: PUSH
55171: LD_INT 0
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 3
55180: PUSH
55181: LD_INT 1
55183: NEG
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 3
55191: PUSH
55192: LD_INT 2
55194: NEG
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 5
55202: PUSH
55203: LD_INT 2
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55257: LD_ADDR_VAR 0 32
55261: PUSH
55262: LD_INT 4
55264: NEG
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 4
55275: NEG
55276: PUSH
55277: LD_INT 1
55279: NEG
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 3
55287: NEG
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 3
55298: NEG
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 4
55309: NEG
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 5
55320: NEG
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 5
55331: NEG
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 5
55343: NEG
55344: PUSH
55345: LD_INT 2
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 3
55355: NEG
55356: PUSH
55357: LD_INT 2
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 3
55366: NEG
55367: PUSH
55368: LD_INT 3
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 3
55378: NEG
55379: PUSH
55380: LD_INT 4
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 2
55390: NEG
55391: PUSH
55392: LD_INT 3
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 2
55402: NEG
55403: PUSH
55404: LD_INT 2
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 3
55414: NEG
55415: PUSH
55416: LD_INT 2
55418: NEG
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 4
55426: NEG
55427: PUSH
55428: LD_INT 3
55430: NEG
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 4
55438: NEG
55439: PUSH
55440: LD_INT 4
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 2
55450: NEG
55451: PUSH
55452: LD_INT 4
55454: NEG
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 4
55462: NEG
55463: PUSH
55464: LD_INT 2
55466: NEG
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 0
55474: PUSH
55475: LD_INT 4
55477: NEG
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: LD_INT 5
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: LD_INT 4
55499: NEG
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: LD_INT 3
55510: NEG
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 0
55518: PUSH
55519: LD_INT 3
55521: NEG
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: NEG
55530: PUSH
55531: LD_INT 4
55533: NEG
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 1
55541: NEG
55542: PUSH
55543: LD_INT 5
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 2
55553: PUSH
55554: LD_INT 3
55556: NEG
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 2
55564: NEG
55565: PUSH
55566: LD_INT 5
55568: NEG
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 3
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 3
55586: PUSH
55587: LD_INT 1
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 4
55597: PUSH
55598: LD_INT 0
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 4
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 3
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 2
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 2
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 2
55648: PUSH
55649: LD_INT 2
55651: NEG
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 4
55659: PUSH
55660: LD_INT 2
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 4
55669: PUSH
55670: LD_INT 4
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 4
55679: PUSH
55680: LD_INT 3
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 5
55689: PUSH
55690: LD_INT 4
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 5
55699: PUSH
55700: LD_INT 5
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 4
55709: PUSH
55710: LD_INT 5
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 3
55719: PUSH
55720: LD_INT 4
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 3
55729: PUSH
55730: LD_INT 3
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 5
55739: PUSH
55740: LD_INT 3
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 3
55749: PUSH
55750: LD_INT 5
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55804: LD_ADDR_VAR 0 33
55808: PUSH
55809: LD_INT 4
55811: NEG
55812: PUSH
55813: LD_INT 4
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 4
55823: NEG
55824: PUSH
55825: LD_INT 5
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 3
55835: NEG
55836: PUSH
55837: LD_INT 4
55839: NEG
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 3
55847: NEG
55848: PUSH
55849: LD_INT 3
55851: NEG
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 4
55859: NEG
55860: PUSH
55861: LD_INT 3
55863: NEG
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 5
55871: NEG
55872: PUSH
55873: LD_INT 4
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 5
55883: NEG
55884: PUSH
55885: LD_INT 5
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 3
55895: NEG
55896: PUSH
55897: LD_INT 5
55899: NEG
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 5
55907: NEG
55908: PUSH
55909: LD_INT 3
55911: NEG
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: LD_INT 3
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: LD_INT 4
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 1
55941: PUSH
55942: LD_INT 3
55944: NEG
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: LD_INT 2
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: LD_INT 2
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 1
55974: NEG
55975: PUSH
55976: LD_INT 3
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 1
55986: NEG
55987: PUSH
55988: LD_INT 4
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 2
55998: PUSH
55999: LD_INT 2
56001: NEG
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 2
56009: NEG
56010: PUSH
56011: LD_INT 4
56013: NEG
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 4
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 4
56031: PUSH
56032: LD_INT 1
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 5
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 5
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 4
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 3
56072: PUSH
56073: LD_INT 0
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 3
56082: PUSH
56083: LD_INT 1
56085: NEG
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 3
56093: PUSH
56094: LD_INT 2
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 5
56104: PUSH
56105: LD_INT 2
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 3
56114: PUSH
56115: LD_INT 3
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 3
56124: PUSH
56125: LD_INT 2
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 4
56134: PUSH
56135: LD_INT 3
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 4
56144: PUSH
56145: LD_INT 4
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 3
56154: PUSH
56155: LD_INT 4
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 2
56164: PUSH
56165: LD_INT 3
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 2
56174: PUSH
56175: LD_INT 2
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 4
56184: PUSH
56185: LD_INT 2
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 2
56194: PUSH
56195: LD_INT 4
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 0
56204: PUSH
56205: LD_INT 4
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: LD_INT 3
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: LD_INT 4
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: PUSH
56235: LD_INT 5
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: LD_INT 5
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 1
56254: NEG
56255: PUSH
56256: LD_INT 4
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 1
56265: NEG
56266: PUSH
56267: LD_INT 3
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 2
56276: PUSH
56277: LD_INT 5
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 2
56286: NEG
56287: PUSH
56288: LD_INT 3
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56342: LD_ADDR_VAR 0 34
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: LD_INT 4
56352: NEG
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 0
56360: PUSH
56361: LD_INT 5
56363: NEG
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 1
56371: PUSH
56372: LD_INT 4
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: LD_INT 3
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 0
56393: PUSH
56394: LD_INT 3
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: LD_INT 4
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: LD_INT 5
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 2
56428: PUSH
56429: LD_INT 3
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 2
56439: NEG
56440: PUSH
56441: LD_INT 5
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 3
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 3
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 4
56472: PUSH
56473: LD_INT 0
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 4
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 3
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 2
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 2
56512: PUSH
56513: LD_INT 1
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 2
56523: PUSH
56524: LD_INT 2
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 4
56534: PUSH
56535: LD_INT 2
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 4
56544: PUSH
56545: LD_INT 4
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 4
56554: PUSH
56555: LD_INT 3
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 5
56564: PUSH
56565: LD_INT 4
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 5
56574: PUSH
56575: LD_INT 5
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 4
56584: PUSH
56585: LD_INT 5
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 3
56594: PUSH
56595: LD_INT 4
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 3
56604: PUSH
56605: LD_INT 3
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 5
56614: PUSH
56615: LD_INT 3
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 3
56624: PUSH
56625: LD_INT 5
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 0
56634: PUSH
56635: LD_INT 3
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: LD_INT 2
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: PUSH
56655: LD_INT 3
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: PUSH
56665: LD_INT 4
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: LD_INT 4
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 1
56684: NEG
56685: PUSH
56686: LD_INT 3
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 1
56695: NEG
56696: PUSH
56697: LD_INT 2
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 2
56706: PUSH
56707: LD_INT 4
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 2
56716: NEG
56717: PUSH
56718: LD_INT 2
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 4
56727: NEG
56728: PUSH
56729: LD_INT 0
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 4
56738: NEG
56739: PUSH
56740: LD_INT 1
56742: NEG
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 3
56750: NEG
56751: PUSH
56752: LD_INT 0
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 3
56761: NEG
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 4
56772: NEG
56773: PUSH
56774: LD_INT 1
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 5
56783: NEG
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 5
56794: NEG
56795: PUSH
56796: LD_INT 1
56798: NEG
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 5
56806: NEG
56807: PUSH
56808: LD_INT 2
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 3
56818: NEG
56819: PUSH
56820: LD_INT 2
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: ST_TO_ADDR
// end ; end ;
56874: GO 56877
56876: POP
// case btype of b_depot , b_warehouse :
56877: LD_VAR 0 1
56881: PUSH
56882: LD_INT 0
56884: DOUBLE
56885: EQUAL
56886: IFTRUE 56896
56888: LD_INT 1
56890: DOUBLE
56891: EQUAL
56892: IFTRUE 56896
56894: GO 57097
56896: POP
// case nation of nation_american :
56897: LD_VAR 0 5
56901: PUSH
56902: LD_INT 1
56904: DOUBLE
56905: EQUAL
56906: IFTRUE 56910
56908: GO 56966
56910: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56911: LD_ADDR_VAR 0 9
56915: PUSH
56916: LD_VAR 0 11
56920: PUSH
56921: LD_VAR 0 12
56925: PUSH
56926: LD_VAR 0 13
56930: PUSH
56931: LD_VAR 0 14
56935: PUSH
56936: LD_VAR 0 15
56940: PUSH
56941: LD_VAR 0 16
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: PUSH
56954: LD_VAR 0 4
56958: PUSH
56959: LD_INT 1
56961: PLUS
56962: ARRAY
56963: ST_TO_ADDR
56964: GO 57095
56966: LD_INT 2
56968: DOUBLE
56969: EQUAL
56970: IFTRUE 56974
56972: GO 57030
56974: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56975: LD_ADDR_VAR 0 9
56979: PUSH
56980: LD_VAR 0 17
56984: PUSH
56985: LD_VAR 0 18
56989: PUSH
56990: LD_VAR 0 19
56994: PUSH
56995: LD_VAR 0 20
56999: PUSH
57000: LD_VAR 0 21
57004: PUSH
57005: LD_VAR 0 22
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: PUSH
57018: LD_VAR 0 4
57022: PUSH
57023: LD_INT 1
57025: PLUS
57026: ARRAY
57027: ST_TO_ADDR
57028: GO 57095
57030: LD_INT 3
57032: DOUBLE
57033: EQUAL
57034: IFTRUE 57038
57036: GO 57094
57038: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57039: LD_ADDR_VAR 0 9
57043: PUSH
57044: LD_VAR 0 23
57048: PUSH
57049: LD_VAR 0 24
57053: PUSH
57054: LD_VAR 0 25
57058: PUSH
57059: LD_VAR 0 26
57063: PUSH
57064: LD_VAR 0 27
57068: PUSH
57069: LD_VAR 0 28
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: PUSH
57082: LD_VAR 0 4
57086: PUSH
57087: LD_INT 1
57089: PLUS
57090: ARRAY
57091: ST_TO_ADDR
57092: GO 57095
57094: POP
57095: GO 57650
57097: LD_INT 2
57099: DOUBLE
57100: EQUAL
57101: IFTRUE 57111
57103: LD_INT 3
57105: DOUBLE
57106: EQUAL
57107: IFTRUE 57111
57109: GO 57167
57111: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57112: LD_ADDR_VAR 0 9
57116: PUSH
57117: LD_VAR 0 29
57121: PUSH
57122: LD_VAR 0 30
57126: PUSH
57127: LD_VAR 0 31
57131: PUSH
57132: LD_VAR 0 32
57136: PUSH
57137: LD_VAR 0 33
57141: PUSH
57142: LD_VAR 0 34
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: PUSH
57155: LD_VAR 0 4
57159: PUSH
57160: LD_INT 1
57162: PLUS
57163: ARRAY
57164: ST_TO_ADDR
57165: GO 57650
57167: LD_INT 16
57169: DOUBLE
57170: EQUAL
57171: IFTRUE 57229
57173: LD_INT 17
57175: DOUBLE
57176: EQUAL
57177: IFTRUE 57229
57179: LD_INT 18
57181: DOUBLE
57182: EQUAL
57183: IFTRUE 57229
57185: LD_INT 19
57187: DOUBLE
57188: EQUAL
57189: IFTRUE 57229
57191: LD_INT 22
57193: DOUBLE
57194: EQUAL
57195: IFTRUE 57229
57197: LD_INT 20
57199: DOUBLE
57200: EQUAL
57201: IFTRUE 57229
57203: LD_INT 21
57205: DOUBLE
57206: EQUAL
57207: IFTRUE 57229
57209: LD_INT 23
57211: DOUBLE
57212: EQUAL
57213: IFTRUE 57229
57215: LD_INT 24
57217: DOUBLE
57218: EQUAL
57219: IFTRUE 57229
57221: LD_INT 25
57223: DOUBLE
57224: EQUAL
57225: IFTRUE 57229
57227: GO 57285
57229: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57230: LD_ADDR_VAR 0 9
57234: PUSH
57235: LD_VAR 0 35
57239: PUSH
57240: LD_VAR 0 36
57244: PUSH
57245: LD_VAR 0 37
57249: PUSH
57250: LD_VAR 0 38
57254: PUSH
57255: LD_VAR 0 39
57259: PUSH
57260: LD_VAR 0 40
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: PUSH
57273: LD_VAR 0 4
57277: PUSH
57278: LD_INT 1
57280: PLUS
57281: ARRAY
57282: ST_TO_ADDR
57283: GO 57650
57285: LD_INT 6
57287: DOUBLE
57288: EQUAL
57289: IFTRUE 57341
57291: LD_INT 7
57293: DOUBLE
57294: EQUAL
57295: IFTRUE 57341
57297: LD_INT 8
57299: DOUBLE
57300: EQUAL
57301: IFTRUE 57341
57303: LD_INT 13
57305: DOUBLE
57306: EQUAL
57307: IFTRUE 57341
57309: LD_INT 12
57311: DOUBLE
57312: EQUAL
57313: IFTRUE 57341
57315: LD_INT 15
57317: DOUBLE
57318: EQUAL
57319: IFTRUE 57341
57321: LD_INT 11
57323: DOUBLE
57324: EQUAL
57325: IFTRUE 57341
57327: LD_INT 14
57329: DOUBLE
57330: EQUAL
57331: IFTRUE 57341
57333: LD_INT 10
57335: DOUBLE
57336: EQUAL
57337: IFTRUE 57341
57339: GO 57397
57341: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57342: LD_ADDR_VAR 0 9
57346: PUSH
57347: LD_VAR 0 41
57351: PUSH
57352: LD_VAR 0 42
57356: PUSH
57357: LD_VAR 0 43
57361: PUSH
57362: LD_VAR 0 44
57366: PUSH
57367: LD_VAR 0 45
57371: PUSH
57372: LD_VAR 0 46
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: PUSH
57385: LD_VAR 0 4
57389: PUSH
57390: LD_INT 1
57392: PLUS
57393: ARRAY
57394: ST_TO_ADDR
57395: GO 57650
57397: LD_INT 36
57399: DOUBLE
57400: EQUAL
57401: IFTRUE 57405
57403: GO 57461
57405: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57406: LD_ADDR_VAR 0 9
57410: PUSH
57411: LD_VAR 0 47
57415: PUSH
57416: LD_VAR 0 48
57420: PUSH
57421: LD_VAR 0 49
57425: PUSH
57426: LD_VAR 0 50
57430: PUSH
57431: LD_VAR 0 51
57435: PUSH
57436: LD_VAR 0 52
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: PUSH
57449: LD_VAR 0 4
57453: PUSH
57454: LD_INT 1
57456: PLUS
57457: ARRAY
57458: ST_TO_ADDR
57459: GO 57650
57461: LD_INT 4
57463: DOUBLE
57464: EQUAL
57465: IFTRUE 57487
57467: LD_INT 5
57469: DOUBLE
57470: EQUAL
57471: IFTRUE 57487
57473: LD_INT 34
57475: DOUBLE
57476: EQUAL
57477: IFTRUE 57487
57479: LD_INT 37
57481: DOUBLE
57482: EQUAL
57483: IFTRUE 57487
57485: GO 57543
57487: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57488: LD_ADDR_VAR 0 9
57492: PUSH
57493: LD_VAR 0 53
57497: PUSH
57498: LD_VAR 0 54
57502: PUSH
57503: LD_VAR 0 55
57507: PUSH
57508: LD_VAR 0 56
57512: PUSH
57513: LD_VAR 0 57
57517: PUSH
57518: LD_VAR 0 58
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: PUSH
57531: LD_VAR 0 4
57535: PUSH
57536: LD_INT 1
57538: PLUS
57539: ARRAY
57540: ST_TO_ADDR
57541: GO 57650
57543: LD_INT 31
57545: DOUBLE
57546: EQUAL
57547: IFTRUE 57593
57549: LD_INT 32
57551: DOUBLE
57552: EQUAL
57553: IFTRUE 57593
57555: LD_INT 33
57557: DOUBLE
57558: EQUAL
57559: IFTRUE 57593
57561: LD_INT 27
57563: DOUBLE
57564: EQUAL
57565: IFTRUE 57593
57567: LD_INT 26
57569: DOUBLE
57570: EQUAL
57571: IFTRUE 57593
57573: LD_INT 28
57575: DOUBLE
57576: EQUAL
57577: IFTRUE 57593
57579: LD_INT 29
57581: DOUBLE
57582: EQUAL
57583: IFTRUE 57593
57585: LD_INT 30
57587: DOUBLE
57588: EQUAL
57589: IFTRUE 57593
57591: GO 57649
57593: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57594: LD_ADDR_VAR 0 9
57598: PUSH
57599: LD_VAR 0 59
57603: PUSH
57604: LD_VAR 0 60
57608: PUSH
57609: LD_VAR 0 61
57613: PUSH
57614: LD_VAR 0 62
57618: PUSH
57619: LD_VAR 0 63
57623: PUSH
57624: LD_VAR 0 64
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: PUSH
57637: LD_VAR 0 4
57641: PUSH
57642: LD_INT 1
57644: PLUS
57645: ARRAY
57646: ST_TO_ADDR
57647: GO 57650
57649: POP
// temp_list2 = [ ] ;
57650: LD_ADDR_VAR 0 10
57654: PUSH
57655: EMPTY
57656: ST_TO_ADDR
// for i in temp_list do
57657: LD_ADDR_VAR 0 8
57661: PUSH
57662: LD_VAR 0 9
57666: PUSH
57667: FOR_IN
57668: IFFALSE 57720
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57670: LD_ADDR_VAR 0 10
57674: PUSH
57675: LD_VAR 0 10
57679: PUSH
57680: LD_VAR 0 8
57684: PUSH
57685: LD_INT 1
57687: ARRAY
57688: PUSH
57689: LD_VAR 0 2
57693: PLUS
57694: PUSH
57695: LD_VAR 0 8
57699: PUSH
57700: LD_INT 2
57702: ARRAY
57703: PUSH
57704: LD_VAR 0 3
57708: PLUS
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: EMPTY
57715: LIST
57716: ADD
57717: ST_TO_ADDR
57718: GO 57667
57720: POP
57721: POP
// result = temp_list2 ;
57722: LD_ADDR_VAR 0 7
57726: PUSH
57727: LD_VAR 0 10
57731: ST_TO_ADDR
// end ;
57732: LD_VAR 0 7
57736: RET
// export function EnemyInRange ( unit , dist ) ; begin
57737: LD_INT 0
57739: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57740: LD_ADDR_VAR 0 3
57744: PUSH
57745: LD_VAR 0 1
57749: PPUSH
57750: CALL_OW 255
57754: PPUSH
57755: LD_VAR 0 1
57759: PPUSH
57760: CALL_OW 250
57764: PPUSH
57765: LD_VAR 0 1
57769: PPUSH
57770: CALL_OW 251
57774: PPUSH
57775: LD_VAR 0 2
57779: PPUSH
57780: CALL 30994 0 4
57784: PUSH
57785: LD_INT 4
57787: ARRAY
57788: ST_TO_ADDR
// end ;
57789: LD_VAR 0 3
57793: RET
// export function PlayerSeeMe ( unit ) ; begin
57794: LD_INT 0
57796: PPUSH
// result := See ( your_side , unit ) ;
57797: LD_ADDR_VAR 0 2
57801: PUSH
57802: LD_OWVAR 2
57806: PPUSH
57807: LD_VAR 0 1
57811: PPUSH
57812: CALL_OW 292
57816: ST_TO_ADDR
// end ;
57817: LD_VAR 0 2
57821: RET
// export function ReverseDir ( unit ) ; begin
57822: LD_INT 0
57824: PPUSH
// if not unit then
57825: LD_VAR 0 1
57829: NOT
57830: IFFALSE 57834
// exit ;
57832: GO 57857
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57834: LD_ADDR_VAR 0 2
57838: PUSH
57839: LD_VAR 0 1
57843: PPUSH
57844: CALL_OW 254
57848: PUSH
57849: LD_INT 3
57851: PLUS
57852: PUSH
57853: LD_INT 6
57855: MOD
57856: ST_TO_ADDR
// end ;
57857: LD_VAR 0 2
57861: RET
// export function ReverseArray ( array ) ; var i ; begin
57862: LD_INT 0
57864: PPUSH
57865: PPUSH
// if not array then
57866: LD_VAR 0 1
57870: NOT
57871: IFFALSE 57875
// exit ;
57873: GO 57930
// result := [ ] ;
57875: LD_ADDR_VAR 0 2
57879: PUSH
57880: EMPTY
57881: ST_TO_ADDR
// for i := array downto 1 do
57882: LD_ADDR_VAR 0 3
57886: PUSH
57887: DOUBLE
57888: LD_VAR 0 1
57892: INC
57893: ST_TO_ADDR
57894: LD_INT 1
57896: PUSH
57897: FOR_DOWNTO
57898: IFFALSE 57928
// result := Join ( result , array [ i ] ) ;
57900: LD_ADDR_VAR 0 2
57904: PUSH
57905: LD_VAR 0 2
57909: PPUSH
57910: LD_VAR 0 1
57914: PUSH
57915: LD_VAR 0 3
57919: ARRAY
57920: PPUSH
57921: CALL 62782 0 2
57925: ST_TO_ADDR
57926: GO 57897
57928: POP
57929: POP
// end ;
57930: LD_VAR 0 2
57934: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
57935: LD_INT 0
57937: PPUSH
57938: PPUSH
57939: PPUSH
57940: PPUSH
57941: PPUSH
57942: PPUSH
// if not unit or not hexes then
57943: LD_VAR 0 1
57947: NOT
57948: IFTRUE 57957
57950: PUSH
57951: LD_VAR 0 2
57955: NOT
57956: OR
57957: IFFALSE 57961
// exit ;
57959: GO 58084
// dist := 9999 ;
57961: LD_ADDR_VAR 0 5
57965: PUSH
57966: LD_INT 9999
57968: ST_TO_ADDR
// for i = 1 to hexes do
57969: LD_ADDR_VAR 0 4
57973: PUSH
57974: DOUBLE
57975: LD_INT 1
57977: DEC
57978: ST_TO_ADDR
57979: LD_VAR 0 2
57983: PUSH
57984: FOR_TO
57985: IFFALSE 58072
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57987: LD_ADDR_VAR 0 6
57991: PUSH
57992: LD_VAR 0 1
57996: PPUSH
57997: LD_VAR 0 2
58001: PUSH
58002: LD_VAR 0 4
58006: ARRAY
58007: PUSH
58008: LD_INT 1
58010: ARRAY
58011: PPUSH
58012: LD_VAR 0 2
58016: PUSH
58017: LD_VAR 0 4
58021: ARRAY
58022: PUSH
58023: LD_INT 2
58025: ARRAY
58026: PPUSH
58027: CALL_OW 297
58031: ST_TO_ADDR
// if tdist < dist then
58032: LD_VAR 0 6
58036: PUSH
58037: LD_VAR 0 5
58041: LESS
58042: IFFALSE 58070
// begin hex := hexes [ i ] ;
58044: LD_ADDR_VAR 0 8
58048: PUSH
58049: LD_VAR 0 2
58053: PUSH
58054: LD_VAR 0 4
58058: ARRAY
58059: ST_TO_ADDR
// dist := tdist ;
58060: LD_ADDR_VAR 0 5
58064: PUSH
58065: LD_VAR 0 6
58069: ST_TO_ADDR
// end ; end ;
58070: GO 57984
58072: POP
58073: POP
// result := hex ;
58074: LD_ADDR_VAR 0 3
58078: PUSH
58079: LD_VAR 0 8
58083: ST_TO_ADDR
// end ;
58084: LD_VAR 0 3
58088: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58089: LD_INT 0
58091: PPUSH
58092: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58093: LD_VAR 0 1
58097: NOT
58098: IFTRUE 58137
58100: PUSH
58101: LD_VAR 0 1
58105: PUSH
58106: LD_INT 21
58108: PUSH
58109: LD_INT 2
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 23
58118: PUSH
58119: LD_INT 2
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PPUSH
58130: CALL_OW 69
58134: IN
58135: NOT
58136: OR
58137: IFFALSE 58141
// exit ;
58139: GO 58188
// for i = 1 to 3 do
58141: LD_ADDR_VAR 0 3
58145: PUSH
58146: DOUBLE
58147: LD_INT 1
58149: DEC
58150: ST_TO_ADDR
58151: LD_INT 3
58153: PUSH
58154: FOR_TO
58155: IFFALSE 58186
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58157: LD_VAR 0 1
58161: PPUSH
58162: CALL_OW 250
58166: PPUSH
58167: LD_VAR 0 1
58171: PPUSH
58172: CALL_OW 251
58176: PPUSH
58177: LD_INT 1
58179: PPUSH
58180: CALL_OW 453
58184: GO 58154
58186: POP
58187: POP
// end ;
58188: LD_VAR 0 2
58192: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58193: LD_INT 0
58195: PPUSH
58196: PPUSH
58197: PPUSH
58198: PPUSH
58199: PPUSH
58200: PPUSH
// if not unit or not enemy_unit then
58201: LD_VAR 0 1
58205: NOT
58206: IFTRUE 58215
58208: PUSH
58209: LD_VAR 0 2
58213: NOT
58214: OR
58215: IFFALSE 58219
// exit ;
58217: GO 58700
// if GetLives ( i ) < 250 then
58219: LD_VAR 0 4
58223: PPUSH
58224: CALL_OW 256
58228: PUSH
58229: LD_INT 250
58231: LESS
58232: IFFALSE 58245
// begin ComAutodestruct ( i ) ;
58234: LD_VAR 0 4
58238: PPUSH
58239: CALL 58089 0 1
// exit ;
58243: GO 58700
// end ; x := GetX ( enemy_unit ) ;
58245: LD_ADDR_VAR 0 7
58249: PUSH
58250: LD_VAR 0 2
58254: PPUSH
58255: CALL_OW 250
58259: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58260: LD_ADDR_VAR 0 8
58264: PUSH
58265: LD_VAR 0 2
58269: PPUSH
58270: CALL_OW 251
58274: ST_TO_ADDR
// if not x or not y then
58275: LD_VAR 0 7
58279: NOT
58280: IFTRUE 58289
58282: PUSH
58283: LD_VAR 0 8
58287: NOT
58288: OR
58289: IFFALSE 58293
// exit ;
58291: GO 58700
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58293: LD_ADDR_VAR 0 6
58297: PUSH
58298: LD_VAR 0 7
58302: PPUSH
58303: LD_INT 0
58305: PPUSH
58306: LD_INT 4
58308: PPUSH
58309: CALL_OW 272
58313: PUSH
58314: LD_VAR 0 8
58318: PPUSH
58319: LD_INT 0
58321: PPUSH
58322: LD_INT 4
58324: PPUSH
58325: CALL_OW 273
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_VAR 0 7
58338: PPUSH
58339: LD_INT 1
58341: PPUSH
58342: LD_INT 4
58344: PPUSH
58345: CALL_OW 272
58349: PUSH
58350: LD_VAR 0 8
58354: PPUSH
58355: LD_INT 1
58357: PPUSH
58358: LD_INT 4
58360: PPUSH
58361: CALL_OW 273
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_VAR 0 7
58374: PPUSH
58375: LD_INT 2
58377: PPUSH
58378: LD_INT 4
58380: PPUSH
58381: CALL_OW 272
58385: PUSH
58386: LD_VAR 0 8
58390: PPUSH
58391: LD_INT 2
58393: PPUSH
58394: LD_INT 4
58396: PPUSH
58397: CALL_OW 273
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_VAR 0 7
58410: PPUSH
58411: LD_INT 3
58413: PPUSH
58414: LD_INT 4
58416: PPUSH
58417: CALL_OW 272
58421: PUSH
58422: LD_VAR 0 8
58426: PPUSH
58427: LD_INT 3
58429: PPUSH
58430: LD_INT 4
58432: PPUSH
58433: CALL_OW 273
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_VAR 0 7
58446: PPUSH
58447: LD_INT 4
58449: PPUSH
58450: LD_INT 4
58452: PPUSH
58453: CALL_OW 272
58457: PUSH
58458: LD_VAR 0 8
58462: PPUSH
58463: LD_INT 4
58465: PPUSH
58466: LD_INT 4
58468: PPUSH
58469: CALL_OW 273
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_VAR 0 7
58482: PPUSH
58483: LD_INT 5
58485: PPUSH
58486: LD_INT 4
58488: PPUSH
58489: CALL_OW 272
58493: PUSH
58494: LD_VAR 0 8
58498: PPUSH
58499: LD_INT 5
58501: PPUSH
58502: LD_INT 4
58504: PPUSH
58505: CALL_OW 273
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: ST_TO_ADDR
// for i = tmp downto 1 do
58522: LD_ADDR_VAR 0 4
58526: PUSH
58527: DOUBLE
58528: LD_VAR 0 6
58532: INC
58533: ST_TO_ADDR
58534: LD_INT 1
58536: PUSH
58537: FOR_DOWNTO
58538: IFFALSE 58641
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58540: LD_VAR 0 6
58544: PUSH
58545: LD_VAR 0 4
58549: ARRAY
58550: PUSH
58551: LD_INT 1
58553: ARRAY
58554: PPUSH
58555: LD_VAR 0 6
58559: PUSH
58560: LD_VAR 0 4
58564: ARRAY
58565: PUSH
58566: LD_INT 2
58568: ARRAY
58569: PPUSH
58570: CALL_OW 488
58574: NOT
58575: IFTRUE 58617
58577: PUSH
58578: LD_VAR 0 6
58582: PUSH
58583: LD_VAR 0 4
58587: ARRAY
58588: PUSH
58589: LD_INT 1
58591: ARRAY
58592: PPUSH
58593: LD_VAR 0 6
58597: PUSH
58598: LD_VAR 0 4
58602: ARRAY
58603: PUSH
58604: LD_INT 2
58606: ARRAY
58607: PPUSH
58608: CALL_OW 428
58612: PUSH
58613: LD_INT 0
58615: NONEQUAL
58616: OR
58617: IFFALSE 58639
// tmp := Delete ( tmp , i ) ;
58619: LD_ADDR_VAR 0 6
58623: PUSH
58624: LD_VAR 0 6
58628: PPUSH
58629: LD_VAR 0 4
58633: PPUSH
58634: CALL_OW 3
58638: ST_TO_ADDR
58639: GO 58537
58641: POP
58642: POP
// j := GetClosestHex ( unit , tmp ) ;
58643: LD_ADDR_VAR 0 5
58647: PUSH
58648: LD_VAR 0 1
58652: PPUSH
58653: LD_VAR 0 6
58657: PPUSH
58658: CALL 57935 0 2
58662: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58663: LD_VAR 0 1
58667: PPUSH
58668: LD_VAR 0 5
58672: PUSH
58673: LD_INT 1
58675: ARRAY
58676: PPUSH
58677: LD_VAR 0 5
58681: PUSH
58682: LD_INT 2
58684: ARRAY
58685: PPUSH
58686: CALL_OW 111
// result := j ;
58690: LD_ADDR_VAR 0 3
58694: PUSH
58695: LD_VAR 0 5
58699: ST_TO_ADDR
// end ;
58700: LD_VAR 0 3
58704: RET
// export function PrepareApemanSoldier ( ) ; begin
58705: LD_INT 0
58707: PPUSH
// uc_nation := 0 ;
58708: LD_ADDR_OWVAR 21
58712: PUSH
58713: LD_INT 0
58715: ST_TO_ADDR
// hc_sex := sex_male ;
58716: LD_ADDR_OWVAR 27
58720: PUSH
58721: LD_INT 1
58723: ST_TO_ADDR
// hc_name :=  ;
58724: LD_ADDR_OWVAR 26
58728: PUSH
58729: LD_STRING 
58731: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58732: LD_ADDR_OWVAR 28
58736: PUSH
58737: LD_INT 15
58739: ST_TO_ADDR
// hc_gallery :=  ;
58740: LD_ADDR_OWVAR 33
58744: PUSH
58745: LD_STRING 
58747: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58748: LD_ADDR_OWVAR 31
58752: PUSH
58753: LD_INT 0
58755: PPUSH
58756: LD_INT 3
58758: PPUSH
58759: CALL_OW 12
58763: PUSH
58764: LD_INT 0
58766: PPUSH
58767: LD_INT 3
58769: PPUSH
58770: CALL_OW 12
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: LD_INT 0
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
58787: LD_ADDR_OWVAR 29
58791: PUSH
58792: LD_INT 10
58794: PUSH
58795: LD_INT 12
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: ST_TO_ADDR
// end ;
58802: LD_VAR 0 1
58806: RET
// export function PrepareApemanEngineer ( ) ; begin
58807: LD_INT 0
58809: PPUSH
// uc_nation := 0 ;
58810: LD_ADDR_OWVAR 21
58814: PUSH
58815: LD_INT 0
58817: ST_TO_ADDR
// hc_sex := sex_male ;
58818: LD_ADDR_OWVAR 27
58822: PUSH
58823: LD_INT 1
58825: ST_TO_ADDR
// hc_name :=  ;
58826: LD_ADDR_OWVAR 26
58830: PUSH
58831: LD_STRING 
58833: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58834: LD_ADDR_OWVAR 28
58838: PUSH
58839: LD_INT 16
58841: ST_TO_ADDR
// hc_gallery :=  ;
58842: LD_ADDR_OWVAR 33
58846: PUSH
58847: LD_STRING 
58849: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58850: LD_ADDR_OWVAR 31
58854: PUSH
58855: LD_INT 0
58857: PPUSH
58858: LD_INT 3
58860: PPUSH
58861: CALL_OW 12
58865: PUSH
58866: LD_INT 0
58868: PPUSH
58869: LD_INT 3
58871: PPUSH
58872: CALL_OW 12
58876: PUSH
58877: LD_INT 0
58879: PUSH
58880: LD_INT 0
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
58889: LD_ADDR_OWVAR 29
58893: PUSH
58894: LD_INT 10
58896: PUSH
58897: LD_INT 12
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: ST_TO_ADDR
// end ;
58904: LD_VAR 0 1
58908: RET
// export function PrepareApeman ( agressivity ) ; begin
58909: LD_INT 0
58911: PPUSH
// uc_side := 0 ;
58912: LD_ADDR_OWVAR 20
58916: PUSH
58917: LD_INT 0
58919: ST_TO_ADDR
// uc_nation := 0 ;
58920: LD_ADDR_OWVAR 21
58924: PUSH
58925: LD_INT 0
58927: ST_TO_ADDR
// hc_sex := sex_male ;
58928: LD_ADDR_OWVAR 27
58932: PUSH
58933: LD_INT 1
58935: ST_TO_ADDR
// hc_class := class_apeman ;
58936: LD_ADDR_OWVAR 28
58940: PUSH
58941: LD_INT 12
58943: ST_TO_ADDR
// hc_gallery :=  ;
58944: LD_ADDR_OWVAR 33
58948: PUSH
58949: LD_STRING 
58951: ST_TO_ADDR
// hc_name :=  ;
58952: LD_ADDR_OWVAR 26
58956: PUSH
58957: LD_STRING 
58959: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
58960: LD_ADDR_OWVAR 29
58964: PUSH
58965: LD_INT 10
58967: PUSH
58968: LD_INT 12
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: ST_TO_ADDR
// if agressivity = 0 then
58975: LD_VAR 0 1
58979: PUSH
58980: LD_INT 0
58982: EQUAL
58983: IFFALSE 58995
// hc_agressivity := 0 else
58985: LD_ADDR_OWVAR 35
58989: PUSH
58990: LD_INT 0
58992: ST_TO_ADDR
58993: GO 59016
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58995: LD_ADDR_OWVAR 35
58999: PUSH
59000: LD_VAR 0 1
59004: NEG
59005: PPUSH
59006: LD_VAR 0 1
59010: PPUSH
59011: CALL_OW 12
59015: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59016: LD_ADDR_OWVAR 31
59020: PUSH
59021: LD_INT 0
59023: PPUSH
59024: LD_INT 3
59026: PPUSH
59027: CALL_OW 12
59031: PUSH
59032: LD_INT 0
59034: PPUSH
59035: LD_INT 3
59037: PPUSH
59038: CALL_OW 12
59042: PUSH
59043: LD_INT 0
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: ST_TO_ADDR
// end ;
59055: LD_VAR 0 2
59059: RET
// export function PrepareTiger ( agressivity ) ; begin
59060: LD_INT 0
59062: PPUSH
// uc_side := 0 ;
59063: LD_ADDR_OWVAR 20
59067: PUSH
59068: LD_INT 0
59070: ST_TO_ADDR
// uc_nation := 0 ;
59071: LD_ADDR_OWVAR 21
59075: PUSH
59076: LD_INT 0
59078: ST_TO_ADDR
// InitHc ;
59079: CALL_OW 19
// hc_class := class_tiger ;
59083: LD_ADDR_OWVAR 28
59087: PUSH
59088: LD_INT 14
59090: ST_TO_ADDR
// hc_gallery :=  ;
59091: LD_ADDR_OWVAR 33
59095: PUSH
59096: LD_STRING 
59098: ST_TO_ADDR
// hc_name :=  ;
59099: LD_ADDR_OWVAR 26
59103: PUSH
59104: LD_STRING 
59106: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59107: LD_ADDR_OWVAR 35
59111: PUSH
59112: LD_VAR 0 1
59116: NEG
59117: PPUSH
59118: LD_VAR 0 1
59122: PPUSH
59123: CALL_OW 12
59127: ST_TO_ADDR
// end ;
59128: LD_VAR 0 2
59132: RET
// export function PrepareEnchidna ( ) ; begin
59133: LD_INT 0
59135: PPUSH
// uc_side := 0 ;
59136: LD_ADDR_OWVAR 20
59140: PUSH
59141: LD_INT 0
59143: ST_TO_ADDR
// uc_nation := 0 ;
59144: LD_ADDR_OWVAR 21
59148: PUSH
59149: LD_INT 0
59151: ST_TO_ADDR
// InitHc ;
59152: CALL_OW 19
// hc_class := class_baggie ;
59156: LD_ADDR_OWVAR 28
59160: PUSH
59161: LD_INT 13
59163: ST_TO_ADDR
// hc_gallery :=  ;
59164: LD_ADDR_OWVAR 33
59168: PUSH
59169: LD_STRING 
59171: ST_TO_ADDR
// hc_name :=  ;
59172: LD_ADDR_OWVAR 26
59176: PUSH
59177: LD_STRING 
59179: ST_TO_ADDR
// end ;
59180: LD_VAR 0 1
59184: RET
// export function PrepareFrog ( ) ; begin
59185: LD_INT 0
59187: PPUSH
// uc_side := 0 ;
59188: LD_ADDR_OWVAR 20
59192: PUSH
59193: LD_INT 0
59195: ST_TO_ADDR
// uc_nation := 0 ;
59196: LD_ADDR_OWVAR 21
59200: PUSH
59201: LD_INT 0
59203: ST_TO_ADDR
// InitHc ;
59204: CALL_OW 19
// hc_class := class_frog ;
59208: LD_ADDR_OWVAR 28
59212: PUSH
59213: LD_INT 19
59215: ST_TO_ADDR
// hc_gallery :=  ;
59216: LD_ADDR_OWVAR 33
59220: PUSH
59221: LD_STRING 
59223: ST_TO_ADDR
// hc_name :=  ;
59224: LD_ADDR_OWVAR 26
59228: PUSH
59229: LD_STRING 
59231: ST_TO_ADDR
// end ;
59232: LD_VAR 0 1
59236: RET
// export function PrepareFish ( ) ; begin
59237: LD_INT 0
59239: PPUSH
// uc_side := 0 ;
59240: LD_ADDR_OWVAR 20
59244: PUSH
59245: LD_INT 0
59247: ST_TO_ADDR
// uc_nation := 0 ;
59248: LD_ADDR_OWVAR 21
59252: PUSH
59253: LD_INT 0
59255: ST_TO_ADDR
// InitHc ;
59256: CALL_OW 19
// hc_class := class_fish ;
59260: LD_ADDR_OWVAR 28
59264: PUSH
59265: LD_INT 20
59267: ST_TO_ADDR
// hc_gallery :=  ;
59268: LD_ADDR_OWVAR 33
59272: PUSH
59273: LD_STRING 
59275: ST_TO_ADDR
// hc_name :=  ;
59276: LD_ADDR_OWVAR 26
59280: PUSH
59281: LD_STRING 
59283: ST_TO_ADDR
// end ;
59284: LD_VAR 0 1
59288: RET
// export function PrepareBird ( ) ; begin
59289: LD_INT 0
59291: PPUSH
// uc_side := 0 ;
59292: LD_ADDR_OWVAR 20
59296: PUSH
59297: LD_INT 0
59299: ST_TO_ADDR
// uc_nation := 0 ;
59300: LD_ADDR_OWVAR 21
59304: PUSH
59305: LD_INT 0
59307: ST_TO_ADDR
// InitHc ;
59308: CALL_OW 19
// hc_class := class_phororhacos ;
59312: LD_ADDR_OWVAR 28
59316: PUSH
59317: LD_INT 18
59319: ST_TO_ADDR
// hc_gallery :=  ;
59320: LD_ADDR_OWVAR 33
59324: PUSH
59325: LD_STRING 
59327: ST_TO_ADDR
// hc_name :=  ;
59328: LD_ADDR_OWVAR 26
59332: PUSH
59333: LD_STRING 
59335: ST_TO_ADDR
// end ;
59336: LD_VAR 0 1
59340: RET
// export function PrepareHorse ( ) ; begin
59341: LD_INT 0
59343: PPUSH
// uc_side := 0 ;
59344: LD_ADDR_OWVAR 20
59348: PUSH
59349: LD_INT 0
59351: ST_TO_ADDR
// uc_nation := 0 ;
59352: LD_ADDR_OWVAR 21
59356: PUSH
59357: LD_INT 0
59359: ST_TO_ADDR
// InitHc ;
59360: CALL_OW 19
// hc_class := class_horse ;
59364: LD_ADDR_OWVAR 28
59368: PUSH
59369: LD_INT 21
59371: ST_TO_ADDR
// hc_gallery :=  ;
59372: LD_ADDR_OWVAR 33
59376: PUSH
59377: LD_STRING 
59379: ST_TO_ADDR
// hc_name :=  ;
59380: LD_ADDR_OWVAR 26
59384: PUSH
59385: LD_STRING 
59387: ST_TO_ADDR
// end ;
59388: LD_VAR 0 1
59392: RET
// export function PrepareMastodont ( ) ; begin
59393: LD_INT 0
59395: PPUSH
// uc_side := 0 ;
59396: LD_ADDR_OWVAR 20
59400: PUSH
59401: LD_INT 0
59403: ST_TO_ADDR
// uc_nation := 0 ;
59404: LD_ADDR_OWVAR 21
59408: PUSH
59409: LD_INT 0
59411: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59412: LD_ADDR_OWVAR 37
59416: PUSH
59417: LD_INT 31
59419: ST_TO_ADDR
// vc_control := control_rider ;
59420: LD_ADDR_OWVAR 38
59424: PUSH
59425: LD_INT 4
59427: ST_TO_ADDR
// end ;
59428: LD_VAR 0 1
59432: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59433: LD_INT 0
59435: PPUSH
59436: PPUSH
59437: PPUSH
// uc_side = 0 ;
59438: LD_ADDR_OWVAR 20
59442: PUSH
59443: LD_INT 0
59445: ST_TO_ADDR
// uc_nation = 0 ;
59446: LD_ADDR_OWVAR 21
59450: PUSH
59451: LD_INT 0
59453: ST_TO_ADDR
// InitHc_All ( ) ;
59454: CALL_OW 584
// InitVc ;
59458: CALL_OW 20
// if mastodonts then
59462: LD_VAR 0 6
59466: IFFALSE 59533
// for i = 1 to mastodonts do
59468: LD_ADDR_VAR 0 11
59472: PUSH
59473: DOUBLE
59474: LD_INT 1
59476: DEC
59477: ST_TO_ADDR
59478: LD_VAR 0 6
59482: PUSH
59483: FOR_TO
59484: IFFALSE 59531
// begin vc_chassis := 31 ;
59486: LD_ADDR_OWVAR 37
59490: PUSH
59491: LD_INT 31
59493: ST_TO_ADDR
// vc_control := control_rider ;
59494: LD_ADDR_OWVAR 38
59498: PUSH
59499: LD_INT 4
59501: ST_TO_ADDR
// animal := CreateVehicle ;
59502: LD_ADDR_VAR 0 12
59506: PUSH
59507: CALL_OW 45
59511: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59512: LD_VAR 0 12
59516: PPUSH
59517: LD_VAR 0 8
59521: PPUSH
59522: LD_INT 0
59524: PPUSH
59525: CALL 61675 0 3
// end ;
59529: GO 59483
59531: POP
59532: POP
// if horses then
59533: LD_VAR 0 5
59537: IFFALSE 59604
// for i = 1 to horses do
59539: LD_ADDR_VAR 0 11
59543: PUSH
59544: DOUBLE
59545: LD_INT 1
59547: DEC
59548: ST_TO_ADDR
59549: LD_VAR 0 5
59553: PUSH
59554: FOR_TO
59555: IFFALSE 59602
// begin hc_class := 21 ;
59557: LD_ADDR_OWVAR 28
59561: PUSH
59562: LD_INT 21
59564: ST_TO_ADDR
// hc_gallery :=  ;
59565: LD_ADDR_OWVAR 33
59569: PUSH
59570: LD_STRING 
59572: ST_TO_ADDR
// animal := CreateHuman ;
59573: LD_ADDR_VAR 0 12
59577: PUSH
59578: CALL_OW 44
59582: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59583: LD_VAR 0 12
59587: PPUSH
59588: LD_VAR 0 8
59592: PPUSH
59593: LD_INT 0
59595: PPUSH
59596: CALL 61675 0 3
// end ;
59600: GO 59554
59602: POP
59603: POP
// if birds then
59604: LD_VAR 0 1
59608: IFFALSE 59675
// for i = 1 to birds do
59610: LD_ADDR_VAR 0 11
59614: PUSH
59615: DOUBLE
59616: LD_INT 1
59618: DEC
59619: ST_TO_ADDR
59620: LD_VAR 0 1
59624: PUSH
59625: FOR_TO
59626: IFFALSE 59673
// begin hc_class := 18 ;
59628: LD_ADDR_OWVAR 28
59632: PUSH
59633: LD_INT 18
59635: ST_TO_ADDR
// hc_gallery =  ;
59636: LD_ADDR_OWVAR 33
59640: PUSH
59641: LD_STRING 
59643: ST_TO_ADDR
// animal := CreateHuman ;
59644: LD_ADDR_VAR 0 12
59648: PUSH
59649: CALL_OW 44
59653: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59654: LD_VAR 0 12
59658: PPUSH
59659: LD_VAR 0 8
59663: PPUSH
59664: LD_INT 0
59666: PPUSH
59667: CALL 61675 0 3
// end ;
59671: GO 59625
59673: POP
59674: POP
// if tigers then
59675: LD_VAR 0 2
59679: IFFALSE 59763
// for i = 1 to tigers do
59681: LD_ADDR_VAR 0 11
59685: PUSH
59686: DOUBLE
59687: LD_INT 1
59689: DEC
59690: ST_TO_ADDR
59691: LD_VAR 0 2
59695: PUSH
59696: FOR_TO
59697: IFFALSE 59761
// begin hc_class = class_tiger ;
59699: LD_ADDR_OWVAR 28
59703: PUSH
59704: LD_INT 14
59706: ST_TO_ADDR
// hc_gallery =  ;
59707: LD_ADDR_OWVAR 33
59711: PUSH
59712: LD_STRING 
59714: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59715: LD_ADDR_OWVAR 35
59719: PUSH
59720: LD_INT 7
59722: NEG
59723: PPUSH
59724: LD_INT 7
59726: PPUSH
59727: CALL_OW 12
59731: ST_TO_ADDR
// animal := CreateHuman ;
59732: LD_ADDR_VAR 0 12
59736: PUSH
59737: CALL_OW 44
59741: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59742: LD_VAR 0 12
59746: PPUSH
59747: LD_VAR 0 8
59751: PPUSH
59752: LD_INT 0
59754: PPUSH
59755: CALL 61675 0 3
// end ;
59759: GO 59696
59761: POP
59762: POP
// if apemans then
59763: LD_VAR 0 3
59767: IFFALSE 59890
// for i = 1 to apemans do
59769: LD_ADDR_VAR 0 11
59773: PUSH
59774: DOUBLE
59775: LD_INT 1
59777: DEC
59778: ST_TO_ADDR
59779: LD_VAR 0 3
59783: PUSH
59784: FOR_TO
59785: IFFALSE 59888
// begin hc_class = class_apeman ;
59787: LD_ADDR_OWVAR 28
59791: PUSH
59792: LD_INT 12
59794: ST_TO_ADDR
// hc_gallery =  ;
59795: LD_ADDR_OWVAR 33
59799: PUSH
59800: LD_STRING 
59802: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59803: LD_ADDR_OWVAR 35
59807: PUSH
59808: LD_INT 2
59810: NEG
59811: PPUSH
59812: LD_INT 2
59814: PPUSH
59815: CALL_OW 12
59819: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59820: LD_ADDR_OWVAR 31
59824: PUSH
59825: LD_INT 1
59827: PPUSH
59828: LD_INT 3
59830: PPUSH
59831: CALL_OW 12
59835: PUSH
59836: LD_INT 1
59838: PPUSH
59839: LD_INT 3
59841: PPUSH
59842: CALL_OW 12
59846: PUSH
59847: LD_INT 0
59849: PUSH
59850: LD_INT 0
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: ST_TO_ADDR
// animal := CreateHuman ;
59859: LD_ADDR_VAR 0 12
59863: PUSH
59864: CALL_OW 44
59868: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59869: LD_VAR 0 12
59873: PPUSH
59874: LD_VAR 0 8
59878: PPUSH
59879: LD_INT 0
59881: PPUSH
59882: CALL 61675 0 3
// end ;
59886: GO 59784
59888: POP
59889: POP
// if enchidnas then
59890: LD_VAR 0 4
59894: IFFALSE 59961
// for i = 1 to enchidnas do
59896: LD_ADDR_VAR 0 11
59900: PUSH
59901: DOUBLE
59902: LD_INT 1
59904: DEC
59905: ST_TO_ADDR
59906: LD_VAR 0 4
59910: PUSH
59911: FOR_TO
59912: IFFALSE 59959
// begin hc_class = 13 ;
59914: LD_ADDR_OWVAR 28
59918: PUSH
59919: LD_INT 13
59921: ST_TO_ADDR
// hc_gallery =  ;
59922: LD_ADDR_OWVAR 33
59926: PUSH
59927: LD_STRING 
59929: ST_TO_ADDR
// animal := CreateHuman ;
59930: LD_ADDR_VAR 0 12
59934: PUSH
59935: CALL_OW 44
59939: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59940: LD_VAR 0 12
59944: PPUSH
59945: LD_VAR 0 8
59949: PPUSH
59950: LD_INT 0
59952: PPUSH
59953: CALL 61675 0 3
// end ;
59957: GO 59911
59959: POP
59960: POP
// if fishes then
59961: LD_VAR 0 7
59965: IFFALSE 60032
// for i = 1 to fishes do
59967: LD_ADDR_VAR 0 11
59971: PUSH
59972: DOUBLE
59973: LD_INT 1
59975: DEC
59976: ST_TO_ADDR
59977: LD_VAR 0 7
59981: PUSH
59982: FOR_TO
59983: IFFALSE 60030
// begin hc_class = 20 ;
59985: LD_ADDR_OWVAR 28
59989: PUSH
59990: LD_INT 20
59992: ST_TO_ADDR
// hc_gallery =  ;
59993: LD_ADDR_OWVAR 33
59997: PUSH
59998: LD_STRING 
60000: ST_TO_ADDR
// animal := CreateHuman ;
60001: LD_ADDR_VAR 0 12
60005: PUSH
60006: CALL_OW 44
60010: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60011: LD_VAR 0 12
60015: PPUSH
60016: LD_VAR 0 9
60020: PPUSH
60021: LD_INT 0
60023: PPUSH
60024: CALL 61675 0 3
// end ;
60028: GO 59982
60030: POP
60031: POP
// end ;
60032: LD_VAR 0 10
60036: RET
// export function WantHeal ( sci , unit ) ; begin
60037: LD_INT 0
60039: PPUSH
// if GetTaskList ( sci ) > 0 then
60040: LD_VAR 0 1
60044: PPUSH
60045: CALL_OW 437
60049: PUSH
60050: LD_INT 0
60052: GREATER
60053: IFFALSE 60125
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60055: LD_VAR 0 1
60059: PPUSH
60060: CALL_OW 437
60064: PUSH
60065: LD_INT 1
60067: ARRAY
60068: PUSH
60069: LD_INT 1
60071: ARRAY
60072: PUSH
60073: LD_STRING l
60075: EQUAL
60076: IFFALSE 60103
60078: PUSH
60079: LD_VAR 0 1
60083: PPUSH
60084: CALL_OW 437
60088: PUSH
60089: LD_INT 1
60091: ARRAY
60092: PUSH
60093: LD_INT 4
60095: ARRAY
60096: PUSH
60097: LD_VAR 0 2
60101: EQUAL
60102: AND
60103: IFFALSE 60115
// result := true else
60105: LD_ADDR_VAR 0 3
60109: PUSH
60110: LD_INT 1
60112: ST_TO_ADDR
60113: GO 60123
// result := false ;
60115: LD_ADDR_VAR 0 3
60119: PUSH
60120: LD_INT 0
60122: ST_TO_ADDR
// end else
60123: GO 60133
// result := false ;
60125: LD_ADDR_VAR 0 3
60129: PUSH
60130: LD_INT 0
60132: ST_TO_ADDR
// end ;
60133: LD_VAR 0 3
60137: RET
// export function HealTarget ( sci ) ; begin
60138: LD_INT 0
60140: PPUSH
// if not sci then
60141: LD_VAR 0 1
60145: NOT
60146: IFFALSE 60150
// exit ;
60148: GO 60215
// result := 0 ;
60150: LD_ADDR_VAR 0 2
60154: PUSH
60155: LD_INT 0
60157: ST_TO_ADDR
// if GetTaskList ( sci ) then
60158: LD_VAR 0 1
60162: PPUSH
60163: CALL_OW 437
60167: IFFALSE 60215
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60169: LD_VAR 0 1
60173: PPUSH
60174: CALL_OW 437
60178: PUSH
60179: LD_INT 1
60181: ARRAY
60182: PUSH
60183: LD_INT 1
60185: ARRAY
60186: PUSH
60187: LD_STRING l
60189: EQUAL
60190: IFFALSE 60215
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60192: LD_ADDR_VAR 0 2
60196: PUSH
60197: LD_VAR 0 1
60201: PPUSH
60202: CALL_OW 437
60206: PUSH
60207: LD_INT 1
60209: ARRAY
60210: PUSH
60211: LD_INT 4
60213: ARRAY
60214: ST_TO_ADDR
// end ;
60215: LD_VAR 0 2
60219: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60220: LD_INT 0
60222: PPUSH
60223: PPUSH
60224: PPUSH
60225: PPUSH
// if not base_units then
60226: LD_VAR 0 1
60230: NOT
60231: IFFALSE 60235
// exit ;
60233: GO 60322
// result := false ;
60235: LD_ADDR_VAR 0 2
60239: PUSH
60240: LD_INT 0
60242: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60243: LD_ADDR_VAR 0 5
60247: PUSH
60248: LD_VAR 0 1
60252: PPUSH
60253: LD_INT 21
60255: PUSH
60256: LD_INT 3
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PPUSH
60263: CALL_OW 72
60267: ST_TO_ADDR
// if not tmp then
60268: LD_VAR 0 5
60272: NOT
60273: IFFALSE 60277
// exit ;
60275: GO 60322
// for i in tmp do
60277: LD_ADDR_VAR 0 3
60281: PUSH
60282: LD_VAR 0 5
60286: PUSH
60287: FOR_IN
60288: IFFALSE 60320
// begin result := EnemyInRange ( i , 22 ) ;
60290: LD_ADDR_VAR 0 2
60294: PUSH
60295: LD_VAR 0 3
60299: PPUSH
60300: LD_INT 22
60302: PPUSH
60303: CALL 57737 0 2
60307: ST_TO_ADDR
// if result then
60308: LD_VAR 0 2
60312: IFFALSE 60318
// exit ;
60314: POP
60315: POP
60316: GO 60322
// end ;
60318: GO 60287
60320: POP
60321: POP
// end ;
60322: LD_VAR 0 2
60326: RET
// export function FilterByTag ( units , tag ) ; begin
60327: LD_INT 0
60329: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60330: LD_ADDR_VAR 0 3
60334: PUSH
60335: LD_VAR 0 1
60339: PPUSH
60340: LD_INT 120
60342: PUSH
60343: LD_VAR 0 2
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PPUSH
60352: CALL_OW 72
60356: ST_TO_ADDR
// end ;
60357: LD_VAR 0 3
60361: RET
// export function IsDriver ( un ) ; begin
60362: LD_INT 0
60364: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60365: LD_ADDR_VAR 0 2
60369: PUSH
60370: LD_VAR 0 1
60374: PUSH
60375: LD_INT 55
60377: PUSH
60378: EMPTY
60379: LIST
60380: PPUSH
60381: CALL_OW 69
60385: IN
60386: ST_TO_ADDR
// end ;
60387: LD_VAR 0 2
60391: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60392: LD_INT 0
60394: PPUSH
60395: PPUSH
// list := [ ] ;
60396: LD_ADDR_VAR 0 5
60400: PUSH
60401: EMPTY
60402: ST_TO_ADDR
// case d of 0 :
60403: LD_VAR 0 3
60407: PUSH
60408: LD_INT 0
60410: DOUBLE
60411: EQUAL
60412: IFTRUE 60416
60414: GO 60549
60416: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60417: LD_ADDR_VAR 0 5
60421: PUSH
60422: LD_VAR 0 1
60426: PUSH
60427: LD_INT 4
60429: MINUS
60430: PUSH
60431: LD_VAR 0 2
60435: PUSH
60436: LD_INT 4
60438: MINUS
60439: PUSH
60440: LD_INT 2
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: LIST
60447: PUSH
60448: LD_VAR 0 1
60452: PUSH
60453: LD_INT 3
60455: MINUS
60456: PUSH
60457: LD_VAR 0 2
60461: PUSH
60462: LD_INT 1
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: LIST
60469: PUSH
60470: LD_VAR 0 1
60474: PUSH
60475: LD_INT 4
60477: PLUS
60478: PUSH
60479: LD_VAR 0 2
60483: PUSH
60484: LD_INT 4
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: LIST
60491: PUSH
60492: LD_VAR 0 1
60496: PUSH
60497: LD_INT 3
60499: PLUS
60500: PUSH
60501: LD_VAR 0 2
60505: PUSH
60506: LD_INT 3
60508: PLUS
60509: PUSH
60510: LD_INT 5
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: LIST
60517: PUSH
60518: LD_VAR 0 1
60522: PUSH
60523: LD_VAR 0 2
60527: PUSH
60528: LD_INT 4
60530: PLUS
60531: PUSH
60532: LD_INT 0
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: LIST
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: ST_TO_ADDR
// end ; 1 :
60547: GO 61247
60549: LD_INT 1
60551: DOUBLE
60552: EQUAL
60553: IFTRUE 60557
60555: GO 60690
60557: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60558: LD_ADDR_VAR 0 5
60562: PUSH
60563: LD_VAR 0 1
60567: PUSH
60568: LD_VAR 0 2
60572: PUSH
60573: LD_INT 4
60575: MINUS
60576: PUSH
60577: LD_INT 3
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: LIST
60584: PUSH
60585: LD_VAR 0 1
60589: PUSH
60590: LD_INT 3
60592: MINUS
60593: PUSH
60594: LD_VAR 0 2
60598: PUSH
60599: LD_INT 3
60601: MINUS
60602: PUSH
60603: LD_INT 2
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: LIST
60610: PUSH
60611: LD_VAR 0 1
60615: PUSH
60616: LD_INT 4
60618: MINUS
60619: PUSH
60620: LD_VAR 0 2
60624: PUSH
60625: LD_INT 1
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: LIST
60632: PUSH
60633: LD_VAR 0 1
60637: PUSH
60638: LD_VAR 0 2
60642: PUSH
60643: LD_INT 3
60645: PLUS
60646: PUSH
60647: LD_INT 0
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: LIST
60654: PUSH
60655: LD_VAR 0 1
60659: PUSH
60660: LD_INT 4
60662: PLUS
60663: PUSH
60664: LD_VAR 0 2
60668: PUSH
60669: LD_INT 4
60671: PLUS
60672: PUSH
60673: LD_INT 5
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: LIST
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: ST_TO_ADDR
// end ; 2 :
60688: GO 61247
60690: LD_INT 2
60692: DOUBLE
60693: EQUAL
60694: IFTRUE 60698
60696: GO 60827
60698: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60699: LD_ADDR_VAR 0 5
60703: PUSH
60704: LD_VAR 0 1
60708: PUSH
60709: LD_VAR 0 2
60713: PUSH
60714: LD_INT 3
60716: MINUS
60717: PUSH
60718: LD_INT 3
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: LIST
60725: PUSH
60726: LD_VAR 0 1
60730: PUSH
60731: LD_INT 4
60733: PLUS
60734: PUSH
60735: LD_VAR 0 2
60739: PUSH
60740: LD_INT 4
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: LIST
60747: PUSH
60748: LD_VAR 0 1
60752: PUSH
60753: LD_VAR 0 2
60757: PUSH
60758: LD_INT 4
60760: PLUS
60761: PUSH
60762: LD_INT 0
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: LIST
60769: PUSH
60770: LD_VAR 0 1
60774: PUSH
60775: LD_INT 3
60777: MINUS
60778: PUSH
60779: LD_VAR 0 2
60783: PUSH
60784: LD_INT 1
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: LIST
60791: PUSH
60792: LD_VAR 0 1
60796: PUSH
60797: LD_INT 4
60799: MINUS
60800: PUSH
60801: LD_VAR 0 2
60805: PUSH
60806: LD_INT 4
60808: MINUS
60809: PUSH
60810: LD_INT 2
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: LIST
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: ST_TO_ADDR
// end ; 3 :
60825: GO 61247
60827: LD_INT 3
60829: DOUBLE
60830: EQUAL
60831: IFTRUE 60835
60833: GO 60968
60835: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60836: LD_ADDR_VAR 0 5
60840: PUSH
60841: LD_VAR 0 1
60845: PUSH
60846: LD_INT 3
60848: PLUS
60849: PUSH
60850: LD_VAR 0 2
60854: PUSH
60855: LD_INT 4
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: LIST
60862: PUSH
60863: LD_VAR 0 1
60867: PUSH
60868: LD_INT 4
60870: PLUS
60871: PUSH
60872: LD_VAR 0 2
60876: PUSH
60877: LD_INT 4
60879: PLUS
60880: PUSH
60881: LD_INT 5
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: LIST
60888: PUSH
60889: LD_VAR 0 1
60893: PUSH
60894: LD_INT 4
60896: MINUS
60897: PUSH
60898: LD_VAR 0 2
60902: PUSH
60903: LD_INT 1
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: LIST
60910: PUSH
60911: LD_VAR 0 1
60915: PUSH
60916: LD_VAR 0 2
60920: PUSH
60921: LD_INT 4
60923: MINUS
60924: PUSH
60925: LD_INT 3
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: LIST
60932: PUSH
60933: LD_VAR 0 1
60937: PUSH
60938: LD_INT 3
60940: MINUS
60941: PUSH
60942: LD_VAR 0 2
60946: PUSH
60947: LD_INT 3
60949: MINUS
60950: PUSH
60951: LD_INT 2
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: LIST
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: ST_TO_ADDR
// end ; 4 :
60966: GO 61247
60968: LD_INT 4
60970: DOUBLE
60971: EQUAL
60972: IFTRUE 60976
60974: GO 61109
60976: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60977: LD_ADDR_VAR 0 5
60981: PUSH
60982: LD_VAR 0 1
60986: PUSH
60987: LD_VAR 0 2
60991: PUSH
60992: LD_INT 4
60994: PLUS
60995: PUSH
60996: LD_INT 0
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: LIST
61003: PUSH
61004: LD_VAR 0 1
61008: PUSH
61009: LD_INT 3
61011: PLUS
61012: PUSH
61013: LD_VAR 0 2
61017: PUSH
61018: LD_INT 3
61020: PLUS
61021: PUSH
61022: LD_INT 5
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: LIST
61029: PUSH
61030: LD_VAR 0 1
61034: PUSH
61035: LD_INT 4
61037: PLUS
61038: PUSH
61039: LD_VAR 0 2
61043: PUSH
61044: LD_INT 4
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: LIST
61051: PUSH
61052: LD_VAR 0 1
61056: PUSH
61057: LD_VAR 0 2
61061: PUSH
61062: LD_INT 3
61064: MINUS
61065: PUSH
61066: LD_INT 3
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: LIST
61073: PUSH
61074: LD_VAR 0 1
61078: PUSH
61079: LD_INT 4
61081: MINUS
61082: PUSH
61083: LD_VAR 0 2
61087: PUSH
61088: LD_INT 4
61090: MINUS
61091: PUSH
61092: LD_INT 2
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: LIST
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: ST_TO_ADDR
// end ; 5 :
61107: GO 61247
61109: LD_INT 5
61111: DOUBLE
61112: EQUAL
61113: IFTRUE 61117
61115: GO 61246
61117: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61118: LD_ADDR_VAR 0 5
61122: PUSH
61123: LD_VAR 0 1
61127: PUSH
61128: LD_INT 4
61130: MINUS
61131: PUSH
61132: LD_VAR 0 2
61136: PUSH
61137: LD_INT 1
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: LIST
61144: PUSH
61145: LD_VAR 0 1
61149: PUSH
61150: LD_VAR 0 2
61154: PUSH
61155: LD_INT 4
61157: MINUS
61158: PUSH
61159: LD_INT 3
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: LIST
61166: PUSH
61167: LD_VAR 0 1
61171: PUSH
61172: LD_INT 4
61174: PLUS
61175: PUSH
61176: LD_VAR 0 2
61180: PUSH
61181: LD_INT 4
61183: PLUS
61184: PUSH
61185: LD_INT 5
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: LIST
61192: PUSH
61193: LD_VAR 0 1
61197: PUSH
61198: LD_INT 3
61200: PLUS
61201: PUSH
61202: LD_VAR 0 2
61206: PUSH
61207: LD_INT 4
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: LIST
61214: PUSH
61215: LD_VAR 0 1
61219: PUSH
61220: LD_VAR 0 2
61224: PUSH
61225: LD_INT 3
61227: PLUS
61228: PUSH
61229: LD_INT 0
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: LIST
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: ST_TO_ADDR
// end ; end ;
61244: GO 61247
61246: POP
// result := list ;
61247: LD_ADDR_VAR 0 4
61251: PUSH
61252: LD_VAR 0 5
61256: ST_TO_ADDR
// end ;
61257: LD_VAR 0 4
61261: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61262: LD_INT 0
61264: PPUSH
61265: PPUSH
61266: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61267: LD_VAR 0 1
61271: NOT
61272: IFTRUE 61300
61274: PUSH
61275: LD_VAR 0 2
61279: PUSH
61280: LD_INT 1
61282: PUSH
61283: LD_INT 2
61285: PUSH
61286: LD_INT 3
61288: PUSH
61289: LD_INT 4
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: IN
61298: NOT
61299: OR
61300: IFFALSE 61304
// exit ;
61302: GO 61387
// tmp := [ ] ;
61304: LD_ADDR_VAR 0 5
61308: PUSH
61309: EMPTY
61310: ST_TO_ADDR
// for i in units do
61311: LD_ADDR_VAR 0 4
61315: PUSH
61316: LD_VAR 0 1
61320: PUSH
61321: FOR_IN
61322: IFFALSE 61356
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
61324: LD_ADDR_VAR 0 5
61328: PUSH
61329: LD_VAR 0 5
61333: PPUSH
61334: LD_VAR 0 4
61338: PPUSH
61339: LD_VAR 0 2
61343: PPUSH
61344: CALL_OW 259
61348: PPUSH
61349: CALL 62782 0 2
61353: ST_TO_ADDR
61354: GO 61321
61356: POP
61357: POP
// if not tmp then
61358: LD_VAR 0 5
61362: NOT
61363: IFFALSE 61367
// exit ;
61365: GO 61387
// result := SortListByListDesc ( units , tmp ) ;
61367: LD_ADDR_VAR 0 3
61371: PUSH
61372: LD_VAR 0 1
61376: PPUSH
61377: LD_VAR 0 5
61381: PPUSH
61382: CALL_OW 77
61386: ST_TO_ADDR
// end ;
61387: LD_VAR 0 3
61391: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61392: LD_INT 0
61394: PPUSH
61395: PPUSH
61396: PPUSH
// result := false ;
61397: LD_ADDR_VAR 0 3
61401: PUSH
61402: LD_INT 0
61404: ST_TO_ADDR
// if not building then
61405: LD_VAR 0 2
61409: NOT
61410: IFFALSE 61414
// exit ;
61412: GO 61558
// x := GetX ( building ) ;
61414: LD_ADDR_VAR 0 4
61418: PUSH
61419: LD_VAR 0 2
61423: PPUSH
61424: CALL_OW 250
61428: ST_TO_ADDR
// y := GetY ( building ) ;
61429: LD_ADDR_VAR 0 5
61433: PUSH
61434: LD_VAR 0 2
61438: PPUSH
61439: CALL_OW 251
61443: ST_TO_ADDR
// if not x or not y then
61444: LD_VAR 0 4
61448: NOT
61449: IFTRUE 61458
61451: PUSH
61452: LD_VAR 0 5
61456: NOT
61457: OR
61458: IFFALSE 61462
// exit ;
61460: GO 61558
// if GetTaskList ( unit ) then
61462: LD_VAR 0 1
61466: PPUSH
61467: CALL_OW 437
61471: IFFALSE 61558
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61473: LD_STRING e
61475: PUSH
61476: LD_VAR 0 1
61480: PPUSH
61481: CALL_OW 437
61485: PUSH
61486: LD_INT 1
61488: ARRAY
61489: PUSH
61490: LD_INT 1
61492: ARRAY
61493: EQUAL
61494: IFFALSE 61521
61496: PUSH
61497: LD_VAR 0 4
61501: PUSH
61502: LD_VAR 0 1
61506: PPUSH
61507: CALL_OW 437
61511: PUSH
61512: LD_INT 1
61514: ARRAY
61515: PUSH
61516: LD_INT 2
61518: ARRAY
61519: EQUAL
61520: AND
61521: IFFALSE 61548
61523: PUSH
61524: LD_VAR 0 5
61528: PUSH
61529: LD_VAR 0 1
61533: PPUSH
61534: CALL_OW 437
61538: PUSH
61539: LD_INT 1
61541: ARRAY
61542: PUSH
61543: LD_INT 3
61545: ARRAY
61546: EQUAL
61547: AND
61548: IFFALSE 61558
// result := true end ;
61550: LD_ADDR_VAR 0 3
61554: PUSH
61555: LD_INT 1
61557: ST_TO_ADDR
// end ;
61558: LD_VAR 0 3
61562: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61563: LD_INT 0
61565: PPUSH
// result := false ;
61566: LD_ADDR_VAR 0 4
61570: PUSH
61571: LD_INT 0
61573: ST_TO_ADDR
// if GetTaskList ( unit ) then
61574: LD_VAR 0 1
61578: PPUSH
61579: CALL_OW 437
61583: IFFALSE 61670
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61585: LD_STRING M
61587: PUSH
61588: LD_VAR 0 1
61592: PPUSH
61593: CALL_OW 437
61597: PUSH
61598: LD_INT 1
61600: ARRAY
61601: PUSH
61602: LD_INT 1
61604: ARRAY
61605: EQUAL
61606: IFFALSE 61633
61608: PUSH
61609: LD_VAR 0 2
61613: PUSH
61614: LD_VAR 0 1
61618: PPUSH
61619: CALL_OW 437
61623: PUSH
61624: LD_INT 1
61626: ARRAY
61627: PUSH
61628: LD_INT 2
61630: ARRAY
61631: EQUAL
61632: AND
61633: IFFALSE 61660
61635: PUSH
61636: LD_VAR 0 3
61640: PUSH
61641: LD_VAR 0 1
61645: PPUSH
61646: CALL_OW 437
61650: PUSH
61651: LD_INT 1
61653: ARRAY
61654: PUSH
61655: LD_INT 3
61657: ARRAY
61658: EQUAL
61659: AND
61660: IFFALSE 61670
// result := true ;
61662: LD_ADDR_VAR 0 4
61666: PUSH
61667: LD_INT 1
61669: ST_TO_ADDR
// end ; end ;
61670: LD_VAR 0 4
61674: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61675: LD_INT 0
61677: PPUSH
61678: PPUSH
61679: PPUSH
61680: PPUSH
// if not unit or not area then
61681: LD_VAR 0 1
61685: NOT
61686: IFTRUE 61695
61688: PUSH
61689: LD_VAR 0 2
61693: NOT
61694: OR
61695: IFFALSE 61699
// exit ;
61697: GO 61875
// tmp := AreaToList ( area , i ) ;
61699: LD_ADDR_VAR 0 6
61703: PUSH
61704: LD_VAR 0 2
61708: PPUSH
61709: LD_VAR 0 5
61713: PPUSH
61714: CALL_OW 517
61718: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61719: LD_ADDR_VAR 0 5
61723: PUSH
61724: DOUBLE
61725: LD_INT 1
61727: DEC
61728: ST_TO_ADDR
61729: LD_VAR 0 6
61733: PUSH
61734: LD_INT 1
61736: ARRAY
61737: PUSH
61738: FOR_TO
61739: IFFALSE 61873
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61741: LD_ADDR_VAR 0 7
61745: PUSH
61746: LD_VAR 0 6
61750: PUSH
61751: LD_INT 1
61753: ARRAY
61754: PUSH
61755: LD_VAR 0 5
61759: ARRAY
61760: PUSH
61761: LD_VAR 0 6
61765: PUSH
61766: LD_INT 2
61768: ARRAY
61769: PUSH
61770: LD_VAR 0 5
61774: ARRAY
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
61780: LD_INT 92
61782: PUSH
61783: LD_VAR 0 7
61787: PUSH
61788: LD_INT 1
61790: ARRAY
61791: PUSH
61792: LD_VAR 0 7
61796: PUSH
61797: LD_INT 2
61799: ARRAY
61800: PUSH
61801: LD_INT 2
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: PPUSH
61810: CALL_OW 69
61814: PUSH
61815: LD_INT 0
61817: EQUAL
61818: IFFALSE 61871
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61820: LD_VAR 0 1
61824: PPUSH
61825: LD_VAR 0 7
61829: PUSH
61830: LD_INT 1
61832: ARRAY
61833: PPUSH
61834: LD_VAR 0 7
61838: PUSH
61839: LD_INT 2
61841: ARRAY
61842: PPUSH
61843: LD_VAR 0 3
61847: PPUSH
61848: CALL_OW 48
// result := IsPlaced ( unit ) ;
61852: LD_ADDR_VAR 0 4
61856: PUSH
61857: LD_VAR 0 1
61861: PPUSH
61862: CALL_OW 305
61866: ST_TO_ADDR
// exit ;
61867: POP
61868: POP
61869: GO 61875
// end ; end ;
61871: GO 61738
61873: POP
61874: POP
// end ;
61875: LD_VAR 0 4
61879: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61880: LD_INT 0
61882: PPUSH
61883: PPUSH
61884: PPUSH
// if not side or side > 8 then
61885: LD_VAR 0 1
61889: NOT
61890: IFTRUE 61902
61892: PUSH
61893: LD_VAR 0 1
61897: PUSH
61898: LD_INT 8
61900: GREATER
61901: OR
61902: IFFALSE 61906
// exit ;
61904: GO 62093
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61906: LD_ADDR_VAR 0 4
61910: PUSH
61911: LD_INT 22
61913: PUSH
61914: LD_VAR 0 1
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 21
61925: PUSH
61926: LD_INT 3
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PPUSH
61937: CALL_OW 69
61941: ST_TO_ADDR
// if not tmp then
61942: LD_VAR 0 4
61946: NOT
61947: IFFALSE 61951
// exit ;
61949: GO 62093
// enable_addtolog := true ;
61951: LD_ADDR_OWVAR 81
61955: PUSH
61956: LD_INT 1
61958: ST_TO_ADDR
// AddToLog ( [ ) ;
61959: LD_STRING [
61961: PPUSH
61962: CALL_OW 561
// for i in tmp do
61966: LD_ADDR_VAR 0 3
61970: PUSH
61971: LD_VAR 0 4
61975: PUSH
61976: FOR_IN
61977: IFFALSE 62084
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61979: LD_STRING [
61981: PUSH
61982: LD_VAR 0 3
61986: PPUSH
61987: CALL_OW 266
61991: STR
61992: PUSH
61993: LD_STRING , 
61995: STR
61996: PUSH
61997: LD_VAR 0 3
62001: PPUSH
62002: CALL_OW 250
62006: STR
62007: PUSH
62008: LD_STRING , 
62010: STR
62011: PUSH
62012: LD_VAR 0 3
62016: PPUSH
62017: CALL_OW 251
62021: STR
62022: PUSH
62023: LD_STRING , 
62025: STR
62026: PUSH
62027: LD_VAR 0 3
62031: PPUSH
62032: CALL_OW 254
62036: STR
62037: PUSH
62038: LD_STRING , 
62040: STR
62041: PUSH
62042: LD_VAR 0 3
62046: PPUSH
62047: LD_INT 1
62049: PPUSH
62050: CALL_OW 268
62054: STR
62055: PUSH
62056: LD_STRING , 
62058: STR
62059: PUSH
62060: LD_VAR 0 3
62064: PPUSH
62065: LD_INT 2
62067: PPUSH
62068: CALL_OW 268
62072: STR
62073: PUSH
62074: LD_STRING ],
62076: STR
62077: PPUSH
62078: CALL_OW 561
// end ;
62082: GO 61976
62084: POP
62085: POP
// AddToLog ( ]; ) ;
62086: LD_STRING ];
62088: PPUSH
62089: CALL_OW 561
// end ;
62093: LD_VAR 0 2
62097: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62098: LD_INT 0
62100: PPUSH
62101: PPUSH
62102: PPUSH
62103: PPUSH
62104: PPUSH
// if not area or not rate or not max then
62105: LD_VAR 0 1
62109: NOT
62110: IFTRUE 62119
62112: PUSH
62113: LD_VAR 0 2
62117: NOT
62118: OR
62119: IFTRUE 62128
62121: PUSH
62122: LD_VAR 0 4
62126: NOT
62127: OR
62128: IFFALSE 62132
// exit ;
62130: GO 62321
// while 1 do
62132: LD_INT 1
62134: IFFALSE 62321
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62136: LD_ADDR_VAR 0 9
62140: PUSH
62141: LD_VAR 0 1
62145: PPUSH
62146: LD_INT 1
62148: PPUSH
62149: CALL_OW 287
62153: PUSH
62154: LD_INT 10
62156: MUL
62157: ST_TO_ADDR
// r := rate / 10 ;
62158: LD_ADDR_VAR 0 7
62162: PUSH
62163: LD_VAR 0 2
62167: PUSH
62168: LD_INT 10
62170: DIVREAL
62171: ST_TO_ADDR
// time := 1 1$00 ;
62172: LD_ADDR_VAR 0 8
62176: PUSH
62177: LD_INT 2100
62179: ST_TO_ADDR
// if amount < min then
62180: LD_VAR 0 9
62184: PUSH
62185: LD_VAR 0 3
62189: LESS
62190: IFFALSE 62208
// r := r * 2 else
62192: LD_ADDR_VAR 0 7
62196: PUSH
62197: LD_VAR 0 7
62201: PUSH
62202: LD_INT 2
62204: MUL
62205: ST_TO_ADDR
62206: GO 62234
// if amount > max then
62208: LD_VAR 0 9
62212: PUSH
62213: LD_VAR 0 4
62217: GREATER
62218: IFFALSE 62234
// r := r / 2 ;
62220: LD_ADDR_VAR 0 7
62224: PUSH
62225: LD_VAR 0 7
62229: PUSH
62230: LD_INT 2
62232: DIVREAL
62233: ST_TO_ADDR
// time := time / r ;
62234: LD_ADDR_VAR 0 8
62238: PUSH
62239: LD_VAR 0 8
62243: PUSH
62244: LD_VAR 0 7
62248: DIVREAL
62249: ST_TO_ADDR
// if time < 0 then
62250: LD_VAR 0 8
62254: PUSH
62255: LD_INT 0
62257: LESS
62258: IFFALSE 62275
// time := time * - 1 ;
62260: LD_ADDR_VAR 0 8
62264: PUSH
62265: LD_VAR 0 8
62269: PUSH
62270: LD_INT 1
62272: NEG
62273: MUL
62274: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62275: LD_VAR 0 8
62279: PUSH
62280: LD_INT 35
62282: PPUSH
62283: LD_INT 875
62285: PPUSH
62286: CALL_OW 12
62290: PLUS
62291: PPUSH
62292: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62296: LD_INT 1
62298: PPUSH
62299: LD_INT 5
62301: PPUSH
62302: CALL_OW 12
62306: PPUSH
62307: LD_VAR 0 1
62311: PPUSH
62312: LD_INT 1
62314: PPUSH
62315: CALL_OW 55
// end ;
62319: GO 62132
// end ;
62321: LD_VAR 0 5
62325: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62326: LD_INT 0
62328: PPUSH
62329: PPUSH
62330: PPUSH
62331: PPUSH
62332: PPUSH
62333: PPUSH
62334: PPUSH
62335: PPUSH
// if not turrets or not factories then
62336: LD_VAR 0 1
62340: NOT
62341: IFTRUE 62350
62343: PUSH
62344: LD_VAR 0 2
62348: NOT
62349: OR
62350: IFFALSE 62354
// exit ;
62352: GO 62661
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62354: LD_ADDR_VAR 0 10
62358: PUSH
62359: LD_INT 5
62361: PUSH
62362: LD_INT 6
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 2
62371: PUSH
62372: LD_INT 4
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 3
62381: PUSH
62382: LD_INT 5
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 24
62396: PUSH
62397: LD_INT 25
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 23
62406: PUSH
62407: LD_INT 27
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 42
62420: PUSH
62421: LD_INT 43
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 44
62430: PUSH
62431: LD_INT 46
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 45
62440: PUSH
62441: LD_INT 47
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: LIST
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: LIST
62457: ST_TO_ADDR
// result := [ ] ;
62458: LD_ADDR_VAR 0 3
62462: PUSH
62463: EMPTY
62464: ST_TO_ADDR
// for i in turrets do
62465: LD_ADDR_VAR 0 4
62469: PUSH
62470: LD_VAR 0 1
62474: PUSH
62475: FOR_IN
62476: IFFALSE 62659
// begin nat := GetNation ( i ) ;
62478: LD_ADDR_VAR 0 7
62482: PUSH
62483: LD_VAR 0 4
62487: PPUSH
62488: CALL_OW 248
62492: ST_TO_ADDR
// weapon := 0 ;
62493: LD_ADDR_VAR 0 8
62497: PUSH
62498: LD_INT 0
62500: ST_TO_ADDR
// if not nat then
62501: LD_VAR 0 7
62505: NOT
62506: IFFALSE 62510
// continue ;
62508: GO 62475
// for j in list [ nat ] do
62510: LD_ADDR_VAR 0 5
62514: PUSH
62515: LD_VAR 0 10
62519: PUSH
62520: LD_VAR 0 7
62524: ARRAY
62525: PUSH
62526: FOR_IN
62527: IFFALSE 62568
// if GetBWeapon ( i ) = j [ 1 ] then
62529: LD_VAR 0 4
62533: PPUSH
62534: CALL_OW 269
62538: PUSH
62539: LD_VAR 0 5
62543: PUSH
62544: LD_INT 1
62546: ARRAY
62547: EQUAL
62548: IFFALSE 62566
// begin weapon := j [ 2 ] ;
62550: LD_ADDR_VAR 0 8
62554: PUSH
62555: LD_VAR 0 5
62559: PUSH
62560: LD_INT 2
62562: ARRAY
62563: ST_TO_ADDR
// break ;
62564: GO 62568
// end ;
62566: GO 62526
62568: POP
62569: POP
// if not weapon then
62570: LD_VAR 0 8
62574: NOT
62575: IFFALSE 62579
// continue ;
62577: GO 62475
// for k in factories do
62579: LD_ADDR_VAR 0 6
62583: PUSH
62584: LD_VAR 0 2
62588: PUSH
62589: FOR_IN
62590: IFFALSE 62655
// begin weapons := AvailableWeaponList ( k ) ;
62592: LD_ADDR_VAR 0 9
62596: PUSH
62597: LD_VAR 0 6
62601: PPUSH
62602: CALL_OW 478
62606: ST_TO_ADDR
// if not weapons then
62607: LD_VAR 0 9
62611: NOT
62612: IFFALSE 62616
// continue ;
62614: GO 62589
// if weapon in weapons then
62616: LD_VAR 0 8
62620: PUSH
62621: LD_VAR 0 9
62625: IN
62626: IFFALSE 62653
// begin result := [ i , weapon ] ;
62628: LD_ADDR_VAR 0 3
62632: PUSH
62633: LD_VAR 0 4
62637: PUSH
62638: LD_VAR 0 8
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: ST_TO_ADDR
// exit ;
62647: POP
62648: POP
62649: POP
62650: POP
62651: GO 62661
// end ; end ;
62653: GO 62589
62655: POP
62656: POP
// end ;
62657: GO 62475
62659: POP
62660: POP
// end ;
62661: LD_VAR 0 3
62665: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62666: LD_INT 0
62668: PPUSH
// if not side or side > 8 then
62669: LD_VAR 0 3
62673: NOT
62674: IFTRUE 62686
62676: PUSH
62677: LD_VAR 0 3
62681: PUSH
62682: LD_INT 8
62684: GREATER
62685: OR
62686: IFFALSE 62690
// exit ;
62688: GO 62749
// if not range then
62690: LD_VAR 0 4
62694: NOT
62695: IFFALSE 62706
// range := - 12 ;
62697: LD_ADDR_VAR 0 4
62701: PUSH
62702: LD_INT 12
62704: NEG
62705: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62706: LD_VAR 0 1
62710: PPUSH
62711: LD_VAR 0 2
62715: PPUSH
62716: LD_VAR 0 3
62720: PPUSH
62721: LD_VAR 0 4
62725: PPUSH
62726: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62730: LD_VAR 0 1
62734: PPUSH
62735: LD_VAR 0 2
62739: PPUSH
62740: LD_VAR 0 3
62744: PPUSH
62745: CALL_OW 331
// end ;
62749: LD_VAR 0 5
62753: RET
// export function Video ( mode ) ; begin
62754: LD_INT 0
62756: PPUSH
// ingame_video = mode ;
62757: LD_ADDR_OWVAR 52
62761: PUSH
62762: LD_VAR 0 1
62766: ST_TO_ADDR
// interface_hidden = mode ;
62767: LD_ADDR_OWVAR 54
62771: PUSH
62772: LD_VAR 0 1
62776: ST_TO_ADDR
// end ;
62777: LD_VAR 0 2
62781: RET
// export function Join ( array , element ) ; begin
62782: LD_INT 0
62784: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62785: LD_ADDR_VAR 0 3
62789: PUSH
62790: LD_VAR 0 1
62794: PPUSH
62795: LD_VAR 0 1
62799: PUSH
62800: LD_INT 1
62802: PLUS
62803: PPUSH
62804: LD_VAR 0 2
62808: PPUSH
62809: CALL_OW 1
62813: ST_TO_ADDR
// end ;
62814: LD_VAR 0 3
62818: RET
// export function JoinUnion ( array , element ) ; begin
62819: LD_INT 0
62821: PPUSH
// result := array union element ;
62822: LD_ADDR_VAR 0 3
62826: PUSH
62827: LD_VAR 0 1
62831: PUSH
62832: LD_VAR 0 2
62836: UNION
62837: ST_TO_ADDR
// end ;
62838: LD_VAR 0 3
62842: RET
// export function GetBehemoths ( side ) ; begin
62843: LD_INT 0
62845: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62846: LD_ADDR_VAR 0 2
62850: PUSH
62851: LD_INT 22
62853: PUSH
62854: LD_VAR 0 1
62858: PUSH
62859: EMPTY
62860: LIST
62861: LIST
62862: PUSH
62863: LD_INT 31
62865: PUSH
62866: LD_INT 25
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PPUSH
62877: CALL_OW 69
62881: ST_TO_ADDR
// end ;
62882: LD_VAR 0 2
62886: RET
// export function Shuffle ( array ) ; var i , index ; begin
62887: LD_INT 0
62889: PPUSH
62890: PPUSH
62891: PPUSH
// result := [ ] ;
62892: LD_ADDR_VAR 0 2
62896: PUSH
62897: EMPTY
62898: ST_TO_ADDR
// if not array then
62899: LD_VAR 0 1
62903: NOT
62904: IFFALSE 62908
// exit ;
62906: GO 63007
// Randomize ;
62908: CALL_OW 10
// for i = array downto 1 do
62912: LD_ADDR_VAR 0 3
62916: PUSH
62917: DOUBLE
62918: LD_VAR 0 1
62922: INC
62923: ST_TO_ADDR
62924: LD_INT 1
62926: PUSH
62927: FOR_DOWNTO
62928: IFFALSE 63005
// begin index := rand ( 1 , array ) ;
62930: LD_ADDR_VAR 0 4
62934: PUSH
62935: LD_INT 1
62937: PPUSH
62938: LD_VAR 0 1
62942: PPUSH
62943: CALL_OW 12
62947: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62948: LD_ADDR_VAR 0 2
62952: PUSH
62953: LD_VAR 0 2
62957: PPUSH
62958: LD_VAR 0 2
62962: PUSH
62963: LD_INT 1
62965: PLUS
62966: PPUSH
62967: LD_VAR 0 1
62971: PUSH
62972: LD_VAR 0 4
62976: ARRAY
62977: PPUSH
62978: CALL_OW 2
62982: ST_TO_ADDR
// array := Delete ( array , index ) ;
62983: LD_ADDR_VAR 0 1
62987: PUSH
62988: LD_VAR 0 1
62992: PPUSH
62993: LD_VAR 0 4
62997: PPUSH
62998: CALL_OW 3
63002: ST_TO_ADDR
// end ;
63003: GO 62927
63005: POP
63006: POP
// end ;
63007: LD_VAR 0 2
63011: RET
// export function GetBaseMaterials ( base ) ; begin
63012: LD_INT 0
63014: PPUSH
// result := [ 0 , 0 , 0 ] ;
63015: LD_ADDR_VAR 0 2
63019: PUSH
63020: LD_INT 0
63022: PUSH
63023: LD_INT 0
63025: PUSH
63026: LD_INT 0
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: LIST
63033: ST_TO_ADDR
// if not base then
63034: LD_VAR 0 1
63038: NOT
63039: IFFALSE 63043
// exit ;
63041: GO 63092
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63043: LD_ADDR_VAR 0 2
63047: PUSH
63048: LD_VAR 0 1
63052: PPUSH
63053: LD_INT 1
63055: PPUSH
63056: CALL_OW 275
63060: PUSH
63061: LD_VAR 0 1
63065: PPUSH
63066: LD_INT 2
63068: PPUSH
63069: CALL_OW 275
63073: PUSH
63074: LD_VAR 0 1
63078: PPUSH
63079: LD_INT 3
63081: PPUSH
63082: CALL_OW 275
63086: PUSH
63087: EMPTY
63088: LIST
63089: LIST
63090: LIST
63091: ST_TO_ADDR
// end ;
63092: LD_VAR 0 2
63096: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63097: LD_INT 0
63099: PPUSH
63100: PPUSH
// result := array ;
63101: LD_ADDR_VAR 0 3
63105: PUSH
63106: LD_VAR 0 1
63110: ST_TO_ADDR
// if size >= result then
63111: LD_VAR 0 2
63115: PUSH
63116: LD_VAR 0 3
63120: GREATEREQUAL
63121: IFFALSE 63125
// exit ;
63123: GO 63175
// if size then
63125: LD_VAR 0 2
63129: IFFALSE 63175
// for i := array downto size do
63131: LD_ADDR_VAR 0 4
63135: PUSH
63136: DOUBLE
63137: LD_VAR 0 1
63141: INC
63142: ST_TO_ADDR
63143: LD_VAR 0 2
63147: PUSH
63148: FOR_DOWNTO
63149: IFFALSE 63173
// result := Delete ( result , result ) ;
63151: LD_ADDR_VAR 0 3
63155: PUSH
63156: LD_VAR 0 3
63160: PPUSH
63161: LD_VAR 0 3
63165: PPUSH
63166: CALL_OW 3
63170: ST_TO_ADDR
63171: GO 63148
63173: POP
63174: POP
// end ;
63175: LD_VAR 0 3
63179: RET
// export function ComExit ( unit ) ; var tmp ; begin
63180: LD_INT 0
63182: PPUSH
63183: PPUSH
// if not IsInUnit ( unit ) then
63184: LD_VAR 0 1
63188: PPUSH
63189: CALL_OW 310
63193: NOT
63194: IFFALSE 63198
// exit ;
63196: GO 63258
// tmp := IsInUnit ( unit ) ;
63198: LD_ADDR_VAR 0 3
63202: PUSH
63203: LD_VAR 0 1
63207: PPUSH
63208: CALL_OW 310
63212: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63213: LD_VAR 0 3
63217: PPUSH
63218: CALL_OW 247
63222: PUSH
63223: LD_INT 2
63225: EQUAL
63226: IFFALSE 63239
// ComExitVehicle ( unit ) else
63228: LD_VAR 0 1
63232: PPUSH
63233: CALL_OW 121
63237: GO 63248
// ComExitBuilding ( unit ) ;
63239: LD_VAR 0 1
63243: PPUSH
63244: CALL_OW 122
// result := tmp ;
63248: LD_ADDR_VAR 0 2
63252: PUSH
63253: LD_VAR 0 3
63257: ST_TO_ADDR
// end ;
63258: LD_VAR 0 2
63262: RET
// export function ComExitAll ( units ) ; var i ; begin
63263: LD_INT 0
63265: PPUSH
63266: PPUSH
// if not units then
63267: LD_VAR 0 1
63271: NOT
63272: IFFALSE 63276
// exit ;
63274: GO 63302
// for i in units do
63276: LD_ADDR_VAR 0 3
63280: PUSH
63281: LD_VAR 0 1
63285: PUSH
63286: FOR_IN
63287: IFFALSE 63300
// ComExit ( i ) ;
63289: LD_VAR 0 3
63293: PPUSH
63294: CALL 63180 0 1
63298: GO 63286
63300: POP
63301: POP
// end ;
63302: LD_VAR 0 2
63306: RET
// export function ResetHc ; begin
63307: LD_INT 0
63309: PPUSH
// InitHc ;
63310: CALL_OW 19
// hc_importance := 0 ;
63314: LD_ADDR_OWVAR 32
63318: PUSH
63319: LD_INT 0
63321: ST_TO_ADDR
// end ;
63322: LD_VAR 0 1
63326: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63327: LD_INT 0
63329: PPUSH
63330: PPUSH
63331: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63332: LD_ADDR_VAR 0 6
63336: PUSH
63337: LD_VAR 0 1
63341: PUSH
63342: LD_VAR 0 3
63346: PLUS
63347: PUSH
63348: LD_INT 2
63350: DIV
63351: ST_TO_ADDR
// if _x < 0 then
63352: LD_VAR 0 6
63356: PUSH
63357: LD_INT 0
63359: LESS
63360: IFFALSE 63377
// _x := _x * - 1 ;
63362: LD_ADDR_VAR 0 6
63366: PUSH
63367: LD_VAR 0 6
63371: PUSH
63372: LD_INT 1
63374: NEG
63375: MUL
63376: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63377: LD_ADDR_VAR 0 7
63381: PUSH
63382: LD_VAR 0 2
63386: PUSH
63387: LD_VAR 0 4
63391: PLUS
63392: PUSH
63393: LD_INT 2
63395: DIV
63396: ST_TO_ADDR
// if _y < 0 then
63397: LD_VAR 0 7
63401: PUSH
63402: LD_INT 0
63404: LESS
63405: IFFALSE 63422
// _y := _y * - 1 ;
63407: LD_ADDR_VAR 0 7
63411: PUSH
63412: LD_VAR 0 7
63416: PUSH
63417: LD_INT 1
63419: NEG
63420: MUL
63421: ST_TO_ADDR
// result := [ _x , _y ] ;
63422: LD_ADDR_VAR 0 5
63426: PUSH
63427: LD_VAR 0 6
63431: PUSH
63432: LD_VAR 0 7
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: ST_TO_ADDR
// end ;
63441: LD_VAR 0 5
63445: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63446: LD_INT 0
63448: PPUSH
63449: PPUSH
63450: PPUSH
63451: PPUSH
// task := GetTaskList ( unit ) ;
63452: LD_ADDR_VAR 0 7
63456: PUSH
63457: LD_VAR 0 1
63461: PPUSH
63462: CALL_OW 437
63466: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63467: LD_VAR 0 7
63471: NOT
63472: IFFALSE 63491
63474: PUSH
63475: LD_VAR 0 1
63479: PPUSH
63480: LD_VAR 0 2
63484: PPUSH
63485: CALL_OW 308
63489: NOT
63490: AND
63491: IFFALSE 63495
// exit ;
63493: GO 63613
// if IsInArea ( unit , area ) then
63495: LD_VAR 0 1
63499: PPUSH
63500: LD_VAR 0 2
63504: PPUSH
63505: CALL_OW 308
63509: IFFALSE 63527
// begin ComMoveToArea ( unit , goAway ) ;
63511: LD_VAR 0 1
63515: PPUSH
63516: LD_VAR 0 3
63520: PPUSH
63521: CALL_OW 113
// exit ;
63525: GO 63613
// end ; if task [ 1 ] [ 1 ] <> M then
63527: LD_VAR 0 7
63531: PUSH
63532: LD_INT 1
63534: ARRAY
63535: PUSH
63536: LD_INT 1
63538: ARRAY
63539: PUSH
63540: LD_STRING M
63542: NONEQUAL
63543: IFFALSE 63547
// exit ;
63545: GO 63613
// x := task [ 1 ] [ 2 ] ;
63547: LD_ADDR_VAR 0 5
63551: PUSH
63552: LD_VAR 0 7
63556: PUSH
63557: LD_INT 1
63559: ARRAY
63560: PUSH
63561: LD_INT 2
63563: ARRAY
63564: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63565: LD_ADDR_VAR 0 6
63569: PUSH
63570: LD_VAR 0 7
63574: PUSH
63575: LD_INT 1
63577: ARRAY
63578: PUSH
63579: LD_INT 3
63581: ARRAY
63582: ST_TO_ADDR
// if InArea ( x , y , area ) then
63583: LD_VAR 0 5
63587: PPUSH
63588: LD_VAR 0 6
63592: PPUSH
63593: LD_VAR 0 2
63597: PPUSH
63598: CALL_OW 309
63602: IFFALSE 63613
// ComStop ( unit ) ;
63604: LD_VAR 0 1
63608: PPUSH
63609: CALL_OW 141
// end ;
63613: LD_VAR 0 4
63617: RET
// export function Abs ( value ) ; begin
63618: LD_INT 0
63620: PPUSH
// result := value ;
63621: LD_ADDR_VAR 0 2
63625: PUSH
63626: LD_VAR 0 1
63630: ST_TO_ADDR
// if value < 0 then
63631: LD_VAR 0 1
63635: PUSH
63636: LD_INT 0
63638: LESS
63639: IFFALSE 63656
// result := value * - 1 ;
63641: LD_ADDR_VAR 0 2
63645: PUSH
63646: LD_VAR 0 1
63650: PUSH
63651: LD_INT 1
63653: NEG
63654: MUL
63655: ST_TO_ADDR
// end ;
63656: LD_VAR 0 2
63660: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63661: LD_INT 0
63663: PPUSH
63664: PPUSH
63665: PPUSH
63666: PPUSH
63667: PPUSH
63668: PPUSH
63669: PPUSH
63670: PPUSH
// if not unit or not building then
63671: LD_VAR 0 1
63675: NOT
63676: IFTRUE 63685
63678: PUSH
63679: LD_VAR 0 2
63683: NOT
63684: OR
63685: IFFALSE 63689
// exit ;
63687: GO 63917
// x := GetX ( building ) ;
63689: LD_ADDR_VAR 0 4
63693: PUSH
63694: LD_VAR 0 2
63698: PPUSH
63699: CALL_OW 250
63703: ST_TO_ADDR
// y := GetY ( building ) ;
63704: LD_ADDR_VAR 0 6
63708: PUSH
63709: LD_VAR 0 2
63713: PPUSH
63714: CALL_OW 251
63718: ST_TO_ADDR
// d := GetDir ( building ) ;
63719: LD_ADDR_VAR 0 8
63723: PUSH
63724: LD_VAR 0 2
63728: PPUSH
63729: CALL_OW 254
63733: ST_TO_ADDR
// r := 4 ;
63734: LD_ADDR_VAR 0 9
63738: PUSH
63739: LD_INT 4
63741: ST_TO_ADDR
// for i := 1 to 5 do
63742: LD_ADDR_VAR 0 10
63746: PUSH
63747: DOUBLE
63748: LD_INT 1
63750: DEC
63751: ST_TO_ADDR
63752: LD_INT 5
63754: PUSH
63755: FOR_TO
63756: IFFALSE 63915
// begin _x := ShiftX ( x , d , r + i ) ;
63758: LD_ADDR_VAR 0 5
63762: PUSH
63763: LD_VAR 0 4
63767: PPUSH
63768: LD_VAR 0 8
63772: PPUSH
63773: LD_VAR 0 9
63777: PUSH
63778: LD_VAR 0 10
63782: PLUS
63783: PPUSH
63784: CALL_OW 272
63788: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63789: LD_ADDR_VAR 0 7
63793: PUSH
63794: LD_VAR 0 6
63798: PPUSH
63799: LD_VAR 0 8
63803: PPUSH
63804: LD_VAR 0 9
63808: PUSH
63809: LD_VAR 0 10
63813: PLUS
63814: PPUSH
63815: CALL_OW 273
63819: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63820: LD_VAR 0 5
63824: PPUSH
63825: LD_VAR 0 7
63829: PPUSH
63830: CALL_OW 488
63834: IFFALSE 63869
63836: PUSH
63837: LD_VAR 0 5
63841: PPUSH
63842: LD_VAR 0 7
63846: PPUSH
63847: CALL_OW 428
63851: PPUSH
63852: CALL_OW 247
63856: PUSH
63857: LD_INT 3
63859: PUSH
63860: LD_INT 2
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: IN
63867: NOT
63868: AND
63869: IFFALSE 63913
// begin ComMoveXY ( unit , _x , _y ) ;
63871: LD_VAR 0 1
63875: PPUSH
63876: LD_VAR 0 5
63880: PPUSH
63881: LD_VAR 0 7
63885: PPUSH
63886: CALL_OW 111
// result := [ _x , _y ] ;
63890: LD_ADDR_VAR 0 3
63894: PUSH
63895: LD_VAR 0 5
63899: PUSH
63900: LD_VAR 0 7
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: ST_TO_ADDR
// exit ;
63909: POP
63910: POP
63911: GO 63917
// end ; end ;
63913: GO 63755
63915: POP
63916: POP
// end ;
63917: LD_VAR 0 3
63921: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63922: LD_INT 0
63924: PPUSH
63925: PPUSH
63926: PPUSH
// result := 0 ;
63927: LD_ADDR_VAR 0 3
63931: PUSH
63932: LD_INT 0
63934: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63935: LD_VAR 0 1
63939: PUSH
63940: LD_INT 0
63942: LESS
63943: IFTRUE 63955
63945: PUSH
63946: LD_VAR 0 1
63950: PUSH
63951: LD_INT 8
63953: GREATER
63954: OR
63955: IFTRUE 63967
63957: PUSH
63958: LD_VAR 0 2
63962: PUSH
63963: LD_INT 0
63965: LESS
63966: OR
63967: IFTRUE 63979
63969: PUSH
63970: LD_VAR 0 2
63974: PUSH
63975: LD_INT 8
63977: GREATER
63978: OR
63979: IFFALSE 63983
// exit ;
63981: GO 64058
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63983: LD_ADDR_VAR 0 4
63987: PUSH
63988: LD_INT 22
63990: PUSH
63991: LD_VAR 0 2
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: PPUSH
64000: CALL_OW 69
64004: PUSH
64005: FOR_IN
64006: IFFALSE 64056
// begin un := UnitShoot ( i ) ;
64008: LD_ADDR_VAR 0 5
64012: PUSH
64013: LD_VAR 0 4
64017: PPUSH
64018: CALL_OW 504
64022: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64023: LD_VAR 0 5
64027: PPUSH
64028: CALL_OW 255
64032: PUSH
64033: LD_VAR 0 1
64037: EQUAL
64038: IFFALSE 64054
// begin result := un ;
64040: LD_ADDR_VAR 0 3
64044: PUSH
64045: LD_VAR 0 5
64049: ST_TO_ADDR
// exit ;
64050: POP
64051: POP
64052: GO 64058
// end ; end ;
64054: GO 64005
64056: POP
64057: POP
// end ;
64058: LD_VAR 0 3
64062: RET
// export function GetCargoBay ( units ) ; begin
64063: LD_INT 0
64065: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64066: LD_ADDR_VAR 0 2
64070: PUSH
64071: LD_VAR 0 1
64075: PPUSH
64076: LD_INT 2
64078: PUSH
64079: LD_INT 34
64081: PUSH
64082: LD_INT 12
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: LD_INT 34
64091: PUSH
64092: LD_INT 51
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 34
64101: PUSH
64102: LD_INT 32
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 34
64111: PUSH
64112: LD_INT 89
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: PPUSH
64126: CALL_OW 72
64130: ST_TO_ADDR
// end ;
64131: LD_VAR 0 2
64135: RET
// export function Negate ( value ) ; begin
64136: LD_INT 0
64138: PPUSH
// result := not value ;
64139: LD_ADDR_VAR 0 2
64143: PUSH
64144: LD_VAR 0 1
64148: NOT
64149: ST_TO_ADDR
// end ;
64150: LD_VAR 0 2
64154: RET
// export function Inc ( value ) ; begin
64155: LD_INT 0
64157: PPUSH
// result := value + 1 ;
64158: LD_ADDR_VAR 0 2
64162: PUSH
64163: LD_VAR 0 1
64167: PUSH
64168: LD_INT 1
64170: PLUS
64171: ST_TO_ADDR
// end ;
64172: LD_VAR 0 2
64176: RET
// export function Dec ( value ) ; begin
64177: LD_INT 0
64179: PPUSH
// result := value - 1 ;
64180: LD_ADDR_VAR 0 2
64184: PUSH
64185: LD_VAR 0 1
64189: PUSH
64190: LD_INT 1
64192: MINUS
64193: ST_TO_ADDR
// end ;
64194: LD_VAR 0 2
64198: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64199: LD_INT 0
64201: PPUSH
64202: PPUSH
64203: PPUSH
64204: PPUSH
64205: PPUSH
64206: PPUSH
64207: PPUSH
64208: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64209: LD_VAR 0 1
64213: PPUSH
64214: LD_VAR 0 2
64218: PPUSH
64219: CALL_OW 488
64223: NOT
64224: IFTRUE 64243
64226: PUSH
64227: LD_VAR 0 3
64231: PPUSH
64232: LD_VAR 0 4
64236: PPUSH
64237: CALL_OW 488
64241: NOT
64242: OR
64243: IFFALSE 64256
// begin result := - 1 ;
64245: LD_ADDR_VAR 0 5
64249: PUSH
64250: LD_INT 1
64252: NEG
64253: ST_TO_ADDR
// exit ;
64254: GO 64491
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64256: LD_ADDR_VAR 0 12
64260: PUSH
64261: LD_VAR 0 1
64265: PPUSH
64266: LD_VAR 0 2
64270: PPUSH
64271: LD_VAR 0 3
64275: PPUSH
64276: LD_VAR 0 4
64280: PPUSH
64281: CALL 63327 0 4
64285: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64286: LD_ADDR_VAR 0 11
64290: PUSH
64291: LD_VAR 0 1
64295: PPUSH
64296: LD_VAR 0 2
64300: PPUSH
64301: LD_VAR 0 12
64305: PUSH
64306: LD_INT 1
64308: ARRAY
64309: PPUSH
64310: LD_VAR 0 12
64314: PUSH
64315: LD_INT 2
64317: ARRAY
64318: PPUSH
64319: CALL_OW 298
64323: ST_TO_ADDR
// distance := 9999 ;
64324: LD_ADDR_VAR 0 10
64328: PUSH
64329: LD_INT 9999
64331: ST_TO_ADDR
// for i := 0 to 5 do
64332: LD_ADDR_VAR 0 6
64336: PUSH
64337: DOUBLE
64338: LD_INT 0
64340: DEC
64341: ST_TO_ADDR
64342: LD_INT 5
64344: PUSH
64345: FOR_TO
64346: IFFALSE 64489
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64348: LD_ADDR_VAR 0 7
64352: PUSH
64353: LD_VAR 0 1
64357: PPUSH
64358: LD_VAR 0 6
64362: PPUSH
64363: LD_VAR 0 11
64367: PPUSH
64368: CALL_OW 272
64372: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64373: LD_ADDR_VAR 0 8
64377: PUSH
64378: LD_VAR 0 2
64382: PPUSH
64383: LD_VAR 0 6
64387: PPUSH
64388: LD_VAR 0 11
64392: PPUSH
64393: CALL_OW 273
64397: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64398: LD_VAR 0 7
64402: PPUSH
64403: LD_VAR 0 8
64407: PPUSH
64408: CALL_OW 488
64412: NOT
64413: IFFALSE 64417
// continue ;
64415: GO 64345
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64417: LD_ADDR_VAR 0 9
64421: PUSH
64422: LD_VAR 0 12
64426: PUSH
64427: LD_INT 1
64429: ARRAY
64430: PPUSH
64431: LD_VAR 0 12
64435: PUSH
64436: LD_INT 2
64438: ARRAY
64439: PPUSH
64440: LD_VAR 0 7
64444: PPUSH
64445: LD_VAR 0 8
64449: PPUSH
64450: CALL_OW 298
64454: ST_TO_ADDR
// if tmp < distance then
64455: LD_VAR 0 9
64459: PUSH
64460: LD_VAR 0 10
64464: LESS
64465: IFFALSE 64487
// begin result := i ;
64467: LD_ADDR_VAR 0 5
64471: PUSH
64472: LD_VAR 0 6
64476: ST_TO_ADDR
// distance := tmp ;
64477: LD_ADDR_VAR 0 10
64481: PUSH
64482: LD_VAR 0 9
64486: ST_TO_ADDR
// end ; end ;
64487: GO 64345
64489: POP
64490: POP
// end ;
64491: LD_VAR 0 5
64495: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64496: LD_INT 0
64498: PPUSH
64499: PPUSH
// if not driver or not IsInUnit ( driver ) then
64500: LD_VAR 0 1
64504: NOT
64505: IFTRUE 64519
64507: PUSH
64508: LD_VAR 0 1
64512: PPUSH
64513: CALL_OW 310
64517: NOT
64518: OR
64519: IFFALSE 64523
// exit ;
64521: GO 64613
// vehicle := IsInUnit ( driver ) ;
64523: LD_ADDR_VAR 0 3
64527: PUSH
64528: LD_VAR 0 1
64532: PPUSH
64533: CALL_OW 310
64537: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64538: LD_VAR 0 1
64542: PPUSH
64543: LD_STRING \
64545: PUSH
64546: LD_INT 0
64548: PUSH
64549: LD_INT 0
64551: PUSH
64552: LD_INT 0
64554: PUSH
64555: LD_INT 0
64557: PUSH
64558: LD_INT 0
64560: PUSH
64561: LD_INT 0
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: PUSH
64573: LD_STRING E
64575: PUSH
64576: LD_INT 0
64578: PUSH
64579: LD_INT 0
64581: PUSH
64582: LD_VAR 0 3
64586: PUSH
64587: LD_INT 0
64589: PUSH
64590: LD_INT 0
64592: PUSH
64593: LD_INT 0
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PPUSH
64609: CALL_OW 446
// end ;
64613: LD_VAR 0 2
64617: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64618: LD_INT 0
64620: PPUSH
64621: PPUSH
// if not driver or not IsInUnit ( driver ) then
64622: LD_VAR 0 1
64626: NOT
64627: IFTRUE 64641
64629: PUSH
64630: LD_VAR 0 1
64634: PPUSH
64635: CALL_OW 310
64639: NOT
64640: OR
64641: IFFALSE 64645
// exit ;
64643: GO 64735
// vehicle := IsInUnit ( driver ) ;
64645: LD_ADDR_VAR 0 3
64649: PUSH
64650: LD_VAR 0 1
64654: PPUSH
64655: CALL_OW 310
64659: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64660: LD_VAR 0 1
64664: PPUSH
64665: LD_STRING \
64667: PUSH
64668: LD_INT 0
64670: PUSH
64671: LD_INT 0
64673: PUSH
64674: LD_INT 0
64676: PUSH
64677: LD_INT 0
64679: PUSH
64680: LD_INT 0
64682: PUSH
64683: LD_INT 0
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: PUSH
64695: LD_STRING E
64697: PUSH
64698: LD_INT 0
64700: PUSH
64701: LD_INT 0
64703: PUSH
64704: LD_VAR 0 3
64708: PUSH
64709: LD_INT 0
64711: PUSH
64712: LD_INT 0
64714: PUSH
64715: LD_INT 0
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PPUSH
64731: CALL_OW 447
// end ;
64735: LD_VAR 0 2
64739: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64740: LD_INT 0
64742: PPUSH
64743: PPUSH
64744: PPUSH
// tmp := [ ] ;
64745: LD_ADDR_VAR 0 5
64749: PUSH
64750: EMPTY
64751: ST_TO_ADDR
// for i in units do
64752: LD_ADDR_VAR 0 4
64756: PUSH
64757: LD_VAR 0 1
64761: PUSH
64762: FOR_IN
64763: IFFALSE 64801
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64765: LD_ADDR_VAR 0 5
64769: PUSH
64770: LD_VAR 0 5
64774: PPUSH
64775: LD_VAR 0 5
64779: PUSH
64780: LD_INT 1
64782: PLUS
64783: PPUSH
64784: LD_VAR 0 4
64788: PPUSH
64789: CALL_OW 256
64793: PPUSH
64794: CALL_OW 2
64798: ST_TO_ADDR
64799: GO 64762
64801: POP
64802: POP
// if not tmp then
64803: LD_VAR 0 5
64807: NOT
64808: IFFALSE 64812
// exit ;
64810: GO 64860
// if asc then
64812: LD_VAR 0 2
64816: IFFALSE 64840
// result := SortListByListAsc ( units , tmp ) else
64818: LD_ADDR_VAR 0 3
64822: PUSH
64823: LD_VAR 0 1
64827: PPUSH
64828: LD_VAR 0 5
64832: PPUSH
64833: CALL_OW 76
64837: ST_TO_ADDR
64838: GO 64860
// result := SortListByListDesc ( units , tmp ) ;
64840: LD_ADDR_VAR 0 3
64844: PUSH
64845: LD_VAR 0 1
64849: PPUSH
64850: LD_VAR 0 5
64854: PPUSH
64855: CALL_OW 77
64859: ST_TO_ADDR
// end ;
64860: LD_VAR 0 3
64864: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64865: LD_INT 0
64867: PPUSH
64868: PPUSH
// task := GetTaskList ( mech ) ;
64869: LD_ADDR_VAR 0 4
64873: PUSH
64874: LD_VAR 0 1
64878: PPUSH
64879: CALL_OW 437
64883: ST_TO_ADDR
// if not task then
64884: LD_VAR 0 4
64888: NOT
64889: IFFALSE 64893
// exit ;
64891: GO 64937
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64893: LD_ADDR_VAR 0 3
64897: PUSH
64898: LD_VAR 0 4
64902: PUSH
64903: LD_INT 1
64905: ARRAY
64906: PUSH
64907: LD_INT 1
64909: ARRAY
64910: PUSH
64911: LD_STRING r
64913: EQUAL
64914: IFFALSE 64936
64916: PUSH
64917: LD_VAR 0 4
64921: PUSH
64922: LD_INT 1
64924: ARRAY
64925: PUSH
64926: LD_INT 4
64928: ARRAY
64929: PUSH
64930: LD_VAR 0 2
64934: EQUAL
64935: AND
64936: ST_TO_ADDR
// end ;
64937: LD_VAR 0 3
64941: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64942: LD_INT 0
64944: PPUSH
// SetDir ( unit , d ) ;
64945: LD_VAR 0 1
64949: PPUSH
64950: LD_VAR 0 4
64954: PPUSH
64955: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
64959: LD_ADDR_VAR 0 6
64963: PUSH
64964: LD_VAR 0 1
64968: PPUSH
64969: LD_VAR 0 2
64973: PPUSH
64974: LD_VAR 0 3
64978: PPUSH
64979: LD_VAR 0 5
64983: PPUSH
64984: CALL_OW 48
64988: ST_TO_ADDR
// end ;
64989: LD_VAR 0 6
64993: RET
// export function ToNaturalNumber ( number ) ; begin
64994: LD_INT 0
64996: PPUSH
// result := number div 1 ;
64997: LD_ADDR_VAR 0 2
65001: PUSH
65002: LD_VAR 0 1
65006: PUSH
65007: LD_INT 1
65009: DIV
65010: ST_TO_ADDR
// if number < 0 then
65011: LD_VAR 0 1
65015: PUSH
65016: LD_INT 0
65018: LESS
65019: IFFALSE 65029
// result := 0 ;
65021: LD_ADDR_VAR 0 2
65025: PUSH
65026: LD_INT 0
65028: ST_TO_ADDR
// end ;
65029: LD_VAR 0 2
65033: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
65034: LD_INT 0
65036: PPUSH
65037: PPUSH
65038: PPUSH
// if not buildings then
65039: LD_VAR 0 1
65043: NOT
65044: IFFALSE 65048
// exit ;
65046: GO 65163
// tmp := [ ] ;
65048: LD_ADDR_VAR 0 5
65052: PUSH
65053: EMPTY
65054: ST_TO_ADDR
// for b in buildings do
65055: LD_ADDR_VAR 0 4
65059: PUSH
65060: LD_VAR 0 1
65064: PUSH
65065: FOR_IN
65066: IFFALSE 65104
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
65068: LD_ADDR_VAR 0 5
65072: PUSH
65073: LD_VAR 0 5
65077: PPUSH
65078: LD_VAR 0 5
65082: PUSH
65083: LD_INT 1
65085: PLUS
65086: PPUSH
65087: LD_VAR 0 4
65091: PPUSH
65092: CALL_OW 266
65096: PPUSH
65097: CALL_OW 1
65101: ST_TO_ADDR
65102: GO 65065
65104: POP
65105: POP
// if not tmp then
65106: LD_VAR 0 5
65110: NOT
65111: IFFALSE 65115
// exit ;
65113: GO 65163
// if asc then
65115: LD_VAR 0 2
65119: IFFALSE 65143
// result := SortListByListAsc ( buildings , tmp ) else
65121: LD_ADDR_VAR 0 3
65125: PUSH
65126: LD_VAR 0 1
65130: PPUSH
65131: LD_VAR 0 5
65135: PPUSH
65136: CALL_OW 76
65140: ST_TO_ADDR
65141: GO 65163
// result := SortListByListDesc ( buildings , tmp ) ;
65143: LD_ADDR_VAR 0 3
65147: PUSH
65148: LD_VAR 0 1
65152: PPUSH
65153: LD_VAR 0 5
65157: PPUSH
65158: CALL_OW 77
65162: ST_TO_ADDR
// end ;
65163: LD_VAR 0 3
65167: RET
// export function SortByClass ( units , class ) ; var un ; begin
65168: LD_INT 0
65170: PPUSH
65171: PPUSH
// if not units or not class then
65172: LD_VAR 0 1
65176: NOT
65177: IFTRUE 65186
65179: PUSH
65180: LD_VAR 0 2
65184: NOT
65185: OR
65186: IFFALSE 65190
// exit ;
65188: GO 65285
// result := [ ] ;
65190: LD_ADDR_VAR 0 3
65194: PUSH
65195: EMPTY
65196: ST_TO_ADDR
// for un in units do
65197: LD_ADDR_VAR 0 4
65201: PUSH
65202: LD_VAR 0 1
65206: PUSH
65207: FOR_IN
65208: IFFALSE 65283
// if GetClass ( un ) = class then
65210: LD_VAR 0 4
65214: PPUSH
65215: CALL_OW 257
65219: PUSH
65220: LD_VAR 0 2
65224: EQUAL
65225: IFFALSE 65252
// result := Insert ( result , 1 , un ) else
65227: LD_ADDR_VAR 0 3
65231: PUSH
65232: LD_VAR 0 3
65236: PPUSH
65237: LD_INT 1
65239: PPUSH
65240: LD_VAR 0 4
65244: PPUSH
65245: CALL_OW 2
65249: ST_TO_ADDR
65250: GO 65281
// result := Replace ( result , result + 1 , un ) ;
65252: LD_ADDR_VAR 0 3
65256: PUSH
65257: LD_VAR 0 3
65261: PPUSH
65262: LD_VAR 0 3
65266: PUSH
65267: LD_INT 1
65269: PLUS
65270: PPUSH
65271: LD_VAR 0 4
65275: PPUSH
65276: CALL_OW 1
65280: ST_TO_ADDR
65281: GO 65207
65283: POP
65284: POP
// end ;
65285: LD_VAR 0 3
65289: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65290: LD_INT 0
65292: PPUSH
65293: PPUSH
65294: PPUSH
65295: PPUSH
65296: PPUSH
65297: PPUSH
65298: PPUSH
// result := [ ] ;
65299: LD_ADDR_VAR 0 4
65303: PUSH
65304: EMPTY
65305: ST_TO_ADDR
// if x - r < 0 then
65306: LD_VAR 0 1
65310: PUSH
65311: LD_VAR 0 3
65315: MINUS
65316: PUSH
65317: LD_INT 0
65319: LESS
65320: IFFALSE 65332
// min_x := 0 else
65322: LD_ADDR_VAR 0 8
65326: PUSH
65327: LD_INT 0
65329: ST_TO_ADDR
65330: GO 65348
// min_x := x - r ;
65332: LD_ADDR_VAR 0 8
65336: PUSH
65337: LD_VAR 0 1
65341: PUSH
65342: LD_VAR 0 3
65346: MINUS
65347: ST_TO_ADDR
// if y - r < 0 then
65348: LD_VAR 0 2
65352: PUSH
65353: LD_VAR 0 3
65357: MINUS
65358: PUSH
65359: LD_INT 0
65361: LESS
65362: IFFALSE 65374
// min_y := 0 else
65364: LD_ADDR_VAR 0 7
65368: PUSH
65369: LD_INT 0
65371: ST_TO_ADDR
65372: GO 65390
// min_y := y - r ;
65374: LD_ADDR_VAR 0 7
65378: PUSH
65379: LD_VAR 0 2
65383: PUSH
65384: LD_VAR 0 3
65388: MINUS
65389: ST_TO_ADDR
// max_x := x + r ;
65390: LD_ADDR_VAR 0 9
65394: PUSH
65395: LD_VAR 0 1
65399: PUSH
65400: LD_VAR 0 3
65404: PLUS
65405: ST_TO_ADDR
// max_y := y + r ;
65406: LD_ADDR_VAR 0 10
65410: PUSH
65411: LD_VAR 0 2
65415: PUSH
65416: LD_VAR 0 3
65420: PLUS
65421: ST_TO_ADDR
// for _x = min_x to max_x do
65422: LD_ADDR_VAR 0 5
65426: PUSH
65427: DOUBLE
65428: LD_VAR 0 8
65432: DEC
65433: ST_TO_ADDR
65434: LD_VAR 0 9
65438: PUSH
65439: FOR_TO
65440: IFFALSE 65541
// for _y = min_y to max_y do
65442: LD_ADDR_VAR 0 6
65446: PUSH
65447: DOUBLE
65448: LD_VAR 0 7
65452: DEC
65453: ST_TO_ADDR
65454: LD_VAR 0 10
65458: PUSH
65459: FOR_TO
65460: IFFALSE 65537
// begin if not ValidHex ( _x , _y ) then
65462: LD_VAR 0 5
65466: PPUSH
65467: LD_VAR 0 6
65471: PPUSH
65472: CALL_OW 488
65476: NOT
65477: IFFALSE 65481
// continue ;
65479: GO 65459
// if GetResourceTypeXY ( _x , _y ) then
65481: LD_VAR 0 5
65485: PPUSH
65486: LD_VAR 0 6
65490: PPUSH
65491: CALL_OW 283
65495: IFFALSE 65535
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65497: LD_ADDR_VAR 0 4
65501: PUSH
65502: LD_VAR 0 4
65506: PPUSH
65507: LD_VAR 0 4
65511: PUSH
65512: LD_INT 1
65514: PLUS
65515: PPUSH
65516: LD_VAR 0 5
65520: PUSH
65521: LD_VAR 0 6
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PPUSH
65530: CALL_OW 1
65534: ST_TO_ADDR
// end ;
65535: GO 65459
65537: POP
65538: POP
65539: GO 65439
65541: POP
65542: POP
// end ;
65543: LD_VAR 0 4
65547: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65548: LD_INT 0
65550: PPUSH
65551: PPUSH
65552: PPUSH
65553: PPUSH
65554: PPUSH
65555: PPUSH
65556: PPUSH
65557: PPUSH
// if not units then
65558: LD_VAR 0 1
65562: NOT
65563: IFFALSE 65567
// exit ;
65565: GO 66099
// result := UnitFilter ( units , [ f_ok ] ) ;
65567: LD_ADDR_VAR 0 3
65571: PUSH
65572: LD_VAR 0 1
65576: PPUSH
65577: LD_INT 50
65579: PUSH
65580: EMPTY
65581: LIST
65582: PPUSH
65583: CALL_OW 72
65587: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65588: LD_ADDR_VAR 0 8
65592: PUSH
65593: LD_VAR 0 1
65597: PUSH
65598: LD_INT 1
65600: ARRAY
65601: PPUSH
65602: CALL_OW 255
65606: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65607: LD_ADDR_VAR 0 10
65611: PUSH
65612: LD_INT 29
65614: PUSH
65615: LD_INT 91
65617: PUSH
65618: LD_INT 49
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: LIST
65625: ST_TO_ADDR
// if not result then
65626: LD_VAR 0 3
65630: NOT
65631: IFFALSE 65635
// exit ;
65633: GO 66099
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65635: LD_ADDR_VAR 0 5
65639: PUSH
65640: LD_INT 81
65642: PUSH
65643: LD_VAR 0 8
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PPUSH
65652: CALL_OW 69
65656: ST_TO_ADDR
// for i in result do
65657: LD_ADDR_VAR 0 4
65661: PUSH
65662: LD_VAR 0 3
65666: PUSH
65667: FOR_IN
65668: IFFALSE 66097
// begin tag := GetTag ( i ) + 1 ;
65670: LD_ADDR_VAR 0 9
65674: PUSH
65675: LD_VAR 0 4
65679: PPUSH
65680: CALL_OW 110
65684: PUSH
65685: LD_INT 1
65687: PLUS
65688: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
65689: LD_ADDR_VAR 0 7
65693: PUSH
65694: LD_VAR 0 4
65698: PPUSH
65699: CALL_OW 250
65703: PPUSH
65704: LD_VAR 0 4
65708: PPUSH
65709: CALL_OW 251
65713: PPUSH
65714: LD_INT 4
65716: PPUSH
65717: CALL 65290 0 3
65721: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
65722: LD_VAR 0 4
65726: PPUSH
65727: CALL_OW 247
65731: PUSH
65732: LD_INT 2
65734: EQUAL
65735: IFFALSE 65747
65737: PUSH
65738: LD_VAR 0 7
65742: PUSH
65743: LD_INT 2
65745: GREATER
65746: AND
65747: IFFALSE 65767
65749: PUSH
65750: LD_VAR 0 4
65754: PPUSH
65755: CALL_OW 264
65759: PUSH
65760: LD_VAR 0 10
65764: IN
65765: NOT
65766: AND
65767: IFFALSE 65806
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65769: LD_VAR 0 4
65773: PPUSH
65774: LD_VAR 0 7
65778: PUSH
65779: LD_INT 1
65781: ARRAY
65782: PUSH
65783: LD_INT 1
65785: ARRAY
65786: PPUSH
65787: LD_VAR 0 7
65791: PUSH
65792: LD_INT 1
65794: ARRAY
65795: PUSH
65796: LD_INT 2
65798: ARRAY
65799: PPUSH
65800: CALL_OW 116
65804: GO 66095
// if path > tag then
65806: LD_VAR 0 2
65810: PUSH
65811: LD_VAR 0 9
65815: GREATER
65816: IFFALSE 66024
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65818: LD_ADDR_VAR 0 6
65822: PUSH
65823: LD_VAR 0 5
65827: PPUSH
65828: LD_INT 91
65830: PUSH
65831: LD_VAR 0 4
65835: PUSH
65836: LD_INT 8
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: LIST
65843: PPUSH
65844: CALL_OW 72
65848: ST_TO_ADDR
// if nearEnemy then
65849: LD_VAR 0 6
65853: IFFALSE 65922
// begin if GetWeapon ( i ) = ru_time_lapser then
65855: LD_VAR 0 4
65859: PPUSH
65860: CALL_OW 264
65864: PUSH
65865: LD_INT 49
65867: EQUAL
65868: IFFALSE 65896
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65870: LD_VAR 0 4
65874: PPUSH
65875: LD_VAR 0 6
65879: PPUSH
65880: LD_VAR 0 4
65884: PPUSH
65885: CALL_OW 74
65889: PPUSH
65890: CALL_OW 112
65894: GO 65920
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65896: LD_VAR 0 4
65900: PPUSH
65901: LD_VAR 0 6
65905: PPUSH
65906: LD_VAR 0 4
65910: PPUSH
65911: CALL_OW 74
65915: PPUSH
65916: CALL 67180 0 2
// end else
65920: GO 66022
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65922: LD_VAR 0 4
65926: PPUSH
65927: LD_VAR 0 2
65931: PUSH
65932: LD_VAR 0 9
65936: ARRAY
65937: PUSH
65938: LD_INT 1
65940: ARRAY
65941: PPUSH
65942: LD_VAR 0 2
65946: PUSH
65947: LD_VAR 0 9
65951: ARRAY
65952: PUSH
65953: LD_INT 2
65955: ARRAY
65956: PPUSH
65957: CALL_OW 297
65961: PUSH
65962: LD_INT 6
65964: GREATER
65965: IFFALSE 66008
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65967: LD_VAR 0 4
65971: PPUSH
65972: LD_VAR 0 2
65976: PUSH
65977: LD_VAR 0 9
65981: ARRAY
65982: PUSH
65983: LD_INT 1
65985: ARRAY
65986: PPUSH
65987: LD_VAR 0 2
65991: PUSH
65992: LD_VAR 0 9
65996: ARRAY
65997: PUSH
65998: LD_INT 2
66000: ARRAY
66001: PPUSH
66002: CALL_OW 114
66006: GO 66022
// SetTag ( i , tag ) ;
66008: LD_VAR 0 4
66012: PPUSH
66013: LD_VAR 0 9
66017: PPUSH
66018: CALL_OW 109
// end else
66022: GO 66095
// if enemy then
66024: LD_VAR 0 5
66028: IFFALSE 66095
// begin if GetWeapon ( i ) = ru_time_lapser then
66030: LD_VAR 0 4
66034: PPUSH
66035: CALL_OW 264
66039: PUSH
66040: LD_INT 49
66042: EQUAL
66043: IFFALSE 66071
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66045: LD_VAR 0 4
66049: PPUSH
66050: LD_VAR 0 5
66054: PPUSH
66055: LD_VAR 0 4
66059: PPUSH
66060: CALL_OW 74
66064: PPUSH
66065: CALL_OW 112
66069: GO 66095
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66071: LD_VAR 0 4
66075: PPUSH
66076: LD_VAR 0 5
66080: PPUSH
66081: LD_VAR 0 4
66085: PPUSH
66086: CALL_OW 74
66090: PPUSH
66091: CALL 67180 0 2
// end ; end ;
66095: GO 65667
66097: POP
66098: POP
// end ;
66099: LD_VAR 0 3
66103: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66104: LD_INT 0
66106: PPUSH
66107: PPUSH
66108: PPUSH
// if not unit or IsInUnit ( unit ) then
66109: LD_VAR 0 1
66113: NOT
66114: IFTRUE 66127
66116: PUSH
66117: LD_VAR 0 1
66121: PPUSH
66122: CALL_OW 310
66126: OR
66127: IFFALSE 66131
// exit ;
66129: GO 66222
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66131: LD_ADDR_VAR 0 4
66135: PUSH
66136: LD_VAR 0 1
66140: PPUSH
66141: CALL_OW 250
66145: PPUSH
66146: LD_VAR 0 2
66150: PPUSH
66151: LD_INT 1
66153: PPUSH
66154: CALL_OW 272
66158: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66159: LD_ADDR_VAR 0 5
66163: PUSH
66164: LD_VAR 0 1
66168: PPUSH
66169: CALL_OW 251
66173: PPUSH
66174: LD_VAR 0 2
66178: PPUSH
66179: LD_INT 1
66181: PPUSH
66182: CALL_OW 273
66186: ST_TO_ADDR
// if ValidHex ( x , y ) then
66187: LD_VAR 0 4
66191: PPUSH
66192: LD_VAR 0 5
66196: PPUSH
66197: CALL_OW 488
66201: IFFALSE 66222
// ComTurnXY ( unit , x , y ) ;
66203: LD_VAR 0 1
66207: PPUSH
66208: LD_VAR 0 4
66212: PPUSH
66213: LD_VAR 0 5
66217: PPUSH
66218: CALL_OW 118
// end ;
66222: LD_VAR 0 3
66226: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66227: LD_INT 0
66229: PPUSH
66230: PPUSH
// result := false ;
66231: LD_ADDR_VAR 0 3
66235: PUSH
66236: LD_INT 0
66238: ST_TO_ADDR
// if not units then
66239: LD_VAR 0 2
66243: NOT
66244: IFFALSE 66248
// exit ;
66246: GO 66293
// for i in units do
66248: LD_ADDR_VAR 0 4
66252: PUSH
66253: LD_VAR 0 2
66257: PUSH
66258: FOR_IN
66259: IFFALSE 66291
// if See ( side , i ) then
66261: LD_VAR 0 1
66265: PPUSH
66266: LD_VAR 0 4
66270: PPUSH
66271: CALL_OW 292
66275: IFFALSE 66289
// begin result := true ;
66277: LD_ADDR_VAR 0 3
66281: PUSH
66282: LD_INT 1
66284: ST_TO_ADDR
// exit ;
66285: POP
66286: POP
66287: GO 66293
// end ;
66289: GO 66258
66291: POP
66292: POP
// end ;
66293: LD_VAR 0 3
66297: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66298: LD_INT 0
66300: PPUSH
66301: PPUSH
66302: PPUSH
66303: PPUSH
// if not unit or not points then
66304: LD_VAR 0 1
66308: NOT
66309: IFTRUE 66318
66311: PUSH
66312: LD_VAR 0 2
66316: NOT
66317: OR
66318: IFFALSE 66322
// exit ;
66320: GO 66412
// dist := 99999 ;
66322: LD_ADDR_VAR 0 5
66326: PUSH
66327: LD_INT 99999
66329: ST_TO_ADDR
// for i in points do
66330: LD_ADDR_VAR 0 4
66334: PUSH
66335: LD_VAR 0 2
66339: PUSH
66340: FOR_IN
66341: IFFALSE 66410
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66343: LD_ADDR_VAR 0 6
66347: PUSH
66348: LD_VAR 0 1
66352: PPUSH
66353: LD_VAR 0 4
66357: PUSH
66358: LD_INT 1
66360: ARRAY
66361: PPUSH
66362: LD_VAR 0 4
66366: PUSH
66367: LD_INT 2
66369: ARRAY
66370: PPUSH
66371: CALL_OW 297
66375: ST_TO_ADDR
// if tmpDist < dist then
66376: LD_VAR 0 6
66380: PUSH
66381: LD_VAR 0 5
66385: LESS
66386: IFFALSE 66408
// begin result := i ;
66388: LD_ADDR_VAR 0 3
66392: PUSH
66393: LD_VAR 0 4
66397: ST_TO_ADDR
// dist := tmpDist ;
66398: LD_ADDR_VAR 0 5
66402: PUSH
66403: LD_VAR 0 6
66407: ST_TO_ADDR
// end ; end ;
66408: GO 66340
66410: POP
66411: POP
// end ;
66412: LD_VAR 0 3
66416: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66417: LD_INT 0
66419: PPUSH
// uc_side := side ;
66420: LD_ADDR_OWVAR 20
66424: PUSH
66425: LD_VAR 0 1
66429: ST_TO_ADDR
// uc_nation := 3 ;
66430: LD_ADDR_OWVAR 21
66434: PUSH
66435: LD_INT 3
66437: ST_TO_ADDR
// vc_chassis := 25 ;
66438: LD_ADDR_OWVAR 37
66442: PUSH
66443: LD_INT 25
66445: ST_TO_ADDR
// vc_engine := engine_siberite ;
66446: LD_ADDR_OWVAR 39
66450: PUSH
66451: LD_INT 3
66453: ST_TO_ADDR
// vc_control := control_computer ;
66454: LD_ADDR_OWVAR 38
66458: PUSH
66459: LD_INT 3
66461: ST_TO_ADDR
// vc_weapon := 59 ;
66462: LD_ADDR_OWVAR 40
66466: PUSH
66467: LD_INT 59
66469: ST_TO_ADDR
// result := CreateVehicle ;
66470: LD_ADDR_VAR 0 5
66474: PUSH
66475: CALL_OW 45
66479: ST_TO_ADDR
// SetDir ( result , d ) ;
66480: LD_VAR 0 5
66484: PPUSH
66485: LD_VAR 0 4
66489: PPUSH
66490: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66494: LD_VAR 0 5
66498: PPUSH
66499: LD_VAR 0 2
66503: PPUSH
66504: LD_VAR 0 3
66508: PPUSH
66509: LD_INT 0
66511: PPUSH
66512: CALL_OW 48
// end ;
66516: LD_VAR 0 5
66520: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66521: LD_INT 0
66523: PPUSH
66524: PPUSH
66525: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66526: LD_ADDR_VAR 0 2
66530: PUSH
66531: LD_INT 0
66533: PUSH
66534: LD_INT 0
66536: PUSH
66537: LD_INT 0
66539: PUSH
66540: LD_INT 0
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: LIST
66547: LIST
66548: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66549: LD_VAR 0 1
66553: NOT
66554: IFTRUE 66587
66556: PUSH
66557: LD_VAR 0 1
66561: PPUSH
66562: CALL_OW 264
66566: PUSH
66567: LD_INT 12
66569: PUSH
66570: LD_INT 51
66572: PUSH
66573: LD_INT 32
66575: PUSH
66576: LD_INT 89
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: LIST
66583: LIST
66584: IN
66585: NOT
66586: OR
66587: IFFALSE 66591
// exit ;
66589: GO 66689
// for i := 1 to 3 do
66591: LD_ADDR_VAR 0 3
66595: PUSH
66596: DOUBLE
66597: LD_INT 1
66599: DEC
66600: ST_TO_ADDR
66601: LD_INT 3
66603: PUSH
66604: FOR_TO
66605: IFFALSE 66687
// begin tmp := GetCargo ( cargo , i ) ;
66607: LD_ADDR_VAR 0 4
66611: PUSH
66612: LD_VAR 0 1
66616: PPUSH
66617: LD_VAR 0 3
66621: PPUSH
66622: CALL_OW 289
66626: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66627: LD_ADDR_VAR 0 2
66631: PUSH
66632: LD_VAR 0 2
66636: PPUSH
66637: LD_VAR 0 3
66641: PPUSH
66642: LD_VAR 0 4
66646: PPUSH
66647: CALL_OW 1
66651: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66652: LD_ADDR_VAR 0 2
66656: PUSH
66657: LD_VAR 0 2
66661: PPUSH
66662: LD_INT 4
66664: PPUSH
66665: LD_VAR 0 2
66669: PUSH
66670: LD_INT 4
66672: ARRAY
66673: PUSH
66674: LD_VAR 0 4
66678: PLUS
66679: PPUSH
66680: CALL_OW 1
66684: ST_TO_ADDR
// end ;
66685: GO 66604
66687: POP
66688: POP
// end ;
66689: LD_VAR 0 2
66693: RET
// export function Length ( array ) ; begin
66694: LD_INT 0
66696: PPUSH
// result := array + 0 ;
66697: LD_ADDR_VAR 0 2
66701: PUSH
66702: LD_VAR 0 1
66706: PUSH
66707: LD_INT 0
66709: PLUS
66710: ST_TO_ADDR
// end ;
66711: LD_VAR 0 2
66715: RET
// export function PrepareArray ( array ) ; begin
66716: LD_INT 0
66718: PPUSH
// result := array diff 0 ;
66719: LD_ADDR_VAR 0 2
66723: PUSH
66724: LD_VAR 0 1
66728: PUSH
66729: LD_INT 0
66731: DIFF
66732: ST_TO_ADDR
// if not result [ 1 ] then
66733: LD_VAR 0 2
66737: PUSH
66738: LD_INT 1
66740: ARRAY
66741: NOT
66742: IFFALSE 66762
// result := Delete ( result , 1 ) ;
66744: LD_ADDR_VAR 0 2
66748: PUSH
66749: LD_VAR 0 2
66753: PPUSH
66754: LD_INT 1
66756: PPUSH
66757: CALL_OW 3
66761: ST_TO_ADDR
// end ;
66762: LD_VAR 0 2
66766: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
66767: LD_INT 0
66769: PPUSH
66770: PPUSH
66771: PPUSH
66772: PPUSH
// sibRocketRange := 25 ;
66773: LD_ADDR_VAR 0 6
66777: PUSH
66778: LD_INT 25
66780: ST_TO_ADDR
// result := false ;
66781: LD_ADDR_VAR 0 4
66785: PUSH
66786: LD_INT 0
66788: ST_TO_ADDR
// for i := 0 to 5 do
66789: LD_ADDR_VAR 0 5
66793: PUSH
66794: DOUBLE
66795: LD_INT 0
66797: DEC
66798: ST_TO_ADDR
66799: LD_INT 5
66801: PUSH
66802: FOR_TO
66803: IFFALSE 66870
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
66805: LD_VAR 0 1
66809: PPUSH
66810: LD_VAR 0 5
66814: PPUSH
66815: LD_VAR 0 6
66819: PPUSH
66820: CALL_OW 272
66824: PPUSH
66825: LD_VAR 0 2
66829: PPUSH
66830: LD_VAR 0 5
66834: PPUSH
66835: LD_VAR 0 6
66839: PPUSH
66840: CALL_OW 273
66844: PPUSH
66845: LD_VAR 0 3
66849: PPUSH
66850: CALL_OW 309
66854: IFFALSE 66868
// begin result := true ;
66856: LD_ADDR_VAR 0 4
66860: PUSH
66861: LD_INT 1
66863: ST_TO_ADDR
// exit ;
66864: POP
66865: POP
66866: GO 66872
// end ;
66868: GO 66802
66870: POP
66871: POP
// end ;
66872: LD_VAR 0 4
66876: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
66877: LD_INT 0
66879: PPUSH
66880: PPUSH
66881: PPUSH
// if btype = b_depot then
66882: LD_VAR 0 2
66886: PUSH
66887: LD_INT 0
66889: EQUAL
66890: IFFALSE 66902
// begin result := true ;
66892: LD_ADDR_VAR 0 3
66896: PUSH
66897: LD_INT 1
66899: ST_TO_ADDR
// exit ;
66900: GO 67022
// end ; pom := GetBase ( depot ) ;
66902: LD_ADDR_VAR 0 4
66906: PUSH
66907: LD_VAR 0 1
66911: PPUSH
66912: CALL_OW 274
66916: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
66917: LD_ADDR_VAR 0 5
66921: PUSH
66922: LD_VAR 0 2
66926: PPUSH
66927: LD_VAR 0 1
66931: PPUSH
66932: CALL_OW 248
66936: PPUSH
66937: CALL_OW 450
66941: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
66942: LD_ADDR_VAR 0 3
66946: PUSH
66947: LD_VAR 0 4
66951: PPUSH
66952: LD_INT 1
66954: PPUSH
66955: CALL_OW 275
66959: PUSH
66960: LD_VAR 0 5
66964: PUSH
66965: LD_INT 1
66967: ARRAY
66968: GREATEREQUAL
66969: IFFALSE 66995
66971: PUSH
66972: LD_VAR 0 4
66976: PPUSH
66977: LD_INT 2
66979: PPUSH
66980: CALL_OW 275
66984: PUSH
66985: LD_VAR 0 5
66989: PUSH
66990: LD_INT 2
66992: ARRAY
66993: GREATEREQUAL
66994: AND
66995: IFFALSE 67021
66997: PUSH
66998: LD_VAR 0 4
67002: PPUSH
67003: LD_INT 3
67005: PPUSH
67006: CALL_OW 275
67010: PUSH
67011: LD_VAR 0 5
67015: PUSH
67016: LD_INT 3
67018: ARRAY
67019: GREATEREQUAL
67020: AND
67021: ST_TO_ADDR
// end ;
67022: LD_VAR 0 3
67026: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
67027: LD_INT 0
67029: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
67030: LD_VAR 0 1
67034: PPUSH
67035: LD_VAR 0 2
67039: PPUSH
67040: LD_INT 0
67042: PPUSH
67043: LD_INT 0
67045: PPUSH
67046: LD_INT 1
67048: PPUSH
67049: LD_INT 0
67051: PPUSH
67052: CALL_OW 587
// end ;
67056: LD_VAR 0 3
67060: RET
// export function CenterOnNow ( unit ) ; begin
67061: LD_INT 0
67063: PPUSH
// result := IsInUnit ( unit ) ;
67064: LD_ADDR_VAR 0 2
67068: PUSH
67069: LD_VAR 0 1
67073: PPUSH
67074: CALL_OW 310
67078: ST_TO_ADDR
// if not result then
67079: LD_VAR 0 2
67083: NOT
67084: IFFALSE 67096
// result := unit ;
67086: LD_ADDR_VAR 0 2
67090: PUSH
67091: LD_VAR 0 1
67095: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
67096: LD_VAR 0 1
67100: PPUSH
67101: CALL_OW 87
// end ;
67105: LD_VAR 0 2
67109: RET
// export function ComMoveHex ( unit , hex ) ; begin
67110: LD_INT 0
67112: PPUSH
// if not hex then
67113: LD_VAR 0 2
67117: NOT
67118: IFFALSE 67122
// exit ;
67120: GO 67175
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
67122: LD_VAR 0 2
67126: PUSH
67127: LD_INT 1
67129: ARRAY
67130: PPUSH
67131: LD_VAR 0 2
67135: PUSH
67136: LD_INT 2
67138: ARRAY
67139: PPUSH
67140: CALL_OW 428
67144: IFFALSE 67148
// exit ;
67146: GO 67175
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
67148: LD_VAR 0 1
67152: PPUSH
67153: LD_VAR 0 2
67157: PUSH
67158: LD_INT 1
67160: ARRAY
67161: PPUSH
67162: LD_VAR 0 2
67166: PUSH
67167: LD_INT 2
67169: ARRAY
67170: PPUSH
67171: CALL_OW 111
// end ;
67175: LD_VAR 0 3
67179: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
67180: LD_INT 0
67182: PPUSH
67183: PPUSH
67184: PPUSH
// if not unit or not enemy then
67185: LD_VAR 0 1
67189: NOT
67190: IFTRUE 67199
67192: PUSH
67193: LD_VAR 0 2
67197: NOT
67198: OR
67199: IFFALSE 67203
// exit ;
67201: GO 67329
// x := GetX ( enemy ) ;
67203: LD_ADDR_VAR 0 4
67207: PUSH
67208: LD_VAR 0 2
67212: PPUSH
67213: CALL_OW 250
67217: ST_TO_ADDR
// y := GetY ( enemy ) ;
67218: LD_ADDR_VAR 0 5
67222: PUSH
67223: LD_VAR 0 2
67227: PPUSH
67228: CALL_OW 251
67232: ST_TO_ADDR
// if ValidHex ( x , y ) then
67233: LD_VAR 0 4
67237: PPUSH
67238: LD_VAR 0 5
67242: PPUSH
67243: CALL_OW 488
67247: IFFALSE 67329
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
67249: LD_VAR 0 2
67253: PPUSH
67254: CALL_OW 247
67258: PUSH
67259: LD_INT 3
67261: PUSH
67262: LD_INT 2
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: IN
67269: IFTRUE 67292
67271: PUSH
67272: LD_VAR 0 1
67276: PPUSH
67277: CALL_OW 255
67281: PPUSH
67282: LD_VAR 0 2
67286: PPUSH
67287: CALL_OW 292
67291: OR
67292: IFFALSE 67310
// ComAttackUnit ( unit , enemy ) else
67294: LD_VAR 0 1
67298: PPUSH
67299: LD_VAR 0 2
67303: PPUSH
67304: CALL_OW 115
67308: GO 67329
// ComAgressiveMove ( unit , x , y ) ;
67310: LD_VAR 0 1
67314: PPUSH
67315: LD_VAR 0 4
67319: PPUSH
67320: LD_VAR 0 5
67324: PPUSH
67325: CALL_OW 114
// end ;
67329: LD_VAR 0 3
67333: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
67334: LD_INT 0
67336: PPUSH
67337: PPUSH
67338: PPUSH
// list := AreaToList ( area , 0 ) ;
67339: LD_ADDR_VAR 0 5
67343: PUSH
67344: LD_VAR 0 1
67348: PPUSH
67349: LD_INT 0
67351: PPUSH
67352: CALL_OW 517
67356: ST_TO_ADDR
// if not list then
67357: LD_VAR 0 5
67361: NOT
67362: IFFALSE 67366
// exit ;
67364: GO 67496
// if all then
67366: LD_VAR 0 2
67370: IFFALSE 67458
// begin for i := 1 to list [ 1 ] do
67372: LD_ADDR_VAR 0 4
67376: PUSH
67377: DOUBLE
67378: LD_INT 1
67380: DEC
67381: ST_TO_ADDR
67382: LD_VAR 0 5
67386: PUSH
67387: LD_INT 1
67389: ARRAY
67390: PUSH
67391: FOR_TO
67392: IFFALSE 67454
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
67394: LD_ADDR_VAR 0 3
67398: PUSH
67399: LD_VAR 0 3
67403: PPUSH
67404: LD_VAR 0 3
67408: PUSH
67409: LD_INT 1
67411: PLUS
67412: PPUSH
67413: LD_VAR 0 5
67417: PUSH
67418: LD_INT 1
67420: ARRAY
67421: PUSH
67422: LD_VAR 0 4
67426: ARRAY
67427: PUSH
67428: LD_VAR 0 5
67432: PUSH
67433: LD_INT 2
67435: ARRAY
67436: PUSH
67437: LD_VAR 0 4
67441: ARRAY
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PPUSH
67447: CALL_OW 1
67451: ST_TO_ADDR
67452: GO 67391
67454: POP
67455: POP
// exit ;
67456: GO 67496
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
67458: LD_ADDR_VAR 0 3
67462: PUSH
67463: LD_VAR 0 5
67467: PUSH
67468: LD_INT 1
67470: ARRAY
67471: PUSH
67472: LD_INT 1
67474: ARRAY
67475: PUSH
67476: LD_VAR 0 5
67480: PUSH
67481: LD_INT 2
67483: ARRAY
67484: PUSH
67485: LD_INT 1
67487: ARRAY
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: EMPTY
67494: LIST
67495: ST_TO_ADDR
// end ;
67496: LD_VAR 0 3
67500: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
67501: LD_INT 0
67503: PPUSH
67504: PPUSH
// list := AreaToList ( area , 0 ) ;
67505: LD_ADDR_VAR 0 4
67509: PUSH
67510: LD_VAR 0 1
67514: PPUSH
67515: LD_INT 0
67517: PPUSH
67518: CALL_OW 517
67522: ST_TO_ADDR
// if not list then
67523: LD_VAR 0 4
67527: NOT
67528: IFFALSE 67532
// exit ;
67530: GO 67573
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
67532: LD_ADDR_VAR 0 3
67536: PUSH
67537: LD_VAR 0 4
67541: PUSH
67542: LD_INT 1
67544: ARRAY
67545: PUSH
67546: LD_INT 1
67548: ARRAY
67549: PUSH
67550: LD_VAR 0 4
67554: PUSH
67555: LD_INT 2
67557: ARRAY
67558: PUSH
67559: LD_INT 1
67561: ARRAY
67562: PUSH
67563: LD_VAR 0 2
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: LIST
67572: ST_TO_ADDR
// end ;
67573: LD_VAR 0 3
67577: RET
// export function First ( array ) ; begin
67578: LD_INT 0
67580: PPUSH
// if not array then
67581: LD_VAR 0 1
67585: NOT
67586: IFFALSE 67590
// exit ;
67588: GO 67604
// result := array [ 1 ] ;
67590: LD_ADDR_VAR 0 2
67594: PUSH
67595: LD_VAR 0 1
67599: PUSH
67600: LD_INT 1
67602: ARRAY
67603: ST_TO_ADDR
// end ;
67604: LD_VAR 0 2
67608: RET
// export function Last ( array ) ; begin
67609: LD_INT 0
67611: PPUSH
// if not array then
67612: LD_VAR 0 1
67616: NOT
67617: IFFALSE 67621
// exit ;
67619: GO 67637
// result := array [ array ] ;
67621: LD_ADDR_VAR 0 2
67625: PUSH
67626: LD_VAR 0 1
67630: PUSH
67631: LD_VAR 0 1
67635: ARRAY
67636: ST_TO_ADDR
// end ;
67637: LD_VAR 0 2
67641: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
67642: LD_INT 0
67644: PPUSH
67645: PPUSH
// result := [ ] ;
67646: LD_ADDR_VAR 0 5
67650: PUSH
67651: EMPTY
67652: ST_TO_ADDR
// if not array then
67653: LD_VAR 0 1
67657: NOT
67658: IFFALSE 67662
// exit ;
67660: GO 67774
// for i := 1 to array do
67662: LD_ADDR_VAR 0 6
67666: PUSH
67667: DOUBLE
67668: LD_INT 1
67670: DEC
67671: ST_TO_ADDR
67672: LD_VAR 0 1
67676: PUSH
67677: FOR_TO
67678: IFFALSE 67772
// if array [ i ] [ index ] = value then
67680: LD_VAR 0 1
67684: PUSH
67685: LD_VAR 0 6
67689: ARRAY
67690: PUSH
67691: LD_VAR 0 2
67695: ARRAY
67696: PUSH
67697: LD_VAR 0 3
67701: EQUAL
67702: IFFALSE 67770
// begin if indexColumn then
67704: LD_VAR 0 4
67708: IFFALSE 67744
// result := Join ( result , array [ i ] [ indexColumn ] ) else
67710: LD_ADDR_VAR 0 5
67714: PUSH
67715: LD_VAR 0 5
67719: PPUSH
67720: LD_VAR 0 1
67724: PUSH
67725: LD_VAR 0 6
67729: ARRAY
67730: PUSH
67731: LD_VAR 0 4
67735: ARRAY
67736: PPUSH
67737: CALL 62782 0 2
67741: ST_TO_ADDR
67742: GO 67770
// result := Join ( result , array [ i ] ) ;
67744: LD_ADDR_VAR 0 5
67748: PUSH
67749: LD_VAR 0 5
67753: PPUSH
67754: LD_VAR 0 1
67758: PUSH
67759: LD_VAR 0 6
67763: ARRAY
67764: PPUSH
67765: CALL 62782 0 2
67769: ST_TO_ADDR
// end ;
67770: GO 67677
67772: POP
67773: POP
// end ;
67774: LD_VAR 0 5
67778: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
67779: LD_INT 0
67781: PPUSH
// if not vehicles or not parkingPoint then
67782: LD_VAR 0 1
67786: NOT
67787: IFTRUE 67796
67789: PUSH
67790: LD_VAR 0 2
67794: NOT
67795: OR
67796: IFFALSE 67800
// exit ;
67798: GO 67898
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
67800: LD_ADDR_VAR 0 1
67804: PUSH
67805: LD_VAR 0 1
67809: PPUSH
67810: LD_INT 50
67812: PUSH
67813: EMPTY
67814: LIST
67815: PUSH
67816: LD_INT 3
67818: PUSH
67819: LD_INT 92
67821: PUSH
67822: LD_VAR 0 2
67826: PUSH
67827: LD_INT 1
67829: ARRAY
67830: PUSH
67831: LD_VAR 0 2
67835: PUSH
67836: LD_INT 2
67838: ARRAY
67839: PUSH
67840: LD_INT 8
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PPUSH
67857: CALL_OW 72
67861: ST_TO_ADDR
// if not vehicles then
67862: LD_VAR 0 1
67866: NOT
67867: IFFALSE 67871
// exit ;
67869: GO 67898
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
67871: LD_VAR 0 1
67875: PPUSH
67876: LD_VAR 0 2
67880: PUSH
67881: LD_INT 1
67883: ARRAY
67884: PPUSH
67885: LD_VAR 0 2
67889: PUSH
67890: LD_INT 2
67892: ARRAY
67893: PPUSH
67894: CALL_OW 111
// end ;
67898: LD_VAR 0 3
67902: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
67903: LD_INT 0
67905: PPUSH
67906: PPUSH
67907: PPUSH
// if not side or not area then
67908: LD_VAR 0 1
67912: NOT
67913: IFTRUE 67922
67915: PUSH
67916: LD_VAR 0 2
67920: NOT
67921: OR
67922: IFFALSE 67926
// exit ;
67924: GO 68045
// tmp := AreaToList ( area , 0 ) ;
67926: LD_ADDR_VAR 0 5
67930: PUSH
67931: LD_VAR 0 2
67935: PPUSH
67936: LD_INT 0
67938: PPUSH
67939: CALL_OW 517
67943: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
67944: LD_ADDR_VAR 0 4
67948: PUSH
67949: DOUBLE
67950: LD_INT 1
67952: DEC
67953: ST_TO_ADDR
67954: LD_VAR 0 5
67958: PUSH
67959: LD_INT 1
67961: ARRAY
67962: PUSH
67963: FOR_TO
67964: IFFALSE 68043
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
67966: LD_VAR 0 5
67970: PUSH
67971: LD_INT 1
67973: ARRAY
67974: PUSH
67975: LD_VAR 0 4
67979: ARRAY
67980: PPUSH
67981: LD_VAR 0 5
67985: PUSH
67986: LD_INT 2
67988: ARRAY
67989: PUSH
67990: LD_VAR 0 4
67994: ARRAY
67995: PPUSH
67996: CALL_OW 351
68000: IFFALSE 68041
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
68002: LD_VAR 0 5
68006: PUSH
68007: LD_INT 1
68009: ARRAY
68010: PUSH
68011: LD_VAR 0 4
68015: ARRAY
68016: PPUSH
68017: LD_VAR 0 5
68021: PUSH
68022: LD_INT 2
68024: ARRAY
68025: PUSH
68026: LD_VAR 0 4
68030: ARRAY
68031: PPUSH
68032: LD_VAR 0 1
68036: PPUSH
68037: CALL_OW 244
// end ;
68041: GO 67963
68043: POP
68044: POP
// end ;
68045: LD_VAR 0 3
68049: RET
// export function UniqueArray ( array ) ; var i ; begin
68050: LD_INT 0
68052: PPUSH
68053: PPUSH
// result := [ ] ;
68054: LD_ADDR_VAR 0 2
68058: PUSH
68059: EMPTY
68060: ST_TO_ADDR
// if not array then
68061: LD_VAR 0 1
68065: NOT
68066: IFFALSE 68070
// exit ;
68068: GO 68131
// for i := 1 to array do
68070: LD_ADDR_VAR 0 3
68074: PUSH
68075: DOUBLE
68076: LD_INT 1
68078: DEC
68079: ST_TO_ADDR
68080: LD_VAR 0 1
68084: PUSH
68085: FOR_TO
68086: IFFALSE 68129
// if not array [ i ] in result then
68088: LD_VAR 0 1
68092: PUSH
68093: LD_VAR 0 3
68097: ARRAY
68098: PUSH
68099: LD_VAR 0 2
68103: IN
68104: NOT
68105: IFFALSE 68127
// result := Join ( result , i ) ;
68107: LD_ADDR_VAR 0 2
68111: PUSH
68112: LD_VAR 0 2
68116: PPUSH
68117: LD_VAR 0 3
68121: PPUSH
68122: CALL 62782 0 2
68126: ST_TO_ADDR
68127: GO 68085
68129: POP
68130: POP
// end ; end_of_file
68131: LD_VAR 0 2
68135: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68136: LD_VAR 0 1
68140: PPUSH
68141: LD_VAR 0 2
68145: PPUSH
68146: LD_VAR 0 3
68150: PPUSH
68151: LD_VAR 0 4
68155: PPUSH
68156: LD_VAR 0 5
68160: PPUSH
68161: LD_VAR 0 6
68165: PPUSH
68166: CALL 2038 0 6
// end ;
68170: PPOPN 6
68172: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68173: LD_INT 0
68175: PPUSH
// begin if not units then
68176: LD_VAR 0 1
68180: NOT
68181: IFFALSE 68185
// exit ;
68183: GO 68219
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
68185: LD_VAR 0 1
68189: PPUSH
68190: LD_VAR 0 2
68194: PPUSH
68195: LD_VAR 0 3
68199: PPUSH
68200: LD_VAR 0 4
68204: PPUSH
68205: LD_VAR 0 5
68209: PPUSH
68210: LD_VAR 0 6
68214: PPUSH
68215: CALL 24555 0 6
// end ;
68219: PPOPN 7
68221: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68222: CALL 1918 0 0
// end ;
68226: PPOPN 1
68228: END
